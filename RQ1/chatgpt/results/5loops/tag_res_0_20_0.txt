source:
 tdata_t _TIFFmalloc ( tsize_t s ) <S2SV_StartBug> { <S2SV_EndBug> return ( malloc ( ( size_t ) s ) ) ; }

target:
tdata_t _TIFFmalloc ( tsize_t s ) { if ( s == 0 ) return ( ( void * ) NULL ) ; return ( malloc ( ( size_t ) s ) ) ; }
outputs:
match:0
source:
 static void skcipher_release ( void * private ) { <S2SV_StartBug> crypto_free_skcipher ( private ) ; <S2SV_EndBug> }

target:
static void skcipher_release ( void * private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm ) ; }
outputs:
static void skcipher_release(void* private) {
    if (private != NULL) {
        crypto_free_skcipher(private);
    }
}

--------------------
#include <stdlib.h>

static void skcipher_release(void* private) {
    free(private);
}

--------------------
#include <linux/slab.h>

static void skcipher_release(void* private) {
    kfree(private);
}

--------------------
#include <linux/slab.h>

static void skcipher_release(void* private) {
    if (private != NULL) {
        kfree(private);
    }
}

--------------------
#include <linux/slab.h>

static void skcipher_release(void* private) {
    if (private == NULL) {
        return;
    }
    
    crypto_free_skcipher(private);
}

--------------------
match:0
source:
 void _modinit ( module_t * m ) { service_named_bind_command ( "chanserv" , & cs_flags ) ; <S2SV_StartBug> } <S2SV_EndBug>

target:
void _modinit ( module_t * m ) { service_named_bind_command ( "chanserv" , & cs_flags ) ; add_bool_conf_item ( "ANOPE_FLAGS_COMPAT" , & chansvs . me -> conf_table , 0 , & anope_flags_compat , true ) ; hook_add_event ( "nick_can_register" ) ; hook_add_nick_can_register ( check_registration_keywords ) ; hook_add_event ( "user_can_register" ) ; hook_add_user_can_register ( check_registration_keywords ) ; }
outputs:
void _modinit ( module_t * m ) {
    if(service_find("chanserv")) {
        service_named_bind_command(service_find("chanserv"), &cs_flags);
    }
}

--------------------
void _modinit ( module_t * m ) {
    if(service_find("chanserv")) {
        command_add(&cs_flags, service_find("chanserv"));
    }
}

--------------------
void _modinit ( module_t * m ) {
    command_add(&cs_flags, service_find("chanserv"));
}

--------------------
void _modinit ( module_t * m ) {
    service_t *service = service_find("chanserv");
    if(service) {
        command_add(&cs_flags, service);
    }
}

--------------------
void _modinit ( module_t * m ) {
    service_t *service = service_find("chanserv");
    if(service) {
        service_bind_command(service, &cs_flags);
    }
}

--------------------
match:0
source:
 <S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) <S2SV_EndBug> { <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug> }

target:
void * H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } return malloc ( size * num ) ; }
outputs:
#include <stdlib.h>

void* H264SwDecMalloc(u32 size)
{
    return malloc(size);
}

--------------------
#include <stdlib.h>

void* H264SwDecMalloc(u32 size)
{
    void* ptr = malloc(size);
    if (ptr == NULL)
    {
        // Handle memory allocation error
    }
    return ptr;
}

--------------------
#include <stdlib.h>

void* H264SwDecMalloc(u32 size)
{
    if (size == 0)
    {
        // Handle zero-sized allocation
    }
    void* ptr = malloc(size);
    if (ptr == NULL)
    {
        // Handle memory allocation error
    }
    return ptr;
}

--------------------
#include <stdlib.h>

void* H264SwDecMalloc(u32 size)
{
    if (size == 0)
    {
        // Handle zero-sized allocation
    }
    void* ptr = calloc(1, size);
    if (ptr == NULL)
    {
        // Handle memory allocation error
    }
    return ptr;
}

--------------------
#include <stdlib.h>

void* myCustomAllocator(u32 size)
{
    // Implement custom memory allocation logic
    return NULL;
}

void* H264SwDecMalloc(u32 size)
{
    if (size == 0)
    {
        // Handle zero-sized allocation
    }
    void* ptr = myCustomAllocator(size);
    if (ptr == NULL)
    {
        // Handle memory allocation error
    }
    return ptr;
}

--------------------
match:0
source:
 static void ast_dealloc ( AST_object * self ) <S2SV_StartBug> { <S2SV_EndBug> Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; }

target:
static void ast_dealloc ( AST_object * self ) { PyObject_GC_UnTrack ( self ) ; Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; }
outputs:
static void ast_dealloc(AST_object *self) {
    Py_CLEAR(self->dict);
    Py_TYPE(self)->tp_free(self);
}

--------------------
static void ast_dealloc(AST_object *self) {
    if (self) {
        Py_CLEAR(self->dict);
        Py_TYPE(self)->tp_free(self);
    }
}

--------------------
static void ast_dealloc(AST_object *self) {
    if (self && Py_TYPE(self)) {
        Py_CLEAR(self->dict);
        Py_TYPE(self)->tp_free((PyObject *)self);
    }
}

--------------------
static void ast_dealloc(AST_object *self) {
    if (self) {
        if (self->dict) {
            Py_DECREF(self->dict);
        }
        Py_TYPE(self)->tp_free((PyObject *)self);
    }
}

--------------------
static void ast_dealloc(AST_object *self) {
    if (self && Py_TYPE(self)) {
        if (self->dict) {
            Py_DECREF(self->dict);
        }
        Py_TYPE(self)->tp_free((PyObject *)self);
    }
}

--------------------
match:0
source:
 <S2SV_StartBug> int file_is_y4m ( const char detect [ 4 ] ) { <S2SV_EndBug> if ( memcmp ( detect , "YUV4" , 4 ) == 0 ) { return 1 ; } return 0 ; }

target:
static int file_is_y4m ( const char detect [ 4 ] ) { if ( memcmp ( detect , "YUV4" , 4 ) == 0 ) { return 1 ; } return 0 ; }
outputs:
int file_is_y4m(const char* detect) {
    return strncmp(detect, "YUV4", 4) == 0;
}

--------------------
int file_is_y4m(const char* detect) {
    const char* y4m = "YUV4";
    return memcmp(detect, y4m, 4) == 0;
}

--------------------
int file_is_y4m(const char* detect) {
    char y4m[5] = {'Y', 'U', 'V', '4', '\0'};
    return strncmp(detect, y4m, 4) == 0;
}

--------------------
int file_is_y4m(const char* detect) {
    if (detect == NULL) {
        return 0;
    }
    return strncmp(detect, "YUV4", 4) == 0;
}

--------------------
int file_is_y4m(const char* detect) {
    const char* y4m = "YUV4";
    return (strlen(detect) == 4) && (memcmp(detect, y4m, 4) == 0);
}

--------------------
match:0
source:
 static void mark_commit ( struct commit * c , void * data ) { <S2SV_StartBug> mark_object ( & c -> object , NULL , NULL , data ) ; <S2SV_EndBug> }

target:
static void mark_commit ( struct commit * c , void * data ) { mark_object ( & c -> object , NULL , data ) ; }
outputs:
match:0
source:
 static int sock_close ( struct inode * inode , struct file * filp ) { <S2SV_StartBug> sock_release ( SOCKET_I ( inode ) ) ; <S2SV_EndBug> return 0 ; }

target:
static int sock_close ( struct inode * inode , struct file * filp ) { __sock_release ( SOCKET_I ( inode ) , inode ) ; return 0 ; }
outputs:
static int sock_close(struct inode *inode, struct file *filp) {
    struct socket *sock = SOCKET_I(inode);

    if (sock && sock->sk) {
        sock_release(sock);
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    struct socket *sock = SOCKET_I(inode);

    if (sock && atomic_dec_and_test(&sock->sk->sk_users)) {
        sock_release(sock);
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    struct socket *sock = SOCKET_I(inode);

    sock_release(sock);
    SOCKET_I(inode) = NULL;

    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    struct socket *sock = file->private_data;

    if (sock && sock->sk) {
        sock_release(sock);
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    struct socket *sock = NULL;

    if (inode && filp) {
        sock = SOCKET_I(inode) ?: filp->private_data;
    }
    if (sock && sock->sk) {
        sock_release(sock);
    }
    return 0;
}

--------------------
match:0
source:
 static int sock_close ( struct inode * inode , struct file * filp ) { <S2SV_StartBug> sock_release ( SOCKET_I ( inode ) ) ; <S2SV_EndBug> return 0 ; }

target:
static int sock_close ( struct inode * inode , struct file * filp ) { __sock_release ( SOCKET_I ( inode ) , inode ) ; return 0 ; }
outputs:
static int sock_close(struct inode *inode, struct file *filp) {
    sock_release(SOCKET_I(inode));
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    if (SOCKET_I(inode)) {
        sock_release(SOCKET_I(inode));
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    if (filp) {
        sock_release(filp->private_data);
        filp->private_data = NULL;
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    if (SOCKET_I(inode)) {
        struct socket *sock = SOCKET_I(inode);
        sock_release(sock);
        sock->sk = NULL;
    }
    return 0;
}

--------------------
static int sock_close(struct inode *inode, struct file *filp) {
    if (filp && filp->private_data) {
        struct socket *sock = filp->private_data;
        sock_release(sock);
        filp->private_data = NULL;
    }
    return 0;
}

--------------------
match:0
source:
 int pure_strcmp ( const char * const s1 , const char * const s2 ) { <S2SV_StartBug> return pure_memcmp ( s1 , s2 , strlen ( s1 ) + 1U ) ; <S2SV_EndBug> }

target:
int pure_strcmp ( const char * const s1 , const char * const s2 ) { const size_t s1_len = strlen ( s1 ) ; const size_t s2_len = strlen ( s2 ) ; const size_t len = ( s1_len < s2_len ) ? s1_len : s2_len ; return pure_memcmp ( s1 , s2 , len + 1 ) ; }
outputs:
match:0
source:
 <S2SV_StartBug> static char * print_string ( cJSON * item ) <S2SV_EndBug> { <S2SV_StartBug> return print_string_ptr ( item -> valuestring ) ; <S2SV_EndBug> }

target:
static char * print_string ( cJSON * item , printbuffer * p ) { return print_string_ptr ( item -> valuestring , p ) ; }
outputs:
static char * print_string ( cJSON * item ) {
    if (item == NULL) {
        return NULL;
    }
    if (item->type != cJSON_String) {
        return NULL;
    }
    return print_string_ptr ( item->valuestring );
}

--------------------
static char * print_string ( cJSON * item ) {
    if (item == NULL || item->type != cJSON_String) {
        return NULL;
    }
    return print_string_ptr ( item->valuestring );
}

--------------------
static char * print_string ( cJSON * item ) {
    if (item == NULL) {
        return NULL;
    }
    if (item->type != cJSON_String || item->valuestring == NULL) {
        return NULL;
    }
    return print_string_ptr ( item->valuestring );
}

--------------------
static char * print_string ( cJSON * item ) {
    if (item == NULL || item->type != cJSON_String || item->valuestring == NULL) {
        return NULL;
    }
    return print_string_ptr ( item->valuestring );
}

--------------------
static char * print_string ( cJSON * item ) {
    if (item == NULL || item->type != cJSON_String) {
        return NULL;
    }
    if (item->valuestring == NULL) {
        return "";
    }
    return print_string_ptr ( item->valuestring );
}

--------------------
match:0
source:
 static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { <S2SV_StartBug> return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ; <S2SV_EndBug> }

target:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { return mount_entry_on_generic ( mntent , mntent -> mnt_dir , NULL ) ; }
outputs:
match:0
source:
 static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { <S2SV_StartBug> return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ; <S2SV_EndBug> }

target:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { return mount_entry_on_generic ( mntent , mntent -> mnt_dir , NULL ) ; }
outputs:
match:0
source:
 static vpx_codec_err_t encoder_init ( vpx_codec_ctx_t * ctx , vpx_codec_priv_enc_mr_cfg_t * data ) { <S2SV_StartBug> return encoder_common_init ( ctx ) ; <S2SV_EndBug> }

target:
static vpx_codec_err_t encoder_init ( vpx_codec_ctx_t * ctx , vpx_codec_priv_enc_mr_cfg_t * data ) { vpx_codec_err_t res = VPX_CODEC_OK ; ( void ) data ; if ( ctx -> priv == NULL ) { vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 , sizeof ( * priv ) ) ; if ( priv == NULL ) return VPX_CODEC_MEM_ERROR ; ctx -> priv = ( vpx_codec_priv_t * ) priv ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> enc . total_encoders = 1 ; priv -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( priv -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & priv -> buffer_pool -> pool_mutex , NULL ) ) { return VPX_CODEC_MEM_ERROR ; } # endif if ( ctx -> config . enc ) { priv -> cfg = * ctx -> config . enc ; ctx -> config . enc = & priv -> cfg ; } priv -> extra_cfg = default_extra_cfg ; once ( vp9_initialize_enc ) ; res = validate_config ( priv , & priv -> cfg , & priv -> extra_cfg ) ; if ( res == VPX_CODEC_OK ) { set_encoder_config ( & priv -> oxcf , & priv -> cfg , & priv -> extra_cfg ) ; # if CONFIG_VP9_HIGHBITDEPTH priv -> oxcf . use_highbitdepth = ( ctx -> init_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ? 1 : 0 ; # endif priv -> cpi = vp9_create_compressor ( & priv -> oxcf , priv -> buffer_pool ) ; if ( priv -> cpi == NULL ) res = VPX_CODEC_MEM_ERROR ; else priv -> cpi -> output_pkt_list = & priv -> pkt_list . head ; } } return res ; }
outputs:
match:0
source:
 void vp8_default_coef_probs ( VP8_COMMON * pc ) { <S2SV_StartBug> vpx_memcpy ( pc -> fc . coef_probs , default_coef_probs , <S2SV_EndBug> sizeof ( default_coef_probs ) ) ; }

target:
void vp8_default_coef_probs ( VP8_COMMON * pc ) { memcpy ( pc -> fc . coef_probs , default_coef_probs , sizeof ( default_coef_probs ) ) ; }
outputs:
void vp8_default_coef_probs(VP8_COMMON *pc) {
  memcpy_s(pc->fc.coef_probs, sizeof(pc->fc.coef_probs), default_coef_probs, sizeof(default_coef_probs));
}

--------------------
void vp8_default_coef_probs(VP8_COMMON *pc) {
  size_t max_copy_size = sizeof(default_coef_probs);
  if (max_copy_size > sizeof(pc->fc.coef_probs)) {
    max_copy_size = sizeof(pc->fc.coef_probs);
  }
  memcpy(pc->fc.coef_probs, default_coef_probs, max_copy_size);
}

--------------------
fn vp8_default_coef_probs(pc: &mut VP8_COMMON) {
  pc.fc.coef_probs.copy_from_slice(default_coef_probs);
}

--------------------
static const uint8_t default_coef_probs[] = { ... };
void vp8_default_coef_probs(VP8_COMMON *pc) {
  memcpy(pc->fc.coef_probs, default_coef_probs, sizeof(default_coef_probs));
}

--------------------
void vp8_default_coef_probs(VP8_COMMON *pc) {
  pc->fc.coef_probs = default_coef_probs;
}

--------------------
match:0
source:
 static int hns_xgmac_get_sset_count ( int stringset ) { <S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug> return ARRAY_SIZE ( g_xgmac_stats_string ) ; return 0 ; }

target:
static int hns_xgmac_get_sset_count ( int stringset ) { if ( stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; return 0 ; }
outputs:
static int hns_xgmac_get_sset_count (int stringset) {
    if (stringset == ETH_SS_STATS) {
        return ARRAY_SIZE(g_xgmac_stats_string);
    } else {
        return 0;
    }
}

--------------------
#define ETH_SS_STATS 1
static int hns_xgmac_get_sset_count (int stringset) {
    if (stringset == ETH_SS_STATS) {
        return ARRAY_SIZE(g_xgmac_stats_string);
    } else {
        return 0;
    }
}
#undef ETH_SS_STATS

--------------------
enum STRINGSET {
    ETH_SS_UNKNOWN,
    ETH_SS_STATS,
    ETH_SS_OTHER,
};

static int hns_xgmac_get_sset_count (enum STRINGSET stringset) {
    if (stringset == ETH_SS_STATS) {
        return ARRAY_SIZE(g_xgmac_stats_string);
    } else {
        return 0;
    }
}

--------------------
#define ETH_SS_STATS "stats"
static int hns_xgmac_get_sset_count (char* stringset) {
    if (strcmp(stringset, ETH_SS_STATS) == 0) {
        return ARRAY_SIZE(g_xgmac_stats_string);
    } else {
        return 0;
    }
}
#undef ETH_SS_STATS

--------------------
static int hns_xgmac_get_sset_count (int stringset) {
    if (stringset >= 0 && stringset < NUM_STRINGSETS) {
        if (stringsets[stringset].name == "stats") {
            return ARRAY_SIZE(g_xgmac_stats_string);
        }
    }
    return 0;
}

--------------------
match:0
source:
 void recovery_delete_character ( void ) <S2SV_StartBug> { <S2SV_EndBug> if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } next_character ( ) ; }

target:
void recovery_delete_character ( void ) { if ( ! recovery_started ) { recovery_abort ( ) ; fsm_sendFailure ( FailureType_Failure_UnexpectedMessage , "NotinRecoverymode" ) ; layoutHome ( ) ; return ; } if ( strlen ( mnemonic ) > 0 ) { mnemonic [ strlen ( mnemonic ) - 1 ] = '\\0' ; } next_character ( ) ; }
outputs:
// Option 1: Adding parameter to the function to validate the length of the buffer
void recovery_delete_character(char *mnemonic, size_t buffer_size) {
    if (strlen(mnemonic) > 0) {
        size_t len = strlen(mnemonic);
        if (len <= buffer_size - 1) {
            mnemonic[len - 1] = '\0';
        } else {
            // handle buffer overflow
        }
    }
    next_character();
}

// Option 2: Remove the buffer length validation logic and assume the caller will provide properly sized buffer
void recovery_delete_character(char *mnemonic) {
    if (strlen(mnemonic) > 0) {
        mnemonic[strlen(mnemonic) - 1] = '\0';
    }
    next_character();
}

// Option 3: Use a safer string manipulation function strcpy_s
void recovery_delete_character(char *mnemonic) {
    if (strlen(mnemonic) > 0) {
        size_t len = strlen(mnemonic);
        strcpy_s(mnemonic, len, mnemonic, len - 1);
    }
    next_character();
}

// Option 4: Use strncpy_s to avoid buffer overflow.
void recovery_delete_character(char *mnemonic) {
    if (strlen(mnemonic) > 0) {
        size_t len = strlen(mnemonic);
        strncpy_s(mnemonic, len, mnemonic, len - 1);
        mnemonic[len - 1] = '\0';
    }
    next_character();
}

// Option 5: Dynamic memory allocation to avoid buffer overflow and allocation of unnecessarily large buffer.
void recovery_delete_character(char *&mnemonic) {
    if (strlen(mnemonic) > 0) {
        size_t len = strlen(mnemonic);
        char *new_mnemonic = new char[len];
        strncpy_s(new_mnemonic, len, mnemonic, len - 1);
        new_mnemonic[len - 1] = '\0';
        delete[] mnemonic;
        mnemonic = new_mnemonic;
    }
    next_character();
}

--------------------
match:0
source:
 <S2SV_StartBug> void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) <S2SV_EndBug> { <S2SV_StartBug> get_page ( buf -> page ) ; <S2SV_EndBug> }

target:
bool generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) { return try_get_page ( buf -> page ) ; }
outputs:
void generic_pipe_buf_get(struct pipe_inode_info* pipe, struct pipe_buffer* buf) {
    if(!get_page(buf->page)) {
        // handle error
    }
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info* pipe, struct pipe_buffer* buf) {
    if(buf && buf->page) {
        get_page(buf->page);
    }
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info* pipe, struct pipe_buffer* buf) {
    if(buf) {
        get_page(buf->page);
    }
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info* pipe, struct pipe_buffer* buf) {
    if(buf && buf->page) {
        if(!IS_ERR_OR_NULL(buf->page)) {
            get_page(buf->page);
        }
    }
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info* pipe, struct pipe_buffer* buf) {
    try {
        get_page(buf->page);
    } catch(...) {
        // handle error
    }
}

--------------------
match:0
source:
 static char * pool_strdup ( const char * s ) { <S2SV_StartBug> char * r = pool_alloc ( strlen ( s ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( r , s ) ; <S2SV_EndBug> return r ; }

target:
static char * pool_strdup ( const char * s ) { size_t len = strlen ( s ) + 1 ; char * r = pool_alloc ( len ) ; memcpy ( r , s , len ) ; return r ; }
outputs:
static char * pool_strdup ( const char * s ) {
    if (s == NULL) {
        return NULL;
    }
    size_t len = strlen(s);
    char * r = pool_alloc(len + 1);
    if (r == NULL) {
        return NULL;
    }
    memcpy(r, s, len);
    r[len] = '\0';
    return r;
}

--------------------
static char * pool_strdup ( const char * s ) {
    if (s == NULL) {
        return NULL;
    }
    size_t len = strlen(s);
    char * r = pool_alloc(len + 1);
    if (r == NULL) {
        return NULL;
    }
    for (int i = 0; i <= len; i++) {
        r[i] = s[i];
    }
    return r;
}

--------------------
static char * pool_strdup ( const char * s ) {
    if (s == NULL) {
        return NULL;
    }
    size_t len = strlen(s);
    char * r = pool_alloc(len + 1);
    if (r == NULL) {
        return NULL;
    }
    for (int i = 0; i <= len; i++) {
        *(r+i) = *(s+i);
    }
    return r;
}

--------------------
static char * pool_strdup ( const char * s ) {
    if (s == NULL) {
        return NULL;
    }
    size_t len = strlen(s);
    char * r = pool_alloc(len + 1);
    if (r == NULL) {
        return NULL;
    }
    int i = 0;
    while(s[i] != '\0') {
        r[i] = s[i];
        i++;
    }
    r[i] = '\0';
    return r;
}

--------------------
static char * pool_strdup ( const char * s ) {
    if (s == NULL) {
        return NULL;
    }
    size_t len = strlen(s);
    char * r = pool_alloc(len + 1);
    if (r == NULL) {
        return NULL;
    }
    int i;
    for (i = 0; s[i] != '\0'; i++) {
        r[i] = s[i];
    }
    r[i] = '\0';
    return r;
}

--------------------
match:0
source:
 struct crypto_template * crypto_lookup_template ( const char * name ) { <S2SV_StartBug> return try_then_request_module ( __crypto_lookup_template ( name ) , "%s" , <S2SV_EndBug> name ) ; }

target:
struct crypto_template * crypto_lookup_template ( const char * name ) { return try_then_request_module ( __crypto_lookup_template ( name ) , "crypto-%s" , name ) ; }
outputs:
#include <linux/crypto.h>

struct crypto_template *crypto_lookup_template(const char *name)
{
    struct crypto_template *template = __crypto_lookup_template(name);
    if (!template) {
        return NULL;
    }
    return template;
}

--------------------
#include <linux/crypto.h>

struct crypto_template *crypto_lookup_template(const char *name)
{
    if (!name) {
        return NULL;
    }
    struct crypto_template *template = __crypto_lookup_template(name);
    if (!template) {
        return NULL;
    }
    return template;
}

--------------------
#include <linux/crypto.h>

struct crypto_template *crypto_lookup_template(const char *name)
{
    struct crypto_template *template = __crypto_lookup_template(name);
    if (!template) {
        pr_warn("Failed to lookup crypto template for %s", name);
        return NULL;
    }
    return template;
}

--------------------
#include <linux/crypto.h>

struct crypto_template *crypto_lookup_template(const char *name)
{
    char *n = kstrdup(name, GFP_KERNEL);
    if (!n) {
        return NULL;
    }
    struct crypto_template *template = __crypto_lookup_template(n);
    kfree(n);
    if (!template) {
        return NULL;
    }
    return template;
}

--------------------
#include <linux/crypto.h>

struct crypto_template *crypto_lookup_template(const char *name)
{
    struct crypto_template *template = NULL;

    if (!name) {
        pr_warn("crypto_lookup_template: name is NULL");
        return NULL;
    }

    mutex_lock(&crypto_alg_sem);
    template = __crypto_lookup_template(name);
    if (!template) {
        pr_warn("crypto_lookup_template: no template found for name: %s", name);
    }
    mutex_unlock(&crypto_alg_sem);
    return template;
}

--------------------
match:0
