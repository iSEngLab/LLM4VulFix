source:
void * H264SwDecMalloc ( u32 size )  {  return malloc ( size ) ;  }

target:
void * H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } return malloc ( size * num ) ; }

outputs:
match:0
source:
tdata_t _TIFFmalloc ( tsize_t s )  {  return ( malloc ( ( size_t ) s ) ) ; }

target:
tdata_t _TIFFmalloc ( tsize_t s ) { if ( s == 0 ) return ( ( void * ) NULL ) ; return ( malloc ( ( size_t ) s ) ) ; }

outputs:
tdata_t _TIFFmalloc(tsize_t s) {
  void *ptr = malloc((size_t)s);
  if (ptr == NULL) {
    // handle error
    return NULL;
  }
  return (tdata_t)ptr;
}

--------------------
tdata_t _TIFFmalloc(tsize_t s) {
  return (tdata_t)malloc((size_t)s);
}

--------------------
tdata_t _TIFFmalloc(tsize_t s) {
  return (tdata_t)calloc(1, (size_t)s);
}

--------------------
tdata_t _TIFFmalloc(tsize_t s) {
  if (s >= SIZE_MAX / sizeof(char)) {
    // handle error
    return NULL;
  }
  return (tdata_t)malloc((size_t)s * sizeof(char));
}

--------------------
tdata_t _TIFFmalloc(tsize_t s) {
  return (tdata_t)reallocarray(NULL, (size_t)s, sizeof(char));
}

--------------------
match:0
source:
static void skcipher_release ( void * private ) {  crypto_free_skcipher ( private ) ;  }

target:
static void skcipher_release ( void * private ) { struct skcipher_tfm * tfm = private ; crypto_free_skcipher ( tfm -> skcipher ) ; kfree ( tfm ) ; }

outputs:
static void skcipher_release (void* private) {
    if (private) {
        crypto_free_skcipher(private);
        private = NULL;
    }
}

--------------------
void skcipher_release(void* private) {
    if (private) {
        crypto_free_skcipher(private);
        private = 0;
    }
}

--------------------
void skcipher_release (void* private) {
    if (private != NULL) {
        crypto_free_skcipher (private);
        private = NULL;
    }
}

--------------------
void skcipher_release (void* private) {
    if (private) {
        crypto_free_skcipher (private);
    }
    private = NULL;
}

--------------------
void skcipher_release (void* private) {
    if (private != NULL) {
        crypto_free_skcipher (private);
    }
    private = NULL;
}

--------------------
match:0
source:
void _modinit ( module_t * m ) { service_named_bind_command ( "chanserv" , & cs_flags ) ;  }

target:
void _modinit ( module_t * m ) { service_named_bind_command ( "chanserv" , & cs_flags ) ; add_bool_conf_item ( "ANOPE_FLAGS_COMPAT" , & chansvs . me -> conf_table , 0 , & anope_flags_compat , true ) ; hook_add_event ( "nick_can_register" ) ; hook_add_nick_can_register ( check_registration_keywords ) ; hook_add_event ( "user_can_register" ) ; hook_add_user_can_register ( check_registration_keywords ) ; }

outputs:
void _modinit(module_t *m)
{
    service_t *svs = service_find("chanserv");
    if (svs) {
        service_bind_command(svs, &cs_flags);
    }
}

--------------------
void _modinit(module_t *m)
{
    if (!m) {
        return;
    }
    service_named_bind_command("chanserv", &cs_flags);
}

--------------------
void _modinit(module_t *m)
{
    if (service_named_bind_command("chanserv", &cs_flags)) {
        slog(LG_ERROR, "Failed to bind command to chanserv service");
    }
}

--------------------
void _modinit(module_t *m)
{
    service_t *svs = service_find("chanserv");
    if (!svs) {
        slog(LG_ERROR, "Failed to find chanserv service");
        return;
    }
    if (service_bind_command(svs, &cs_flags, 0, 0)) {
        slog(LG_ERROR, "Failed to bind command to chanserv service");
    }
}

--------------------
void _modinit(module_t *m)
{
    if (service_named_bind_command("ChanServ", &cs_flags)) {
        slog(LG_ERROR, "Failed to bind command to ChanServ service");
    }
}

--------------------
match:0
source:
static char * print_string ( cJSON * item )  {  return print_string_ptr ( item -> valuestring ) ;  }

target:
static char * print_string ( cJSON * item , printbuffer * p ) { return print_string_ptr ( item -> valuestring , p ) ; }

outputs:
static char* print_string(cJSON* item) {
  if(item == NULL || item -> valuestring == NULL) {
    return NULL;
  }
  return print_string_ptr(item -> valuestring);
}

--------------------
static char* print_string(cJSON* item) {
  if(item == NULL || item -> type != cJSON_String) {
    return NULL;
  }
  return print_string_ptr(item -> valuestring);
}

--------------------
static char* print_string(cJSON* item) {
  if(item == NULL || item -> type != cJSON_String || item -> valuestring == NULL) {
    return NULL;
  }
  return print_string_ptr(item -> valuestring);
}

--------------------
static char* print_string(cJSON* item) {
  if(item == NULL || item -> type != cJSON_String || item -> valuestring == NULL) {
    return "";
  }
  return print_string_ptr(item -> valuestring);
}

--------------------
static char* print_string(cJSON* item) {
  if(item == NULL || item -> type != cJSON_String || item -> valuestring == NULL) {
    return "";
  }
  
  // Allocate a new string to hold the copied value
  char* value = malloc(strlen(item -> valuestring) + 1);
  
  if(value == NULL) {
    return "";
  }

  // Copy the valuestring to the new allocated memory
  strcpy(value, item -> valuestring);

  return value;
}

--------------------
match:0
source:
int file_is_y4m ( const char detect [ 4 ] ) {  if ( memcmp ( detect , "YUV4" , 4 ) == 0 ) { return 1 ; } return 0 ; }

target:
static int file_is_y4m ( const char detect [ 4 ] ) { if ( memcmp ( detect , "YUV4" , 4 ) == 0 ) { return 1 ; } return 0 ; }

outputs:
#include <string.h>

int file_is_y4m(const char* detect) {
    if ( strncmp(detect, "YUV4", 4) == 0 ) {
        return 1;
    }
    return 0;
}

--------------------
#include <string.h>

int file_is_y4m(const char* detect) {
    return (strncmp(detect, "YUV4", 4) == 0);
}

--------------------
int file_is_y4m(const char* detect) {
    const char *y4m_header = "YUV4";
    return (memcmp(detect, y4m_header, 4) == 0);
}

--------------------
int file_is_y4m(const char *detect) {
    if (detect == NULL) {
        return 0;
    }
    return (memcmp(detect, "YUV4", 4) == 0);
}

--------------------
int file_is_y4m(const char *detect)
{
    if (detect == NULL || strlen(detect) < 4) {
        return 0;
    }
    return (memcmp(detect, "YUV4", 4) == 0);
}

--------------------
match:0
source:
static void ast_dealloc ( AST_object * self )  {  Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; }

target:
static void ast_dealloc ( AST_object * self ) { PyObject_GC_UnTrack ( self ) ; Py_CLEAR ( self -> dict ) ; Py_TYPE ( self ) -> tp_free ( self ) ; }

outputs:
static void ast_dealloc(AST_object* self) {
    if (self != NULL) {
        Py_CLEAR(self->dict);
        Py_TYPE(self)->tp_free(self);
    }
}

--------------------
static void ast_dealloc(AST_object* self) {
    if (self) {
        Py_CLEAR(self->dict);
        Py_TYPE(self)->tp_free((PyObject*)self);
    }
}

--------------------
static void ast_dealloc(AST_object* self) {
    if (self) {
        PyObject_ClearWeakRefs((PyObject*)self);
        Py_CLEAR(self->dict);
        Py_TYPE(self)->tp_free((PyObject*)self);
    }
}

--------------------
static void ast_dealloc(AST_object* self) {
    if (self) {
        Py_XDECREF(self->dict);
        Py_TYPE(self)->tp_free((PyObject*)self);
    }
}

--------------------
static void ast_dealloc(AST_object* self) {
    if (self) {
        Py_XDECREF(self->dict);
        PyMem_Free(self);
    }
}

--------------------
match:0
source:
static void mark_commit ( struct commit * c , void * data ) {  mark_object ( & c -> object , NULL , NULL , data ) ;  }

target:
static void mark_commit ( struct commit * c , void * data ) { mark_object ( & c -> object , NULL , data ) ; }

outputs:
static void mark_commit ( struct commit * c , void * data ) {
  if (data != NULL) {
    mark_object ( & c -> object , NULL , NULL , (your_type_here*) data ) ;
  }
}

--------------------
typedef your_type_here* your_type_t;

static void mark_commit ( struct commit * c , your_type_t data ) {
  mark_object ( & c -> object , NULL , NULL , data ) ;
}

--------------------
#include <assert.h>
static void mark_commit ( struct commit * c , void * data ) {
  assert ( data != NULL && "Data pointer must not be null" );
  mark_object ( & c -> object , NULL , NULL , (your_type_here*) data ) ;
}

--------------------
#include <stdbool.h>
#include <stddef.h>

static bool check_params ( struct commit * c , void * data ) {
  if ( c == NULL || data == NULL ) {
    return false;
  }
  // any other checks
  return true;
}

static void mark_commit ( struct commit * c , void * data ) {
  if ( check_params ( c , data ) ) { 
   mark_object(& c -> object , NULL , NULL , (your_type_here*) data );
  }
}

--------------------
#define ASSERT_TYPE(x, t) assert ( (x) != NULL && "Invalid type passed to " #t );

static void mark_commit ( struct commit * c , void * data ) {
  ASSERT_TYPE( data, your_type_here );
  mark_object ( & c -> object , NULL , NULL , data ) ;
}

--------------------
match:0
source:
void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf )  {  get_page ( buf -> page ) ;  }

target:
bool generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) { return try_get_page ( buf -> page ) ; }

outputs:
void generic_pipe_buf_get(struct pipe_inode_info * pipe, struct pipe_buffer * buf)  {
    if (pipe == NULL || buf == NULL) {
        return;   // or handle the error in a way appropriate to the program
    }
    get_page(buf->page);
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info * pipe, struct pipe_buffer * buf)  {
    if (pipe == NULL || !access_ok(VERIFY_READ, buf, sizeof(struct pipe_buffer)) {
        return;   // or handle the error in a way appropriate to the program
    }
    get_page(buf->page);
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info * pipe, struct pipe_buffer * buf)  {
    if (pipe == NULL || buf == NULL) {
        return;   // or handle the error in a way appropriate to the program
    }
    struct page * pageptr;
    if (virt_to_page(buf->page) == NULL) {
        return;   // or handle the error in a way appropriate to the program
    }
    pageptr = virt_to_page(buf->page);
    get_page(pageptr);
}

--------------------
void generic_pipe_buf_get(struct pipe_inode_info * pipe, struct page * pageptr)  {
    if (pipe == NULL || pageptr == NULL) {
        return;   // or handle the error in a way appropriate to the program
    }
    get_page(pageptr);
}

--------------------
match:0
source:
static int sock_close ( struct inode * inode , struct file * filp ) {  sock_release ( SOCKET_I ( inode ) ) ;  return 0 ; }

target:
static int sock_close ( struct inode * inode , struct file * filp ) { __sock_release ( SOCKET_I ( inode ) , inode ) ; return 0 ; }

outputs:
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/socket.h>

static int sock_close(struct inode *inode, struct file *filp)
{
    sock_release(SOCKET_I(inode));
    return 0;
}

static struct file_operations fops = {
    .owner = THIS_MODULE,
    .release = sock_close,
};

static int __init init_module(void)
{
    struct socket *sock;
    int err;

    err = sock_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, &sock);
    if (err < 0) {
        printk(KERN_ERR "Failed to create socket! Error: %d\n", err);
        return err;
    }

    err = sock->ops->bind(sock, (struct sockaddr *)&addr, sizeof(struct sockaddr));
    if (err < 0) {
        printk(KERN_ERR "Failed to bind socket! Error: %d\n", err);
        sock_release(sock);
        return err;
    }

    err = sock->ops->listen(sock, 10);
    if (err < 0) {
        printk(KERN_ERR "Failed to listen on socket! Error: %d\n", err);
        sock_release(sock);
        return err;
    }

    return 0;
}

static void __exit cleanup_module(void)
{
}

MODULE_LICENSE("GPL");
MODULE_AUTHOR("Your Name");
MODULE_DESCRIPTION("This module does something");
MODULE_VERSION("1.0");

--------------------
match:0
source:
static int sock_close ( struct inode * inode , struct file * filp ) {  sock_release ( SOCKET_I ( inode ) ) ;  return 0 ; }

target:
static int sock_close ( struct inode * inode , struct file * filp ) { __sock_release ( SOCKET_I ( inode ) , inode ) ; return 0 ; }

outputs:
static int sock_close (struct inode *inode, struct file *filp) {
    int err = sock_release(SOCKET_I(inode));
    if (err) {
        printk(KERN_ERR "Error closing socket: %d\n", err);
        return err;
    }
    return 0;
}

--------------------
static int sock_close (struct inode *inode, struct file *filp) {
    if (!inode || !SOCKET_I(inode)) {
        return -EINVAL;
    }
    int err = sock_release(SOCKET_I(inode));
    if (err) {
        printk(KERN_ERR "Error closing socket: %d\n", err);
        return err;
    }
    return 0;
}

--------------------
static int sock_close (struct inode *inode, struct file *filp) {
    // Same as previous example
}

--------------------
static int sock_close (struct inode *inode, struct file *filp) {
    if (!inode || !SOCKET_I(inode)) {
        return -EINVAL;
    }
    sock_put(SOCKET_I(inode)); // completely release the socket
    return 0;
}

--------------------
static int sock_close (struct inode *inode, struct file *filp) {
    local_irq_disable(); // disable interrupts
    if (!inode || !SOCKET_I(inode)) {
        local_irq_enable(); // re-enable interrupts
        return -EINVAL;
    }
    int err = sock_release(SOCKET_I(inode));
    if (err) {
        printk(KERN_ERR "Error closing socket: %d\n", err);
    }
    local_irq_enable(); // re-enable interrupts
    return 0;
}

--------------------
match:0
source:
int pure_strcmp ( const char * const s1 , const char * const s2 ) {  return pure_memcmp ( s1 , s2 , strlen ( s1 ) + 1U ) ;  }

target:
int pure_strcmp ( const char * const s1 , const char * const s2 ) { const size_t s1_len = strlen ( s1 ) ; const size_t s2_len = strlen ( s2 ) ; const size_t len = ( s1_len < s2_len ) ? s1_len : s2_len ; return pure_memcmp ( s1 , s2 , len + 1 ) ; }

outputs:
int pure_strcmp (const char * const s1 , const char * const s2 ) {
    if (s1 == NULL || s2 == NULL) {
        return -1; // or any appropriate error code
    }
    return pure_memcmp ( s1 , s2 , strlen ( s1 ) + 1U ) ; 
}

--------------------
int pure_strcmp ( const char * const s1 , const char * const s2 ) {
    size_t s1len = strlen(s1);
    return pure_memcmp ( s1 , s2 , s1len + 1U ) ;  
}

--------------------
int pure_strcmp ( const char * const s1 , const char * const s2 ) {
    return pure_memcmp ( s1 , s2 , (size_t)(strlen(s1) + 1U) ) ; 
}

--------------------
int pure_strcmp ( const char * const s1 , const char * const s2 ) {
    size_t s1len = strlen(s1);
    size_t s2len = strlen(s2);
    if (s1len != s2len) {
        return s1len > s2len ? 1 : -1; // or any appropriate non-zero integer
    }
    return pure_memcmp ( s1 , s2 , s1len + 1U ) ; 
}

--------------------
int pure_strcmp ( const char * const s1 , const char * const s2 ) {
    return strncmp(s1, s2, strlen(s1) + 1U); 
}

--------------------
match:0
source:
static char * pool_strdup ( const char * s ) {  char * r = pool_alloc ( strlen ( s ) + 1 ) ;   strcpy ( r , s ) ;  return r ; }

target:
static char * pool_strdup ( const char * s ) { size_t len = strlen ( s ) + 1 ; char * r = pool_alloc ( len ) ; memcpy ( r , s , len ) ; return r ; }

outputs:
static char * pool_strdup (const char *s) {
    size_t len = strlen(s);
    if (len >= POOL_SIZE) {
        /* String is too long to fit in the pool */
        return NULL;
    }
    char *r = pool_alloc(len + 1);
    if (r == NULL) {
        /* Allocation failed */
        return NULL;
    }
    strcpy(r, s);
    return r;
}

--------------------
static char * pool_strdup (const char *s) {
    size_t len = strlen(s);
    char *r = pool_alloc(len + 1);
    if (r == NULL) {
        /* Allocation failed */
        return NULL;
    }
    strncpy(r, s, len + 1);
    return r;
}

--------------------
static char * pool_strdup (const char *s) {
    if (s == NULL) {
        /* Null pointer */
        return NULL;
    }
    char *r = pool_alloc(strlen(s) + 1);
    if (r == NULL) {
        /* Allocation failed */
        return NULL;
    }
    strcpy(r, s);
    return r;
}

--------------------
static char * pool_strdup (const char *s) {
    char *r;
    size_t len = strlen(s) + 1;
    r = pool_alloc(len);
    if (r != NULL) {
        strlcpy(r, s, len);
    }
    return r;
}

--------------------
static char * pool_strdup(const char *s) {
    char *r = NULL;
    size_t len = strlen(s) + 1;
    r = pool_alloc(len);
    if (r != NULL) {
        snprintf(r, len, "%s", s);
    }
    return r;
}

--------------------
match:0
source:
static void * skcipher_bind ( const char * name , u32 type , u32 mask ) {  return crypto_alloc_skcipher ( name , type , mask ) ;   }

target:
static void * skcipher_bind ( const char * name , u32 type , u32 mask ) { struct skcipher_tfm * tfm ; struct crypto_skcipher * skcipher ; tfm = kzalloc ( sizeof ( * tfm ) , GFP_KERNEL ) ; if ( ! tfm ) return ERR_PTR ( - ENOMEM ) ; skcipher = crypto_alloc_skcipher ( name , type , mask ) ; if ( IS_ERR ( skcipher ) ) { kfree ( tfm ) ; return ERR_CAST ( skcipher ) ; } tfm -> skcipher = skcipher ; return tfm ; }

outputs:
static void * skcipher_bind(const char *name, u32 type, u32 mask) {
    void *cipher = crypto_alloc_skcipher(name, type, mask);
    if (!cipher) {
        printk(KERN_ERR "Failed to allocate skcipher with name %s\n", name);
        return ERR_PTR(-ENOMEM);
    }
    return cipher;
}

--------------------
static void *skcipher_bind(const char *name, u32 type, u32 mask, bool export) {
    void *cipher;
    struct crypto_template *tmpl;

    tmpl = crypto_find_template(name, type, mask);
    if (!tmpl)
        return ERR_PTR(-ENOENT);

    cipher = crypto_alloc_instance2(tmpl, NULL, NULL);
    crypto_drop_spawn(tmpl);

    if (IS_ERR(cipher))
        return cipher;

    if (export) {
        crypto_export_skcipher(cipher);
    }

    return cipher;
}

--------------------
static void *skcipher_bind(const char *name, u32 type, u32 mask) {
    void *inst;
    u32 id;

    id = crypto_get_random_u32();
    inst = crypto_alloc_skcipher_instance(name, type, mask, id);

    return inst;
}

--------------------
static void *skcipher_bind(const char *name, u32 type, u32 mask) {
    void *cipher = crypto_grab_skcipher(name, type, mask);
    if (!cipher) {
        cipher = crypto_alloc_skcipher(name, type, mask);
    }
    return cipher;
}

--------------------
static void *skcipher_bind(const char *name, u32 type, u32 mask) {
    void *cipher = NULL;
    struct crypto_instance *inst;

    inst = crypto_alloc_instance("skcipher", name, type, mask);
    if (!IS_ERR(inst)) {
        cipher = inst->alg.base;
        inst->alg.base = NULL;
        crypto_drop_instance(inst);
    }

    return cipher;
}

--------------------
match:0
source:
void vp9_frame_init_quantizer ( VP9_COMP * cpi ) {  cpi -> zbin_mode_boost = 0 ;   vp9_init_plane_quantizers ( cpi , & cpi -> mb ) ;  }

target:
void vp9_frame_init_quantizer ( VP9_COMP * cpi ) { vp9_init_plane_quantizers ( cpi , & cpi -> td . mb ) ; }

outputs:
void vp9_frame_init_quantizer(VP9_COMP* cpi) {
    if (cpi == NULL) {                 // Check for NULL pointer
        // Error handling code
        return;
    }
    cpi->zbin_mode_boost = 0;
    if (cpi->mb.mode != NULL) {         // Check for NULL pointer
        vp9_init_plane_quantizers(cpi, &cpi->mb);
    }
}

--------------------
void vp9_frame_init_quantizer(VP9_COMP* cpi) {
    if (cpi == NULL) {                 // Check for NULL pointer
        // Error handling code
        return;
    }
    cpi->zbin_mode_boost = 0;
    if (cpi->common.frame_to_show != NULL) {  // Check for NULL pointer
        vp9_init_plane_quantizers(cpi, &cpi->mb);
    }
}

--------------------
void vp9_frame_init_quantizer(VP9_COMP* cpi) {
    if (cpi == NULL) {                 // Check for NULL pointer
        // Error handling code
        return;
    }
    cpi->zbin_mode_boost = 0;
    if (cpi->frame_flags & FRAME_IS_KEY) {
        vp9_init_plane_quantizers(cpi, &cpi->mb);
    }
}

--------------------
void vp9_frame_init_quantizer(VP9_COMP* cpi) {
    if (cpi == NULL) {                 // Check for NULL pointer
        // Error handling code
        return;
    }
    cpi->zbin_mode_boost = 0;
    if (cpi->mb.mode != NULL && cpi->common.width > 0 && cpi->common.height > 0) {
        vp9_init_plane_quantizers(cpi, &cpi->mb);
    }
}

--------------------
void vp9_frame_init_quantizer(VP9_COMP* cpi) {
    if (cpi == NULL) {                 // Check for NULL pointer
        // Error handling code
        return;
    }
    cpi->zbin_mode_boost = 0;
    for (int i = 0; i < MAX_PLANE; i++) {  // Initialize all planes
        if (cpi->common.width[i] > 0 && cpi->common.height[i] > 0) {
            vp9_init_plane_quantizers(cpi, &cpi->mb.plane[i]);
        }
    }
}

--------------------
match:0
source:
void usage_exit ( ) {  fprintf ( stderr , "Usage:%s<codec><width><height><infile><outfile>\\n" , exec_name ) ; exit ( EXIT_FAILURE ) ; }

target:
void usage_exit ( void ) { fprintf ( stderr , "Usage:%s<codec><width><height><infile><outfile>\\n" , exec_name ) ; exit ( EXIT_FAILURE ) ; }

outputs:
#include <stdio.h>
#include <stdlib.h>

void usage_exit(char* exec_name) {
  printf("Usage: %s <codec> <width> <height> <infile> <outfile>\n", exec_name);
  exit(EXIT_FAILURE);
}

int main(int argc, char* argv[]) {
  if (argc != 6) {
    usage_exit(argv[0]);
  }
  // rest of the program
  return EXIT_SUCCESS;
}

--------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void usage_exit(char* exec_name) {
  fprintf(stderr, "Usage: %s <codec> <width> <height> <infile> <outfile>\n", exec_name);
  exit(EXIT_FAILURE);
}

int main(int argc, char* argv[]) {
  if (argc != 6) {
    usage_exit(argv[0]);
  }
  char* codec = argv[1];
  int width = atoi(argv[2]);
  int height = atoi(argv[3]);
  char* infile = argv[4];
  char* outfile = argv[5];
  // rest of the program
  return EXIT_SUCCESS;
}

--------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void usage_exit(char* exec_name) {
  fprintf(stderr, "Usage: %s <codec> <width> <height> <infile> <outfile>\n", exec_name);
  exit(EXIT_FAILURE);
}

int main(int argc, char* argv[]) {
  if (argc != 6) {
    usage_exit(argv[0]);
  }
  char* codec = argv[1];
  int width = atoi(argv[2]);
  int height = atoi(argv[3]);
  char* infile = argv[4];
  char* outfile = argv[5];
  FILE* in = fopen(infile, "rb");
  if (!in) {
    fprintf(stderr, "Error: cannot open input file '%s'\n", infile);
    exit(EXIT_FAILURE);
  }
  FILE* out = fopen(outfile, "wb");
  if (!out) {
    fprintf(stderr, "Error: cannot open output file '%s'\n", outfile);
    exit(EXIT_FAILURE);
  }
  // rest of the program
  fclose(in);
  fclose(out);
  return EXIT_SUCCESS;
}

--------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void usage_exit(char* exec_name) {
  fprintf(stderr, "Usage: %s <codec> <width> <height> <infile> <outfile>\n", exec_name);
  exit(EXIT_FAILURE);
}

int main(int argc, char* argv[]) {
  if (argc != 6) {
    usage_exit(argv[0]);
  }
  char* codec = argv[1];
  int width = atoi(argv[2]);
  int height = atoi(argv[3]);
  char* infile = argv[4];
  char* outfile = argv[5];
  FILE* in = fopen(infile, "rb");
  if (!in) {
    perror(infile);
    exit(EXIT_FAILURE);
  }
  FILE* out = fopen(outfile, "wb");
  if (!out) {
    perror(outfile);
    exit(EXIT_FAILURE);
  }
  // rest of the program
  fclose(in);
  fclose(out);
  return EXIT_SUCCESS;
}

--------------------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void usage_exit(char* exec_name) {
  fprintf(stderr, "Usage: %s <codec> <width> <height> <infile> <outfile>\n", exec_name);
  exit(EXIT_FAILURE);
}

int main(int argc, char* argv[]) {
  if (argc < 6) {
    usage_exit(argv[0]);
  }
  char* codec = argv[1];
  int width = atoi(argv[2]);
  int height = atoi(argv[3]);
  char* infile = argv[4];
  char* outfile = argv[5];
  if (strlen(codec) > 255 || width <= 0 || height <= 0) {
    fprintf(stderr, "Error: invalid arguments\n");
    usage_exit(argv[0]);
  }
  FILE* in = fopen(infile, "rb");
  if (!in) {
    perror(infile);
    exit(EXIT_FAILURE);
  }
  FILE* out = fopen(outfile, "wb");
  if (!out) {
    perror(outfile);
    exit(EXIT_FAILURE);
  }
  // rest of the program
  fclose(in);
  fclose(out);
  return EXIT_SUCCESS;
}

--------------------
match:0
source:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) {  return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ;  }

target:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { return mount_entry_on_generic ( mntent , mntent -> mnt_dir , NULL ) ; }

outputs:
static inline int mount_entry_on_systemfs(struct mntent *mntent) {
    int ret = mount_entry_on_generic(mntent, mntent->mnt_dir);
    if (ret == -1) {
        perror("Error mounting entry on systemfs");
        return -1;
    }
    return ret;
}

--------------------
static inline int mount_entry_on_systemfs(struct mntent *mntent) {
    if (!mntent) {
        perror("Invalid input: mntent is NULL");
        return -1;
    }
    int ret = mount_entry_on_generic(mntent, mntent->mnt_dir);
    if (ret == -1) {
        perror("Error mounting entry on systemfs");
        return -1;
    }
    return ret;
}

--------------------
static inline int mount_entry_on_systemfs(struct mntent *mntent) {
    if (!mntent) {
        perror("Invalid input: mntent is NULL");
        return -1;
    }
    char mnt_dir_copy[PATH_MAX];
    if (strcpy_s(mnt_dir_copy, PATH_MAX, mntent->mnt_dir)) {
        perror("Error copying mnt_dir");
        return -1;
    }
    int ret = mount_entry_on_generic(mntent, mnt_dir_copy);
    if (ret == -1) {
        perror("Error mounting entry on systemfs");
        return -1;
    }
    return ret;
}

--------------------
static inline int mount_entry_on_systemfs(struct mntent *mntent) {
    if (!mntent) {
        perror("Invalid input: mntent is NULL");
        return -1;
    }
    char mnt_dir_copy[PATH_MAX];
    size_t len = strlen(mntent->mnt_dir);
    if (len >= PATH_MAX) {
        perror("mnt_dir string is too long");
        return -1;
    }
    strncpy(mnt_dir_copy, mntent->mnt_dir, len+1);
    int ret = mount_entry_on_generic(mntent, mnt_dir_copy);
    if (ret == -1) {
        perror("Error mounting entry on systemfs");
        return -1;
    }
    return ret;
}

--------------------
static inline int mount_entry_on_systemfs(struct mntent *mntent) {
    if (!mntent) {
        perror("Invalid input: mntent is NULL");
        return -1;
    }
    if (strcmp(mntent->mnt_type, "sysfs") != 0) {
        perror("Entry is not of type sysfs");
        return -1;
    }
    char mnt_dir_copy[PATH_MAX];
    size_t len = strlen(mntent->mnt_dir);
    if (len >= PATH_MAX) {
        perror("mnt_dir string is too long");
        return -1;
    }
    strncpy(mnt_dir_copy, mntent->mnt_dir, len+1);
    int ret = mount_entry_on_generic(mntent, mnt_dir_copy);
    if (ret == -1) {
        perror("Error mounting entry on systemfs");
        return -1;
    }
    return ret;
}

--------------------
match:0
source:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) {  return mount_entry_on_generic ( mntent , mntent -> mnt_dir ) ;  }

target:
static inline int mount_entry_on_systemfs ( struct mntent * mntent ) { return mount_entry_on_generic ( mntent , mntent -> mnt_dir , NULL ) ; }

outputs:
static inline int mount_directory_on_filesystem(struct mntent* entry) {
    return mount_entry_on_generic(entry, entry->mnt_dir);
}

--------------------
static inline int mount_directory_on_filesystem(struct mntent* entry) {
    if(!entry) {
        return EINVAL;
    }
    return mount_entry_on_generic(entry, entry->mnt_dir);
}

--------------------
static inline int mount_directory_on_filesystem(const struct mntent* entry) {
    if(!entry) {
        return EINVAL;
    }
    return mount_entry_on_generic(entry, entry->mnt_dir);
}

--------------------
enum mount_errors {
    MOUNT_SUCCESS = 0,
    MOUNT_INVALID_ARGUMENT,
    MOUNT_GENERIC_ERROR
};

enum mount_errors mount_directory_on_filesystem(const struct mntent* entry) {
    if(!entry) {
        return MOUNT_INVALID_ARGUMENT;
    }
    if(mount_entry_on_generic(entry, entry->mnt_dir) != 0) {
        return MOUNT_GENERIC_ERROR;
    }
    return MOUNT_SUCCESS;
}

--------------------
enum mount_errors mount_entry_on_generic(const struct mntent* entry, const char* directory) {
    if(!entry || !directory) {
        return MOUNT_INVALID_ARGUMENT;
    }
    if(mount(directory, entry->mnt_dir, entry->mnt_type, 0, entry->mnt_opts) != 0) {
        return MOUNT_GENERIC_ERROR;
    }
    return MOUNT_SUCCESS;
}

--------------------
match:0
source:
static vpx_codec_err_t encoder_init ( vpx_codec_ctx_t * ctx , vpx_codec_priv_enc_mr_cfg_t * data ) {  return encoder_common_init ( ctx ) ;  }

target:
static vpx_codec_err_t encoder_init ( vpx_codec_ctx_t * ctx , vpx_codec_priv_enc_mr_cfg_t * data ) { vpx_codec_err_t res = VPX_CODEC_OK ; ( void ) data ; if ( ctx -> priv == NULL ) { vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 , sizeof ( * priv ) ) ; if ( priv == NULL ) return VPX_CODEC_MEM_ERROR ; ctx -> priv = ( vpx_codec_priv_t * ) priv ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> enc . total_encoders = 1 ; priv -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( priv -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & priv -> buffer_pool -> pool_mutex , NULL ) ) { return VPX_CODEC_MEM_ERROR ; } # endif if ( ctx -> config . enc ) { priv -> cfg = * ctx -> config . enc ; ctx -> config . enc = & priv -> cfg ; } priv -> extra_cfg = default_extra_cfg ; once ( vp9_initialize_enc ) ; res = validate_config ( priv , & priv -> cfg , & priv -> extra_cfg ) ; if ( res == VPX_CODEC_OK ) { set_encoder_config ( & priv -> oxcf , & priv -> cfg , & priv -> extra_cfg ) ; # if CONFIG_VP9_HIGHBITDEPTH priv -> oxcf . use_highbitdepth = ( ctx -> init_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ? 1 : 0 ; # endif priv -> cpi = vp9_create_compressor ( & priv -> oxcf , priv -> buffer_pool ) ; if ( priv -> cpi == NULL ) res = VPX_CODEC_MEM_ERROR ; else priv -> cpi -> output_pkt_list = & priv -> pkt_list . head ; } } return res ; }

outputs:
static int encoder_init(vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data) {
  int ret = encoder_common_init(ctx);
  if (ret < 0) {
    return VPX_CODEC_ERROR;
  }
  return 0;
}

--------------------
static void encoder_init(vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data, vpx_codec_err_t *error) {
  *error = encoder_common_init(ctx);
}

--------------------
static vpx_codec_err_t encoder_init(vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data) {
  return encoder_common_init(ctx);
}

--------------------
typedef enum {
  ENCODER_SUCCESS = 0,
  ENCODER_INIT_FAILURE
} encoder_err_t;

static encoder_err_t encoder_init(vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data) {
  int ret = encoder_common_init(ctx);
  if (ret < 0) {
    return ENCODER_INIT_FAILURE;
  }
  return ENCODER_SUCCESS;
}

--------------------
static void encoder_init(vpx_codec_ctx_t *ctx, vpx_codec_priv_enc_mr_cfg_t *data) {
  try {
    encoder_common_init(ctx);
  } catch (...) {
    // Handle the exception however appropriate
  }
}

--------------------
match:0
source:
void test_checkout_nasty__git_tilde1 ( void ) {  # ifdef GIT_WIN32  test_checkout_fails ( "refs/heads/git_tilde1" , ".git/foobar" ) ;  # endif  }

target:
void test_checkout_nasty__git_tilde1 ( void ) { test_checkout_fails ( "refs/heads/git_tilde1" , ".git/foobar" ) ; test_checkout_fails ( "refs/heads/git_tilde1" , "git~1/foobar" ) ; }

outputs:
#ifndef GIT_WIN32
void test_checkout_nasty__git_tilde1(void) {
    return;
}
#else
void test_checkout_nasty__git_tilde1(void) {
    test_checkout_fails("refs/heads/git_tilde1", ".git/foobar");
}
#endif

--------------------
#ifdef GIT_WIN32
void test_checkout_nasty__git_tilde1() {
    test_checkout_fails("refs/heads/git_tilde1", ".git/foobar");
}
#else
void test_checkout_nasty__git_tilde1() {
    return;
}
#endif

--------------------
void test_checkout_nasty__git_tilde1() {
    #ifdef GIT_WIN32
    test_checkout_fails("refs/heads/git_tilde1", ".git/foobar");
    #endif
}

--------------------
#define GIT_WIN32

#ifdef GIT_WIN32
void test_checkout_nasty__git_tilde1() {
    test_checkout_fails("refs/heads/git_tilde1", ".git/foobar");
}
#endif

--------------------
#ifdef GIT_WIN32
void test_checkout_nasty__git_tilde1() {
    const char *ref_names[] = {"refs/heads/git_tilde1", NULL};
    git_reference *ref;
    const char *reflog_msg = "test";
    git_reference_create_symbolic(&ref, repo, ref_names[0], "refs/heads/master", reflog_msg, 0);
}
#else
void test_checkout_nasty__git_tilde1() {
    return;
}
#endif

--------------------
match:0
