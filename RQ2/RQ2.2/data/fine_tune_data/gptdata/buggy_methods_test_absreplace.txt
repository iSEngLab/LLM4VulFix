TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , enum VAR_0 VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 * VAR_4 , TYPE_4 VAR_5 , TYPE_5 VAR_6 ) { struct STRUCT_OR_UNION_2 * VAR_7 = STRUCT_OR_UNION_3 -> VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 = METHOD_1 ( VAR_11 ) ; TYPE_6 VAR_12 = sizeof ( struct STRUCT_OR_UNION_5 ) + sizeof ( struct STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_13 ; unsigned TYPE_7 VAR_14 ; TYPE_8 VAR_15 = 0 ; if ( VAR_16 -> VAR_17 & VAR_18 ) return 0 ; VAR_19 = METHOD_2 ( VAR_20 + VAR_21 , VAR_22 ) ; if ( ! VAR_23 ) return - VAR_24 ; METHOD_3 ( VAR_25 , VAR_26 ) ; if ( VAR_27 != 0 && VAR_28 != VAR_29 ) { METHOD_4 ( VAR_30 , VAR_31 , VAR_32 ) ; } METHOD_5 ( & STRUCT_OR_UNION_8 -> VAR_33 ) ; if ( METHOD_6 ( STRUCT_OR_UNION_9 -> VAR_34 ) ) { VAR_35 = - VAR_36 ; goto VAR_37 ; } STRUCT_OR_UNION_10 -> VAR_38 = VAR_39 ; STRUCT_OR_UNION_11 -> VAR_40 = VAR_41 ; VAR_42 = METHOD_7 ( STRUCT_OR_UNION_12 , VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 ) goto VAR_47 ; VAR_48 = METHOD_8 ( & STRUCT_OR_UNION_13 -> VAR_49 , VAR_50 ) ; if ( ! VAR_51 ) { METHOD_9 ( VAR_52 , VAR_53 , "TimeoutwaitingforWMIcommand:%s\\n" , METHOD_10 ( VAR_54 ) ) ; METHOD_11 ( & STRUCT_OR_UNION_14 -> VAR_55 ) ;  return - VAR_56 ;  } METHOD_12 ( & STRUCT_OR_UNION_15 -> VAR_57 ) ; return 0 ; VAR_58 : METHOD_13 ( VAR_59 , VAR_60 , "WMIfailurefor:%s\\n" , METHOD_14 ( VAR_61 ) ) ; METHOD_15 ( & STRUCT_OR_UNION_16 -> VAR_62 ) ; METHOD_16 ( VAR_63 ) ; return VAR_64 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; TYPE_2 VAR_7 ; if ( METHOD_2 ( & VAR_8 , VAR_9 -> VAR_10 , sizeof ( TYPE_3 ) ) ) return - VAR_11 ; if ( VAR_12 -> VAR_13 != VAR_14 ) return - VAR_15 ; if ( ! METHOD_3 ( VAR_16 ) ) return - VAR_17 ; if ( VAR_18 != VAR_19 ) return - VAR_20 ; switch ( VAR_21 ) { case VAR_22 : return - VAR_23 ; case VAR_24 : if ( METHOD_4 ( VAR_25 ) ) return - VAR_26 ; if ( ( VAR_27 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_28 ) ) == VAR_29 ) return - VAR_30 ; if ( METHOD_6 ( VAR_31 , VAR_32 -> VAR_33 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ) { METHOD_7 ( VAR_34 ) ; return - VAR_35 ; } if ( VAR_36 -> VAR_37 > VAR_38 ) { METHOD_8 ( VAR_39 ) ; return - VAR_40 ; } METHOD_9 ( VAR_41 -> VAR_42 , VAR_43 -> VAR_44 , 0 ) ; METHOD_10 ( VAR_45 ) ; break ; case VAR_46 : if ( ! METHOD_11 ( VAR_47 ) ) return - VAR_48 ; if ( METHOD_12 ( & VAR_49 , VAR_50 -> VAR_51 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ) return - VAR_52 ; if ( ( VAR_53 . VAR_54 . VAR_55 & VAR_56 ) && METHOD_13 ( VAR_57 ) ) return - VAR_58 ; if ( ( VAR_59 . VAR_60 . VAR_61 & VAR_62 ) && METHOD_14 ( VAR_63 ) ) return - VAR_64 ; if ( ( VAR_65 . VAR_66 . VAR_67 & VAR_68 ) && METHOD_15 ( VAR_69 ) ) return - VAR_70 ; if ( ( VAR_71 . VAR_72 . VAR_73 & VAR_74 ) && METHOD_16 ( VAR_75 ) ) return - VAR_76 ; if ( VAR_77 . VAR_78 . VAR_79 & VAR_80 ) { VAR_81 -> VAR_82 = VAR_83 . VAR_84 . VAR_85 ; VAR_86 -> VAR_87 = VAR_88 . VAR_89 . VAR_90 ; } if ( VAR_91 . VAR_92 . VAR_93 & VAR_94 ) { if ( VAR_95 . VAR_96 . VAR_97 > 15 ) return - VAR_98 ; VAR_99 -> VAR_100 = VAR_101 . VAR_102 . VAR_103 ; VAR_104 -> VAR_105 = VAR_106 . VAR_107 . VAR_108 ; } if ( VAR_109 . VAR_110 . VAR_111 & VAR_112 ) { if ( VAR_113 . VAR_114 . VAR_115 > VAR_116 ) return - VAR_117 ; VAR_118 -> VAR_119 = VAR_120 . VAR_121 . VAR_122 ; } if ( VAR_123 . VAR_124 . VAR_125 & VAR_126 ) { if ( VAR_127 . VAR_128 . VAR_129 > VAR_130 ) return - VAR_131 ; VAR_132 -> VAR_133 = VAR_134 . VAR_135 . VAR_136 ; } if ( VAR_137 . VAR_138 . VAR_139 & VAR_140 ) { if ( VAR_141 . VAR_142 . VAR_143 > VAR_144 ) return - VAR_145 ; VAR_146 -> VAR_147 = VAR_148 . VAR_149 . VAR_150 ; } if ( VAR_151 . VAR_152 . VAR_153 & VAR_154 ) { if ( VAR_155 . VAR_156 . VAR_157 > VAR_158 ) return - VAR_159 ; VAR_160 -> VAR_161 = VAR_162 . VAR_163 . VAR_164 ; } if ( VAR_165 . VAR_166 . VAR_167 & VAR_168 ) { if ( VAR_169 . VAR_170 . VAR_171 > VAR_172 ) return - VAR_173 ; VAR_174 -> VAR_175 = VAR_176 . VAR_177 . VAR_178 ; } if ( VAR_179 . VAR_180 . VAR_181 & VAR_182 ) { if ( VAR_183 . VAR_184 . VAR_185 > VAR_186 ) return - VAR_187 ; VAR_188 -> VAR_189 = VAR_190 . VAR_191 . VAR_192 ; } if ( VAR_193 . VAR_194 . VAR_195 & VAR_196 ) { if ( VAR_197 . VAR_198 . VAR_199 > VAR_200 ) return - VAR_201 ; VAR_202 -> VAR_203 = VAR_204 . VAR_205 . VAR_206 ; } if ( VAR_207 . VAR_208 . VAR_209 & VAR_210 ) { if ( VAR_211 . VAR_212 . VAR_213 > VAR_214 ) return - VAR_215 ; VAR_216 -> VAR_217 = VAR_218 . VAR_219 . VAR_220 ; VAR_221 -> VAR_222 = VAR_223 -> VAR_224 / 10 ; } break ; case VAR_225 :  VAR_226 . VAR_227 . VAR_228 = 0xffffffff ;  VAR_229 . VAR_230 . VAR_231 = VAR_232 -> VAR_233 ; VAR_234 . VAR_235 . VAR_236 = VAR_237 -> VAR_238 ; VAR_239 . VAR_240 . VAR_241 = VAR_242 -> VAR_243 ; VAR_244 . VAR_245 . VAR_246 = VAR_247 -> VAR_248 ; VAR_249 . VAR_250 . VAR_251 = VAR_252 -> VAR_253 ; VAR_254 . VAR_255 . VAR_256 = VAR_257 -> VAR_258 ; VAR_259 . VAR_260 . VAR_261 = VAR_262 -> VAR_263 ; VAR_264 . VAR_265 . VAR_266 = VAR_267 -> VAR_268 ; VAR_269 . VAR_270 . VAR_271 = VAR_272 -> VAR_273 ; VAR_274 . VAR_275 . VAR_276 = VAR_277 -> VAR_278 ; if ( METHOD_17 ( VAR_279 -> VAR_280 , & VAR_281 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ) return - VAR_282 ; break ; default : return - VAR_283 ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 , VAR_5 , VAR_6 , VAR_7 ; TYPE_5 VAR_8 = METHOD_1 ( VAR_9 ) ; TYPE_6 VAR_10 = METHOD_2 ( VAR_11 ) ; TYPE_7 * VAR_12 ; if ( METHOD_3 ( VAR_13 ) != METHOD_4 ( 't' , 'f' , 'r' , 'a' ) ) { return 1 ; } METHOD_5 ( VAR_14 -> VAR_15 , VAR_16 , "foundtfra\\n" ) ; VAR_17 = METHOD_6 ( sizeof ( TYPE_8 ) ) ; if ( ! VAR_18 ) { return METHOD_7 ( VAR_19 ) ; } VAR_20 = METHOD_8 ( VAR_21 -> VAR_22 , VAR_23 -> VAR_24 + 1 , sizeof ( TYPE_9 * ) ) ; if ( ! VAR_25 ) { METHOD_9 ( & VAR_26 ) ; return METHOD_10 ( VAR_27 ) ; } VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 [ VAR_33 -> VAR_34 ++ ] = VAR_35 ; VAR_36 = METHOD_11 ( VAR_37 ) ; METHOD_12 ( VAR_38 ) ; VAR_39 -> VAR_40 = METHOD_13 ( VAR_41 ) ; VAR_42 = METHOD_14 ( VAR_43 ) ; VAR_44 -> VAR_45 = METHOD_15 ( VAR_46 ) ; VAR_47 -> VAR_48 = METHOD_16 ( VAR_49 -> VAR_50 , sizeof ( VAR_51 ) ) ; if ( ! VAR_52 -> VAR_53 ) { VAR_54 -> VAR_55 = 0 ; return METHOD_17 ( VAR_56 ) ; } for ( VAR_57 = 0 ; VAR_58 < VAR_59 -> VAR_60 ; VAR_61 ++ ) {  TYPE_10 VAR_62 , VAR_63 ;  if ( VAR_64 == 1 ) { VAR_65 = METHOD_18 ( VAR_66 ) ; VAR_67 = METHOD_19 ( VAR_68 ) ; } else { VAR_69 = METHOD_20 ( VAR_70 ) ; VAR_71 = METHOD_21 ( VAR_72 ) ; } VAR_73 -> VAR_74 [ VAR_75 ] . VAR_76 = VAR_77 ; VAR_78 -> VAR_79 [ VAR_80 ] . VAR_81 = VAR_82 ; for ( VAR_83 = 0 ; VAR_84 < ( ( VAR_85 >> 4 ) & 3 ) + 1 ; VAR_86 ++ ) METHOD_22 ( VAR_87 ) ; for ( VAR_88 = 0 ; VAR_89 < ( ( VAR_90 >> 2 ) & 3 ) + 1 ; VAR_91 ++ ) METHOD_23 ( VAR_92 ) ; for ( VAR_93 = 0 ; VAR_94 < ( ( VAR_95 >> 0 ) & 3 ) + 1 ; VAR_96 ++ ) METHOD_24 ( VAR_97 ) ; } METHOD_25 ( VAR_98 , VAR_99 + VAR_100 , VAR_101 ) ; return 0 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , const TYPE_0 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = container_of ( VAR_4 , struct STRUCT_OR_UNION_4 , VAR_5 ) ; struct STRUCT_OR_UNION_5 * VAR_6 ;  unsigned TYPE_1 VAR_7 ;  TYPE_2 VAR_8 ; if ( METHOD_1 ( VAR_9 , "tpgt_" ) != VAR_10 ) return METHOD_2 ( - VAR_11 ) ;  if ( METHOD_3 ( VAR_12 + 5 , 10 , & VAR_13 ) || VAR_14 > VAR_15 )  return METHOD_4 ( - VAR_16 ) ; VAR_17 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_18 ) ; if ( ! VAR_19 ) { METHOD_6 ( "Unabletoallocatestructvhost_scsi_tpg" ) ; return METHOD_7 ( - VAR_20 ) ; } METHOD_8 ( & VAR_21 -> VAR_22 ) ; METHOD_9 ( & VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = METHOD_10 ( & VAR_32 -> VAR_33 , VAR_34 , & VAR_35 -> VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) { METHOD_11 ( VAR_40 ) ; return VAR_41 ; } METHOD_12 ( & VAR_42 ) ; METHOD_13 ( & VAR_43 -> VAR_44 , & VAR_45 ) ; METHOD_14 ( & VAR_46 ) ; return & VAR_47 -> VAR_48 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { while ( METHOD_1 ( VAR_1 ) ) {  TYPE_2 * VAR_2 = ( TYPE_3 * ) METHOD_2 ( VAR_3 , 0 ) ;  METHOD_3 ( VAR_4 -> VAR_5 ) ; METHOD_4 ( ( TYPE_4 * ) VAR_6 -> VAR_7 ) ; METHOD_5 ( VAR_8 ) ; METHOD_6 ( VAR_9 , 0 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  TYPE_1 VAR_1 ;  TYPE_2 * VAR_2 ; if ( METHOD_1 ( VAR_3 , & VAR_4 -> VAR_5 . VAR_6 ) ) METHOD_2 ( VAR_7 , VAR_8 -> VAR_9 . VAR_10 ) ; if ( ! METHOD_3 ( VAR_11 , & VAR_12 -> VAR_13 . VAR_14 ) ) return ;  VAR_15 = METHOD_4 ( VAR_16 -> VAR_17 . VAR_18 -> VAR_19 ) ;  VAR_20 = * ( TYPE_3 * ) ( VAR_21 + METHOD_5 ( VAR_22 -> VAR_23 . VAR_24 -> VAR_25 ) ) ; METHOD_6 ( VAR_26 ) ; METHOD_7 ( VAR_27 -> VAR_28 . VAR_29 , VAR_30 & 0xff ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_5 ) ;  * VAR_6 = * VAR_7 ;  METHOD_5 ( VAR_8 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 * VAR_3 = ( TYPE_4 * ) * VAR_4 ; if ( ! VAR_5 || METHOD_1 ( VAR_6 , "sb=" , 3 ) != 0 ) return 1 ; VAR_7 += 3 ; VAR_8 = METHOD_2 ( VAR_9 , & VAR_10 , 0 ) ; if ( * VAR_11 && * VAR_12 != ',' ) {  METHOD_3 ( VAR_13 , "error:invalidsbspecification:%s" ,  ( TYPE_5 * ) * VAR_14 ) ; return 1 ; } if ( * VAR_15 == ',' ) VAR_16 ++ ; * VAR_17 = ( TYPE_6 * ) VAR_18 ; return VAR_19 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( - VAR_3 ) ; unsigned TYPE_1 VAR_4 ; unsigned TYPE_2 VAR_5 , VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; TYPE_3 * VAR_8 , * VAR_9 ; TYPE_4 VAR_10 ; TYPE_5 VAR_11 = sizeof ( struct STRUCT_OR_UNION_4 ) ; TYPE_6 VAR_12 ; TYPE_7 VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 ) -> VAR_16 ; if ( METHOD_3 ( VAR_17 -> VAR_18 <= VAR_19 ) ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , VAR_22 | VAR_23 ) ) { TYPE_8 VAR_24 = METHOD_5 ( VAR_25 ) -> VAR_26 ; if ( METHOD_6 ( VAR_27 & ~ ( VAR_28 | VAR_29 ) || ! ( VAR_30 & ( VAR_31 ) ) ) ) goto VAR_32 ; METHOD_7 ( VAR_33 ) -> VAR_34 = METHOD_8 ( VAR_35 -> VAR_36 , VAR_37 ) ; VAR_38 = VAR_39 ; goto VAR_40 ; } VAR_41 = METHOD_9 ( VAR_42 ) ; VAR_43 = METHOD_10 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 - VAR_48 , 0 ) ; VAR_49 += VAR_50 -> VAR_51 ; * ( TYPE_9 * ) ( VAR_52 -> VAR_53 + VAR_54 ) = METHOD_11 ( VAR_55 ) ; VAR_56 -> VAR_57 = VAR_58 ; if ( ( METHOD_12 ( VAR_59 ) < VAR_60 -> VAR_61 + VAR_62 ) && METHOD_13 ( VAR_63 , VAR_64 , 0 , VAR_65 ) ) goto VAR_66 ; VAR_67 = METHOD_14 ( VAR_68 , & VAR_69 ) ; VAR_70 = * VAR_71 ; * VAR_72 = VAR_73 ; VAR_74 = METHOD_15 ( VAR_75 ) - METHOD_16 ( VAR_76 ) + VAR_77 ; VAR_78 = METHOD_17 ( VAR_79 ) ; METHOD_18 ( VAR_80 - VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 -> VAR_85 -= VAR_86 ; VAR_87 -> VAR_88 -= VAR_89 ; VAR_90 = ( struct STRUCT_OR_UNION_5 * ) ( METHOD_19 ( VAR_91 ) + VAR_92 ) ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = 0 ;  METHOD_20 ( VAR_98 ) ;  VAR_99 = METHOD_21 ( VAR_100 , VAR_101 ) ; VAR_102 : return VAR_103 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ,  struct STRUCT_OR_UNION_0 * VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_1 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( ) ; VAR_7 = METHOD_2 ( ) ; if ( VAR_8 < 0 ) return ; METHOD_3 ( & VAR_9 , VAR_10 ) ;  METHOD_4 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , & VAR_15 , VAR_16 ) ;  METHOD_5 ( VAR_17 ) ; METHOD_6 ( ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 VAR_0 [ 16 ] , TYPE_2 VAR_1 [ 16 ] ) {   TYPE_3 VAR_2 [ 8 ] ;   TYPE_4 VAR_3 [ 8 ] ;   TYPE_5 VAR_4 [ 8 ] ;   TYPE_6 VAR_5 [ 8 ] ;   TYPE_7 VAR_6 , VAR_7 ;  VAR_8 [ 0 ] = VAR_9 [ 0 ] + VAR_10 [ 15 ] ; VAR_11 [ 1 ] = VAR_12 [ 1 ] + VAR_13 [ 14 ] ; VAR_14 [ 2 ] = VAR_15 [ 2 ] + VAR_16 [ 13 ] ; VAR_17 [ 3 ] = VAR_18 [ 3 ] + VAR_19 [ 12 ] ; VAR_20 [ 4 ] = VAR_21 [ 4 ] + VAR_22 [ 11 ] ; VAR_23 [ 5 ] = VAR_24 [ 5 ] + VAR_25 [ 10 ] ; VAR_26 [ 6 ] = VAR_27 [ 6 ] + VAR_28 [ 9 ] ; VAR_29 [ 7 ] = VAR_30 [ 7 ] + VAR_31 [ 8 ] ; VAR_32 [ 0 ] = VAR_33 [ 7 ] - VAR_34 [ 8 ] ; VAR_35 [ 1 ] = VAR_36 [ 6 ] - VAR_37 [ 9 ] ; VAR_38 [ 2 ] = VAR_39 [ 5 ] - VAR_40 [ 10 ] ; VAR_41 [ 3 ] = VAR_42 [ 4 ] - VAR_43 [ 11 ] ; VAR_44 [ 4 ] = VAR_45 [ 3 ] - VAR_46 [ 12 ] ; VAR_47 [ 5 ] = VAR_48 [ 2 ] - VAR_49 [ 13 ] ; VAR_50 [ 6 ] = VAR_51 [ 1 ] - VAR_52 [ 14 ] ; VAR_53 [ 7 ] = VAR_54 [ 0 ] - VAR_55 [ 15 ] ; {  TYPE_8 VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 ;   TYPE_9 VAR_64 , VAR_65 , VAR_66 , VAR_67 ;   TYPE_10 VAR_68 , VAR_69 , VAR_70 , VAR_71 ;  VAR_72 = VAR_73 [ 0 ] + VAR_74 [ 7 ] ; VAR_75 = VAR_76 [ 1 ] + VAR_77 [ 6 ] ; VAR_78 = VAR_79 [ 2 ] + VAR_80 [ 5 ] ; VAR_81 = VAR_82 [ 3 ] + VAR_83 [ 4 ] ; VAR_84 = VAR_85 [ 3 ] - VAR_86 [ 4 ] ; VAR_87 = VAR_88 [ 2 ] - VAR_89 [ 5 ] ; VAR_90 = VAR_91 [ 1 ] - VAR_92 [ 6 ] ; VAR_93 = VAR_94 [ 0 ] - VAR_95 [ 7 ] ; VAR_96 = VAR_97 + VAR_98 ; VAR_99 = VAR_100 + VAR_101 ; VAR_102 = VAR_103 - VAR_104 ; VAR_105 = VAR_106 - VAR_107 ; VAR_108 = ( VAR_109 + VAR_110 ) * VAR_111 ; VAR_112 = ( VAR_113 - VAR_114 ) * VAR_115 ; VAR_116 = VAR_117 * VAR_118 + VAR_119 * VAR_120 ; VAR_121 = VAR_122 * VAR_123 - VAR_124 * VAR_125 ;  VAR_126 [ 0 ] = METHOD_1 ( VAR_127 ) ;   VAR_128 [ 4 ] = METHOD_2 ( VAR_129 ) ;   VAR_130 [ 8 ] = METHOD_3 ( VAR_131 ) ;   VAR_132 [ 12 ] = METHOD_4 ( VAR_133 ) ;  VAR_134 = ( VAR_135 - VAR_136 ) * VAR_137 ; VAR_138 = ( VAR_139 + VAR_140 ) * VAR_141 ; VAR_142 = METHOD_5 ( VAR_143 ) ; VAR_144 = METHOD_6 ( VAR_145 ) ; VAR_146 = VAR_147 + VAR_148 ; VAR_149 = VAR_150 - VAR_151 ; VAR_152 = VAR_153 - VAR_154 ; VAR_155 = VAR_156 + VAR_157 ; VAR_158 = VAR_159 * VAR_160 + VAR_161 * VAR_162 ; VAR_163 = VAR_164 * VAR_165 + VAR_166 * VAR_167 ; VAR_168 = VAR_169 * VAR_170 + VAR_171 * - VAR_172 ; VAR_173 = VAR_174 * VAR_175 + VAR_176 * - VAR_177 ;  VAR_178 [ 2 ] = METHOD_7 ( VAR_179 ) ;   VAR_180 [ 6 ] = METHOD_8 ( VAR_181 ) ;   VAR_182 [ 10 ] = METHOD_9 ( VAR_183 ) ;   VAR_184 [ 14 ] = METHOD_10 ( VAR_185 ) ;  } VAR_186 = ( VAR_187 [ 5 ] - VAR_188 [ 2 ] ) * VAR_189 ; VAR_190 = ( VAR_191 [ 4 ] - VAR_192 [ 3 ] ) * VAR_193 ; VAR_194 [ 2 ] = METHOD_11 ( VAR_195 ) ; VAR_196 [ 3 ] = METHOD_12 ( VAR_197 ) ; VAR_198 = ( VAR_199 [ 4 ] + VAR_200 [ 3 ] ) * VAR_201 ; VAR_202 = ( VAR_203 [ 5 ] + VAR_204 [ 2 ] ) * VAR_205 ; VAR_206 [ 4 ] = METHOD_13 ( VAR_207 ) ; VAR_208 [ 5 ] = METHOD_14 ( VAR_209 ) ; VAR_210 [ 0 ] = VAR_211 [ 0 ] + VAR_212 [ 3 ] ; VAR_213 [ 1 ] = VAR_214 [ 1 ] + VAR_215 [ 2 ] ; VAR_216 [ 2 ] = VAR_217 [ 1 ] - VAR_218 [ 2 ] ; VAR_219 [ 3 ] = VAR_220 [ 0 ] - VAR_221 [ 3 ] ; VAR_222 [ 4 ] = VAR_223 [ 7 ] - VAR_224 [ 4 ] ; VAR_225 [ 5 ] = VAR_226 [ 6 ] - VAR_227 [ 5 ] ; VAR_228 [ 6 ] = VAR_229 [ 6 ] + VAR_230 [ 5 ] ; VAR_231 [ 7 ] = VAR_232 [ 7 ] + VAR_233 [ 4 ] ; VAR_234 = VAR_235 [ 1 ] * - VAR_236 + VAR_237 [ 6 ] * VAR_238 ;  VAR_239 = VAR_240 [ 2 ] * - VAR_241 - VAR_242 [ 5 ] * VAR_243 ;  VAR_244 [ 1 ] = METHOD_15 ( VAR_245 ) ; VAR_246 [ 2 ] = METHOD_16 ( VAR_247 ) ;  VAR_248 = VAR_249 [ 2 ] * - VAR_250 + VAR_251 [ 5 ] * VAR_252 ;  VAR_253 = VAR_254 [ 1 ] * VAR_255 + VAR_256 [ 6 ] * VAR_257 ; VAR_258 [ 5 ] = METHOD_17 ( VAR_259 ) ; VAR_260 [ 6 ] = METHOD_18 ( VAR_261 ) ; VAR_262 [ 0 ] = VAR_263 [ 0 ] + VAR_264 [ 1 ] ; VAR_265 [ 1 ] = VAR_266 [ 0 ] - VAR_267 [ 1 ] ;  VAR_268 [ 2 ] = VAR_269 [ 3 ] - VAR_270 [ 2 ] ;  VAR_271 [ 3 ] = VAR_272 [ 3 ] + VAR_273 [ 2 ] ; VAR_274 [ 4 ] = VAR_275 [ 4 ] + VAR_276 [ 5 ] ; VAR_277 [ 5 ] = VAR_278 [ 4 ] - VAR_279 [ 5 ] ; VAR_280 [ 6 ] = VAR_281 [ 7 ] - VAR_282 [ 6 ] ; VAR_283 [ 7 ] = VAR_284 [ 7 ] + VAR_285 [ 6 ] ; VAR_286 = VAR_287 [ 0 ] * VAR_288 + VAR_289 [ 7 ] * VAR_290 ; VAR_291 = VAR_292 [ 1 ] * VAR_293 + VAR_294 [ 6 ] * VAR_295 ;  VAR_296 [ 1 ] = METHOD_19 ( VAR_297 ) ;   VAR_298 [ 9 ] = METHOD_20 ( VAR_299 ) ;  VAR_300 = VAR_301 [ 2 ] * VAR_302 + VAR_303 [ 5 ] * VAR_304 ; VAR_305 = VAR_306 [ 3 ] * VAR_307 + VAR_308 [ 4 ] * VAR_309 ;  VAR_310 [ 5 ] = METHOD_21 ( VAR_311 ) ;   VAR_312 [ 13 ] = METHOD_22 ( VAR_313 ) ;  VAR_314 = VAR_315 [ 3 ] * - VAR_316 + VAR_317 [ 4 ] * VAR_318 ; VAR_319 = VAR_320 [ 2 ] * - VAR_321 + VAR_322 [ 5 ] * VAR_323 ;  VAR_324 [ 3 ] = METHOD_23 ( VAR_325 ) ;   VAR_326 [ 11 ] = METHOD_24 ( VAR_327 ) ;  VAR_328 = VAR_329 [ 1 ] * - VAR_330 + VAR_331 [ 6 ] * VAR_332 ; VAR_333 = VAR_334 [ 0 ] * - VAR_335 + VAR_336 [ 7 ] * VAR_337 ;  VAR_338 [ 7 ] = METHOD_25 ( VAR_339 ) ;   VAR_340 [ 15 ] = METHOD_26 ( VAR_341 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * * VAR_0 , union STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; TYPE_1 VAR_4 = - VAR_5 ; if ( METHOD_1 ( VAR_6 ) == 0 ) return - VAR_7 ; VAR_8 = METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 = & VAR_13 -> VAR_14 ; VAR_15 -> VAR_16 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_5 ) * ( * VAR_17 ) -> VAR_18 ) ; VAR_19 = - VAR_20 ; if ( ! VAR_21 -> VAR_22 ) goto VAR_23 ; VAR_24 -> VAR_25 = * VAR_26 ; VAR_27 -> VAR_28 = VAR_29 [ VAR_30 -> VAR_31 -> VAR_32 ] ; METHOD_4 ( & VAR_33 ) ; if ( VAR_34 -> VAR_35 || VAR_36 -> VAR_37 || VAR_38 -> VAR_39 ) { VAR_40 -> VAR_41 = VAR_42 -> VAR_43 ; VAR_44 -> VAR_45 = ( TYPE_2 TYPE_3 * ) ( unsigned TYPE_4 ) VAR_46 -> VAR_47 ; VAR_48 -> VAR_49 = VAR_50 -> VAR_51 ; VAR_52 = - VAR_53 ; if ( VAR_54 -> VAR_55 < 128 || VAR_56 -> VAR_57 > VAR_58 >> 8 || ! VAR_59 -> VAR_60 || ! VAR_61 -> VAR_62 ) goto VAR_63 ; } VAR_64 -> VAR_65 = ! ! ( VAR_66 -> VAR_67 & VAR_68 ) ; if ( ! METHOD_5 ( VAR_69 ) ) VAR_70 -> VAR_71 = VAR_72 ; if ( VAR_73 -> VAR_74 -> VAR_75 -> VAR_76 ) { VAR_77 = METHOD_6 ( VAR_78 ) ; if ( VAR_79 ) goto VAR_80 ; } VAR_81 = METHOD_7 ( VAR_82 ) ; if ( VAR_83 < 0 ) goto VAR_84 ; VAR_85 -> VAR_86 = METHOD_8 ( VAR_87 -> VAR_88 -> VAR_89 , sizeof ( struct STRUCT_OR_UNION_6 * ) , VAR_90 ) ; VAR_91 = - VAR_92 ; if ( ! VAR_93 -> VAR_94 ) goto VAR_95 ; VAR_96 = METHOD_9 ( VAR_97 ) ; if ( VAR_98 < 0 ) goto VAR_99 ; VAR_100 -> VAR_101 = METHOD_10 ( VAR_102 ) ; VAR_103 = METHOD_11 ( VAR_104 ) ; if ( VAR_105 -> VAR_106 ) { METHOD_12 ( VAR_107 -> VAR_108 , VAR_109 ) ; VAR_110 -> VAR_111 = VAR_112 ; } VAR_113 : while ( ! METHOD_13 ( VAR_114 , VAR_115 , VAR_116 ) ) ; METHOD_14 ( VAR_117 ) ; if ( VAR_118 == 0 )  VAR_119 = METHOD_15 ( VAR_120 ) ;  if ( VAR_121 == 0 ) VAR_122 = METHOD_16 ( VAR_123 ) ; if ( VAR_124 -> VAR_125 && METHOD_17 ( VAR_126 ) ) VAR_127 = - VAR_128 ; if ( VAR_129 -> VAR_130 && ! VAR_131 -> VAR_132 ) { VAR_133 = - VAR_134 ; goto VAR_135 ; } if ( VAR_136 == 0 && VAR_137 -> VAR_138 ) { VAR_139 -> VAR_140 -> VAR_141 -> VAR_142 = METHOD_18 ( VAR_143 -> VAR_144 , sizeof ( VAR_145 -> VAR_146 [ 0 ] ) , VAR_147 ) ; if ( ! VAR_148 -> VAR_149 -> VAR_150 -> VAR_151 ) { VAR_152 = - VAR_153 ; goto VAR_154 ; } METHOD_19 ( VAR_155 -> VAR_156 -> VAR_157 -> VAR_158 , VAR_159 -> VAR_160 , sizeof ( VAR_161 -> VAR_162 [ 0 ] ) * VAR_163 -> VAR_164 ) ; VAR_165 -> VAR_166 -> VAR_167 -> VAR_168 = VAR_169 -> VAR_170 ; METHOD_20 ( VAR_171 ) ; } VAR_172 : if ( ! VAR_173 -> VAR_174 -> VAR_175 -> VAR_176 ) METHOD_21 ( VAR_177 ) ; * VAR_178 = VAR_179 -> VAR_180 ; VAR_181 : METHOD_22 ( & VAR_182 ) ; METHOD_23 ( VAR_183 -> VAR_184 ) ; VAR_185 : METHOD_24 ( VAR_186 ) ; return VAR_187 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 VAR_3 ; TYPE_2 VAR_4 , VAR_5 = 0 , VAR_6 = 0 ;  VAR_7 = VAR_8 -> VAR_9 ;  VAR_10 : if ( ! METHOD_1 ( VAR_11 ) ) { VAR_12 = - VAR_13 ; goto VAR_14 ; } VAR_15 = METHOD_2 ( VAR_16 , VAR_17 -> VAR_18 , VAR_19 -> VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ,  ( unsigned TYPE_3 * ) VAR_25 -> VAR_26 , & VAR_27 ,  VAR_28 -> VAR_29 , VAR_30 , 0 , 0 , VAR_31 ) ; if ( METHOD_3 ( VAR_32 ) != 0 ) { switch ( VAR_33 . VAR_34 ) { case VAR_35 : VAR_36 -> VAR_37 = 1 ; if ( ! VAR_38 -> VAR_39 ) METHOD_4 ( VAR_40 , VAR_41 , "discchangedetected.\\n" ) ; if ( VAR_42 ++ < 10 ) goto VAR_43 ; VAR_44 = - VAR_45 ; break ; case VAR_46 : if ( VAR_47 . VAR_48 == 0x04 && VAR_49 . VAR_50 == 0x01 ) { if ( ! VAR_51 -> VAR_52 ) METHOD_5 ( VAR_53 , VAR_54 , "CDROMnotreadyyet.\\n" ) ; if ( VAR_55 ++ < 10 ) { METHOD_6 ( 2 ) ; goto VAR_56 ; } else { VAR_57 = - VAR_58 ; break ; } } if ( ! VAR_59 -> VAR_60 ) METHOD_7 ( VAR_61 , VAR_62 , "CDROMnotready.Makesurethere" "isadiscinthedrive.\\n" ) ; VAR_63 = - VAR_64 ; break ; case VAR_65 : VAR_66 = - VAR_67 ; if ( VAR_68 . VAR_69 == 0x20 && VAR_70 . VAR_71 == 0x00 ) VAR_72 = - VAR_73 ; break ; default : VAR_74 = - VAR_75 ; } } VAR_76 : VAR_77 -> VAR_78 = VAR_79 ; return VAR_80 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; const TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 = ( ! VAR_8 && ! VAR_9 ) ; VAR_10 = METHOD_1 ( VAR_11 , 1 , & VAR_12 ) ; if ( VAR_13 < 0 || VAR_14 < 0 ) return METHOD_2 ( VAR_15 , "Invalidrequesttounpackwithoffsetof%dandlimitof%d." , VAR_16 , VAR_17 ) ; else if ( VAR_18 > VAR_19 ) return METHOD_3 ( VAR_20 , "Startoffset%dgreaterthaninputlength%d." , VAR_21 , VAR_22 ) ; if ( VAR_23 ) VAR_24 = VAR_25 ; METHOD_4 ( & VAR_26 , ( const unsigned TYPE_9 * ) VAR_27 + VAR_28 , VAR_29 - VAR_30 ) ; for ( VAR_31 = 0 ; VAR_32 . VAR_33 > 0 && VAR_34 < VAR_35 ; VAR_36 ++ ) { METHOD_5 ( VAR_37 , & VAR_38 ) ; if ( VAR_39 . VAR_40 == VAR_41 ) { return METHOD_6 ( VAR_42 , "Missingbytesininput." ) ; } else if ( VAR_43 . VAR_44 == VAR_45 ) { return METHOD_7 ( VAR_46 , "Baddataformatininput." ) ; } } if ( ! VAR_47 ) { TYPE_10 VAR_48 = VAR_49 - VAR_50 . VAR_51 ;  METHOD_8 ( VAR_52 , VAR_53 . VAR_54 == 0 ? - 1 : VAR_55 ) ;  METHOD_9 ( VAR_56 , 2 ) ; VAR_57 += 1 ; } return VAR_58 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ,  const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; const TYPE_6 VAR_5 = VAR_6 < 0 ; const TYPE_7 VAR_7 = VAR_8 ? - VAR_9 : VAR_10 ; const TYPE_8 VAR_11 = METHOD_1 ( VAR_12 - 1 , & VAR_13 ) ; const TYPE_9 VAR_14 = VAR_15 >> 3 ; const TYPE_10 VAR_16 = ( VAR_17 >> 1 ) & 3 ; const TYPE_11 VAR_18 = VAR_19 & 1 ; METHOD_2 ( VAR_20 != 0 ) ;  METHOD_3 ( VAR_21 , VAR_22 , VAR_23 -> VAR_24 ) ;  METHOD_4 ( VAR_25 , VAR_26 , VAR_27 -> VAR_28 , & VAR_29 [ VAR_30 ] ) ; if ( VAR_31 == VAR_32 ) { METHOD_5 ( VAR_33 , VAR_34 , VAR_35 -> VAR_36 , & VAR_37 [ VAR_38 ] ) ; } else { TYPE_12 VAR_39 ; const TYPE_13 VAR_40 = VAR_41 + VAR_42 - 1 ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 ; ++ VAR_46 )  METHOD_6 ( VAR_47 , ( VAR_48 >> VAR_49 ) & 1 , VAR_50 -> VAR_51 [ VAR_52 ] ) ;  } METHOD_7 ( VAR_53 , VAR_54 , VAR_55 == VAR_56 ? VAR_57 -> VAR_58 [ VAR_59 ] : VAR_60 -> VAR_61 , & VAR_62 [ VAR_63 ] ) ; if ( VAR_64 )  METHOD_8 ( VAR_65 , VAR_66 ,  VAR_67 == VAR_68 ? VAR_69 -> VAR_70 : VAR_71 -> VAR_72 ) ; }
static unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = container_of ( VAR_2 , struct STRUCT_OR_UNION_2 , VAR_3 ) ;  return VAR_4 -> VAR_5 . VAR_6 ?  VAR_7 -> VAR_8 . METHOD_1 : VAR_9 -> METHOD_2 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = STRUCT_OR_UNION_4 -> VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = ( struct STRUCT_OR_UNION_6 * ) VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_8 * VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; struct STRUCT_OR_UNION_9 * VAR_13 ; struct STRUCT_OR_UNION_10 VAR_14 ; TYPE_3 VAR_15 = 0 ;  if ( VAR_16 -> VAR_17 != VAR_18 )  return - VAR_19 ; if ( METHOD_2 ( VAR_20 -> VAR_21 . VAR_22 . VAR_23 , VAR_24 -> VAR_25 . VAR_26 . VAR_27 . VAR_28 ) ) return - VAR_29 ; METHOD_3 ( VAR_30 ) ; if ( VAR_31 -> VAR_32 & VAR_33 ) { VAR_34 = - VAR_35 ; goto VAR_36 ; } if ( VAR_37 -> VAR_38 & VAR_39 ) { VAR_40 = - VAR_41 ; goto VAR_42 ; } if ( ! VAR_43 -> VAR_44 . VAR_45 . VAR_46 || ! VAR_47 -> VAR_48 . VAR_49 . VAR_50 . VAR_51 ) { VAR_52 = - VAR_53 ; goto VAR_54 ; } VAR_55 -> VAR_56 . VAR_57 = VAR_58 ; VAR_59 -> VAR_60 . VAR_61 = & VAR_62 ; VAR_63 = METHOD_4 ( METHOD_5 ( VAR_64 ) , & VAR_65 , VAR_66 , VAR_67 -> VAR_68 . VAR_69 . VAR_70 , VAR_71 -> VAR_72 . VAR_73 . VAR_74 , 0 , 0 , VAR_75 , METHOD_6 ( VAR_76 ) , 0 ) ; if ( METHOD_7 ( VAR_77 ) ) { VAR_78 = - VAR_79 ; goto VAR_80 ; } METHOD_8 ( VAR_81 , & VAR_82 -> VAR_83 ) ; VAR_84 -> VAR_85 . VAR_86 = METHOD_9 ( & VAR_87 -> VAR_88 ) ; if ( ! VAR_89 -> VAR_90 . VAR_91 ) VAR_92 -> VAR_93 . VAR_94 = VAR_95 ; METHOD_10 ( VAR_96 ) ; VAR_97 -> VAR_98 . VAR_99 -= VAR_100 ; VAR_101 -> VAR_102 . VAR_103 = 2 + sizeof ( struct STRUCT_OR_UNION_11 ) ; VAR_104 = METHOD_11 ( & VAR_105 -> VAR_106 ) ; if ( VAR_107 ) { METHOD_12 ( "PPTP:failedtoregisterPPPchannel(%d)\\n" , VAR_108 ) ; goto VAR_109 ; } VAR_110 -> VAR_111 = VAR_112 -> VAR_113 . VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 : METHOD_13 ( VAR_119 ) ; return VAR_120 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 == VAR_3 ) return VAR_4 ; METHOD_1 ( & VAR_5 -> VAR_6 -> VAR_7 ) ; if ( VAR_8 == 16 )  VAR_9 -> VAR_10 = VAR_11 ;   else if ( VAR_12 == 32 )   VAR_13 -> VAR_14 = VAR_15 ;   else if ( VAR_16 == 64 )   VAR_17 -> VAR_18 = VAR_19 ;   else if ( VAR_20 == 128 )   VAR_21 -> VAR_22 = VAR_23 ;   else if ( VAR_24 == 256 )   VAR_25 -> VAR_26 = VAR_27 ;   else if ( VAR_28 == 512 )   VAR_29 -> VAR_30 = VAR_31 ;   else   VAR_32 -> VAR_33 = VAR_34 ;  if ( VAR_35 -> VAR_36 > METHOD_2 ( ) )  VAR_37 -> VAR_38 = METHOD_3 ( ) ;  METHOD_4 ( & VAR_39 -> VAR_40 -> VAR_41 ) ; return VAR_42 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ;  TYPE_11 * VAR_14 ;  if ( METHOD_1 ( ) ) { METHOD_2 ( ) ; } VAR_15 = VAR_16 [ 0 ] ; VAR_17 = 0 ; VAR_18 = 0 ;  while ( ( VAR_19 = METHOD_3 ( VAR_20 , VAR_21 , VAR_22 ) ) >= 0 ) {  switch ( VAR_23 ) { case VAR_24 : VAR_25 = 1 ; break ; case VAR_26 : METHOD_4 ( "%s\\n" , VAR_27 ) ; METHOD_5 ( VAR_28 ) ; break ;  case VAR_29 :  VAR_30 = VAR_31 ; break ; case VAR_32 : default : METHOD_6 ( ) ; break ; } }  if ( VAR_33 ) {  if ( ! ( VAR_34 = METHOD_7 ( VAR_35 , "rb" ) ) ) { METHOD_8 ( VAR_36 , "cannotopeninputimagefile%s\\n" , VAR_37 ) ; METHOD_9 ( VAR_38 ) ; } } else { if ( ! ( VAR_39 = METHOD_10 ( 0 , "rb" ) ) ) { METHOD_11 ( VAR_40 , "cannotopenstandardinput\\n" ) ; METHOD_12 ( VAR_41 ) ; } } if ( ( VAR_42 = METHOD_13 ( VAR_43 ) ) < 0 ) { METHOD_14 ( VAR_44 , "unknownimageformat\\n" ) ; }  if ( ! ( VAR_45 = METHOD_15 ( VAR_46 , VAR_47 , 0 ) ) ) {  METHOD_16 ( VAR_48 , "cannotloadimage\\n" ) ; return VAR_49 ; } METHOD_17 ( VAR_50 ) ; VAR_51 = METHOD_18 ( VAR_52 ) ; VAR_53 = METHOD_19 ( VAR_54 , 0 ) ; VAR_55 = METHOD_20 ( VAR_56 , 0 ) ; VAR_57 = METHOD_21 ( VAR_58 , 0 ) ; if ( ! ( VAR_59 = METHOD_22 ( VAR_60 ) ) ) { METHOD_23 ( ) ; } METHOD_24 ( "%s%d%d%d%d%ld\\n" , VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 , ( TYPE_12 ) METHOD_25 ( VAR_66 ) ) ; METHOD_26 ( VAR_67 ) ; METHOD_27 ( ) ; return VAR_68 ; }
asmlinkage void bad_mode ( struct pt_regs * regs , int reason , unsigned int esr )  {  console_verbose ( ) ; pr_crit ( "Badmodein%shandlerdetected,code0x%08x\\n" , handler [ reason ] , esr ) ;  die ( "Oops-badmode" , regs , 0 ) ;  local_irq_disable ( ) ; panic ( "badmode" ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  TYPE_1 VAR_2 ;  VAR_3 = METHOD_1 ( VAR_4 ) ;  if ( VAR_5 < 0 )  return VAR_6 ; return METHOD_2 ( VAR_7 ,  VAR_8 -> VAR_9 [ 0 ] . VAR_10 . VAR_11 , VAR_12 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 VAR_3 = 0 , VAR_4 , VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 * VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , METHOD_2 ( VAR_10 ) , "\\n" , 1 , & VAR_11 ) ; for ( VAR_12 = 0 ; VAR_13 < VAR_14 ; VAR_15 ++ ) { TYPE_6 * VAR_16 ; TYPE_7 VAR_17 ; VAR_18 = VAR_19 + 1 ; VAR_20 [ VAR_21 ] = METHOD_3 ( VAR_22 [ VAR_23 ] , "\\t\\r\\n" ) ; if ( VAR_24 [ VAR_25 ] [ 0 ] == '' || VAR_26 [ VAR_27 ] [ 0 ] == '\\0' ) continue ; VAR_28 = METHOD_4 ( VAR_29 [ VAR_30 ] , & VAR_31 ) ; if ( VAR_32 == VAR_33 ) { VAR_34 = "Unbalancedquotesinconfigurationline" ; goto VAR_35 ; } if ( VAR_36 == 0 ) { METHOD_5 ( VAR_37 , VAR_38 ) ; continue ; } METHOD_6 ( VAR_39 [ 0 ] ) ; if ( ! METHOD_7 ( VAR_40 [ 0 ] , "timeout" ) && VAR_41 == 2 ) { VAR_42 . VAR_43 = METHOD_8 ( VAR_44 [ 1 ] ) ; if ( VAR_45 . VAR_46 < 0 ) { VAR_47 = "Invalidtimeoutvalue" ; goto VAR_48 ; } } else if ( ! METHOD_9 ( VAR_49 [ 0 ] , "tcp-keepalive" ) && VAR_50 == 2 ) { VAR_51 . VAR_52 = METHOD_10 ( VAR_53 [ 1 ] ) ; if ( VAR_54 . VAR_55 < 0 ) { VAR_56 = "Invalidtcp-keepalivevalue" ; goto VAR_57 ; } } else if ( ! METHOD_11 ( VAR_58 [ 0 ] , "protected-mode" ) && VAR_59 == 2 ) { if ( ( VAR_60 . VAR_61 = METHOD_12 ( VAR_62 [ 1 ] ) ) == - 1 ) { VAR_63 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_64 ; } } else if ( ! METHOD_13 ( VAR_65 [ 0 ] , "port" ) && VAR_66 == 2 ) { VAR_67 . VAR_68 = METHOD_14 ( VAR_69 [ 1 ] ) ; if ( VAR_70 . VAR_71 < 0 || VAR_72 . VAR_73 > 65535 ) { VAR_74 = "Invalidport" ; goto VAR_75 ; } } else if ( ! METHOD_15 ( VAR_76 [ 0 ] , "tcp-backlog" ) && VAR_77 == 2 ) { VAR_78 . VAR_79 = METHOD_16 ( VAR_80 [ 1 ] ) ; if ( VAR_81 . VAR_82 < 0 ) { VAR_83 = "Invalidbacklogvalue" ; goto VAR_84 ; } } else if ( ! METHOD_17 ( VAR_85 [ 0 ] , "bind" ) && VAR_86 >= 2 ) { TYPE_8 VAR_87 , VAR_88 = VAR_89 - 1 ; if ( VAR_90 > VAR_91 ) { VAR_92 = "Toomanybindaddressesspecified" ; goto VAR_93 ; } for ( VAR_94 = 0 ; VAR_95 < VAR_96 ; VAR_97 ++ ) VAR_98 . VAR_99 [ VAR_100 ] = METHOD_18 ( VAR_101 [ VAR_102 + 1 ] ) ; VAR_103 . VAR_104 = VAR_105 ; } else if ( ! METHOD_19 ( VAR_106 [ 0 ] , "unixsocket" ) && VAR_107 == 2 ) { VAR_108 . VAR_109 = METHOD_20 ( VAR_110 [ 1 ] ) ; } else if ( ! METHOD_21 ( VAR_111 [ 0 ] , "unixsocketperm" ) && VAR_112 == 2 ) { VAR_113 = 0 ; VAR_114 . VAR_115 = ( TYPE_9 ) METHOD_22 ( VAR_116 [ 1 ] , VAR_117 , 8 ) ; if ( VAR_118 || VAR_119 . VAR_120 > 0777 ) { VAR_121 = "Invalidsocketfilepermissions" ; goto VAR_122 ; } } else if ( ! METHOD_23 ( VAR_123 [ 0 ] , "save" ) ) { if ( VAR_124 == 3 ) { TYPE_10 VAR_125 = METHOD_24 ( VAR_126 [ 1 ] ) ; TYPE_11 VAR_127 = METHOD_25 ( VAR_128 [ 2 ] ) ; if ( VAR_129 < 1 || VAR_130 < 0 ) { VAR_131 = "Invalidsaveparameters" ; goto VAR_132 ; } METHOD_26 ( VAR_133 , VAR_134 ) ; } else if ( VAR_135 == 2 && ! METHOD_27 ( VAR_136 [ 1 ] , "" ) ) { METHOD_28 ( ) ; } } else if ( ! METHOD_29 ( VAR_137 [ 0 ] , "dir" ) && VAR_138 == 2 ) { if ( METHOD_30 ( VAR_139 [ 1 ] ) == - 1 ) { METHOD_31 ( VAR_140 , "Can\'tchdirto\'%s\':%s" , VAR_141 [ 1 ] , METHOD_32 ( VAR_142 ) ) ; METHOD_33 ( 1 ) ; } } else if ( ! METHOD_34 ( VAR_143 [ 0 ] , "loglevel" ) && VAR_144 == 2 ) { VAR_145 . VAR_146 = METHOD_35 ( VAR_147 , VAR_148 [ 1 ] ) ; if ( VAR_149 . VAR_150 == VAR_151 ) { VAR_152 = "Invalidloglevel." "Mustbeoneofdebug,verbose,notice,warning" ; goto VAR_153 ; } } else if ( ! METHOD_36 ( VAR_154 [ 0 ] , "logfile" ) && VAR_155 == 2 ) { VAR_156 * VAR_157 ; METHOD_37 ( VAR_158 . VAR_159 ) ; VAR_160 . VAR_161 = METHOD_38 ( VAR_162 [ 1 ] ) ; if ( VAR_163 . VAR_164 [ 0 ] != '\\0' ) { VAR_165 = METHOD_39 ( VAR_166 . VAR_167 , "a" ) ; if ( VAR_168 == VAR_169 ) { VAR_170 = METHOD_40 ( METHOD_41 ( ) , "Can\'topenthelogfile:%s" , METHOD_42 ( VAR_171 ) ) ; goto VAR_172 ; } METHOD_43 ( VAR_173 ) ; } } else if ( ! METHOD_44 ( VAR_174 [ 0 ] , "syslog-enabled" ) && VAR_175 == 2 ) { if ( ( VAR_176 . VAR_177 = METHOD_45 ( VAR_178 [ 1 ] ) ) == - 1 ) { VAR_179 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_180 ; } } else if ( ! METHOD_46 ( VAR_181 [ 0 ] , "syslog-ident" ) && VAR_182 == 2 ) { if ( VAR_183 . VAR_184 ) METHOD_47 ( VAR_185 . VAR_186 ) ; VAR_187 . VAR_188 = METHOD_48 ( VAR_189 [ 1 ] ) ; } else if ( ! METHOD_49 ( VAR_190 [ 0 ] , "syslog-facility" ) && VAR_191 == 2 ) { VAR_192 . VAR_193 = METHOD_50 ( VAR_194 , VAR_195 [ 1 ] ) ; if ( VAR_196 . VAR_197 == VAR_198 ) { VAR_199 = "Invalidlogfacility.MustbeoneofUSERorbetweenLOCAL0-LOCAL7" ; goto VAR_200 ; } } else if ( ! METHOD_51 ( VAR_201 [ 0 ] , "databases" ) && VAR_202 == 2 ) { VAR_203 . VAR_204 = METHOD_52 ( VAR_205 [ 1 ] ) ; if ( VAR_206 . VAR_207 < 1 ) { VAR_208 = "Invalidnumberofdatabases" ; goto VAR_209 ; } } else if ( ! METHOD_53 ( VAR_210 [ 0 ] , "include" ) && VAR_211 == 2 ) { METHOD_54 ( VAR_212 [ 1 ] , VAR_213 ) ; } else if ( ! METHOD_55 ( VAR_214 [ 0 ] , "maxclients" ) && VAR_215 == 2 ) { VAR_216 . VAR_217 = METHOD_56 ( VAR_218 [ 1 ] ) ; if ( VAR_219 . VAR_220 < 1 ) { VAR_221 = "Invalidmaxclientslimit" ; goto VAR_222 ; } } else if ( ! METHOD_57 ( VAR_223 [ 0 ] , "maxmemory" ) && VAR_224 == 2 ) { VAR_225 . VAR_226 = METHOD_58 ( VAR_227 [ 1 ] , VAR_228 ) ; } else if ( ! METHOD_59 ( VAR_229 [ 0 ] , "maxmemory-policy" ) && VAR_230 == 2 ) { VAR_231 . VAR_232 = METHOD_60 ( VAR_233 , VAR_234 [ 1 ] ) ; if ( VAR_235 . VAR_236 == VAR_237 ) { VAR_238 = "Invalidmaxmemorypolicy" ; goto VAR_239 ; } } else if ( ! METHOD_61 ( VAR_240 [ 0 ] , "maxmemory-samples" ) && VAR_241 == 2 ) { VAR_242 . VAR_243 = METHOD_62 ( VAR_244 [ 1 ] ) ; if ( VAR_245 . VAR_246 <= 0 ) { VAR_247 = "maxmemory-samplesmustbe1orgreater" ; goto VAR_248 ; } } else if ( ! METHOD_63 ( VAR_249 [ 0 ] , "lfu-log-factor" ) && VAR_250 == 2 ) { VAR_251 . VAR_252 = METHOD_64 ( VAR_253 [ 1 ] ) ; if ( VAR_254 . VAR_255 < 0 ) { VAR_256 = "lfu-log-factormustbe0orgreater" ; goto VAR_257 ; } } else if ( ! METHOD_65 ( VAR_258 [ 0 ] , "lfu-decay-time" ) && VAR_259 == 2 ) { VAR_260 . VAR_261 = METHOD_66 ( VAR_262 [ 1 ] ) ; if ( VAR_263 . VAR_264 < 1 ) { VAR_265 = "lfu-decay-timemustbe0orgreater" ; goto VAR_266 ; } } else if ( ! METHOD_67 ( VAR_267 [ 0 ] , "slaveof" ) && VAR_268 == 3 ) { VAR_269 = VAR_270 ; VAR_271 . VAR_272 = METHOD_68 ( VAR_273 [ 1 ] ) ; VAR_274 . VAR_275 = METHOD_69 ( VAR_276 [ 2 ] ) ; VAR_277 . VAR_278 = VAR_279 ; } else if ( ! METHOD_70 ( VAR_280 [ 0 ] , "repl-ping-slave-period" ) && VAR_281 == 2 ) { VAR_282 . VAR_283 = METHOD_71 ( VAR_284 [ 1 ] ) ; if ( VAR_285 . VAR_286 <= 0 ) { VAR_287 = "repl-ping-slave-periodmustbe1orgreater" ; goto VAR_288 ; } } else if ( ! METHOD_72 ( VAR_289 [ 0 ] , "repl-timeout" ) && VAR_290 == 2 ) { VAR_291 . VAR_292 = METHOD_73 ( VAR_293 [ 1 ] ) ; if ( VAR_294 . VAR_295 <= 0 ) { VAR_296 = "repl-timeoutmustbe1orgreater" ; goto VAR_297 ; } } else if ( ! METHOD_74 ( VAR_298 [ 0 ] , "repl-disable-tcp-nodelay" ) && VAR_299 == 2 ) { if ( ( VAR_300 . VAR_301 = METHOD_75 ( VAR_302 [ 1 ] ) ) == - 1 ) { VAR_303 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_304 ; } } else if ( ! METHOD_76 ( VAR_305 [ 0 ] , "repl-diskless-sync" ) && VAR_306 == 2 ) { if ( ( VAR_307 . VAR_308 = METHOD_77 ( VAR_309 [ 1 ] ) ) == - 1 ) { VAR_310 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_311 ; } } else if ( ! METHOD_78 ( VAR_312 [ 0 ] , "repl-diskless-sync-delay" ) && VAR_313 == 2 ) { VAR_314 . VAR_315 = METHOD_79 ( VAR_316 [ 1 ] ) ; if ( VAR_317 . VAR_318 < 0 ) { VAR_319 = "repl-diskless-sync-delaycan\'tbenegative" ; goto VAR_320 ; } } else if ( ! METHOD_80 ( VAR_321 [ 0 ] , "repl-backlog-size" ) && VAR_322 == 2 ) { TYPE_12 TYPE_13 VAR_323 = METHOD_81 ( VAR_324 [ 1 ] , VAR_325 ) ; if ( VAR_326 <= 0 ) { VAR_327 = "repl-backlog-sizemustbe1orgreater." ; goto VAR_328 ; } METHOD_82 ( VAR_329 ) ; } else if ( ! METHOD_83 ( VAR_330 [ 0 ] , "repl-backlog-ttl" ) && VAR_331 == 2 ) { VAR_332 . VAR_333 = METHOD_84 ( VAR_334 [ 1 ] ) ; if ( VAR_335 . VAR_336 < 0 ) { VAR_337 = "repl-backlog-ttlcan\'tbenegative" ; goto VAR_338 ; } } else if ( ! METHOD_85 ( VAR_339 [ 0 ] , "masterauth" ) && VAR_340 == 2 ) { METHOD_86 ( VAR_341 . VAR_342 ) ; VAR_343 . VAR_344 = METHOD_87 ( VAR_345 [ 1 ] ) ; } else if ( ! METHOD_88 ( VAR_346 [ 0 ] , "slave-serve-stale-data" ) && VAR_347 == 2 ) { if ( ( VAR_348 . VAR_349 = METHOD_89 ( VAR_350 [ 1 ] ) ) == - 1 ) { VAR_351 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_352 ; } } else if ( ! METHOD_90 ( VAR_353 [ 0 ] , "slave-read-only" ) && VAR_354 == 2 ) { if ( ( VAR_355 . VAR_356 = METHOD_91 ( VAR_357 [ 1 ] ) ) == - 1 ) { VAR_358 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_359 ; } } else if ( ! METHOD_92 ( VAR_360 [ 0 ] , "rdbcompression" ) && VAR_361 == 2 ) { if ( ( VAR_362 . VAR_363 = METHOD_93 ( VAR_364 [ 1 ] ) ) == - 1 ) { VAR_365 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_366 ; } } else if ( ! METHOD_94 ( VAR_367 [ 0 ] , "rdbchecksum" ) && VAR_368 == 2 ) { if ( ( VAR_369 . VAR_370 = METHOD_95 ( VAR_371 [ 1 ] ) ) == - 1 ) { VAR_372 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_373 ; } } else if ( ! METHOD_96 ( VAR_374 [ 0 ] , "activerehashing" ) && VAR_375 == 2 ) { if ( ( VAR_376 . VAR_377 = METHOD_97 ( VAR_378 [ 1 ] ) ) == - 1 ) { VAR_379 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_380 ; } } else if ( ! METHOD_98 ( VAR_381 [ 0 ] , "lazyfree-lazy-eviction" ) && VAR_382 == 2 ) { if ( ( VAR_383 . VAR_384 = METHOD_99 ( VAR_385 [ 1 ] ) ) == - 1 ) { VAR_386 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_387 ; } } else if ( ! METHOD_100 ( VAR_388 [ 0 ] , "lazyfree-lazy-expire" ) && VAR_389 == 2 ) { if ( ( VAR_390 . VAR_391 = METHOD_101 ( VAR_392 [ 1 ] ) ) == - 1 ) { VAR_393 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_394 ; } } else if ( ! METHOD_102 ( VAR_395 [ 0 ] , "lazyfree-lazy-server-del" ) && VAR_396 == 2 ) { if ( ( VAR_397 . VAR_398 = METHOD_103 ( VAR_399 [ 1 ] ) ) == - 1 ) { VAR_400 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_401 ; } } else if ( ! METHOD_104 ( VAR_402 [ 0 ] , "slave-lazy-flush" ) && VAR_403 == 2 ) { if ( ( VAR_404 . VAR_405 = METHOD_105 ( VAR_406 [ 1 ] ) ) == - 1 ) { VAR_407 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_408 ; } } else if ( ! METHOD_106 ( VAR_409 [ 0 ] , "daemonize" ) && VAR_410 == 2 ) { if ( ( VAR_411 . VAR_412 = METHOD_107 ( VAR_413 [ 1 ] ) ) == - 1 ) { VAR_414 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_415 ; } } else if ( ! METHOD_108 ( VAR_416 [ 0 ] , "hz" ) && VAR_417 == 2 ) { VAR_418 . VAR_419 = METHOD_109 ( VAR_420 [ 1 ] ) ; if ( VAR_421 . VAR_422 < VAR_423 ) VAR_424 . VAR_425 = VAR_426 ; if ( VAR_427 . VAR_428 > VAR_429 ) VAR_430 . VAR_431 = VAR_432 ; } else if ( ! METHOD_110 ( VAR_433 [ 0 ] , "appendonly" ) && VAR_434 == 2 ) { TYPE_14 VAR_435 ; if ( ( VAR_436 = METHOD_111 ( VAR_437 [ 1 ] ) ) == - 1 ) { VAR_438 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_439 ; } VAR_440 . VAR_441 = VAR_442 ? VAR_443 : VAR_444 ; } else if ( ! METHOD_112 ( VAR_445 [ 0 ] , "appendfilename" ) && VAR_446 == 2 ) { if ( ! METHOD_113 ( VAR_447 [ 1 ] ) ) { VAR_448 = "appendfilenamecan\'tbeapath,justafilename" ; goto VAR_449 ; } METHOD_114 ( VAR_450 . VAR_451 ) ; VAR_452 . VAR_453 = METHOD_115 ( VAR_454 [ 1 ] ) ; } else if ( ! METHOD_116 ( VAR_455 [ 0 ] , "no-appendfsync-on-rewrite" ) && VAR_456 == 2 ) { if ( ( VAR_457 . VAR_458 = METHOD_117 ( VAR_459 [ 1 ] ) ) == - 1 ) { VAR_460 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_461 ; } } else if ( ! METHOD_118 ( VAR_462 [ 0 ] , "appendfsync" ) && VAR_463 == 2 ) { VAR_464 . VAR_465 = METHOD_119 ( VAR_466 , VAR_467 [ 1 ] ) ; if ( VAR_468 . VAR_469 == VAR_470 ) { VAR_471 = "argumentmustbe\'no\',\'always\'or\'everysec\'" ; goto VAR_472 ; } } else if ( ! METHOD_120 ( VAR_473 [ 0 ] , "auto-aof-rewrite-percentage" ) && VAR_474 == 2 ) { VAR_475 . VAR_476 = METHOD_121 ( VAR_477 [ 1 ] ) ; if ( VAR_478 . VAR_479 < 0 ) { VAR_480 = "InvalidnegativepercentageforAOFautorewrite" ; goto VAR_481 ; } } else if ( ! METHOD_122 ( VAR_482 [ 0 ] , "auto-aof-rewrite-min-size" ) && VAR_483 == 2 ) { VAR_484 . VAR_485 = METHOD_123 ( VAR_486 [ 1 ] , VAR_487 ) ; } else if ( ! METHOD_124 ( VAR_488 [ 0 ] , "aof-rewrite-incremental-fsync" ) && VAR_489 == 2 ) { if ( ( VAR_490 . VAR_491 = METHOD_125 ( VAR_492 [ 1 ] ) ) == - 1 ) { VAR_493 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_494 ; } } else if ( ! METHOD_126 ( VAR_495 [ 0 ] , "aof-load-truncated" ) && VAR_496 == 2 ) { if ( ( VAR_497 . VAR_498 = METHOD_127 ( VAR_499 [ 1 ] ) ) == - 1 ) { VAR_500 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_501 ; } } else if ( ! METHOD_128 ( VAR_502 [ 0 ] , "aof-use-rdb-preamble" ) && VAR_503 == 2 ) { if ( ( VAR_504 . VAR_505 = METHOD_129 ( VAR_506 [ 1 ] ) ) == - 1 ) { VAR_507 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_508 ; } } else if ( ! METHOD_130 ( VAR_509 [ 0 ] , "requirepass" ) && VAR_510 == 2 ) { if ( METHOD_131 ( VAR_511 [ 1 ] ) > VAR_512 ) { VAR_513 = "PasswordislongerthanCONFIG_AUTHPASS_MAX_LEN" ; goto VAR_514 ; } VAR_515 . VAR_516 = METHOD_132 ( VAR_517 [ 1 ] ) ; } else if ( ! METHOD_133 ( VAR_518 [ 0 ] , "pidfile" ) && VAR_519 == 2 ) { METHOD_134 ( VAR_520 . VAR_521 ) ; VAR_522 . VAR_523 = METHOD_135 ( VAR_524 [ 1 ] ) ; } else if ( ! METHOD_136 ( VAR_525 [ 0 ] , "dbfilename" ) && VAR_526 == 2 ) { if ( ! METHOD_137 ( VAR_527 [ 1 ] ) ) { VAR_528 = "dbfilenamecan\'tbeapath,justafilename" ; goto VAR_529 ; } METHOD_138 ( VAR_530 . VAR_531 ) ; VAR_532 . VAR_533 = METHOD_139 ( VAR_534 [ 1 ] ) ; } else if ( ! METHOD_140 ( VAR_535 [ 0 ] , "hash-max-ziplist-entries" ) && VAR_536 == 2 ) { VAR_537 . VAR_538 = METHOD_141 ( VAR_539 [ 1 ] , VAR_540 ) ; } else if ( ! METHOD_142 ( VAR_541 [ 0 ] , "hash-max-ziplist-value" ) && VAR_542 == 2 ) { VAR_543 . VAR_544 = METHOD_143 ( VAR_545 [ 1 ] , VAR_546 ) ; } else if ( ! METHOD_144 ( VAR_547 [ 0 ] , "list-max-ziplist-entries" ) && VAR_548 == 2 ) { } else if ( ! METHOD_145 ( VAR_549 [ 0 ] , "list-max-ziplist-value" ) && VAR_550 == 2 ) { } else if ( ! METHOD_146 ( VAR_551 [ 0 ] , "list-max-ziplist-size" ) && VAR_552 == 2 ) { VAR_553 . VAR_554 = METHOD_147 ( VAR_555 [ 1 ] ) ; } else if ( ! METHOD_148 ( VAR_556 [ 0 ] , "list-compress-depth" ) && VAR_557 == 2 ) { VAR_558 . VAR_559 = METHOD_149 ( VAR_560 [ 1 ] ) ; } else if ( ! METHOD_150 ( VAR_561 [ 0 ] , "set-max-intset-entries" ) && VAR_562 == 2 ) { VAR_563 . VAR_564 = METHOD_151 ( VAR_565 [ 1 ] , VAR_566 ) ; } else if ( ! METHOD_152 ( VAR_567 [ 0 ] , "zset-max-ziplist-entries" ) && VAR_568 == 2 ) { VAR_569 . VAR_570 = METHOD_153 ( VAR_571 [ 1 ] , VAR_572 ) ; } else if ( ! METHOD_154 ( VAR_573 [ 0 ] , "zset-max-ziplist-value" ) && VAR_574 == 2 ) { VAR_575 . VAR_576 = METHOD_155 ( VAR_577 [ 1 ] , VAR_578 ) ; } else if ( ! METHOD_156 ( VAR_579 [ 0 ] , "hll-sparse-max-bytes" ) && VAR_580 == 2 ) { VAR_581 . VAR_582 = METHOD_157 ( VAR_583 [ 1 ] , VAR_584 ) ; } else if ( ! METHOD_158 ( VAR_585 [ 0 ] , "rename-command" ) && VAR_586 == 3 ) { struct STRUCT_OR_UNION_0 * VAR_587 = METHOD_159 ( VAR_588 [ 1 ] ) ; TYPE_15 VAR_589 ; if ( ! VAR_590 ) { VAR_591 = "Nosuchcommandinrename-command" ; goto VAR_592 ; } VAR_593 = METHOD_160 ( VAR_594 . VAR_595 , VAR_596 [ 1 ] ) ; METHOD_161 ( VAR_597 == VAR_598 ) ; if ( METHOD_162 ( VAR_599 [ 2 ] ) != 0 ) { TYPE_16 VAR_600 = METHOD_163 ( VAR_601 [ 2 ] ) ; VAR_602 = METHOD_164 ( VAR_603 . VAR_604 , VAR_605 , VAR_606 ) ; if ( VAR_607 != VAR_608 ) { METHOD_165 ( VAR_609 ) ; VAR_610 = "Targetcommandnamealreadyexists" ; goto VAR_611 ; } } } else if ( ! METHOD_166 ( VAR_612 [ 0 ] , "cluster-enabled" ) && VAR_613 == 2 ) { if ( ( VAR_614 . VAR_615 = METHOD_167 ( VAR_616 [ 1 ] ) ) == - 1 ) { VAR_617 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_618 ; } } else if ( ! METHOD_168 ( VAR_619 [ 0 ] , "cluster-config-file" ) && VAR_620 == 2 ) { METHOD_169 ( VAR_621 . VAR_622 ) ; VAR_623 . VAR_624 = METHOD_170 ( VAR_625 [ 1 ] ) ; } else if ( ! METHOD_171 ( VAR_626 [ 0 ] , "cluster-announce-ip" ) && VAR_627 == 2 ) { METHOD_172 ( VAR_628 . VAR_629 ) ; VAR_630 . VAR_631 = METHOD_173 ( VAR_632 [ 1 ] ) ; } else if ( ! METHOD_174 ( VAR_633 [ 0 ] , "cluster-announce-port" ) && VAR_634 == 2 ) { VAR_635 . VAR_636 = METHOD_175 ( VAR_637 [ 1 ] ) ; if ( VAR_638 . VAR_639 < 0 || VAR_640 . VAR_641 > 65535 ) { VAR_642 = "Invalidport" ; goto VAR_643 ; } } else if ( ! METHOD_176 ( VAR_644 [ 0 ] , "cluster-announce-bus-port" ) && VAR_645 == 2 ) { VAR_646 . VAR_647 = METHOD_177 ( VAR_648 [ 1 ] ) ; if ( VAR_649 . VAR_650 < 0 || VAR_651 . VAR_652 > 65535 ) { VAR_653 = "Invalidport" ; goto VAR_654 ; } } else if ( ! METHOD_178 ( VAR_655 [ 0 ] , "cluster-require-full-coverage" ) && VAR_656 == 2 ) { if ( ( VAR_657 . VAR_658 = METHOD_179 ( VAR_659 [ 1 ] ) ) == - 1 ) { VAR_660 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_661 ; } } else if ( ! METHOD_180 ( VAR_662 [ 0 ] , "cluster-node-timeout" ) && VAR_663 == 2 ) { VAR_664 . VAR_665 = METHOD_181 ( VAR_666 [ 1 ] , VAR_667 , 10 ) ; if ( VAR_668 . VAR_669 <= 0 ) { VAR_670 = "clusternodetimeoutmustbe1orgreater" ; goto VAR_671 ; } } else if ( ! METHOD_182 ( VAR_672 [ 0 ] , "cluster-migration-barrier" ) && VAR_673 == 2 ) { VAR_674 . VAR_675 = METHOD_183 ( VAR_676 [ 1 ] ) ; if ( VAR_677 . VAR_678 < 0 ) { VAR_679 = "clustermigrationbarriermustzeroorpositive" ; goto VAR_680 ; } } else if ( ! METHOD_184 ( VAR_681 [ 0 ] , "cluster-slave-validity-factor" ) && VAR_682 == 2 ) { VAR_683 . VAR_684 = METHOD_185 ( VAR_685 [ 1 ] ) ; if ( VAR_686 . VAR_687 < 0 ) { VAR_688 = "clusterslavevalidityfactormustbezeroorpositive" ; goto VAR_689 ; } } else if ( ! METHOD_186 ( VAR_690 [ 0 ] , "lua-time-limit" ) && VAR_691 == 2 ) { VAR_692 . VAR_693 = METHOD_187 ( VAR_694 [ 1 ] , VAR_695 , 10 ) ; } else if ( ! METHOD_188 ( VAR_696 [ 0 ] , "slowlog-log-slower-than" ) && VAR_697 == 2 ) { VAR_698 . VAR_699 = METHOD_189 ( VAR_700 [ 1 ] , VAR_701 , 10 ) ; } else if ( ! METHOD_190 ( VAR_702 [ 0 ] , "latency-monitor-threshold" ) && VAR_703 == 2 ) { VAR_704 . VAR_705 = METHOD_191 ( VAR_706 [ 1 ] , VAR_707 , 10 ) ; if ( VAR_708 . VAR_709 < 0 ) { VAR_710 = "Thelatencythresholdcan\'tbenegative" ; goto VAR_711 ; } } else if ( ! METHOD_192 ( VAR_712 [ 0 ] , "slowlog-max-len" ) && VAR_713 == 2 ) { VAR_714 . VAR_715 = METHOD_193 ( VAR_716 [ 1 ] , VAR_717 , 10 ) ; } else if ( ! METHOD_194 ( VAR_718 [ 0 ] , "client-output-buffer-limit" ) && VAR_719 == 5 ) { TYPE_17 VAR_720 = METHOD_195 ( VAR_721 [ 1 ] ) ; unsigned TYPE_18 TYPE_19 VAR_722 , VAR_723 ; TYPE_20 VAR_724 ;  if ( VAR_725 == - 1 ) {  VAR_726 = "Unrecognizedclientlimitclass" ; goto VAR_727 ; } VAR_728 = METHOD_196 ( VAR_729 [ 2 ] , VAR_730 ) ; VAR_731 = METHOD_197 ( VAR_732 [ 3 ] , VAR_733 ) ; VAR_734 = METHOD_198 ( VAR_735 [ 4 ] ) ; if ( VAR_736 < 0 ) { VAR_737 = "Negativenumberofsecondsinsoftlimitisinvalid" ; goto VAR_738 ; } VAR_739 . VAR_740 [ VAR_741 ] . VAR_742 = VAR_743 ; VAR_744 . VAR_745 [ VAR_746 ] . VAR_747 = VAR_748 ; VAR_749 . VAR_750 [ VAR_751 ] . VAR_752 = VAR_753 ; } else if ( ! METHOD_199 ( VAR_754 [ 0 ] , "stop-writes-on-bgsave-error" ) && VAR_755 == 2 ) { if ( ( VAR_756 . VAR_757 = METHOD_200 ( VAR_758 [ 1 ] ) ) == - 1 ) { VAR_759 = "argumentmustbe\'yes\'or\'no\'" ; goto VAR_760 ; } } else if ( ! METHOD_201 ( VAR_761 [ 0 ] , "slave-priority" ) && VAR_762 == 2 ) { VAR_763 . VAR_764 = METHOD_202 ( VAR_765 [ 1 ] ) ; } else if ( ! METHOD_203 ( VAR_766 [ 0 ] , "slave-announce-ip" ) && VAR_767 == 2 ) { METHOD_204 ( VAR_768 . VAR_769 ) ; VAR_770 . VAR_771 = METHOD_205 ( VAR_772 [ 1 ] ) ; } else if ( ! METHOD_206 ( VAR_773 [ 0 ] , "slave-announce-port" ) && VAR_774 == 2 ) { VAR_775 . VAR_776 = METHOD_207 ( VAR_777 [ 1 ] ) ; if ( VAR_778 . VAR_779 < 0 || VAR_780 . VAR_781 > 65535 ) { VAR_782 = "Invalidport" ; goto VAR_783 ; } } else if ( ! METHOD_208 ( VAR_784 [ 0 ] , "min-slaves-to-write" ) && VAR_785 == 2 ) { VAR_786 . VAR_787 = METHOD_209 ( VAR_788 [ 1 ] ) ; if ( VAR_789 . VAR_790 < 0 ) { VAR_791 = "Invalidvalueformin-slaves-to-write." ; goto VAR_792 ; } } else if ( ! METHOD_210 ( VAR_793 [ 0 ] , "min-slaves-max-lag" ) && VAR_794 == 2 ) { VAR_795 . VAR_796 = METHOD_211 ( VAR_797 [ 1 ] ) ; if ( VAR_798 . VAR_799 < 0 ) { VAR_800 = "Invalidvalueformin-slaves-max-lag." ; goto VAR_801 ; } } else if ( ! METHOD_212 ( VAR_802 [ 0 ] , "notify-keyspace-events" ) && VAR_803 == 2 ) { TYPE_21 VAR_804 = METHOD_213 ( VAR_805 [ 1 ] ) ; if ( VAR_806 == - 1 ) { VAR_807 = "Invalideventclasscharacter.Use\'g$lshzxeA\'." ; goto VAR_808 ; } VAR_809 . VAR_810 = VAR_811 ; } else if ( ! METHOD_214 ( VAR_812 [ 0 ] , "supervised" ) && VAR_813 == 2 ) { VAR_814 . VAR_815 = METHOD_215 ( VAR_816 , VAR_817 [ 1 ] ) ; if ( VAR_818 . VAR_819 == VAR_820 ) { VAR_821 = "Invalidoptionfor\'supervised\'." "Allowedvalues:\'upstart\',\'systemd\',\'auto\',or\'no\'" ; goto VAR_822 ; } } else if ( ! METHOD_216 ( VAR_823 [ 0 ] , "loadmodule" ) && VAR_824 >= 2 ) { METHOD_217 ( VAR_825 [ 1 ] , & VAR_826 [ 2 ] , VAR_827 - 2 ) ; } else if ( ! METHOD_218 ( VAR_828 [ 0 ] , "sentinel" ) ) { if ( VAR_829 != 1 ) { if ( ! VAR_830 . VAR_831 ) { VAR_832 = "sentineldirectivewhilenotinsentinelmode" ; goto VAR_833 ; } VAR_834 = METHOD_219 ( VAR_835 + 1 , VAR_836 - 1 ) ; if ( VAR_837 ) goto VAR_838 ; } } else { VAR_839 = "Baddirectiveorwrongnumberofarguments" ; goto VAR_840 ; } METHOD_220 ( VAR_841 , VAR_842 ) ; } if ( VAR_843 . VAR_844 && VAR_845 . VAR_846 ) { VAR_847 = VAR_848 ; VAR_849 = VAR_850 - 1 ; VAR_851 = "slaveofdirectivenotallowedinclustermode" ; goto VAR_852 ; } METHOD_221 ( VAR_853 , VAR_854 ) ; return ; VAR_855 : METHOD_222 ( VAR_856 , "\\n***FATALCONFIGFILEERROR***\\n" ) ; METHOD_223 ( VAR_857 , "Readingtheconfigurationfile,atline%d\\n" , VAR_858 ) ; METHOD_224 ( VAR_859 , ">>>\'%s\'\\n" , VAR_860 [ VAR_861 ] ) ; METHOD_225 ( VAR_862 , "%s\\n" , VAR_863 ) ; METHOD_226 ( 1 ) ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; TYPE_1 VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_2 VAR_6 = METHOD_2 ( VAR_7 ) ;  unsigned TYPE_3 TYPE_4 ;  METHOD_3 ( & VAR_8 -> VAR_9 , TYPE_5 ) ; METHOD_4 ( VAR_10 , & VAR_11 -> VAR_12 , VAR_13 ) { if ( VAR_14 == VAR_15 -> VAR_16 ) { VAR_17 = VAR_18 -> VAR_19 [ VAR_20 ] ; if ( VAR_21 && ( ! METHOD_5 ( & VAR_22 -> VAR_23 ) || ! METHOD_6 ( VAR_24 ) ) ) VAR_25 = VAR_26 ; METHOD_7 ( & VAR_27 -> VAR_28 , TYPE_6 ) ; return VAR_29 ; } } METHOD_8 ( & VAR_30 -> VAR_31 , TYPE_7 ) ; return VAR_32 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * VAR_4 = "" ; const TYPE_5 * VAR_5 = "" ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 ( VAR_8 ) * VAR_9 = VAR_10 ; TYPE_8 VAR_11 [ sizeof ( TYPE_9 ( VAR_12 ) ) ] = { 0 } ; TYPE_10 * VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; if ( VAR_16 -> VAR_17 > VAR_18 -> VAR_19 . VAR_20 ) { return VAR_21 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; if ( VAR_27 -> VAR_28 < 1 || VAR_29 -> VAR_30 > VAR_31 ) { return VAR_32 ; } TYPE_12 ( VAR_33 ) * VAR_34 = METHOD_1 ( VAR_35 -> VAR_36 , sizeof ( TYPE_13 ) ) ; if ( ! VAR_37 ) { return VAR_38 ; } if ( VAR_39 -> VAR_40 && VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) { VAR_45 = & VAR_46 -> VAR_47 [ VAR_48 -> VAR_49 ] ; } if ( VAR_50 && VAR_51 -> VAR_52 && VAR_53 -> VAR_54 < VAR_55 -> VAR_56 ) { VAR_57 = & VAR_58 -> VAR_59 [ VAR_60 -> VAR_61 ] ; } if ( ! VAR_62 ) { METHOD_2 ( "Warning:Cannotallocatememory(CheckElf_(Verdef))\\n" ) ; return VAR_63 ; } VAR_64 = METHOD_3 ( ) ; VAR_65 = ( TYPE_14 * ) VAR_66 + VAR_67 -> VAR_68 ; METHOD_4 ( VAR_69 , "section_name" , VAR_70 , 0 ) ; METHOD_5 ( VAR_71 , "entries" , VAR_72 -> VAR_73 , 0 ) ; METHOD_6 ( VAR_74 , "addr" , VAR_75 -> VAR_76 , 0 ) ; METHOD_7 ( VAR_77 , "offset" , VAR_78 -> VAR_79 , 0 ) ; METHOD_8 ( VAR_80 , "link" , VAR_81 -> VAR_82 , 0 ) ; METHOD_9 ( VAR_83 , "link_section_name" , VAR_84 , 0 ) ; for ( VAR_85 = 0 , VAR_86 = 0 ; VAR_87 >= 0 && VAR_88 < VAR_89 -> VAR_90 && ( VAR_91 - ( TYPE_15 * ) VAR_92 > VAR_93 ) ; ++ VAR_94 ) { TYPE_16 * VAR_95 = METHOD_10 ( ) ; TYPE_17 * VAR_96 = ( ( TYPE_18 * ) VAR_97 ) + VAR_98 ; TYPE_19 VAR_99 [ 32 ] = { 0 } ; TYPE_20 ( VAR_100 ) * VAR_101 = ( TYPE_21 ( VAR_102 ) * ) VAR_103 ; TYPE_22 ( TYPE_23 ) VAR_104 = { 0 } ; TYPE_24 VAR_105 = 0 ; TYPE_25 VAR_106 = 0 ; METHOD_11 ( VAR_107 -> VAR_108 , VAR_109 -> VAR_110 + VAR_111 , VAR_112 , sizeof ( TYPE_26 ( VAR_113 ) ) ) ; VAR_114 -> VAR_115 = METHOD_12 ( VAR_116 , VAR_117 ) VAR_118 -> VAR_119 = METHOD_13 ( VAR_120 , VAR_121 ) VAR_122 -> VAR_123 = METHOD_14 ( VAR_124 , VAR_125 ) VAR_126 -> VAR_127 = METHOD_15 ( VAR_128 , VAR_129 ) VAR_130 -> VAR_131 = METHOD_16 ( VAR_132 , VAR_133 ) VAR_134 -> VAR_135 = METHOD_17 ( VAR_136 , VAR_137 ) VAR_138 -> VAR_139 = METHOD_18 ( VAR_140 , VAR_141 ) TYPE_27 VAR_142 = VAR_143 -> VAR_144 ;  if ( VAR_145 < 1 || ( TYPE_28 * ) VAR_146 - VAR_147 < VAR_148 ) {  METHOD_19 ( VAR_149 ) ; goto VAR_150 ; } VAR_151 += VAR_152 ; if ( VAR_153 > VAR_154 || VAR_155 - VAR_156 < sizeof ( TYPE_29 ( TYPE_30 ) ) ) { METHOD_20 ( VAR_157 ) ; goto VAR_158 ; } VAR_159 = 0 ; VAR_160 . VAR_161 = METHOD_21 ( VAR_162 , VAR_163 ) VAR_164 . VAR_165 = METHOD_22 ( VAR_166 , VAR_167 ) VAR_168 = VAR_169 + VAR_170 -> VAR_171 ; if ( VAR_172 . VAR_173 > VAR_174 -> VAR_175 ) { METHOD_23 ( VAR_176 ) ; goto VAR_177 ; } METHOD_24 ( VAR_178 , "idx" , VAR_179 , 0 ) ; METHOD_25 ( VAR_180 , "vd_version" , VAR_181 -> VAR_182 , 0 ) ; METHOD_26 ( VAR_183 , "vd_ndx" , VAR_184 -> VAR_185 , 0 ) ; METHOD_27 ( VAR_186 , "vd_cnt" , VAR_187 -> VAR_188 , 0 ) ; METHOD_28 ( VAR_189 , "vda_name" , & VAR_190 -> VAR_191 [ VAR_192 . VAR_193 ] , 0 ) ; METHOD_29 ( VAR_194 , "flags" , METHOD_30 ( VAR_195 -> VAR_196 ) , 0 ) ; for ( VAR_197 = 1 ; VAR_198 < VAR_199 -> VAR_200 ; ++ VAR_201 ) { TYPE_31 VAR_202 ; TYPE_32 * VAR_203 = METHOD_31 ( ) ; VAR_204 += VAR_205 . VAR_206 ; VAR_207 += VAR_208 . VAR_209 ; if ( VAR_210 > VAR_211 || VAR_212 - VAR_213 < sizeof ( TYPE_33 ( TYPE_34 ) ) ) { METHOD_32 ( VAR_214 ) ; METHOD_33 ( VAR_215 ) ; goto VAR_216 ; } VAR_217 = 0 ; VAR_218 . VAR_219 = METHOD_34 ( VAR_220 , VAR_221 ) VAR_222 . VAR_223 = METHOD_35 ( VAR_224 , VAR_225 ) if ( VAR_226 . VAR_227 > VAR_228 -> VAR_229 ) { METHOD_36 ( VAR_230 ) ; METHOD_37 ( VAR_231 ) ; goto VAR_232 ; } METHOD_38 ( VAR_233 , "idx" , VAR_234 , 0 ) ; METHOD_39 ( VAR_235 , "parent" , VAR_236 , 0 ) ; METHOD_40 ( VAR_237 , "vda_name" , & VAR_238 -> VAR_239 [ VAR_240 . VAR_241 ] , 0 ) ; METHOD_41 ( VAR_242 , sizeof ( VAR_243 ) , "parent%d" , VAR_244 - 1 ) ; METHOD_42 ( VAR_245 , VAR_246 , VAR_247 ) ; } METHOD_43 ( VAR_248 , sizeof ( VAR_249 ) , "verdef%d" , VAR_250 ) ; METHOD_44 ( VAR_251 , VAR_252 , VAR_253 ) ; if ( ! VAR_254 -> VAR_255 ) { METHOD_45 ( VAR_256 ) ; goto VAR_257 ; } if ( ( TYPE_35 ) VAR_258 -> VAR_259 < 1 ) { METHOD_46 ( "Warning:Invalidvd_nextintheELFversion\\n" ) ; break ; } VAR_260 += VAR_261 -> VAR_262 ; } METHOD_47 ( VAR_263 ) ; return VAR_264 ; VAR_265 : METHOD_48 ( VAR_266 ) ; METHOD_49 ( VAR_267 ) ; return VAR_268 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 = VAR_6 ;  VAR_7 = METHOD_1 ( ) ;  if ( VAR_8 == VAR_9 ) return VAR_10 ; VAR_11 = METHOD_2 ( VAR_12 , VAR_13 , VAR_14 , & VAR_15 -> VAR_16 ) ; if ( VAR_17 != VAR_18 ) goto VAR_19 ; VAR_20 -> VAR_21 = & VAR_22 -> VAR_23 -> VAR_24 [ 0 ] ; if ( METHOD_3 ( VAR_25 -> VAR_26 , & VAR_27 -> VAR_28 ) < 0 ) { VAR_29 = VAR_30 ; goto VAR_31 ; } VAR_32 -> VAR_33 = VAR_34 ; * VAR_35 = ( TYPE_7 ) VAR_36 ; VAR_37 = VAR_38 ; * VAR_39 = VAR_40 ; VAR_41 = VAR_42 ; VAR_43 : METHOD_4 ( & VAR_44 ) ; return VAR_45 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 = ( struct STRUCT_OR_UNION_4 * ) VAR_6 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 = METHOD_2 ( VAR_7 ) ; TYPE_2 VAR_8 ; TYPE_3 VAR_9 ;  if ( ! METHOD_3 ( VAR_10 , VAR_11 ) )  return - VAR_12 ;  if ( VAR_13 < sizeof ( struct STRUCT_OR_UNION_7 ) )  return - VAR_14 ;  if ( VAR_15 -> VAR_16 != VAR_17 )  return - VAR_18 ; VAR_19 = - VAR_20 ; METHOD_4 ( & VAR_21 ) ; if ( METHOD_5 ( STRUCT_OR_UNION_8 , VAR_22 -> VAR_23 . VAR_24 , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ) goto VAR_29 ; METHOD_6 ( & VAR_30 ) ;  METHOD_7 ( VAR_31 ) ;  if ( VAR_32 -> VAR_33 != VAR_34 || VAR_35 < sizeof ( struct STRUCT_OR_UNION_9 ) ) goto VAR_36 ; VAR_37 = METHOD_8 ( STRUCT_OR_UNION_10 , VAR_38 -> VAR_39 . VAR_40 ) ; VAR_41 = - VAR_42 ; if ( VAR_43 -> VAR_44 . VAR_45 && VAR_46 != VAR_47 && VAR_48 != VAR_49 && VAR_50 != VAR_51 ) goto VAR_52 ; if ( VAR_53 -> VAR_54 . VAR_55 ) VAR_56 -> VAR_57 = VAR_58 -> VAR_59 = VAR_60 -> VAR_61 . VAR_62 ; if ( VAR_63 == VAR_64 || VAR_65 == VAR_66 ) VAR_67 -> VAR_68 = 0 ; METHOD_9 ( VAR_69 ) ; METHOD_10 ( VAR_70 ) -> VAR_71 = VAR_72 -> VAR_73 ; METHOD_11 ( & VAR_74 ) ; METHOD_12 ( VAR_75 , & VAR_76 ) ; METHOD_13 ( VAR_77 ) ; METHOD_14 ( & VAR_78 ) ; VAR_79 = 0 ; METHOD_15 ( VAR_80 , VAR_81 ) ; VAR_82 : METHOD_16 ( VAR_83 ) ; return VAR_84 ; VAR_85 : METHOD_17 ( & VAR_86 ) ; return VAR_87 ; }
static unsigned TYPE_0 METHOD_0 ( TYPE_1 )  {  unsigned TYPE_2 VAR_0 = 0 ;  if ( ( VAR_1 -> VAR_2 & VAR_3 ) && ! ( VAR_4 -> VAR_5 & VAR_6 ) ) {  VAR_7 = ( ( - 1U ) & VAR_8 ) << VAR_9 ;  } return VAR_10 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_3 * VAR_4 , * VAR_5 , * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_4 * VAR_11 ; VAR_12 = METHOD_1 ( METHOD_2 ( VAR_13 -> VAR_14 ) ) ; if ( ! METHOD_3 ( VAR_15 ) ) { VAR_16 = METHOD_4 ( VAR_17 , 1 ) ; if ( VAR_18 -> VAR_19 ) { VAR_20 -> VAR_21 = VAR_22 -> VAR_23 ; METHOD_5 ( METHOD_6 ( VAR_24 -> VAR_25 ) , ( TYPE_5 * ) & VAR_26 -> VAR_27 ) ; } VAR_28 -> VAR_29 = METHOD_7 ( VAR_30 ) ; VAR_31 = METHOD_8 ( "Untrustedapplicationlauncher" ) ; VAR_32 = METHOD_9 ( VAR_33 ) ; VAR_34 = METHOD_10 ( METHOD_11 ( "Theapplicationlauncher“%s”hasnotbeenmarkedastrusted." "Ifyoudonotknowthesourceofthisfile,launchingitmaybeunsafe." ) , VAR_35 ) ; VAR_36 = METHOD_12 ( VAR_37 -> VAR_38 , 0 , VAR_39 , VAR_40 , VAR_41 ) ; METHOD_13 ( VAR_42 , "text" , VAR_43 , "secondary-text" , VAR_44 , VAR_45 ) ; METHOD_14 ( METHOD_15 ( VAR_46 ) ,  METHOD_16 ( "_LaunchAnyway" ) , VAR_47 ) ;  if ( METHOD_17 ( VAR_48 ) ) { METHOD_18 ( METHOD_19 ( VAR_49 ) ,  METHOD_20 ( "Markas_Trusted" ) , VAR_50 ) ;  }  METHOD_21 ( METHOD_22 ( VAR_51 ) ,  METHOD_23 ( "_Cancel" ) , VAR_52 ) ; METHOD_24 ( METHOD_25 ( VAR_53 ) , VAR_54 ) ; METHOD_26 ( VAR_55 , "response" , METHOD_27 ( VAR_56 ) , VAR_57 ) ; METHOD_28 ( VAR_58 ) ; METHOD_29 ( VAR_59 ) ; METHOD_30 ( VAR_60 ) ; return ; } VAR_61 = METHOD_31 ( VAR_62 ) ; METHOD_32 ( "Launchingtrustedlauncher%s" , VAR_63 ) ; METHOD_33 ( VAR_64 , VAR_65 , VAR_66 , VAR_67 -> VAR_68 ) ; METHOD_34 ( VAR_69 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ; TYPE_2 * VAR_1 ; TYPE_3 VAR_2 ;  STRUCT_OR_UNION_2 = METHOD_1 ( & VAR_3 ) ;  VAR_4 = METHOD_2 ( METHOD_3 ( STRUCT_OR_UNION_3 ) ) ; VAR_5 = METHOD_4 ( VAR_6 ) ; if ( VAR_7 > 0 ) VAR_8 [ VAR_9 - 1 ] = '\\0' ; return VAR_10 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , TYPE_5 * VAR_3 ) { TYPE_6 VAR_4 , VAR_5 ; unsigned TYPE_7 VAR_6 [ VAR_7 ] ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 = METHOD_1 ( VAR_10 ) ; unsigned TYPE_10 VAR_11 [ 256 + VAR_12 ] ; unsigned TYPE_11 * VAR_13 ; VAR_14 * VAR_15 ; if ( VAR_16 > VAR_17 ) { VAR_18 = VAR_19 ; } if ( VAR_20 == 0 ) { VAR_21 = VAR_22 ; } if ( ( VAR_23 & ( VAR_24 - 1 ) ) != 0 ) { VAR_25 += ( VAR_26 - 1 ) ; VAR_27 &= ~ ( VAR_28 - 1 ) ; } METHOD_2 ( VAR_29 , 0 , VAR_30 ) ;  METHOD_3 ( VAR_31 , VAR_32 , METHOD_4 ( VAR_33 ) ) ;  VAR_34 = METHOD_5 ( VAR_35 , VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 = VAR_40 -> VAR_41 ; } else { VAR_42 = VAR_43 -> VAR_44 ; } METHOD_6 ( & VAR_45 ) ; METHOD_7 ( & VAR_46 , ( unsigned TYPE_12 * ) VAR_47 , METHOD_8 ( VAR_48 ) ) ; VAR_49 = VAR_50 ; METHOD_9 ( & VAR_51 , VAR_52 , VAR_53 ) ; METHOD_10 ( VAR_54 , & VAR_55 ) ; METHOD_11 ( VAR_56 , VAR_57 , VAR_58 ) ; for ( VAR_59 = 1 ; VAR_60 < ( VAR_61 >> 4 ) ; VAR_62 ++ ) { VAR_63 = VAR_64 ; METHOD_12 ( & VAR_65 , & VAR_66 [ ( VAR_67 - 1 ) * VAR_68 ] , VAR_69 ) ; METHOD_13 ( VAR_70 , & VAR_71 ) ; METHOD_14 ( & VAR_72 [ VAR_73 * VAR_74 ] , VAR_75 , VAR_76 ) ; } if ( VAR_77 == VAR_78 ) { VAR_79 = METHOD_15 ( VAR_80 , VAR_81 ) ; } if ( ! VAR_82 ) { METHOD_16 ( VAR_83 , VAR_84 , VAR_85 , VAR_86 ) ; } else { METHOD_17 ( VAR_87 -> VAR_88 , VAR_89 , VAR_90 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  { TYPE_1 VAR_1 [ ] = { 0x51 } ; TYPE_2 VAR_2 [ ] = { 0 } ;  if ( METHOD_1 ( VAR_3 -> VAR_4 , VAR_5 , 1 , VAR_6 , 1 , 0 ) < 0 )  METHOD_2 ( "command0x51transferfailed." ) ;  VAR_7 -> VAR_8 [ 0 ] . VAR_9 = METHOD_3 ( VAR_10 , & VAR_11 ,   & VAR_12 -> VAR_13 -> VAR_14 ) ;   if ( VAR_15 -> VAR_16 [ 0 ] . VAR_17 == VAR_18 )  return - VAR_19 ;  if ( METHOD_4 ( VAR_20 , VAR_21 -> VAR_22 [ 0 ] . VAR_23 ,  & VAR_24 ,  & VAR_25 -> VAR_26 -> VAR_27 ) ) {  METHOD_5 ( "AttachedRS2000/TS2020!" ) ; return 0 ; } METHOD_6 ( "FailedtoattachRS2000/TS2020!" ) ; return - VAR_28 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = 0 ; struct STRUCT_OR_UNION_0 * VAR_2 = ( struct STRUCT_OR_UNION_1 * ) VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ;  struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( VAR_7 -> VAR_8 . VAR_9 ) ;   METHOD_2 ( VAR_10 -> VAR_11 . VAR_12 ) ;   if ( METHOD_3 ( VAR_13 -> VAR_14 . VAR_15 ) ) {  METHOD_4 ( "%s:sockisbusy\\n" , VAR_16 ) ; if ( ! METHOD_5 ( & VAR_17 -> VAR_18 , VAR_19 + ( VAR_20 / 20 ) ) ) METHOD_6 ( VAR_21 ) ; goto VAR_22 ; } if ( VAR_23 -> VAR_24 ) goto VAR_25 ; VAR_26 = METHOD_7 ( STRUCT_OR_UNION_5 , VAR_27 , METHOD_8 ( VAR_28 ) , VAR_29 -> VAR_30 , VAR_31 -> VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 )  VAR_37 -> VAR_38 . VAR_39 -> VAR_40 = - VAR_41 ;  VAR_42 :  METHOD_9 ( VAR_43 -> VAR_44 . VAR_45 ) ;  METHOD_10 ( VAR_46 ) ; }
VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_2 * VAR_3 ) { METHOD_1 ( VAR_4 , "%llu:APIv1datawithURL\'%s\'" , VAR_5 -> VAR_6 , VAR_7 ) ; TYPE_3 VAR_8 = 400 ; TYPE_4 * VAR_9 = VAR_10 ; METHOD_2 ( VAR_11 -> VAR_12 . VAR_13 ) ; TYPE_5 * VAR_14 = "0.6" , * VAR_15 = "0" , * VAR_16 = "0" , * VAR_17 = "json" , * VAR_18 = VAR_19 , * VAR_20 = VAR_21 ; TYPE_6 VAR_22 = 0 , VAR_23 = 0 ; TYPE_7 * VAR_24 = VAR_25 , * VAR_26 = VAR_27 , * VAR_28 = VAR_29 , * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_8 VAR_34 = VAR_35 ; TYPE_9 VAR_36 = VAR_37 ; TYPE_10 VAR_38 = 0x00000000 ; while ( VAR_39 ) { TYPE_11 * VAR_40 = METHOD_3 ( & VAR_41 , "?&" ) ; if ( ! VAR_42 || ! * VAR_43 ) continue ; TYPE_12 * VAR_44 = METHOD_4 ( & VAR_45 , "=" ) ; if ( ! VAR_46 || ! * VAR_47 ) continue ; if ( ! VAR_48 || ! * VAR_49 ) continue ; METHOD_5 ( VAR_50 , "%llu:APIv1dataqueryparam\'%s\'withvalue\'%s\'" , VAR_51 -> VAR_52 , VAR_53 , VAR_54 ) ; if ( ! METHOD_6 ( VAR_55 , "chart" ) ) VAR_56 = VAR_57 ; else if ( ! METHOD_7 ( VAR_58 , "dimension" ) || ! METHOD_8 ( VAR_59 , "dim" ) || ! METHOD_9 ( VAR_60 , "dimensions" ) || ! METHOD_10 ( VAR_61 , "dims" ) ) { if ( ! VAR_62 ) VAR_63 = METHOD_11 ( 100 ) ; METHOD_12 ( VAR_64 , "|" ) ; METHOD_13 ( VAR_65 , VAR_66 ) ; } else if ( ! METHOD_14 ( VAR_67 , "after" ) ) VAR_68 = VAR_69 ; else if ( ! METHOD_15 ( VAR_70 , "before" ) ) VAR_71 = VAR_72 ; else if ( ! METHOD_16 ( VAR_73 , "points" ) ) VAR_74 = VAR_75 ; else if ( ! METHOD_17 ( VAR_76 , "gtime" ) ) VAR_77 = VAR_78 ; else if ( ! METHOD_18 ( VAR_79 , "group" ) ) { VAR_80 = METHOD_19 ( VAR_81 , VAR_82 ) ; } else if ( ! METHOD_20 ( VAR_83 , "format" ) ) { VAR_84 = METHOD_21 ( VAR_85 ) ; } else if ( ! METHOD_22 ( VAR_86 , "options" ) ) { VAR_87 |= METHOD_23 ( VAR_88 ) ; } else if ( ! METHOD_24 ( VAR_89 , "callback" ) ) { VAR_90 = VAR_91 ; } else if ( ! METHOD_25 ( VAR_92 , "filename" ) ) { VAR_93 = VAR_94 ; } else if ( ! METHOD_26 ( VAR_95 , "tqx" ) ) { TYPE_13 * VAR_96 , * VAR_97 ; while ( VAR_98 ) { VAR_99 = METHOD_27 ( & VAR_100 , ";" ) ; if ( ! VAR_101 || ! * VAR_102 ) continue ; VAR_103 = METHOD_28 ( & VAR_104 , ":" ) ; if ( ! VAR_105 || ! * VAR_106 ) continue ; if ( ! VAR_107 || ! * VAR_108 ) continue ; if ( ! METHOD_29 ( VAR_109 , "version" ) ) VAR_110 = VAR_111 ; else if ( ! METHOD_30 ( VAR_112 , "reqId" ) ) VAR_113 = VAR_114 ; else if ( ! METHOD_31 ( VAR_115 , "sig" ) ) { VAR_116 = VAR_117 ; VAR_118 = METHOD_32 ( VAR_119 , VAR_120 , 0 ) ; } else if ( ! METHOD_33 ( VAR_121 , "out" ) ) { VAR_122 = VAR_123 ; VAR_124 = METHOD_34 ( VAR_125 ) ; } else if ( ! METHOD_35 ( VAR_126 , "responseHandler" ) ) VAR_127 = VAR_128 ; else if ( ! METHOD_36 ( VAR_129 , "outFileName" ) ) VAR_130 = VAR_131 ; } } }  if ( ! VAR_132 || ! * VAR_133 ) {  METHOD_37 ( VAR_134 -> VAR_135 . VAR_136 , "Nochartidisgivenattherequest." ) ; goto VAR_137 ; } TYPE_14 * VAR_138 = METHOD_38 ( VAR_139 , VAR_140 ) ; if ( ! VAR_141 ) VAR_142 = METHOD_39 ( VAR_143 , VAR_144 ) ; if ( ! VAR_145 ) { METHOD_40 ( VAR_146 -> VAR_147 . VAR_148 , "Chartisnotfound:" ) ; METHOD_41 ( VAR_149 -> VAR_150 . VAR_151 , VAR_152 ) ; VAR_153 = 404 ; goto VAR_154 ; } VAR_155 -> VAR_156 = METHOD_42 ( ) ; TYPE_15 TYPE_16 VAR_157 = ( VAR_158 && * VAR_159 ) ? METHOD_43 ( VAR_160 ) : 0 ; TYPE_17 TYPE_18 VAR_161 = ( VAR_162 && * VAR_163 ) ? METHOD_44 ( VAR_164 ) : 0 ; TYPE_19 VAR_165 = ( VAR_166 && * VAR_167 ) ? METHOD_45 ( VAR_168 ) : 0 ; TYPE_20 VAR_169 = ( VAR_170 && * VAR_171 ) ? METHOD_46 ( VAR_172 ) : 0 ; METHOD_47 ( VAR_173 , "%llu:APIcommand\'data\'forchart\'%s\',dimensions\'%s\',after\'%lld\',before\'%lld\',points\'%d\',group\'%d\',format\'%u\',options\'0x%08x\'" , VAR_174 -> VAR_175 , VAR_176 , ( VAR_177 ) ? METHOD_48 ( VAR_178 ) : "" , VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; if ( VAR_185 && * VAR_186 ) { METHOD_49 ( VAR_187 -> VAR_188 . VAR_189 , "Content-Disposition:attachment;filename=\\"%s\\"\\r\\n" , VAR_190 ) ; METHOD_50 ( VAR_191 , "%llu:generatingoutfilenameheader:\'%s\'" , VAR_192 -> VAR_193 , VAR_194 ) ; } if ( VAR_195 == VAR_196 ) { if ( VAR_197 == VAR_198 ) VAR_199 = "google.visualization.Query.setResponse" ; METHOD_51 ( VAR_200 , "%llu:GOOGLEJSON/JSONP:version=\'%s\',reqId=\'%s\',sig=\'%s\',out=\'%s\',responseHandler=\'%s\',outFileName=\'%s\'" , VAR_201 -> VAR_202 , VAR_203 , VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 ) ; METHOD_52 ( VAR_209 -> VAR_210 . VAR_211 , "%s({version:\'%s\',reqId:\'%s\',status:\'ok\',sig:\'%ld\',table:" , VAR_212 , VAR_213 , VAR_214 , VAR_215 -> VAR_216 . VAR_217 ) ; } else if ( VAR_218 == VAR_219 ) { if ( VAR_220 == VAR_221 ) VAR_222 = "callback" ; METHOD_53 ( VAR_223 -> VAR_224 . VAR_225 , VAR_226 ) ; METHOD_54 ( VAR_227 -> VAR_228 . VAR_229 , "(" ) ; } VAR_230 = METHOD_55 ( VAR_231 , VAR_232 -> VAR_233 . VAR_234 , VAR_235 , VAR_236 , VAR_237 , VAR_238 , VAR_239 , VAR_240 , VAR_241 , VAR_242 , & VAR_243 ) ; if ( VAR_244 == VAR_245 ) { if ( VAR_246 < VAR_247 ) METHOD_56 ( VAR_248 -> VAR_249 . VAR_250 , "});" ) ; else { METHOD_57 ( VAR_251 -> VAR_252 . VAR_253 ) ; METHOD_58 ( VAR_254 -> VAR_255 . VAR_256 , "%s({version:\'%s\',reqId:\'%s\',status:\'error\',errors:[{reason:\'not_modified\',message:\'Datanotmodified\'}]});" , VAR_257 , VAR_258 , VAR_259 ) ; } } else if ( VAR_260 == VAR_261 ) METHOD_59 ( VAR_262 -> VAR_263 . VAR_264 , ");" ) ; VAR_265 : METHOD_60 ( VAR_266 ) ; return VAR_267 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = METHOD_1 ( STRUCT_OR_UNION_3 ) ; TYPE_1 VAR_1 = METHOD_2 ( STRUCT_OR_UNION_4 ) ;  struct STRUCT_OR_UNION_5 * VAR_2 ;  VAR_3 = ( struct STRUCT_OR_UNION_6 * ) METHOD_3 ( STRUCT_OR_UNION_7 ) ; METHOD_4 ( STRUCT_OR_UNION_8 , 0 ) ; STRUCT_OR_UNION_9 -> VAR_4 = VAR_5 ; METHOD_5 ( METHOD_6 ( STRUCT_OR_UNION_10 ) ) ; METHOD_7 ( METHOD_8 ( STRUCT_OR_UNION_11 ) ) ; METHOD_9 ( & STRUCT_OR_UNION_12 -> VAR_6 ) ; METHOD_10 ( & VAR_7 ) ; if ( VAR_8 -> VAR_9 [ VAR_10 ] && METHOD_11 ( VAR_11 ) < VAR_12 ) { METHOD_12 ( VAR_13 , STRUCT_OR_UNION_13 ) ; VAR_14 -> VAR_15 -- ; VAR_16 -> VAR_17 [ VAR_18 ] -- ; } else { METHOD_13 ( VAR_19 , STRUCT_OR_UNION_14 ) ; } METHOD_14 ( & VAR_20 ) ;  if ( VAR_21 )  METHOD_15 ( VAR_22 , 1 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_7 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_9 VAR_17 = VAR_18 , VAR_19 ; TYPE_10 VAR_20 ; VAR_21 : VAR_22 = METHOD_1 ( VAR_23 ) ; VAR_24 = METHOD_2 ( VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; METHOD_4 ( VAR_28 ) ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = VAR_36 & 0x10 ; if ( VAR_37 != VAR_38 ) { METHOD_8 ( VAR_39 , VAR_40 , "invalidsyncword\\n" ) ; return METHOD_9 ( VAR_41 ) ; } if ( VAR_42 != VAR_43 && VAR_44 != VAR_45 ) { METHOD_10 ( VAR_46 , VAR_47 , "invalidstreamid\\n" ) ; return METHOD_11 ( VAR_48 ) ; } if ( VAR_49 != 0x55 ) { METHOD_12 ( VAR_50 , VAR_51 , "expectedreservedbytetobe0x55\\n" ) ; } if ( VAR_52 > VAR_53 ) { METHOD_13 ( VAR_54 , VAR_55 , "invalidpayloadlength%u\\n" , VAR_56 ) ; return METHOD_14 ( VAR_57 ) ; } if ( VAR_58 == VAR_59 && VAR_60 ) { VAR_61 = METHOD_15 ( VAR_62 ) ; VAR_63 -= 4 ; } else if ( VAR_64 == VAR_65 ) { if ( ! VAR_66 -> VAR_67 ) { TYPE_11 VAR_68 , VAR_69 , VAR_70 , VAR_71 ; unsigned TYPE_12 VAR_72 [ 256 ] ; VAR_73 = METHOD_16 ( VAR_74 ) ; METHOD_17 ( VAR_75 ) ; VAR_76 = METHOD_18 ( VAR_77 ) ; VAR_78 = METHOD_19 ( VAR_79 ) ; VAR_80 = METHOD_20 ( VAR_81 ) ;  if ( VAR_82 != 1 || VAR_83 == 0 ) {  METHOD_21 ( VAR_84 , VAR_85 , "expectednonemptysignaledPESpacket," "tryingtorecover\\n" ) ; METHOD_22 ( VAR_86 , VAR_87 - 9 ) ; if ( ! VAR_88 ) return METHOD_23 ( VAR_89 ) ; goto VAR_90 ; } VAR_91 = METHOD_24 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 != VAR_96 ) return VAR_97 < 0 ? VAR_98 : VAR_99 ; VAR_100 -= 9 + VAR_101 ; VAR_102 -= 3 + VAR_103 ; VAR_104 -> VAR_105 = VAR_106 ; if ( VAR_107 & 0x80 && ( VAR_108 [ 0 ] & 0xf0 ) == 0x20 ) { if ( VAR_109 < 5 ) { METHOD_25 ( VAR_110 , VAR_111 , "headertooshort\\n" ) ; METHOD_26 ( VAR_112 , VAR_113 ) ; return VAR_114 ; } VAR_115 = METHOD_27 ( VAR_116 ) ; } } VAR_117 -> VAR_118 -= VAR_119 ; if ( VAR_120 -> VAR_121 < 0 ) { METHOD_28 ( VAR_122 , VAR_123 , "audiodatacorruption\\n" ) ; VAR_124 -> VAR_125 = 0 ; } } if ( VAR_126 != VAR_127 ) METHOD_29 ( VAR_128 -> VAR_129 [ VAR_130 - 1 ] , VAR_131 , VAR_132 , 0 , 0 , VAR_133 ) ; * VAR_134 = VAR_135 ; * VAR_136 = VAR_137 ; * VAR_138 = VAR_139 ; return 0 ; }
enum VAR_0 METHOD_0 ( const TYPE_0 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_1 * VAR_3 , TYPE_2 VAR_4 , TYPE_3 * VAR_5 ) { TYPE_4 TYPE_5 VAR_6 = VAR_7 ; TYPE_6 TYPE_7 * VAR_8 = VAR_9 ; TYPE_8 TYPE_9 * VAR_10 = VAR_11 ; const TYPE_10 * VAR_12 , * VAR_13 , * VAR_14 ; TYPE_11 VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 ; TYPE_14 VAR_18 ; METHOD_1 ( VAR_19 ) ; METHOD_2 ( VAR_20 ) ; VAR_21 = METHOD_3 ( VAR_22 , "vu-" ) ; if ( ! VAR_23 ) goto VAR_24 ; VAR_25 = METHOD_4 ( VAR_26 , '-' ) ;  if ( ! VAR_27 || VAR_28 == VAR_29 )  goto VAR_30 ; VAR_31 = METHOD_5 ( VAR_32 + 1 , & VAR_33 ) ; if ( VAR_34 < 0 ) goto VAR_35 ; VAR_36 = METHOD_6 ( VAR_37 , VAR_38 - VAR_39 ) ; if ( ! METHOD_7 ( VAR_40 ) ) goto VAR_41 ; VAR_42 = METHOD_8 ( & VAR_43 ) ; if ( VAR_44 < 0 ) goto VAR_45 ; VAR_46 = METHOD_9 ( VAR_47 , "org.freedesktop.machine1" , "/org/freedesktop/machine1" , "org.freedesktop.machine1.Manager" , "MapFromMachineUser" , & VAR_48 , & VAR_49 , "su" , VAR_50 , ( TYPE_15 ) VAR_51 ) ; if ( VAR_52 < 0 ) { if ( METHOD_10 ( & VAR_53 , VAR_54 ) ) goto VAR_55 ; goto VAR_56 ; } VAR_57 = METHOD_11 ( VAR_58 , "u" , & VAR_59 ) ; if ( VAR_60 < 0 ) goto VAR_61 ; VAR_62 = METHOD_12 ( VAR_63 ) ; if ( VAR_64 < VAR_65 + 1 ) { * VAR_66 = VAR_67 ; return VAR_68 ; } METHOD_13 ( VAR_69 , VAR_70 , VAR_71 + 1 ) ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 -> VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = 65534 ; VAR_80 -> VAR_81 = VAR_82 ; VAR_83 -> VAR_84 = ( TYPE_16 * ) "*" ; VAR_85 -> VAR_86 = ( TYPE_17 * ) "/" ; VAR_87 -> VAR_88 = ( TYPE_18 * ) "/sbin/nologin" ; * VAR_89 = 0 ; return VAR_90 ; VAR_91 : * VAR_92 = 0 ; return VAR_93 ; VAR_94 : * VAR_95 = - VAR_96 ; return VAR_97 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 )  {  METHOD_1 ( VAR_2 -> VAR_3 ) ;  }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 VAR_3 , const TYPE_4 * VAR_4 ) { const struct STRUCT_OR_UNION_1 * VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 ; TYPE_5 VAR_7 ; const TYPE_6 * VAR_8 ; const TYPE_7 * VAR_9 ; const struct STRUCT_OR_UNION_3 * VAR_10 ; TYPE_8 VAR_11 ; const TYPE_9 * VAR_12 ; VAR_13 = ( const struct STRUCT_OR_UNION_4 * ) VAR_14 ; METHOD_1 ( * VAR_15 ) ; METHOD_2 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ; METHOD_3 ( VAR_19 , METHOD_4 ( VAR_20 ) , VAR_21 . VAR_22 . VAR_23 ) ; VAR_24 = METHOD_5 ( VAR_25 . VAR_26 ) ; VAR_27 = VAR_28 ; VAR_29 = 0 ; switch ( VAR_30 . VAR_31 ) { case VAR_32 : VAR_33 = METHOD_6 ( VAR_34 , VAR_35 ) ; VAR_36 = VAR_37 ; VAR_38 = sizeof ( VAR_39 ) / sizeof ( VAR_40 [ 0 ] ) ; break ; case VAR_41 : VAR_42 = METHOD_7 ( VAR_43 , VAR_44 ) ; break ; case VAR_45 : VAR_46 = METHOD_8 ( VAR_47 , VAR_48 ) ; break ; case VAR_49 : VAR_50 = METHOD_9 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : VAR_54 = METHOD_10 ( VAR_55 , VAR_56 ) ; break ; default : VAR_57 = VAR_58 ; break ; } if ( VAR_59 ) METHOD_11 ( ( VAR_60 , "%utype=%sid=%s" , VAR_61 , METHOD_12 ( VAR_62 . VAR_63 , VAR_64 ) , VAR_65 ) ) ; else METHOD_13 ( ( VAR_66 , "%utype=%sid=%u" , VAR_67 , METHOD_14 ( VAR_68 . VAR_69 , VAR_70 ) , VAR_71 . VAR_72 ) ) ; VAR_73 = ( const TYPE_10 * ) ( VAR_74 + 1 ) ; VAR_75 = ( const TYPE_11 * ) VAR_76 + VAR_77 ; while ( VAR_78 < VAR_79 && VAR_80 < VAR_81 ) { if ( VAR_82 && VAR_83 ) {  VAR_84 = METHOD_15 ( VAR_85 , VAR_86 , ( VAR_87 < VAR_88 ) ? VAR_89 : VAR_90 ,  VAR_91 , VAR_92 ) ; } else VAR_93 = METHOD_16 ( VAR_94 , VAR_95 , ( VAR_96 < VAR_97 ) ? VAR_98 : VAR_99 ) ; } if ( VAR_100 < VAR_101 ) METHOD_17 ( ( VAR_102 , "..." ) ) ; return VAR_103 ; VAR_104 : METHOD_18 ( ( VAR_105 , "[|%s]" , METHOD_19 ( VAR_106 ) ) ) ; return VAR_107 ; }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; if ( VAR_4 & VAR_5 ) { TYPE_2 VAR_6 = METHOD_1 ( STRUCT_OR_UNION_3 , VAR_7 -> VAR_8 ) ; if ( VAR_9 ) return VAR_10 ; } if ( VAR_11 & VAR_12 ) return 0 ; if ( ( VAR_13 & VAR_14 ) && ( ! METHOD_2 ( METHOD_3 ( ) , STRUCT_OR_UNION_4 -> VAR_15 ) || ! METHOD_4 ( VAR_16 -> VAR_17 , STRUCT_OR_UNION_5 -> VAR_18 ) ) &&  ! METHOD_5 ( STRUCT_OR_UNION_6 , VAR_19 ) )  return - VAR_20 ; if ( ( VAR_21 & VAR_22 ) && ( ! METHOD_6 ( METHOD_7 ( ) , STRUCT_OR_UNION_7 -> VAR_23 ) || ( ! METHOD_8 ( VAR_24 -> VAR_25 ) && ! METHOD_9 ( VAR_26 -> VAR_27 , STRUCT_OR_UNION_8 -> VAR_28 ) ) ) &&  ! METHOD_10 ( STRUCT_OR_UNION_9 , VAR_29 ) )  return - VAR_30 ; if ( VAR_31 & VAR_32 ) { if ( ! METHOD_11 ( STRUCT_OR_UNION_10 ) ) return - VAR_33 ; if ( ! METHOD_12 ( ( VAR_34 & VAR_35 ) ? VAR_36 -> VAR_37 : STRUCT_OR_UNION_11 -> VAR_38 ) &&  ! METHOD_13 ( STRUCT_OR_UNION_12 , VAR_39 ) )  VAR_40 -> VAR_41 &= ~ VAR_42 ; } if ( VAR_43 & ( VAR_44 | VAR_45 | VAR_46 ) ) { if ( ! METHOD_14 ( STRUCT_OR_UNION_13 ) ) return - VAR_47 ; } return 0 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 != VAR_2 ) ; TYPE_2 VAR_3 ; METHOD_2 ( & VAR_4 ) ; METHOD_3 ( VAR_5 -> VAR_6 , & VAR_7 ) ; struct STRUCT_OR_UNION_0 TYPE_3 ; TYPE_4 . VAR_8 = 0 ; TYPE_5 . VAR_9 = 0 ;  METHOD_4 ( VAR_10 -> VAR_11 + 1 , & VAR_12 , VAR_13 , VAR_14 , & TYPE_6 ) ;  return METHOD_5 ( VAR_15 -> VAR_16 , & VAR_17 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  VAR_1 . VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ;  if ( 0 > METHOD_1 ( VAR_6 ) || 0 > METHOD_2 ( VAR_7 ) || 0 > METHOD_3 ( VAR_8 ) || 0 > METHOD_4 ( VAR_9 ) || 0 > METHOD_5 ( ) || 0 > METHOD_6 ( VAR_10 ) || 0 > METHOD_7 ( VAR_11 ) ) { METHOD_8 ( VAR_12 , "[pool%s]childfailedtoinitialize" , VAR_13 -> VAR_14 -> VAR_15 ) ; METHOD_9 ( VAR_16 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) {  TYPE_5 VAR_5 = 0 ;   if ( VAR_6 > VAR_7 &&  VAR_8 >= 0.999 && VAR_9 < 0.9 ) { TYPE_6 VAR_10 ;  const TYPE_7 * VAR_11 = VAR_12 -> VAR_13 ;  TYPE_8 VAR_14 ; for ( VAR_15 = 0 ; VAR_16 < VAR_17 ; ++ VAR_18 ) {  if ( VAR_19 == METHOD_1 ( VAR_20 , & VAR_21 ) )  break ;  if ( VAR_22 . VAR_23 - VAR_24 . VAR_25 < 0.999 )  break ; }  METHOD_2 ( VAR_26 , VAR_27 ) ;   if ( VAR_28 == VAR_29 )  VAR_30 = 1 ; }  return VAR_31 ;  }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; if ( ! METHOD_1 ( VAR_6 ) ) { METHOD_2 ( VAR_7 ) ; return 0 ; }  if ( ! VAR_8 -> VAR_9 ) {   VAR_10 = METHOD_3 ( VAR_11 ) ;   return VAR_12 -> VAR_13 ? VAR_14 -> VAR_15 : VAR_16 ;  }  VAR_17 = VAR_18 -> VAR_19 -> VAR_20 -> VAR_21 ;  VAR_22 = VAR_23 -> VAR_24 ; VAR_25 = METHOD_4 ( VAR_26 ) ; if ( ! VAR_27 ) VAR_28 = VAR_29 ; if ( VAR_30 ) METHOD_5 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; return VAR_35 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 = VAR_1 -> STRUCT_OR_UNION_2 ; TYPE_2 VAR_2 = VAR_3 -> VAR_4 ; TYPE_3 VAR_5 = VAR_6 -> VAR_7 ; TYPE_4 VAR_8 = 0 ; METHOD_1 ( "ext4_end_io_nolock:io0x%pfrominode%lu,list->next0x%p," "list->prev0x%p\\n" , VAR_9 , STRUCT_OR_UNION_3 -> VAR_10 , VAR_11 -> VAR_12 . VAR_13 , VAR_14 -> VAR_15 . VAR_16 ) ; if ( METHOD_2 ( & VAR_17 -> VAR_18 ) ) return VAR_19 ; if ( VAR_20 -> VAR_21 != VAR_22 ) return VAR_23 ;  if ( VAR_24 + VAR_25 <= METHOD_3 ( STRUCT_OR_UNION_4 ) )  VAR_26 = METHOD_4 ( STRUCT_OR_UNION_5 , VAR_27 , VAR_28 ) ; if ( VAR_29 < 0 ) { printk ( KERN_EMERG "%s:failedtoconvertunwritten" "extentstowrittenextents,erroris%d" "ioisstilloninode%luaiodiolist\\n" , VAR_30 , VAR_31 , STRUCT_OR_UNION_6 -> VAR_32 ) ; return VAR_33 ; } VAR_34 -> VAR_35 = 0 ; return VAR_36 ; }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; struct STRUCT_OR_UNION_6 * VAR_7 ; struct STRUCT_OR_UNION_7 * VAR_8 ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 ; METHOD_1 ( VAR_11 ) ; VAR_12 = VAR_13 -> VAR_14 ; METHOD_2 ( VAR_15 >= 0 && VAR_16 < VAR_17 ) ; METHOD_3 ( VAR_18 -> VAR_19 >= 0 && VAR_20 -> VAR_21 <= VAR_22 -> VAR_23 ) ; VAR_24 = & METHOD_4 ( VAR_25 ) [ VAR_26 -> VAR_27 ] ; if ( VAR_28 -> VAR_29 < VAR_30 -> VAR_31 ) { VAR_32 = VAR_33 -> VAR_34 - VAR_35 -> VAR_36 ; VAR_37 *= sizeof ( VAR_38 ) ; METHOD_5 ( VAR_39 + 1 , VAR_40 , VAR_41 ) ; METHOD_6 ( VAR_42 -> VAR_43 , VAR_44 , METHOD_7 ( VAR_45 , VAR_46 , VAR_47 + sizeof ( * VAR_48 ) ) ) ; } VAR_49 -> VAR_50 ++ ; VAR_51 = VAR_52 -> VAR_53 -> VAR_54 ; METHOD_8 ( VAR_55 -> VAR_56 [ VAR_57 ] . VAR_58 < METHOD_9 ( VAR_59 ) ) ; METHOD_10 ( ( VAR_60 -> VAR_61 [ VAR_62 ] . VAR_63 & 0x3 ) == 0 ) ; METHOD_11 ( VAR_64 -> VAR_65 [ VAR_66 ] . VAR_67 >= METHOD_12 ( VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 -> VAR_73 . VAR_74 , VAR_75 ) ) ; METHOD_13 ( VAR_76 -> VAR_77 [ VAR_78 ] . VAR_79 < METHOD_14 ( VAR_80 ) ) ; METHOD_15 ( ( VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 & 0x3 ) == 0 ) ; VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 -= METHOD_16 ( VAR_89 -> VAR_90 , VAR_91 -> VAR_92 , VAR_93 -> VAR_94 . VAR_95 , & VAR_96 ) ; VAR_97 -> VAR_98 = METHOD_17 ( VAR_99 -> VAR_100 [ VAR_101 ] . VAR_102 + VAR_103 -> VAR_104 [ VAR_105 ] . VAR_106 ) ; VAR_107 -> VAR_108 = METHOD_18 ( VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ? VAR_114 : 0 ; VAR_115 -> VAR_116 |= METHOD_19 ( VAR_117 -> VAR_118 ) ; if ( VAR_119 -> VAR_120 & VAR_121 ) { VAR_122 -> VAR_123 |= VAR_124 ; if ( ( VAR_125 -> VAR_126 == VAR_127 -> VAR_128 ) && ( VAR_129 -> VAR_130 <= VAR_131 -> VAR_132 ) ) { VAR_133 -> VAR_134 ++ ; } } METHOD_20 ( VAR_135 -> VAR_136 , VAR_137 , METHOD_21 ( VAR_138 , VAR_139 , sizeof ( * VAR_140 ) ) ) ; METHOD_22 ( ( VAR_141 -> VAR_142 == 0 ) || ( METHOD_23 ( VAR_143 -> VAR_144 ) >= METHOD_24 ( ( VAR_145 - 1 ) -> VAR_146 ) ) ) ; METHOD_25 ( ( VAR_147 -> VAR_148 == VAR_149 -> VAR_150 - 1 ) || ( METHOD_26 ( VAR_151 -> VAR_152 ) <= METHOD_27 ( ( VAR_153 + 1 ) -> VAR_154 ) ) ) ; if ( VAR_155 -> VAR_156 & VAR_157 ) { VAR_158 = METHOD_28 ( VAR_159 , VAR_160 -> VAR_161 ) ; VAR_162 -> VAR_163 = VAR_164 -> VAR_165 ; VAR_166 -> VAR_167 = METHOD_29 ( VAR_168 -> VAR_169 ) ; METHOD_30 ( ( TYPE_5 * ) VAR_170 -> VAR_171 , VAR_172 -> VAR_173 , VAR_174 -> VAR_175 ) ; METHOD_31 ( ( TYPE_6 * ) & VAR_176 -> VAR_177 [ VAR_178 -> VAR_179 ] , VAR_180 -> VAR_181 , METHOD_32 ( VAR_182 -> VAR_183 ) ) ; } else { VAR_184 = METHOD_33 ( VAR_185 , VAR_186 -> VAR_187 ) ; VAR_188 -> VAR_189 = VAR_190 -> VAR_191 ; METHOD_34 ( ( TYPE_7 * ) VAR_192 -> VAR_193 , VAR_194 -> VAR_195 , VAR_196 -> VAR_197 ) ; VAR_198 -> VAR_199 |= VAR_200 ; VAR_201 -> VAR_202 = 0 ; VAR_203 -> VAR_204 = 0 ; VAR_205 -> VAR_206 = 1 ; VAR_207 -> VAR_208 = METHOD_35 ( VAR_209 , VAR_210 -> VAR_211 ) ;  }  METHOD_36 ( VAR_212 -> VAR_213 , VAR_214 , METHOD_37 ( VAR_215 , METHOD_38 ( VAR_216 , VAR_217 -> VAR_218 ) , METHOD_39 ( VAR_219 , VAR_220 -> VAR_221 ) ) ) ; if ( METHOD_40 ( VAR_222 -> VAR_223 ) < VAR_224 -> VAR_225 ) VAR_226 -> VAR_227 = METHOD_41 ( VAR_228 -> VAR_229 ) ; METHOD_42 ( VAR_230 -> VAR_231 >= VAR_232 -> VAR_233 * sizeof ( VAR_234 ) + METHOD_43 ( VAR_235 ) ) ; VAR_236 = ( VAR_237 -> VAR_238 - 1 ) * sizeof ( VAR_239 ) + METHOD_44 ( VAR_240 ) ; for ( VAR_241 = 0 ; VAR_242 < VAR_243 ; VAR_244 ++ ) { if ( VAR_245 -> VAR_246 [ VAR_247 ] . VAR_248 == VAR_249 ) { VAR_250 -> VAR_251 [ VAR_252 ] . VAR_253 += sizeof ( VAR_254 ) ; VAR_255 -> VAR_256 [ VAR_257 ] . VAR_258 -= sizeof ( VAR_259 ) ; } } VAR_260 -> VAR_261 += METHOD_45 ( VAR_262 , VAR_263 -> VAR_264 ) ; return 0 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( const TYPE_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 ; if ( ! VAR_4 ) return METHOD_1 ( - VAR_5 ) ; VAR_6 &= ~ ( VAR_7 | VAR_8 ) ; VAR_9 &= VAR_10 ; VAR_11 = METHOD_2 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( ! VAR_15 ) {  METHOD_3 ( "%s" , VAR_16 ) ;  if ( ! ( ( VAR_17 ^ VAR_18 ) & VAR_19 & VAR_20 ) )  METHOD_4 ( "%s-all" , VAR_21 ) ;  VAR_22 = METHOD_5 ( VAR_23 , VAR_24 , VAR_25 ) ; } if ( VAR_26 ) return METHOD_6 ( VAR_27 ) ? METHOD_7 ( VAR_28 ) : VAR_29 ; return METHOD_8 ( VAR_30 , VAR_31 , VAR_32 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * TYPE_3 , TYPE_4 VAR_1 ) { TYPE_5 VAR_2 , VAR_3 , VAR_4 ; while ( VAR_5 > 2 ) {  VAR_6 = * ( TYPE_6 ++ ) ;  VAR_7 = * ( TYPE_7 ++ ) ; METHOD_1 ( ( VAR_8 , "\\n\\t%ssubTLV%u,length:%u" , METHOD_2 ( VAR_9 , "unknown" , VAR_10 ) , VAR_11 , VAR_12 ) ) ;  VAR_13 = VAR_14 - 2 ;  switch ( VAR_15 ) { case VAR_16 :  METHOD_3 ( * TYPE_8 , VAR_17 ) ;  METHOD_4 ( ( VAR_18 , "\\n\\tCISTRoot-ID:%08x" , TYPE_9 ( TYPE_10 ) ) ) ; TYPE_11 = TYPE_12 + 4 ; METHOD_5 ( ( VAR_19 , "%08x" , TYPE_13 ( TYPE_14 ) ) ) ; TYPE_15 = TYPE_16 + 4 ; METHOD_6 ( ( VAR_20 , ",PathCost:%08x" , TYPE_17 ( TYPE_18 ) ) ) ; TYPE_19 = TYPE_20 + 4 ; METHOD_7 ( ( VAR_21 , ",Prio:%d" , TYPE_21 ( TYPE_22 ) ) ) ; TYPE_23 = TYPE_24 + 2 ; METHOD_8 ( ( VAR_22 , "\\n\\tRES:%d" , TYPE_25 ( TYPE_26 ) >> 5 ) ) ; METHOD_9 ( ( VAR_23 , ",V:%d" , ( TYPE_27 ( TYPE_28 ) >> 4 ) & 0x0001 ) ) ; METHOD_10 ( ( VAR_24 , ",SPSource-ID:%d" , ( TYPE_29 ( TYPE_30 ) & 0x000fffff ) ) ) ; TYPE_31 = TYPE_32 + 4 ; METHOD_11 ( ( VAR_25 , ",NoofTrees:%x" , * ( TYPE_33 ) ) ) ; VAR_26 = * ( TYPE_34 ++ ) ; VAR_27 = VAR_28 - VAR_29 ;  while ( VAR_30 )  {  METHOD_12 ( * TYPE_35 , VAR_31 ) ;  METHOD_13 ( ( VAR_32 , "\\n\\tU:%d,M:%d,A:%d,RES:%d" , * ( TYPE_36 ) >> 7 , ( * ( TYPE_37 ) >> 6 ) & 0x01 , ( * ( TYPE_38 ) >> 5 ) & 0x01 , ( * ( TYPE_39 ) & 0x1f ) ) ) ; TYPE_40 ++ ; METHOD_14 ( ( VAR_33 , ",ECT:%08x" , TYPE_41 ( TYPE_42 ) ) ) ; TYPE_43 = TYPE_44 + 4 ; METHOD_15 ( ( VAR_34 , ",BVID:%d,SPVID:%d" , ( METHOD_16 ( TYPE_45 ) >> 12 ) & 0x000fff , METHOD_17 ( TYPE_46 ) & 0x000fff ) ) ; TYPE_47 = TYPE_48 + 3 ;  VAR_35 = VAR_36 - VAR_37 ;  VAR_38 -- ; } break ; case VAR_39 :  METHOD_18 ( * TYPE_49 , 8 ) ;  METHOD_19 ( ( VAR_40 , "\\n\\tBMAC:%08x" , TYPE_50 ( TYPE_51 ) ) ) ; TYPE_52 = TYPE_53 + 4 ; METHOD_20 ( ( VAR_41 , "%04x" , TYPE_54 ( TYPE_55 ) ) ) ; TYPE_56 = TYPE_57 + 2 ; METHOD_21 ( ( VAR_42 , ",RES:%d,VID:%d" , TYPE_58 ( TYPE_59 ) >> 12 , ( TYPE_60 ( TYPE_61 ) ) & 0x0fff ) ) ; TYPE_62 = TYPE_63 + 2 ; VAR_43 = VAR_44 - 8 ; VAR_45 = VAR_46 - 8 ; while ( VAR_47 >= 4 ) { METHOD_22 ( * TYPE_64 , 4 ) ; METHOD_23 ( ( VAR_48 , "\\n\\tT:%d,R:%d,RES:%d,ISID:%d" , ( TYPE_65 ( TYPE_66 ) >> 31 ) , ( TYPE_67 ( TYPE_68 ) >> 30 ) & 0x01 , ( TYPE_69 ( TYPE_70 ) >> 24 ) & 0x03f , ( TYPE_71 ( TYPE_72 ) ) & 0x0ffffff ) ) ; TYPE_73 = TYPE_74 + 4 ; VAR_49 = VAR_50 - 4 ; VAR_51 = VAR_52 - 4 ; } break ; default : break ; }  }  return 0 ; VAR_53 : METHOD_24 ( ( VAR_54 , "\\n\\t\\t" ) ) ; METHOD_25 ( ( VAR_55 , "%s" , VAR_56 ) ) ; return ( 1 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 ) { unsigned TYPE_3 VAR_2 ; TYPE_4 TYPE_5 * VAR_3 = ( TYPE_6 TYPE_7 * ) VAR_4 ; switch ( VAR_5 ) { case VAR_6 : { struct STRUCT_OR_UNION_2 VAR_7 ; METHOD_1 ( & VAR_8 , VAR_9 ) ;  VAR_10 . VAR_11 = VAR_12 ;  METHOD_2 ( VAR_13 . VAR_14 , "%s" , VAR_15 ) ; METHOD_3 ( & VAR_16 , VAR_17 ) ; if ( METHOD_4 ( VAR_18 , & VAR_19 , sizeof ( VAR_20 ) ) ) return - VAR_21 ; break ; } case VAR_22 : { TYPE_8 VAR_23 ; struct STRUCT_OR_UNION_3 VAR_24 ; if ( METHOD_5 ( & VAR_25 , VAR_26 , sizeof ( TYPE_9 ) ) ) return - VAR_27 ; if ( VAR_28 < 0 || VAR_29 >= VAR_30 ) return - VAR_31 ; METHOD_6 ( & VAR_32 , 0 , sizeof ( VAR_33 ) ) ; VAR_34 . VAR_35 = VAR_36 ; METHOD_7 ( & VAR_37 [ VAR_38 ] -> VAR_39 , VAR_40 ) ; VAR_41 . VAR_42 = VAR_43 [ VAR_44 ] -> VAR_45 ; VAR_46 . VAR_47 = VAR_48 [ VAR_49 ] -> VAR_50 ; VAR_51 . VAR_52 = 0 ; VAR_53 . VAR_54 = ( TYPE_10 ) VAR_55 [ VAR_56 ] -> VAR_57 ; VAR_58 . VAR_59 = ( TYPE_11 ) VAR_60 [ VAR_61 ] -> VAR_62 - VAR_63 [ VAR_64 ] -> VAR_65 ; if ( VAR_66 [ VAR_67 ] -> VAR_68 != VAR_69 ) VAR_70 . VAR_71 = VAR_72 [ VAR_73 ] -> VAR_74 ; else VAR_75 . VAR_76 = 0 ; METHOD_8 ( & VAR_77 [ VAR_78 ] -> VAR_79 , VAR_80 ) ; if ( METHOD_9 ( VAR_81 , & VAR_82 , sizeof ( VAR_83 ) ) ) return - VAR_84 ; break ; } case VAR_85 : { struct STRUCT_OR_UNION_4 * VAR_86 ; struct STRUCT_OR_UNION_5 VAR_87 ; unsigned TYPE_12 VAR_88 = 0 ; TYPE_13 VAR_89 = 0 ; TYPE_14 VAR_90 = 0 ; if ( METHOD_10 ( & VAR_91 , VAR_92 , sizeof ( VAR_93 ) ) ) return - VAR_94 ; VAR_95 = VAR_96 . VAR_97 ; VAR_98 = VAR_99 . VAR_100 ; if ( VAR_101 >= VAR_102 ) return - VAR_103 ; if ( VAR_104 >= VAR_105 [ VAR_106 ] -> VAR_107 ) return - VAR_108 ; VAR_109 = VAR_110 [ VAR_111 ] -> VAR_112 [ VAR_113 ] ; if ( ! VAR_114 || VAR_115 -> VAR_116 != VAR_117 ) return - VAR_118 ; METHOD_11 ( & VAR_119 , 0 , sizeof ( VAR_120 ) ) ; VAR_121 . VAR_122 = VAR_123 ; VAR_124 . VAR_125 = VAR_126 ; METHOD_12 ( & VAR_127 -> VAR_128 , VAR_129 ) ; VAR_130 = ( VAR_131 -> VAR_132 | VAR_133 -> VAR_134 ) ; if ( VAR_135 & VAR_136 ) { VAR_137 . VAR_138 |= VAR_139 ; VAR_140 . VAR_141 = VAR_142 ; } if ( VAR_143 & VAR_144 ) { VAR_145 . VAR_146 |= VAR_147 ; VAR_148 . VAR_149 = VAR_150 ; } if ( VAR_151 & VAR_152 ) { VAR_153 . VAR_154 |= VAR_155 ; VAR_156 . VAR_157 = VAR_158 ; } if ( VAR_159 & VAR_160 ) { VAR_161 . VAR_162 |= VAR_163 ; VAR_164 . VAR_165 = VAR_166 ; } if ( VAR_167 & VAR_168 ) { VAR_169 . VAR_170 |= VAR_171 ; VAR_172 . VAR_173 = VAR_174 ; } if ( VAR_175 & VAR_176 ) VAR_177 . VAR_178 |= VAR_179 ; VAR_180 . VAR_181 = VAR_182 -> VAR_183 ; VAR_184 . VAR_185 = VAR_186 -> VAR_187 ; VAR_188 . VAR_189 = VAR_190 -> VAR_191 ; VAR_192 . VAR_193 = VAR_194 -> VAR_195 ; if ( VAR_196 -> VAR_197 . VAR_198 & VAR_199 || VAR_200 -> VAR_201 & VAR_202 ) VAR_203 . VAR_204 = 1 ; else VAR_205 . VAR_206 = 0 ; if ( ( VAR_207 -> VAR_208 & VAR_209 ) || ( VAR_210 -> VAR_211 & VAR_212 ) ) VAR_213 . VAR_214 = 1 ; else VAR_215 . VAR_216 = 0 ; if ( ( VAR_217 -> VAR_218 & VAR_219 ) || ( VAR_220 -> VAR_221 & VAR_222 ) ) VAR_223 . VAR_224 = 1 ; else VAR_225 . VAR_226 = 0 ; VAR_227 . VAR_228 = VAR_229 -> VAR_230 ; VAR_231 . VAR_232 = VAR_233 -> VAR_234 ; VAR_235 . VAR_236 = VAR_237 -> VAR_238 ; METHOD_13 ( & VAR_239 -> VAR_240 , VAR_241 ) ; if ( METHOD_14 ( VAR_242 , & VAR_243 , sizeof ( VAR_244 ) ) ) return - VAR_245 ; break ; } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { const struct STRUCT_OR_UNION_0 * VAR_4 = ( const struct STRUCT_OR_UNION_1 * ) VAR_5 ;  if ( ! ( VAR_6 == 12 && VAR_7 & VAR_8 ) &&  ! ( VAR_9 == 20 && ( VAR_10 & ( VAR_11 | VAR_12 ) ) == VAR_13 ) ) return 0 ; if ( METHOD_1 ( VAR_14 -> VAR_15 ) != 0 ) { METHOD_2 ( ( VAR_16 , "UnknownVersion(%d)" , METHOD_3 ( VAR_17 -> VAR_18 ) ) ) ; return 1 ; } if ( VAR_19 -> VAR_20 & VAR_21 ) METHOD_4 ( ( VAR_22 , "csum" ) ) ; METHOD_5 ( ( VAR_23 , "{0x%" VAR_24 , METHOD_6 ( VAR_25 -> VAR_26 ) ) ) ; if ( VAR_27 == 20 ) METHOD_7 ( ( VAR_28 , ",0x%" VAR_29 , METHOD_8 ( VAR_30 -> VAR_31 ) ) ) ; METHOD_9 ( ( VAR_32 , "}" ) ) ; return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 = ( struct STRUCT_OR_UNION_1 * ) VAR_2 ; TYPE_2 VAR_3 = VAR_4 -> VAR_5 ;  TYPE_3 VAR_6 = VAR_7 -> VAR_8 ;  TYPE_4 * VAR_9 = VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_2 * VAR_12 = VAR_13 -> VAR_14 ; if VAR_15 TYPE_5 VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; TYPE_9 VAR_20 ; TYPE_10 VAR_21 ;  TYPE_11 VAR_22 ;  TYPE_12 VAR_23 ; VAR_24 = 0 ; VAR_25 = - 1 ; VAR_26 = METHOD_1 ( VAR_27 , & VAR_28 , sizeof ( VAR_29 ) , & VAR_30 ) ; if ( VAR_31 <= 0 ) {  METHOD_2 ( "errorusingIPCtoreceivenotificationfrominitialprocess(0)" ) ;  METHOD_3 ( VAR_32 , VAR_33 ) ; METHOD_4 ( - 1 ) ; } if ( ! ( VAR_34 -> VAR_35 & VAR_36 ) && ( VAR_37 -> VAR_38 & VAR_39 ) ) { VAR_40 = METHOD_5 ( ) ; if ( VAR_41 < 0 ) { METHOD_6 ( VAR_42 , VAR_43 ) ; METHOD_7 ( - 1 ) ; } } if VAR_44 if ( VAR_45 -> METHOD_8 < 0 ) VAR_46 = VAR_47 -> METHOD_9 ; else VAR_48 = VAR_49 -> METHOD_10 ; if ( VAR_50 -> VAR_51 & VAR_52 ) { VAR_53 = METHOD_11 ( VAR_54 ) ; if ( VAR_55 < 0 ) { METHOD_12 ( "couldnotensurecorrectarchitecture" ) ; METHOD_13 ( VAR_56 , VAR_57 ) ; METHOD_14 ( - 1 ) ; } } if ( VAR_58 -> VAR_59 & VAR_60 ) { VAR_61 = METHOD_15 ( VAR_62 ) ; if ( VAR_63 < 0 ) { METHOD_16 ( "couldnotdropprivileges" ) ; METHOD_17 ( VAR_64 , VAR_65 ) ; METHOD_18 ( - 1 ) ; } } VAR_66 = METHOD_19 ( VAR_67 -> VAR_68 , VAR_69 -> VAR_70 , VAR_71 -> VAR_72 ) ; if ( VAR_73 < 0 ) { METHOD_20 ( "couldnotsetinitialenvironmentforattachedprocess" ) ; METHOD_21 ( VAR_74 , VAR_75 ) ; METHOD_22 ( - 1 ) ; } VAR_76 = 0 ; VAR_77 = 0 ; if ( VAR_78 -> VAR_79 & VAR_80 ) METHOD_23 ( & VAR_81 , & VAR_82 ) ; if ( VAR_83 -> VAR_84 != ( TYPE_13 ) - 1 ) VAR_85 = VAR_86 -> VAR_87 ; if ( VAR_88 -> VAR_89 != ( TYPE_14 ) - 1 ) VAR_90 = VAR_91 -> VAR_92 ; if ( VAR_93 -> VAR_94 && METHOD_24 ( VAR_95 -> VAR_96 ) ) { if ( METHOD_25 ( ) < 0 ) { METHOD_26 ( "unabletosetsid" ) ; METHOD_27 ( VAR_97 , VAR_98 ) ; METHOD_28 ( - 1 ) ; } if ( METHOD_29 ( VAR_99 -> VAR_100 , VAR_101 , ( TYPE_15 * ) VAR_102 ) < 0 ) { METHOD_30 ( "unabletoTIOCSTTY" ) ; METHOD_31 ( VAR_103 , VAR_104 ) ; METHOD_32 ( - 1 ) ; } } if ( ( VAR_105 != 0 || VAR_106 -> VAR_107 & VAR_108 ) ) { if ( METHOD_33 ( VAR_109 ) || METHOD_34 ( 0 , VAR_110 ) ) { METHOD_35 ( "switchingtocontainergid" ) ; METHOD_36 ( VAR_111 , VAR_112 ) ; METHOD_37 ( - 1 ) ; } } if ( ( VAR_113 != 0 || VAR_114 -> VAR_115 & VAR_116 ) && METHOD_38 ( VAR_117 ) ) { METHOD_39 ( "switchingtocontaineruid" ) ; METHOD_40 ( VAR_118 , VAR_119 ) ; METHOD_41 ( - 1 ) ; } VAR_120 = 1 ; VAR_121 = METHOD_42 ( VAR_122 , & VAR_123 , sizeof ( VAR_124 ) ) ; if ( VAR_125 != sizeof ( VAR_126 ) ) {  METHOD_43 ( "errorusingIPCtonotifyinitialprocessforinitialization(1)" ) ;  METHOD_44 ( VAR_127 , VAR_128 ) ; METHOD_45 ( - 1 ) ; } VAR_129 = 2 ; VAR_130 = - 1 ; VAR_131 = METHOD_46 ( VAR_132 , & VAR_133 , sizeof ( VAR_134 ) , & VAR_135 ) ; if ( VAR_136 <= 0 ) {  METHOD_47 ( "errorusingIPCtoreceivefinalnotificationfrominitialprocess(2)" ) ;  METHOD_48 ( VAR_137 , VAR_138 ) ; METHOD_49 ( - 1 ) ; } METHOD_50 ( VAR_139 , VAR_140 ) ; METHOD_51 ( VAR_141 ) ; if ( ( VAR_142 -> VAR_143 && VAR_144 -> VAR_145 -> VAR_146 && VAR_147 -> VAR_148 -> VAR_149 -> VAR_150 ) || ( VAR_151 -> VAR_152 & VAR_153 ) ) { if ( METHOD_52 ( VAR_154 , 1 , 0 , 0 , 0 ) < 0 ) { METHOD_53 ( "PR_SET_NO_NEW_PRIVScouldnotbeset." "Processcanuseexecve()gainable" "privileges." ) ;  METHOD_54 ( - 1 ) ;  } METHOD_55 ( "PR_SET_NO_NEW_PRIVSisset.Processcannotuseexecve()"  "gainableprivileges." ) ;  } if ( ( VAR_155 -> VAR_156 & VAR_157 ) && ( VAR_158 -> VAR_159 & VAR_160 ) && VAR_161 -> VAR_162 ) { TYPE_16 VAR_163 ;  VAR_164 = VAR_165 -> VAR_166 & VAR_167 ? 1 : 0 ;   if ( METHOD_56 ( VAR_168 , VAR_169 , VAR_170 -> VAR_171 ) < 0 ) {   METHOD_57 ( - 1 ) ;  } } if ( VAR_172 -> VAR_173 && VAR_174 -> VAR_175 -> VAR_176 && VAR_177 -> VAR_178 -> VAR_179 -> VAR_180 && ( METHOD_58 ( VAR_181 -> VAR_182 -> VAR_183 ) != 0 ) ) { METHOD_59 ( "Loadingseccomppolicy" ) ;  METHOD_60 ( - 1 ) ;  } METHOD_61 ( VAR_184 ) ; if ( VAR_185 -> VAR_186 >= 0 && VAR_187 -> VAR_188 != 0 ) METHOD_62 ( VAR_189 -> VAR_190 , 0 ) ; if ( VAR_191 -> VAR_192 >= 0 && VAR_193 -> VAR_194 != 1 ) METHOD_63 ( VAR_195 -> VAR_196 , 1 ) ; if ( VAR_197 -> VAR_198 >= 0 && VAR_199 -> VAR_200 != 2 ) METHOD_64 ( VAR_201 -> VAR_202 , 2 ) ; if ( VAR_203 -> VAR_204 > 2 ) METHOD_65 ( VAR_205 -> VAR_206 ) ; if ( VAR_207 -> VAR_208 > 2 ) METHOD_66 ( VAR_209 -> VAR_210 ) ; if ( VAR_211 -> VAR_212 > 2 ) METHOD_67 ( VAR_213 -> VAR_214 ) ; for ( VAR_215 = 0 ; VAR_216 <= 2 ; VAR_217 ++ ) { VAR_218 = METHOD_68 ( VAR_219 , VAR_220 ) ; if ( VAR_221 < 0 ) continue ; if ( VAR_222 & VAR_223 ) if ( METHOD_69 ( VAR_224 , VAR_225 , VAR_226 & ~ VAR_227 ) < 0 ) METHOD_70 ( "UnabletoclearCLOEXECfromfd" ) ; }  METHOD_71 ( VAR_228 ) ;  METHOD_72 ( VAR_229 -> METHOD_73 ( VAR_230 -> VAR_231 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; const TYPE_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 = METHOD_1 ( sizeof ( * VAR_8 ) ) ; METHOD_2 ( VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ;  VAR_16 += 3 ;   if ( ! ( VAR_17 = METHOD_3 ( VAR_18 , '' ) ) )  goto VAR_19 ; VAR_20 = VAR_21 - VAR_22 ; METHOD_4 ( & VAR_23 , VAR_24 , 1 ) ; VAR_25 -> VAR_26 = METHOD_5 ( VAR_27 ) ; METHOD_6 ( VAR_28 -> VAR_29 ) ; METHOD_7 ( VAR_30 -> VAR_31 , VAR_32 , VAR_33 ) ; VAR_34 -> VAR_35 [ VAR_36 ] = '\\0' ;  VAR_37 = VAR_38 + 1 ;   if ( ! ( VAR_39 = METHOD_8 ( VAR_40 , '\\n' ) ) )  goto VAR_41 ; VAR_42 = VAR_43 - VAR_44 ; METHOD_9 ( & VAR_45 , VAR_46 , 1 ) ; VAR_47 -> VAR_48 = METHOD_10 ( VAR_49 ) ; METHOD_11 ( VAR_50 -> VAR_51 ) ; METHOD_12 ( VAR_52 -> VAR_53 , VAR_54 , VAR_55 ) ; VAR_56 -> VAR_57 [ VAR_58 ] = '\\0' ; * VAR_59 = ( TYPE_6 * ) VAR_60 ; return 0 ; VAR_61 : METHOD_13 ( VAR_62 , "invalidpacketline" ) ; METHOD_14 ( VAR_63 -> VAR_64 ) ; METHOD_15 ( VAR_65 ) ; return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { METHOD_1 ( VAR_2 , 0 , sizeof ( * VAR_3 ) ) ; VAR_4 -> VAR_5 = ( TYPE_3 ) METHOD_2 ( VAR_6 ) ; VAR_7 -> VAR_8 |= ( TYPE_4 ) METHOD_3 ( VAR_9 ) << 8 ; VAR_10 -> VAR_11 |= ( TYPE_5 ) METHOD_4 ( VAR_12 ) << 16 ; VAR_13 -> VAR_14 |= ( TYPE_6 ) METHOD_5 ( VAR_15 ) << 24 ; switch ( VAR_16 -> VAR_17 ) { case 12U : case 40U : case 52U : case 56U : case 108U : case 124U : break ; default : METHOD_6 ( VAR_18 , "Error,unknownBMPheadersize%d\\n" , VAR_19 -> VAR_20 ) ; return VAR_21 ; } VAR_22 -> VAR_23 = ( TYPE_7 ) METHOD_7 ( VAR_24 ) ; VAR_25 -> VAR_26 |= ( TYPE_8 ) METHOD_8 ( VAR_27 ) << 8 ; VAR_28 -> VAR_29 |= ( TYPE_9 ) METHOD_9 ( VAR_30 ) << 16 ; VAR_31 -> VAR_32 |= ( TYPE_10 ) METHOD_10 ( VAR_33 ) << 24 ; VAR_34 -> VAR_35 = ( TYPE_11 ) METHOD_11 ( VAR_36 ) ; VAR_37 -> VAR_38 |= ( TYPE_12 ) METHOD_12 ( VAR_39 ) << 8 ; VAR_40 -> VAR_41 |= ( TYPE_13 ) METHOD_13 ( VAR_42 ) << 16 ; VAR_43 -> VAR_44 |= ( TYPE_14 ) METHOD_14 ( VAR_45 ) << 24 ; VAR_46 -> VAR_47 = ( TYPE_15 ) METHOD_15 ( VAR_48 ) ; VAR_49 -> VAR_50 |= ( TYPE_16 ) ( ( TYPE_17 ) METHOD_16 ( VAR_51 ) << 8 ) ; VAR_52 -> VAR_53 = ( TYPE_18 ) METHOD_17 ( VAR_54 ) ; VAR_55 -> VAR_56 |= ( TYPE_19 ) ( ( TYPE_20 ) METHOD_18 ( VAR_57 ) << 8 ) ;  if ( VAR_58 -> VAR_59 >= 40U ) {  VAR_60 -> VAR_61 = ( TYPE_21 ) METHOD_19 ( VAR_62 ) ; VAR_63 -> VAR_64 |= ( TYPE_22 ) METHOD_20 ( VAR_65 ) << 8 ; VAR_66 -> VAR_67 |= ( TYPE_23 ) METHOD_21 ( VAR_68 ) << 16 ; VAR_69 -> VAR_70 |= ( TYPE_24 ) METHOD_22 ( VAR_71 ) << 24 ; VAR_72 -> VAR_73 = ( TYPE_25 ) METHOD_23 ( VAR_74 ) ; VAR_75 -> VAR_76 |= ( TYPE_26 ) METHOD_24 ( VAR_77 ) << 8 ; VAR_78 -> VAR_79 |= ( TYPE_27 ) METHOD_25 ( VAR_80 ) << 16 ; VAR_81 -> VAR_82 |= ( TYPE_28 ) METHOD_26 ( VAR_83 ) << 24 ; VAR_84 -> VAR_85 = ( TYPE_29 ) METHOD_27 ( VAR_86 ) ; VAR_87 -> VAR_88 |= ( TYPE_30 ) METHOD_28 ( VAR_89 ) << 8 ; VAR_90 -> VAR_91 |= ( TYPE_31 ) METHOD_29 ( VAR_92 ) << 16 ; VAR_93 -> VAR_94 |= ( TYPE_32 ) METHOD_30 ( VAR_95 ) << 24 ; VAR_96 -> VAR_97 = ( TYPE_33 ) METHOD_31 ( VAR_98 ) ; VAR_99 -> VAR_100 |= ( TYPE_34 ) METHOD_32 ( VAR_101 ) << 8 ; VAR_102 -> VAR_103 |= ( TYPE_35 ) METHOD_33 ( VAR_104 ) << 16 ; VAR_105 -> VAR_106 |= ( TYPE_36 ) METHOD_34 ( VAR_107 ) << 24 ; VAR_108 -> VAR_109 = ( TYPE_37 ) METHOD_35 ( VAR_110 ) ; VAR_111 -> VAR_112 |= ( TYPE_38 ) METHOD_36 ( VAR_113 ) << 8 ; VAR_114 -> VAR_115 |= ( TYPE_39 ) METHOD_37 ( VAR_116 ) << 16 ; VAR_117 -> VAR_118 |= ( TYPE_40 ) METHOD_38 ( VAR_119 ) << 24 ; VAR_120 -> VAR_121 = ( TYPE_41 ) METHOD_39 ( VAR_122 ) ; VAR_123 -> VAR_124 |= ( TYPE_42 ) METHOD_40 ( VAR_125 ) << 8 ; VAR_126 -> VAR_127 |= ( TYPE_43 ) METHOD_41 ( VAR_128 ) << 16 ; VAR_129 -> VAR_130 |= ( TYPE_44 ) METHOD_42 ( VAR_131 ) << 24 ; } if ( VAR_132 -> VAR_133 >= 56U ) { VAR_134 -> VAR_135 = ( TYPE_45 ) METHOD_43 ( VAR_136 ) ; VAR_137 -> VAR_138 |= ( TYPE_46 ) METHOD_44 ( VAR_139 ) << 8 ; VAR_140 -> VAR_141 |= ( TYPE_47 ) METHOD_45 ( VAR_142 ) << 16 ; VAR_143 -> VAR_144 |= ( TYPE_48 ) METHOD_46 ( VAR_145 ) << 24 ; VAR_146 -> VAR_147 = ( TYPE_49 ) METHOD_47 ( VAR_148 ) ; VAR_149 -> VAR_150 |= ( TYPE_50 ) METHOD_48 ( VAR_151 ) << 8 ; VAR_152 -> VAR_153 |= ( TYPE_51 ) METHOD_49 ( VAR_154 ) << 16 ; VAR_155 -> VAR_156 |= ( TYPE_52 ) METHOD_50 ( VAR_157 ) << 24 ; VAR_158 -> VAR_159 = ( TYPE_53 ) METHOD_51 ( VAR_160 ) ; VAR_161 -> VAR_162 |= ( TYPE_54 ) METHOD_52 ( VAR_163 ) << 8 ; VAR_164 -> VAR_165 |= ( TYPE_55 ) METHOD_53 ( VAR_166 ) << 16 ; VAR_167 -> VAR_168 |= ( TYPE_56 ) METHOD_54 ( VAR_169 ) << 24 ; VAR_170 -> VAR_171 = ( TYPE_57 ) METHOD_55 ( VAR_172 ) ; VAR_173 -> VAR_174 |= ( TYPE_58 ) METHOD_56 ( VAR_175 ) << 8 ; VAR_176 -> VAR_177 |= ( TYPE_59 ) METHOD_57 ( VAR_178 ) << 16 ; VAR_179 -> VAR_180 |= ( TYPE_60 ) METHOD_58 ( VAR_181 ) << 24 ; } if ( VAR_182 -> VAR_183 >= 108U ) { VAR_184 -> VAR_185 = ( TYPE_61 ) METHOD_59 ( VAR_186 ) ; VAR_187 -> VAR_188 |= ( TYPE_62 ) METHOD_60 ( VAR_189 ) << 8 ; VAR_190 -> VAR_191 |= ( TYPE_63 ) METHOD_61 ( VAR_192 ) << 16 ; VAR_193 -> VAR_194 |= ( TYPE_64 ) METHOD_62 ( VAR_195 ) << 24 ; if ( METHOD_63 ( & ( VAR_196 -> VAR_197 ) , 1U , sizeof ( VAR_198 -> VAR_199 ) , VAR_200 ) != sizeof ( VAR_201 -> VAR_202 ) ) { METHOD_64 ( VAR_203 , "Error,can\'treadBMPheader\\n" ) ; return VAR_204 ; } VAR_205 -> VAR_206 = ( TYPE_65 ) METHOD_65 ( VAR_207 ) ; VAR_208 -> VAR_209 |= ( TYPE_66 ) METHOD_66 ( VAR_210 ) << 8 ; VAR_211 -> VAR_212 |= ( TYPE_67 ) METHOD_67 ( VAR_213 ) << 16 ; VAR_214 -> VAR_215 |= ( TYPE_68 ) METHOD_68 ( VAR_216 ) << 24 ; VAR_217 -> VAR_218 = ( TYPE_69 ) METHOD_69 ( VAR_219 ) ; VAR_220 -> VAR_221 |= ( TYPE_70 ) METHOD_70 ( VAR_222 ) << 8 ; VAR_223 -> VAR_224 |= ( TYPE_71 ) METHOD_71 ( VAR_225 ) << 16 ; VAR_226 -> VAR_227 |= ( TYPE_72 ) METHOD_72 ( VAR_228 ) << 24 ; VAR_229 -> VAR_230 = ( TYPE_73 ) METHOD_73 ( VAR_231 ) ; VAR_232 -> VAR_233 |= ( TYPE_74 ) METHOD_74 ( VAR_234 ) << 8 ; VAR_235 -> VAR_236 |= ( TYPE_75 ) METHOD_75 ( VAR_237 ) << 16 ; VAR_238 -> VAR_239 |= ( TYPE_76 ) METHOD_76 ( VAR_240 ) << 24 ; } if ( VAR_241 -> VAR_242 >= 124U ) { VAR_243 -> VAR_244 = ( TYPE_77 ) METHOD_77 ( VAR_245 ) ; VAR_246 -> VAR_247 |= ( TYPE_78 ) METHOD_78 ( VAR_248 ) << 8 ; VAR_249 -> VAR_250 |= ( TYPE_79 ) METHOD_79 ( VAR_251 ) << 16 ; VAR_252 -> VAR_253 |= ( TYPE_80 ) METHOD_80 ( VAR_254 ) << 24 ; VAR_255 -> VAR_256 = ( TYPE_81 ) METHOD_81 ( VAR_257 ) ; VAR_258 -> VAR_259 |= ( TYPE_82 ) METHOD_82 ( VAR_260 ) << 8 ; VAR_261 -> VAR_262 |= ( TYPE_83 ) METHOD_83 ( VAR_263 ) << 16 ; VAR_264 -> VAR_265 |= ( TYPE_84 ) METHOD_84 ( VAR_266 ) << 24 ; VAR_267 -> VAR_268 = ( TYPE_85 ) METHOD_85 ( VAR_269 ) ; VAR_270 -> VAR_271 |= ( TYPE_86 ) METHOD_86 ( VAR_272 ) << 8 ; VAR_273 -> VAR_274 |= ( TYPE_87 ) METHOD_87 ( VAR_275 ) << 16 ; VAR_276 -> VAR_277 |= ( TYPE_88 ) METHOD_88 ( VAR_278 ) << 24 ; VAR_279 -> VAR_280 = ( TYPE_89 ) METHOD_89 ( VAR_281 ) ; VAR_282 -> VAR_283 |= ( TYPE_90 ) METHOD_90 ( VAR_284 ) << 8 ; VAR_285 -> VAR_286 |= ( TYPE_91 ) METHOD_91 ( VAR_287 ) << 16 ; VAR_288 -> VAR_289 |= ( TYPE_92 ) METHOD_92 ( VAR_290 ) << 24 ; } return VAR_291 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_10 VAR_14 , VAR_15 ; TYPE_11 VAR_16 ; unsigned TYPE_12 VAR_17 , VAR_18 , VAR_19 [ 4 ] , VAR_20 ; unsigned TYPE_13 VAR_21 ; METHOD_1 ( VAR_22 != ( const TYPE_14 * ) VAR_23 ) ; METHOD_2 ( VAR_24 -> VAR_25 == VAR_26 ) ; if ( VAR_27 -> VAR_28 != VAR_29 ) ( TYPE_15 ) METHOD_3 ( VAR_30 , METHOD_4 ( ) , "%s" , VAR_31 -> VAR_32 ) ; METHOD_5 ( VAR_33 != ( TYPE_16 * ) VAR_34 ) ; METHOD_6 ( VAR_35 -> VAR_36 == VAR_37 ) ; VAR_38 = METHOD_7 ( VAR_39 , VAR_40 ) ; VAR_41 = METHOD_8 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 == VAR_47 ) { VAR_48 = METHOD_9 ( VAR_49 ) ; return ( ( TYPE_17 * ) VAR_50 ) ; } VAR_51 = METHOD_10 ( VAR_52 , 1 , & VAR_53 . VAR_54 ) ; VAR_55 . VAR_56 = ( unsigned TYPE_18 ) METHOD_11 ( VAR_57 ) ; VAR_58 . VAR_59 = ( TYPE_19 ) METHOD_12 ( VAR_60 ) ; if ( ( VAR_61 != 1 ) || ( ( VAR_62 . VAR_63 != VAR_64 ) && ( VAR_65 . VAR_66 != VAR_67 ) && ( VAR_68 . VAR_69 != VAR_70 ) && ( VAR_71 . VAR_72 != VAR_73 ) && ( VAR_74 . VAR_75 != VAR_76 ) && ( VAR_77 . VAR_78 != VAR_79 ) ) || ( ( ( VAR_80 . VAR_81 == VAR_82 ) || ( VAR_83 . VAR_84 == VAR_85 ) ) && ( VAR_86 . VAR_87 == 0 ) ) ) METHOD_13 ( VAR_88 , "ImproperImageHeader" ) ; VAR_89 . VAR_90 = METHOD_14 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_15 ( VAR_94 ) ; VAR_95 . VAR_96 = ( unsigned TYPE_20 ) METHOD_16 ( VAR_97 ) ; VAR_98 . VAR_99 = METHOD_17 ( VAR_100 ) ; VAR_101 . VAR_102 = METHOD_18 ( VAR_103 ) ; VAR_104 . VAR_105 = ( unsigned TYPE_21 ) METHOD_19 ( VAR_106 ) ; VAR_107 . VAR_108 = ( unsigned TYPE_22 ) METHOD_20 ( VAR_109 ) ; VAR_110 . VAR_111 = ( unsigned TYPE_23 ) METHOD_21 ( VAR_112 ) ; VAR_113 . VAR_114 = ( unsigned TYPE_24 ) METHOD_22 ( VAR_115 ) ; if ( METHOD_23 ( VAR_116 ) != VAR_117 ) METHOD_24 ( VAR_118 , "UnableToReadImageData" ) ; if ( ( ( ( VAR_119 . VAR_120 <= 1 ) || ( VAR_121 . VAR_122 >= 17 ) ) && ( VAR_123 . VAR_124 != 24 ) && ( VAR_125 . VAR_126 != 32 ) ) ) METHOD_25 ( VAR_127 , "ImproperImageHeader" ) ; VAR_128 -> VAR_129 = VAR_130 . VAR_131 ; VAR_132 -> VAR_133 = VAR_134 . VAR_135 ; VAR_136 = ( VAR_137 . VAR_138 & 0x0FU ) ; VAR_139 -> VAR_140 = ( VAR_141 > 0 ) || ( VAR_142 . VAR_143 == 32 ) || ( VAR_144 . VAR_145 == 32 ) ? VAR_146 : VAR_147 ; if ( ( VAR_148 . VAR_149 != VAR_150 ) && ( VAR_151 . VAR_152 != VAR_153 ) ) VAR_154 -> VAR_155 = ( TYPE_25 ) ( ( VAR_156 . VAR_157 <= 8 ) ? 8 : ( VAR_158 . VAR_159 <= 16 ) ? 5 : ( VAR_160 . VAR_161 == 24 ) ? 8 : ( VAR_162 . VAR_163 == 32 ) ? 8 : 8 ) ; else VAR_164 -> VAR_165 = ( TYPE_26 ) ( ( VAR_166 . VAR_167 <= 8 ) ? 8 : ( VAR_168 . VAR_169 <= 16 ) ? 5 : ( VAR_170 . VAR_171 == 24 ) ? 8 : ( VAR_172 . VAR_173 == 32 ) ? 8 : 8 ) ; if ( ( VAR_174 . VAR_175 == VAR_176 ) || ( VAR_177 . VAR_178 == VAR_179 ) || ( VAR_180 . VAR_181 == VAR_182 ) || ( VAR_183 . VAR_184 == VAR_185 ) ) VAR_186 -> VAR_187 = VAR_188 ; VAR_189 -> VAR_190 = VAR_191 ; if ( ( VAR_192 . VAR_193 == VAR_194 ) || ( VAR_195 . VAR_196 == VAR_197 ) || ( VAR_198 . VAR_199 == VAR_200 ) ) VAR_201 -> VAR_202 = VAR_203 ; if ( VAR_204 -> VAR_205 == VAR_206 ) { if ( VAR_207 . VAR_208 != 0 ) VAR_209 -> VAR_210 = VAR_211 . VAR_212 + VAR_213 . VAR_214 ; else { TYPE_27 VAR_215 ; VAR_216 = 1 ; VAR_217 -> VAR_218 = VAR_219 << VAR_220 . VAR_221 ; if ( METHOD_26 ( VAR_222 , VAR_223 -> VAR_224 , VAR_225 ) == VAR_226 ) METHOD_27 ( VAR_227 , "MemoryAllocationFailed" ) ; } } if ( VAR_228 . VAR_229 != 0 ) { TYPE_28 * VAR_230 ; TYPE_29 VAR_231 ; VAR_232 = ( TYPE_30 ) VAR_233 . VAR_234 ; VAR_235 = ( TYPE_31 * ) VAR_236 ; if ( ~ VAR_237 >= ( VAR_238 - 1 ) ) VAR_239 = ( TYPE_32 * ) METHOD_28 ( VAR_240 + VAR_241 , sizeof ( * VAR_242 ) ) ; if ( VAR_243 == ( TYPE_33 * ) VAR_244 ) METHOD_29 ( VAR_245 , "MemoryAllocationFailed" ) ; VAR_246 = METHOD_30 ( VAR_247 , VAR_248 . VAR_249 , ( unsigned TYPE_34 * ) VAR_250 ) ; VAR_251 [ VAR_252 . VAR_253 ] = '\\0' ; ( TYPE_35 ) METHOD_31 ( VAR_254 , "comment" , VAR_255 , VAR_256 ) ; VAR_257 = METHOD_32 ( VAR_258 ) ; } if ( VAR_259 -> VAR_260 != VAR_261 ) { ( TYPE_36 ) METHOD_33 ( VAR_262 ) ; return ( VAR_263 ) ; } VAR_264 = METHOD_34 ( VAR_265 , VAR_266 -> VAR_267 , VAR_268 -> VAR_269 , VAR_270 ) ; if ( VAR_271 == VAR_272 ) return ( METHOD_35 ( VAR_273 ) ) ; ( TYPE_37 ) METHOD_36 ( & VAR_274 , 0 , sizeof ( VAR_275 ) ) ; VAR_276 . VAR_277 = ( TYPE_38 ) VAR_278 ; if ( VAR_279 . VAR_280 != 0 )  {  if ( METHOD_37 ( VAR_281 , VAR_282 -> VAR_283 , VAR_284 ) == VAR_285 ) METHOD_38 ( VAR_286 , "MemoryAllocationFailed" ) ; for ( VAR_287 = 0 ; VAR_288 < ( TYPE_39 ) VAR_289 . VAR_290 ; VAR_291 ++ ) VAR_292 -> VAR_293 [ VAR_294 ] = VAR_295 ; for ( ; VAR_296 < ( TYPE_40 ) VAR_297 -> VAR_298 ; VAR_299 ++ ) { switch ( VAR_300 . VAR_301 ) { case 8 : default : { VAR_302 . VAR_303 = ( TYPE_41 ) METHOD_39 ( ( unsigned TYPE_42 ) METHOD_40 ( VAR_304 ) ) ; VAR_305 . VAR_306 = VAR_307 . VAR_308 ; VAR_309 . VAR_310 = VAR_311 . VAR_312 ; break ; } case 15 : case 16 : { TYPE_43 VAR_313 ; VAR_314 = ( unsigned TYPE_44 ) METHOD_41 ( VAR_315 ) ; VAR_316 = ( unsigned TYPE_45 ) METHOD_42 ( VAR_317 ) ; VAR_318 = METHOD_43 ( 5UL ) ; VAR_319 . VAR_320 = ( TYPE_46 ) METHOD_44 ( 1UL * ( VAR_321 & 0x7c ) >> 2 , VAR_322 ) ; VAR_323 . VAR_324 = ( TYPE_47 ) METHOD_45 ( ( 1UL * ( VAR_325 & 0x03 ) << 3 ) + ( 1UL * ( VAR_326 & 0xe0 ) >> 5 ) , VAR_327 ) ; VAR_328 . VAR_329 = ( TYPE_48 ) METHOD_46 ( 1UL * ( VAR_330 & 0x1f ) , VAR_331 ) ; break ; } case 24 : { VAR_332 . VAR_333 = ( TYPE_49 ) METHOD_47 ( ( unsigned TYPE_50 ) METHOD_48 ( VAR_334 ) ) ; VAR_335 . VAR_336 = ( TYPE_51 ) METHOD_49 ( ( unsigned TYPE_52 ) METHOD_50 ( VAR_337 ) ) ; VAR_338 . VAR_339 = ( TYPE_53 ) METHOD_51 ( ( unsigned TYPE_54 ) METHOD_52 ( VAR_340 ) ) ; break ; } case 32 : { VAR_341 . VAR_342 = ( TYPE_55 ) METHOD_53 ( ( unsigned TYPE_56 ) METHOD_54 ( VAR_343 ) ) ; VAR_344 . VAR_345 = ( TYPE_57 ) METHOD_55 ( ( unsigned TYPE_58 ) METHOD_56 ( VAR_346 ) ) ; VAR_347 . VAR_348 = ( TYPE_59 ) METHOD_57 ( ( unsigned TYPE_60 ) METHOD_58 ( VAR_349 ) ) ; VAR_350 . VAR_351 = ( TYPE_61 ) METHOD_59 ( ( unsigned TYPE_62 ) METHOD_60 ( VAR_352 ) ) ; break ; } } VAR_353 -> VAR_354 [ VAR_355 ] = VAR_356 ; } } VAR_357 = 0 ; VAR_358 = 0 ; VAR_359 = VAR_360 ; VAR_361 = 0 ; VAR_362 = 0 ; VAR_363 = 0 ; VAR_364 = 0 ; for ( VAR_365 = 0 ; VAR_366 < ( TYPE_63 ) VAR_367 -> VAR_368 ; VAR_369 ++ ) { VAR_370 = VAR_371 ; if ( ( ( unsigned TYPE_64 ) ( VAR_372 . VAR_373 & 0x20 ) >> 5 ) == 0 ) VAR_374 = VAR_375 -> VAR_376 - VAR_377 - 1 ; VAR_378 = METHOD_61 ( VAR_379 , 0 , ( TYPE_65 ) VAR_380 , VAR_381 -> VAR_382 , 1 , VAR_383 ) ; if ( VAR_384 == ( TYPE_66 * ) VAR_385 ) break ; for ( VAR_386 = 0 ; VAR_387 < ( TYPE_67 ) VAR_388 -> VAR_389 ; VAR_390 ++ ) { if ( ( VAR_391 . VAR_392 == VAR_393 ) || ( VAR_394 . VAR_395 == VAR_396 ) || ( VAR_397 . VAR_398 == VAR_399 ) ) { if ( VAR_400 != 0 ) { VAR_401 -- ; VAR_402 = VAR_403 != 0 ; } else { VAR_404 = METHOD_62 ( VAR_405 , 1 , & VAR_406 ) ; if ( VAR_407 != 1 ) METHOD_63 ( VAR_408 , "UnableToReadImageData" ) ; VAR_409 = VAR_410 & 0x80 ; if ( VAR_411 != 0 ) VAR_412 -= 128 ; VAR_413 = VAR_414 ; } } if ( VAR_415 == VAR_416 ) switch ( VAR_417 . VAR_418 ) { case 8 : default : { VAR_419 = ( TYPE_68 ) METHOD_64 ( VAR_420 ) ; if ( VAR_421 . VAR_422 != 0 ) VAR_423 = VAR_424 -> VAR_425 [ ( TYPE_69 ) METHOD_65 ( VAR_426 , ( TYPE_70 ) VAR_427 , VAR_428 ) ] ; else { VAR_429 . VAR_430 = ( TYPE_71 ) METHOD_66 ( ( unsigned TYPE_72 ) VAR_431 ) ; VAR_432 . VAR_433 = ( TYPE_73 ) METHOD_67 ( ( unsigned TYPE_74 ) VAR_434 ) ; VAR_435 . VAR_436 = ( TYPE_75 ) METHOD_68 ( ( unsigned TYPE_76 ) VAR_437 ) ; } break ; } case 15 : case 16 : { TYPE_77 VAR_438 ; if ( METHOD_69 ( VAR_439 , 2 , VAR_440 ) != 2 ) METHOD_70 ( VAR_441 , "UnableToReadImageData" ) ; VAR_442 = VAR_443 [ 0 ] ; VAR_444 = VAR_445 [ 1 ] ; VAR_446 = METHOD_71 ( 5UL ) ; VAR_447 . VAR_448 = ( TYPE_78 ) METHOD_72 ( 1UL * ( VAR_449 & 0x7c ) >> 2 , VAR_450 ) ; VAR_451 . VAR_452 = ( TYPE_79 ) METHOD_73 ( ( 1UL * ( VAR_453 & 0x03 ) << 3 ) + ( 1UL * ( VAR_454 & 0xe0 ) >> 5 ) , VAR_455 ) ; VAR_456 . VAR_457 = ( TYPE_80 ) METHOD_74 ( 1UL * ( VAR_458 & 0x1f ) , VAR_459 ) ; if ( VAR_460 -> VAR_461 != VAR_462 ) VAR_463 . VAR_464 = ( TYPE_81 ) ( ( VAR_465 & 0x80 ) == 0 ? ( TYPE_82 ) VAR_466 : ( TYPE_83 ) VAR_467 ) ; if ( VAR_468 -> VAR_469 == VAR_470 ) VAR_471 = ( TYPE_84 ) METHOD_75 ( VAR_472 , ( ( TYPE_85 ) ( VAR_473 << 8 ) ) + VAR_474 , VAR_475 ) ; break ; } case 24 : { if ( METHOD_76 ( VAR_476 , 3 , VAR_477 ) != 3 ) METHOD_77 ( VAR_478 , "UnableToReadImageData" ) ; VAR_479 . VAR_480 = ( TYPE_86 ) METHOD_78 ( VAR_481 [ 0 ] ) ; VAR_482 . VAR_483 = ( TYPE_87 ) METHOD_79 ( VAR_484 [ 1 ] ) ; VAR_485 . VAR_486 = ( TYPE_88 ) METHOD_80 ( VAR_487 [ 2 ] ) ; break ; } case 32 : { if ( METHOD_81 ( VAR_488 , 4 , VAR_489 ) != 4 ) METHOD_82 ( VAR_490 , "UnableToReadImageData" ) ; VAR_491 . VAR_492 = ( TYPE_89 ) METHOD_83 ( VAR_493 [ 0 ] ) ; VAR_494 . VAR_495 = ( TYPE_90 ) METHOD_84 ( VAR_496 [ 1 ] ) ; VAR_497 . VAR_498 = ( TYPE_91 ) METHOD_85 ( VAR_499 [ 2 ] ) ; VAR_500 . VAR_501 = ( TYPE_92 ) METHOD_86 ( VAR_502 [ 3 ] ) ; break ; } } if ( VAR_503 == VAR_504 ) METHOD_87 ( VAR_505 , "UnableToReadImageData" ) ; if ( VAR_506 -> VAR_507 == VAR_508 ) METHOD_88 ( VAR_509 , VAR_510 , VAR_511 ) ; METHOD_89 ( VAR_512 , METHOD_90 ( VAR_513 . VAR_514 ) , VAR_515 ) ; METHOD_91 ( VAR_516 , METHOD_92 ( VAR_517 . VAR_518 ) , VAR_519 ) ; METHOD_93 ( VAR_520 , METHOD_94 ( VAR_521 . VAR_522 ) , VAR_523 ) ; if ( VAR_524 -> VAR_525 != VAR_526 ) METHOD_95 ( VAR_527 , METHOD_96 ( VAR_528 . VAR_529 ) , VAR_530 ) ; VAR_531 += METHOD_97 ( VAR_532 ) ; } if ( ( ( unsigned TYPE_93 ) ( VAR_533 . VAR_534 & 0xc0 ) >> 6 ) == 2 ) VAR_535 += 2 ; else VAR_536 ++ ; if ( VAR_537 >= VAR_538 -> VAR_539 ) { VAR_540 ++ ; VAR_541 = VAR_542 ; } if ( METHOD_98 ( VAR_543 , VAR_544 ) == VAR_545 ) break ; if ( VAR_546 -> VAR_547 == ( TYPE_94 * ) VAR_548 ) { VAR_549 = METHOD_99 ( VAR_550 , VAR_551 , ( TYPE_95 ) VAR_552 , VAR_553 -> VAR_554 ) ; if ( VAR_555 == VAR_556 ) break ; } } if ( METHOD_100 ( VAR_557 ) != VAR_558 ) METHOD_101 ( VAR_559 , VAR_560 , "UnexpectedEndOfFile" , VAR_561 -> VAR_562 ) ; ( TYPE_96 ) METHOD_102 ( VAR_563 ) ; return ( METHOD_103 ( VAR_564 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  if ( METHOD_1 ( VAR_3 , 4 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { const TYPE_2 VAR_3 = sizeof ( TYPE_3 ) ; TYPE_4 VAR_4 ; TYPE_5 * VAR_5 = METHOD_1 ( VAR_6 ) ; if ( VAR_7 != VAR_8 ) return METHOD_2 ( VAR_9 , VAR_10 , VAR_11 ) ; switch ( VAR_12 -> VAR_13 . VAR_14 ) { case VAR_15 : VAR_16 -> VAR_17 . VAR_18 = VAR_19 ; if ( VAR_20 -> VAR_21 . VAR_22 < VAR_23 ) { VAR_24 -> VAR_25 . VAR_26 = VAR_27 ; return - VAR_28 ;  }  VAR_29 . VAR_30 = METHOD_3 ( VAR_31 ) -> VAR_32 ; VAR_33 . VAR_34 = 0 ; VAR_35 . VAR_36 = 0 ; if ( METHOD_4 ( VAR_37 -> VAR_38 . VAR_39 . VAR_40 , & VAR_41 , VAR_42 ) ) return - VAR_43 ; return 0 ; case VAR_44 : if ( ! METHOD_5 ( VAR_45 ) ) return - VAR_46 ; if ( VAR_47 -> VAR_48 & VAR_49 ) return - VAR_50 ; if ( METHOD_6 ( & VAR_51 , VAR_52 -> VAR_53 . VAR_54 . VAR_55 , VAR_56 ) ) return - VAR_57 ; if ( VAR_58 . VAR_59 != VAR_60 && VAR_61 . VAR_62 != VAR_63 ) return - VAR_64 ; if ( VAR_65 . VAR_66 != 0 ) return - VAR_67 ; METHOD_7 ( VAR_68 ) -> VAR_69 = VAR_70 . VAR_71 ; return 0 ; default : return METHOD_8 ( VAR_72 , VAR_73 , VAR_74 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 TYPE_4 * VAR_3 ) {  return METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_9 , VAR_10 , VAR_11 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ;  METHOD_1 ( VAR_4 , VAR_5 ) ; METHOD_2 ( VAR_6 , VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 -> VAR_10 ) ; WLog_DBG ( VAR_11 , "RDP_NEG_REQ:RequestedProtocol:0x%08" PRIX32 "" , VAR_12 -> VAR_13 ) ; VAR_14 -> VAR_15 = VAR_16 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 ;  TYPE_3 VAR_5 ;  struct STRUCT_OR_UNION_4 VAR_6 = { 0 , } ; TYPE_4 VAR_7 = 0 ; METHOD_1 ( VAR_8 , 3 , "snmpcmd" ) ; if ( VAR_9 -> VAR_10 . VAR_11 ) return - VAR_12 ; if ( ( ! METHOD_2 ( VAR_13 , VAR_14 ) ) && ( ! VAR_15 -> VAR_16 . VAR_17 ) ) { return - VAR_18 ; } if ( METHOD_3 ( & VAR_19 , VAR_20 + sizeof ( TYPE_5 ) , sizeof ( TYPE_6 ) ) )  return - VAR_21 ;  VAR_22 = METHOD_4 ( VAR_23 , VAR_24 + sizeof ( struct STRUCT_OR_UNION_5 ) ) ; if ( METHOD_5 ( VAR_25 ) ) { METHOD_6 ( VAR_26 , 2 , "snmpnome" ) ; return METHOD_7 ( VAR_27 ) ; } VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 . VAR_34 = METHOD_8 ( VAR_35 . VAR_36 , VAR_37 ) ; if ( ! VAR_38 . VAR_39 ) { METHOD_9 ( VAR_40 ) ; return - VAR_41 ; } VAR_42 . VAR_43 = sizeof ( struct STRUCT_OR_UNION_6 ) ; VAR_44 = METHOD_10 ( VAR_45 , VAR_46 , VAR_47 + VAR_48 ) ; VAR_49 = ( struct STRUCT_OR_UNION_7 * ) ( VAR_50 -> VAR_51 + VAR_52 ) ; METHOD_11 ( & VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , & VAR_58 -> VAR_59 , VAR_60 ) ; VAR_61 = METHOD_12 ( VAR_62 , VAR_63 , VAR_64 + VAR_65 , VAR_66 , ( TYPE_7 * ) & VAR_67 ) ; if ( VAR_68 ) METHOD_13 ( 2 , "SNMPcommandfailedon%s:(0x%x)\\n" , METHOD_14 ( VAR_69 ) , VAR_70 ) ; else { if ( METHOD_15 ( VAR_71 , VAR_72 . VAR_73 , VAR_74 . VAR_75 ) ) VAR_76 = - VAR_77 ; } METHOD_16 ( VAR_78 ) ; METHOD_17 ( VAR_79 . VAR_80 ) ; return VAR_81 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 ;  VAR_4 = VAR_5 ; for ( VAR_6 = VAR_7 ; VAR_8 > 0 ; -- VAR_9 ) { if ( METHOD_1 ( VAR_10 , VAR_11 ) == VAR_12 ) return VAR_13 - VAR_14 ; } return VAR_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 , * VAR_11 = & VAR_12 ; METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , 0 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ; METHOD_2 ( VAR_20 ) ; METHOD_3 ( VAR_21 ) ; VAR_22 = METHOD_4 ( VAR_23 ) ; for ( VAR_24 = 0 ; VAR_25 < VAR_26 ; VAR_27 ++ ) { TYPE_10 VAR_28 = METHOD_5 ( VAR_29 ) ; if ( METHOD_6 ( VAR_30 ) ) return VAR_31 ; for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; VAR_35 ++ ) { if ( METHOD_7 ( VAR_36 ) ) return VAR_37 ; METHOD_8 ( VAR_38 ) ; METHOD_9 ( VAR_39 ) ; } } METHOD_10 ( VAR_40 ) ; VAR_41 = METHOD_11 ( VAR_42 ) ; VAR_43 += METHOD_12 ( VAR_44 ) ; METHOD_13 ( VAR_45 ) ; VAR_46 = METHOD_14 ( VAR_47 ) ; METHOD_15 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( VAR_51 != 1 ) { METHOD_16 ( VAR_52 , VAR_53 , "numberofvideotracks%disnot1\\n" , VAR_54 ) ; return VAR_55 ; } for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { TYPE_11 * VAR_60 = METHOD_17 ( VAR_61 , VAR_62 ) ; TYPE_12 VAR_63 , VAR_64 ; if ( ! VAR_65 ) return METHOD_18 ( VAR_66 ) ; VAR_67 -> VAR_68 = VAR_69 ; VAR_70 -> VAR_71 -> VAR_72 = VAR_73 ; VAR_74 -> VAR_75 -> VAR_76 = VAR_77 ; VAR_78 = METHOD_19 ( VAR_79 ) ; VAR_80 += METHOD_20 ( VAR_81 ) ; METHOD_21 ( VAR_82 ) ; METHOD_22 ( VAR_83 ) ; VAR_84 = METHOD_23 ( VAR_85 ) ; VAR_86 = METHOD_24 ( VAR_87 ) ; METHOD_25 ( VAR_88 , 64 , VAR_89 , VAR_90 ) ; VAR_91 -> VAR_92 = METHOD_26 ( VAR_93 ) ; VAR_94 -> VAR_95 -> VAR_96 = METHOD_27 ( VAR_97 ) ; VAR_98 -> VAR_99 -> VAR_100 = METHOD_28 ( VAR_101 ) ; METHOD_29 ( VAR_102 ) ; METHOD_30 ( VAR_103 ) ; METHOD_31 ( VAR_104 , VAR_105 , VAR_106 ) ; } VAR_107 = METHOD_32 ( VAR_108 ) ; VAR_109 += METHOD_33 ( VAR_110 ) ; METHOD_34 ( VAR_111 ) ; VAR_112 -> VAR_113 = METHOD_35 ( VAR_114 ) ; METHOD_36 ( VAR_115 , VAR_116 , VAR_117 ) ; if ( VAR_118 -> VAR_119 != 1 ) METHOD_37 ( VAR_120 , VAR_121 , "numberofaudiotracks%disnot1\\n" , VAR_122 -> VAR_123 ) ; for ( VAR_124 = 0 ; VAR_125 < VAR_126 -> VAR_127 ; VAR_128 ++ ) { TYPE_13 VAR_129 ; TYPE_14 * VAR_130 = METHOD_38 ( VAR_131 , VAR_132 ) ; if ( ! VAR_133 ) return METHOD_39 ( VAR_134 ) ; VAR_135 -> VAR_136 = VAR_137 + VAR_138 ; VAR_139 -> VAR_140 -> VAR_141 = VAR_142 ; VAR_143 -> VAR_144 -> VAR_145 = VAR_146 ; VAR_147 = METHOD_40 ( VAR_148 ) ; VAR_149 += METHOD_41 ( VAR_150 ) ; METHOD_42 ( VAR_151 ) ; METHOD_43 ( VAR_152 ) ; METHOD_44 ( VAR_153 ) ; VAR_154 -> VAR_155 -> VAR_156 = METHOD_45 ( VAR_157 ) ; VAR_158 -> VAR_159 -> VAR_160 = METHOD_46 ( VAR_161 ) ; METHOD_47 ( VAR_162 , 10 , VAR_163 ) ; VAR_164 = METHOD_48 ( VAR_165 ) ; METHOD_49 ( VAR_166 , VAR_167 , VAR_168 ) ; METHOD_50 ( VAR_169 ) ; if ( METHOD_51 ( VAR_170 ) < VAR_171 ) { TYPE_15 VAR_172 ;  TYPE_16 VAR_173 = 0 ;  TYPE_17 VAR_174 [ 256 ] ; TYPE_18 VAR_175 = 1 ; TYPE_19 * VAR_176 ; METHOD_52 ( VAR_177 ) ; METHOD_53 ( VAR_178 ) ; METHOD_54 ( VAR_179 ) ; VAR_180 = METHOD_55 ( VAR_181 ) ; for ( VAR_182 = 0 ; VAR_183 < VAR_184 ; VAR_185 ++ ) { TYPE_20 VAR_186 = METHOD_56 ( VAR_187 ) ; if ( VAR_188 > VAR_189 / 2 - VAR_190 ) { return VAR_191 ; } VAR_192 [ VAR_193 ] = VAR_194 ;  VAR_195 += VAR_196 ;  } VAR_197 = METHOD_57 ( VAR_198 -> VAR_199 , 64 + VAR_200 + VAR_201 / 255 ) ; if ( VAR_202 < 0 ) return VAR_203 ; VAR_204 = VAR_205 -> VAR_206 -> VAR_207 ; VAR_208 [ 0 ] = 2 ; for ( VAR_209 = 0 ; VAR_210 < VAR_211 - 1 ; VAR_212 ++ ) { unsigned VAR_213 = METHOD_58 ( & VAR_214 [ VAR_215 ] , VAR_216 [ VAR_217 ] ) ;  if ( VAR_218 > VAR_219 [ VAR_220 ] ) {  return VAR_221 ; } VAR_222 += VAR_223 ; } for ( VAR_224 = 0 ; VAR_225 < VAR_226 ; VAR_227 ++ ) { TYPE_21 VAR_228 = METHOD_59 ( VAR_229 , & VAR_230 [ VAR_231 ] , VAR_232 [ VAR_233 ] ) ; if ( VAR_234 < VAR_235 [ VAR_236 ] ) { VAR_237 -> VAR_238 -> VAR_239 = 0 ; METHOD_60 ( & VAR_240 -> VAR_241 -> VAR_242 ) ; break ; }  VAR_243 += VAR_244 [ VAR_245 ] ;  } if ( VAR_246 < VAR_247 -> VAR_248 -> VAR_249 ) VAR_250 -> VAR_251 -> VAR_252 = VAR_253 ; } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 VAR_3 , VAR_4 , VAR_5 , VAR_6 ; METHOD_1 ( VAR_7 -> VAR_8 , VAR_9 , "metadatasetscount%d\\n" , VAR_10 -> VAR_11 ) ; for ( VAR_12 = 0 ; VAR_13 < VAR_14 -> VAR_15 ; VAR_16 ++ ) { VAR_17 = METHOD_2 ( VAR_18 , & VAR_19 -> VAR_20 [ VAR_21 ] , VAR_22 ) ; if ( VAR_23 ) break ; } if ( ! VAR_24 ) { METHOD_3 ( VAR_25 -> VAR_26 , VAR_27 , "nomaterialpackagefound\\n" ) ; return VAR_28 ; } METHOD_4 ( & VAR_29 -> VAR_30 -> VAR_31 , "material_package_umid" , VAR_32 ) ; if ( VAR_33 -> VAR_34 && VAR_35 -> VAR_36 [ 0 ] ) METHOD_5 ( & VAR_37 -> VAR_38 -> VAR_39 , "material_package_name" , VAR_40 -> VAR_41 , 0 ) ; METHOD_6 ( VAR_42 , & VAR_43 -> VAR_44 -> VAR_45 , VAR_46 ) ; for ( VAR_47 = 0 ; VAR_48 < VAR_49 -> VAR_50 ; VAR_51 ++ ) { TYPE_4 * VAR_52 = VAR_53 ; TYPE_5 * VAR_54 = VAR_55 ; TYPE_6 * VAR_56 = VAR_57 ; TYPE_7 * VAR_58 = VAR_59 ; TYPE_8 * VAR_60 = VAR_61 ; TYPE_9 * VAR_62 = VAR_63 ; TYPE_10 * VAR_64 = VAR_65 ; TYPE_11 * VAR_66 = VAR_67 ; const TYPE_12 * VAR_68 = VAR_69 ; const TYPE_13 * VAR_70 = VAR_71 ; const TYPE_14 * VAR_72 = VAR_73 ; VAR_74 * VAR_75 ; TYPE_15 VAR_76 ; TYPE_16 VAR_77 ; if ( ! ( VAR_78 = METHOD_7 ( VAR_79 , & VAR_80 -> VAR_81 [ VAR_82 ] , VAR_83 ) ) ) { METHOD_8 ( VAR_84 -> VAR_85 , VAR_86 , "couldnotresolvematerialtrackstrongref\\n" ) ; continue ; } if ( ( VAR_87 = METHOD_9 ( VAR_88 , & VAR_89 -> VAR_90 , VAR_91 ) ) ) { VAR_92 = ( TYPE_17 * ) VAR_93 ; VAR_94 = VAR_95 -> VAR_96 == 1 ? VAR_97 : 0 ; if ( METHOD_10 ( & VAR_98 , VAR_99 -> VAR_100 , VAR_101 , VAR_102 -> VAR_103 , VAR_104 -> VAR_105 ) == 0 ) { METHOD_11 ( & VAR_106 -> VAR_107 -> VAR_108 , "timecode" , & VAR_109 ) ; } } if ( ! ( VAR_110 -> VAR_111 = METHOD_12 ( VAR_112 , & VAR_113 -> VAR_114 , VAR_115 ) ) ) { METHOD_13 ( VAR_116 -> VAR_117 , VAR_118 , "couldnotresolvematerialtracksequencestrongref\\n" ) ; continue ; } for ( VAR_119 = 0 ; VAR_120 < VAR_121 -> VAR_122 -> VAR_123 ; VAR_124 ++ ) { VAR_125 = METHOD_14 ( VAR_126 , & VAR_127 -> VAR_128 -> VAR_129 [ VAR_130 ] , VAR_131 ) ; if ( ! VAR_132 ) continue ; VAR_133 = ( TYPE_18 * ) VAR_134 ; VAR_135 = VAR_136 -> VAR_137 == 1 ? VAR_138 : 0 ; if ( METHOD_15 ( & VAR_139 , VAR_140 -> VAR_141 , VAR_142 , VAR_143 -> VAR_144 , VAR_145 -> VAR_146 ) == 0 ) { METHOD_16 ( & VAR_147 -> VAR_148 -> VAR_149 , "timecode" , & VAR_150 ) ; break ; } } if ( VAR_151 -> VAR_152 -> VAR_153 > 1 ) METHOD_17 ( VAR_154 -> VAR_155 , VAR_156 , "materialtrack%d:has%dcomponents\\n" , VAR_157 -> VAR_158 , VAR_159 -> VAR_160 -> VAR_161 ) ; for ( VAR_162 = 0 ; VAR_163 < VAR_164 -> VAR_165 -> VAR_166 ; VAR_167 ++ ) { VAR_168 = METHOD_18 ( VAR_169 , & VAR_170 -> VAR_171 -> VAR_172 [ VAR_173 ] ) ; if ( ! VAR_174 ) continue ; VAR_175 = METHOD_19 ( VAR_176 , VAR_177 -> VAR_178 , VAR_179 -> VAR_180 ) ; if ( ! VAR_181 ) { METHOD_20 ( VAR_182 -> VAR_183 , VAR_184 , "materialtrack%d:nocorrespondingsourcepackagefound\\n" , VAR_185 -> VAR_186 ) ; continue ; } for ( VAR_187 = 0 ; VAR_188 < VAR_189 -> VAR_190 ; VAR_191 ++ ) { if ( ! ( VAR_192 = METHOD_21 ( VAR_193 , & VAR_194 -> VAR_195 [ VAR_196 ] , VAR_197 ) ) ) { METHOD_22 ( VAR_198 -> VAR_199 , VAR_200 , "couldnotresolvesourcetrackstrongref\\n" ) ; VAR_201 = VAR_202 ; goto VAR_203 ; } if ( VAR_204 -> VAR_205 == VAR_206 -> VAR_207 ) { VAR_208 = VAR_209 ; break ; } } if ( ! VAR_210 ) { METHOD_23 ( VAR_211 -> VAR_212 , VAR_213 , "materialtrack%d:nocorrespondingsourcetrackfound\\n" , VAR_214 -> VAR_215 ) ; break ; } for ( VAR_216 = 0 ; VAR_217 < VAR_218 -> VAR_219 ; VAR_220 ++ ) { VAR_221 * VAR_222 ; if ( ! ( VAR_223 = METHOD_24 ( VAR_224 , & VAR_225 -> VAR_226 [ VAR_227 ] , VAR_228 ) ) ) {  METHOD_25 ( VAR_229 , VAR_230 , "couldnotresolveessencecontainerdatastrongref\\n" ) ;  continue ; } if ( ! METHOD_26 ( VAR_231 -> VAR_232 , VAR_233 -> VAR_234 , sizeof ( TYPE_19 ) ) && ! METHOD_27 ( VAR_235 -> VAR_236 , VAR_237 -> VAR_238 , sizeof ( TYPE_20 ) ) ) { VAR_239 -> VAR_240 = VAR_241 -> VAR_242 ; VAR_243 -> VAR_244 = VAR_245 -> VAR_246 ; break ; } } if ( VAR_247 && VAR_248 ) break ; } if ( ! VAR_249 || ! VAR_250 || ! VAR_251 ) { if ( ( VAR_252 = METHOD_28 ( VAR_253 , VAR_254 ) ) ) goto VAR_255 ; continue ; } if ( ! ( VAR_256 -> VAR_257 = METHOD_29 ( VAR_258 , & VAR_259 -> VAR_260 , VAR_261 ) ) ) { METHOD_30 ( VAR_262 -> VAR_263 , VAR_264 , "couldnotresolvesourcetracksequencestrongref\\n" ) ; VAR_265 = VAR_266 ; goto VAR_267 ; } if ( METHOD_31 ( VAR_268 -> VAR_269 -> VAR_270 , VAR_271 -> VAR_272 -> VAR_273 , 16 ) ) { METHOD_32 ( VAR_274 -> VAR_275 , VAR_276 , "materialtrack%d:DataDefinitionmismatch\\n" , VAR_277 -> VAR_278 ) ; continue ; } VAR_279 = METHOD_33 ( VAR_280 -> VAR_281 , VAR_282 ) ; if ( ! VAR_283 ) { METHOD_34 ( VAR_284 -> VAR_285 , VAR_286 , "couldnotallocatestream\\n" ) ; VAR_287 = METHOD_35 ( VAR_288 ) ; goto VAR_289 ; } VAR_290 -> VAR_291 = VAR_292 -> VAR_293 ; VAR_294 -> VAR_295 = VAR_296 ; VAR_297 -> VAR_298 = METHOD_36 ( VAR_299 , & VAR_300 -> VAR_301 , VAR_302 ) ; VAR_303 = METHOD_37 ( VAR_304 , VAR_305 -> VAR_306 , VAR_307 -> VAR_308 ) ; if ( VAR_309 && VAR_310 -> VAR_311 != VAR_312 ) VAR_313 -> VAR_314 = VAR_315 -> VAR_316 = METHOD_38 ( VAR_317 -> VAR_318 , VAR_319 -> VAR_320 ) ; else VAR_321 -> VAR_322 = VAR_323 -> VAR_324 = VAR_325 -> VAR_326 ; if ( VAR_327 -> VAR_328 == - 1 ) VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 -> VAR_335 ; if ( VAR_336 -> VAR_337 . VAR_338 <= 0 || VAR_339 -> VAR_340 . VAR_341 <= 0 ) { METHOD_39 ( VAR_342 -> VAR_343 , VAR_344 , "Invalideditrate(%d/%d)foundonstream%d," "defaultingto25/1\\n" , VAR_345 -> VAR_346 . VAR_347 , VAR_348 -> VAR_349 . VAR_350 , VAR_351 -> VAR_352 ) ; VAR_353 -> VAR_354 = ( TYPE_21 ) { 25 , 1 } ; } METHOD_40 ( VAR_355 , 64 , VAR_356 -> VAR_357 . VAR_358 , VAR_359 -> VAR_360 . VAR_361 ) ; VAR_362 -> VAR_363 = VAR_364 -> VAR_365 ; METHOD_41 ( VAR_366 -> VAR_367 , "datadefinitionul" , VAR_368 -> VAR_369 -> VAR_370 ) ; VAR_371 = METHOD_42 ( VAR_372 , & VAR_373 -> VAR_374 -> VAR_375 ) ; VAR_376 -> VAR_377 -> VAR_378 = VAR_379 -> VAR_380 ; if ( ! VAR_381 ) { METHOD_43 ( VAR_382 -> VAR_383 , VAR_384 , "sourcetrack%d:stream%d,nodescriptorfound\\n" , VAR_385 -> VAR_386 , VAR_387 -> VAR_388 ) ; continue ; } METHOD_44 ( VAR_389 -> VAR_390 , "essencecodecul" , VAR_391 -> VAR_392 ) ; METHOD_45 ( VAR_393 -> VAR_394 , "essencecontainerul" , VAR_395 -> VAR_396 ) ; VAR_397 = & VAR_398 -> VAR_399 ; VAR_400 -> VAR_401 = ( VAR_402 -> VAR_403 == VAR_404 ) ? VAR_405 : METHOD_46 ( VAR_406 ) ; if ( VAR_407 -> VAR_408 == VAR_409 ) METHOD_47 ( VAR_410 -> VAR_411 , VAR_412 , "wrappingofstream%disunknown\\n" , VAR_413 -> VAR_414 ) ; if ( METHOD_48 ( VAR_415 , VAR_416 ) ) { METHOD_49 ( VAR_417 -> VAR_418 , VAR_419 , "brokenencryptedmxffile\\n" ) ; for ( VAR_420 = 0 ; VAR_421 < VAR_422 -> VAR_423 ; VAR_424 ++ ) { TYPE_22 * VAR_425 = VAR_426 -> VAR_427 [ VAR_428 ] ; if ( VAR_429 -> VAR_430 == VAR_431 ) { VAR_432 = & ( ( TYPE_23 * ) VAR_433 ) -> VAR_434 ; break ; } } } VAR_435 = METHOD_50 ( VAR_436 , & VAR_437 -> VAR_438 ) ; VAR_439 -> VAR_440 -> VAR_441 = ( enum VAR_442 ) VAR_443 -> VAR_444 ; if ( VAR_445 -> VAR_446 -> VAR_447 == VAR_448 ) { VAR_449 = METHOD_51 ( VAR_450 , & VAR_451 -> VAR_452 ) ; VAR_453 -> VAR_454 -> VAR_455 = ( enum VAR_456 ) VAR_457 -> VAR_458 ; } METHOD_52 ( VAR_459 -> VAR_460 , VAR_461 , "%s:UniversalLabel:" , METHOD_53 ( VAR_462 -> VAR_463 -> VAR_464 ) ) ; for ( VAR_465 = 0 ; VAR_466 < 16 ; VAR_467 ++ ) { METHOD_54 ( VAR_468 -> VAR_469 , VAR_470 , "%.2x" , VAR_471 -> VAR_472 [ VAR_473 ] ) ; if ( ! ( VAR_474 + 1 & 19 ) || VAR_475 == 5 ) METHOD_55 ( VAR_476 -> VAR_477 , VAR_478 , "." ) ; } METHOD_56 ( VAR_479 -> VAR_480 , VAR_481 , "\\n" ) ; METHOD_57 ( & VAR_482 -> VAR_483 , "file_package_umid" , VAR_484 ) ; if ( VAR_485 -> VAR_486 && VAR_487 -> VAR_488 [ 0 ] ) METHOD_58 ( & VAR_489 -> VAR_490 , "file_package_name" , VAR_491 -> VAR_492 , 0 ) ; if ( VAR_493 -> VAR_494 && VAR_495 -> VAR_496 [ 0 ] ) METHOD_59 ( & VAR_497 -> VAR_498 , "track_name" , VAR_499 -> VAR_500 , 0 ) ; METHOD_60 ( VAR_501 , VAR_502 , VAR_503 ) ; if ( VAR_504 -> VAR_505 -> VAR_506 == VAR_507 ) { VAR_508 -> VAR_509 = METHOD_61 ( VAR_510 ) ; VAR_511 = METHOD_62 ( VAR_512 , VAR_513 ) ; if ( VAR_514 -> VAR_515 -> VAR_516 == VAR_517 ) VAR_518 -> VAR_519 -> VAR_520 = VAR_521 -> VAR_522 ; VAR_523 -> VAR_524 -> VAR_525 = VAR_526 -> VAR_527 ; VAR_528 -> VAR_529 -> VAR_530 = VAR_531 -> VAR_532 ; switch ( VAR_533 -> VAR_534 ) { case VAR_535 : VAR_536 -> VAR_537 -> VAR_538 = VAR_539 ; break ; case VAR_540 : METHOD_63 ( VAR_541 -> VAR_542 , VAR_543 , "OneFieldframelayoutisn\'tcurrentlysupported\\n" ) ; break ; case VAR_544 : break ; case VAR_545 : VAR_546 -> VAR_547 -> VAR_548 = VAR_549 ; case VAR_550 : METHOD_64 ( VAR_551 -> VAR_552 , VAR_553 , "video_line_map:(%d,%d),field_dominance:%d\\n" , VAR_554 -> VAR_555 [ 0 ] , VAR_556 -> VAR_557 [ 1 ] , VAR_558 -> VAR_559 ) ; if ( ( VAR_560 -> VAR_561 [ 0 ] > 0 ) && ( VAR_562 -> VAR_563 [ 1 ] > 0 ) ) { if ( ( VAR_564 -> VAR_565 [ 0 ] + VAR_566 -> VAR_567 [ 1 ] ) % 2 ) { switch ( VAR_568 -> VAR_569 ) { case VAR_570 : case VAR_571 : VAR_572 -> VAR_573 -> VAR_574 = VAR_575 ; break ; case VAR_576 : VAR_577 -> VAR_578 -> VAR_579 = VAR_580 ; break ; default : METHOD_65 ( VAR_581 -> VAR_582 , "Fielddominance%dsupport" , VAR_583 -> VAR_584 ) ; } } else { switch ( VAR_585 -> VAR_586 ) { case VAR_587 : case VAR_588 : VAR_589 -> VAR_590 -> VAR_591 = VAR_592 ; break ; case VAR_593 : VAR_594 -> VAR_595 -> VAR_596 = VAR_597 ; break ; default : METHOD_66 ( VAR_598 -> VAR_599 , "Fielddominance%dsupport" , VAR_600 -> VAR_601 ) ; } } } VAR_602 -> VAR_603 -> VAR_604 *= 2 ; break ; default : METHOD_67 ( VAR_605 -> VAR_606 , VAR_607 , "Unknownframelayouttype:%d\\n" , VAR_608 -> VAR_609 ) ; } if ( VAR_610 -> VAR_611 -> VAR_612 == VAR_613 ) { VAR_614 -> VAR_615 -> VAR_616 = VAR_617 -> VAR_618 ; if ( VAR_619 -> VAR_620 -> VAR_621 == VAR_622 ) { VAR_623 = METHOD_68 ( VAR_624 , & VAR_625 -> VAR_626 ) ; VAR_627 -> VAR_628 -> VAR_629 = ( enum VAR_630 ) VAR_631 -> VAR_632 ; if ( VAR_633 -> VAR_634 -> VAR_635 == VAR_636 ) { VAR_637 -> VAR_638 -> VAR_639 = METHOD_69 ( VAR_640 , & VAR_641 -> VAR_642 ) -> VAR_643 ; if ( ! VAR_644 -> VAR_645 -> VAR_646 ) { if ( VAR_647 -> VAR_648 == 2 && VAR_649 -> VAR_650 == 1 && VAR_651 -> VAR_652 == 8 ) { VAR_653 -> VAR_654 -> VAR_655 = VAR_656 ; } } } } } VAR_657 -> VAR_658 = VAR_659 ; if ( VAR_660 -> VAR_661 -> VAR_662 ) { METHOD_70 ( & VAR_663 -> VAR_664 , "material_track_origin" , VAR_665 -> VAR_666 -> VAR_667 , 0 ) ; } if ( VAR_668 -> VAR_669 -> VAR_670 ) { METHOD_71 ( & VAR_671 -> VAR_672 , "source_track_origin" , VAR_673 -> VAR_674 -> VAR_675 , 0 ) ; } if ( VAR_676 -> VAR_677 . VAR_678 && VAR_679 -> VAR_680 . VAR_681 ) VAR_682 -> VAR_683 = VAR_684 -> VAR_685 ; } else if ( VAR_686 -> VAR_687 -> VAR_688 == VAR_689 ) { VAR_690 = METHOD_72 ( VAR_691 , VAR_692 ) ; if ( VAR_693 -> VAR_694 -> VAR_695 == VAR_696 || ( VAR_697 -> VAR_698 -> VAR_699 == VAR_700 && ( enum VAR_701 ) VAR_702 -> VAR_703 != VAR_704 ) ) VAR_705 -> VAR_706 -> VAR_707 = ( enum VAR_708 ) VAR_709 -> VAR_710 ; VAR_711 -> VAR_712 -> VAR_713 = VAR_714 -> VAR_715 ; VAR_716 -> VAR_717 -> VAR_718 = VAR_719 -> VAR_720 ; if ( VAR_721 -> VAR_722 . VAR_723 > 0 ) { VAR_724 -> VAR_725 -> VAR_726 = VAR_727 -> VAR_728 . VAR_729 / VAR_730 -> VAR_731 . VAR_732 ; METHOD_73 ( VAR_733 , 64 , VAR_734 -> VAR_735 . VAR_736 , VAR_737 -> VAR_738 . VAR_739 ) ; } else { METHOD_74 ( VAR_740 -> VAR_741 , VAR_742 , "invalidsamplerate(%d/%d)" "foundforstream%d,timebaseforcedto1/48000\\n" , VAR_743 -> VAR_744 . VAR_745 , VAR_746 -> VAR_747 . VAR_748 , VAR_749 -> VAR_750 ) ; METHOD_75 ( VAR_751 , 64 , 1 , 48000 ) ; } if ( VAR_752 -> VAR_753 != VAR_754 ) VAR_755 -> VAR_756 = METHOD_76 ( VAR_757 -> VAR_758 , METHOD_77 ( VAR_759 -> VAR_760 ) , VAR_761 -> VAR_762 ) ; if ( VAR_763 -> VAR_764 -> VAR_765 == VAR_766 ) { if ( VAR_767 -> VAR_768 > 16 && VAR_769 -> VAR_770 <= 24 ) VAR_771 -> VAR_772 -> VAR_773 = VAR_774 ; else if ( VAR_775 -> VAR_776 == 32 ) VAR_777 -> VAR_778 -> VAR_779 = VAR_780 ; } else if ( VAR_781 -> VAR_782 -> VAR_783 == VAR_784 ) { if ( VAR_785 -> VAR_786 > 16 && VAR_787 -> VAR_788 <= 24 ) VAR_789 -> VAR_790 -> VAR_791 = VAR_792 ; else if ( VAR_793 -> VAR_794 == 32 ) VAR_795 -> VAR_796 -> VAR_797 = VAR_798 ; } else if ( VAR_799 -> VAR_800 -> VAR_801 == VAR_802 ) { VAR_803 -> VAR_804 = VAR_805 ; } } else if ( VAR_806 -> VAR_807 -> VAR_808 == VAR_809 ) { enum VAR_810 VAR_811 ; VAR_812 = METHOD_78 ( VAR_813 , VAR_814 ) ; if ( VAR_815 -> VAR_816 -> VAR_817 == VAR_818 ) VAR_819 -> VAR_820 -> VAR_821 = VAR_822 -> VAR_823 ; VAR_824 = METHOD_79 ( VAR_825 -> VAR_826 -> VAR_827 ) ; if ( VAR_828 == VAR_829 ) VAR_830 -> VAR_831 -> VAR_832 = VAR_833 ; if ( VAR_834 -> VAR_835 ) METHOD_80 ( & VAR_836 -> VAR_837 , "data_type" , VAR_838 -> VAR_839 , 0 ) ; } if ( VAR_840 -> VAR_841 ) { if ( ! METHOD_81 ( VAR_842 -> VAR_843 , VAR_844 -> VAR_845 ) ) { METHOD_82 ( VAR_846 -> VAR_847 -> VAR_848 , VAR_849 -> VAR_850 , VAR_851 -> VAR_852 ) ; } } else if ( VAR_853 -> VAR_854 -> VAR_855 == VAR_856 ) { TYPE_24 VAR_857 = METHOD_83 ( VAR_858 , & VAR_859 -> VAR_860 ) -> VAR_861 ; if ( VAR_862 ) VAR_863 -> VAR_864 -> VAR_865 = VAR_866 ; VAR_867 = METHOD_84 ( VAR_868 ) ; if ( VAR_869 < 0 ) return VAR_870 ; } if ( VAR_871 -> VAR_872 -> VAR_873 != VAR_874 && VAR_875 -> VAR_876 != VAR_877 ) { VAR_878 -> VAR_879 = VAR_880 ; } } VAR_881 = 0 ; VAR_882 : return VAR_883 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ VAR_2 ] ; TYPE_3 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , sizeof ( VAR_6 ) , "%s/%s" , VAR_7 , STRUCT_OR_UNION_2 -> VAR_8 ) ; if ( VAR_9 >= sizeof ( VAR_10 ) ) { METHOD_2 ( "pathnametoolong" ) ; return - 1 ; }  return METHOD_3 ( STRUCT_OR_UNION_3 , VAR_11 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { unsigned TYPE_2 VAR_1 [ 10 ] ; METHOD_1 ( VAR_2 , 0 , sizeof ( VAR_3 ) ) ; METHOD_2 ( VAR_4 , "pb" , 0 , VAR_5 , 10 ) ; if ( VAR_6 [ 0 ] == 'I' && VAR_7 [ 1 ] == 'D' && VAR_8 [ 2 ] == '3' ) { TYPE_3 VAR_9 = VAR_10 [ 6 ] & 0x7f ; VAR_11 = ( VAR_12 << 7 ) | ( VAR_13 [ 7 ] & 0x7f ) ; VAR_14 = ( VAR_15 << 7 ) | ( VAR_16 [ 8 ] & 0x7f ) ; VAR_17 = ( VAR_18 << 7 ) | ( VAR_19 [ 9 ] & 0x7f ) ; METHOD_3 ( VAR_20 , "ID3length:%d\\n--------------------\\n" , VAR_21 ) ; if ( VAR_22 < 0 ) return 0 ; VAR_23 -> VAR_24 += VAR_25 + 10 ;  METHOD_4 ( VAR_26 , "p" , VAR_27 -> VAR_28 ) ;  return 1 ; } ;  return 0 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , struct STRUCT_OR_UNION_1 * VAR_3 ) { const struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; TYPE_3 VAR_6 , VAR_7 , VAR_8 = 0 ; TYPE_4 VAR_9 , VAR_10 ; TYPE_5 VAR_11 ; TYPE_6 VAR_12 ; const TYPE_7 * VAR_13 ; VAR_14 -> VAR_15 = 0 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 ; METHOD_1 ( VAR_28 [ 0 ] , 4 ) ; VAR_29 -> VAR_30 = VAR_31 [ 3 ] ; VAR_32 -> VAR_33 = VAR_34 [ 3 ] & VAR_35 ; if ( METHOD_2 ( VAR_36 ) != VAR_37 ) { METHOD_3 ( ( VAR_38 , "nomagic-numberfound!" ) ) ; return 0 ; } if ( VAR_39 -> VAR_40 ) METHOD_4 ( ( VAR_41 , "%3s" , METHOD_5 ( VAR_42 , "---" , VAR_43 -> VAR_44 ) ) ) ; VAR_45 = 4 ; if ( VAR_46 -> VAR_47 > 1 ) METHOD_6 ( ( VAR_48 , "\\n\\tJuniperPCAPFlags[%s]" , METHOD_7 ( VAR_49 , "none" , VAR_50 -> VAR_51 ) ) ) ; if ( ( VAR_52 -> VAR_53 & VAR_54 ) == VAR_55 ) { VAR_56 = VAR_57 + VAR_58 ; METHOD_8 ( VAR_59 [ 0 ] , 2 ) ; VAR_60 = METHOD_9 ( VAR_61 ) ; VAR_62 += 2 ; VAR_63 += 2 ; VAR_64 += VAR_65 ; if ( VAR_66 -> VAR_67 > 1 ) METHOD_10 ( ( VAR_68 , ",PCAPExtension(s)totallength%u" , VAR_69 ) ) ; METHOD_11 ( VAR_70 [ 0 ] , VAR_71 ) ; while ( VAR_72 > VAR_73 ) { VAR_74 = * ( VAR_75 ++ ) ; VAR_76 = * ( VAR_77 ++ ) ; VAR_78 = 0 ; if ( VAR_79 == 0 || VAR_80 == 0 ) break ; if ( VAR_81 + VAR_82 > VAR_83 ) goto VAR_84 ; if ( VAR_85 -> VAR_86 > 1 ) METHOD_12 ( ( VAR_87 , "\\n\\t%sExtensionTLV%u,length%u,value" , METHOD_13 ( VAR_88 , "Unknown" , VAR_89 ) , VAR_90 , VAR_91 ) ) ; VAR_92 = METHOD_14 ( VAR_93 , VAR_94 , VAR_95 ) ; switch ( VAR_96 ) { case VAR_97 : break ; case VAR_98 : case VAR_99 : if ( VAR_100 != - 1 ) { if ( VAR_101 -> VAR_102 > 1 ) METHOD_15 ( ( VAR_103 , "%s(%u)" , METHOD_16 ( VAR_104 , "Unknown" , VAR_105 ) , VAR_106 ) ) ; } break ; case VAR_107 : case VAR_108 : if ( VAR_109 != - 1 ) { if ( VAR_110 -> VAR_111 > 1 ) METHOD_17 ( ( VAR_112 , "%s(%u)" , METHOD_18 ( VAR_113 , "Unknown" , VAR_114 ) , VAR_115 ) ) ; } break ; case VAR_116 : case VAR_117 : case VAR_118 : default : if ( VAR_119 != - 1 ) { if ( VAR_120 -> VAR_121 > 1 ) METHOD_19 ( ( VAR_122 , "%u" , VAR_123 ) ) ; } break ; } VAR_124 += VAR_125 ; VAR_126 -= VAR_127 + VAR_128 ; } if ( VAR_129 -> VAR_130 > 1 ) METHOD_20 ( ( VAR_131 , "\\n\\t-----originalpacket-----\\n\\t" ) ) ; } if ( ( VAR_132 -> VAR_133 & VAR_134 ) == VAR_135 ) { if ( VAR_136 -> VAR_137 ) METHOD_21 ( ( VAR_138 , "no-L2-hdr," ) ) ; METHOD_22 ( VAR_139 [ VAR_140 + 4 ] , 1 ) ; if ( METHOD_23 ( VAR_141 , VAR_142 + VAR_143 + 4 , VAR_144 -> VAR_145 - ( VAR_146 + 4 ) ) == 0 ) METHOD_24 ( ( VAR_147 , "noIP-hdrfound!" ) ) ; VAR_148 -> VAR_149 = VAR_150 + 4 ; return 0 ; } VAR_151 -> VAR_152 = VAR_153 ; VAR_154 += VAR_155 -> VAR_156 ; VAR_157 -> VAR_158 -= VAR_159 -> VAR_160 ; VAR_161 -> VAR_162 -= VAR_163 -> VAR_164 ; METHOD_25 ( VAR_165 [ 0 ] ) ; while ( VAR_166 -> VAR_167 != VAR_168 ) { if ( VAR_169 -> VAR_170 == VAR_171 -> VAR_172 ) { VAR_173 -> VAR_174 += VAR_175 -> VAR_176 ; switch ( VAR_177 [ 0 ] ) { case VAR_178 : VAR_179 -> VAR_180 = VAR_181 ; VAR_182 -> VAR_183 += 2 ; break ; case VAR_184 : VAR_185 -> VAR_186 = VAR_187 ; VAR_188 -> VAR_189 = 8 ; break ; default : VAR_190 -> VAR_191 = VAR_192 -> VAR_193 [ 0 ] ; break ; } TYPE_8 TYPE_9 if ( VAR_194 -> VAR_195 == TYPE_10 && ( VAR_196 [ 0 ] & VAR_197 ) == VAR_198 ) { VAR_199 -> VAR_200 = 0 ; } VAR_201 -> VAR_202 += VAR_203 -> VAR_204 ; VAR_205 -> VAR_206 -= VAR_207 -> VAR_208 ; VAR_209 -> VAR_210 -= VAR_211 -> VAR_212 ; if ( VAR_213 -> VAR_214 ) METHOD_26 ( ( VAR_215 , "%s-PIC,cookie-len%u" , VAR_216 -> VAR_217 , VAR_218 -> VAR_219 ) ) ; if ( VAR_220 -> VAR_221 > 0 ) { METHOD_27 ( VAR_222 [ 0 ] , VAR_223 -> VAR_224 ) ; if ( VAR_225 -> VAR_226 ) METHOD_28 ( ( VAR_227 , ",cookie0x" ) ) ; for ( VAR_228 = 0 ; VAR_229 < VAR_230 -> VAR_231 ; VAR_232 ++ ) { VAR_233 -> VAR_234 [ VAR_235 ] = VAR_236 [ VAR_237 ] ; if ( VAR_238 -> VAR_239 ) METHOD_29 ( ( VAR_240 , "%02x" , VAR_241 [ VAR_242 ] ) ) ; } } if ( VAR_243 -> VAR_244 ) METHOD_30 ( ( VAR_245 , ":" ) ) ;  VAR_246 -> VAR_247 = METHOD_31 ( VAR_248 + VAR_249 -> VAR_250 ) ;  break ; } ++ VAR_251 ; } VAR_252 += VAR_253 -> VAR_254 ; switch ( VAR_255 -> VAR_256 ) { TYPE_11 TYPE_12 case TYPE_13 : switch ( VAR_257 -> VAR_258 ) { case VAR_259 : VAR_260 -> VAR_261 = VAR_262 -> VAR_263 [ 1 ] ; break ; case VAR_264 : VAR_265 -> VAR_266 = ( METHOD_32 ( & VAR_267 -> VAR_268 [ 6 ] ) >> 3 ) & 0xfff ; VAR_269 -> VAR_270 = ( VAR_271 -> VAR_272 [ 5 ] ) & VAR_273 ; break ; default : VAR_274 -> VAR_275 = VAR_276 -> VAR_277 [ 0 ] ; break ; } break ; TYPE_14 TYPE_15 case TYPE_16 : switch ( VAR_278 -> VAR_279 ) { case VAR_280 : METHOD_33 ( VAR_281 [ 0 ] , 2 ) ; VAR_282 -> VAR_283 = VAR_284 -> VAR_285 [ 1 ] ; VAR_286 -> VAR_287 = METHOD_34 ( VAR_288 ) ; VAR_289 -> VAR_290 += 2 ; VAR_291 -> VAR_292 -= 2 ; VAR_293 -> VAR_294 -= 2 ; break ; case VAR_295 : VAR_296 -> VAR_297 = ( METHOD_35 ( & VAR_298 -> VAR_299 [ 6 ] ) >> 3 ) & 0xfff ; VAR_300 -> VAR_301 = ( VAR_302 -> VAR_303 [ 5 ] ) & VAR_304 ; break ; default : VAR_305 -> VAR_306 = VAR_307 -> VAR_308 [ 0 ] ; VAR_309 -> VAR_310 += 2 ; VAR_311 -> VAR_312 -= 2 ; VAR_313 -> VAR_314 -= 2 ; break ; } break ; TYPE_17 TYPE_18 case TYPE_19 : switch ( VAR_315 -> VAR_316 ) { case VAR_317 : METHOD_36 ( VAR_318 [ 0 ] , 2 ) ; VAR_319 -> VAR_320 = VAR_321 -> VAR_322 [ 1 ] ; VAR_323 -> VAR_324 = METHOD_37 ( VAR_325 ) ; VAR_326 -> VAR_327 += 2 ; VAR_328 -> VAR_329 -= 2 ; VAR_330 -> VAR_331 -= 2 ; break ; case VAR_332 : VAR_333 -> VAR_334 = ( METHOD_38 ( & VAR_335 -> VAR_336 [ 6 ] ) >> 3 ) & 0xfff ; VAR_337 -> VAR_338 = ( VAR_339 -> VAR_340 [ 5 ] ) & VAR_341 ; break ; default : VAR_342 -> VAR_343 = VAR_344 -> VAR_345 [ 0 ] ; break ; } break ; TYPE_20 TYPE_21 case TYPE_22 : METHOD_39 ( VAR_346 [ 0 ] , 4 ) ; if ( VAR_347 -> VAR_348 [ 7 ] & VAR_349 ) { VAR_350 = METHOD_40 ( VAR_351 ) ; switch ( VAR_352 ) { case 0 : case 0x08000000 : case 0x08380000 : VAR_353 -> VAR_354 += 4 ; break ; default : break ; } if ( VAR_355 -> VAR_356 ) METHOD_41 ( ( VAR_357 , "control-word0x%08x" , VAR_358 ) ) ; } break ; TYPE_23 TYPE_24 case TYPE_25 : break ; TYPE_26 TYPE_27 case TYPE_28 : break ; TYPE_29 TYPE_30 case TYPE_31 : break ; TYPE_32 TYPE_33 case TYPE_34 : break ; TYPE_35 TYPE_36 case TYPE_37 : break ; TYPE_38 TYPE_39 case TYPE_40 : break ; default : METHOD_42 ( ( VAR_359 , "UnknownJuniperDLT_type%u:" , VAR_360 -> VAR_361 ) ) ; break ; } if ( VAR_362 -> VAR_363 > 1 ) METHOD_43 ( ( VAR_364 , "hlen%u,proto0x%04x," , VAR_365 -> VAR_366 , VAR_367 -> VAR_368 ) ) ; return 1 ; VAR_369 : METHOD_44 ( ( VAR_370 , "[|juniper_hdr],length%u" , VAR_371 -> VAR_372 ) ) ; return 0 ; }
static unsigned TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , const struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_2 VAR_3 ; if IS_ENABLED ( VAR_4 ) if ( VAR_5 -> VAR_6 && ! METHOD_1 ( ( struct STRUCT_OR_UNION_2 * ) VAR_7 -> VAR_8 ) ) return VAR_9 ; VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 , METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 ) ) ; if ( VAR_17 == - VAR_18 ) return VAR_19 ;  return VAR_20 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 , * VAR_4 , * VAR_5 ;  if ( ! VAR_6 )  return 0 ; VAR_7 = METHOD_1 ( VAR_8 ) ;  VAR_9 = METHOD_2 ( VAR_10 , METHOD_3 ( VAR_11 ) , VAR_12 ) ;  if ( ! VAR_13 ) return - VAR_14 ;  VAR_15 = METHOD_4 ( VAR_16 , METHOD_5 ( VAR_17 ) , VAR_18 ) ;  if ( ! VAR_19 ) { METHOD_6 ( VAR_20 ) ; return - VAR_21 ; }  * VAR_22 = VAR_23 ;  * VAR_24 = VAR_25 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; TYPE_2 VAR_4 , VAR_5 ; if ( ! VAR_6 ) return - VAR_7 ;  VAR_8 -> VAR_9 = VAR_10 ;  switch ( VAR_11 -> VAR_12 ) { case 1 : VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; break ; case 2 : VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 ; break ; case 4 : VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; break ; TYPE_3 TYPE_4 case 8 : VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = VAR_36 ; break ; default : METHOD_1 ( VAR_37 -> VAR_38 , "Invalidregistersize:%d\\n" , VAR_39 -> VAR_40 ) ; return - VAR_41 ; } for ( VAR_42 = 0 ; VAR_43 < VAR_44 -> VAR_45 ; VAR_46 ++ ) { if ( METHOD_2 ( VAR_47 + VAR_48 * VAR_49 -> VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) == VAR_54 ) { METHOD_3 ( VAR_55 , VAR_56 ) ; return - VAR_57 ; } } VAR_58 = ( ( VAR_59 -> VAR_60 * VAR_61 -> VAR_62 ) - ( VAR_63 -> VAR_64 - VAR_65 -> VAR_66 ) ) ; VAR_67 -> VAR_68 = METHOD_4 ( VAR_69 , VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 ) { METHOD_5 ( VAR_74 , VAR_75 -> VAR_76 ) ; return - VAR_77 ; }  return 0 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; VAR_5 = 0.0 ; switch ( VAR_6 ) { case VAR_7 : break ; case VAR_8 : { VAR_9 = ( TYPE_6 ) METHOD_1 ( ( TYPE_7 ) ( VAR_10 + VAR_11 ) ) ; break ; } case VAR_12 : { VAR_13 = ( TYPE_8 ) ( VAR_14 + VAR_15 ) ; break ; } case VAR_16 : { VAR_17 = VAR_18 + VAR_19 ; VAR_20 -= ( VAR_21 + 1.0 ) * METHOD_2 ( ( TYPE_9 ) VAR_22 / ( VAR_23 + 1.0 ) ) ; break ; } case VAR_24 : {  VAR_25 = ( TYPE_10 ) ( ( TYPE_11 ) VAR_26 & ( TYPE_12 ) ( VAR_27 + 0.5 ) ) ;  break ; } case VAR_28 : { VAR_29 = ( TYPE_13 ) ( VAR_30 * ( 0.5 * METHOD_3 ( ( TYPE_14 ) ( 2.0 * VAR_31 * VAR_32 * VAR_33 * VAR_34 ) ) + 0.5 ) ) ; break ; } case VAR_35 : { VAR_36 = VAR_37 / ( VAR_38 == 0.0 ? 1.0 : VAR_39 ) ; break ; } case VAR_40 : { VAR_41 = ( TYPE_15 ) ( VAR_42 * METHOD_4 ( ( TYPE_16 ) ( VAR_43 * VAR_44 * VAR_45 ) ) ) ; break ; } case VAR_46 : { VAR_47 = ( TYPE_17 ) METHOD_5 ( VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; break ; } case VAR_52 : { VAR_53 = ( TYPE_18 ) METHOD_6 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; break ; } case VAR_58 : { VAR_59 = ( TYPE_19 ) METHOD_7 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 ) ; break ; } case VAR_64 : {  VAR_65 = ( TYPE_20 ) ( ( TYPE_21 ) VAR_66 << ( TYPE_22 ) ( VAR_67 + 0.5 ) ) ;  break ; } case VAR_68 : { if ( ( VAR_69 * VAR_70 ) >= VAR_71 ) VAR_72 = ( TYPE_23 ) ( VAR_73 * METHOD_8 ( ( TYPE_24 ) ( VAR_74 * VAR_75 * VAR_76 + 1.0 ) ) / METHOD_9 ( ( TYPE_25 ) ( VAR_77 + 1.0 ) ) ) ; break ; } case VAR_78 : { VAR_79 = ( TYPE_26 ) METHOD_10 ( ( TYPE_27 ) VAR_80 , VAR_81 ) ; break ; } case VAR_82 : { VAR_83 = ( TYPE_28 ) ( VAR_84 + VAR_85 ) ; break ; } case VAR_86 : { VAR_87 = ( TYPE_29 ) ( VAR_88 + VAR_89 ) ; break ; } case VAR_90 : { VAR_91 = ( TYPE_30 ) METHOD_11 ( ( TYPE_31 ) VAR_92 , VAR_93 ) ; break ; } case VAR_94 : { VAR_95 = ( TYPE_32 ) METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 ) ; break ; } case VAR_100 : { VAR_101 = ( TYPE_33 ) ( VAR_102 * VAR_103 ) ; break ; } case VAR_104 : {  VAR_105 = ( TYPE_34 ) ( ( TYPE_35 ) VAR_106 | ( TYPE_36 ) ( VAR_107 + 0.5 ) ) ;  break ; } case VAR_108 : { VAR_109 = ( TYPE_37 ) METHOD_13 ( VAR_110 , VAR_111 , VAR_112 , VAR_113 ) ; break ; } case VAR_114 : { VAR_115 = ( TYPE_38 ) ( VAR_116 * METHOD_14 ( ( TYPE_39 ) ( VAR_117 * VAR_118 ) , ( TYPE_40 ) VAR_119 ) ) ; break ; } case VAR_120 : {  VAR_121 = ( TYPE_41 ) ( ( TYPE_42 ) VAR_122 >> ( TYPE_43 ) ( VAR_123 + 0.5 ) ) ;  break ; } case VAR_124 : { VAR_125 = ( TYPE_44 ) ( VAR_126 * VAR_127 + VAR_128 ) ; break ; } case VAR_129 : { VAR_130 = VAR_131 ; break ; } case VAR_132 : { VAR_133 = ( TYPE_45 ) ( VAR_134 * ( 0.5 * METHOD_15 ( ( TYPE_46 ) ( 2.0 * VAR_135 * VAR_136 * VAR_137 * VAR_138 ) ) + 0.5 ) ) ; break ; } case VAR_139 : { VAR_140 = ( TYPE_47 ) ( VAR_141 - VAR_142 ) ; break ; } case VAR_143 : { VAR_144 = ( TYPE_48 ) ( VAR_145 + VAR_146 ) ; break ; } case VAR_147 : { VAR_148 = ( TYPE_49 ) ( ( ( TYPE_50 ) VAR_149 <= VAR_150 ) ? 0 : VAR_151 ) ; break ; } case VAR_152 : { VAR_153 = ( TYPE_51 ) ( ( ( TYPE_52 ) VAR_154 <= VAR_155 ) ? 0 : VAR_156 ) ; break ; } case VAR_157 : { VAR_158 = ( TYPE_53 ) ( ( ( TYPE_54 ) VAR_159 > VAR_160 ) ? VAR_161 : VAR_162 ) ; break ; } case VAR_163 : { VAR_164 = ( TYPE_55 ) METHOD_16 ( VAR_165 , VAR_166 , VAR_167 , VAR_168 ) ; break ; } case VAR_169 : {  VAR_170 = ( TYPE_56 ) ( ( TYPE_57 ) VAR_171 ^ ( TYPE_58 ) ( VAR_172 + 0.5 ) ) ;  break ; } } return ( VAR_173 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; METHOD_1 ( VAR_5 , VAR_6 , sizeof ( VAR_7 ) ) ; TYPE_6 VAR_8 = METHOD_2 ( VAR_9 , "LinkKeyType" , ( TYPE_7 ) VAR_10 ) ; VAR_11 &= METHOD_3 ( VAR_12 , "PinLength" , ( TYPE_8 ) VAR_13 ) ; VAR_14 &= METHOD_4 ( VAR_15 , "LinkKey" , VAR_16 , sizeof ( TYPE_9 ) ) ;  METHOD_5 ( ) ;  return VAR_17 ? VAR_18 : VAR_19 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 = METHOD_1 ( VAR_6 , 1 ) ; TYPE_7 VAR_7 [ VAR_8 * VAR_9 ] ; TYPE_8 * VAR_10 = VAR_11 ; TYPE_9 * VAR_12 ; TYPE_10 * VAR_13 ; register TYPE_11 * VAR_14 ; register TYPE_12 * VAR_15 ; register TYPE_13 VAR_16 ; register TYPE_14 VAR_17 ; TYPE_15 VAR_18 ; TYPE_16 VAR_19 ; if ( VAR_20 > VAR_21 ) {  if ( ! ( VAR_22 = METHOD_2 ( VAR_23 , sizeof ( TYPE_17 ) ) ) ) {  METHOD_3 ( ) ; } } if ( VAR_24 >= 2 ) { VAR_25 = ( VAR_26 + 1 - VAR_27 ) >> 1 ; VAR_28 = VAR_29 - VAR_30 ; VAR_31 = VAR_32 ; VAR_33 = VAR_34 ; VAR_35 = & VAR_36 [ ( 1 - VAR_37 ) * VAR_38 ] ; while ( VAR_39 -- > 0 ) { VAR_40 = VAR_41 ; VAR_42 = VAR_43 ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 ; ++ VAR_47 ) { * VAR_48 = * VAR_49 ; ++ VAR_50 ; ++ VAR_51 ; } VAR_52 += VAR_53 ; VAR_54 += VAR_55 << 1 ; } VAR_56 = & VAR_57 [ ( 1 - VAR_58 ) * VAR_59 ] ; VAR_60 = & VAR_61 [ ( 2 - VAR_62 ) * VAR_63 ] ; VAR_64 = VAR_65 - VAR_66 - ( ! VAR_67 ) ; while ( VAR_68 -- > 0 ) { VAR_69 = VAR_70 ; VAR_71 = VAR_72 ; for ( VAR_73 = 0 ; VAR_74 < VAR_75 ; ++ VAR_76 ) { * VAR_77 = * VAR_78 ; ++ VAR_79 ; ++ VAR_80 ; } VAR_81 += VAR_82 ; VAR_83 += VAR_84 << 1 ; } VAR_85 = & VAR_86 [ VAR_87 * VAR_88 ] ; VAR_89 = VAR_90 ; VAR_91 = VAR_92 ; while ( VAR_93 -- > 0 ) { VAR_94 = VAR_95 ; VAR_96 = VAR_97 ; for ( VAR_98 = 0 ; VAR_99 < VAR_100 ; ++ VAR_101 ) { * VAR_102 = * VAR_103 ; ++ VAR_104 ; ++ VAR_105 ; } VAR_106 += VAR_107 ; VAR_108 += VAR_109 ; } } if ( VAR_110 != VAR_111 ) { METHOD_4 ( VAR_112 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ;  VAR_4 * VAR_5 ;  if ( ! VAR_6 || ! VAR_7 || VAR_8 > VAR_9 ) VAR_10 = VAR_11 ; else if ( ! ( VAR_12 -> VAR_13 & VAR_14 ) ) VAR_15 = VAR_16 ; else { VAR_17 = VAR_18 ;  for ( VAR_19 = VAR_20 -> VAR_21 . VAR_22 ; VAR_23 -> VAR_24 >= 0 ; VAR_25 ++ ) {  if ( VAR_26 -> VAR_27 == ( TYPE_5 ) VAR_28 ) { * VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 = VAR_36 ; break ; } } } return VAR_37 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { if ( ! VAR_3 -> VAR_4 . VAR_5 . VAR_6 ) {  METHOD_1 ( VAR_7 -> VAR_8 , "GSOsizemustnotbezero.\\n" ) ;  return - VAR_9 ; } if ( VAR_10 -> VAR_11 . VAR_12 . VAR_13 != VAR_14 ) {  METHOD_2 ( VAR_15 -> VAR_16 , "BadGSOtype%d.\\n" , VAR_17 -> VAR_18 . VAR_19 . VAR_20 ) ;  return - VAR_21 ; } METHOD_3 ( VAR_22 ) -> VAR_23 = VAR_24 -> VAR_25 . VAR_26 . VAR_27 ; METHOD_4 ( VAR_28 ) -> VAR_29 = VAR_30 ; METHOD_5 ( VAR_31 ) -> VAR_32 |= VAR_33 ; METHOD_6 ( VAR_34 ) -> VAR_35 = 0 ; return 0 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { static TYPE_2 VAR_1 = 0 ; TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 ; const TYPE_4 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 ; switch ( VAR_9 ) { case VAR_10 : return 1 ; case VAR_11 : METHOD_1 ( VAR_12 , 0 ) ; METHOD_2 ( VAR_13 ) ; METHOD_3 ( VAR_14 ) ; METHOD_4 ( VAR_15 ) ; return 1 ; case VAR_16 : METHOD_5 ( VAR_17 ) ; break ; case VAR_18 : METHOD_6 ( VAR_19 , "\\r\\n***pulseDTR***\\r\\n" ) ; if ( METHOD_7 ( VAR_20 ) < 0 ) METHOD_8 ( VAR_21 , "***FAILED\\r\\n" ) ; break ; case VAR_22 : if ( VAR_23 ) VAR_24 = METHOD_9 ( VAR_25 ) ; else VAR_26 = METHOD_10 ( VAR_27 ) ; if ( VAR_28 >= 0 ) VAR_29 = ! VAR_30 ; METHOD_11 ( VAR_31 , "\\r\\n***DTR:%s***\\r\\n" , VAR_32 ? "up" : "down" ) ; break ; case VAR_33 : case VAR_34 : if ( VAR_35 == VAR_36 ) VAR_37 . VAR_38 = METHOD_12 ( VAR_39 . VAR_40 ) ; else VAR_41 . VAR_42 = METHOD_13 ( VAR_43 . VAR_44 ) ; METHOD_14 ( VAR_45 , VAR_46 . VAR_47 ) ; VAR_48 . VAR_49 = 0 ; METHOD_15 ( VAR_50 ) ; METHOD_16 ( VAR_51 ) ; VAR_52 = METHOD_17 ( VAR_53 , VAR_54 ) ; if ( VAR_55 . VAR_56 != VAR_57 ) { METHOD_18 ( VAR_58 , "\\r\\n***baud:%d(%d)***\\r\\n" , VAR_59 . VAR_60 , VAR_61 ) ; } else { METHOD_19 ( VAR_62 , "\\r\\n***baud:%d***\\r\\n" , VAR_63 . VAR_64 ) ; } METHOD_20 ( VAR_65 ) ; break ; case VAR_66 : VAR_67 . VAR_68 = METHOD_21 ( VAR_69 . VAR_70 ) ; METHOD_22 ( VAR_71 , VAR_72 . VAR_73 ) ; VAR_74 . VAR_75 = 0 ; METHOD_23 ( VAR_76 ) ; METHOD_24 ( VAR_77 ) ; VAR_78 = METHOD_25 ( VAR_79 ) ; if ( VAR_80 . VAR_81 != VAR_82 ) { METHOD_26 ( VAR_83 , "\\r\\n***flow:%s(%s)***\\r\\n" , VAR_84 [ VAR_85 . VAR_86 ] , VAR_87 [ VAR_88 ] ) ; } else { METHOD_27 ( VAR_89 , "\\r\\n***flow:%s***\\r\\n" , VAR_90 [ VAR_91 . VAR_92 ] ) ; } break ; case VAR_93 : VAR_94 . VAR_95 = METHOD_28 ( VAR_96 . VAR_97 ) ; METHOD_29 ( VAR_98 , VAR_99 . VAR_100 ) ; VAR_101 . VAR_102 = 0 ; METHOD_30 ( VAR_103 ) ; METHOD_31 ( VAR_104 ) ; VAR_105 = METHOD_32 ( VAR_106 ) ; if ( VAR_107 . VAR_108 != VAR_109 ) { METHOD_33 ( VAR_110 , "\\r\\n***parity:%s(%s)***\\r\\n" , VAR_111 [ VAR_112 . VAR_113 ] , VAR_114 [ VAR_115 ] ) ; } else { METHOD_34 ( VAR_116 , "\\r\\n***parity:%s***\\r\\n" , VAR_117 [ VAR_118 . VAR_119 ] ) ; } break ; case VAR_120 : VAR_121 . VAR_122 = METHOD_35 ( VAR_123 . VAR_124 ) ; METHOD_36 ( VAR_125 , VAR_126 . VAR_127 ) ; VAR_128 . VAR_129 = 0 ; METHOD_37 ( VAR_130 ) ; METHOD_38 ( VAR_131 ) ; VAR_132 = METHOD_39 ( VAR_133 ) ; if ( VAR_134 . VAR_135 != VAR_136 ) { METHOD_40 ( VAR_137 , "\\r\\n***databits:%d(%d)***\\r\\n" , VAR_138 . VAR_139 , VAR_140 ) ; } else { METHOD_41 ( VAR_141 , "\\r\\n***databits:%d***\\r\\n" , VAR_142 . VAR_143 ) ; } break ; case VAR_144 : VAR_145 . VAR_146 = ! VAR_147 . VAR_148 ; METHOD_42 ( VAR_149 , "\\r\\n***localecho:%s***\\r\\n" , VAR_150 . VAR_151 ? "yes" : "no" ) ; break ; case VAR_152 : case VAR_153 : VAR_154 = ( VAR_155 == VAR_156 ) ? VAR_157 . VAR_158 : VAR_159 . VAR_160 ; if ( VAR_161 [ 0 ] == '\\0' ) { METHOD_43 ( VAR_162 , "\\r\\n***commanddisabled***\\r\\n" ) ; break ; } VAR_163 = METHOD_44 ( ) ; if ( VAR_164 == VAR_165 ) { METHOD_45 ( VAR_166 , "***cannotreadfilename***\\r\\n" ) ; break ; }  METHOD_46 ( VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ;  METHOD_47 ( VAR_171 ) ; break ; case VAR_172 : METHOD_48 ( VAR_173 ) ; METHOD_49 ( VAR_174 , "\\r\\n***breaksent***\\r\\n" ) ; break ; default : break ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  METHOD_1 ( VAR_1 -> VAR_2 ) ; if ( VAR_3 -> VAR_4 ) { METHOD_2 ( VAR_5 -> VAR_6 -> VAR_7 ) ; METHOD_3 ( VAR_8 -> VAR_9 ) ; } METHOD_4 ( VAR_10 -> VAR_11 ) ; METHOD_5 ( VAR_12 -> VAR_13 ) ; METHOD_6 ( VAR_14 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) {  struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 ; TYPE_3 VAR_7 = VAR_8 & 0xff ; TYPE_4 VAR_9 = VAR_10 >> 8 ; TYPE_5 VAR_11 ; switch ( VAR_12 ) { case VAR_13 : if ( VAR_14 & VAR_15 ) return - VAR_16 ; case VAR_17 : case VAR_18 : case VAR_19 : case VAR_20 : case VAR_21 : case VAR_22 : case VAR_23 : break ; default : return - VAR_24 ; }  if ( ! VAR_25 -> VAR_26 )   return - VAR_27 ;  if ( VAR_28 -> VAR_29 )  return - VAR_30 ;  if ( VAR_31 == VAR_32 || ( VAR_33 & VAR_34 ) ) {  VAR_35 -> VAR_36 = METHOD_2 ( sizeof ( * VAR_37 -> VAR_38 ) , VAR_39 ) ;   if ( ! VAR_40 -> VAR_41 )  return - VAR_42 ;  METHOD_3 ( & VAR_43 -> VAR_44 -> VAR_45 , 0 ) ;   METHOD_4 ( & VAR_46 -> VAR_47 -> VAR_48 , 0 ) ;   METHOD_5 ( & VAR_49 -> VAR_50 -> VAR_51 , 0 ) ;   }  METHOD_6 ( & VAR_52 ) ; VAR_53 = VAR_54 ; METHOD_7 ( VAR_55 , & VAR_56 , VAR_57 ) { if ( VAR_58 -> VAR_59 == VAR_60 && METHOD_8 ( & VAR_61 -> VAR_62 ) == METHOD_9 ( VAR_63 ) ) { VAR_64 = VAR_65 ; break ; } } VAR_66 = - VAR_67 ; if ( VAR_68 && VAR_69 -> VAR_70 != VAR_71 ) goto VAR_72 ; if ( ! VAR_73 ) { VAR_74 = - VAR_75 ; VAR_76 = METHOD_10 ( sizeof ( * VAR_77 ) , VAR_78 ) ; if ( ! VAR_79 ) goto VAR_80 ; METHOD_11 ( & VAR_81 -> VAR_82 , METHOD_12 ( VAR_83 ) ) ; VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; VAR_90 -> VAR_91 = VAR_92 ; METHOD_13 ( & VAR_93 -> VAR_94 ) ; METHOD_14 ( & VAR_95 -> VAR_96 ) ; METHOD_15 ( & VAR_97 -> VAR_98 , 0 ) ; METHOD_16 ( VAR_99 ) ; VAR_100 -> VAR_101 . VAR_102 = VAR_103 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 . VAR_108 = VAR_109 -> VAR_110 . VAR_111 ; VAR_112 -> VAR_113 . VAR_114 = VAR_115 ; VAR_116 -> VAR_117 . VAR_118 = VAR_119 ; VAR_120 -> VAR_121 . VAR_122 = VAR_123 ; METHOD_17 ( & VAR_124 -> VAR_125 ) ; METHOD_18 ( & VAR_126 -> VAR_127 , & VAR_128 ) ; } VAR_129 = - VAR_130 ; if ( VAR_131 -> VAR_132 == VAR_133 && VAR_134 -> VAR_135 . VAR_136 == VAR_137 -> VAR_138 . VAR_139 && VAR_140 -> VAR_141 . VAR_142 == VAR_143 -> VAR_144 . VAR_145 ) { VAR_146 = - VAR_147 ; if ( METHOD_19 ( & VAR_148 -> VAR_149 ) < VAR_150 ) { METHOD_20 ( & VAR_151 -> VAR_152 ) ; VAR_153 -> VAR_154 = VAR_155 ; METHOD_21 ( & VAR_156 -> VAR_157 ) ; METHOD_22 ( VAR_158 , VAR_159 ) ; VAR_160 = 0 ; } } VAR_161 :  METHOD_23 ( & VAR_162 ) ;   if ( VAR_163 ) {  METHOD_24 ( VAR_164 -> VAR_165 ) ; VAR_166 -> VAR_167 = VAR_168 ; } return VAR_169 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 , * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; VAR_9 = METHOD_2 ( METHOD_3 ( VAR_10 ) , VAR_11 , VAR_12 , VAR_13 -> VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) goto VAR_17 ; METHOD_4 ( VAR_18 , VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) ; METHOD_6 ( VAR_23 , VAR_24 ) ; VAR_25 = ( struct STRUCT_OR_UNION_7 * ) VAR_26 ; METHOD_7 ( VAR_27 ) -> VAR_28 = & VAR_29 -> VAR_30 ; METHOD_8 ( VAR_31 ) -> VAR_32 = METHOD_9 ( VAR_33 ) -> VAR_34 ; VAR_35 = METHOD_10 ( VAR_36 ) ;  METHOD_11 ( VAR_37 , VAR_38 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ;  METHOD_12 ( ) ; VAR_39 = METHOD_13 ( VAR_40 -> VAR_41 ) ; if ( VAR_42 ) VAR_43 = METHOD_14 ( VAR_44 , VAR_45 ) ; METHOD_15 ( VAR_46 -> VAR_47 , VAR_48 ) ; METHOD_16 ( ) ; METHOD_17 ( & VAR_49 -> VAR_50 . VAR_51 , VAR_52 ) ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; METHOD_18 ( VAR_57 ) ; if ( VAR_58 -> VAR_59 -> METHOD_19 ( VAR_60 ) ) { METHOD_20 ( VAR_61 ) ; VAR_62 = VAR_63 ; } VAR_64 : return VAR_65 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { TYPE_1 VAR_1 , VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ; VAR_10 = METHOD_2 ( VAR_11 , sizeof ( * VAR_12 ) , VAR_13 ) ; if ( ! VAR_14 ) return VAR_15 ; METHOD_3 ( VAR_16 , VAR_17 ) ; VAR_18 = VAR_19 ; METHOD_4 ( VAR_20 , VAR_21 , METHOD_5 ( VAR_22 ) , VAR_23 ) { VAR_24 = METHOD_6 ( VAR_25 ) ; if ( ! VAR_26 ) { VAR_27 = VAR_28 ; METHOD_7 ( VAR_29 , VAR_30 , METHOD_8 ( VAR_31 ) , VAR_32 ) { VAR_33 = METHOD_9 ( VAR_34 ) ; if ( VAR_35 ) METHOD_10 ( VAR_36 ) ; }  return VAR_37 ;  } VAR_38 = min_t ( TYPE_2 , VAR_39 , VAR_40 ) ; VAR_41 -= VAR_42 ; METHOD_11 ( VAR_43 , VAR_44 , VAR_45 , 0 ) ; } return VAR_46 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  fprintf ( VAR_3 , "%ddecodedframes/%dshowedframesin%" PRId64 "us(%.2ffps)\\r" , VAR_4 , VAR_5 , VAR_6 , ( TYPE_4 ) VAR_7 * 1000000.0 / ( TYPE_5 ) VAR_8 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 ; TYPE_3 VAR_3 , VAR_4 , VAR_5 , VAR_6 ; unsigned TYPE_4 * VAR_7 ; TYPE_5 * VAR_8 ; TYPE_6 VAR_9 , VAR_10 ; TYPE_7 VAR_11 ; VAR_12 ; TYPE_8 * VAR_13 = VAR_14 -> VAR_15 ; VAR_16 * VAR_17 ; METHOD_1 ( VAR_18 ) ; if VAR_19 >= VAR_20 VAR_21 * VAR_22 ; VAR_23 * VAR_24 ; if ( METHOD_2 ( VAR_25 ) >= 2 ) METHOD_3 ( METHOD_4 ( VAR_26 ) , "\\t->dbd_st_fetch\\n" ) ; if VAR_27 if ( VAR_28 -> VAR_29 ) { if ( METHOD_5 ( VAR_30 , & VAR_31 -> VAR_32 ) <= 0 ) { return VAR_33 ; } } if VAR_34 >= VAR_35 if ( VAR_36 -> VAR_37 ) { if ( ! METHOD_6 ( VAR_38 ) ) { METHOD_7 ( VAR_39 , VAR_40 , "nostatementexecuting\\n" , VAR_41 ) ; return VAR_42 ; } if ( VAR_43 -> VAR_44 ) { METHOD_8 ( VAR_45 , VAR_46 , "fetch()butfetchalreadydone" , VAR_47 ) ; return VAR_48 ; } if ( ! VAR_49 -> VAR_50 ) { if ( ! METHOD_9 ( VAR_51 , VAR_52 ) ) { METHOD_10 ( VAR_53 , VAR_54 , "Errorwhiledescriberesultset." , VAR_55 ) ; return VAR_56 ; } } } VAR_57 = METHOD_11 ( VAR_58 , VAR_59 ) ; if ( METHOD_12 ( VAR_60 ) >= 2 ) METHOD_13 ( METHOD_14 ( VAR_61 ) , "\\t\\tdbd_st_fetchfor%p,chopblanks%d\\n" , VAR_62 , VAR_63 ) ; if ( ! VAR_64 -> VAR_65 ) { METHOD_15 ( VAR_66 , VAR_67 , "fetch()withoutexecute()" , VAR_68 ) ; return VAR_69 ; } VAR_70 -> VAR_71 -> VAR_72 . VAR_73 = 0 ; if VAR_74 >= VAR_75 if ( VAR_76 -> VAR_77 ) { if ( METHOD_16 ( VAR_78 ) >= 2 ) METHOD_17 ( METHOD_18 ( VAR_79 ) , "\\t\\tdbd_st_fetchcallingmysql_fetch\\n" ) ; if ( ( VAR_80 = METHOD_19 ( VAR_81 -> VAR_82 ) ) ) { if ( VAR_83 == 1 ) METHOD_20 ( VAR_84 , METHOD_21 ( VAR_85 -> VAR_86 ) , METHOD_22 ( VAR_87 -> VAR_88 ) , METHOD_23 ( VAR_89 -> VAR_90 ) ) ; if VAR_91 >= VAR_92 if ( VAR_93 == VAR_94 ) { if ( METHOD_24 ( VAR_95 ) >= 2 ) METHOD_25 ( METHOD_26 ( VAR_96 ) , "\\t\\tdbd_st_fetchdatatruncated\\n" ) ; goto VAR_97 ; } if ( VAR_98 == VAR_99 ) { VAR_100 -> VAR_101 = METHOD_27 ( VAR_102 -> VAR_103 ) ; VAR_104 -> VAR_105 = 1 ; if ( METHOD_28 ( VAR_106 ) >= 2 ) METHOD_29 ( METHOD_30 ( VAR_107 ) , "\\t\\tdbd_st_fetchnodata\\n" ) ; } METHOD_31 ( VAR_108 , VAR_109 ) ; return VAR_110 ; } VAR_111 : VAR_112 -> VAR_113 ++ ; VAR_114 = METHOD_32 ( VAR_115 ) -> METHOD_33 ( VAR_116 ) ; VAR_117 = METHOD_34 ( VAR_118 -> VAR_119 ) ; if ( METHOD_35 ( VAR_120 ) >= 2 ) METHOD_36 ( METHOD_37 ( VAR_121 ) , "\\t\\tdbd_st_fetchcalledmysql_fetch,rc%dnum_fields%d\\n" , VAR_122 , VAR_123 ) ; for ( VAR_124 = VAR_125 -> VAR_126 , VAR_127 = VAR_128 -> VAR_129 , VAR_130 = 0 ; VAR_131 < VAR_132 ; VAR_133 ++ , VAR_134 ++ , VAR_135 ++ ) { TYPE_9 * VAR_136 = METHOD_38 ( VAR_137 ) [ VAR_138 ] ; TYPE_10 VAR_139 ; if ( VAR_140 -> VAR_141 ) ( TYPE_11 ) METHOD_39 ( VAR_142 ) ; else { if ( VAR_143 -> VAR_144 > VAR_145 -> VAR_146 || VAR_147 -> VAR_148 ) { if ( METHOD_40 ( VAR_149 ) >= 2 ) METHOD_41 ( METHOD_42 ( VAR_150 ) , "\\t\\tRefetchBLOB/TEXTcolumn:%d,length:%lu,error:%d\\n" , VAR_151 , VAR_152 -> VAR_153 , VAR_154 -> VAR_155 ) ; Renew ( VAR_156 -> VAR_157 , VAR_158 -> VAR_159 , TYPE_12 ) ; VAR_160 -> VAR_161 = VAR_162 -> VAR_163 ;  VAR_164 -> VAR_165 = ( TYPE_13 * ) VAR_166 -> VAR_167 ;  if ( METHOD_43 ( VAR_168 ) >= 2 ) { TYPE_14 VAR_169 ; TYPE_15 VAR_170 = METHOD_44 ( * VAR_171 -> VAR_172 , VAR_173 -> VAR_174 ) ; TYPE_16 * VAR_175 = ( TYPE_17 * ) VAR_176 -> VAR_177 ; METHOD_45 ( METHOD_46 ( VAR_178 ) , "\\t\\tbeforebuffer->buffer:" ) ; for ( VAR_179 = 0 ; VAR_180 < VAR_181 ; VAR_182 ++ ) { METHOD_47 ( METHOD_48 ( VAR_183 ) , "%c" , * VAR_184 ++ ) ; } METHOD_49 ( METHOD_50 ( VAR_185 ) , "\\n" ) ; } if ( METHOD_51 ( VAR_186 -> VAR_187 , VAR_188 , VAR_189 , 0 ) ) METHOD_52 ( VAR_190 , METHOD_53 ( VAR_191 -> VAR_192 ) , METHOD_54 ( VAR_193 -> VAR_194 ) , METHOD_55 ( VAR_195 -> VAR_196 ) ) ; if ( METHOD_56 ( VAR_197 ) >= 2 ) { TYPE_18 VAR_198 ; TYPE_19 VAR_199 = METHOD_57 ( * VAR_200 -> VAR_201 , VAR_202 -> VAR_203 ) ; TYPE_20 * VAR_204 = ( TYPE_21 * ) VAR_205 -> VAR_206 ; METHOD_58 ( METHOD_59 ( VAR_207 ) , "\\t\\tafterbuffer->buffer:" ) ; for ( VAR_208 = 0 ; VAR_209 < VAR_210 ; VAR_211 ++ ) { METHOD_60 ( METHOD_61 ( VAR_212 ) , "%c" , * VAR_213 ++ ) ; } METHOD_62 ( METHOD_63 ( VAR_214 ) , "\\n" ) ; } } switch ( VAR_215 -> VAR_216 ) { case VAR_217 : if ( METHOD_64 ( VAR_218 ) >= 2 ) METHOD_65 ( METHOD_66 ( VAR_219 ) , "\\t\\tst_fetchdoubledata%f\\n" , VAR_220 -> VAR_221 ) ; METHOD_67 ( VAR_222 , VAR_223 -> VAR_224 ) ; break ; case VAR_225 : case VAR_226 : if ( METHOD_68 ( VAR_227 ) >= 2 ) METHOD_69 ( METHOD_70 ( VAR_228 ) , "\\t\\tst_fetchintdata%" IVdf ",unsigned?%d\\n" , VAR_229 -> VAR_230 , VAR_231 -> VAR_232 ) ; if ( VAR_233 -> VAR_234 ) METHOD_71 ( VAR_235 , VAR_236 -> VAR_237 ) ; else METHOD_72 ( VAR_238 , VAR_239 -> VAR_240 ) ; break ; case VAR_241 : METHOD_73 ( VAR_242 , VAR_243 -> VAR_244 , VAR_245 -> VAR_246 ) ; break ; default : if ( METHOD_74 ( VAR_247 ) >= 2 ) METHOD_75 ( METHOD_76 ( VAR_248 ) , "\\t\\tERRORINst_fetch_string" ) ; VAR_249 = VAR_250 -> VAR_251 ; if ( VAR_252 ) { if ( VAR_253 -> VAR_254 != 63 ) while ( VAR_255 && VAR_256 -> VAR_257 [ VAR_258 - 1 ] == '' ) { -- VAR_259 ; } } METHOD_77 ( VAR_260 , VAR_261 -> VAR_262 , VAR_263 ) ; if d ( METHOD_78 ) && VAR_264 >= VAR_265 if VAR_266 >= VAR_267 if ( ( VAR_268 -> VAR_269 || VAR_270 -> VAR_271 ) && VAR_272 -> VAR_273 != 63 ) else if ( ( VAR_274 -> VAR_275 || VAR_276 -> VAR_277 ) && ! ( VAR_278 -> VAR_279 & VAR_280 ) ) METHOD_79 ( VAR_281 ) ; break ; } } } if ( METHOD_80 ( VAR_282 ) >= 2 ) METHOD_81 ( METHOD_82 ( VAR_283 ) , "\\t<-dbd_st_fetch,%dcols\\n" , VAR_284 ) ; return VAR_285 ; } else { VAR_286 -> VAR_287 ++ ; if ( METHOD_83 ( VAR_288 ) >= 2 ) { METHOD_84 ( METHOD_85 ( VAR_289 ) , "\\tdbd_st_fetchresultsetdetails\\n" ) ; METHOD_86 ( METHOD_87 ( VAR_290 ) , "\\timp_sth->result=%p\\n" , VAR_291 -> VAR_292 ) ; METHOD_88 ( METHOD_89 ( VAR_293 ) , "\\tmysql_num_fields=%u\\n" , METHOD_90 ( VAR_294 -> VAR_295 ) ) ; METHOD_91 ( METHOD_92 ( VAR_296 ) , "\\tmysql_num_rows=%llu\\n" , METHOD_93 ( VAR_297 -> VAR_298 ) ) ; METHOD_94 ( METHOD_95 ( VAR_299 ) , "\\tmysql_affected_rows=%llu\\n" , METHOD_96 ( VAR_300 -> VAR_301 ) ) ; METHOD_97 ( METHOD_98 ( VAR_302 ) , "\\tdbd_st_fetchfor%p,currow=%d\\n" , VAR_303 , VAR_304 -> VAR_305 ) ; } if ( ! ( VAR_306 = METHOD_99 ( VAR_307 -> VAR_308 ) ) ) { if ( METHOD_100 ( VAR_309 ) >= 2 ) { METHOD_101 ( METHOD_102 ( VAR_310 ) , "\\tdbd_st_fetch,nomorerowstofetch" ) ; } if ( METHOD_103 ( VAR_311 -> VAR_312 ) ) METHOD_104 ( VAR_313 , METHOD_105 ( VAR_314 -> VAR_315 ) , METHOD_106 ( VAR_316 -> VAR_317 ) , METHOD_107 ( VAR_318 -> VAR_319 ) ) ; if VAR_320 >= VAR_321 if ( ! METHOD_108 ( VAR_322 ) ) METHOD_109 ( VAR_323 , VAR_324 ) ; return VAR_325 ; } VAR_326 = METHOD_110 ( VAR_327 -> VAR_328 ) ; VAR_329 = METHOD_111 ( VAR_330 -> VAR_331 ) ; VAR_332 = METHOD_112 ( VAR_333 -> VAR_334 ) ; if ( ( VAR_335 = METHOD_113 ( VAR_336 ) ) != VAR_337 ) { VAR_338 = METHOD_114 ( VAR_339 ) + 1 ; if ( VAR_340 != VAR_341 ) { if ( METHOD_115 ( VAR_342 ) >= 2 ) METHOD_116 ( METHOD_117 ( VAR_343 ) , "\\t<-dbd_st_fetch,sizeofresultsarray(%d)!=num_fields(%d)\\n" , VAR_344 , VAR_345 ) ; if ( METHOD_118 ( VAR_346 ) >= 2 ) METHOD_119 ( METHOD_120 ( VAR_347 ) , "\\t<-dbd_st_fetch,resultfields(%d)\\n" , METHOD_121 ( VAR_348 ) ) ; VAR_349 = METHOD_122 ( VAR_350 ) ; if ( VAR_351 ) METHOD_123 ( VAR_352 ) ; while ( VAR_353 < VAR_354 ) { METHOD_124 ( VAR_355 , VAR_356 ++ , METHOD_125 ( 0 ) ) ; } while ( VAR_357 > VAR_358 ) { METHOD_126 ( METHOD_127 ( VAR_359 ) ) ; VAR_360 -- ; } if ( VAR_361 ) METHOD_128 ( VAR_362 ) ; } } VAR_363 = METHOD_129 ( VAR_364 ) -> METHOD_130 ( VAR_365 ) ; for ( VAR_366 = 0 ; VAR_367 < VAR_368 ; ++ VAR_369 ) { TYPE_22 * VAR_370 = VAR_371 [ VAR_372 ] ; TYPE_23 * VAR_373 = METHOD_131 ( VAR_374 ) [ VAR_375 ] ; if ( VAR_376 ) { TYPE_24 VAR_377 = VAR_378 [ VAR_379 ] ; if ( VAR_380 ) { while ( VAR_381 && VAR_382 [ VAR_383 - 1 ] == '' ) { -- VAR_384 ; } } METHOD_132 ( VAR_385 , VAR_386 , VAR_387 ) ; switch ( METHOD_133 ( VAR_388 [ VAR_389 ] . VAR_390 ) ) { case VAR_391 : ( TYPE_25 ) METHOD_134 ( VAR_392 ) ; METHOD_135 ( VAR_393 ) ; break ; case VAR_394 : case VAR_395 : if ( VAR_396 [ VAR_397 ] . VAR_398 & VAR_399 ) { ( TYPE_26 ) METHOD_136 ( VAR_400 ) ; METHOD_137 ( VAR_401 ) ; } else { ( TYPE_27 ) METHOD_138 ( VAR_402 ) ; METHOD_139 ( VAR_403 ) ; } break ; if VAR_404 > VAR_405 case VAR_406 : break ; default : if d ( METHOD_140 ) && VAR_407 >= VAR_408 if ( ( VAR_409 -> VAR_410 || VAR_411 -> VAR_412 ) && VAR_413 [ VAR_414 ] . VAR_415 != 63 ) METHOD_141 ( VAR_416 ) ; break ; } } else ( TYPE_28 ) METHOD_142 ( VAR_417 ) ; } if ( METHOD_143 ( VAR_418 ) >= 2 ) METHOD_144 ( METHOD_145 ( VAR_419 ) , "\\t<-dbd_st_fetch,%dcols\\n" , VAR_420 ) ; return VAR_421 ; if VAR_422 >= VAR_423 } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 ) - VAR_7 ; if ( VAR_8 > 1536 ) { METHOD_2 ( & VAR_9 -> VAR_10 ) ; return VAR_11 ; } if ( ! VAR_12 -> VAR_13 ) { METHOD_3 ( & VAR_14 -> VAR_15 ) ; return VAR_16 ; }  METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ;   METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) ;   METHOD_6 ( VAR_23 , VAR_24 , VAR_25 | VAR_26 ) ;  METHOD_7 ( VAR_27 , VAR_28 , METHOD_8 ( VAR_29 ) ) ;  METHOD_9 ( VAR_30 , VAR_31 , METHOD_10 ( VAR_32 ) ) ;   METHOD_11 ( VAR_33 , VAR_34 , METHOD_12 ( VAR_35 ) ) ;   METHOD_13 ( VAR_36 , VAR_37 , METHOD_14 ( VAR_38 ) ) ;  METHOD_15 ( VAR_39 , VAR_40 , VAR_41 ) ;  METHOD_16 ( VAR_42 , VAR_43 , METHOD_17 ( VAR_44 + VAR_45 ) ) ;   METHOD_18 ( VAR_46 , VAR_47 , METHOD_19 ( VAR_48 + VAR_49 ) ) ;   METHOD_20 ( VAR_50 , VAR_51 , VAR_52 ) ;  return VAR_53 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) { VAR_8 ; } VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) return VAR_14 ; VAR_15 = METHOD_2 ( VAR_16 -> VAR_17 ) ; if ( ! VAR_18 ) goto VAR_19 ; if ( METHOD_3 ( VAR_20 , & VAR_21 , VAR_22 ) == - 1 ) goto VAR_23 ; METHOD_4 ( VAR_24 ) ; VAR_25 = METHOD_5 ( VAR_26 -> VAR_27 ) ; if ( ! VAR_28 ) goto VAR_29 ; if ( METHOD_6 ( VAR_30 , & VAR_31 , VAR_32 ) == - 1 ) goto VAR_33 ; METHOD_7 ( VAR_34 ) ;  VAR_35 = METHOD_8 ( VAR_36 -> VAR_37 ) ;  if ( ! VAR_38 ) goto VAR_39 ; if ( METHOD_9 ( VAR_40 , & VAR_41 , VAR_42 ) < 0 ) goto VAR_43 ; METHOD_10 ( VAR_44 ) ; VAR_45 = METHOD_11 ( VAR_46 -> VAR_47 ) ; if ( ! VAR_48 ) goto VAR_49 ; if ( METHOD_12 ( VAR_50 , & VAR_51 , VAR_52 ) < 0 ) goto VAR_53 ; METHOD_13 ( VAR_54 ) ; VAR_55 = METHOD_14 ( VAR_56 -> VAR_57 ) ; if ( ! VAR_58 ) goto VAR_59 ; if ( METHOD_15 ( VAR_60 , & VAR_61 , VAR_62 ) < 0 ) goto VAR_63 ; METHOD_16 ( VAR_64 ) ; VAR_65 = METHOD_17 ( VAR_66 -> VAR_67 ) ; if ( ! VAR_68 ) goto VAR_69 ; if ( METHOD_18 ( VAR_70 , & VAR_71 , VAR_72 ) < 0 ) goto VAR_73 ; METHOD_19 ( VAR_74 ) ; return VAR_75 ; VAR_76 : METHOD_20 ( VAR_77 ) ; METHOD_21 ( VAR_78 ) ; return VAR_79 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { if ( VAR_3 != VAR_4 && * VAR_5 != '\\0' ) { if ( ! METHOD_1 ( VAR_6 , "page/get" ) ) { TYPE_4 * VAR_7 = METHOD_2 ( VAR_8 , "page" ) ; if ( VAR_9 == VAR_10 ) VAR_11 = METHOD_3 ( VAR_12 ) ;  if ( VAR_13 && ( METHOD_4 ( VAR_14 , VAR_15 ) == 0 ) )  { METHOD_5 ( VAR_16 , "%s" , METHOD_6 ( VAR_17 ) ) ; METHOD_7 ( VAR_18 ) ; return ; } } else if ( ! METHOD_8 ( VAR_19 , "page/set" ) ) { TYPE_5 * VAR_20 = VAR_21 , * VAR_22 = VAR_23 ; if ( ( ( VAR_24 = METHOD_9 ( VAR_25 , "text" ) ) != VAR_26 ) && ( ( VAR_27 = METHOD_10 ( VAR_28 , "page" ) ) != VAR_29 ) ) {  METHOD_11 ( VAR_30 , VAR_31 ) ;  METHOD_12 ( VAR_32 , "success" ) ; METHOD_13 ( VAR_33 ) ;  return ;  } } else if ( ! METHOD_14 ( VAR_34 , "page/delete" ) ) { TYPE_6 * VAR_35 = METHOD_15 ( VAR_36 , "page" ) ; if ( VAR_37 == VAR_38 ) VAR_39 = METHOD_16 ( VAR_40 ) ;  if ( VAR_41 && ( METHOD_17 ( VAR_42 ) > 0 ) )  { METHOD_18 ( VAR_43 , "success" ) ; METHOD_19 ( VAR_44 ) ; return ; } } else if ( ! METHOD_20 ( VAR_45 , "page/exists" ) ) { TYPE_7 * VAR_46 = METHOD_21 ( VAR_47 , "page" ) ; if ( VAR_48 == VAR_49 ) VAR_50 = METHOD_22 ( VAR_51 ) ;  if ( VAR_52 && ( METHOD_23 ( VAR_53 , VAR_54 ) == 0 ) )  { METHOD_24 ( VAR_55 , "success" ) ; METHOD_25 ( VAR_56 ) ; return ; } } else if ( ! METHOD_26 ( VAR_57 , "pages" ) || ! METHOD_27 ( VAR_58 , "search" ) ) { TYPE_8 * * VAR_59 = VAR_60 ; TYPE_9 VAR_61 , VAR_62 ; TYPE_10 * VAR_63 = METHOD_28 ( VAR_64 , "expr" ) ; if ( VAR_65 == VAR_66 ) VAR_67 = METHOD_29 ( VAR_68 ) ; VAR_69 = METHOD_30 ( & VAR_70 , VAR_71 ) ; if ( VAR_72 ) { for ( VAR_73 = 0 ; VAR_74 < VAR_75 ; VAR_76 ++ ) { struct STRUCT_OR_UNION_0 * VAR_77 ; TYPE_11 VAR_78 [ 64 ] ; VAR_79 = METHOD_31 ( & VAR_80 [ VAR_81 ] -> VAR_82 ) ; METHOD_32 ( VAR_83 , sizeof ( VAR_84 ) , "%Y-%m-%d%H:%M" , VAR_85 ) ; METHOD_33 ( VAR_86 , "%s\\t%s\\n" , VAR_87 [ VAR_88 ] -> VAR_89 , VAR_90 ) ; } METHOD_34 ( VAR_91 ) ; return ; } } } METHOD_35 ( VAR_92 , 500 , "Error" ) ; METHOD_36 ( VAR_93 , "<html><body>Failed</body></html>\\n" ) ; METHOD_37 ( VAR_94 ) ; return ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 , TYPE_4 VAR_4 , unsigned TYPE_5 VAR_5 , struct STRUCT_OR_UNION_3 * VAR_6 , TYPE_6 VAR_7 ) { TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 = 0 ; TYPE_9 * VAR_10 = METHOD_1 ( STRUCT_OR_UNION_4 ) -> VAR_11 ; METHOD_2 ( "ext4_ext_handle_uninitialized_extents:inode%lu,logical" "block%llu,max_blocks%u,flags%d,allocated%u" , STRUCT_OR_UNION_5 -> VAR_12 , ( unsigned TYPE_10 TYPE_11 ) VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; METHOD_3 ( STRUCT_OR_UNION_6 , VAR_17 ) ;  if ( VAR_18 == VAR_19 ) {  VAR_20 = METHOD_4 ( VAR_21 , STRUCT_OR_UNION_7 , VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 ) VAR_27 -> VAR_28 = VAR_29 ; else  METHOD_5 ( STRUCT_OR_UNION_8 , VAR_30 ) ;  goto VAR_31 ; }  if ( VAR_32 == VAR_33 ) {  VAR_34 = METHOD_6 ( VAR_35 , STRUCT_OR_UNION_9 , VAR_36 ) ; if ( VAR_37 >= 0 ) METHOD_7 ( VAR_38 , STRUCT_OR_UNION_10 , 1 ) ; goto VAR_39 ; } if ( VAR_40 & VAR_41 ) goto VAR_42 ; if ( ( VAR_43 & VAR_44 ) == 0 ) { METHOD_8 ( VAR_45 ) ; goto VAR_46 ; } VAR_47 = METHOD_9 ( VAR_48 , STRUCT_OR_UNION_11 , VAR_49 , VAR_50 , VAR_51 ) ; if ( VAR_52 >= 0 ) METHOD_10 ( VAR_53 , STRUCT_OR_UNION_12 , 1 ) ; VAR_54 : if ( VAR_55 <= 0 ) { VAR_56 = VAR_57 ; goto VAR_58 ; } else VAR_59 = VAR_60 ; METHOD_11 ( VAR_61 ) ; if ( VAR_62 > VAR_63 ) { METHOD_12 ( STRUCT_OR_UNION_13 -> VAR_64 -> VAR_65 , VAR_66 + VAR_67 , VAR_68 - VAR_69 ) ; VAR_70 = VAR_71 ; } if ( VAR_72 & VAR_73 ) METHOD_13 ( STRUCT_OR_UNION_14 , VAR_74 , 0 ) ; VAR_75 : METHOD_14 ( VAR_76 ) ; VAR_77 : if ( VAR_78 > VAR_79 ) VAR_80 = VAR_81 ; METHOD_15 ( STRUCT_OR_UNION_15 , VAR_82 ) ; VAR_83 -> VAR_84 = STRUCT_OR_UNION_16 -> VAR_85 -> VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; VAR_90 : if ( VAR_91 ) { METHOD_16 ( VAR_92 ) ; METHOD_17 ( VAR_93 ) ; } return VAR_94 ? VAR_95 : VAR_96 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { struct STRUCT_OR_UNION_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( ) ; TYPE_2 * VAR_4 = VAR_5 ; TYPE_3 * VAR_6 = VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_11 ; const TYPE_4 * VAR_12 ; const TYPE_5 * VAR_13 = VAR_14 ; TYPE_6 VAR_15 = - VAR_16 ; if ( ! VAR_17 ) return - VAR_18 ; METHOD_2 ( VAR_19 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( METHOD_3 ( VAR_20 , & VAR_21 ) < 0 ) return - VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = VAR_29 -> VAR_30 = VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = 0 ; if ( METHOD_4 ( VAR_36 , "/cgroup" ) == 0 ) { VAR_37 -> VAR_38 = VAR_39 | 00755 ; VAR_40 -> VAR_41 = 2 ; return 0 ; } VAR_42 = METHOD_5 ( VAR_43 , VAR_44 ) ; if ( ! VAR_45 ) return - VAR_46 ; VAR_47 = METHOD_6 ( VAR_48 ) ; if ( ! VAR_49 ) { VAR_50 -> VAR_51 = VAR_52 | 00755 ; VAR_53 -> VAR_54 = 2 ; return 0 ; } METHOD_7 ( VAR_55 , & VAR_56 , & VAR_57 ) ; if ( ! VAR_58 ) { VAR_59 = "/" ; VAR_60 = VAR_61 ; } else { VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } if ( METHOD_8 ( VAR_66 , VAR_67 , VAR_68 ) ) {  if ( ! METHOD_9 ( VAR_69 -> VAR_70 , VAR_71 , VAR_72 , VAR_73 ) ) {  VAR_74 -> VAR_75 = VAR_76 | 00555 ; VAR_77 -> VAR_78 = 2 ; VAR_79 = 0 ; goto VAR_80 ; } if ( ! METHOD_10 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ) { VAR_86 = - VAR_87 ; goto VAR_88 ; } VAR_89 -> VAR_90 = VAR_91 | 00755 ; VAR_92 = METHOD_11 ( VAR_93 , VAR_94 , "tasks" ) ; if ( ! VAR_95 ) { VAR_96 -> VAR_97 = VAR_98 -> VAR_99 = 0 ; } else { VAR_100 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; } METHOD_12 ( VAR_108 ) ; VAR_109 -> VAR_110 = 2 ; VAR_111 = 0 ; goto VAR_112 ; } if ( ( VAR_113 = METHOD_13 ( VAR_114 , VAR_115 , VAR_116 ) ) != VAR_117 ) { VAR_118 -> VAR_119 = VAR_120 | VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = 1 ; VAR_125 -> VAR_126 = VAR_127 -> VAR_128 ; VAR_129 -> VAR_130 = VAR_131 -> VAR_132 ; VAR_133 -> VAR_134 = 0 ; METHOD_14 ( VAR_135 ) ; if ( ! METHOD_15 ( VAR_136 -> VAR_137 , VAR_138 , VAR_139 , VAR_140 ) ) { VAR_141 = - VAR_142 ; goto VAR_143 ; } if ( ! METHOD_16 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ) { VAR_149 = - VAR_150 ; goto VAR_151 ; } VAR_152 = 0 ; } VAR_153 : METHOD_17 ( VAR_154 ) ; return VAR_155 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ,  TYPE_6 VAR_5 )  { TYPE_7 VAR_6 = 6.0e-05 * VAR_7 * VAR_8 * VAR_9 - .0067 * VAR_10 * VAR_11 + .306 * VAR_12 + .0065 ; TYPE_8 VAR_13 = ( TYPE_9 ) ( VAR_14 + .5 ) ;  TYPE_10 VAR_15 = VAR_16 -> VAR_17 >> 4 ;   TYPE_11 VAR_18 = VAR_19 -> VAR_20 >> 4 ;  unsigned TYPE_12 * VAR_21 = VAR_22 -> VAR_23 ; ;  TYPE_13 VAR_24 , VAR_25 ;  ( TYPE_14 ) VAR_26 ; ( TYPE_15 ) VAR_27 ; ( TYPE_16 ) VAR_28 ;  METHOD_1 ( VAR_29 , ( unsigned TYPE_17 ) VAR_30 , 16 * VAR_31 ) ;  for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; VAR_35 ++ ) { METHOD_2 ( VAR_36 -> VAR_37 + 16 * VAR_38 * VAR_39 -> VAR_40 , VAR_41 -> VAR_42 + 16 * VAR_43 * VAR_44 -> VAR_45 , VAR_46 -> VAR_47 , VAR_48 -> VAR_49 , VAR_50 -> VAR_51 , VAR_52 , 16 ) ;  METHOD_3 (  VAR_53 -> VAR_54 + 8 * VAR_55 * VAR_56 -> VAR_57 , VAR_58 -> VAR_59 + 8 * VAR_60 * VAR_61 -> VAR_62 , VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 -> VAR_68 , VAR_69 , 8 ) ; METHOD_4 ( VAR_70 -> VAR_71 + 8 * VAR_72 * VAR_73 -> VAR_74 , VAR_75 -> VAR_76 + 8 * VAR_77 * VAR_78 -> VAR_79 ,  VAR_80 -> VAR_81 , VAR_82 -> VAR_83 , VAR_84 -> VAR_85 , VAR_86 , 8 ) ;  } }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_4 VAR_3 ; while ( VAR_4 ) {  VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , sizeof ( * VAR_8 ) ) ;  if ( VAR_9 ) return - VAR_10 ; VAR_11 += sizeof ( struct STRUCT_OR_UNION_1 ) ; if ( ( VAR_12 -> VAR_13 & VAR_14 ) && VAR_15 -> VAR_16 ) { if ( VAR_17 -> VAR_18 >= 0 && VAR_19 -> VAR_20 <= VAR_21 -> VAR_22 ) { TYPE_5 VAR_23 = VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ; VAR_28 = METHOD_2 ( VAR_29 -> VAR_30 , VAR_31 -> VAR_32 , VAR_33 ) ; if ( VAR_34 ) return VAR_35 ; } } VAR_36 = VAR_37 -> VAR_38 ; } return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { const struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( ) ; struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> STRUCT_OR_UNION_3 ; TYPE_1 VAR_4 , VAR_5 = VAR_6 ; TYPE_2 VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = METHOD_2 ( VAR_11 , & VAR_12 , & VAR_13 ) ; if ( VAR_14 < 0 ) return VAR_15 ; if ( ! METHOD_3 ( VAR_16 ) ) { if ( VAR_17 && VAR_18 -> VAR_19 != 0 && VAR_20 -> VAR_21 == 0 ) { METHOD_4 ( VAR_22 -> VAR_23 ) ; goto VAR_24 ; } if ( VAR_25 -> VAR_26 == 0 || VAR_27 -> VAR_28 == 0 ) { VAR_29 -> VAR_30 = METHOD_5 ( VAR_31 -> VAR_32 , VAR_33 -> VAR_34 ) ; } if ( VAR_35 -> VAR_36 == 0 ) VAR_37 = VAR_38 ; } VAR_39 :  if ( ( VAR_40 -> VAR_41 != VAR_42 -> VAR_43 ||  VAR_44 -> VAR_45 != VAR_46 -> VAR_47 || ! METHOD_6 ( VAR_48 -> VAR_49 , VAR_50 -> VAR_51 ) ) && VAR_52 -> VAR_53 & ~ VAR_54 ) { if ( ! METHOD_7 ( VAR_55 ) ) { VAR_56 -> VAR_57 = VAR_58 -> VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; } VAR_64 -> VAR_65 = METHOD_8 ( VAR_66 -> VAR_67 , VAR_68 -> VAR_69 ) ; } VAR_70 -> VAR_71 = VAR_72 -> VAR_73 = VAR_74 -> VAR_75 ; VAR_76 -> VAR_77 = VAR_78 -> VAR_79 = VAR_80 -> VAR_81 ; if ( VAR_82 ) VAR_83 -> VAR_84 = VAR_85 -> VAR_86 ; else METHOD_9 ( VAR_87 -> VAR_88 ) ; VAR_89 -> VAR_90 = VAR_91 ; if ( ! METHOD_10 ( VAR_92 -> VAR_93 ) ) { if ( ! METHOD_11 ( VAR_94 , VAR_95 -> VAR_96 ) || VAR_97 -> VAR_98 != 0 || VAR_99 -> VAR_100 != 0 || METHOD_12 ( VAR_101 ) ) { VAR_102 = METHOD_13 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 < 0 ) return VAR_107 ; } } VAR_108 -> VAR_109 &= ~ METHOD_14 ( VAR_110 ) ; return 0 ; }
static TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 )  { TYPE_1 VAR_2 = METHOD_1 ( METHOD_2 ( VAR_3 ) -> VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 ;  TYPE_2 VAR_6 ;  VAR_7 = METHOD_3 ( VAR_8 , VAR_9 ) ;  if ( ! VAR_10 ) { METHOD_4 ( VAR_11 , "outofmemory" ) ; return ; }  VAR_12 = METHOD_5 ( VAR_13 , VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 ) ;  if ( VAR_19 ) {  METHOD_6 ( VAR_20 ) ;   if ( VAR_21 == - VAR_22 ) {  METHOD_7 ( VAR_23 , "alreadyincache" ) ;  VAR_24 = 0 ;  } } else { METHOD_8 ( VAR_25 , "inserting[%x]" , ( TYPE_3 ) VAR_26 ) ;  METHOD_9 ( VAR_27 ) ;  } }
TYPE_0 TYPE_1 * METHOD_0 ( const TYPE_2 * VAR_0 , const TYPE_3 * VAR_1 , TYPE_4 * VAR_2 , TYPE_5 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_6 VAR_6 = METHOD_1 ( VAR_7 , "https://" ) ; TYPE_7 * VAR_8 = METHOD_2 ( VAR_9 ) ; if ( ! VAR_10 ) { return VAR_11 ; } TYPE_8 * VAR_12 = METHOD_3 ( VAR_13 , "://" ) ; if ( ! VAR_14 ) { METHOD_4 ( VAR_15 ) ; METHOD_5 ( "InvalidURI" ) ; return VAR_16 ; } VAR_17 += 3 ; TYPE_9 * VAR_18 = METHOD_6 ( VAR_19 , ':' ) ; if ( ! VAR_20 ) { VAR_21 = ( VAR_22 ) ? "443" : "80" ; } else { * VAR_23 ++ = 0 ; } TYPE_10 * VAR_24 = METHOD_7 ( VAR_25 , '/' ) ; if ( ! VAR_26 ) { VAR_27 = "" ; } else { * VAR_28 ++ = 0 ; } VAR_29 = METHOD_8 ( VAR_30 ) ; if ( ! VAR_31 ) { METHOD_9 ( "Cannotcreatesocket\\n" ) ; METHOD_10 ( VAR_32 ) ; return VAR_33 ; } if ( ! METHOD_11 ( VAR_34 , VAR_35 , VAR_36 , 0 ) ) { METHOD_12 ( "Cannotconnectto%s:%s\\n" , VAR_37 , VAR_38 ) ; METHOD_13 ( VAR_39 ) ; return VAR_40 ; } r_socket_printf ( VAR_41 , "POST/%sHTTP/1.0\\r\\n" "User-Agent:radare2" R2_VERSION "\\r\\n" "Accept:*/*\\r\\n" "Host:%s\\r\\n" "Content-Length:%i\\r\\n" "Content-Type:application/x-www-form-urlencoded\\r\\n" "\\r\\n" , VAR_42 , VAR_43 , ( TYPE_11 ) METHOD_14 ( VAR_44 ) ) ; METHOD_15 ( VAR_45 ) ; METHOD_16 ( VAR_46 , ( TYPE_12 * ) VAR_47 , METHOD_17 ( VAR_48 ) ) ;  return METHOD_18 ( VAR_49 , VAR_50 , VAR_51 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; struct STRUCT_OR_UNION_0 * VAR_7 = cast ( struct STRUCT_OR_UNION_1 * , VAR_8 ) ; TYPE_4 VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 ) ; METHOD_2 ( VAR_12 ) ;  VAR_13 = ( ( VAR_14 == VAR_15 [ 0 ] ) ? VAR_16 : TYPE_5 ) ( VAR_17 , VAR_18 -> VAR_19 ,  & VAR_20 -> VAR_21 , VAR_22 -> VAR_23 ) ; VAR_24 = METHOD_3 ( VAR_25 , VAR_26 -> VAR_27 , METHOD_4 ( METHOD_5 ( VAR_28 ) ) ) ; VAR_29 -> VAR_30 . VAR_31 = VAR_32 ; for ( VAR_33 = 0 ; VAR_34 < VAR_35 -> VAR_36 ; VAR_37 ++ ) VAR_38 -> VAR_39 . VAR_40 [ VAR_41 ] = METHOD_6 ( VAR_42 ) ; METHOD_7 ( VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; METHOD_8 ( VAR_47 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_4 * VAR_2 ; struct STRUCT_OR_UNION_5 * VAR_3 ; struct STRUCT_OR_UNION_6 * VAR_4 ; struct STRUCT_OR_UNION_7 * VAR_5 ; unsigned TYPE_3 VAR_6 ; TYPE_4 VAR_7 = 0 ;  TYPE_5 VAR_8 ;  STRUCT_OR_UNION_8 -> VAR_9 = VAR_10 ; VAR_11 : VAR_12 = - VAR_13 ; METHOD_1 ( ) ; METHOD_2 ( VAR_14 , & VAR_15 [ STRUCT_OR_UNION_9 -> VAR_16 ] , VAR_17 ) { VAR_18 = 0 ; if ( VAR_19 == VAR_20 -> VAR_21 ) { if ( VAR_22 != VAR_23 ) break ; } else { if ( VAR_24 == VAR_25 ) { VAR_26 = VAR_27 -> VAR_28 ; break ; } if ( VAR_29 == VAR_30 -> VAR_31 ) break ; } VAR_32 = - VAR_33 ; } if ( METHOD_3 ( VAR_34 ) ) { if ( VAR_35 < 2 ) { METHOD_4 ( ) ; if ( ++ VAR_36 == 1 ) METHOD_5 ( "net-pf-%d-proto-%d-type-%d" , VAR_37 , VAR_38 , STRUCT_OR_UNION_10 -> VAR_39 ) ; else METHOD_6 ( "net-pf-%d-proto-%d" , VAR_40 , VAR_41 ) ; goto VAR_42 ; } else goto VAR_43 ; } VAR_44 = - VAR_45 ; if ( STRUCT_OR_UNION_11 -> VAR_46 == VAR_47 && ! VAR_48 && ! METHOD_7 ( STRUCT_OR_UNION_12 -> VAR_49 , VAR_50 ) ) goto VAR_51 ; STRUCT_OR_UNION_13 -> VAR_52 = VAR_53 -> VAR_54 ; VAR_55 = VAR_56 -> VAR_57 ; VAR_58 = VAR_59 -> VAR_60 ; METHOD_8 ( ) ; METHOD_9 ( ! VAR_61 -> VAR_62 ) ; VAR_63 = - VAR_64 ; VAR_65 = METHOD_10 ( STRUCT_OR_UNION_14 , VAR_66 , VAR_67 , VAR_68 , VAR_69 ) ; if ( ! VAR_70 ) goto VAR_71 ; VAR_72 = 0 ; if ( VAR_73 & VAR_74 ) VAR_75 -> VAR_76 = VAR_77 ; VAR_78 = METHOD_11 ( VAR_79 ) ; VAR_80 -> VAR_81 = ( VAR_82 & VAR_83 ) != 0 ; VAR_84 -> VAR_85 = 0 ; if ( VAR_86 == STRUCT_OR_UNION_15 -> VAR_87 ) { VAR_88 -> VAR_89 = VAR_90 ; if ( VAR_91 == VAR_92 ) VAR_93 -> VAR_94 = 1 ; } if ( STRUCT_OR_UNION_16 -> VAR_95 . VAR_96 ) VAR_97 -> VAR_98 = VAR_99 ; else VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> VAR_104 = 0 ; METHOD_12 ( STRUCT_OR_UNION_17 , VAR_105 ) ; VAR_106 -> VAR_107 = VAR_108 ; VAR_109 -> VAR_110 = VAR_111 ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = - 1 ; VAR_119 -> VAR_120 = 1 ; VAR_121 -> VAR_122 = 1 ; VAR_123 -> VAR_124 = 1 ; VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = VAR_129 ; VAR_130 -> VAR_131 = 0 ; METHOD_13 ( VAR_132 ) ; if ( VAR_133 -> VAR_134 ) { VAR_135 -> VAR_136 = METHOD_14 ( VAR_137 -> VAR_138 ) ; VAR_139 -> VAR_140 -> METHOD_15 ( VAR_141 ) ; } if ( VAR_142 -> VAR_143 -> METHOD_16 ) { VAR_144 = VAR_145 -> VAR_146 -> METHOD_17 ( VAR_147 ) ; if ( VAR_148 ) METHOD_18 ( VAR_149 ) ; } VAR_150 : return VAR_151 ; VAR_152 : METHOD_19 ( ) ; goto VAR_153 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * * VAR_0 ,  unsigned TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ;  if ( ! VAR_5 ) return - VAR_6 ;  if ( VAR_7 && METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 , VAR_11 ) ) {  METHOD_3 ( VAR_12 ) ; return - VAR_13 ; } return METHOD_4 ( STRUCT_OR_UNION_4 , VAR_14 , VAR_15 , VAR_16 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_3 VAR_4 = 0 , VAR_5 , VAR_6 ; TYPE_4 VAR_7 ; METHOD_1 ( "" ) ; if ( METHOD_2 ( VAR_8 , ( TYPE_5 TYPE_6 * ) VAR_9 ) ) return - VAR_10 ; if ( ! VAR_11 || VAR_12 > ( VAR_13 * 4 ) / sizeof ( * VAR_14 ) ) return - VAR_15 ; VAR_16 = sizeof ( * VAR_17 ) + VAR_18 * sizeof ( * VAR_19 ) ;  VAR_20 = METHOD_3 ( VAR_21 , VAR_22 ) ;  if ( ! VAR_23 ) return - VAR_24 ; VAR_25 = VAR_26 -> VAR_27 ; METHOD_4 ( & VAR_28 ) ; METHOD_5 ( VAR_29 , & VAR_30 , VAR_31 ) { if ( METHOD_6 ( VAR_32 , & VAR_33 -> VAR_34 ) ) continue ; ( VAR_35 + VAR_36 ) -> VAR_37 = VAR_38 -> VAR_39 ; ( VAR_40 + VAR_41 ) -> VAR_42 = VAR_43 -> VAR_44 ; ( VAR_45 + VAR_46 ) -> VAR_47 = VAR_48 -> VAR_49 -> VAR_50 ; ( VAR_51 + VAR_52 ) -> VAR_53 = VAR_54 -> VAR_55 ; METHOD_7 ( & ( VAR_56 + VAR_57 ) -> VAR_58 , & VAR_59 -> VAR_60 ) ; METHOD_8 ( & ( VAR_61 + VAR_62 ) -> VAR_63 , & VAR_64 -> VAR_65 ) ; if ( ++ VAR_66 >= VAR_67 ) break ; } METHOD_9 ( & VAR_68 ) ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 = sizeof ( * VAR_73 ) + VAR_74 * sizeof ( * VAR_75 ) ; VAR_76 = METHOD_10 ( VAR_77 , VAR_78 , VAR_79 ) ; METHOD_11 ( VAR_80 ) ; return VAR_81 ? - VAR_82 : 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const struct STRUCT_OR_UNION_0 * VAR_3 = ( const struct STRUCT_OR_UNION_1 * ) VAR_4 ; const TYPE_4 * VAR_5 ; METHOD_1 ( * VAR_6 ) ; VAR_7 = METHOD_2 ( VAR_8 , VAR_9 -> VAR_10 ) ; METHOD_3 ( ( VAR_11 , "[dagid:%s,seq:%u,instance:%u,rank:%u,%smop:%s,prf:%u]" , VAR_12 , VAR_13 -> VAR_14 , VAR_15 -> VAR_16 , METHOD_4 ( & VAR_17 -> VAR_18 ) , METHOD_5 ( VAR_19 -> VAR_20 ) ? "grounded," : "" , METHOD_6 ( VAR_21 , "mop%u" , METHOD_7 ( VAR_22 -> VAR_23 ) ) , METHOD_8 ( VAR_24 -> VAR_25 ) ) ) ; if ( VAR_26 -> VAR_27 > 1 ) { const struct STRUCT_OR_UNION_2 * VAR_28 = ( const struct STRUCT_OR_UNION_3 * ) & VAR_29 [ 1 ] ; METHOD_9 ( VAR_30 , VAR_31 , VAR_32 ) ; } return ; VAR_33 :  METHOD_10 ( ( VAR_34 , "[|truncated]" ) ) ;  return ; }
static TYPE_0   METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 )  { const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 , VAR_6 ; const TYPE_6 * VAR_7 ;  VAR_8 = ( const TYPE_7 * ) VAR_9 ;  VAR_10 = VAR_11 -> VAR_12 ; VAR_13 = METHOD_1 ( VAR_14 -> VAR_15 ) ;  METHOD_2 ( * VAR_16 , VAR_17 ) ;  VAR_18 = VAR_19 ; METHOD_3 ( ( VAR_20 , "%sRPKI-RTRv%u,%sPDU(%u),length:%u" , METHOD_4 ( 8 ) , VAR_21 -> VAR_22 , METHOD_5 ( VAR_23 , "Unknown" , VAR_24 ) ,  VAR_25 , VAR_26 ) ) ;  switch ( VAR_27 ) { case VAR_28 : case VAR_29 :  case VAR_30 :  VAR_31 = ( const TYPE_8 * ) ( VAR_32 + 1 ) ; METHOD_6 ( ( VAR_33 , "%sSessionID:0x%04x,Serial:%u" , METHOD_7 ( VAR_34 + 2 ) , METHOD_8 ( VAR_35 -> VAR_36 . VAR_37 ) , METHOD_9 ( VAR_38 ) ) ) ; break ; case VAR_39 : case VAR_40 :  break ;   case VAR_41 :  METHOD_10 ( ( VAR_42 , "%sSessionID:0x%04x" , METHOD_11 ( VAR_43 + 2 ) , METHOD_12 ( VAR_44 -> VAR_45 . VAR_46 ) ) ) ; break ; case VAR_47 : { const TYPE_9 * VAR_48 ;  VAR_49 = ( const TYPE_10 * ) VAR_50 ;  METHOD_13 ( ( VAR_51 , "%sIPv4Prefix%s/%u-%u,origin-as%u,flags0x%02x" , METHOD_14 ( VAR_52 + 2 ) , METHOD_15 ( VAR_53 , VAR_54 -> VAR_55 ) , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 , METHOD_16 ( VAR_60 -> VAR_61 ) , VAR_62 -> VAR_63 ) ) ; } break ; case VAR_64 : { const TYPE_11 * VAR_65 ;  VAR_66 = ( const TYPE_12 * ) VAR_67 ;  METHOD_17 ( ( VAR_68 , "%sIPv6Prefix%s/%u-%u,origin-as%u,flags0x%02x" , METHOD_18 ( VAR_69 + 2 ) , METHOD_19 ( VAR_70 , VAR_71 -> VAR_72 ) , VAR_73 -> VAR_74 , VAR_75 -> VAR_76 , METHOD_20 ( VAR_77 -> VAR_78 ) , VAR_79 -> VAR_80 ) ) ; } break ; case VAR_81 : { const TYPE_13 * VAR_82 ; TYPE_14 VAR_83 , VAR_84 , VAR_85 , VAR_86 ;  VAR_87 = ( const TYPE_15 * ) VAR_88 ;  VAR_89 = METHOD_21 ( VAR_90 -> VAR_91 ) ;  METHOD_22 ( * VAR_92 , VAR_93 ) ;  VAR_94 = VAR_95 ; VAR_96 = METHOD_23 ( VAR_97 -> VAR_98 . VAR_99 . VAR_100 ) ; METHOD_24 ( ( VAR_101 , "%sErrorcode:%s(%u),EncapsulatedPDUlength:%u" , METHOD_25 ( VAR_102 + 2 ) , METHOD_26 ( VAR_103 , "Unknown" , VAR_104 ) , VAR_105 , VAR_106 ) ) ;  VAR_107 += sizeof ( * VAR_108 ) ;  VAR_109 -= sizeof ( * VAR_110 ) ;  if ( VAR_111 &&  ( VAR_112 <= VAR_113 ) ) { METHOD_27 ( ( VAR_114 , "%s-----encapsulatedPDU-----" , METHOD_28 ( VAR_115 + 4 ) ) ) ;  if ( METHOD_29 ( VAR_116 , VAR_117 , VAR_118 + 2 ) )  goto VAR_119 ; } VAR_120 += VAR_121 ;  VAR_122 -= VAR_123 ;   VAR_124 = 0 ;  if ( VAR_125 > 4 ) {  VAR_126 = METHOD_30 ( VAR_127 ) ;  VAR_128 += 4 ;  VAR_129 -= 4 ;  }  METHOD_31 ( * VAR_130 , VAR_131 ) ;  if ( VAR_132 && ( VAR_133 <= VAR_134 ) ) { METHOD_32 ( ( VAR_135 , "%sErrortext:" , METHOD_33 ( VAR_136 + 2 ) ) ) ; if ( METHOD_34 ( VAR_137 , VAR_138 , VAR_139 , VAR_140 -> VAR_141 ) ) goto VAR_142 ; } } break ; default : VAR_143 = VAR_144 ; } if ( VAR_145 -> VAR_146 > 1 || ( VAR_147 -> VAR_148 && VAR_149 ) ) { METHOD_35 ( VAR_150 , VAR_151 , "\\n\\t" , VAR_152 ) ; }  return 0 ;  VAR_153 :  return 1 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; struct STRUCT_OR_UNION_6 VAR_7 ;  TYPE_2 VAR_8 , VAR_9 ;  VAR_10 -> VAR_11 = VAR_12 ;  METHOD_1 ( & VAR_13 , 0x00 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ;  VAR_14 = ( ( ( VAR_15 -> VAR_16 [ 3 ] >> 4 ) & 0x0F ) + 1 ) >> 1 ; VAR_17 += ( ( ( VAR_18 -> VAR_19 [ 3 ] >> 0 ) & 0x0F ) + 1 ) >> 1 ;  if ( ! METHOD_2 ( VAR_20 -> VAR_21 + VAR_22 + 4 , & VAR_23 ) ) {  METHOD_3 ( VAR_24 , VAR_25 , VAR_26 , 76 ) ; return 0 ; } VAR_27 = METHOD_4 ( & VAR_28 . VAR_29 , & VAR_30 . VAR_31 ) ; if ( VAR_32 == VAR_33 || METHOD_5 ( VAR_34 ) || ( VAR_35 = METHOD_6 ( VAR_36 ) ) == VAR_37 ) { METHOD_7 ( VAR_38 , VAR_39 , VAR_40 , 120 ) ; return 0 ; } VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; VAR_47 = METHOD_8 ( VAR_48 ) ; VAR_49 -> VAR_50 = VAR_51 ; VAR_52 -> VAR_53 = VAR_54 . VAR_55 ; VAR_56 -> VAR_57 = VAR_58 . VAR_59 ; VAR_60 -> VAR_61 = VAR_62 . VAR_63 ; for ( VAR_64 = 0 ; VAR_65 < VAR_66 . VAR_67 ; VAR_68 ++ ) VAR_69 -> VAR_70 [ VAR_71 ] = VAR_72 . VAR_73 [ VAR_74 ] ; VAR_75 -> VAR_76 = VAR_77 . VAR_78 ; VAR_79 -> VAR_80 = VAR_81 . VAR_82 ; VAR_83 -> VAR_84 = VAR_85 . VAR_86 ; for ( VAR_87 = 0 ; VAR_88 < VAR_89 . VAR_90 ; VAR_91 ++ ) VAR_92 -> VAR_93 [ VAR_94 ] = VAR_95 . VAR_96 [ VAR_97 ] ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 ; VAR_107 -> VAR_108 -> VAR_109 ++ ; if ( METHOD_9 ( VAR_110 ) -> VAR_111 ) { VAR_112 -> VAR_113 = VAR_114 ; } else { METHOD_10 ( VAR_115 , VAR_116 ) ; VAR_117 -> VAR_118 = VAR_119 ; METHOD_11 ( VAR_120 ) ; } VAR_121 -> VAR_122 = 0x00 ; VAR_123 -> VAR_124 = 0 ; VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = 0 ; VAR_129 -> VAR_130 = 0 ; VAR_131 -> VAR_132 ++ ; METHOD_12 ( VAR_133 ) ; METHOD_13 ( & VAR_134 -> VAR_135 , VAR_136 ) ; METHOD_14 ( VAR_137 ) ; if ( ! METHOD_15 ( VAR_138 , VAR_139 ) ) VAR_140 -> METHOD_16 ( VAR_141 , VAR_142 -> VAR_143 ) ; return 1 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = 0 , VAR_3 = 0 ; const TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; TYPE_5 VAR_9 = STRUCT_OR_UNION_4 -> VAR_10 , VAR_11 = STRUCT_OR_UNION_5 -> VAR_12 ; switch ( VAR_13 ) { case VAR_14 : VAR_15 = VAR_16 ; if ( VAR_17 ) {  VAR_18 = METHOD_1 ( VAR_19 , & VAR_20 ) ;  if ( VAR_21 < 0 ) goto VAR_22 ; if ( VAR_23 == 0 ) VAR_24 = VAR_25 ; } break ; case VAR_26 : if ( ! METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_27 ) ) { VAR_28 = VAR_29 ? - VAR_30 : 0 ; goto VAR_31 ; } VAR_32 = VAR_33 ; break ; default : VAR_34 = - VAR_35 ; goto VAR_36 ; } if ( VAR_37 ) { VAR_38 = METHOD_3 ( VAR_39 -> VAR_40 ) ; VAR_41 = METHOD_4 ( VAR_42 , VAR_43 ) ; if ( ! VAR_44 ) { VAR_45 = - VAR_46 ; goto VAR_47 ; } VAR_48 = METHOD_5 ( & VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; if ( VAR_53 < 0 ) goto VAR_54 ; } if ( VAR_55 != VAR_56 ) { VAR_57 . VAR_58 = VAR_59 ; VAR_60 . VAR_61 = VAR_62 ; VAR_63 = METHOD_6 ( STRUCT_OR_UNION_7 , & VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; } VAR_67 = METHOD_7 ( STRUCT_OR_UNION_8 , VAR_68 , VAR_69 , VAR_70 , 0 ) ; if ( VAR_71 ) { if ( VAR_72 != VAR_73 ) { VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; METHOD_8 ( STRUCT_OR_UNION_9 , & VAR_80 ) ; } goto VAR_81 ; } METHOD_9 ( STRUCT_OR_UNION_10 , VAR_82 , VAR_83 ) ; VAR_84 : METHOD_10 ( VAR_85 ) ; VAR_86 : return VAR_87 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_2 ( VAR_6 ) ;  TYPE_3 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_3 * * VAR_9 , * VAR_10 ; unsigned TYPE_4 VAR_11 [ 4 ] ; TYPE_5 VAR_12 = 0 ; VAR_13 = METHOD_3 ( VAR_14 , "%3u.%3u.%3u.%3u" , & VAR_15 [ 3 ] , & VAR_16 [ 2 ] , & VAR_17 [ 1 ] , & VAR_18 [ 0 ] ) ; if ( VAR_19 != 4 ) return - VAR_20 ; for ( VAR_21 = 0 ; VAR_22 < METHOD_4 ( VAR_23 ) ; VAR_24 ++ ) { if ( VAR_25 [ VAR_26 ] > 255 ) return - VAR_27 ; METHOD_5 ( & VAR_28 , VAR_29 [ VAR_30 ] << ( VAR_31 * 8 ) ) ; }  VAR_32 = 0 ;  METHOD_6 ( & VAR_33 -> VAR_34 ) ; if ( METHOD_7 ( VAR_35 , VAR_36 , & VAR_37 , & VAR_38 ) ) VAR_39 = - VAR_40 ; else if ( METHOD_8 ( VAR_41 , & VAR_42 -> VAR_43 ) ) VAR_44 = - VAR_45 ; else { METHOD_9 ( & VAR_46 -> VAR_47 , VAR_48 , VAR_49 ) ; METHOD_10 ( & VAR_50 -> VAR_51 , & VAR_52 -> VAR_53 ) ; } METHOD_11 ( & VAR_54 -> VAR_55 ) ;  if ( VAR_56 )  return VAR_57 ; METHOD_12 ( & VAR_58 -> VAR_59 , & VAR_60 , sizeof ( VAR_61 ) ) ; return VAR_62 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 = VAR_4 -> VAR_5 ; TYPE_4 VAR_6 = VAR_7 -> VAR_8 ; TYPE_5 VAR_9 ; if ( VAR_10 < VAR_11 ) { METHOD_1 ( ( VAR_12 , "[|null]" ) ) ; return ( VAR_13 ) ; } METHOD_2 ( ( TYPE_6 * ) & VAR_14 , ( const TYPE_7 * ) VAR_15 , sizeof ( VAR_16 ) ) ; if ( ( VAR_17 & 0xFFFF0000 ) != 0 ) VAR_18 = METHOD_3 ( VAR_19 ) ; if ( VAR_20 -> VAR_21 ) METHOD_4 ( VAR_22 , VAR_23 , VAR_24 ) ; VAR_25 -= VAR_26 ; VAR_27 -= VAR_28 ; VAR_29 += VAR_30 ; switch ( VAR_31 ) { case VAR_32 : METHOD_5 ( VAR_33 , VAR_34 , VAR_35 ) ; break ; case VAR_36 : case VAR_37 : case VAR_38 : METHOD_6 ( VAR_39 , VAR_40 , VAR_41 ) ; break ; case VAR_42 :  METHOD_7 ( VAR_43 , VAR_44 , VAR_45 , VAR_46 ) ;  break ; case VAR_47 : METHOD_8 ( VAR_48 , VAR_49 , VAR_50 ) ; break ; case VAR_51 : METHOD_9 ( VAR_52 , VAR_53 , VAR_54 ) ; break ; default : if ( ! VAR_55 -> VAR_56 ) METHOD_10 ( VAR_57 , VAR_58 , VAR_59 + VAR_60 ) ; if ( ! VAR_61 -> VAR_62 ) METHOD_11 ( VAR_63 , VAR_64 ) ; } return ( VAR_65 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 * VAR_1 , * VAR_2 ; TYPE_2 VAR_3 = '\\0' ; VAR_4 = VAR_5 = VAR_6 -> VAR_7 ; if ( * VAR_8 == '\\0' ) { METHOD_1 ( & VAR_9 -> VAR_10 , VAR_11 , "Invalidemptypathname" ) ; return ( VAR_12 ) ; } if d ( VAR_13 ) METHOD_2 ( VAR_14 ) ; if ( * VAR_15 == '/' )  VAR_16 = * VAR_17 ++ ;  for ( ; ; ) { if ( VAR_18 [ 0 ] == '\\0' ) { break ; } else if ( VAR_19 [ 0 ] == '/' ) { VAR_20 ++ ; continue ; } else if ( VAR_21 [ 0 ] == '.' ) { if ( VAR_22 [ 1 ] == '\\0' ) { break ; } else if ( VAR_23 [ 1 ] == '/' ) { VAR_24 += 2 ; continue ; } else if ( VAR_25 [ 1 ] == '.' ) { if ( VAR_26 [ 2 ] == '/' || VAR_27 [ 2 ] == '\\0' ) { if ( VAR_28 -> VAR_29 & VAR_30 ) { METHOD_3 ( & VAR_31 -> VAR_32 , VAR_33 , "Pathcontains\'..\'" ) ; return ( VAR_34 ) ; } } } } if ( VAR_35 ) * VAR_36 ++ = '/' ; while ( * VAR_37 != '\\0' && * VAR_38 != '/' ) { * VAR_39 ++ = * VAR_40 ++ ; } if ( * VAR_41 == '\\0' ) break ; VAR_42 = * VAR_43 ++ ; } if ( VAR_44 == VAR_45 -> VAR_46 ) { if ( VAR_47 ) * VAR_48 ++ = '/' ; else * VAR_49 ++ = '.' ; } * VAR_50 = '\\0' ; return ( VAR_51 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ,  TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 , TYPE_8 * VAR_7 ) {  TYPE_9 VAR_8 ;  TYPE_10 VAR_9 , VAR_10 , VAR_11 ; TYPE_11 * VAR_12 = & VAR_13 . VAR_14 . VAR_15 [ 0 ] ; TYPE_12 * VAR_16 = & VAR_17 . VAR_18 . VAR_19 [ 0 ] ; TYPE_13 * VAR_20 [ 8 ] ; TYPE_14 VAR_21 , VAR_22 ;  TYPE_15 VAR_23 ;  TYPE_16 VAR_24 , VAR_25 ; TYPE_17 VAR_26 = VAR_27 / 8 ; VAR_28 -> VAR_29 . VAR_30 = 0 ; VAR_31 . VAR_32 . VAR_33 = 4 ; VAR_34 . VAR_35 . VAR_36 = 4 ; VAR_37 = METHOD_1 ( VAR_38 ) ; * ( TYPE_18 * ) VAR_39 = VAR_40 ; for ( VAR_41 = 0 ; VAR_42 [ VAR_43 ] != 0 ; VAR_44 ++ ) ; VAR_45 . VAR_46 . VAR_47 = VAR_48 + 1 ; for ( VAR_49 = 0 ; VAR_50 < VAR_51 . VAR_52 . VAR_53 ; VAR_54 ++ ) { VAR_55 . VAR_56 . VAR_57 [ VAR_58 ] = VAR_59 [ VAR_60 ] ; } VAR_61 -> VAR_62 . VAR_63 = 0 ; VAR_64 = 1 ;  while ( VAR_65 -> VAR_66 . VAR_67 < VAR_68 )  {  VAR_69 = METHOD_2 ( VAR_70 ) ;  * ( TYPE_19 * ) VAR_71 = VAR_72 ; VAR_73 = 0 ; VAR_74 [ VAR_75 ++ ] = ( TYPE_20 * ) & ( VAR_76 . VAR_77 ) ; VAR_78 [ VAR_79 ++ ] = ( TYPE_21 * ) & ( VAR_80 . VAR_81 ) ; VAR_82 [ VAR_83 ++ ] = ( TYPE_22 * ) VAR_84 ; VAR_85 [ VAR_86 ++ ] = ( TYPE_23 * ) VAR_87 ; VAR_88 [ VAR_89 ++ ] = ( TYPE_24 * ) & ( VAR_90 . VAR_91 ) ;  VAR_92 [ VAR_93 ++ ] = ( TYPE_25 * ) 0 ;   VAR_94 = METHOD_3 ( VAR_95 , VAR_96 , VAR_97 , ( TYPE_26 * * ) & ( VAR_98 [ 0 ] ) , & VAR_99 ) ;   if ( VAR_100 != VAR_101 )  { return ( VAR_102 ) ; } TYPE_27 VAR_103 = METHOD_4 ( VAR_104 , & ( VAR_105 . VAR_106 ) ) ; if ( ! VAR_107 ) {  return VAR_108 ;  } } VAR_109 -> VAR_110 . VAR_111 = VAR_112 ; return VAR_113 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 ) { TYPE_10 * VAR_9 ; TYPE_11 TYPE_12 ;  VAR_10 = 0 ;  if ( VAR_11 < 0 || VAR_12 < 0 || VAR_13 <= 0 || VAR_14 <= 0 ) { goto VAR_15 ; } if ( ! METHOD_1 ( VAR_16 , VAR_17 , 0 ) ||  ! METHOD_2 ( VAR_18 , VAR_19 , 0 ) ) {  goto VAR_20 ; } if ( ! ( VAR_21 = METHOD_3 ( sizeof ( TYPE_13 ) ) ) ) { goto VAR_22 ; } VAR_23 -> VAR_24 = VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = 0 ; VAR_52 -> VAR_53 = ( VAR_54 + 7 ) / 8 ;  if ( ! METHOD_4 ( VAR_55 -> VAR_56 , VAR_57 -> VAR_58 , & TYPE_14 ) ||  ! METHOD_5 ( TYPE_15 , VAR_59 -> VAR_60 , & TYPE_16 ) ) { goto VAR_61 ; } VAR_62 -> VAR_63 = ( VAR_64 ) ? METHOD_6 ( 0 , TYPE_17 ) : METHOD_7 ( ) ; if ( ! VAR_65 -> VAR_66 ) { goto VAR_67 ; } if ( TYPE_18 > 0 ) { if ( TYPE_19 - 1 > VAR_68 ) { goto VAR_69 ; } if ( METHOD_8 ( VAR_70 -> VAR_71 , TYPE_20 - 1 , VAR_72 ) < 0 || METHOD_9 ( VAR_73 -> VAR_74 , 0 ) == VAR_75 || METHOD_10 ( VAR_76 -> VAR_77 , 0 , VAR_78 ) < 0 ) { goto VAR_79 ; } } return VAR_80 ; VAR_81 : if ( VAR_82 ) { METHOD_11 ( VAR_83 ) ; } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 )  {  return ( METHOD_1 ( ( TYPE_2 ) VAR_1 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { const struct STRUCT_OR_UNION_1 TYPE_5 * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; const TYPE_6 TYPE_7 * VAR_6 ; TYPE_8 VAR_7 , VAR_8 = 0 ; struct STRUCT_OR_UNION_3 VAR_9 ; TYPE_9 VAR_10 = 0 ; TYPE_10 * VAR_11 ;  if ( VAR_12 < sizeof ( VAR_13 . VAR_14 ) ) {  VAR_15 = - VAR_16 ; goto VAR_17 ; } VAR_18 = ( const struct STRUCT_OR_UNION_4 TYPE_11 * ) VAR_19 ; if ( METHOD_1 ( & VAR_20 . VAR_21 , & VAR_22 -> VAR_23 , sizeof ( VAR_24 . VAR_25 ) ) ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } VAR_29 = sizeof ( VAR_30 . VAR_31 ) ; switch ( VAR_32 . VAR_33 ) { case VAR_34 : case VAR_35 : VAR_36 = sizeof ( VAR_37 . VAR_38 . VAR_39 ) ; VAR_40 = & VAR_41 . VAR_42 . VAR_43 ; VAR_44 = & VAR_45 -> VAR_46 . VAR_47 ; break ; case VAR_48 : VAR_49 = sizeof ( VAR_50 . VAR_51 . VAR_52 ) ; VAR_53 = & VAR_54 . VAR_55 . VAR_56 ; VAR_57 = & VAR_58 -> VAR_59 . VAR_60 ; break ; case VAR_61 : VAR_62 = sizeof ( VAR_63 . VAR_64 . VAR_65 ) ; VAR_66 = & VAR_67 . VAR_68 . VAR_69 ; VAR_70 = & VAR_71 -> VAR_72 . VAR_73 ; break ; case VAR_74 : case VAR_75 : VAR_76 = sizeof ( VAR_77 . VAR_78 . VAR_79 ) ; VAR_80 = & VAR_81 . VAR_82 . VAR_83 ; VAR_84 = & VAR_85 -> VAR_86 . VAR_87 ; break ; case VAR_88 : VAR_89 = sizeof ( VAR_90 . VAR_91 . VAR_92 ) ; VAR_93 = & VAR_94 . VAR_95 . VAR_96 ; VAR_97 = & VAR_98 -> VAR_99 . VAR_100 ; break ; case VAR_101 : case VAR_102 : VAR_103 = 0 ; VAR_104 = VAR_105 ; VAR_106 = VAR_107 ; break ; case VAR_108 : VAR_109 = sizeof ( VAR_110 . VAR_111 . VAR_112 ) ; VAR_113 = & VAR_114 . VAR_115 . VAR_116 ; VAR_117 = & VAR_118 -> VAR_119 . VAR_120 ; break ; case VAR_121 : VAR_122 = sizeof ( VAR_123 . VAR_124 . VAR_125 ) ; VAR_126 = & VAR_127 . VAR_128 . VAR_129 ; VAR_130 = & VAR_131 -> VAR_132 . VAR_133 ; break ; case VAR_134 : VAR_135 = sizeof ( VAR_136 . VAR_137 . VAR_138 ) ; VAR_139 = & VAR_140 . VAR_141 . VAR_142 ; VAR_143 = & VAR_144 -> VAR_145 . VAR_146 ; break ; case VAR_147 : VAR_148 = sizeof ( VAR_149 . VAR_150 . VAR_151 ) ; VAR_152 = & VAR_153 . VAR_154 . VAR_155 ; VAR_156 = & VAR_157 -> VAR_158 . VAR_159 ; break ; case VAR_160 : VAR_161 = sizeof ( VAR_162 . VAR_163 . VAR_164 ) ; VAR_165 = & VAR_166 . VAR_167 . VAR_168 ; VAR_169 = & VAR_170 -> VAR_171 . VAR_172 ; break ; default : VAR_173 = - VAR_174 ; goto VAR_175 ; } if ( VAR_176 ) { if ( ( VAR_177 - VAR_178 ) < VAR_179 ) { VAR_180 = - VAR_181 ; goto VAR_182 ; } if ( METHOD_2 ( VAR_183 , VAR_184 , VAR_185 ) ) { VAR_186 = - VAR_187 ; goto VAR_188 ; } VAR_189 += VAR_190 ; } VAR_191 = METHOD_3 ( VAR_192 ) ; if ( ! VAR_193 && VAR_194 . VAR_195 != VAR_196 ) { VAR_197 = - VAR_198 ; goto VAR_199 ; } switch ( VAR_200 . VAR_201 ) { case VAR_202 : VAR_203 = METHOD_4 ( VAR_204 , & VAR_205 . VAR_206 . VAR_207 ) ; if ( VAR_208 ) goto VAR_209 ; break ; case VAR_210 : VAR_211 = METHOD_5 ( VAR_212 , & VAR_213 . VAR_214 . VAR_215 ) ; if ( VAR_216 ) goto VAR_217 ; VAR_218 = METHOD_6 ( VAR_219 , ( TYPE_12 TYPE_13 * ) ( unsigned TYPE_14 ) VAR_220 . VAR_221 . VAR_222 . VAR_223 , VAR_224 . VAR_225 . VAR_226 . VAR_227 ) ; break ; case VAR_228 : VAR_229 = METHOD_7 ( VAR_230 , METHOD_8 ( VAR_231 ) , VAR_232 . VAR_233 . VAR_234 ) ; break ; case VAR_235 : VAR_236 = STRUCT_OR_UNION_5 ( VAR_237 , ( struct STRUCT_OR_UNION_6 TYPE_15 * ) ( unsigned TYPE_16 ) VAR_238 . VAR_239 . VAR_240 ) ; break ; case VAR_241 : VAR_242 = METHOD_9 ( VAR_243 , VAR_244 , & VAR_245 . VAR_246 . VAR_247 ) ; break ; case VAR_248 : VAR_249 = METHOD_10 ( VAR_250 , METHOD_11 ( VAR_251 ) , & VAR_252 . VAR_253 . VAR_254 ) ; break ; case VAR_255 : VAR_256 = METHOD_12 ( VAR_257 , VAR_258 . VAR_259 . VAR_260 ) ; break ; case VAR_261 : ( TYPE_17 ) METHOD_13 ( VAR_262 ) ; VAR_263 = METHOD_14 ( VAR_264 ) ; break ; case VAR_265 : METHOD_15 ( VAR_266 -> VAR_267 ) ; break ; case VAR_268 : VAR_269 -> VAR_270 = VAR_271 . VAR_272 . VAR_273 ; break ; case VAR_274 : VAR_275 -> VAR_276 -> METHOD_16 ( VAR_277 -> VAR_278 , VAR_279 . VAR_280 . VAR_281 ) ; break ; case VAR_282 : VAR_283 = METHOD_17 ( METHOD_18 ( VAR_284 ) , ( TYPE_18 TYPE_19 * ) ( unsigned TYPE_20 ) VAR_285 . VAR_286 . VAR_287 ) ; break ; case VAR_288 : VAR_289 = METHOD_19 ( VAR_290 -> VAR_291 , METHOD_20 ( VAR_292 ) , ( TYPE_21 TYPE_22 * ) ( unsigned TYPE_23 ) VAR_293 . VAR_294 . VAR_295 ) ; break ; case VAR_296 : VAR_297 = METHOD_21 ( VAR_298 , METHOD_22 ( VAR_299 ) , VAR_300 . VAR_301 . VAR_302 ) ; break ; } if ( VAR_303 >= 0 ) VAR_304 = VAR_305 ; VAR_306 : return VAR_307 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , "enter" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , "ImproperImageHeader" ) ; if ( METHOD_17 ( VAR_67 . VAR_68 , "MATLAB" , 6 ) != 0 ) { VAR_69 = METHOD_18 ( VAR_70 , VAR_71 , VAR_72 ) ; if ( VAR_73 == VAR_74 ) goto VAR_75 ; VAR_76 = VAR_77 ; goto VAR_78 ; } VAR_79 . VAR_80 = METHOD_19 ( VAR_81 ) ; if ( METHOD_20 ( VAR_82 , 2 , ( unsigned TYPE_35 * ) & VAR_83 . VAR_84 ) != 2 ) METHOD_21 ( VAR_85 , "ImproperImageHeader" ) ; if ( VAR_86 ) ( TYPE_36 ) METHOD_22 ( VAR_87 , METHOD_23 ( ) , "Endian%c%c" , VAR_88 . VAR_89 [ 0 ] , VAR_90 . VAR_91 [ 1 ] ) ; if ( ! METHOD_24 ( VAR_92 . VAR_93 , "IM" , 2 ) ) { METHOD_25 = VAR_94 ; METHOD_26 = METHOD_27 ; METHOD_28 = VAR_95 ; METHOD_29 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; } else if ( ! METHOD_30 ( VAR_100 . VAR_101 , "MI" , 2 ) ) { METHOD_31 = VAR_102 ; METHOD_32 = VAR_103 ; METHOD_33 = VAR_104 ; METHOD_34 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } else goto VAR_109 ; if ( METHOD_35 ( VAR_110 . VAR_111 , "MATLAB" , 6 ) ) VAR_112 : METHOD_36 ( VAR_113 , "ImproperImageHeader" ) ; VAR_114 = METHOD_37 ( VAR_115 ) ; while ( ! METHOD_38 ( VAR_116 ) ) { VAR_117 = 1 ; ( TYPE_37 ) METHOD_39 ( VAR_118 , VAR_119 , VAR_120 ) ; VAR_121 . VAR_122 = METHOD_40 ( VAR_123 ) ; if ( METHOD_41 ( VAR_124 ) ) break ; VAR_125 . VAR_126 = METHOD_42 ( VAR_127 ) ; if ( METHOD_43 ( VAR_128 ) ) break ; VAR_129 += VAR_130 . VAR_131 + 4 + 4 ; VAR_132 = VAR_133 ; if d ( VAR_134 ) if ( VAR_135 . VAR_136 == VAR_137 ) { VAR_138 = METHOD_44 ( VAR_139 , VAR_140 . VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 == VAR_145 ) continue ; VAR_146 . VAR_147 = METHOD_45 ( VAR_148 ) ; } if ( VAR_149 . VAR_150 != VAR_151 ) continue ; VAR_152 . VAR_153 = METHOD_46 ( VAR_154 ) ; VAR_155 . VAR_156 = METHOD_47 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_48 ( VAR_160 ) ; VAR_161 . VAR_162 = VAR_163 . VAR_164 & 0xFF ; VAR_165 . VAR_166 = ( VAR_167 . VAR_168 >> 8 ) & 0xFF ; VAR_169 . VAR_170 = METHOD_49 ( VAR_171 ) ; if ( VAR_172 != VAR_173 ) VAR_174 . VAR_175 = METHOD_50 ( VAR_176 ) ; VAR_177 . VAR_178 = METHOD_51 ( VAR_179 ) ; VAR_180 . VAR_181 = METHOD_52 ( VAR_182 ) ; VAR_183 . VAR_184 = METHOD_53 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_54 ( VAR_188 ) ; switch ( VAR_189 . VAR_190 ) { case 8 : VAR_191 = VAR_192 = 1 ; break ; case 12 : VAR_193 = VAR_194 = METHOD_55 ( VAR_195 ) ; ( TYPE_38 ) METHOD_56 ( VAR_196 ) ; if ( VAR_197 != 3 ) METHOD_57 ( VAR_198 , "MultidimensionalMatricesAreNotSupported" ) ; break ; case 16 : VAR_199 = VAR_200 = METHOD_58 ( VAR_201 ) ; if ( VAR_202 != 3 && VAR_203 != 1 ) METHOD_59 ( VAR_204 , "MultidimensionalMatricesAreNotSupported" ) ; VAR_205 = METHOD_60 ( VAR_206 ) ; if ( VAR_207 == 0 ) METHOD_61 ( VAR_208 , "ImproperImageHeader" ) ; break ; default : METHOD_62 ( VAR_209 , "MultidimensionalMatricesAreNotSupported" ) ; } VAR_210 . VAR_211 = METHOD_63 ( VAR_212 ) ; VAR_213 . VAR_214 = METHOD_64 ( VAR_215 ) ; if ( VAR_216 ) ( TYPE_39 ) METHOD_65 ( VAR_217 , METHOD_66 ( ) , "MATLAB_HDR.StructureClass%d" , VAR_218 . VAR_219 ) ; if ( VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 && VAR_241 . VAR_242 != VAR_243 && VAR_244 . VAR_245 != VAR_246 && VAR_247 . VAR_248 != VAR_249 && VAR_250 . VAR_251 != VAR_252 ) METHOD_67 ( VAR_253 , "UnsupportedCellTypeInTheMatrix" ) ; switch ( VAR_254 . VAR_255 ) { case 0 : VAR_256 = METHOD_68 ( VAR_257 ) ; VAR_258 = 4 * ( TYPE_40 ) ( ( VAR_259 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_69 ( VAR_260 , VAR_261 , VAR_262 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_70 ( VAR_263 , 4 , ( unsigned TYPE_43 * ) & VAR_264 ) ; break ; default : goto VAR_265 ; } VAR_266 = METHOD_71 ( VAR_267 ) ; if ( VAR_268 ) ( TYPE_44 ) METHOD_72 ( VAR_269 , METHOD_73 ( ) , "MATLAB_HDR.CellType:%.20g" , ( TYPE_45 ) VAR_270 ) ; ( TYPE_46 ) METHOD_74 ( VAR_271 , 4 , ( unsigned TYPE_47 * ) & VAR_272 ) ; VAR_273 : switch ( VAR_274 ) { case VAR_275 : case VAR_276 : VAR_277 = 8 ; if ( VAR_278 . VAR_279 & VAR_280 ) VAR_281 -> VAR_282 = 1 ; else VAR_283 -> VAR_284 = 8 ; VAR_285 = ( TYPE_48 ) VAR_286 . VAR_287 ; break ; case VAR_288 : case VAR_289 : VAR_290 = 16 ; VAR_291 -> VAR_292 = 16 ; VAR_293 = ( TYPE_49 ) ( 2 * VAR_294 . VAR_295 ) ; break ; case VAR_296 : case VAR_297 : VAR_298 = 32 ; VAR_299 -> VAR_300 = 32 ; VAR_301 = ( TYPE_50 ) ( 4 * VAR_302 . VAR_303 ) ; break ; case VAR_304 : case VAR_305 : VAR_306 = 64 ; VAR_307 -> VAR_308 = 64 ; VAR_309 = ( TYPE_51 ) ( 8 * VAR_310 . VAR_311 ) ; break ; case VAR_312 : VAR_313 = 32 ; VAR_314 -> VAR_315 = 32 ; ( TYPE_52 ) METHOD_75 ( VAR_316 , "quantum:format" , "floating-point" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_53 ) ( 4 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 64 ; VAR_325 -> VAR_326 = 64 ; ( TYPE_54 ) METHOD_76 ( VAR_327 , "quantum:format" , "floating-point" ) ; METHOD_77 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_78 ( VAR_328 , "IncompatibleSizeOfDouble" ) ; if ( VAR_329 . VAR_330 & VAR_331 ) { } VAR_332 = ( TYPE_57 ) ( 8 * VAR_333 . VAR_334 ) ; break ; default : METHOD_79 ( VAR_335 , "UnsupportedCellTypeInTheMatrix" ) ; } ( TYPE_58 ) VAR_336 ; VAR_337 -> VAR_338 = VAR_339 . VAR_340 ; VAR_341 -> VAR_342 = VAR_343 . VAR_344 ; VAR_345 = METHOD_80 ( VAR_346 , VAR_347 ) ; if ( VAR_348 == ( TYPE_59 * ) VAR_349 ) METHOD_81 ( VAR_350 , "MemoryAllocationFailed" ) ; VAR_351 = 1 ; VAR_352 -> VAR_353 = VAR_354 << VAR_355 -> VAR_356 ; if ( VAR_357 -> VAR_358 == 0 || VAR_359 -> VAR_360 == 0 ) goto VAR_361 ; if ( ( VAR_362 . VAR_363 == 8 ) && ( ( VAR_364 . VAR_365 & VAR_366 ) == 0 ) ) { VAR_367 -> VAR_368 = VAR_369 ; METHOD_82 ( VAR_370 , VAR_371 , VAR_372 ) ; } if ( VAR_373 -> VAR_374 ) { TYPE_60 VAR_375 = VAR_376 -> VAR_377 ; VAR_378 -> VAR_379 = VAR_380 -> VAR_381 ; VAR_382 -> VAR_383 = VAR_384 ; goto VAR_385 ; } VAR_386 = METHOD_83 ( VAR_387 , VAR_388 -> VAR_389 , VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 == VAR_394 ) return ( METHOD_84 ( VAR_395 ) ) ; VAR_396 = ( unsigned TYPE_61 * ) METHOD_85 ( ( TYPE_62 ) ( VAR_397 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_398 == VAR_399 ) METHOD_86 ( VAR_400 , "MemoryAllocationFailed" ) ;  VAR_401 = 0 ;  VAR_402 = 0 ; if ( VAR_403 == VAR_404 || VAR_405 == VAR_406 ) { METHOD_87 ( VAR_407 , VAR_408 -> VAR_409 , VAR_410 . VAR_411 , VAR_412 . VAR_413 , VAR_414 , VAR_415 , VAR_416 , & VAR_417 -> VAR_418 , & VAR_419 -> VAR_420 ) ; } if ( VAR_421 == 1 ) VAR_422 = 0 ; do { for ( VAR_423 = 0 ; VAR_424 < ( TYPE_64 ) VAR_425 . VAR_426 ; VAR_427 ++ ) { VAR_428 = METHOD_88 ( VAR_429 , 0 , VAR_430 . VAR_431 - VAR_432 - 1 , VAR_433 -> VAR_434 , 1 , VAR_435 ) ; if ( VAR_436 == ( TYPE_65 * ) VAR_437 ) { if ( VAR_438 ) ( TYPE_66 ) METHOD_89 ( VAR_439 , METHOD_90 ( ) , "MATsetimagepixelsreturnsunexpectedNULLonarow%u." , ( unsigned ) ( VAR_440 . VAR_441 - VAR_442 - 1 ) ) ; goto VAR_443 ; } if ( METHOD_91 ( VAR_444 , VAR_445 , ( unsigned TYPE_67 * ) VAR_446 ) != ( TYPE_68 ) VAR_447 ) { if ( VAR_448 ) ( TYPE_69 ) METHOD_92 ( VAR_449 , METHOD_93 ( ) , "MATcannotreadscanrow%ufromafile." , ( unsigned ) ( VAR_450 . VAR_451 - VAR_452 - 1 ) ) ; goto VAR_453 ; } if ( ( VAR_454 == VAR_455 || VAR_456 == VAR_457 ) && ( VAR_458 . VAR_459 & VAR_460 ) ) { METHOD_94 ( ( unsigned TYPE_70 * ) VAR_461 , VAR_462 ) ; if ( METHOD_95 ( VAR_463 , ( TYPE_71 * ) VAR_464 , VAR_465 , VAR_466 [ VAR_467 ] , VAR_468 , VAR_469 ) <= 0 ) { VAR_470 : if ( VAR_471 ) ( TYPE_72 ) METHOD_96 ( VAR_472 , METHOD_97 ( ) , "MATfailedtoImportQuantumPixelsforarow%u" , ( unsigned ) ( VAR_473 . VAR_474 - VAR_475 - 1 ) ) ; break ; } } else { if ( METHOD_98 ( VAR_476 , ( TYPE_73 * ) VAR_477 , VAR_478 , VAR_479 [ VAR_480 ] , VAR_481 , VAR_482 ) <= 0 ) goto VAR_483 ; if ( VAR_484 <= 1 && ( VAR_485 == VAR_486 || VAR_487 == VAR_488 || VAR_489 == VAR_490 || VAR_491 == VAR_492 ) ) METHOD_99 ( VAR_493 , VAR_494 , VAR_495 . VAR_496 ) ; } if ( ! METHOD_100 ( VAR_497 , VAR_498 ) ) { if ( VAR_499 ) ( TYPE_74 ) METHOD_101 ( VAR_500 , METHOD_102 ( ) , "MATfailedtosyncimagepixelsforarow%u" , ( unsigned ) ( VAR_501 . VAR_502 - VAR_503 - 1 ) ) ; goto VAR_504 ; } } } while ( VAR_505 -- >= 2 ) ; VAR_506 = METHOD_103 ( VAR_507 ) ; VAR_508 : if ( VAR_509 . VAR_510 & VAR_511 ) { VAR_512 = METHOD_104 ( VAR_513 ) ; VAR_514 = METHOD_105 ( VAR_515 ) ; if ( VAR_516 == VAR_517 || VAR_518 == VAR_519 ) { METHOD_106 ( VAR_520 , VAR_521 -> VAR_522 , VAR_523 . VAR_524 , VAR_525 . VAR_526 , VAR_527 , VAR_528 , VAR_529 , & VAR_530 , & VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_75 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_107 ( VAR_539 , VAR_540 , ( TYPE_76 * ) VAR_541 ) ; METHOD_108 ( VAR_542 , ( TYPE_77 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } if ( VAR_548 == VAR_549 ) for ( VAR_550 = 0 ; VAR_551 < ( TYPE_78 ) VAR_552 . VAR_553 ; VAR_554 ++ ) { METHOD_109 ( VAR_555 , VAR_556 , ( TYPE_79 * ) VAR_557 ) ; METHOD_110 ( VAR_558 , ( TYPE_80 * ) VAR_559 , VAR_560 , VAR_561 , VAR_562 , VAR_563 ) ; } } if ( ( VAR_564 . VAR_565 == 8 ) && ( ( VAR_566 . VAR_567 & VAR_568 ) == 0 ) ) VAR_569 -> VAR_570 = VAR_571 ; if ( VAR_572 -> VAR_573 == 1 ) VAR_574 -> VAR_575 = VAR_576 ; if ( VAR_577 == VAR_578 ) VAR_579 = VAR_580 ; VAR_581 = METHOD_111 ( VAR_582 , 90.0 , VAR_583 ) ; if ( VAR_584 != ( TYPE_81 * ) VAR_585 ) { VAR_586 -> VAR_587 . VAR_588 = 0 ; VAR_589 -> VAR_590 . VAR_591 = 0 ; VAR_592 = VAR_593 -> VAR_594 ; VAR_595 -> VAR_596 = VAR_597 -> VAR_598 ; VAR_599 -> VAR_600 = VAR_601 -> VAR_602 ; VAR_603 -> VAR_604 = VAR_605 ; METHOD_112 ( & VAR_606 , VAR_607 ) ; METHOD_113 ( & VAR_608 ) ; } VAR_609 : if ( VAR_610 != VAR_611 ) if ( VAR_612 != VAR_613 ) { METHOD_114 ( & VAR_614 ) ; if ( VAR_615 ) { if ( VAR_616 -> VAR_617 ) { METHOD_115 ( VAR_618 -> VAR_619 ) ; VAR_620 -> VAR_621 = VAR_622 ; ( TYPE_82 ) METHOD_116 ( VAR_623 -> VAR_624 ) ; } } } METHOD_117 ( VAR_625 , VAR_626 , VAR_627 ) ; if ( VAR_628 -> VAR_629 == ( TYPE_83 * ) VAR_630 ) break ; VAR_631 = METHOD_118 ( VAR_632 ) ; VAR_633 -> VAR_634 = VAR_635 -> VAR_636 = 0 ; VAR_637 -> VAR_638 = 0 ; METHOD_119 ( VAR_639 ) ; VAR_640 = VAR_641 ; if ( -- VAR_642 > 0 ) { VAR_643 = VAR_644 ; if ( VAR_645 == VAR_646 ) VAR_647 = VAR_648 ; goto VAR_649 ; } if ( ( VAR_650 != VAR_651 ) && ( VAR_652 != VAR_653 ) ) { METHOD_120 ( & VAR_654 ) ; if ( VAR_655 ) { if ( VAR_656 -> VAR_657 ) { METHOD_121 ( VAR_658 -> VAR_659 ) ; VAR_660 -> VAR_661 = VAR_662 ; ( TYPE_84 ) METHOD_122 ( VAR_663 -> VAR_664 ) ; } } } } METHOD_123 ( VAR_665 ) ; VAR_666 : VAR_667 = METHOD_124 ( VAR_668 ) ; METHOD_125 ( VAR_669 ) ; { TYPE_85 * VAR_670 ; TYPE_86 VAR_671 = 0 ; VAR_672 = VAR_673 ; VAR_674 = VAR_675 ; while ( VAR_676 != ( TYPE_87 * ) VAR_677 ) { TYPE_88 * VAR_678 = VAR_679 ; if ( ( VAR_680 -> VAR_681 == 0 ) || ( VAR_682 -> VAR_683 == 0 ) ) { VAR_684 = VAR_685 -> VAR_686 ; METHOD_126 ( & VAR_687 ) ; } else { VAR_688 = VAR_689 ; VAR_690 = VAR_691 -> VAR_692 ; } } for ( VAR_693 = VAR_694 ; VAR_695 != ( TYPE_89 * ) VAR_696 ; VAR_697 = VAR_698 -> VAR_699 ) VAR_700 -> VAR_701 = VAR_702 ++ ; } if ( VAR_703 != VAR_704 ) { if ( VAR_705 -> VAR_706 ) { METHOD_127 ( VAR_707 -> VAR_708 ) ; VAR_709 -> VAR_710 = VAR_711 ; ( TYPE_90 ) METHOD_128 ( VAR_712 -> VAR_713 ) ; } METHOD_129 ( VAR_714 ) ; VAR_715 = VAR_716 ; } if ( VAR_717 ) ( TYPE_91 ) METHOD_130 ( VAR_718 , METHOD_131 ( ) , "return" ) ; if ( VAR_719 == VAR_720 ) METHOD_132 ( VAR_721 , "ImproperImageHeader" ) ; return ( VAR_722 ) ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 ; if ( VAR_2 < 0 ) return VAR_3 ; METHOD_1 ( ) ; METHOD_2 ( & STRUCT_OR_UNION_4 -> VAR_4 ) ; VAR_5 = METHOD_3 ( & STRUCT_OR_UNION_5 -> VAR_6 , VAR_7 ) ; if ( VAR_8 )  METHOD_4 ( VAR_9 ) ;  METHOD_5 ( & STRUCT_OR_UNION_6 -> VAR_10 ) ; METHOD_6 ( ) ; return VAR_11 ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 2048 ] ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 = 0 ; TYPE_6 VAR_5 = 0 ; TYPE_7 VAR_6 = - 1 ; unsigned TYPE_8 VAR_7 = 0 ; unsigned TYPE_9 VAR_8 = 0 ; TYPE_10 * VAR_9 ; unsigned TYPE_11 VAR_10 = 2048 ; unsigned TYPE_12 VAR_11 = 0 ; TYPE_13 * VAR_12 ; unsigned TYPE_14 VAR_13 = 2048 ; unsigned TYPE_15 VAR_14 = 0 ; TYPE_16 VAR_15 [ 32 ] ; unsigned TYPE_17 VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 ) ; VAR_19 = METHOD_2 ( VAR_20 ) ; VAR_21 [ 0 ] = '\\0' ; VAR_22 = 0 ; while ( ( VAR_23 = METHOD_3 ( VAR_24 , VAR_25 , 2048 , 5000 , VAR_26 ) ) > 0 ) { if ( VAR_27 == 0 ) { TYPE_18 VAR_28 ; TYPE_19 VAR_29 = 0 ; TYPE_20 VAR_30 = 0 ; TYPE_21 VAR_31 = 0 ; if ( VAR_32 + VAR_33 > VAR_34 ) { VAR_35 = METHOD_4 ( VAR_36 , VAR_37 + VAR_38 ) ; VAR_39 = VAR_40 + VAR_41 ; } METHOD_5 ( VAR_42 + VAR_43 , VAR_44 , VAR_45 ) ; VAR_46 += VAR_47 ; VAR_48 = 0 ; while ( VAR_49 < ( ( TYPE_22 ) VAR_50 - 1 ) && ( VAR_51 == 0 ) ) { if ( VAR_52 [ VAR_53 ] == '\\r' ) { VAR_54 ++ ; if ( VAR_55 [ VAR_56 ] == '\\n' ) { VAR_57 ++ ; if ( VAR_58 < ( TYPE_23 ) VAR_59 && VAR_60 [ VAR_61 ] == '\\r' ) { VAR_62 ++ ; if ( VAR_63 < ( TYPE_24 ) VAR_64 && VAR_65 [ VAR_66 ] == '\\n' ) { VAR_67 = VAR_68 + 1 ; } } } } else if ( VAR_69 [ VAR_70 ] == '\\n' ) { VAR_71 ++ ; if ( VAR_72 [ VAR_73 ] == '\\n' ) { VAR_74 = VAR_75 + 1 ; } } VAR_76 ++ ; } if ( VAR_77 == 0 ) continue ; for ( VAR_78 = 0 ; VAR_79 < VAR_80 - 1 ; VAR_81 ++ ) { if ( VAR_82 <= VAR_83 && VAR_84 [ VAR_85 ] == ':' ) { VAR_86 = VAR_87 ; while ( VAR_88 < ( VAR_89 - 1 ) && ( VAR_90 [ VAR_91 + 1 ] == '' || VAR_92 [ VAR_93 + 1 ] == '\\t' ) ) VAR_94 ++ ; VAR_95 = VAR_96 + 1 ; } else if ( VAR_97 [ VAR_98 ] == '\\r' || VAR_99 [ VAR_100 ] == '\\n' ) { if ( VAR_101 > VAR_102 && VAR_103 > VAR_104 ) { TYPE_25 TYPE_26 TYPE_27 ( "header=\'%.*s\',value=\'%.*s\'\\n" , VAR_105 - VAR_106 , VAR_107 + VAR_108 , VAR_109 - VAR_110 , VAR_111 + VAR_112 ) ; if ( 0 == METHOD_6 ( VAR_113 + VAR_114 , "content-length" , VAR_115 - VAR_116 ) ) { VAR_117 = METHOD_7 ( VAR_118 + VAR_119 ) ; TYPE_28 TYPE_29 TYPE_30 ( "Content-Length:%d\\n" , VAR_120 ) ; } else if ( 0 == METHOD_8 ( VAR_121 + VAR_122 , "transfer-encoding" , VAR_123 - VAR_124 ) && 0 == METHOD_9 ( VAR_125 + VAR_126 , "chunked" , 7 ) ) { TYPE_31 TYPE_32 TYPE_33 ( "chunkedtransfer-encoding!\\n" ) ; VAR_127 = 1 ; } }  while ( VAR_128 [ VAR_129 ] == '\\r' || VAR_130 [ VAR_131 ] == '\\n' )  VAR_132 ++ ; VAR_133 = VAR_134 ; VAR_135 = VAR_136 ; VAR_137 = 0 ; } } VAR_138 = VAR_139 - VAR_140 ; METHOD_10 ( VAR_141 , VAR_142 + VAR_143 , VAR_144 ) ; } if ( VAR_145 ) { if ( VAR_146 ) { TYPE_34 VAR_147 = 0 ; while ( VAR_148 < VAR_149 ) { if ( VAR_150 == 0 ) { if ( VAR_151 == 0 ) { if ( VAR_152 < VAR_153 && VAR_154 [ VAR_155 ] == '\\r' ) VAR_156 ++ ; if ( VAR_157 < VAR_158 && VAR_159 [ VAR_160 ] == '\\n' ) VAR_161 ++ ; } while ( VAR_162 < VAR_163 && METHOD_11 ( VAR_164 [ VAR_165 ] ) && VAR_166 < ( sizeof ( VAR_167 ) - 1 ) ) { VAR_168 [ VAR_169 ++ ] = VAR_170 [ VAR_171 ] ; VAR_172 [ VAR_173 ] = '\\0' ; VAR_174 ++ ; } while ( VAR_175 < VAR_176 && VAR_177 [ VAR_178 ] != '\\r' && VAR_179 [ VAR_180 ] != '\\n' ) VAR_181 ++ ; if ( VAR_182 < VAR_183 && VAR_184 [ VAR_185 ] == '\\r' ) VAR_186 ++ ; if ( VAR_187 < VAR_188 && VAR_189 [ VAR_190 ] == '\\n' ) { unsigned TYPE_35 VAR_191 ; for ( VAR_192 = 0 ; VAR_193 < VAR_194 ; VAR_195 ++ ) { if ( VAR_196 [ VAR_197 ] >= '0' && VAR_198 [ VAR_199 ] <= '9' ) VAR_200 = ( VAR_201 << 4 ) + ( VAR_202 [ VAR_203 ] - '0' ) ; else VAR_204 = ( VAR_205 << 4 ) + ( ( VAR_206 [ VAR_207 ] | 32 ) - 'a' + 10 ) ; } VAR_208 [ 0 ] = '\\0' ; VAR_209 = 0 ; VAR_210 ++ ; } else { continue ; } TYPE_36 TYPE_37 TYPE_38 ( "chunksize=%u(%x)\\n" , VAR_211 , VAR_212 ) ; if ( VAR_213 == 0 ) { TYPE_39 TYPE_40 TYPE_41 ( "endofHTTPcontent-%d%d\\n" , VAR_214 , VAR_215 ) ; goto VAR_216 ; } } VAR_217 = ( ( TYPE_42 ) VAR_218 < ( VAR_219 - VAR_220 ) ) ? VAR_221 : ( unsigned TYPE_43 ) ( VAR_222 - VAR_223 ) ; if ( ( VAR_224 + VAR_225 ) > VAR_226 ) { if ( VAR_227 >= ( TYPE_44 ) ( VAR_228 + VAR_229 ) ) { VAR_230 = VAR_231 ; } else { VAR_232 = VAR_233 + VAR_234 ; } VAR_235 = ( TYPE_45 * ) METHOD_12 ( ( TYPE_46 * ) VAR_236 , VAR_237 ) ; } METHOD_13 ( VAR_238 + VAR_239 , VAR_240 + VAR_241 , VAR_242 ) ; VAR_243 += VAR_244 ; VAR_245 += VAR_246 ; VAR_247 -= VAR_248 ; } } else { if ( VAR_249 > 0 && ( TYPE_47 ) ( VAR_250 + VAR_251 ) > VAR_252 ) { VAR_253 = VAR_254 - VAR_255 ; } if ( VAR_256 + VAR_257 > VAR_258 ) { if ( VAR_259 >= ( TYPE_48 ) ( VAR_260 + VAR_261 ) ) { VAR_262 = VAR_263 ; } else { VAR_264 = VAR_265 + VAR_266 ; } VAR_267 = ( TYPE_49 * ) METHOD_14 ( ( TYPE_50 * ) VAR_268 , VAR_269 ) ; } METHOD_15 ( VAR_270 + VAR_271 , VAR_272 , VAR_273 ) ; VAR_274 += VAR_275 ; } } if ( VAR_276 > 0 && ( TYPE_51 ) VAR_277 >= VAR_278 ) { TYPE_52 TYPE_53 TYPE_54 ( "EndofHTTPcontent\\n" ) ; break ; } } VAR_279 : METHOD_16 ( VAR_280 ) ; VAR_281 = VAR_282 ; * VAR_283 = VAR_284 ; if ( VAR_285 == 0 ) { METHOD_17 ( VAR_286 ) ; VAR_287 = VAR_288 ; } return VAR_289 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 * VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 , TYPE_5 * VAR_6 , TYPE_6 VAR_7 , TYPE_7 VAR_8 ) { struct STRUCT_OR_UNION_2 * VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ; struct STRUCT_OR_UNION_4 * VAR_11 ; TYPE_8 VAR_12 ; TYPE_9 * VAR_13 , * VAR_14 , * VAR_15 ; struct STRUCT_OR_UNION_5 * VAR_16 ; TYPE_10 VAR_17 ; TYPE_11 VAR_18 [ ] = VAR_19 ; TYPE_12 TYPE_13 const TYPE_14 VAR_20 [ ] = VAR_21 ; struct STRUCT_OR_UNION_6 * VAR_22 ; struct STRUCT_OR_UNION_7 * VAR_23 ; struct STRUCT_OR_UNION_8 * VAR_24 ; TYPE_15 TYPE_16 const TYPE_17 VAR_25 [ ] = VAR_26 ; TYPE_18 TYPE_19 TYPE_20 VAR_27 ; const TYPE_21 VAR_28 [ ] = VAR_29 ; TYPE_22 TYPE_23 struct STRUCT_OR_UNION_9 * VAR_30 ; VAR_31 = & VAR_32 -> VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; VAR_37 = VAR_38 -> VAR_39 ; if ( ( VAR_40 = ( TYPE_24 * ) METHOD_1 ( 1 , VAR_41 ) ) == VAR_42 ) return VAR_43 ; VAR_44 = VAR_45 ; if ( ! ( METHOD_2 ( VAR_46 , sizeof ( VAR_47 ) ) && METHOD_3 ( & VAR_48 -> VAR_49 , VAR_50 ) && METHOD_4 ( VAR_51 ) ) ) goto VAR_52 ; if ( ! ( METHOD_5 ( VAR_53 ) && METHOD_6 ( VAR_54 ) && METHOD_7 ( VAR_55 , VAR_56 ) && VAR_57 ) ) goto VAR_58 ; if ( ! ( METHOD_8 ( VAR_59 ) && METHOD_9 ( VAR_60 ) && METHOD_10 ( VAR_61 , VAR_62 ) && VAR_63 ) ) goto VAR_64 ; if ( ! ( METHOD_11 ( VAR_65 ) && METHOD_12 ( VAR_66 ? 0 : VAR_67 -> VAR_68 ) && VAR_69 ) ) goto VAR_70 ; if ( VAR_71 ) goto VAR_72 ; if ( VAR_73 -> VAR_74 && * VAR_75 -> VAR_76 != '\\0' ) { if ( ! ( METHOD_13 ( VAR_77 ) && METHOD_14 ( VAR_78 -> VAR_79 , METHOD_15 ( VAR_80 -> VAR_81 ) ) && VAR_82 ) ) goto VAR_83 ; } if ( VAR_84 -> VAR_85 && * VAR_86 -> VAR_87 != '\\0' ) { if ( ! ( METHOD_16 ( VAR_88 ) && METHOD_17 ( VAR_89 -> VAR_90 , METHOD_18 ( VAR_91 -> VAR_92 ) ) && VAR_93 ) ) goto VAR_94 ; } if ( VAR_95 -> VAR_96 . VAR_97 && VAR_98 -> VAR_99 ) { if ( ! ( METHOD_19 ( VAR_100 ) && METHOD_20 ( VAR_101 -> VAR_102 ) && METHOD_21 ( VAR_103 -> VAR_104 ) && VAR_105 ) ) goto VAR_106 ; } METHOD_22 ( VAR_107 , & VAR_108 -> VAR_109 , VAR_110 ) { VAR_111 = METHOD_23 ( VAR_112 -> VAR_113 ) ;  METHOD_24 ( VAR_114 != VAR_115 ) ;  if ( ! ( METHOD_25 ( VAR_116 ) && METHOD_26 ( VAR_117 -> VAR_118 + 1 ) && METHOD_27 ( VAR_119 ) && METHOD_28 ( & VAR_120 -> VAR_121 , VAR_122 -> VAR_123 ) ) ) goto VAR_124 ; if ( VAR_125 -> VAR_126 == 0 ) { if ( ! ( METHOD_29 ( VAR_127 ) && METHOD_30 ( 0 ) ) ) goto VAR_128 ; } else { if ( ! ( METHOD_31 ( VAR_129 ) && METHOD_32 ( VAR_130 -> VAR_131 ) ) ) goto VAR_132 ; } if ( ! ( METHOD_33 ( 0 ) && VAR_133 ) ) goto VAR_134 ; } if ( VAR_135 -> VAR_136 && * VAR_137 -> VAR_138 != '\\0' ) { if ( ! ( METHOD_34 ( VAR_139 ) && METHOD_35 ( VAR_140 -> VAR_141 , METHOD_36 ( VAR_142 -> VAR_143 ) ) && VAR_144 ) ) goto VAR_145 ; } TYPE_25 TYPE_26 if ( VAR_146 -> VAR_147 != 0 ) { if ( ! ( METHOD_37 ( VAR_148 ) && METHOD_38 ( VAR_149 , sizeof ( VAR_150 ) ) && METHOD_39 ( VAR_151 ) && METHOD_40 ( VAR_152 -> VAR_153 ) && VAR_154 ) ) { goto VAR_155 ; } } METHOD_41 ( VAR_156 , & VAR_157 -> VAR_158 , VAR_159 ) { if ( ! ( METHOD_42 ( VAR_160 ) && METHOD_43 ( VAR_161 , sizeof ( VAR_162 ) ) && METHOD_44 ( VAR_163 ) && METHOD_45 ( VAR_164 -> VAR_165 ) && METHOD_46 ( VAR_166 -> VAR_167 ) && VAR_168 ) ) { goto VAR_169 ; } } METHOD_47 ( VAR_170 , & VAR_171 -> VAR_172 , VAR_173 ) { if ( ! ( METHOD_48 ( VAR_174 ) && METHOD_49 ( VAR_175 , sizeof ( VAR_176 ) ) && METHOD_50 ( VAR_177 ) && METHOD_51 ( VAR_178 -> VAR_179 ) && METHOD_52 ( METHOD_53 ( VAR_180 -> VAR_181 ) ) && METHOD_54 ( VAR_182 -> VAR_183 , METHOD_55 ( VAR_184 -> VAR_185 ) ) && VAR_186 ) ) goto VAR_187 ; } METHOD_56 ( VAR_188 , & VAR_189 -> VAR_190 , VAR_191 ) { if ( ! ( METHOD_57 ( VAR_192 ) && METHOD_58 ( VAR_193 , sizeof ( VAR_194 ) ) && METHOD_59 ( VAR_195 ) && METHOD_60 ( VAR_196 -> VAR_197 ) && METHOD_61 ( VAR_198 -> VAR_199 , VAR_200 -> VAR_201 ) && VAR_202 ) ) goto VAR_203 ; } TYPE_27 TYPE_28 if ( ! ( METHOD_62 ( VAR_204 ) && METHOD_63 ( VAR_205 , sizeof ( VAR_206 ) ) && METHOD_64 ( VAR_207 ) && METHOD_65 ( ( VAR_208 -> VAR_209 ) ? 3 : 1 ) && METHOD_66 ( VAR_210 -> VAR_211 ) && VAR_212 ) ) goto VAR_213 ; if ( ! ( METHOD_67 ( VAR_214 ) && METHOD_68 ( VAR_215 , sizeof ( VAR_216 ) ) && METHOD_69 ( VAR_217 ) && METHOD_70 ( VAR_218 -> VAR_219 . VAR_220 | ( VAR_221 -> VAR_222 . VAR_223 << 1 ) ) && METHOD_71 ( VAR_224 -> VAR_225 . VAR_226 ) && METHOD_72 ( VAR_227 -> VAR_228 . VAR_229 ) && VAR_230 ) ) goto VAR_231 ; if ( VAR_232 -> VAR_233 ) { if ( ! ( METHOD_73 ( VAR_234 ) && METHOD_74 ( VAR_235 , sizeof ( VAR_236 ) ) && METHOD_75 ( VAR_237 ) && METHOD_76 ( VAR_238 -> VAR_239 ) && VAR_240 ) ) goto VAR_241 ; } if ( VAR_242 -> VAR_243 . VAR_244 ) { if ( ! ( METHOD_77 ( VAR_245 ) && METHOD_78 ( VAR_246 , sizeof ( VAR_247 ) ) && METHOD_79 ( VAR_248 ) && METHOD_80 ( ( ( ( ( 2 - VAR_249 -> VAR_250 . VAR_251 ) % ( 1 << 1 ) ) << 0 ) | ( ( VAR_252 -> VAR_253 . VAR_254 % ( 1 << 1 ) ) << 1 ) | ( ( VAR_255 -> VAR_256 . VAR_257 % ( 1 << 1 ) ) << 2 ) | ( ( VAR_258 -> VAR_259 . VAR_260 % ( 1 << 1 ) ) << 3 ) ) ) && METHOD_81 ( VAR_261 -> VAR_262 . VAR_263 ) && METHOD_82 ( VAR_264 -> VAR_265 . VAR_266 ) ) ) goto VAR_267 ; if ( VAR_268 -> VAR_269 . VAR_270 != VAR_271 ) { if ( ! ( METHOD_83 ( ( ( ( ( VAR_272 -> VAR_273 . VAR_274 == VAR_275 ) ? 1 : 0 ) << 7 ) | ( ( ( VAR_276 -> VAR_277 . VAR_278 == VAR_279 ) ? 0 : 1 ) << 6 ) | ( ( VAR_280 -> VAR_281 . VAR_282 % ( 1 << 2 ) ) << 4 ) | ( ( VAR_283 -> VAR_284 . VAR_285 % ( 1 << 2 ) ) << 0 ) ) ) && METHOD_84 ( VAR_286 -> VAR_287 . VAR_288 ) && METHOD_85 ( VAR_289 -> VAR_290 . VAR_291 ) ) ) goto VAR_292 ; } if ( ! ( VAR_293 ) ) goto VAR_294 ; } TYPE_29 TYPE_30 if ( VAR_295 -> VAR_296 ) { if ( ! ( METHOD_86 ( VAR_297 ) && METHOD_87 ( VAR_298 , sizeof ( VAR_299 ) ) && METHOD_88 ( VAR_300 ) && METHOD_89 ( VAR_301 -> VAR_302 ) && METHOD_90 ( VAR_303 -> VAR_304 ) && VAR_305 ) ) goto VAR_306 ; METHOD_91 ( VAR_307 , VAR_308 ) if ( VAR_309 ) { if ( ! ( METHOD_92 ( VAR_310 ) && METHOD_93 ( VAR_311 , sizeof ( VAR_312 ) ) && METHOD_94 ( VAR_313 ) && METHOD_95 ( VAR_314 , ( METHOD_96 ( VAR_315 ) > 32 ) ? 32 : METHOD_97 ( VAR_316 ) ) && VAR_317 ) ) goto VAR_318 ; } if ( VAR_319 -> VAR_320 & VAR_321 ) { METHOD_98 ( VAR_322 -> VAR_323 , VAR_324 ) ; METHOD_99 ( VAR_325 -> VAR_326 , VAR_327 ) ; METHOD_100 ( VAR_328 -> VAR_329 , VAR_330 ) ; METHOD_101 ( VAR_331 -> VAR_332 , VAR_333 ) ; METHOD_102 ( VAR_334 -> VAR_335 , VAR_336 ) ; METHOD_103 ( VAR_337 -> VAR_338 , VAR_339 ) ; METHOD_104 ( VAR_340 -> VAR_341 , VAR_342 ) ; } for ( VAR_343 = 0 ; VAR_344 < VAR_345 ; VAR_346 ++ ) { if ( VAR_347 -> VAR_348 [ VAR_349 ] . VAR_350 == VAR_351 + 1 ) { if ( ! ( METHOD_105 ( VAR_352 ) && METHOD_106 ( VAR_353 , sizeof ( VAR_354 ) ) && METHOD_107 ( VAR_355 ) && METHOD_108 ( VAR_356 -> VAR_357 [ VAR_358 ] . VAR_359 ) && METHOD_109 ( VAR_360 -> VAR_361 [ VAR_362 ] . VAR_363 , VAR_364 -> VAR_365 [ VAR_366 ] . VAR_367 ) && VAR_368 ) ) goto VAR_369 ; } } for ( VAR_370 = 0 ; VAR_371 < VAR_372 ; VAR_373 ++ ) { if ( VAR_374 -> VAR_375 [ VAR_376 ] . VAR_377 == VAR_378 + 1 ) { if ( ! ( METHOD_110 ( VAR_379 ) && METHOD_111 ( VAR_380 , sizeof ( VAR_381 ) ) && METHOD_112 ( VAR_382 ) && METHOD_113 ( ( ( ( VAR_383 -> VAR_384 [ VAR_385 ] . VAR_386 % ( 1 << 8 ) ) << 24 ) | ( ( VAR_387 -> VAR_388 [ VAR_389 ] . VAR_390 % ( 1 << 1 ) ) << 23 ) | ( ( VAR_391 -> VAR_392 [ VAR_393 ] . VAR_394 % ( 1 << 1 ) ) << 22 ) | ( ( VAR_395 -> VAR_396 [ VAR_397 ] . VAR_398 % ( 1 << 12 ) ) << 9 ) | ( ( VAR_399 -> VAR_400 [ VAR_401 ] . VAR_402 % ( 1 << 3 ) ) << 6 ) | ( ( VAR_403 -> VAR_404 [ VAR_405 ] . VAR_406 % ( 1 << 6 ) ) << 0 ) ) ) && VAR_407 ) ) goto VAR_408 ; } } if ( ( VAR_409 -> VAR_410 . VAR_411 == VAR_412 ) || ( VAR_413 -> VAR_414 . VAR_415 == VAR_416 ) ) { TYPE_31 VAR_417 = 0 , VAR_418 = 0 ; if ( ! ( METHOD_114 ( VAR_419 ) && METHOD_115 ( VAR_420 , sizeof ( VAR_421 ) ) && METHOD_116 ( VAR_422 ) ) ) goto VAR_423 ; switch ( VAR_424 -> VAR_425 . VAR_426 ) { case VAR_427 : VAR_428 = 0 ; switch ( VAR_429 -> VAR_430 . VAR_431 ) { case VAR_432 : VAR_433 = 1 ; break ; case VAR_434 : VAR_435 = 2 ; break ; case VAR_436 : VAR_437 = 3 ; break ; default : VAR_438 = 0 ; break ; } break ; case VAR_439 : VAR_440 = 1 ; switch ( VAR_441 -> VAR_442 . VAR_443 ) { case VAR_444 : VAR_445 = 1 ; break ; case VAR_446 : VAR_447 = 2 ; break ; case VAR_448 : VAR_449 = 3 ; break ; default : VAR_450 = 0 ; break ; } break ; } if ( ! ( METHOD_117 ( ( ( ( VAR_451 % ( 1 << 2 ) ) << 6 ) | ( ( VAR_452 % ( 1 << 2 ) ) << 4 ) | ( ( VAR_453 -> VAR_454 . VAR_455 % ( 1 << 4 ) ) << 0 ) ) ) && METHOD_118 ( VAR_456 -> VAR_457 . VAR_458 ) && VAR_459 ) ) goto VAR_460 ; } } TYPE_32 TYPE_33 METHOD_119 ( VAR_461 , & VAR_462 -> VAR_463 , VAR_464 ) { if ( ! ( METHOD_120 ( VAR_465 ) && METHOD_121 ( VAR_466 -> VAR_467 , sizeof ( VAR_468 -> VAR_469 ) ) && METHOD_122 ( VAR_470 -> VAR_471 ) && METHOD_123 ( VAR_472 -> VAR_473 , VAR_474 -> VAR_475 ) && VAR_476 ) ) goto VAR_477 ; } VAR_478 : if ( ! ( METHOD_124 ( VAR_479 ) && VAR_480 ) ) goto VAR_481 ; if ( METHOD_125 ( VAR_482 , VAR_483 , ( TYPE_34 * ) VAR_484 , VAR_485 - VAR_486 ) == - 1 ) { METHOD_126 ( "lldp" , "unabletosendpacketonrealdevicefor%s" , VAR_487 -> VAR_488 ) ; METHOD_127 ( VAR_489 ) ; return VAR_490 ; } VAR_491 -> VAR_492 ++ ; if ( ! VAR_493 && ( VAR_494 = ( struct STRUCT_OR_UNION_10 * ) METHOD_128 ( sizeof ( TYPE_35 ) + VAR_495 - VAR_496 ) ) != VAR_497 ) { VAR_498 -> VAR_499 = VAR_500 - VAR_501 ; METHOD_129 ( & VAR_502 -> VAR_503 , VAR_504 , VAR_505 -> VAR_506 ) ; if ( ( VAR_507 -> VAR_508 . VAR_509 == VAR_510 ) || ( VAR_511 -> VAR_512 . VAR_513 -> VAR_514 != VAR_515 -> VAR_516 ) || ( METHOD_130 ( VAR_517 -> VAR_518 . VAR_519 -> VAR_520 , VAR_521 -> VAR_522 , VAR_523 -> VAR_524 ) != 0 ) ) { METHOD_131 ( VAR_525 -> VAR_526 . VAR_527 ) ; VAR_528 -> VAR_529 . VAR_530 = VAR_531 ; VAR_532 -> VAR_533 . VAR_534 = METHOD_132 ( VAR_535 ) ; } else METHOD_133 ( VAR_536 ) ; } METHOD_134 ( VAR_537 ) ; return 0 ; VAR_538 : METHOD_135 ( VAR_539 ) ; return VAR_540 ; }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , const unsigned TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { const unsigned TYPE_4 * VAR_4 = VAR_5 -> VAR_6 ; const TYPE_5 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_6 VAR_10 = VAR_11 -> VAR_12 ; enum VAR_13 VAR_14 ; unsigned TYPE_7 VAR_15 = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; const TYPE_8 * VAR_20 ; TYPE_9 VAR_21 = 0 , VAR_22 = 0 , VAR_23 = 0 , VAR_24 = 0 ; TYPE_10 VAR_25 ; unsigned TYPE_11 VAR_26 = 0 ; VAR_27 0x01 VAR_28 0x02 VAR_29 0x04 VAR_30 0x20 VAR_31 10 unsigned TYPE_12 VAR_32 [ VAR_33 METHOD_1 ; unsigned TYPE_13 VAR_34 [ VAR_35 METHOD_2 ; unsigned TYPE_14 VAR_36 [ VAR_37 METHOD_3 ; VAR_38 10 unsigned TYPE_15 VAR_39 [ VAR_40 METHOD_4 ; if ( VAR_41 > 65535 ) return - VAR_42 ; VAR_43 : METHOD_5 ( "next_op:pc=\\e[32m%zu\\e[m/%zudp=\\e[33m%zu\\e[m/%zuC=%dJ=%d\\n" , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; if ( METHOD_6 ( VAR_50 >= VAR_51 ) ) goto VAR_52 ; VAR_53 = VAR_54 [ VAR_55 METHOD_7 ; if ( METHOD_8 ( VAR_56 + VAR_57 [ VAR_58 METHOD_9 > VAR_59 ) ) goto VAR_60 ; if ( VAR_61 <= VAR_62 ) { unsigned TYPE_16 VAR_63 ; if ( ( VAR_64 & VAR_65 && VAR_66 & VAR_67 ) ||  VAR_68 == VAR_69 ) {  VAR_70 &= ~ VAR_71 ; VAR_72 += VAR_73 [ VAR_74 METHOD_10 ; goto VAR_75 ; } VAR_76 = 0 ; VAR_77 = 2 ; if ( METHOD_11 ( VAR_78 >= VAR_79 - 1 ) ) goto VAR_80 ; VAR_81 = VAR_82 [ VAR_83 ++ METHOD_12 ; if ( METHOD_13 ( ( VAR_84 & 0x1f ) == VAR_85 ) ) goto VAR_86 ; if ( VAR_87 & VAR_88 ) { METHOD_14 ( "-any%02x\\n" , VAR_89 ) ; } else { VAR_90 = VAR_91 [ VAR_92 + 1 METHOD_15 ; VAR_93 |= VAR_94 & VAR_95 ; VAR_96 = VAR_97 ^ VAR_98 ; VAR_99 &= ~ ( VAR_100 & VAR_101 ) ; METHOD_16 ( "-match?%02x%02x%02x\\n" , VAR_102 , VAR_103 , VAR_104 ) ; if ( VAR_105 != 0 ) { if ( VAR_106 & VAR_107 ) { VAR_108 += VAR_109 [ VAR_110 METHOD_17 ; VAR_111 -- ; goto VAR_112 ; } goto VAR_113 ; } } VAR_114 |= VAR_115 ; VAR_116 = VAR_117 [ VAR_118 ++ METHOD_18 ; if ( VAR_119 > 0x7f ) { if ( METHOD_19 ( VAR_120 == VAR_121 ) ) { if ( METHOD_20 ( ! ( VAR_122 & VAR_123 ) ) ) goto VAR_124 ; VAR_125 |= VAR_126 ; if ( METHOD_21 ( 2 > VAR_127 - VAR_128 ) ) goto VAR_129 ; } else { TYPE_17 VAR_130 = VAR_131 - 0x80 ; if ( METHOD_22 ( VAR_132 > 2 ) ) goto VAR_133 ; if ( METHOD_23 ( VAR_134 >= VAR_135 - VAR_136 ) ) goto VAR_137 ; VAR_138 += VAR_139 ; for ( VAR_140 = 0 ; VAR_141 > 0 ; VAR_142 -- ) { VAR_143 <<= 8 ; VAR_144 |= VAR_145 [ VAR_146 ++ METHOD_24 ; } if ( METHOD_25 ( VAR_147 > VAR_148 - VAR_149 ) ) goto VAR_150 ; } } if ( VAR_151 & VAR_152 ) { if ( METHOD_26 ( VAR_153 >= VAR_154 ) ) goto VAR_155 ; VAR_156 [ VAR_157 METHOD_27 = VAR_158 ; VAR_159 [ VAR_160 METHOD_28 = VAR_161 ; if ( ! ( VAR_162 & VAR_163 ) ) { VAR_164 [ VAR_165 METHOD_29 = VAR_166 ; VAR_167 = VAR_168 + VAR_169 ; } else { VAR_170 [ VAR_171 METHOD_30 = 0 ; } VAR_172 ++ ; } METHOD_31 ( "-TAG:%02x%zu%s\\n" , VAR_173 , VAR_174 , VAR_175 & VAR_176 ? "CONS" : "" ) ; VAR_177 = VAR_178 ; } switch ( VAR_179 ) { case VAR_180 : case VAR_181 : VAR_182 = VAR_183 [ VAR_184 [ VAR_185 + 1 METHOD_32 METHOD_33 ( VAR_186 , VAR_187 , VAR_188 , VAR_189 + VAR_190 , VAR_191 ) ; if ( VAR_192 < 0 ) return VAR_193 ; goto VAR_194 ; case VAR_195 : case VAR_196 : case VAR_197 : VAR_198 = VAR_199 [ VAR_200 [ VAR_201 + 2 METHOD_34 METHOD_35 ( VAR_202 , VAR_203 , VAR_204 , VAR_205 + VAR_206 , VAR_207 ) ; if ( VAR_208 < 0 ) return VAR_209 ; goto VAR_210 ; case VAR_211 : case VAR_212 : case VAR_213 : case VAR_214 : case VAR_215 : VAR_216 : if ( ! ( VAR_217 & VAR_218 ) ) { if ( VAR_219 & VAR_220 ) { VAR_221 = METHOD_36 ( VAR_222 , VAR_223 , & VAR_224 , & VAR_225 , & VAR_226 ) ; if ( VAR_227 < 0 ) goto VAR_228 ; } else { VAR_229 += VAR_230 ; } METHOD_37 ( "-LEAF:%zu\\n" , VAR_231 ) ; } VAR_232 += VAR_233 [ VAR_234 METHOD_38 ; goto VAR_235 ; case VAR_236 : case VAR_237 : case VAR_238 : METHOD_39 ( "-MATCH_JUMP\\n" ) ; if ( METHOD_40 ( VAR_239 == VAR_240 ) ) goto VAR_241 ; VAR_242 [ VAR_243 ++ METHOD_41 = VAR_244 + VAR_245 [ VAR_246 METHOD_42 ; VAR_247 = VAR_248 [ VAR_249 + 2 METHOD_43 ; goto VAR_250 ; case VAR_251 : if ( METHOD_44 ( ! ( VAR_252 & VAR_253 ) ) ) goto VAR_254 ; VAR_255 += VAR_256 [ VAR_257 METHOD_45 ; goto VAR_258 ; case VAR_259 : if ( METHOD_46 ( VAR_260 != 0 || VAR_261 != 0 ) ) { METHOD_47 ( "ASN.1decodererror:Stacksnotemptyatcompletion(%u,%u)\\n" , VAR_262 , VAR_263 ) ; return - VAR_264 ; } return 0 ; case VAR_265 : case VAR_266 : if ( METHOD_48 ( ! ( VAR_267 & VAR_268 ) ) ) goto VAR_269 ; case VAR_270 : case VAR_271 : case VAR_272 : case VAR_273 : case VAR_274 : case VAR_275 : if ( METHOD_49 ( VAR_276 <= 0 ) ) goto VAR_277 ; VAR_278 -- ; VAR_279 = VAR_280 [ VAR_281 METHOD_50 ; VAR_282 = VAR_283 [ VAR_284 METHOD_51 ; VAR_285 = VAR_286 ; VAR_287 = VAR_288 [ VAR_289 METHOD_52 ; METHOD_53 ( "-endconst=%zudp=%zul=%zu/%zu\\n" , VAR_290 , VAR_291 , VAR_292 , VAR_293 ) ; if ( VAR_294 == 0 ) { VAR_295 = VAR_296 ; if ( METHOD_54 ( VAR_297 - VAR_298 < 2 ) ) goto VAR_299 ; if ( VAR_300 [ VAR_301 ++ METHOD_55 != 0 ) { if ( VAR_302 & VAR_303 ) { VAR_304 -- ; VAR_305 ++ ; VAR_306 = VAR_307 [ VAR_308 + 1 METHOD_56 ; METHOD_57 ( "-continue\\n" ) ; goto VAR_309 ; } goto VAR_310 ; } if ( VAR_311 [ VAR_312 ++ METHOD_58 != 0 ) goto VAR_313 ; VAR_314 = VAR_315 - VAR_316 - 2 ; } else { if ( VAR_317 < VAR_318 && ( VAR_319 & VAR_320 ) ) { VAR_321 = VAR_322 ; VAR_323 ++ ; VAR_324 = VAR_325 [ VAR_326 + 1 METHOD_59 ; METHOD_60 ( "-continue\\n" ) ; goto VAR_327 ; } if ( VAR_328 != VAR_329 ) goto VAR_330 ; VAR_331 -= VAR_332 ; METHOD_61 ( "-conslenl=%zud=%zu\\n" , VAR_333 , VAR_334 - VAR_335 ) ; } if ( VAR_336 & VAR_337 ) { unsigned TYPE_18 VAR_338 ; if ( VAR_339 & VAR_340 ) VAR_341 = VAR_342 [ VAR_343 + 2 METHOD_62 ; else VAR_344 = VAR_345 [ VAR_346 + 1 METHOD_63 ; VAR_347 = VAR_348 [ VAR_349 METHOD_64 ( VAR_350 , VAR_351 , 0 , VAR_352 + VAR_353 , VAR_354 ) ; } VAR_355 += VAR_356 [ VAR_357 METHOD_65 ; goto VAR_358 ; case VAR_359 : if ( ! ( VAR_360 & VAR_361 ) ) { VAR_362 += VAR_363 [ VAR_364 METHOD_66 ; goto VAR_365 ; } case VAR_366 : VAR_367 = VAR_368 [ VAR_369 [ VAR_370 + 1 METHOD_67 METHOD_68 ( VAR_371 , VAR_372 , VAR_373 , VAR_374 + VAR_375 , VAR_376 ) ; if ( VAR_377 < 0 ) return VAR_378 ; VAR_379 += VAR_380 [ VAR_381 METHOD_69 ; goto VAR_382 ; case VAR_383 : if ( METHOD_70 ( VAR_384 <= 0 ) ) goto VAR_385 ; VAR_386 = VAR_387 [ -- VAR_388 METHOD_71 ; VAR_389 |= VAR_390 | VAR_391 ; goto VAR_392 ; default : break ; } METHOD_72 ( "ASN.1decodererror:Foundreservedopcode(%u)pc=%zu\\n" , VAR_393 , VAR_394 ) ; return - VAR_395 ; VAR_396 : VAR_397 = "Dataoverrunerror" ; goto VAR_398 ; VAR_399 : VAR_400 = "Machineoverrunerror" ; goto VAR_401 ; VAR_402 : VAR_403 = "Jumpstackunderflow" ; goto VAR_404 ; VAR_405 : VAR_406 = "Jumpstackoverflow" ; goto VAR_407 ; VAR_408 : VAR_409 = "Consstackunderflow" ; goto VAR_410 ; VAR_411 : VAR_412 = "Consstackoverflow" ; goto VAR_413 ; VAR_414 : VAR_415 = "Conslengtherror" ; goto VAR_416 ; VAR_417 : VAR_418 = "MissingEOCinindefinitelencons" ; goto VAR_419 ; VAR_420 : VAR_421 = "InvalidlengthEOC" ; goto VAR_422 ; VAR_423 : VAR_424 = "Unsupportedlength" ; goto VAR_425 ; VAR_426 : VAR_427 = "Indefinitelenprimitivenotpermitted" ; goto VAR_428 ; VAR_429 : VAR_430 = "Unexpectedtag" ; goto VAR_431 ; VAR_432 : VAR_433 = "Longtagnotsupported" ; VAR_434 : METHOD_73 ( "\\nASN1:%s[m=%zud=%zuot=%02xt=%02xl=%zu]\\n" , VAR_435 , VAR_436 , VAR_437 , VAR_438 , VAR_439 , VAR_440 ) ; return - VAR_441 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_1 ) ; struct STRUCT_OR_UNION_3 * VAR_2 ; METHOD_2 ( "%s:sk:%p\\n" , VAR_3 , VAR_4 ) ; VAR_5 = METHOD_3 ( VAR_6 ) ; switch ( VAR_7 -> VAR_8 ) { case VAR_9 : VAR_10 -> VAR_11 = VAR_12 ; break ; case VAR_13 : VAR_14 -> VAR_15 = VAR_16 ; break ; default : return - VAR_17 ; } VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = STRUCT_OR_UNION_4 -> VAR_32 . VAR_33 ; VAR_34 -> VAR_35 = STRUCT_OR_UNION_5 -> VAR_36 . VAR_37 ; VAR_38 -> VAR_39 . VAR_40 = VAR_41 ; VAR_42 -> VAR_43 . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 . VAR_48 = STRUCT_OR_UNION_6 -> VAR_49 . VAR_50 ; VAR_51 -> VAR_52 . VAR_53 = STRUCT_OR_UNION_7 -> VAR_54 . VAR_55 ; VAR_56 -> VAR_57 . VAR_58 = STRUCT_OR_UNION_8 -> VAR_59 . VAR_60 ; VAR_61 -> VAR_62 . VAR_63 = STRUCT_OR_UNION_9 -> VAR_64 . VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = STRUCT_OR_UNION_10 -> VAR_69 . VAR_70 ; VAR_71 -> VAR_72 . VAR_73 = STRUCT_OR_UNION_11 -> VAR_74 . VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = 0 ; VAR_79 -> VAR_80 . VAR_81 = 0 ; VAR_82 -> VAR_83 . VAR_84 = 0 ; VAR_85 -> VAR_86 . VAR_87 = STRUCT_OR_UNION_12 -> VAR_88 . VAR_89 ; METHOD_4 ( & VAR_90 -> VAR_91 , 0 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ; VAR_92 -> VAR_93 = STRUCT_OR_UNION_14 -> VAR_94 . VAR_95 ; VAR_96 -> VAR_97 = STRUCT_OR_UNION_15 -> VAR_98 . VAR_99 ; VAR_100 -> VAR_101 = 0 ; VAR_102 -> VAR_103 = STRUCT_OR_UNION_16 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 = 2 ; VAR_108 -> VAR_109 = VAR_110 | VAR_111 | VAR_112 ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 -> VAR_118 = 0 ; VAR_119 -> VAR_120 = 0 ; VAR_121 -> VAR_122 = 1 ; VAR_123 -> VAR_124 = 0 ; VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = 0 ; VAR_129 -> VAR_130 = METHOD_5 ( VAR_131 -> VAR_132 ) ; METHOD_6 ( & VAR_133 -> VAR_134 , 0 ) ; METHOD_7 ( & VAR_135 -> VAR_136 ) ; VAR_137 -> VAR_138 = 0 ; VAR_139 -> VAR_140 = METHOD_8 ( VAR_141 , VAR_142 ) ; if ( ! VAR_143 -> VAR_144 ) return - VAR_145 ; VAR_146 -> VAR_147 = VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; METHOD_9 ( STRUCT_OR_UNION_17 ) ; METHOD_10 ( ) ; METHOD_11 ( & VAR_152 ) ; METHOD_12 ( STRUCT_OR_UNION_18 , VAR_153 -> VAR_154 , 1 ) ; if ( STRUCT_OR_UNION_19 -> VAR_155 . VAR_156 ) {  METHOD_13 ( & VAR_157 -> VAR_158 ,  & STRUCT_OR_UNION_20 -> VAR_159 . VAR_160 ) ;  VAR_161 -> VAR_162 = 1 ;   } else   VAR_163 -> VAR_164 = 0 ;  METHOD_14 ( ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { VAR_2 -> VAR_3 -> VAR_4 = METHOD_1 ( VAR_5 , 4 ) ;  VAR_6 -> VAR_7 -> VAR_8 = METHOD_2 ( VAR_9 , 4 ) ;   if ( VAR_10 -> VAR_11 -> VAR_12 == 0 && VAR_13 -> VAR_14 -> VAR_15 == 8 ) {   VAR_16 -> VAR_17 -> VAR_18 = 0 ;  } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { unsigned TYPE_2 VAR_1 ; struct STRUCT_OR_UNION_0 * VAR_2 = VAR_3 ; TYPE_3 * VAR_4 = VAR_5 -> VAR_6 -> VAR_7 + VAR_8 ;  METHOD_1 ( & VAR_9 -> VAR_10 , VAR_11 ) ;   while ( METHOD_2 ( VAR_12 -> VAR_13 -> VAR_14 + VAR_15 ) !=  METHOD_3 ( VAR_16 -> VAR_17 -> VAR_18 + VAR_19 ) ) { TYPE_4 VAR_20 , VAR_21 ; VAR_22 = METHOD_4 ( VAR_23 + 2 * METHOD_5 ( VAR_24 -> VAR_25 -> VAR_26 + VAR_27 ) ) ; if ( METHOD_6 ( VAR_28 , & VAR_29 -> VAR_30 ) ) METHOD_7 ( VAR_31 -> VAR_32 , ( unsigned TYPE_5 * ) & VAR_33 , 1 ) ;  VAR_34 = METHOD_8 ( VAR_35 -> VAR_36 -> VAR_37 + VAR_38 ) + 1 ;  if ( VAR_39 > METHOD_9 ( VAR_40 -> VAR_41 -> VAR_42 + VAR_43 ) ) METHOD_10 ( 0 , VAR_44 -> VAR_45 -> VAR_46 + VAR_47 ) ; else METHOD_11 ( VAR_48 , VAR_49 -> VAR_50 -> VAR_51 + VAR_52 ) ; } METHOD_12 ( & VAR_53 -> VAR_54 , VAR_55 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; if ( VAR_5 -> VAR_6 [ VAR_7 ] . VAR_8 ) return - VAR_9 ; VAR_10 -> VAR_11 [ VAR_12 ] . VAR_13 = VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 [ VAR_18 ] . VAR_19 , VAR_20 , VAR_21 , & VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ) ;  return VAR_26 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) { METHOD_2 ( STRUCT_OR_UNION_3 ) ;  METHOD_3 ( STRUCT_OR_UNION_4 ) ;  METHOD_4 ( STRUCT_OR_UNION_5 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_5 * const VAR_8 = VAR_9 -> VAR_10 ; TYPE_2 VAR_11 ; METHOD_1 ( VAR_12 , METHOD_2 ( "ikev2parentinI1outR1:calculatedke+nonce,sendingR1" ) ) ; if ( VAR_13 == VAR_14 ) { METHOD_3 ( VAR_15 , "%s:Requestwasdisconnectedfromstate" , VAR_16 ) ; if ( VAR_17 -> VAR_18 ) METHOD_4 ( VAR_19 -> VAR_20 ) ; return ; } METHOD_5 ( VAR_21 == VAR_22 ) ; METHOD_6 ( VAR_23 == VAR_24 ) ; METHOD_7 ( VAR_25 != VAR_26 ) ; METHOD_8 ( VAR_27 -> VAR_28 == VAR_29 -> VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 ) ; METHOD_10 ( VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 = METHOD_11 ( VAR_38 , VAR_39 ) ; if ( VAR_40 -> VAR_41 != VAR_42 ) { METHOD_12 ( & VAR_43 -> VAR_44 , VAR_45 ) ; if ( VAR_46 -> VAR_47 ) METHOD_13 ( VAR_48 -> VAR_49 ) ; } METHOD_14 ( ) ;  METHOD_15 ( METHOD_16 ( ) ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , const TYPE_5 * VAR_4 ) { METHOD_1 ( VAR_5 , "enter" ) ; const TYPE_6 * VAR_6 = "<scripttype=\\"text/javascript\\">\\n" "vartargetOrigin=\'%s\';\\n" "varmessage=\'%s\'+\'\'+\'%s\';\\n" "\tvartimerID;\\n" "\\n" "functioncheckSession(){\\n" "console.debug(\'checkSession:posting\'+message+\'to\'+targetOrigin);\\n" "varwin=window.parent.document.getElementById(\'%s\').contentWindow;\\n" "win.postMessage(message,targetOrigin);\\n" "}\\n" "\\n" "functionsetTimer(){\\n" "checkSession();\\n"  "timerID=setInterval(\'checkSession()\',%s);\\n"  "}\\n" "\\n" "functionreceiveMessage(e){\\n" "console.debug(\'receiveMessage:\'+e.data+\'from\'+e.origin);\\n" "if(e.origin!==targetOrigin){\\n" "console.debug(\'receiveMessage:cross-sitescriptingattack?\');\\n" "return;\\n" "}\\n" "if(e.data!=\'unchanged\'){\\n" "clearInterval(timerID);\\n" "if(e.data==\'changed\'){\\n" "\t\twindow.location.href=\'%s?session=check\';\\n" "}else{\\n" "\t\twindow.location.href=\'%s?session=logout\';\\n" "}\\n" "}\\n" "}\\n" "\\n" "window.addEventListener(\'message\',receiveMessage,false);\\n" "\\n" "</script>\\n" ; TYPE_7 * VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 ) ; TYPE_8 VAR_11 ; METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 , & VAR_15 ) ; TYPE_9 * VAR_16 = METHOD_4 ( VAR_17 , VAR_18 . VAR_19 ) ; * VAR_20 = '\\0' ; const TYPE_10 * VAR_21 = "openidc-op" ; const TYPE_11 * VAR_22 = METHOD_5 ( VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) { METHOD_6 ( VAR_27 , "nosession_statefoundinthesession;theOPdoesprobablynotsupportsessionmanagement!?" ) ; return VAR_28 ; } TYPE_12 * VAR_29 = VAR_30 ; METHOD_7 ( VAR_31 , "poll" , & VAR_32 ) ;  if ( VAR_33 == VAR_34 )  VAR_35 = "3000" ; const TYPE_13 * VAR_36 = METHOD_8 ( VAR_37 , VAR_38 ) ; VAR_39 = METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 , VAR_43 , VAR_44 ,  VAR_45 , VAR_46 , VAR_47 , VAR_48 ,  VAR_49 ) ; return METHOD_10 ( VAR_50 , VAR_51 , VAR_52 , "setTimer" , VAR_53 , VAR_54 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ,  TYPE_1 * VAR_2 )  {  VAR_3 * VAR_4 ;  TYPE_2 VAR_5 , VAR_6 [ 3 ] = { 0 } ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 . VAR_10 ; TYPE_3 VAR_11 ;  * VAR_12 = 0 ;  if ( ( VAR_13 = METHOD_1 ( VAR_14 , VAR_15 ) ) != 0 )  goto VAR_16 ;  if ( ( VAR_17 = METHOD_2 ( VAR_18 , VAR_19 ) ) != 0 ) goto VAR_20 ; if ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 , & VAR_24 ) ) != 0 ) goto VAR_25 ; if ( METHOD_4 ( VAR_26 [ 0 ] & ( VAR_27 - 1U ) ) ) return - VAR_28 ; if ( METHOD_5 ( VAR_29 [ 0 ] & VAR_30 ) ) { TYPE_4 VAR_31 ; TYPE_5 VAR_32 ;  VAR_33 = ( TYPE_6 * ) VAR_34 -> VAR_35 - ( TYPE_7 * ) VAR_36 -> VAR_37 ;  VAR_38 = VAR_39 -> VAR_40 . VAR_41 - VAR_42 ; if ( VAR_43 > VAR_44 ) {  METHOD_6 ( "NFS:servercheatingingetattr"  "aclreply:attrlen%u>recvd%u\\n" , VAR_45 , VAR_46 ) ; return - VAR_47 ; } METHOD_7 ( VAR_48 , VAR_49 ) ;  * VAR_50 = VAR_51 ;  } else VAR_52 = - VAR_53 ; VAR_54 : return VAR_55 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( - VAR_3 ) ; unsigned TYPE_1 VAR_4 ; unsigned TYPE_2 VAR_5 , VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; TYPE_3 * VAR_8 , * VAR_9 ; TYPE_4 VAR_10 ; TYPE_5 VAR_11 = sizeof ( struct STRUCT_OR_UNION_4 ) ; TYPE_6 VAR_12 ; TYPE_7 VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 ) -> VAR_16 ; if ( METHOD_3 ( VAR_17 -> VAR_18 <= VAR_19 ) ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , VAR_22 | VAR_23 ) ) { METHOD_5 ( VAR_24 ) -> VAR_25 = METHOD_6 ( VAR_26 -> VAR_27 , VAR_28 ) ; if ( ! METHOD_7 ( VAR_29 ) -> VAR_30 ) METHOD_8 ( METHOD_9 ( VAR_31 -> VAR_32 ) , VAR_33 ) ; VAR_34 = VAR_35 ; goto VAR_36 ; } if ( VAR_37 -> VAR_38 && METHOD_10 ( VAR_39 ) -> VAR_40 & ( VAR_41 | VAR_42 ) ) VAR_43 = METHOD_11 ( VAR_44 , VAR_45 , VAR_46 ) ; else { const struct STRUCT_OR_UNION_5 * VAR_47 ; struct STRUCT_OR_UNION_6 * VAR_48 ; if ( ! METHOD_12 ( VAR_49 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ) goto VAR_50 ; VAR_51 = METHOD_13 ( VAR_52 ) ; VAR_53 = METHOD_14 ( VAR_54 ) ; VAR_55 -> VAR_56 = 0 ; VAR_57 = METHOD_15 ( VAR_58 , 0 , VAR_59 -> VAR_60 , 0 ) ; VAR_61 -> VAR_62 = METHOD_16 ( VAR_63 -> VAR_64 , & VAR_65 -> VAR_66 , & VAR_67 -> VAR_68 , VAR_69 ) ; if ( VAR_70 -> VAR_71 == 0 ) VAR_72 -> VAR_73 = VAR_74 ; VAR_75 -> VAR_76 = VAR_77 ; if ( ! VAR_78 -> VAR_79 ) VAR_80 |= VAR_81 ; VAR_82 = METHOD_17 ( VAR_83 ) ; if ( VAR_84 -> VAR_85 < ( VAR_86 + VAR_87 ) ) { if ( METHOD_18 ( VAR_88 , VAR_89 + VAR_90 ) ) goto VAR_91 ; } VAR_92 = METHOD_19 ( VAR_93 , & VAR_94 ) ;  VAR_95 = * VAR_96 ;  * VAR_97 = VAR_98 ; VAR_99 = ( METHOD_20 ( VAR_100 ) - METHOD_21 ( VAR_101 ) ) + VAR_102 + VAR_103 ; VAR_104 = ( TYPE_8 * ) VAR_105 -> VAR_106 + METHOD_22 ( VAR_107 ) -> VAR_108 ; METHOD_23 ( VAR_109 - VAR_110 , VAR_111 , VAR_112 ) ; METHOD_24 ( VAR_113 ) -> VAR_114 -= VAR_115 ; VAR_116 -> VAR_117 -= VAR_118 ; VAR_119 -> VAR_120 -= VAR_121 ; VAR_122 = ( struct STRUCT_OR_UNION_8 * ) ( METHOD_25 ( VAR_123 ) + VAR_124 ) ; VAR_125 -> VAR_126 = VAR_127 ; VAR_128 -> VAR_129 = 0 ; if ( ! METHOD_26 ( VAR_130 ) -> VAR_131 ) METHOD_27 ( METHOD_28 ( VAR_132 -> VAR_133 ) , VAR_134 ) ; VAR_135 -> VAR_136 = METHOD_29 ( VAR_137 ) -> VAR_138 ; VAR_139 = METHOD_30 ( VAR_140 , VAR_141 ) ; } VAR_142 : return VAR_143 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; TYPE_4 * VAR_4 ; TYPE_5 * VAR_5 = ( TYPE_6 * ) VAR_6 ; if ( ! VAR_7 -> VAR_8 ) return VAR_9 ; VAR_10 = ( TYPE_7 ) VAR_11 -> VAR_12 ; VAR_13 = ( TYPE_8 * ) METHOD_1 ( sizeof ( TYPE_9 ) * VAR_14 ) ; if ( ! VAR_15 ) return VAR_16 ; METHOD_2 ( VAR_17 , VAR_18 , VAR_19 ) ; VAR_20 = 0 ;  while ( ( VAR_21 [ VAR_22 ] != 0 ) && ( VAR_23 < VAR_24 ) ) {  VAR_25 ++ ; } if ( VAR_26 == VAR_27 ) { METHOD_3 ( VAR_28 ) ; return VAR_29 ; } if ( VAR_30 == VAR_31 - 1 ) { VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; return VAR_38 ; } VAR_39 -> VAR_40 = ( TYPE_10 * ) METHOD_4 ( sizeof ( TYPE_11 ) * ( VAR_41 + 1 ) ) ; if ( ! VAR_42 -> VAR_43 ) { METHOD_5 ( VAR_44 ) ; return VAR_45 ; } VAR_46 -> VAR_47 = ( TYPE_12 * ) METHOD_6 ( sizeof ( TYPE_13 ) * ( VAR_48 - VAR_49 - 1 ) ) ; if ( ! VAR_50 -> VAR_51 ) { METHOD_7 ( VAR_52 ) ; METHOD_8 ( VAR_53 -> VAR_54 ) ; VAR_55 -> VAR_56 = VAR_57 ; return VAR_58 ; } METHOD_9 ( VAR_59 -> VAR_60 , VAR_61 , VAR_62 + 1 ) ; METHOD_10 ( VAR_63 -> VAR_64 , VAR_65 + VAR_66 + 1 , ( VAR_67 - VAR_68 - 1 ) ) ; METHOD_11 ( VAR_69 ) ; return VAR_70 ; }
static VAR_0 TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_2 VAR_3 = ( TYPE_3 ) VAR_4 * VAR_5 ;  TYPE_4 VAR_6 ;   VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 ) ;  VAR_12 -> VAR_13 = VAR_14 / VAR_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 * VAR_11 ; TYPE_7 * VAR_12 , * VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 , VAR_20 -> VAR_21 , VAR_22 -> VAR_23 ) ; if ( ! VAR_24 ) { METHOD_2 ( & VAR_25 ) ; return METHOD_3 ( VAR_26 ) ; } METHOD_4 ( VAR_27 , VAR_28 ) ; if ( METHOD_5 ( VAR_29 -> VAR_30 ) -> VAR_31 & VAR_32 ) METHOD_6 ( VAR_33 -> VAR_34 [ 1 ] , VAR_35 -> VAR_36 [ 1 ] , VAR_37 ) ;  for ( VAR_38 = 0 ; VAR_39 < 4 && VAR_40 -> VAR_41 [ VAR_42 ] ; VAR_43 ++ ) {  const TYPE_9 VAR_44 = ( VAR_45 == 1 || VAR_46 == 2 ) ? METHOD_7 ( VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ) : VAR_51 -> VAR_52 ; const TYPE_10 VAR_53 = ( VAR_54 == 1 || VAR_55 == 2 ) ? METHOD_8 ( VAR_56 -> VAR_57 , VAR_58 -> VAR_59 ) : VAR_60 -> VAR_61 ; VAR_62 = VAR_63 -> VAR_64 [ VAR_65 ] ; VAR_66 = VAR_67 -> VAR_68 [ VAR_69 ] ; VAR_70 = VAR_71 -> VAR_72 [ VAR_73 ] + ( VAR_74 - 1 ) * VAR_75 ; for ( VAR_76 = 0 ; VAR_77 < VAR_78 ; VAR_79 ++ ) { switch ( VAR_80 ) { case 1 : for ( VAR_81 = 0 ; VAR_82 < VAR_83 ; VAR_84 ++ ) VAR_85 [ VAR_86 ] = VAR_87 [ - VAR_88 ] ; break ; case 2 : { TYPE_11 * VAR_89 = ( TYPE_12 * ) VAR_90 ; TYPE_13 * VAR_91 = ( TYPE_14 * ) VAR_92 ; for ( VAR_93 = 0 ; VAR_94 < VAR_95 ; VAR_96 ++ ) VAR_97 [ VAR_98 ] = VAR_99 [ - VAR_100 ] ; } break ; case 3 : { TYPE_15 * VAR_101 = VAR_102 ; TYPE_16 * VAR_103 = VAR_104 ; for ( VAR_105 = 0 ; VAR_106 < VAR_107 ; VAR_108 ++ , VAR_109 += 3 , VAR_110 -= 3 ) { TYPE_17 VAR_111 = METHOD_9 ( VAR_112 ) ; METHOD_10 ( VAR_113 , VAR_114 ) ; } } break ; case 4 : { TYPE_18 * VAR_115 = ( TYPE_19 * ) VAR_116 ; TYPE_20 * VAR_117 = ( TYPE_21 * ) VAR_118 ; for ( VAR_119 = 0 ; VAR_120 < VAR_121 ; VAR_122 ++ ) VAR_123 [ VAR_124 ] = VAR_125 [ - VAR_126 ] ; } break ; default : for ( VAR_127 = 0 ; VAR_128 < VAR_129 ; VAR_130 ++ ) METHOD_11 ( VAR_131 + VAR_132 * VAR_133 , VAR_134 - VAR_135 * VAR_136 , VAR_137 ) ; } VAR_138 += VAR_139 -> VAR_140 [ VAR_141 ] ; VAR_142 += VAR_143 -> VAR_144 [ VAR_145 ] ; } } METHOD_12 ( & VAR_146 ) ; return METHOD_13 ( VAR_147 , VAR_148 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 [ VAR_6 + 1 ] ; if ( VAR_7 [ 0 ] == '/' ) {  METHOD_1 ( VAR_8 , sizeof ( VAR_9 ) - 5 , VAR_10 ) ;  } else { TYPE_7 VAR_11 [ VAR_12 + 1 ] ; * VAR_13 = '\\0' ; METHOD_2 ( VAR_14 ) ; METHOD_3 ( VAR_15 , sizeof ( VAR_16 ) - 5 , "%s/%s" , VAR_17 , VAR_18 ) ; } if ( METHOD_4 ( VAR_19 ) < 4 || METHOD_5 ( VAR_20 + METHOD_6 ( VAR_21 ) - 4 , ".dsn" ) ) { METHOD_7 ( VAR_22 , ".dsn" ) ; } TYPE_8 TYPE_9 if ( METHOD_8 ( & VAR_23 , VAR_24 , ";" , '[' , ']' , '=' , VAR_25 , 0L ) != VAR_26 ) else if ( METHOD_9 ( & VAR_27 , VAR_28 , ";" , '[' , ']' , '=' , VAR_29 ) != VAR_30 ) { METHOD_10 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , "" ) ; return VAR_36 ; } if ( VAR_37 == VAR_38 && VAR_39 == VAR_40 ) { if ( METHOD_11 ( VAR_41 , ( TYPE_10 * ) VAR_42 ) == VAR_43 ) { METHOD_12 ( VAR_44 ) ; } } else if ( VAR_45 == VAR_46 ) { if ( METHOD_13 ( VAR_47 , ( TYPE_11 * ) VAR_48 , ( TYPE_12 * ) VAR_49 , "" ) == VAR_50 ) { METHOD_14 ( VAR_51 ) ; } } else { if ( METHOD_15 ( VAR_52 , ( TYPE_13 * ) VAR_53 ) != VAR_54 ) { METHOD_16 ( VAR_55 , ( TYPE_14 * ) VAR_56 ) ; } if ( METHOD_17 ( VAR_57 , ( TYPE_15 * ) VAR_58 , ( TYPE_16 * ) VAR_59 , "" ) == VAR_60 ) { METHOD_18 ( VAR_61 , ( TYPE_17 * ) VAR_62 ) ; METHOD_19 ( VAR_63 , ( TYPE_18 * ) VAR_64 , ( TYPE_19 * ) VAR_65 ) ; } else { METHOD_20 ( VAR_66 , ( TYPE_20 * ) VAR_67 ) ; METHOD_21 ( VAR_68 , ( TYPE_21 * ) VAR_69 , ( TYPE_22 * ) VAR_70 ) ; } } if ( METHOD_22 ( VAR_71 ) != VAR_72 ) { METHOD_23 ( VAR_73 ) ; METHOD_24 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 , "" ) ; return VAR_79 ; } METHOD_25 ( VAR_80 ) ; return VAR_81 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 ; TYPE_6 * VAR_9 , * VAR_10 , * VAR_11 ; TYPE_7 VAR_12 , VAR_13 , VAR_14 ; if ( ! METHOD_1 ( VAR_15 , VAR_16 , "%S?*" , & VAR_17 , & VAR_18 ) ) { return VAR_19 ; } VAR_20 = VAR_21 = 0 ; VAR_22 = 0750 ; if ( METHOD_2 ( VAR_23 , ':' ) ) {  VAR_24 = METHOD_3 ( VAR_25 , ":" , & VAR_26 ) ;  if ( VAR_27 && * VAR_28 ) { if ( METHOD_4 ( VAR_29 ) ) { VAR_30 = ( TYPE_8 ) METHOD_5 ( VAR_31 ) ; } else if ( METHOD_6 ( VAR_32 , "APPWEB" ) ) { VAR_33 = VAR_34 -> VAR_35 ; } else { VAR_36 = METHOD_7 ( VAR_37 ) ; } }  VAR_38 = METHOD_8 ( VAR_39 , ":" , & VAR_40 ) ;  if ( VAR_41 && * VAR_42 ) { if ( METHOD_9 ( VAR_43 ) ) { VAR_44 = ( TYPE_9 ) METHOD_10 ( VAR_45 ) ; } else if ( METHOD_11 ( VAR_46 , "APPWEB" ) ) { VAR_47 = VAR_48 -> VAR_49 ; } else { VAR_50 = METHOD_12 ( VAR_51 ) ; } } if ( VAR_52 && METHOD_13 ( VAR_53 ) ) { VAR_54 = ( TYPE_10 ) METHOD_14 ( VAR_55 , - 1 , VAR_56 ) ; } else { VAR_57 = 0 ; } if ( VAR_58 < 0 || VAR_59 < 0 ) { return VAR_60 ; } } else { VAR_61 = VAR_62 ; VAR_63 = 0 ; } VAR_64 = VAR_65 ; for ( VAR_66 = METHOD_15 ( VAR_67 ) ; ( VAR_68 = METHOD_16 ( VAR_69 , "," , & VAR_70 ) ) != 0 ; ) { VAR_71 = METHOD_17 ( VAR_72 -> VAR_73 , VAR_74 -> VAR_75 , VAR_76 ) ; if ( METHOD_18 ( VAR_77 , & VAR_78 ) == 0 && VAR_79 . VAR_80 ) { continue ; } if ( METHOD_19 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , 1 ) < 0 ) { return VAR_85 ; } } return 0 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { const TYPE_7 * VAR_6 ; TYPE_8 VAR_7 ; const TYPE_9 * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_17 * VAR_22 ; if ( VAR_23 > VAR_24 / 4 ) { VAR_25 = VAR_26 ; goto VAR_27 ; } VAR_28 = CAST ( const TYPE_18 * , ( const TYPE_19 * ) ( ( const TYPE_20 * ) VAR_29 -> VAR_30 + VAR_31 ) ) ; if ( METHOD_1 ( VAR_32 , VAR_33 , VAR_34 , sizeof ( * VAR_35 ) , VAR_36 ) == - 1 ) goto VAR_37 ; VAR_38 . VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 / 8 ) if ( VAR_43 . VAR_44 > METHOD_4 ) { VAR_45 = VAR_46 ; goto VAR_47 ; } VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 ) ; METHOD_6 ( VAR_52 / ( 4 * sizeof ( * VAR_53 ) ) ) if ( VAR_54 . VAR_55 > METHOD_7 ) goto VAR_56 ; METHOD_8 ( ( "sectionlen:%uproperties%u\\n" , VAR_57 . VAR_58 , VAR_59 . VAR_60 ) ) ; if ( * VAR_61 ) { if ( * VAR_62 > METHOD_9 ) goto VAR_63 ; * VAR_64 += VAR_65 . VAR_66 ; VAR_67 = CAST ( TYPE_21 * , METHOD_10 ( * VAR_68 , * VAR_69 * sizeof ( * VAR_70 ) ) ) ; } else { * VAR_71 = VAR_72 . VAR_73 ; VAR_74 = CAST ( TYPE_22 * , METHOD_11 ( * VAR_75 * sizeof ( * VAR_76 ) ) ) ; } if ( VAR_77 == VAR_78 ) goto VAR_79 ; * VAR_80 = VAR_81 ; VAR_82 += * VAR_83 ; * VAR_84 += VAR_85 . VAR_86 ; VAR_87 = CAST ( const TYPE_23 * , ( const TYPE_24 * ) ( ( const TYPE_25 * ) ( const TYPE_26 * ) VAR_88 -> VAR_89 + VAR_90 + sizeof ( VAR_91 ) ) ) ; VAR_92 = CAST ( const TYPE_27 * , ( const TYPE_28 * ) ( ( ( const TYPE_29 * ) ( const TYPE_30 * ) VAR_93 ) + VAR_94 . VAR_95 ) ) ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , 0 , VAR_99 ) == - 1 ) goto VAR_100 ; for ( VAR_101 = 0 ; VAR_102 < VAR_103 . VAR_104 ; VAR_105 ++ ) {  VAR_106 = ( const TYPE_31 * ) ( const TYPE_32 * )  ( ( const TYPE_33 * ) ( const TYPE_34 * ) VAR_107 +  METHOD_13 ( VAR_108 , ( VAR_109 << 1 ) + 1 ) ) - 2 * sizeof ( TYPE_35 ) ;  if ( VAR_110 > VAR_111 ) { METHOD_14 ( ( "Ranoftheend%p>%p\\n" , VAR_112 , VAR_113 ) ) ; goto VAR_114 ; } VAR_115 [ VAR_116 ] . VAR_117 = METHOD_15 ( VAR_118 , VAR_119 << 1 ) ; VAR_120 [ VAR_121 ] . VAR_122 = METHOD_16 ( VAR_123 , 0 ) ;  METHOD_17 ( ( "%" SIZE_T_FORMAT "u)id=%xtype=%xoffs=0x%tx,0x%x\\n" , VAR_124 ,  VAR_125 [ VAR_126 ] . VAR_127 , VAR_128 [ VAR_129 ] . VAR_130 , VAR_131 - VAR_132 ,  METHOD_18 ( VAR_133 , ( VAR_134 << 1 ) + 1 ) ) ) ;  if ( VAR_135 [ VAR_136 ] . VAR_137 & VAR_138 ) { VAR_139 = METHOD_19 ( VAR_140 , 1 ) ; VAR_141 = 2 ; } else { VAR_142 = 1 ; VAR_143 = 1 ; } VAR_144 = VAR_145 * sizeof ( TYPE_36 ) ; if ( VAR_146 [ VAR_147 ] . VAR_148 & ( VAR_149 | VAR_150 | VAR_151 ) ) goto VAR_152 ; switch ( VAR_153 [ VAR_154 ] . VAR_155 & VAR_156 ) { case VAR_157 : case VAR_158 : break ; case VAR_159 : if ( VAR_160 [ VAR_161 ] . VAR_162 & VAR_163 ) goto VAR_164 ; ( TYPE_37 ) METHOD_20 ( & VAR_165 , & VAR_166 [ VAR_167 ] , sizeof ( VAR_168 ) ) ; VAR_169 [ VAR_170 ] . VAR_171 = METHOD_21 ( VAR_172 ) ; break ; case VAR_173 : if ( VAR_174 [ VAR_175 ] . VAR_176 & VAR_177 ) goto VAR_178 ; ( TYPE_38 ) METHOD_22 ( & VAR_179 , & VAR_180 [ VAR_181 ] , sizeof ( VAR_182 ) ) ; VAR_183 [ VAR_184 ] . VAR_185 = METHOD_23 ( ( TYPE_39 ) VAR_186 ) ; break ; case VAR_187 : case VAR_188 : if ( VAR_189 [ VAR_190 ] . VAR_191 & VAR_192 ) goto VAR_193 ; ( TYPE_40 ) METHOD_24 ( & VAR_194 , & VAR_195 [ VAR_196 ] , sizeof ( VAR_197 ) ) ; VAR_198 [ VAR_199 ] . VAR_200 = METHOD_25 ( VAR_201 ) ; break ; case VAR_202 : if ( VAR_203 [ VAR_204 ] . VAR_205 & VAR_206 ) goto VAR_207 ; ( TYPE_41 ) METHOD_26 ( & VAR_208 , & VAR_209 [ VAR_210 ] , sizeof ( VAR_211 ) ) ; VAR_212 [ VAR_213 ] . VAR_214 = METHOD_27 ( ( TYPE_42 ) VAR_215 ) ; break ; case VAR_216 : if ( VAR_217 [ VAR_218 ] . VAR_219 & VAR_220 ) goto VAR_221 ; ( TYPE_43 ) METHOD_28 ( & VAR_222 , & VAR_223 [ VAR_224 ] , sizeof ( VAR_225 ) ) ; VAR_226 [ VAR_227 ] . VAR_228 = METHOD_29 ( ( TYPE_44 ) VAR_229 ) ; break ; case VAR_230 : if ( VAR_231 [ VAR_232 ] . VAR_233 & VAR_234 ) goto VAR_235 ; ( TYPE_45 ) METHOD_30 ( & VAR_236 , & VAR_237 [ VAR_238 ] , sizeof ( VAR_239 ) ) ; VAR_240 = METHOD_31 ( VAR_241 ) ; METHOD_32 ( & VAR_242 [ VAR_243 ] . VAR_244 , & VAR_245 , sizeof ( VAR_246 [ VAR_247 ] . VAR_248 ) ) ; break ; case VAR_249 : if ( VAR_250 [ VAR_251 ] . VAR_252 & VAR_253 ) goto VAR_254 ; ( TYPE_46 ) METHOD_33 ( & VAR_255 , & VAR_256 [ VAR_257 ] , sizeof ( VAR_258 ) ) ; VAR_259 = METHOD_34 ( ( TYPE_47 ) VAR_260 ) ; METHOD_35 ( & VAR_261 [ VAR_262 ] . VAR_263 , & VAR_264 , sizeof ( VAR_265 [ VAR_266 ] . VAR_267 ) ) ; break ; case VAR_268 : case VAR_269 : if ( VAR_270 > 1 ) { TYPE_48 VAR_271 = VAR_272 - * VAR_273 ; if ( * VAR_274 > METHOD_36 || VAR_275 > METHOD_37 ) goto VAR_276 ; * VAR_277 += VAR_278 ; VAR_279 = CAST ( TYPE_49 * , METHOD_38 ( * VAR_280 , * VAR_281 * sizeof ( * VAR_282 ) ) ) ; if ( VAR_283 == VAR_284 ) goto VAR_285 ; * VAR_286 = VAR_287 ; VAR_288 = * VAR_289 + VAR_290 ; } METHOD_39 ( ( "nelements=%" SIZE_T_FORMAT "u\\n" , VAR_291 ) ) ; for ( VAR_292 = 0 ; VAR_293 < VAR_294 ; VAR_295 ++ , VAR_296 ++ ) { TYPE_50 VAR_297 = METHOD_40 ( VAR_298 , VAR_299 ) ; VAR_300 [ VAR_301 ] . VAR_302 . VAR_303 = VAR_304 ; VAR_305 [ VAR_306 ] . VAR_307 . VAR_308 = ( const TYPE_51 * ) ( const TYPE_52 * ) ( & VAR_309 [ VAR_310 + sizeof ( VAR_311 ) ] ) ; METHOD_41 ( ( "l=%d,r=%" SIZE_T_FORMAT "u,s=%s\\n" , VAR_312 , METHOD_42 ( VAR_313 , sizeof ( VAR_314 ) ) , VAR_315 [ VAR_316 ] . VAR_317 . VAR_318 ) ) ; if ( VAR_319 & 1 ) VAR_320 ++ ; VAR_321 += VAR_322 >> 1 ; if ( VAR_323 + VAR_324 >= VAR_325 ) goto VAR_326 ; VAR_327 = VAR_328 * sizeof ( TYPE_53 ) ; } VAR_329 -- ; break ; case VAR_330 : if ( VAR_331 [ VAR_332 ] . VAR_333 & VAR_334 ) goto VAR_335 ; ( TYPE_54 ) METHOD_43 ( & VAR_336 , & VAR_337 [ VAR_338 ] , sizeof ( VAR_339 ) ) ; VAR_340 [ VAR_341 ] . VAR_342 = METHOD_44 ( ( TYPE_55 ) VAR_343 ) ; break ; case VAR_344 : if ( VAR_345 [ VAR_346 ] . VAR_347 & VAR_348 ) goto VAR_349 ; break ; default : VAR_350 : METHOD_45 ( ( "Don\'tknowhowtodealwith%x\\n" , VAR_351 [ VAR_352 ] . VAR_353 ) ) ; break ; } } return 0 ; VAR_354 : METHOD_46 ( * VAR_355 ) ; return - 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_1 VAR_3 = VAR_4 -> VAR_5 ; TYPE_2 VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_2 VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ; TYPE_3 VAR_11 ;  if ( VAR_12 -> VAR_13 && VAR_14 -> VAR_15 -> VAR_16 )  VAR_17 = VAR_18 -> VAR_19 -> VAR_20 ; VAR_21 = METHOD_2 ( & VAR_22 , VAR_23 , 0 , METHOD_3 ( VAR_24 ) , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 , VAR_31 -> VAR_32 , VAR_33 , VAR_34 ) ; if ( METHOD_4 ( VAR_35 ) ) return METHOD_5 ( VAR_36 ) ; METHOD_6 ( VAR_37 , & VAR_38 -> VAR_39 ) ; VAR_40 = VAR_41 -> VAR_42 ; if ( VAR_43 == VAR_44 ) return 0 ; if ( VAR_45 > 1 ) { printk ( KERN_INFO "%s():shiftinginet->saddrfrom%pI4to%pI4\\n" , VAR_46 , & VAR_47 , & VAR_48 ) ; } VAR_49 -> VAR_50 = VAR_51 -> VAR_52 = VAR_53 ; METHOD_7 ( VAR_54 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , register TYPE_3 VAR_2 ) { const struct STRUCT_OR_UNION_0 * VAR_3 ; const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; const TYPE_4 * VAR_4 , * VAR_5 ; TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 [ 4 ] ; union { const struct STRUCT_OR_UNION_3 * VAR_13 ; const struct STRUCT_OR_UNION_4 * VAR_14 ; const struct STRUCT_OR_UNION_5 * VAR_15 ; const struct STRUCT_OR_UNION_6 * VAR_16 ; const struct STRUCT_OR_UNION_7 * VAR_17 ; const struct STRUCT_OR_UNION_8 * VAR_18 ; const struct STRUCT_OR_UNION_9 * VAR_19 ; } VAR_20 ; VAR_21 = VAR_22 ; VAR_23 = ( const struct STRUCT_OR_UNION_10 * ) VAR_24 ; METHOD_1 ( * VAR_25 ) ; if ( VAR_26 -> VAR_27 != VAR_28 ) { METHOD_2 ( ( VAR_29 , "EIGRPversion%upacketnotsupported" , VAR_30 -> VAR_31 ) ) ; return ; } if ( VAR_32 -> VAR_33 < 1 ) { METHOD_3 ( ( VAR_34 , "EIGRP%s,length:%u" , METHOD_4 ( VAR_35 , "unknown(%u)" , VAR_36 -> VAR_37 ) , VAR_38 ) ) ; return ; }  VAR_39 = VAR_40 - sizeof ( struct STRUCT_OR_UNION_11 ) ;  METHOD_5 ( ( VAR_41 , "\\n\\tEIGRPv%u,opcode:%s(%u),chksum:0x%04x,Flags:[%s]\\n\\tseq:0x%08x,ack:0x%08x,AS:%u,length:%u" , VAR_42 -> VAR_43 , METHOD_6 ( VAR_44 , "unknown,type:%u" , VAR_45 -> VAR_46 ) , VAR_47 -> VAR_48 , METHOD_7 ( & VAR_49 -> VAR_50 ) , METHOD_8 ( VAR_51 , "none" , METHOD_9 ( & VAR_52 -> VAR_53 ) ) , METHOD_10 ( & VAR_54 -> VAR_55 ) , METHOD_11 ( & VAR_56 -> VAR_57 ) , METHOD_12 ( & VAR_58 -> VAR_59 ) , VAR_60 ) ) ; VAR_61 += sizeof ( const struct STRUCT_OR_UNION_12 ) ; while ( VAR_62 > 0 ) { METHOD_13 ( * VAR_63 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ; STRUCT_OR_UNION_14 = ( const struct STRUCT_OR_UNION_15 * ) VAR_64 ; VAR_65 = METHOD_14 ( & STRUCT_OR_UNION_16 -> VAR_66 ) ; VAR_67 = METHOD_15 ( & STRUCT_OR_UNION_17 -> VAR_68 ) ; if ( VAR_69 < sizeof ( struct STRUCT_OR_UNION_18 ) || VAR_70 > VAR_71 ) { METHOD_16 ( VAR_72 , VAR_73 + sizeof ( struct STRUCT_OR_UNION_19 ) , "\\n\\t" , VAR_74 ) ; return ; } METHOD_17 ( ( VAR_75 , "\\n\\t%sTLV(0x%04x),length:%u" , METHOD_18 ( VAR_76 , "Unknown" , VAR_77 ) , VAR_78 , VAR_79 ) ) ;  VAR_80 = VAR_81 + sizeof ( struct STRUCT_OR_UNION_20 ) ;  VAR_82 = VAR_83 - sizeof ( struct STRUCT_OR_UNION_21 ) ; METHOD_19 ( * VAR_84 , VAR_85 ) ; switch ( VAR_86 ) { case VAR_87 : VAR_88 . VAR_89 = ( const struct STRUCT_OR_UNION_22 * ) VAR_90 ;  METHOD_20 ( ( VAR_91 , "\\n\\tholdtime:%us,k1%u,k2%u,k3%u,k4%u,k5%u" ,  METHOD_21 ( VAR_92 . VAR_93 -> VAR_94 ) , VAR_95 . VAR_96 -> VAR_97 , VAR_98 . VAR_99 -> VAR_100 , VAR_101 . VAR_102 -> VAR_103 , VAR_104 . VAR_105 -> VAR_106 , VAR_107 . VAR_108 -> VAR_109 ) ) ; break ; case VAR_110 : VAR_111 . VAR_112 = ( const struct STRUCT_OR_UNION_23 * ) VAR_113 ;  METHOD_22 ( ( VAR_114 , "\\n\\tIOSversion:%u.%u,EIGRPversion%u.%u" ,  VAR_115 . VAR_116 -> VAR_117 , VAR_118 . VAR_119 -> VAR_120 , VAR_121 . VAR_122 -> VAR_123 , VAR_124 . VAR_125 -> VAR_126 ) ) ; break ; case VAR_127 : VAR_128 . VAR_129 = ( const struct STRUCT_OR_UNION_24 * ) VAR_130 ;  VAR_131 = VAR_132 . VAR_133 -> VAR_134 ;  if ( VAR_135 > 32 ) { METHOD_23 ( ( VAR_136 , "\\n\\tillegalprefixlength%u" , VAR_137 ) ) ; break ; } VAR_138 = ( VAR_139 + 7 ) / 8 ; METHOD_24 ( VAR_140 , 0 , 4 ) ; METHOD_25 ( VAR_141 , & VAR_142 . VAR_143 -> VAR_144 , VAR_145 ) ; METHOD_26 ( ( VAR_146 , "\\n\\tIPv4prefix:%15s/%u,nexthop:" , METHOD_27 ( VAR_147 , VAR_148 ) , VAR_149 ) ) ; if ( METHOD_28 ( & VAR_150 . VAR_151 -> VAR_152 ) == 0 ) METHOD_29 ( ( VAR_153 , "self" ) ) ; else METHOD_30 ( ( VAR_154 , "%s" , METHOD_31 ( VAR_155 , & VAR_156 . VAR_157 -> VAR_158 ) ) ) ; METHOD_32 ( ( VAR_159 , "\\n\\tdelay%ums,bandwidth%uKbps,mtu%u,hop%u,reliability%u,load%u" , ( METHOD_33 ( & VAR_160 . VAR_161 -> VAR_162 ) / 100 ) , METHOD_34 ( & VAR_163 . VAR_164 -> VAR_165 ) , METHOD_35 ( & VAR_166 . VAR_167 -> VAR_168 ) , VAR_169 . VAR_170 -> VAR_171 , VAR_172 . VAR_173 -> VAR_174 , VAR_175 . VAR_176 -> VAR_177 ) ) ; break ; case VAR_178 : VAR_179 . VAR_180 = ( const struct STRUCT_OR_UNION_25 * ) VAR_181 ;  VAR_182 = VAR_183 . VAR_184 -> VAR_185 ;  if ( VAR_186 > 32 ) { METHOD_36 ( ( VAR_187 , "\\n\\tillegalprefixlength%u" , VAR_188 ) ) ; break ; } VAR_189 = ( VAR_190 + 7 ) / 8 ; METHOD_37 ( VAR_191 , 0 , 4 ) ; METHOD_38 ( VAR_192 , & VAR_193 . VAR_194 -> VAR_195 , VAR_196 ) ; METHOD_39 ( ( VAR_197 , "\\n\\tIPv4prefix:%15s/%u,nexthop:" , METHOD_40 ( VAR_198 , VAR_199 ) , VAR_200 ) ) ; if ( METHOD_41 ( & VAR_201 . VAR_202 -> VAR_203 ) == 0 ) METHOD_42 ( ( VAR_204 , "self" ) ) ; else METHOD_43 ( ( VAR_205 , "%s" , METHOD_44 ( VAR_206 , & VAR_207 . VAR_208 -> VAR_209 ) ) ) ; METHOD_45 ( ( VAR_210 , "\\n\\torigin-router%s,origin-as%u,origin-proto%s,flags[0x%02x],tag0x%08x,metric%u" , METHOD_46 ( VAR_211 , VAR_212 . VAR_213 -> VAR_214 ) , METHOD_47 ( VAR_215 . VAR_216 -> VAR_217 ) , METHOD_48 ( VAR_218 , "unknown" , VAR_219 . VAR_220 -> VAR_221 ) , VAR_222 . VAR_223 -> VAR_224 , METHOD_49 ( VAR_225 . VAR_226 -> VAR_227 ) , METHOD_50 ( VAR_228 . VAR_229 -> VAR_230 ) ) ) ; METHOD_51 ( ( VAR_231 , "\\n\\tdelay%ums,bandwidth%uKbps,mtu%u,hop%u,reliability%u,load%u" , ( METHOD_52 ( & VAR_232 . VAR_233 -> VAR_234 ) / 100 ) , METHOD_53 ( & VAR_235 . VAR_236 -> VAR_237 ) , METHOD_54 ( & VAR_238 . VAR_239 -> VAR_240 ) , VAR_241 . VAR_242 -> VAR_243 , VAR_244 . VAR_245 -> VAR_246 , VAR_247 . VAR_248 -> VAR_249 ) ) ; break ; case VAR_250 : VAR_251 . VAR_252 = ( const struct STRUCT_OR_UNION_26 * ) VAR_253 ;  METHOD_55 ( ( VAR_254 , "\\n\\tCable-range:%u-%u,Router-ID%u" ,  METHOD_56 ( & VAR_255 . VAR_256 -> VAR_257 ) , METHOD_57 ( & VAR_258 . VAR_259 -> VAR_260 ) , METHOD_58 ( & VAR_261 . VAR_262 -> VAR_263 ) ) ) ; break ; case VAR_264 :  VAR_265 . VAR_266 = ( const struct STRUCT_OR_UNION_27 * ) VAR_267 ;  METHOD_59 ( ( VAR_268 , "\\n\\tCable-Range:%u-%u,nexthop:" , METHOD_60 ( & VAR_269 . VAR_270 -> VAR_271 ) , METHOD_61 ( & VAR_272 . VAR_273 -> VAR_274 ) ) ) ; if ( METHOD_62 ( & VAR_275 . VAR_276 -> VAR_277 ) == 0 ) METHOD_63 ( ( VAR_278 , "self" ) ) ; else METHOD_64 ( ( VAR_279 , "%u.%u" , METHOD_65 ( & VAR_280 . VAR_281 -> VAR_282 ) , METHOD_66 ( & VAR_283 . VAR_284 -> VAR_285 [ 2 ] ) ) ) ; METHOD_67 ( ( VAR_286 , "\\n\\tdelay%ums,bandwidth%uKbps,mtu%u,hop%u,reliability%u,load%u" , ( METHOD_68 ( & VAR_287 . VAR_288 -> VAR_289 ) / 100 ) , METHOD_69 ( & VAR_290 . VAR_291 -> VAR_292 ) , METHOD_70 ( & VAR_293 . VAR_294 -> VAR_295 ) , VAR_296 . VAR_297 -> VAR_298 , VAR_299 . VAR_300 -> VAR_301 , VAR_302 . VAR_303 -> VAR_304 ) ) ; break ; case VAR_305 : VAR_306 . VAR_307 = ( const struct STRUCT_OR_UNION_28 * ) VAR_308 ;  METHOD_71 ( ( VAR_309 , "\\n\\tCable-Range:%u-%u,nexthop:" ,  METHOD_72 ( & VAR_310 . VAR_311 -> VAR_312 ) , METHOD_73 ( & VAR_313 . VAR_314 -> VAR_315 ) ) ) ; if ( METHOD_74 ( & VAR_316 . VAR_317 -> VAR_318 ) == 0 ) METHOD_75 ( ( VAR_319 , "self" ) ) ; else METHOD_76 ( ( VAR_320 , "%u.%u" , METHOD_77 ( & VAR_321 . VAR_322 -> VAR_323 ) , METHOD_78 ( & VAR_324 . VAR_325 -> VAR_326 [ 2 ] ) ) ) ; METHOD_79 ( ( VAR_327 , "\\n\\torigin-router%u,origin-as%u,origin-proto%s,flags[0x%02x],tag0x%08x,metric%u" , METHOD_80 ( VAR_328 . VAR_329 -> VAR_330 ) , METHOD_81 ( VAR_331 . VAR_332 -> VAR_333 ) , METHOD_82 ( VAR_334 , "unknown" , VAR_335 . VAR_336 -> VAR_337 ) , VAR_338 . VAR_339 -> VAR_340 , METHOD_83 ( VAR_341 . VAR_342 -> VAR_343 ) , METHOD_84 ( VAR_344 . VAR_345 -> VAR_346 ) ) ) ; METHOD_85 ( ( VAR_347 , "\\n\\tdelay%ums,bandwidth%uKbps,mtu%u,hop%u,reliability%u,load%u" , ( METHOD_86 ( & VAR_348 . VAR_349 -> VAR_350 ) / 100 ) , METHOD_87 ( & VAR_351 . VAR_352 -> VAR_353 ) , METHOD_88 ( & VAR_354 . VAR_355 -> VAR_356 ) , VAR_357 . VAR_358 -> VAR_359 , VAR_360 . VAR_361 -> VAR_362 , VAR_363 . VAR_364 -> VAR_365 ) ) ; break ; case VAR_366 : case VAR_367 : case VAR_368 : case VAR_369 : case VAR_370 : default : if ( VAR_371 -> VAR_372 <= 1 ) METHOD_89 ( VAR_373 , VAR_374 , "\\n\\t" , VAR_375 ) ; break ; } if ( VAR_376 -> VAR_377 > 1 ) METHOD_90 ( VAR_378 , VAR_379 + sizeof ( struct STRUCT_OR_UNION_29 ) , "\\n\\t" , VAR_380 - sizeof ( struct STRUCT_OR_UNION_30 ) ) ; VAR_381 += VAR_382 ; VAR_383 -= VAR_384 ; } return ; VAR_385 : METHOD_91 ( ( VAR_386 , "\\n\\t\\tpacketexceededsnapshot" ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 ) { TYPE_3 VAR_1 ;  TYPE_4 VAR_2 = METHOD_1 ( VAR_3 . VAR_4 . VAR_5 ) ;   TYPE_5 TYPE_6 VAR_6 [ VAR_7 ] ;   VAR_8 = METHOD_2 ( VAR_9 , VAR_10 . VAR_11 . VAR_12 ,  METHOD_3 ( VAR_13 . VAR_14 . VAR_15 ) , VAR_16 ) ; if ( VAR_17 == VAR_18 ) { METHOD_4 ( "parse_exports_table:failedtoreadexportindextable\\n" ) ; return VAR_19 ; } METHOD_5 ( VAR_20 , VAR_21 ) ; * VAR_22 = VAR_23 [ 0 ] ; return VAR_24 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , TYPE_1 * VAR_2 , TYPE_2 * VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_4 * VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_4 * VAR_7 ; METHOD_2 ( ( "zvreaddirof\'%s\'%s\'" , VAR_8 -> VAR_9 , VAR_10 -> VAR_11 ) ) ; if ( METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 ) == 0 ) { struct STRUCT_OR_UNION_5 * VAR_15 ; METHOD_4 ( & VAR_16 -> VAR_17 ) ; ( TYPE_5 ) METHOD_5 ( VAR_18 , "dsk" , & VAR_19 , STRUCT_OR_UNION_6 , VAR_20 , VAR_21 ) ; METHOD_6 ( VAR_22 ) ; ( TYPE_6 ) METHOD_7 ( VAR_23 , "rdsk" , & VAR_24 , STRUCT_OR_UNION_7 , VAR_25 , VAR_26 ) ; METHOD_8 ( VAR_27 ) ; METHOD_9 ( & VAR_28 -> VAR_29 , VAR_30 ) ; return ( METHOD_10 ( VAR_31 , VAR_32 , STRUCT_OR_UNION_8 , VAR_33 , 0 ) ) ; } if ( VAR_34 -> VAR_35 == 0 ) METHOD_11 ( VAR_36 ) ; VAR_37 = VAR_38 -> VAR_39 + METHOD_12 ( VAR_40 ) ; if ( ( METHOD_13 ( VAR_41 , "/dsk" ) == 0 ) || ( METHOD_14 ( VAR_42 , "/rdsk" ) == 0 ) ) { METHOD_15 ( & VAR_43 -> VAR_44 ) ; METHOD_16 ( VAR_45 ) ; METHOD_17 ( & VAR_46 -> VAR_47 , VAR_48 ) ; return ( METHOD_18 ( VAR_49 , VAR_50 , STRUCT_OR_UNION_9 , VAR_51 , 0 ) ) ; }  VAR_52 = METHOD_19 ( VAR_53 + 1 , '/' ) + 1 ;  METHOD_20 ( & VAR_54 -> VAR_55 ) ; METHOD_21 ( VAR_56 , VAR_57 , VAR_58 ) ; METHOD_22 ( & VAR_59 -> VAR_60 , VAR_61 ) ; return ( METHOD_23 ( VAR_62 , VAR_63 , STRUCT_OR_UNION_10 , VAR_64 , 0 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 = 0 , VAR_9 ; METHOD_1 ( "ext4_split_unwritten_extents:inode%lu,logical" "block%llu,max_blocks%u\\n" , STRUCT_OR_UNION_5 -> VAR_10 , ( unsigned TYPE_7 TYPE_8 ) VAR_11 -> VAR_12 , VAR_13 -> VAR_14 ) ; VAR_15 = ( STRUCT_OR_UNION_6 -> VAR_16 + STRUCT_OR_UNION_7 -> VAR_17 -> VAR_18 - 1 ) >> STRUCT_OR_UNION_8 -> VAR_19 -> VAR_20 ; if ( VAR_21 < VAR_22 -> VAR_23 + VAR_24 -> VAR_25 ) VAR_26 = VAR_27 -> VAR_28 + VAR_29 -> VAR_30 ; VAR_31 = METHOD_2 ( STRUCT_OR_UNION_9 ) ; VAR_32 = VAR_33 [ VAR_34 ] . VAR_35 ; VAR_36 = METHOD_3 ( VAR_37 -> VAR_38 ) ; VAR_39 = METHOD_4 ( VAR_40 ) ; VAR_41 |= VAR_42 + VAR_43 <= VAR_44 ? VAR_45 : 0 ; VAR_46 |= VAR_47 ;  VAR_48 |= VAR_49 ;  return METHOD_5 ( VAR_50 , STRUCT_OR_UNION_10 , VAR_51 , VAR_52 , VAR_53 , VAR_54 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = 0 , VAR_3 = 0 ; const TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; TYPE_5 VAR_9 = STRUCT_OR_UNION_4 -> VAR_10 , VAR_11 = STRUCT_OR_UNION_5 -> VAR_12 ; switch ( VAR_13 ) { case VAR_14 : VAR_15 = VAR_16 ; if ( VAR_17 ) {  VAR_18 = METHOD_1 ( VAR_19 , & VAR_20 ) ;  if ( VAR_21 < 0 ) goto VAR_22 ; if ( VAR_23 == 0 ) VAR_24 = VAR_25 ; } break ; case VAR_26 : if ( ! METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_27 ) ) { VAR_28 = VAR_29 ? - VAR_30 : 0 ; goto VAR_31 ; } VAR_32 = VAR_33 ; break ; default : VAR_34 = - VAR_35 ; goto VAR_36 ; } if ( VAR_37 ) { VAR_38 = METHOD_3 ( VAR_39 -> VAR_40 ) ; VAR_41 = METHOD_4 ( VAR_42 , VAR_43 ) ; if ( ! VAR_44 ) { VAR_45 = - VAR_46 ; goto VAR_47 ; } VAR_48 = METHOD_5 ( & VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; if ( VAR_53 < 0 ) goto VAR_54 ; } if ( VAR_55 != VAR_56 ) { VAR_57 . VAR_58 = VAR_59 ; VAR_60 . VAR_61 = VAR_62 ; VAR_63 = METHOD_6 ( STRUCT_OR_UNION_7 , & VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; } VAR_67 = METHOD_7 ( STRUCT_OR_UNION_8 , VAR_68 , VAR_69 , VAR_70 , 0 ) ; if ( VAR_71 ) { if ( VAR_72 != VAR_73 ) { VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; METHOD_8 ( STRUCT_OR_UNION_9 , & VAR_80 ) ; } goto VAR_81 ; } METHOD_9 ( STRUCT_OR_UNION_10 , VAR_82 , VAR_83 ) ; VAR_84 : METHOD_10 ( VAR_85 ) ; VAR_86 : return VAR_87 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; if ( VAR_5 == VAR_6 ) return VAR_7 ; if ( METHOD_1 ( VAR_8 , "on" ) == 0 ) { VAR_9 -> VAR_10 = VAR_11 ; VAR_12 -> VAR_13 = VAR_14 ; } else if ( METHOD_2 ( VAR_15 , "off" ) == 0 ) { VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 ; }  else return METHOD_3 ( VAR_22 -> VAR_23 , "ModSecurity:InvalidvalueforSecRuleEngine:%s" , VAR_24 ) ;  return VAR_25 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 ; VAR_4 = METHOD_2 ( VAR_5 , VAR_6 -> VAR_7 ) ; if ( ! VAR_8 ) { struct STRUCT_OR_UNION_3 * VAR_9 = METHOD_3 ( VAR_10 ) ; struct STRUCT_OR_UNION_4 * VAR_11 , VAR_12 ; struct STRUCT_OR_UNION_5 VAR_13 ; METHOD_4 ( & VAR_14 , 0 , sizeof ( VAR_15 ) ) ; VAR_16 . VAR_17 = VAR_18 -> VAR_19 ; VAR_20 . VAR_21 = VAR_22 -> VAR_23 ; VAR_24 . VAR_25 = VAR_26 -> VAR_27 ; VAR_28 . VAR_29 = VAR_30 -> VAR_31 ; VAR_32 . VAR_33 = VAR_34 -> VAR_35 ; VAR_36 . VAR_37 = VAR_38 -> VAR_39 ; VAR_40 . VAR_41 = VAR_42 -> VAR_43 ; VAR_44 . VAR_45 = VAR_46 -> VAR_47 ; METHOD_5 ( VAR_48 , METHOD_6 ( & VAR_49 ) ) ;  VAR_50 = METHOD_7 ( & VAR_51 , VAR_52 -> VAR_53 , & VAR_54 ) ;  VAR_55 = METHOD_8 ( VAR_56 , & VAR_57 , VAR_58 ) ; if ( METHOD_9 ( VAR_59 ) ) { VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = - METHOD_10 ( VAR_64 ) ; return METHOD_11 ( VAR_65 ) ; } METHOD_12 ( VAR_66 , VAR_67 , VAR_68 , VAR_69 ) ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 * * VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 = 0.0 , VAR_6 = 0.0 ;  TYPE_5 VAR_7 = 0 , VAR_8 = 0 , VAR_9 = 0 ;  TYPE_6 VAR_10 = 0 , VAR_11 = 0 , VAR_12 = 0 ; TYPE_7 VAR_13 = 0 ; TYPE_8 VAR_14 = 0 , VAR_15 = 0 ; TYPE_9 VAR_16 , VAR_17 ; TYPE_10 VAR_18 = 0 , VAR_19 = 0 ; TYPE_11 VAR_20 = 0 , VAR_21 = 0 , VAR_22 = 0 , VAR_23 = 0 ; TYPE_12 VAR_24 = 0 , VAR_25 = 0 ; TYPE_13 VAR_26 = 0 ; unsigned TYPE_14 * VAR_27 = VAR_28 ; unsigned TYPE_15 * VAR_29 = VAR_30 ; TYPE_16 VAR_31 = 0 ; static TYPE_17 VAR_32 = 0 ; METHOD_1 ( VAR_33 , VAR_34 , & VAR_35 ) ; METHOD_2 ( VAR_36 , VAR_37 , & VAR_38 ) ; METHOD_3 ( VAR_39 , VAR_40 , & VAR_41 ) ; METHOD_4 ( VAR_42 , VAR_43 , & VAR_44 ) ; if ( ! METHOD_5 ( VAR_45 , VAR_46 , & VAR_47 ) ) TYPE_18 ( "loadImage" , "ImagelacksPhotometricinterpreationtag" ) ; if ( ! METHOD_6 ( VAR_48 , VAR_49 , & VAR_50 ) ) TYPE_19 ( "loadimage" , "Imagelacksimagewidthtag" ) ; if ( ! METHOD_7 ( VAR_51 , VAR_52 , & VAR_53 ) ) TYPE_20 ( "loadimage" , "Imagelacksimagelengthtag" ) ; METHOD_8 ( VAR_54 , VAR_55 , & VAR_56 ) ; METHOD_9 ( VAR_57 , VAR_58 , & VAR_59 ) ; if ( ! METHOD_10 ( VAR_60 , VAR_61 , & VAR_62 ) ) VAR_63 = VAR_64 ; if ( ! METHOD_11 ( VAR_65 , VAR_66 , & VAR_67 ) ) VAR_68 = VAR_69 ; TYPE_21 TYPE_22 TYPE_23 VAR_70 [ 16 ] ; switch ( VAR_71 ) { case VAR_72 : METHOD_12 ( VAR_73 , "None/dump" ) ; break ; case VAR_74 : METHOD_13 ( VAR_75 , "HuffmanRLE" ) ; break ; case VAR_76 : METHOD_14 ( VAR_77 , "Group3Fax" ) ; break ; case VAR_78 : METHOD_15 ( VAR_79 , "Group4Fax" ) ; break ; case VAR_80 : METHOD_16 ( VAR_81 , "LZW" ) ; break ; case VAR_82 : METHOD_17 ( VAR_83 , "OldJpeg" ) ; break ; case VAR_84 : METHOD_18 ( VAR_85 , "NewJpeg" ) ; break ; case VAR_86 : METHOD_19 ( VAR_87 , "NextRLE" ) ; break ; case VAR_88 : METHOD_20 ( VAR_89 , "CITTRLEW" ) ; break ; case VAR_90 : METHOD_21 ( VAR_91 , "MacPackbits" ) ; break ; case VAR_92 : METHOD_22 ( VAR_93 , "Thunderscan" ) ; break ; case VAR_94 : METHOD_23 ( VAR_95 , "IT8padded" ) ; break ; case VAR_96 : METHOD_24 ( VAR_97 , "IT8RLE" ) ; break ; case VAR_98 : METHOD_25 ( VAR_99 , "IT8mono" ) ; break ; case VAR_100 : METHOD_26 ( VAR_101 , "IT8lineart" ) ; break ; case VAR_102 : METHOD_27 ( VAR_103 , "Pixar10bit" ) ; break ; case VAR_104 : METHOD_28 ( VAR_105 , "Pixar11bit" ) ; break ; case VAR_106 : METHOD_29 ( VAR_107 , "Deflate" ) ; break ; case VAR_108 : METHOD_30 ( VAR_109 , "Adobedeflate" ) ; break ; default : METHOD_31 ( VAR_110 , "None/unknown" ) ; break ; } TYPE_24 ( "loadImage" , "Inputcompression%s" , VAR_111 ) ; VAR_112 = METHOD_32 ( VAR_113 ) ; VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 = VAR_122 ; VAR_123 -> VAR_124 = VAR_125 ; VAR_126 -> VAR_127 = VAR_128 ; VAR_129 -> VAR_130 = VAR_131 ; VAR_132 -> VAR_133 = VAR_134 ; VAR_135 -> VAR_136 = VAR_137 ; VAR_138 -> VAR_139 = VAR_140 ; VAR_141 -> VAR_142 = VAR_143 ; TYPE_25 TYPE_26 TYPE_27 VAR_144 [ 12 ] ; switch ( VAR_145 ) { case VAR_146 : METHOD_33 ( VAR_147 , "MinIsWhite" ) ; break ; case VAR_148 : METHOD_34 ( VAR_149 , "MinIsBlack" ) ; break ; case VAR_150 : METHOD_35 ( VAR_151 , "RGB" ) ; break ; case VAR_152 : METHOD_36 ( VAR_153 , "Palette" ) ; break ; case VAR_154 : METHOD_37 ( VAR_155 , "Mask" ) ; break ; case VAR_156 : METHOD_38 ( VAR_157 , "Separated" ) ; break ; case VAR_158 : METHOD_39 ( VAR_159 , "YCBCR" ) ; break ; case VAR_160 : METHOD_40 ( VAR_161 , "CIELab" ) ; break ; case VAR_162 : METHOD_41 ( VAR_163 , "ICCLab" ) ; break ; case VAR_164 : METHOD_42 ( VAR_165 , "ITULab" ) ; break ; case VAR_166 : METHOD_43 ( VAR_167 , "LogL" ) ; break ; case VAR_168 : METHOD_44 ( VAR_169 , "LOGLuv" ) ; break ; default : METHOD_45 ( VAR_170 , "Unknown" ) ; break ; } TYPE_28 ( "loadImage" , "Inputphotometricinterpretation%s" , VAR_171 ) ; VAR_172 -> VAR_173 = VAR_174 ; switch ( VAR_175 ) { case 0 : case VAR_176 : VAR_177 -> VAR_178 = 0 ; break ; case VAR_179 : VAR_180 -> VAR_181 = VAR_182 ; break ; case VAR_183 : VAR_184 -> VAR_185 = VAR_186 ; break ; case VAR_187 : VAR_188 -> VAR_189 = VAR_190 ; break ; case VAR_191 : VAR_192 -> VAR_193 = VAR_194 | VAR_195 ; break ; case VAR_196 : VAR_197 -> VAR_198 = VAR_199 ; break ; case VAR_200 : VAR_201 -> VAR_202 = VAR_203 | VAR_204 ; break ; case VAR_205 : VAR_206 -> VAR_207 = VAR_208 ; break ; default : VAR_209 -> VAR_210 = 0 ; VAR_211 -> VAR_212 = VAR_213 ; } if ( ( VAR_214 == 0 ) || ( VAR_215 == 0 ) ) { TYPE_29 ( "loadImage" , "Invalidsamplesperpixel(%d)orbitspersample(%d)" , VAR_216 , VAR_217 ) ; return ( - 1 ) ; } if ( METHOD_46 ( VAR_218 ) ) { VAR_219 = VAR_220 ; VAR_221 = METHOD_47 ( VAR_222 ) ; VAR_223 = METHOD_48 ( VAR_224 ) ; METHOD_49 ( VAR_225 , VAR_226 , & VAR_227 ) ; METHOD_50 ( VAR_228 , VAR_229 , & VAR_230 ) ; VAR_231 = METHOD_51 ( VAR_232 ) ; if ( VAR_233 == 0 || VAR_234 == 0 || VAR_235 == 0 ) { TYPE_30 ( "loadImage" , "Fileappearstobetiled,butthenumberoftiles,tilesize,ortilerowsizeiszero." ) ; METHOD_52 ( - 1 ) ; } VAR_236 = VAR_237 * VAR_238 ; if ( VAR_239 != ( VAR_240 / VAR_241 ) ) { TYPE_31 ( "loadImage" , "Integeroverflowwhencalculatingbuffersize" ) ; METHOD_53 ( - 1 ) ; } if ( VAR_242 < ( TYPE_32 ) ( VAR_243 * VAR_244 * VAR_245 ) ) { VAR_246 = VAR_247 * VAR_248 * VAR_249 ; if ( VAR_250 != ( VAR_251 / VAR_252 / VAR_253 ) ) { TYPE_33 ( "loadImage" , "Integeroverflowwhencalculatingbuffersize" ) ; METHOD_54 ( - 1 ) ; } TYPE_34 TYPE_35 TYPE_36 ( "loadImage" , "Tilesize%uistoosmall,usingntiles*tilelength*tilerowsize%lu" , VAR_254 , ( unsigned TYPE_37 ) VAR_255 ) ; } if ( VAR_256 -> VAR_257 != VAR_258 ) METHOD_55 ( VAR_259 -> VAR_260 , VAR_261 -> VAR_262 , "" , "Tilesize:%u,NumberofTiles:%u,Tilerowsize:%u" , VAR_263 , VAR_264 , VAR_265 ) ; } else { TYPE_38 VAR_266 ; VAR_267 = VAR_268 ; METHOD_56 ( VAR_269 , VAR_270 , & VAR_271 ) ; VAR_272 = METHOD_57 ( VAR_273 ) ; VAR_274 = METHOD_58 ( VAR_275 ) ; if ( VAR_276 == 0 || VAR_277 == 0 ) { TYPE_39 ( "loadImage" , "Fileappearstobestriped,butthenumberofstipesorstripesizeiszero." ) ; METHOD_59 ( - 1 ) ; } VAR_278 = VAR_279 * VAR_280 ; if ( VAR_281 != ( VAR_282 / VAR_283 ) ) { TYPE_40 ( "loadImage" , "Integeroverflowwhencalculatingbuffersize" ) ; METHOD_60 ( - 1 ) ; } VAR_284 = ( ( VAR_285 * VAR_286 * VAR_287 * VAR_288 ) + 7 ) ; if ( VAR_289 != ( ( VAR_290 - 7 ) / VAR_291 / VAR_292 / VAR_293 ) ) { TYPE_41 ( "loadImage" , "Integeroverflowdetected." ) ; METHOD_61 ( - 1 ) ; } if ( VAR_294 < ( TYPE_42 ) ( ( ( VAR_295 * VAR_296 * VAR_297 * VAR_298 ) + 7 ) / 8 ) ) { VAR_299 = ( ( VAR_300 * VAR_301 * VAR_302 * VAR_303 ) + 7 ) / 8 ; TYPE_43 TYPE_44 TYPE_45 ( "loadImage" , "Stripsize%uistoosmall,usingimagelength*width*spp*bps/8=%lu" , VAR_304 , ( unsigned TYPE_46 ) VAR_305 ) ; } if ( VAR_306 -> VAR_307 != VAR_308 ) METHOD_62 ( VAR_309 -> VAR_310 , VAR_311 -> VAR_312 , "" , "Stripsize:%u,NumberofStrips:%u,RowsperStrip:%u,Scanlinesize:%u" , VAR_313 , VAR_314 , VAR_315 , VAR_316 ) ; } if ( VAR_317 == VAR_318 ) { VAR_319 = VAR_320 ; METHOD_63 ( VAR_321 , VAR_322 , VAR_323 ) ; } else { if ( VAR_324 == VAR_325 ) { METHOD_64 ( VAR_326 , VAR_327 , & VAR_328 , & VAR_329 ) ; if ( VAR_330 != 1 || VAR_331 != 1 ) { TYPE_47 ( "loadImage" , "Can\'tcopy/convertsubsampledimagewithsubsampling%dhoriz%dvert" , VAR_332 , VAR_333 ) ; return ( - 1 ) ; } } } VAR_334 = * VAR_335 ; if ( ! VAR_336 )  VAR_337 = ( unsigned TYPE_48 * ) METHOD_65 ( VAR_338 + 3 ) ;   else  { if ( VAR_339 < VAR_340 )  {  VAR_341 = METHOD_66 ( VAR_342 , VAR_343 + 3 ) ; if ( ! VAR_344 ) { METHOD_67 ( VAR_345 ) ; VAR_346 = ( unsigned TYPE_49 * ) METHOD_68 ( VAR_347 + 3 ) ; } else VAR_348 = VAR_349 ; } } if ( ! VAR_350 ) { TYPE_50 ( "loadImage" , "Unabletoallocate/reallocatereadbuffer" ) ; return ( - 1 ) ; } VAR_351 [ VAR_352 ] = 0 ; VAR_353 [ VAR_354 + 1 ] = 0 ; VAR_355 [ VAR_356 + 2 ] = 0 ; VAR_357 = VAR_358 ; * VAR_359 = VAR_360 ; switch ( VAR_361 ) { case VAR_362 : if ( VAR_363 == VAR_364 ) { if ( ! ( METHOD_69 ( VAR_365 , VAR_366 ) ) ) { TYPE_51 ( "loadImage" , "Unabletoreadcontiguousstripsintobuffer" ) ; return ( - 1 ) ; } } else { if ( ! ( METHOD_70 ( VAR_367 , VAR_368 , VAR_369 , VAR_370 , VAR_371 , VAR_372 ) ) ) { TYPE_52 ( "loadImage" , "Unabletoreadseparatestripsintobuffer" ) ; return ( - 1 ) ; } } break ; case VAR_373 : if ( VAR_374 == VAR_375 ) { if ( ! ( METHOD_71 ( VAR_376 , VAR_377 , VAR_378 , VAR_379 , VAR_380 , VAR_381 , VAR_382 , VAR_383 ) ) ) { TYPE_53 ( "loadImage" , "Unabletoreadcontiguoustilesintobuffer" ) ; return ( - 1 ) ; } } else { if ( ! ( METHOD_72 ( VAR_384 , VAR_385 , VAR_386 , VAR_387 , VAR_388 , VAR_389 , VAR_390 , VAR_391 ) ) ) { TYPE_54 ( "loadImage" , "Unabletoreadseparatetilesintobuffer" ) ; return ( - 1 ) ; } } break ; default : TYPE_55 ( "loadImage" , "Unsupportedimagefileformat" ) ; return ( - 1 ) ; break ; } if ( ( VAR_392 -> VAR_393 != VAR_394 ) && ( VAR_395 -> VAR_396 == 2 ) ) { METHOD_73 ( VAR_397 -> VAR_398 , VAR_399 -> VAR_400 , "loadImage" , "Imagewidth%d,length%d,Rawimagedata,%4dbytes" , VAR_401 , VAR_402 , VAR_403 ) ; METHOD_74 ( VAR_404 -> VAR_405 , VAR_406 -> VAR_407 , "" , "Bitspersample%d,Samplesperpixel%d" , VAR_408 , VAR_409 ) ; for ( VAR_410 = 0 ; VAR_411 < VAR_412 ; VAR_413 ++ ) METHOD_75 ( VAR_414 -> VAR_415 , VAR_416 -> VAR_417 , 1 , VAR_418 , VAR_419 , VAR_420 + ( VAR_421 * VAR_422 ) ) ; } return ( 0 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 = 0 , VAR_7 = 0 ; struct STRUCT_OR_UNION_0 * VAR_8 = VAR_9 ; VAR_10 = METHOD_1 ( VAR_11 ) ; VAR_12 = METHOD_2 ( ) ; METHOD_3 ( "server_input_global_request:rtype%swant_reply%d" , VAR_13 , VAR_14 ) ; if ( METHOD_4 ( VAR_15 , "tcpip-forward" ) == 0 ) { struct STRUCT_OR_UNION_1 * VAR_16 ; struct STRUCT_OR_UNION_2 VAR_17 ; VAR_18 = VAR_19 -> VAR_20 ; if ( VAR_21 == VAR_22 || ! VAR_23 -> VAR_24 ) METHOD_5 ( "server_input_global_request:no/invaliduser" ) ; METHOD_6 ( & VAR_25 , 0 , sizeof ( VAR_26 ) ) ; VAR_27 . VAR_28 = METHOD_7 ( VAR_29 ) ; VAR_30 . VAR_31 = ( TYPE_7 ) METHOD_8 ( ) ; METHOD_9 ( "server_input_global_request:tcpip-forwardlisten%sport%d" , VAR_32 . VAR_33 , VAR_34 . VAR_35 ) ; if ( ( VAR_36 . VAR_37 & VAR_38 ) == 0 || VAR_39 || VAR_40 . VAR_41 || ( ! VAR_42 && VAR_43 . VAR_44 == 0 ) || ( VAR_45 . VAR_46 != 0 && ! METHOD_10 ( VAR_47 . VAR_48 , VAR_49 -> VAR_50 ) ) ) { VAR_51 = 0 ; METHOD_11 ( "Serverhasdisabledportforwarding." ) ; } else { VAR_52 = METHOD_12 ( & VAR_53 , & VAR_54 , & VAR_55 . VAR_56 ) ; } METHOD_13 ( VAR_57 . VAR_58 ) ; if ( ( VAR_59 = METHOD_14 ( ) ) == VAR_60 ) METHOD_15 ( "%s:sshbuf_new" , VAR_61 ) ; if ( VAR_62 != 0 && ( VAR_63 = METHOD_16 ( VAR_64 , VAR_65 ) ) != 0 ) METHOD_17 ( "%s:sshbuf_put_u32:%s" , VAR_66 , METHOD_18 ( VAR_67 ) ) ; } else if ( METHOD_19 ( VAR_68 , "cancel-tcpip-forward" ) == 0 ) { struct STRUCT_OR_UNION_3 VAR_69 ; METHOD_20 ( & VAR_70 , 0 , sizeof ( VAR_71 ) ) ; VAR_72 . VAR_73 = METHOD_21 ( VAR_74 ) ; VAR_75 . VAR_76 = ( TYPE_8 ) METHOD_22 ( ) ; METHOD_23 ( "%s:cancel-tcpip-forwardaddr%sport%d" , VAR_77 , VAR_78 . VAR_79 , VAR_80 . VAR_81 ) ; VAR_82 = METHOD_24 ( & VAR_83 ) ; METHOD_25 ( VAR_84 . VAR_85 ) ; } else if ( METHOD_26 ( VAR_86 , "streamlocal-forward@openssh.com" ) == 0 ) { struct STRUCT_OR_UNION_4 VAR_87 ; METHOD_27 ( & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = METHOD_28 ( VAR_92 ) ; METHOD_29 ( "server_input_global_request:streamlocal-forwardlistenpath%s" , VAR_93 . VAR_94 ) ; if ( ( VAR_95 . VAR_96 & VAR_97 ) == 0  || VAR_98 || VAR_99 . VAR_100 ) {  VAR_101 = 0 ; METHOD_30 ( "Serverhasdisabledportforwarding." ) ; } else { VAR_102 = METHOD_31 ( & VAR_103 , VAR_104 , & VAR_105 . VAR_106 ) ; } METHOD_32 ( VAR_107 . VAR_108 ) ; } else if ( METHOD_33 ( VAR_109 , "cancel-streamlocal-forward@openssh.com" ) == 0 ) { struct STRUCT_OR_UNION_5 VAR_110 ; METHOD_34 ( & VAR_111 , 0 , sizeof ( VAR_112 ) ) ; VAR_113 . VAR_114 = METHOD_35 ( VAR_115 ) ; METHOD_36 ( "%s:cancel-streamlocal-forwardpath%s" , VAR_116 , VAR_117 . VAR_118 ) ; VAR_119 = METHOD_37 ( & VAR_120 ) ; METHOD_38 ( VAR_121 . VAR_122 ) ; } else if ( METHOD_39 ( VAR_123 , "no-more-sessions@openssh.com" ) == 0 ) { VAR_124 = 1 ; VAR_125 = 1 ; } else if ( METHOD_40 ( VAR_126 , "hostkeys-prove-00@openssh.com" ) == 0 ) { VAR_127 = METHOD_41 ( & VAR_128 ) ; } if ( VAR_129 ) { METHOD_42 ( VAR_130 ? VAR_131 : VAR_132 ) ; if ( VAR_133 && VAR_134 != VAR_135 ) METHOD_43 ( VAR_136 , METHOD_44 ( VAR_137 ) , METHOD_45 ( VAR_138 ) ) ; METHOD_46 ( ) ; METHOD_47 ( ) ; } METHOD_48 ( VAR_139 ) ; METHOD_49 ( VAR_140 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 ) ;  VAR_2 -> VAR_3 = & VAR_4 ;  VAR_5 -> VAR_6 = VAR_7 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { MonoColorType 1 RGBColorType 3 TYPE_3 VAR_2 [ VAR_3 ] ; TYPE_4 VAR_4 ; const unsigned TYPE_5 * VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; register TYPE_11 VAR_11 ; register TYPE_12 * VAR_12 ; TYPE_13 VAR_13 ; TYPE_14 VAR_14 , VAR_15 ; unsigned TYPE_15 VAR_16 [ 4 ] ; METHOD_1 ( VAR_17 != ( const TYPE_16 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_17 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , "%s" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_18 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_19 * ) VAR_45 ) ; } VAR_46 = 0 ; VAR_47 = METHOD_10 ( VAR_48 , 4 , VAR_49 ) ; VAR_50 += VAR_51 ; if ( ( VAR_52 != 4 ) || ( ( METHOD_11 ( ( TYPE_20 * ) VAR_53 , "\\200\\052\\137\\327" , 4 ) != 0 ) ) ) METHOD_12 ( VAR_54 , "ImproperImageHeader" ) ; METHOD_13 ( & VAR_55 , 0 , sizeof ( VAR_56 ) ) ; VAR_57 -> VAR_58 = ( VAR_59 [ 0 ] == 0x80 ) && ( VAR_60 [ 1 ] == 0x2a ) && ( VAR_61 [ 2 ] == 0x5f ) && ( VAR_62 [ 3 ] == 0xd7 ) ? VAR_63 : VAR_64 ; VAR_65 . VAR_66 . VAR_67 = METHOD_14 ( VAR_68 ) ; VAR_69 += 4 ; VAR_70 . VAR_71 . VAR_72 = METHOD_15 ( VAR_73 ) ; VAR_74 += 4 ; VAR_75 . VAR_76 . VAR_77 = METHOD_16 ( VAR_78 ) ; VAR_79 += 4 ; VAR_80 . VAR_81 . VAR_82 = METHOD_17 ( VAR_83 ) ; VAR_84 += 4 ; VAR_85 . VAR_86 . VAR_87 = METHOD_18 ( VAR_88 ) ; VAR_89 += 4 ; VAR_90 += METHOD_19 ( VAR_91 , sizeof ( VAR_92 . VAR_93 . VAR_94 ) , ( unsigned TYPE_21 * ) VAR_95 . VAR_96 . VAR_97 ) ; ( TYPE_22 ) METHOD_20 ( VAR_98 , VAR_99 . VAR_100 . VAR_101 , sizeof ( VAR_102 . VAR_103 . VAR_104 ) ) ; ( TYPE_23 ) METHOD_21 ( VAR_105 , "dpx:file.version" , VAR_106 , VAR_107 ) ; VAR_108 += METHOD_22 ( VAR_109 , sizeof ( VAR_110 . VAR_111 . VAR_112 ) , ( unsigned TYPE_24 * ) VAR_113 . VAR_114 . VAR_115 ) ; ( TYPE_25 ) METHOD_23 ( VAR_116 , VAR_117 . VAR_118 . VAR_119 , sizeof ( VAR_120 . VAR_121 . VAR_122 ) ) ; ( TYPE_26 ) METHOD_24 ( VAR_123 , "dpx:file.filename" , VAR_124 , VAR_125 ) ; VAR_126 += METHOD_25 ( VAR_127 , sizeof ( VAR_128 . VAR_129 . VAR_130 ) , ( unsigned TYPE_27 * ) VAR_131 . VAR_132 . VAR_133 ) ; ( TYPE_28 ) METHOD_26 ( VAR_134 , VAR_135 . VAR_136 . VAR_137 , sizeof ( VAR_138 . VAR_139 . VAR_140 ) ) ; ( TYPE_29 ) METHOD_27 ( VAR_141 , "dpx:file.create_date" , VAR_142 , VAR_143 ) ; VAR_144 += METHOD_28 ( VAR_145 , sizeof ( VAR_146 . VAR_147 . VAR_148 ) , ( unsigned TYPE_30 * ) VAR_149 . VAR_150 . VAR_151 ) ; ( TYPE_31 ) METHOD_29 ( VAR_152 , VAR_153 . VAR_154 . VAR_155 , sizeof ( VAR_156 . VAR_157 . VAR_158 ) ) ; ( TYPE_32 ) METHOD_30 ( VAR_159 , "dpx:file.create_time" , VAR_160 , VAR_161 ) ; VAR_162 += METHOD_31 ( VAR_163 , sizeof ( VAR_164 . VAR_165 . VAR_166 ) , ( unsigned TYPE_33 * ) VAR_167 . VAR_168 . VAR_169 ) ; VAR_170 . VAR_171 . VAR_172 = ( unsigned TYPE_34 ) METHOD_32 ( VAR_173 ) ; VAR_174 ++ ; if ( VAR_175 . VAR_176 . VAR_177 != ( unsigned TYPE_35 ) ( ~ 0 ) ) ( TYPE_36 ) METHOD_33 ( VAR_178 , "dpx:image.orientation" , "%d" , VAR_179 . VAR_180 . VAR_181 ) ; switch ( VAR_182 . VAR_183 . VAR_184 ) { default : case 0 : VAR_185 -> VAR_186 = VAR_187 ; break ; case 1 : VAR_188 -> VAR_189 = VAR_190 ; break ; case 2 : VAR_191 -> VAR_192 = VAR_193 ; break ; case 3 : VAR_194 -> VAR_195 = VAR_196 ; break ; case 4 : VAR_197 -> VAR_198 = VAR_199 ; break ; case 5 : VAR_200 -> VAR_201 = VAR_202 ; break ; case 6 : VAR_203 -> VAR_204 = VAR_205 ; break ; case 7 : VAR_206 -> VAR_207 = VAR_208 ; break ; } VAR_209 . VAR_210 . VAR_211 = ( unsigned TYPE_37 ) METHOD_34 ( VAR_212 ) ; VAR_213 ++ ; VAR_214 += METHOD_35 ( VAR_215 , sizeof ( VAR_216 . VAR_217 . VAR_218 ) , ( unsigned TYPE_38 * ) VAR_219 . VAR_220 . VAR_221 ) ; for ( VAR_222 = 0 ; VAR_223 < 8 ; VAR_224 ++ ) { VAR_225 . VAR_226 . VAR_227 [ VAR_228 ] . VAR_229 [ 0 ] = ( unsigned TYPE_39 ) METHOD_36 ( VAR_230 ) ; VAR_231 ++ ; VAR_232 . VAR_233 . VAR_234 [ VAR_235 ] . VAR_236 [ 1 ] = ( unsigned TYPE_40 ) METHOD_37 ( VAR_237 ) ; VAR_238 ++ ; VAR_239 . VAR_240 . VAR_241 [ VAR_242 ] . VAR_243 = ( unsigned TYPE_41 ) METHOD_38 ( VAR_244 ) ; VAR_245 ++ ; VAR_246 . VAR_247 . VAR_248 [ VAR_249 ] . VAR_250 = ( unsigned TYPE_42 ) METHOD_39 ( VAR_251 ) ; VAR_252 ++ ; VAR_253 . VAR_254 . VAR_255 [ VAR_256 ] . VAR_257 = METHOD_40 ( VAR_258 ) ; VAR_259 += 4 ; VAR_260 . VAR_261 . VAR_262 [ VAR_263 ] . VAR_264 = METHOD_41 ( VAR_265 ) ; VAR_266 += 4 ; VAR_267 . VAR_268 . VAR_269 [ VAR_270 ] . VAR_271 = METHOD_42 ( VAR_272 ) ; VAR_273 += 4 ; VAR_274 . VAR_275 . VAR_276 [ VAR_277 ] . VAR_278 = METHOD_43 ( VAR_279 ) ; VAR_280 += 4 ; VAR_281 . VAR_282 . VAR_283 [ VAR_284 ] . VAR_285 = METHOD_44 ( VAR_286 ) ; VAR_287 += 4 ; VAR_288 . VAR_289 . VAR_290 [ VAR_291 ] . VAR_292 = METHOD_45 ( VAR_293 ) ; VAR_294 += 4 ; } VAR_295 . VAR_296 . VAR_297 [ 0 ] = METHOD_46 ( VAR_298 ) ; VAR_299 += 4 ; if ( METHOD_47 ( VAR_300 . VAR_301 . VAR_302 [ 0 ] ) != VAR_303 ) VAR_304 -> VAR_305 . VAR_306 . VAR_307 = VAR_308 . VAR_309 . VAR_310 [ 0 ] ; VAR_311 . VAR_312 . VAR_313 [ 1 ] = METHOD_48 ( VAR_314 ) ; VAR_315 += 4 ; if ( METHOD_49 ( VAR_316 . VAR_317 . VAR_318 [ 1 ] ) != VAR_319 ) VAR_320 -> VAR_321 . VAR_322 . VAR_323 = VAR_324 . VAR_325 . VAR_326 [ 1 ] ; VAR_327 . VAR_328 . VAR_329 [ 0 ] = METHOD_50 ( VAR_330 ) ; VAR_331 += 4 ; if ( METHOD_51 ( VAR_332 . VAR_333 . VAR_334 [ 0 ] ) != VAR_335 ) VAR_336 -> VAR_337 . VAR_338 . VAR_339 = VAR_340 . VAR_341 . VAR_342 [ 0 ] ; VAR_343 . VAR_344 . VAR_345 [ 1 ] = METHOD_52 ( VAR_346 ) ; VAR_347 += 4 ; if ( METHOD_53 ( VAR_348 . VAR_349 . VAR_350 [ 1 ] ) != VAR_351 ) VAR_352 -> VAR_353 . VAR_354 . VAR_355 = VAR_356 . VAR_357 . VAR_358 [ 1 ] ; VAR_359 . VAR_360 . VAR_361 [ 0 ] = METHOD_54 ( VAR_362 ) ; VAR_363 += 4 ; if ( METHOD_55 ( VAR_364 . VAR_365 . VAR_366 [ 0 ] ) != VAR_367 ) VAR_368 -> VAR_369 . VAR_370 . VAR_371 = VAR_372 . VAR_373 . VAR_374 [ 0 ] ; VAR_375 . VAR_376 . VAR_377 [ 1 ] = METHOD_56 ( VAR_378 ) ; VAR_379 += 4 ; if ( METHOD_57 ( VAR_380 . VAR_381 . VAR_382 [ 1 ] ) != VAR_383 ) VAR_384 -> VAR_385 . VAR_386 . VAR_387 = VAR_388 . VAR_389 . VAR_390 [ 1 ] ; VAR_391 . VAR_392 . VAR_393 [ 0 ] = METHOD_58 ( VAR_394 ) ; VAR_395 += 4 ; if ( METHOD_59 ( VAR_396 . VAR_397 . VAR_398 [ 0 ] ) != VAR_399 ) VAR_400 -> VAR_401 . VAR_402 . VAR_403 = VAR_404 . VAR_405 . VAR_406 [ 0 ] ; VAR_407 . VAR_408 . VAR_409 [ 1 ] = METHOD_60 ( VAR_410 ) ; VAR_411 += 4 ; if ( METHOD_61 ( VAR_412 . VAR_413 . VAR_414 [ 1 ] ) != VAR_415 ) VAR_416 -> VAR_417 . VAR_418 . VAR_419 = VAR_420 . VAR_421 . VAR_422 [ 1 ] ; VAR_423 += METHOD_62 ( VAR_424 , sizeof ( VAR_425 . VAR_426 . VAR_427 ) , ( unsigned TYPE_43 * ) VAR_428 . VAR_429 . VAR_430 ) ; ( TYPE_44 ) METHOD_63 ( VAR_431 , VAR_432 . VAR_433 . VAR_434 , sizeof ( VAR_435 . VAR_436 . VAR_437 ) ) ; ( TYPE_45 ) METHOD_64 ( VAR_438 , "dpx:image.label" , VAR_439 , VAR_440 ) ; VAR_441 += METHOD_65 ( VAR_442 , sizeof ( VAR_443 . VAR_444 . VAR_445 ) , ( unsigned TYPE_46 * ) VAR_446 . VAR_447 . VAR_448 ) ; VAR_449 . VAR_450 . VAR_451 = ( unsigned TYPE_47 ) METHOD_66 ( VAR_452 ) ; VAR_453 ++ ; VAR_454 . VAR_455 . VAR_456 = ( unsigned TYPE_48 ) METHOD_67 ( VAR_457 ) ; VAR_458 ++ ; VAR_459 . VAR_460 . VAR_461 = ( unsigned TYPE_49 ) METHOD_68 ( VAR_462 ) ; VAR_463 ++ ; VAR_464 . VAR_465 . VAR_466 = ( unsigned TYPE_50 ) METHOD_69 ( VAR_467 ) ; VAR_468 ++ ; VAR_469 . VAR_470 . VAR_471 = METHOD_70 ( VAR_472 ) ; VAR_473 += 4 ; VAR_474 . VAR_475 . VAR_476 = METHOD_71 ( VAR_477 ) ; VAR_478 += 4 ; VAR_479 += METHOD_72 ( VAR_480 , sizeof ( VAR_481 . VAR_482 . VAR_483 ) , ( unsigned TYPE_51 * ) VAR_484 . VAR_485 . VAR_486 ) ; VAR_487 . VAR_488 . VAR_489 = METHOD_73 ( VAR_490 ) ; VAR_491 += 4 ; if ( ( TYPE_52 ) VAR_492 . VAR_493 . VAR_494 != ~ 0UL ) ( TYPE_53 ) METHOD_74 ( VAR_495 , "dpx:origination.x_offset" , "%.20g" , ( TYPE_54 ) VAR_496 . VAR_497 . VAR_498 ) ; VAR_499 . VAR_500 . VAR_501 = ( TYPE_55 ) METHOD_75 ( VAR_502 ) ; VAR_503 += 4 ; if ( ( TYPE_56 ) VAR_504 . VAR_505 . VAR_506 != ~ 0UL ) ( TYPE_57 ) METHOD_76 ( VAR_507 , "dpx:origination.y_offset" , "%.20g" , ( TYPE_58 ) VAR_508 . VAR_509 . VAR_510 ) ; VAR_511 += METHOD_77 ( VAR_512 , sizeof ( VAR_513 . VAR_514 . VAR_515 ) , ( unsigned TYPE_59 * ) VAR_516 . VAR_517 . VAR_518 ) ; ( TYPE_60 ) METHOD_78 ( VAR_519 , VAR_520 . VAR_521 . VAR_522 , sizeof ( VAR_523 . VAR_524 . VAR_525 ) ) ; ( TYPE_61 ) METHOD_79 ( VAR_526 , "dpx:origination.filename" , VAR_527 , VAR_528 ) ; VAR_529 += METHOD_80 ( VAR_530 , sizeof ( VAR_531 . VAR_532 . VAR_533 ) , ( unsigned TYPE_62 * ) VAR_534 . VAR_535 . VAR_536 ) ; ( TYPE_63 ) METHOD_81 ( VAR_537 , VAR_538 . VAR_539 . VAR_540 , sizeof ( VAR_541 . VAR_542 . VAR_543 ) ) ; ( TYPE_64 ) METHOD_82 ( VAR_544 , "dpx:origination.create_date" , VAR_545 , VAR_546 ) ; VAR_547 += METHOD_83 ( VAR_548 , sizeof ( VAR_549 . VAR_550 . VAR_551 ) , ( unsigned TYPE_65 * ) VAR_552 . VAR_553 . VAR_554 ) ; ( TYPE_66 ) METHOD_84 ( VAR_555 , VAR_556 . VAR_557 . VAR_558 , sizeof ( VAR_559 . VAR_560 . VAR_561 ) ) ; ( TYPE_67 ) METHOD_85 ( VAR_562 , "dpx:origination.create_time" , VAR_563 , VAR_564 ) ; VAR_565 += METHOD_86 ( VAR_566 , sizeof ( VAR_567 . VAR_568 . VAR_569 ) , ( unsigned TYPE_68 * ) VAR_570 . VAR_571 . VAR_572 ) ; ( TYPE_69 ) METHOD_87 ( VAR_573 , VAR_574 . VAR_575 . VAR_576 , sizeof ( VAR_577 . VAR_578 . VAR_579 ) ) ; ( TYPE_70 ) METHOD_88 ( VAR_580 , "dpx:origination.device" , VAR_581 , VAR_582 ) ; VAR_583 += METHOD_89 ( VAR_584 , sizeof ( VAR_585 . VAR_586 . VAR_587 ) , ( unsigned TYPE_71 * ) VAR_588 . VAR_589 . VAR_590 ) ; ( TYPE_72 ) METHOD_90 ( VAR_591 , VAR_592 . VAR_593 . VAR_594 , sizeof ( VAR_595 . VAR_596 . VAR_597 ) ) ; ( TYPE_73 ) METHOD_91 ( VAR_598 , "dpx:origination.model" , VAR_599 , VAR_600 ) ; ( TYPE_74 ) METHOD_92 ( VAR_601 . VAR_602 . VAR_603 , 0 , sizeof ( VAR_604 . VAR_605 . VAR_606 ) ) ; VAR_607 += METHOD_93 ( VAR_608 , sizeof ( VAR_609 . VAR_610 . VAR_611 ) , ( unsigned TYPE_75 * ) VAR_612 . VAR_613 . VAR_614 ) ; ( TYPE_76 ) METHOD_94 ( VAR_615 , VAR_616 . VAR_617 . VAR_618 , sizeof ( VAR_619 . VAR_620 . VAR_621 ) ) ; ( TYPE_77 ) METHOD_95 ( VAR_622 , "dpx:origination.serial" , VAR_623 , VAR_624 ) ; VAR_625 . VAR_626 . VAR_627 = METHOD_96 ( VAR_628 ) ; VAR_629 += 4 ; VAR_630 . VAR_631 . VAR_632 = METHOD_97 ( VAR_633 ) ; VAR_634 += 4 ; VAR_635 . VAR_636 . VAR_637 = METHOD_98 ( VAR_638 ) ; VAR_639 += 4 ; if ( METHOD_99 ( VAR_640 . VAR_641 . VAR_642 ) != VAR_643 ) VAR_644 -> VAR_645 = VAR_646 . VAR_647 . VAR_648 ; VAR_649 += METHOD_100 ( VAR_650 , sizeof ( VAR_651 . VAR_652 . VAR_653 ) , ( unsigned TYPE_78 * ) VAR_654 . VAR_655 . VAR_656 ) ; if ( ( VAR_657 . VAR_658 . VAR_659 > 2048 ) && ( VAR_660 . VAR_661 . VAR_662 != 0 ) ) { TYPE_79 VAR_663 ; VAR_664 . VAR_665 . VAR_666 = METHOD_101 ( VAR_667 ) ; VAR_668 ++ ; VAR_669 = VAR_670 . VAR_671 . VAR_672 ; if ( VAR_673 != ~ 0 ) ( TYPE_80 ) METHOD_102 ( VAR_674 , "dpx:film.id" , "%d" , VAR_675 . VAR_676 . VAR_677 ) ; VAR_678 . VAR_679 . VAR_680 = METHOD_103 ( VAR_681 ) ; VAR_682 ++ ; VAR_683 = VAR_684 . VAR_685 . VAR_686 ; if ( VAR_687 != ~ 0 ) ( TYPE_81 ) METHOD_104 ( VAR_688 , "dpx:film.type" , "%d" , VAR_689 . VAR_690 . VAR_691 ) ; VAR_692 . VAR_693 . VAR_694 = METHOD_105 ( VAR_695 ) ; VAR_696 ++ ; VAR_697 = VAR_698 . VAR_699 . VAR_700 ; if ( VAR_701 != ~ 0 ) ( TYPE_82 ) METHOD_106 ( VAR_702 , "dpx:film.offset" , "%d" , VAR_703 . VAR_704 . VAR_705 ) ; VAR_706 . VAR_707 . VAR_708 = METHOD_107 ( VAR_709 ) ; VAR_710 ++ ; VAR_711 . VAR_712 . VAR_713 = METHOD_108 ( VAR_714 ) ; VAR_715 += 4 ; if ( VAR_716 . VAR_717 . VAR_718 != ~ 0UL ) ( TYPE_83 ) METHOD_109 ( VAR_719 , "dpx:film.prefix" , "%.20g" , ( TYPE_84 ) VAR_720 . VAR_721 . VAR_722 ) ; VAR_723 . VAR_724 . VAR_725 = METHOD_110 ( VAR_726 ) ; VAR_727 += 4 ; VAR_728 += METHOD_111 ( VAR_729 , sizeof ( VAR_730 . VAR_731 . VAR_732 ) , ( unsigned TYPE_85 * ) VAR_733 . VAR_734 . VAR_735 ) ; ( TYPE_86 ) METHOD_112 ( VAR_736 , VAR_737 . VAR_738 . VAR_739 , sizeof ( VAR_740 . VAR_741 . VAR_742 ) ) ; ( TYPE_87 ) METHOD_113 ( VAR_743 , "dpx:film.format" , VAR_744 , VAR_745 ) ; VAR_746 . VAR_747 . VAR_748 = METHOD_114 ( VAR_749 ) ; VAR_750 += 4 ; if ( VAR_751 . VAR_752 . VAR_753 != ~ 0UL ) ( TYPE_88 ) METHOD_115 ( VAR_754 , "dpx:film.frame_position" , "%.20g" , ( TYPE_89 ) VAR_755 . VAR_756 . VAR_757 ) ; VAR_758 . VAR_759 . VAR_760 = METHOD_116 ( VAR_761 ) ; VAR_762 += 4 ; if ( METHOD_117 ( VAR_763 . VAR_764 . VAR_765 ) != VAR_766 ) ( TYPE_90 ) METHOD_118 ( VAR_767 , "dpx:film.frame_rate" , "%g" , VAR_768 . VAR_769 . VAR_770 ) ; VAR_771 += METHOD_119 ( VAR_772 , sizeof ( VAR_773 . VAR_774 . VAR_775 ) , ( unsigned TYPE_91 * ) VAR_776 . VAR_777 . VAR_778 ) ; ( TYPE_92 ) METHOD_120 ( VAR_779 , VAR_780 . VAR_781 . VAR_782 , sizeof ( VAR_783 . VAR_784 . VAR_785 ) ) ; ( TYPE_93 ) METHOD_121 ( VAR_786 , "dpx:film.frame_id" , VAR_787 , VAR_788 ) ; VAR_789 += METHOD_122 ( VAR_790 , sizeof ( VAR_791 . VAR_792 . VAR_793 ) , ( unsigned TYPE_94 * ) VAR_794 . VAR_795 . VAR_796 ) ; ( TYPE_95 ) METHOD_123 ( VAR_797 , VAR_798 . VAR_799 . VAR_800 , sizeof ( VAR_801 . VAR_802 . VAR_803 ) ) ; ( TYPE_96 ) METHOD_124 ( VAR_804 , "dpx:film.slate_info" , VAR_805 , VAR_806 ) ; VAR_807 += METHOD_125 ( VAR_808 , sizeof ( VAR_809 . VAR_810 . VAR_811 ) , ( unsigned TYPE_97 * ) VAR_812 . VAR_813 . VAR_814 ) ; } if ( ( VAR_815 . VAR_816 . VAR_817 > 2048 ) && ( VAR_818 . VAR_819 . VAR_820 != 0 ) ) { TYPE_98 * VAR_821 ; if ( VAR_822 . VAR_823 . VAR_824 > METHOD_126 ( VAR_825 ) ) METHOD_127 ( VAR_826 , "InsufficientImageDataInFile" ) ; VAR_827 = METHOD_128 ( ( const unsigned TYPE_99 * ) VAR_828 , VAR_829 . VAR_830 . VAR_831 ) ; if ( VAR_832 == ( TYPE_100 * ) VAR_833 ) METHOD_129 ( VAR_834 , "MemoryAllocationFailed" ) ; VAR_835 += METHOD_130 ( VAR_836 , METHOD_131 ( VAR_837 ) , METHOD_132 ( VAR_838 ) ) ; ( TYPE_101 ) METHOD_133 ( VAR_839 , "dpx:user.data" , VAR_840 , VAR_841 ) ; VAR_842 = METHOD_134 ( VAR_843 ) ; } VAR_844 -> VAR_845 = VAR_846 . VAR_847 . VAR_848 [ 0 ] . VAR_849 ; VAR_850 -> VAR_851 = VAR_852 . VAR_853 . VAR_854 [ 0 ] . VAR_855 ; VAR_856 -> VAR_857 = VAR_858 . VAR_859 . VAR_860 [ 0 ] . VAR_861 ; if ( VAR_862 -> VAR_863 != VAR_864 ) { ( TYPE_102 ) METHOD_135 ( VAR_865 ) ; return ( VAR_866 ) ; }  for ( ; VAR_867 < ( TYPE_103 ) VAR_868 . VAR_869 . VAR_870 ; VAR_871 ++ )  { TYPE_104 VAR_872 ; VAR_873 = METHOD_136 ( VAR_874 ) ; if ( VAR_875 == VAR_876 ) break ; } if ( VAR_877 < ( TYPE_105 ) VAR_878 . VAR_879 . VAR_880 ) METHOD_137 ( VAR_881 , "ImproperImageHeader" ) ; VAR_882 = METHOD_138 ( VAR_883 , VAR_884 -> VAR_885 , VAR_886 -> VAR_887 , VAR_888 ) ; if ( VAR_889 == VAR_890 ) return ( METHOD_139 ( VAR_891 ) ) ; ( TYPE_106 ) METHOD_140 ( VAR_892 , VAR_893 ) ; VAR_894 = METHOD_141 ( VAR_895 , VAR_896 ) ; if ( VAR_897 == ( TYPE_107 * ) VAR_898 ) METHOD_142 ( VAR_899 , "MemoryAllocationFailed" ) ; VAR_900 -> VAR_901 = 32 ; VAR_902 -> VAR_903 = VAR_904 ; VAR_905 = VAR_906 ; VAR_907 = METHOD_143 ( VAR_908 , VAR_909 , VAR_910 ) ; VAR_911 = METHOD_144 ( VAR_912 -> VAR_913 , 3 , VAR_914 -> VAR_915 , VAR_916 ) ; if ( VAR_917 . VAR_918 . VAR_919 == 1 ) { VAR_920 = VAR_921 ; VAR_922 = METHOD_145 ( VAR_923 -> VAR_924 , 1 , VAR_925 -> VAR_926 , VAR_927 ) ; } for ( VAR_928 = 0 ; VAR_929 < ( TYPE_108 ) VAR_930 -> VAR_931 ; VAR_932 ++ ) { VAR_933 = METHOD_146 ( VAR_934 , 0 , VAR_935 , VAR_936 -> VAR_937 , 1 , VAR_938 ) ; if ( VAR_939 == ( TYPE_109 * ) VAR_940 ) break ; VAR_941 = ( const unsigned TYPE_110 * ) METHOD_147 ( VAR_942 , VAR_943 , METHOD_148 ( VAR_944 ) , & VAR_945 ) ; if ( ( TYPE_111 ) VAR_946 != VAR_947 ) break ; ( TYPE_112 ) METHOD_149 ( VAR_948 , ( TYPE_113 * ) VAR_949 , VAR_950 , VAR_951 , VAR_952 , VAR_953 ) ; if ( METHOD_150 ( VAR_954 , VAR_955 ) == VAR_956 ) break ; if ( VAR_957 -> VAR_958 == ( TYPE_114 * ) VAR_959 ) { VAR_960 = METHOD_151 ( VAR_961 , VAR_962 , ( TYPE_115 ) VAR_963 , VAR_964 -> VAR_965 ) ; if ( VAR_966 == VAR_967 ) break ; } } METHOD_152 ( VAR_968 , VAR_969 ) ; VAR_970 = METHOD_153 ( VAR_971 ) ; if ( METHOD_154 ( VAR_972 ) != VAR_973 ) METHOD_155 ( VAR_974 , VAR_975 , "UnexpectedEndOfFile" , VAR_976 -> VAR_977 ) ; METHOD_156 ( VAR_978 , VAR_979 , VAR_980 ) ; ( TYPE_116 ) METHOD_157 ( VAR_981 ) ; return ( METHOD_158 ( VAR_982 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; TYPE_3 VAR_4 , VAR_5 = 0 ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_7 ) -> VAR_8 ; TYPE_4 VAR_9 = 0 ;  if ( METHOD_2 ( STRUCT_OR_UNION_6 ) )  VAR_10 = METHOD_3 ( METHOD_4 ( METHOD_5 ( STRUCT_OR_UNION_7 ) ) ) ; if ( VAR_11 > METHOD_6 ( VAR_12 -> VAR_13 ) ) { VAR_14 |= VAR_15 ; VAR_16 -- ; } else VAR_17 = METHOD_7 ( STRUCT_OR_UNION_8 ) ; VAR_18 = METHOD_8 ( VAR_19 , STRUCT_OR_UNION_9 , VAR_20 , VAR_21 , VAR_22 , & VAR_23 ) ; if ( VAR_24 == 0 ) return VAR_25 ; VAR_26 = METHOD_9 ( STRUCT_OR_UNION_10 -> VAR_27 , VAR_28 , VAR_29 | VAR_30 ) ; if ( METHOD_10 ( ! VAR_31 ) ) return - VAR_32 ; METHOD_11 ( VAR_33 ) ; VAR_34 = METHOD_12 ( VAR_35 , VAR_36 ) ; if ( VAR_37 ) { METHOD_13 ( VAR_38 ) ; goto VAR_39 ; }  METHOD_14 ( VAR_40 -> VAR_41 , METHOD_15 ( STRUCT_OR_UNION_11 ) -> VAR_42 ,   sizeof ( METHOD_16 ( STRUCT_OR_UNION_12 ) -> VAR_43 ) ) ;  VAR_44 = METHOD_17 ( VAR_45 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_13 ) ) VAR_46 -> VAR_47 = METHOD_19 ( METHOD_20 ( STRUCT_OR_UNION_14 , 0 ) ) ; else VAR_48 -> VAR_49 = METHOD_21 ( METHOD_22 ( STRUCT_OR_UNION_15 , 0 ) ) ; VAR_50 -> VAR_51 = VAR_52 ; METHOD_23 ( STRUCT_OR_UNION_16 , VAR_53 ) ; METHOD_24 ( VAR_54 ) ; METHOD_25 ( VAR_55 ) ; VAR_56 = METHOD_26 ( VAR_57 , STRUCT_OR_UNION_17 , VAR_58 ) ; if ( VAR_59 ) goto VAR_60 ; VAR_61 = METHOD_27 ( STRUCT_OR_UNION_18 ) ; VAR_62 -> VAR_63 = METHOD_28 ( 1 ) ; METHOD_29 ( METHOD_30 ( VAR_64 ) , VAR_65 ) ; if ( VAR_66 -> VAR_67 == 0 ) { VAR_68 -> VAR_69 = METHOD_31 ( METHOD_32 ( STRUCT_OR_UNION_19 , 0 ) ) ; METHOD_33 ( VAR_70 ) -> VAR_71 = METHOD_34 ( VAR_72 ) -> VAR_73 ; } METHOD_35 ( "newroot:num%d(%d),lblock%d,ptr%llu\\n" , METHOD_36 ( VAR_74 -> VAR_75 ) , METHOD_37 ( VAR_76 -> VAR_77 ) , METHOD_38 ( METHOD_39 ( VAR_78 ) -> VAR_79 ) , METHOD_40 ( METHOD_41 ( VAR_80 ) ) ) ; METHOD_42 ( & VAR_81 -> VAR_82 , 1 ) ; METHOD_43 ( VAR_83 , STRUCT_OR_UNION_20 ) ; VAR_84 : METHOD_44 ( VAR_85 ) ; return VAR_86 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 VAR_0 , TYPE_3 * VAR_1 ) { VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; VAR_6 = METHOD_1 ( VAR_7 , METHOD_2 ( ) ) ; VAR_8 = METHOD_3 ( VAR_9 , VAR_10 ) ; if ( ! VAR_11 -> VAR_12 -> VAR_13 . VAR_14 && ! VAR_15 -> VAR_16 -> VAR_17 . VAR_18 ) { METHOD_4 ( VAR_19 , "Certificateverificationdisabled" ) ; return 1 ; }  if ( METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) ) {  TYPE_4 * VAR_23 = METHOD_6 ( VAR_24 -> VAR_25 ) ; if ( VAR_26 ) { TYPE_5 VAR_27 = METHOD_7 ( VAR_28 , VAR_29 ,  ( TYPE_6 * ) ( - 1 ) ) ;  METHOD_8 ( VAR_30 ) ; if ( ! VAR_31 ) { METHOD_9 ( "SSL_SESSION_set_ex_data" ) ; return 0 ; } } return 1 ; }  if ( VAR_32 -> VAR_33 -> VAR_34 . VAR_35 || VAR_36 -> VAR_37 -> VAR_38 )  return 0 ;  if ( VAR_39 -> VAR_40 -> VAR_41 . VAR_42 )  return 1 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 , * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 = VAR_6 -> VAR_7 ; TYPE_2 VAR_8 = VAR_9 -> VAR_10 ;  TYPE_3 VAR_11 ;  if ( ! METHOD_1 ( VAR_12 , VAR_13 ) || ! METHOD_2 ( VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_3 ( VAR_18 , VAR_19 ) ; if ( ! VAR_20 ) return - VAR_21 ; VAR_22 = METHOD_4 ( & VAR_23 -> VAR_24 ) ; if ( VAR_25 ) { METHOD_5 ( VAR_26 , VAR_27 ) ; return VAR_28 ; } METHOD_6 ( & VAR_29 -> VAR_30 , 1 ) ; VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 = VAR_39 ; METHOD_7 ( VAR_40 , VAR_41 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; union STRUCT_OR_UNION_7 VAR_7 ; TYPE_1 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_2 VAR_11 = VAR_12 -> VAR_13 ; unsigned TYPE_3 VAR_14 , VAR_15 ; unsigned TYPE_4 VAR_16 = VAR_17 ; unsigned TYPE_5 VAR_18 , VAR_19 , VAR_20 ; struct STRUCT_OR_UNION_8 * VAR_21 = VAR_22 ; struct STRUCT_OR_UNION_9 VAR_23 ; TYPE_6 VAR_24 ;  TYPE_7 VAR_25 = VAR_26 ;  METHOD_1 ( METHOD_2 ( sizeof ( * VAR_27 . VAR_28 ) ) != 32 ) ; METHOD_3 ( METHOD_4 ( sizeof ( * VAR_29 . VAR_30 ) ) != 48 ) ; if ( VAR_31 -> VAR_32 == VAR_33 ) goto VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; VAR_38 = METHOD_5 ( VAR_39 ) ; if ( ! METHOD_6 ( METHOD_7 ( VAR_40 ) , METHOD_8 ( VAR_41 ) ) ) goto VAR_42 ; if ( VAR_43 -> VAR_44 ) { if ( VAR_45 -> VAR_46 != VAR_47 ) METHOD_9 ( VAR_48 , VAR_49 -> VAR_50 - METHOD_10 ( VAR_51 ) ) ; else if ( VAR_52 -> VAR_53 == VAR_54 ) { METHOD_11 ( VAR_55 , METHOD_12 ( VAR_56 ) ) ; } } VAR_57 = VAR_58 -> VAR_59 ; VAR_60 = METHOD_13 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( ! VAR_64 ) goto VAR_65 ; if ( VAR_66 -> VAR_67 == VAR_68 ) VAR_69 |= VAR_70 ; else if ( VAR_71 -> VAR_72 != VAR_73 && ( VAR_74 -> VAR_75 == VAR_76 || METHOD_14 ( VAR_77 ) ) ) VAR_78 |= VAR_79 ; if ( VAR_80 > VAR_81 ) VAR_82 = VAR_83 ; if ( VAR_84 -> VAR_85 == VAR_86 ) { VAR_87 = VAR_88 = METHOD_15 ( VAR_89 -> VAR_90 ) + 16 + VAR_91 -> VAR_92 ; } else { unsigned TYPE_8 VAR_93 = METHOD_16 ( VAR_94 ) ; VAR_95 = METHOD_17 ( VAR_96 -> VAR_97 + ( VAR_98 < 16 ? 16 : VAR_99 ) ) + VAR_100 -> VAR_101 ;  if ( VAR_102 -> VAR_103 )  VAR_104 += sizeof ( struct STRUCT_OR_UNION_10 ) ;  VAR_105 = VAR_106 - VAR_107 ;  } if ( VAR_108 -> VAR_109 <= VAR_110 ) { if ( VAR_111 + VAR_112 > VAR_113 -> VAR_114 . VAR_115 ) { if ( VAR_116 -> VAR_117 && METHOD_18 ( & VAR_118 -> VAR_119 ) < VAR_120 -> VAR_121 ) { if ( METHOD_19 ( VAR_122 ) ) { VAR_123 = METHOD_20 ( VAR_124 , VAR_125 ) ; } else { VAR_126 = METHOD_21 ( VAR_127 ) ; VAR_128 = VAR_129 -> VAR_130 ; } if ( VAR_131 ) METHOD_22 ( VAR_132 , VAR_133 ) ; } VAR_134 = VAR_135 -> VAR_136 . VAR_137 - VAR_138 ;  if ( ( TYPE_9 ) VAR_139 < 0 )   VAR_140 = 0 ;  } } else if ( METHOD_23 ( VAR_141 + VAR_142 > METHOD_24 ( & VAR_143 -> VAR_144 ) -> VAR_145 ) ) { TYPE_10 VAR_146 ; VAR_147 = METHOD_25 ( & VAR_148 -> VAR_149 ) -> VAR_150 - VAR_151 ; METHOD_26 ( "tpacket_rcv:packettoobig,clampedfrom%uto%u.macoff=%u\\n" , VAR_152 , VAR_153 , VAR_154 ) ; VAR_155 = VAR_156 ; if ( METHOD_27 ( ( TYPE_11 ) VAR_157 < 0 ) ) { VAR_158 = 0 ; VAR_159 = METHOD_28 ( & VAR_160 -> VAR_161 ) -> VAR_162 ;  }  } METHOD_29 ( & VAR_163 -> VAR_164 . VAR_165 ) ; VAR_166 . VAR_167 = METHOD_30 ( VAR_168 , VAR_169 , VAR_170 , ( VAR_171 + VAR_172 ) ) ; if ( ! VAR_173 . VAR_174 ) goto VAR_175 ; if ( VAR_176 -> VAR_177 <= VAR_178 ) { METHOD_31 ( VAR_179 , & VAR_180 -> VAR_181 ) ; if ( VAR_182 -> VAR_183 . VAR_184 . VAR_185 ) VAR_186 |= VAR_187 ; } VAR_188 -> VAR_189 . VAR_190 . VAR_191 ++ ; if ( VAR_192 ) { VAR_193 |= VAR_194 ; METHOD_32 ( & VAR_195 -> VAR_196 , VAR_197 ) ; } METHOD_33 ( & VAR_198 -> VAR_199 . VAR_200 ) ;  if ( VAR_201 -> VAR_202 ) {  if ( METHOD_34 ( VAR_203 , VAR_204 . VAR_205 + VAR_206 - sizeof ( struct STRUCT_OR_UNION_11 ) , METHOD_35 ( ) , VAR_207 ) ) { METHOD_36 ( & VAR_208 -> VAR_209 . VAR_210 ) ; goto VAR_211 ; } } METHOD_37 ( VAR_212 , 0 , VAR_213 . VAR_214 + VAR_215 , VAR_216 ) ; if ( ! ( VAR_217 = METHOD_38 ( VAR_218 , & VAR_219 , VAR_220 -> VAR_221 ) ) ) METHOD_39 ( & VAR_222 ) ; VAR_223 |= VAR_224 ; switch ( VAR_225 -> VAR_226 ) { case VAR_227 : VAR_228 . VAR_229 -> VAR_230 = VAR_231 -> VAR_232 ; VAR_233 . VAR_234 -> VAR_235 = VAR_236 ; VAR_237 . VAR_238 -> VAR_239 = VAR_240 ; VAR_241 . VAR_242 -> VAR_243 = VAR_244 ; VAR_245 . VAR_246 -> VAR_247 = VAR_248 . VAR_249 ; VAR_250 . VAR_251 -> VAR_252 = VAR_253 . VAR_254 / VAR_255 ; VAR_256 = sizeof ( * VAR_257 . VAR_258 ) ; break ; case VAR_259 : VAR_260 . VAR_261 -> VAR_262 = VAR_263 -> VAR_264 ; VAR_265 . VAR_266 -> VAR_267 = VAR_268 ; VAR_269 . VAR_270 -> VAR_271 = VAR_272 ; VAR_273 . VAR_274 -> VAR_275 = VAR_276 ; VAR_277 . VAR_278 -> VAR_279 = VAR_280 . VAR_281 ; VAR_282 . VAR_283 -> VAR_284 = VAR_285 . VAR_286 ; if ( METHOD_40 ( VAR_287 ) ) { VAR_288 . VAR_289 -> VAR_290 = METHOD_41 ( VAR_291 ) ; VAR_292 . VAR_293 -> VAR_294 = METHOD_42 ( VAR_295 -> VAR_296 ) ; VAR_297 |= VAR_298 | VAR_299 ; } else { VAR_300 . VAR_301 -> VAR_302 = 0 ; VAR_303 . VAR_304 -> VAR_305 = 0 ; } METHOD_43 ( VAR_306 . VAR_307 -> VAR_308 , 0 , sizeof ( VAR_309 . VAR_310 -> VAR_311 ) ) ; VAR_312 = sizeof ( * VAR_313 . VAR_314 ) ; break ; case VAR_315 : VAR_316 . VAR_317 -> VAR_318 |= VAR_319 ; VAR_320 . VAR_321 -> VAR_322 = VAR_323 -> VAR_324 ; VAR_325 . VAR_326 -> VAR_327 = VAR_328 ; VAR_329 . VAR_330 -> VAR_331 = VAR_332 ; VAR_333 . VAR_334 -> VAR_335 = VAR_336 ; VAR_337 . VAR_338 -> VAR_339 = VAR_340 . VAR_341 ; VAR_342 . VAR_343 -> VAR_344 = VAR_345 . VAR_346 ; METHOD_44 ( VAR_347 . VAR_348 -> VAR_349 , 0 , sizeof ( VAR_350 . VAR_351 -> VAR_352 ) ) ; VAR_353 = sizeof ( * VAR_354 . VAR_355 ) ; break ; default : METHOD_45 ( ) ; } VAR_356 = VAR_357 . VAR_358 + METHOD_46 ( VAR_359 ) ; VAR_360 -> VAR_361 = METHOD_47 ( VAR_362 , VAR_363 -> VAR_364 ) ; VAR_365 -> VAR_366 = VAR_367 ; VAR_368 -> VAR_369 = VAR_370 -> VAR_371 ; VAR_372 -> VAR_373 = VAR_374 -> VAR_375 ; VAR_376 -> VAR_377 = VAR_378 -> VAR_379 ; if ( METHOD_48 ( VAR_380 -> VAR_381 ) ) VAR_382 -> VAR_383 = VAR_384 -> VAR_385 ; else VAR_386 -> VAR_387 = VAR_388 -> VAR_389 ; METHOD_49 ( ) ; if VAR_390 == 1 if ( VAR_391 -> VAR_392 <= VAR_393 ) { TYPE_12 * VAR_394 , * VAR_395 ; VAR_396 = ( TYPE_13 * ) METHOD_50 ( ( unsigned TYPE_14 ) VAR_397 . VAR_398 + VAR_399 + VAR_400 ) ; for ( VAR_401 = VAR_402 . VAR_403 ; VAR_404 < VAR_405 ; VAR_406 += VAR_407 ) METHOD_51 ( METHOD_52 ( VAR_408 ) ) ; } METHOD_53 ( ) ; if ( VAR_409 -> VAR_410 <= VAR_411 ) { METHOD_54 ( VAR_412 , VAR_413 . VAR_414 , VAR_415 ) ; VAR_416 -> METHOD_55 ( VAR_417 ) ; } else { METHOD_56 ( & VAR_418 -> VAR_419 ) ; } VAR_420 : if ( VAR_421 != VAR_422 -> VAR_423 && METHOD_57 ( VAR_424 ) ) { VAR_425 -> VAR_426 = VAR_427 ; VAR_428 -> VAR_429 = VAR_430 ; } VAR_431 : if ( ! VAR_432 ) METHOD_58 ( VAR_433 ) ; else METHOD_59 ( VAR_434 ) ; return 0 ; VAR_435 : VAR_436 = VAR_437 ; VAR_438 -> VAR_439 . VAR_440 . VAR_441 ++ ; METHOD_60 ( & VAR_442 -> VAR_443 . VAR_444 ) ; VAR_445 -> METHOD_61 ( VAR_446 ) ; METHOD_62 ( VAR_447 ) ; goto VAR_448 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 , * VAR_4 ; VAR_5 -> VAR_6 = VAR_7 -> VAR_8 ; VAR_9 -> VAR_10 . VAR_11 = VAR_12 -> VAR_13 . VAR_14 ; VAR_15 -> VAR_16 . VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; VAR_21 -> VAR_22 . VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; METHOD_1 ( & VAR_33 -> VAR_34 . VAR_35 , VAR_36 , VAR_37 -> VAR_38 . VAR_39 . VAR_40 , VAR_41 ) ; METHOD_2 ( VAR_42 , VAR_43 , & VAR_44 -> VAR_45 . VAR_46 ) { VAR_47 = list_entry ( VAR_48 , struct STRUCT_OR_UNION_4 , VAR_49 ) ; if ( ! METHOD_3 ( VAR_50 , & VAR_51 -> VAR_52 ) ) { METHOD_4 ( VAR_53 , VAR_54 ) ; continue ; } if ( VAR_55 -> VAR_56 >= VAR_57 ) METHOD_5 ( VAR_58 ) ; } if ( VAR_59 -> VAR_60 >= VAR_61 ) { VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; VAR_70 -> VAR_71 = VAR_72 -> VAR_73 ; METHOD_6 ( VAR_74 -> VAR_75 ) ; METHOD_7 ( & VAR_76 -> VAR_77 ) ; VAR_78 -> VAR_79 = 0 ; } else { METHOD_8 ( VAR_80 , & VAR_81 -> VAR_82 . VAR_83 , VAR_84 ) { if ( ! METHOD_9 ( VAR_85 , & VAR_86 -> VAR_87 ) ) METHOD_10 ( VAR_88 , & VAR_89 -> VAR_90 , VAR_91 , VAR_92 -> VAR_93 ) ; } VAR_94 -> VAR_95 = VAR_96 -> VAR_97 - 1 ; VAR_98 -> VAR_99 = VAR_100 -> VAR_101 ; if ( ! VAR_102 -> VAR_103 ) { VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; } if ( ! VAR_111 -> VAR_112 ) { METHOD_11 ( VAR_113 , VAR_114 ) ; } } METHOD_12 ( VAR_115 -> VAR_116 . VAR_117 ) ; VAR_118 -> VAR_119 . VAR_120 = VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 . VAR_126 = VAR_127 ; METHOD_13 ( VAR_128 -> VAR_129 . VAR_130 ) ; VAR_131 -> VAR_132 . VAR_133 = VAR_134 -> VAR_135 . VAR_136 ; VAR_137 -> VAR_138 . VAR_139 = VAR_140 ; METHOD_14 ( VAR_141 -> VAR_142 . VAR_143 ) ; VAR_144 -> VAR_145 . VAR_146 = VAR_147 -> VAR_148 . VAR_149 ; VAR_150 -> VAR_151 . VAR_152 = VAR_153 ;  METHOD_15 ( VAR_154 -> VAR_155 ) ;  METHOD_16 ( VAR_156 , VAR_157 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 ) ; enum METHOD_2 VAR_3 = METHOD_3 ( VAR_4 ) ; if ( VAR_5 < METHOD_4 ( VAR_6 ) -> VAR_7 ) return VAR_8 ;  return VAR_9 ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) {   TYPE_4 VAR_3 = - 1 ;  TYPE_5 VAR_4 = 0 ; const TYPE_6 * VAR_5 ; TYPE_7 * VAR_6 = VAR_7 ; VAR_8 = METHOD_1 ( ) ; if ( METHOD_2 ( VAR_9 , "nop" ) == 0 )  goto VAR_10 ;  if ( METHOD_3 ( VAR_11 , "none" ) == 0 )  goto VAR_12 ;  if ( METHOD_4 ( VAR_13 , "AppArmor" ) == 0 ) VAR_14 = 0 ;  if ( VAR_15 ) {  VAR_16 = METHOD_5 ( VAR_17 , "self/attr/exec" , VAR_18 ) ; } else { VAR_19 = METHOD_6 ( VAR_20 , "self/attr/current" , VAR_21 ) ; } if ( VAR_22 < 0 ) { METHOD_7 ( "UnabletoopenLSMlabel" ) ; VAR_23 = - 1 ; goto VAR_24 ; } if ( METHOD_8 ( VAR_25 , "AppArmor" ) == 0 ) { TYPE_8 VAR_26 ; VAR_27 = METHOD_9 ( METHOD_10 ( VAR_28 ) + METHOD_11 ( "changeprofile" ) + 1 ) ; if ( ! VAR_29 ) { METHOD_12 ( "Failedtowriteapparmorprofile" ) ;  VAR_30 = - 1 ;  goto VAR_31 ; } VAR_32 = METHOD_13 ( VAR_33 , "changeprofile%s" , VAR_34 ) ; if ( VAR_35 < 0 ) { METHOD_14 ( "Failedtowriteapparmorprofile" ) ;  VAR_36 = - 1 ;  goto VAR_37 ; }  if ( METHOD_15 ( VAR_38 , VAR_39 , VAR_40 + 1 ) < 0 ) {   METHOD_16 ( "UnabletosetLSMlabel" ) ;   VAR_41 = - 1 ;  goto VAR_42 ; } } else if ( METHOD_17 ( VAR_43 , "SELinux" ) == 0 ) { if ( METHOD_18 ( VAR_44 , VAR_45 , METHOD_19 ( VAR_46 ) + 1 ) < 0 ) { METHOD_20 ( "UnabletosetLSMlabel" ) ; VAR_47 = - 1 ; goto VAR_48 ; } } else { METHOD_21 ( "UnabletorestorelabelforunknownLSM:%s" , VAR_49 ) ;  VAR_50 = - 1 ;  goto VAR_51 ; } VAR_52 : METHOD_22 ( VAR_53 ) ;  if ( VAR_54 != - 1 )   METHOD_23 ( VAR_55 ) ;   return VAR_56 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( ! VAR_6 -> VAR_7 ) { VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] ; goto VAR_13 ; } else { VAR_14 -> VAR_15 = 0 ; } for ( VAR_16 -> VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; VAR_21 -> VAR_22 < VAR_23 -> VAR_24 . VAR_25 ; VAR_26 -> VAR_27 ++ ) { TYPE_5 VAR_28 ; VAR_29 = & VAR_30 -> VAR_31 [ VAR_32 -> VAR_33 ] ; VAR_34 -> VAR_35 = 0 ; VAR_36 -> VAR_37 = 0 ; for ( VAR_38 = 0 ; VAR_39 < VAR_40 -> VAR_41 ; VAR_42 ++ ) { TYPE_6 VAR_43 , VAR_44 ; VAR_45 = & VAR_46 -> VAR_47 [ VAR_48 ] ; VAR_49 = VAR_50 -> VAR_51 * ( 1u << ( VAR_52 -> VAR_53 + VAR_54 -> VAR_55 - 1 - VAR_56 ) ) ; VAR_57 = VAR_58 -> VAR_59 * ( 1u << ( VAR_60 -> VAR_61 + VAR_62 -> VAR_63 - 1 - VAR_64 ) ) ; VAR_65 -> VAR_66 = ! VAR_67 -> VAR_68 ? VAR_69 : METHOD_1 ( VAR_70 -> VAR_71 , VAR_72 ) ; VAR_73 -> VAR_74 = ! VAR_75 -> VAR_76 ? VAR_77 : METHOD_2 ( VAR_78 -> VAR_79 , VAR_80 ) ; } if ( ! VAR_81 -> VAR_82 ) { VAR_83 -> VAR_84 . VAR_85 = VAR_86 -> VAR_87 ; VAR_88 -> VAR_89 . VAR_90 = VAR_91 -> VAR_92 ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 -> VAR_97 ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 -> VAR_102 ; } for ( VAR_103 -> VAR_104 = VAR_105 -> VAR_106 . VAR_107 ; VAR_108 -> VAR_109 < VAR_110 -> VAR_111 . VAR_112 ; VAR_113 -> VAR_114 += ( TYPE_7 ) ( VAR_115 -> VAR_116 - ( TYPE_8 ) ( VAR_117 -> VAR_118 % ( TYPE_9 ) VAR_119 -> VAR_120 ) ) ) { for ( VAR_121 -> VAR_122 = VAR_123 -> VAR_124 . VAR_125 ; VAR_126 -> VAR_127 < VAR_128 -> VAR_129 . VAR_130 ; VAR_131 -> VAR_132 += ( TYPE_10 ) ( VAR_133 -> VAR_134 - ( TYPE_11 ) ( VAR_135 -> VAR_136 % ( TYPE_12 ) VAR_137 -> VAR_138 ) ) ) { for ( VAR_139 -> VAR_140 = VAR_141 -> VAR_142 . VAR_143 ; VAR_144 -> VAR_145 < METHOD_3 ( VAR_146 -> VAR_147 . VAR_148 , VAR_149 -> VAR_150 ) ; VAR_151 -> VAR_152 ++ ) { TYPE_13 VAR_153 ; TYPE_14 VAR_154 , VAR_155 ; TYPE_15 VAR_156 , VAR_157 ; TYPE_16 VAR_158 , VAR_159 ; TYPE_17 VAR_160 , VAR_161 ; VAR_162 = & VAR_163 -> VAR_164 [ VAR_165 -> VAR_166 ] ; VAR_167 = VAR_168 -> VAR_169 - 1 - VAR_170 -> VAR_171 ; VAR_172 = METHOD_4 ( VAR_173 -> VAR_174 , ( TYPE_18 ) ( VAR_175 -> VAR_176 << VAR_177 ) ) ; VAR_178 = METHOD_5 ( VAR_179 -> VAR_180 , ( TYPE_19 ) ( VAR_181 -> VAR_182 << VAR_183 ) ) ; VAR_184 = METHOD_6 ( VAR_185 -> VAR_186 , ( TYPE_20 ) ( VAR_187 -> VAR_188 << VAR_189 ) ) ; VAR_190 = METHOD_7 ( VAR_191 -> VAR_192 , ( TYPE_21 ) ( VAR_193 -> VAR_194 << VAR_195 ) ) ; VAR_196 = VAR_197 -> VAR_198 + VAR_199 ; VAR_200 = VAR_201 -> VAR_202 + VAR_203 ;  if ( ! ( ( VAR_204 -> VAR_205 % ( TYPE_22 ) ( VAR_206 -> VAR_207 << VAR_208 ) == 0 ) || ( ( VAR_209 -> VAR_210 == VAR_211 -> VAR_212 ) &&  ( ( VAR_213 << VAR_214 ) % ( 1 << VAR_215 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_216 -> VAR_217 % ( TYPE_23 ) ( VAR_218 -> VAR_219 << VAR_220 ) == 0 ) || ( ( VAR_221 -> VAR_222 == VAR_223 -> VAR_224 ) && ( ( VAR_225 << VAR_226 ) % ( 1 << VAR_227 ) ) ) ) ) { continue ; } if ( ( VAR_228 -> VAR_229 == 0 ) || ( VAR_230 -> VAR_231 == 0 ) ) { continue ; } if ( ( VAR_232 == VAR_233 ) || ( VAR_234 == VAR_235 ) ) { continue ; } VAR_236 = METHOD_8 ( METHOD_9 ( VAR_237 -> VAR_238 , ( TYPE_24 ) ( VAR_239 -> VAR_240 << VAR_241 ) ) , ( TYPE_25 ) VAR_242 -> VAR_243 ) - METHOD_10 ( VAR_244 , ( TYPE_26 ) VAR_245 -> VAR_246 ) ; VAR_247 = METHOD_11 ( METHOD_12 ( VAR_248 -> VAR_249 , ( TYPE_27 ) ( VAR_250 -> VAR_251 << VAR_252 ) ) , ( TYPE_28 ) VAR_253 -> VAR_254 ) - METHOD_13 ( VAR_255 , ( TYPE_29 ) VAR_256 -> VAR_257 ) ; VAR_258 -> VAR_259 = ( TYPE_30 ) ( VAR_260 + VAR_261 * ( TYPE_31 ) VAR_262 -> VAR_263 ) ; for ( VAR_264 -> VAR_265 = VAR_266 -> VAR_267 . VAR_268 ; VAR_269 -> VAR_270 < VAR_271 -> VAR_272 . VAR_273 ; VAR_274 -> VAR_275 ++ ) { VAR_276 = VAR_277 -> VAR_278 * VAR_279 -> VAR_280 + VAR_281 -> VAR_282 * VAR_283 -> VAR_284 + VAR_285 -> VAR_286 * VAR_287 -> VAR_288 + VAR_289 -> VAR_290 * VAR_291 -> VAR_292 ; if ( ! VAR_293 -> VAR_294 [ VAR_295 ] ) { VAR_296 -> VAR_297 [ VAR_298 ] = 1 ; return VAR_299 ; } VAR_300 : ; } } } } } return VAR_301 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ,  struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 VAR_3 )  { TYPE_3 VAR_4 = VAR_5 -> VAR_6 . VAR_7 ; TYPE_4 VAR_8 , VAR_9 , VAR_10 ; TYPE_5 VAR_11 = 0 ; if ( VAR_12 -> VAR_13 . VAR_14 & VAR_15 ) { METHOD_1 ( VAR_16 -> VAR_17 . VAR_18 , 0 ) ; return ; } VAR_19 = METHOD_2 ( & VAR_20 -> VAR_21 . VAR_22 ) ; VAR_23 = METHOD_3 ( VAR_24 , VAR_25 ) ; METHOD_4 ( VAR_26 , & VAR_27 -> VAR_28 ) ; VAR_29 = 0 ; VAR_30 = METHOD_5 ( & VAR_31 -> VAR_32 . VAR_33 ) - VAR_34 ; if ( VAR_35 ) { if ( VAR_36 <= 0 ) { VAR_37 += VAR_38 ; if ( VAR_39 <= 0 ) VAR_40 = VAR_41 ; VAR_42 = 1 ; VAR_43 -> VAR_44 . VAR_45 = VAR_46 -> VAR_47 . VAR_48 ; } if ( VAR_49 < 0x80000000LL ) VAR_50 = 0x80000000LL - VAR_51 ; } METHOD_6 ( VAR_52 -> VAR_53 . VAR_54 , VAR_55 ) ; METHOD_7 ( & VAR_56 -> VAR_57 . VAR_58 , VAR_59 ) ; METHOD_8 ( & VAR_60 -> VAR_61 . VAR_62 , VAR_63 ) ; METHOD_9 ( VAR_64 ) ; if ( VAR_65 ) { struct STRUCT_OR_UNION_2 VAR_66 ; METHOD_10 ( & VAR_67 , ~ 0ULL ) ; VAR_68 . VAR_69 = VAR_70 -> VAR_71 . VAR_72 ; if ( VAR_73 -> VAR_74 . VAR_75 & VAR_76 ) METHOD_11 ( VAR_77 , & VAR_78 . VAR_79 ) ;  if ( METHOD_12 ( VAR_80 , VAR_81 , & VAR_82 , VAR_83 ) )  METHOD_13 ( VAR_84 , 0 ) ; } }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_0 ,  struct STRUCT_OR_UNION_4 * * VAR_1 )  { TYPE_0 VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 ) ;  struct STRUCT_OR_UNION_5 * VAR_5 ;  struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_2 ( STRUCT_OR_UNION_7 ) ; if ( ! VAR_7 -> VAR_8 ) return VAR_9 ; METHOD_3 ( STRUCT_OR_UNION_8 , "lookingforcachedblocks[%x]" , ( TYPE_1 ) VAR_10 ) ;  VAR_11 :   VAR_12 = METHOD_4 ( VAR_13 , STRUCT_OR_UNION_9 -> VAR_14 -> VAR_15 ,  VAR_16 ) ; while ( VAR_17 ) { struct STRUCT_OR_UNION_10 * VAR_18 ;  if ( METHOD_5 ( VAR_19 ) ) {  if ( METHOD_6 ( VAR_20 ) == - VAR_21 ) goto VAR_22 ; break ; } VAR_23 = METHOD_7 ( STRUCT_OR_UNION_11 -> VAR_24 , VAR_25 -> VAR_26 ) ; if ( ! VAR_27 ) { METHOD_8 ( STRUCT_OR_UNION_12 , "block%lureaderror" , ( unsigned TYPE_2 ) VAR_28 -> VAR_29 ) ; } else if ( METHOD_9 ( METHOD_10 ( VAR_30 ) -> VAR_31 ) >= VAR_32 ) { METHOD_11 ( STRUCT_OR_UNION_13 , "block%lurefcount%d>=%d" , ( unsigned TYPE_3 ) VAR_33 -> VAR_34 , METHOD_12 ( METHOD_13 ( VAR_35 ) -> VAR_36 ) , VAR_37 ) ; } else if ( METHOD_14 ( VAR_38 , METHOD_15 ( VAR_39 ) ) == 0 ) { * VAR_40 = VAR_41 ; return VAR_42 ; } METHOD_16 ( VAR_43 ) ;  VAR_44 = METHOD_17 ( VAR_45 , STRUCT_OR_UNION_14 -> VAR_46 -> VAR_47 , VAR_48 ) ;  } return VAR_49 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) {  TYPE_5 VAR_4 ;  TYPE_6 VAR_5 ; TYPE_7 VAR_6 [ VAR_7 ] ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; if ( VAR_13 < 0 ) return VAR_14 ; * VAR_15 = VAR_16 ;  VAR_17 = METHOD_2 ( & VAR_18 -> VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ;  if ( VAR_23 == - 1 ) return VAR_24 ;  return METHOD_3 ( VAR_25 -> VAR_26 , & VAR_27 -> VAR_28 , VAR_29 ,   VAR_30 -> VAR_31 , VAR_32 , VAR_33 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; const TYPE_4 * VAR_5 , * VAR_6 = VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 = VAR_11 -> VAR_12 > 0 ; if ( VAR_13 ) { METHOD_1 ( VAR_14 , VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ; VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = VAR_23 -> VAR_24 ; } else { VAR_25 = VAR_26 -> VAR_27 ; VAR_28 = VAR_29 -> VAR_30 ; } while ( VAR_31 > 0 ) { VAR_32 = METHOD_2 ( & VAR_33 , VAR_34 , & VAR_35 , VAR_36 ) ; if ( VAR_37 == VAR_38 ) { if ( ! VAR_39 ) METHOD_3 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = 0 ; goto VAR_44 ; } else if ( VAR_45 < 0 ) goto VAR_46 ; VAR_47 -= ( VAR_48 - VAR_49 ) ; VAR_50 = VAR_51 ;  if ( VAR_52 == VAR_53 )  continue ; VAR_54 = METHOD_4 ( VAR_55 , VAR_56 ) ; METHOD_5 ( VAR_57 ) ; if ( VAR_58 < 0 && VAR_59 != VAR_60 ) goto VAR_61 ; } VAR_62 = 0 ; VAR_63 : if ( VAR_64 ) METHOD_6 ( VAR_65 , VAR_66 ) ; return VAR_67 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 ; TYPE_6 VAR_7 = 0 ; unsigned TYPE_7 * VAR_8 ; VAR_9 * VAR_10 ; if ( VAR_11 <= 0 ) return VAR_12 ; VAR_13 = & ( VAR_14 -> VAR_15 -> VAR_16 ) ; if ( VAR_17 -> VAR_18 == VAR_19 ) if ( ! METHOD_1 ( VAR_20 ) ) return - 1 ; VAR_21 = VAR_22 -> VAR_23 ; if d ( VAR_24 ) && VAR_25 != 0 VAR_26 = ( TYPE_8 ) VAR_27 -> VAR_28 + VAR_29 ; VAR_30 = ( - VAR_31 ) & ( VAR_32 - 1 ) ; if ( ! VAR_33 ) { if ( VAR_34 == 0 ) VAR_35 -> VAR_36 = VAR_37 ; else if ( VAR_38 != 0 && VAR_39 >= VAR_40 ) { VAR_41 = VAR_42 -> VAR_43 + VAR_44 -> VAR_45 ; if ( VAR_46 [ 0 ] == VAR_47 && ( VAR_48 [ 3 ] << 8 | VAR_49 [ 4 ] ) >= 128 ) { METHOD_2 ( VAR_50 -> VAR_51 + VAR_52 , VAR_53 , VAR_54 ) ; VAR_55 -> VAR_56 = VAR_57 ; } } VAR_58 -> VAR_59 = VAR_60 -> VAR_61 + VAR_62 -> VAR_63 ; VAR_64 -> VAR_65 = 0 ; } if ( METHOD_3 ( VAR_66 ) ) {  if ( VAR_67 > 0 && VAR_68 > VAR_69 )  VAR_70 = VAR_71 ; } if ( VAR_72 >= VAR_73 ) { VAR_74 -> VAR_75 += VAR_76 ; VAR_77 -> VAR_78 = VAR_79 - VAR_80 ; VAR_81 -> VAR_82 += VAR_83 ; return ( VAR_84 ) ; } VAR_85 = VAR_86 -> VAR_87 ; VAR_88 = VAR_89 -> VAR_90 + VAR_91 ; if ( VAR_92 -> VAR_93 != VAR_94 ) { METHOD_4 ( VAR_95 , VAR_96 -> VAR_97 , VAR_98 + VAR_99 ) ; VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> VAR_104 = VAR_105 + VAR_106 ; } if ( VAR_107 > ( TYPE_9 ) ( VAR_108 -> VAR_109 - VAR_110 -> VAR_111 ) ) { METHOD_5 ( VAR_112 , VAR_113 ) ; return - 1 ; } if ( ! VAR_114 -> VAR_115 ) VAR_116 = VAR_117 ; else { if ( VAR_118 < VAR_119 ) VAR_120 = VAR_121 ; if ( VAR_122 > ( TYPE_10 ) ( VAR_123 -> VAR_124 - VAR_125 -> VAR_126 ) ) VAR_127 = VAR_128 -> VAR_129 - VAR_130 -> VAR_131 ; } while ( VAR_132 < VAR_133 ) { METHOD_6 ( ) ; if ( VAR_134 -> VAR_135 != VAR_136 ) { VAR_137 -> VAR_138 = VAR_139 ; VAR_140 = METHOD_7 ( VAR_141 -> VAR_142 , VAR_143 + VAR_144 + VAR_145 , VAR_146 - VAR_147 ) ; } else { METHOD_8 ( VAR_148 , VAR_149 ) ; VAR_150 = - 1 ; } if ( VAR_151 <= 0 ) { VAR_152 -> VAR_153 = VAR_154 ; if ( VAR_155 -> VAR_156 & VAR_157 && ! METHOD_9 ( VAR_158 ) ) if ( VAR_159 + VAR_160 == 0 ) METHOD_10 ( VAR_161 ) ; return ( VAR_162 ) ; } VAR_163 += VAR_164 ; if ( METHOD_11 ( VAR_165 ) ) { if ( VAR_166 > VAR_167 ) VAR_168 = VAR_169 ; } } VAR_170 -> VAR_171 += VAR_172 ; VAR_173 -> VAR_174 = VAR_175 - VAR_176 ; VAR_177 -> VAR_178 += VAR_179 ; VAR_180 -> VAR_181 = VAR_182 ; return ( VAR_183 ) ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { typedef struct { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; unsigned TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 ; unsigned TYPE_7 VAR_6 ; unsigned TYPE_8 VAR_7 ; unsigned TYPE_9 VAR_8 ; unsigned TYPE_10 VAR_9 ; } TYPE_11 ; typedef struct { unsigned TYPE_12 VAR_10 ; TYPE_13 VAR_11 ; } TYPE_14 ; typedef struct { unsigned TYPE_15 VAR_12 ; unsigned TYPE_16 VAR_13 ; TYPE_17 VAR_14 ; TYPE_18 VAR_15 ; } TYPE_19 ; typedef struct { unsigned VAR_16 ; unsigned VAR_17 ; unsigned TYPE_20 VAR_18 ; } TYPE_21 ; typedef struct { unsigned TYPE_22 VAR_19 ; unsigned TYPE_23 VAR_20 ; unsigned TYPE_24 VAR_21 ; unsigned TYPE_25 VAR_22 ; unsigned TYPE_26 VAR_23 ; } TYPE_27 ; typedef struct { unsigned TYPE_28 VAR_24 ; unsigned TYPE_29 VAR_25 ; unsigned TYPE_30 VAR_26 ; unsigned TYPE_31 VAR_27 ; } TYPE_32 ; typedef struct { unsigned TYPE_33 VAR_28 ; unsigned TYPE_34 VAR_29 ; unsigned TYPE_35 VAR_30 ; unsigned TYPE_36 VAR_31 ; unsigned TYPE_37 VAR_32 ; unsigned TYPE_38 VAR_33 ; unsigned TYPE_39 VAR_34 ; unsigned TYPE_40 VAR_35 ; unsigned TYPE_41 VAR_36 ; unsigned TYPE_42 VAR_37 ; } TYPE_43 ; typedef struct { unsigned TYPE_44 VAR_38 ; unsigned TYPE_45 VAR_39 ; } TYPE_46 ; TYPE_47 * VAR_40 ; unsigned TYPE_48 VAR_41 ; TYPE_49 VAR_42 ; TYPE_50 VAR_43 ; TYPE_51 VAR_44 ; TYPE_52 VAR_45 ; TYPE_53 VAR_46 ; TYPE_54 VAR_47 ; TYPE_55 VAR_48 ; TYPE_56 VAR_49 ; TYPE_57 VAR_50 , VAR_51 , VAR_52 ; TYPE_58 VAR_53 ; TYPE_59 VAR_54 ; unsigned TYPE_60 * VAR_55 ; TYPE_61 VAR_56 ; METHOD_1 ( VAR_57 != ( const TYPE_62 * ) VAR_58 ) ; METHOD_2 ( VAR_59 -> VAR_60 == VAR_61 ) ; METHOD_3 ( VAR_62 != ( TYPE_63 * ) VAR_63 ) ; METHOD_4 ( VAR_64 -> VAR_65 == VAR_66 ) ; VAR_67 = 1 ; VAR_68 = METHOD_5 ( VAR_69 , VAR_70 ) ; VAR_71 -> VAR_72 = 8 ; VAR_73 = METHOD_6 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 ) ; if ( VAR_78 == VAR_79 ) { VAR_80 = METHOD_7 ( VAR_81 ) ; return ( ( TYPE_64 * ) VAR_82 ) ; } VAR_83 . VAR_84 = METHOD_8 ( VAR_85 ) ; VAR_86 . VAR_87 = ( TYPE_65 ) METHOD_9 ( VAR_88 ) ; VAR_89 . VAR_90 = METHOD_10 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_11 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_12 ( VAR_97 ) ; VAR_98 . VAR_99 = METHOD_13 ( VAR_100 ) ; VAR_101 . VAR_102 = METHOD_14 ( VAR_103 ) ; VAR_104 . VAR_105 = METHOD_15 ( VAR_106 ) ; if ( VAR_107 . VAR_108 != 0x435057FF || ( VAR_109 . VAR_110 >> 8 ) != 0x16 ) METHOD_16 ( VAR_111 , "ImproperImageHeader" ) ; if ( VAR_112 . VAR_113 != 0 ) METHOD_17 ( VAR_114 , "EncryptedWPGImageFileNotSupported" ) ; VAR_115 -> VAR_116 = 1 ; VAR_117 -> VAR_118 = 1 ; VAR_119 -> VAR_120 = 0 ; VAR_121 = 0 ; VAR_122 . VAR_123 = 0 ; switch ( VAR_124 . VAR_125 ) { case 1 : while ( ! METHOD_18 ( VAR_126 ) ) { ( TYPE_66 ) METHOD_19 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 ) ; if ( METHOD_20 ( VAR_131 ) ) break ; VAR_132 . VAR_133 = ( VAR_134 = METHOD_21 ( VAR_135 ) ) ; if ( VAR_136 == VAR_137 ) break ; METHOD_22 ( VAR_138 , & VAR_139 . VAR_140 ) ; if ( METHOD_23 ( VAR_141 ) ) break ; VAR_142 . VAR_143 = METHOD_24 ( VAR_144 ) + VAR_145 . VAR_146 ; switch ( VAR_147 . VAR_148 ) { case 0x0B : VAR_149 . VAR_150 = METHOD_25 ( VAR_151 ) ; VAR_152 . VAR_153 = METHOD_26 ( VAR_154 ) ; if ( ( VAR_155 . VAR_156 == 0 ) || ( VAR_157 . VAR_158 == 0 ) ) METHOD_27 ( VAR_159 , "ImproperImageHeader" ) ; VAR_160 . VAR_161 = METHOD_28 ( VAR_162 ) ; VAR_163 . VAR_164 = METHOD_29 ( VAR_165 ) ; VAR_166 . VAR_167 = METHOD_30 ( VAR_168 ) ; if ( VAR_169 . VAR_170 && VAR_171 . VAR_172 ) { VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 . VAR_178 = VAR_179 . VAR_180 / 470.0 ; VAR_181 -> VAR_182 . VAR_183 = VAR_184 . VAR_185 / 470.0 ; } VAR_186 -> VAR_187 = VAR_188 . VAR_189 ; VAR_190 -> VAR_191 = VAR_192 . VAR_193 ; VAR_194 = VAR_195 . VAR_196 ; goto VAR_197 ; case 0x0E : VAR_198 . VAR_199 = METHOD_31 ( VAR_200 ) ; VAR_201 . VAR_202 = METHOD_32 ( VAR_203 ) ; VAR_204 -> VAR_205 = VAR_206 . VAR_207 ; if ( ! METHOD_33 ( VAR_208 , VAR_209 -> VAR_210 , VAR_211 ) ) goto VAR_212 ; for ( VAR_213 = VAR_214 . VAR_215 ; VAR_216 < ( TYPE_67 ) VAR_217 . VAR_218 ; VAR_219 ++ ) { VAR_220 -> VAR_221 [ VAR_222 ] . VAR_223 = METHOD_34 ( ( unsigned TYPE_68 ) METHOD_35 ( VAR_224 ) ) ; VAR_225 -> VAR_226 [ VAR_227 ] . VAR_228 = METHOD_36 ( ( unsigned TYPE_69 ) METHOD_37 ( VAR_229 ) ) ; VAR_230 -> VAR_231 [ VAR_232 ] . VAR_233 = METHOD_38 ( ( unsigned TYPE_70 ) METHOD_39 ( VAR_234 ) ) ; } break ; case 0x11 : if ( VAR_235 . VAR_236 > 8 ) VAR_237 = METHOD_40 ( VAR_238 , VAR_239 , METHOD_41 ( VAR_240 ) + 8 , ( TYPE_71 ) VAR_241 . VAR_242 - 8 , VAR_243 ) ; break ; case 0x14 : VAR_244 . VAR_245 = METHOD_42 ( VAR_246 ) ; VAR_247 . VAR_248 = METHOD_43 ( VAR_249 ) ; VAR_250 . VAR_251 = METHOD_44 ( VAR_252 ) ; VAR_253 . VAR_254 = METHOD_45 ( VAR_255 ) ; VAR_256 . VAR_257 = METHOD_46 ( VAR_258 ) ; VAR_259 . VAR_260 = METHOD_47 ( VAR_261 ) ; VAR_262 . VAR_263 = METHOD_48 ( VAR_264 ) ; if ( ( VAR_265 . VAR_266 == 0 ) || ( VAR_267 . VAR_268 == 0 ) ) METHOD_49 ( VAR_269 , "ImproperImageHeader" ) ; VAR_270 . VAR_271 = METHOD_50 ( VAR_272 ) ; VAR_273 . VAR_274 = METHOD_51 ( VAR_275 ) ; VAR_276 . VAR_277 = METHOD_52 ( VAR_278 ) ; VAR_279 -> VAR_280 = VAR_281 ; VAR_282 -> VAR_283 . VAR_284 = ( unsigned TYPE_72 ) ( ( VAR_285 . VAR_286 - VAR_287 . VAR_288 ) / 470.0 ) ; VAR_289 -> VAR_290 . VAR_291 = ( unsigned TYPE_73 ) ( ( VAR_292 . VAR_293 - VAR_294 . VAR_295 ) / 470.0 ) ; VAR_296 -> VAR_297 . VAR_298 = ( TYPE_74 ) ( VAR_299 . VAR_300 / 470.0 ) ; VAR_301 -> VAR_302 . VAR_303 = ( TYPE_75 ) ( VAR_304 . VAR_305 / 470.0 ) ; if ( VAR_306 . VAR_307 && VAR_308 . VAR_309 ) { VAR_310 -> VAR_311 . VAR_312 = VAR_313 . VAR_314 / 470.0 ; VAR_315 -> VAR_316 . VAR_317 = VAR_318 . VAR_319 / 470.0 ; } VAR_320 -> VAR_321 = VAR_322 . VAR_323 ; VAR_324 -> VAR_325 = VAR_326 . VAR_327 ; VAR_328 = VAR_329 . VAR_330 ;  VAR_331 :  if ( ( VAR_332 -> VAR_333 == 0 ) && ( VAR_334 != 24 ) ) { VAR_335 -> VAR_336 = VAR_337 << VAR_338 ; if ( ! METHOD_53 ( VAR_339 , VAR_340 -> VAR_341 , VAR_342 ) ) { VAR_343 : METHOD_54 ( VAR_344 , "MemoryAllocationFailed" ) ; } for ( VAR_345 = 0 ; ( VAR_346 < ( TYPE_76 ) VAR_347 -> VAR_348 ) && ( VAR_349 < 256 ) ; VAR_350 ++ ) { VAR_351 -> VAR_352 [ VAR_353 ] . VAR_354 = METHOD_55 ( VAR_355 [ VAR_356 ] . VAR_357 ) ; VAR_358 -> VAR_359 [ VAR_360 ] . VAR_361 = METHOD_56 ( VAR_362 [ VAR_363 ] . VAR_364 ) ; VAR_365 -> VAR_366 [ VAR_367 ] . VAR_368 = METHOD_57 ( VAR_369 [ VAR_370 ] . VAR_371 ) ; } } else { if ( VAR_372 < 24 ) if ( ( VAR_373 -> VAR_374 < ( VAR_375 << VAR_376 ) ) && ( VAR_377 != 24 ) ) VAR_378 -> VAR_379 = ( TYPE_77 * ) METHOD_58 ( VAR_380 -> VAR_381 , ( TYPE_78 ) ( VAR_382 << VAR_383 ) , sizeof ( * VAR_384 -> VAR_385 ) ) ; } if ( VAR_386 == 1 ) { if ( VAR_387 -> VAR_388 [ 0 ] . VAR_389 == 0 && VAR_390 -> VAR_391 [ 0 ] . VAR_392 == 0 && VAR_393 -> VAR_394 [ 0 ] . VAR_395 == 0 && VAR_396 -> VAR_397 [ 1 ] . VAR_398 == 0 && VAR_399 -> VAR_400 [ 1 ] . VAR_401 == 0 && VAR_402 -> VAR_403 [ 1 ] . VAR_404 == 0 ) { VAR_405 -> VAR_406 [ 1 ] . VAR_407 = VAR_408 -> VAR_409 [ 1 ] . VAR_410 = VAR_411 -> VAR_412 [ 1 ] . VAR_413 = VAR_414 ; } } if ( METHOD_59 ( VAR_415 , VAR_416 , VAR_417 ) < 0 ) { VAR_418 : METHOD_60 ( VAR_419 , "UnableToDecompressImage" ) ; } if ( VAR_420 . VAR_421 == 0x14 && VAR_422 . VAR_423 != 0 && ! VAR_424 -> VAR_425 ) { if ( VAR_426 . VAR_427 & 0x8000 ) { TYPE_79 * VAR_428 ; VAR_429 = METHOD_61 ( VAR_430 , VAR_431 ) ; if ( VAR_432 != ( TYPE_80 * ) VAR_433 ) { METHOD_62 ( VAR_434 , VAR_435 ) ; ( TYPE_81 ) METHOD_63 ( & VAR_436 ) ; METHOD_64 ( & VAR_437 , VAR_438 ) ; } } if ( VAR_439 . VAR_440 & 0x2000 ) { TYPE_82 * VAR_441 ; VAR_442 = METHOD_65 ( VAR_443 , VAR_444 ) ; if ( VAR_445 != ( TYPE_83 * ) VAR_446 ) { METHOD_66 ( VAR_447 , VAR_448 ) ; ( TYPE_84 ) METHOD_67 ( & VAR_449 ) ; METHOD_68 ( & VAR_450 , VAR_451 ) ; } } if ( VAR_452 . VAR_453 & 0x0FFF ) { TYPE_85 * VAR_454 ; VAR_455 = METHOD_69 ( VAR_456 , ( VAR_457 . VAR_458 & 0x0FFF ) , VAR_459 ) ; if ( VAR_460 != ( TYPE_86 * ) VAR_461 ) { METHOD_70 ( VAR_462 , VAR_463 ) ; ( TYPE_87 ) METHOD_71 ( & VAR_464 ) ; METHOD_72 ( & VAR_465 , VAR_466 ) ; } } } METHOD_73 ( VAR_467 , VAR_468 , VAR_469 ) ; VAR_470 -> VAR_471 = 8 ; if ( VAR_472 -> VAR_473 == ( TYPE_88 * ) VAR_474 ) goto VAR_475 ; VAR_476 = METHOD_74 ( VAR_477 ) ; VAR_478 -> VAR_479 = VAR_480 -> VAR_481 = 1 ; VAR_482 -> VAR_483 = 0 ; break ; case 0x1B : if ( VAR_484 . VAR_485 > 0x3C ) VAR_486 = METHOD_75 ( VAR_487 , VAR_488 , METHOD_76 ( VAR_489 ) + 0x3C , ( TYPE_89 ) VAR_490 . VAR_491 - 0x3C , VAR_492 ) ; break ; } } break ; case 2 : ( TYPE_90 ) METHOD_77 ( VAR_493 , 0 , sizeof ( VAR_494 ) ) ; VAR_495 . VAR_496 = 0 ; while ( ! METHOD_78 ( VAR_497 ) ) { ( TYPE_91 ) METHOD_79 ( VAR_498 , VAR_499 . VAR_500 , VAR_501 ) ; if ( METHOD_80 ( VAR_502 ) ) break ; VAR_503 . VAR_504 = ( VAR_505 = METHOD_81 ( VAR_506 ) ) ; if ( VAR_507 == VAR_508 ) break ; VAR_509 . VAR_510 = ( VAR_511 = METHOD_82 ( VAR_512 ) ) ; if ( VAR_513 == VAR_514 ) break ; METHOD_83 ( VAR_515 , & VAR_516 . VAR_517 ) ; METHOD_84 ( VAR_518 , & VAR_519 . VAR_520 ) ; if ( METHOD_85 ( VAR_521 ) ) break ; VAR_522 . VAR_523 = METHOD_86 ( VAR_524 ) + VAR_525 . VAR_526 ; switch ( VAR_527 . VAR_528 ) { case 1 : VAR_529 . VAR_530 = METHOD_87 ( VAR_531 ) ; VAR_532 . VAR_533 = METHOD_88 ( VAR_534 ) ; VAR_535 . VAR_536 = METHOD_89 ( VAR_537 ) ; break ; case 0x0C : VAR_538 . VAR_539 = METHOD_90 ( VAR_540 ) ; VAR_541 . VAR_542 = METHOD_91 ( VAR_543 ) ; VAR_544 -> VAR_545 = VAR_546 . VAR_547 ; if ( METHOD_92 ( VAR_548 , VAR_549 -> VAR_550 , VAR_551 ) == VAR_552 ) METHOD_93 ( VAR_553 , "MemoryAllocationFailed" ) ; for ( VAR_554 = VAR_555 . VAR_556 ; VAR_557 < ( TYPE_92 ) VAR_558 . VAR_559 ; VAR_560 ++ ) { VAR_561 -> VAR_562 [ VAR_563 ] . VAR_564 = METHOD_94 ( ( TYPE_93 ) METHOD_95 ( VAR_565 ) ) ; VAR_566 -> VAR_567 [ VAR_568 ] . VAR_569 = METHOD_96 ( ( TYPE_94 ) METHOD_97 ( VAR_570 ) ) ; VAR_571 -> VAR_572 [ VAR_573 ] . VAR_574 = METHOD_98 ( ( TYPE_95 ) METHOD_99 ( VAR_575 ) ) ; ( TYPE_96 ) METHOD_100 ( VAR_576 ) ; } break ; case 0x0E : VAR_577 . VAR_578 = METHOD_101 ( VAR_579 ) ; VAR_580 . VAR_581 = METHOD_102 ( VAR_582 ) ; if ( ( VAR_583 . VAR_584 == 0 ) || ( VAR_585 . VAR_586 == 0 ) ) METHOD_103 ( VAR_587 , "ImproperImageHeader" ) ; VAR_588 . VAR_589 = METHOD_104 ( VAR_590 ) ; VAR_591 . VAR_592 = METHOD_105 ( VAR_593 ) ; if ( VAR_594 . VAR_595 > 1 ) continue ; switch ( VAR_596 . VAR_597 ) { case 1 : VAR_598 = 1 ; break ; case 2 : VAR_599 = 2 ; break ; case 3 : VAR_600 = 4 ; break ; case 4 : VAR_601 = 8 ; break ; case 8 : VAR_602 = 24 ; break ; default : continue ; } VAR_603 -> VAR_604 = VAR_605 . VAR_606 ;  VAR_607 -> VAR_608 = VAR_609 . VAR_610 ;  if ( ( VAR_611 -> VAR_612 == 0 ) && ( VAR_613 != 24 ) ) { TYPE_97 VAR_614 ; VAR_615 = 1 ; VAR_616 -> VAR_617 = VAR_618 << VAR_619 ; if ( ! METHOD_106 ( VAR_620 , VAR_621 -> VAR_622 , VAR_623 ) ) goto VAR_624 ; } else { if ( VAR_625 < 24 ) if ( VAR_626 -> VAR_627 < ( VAR_628 << VAR_629 ) && VAR_630 != 24 ) VAR_631 -> VAR_632 = ( TYPE_98 * ) METHOD_107 ( VAR_633 -> VAR_634 , ( TYPE_99 ) ( VAR_635 << VAR_636 ) , sizeof ( * VAR_637 -> VAR_638 ) ) ; } switch ( VAR_639 . VAR_640 ) { case 0 : { VAR_641 = ( TYPE_100 ) ( ( VAR_642 * VAR_643 -> VAR_644 + 7 ) / 8 ) ; VAR_645 = ( unsigned TYPE_101 * ) METHOD_108 ( ( TYPE_102 ) VAR_646 + 1 , sizeof ( * VAR_647 ) ) ; if ( VAR_648 == ( unsigned TYPE_103 * ) VAR_649 ) goto VAR_650 ; for ( VAR_651 = 0 ; VAR_652 < ( TYPE_104 ) VAR_653 -> VAR_654 ; VAR_655 ++ ) { ( TYPE_105 ) METHOD_109 ( VAR_656 , VAR_657 , VAR_658 ) ; METHOD_110 ( VAR_659 , VAR_660 , VAR_661 , VAR_662 , VAR_663 ) ; } if ( VAR_664 ) VAR_665 = ( unsigned TYPE_106 * ) METHOD_111 ( VAR_666 ) ; break ; } case 1 : { if ( METHOD_112 ( VAR_667 , VAR_668 , VAR_669 ) < 0 ) goto VAR_670 ; break ; } } if ( VAR_671 [ 0 ] [ 0 ] < 0 && ! VAR_672 -> VAR_673 ) { TYPE_107 * VAR_674 ; VAR_675 = METHOD_113 ( VAR_676 , VAR_677 ) ; if ( VAR_678 != ( TYPE_108 * ) VAR_679 ) { METHOD_114 ( VAR_680 , VAR_681 ) ; ( TYPE_109 ) METHOD_115 ( & VAR_682 ) ; METHOD_116 ( & VAR_683 , VAR_684 ) ; } } if ( VAR_685 [ 1 ] [ 1 ] < 0 && ! VAR_686 -> VAR_687 ) { TYPE_110 * VAR_688 ; VAR_689 = METHOD_117 ( VAR_690 , VAR_691 ) ; if ( VAR_692 != ( TYPE_111 * ) VAR_693 ) { METHOD_118 ( VAR_694 , VAR_695 ) ; ( TYPE_112 ) METHOD_119 ( & VAR_696 ) ; METHOD_120 ( & VAR_697 , VAR_698 ) ; } } METHOD_121 ( VAR_699 , VAR_700 , VAR_701 ) ; VAR_702 -> VAR_703 = 8 ; if ( VAR_704 -> VAR_705 == ( TYPE_113 * ) VAR_706 ) goto VAR_707 ; VAR_708 = METHOD_122 ( VAR_709 ) ; VAR_710 -> VAR_711 = VAR_712 -> VAR_713 = 1 ; VAR_714 -> VAR_715 = 0 ; break ; case 0x12 : VAR_716 = METHOD_123 ( VAR_717 ) ; if ( VAR_718 . VAR_719 > ( unsigned TYPE_114 ) VAR_720 ) VAR_721 = METHOD_124 ( VAR_722 , VAR_723 , METHOD_125 ( VAR_724 ) + VAR_725 , ( TYPE_115 ) ( VAR_726 . VAR_727 - VAR_728 - 2 ) , VAR_729 ) ; break ; case 0x1B : VAR_730 = METHOD_126 ( VAR_731 , VAR_732 . VAR_733 , VAR_734 , & VAR_735 ) ; ( TYPE_116 ) VAR_736 ; break ; } } break ; default : { METHOD_127 ( VAR_737 , "DataEncodingSchemeIsNotSupported" ) ; } }  VAR_738 = METHOD_128 ( VAR_739 , VAR_740 -> VAR_741 , VAR_742 -> VAR_743 , VAR_744 ) ;  if ( VAR_745 == VAR_746 ) return ( METHOD_129 ( VAR_747 ) ) ; VAR_748 : ( TYPE_117 ) METHOD_130 ( VAR_749 ) ; { TYPE_118 * VAR_750 ; TYPE_119 VAR_751 = 0 ; VAR_752 = VAR_753 ; VAR_754 = VAR_755 ; while ( VAR_756 != ( TYPE_120 * ) VAR_757 ) { TYPE_121 * VAR_758 = VAR_759 ; if ( ( VAR_760 -> VAR_761 == 0 ) || ( VAR_762 -> VAR_763 == 0 ) ) { VAR_764 = VAR_765 -> VAR_766 ; METHOD_131 ( & VAR_767 ) ; } else { VAR_768 = VAR_769 ; VAR_770 = VAR_771 -> VAR_772 ; } } for ( VAR_773 = VAR_774 ; VAR_775 != ( TYPE_122 * ) VAR_776 ; VAR_777 = VAR_778 -> VAR_779 ) VAR_780 -> VAR_781 = ( TYPE_123 ) VAR_782 ++ ; } if ( VAR_783 == ( TYPE_124 * ) VAR_784 ) METHOD_132 ( VAR_785 , "ImageFileDoesNotContainAnyImageData" ) ; return ( VAR_786 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; TYPE_3 VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_2 VAR_8 ; TYPE_4 VAR_9 ; TYPE_5 VAR_10 = 0 ; TYPE_6 * VAR_11 ; if ( METHOD_1 ( & VAR_12 , ( TYPE_7 * ) VAR_13 , sizeof ( VAR_14 ) ) ) return - VAR_15 ; if ( VAR_16 . VAR_17 != VAR_18 ) return - VAR_19 ; if ( VAR_20 . VAR_21 < sizeof ( VAR_22 ) || ( VAR_23 . VAR_24 && VAR_25 . VAR_26 < sizeof ( VAR_27 ) ) ) return - VAR_28 ; VAR_29 = METHOD_2 ( VAR_30 . VAR_31 , VAR_32 . VAR_33 ) ; if ( METHOD_3 ( VAR_34 ) && METHOD_4 ( VAR_35 ) != VAR_36 ) return - VAR_37 ; if ( VAR_38 > VAR_39 ) return - VAR_40 ; VAR_41 = ( VAR_42 & ~ VAR_43 ) == METHOD_5 ( 0 ) || VAR_44 == VAR_45 ; if ( VAR_46 ) VAR_47 = METHOD_6 ( VAR_48 , VAR_49 ) ; else VAR_50 = METHOD_7 ( VAR_51 , VAR_52 ) ; if ( ! VAR_53 ) return - VAR_54 ;  if ( METHOD_8 ( VAR_55 , ( TYPE_8 * ) VAR_56 , VAR_57 . VAR_58 ) ) {  VAR_59 = - VAR_60 ; goto VAR_61 ; } if ( VAR_62 . VAR_63 < VAR_64 ) METHOD_9 ( VAR_65 + VAR_66 . VAR_67 , 0 , VAR_68 - VAR_69 . VAR_70 ) ; VAR_71 = METHOD_10 ( VAR_72 , VAR_73 , VAR_74 ) ; if ( VAR_75 ) goto VAR_76 ; VAR_77 = ( ( struct STRUCT_OR_UNION_3 * ) VAR_78 ) -> VAR_79 ; if ( VAR_80 > VAR_81 ) { METHOD_11 ( "%s:toomuchoutputdata%zu>%zu\\n" , VAR_82 , VAR_83 , VAR_84 ) ; VAR_85 = VAR_86 ; } if ( METHOD_12 ( ( TYPE_9 * ) VAR_87 , VAR_88 , VAR_89 ) != 0 ) VAR_90 = - VAR_91 ; VAR_92 : if ( VAR_93 ) METHOD_13 ( VAR_94 , VAR_95 ) ; else METHOD_14 ( VAR_96 ) ; return VAR_97 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = METHOD_1 ( VAR_5 , 1 ) ; TYPE_6 VAR_6 [ VAR_7 * VAR_8 ] ; TYPE_7 * VAR_9 = VAR_10 ; TYPE_8 * VAR_11 ; TYPE_9 * VAR_12 ; register TYPE_10 * VAR_13 ; register TYPE_11 * VAR_14 ; register TYPE_12 VAR_15 ; register TYPE_13 VAR_16 ; TYPE_14 VAR_17 ;  TYPE_15 VAR_18 ;  if ( VAR_19 > VAR_20 ) {  if ( ! ( VAR_21 = METHOD_2 ( VAR_22 , sizeof ( TYPE_16 ) ) ) ) {  METHOD_3 ( ) ; } } if ( VAR_23 >= 2 ) {  VAR_24 = ( VAR_25 + 1 - VAR_26 ) >> 1 ;   VAR_27 = VAR_28 - VAR_29 ;  VAR_30 = VAR_31 ; VAR_32 = VAR_33 ; VAR_34 = & VAR_35 [ ( 1 - VAR_36 ) * VAR_37 ] ; while ( VAR_38 -- > 0 ) { VAR_39 = VAR_40 ; VAR_41 = VAR_42 ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 ; ++ VAR_46 ) { * VAR_47 = * VAR_48 ; ++ VAR_49 ; ++ VAR_50 ; } VAR_51 += VAR_52 ; VAR_53 += VAR_54 << 1 ; } VAR_55 = & VAR_56 [ ( 1 - VAR_57 ) * VAR_58 ] ; VAR_59 = & VAR_60 [ ( 2 - VAR_61 ) * VAR_62 ] ; VAR_63 = VAR_64 - VAR_65 - ( ! VAR_66 ) ; while ( VAR_67 -- > 0 ) { VAR_68 = VAR_69 ; VAR_70 = VAR_71 ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 ; ++ VAR_75 ) { * VAR_76 = * VAR_77 ; ++ VAR_78 ; ++ VAR_79 ; } VAR_80 += VAR_81 ; VAR_82 += VAR_83 << 1 ; }  VAR_84 = & VAR_85 [ VAR_86 * VAR_87 ] ;  VAR_88 = VAR_89 ; VAR_90 = VAR_91 ; while ( VAR_92 -- > 0 ) { VAR_93 = VAR_94 ; VAR_95 = VAR_96 ; for ( VAR_97 = 0 ; VAR_98 < VAR_99 ; ++ VAR_100 ) { * VAR_101 = * VAR_102 ; ++ VAR_103 ; ++ VAR_104 ; } VAR_105 += VAR_106 ; VAR_107 += VAR_108 ; } } if ( VAR_109 != VAR_110 ) { METHOD_4 ( VAR_111 ) ; } }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_13 VAR_28 , VAR_29 ; TYPE_14 VAR_30 ; unsigned TYPE_15 * VAR_31 , * VAR_32 ; METHOD_1 ( VAR_33 != ( const TYPE_16 * ) VAR_34 ) ; METHOD_2 ( VAR_35 -> VAR_36 == VAR_37 ) ; if ( VAR_38 -> VAR_39 != VAR_40 ) ( TYPE_17 ) METHOD_3 ( VAR_41 , METHOD_4 ( ) , "%s" , VAR_42 -> VAR_43 ) ; METHOD_5 ( VAR_44 != ( TYPE_18 * ) VAR_45 ) ; METHOD_6 ( VAR_46 -> VAR_47 == VAR_48 ) ; VAR_49 = METHOD_7 ( VAR_50 , VAR_51 ) ; VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; if ( VAR_57 == VAR_58 ) { VAR_59 = METHOD_9 ( VAR_60 ) ; return ( ( TYPE_19 * ) VAR_61 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_62 , 0 , sizeof ( VAR_63 ) ) ; VAR_64 . VAR_65 = METHOD_11 ( VAR_66 ) ; do { if ( VAR_67 . VAR_68 != 0x59a66a95 ) METHOD_12 ( VAR_69 , "ImproperImageHeader" ) ; VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 . VAR_74 = METHOD_14 ( VAR_75 ) ; VAR_76 . VAR_77 = METHOD_15 ( VAR_78 ) ; VAR_79 . VAR_80 = METHOD_16 ( VAR_81 ) ; VAR_82 . VAR_83 = METHOD_17 ( VAR_84 ) ; VAR_85 . VAR_86 = METHOD_18 ( VAR_87 ) ; VAR_88 . VAR_89 = METHOD_19 ( VAR_90 ) ; VAR_91 = VAR_92 . VAR_93 * VAR_94 . VAR_95 ; if ( ( VAR_96 . VAR_97 != 0 ) && ( VAR_98 . VAR_99 != VAR_100 / VAR_101 . VAR_102 ) ) METHOD_20 ( VAR_103 , "ImproperImageHeader" ) ; if ( ( VAR_104 . VAR_105 != VAR_106 ) && ( VAR_107 . VAR_108 != VAR_109 ) && ( VAR_110 . VAR_111 != VAR_112 ) ) METHOD_21 ( VAR_113 , "ImproperImageHeader" ) ; if ( ( VAR_114 . VAR_115 == VAR_116 ) && ( VAR_117 . VAR_118 != 0 ) ) METHOD_22 ( VAR_119 , "ImproperImageHeader" ) ; if ( ( VAR_120 . VAR_121 == 0 ) || ( VAR_122 . VAR_123 > 32 ) ) METHOD_23 ( VAR_124 , "ImproperImageHeader" ) ; if ( ( VAR_125 . VAR_126 != VAR_127 ) && ( VAR_128 . VAR_129 != VAR_130 ) && ( VAR_131 . VAR_132 != VAR_133 ) ) METHOD_24 ( VAR_134 , "ColormapTypeNotSupported" ) ; VAR_135 -> VAR_136 = VAR_137 . VAR_138 ; VAR_139 -> VAR_140 = VAR_141 . VAR_142 ; VAR_143 -> VAR_144 = VAR_145 . VAR_146 <= 8 ? VAR_147 . VAR_148 : VAR_149 ; if ( VAR_150 . VAR_151 < 24 ) { TYPE_21 VAR_152 ; VAR_153 -> VAR_154 = VAR_155 . VAR_156 ; VAR_157 = 1 ; if ( VAR_158 . VAR_159 == VAR_160 ) VAR_161 -> VAR_162 = VAR_163 << VAR_164 . VAR_165 ; if ( VAR_166 . VAR_167 == VAR_168 ) VAR_169 -> VAR_170 = VAR_171 . VAR_172 / 3 ; if ( METHOD_25 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) == VAR_177 ) METHOD_26 ( VAR_178 , "MemoryAllocationFailed" ) ; } switch ( VAR_179 . VAR_180 ) { case VAR_181 : break ; case VAR_182 : { unsigned TYPE_22 * VAR_183 ; VAR_184 = ( unsigned TYPE_23 * ) METHOD_27 ( VAR_185 -> VAR_186 , sizeof ( * VAR_187 ) ) ; if ( VAR_188 == ( unsigned TYPE_24 * ) VAR_189 ) METHOD_28 ( VAR_190 , "MemoryAllocationFailed" ) ; VAR_191 = METHOD_29 ( VAR_192 , VAR_193 -> VAR_194 , VAR_195 ) ; if ( VAR_196 != ( TYPE_25 ) VAR_197 -> VAR_198 ) METHOD_30 ( VAR_199 , "UnexpectedEndOfFile" ) ; for ( VAR_200 = 0 ; VAR_201 < ( TYPE_26 ) VAR_202 -> VAR_203 ; VAR_204 ++ ) VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 = ( TYPE_27 ) METHOD_31 ( VAR_209 [ VAR_210 ] ) ; VAR_211 = METHOD_32 ( VAR_212 , VAR_213 -> VAR_214 , VAR_215 ) ; if ( VAR_216 != ( TYPE_28 ) VAR_217 -> VAR_218 ) METHOD_33 ( VAR_219 , "UnexpectedEndOfFile" ) ; for ( VAR_220 = 0 ; VAR_221 < ( TYPE_29 ) VAR_222 -> VAR_223 ; VAR_224 ++ ) VAR_225 -> VAR_226 [ VAR_227 ] . VAR_228 = ( TYPE_30 ) METHOD_34 ( VAR_229 [ VAR_230 ] ) ; VAR_231 = METHOD_35 ( VAR_232 , VAR_233 -> VAR_234 , VAR_235 ) ; if ( VAR_236 != ( TYPE_31 ) VAR_237 -> VAR_238 ) METHOD_36 ( VAR_239 , "UnexpectedEndOfFile" ) ; for ( VAR_240 = 0 ; VAR_241 < ( TYPE_32 ) VAR_242 -> VAR_243 ; VAR_244 ++ ) VAR_245 -> VAR_246 [ VAR_247 ] . VAR_248 = ( TYPE_33 ) METHOD_37 ( VAR_249 [ VAR_250 ] ) ; VAR_251 = ( unsigned TYPE_34 * ) METHOD_38 ( VAR_252 ) ; break ; } case VAR_253 : { unsigned TYPE_35 * VAR_254 ; VAR_255 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_256 . VAR_257 , sizeof ( * VAR_258 ) ) ; if ( VAR_259 == ( unsigned TYPE_37 * ) VAR_260 ) METHOD_40 ( VAR_261 , "MemoryAllocationFailed" ) ; VAR_262 = METHOD_41 ( VAR_263 , VAR_264 . VAR_265 , VAR_266 ) ; if ( VAR_267 != ( TYPE_38 ) VAR_268 . VAR_269 ) METHOD_42 ( VAR_270 , "UnexpectedEndOfFile" ) ; VAR_271 = ( unsigned TYPE_39 * ) METHOD_43 ( VAR_272 ) ; break ; } default : METHOD_44 ( VAR_273 , "ColormapTypeNotSupported" ) ; } VAR_274 -> VAR_275 = VAR_276 . VAR_277 == 32 ? VAR_278 : VAR_279 ; VAR_280 -> VAR_281 = VAR_282 . VAR_283 ; VAR_284 -> VAR_285 = VAR_286 . VAR_287 ; if ( VAR_288 -> VAR_289 != VAR_290 ) { ( TYPE_40 ) METHOD_45 ( VAR_291 ) ; return ( METHOD_46 ( VAR_292 ) ) ; } VAR_293 = METHOD_47 ( VAR_294 , VAR_295 -> VAR_296 , VAR_297 -> VAR_298 , VAR_299 ) ; if ( VAR_300 == VAR_301 ) return ( METHOD_48 ( VAR_302 ) ) ; if ( ( VAR_303 . VAR_304 * sizeof ( * VAR_305 ) ) / sizeof ( * VAR_306 ) != VAR_307 . VAR_308 || ! VAR_309 . VAR_310 )  METHOD_49 ( VAR_311 , "MemoryAllocationFailed" ) ;  VAR_312 = ( TYPE_41 ) VAR_313 -> VAR_314 * VAR_315 -> VAR_316 ; if ( ( VAR_317 . VAR_318 != VAR_319 ) && ( ( VAR_320 * VAR_321 . VAR_322 ) > ( 8 * VAR_323 . VAR_324 ) ) ) METHOD_50 ( VAR_325 , "ImproperImageHeader" ) ; VAR_326 = VAR_327 . VAR_328 * VAR_329 . VAR_330 ; VAR_331 = ( unsigned TYPE_42 * ) METHOD_51 ( ( TYPE_43 ) METHOD_52 ( VAR_332 . VAR_333 , VAR_334 * VAR_335 . VAR_336 ) , sizeof ( * VAR_337 ) ) ; if ( VAR_338 == ( unsigned TYPE_44 * ) VAR_339 ) METHOD_53 ( VAR_340 , "MemoryAllocationFailed" ) ; VAR_341 = ( TYPE_45 ) METHOD_54 ( VAR_342 , VAR_343 . VAR_344 , VAR_345 ) ; if ( VAR_346 != ( TYPE_46 ) VAR_347 . VAR_348 ) METHOD_55 ( VAR_349 , "UnableToReadImageData" ) ; VAR_350 = VAR_351 . VAR_352 ; if ( ( VAR_353 == 0 ) || ( VAR_354 . VAR_355 == 0 ) || ( VAR_356 . VAR_357 == 0 ) || ( ( VAR_358 / VAR_359 . VAR_360 ) != VAR_361 . VAR_362 ) )  METHOD_56 ( VAR_363 , "MemoryAllocationFailed" ) ;  VAR_364 += 15 ; VAR_365 <<= 1 ; if ( ( VAR_366 >> 1 ) != ( VAR_367 . VAR_368 * VAR_369 . VAR_370 + 15 ) )  METHOD_57 ( VAR_371 , "MemoryAllocationFailed" ) ;  VAR_372 >>= 4 ; VAR_373 = ( unsigned TYPE_47 * ) METHOD_58 ( VAR_374 , VAR_375 * sizeof ( * VAR_376 ) ) ; if ( VAR_377 == ( unsigned TYPE_48 * ) VAR_378 ) METHOD_59 ( VAR_379 , "MemoryAllocationFailed" ) ; if ( VAR_380 . VAR_381 == VAR_382 ) ( TYPE_49 ) METHOD_60 ( VAR_383 , VAR_384 . VAR_385 , VAR_386 , VAR_387 *  VAR_388 ) ;  VAR_389 = ( unsigned TYPE_50 * ) METHOD_61 ( VAR_390 ) ; VAR_391 = VAR_392 ; if ( VAR_393 . VAR_394 == 1 ) for ( VAR_395 = 0 ; VAR_396 < ( TYPE_51 ) VAR_397 -> VAR_398 ; VAR_399 ++ ) { VAR_400 = METHOD_62 ( VAR_401 , 0 , VAR_402 , VAR_403 -> VAR_404 , 1 , VAR_405 ) ; if ( VAR_406 == ( TYPE_52 * ) VAR_407 ) break ; for ( VAR_408 = 0 ; VAR_409 < ( ( TYPE_53 ) VAR_410 -> VAR_411 - 7 ) ; VAR_412 += 8 ) { for ( VAR_413 = 7 ; VAR_414 >= 0 ; VAR_415 -- ) { METHOD_63 ( VAR_416 , ( TYPE_54 ) ( ( * VAR_417 ) & ( 0x01 << VAR_418 ) ? 0x00 : 0x01 ) , VAR_419 ) ; VAR_420 += METHOD_64 ( VAR_421 ) ; } VAR_422 ++ ; } if ( ( VAR_423 -> VAR_424 % 8 ) != 0 ) { for ( VAR_425 = 7 ; VAR_426 >= ( TYPE_55 ) ( 8 - ( VAR_427 -> VAR_428 % 8 ) ) ; VAR_429 -- ) { METHOD_65 ( VAR_430 , ( TYPE_56 ) ( ( * VAR_431 ) & ( 0x01 << VAR_432 ) ? 0x00 : 0x01 ) , VAR_433 ) ; VAR_434 += METHOD_66 ( VAR_435 ) ; } VAR_436 ++ ; } if ( ( ( ( VAR_437 -> VAR_438 / 8 ) + ( VAR_439 -> VAR_440 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_441 ++ ; if ( METHOD_67 ( VAR_442 , VAR_443 ) == VAR_444 ) break ; if ( VAR_445 -> VAR_446 == ( TYPE_57 * ) VAR_447 ) { VAR_448 = METHOD_68 ( VAR_449 , VAR_450 , ( TYPE_58 ) VAR_451 , VAR_452 -> VAR_453 ) ; if ( VAR_454 == VAR_455 ) break ; } } else if ( VAR_456 -> VAR_457 == VAR_458 ) { if ( VAR_459 == 0 ) VAR_460 = VAR_461 -> VAR_462 ; VAR_463 = VAR_464 -> VAR_465 * ( VAR_466 -> VAR_467 + VAR_468 -> VAR_469 % 2 ) ; if ( ( ( VAR_470 . VAR_471 == VAR_472 ) && ( VAR_473 > ( VAR_474 * VAR_475 -> VAR_476 ) ) ) || ( ( VAR_477 . VAR_478 != VAR_479 ) && ( VAR_480 > VAR_481 . VAR_482 ) ) ) METHOD_69 ( VAR_483 , "UnableToReadImageData" ) ; for ( VAR_484 = 0 ; VAR_485 < ( TYPE_59 ) VAR_486 -> VAR_487 ; VAR_488 ++ ) { VAR_489 = METHOD_70 ( VAR_490 , 0 , VAR_491 , VAR_492 -> VAR_493 , 1 , VAR_494 ) ; if ( VAR_495 == ( TYPE_60 * ) VAR_496 ) break ; for ( VAR_497 = 0 ; VAR_498 < ( TYPE_61 ) VAR_499 -> VAR_500 ; VAR_501 ++ ) { METHOD_71 ( VAR_502 , * VAR_503 ++ , VAR_504 ) ; VAR_505 += METHOD_72 ( VAR_506 ) ; } if ( ( VAR_507 -> VAR_508 % 2 ) != 0 ) VAR_509 ++ ; if ( METHOD_73 ( VAR_510 , VAR_511 ) == VAR_512 ) break ; if ( VAR_513 -> VAR_514 == ( TYPE_62 * ) VAR_515 ) { VAR_516 = METHOD_74 ( VAR_517 , VAR_518 , ( TYPE_63 ) VAR_519 , VAR_520 -> VAR_521 ) ; if ( VAR_522 == VAR_523 ) break ; } } } else { TYPE_64 VAR_524 ; VAR_525 = 3 ; if ( VAR_526 -> VAR_527 != VAR_528 ) VAR_529 ++ ; if ( VAR_530 == 0 ) VAR_531 = VAR_532 * VAR_533 -> VAR_534 ; VAR_535 = VAR_536 -> VAR_537 * ( VAR_538 + VAR_539 % 2 ) ; if ( ( ( VAR_540 . VAR_541 == VAR_542 ) && ( VAR_543 > ( VAR_544 * VAR_545 -> VAR_546 ) ) ) || ( ( VAR_547 . VAR_548 != VAR_549 ) && ( VAR_550 > VAR_551 . VAR_552 ) ) ) METHOD_75 ( VAR_553 , "UnableToReadImageData" ) ; for ( VAR_554 = 0 ; VAR_555 < ( TYPE_65 ) VAR_556 -> VAR_557 ; VAR_558 ++ ) { VAR_559 = METHOD_76 ( VAR_560 , 0 , VAR_561 , VAR_562 -> VAR_563 , 1 , VAR_564 ) ; if ( VAR_565 == ( TYPE_66 * ) VAR_566 ) break ; for ( VAR_567 = 0 ; VAR_568 < ( TYPE_67 ) VAR_569 -> VAR_570 ; VAR_571 ++ ) { if ( VAR_572 -> VAR_573 != VAR_574 ) METHOD_77 ( VAR_575 , METHOD_78 ( * VAR_576 ++ ) , VAR_577 ) ; if ( VAR_578 . VAR_579 == VAR_580 ) { METHOD_79 ( VAR_581 , METHOD_80 ( * VAR_582 ++ ) , VAR_583 ) ; METHOD_81 ( VAR_584 , METHOD_82 ( * VAR_585 ++ ) , VAR_586 ) ; METHOD_83 ( VAR_587 , METHOD_84 ( * VAR_588 ++ ) , VAR_589 ) ; } else { METHOD_85 ( VAR_590 , METHOD_86 ( * VAR_591 ++ ) , VAR_592 ) ; METHOD_87 ( VAR_593 , METHOD_88 ( * VAR_594 ++ ) , VAR_595 ) ; METHOD_89 ( VAR_596 , METHOD_90 ( * VAR_597 ++ ) , VAR_598 ) ; } if ( VAR_599 -> VAR_600 != 0 ) { METHOD_91 ( VAR_601 , METHOD_92 ( VAR_602 -> VAR_603 [ ( TYPE_68 ) METHOD_93 ( VAR_604 , VAR_605 ) ] . VAR_606 ) , VAR_607 ) ; METHOD_94 ( VAR_608 , METHOD_95 ( VAR_609 -> VAR_610 [ ( TYPE_69 ) METHOD_96 ( VAR_611 , VAR_612 ) ] . VAR_613 ) , VAR_614 ) ; METHOD_97 ( VAR_615 , METHOD_98 ( VAR_616 -> VAR_617 [ ( TYPE_70 ) METHOD_99 ( VAR_618 , VAR_619 ) ] . VAR_620 ) , VAR_621 ) ; } VAR_622 += METHOD_100 ( VAR_623 ) ; } if ( ( ( VAR_624 * VAR_625 -> VAR_626 ) % 2 ) != 0 ) VAR_627 ++ ; if ( METHOD_101 ( VAR_628 , VAR_629 ) == VAR_630 ) break ; if ( VAR_631 -> VAR_632 == ( TYPE_71 * ) VAR_633 ) { VAR_634 = METHOD_102 ( VAR_635 , VAR_636 , ( TYPE_72 ) VAR_637 , VAR_638 -> VAR_639 ) ; if ( VAR_640 == VAR_641 ) break ; } } } if ( VAR_642 -> VAR_643 == VAR_644 ) ( TYPE_73 ) METHOD_103 ( VAR_645 , VAR_646 ) ; VAR_647 = ( unsigned TYPE_74 * ) METHOD_104 ( VAR_648 ) ; if ( METHOD_105 ( VAR_649 ) != VAR_650 ) { METHOD_106 ( VAR_651 , VAR_652 , "UnexpectedEndOfFile" , VAR_653 -> VAR_654 ) ; break ; } if ( VAR_655 -> VAR_656 != 0 ) if ( VAR_657 -> VAR_658 >= ( VAR_659 -> VAR_660 + VAR_661 -> VAR_662 - 1 ) ) break ; VAR_663 . VAR_664 = METHOD_107 ( VAR_665 ) ; if ( VAR_666 . VAR_667 == 0x59a66a95 ) { METHOD_108 ( VAR_668 , VAR_669 , VAR_670 ) ; if ( METHOD_109 ( VAR_671 ) == ( TYPE_75 * ) VAR_672 ) { VAR_673 = METHOD_110 ( VAR_674 ) ; return ( ( TYPE_76 * ) VAR_675 ) ; } VAR_676 = METHOD_111 ( VAR_677 ) ; VAR_678 = METHOD_112 ( VAR_679 , VAR_680 , METHOD_113 ( VAR_681 ) , METHOD_114 ( VAR_682 ) ) ; if ( VAR_683 == VAR_684 ) break ; } } while ( VAR_685 . VAR_686 == 0x59a66a95 ) ; ( TYPE_77 ) METHOD_115 ( VAR_687 ) ; return ( METHOD_116 ( VAR_688 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ; METHOD_2 ( VAR_5 , - 1 , VAR_6 | VAR_7 ) ;  METHOD_3 ( VAR_8 ) ;  if ( ! ( VAR_9 -> VAR_10 & VAR_11 ) ) { struct STRUCT_OR_UNION_2 * VAR_12 = VAR_13 -> VAR_14 ; METHOD_4 ( & VAR_15 -> VAR_16 ) ; VAR_17 -> VAR_18 = METHOD_5 ( VAR_19 -> VAR_20 ) ; METHOD_6 ( & VAR_21 -> VAR_22 ) ; METHOD_7 ( VAR_23 , VAR_24 , 1 ) ; } VAR_25 = VAR_26 -> VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) if ( VAR_32 -> VAR_33 [ VAR_34 ] ) METHOD_8 ( VAR_35 -> VAR_36 [ VAR_37 ] ) ; METHOD_9 ( VAR_38 -> VAR_39 ) ; METHOD_10 ( VAR_40 -> VAR_41 ) ; METHOD_11 ( & VAR_42 -> VAR_43 ) ; METHOD_12 ( & VAR_44 -> VAR_45 ) ; METHOD_13 ( & VAR_46 -> VAR_47 ) ; METHOD_14 ( VAR_48 -> VAR_49 ) ; VAR_50 -> VAR_51 = VAR_52 ; METHOD_15 ( VAR_53 -> VAR_54 ) ; METHOD_16 ( VAR_55 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_2 ; TYPE_1 * VAR_3 ; TYPE_2 VAR_4 = 0 , VAR_5 ; TYPE_3 VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ; STRUCT_OR_UNION_8 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_9 ) , VAR_8 ) ; STRUCT_OR_UNION_10 = METHOD_2 ( ) ; if ( ! STRUCT_OR_UNION_11 || ! STRUCT_OR_UNION_12 ) { METHOD_3 ( & VAR_9 -> VAR_10 , "Nomorememory\\n" ) ; VAR_11 = - VAR_12 ; goto VAR_13 ; } STRUCT_OR_UNION_13 -> VAR_14 = STRUCT_OR_UNION_14 ; STRUCT_OR_UNION_15 -> VAR_15 = METHOD_4 ( VAR_16 ) ; STRUCT_OR_UNION_16 -> VAR_17 = VAR_18 ; STRUCT_OR_UNION_17 -> VAR_19 = METHOD_5 ( STRUCT_OR_UNION_18 -> VAR_20 , VAR_21 , VAR_22 , & STRUCT_OR_UNION_19 -> VAR_23 ) ; if ( ! STRUCT_OR_UNION_20 -> VAR_24 ) { METHOD_6 ( & VAR_25 -> VAR_26 , "Nomorememoryforusbuffers\\n" ) ; VAR_27 = - VAR_28 ; goto VAR_29 ; } STRUCT_OR_UNION_21 -> VAR_30 = METHOD_7 ( 0 , VAR_31 ) ; if ( ! STRUCT_OR_UNION_22 -> VAR_32 ) { METHOD_8 ( & VAR_33 -> VAR_34 , "FailedtoallocateURB\\n" ) ; VAR_35 = - VAR_36 ; goto VAR_37 ; }  VAR_38 = & VAR_39 -> VAR_40 [ 0 ] . VAR_41 [ 0 ] . VAR_42 ;  METHOD_9 ( & VAR_43 -> VAR_44 , "gtcointerfaces:%d\\n" , VAR_45 -> VAR_46 ) ; METHOD_10 ( & VAR_47 -> VAR_48 , "numendpoints:%d\\n" , VAR_49 -> VAR_50 -> VAR_51 . VAR_52 ) ; METHOD_11 ( & VAR_53 -> VAR_54 , "interfaceclass:%d\\n" , VAR_55 -> VAR_56 -> VAR_57 . VAR_58 ) ; METHOD_12 ( & VAR_59 -> VAR_60 , "endpoint:attribute:0x%xtype:0x%x\\n" , VAR_61 -> VAR_62 , VAR_63 -> VAR_64 ) ; if ( METHOD_13 ( VAR_65 ) ) METHOD_14 ( & VAR_66 -> VAR_67 , "endpoint:wehaveinterruptendpoint\\n" ) ; METHOD_15 ( & VAR_68 -> VAR_69 , "endpointextralen:%d\\n" , VAR_70 -> VAR_71 [ 0 ] . VAR_72 ) ; if ( METHOD_16 ( VAR_73 -> VAR_74 , VAR_75 , & VAR_76 ) != 0 ) { METHOD_17 ( & VAR_77 -> VAR_78 , "Can\'tretrieveextaUSBdescriptortogethidreportdescriptorlength\\n" ) ; VAR_79 = - VAR_80 ; goto VAR_81 ; } METHOD_18 ( & VAR_82 -> VAR_83 , "Extradescriptorsuccess:type:%dlen:%d\\n" , VAR_84 -> VAR_85 , VAR_86 -> VAR_87 ) ; VAR_88 = METHOD_19 ( METHOD_20 ( VAR_89 -> VAR_90 ) , VAR_91 ) ; if ( ! VAR_92 ) { METHOD_21 ( & VAR_93 -> VAR_94 , "Nomorememoryforreport\\n" ) ; VAR_95 = - VAR_96 ; goto VAR_97 ; } for ( VAR_98 = 0 ; VAR_99 < 3 ; VAR_100 ++ ) { VAR_101 = METHOD_22 ( STRUCT_OR_UNION_23 -> VAR_102 , METHOD_23 ( STRUCT_OR_UNION_24 -> VAR_103 , 0 ) , VAR_104 , VAR_105 | VAR_106 , VAR_107 << 8 , 0 , VAR_108 , METHOD_24 ( VAR_109 -> VAR_110 ) , 5000 ) ; METHOD_25 ( & VAR_111 -> VAR_112 , "usb_control_msgresult:%d\\n" , VAR_113 ) ; if ( VAR_114 == METHOD_26 ( VAR_115 -> VAR_116 ) ) { METHOD_27 ( STRUCT_OR_UNION_25 , VAR_117 , VAR_118 ) ; break ; } } METHOD_28 ( VAR_119 ) ; if ( VAR_120 != METHOD_29 ( VAR_121 -> VAR_122 ) ) { METHOD_30 ( & VAR_123 -> VAR_124 , "FailedtogetHIDReportDescriptorofsize:%d\\n" , VAR_125 -> VAR_126 ) ; VAR_127 = - VAR_128 ; goto VAR_129 ; } METHOD_31 ( STRUCT_OR_UNION_26 -> VAR_130 , STRUCT_OR_UNION_27 -> VAR_131 , sizeof ( STRUCT_OR_UNION_28 -> VAR_132 ) ) ; METHOD_32 ( STRUCT_OR_UNION_29 -> VAR_133 , "/input0" , sizeof ( STRUCT_OR_UNION_30 -> VAR_134 ) ) ; STRUCT_OR_UNION_31 -> VAR_135 = VAR_136 ; STRUCT_OR_UNION_32 -> VAR_137 = VAR_138 ; STRUCT_OR_UNION_33 -> VAR_139 = "GTCO_CalComp" ; STRUCT_OR_UNION_34 -> VAR_140 = STRUCT_OR_UNION_35 -> VAR_141 ; METHOD_33 ( STRUCT_OR_UNION_36 , STRUCT_OR_UNION_37 ) ; METHOD_34 ( STRUCT_OR_UNION_38 ) ; METHOD_35 ( STRUCT_OR_UNION_39 -> VAR_142 , & STRUCT_OR_UNION_40 -> VAR_143 ) ; STRUCT_OR_UNION_41 -> VAR_144 . VAR_145 = & VAR_146 -> VAR_147 ; VAR_148 = & VAR_149 -> VAR_150 [ 0 ] . VAR_151 [ 0 ] . VAR_152 ; METHOD_36 ( STRUCT_OR_UNION_42 -> VAR_153 , STRUCT_OR_UNION_43 -> VAR_154 , METHOD_37 ( STRUCT_OR_UNION_44 -> VAR_155 , VAR_156 -> VAR_157 ) , STRUCT_OR_UNION_45 -> VAR_158 , VAR_159 , VAR_160 , STRUCT_OR_UNION_46 , VAR_161 -> VAR_162 ) ; STRUCT_OR_UNION_47 -> VAR_163 -> VAR_164 = STRUCT_OR_UNION_48 -> VAR_165 ; STRUCT_OR_UNION_49 -> VAR_166 -> VAR_167 |= VAR_168 ; METHOD_38 ( VAR_169 , STRUCT_OR_UNION_50 ) ; VAR_170 = METHOD_39 ( STRUCT_OR_UNION_51 ) ; if ( VAR_171 ) goto VAR_172 ; return 0 ; VAR_173 : METHOD_40 ( STRUCT_OR_UNION_52 -> VAR_174 ) ; VAR_175 : METHOD_41 ( STRUCT_OR_UNION_53 -> VAR_176 , VAR_177 , STRUCT_OR_UNION_54 -> VAR_178 , STRUCT_OR_UNION_55 -> VAR_179 ) ; VAR_180 : METHOD_42 ( STRUCT_OR_UNION_56 ) ; METHOD_43 ( STRUCT_OR_UNION_57 ) ; return VAR_181 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { METHOD_1 ( ) ; METHOD_2 ( ) ; TYPE_6 * VAR_5 = METHOD_3 ( VAR_6 ) ; METHOD_4 ( ) ; if ( ! VAR_7 ) { METHOD_5 ( VAR_8 , "Error:cannotfindsandbox\\n" ) ; METHOD_6 ( 1 ) ; } if ( METHOD_7 ( VAR_9 , "firejail" ) != 0 ) { METHOD_8 ( VAR_10 , "Error:cannotfindsandbox\\n" ) ; METHOD_9 ( 1 ) ; } METHOD_10 ( VAR_11 ) ; TYPE_7 * VAR_12 ; if ( METHOD_11 ( & VAR_13 , "/run/firejail/network/%d-netmap" , VAR_14 ) == - 1 ) METHOD_12 ( "asprintf" ) ; struct STRUCT_OR_UNION_0 VAR_15 ; if ( STRUCT_OR_UNION_1 ( VAR_16 , & VAR_17 ) == - 1 ) { METHOD_13 ( VAR_18 , "Error:thesandboxdoesn\'tuseanewnetworknamespace\\n" ) ; METHOD_14 ( 1 ) ; } TYPE_8 VAR_19 ; if ( METHOD_15 ( VAR_20 , & VAR_21 ) == - 1 ) { METHOD_16 ( VAR_22 , "Error:cannotjointhenetworknamespace\\n" ) ; METHOD_17 ( 1 ) ; } METHOD_18 ( ) ; if ( METHOD_19 ( VAR_23 , "net" ) ) { METHOD_20 ( VAR_24 , "Error:cannotjointhenetworknamespace\\n" ) ; METHOD_21 ( 1 ) ; } if ( METHOD_22 ( VAR_25 , "set" ) == 0 ) METHOD_23 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; else if ( METHOD_24 ( VAR_30 , "clear" ) == 0 ) METHOD_25 ( VAR_31 , VAR_32 ) ; TYPE_9 * VAR_33 = VAR_34 ; if ( VAR_35 ) { TYPE_10 * VAR_36 ; if ( METHOD_26 ( & VAR_37 , "%s/%d-netmap" , VAR_38 , ( TYPE_11 ) VAR_39 ) == - 1 ) METHOD_27 ( "asprintf" ) ; TYPE_12 * VAR_40 = METHOD_28 ( VAR_41 , "r" ) ; if ( ! VAR_42 ) { METHOD_29 ( VAR_43 , "Error:cannotreadnetworkmapfile%s\\n" , VAR_44 ) ; METHOD_30 ( 1 ) ; } TYPE_13 VAR_45 [ 1024 ] ; TYPE_14 VAR_46 = METHOD_31 ( VAR_47 ) ; while ( METHOD_32 ( VAR_48 , 1024 , VAR_49 ) ) { TYPE_15 * VAR_50 = METHOD_33 ( VAR_51 , '\\n' ) ; if ( VAR_52 ) * VAR_53 = '\\0' ; if ( * VAR_54 == '\\0' ) break ; if ( METHOD_34 ( VAR_55 , VAR_56 , VAR_57 ) == 0 && VAR_58 [ VAR_59 ] == ':' ) { VAR_60 = METHOD_35 ( VAR_61 + VAR_62 + 1 ) ; if ( ! VAR_63 ) METHOD_36 ( "strdup" ) ; if ( METHOD_37 ( VAR_64 ) == 0 ) { METHOD_38 ( VAR_65 , "Error:cannotfindnetworkdevice%s\\n" , VAR_66 ) ; METHOD_39 ( 1 ) ; } break ; } } METHOD_40 ( VAR_67 ) ; METHOD_41 ( VAR_68 ) ; } TYPE_16 * VAR_69 = VAR_70 ; if ( VAR_71 ) { if ( METHOD_42 ( VAR_72 , "set" ) == 0 ) { if ( METHOD_43 ( & VAR_73 , "%s/firejail/fshaper.sh--%s%s%d%d" , VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 ) == - 1 ) METHOD_44 ( "asprintf" ) ; } else { if ( METHOD_45 ( & VAR_79 , "%s/firejail/fshaper.sh--%s%s" , VAR_80 , VAR_81 , VAR_82 ) == - 1 ) METHOD_46 ( "asprintf" ) ; } } else { if ( METHOD_47 ( & VAR_83 , "%s/firejail/fshaper.sh--%s" , VAR_84 , VAR_85 ) == - 1 ) METHOD_48 ( "asprintf" ) ; } METHOD_49 ( VAR_86 ) ; VAR_87 = VAR_88 ; if ( METHOD_50 ( 0 , 0 ) ) METHOD_51 ( "setreuid" ) ; if ( METHOD_52 ( 0 , 0 ) ) METHOD_53 ( "setregid" ) ;  if ( ! VAR_89 . VAR_90 )  VAR_91 . VAR_92 = METHOD_54 ( ) ; if ( ! VAR_93 . VAR_94 ) { METHOD_55 ( VAR_95 , "Error:noPOSIXshellfound,pleaseuse--shellcommandlineoption\\n" ) ; METHOD_56 ( 1 ) ; } TYPE_17 * VAR_96 [ 4 ] ;  VAR_97 [ 0 ] = VAR_98 . VAR_99 ;  VAR_100 [ 1 ] = "-c" ; VAR_101 [ 2 ] = VAR_102 ; VAR_103 [ 3 ] = VAR_104 ; METHOD_57 ( ) ; METHOD_58 ( VAR_105 [ 0 ] , VAR_106 ) ; METHOD_59 ( "execvp" ) ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ) {  return METHOD_1 ( VAR_1 -> VAR_2 . VAR_3 -> VAR_4 ) ;   }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 )  { METHOD_1 ( & VAR_3 -> VAR_4 ) ;  METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ;  METHOD_3 ( & VAR_8 -> VAR_9 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_4 * VAR_7 = VAR_8 , * VAR_9 = VAR_10 ; TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 ; METHOD_1 ( VAR_14 , 4 ) ; VAR_15 = METHOD_2 ( VAR_16 ) ; if ( VAR_17 == 2 ) { TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; METHOD_3 ( VAR_20 , 22 ) ; VAR_21 = METHOD_4 ( VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) return METHOD_5 ( VAR_25 ) ; VAR_26 = METHOD_6 ( VAR_27 , VAR_28 ) ; if ( ! VAR_29 ) return METHOD_7 ( VAR_30 ) ; METHOD_8 ( VAR_31 , 64 , 1 , 15 ) ; VAR_32 -> VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = METHOD_9 ( VAR_38 -> VAR_39 ) ; VAR_40 -> VAR_41 = METHOD_10 ( VAR_42 ) ; VAR_43 = METHOD_11 ( VAR_44 ) ; switch ( VAR_45 ) { case 1 : VAR_46 -> VAR_47 -> VAR_48 = VAR_49 ; break ; case 2 : VAR_50 -> VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 -> VAR_56 = VAR_57 ; break ; default : METHOD_12 ( VAR_58 , "Videocompression%i" , VAR_59 ) ; break ; } VAR_60 -> VAR_61 -> VAR_62 = 0 ; VAR_63 -> VAR_64 -> VAR_65 = METHOD_13 ( VAR_66 ) ; VAR_67 -> VAR_68 -> VAR_69 = METHOD_14 ( VAR_70 ) ; METHOD_15 ( VAR_71 , 12 ) ; VAR_72 -> VAR_73 -> VAR_74 = VAR_75 ; VAR_76 -> VAR_77 = VAR_78 -> VAR_79 ; VAR_80 -> VAR_81 -> VAR_82 = METHOD_16 ( VAR_83 ) ; if ( VAR_84 -> VAR_85 -> VAR_86 <= 0 ) { METHOD_17 ( VAR_87 , VAR_88 , "Invalidsamplerate%d\\n" , VAR_89 -> VAR_90 -> VAR_91 ) ; return VAR_92 ; } METHOD_18 ( VAR_93 , 33 , 1 , VAR_94 -> VAR_95 -> VAR_96 ) ; if ( METHOD_19 ( VAR_97 , VAR_98 , METHOD_20 ( VAR_99 ) ) < 0 ) return VAR_100 ; VAR_101 = METHOD_21 ( VAR_102 ) ; if ( VAR_103 == VAR_104 ) { VAR_105 -> VAR_106 -> VAR_107 = VAR_108 ; } else { METHOD_22 ( VAR_109 , "Audiocompression(format%i)" , VAR_110 ) ; } METHOD_23 ( VAR_111 , 12 ) ; METHOD_24 ( VAR_112 , "title" , 0x80 ) ; METHOD_25 ( VAR_113 , "comment" , 0x100 ) ; METHOD_26 ( VAR_114 , 0x80 ) ; VAR_115 = 0 ; for ( VAR_116 = 0 ; VAR_117 < VAR_118 -> VAR_119 ; VAR_120 ++ ) { TYPE_9 VAR_121 = METHOD_27 ( VAR_122 ) ; TYPE_10 VAR_123 = METHOD_28 ( VAR_124 ) ;  TYPE_11 VAR_125 = METHOD_29 ( VAR_126 ) ;  METHOD_30 ( VAR_127 , 8 ) ; METHOD_31 ( VAR_128 , VAR_129 , VAR_130 , VAR_131 , 0 , VAR_132 ) ; METHOD_32 ( VAR_133 , VAR_134 + VAR_135 , VAR_136 , VAR_137 , 0 , VAR_138 ) ; VAR_139 += VAR_140 / ( VAR_141 -> VAR_142 -> VAR_143 * 2 ) ; } } else if ( ! VAR_144 && METHOD_33 ( VAR_145 ) == 3 ) { METHOD_34 ( VAR_146 , 4 ) ; if ( ( VAR_147 = METHOD_35 ( VAR_148 , VAR_149 , VAR_150 ) ) < 0 ) return VAR_151 ; if ( VAR_152 -> VAR_153 > 1 ) { METHOD_36 ( VAR_154 , "Multipleaudiostreamssupport" ) ; return VAR_155 ; } else if ( VAR_156 -> VAR_157 ) { VAR_158 = METHOD_37 ( VAR_159 , VAR_160 ) ; if ( ! VAR_161 ) return METHOD_38 ( VAR_162 ) ; VAR_163 -> VAR_164 -> VAR_165 = VAR_166 ; if ( ( METHOD_39 ( VAR_167 , VAR_168 , VAR_169 ) ) < 0 ) return VAR_170 ; if ( VAR_171 -> VAR_172 == 100 && VAR_173 -> VAR_174 == VAR_175 && VAR_176 -> VAR_177 -> VAR_178 == 16 ) { VAR_179 -> VAR_180 -> VAR_181 = VAR_182 ; } else { METHOD_40 ( VAR_183 , "Audiocompression%i(format%i,sr%i)" , VAR_184 -> VAR_185 , VAR_186 -> VAR_187 , VAR_188 -> VAR_189 -> VAR_190 ) ; VAR_191 -> VAR_192 -> VAR_193 = VAR_194 ; } if ( VAR_195 -> VAR_196 -> VAR_197 <= 0 ) { METHOD_41 ( VAR_198 , VAR_199 , "Novalidchannelcountfound.\\n" ) ; return VAR_200 ; } } if ( VAR_201 -> VAR_202 > 1 ) { METHOD_42 ( VAR_203 , "Multiplevideostreamssupport" ) ; return VAR_204 ; } else if ( VAR_205 -> VAR_206 ) { VAR_207 = METHOD_43 ( VAR_208 , VAR_209 ) ; if ( ! VAR_210 ) return METHOD_44 ( VAR_211 ) ; VAR_212 -> VAR_213 -> VAR_214 = VAR_215 ; if ( ( VAR_216 = METHOD_45 ( VAR_217 , VAR_218 , VAR_219 ) ) < 0 ) return VAR_220 ; } if ( VAR_221 -> VAR_222 ) METHOD_46 ( VAR_223 , VAR_224 ) ; if ( VAR_225 -> VAR_226 ) METHOD_47 ( VAR_227 , VAR_228 ) ; } else { METHOD_48 ( VAR_229 , "Version%i" , VAR_230 ) ; return VAR_231 ; } return 0 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { const TYPE_7 * VAR_6 ; TYPE_8 VAR_7 ; const TYPE_9 * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_17 * VAR_22 ; if ( VAR_23 > VAR_24 / 4 ) { VAR_25 = VAR_26 ; goto VAR_27 ; } VAR_28 = CAST ( const TYPE_18 * , ( const TYPE_19 * ) ( ( const TYPE_20 * ) VAR_29 -> VAR_30 + VAR_31 ) ) ; if ( METHOD_1 ( VAR_32 , VAR_33 , VAR_34 , sizeof ( * VAR_35 ) , VAR_36 ) == - 1 ) goto VAR_37 ; VAR_38 . VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 / 8 ) if ( VAR_43 . VAR_44 > METHOD_4 ) { VAR_45 = VAR_46 ; goto VAR_47 ; } VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 ) ; METHOD_6 ( VAR_52 / ( 4 * sizeof ( * VAR_53 ) ) ) if ( VAR_54 . VAR_55 > METHOD_7 ) goto VAR_56 ; METHOD_8 ( ( "sectionlen:%uproperties%u\\n" , VAR_57 . VAR_58 , VAR_59 . VAR_60 ) ) ; if ( * VAR_61 ) { if ( * VAR_62 > METHOD_9 ) goto VAR_63 ; * VAR_64 += VAR_65 . VAR_66 ; VAR_67 = CAST ( TYPE_21 * , METHOD_10 ( * VAR_68 , * VAR_69 * sizeof ( * VAR_70 ) ) ) ; } else { * VAR_71 = VAR_72 . VAR_73 ; VAR_74 = CAST ( TYPE_22 * , METHOD_11 ( * VAR_75 * sizeof ( * VAR_76 ) ) ) ; } if ( VAR_77 == VAR_78 ) goto VAR_79 ; * VAR_80 = VAR_81 ; VAR_82 += * VAR_83 ; * VAR_84 += VAR_85 . VAR_86 ; VAR_87 = CAST ( const TYPE_23 * , ( const TYPE_24 * ) ( ( const TYPE_25 * ) ( const TYPE_26 * ) VAR_88 -> VAR_89 + VAR_90 + sizeof ( VAR_91 ) ) ) ; VAR_92 = CAST ( const TYPE_27 * , ( const TYPE_28 * ) ( ( ( const TYPE_29 * ) ( const TYPE_30 * ) VAR_93 ) + VAR_94 . VAR_95 ) ) ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , 0 , VAR_99 ) == - 1 ) goto VAR_100 ; for ( VAR_101 = 0 ; VAR_102 < VAR_103 . VAR_104 ; VAR_105 ++ ) { TYPE_31 VAR_106 , VAR_107 = ( VAR_108 << 1 ) + 1 ; if ( METHOD_13 ( VAR_109 , VAR_110 , VAR_111 , VAR_112 * sizeof ( TYPE_32 ) , VAR_113 ) == - 1 ) goto VAR_114 ; VAR_115 = METHOD_14 ( VAR_116 , VAR_117 ) ; VAR_118 = ( const TYPE_33 * ) ( const TYPE_34 * ) ( ( const TYPE_35 * ) ( const TYPE_36 * ) VAR_119 + VAR_120 - 2 * sizeof ( TYPE_37 ) ) ;  if ( VAR_121 > VAR_122 ) {  METHOD_15 ( ( "Ranoftheend%p>%p\\n" , VAR_123 , VAR_124 ) ) ; goto VAR_125 ; } VAR_126 [ VAR_127 ] . VAR_128 = METHOD_16 ( VAR_129 , VAR_130 << 1 ) ; VAR_131 [ VAR_132 ] . VAR_133 = METHOD_17 ( VAR_134 , 0 ) ; METHOD_18 ( ( "%" SIZE_T_FORMAT "u)id=%xtype=%xoffs=0x%tx,0x%x\\n" , VAR_135 , VAR_136 [ VAR_137 ] . VAR_138 , VAR_139 [ VAR_140 ] . VAR_141 , VAR_142 - VAR_143 , VAR_144 ) ) ; if ( VAR_145 [ VAR_146 ] . VAR_147 & VAR_148 ) { VAR_149 = METHOD_19 ( VAR_150 , 1 ) ; if ( VAR_151 == 0 ) { METHOD_20 ( ( "CDF_VECTORwithnelements==0\\n" ) ) ; goto VAR_152 ; } VAR_153 = 2 ; } else { VAR_154 = 1 ; VAR_155 = 1 ; } VAR_156 = VAR_157 * sizeof ( TYPE_38 ) ; if ( VAR_158 [ VAR_159 ] . VAR_160 & ( VAR_161 | VAR_162 | VAR_163 ) ) goto VAR_164 ; switch ( VAR_165 [ VAR_166 ] . VAR_167 & VAR_168 ) { case VAR_169 : case VAR_170 : break ; case VAR_171 : if ( VAR_172 [ VAR_173 ] . VAR_174 & VAR_175 ) goto VAR_176 ; ( TYPE_39 ) METHOD_21 ( & VAR_177 , & VAR_178 [ VAR_179 ] , sizeof ( VAR_180 ) ) ; VAR_181 [ VAR_182 ] . VAR_183 = METHOD_22 ( VAR_184 ) ; break ; case VAR_185 : if ( VAR_186 [ VAR_187 ] . VAR_188 & VAR_189 ) goto VAR_190 ; ( TYPE_40 ) METHOD_23 ( & VAR_191 , & VAR_192 [ VAR_193 ] , sizeof ( VAR_194 ) ) ; VAR_195 [ VAR_196 ] . VAR_197 = METHOD_24 ( ( TYPE_41 ) VAR_198 ) ; break ; case VAR_199 : case VAR_200 : if ( VAR_201 [ VAR_202 ] . VAR_203 & VAR_204 ) goto VAR_205 ; ( TYPE_42 ) METHOD_25 ( & VAR_206 , & VAR_207 [ VAR_208 ] , sizeof ( VAR_209 ) ) ; VAR_210 [ VAR_211 ] . VAR_212 = METHOD_26 ( VAR_213 ) ; break ; case VAR_214 : if ( VAR_215 [ VAR_216 ] . VAR_217 & VAR_218 ) goto VAR_219 ; ( TYPE_43 ) METHOD_27 ( & VAR_220 , & VAR_221 [ VAR_222 ] , sizeof ( VAR_223 ) ) ; VAR_224 [ VAR_225 ] . VAR_226 = METHOD_28 ( ( TYPE_44 ) VAR_227 ) ; break ; case VAR_228 : if ( VAR_229 [ VAR_230 ] . VAR_231 & VAR_232 ) goto VAR_233 ; ( TYPE_45 ) METHOD_29 ( & VAR_234 , & VAR_235 [ VAR_236 ] , sizeof ( VAR_237 ) ) ; VAR_238 [ VAR_239 ] . VAR_240 = METHOD_30 ( ( TYPE_46 ) VAR_241 ) ; break ; case VAR_242 : if ( VAR_243 [ VAR_244 ] . VAR_245 & VAR_246 ) goto VAR_247 ; ( TYPE_47 ) METHOD_31 ( & VAR_248 , & VAR_249 [ VAR_250 ] , sizeof ( VAR_251 ) ) ; VAR_252 = METHOD_32 ( VAR_253 ) ; METHOD_33 ( & VAR_254 [ VAR_255 ] . VAR_256 , & VAR_257 , sizeof ( VAR_258 [ VAR_259 ] . VAR_260 ) ) ; break ; case VAR_261 : if ( VAR_262 [ VAR_263 ] . VAR_264 & VAR_265 ) goto VAR_266 ; ( TYPE_48 ) METHOD_34 ( & VAR_267 , & VAR_268 [ VAR_269 ] , sizeof ( VAR_270 ) ) ; VAR_271 = METHOD_35 ( ( TYPE_49 ) VAR_272 ) ; METHOD_36 ( & VAR_273 [ VAR_274 ] . VAR_275 , & VAR_276 , sizeof ( VAR_277 [ VAR_278 ] . VAR_279 ) ) ; break ; case VAR_280 : case VAR_281 : if ( VAR_282 > 1 ) { TYPE_50 VAR_283 = VAR_284 - * VAR_285 ; if ( * VAR_286 > METHOD_37 || VAR_287 > METHOD_38 ) goto VAR_288 ; * VAR_289 += VAR_290 ; VAR_291 = CAST ( TYPE_51 * , METHOD_39 ( * VAR_292 , * VAR_293 * sizeof ( * VAR_294 ) ) ) ; if ( VAR_295 == VAR_296 ) goto VAR_297 ; * VAR_298 = VAR_299 ; VAR_300 = * VAR_301 + VAR_302 ; } METHOD_40 ( ( "nelements=%" SIZE_T_FORMAT "u\\n" , VAR_303 ) ) ; for ( VAR_304 = 0 ; VAR_305 < VAR_306 && VAR_307 < VAR_308 . VAR_309 ; VAR_310 ++ , VAR_311 ++ ) { TYPE_52 VAR_312 = METHOD_41 ( VAR_313 , VAR_314 ) ; VAR_315 [ VAR_316 ] . VAR_317 . VAR_318 = VAR_319 ; VAR_320 [ VAR_321 ] . VAR_322 . VAR_323 = ( const TYPE_53 * ) ( const TYPE_54 * ) ( & VAR_324 [ VAR_325 + sizeof ( VAR_326 ) ] ) ; METHOD_42 ( ( "l=%d,r=%" SIZE_T_FORMAT "u,s=%s\\n" , VAR_327 , METHOD_43 ( VAR_328 , sizeof ( VAR_329 ) ) , VAR_330 [ VAR_331 ] . VAR_332 . VAR_333 ) ) ; if ( VAR_334 & 1 ) VAR_335 ++ ; VAR_336 += VAR_337 >> 1 ; if ( VAR_338 + VAR_339 >= VAR_340 ) goto VAR_341 ; VAR_342 = VAR_343 * sizeof ( TYPE_55 ) ; } VAR_344 -- ; break ; case VAR_345 : if ( VAR_346 [ VAR_347 ] . VAR_348 & VAR_349 ) goto VAR_350 ; ( TYPE_56 ) METHOD_44 ( & VAR_351 , & VAR_352 [ VAR_353 ] , sizeof ( VAR_354 ) ) ; VAR_355 [ VAR_356 ] . VAR_357 = METHOD_45 ( ( TYPE_57 ) VAR_358 ) ; break ; case VAR_359 : if ( VAR_360 [ VAR_361 ] . VAR_362 & VAR_363 ) goto VAR_364 ; break ; default : VAR_365 : METHOD_46 ( ( "Don\'tknowhowtodealwith%x\\n" , VAR_366 [ VAR_367 ] . VAR_368 ) ) ; break ; } } return 0 ; VAR_369 : METHOD_47 ( * VAR_370 ) ; return - 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( VAR_0 , "peerstats" , & VAR_1 ) ; METHOD_2 ( VAR_2 , "loopstats" , & VAR_3 ) ; METHOD_3 ( VAR_4 , "clockstats" , & VAR_5 ) ; METHOD_4 ( VAR_6 , "rawstats" , & VAR_7 ) ; METHOD_5 ( VAR_8 , "sysstats" , & VAR_9 ) ; METHOD_6 ( VAR_10 , "protostats" , & VAR_11 ) ;  TYPE_2 TYPE_3  METHOD_7 ( VAR_12 , "cryptostats" , & VAR_13 ) ;   TYPE_4 TYPE_5 METHOD_8 ( VAR_14 , "timingstats" , & VAR_15 ) ;   VAR_16 = & VAR_17 ; TYPE_6 TYPE_7 TYPE_8 ( & VAR_18 ) ; }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 * VAR_2 = VAR_3 ;  TYPE_4 * VAR_4 = "/etc" ;   if ( ( VAR_5 = METHOD_1 ( & VAR_6 , VAR_7 ) ) == VAR_8 ) {  METHOD_2 ( ) ; METHOD_3 ( VAR_9 , METHOD_4 ( "can\'topentemporaryfile" ) ) ; } METHOD_5 ( VAR_10 , METHOD_6 ( VAR_11 ) ) ; VAR_12 = VAR_13 ; return VAR_14 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 -> VAR_9 ; METHOD_2 ( VAR_10 == VAR_11 ) ; METHOD_3 ( & VAR_12 , & VAR_13 -> VAR_14 ) ; METHOD_4 ( VAR_15 , & VAR_16 , VAR_17 ) VAR_18 -> VAR_19 = VAR_20 ; METHOD_5 ( & VAR_21 , VAR_22 -> VAR_23 . VAR_24 ) ;  METHOD_6 ( VAR_25 , VAR_26 , VAR_27 ) ;  METHOD_7 ( VAR_28 ) ; }
TYPE_0 TYPE_1 struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 = & VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_2 VAR_8 = METHOD_1 ( ) ; struct STRUCT_OR_UNION_5 * VAR_9 = & METHOD_2 ( VAR_10 , VAR_11 ) ; unsigned VAR_12 , VAR_13 ; TYPE_3 VAR_14 ; VAR_15 = METHOD_3 ( VAR_16 , VAR_17 , VAR_18 ) ; METHOD_4 ( VAR_19 , VAR_20 ) ;  METHOD_5 ( VAR_21 , VAR_22 -> VAR_23 ) ;  if ( METHOD_6 ( VAR_24 -> VAR_25 | VAR_26 -> VAR_27 ) ) METHOD_7 ( VAR_28 , VAR_29 -> VAR_30 ) ; METHOD_8 ( VAR_31 , VAR_32 -> VAR_33 ) ; if ( METHOD_9 ( VAR_34 -> VAR_35 | VAR_36 -> VAR_37 ) )  METHOD_10 ( VAR_38 , VAR_39 -> VAR_40 ) ;  METHOD_11 ( VAR_41 , VAR_42 ) ; METHOD_12 ( VAR_43 , VAR_44 ) ; METHOD_13 ( VAR_45 , VAR_46 ) ; METHOD_14 ( VAR_47 ) ; if ( METHOD_15 ( VAR_48 | VAR_49 -> VAR_50 | VAR_51 -> VAR_52 ) ) { METHOD_16 ( VAR_53 , VAR_54 -> VAR_55 ) ; if ( VAR_56 ) VAR_57 -> VAR_58 = 0 ; } if ( VAR_59 -> VAR_60 ) METHOD_17 ( VAR_61 , VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = VAR_66 ; if ( METHOD_18 ( VAR_67 | VAR_68 -> VAR_69 | VAR_70 -> VAR_71 ) ) { METHOD_19 ( VAR_72 -> VAR_73 ) ; if ( VAR_74 ) VAR_75 -> VAR_76 = 0 ; } if ( VAR_77 -> VAR_78 ) METHOD_20 ( VAR_79 , VAR_80 -> VAR_81 ) ; VAR_82 -> VAR_83 = VAR_84 ; METHOD_21 ( VAR_85 , VAR_86 ) ; VAR_87 -> VAR_88 = METHOD_22 ( VAR_89 ) ; METHOD_23 ( VAR_90 , VAR_91 -> VAR_92 ) ; METHOD_24 ( VAR_93 , VAR_94 ) ; METHOD_25 ( VAR_95 ) -> VAR_96 = METHOD_26 ( VAR_97 ) ; METHOD_27 ( VAR_98 , METHOD_28 ( VAR_99 ) -> VAR_100 ) ; METHOD_29 ( VAR_101 , ( unsigned TYPE_4 ) METHOD_30 ( VAR_102 ) + VAR_103 - VAR_104 ) ; if ( METHOD_31 ( METHOD_32 ( VAR_105 ) -> VAR_106 & VAR_107 || METHOD_33 ( VAR_108 ) -> VAR_109 & VAR_110 ) ) METHOD_34 ( VAR_111 , VAR_112 , VAR_113 ) ; return VAR_114 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { if ( ! METHOD_1 ( VAR_2 , VAR_3 ) ) return ; const TYPE_3 * VAR_4 = VAR_5 ? METHOD_2 ( VAR_6 , VAR_7 ) : "" ; if ( ! VAR_8 ) VAR_9 = "" ; if ( METHOD_3 ( VAR_10 , VAR_11 ) != 0 ) { struct STRUCT_OR_UNION_0 * VAR_12 = METHOD_4 ( VAR_13 ) ; if ( VAR_14 ) METHOD_5 ( VAR_15 , VAR_16 , VAR_17 ) ; METHOD_6 ( VAR_18 ) ;  METHOD_7 ( ) ;  METHOD_8 ( 0 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 * VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; if ( 0 == VAR_13 -> VAR_14 ) return VAR_15 ; METHOD_1 ( "pic_parameter_set_id" , VAR_16 , VAR_17 ) ; VAR_18 = VAR_19 ; if ( ( VAR_20 >= VAR_21 ) || ( VAR_22 < 0 ) ) { if ( VAR_23 -> VAR_24 ) return VAR_25 ; else VAR_26 = 0 ; } VAR_27 = ( VAR_28 -> VAR_29 . VAR_30 + VAR_31 - 1 ) ; VAR_32 -> VAR_33 = VAR_34 ; METHOD_2 ( "seq_parameter_set_id" , VAR_35 , VAR_36 ) ; VAR_37 -> VAR_38 = VAR_39 ; VAR_40 -> VAR_41 = METHOD_3 ( VAR_42 -> VAR_43 , 0 , VAR_44 - 2 ) ; VAR_45 = ( VAR_46 -> VAR_47 . VAR_48 + VAR_49 -> VAR_50 ) ; if ( 0 == VAR_51 -> VAR_52 ) { return VAR_53 ; } METHOD_4 ( "dependent_slices_enabled_flag" , VAR_54 , VAR_55 , 1 ) ; VAR_56 -> VAR_57 = VAR_58 ; METHOD_5 ( "output_flag_present_flag" , VAR_59 , VAR_60 , 1 ) ; VAR_61 -> VAR_62 = VAR_63 ; METHOD_6 ( "num_extra_slice_header_bits" , VAR_64 , VAR_65 , 3 ) ; VAR_66 -> VAR_67 = VAR_68 ; METHOD_7 ( "sign_data_hiding_flag" , VAR_69 , VAR_70 , 1 ) ; VAR_71 -> VAR_72 = VAR_73 ; METHOD_8 ( "cabac_init_present_flag" , VAR_74 , VAR_75 , 1 ) ; VAR_76 -> VAR_77 = VAR_78 ; METHOD_9 ( "num_ref_idx_l0_default_active_minus1" , VAR_79 , VAR_80 ) ; VAR_81 -> VAR_82 = VAR_83 + 1 ; METHOD_10 ( "num_ref_idx_l1_default_active_minus1" , VAR_84 , VAR_85 ) ; VAR_86 -> VAR_87 = VAR_88 + 1 ; METHOD_11 ( "pic_init_qp_minus26" , VAR_89 , VAR_90 ) ; VAR_91 -> VAR_92 = VAR_93 + 26 ; METHOD_12 ( "constrained_intra_pred_flag" , VAR_94 , VAR_95 , 1 ) ; VAR_96 -> VAR_97 = VAR_98 ; METHOD_13 ( "transform_skip_enabled_flag" , VAR_99 , VAR_100 , 1 ) ; VAR_101 -> VAR_102 = VAR_103 ; METHOD_14 ( "cu_qp_delta_enabled_flag" , VAR_104 , VAR_105 , 1 ) ; VAR_106 -> VAR_107 = VAR_108 ; if ( VAR_109 -> VAR_110 ) { METHOD_15 ( "diff_cu_qp_delta_depth" , VAR_111 , VAR_112 ) ; VAR_113 -> VAR_114 = VAR_115 ; } else { VAR_116 -> VAR_117 = 0 ; } VAR_118 -> VAR_119 = VAR_120 -> VAR_121 - VAR_122 -> VAR_123 ; METHOD_16 ( "cb_qp_offset" , VAR_124 , VAR_125 ) ; VAR_126 -> VAR_127 = VAR_128 ; METHOD_17 ( "cr_qp_offset" , VAR_129 , VAR_130 ) ; VAR_131 -> VAR_132 = VAR_133 ; METHOD_18 ( "slicelevel_chroma_qp_flag" , VAR_134 , VAR_135 , 1 ) ; VAR_136 -> VAR_137 = VAR_138 ; METHOD_19 ( "weighted_pred_flag" , VAR_139 , VAR_140 , 1 ) ; VAR_141 -> VAR_142 = VAR_143 ; METHOD_20 ( "weighted_bipred_flag" , VAR_144 , VAR_145 , 1 ) ; VAR_146 -> VAR_147 = VAR_148 ; METHOD_21 ( "transquant_bypass_enable_flag" , VAR_149 , VAR_150 , 1 ) ; VAR_151 -> VAR_152 = VAR_153 ; METHOD_22 ( "tiles_enabled_flag" , VAR_154 , VAR_155 , 1 ) ; VAR_156 -> VAR_157 = VAR_158 ;  METHOD_23 ( "entropy_coding_sync_enabled_flag" , VAR_159 , VAR_160 , 1 ) ;  VAR_161 -> VAR_162 = VAR_163 ; VAR_164 -> VAR_165 = 0 ; if ( VAR_166 -> VAR_167 ) { TYPE_7 VAR_168 = METHOD_24 ( VAR_169 -> VAR_170 ) ; TYPE_8 VAR_171 = METHOD_25 ( VAR_172 -> VAR_173 ) ; TYPE_9 VAR_174 = ( VAR_175 + VAR_176 - 1 ) / VAR_177 ; TYPE_10 VAR_178 = ( VAR_179 + VAR_180 - 1 ) / VAR_181 ; METHOD_26 ( "num_tile_columns_minus1" , VAR_182 , VAR_183 ) ; VAR_184 -> VAR_185 = VAR_186 + 1 ; METHOD_27 ( "num_tile_rows_minus1" , VAR_187 , VAR_188 ) ; VAR_189 -> VAR_190 = VAR_191 + 1 ; if ( ( VAR_192 -> VAR_193 < 1 ) || ( VAR_194 -> VAR_195 > VAR_196 ) || ( VAR_197 -> VAR_198 < 1 ) || ( VAR_199 -> VAR_200 > VAR_201 ) ) return VAR_202 ; METHOD_28 ( "uniform_spacing_flag" , VAR_203 , VAR_204 , 1 ) ; VAR_205 -> VAR_206 = VAR_207 ; { TYPE_11 VAR_208 ; TYPE_12 VAR_209 , VAR_210 ; VAR_211 = 0 ; for ( VAR_212 = 0 ; VAR_213 < VAR_214 -> VAR_215 ; VAR_216 ++ ) { VAR_217 * VAR_218 ; if ( ! VAR_219 -> VAR_220 ) { if ( VAR_221 < ( VAR_222 -> VAR_223 - 1 ) ) { METHOD_29 ( "column_width_minus1[i]" , VAR_224 , VAR_225 ) ; VAR_226 += 1 ; } else { VAR_227 = VAR_228 -> VAR_229 - VAR_230 ; } } else { VAR_231 = ( ( VAR_232 + 1 ) * VAR_233 -> VAR_234 ) / VAR_235 -> VAR_236 - ( VAR_237 * VAR_238 -> VAR_239 ) / VAR_240 -> VAR_241 ; } for ( VAR_242 = 0 ; VAR_243 < VAR_244 -> VAR_245 ; VAR_246 ++ ) { VAR_247 = VAR_248 -> VAR_249 + VAR_250 * VAR_251 -> VAR_252 + VAR_253 ; VAR_254 -> VAR_255 = VAR_256 ; VAR_257 -> VAR_258 = VAR_259 ; } VAR_260 += VAR_261 ; if ( ( VAR_262 > VAR_263 -> VAR_264 ) || ( VAR_265 <= 0 ) ) return VAR_266 ; } VAR_267 = 0 ; for ( VAR_268 = 0 ; VAR_269 < ( VAR_270 -> VAR_271 ) ; VAR_272 ++ ) { VAR_273 * VAR_274 ; if ( ! VAR_275 -> VAR_276 ) { if ( VAR_277 < ( VAR_278 -> VAR_279 - 1 ) ) { METHOD_30 ( "row_height_minus1[i]" , VAR_280 , VAR_281 ) ; VAR_282 += 1 ; } else { VAR_283 = VAR_284 -> VAR_285 - VAR_286 ; } } else { VAR_287 = ( ( VAR_288 + 1 ) * VAR_289 -> VAR_290 ) / VAR_291 -> VAR_292 - ( VAR_293 * VAR_294 -> VAR_295 ) / VAR_296 -> VAR_297 ; } for ( VAR_298 = 0 ; VAR_299 < VAR_300 -> VAR_301 ; VAR_302 ++ ) { VAR_303 = VAR_304 -> VAR_305 + VAR_306 * VAR_307 -> VAR_308 + VAR_309 ; VAR_310 -> VAR_311 = VAR_312 ; VAR_313 -> VAR_314 = VAR_315 ; } VAR_316 += VAR_317 ; if ( ( VAR_318 > VAR_319 -> VAR_320 ) || ( VAR_321 <= 0 ) ) return VAR_322 ; } } METHOD_31 ( "loop_filter_across_tiles_enabled_flag" , VAR_323 , VAR_324 , 1 ) ; VAR_325 -> VAR_326 = VAR_327 ; } else { VAR_328 -> VAR_329 = 1 ; VAR_330 -> VAR_331 = 1 ; VAR_332 -> VAR_333 = 1 ; VAR_334 -> VAR_335 -> VAR_336 = 0 ; VAR_337 -> VAR_338 -> VAR_339 = 0 ; VAR_340 -> VAR_341 -> VAR_342 = VAR_343 -> VAR_344 ; VAR_345 -> VAR_346 -> VAR_347 = VAR_348 -> VAR_349 ; } METHOD_32 ( "loop_filter_across_slices_enabled_flag" , VAR_350 , VAR_351 , 1 ) ; VAR_352 -> VAR_353 = VAR_354 ; METHOD_33 ( "deblocking_filter_control_present_flag" , VAR_355 , VAR_356 , 1 ) ; VAR_357 -> VAR_358 = VAR_359 ; VAR_360 -> VAR_361 = 0 ; VAR_362 -> VAR_363 = 0 ; VAR_364 -> VAR_365 = 0 ; VAR_366 -> VAR_367 = 0 ; if ( VAR_368 -> VAR_369 ) { METHOD_34 ( "deblocking_filter_override_enabled_flag" , VAR_370 , VAR_371 , 1 ) ; VAR_372 -> VAR_373 = VAR_374 ; METHOD_35 ( "pic_disable_deblocking_filter_flag" , VAR_375 , VAR_376 , 1 ) ; VAR_377 -> VAR_378 = VAR_379 ; if ( ! VAR_380 -> VAR_381 ) { METHOD_36 ( "pps_beta_offset_div2" , VAR_382 , VAR_383 ) ; VAR_384 -> VAR_385 = VAR_386 ; METHOD_37 ( "pps_tc_offset_div2" , VAR_387 , VAR_388 ) ; VAR_389 -> VAR_390 = VAR_391 ; } } METHOD_38 ( "pps_scaling_list_data_present_flag" , VAR_392 , VAR_393 , 1 ) ; VAR_394 -> VAR_395 = VAR_396 ; if ( VAR_397 -> VAR_398 ) { METHOD_39 ( VAR_399 -> VAR_400 ) ; METHOD_40 ( VAR_401 , VAR_402 -> VAR_403 ) ; } METHOD_41 ( "lists_modification_present_flag" , VAR_404 , VAR_405 , 1 ) ; VAR_406 -> VAR_407 = VAR_408 ; METHOD_42 ( "log2_parallel_merge_level_minus2" , VAR_409 , VAR_410 ) ; VAR_411 -> VAR_412 = VAR_413 + 2 ; METHOD_43 ( "slice_header_extension_present_flag" , VAR_414 , VAR_415 , 1 ) ; VAR_416 -> VAR_417 = VAR_418 ; METHOD_44 ( "pps_extension_flag" , VAR_419 , VAR_420 , 1 ) ; if ( ( TYPE_13 * ) VAR_421 -> VAR_422 > VAR_423 -> VAR_424 ) return VAR_425 ; VAR_426 -> VAR_427 = 1 ; return VAR_428 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 = ( 1u << VAR_3 ) | ( 1u << VAR_4 ) | ( 1u << VAR_5 ) |  ( 1u << VAR_6 ) | ( 1u << VAR_7 ) ;  if ( ( VAR_8 -> VAR_9 & ( VAR_10 | VAR_11 ) ) == ( VAR_12 | VAR_13 ) ) VAR_14 |= 1u << VAR_15 ; if ( METHOD_1 ( VAR_16 ) -> VAR_17 . VAR_18 ) VAR_19 = ~ 0 ; if ( VAR_20 ) VAR_21 &= ~ ( 1u << VAR_22 ) ; if ( VAR_23 -> VAR_24 ) VAR_25 &= ~ ( 1u << VAR_26 ) ; if ( METHOD_2 ( VAR_27 ) ) VAR_28 |= METHOD_3 ( VAR_29 ) -> VAR_30 ; METHOD_4 ( VAR_31 , VAR_32 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , const TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; const TYPE_6 * VAR_5 = VAR_6 ; TYPE_7 * VAR_7 ; if ( VAR_8 -> VAR_9 ) { TYPE_8 VAR_10 ; TYPE_9 const * VAR_11 = "" ; METHOD_1 ( ( VAR_12 , "fh[" ) ) ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; VAR_16 ++ ) { METHOD_2 ( ( VAR_17 , "%s%x" , VAR_18 , VAR_19 [ VAR_20 ] ) ) ; VAR_21 = ":" ; } METHOD_3 ( ( VAR_22 , "]" ) ) ; return ; } METHOD_4 ( ( const TYPE_10 * ) VAR_23 , VAR_24 , & VAR_25 , & VAR_26 , VAR_27 , & VAR_28 , 0 ) ; if ( VAR_29 ) {  static TYPE_11 VAR_30 [ VAR_31 + 1 ] ;   METHOD_5 ( VAR_32 , VAR_33 , VAR_34 ) ;   VAR_35 [ sizeof ( VAR_36 ) - 1 ] = '\\0' ;  VAR_37 = METHOD_6 ( VAR_38 , '' ) ; if ( VAR_39 ) * VAR_40 = '\\0' ; METHOD_7 ( ( VAR_41 , "fh%s/" , VAR_42 ) ) ; } else { METHOD_8 ( ( VAR_43 , "fh%d,%d/" , VAR_44 . VAR_45 . VAR_46 , VAR_47 . VAR_48 . VAR_49 ) ) ; } if ( VAR_50 . VAR_51 . VAR_52 == 257 ) METHOD_9 ( ( VAR_53 , "%s" , VAR_54 . VAR_55 ) ) ; else METHOD_10 ( ( VAR_56 , "%ld" , ( TYPE_12 ) VAR_57 ) ) ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 ( TYPE_2 * VAR_3 , TYPE_3 * VAR_4 , TYPE_4 VAR_5 , TYPE_5 VAR_6 , TYPE_6 VAR_7 , struct STRUCT_OR_UNION_1 * VAR_8 ) , TYPE_7 * VAR_9 , TYPE_8 VAR_10 , TYPE_9 VAR_11 , TYPE_10 VAR_12 ,  TYPE_11 VAR_13 , TYPE_12 VAR_14 , unsigned TYPE_13 VAR_15 )  { struct STRUCT_OR_UNION_2 * VAR_16 ; TYPE_14 VAR_17 ; if ( ( VAR_18 = METHOD_1 ( & VAR_19 -> VAR_20 ) ) == VAR_21 ) { VAR_22 = METHOD_2 ( VAR_23 , VAR_24 + VAR_25 + VAR_26 + 20 , ( VAR_27 & VAR_28 ) , & VAR_29 ) ; if ( VAR_30 == VAR_31 ) return - VAR_32 ; METHOD_3 ( VAR_33 , VAR_34 ) ; METHOD_4 ( VAR_35 , VAR_36 + VAR_37 ) ; METHOD_5 ( VAR_38 ) ; VAR_39 -> VAR_40 = VAR_41 -> VAR_42 + VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; VAR_47 -> VAR_48 = 0 ; } VAR_49 = METHOD_6 ( VAR_50 , VAR_51 , VAR_52 , VAR_53 , ( VAR_54 - VAR_55 ) ) ; if ( ! VAR_56 ) { struct STRUCT_OR_UNION_3 VAR_57 ; METHOD_7 ( VAR_58 ) -> VAR_59 = ( VAR_60 - VAR_61 - sizeof ( struct STRUCT_OR_UNION_4 ) ) & ~ 7 ; METHOD_8 ( VAR_62 ) -> VAR_63 = VAR_64 ;  METHOD_9 ( & VAR_65 ) ;  METHOD_10 ( VAR_66 ) -> VAR_67 = VAR_68 . VAR_69 ; METHOD_11 ( & VAR_70 -> VAR_71 , VAR_72 ) ; return 0 ; } METHOD_12 ( VAR_73 ) ; return VAR_74 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 [ 2 ] , unsigned TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; TYPE_3 VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 ) ; METHOD_2 ( & VAR_9 -> VAR_10 ) ; METHOD_3 ( & VAR_11 -> VAR_12 ) ; METHOD_4 ( & VAR_13 -> VAR_14 ) ; METHOD_5 ( VAR_15 -> VAR_16 , VAR_17 [ 0 ] -> VAR_18 ) ; VAR_19 = METHOD_6 ( & VAR_20 -> VAR_21 , VAR_22 -> VAR_23 , VAR_24 [ 1 ] -> VAR_25 ) ; if ( VAR_26 < 0 ) return VAR_27 ; METHOD_7 ( & VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; METHOD_8 ( & VAR_36 -> VAR_37 , VAR_38 , 0 ) ; METHOD_9 ( & VAR_39 -> VAR_40 , VAR_41 , 0 ) ; METHOD_10 ( VAR_42 -> VAR_43 , VAR_44 ) ; VAR_45 -> VAR_46 [ VAR_47 - 1 ] = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 ; METHOD_11 ( VAR_52 ) ; VAR_53 = METHOD_12 ( VAR_54 , VAR_55 , VAR_56 ) ; if ( VAR_57 )  return VAR_58 ;  VAR_59 = METHOD_13 ( VAR_60 ) ; if ( VAR_61 ) goto VAR_62 ; VAR_63 = METHOD_14 ( VAR_64 , VAR_65 [ 0 ] , VAR_66 ) ; if ( VAR_67 ) goto VAR_68 ; VAR_69 = METHOD_15 ( VAR_70 , VAR_71 [ 1 ] , VAR_72 ) ; if ( VAR_73 ) goto VAR_74 ; METHOD_16 ( & VAR_75 -> VAR_76 , VAR_77 + METHOD_17 ( VAR_78 ) ) ; return 0 ; VAR_79 : METHOD_18 ( VAR_80 , VAR_81 ) METHOD_19 ( VAR_82 ) ;  return VAR_83 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  TYPE_5 * const VAR_4 [ 4 ] = { VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 ,  VAR_11 -> VAR_12 } ;  const TYPE_6 VAR_13 [ 4 ] = { VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ,  VAR_20 -> VAR_21 } ; TYPE_7 VAR_22 ; for ( VAR_23 = 0 ; VAR_24 < VAR_25 ; ++ VAR_26 ) {  struct STRUCT_OR_UNION_0 * const VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 ] ;  METHOD_1 ( & VAR_31 -> VAR_32 , VAR_33 [ VAR_34 ] , VAR_35 [ VAR_36 ] , VAR_37 , VAR_38 , VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_2 * VAR_9 = VAR_10 -> VAR_11 . VAR_12 ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 -> VAR_15 . VAR_16 ; VAR_17 = METHOD_2 ( VAR_18 , & VAR_19 -> VAR_20 ) ; if ( ! VAR_21 ) return 0 ; VAR_22 = METHOD_3 ( VAR_23 , & VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_4 ( * VAR_28 ++ ) ; VAR_29 -> VAR_30 = METHOD_5 ( * VAR_31 ++ ) ;  VAR_32 = VAR_33 -> VAR_34 = METHOD_6 ( * VAR_35 ++ ) ;  if ( VAR_36 -> VAR_37 != VAR_38 -> VAR_39 ) return 0 ; VAR_40 = ( TYPE_4 * ) VAR_41 - VAR_42 -> VAR_43 ; VAR_44 = VAR_45 -> VAR_46 + VAR_47 -> VAR_48 . VAR_49 + VAR_50 -> VAR_51 - VAR_52 ; if ( VAR_53 < METHOD_7 ( VAR_54 ) * 4 ) return 0 ; if ( VAR_55 -> VAR_56 > VAR_57 ) { VAR_58 -> VAR_59 = VAR_60 ; VAR_61 = VAR_62 -> VAR_63 = VAR_64 ; } VAR_65 -> VAR_66 [ 0 ] . VAR_67 = ( TYPE_5 * ) VAR_68 ; VAR_69 -> VAR_70 [ 0 ] . VAR_71 = VAR_72 -> VAR_73 - VAR_74 ; VAR_75 = 0 ; while ( VAR_76 > VAR_77 -> VAR_78 [ VAR_79 ] . VAR_80 ) { VAR_81 -= VAR_82 -> VAR_83 [ VAR_84 ] . VAR_85 ; VAR_86 ++ ; VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = METHOD_8 ( VAR_91 -> VAR_92 [ VAR_93 ] ) ; VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 = VAR_98 ; } VAR_99 -> VAR_100 [ VAR_101 ] . VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 + 1 ; return 1 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 )  {  switch ( VAR_3 -> VAR_4 ) {  case 2 : VAR_5 -> VAR_6 = ( TYPE_2 ) VAR_7 ; break ; case 4 : VAR_8 -> VAR_9 = ( TYPE_3 ) VAR_10 ; break ; case 8 : VAR_11 -> VAR_12 = VAR_13 ; break ; default : METHOD_1 ( 1 , "unsupportedeipassignmentsize\\n" ) ; }  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  VAR_3 -> VAR_4 = va_arg ( VAR_5 , TYPE_4 ) ; return VAR_6 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 TYPE_4 , VAR_3 * VAR_4 , VAR_5 * VAR_6 TYPE_5 , TYPE_6 * * VAR_7 , TYPE_7 VAR_8 ) { TYPE_8 VAR_9 , VAR_10 ; TYPE_9 * VAR_11 ; if ( VAR_12 % 2 ) VAR_13 += 2 - ( VAR_14 % 2 ) ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ;  if ( VAR_18 <= 0 ) { if ( VAR_19 ) * VAR_20 = METHOD_2 ( "" ) ; return VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 | VAR_28 ) ; VAR_29 = ( TYPE_10 ) METHOD_4 ( VAR_30 ) ; METHOD_5 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 * 2 , VAR_36 ) ; if ( VAR_37 ) * VAR_38 = VAR_39 ; else METHOD_6 ( VAR_40 ) ; return VAR_41 + ( VAR_42 + 1 ) * 2 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 = STRUCT_OR_UNION_6 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_7 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_8 -> VAR_7 ) ; VAR_8 * VAR_9 ; if ( METHOD_2 ( STRUCT_OR_UNION_9 ) -> VAR_10 & VAR_11 ) return 0 ; if ( VAR_12 -> VAR_13 + VAR_14 -> VAR_15 > METHOD_3 ( STRUCT_OR_UNION_10 ) && ! METHOD_4 ( VAR_16 ) ) return 0 ; if ( METHOD_5 ( VAR_17 ) == VAR_18 )  VAR_19 = VAR_20 ;  else  VAR_21 = VAR_22 ;  return METHOD_6 ( VAR_23 , STRUCT_OR_UNION_11 , STRUCT_OR_UNION_12 -> VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 , 0 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; TYPE_4 VAR_10 ; TYPE_5 VAR_11 ; METHOD_1 ( "sock=%psk=%plen=%zuflags=%d\\n" , STRUCT_OR_UNION_7 , VAR_12 , VAR_13 , VAR_14 ) ; VAR_15 = METHOD_2 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; if ( ! VAR_20 ) return VAR_21 ;  VAR_22 -> VAR_23 = 0 ;  VAR_24 = VAR_25 -> VAR_26 ; if ( VAR_27 < VAR_28 ) { VAR_29 -> VAR_30 |= VAR_31 ; VAR_32 = VAR_33 ; } VAR_34 = METHOD_3 ( VAR_35 , 0 , VAR_36 -> VAR_37 , VAR_38 ) ; METHOD_4 ( VAR_39 , VAR_40 ) ; return VAR_41 ? : VAR_42 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 ; TYPE_3 VAR_1 ; VAR_2 * VAR_3 ; TYPE_4 VAR_4 [ 80 ] ; TYPE_5 VAR_5 [ 100 ] ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; VAR_9 = sizeof ( VAR_10 ) / sizeof ( VAR_11 [ 0 ] ) ; for ( VAR_12 = 0 ; VAR_13 < VAR_14 ; VAR_15 ++ ) * VAR_16 [ VAR_17 ] . VAR_18 = VAR_19 [ VAR_20 ] . VAR_21 ; VAR_22 = METHOD_1 ( "-config" ) ; if ( VAR_23 && VAR_24 < VAR_25 - 1 ) { VAR_26 = VAR_27 [ VAR_28 + 1 ] ; METHOD_2 ( "\tdefaultfile:%s\\n" , VAR_29 ) ; } else VAR_30 = VAR_31 ; VAR_32 = METHOD_3 ( VAR_33 , "r" ) ; if ( VAR_34 ) { while ( ! METHOD_4 ( VAR_35 ) ) { VAR_36 = VAR_37 ;  if ( METHOD_5 ( VAR_38 , "%79s%[^\\n]\\n" , VAR_39 , VAR_40 ) == 2 )  { if ( VAR_41 [ 0 ] == \'"\' ) { VAR_42 = true ; VAR_43 = strlen ( VAR_44 ) ; VAR_45 = ( TYPE_9 * ) malloc ( VAR_46 ) ; VAR_47 [ VAR_48 - 1 ] = 0 ; strcpy ( VAR_49 , VAR_50 + 1 ) ; } else if ( VAR_51 [ 0 ] == '0' && VAR_52 [ 1 ] == 'x' ) sscanf ( VAR_53 + 2 , "%x" , & VAR_54 ) ; else sscanf ( VAR_55 , "%i" , & VAR_56 ) ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 ; VAR_60 ++ ) if ( ! strcmp ( VAR_61 , VAR_62 [ VAR_63 ] . name ) ) { if ( ! VAR_64 ) * VAR_65 [ VAR_66 ] . VAR_67 = VAR_68 ; else * VAR_69 [ VAR_70 ] . VAR_71 = ( TYPE_10 ) VAR_72 ; break ; } } } fclose ( VAR_73 ) ; } for ( VAR_74 = 0 ; VAR_75 < VAR_76 ; VAR_77 ++ ) { if ( VAR_78 [ VAR_79 ] . scantranslate ) { VAR_80 = * VAR_81 [ VAR_82 ] . VAR_83 ; VAR_84 [ VAR_85 ] . untranslated = VAR_86 ; * VAR_87 [ VAR_88 ] . VAR_89 = scantokey [ VAR_90 ] ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; VAR_7 = 0 ; if ( * VAR_8 == 0 ) { * VAR_9 = 0 ; VAR_10 = 0 ; } else VAR_11 = METHOD_1 ( * VAR_12 , * VAR_13 , VAR_14 ) ; while ( * VAR_15 == 0 && VAR_16 == * VAR_17 && ! VAR_18 ) { TYPE_7 VAR_19 = * VAR_20 - * VAR_21 ; TYPE_8 VAR_22 = ( * VAR_23 + 1023 ) & ~ 1023U ; TYPE_9 VAR_24 ; if ( VAR_25 < ( TYPE_10 ) * VAR_26 + 160 ) VAR_27 <<= 1 ; * VAR_28 = METHOD_2 ( VAR_29 , VAR_30 , VAR_31 ) ; if ( * VAR_32 == VAR_33 ) { if ( * VAR_34 >= * VAR_35 ) return ( 0 ) ; * VAR_36 = METHOD_3 ( VAR_37 , * VAR_38 , VAR_39 ) ; VAR_40 = 1 ; } * VAR_41 = * VAR_42 ; * VAR_43 += VAR_44 ; * VAR_45 -= VAR_46 ; VAR_47 = VAR_48 ;  VAR_49 = METHOD_4 ( * VAR_50 , * VAR_51 , VAR_52 ) ;  if ( VAR_53 >= 0 ) VAR_54 += VAR_55 ; } return ( VAR_56 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , const TYPE_3 * VAR_3 ) {  TYPE_4 VAR_4 = 1 ;  TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ;  TYPE_8 VAR_8 ;  TYPE_9 * VAR_9 ;  VAR_10 * VAR_11 , * VAR_12 ;  TYPE_10 VAR_13 ; TYPE_11 VAR_14 ; METHOD_1 ( VAR_15 >= VAR_16 ) ; METHOD_2 ( * ( VAR_17 - 1 ) == '{' ) ; METHOD_3 ( * VAR_18 == '}' || * VAR_19 == '!' || * VAR_20 == ':' ) ;  VAR_21 = METHOD_4 ( VAR_22 , VAR_23 - VAR_24 , VAR_25 ) ;  if ( VAR_26 == VAR_27 ) return VAR_28 ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 ; VAR_38 ++ ) { if ( ! METHOD_8 ( METHOD_9 ( VAR_39 , VAR_40 , VAR_41 ) ) ) { VAR_42 = 0 ; break ; } } METHOD_10 ( VAR_43 ) ; if ( VAR_44 ) { METHOD_11 ( VAR_45 , VAR_46 , "f-string:emptyexpressionnotallowed" ) ; return VAR_47 ; } VAR_48 = VAR_49 - VAR_50 ; VAR_51 = METHOD_12 ( VAR_52 + 3 ) ; if ( VAR_53 == VAR_54 )  return VAR_55 ;  VAR_56 [ 0 ] = '(' ; METHOD_13 ( VAR_57 + 1 , VAR_58 , VAR_59 ) ; VAR_60 [ VAR_61 + 1 ] = ')' ; VAR_62 [ VAR_63 + 2 ] = 0 ; VAR_64 . VAR_65 = VAR_66 ;  VAR_67 = METHOD_14 ( "<fstring>" ) ;  VAR_68 = METHOD_15 ( VAR_69 , VAR_70 , VAR_71 , & VAR_72 , VAR_73 -> VAR_74 , VAR_75 -> VAR_76 ) ; METHOD_16 ( VAR_77 ) ;  METHOD_17 ( VAR_78 ) ;  if ( ! VAR_79 ) return VAR_80 ; return VAR_81 -> VAR_82 . VAR_83 . VAR_84 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  { WLog_DBG ( VAR_2 , "%s(Len:%" PRIu16 "MaxLen:%" PRIu16 "BufferOffset:%" PRIu32 ")" , VAR_3 , VAR_4 -> VAR_5 , VAR_6 -> VAR_7 , VAR_8 -> VAR_9 ) ; if ( VAR_10 -> VAR_11 > 0 ) METHOD_1 ( VAR_12 , VAR_13 , VAR_14 -> VAR_15 , VAR_16 -> VAR_17 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) {  TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ;  while ( VAR_5 && METHOD_1 ( VAR_6 -> VAR_7 , VAR_8 ) ) VAR_9 = VAR_10 -> VAR_11 ; return VAR_12 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_3 ) ; TYPE_2 VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 , VAR_7 ) ; if ( VAR_8 < 0 ) goto VAR_9 ; VAR_10 = - VAR_11 ; if ( ! STRUCT_OR_UNION_3 -> VAR_12 -> METHOD_3 ) goto VAR_13 ; METHOD_4 ( & STRUCT_OR_UNION_4 -> VAR_14 ) ; VAR_15 = STRUCT_OR_UNION_5 -> VAR_16 -> METHOD_5 ( STRUCT_OR_UNION_6 , VAR_17 ) ; if ( VAR_18 == 0 )  METHOD_6 ( VAR_19 , & STRUCT_OR_UNION_7 -> VAR_20 ) ;  METHOD_7 ( & STRUCT_OR_UNION_8 -> VAR_21 ) ; if ( VAR_22 < 0 ) goto VAR_23 ; VAR_24 : return VAR_25 ; VAR_26 : METHOD_8 ( STRUCT_OR_UNION_9 ) ; VAR_27 = METHOD_9 ( VAR_28 ) ; goto VAR_29 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_0 VAR_3 ; TYPE_4 VAR_4 ; if ( METHOD_1 ( VAR_5 , & VAR_6 , sizeof ( VAR_7 ) ) == - 1 ) { return - 1 ; } VAR_8 = METHOD_2 ( VAR_9 . VAR_10 ) ; if ( ! ( VAR_11 <= * VAR_12 ) ) METHOD_3 ( "PLEN%dtype%dlen%d\\n" , VAR_13 , VAR_14 . VAR_15 , * VAR_16 ) ;  METHOD_4 ( VAR_17 <= * VAR_18 ) ;  * VAR_19 = VAR_20 ; if ( ( * VAR_21 ) && ( METHOD_5 ( VAR_22 , VAR_23 , * VAR_24 ) == - 1 ) ) { return - 1 ; } return VAR_25 . VAR_26 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_1 VAR_7 ; TYPE_2 VAR_8 ; METHOD_1 ( VAR_9 ) ; VAR_10 = VAR_11 -> VAR_12 ; METHOD_2 ( & VAR_13 , VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 ) ; VAR_17 = VAR_18 -> VAR_19 ; VAR_20 -> VAR_21 = 1 ; if ( VAR_22 -> VAR_23 ) { VAR_24 = & VAR_25 [ 0 ] ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 . VAR_29 ; VAR_30 ++ , VAR_31 ++ ) { if ( METHOD_4 ( VAR_32 -> VAR_33 ) == VAR_34 -> VAR_35 ) { if ( VAR_36 -> VAR_37 == VAR_38 -> VAR_39 ) { VAR_40 -> VAR_41 = 0 ; break ; } VAR_42 -> VAR_43 ++ ; } else if ( METHOD_5 ( VAR_44 -> VAR_45 ) > VAR_46 -> VAR_47 ) { VAR_48 -> VAR_49 = 0 ; break ; } } if ( VAR_50 == VAR_51 . VAR_52 ) { METHOD_6 ( VAR_53 ) ; return 0 ; } } else { VAR_54 = & VAR_55 [ 0 ] ; VAR_56 = 0 ; } VAR_57 -> VAR_58 = 0 ; VAR_59 = 0 ; for ( ; VAR_60 < VAR_61 . VAR_62 ; VAR_63 ++ , VAR_64 ++ ) { if ( METHOD_7 ( VAR_65 -> VAR_66 ) != VAR_67 -> VAR_68 ) { VAR_69 -> VAR_70 = METHOD_8 ( VAR_71 -> VAR_72 ) ; VAR_73 -> VAR_74 = 0 ; } if ( VAR_75 -> VAR_76 & VAR_77 ) continue ; if ( VAR_78 -> VAR_79 & VAR_80 ) { TYPE_3 * VAR_81 = METHOD_9 ( VAR_82 , VAR_83 ) ; VAR_84 = VAR_85 -> METHOD_10 ( VAR_86 , VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , ( TYPE_4 ) VAR_91 -> VAR_92 , METHOD_11 ( VAR_93 -> VAR_94 ) , & VAR_95 -> VAR_96 [ VAR_97 -> VAR_98 ] ) ; if ( VAR_99 ) return VAR_100 ; } else { TYPE_5 * VAR_101 = METHOD_12 ( VAR_102 , VAR_103 ) ; TYPE_6 VAR_104 = METHOD_13 ( VAR_105 -> VAR_106 ) ; if ( VAR_107 -> VAR_108 ) { TYPE_7 VAR_109 ; METHOD_14 ( ( TYPE_8 * ) & VAR_110 , 0 , sizeof ( VAR_111 ) ) ; VAR_112 . VAR_113 = VAR_114 -> VAR_115 ; VAR_116 . VAR_117 = VAR_118 ; VAR_119 . VAR_120 = VAR_121 ;  VAR_122 . VAR_123 = METHOD_15 ( VAR_124 , VAR_125 | VAR_126 ) ;  VAR_127 . VAR_128 = METHOD_16 ( VAR_129 -> VAR_130 ) ; VAR_131 . VAR_132 = METHOD_17 ( VAR_133 . VAR_134 -> VAR_135 , VAR_136 ) ; VAR_137 = METHOD_18 ( & VAR_138 ) ; if ( VAR_139 ) return VAR_140 ; VAR_141 = VAR_142 -> METHOD_19 ( VAR_143 , VAR_144 -> VAR_145 , VAR_146 -> VAR_147 , ( TYPE_9 ) VAR_148 -> VAR_149 , VAR_150 , VAR_151 . VAR_152 ) ; METHOD_20 ( VAR_153 . VAR_154 ) ; } else { VAR_155 = VAR_156 -> METHOD_21 ( VAR_157 , VAR_158 -> VAR_159 , VAR_160 -> VAR_161 , ( TYPE_10 ) VAR_162 -> VAR_163 , VAR_164 , VAR_165 ) ; } if ( VAR_166 ) return VAR_167 ; } if ( VAR_168 -> VAR_169 ) break ; VAR_170 -> VAR_171 ++ ; } METHOD_22 ( VAR_172 ) ; return VAR_173 ; }
asmlinkage long compat_sys_recvmmsg ( int fd , struct compat_mmsghdr __user * mmsg , unsigned int vlen , unsigned int flags , struct compat_timespec __user * timeout ) { int datagrams ; struct timespec ktspec ; if ( flags & MSG_CMSG_COMPAT ) return - EINVAL ;  if ( COMPAT_USE_64BIT_TIME )  return __sys_recvmmsg ( fd , ( struct mmsghdr __user * ) mmsg , vlen , flags | MSG_CMSG_COMPAT , ( struct timespec * ) timeout ) ; if ( timeout == NULL ) return __sys_recvmmsg ( fd , ( struct mmsghdr __user * ) mmsg , vlen , flags | MSG_CMSG_COMPAT , NULL ) ;  if ( get_compat_timespec ( & ktspec , timeout ) )  return - EFAULT ; datagrams = __sys_recvmmsg ( fd , ( struct mmsghdr __user * ) mmsg , vlen , flags | MSG_CMSG_COMPAT , & ktspec ) ;  if ( datagrams > 0 && put_compat_timespec ( & ktspec , timeout ) )  datagrams = - EFAULT ; return datagrams ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 ) ;  TYPE_1 VAR_4 ;  METHOD_2 ( VAR_5 -> VAR_6 < VAR_7 -> VAR_8 -> VAR_9 ) ;  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ,  & METHOD_4 ( VAR_13 , VAR_14 -> VAR_15 ) ) ;  if ( VAR_16 == VAR_17 ) {  METHOD_5 ( VAR_18 ) ; VAR_19 -> VAR_20 . VAR_21 += VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 . VAR_26 ++ ; } return ( TYPE_2 ) VAR_27 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; TYPE_3 VAR_14 ; if ( VAR_15 > VAR_16 ) VAR_17 = VAR_18 ; else if ( VAR_19 < VAR_20 ) VAR_21 -> VAR_22 |= VAR_23 ;  VAR_24 -> VAR_25 = 0 ;  METHOD_4 ( VAR_26 ) ; if ( VAR_27 -> VAR_28 ) { VAR_29 -> VAR_30 = 0 ; METHOD_5 ( & VAR_31 -> VAR_32 , VAR_33 , VAR_34 -> VAR_35 , 0 ) ; VAR_36 = METHOD_6 ( METHOD_7 ( & VAR_37 -> VAR_38 ) , & VAR_39 -> VAR_40 ) ; if ( VAR_41 ) goto VAR_42 ; } VAR_43 = METHOD_8 ( VAR_44 -> VAR_45 , VAR_46 -> VAR_47 , VAR_48 ) ; VAR_49 : METHOD_9 ( VAR_50 ) ; return VAR_51 ? : VAR_52 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_0 * VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 ) ; struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 -> VAR_10 ; VAR_11 * VAR_12 ; const TYPE_5 * VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ; VAR_19 = VAR_20 ? METHOD_3 ( VAR_21 ) : VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = METHOD_4 ( VAR_26 , ( TYPE_6 * ) VAR_27 , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ;  VAR_32 -> VAR_33 -> VAR_34 = VAR_35 ;  VAR_36 -> VAR_37 -> VAR_38 = VAR_39 ; VAR_40 -> VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 -> VAR_50 = VAR_51 ; return VAR_52 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 = 0 , VAR_3 = 0 ;  TYPE_4 * VAR_4 = VAR_5 ; const TYPE_5 * VAR_6 = VAR_7 ; if ( VAR_8 ) return METHOD_1 ( VAR_9 , VAR_10 , VAR_11 ) ; if ( METHOD_2 ( ) && ! METHOD_3 ( METHOD_4 ( ) , VAR_12 ) ) { VAR_13 += METHOD_5 ( VAR_14 , METHOD_6 ( ) , VAR_15 ) ; VAR_16 += 1 ; } VAR_17 = METHOD_7 ( "HOME" ) ; if ( METHOD_8 ( ) && VAR_18 ) { TYPE_6 * VAR_19 = METHOD_9 ( METHOD_10 ( "%s/.perfconfig" , VAR_20 ) ) ; if ( ! METHOD_11 ( VAR_21 , VAR_22 ) ) { VAR_23 += METHOD_12 ( VAR_24 , VAR_25 , VAR_26 ) ; VAR_27 += 1 ; } METHOD_13 ( VAR_28 ) ; }  VAR_29 = METHOD_14 ( "config" ) ;  if ( ! METHOD_15 ( VAR_30 , VAR_31 ) ) { VAR_32 += METHOD_16 ( VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 += 1 ; } METHOD_17 ( VAR_37 ) ; if ( VAR_38 == 0 ) return - 1 ; return VAR_39 ; }
static TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  struct STRUCT_OR_UNION_1 * VAR_1 ) {  struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 -> STRUCT_OR_UNION_3 ) ;  struct STRUCT_OR_UNION_4 VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 = VAR_8 -> VAR_9 -> STRUCT_OR_UNION_6 ; if ( METHOD_2 ( VAR_10 ) ) return 1 ;  if ( VAR_11 -> STRUCT_OR_UNION_7 != VAR_12 || VAR_13 -> VAR_14 < VAR_15 )  return 1 ; if ( VAR_16 -> VAR_17 == VAR_18 && ! VAR_19 -> VAR_20 . VAR_21 ) return 1 ;  return VAR_22 -> METHOD_3 ( VAR_23 , & VAR_24 ) >= 0 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ,  struct STRUCT_OR_UNION_1 * VAR_2 ) { if ( ( VAR_3 -> VAR_4 == 1 ) && ( VAR_5 -> VAR_6 [ 0 ] . VAR_7 == 1 ) ) { TYPE_2 VAR_8 = VAR_9 -> VAR_10 [ 0 ] . VAR_11 ; if ( VAR_12 == VAR_13 ) { TYPE_3 VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 ) ; if ( METHOD_2 ( VAR_18 , METHOD_3 ( ) ) ) return VAR_19 ; } else if ( VAR_20 == VAR_21 ) { TYPE_4 VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 , VAR_25 ) ; if ( METHOD_5 ( VAR_26 , METHOD_6 ( ) ) ) return VAR_27 ; } } if ( ! METHOD_7 ( VAR_28 ) ) return VAR_29 ;  if ( METHOD_8 ( VAR_30 -> VAR_31 , VAR_32 ) )  return VAR_33 ; return VAR_34 ; }
static TYPE_0 * * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * * VAR_1 = XCALLOC ( TYPE_3 * , VAR_2 -> VAR_3 + 1 ) ; TYPE_4 VAR_4 ; for ( VAR_5 = 0 ; VAR_6 < VAR_7 -> VAR_8 ; VAR_9 ++ )  {  VAR_10 [ VAR_11 ] = METHOD_1 ( TYPE_5 , 1 ) ; VAR_12 [ VAR_13 ] -> VAR_14 = VAR_15 -> VAR_16 [ VAR_17 ] . VAR_18 ; VAR_19 [ VAR_20 ] -> VAR_21 = CHECKED_XCALLOC ( unsigned TYPE_6 , VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ) ; METHOD_2 ( VAR_26 [ VAR_27 ] -> VAR_28 , VAR_29 -> VAR_30 [ VAR_31 ] . VAR_32 . VAR_33 , VAR_34 [ VAR_35 ] -> VAR_36 ) ; }  return VAR_37 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ;  TYPE_2 VAR_4 ;  TYPE_3 VAR_5 , VAR_6 = 0 ;  VAR_7 = METHOD_1 ( sizeof ( * VAR_8 ) , VAR_9 ) ;  if ( ! VAR_10 ) return - VAR_11 ; VAR_12 = 1 ;  if ( ( VAR_13 = METHOD_2 ( VAR_14 , VAR_15 [ VAR_16 ] . VAR_17 , & VAR_18 , 1 ) ) != 1 )  METHOD_3 ( "couldnotstoptheUSBcontrollerCPU." ) ; while ( ( VAR_19 = METHOD_4 ( VAR_20 , VAR_21 , & VAR_22 ) ) > 0 ) { METHOD_5 ( "writingtoaddress0x%04x(buffer:0x%02x%02x)\\n" , VAR_23 -> VAR_24 , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_6 ( VAR_30 , VAR_31 -> VAR_32 , VAR_33 -> VAR_34 , VAR_35 -> VAR_36 ) ; if ( VAR_37 != VAR_38 -> VAR_39 ) { METHOD_7 ( "errorwhiletransferringfirmware(transferredsize:%d,blocksize:%d)" , VAR_40 , VAR_41 -> VAR_42 ) ; VAR_43 = - VAR_44 ; break ; } } if ( VAR_45 < 0 ) { METHOD_8 ( "firmwaredownloadfailedat%dwith%d" , VAR_46 , VAR_47 ) ;  METHOD_9 ( VAR_48 ) ;  return VAR_49 ; } if ( VAR_50 == 0 ) {  VAR_51 = 0 ;   if ( VAR_52 || METHOD_10 ( VAR_53 , VAR_54 [ VAR_55 ] . VAR_56 , & VAR_57 , 1 ) != 1 ) {  METHOD_11 ( "couldnotrestarttheUSBcontrollerCPU." ) ; VAR_58 = - VAR_59 ; } } else VAR_60 = - VAR_61 ;  METHOD_12 ( VAR_62 ) ;  return VAR_63 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  { const TYPE_3 * VAR_2 = ( const TYPE_4 * ) VAR_3 ; TYPE_5 VAR_4 , VAR_5 ;  VAR_6 ++ ;  VAR_7 = METHOD_1 ( VAR_8 ) ; VAR_9 ++ ; VAR_10 = METHOD_2 ( VAR_11 ) ; VAR_12 ++ ; METHOD_3 ( ( VAR_13 , "CRCErr=%u" , ( VAR_14 << 16 ) + VAR_15 ) ) ;  VAR_16 = METHOD_4 ( VAR_17 ) ; VAR_18 ++ ;  VAR_19 = METHOD_5 ( VAR_20 ) ; VAR_21 ++ ; METHOD_6 ( ( VAR_22 , "FrameErr=%u" , ( VAR_23 << 16 ) + VAR_24 ) ) ;  VAR_25 = METHOD_7 ( VAR_26 ) ; VAR_27 ++ ;  VAR_28 = METHOD_8 ( VAR_29 ) ; VAR_30 ++ ; METHOD_9 ( ( VAR_31 , "HardOver=%u" , ( VAR_32 << 16 ) + VAR_33 ) ) ;  VAR_34 = METHOD_10 ( VAR_35 ) ; VAR_36 ++ ;  VAR_37 = METHOD_11 ( VAR_38 ) ; VAR_39 ++ ; METHOD_12 ( ( VAR_40 , "BufOver=%u" , ( VAR_41 << 16 ) + VAR_42 ) ) ;  VAR_43 = METHOD_13 ( VAR_44 ) ; VAR_45 ++ ;  VAR_46 = METHOD_14 ( VAR_47 ) ; VAR_48 ++ ; METHOD_15 ( ( VAR_49 , "Timeout=%u" , ( VAR_50 << 16 ) + VAR_51 ) ) ;  VAR_52 = METHOD_16 ( VAR_53 ) ; VAR_54 ++ ;  VAR_55 = METHOD_17 ( VAR_56 ) ; VAR_57 ++ ; METHOD_18 ( ( VAR_58 , "AlignErr=%u" , ( VAR_59 << 16 ) + VAR_60 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; VAR_9 * VAR_10 , * VAR_11 , * VAR_12 ; TYPE_7 VAR_13 ; TYPE_8 VAR_14 ; TYPE_9 VAR_15 ; TYPE_10 * VAR_16 ; VAR_17 = 0 ; VAR_18 = ( TYPE_11 ) VAR_19 ; if ( VAR_20 -> VAR_21 . VAR_22 != VAR_23 ) return 0 ; VAR_24 = VAR_25 -> VAR_26 ; VAR_27 = METHOD_1 ( & VAR_28 , VAR_29 , VAR_30 , & VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 ) ; if ( VAR_37 != VAR_38 ) { METHOD_2 ( VAR_39 , METHOD_3 ( "check_rpcsec_auth:failed" "inquire_context,stat=%u" ) , VAR_40 ) ; METHOD_4 ( VAR_41 , VAR_42 , VAR_43 -> VAR_44 , VAR_45 ) ; goto VAR_46 ; } VAR_47 = VAR_48 -> VAR_49 ; VAR_50 = METHOD_5 ( VAR_51 , VAR_52 , VAR_53 , & VAR_54 , & VAR_55 ) ; if ( VAR_56 == 0 ) goto VAR_57 ; VAR_58 = VAR_59 . VAR_60 ; METHOD_6 ( & VAR_61 , & VAR_62 ) ; if ( METHOD_7 ( VAR_63 , VAR_64 ) != 2 ) goto VAR_65 ; VAR_66 = METHOD_8 ( VAR_67 , VAR_68 , 0 ) ; VAR_69 = METHOD_9 ( VAR_70 , VAR_71 , 1 ) ; VAR_72 = METHOD_10 ( VAR_73 , VAR_74 ) ;  if ( METHOD_11 ( VAR_75 -> VAR_76 . VAR_77 , VAR_78 -> VAR_79 , VAR_80 -> VAR_81 ) == 0  && METHOD_12 ( "kadmin" , VAR_82 -> VAR_83 , VAR_84 -> VAR_85 ) == 0 ) { if ( METHOD_13 ( "history" , VAR_86 -> VAR_87 , VAR_88 -> VAR_89 ) == 0 ) goto VAR_90 ; else VAR_91 = 1 ; } VAR_92 : if ( ! VAR_93 ) { METHOD_14 ( VAR_94 , METHOD_15 ( "badserviceprincipal%.*s%s" ) , ( TYPE_12 ) VAR_95 , ( TYPE_13 * ) VAR_96 . VAR_97 , VAR_98 ) ; } METHOD_16 ( & VAR_99 , & VAR_100 ) ; METHOD_17 ( VAR_101 , VAR_102 ) ; VAR_103 : METHOD_18 ( & VAR_104 , & VAR_105 ) ; return VAR_106 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 * VAR_5 = VAR_6 ; TYPE_2 * VAR_7 ; TYPE_3 VAR_8 = 0 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 = METHOD_1 ( VAR_11 + VAR_12 -> VAR_13 , 16 ) ; TYPE_6 VAR_14 = VAR_15 + VAR_16 -> VAR_17 ; TYPE_7 VAR_18 = VAR_19 + VAR_20 -> VAR_21 ; TYPE_8 VAR_22 = VAR_23 + ( sizeof ( struct STRUCT_OR_UNION_3 ) * VAR_24 -> VAR_25 ) ; struct STRUCT_OR_UNION_4 * VAR_26 ;  if ( VAR_27 < VAR_28 ||  VAR_29 < VAR_30 || VAR_31 -> VAR_32 >= ( VAR_33 / sizeof ( struct STRUCT_OR_UNION_5 ) ) || VAR_34 < VAR_35 ) { METHOD_2 ( "overflowinexecarguments\\n" ) ; goto VAR_36 ; } VAR_37 = METHOD_3 ( VAR_38 , 1 ) ; if ( ! VAR_39 ) { METHOD_4 ( "Failedtoallocatestorageforcopying" "inbin/renderCLs.\\n" ) ; VAR_40 = - VAR_41 ; goto VAR_42 ; } VAR_43 = VAR_44 + VAR_45 ; VAR_46 -> VAR_47 = VAR_48 + VAR_49 ; VAR_50 -> VAR_51 = VAR_52 + VAR_53 ; VAR_54 -> VAR_55 = VAR_56 + VAR_57 ; VAR_58 -> VAR_59 = VAR_60 -> VAR_61 ; if ( METHOD_5 ( VAR_62 , ( TYPE_9 TYPE_10 * ) ( TYPE_11 ) VAR_63 -> VAR_64 , VAR_65 -> VAR_66 ) ) { VAR_67 = - VAR_68 ; goto VAR_69 ; } if ( METHOD_6 ( VAR_70 -> VAR_71 , ( TYPE_12 TYPE_13 * ) ( TYPE_14 ) VAR_72 -> VAR_73 , VAR_74 -> VAR_75 ) ) { VAR_76 = - VAR_77 ; goto VAR_78 ; } if ( METHOD_7 ( VAR_79 -> VAR_80 , ( TYPE_15 TYPE_16 * ) ( TYPE_17 ) VAR_81 -> VAR_82 , VAR_83 -> VAR_84 ) ) { VAR_85 = - VAR_86 ; goto VAR_87 ; } VAR_88 = METHOD_8 ( VAR_89 , VAR_90 , VAR_91 ) ; if ( METHOD_9 ( VAR_92 ) ) { METHOD_10 ( "Couldn\'tallocateBOforbinning\\n" ) ; VAR_93 = METHOD_11 ( VAR_94 ) ; goto VAR_95 ; } VAR_96 -> VAR_97 = & VAR_98 -> VAR_99 ; METHOD_12 ( & METHOD_13 ( & VAR_100 -> VAR_101 -> VAR_102 ) -> VAR_103 , & VAR_104 -> VAR_105 ) ; VAR_106 -> VAR_107 = VAR_108 -> VAR_109 -> VAR_110 + VAR_111 ; VAR_112 -> VAR_113 = VAR_114 ; VAR_115 -> VAR_116 = VAR_117 -> VAR_118 -> VAR_119 + VAR_120 ; VAR_121 -> VAR_122 = VAR_123 -> VAR_124 -> VAR_125 + VAR_126 ; VAR_127 -> VAR_128 = VAR_129 -> VAR_130 ; VAR_131 -> VAR_132 = VAR_133 -> VAR_134 -> VAR_135 + VAR_136 ; VAR_137 -> VAR_138 = VAR_139 -> VAR_140 -> VAR_141 + VAR_142 ; VAR_143 -> VAR_144 = VAR_145 -> VAR_146 ; VAR_147 = METHOD_14 ( VAR_148 , VAR_149 -> VAR_150 -> VAR_151 + VAR_152 , VAR_153 , VAR_154 ) ; if ( VAR_155 ) goto VAR_156 ; VAR_157 = METHOD_15 ( VAR_158 , VAR_159 ) ; if ( VAR_160 ) goto VAR_161 ; VAR_162 = METHOD_16 ( VAR_163 , VAR_164 -> VAR_165 , ~ 0ull , VAR_166 ) ; VAR_167 : METHOD_17 ( VAR_168 ) ; return VAR_169 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_2 -> STRUCT_OR_UNION_4 ; TYPE_1 VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 = METHOD_1 ( STRUCT_OR_UNION_9 ) ; struct STRUCT_OR_UNION_10 * VAR_8 = STRUCT_OR_UNION_11 -> VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; TYPE_4 VAR_14 = 0 ; METHOD_2 ( STRUCT_OR_UNION_12 -> VAR_15 ) ;  METHOD_3 ( VAR_16 -> VAR_17 ) ;  if ( METHOD_4 ( STRUCT_OR_UNION_13 -> VAR_18 , VAR_19 ) && ! METHOD_5 ( STRUCT_OR_UNION_14 ) && ! METHOD_6 ( STRUCT_OR_UNION_15 -> VAR_20 ) ) { do { VAR_21 = METHOD_7 ( VAR_22 , VAR_23 , VAR_24 ) ; } while ( VAR_25 == - VAR_26 && METHOD_8 ( STRUCT_OR_UNION_16 -> VAR_27 , & VAR_28 ) ) ; goto VAR_29 ; } METHOD_9 ( STRUCT_OR_UNION_17 ) ; VAR_30 = METHOD_10 ( STRUCT_OR_UNION_18 ) ; if ( STRUCT_OR_UNION_19 -> VAR_31 != VAR_32 || METHOD_11 ( STRUCT_OR_UNION_20 ) > VAR_33 ) { METHOD_12 ( STRUCT_OR_UNION_21 ) ; VAR_34 = VAR_35 ; goto VAR_36 ; } if ( STRUCT_OR_UNION_22 -> VAR_37 == VAR_38 >> VAR_39 ) VAR_40 = VAR_41 & ~ VAR_42 ; else VAR_43 = VAR_44 ; if ( METHOD_13 ( STRUCT_OR_UNION_23 ) ) { if ( ! METHOD_14 ( VAR_45 , METHOD_15 ( STRUCT_OR_UNION_24 ) , 0 , VAR_46 , VAR_47 , VAR_48 ) ) { METHOD_16 ( STRUCT_OR_UNION_25 ) ; VAR_49 = VAR_50 ; goto VAR_51 ; } } METHOD_17 ( STRUCT_OR_UNION_26 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_27 ) ) VAR_52 = VAR_53 ; else VAR_54 = VAR_55 ; VAR_56 : VAR_57 = METHOD_19 ( STRUCT_OR_UNION_28 , VAR_58 , METHOD_20 ( STRUCT_OR_UNION_29 ) ) ; if ( METHOD_21 ( VAR_59 ) ) { VAR_60 = VAR_61 ; goto VAR_62 ; } VAR_63 = METHOD_22 ( VAR_64 , VAR_65 , VAR_66 ) ; if ( ! VAR_67 && METHOD_23 ( STRUCT_OR_UNION_30 ) ) { if ( METHOD_24 ( VAR_68 , METHOD_25 ( STRUCT_OR_UNION_31 ) , 0 , VAR_69 , VAR_70 , VAR_71 ) ) { METHOD_26 ( STRUCT_OR_UNION_32 ) ; VAR_72 = VAR_73 ; METHOD_27 ( VAR_74 ) ; goto VAR_75 ; } METHOD_28 ( STRUCT_OR_UNION_33 , VAR_76 ) ; } METHOD_29 ( VAR_77 ) ; if ( VAR_78 == - VAR_79 && METHOD_30 ( STRUCT_OR_UNION_34 -> VAR_80 , & VAR_81 ) ) goto VAR_82 ; VAR_83 : VAR_84 = METHOD_31 ( VAR_85 ) ; VAR_86 :  METHOD_32 ( STRUCT_OR_UNION_35 -> VAR_87 ) ;  return VAR_88 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  if ( METHOD_1 ( VAR_3 , 8 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 TYPE_3 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 TYPE_7 VAR_5 , TYPE_8 TYPE_9 VAR_6 , TYPE_10 VAR_7 , TYPE_11 TYPE_12 VAR_8 ) { const struct STRUCT_OR_UNION_1 * VAR_9 ; struct STRUCT_OR_UNION_2 VAR_10 ; const TYPE_13 * VAR_11 ; const TYPE_14 * VAR_12 ; const struct STRUCT_OR_UNION_3 * VAR_13 ; TYPE_15 VAR_14 ; const TYPE_16 * VAR_15 ; METHOD_1 ( ( VAR_16 , "%s:" , METHOD_2 ( VAR_17 ) ) ) ; VAR_18 = ( const struct STRUCT_OR_UNION_4 * ) VAR_19 ; METHOD_3 ( * VAR_20 ) ; METHOD_4 ( & VAR_21 , VAR_22 , sizeof ( VAR_23 ) ) ; switch ( VAR_24 ) { case 1 : VAR_25 = METHOD_5 ( VAR_26 . VAR_27 , VAR_28 ) ; VAR_29 = VAR_30 ; VAR_31 = sizeof ( VAR_32 ) / sizeof ( VAR_33 [ 0 ] ) ; break ; case 2 : VAR_34 = METHOD_6 ( VAR_35 . VAR_36 , VAR_37 ) ; VAR_38 = VAR_39 ; VAR_40 = sizeof ( VAR_41 ) / sizeof ( VAR_42 [ 0 ] ) ; break ; case 3 : VAR_43 = METHOD_7 ( VAR_44 . VAR_45 , VAR_46 ) ; VAR_47 = VAR_48 ; VAR_49 = sizeof ( VAR_50 ) / sizeof ( VAR_51 [ 0 ] ) ; break ; case 4 : VAR_52 = METHOD_8 ( VAR_53 . VAR_54 , VAR_55 ) ; VAR_56 = VAR_57 ; VAR_58 = sizeof ( VAR_59 ) / sizeof ( VAR_60 [ 0 ] ) ; break ; default : VAR_61 = VAR_62 ; VAR_63 = VAR_64 ; VAR_65 = 0 ; break ; } if ( VAR_66 ) METHOD_9 ( ( VAR_67 , "%did=%s" , VAR_68 . VAR_69 , VAR_70 ) ) ; else METHOD_10 ( ( VAR_71 , "%did=%d" , VAR_72 . VAR_73 , VAR_74 . VAR_75 ) ) ; VAR_76 = ( const TYPE_17 * ) ( VAR_77 + 1 ) ; VAR_78 = ( const TYPE_18 * ) VAR_79 + VAR_80 ; while ( VAR_81 < VAR_82 && VAR_83 < VAR_84 ) {  if ( VAR_85 && VAR_86 ) {   VAR_87 = METHOD_11 ( VAR_88 , VAR_89 , ( VAR_90 < VAR_91 ) ? VAR_92 : VAR_93 ,  VAR_94 , VAR_95 ) ; } else VAR_96 = METHOD_12 ( VAR_97 , VAR_98 , ( VAR_99 < VAR_100 ) ? VAR_101 : VAR_102 ) ; } if ( VAR_103 < VAR_104 ) METHOD_13 ( ( VAR_105 , "..." ) ) ; return VAR_106 ; VAR_107 : METHOD_14 ( ( VAR_108 , "[|%s]" , METHOD_15 ( VAR_109 ) ) ) ; return VAR_110 ; }
METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 ) typedef struct { TYPE_3 * VAR_0 ; TYPE_4 VAR_1 ; } TYPE_5 ;  static TYPE_6  VAR_2 ( TYPE_7 * VAR_3 , TYPE_8 VAR_4 , TYPE_9 * VAR_5 ) { TYPE_10 VAR_6 ; TYPE_11 VAR_7 ; TYPE_12 VAR_8 ; VAR_9 * VAR_10 ; TYPE_13 * VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; METHOD_1 ( "GsmXsmpServer:accept_ice_connection()" ) ; VAR_18 = METHOD_2 ( VAR_19 , & VAR_20 ) ; if ( VAR_21 != VAR_22 ) { METHOD_3 ( "GsmXsmpServer:IceAcceptConnectionreturned%d" , VAR_23 ) ; return VAR_24 ; } VAR_25 = METHOD_4 ( VAR_26 ) ;  VAR_27 -> VAR_28 = VAR_29 ;  METHOD_5 ( VAR_30 -> VAR_31 -> VAR_32 , METHOD_6 ( VAR_33 ) , METHOD_7 ( VAR_34 ) ) ; METHOD_8 ( VAR_35 ) ; return VAR_36 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( - VAR_3 ) ; unsigned TYPE_1 VAR_4 ; unsigned TYPE_2 VAR_5 , VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; TYPE_3 * VAR_8 , * VAR_9 ; TYPE_4 VAR_10 ; TYPE_5 VAR_11 = sizeof ( struct STRUCT_OR_UNION_4 ) ; TYPE_6 VAR_12 ; TYPE_7 VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 ) -> VAR_16 ; if ( METHOD_3 ( VAR_17 -> VAR_18 <= VAR_19 ) ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , VAR_22 | VAR_23 ) ) { TYPE_8 VAR_24 = METHOD_5 ( VAR_25 ) -> VAR_26 ; if ( METHOD_6 ( VAR_27 & ~ ( VAR_28 | VAR_29 ) || ! ( VAR_30 & ( VAR_31 ) ) ) ) goto VAR_32 ; METHOD_7 ( VAR_33 ) -> VAR_34 = METHOD_8 ( VAR_35 -> VAR_36 , VAR_37 ) ; VAR_38 = VAR_39 ; goto VAR_40 ; } VAR_41 = VAR_42 -> VAR_43 - METHOD_9 ( VAR_44 ) ; VAR_45 = METHOD_10 ( VAR_46 , VAR_47 , VAR_48 -> VAR_49 - VAR_50 , 0 ) ; VAR_51 += VAR_52 -> VAR_53 ; * ( TYPE_9 * ) ( VAR_54 -> VAR_55 + VAR_56 ) = METHOD_11 ( VAR_57 ) ; VAR_58 -> VAR_59 = VAR_60 ;  if ( ( METHOD_12 ( VAR_61 ) < VAR_62 ) &&  METHOD_13 ( VAR_63 , VAR_64 , 0 , VAR_65 ) ) goto VAR_66 ; VAR_67 = METHOD_14 ( VAR_68 , & VAR_69 ) ; VAR_70 = * VAR_71 ; * VAR_72 = VAR_73 ; VAR_74 = METHOD_15 ( VAR_75 ) - METHOD_16 ( VAR_76 ) + VAR_77 ; VAR_78 = METHOD_17 ( VAR_79 ) ; METHOD_18 ( VAR_80 - VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 -> VAR_85 -= VAR_86 ; VAR_87 -> VAR_88 -= VAR_89 ; VAR_90 = ( struct STRUCT_OR_UNION_5 * ) ( METHOD_19 ( VAR_91 ) + VAR_92 ) ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = 0 ; METHOD_20 ( VAR_98 ) ; VAR_99 = METHOD_21 ( VAR_100 , VAR_101 ) ; VAR_102 : return VAR_103 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) {  TYPE_2 TYPE_3  TYPE_4 ( "refs/heads/git_tilde1" , ".git/foobar" ) ;   }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , TYPE_5 TYPE_6 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; union { TYPE_7 VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 VAR_8 ; } VAR_9 ; TYPE_8 VAR_10 = sizeof ( TYPE_9 ) ; TYPE_10 VAR_11 ; if ( METHOD_1 ( VAR_12 , VAR_13 ) ) return - VAR_14 ; if ( VAR_15 < 0 ) return - VAR_16 ; METHOD_2 ( & VAR_17 , 0 , sizeof ( VAR_18 ) ) ; switch ( VAR_19 ) { case VAR_20 : VAR_21 . VAR_22 = METHOD_3 ( VAR_23 , VAR_24 ) ; break ; case VAR_25 : VAR_26 . VAR_27 = METHOD_4 ( VAR_28 , VAR_29 ) ; break ; case VAR_30 : VAR_31 . VAR_32 = ! ! METHOD_5 ( VAR_33 , VAR_34 ) ; break ; case VAR_35 : VAR_36 . VAR_37 = VAR_38 -> VAR_39 ; break ; case VAR_40 : VAR_41 . VAR_42 = VAR_43 -> VAR_44 ; break ; case VAR_45 : VAR_46 . VAR_47 = VAR_48 -> VAR_49 ; break ; case VAR_50 : VAR_51 . VAR_52 = ! ! METHOD_6 ( VAR_53 , VAR_54 ) ; break ; case VAR_55 : VAR_56 . VAR_57 = VAR_58 -> VAR_59 ; break ; case VAR_60 : VAR_61 . VAR_62 = VAR_63 -> VAR_64 ; break ; case VAR_65 : VAR_66 . VAR_67 = VAR_68 -> VAR_69 ; break ; case VAR_70 : VAR_71 . VAR_72 = - METHOD_7 ( VAR_73 ) ; if ( VAR_74 . VAR_75 == 0 ) VAR_76 . VAR_77 = METHOD_8 ( & VAR_78 -> VAR_79 , 0 ) ; break ; case VAR_80 : VAR_81 . VAR_82 = ! ! METHOD_9 ( VAR_83 , VAR_84 ) ; break ; case VAR_85 : VAR_86 . VAR_87 = VAR_88 -> VAR_89 ; break ; case VAR_90 : VAR_91 . VAR_92 = VAR_93 -> VAR_94 ; break ; case VAR_95 : VAR_96 = sizeof ( VAR_97 . VAR_98 ) ; VAR_99 . VAR_100 . VAR_101 = ! ! METHOD_10 ( VAR_102 , VAR_103 ) ; VAR_104 . VAR_105 . VAR_106 = VAR_107 -> VAR_108 / VAR_109 ; break ; case VAR_110 : METHOD_11 ( "getsockopt" ) ; break ; case VAR_111 : VAR_112 . VAR_113 = METHOD_12 ( VAR_114 , VAR_115 ) && ! METHOD_13 ( VAR_116 , VAR_117 ) ; break ; case VAR_118 : VAR_119 . VAR_120 = METHOD_14 ( VAR_121 , VAR_122 ) ; break ; case VAR_123 : VAR_124 . VAR_125 = 0 ; if ( METHOD_15 ( VAR_126 , VAR_127 ) ) VAR_128 . VAR_129 |= VAR_130 ; if ( METHOD_16 ( VAR_131 , VAR_132 ) ) VAR_133 . VAR_134 |= VAR_135 ; if ( METHOD_17 ( VAR_136 , VAR_137 ) ) VAR_138 . VAR_139 |= VAR_140 ; if ( METHOD_18 ( VAR_141 , VAR_142 ) ) VAR_143 . VAR_144 |= VAR_145 ; if ( METHOD_19 ( VAR_146 , VAR_147 ) ) VAR_148 . VAR_149 |= VAR_150 ; if ( METHOD_20 ( VAR_151 , VAR_152 ) ) VAR_153 . VAR_154 |= VAR_155 ; if ( METHOD_21 ( VAR_156 , VAR_157 ) ) VAR_158 . VAR_159 |= VAR_160 ; break ; case VAR_161 : VAR_162 = sizeof ( struct STRUCT_OR_UNION_6 ) ; if ( VAR_163 -> VAR_164 == VAR_165 ) { VAR_166 . VAR_167 . VAR_168 = 0 ; VAR_169 . VAR_170 . VAR_171 = 0 ; } else { VAR_172 . VAR_173 . VAR_174 = VAR_175 -> VAR_176 / VAR_177 ; VAR_178 . VAR_179 . VAR_180 = ( ( VAR_181 -> VAR_182 % VAR_183 ) * 1000000 ) / VAR_184 ; } break ; case VAR_185 : VAR_186 = sizeof ( struct STRUCT_OR_UNION_7 ) ; if ( VAR_187 -> VAR_188 == VAR_189 ) { VAR_190 . VAR_191 . VAR_192 = 0 ; VAR_193 . VAR_194 . VAR_195 = 0 ; } else { VAR_196 . VAR_197 . VAR_198 = VAR_199 -> VAR_200 / VAR_201 ; VAR_202 . VAR_203 . VAR_204 = ( ( VAR_205 -> VAR_206 % VAR_207 ) * 1000000 ) / VAR_208 ; } break ; case VAR_209 : VAR_210 . VAR_211 = VAR_212 -> VAR_213 ; break ; case VAR_214 : VAR_215 . VAR_216 = 1 ; break ; case VAR_217 :  VAR_218 . VAR_219 = METHOD_22 ( VAR_220 , & STRUCT_OR_UNION_8 -> VAR_221 ) ? 1 : 0 ;  break ; case VAR_222 : { struct STRUCT_OR_UNION_9 VAR_223 ; if ( VAR_224 > sizeof ( VAR_225 ) ) VAR_226 = sizeof ( VAR_227 ) ; METHOD_23 ( VAR_228 -> VAR_229 , VAR_230 -> VAR_231 , & VAR_232 ) ; if ( METHOD_24 ( VAR_233 , & VAR_234 , VAR_235 ) ) return - VAR_236 ; goto VAR_237 ; } case VAR_238 : { TYPE_11 VAR_239 [ 128 ] ; if ( STRUCT_OR_UNION_10 -> VAR_240 -> METHOD_25 ( STRUCT_OR_UNION_11 , ( struct STRUCT_OR_UNION_12 * ) VAR_241 , & VAR_242 , 2 ) ) return - VAR_243 ; if ( VAR_244 < VAR_245 ) return - VAR_246 ; if ( METHOD_26 ( VAR_247 , VAR_248 , VAR_249 ) ) return - VAR_250 ; goto VAR_251 ; } case VAR_252 : VAR_253 . VAR_254 = VAR_255 -> VAR_256 == VAR_257 ; break ; case VAR_258 :  VAR_259 . VAR_260 = METHOD_27 ( VAR_261 , & STRUCT_OR_UNION_13 -> VAR_262 ) ? 1 : 0 ;  break ; case VAR_263 : return METHOD_28 ( STRUCT_OR_UNION_14 , VAR_264 , VAR_265 , VAR_266 ) ; case VAR_267 : VAR_268 . VAR_269 = VAR_270 -> VAR_271 ; break ; case VAR_272 : VAR_273 . VAR_274 = ! ! METHOD_29 ( VAR_275 , VAR_276 ) ; break ; case VAR_277 : VAR_278 . VAR_279 = ! ! METHOD_30 ( VAR_280 , VAR_281 ) ; break ; case VAR_282 : if ( ! STRUCT_OR_UNION_15 -> VAR_283 -> VAR_284 ) return - VAR_285 ; VAR_286 . VAR_287 = VAR_288 -> VAR_289 ; break ; case VAR_290 : VAR_291 . VAR_292 = ! ! METHOD_31 ( VAR_293 , VAR_294 ) ; break ; default : return - VAR_295 ; } if ( VAR_296 > VAR_297 ) VAR_298 = VAR_299 ; if ( METHOD_32 ( VAR_300 , & VAR_301 , VAR_302 ) ) return - VAR_303 ; VAR_304 : if ( METHOD_33 ( VAR_305 , VAR_306 ) ) return - VAR_307 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; TYPE_4 VAR_10 ; TYPE_5 VAR_11 ; METHOD_1 ( "sock%psk%plen%zu" , STRUCT_OR_UNION_7 , VAR_12 , VAR_13 ) ; if ( VAR_14 & ( VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_2 ( VAR_18 , VAR_19 , VAR_20 , & VAR_21 ) ; if ( ! VAR_22 ) {  if ( VAR_23 -> VAR_24 & VAR_25 ) {  VAR_26 -> VAR_27 = 0 ; return 0 ; } return VAR_28 ; } VAR_29 = VAR_30 -> VAR_31 ; if ( VAR_32 < VAR_33 ) { VAR_34 -> VAR_35 |= VAR_36 ; VAR_37 = VAR_38 ; } METHOD_3 ( VAR_39 ) ; VAR_40 = METHOD_4 ( VAR_41 , 0 , VAR_42 -> VAR_43 , VAR_44 ) ; if ( VAR_45 == 0 ) { METHOD_5 ( VAR_46 , VAR_47 , VAR_48 ) ; if ( METHOD_6 ( VAR_49 ) -> METHOD_7 ) METHOD_8 ( VAR_50 ) -> METHOD_9 ( VAR_51 , VAR_52 -> VAR_53 , & VAR_54 -> VAR_55 ) ;  else  VAR_56 -> VAR_57 = 0 ; } METHOD_10 ( VAR_58 , VAR_59 ) ; return VAR_60 ? : VAR_61 ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 VAR_2 = 0 ; if ( ! VAR_3 ) {  return VAR_4 ;  } while ( VAR_5 [ VAR_6 ] != 0 || VAR_7 [ VAR_8 + 1 ] != 0 ) { VAR_9 ++ ; } VAR_10 = METHOD_1 ( sizeof ( TYPE_4 ) * ( VAR_11 + 2 ) ) ; VAR_12 = 0 ; while ( VAR_13 [ VAR_14 ] != 0 || VAR_15 [ VAR_16 + 1 ] != 0 ) { VAR_17 [ VAR_18 ] = VAR_19 [ VAR_20 ] ; VAR_21 ++ ; } VAR_22 [ VAR_23 ++ ] = 0 ; VAR_24 [ VAR_25 ++ ] = 0 ; return VAR_26 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , const struct STRUCT_OR_UNION_0 * VAR_5 ) { if ( VAR_6 != VAR_7 ) { TYPE_6 VAR_8 ;  TYPE_7 * const VAR_9 [ 4 ] = { VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ,  VAR_16 -> VAR_17 } ;  const TYPE_8 VAR_18 [ 4 ] = { VAR_19 -> VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ,  VAR_25 -> VAR_26 } ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 ; ++ VAR_30 ) { struct STRUCT_OR_UNION_1 * const VAR_31 = & VAR_32 -> VAR_33 [ VAR_34 ] ; METHOD_1 ( & VAR_35 -> VAR_36 [ VAR_37 ] , VAR_38 [ VAR_39 ] , VAR_40 [ VAR_41 ] , VAR_42 , VAR_43 , VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; } } }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * * VAR_4 ) { TYPE_6 VAR_5 = VAR_6 ; TYPE_7 * VAR_7 = VAR_8 ; TYPE_8 * VAR_9 = VAR_10 , * VAR_11 = VAR_12 ; TYPE_9 VAR_13 , VAR_14 ;  TYPE_10 VAR_15 [ VAR_16 ] ;  unsigned TYPE_11 VAR_17 = sizeof ( VAR_18 ) ; * VAR_19 = VAR_20 ; VAR_21 = METHOD_1 ( 1 , sizeof ( * VAR_22 ) ) ; if ( VAR_23 == VAR_24 ) goto VAR_25 ;  METHOD_2 ( METHOD_3 ( VAR_26 ) , VAR_27 , & VAR_28 ,  VAR_29 ) ;  VAR_30 -> VAR_31 = METHOD_4 ( VAR_32 ) ;  if ( VAR_33 -> VAR_34 == VAR_35 ) { VAR_36 = VAR_37 ; goto VAR_38 ; }  METHOD_5 ( METHOD_6 ( VAR_39 ) , VAR_40 , & VAR_41 ,  VAR_42 ) ;  VAR_43 -> VAR_44 = METHOD_7 ( VAR_45 ) ;  if ( VAR_46 -> VAR_47 == VAR_48 ) { VAR_49 = VAR_50 ; goto VAR_51 ; } VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 , & VAR_57 , & VAR_58 , VAR_59 ) ; if ( VAR_60 ) goto VAR_61 ; VAR_62 = 0 ; if ( VAR_63 != VAR_64 ) { for ( VAR_65 = 0 ; VAR_66 [ VAR_67 ] != VAR_68 ; VAR_69 ++ ) VAR_70 ++ ; } if ( VAR_71 != VAR_72 ) { for ( VAR_73 = 0 ; VAR_74 [ VAR_75 ] != VAR_76 ; VAR_77 ++ ) VAR_78 ++ ; } if ( VAR_79 != 0 ) { VAR_80 -> VAR_81 = METHOD_9 ( ( TYPE_12 ) VAR_82 + 1 , sizeof ( * VAR_83 -> VAR_84 ) ) ; if ( VAR_85 -> VAR_86 == VAR_87 ) { VAR_88 = VAR_89 ; goto VAR_90 ; } VAR_91 = 0 ; if ( VAR_92 != VAR_93 ) { for ( VAR_94 = 0 ; VAR_95 [ VAR_96 ] != VAR_97 ; VAR_98 ++ ) VAR_99 -> VAR_100 [ VAR_101 ++ ] = VAR_102 [ VAR_103 ] ; METHOD_10 ( VAR_104 ) ; } if ( VAR_105 != VAR_106 ) { for ( VAR_107 = 0 ; VAR_108 [ VAR_109 ] != VAR_110 ; VAR_111 ++ ) VAR_112 -> VAR_113 [ VAR_114 ++ ] = VAR_115 [ VAR_116 ] ; METHOD_11 ( VAR_117 ) ; } VAR_118 -> VAR_119 [ VAR_120 ] = VAR_121 ; } else VAR_122 -> VAR_123 = VAR_124 ; VAR_125 = METHOD_12 ( VAR_126 , VAR_127 , VAR_128 , VAR_129 , & VAR_130 -> VAR_131 , & VAR_132 -> VAR_133 ) ; if ( VAR_134 ) goto VAR_135 ; * VAR_136 = VAR_137 ; VAR_138 = VAR_139 ; VAR_140 : METHOD_13 ( VAR_141 , VAR_142 ) ; return VAR_143 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ; VAR_15 = - VAR_16 ; if ( VAR_17 -> VAR_18 & ( VAR_19 - 1 ) ) goto VAR_20 ; if ( VAR_21 -> VAR_22 & ( VAR_23 - 1 ) ) goto VAR_24 ; if ( VAR_25 && ( ( VAR_26 -> VAR_27 & ( VAR_28 - 1 ) ) || ! METHOD_2 ( VAR_29 , ( TYPE_6 TYPE_7 * ) ( unsigned TYPE_8 ) VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ) ) goto VAR_34 ; if ( VAR_35 -> VAR_36 >= VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 + VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) goto VAR_45 ; VAR_46 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_47 , VAR_48 -> VAR_49 ) ; VAR_50 = VAR_51 -> VAR_52 >> VAR_53 ; VAR_54 = VAR_55 -> VAR_56 >> VAR_57 ; VAR_58 = - VAR_59 ; if ( VAR_60 > VAR_61 ) goto VAR_62 ; if ( ! VAR_63 ) VAR_64 -> VAR_65 &= ~ VAR_66 ; VAR_67 = VAR_68 = * VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 . VAR_88 && VAR_89 != VAR_90 . VAR_91 ) goto VAR_92 ; VAR_93 = - VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; ++ VAR_98 ) { struct STRUCT_OR_UNION_7 * VAR_99 = & STRUCT_OR_UNION_8 -> VAR_100 -> VAR_101 [ VAR_102 ] ; if ( VAR_103 == VAR_104 || ! VAR_105 -> VAR_106 ) continue ; if ( ! ( ( VAR_107 + VAR_108 <= VAR_109 -> VAR_110 ) || ( VAR_111 >= VAR_112 -> VAR_113 + VAR_114 -> VAR_115 ) ) ) goto VAR_116 ; } if ( ! ( VAR_117 . VAR_118 & VAR_119 ) ) VAR_120 . VAR_121 = VAR_122 ; VAR_123 = - VAR_124 ; if ( VAR_125 && ! VAR_126 . VAR_127 ) { VAR_128 . VAR_129 = VAR_130 ; VAR_131 . VAR_132 = VAR_133 -> VAR_134 ; if ( METHOD_4 ( & VAR_135 , VAR_136 ) ) goto VAR_137 ; } if ( ( VAR_138 . VAR_139 & VAR_140 ) && ! VAR_141 . VAR_142 ) { if ( METHOD_5 ( & VAR_143 ) < 0 ) goto VAR_144 ; }  if ( ! VAR_145 ) {  struct STRUCT_OR_UNION_9 * VAR_146 ; VAR_147 = - VAR_148 ; VAR_149 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_150 , sizeof ( struct STRUCT_OR_UNION_11 ) , VAR_151 ) ; if ( ! VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_7 ( VAR_155 , VAR_156 -> VAR_157 ) ; VAR_158 -> VAR_159 |= VAR_160 ; METHOD_8 ( VAR_161 , VAR_162 ) ; VAR_163 = STRUCT_OR_UNION_12 -> VAR_164 ; METHOD_9 ( STRUCT_OR_UNION_13 -> VAR_165 , VAR_166 ) ; METHOD_10 ( & STRUCT_OR_UNION_14 -> VAR_167 ) ; METHOD_11 ( STRUCT_OR_UNION_15 , VAR_168 ) ; METHOD_12 ( VAR_169 ) ; } VAR_170 = METHOD_13 ( STRUCT_OR_UNION_16 , & VAR_171 , VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 ) goto VAR_176 ; if ( VAR_177 ) { VAR_178 = METHOD_14 ( STRUCT_OR_UNION_17 , & VAR_179 ) ; if ( VAR_180 ) goto VAR_181 ; } else METHOD_15 ( STRUCT_OR_UNION_18 , & VAR_182 ) ; VAR_183 = - VAR_184 ; VAR_185 = METHOD_16 ( STRUCT_OR_UNION_19 -> VAR_186 , sizeof ( struct STRUCT_OR_UNION_20 ) , VAR_187 ) ; if ( ! VAR_188 ) goto VAR_189 ; if ( ! VAR_190 ) { VAR_191 . VAR_192 = VAR_193 ; METHOD_17 ( & VAR_194 . VAR_195 , 0 , sizeof ( VAR_196 . VAR_197 ) ) ; } METHOD_18 ( VAR_198 , & VAR_199 ) ; VAR_200 = STRUCT_OR_UNION_21 -> VAR_201 ; METHOD_19 ( STRUCT_OR_UNION_22 -> VAR_202 , VAR_203 ) ; METHOD_20 ( & STRUCT_OR_UNION_23 -> VAR_204 ) ; METHOD_21 ( STRUCT_OR_UNION_24 , VAR_205 , VAR_206 , VAR_207 ) ; if ( VAR_208 && VAR_209 . VAR_210 != VAR_211 -> VAR_212 >> VAR_213 ) METHOD_22 ( STRUCT_OR_UNION_25 ) ; METHOD_23 ( & VAR_214 , & VAR_215 ) ; METHOD_24 ( VAR_216 ) ; return 0 ; VAR_217 : METHOD_25 ( & VAR_218 , & VAR_219 ) ; VAR_220 : return VAR_221 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; struct STRUCT_OR_UNION_8 * VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; unsigned TYPE_3 VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_4 VAR_18 = - VAR_19 ; TYPE_5 VAR_20 ; TYPE_6 VAR_21 = 0 ;  METHOD_4 ( VAR_22 ) ;  VAR_23 -> VAR_24 = 0 ; for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 -> VAR_30 ; VAR_31 > 0 ; VAR_32 -- , VAR_33 ++ ) { unsigned TYPE_7 VAR_34 = VAR_35 -> VAR_36 ; TYPE_8 TYPE_9 * VAR_37 = VAR_38 -> VAR_39 ; while ( VAR_40 ) { VAR_41 = list_first_entry ( & VAR_42 -> VAR_43 , struct STRUCT_OR_UNION_11 , VAR_44 ) ; VAR_45 = VAR_46 -> VAR_47 ; while ( ! VAR_48 -> VAR_49 ) VAR_50 ++ ; VAR_51 = VAR_52 -> VAR_53 ; if ( ! VAR_54 ) { VAR_55 = METHOD_5 ( VAR_56 , VAR_57 ) ; if ( VAR_58 ) goto VAR_59 ; } VAR_60 = min_t ( unsigned TYPE_10 , VAR_61 , VAR_62 ) ; VAR_63 = METHOD_6 ( & VAR_64 -> VAR_65 , VAR_66 , VAR_67 , 1 ) ; VAR_68 = VAR_69 ; if ( VAR_70 < 0 ) goto VAR_71 ; if ( VAR_72 -> VAR_73 || VAR_74 < VAR_75 -> VAR_76 ) VAR_77 -= VAR_78 % VAR_79 ; VAR_80 = - VAR_81 ; if ( ! VAR_82 ) goto VAR_83 ; METHOD_7 ( & VAR_84 -> VAR_85 , VAR_86 , VAR_87 -> VAR_88 . VAR_89 , VAR_90 , VAR_91 -> VAR_92 ) ; VAR_93 = METHOD_8 ( VAR_94 -> VAR_95 ? METHOD_9 ( & VAR_96 -> VAR_97 ) : METHOD_10 ( & VAR_98 -> VAR_99 ) , & VAR_100 -> VAR_101 ) ; VAR_102 : METHOD_11 ( & VAR_103 -> VAR_104 ) ; if ( VAR_105 ) goto VAR_106 ; VAR_107 += VAR_108 ; VAR_109 += VAR_110 ; VAR_111 -= VAR_112 ; METHOD_12 ( VAR_113 , VAR_114 ) ; } } VAR_115 = 0 ; VAR_116 : METHOD_13 ( VAR_117 ) ; METHOD_14 ( VAR_118 ) ; return VAR_119 ? : VAR_120 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 ; TYPE_2 VAR_2 , VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 ) ; if ( VAR_6 == VAR_7 ) return VAR_8 ; VAR_9 = METHOD_2 ( ) ; if ( ! VAR_10 ) return - VAR_11 ; switch ( VAR_12 ) { case VAR_13 : VAR_14 = METHOD_3 ( VAR_15 ) ; if ( VAR_16 < 0 ) goto VAR_17 ; goto VAR_18 ; case VAR_19 : VAR_20 = METHOD_4 ( VAR_21 ) ;  if ( VAR_22 < 0 ) {  if ( VAR_23 != - VAR_24 ) goto VAR_25 ; VAR_26 = 0 ; } goto VAR_27 ; case VAR_28 : case VAR_29 : case VAR_30 : case VAR_31 : case VAR_32 : goto VAR_33 ; case VAR_34 : case VAR_35 : default : VAR_36 = - VAR_37 ; goto VAR_38 ; } VAR_39 : VAR_40 -> VAR_41 = VAR_42 ; METHOD_5 ( VAR_43 ) ; return VAR_44 ; VAR_45 : METHOD_6 ( VAR_46 ) ; return VAR_47 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if VAR_2 { unsigned TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 , VAR_5 ; unsigned TYPE_5 * VAR_6 ; unsigned TYPE_6 VAR_7 ; METHOD_1 ( VAR_8 , METHOD_2 ( sizeof ( unsigned TYPE_7 ) , VAR_9 -> VAR_10 . VAR_11 ) ) ;  METHOD_3 ( VAR_12 , VAR_13 -> VAR_14 ,  sizeof ( unsigned TYPE_8 ) * VAR_15 -> VAR_16 . VAR_17 ) ; for ( VAR_18 = 1 ; VAR_19 < VAR_20 -> VAR_21 . VAR_22 ; VAR_23 ++ ) { for ( VAR_24 = VAR_25 ; VAR_26 > 0 ; VAR_27 -- ) { if ( VAR_28 [ VAR_29 ] < VAR_30 [ VAR_31 - 1 ] ) { VAR_32 = VAR_33 [ VAR_34 - 1 ] ; VAR_35 [ VAR_36 - 1 ] = VAR_37 [ VAR_38 ] ; VAR_39 [ VAR_40 ] = VAR_41 ; } else break ; } } VAR_42 = ( 1 + VAR_43 [ VAR_44 -> VAR_45 . VAR_46 >> 1 ] + VAR_47 [ ( VAR_48 -> VAR_49 . VAR_50 >> 1 ) + 1 ] ) >> 1 ; VAR_51 -> VAR_52 = VAR_53 ; METHOD_4 ( VAR_54 ) ; } else VAR_55 -> VAR_56 = ( unsigned TYPE_9 ) ( VAR_57 / VAR_58 -> VAR_59 . VAR_60 ) ; if ( VAR_61 -> VAR_62 < VAR_63 ) VAR_64 -> VAR_65 = VAR_66 ; if ( VAR_67 ) VAR_68 -> VAR_69 = 100000 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 * VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 ; TYPE_1 VAR_5 [ VAR_6 ] ; const TYPE_2 * VAR_7 = VAR_8 ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 = - 1 ; VAR_11 = - VAR_12 ; if ( ! VAR_13 ) goto VAR_14 ; METHOD_1 ( & VAR_15 ) ; VAR_16 = METHOD_2 ( VAR_17 ) ; if ( VAR_18 ) METHOD_3 ( VAR_19 , VAR_20 -> VAR_21 , VAR_22 ) ; METHOD_4 ( & VAR_23 ) ; if ( ! VAR_24 ) goto VAR_25 ; if ( ! ( VAR_26 -> VAR_27 & VAR_28 ) ) { VAR_29 = METHOD_5 ( VAR_30 ) ; if ( VAR_31 ) goto VAR_32 ; } if ( VAR_33 -> VAR_34 & VAR_35 ) { VAR_36 = METHOD_6 ( ) ; if ( VAR_37 < 0 ) { VAR_38 = VAR_39 ; goto VAR_40 ; } METHOD_7 ( VAR_41 , VAR_42 -> STRUCT_OR_UNION_2 ) ; METHOD_8 ( VAR_43 , VAR_44 -> STRUCT_OR_UNION_3 ) ; METHOD_9 ( VAR_45 -> STRUCT_OR_UNION_4 ) ; VAR_46 -> STRUCT_OR_UNION_5 = VAR_47 ; VAR_48 -> VAR_49 |= VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; } else { METHOD_10 ( VAR_54 -> STRUCT_OR_UNION_6 ) ; METHOD_11 ( VAR_55 -> STRUCT_OR_UNION_7 ) ; VAR_56 -> STRUCT_OR_UNION_8 = VAR_57 ; } VAR_58 = METHOD_12 ( 1 , & VAR_59 -> VAR_60 , VAR_61 ) ; if ( VAR_62 < 0 ) goto VAR_63 ; VAR_64 -> VAR_65 ++ ; VAR_66 = METHOD_13 ( 1 , & VAR_67 , VAR_68 ) ; if ( VAR_69 < 0 ) goto VAR_70 ; VAR_71 -> VAR_72 ++ ;  VAR_73 -> VAR_74 = VAR_75 ;  VAR_76 = METHOD_14 ( VAR_77 ) ; VAR_78 = METHOD_15 ( VAR_79 ) ; if ( METHOD_16 ( VAR_80 ) ) goto VAR_81 ; VAR_82 -> STRUCT_OR_UNION_9 = VAR_83 ; if ( VAR_84 -> VAR_85 & VAR_86 ) { METHOD_17 ( VAR_87 -> VAR_88 , 0 , VAR_89 ) ; VAR_90 = METHOD_18 ( VAR_91 -> STRUCT_OR_UNION_10 , 0 , VAR_92 -> VAR_93 , VAR_94 ) ; } else VAR_95 = METHOD_19 ( VAR_96 ) ; if ( VAR_97 < 0 ) goto VAR_98 ; VAR_99 = METHOD_20 ( VAR_100 ) ; if ( VAR_101 < 0 ) goto VAR_102 ; VAR_103 : return VAR_104 ; VAR_105 : if ( VAR_106 > 0 ) METHOD_21 ( VAR_107 ) ; VAR_108 -> VAR_109 = 0 ; VAR_110 -> VAR_111 = 0 ; goto VAR_112 ; }
static VAR_0 TYPE_0 * METHOD_0 ( unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 , const TYPE_4 VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 = 1.0 ; const TYPE_7 VAR_7 = VAR_8 ; TYPE_8 VAR_9 ; unsigned TYPE_9 VAR_10 ; TYPE_10 * VAR_11 ; if ( VAR_12 < 1.0 ) { VAR_13 = VAR_14 / VAR_15 ; VAR_16 = VAR_17 ; } else { VAR_18 = VAR_19 ; } VAR_20 = 2 * ( TYPE_11 ) METHOD_1 ( VAR_21 ) + 1 ; VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { const TYPE_12 VAR_29 = ( TYPE_13 ) VAR_30 / VAR_31 ; register TYPE_14 VAR_32 = METHOD_3 ( 0 , ( TYPE_15 ) METHOD_4 ( VAR_33 - VAR_34 ) ) ; TYPE_16 VAR_35 = METHOD_5 ( ( TYPE_17 ) METHOD_6 ( VAR_36 + VAR_37 ) , ( TYPE_18 ) VAR_38 - 1 ) ; TYPE_19 VAR_39 = 0.0 ;  TYPE_20 VAR_40 ;  VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 [ VAR_48 ] . VAR_49 = VAR_50 ; if ( VAR_51 - VAR_52 + 1 > VAR_53 ) { if ( VAR_54 < ( ( TYPE_21 ) VAR_55 - 1 / 2 ) ) { VAR_56 ++ ; } else { VAR_57 -- ; } }  for ( VAR_58 = VAR_59 ; VAR_60 <= VAR_61 ; VAR_62 ++ ) {   VAR_63 += ( VAR_64 -> VAR_65 [ VAR_66 ] . VAR_67 [ VAR_68 - VAR_69 ] = VAR_70 * ( * VAR_71 ) ( VAR_72 * ( VAR_73 - ( TYPE_22 ) VAR_74 ) ) ) ;  } if ( VAR_75 < 0.0 ) { METHOD_7 ( VAR_76 ) ; return VAR_77 ; } if ( VAR_78 > 0.0 ) { for ( VAR_79 = VAR_80 ; VAR_81 <= VAR_82 ; VAR_83 ++ ) { VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 [ VAR_88 - VAR_89 ] /= VAR_90 ; } } } return VAR_91 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  METHOD_1 ( VAR_1 ) ;  METHOD_2 ( & VAR_2 -> VAR_3 ) ; METHOD_3 ( & VAR_4 -> VAR_5 , VAR_6 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 [ VAR_1 ] ; if ( METHOD_1 ( ) != 2 ) {  METHOD_2 ( "Usage:writeconfig<filename>\\n" ) ;  return ; } METHOD_3 ( VAR_2 , METHOD_4 ( 1 ) , sizeof ( VAR_3 ) ) ; METHOD_5 ( VAR_4 , sizeof ( VAR_5 ) , ".cfg" ) ; METHOD_6 ( "Writing%s.\\n" , VAR_6 ) ; METHOD_7 ( VAR_7 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; if ( VAR_2 -> VAR_3 > 0 && VAR_4 -> VAR_5 >= VAR_6 -> VAR_7 ) { VAR_8 -> VAR_9 = VAR_10 ; return VAR_11 ; } else if ( ! VAR_12 -> VAR_13 ) { VAR_14 -> VAR_15 = VAR_16 ; return VAR_17 ; } else if ( ! VAR_18 -> VAR_19 -> VAR_20 . VAR_21 ) { VAR_22 -> VAR_23 = VAR_24 ; return VAR_25 ; } else { TYPE_3 * VAR_26 ;  TYPE_4 VAR_27 = METHOD_1 ( VAR_28 -> VAR_29 ) + 1 ;  TYPE_5 VAR_30 = 0 ; VAR_31 * VAR_32 ; if ( VAR_33 -> VAR_34 > 0 ) VAR_35 = VAR_36 -> VAR_37 - VAR_38 -> VAR_39 ; VAR_40 = METHOD_2 ( 16 + 4 + VAR_41 + 4 + 8 , 0 , 0 , VAR_42 ) ; VAR_43 = & VAR_44 -> VAR_45 ; VAR_46 = METHOD_3 ( VAR_47 , & VAR_48 ) ; VAR_49 = METHOD_4 ( VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) ; VAR_54 = METHOD_5 ( VAR_55 , & VAR_56 ) ; METHOD_6 ( VAR_57 , & VAR_58 -> VAR_59 -> VAR_60 . VAR_61 ) ; METHOD_7 ( VAR_62 -> VAR_63 ) ; VAR_64 = METHOD_8 ( VAR_65 -> VAR_66 , VAR_67 ) ; if ( VAR_68 != VAR_69 ) { METHOD_9 ( VAR_70 ) ; return VAR_71 ; } VAR_72 = METHOD_10 ( VAR_73 -> VAR_74 , & ( VAR_75 -> VAR_76 ) ) ; if ( VAR_77 != VAR_78 ) { METHOD_11 ( VAR_79 ) ; return VAR_80 ; } VAR_81 -> VAR_82 . VAR_83 = VAR_84 ; VAR_85 -> VAR_86 += VAR_87 -> VAR_88 -> VAR_89 . VAR_90 ; return VAR_91 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; if ( VAR_5 -> VAR_6 . VAR_7 . VAR_8 == 0 ) return ; if ( VAR_9 < VAR_10 -> VAR_11 . VAR_12 . VAR_13 ) return ; VAR_14 = VAR_15 -> VAR_16 . VAR_17 . VAR_18 ; VAR_19 = VAR_20 + VAR_21 - VAR_22 -> VAR_23 . VAR_24 . VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 - VAR_29 ; VAR_30 ++ ) VAR_31 = VAR_32 << 1 ; for ( ; VAR_33 >= 0 ; VAR_34 >>= 1 , VAR_35 -- ) { if ( VAR_36 < VAR_37 ) continue ; VAR_38 -> VAR_39 . VAR_40 . VAR_41 += VAR_42 ;  VAR_43 -> VAR_44 += 1 << VAR_45 ;  VAR_46 -= VAR_47 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 , VAR_4 ; for ( VAR_5 = VAR_6 -> VAR_7 + 1 ; VAR_8 <= VAR_9 -> VAR_10 ; VAR_11 ++ ) { METHOD_1 ( VAR_12 -> VAR_13 [ VAR_14 ] ) ; VAR_15 -> VAR_16 [ VAR_17 ] = VAR_18 ;  }  VAR_19 -> VAR_20 = VAR_21 -> VAR_22 ; for ( VAR_23 = 0 ; VAR_24 <= VAR_25 -> VAR_26 ; VAR_27 ++ ) { VAR_28 = VAR_29 -> VAR_30 [ VAR_31 ] ; if ( ! VAR_32 ) { VAR_33 = METHOD_2 ( sizeof ( * VAR_34 ) , VAR_35 ) ; if ( ! VAR_36 ) return - VAR_37 ; VAR_38 -> VAR_39 [ VAR_40 ] = VAR_41 ; } VAR_42 = METHOD_3 ( VAR_43 , VAR_44 -> VAR_45 [ VAR_46 ] ) ; if ( VAR_47 ) return VAR_48 ; } return 0 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ,   TYPE_3 * VAR_2 ) {  const TYPE_4 * const VAR_3 = & VAR_4 -> VAR_5 ; const TYPE_5 * const VAR_6 = & VAR_7 -> VAR_8 . VAR_9 ; const struct STRUCT_OR_UNION_0 * const VAR_10 = & VAR_11 -> VAR_12 ; const TYPE_6 * const VAR_13 = VAR_14 [ 0 ] ;  const TYPE_7 * const VAR_15 = VAR_16 [ - VAR_17 -> VAR_18 ] ;   const TYPE_8 * const VAR_19 = VAR_20 -> VAR_21 ? VAR_22 [ - 1 ] : VAR_23 ;  const TYPE_9 * const VAR_24 = & VAR_25 -> VAR_26 ; const TYPE_10 VAR_27 = VAR_28 -> VAR_29 ; if ( VAR_30 -> VAR_31 ) METHOD_1 ( VAR_32 , VAR_33 , VAR_34 -> VAR_35 ) ;  METHOD_2 ( VAR_36 , VAR_37 -> VAR_38 , VAR_39 , VAR_40 ) ;  if ( VAR_41 >= VAR_42 && VAR_43 -> VAR_44 == VAR_45 )  METHOD_3 ( VAR_46 , VAR_47 -> VAR_48 , VAR_49 , VAR_50 ) ;  if ( VAR_51 >= VAR_52 ) { METHOD_4 ( VAR_53 , VAR_54 -> VAR_55 , METHOD_5 ( VAR_56 , VAR_57 , VAR_58 , 0 ) ) ; } else { const TYPE_11 VAR_59 = VAR_60 [ VAR_61 ] ; const TYPE_12 VAR_62 = VAR_63 [ VAR_64 ] ; TYPE_13 VAR_65 , VAR_66 ; for ( VAR_67 = 0 ; VAR_68 < 2 ; VAR_69 += VAR_70 ) { for ( VAR_71 = 0 ; VAR_72 < 2 ; VAR_73 += VAR_74 ) { const TYPE_14 VAR_75 = VAR_76 * 2 + VAR_77 ; METHOD_6 ( VAR_78 , VAR_79 -> VAR_80 [ VAR_81 ] . VAR_82 , METHOD_7 ( VAR_83 , VAR_84 , VAR_85 , VAR_86 ) ) ; } } } METHOD_8 ( VAR_87 , VAR_88 -> VAR_89 , VAR_90 [ VAR_91 -> VAR_92 ] ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = - 1 ; TYPE_3 VAR_2 = 1 ; TYPE_4 TYPE_5 TYPE_6 VAR_3 ; if ( ! VAR_4 ) { if ( METHOD_1 ( METHOD_2 ( 2 , 2 ) , & VAR_5 ) != VAR_6 ) { METHOD_3 ( VAR_7 , "WSAStartupfailed!\\n" ) ; METHOD_4 ( - 1 ) ; } VAR_8 = 1 ; } struct STRUCT_OR_UNION_0 VAR_9 ; if ( 0 > ( VAR_10 = METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ) ) { METHOD_6 ( "socket()" ) ; return - 1 ; } if ( METHOD_7 ( VAR_14 , VAR_15 , VAR_16 , ( TYPE_7 * ) & VAR_17 , sizeof ( TYPE_8 ) ) == - 1 ) { METHOD_8 ( "setsockopt()" ) ; METHOD_9 ( VAR_18 ) ; return - 1 ; } METHOD_10 ( ( TYPE_9 * ) & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; VAR_21 . VAR_22 = VAR_23 ;  VAR_24 . VAR_25 . VAR_26 = METHOD_11 ( VAR_27 ) ;  VAR_28 . VAR_29 = METHOD_12 ( VAR_30 ) ; if ( 0 > METHOD_13 ( VAR_31 , ( struct STRUCT_OR_UNION_1 * ) & VAR_32 , sizeof ( VAR_33 ) ) ) { METHOD_14 ( "bind()" ) ; METHOD_15 ( VAR_34 ) ; return - 1 ; } if ( METHOD_16 ( VAR_35 , 1 ) == - 1 ) { METHOD_17 ( "listen()" ) ; METHOD_18 ( VAR_36 ) ; return - 1 ; } return VAR_37 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = ( TYPE_4 * ) VAR_3 ; TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 , VAR_6 -> VAR_7 . VAR_8 ) ; TYPE_7 VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 != VAR_13 ) { VAR_14 -> VAR_15 . VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 ) ; } if ( VAR_22 ) { if ( METHOD_3 ( VAR_23 , - VAR_24 , VAR_25 ) ) { return ; } }  METHOD_4 ( "Datareadytag=0x%xlen=%zd\\n" , VAR_26 -> VAR_27 . VAR_28 , VAR_29 -> VAR_30 . VAR_31 ) ;   VAR_32 = VAR_33 -> VAR_34 . VAR_35 / 512 ;  VAR_36 -> VAR_37 += VAR_38 ; VAR_39 -> VAR_40 -= VAR_41 ;  METHOD_5 ( & VAR_42 -> VAR_43 , VAR_44 -> VAR_45 . VAR_46 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = & VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; unsigned TYPE_1 VAR_11 ; TYPE_2 VAR_12 , VAR_13 ; METHOD_1 ( VAR_14 -> VAR_15 , VAR_16 ) { if ( METHOD_2 ( VAR_17 , "reg" , & VAR_18 ) ) { METHOD_3 ( VAR_19 , "Couldn\'tdeterminechipselect.\\n" ) ; goto VAR_20 ; }  if ( VAR_21 > VAR_22 ) {  METHOD_4 ( VAR_23 , "Chipselect%doutofrange.\\n" , VAR_24 ) ; goto VAR_25 ; } VAR_26 = & VAR_27 -> VAR_28 [ VAR_29 ] ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 = METHOD_5 ( VAR_37 , VAR_38 , VAR_39 ) ; if ( VAR_40 ) goto VAR_41 ; VAR_42 = & VAR_43 -> VAR_44 ; VAR_45 = & VAR_46 -> VAR_47 ; VAR_48 -> VAR_49 = VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; METHOD_6 ( VAR_54 , VAR_55 ) ; VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 ; VAR_68 -> VAR_69 = VAR_70 ; VAR_71 -> VAR_72 = VAR_73 ; VAR_74 -> VAR_75 = VAR_76 ; VAR_77 -> VAR_78 = VAR_79 ; VAR_80 -> VAR_81 = METHOD_7 ( VAR_82 , VAR_83 , "%s.%d" , METHOD_8 ( VAR_84 ) , VAR_85 ) ; if ( ! VAR_86 -> VAR_87 ) { VAR_88 = - VAR_89 ; goto VAR_90 ; } VAR_91 = METHOD_9 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 ) goto VAR_96 ; VAR_97 = METHOD_10 ( VAR_98 , VAR_99 , 0 ) ; if ( VAR_100 ) goto VAR_101 ; VAR_102 -> VAR_103 = VAR_104 ; } return 0 ; VAR_105 : for ( VAR_106 = 0 ; VAR_107 < VAR_108 ; VAR_109 ++ ) if ( VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 ) METHOD_11 ( & VAR_114 -> VAR_115 [ VAR_116 ] . VAR_117 . VAR_118 ) ; return VAR_119 ; }
static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_0 VAR_3 , VAR_4 , VAR_5 ; TYPE_1 VAR_6 ; VAR_7 * VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 ) ; METHOD_4 ( VAR_17 -> VAR_18 -> VAR_19 & VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 == VAR_23 ) ; VAR_24 -> VAR_25 -> VAR_26 ++ ; VAR_27 = METHOD_6 ( VAR_28 ) ; METHOD_7 ( VAR_29 , "Error" , VAR_30 ) ; if ( VAR_31 -> VAR_32 -> VAR_33 -> VAR_34 != VAR_35 ) METHOD_8 ( VAR_36 -> VAR_37 , VAR_38 -> VAR_39 ) ; METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; METHOD_10 ( VAR_47 -> VAR_48 , "HTTP/1.1" , 503 , "Backendfetchfailed" ) ; METHOD_11 ( VAR_49 -> VAR_50 , "Date:" , VAR_51 ) ; METHOD_12 ( VAR_52 -> VAR_53 , "Server:Varnish" ) ; VAR_54 -> VAR_55 -> VAR_56 = VAR_57 ; if ( ! METHOD_13 ( & VAR_58 -> VAR_59 -> VAR_60 -> VAR_61 ) ) { VAR_62 -> VAR_63 -> VAR_64 = 1 ; VAR_65 -> VAR_66 -> VAR_67 = 5 ; VAR_68 -> VAR_69 -> VAR_70 = 5 ; } else { VAR_71 -> VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 -> VAR_79 = 0 ; } VAR_80 = METHOD_14 ( ) ; METHOD_15 ( VAR_81 ) ; METHOD_16 ( VAR_82 -> VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) ; METHOD_17 ( METHOD_18 ( VAR_88 ) ) ; if ( VAR_89 -> VAR_90 == VAR_91 || VAR_92 -> VAR_93 == VAR_94 ) { METHOD_19 ( & VAR_95 ) ; return ( VAR_96 ) ; } if ( VAR_97 -> VAR_98 == VAR_99 ) { METHOD_20 ( & VAR_100 ) ; if ( VAR_101 -> VAR_102 ++ < VAR_103 -> VAR_104 ) return ( VAR_105 ) ; METHOD_21 ( VAR_106 -> VAR_107 , VAR_108 , "Toomanyretries,failing" ) ; return ( VAR_109 ) ; } METHOD_22 ( VAR_110 -> VAR_111 == VAR_112 ) ; VAR_113 -> VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 -> VAR_119 = VAR_120 -> VAR_121 ; VAR_122 -> VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = VAR_130 -> VAR_131 ; VAR_132 -> VAR_133 -> VAR_134 = VAR_135 -> VAR_136 ; if ( METHOD_23 ( VAR_137 ) ) { ( TYPE_2 ) METHOD_24 ( VAR_138 -> VAR_139 , "Couldnotgetstorage" ) ; METHOD_25 ( & VAR_140 ) ; return ( VAR_141 ) ; } VAR_142 = METHOD_26 ( VAR_143 ) ; VAR_144 = 0 ; while ( VAR_145 > 0 ) { VAR_146 = VAR_147 ; if ( METHOD_27 ( VAR_148 -> VAR_149 , & VAR_150 , & VAR_151 ) != VAR_152 ) break ;  METHOD_28 ( VAR_153 , METHOD_29 ( VAR_154 ) + VAR_155 , VAR_156 ) ;  METHOD_30 ( VAR_157 -> VAR_158 , VAR_159 ) ; VAR_160 -= VAR_161 ; VAR_162 += VAR_163 ; } METHOD_31 ( METHOD_32 ( VAR_164 , VAR_165 -> VAR_166 , VAR_167 , VAR_168 ) ) ; METHOD_33 ( & VAR_169 ) ; METHOD_34 ( VAR_170 , VAR_171 -> VAR_172 ) ; METHOD_35 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) ; return ( VAR_177 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = & METHOD_1 ( VAR_5 ) -> VAR_6 [ VAR_7 ] . VAR_8 ; TYPE_4 VAR_9 , VAR_10 = 0 ; TYPE_5 VAR_11 = - 1 ; METHOD_2 ( & VAR_12 -> VAR_13 ) ; for ( VAR_14 = VAR_15 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { if ( VAR_19 < 0 && ( VAR_20 -> VAR_21 [ VAR_22 ] == 0 ) ) { VAR_23 = VAR_24 ; continue ; } if ( VAR_25 -> VAR_26 [ VAR_27 ] && ( VAR_28 == ( VAR_29 & METHOD_3 ( VAR_30 -> VAR_31 [ VAR_32 ] ) ) ) ) { * VAR_33 = VAR_34 ; ++ VAR_35 -> VAR_36 [ VAR_37 ] ; goto VAR_38 ;  }  } if ( VAR_39 -> VAR_40 == VAR_41 -> VAR_42 ) { VAR_43 = - VAR_44 ; goto VAR_45 ; } VAR_46 -> VAR_47 [ VAR_48 ] = 1 ; VAR_49 -> VAR_50 [ VAR_51 ] = METHOD_4 ( VAR_52 | VAR_53 ) ; VAR_54 = METHOD_5 ( VAR_55 , VAR_56 , VAR_57 -> VAR_58 ) ; if ( METHOD_6 ( VAR_59 ) ) { METHOD_7 ( VAR_60 , "Failedaddingvlan:%u\\n" , VAR_61 ) ; VAR_62 -> VAR_63 [ VAR_64 ] = 0 ; VAR_65 -> VAR_66 [ VAR_67 ] = 0 ; goto VAR_68 ; } * VAR_69 = VAR_70 ; ++ VAR_71 -> VAR_72 ; VAR_73 : METHOD_8 ( & VAR_74 -> VAR_75 ) ; return VAR_76 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const struct STRUCT_OR_UNION_1 * VAR_4 ; const TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; METHOD_1 ( ( VAR_8 , "wb-prep:" ) ) ;  if ( VAR_9 < sizeof ( * VAR_10 ) ) {  return ( - 1 ) ;  }  VAR_11 = METHOD_2 ( & VAR_12 -> VAR_13 ) ; VAR_14 = ( const struct STRUCT_OR_UNION_2 * ) ( VAR_15 + 1 ) ; while ( -- VAR_16 >= 0 && METHOD_3 ( * VAR_17 ) ) { const struct STRUCT_OR_UNION_3 * VAR_18 , * VAR_19 ; TYPE_5 VAR_20 = '<' ; METHOD_4 ( ( VAR_21 , "%u/%s:%u" , METHOD_5 ( & VAR_22 -> VAR_23 ) , METHOD_6 ( VAR_24 , & VAR_25 -> VAR_26 . VAR_27 ) , METHOD_7 ( & VAR_28 -> VAR_29 . VAR_30 ) ) ) ; VAR_31 = ( const struct STRUCT_OR_UNION_4 * ) ( VAR_32 + 1 ) ; for ( VAR_33 = VAR_34 + VAR_35 -> VAR_36 ; VAR_37 < VAR_38 && METHOD_8 ( * VAR_39 ) ; ++ VAR_40 ) { METHOD_9 ( ( VAR_41 , "%c%s:%u" , VAR_42 , METHOD_10 ( VAR_43 , & VAR_44 -> VAR_45 ) , METHOD_11 ( & VAR_46 -> VAR_47 ) ) ) ; VAR_48 = ',' ; } METHOD_12 ( ( VAR_49 , ">" ) ) ; VAR_50 = ( const struct STRUCT_OR_UNION_5 * ) VAR_51 ; } return ( ( const TYPE_6 * ) VAR_52 <= VAR_53 ? 0 : - 1 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 ) METHOD_1 ( STRUCT_OR_UNION_3 ) ;  STRUCT_OR_UNION_4 -> VAR_4 = 0 ;  VAR_5 -> VAR_6 -> METHOD_2 ( STRUCT_OR_UNION_5 , VAR_7 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) {   TYPE_4 VAR_3 = sizeof ( TYPE_5 * ) * ( 2 + VAR_4 -> VAR_5 ) ;   TYPE_6 * * VAR_6 ;  VAR_7 = METHOD_1 ( VAR_8 , VAR_9 -> VAR_10 , VAR_11 ) ; if ( VAR_12 == 0 ) { METHOD_2 ( VAR_13 , VAR_14 ) ; } else { TYPE_7 VAR_15 = VAR_16 -> VAR_17 ++ ; VAR_18 [ VAR_19 ] = VAR_20 ; VAR_21 [ VAR_22 + 1 ] = 0 ; VAR_23 -> VAR_24 = VAR_25 ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 unsigned TYPE_4 VAR_2 ; unsigned TYPE_5 VAR_3 ; TYPE_6 VAR_4 [ 15 ] ; TYPE_7 * VAR_5 = METHOD_1 ( ) ; * VAR_6 = '\\0' ; * VAR_7 = '\\0' ; if ( ( ! ( VAR_8 ) || ( * ( VAR_9 ) == '\\0' ) ) ) { return ; } for ( VAR_10 = 0 ; VAR_11 [ VAR_12 ] != '\\0' ; VAR_13 ++ ) { VAR_14 = VAR_15 [ VAR_16 ] ; if ( VAR_17 > 127 ) { METHOD_2 ( VAR_18 , sizeof VAR_19 , "&%d;" , VAR_20 ) ; VAR_21 -> METHOD_3 ( VAR_22 , VAR_23 , METHOD_4 ( VAR_24 ) ) ; } else if ( VAR_25 == '&' ) { VAR_26 -> METHOD_5 ( VAR_27 , "&amp;" , 5 ) ; } else if ( VAR_28 == '<' ) { VAR_29 -> METHOD_6 ( VAR_30 , "&lt;" , 4 ) ; } else if ( VAR_31 == '>' ) { VAR_32 -> METHOD_7 ( VAR_33 , "&gt;" , 4 ) ; } else if ( VAR_34 == \'"\' ) { VAR_35 -> METHOD_8 ( VAR_36 , "&quot;" , 6 ) ; } else { VAR_37 -> append_char ( VAR_38 , VAR_39 ) ; } }  memcpy ( VAR_40 , VAR_41 -> str , XMLRPC_BUFSIZE ) ;  }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 [ ] , TYPE_4 VAR_3 [ ] , TYPE_5 VAR_4 [ ] , TYPE_6 VAR_5 [ ] , TYPE_7 VAR_6 ) { TYPE_8 * VAR_7 = VAR_8 ; TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 ; TYPE_12 VAR_12 ; TYPE_13 VAR_13 , VAR_14 , VAR_15 ; TYPE_14 VAR_16 ; TYPE_15 VAR_17 , VAR_18 ; if ( VAR_19 == 0 ) return VAR_20 ; VAR_21 = METHOD_1 ( VAR_22 , 0 , 0 ) ; if ( VAR_23 == VAR_24 ) return VAR_25 ; VAR_26 = METHOD_2 ( VAR_27 [ 0 ] ) ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) { TYPE_16 VAR_32 , VAR_33 ; VAR_34 = VAR_35 [ VAR_36 ] ; VAR_37 = METHOD_3 ( VAR_38 ) ; VAR_39 = ( VAR_40 == VAR_41 || VAR_42 == VAR_43 ) ; if ( ( VAR_44 == 0 ) && ! VAR_45 ) { VAR_46 = VAR_47 ; } else { VAR_48 = ( VAR_49 != VAR_50 ) && ( VAR_51 != VAR_52 ) ; } VAR_53 = VAR_54 [ VAR_55 ] ; if ( VAR_56 || VAR_57 ) { VAR_58 = METHOD_4 ( VAR_59 ) ; VAR_60 = METHOD_5 ( VAR_61 ) ; } else { VAR_62 = METHOD_6 ( VAR_63 ) ; VAR_64 = METHOD_7 ( VAR_65 ) ; } if ( ! METHOD_8 ( VAR_66 , VAR_67 ) ) { METHOD_9 ( VAR_68 , VAR_69 , "ColorSpacemismatch" ) ; goto VAR_70 ; } if ( VAR_71 || ( ( VAR_72 == VAR_73 ) && ( VAR_74 == 1 ) ) ) { VAR_75 = METHOD_10 ( VAR_76 , VAR_77 ) ; if ( VAR_78 == VAR_79 ) goto VAR_80 ; if ( VAR_81 == VAR_82 && VAR_83 > 0 ) { if ( ! METHOD_11 ( VAR_84 , VAR_85 , VAR_86 , VAR_87 [ VAR_88 ] , VAR_89 [ VAR_90 ] , & VAR_91 , & VAR_92 ) ) goto VAR_93 ; } else { METHOD_12 ( & VAR_94 ) ; METHOD_13 ( & VAR_95 , 0 , 0 , 0 ) ; } if ( ! METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , & VAR_99 , & VAR_100 ) ) goto VAR_101 ; } else { if ( VAR_102 ) { VAR_103 = METHOD_15 ( VAR_104 , VAR_105 ) ; if ( VAR_106 == VAR_107 ) goto VAR_108 ; } else { VAR_109 = METHOD_16 ( VAR_110 , VAR_111 ) ; if ( VAR_112 == VAR_113 ) goto VAR_114 ; if ( ! METHOD_17 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 [ VAR_119 ] , VAR_120 [ VAR_121 ] , & VAR_122 , & VAR_123 ) ) goto VAR_124 ; if ( ! METHOD_18 ( VAR_125 , VAR_126 , VAR_127 , & VAR_128 , & VAR_129 ) ) goto VAR_130 ; } } if ( ! METHOD_19 ( VAR_131 , VAR_132 ) ) goto VAR_133 ; METHOD_20 ( VAR_134 ) ;  VAR_135 = VAR_136 ;  } return VAR_137 ; VAR_138 :  METHOD_21 ( VAR_139 ) ;  if ( VAR_140 != VAR_141 ) METHOD_22 ( VAR_142 ) ; return VAR_143 ; METHOD_23 ( VAR_144 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = METHOD_1 ( VAR_4 ) ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_5 VAR_9 , VAR_10 ; METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) { VAR_14 = - 1 ; if ( ! METHOD_3 ( VAR_15 -> VAR_16 , ".fini_array" ) ) { VAR_17 = VAR_18 ; } else if ( ! METHOD_4 ( VAR_19 -> VAR_20 , ".init_array" ) ) { VAR_21 = VAR_22 ; } else if ( ! METHOD_5 ( VAR_23 -> VAR_24 , ".preinit_array" ) ) { VAR_25 = VAR_26 ; } if ( VAR_27 != - 1 ) { TYPE_6 * VAR_28 = METHOD_6 ( VAR_29 -> VAR_30 , 1 ) ; if ( ! VAR_31 ) { continue ; } ( TYPE_7 ) METHOD_7 ( VAR_32 -> VAR_33 , VAR_34 -> VAR_35 , VAR_36 , VAR_37 -> VAR_38 ) ; if ( VAR_39 == 32 ) {  for ( VAR_40 = 0 ; VAR_41 < VAR_42 -> VAR_43 ; VAR_44 += 4 ) {  TYPE_8 VAR_45 = METHOD_8 ( VAR_46 + VAR_47 ) ; if ( VAR_48 ) { TYPE_9 * VAR_49 = METHOD_9 ( VAR_50 -> VAR_51 + VAR_52 , ( TYPE_10 ) VAR_53 , VAR_54 , VAR_55 ) ; METHOD_10 ( VAR_56 , VAR_57 ) ; } } } else {  for ( VAR_58 = 0 ; VAR_59 < VAR_60 -> VAR_61 ; VAR_62 += 8 ) {  TYPE_11 VAR_63 = METHOD_11 ( VAR_64 + VAR_65 ) ; if ( VAR_66 ) { TYPE_12 * VAR_67 = METHOD_12 ( VAR_68 -> VAR_69 + VAR_70 , VAR_71 , VAR_72 , VAR_73 ) ; METHOD_13 ( VAR_74 , VAR_75 ) ; } } } METHOD_14 ( VAR_76 ) ; } } METHOD_15 ( VAR_77 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; union { TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; } VAR_10 ; METHOD_1 ( ( VAR_11 , "%s%ssubTLV%u,length:%u" , VAR_12 , METHOD_2 ( VAR_13 , "unknown" , VAR_14 ) , VAR_15 , VAR_16 ) ) ; METHOD_3 ( * VAR_17 , VAR_18 ) ; switch ( VAR_19 ) { case VAR_20 : case VAR_21 : case VAR_22 : if ( VAR_23 >= 4 ) { METHOD_4 ( ( VAR_24 , ",0x%08x" , METHOD_5 ( VAR_25 ) ) ) ; if ( VAR_26 == 8 ) METHOD_6 ( ( VAR_27 , ",0x%08x" , METHOD_7 ( VAR_28 + 4 ) ) ) ; } break ; case VAR_29 : case VAR_30 : if ( VAR_31 >= sizeof ( struct STRUCT_OR_UNION_0 ) ) METHOD_8 ( ( VAR_32 , ",%s" , METHOD_9 ( VAR_33 , VAR_34 ) ) ) ; break ; case VAR_35 : case VAR_36 : if ( VAR_37 >= 4 ) { VAR_38 . VAR_39 = METHOD_10 ( VAR_40 ) ; METHOD_11 ( ( VAR_41 , ",%.3fMbps" , VAR_42 . VAR_43 * 8 / 1000000 ) ) ; } break ; case VAR_44 : if ( VAR_45 >= 32 ) { for ( VAR_46 = 0 ; VAR_47 < 8 ; VAR_48 ++ ) { VAR_49 . VAR_50 = METHOD_12 ( VAR_51 ) ; METHOD_13 ( ( VAR_52 , "%sTE-Class%u:%.3fMbps" , VAR_53 , VAR_54 , VAR_55 . VAR_56 * 8 / 1000000 ) ) ; VAR_57 += 4 ; } } break ; case VAR_58 : case VAR_59 :  METHOD_14 ( ( VAR_60 , "%sBandwidthConstraintsModelID:%s(%u)" ,  VAR_61 , METHOD_15 ( VAR_62 , "unknown" , * VAR_63 ) , * VAR_64 ) ) ; VAR_65 ++ ; for ( VAR_66 = 0 ; VAR_67 < ( VAR_68 - 1 ) / 4 ; VAR_69 ++ ) {  METHOD_16 ( * VAR_70 , 4 ) ;  VAR_71 . VAR_72 = METHOD_17 ( VAR_73 ) ; METHOD_18 ( ( VAR_74 , "%sBandwidthconstraintCT%u:%.3fMbps" , VAR_75 , VAR_76 , VAR_77 . VAR_78 * 8 / 1000000 ) ) ; VAR_79 += 4 ; } break ; case VAR_80 : if ( VAR_81 >= 3 ) METHOD_19 ( ( VAR_82 , ",%u" , METHOD_20 ( VAR_83 ) ) ) ; break ; case VAR_84 : if ( VAR_85 == 2 ) { METHOD_21 ( ( VAR_86 , ",[%s](0x%04x)" , METHOD_22 ( VAR_87 , "Unknown" , METHOD_23 ( VAR_88 ) ) , METHOD_24 ( VAR_89 ) ) ) ; } break ; case VAR_90 : if ( VAR_91 >= 2 ) { METHOD_25 ( ( VAR_92 , ",%s,Priority%u" , METHOD_26 ( VAR_93 , "none" , * VAR_94 ) , * ( VAR_95 + 1 ) ) ) ; } break ; case VAR_96 : if ( VAR_97 >= 6 ) { METHOD_27 ( ( VAR_98 , ",LM:%u" , METHOD_28 ( VAR_99 ) ) ) ; VAR_100 = VAR_101 + 3 ; METHOD_29 ( ( VAR_102 , ",P:%u" , * ( VAR_103 ) ) ) ; VAR_104 ++ ; METHOD_30 ( ( VAR_105 , ",P-ID:%u" , METHOD_31 ( VAR_106 ) ) ) ; } break ; case VAR_107 : if ( VAR_108 >= 36 ) { VAR_109 = * VAR_110 ; METHOD_32 ( ( VAR_111 , "%sInterfaceSwitchingCapability:%s" , VAR_112 , METHOD_33 ( VAR_113 , "Unknown" , VAR_114 ) ) ) ; METHOD_34 ( ( VAR_115 , ",LSPEncoding:%s" , METHOD_35 ( VAR_116 , "Unknown" , * ( VAR_117 + 1 ) ) ) ) ; VAR_118 += 4 ; METHOD_36 ( ( VAR_119 , "%sMaxLSPBandwidth:" , VAR_120 ) ) ; for ( VAR_121 = 0 ; VAR_122 < 8 ; VAR_123 ++ ) { VAR_124 . VAR_125 = METHOD_37 ( VAR_126 ) ; METHOD_38 ( ( VAR_127 , "%sprioritylevel%d:%.3fMbps" , VAR_128 , VAR_129 , VAR_130 . VAR_131 * 8 / 1000000 ) ) ; VAR_132 += 4 ; } VAR_133 -= 36 ; switch ( VAR_134 ) { case VAR_135 : case VAR_136 : case VAR_137 : case VAR_138 : METHOD_39 ( * VAR_139 , 6 ) ; VAR_140 . VAR_141 = METHOD_40 ( VAR_142 ) ; METHOD_41 ( ( VAR_143 , "%sMinLSPBandwidth:%.3fMbps" , VAR_144 , VAR_145 . VAR_146 * 8 / 1000000 ) ) ; METHOD_42 ( ( VAR_147 , "%sInterfaceMTU:%u" , VAR_148 , METHOD_43 ( VAR_149 + 4 ) ) ) ; break ; case VAR_150 : METHOD_44 ( * VAR_151 , 8 ) ; VAR_152 . VAR_153 = METHOD_45 ( VAR_154 ) ; METHOD_46 ( ( VAR_155 , "%sMinLSPBandwidth:%.3fMbps" , VAR_156 , VAR_157 . VAR_158 * 8 / 1000000 ) ) ; METHOD_47 ( ( VAR_159 , "%sIndication%s" , VAR_160 , METHOD_48 ( VAR_161 , "Unknown(%u)" , * ( VAR_162 + 4 ) ) ) ) ; break ; default : if ( VAR_163 > 0 ) { if ( ! METHOD_49 ( VAR_164 , VAR_165 , "\\n\\t\\t" , VAR_166 ) ) return ( 0 ) ; } } } break ; default : if ( ! METHOD_50 ( VAR_167 , VAR_168 , "\\n\\t\\t" , VAR_169 ) ) return ( 0 ) ; break ; } return ( 1 ) ; VAR_170 : return ( 0 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 = 2 * VAR_3 -> VAR_4 ; TYPE_4 VAR_5 = ( 10 * VAR_6 ) ; for ( VAR_7 = 0 ; VAR_8 < ( VAR_9 -> VAR_10 >> 1 ) ; VAR_11 ++ ) { TYPE_5 VAR_12 , VAR_13 , VAR_14 , VAR_15 ; TYPE_6 VAR_16 [ 640 ] ; TYPE_7 VAR_17 [ 128 ] , VAR_18 [ 256 ] , VAR_19 [ 256 ] ; TYPE_8 VAR_20 , VAR_21 ; const TYPE_9 * VAR_22 ; TYPE_10 * VAR_23 ; TYPE_11 * VAR_24 = VAR_25 -> VAR_26 ; const TYPE_12 * VAR_27 = VAR_28 -> VAR_29 ; TYPE_13 * VAR_30 = VAR_31 -> VAR_32 ; METHOD_1 ( VAR_33 -> VAR_34 [ VAR_35 + VAR_36 - 1 ] , 0 , VAR_37 * sizeof ( TYPE_14 ) ) ; VAR_38 = VAR_39 -> VAR_40 + VAR_41 * 2 * VAR_42 -> VAR_43 + 1 ; VAR_44 = & VAR_45 -> VAR_46 [ VAR_47 + VAR_48 - 1 ] [ 4 * VAR_49 -> VAR_50 ] ; for ( VAR_51 = VAR_52 - 1 ; VAR_53 >= VAR_54 ; VAR_55 -- ) { VAR_56 [ VAR_57 ] = VAR_58 [ VAR_59 - VAR_60 ] ; } for ( VAR_61 = VAR_62 - 1 ; VAR_63 >= 0 ; VAR_64 -- ) { VAR_65 [ VAR_66 ] = VAR_67 [ VAR_68 - 1 - VAR_69 ] ; } for ( VAR_70 = 0 ; VAR_71 < VAR_72 ; VAR_73 ++ ) { VAR_74 [ VAR_75 ] = VAR_76 [ VAR_77 ] * VAR_78 [ VAR_79 ] ; } for ( VAR_80 = 0 ; VAR_81 < 2 * VAR_82 ; VAR_83 ++ ) { VAR_84 = 0.0 ; for ( VAR_85 = 0 ; VAR_86 < 5 ; VAR_87 ++ ) { VAR_88 = VAR_89 + VAR_90 [ VAR_91 + VAR_92 * 2 * VAR_93 ] ; } VAR_94 [ VAR_95 ] = VAR_96 ; } if ( VAR_97 == 40 ) { for ( VAR_98 = 1 ; VAR_99 < VAR_100 ; VAR_101 ++ ) { TYPE_15 VAR_102 = VAR_103 [ VAR_104 ] + VAR_105 [ 2 * VAR_106 - VAR_107 ] ; TYPE_16 VAR_108 = VAR_109 [ VAR_110 ] - VAR_111 [ 2 * VAR_112 - VAR_113 ] ; VAR_114 [ VAR_115 ] = VAR_116 ; VAR_117 [ 2 * VAR_118 - VAR_119 ] = VAR_120 ; } for ( VAR_121 = 0 ; VAR_122 < VAR_123 ; VAR_124 ++ ) { VAR_125 = VAR_126 [ VAR_127 ] ; if ( VAR_128 & 1 ) VAR_129 = VAR_130 [ 0 ] ; else VAR_131 = - VAR_132 [ 0 ] ; for ( VAR_133 = 1 ; VAR_134 < VAR_135 ; VAR_136 ++ ) { VAR_137 = VAR_138 + VAR_139 [ 0 + VAR_140 ] * VAR_141 [ 2 * VAR_142 + 0 ] ; VAR_143 = VAR_144 + VAR_145 [ 2 * VAR_146 - VAR_147 ] * VAR_148 [ 2 * VAR_149 + 1 ] ; } VAR_150 += ( 2 * VAR_151 ) ; * VAR_152 ++ = ( TYPE_17 ) VAR_153 ; * VAR_154 ++ = ( TYPE_18 ) VAR_155 ; } } else { TYPE_19 * VAR_156 = VAR_157 ; TYPE_20 * VAR_158 = VAR_159 ; for ( VAR_160 = 0 ; VAR_161 < VAR_162 * 2 ; VAR_163 ++ ) { * VAR_164 ++ = ( ( * VAR_165 ++ ) * VAR_166 [ VAR_167 ] ) ; * VAR_168 ++ = ( ( * VAR_169 ++ ) * VAR_170 [ VAR_171 ] ) ; }  if ( VAR_172 != VAR_173 )   ( * VAR_174 ) ( VAR_175 , VAR_176 , VAR_177 * 2 ) ;  else return - 1 ; for ( VAR_178 = 0 ; VAR_179 < VAR_180 / 2 ; VAR_181 ++ ) { * ( VAR_182 + 1 ) = - * VAR_183 ++ ; * VAR_184 = * VAR_185 ++ ; VAR_186 += 2 ; * ( VAR_187 + 1 ) = * VAR_188 ++ ; * VAR_189 = - * VAR_190 ++ ; VAR_191 += 2 ; } } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 , TYPE_8 * * VAR_7 ) { TYPE_9 * VAR_8 , * VAR_9 = ( TYPE_10 * ) VAR_10 ; TYPE_11 TYPE_12 VAR_11 ( VAR_12 , "forward_search_range:str:%d,end:%d,s:%d,range:%d\\n" , ( TYPE_13 ) VAR_13 , ( TYPE_14 ) VAR_14 , ( TYPE_15 ) VAR_15 , ( TYPE_16 ) VAR_16 ) ; VAR_17 = VAR_18 ; if ( VAR_19 -> VAR_20 > 0 ) { if ( METHOD_1 ( VAR_21 -> VAR_22 ) ) { VAR_23 += VAR_24 -> VAR_25 ; } else { TYPE_17 * VAR_26 = VAR_27 + VAR_28 -> VAR_29 ;  while ( VAR_30 < VAR_31 ) VAR_32 += METHOD_2 ( VAR_33 -> VAR_34 , VAR_35 ) ;  } } VAR_36 : switch ( VAR_37 -> VAR_38 ) { case VAR_39 : VAR_40 = METHOD_3 ( VAR_41 -> VAR_42 , VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; break ; case VAR_50 : VAR_51 = METHOD_4 ( VAR_52 -> VAR_53 , VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; break ; case VAR_63 : VAR_64 = METHOD_5 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ; break ; case VAR_73 : VAR_74 = METHOD_6 ( VAR_75 , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 , VAR_80 , VAR_81 , VAR_82 ) ; break ; case VAR_83 : VAR_84 = METHOD_7 ( VAR_85 -> VAR_86 , VAR_87 -> VAR_88 , VAR_89 , VAR_90 ) ; break ; } if ( VAR_91 && VAR_92 < VAR_93 ) { if ( VAR_94 - VAR_95 -> VAR_96 < VAR_97 ) { VAR_98 : VAR_99 = VAR_100 ; VAR_101 += METHOD_8 ( VAR_102 -> VAR_103 , VAR_104 ) ; goto VAR_105 ; } if ( VAR_106 -> VAR_107 ) { TYPE_18 * VAR_108 ; switch ( VAR_109 -> VAR_110 ) { case VAR_111 : if ( ! METHOD_9 ( VAR_112 ) ) { VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , ( VAR_116 ? VAR_117 : VAR_118 ) , VAR_119 ) ; if ( ! METHOD_11 ( VAR_120 -> VAR_121 , VAR_122 , VAR_123 ) ) goto VAR_124 ; } break ; case VAR_125 : if ( METHOD_12 ( VAR_126 ) ) { TYPE_19 TYPE_20 VAR_127 = ( TYPE_21 * ) METHOD_13 ( VAR_128 -> VAR_129 , ( VAR_130 ? VAR_131 : VAR_132 ) , VAR_133 ) ; if ( VAR_134 && METHOD_14 ( VAR_135 -> VAR_136 , VAR_137 , VAR_138 ) ) goto VAR_139 ; } else if ( ! METHOD_15 ( VAR_140 -> VAR_141 , VAR_142 , VAR_143 ) TYPE_22 TYPE_23 && ! METHOD_16 ( VAR_144 -> VAR_145 , VAR_146 , VAR_147 ) ) goto VAR_148 ; break ; } } if ( VAR_149 -> VAR_150 == 0 ) { * VAR_151 = VAR_152 ; if ( VAR_153 ) { if ( * VAR_154 > VAR_155 ) * VAR_156 = METHOD_17 ( VAR_157 -> VAR_158 , VAR_159 , VAR_160 ) ; else * VAR_161 = METHOD_18 ( VAR_162 -> VAR_163 , ( VAR_164 ? VAR_165 : VAR_166 ) , VAR_167 ) ; } } else { if ( VAR_168 -> VAR_169 != VAR_170 ) { * VAR_171 = VAR_172 - VAR_173 -> VAR_174 ; if ( * VAR_175 > VAR_176 ) { * VAR_177 = METHOD_19 ( VAR_178 -> VAR_179 , VAR_180 , * VAR_181 , ( const TYPE_24 * * ) VAR_182 ) ; if ( VAR_183 && METHOD_20 ( * VAR_184 ) ) * VAR_185 = METHOD_21 ( VAR_186 -> VAR_187 , ( VAR_188 ? VAR_189 : VAR_190 ) , * VAR_191 ) ; } else { if ( VAR_192 ) * VAR_193 = METHOD_22 ( VAR_194 -> VAR_195 , ( VAR_196 ? VAR_197 : VAR_198 ) , * VAR_199 ) ; } } } * VAR_200 = VAR_201 - VAR_202 -> VAR_203 ; TYPE_25 TYPE_26 VAR_204 ( VAR_205 , "forward_search_rangesuccess:low:%d,high:%d,dmin:%d,dmax:%d\\n" , ( TYPE_27 ) ( * VAR_206 - VAR_207 ) , ( TYPE_28 ) ( * VAR_208 - VAR_209 ) , VAR_210 -> VAR_211 , VAR_212 -> VAR_213 ) ; return 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ;  enum VAR_4 VAR_5 ; unsigned TYPE_1 VAR_6 ;  METHOD_1 ( & VAR_7 -> VAR_8 , VAR_9 ) ;  METHOD_2 ( VAR_10 ) ; if ( VAR_11 != VAR_12 -> VAR_13 ) { METHOD_3 ( & VAR_14 -> VAR_15 , VAR_16 ) ; return ;  }  if ( METHOD_4 ( VAR_17 ) ) VAR_18 = VAR_19 ; else if ( VAR_20 -> VAR_21 [ 0 ] == 0 && VAR_22 -> VAR_23 [ 1 ] == 0 ) VAR_24 = VAR_25 ; else goto VAR_26 ; METHOD_5 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ; VAR_31 : METHOD_6 ( & VAR_32 -> VAR_33 , VAR_34 ) ; METHOD_7 ( VAR_35 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = ( struct STRUCT_OR_UNION_4 * ) & STRUCT_OR_UNION_5 -> VAR_0 . VAR_1 [ VAR_2 ] ; METHOD_1 ( STRUCT_OR_UNION_6 , 0 ) ;  if ( METHOD_2 ( STRUCT_OR_UNION_7 ) &&  ( TYPE_1 ) STRUCT_OR_UNION_8 -> VAR_3 . VAR_4 [ VAR_5 ] > VAR_6 ) METHOD_3 ( STRUCT_OR_UNION_9 , 0 ) ; }
static unsigned METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 , * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_0 VAR_6 ; while ( ( ( METHOD_1 ( VAR_7 ) + VAR_8 ) < VAR_9 ) && ! METHOD_2 ( & VAR_10 -> VAR_11 ) ) { struct STRUCT_OR_UNION_3 * VAR_12 ; struct STRUCT_OR_UNION_4 VAR_13 ; struct STRUCT_OR_UNION_5 VAR_14 [ VAR_15 ] ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; struct STRUCT_OR_UNION_8 VAR_16 [ VAR_17 - 1 ] ; TYPE_1 VAR_18 ; TYPE_2 VAR_19 ; TYPE_3 VAR_20 ; unsigned TYPE_4 VAR_21 ; TYPE_5 VAR_22 ; VAR_23 = METHOD_3 ( VAR_24 ) ; if ( ! VAR_25 ) continue ;  METHOD_4 ( & VAR_26 -> VAR_27 , VAR_28 ) ;  if ( ! VAR_29 ) { METHOD_5 ( VAR_30 ) ; continue ; } VAR_31 = VAR_32 -> VAR_33 . VAR_34 ; METHOD_6 ( ) ; METHOD_7 ( & VAR_35 , METHOD_8 ( & VAR_36 -> VAR_37 , VAR_38 ) , sizeof ( VAR_39 ) ) ; if ( VAR_40 . VAR_41 > VAR_42 -> VAR_43 && METHOD_9 ( VAR_44 , VAR_45 . VAR_46 ) ) { METHOD_10 ( VAR_47 ) ; continue ; } VAR_48 -> VAR_49 -= VAR_50 . VAR_51 ; VAR_52 -- ; VAR_53 -> VAR_54 . VAR_55 = ++ VAR_56 ; METHOD_11 ( VAR_57 , 0 , sizeof ( VAR_58 ) ) ; if ( VAR_59 . VAR_60 & VAR_61 ) { VAR_62 = METHOD_12 ( VAR_63 , VAR_64 , VAR_65 ) ; VAR_66 = VAR_67 -> VAR_68 . VAR_69 ;  if ( METHOD_13 ( VAR_70 < 0 ) ) {  METHOD_14 ( VAR_71 , & VAR_72 , VAR_73 ) ; continue ; } } VAR_74 = METHOD_15 ( VAR_75 , & VAR_76 , VAR_77 , VAR_78 ) ;  if ( METHOD_16 ( VAR_79 < 0 ) ) {  METHOD_17 ( VAR_80 , & VAR_81 , VAR_82 - VAR_83 ) ; continue ; } VAR_84 += VAR_85 ; if ( METHOD_18 ( VAR_86 . VAR_87 < VAR_88 ) ) { METHOD_19 ( VAR_89 -> VAR_90 , "Badpacketsize:%d\\n" , VAR_91 . VAR_92 ) ; METHOD_20 ( VAR_93 , & VAR_94 , VAR_95 ) ; continue ; } if ( METHOD_21 ( ( VAR_96 . VAR_97 + VAR_98 . VAR_99 ) > VAR_100 ) ) {  METHOD_22 ( VAR_101 -> VAR_102 ,  "txreq.offset:%x,size:%u,end:%lu\\n" , VAR_103 . VAR_104 , VAR_105 . VAR_106 , ( VAR_107 . VAR_108 & ~ VAR_109 ) + VAR_110 . VAR_111 ) ;  METHOD_23 ( VAR_112 , & VAR_113 , VAR_114 ) ;  continue ; } VAR_115 = METHOD_24 ( VAR_116 -> VAR_117 ) ; VAR_118 = VAR_119 -> VAR_120 [ VAR_121 ] ; VAR_122 = ( VAR_123 . VAR_124 > VAR_125 && VAR_126 < VAR_127 ) ? VAR_128 : VAR_129 . VAR_130 ; VAR_131 = METHOD_25 ( VAR_132 + VAR_133 + VAR_134 , VAR_135 | VAR_136 ) ; if ( METHOD_26 ( VAR_137 == VAR_138 ) ) { METHOD_27 ( VAR_139 -> VAR_140 , "Can\'tallocateaskbinstart_xmit.\\n" ) ; METHOD_28 ( VAR_141 , & VAR_142 , VAR_143 ) ; break ; } METHOD_29 ( VAR_144 , VAR_145 + VAR_146 ) ; if ( VAR_147 [ VAR_148 - 1 ] . VAR_149 ) { struct STRUCT_OR_UNION_9 * VAR_150 ; VAR_151 = & VAR_152 [ VAR_153 - 1 ] ; if ( METHOD_30 ( VAR_154 , VAR_155 , VAR_156 ) ) { METHOD_31 ( VAR_157 ) ;  METHOD_32 ( VAR_158 , & VAR_159 , VAR_160 ) ;  continue ; } } STRUCT_OR_UNION_10 = METHOD_33 ( VAR_161 , VAR_162 , VAR_163 ) ; if ( ! STRUCT_OR_UNION_11 ) { METHOD_34 ( VAR_164 ) ; METHOD_35 ( VAR_165 , & VAR_166 , VAR_167 ) ; continue ; } VAR_168 -> VAR_169 . VAR_170 . VAR_171 = VAR_172 . VAR_173 ; VAR_174 -> VAR_175 . VAR_176 = VAR_177 -> VAR_178 ; VAR_179 -> VAR_180 . VAR_181 = VAR_182 . VAR_183 ; VAR_184 -> VAR_185 . VAR_186 . VAR_187 = METHOD_36 ( METHOD_37 ( STRUCT_OR_UNION_12 ) ) ; VAR_188 -> VAR_189 . VAR_190 = VAR_191 ; VAR_192 -> VAR_193 . VAR_194 = VAR_195 . VAR_196 ; VAR_197 -> VAR_198 = VAR_199 . VAR_200 ; VAR_201 -> VAR_202 = VAR_203 ; VAR_204 ++ ; METHOD_38 ( & VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 , & VAR_209 , sizeof ( VAR_210 ) ) ; VAR_211 -> VAR_212 [ VAR_213 ] . VAR_214 = VAR_215 ; * ( ( TYPE_6 * ) VAR_216 -> VAR_217 ) = VAR_218 ; METHOD_39 ( VAR_219 , VAR_220 ) ; METHOD_40 ( VAR_221 ) -> VAR_222 = VAR_223 ; if ( VAR_224 < VAR_225 . VAR_226 ) { METHOD_41 ( VAR_227 ) -> VAR_228 ++ ; METHOD_42 ( & METHOD_43 ( VAR_229 ) -> VAR_230 [ 0 ] , VAR_231 ) ; } else { METHOD_44 ( & METHOD_45 ( VAR_232 ) -> VAR_233 [ 0 ] , VAR_234 ) ; } VAR_235 -> VAR_236 ++ ; VAR_237 = METHOD_46 ( VAR_238 , VAR_239 , VAR_240 , VAR_241 , VAR_242 ) ; if ( VAR_243 == VAR_244 ) { METHOD_47 ( VAR_245 ) ; METHOD_48 ( VAR_246 , & VAR_247 , VAR_248 ) ; continue ; } VAR_249 = VAR_250 ; METHOD_49 ( & VAR_251 -> VAR_252 , VAR_253 ) ; VAR_254 -> VAR_255 . VAR_256 = VAR_257 ; METHOD_50 ( VAR_258 ) ; if ( ( VAR_259 - VAR_260 -> VAR_261 ) >= METHOD_51 ( VAR_262 -> VAR_263 ) ) break ; } return VAR_264 - VAR_265 -> VAR_266 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 = ( struct STRUCT_OR_UNION_2 * ) & VAR_2 -> VAR_3 [ 1 ] ;  struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ; METHOD_2 ( VAR_7 , STRUCT_OR_UNION_5 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; if ( VAR_5 != 0 ) { METHOD_1 ( VAR_6 -> VAR_7 ) ; METHOD_2 ( VAR_8 ) ; return ; } METHOD_3 ( VAR_9 ) ;  METHOD_4 ( VAR_10 ) ;  if ( METHOD_5 ( & VAR_11 -> VAR_12 . VAR_13 ) ) { METHOD_6 ( & VAR_14 -> VAR_15 . VAR_16 ) ; METHOD_7 ( VAR_17 ) ; } }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 , * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; register const TYPE_6 * VAR_7 ; register TYPE_7 VAR_8 ; register TYPE_8 * VAR_9 ; register unsigned TYPE_9 * VAR_10 ; TYPE_10 VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_11 VAR_15 , VAR_16 ; unsigned TYPE_12 * VAR_17 ; METHOD_1 ( VAR_18 != ( const TYPE_13 * ) VAR_19 ) ; METHOD_2 ( VAR_20 -> VAR_21 == VAR_22 ) ; if ( VAR_23 -> VAR_24 != VAR_25 ) ( TYPE_14 ) METHOD_3 ( VAR_26 , METHOD_4 ( ) , "%s" , VAR_27 -> VAR_28 ) ; METHOD_5 ( VAR_29 != ( TYPE_15 * ) VAR_30 ) ; METHOD_6 ( VAR_31 -> VAR_32 == VAR_33 ) ; VAR_34 = METHOD_7 ( VAR_35 , VAR_36 ) ; if ( ( VAR_37 -> VAR_38 == 0 ) || ( VAR_39 -> VAR_40 == 0 ) ) METHOD_8 ( VAR_41 , "MustSpecifyImageSize" ) ; VAR_42 = METHOD_9 ( VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 , VAR_48 ) ; if ( VAR_49 == VAR_50 ) return ( METHOD_10 ( VAR_51 ) ) ; VAR_52 = ( TYPE_16 ) ( VAR_53 -> VAR_54 <= 8 ? 1 : 2 ) ; VAR_55 = VAR_56 -> VAR_57 ; VAR_58 = 2 ; VAR_59 = 2 ; if ( VAR_60 -> VAR_61 != ( TYPE_17 * ) VAR_62 ) { TYPE_18 VAR_63 ; TYPE_19 VAR_64 ; VAR_65 = METHOD_11 ( VAR_66 -> VAR_67 , & VAR_68 ) ; VAR_69 = ( TYPE_20 ) VAR_70 . VAR_71 ; VAR_72 = ( TYPE_21 ) VAR_73 . VAR_74 ; if ( ( VAR_75 & VAR_76 ) == 0 ) VAR_77 = VAR_78 ; if ( ( VAR_79 != 1 ) && ( VAR_80 != 2 ) && ( VAR_81 != 1 ) && ( VAR_82 != 2 ) ) METHOD_12 ( VAR_83 , "UnexpectedSamplingFactor" ) ; } if ( ( VAR_84 == VAR_85 ) || ( ( VAR_86 == VAR_87 ) && ( VAR_88 == 2 ) ) ) { VAR_89 = VAR_90 ; if ( VAR_91 == 2 ) VAR_92 = VAR_93 ; } if ( VAR_94 != VAR_95 ) { VAR_96 = METHOD_13 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; if ( VAR_101 == VAR_102 ) { VAR_103 = METHOD_14 ( VAR_104 ) ; return ( ( TYPE_22 * ) VAR_105 ) ; } if ( METHOD_15 ( VAR_106 , ( TYPE_23 ) VAR_107 -> VAR_108 ) == VAR_109 ) METHOD_16 ( VAR_110 , VAR_111 , "UnexpectedEndOfFile" , VAR_112 -> VAR_113 ) ; } if ( VAR_114 == VAR_115 ) VAR_116 = ( unsigned TYPE_24 * ) METHOD_17 ( ( TYPE_25 ) ( 2UL * VAR_117 -> VAR_118 + 2UL ) , ( TYPE_26 ) VAR_119 * sizeof ( * VAR_120 ) ) ; else VAR_121 = ( unsigned TYPE_27 * ) METHOD_18 ( VAR_122 -> VAR_123 , ( TYPE_28 ) VAR_124 * sizeof ( * VAR_125 ) ) ; if ( VAR_126 == ( unsigned TYPE_29 * ) VAR_127 ) METHOD_19 ( VAR_128 , "MemoryAllocationFailed" ) ; VAR_129 = VAR_130 ; do { VAR_131 = METHOD_20 ( VAR_132 , ( VAR_133 -> VAR_134 + VAR_135 - 1 ) / VAR_136 , ( VAR_137 -> VAR_138 + VAR_139 - 1 ) / VAR_140 , VAR_141 , VAR_142 ) ; if ( VAR_143 == ( TYPE_30 * ) VAR_144 )  METHOD_21 ( VAR_145 , "MemoryAllocationFailed" ) ;  if ( ( VAR_146 -> VAR_147 != VAR_148 ) && ( VAR_149 -> VAR_150 != 0 ) ) if ( VAR_151 -> VAR_152 >= ( VAR_153 -> VAR_154 + VAR_155 -> VAR_156 - 1 ) ) break ; VAR_157 = METHOD_22 ( VAR_158 , VAR_159 -> VAR_160 , VAR_161 -> VAR_162 , VAR_163 ) ; if ( VAR_164 == VAR_165 ) break ; if ( VAR_166 == VAR_167 ) { METHOD_23 ( "Y" , VAR_168 -> VAR_169 ) ; VAR_170 = METHOD_24 ( VAR_171 , VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 == VAR_176 ) {  VAR_177 = METHOD_25 ( VAR_178 ) ;  return ( ( TYPE_31 * ) VAR_179 ) ; } } for ( VAR_180 = 0 ; VAR_181 < ( TYPE_32 ) VAR_182 -> VAR_183 ; VAR_184 ++ ) { register TYPE_33 * VAR_185 ; if ( VAR_186 == VAR_187 ) { if ( ( VAR_188 > 0 ) || ( METHOD_26 ( VAR_189 ) == ( TYPE_34 * ) VAR_190 ) ) { VAR_191 = 2 * VAR_192 * VAR_193 -> VAR_194 ; VAR_195 = METHOD_27 ( VAR_196 , VAR_197 , VAR_198 ) ; if ( VAR_199 != ( TYPE_35 ) VAR_200 ) { VAR_201 = VAR_202 ; METHOD_28 ( VAR_203 , VAR_204 , "UnexpectedEndOfFile" , VAR_205 -> VAR_206 ) ; break ; } } VAR_207 = VAR_208 ; VAR_209 = METHOD_29 ( VAR_210 , 0 , VAR_211 , VAR_212 -> VAR_213 , 1 , VAR_214 ) ; if ( VAR_215 == ( TYPE_36 * ) VAR_216 ) break ; VAR_217 = METHOD_30 ( VAR_218 , 0 , VAR_219 , VAR_220 -> VAR_221 , 1 , VAR_222 ) ; if ( VAR_223 == ( TYPE_37 * ) VAR_224 ) break ; for ( VAR_225 = 0 ; VAR_226 < ( TYPE_38 ) VAR_227 -> VAR_228 ; VAR_229 += 2 ) { METHOD_31 ( VAR_230 , 0 , VAR_231 ) ; if ( VAR_232 == 1 ) METHOD_32 ( VAR_233 , METHOD_33 ( * VAR_234 ++ ) , VAR_235 ) ; else { METHOD_34 ( VAR_236 , METHOD_35 ( ( ( * VAR_237 ) << 8 ) | * ( VAR_238 + 1 ) ) , VAR_239 ) ; VAR_240 += 2 ; } if ( VAR_241 == 1 ) METHOD_36 ( VAR_242 , METHOD_37 ( * VAR_243 ++ ) , VAR_244 ) ; else { METHOD_38 ( VAR_245 , METHOD_39 ( ( ( * VAR_246 ) << 8 ) | * ( VAR_247 + 1 ) ) , VAR_248 ) ; VAR_249 += 2 ; } METHOD_40 ( VAR_250 , 0 , VAR_251 ) ; METHOD_41 ( VAR_252 , 0 , VAR_253 ) ; VAR_254 += METHOD_42 ( VAR_255 ) ; METHOD_43 ( VAR_256 , 0 , VAR_257 ) ; METHOD_44 ( VAR_258 , 0 , VAR_259 ) ; if ( VAR_260 == 1 ) METHOD_45 ( VAR_261 , METHOD_46 ( * VAR_262 ++ ) , VAR_263 ) ; else { METHOD_47 ( VAR_264 , METHOD_48 ( ( ( * VAR_265 ) << 8 ) | * ( VAR_266 + 1 ) ) , VAR_267 ) ; VAR_268 += 2 ; } if ( VAR_269 == 1 ) METHOD_49 ( VAR_270 , METHOD_50 ( * VAR_271 ++ ) , VAR_272 ) ; else { METHOD_51 ( VAR_273 , METHOD_52 ( ( ( * VAR_274 ) << 8 ) | * ( VAR_275 + 1 ) ) , VAR_276 ) ; VAR_277 += 2 ; } VAR_278 += METHOD_53 ( VAR_279 ) ; VAR_280 += METHOD_54 ( VAR_281 ) ; } } else { if ( ( VAR_282 > 0 ) || ( METHOD_55 ( VAR_283 ) == ( TYPE_39 * ) VAR_284 ) ) { VAR_285 = VAR_286 * VAR_287 -> VAR_288 ; VAR_289 = METHOD_56 ( VAR_290 , VAR_291 , VAR_292 ) ; if ( VAR_293 != ( TYPE_40 ) VAR_294 ) { VAR_295 = VAR_296 ; METHOD_57 ( VAR_297 , VAR_298 , "UnexpectedEndOfFile" , VAR_299 -> VAR_300 ) ; break ; } } VAR_301 = VAR_302 ; VAR_303 = METHOD_58 ( VAR_304 , 0 , VAR_305 , VAR_306 -> VAR_307 , 1 , VAR_308 ) ; if ( VAR_309 == ( TYPE_41 * ) VAR_310 ) break ; for ( VAR_311 = 0 ; VAR_312 < ( TYPE_42 ) VAR_313 -> VAR_314 ; VAR_315 ++ ) { if ( VAR_316 == 1 ) METHOD_59 ( VAR_317 , METHOD_60 ( * VAR_318 ++ ) , VAR_319 ) ; else { METHOD_61 ( VAR_320 , METHOD_62 ( ( ( * VAR_321 ) << 8 ) | * ( VAR_322 + 1 ) ) , VAR_323 ) ; VAR_324 += 2 ; } METHOD_63 ( VAR_325 , 0 , VAR_326 ) ; METHOD_64 ( VAR_327 , 0 , VAR_328 ) ; VAR_329 += METHOD_65 ( VAR_330 ) ; } } if ( METHOD_66 ( VAR_331 , VAR_332 ) == VAR_333 ) break ; if ( VAR_334 == VAR_335 ) if ( METHOD_67 ( VAR_336 , VAR_337 ) == VAR_338 ) break ; if ( VAR_339 -> VAR_340 == ( TYPE_43 * ) VAR_341 ) { VAR_342 = METHOD_68 ( VAR_343 , VAR_344 , ( TYPE_44 ) VAR_345 , VAR_346 -> VAR_347 ) ; if ( VAR_348 == VAR_349 ) break ; } } if ( VAR_350 == VAR_351 ) { ( TYPE_45 ) METHOD_69 ( VAR_352 ) ; METHOD_70 ( "U" , VAR_353 -> VAR_354 ) ; VAR_355 = METHOD_71 ( VAR_356 , VAR_357 , VAR_358 , VAR_359 ) ; if ( VAR_360 == VAR_361 ) {  VAR_362 = METHOD_72 ( VAR_363 ) ;  return ( ( TYPE_46 * ) VAR_364 ) ; } } if ( VAR_365 != VAR_366 ) { for ( VAR_367 = 0 ; VAR_368 < ( TYPE_47 ) VAR_369 -> VAR_370 ; VAR_371 ++ ) { VAR_372 = VAR_373 * VAR_374 -> VAR_375 ; VAR_376 = METHOD_73 ( VAR_377 , VAR_378 , VAR_379 ) ; if ( VAR_380 != ( TYPE_48 ) VAR_381 ) { VAR_382 = VAR_383 ; METHOD_74 ( VAR_384 , VAR_385 , "UnexpectedEndOfFile" , VAR_386 -> VAR_387 ) ; break ; } VAR_388 = VAR_389 ; VAR_390 = METHOD_75 ( VAR_391 , 0 , VAR_392 , VAR_393 -> VAR_394 , 1 , VAR_395 ) ; if ( VAR_396 == ( TYPE_49 * ) VAR_397 ) break ; for ( VAR_398 = 0 ; VAR_399 < ( TYPE_50 ) VAR_400 -> VAR_401 ; VAR_402 ++ ) { METHOD_76 ( VAR_403 , 0 , VAR_404 ) ; if ( VAR_405 == 1 ) METHOD_77 ( VAR_406 , METHOD_78 ( * VAR_407 ++ ) , VAR_408 ) ; else { METHOD_79 ( VAR_409 , METHOD_80 ( ( ( * VAR_410 ) << 8 ) | * ( VAR_411 + 1 ) ) , VAR_412 ) ; VAR_413 += 2 ; } METHOD_81 ( VAR_414 , 0 , VAR_415 ) ; VAR_416 += METHOD_82 ( VAR_417 ) ; } if ( METHOD_83 ( VAR_418 , VAR_419 ) == VAR_420 ) break ; } if ( VAR_421 == VAR_422 ) { ( TYPE_51 ) METHOD_84 ( VAR_423 ) ; METHOD_85 ( "V" , VAR_424 -> VAR_425 ) ; VAR_426 = METHOD_86 ( VAR_427 , VAR_428 , VAR_429 , VAR_430 ) ; if ( VAR_431 == VAR_432 ) {  VAR_433 = METHOD_87 ( VAR_434 ) ;  return ( ( TYPE_52 * ) VAR_435 ) ; } } for ( VAR_436 = 0 ; VAR_437 < ( TYPE_53 ) VAR_438 -> VAR_439 ; VAR_440 ++ ) { VAR_441 = VAR_442 * VAR_443 -> VAR_444 ; VAR_445 = METHOD_88 ( VAR_446 , VAR_447 , VAR_448 ) ; if ( VAR_449 != ( TYPE_54 ) VAR_450 ) { VAR_451 = VAR_452 ; METHOD_89 ( VAR_453 , VAR_454 , "UnexpectedEndOfFile" , VAR_455 -> VAR_456 ) ; break ; } VAR_457 = VAR_458 ; VAR_459 = METHOD_90 ( VAR_460 , 0 , VAR_461 , VAR_462 -> VAR_463 , 1 , VAR_464 ) ; if ( VAR_465 == ( TYPE_55 * ) VAR_466 ) break ; for ( VAR_467 = 0 ; VAR_468 < ( TYPE_56 ) VAR_469 -> VAR_470 ; VAR_471 ++ ) { if ( VAR_472 == 1 ) METHOD_91 ( VAR_473 , METHOD_92 ( * VAR_474 ++ ) , VAR_475 ) ; else { METHOD_93 ( VAR_476 , METHOD_94 ( ( ( * VAR_477 ) << 8 ) | * ( VAR_478 + 1 ) ) , VAR_479 ) ; VAR_480 += 2 ; } VAR_481 += METHOD_95 ( VAR_482 ) ; } if ( METHOD_96 ( VAR_483 , VAR_484 ) == VAR_485 ) break ; } } VAR_486 = METHOD_97 ( VAR_487 , VAR_488 -> VAR_489 , VAR_490 -> VAR_491 , VAR_492 , VAR_493 ) ; VAR_494 = METHOD_98 ( VAR_495 ) ; if ( VAR_496 == ( TYPE_57 * ) VAR_497 )  METHOD_99 ( VAR_498 , "MemoryAllocationFailed" ) ;  for ( VAR_499 = 0 ; VAR_500 < ( TYPE_58 ) VAR_501 -> VAR_502 ; VAR_503 ++ ) { VAR_504 = METHOD_100 ( VAR_505 , 0 , VAR_506 , VAR_507 -> VAR_508 , 1 , VAR_509 ) ; VAR_510 = METHOD_101 ( VAR_511 , 0 , VAR_512 , VAR_513 -> VAR_514 , 1 , VAR_515 ) ; if ( ( VAR_516 == ( TYPE_59 * ) VAR_517 ) || ( VAR_518 == ( const TYPE_60 * ) VAR_519 ) ) break ; for ( VAR_520 = 0 ; VAR_521 < ( TYPE_61 ) VAR_522 -> VAR_523 ; VAR_524 ++ ) { METHOD_102 ( VAR_525 , METHOD_103 ( VAR_526 , VAR_527 ) , VAR_528 ) ; METHOD_104 ( VAR_529 , METHOD_105 ( VAR_530 , VAR_531 ) , VAR_532 ) ; VAR_533 += METHOD_106 ( VAR_534 ) ; VAR_535 += METHOD_107 ( VAR_536 ) ; } if ( METHOD_108 ( VAR_537 , VAR_538 ) == VAR_539 ) break ; } VAR_540 = METHOD_109 ( VAR_541 ) ; if ( METHOD_110 ( VAR_542 , VAR_543 , VAR_544 ) == VAR_545 ) break ; if ( VAR_546 == VAR_547 ) ( TYPE_62 ) METHOD_111 ( VAR_548 -> VAR_549 , VAR_550 -> VAR_551 , VAR_552 ) ; if ( METHOD_112 ( VAR_553 ) != VAR_554 ) { METHOD_113 ( VAR_555 , VAR_556 , "UnexpectedEndOfFile" , VAR_557 -> VAR_558 ) ; break ; } if ( VAR_559 -> VAR_560 != 0 ) if ( VAR_561 -> VAR_562 >= ( VAR_563 -> VAR_564 + VAR_565 -> VAR_566 - 1 ) ) break ; if ( VAR_567 == VAR_568 ) VAR_569 = METHOD_114 ( VAR_570 , ( TYPE_63 ) ( 2 * VAR_571 * VAR_572 -> VAR_573 ) , VAR_574 ) ; else VAR_575 = METHOD_115 ( VAR_576 , ( TYPE_64 ) VAR_577 * VAR_578 -> VAR_579 , VAR_580 ) ; if ( VAR_581 != 0 ) { METHOD_116 ( VAR_582 , VAR_583 , VAR_584 ) ; if ( METHOD_117 ( VAR_585 ) == ( TYPE_65 * ) VAR_586 ) {  VAR_587 = METHOD_118 ( VAR_588 ) ;  return ( ( TYPE_66 * ) VAR_589 ) ; } VAR_590 = METHOD_119 ( VAR_591 ) ; VAR_592 = METHOD_120 ( VAR_593 , VAR_594 , METHOD_121 ( VAR_595 ) , METHOD_122 ( VAR_596 ) ) ; if ( VAR_597 == VAR_598 ) break ; } } while ( VAR_599 != 0 ) ; VAR_600 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; ( TYPE_68 ) METHOD_124 ( VAR_602 ) ; if ( VAR_603 == VAR_604 ) return ( METHOD_125 ( VAR_605 ) ) ; return ( METHOD_126 ( VAR_606 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 , VAR_1 , VAR_2 ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_0 * VAR_4 ; struct STRUCT_OR_UNION_1 VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; TYPE_4 * VAR_9 ; TYPE_5 * VAR_10 ; TYPE_6 * VAR_11 ; TYPE_7 VAR_12 ; TYPE_8 VAR_13 ; TYPE_9 * VAR_14 ; struct STRUCT_OR_UNION_5 * VAR_15 ; METHOD_1 ( 1 , 0 ) ; METHOD_2 ( "KVP" , 0 , VAR_16 ) ; METHOD_3 ( VAR_17 , "KVPstarting;pidis:%d" , METHOD_4 ( ) ) ; METHOD_5 ( ) ; if ( METHOD_6 ( ) ) { METHOD_7 ( VAR_18 , "Failedtoinitializethepools" ) ; METHOD_8 ( VAR_19 ) ; } VAR_20 = METHOD_9 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( VAR_24 < 0 ) { METHOD_10 ( VAR_25 , "netlinksocketcreationfailed;error:%d" , VAR_26 ) ; METHOD_11 ( VAR_27 ) ; } VAR_28 . VAR_29 = VAR_30 ; VAR_31 . VAR_32 = 0 ; VAR_33 . VAR_34 = 0 ; VAR_35 . VAR_36 = VAR_37 ; VAR_38 = METHOD_12 ( VAR_39 , ( struct STRUCT_OR_UNION_6 * ) & VAR_40 , sizeof ( VAR_41 ) ) ; if ( VAR_42 < 0 ) { METHOD_13 ( VAR_43 , "bindfailed;error:%d" , VAR_44 ) ; METHOD_14 ( VAR_45 ) ; METHOD_15 ( VAR_46 ) ; } VAR_47 = VAR_48 . VAR_49 ; METHOD_16 ( VAR_50 , 270 , 1 , & VAR_51 , sizeof ( VAR_52 ) ) ; VAR_53 = ( struct STRUCT_OR_UNION_7 * ) VAR_54 ; VAR_55 -> VAR_56 . VAR_57 = VAR_58 ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 ; VAR_63 = ( struct STRUCT_OR_UNION_8 * ) VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = VAR_69 ; VAR_70 -> VAR_71 = 0 ; VAR_72 -> VAR_73 = sizeof ( struct STRUCT_OR_UNION_9 ) ; VAR_74 = METHOD_17 ( VAR_75 , VAR_76 ) ; if ( VAR_77 < 0 ) { METHOD_18 ( VAR_78 , "netlink_sendfailed;error:%d" , VAR_79 ) ; METHOD_19 ( VAR_80 ) ; METHOD_20 ( VAR_81 ) ; } VAR_82 . VAR_83 = VAR_84 ; while ( 1 ) { struct STRUCT_OR_UNION_10 * VAR_85 = ( struct STRUCT_OR_UNION_11 * ) & VAR_86 ; TYPE_10 VAR_87 = sizeof ( VAR_88 ) ; VAR_89 . VAR_90 = VAR_91 ; VAR_92 . VAR_93 = 0 ; METHOD_21 ( & VAR_94 , 1 , - 1 ) ; VAR_95 = METHOD_22 ( VAR_96 , VAR_97 , sizeof ( VAR_98 ) , 0 , VAR_99 , & VAR_100 ) ;  if ( VAR_101 < 0 || VAR_102 . VAR_103 ) {  METHOD_23 ( VAR_104 , "recvfromfailed;pid:%uerror:%d%s" , VAR_105 . VAR_106 , VAR_107 , METHOD_24 ( VAR_108 ) ) ; METHOD_25 ( VAR_109 ) ; return - 1 ; }  VAR_110 = ( struct STRUCT_OR_UNION_12 * ) VAR_111 ;  VAR_112 = ( struct STRUCT_OR_UNION_13 * ) METHOD_26 ( VAR_113 ) ; VAR_114 = ( struct STRUCT_OR_UNION_14 * ) VAR_115 -> VAR_116 ; VAR_117 = VAR_118 -> VAR_119 . VAR_120 ; VAR_121 = VAR_122 -> VAR_123 . VAR_124 ; VAR_125 -> VAR_126 = VAR_127 ; if ( ( VAR_128 ) && ( VAR_129 == VAR_130 ) ) { VAR_131 = 0 ; VAR_132 = ( TYPE_11 * ) VAR_133 -> VAR_134 . VAR_135 . VAR_136 ; VAR_137 = METHOD_27 ( METHOD_28 ( VAR_138 ) + 1 ) ; if ( VAR_139 ) { METHOD_29 ( VAR_140 , VAR_141 ) ; METHOD_30 ( VAR_142 , "KVPLICVersion:%s" , VAR_143 ) ; } else { METHOD_31 ( VAR_144 , "mallocfailed" ) ; } continue ; } switch ( VAR_145 ) { case VAR_146 : VAR_147 = & VAR_148 -> VAR_149 . VAR_150 ; VAR_151 = METHOD_32 ( ( TYPE_12 * ) VAR_152 -> VAR_153 ) ; if ( VAR_154 == VAR_155 ) { VAR_156 -> VAR_157 = VAR_158 ; break ; } VAR_159 = METHOD_33 ( 0 , VAR_160 , VAR_161 , VAR_162 , ( VAR_163 * 2 ) ) ; if ( VAR_164 ) VAR_165 -> VAR_166 = VAR_167 ; METHOD_34 ( VAR_168 ) ; break ; case VAR_169 : VAR_170 = & VAR_171 -> VAR_172 . VAR_173 ; VAR_174 = METHOD_35 ( ( TYPE_13 * ) VAR_175 -> VAR_176 ) ; if ( VAR_177 == VAR_178 ) { VAR_179 -> VAR_180 = VAR_181 ; break ; } VAR_182 = METHOD_36 ( VAR_183 , VAR_184 ) ; if ( VAR_185 ) VAR_186 -> VAR_187 = VAR_188 ; METHOD_37 ( VAR_189 ) ; break ; case VAR_190 : if ( METHOD_38 ( VAR_191 , VAR_192 -> VAR_193 . VAR_194 . VAR_195 . VAR_196 , VAR_197 -> VAR_198 . VAR_199 . VAR_200 . VAR_201 , VAR_202 -> VAR_203 . VAR_204 . VAR_205 . VAR_206 , VAR_207 -> VAR_208 . VAR_209 . VAR_210 . VAR_211 ) ) VAR_212 -> VAR_213 = VAR_214 ; break ; case VAR_215 : if ( METHOD_39 ( VAR_216 , VAR_217 -> VAR_218 . VAR_219 . VAR_220 . VAR_221 , VAR_222 -> VAR_223 . VAR_224 . VAR_225 . VAR_226 , VAR_227 -> VAR_228 . VAR_229 . VAR_230 . VAR_231 , VAR_232 -> VAR_233 . VAR_234 . VAR_235 . VAR_236 ) ) VAR_237 -> VAR_238 = VAR_239 ; break ; case VAR_240 : if ( METHOD_40 ( VAR_241 , VAR_242 -> VAR_243 . VAR_244 . VAR_245 , VAR_246 -> VAR_247 . VAR_248 . VAR_249 ) ) VAR_250 -> VAR_251 = VAR_252 ; break ; default : break ; } if ( VAR_253 != VAR_254 ) goto VAR_255 ; if ( VAR_256 != VAR_257 ) { if ( METHOD_41 ( VAR_258 , VAR_259 -> VAR_260 . VAR_261 . VAR_262 , VAR_263 -> VAR_264 . VAR_265 . VAR_266 . VAR_267 , VAR_268 , VAR_269 -> VAR_270 . VAR_271 . VAR_272 . VAR_273 , VAR_274 ) ) VAR_275 -> VAR_276 = VAR_277 ; goto VAR_278 ; } VAR_279 = ( struct STRUCT_OR_UNION_15 * ) VAR_280 -> VAR_281 ; VAR_282 = ( TYPE_14 * ) VAR_283 -> VAR_284 . VAR_285 . VAR_286 . VAR_287 ; VAR_288 = ( TYPE_15 * ) VAR_289 -> VAR_290 . VAR_291 . VAR_292 . VAR_293 ; switch ( VAR_294 -> VAR_295 . VAR_296 . VAR_297 ) { case VAR_298 : METHOD_42 ( VAR_299 , VAR_300 ) ; METHOD_43 ( VAR_301 , "FullyQualifiedDomainName" ) ; break ; case VAR_302 : METHOD_44 ( VAR_303 , "IntegrationServicesVersion" ) ; METHOD_45 ( VAR_304 , VAR_305 ) ; break ; case VAR_306 : METHOD_46 ( VAR_307 , VAR_308 , VAR_309 , VAR_310 , VAR_311 ) ; METHOD_47 ( VAR_312 , "NetworkAddressIPv4" ) ; break ; case VAR_313 : METHOD_48 ( VAR_314 , VAR_315 , VAR_316 , VAR_317 , VAR_318 ) ; METHOD_49 ( VAR_319 , "NetworkAddressIPv6" ) ; break ; case VAR_320 : METHOD_50 ( VAR_321 , VAR_322 ) ; METHOD_51 ( VAR_323 , "OSBuildNumber" ) ; break ; case VAR_324 : METHOD_52 ( VAR_325 , VAR_326 ) ; METHOD_53 ( VAR_327 , "OSName" ) ; break ; case VAR_328 : METHOD_54 ( VAR_329 , VAR_330 ) ; METHOD_55 ( VAR_331 , "OSMajorVersion" ) ; break ; case VAR_332 : METHOD_56 ( VAR_333 , VAR_334 ) ; METHOD_57 ( VAR_335 , "OSMinorVersion" ) ; break ; case VAR_336 : METHOD_58 ( VAR_337 , VAR_338 ) ; METHOD_59 ( VAR_339 , "OSVersion" ) ; break ; case VAR_340 : METHOD_60 ( VAR_341 , VAR_342 ) ; METHOD_61 ( VAR_343 , "ProcessorArchitecture" ) ; break ; default : VAR_344 -> VAR_345 = VAR_346 ; break ; } VAR_347 : VAR_348 -> VAR_349 . VAR_350 = VAR_351 ; VAR_352 -> VAR_353 . VAR_354 = VAR_355 ; VAR_356 -> VAR_357 = 0 ; VAR_358 -> VAR_359 = sizeof ( struct STRUCT_OR_UNION_16 ) ; VAR_360 = METHOD_62 ( VAR_361 , VAR_362 ) ; if ( VAR_363 < 0 ) { METHOD_63 ( VAR_364 , "net_linksendfailed;error:%d" , VAR_365 ) ; METHOD_64 ( VAR_366 ) ; } } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 ) { TYPE_4 VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; if ( METHOD_1 ( VAR_8 ) != 2 ) return - VAR_9 ; VAR_10 = ( VAR_11 >> 8 ) & 15 ; VAR_12 = VAR_13 -> VAR_14 [ VAR_15 ] ; if ( ! VAR_16 ) { METHOD_2 ( VAR_17 , VAR_18 , VAR_19 ) ;  METHOD_3 ( VAR_20 , 1 , 0 ,  VAR_21 , VAR_22 ) ; } VAR_23 = - VAR_24 ; switch ( VAR_25 & 0xF000 ) { case 0x0000 : if ( VAR_26 == 0x000B ) { VAR_27 = METHOD_4 ( VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 == 0 ) VAR_32 -> VAR_33 = VAR_34 -> VAR_35 ; } else if ( ( VAR_36 & 0x00FF ) == 0x0023 ) { VAR_37 = METHOD_5 ( VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == 0 ) VAR_42 -> VAR_43 += VAR_44 + 4 ; } else if ( ( VAR_45 & 0x00FF ) == 0x0003 ) { VAR_46 = METHOD_6 ( VAR_47 , VAR_48 , VAR_49 ) ; if ( VAR_50 == 0 ) { VAR_51 -> VAR_52 = VAR_53 -> VAR_54 + 4 ; VAR_55 -> VAR_56 += VAR_57 + 4 ; } } else { goto VAR_58 ; } break ; case 0x1000 : goto VAR_59 ; case 0x2000 : goto VAR_60 ; case 0x4000 : if ( ( VAR_61 & 0x00FF ) == 0x002B ) { VAR_62 = METHOD_7 ( VAR_63 , VAR_64 , VAR_65 ) ; if ( VAR_66 == 0 ) VAR_67 -> VAR_68 = VAR_69 ; } else if ( ( VAR_70 & 0x00FF ) == 0x000B ) { VAR_71 = METHOD_8 ( VAR_72 , VAR_73 , VAR_74 ) ; if ( VAR_75 == 0 ) { VAR_76 -> VAR_77 = VAR_78 -> VAR_79 + 4 ; VAR_80 -> VAR_81 = VAR_82 ; } } else { goto VAR_83 ; } break ; case 0x5000 : goto VAR_84 ; case 0x6000 : goto VAR_85 ; case 0x8000 : switch ( VAR_86 & 0x0F00 ) { case 0x0100 : goto VAR_87 ; case 0x0500 : goto VAR_88 ; case 0x0B00 : break ; case 0x0F00 : VAR_89 = METHOD_9 ( VAR_90 , VAR_91 , VAR_92 ) ; if ( VAR_93 == 0 ) { if METHOD_10 ( VAR_94 ) || METHOD_11 ( VAR_95 ) if ( ( VAR_96 -> VAR_97 & 0x00000001 ) != 0 ) VAR_98 -> VAR_99 += 4 ; else VAR_100 -> VAR_101 += METHOD_12 ( VAR_102 ) ; } break ; case 0x0900 : break ; case 0x0D00 : VAR_103 = METHOD_13 ( VAR_104 , VAR_105 , VAR_106 ) ; if ( VAR_107 == 0 ) { if METHOD_14 ( VAR_108 ) || METHOD_15 ( VAR_109 ) if ( ( VAR_110 -> VAR_111 & 0x00000001 ) == 0 ) VAR_112 -> VAR_113 += 4 ; else VAR_114 -> VAR_115 += METHOD_16 ( VAR_116 ) ; } break ; } break ; case 0xA000 : VAR_117 = METHOD_17 ( VAR_118 , VAR_119 , VAR_120 ) ; if ( VAR_121 == 0 ) VAR_122 -> VAR_123 += METHOD_18 ( VAR_124 ) ; break ; case 0xB000 : VAR_125 = METHOD_19 ( VAR_126 , VAR_127 , VAR_128 ) ; if ( VAR_129 == 0 ) { VAR_130 -> VAR_131 = VAR_132 -> VAR_133 + 4 ; VAR_134 -> VAR_135 += METHOD_20 ( VAR_136 ) ; } break ; } return VAR_137 ; VAR_138 : VAR_139 = METHOD_21 ( VAR_140 , VAR_141 , VAR_142 ) ; if ( VAR_143 == 0 ) VAR_144 -> VAR_145 += METHOD_22 ( VAR_146 ) ; return VAR_147 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; TYPE_6 * VAR_7 = VAR_8 ; TYPE_7 * VAR_9 = VAR_10 ; CRM_CHECK ( VAR_11 != VAR_12 , return VAR_13 ) ; CRM_CHECK ( VAR_14 != VAR_15 , return VAR_16 ) ;  if ( VAR_17 -> VAR_18 == VAR_19 ) {  METHOD_1 ( "SkippingclientwithNULLchannel" ) ; return VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 , VAR_23 ) ; METHOD_3 ( VAR_24 != VAR_25 ) ; if ( VAR_26 -> VAR_27 && METHOD_4 ( VAR_28 , VAR_29 ) ) { VAR_30 = VAR_31 ; } else if ( VAR_32 -> VAR_33 && METHOD_5 ( VAR_34 , VAR_35 ) ) { VAR_36 = VAR_37 ; } else if ( VAR_38 -> VAR_39 && METHOD_6 ( VAR_40 , VAR_41 ) ) { VAR_42 = VAR_43 ; } else if ( VAR_44 -> VAR_45 && METHOD_7 ( VAR_46 , VAR_47 ) ) { VAR_48 = VAR_49 ; } else if ( VAR_50 -> VAR_51 && METHOD_8 ( VAR_52 , VAR_53 ) ) { VAR_54 = VAR_55 ; } if ( VAR_56 ) { if ( VAR_57 -> VAR_58 ) { if ( METHOD_9 ( VAR_59 -> VAR_60 , 0 , VAR_61 , VAR_62 ) == VAR_63 ) { METHOD_10 ( "Notificationofclient%s/%sfailed" , VAR_64 -> VAR_65 , VAR_66 -> VAR_67 ) ; } TYPE_8 TYPE_9 } else if ( VAR_68 -> VAR_69 ) { METHOD_11 ( "Sent%snotificationtoclient%s/%s" , VAR_70 , VAR_71 -> VAR_72 , VAR_73 -> VAR_74 ) ; METHOD_12 ( VAR_75 -> VAR_76 , VAR_77 , VAR_78 -> VAR_79 ) ; } else { METHOD_13 ( "Unknowntransportfor%s" , VAR_80 -> VAR_81 ) ; } } return VAR_82 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_4 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_5 * VAR_12 , * VAR_13 , * VAR_14 ; TYPE_6 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ; TYPE_7 VAR_20 , VAR_21 , VAR_22 ; if ( ! METHOD_1 ( VAR_23 , "snO!ss" , & VAR_24 , & VAR_25 , & VAR_26 , & VAR_27 , & VAR_28 , & VAR_29 , & VAR_30 , & VAR_31 , & VAR_32 ) ) return VAR_33 ; VAR_34 = METHOD_2 ( VAR_35 + 1 ) ; if ( ! VAR_36 ) return METHOD_3 ( ) ; VAR_37 = 0 ; VAR_38 = 0 ; VAR_39 = VAR_40 ; VAR_41 = VAR_42 ; VAR_43 = METHOD_4 ( VAR_44 ) ; for ( VAR_45 = 0 ; VAR_46 < VAR_47 ; VAR_48 ++ ) { VAR_49 = METHOD_5 ( VAR_50 , VAR_51 ) ; if ( ! METHOD_6 ( VAR_52 ) ) { METHOD_7 ( VAR_53 ) ; METHOD_8 ( VAR_54 , "expectingtuple" ) ; return VAR_55 ; } if ( METHOD_9 ( VAR_56 ) != 3 ) { METHOD_10 ( VAR_57 ) ; METHOD_11 ( VAR_58 , "expectingtupleofsize3" ) ; return VAR_59 ; } VAR_60 = METHOD_12 ( METHOD_13 ( VAR_61 , 0 ) ) ; VAR_62 = METHOD_14 ( METHOD_15 ( VAR_63 , 1 ) ) ; VAR_64 = METHOD_16 ( METHOD_17 ( VAR_65 , 2 ) ) ; if ( VAR_66 + VAR_67 > VAR_68 ||  VAR_69 + VAR_70 > VAR_71 + VAR_72 ||  VAR_73 + VAR_74 > VAR_75 + VAR_76 ) { METHOD_18 ( VAR_77 ) ; METHOD_19 ( VAR_78 , "corruptpatch(overflow)" ) ; return VAR_79 ; }  METHOD_20 ( VAR_80 + VAR_81 , VAR_82 , VAR_83 ) ;  VAR_84 += VAR_85 ; for ( VAR_86 = 0 ; VAR_87 < VAR_88 ; VAR_89 ++ ) if ( ( VAR_90 + VAR_91 >= 0 ) && ( VAR_92 + VAR_93 < VAR_94 ) ) VAR_95 [ VAR_96 + VAR_97 ] += VAR_98 [ VAR_99 + VAR_100 ] ; VAR_101 += VAR_102 ; VAR_103 += VAR_104 ; METHOD_21 ( VAR_105 + VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 += VAR_110 ; VAR_111 += VAR_112 ; VAR_113 += VAR_114 ; } if ( VAR_115 != VAR_116 || VAR_117 != VAR_118 + VAR_119 || VAR_120 != VAR_121 + VAR_122 ) { METHOD_22 ( VAR_123 ) ; METHOD_23 ( VAR_124 , "corruptpatch(underflow)" ) ; return VAR_125 ; } VAR_126 = METHOD_24 ( VAR_127 , VAR_128 ) ; METHOD_25 ( VAR_129 ) ; return VAR_130 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 ) { struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 ; TYPE_0 VAR_6 ; TYPE_1 VAR_7 , VAR_8 ; unsigned TYPE_2 * VAR_9 = VAR_10 ; unsigned TYPE_3 * VAR_11 ; TYPE_4 VAR_12 ; TYPE_5 VAR_13 ; TYPE_6 VAR_14 ; struct STRUCT_OR_UNION_6 VAR_15 ; TYPE_7 VAR_16 ; TYPE_8 VAR_17 ; struct STRUCT_OR_UNION_7 VAR_18 = { } ; struct STRUCT_OR_UNION_8 * VAR_19 = METHOD_1 ( VAR_20 ) ; TYPE_9 VAR_21 = VAR_22 -> VAR_23 == 2 && VAR_24 -> VAR_25 [ 0 ] == '.' && VAR_26 -> VAR_27 [ 1 ] == '.' ; VAR_28 = METHOD_2 ( VAR_29 ) + VAR_30 -> VAR_31 ; VAR_32 = METHOD_3 ( VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 = VAR_41 -> VAR_42 = VAR_43 & ( VAR_44 -> VAR_45 -> VAR_46 - 1 ) ; if ( VAR_47 -> VAR_48 != VAR_49 ) { if ( METHOD_4 ( VAR_50 , VAR_51 >> VAR_52 -> VAR_53 -> VAR_54 , & VAR_55 , & VAR_56 , & VAR_57 , & VAR_58 ) != ( VAR_59 >> 30 ) ) goto VAR_60 ; VAR_61 = METHOD_5 ( VAR_62 -> VAR_63 , & VAR_64 , VAR_65 ) ; if ( ( ++ VAR_66 << VAR_67 -> VAR_68 -> VAR_69 ) < VAR_70 ) { if ( VAR_71 -> VAR_72 == VAR_73 ) VAR_74 . VAR_75 -= sizeof ( struct STRUCT_OR_UNION_9 ) ; else if ( VAR_76 -> VAR_77 == VAR_78 ) VAR_79 . VAR_80 -= sizeof ( struct STRUCT_OR_UNION_10 ) ; } else VAR_81 = 0 ; VAR_82 -> VAR_83 = VAR_84 -> VAR_85 = METHOD_6 ( VAR_86 -> VAR_87 , VAR_88 ) ; if ( ! VAR_89 -> VAR_90 ) goto VAR_91 ; } VAR_92 = METHOD_7 ( VAR_93 , VAR_94 ) ; if ( ! VAR_95 ) goto VAR_96 ; while ( VAR_97 < VAR_98 ) { VAR_99 = METHOD_8 ( VAR_100 , & VAR_101 , VAR_102 , VAR_103 , & VAR_104 , & VAR_105 , & VAR_106 , & VAR_107 ) ; if ( ! VAR_108 ) goto VAR_109 ; VAR_110 = METHOD_9 ( VAR_111 -> VAR_112 ) ; VAR_113 = VAR_114 -> VAR_115 ; if ( VAR_116 -> VAR_117 == VAR_118 -> VAR_119 ) { VAR_120 = VAR_121 -> VAR_122 + VAR_123 ; } else { TYPE_10 VAR_124 ; VAR_125 = VAR_126 -> VAR_127 + sizeof ( struct STRUCT_OR_UNION_11 ) + VAR_128 + VAR_129 ; if ( VAR_130 >= VAR_131 ) VAR_132 = ( TYPE_11 * ) ( VAR_133 -> VAR_134 -> VAR_135 + VAR_136 - VAR_137 ) ; else { VAR_138 = VAR_139 ; METHOD_10 ( VAR_140 , VAR_141 -> VAR_142 + VAR_143 , VAR_144 - VAR_145 ) ; METHOD_11 ( VAR_146 + VAR_147 - VAR_148 , VAR_149 -> VAR_150 -> VAR_151 , VAR_152 ) ; } } if ( ( VAR_153 -> VAR_154 & VAR_155 ) != 0 ) { if ( ! METHOD_12 ( VAR_156 -> VAR_157 , VAR_158 ) ) continue ; } if ( ( VAR_159 -> VAR_160 & VAR_161 ) != 0 ) { if ( ! METHOD_13 ( VAR_162 -> VAR_163 , VAR_164 ) ) continue ; } if ( ( VAR_165 -> VAR_166 & VAR_167 ) && VAR_168 ) goto VAR_169 ; if ( ! VAR_170 ) continue ;  VAR_171 = METHOD_14 ( VAR_172 -> VAR_173 , VAR_174 , VAR_175 , VAR_176 ) ;  if ( VAR_177 && METHOD_15 ( VAR_178 , VAR_179 , VAR_180 -> VAR_181 , VAR_182 -> VAR_183 ) ) goto VAR_184 ; } VAR_185 : VAR_186 = VAR_187 ; if ( VAR_188 -> VAR_189 != VAR_190 -> VAR_191 ) METHOD_16 ( VAR_192 -> VAR_193 ) ; METHOD_17 ( VAR_194 -> VAR_195 ) ; VAR_196 : METHOD_18 ( VAR_197 . VAR_198 ) ; METHOD_19 ( VAR_199 ) ; return VAR_200 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { unsigned TYPE_5 VAR_4 [ 128 ] ; TYPE_6 VAR_5 = 0 ; unsigned TYPE_7 VAR_6 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( STRUCT_OR_UNION_4 ) ; METHOD_3 ( ! STRUCT_OR_UNION_5 ) ; if ( ! METHOD_4 ( VAR_9 ) ) return - VAR_10 ; if ( VAR_11 < VAR_12 || VAR_13 > VAR_14 ) return - VAR_15 ; if ( * VAR_16 < VAR_17 [ METHOD_5 ( VAR_18 ) ] ) { METHOD_6 ( "get_ctl:len%u<%u\\n" , * VAR_19 , VAR_20 [ METHOD_7 ( VAR_21 ) ] ) ; return - VAR_22 ; } VAR_23 = VAR_24 [ METHOD_8 ( VAR_25 ) ] ; if ( VAR_26 > 128 ) return - VAR_27 ; if ( METHOD_9 ( VAR_28 , VAR_29 , VAR_30 ) != 0 ) return - VAR_31 ; if ( VAR_32 == VAR_33 ) { struct STRUCT_OR_UNION_6 VAR_34 [ 2 ] ; METHOD_10 ( & VAR_35 , 0 , sizeof ( VAR_36 ) ) ; if ( METHOD_11 ( & VAR_37 -> VAR_38 ) ) return - VAR_39 ; if ( VAR_40 -> VAR_41 & VAR_42 ) { VAR_43 [ 0 ] . VAR_44 = VAR_45 ; METHOD_12 ( VAR_46 [ 0 ] . VAR_47 , VAR_48 -> VAR_49 , sizeof ( VAR_50 [ 0 ] . VAR_51 ) ) ; VAR_52 [ 0 ] . VAR_53 = VAR_54 -> VAR_55 ; } if ( VAR_56 -> VAR_57 & VAR_58 ) { VAR_59 [ 1 ] . VAR_60 = VAR_61 ; METHOD_13 ( VAR_62 [ 1 ] . VAR_63 , VAR_64 -> VAR_65 , sizeof ( VAR_66 [ 1 ] . VAR_67 ) ) ; VAR_68 [ 1 ] . VAR_69 = VAR_70 -> VAR_71 ; } if ( METHOD_14 ( VAR_72 , & VAR_73 , sizeof ( VAR_74 ) ) != 0 ) VAR_75 = - VAR_76 ; METHOD_15 ( & VAR_77 -> VAR_78 ) ; return VAR_79 ; } if ( METHOD_16 ( & VAR_80 ) ) return - VAR_81 ; switch ( VAR_82 ) { case VAR_83 : { TYPE_8 VAR_84 [ 64 ] ; METHOD_17 ( VAR_85 , "IPVirtualServerversion%d.%d.%d(size=%d)" , METHOD_18 ( VAR_86 ) , VAR_87 ) ; if ( METHOD_19 ( VAR_88 , VAR_89 , METHOD_20 ( VAR_90 ) + 1 ) != 0 ) { VAR_91 = - VAR_92 ; goto VAR_93 ; } * VAR_94 = METHOD_21 ( VAR_95 ) + 1 ; } break ; case VAR_96 : { struct STRUCT_OR_UNION_7 VAR_97 ; VAR_98 . VAR_99 = VAR_100 ; VAR_101 . VAR_102 = VAR_103 ; VAR_104 . VAR_105 = VAR_106 -> VAR_107 ; if ( METHOD_22 ( VAR_108 , & VAR_109 , sizeof ( VAR_110 ) ) != 0 ) VAR_111 = - VAR_112 ; } break ; case VAR_113 : { struct STRUCT_OR_UNION_8 * VAR_114 ; TYPE_9 VAR_115 ; VAR_116 = ( struct STRUCT_OR_UNION_9 * ) VAR_117 ; VAR_118 = sizeof ( * VAR_119 ) + sizeof ( struct STRUCT_OR_UNION_10 ) * VAR_120 -> VAR_121 ; if ( * VAR_122 != VAR_123 ) { METHOD_23 ( "length:%u!=%u\\n" , * VAR_124 , VAR_125 ) ; VAR_126 = - VAR_127 ; goto VAR_128 ; } VAR_129 = METHOD_24 ( STRUCT_OR_UNION_11 , VAR_130 , VAR_131 ) ; } break ; case VAR_132 : { struct STRUCT_OR_UNION_12 * VAR_133 ; struct STRUCT_OR_UNION_13 * VAR_134 ; union STRUCT_OR_UNION_14 VAR_135 ; VAR_136 = ( struct STRUCT_OR_UNION_15 * ) VAR_137 ; VAR_138 . VAR_139 = VAR_140 -> VAR_141 ; if ( VAR_142 -> VAR_143 ) VAR_144 = METHOD_25 ( STRUCT_OR_UNION_16 , VAR_145 , VAR_146 -> VAR_147 ) ; else VAR_148 = METHOD_26 ( STRUCT_OR_UNION_17 , VAR_149 , VAR_150 -> VAR_151 , & VAR_152 , VAR_153 -> VAR_154 ) ; if ( VAR_155 ) { METHOD_27 ( VAR_156 , VAR_157 ) ; if ( METHOD_28 ( VAR_158 , VAR_159 , sizeof ( * VAR_160 ) ) != 0 ) VAR_161 = - VAR_162 ; } else VAR_163 = - VAR_164 ; } break ; case VAR_165 : { struct STRUCT_OR_UNION_18 * VAR_166 ; TYPE_10 VAR_167 ; VAR_168 = ( struct STRUCT_OR_UNION_19 * ) VAR_169 ; VAR_170 = sizeof ( * VAR_171 ) + sizeof ( struct STRUCT_OR_UNION_20 ) * VAR_172 -> VAR_173 ; if ( * VAR_174 != VAR_175 ) { METHOD_29 ( "length:%u!=%u\\n" , * VAR_176 , VAR_177 ) ; VAR_178 = - VAR_179 ; goto VAR_180 ; } VAR_181 = METHOD_30 ( STRUCT_OR_UNION_21 , VAR_182 , VAR_183 ) ; } break ; case VAR_184 : { struct STRUCT_OR_UNION_22 VAR_185 ;  METHOD_31 ( STRUCT_OR_UNION_23 , & VAR_186 ) ;  if ( METHOD_32 ( VAR_187 , & VAR_188 , sizeof ( VAR_189 ) ) != 0 ) VAR_190 = - VAR_191 ; } break ; default : VAR_192 = - VAR_193 ; } VAR_194 : METHOD_33 ( & VAR_195 ) ; return VAR_196 ; }
static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , struct STRUCT_OR_UNION_4 * VAR_4 , TYPE_1 VAR_5 ) { struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_6 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_7 * VAR_10 = & VAR_11 -> VAR_12 . VAR_13 ; struct STRUCT_OR_UNION_8 * VAR_14 ; TYPE_2 VAR_15 = - VAR_16 ; if ( ! VAR_17 && ( VAR_18 = METHOD_3 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ) == VAR_23 ) goto VAR_24 ; VAR_25 = METHOD_4 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 ) { METHOD_5 ( VAR_32 , & VAR_33 -> VAR_34 , & VAR_35 -> VAR_36 ) ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 -> VAR_42 && VAR_43 -> VAR_44 ) VAR_45 -> VAR_46 = METHOD_6 ( METHOD_7 ( VAR_47 -> VAR_48 ) ) ;  VAR_49 = METHOD_8 ( VAR_50 , VAR_51 , VAR_52 , VAR_53 -> VAR_54 , VAR_55 -> VAR_56 ) ;  VAR_57 = METHOD_9 ( VAR_58 ) ; } VAR_59 : return VAR_60 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 ;  TYPE_5 VAR_7 ;  if ( VAR_8 < sizeof ( VAR_9 ) ) return - VAR_10 ; if ( METHOD_1 ( & VAR_11 , VAR_12 , sizeof ( VAR_13 ) ) ) return - VAR_14 ; if ( VAR_15 . VAR_16 >= METHOD_2 ( VAR_17 ) ) return - VAR_18 ; if ( VAR_19 . VAR_20 + sizeof ( VAR_21 ) > VAR_22 ) return - VAR_23 ; VAR_24 = VAR_25 [ VAR_26 . VAR_27 METHOD_3 ( STRUCT_OR_UNION_4 , VAR_28 + sizeof ( VAR_29 ) , VAR_30 . VAR_31 , VAR_32 . VAR_33 ) ; if ( ! VAR_34 ) VAR_35 = VAR_36 ; return VAR_37 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 = METHOD_1 ( ) ;  TYPE_3 * VAR_3 = VAR_4 , * VAR_5 , * VAR_6 = VAR_7 , * VAR_8 ;  const TYPE_4 * VAR_9 ; TYPE_5 VAR_10 ; if ( ! VAR_11 ) return - VAR_12 ; VAR_13 = METHOD_2 ( VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) return - VAR_17 ; VAR_18 = METHOD_3 ( VAR_19 ) ; if ( ! VAR_20 ) return - VAR_21 ; METHOD_4 ( VAR_22 , & VAR_23 , & VAR_24 ) ; if ( ! VAR_25 ) VAR_26 = "/" ; else VAR_27 = VAR_28 ;  if ( ! METHOD_5 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 , VAR_33 ) ) {   VAR_34 = - VAR_35 ;  goto VAR_36 ; }  if ( ! METHOD_6 ( VAR_37 -> VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ) {  VAR_42 = - VAR_43 ; goto VAR_44 ; } VAR_45 = METHOD_7 ( VAR_46 , VAR_47 , VAR_48 -> VAR_49 , VAR_50 -> VAR_51 ) ; METHOD_8 ( "cgfs_createreturned%dfor%s%s\\n" , VAR_52 , VAR_53 , VAR_54 ) ; VAR_55 : METHOD_9 ( VAR_56 ) ;  return VAR_57 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = 0 ; for ( VAR_3 = 0 , VAR_4 = VAR_5 ; VAR_6 < VAR_7 ; VAR_8 ++ , VAR_9 ++ ) { struct STRUCT_OR_UNION_1 * VAR_10 = METHOD_1 ( 1 ) ; if ( ! VAR_11 ) continue ; VAR_12 -> VAR_13 = METHOD_2 ( & VAR_14 -> VAR_15 , & VAR_16 , 1 , VAR_17 ) ; if ( METHOD_3 ( VAR_18 -> VAR_19 ) ) {  VAR_20 -> VAR_21 = VAR_22 ;  continue ; } METHOD_4 ( & VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 -> VAR_27 = VAR_28 ; METHOD_5 ( VAR_29 -> VAR_30 , VAR_31 ) ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = & VAR_37 -> VAR_38 ; VAR_39 -> VAR_40 = 0 ; VAR_41 -> VAR_42 = 0 ; VAR_43 -> VAR_44 = 1 ; VAR_45 -> VAR_46 = ( * VAR_47 [ VAR_48 ] ) [ VAR_49 ] ; if ( ( * VAR_50 [ VAR_51 ] ) [ VAR_52 ] ) VAR_53 ++ ; VAR_54 -> VAR_55 = & VAR_56 -> VAR_57 . VAR_58 [ 0 ] ; METHOD_6 ( VAR_59 -> VAR_60 , sizeof ( VAR_61 -> VAR_62 . VAR_63 ) , "%s%d" , VAR_64 , VAR_65 ) ; VAR_66 -> VAR_67 . VAR_68 = & VAR_69 ; VAR_70 -> VAR_71 . VAR_72 = VAR_73 ; VAR_74 -> VAR_75 . VAR_76 = 0 ; VAR_77 -> VAR_78 . VAR_79 = 1 ; VAR_80 -> VAR_81 . VAR_82 = 0 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 -> VAR_87 = VAR_88 ; METHOD_7 ( VAR_89 -> VAR_90 , VAR_91 -> VAR_92 ) ; VAR_93 -> VAR_94 = & VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { METHOD_1 ( VAR_2 , VAR_3 -> VAR_4 , sizeof ( VAR_5 ) ) ; METHOD_2 ( VAR_6 , VAR_7 -> VAR_8 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 -> VAR_5 ; TYPE_5 VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 ) ; TYPE_6 VAR_9 ; if ( ( VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 -> VAR_14 + VAR_15 -> VAR_16 , VAR_17 ) ) < 0 ) { return VAR_18 ; } if ( ( VAR_19 = METHOD_3 ( VAR_20 -> VAR_21 , & VAR_22 ) ) < 0 ) goto VAR_23 ; while ( METHOD_4 ( & VAR_24 , & VAR_25 ) ) { TYPE_7 VAR_26 = METHOD_5 ( VAR_27 -> VAR_28 ) ; if ( VAR_29 < 24 || METHOD_6 ( VAR_30 -> VAR_31 ) ) { goto VAR_32 ; } METHOD_7 ( VAR_33 -> VAR_34 , VAR_35 - 24 ) ; if ( ( VAR_36 = METHOD_8 ( VAR_37 -> VAR_38 , & VAR_39 ) ) < 0 ) goto VAR_40 ; } { TYPE_8 VAR_41 , VAR_42 = - 1 ; TYPE_9 VAR_43 , VAR_44 ; TYPE_10 VAR_45 ; TYPE_11 TYPE_12 VAR_46 = METHOD_9 ( VAR_47 -> VAR_48 ) ; if ( ( VAR_49 = METHOD_10 ( VAR_50 -> VAR_51 , & VAR_52 ) ) < 0 ) goto VAR_53 ; VAR_54 = METHOD_11 ( VAR_55 -> VAR_56 ) ; VAR_57 = METHOD_12 ( VAR_58 -> VAR_59 ) ; VAR_60 = METHOD_13 ( VAR_61 -> VAR_62 ) ; av_log ( VAR_63 , VAR_64 , "itime:0x%" PRIx64 ",pct:%d,ict:%d\\n" , VAR_65 , VAR_66 , VAR_67 ) ; for ( VAR_68 = 0 ; VAR_69 < VAR_70 ; VAR_71 ++ ) { TYPE_13 VAR_72 = METHOD_14 ( VAR_73 -> VAR_74 ) ; TYPE_14 VAR_75 = METHOD_15 ( VAR_76 -> VAR_77 ) ; TYPE_15 VAR_78 = VAR_79 -> VAR_80 -> VAR_81 + VAR_82 -> VAR_83 * ( TYPE_16 ) VAR_84 ;  TYPE_17 VAR_85 = METHOD_16 ( METHOD_17 ( VAR_86 , VAR_87 , 10000 ) - VAR_88 -> VAR_89 . VAR_90 , 0 ) ;  if ( VAR_91 != VAR_92 ) { av_log ( VAR_93 , VAR_94 , "pktnum:%d,pktct:%dpts:%" PRId64 "\\n" , VAR_95 , VAR_96 , VAR_97 ) ; METHOD_18 ( VAR_98 -> VAR_99 [ VAR_100 ] , VAR_101 , VAR_102 , VAR_103 -> VAR_104 , 0 , VAR_105 ) ; VAR_106 = VAR_107 ; } } VAR_108 -> VAR_109 = VAR_110 > 1 ; } VAR_111 : METHOD_19 ( VAR_112 -> VAR_113 , VAR_114 , VAR_115 ) ; return VAR_116 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { TYPE_3 TYPE_4 * VAR_3 = ( TYPE_5 TYPE_6 * ) VAR_4 ; TYPE_7 TYPE_8 * VAR_5 = VAR_6 ; TYPE_9 VAR_7 , VAR_8 , VAR_9 ; VAR_10 * VAR_11 ; TYPE_10 * VAR_12 ; VAR_13 * VAR_14 ; unsigned TYPE_11 VAR_15 ; if ( ( ! ( VAR_16 = ( TYPE_12 * ) VAR_17 -> VAR_18 ) ) || ( ! ( VAR_19 = VAR_20 -> VAR_21 ) ) ) return - VAR_22 ; METHOD_1 ( 3 , METHOD_2 ( VAR_23 , VAR_24 , "sg_ioctl:cmd=0x%x\\n" , ( TYPE_13 ) VAR_25 ) ) ; VAR_26 = ( VAR_27 != ( VAR_28 -> VAR_29 & VAR_30 ) ) ; switch ( VAR_31 ) { case VAR_32 : if ( METHOD_3 ( & VAR_33 -> VAR_34 ) ) return - VAR_35 ; if ( ! METHOD_4 ( VAR_36 -> VAR_37 ) ) return - VAR_38 ; if ( ! METHOD_5 ( VAR_39 , VAR_40 , VAR_41 ) ) return - VAR_42 ; VAR_43 = METHOD_6 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , 1 , VAR_48 , 1 , & VAR_49 ) ; if ( VAR_50 < 0 ) return VAR_51 ; VAR_52 = METHOD_7 ( VAR_53 -> VAR_54 , ( METHOD_8 ( VAR_55 , VAR_56 ) || METHOD_9 ( & VAR_57 -> VAR_58 ) ) ) ; if ( METHOD_10 ( & VAR_59 -> VAR_60 ) ) return - VAR_61 ; METHOD_11 ( & VAR_62 -> VAR_63 ) ; if ( VAR_64 -> VAR_65 ) { VAR_66 -> VAR_67 = 2 ; METHOD_12 ( & VAR_68 -> VAR_69 ) ; VAR_70 = METHOD_13 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ; return ( VAR_75 < 0 ) ? VAR_76 : 0 ; } VAR_77 -> VAR_78 = 1 ; METHOD_14 ( & VAR_79 -> VAR_80 ) ; return VAR_81 ; case VAR_82 : VAR_83 = METHOD_15 ( VAR_84 , VAR_85 ) ; if ( VAR_86 ) return VAR_87 ; if ( VAR_88 < 0 ) return - VAR_89 ; if ( VAR_90 >= METHOD_16 ( ( TYPE_14 ) VAR_91 , VAR_92 , VAR_93 ) ) VAR_94 = METHOD_17 ( TYPE_15 , METHOD_18 ( ( TYPE_16 ) VAR_95 , VAR_96 , VAR_97 ) , VAR_98 ) ; VAR_99 -> VAR_100 = VAR_101 ; VAR_102 -> VAR_103 = METHOD_19 ( VAR_104 , VAR_105 , VAR_106 ) ; return 0 ; case VAR_107 : return VAR_108 -> VAR_109 ; case VAR_110 : return 0 ; case VAR_111 : return METHOD_20 ( ( TYPE_17 ) VAR_112 -> VAR_113 -> VAR_114 -> VAR_115 , VAR_116 ) ; case VAR_117 : if ( ! METHOD_21 ( VAR_118 , VAR_119 , sizeof ( TYPE_18 ) ) ) return - VAR_120 ; else { TYPE_19 TYPE_20 * VAR_121 = VAR_122 ; if ( METHOD_22 ( & VAR_123 -> VAR_124 ) ) return - VAR_125 ; METHOD_23 ( ( TYPE_21 ) VAR_126 -> VAR_127 -> VAR_128 -> VAR_129 , & VAR_130 -> VAR_131 ) ; METHOD_24 ( ( TYPE_22 ) VAR_132 -> VAR_133 -> VAR_134 , & VAR_135 -> VAR_136 ) ; METHOD_25 ( ( TYPE_23 ) VAR_137 -> VAR_138 -> VAR_139 , & VAR_140 -> VAR_141 ) ; METHOD_26 ( ( TYPE_24 ) VAR_142 -> VAR_143 -> VAR_144 , & VAR_145 -> VAR_146 ) ; METHOD_27 ( ( TYPE_25 ) VAR_147 -> VAR_148 -> VAR_149 , & VAR_150 -> VAR_151 ) ; METHOD_28 ( ( TYPE_26 ) VAR_152 -> VAR_153 -> VAR_154 -> VAR_155 , & VAR_156 -> VAR_157 ) ; METHOD_29 ( ( TYPE_27 ) VAR_158 -> VAR_159 -> VAR_160 , & VAR_161 -> VAR_162 ) ; METHOD_30 ( 0 , & VAR_163 -> VAR_164 [ 0 ] ) ; METHOD_31 ( 0 , & VAR_165 -> VAR_166 [ 1 ] ) ; return 0 ; } case VAR_167 : VAR_168 = METHOD_32 ( VAR_169 , VAR_170 ) ; if ( VAR_171 ) return VAR_172 ; VAR_173 -> VAR_174 = VAR_175 ? 1 : 0 ; return 0 ; case VAR_176 : if ( ! METHOD_33 ( VAR_177 , VAR_178 , sizeof ( TYPE_28 ) ) ) return - VAR_179 ; METHOD_34 ( & VAR_180 -> VAR_181 , VAR_182 ) ; METHOD_35 ( VAR_183 , & VAR_184 -> VAR_185 , VAR_186 ) { if ( ( 1 == VAR_187 -> VAR_188 ) && ( ! VAR_189 -> VAR_190 ) ) { METHOD_36 ( & VAR_191 -> VAR_192 , VAR_193 ) ; METHOD_37 ( VAR_194 -> VAR_195 . VAR_196 , VAR_197 ) ; return 0 ; } } METHOD_38 ( & VAR_198 -> VAR_199 , VAR_200 ) ; METHOD_39 ( - 1 , VAR_201 ) ; return 0 ; case VAR_202 : METHOD_40 ( & VAR_203 -> VAR_204 , VAR_205 ) ; VAR_206 = 0 ; METHOD_41 ( VAR_207 , & VAR_208 -> VAR_209 , VAR_210 ) { if ( ( 1 == VAR_211 -> VAR_212 ) && ( ! VAR_213 -> VAR_214 ) ) ++ VAR_215 ; } METHOD_42 ( & VAR_216 -> VAR_217 , VAR_218 ) ; return METHOD_43 ( VAR_219 , VAR_220 ) ; case VAR_221 : return METHOD_44 ( VAR_222 -> VAR_223 , VAR_224 ) ; case VAR_225 : VAR_226 = METHOD_45 ( VAR_227 , VAR_228 ) ; if ( VAR_229 ) return VAR_230 ; if ( VAR_231 < 0 ) return - VAR_232 ; VAR_233 = METHOD_46 ( TYPE_29 , VAR_234 , METHOD_47 ( VAR_235 -> VAR_236 -> VAR_237 ) ) ; METHOD_48 ( & VAR_238 -> VAR_239 ) ; if ( VAR_240 != VAR_241 -> VAR_242 . VAR_243 ) { if ( VAR_244 -> VAR_245 || VAR_246 -> VAR_247 ) { METHOD_49 ( & VAR_248 -> VAR_249 ) ; return - VAR_250 ; } METHOD_50 ( VAR_251 , & VAR_252 -> VAR_253 ) ; METHOD_51 ( VAR_254 , VAR_255 ) ; } METHOD_52 ( & VAR_256 -> VAR_257 ) ; return 0 ; case VAR_258 : VAR_259 = METHOD_53 ( TYPE_30 , VAR_260 -> VAR_261 . VAR_262 , METHOD_54 ( VAR_263 -> VAR_264 -> VAR_265 ) ) ; return METHOD_55 ( VAR_266 , VAR_267 ) ; case VAR_268 : VAR_269 = METHOD_56 ( VAR_270 , VAR_271 ) ; if ( VAR_272 ) return VAR_273 ; VAR_274 -> VAR_275 = VAR_276 ? 1 : 0 ; return 0 ; case VAR_277 : return METHOD_57 ( ( TYPE_31 ) VAR_278 -> VAR_279 , VAR_280 ) ; case VAR_281 : VAR_282 = METHOD_58 ( VAR_283 , VAR_284 ) ; if ( VAR_285 ) return VAR_286 ; VAR_287 -> VAR_288 = VAR_289 ; return 0 ; case VAR_290 : return METHOD_59 ( ( TYPE_32 ) VAR_291 -> VAR_292 , VAR_293 ) ; case VAR_294 : VAR_295 = METHOD_60 ( VAR_296 , VAR_297 ) ; if ( VAR_298 ) return VAR_299 ; if ( VAR_300 > VAR_301 ) return - VAR_302 ; VAR_303 -> VAR_304 = ( VAR_305 > 0 ) ? VAR_306 : 0 ; return 0 ; case VAR_307 : return METHOD_61 ( VAR_308 , VAR_309 ) ; case VAR_310 : VAR_311 = ( VAR_312 -> VAR_313 ? 1 : 0 ) ; return METHOD_62 ( VAR_314 , VAR_315 ) ; case VAR_316 : if ( ! METHOD_63 ( VAR_317 , VAR_318 , VAR_319 * VAR_320 ) ) return - VAR_321 ; else { VAR_322 * VAR_323 ;  VAR_324 = METHOD_64 ( VAR_325 * VAR_326 ,  VAR_327 ) ; if ( ! VAR_328 ) return - VAR_329 ; METHOD_65 ( & VAR_330 -> VAR_331 , VAR_332 ) ; METHOD_66 ( VAR_333 , VAR_334 ) ; METHOD_67 ( & VAR_335 -> VAR_336 , VAR_337 ) ; VAR_338 = METHOD_68 ( VAR_339 , VAR_340 , VAR_341 * VAR_342 ) ; VAR_343 = VAR_344 ? - VAR_345 : 0 ; METHOD_69 ( VAR_346 ) ; return VAR_347 ; } case VAR_348 : if ( METHOD_70 ( & VAR_349 -> VAR_350 ) ) return - VAR_351 ; return METHOD_71 ( VAR_352 -> VAR_353 -> VAR_354 -> VAR_355 -> VAR_356 , VAR_357 ) ; case VAR_358 : if ( METHOD_72 ( & VAR_359 -> VAR_360 ) ) return - VAR_361 ; if ( VAR_362 ) { unsigned TYPE_33 VAR_363 = VAR_364 ; TYPE_34 TYPE_35 * VAR_365 = VAR_366 ; if ( METHOD_73 ( & VAR_367 , VAR_368 -> VAR_369 , 1 ) ) return - VAR_370 ; if ( METHOD_74 ( VAR_371 , & VAR_372 ) ) return - VAR_373 ; } return METHOD_75 ( VAR_374 -> VAR_375 -> VAR_376 , VAR_377 , VAR_378 -> VAR_379 , VAR_380 ) ; case VAR_381 : VAR_382 = METHOD_76 ( VAR_383 , VAR_384 ) ; if ( VAR_385 ) return VAR_386 ; VAR_387 -> VAR_388 = ( TYPE_36 ) VAR_389 ; return 0 ; case VAR_390 : return METHOD_77 ( METHOD_78 ( VAR_391 -> VAR_392 -> VAR_393 ) , VAR_394 ) ; case VAR_395 : return METHOD_79 ( VAR_396 -> VAR_397 -> VAR_398 , VAR_399 -> VAR_400 -> VAR_401 , METHOD_80 ( VAR_402 , VAR_403 -> VAR_404 ) , VAR_405 , VAR_406 ) ; case VAR_407 : return METHOD_81 ( VAR_408 -> VAR_409 -> VAR_410 , 1 ) ; case VAR_411 : return METHOD_82 ( VAR_412 -> VAR_413 -> VAR_414 , 0 ) ; case VAR_415 : return METHOD_83 ( VAR_416 -> VAR_417 -> VAR_418 ) ; case VAR_419 : case VAR_420 : case VAR_421 : case VAR_422 : case VAR_423 : if ( METHOD_84 ( & VAR_424 -> VAR_425 ) ) return - VAR_426 ; break ; default : if ( VAR_427 ) return - VAR_428 ; break ; } VAR_429 = METHOD_85 ( VAR_430 -> VAR_431 , VAR_432 , VAR_433 -> VAR_434 & VAR_435 ) ; if ( VAR_436 ) return VAR_437 ; return METHOD_86 ( VAR_438 -> VAR_439 , VAR_440 , VAR_441 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , struct STRUCT_OR_UNION_0 * VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 , * VAR_9 = VAR_10 , * VAR_11 = VAR_12 ; VAR_13 = METHOD_1 ( VAR_14 + 1 , VAR_15 ) ; if ( ! VAR_16 ) { METHOD_2 ( "Unabletoallocatememoryfortmpbuf.\\n" ) ; return - 1 ; } METHOD_3 ( VAR_17 , VAR_18 , VAR_19 ) ; VAR_20 [ VAR_21 ] = '\\0' ; VAR_22 = VAR_23 ; VAR_24 = ( VAR_25 + VAR_26 ) ; while ( VAR_27 < VAR_28 ) { TYPE_6 * VAR_29 , * VAR_30 ; struct STRUCT_OR_UNION_2 * VAR_31 ; if ( METHOD_4 ( VAR_32 , & VAR_33 , & VAR_34 ) < 0 ) { METHOD_5 ( VAR_35 ) ; return - 1 ; } METHOD_6 ( "Gotkey:%s=%s\\n" , VAR_36 , VAR_37 ) ; if ( VAR_38 & VAR_39 ) { if ( METHOD_7 ( VAR_40 ) > 0 ) {  TYPE_7 * VAR_41 = VAR_42 + METHOD_8 ( VAR_43 ) ;  * VAR_44 = '=' ; METHOD_9 ( VAR_45 ) ; return 1 ; } } VAR_46 = METHOD_10 ( VAR_47 , VAR_48 , VAR_49 , VAR_50 ) ; if ( ! VAR_51 ) { if ( METHOD_11 ( VAR_52 , VAR_53 , VAR_54 ) < 0 ) { METHOD_12 ( VAR_55 ) ; return - 1 ; } VAR_56 += METHOD_13 ( VAR_57 ) + METHOD_14 ( VAR_58 ) + 2 ; continue ; } if ( METHOD_15 ( VAR_59 , VAR_60 ) < 0 ) { METHOD_16 ( VAR_61 ) ; return - 1 ; } VAR_62 += METHOD_17 ( VAR_63 ) + METHOD_18 ( VAR_64 ) + 2 ; if ( METHOD_19 ( VAR_65 ) ) { if ( METHOD_20 ( VAR_66 , VAR_67 ) < 0 ) { METHOD_21 ( VAR_68 ) ; return - 1 ; } METHOD_22 ( VAR_69 ) ; } else { if ( METHOD_23 ( VAR_70 , VAR_71 , VAR_72 ) < 0 ) { METHOD_24 ( VAR_73 ) ; return - 1 ; } METHOD_25 ( VAR_74 ) ; } } METHOD_26 ( VAR_75 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; VAR_3 * VAR_4 ; METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_6 -> VAR_7 == VAR_8 || VAR_9 -> VAR_10 == VAR_11 ) ; if ( METHOD_4 ( VAR_12 ) -> VAR_13 != VAR_14 ) return - VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; METHOD_5 ( VAR_19 , VAR_20 , VAR_21 -> VAR_22 ) if ( VAR_23 -> VAR_24 == VAR_25 ) VAR_26 -> VAR_27 = VAR_28 ; if ( VAR_29 -> VAR_30 ) { struct STRUCT_OR_UNION_0 VAR_31 ; if ( STRUCT_OR_UNION_1 ( VAR_32 -> VAR_33 , & VAR_34 ) >= 0 ) VAR_35 -> VAR_36 . VAR_37 = METHOD_6 ( & VAR_38 . VAR_39 ) ; else if ( VAR_40 == VAR_41 )  METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , 0 ) ;  } VAR_48 -> VAR_49 = VAR_50 ; METHOD_8 ( VAR_51 , VAR_52 ) ; return 1 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; TYPE_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = 0 ; VAR_9 = 0 ;  if ( ! ( VAR_10 = METHOD_1 ( sizeof ( TYPE_7 ) ) ) ) {  goto VAR_11 ; } VAR_12 -> VAR_13 = & VAR_14 . VAR_15 ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) || METHOD_3 ( VAR_18 , & VAR_19 -> VAR_20 ) ) { goto VAR_21 ; } VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; METHOD_5 ( 10 , (  "preliminaryprocessingofJP2box:type=%c%s%c(0x%08x);length=%d\\n" ,  \'"\' , VAR_31 -> name , \'"\' , VAR_32 -> VAR_33 , VAR_34 -> VAR_35 ) ) ;  if ( VAR_36 -> VAR_37 == 1 ) {  if ( METHOD_6 ( VAR_38 , & VAR_39 ) ) { goto VAR_40 ; } if ( VAR_41 > 0xffffffffUL ) { METHOD_7 ( "warning:cannothandlelarge64-bitboxlength\\n" ) ; VAR_42 = 0xffffffffUL ; } VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 - METHOD_8 ( VAR_49 ) ; } else { VAR_50 -> VAR_51 = VAR_52 -> VAR_53 - METHOD_9 ( VAR_54 ) ; } if ( VAR_55 -> VAR_56 != 0 && VAR_57 -> VAR_58 < 8 ) { goto VAR_59 ; } VAR_60 = ! ( VAR_61 -> VAR_62 -> VAR_63 & ( VAR_64 | VAR_65 ) ) ; if ( VAR_66 ) { if ( ! ( VAR_67 = METHOD_10 ( 0 , 0 ) ) ) { goto VAR_68 ; } if ( METHOD_11 ( VAR_69 , VAR_70 , VAR_71 -> VAR_72 ) ) { METHOD_12 ( "cannotcopyboxdata\\n" ) ; goto VAR_73 ; } METHOD_13 ( VAR_74 ) ; VAR_75 -> VAR_76 = & VAR_77 -> VAR_78 ; if ( VAR_79 -> VAR_80 -> VAR_81 ) { if ( ( * VAR_82 -> VAR_83 -> VAR_84 ) ( VAR_85 , VAR_86 ) ) { METHOD_14 ( "cannotparseboxdata\\n" ) ; goto VAR_87 ; } } METHOD_15 ( VAR_88 ) ; } if ( METHOD_16 ( ) >= 1 ) { METHOD_17 ( VAR_89 , VAR_90 ) ; } return VAR_91 ; VAR_92 : if ( VAR_93 ) { METHOD_18 ( VAR_94 ) ; } if ( VAR_95 ) { METHOD_19 ( VAR_96 ) ; } return 0 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 )  {  TYPE_3 VAR_2 ;  METHOD_1 ( VAR_3 > VAR_4 -> VAR_5 ) ; TYPE_4 * * VAR_6 = VAR_7 -> VAR_8 ; PyMem_RESIZE ( VAR_9 , TYPE_5 * , VAR_10 ) ; if ( VAR_11 == VAR_12 ) { METHOD_2 ( ) ; return - 1 ; } VAR_13 -> VAR_14 = VAR_15 ; for ( VAR_16 = VAR_17 -> VAR_18 ; VAR_19 < VAR_20 ; VAR_21 ++ ) VAR_22 -> VAR_23 [ VAR_24 ] = VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; unsigned TYPE_4 VAR_8 = VAR_9 ; TYPE_5 VAR_10 ; struct STRUCT_OR_UNION_5 VAR_11 = { 0 } ; TYPE_6 VAR_12 = 0 ;  TYPE_7 VAR_13 ;  TYPE_8 VAR_14 = VAR_15 ; if ( VAR_16 -> VAR_17 & VAR_18 ) { VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = - VAR_23 ; if ( VAR_24 < VAR_25 ) goto VAR_26 ; VAR_27 -= VAR_28 ; VAR_29 = METHOD_1 ( ( TYPE_9 * ) & VAR_30 , VAR_31 , 0 , sizeof ( VAR_32 ) ) ; if ( VAR_33 < 0 ) goto VAR_34 ; if ( ( VAR_35 . VAR_36 & VAR_37 ) && VAR_38 . VAR_39 + VAR_40 . VAR_41 + 2 > VAR_42 . VAR_43 ) VAR_44 . VAR_45 = VAR_46 . VAR_47 + VAR_48 . VAR_49 + 2 ; VAR_50 = - VAR_51 ; if ( VAR_52 . VAR_53 > VAR_54 ) goto VAR_55 ; } VAR_56 = - VAR_57 ; if ( METHOD_2 ( VAR_58 < VAR_59 ) ) goto VAR_60 ;  if ( VAR_61 && VAR_62 -> VAR_63 && METHOD_3 ( & VAR_64 -> VAR_65 , VAR_66 ) )  VAR_67 = VAR_68 ; if ( VAR_69 ) {  VAR_70 = VAR_71 . VAR_72 ;  if ( ! VAR_73 ) VAR_74 = VAR_75 ; } else VAR_76 = VAR_77 ; VAR_78 = METHOD_4 ( & VAR_79 -> VAR_80 , VAR_81 , VAR_82 , VAR_83 . VAR_84 , VAR_85 , & VAR_86 ) ; if ( ! VAR_87 ) goto VAR_88 ; if ( VAR_89 ) VAR_90 = METHOD_5 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 ) ; else VAR_95 = METHOD_6 ( VAR_96 , 0 , VAR_97 , VAR_98 , VAR_99 ) ; if ( VAR_100 ) goto VAR_101 ; METHOD_7 ( VAR_102 , VAR_103 ) ; METHOD_8 ( VAR_104 ) ; VAR_105 -> VAR_106 = METHOD_9 ( VAR_107 ) -> VAR_108 ; if ( VAR_109 ) { VAR_110 = METHOD_10 ( VAR_111 , & VAR_112 ) ; if ( VAR_113 ) goto VAR_114 ; } METHOD_11 ( ) ; VAR_115 = METHOD_12 ( VAR_116 -> VAR_117 ) ; if ( VAR_118 ) { METHOD_13 ( VAR_119 ) -> VAR_120 = VAR_121 -> VAR_122 ; METHOD_14 ( VAR_123 ) -> VAR_124 |= VAR_125 ; } if ( VAR_126 ) METHOD_15 ( VAR_127 , VAR_128 -> VAR_129 ) ; else METHOD_16 ( VAR_130 ) ; METHOD_17 ( ) ; return VAR_131 ; VAR_132 : METHOD_18 ( VAR_133 ) ; VAR_134 : METHOD_19 ( ) ; VAR_135 = METHOD_20 ( VAR_136 -> VAR_137 ) ; if ( VAR_138 ) VAR_139 -> VAR_140 -> VAR_141 . VAR_142 ++ ; METHOD_21 ( ) ; return VAR_143 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 ) {  TYPE_2 VAR_2 = sizeof ( struct STRUCT_OR_UNION_1 ) ;  struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) ( METHOD_1 ( VAR_4 ) + 1 ) ; unsigned TYPE_3 VAR_5 = METHOD_2 ( VAR_6 ) - METHOD_3 ( VAR_7 ) ; TYPE_4 VAR_8 = 0 ; * VAR_9 = & METHOD_4 ( VAR_10 ) -> VAR_11 ;  while ( VAR_12 + 1 <= VAR_13 ) {   switch ( * * VAR_14 ) {  case VAR_15 : break ; case VAR_16 : VAR_17 = 1 ; break ; case VAR_18 : if IS_ENABLED ( VAR_19 ) if ( METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) >= 0 ) break ; if ( VAR_23 ) return VAR_24 ; break ; default : return VAR_25 ; }  VAR_26 += METHOD_6 ( VAR_27 ) ;  * VAR_28 = & VAR_29 -> VAR_30 ;  VAR_31 = ( struct STRUCT_OR_UNION_4 * ) ( METHOD_7 ( VAR_32 ) +  VAR_33 ) ; } return VAR_34 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) {  if ( VAR_2 != 0 ) {  METHOD_1 ( VAR_3 , 1 ) ;   METHOD_2 ( VAR_4 , METHOD_3 ( VAR_5 ) , 4 ) ;   METHOD_4 ( VAR_6 , VAR_7 < 0 ) ;  } else {  METHOD_5 ( VAR_8 , 0 ) ;  } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * VAR_6 , TYPE_8 VAR_7 [ ] ) { const TYPE_9 * VAR_8 = VAR_9 - VAR_10 -> VAR_11 ; const TYPE_10 * VAR_12 = VAR_13 - 1 ; const TYPE_11 * VAR_14 = VAR_15 - 1 ; TYPE_12 VAR_16 [ 8 ] ; TYPE_13 VAR_17 [ 8 ] ; TYPE_14 VAR_18 ; TYPE_15 VAR_19 = 0 ; TYPE_16 VAR_20 = 0 ; TYPE_17 VAR_21 ; TYPE_18 VAR_22 [ 8 ] ; TYPE_19 VAR_23 [ 8 ] ; TYPE_20 VAR_24 ; VAR_25 . VAR_26 = 0 ; if ( VAR_27 -> VAR_28 . VAR_29 != VAR_30 ) { VAR_31 [ 0 ] . VAR_32 = VAR_33 [ 1 ] . VAR_34 = VAR_35 [ 2 ] . VAR_36 = VAR_37 [ 3 ] . VAR_38 = VAR_39 [ 4 ] . VAR_40 = VAR_41 [ 5 ] . VAR_42 = VAR_43 [ 6 ] . VAR_44 = VAR_45 [ 7 ] . VAR_46 = 0 ; VAR_47 [ 0 ] = VAR_48 [ 1 ] = VAR_49 [ 2 ] = VAR_50 [ 3 ] = VAR_51 [ 4 ] = VAR_52 [ 5 ] = VAR_53 [ 6 ] = VAR_54 [ 7 ] = 0 ; if ( VAR_55 -> VAR_56 . VAR_57 != VAR_58 ) { VAR_59 [ VAR_60 ] . VAR_61 = VAR_62 -> VAR_63 . VAR_64 . VAR_65 ; METHOD_1 ( VAR_66 [ VAR_67 -> VAR_68 . VAR_69 ] , VAR_70 , & VAR_71 [ VAR_72 ] , VAR_73 ) ; VAR_74 [ VAR_75 ] = VAR_76 -> VAR_77 . VAR_78 ; } VAR_79 ++ ; if ( VAR_80 -> VAR_81 . VAR_82 != VAR_83 ) { VAR_84 [ VAR_85 ] . VAR_86 = VAR_87 -> VAR_88 . VAR_89 . VAR_90 ; METHOD_2 ( VAR_91 [ VAR_92 -> VAR_93 . VAR_94 ] , VAR_95 , & VAR_96 [ VAR_97 ] , VAR_98 ) ; VAR_99 [ VAR_100 ] = VAR_101 -> VAR_102 . VAR_103 ; } VAR_104 ++ ; if ( VAR_105 -> VAR_106 . VAR_107 != VAR_108 ) { VAR_109 [ VAR_110 ] . VAR_111 = VAR_112 -> VAR_113 . VAR_114 . VAR_115 ; METHOD_3 ( VAR_116 [ VAR_117 -> VAR_118 . VAR_119 ] , VAR_120 , & VAR_121 [ VAR_122 ] , VAR_123 ) ; VAR_124 [ VAR_125 ] = VAR_126 -> VAR_127 . VAR_128 ; } VAR_129 ++ ; if ( VAR_130 -> VAR_131 . VAR_132 != VAR_133 ) { VAR_134 = ( - VAR_135 -> VAR_136 / 128 + 1 ) * ( VAR_137 -> VAR_138 + 1 ) + ( - VAR_139 -> VAR_140 / 128 + 1 ) ; if ( VAR_141 -> VAR_142 [ VAR_143 ] != VAR_144 ) { VAR_145 [ VAR_146 ] . VAR_147 = VAR_148 -> VAR_149 [ VAR_150 ] . VAR_151 ; METHOD_4 ( VAR_152 -> VAR_153 [ VAR_154 ] , VAR_155 , & VAR_156 [ VAR_157 ] , VAR_158 ) ; VAR_159 [ VAR_160 ] = VAR_161 -> VAR_162 [ VAR_163 ] ; } VAR_164 ++ ; if ( VAR_165 -> VAR_166 [ VAR_167 - VAR_168 -> VAR_169 - 1 ] != VAR_170 ) { VAR_171 [ VAR_172 ] . VAR_173 = VAR_174 -> VAR_175 [ VAR_176 - VAR_177 -> VAR_178 - 1 ] . VAR_179 ; METHOD_5 ( VAR_180 -> VAR_181 [ VAR_182 - VAR_183 -> VAR_184 - 1 ] , VAR_185 , & VAR_186 [ VAR_187 ] , VAR_188 ) ; VAR_189 [ VAR_190 ] = VAR_191 -> VAR_192 [ VAR_193 - VAR_194 -> VAR_195 - 1 ] ; } VAR_196 ++ ; if ( VAR_197 -> VAR_198 [ VAR_199 - 1 ] != VAR_200 ) { VAR_201 [ VAR_202 ] . VAR_203 = VAR_204 -> VAR_205 [ VAR_206 - 1 ] . VAR_207 ; METHOD_6 ( VAR_208 -> VAR_209 [ VAR_210 - 1 ] , VAR_211 , & VAR_212 [ VAR_213 ] , VAR_214 ) ; VAR_215 [ VAR_216 ] = VAR_217 -> VAR_218 [ VAR_219 - 1 ] ; } VAR_220 ++ ; if ( VAR_221 -> VAR_222 [ VAR_223 + 1 ] != VAR_224 ) { VAR_225 [ VAR_226 ] . VAR_227 = VAR_228 -> VAR_229 [ VAR_230 + 1 ] . VAR_231 ; METHOD_7 ( VAR_232 -> VAR_233 [ VAR_234 + 1 ] , VAR_235 , & VAR_236 [ VAR_237 ] , VAR_238 ) ; VAR_239 [ VAR_240 ] = VAR_241 -> VAR_242 [ VAR_243 + 1 ] ; } VAR_244 ++ ; if ( VAR_245 -> VAR_246 [ VAR_247 + VAR_248 -> VAR_249 + 1 ] != VAR_250 ) { VAR_251 [ VAR_252 ] . VAR_253 = VAR_254 -> VAR_255 [ VAR_256 + VAR_257 -> VAR_258 + 1 ] . VAR_259 ; METHOD_8 ( VAR_260 -> VAR_261 [ VAR_262 + VAR_263 -> VAR_264 + 1 ] , VAR_265 , & VAR_266 [ VAR_267 ] , VAR_268 ) ; VAR_269 [ VAR_270 ] = VAR_271 -> VAR_272 [ VAR_273 + VAR_274 -> VAR_275 + 1 ] ; } VAR_276 ++ ; } for ( VAR_277 = 0 ; VAR_278 < VAR_279 ; VAR_280 ++ ) { if ( VAR_281 [ VAR_282 [ VAR_283 ] ] != VAR_284 ) { if ( VAR_285 -> VAR_286 . VAR_287 == VAR_288 [ VAR_289 [ VAR_290 ] ] ) { VAR_291 . VAR_292 = VAR_293 [ VAR_294 [ VAR_295 ] ] . VAR_296 ; VAR_297 = 1 ; if ( VAR_298 < 3 ) * VAR_299 = 3 ; else * VAR_300 = 2 ; break ; } } } if ( ! VAR_301 ) { for ( VAR_302 = 0 ; VAR_303 < VAR_304 ; VAR_305 ++ ) { VAR_306 [ VAR_307 ] = VAR_308 [ VAR_309 ] . VAR_310 . VAR_311 ; VAR_312 [ VAR_313 ] = VAR_314 [ VAR_315 ] . VAR_316 . VAR_317 ; } METHOD_9 ( VAR_318 , VAR_319 ) ; METHOD_10 ( VAR_320 , VAR_321 ) ; VAR_322 . VAR_323 . VAR_324 = VAR_325 [ VAR_326 / 2 ] ; VAR_327 . VAR_328 . VAR_329 = VAR_330 [ VAR_331 / 2 ] ;  VAR_332 = 1 ;  * VAR_333 = 0 ; } } VAR_334 -> VAR_335 = VAR_336 . VAR_337 ; METHOD_11 ( VAR_338 , VAR_339 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_3 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_7 * VAR_9 ; TYPE_4 VAR_10 = 0 ; VAR_11 = - VAR_12 ; if ( VAR_13 & ~ ( VAR_14 | VAR_15 | VAR_16 | VAR_17 | VAR_18 ) ) goto VAR_19 ; if 0 if ( METHOD_1 ( VAR_20 ) -> VAR_21 < 0 ) return - VAR_22 ; if ( VAR_23 & VAR_24 ) { VAR_25 = METHOD_2 ( VAR_26 , VAR_27 , VAR_28 ) ; goto VAR_29 ; } VAR_30 = METHOD_3 ( VAR_31 , VAR_32 , VAR_33 & VAR_34 , & VAR_35 ) ; if ( VAR_36 == VAR_37 ) goto VAR_38 ; if ( METHOD_4 ( VAR_39 ) -> VAR_40 ) { struct STRUCT_OR_UNION_8 VAR_41 = { 0 } ; VAR_42 = - VAR_43 ; VAR_44 = sizeof ( VAR_45 ) ; if ( VAR_46 < VAR_47 ) goto VAR_48 ; VAR_49 -= VAR_50 ; if ( METHOD_5 ( VAR_51 ) ) { struct STRUCT_OR_UNION_9 * VAR_52 = METHOD_6 ( VAR_53 ) ; VAR_54 . VAR_55 = METHOD_7 ( VAR_56 ) ; VAR_57 . VAR_58 = VAR_59 -> VAR_60 ; if ( VAR_61 -> VAR_62 & VAR_63 ) VAR_64 . VAR_65 = VAR_66 ; else if ( VAR_67 -> VAR_68 & VAR_69 ) VAR_70 . VAR_71 = VAR_72 ; else if ( VAR_73 -> VAR_74 & VAR_75 ) VAR_76 . VAR_77 = VAR_78 ; else if ( VAR_79 -> VAR_80 & VAR_81 ) goto VAR_82 ; else METHOD_8 ( ) ; if ( VAR_83 -> VAR_84 & VAR_85 ) VAR_86 . VAR_87 |= VAR_88 ; } else VAR_89 . VAR_90 = VAR_91 ; if ( VAR_92 -> VAR_93 == VAR_94 ) { VAR_95 . VAR_96 = VAR_97 ; VAR_98 . VAR_99 = METHOD_9 ( VAR_100 ) ; VAR_101 . VAR_102 = VAR_103 -> VAR_104 ; } VAR_105 = METHOD_10 ( VAR_106 -> VAR_107 , ( TYPE_5 * ) & VAR_108 , VAR_109 ) ; if ( VAR_110 < 0 ) goto VAR_111 ; } VAR_112 = & METHOD_11 ( VAR_113 ) -> VAR_114 . VAR_115 ; if ( STRUCT_OR_UNION_10 -> VAR_116 == VAR_117 ) VAR_118 -> VAR_119 = sizeof ( struct STRUCT_OR_UNION_11 ) ; else VAR_120 -> VAR_121 = VAR_122 -> VAR_123 + VAR_124 ( struct STRUCT_OR_UNION_12 , VAR_125 ) ; VAR_126 = VAR_127 -> VAR_128 ; if ( VAR_129 > VAR_130 ) { VAR_131 = VAR_132 ; VAR_133 -> VAR_134 |= VAR_135 ; } VAR_136 = METHOD_12 ( VAR_137 , 0 , VAR_138 -> VAR_139 , VAR_140 ) ; if ( VAR_141 ) goto VAR_142 ; METHOD_13 ( VAR_143 , VAR_144 , VAR_145 ) ; if ( VAR_146 -> VAR_147 ) METHOD_14 ( VAR_148 -> VAR_149 , & METHOD_15 ( VAR_150 ) -> VAR_151 , VAR_152 -> VAR_153 ) ; if ( METHOD_16 ( VAR_154 ) -> VAR_155 ) { struct STRUCT_OR_UNION_13 VAR_156 ; VAR_157 . VAR_158 = VAR_159 ; if ( VAR_160 -> VAR_161 == VAR_162 ) VAR_163 . VAR_164 |= VAR_165 ; VAR_166 . VAR_167 = METHOD_17 ( VAR_168 ) -> VAR_169 ; VAR_170 . VAR_171 = VAR_172 -> VAR_173 ; VAR_174 . VAR_175 = 0 ; VAR_176 . VAR_177 = METHOD_18 ( VAR_178 ) ; if ( METHOD_19 ( VAR_179 ) ) { VAR_180 . VAR_181 = METHOD_20 ( VAR_182 ) ; VAR_183 . VAR_184 |= VAR_185 ; } else { VAR_186 . VAR_187 = 0 ; }  METHOD_21 ( VAR_188 , VAR_189 , VAR_190 , sizeof ( VAR_191 ) , & VAR_192 ) ;  } VAR_193 = VAR_194 + ( ( VAR_195 & VAR_196 ) ? VAR_197 -> VAR_198 : VAR_199 ) ; VAR_200 : METHOD_22 ( VAR_201 , VAR_202 ) ; VAR_203 : return VAR_204 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 -> VAR_6 . VAR_7 ) ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_6 * VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; unsigned TYPE_1 VAR_12 [ 3 ] ; if ( STRUCT_OR_UNION_8 -> VAR_13 [ VAR_14 ] & VAR_15 ) { METHOD_3 ( "%s:devicelistisempty\\n" , VAR_16 ) ; VAR_17 -> VAR_18 = VAR_19 ; return ; }  if ( ( STRUCT_OR_UNION_9 -> VAR_20 < VAR_21 ) ||  ( STRUCT_OR_UNION_10 -> VAR_22 > VAR_23 ) ) { METHOD_4 ( & VAR_24 -> VAR_25 , "%s:invaliddeviceindex:%d\\n" , VAR_26 , STRUCT_OR_UNION_11 -> VAR_27 ) ; return ; } if ( VAR_28 -> VAR_29 [ STRUCT_OR_UNION_12 -> VAR_30 ] ) { METHOD_5 ( "%s:deviceisalreadyknown\\n" , VAR_31 ) ; return ; } VAR_32 = METHOD_6 ( ) ; if ( METHOD_7 ( VAR_33 ) ) { METHOD_8 ( & VAR_34 -> VAR_35 , "%s:hid_allocate_devicefailed\\n" , VAR_36 ) ; return ; } VAR_37 -> VAR_38 = & VAR_39 ; VAR_40 -> VAR_41 . VAR_42 = & VAR_43 -> VAR_44 ; VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = METHOD_9 ( VAR_50 -> VAR_51 . VAR_52 ) ; VAR_53 -> VAR_54 = METHOD_10 ( VAR_55 -> VAR_56 . VAR_57 ) ; METHOD_11 ( VAR_58 -> VAR_59 , sizeof ( VAR_60 -> VAR_61 ) , "LogitechUnifyingDevice.WirelessPID:%02x%02x" , STRUCT_OR_UNION_13 -> VAR_62 [ VAR_63 ] , STRUCT_OR_UNION_14 -> VAR_64 [ VAR_65 ] ) ; METHOD_12 ( VAR_66 , VAR_67 -> VAR_68 , sizeof ( VAR_69 -> VAR_70 ) ) ; METHOD_13 ( VAR_71 , sizeof ( VAR_72 ) , ":%d" , STRUCT_OR_UNION_15 -> VAR_73 ) ; METHOD_14 ( VAR_74 -> VAR_75 , VAR_76 , sizeof ( VAR_77 -> VAR_78 ) ) ; VAR_79 = METHOD_15 ( sizeof ( struct STRUCT_OR_UNION_16 ) , VAR_80 ) ; if ( ! VAR_81 ) { METHOD_16 ( & VAR_82 -> VAR_83 , "%s:failedallocatingdj_device\\n" , VAR_84 ) ; goto VAR_85 ; } VAR_86 -> VAR_87 = METHOD_17 ( STRUCT_OR_UNION_17 -> VAR_88 + VAR_89 ) ; VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> STRUCT_OR_UNION_18 = VAR_94 ; VAR_95 -> VAR_96 = STRUCT_OR_UNION_19 -> VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 [ STRUCT_OR_UNION_20 -> VAR_103 ] = VAR_104 ; if ( METHOD_18 ( VAR_105 ) ) { METHOD_19 ( & VAR_106 -> VAR_107 , "%s:failedaddingdj_device\\n" , VAR_108 ) ; goto VAR_109 ; } return ; VAR_110 : VAR_111 -> VAR_112 [ STRUCT_OR_UNION_21 -> VAR_113 ] = VAR_114 ; METHOD_20 ( VAR_115 ) ; VAR_116 : METHOD_21 ( VAR_117 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ,  const TYPE_3 VAR_2 ) {  return METHOD_1 ( VAR_3 , ( const unsigned TYPE_4 * ) VAR_4 , VAR_5 , 1 , 1 , 1 ) ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) {  TYPE_0 * VAR_2 ;  union STRUCT_OR_UNION_3 * VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; TYPE_1 VAR_7 ; TYPE_2 VAR_8 = 0 ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 ;  TYPE_5 VAR_11 = 1 ;  VAR_12 = METHOD_1 ( VAR_13 -> VAR_14 -> VAR_15 ) - sizeof ( VAR_16 ) ; VAR_17 = ( TYPE_6 * ) VAR_18 -> VAR_19 -> VAR_20 ; VAR_21 = METHOD_2 ( VAR_22 -> VAR_23 ) ; VAR_24 = sizeof ( TYPE_7 ) ; VAR_25 = ( union STRUCT_OR_UNION_5 * ) ( VAR_26 -> VAR_27 -> VAR_28 + VAR_29 ) ; VAR_30 -= VAR_31 ; VAR_32 = METHOD_3 ( VAR_33 -> VAR_34 . VAR_35 ) ; VAR_36 = ( TYPE_8 * ) VAR_37 + VAR_38 ; VAR_39 -= VAR_40 ; VAR_41 = METHOD_4 ( VAR_42 , VAR_43 , VAR_44 * 4 ) ; if ( ! VAR_45 ) goto VAR_46 ;  while ( VAR_47 > 0 ) {  VAR_48 = METHOD_5 ( VAR_49 , VAR_50 ,  VAR_51 ) ;  if ( VAR_52 != VAR_53 )  VAR_54 = 0 ;  if ( ! VAR_55 ) METHOD_6 ( VAR_56 ,  VAR_57 -> VAR_58 , VAR_59 ,  VAR_60 ) ; if ( VAR_61 == VAR_62 ) goto VAR_63 ;  VAR_64 = METHOD_7 ( VAR_65 -> VAR_66 . VAR_67 ) ;  VAR_68 = ( TYPE_9 * ) VAR_69 + VAR_70 ; VAR_71 -= VAR_72 ; } VAR_73 : VAR_74 -> VAR_75 . VAR_76 ++ ; if ( VAR_77 ) { METHOD_8 ( VAR_78 ) ; METHOD_9 ( & VAR_79 -> VAR_80 , & VAR_81 -> VAR_82 ) ; } return VAR_83 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 ;  METHOD_1 ( 101 , ( "jas_realloccalledwith%x,%zu\\n" , VAR_3 , VAR_4 ) ) ;  VAR_5 = METHOD_2 ( VAR_6 , VAR_7 ) ; METHOD_3 ( 100 , ( "jas_realloc(%p,%zu)->%p\\n" , VAR_8 , VAR_9 , VAR_10 ) ) ; return VAR_11 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 ; struct STRUCT_OR_UNION_8 * VAR_9 ; TYPE_3 VAR_10 ; unsigned TYPE_4 VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; if ( METHOD_2 ( ! VAR_14 ) ) return - VAR_15 ; METHOD_3 ( VAR_16 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_9 -> VAR_17 == VAR_18 ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; }  VAR_22 -> VAR_23 = 0 ;  VAR_24 = METHOD_5 ( VAR_25 , VAR_26 & VAR_27 ) ; VAR_28 : while ( METHOD_6 ( & VAR_29 -> VAR_30 ) ) { if ( STRUCT_OR_UNION_10 -> VAR_31 == VAR_32 ) { VAR_33 = - VAR_34 ; goto VAR_35 ; } if ( VAR_36 <= 0L ) { VAR_37 = VAR_38 ? VAR_39 : - VAR_40 ; goto VAR_41 ; } METHOD_7 ( VAR_42 ) ; VAR_43 = METHOD_8 ( * METHOD_9 ( VAR_44 ) , METHOD_10 ( STRUCT_OR_UNION_11 ) , VAR_45 ) ; METHOD_11 ( VAR_46 ) ; } VAR_47 = METHOD_12 ( & VAR_48 -> VAR_49 ) ; VAR_50 = METHOD_13 ( VAR_51 ) ; VAR_52 = METHOD_14 ( VAR_53 ) ; VAR_54 = METHOD_15 ( VAR_55 ) ; if ( ( ! VAR_56 ) && ( ! VAR_57 ) ) { METHOD_16 ( VAR_58 ) ; goto VAR_59 ; } METHOD_17 ( VAR_60 , VAR_61 ) ; VAR_62 = METHOD_18 ( VAR_63 , VAR_64 , VAR_65 ) ; if ( VAR_66 ) goto VAR_67 ; if ( ! VAR_68 ) { if ( METHOD_19 ( VAR_69 < VAR_70 ) ) { VAR_71 = VAR_72 ; VAR_73 -> VAR_74 |= VAR_75 ; } VAR_76 = METHOD_20 ( VAR_77 , METHOD_21 ( VAR_78 ) , VAR_79 -> VAR_80 , VAR_81 ) ; if ( VAR_82 ) goto VAR_83 ; VAR_84 = VAR_85 ; } else { if ( ( STRUCT_OR_UNION_12 -> VAR_86 == VAR_87 ) || ( ( VAR_88 == VAR_89 ) || VAR_90 -> VAR_91 ) ) VAR_92 = 0 ; else VAR_93 = - VAR_94 ; } if ( METHOD_22 ( ! ( VAR_95 & VAR_96 ) ) ) { if ( ( STRUCT_OR_UNION_13 -> VAR_97 != VAR_98 ) && ( ++ VAR_99 -> VAR_100 >= VAR_101 ) ) METHOD_23 ( VAR_102 -> VAR_103 , VAR_104 -> VAR_105 ) ; METHOD_24 ( VAR_106 ) ; } VAR_107 : METHOD_25 ( VAR_108 ) ; return VAR_109 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 STRUCT_OR_UNION_2 ;  METHOD_1 ( & STRUCT_OR_UNION_3 , VAR_2 , 0 ) ;  return METHOD_2 ( VAR_3 , ( TYPE_2 * ) & STRUCT_OR_UNION_4 , sizeof ( STRUCT_OR_UNION_5 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; TYPE_4 * VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; TYPE_5 VAR_7 , VAR_8 ; TYPE_6 VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ; TYPE_7 VAR_11 ; if ( ! VAR_12 . VAR_13 ) { METHOD_1 ( "KVP:Transactionnotactive\\n" ) ; return ; } VAR_14 = VAR_15 . VAR_16 ; VAR_17 = VAR_18 . VAR_19 ; VAR_20 = VAR_21 . VAR_22 ; VAR_23 . VAR_24 = VAR_25 ; if ( VAR_26 -> VAR_27 == VAR_28 ) return ; VAR_29 = ( struct STRUCT_OR_UNION_4 * ) & VAR_30 [ sizeof ( struct STRUCT_OR_UNION_5 ) ] ; VAR_31 = ( struct STRUCT_OR_UNION_6 * ) & VAR_32 [ sizeof ( struct STRUCT_OR_UNION_7 ) + sizeof ( struct STRUCT_OR_UNION_8 ) ] ; VAR_33 = & VAR_34 -> VAR_35 ; VAR_36 = VAR_37 ; if ( VAR_38 ) { VAR_39 -> VAR_40 = VAR_41 ; goto VAR_42 ; }  VAR_43 = METHOD_2 ( VAR_44 , METHOD_3 ( VAR_45 ) ,   ( TYPE_8 * ) VAR_46 -> VAR_47 . VAR_48 ) ;  VAR_49 -> VAR_50 . VAR_51 = 2 * ( VAR_52 + 1 ) ;  VAR_53 = METHOD_4 ( VAR_54 , METHOD_5 ( VAR_55 ) ,   ( TYPE_9 * ) VAR_56 -> VAR_57 . VAR_58 ) ;  VAR_59 -> VAR_60 . VAR_61 = 2 * ( VAR_62 + 1 ) ; VAR_63 -> VAR_64 . VAR_65 = VAR_66 ; VAR_67 -> VAR_68 = VAR_69 ; VAR_70 : VAR_71 -> VAR_72 = VAR_73 | VAR_74 ; METHOD_6 ( VAR_75 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , 0 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 , * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 ; TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 , VAR_11 ; if ( VAR_12 == VAR_13 ) { VAR_14 = METHOD_1 ( VAR_15 ) ; goto VAR_16 ; } VAR_17 = METHOD_2 ( VAR_18 ) ; if ( VAR_19 ) goto VAR_20 ; switch ( VAR_21 ) { case VAR_22 : VAR_23 = METHOD_3 ( VAR_24 , VAR_25 ) ; break ; case VAR_26 : if ( METHOD_4 ( & VAR_27 , VAR_28 , sizeof VAR_29 ) ) { VAR_30 = - VAR_31 ; break ; } if ( ( TYPE_7 ) ( unsigned TYPE_8 ) VAR_32 != VAR_33 ) { VAR_34 = - VAR_35 ; break ; } for ( VAR_36 = 0 ; VAR_37 < VAR_38 -> VAR_39 ; ++ VAR_40 ) { struct STRUCT_OR_UNION_3 * VAR_41 ; TYPE_9 TYPE_10 * VAR_42 = ( TYPE_11 TYPE_12 * ) ( unsigned TYPE_13 ) VAR_43 ; VAR_44 = VAR_45 -> VAR_46 [ VAR_47 ] ; METHOD_5 ( & VAR_48 -> VAR_49 ) ; if ( VAR_50 -> VAR_51 && ! METHOD_6 ( VAR_52 , VAR_53 ) ) VAR_54 = - VAR_55 ; else VAR_56 -> VAR_57 = VAR_58 ; METHOD_7 ( & VAR_59 -> VAR_60 ) ; } break ; case VAR_61 : VAR_62 = METHOD_8 ( VAR_63 , ( TYPE_14 TYPE_15 * ) VAR_64 ) ; if ( VAR_65 < 0 ) break ; VAR_66 = VAR_67 == - 1 ? VAR_68 : METHOD_9 ( VAR_69 ) ; if ( METHOD_10 ( VAR_70 ) ) { VAR_71 = METHOD_11 ( VAR_72 ) ; break ; } if ( VAR_73 != VAR_74 -> VAR_75 ) { VAR_76 = VAR_77 -> VAR_78 ;  VAR_79 = VAR_80 -> VAR_81 ;  VAR_82 -> VAR_83 = VAR_84 ? METHOD_12 ( VAR_85 ) : VAR_86 ; } else VAR_87 = VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 ; ++ VAR_93 ) { METHOD_13 ( & VAR_94 -> VAR_95 [ VAR_96 ] -> VAR_97 ) ; VAR_98 -> VAR_99 [ VAR_100 ] -> VAR_101 = VAR_102 -> VAR_103 ; METHOD_14 ( & VAR_104 -> VAR_105 [ VAR_106 ] -> VAR_107 ) ; } if ( VAR_108 ) METHOD_15 ( VAR_109 ) ; if ( VAR_110 ) METHOD_16 ( VAR_111 ) ; break ; default : VAR_112 = - VAR_113 ; break ; } VAR_114 : return VAR_115 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 < 3 ) { VAR_3 -> VAR_4 = VAR_5 ; return ; } if ( ( VAR_6 -> VAR_7 [ 0 ] . VAR_8 == 1 ) && ( VAR_9 -> VAR_10 [ 1 ] . VAR_11 == 2 ) && ( VAR_12 -> VAR_13 [ 2 ] . VAR_14 == 2 ) && ( VAR_15 -> VAR_16 [ 0 ] . VAR_17 == 1 ) && ( VAR_18 -> VAR_19 [ 1 ] . VAR_20 == 2 ) && ( VAR_21 -> VAR_22 [ 2 ] . VAR_23 == 2 ) ) { METHOD_1 ( VAR_24 ) ; } else if ( ( VAR_25 -> VAR_26 [ 0 ] . VAR_27 == 1 ) && ( VAR_28 -> VAR_29 [ 1 ] . VAR_30 == 2 ) && ( VAR_31 -> VAR_32 [ 2 ] . VAR_33 == 2 ) && ( VAR_34 -> VAR_35 [ 0 ] . VAR_36 == 1 ) && ( VAR_37 -> VAR_38 [ 1 ] . VAR_39 == 1 ) && ( VAR_40 -> VAR_41 [ 2 ] . VAR_42 == 1 ) ) { METHOD_2 ( VAR_43 ) ; } else if ( ( VAR_44 -> VAR_45 [ 0 ] . VAR_46 == 1 ) && ( VAR_47 -> VAR_48 [ 1 ] . VAR_49 == 1 ) && ( VAR_50 -> VAR_51 [ 2 ] . VAR_52 == 1 ) && ( VAR_53 -> VAR_54 [ 0 ] . VAR_55 == 1 ) && ( VAR_56 -> VAR_57 [ 1 ] . VAR_58 == 1 ) && ( VAR_59 -> VAR_60 [ 2 ] . VAR_61 == 1 ) ) { METHOD_3 ( VAR_62 ) ; } else { METHOD_4 ( VAR_63 , "%s:%d:color_sycc_to_rgb\\n\\tCANNOTCONVERT\\n" , VAR_64 , VAR_65 ) ; return ; }  VAR_66 -> VAR_67 = VAR_68 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 , TYPE_3 METHOD_1 ) { TYPE_4 VAR_2 [ 128 ] ; TYPE_5 * VAR_3 = VAR_4 ;  TYPE_6 * VAR_5 = VAR_6 ;  TYPE_7 VAR_7 = - VAR_8 ;  TYPE_8 VAR_9 ;  TYPE_9 VAR_10 = 0 ; TYPE_10 TYPE_11 * VAR_11 = VAR_12 ; VAR_13 = ( VAR_14 == VAR_15 || VAR_16 == VAR_17 || VAR_18 == VAR_19 ) ; switch ( METHOD_2 ( VAR_20 ) ) {  case VAR_21 :  VAR_22 = VAR_23 ; break ; case VAR_24 :  case VAR_25 :  case ( VAR_26 | VAR_27 ) :  if ( METHOD_3 ( VAR_28 ) <= sizeof ( VAR_29 ) ) {  VAR_30 = VAR_31 ; } else { VAR_32 = METHOD_4 ( METHOD_5 ( VAR_33 ) , VAR_34 ) ; if ( VAR_35 == VAR_36 ) return - VAR_37 ; VAR_38 = VAR_39 ; } VAR_40 = - VAR_41 ; if ( METHOD_6 ( VAR_42 ) & VAR_43 ) if ( METHOD_7 ( VAR_44 , ( TYPE_12 TYPE_13 * ) VAR_45 , METHOD_8 ( VAR_46 ) ) ) goto VAR_47 ; break ; } if ( VAR_48 ) { struct STRUCT_OR_UNION_2 * VAR_49 = VAR_50 ; VAR_51 -> VAR_52 = VAR_53 -> VAR_54 ; VAR_55 = ( TYPE_14 TYPE_15 * ) VAR_56 -> VAR_57 ; if ( VAR_58 -> VAR_59 ) { VAR_60 = sizeof ( struct STRUCT_OR_UNION_3 ) * VAR_61 -> VAR_62 ; VAR_63 = METHOD_9 ( VAR_64 , VAR_65 ) ; VAR_66 = - VAR_67 ; if ( VAR_68 == VAR_69 ) goto VAR_70 ; VAR_71 = - VAR_72 ; if ( METHOD_10 ( VAR_73 , VAR_74 , VAR_75 ) ) goto VAR_76 ; VAR_77 -> VAR_78 = VAR_79 ; } } VAR_80 = METHOD_11 ( STRUCT_OR_UNION_4 , VAR_81 , VAR_82 ) ; if ( VAR_83 == - VAR_84 ) VAR_85 = - VAR_86 ; if ( VAR_87 ) { struct STRUCT_OR_UNION_5 * VAR_88 = VAR_89 ; VAR_90 -> VAR_91 = ( TYPE_16 * ) VAR_92 ; if ( VAR_93 -> VAR_94 && VAR_95 == 0 && METHOD_12 ( VAR_96 , VAR_97 , VAR_98 ) ) VAR_99 = - VAR_100 ; goto VAR_101 ; } if ( VAR_102 < 0 ) goto VAR_103 ; VAR_104 : switch ( METHOD_13 ( VAR_105 ) ) { case VAR_106 : case ( VAR_107 | VAR_108 ) : if ( METHOD_14 ( ( TYPE_17 TYPE_18 * ) VAR_109 , VAR_110 , METHOD_15 ( VAR_111 ) ) ) VAR_112 = - VAR_113 ; break ; } VAR_114 : METHOD_16 ( VAR_115 ) ; return VAR_116 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 )  {  return METHOD_1 ( VAR_4 -> VAR_5 , METHOD_2 ( VAR_6 -> VAR_7 , 0 ) ,  VAR_8 , VAR_9 ,  VAR_10 , 0 , VAR_11 , VAR_12 , 500 ) ;   }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_2 ; TYPE_1 * VAR_3 ; TYPE_2 VAR_4 = 0 , VAR_5 ; TYPE_3 VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ; STRUCT_OR_UNION_8 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_9 ) , VAR_8 ) ; STRUCT_OR_UNION_10 = METHOD_2 ( ) ; if ( ! STRUCT_OR_UNION_11 || ! STRUCT_OR_UNION_12 ) { METHOD_3 ( & VAR_9 -> VAR_10 , "Nomorememory\\n" ) ; VAR_11 = - VAR_12 ; goto VAR_13 ; } STRUCT_OR_UNION_13 -> VAR_14 = STRUCT_OR_UNION_14 ; STRUCT_OR_UNION_15 -> VAR_15 = METHOD_4 ( VAR_16 ) ; STRUCT_OR_UNION_16 -> VAR_17 = VAR_18 ; STRUCT_OR_UNION_17 -> VAR_19 = METHOD_5 ( STRUCT_OR_UNION_18 -> VAR_20 , VAR_21 , VAR_22 , & STRUCT_OR_UNION_19 -> VAR_23 ) ; if ( ! STRUCT_OR_UNION_20 -> VAR_24 ) { METHOD_6 ( & VAR_25 -> VAR_26 , "Nomorememoryforusbuffers\\n" ) ; VAR_27 = - VAR_28 ; goto VAR_29 ; } STRUCT_OR_UNION_21 -> VAR_30 = METHOD_7 ( 0 , VAR_31 ) ; if ( ! STRUCT_OR_UNION_22 -> VAR_32 ) { METHOD_8 ( & VAR_33 -> VAR_34 , "FailedtoallocateURB\\n" ) ; VAR_35 = - VAR_36 ; goto VAR_37 ; }  VAR_38 = & VAR_39 -> VAR_40 [ 0 ] . VAR_41 [ 0 ] . VAR_42 ;  METHOD_9 ( & VAR_43 -> VAR_44 , "gtcointerfaces:%d\\n" , VAR_45 -> VAR_46 ) ; METHOD_10 ( & VAR_47 -> VAR_48 , "numendpoints:%d\\n" , VAR_49 -> VAR_50 -> VAR_51 . VAR_52 ) ; METHOD_11 ( & VAR_53 -> VAR_54 , "interfaceclass:%d\\n" , VAR_55 -> VAR_56 -> VAR_57 . VAR_58 ) ; METHOD_12 ( & VAR_59 -> VAR_60 , "endpoint:attribute:0x%xtype:0x%x\\n" , VAR_61 -> VAR_62 , VAR_63 -> VAR_64 ) ; if ( METHOD_13 ( VAR_65 ) ) METHOD_14 ( & VAR_66 -> VAR_67 , "endpoint:wehaveinterruptendpoint\\n" ) ; METHOD_15 ( & VAR_68 -> VAR_69 , "endpointextralen:%d\\n" , VAR_70 -> VAR_71 [ 0 ] . VAR_72 ) ; if ( METHOD_16 ( VAR_73 -> VAR_74 , VAR_75 , & VAR_76 ) != 0 ) { METHOD_17 ( & VAR_77 -> VAR_78 , "Can\'tretrieveextaUSBdescriptortogethidreportdescriptorlength\\n" ) ; VAR_79 = - VAR_80 ; goto VAR_81 ; } METHOD_18 ( & VAR_82 -> VAR_83 , "Extradescriptorsuccess:type:%dlen:%d\\n" , VAR_84 -> VAR_85 , VAR_86 -> VAR_87 ) ; VAR_88 = METHOD_19 ( METHOD_20 ( VAR_89 -> VAR_90 ) , VAR_91 ) ; if ( ! VAR_92 ) { METHOD_21 ( & VAR_93 -> VAR_94 , "Nomorememoryforreport\\n" ) ; VAR_95 = - VAR_96 ; goto VAR_97 ; } for ( VAR_98 = 0 ; VAR_99 < 3 ; VAR_100 ++ ) { VAR_101 = METHOD_22 ( STRUCT_OR_UNION_23 -> VAR_102 , METHOD_23 ( STRUCT_OR_UNION_24 -> VAR_103 , 0 ) , VAR_104 , VAR_105 | VAR_106 , VAR_107 << 8 , 0 , VAR_108 , METHOD_24 ( VAR_109 -> VAR_110 ) , 5000 ) ; METHOD_25 ( & VAR_111 -> VAR_112 , "usb_control_msgresult:%d\\n" , VAR_113 ) ; if ( VAR_114 == METHOD_26 ( VAR_115 -> VAR_116 ) ) { METHOD_27 ( STRUCT_OR_UNION_25 , VAR_117 , VAR_118 ) ; break ; } } METHOD_28 ( VAR_119 ) ; if ( VAR_120 != METHOD_29 ( VAR_121 -> VAR_122 ) ) { METHOD_30 ( & VAR_123 -> VAR_124 , "FailedtogetHIDReportDescriptorofsize:%d\\n" , VAR_125 -> VAR_126 ) ; VAR_127 = - VAR_128 ; goto VAR_129 ; } METHOD_31 ( STRUCT_OR_UNION_26 -> VAR_130 , STRUCT_OR_UNION_27 -> VAR_131 , sizeof ( STRUCT_OR_UNION_28 -> VAR_132 ) ) ; METHOD_32 ( STRUCT_OR_UNION_29 -> VAR_133 , "/input0" , sizeof ( STRUCT_OR_UNION_30 -> VAR_134 ) ) ; STRUCT_OR_UNION_31 -> VAR_135 = VAR_136 ; STRUCT_OR_UNION_32 -> VAR_137 = VAR_138 ; STRUCT_OR_UNION_33 -> VAR_139 = "GTCO_CalComp" ; STRUCT_OR_UNION_34 -> VAR_140 = STRUCT_OR_UNION_35 -> VAR_141 ; METHOD_33 ( STRUCT_OR_UNION_36 , STRUCT_OR_UNION_37 ) ; METHOD_34 ( STRUCT_OR_UNION_38 ) ; METHOD_35 ( STRUCT_OR_UNION_39 -> VAR_142 , & STRUCT_OR_UNION_40 -> VAR_143 ) ; STRUCT_OR_UNION_41 -> VAR_144 . VAR_145 = & VAR_146 -> VAR_147 ; VAR_148 = & VAR_149 -> VAR_150 [ 0 ] . VAR_151 [ 0 ] . VAR_152 ; METHOD_36 ( STRUCT_OR_UNION_42 -> VAR_153 , STRUCT_OR_UNION_43 -> VAR_154 , METHOD_37 ( STRUCT_OR_UNION_44 -> VAR_155 , VAR_156 -> VAR_157 ) , STRUCT_OR_UNION_45 -> VAR_158 , VAR_159 , VAR_160 , STRUCT_OR_UNION_46 , VAR_161 -> VAR_162 ) ; STRUCT_OR_UNION_47 -> VAR_163 -> VAR_164 = STRUCT_OR_UNION_48 -> VAR_165 ; STRUCT_OR_UNION_49 -> VAR_166 -> VAR_167 |= VAR_168 ; METHOD_38 ( VAR_169 , STRUCT_OR_UNION_50 ) ; VAR_170 = METHOD_39 ( STRUCT_OR_UNION_51 ) ; if ( VAR_171 ) goto VAR_172 ; return 0 ; VAR_173 : METHOD_40 ( STRUCT_OR_UNION_52 -> VAR_174 ) ; VAR_175 : METHOD_41 ( STRUCT_OR_UNION_53 -> VAR_176 , VAR_177 , STRUCT_OR_UNION_54 -> VAR_178 , STRUCT_OR_UNION_55 -> VAR_179 ) ; VAR_180 : METHOD_42 ( STRUCT_OR_UNION_56 ) ; METHOD_43 ( STRUCT_OR_UNION_57 ) ; return VAR_181 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 * VAR_5 ; VAR_6 * VAR_7 ; switch ( VAR_8 ) {  case VAR_9 :  { VAR_10 = METHOD_1 ( METHOD_2 ( VAR_11 -> VAR_12 ) ) ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 ) ; METHOD_4 ( "Launchinguntrustedlauncher%s" , VAR_16 ) ; METHOD_5 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 -> VAR_21 ) ; METHOD_6 ( VAR_22 ) ;  }  break ; case VAR_23 : { VAR_24 = METHOD_7 ( VAR_25 -> VAR_26 ) ; METHOD_8 ( VAR_27 , VAR_28 -> VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; METHOD_9 ( VAR_33 ) ; } break ; default : { } break ; } METHOD_10 ( METHOD_11 ( VAR_34 ) ) ; METHOD_12 ( VAR_35 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = STRUCT_OR_UNION_3 -> VAR_1 ; struct STRUCT_OR_UNION_4 * VAR_2 = & VAR_3 -> VAR_4 -> VAR_5 ; unsigned TYPE_1 * VAR_6 = STRUCT_OR_UNION_5 -> VAR_7 ; TYPE_2 VAR_8 = 0 ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 = STRUCT_OR_UNION_6 -> VAR_11 ; switch ( VAR_12 ) { case 0 : break ; case - VAR_13 : case - VAR_14 : case - VAR_15 : METHOD_1 ( & STRUCT_OR_UNION_7 -> VAR_16 -> VAR_17 , "%s-urbshuttingdownwithstatus:%d\\n" , VAR_18 , VAR_19 ) ; return ; default : METHOD_2 ( & STRUCT_OR_UNION_8 -> VAR_20 -> VAR_21 , "%s-nonzeroreadbulkstatusreceived:%d\\n" , VAR_22 , VAR_23 ) ; } if ( VAR_24 == - VAR_25 ) goto VAR_26 ; if ( VAR_27 ) { METHOD_3 ( & STRUCT_OR_UNION_9 -> VAR_28 -> VAR_29 , "%s-stoppingread!\\n" , VAR_30 ) ; return ; } VAR_31 = VAR_32 -> VAR_33 -> VAR_34 ;  if ( VAR_35 -> VAR_36 ) {  VAR_37 -> VAR_38 = 0 ; METHOD_4 ( VAR_39 , "%s=====Port%uLSRStatus=%02x,Data=%02x======\\n" , VAR_40 , VAR_41 , VAR_42 -> VAR_43 , * VAR_44 ) ; METHOD_5 ( VAR_45 , 1 , VAR_46 -> VAR_47 , * VAR_48 ) ; -- STRUCT_OR_UNION_10 -> VAR_49 ; ++ VAR_50 ; } if ( STRUCT_OR_UNION_11 -> VAR_51 ) { METHOD_6 ( VAR_52 , VAR_53 , STRUCT_OR_UNION_12 -> VAR_54 , VAR_55 ) ; if ( VAR_56 -> VAR_57 ) METHOD_7 ( VAR_58 , "%s-closepending,droppingdataonthefloor\\n" , VAR_59 ) ; else METHOD_8 ( VAR_60 -> VAR_61 , VAR_62 , STRUCT_OR_UNION_13 -> VAR_63 ) ; VAR_64 -> VAR_65 -> VAR_66 . VAR_67 += STRUCT_OR_UNION_14 -> VAR_68 ; } VAR_69 : METHOD_9 ( & VAR_70 -> VAR_71 ) ; if ( VAR_72 -> VAR_73 == VAR_74 ) VAR_75 = METHOD_10 ( STRUCT_OR_UNION_15 , VAR_76 ) ; else if ( VAR_77 -> VAR_78 == VAR_79 ) VAR_80 -> VAR_81 = VAR_82 ; METHOD_11 ( & VAR_83 -> VAR_84 ) ; if ( VAR_85 ) METHOD_12 ( VAR_86 , "%s-usb_submit_urbfailedwithresult%d\\n" , VAR_87 , VAR_88 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ;  if ( ( ( VAR_3 -> VAR_4 != VAR_5 -> VAR_6 . VAR_7 ) || ( VAR_8 -> VAR_9 != VAR_10 -> VAR_11 . VAR_12 ) )   && ( VAR_13 -> VAR_14 > 1 || VAR_15 -> VAR_16 != VAR_17 ) )   METHOD_1 ( "Cannotchangewidthorheightafterinitialization" ) ;  if ( ( VAR_18 -> VAR_19 > VAR_20 -> VAR_21 . VAR_22 ) ) METHOD_2 ( "Cannotincreaselag_in_frames" ) ; VAR_23 = METHOD_3 ( VAR_24 , VAR_25 , & VAR_26 -> VAR_27 , 0 ) ; if ( ! VAR_28 ) { VAR_29 -> VAR_30 = * VAR_31 ; METHOD_4 ( & VAR_32 -> VAR_33 , VAR_34 -> VAR_35 , VAR_36 -> VAR_37 , VAR_38 ) ; METHOD_5 ( VAR_39 -> VAR_40 , & VAR_41 -> VAR_42 ) ; } return VAR_43 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = 0 ; TYPE_4 * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; VAR_11 * VAR_12 ; VAR_13 * VAR_14 ; VAR_15 * VAR_16 ; VAR_17 * VAR_18 ; TYPE_5 * VAR_19 = ( TYPE_6 * ) VAR_20 ; if ( ! METHOD_1 ( "kdir" , VAR_21 , 4 ) ) { return METHOD_2 ( VAR_22 , VAR_23 ) ; } if ( ! METHOD_3 ( "v" , VAR_24 , 1 ) ) { return METHOD_4 ( VAR_25 , VAR_26 ) ; } VAR_27 = VAR_28 = METHOD_5 ( VAR_29 ) ; switch ( * VAR_30 ) { case '' : VAR_31 ++ ; if ( VAR_32 [ 0 ] == '' )  VAR_33 ++ ;  VAR_34 = METHOD_6 ( VAR_35 , '' ) ; if ( VAR_36 ) { * VAR_37 = 0 ; VAR_38 ++ ; VAR_39 = METHOD_7 ( VAR_40 , '' ) ; if ( VAR_41 ) { * VAR_42 = 0 ; VAR_43 = METHOD_8 ( VAR_44 -> VAR_45 , VAR_46 + 1 ) ; }  if ( ! METHOD_9 ( VAR_47 -> VAR_48 , VAR_49 , VAR_50 , VAR_51 ) )  METHOD_10 ( "Cannotmount%s\\n" , VAR_52 ) ;  } else {   if ( ! ( VAR_53 = METHOD_11 ( VAR_54 -> VAR_55 , VAR_56 -> VAR_57 ) ) )  METHOD_12 ( "Unknownfilesystemtype\\n" ) ;  else if ( ! METHOD_13 ( VAR_58 -> VAR_59 , VAR_60 , VAR_61 , VAR_62 -> VAR_63 ) )   METHOD_14 ( "Cannotmount%s\\n" , VAR_64 ) ;  METHOD_15 ( VAR_65 ) ; } break ; case '-' : METHOD_16 ( VAR_66 -> VAR_67 , VAR_68 + 1 ) ; break ; case '*' : METHOD_17 ( "Listcommandsinradareformat\\n" ) ; METHOD_18 ( VAR_69 -> VAR_70 -> VAR_71 , VAR_72 , VAR_73 ) { METHOD_19 ( "m%s%s0x%" PFMT64x "\\n" , VAR_74 -> VAR_75 , VAR_76 -> VAR_77 -> VAR_78 , VAR_79 -> VAR_80 ) ; } break ; case '\\0' : METHOD_20 ( VAR_81 -> VAR_82 -> VAR_83 , VAR_84 , VAR_85 ) { METHOD_21 ( "%s\\t0x%" PFMT64x "\\t%s\\n" , VAR_86 -> VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , VAR_91 -> VAR_92 ) ; } break ; case 'l' : METHOD_22 ( VAR_93 -> VAR_94 -> VAR_95 , VAR_96 , VAR_97 ) { METHOD_23 ( "%10s%s\\n" , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 ) ; } break ; case 'd' : VAR_102 ++ ; if ( VAR_103 [ 0 ] == '' ) VAR_104 ++ ; VAR_105 = METHOD_24 ( VAR_106 -> VAR_107 , VAR_108 ) ; if ( VAR_109 ) { METHOD_25 ( VAR_110 , VAR_111 , VAR_112 ) { METHOD_26 ( "%c%s\\n" , VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ; } METHOD_27 ( VAR_117 ) ; } else METHOD_28 ( "Cannotopen\'%s\'directory\\n" , VAR_118 ) ; break ; case 'p' : VAR_119 ++ ; if ( * VAR_120 == '' ) VAR_121 ++ ; VAR_122 = METHOD_29 ( VAR_123 , '' ) ; if ( VAR_124 ) { * VAR_125 = 0 ; VAR_126 = METHOD_30 ( VAR_127 -> VAR_128 , VAR_129 + 1 ) ; } VAR_130 = METHOD_31 ( VAR_131 -> VAR_132 , VAR_133 , VAR_134 ) ; if ( VAR_135 ) { METHOD_32 ( VAR_136 , VAR_137 , VAR_138 ) { METHOD_33 ( "%d%02x0x%010" PFMT64x "0x%010" PFMT64x "\\n" , VAR_139 -> VAR_140 , VAR_141 -> VAR_142 , VAR_143 -> VAR_144 , VAR_145 -> VAR_146 + VAR_147 -> VAR_148 ) ; } METHOD_34 ( VAR_149 ) ; } else METHOD_35 ( "Cannotreadpartition\\n" ) ; break ; case 'o' : VAR_150 ++ ; if ( VAR_151 [ 0 ] == '' ) VAR_152 ++ ; VAR_153 = METHOD_36 ( VAR_154 -> VAR_155 , VAR_156 ) ; if ( VAR_157 ) { METHOD_37 ( VAR_158 -> VAR_159 , VAR_160 , 0 , VAR_161 -> VAR_162 ) ; METHOD_38 ( "ffile%d0x%08" PFMT64x "\\n" , VAR_163 -> VAR_164 , VAR_165 -> VAR_166 ) ; METHOD_39 ( VAR_167 -> VAR_168 , VAR_169 ) ; } else METHOD_40 ( "Cannotopenfile\\n" ) ; break ; case 'g' : VAR_170 ++ ; if ( * VAR_171 == '' ) VAR_172 ++ ; VAR_173 = METHOD_41 ( VAR_174 , '' ) ; if ( VAR_175 ) * VAR_176 ++ = 0 ; else VAR_177 = "./" ; VAR_178 = METHOD_42 ( VAR_179 -> VAR_180 , VAR_181 ) ; if ( VAR_182 ) { METHOD_43 ( VAR_183 -> VAR_184 , VAR_185 , 0 , VAR_186 -> VAR_187 ) ; METHOD_44 ( 1 , VAR_188 -> VAR_189 , VAR_190 -> VAR_191 ) ; METHOD_45 ( VAR_192 -> VAR_193 , VAR_194 ) ; METHOD_46 ( 1 , "\\n" , 1 ) ; } else if ( ! METHOD_47 ( VAR_195 -> VAR_196 , VAR_197 , VAR_198 ) ) METHOD_48 ( "Cannotopenfile\\n" ) ; break ; case 'f' : VAR_199 ++ ; switch ( * VAR_200 ) { case '?' : METHOD_49 ( "Usage:mf[no][...]\\n" "mfn/foo*.c;searchfilesbynamein/foopath\\n" "mfo/foo0x5e91;searchfilesbyoffsetin/foopath\\n" ) ; break ; case 'n' : VAR_201 ++ ; if ( * VAR_202 == '' ) VAR_203 ++ ; VAR_204 = METHOD_50 ( VAR_205 , '' ) ; if ( VAR_206 ) { * VAR_207 ++ = 0 ; VAR_208 = METHOD_51 ( VAR_209 -> VAR_210 , VAR_211 , VAR_212 ) ; METHOD_52 ( VAR_213 , VAR_214 , VAR_215 ) { METHOD_53 ( VAR_216 ) ; METHOD_54 ( "%s\\n" , VAR_217 ) ; } } else METHOD_55 ( "Unknownstorepath\\n" ) ; break ; case 'o' : VAR_218 ++ ; if ( * VAR_219 == '' ) VAR_220 ++ ; VAR_221 = METHOD_56 ( VAR_222 , '' ) ; if ( VAR_223 ) { * VAR_224 ++ = 0 ; TYPE_7 VAR_225 = METHOD_57 ( VAR_226 -> VAR_227 , VAR_228 ) ; VAR_229 = METHOD_58 ( VAR_230 -> VAR_231 , VAR_232 , VAR_233 ) ; METHOD_59 ( VAR_234 , VAR_235 , VAR_236 ) { METHOD_60 ( VAR_237 ) ; METHOD_61 ( "%s\\n" , VAR_238 ) ; } } else METHOD_62 ( "Unknownstorepath\\n" ) ; break ; } break ; case 's' : if ( VAR_239 -> VAR_240 ) { METHOD_63 ( VAR_241 ) ; return VAR_242 ; } VAR_243 ++ ; if ( VAR_244 [ 0 ] == '' ) VAR_245 ++ ; METHOD_64 ( VAR_246 -> VAR_247 , VAR_248 ) ; break ; case 'y' : METHOD_65 ( "TODO\\n" ) ; break ; case '?' : { const TYPE_8 * VAR_249 [ ] = { "Usage:" , "m[-?*dgy][...]" , "Mountpointsmanagement" , "m" , "" , "Listallmountpointsinhumanreadableformat" , "m*" , "" , "Sameasabove,butinr2commands" , "ml" , "" , "Listfilesystemplugins" , "m" , "/mnt" , "Mountfsat/mntwithautodetectfsandcurrentoffset" , "m" , "/mntext20" , "Mountext2fsat/mntwithdelta0onIO" , "m-/" , "" , "Umountgivenpath(/)" , "my" , "" , "Yankcontentsoffileintoclipboard" , "mo" , "/foo" , "Getoffsetandsizeofgivenfile" , "mg" , "/foo" , "Getcontentsoffile/dirdumpedtodisk(XXX?)" , "mf" , "[?][o|n]" , "Searchfilesforgivenfilenameorforoffset" , "md" , "/" , "Listdirectorycontentsforpath" , "mp" , "" , "Listallsupportedpartitiontypes" , "mp" , "msdos0" , "Showpartitionsinmsdosformatatoffset0" , "ms" , "/mnt" , "Openfilesystempromptat/mnt" , VAR_250 } ; METHOD_66 ( VAR_251 , VAR_252 ) ; } break ; } METHOD_67 ( VAR_253 ) ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 , VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_4 ) ;  if ( VAR_7 & VAR_8 )  return 0 ; if ( ! VAR_9 || VAR_10 -> VAR_11 & VAR_12 ) VAR_13 = METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_14 -> VAR_15 , VAR_16 , VAR_17 ) ; else { struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 = METHOD_3 ( ) ; if ( ! STRUCT_OR_UNION_8 ) return - VAR_18 ; VAR_19 = VAR_20 - VAR_21 ; METHOD_4 ( VAR_22 , STRUCT_OR_UNION_9 ) ; METHOD_5 ( VAR_23 , VAR_24 ) ; } if ( VAR_25 < 0 ) return VAR_26 ;  if ( METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_27 , VAR_28 ) )  return - VAR_29 ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; if ( VAR_33 < 0 ) {  METHOD_8 ( STRUCT_OR_UNION_11 -> VAR_34 , VAR_35 ) ;  return VAR_36 ; } if ( ! VAR_37 || VAR_38 -> VAR_39 & VAR_40 ) METHOD_9 ( & STRUCT_OR_UNION_12 -> VAR_41 -> VAR_42 , VAR_43 , VAR_44 ) ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 ;  VAR_2 = METHOD_1 ( "_tid" , VAR_3 -> VAR_4 , VAR_5 -> VAR_6 , VAR_7 , VAR_8 | VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; if ( METHOD_2 ( VAR_13 ) ) return METHOD_3 ( VAR_14 ) ; VAR_15 -> VAR_16 = VAR_17 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; struct STRUCT_OR_UNION_0 * VAR_4 ; struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 = VAR_7 ; METHOD_1 ( VAR_8 , "o" , & VAR_9 ) ;  VAR_10 = ( struct STRUCT_OR_UNION_2 * ) METHOD_2 ( VAR_11 ) ;  if ( VAR_12 != VAR_13 ) { METHOD_3 ( VAR_14 , VAR_15 , VAR_16 ) ; METHOD_4 ( VAR_17 , VAR_18 ) ; }  VAR_19 = ( struct STRUCT_OR_UNION_3 * ) METHOD_5 ( VAR_20 ) ;  VAR_21 = METHOD_6 ( VAR_22 , VAR_23 ) ; METHOD_7 ( VAR_24 ) = & VAR_25 ; METHOD_8 ( VAR_26 ) = VAR_27 ; VAR_28 = METHOD_9 ( VAR_29 , VAR_30 , METHOD_10 ( VAR_31 , "@buf" ) ) ; METHOD_11 ( VAR_32 , VAR_33 , METHOD_12 ( VAR_34 , "@buf" ) , VAR_35 ) ; VAR_36 -> VAR_37 = METHOD_13 ( VAR_38 , VAR_39 -> VAR_40 , & VAR_41 ) ; if ( VAR_42 ) { METHOD_14 ( VAR_43 , 0 ) ; } METHOD_15 ( VAR_44 , VAR_45 -> VAR_46 ) ; if ( VAR_47 -> VAR_48 != - 1 ) { VAR_49 -> VAR_50 = METHOD_16 ( VAR_51 , VAR_52 -> VAR_53 , & VAR_54 ) ; if ( VAR_55 ) { METHOD_17 ( VAR_56 -> VAR_57 ) ; METHOD_18 ( VAR_58 , 0 ) ; } METHOD_19 ( VAR_59 , VAR_60 -> VAR_61 ) ; } VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; VAR_70 -> VAR_71 = VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 -> VAR_81 ; return VAR_82 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { TYPE_1 VAR_1 [ 16 ] ; struct STRUCT_OR_UNION_1 VAR_2 = { . VAR_3 . VAR_4 = & VAR_5 , . VAR_6 . VAR_7 = VAR_8 , . VAR_9 = METHOD_1 ( ) ,  . VAR_10 . VAR_11 = VAR_12 ,  . VAR_13 . VAR_14 = VAR_15 , . VAR_16 . VAR_17 = VAR_18 , } ; struct STRUCT_OR_UNION_2 * VAR_19 ; TYPE_2 VAR_20 ; METHOD_2 ( VAR_21 , "%x" , VAR_22 ) ; VAR_23 = METHOD_3 ( & VAR_24 ) ; if ( METHOD_4 ( VAR_25 ) ) { VAR_26 = METHOD_5 ( VAR_27 ) ; if ( VAR_28 == METHOD_6 ( - VAR_29 ) ) VAR_30 = METHOD_7 ( - VAR_31 ) ; goto VAR_32 ; } VAR_33 = METHOD_8 ( VAR_34 ) ; if ( METHOD_9 ( VAR_35 , & VAR_36 -> VAR_37 ) ) { METHOD_10 ( VAR_38 ) ; VAR_39 = METHOD_11 ( - VAR_40 ) ; } VAR_41 : return VAR_42 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  VAR_1 -> VAR_2 = 0 ;   METHOD_1 ( VAR_3 , & VAR_4 -> VAR_5 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , TYPE_1 * VAR_4 [ VAR_5 ] , struct STRUCT_OR_UNION_4 * * VAR_6 ) { TYPE_2 VAR_7 ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 ; TYPE_6 * VAR_11 = 0 ; TYPE_7 VAR_12 [ VAR_13 ] ; struct STRUCT_OR_UNION_5 * VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 ) ; TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; if ( ! VAR_19 ) { METHOD_2 ( VAR_20 , 0 , sizeof ( * VAR_21 ) ) ; } else { VAR_22 = METHOD_3 ( VAR_23 , VAR_24 | VAR_25 , ( TYPE_10 ) VAR_26 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ; if ( VAR_27 != VAR_28 ) return VAR_29 ;  METHOD_4 ( VAR_30 , VAR_31 ) ;  } if ( VAR_32 && METHOD_5 ( VAR_33 -> VAR_34 ) ) { return VAR_35 ; } for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ ) { VAR_40 [ VAR_41 ] = VAR_42 ; switch ( METHOD_6 ( VAR_43 -> VAR_44 , VAR_45 ) ) { case VAR_46 : case VAR_47 : case VAR_48 : VAR_49 = ( TYPE_11 * ) VAR_50 -> VAR_51 [ VAR_52 ] . VAR_53 . VAR_54 ; VAR_55 = VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 ; if ( ! VAR_61 ) { if ( VAR_62 ) return VAR_63 ; break ; } if ( METHOD_7 ( VAR_64 , VAR_65 , VAR_66 ) ) { VAR_67 = METHOD_8 ( VAR_68 , sizeof ( VAR_69 ) ) ; if ( METHOD_9 ( VAR_70 , VAR_71 , & VAR_72 ) ) return VAR_73 ; VAR_74 [ VAR_75 ] = VAR_76 ; break ; } VAR_77 = METHOD_10 ( VAR_78 , VAR_79 , VAR_80 , & VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 . STRUCT_OR_UNION_7 , & VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 . VAR_89 ) ; if ( VAR_90 != VAR_91 ) return VAR_92 ; break ; default : break ; } } if ( VAR_93 == 0 ) return VAR_94 ; VAR_95 = METHOD_11 ( VAR_96 , VAR_97 , & VAR_98 ) ; if ( VAR_99 != VAR_100 ) return VAR_101 ; VAR_102 = 0 ; for ( VAR_103 = 0 ; VAR_104 < VAR_105 ; VAR_106 ++ ) { if ( ! VAR_107 [ VAR_108 ] ) continue ; VAR_109 = METHOD_12 ( VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 . VAR_114 , sizeof ( VAR_115 ) ) ; switch ( METHOD_13 ( VAR_116 -> VAR_117 , VAR_118 ) ) { case VAR_119 : case VAR_120 : VAR_121 = ( TYPE_12 * ) VAR_122 -> VAR_123 [ VAR_124 ] . VAR_125 . VAR_126 ; if ( VAR_127 ) { VAR_128 = METHOD_14 ( VAR_129 , VAR_130 , VAR_131 -> VAR_132 [ VAR_133 ] . VAR_134 . VAR_135 ) ; if ( VAR_136 != VAR_137 ) return VAR_138 ; VAR_139 -> VAR_140 [ VAR_141 ] . VAR_142 . VAR_143 = VAR_144 ; VAR_145 -> VAR_146 [ VAR_147 ] . VAR_148 . STRUCT_OR_UNION_8 = * VAR_149 ; VAR_150 [ VAR_151 ] = VAR_152 ; VAR_153 += VAR_154 ; VAR_155 += VAR_156 ; } break ; case VAR_157 : VAR_158 = ( TYPE_13 * ) VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 . VAR_163 ; if ( VAR_164 ) { VAR_165 -> VAR_166 [ VAR_167 ] . VAR_168 . VAR_169 = VAR_170 ; VAR_171 -> VAR_172 [ VAR_173 ] . VAR_174 . STRUCT_OR_UNION_9 = * VAR_175 ; VAR_176 [ VAR_177 ] = VAR_178 ; VAR_179 += VAR_180 ; VAR_181 += VAR_182 ; } break ; default : continue ; } } return VAR_183 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 ;  VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ;  VAR_8 = VAR_9 -> VAR_10 ; METHOD_2 ( & VAR_11 , VAR_12 -> VAR_13 . VAR_14 + VAR_15 -> VAR_16 , 2 ) ;  if ( METHOD_3 ( VAR_17 , VAR_18 , VAR_19 ) )  return VAR_20 ;  VAR_21 -> VAR_22 = 0 ;  METHOD_4 ( & VAR_23 -> VAR_24 , VAR_25 -> VAR_26 . VAR_27 , VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 . VAR_32 = VAR_33 ; VAR_34 = METHOD_5 ( VAR_35 ) ; if ( VAR_36 != VAR_37 ) return VAR_38 ; VAR_39 -> VAR_40 . VAR_41 = VAR_42 ; return METHOD_6 ( VAR_43 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 , VAR_10 , VAR_11 = 0 , VAR_12 , VAR_13 , VAR_14 ; TYPE_10 VAR_15 ; if ( VAR_16 -> VAR_17 <= 0 ) { METHOD_1 ( VAR_18 , VAR_19 , "nreslevels2decode%dinvalidoruninitialized\\n" , VAR_20 -> VAR_21 ) ; return VAR_22 ; } if ( VAR_23 = METHOD_2 ( & VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 - 1 , VAR_30 -> VAR_31 ) ) return VAR_32 ; VAR_33 = ( VAR_34 -> VAR_35 [ 0 ] [ 1 ] - VAR_36 -> VAR_37 [ 0 ] [ 0 ] ) * ( VAR_38 -> VAR_39 [ 1 ] [ 1 ] - VAR_40 -> VAR_41 [ 1 ] [ 0 ] ) ; if ( VAR_42 -> VAR_43 == VAR_44 ) { VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = METHOD_3 ( VAR_50 , sizeof ( * VAR_51 -> VAR_52 ) ) ; if ( ! VAR_53 -> VAR_54 ) return METHOD_4 ( VAR_55 ) ; } else { VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = METHOD_5 ( VAR_61 , sizeof ( * VAR_62 -> VAR_63 ) ) ; if ( ! VAR_64 -> VAR_65 ) return METHOD_6 ( VAR_66 ) ; } VAR_67 -> VAR_68 = METHOD_7 ( VAR_69 -> VAR_70 , sizeof ( * VAR_71 -> VAR_72 ) ) ; if ( ! VAR_73 -> VAR_74 ) return METHOD_8 ( VAR_75 ) ; for ( VAR_76 = 0 ; VAR_77 < VAR_78 -> VAR_79 ; VAR_80 ++ ) { TYPE_11 VAR_81 = VAR_82 -> VAR_83 - VAR_84 ; TYPE_12 * VAR_85 = VAR_86 -> VAR_87 + VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < 2 ; VAR_91 ++ ) for ( VAR_92 = 0 ; VAR_93 < 2 ; VAR_94 ++ ) VAR_95 -> VAR_96 [ VAR_97 ] [ VAR_98 ] = METHOD_9 ( VAR_99 -> VAR_100 [ VAR_101 ] [ VAR_102 ] , VAR_103 - 1 ) ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 [ VAR_108 ] ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 [ VAR_113 ] ; if ( VAR_114 == 0 ) VAR_115 -> VAR_116 = 1 ; else VAR_117 -> VAR_118 = 3 ; if ( VAR_119 -> VAR_120 [ 0 ] [ 1 ] == VAR_121 -> VAR_122 [ 0 ] [ 0 ] ) VAR_123 -> VAR_124 = 0 ; else VAR_125 -> VAR_126 = METHOD_10 ( VAR_127 -> VAR_128 [ 0 ] [ 1 ] , VAR_129 -> VAR_130 ) - ( VAR_131 -> VAR_132 [ 0 ] [ 0 ] >> VAR_133 -> VAR_134 ) ; if ( VAR_135 -> VAR_136 [ 1 ] [ 1 ] == VAR_137 -> VAR_138 [ 1 ] [ 0 ] ) VAR_139 -> VAR_140 = 0 ; else VAR_141 -> VAR_142 = METHOD_11 ( VAR_143 -> VAR_144 [ 1 ] [ 1 ] , VAR_145 -> VAR_146 ) - ( VAR_147 -> VAR_148 [ 1 ] [ 0 ] >> VAR_149 -> VAR_150 ) ;  VAR_151 -> VAR_152 = METHOD_12 ( VAR_153 -> VAR_154 , sizeof ( * VAR_155 -> VAR_156 ) ) ;  if ( ! VAR_157 -> VAR_158 ) return METHOD_13 ( VAR_159 ) ; for ( VAR_160 = 0 ; VAR_161 < VAR_162 -> VAR_163 ; VAR_164 ++ , VAR_165 ++ ) { TYPE_13 * VAR_166 = VAR_167 -> VAR_168 + VAR_169 ; TYPE_14 VAR_170 , VAR_171 ; TYPE_15 VAR_172 ; switch ( VAR_173 -> VAR_174 ) { TYPE_16 VAR_175 ; TYPE_17 VAR_176 ; case VAR_177 : VAR_178 -> VAR_179 = 1 ; break ; case VAR_180 : VAR_181 = VAR_182 + VAR_183 [ VAR_184 -> VAR_185 == VAR_186 ] [ VAR_187 + ( VAR_188 > 0 ) ] ; VAR_189 -> VAR_190 = METHOD_14 ( 2048 + VAR_191 -> VAR_192 [ VAR_193 ] , 2 + VAR_194 - VAR_195 -> VAR_196 [ VAR_197 ] ) ; break ; case VAR_198 : VAR_199 = VAR_200 ; VAR_201 -> VAR_202 = METHOD_15 ( 2.0 , VAR_203 - VAR_204 -> VAR_205 [ VAR_206 ] ) ; VAR_207 -> VAR_208 *= VAR_209 -> VAR_210 [ VAR_211 ] / 2048.0 + 1.0 ; break ; default : VAR_212 -> VAR_213 = 0 ; METHOD_16 ( VAR_214 , VAR_215 , "Unknownquantizationformat\\n" ) ; break ; } if ( ! METHOD_17 ( VAR_216 -> VAR_217 ) ) VAR_218 -> VAR_219 *= 0.5 ; VAR_220 -> VAR_221 = VAR_222 -> VAR_223 * ( 1 << 15 ) ; if ( VAR_224 == 0 ) { for ( VAR_225 = 0 ; VAR_226 < 2 ; VAR_227 ++ ) for ( VAR_228 = 0 ; VAR_229 < 2 ; VAR_230 ++ ) VAR_231 -> VAR_232 [ VAR_233 ] [ VAR_234 ] = METHOD_18 ( VAR_235 -> VAR_236 [ VAR_237 ] [ VAR_238 ] - VAR_239 -> VAR_240 [ VAR_241 ] [ 0 ] , VAR_242 - 1 ) ; VAR_243 = VAR_244 -> VAR_245 ; VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = METHOD_19 ( VAR_251 -> VAR_252 , VAR_253 -> VAR_254 ) ; VAR_255 -> VAR_256 = METHOD_20 ( VAR_257 -> VAR_258 , VAR_259 -> VAR_260 ) ; } else { for ( VAR_261 = 0 ; VAR_262 < 2 ; VAR_263 ++ ) for ( VAR_264 = 0 ; VAR_265 < 2 ; VAR_266 ++ ) VAR_267 -> VAR_268 [ VAR_269 ] [ VAR_270 ] = METHOD_21 ( VAR_271 -> VAR_272 [ VAR_273 ] [ VAR_274 ] - VAR_275 -> VAR_276 [ VAR_277 ] [ 0 ] - ( ( ( VAR_278 + 1 >> VAR_279 ) & 1 ) << VAR_280 - 1 ) , VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_22 ( VAR_284 -> VAR_285 , VAR_286 -> VAR_287 - 1 ) ; VAR_288 -> VAR_289 = METHOD_23 ( VAR_290 -> VAR_291 , VAR_292 -> VAR_293 - 1 ) ; VAR_294 = VAR_295 -> VAR_296 - 1 ; VAR_297 = VAR_298 -> VAR_299 - 1 ; } for ( VAR_300 = 0 ; VAR_301 < 2 ; VAR_302 ++ ) VAR_303 -> VAR_304 [ 0 ] [ VAR_305 ] = METHOD_24 ( VAR_306 -> VAR_307 [ 0 ] [ VAR_308 ] , VAR_309 ) ; for ( VAR_310 = 0 ; VAR_311 < 2 ; VAR_312 ++ ) VAR_313 -> VAR_314 [ 1 ] [ VAR_315 ] = METHOD_25 ( VAR_316 -> VAR_317 [ 1 ] [ VAR_318 ] , VAR_319 ) ;  VAR_320 -> VAR_321 = METHOD_26 ( VAR_322 -> VAR_323 *  ( TYPE_18 ) VAR_324 -> VAR_325 , sizeof ( * VAR_326 -> VAR_327 ) ) ; if ( ! VAR_328 -> VAR_329 ) return METHOD_27 ( VAR_330 ) ; VAR_331 = VAR_332 -> VAR_333 * VAR_334 -> VAR_335 ; for ( VAR_336 = 0 ; VAR_337 < VAR_338 ; VAR_339 ++ ) { TYPE_19 * VAR_340 = VAR_341 -> VAR_342 + VAR_343 ; VAR_344 -> VAR_345 [ 0 ] [ 0 ] = ( VAR_346 % VAR_347 -> VAR_348 ) * ( 1 << VAR_349 ) ; VAR_350 -> VAR_351 [ 0 ] [ 0 ] = METHOD_28 ( VAR_352 -> VAR_353 [ 0 ] [ 0 ] , VAR_354 -> VAR_355 [ 0 ] [ 0 ] ) ; VAR_356 -> VAR_357 [ 1 ] [ 0 ] = ( VAR_358 / VAR_359 -> VAR_360 ) * ( 1 << VAR_361 ) ; VAR_362 -> VAR_363 [ 1 ] [ 0 ] = METHOD_29 ( VAR_364 -> VAR_365 [ 1 ] [ 0 ] , VAR_366 -> VAR_367 [ 1 ] [ 0 ] ) ; VAR_368 -> VAR_369 [ 0 ] [ 1 ] = VAR_370 -> VAR_371 [ 0 ] [ 0 ] + ( 1 << VAR_372 ) ; VAR_373 -> VAR_374 [ 0 ] [ 1 ] = METHOD_30 ( VAR_375 -> VAR_376 [ 0 ] [ 1 ] , VAR_377 -> VAR_378 [ 0 ] [ 1 ] ) ; VAR_379 -> VAR_380 [ 1 ] [ 1 ] = VAR_381 -> VAR_382 [ 1 ] [ 0 ] + ( 1 << VAR_383 ) ; VAR_384 -> VAR_385 [ 1 ] [ 1 ] = METHOD_31 ( VAR_386 -> VAR_387 [ 1 ] [ 1 ] , VAR_388 -> VAR_389 [ 1 ] [ 1 ] ) ; VAR_390 -> VAR_391 = METHOD_32 ( VAR_392 -> VAR_393 [ 0 ] [ 1 ] - VAR_394 -> VAR_395 [ 0 ] [ 0 ] , VAR_396 -> VAR_397 ) ; VAR_398 -> VAR_399 = METHOD_33 ( VAR_400 -> VAR_401 [ 1 ] [ 1 ] - VAR_402 -> VAR_403 [ 1 ] [ 0 ] , VAR_404 -> VAR_405 ) ; VAR_406 -> VAR_407 = METHOD_34 ( VAR_408 -> VAR_409 , VAR_410 -> VAR_411 ) ; if ( ! VAR_412 -> VAR_413 ) return METHOD_35 ( VAR_414 ) ; VAR_415 -> VAR_416 = METHOD_36 ( VAR_417 -> VAR_418 , VAR_419 -> VAR_420 ) ; if ( ! VAR_421 -> VAR_422 ) return METHOD_37 ( VAR_423 ) ; VAR_424 -> VAR_425 = METHOD_38 ( VAR_426 -> VAR_427 * ( TYPE_20 ) VAR_428 -> VAR_429 , sizeof ( * VAR_430 -> VAR_431 ) ) ; if ( ! VAR_432 -> VAR_433 ) return METHOD_39 ( VAR_434 ) ; for ( VAR_435 = 0 ; VAR_436 < VAR_437 -> VAR_438 * VAR_439 -> VAR_440 ; VAR_441 ++ ) { TYPE_21 * VAR_442 = VAR_443 -> VAR_444 + VAR_445 ; TYPE_22 VAR_446 , VAR_447 ; VAR_448 = ( VAR_449 -> VAR_450 [ 0 ] [ 0 ] >> VAR_451 -> VAR_452 ) << VAR_453 -> VAR_454 ; VAR_455 = VAR_456 + ( ( VAR_457 % VAR_458 -> VAR_459 ) << VAR_460 -> VAR_461 ) ; VAR_462 -> VAR_463 [ 0 ] [ 0 ] = METHOD_40 ( VAR_464 , VAR_465 -> VAR_466 [ 0 ] [ 0 ] ) ; VAR_467 = ( VAR_468 -> VAR_469 [ 1 ] [ 0 ] >> VAR_470 -> VAR_471 ) << VAR_472 -> VAR_473 ; VAR_474 = VAR_475 + ( ( VAR_476 / VAR_477 -> VAR_478 ) << VAR_479 -> VAR_480 ) ; VAR_481 -> VAR_482 [ 1 ] [ 0 ] = METHOD_41 ( VAR_483 , VAR_484 -> VAR_485 [ 1 ] [ 0 ] ) ; VAR_486 -> VAR_487 [ 0 ] [ 1 ] = METHOD_42 ( VAR_488 + ( 1 << VAR_489 -> VAR_490 ) , VAR_491 -> VAR_492 [ 0 ] [ 1 ] ) ; VAR_493 -> VAR_494 [ 1 ] [ 1 ] = METHOD_43 ( VAR_495 + ( 1 << VAR_496 -> VAR_497 ) , VAR_498 -> VAR_499 [ 1 ] [ 1 ] ) ; if ( ( VAR_500 + ! ! VAR_501 ) & 1 ) { VAR_502 -> VAR_503 [ 0 ] [ 0 ] += VAR_504 -> VAR_505 [ VAR_506 - 1 ] . VAR_507 [ 0 ] [ 1 ] - VAR_508 -> VAR_509 [ VAR_510 - 1 ] . VAR_511 [ 0 ] [ 0 ] ; VAR_512 -> VAR_513 [ 0 ] [ 1 ] += VAR_514 -> VAR_515 [ VAR_516 - 1 ] . VAR_517 [ 0 ] [ 1 ] - VAR_518 -> VAR_519 [ VAR_520 - 1 ] . VAR_521 [ 0 ] [ 0 ] ; } if ( ( VAR_522 + ! ! VAR_523 ) & 2 ) { VAR_524 -> VAR_525 [ 1 ] [ 0 ] += VAR_526 -> VAR_527 [ VAR_528 - 1 ] . VAR_529 [ 1 ] [ 1 ] - VAR_530 -> VAR_531 [ VAR_532 - 1 ] . VAR_533 [ 1 ] [ 0 ] ; VAR_534 -> VAR_535 [ 1 ] [ 1 ] += VAR_536 -> VAR_537 [ VAR_538 - 1 ] . VAR_539 [ 1 ] [ 1 ] - VAR_540 -> VAR_541 [ VAR_542 - 1 ] . VAR_543 [ 1 ] [ 0 ] ; } VAR_544 -> VAR_545 = 0 ; VAR_546 -> VAR_547 = 3 ; VAR_548 -> VAR_549 = 0 ; VAR_550 -> VAR_551 = 0 ; VAR_552 -> VAR_553 = 0 ; } } } } return 0 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 = ( struct STRUCT_OR_UNION_1 * ) VAR_2 -> VAR_3 -> VAR_4 ; TYPE_2 * VAR_5 = METHOD_1 ( ( TYPE_3 ) METHOD_2 ) ; TYPE_4 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; if ( ! VAR_10 || ! VAR_11 ) { METHOD_3 ( VAR_12 ) ; return VAR_13 ; } if ( VAR_14 -> VAR_15 -> VAR_16 & VAR_17 ) { VAR_18 = METHOD_4 ( VAR_19 ) ; if ( VAR_20 ) { VAR_21 = VAR_22 * sizeof ( TYPE_5 ) ; if ( VAR_23 < VAR_24 || VAR_25 > VAR_26 ) { goto VAR_27 ; }  struct STRUCT_OR_UNION_2 * VAR_28 = METHOD_5 ( 1 , VAR_29 * sizeof ( TYPE_6 ) ) ;  if ( VAR_30 ) { TYPE_7 VAR_31 = 0 ; for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; VAR_35 += 4 , VAR_36 ++ ) { TYPE_8 VAR_37 ; if ( VAR_38 -> VAR_39 -> VAR_40 + VAR_41 + 4 > VAR_42 -> VAR_43 || VAR_44 -> VAR_45 -> VAR_46 + VAR_47 + 4 < VAR_48 ) { break ; } VAR_49 = METHOD_6 ( VAR_50 -> VAR_51 , VAR_52 -> VAR_53 -> VAR_54 + VAR_55 , ( TYPE_9 * ) & VAR_56 , sizeof ( TYPE_10 ) ) ; if ( ! METHOD_7 ( VAR_57 ) || VAR_58 != sizeof ( TYPE_11 ) ) { break ; } VAR_59 [ VAR_60 ] . VAR_61 = VAR_62 ; VAR_63 [ VAR_64 ] . VAR_65 = VAR_66 + VAR_67 ; } VAR_68 -> VAR_69 = VAR_70 ; VAR_71 -> VAR_72 = VAR_73 ; } } } if ( VAR_74 -> VAR_75 -> VAR_76 > 0 ) { TYPE_12 VAR_77 = VAR_78 -> VAR_79 -> VAR_80 ; VAR_81 = VAR_82 * sizeof ( struct STRUCT_OR_UNION_3 ) ; if ( VAR_83 < VAR_84 || VAR_85 > VAR_86 ) { goto VAR_87 ; } struct STRUCT_OR_UNION_4 * VAR_88 = METHOD_8 ( 1 , VAR_89 + 1 ) ; if ( ! VAR_90 ) { goto VAR_91 ; } VAR_92 = VAR_93 * sizeof ( TYPE_13 ) ; if ( VAR_94 < VAR_95 || VAR_96 > VAR_97 ) { METHOD_9 ( VAR_98 ) ; goto VAR_99 ; } TYPE_14 * VAR_100 = METHOD_10 ( 1 , VAR_101 + 1 ) ; if ( ! VAR_102 ) { METHOD_11 ( VAR_103 ) ; goto VAR_104 ; } if ( VAR_105 -> VAR_106 -> VAR_107 + VAR_108 > VAR_109 -> VAR_110 || VAR_111 -> VAR_112 -> VAR_113 + VAR_114 < VAR_115 ) { METHOD_12 ( VAR_116 ) ; METHOD_13 ( VAR_117 ) ; goto VAR_118 ; } VAR_119 = METHOD_14 ( VAR_120 -> VAR_121 , VAR_122 -> VAR_123 -> VAR_124 , ( TYPE_15 * ) VAR_125 , VAR_126 ) ; if ( VAR_127 != VAR_128 ) { METHOD_15 ( VAR_129 ) ; METHOD_16 ( VAR_130 ) ; goto VAR_131 ; } for ( VAR_132 = 0 ; VAR_133 < VAR_134 -> VAR_135 -> VAR_136 ; VAR_137 ++ ) { TYPE_16 VAR_138 = METHOD_17 ( VAR_139 [ VAR_140 ] ) + VAR_141 ; if ( VAR_142 < VAR_143 -> VAR_144 -> VAR_145 && VAR_146 < VAR_147 -> VAR_148 ) { TYPE_17 VAR_149 , VAR_150 ; if ( VAR_151 + sizeof ( TYPE_18 ) > VAR_152 -> VAR_153 || VAR_154 + sizeof ( TYPE_19 ) < VAR_155 ) { METHOD_18 ( VAR_156 ) ; METHOD_19 ( VAR_157 ) ; goto VAR_158 ; } VAR_159 = METHOD_20 ( VAR_160 -> VAR_161 , VAR_162 , ( TYPE_20 * ) & VAR_163 , sizeof ( TYPE_21 ) ) ; if ( VAR_164 != sizeof ( TYPE_22 ) ) { METHOD_21 ( "problemwhilereadingrelocationentries\\n" ) ; METHOD_22 ( VAR_165 ) ; METHOD_23 ( VAR_166 ) ; goto VAR_167 ; } VAR_168 = METHOD_24 ( VAR_169 ) + VAR_170 ; VAR_171 [ VAR_172 ] . VAR_173 = VAR_174 ; VAR_175 [ VAR_176 ] . VAR_177 = VAR_178 ; TYPE_23 * VAR_179 = METHOD_25 ( TYPE_24 ) ; if ( VAR_180 ) { VAR_181 -> VAR_182 = VAR_183 ; VAR_184 -> VAR_185 = VAR_186 [ VAR_187 ] . VAR_188 ; VAR_189 -> VAR_190 = VAR_191 -> VAR_192 ; METHOD_26 ( VAR_193 , VAR_194 ) ; } } } METHOD_27 ( VAR_195 ) ; VAR_196 -> VAR_197 = VAR_198 ; } return VAR_199 ; VAR_200 : METHOD_28 ( VAR_201 ) ; return VAR_202 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 <= 0 || VAR_5 <= 0 ) return - VAR_6 ;  if ( VAR_7 -> VAR_8 >= 0 )   return - VAR_9 ;  VAR_10 -> VAR_11 = VAR_12 ; return METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * VAR_6 , TYPE_8 * VAR_7 , TYPE_9 * VAR_8 , TYPE_10 * VAR_9 , TYPE_11 * VAR_10 , TYPE_12 * * VAR_11 ) { TYPE_13 VAR_12 , VAR_13 ; const TYPE_14 * VAR_14 = 00 ; const TYPE_15 * VAR_15 = 00 ; const TYPE_16 * VAR_16 = 00 ; TYPE_17 * VAR_17 ; TYPE_18 VAR_18 , VAR_19 ; METHOD_1 ( VAR_20 != 00 ) ; METHOD_2 ( VAR_21 != 00 ) ; METHOD_3 ( VAR_22 < VAR_23 -> VAR_24 * VAR_25 -> VAR_26 ) ; VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 ] ; VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; VAR_37 = VAR_38 % VAR_39 -> VAR_40 ; VAR_41 = VAR_42 / VAR_43 -> VAR_44 ;  * VAR_45 = METHOD_4 ( ( TYPE_19 ) ( VAR_46 -> VAR_47 + VAR_48 * VAR_49 -> VAR_50 ) , ( TYPE_20 ) VAR_51 -> VAR_52 ) ;   * VAR_53 = METHOD_5 ( ( TYPE_21 ) ( VAR_54 -> VAR_55 + ( VAR_56 + 1 ) * VAR_57 -> VAR_58 ) , ( TYPE_22 ) VAR_59 -> VAR_60 ) ;   * VAR_61 = METHOD_6 ( ( TYPE_23 ) ( VAR_62 -> VAR_63 + VAR_64 * VAR_65 -> VAR_66 ) , ( TYPE_24 ) VAR_67 -> VAR_68 ) ;   * VAR_69 = METHOD_7 ( ( TYPE_25 ) ( VAR_70 -> VAR_71 + ( VAR_72 + 1 ) * VAR_73 -> VAR_74 ) , ( TYPE_26 ) VAR_75 -> VAR_76 ) ;  * VAR_77 = 0 ; * VAR_78 = 0 ; * VAR_79 = 0x7fffffff ; * VAR_80 = 0x7fffffff ; for ( VAR_81 = 0 ; VAR_82 < VAR_83 -> VAR_84 ; ++ VAR_85 ) { TYPE_27 VAR_86 ; TYPE_28 VAR_87 , VAR_88 , VAR_89 , VAR_90 ; TYPE_29 VAR_91 , VAR_92 , VAR_93 , VAR_94 ; TYPE_30 VAR_95 ; TYPE_31 VAR_96 , VAR_97 , VAR_98 , VAR_99 ; TYPE_32 VAR_100 , VAR_101 , VAR_102 , VAR_103 ; VAR_104 = VAR_105 [ VAR_106 ] ; VAR_107 = METHOD_8 ( * VAR_108 , ( TYPE_33 ) VAR_109 -> VAR_110 ) ; VAR_111 = METHOD_9 ( * VAR_112 , ( TYPE_34 ) VAR_113 -> VAR_114 ) ; VAR_115 = METHOD_10 ( * VAR_116 , ( TYPE_35 ) VAR_117 -> VAR_118 ) ; VAR_119 = METHOD_11 ( * VAR_120 , ( TYPE_36 ) VAR_121 -> VAR_122 ) ; if ( VAR_123 -> VAR_124 > * VAR_125 ) { * VAR_126 = VAR_127 -> VAR_128 ; } VAR_129 = VAR_130 -> VAR_131 - 1 ; for ( VAR_132 = 0 ; VAR_133 < VAR_134 -> VAR_135 ; ++ VAR_136 ) { TYPE_37 VAR_137 , VAR_138 ; VAR_139 = VAR_140 -> VAR_141 [ VAR_142 ] ; VAR_143 = VAR_144 -> VAR_145 [ VAR_146 ] ; * VAR_147 ++ = VAR_148 ; * VAR_149 ++ = VAR_150 ; VAR_151 = VAR_152 -> VAR_153 * ( 1u << ( VAR_154 + VAR_155 ) ) ; VAR_156 = VAR_157 -> VAR_158 * ( 1u << ( VAR_159 + VAR_160 ) ) ; * VAR_161 = ( TYPE_38 ) METHOD_12 ( ( TYPE_39 ) * VAR_162 , ( TYPE_40 ) VAR_163 ) ; * VAR_164 = ( TYPE_41 ) METHOD_13 ( ( TYPE_42 ) * VAR_165 , ( TYPE_43 ) VAR_166 ) ; VAR_167 = METHOD_14 ( VAR_168 , ( TYPE_44 ) VAR_169 ) ; VAR_170 = METHOD_15 ( VAR_171 , ( TYPE_45 ) VAR_172 ) ; VAR_173 = METHOD_16 ( VAR_174 , ( TYPE_46 ) VAR_175 ) ; VAR_176 = METHOD_17 ( VAR_177 , ( TYPE_47 ) VAR_178 ) ; VAR_179 = METHOD_18 ( VAR_180 , ( TYPE_48 ) VAR_181 ) << VAR_182 ; VAR_183 = METHOD_19 ( VAR_184 , ( TYPE_49 ) VAR_185 ) << VAR_186 ; VAR_187 = METHOD_20 ( VAR_188 , ( TYPE_50 ) VAR_189 ) << VAR_190 ; VAR_191 = METHOD_21 ( VAR_192 , ( TYPE_51 ) VAR_193 ) << VAR_194 ; VAR_195 = ( VAR_196 == VAR_197 ) ? 0 : ( TYPE_52 ) ( ( VAR_198 - VAR_199 ) >> VAR_200 ) ; VAR_201 = ( VAR_202 == VAR_203 ) ? 0 : ( TYPE_53 ) ( ( VAR_204 - VAR_205 ) >> VAR_206 ) ; * VAR_207 ++ = VAR_208 ; * VAR_209 ++ = VAR_210 ; VAR_211 = VAR_212 * VAR_213 ; if ( VAR_214 > * VAR_215 ) { * VAR_216 = VAR_217 ; } -- VAR_218 ; } ++ VAR_219 ; ++ VAR_220 ; } }
static TYPE_0 * METHOD_0 ( unsigned TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { unsigned TYPE_6 * VAR_5 , * VAR_6 , VAR_7 , * VAR_8 , VAR_9 , VAR_10 ; unsigned TYPE_7 VAR_11 ; VAR_12 = ( VAR_13 ) ? '/' : '\\\\' ; VAR_14 = ( VAR_15 ) ? '\\\\' : '/' ; VAR_16 = METHOD_1 ( ( TYPE_8 * ) VAR_17 ) ;  if ( VAR_18 ) VAR_19 *= 3 ;  if ( VAR_20 ) VAR_21 += METHOD_2 ( ( TYPE_9 * ) VAR_22 ) ; if ( ! ( VAR_23 = ( unsigned TYPE_10 * ) METHOD_3 ( VAR_24 + 2 ) ) ) {  METHOD_4 ( VAR_25 , "outofmemory!\\n" ) ;  return VAR_26 ; } * VAR_27 = '\\0' ; if ( VAR_28 ) { METHOD_5 ( ( TYPE_11 * ) VAR_29 , ( TYPE_12 * ) VAR_30 ) ; METHOD_6 ( ( TYPE_13 * ) VAR_31 , "/" ) ; }  while ( * VAR_32 == VAR_33 ) VAR_34 ++ ;   VAR_35 = & VAR_36 [ METHOD_7 ( ( TYPE_14 * ) VAR_37 ) ] ;  VAR_38 = & VAR_39 [ METHOD_8 ( ( TYPE_15 * ) VAR_40 ) ] ; if ( VAR_41 ) { do {  if ( VAR_42 >= VAR_43 ) {  METHOD_9 ( VAR_44 ) ; return VAR_45 ; } if ( ( VAR_46 = * VAR_47 ++ ) < 0x80 ) VAR_48 = VAR_49 ; else { if ( ( VAR_50 >= 0xC0 ) && ( VAR_51 < 0xE0 ) ) {  VAR_52 = ( VAR_53 & 0x1F ) << 6 ;  VAR_54 |= * VAR_55 ++ & 0x3F ; } else if ( ( VAR_56 >= 0xE0 ) && ( VAR_57 < 0xF0 ) ) { VAR_58 = ( VAR_59 & 0xF ) << 12 ; VAR_60 |= ( * VAR_61 ++ & 0x3F ) << 6 ; VAR_62 |= * VAR_63 ++ & 0x3F ; } else VAR_64 = '?' ; } if ( VAR_65 == VAR_66 ) VAR_67 = '/' ; else if ( VAR_68 == VAR_69 ) VAR_70 = '\\\\' ; else if ( VAR_71 ) VAR_72 = ( unsigned TYPE_16 ) METHOD_10 ( ( TYPE_17 ) VAR_73 ) ; if ( VAR_74 < 0x80 ) { * VAR_75 ++ = ( unsigned TYPE_18 ) VAR_76 ; } else if ( VAR_77 < 0x800 ) { * VAR_78 ++ = 0xC0 | ( VAR_79 >> 6 ) ; * VAR_80 ++ = 0x80 | ( VAR_81 & 0x3F ) ; } else { * VAR_82 ++ = 0xE0 | ( VAR_83 >> 12 ) ; * VAR_84 ++ = 0x80 | ( ( VAR_85 >> 6 ) & 0x3F ) ; * VAR_86 ++ = 0x80 | ( VAR_87 & 0x3F ) ; }  } while ( VAR_88 ) ;  } else { do { VAR_89 = * VAR_90 ++ ; if ( VAR_91 == VAR_92 ) VAR_93 = '/' ; else if ( VAR_94 == VAR_95 ) VAR_96 = '\\\\' ; else if ( VAR_97 ) VAR_98 = ( unsigned TYPE_19 ) METHOD_11 ( ( TYPE_20 ) VAR_99 ) ; } while ( ( * VAR_100 ++ = VAR_101 ) ) ; } return ( TYPE_21 * ) VAR_102 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 ; struct STRUCT_OR_UNION_4 VAR_2 ; TYPE_2 VAR_3 [ 32 ] ; TYPE_3 VAR_4 = 0 ; VAR_5 = STRUCT_OR_UNION_5 -> VAR_6 ; if ( VAR_7 -> VAR_8 ) { METHOD_1 ( VAR_9 -> VAR_10 ) ; VAR_11 -> VAR_12 = VAR_13 ; } if ( METHOD_2 ( & VAR_14 , VAR_15 , sizeof ( VAR_16 ) ) ) { VAR_17 = - VAR_18 ; goto VAR_19 ; } METHOD_3 ( VAR_20 , "application%i" , VAR_21 -> VAR_22 ) ; if ( VAR_23 . VAR_24 . VAR_25 != VAR_26 ) VAR_27 . VAR_28 . VAR_29 = VAR_30 ; VAR_31 = METHOD_4 ( & VAR_32 -> VAR_33 , VAR_34 , & VAR_35 . VAR_36 , VAR_37 -> VAR_38 ) ; if ( VAR_39 < 0 ) goto VAR_40 ;  METHOD_5 ( VAR_41 -> VAR_42 ) ;  VAR_43 -> VAR_44 = VAR_45 ; METHOD_6 ( VAR_46 -> VAR_47 ) ; VAR_48 -> VAR_49 = VAR_50 ; if ( VAR_51 -> VAR_52 ) { VAR_53 -> VAR_54 = METHOD_7 ( VAR_55 -> VAR_56 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_57 ) ; if ( VAR_58 -> VAR_59 == VAR_60 ) VAR_61 = - VAR_62 ; } else { VAR_63 -> VAR_64 = METHOD_8 ( VAR_65 -> VAR_66 * sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_67 ) ; if ( VAR_68 -> VAR_69 == VAR_70 ) VAR_71 = - VAR_72 ; } if ( VAR_73 < 0 ) { METHOD_9 ( VAR_74 -> VAR_75 ) ; VAR_76 -> VAR_77 = VAR_78 ; } else { VAR_79 -> VAR_80 -> VAR_81 |= VAR_82 ; VAR_83 -> VAR_84 -> VAR_85 = VAR_86 -> VAR_87 ? VAR_88 : VAR_89 ; VAR_90 -> VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 -> VAR_96 = ( TYPE_4 * ) VAR_97 ; VAR_98 -> VAR_99 -> VAR_100 = VAR_101 ; } VAR_102 : return VAR_103 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = ( TYPE_4 * ) VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 * VAR_6 ; TYPE_8 TYPE_9 ; METHOD_1 ( VAR_7 , 25 ) VAR_8 -> VAR_9 = METHOD_2 ( VAR_10 ) ; VAR_11 -> VAR_12 = METHOD_3 ( VAR_13 , 2 ) ; VAR_14 -> VAR_15 = METHOD_4 ( VAR_16 , 1 ) ; VAR_17 -> VAR_18 = METHOD_5 ( VAR_19 , 1 ) ; VAR_20 -> VAR_21 = METHOD_6 ( VAR_22 , 4 ) ; VAR_23 -> VAR_24 = METHOD_7 ( VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_8 ( VAR_28 ) ; VAR_29 -> VAR_30 = METHOD_9 ( VAR_31 ) ; VAR_32 = 0 ; if ( VAR_33 -> VAR_34 < 8 ) return VAR_35 ;  VAR_36 = ( TYPE_10 ) VAR_37 -> VAR_38 - 8 ;  VAR_39 = METHOD_10 ( sizeof ( TYPE_11 ) * VAR_40 ) ; if ( ! VAR_41 ) return VAR_42 ; METHOD_11 ( VAR_43 , 0 , sizeof ( TYPE_12 ) * VAR_44 ) ; while ( VAR_45 ) { METHOD_12 ( VAR_46 , 1 ) VAR_47 [ VAR_48 ] = METHOD_13 ( VAR_49 ) ; VAR_50 -- ; if ( ! VAR_51 [ VAR_52 ] ) break ; VAR_53 ++ ; } if ( VAR_54 ) { VAR_55 -> VAR_56 = METHOD_14 ( VAR_57 ) ; } METHOD_15 ( VAR_58 , 1 ) VAR_59 -> VAR_60 = METHOD_16 ( VAR_61 ) ; for ( VAR_62 = 0 ; VAR_63 < VAR_64 -> VAR_65 ; VAR_66 ++ ) { TYPE_13 VAR_67 = 0 ; VAR_68 = ( TYPE_14 ) VAR_69 -> VAR_70 ; while ( VAR_71 ) { METHOD_17 ( VAR_72 , 1 ) VAR_73 [ VAR_74 ] = METHOD_18 ( VAR_75 ) ; VAR_76 -- ; if ( ! VAR_77 [ VAR_78 ] ) break ; VAR_79 ++ ; } if ( VAR_80 ) { METHOD_19 ( VAR_81 -> VAR_82 , METHOD_20 ( VAR_83 ) , VAR_84 ) ; } } METHOD_21 ( VAR_85 , 1 ) VAR_86 -> VAR_87 = METHOD_22 ( VAR_88 ) ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 ; VAR_93 ++ ) { TYPE_15 VAR_94 = 0 ; VAR_95 = ( TYPE_16 ) VAR_96 -> VAR_97 ; while ( VAR_98 ) { METHOD_23 ( VAR_99 , 1 ) VAR_100 [ VAR_101 ] = METHOD_24 ( VAR_102 ) ; VAR_103 -- ; if ( ! VAR_104 [ VAR_105 ] ) break ; VAR_106 ++ ; } if ( VAR_107 ) { METHOD_25 ( VAR_108 -> VAR_109 , METHOD_26 ( VAR_110 ) , VAR_111 ) ; } } VAR_112 = 0 ; VAR_113 = ( TYPE_17 ) VAR_114 -> VAR_115 ; while ( VAR_116 ) { METHOD_27 ( VAR_117 , 1 ) VAR_118 [ VAR_119 ] = METHOD_28 ( VAR_120 ) ; VAR_121 -- ; if ( ! VAR_122 [ VAR_123 ] ) break ; VAR_124 ++ ; } if ( VAR_125 ) { VAR_126 -> VAR_127 = METHOD_29 ( VAR_128 ) ; } VAR_129 = 0 ; VAR_130 = ( TYPE_18 ) VAR_131 -> VAR_132 ; while ( VAR_133 ) { METHOD_30 ( VAR_134 , 1 ) VAR_135 [ VAR_136 ] = METHOD_31 ( VAR_137 ) ; VAR_138 -- ; if ( ! VAR_139 [ VAR_140 ] ) break ; VAR_141 ++ ; } if ( VAR_142 ) { VAR_143 -> VAR_144 = METHOD_32 ( VAR_145 ) ; } METHOD_33 ( VAR_146 , 1 ) VAR_147 -> VAR_148 = METHOD_34 ( VAR_149 ) ; for ( VAR_150 = 0 ; VAR_151 < VAR_152 -> VAR_153 ; VAR_154 ++ ) { TYPE_19 * VAR_155 = VAR_156 ; TYPE_20 = METHOD_35 ( ( TYPE_21 * * ) & VAR_157 , VAR_158 ) ; if ( TYPE_22 ) { if ( VAR_159 ) METHOD_36 ( ( TYPE_23 * ) VAR_160 ) ; METHOD_37 ( VAR_161 ) ; return TYPE_24 ; } METHOD_38 ( VAR_162 -> VAR_163 , VAR_164 ) ; } METHOD_39 ( VAR_165 , 1 ) VAR_166 -> VAR_167 = METHOD_40 ( VAR_168 ) ; for ( VAR_169 = 0 ; VAR_170 < VAR_171 -> VAR_172 ; VAR_173 ++ ) { TYPE_25 * VAR_174 = VAR_175 ; TYPE_26 = METHOD_41 ( ( TYPE_27 * * ) & VAR_176 , VAR_177 ) ; if ( TYPE_28 ) { if ( VAR_178 ) METHOD_42 ( ( TYPE_29 * ) VAR_179 ) ; METHOD_43 ( VAR_180 ) ; return TYPE_30 ; } METHOD_44 ( VAR_181 -> VAR_182 , VAR_183 ) ; } METHOD_45 ( VAR_184 ) ; return VAR_185 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; if ( VAR_3 ) { if ( ! VAR_4 -> VAR_5 || ! VAR_6 -> VAR_7 ) VAR_8 -> VAR_9 = VAR_10 ; else if ( ! ( VAR_11 -> VAR_12 -> VAR_13 & VAR_14 ) ) VAR_15 -> VAR_16 = VAR_17 ; else if ( ! VAR_18 -> VAR_19 -> VAR_20 . METHOD_1 ) VAR_21 -> VAR_22 = VAR_23 ; else  VAR_24 = VAR_25 -> VAR_26 -> VAR_27 . METHOD_2 ( VAR_28 -> VAR_29 -> VAR_30 ) ;  } return VAR_31 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 <= 0 || VAR_5 <= 0 ) return - VAR_6 ;  if ( VAR_7 -> VAR_8 >= 0 )   return - VAR_9 ;  VAR_10 -> VAR_11 = VAR_12 ; return METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; const TYPE_4 * VAR_5 ; if ( ! METHOD_1 ( VAR_6 , "bytes" , 6 ) ) { VAR_7 += 6 ;  VAR_8 -> VAR_9 = METHOD_2 ( VAR_10 , VAR_11 , 10 ) ;  if ( ( VAR_12 = METHOD_3 ( VAR_13 , '/' ) ) && METHOD_4 ( VAR_14 ) > 0 )  VAR_15 -> VAR_16 = METHOD_5 ( VAR_17 + 1 , VAR_18 , 10 ) ;  } if ( VAR_19 -> VAR_20 == - 1 && ( ! VAR_21 -> VAR_22 || VAR_23 -> VAR_24 != 2147483647 ) ) VAR_25 -> VAR_26 = 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * TYPE_2 ) { TYPE_3 * VAR_0 , * VAR_1 , * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 ; const TYPE_4 * VAR_6 , * VAR_7 , * VAR_8 ;  unsigned TYPE_5 VAR_9 , VAR_10 , VAR_11 ;  TYPE_6 VAR_12 , VAR_13 ;  unsigned TYPE_7 VAR_14 , VAR_15 ;  VAR_16 = ( TYPE_8 ) TYPE_9 -> TYPE_10 [ 0 ] . VAR_17 ; VAR_18 = 1 << ( VAR_19 - 1 ) ; VAR_20 = ( 1 << VAR_21 ) - 1 ;  VAR_22 = ( unsigned TYPE_11 ) TYPE_12 -> TYPE_13 [ 0 ] . TYPE_14 ; VAR_23 = ( unsigned TYPE_15 ) TYPE_16 -> TYPE_17 [ 0 ] . TYPE_18 ;  VAR_24 = VAR_25 * VAR_26 ; VAR_27 = TYPE_19 -> TYPE_20 [ 0 ] . VAR_28 ; VAR_29 = TYPE_21 -> TYPE_22 [ 1 ] . VAR_30 ; VAR_31 = TYPE_23 -> TYPE_24 [ 2 ] . VAR_32 ;  VAR_33 = VAR_34 = ( TYPE_25 * ) METHOD_1 ( sizeof ( TYPE_26 ) * ( TYPE_27 ) VAR_35 ) ;   VAR_36 = VAR_37 = ( TYPE_28 * ) METHOD_2 ( sizeof ( TYPE_29 ) * ( TYPE_30 ) VAR_38 ) ;   VAR_39 = VAR_40 = ( TYPE_31 * ) METHOD_3 ( sizeof ( TYPE_32 ) * ( TYPE_33 ) VAR_41 ) ;  if ( VAR_42 == VAR_43 || VAR_44 == VAR_45 || VAR_46 == VAR_47 ) goto VAR_48 ;  for ( VAR_49 = 0U ; VAR_50 < VAR_51 ; ++ VAR_52 )  {  for ( VAR_53 = 0U ; VAR_54 < ( VAR_55 & ~ ( unsigned TYPE_34 ) 1U ) ; VAR_56 += 2U )  { METHOD_4 ( VAR_57 , VAR_58 , * VAR_59 , * VAR_60 , * VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; ++ VAR_65 ; ++ VAR_66 ; ++ VAR_67 ; ++ VAR_68 ; METHOD_5 ( VAR_69 , VAR_70 , * VAR_71 , * VAR_72 , * VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; ++ VAR_77 ; ++ VAR_78 ; ++ VAR_79 ; ++ VAR_80 ; ++ VAR_81 ; ++ VAR_82 ; }  if ( VAR_83 < VAR_84 ) {  METHOD_6 ( VAR_85 , VAR_86 , * VAR_87 , * VAR_88 , * VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; ++ VAR_93 ; ++ VAR_94 ; ++ VAR_95 ; ++ VAR_96 ; ++ VAR_97 ; ++ VAR_98 ; } } METHOD_7 ( TYPE_35 -> TYPE_36 [ 0 ] . VAR_99 ) ; TYPE_37 -> TYPE_38 [ 0 ] . VAR_100 = VAR_101 ; METHOD_8 ( TYPE_39 -> TYPE_40 [ 1 ] . VAR_102 ) ; TYPE_41 -> TYPE_42 [ 1 ] . VAR_103 = VAR_104 ; METHOD_9 ( TYPE_43 -> TYPE_44 [ 2 ] . VAR_105 ) ; TYPE_45 -> TYPE_46 [ 2 ] . VAR_106 = VAR_107 ;  if METHOD_10 ( VAR_108 ) || METHOD_11 ( VAR_109 )   TYPE_47 -> TYPE_48 [ 1 ] . TYPE_49 = VAR_110 ; TYPE_50 -> TYPE_51 [ 1 ] . TYPE_52 = VAR_111 ;   TYPE_53 -> TYPE_54 [ 2 ] . TYPE_55 = VAR_112 ; TYPE_56 -> TYPE_57 [ 2 ] . TYPE_58 = VAR_113 ;  else TYPE_59 -> TYPE_60 [ 1 ] . TYPE_61 = ( TYPE_62 ) VAR_114 ; TYPE_63 -> TYPE_64 [ 1 ] . TYPE_65 = ( TYPE_66 ) VAR_115 ;  TYPE_67 -> TYPE_68 [ 2 ] . TYPE_69 = ( TYPE_70 ) VAR_116 ; TYPE_71 -> TYPE_72 [ 2 ] . TYPE_73 = ( TYPE_74 ) VAR_117 ;  TYPE_75 -> TYPE_76 [ 1 ] . TYPE_77 = TYPE_78 -> TYPE_79 [ 0 ] . TYPE_80 ; TYPE_81 -> TYPE_82 [ 2 ] . TYPE_83 = TYPE_84 -> TYPE_85 [ 0 ] . TYPE_86 ; TYPE_87 -> TYPE_88 [ 1 ] . TYPE_89 = TYPE_90 -> TYPE_91 [ 0 ] . TYPE_92 ;  TYPE_93 -> TYPE_94 [ 2 ] . TYPE_95 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_98 ;  return ; VAR_118 :  if ( VAR_119 ) METHOD_12 ( VAR_120 ) ;   if ( VAR_121 ) METHOD_13 ( VAR_122 ) ;   if ( VAR_123 ) METHOD_14 ( VAR_124 ) ;  }
TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 )  {  if ( VAR_2 -> VAR_3 == VAR_4 )  return ;  if ( ( VAR_5 & VAR_6 ) != ( VAR_7 -> VAR_8 & VAR_9 ) ) {   if ( VAR_10 & VAR_11 )  METHOD_1 ( & VAR_12 -> VAR_13 , & VAR_14 -> VAR_15 -> VAR_16 ) ; else METHOD_2 ( & VAR_17 -> VAR_18 , & VAR_19 -> VAR_20 -> VAR_21 ) ; }  VAR_22 -> VAR_23 = VAR_24 ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 = VAR_3 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> STRUCT_OR_UNION_5 ; const TYPE_4 * VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; METHOD_1 ( "SSH2_MSG_KEXINITreceived" ) ; if ( STRUCT_OR_UNION_6 == VAR_8 ) return VAR_9 ;  VAR_10 = METHOD_2 ( STRUCT_OR_UNION_7 , & VAR_11 ) ;  if ( ( VAR_12 = METHOD_3 ( STRUCT_OR_UNION_8 -> VAR_13 , VAR_14 , VAR_15 ) ) != 0 ) return VAR_16 ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 ; VAR_20 ++ ) if ( ( VAR_21 = METHOD_4 ( STRUCT_OR_UNION_9 , VAR_22 ) ) != 0 ) return VAR_23 ; for ( VAR_24 = 0 ; VAR_25 < VAR_26 ; VAR_27 ++ ) if ( ( VAR_28 = METHOD_5 ( STRUCT_OR_UNION_10 , VAR_29 , VAR_30 ) ) != 0 ) return VAR_31 ; if ( ( VAR_32 = METHOD_6 ( STRUCT_OR_UNION_11 , VAR_33 ) ) != 0 || ( VAR_34 = METHOD_7 ( STRUCT_OR_UNION_12 , VAR_35 ) ) != 0 || ( VAR_36 = METHOD_8 ( STRUCT_OR_UNION_13 ) ) != 0 ) return VAR_37 ; if ( ! ( STRUCT_OR_UNION_14 -> VAR_38 & VAR_39 ) ) if ( ( VAR_40 = METHOD_9 ( STRUCT_OR_UNION_15 ) ) != 0 ) return VAR_41 ; if ( ( VAR_42 = METHOD_10 ( STRUCT_OR_UNION_16 ) ) != 0 ) return VAR_43 ; if ( STRUCT_OR_UNION_17 -> VAR_44 < VAR_45 && STRUCT_OR_UNION_18 -> STRUCT_OR_UNION_19 [ STRUCT_OR_UNION_20 -> VAR_46 ] != VAR_47 ) return ( STRUCT_OR_UNION_21 -> STRUCT_OR_UNION_22 [ STRUCT_OR_UNION_23 -> VAR_48 ] ) ( STRUCT_OR_UNION_24 ) ; return VAR_49 ; }
static TYPE_0 METHOD_0 ( ) { assert_true_rule (  "import\\"tests\\"\\\nruletest{\\\ncondition:tests.constants.one+1==tests.constants.two\\\n}" ,  VAR_0 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.constants.foo==\\"foo\\"\\\n}" , VAR_1 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.constants.empty==\\"\\"\\\n}" , VAR_2 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.empty()==\\"\\"\\\n}" , VAR_3 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.struct_array[1].i==1\\\n}" , VAR_4 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.struct_array[0].i==1ortrue\\\n}" , VAR_5 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.integer_array[0]==0\\\n}" , VAR_6 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.integer_array[1]==1\\\n}" , VAR_7 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.string_array[0]==\\"foo\\"\\\n}" , VAR_8 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.string_array[2]==\\"baz\\"\\\n}" , VAR_9 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.string_dict[\\"foo\\"]==\\"foo\\"\\\n}" , VAR_10 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.string_dict[\\"bar\\"]==\\"bar\\"\\\n}" , VAR_11 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.isum(1,2)==3\\\n}" , VAR_12 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.isum(1,2,3)==6\\\n}" , VAR_13 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.fsum(1.0,2.0)==3.0\\\n}" , VAR_14 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.fsum(1.0,2.0,3.0)==6.0\\\n}" , VAR_15 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.foobar(1)==tests.foobar(1)\\\n}" , VAR_16 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.foobar(1)!=tests.foobar(2)\\\n}" , VAR_17 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{\\\ncondition:tests.length(\\"dummy\\")==5\\\n}" , VAR_18 ) ; assert_false_rule (  "import\\"tests\\"\\\nruletest{condition:tests.struct_array[0].i==1\\\n}" ,  VAR_19 ) ; assert_false_rule (  "import\\"tests\\"\\\nruletest{condition:tests.isum(1,1)==3\\\n}" ,  VAR_20 ) ; assert_false_rule (  "import\\"tests\\"\\\nruletest{condition:tests.fsum(1.0,1.0)==3.0\\\n}" ,  VAR_21 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{condition:tests.match(/foo/,\\"foo\\")==3\\\n}" , VAR_22 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{condition:tests.match(/foo/,\\"bar\\")==-1\\\n}" , VAR_23 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{condition:tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")==-1\\\n}" , VAR_24 ) ; assert_true_rule ( "import\\"tests\\"\\\nruletest{condition:tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")==7\\\n}" , VAR_25 ) ; METHOD_1 ( "import\\"\\\\x00\\"" , VAR_26 ) ; METHOD_2 ( "import\\"\\"" , VAR_27 ) ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 , * VAR_4 , * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; register TYPE_8 * VAR_10 ; register TYPE_9 VAR_11 ; TYPE_10 VAR_12 , VAR_13 ; TYPE_11 VAR_14 ; unsigned TYPE_12 VAR_15 [ VAR_16 ] ; METHOD_1 ( VAR_17 != ( const TYPE_13 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_14 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , "%s" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_15 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = VAR_36 ; VAR_37 = METHOD_8 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; if ( VAR_42 == VAR_43 ) return ( ( TYPE_16 * ) VAR_44 ) ; VAR_45 = METHOD_9 ( VAR_46 , 5 , VAR_47 ) ; if ( ( VAR_48 != 5 ) || ( METHOD_10 ( ( TYPE_17 * ) VAR_49 , "SFW95" , 5 ) != 0 ) ) METHOD_11 ( VAR_50 , "ImproperImageHeader" ) ; VAR_51 = METHOD_12 ( VAR_52 ) ; ( TYPE_18 ) METHOD_13 ( VAR_53 , ( TYPE_19 ) VAR_54 , ( TYPE_20 * ) VAR_55 ) ; METHOD_14 ( VAR_56 , ( TYPE_21 * ) VAR_57 , 0 ) ; VAR_58 = METHOD_15 ( VAR_59 -> VAR_60 ) ; for ( ; ; ) { for ( VAR_61 = METHOD_16 ( VAR_62 ) ; VAR_63 != VAR_64 ; VAR_65 = METHOD_17 ( VAR_66 ) ) { for ( VAR_67 = 0 ; VAR_68 < 17 ; VAR_69 ++ ) VAR_70 [ VAR_71 ] = VAR_72 [ VAR_73 + 1 ] ; VAR_74 [ 17 ] = ( unsigned TYPE_22 ) VAR_75 ; if ( METHOD_18 ( ( TYPE_23 * ) ( VAR_76 + 12 ) , "SFW94A" , 6 ) == 0 ) break ; } if ( VAR_77 == VAR_78 ) break ; if ( METHOD_19 ( ( TYPE_24 * ) ( VAR_79 + 12 ) , "SFW94A" , 6 ) != 0 ) { ( TYPE_25 ) METHOD_20 ( VAR_80 -> VAR_81 ) ; METHOD_21 ( VAR_82 , "ImproperImageHeader" ) ; } VAR_83 = ( TYPE_26 * ) VAR_84 ; if ( VAR_85 != - 1 ) VAR_86 = METHOD_22 ( VAR_87 , "wb" ) ; if ( ( VAR_88 == - 1 ) || ( VAR_89 == ( TYPE_27 * ) VAR_90 ) ) { ( TYPE_28 ) METHOD_23 ( VAR_91 -> VAR_92 ) ; METHOD_24 ( VAR_93 , VAR_94 , "UnableToWriteFile" , VAR_95 -> VAR_96 ) ; VAR_97 = METHOD_25 ( VAR_98 ) ; return ( ( TYPE_29 * ) VAR_99 ) ; } VAR_100 = METHOD_26 ( "SFW94A" , 1 , 6 , VAR_101 ) ; ( TYPE_30 ) VAR_102 ; VAR_103 = 65535UL * VAR_104 [ 2 ] + 256L * VAR_105 [ 1 ] + VAR_106 [ 0 ] ; for ( VAR_107 = 0 ; VAR_108 < ( TYPE_31 ) VAR_109 ; VAR_110 ++ ) { VAR_111 = METHOD_27 ( VAR_112 ) ; ( TYPE_32 ) METHOD_28 ( VAR_113 , VAR_114 ) ; } ( TYPE_33 ) METHOD_29 ( VAR_115 ) ; VAR_116 = METHOD_30 ( VAR_117 , VAR_118 ) ; if ( VAR_119 == ( TYPE_34 * ) VAR_120 ) break ; ( TYPE_35 ) METHOD_31 ( VAR_121 -> VAR_122 , VAR_123 , "slide_%02ld.sfw" , ( TYPE_36 ) VAR_124 -> VAR_125 ) ; if ( VAR_126 == ( TYPE_37 * ) VAR_127 ) VAR_128 = VAR_129 ; else { for ( VAR_130 = VAR_131 ; VAR_132 -> VAR_133 != ( TYPE_38 * ) VAR_134 ; VAR_135 = METHOD_32 ( VAR_136 ) ) ; VAR_137 -> VAR_138 = VAR_139 ; VAR_140 -> VAR_141 = VAR_142 -> VAR_143 + 1 ; VAR_144 -> VAR_145 = VAR_146 ; } if ( VAR_147 -> VAR_148 != 0 ) if ( VAR_149 -> VAR_150 >= ( VAR_151 -> VAR_152 + VAR_153 -> VAR_154 - 1 ) ) break ; VAR_155 = METHOD_33 ( VAR_156 , VAR_157 , METHOD_34 ( VAR_158 ) , METHOD_35 ( VAR_159 ) ) ; if ( VAR_160 == VAR_161 ) break ; } if ( VAR_162 != - 1 ) ( TYPE_39 ) METHOD_36 ( VAR_163 ) ; ( TYPE_40 ) METHOD_37 ( VAR_164 -> VAR_165 ) ; VAR_166 = METHOD_38 ( VAR_167 ) ;  ( TYPE_41 ) METHOD_39 ( VAR_168 ) ;  VAR_169 = METHOD_40 ( VAR_170 ) ; if ( METHOD_41 ( VAR_171 ) != VAR_172 ) { TYPE_42 * VAR_173 ; VAR_174 = METHOD_42 ( VAR_175 ) ; ( TYPE_43 ) METHOD_43 ( VAR_176 , METHOD_44 ( ) , VAR_177 , "UnexpectedEndOfFile" , "`%s\':%s" , VAR_178 -> VAR_179 , VAR_180 ) ; VAR_181 = METHOD_45 ( VAR_182 ) ; } ( TYPE_44 ) METHOD_46 ( VAR_183 ) ; return ( METHOD_47 ( VAR_184 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  TYPE_1 VAR_2 ;  if ( METHOD_1 ( VAR_3 ) != VAR_4 ) return - VAR_5 ;  VAR_6 = METHOD_2 ( VAR_7 , VAR_8 , VAR_9 , 0 ) ;   METHOD_3 ( VAR_10 , 0 , 0 ) ;  return VAR_11 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; VAR_6 = VAR_7 -> VAR_8 ; if ( ! METHOD_1 ( VAR_9 ) ) { return 0 ; } if ( ! METHOD_2 ( VAR_10 , & VAR_11 ) ) { return 0 ; }  METHOD_3 ( VAR_12 . VAR_13 [ 0 ] . VAR_14 , VAR_15 , VAR_16 ) ;  METHOD_4 ( VAR_17 , & VAR_18 , VAR_19 ) ; METHOD_5 ( METHOD_6 ( VAR_20 ) , VAR_21 ) ; return VAR_22 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 . VAR_5 ; TYPE_4 VAR_6 ; METHOD_1 ( VAR_7 , "qntsty=%d;numguard=%d;numstepsizes=%d\\n" , ( TYPE_5 ) VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 . VAR_13 , VAR_14 -> VAR_15 . VAR_16 ) ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 . VAR_21 ; ++ VAR_22 ) { METHOD_2 ( VAR_23 , "expn[%d]=0x%04x;mant[%d]=0x%04x;\\n" ,  VAR_24 , ( unsigned ) METHOD_3 ( VAR_25 -> VAR_26 . VAR_27 [ VAR_28 ] ) ,   VAR_29 , ( unsigned ) METHOD_4 ( VAR_30 -> VAR_31 . VAR_32 [ VAR_33 ] ) ) ;  } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const unsigned TYPE_1 * VAR_2 , const unsigned TYPE_2 * VAR_3 , const unsigned TYPE_3 * VAR_4 , const unsigned TYPE_4 * VAR_5 , unsigned TYPE_5 VAR_6 ) { unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( ( unsigned TYPE_8 ) VAR_9 % VAR_10 ( struct STRUCT_OR_UNION_2 ) != 0 || ( unsigned TYPE_9 * ) VAR_11 + sizeof ( struct STRUCT_OR_UNION_3 ) >= VAR_12 || ( unsigned TYPE_10 * ) VAR_13 + VAR_14 -> VAR_15 > VAR_16 ) { METHOD_1 ( "Badoffset%p\\n" , VAR_17 ) ; return - VAR_18 ; } if ( VAR_19 -> VAR_20 < sizeof ( struct STRUCT_OR_UNION_4 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_2 ( "checking:element%psize%u\\n" , VAR_21 , VAR_22 -> VAR_23 ) ; return - VAR_24 ; } if ( ! METHOD_3 ( & VAR_25 -> VAR_26 ) ) return - VAR_27 ;  VAR_28 = METHOD_4 ( VAR_29 , VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ;  if ( VAR_34 ) return VAR_35 ; for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ ) { if ( ! ( VAR_40 & ( 1 << VAR_41 ) ) ) continue ; if ( ( unsigned TYPE_11 * ) VAR_42 - VAR_43 == VAR_44 [ VAR_45 ] ) VAR_46 -> VAR_47 [ VAR_48 ] = VAR_49 [ VAR_50 ] ; if ( ( unsigned TYPE_12 * ) VAR_51 - VAR_52 == VAR_53 [ VAR_54 ] ) { if ( ! METHOD_5 ( VAR_55 ) ) { METHOD_6 ( "Underflowsmustbeunconditionaland" "usetheSTANDARDtargetwith" "ACCEPT/DROP\\n" ) ; return - VAR_56 ; } VAR_57 -> VAR_58 [ VAR_59 ] = VAR_60 [ VAR_61 ] ; } } VAR_62 -> VAR_63 = ( ( struct STRUCT_OR_UNION_6 ) { 0 , 0 } ) ; VAR_64 -> VAR_65 = 0 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 * const VAR_7 = VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 = VAR_15 -> VAR_16 ; const TYPE_8 * VAR_17 = VAR_18 -> VAR_19 ; if ( VAR_20 < 32 ) return VAR_21 ; VAR_22 = VAR_23 [ 1 ] & 7 ; VAR_24 -> VAR_25 = VAR_26 [ 1 ] & 0xE0 ; VAR_27 = METHOD_1 ( & VAR_28 [ 14 ] ) ; VAR_29 = METHOD_2 ( & VAR_30 [ 16 ] ) ; VAR_31 -> VAR_32 = VAR_33 [ 19 ] ; VAR_34 -> VAR_35 = METHOD_3 ( & VAR_36 [ 20 ] ) ; VAR_37 -> VAR_38 = VAR_39 + 32 ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 + VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 = VAR_48 - VAR_49 -> VAR_50 - 32 ; if ( VAR_51 -> VAR_52 > 512 ) return VAR_53 ; if ( VAR_54 < VAR_55 -> VAR_56 + 32 ) return VAR_57 ; if ( VAR_58 -> VAR_59 < 1 ) return VAR_60 ; if ( VAR_61 -> VAR_62 != VAR_63 && VAR_64 -> VAR_65 != VAR_66 && VAR_67 -> VAR_68 != VAR_69 ) { METHOD_4 ( VAR_70 , "Pixelformat0x%0x" , VAR_71 -> VAR_72 ) ; return VAR_73 ; } if ( ( VAR_74 = METHOD_5 ( VAR_75 , VAR_76 , VAR_77 ) ) < 0 ) return VAR_78 ; if ( VAR_79 -> VAR_80 == VAR_81 ) VAR_82 = VAR_83 -> VAR_84 ; else VAR_85 = METHOD_6 ( VAR_86 -> VAR_87 -> VAR_88 , 16 ) ; VAR_89 -> VAR_90 = VAR_91 - VAR_92 -> VAR_93 -> VAR_94 ; if ( VAR_95 -> VAR_96 < VAR_97 * VAR_98 -> VAR_99 * ( TYPE_9 ) VAR_100 -> VAR_101 / 8 ) return VAR_102 ; if ( ! VAR_103 && VAR_104 -> VAR_105 && VAR_106 -> VAR_107 <= 8 && VAR_108 -> VAR_109 != VAR_110 ) { VAR_111 -> VAR_112 = VAR_113 ;  } else if ( VAR_114 == 1 && ( VAR_115 -> VAR_116 == 6 || VAR_117 -> VAR_118 == 8 ) ) {  if ( VAR_119 -> VAR_120 != ( 1 << ( VAR_121 -> VAR_122 - 1 ) ) ) return VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; } else if ( ! VAR_127 && VAR_128 -> VAR_129 == 24 && VAR_130 -> VAR_131 == VAR_132 && ! VAR_133 -> VAR_134 ) { VAR_135 -> VAR_136 = VAR_137 ; } else { METHOD_7 ( VAR_138 , "Encoding%d,bpp%dandformat0x%x" , VAR_139 , VAR_140 -> VAR_141 , VAR_142 -> VAR_143 ) ; return VAR_144 ; } if ( ( VAR_145 = METHOD_8 ( VAR_146 , VAR_147 , 0 ) ) < 0 ) return VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; if ( VAR_152 ) { METHOD_9 ( & VAR_153 -> VAR_154 , & VAR_155 -> VAR_156 , VAR_157 * VAR_158 + VAR_159 ) ; if ( ! VAR_160 -> VAR_161 ) return METHOD_10 ( VAR_162 ) ; if ( VAR_163 -> VAR_164 == 8 ) METHOD_11 ( VAR_165 , VAR_166 ) ; else METHOD_12 ( VAR_167 , VAR_168 ) ; } else if ( VAR_169 -> VAR_170 == VAR_171 ) { METHOD_13 ( VAR_172 , VAR_173 ) ; } else { METHOD_14 ( VAR_174 , VAR_175 ) ; } * VAR_176 = 1 ; return VAR_177 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , const struct STRUCT_OR_UNION_0 * VAR_5 , const struct STRUCT_OR_UNION_1 * VAR_6 ) { switch ( VAR_7 ) { case VAR_8 : METHOD_1 ( VAR_9 , VAR_10 , VAR_11 ) ; return ( 1 ) ; case VAR_12 : METHOD_2 ( VAR_13 , VAR_14 , VAR_15 ) ; return ( 1 ) ; case VAR_16 : case VAR_17 : METHOD_3 ( VAR_18 , VAR_19 , VAR_20 , VAR_21 ) ; return ( 1 ) ; case VAR_22 : METHOD_4 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; return ( 1 ) ; case VAR_27 : if ( VAR_28 -> VAR_29 ) METHOD_5 ( ( VAR_30 , "et1" ) ) ; METHOD_6 ( VAR_31 , VAR_32 , VAR_33 ) ; return ( 1 ) ; case VAR_34 : METHOD_7 ( VAR_35 , VAR_36 , VAR_37 ) ; return ( 1 ) ; case VAR_38 : METHOD_8 ( ( VAR_39 , "(NOV-ETHII)" ) ) ; METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; return ( 1 ) ; case VAR_43 : if ( VAR_44 == 0 || VAR_45 == 0 ) { METHOD_10 ( ( VAR_46 , "[|osi]" ) ) ; return ( 1 ) ; }  METHOD_11 ( VAR_47 , VAR_48 + 1 , VAR_49 - 1 , VAR_50 - 1 ) ;  return ( 1 ) ; case VAR_51 : case VAR_52 : case VAR_53 : case VAR_54 : METHOD_12 ( VAR_55 , VAR_56 , VAR_57 ) ; return ( 1 ) ; case VAR_58 : METHOD_13 ( VAR_59 , VAR_60 , VAR_61 ) ; return ( 1 ) ; case VAR_62 : METHOD_14 ( VAR_63 , VAR_64 , VAR_65 , VAR_66 , VAR_67 ) ; return ( 1 ) ; case VAR_68 : if ( VAR_69 ) { METHOD_15 ( ( VAR_70 , ":" ) ) ; METHOD_16 ( VAR_71 , VAR_72 , VAR_73 ) ; } return ( 1 ) ; case VAR_74 : METHOD_17 ( VAR_75 , VAR_76 , VAR_77 ) ; return ( 1 ) ; case VAR_78 : METHOD_18 ( VAR_79 , VAR_80 , VAR_81 ) ; return ( 1 ) ; case VAR_82 : case VAR_83 : METHOD_19 ( VAR_84 , VAR_85 , VAR_86 ) ; return ( 1 ) ; case VAR_87 : METHOD_20 ( VAR_88 , VAR_89 , VAR_90 ) ; return ( 1 ) ; case VAR_91 : METHOD_21 ( VAR_92 , VAR_93 , VAR_94 ) ; return ( 1 ) ; case VAR_95 : METHOD_22 ( VAR_96 , VAR_97 , VAR_98 ) ; return ( 1 ) ; case VAR_99 : case VAR_100 : METHOD_23 ( VAR_101 , VAR_102 , VAR_103 ) ; return ( 1 ) ; case VAR_104 : METHOD_24 ( VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ; return ( 1 ) ; case VAR_109 : METHOD_25 ( VAR_110 , VAR_111 ) ; return ( 1 ) ; case VAR_112 : case VAR_113 : METHOD_26 ( VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ; return ( 1 ) ; case VAR_118 : METHOD_27 ( VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; return ( 1 ) ; case VAR_123 : METHOD_28 ( VAR_124 , VAR_125 , VAR_126 ) ; return ( 1 ) ; case VAR_127 : METHOD_29 ( VAR_128 , VAR_129 , VAR_130 , VAR_131 , VAR_132 , VAR_133 ) ; return ( 1 ) ; case VAR_134 : case VAR_135 : case VAR_136 : case VAR_137 : case VAR_138 : default : return ( 0 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  METHOD_1 ( VAR_1 -> VAR_2 ) ;   METHOD_2 ( VAR_3 ) ;  METHOD_3 ( & VAR_4 -> VAR_5 ) ; METHOD_4 ( & VAR_6 -> VAR_7 ) ; METHOD_5 ( & VAR_8 -> VAR_9 ) ; METHOD_6 ( & VAR_10 -> VAR_11 ) ; METHOD_7 ( VAR_12 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 * VAR_7 = "" ; TYPE_9 VAR_8 = 0 ; TYPE_10 VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 , VAR_12 ) {  const TYPE_11 * VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ;  if ( ! METHOD_3 ( VAR_17 , VAR_18 , METHOD_4 ( VAR_19 ) ) ) { VAR_20 = METHOD_5 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , - 1 , & VAR_25 ) ; if ( VAR_26 ) { METHOD_6 ( "-" ) ; } else { METHOD_7 ( "+" ) ; VAR_27 = 1 ; break ; } } } if ( VAR_28 == - VAR_29 || VAR_30 == - VAR_31 ) { VAR_32 = "Corruptedortruncatedtree" ; goto VAR_33 ; } return VAR_34 ? 0 : - VAR_35 ; VAR_36 : METHOD_8 ( "error!\\n%sfor\'%s\'hashnodein\'%s\'imagenode\\n" , VAR_37 , METHOD_9 ( VAR_38 , VAR_39 , VAR_40 ) , METHOD_10 ( VAR_41 , VAR_42 , VAR_43 ) ) ; return - 1 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; TYPE_1 VAR_4 ; VAR_5 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_6 ) ; if ( VAR_7 == VAR_8 ) return - VAR_9 ; METHOD_2 ( & VAR_10 -> VAR_11 ) ;  if ( METHOD_3 ( & VAR_12 -> VAR_13 , VAR_14 , VAR_15 ) )  return - VAR_16 ;  VAR_17 -> VAR_18 = VAR_19 ;  VAR_20 = & VAR_21 -> VAR_22 ; METHOD_4 ( VAR_23 , & VAR_24 ) ; METHOD_5 ( VAR_25 , VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 , sizeof ( VAR_29 -> VAR_30 ) , "%s/888-ir" , VAR_31 -> VAR_32 ) ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 = METHOD_7 ( & VAR_37 -> VAR_38 , VAR_39 ) ; if ( VAR_40 == 0 ) { METHOD_8 ( VAR_41 , VAR_42 , 0 ) ; METHOD_9 ( & VAR_43 -> VAR_44 ) ; VAR_45 = VAR_46 ; METHOD_10 ( VAR_47 , VAR_48 , VAR_49 , & VAR_50 ) ; METHOD_11 ( & VAR_51 -> VAR_52 ) ; VAR_53 = VAR_54 ; METHOD_12 ( VAR_55 , VAR_56 , VAR_57 , & VAR_58 ) ; } else { METHOD_13 ( & VAR_59 -> VAR_60 ) ; } return VAR_61 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 * VAR_3 = VAR_4 , VAR_5 ; TYPE_2 * VAR_6 = VAR_7 , VAR_8 ; TYPE_3 * VAR_9 = VAR_10 , VAR_11 , VAR_12 ; TYPE_4 VAR_13 ; TYPE_5 VAR_14 = 0 ; TYPE_6 VAR_15 ; METHOD_1 ( "SendingCONNECT\\n" ) ; VAR_16 = VAR_17 -> VAR_18 ; if ( VAR_19 == VAR_20 ) return - VAR_21 ; if ( VAR_22 -> VAR_23 != VAR_24 ) { VAR_25 = METHOD_2 ( VAR_26 , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 , & VAR_31 ) ;  VAR_32 += VAR_33 ;  } VAR_34 = METHOD_3 ( VAR_35 -> VAR_36 ) > VAR_37 ? VAR_38 -> VAR_39 : VAR_40 -> VAR_41 ; VAR_42 = VAR_43 -> VAR_44 > VAR_45 ? VAR_46 -> VAR_47 : VAR_48 -> VAR_49 ; VAR_50 = METHOD_4 ( VAR_51 , ( TYPE_7 * ) & VAR_52 , 0 , & VAR_53 ) ;  VAR_54 += VAR_55 ;  VAR_56 = METHOD_5 ( VAR_57 , & VAR_58 , 0 , & VAR_59 ) ;  VAR_60 += VAR_61 ;  METHOD_6 ( "SKBsize%dSNlength%zu\\n" , VAR_62 , VAR_63 -> VAR_64 ) ; VAR_65 = METHOD_7 ( VAR_66 , VAR_67 , VAR_68 ) ; if ( VAR_69 == VAR_70 ) { VAR_71 = - VAR_72 ; goto VAR_73 ; } METHOD_8 ( VAR_74 , VAR_75 , VAR_76 ) ; METHOD_9 ( VAR_77 , VAR_78 , VAR_79 ) ; METHOD_10 ( VAR_80 , VAR_81 , VAR_82 ) ; METHOD_11 ( & VAR_83 -> VAR_84 , VAR_85 ) ; VAR_86 = 0 ; VAR_87 : if ( VAR_88 ) METHOD_12 ( "error%d\\n" , VAR_89 ) ; METHOD_13 ( VAR_90 ) ; METHOD_14 ( VAR_91 ) ; METHOD_15 ( VAR_92 ) ; return VAR_93 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 ) {  struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_0 ;  struct STRUCT_OR_UNION_3 * VAR_1 ; VAR_2 = METHOD_1 ( 1 , sizeof ( * VAR_3 ) ) ; METHOD_2 ( VAR_4 , 1 ) ;  if ( VAR_5 . VAR_6 ) {  VAR_7 -> VAR_8 = METHOD_3 ( VAR_9 , VAR_10 ) ; VAR_11 -> VAR_12 = METHOD_4 ( VAR_13 -> VAR_14 , 20 * VAR_15 ) ; METHOD_5 ( STRUCT_OR_UNION_4 , VAR_16 -> VAR_17 , ( TYPE_1 * ) VAR_18 , ( TYPE_2 * ) VAR_19 ) ; } return VAR_20 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 * VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ; if ( VAR_6 != VAR_7 ) VAR_8 = VAR_9 ; else if ( ! VAR_10 || ! VAR_11 ) VAR_12 = VAR_13 ; else if ( VAR_14 -> VAR_15 != VAR_16 ) VAR_17 = VAR_18 ;  else if ( ( VAR_19 & VAR_20 ) && ! ( VAR_21 -> VAR_22 & VAR_23 ) )  VAR_24 = VAR_25 ; else if ( ( VAR_26 & VAR_27 ) && ! ( VAR_28 -> VAR_29 & VAR_30 ) ) VAR_31 = VAR_32 ; else if ( ( VAR_33 & VAR_34 ) && ! ( VAR_35 -> VAR_36 & VAR_37 ) ) VAR_38 = VAR_39 ; else if ( ( VAR_40 & VAR_41 ) && ! ( VAR_42 -> VAR_43 & VAR_44 ) ) VAR_45 = VAR_46 ; else if ( ! ( VAR_47 -> VAR_48 & VAR_49 ) ) VAR_50 = VAR_51 ; else { METHOD_1 ( VAR_52 , 0 , sizeof ( * VAR_53 ) ) ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = VAR_59 -> VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = VAR_70 ;  VAR_71 = VAR_72 ;  if ( ! ( VAR_73 & VAR_74 ) ) { VAR_75 = VAR_76 -> VAR_77 -> METHOD_2 ( VAR_78 , VAR_79 ) ; if ( VAR_80 ) { VAR_81 -> VAR_82 = VAR_83 -> VAR_84 ? VAR_85 -> VAR_86 -> VAR_87 : VAR_88 ; METHOD_3 ( VAR_89 ) ; }  if ( VAR_90 -> VAR_91 )  VAR_92 -> VAR_93 -> VAR_94 = VAR_95 -> VAR_96 ; } } return METHOD_4 ( VAR_97 , VAR_98 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 . VAR_5 ; VAR_6 * VAR_7 ;  unsigned TYPE_4 VAR_8 ;  if ( METHOD_1 ( VAR_9 , & VAR_10 -> VAR_11 ) ) { return - 1 ; } if ( ! ( VAR_12 -> VAR_13 = METHOD_2 ( VAR_14 -> VAR_15 , sizeof ( VAR_16 ) ) ) ) { return - 1 ; } for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; ++ VAR_21 ) { VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 ] ; if ( METHOD_3 ( VAR_26 , & VAR_27 -> VAR_28 ) || METHOD_4 ( VAR_29 , & VAR_30 -> VAR_31 ) || METHOD_5 ( VAR_32 , & VAR_33 -> VAR_34 ) ) { return - 1 ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; METHOD_1 ( "InitializingTJA1100...\\r\\n" ) ; if ( VAR_2 -> VAR_3 >= 32 ) { VAR_4 -> VAR_5 = VAR_6 ; } if ( VAR_7 -> VAR_8 != VAR_9 ) { VAR_10 -> VAR_11 -> METHOD_2 ( ) ; } if ( VAR_12 -> VAR_13 != VAR_14 ) { VAR_15 -> VAR_16 -> METHOD_3 ( ) ; } METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ; while ( METHOD_5 ( VAR_20 , VAR_21 ) & VAR_22 ) { } METHOD_6 ( VAR_23 ) ; VAR_24 = METHOD_7 ( VAR_25 , VAR_26 ) ; VAR_27 |= VAR_28 ; METHOD_8 ( VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 = METHOD_9 ( VAR_33 , VAR_34 ) ; VAR_35 &= ~ VAR_36 ;  VAR_37 |= VAR_38 ;  METHOD_10 ( VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = METHOD_11 ( VAR_43 , VAR_44 ) ; VAR_45 |= VAR_46 ; METHOD_12 ( VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 -> VAR_51 = VAR_52 ; METHOD_13 ( & VAR_53 ) ; return VAR_54 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_4 VAR_9 ; TYPE_5 VAR_10 ; TYPE_6 VAR_11 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * VAR_12 ; if ( ! VAR_13 ) goto VAR_14 ; STRUCT_OR_UNION_8 = METHOD_2 ( VAR_15 -> VAR_16 . VAR_17 ) ; VAR_18 = METHOD_3 ( VAR_19 ) ; if ( ( TYPE_7 * ) VAR_20 < VAR_21 -> VAR_22 || ( VAR_23 -> VAR_24 + sizeof ( * VAR_25 ) ) > VAR_26 -> VAR_27 ) goto VAR_28 ; if ( VAR_29 -> VAR_30 != VAR_31 ) goto VAR_32 ; if ( VAR_33 -> VAR_34 & ( VAR_35 | VAR_36 ) ) goto VAR_37 ; if ( VAR_38 -> VAR_39 & METHOD_4 ( VAR_40 ) ) goto VAR_41 ; if ( VAR_42 [ VAR_43 ] . VAR_44 ) { if ( VAR_45 -> VAR_46 == VAR_47 ) { TYPE_8 VAR_48 , * VAR_49 ; VAR_50 = skb_header_pointer ( VAR_51 , METHOD_5 ( VAR_52 ) + ( VAR_53 -> VAR_54 << 2 ) + VAR_55 ( struct STRUCT_OR_UNION_9 , VAR_56 ) - VAR_57 -> VAR_58 , sizeof ( VAR_59 ) , & VAR_60 ) ; if ( VAR_61 == VAR_62 ) goto VAR_63 ; if ( * VAR_64 > VAR_65 || VAR_66 [ * VAR_67 ] . VAR_68 ) goto VAR_69 ; } } VAR_70 = METHOD_6 ( STRUCT_OR_UNION_10 ) ; if ( VAR_71 == VAR_72 ) return ; VAR_73 = VAR_74 -> VAR_75 ; if ( ! ( VAR_76 -> VAR_77 & VAR_78 ) ) { struct STRUCT_OR_UNION_11 * VAR_79 = VAR_80 ; METHOD_7 ( ) ; if ( METHOD_8 ( VAR_81 ) && STRUCT_OR_UNION_12 -> VAR_82 . VAR_83 ) VAR_84 = METHOD_9 ( STRUCT_OR_UNION_13 , VAR_85 -> VAR_86 ) ; if ( VAR_87 ) VAR_88 = METHOD_10 ( VAR_89 , 0 , VAR_90 ) ; else VAR_91 = 0 ; METHOD_11 ( ) ; } VAR_92 = VAR_93 [ VAR_94 ] . VAR_95 ? ( ( VAR_96 -> VAR_97 & VAR_98 ) | VAR_99 ) : VAR_100 -> VAR_101 ;  if ( METHOD_12 ( & VAR_102 . VAR_103 , VAR_104 ) )  goto VAR_105 ; VAR_106 . VAR_107 . VAR_108 . VAR_109 = VAR_110 ; VAR_111 . VAR_112 . VAR_113 . VAR_114 = VAR_115 ; VAR_116 . VAR_117 . VAR_118 . VAR_119 . VAR_120 = VAR_121 ; VAR_122 . VAR_123 . VAR_124 . VAR_125 = 0 ; VAR_126 . VAR_127 = VAR_128 ; VAR_129 . VAR_130 = METHOD_13 ( VAR_131 ) ; METHOD_14 ( VAR_132 ) -> VAR_133 = VAR_134 ; VAR_135 . VAR_136 = VAR_137 -> VAR_138 ;  VAR_139 . VAR_140 = & VAR_141 . VAR_142 ;  VAR_143 . VAR_144 = 0 ; VAR_145 = METHOD_15 ( STRUCT_OR_UNION_14 , VAR_146 , VAR_147 , VAR_148 , VAR_149 , VAR_150 , VAR_151 , & VAR_152 ) ; if ( METHOD_16 ( VAR_153 ) ) goto VAR_154 ; if ( ! METHOD_17 ( STRUCT_OR_UNION_15 , VAR_155 , VAR_156 , VAR_157 ) ) goto VAR_158 ; VAR_159 = METHOD_18 ( & VAR_160 -> VAR_161 ) ; if ( VAR_162 > 576 ) VAR_163 = 576 ;  VAR_164 -= sizeof ( struct STRUCT_OR_UNION_16 ) + VAR_165 . VAR_166 . VAR_167 ;  VAR_168 -= sizeof ( struct STRUCT_OR_UNION_17 ) ; VAR_169 . VAR_170 = VAR_171 -> VAR_172 - VAR_173 . VAR_174 ; if ( VAR_175 . VAR_176 > VAR_177 ) VAR_178 . VAR_179 = VAR_180 ; VAR_181 . VAR_182 = sizeof ( struct STRUCT_OR_UNION_18 ) ; METHOD_19 ( & VAR_183 , & VAR_184 , & VAR_185 ) ; VAR_186 : METHOD_20 ( VAR_187 ) ; VAR_188 : METHOD_21 ( VAR_189 ) ; VAR_190 : ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; if ( VAR_5 < 2 ) return 0 ; METHOD_1 ( * VAR_6 , 2 ) ; VAR_7 = VAR_8 [ 1 ] ; VAR_9 = VAR_10 [ 0 ] ; if ( VAR_11 < VAR_12 ) return 0 ; if ( VAR_13 < 2 ) { METHOD_2 ( ( VAR_14 , "\\n\\t%sOption(0x%02x),length%u(lengthbogus,shouldbe>=2)" , METHOD_3 ( VAR_15 , "Unknown" , VAR_16 ) , VAR_17 , VAR_18 ) ) ; return 0 ; } METHOD_4 ( ( VAR_19 , "\\n\\t%sOption(0x%02x),length%u" , METHOD_5 ( VAR_20 , "Unknown" , VAR_21 ) , VAR_22 , VAR_23 ) ) ; switch ( VAR_24 ) { case VAR_25 : if ( VAR_26 != 6 ) { METHOD_6 ( ( VAR_27 , "(lengthbogus,shouldbe=6)" ) ) ; return VAR_28 ; }  METHOD_7 ( * ( VAR_29 + 2 ) , 4 ) ;  METHOD_8 ( ( VAR_30 , ":Magic-Num0x%08x" , METHOD_9 ( VAR_31 + 2 ) ) ) ; break ; default : if ( VAR_32 -> VAR_33 < 2 ) METHOD_10 ( VAR_34 , & VAR_35 [ 2 ] , "\\n\\t" , VAR_36 - 2 ) ; break ; } if ( VAR_37 -> VAR_38 > 1 ) METHOD_11 ( VAR_39 , & VAR_40 [ 2 ] , "\\n\\t" , VAR_41 - 2 ) ; return VAR_42 ; VAR_43 : METHOD_12 ( ( VAR_44 , "[|bacp]" ) ) ; return 0 ; }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_1 VAR_4 = ( METHOD_2 ( VAR_5 ) -> VAR_6 & VAR_7 ) || METHOD_3 ( VAR_8 ) ; if ( VAR_9 && METHOD_4 ( VAR_10 ) ) { if ( VAR_11 -> VAR_12 == VAR_13 ) VAR_14 -> VAR_15 = METHOD_5 ( VAR_16 ) ; VAR_17 -> VAR_18 . VAR_19 = METHOD_6 ( VAR_20 ) ; } else { VAR_21 -> VAR_22 = 0 ; VAR_23 -> VAR_24 . VAR_25 = 0 ; }  METHOD_7 ( VAR_26 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  METHOD_1 ( VAR_1 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_1 -> VAR_2 ) ;  TYPE_1 VAR_3 = STRUCT_OR_UNION_3 -> VAR_4 ; TYPE_2 VAR_5 ;  VAR_6 -> VAR_7 -> VAR_8 = METHOD_2 ( ) ;  VAR_9 -> VAR_10 -> VAR_11 = METHOD_3 ( ) ; if ( ! ( VAR_12 -> VAR_13 -> VAR_14 . VAR_15 -> VAR_16 & VAR_17 ) && ! METHOD_4 ( VAR_18 ) && METHOD_5 ( VAR_19 -> VAR_20 -> VAR_21 , STRUCT_OR_UNION_4 -> VAR_22 ) && METHOD_6 ( VAR_23 -> VAR_24 -> VAR_25 , STRUCT_OR_UNION_5 -> VAR_26 ) ) { if ( VAR_27 & VAR_28 ) { VAR_29 -> VAR_30 |= VAR_31 ; VAR_32 -> VAR_33 -> VAR_34 = STRUCT_OR_UNION_6 -> VAR_35 ; } if ( ( VAR_36 & ( VAR_37 | VAR_38 ) ) == ( VAR_39 | VAR_40 ) ) { VAR_41 -> VAR_42 |= VAR_43 ; VAR_44 -> VAR_45 -> VAR_46 = STRUCT_OR_UNION_7 -> VAR_47 ; } } VAR_48 = METHOD_7 ( VAR_49 ) ; if ( VAR_50 ) return VAR_51 ; VAR_52 -> VAR_53 = 1 ; METHOD_8 ( VAR_54 -> VAR_55 , 0 , VAR_56 ) ; return METHOD_9 ( VAR_57 -> VAR_58 , 0 , VAR_59 -> VAR_60 , VAR_61 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , unsigned * VAR_3 , struct STRUCT_OR_UNION_2 * VAR_4 , unsigned * VAR_5 , unsigned TYPE_2 VAR_6 ) { unsigned TYPE_3 VAR_7 , VAR_8 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 = 0 ; unsigned VAR_11 ; TYPE_6 VAR_12 , VAR_13 = 0 ; while ( VAR_14 > 0 && VAR_15 < VAR_16 ) { if ( METHOD_1 ( VAR_17 >= VAR_18 ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } VAR_22 = METHOD_2 ( VAR_23 -> VAR_24 , VAR_25 , VAR_26 -> VAR_27 + VAR_28 , METHOD_3 ( VAR_29 -> VAR_30 ) - VAR_31 , & VAR_32 , & VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 == VAR_37 -> VAR_38 ) { VAR_39 = 0 ; goto VAR_40 ; } if ( METHOD_4 ( VAR_41 || VAR_42 <= 0 ) ) { METHOD_5 ( VAR_43 , "unexpecteddescriptorformatforRX:" "out%d,in%d\\n" , VAR_44 , VAR_45 ) ; VAR_46 = - VAR_47 ; goto VAR_48 ; } if ( METHOD_6 ( VAR_49 ) ) { VAR_50 += * VAR_51 ; VAR_52 += * VAR_53 ; } VAR_54 [ VAR_55 ] . VAR_56 = VAR_57 ; VAR_58 [ VAR_59 ] . VAR_60 = METHOD_7 ( VAR_61 -> VAR_62 + VAR_63 , VAR_64 ) ; VAR_65 -= VAR_66 [ VAR_67 ] . VAR_68 ; ++ VAR_69 ; VAR_70 += VAR_71 ; } VAR_72 [ VAR_73 - 1 ] . VAR_74 += VAR_75 ; * VAR_76 = VAR_77 ; if ( METHOD_8 ( VAR_78 ) ) * VAR_79 = VAR_80 ;  return VAR_81 ;  VAR_82 : METHOD_9 ( VAR_83 , VAR_84 ) ; return VAR_85 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 * METHOD_1 , TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; if ( ! VAR_8 -> VAR_9 ) return ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; VAR_14 ++ ) { struct STRUCT_OR_UNION_3 * VAR_15 = & VAR_16 -> VAR_17 [ VAR_18 ] ; for ( VAR_19 = METHOD_2 ( & VAR_20 -> VAR_21 , VAR_22 -> VAR_23 ) ; VAR_24 < VAR_25 -> VAR_26 ; VAR_27 = METHOD_3 ( & VAR_28 -> VAR_29 , VAR_30 -> VAR_31 , VAR_32 + 1 ) ) {  VAR_33 = METHOD_4 ( VAR_34 , VAR_35 + VAR_36 ) ;  METHOD_5 ( VAR_37 , VAR_38 , VAR_39 ) ; } VAR_40 += ( 1 << VAR_41 -> VAR_42 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 VAR_7 = VAR_8 ; if ( VAR_9 != VAR_10 ) VAR_11 = VAR_12 ; else if ( ! VAR_13 || ! VAR_14 || ! VAR_15 || ( VAR_16 > 16 || VAR_17 < 1 ) ) VAR_18 = VAR_19 ; else if ( VAR_20 -> VAR_21 != VAR_22 ) VAR_23 = VAR_24 ; else if ( ! ( VAR_25 -> VAR_26 & VAR_27 ) ) VAR_28 = VAR_29 ;  else if ( ( VAR_30 & VAR_31 ) && ! ( VAR_32 -> VAR_33 & VAR_34 ) )  VAR_35 = VAR_36 ; else if ( ( VAR_37 & VAR_38 ) && ! ( VAR_39 -> VAR_40 & VAR_41 ) ) VAR_42 = VAR_43 ; else if ( ( VAR_44 & VAR_45 ) && ! ( VAR_46 -> VAR_47 & VAR_48 ) ) VAR_49 = VAR_50 ; else { TYPE_9 VAR_51 ; TYPE_10 * VAR_52 = VAR_53 ; if ( ! ( VAR_54 = VAR_55 -> VAR_56 . METHOD_1 ( VAR_57 , & VAR_58 ) ) ) { for ( VAR_59 = 0 ; VAR_60 < VAR_61 ; VAR_62 ++ ) { TYPE_11 VAR_63 ; if ( VAR_64 -> VAR_65 < 1 || VAR_66 -> VAR_67 > 4096 || VAR_68 -> VAR_69 < 1 || VAR_70 -> VAR_71 > VAR_72 -> VAR_73 ) { VAR_74 = VAR_75 ; break ; } VAR_76 . VAR_77 = VAR_78 ; VAR_79 . VAR_80 = VAR_81 ; VAR_82 . VAR_83 = VAR_84 - 1 - VAR_85 ; VAR_86 . VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; VAR_91 . VAR_92 . VAR_93 = VAR_94 -> VAR_95 ; if ( VAR_96 . VAR_97 ) VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 . VAR_116 = VAR_117 ; VAR_118 = VAR_119 -> VAR_120 -> METHOD_2 ( VAR_121 , & VAR_122 ) ; if ( VAR_123 ) { const TYPE_12 * VAR_124 = VAR_125 -> VAR_126 ? VAR_127 -> VAR_128 -> VAR_129 : VAR_130 ; VAR_131 -> VAR_132 = VAR_133 ; METHOD_3 ( VAR_134 ) ; while ( VAR_135 ) { VAR_136 -- ; VAR_137 -> VAR_138 = VAR_139 ; METHOD_4 ( VAR_140 ) ; VAR_141 -- ; } }  if ( VAR_142 -> VAR_143 )  VAR_144 -> VAR_145 -> VAR_146 = VAR_147 -> VAR_148 ; if ( VAR_149 ) break ; VAR_150 ++ ; VAR_151 ++ ; VAR_152 ++ ; } VAR_153 -- ; } } return METHOD_5 ( VAR_154 , VAR_155 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; TYPE_5 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; VAR_9 = VAR_10 & VAR_11 ; if ( VAR_12 & VAR_13 || VAR_14 & VAR_15 ) return - VAR_16 ;  VAR_17 -> VAR_18 = 0 ;  VAR_19 = 0 ; VAR_20 = METHOD_1 ( & VAR_21 -> VAR_22 , VAR_23 , VAR_24 , & VAR_25 ) ; if ( VAR_26 ) return VAR_27 ; if ( ! VAR_28 ) return - VAR_29 ; VAR_30 = ( struct STRUCT_OR_UNION_6 * ) VAR_31 -> VAR_32 ; if ( ! VAR_33 ) goto VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; if ( VAR_38 != VAR_39 -> VAR_40 - sizeof ( * VAR_41 ) ) { VAR_42 = - VAR_43 ; goto VAR_44 ; } if ( VAR_45 > VAR_46 ) { VAR_47 = VAR_48 ; VAR_49 -> VAR_50 |= VAR_51 ; } VAR_52 = METHOD_2 ( VAR_53 , sizeof ( * VAR_54 ) , VAR_55 -> VAR_56 , VAR_57 ) ; if ( VAR_58 ) goto VAR_59 ; if ( VAR_60 -> VAR_61 ) { struct STRUCT_OR_UNION_7 * VAR_62 ; VAR_63 = ( struct STRUCT_OR_UNION_8 * ) VAR_64 -> VAR_65 ; METHOD_3 ( VAR_66 , VAR_67 -> VAR_68 . VAR_69 , VAR_70 -> VAR_71 . VAR_72 ) ; VAR_73 -> VAR_74 = sizeof ( * VAR_75 ) ; } VAR_76 = VAR_77 ; VAR_78 : METHOD_4 ( & VAR_79 -> VAR_80 , VAR_81 ) ; return VAR_82 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { struct STRUCT_OR_UNION_0 * VAR_5 = ( struct STRUCT_OR_UNION_1 * ) ( TYPE_6 ) VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ;  if ( METHOD_1 ( VAR_8 ) )  return 0 ; if ( VAR_9 > VAR_10 -> VAR_11 - sizeof ( struct STRUCT_OR_UNION_3 ) ) return 0 ; VAR_12 = METHOD_2 ( ( struct STRUCT_OR_UNION_4 * ) & VAR_13 -> VAR_14 [ VAR_15 ] , VAR_16 -> VAR_17 - VAR_18 , VAR_19 ) ; if ( VAR_20 ) return ( TYPE_7 * ) VAR_21 - ( TYPE_8 * ) VAR_22 -> VAR_23 ; return 0 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , const struct STRUCT_OR_UNION_1 * VAR_2 ) { VAR_3 * VAR_4 ; METHOD_1 ( 8 ) ; METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_6 -> VAR_7 -> VAR_8 -> VAR_9 ) ;  METHOD_4 ( VAR_10 , VAR_11 -> VAR_12 ) ;  METHOD_5 ( 28 ) ; METHOD_6 ( VAR_13 -> VAR_14 ) ; METHOD_7 ( 16 ) ; METHOD_8 ( "openid:" , 8 ) ; METHOD_9 ( VAR_15 -> VAR_16 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 ; TYPE_5 VAR_5 , VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 ) ; if ( VAR_9 -> VAR_10 ) METHOD_2 ( ( VAR_11 , ",Flags[%s]" , METHOD_3 ( VAR_12 , "none" , VAR_13 ) ) ) ; VAR_14 -= 2 ; VAR_15 += 2 ; METHOD_4 ( * VAR_16 , 2 ) ; if ( VAR_17 < 2 ) goto VAR_18 ; VAR_19 = METHOD_5 ( VAR_20 ) ; VAR_21 -= 2 ; VAR_22 += 2 ; if ( ( VAR_23 & VAR_24 ) | ( VAR_25 & VAR_26 ) ) { METHOD_6 ( * VAR_27 , 2 ) ; if ( VAR_28 < 2 ) goto VAR_29 ; if ( VAR_30 -> VAR_31 ) METHOD_7 ( ( VAR_32 , ",sum0x%x" , METHOD_8 ( VAR_33 ) ) ) ; VAR_34 += 2 ; VAR_35 -= 2 ; METHOD_9 ( * VAR_36 , 2 ) ; if ( VAR_37 < 2 ) goto VAR_38 ; METHOD_10 ( ( VAR_39 , ",off0x%x" , METHOD_11 ( VAR_40 ) ) ) ; VAR_41 += 2 ; VAR_42 -= 2 ; } if ( VAR_43 & VAR_44 ) { METHOD_12 ( * VAR_45 , 4 ) ; if ( VAR_46 < 4 ) goto VAR_47 ; METHOD_13 ( ( VAR_48 , ",key=0x%x" , METHOD_14 ( VAR_49 ) ) ) ; VAR_50 += 4 ; VAR_51 -= 4 ; } if ( VAR_52 & VAR_53 ) { METHOD_15 ( * VAR_54 , 4 ) ; if ( VAR_55 < 4 ) goto VAR_56 ; METHOD_16 ( ( VAR_57 , ",seq%u" , METHOD_17 ( VAR_58 ) ) ) ; VAR_59 += 4 ; VAR_60 -= 4 ; } if ( VAR_61 & VAR_62 ) { for ( ; ; ) { TYPE_6 VAR_63 ; TYPE_7 VAR_64 ; TYPE_8 VAR_65 ; METHOD_18 ( * VAR_66 , 4 ) ; if ( VAR_67 < 4 ) goto VAR_68 ; VAR_69 = METHOD_19 ( VAR_70 ) ; VAR_71 = * ( VAR_72 + 2 ) ; VAR_73 = * ( VAR_74 + 3 ) ; VAR_75 += 4 ; VAR_76 -= 4 ; if ( VAR_77 == 0 && VAR_78 == 0 ) break ; if ( ! METHOD_20 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 ) ) goto VAR_85 ; if ( VAR_86 < VAR_87 ) goto VAR_88 ; VAR_89 += VAR_90 ; VAR_91 -= VAR_92 ; } } if ( VAR_93 -> VAR_94 ) METHOD_21 ( ( VAR_95 , ",proto%s(0x%04x)" , METHOD_22 ( VAR_96 , "unknown" , VAR_97 ) , VAR_98 ) ) ; METHOD_23 ( ( VAR_99 , ",length%u" , VAR_100 ) ) ; if ( VAR_101 -> VAR_102 < 1 ) METHOD_24 ( ( VAR_103 , ":" ) ) ; else METHOD_25 ( ( VAR_104 , "\\n\\t" ) ) ; switch ( VAR_105 ) { case VAR_106 : METHOD_26 ( VAR_107 , VAR_108 , VAR_109 ) ; break ; case VAR_110 : METHOD_27 ( VAR_111 , VAR_112 , VAR_113 ) ; break ; case VAR_114 : METHOD_28 ( VAR_115 , VAR_116 , VAR_117 ) ; break ; case VAR_118 : METHOD_29 ( VAR_119 , VAR_120 , VAR_121 ) ; break ; case VAR_122 : METHOD_30 ( VAR_123 , VAR_124 , VAR_125 ) ; break ; case VAR_126 :  METHOD_31 ( VAR_127 , VAR_128 , VAR_129 , VAR_130 -> VAR_131 - VAR_132 ) ;  break ; case VAR_133 : METHOD_32 ( VAR_134 , VAR_135 , VAR_136 , VAR_137 -> VAR_138 - VAR_139 , VAR_140 , VAR_141 ) ; break ; default : METHOD_33 ( ( VAR_142 , "gre-proto-0x%x" , VAR_143 ) ) ; } return ; VAR_144 : METHOD_34 ( ( VAR_145 , "%s" , VAR_146 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { TYPE_9 VAR_8 = 1 ; TYPE_10 VAR_9 = 0 ; TYPE_11 VAR_10 = VAR_11 ; TYPE_12 VAR_12 , VAR_13 , VAR_14 ; TYPE_13 VAR_15 , VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; TYPE_15 VAR_19 , VAR_20 ; TYPE_16 VAR_21 , VAR_22 ; TYPE_17 VAR_23 = METHOD_1 ( VAR_24 ) ; TYPE_18 VAR_25 , VAR_26 ; TYPE_19 VAR_27 , VAR_28 ; TYPE_20 * VAR_29 = ( TYPE_21 * ) VAR_30 ; unsigned TYPE_22 * VAR_31 = VAR_32 ; unsigned TYPE_23 * VAR_33 = VAR_34 ; TYPE_24 VAR_35 = 0 , VAR_36 = 0 ; TYPE_25 VAR_37 = METHOD_2 ( VAR_38 ) ; unsigned TYPE_26 * VAR_39 = VAR_40 ; VAR_41 = ( VAR_42 + 7 ) / 8 ; VAR_43 = ( ( VAR_44 * VAR_45 ) + 7 ) / 8 ; if ( ( VAR_46 % 8 ) == 0 ) VAR_47 = 0 ; else { if ( VAR_48 < ( VAR_49 + 1 ) ) VAR_50 = VAR_51 ; else VAR_52 = VAR_53 + 1 ; } VAR_54 = VAR_55 ; if ( VAR_56 == 0 || VAR_57 == 0 ) { TYPE_27 ( "readContigTilesIntoBuffer" , "Tilesizeortilerowsizeiszero" ) ; METHOD_3 ( - 1 ) ; } if ( VAR_58 < ( TYPE_28 ) ( VAR_59 * VAR_60 ) ) { TYPE_29 TYPE_30 TYPE_31 ( "readContigTilesIntoBuffer" , "Tilesize%luistoosmall,usingalternatecalculation%u" , VAR_61 , VAR_62 * VAR_63 ) ; VAR_64 = VAR_65 * VAR_66 ; if ( VAR_67 != ( VAR_68 / VAR_69 ) ) { TYPE_32 ( "readContigTilesIntoBuffer" , "Integeroverflowwhencalculatingbuffersize." ) ; METHOD_4 ( - 1 ) ; } }  VAR_70 = METHOD_5 ( VAR_71 ) ;  if ( VAR_72 == 0 )  return 0 ;  VAR_73 = ( ( VAR_74 * VAR_75 * VAR_76 ) + 7 ) / 8 ; for ( VAR_77 = 0 ; VAR_78 < VAR_79 ; VAR_80 += VAR_81 ) { VAR_82 = ( VAR_83 + VAR_84 > VAR_85 ) ? VAR_86 - VAR_87 : VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 ; VAR_92 += VAR_93 ) { VAR_94 = METHOD_6 ( VAR_95 , VAR_96 , VAR_97 , VAR_98 , 0 , 0 ) ; if ( VAR_99 < VAR_100 && ! VAR_101 ) { TYPE_33 ( METHOD_7 ( VAR_102 ) , "Error,can\'treadtileatrow%lucol%lu,Read%lubytesof%lu" , ( unsigned TYPE_34 ) VAR_103 , ( unsigned TYPE_35 ) VAR_104 , ( unsigned TYPE_36 ) VAR_105 , ( unsigned TYPE_37 ) VAR_106 ) ; VAR_107 = 0 ; METHOD_8 ( VAR_108 ) ; return VAR_109 ; } VAR_110 = VAR_111 * VAR_112 ; VAR_113 = ( ( VAR_114 * VAR_115 * VAR_116 ) + 7 ) / 8 ; VAR_117 = VAR_118 + VAR_119 + VAR_120 ; if ( VAR_121 + VAR_122 > VAR_123 ) VAR_124 = VAR_125 - VAR_126 ; else VAR_127 = VAR_128 ; if ( ( ( VAR_129 % 8 ) == 0 ) && ( VAR_130 == VAR_131 ) ) { for ( VAR_132 = 0 ; VAR_133 < VAR_134 ; VAR_135 ++ ) { VAR_136 = VAR_137 * VAR_138 ; METHOD_9 ( VAR_139 , VAR_140 + VAR_141 , ( VAR_142 * VAR_143 * VAR_144 ) / 8 ) ; VAR_145 += ( VAR_146 * VAR_147 * VAR_148 ) / 8 ; } } else { VAR_149 = VAR_150 = 0 ; VAR_151 = ( VAR_152 * VAR_153 * VAR_154 ) % 8 ; for ( VAR_155 = 0 ; VAR_156 < VAR_157 ; VAR_158 ++ ) { VAR_159 = VAR_160 * VAR_161 ; VAR_162 = VAR_163 + VAR_164 ; VAR_165 = ( VAR_166 + VAR_167 ) * VAR_168 ; VAR_169 = VAR_170 + VAR_171 + VAR_172 ; switch ( VAR_173 ) { case 0 : if ( METHOD_10 ( VAR_174 , VAR_175 , VAR_176 , VAR_177 , VAR_178 , VAR_179 , VAR_180 , 0 , VAR_181 ) ) { TYPE_38 ( "readContigTilesIntoBuffer" , "Unabletoextractrow%dfromtile%lu" , VAR_182 , ( unsigned TYPE_39 ) METHOD_11 ( VAR_183 ) ) ; return 1 ; } break ; case 1 : if ( VAR_184 == 1 ) { if ( METHOD_12 ( VAR_185 , VAR_186 , VAR_187 , VAR_188 , VAR_189 , VAR_190 , VAR_191 , 0 , VAR_192 , VAR_193 ) ) { TYPE_40 ( "readContigTilesIntoBuffer" , "Unabletoextractrow%dfromtile%lu" , VAR_194 , ( unsigned TYPE_41 ) METHOD_13 ( VAR_195 ) ) ; return 1 ; } break ; } else if ( METHOD_14 ( VAR_196 , VAR_197 , VAR_198 , VAR_199 , VAR_200 , VAR_201 , VAR_202 , 0 , VAR_203 , VAR_204 ) ) { TYPE_42 ( "readContigTilesIntoBuffer" , "Unabletoextractrow%dfromtile%lu" , VAR_205 , ( unsigned TYPE_43 ) METHOD_15 ( VAR_206 ) ) ; return 1 ; } break ; case 2 : if ( METHOD_16 ( VAR_207 , VAR_208 , VAR_209 , VAR_210 , VAR_211 , VAR_212 , VAR_213 , 0 , VAR_214 , VAR_215 ) ) { TYPE_44 ( "readContigTilesIntoBuffer" , "Unabletoextractrow%dfromtile%lu" , VAR_216 , ( unsigned TYPE_45 ) METHOD_17 ( VAR_217 ) ) ; return 1 ; } break ; case 3 : case 4 : case 5 : if ( METHOD_18 ( VAR_218 , VAR_219 , VAR_220 , VAR_221 , VAR_222 , VAR_223 , VAR_224 , 0 , VAR_225 , VAR_226 ) ) { TYPE_46 ( "readContigTilesIntoBuffer" , "Unabletoextractrow%dfromtile%lu" , VAR_227 , ( unsigned TYPE_47 ) METHOD_19 ( VAR_228 ) ) ; return 1 ; } break ; default : TYPE_48 ( "readContigTilesIntoBuffer" , "Unsupportedbitdepth%d" , VAR_229 ) ; return 1 ; } } VAR_230 += VAR_231 ; } } } METHOD_20 ( VAR_232 ) ; return VAR_233 ; }
static TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ; struct STRUCT_OR_UNION_2 VAR_5 ; if ( METHOD_1 ( VAR_6 ) ) { METHOD_2 ( "modify_bar_registration:bypassforpci-gvt\\n" ) ;  return ;  } switch ( VAR_7 -> VAR_8 [ VAR_9 ] . VAR_10 ) { case VAR_11 : METHOD_3 ( & VAR_12 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; VAR_13 . VAR_14 = VAR_15 -> VAR_16 ; VAR_17 . VAR_18 = VAR_19 -> VAR_20 [ VAR_21 ] . VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 [ VAR_27 ] . VAR_28 ; if ( VAR_29 ) { VAR_30 . VAR_31 = VAR_32 ; VAR_33 . VAR_34 = VAR_35 ; VAR_36 . VAR_37 = VAR_38 ; VAR_39 = METHOD_4 ( & VAR_40 ) ; } else VAR_41 = METHOD_5 ( & VAR_42 ) ; break ; case VAR_43 : case VAR_44 : METHOD_6 ( & VAR_45 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_46 . VAR_47 = VAR_48 -> VAR_49 ; VAR_50 . VAR_51 = VAR_52 -> VAR_53 [ VAR_54 ] . VAR_55 ; VAR_56 . VAR_57 = VAR_58 -> VAR_59 [ VAR_60 ] . VAR_61 ; if ( VAR_62 ) { VAR_63 . VAR_64 = VAR_65 ; VAR_66 . VAR_67 = VAR_68 ; VAR_69 . VAR_70 = VAR_71 ; VAR_72 . VAR_73 = VAR_74 ; VAR_75 = METHOD_7 ( & VAR_76 ) ; } else VAR_77 = METHOD_8 ( & VAR_78 ) ; break ; default : VAR_79 = VAR_80 ; break ; }  METHOD_9 ( VAR_81 == 0 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_2 ( VAR_6 ) ;  unsigned TYPE_3 VAR_7 ; TYPE_4 * VAR_8 = ( TYPE_5 * ) VAR_9 ; TYPE_6 VAR_10 ; VAR_11 = METHOD_3 ( VAR_12 , & VAR_13 , 0 ) ; if ( ! VAR_14 || ( * VAR_15 && ( * VAR_16 != '\\n' ) ) ) return - VAR_17 ; VAR_18 = ! ! VAR_19 ; if ( ! METHOD_4 ( VAR_20 , & VAR_21 -> VAR_22 ) || ! METHOD_5 ( VAR_23 , & VAR_24 -> VAR_25 ) || ! METHOD_6 ( VAR_26 , & VAR_27 -> VAR_28 ) ) return - VAR_29 ;  if ( VAR_30 && VAR_31 == VAR_32 -> VAR_33 &&  VAR_34 -> VAR_35 != VAR_36 -> VAR_37 )  return - VAR_38 ;   if ( VAR_39 && ! VAR_40 -> VAR_41 ) {  VAR_42 = METHOD_7 ( VAR_43 ) ; if ( VAR_44 )  return VAR_45 ;  } if ( ! VAR_46 && VAR_47 -> VAR_48 && VAR_49 -> VAR_50 == VAR_51 -> VAR_52 ) { METHOD_8 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; } VAR_57 -> VAR_58 = VAR_59 ; if ( VAR_60 -> VAR_61 ) { VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; }  return VAR_69 ;  }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ 128 ] ; TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ; TYPE_4 VAR_8 , VAR_9 ; TYPE_5 * VAR_10 ; METHOD_1 ( "ptaReadStream" ) ; if ( ! VAR_11 ) return ( TYPE_6 * ) METHOD_2 ( "streamnotdefined" , VAR_12 , VAR_13 ) ; if ( METHOD_3 ( VAR_14 , "\\nPtaVersion%d\\n" , & VAR_15 ) != 1 ) return ( TYPE_7 * ) METHOD_4 ( "notaptafile" , VAR_16 , VAR_17 ) ; if ( VAR_18 != VAR_19 ) return ( TYPE_8 * ) METHOD_5 ( "invalidptaversion" , VAR_20 , VAR_21 ) ;  if ( METHOD_6 ( VAR_22 , "Numberofpts=%d;format=%s\\n" , & VAR_23 , VAR_24 ) != 2 )  return ( TYPE_9 * ) METHOD_7 ( "notaptafile" , VAR_25 , VAR_26 ) ; if ( ! METHOD_8 ( VAR_27 , "float" ) ) VAR_28 = 0 ; else VAR_29 = 1 ; if ( ( VAR_30 = METHOD_9 ( VAR_31 ) ) == VAR_32 ) return ( TYPE_10 * ) METHOD_10 ( "ptanotmade" , VAR_33 , VAR_34 ) ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 ; VAR_38 ++ ) { if ( VAR_39 == 0 ) { if ( METHOD_11 ( VAR_40 , "(%f,%f)\\n" , & VAR_41 , & VAR_42 ) != 2 ) { METHOD_12 ( & VAR_43 ) ; return ( TYPE_11 * ) METHOD_13 ( "errorreadingfloats" , VAR_44 , VAR_45 ) ; } METHOD_14 ( VAR_46 , VAR_47 , VAR_48 ) ; } else { if ( METHOD_15 ( VAR_49 , "(%d,%d)\\n" , & VAR_50 , & VAR_51 ) != 2 ) { METHOD_16 ( & VAR_52 ) ; return ( TYPE_12 * ) METHOD_17 ( "errorreadingints" , VAR_53 , VAR_54 ) ; } METHOD_18 ( VAR_55 , VAR_56 , VAR_57 ) ; } } return VAR_58 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 [ 64 ] ; const TYPE_7 VAR_6 = sizeof ( VAR_7 ) - 1 ; METHOD_1 ( VAR_8 , '\\0' , sizeof ( TYPE_8 ) ) ; VAR_9 -> VAR_10 = METHOD_2 ( 1 , 1 , & VAR_11 [ VAR_12 [ 0 ] ] ) ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 [ 0 ] ; METHOD_3 ( & VAR_22 -> VAR_23 ) ; switch ( VAR_24 [ 0 ] ) { case 0x02 : case 0x03 : case 0x04 : case 0x07 : case 0x0b : case 0x0c : case 0x0f : case 0x12 : case 0x13 : case 0x14 : case 0x17 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x22 : case 0x23 : case 0x27 : case 0x2b : case 0x2f : case 0x32 : case 0x33 : case 0x34 : case 0x37 : case 0x3a : case 0x3b : case 0x3c : case 0x3f : case 0x42 : case 0x43 : case 0x44 : case 0x47 : case 0x4b : case 0x4f : case 0x52 : case 0x53 : case 0x54 : case 0x57 : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x62 : case 0x63 : case 0x64 : case 0x67 : case 0x6b : case 0x6f : case 0x72 : case 0x73 : case 0x74 : case 0x77 : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x80 : case 0x82 : case 0x83 : case 0x87 : case 0x89 : case 0x8b : case 0x8f : case 0x92 : case 0x93 : case 0x97 : case 0x9b : case 0x9c : case 0x9e : case 0x9f : case 0xa3 : case 0xa7 : case 0xab : case 0xaf : case 0xb2 : case 0xb3 : case 0xb7 : case 0xbb : case 0xbf : case 0xc2 : case 0xc3 : case 0xc7 : case 0xcb : case 0xcf : case 0xd2 : case 0xd3 : case 0xd4 : case 0xd7 : case 0xda : case 0xdb : case 0xdc : case 0xdf : case 0xe2 : case 0xe3 : case 0xe7 : case 0xeb : case 0xef : case 0xf2 : case 0xf3 : case 0xf4 : case 0xf7 : case 0xfa : case 0xfb : case 0xfc : case 0xff : VAR_25 -> VAR_26 = 1 ; VAR_27 -> VAR_28 = VAR_29 ; break ; case 0x00 : VAR_30 -> VAR_31 = 7 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = 1 ; METHOD_4 ( & VAR_37 -> VAR_38 , ",1,I,=,0,D,=,flags,0x10,|,0x100,sp,+,=[1],pc,1,+,0xfe,sp,+,=[2],3,sp,-=,0xfffe,[2],pc,=" ) ; break ; case 0x78 : case 0x58 : case 0x38 : case 0x18 : case 0xf8 : case 0xd8 : case 0xb8 : VAR_39 -> VAR_40 = 2 ; VAR_41 -> VAR_42 = VAR_43 ; METHOD_5 ( VAR_44 , VAR_45 [ 0 ] ) ; break ; case 0x24 : case 0x2c : VAR_46 -> VAR_47 = VAR_48 ; METHOD_6 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 , 0 ) ; METHOD_7 ( & VAR_53 -> VAR_54 , "a,%s,[1],&,0x80,&,!,!,N,=,a,%s,[1],&,0x40,&,!,!,V,=,a,%s,[1],&,0xff,&,!,Z,=" , VAR_55 , VAR_56 , VAR_57 ) ; break ; case 0x69 : case 0x65 : case 0x75 : case 0x6d : case 0x7d : case 0x79 : case 0x61 : case 0x71 : VAR_58 -> VAR_59 = VAR_60 ; METHOD_8 ( VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; if ( VAR_65 [ 0 ] == 0x69 ) METHOD_9 ( & VAR_66 -> VAR_67 , "%s,a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , VAR_68 ) ; else METHOD_10 ( & VAR_69 -> VAR_70 , "%s,[1],a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , VAR_71 ) ; METHOD_11 ( VAR_72 , VAR_73 ) ; METHOD_12 ( & VAR_74 -> VAR_75 , ",a,a,=,$z,Z,=" ) ; break ; case 0xe9 : case 0xe5 : case 0xf5 : case 0xed : case 0xfd : case 0xf9 : case 0xe1 : case 0xf1 : VAR_76 -> VAR_77 = VAR_78 ; METHOD_13 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 ) ; if ( VAR_83 [ 0 ] == 0xe9 ) METHOD_14 ( & VAR_84 -> VAR_85 , "C,!,%s,+,a,-=" , VAR_86 ) ; else METHOD_15 ( & VAR_87 -> VAR_88 , "C,!,%s,[1],+,a,-=" , VAR_89 ) ; METHOD_16 ( VAR_90 , VAR_91 ) ; METHOD_17 ( & VAR_92 -> VAR_93 , ",a,a,=,$z,Z,=,C,!=" ) ; break ; case 0x09 : case 0x05 : case 0x15 : case 0x0d : case 0x1d : case 0x19 : case 0x01 : case 0x11 : VAR_94 -> VAR_95 = VAR_96 ; METHOD_18 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; if ( VAR_101 [ 0 ] == 0x09 ) METHOD_19 ( & VAR_102 -> VAR_103 , "%s,a,|=" , VAR_104 ) ; else METHOD_20 ( & VAR_105 -> VAR_106 , "%s,[1],a,|=" , VAR_107 ) ; METHOD_21 ( VAR_108 , VAR_109 ) ; break ; case 0x29 : case 0x25 : case 0x35 : case 0x2d : case 0x3d : case 0x39 : case 0x21 : case 0x31 : VAR_110 -> VAR_111 = VAR_112 ; METHOD_22 ( VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; if ( VAR_117 [ 0 ] == 0x29 ) METHOD_23 ( & VAR_118 -> VAR_119 , "%s,a,&=" , VAR_120 ) ; else METHOD_24 ( & VAR_121 -> VAR_122 , "%s,[1],a,&=" , VAR_123 ) ; METHOD_25 ( VAR_124 , VAR_125 ) ; break ; case 0x49 : case 0x45 : case 0x55 : case 0x4d : case 0x5d : case 0x59 : case 0x41 : case 0x51 : VAR_126 -> VAR_127 = VAR_128 ; METHOD_26 ( VAR_129 , VAR_130 , VAR_131 , VAR_132 ) ; if ( VAR_133 [ 0 ] == 0x49 ) METHOD_27 ( & VAR_134 -> VAR_135 , "%s,a,^=" , VAR_136 ) ; else METHOD_28 ( & VAR_137 -> VAR_138 , "%s,[1],a,^=" , VAR_139 ) ; METHOD_29 ( VAR_140 , VAR_141 ) ; break ; case 0x0a : case 0x06 : case 0x16 : case 0x0e : case 0x1e : VAR_142 -> VAR_143 = VAR_144 ; if ( VAR_145 [ 0 ] == 0x0a ) { METHOD_30 ( & VAR_146 -> VAR_147 , "1,a,<<=,$c7,C,=,a,a,=" ) ; } else { METHOD_31 ( VAR_148 , VAR_149 , VAR_150 , VAR_151 , 'x' ) ; METHOD_32 ( & VAR_152 -> VAR_153 , "1,%s,[1],<<,%s,=[1],$c7,C,=" , VAR_154 , VAR_155 ) ; } METHOD_33 ( VAR_156 , VAR_157 ) ; break ; case 0x4a : case 0x46 : case 0x56 : case 0x4e : case 0x5e : VAR_158 -> VAR_159 = VAR_160 ; if ( VAR_161 [ 0 ] == 0x4a ) { METHOD_34 ( & VAR_162 -> VAR_163 , "1,a,&,C,=,1,a,>>=" ) ; } else { METHOD_35 ( VAR_164 , VAR_165 , VAR_166 , VAR_167 , 'x' ) ; METHOD_36 ( & VAR_168 -> VAR_169 , "1,%s,[1],&,C,=,1,%s,[1],>>,%s,=[1]" , VAR_170 , VAR_171 , VAR_172 ) ; } METHOD_37 ( VAR_173 , VAR_174 ) ; break ; case 0x2a : case 0x26 : case 0x36 : case 0x2e : case 0x3e : VAR_175 -> VAR_176 = VAR_177 ; if ( VAR_178 [ 0 ] == 0x2a ) { METHOD_38 ( & VAR_179 -> VAR_180 , "1,a,<<,C,|,a,=,$c7,C,=,a,a,=" ) ; } else { METHOD_39 ( VAR_181 , VAR_182 , VAR_183 , VAR_184 , 'x' ) ; METHOD_40 ( & VAR_185 -> VAR_186 , "1,%s,[1],<<,C,|,%s,=[1],$c7,C,=" , VAR_187 , VAR_188 ) ; } METHOD_41 ( VAR_189 , VAR_190 ) ; break ; case 0x6a : case 0x66 : case 0x76 : case 0x6e : case 0x7e : VAR_191 -> VAR_192 = VAR_193 ; if ( VAR_194 [ 0 ] == 0x6a ) { METHOD_42 ( & VAR_195 -> VAR_196 , "C,N,=,1,a,&,C,=,1,a,>>,7,N,<<,|,a,=" ) ; } else { METHOD_43 ( VAR_197 , VAR_198 , VAR_199 , VAR_200 , 'x' ) ; METHOD_44 ( & VAR_201 -> VAR_202 , "C,N,=,1,%s,[1],&,C,=,1,%s,[1],>>,7,N,<<,|,%s,=[1]" , VAR_203 , VAR_204 , VAR_205 ) ; } METHOD_45 ( VAR_206 , VAR_207 ) ; break ; case 0xe6 : case 0xf6 : case 0xee : case 0xfe : VAR_208 -> VAR_209 = VAR_210 ; METHOD_46 ( VAR_211 , VAR_212 , VAR_213 , VAR_214 , 'x' ) ; METHOD_47 ( & VAR_215 -> VAR_216 , "%s,++=[1]" , VAR_217 ) ; METHOD_48 ( VAR_218 , VAR_219 ) ; break ; case 0xc6 : case 0xd6 : case 0xce : case 0xde : VAR_220 -> VAR_221 = VAR_222 ; METHOD_49 ( VAR_223 , VAR_224 , VAR_225 , VAR_226 , 'x' ) ; METHOD_50 ( & VAR_227 -> VAR_228 , "%s,--=[1]" , VAR_229 ) ; METHOD_51 ( VAR_230 , VAR_231 ) ; break ; case 0xe8 : case 0xc8 : VAR_232 -> VAR_233 = 2 ; VAR_234 -> VAR_235 = VAR_236 ; METHOD_52 ( VAR_237 , VAR_238 [ 0 ] , "+" ) ; break ; case 0xca : case 0x88 : VAR_239 -> VAR_240 = 2 ; VAR_241 -> VAR_242 = VAR_243 ; METHOD_53 ( VAR_244 , VAR_245 [ 0 ] , "-" ) ; break ; case 0xc9 : case 0xc5 : case 0xd5 : case 0xcd : case 0xdd : case 0xd9 : case 0xc1 : case 0xd1 : VAR_246 -> VAR_247 = VAR_248 ; METHOD_54 ( VAR_249 , VAR_250 , VAR_251 , VAR_252 ) ; if ( VAR_253 [ 0 ] == 0xc9 ) METHOD_55 ( & VAR_254 -> VAR_255 , "%s,a,==" , VAR_256 ) ; else METHOD_56 ( & VAR_257 -> VAR_258 , "%s,[1],a,==" , VAR_259 ) ; METHOD_57 ( VAR_260 , VAR_261 ) ; METHOD_58 ( & VAR_262 -> VAR_263 , ",C,!,C,=" ) ; break ; case 0xe0 : case 0xe4 : case 0xec : VAR_264 -> VAR_265 = VAR_266 ; METHOD_59 ( VAR_267 , VAR_268 , VAR_269 , VAR_270 , 0 ) ; if ( VAR_271 [ 0 ] == 0xe0 ) METHOD_60 ( & VAR_272 -> VAR_273 , "%s,x,==" , VAR_274 ) ; else METHOD_61 ( & VAR_275 -> VAR_276 , "%s,[1],x,==" , VAR_277 ) ; METHOD_62 ( VAR_278 , VAR_279 ) ; METHOD_63 ( & VAR_280 -> VAR_281 , ",C,!,C,=" ) ; break ; case 0xc0 : case 0xc4 : case 0xcc : VAR_282 -> VAR_283 = VAR_284 ; METHOD_64 ( VAR_285 , VAR_286 , VAR_287 , VAR_288 , 0 ) ; if ( VAR_289 [ 0 ] == 0xc0 ) METHOD_65 ( & VAR_290 -> VAR_291 , "%s,y,==" , VAR_292 ) ; else METHOD_66 ( & VAR_293 -> VAR_294 , "%s,[1],y,==" , VAR_295 ) ; METHOD_67 ( VAR_296 , VAR_297 ) ; METHOD_68 ( & VAR_298 -> VAR_299 , ",C,!,C,=" ) ; break ; case 0x10 : case 0x30 : case 0x50 : case 0x70 : case 0x90 : case 0xb0 : case 0xd0 : case 0xf0 : VAR_300 -> VAR_301 = 2 ; VAR_302 -> VAR_303 = 3 ; VAR_304 -> VAR_305 = VAR_306 ;  if ( VAR_307 [ 1 ] <= 127 )  VAR_308 -> VAR_309 = VAR_310 + VAR_311 [ 1 ] + VAR_312 -> VAR_313 ;  else VAR_314 -> VAR_315 = VAR_316 - ( 256 - VAR_317 [ 1 ] ) + VAR_318 -> VAR_319 ;   VAR_320 -> VAR_321 = VAR_322 + VAR_323 -> VAR_324 ;  METHOD_69 ( VAR_325 , VAR_326 [ 0 ] ) ; break ; case 0x20 : VAR_327 -> VAR_328 = 6 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 [ 1 ] | VAR_335 [ 2 ] << 8 ; VAR_336 -> VAR_337 = VAR_338 ; VAR_339 -> VAR_340 = 2 ; METHOD_70 ( & VAR_341 -> VAR_342 , "1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=" , VAR_343 -> VAR_344 ) ; break ; case 0x4c : VAR_345 -> VAR_346 = 3 ; VAR_347 -> VAR_348 = VAR_349 ; VAR_350 -> VAR_351 = VAR_352 [ 1 ] | VAR_353 [ 2 ] << 8 ; METHOD_71 ( & VAR_354 -> VAR_355 , "0x%04x,pc,=" , VAR_356 -> VAR_357 ) ; break ; case 0x6c : VAR_358 -> VAR_359 = 5 ; VAR_360 -> VAR_361 = VAR_362 ; METHOD_72 ( & VAR_363 -> VAR_364 , "0x%04x,[2],pc,=" , VAR_365 [ 1 ] | VAR_366 [ 2 ] << 8 ) ; break ; case 0x60 : VAR_367 -> VAR_368 = VAR_369 ; VAR_370 -> VAR_371 = VAR_372 ; VAR_373 -> VAR_374 = 6 ; VAR_375 -> VAR_376 = VAR_377 ; VAR_378 -> VAR_379 = - 2 ; METHOD_73 ( & VAR_380 -> VAR_381 , "0x101,sp,+,[2],pc,=,pc,++=,2,sp,+=" ) ; break ; case 0x40 : VAR_382 -> VAR_383 = VAR_384 ; VAR_385 -> VAR_386 = VAR_387 ; VAR_388 -> VAR_389 = 6 ; VAR_390 -> VAR_391 = VAR_392 ; VAR_393 -> VAR_394 = - 3 ; METHOD_74 ( & VAR_395 -> VAR_396 , "0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+=" ) ; break ; case 0xea : VAR_397 -> VAR_398 = VAR_399 ; VAR_400 -> VAR_401 = 2 ; break ; case 0xa9 : case 0xa5 : case 0xb5 : case 0xad : case 0xbd : case 0xb9 : case 0xa1 : case 0xb1 : VAR_402 -> VAR_403 = VAR_404 ; METHOD_75 ( VAR_405 , VAR_406 , VAR_407 , VAR_408 ) ; if ( VAR_409 [ 0 ] == 0xa9 ) METHOD_76 ( & VAR_410 -> VAR_411 , "%s,a,=" , VAR_412 ) ; else METHOD_77 ( & VAR_413 -> VAR_414 , "%s,[1],a,=" , VAR_415 ) ; METHOD_78 ( VAR_416 , VAR_417 ) ; break ; case 0xa2 : case 0xa6 : case 0xb6 : case 0xae : case 0xbe : VAR_418 -> VAR_419 = VAR_420 ; METHOD_79 ( VAR_421 , VAR_422 , VAR_423 , VAR_424 , 'y' ) ; if ( VAR_425 [ 0 ] == 0xa2 ) METHOD_80 ( & VAR_426 -> VAR_427 , "%s,x,=" , VAR_428 ) ; else METHOD_81 ( & VAR_429 -> VAR_430 , "%s,[1],x,=" , VAR_431 ) ; METHOD_82 ( VAR_432 , VAR_433 ) ; break ; case 0xa0 : case 0xa4 : case 0xb4 : case 0xac : case 0xbc : VAR_434 -> VAR_435 = VAR_436 ; METHOD_83 ( VAR_437 , VAR_438 , VAR_439 , VAR_440 , 'x' ) ; if ( VAR_441 [ 0 ] == 0xa0 ) METHOD_84 ( & VAR_442 -> VAR_443 , "%s,y,=" , VAR_444 ) ; else METHOD_85 ( & VAR_445 -> VAR_446 , "%s,[1],y,=" , VAR_447 ) ; METHOD_86 ( VAR_448 , VAR_449 ) ; break ; case 0x85 : case 0x95 : case 0x8d : case 0x9d : case 0x99 : case 0x81 : case 0x91 : VAR_450 -> VAR_451 = VAR_452 ; METHOD_87 ( VAR_453 , VAR_454 , VAR_455 , VAR_456 ) ; METHOD_88 ( & VAR_457 -> VAR_458 , "a,%s,=[1]" , VAR_459 ) ; break ; case 0x86 : case 0x96 : case 0x8e : VAR_460 -> VAR_461 = VAR_462 ; METHOD_89 ( VAR_463 , VAR_464 , VAR_465 , VAR_466 , 'y' ) ; METHOD_90 ( & VAR_467 -> VAR_468 , "x,%s,=[1]" , VAR_469 ) ; break ; case 0x84 : case 0x94 : case 0x8c : VAR_470 -> VAR_471 = VAR_472 ; METHOD_91 ( VAR_473 , VAR_474 , VAR_475 , VAR_476 , 'x' ) ; METHOD_92 ( & VAR_477 -> VAR_478 , "y,%s,=[1]" , VAR_479 ) ; break ; case 0x08 : case 0x48 : VAR_480 -> VAR_481 = VAR_482 ; VAR_483 -> VAR_484 = 3 ; VAR_485 -> VAR_486 = VAR_487 ; VAR_488 -> VAR_489 = 1 ; METHOD_93 ( VAR_490 , VAR_491 [ 0 ] ) ; break ; case 0x28 : case 0x68 : VAR_492 -> VAR_493 = VAR_494 ; VAR_495 -> VAR_496 = 4 ; VAR_497 -> VAR_498 = VAR_499 ; VAR_500 -> VAR_501 = - 1 ; METHOD_94 ( VAR_502 , VAR_503 [ 0 ] ) ; break ; case 0xaa : case 0x8a : case 0xa8 : case 0x98 : VAR_504 -> VAR_505 = VAR_506 ; VAR_507 -> VAR_508 = 2 ; METHOD_95 ( VAR_509 , VAR_510 [ 0 ] ) ; break ; case 0x9a : VAR_511 -> VAR_512 = VAR_513 ; VAR_514 -> VAR_515 = 2 ; VAR_516 -> VAR_517 = VAR_518 ; METHOD_96 ( VAR_519 , VAR_520 [ 0 ] ) ; break ; case 0xba : VAR_521 -> VAR_522 = VAR_523 ; VAR_524 -> VAR_525 = 2 ; VAR_526 -> VAR_527 = VAR_528 ; METHOD_97 ( VAR_529 , VAR_530 [ 0 ] ) ; break ; } return VAR_531 -> VAR_532 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; struct STRUCT_OR_UNION_0 * VAR_2 = ( struct STRUCT_OR_UNION_1 * ) VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ;  struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( VAR_7 -> VAR_8 . VAR_9 ) ;   METHOD_2 ( VAR_10 -> VAR_11 . VAR_12 ) ;   if ( METHOD_3 ( VAR_13 -> VAR_14 . VAR_15 ) ) {  METHOD_4 ( "%s:sockisbusy\\n" , VAR_16 ) ; if ( ! METHOD_5 ( & VAR_17 -> VAR_18 , VAR_19 + ( VAR_20 / 20 ) ) ) METHOD_6 ( VAR_21 ) ; goto VAR_22 ; } if ( VAR_23 -> VAR_24 ) goto VAR_25 ; VAR_26 = METHOD_7 ( STRUCT_OR_UNION_5 , VAR_27 , METHOD_8 ( VAR_28 ) , VAR_29 -> VAR_30 , VAR_31 -> VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 )  VAR_37 -> VAR_38 . VAR_39 -> VAR_40 = - VAR_41 ;  VAR_42 :  METHOD_9 ( VAR_43 -> VAR_44 . VAR_45 ) ;  METHOD_10 ( VAR_46 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 * VAR_5 ; VAR_6 = METHOD_1 ( VAR_7 , "\\r\\n" , & VAR_8 ) ; if ( VAR_9 == VAR_10 ) return VAR_11 ; VAR_12 = METHOD_2 ( VAR_13 -> VAR_14 . VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 ) return VAR_19 ; VAR_20 = METHOD_3 ( VAR_21 , "\\r\\n" , & VAR_22 ) ; if ( VAR_23 == VAR_24 ) return VAR_25 ;  VAR_26 = METHOD_4 ( VAR_27 , '?' ) ;  if ( VAR_28 != VAR_29 ) { * VAR_30 = '\\0' ; VAR_31 = METHOD_5 ( VAR_32 , VAR_33 -> VAR_34 . VAR_35 , VAR_36 ) ; if ( VAR_37 ) return VAR_38 ; if ( METHOD_6 ( VAR_39 + 1 ) > VAR_40 ) return VAR_41 ; METHOD_7 ( VAR_42 -> VAR_43 . VAR_44 , VAR_45 + 1 ) ; } else { VAR_46 = METHOD_8 ( VAR_47 , VAR_48 -> VAR_49 . VAR_50 , VAR_51 ) ; if ( VAR_52 ) return VAR_53 ; VAR_54 -> VAR_55 . VAR_56 [ 0 ] = '\\0' ; } if ( ! METHOD_9 ( VAR_57 -> VAR_58 . VAR_59 , "/" ) ) METHOD_10 ( VAR_60 -> VAR_61 . VAR_62 , VAR_63 -> VAR_64 -> VAR_65 ) ; METHOD_11 ( VAR_66 -> VAR_67 . VAR_68 ) ; VAR_69 = METHOD_12 ( VAR_70 , "\\r\\n" , & VAR_71 ) ; if ( VAR_72 == VAR_73 ) { VAR_74 -> VAR_75 . VAR_76 = VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = VAR_81 ; } else if ( ! METHOD_13 ( VAR_82 , "HTTP/1.0" ) ) { VAR_83 -> VAR_84 . VAR_85 = VAR_86 ; VAR_87 -> VAR_88 . VAR_89 = VAR_90 ; } else if ( ! METHOD_14 ( VAR_91 , "HTTP/1.1" ) ) { VAR_92 -> VAR_93 . VAR_94 = VAR_95 ; VAR_96 -> VAR_97 . VAR_98 = VAR_99 ; } else { return VAR_100 ; } return VAR_101 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 ; struct STRUCT_OR_UNION_0 * VAR_1 ; struct STRUCT_OR_UNION_1 VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; VAR_5 * VAR_6 ; VAR_7 = METHOD_1 ( & VAR_8 ) ; if ( VAR_9 == VAR_10 )  return - VAR_11 ;  VAR_12 = METHOD_2 ( VAR_13 -> VAR_14 , VAR_15 | VAR_16 | VAR_17 | VAR_18 , 0644 ) ; METHOD_3 ( VAR_19 , - 1 , "Can\'tcreatefile%s" , VAR_20 -> VAR_21 ) ; METHOD_4 ( VAR_22 , "Writingoutputto\\\'%s\\\'" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 ) ; VAR_26 . VAR_27 = METHOD_6 ( VAR_28 ) ; METHOD_7 ( VAR_29 . VAR_30 , VAR_31 , sizeof ( VAR_32 . VAR_33 ) ) ; VAR_34 . VAR_35 = sizeof ( VAR_36 ) ; VAR_37 = METHOD_8 ( & VAR_38 , VAR_39 , VAR_40 ) ; METHOD_9 ( VAR_41 , & VAR_42 , sizeof ( struct STRUCT_OR_UNION_2 ) ) ; METHOD_10 ( VAR_43 , VAR_44 , VAR_45 . VAR_46 - VAR_47 . VAR_48 ) ; for ( VAR_49 = 0 ; VAR_50 <= VAR_51 ; VAR_52 ++ ) { METHOD_11 ( & VAR_53 [ VAR_54 ] ) ; METHOD_12 ( VAR_55 , & VAR_56 [ VAR_57 ] , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; } METHOD_13 ( VAR_58 ) ; METHOD_14 ( VAR_59 , "done.\\n\\n" ) ; METHOD_15 ( VAR_60 , "->Scriptencodedinto%dinstructions.\\n\\n" , ( TYPE_4 ) ( VAR_61 - 1 ) ) ; return VAR_62 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_2 * VAR_2 ) { if ( ( const TYPE_3 * ) ( VAR_3 + 1 ) > VAR_4 ) goto VAR_5 ;  METHOD_1 ( VAR_6 -> VAR_7 ) ;  METHOD_2 ( VAR_8 -> VAR_9 ) ; METHOD_3 ( ( VAR_10 , "\\n\\tAdvertisingRouter%s,seq0x%08x,age%us,length%u" , METHOD_4 ( VAR_11 , & VAR_12 -> VAR_13 ) , METHOD_5 ( & VAR_14 -> VAR_15 ) , METHOD_6 ( & VAR_16 -> VAR_17 ) , METHOD_7 ( & VAR_18 -> VAR_19 ) - ( TYPE_4 ) sizeof ( struct STRUCT_OR_UNION_1 ) ) ) ; METHOD_8 ( VAR_20 , METHOD_9 ( & VAR_21 -> VAR_22 ) , & VAR_23 -> VAR_24 ) ; return ( 0 ) ; VAR_25 : return ( 1 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 )  { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; for ( VAR_5 = VAR_6 ; VAR_7 > 0 ; -- VAR_8 ) { VAR_9 = ( VAR_10 >> ( 8 * ( VAR_11 - 1 ) ) ) & 0xff ; if ( METHOD_1 ( VAR_12 , VAR_13 ) == VAR_14 ) return - 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_1 VAR_6 ; struct STRUCT_OR_UNION_2 VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; struct STRUCT_OR_UNION_4 VAR_9 ; struct STRUCT_OR_UNION_5 VAR_10 ; struct STRUCT_OR_UNION_6 VAR_11 ; VAR_12 -> VAR_13 = 0 ; VAR_14 -> VAR_15 = 0 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; while ( VAR_24 != 0 ) { if ( ! METHOD_1 ( * ( VAR_25 + VAR_26 ) , 2 ) ) return 0 ; if ( VAR_27 < 2 ) return 0 ; VAR_28 = * ( VAR_29 + VAR_30 + 1 ) ; if ( ! METHOD_2 ( * ( VAR_31 + VAR_32 + 2 ) , VAR_33 ) ) return 0 ; if ( VAR_34 < VAR_35 + 2 ) return 0 ; switch ( * ( VAR_36 + VAR_37 ) ) { case VAR_38 : METHOD_3 ( & VAR_39 , VAR_40 + VAR_41 , 2 ) ; VAR_42 += 2 ; VAR_43 -= 2 ; if ( VAR_44 . VAR_45 != 0 ) { if ( VAR_46 . VAR_47 > sizeof ( VAR_48 . VAR_49 ) - 1 ) return 0 ; if ( ! METHOD_4 ( * ( VAR_50 + VAR_51 ) , VAR_52 . VAR_53 ) ) return 0 ; if ( VAR_54 < VAR_55 . VAR_56 ) return 0 ; METHOD_5 ( & VAR_57 . VAR_58 , VAR_59 + VAR_60 , VAR_61 . VAR_62 ) ; VAR_63 += VAR_64 . VAR_65 ; VAR_66 -= VAR_67 . VAR_68 ; } VAR_69 . VAR_70 [ VAR_71 . VAR_72 ] = '\\0' ; if ( ! VAR_73 -> VAR_74 ) { VAR_75 -> VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = 1 ; } break ; case VAR_80 : METHOD_6 ( & VAR_81 , VAR_82 + VAR_83 , 2 ) ; VAR_84 += 2 ; VAR_85 -= 2 ; if ( VAR_86 . VAR_87 != 0 ) { if ( VAR_88 . VAR_89 > sizeof ( VAR_90 . VAR_91 ) - 1 ) return 0 ; if ( ! METHOD_7 ( * ( VAR_92 + VAR_93 ) , VAR_94 . VAR_95 ) ) return 0 ; if ( VAR_96 < VAR_97 . VAR_98 ) return 0 ; METHOD_8 ( & VAR_99 . VAR_100 , VAR_101 + VAR_102 , VAR_103 . VAR_104 ) ; VAR_105 += VAR_106 . VAR_107 ; VAR_108 -= VAR_109 . VAR_110 ; } VAR_111 . VAR_112 [ VAR_113 . VAR_114 ] = '\\0' ; if ( ! VAR_115 -> VAR_116 ) { VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 = 1 ; } break ; case VAR_122 : METHOD_9 ( & VAR_123 , VAR_124 + VAR_125 , 2 ) ; VAR_126 += 2 ; VAR_127 -= 2 ; if ( VAR_128 . VAR_129 != 0 ) { if ( VAR_130 . VAR_131 > sizeof VAR_132 . VAR_133 ) return 0 ; if ( ! METHOD_10 ( * ( VAR_134 + VAR_135 ) , VAR_136 . VAR_137 ) ) return 0 ; if ( VAR_138 < VAR_139 . VAR_140 ) return 0 ; METHOD_11 ( & VAR_141 . VAR_142 , VAR_143 + VAR_144 , VAR_145 . VAR_146 ) ; VAR_147 += VAR_148 . VAR_149 ; VAR_150 -= VAR_151 . VAR_152 ; } if ( ! VAR_153 -> VAR_154 && VAR_155 . VAR_156 != 0 ) { VAR_157 -> VAR_158 = VAR_159 ; VAR_160 -> VAR_161 = 1 ; } break ; case VAR_162 : METHOD_12 ( & VAR_163 , VAR_164 + VAR_165 , 2 ) ; VAR_166 += 2 ; VAR_167 -= 2 ; if ( VAR_168 . VAR_169 != 1 ) { VAR_170 += VAR_171 . VAR_172 ; VAR_173 -= VAR_174 . VAR_175 ; break ; } VAR_176 . VAR_177 = * ( VAR_178 + VAR_179 ) ; VAR_180 += 1 ; VAR_181 -= 1 ; if ( ! VAR_182 -> VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 = 1 ; } break ; case VAR_189 : METHOD_13 ( & VAR_190 , VAR_191 + VAR_192 , 2 ) ; VAR_193 += 2 ; VAR_194 -= 2 ; if ( VAR_195 . VAR_196 != 6 ) { VAR_197 += VAR_198 . VAR_199 ; VAR_200 -= VAR_201 . VAR_202 ; break ; } METHOD_14 ( & VAR_203 . VAR_204 , VAR_205 + VAR_206 , 6 ) ; VAR_207 += 6 ; VAR_208 -= 6 ; if ( ! VAR_209 -> VAR_210 ) { VAR_211 -> VAR_212 = VAR_213 ; VAR_214 -> VAR_215 = 1 ; } break ; case VAR_216 : METHOD_15 ( & VAR_217 , VAR_218 + VAR_219 , 2 ) ; VAR_220 += 2 ; VAR_221 -= 2 ; if ( VAR_222 . VAR_223 <= 3 ) { VAR_224 += VAR_225 . VAR_226 ; VAR_227 -= VAR_228 . VAR_229 ; break ; } if ( VAR_230 . VAR_231 - 3 > ( TYPE_6 ) sizeof VAR_232 . VAR_233 ) return 0 ; METHOD_16 ( & VAR_234 . VAR_235 , VAR_236 + VAR_237 , 3 ) ; VAR_238 += 3 ; VAR_239 -= 3 ;  METHOD_17 ( VAR_240 . VAR_241 , VAR_242 + ( VAR_243 . VAR_244 - 3 ) ,   ( VAR_245 . VAR_246 - 3 ) ) ;  VAR_247 += VAR_248 . VAR_249 - 3 ;  VAR_250 -= VAR_251 . VAR_252 - 3 ;  if ( ! VAR_253 -> VAR_254 ) { VAR_255 -> VAR_256 = VAR_257 ; VAR_258 -> VAR_259 = 1 ; } break ; default : if 0 METHOD_18 ( ( VAR_260 , "(1)unhandledelement_id(%d)" , * ( VAR_261 + VAR_262 ) ) ) ; VAR_263 += 2 + VAR_264 ; VAR_265 -= 2 + VAR_266 ; break ; } } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 , * VAR_5 ; TYPE_3 VAR_6 = 0 , VAR_7 ; TYPE_4 VAR_8 = VAR_9 ; VAR_10 : VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( VAR_14 ) return VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; if ( VAR_19 ) return VAR_20 ; METHOD_3 ( VAR_21 , VAR_22 ) ; do { if ( ! VAR_23 -> VAR_24 ) { METHOD_4 ( VAR_25 , VAR_26 , 0 ) ; if ( ! VAR_27 ) VAR_28 = - VAR_29 ; break ; } if ( ! VAR_30 -> VAR_31 && ! VAR_32 -> VAR_33 ) break ; if ( ! VAR_34 -> VAR_35 || VAR_36 -> VAR_37 >= VAR_38 -> VAR_39 ) { if ( VAR_40 ) break ; if ( VAR_41 & VAR_42 ) { VAR_43 = - VAR_44 ; break ; } METHOD_5 ( VAR_45 ) ; METHOD_6 ( VAR_46 ) ; goto VAR_47 ; } VAR_48 = VAR_49 -> VAR_50 + VAR_51 -> VAR_52 ; VAR_53 = ( VAR_54 -> VAR_55 + VAR_56 -> VAR_57 ) & ( VAR_58 -> VAR_59 - 1 ) ; VAR_60 = VAR_61 -> VAR_62 + VAR_63 ; if ( VAR_64 >= VAR_65 -> VAR_66 ) { * VAR_67 = * VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 ++ ; VAR_74 -> VAR_75 = ( VAR_76 -> VAR_77 + 1 ) & ( VAR_78 -> VAR_79 - 1 ) ; VAR_80 -> VAR_81 -- ; VAR_82 = VAR_83 ; } else {  METHOD_7 ( VAR_84 , VAR_85 ) ;  * VAR_86 = * VAR_87 ; VAR_88 -> VAR_89 &= ~ VAR_90 ; METHOD_8 ( VAR_91 ) ; VAR_92 -> VAR_93 = VAR_94 ; VAR_95 -> VAR_96 ++ ; VAR_97 -> VAR_98 += VAR_99 -> VAR_100 ; VAR_101 -> VAR_102 -= VAR_103 -> VAR_104 ; } VAR_105 += VAR_106 -> VAR_107 ; VAR_108 -= VAR_109 -> VAR_110 ; } while ( VAR_111 ) ; METHOD_9 ( VAR_112 ) ; METHOD_10 ( VAR_113 ) ; if ( VAR_114 > 0 ) METHOD_11 ( VAR_115 ) ; if ( VAR_116 ) METHOD_12 ( VAR_117 ) ; return VAR_118 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { if ( ! VAR_5 || ! VAR_6 || VAR_7 == VAR_8 ) { return VAR_9 ; } TYPE_6 * VAR_10 = METHOD_1 ( ) ;  METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ;  struct STRUCT_OR_UNION_0 * VAR_14 = METHOD_3 ( VAR_15 ) ; METHOD_4 ( VAR_16 ) ; return VAR_17 ? VAR_18 : VAR_19 ; }
METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , TYPE_6 , TYPE_7 , struct STRUCT_OR_UNION_0 TYPE_8 * , TYPE_9 ) { struct STRUCT_OR_UNION_1 VAR_0 ; TYPE_10 VAR_1 , VAR_2 ;  TYPE_11 VAR_3 ;  if ( ! TYPE_12 ) return METHOD_1 ( TYPE_13 , TYPE_14 , TYPE_15 , VAR_4 ) ; VAR_5 = METHOD_2 ( ) ; METHOD_3 ( VAR_6 ) ;  VAR_7 = METHOD_4 ( TYPE_16 , TYPE_17 , TYPE_18 , ( struct STRUCT_OR_UNION_2 TYPE_19 * ) & VAR_8 ) ;  METHOD_5 ( VAR_9 ) ; if ( ! METHOD_6 ( VAR_10 , TYPE_20 , sizeof ( * TYPE_21 ) ) ) return - VAR_11 ; VAR_12 = 0 ;  VAR_13 |= METHOD_7 ( VAR_14 . VAR_15 . VAR_16 , & TYPE_22 -> VAR_17 . VAR_18 ) ;  VAR_19 |= METHOD_8 ( VAR_20 . VAR_21 . VAR_22 , & TYPE_23 -> VAR_23 . VAR_24 ) ; VAR_25 |= METHOD_9 ( VAR_26 . VAR_27 . VAR_28 , & TYPE_24 -> VAR_29 . VAR_30 ) ; VAR_31 |= METHOD_10 ( VAR_32 . VAR_33 . VAR_34 , & TYPE_25 -> VAR_35 . VAR_36 ) ; VAR_37 |= METHOD_11 ( VAR_38 . VAR_39 , & TYPE_26 -> VAR_40 ) ; VAR_41 |= METHOD_12 ( VAR_42 . VAR_43 , & TYPE_27 -> VAR_44 ) ; VAR_45 |= METHOD_13 ( VAR_46 . VAR_47 , & TYPE_28 -> VAR_48 ) ; VAR_49 |= METHOD_14 ( VAR_50 . VAR_51 , & TYPE_29 -> VAR_52 ) ; VAR_53 |= METHOD_15 ( VAR_54 . VAR_55 , & TYPE_30 -> VAR_56 ) ; VAR_57 |= METHOD_16 ( VAR_58 . VAR_59 , & TYPE_31 -> VAR_60 ) ; VAR_61 |= METHOD_17 ( VAR_62 . VAR_63 , & TYPE_32 -> VAR_64 ) ; VAR_65 |= METHOD_18 ( VAR_66 . VAR_67 , & TYPE_33 -> VAR_68 ) ; VAR_69 |= METHOD_19 ( VAR_70 . VAR_71 , & TYPE_34 -> VAR_72 ) ; VAR_73 |= METHOD_20 ( VAR_74 . VAR_75 , & TYPE_35 -> VAR_76 ) ; VAR_77 |= METHOD_21 ( VAR_78 . VAR_79 , & TYPE_36 -> VAR_80 ) ; VAR_81 |= METHOD_22 ( VAR_82 . VAR_83 , & TYPE_37 -> VAR_84 ) ; VAR_85 |= METHOD_23 ( VAR_86 . VAR_87 , & TYPE_38 -> VAR_88 ) ; VAR_89 |= METHOD_24 ( VAR_90 . VAR_91 , & TYPE_39 -> VAR_92 ) ; return VAR_93 ? VAR_94 : VAR_95 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; static struct { TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; const TYPE_6 * VAR_7 ; const TYPE_7 * VAR_8 ; const TYPE_8 * VAR_9 ; unsigned TYPE_9 VAR_10 ; const TYPE_10 * VAR_11 ; } VAR_12 [ ] = { { VAR_13 , VAR_14 , "proc" , "%r/proc" , "proc" , VAR_15 | VAR_16 | VAR_17 , VAR_18 } ,  { VAR_19 , VAR_20 , "%r/proc/sys/net" , "%r/proc/net" , VAR_21 , VAR_22 , VAR_23 } ,  { VAR_24 , VAR_25 , "%r/proc/sys" , "%r/proc/sys" , VAR_26 , VAR_27 , VAR_28 } , { VAR_29 , VAR_30 , VAR_31 , "%r/proc/sys" , VAR_32 , VAR_33 | VAR_34 | VAR_35 , VAR_36 } ,  { VAR_37 , VAR_38 , "%r/proc/net" , "%r/proc/sys/net" , VAR_39 , VAR_40 , VAR_41 } ,  { VAR_42 , VAR_43 , "%r/proc/sysrq-trigger" , "%r/proc/sysrq-trigger" , VAR_44 , VAR_45 , VAR_46 } , { VAR_47 , VAR_48 , VAR_49 , "%r/proc/sysrq-trigger" , VAR_50 , VAR_51 | VAR_52 | VAR_53 , VAR_54 } , { VAR_55 , VAR_56 , "proc" , "%r/proc" , "proc" , VAR_57 | VAR_58 | VAR_59 , VAR_60 } , { VAR_61 , VAR_62 , "sysfs" , "%r/sys" , "sysfs" , 0 , VAR_63 } , { VAR_64 , VAR_65 , "sysfs" , "%r/sys" , "sysfs" , VAR_66 , VAR_67 } , { VAR_68 , VAR_69 , "sysfs" , "%r/sys" , "sysfs" , VAR_70 | VAR_71 | VAR_72 , VAR_73 } , { VAR_74 , VAR_75 , "%r/sys" , "%r/sys" , VAR_76 , VAR_77 , VAR_78 } , { VAR_79 , VAR_80 , VAR_81 , "%r/sys" , VAR_82 , VAR_83 | VAR_84 | VAR_85 , VAR_86 } , { VAR_87 , VAR_88 , "sysfs" , "%r/sys/devices/virtual/net" , "sysfs" , 0 , VAR_89 } , { VAR_90 , VAR_91 , "%r/sys/devices/virtual/net/devices/virtual/net" , "%r/sys/devices/virtual/net" , VAR_92 , VAR_93 , VAR_94 } , { VAR_95 , VAR_96 , VAR_97 , "%r/sys/devices/virtual/net" , VAR_98 , VAR_99 | VAR_100 | VAR_101 | VAR_102 | VAR_103 , VAR_104 } , { 0 , 0 , VAR_105 , VAR_106 , VAR_107 , 0 , VAR_108 } } ; for ( VAR_109 = 0 ; VAR_110 [ VAR_111 ] . VAR_112 ; VAR_113 ++ ) { if ( ( VAR_114 & VAR_115 [ VAR_116 ] . VAR_117 ) == VAR_118 [ VAR_119 ] . VAR_120 ) { TYPE_11 * VAR_121 = VAR_122 ; TYPE_12 * VAR_123 = VAR_124 ; TYPE_13 VAR_125 ; unsigned TYPE_14 VAR_126 ; if ( VAR_127 [ VAR_128 ] . VAR_129 ) { VAR_130 = METHOD_1 ( "%r" , VAR_131 -> VAR_132 . VAR_133 ? VAR_134 -> VAR_135 . METHOD_2 : "" , VAR_136 [ VAR_137 ] . VAR_138 ) ; if ( ! VAR_139 ) { METHOD_3 ( "memoryallocationerror" ) ; return - 1 ; } } if ( VAR_140 [ VAR_141 ] . VAR_142 ) { VAR_143 = METHOD_4 ( "%r" , VAR_144 -> VAR_145 . VAR_146 ? VAR_147 -> VAR_148 . METHOD_5 : "" , VAR_149 [ VAR_150 ] . VAR_151 ) ; if ( ! VAR_152 ) { VAR_153 = VAR_154 ; METHOD_6 ( "memoryallocationerror" ) ; METHOD_7 ( VAR_155 ) ; VAR_156 = VAR_157 ; return - 1 ; } } VAR_158 = METHOD_8 ( VAR_159 , VAR_160 , VAR_161 [ VAR_162 ] . VAR_163 ) ;  VAR_164 = METHOD_9 ( VAR_165 , VAR_166 , VAR_167 [ VAR_168 ] . VAR_169 , VAR_170 , VAR_171 [ VAR_172 ] . VAR_173 ) ;  VAR_174 = VAR_175 ; if ( VAR_176 < 0 && VAR_177 == VAR_178 ) { METHOD_10 ( "Mountsourceortargetfor%son%sdoesn\'texist.Skipping." , VAR_179 , VAR_180 ) ; VAR_181 = 0 ; } else if ( VAR_182 < 0 ) METHOD_11 ( "errormounting%son%sflags%lu" , VAR_183 , VAR_184 , VAR_185 ) ; METHOD_12 ( VAR_186 ) ; METHOD_13 ( VAR_187 ) ; if ( VAR_188 < 0 ) { VAR_189 = VAR_190 ; return - 1 ; } } } if ( VAR_191 & VAR_192 ) { TYPE_15 VAR_193 ; VAR_194 = VAR_195 & VAR_196 ; if ( VAR_197 == VAR_198 || VAR_199 == VAR_200 ) { TYPE_16 VAR_201 = 0 ; if ( ! METHOD_14 ( & VAR_202 -> VAR_203 ) ) { VAR_204 = METHOD_15 ( VAR_205 , & VAR_206 -> VAR_207 ) ; } else { VAR_208 = ! METHOD_16 ( VAR_209 , & VAR_210 -> VAR_211 ) ; } if ( VAR_212 == VAR_213 ) { VAR_214 = VAR_215 ? VAR_216 : VAR_217 ; } else { VAR_218 = VAR_219 ? VAR_220 : VAR_221 ; } } if ( ! METHOD_17 ( VAR_222 -> VAR_223 . VAR_224 ? VAR_225 -> VAR_226 . METHOD_18 : "" , VAR_227 , VAR_228 ) ) { METHOD_19 ( "errormounting/sys/fs/cgroup" ) ; return - 1 ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 )  {  METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ;  if ( VAR_6 -> VAR_7 ) {  METHOD_2 ( VAR_8 ) ;  } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ,  unsigned TYPE_2 VAR_1 [ ] [ 2 ] , const unsigned TYPE_3 VAR_2 [ ] ) { METHOD_1 ( 0 , VAR_3 , VAR_4 , VAR_5 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  if ( VAR_1 == VAR_2 )  return METHOD_1 ( VAR_3 ) ; return 0 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 ) { if ( VAR_2 -> VAR_3 == 1 )  return ( ( VAR_4 -> VAR_5 + 7 ) / 8 ) ;  else return ( VAR_6 -> VAR_7 * METHOD_1 ( VAR_8 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 * VAR_5 = VAR_6 ; if ( VAR_7 == VAR_8 ) { METHOD_1 ( "%s:Oops,dev_handle(%d)isinvalid..." , VAR_9 , VAR_10 ) ; return ; } for ( VAR_11 = 0 ; VAR_12 < VAR_13 ; VAR_14 ++ ) { VAR_15 = & VAR_16 . VAR_17 [ VAR_18 ] ; if ( VAR_19 -> VAR_20 != VAR_21 && VAR_22 -> VAR_23 == VAR_24 ) { METHOD_2 ( "%s:Foundanexistingdevicewiththesamehandle" "dev_status=%d" , VAR_25 , VAR_26 -> VAR_27 ) ; METHOD_3 ( "%s:bd_addr=[%02X:%02X:%02X:%02X:%02X:]" , VAR_28 , VAR_29 -> VAR_30 . VAR_31 [ 0 ] , VAR_32 -> VAR_33 . VAR_34 [ 1 ] , VAR_35 -> VAR_36 . VAR_37 [ 2 ] , VAR_38 -> VAR_39 . VAR_40 [ 3 ] , VAR_41 -> VAR_42 . VAR_43 [ 4 ] ) ; METHOD_4 ( "%s:attr_mask=0x%04x,sub_class=0x%02x,app_id=%d" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ) ; if ( VAR_51 -> VAR_52 < 0 ) {  VAR_53 -> VAR_54 = METHOD_5 ( VAR_55 , VAR_56 | VAR_57 ) ;  if ( VAR_58 -> VAR_59 < 0 ) { METHOD_6 ( "%s:Error:failedtoopenuhid,err:%s" , VAR_60 , METHOD_7 ( VAR_61 ) ) ; return ; } else METHOD_8 ( "%s:uhidfd=%d" , VAR_62 , VAR_63 -> VAR_64 ) ; } VAR_65 -> VAR_66 = 1 ; VAR_67 -> VAR_68 = METHOD_9 ( VAR_69 , VAR_70 ) ; break ; } VAR_71 = VAR_72 ; } if ( VAR_73 == VAR_74 ) { for ( VAR_75 = 0 ; VAR_76 < VAR_77 ; VAR_78 ++ ) { if ( VAR_79 . VAR_80 [ VAR_81 ] . VAR_82 == VAR_83 ) { VAR_84 = & VAR_85 . VAR_86 [ VAR_87 ] ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; VAR_100 -> VAR_101 = VAR_102 ; VAR_103 . VAR_104 ++ ;  VAR_105 -> VAR_106 = METHOD_10 ( VAR_107 , VAR_108 | VAR_109 ) ;  if ( VAR_110 -> VAR_111 < 0 ) { METHOD_11 ( "%s:Error:failedtoopenuhid,err:%s" , VAR_112 , METHOD_12 ( VAR_113 ) ) ; return ; } else { METHOD_13 ( "%s:uhidfd=%d" , VAR_114 , VAR_115 -> VAR_116 ) ; VAR_117 -> VAR_118 = 1 ; VAR_119 -> VAR_120 = METHOD_14 ( VAR_121 , VAR_122 ) ; } break ; } } } if ( VAR_123 == VAR_124 ) { METHOD_15 ( "%s:Error:toomanyHIDdevicesareconnected" , VAR_125 ) ; return ; } VAR_126 -> VAR_127 = VAR_128 ; METHOD_16 ( "%s:Returndevicestatus%d" , VAR_129 , VAR_130 -> VAR_131 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { const struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 ) ; if ( ! VAR_6 ) return - VAR_7 ; VAR_8 -> VAR_9 = METHOD_2 ( VAR_10 -> VAR_11 , VAR_12 -> VAR_13 ) ;  VAR_14 = VAR_15 -> VAR_16 -> VAR_17 ;  VAR_18 -> VAR_19 = & VAR_20 -> VAR_21 [ 0 ] . VAR_22 ; VAR_23 -> VAR_24 = METHOD_3 ( VAR_25 -> VAR_26 ) ; VAR_27 -> VAR_28 = METHOD_4 ( VAR_29 -> VAR_30 , VAR_31 -> VAR_32 ) ;  VAR_33 = VAR_34 -> VAR_35 -> VAR_36 ;  if ( VAR_37 -> VAR_38 . VAR_39 != 2 ) { METHOD_5 ( VAR_40 -> VAR_41 , "Incorrectnumberofendpointsondatainterface(%d)\\n" , VAR_42 -> VAR_43 . VAR_44 ) ; return - VAR_45 ; } VAR_46 -> VAR_47 = & VAR_48 -> VAR_49 [ 0 ] . VAR_50 ; if ( ! METHOD_6 ( VAR_51 -> VAR_52 ) ) { METHOD_7 ( VAR_53 -> VAR_54 , "FirstendpointondatainterfaceisnotBULKOUT\\n" ) ; return - VAR_55 ; } VAR_56 -> VAR_57 = METHOD_8 ( VAR_58 -> VAR_59 ) ; if ( VAR_60 -> VAR_61 < 8 ) { METHOD_9 ( VAR_62 -> VAR_63 , "MaxOUTpacketsizeistoosmall(%zd)\\n" , VAR_64 -> VAR_65 ) ; return - VAR_66 ; } VAR_67 -> VAR_68 = & VAR_69 -> VAR_70 [ 1 ] . VAR_71 ; if ( ! METHOD_10 ( VAR_72 -> VAR_73 ) ) { METHOD_11 ( VAR_74 -> VAR_75 , "SecondendpointondatainterfaceisnotBULKIN\\n" ) ; return - VAR_76 ; } VAR_77 -> VAR_78 = METHOD_12 ( VAR_79 -> VAR_80 ) ; if ( VAR_81 -> VAR_82 < 8 ) { METHOD_13 ( VAR_83 -> VAR_84 , "MaxINpacketsizeistoosmall(%zd)\\n" , VAR_85 -> VAR_86 ) ; return - VAR_87 ; } return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ;  const TYPE_1 * VAR_3 = VAR_4 -> VAR_5 ;   struct STRUCT_OR_UNION_2 VAR_6 = VAR_7 -> VAR_8 -> VAR_9 ;  METHOD_2 ( & VAR_10 -> VAR_11 -> VAR_12 , "%s:bInterfaceNumber=%d\\n" , VAR_13 , VAR_14 -> VAR_15 -> VAR_16 . VAR_17 ) ; if ( VAR_18 -> VAR_19 -> METHOD_3 ) VAR_20 -> VAR_21 -> METHOD_4 ( VAR_22 ) ; METHOD_5 ( VAR_23 ) ;  METHOD_6 ( & VAR_24 , "%s:\'%s\'successfullydeinitializedanddisconnected\\n" ,   VAR_25 , VAR_26 ) ;  }
static TYPE_0 METHOD_0 ( register TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 * VAR_8 ; TYPE_6 VAR_9 ; VAR_10 * VAR_11 ; TYPE_7 VAR_12 ; TYPE_8 VAR_13 ; TYPE_9 VAR_14 ; TYPE_10 VAR_15 ; TYPE_11 VAR_16 ; TYPE_12 VAR_17 ; TYPE_13 VAR_18 ; VAR_19 = VAR_20 -> VAR_21 ; if ( ! VAR_22 -> VAR_23 ) { goto VAR_24 ; } else { VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = 0 ; for ( VAR_29 = 0 , VAR_30 = VAR_31 -> VAR_32 ; VAR_33 < VAR_34 -> VAR_35 ; ++ VAR_36 , ++ VAR_37 ) { for ( VAR_38 = 0 , VAR_39 = VAR_40 -> VAR_41 ; VAR_42 < VAR_43 -> VAR_44 ; ++ VAR_45 , ++ VAR_46 ) {  VAR_47 = VAR_48 -> VAR_49 * ( 1 <<  ( VAR_50 -> VAR_51 + VAR_52 -> VAR_53 - VAR_54 - 1 ) ) ;  VAR_55 = VAR_56 -> VAR_57 * ( 1 <<  ( VAR_58 -> VAR_59 + VAR_60 -> VAR_61 - VAR_62 - 1 ) ) ; VAR_63 -> VAR_64 = ( ! VAR_65 -> VAR_66 ) ? VAR_67 : METHOD_1 ( VAR_68 -> VAR_69 , VAR_70 ) ; VAR_71 -> VAR_72 = ( ! VAR_73 -> VAR_74 ) ? VAR_75 : METHOD_2 ( VAR_76 -> VAR_77 , VAR_78 ) ; } } VAR_79 -> VAR_80 = 0 ; } for ( VAR_81 -> VAR_82 = VAR_83 -> VAR_84 ; VAR_85 -> VAR_86 < VAR_87 -> VAR_88 ; VAR_89 -> VAR_90 += VAR_91 -> VAR_92 - ( VAR_93 -> VAR_94 % VAR_95 -> VAR_96 ) ) { for ( VAR_97 -> VAR_98 = VAR_99 -> VAR_100 ; VAR_101 -> VAR_102 < VAR_103 -> VAR_104 ; VAR_105 -> VAR_106 += VAR_107 -> VAR_108 - ( VAR_109 -> VAR_110 % VAR_111 -> VAR_112 ) ) { for ( VAR_113 -> VAR_114 = VAR_115 -> VAR_116 , VAR_117 -> VAR_118 = & VAR_119 -> VAR_120 [ VAR_121 -> VAR_122 ] ; VAR_123 -> VAR_124 < VAR_125 -> VAR_126 && VAR_127 -> VAR_128 < METHOD_3 ( TYPE_14 , VAR_129 -> compnoend ) ; ++ VAR_130 -> VAR_131 , ++ VAR_132 -> VAR_133 ) { for ( VAR_134 -> VAR_135 = VAR_136 -> VAR_137 , VAR_138 -> VAR_139 = & VAR_140 -> VAR_141 -> VAR_142 [ VAR_143 -> VAR_144 ] ; VAR_145 -> VAR_146 < VAR_147 -> VAR_148 -> VAR_149 && VAR_150 -> VAR_151 < VAR_152 -> VAR_153 ; ++ VAR_154 -> VAR_155 , ++ VAR_156 -> VAR_157 ) { if ( VAR_158 -> VAR_159 -> VAR_160 == 0 ) { continue ; } VAR_161 = VAR_162 -> VAR_163 -> VAR_164 - 1 - VAR_165 -> VAR_166 ; VAR_167 = METHOD_4 ( VAR_168 -> VAR_169 , VAR_170 -> VAR_171 -> VAR_172 << VAR_173 ) ; VAR_174 = METHOD_5 ( VAR_175 -> VAR_176 , VAR_177 -> VAR_178 -> VAR_179 << VAR_180 ) ; VAR_181 = VAR_182 + VAR_183 -> VAR_184 -> VAR_185 ; VAR_186 = VAR_187 + VAR_188 -> VAR_189 -> VAR_190 ;  if ( ( ( VAR_191 -> VAR_192 == VAR_193 -> VAR_194 && ( ( VAR_195 << VAR_196 ) % ( 1 << VAR_197 ) ) ) ||  ! ( VAR_198 -> VAR_199 % ( VAR_200 -> VAR_201 -> VAR_202 << VAR_203 ) ) ) &&  ( ( VAR_204 -> VAR_205 == VAR_206 -> VAR_207 && ( ( VAR_208 << VAR_209 ) % ( 1 << VAR_210 ) ) ) ||  ! ( VAR_211 -> VAR_212 % ( VAR_213 -> VAR_214 -> VAR_215 << VAR_216 ) ) ) ) { VAR_217 = METHOD_6 ( METHOD_7 ( VAR_218 -> VAR_219 , VAR_220 -> VAR_221 -> VAR_222 << VAR_223 ) , VAR_224 -> VAR_225 -> VAR_226 ) - METHOD_8 ( VAR_227 , VAR_228 -> VAR_229 -> VAR_230 ) ; VAR_231 = METHOD_9 ( METHOD_10 ( VAR_232 -> VAR_233 , VAR_234 -> VAR_235 -> VAR_236 << VAR_237 ) , VAR_238 -> VAR_239 -> VAR_240 ) - METHOD_11 ( VAR_241 , VAR_242 -> VAR_243 -> VAR_244 ) ; VAR_245 -> VAR_246 = VAR_247 * VAR_248 -> VAR_249 -> VAR_250 + VAR_251 ; METHOD_12 ( VAR_252 -> VAR_253 < VAR_254 -> VAR_255 -> VAR_256 ) ; for ( VAR_257 -> VAR_258 = 0 ; VAR_259 -> VAR_260 < VAR_261 -> VAR_262 && VAR_263 -> VAR_264 < METHOD_13 ( TYPE_15 , VAR_265 -> lyrnoend ) ; ++ VAR_266 -> VAR_267 ) { VAR_268 = & VAR_269 -> VAR_270 -> VAR_271 [ VAR_272 -> VAR_273 ] ; if ( VAR_274 -> VAR_275 >= * VAR_276 ) { ++ ( * VAR_277 ) ; return 0 ; } VAR_278 : ; } } } } } } return 1 ; }
extern TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 * VAR_6 , * VAR_7 ; if ( METHOD_1 ( VAR_8 ) ) VAR_9 -> VAR_10 = ( TYPE_8 * ) VAR_11 ; if ( VAR_12 -> VAR_13 != VAR_14 -> VAR_15 ) {  VAR_16 = METHOD_2 ( VAR_17 -> VAR_18 , VAR_19 -> VAR_20 , VAR_21 , VAR_22 ,  & VAR_23 , & VAR_24 ) ; if ( VAR_25 != 0 ) return VAR_26 ; } else { VAR_27 = ( TYPE_9 * ) VAR_28 ; VAR_29 = ( TYPE_10 * ) VAR_30 ; } * VAR_31 = ( TYPE_11 * ) METHOD_3 ( sizeof ( TYPE_12 ) ) ; if ( METHOD_4 ( * VAR_32 ) ) { VAR_33 = VAR_34 ; goto VAR_35 ; } VAR_36 = METHOD_5 ( * VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 ) ; if ( VAR_46 != 0 ) goto VAR_47 ; VAR_48 = METHOD_6 ( * VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; if ( VAR_53 != 0 ) { VAR_54 : METHOD_7 ( * VAR_55 ) ; * VAR_56 = VAR_57 ; } VAR_58 : if ( VAR_59 != VAR_60 ) METHOD_8 ( VAR_61 ) ; return VAR_62 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , unsigned TYPE_3 * VAR_2 , TYPE_4 VAR_3 ,  TYPE_5 * VAR_4 ) {  TYPE_6 VAR_5 ; TYPE_7 VAR_6 ;   register TYPE_8 * VAR_7 ;  TYPE_9 VAR_8 ; VAR_9 = 0 ;  switch ( VAR_10 )  { case 1 : {  VAR_11 = METHOD_1 ( VAR_12 , 0 , VAR_13 , VAR_14 -> VAR_15 , 1 , VAR_16 ) ;  if ( VAR_17 == ( TYPE_10 * ) VAR_18 ) break ; for ( VAR_19 = 0 ; VAR_20 < ( ( TYPE_11 ) VAR_21 -> VAR_22 - 7 ) ; VAR_23 += 8 ) { for ( VAR_24 = 0 ; VAR_25 < 8 ; VAR_26 ++ ) {  VAR_27 = ( TYPE_12 ) ( ( ( ( * VAR_28 ) & ( 0x80 >> VAR_29 ) ) != 0 ) ? 0x01 : 0x00 ) ;  METHOD_2 ( VAR_30 , VAR_31 , VAR_32 ) ;  VAR_33 += METHOD_3 ( VAR_34 ) ;  } VAR_35 ++ ; } if ( ( VAR_36 -> VAR_37 % 8 ) != 0 ) {  for ( VAR_38 = 0 ; VAR_39 < ( VAR_40 -> VAR_41 % 8 ) ; VAR_42 ++ )  {  VAR_43 = ( TYPE_13 ) ( ( ( ( * VAR_44 ) & ( 0x80 >> VAR_45 ) ) != 0 ) ? 0x01 : 0x00 ) ;  METHOD_4 ( VAR_46 , VAR_47 , VAR_48 ) ;  VAR_49 += METHOD_5 ( VAR_50 ) ;  } VAR_51 ++ ; }  ( TYPE_14 ) METHOD_6 ( VAR_52 , VAR_53 ) ;  break ; } case 2 : {  VAR_54 = METHOD_7 ( VAR_55 , 0 , VAR_56 , VAR_57 -> VAR_58 , 1 , VAR_59 ) ;   if ( VAR_60 == ( TYPE_15 * ) VAR_61 )  break ; for ( VAR_62 = 0 ; VAR_63 < ( ( TYPE_16 ) VAR_64 -> VAR_65 - 1 ) ; VAR_66 += 2 ) {  VAR_67 = METHOD_8 ( VAR_68 , ( * VAR_69 >> 6 ) & 0x3 , VAR_70 ) ;  METHOD_9 ( VAR_71 , VAR_72 , VAR_73 ) ;  VAR_74 += METHOD_10 ( VAR_75 ) ;   VAR_76 = METHOD_11 ( VAR_77 , ( * VAR_78 >> 4 ) & 0x3 , VAR_79 ) ;  METHOD_12 ( VAR_80 , VAR_81 , VAR_82 ) ;  VAR_83 += METHOD_13 ( VAR_84 ) ;  VAR_85 = METHOD_14 ( VAR_86 , ( * VAR_87 >> 2 ) & 0x3 , VAR_88 ) ; METHOD_15 ( VAR_89 , VAR_90 , VAR_91 ) ; VAR_92 += METHOD_16 ( VAR_93 ) ; VAR_94 = METHOD_17 ( VAR_95 , ( * VAR_96 ) & 0x3 , VAR_97 ) ; METHOD_18 ( VAR_98 , VAR_99 , VAR_100 ) ; VAR_101 += METHOD_19 ( VAR_102 ) ; VAR_103 ++ ; } if ( ( VAR_104 -> VAR_105 % 4 ) != 0 ) { VAR_106 = METHOD_20 ( VAR_107 , ( * VAR_108 >> 6 ) & 0x3 , VAR_109 ) ; METHOD_21 ( VAR_110 , VAR_111 , VAR_112 ) ; VAR_113 += METHOD_22 ( VAR_114 ) ; if ( ( VAR_115 -> VAR_116 % 4 ) >= 1 ) { VAR_117 = METHOD_23 ( VAR_118 , ( * VAR_119 >> 4 ) & 0x3 , VAR_120 ) ; METHOD_24 ( VAR_121 , VAR_122 , VAR_123 ) ; VAR_124 += METHOD_25 ( VAR_125 ) ; if ( ( VAR_126 -> VAR_127 % 4 ) >= 2 ) { VAR_128 = METHOD_26 ( VAR_129 , ( * VAR_130 >> 2 ) & 0x3 , VAR_131 ) ; METHOD_27 ( VAR_132 , VAR_133 , VAR_134 ) ; VAR_135 += METHOD_28 ( VAR_136 ) ; } } VAR_137 ++ ; } ( TYPE_17 ) METHOD_29 ( VAR_138 , VAR_139 ) ; break ; } case 4 : { VAR_140 = METHOD_30 ( VAR_141 , 0 , VAR_142 , VAR_143 -> VAR_144 , 1 , VAR_145 ) ; if ( VAR_146 == ( TYPE_18 * ) VAR_147 ) break ; for ( VAR_148 = 0 ; VAR_149 < ( ( TYPE_19 ) VAR_150 -> VAR_151 - 1 ) ; VAR_152 += 2 ) { VAR_153 = METHOD_31 ( VAR_154 , ( * VAR_155 >> 4 ) & 0xf , VAR_156 ) ; METHOD_32 ( VAR_157 , VAR_158 , VAR_159 ) ; VAR_160 += METHOD_33 ( VAR_161 ) ; VAR_162 = METHOD_34 ( VAR_163 , ( * VAR_164 ) & 0xf , VAR_165 ) ; METHOD_35 ( VAR_166 , VAR_167 , VAR_168 ) ; VAR_169 += METHOD_36 ( VAR_170 ) ; VAR_171 ++ ; } if ( ( VAR_172 -> VAR_173 % 2 ) != 0 ) {  VAR_174 = METHOD_37 ( VAR_175 , ( * VAR_176 >> 4 ) & 0xf , VAR_177 ) ;  METHOD_38 ( VAR_178 , VAR_179 , VAR_180 ) ;  VAR_181 += METHOD_39 ( VAR_182 ) ;   VAR_183 ++ ;  } ( TYPE_20 ) METHOD_40 ( VAR_184 , VAR_185 ) ; break ; } case 8 : {  VAR_186 = METHOD_41 ( VAR_187 , 0 , VAR_188 , VAR_189 -> VAR_190 , 1 , VAR_191 ) ;   if ( VAR_192 == ( TYPE_21 * ) VAR_193 )  break ; for ( VAR_194 = 0 ; VAR_195 < ( TYPE_22 ) VAR_196 -> VAR_197 ; VAR_198 ++ ) {  VAR_199 = METHOD_42 ( VAR_200 , * VAR_201 , VAR_202 ) ;  METHOD_43 ( VAR_203 , VAR_204 , VAR_205 ) ; VAR_206 ++ ; VAR_207 += METHOD_44 ( VAR_208 ) ; } ( TYPE_23 ) METHOD_45 ( VAR_209 , VAR_210 ) ; break ; } } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  register const TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 ;  TYPE_4 VAR_3 = VAR_4 ;  VAR_5 = * VAR_6 ; METHOD_1 ( ( VAR_7 , "\\n\\tNetworkAddressType%s(%u)" , METHOD_2 ( VAR_8 , "Unknown" , VAR_9 ) , VAR_10 ) ) ; switch ( VAR_11 ) { case VAR_12 :  METHOD_3 ( ( VAR_13 , ",%s" , METHOD_4 ( VAR_14 , VAR_15 + 1 ) ) ) ;  break ; case VAR_16 :  METHOD_5 ( ( VAR_17 , ",%s" , METHOD_6 ( VAR_18 , VAR_19 + 1 ) ) ) ;  break ; default : VAR_20 = VAR_21 ; break ; } return VAR_22 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { const struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 VAR_4 , VAR_5 ;  TYPE_1 VAR_6 ;  TYPE_2 VAR_7 ; TYPE_3 VAR_8 = 0 , VAR_9 = 0 ; if ( VAR_10 -> VAR_11 == VAR_12 || VAR_13 -> VAR_14 == VAR_15 ) return METHOD_1 ( VAR_16 , 0 ) ; METHOD_2 ( VAR_17 , & VAR_18 , & VAR_19 ) ; if ( ( VAR_20 -> VAR_21 & 0x8 ) != 0x0 ) VAR_22 = VAR_23 ; else VAR_24 = VAR_25 ;  VAR_26 . VAR_27 = 3 ;  VAR_28 . VAR_29 = 3 ; VAR_30 -> METHOD_3 ( VAR_31 , VAR_32 , & VAR_33 ) ; switch ( VAR_34 ) { case VAR_35 : VAR_36 = ( TYPE_4 ) ( VAR_37 + 16 ) ; if ( ( VAR_38 & 0xfffc ) == 0x0 ) return METHOD_4 ( VAR_39 , 0 ) ; VAR_40 = ( TYPE_5 ) ( VAR_41 + 24 ) ; break ; case VAR_42 : VAR_43 = ( TYPE_6 ) ( VAR_44 + 32 ) ; if ( VAR_45 == 0x0 ) return METHOD_5 ( VAR_46 , 0 ) ; VAR_47 = VAR_48 + 8 ; VAR_49 . VAR_50 = 0 ; VAR_51 . VAR_52 = 1 ;  break ;  } VAR_53 |= VAR_54 ; VAR_55 |= VAR_56 ; VAR_57 -> METHOD_6 ( VAR_58 , VAR_59 , & VAR_60 , 0 , VAR_61 ) ; VAR_62 -> METHOD_7 ( VAR_63 , VAR_64 , & VAR_65 , 0 , VAR_66 ) ;  VAR_67 -> VAR_68 = METHOD_8 ( VAR_69 , VAR_70 ) ;   * METHOD_9 ( VAR_71 , VAR_72 ) = METHOD_10 ( VAR_73 , VAR_74 ) ;  return VAR_75 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ;  return METHOD_2 ( VAR_5 , "%s\\n" , VAR_6 -> VAR_7 ) ;   }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 ) { unsigned TYPE_4 VAR_3 [ 4096 ] ; TYPE_5 VAR_4 = 0 , VAR_5 ;  TYPE_6 * VAR_6 = VAR_7 ;  if ( VAR_8 == VAR_9 ) VAR_10 = METHOD_1 ( METHOD_2 ( ) ) ; else if ( VAR_11 & VAR_12 ) {  VAR_13 = METHOD_3 ( METHOD_4 ( ) ) ;  METHOD_5 ( VAR_14 , 0 ) ; } else VAR_15 = VAR_16 ; if ( ! VAR_17 ) { METHOD_6 ( VAR_18 , VAR_19 ) ; goto VAR_20 ; } for ( ; ; ) { VAR_21 = METHOD_7 ( VAR_22 , VAR_23 , sizeof ( VAR_24 ) ) ; if ( VAR_25 <= 0 ) { if ( METHOD_8 ( VAR_26 ) == VAR_27 ) { if ( ! METHOD_9 ( VAR_28 ) ) goto VAR_29 ; } if ( VAR_30 < 0 ) goto VAR_31 ; break ; } if ( VAR_32 && ( METHOD_10 ( VAR_33 , VAR_34 , VAR_35 ) != VAR_36 ) ) goto VAR_37 ; } if ( VAR_38 & VAR_39 ) { if ( ! METHOD_11 ( VAR_40 , VAR_41 ) ) { METHOD_12 ( VAR_42 , VAR_43 ) ; goto VAR_44 ; } } VAR_45 = 1 ; VAR_46 : if ( VAR_47 && ( VAR_48 != VAR_49 ) ) METHOD_13 ( VAR_50 ) ; return VAR_51 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 VAR_3 = * ( struct STRUCT_OR_UNION_1 * ) VAR_4 ; METHOD_1 ( VAR_5 ) ; if ( VAR_6 == 0 && VAR_7 != VAR_8 ) VAR_9 = VAR_10 ;  VAR_11 . METHOD_2 ( VAR_12 . VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  const TYPE_6 VAR_5 = VAR_6 [ VAR_7 / 2 ] ;  TYPE_7 VAR_8 ; for ( VAR_9 = 0 ; VAR_10 <= 1 ; ++ VAR_11 ) { const TYPE_8 VAR_12 = VAR_13 + METHOD_1 ( VAR_14 , VAR_15 ) ;  const TYPE_9 VAR_16 = VAR_17 [ VAR_18 + VAR_19 ] ;  if ( VAR_20 <= 0 ) VAR_21 [ - VAR_22 ] = VAR_23 ; else METHOD_2 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 , VAR_28 ) ; } }
static VAR_0 TYPE_0 METHOD_0 ( const TYPE_1 * VAR_1 , const TYPE_2 VAR_2 , TYPE_3 * VAR_3 , struct STRUCT_OR_UNION_0 * VAR_4 ) { TYPE_4 VAR_5 [ VAR_6 ] ; VAR_7 [ 0 ] = '\\0' ; const TYPE_5 * VAR_8 = "?" ; unsigned TYPE_6 VAR_9 = 0 ;  switch ( VAR_10 ) {  case VAR_11 : ( TYPE_7 ) METHOD_1 ( VAR_12 , & ( ( struct STRUCT_OR_UNION_1 * ) VAR_13 ) -> VAR_14 , VAR_15 , sizeof ( VAR_16 ) - 1 ) ; VAR_17 = METHOD_2 ( ( ( struct STRUCT_OR_UNION_2 * ) VAR_18 ) -> VAR_19 ) ; VAR_20 = METHOD_3 ( VAR_21 -> VAR_22 ) ? "udp" : "tcp" ; break ; case VAR_23 : VAR_24 [ 0 ] = '[' ; VAR_25 [ 1 ] = '\\0' ; if ( METHOD_4 ( VAR_26 , & ( ( struct STRUCT_OR_UNION_3 * ) VAR_27 ) -> VAR_28 , VAR_29 + 1 , sizeof ( VAR_30 ) - 2 ) ) { METHOD_5 ( VAR_31 , "]" ) ; } VAR_32 = METHOD_6 ( ( ( struct STRUCT_OR_UNION_4 * ) VAR_33 ) -> VAR_34 ) ; VAR_35 = METHOD_7 ( VAR_36 -> VAR_37 ) ? "udp6" : "tcp6" ; break ; case VAR_38 :  METHOD_8 ( VAR_39 ,   ( ( struct STRUCT_OR_UNION_5 * ) VAR_40 ) -> VAR_41 ,  sizeof ( VAR_42 ) - 1 ) ; VAR_43 [ sizeof ( VAR_44 ) - 1 ] = '\\0' ; VAR_45 = "unix" ; break ; } if ( METHOD_9 ( VAR_46 ) < 2 ) { METHOD_10 ( VAR_47 , "<AF%d>" , VAR_48 ) ; } if ( VAR_49 ) { METHOD_11 ( VAR_50 , "%s:%s:%u" , VAR_51 , VAR_52 , VAR_53 ) ; } else { METHOD_12 ( VAR_54 , "%s:%s" , VAR_55 , VAR_56 ) ; } }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , TYPE_3 * VAR_1 ,  TYPE_4 * VAR_2 , TYPE_5 VAR_3 ) { METHOD_1 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_2 ( VAR_7 + 8 * VAR_8 , VAR_9 + 8 , VAR_10 ) ; VAR_11 += 8 ; METHOD_3 ( VAR_12 , VAR_13 , VAR_14 ) ; METHOD_4 ( VAR_15 + 8 * VAR_16 , VAR_17 + 8 , VAR_18 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { unsigned TYPE_5 VAR_3 [ VAR_4 ] , VAR_5 ; TYPE_6 VAR_6 = 0 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 = METHOD_1 ( STRUCT_OR_UNION_2 ) ; VAR_10 = VAR_11 >> 4 ; METHOD_2 ( METHOD_3 ( "sequencer_write(dev=%d,count=%d)\\n" , VAR_12 , VAR_13 ) ) ; if ( VAR_14 == VAR_15 ) return - VAR_16 ; VAR_17 = VAR_18 ; while ( VAR_19 >= 4 ) { if ( METHOD_4 ( ( TYPE_8 * ) VAR_20 , & ( VAR_21 ) [ VAR_22 ] , 4 ) ) goto VAR_23 ; VAR_24 = VAR_25 [ 0 ] ; if ( VAR_26 == VAR_27 ) { TYPE_9 VAR_28 , VAR_29 ; VAR_30 = * ( unsigned TYPE_10 * ) & VAR_31 [ 2 ] ; if ( VAR_32 < 0 || VAR_33 >= VAR_34 || VAR_35 [ VAR_36 ] == VAR_37 ) return - VAR_38 ; if ( ! ( VAR_39 & ( 1 << VAR_40 ) ) ) return - VAR_41 ; VAR_42 = ( * ( TYPE_11 * ) & VAR_43 [ 0 ] ) & 0xffff ;  VAR_44 = VAR_45 [ VAR_46 ] -> METHOD_5 ( VAR_47 , VAR_48 , VAR_49 , VAR_50 + 4 , VAR_51 , 0 ) ;  if ( VAR_52 < 0 ) return VAR_53 ; return VAR_54 ; } if ( VAR_55 >= 128 ) { if ( VAR_56 == VAR_57 && VAR_58 == VAR_59 ) { METHOD_6 ( KERN_WARNING "Sequencer:Invalidlevel2event%x\\n" , VAR_60 ) ; return - VAR_61 ; } VAR_62 = 8 ; if ( VAR_63 < VAR_64 ) { if ( ! VAR_65 ) METHOD_7 ( ) ; return VAR_66 - VAR_67 ; } if ( METHOD_8 ( ( TYPE_12 * ) & VAR_68 [ 4 ] , & ( VAR_69 ) [ VAR_70 + 4 ] , 4 ) ) goto VAR_71 ; } else { if ( VAR_72 == VAR_73 ) { METHOD_9 ( KERN_WARNING "Sequencer:4byteeventinlevel2mode\\n" ) ; return - VAR_74 ; } VAR_75 = 4 ; if ( VAR_76 [ 0 ] != VAR_77 ) VAR_78 = 1 ; } if ( VAR_79 [ 0 ] == VAR_80 ) { if ( ! VAR_81 [ VAR_82 [ 2 ] ] ) { TYPE_13 VAR_83 , VAR_84 ; TYPE_14 VAR_85 = VAR_86 [ 2 ] ; if ( VAR_87 >= VAR_88 || VAR_89 [ VAR_90 ] == VAR_91 ) { return - VAR_92 ; } VAR_93 = METHOD_10 ( STRUCT_OR_UNION_3 ) ; if ( ( VAR_94 = VAR_95 [ VAR_96 ] -> METHOD_11 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ) < 0 ) { METHOD_12 ( ) ; METHOD_13 ( KERN_WARNING "SequencerError:UnabletoopenMidi%d\\n" , VAR_101 ) ; return VAR_102 ; } VAR_103 [ VAR_104 ] = 1 ; } } if ( ! METHOD_14 ( VAR_105 , ( STRUCT_OR_UNION_4 -> VAR_106 & ( VAR_107 ) ? 1 : 0 ) ) ) { TYPE_15 VAR_108 = VAR_109 - VAR_110 ; if ( ! VAR_111 ) METHOD_15 ( ) ; if ( ! VAR_112 && ( STRUCT_OR_UNION_5 -> VAR_113 & VAR_114 ) ) return - VAR_115 ; else return VAR_116 ; } VAR_117 += VAR_118 ; VAR_119 -= VAR_120 ; } if ( ! VAR_121 ) METHOD_16 ( ) ; VAR_122 : return VAR_123 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; const TYPE_2 * VAR_3 ; const TYPE_3 * VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_4 VAR_11 ; TYPE_5 VAR_12 ; if ( VAR_13 -> VAR_14 ) METHOD_1 ( VAR_15 , VAR_16 -> VAR_17 ) ; VAR_18 = METHOD_2 ( VAR_19 -> VAR_20 ) ; for ( ; VAR_21 != VAR_22 ; VAR_23 = VAR_24 -> VAR_25 ) { VAR_26 = METHOD_3 ( VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 ) ;  METHOD_5 ( 4 , ( "enablingfilegenfor%sstatistics\'%s%s\'\\n" ,  VAR_31 , VAR_32 -> VAR_33 , VAR_34 -> VAR_35 ) ) ; VAR_36 -> VAR_37 |= VAR_38 ; } VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 ) ; for ( ; VAR_42 != VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ) { VAR_47 = METHOD_7 ( VAR_48 -> VAR_49 ) ; VAR_50 = METHOD_8 ( VAR_51 ) ;  VAR_52 = VAR_53 -> VAR_54 ;  VAR_55 = VAR_56 -> VAR_57 ; VAR_58 |= VAR_59 ; VAR_60 = METHOD_9 ( VAR_61 -> VAR_62 ) ; for ( ; VAR_63 != VAR_64 ; VAR_65 = VAR_66 -> VAR_67 ) { switch ( VAR_68 -> VAR_69 ) { case VAR_70 : VAR_71 = VAR_72 -> VAR_73 . VAR_74 ; break ; case VAR_75 : switch ( VAR_76 -> VAR_77 . VAR_78 ) { default : METHOD_10 ( 0 ) ; break ; case VAR_79 : VAR_80 = VAR_81 ; break ; case VAR_82 : VAR_83 = VAR_84 ; break ; case VAR_85 : VAR_86 = VAR_87 ; break ; case VAR_88 : VAR_89 = VAR_90 ; break ; case VAR_91 : VAR_92 = VAR_93 ; break ; case VAR_94 : VAR_95 = VAR_96 ; break ; case VAR_97 : VAR_98 = VAR_99 ; break ; } break ; case VAR_100 : switch ( VAR_101 -> VAR_102 . VAR_103 ) { case VAR_104 : VAR_105 |= VAR_106 ; break ; case VAR_107 : VAR_108 &= ~ VAR_109 ; break ; case VAR_110 : VAR_111 |= VAR_112 ; break ; case VAR_113 : VAR_114 &= ~ VAR_115 ; break ; default : METHOD_11 ( VAR_116 , "Unknownfilegenflagtoken%d" , VAR_117 -> VAR_118 . VAR_119 ) ; METHOD_12 ( 1 ) ; } break ; default : METHOD_13 ( VAR_120 , "Unknownfilegenoptiontoken%d" , VAR_121 -> VAR_122 ) ; METHOD_14 ( 1 ) ; } } METHOD_15 ( VAR_123 , VAR_124 , VAR_125 , VAR_126 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 TYPE_3 VAR_1 = VAR_2 ; TYPE_4 VAR_3 ; METHOD_1 ( VAR_4 ) ; if ( METHOD_2 ( METHOD_3 ( VAR_5 ) ) ) return ; VAR_6 = METHOD_4 ( METHOD_5 ( VAR_7 ) -> VAR_8 , VAR_9 , METHOD_6 ( METHOD_7 ( VAR_10 ) ) , VAR_11 , VAR_12 , & VAR_13 , VAR_14 ) ; if ( VAR_15 < 0 ) goto VAR_16 ; METHOD_8 ( & VAR_17 -> VAR_18 ) ; if ( VAR_19 -> VAR_20 )  METHOD_9 ( VAR_21 -> VAR_22 , VAR_23 , VAR_24 -> VAR_25 . VAR_26 , VAR_27 , VAR_28 , 0 ) ;  METHOD_10 ( VAR_29 , VAR_30 ) ; return ; VAR_31 : METHOD_11 ( METHOD_12 ( VAR_32 ) , "Failedtoqueueunitstartupjob:%s" , METHOD_13 ( & VAR_33 , VAR_34 ) ) ; METHOD_14 ( VAR_35 , VAR_36 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {   TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ;   TYPE_4 VAR_18 = VAR_19 [ 15 ] ;   TYPE_5 VAR_20 = VAR_21 [ 0 ] ;   TYPE_6 VAR_22 = VAR_23 [ 13 ] ;   TYPE_7 VAR_24 = VAR_25 [ 2 ] ;   TYPE_8 VAR_26 = VAR_27 [ 11 ] ;   TYPE_9 VAR_28 = VAR_29 [ 4 ] ;   TYPE_10 VAR_30 = VAR_31 [ 9 ] ;   TYPE_11 VAR_32 = VAR_33 [ 6 ] ;   TYPE_12 VAR_34 = VAR_35 [ 7 ] ;   TYPE_13 VAR_36 = VAR_37 [ 8 ] ;   TYPE_14 VAR_38 = VAR_39 [ 5 ] ;   TYPE_15 VAR_40 = VAR_41 [ 10 ] ;   TYPE_16 VAR_42 = VAR_43 [ 3 ] ;   TYPE_17 VAR_44 = VAR_45 [ 12 ] ;   TYPE_18 VAR_46 = VAR_47 [ 1 ] ;   TYPE_19 VAR_48 = VAR_49 [ 14 ] ;  VAR_50 = VAR_51 * VAR_52 + VAR_53 * VAR_54 ; VAR_55 = VAR_56 * VAR_57 - VAR_58 * VAR_59 ; VAR_60 = VAR_61 * VAR_62 + VAR_63 * VAR_64 ; VAR_65 = VAR_66 * VAR_67 - VAR_68 * VAR_69 ; VAR_70 = VAR_71 * VAR_72 + VAR_73 * VAR_74 ; VAR_75 = VAR_76 * VAR_77 - VAR_78 * VAR_79 ; VAR_80 = VAR_81 * VAR_82 + VAR_83 * VAR_84 ; VAR_85 = VAR_86 * VAR_87 - VAR_88 * VAR_89 ; VAR_90 = VAR_91 * VAR_92 + VAR_93 * VAR_94 ; VAR_95 = VAR_96 * VAR_97 - VAR_98 * VAR_99 ; VAR_100 = VAR_101 * VAR_102 + VAR_103 * VAR_104 ; VAR_105 = VAR_106 * VAR_107 - VAR_108 * VAR_109 ; VAR_110 = VAR_111 * VAR_112 + VAR_113 * VAR_114 ; VAR_115 = VAR_116 * VAR_117 - VAR_118 * VAR_119 ; VAR_120 = VAR_121 * VAR_122 + VAR_123 * VAR_124 ; VAR_125 = VAR_126 * VAR_127 - VAR_128 * VAR_129 ; VAR_130 = METHOD_1 ( VAR_131 + VAR_132 ) ; VAR_133 = METHOD_2 ( VAR_134 + VAR_135 ) ; VAR_136 = METHOD_3 ( VAR_137 + VAR_138 ) ; VAR_139 = METHOD_4 ( VAR_140 + VAR_141 ) ; VAR_142 = METHOD_5 ( VAR_143 + VAR_144 ) ; VAR_145 = METHOD_6 ( VAR_146 + VAR_147 ) ; VAR_148 = METHOD_7 ( VAR_149 + VAR_150 ) ; VAR_151 = METHOD_8 ( VAR_152 + VAR_153 ) ; VAR_154 = METHOD_9 ( VAR_155 - VAR_156 ) ; VAR_157 = METHOD_10 ( VAR_158 - VAR_159 ) ; VAR_160 = METHOD_11 ( VAR_161 - VAR_162 ) ; VAR_163 = METHOD_12 ( VAR_164 - VAR_165 ) ; VAR_166 = METHOD_13 ( VAR_167 - VAR_168 ) ; VAR_169 = METHOD_14 ( VAR_170 - VAR_171 ) ; VAR_172 = METHOD_15 ( VAR_173 - VAR_174 ) ; VAR_175 = METHOD_16 ( VAR_176 - VAR_177 ) ; VAR_178 = VAR_179 ; VAR_180 = VAR_181 ; VAR_182 = VAR_183 ; VAR_184 = VAR_185 ; VAR_186 = VAR_187 ; VAR_188 = VAR_189 ; VAR_190 = VAR_191 ; VAR_192 = VAR_193 ; VAR_194 = VAR_195 * VAR_196 + VAR_197 * VAR_198 ; VAR_199 = VAR_200 * VAR_201 - VAR_202 * VAR_203 ; VAR_204 = VAR_205 * VAR_206 + VAR_207 * VAR_208 ; VAR_209 = VAR_210 * VAR_211 - VAR_212 * VAR_213 ; VAR_214 = - VAR_215 * VAR_216 + VAR_217 * VAR_218 ; VAR_219 = VAR_220 * VAR_221 + VAR_222 * VAR_223 ; VAR_224 = - VAR_225 * VAR_226 + VAR_227 * VAR_228 ; VAR_229 = VAR_230 * VAR_231 + VAR_232 * VAR_233 ; VAR_234 = VAR_235 + VAR_236 ; VAR_237 = VAR_238 + VAR_239 ; VAR_240 = VAR_241 + VAR_242 ; VAR_243 = VAR_244 + VAR_245 ; VAR_246 = VAR_247 - VAR_248 ; VAR_249 = VAR_250 - VAR_251 ; VAR_252 = VAR_253 - VAR_254 ; VAR_255 = VAR_256 - VAR_257 ; VAR_258 = METHOD_17 ( VAR_259 + VAR_260 ) ; VAR_261 = METHOD_18 ( VAR_262 + VAR_263 ) ; VAR_264 = METHOD_19 ( VAR_265 + VAR_266 ) ; VAR_267 = METHOD_20 ( VAR_268 + VAR_269 ) ; VAR_270 = METHOD_21 ( VAR_271 - VAR_272 ) ; VAR_273 = METHOD_22 ( VAR_274 - VAR_275 ) ; VAR_276 = METHOD_23 ( VAR_277 - VAR_278 ) ; VAR_279 = METHOD_24 ( VAR_280 - VAR_281 ) ; VAR_282 = VAR_283 ; VAR_284 = VAR_285 ; VAR_286 = VAR_287 ; VAR_288 = VAR_289 ; VAR_290 = VAR_291 * VAR_292 + VAR_293 * VAR_294 ; VAR_295 = VAR_296 * VAR_297 - VAR_298 * VAR_299 ; VAR_300 = - VAR_301 * VAR_302 + VAR_303 * VAR_304 ; VAR_305 = VAR_306 * VAR_307 + VAR_308 * VAR_309 ; VAR_310 = VAR_311 ; VAR_312 = VAR_313 ; VAR_314 = VAR_315 ; VAR_316 = VAR_317 ; VAR_318 = VAR_319 * VAR_320 + VAR_321 * VAR_322 ; VAR_323 = VAR_324 * VAR_325 - VAR_326 * VAR_327 ; VAR_328 = - VAR_329 * VAR_330 + VAR_331 * VAR_332 ; VAR_333 = VAR_334 * VAR_335 + VAR_336 * VAR_337 ; VAR_338 = VAR_339 + VAR_340 ; VAR_341 = VAR_342 + VAR_343 ; VAR_344 = VAR_345 - VAR_346 ; VAR_347 = VAR_348 - VAR_349 ; VAR_350 = METHOD_25 ( VAR_351 + VAR_352 ) ; VAR_353 = METHOD_26 ( VAR_354 + VAR_355 ) ; VAR_356 = METHOD_27 ( VAR_357 - VAR_358 ) ; VAR_359 = METHOD_28 ( VAR_360 - VAR_361 ) ; VAR_362 = VAR_363 + VAR_364 ; VAR_365 = VAR_366 + VAR_367 ; VAR_368 = VAR_369 - VAR_370 ; VAR_371 = VAR_372 - VAR_373 ; VAR_374 = METHOD_29 ( VAR_375 + VAR_376 ) ; VAR_377 = METHOD_30 ( VAR_378 + VAR_379 ) ; VAR_380 = METHOD_31 ( VAR_381 - VAR_382 ) ; VAR_383 = METHOD_32 ( VAR_384 - VAR_385 ) ; VAR_386 = ( - VAR_387 ) * ( VAR_388 + VAR_389 ) ; VAR_390 = VAR_391 * ( VAR_392 - VAR_393 ) ; VAR_394 = VAR_395 * ( VAR_396 + VAR_397 ) ; VAR_398 = VAR_399 * ( - VAR_400 + VAR_401 ) ; VAR_402 = VAR_403 * ( VAR_404 + VAR_405 ) ; VAR_406 = VAR_407 * ( - VAR_408 + VAR_409 ) ; VAR_410 = ( - VAR_411 ) * ( VAR_412 + VAR_413 ) ; VAR_414 = VAR_415 * ( VAR_416 - VAR_417 ) ; VAR_418 = METHOD_33 ( VAR_419 ) ; VAR_420 = METHOD_34 ( VAR_421 ) ; VAR_422 = METHOD_35 ( VAR_423 ) ; VAR_424 = METHOD_36 ( VAR_425 ) ; VAR_426 = METHOD_37 ( VAR_427 ) ; VAR_428 = METHOD_38 ( VAR_429 ) ; VAR_430 = METHOD_39 ( VAR_431 ) ; VAR_432 = METHOD_40 ( VAR_433 ) ;  VAR_434 [ 0 ] = VAR_435 ;   VAR_436 [ 1 ] = - VAR_437 ;   VAR_438 [ 2 ] = VAR_439 ;   VAR_440 [ 3 ] = - VAR_441 ;   VAR_442 [ 4 ] = VAR_443 ;   VAR_444 [ 5 ] = VAR_445 ;   VAR_446 [ 6 ] = VAR_447 ;   VAR_448 [ 7 ] = VAR_449 ;   VAR_450 [ 8 ] = VAR_451 ;   VAR_452 [ 9 ] = VAR_453 ;   VAR_454 [ 10 ] = VAR_455 ;   VAR_456 [ 11 ] = VAR_457 ;   VAR_458 [ 12 ] = VAR_459 ;   VAR_460 [ 13 ] = - VAR_461 ;   VAR_462 [ 14 ] = VAR_463 ;   VAR_464 [ 15 ] = - VAR_465 ;  }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 == 0 || VAR_4 == 2 ) { if ( ! VAR_5 || METHOD_1 ( & VAR_6 -> VAR_7 ) ) return VAR_8 ; return METHOD_2 ( VAR_9 , VAR_10 + 1 ) ; } else { METHOD_3 ( VAR_11 == 1 || VAR_12 == 3 ) ; return VAR_13 -> VAR_14 [ VAR_15 - 1 ] . VAR_16 ; } }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; TYPE_6 VAR_5 = VAR_6 / 2 ; METHOD_1 ( VAR_7 , VAR_8 ) ;  METHOD_2 ( VAR_9 , VAR_10 , VAR_11 ) ;  }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 , struct STRUCT_OR_UNION_3 TYPE_1 * VAR_3 , TYPE_2 VAR_4 ) { TYPE_3 VAR_5 = 0 ; TYPE_4 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_5 VAR_8 ; if ( VAR_9 ) { if ( VAR_10 != VAR_11 && VAR_12 -> VAR_13 ) VAR_14 += METHOD_1 ( METHOD_2 ( VAR_15 -> VAR_16 ) ) ; if ( VAR_17 != VAR_18 && VAR_19 -> VAR_20 ) VAR_21 += METHOD_3 ( METHOD_4 ( VAR_22 -> VAR_23 ) ) ; if ( VAR_24 != VAR_25 && VAR_26 -> VAR_27 ) VAR_28 += METHOD_5 ( METHOD_6 ( VAR_29 -> VAR_30 ) ) ; if ( VAR_31 != VAR_32 && VAR_33 -> VAR_34 ) VAR_35 += METHOD_7 ( METHOD_8 ( VAR_36 -> VAR_37 ) ) ; } if ( VAR_38 && VAR_39 ) VAR_40 += METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) return VAR_43 ; VAR_44 += sizeof ( * VAR_45 ) ; VAR_46 = METHOD_10 ( VAR_47 , VAR_48 , VAR_49 ) ; if ( ! VAR_50 ) return METHOD_11 ( - VAR_51 ) ; METHOD_12 ( VAR_52 , 0 , VAR_53 ) ;  VAR_54 -> VAR_55 = VAR_56 ;  VAR_57 = ( TYPE_6 * ) ( VAR_58 + 1 ) ; VAR_59 = METHOD_13 ( VAR_60 ? VAR_61 -> VAR_62 : VAR_63 , VAR_64 , VAR_65 , VAR_66 != VAR_67 , & VAR_68 -> VAR_69 , & VAR_70 ) ; if ( VAR_71 ) goto VAR_72 ; VAR_73 = METHOD_14 ( VAR_74 ? VAR_75 -> VAR_76 : VAR_77 , VAR_78 , VAR_79 , VAR_80 != VAR_81 , & VAR_82 -> VAR_83 , & VAR_84 ) ; if ( VAR_85 ) goto VAR_86 ; VAR_87 = METHOD_15 ( VAR_88 ? VAR_89 -> VAR_90 : VAR_91 , VAR_92 , VAR_93 , VAR_94 != VAR_95 , ( struct STRUCT_OR_UNION_5 * * ) & VAR_96 -> VAR_97 , & VAR_98 ) ; if ( VAR_99 ) goto VAR_100 ; VAR_101 = METHOD_16 ( VAR_102 ? VAR_103 -> VAR_104 : VAR_105 , VAR_106 , VAR_107 , VAR_108 != VAR_109 , & VAR_110 -> VAR_111 , & VAR_112 ) ; if ( VAR_113 ) goto VAR_114 ; VAR_115 -> VAR_116 = ( VAR_117 -> VAR_118 ? METHOD_17 ( VAR_119 -> VAR_120 ) : 0 ) + ( VAR_121 -> VAR_122 ? METHOD_18 ( VAR_123 -> VAR_124 ) : 0 ) + ( VAR_125 -> VAR_126 ? METHOD_19 ( VAR_127 -> VAR_128 ) : 0 ) ; VAR_129 -> VAR_130 = ( VAR_131 -> VAR_132 ? METHOD_20 ( VAR_133 -> VAR_134 ) : 0 ) ; return VAR_135 ; VAR_136 : METHOD_21 ( VAR_137 , VAR_138 , VAR_139 -> VAR_140 ) ; return METHOD_22 ( VAR_141 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; VAR_4 * VAR_5 ; unsigned TYPE_3 VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_4 VAR_14 ; TYPE_5 * VAR_15 ; TYPE_6 VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 , VAR_19 ) ; if ( ! VAR_20 ) return METHOD_2 ( VAR_21 ) ; VAR_22 -> VAR_23 -> VAR_24 = VAR_25 ; VAR_26 -> VAR_27 -> VAR_28 = VAR_29 ; VAR_30 -> VAR_31 -> VAR_32 = 0 ; METHOD_3 ( VAR_33 , 4 ) ; VAR_34 = METHOD_4 ( VAR_35 ) ; VAR_36 = METHOD_5 ( VAR_37 ) ; if ( VAR_38 != 1 ) { METHOD_6 ( VAR_39 , "unknownversion%i" , VAR_40 ) ; return VAR_41 ; } METHOD_7 ( VAR_42 , 12 ) ; VAR_43 -> VAR_44 = METHOD_8 ( VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 ) ; VAR_48 = METHOD_10 ( VAR_49 ) ; VAR_50 = METHOD_11 ( VAR_51 ) ; METHOD_12 ( VAR_52 , 8 ) ; METHOD_13 ( VAR_53 , VAR_54 , VAR_55 ) ; METHOD_14 ( VAR_56 , 4 ) ; VAR_57 -> VAR_58 -> VAR_59 = METHOD_15 ( VAR_60 ) ; VAR_61 -> VAR_62 -> VAR_63 = METHOD_16 ( VAR_64 ) ; if ( METHOD_17 ( VAR_65 ) != 1 ) return VAR_66 ; VAR_67 = METHOD_18 ( VAR_68 ) ; if ( VAR_69 != 8 && VAR_70 != 16 && VAR_71 != 24 && VAR_72 != 48 ) { METHOD_19 ( VAR_73 , "unsupportedbiBitCount%i" , VAR_74 ) ; return VAR_75 ; } switch ( METHOD_20 ( VAR_76 ) ) { case VAR_77 : VAR_78 = 0 ; break ; case 0x100 : VAR_79 -> VAR_80 -> VAR_81 = METHOD_21 ( 'B' , 'I' , 'T' , 0 ) ; VAR_82 = 1 ; break ; default : METHOD_22 ( VAR_83 , "unknownbitmapcompression" ) ; return VAR_84 ; } METHOD_23 ( VAR_85 , 4 ) ; METHOD_24 ( VAR_86 , VAR_87 , VAR_88 ) ; METHOD_25 ( VAR_89 , 140 ) ; if ( METHOD_26 ( VAR_90 ) != 0x5453 ) return VAR_91 ; VAR_92 = METHOD_27 ( VAR_93 ) ; if ( VAR_94 < 0x163C ) { METHOD_28 ( VAR_95 , "shortSETUPheader" ) ; return VAR_96 ; } METHOD_29 ( VAR_97 , 616 ) ; if ( ! METHOD_30 ( VAR_98 ) ^ VAR_99 ) { VAR_100 -> VAR_101 -> VAR_102 = METHOD_31 ( "BottomUp" ) ; VAR_103 -> VAR_104 -> VAR_105 = 9 ; } METHOD_32 ( VAR_106 , 4 ) ; METHOD_33 ( VAR_107 , 64 , 1 , METHOD_34 ( VAR_108 ) ) ; METHOD_35 ( VAR_109 , 20 ) ; METHOD_36 ( & VAR_110 -> VAR_111 , "camera_version" , METHOD_37 ( VAR_112 ) , 0 ) ; METHOD_38 ( & VAR_113 -> VAR_114 , "firmware_version" , METHOD_39 ( VAR_115 ) , 0 ) ; METHOD_40 ( & VAR_116 -> VAR_117 , "software_version" , METHOD_41 ( VAR_118 ) , 0 ) ; METHOD_42 ( & VAR_119 -> VAR_120 , "recording_timezone" , METHOD_43 ( VAR_121 ) , 0 ) ; VAR_122 = METHOD_44 ( VAR_123 ) ; METHOD_45 ( & VAR_124 -> VAR_125 , "brightness" , METHOD_46 ( VAR_126 ) , 1 ) ; METHOD_47 ( & VAR_127 -> VAR_128 , "contrast" , METHOD_48 ( VAR_129 ) , 1 ) ; METHOD_49 ( & VAR_130 -> VAR_131 , "gamma" , METHOD_50 ( VAR_132 ) , 1 ) ; METHOD_51 ( VAR_133 , 12 + 16 ) ; METHOD_52 ( & VAR_134 -> VAR_135 , "wbgain[0].r" , METHOD_53 ( METHOD_54 ( VAR_136 ) ) , 1 ) ; METHOD_55 ( & VAR_137 -> VAR_138 , "wbgain[0].b" , METHOD_56 ( METHOD_57 ( VAR_139 ) ) , 1 ) ; METHOD_58 ( VAR_140 , 36 ) ; VAR_141 -> VAR_142 -> VAR_143 = METHOD_59 ( VAR_144 ) ; if ( VAR_145 == VAR_146 ) { if ( VAR_147 == 8 ) { VAR_148 -> VAR_149 -> VAR_150 = VAR_151 ; } else if ( VAR_152 == 16 ) { VAR_153 -> VAR_154 -> VAR_155 = VAR_156 ; } else if ( VAR_157 == 24 ) { VAR_158 -> VAR_159 -> VAR_160 = VAR_161 ; } else if ( VAR_162 == 48 ) { VAR_163 -> VAR_164 -> VAR_165 = VAR_166 ; } else { METHOD_60 ( VAR_167 , "unsupportedbiBitCount%i" , VAR_168 ) ; return VAR_169 ; } } else if ( VAR_170 == VAR_171 ) { switch ( VAR_172 & 0xFFFFFF ) { case VAR_173 : if ( VAR_174 == 8 ) { VAR_175 -> VAR_176 -> VAR_177 = VAR_178 ; } else if ( VAR_179 == 16 ) { VAR_180 -> VAR_181 -> VAR_182 = VAR_183 ; } else { METHOD_61 ( VAR_184 , "unsupportedbiBitCount%i" , VAR_185 ) ; return VAR_186 ; } break ; case VAR_187 : if ( VAR_188 == 8 ) { VAR_189 -> VAR_190 -> VAR_191 = VAR_192 ; } else if ( VAR_193 == 16 ) { VAR_194 -> VAR_195 -> VAR_196 = VAR_197 ; } else { METHOD_62 ( VAR_198 , "unsupportedbiBitCount%i" , VAR_199 ) ; return VAR_200 ; } break ; default : METHOD_63 ( VAR_201 , "unsupportedColorFieldArray(CFA)%i" , VAR_202 & 0xFFFFFF ) ; return VAR_203 ; } } else { METHOD_64 ( VAR_204 , "unsupportedcompression%i" , VAR_205 ) ; return VAR_206 ; } METHOD_65 ( VAR_207 , 668 ) ; METHOD_66 ( & VAR_208 -> VAR_209 , "shutter_ns" , METHOD_67 ( VAR_210 ) , 0 ) ; METHOD_68 ( VAR_211 , 24 ) ; VAR_212 4096 VAR_213 = METHOD_69 ( VAR_214 + 1 ) ; if ( ! VAR_215 ) return METHOD_70 ( VAR_216 ) ; VAR_217 = METHOD_71 ( VAR_218 , VAR_219 , VAR_220 , VAR_221 + 1 ) ; if ( VAR_222 < VAR_223 ) METHOD_72 ( VAR_224 , VAR_225 - VAR_226 ) ; if ( VAR_227 [ 0 ] ) METHOD_73 ( & VAR_228 -> VAR_229 , "description" , VAR_230 , VAR_231 ) ; else METHOD_74 ( VAR_232 ) ; METHOD_75 ( VAR_233 , 1176 ) ; METHOD_76 ( & VAR_234 -> VAR_235 , "enable_crop" , METHOD_77 ( VAR_236 ) , 1 ) ; METHOD_78 ( & VAR_237 -> VAR_238 , "crop_left" , METHOD_79 ( VAR_239 ) , 1 ) ; METHOD_80 ( & VAR_240 -> VAR_241 , "crop_top" , METHOD_81 ( VAR_242 ) , 1 ) ; METHOD_82 ( & VAR_243 -> VAR_244 , "crop_right" , METHOD_83 ( VAR_245 ) , 1 ) ; METHOD_84 ( & VAR_246 -> VAR_247 , "crop_bottom" , METHOD_85 ( VAR_248 ) , 1 ) ; METHOD_86 ( VAR_249 , VAR_250 , VAR_251 ) ;  for ( VAR_252 = 0 ; VAR_253 < VAR_254 -> VAR_255 ; VAR_256 ++ )  METHOD_87 ( VAR_257 , METHOD_88 ( VAR_258 ) , VAR_259 , 0 , 0 , VAR_260 ) ;  return 0 ;  }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , const unsigned TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { const unsigned TYPE_4 * VAR_4 = VAR_5 -> VAR_6 ; const TYPE_5 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_6 VAR_10 = VAR_11 -> VAR_12 ; enum VAR_13 VAR_14 ; unsigned TYPE_7 VAR_15 = 0 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 , VAR_19 = 0 ; const TYPE_8 * VAR_20 ; TYPE_9 VAR_21 = 0 , VAR_22 = 0 , VAR_23 = 0 , VAR_24 = 0 ; TYPE_10 VAR_25 ; unsigned TYPE_11 VAR_26 = 0 ; VAR_27 0x01 VAR_28 0x02 VAR_29 0x04 VAR_30 0x20 VAR_31 10 unsigned TYPE_12 VAR_32 [ VAR_33 METHOD_1 ; unsigned TYPE_13 VAR_34 [ VAR_35 METHOD_2 ; unsigned TYPE_14 VAR_36 [ VAR_37 METHOD_3 ; VAR_38 10 unsigned TYPE_15 VAR_39 [ VAR_40 METHOD_4 ; if ( VAR_41 > 65535 ) return - VAR_42 ; VAR_43 : METHOD_5 ( "next_op:pc=\\e[32m%zu\\e[m/%zudp=\\e[33m%zu\\e[m/%zuC=%dJ=%d\\n" , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; if ( METHOD_6 ( VAR_50 >= VAR_51 ) ) goto VAR_52 ; VAR_53 = VAR_54 [ VAR_55 METHOD_7 ; if ( METHOD_8 ( VAR_56 + VAR_57 [ VAR_58 METHOD_9 > VAR_59 ) ) goto VAR_60 ; if ( VAR_61 <= VAR_62 ) { unsigned TYPE_16 VAR_63 ; if ( ( VAR_64 & VAR_65 && VAR_66 & VAR_67 ) ||  VAR_68 == VAR_69 ) {  VAR_70 &= ~ VAR_71 ; VAR_72 += VAR_73 [ VAR_74 METHOD_10 ; goto VAR_75 ; } VAR_76 = 0 ; VAR_77 = 2 ; if ( METHOD_11 ( VAR_78 >= VAR_79 - 1 ) ) goto VAR_80 ; VAR_81 = VAR_82 [ VAR_83 ++ METHOD_12 ; if ( METHOD_13 ( ( VAR_84 & 0x1f ) == VAR_85 ) ) goto VAR_86 ; if ( VAR_87 & VAR_88 ) { METHOD_14 ( "-any%02x\\n" , VAR_89 ) ; } else { VAR_90 = VAR_91 [ VAR_92 + 1 METHOD_15 ; VAR_93 |= VAR_94 & VAR_95 ; VAR_96 = VAR_97 ^ VAR_98 ; VAR_99 &= ~ ( VAR_100 & VAR_101 ) ; METHOD_16 ( "-match?%02x%02x%02x\\n" , VAR_102 , VAR_103 , VAR_104 ) ; if ( VAR_105 != 0 ) { if ( VAR_106 & VAR_107 ) { VAR_108 += VAR_109 [ VAR_110 METHOD_17 ; VAR_111 -- ; goto VAR_112 ; } goto VAR_113 ; } } VAR_114 |= VAR_115 ; VAR_116 = VAR_117 [ VAR_118 ++ METHOD_18 ; if ( VAR_119 > 0x7f ) { if ( METHOD_19 ( VAR_120 == VAR_121 ) ) { if ( METHOD_20 ( ! ( VAR_122 & VAR_123 ) ) ) goto VAR_124 ; VAR_125 |= VAR_126 ; if ( METHOD_21 ( 2 > VAR_127 - VAR_128 ) ) goto VAR_129 ; } else { TYPE_17 VAR_130 = VAR_131 - 0x80 ; if ( METHOD_22 ( VAR_132 > 2 ) ) goto VAR_133 ; if ( METHOD_23 ( VAR_134 >= VAR_135 - VAR_136 ) ) goto VAR_137 ; VAR_138 += VAR_139 ; for ( VAR_140 = 0 ; VAR_141 > 0 ; VAR_142 -- ) { VAR_143 <<= 8 ; VAR_144 |= VAR_145 [ VAR_146 ++ METHOD_24 ; } if ( METHOD_25 ( VAR_147 > VAR_148 - VAR_149 ) ) goto VAR_150 ; } } if ( VAR_151 & VAR_152 ) { if ( METHOD_26 ( VAR_153 >= VAR_154 ) ) goto VAR_155 ; VAR_156 [ VAR_157 METHOD_27 = VAR_158 ; VAR_159 [ VAR_160 METHOD_28 = VAR_161 ; if ( ! ( VAR_162 & VAR_163 ) ) { VAR_164 [ VAR_165 METHOD_29 = VAR_166 ; VAR_167 = VAR_168 + VAR_169 ; } else { VAR_170 [ VAR_171 METHOD_30 = 0 ; } VAR_172 ++ ; } METHOD_31 ( "-TAG:%02x%zu%s\\n" , VAR_173 , VAR_174 , VAR_175 & VAR_176 ? "CONS" : "" ) ; VAR_177 = VAR_178 ; } switch ( VAR_179 ) { case VAR_180 : case VAR_181 : VAR_182 = VAR_183 [ VAR_184 [ VAR_185 + 1 METHOD_32 METHOD_33 ( VAR_186 , VAR_187 , VAR_188 , VAR_189 + VAR_190 , VAR_191 ) ; if ( VAR_192 < 0 ) return VAR_193 ; goto VAR_194 ; case VAR_195 : case VAR_196 : case VAR_197 : VAR_198 = VAR_199 [ VAR_200 [ VAR_201 + 2 METHOD_34 METHOD_35 ( VAR_202 , VAR_203 , VAR_204 , VAR_205 + VAR_206 , VAR_207 ) ; if ( VAR_208 < 0 ) return VAR_209 ; goto VAR_210 ; case VAR_211 : case VAR_212 : case VAR_213 : case VAR_214 : case VAR_215 : VAR_216 : if ( ! ( VAR_217 & VAR_218 ) ) { if ( VAR_219 & VAR_220 ) { VAR_221 = METHOD_36 ( VAR_222 , VAR_223 , & VAR_224 , & VAR_225 , & VAR_226 ) ; if ( VAR_227 < 0 ) goto VAR_228 ; } else { VAR_229 += VAR_230 ; } METHOD_37 ( "-LEAF:%zu\\n" , VAR_231 ) ; } VAR_232 += VAR_233 [ VAR_234 METHOD_38 ; goto VAR_235 ; case VAR_236 : case VAR_237 : case VAR_238 : METHOD_39 ( "-MATCH_JUMP\\n" ) ; if ( METHOD_40 ( VAR_239 == VAR_240 ) ) goto VAR_241 ; VAR_242 [ VAR_243 ++ METHOD_41 = VAR_244 + VAR_245 [ VAR_246 METHOD_42 ; VAR_247 = VAR_248 [ VAR_249 + 2 METHOD_43 ; goto VAR_250 ; case VAR_251 : if ( METHOD_44 ( ! ( VAR_252 & VAR_253 ) ) ) goto VAR_254 ; VAR_255 += VAR_256 [ VAR_257 METHOD_45 ; goto VAR_258 ; case VAR_259 : if ( METHOD_46 ( VAR_260 != 0 || VAR_261 != 0 ) ) { METHOD_47 ( "ASN.1decodererror:Stacksnotemptyatcompletion(%u,%u)\\n" , VAR_262 , VAR_263 ) ; return - VAR_264 ; } return 0 ; case VAR_265 : case VAR_266 : if ( METHOD_48 ( ! ( VAR_267 & VAR_268 ) ) ) goto VAR_269 ; case VAR_270 : case VAR_271 : case VAR_272 : case VAR_273 : case VAR_274 : case VAR_275 : if ( METHOD_49 ( VAR_276 <= 0 ) ) goto VAR_277 ; VAR_278 -- ; VAR_279 = VAR_280 [ VAR_281 METHOD_50 ; VAR_282 = VAR_283 [ VAR_284 METHOD_51 ; VAR_285 = VAR_286 ; VAR_287 = VAR_288 [ VAR_289 METHOD_52 ; METHOD_53 ( "-endconst=%zudp=%zul=%zu/%zu\\n" , VAR_290 , VAR_291 , VAR_292 , VAR_293 ) ; if ( VAR_294 == 0 ) { VAR_295 = VAR_296 ; if ( METHOD_54 ( VAR_297 - VAR_298 < 2 ) ) goto VAR_299 ; if ( VAR_300 [ VAR_301 ++ METHOD_55 != 0 ) { if ( VAR_302 & VAR_303 ) { VAR_304 -- ; VAR_305 ++ ; VAR_306 = VAR_307 [ VAR_308 + 1 METHOD_56 ; METHOD_57 ( "-continue\\n" ) ; goto VAR_309 ; } goto VAR_310 ; } if ( VAR_311 [ VAR_312 ++ METHOD_58 != 0 ) goto VAR_313 ; VAR_314 = VAR_315 - VAR_316 - 2 ; } else { if ( VAR_317 < VAR_318 && ( VAR_319 & VAR_320 ) ) { VAR_321 = VAR_322 ; VAR_323 ++ ; VAR_324 = VAR_325 [ VAR_326 + 1 METHOD_59 ; METHOD_60 ( "-continue\\n" ) ; goto VAR_327 ; } if ( VAR_328 != VAR_329 ) goto VAR_330 ; VAR_331 -= VAR_332 ; METHOD_61 ( "-conslenl=%zud=%zu\\n" , VAR_333 , VAR_334 - VAR_335 ) ; } if ( VAR_336 & VAR_337 ) { unsigned TYPE_18 VAR_338 ; if ( VAR_339 & VAR_340 ) VAR_341 = VAR_342 [ VAR_343 + 2 METHOD_62 ; else VAR_344 = VAR_345 [ VAR_346 + 1 METHOD_63 ; VAR_347 = VAR_348 [ VAR_349 METHOD_64 ( VAR_350 , VAR_351 , 0 , VAR_352 + VAR_353 , VAR_354 ) ; } VAR_355 += VAR_356 [ VAR_357 METHOD_65 ; goto VAR_358 ; case VAR_359 : if ( ! ( VAR_360 & VAR_361 ) ) { VAR_362 += VAR_363 [ VAR_364 METHOD_66 ; goto VAR_365 ; } case VAR_366 : VAR_367 = VAR_368 [ VAR_369 [ VAR_370 + 1 METHOD_67 METHOD_68 ( VAR_371 , VAR_372 , VAR_373 , VAR_374 + VAR_375 , VAR_376 ) ; if ( VAR_377 < 0 ) return VAR_378 ; VAR_379 += VAR_380 [ VAR_381 METHOD_69 ; goto VAR_382 ; case VAR_383 : if ( METHOD_70 ( VAR_384 <= 0 ) ) goto VAR_385 ; VAR_386 = VAR_387 [ -- VAR_388 METHOD_71 ; VAR_389 |= VAR_390 | VAR_391 ; goto VAR_392 ; default : break ; } METHOD_72 ( "ASN.1decodererror:Foundreservedopcode(%u)pc=%zu\\n" , VAR_393 , VAR_394 ) ; return - VAR_395 ; VAR_396 : VAR_397 = "Dataoverrunerror" ; goto VAR_398 ; VAR_399 : VAR_400 = "Machineoverrunerror" ; goto VAR_401 ; VAR_402 : VAR_403 = "Jumpstackunderflow" ; goto VAR_404 ; VAR_405 : VAR_406 = "Jumpstackoverflow" ; goto VAR_407 ; VAR_408 : VAR_409 = "Consstackunderflow" ; goto VAR_410 ; VAR_411 : VAR_412 = "Consstackoverflow" ; goto VAR_413 ; VAR_414 : VAR_415 = "Conslengtherror" ; goto VAR_416 ; VAR_417 : VAR_418 = "MissingEOCinindefinitelencons" ; goto VAR_419 ; VAR_420 : VAR_421 = "InvalidlengthEOC" ; goto VAR_422 ; VAR_423 : VAR_424 = "Unsupportedlength" ; goto VAR_425 ; VAR_426 : VAR_427 = "Indefinitelenprimitivenotpermitted" ; goto VAR_428 ; VAR_429 : VAR_430 = "Unexpectedtag" ; goto VAR_431 ; VAR_432 : VAR_433 = "Longtagnotsupported" ; VAR_434 : METHOD_73 ( "\\nASN1:%s[m=%zud=%zuot=%02xt=%02xl=%zu]\\n" , VAR_435 , VAR_436 , VAR_437 , VAR_438 , VAR_439 , VAR_440 ) ; return - VAR_441 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 = METHOD_1 ( ) ;  TYPE_2 * VAR_2 = VAR_3 , * VAR_4 = VAR_5 , * VAR_6 ;  const TYPE_3 * VAR_7 ; TYPE_4 VAR_8 ; if ( ! VAR_9 ) return - VAR_10 ; VAR_11 = METHOD_2 ( VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 ) ; if ( ! VAR_18 ) return - VAR_19 ; METHOD_4 ( VAR_20 , & VAR_21 , & VAR_22 ) ; if ( ! VAR_23 ) { VAR_24 = - VAR_25 ; goto VAR_26 ; }  METHOD_5 ( VAR_27 , "rmdir:verifyingaccessto%s:%s(reqpath%s)\\n" ,  VAR_28 , VAR_29 , VAR_30 ) ; if ( ! METHOD_6 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ) { VAR_36 = - VAR_37 ; goto VAR_38 ; }  if ( ! METHOD_7 ( VAR_39 -> VAR_40 , VAR_41 , VAR_42 , VAR_43 ) ) {  VAR_44 = - VAR_45 ; goto VAR_46 ; }  if ( ! METHOD_8 ( VAR_47 , VAR_48 ) ) {  VAR_49 = - VAR_50 ; goto VAR_51 ; } VAR_52 = 0 ; VAR_53 : METHOD_9 ( VAR_54 ) ;  return VAR_55 ;  }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_0 VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_4 * VAR_5 , * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 ; unsigned TYPE_4 VAR_12 ; TYPE_5 VAR_13 ; METHOD_2 ( ) ; VAR_14 = METHOD_3 ( STRUCT_OR_UNION_7 , VAR_15 , VAR_16 , VAR_17 , VAR_18 ) ; if ( VAR_19 && VAR_20 -> VAR_21 && VAR_22 -> VAR_23 != & VAR_24 && VAR_25 == VAR_26 && ! VAR_27 ) { VAR_28 = VAR_29 ; VAR_30 = VAR_31 -> VAR_32 ; } METHOD_4 ( ) ; if ( VAR_33 ) goto VAR_34 ; VAR_35 = METHOD_5 ( VAR_36 , VAR_37 ) ; if ( ! VAR_38 ) { VAR_39 = METHOD_6 ( - VAR_40 ) ; goto VAR_41 ; } METHOD_7 ( & VAR_42 -> VAR_43 ) ; VAR_44 -> VAR_45 = VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; METHOD_8 ( & VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = 1 ; METHOD_9 ( VAR_54 , STRUCT_OR_UNION_8 ) ; METHOD_10 ( & VAR_55 -> VAR_56 ) ; METHOD_11 ( & VAR_57 -> VAR_58 ) ; METHOD_12 ( & VAR_59 -> VAR_60 ) ; VAR_61 = METHOD_13 ( VAR_62 ) ; if ( VAR_63 ) { METHOD_14 ( VAR_64 , VAR_65 ) ; VAR_66 = METHOD_15 ( VAR_67 ) ; goto VAR_68 ; } VAR_69 = METHOD_16 ( STRUCT_OR_UNION_9 , VAR_70 ) ; if ( VAR_71 ) { METHOD_17 ( VAR_72 ) ; VAR_73 -> VAR_74 = 1 ; if ( VAR_75 && VAR_76 -> VAR_77 ) { VAR_78 = & VAR_79 ; }  }  if ( VAR_80 == VAR_81 ) { METHOD_18 ( VAR_82 , VAR_83 ) ; VAR_84 = METHOD_19 ( - VAR_85 ) ; goto VAR_86 ; } VAR_87 -> VAR_88 = VAR_89 ; VAR_90 = VAR_91 -> METHOD_20 ( VAR_92 , VAR_93 ) ; if ( VAR_94 ) { METHOD_21 ( VAR_95 , VAR_96 ) ; VAR_97 = METHOD_22 ( VAR_98 ) ; goto VAR_99 ; } METHOD_23 ( & VAR_100 -> VAR_101 , VAR_102 ) ; VAR_103 -> VAR_104 = 0 ; VAR_105 -> VAR_106 = ( VAR_107 ? 1 : 0 ) ; VAR_108 -> VAR_109 = 0 ; METHOD_24 ( & VAR_110 -> VAR_111 , VAR_112 ) ; METHOD_25 ( & VAR_113 -> VAR_114 , VAR_115 ) ; METHOD_26 ( & VAR_116 -> VAR_117 , VAR_118 ) ; METHOD_27 ( & VAR_119 -> VAR_120 , VAR_121 ) ; METHOD_28 ( & VAR_122 -> VAR_123 ) ; VAR_124 -> VAR_125 = 0 ; METHOD_29 ( "allocatedconn%pfor%pI4->%pI4over%s%s\\n" , VAR_126 , & VAR_127 , & VAR_128 , VAR_129 -> VAR_130 ? VAR_131 -> VAR_132 : "[unknown]" , VAR_133 ? "(outgoing)" : "" ) ; METHOD_30 ( & VAR_134 , VAR_135 ) ; if ( VAR_136 ) { if ( VAR_137 -> VAR_138 ) { VAR_139 -> METHOD_31 ( VAR_140 -> VAR_141 ) ; METHOD_32 ( VAR_142 , VAR_143 ) ; VAR_144 = VAR_145 -> VAR_146 ; } else { VAR_147 -> VAR_148 = VAR_149 ; METHOD_33 ( VAR_150 ) ; VAR_151 ++ ; } } else { struct STRUCT_OR_UNION_10 * VAR_152 ; VAR_153 = METHOD_34 ( STRUCT_OR_UNION_11 , VAR_154 , VAR_155 , VAR_156 , VAR_157 ) ; if ( VAR_158 ) { VAR_159 -> METHOD_35 ( VAR_160 -> VAR_161 ) ; METHOD_36 ( VAR_162 , VAR_163 ) ; VAR_164 = VAR_165 ; } else { METHOD_37 ( & VAR_166 -> VAR_167 , VAR_168 ) ; METHOD_38 ( VAR_169 ) ; VAR_170 ++ ; } } METHOD_39 ( & VAR_171 , VAR_172 ) ; VAR_173 : return VAR_174 ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 * VAR_2 ) {  if ( * VAR_3 >= 107 && VAR_4 [ 104 ] == 0x26 && VAR_5 [ 105 ] == 0x80 &&  VAR_6 [ 106 ] == 0x03 ) { METHOD_1 ( VAR_7 , "fixingupSunplusWirelessDesktopreportdescriptor\\n" ) ; VAR_8 [ 105 ] = VAR_9 [ 110 ] = 0x03 ; VAR_10 [ 106 ] = VAR_11 [ 111 ] = 0x21 ; } return VAR_12 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { const TYPE_6 * VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 = 0 ; const TYPE_11 VAR_10 [ ] = { 0xAA , 0xAA , 0x03 , 0x00 , 0x00 , 0x00 , 0x88 , 0x8E } ; const TYPE_12 VAR_11 [ ] = { 0xAA , 0xAA , 0x03 , 0x00 , 0x19 , 0x58 , 0x00 , 0x03 } ; const TYPE_13 VAR_12 [ ] = { 0xAA , 0xAA , 0x03 , 0x00 , 0x00 , 0x00 , 0x89 , 0x0D , 0x02 , 0X0C } ; const TYPE_14 * VAR_13 ; TYPE_15 TYPE_16 TYPE_17 255 VAR_14 VAR_15 [ TYPE_18 ] ; METHOD_1 ( "AirPDcapScanForKeys" ) ; VAR_16 = VAR_17 ; if ( METHOD_2 ( VAR_18 + VAR_19 , VAR_20 , 8 ) == 0 || METHOD_3 ( VAR_21 + VAR_22 , VAR_23 , 8 ) == 0 ) { METHOD_4 ( "AirPDcapScanForKeys" , "Authentication:EAPOLpacket" , VAR_24 ) ; VAR_25 += 8 ; if ( VAR_26 [ VAR_27 + 1 ] != 3 ) { METHOD_5 ( "AirPDcapScanForKeys" , "NotEAPOL-Key" , VAR_28 ) ; return VAR_29 ; } VAR_30 = METHOD_6 ( VAR_31 + VAR_32 + 2 ) ;  if ( ( VAR_33 - VAR_34 - 4 ) < VAR_35 ) {  METHOD_7 ( "AirPDcapScanForKeys" , "EAPOLbodytooshort" , VAR_36 ) ; return VAR_37 ; } VAR_38 += 4 ; VAR_39 = ( const TYPE_19 * ) ( VAR_40 + VAR_41 ) ; if ( VAR_42 -> VAR_43 != VAR_44 && VAR_45 -> VAR_46 != VAR_47 ) { METHOD_8 ( "AirPDcapScanForKeys" , "Notvalidkeydescriptortype" , VAR_48 ) ; return VAR_49 ; } VAR_50 += 1 ; VAR_51 = METHOD_9 ( VAR_52 , & VAR_53 ) ; if ( VAR_54 == VAR_55 ) { METHOD_10 ( "AirPDcapScanForKeys" , "NoSAforBSSIDfound" , VAR_56 ) ; return VAR_57 ; } if ( METHOD_11 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) == VAR_63 ) return VAR_64 ; if ( VAR_65 + VAR_66 > VAR_67 ) { METHOD_12 ( "AirPDcapScanForKeys" , "MessagetooshortforGroupKey" , VAR_68 ) ; return VAR_69 ; } if ( METHOD_13 ( VAR_70 [ VAR_71 + 1 ] ) != 0 || METHOD_14 ( VAR_72 [ VAR_73 + 1 ] ) != 1 || METHOD_15 ( VAR_74 [ VAR_75 ] ) != 1 || METHOD_16 ( VAR_76 [ VAR_77 ] ) != 1 ) { METHOD_17 ( "AirPDcapScanForKeys" , "KeybitfieldsnotcorrectforGroupKey" , VAR_78 ) ; return VAR_79 ; } METHOD_18 ( VAR_80 . VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 = METHOD_19 ( VAR_85 , & VAR_86 ) ; if ( VAR_87 == VAR_88 ) { return VAR_89 ; } if ( ( VAR_90 = METHOD_20 ( ( const TYPE_20 * ) ( VAR_91 ) ) ) != VAR_92 ) { METHOD_21 ( VAR_93 . VAR_94 , VAR_95 , VAR_96 ) ; TYPE_21 TYPE_22 VAR_97 ( VAR_98 , TYPE_23 , "ST_MAC:%2X.%2X.%2X.%2X.%2X.%2X\\t" , VAR_99 . VAR_100 [ 0 ] , VAR_101 . VAR_102 [ 1 ] , VAR_103 . VAR_104 [ 2 ] , VAR_105 . VAR_106 [ 3 ] , VAR_107 . VAR_108 [ 4 ] , VAR_109 . VAR_110 [ 5 ] ) ; METHOD_22 ( "AirPDcapScanForKeys" , VAR_111 , VAR_112 ) ; } else { METHOD_23 ( "AirPDcapScanForKeys" , "SAnotfound" , VAR_113 ) ; return VAR_114 ; } VAR_115 = METHOD_24 ( VAR_116 , & VAR_117 ) ; if ( VAR_118 == VAR_119 ) { return VAR_120 ; } return ( METHOD_25 ( VAR_121 , VAR_122 -> VAR_123 . VAR_124 + 16 , VAR_125 , VAR_126 - VAR_127 + 1 ) ) ; } else if ( METHOD_26 ( VAR_128 + VAR_129 , VAR_130 , 10 ) == 0 ) { const TYPE_24 * VAR_131 , * VAR_132 ; TYPE_25 VAR_133 ; TYPE_26 VAR_134 , VAR_135 = 0 , VAR_136 = 0 , VAR_137 = 0 , VAR_138 = 0 ; METHOD_27 ( "AirPDcapScanForKeys" , "Authentication:TDLSActionFrame" , VAR_139 ) ; VAR_140 += 10 ; VAR_141 = VAR_142 [ VAR_143 ] ; if ( VAR_144 != 1 && VAR_145 != 2 ) { METHOD_28 ( "AirPDcapScanForKeys" , "NotResponsenorconfirm" , VAR_146 ) ; return VAR_147 ; } VAR_148 ++ ; VAR_149 = METHOD_29 ( VAR_150 + VAR_151 ) ; if ( VAR_152 != 0 ) { METHOD_30 ( "AirPDcapScanForKeys" , "TDLSsetupnotsuccessfull" , VAR_153 ) ; return VAR_154 ; } VAR_155 += 5 ; while ( VAR_156 < ( VAR_157 - 2 ) ) { if ( VAR_158 [ VAR_159 ] == 48 ) { VAR_160 = VAR_161 ; } else if ( VAR_162 [ VAR_163 ] == 55 ) { VAR_164 = VAR_165 ; } else if ( VAR_166 [ VAR_167 ] == 56 ) { VAR_168 = VAR_169 ; } else if ( VAR_170 [ VAR_171 ] == 101 ) { VAR_172 = VAR_173 ; } if ( VAR_174 < VAR_175 + VAR_176 [ VAR_177 + 1 ] + 2 ) { return VAR_178 ; } VAR_179 += VAR_180 [ VAR_181 + 1 ] + 2 ; } if ( VAR_182 == 0 || VAR_183 == 0 || VAR_184 == 0 || VAR_185 == 0 ) { METHOD_31 ( "AirPDcapScanForKeys" , "CannotFindallnecessaryIEs" , VAR_186 ) ; return VAR_187 ; } METHOD_32 ( "AirPDcapScanForKeys" , "FoundRSNE/FastBSS/TimeoutInterval/LinkIEs" , VAR_188 ) ; VAR_189 = & VAR_190 [ VAR_191 + 8 ] ; VAR_192 = & VAR_193 [ VAR_194 + 14 ] ; if ( METHOD_33 ( VAR_195 , VAR_196 , VAR_197 ) < 0 ) { METHOD_34 ( VAR_198 . VAR_199 , VAR_200 , VAR_201 ) ; METHOD_35 ( VAR_202 . VAR_203 , VAR_204 , VAR_205 ) ; } else { METHOD_36 ( VAR_206 . VAR_207 , VAR_208 , VAR_209 ) ; METHOD_37 ( VAR_210 . VAR_211 , VAR_212 , VAR_213 ) ; } VAR_214 = METHOD_38 ( VAR_215 , & VAR_216 ) ; if ( VAR_217 == VAR_218 ) { return VAR_219 ; } if ( VAR_220 -> VAR_221 ) { if ( METHOD_39 ( VAR_222 -> VAR_223 . VAR_224 , VAR_225 + VAR_226 + 52 , VAR_227 ) == 0 ) { return VAR_228 ; } else { TYPE_27 * VAR_229 = METHOD_40 ( TYPE_28 , 1 ) ; METHOD_41 ( VAR_230 , VAR_231 , sizeof ( TYPE_29 ) ) ; VAR_232 -> VAR_233 = VAR_234 ; VAR_235 -> VAR_236 = VAR_237 ; } } if ( METHOD_42 ( VAR_238 , VAR_239 , VAR_240 , VAR_241 , VAR_242 , VAR_243 , VAR_244 ) == VAR_245 ) { METHOD_43 ( "AirPDcapScanForKeys" ) ; return VAR_246 ; } } else { METHOD_44 ( "AirPDcapScanForKeys" , "Skipping:notanEAPOLpacket" , VAR_247 ) ; } METHOD_45 ( "AirPDcapScanForKeys" ) ; return VAR_248 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; unsigned TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 , VAR_5 ; unsigned TYPE_5 VAR_6 ; unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 = 1 ; METHOD_1 ( & VAR_10 , VAR_11 ) ; VAR_12 = METHOD_2 ( ) ; if ( METHOD_3 ( ~ VAR_13 & VAR_14 ) ) { METHOD_4 ( & VAR_15 , VAR_16 ) ; if ( VAR_17 ) METHOD_5 ( "Interrupt%d,withoutanydata\\n" , VAR_18 ) ; VAR_19 = 0 ; goto VAR_20 ; } VAR_21 = METHOD_6 ( ) ; if ( VAR_22 && ( VAR_23 & VAR_24 ) ) { static unsigned TYPE_9 VAR_25 ; static unsigned TYPE_10 VAR_26 ; VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) { METHOD_7 ( "MUXerror,statusis%02x,datais%02x\\n" , VAR_30 , VAR_31 ) ; switch ( VAR_32 ) { default : if ( METHOD_8 ( VAR_33 , VAR_34 + VAR_35 / 10 ) ) { VAR_36 = VAR_37 ; break ; } case 0xfc : case 0xfd : case 0xfe : VAR_38 = VAR_39 ; VAR_40 = 0xfe ; break ; case 0xff : VAR_41 = VAR_42 ; VAR_43 = 0xfe ; break ; } } VAR_44 = VAR_45 + ( ( VAR_46 >> 6 ) & 3 ) ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 ; } else { VAR_51 = ( ( VAR_52 & VAR_53 ) ? VAR_54 : 0 ) | ( ( VAR_55 & VAR_56 && ! VAR_57 ) ? VAR_58 : 0 ) ; VAR_59 = ( VAR_60 & VAR_61 ) ? VAR_62 : VAR_63 ; } VAR_64 = & VAR_65 [ VAR_66 ] ; STRUCT_OR_UNION_3 = VAR_67 -> VAR_68 ? VAR_69 -> STRUCT_OR_UNION_4 : VAR_70 ; METHOD_9 ( VAR_71 -> VAR_72 , VAR_73 , "<-i8042(interrupt,%d,%d%s%s)\\n" , VAR_74 , VAR_75 , VAR_76 & VAR_77 ? ",badparity" : "" , VAR_78 & VAR_79 ? ",timeout" : "" ) ; VAR_80 = METHOD_10 ( VAR_81 , VAR_82 , STRUCT_OR_UNION_5 ) ; METHOD_11 ( & VAR_83 , VAR_84 ) ;  if ( METHOD_12 ( VAR_85 -> VAR_86 && ! VAR_87 ) )  METHOD_13 ( STRUCT_OR_UNION_6 , VAR_88 , VAR_89 ) ; VAR_90 : return METHOD_14 ( VAR_91 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { register const TYPE_5 * VAR_5 ; register TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; VAR_8 = ( VAR_9 == VAR_10 ) ; if ( ! VAR_11 && VAR_12 < VAR_13 ) VAR_14 = VAR_15 [ VAR_16 ] ; METHOD_1 ( ( VAR_17 , "%s" , METHOD_2 ( VAR_18 , "proc-%u" , VAR_19 ) ) ) ; switch ( VAR_20 ) { case VAR_21 : VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 != VAR_27 && METHOD_4 ( VAR_28 , VAR_29 , ! VAR_30 -> VAR_31 , VAR_32 ) != 0 ) return ; break ; case VAR_33 : if ( ! ( VAR_34 = METHOD_5 ( VAR_35 , VAR_36 , VAR_37 ) ) ) return ; if ( VAR_38 ) { if ( METHOD_6 ( VAR_39 , VAR_40 , VAR_41 -> VAR_42 ) ) return ; } else { if ( METHOD_7 ( VAR_43 , VAR_44 , ! VAR_45 -> VAR_46 , 0 ) != 0 ) return ; } break ; case VAR_47 : if ( ! ( VAR_48 = METHOD_8 ( VAR_49 , VAR_50 , VAR_51 ) ) ) break ; if ( VAR_52 ) { if ( ! ( VAR_53 = METHOD_9 ( VAR_54 , VAR_55 , & VAR_56 ) ) ) break ; if ( VAR_57 ) { if ( VAR_58 -> VAR_59 > 1 ) { METHOD_10 ( ( VAR_60 , "postdattr:" ) ) ; VAR_61 = METHOD_11 ( VAR_62 , VAR_63 , VAR_64 -> VAR_65 ) ; } } else { if ( ! ( VAR_66 = METHOD_12 ( VAR_67 , VAR_68 , VAR_69 ) ) ) break ; if ( ( VAR_70 = METHOD_13 ( VAR_71 , VAR_72 , VAR_73 -> VAR_74 ) ) && VAR_75 -> VAR_76 > 1 ) { METHOD_14 ( ( VAR_77 , "postdattr:" ) ) ; VAR_78 = METHOD_15 ( VAR_79 , VAR_80 , VAR_81 -> VAR_82 ) ; } } if ( VAR_83 ) return ; } else { if ( METHOD_16 ( VAR_84 , VAR_85 ) != 0 ) return ; } break ; case VAR_86 : if ( ! ( VAR_87 = METHOD_17 ( VAR_88 , VAR_89 , VAR_90 ) ) ) break ; if ( ! ( VAR_91 = METHOD_18 ( VAR_92 , VAR_93 , & VAR_94 ) ) ) break ; if ( VAR_95 -> VAR_96 ) METHOD_19 ( ( VAR_97 , "attr:" ) ) ; if ( ! ( VAR_98 = METHOD_20 ( VAR_99 , VAR_100 , VAR_101 -> VAR_102 ) ) ) break ; if ( ! VAR_103 )  METHOD_21 ( ( VAR_104 , "c%04x" , METHOD_22 ( & VAR_105 [ 0 ] ) ) ) ;  return ; case VAR_106 : VAR_107 = METHOD_23 ( VAR_108 , VAR_109 , VAR_110 ) ; if ( VAR_111 != VAR_112 && METHOD_24 ( VAR_113 , VAR_114 , VAR_115 ) != 0 ) return ; break ; case VAR_116 : if ( ! ( VAR_117 = METHOD_25 ( VAR_118 , VAR_119 , VAR_120 ) ) ) break ; if ( VAR_121 ) { if ( ! ( VAR_122 = METHOD_26 ( VAR_123 , VAR_124 , & VAR_125 ) ) ) break ; if ( ! ( VAR_126 = METHOD_27 ( VAR_127 , VAR_128 , VAR_129 -> VAR_130 ) ) ) break ; if ( VAR_131 ) return ; if ( VAR_132 -> VAR_133 ) { METHOD_28 ( VAR_134 [ 1 ] ) ; METHOD_29 ( ( VAR_135 , "%ubytes" , METHOD_30 ( & VAR_136 [ 0 ] ) ) ) ; if ( METHOD_31 ( & VAR_137 [ 1 ] ) ) METHOD_32 ( ( VAR_138 , "EOF" ) ) ; } return ; } else { if ( METHOD_33 ( VAR_139 , VAR_140 , VAR_141 -> VAR_142 , 0 ) != 0 ) return ; } break ; case VAR_143 : if ( ! ( VAR_144 = METHOD_34 ( VAR_145 , VAR_146 , VAR_147 ) ) ) break ; if ( VAR_148 ) { if ( ! ( VAR_149 = METHOD_35 ( VAR_150 , VAR_151 , & VAR_152 ) ) ) break ; if ( ! ( VAR_153 = METHOD_36 ( VAR_154 , VAR_155 , VAR_156 -> VAR_157 ) ) ) break ; if ( VAR_158 ) return ; if ( VAR_159 -> VAR_160 ) { METHOD_37 ( VAR_161 [ 0 ] ) ; METHOD_38 ( ( VAR_162 , "%ubytes" , METHOD_39 ( & VAR_163 [ 0 ] ) ) ) ; if ( VAR_164 -> VAR_165 > 1 ) { METHOD_40 ( VAR_166 [ 1 ] ) ; METHOD_41 ( ( VAR_167 , "<%s>" , METHOD_42 ( VAR_168 , VAR_169 , METHOD_43 ( & VAR_170 [ 1 ] ) ) ) ) ; } return ; } } else { if ( METHOD_44 ( VAR_171 , VAR_172 , VAR_173 -> VAR_174 , VAR_175 ) != 0 ) return ; } break ; case VAR_176 : case VAR_177 : if ( ! ( VAR_178 = METHOD_45 ( VAR_179 , VAR_180 , VAR_181 ) ) ) break ; if ( VAR_182 ) { if ( METHOD_46 ( VAR_183 , VAR_184 , VAR_185 -> VAR_186 ) != VAR_187 ) return ; } else { if ( METHOD_47 ( VAR_188 , VAR_189 ) != 0 ) return ; } break ; case VAR_190 : if ( ! ( VAR_191 = METHOD_48 ( VAR_192 , VAR_193 , VAR_194 ) ) ) break ; if ( VAR_195 ) { if ( METHOD_49 ( VAR_196 , VAR_197 , VAR_198 -> VAR_199 ) != VAR_200 ) return ; } else { if ( METHOD_50 ( VAR_201 , VAR_202 , & VAR_203 ) != VAR_204 ) return ; } break ; case VAR_205 : if ( ! ( VAR_206 = METHOD_51 ( VAR_207 , VAR_208 , VAR_209 ) ) ) break ; if ( METHOD_52 ( VAR_210 , VAR_211 , VAR_212 -> VAR_213 ) != VAR_214 ) return ; break ; case VAR_215 : case VAR_216 : if ( ! ( VAR_217 = METHOD_53 ( VAR_218 , VAR_219 , VAR_220 ) ) ) break ; if ( VAR_221 ) { if ( METHOD_54 ( VAR_222 , VAR_223 , VAR_224 -> VAR_225 ) ) return ; } else { if ( METHOD_55 ( VAR_226 , VAR_227 , & VAR_228 ) != VAR_229 ) return ; } break ; case VAR_230 : if ( ! ( VAR_231 = METHOD_56 ( VAR_232 , VAR_233 , VAR_234 ) ) ) break ; if ( VAR_235 ) { if ( ! ( VAR_236 = METHOD_57 ( VAR_237 , VAR_238 , & VAR_239 ) ) ) break ; if ( VAR_240 -> VAR_241 ) { METHOD_58 ( ( VAR_242 , "from:" ) ) ; if ( ! ( VAR_243 = METHOD_59 ( VAR_244 , VAR_245 , VAR_246 -> VAR_247 ) ) ) break ; METHOD_60 ( ( VAR_248 , "to:" ) ) ; if ( ! ( VAR_249 = METHOD_61 ( VAR_250 , VAR_251 , VAR_252 -> VAR_253 ) ) ) break ; } return ; } else { if ( METHOD_62 ( VAR_254 , VAR_255 , & VAR_256 ) != VAR_257 ) return ; } break ; case VAR_258 : if ( ! ( VAR_259 = METHOD_63 ( VAR_260 , VAR_261 , VAR_262 ) ) ) break ; if ( VAR_263 ) { if ( ! ( VAR_264 = METHOD_64 ( VAR_265 , VAR_266 , & VAR_267 ) ) ) break ; if ( VAR_268 -> VAR_269 ) { METHOD_65 ( ( VAR_270 , "filePOST:" ) ) ; if ( ! ( VAR_271 = METHOD_66 ( VAR_272 , VAR_273 , VAR_274 -> VAR_275 ) ) ) break ; METHOD_67 ( ( VAR_276 , "dir:" ) ) ; if ( ! ( VAR_277 = METHOD_68 ( VAR_278 , VAR_279 , VAR_280 -> VAR_281 ) ) ) break ; return ; } } else { if ( METHOD_69 ( VAR_282 , VAR_283 , & VAR_284 ) != VAR_285 ) return ; } break ; case VAR_286 : if ( ! ( VAR_287 = METHOD_70 ( VAR_288 , VAR_289 , VAR_290 ) ) ) break ; if ( VAR_291 ) { if ( METHOD_71 ( VAR_292 , VAR_293 , VAR_294 -> VAR_295 ) ) return ; } else { if ( METHOD_72 ( VAR_296 , VAR_297 ) != 0 ) return ; } break ; case VAR_298 : if ( ! ( VAR_299 = METHOD_73 ( VAR_300 , VAR_301 , VAR_302 ) ) ) break ; if ( METHOD_74 ( VAR_303 , VAR_304 , VAR_305 -> VAR_306 ) ) return ; break ; case VAR_307 : VAR_308 = METHOD_75 ( VAR_309 , VAR_310 , VAR_311 ) ; if ( VAR_312 != VAR_313 && METHOD_76 ( VAR_314 , VAR_315 , VAR_316 ) != 0 ) return ; break ; case VAR_317 : VAR_318 = METHOD_77 ( VAR_319 , VAR_320 , VAR_321 ) ; if ( VAR_322 != VAR_323 && METHOD_78 ( VAR_324 , VAR_325 ) != 0 ) return ; break ; case VAR_326 : VAR_327 = METHOD_79 ( VAR_328 , VAR_329 , VAR_330 ) ; if ( VAR_331 != VAR_332 && METHOD_80 ( VAR_333 , VAR_334 ) != 0 ) return ; break ; case VAR_335 : VAR_336 = METHOD_81 ( VAR_337 , VAR_338 , VAR_339 ) ; if ( VAR_340 != VAR_341 && METHOD_82 ( VAR_342 , VAR_343 , VAR_344 -> VAR_345 ) != 0 ) return ; break ; default : return ; } VAR_346 : if ( ! VAR_347 ) METHOD_83 ( ( VAR_348 , "%s" , VAR_349 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,   TYPE_3 VAR_2 , TYPE_4 * VAR_3 ,  TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 = 0 , VAR_7 = 0 ; TYPE_7 VAR_8 = 0 , VAR_9 = 0 , VAR_10 = 0 ; unsigned TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; if ( VAR_13 [ 0 ] == '.' && ( VAR_14 == 1 || ( VAR_15 == 2 && VAR_16 [ 1 ] == '.' ) ) ) { VAR_17 = 1 ; VAR_18 = VAR_19 ; METHOD_1 ( VAR_20 , VAR_21 , VAR_22 ) ; } else { for ( VAR_23 = 0 ; VAR_24 < VAR_25 ; VAR_26 ++ ) { VAR_27 = VAR_28 [ VAR_29 ] ; if ( VAR_30 == '/' || VAR_31 == 0 ) { VAR_32 = 1 ; VAR_33 = VAR_34 ; while ( VAR_35 + 1 < VAR_36 && ( VAR_37 [ VAR_38 + 1 ] == '/' || VAR_39 [ VAR_40 + 1 ] == 0 ) ) VAR_41 ++ ; } if ( VAR_42 == VAR_43 && ( VAR_44 - VAR_45 - 1 ) <= VAR_46 ) { if ( VAR_47 == VAR_48 + 1 ) VAR_49 = 0 ; else { VAR_50 = 1 ; VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; } }  if ( VAR_55 < 256 )  VAR_56 [ VAR_57 ++ ] = VAR_58 ; else VAR_59 = 1 ; } } if ( VAR_60 ) { TYPE_10 VAR_61 [ VAR_62 ] ; TYPE_11 VAR_63 = 0 ; if ( VAR_64 ) { TYPE_12 VAR_65 ; for ( VAR_66 = 0 ; VAR_67 < VAR_68 && VAR_69 + VAR_70 + 1 < VAR_71 ; VAR_72 ++ ) { VAR_73 = VAR_74 [ VAR_75 + VAR_76 + 1 ] ; if ( VAR_77 == '/' || VAR_78 == 0 ) { VAR_79 = 1 ; VAR_80 = VAR_81 ; while ( VAR_82 + VAR_83 + 2 < VAR_84 && ( VAR_85 + 1 < VAR_86 && ( VAR_87 [ VAR_88 + VAR_89 + 2 ] == '/' || VAR_90 [ VAR_91 + VAR_92 + 2 ] == 0 ) ) ) VAR_93 ++ ; } VAR_94 [ VAR_95 ++ ] = VAR_96 ; }  VAR_97 = 250 - VAR_98 ;  if ( VAR_99 > VAR_100 ) VAR_101 = VAR_102 ; else VAR_103 = VAR_104 ;  } else if ( VAR_105 > 250 )  VAR_106 = 250 ; VAR_107 [ VAR_108 ++ ] = VAR_109 ; VAR_110 = METHOD_2 ( 0 , VAR_111 , VAR_112 ) ; VAR_113 [ VAR_114 ++ ] = METHOD_3 ( VAR_115 >> 8 ) ; VAR_116 [ VAR_117 ++ ] = METHOD_4 ( VAR_118 >> 8 ) ; VAR_119 [ VAR_120 ++ ] = METHOD_5 ( VAR_121 ) ; VAR_122 [ VAR_123 ++ ] = METHOD_6 ( VAR_124 ) ; if ( VAR_125 ) { VAR_126 [ VAR_127 ++ ] = VAR_128 ; for ( VAR_129 = 0 ; VAR_130 < VAR_131 ; VAR_132 ++ ) VAR_133 [ VAR_134 ++ ] = VAR_135 [ VAR_136 ] ; } } return VAR_137 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 ,   TYPE_3 * * VAR_2 ,  TYPE_4 * VAR_3 , TYPE_5 ( * VAR_4 ) [ 2 ] , TYPE_6 * VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 ) {  const TYPE_10 * const VAR_9 = & VAR_10 -> VAR_11 ;  const TYPE_11 VAR_12 = VAR_13 -> VAR_14 ; TYPE_12 VAR_15 , VAR_16 ; const TYPE_13 VAR_17 = VAR_18 [ VAR_19 ] , VAR_20 = VAR_21 / 2 ; if ( VAR_22 >= VAR_23 -> VAR_24 || VAR_25 >= VAR_26 -> VAR_27 ) return ;  VAR_28 = VAR_29 [ VAR_30 [ 0 ] -> VAR_31 . VAR_32 ] ;   VAR_33 = VAR_34 [ VAR_35 [ 0 ] -> VAR_36 . VAR_37 ] ;  if ( VAR_38 == VAR_39 && VAR_40 == VAR_41 ) {  METHOD_1 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ,  VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; } else if ( VAR_52 == VAR_53 && VAR_54 < VAR_55 ) {  METHOD_2 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 ,  VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 ) ;  METHOD_3 ( VAR_66 , VAR_67 , VAR_68 + VAR_69 * VAR_70 , VAR_71 ,  VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 + VAR_77 , VAR_78 ) ; } else if ( VAR_79 < VAR_80 && VAR_81 == VAR_82 ) {  METHOD_4 ( VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ,  VAR_88 , VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ;  METHOD_5 ( VAR_93 , VAR_94 , VAR_95 + VAR_96 ,  VAR_97 , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 + VAR_104 ) ; } else { const TYPE_14 VAR_105 = VAR_106 [ VAR_107 ] [ VAR_108 ] ; TYPE_15 VAR_109 ; METHOD_6 ( VAR_110 < VAR_111 && VAR_112 < VAR_113 ) ; for ( VAR_114 = 0 ; VAR_115 < 4 ; VAR_116 ++ ) { const TYPE_16 VAR_117 = VAR_118 * ( VAR_119 & 1 ) ; const TYPE_17 VAR_120 = VAR_121 * ( VAR_122 >> 1 ) ;  METHOD_7 ( VAR_123 , VAR_124 , & VAR_125 [ VAR_126 * VAR_127 + VAR_128 ] ,  VAR_129 , VAR_130 , VAR_131 , VAR_132 + VAR_133 , VAR_134 + VAR_135 , VAR_136 ) ; } } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 . VAR_2 = VAR_3 ; while ( METHOD_1 ( VAR_4 -> VAR_5 ) ) { if ( ! ( VAR_6 -> VAR_7 & VAR_8 ) && METHOD_2 ( ) ) break ; if ( VAR_9 -> VAR_10 & VAR_11 ) break ;  if ( VAR_12 -> VAR_13 & VAR_14 ) break ;  if ( ! VAR_15 -> VAR_16 ) { if ( VAR_17 -> VAR_18 [ 0 ] == '*' ) { VAR_19 -> VAR_20 = VAR_21 ; } else { VAR_22 -> VAR_23 = VAR_24 ; } } if ( VAR_25 -> VAR_26 == VAR_27 ) { if ( METHOD_3 ( VAR_28 ) != VAR_29 ) break ; } else if ( VAR_30 -> VAR_31 == VAR_32 ) { if ( METHOD_4 ( VAR_33 ) != VAR_34 ) break ; } else { METHOD_5 ( "Unknownrequesttype" ) ; } if ( VAR_35 -> VAR_36 == 0 ) { METHOD_6 ( VAR_37 ) ; } else { if ( METHOD_7 ( VAR_38 ) == VAR_39 ) METHOD_8 ( VAR_40 ) ; if ( VAR_41 . VAR_42 == VAR_43 ) break ; } } VAR_44 . VAR_45 = VAR_46 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ; TYPE_2 VAR_5 = VAR_6 -> VAR_7 ; unsigned VAR_8 = VAR_9 -> VAR_10 >> VAR_11 -> VAR_12 -> VAR_13 ; TYPE_3 VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 ) -> VAR_17 ; TYPE_4 * VAR_18 = VAR_19 ; if ( ( VAR_20 -> VAR_21 & ( 1 << VAR_22 ) ) && ! ( VAR_23 -> VAR_24 & ( 1 << VAR_25 ) ) && ! ( VAR_26 -> VAR_27 & ( 1 << VAR_28 ) ) ) return 0 ; if ( ! VAR_29 -> VAR_30 ) return 0 ; VAR_31 = METHOD_2 ( ) ; METHOD_3 ( ! VAR_32 ) ; VAR_33 . VAR_34 = 0 ;  VAR_35 = VAR_36 ;  if ( VAR_37 -> VAR_38 & ( 1 << VAR_39 ) ) VAR_40 |= VAR_41 ; VAR_42 = METHOD_4 ( VAR_43 , VAR_44 -> VAR_45 , VAR_46 , VAR_47 , & VAR_48 , VAR_49 ) ; if ( VAR_50 < 0 ) { VAR_51 = VAR_52 ; if ( VAR_53 == - VAR_54 ) return 0 ; if ( VAR_55 == - VAR_56 && METHOD_5 ( VAR_57 -> VAR_58 -> VAR_59 ) ) { VAR_60 -> VAR_61 = VAR_62 ; return 0 ; } METHOD_6 ( VAR_63 -> VAR_64 -> VAR_65 , VAR_66 , "delayedblockallocationfailedforinode%luat" "logicaloffset%lluwithmaxblocks%zdwith" "error%d\\n" , VAR_67 -> VAR_68 -> VAR_69 , ( unsigned TYPE_5 TYPE_6 ) VAR_70 , VAR_71 -> VAR_72 >> VAR_73 -> VAR_74 -> VAR_75 , VAR_76 ) ; printk ( VAR_77 "Thisshouldnothappen!!" "Datawillbelost\\n" ) ; if ( VAR_78 == - VAR_79 ) { METHOD_7 ( VAR_80 -> VAR_81 ) ; } METHOD_8 ( VAR_82 , VAR_83 , VAR_84 -> VAR_85 >> VAR_86 -> VAR_87 -> VAR_88 ) ; return VAR_89 ; } METHOD_9 ( VAR_90 == 0 ) ; VAR_91 . VAR_92 = ( VAR_93 << VAR_94 -> VAR_95 -> VAR_96 ) ; if ( METHOD_10 ( & VAR_97 ) ) METHOD_11 ( VAR_98 -> VAR_99 , & VAR_100 ) ; if ( ( VAR_101 -> VAR_102 & ( 1 << VAR_103 ) ) || ( VAR_104 -> VAR_105 & ( 1 << VAR_106 ) ) ) METHOD_12 ( VAR_107 , VAR_108 , & VAR_109 ) ; if ( METHOD_13 ( VAR_110 -> VAR_111 ) ) { VAR_112 = METHOD_14 ( VAR_113 , VAR_114 -> VAR_115 ) ; if ( VAR_116 ) return VAR_117 ; } VAR_118 = ( ( TYPE_7 ) VAR_119 + VAR_120 ) << VAR_121 -> VAR_122 -> VAR_123 ; if ( VAR_124 > METHOD_15 ( VAR_125 -> VAR_126 ) ) VAR_127 = METHOD_16 ( VAR_128 -> VAR_129 ) ; if ( VAR_130 > METHOD_17 ( VAR_131 -> VAR_132 ) -> VAR_133 ) { METHOD_18 ( VAR_134 -> VAR_135 , VAR_136 ) ; return METHOD_19 ( VAR_137 , VAR_138 -> VAR_139 ) ; } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const unsigned TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const unsigned TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ;  TYPE_7 VAR_8 = - 1 ;  VAR_9 = METHOD_1 ( ) ; if ( VAR_10 == VAR_11 ) return ( VAR_12 ) ;  if ( METHOD_2 ( & VAR_13 , & VAR_14 , VAR_15 ) == VAR_16 ) goto VAR_17 ;  VAR_18 = METHOD_3 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ; VAR_23 :  METHOD_4 ( VAR_24 ) ;  return ( VAR_25 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 = METHOD_1 ( 2048 , VAR_4 ) ;  METHOD_2 ( VAR_5 , VAR_6 ) ;   VAR_7 = METHOD_3 ( VAR_8 , VAR_9 ) ;  VAR_10 -> METHOD_4 ( VAR_11 ) ; return VAR_12 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 ) ; if ( VAR_2 -> VAR_3 ) { METHOD_2 ( & VAR_4 -> VAR_5 -> VAR_6 ) ; METHOD_3 ( VAR_7 -> VAR_8 ) ; }  METHOD_4 ( VAR_9 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const struct STRUCT_OR_UNION_0 * VAR_3 , struct STRUCT_OR_UNION_1 * * VAR_4 ) { TYPE_4 VAR_5 = VAR_6 ; TYPE_5 VAR_7 = 0 ; struct STRUCT_OR_UNION_2 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 = VAR_13 ; METHOD_1 ( VAR_14 ) ; if ( VAR_15 ) * VAR_16 = VAR_17 ; if ( ! VAR_18 ) { VAR_19 = VAR_20 ; METHOD_2 ( VAR_21 ) ; } { TYPE_6 VAR_22 = VAR_23 ; if ( METHOD_3 ( & VAR_24 , VAR_25 , VAR_26 , VAR_27 , & VAR_28 ) != VAR_29 ) { VAR_30 = VAR_31 ; METHOD_4 ( VAR_32 ) ; } if ( ! VAR_33 ) { VAR_34 = VAR_35 ; goto VAR_36 ; } } for ( ; ; ) { TYPE_7 VAR_37 = 0 ;  TYPE_8 VAR_38 = 0 ;   if ( ! ( VAR_39 = METHOD_5 ( 1 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ) )  { VAR_40 = VAR_41 ; goto VAR_42 ; } if ( METHOD_6 ( & VAR_43 , VAR_44 ,  & VAR_45 -> VAR_46 ,   & VAR_47 -> VAR_48 ,   & VAR_49 -> VAR_50 ,   & VAR_51 -> VAR_52 ,  VAR_53 -> VAR_54 ,  & VAR_55 -> VAR_56 ,  VAR_57 ,  VAR_58 ,  & VAR_59 , VAR_60 ) != VAR_61 ) { VAR_62 = VAR_63 ; METHOD_7 ( VAR_64 ) ; } if ( VAR_65 == 1 ) break ; if ( VAR_66 != - 1 || VAR_67 != VAR_68 ) { VAR_69 = VAR_70 ; METHOD_8 ( VAR_71 ) ; }  if ( VAR_72 -> VAR_73 && ! ( VAR_74 -> VAR_75 = METHOD_9 ( 1 , VAR_76 -> VAR_77 ) ) )  { VAR_78 = VAR_79 ; goto VAR_80 ; }  if ( VAR_81 && ! ( VAR_82 -> VAR_83 = METHOD_10 ( 1 , VAR_84 ) ) )  { VAR_85 = VAR_86 ; goto VAR_87 ; }  if ( METHOD_11 (  & VAR_88 , VAR_89 , & VAR_90 -> VAR_91 , & VAR_92 -> VAR_93 , & VAR_94 -> VAR_95 , & VAR_96 -> VAR_97 ,  VAR_98 -> VAR_99 ,  & VAR_100 -> VAR_101 , VAR_102 -> VAR_103 ,  VAR_104 ,  & VAR_105 , VAR_106 -> VAR_107 ) != VAR_108 ) { VAR_109 = VAR_110 ; METHOD_12 ( VAR_111 ) ; }  if ( VAR_112 )  { VAR_113 -> VAR_114 = VAR_115 ; VAR_116 = VAR_117 ; } else { VAR_118 = VAR_119 ; VAR_120 = VAR_121 ; } VAR_122 = VAR_123 ; } if ( VAR_124 ) { TYPE_9 VAR_125 = - 1 ; if ( METHOD_13 ( & VAR_126 , VAR_127 ) != VAR_128 ) { VAR_129 = VAR_130 ; METHOD_14 ( VAR_131 ) ; } VAR_132 = 0 ; if ( VAR_133 != 0 ) { VAR_134 = VAR_135 ; METHOD_15 ( VAR_136 ) ; } } if ( ! VAR_137 ) { VAR_138 = VAR_139 ; METHOD_16 ( VAR_140 ) ; } * VAR_141 = VAR_142 ; VAR_143 = VAR_144 ; VAR_145 = VAR_146 ; VAR_147 = 0 ; VAR_148 : if ( VAR_149 ) { TYPE_10 VAR_150 ; METHOD_17 ( & VAR_151 , VAR_152 ) ; } if ( VAR_153 ) METHOD_18 ( VAR_154 ) ; if ( VAR_155 ) METHOD_19 ( VAR_156 ) ; return VAR_157 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , "\\t" , & VAR_6 ) ; if ( VAR_7 == VAR_8 ) { return ; } if ( VAR_9 == VAR_10 ) else if ( ! METHOD_2 ( VAR_11 , "Basic" ) ) { TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 * VAR_14 ; VAR_15 -> VAR_16 . VAR_17 . VAR_18 = VAR_19 ; VAR_20 = METHOD_3 ( VAR_21 , "\\t" , & VAR_22 ) ; if ( VAR_23 != VAR_24 ) { VAR_25 = METHOD_4 ( VAR_26 , METHOD_5 ( VAR_27 ) , VAR_28 , & VAR_29 ) ; if ( ! VAR_30 ) { VAR_31 [ VAR_32 ] = '\\0' ;  VAR_33 = METHOD_6 ( VAR_34 , ':' ) ;  if ( VAR_35 != VAR_36 ) { * VAR_37 = '\\0' ; METHOD_7 ( VAR_38 -> VAR_39 . VAR_40 . VAR_41 , VAR_42 , VAR_43 ) ; VAR_44 = VAR_45 + 1 ; VAR_46 -> VAR_47 . VAR_48 . VAR_49 = VAR_50 ; } } } METHOD_8 ( "Authorizationheader:\\r\\n" ) ; METHOD_9 ( "username:%s\\r\\n" , VAR_51 -> VAR_52 . VAR_53 . VAR_54 ) ; METHOD_10 ( "password:%s\\r\\n" , VAR_55 -> VAR_56 . VAR_57 . VAR_58 ) ; } if ( VAR_59 == VAR_60 ) else if ( ! METHOD_11 ( VAR_61 , "Digest" ) ) { TYPE_8 VAR_62 ; TYPE_9 * VAR_63 ; TYPE_10 * VAR_64 ; VAR_65 -> VAR_66 . VAR_67 . VAR_68 = VAR_69 ; VAR_70 = METHOD_12 ( VAR_71 , "," , & VAR_72 ) ; while ( VAR_73 != VAR_74 ) {  VAR_75 = METHOD_13 ( VAR_76 , '=' ) ;  if ( VAR_77 != VAR_78 ) { * VAR_79 = '\\0' ; VAR_80 = METHOD_14 ( VAR_81 ) ; VAR_82 = METHOD_15 ( VAR_83 + 1 ) ; VAR_84 = METHOD_16 ( VAR_85 ) ; if ( VAR_86 > 0 && VAR_87 [ VAR_88 - 1 ] == \'\\"\' ) VAR_89 [ VAR_90 - 1 ] = '\\0' ; if ( VAR_91 [ 0 ] == \'\\"\' ) VAR_92 ++ ; if ( ! METHOD_17 ( VAR_93 , "username" ) ) { METHOD_18 ( VAR_94 -> VAR_95 . VAR_96 . VAR_97 , VAR_98 , VAR_99 ) ; } else if ( ! METHOD_19 ( VAR_100 , "realm" ) ) { VAR_101 -> VAR_102 . VAR_103 . VAR_104 = VAR_105 ; } else if ( ! METHOD_20 ( VAR_106 , "nonce" ) ) { VAR_107 -> VAR_108 . VAR_109 . VAR_110 = VAR_111 ; } else if ( ! METHOD_21 ( VAR_112 , "uri" ) ) { VAR_113 -> VAR_114 . VAR_115 . VAR_116 = VAR_117 ; } else if ( ! METHOD_22 ( VAR_118 , "qop" ) ) { VAR_119 -> VAR_120 . VAR_121 . VAR_122 = VAR_123 ; } else if ( ! METHOD_23 ( VAR_124 , "nc" ) ) { VAR_125 -> VAR_126 . VAR_127 . VAR_128 = VAR_129 ; } else if ( ! METHOD_24 ( VAR_130 , "cnonce" ) ) { VAR_131 -> VAR_132 . VAR_133 . VAR_134 = VAR_135 ; } else if ( ! METHOD_25 ( VAR_136 , "response" ) ) { VAR_137 -> VAR_138 . VAR_139 . VAR_140 = VAR_141 ; } else if ( ! METHOD_26 ( VAR_142 , "opaque" ) ) { VAR_143 -> VAR_144 . VAR_145 . VAR_146 = VAR_147 ; } VAR_148 = METHOD_27 ( VAR_149 , "," , & VAR_150 ) ; } } METHOD_28 ( "Authorizationheader:\\r\\n" ) ; METHOD_29 ( "username:%s\\r\\n" , VAR_151 -> VAR_152 . VAR_153 . VAR_154 ) ; METHOD_30 ( "realm:%s\\r\\n" , VAR_155 -> VAR_156 . VAR_157 . VAR_158 ) ; METHOD_31 ( "nonce:%s\\r\\n" , VAR_159 -> VAR_160 . VAR_161 . VAR_162 ) ; METHOD_32 ( "uri:%s\\r\\n" , VAR_163 -> VAR_164 . VAR_165 . VAR_166 ) ; METHOD_33 ( "qop:%s\\r\\n" , VAR_167 -> VAR_168 . VAR_169 . VAR_170 ) ; METHOD_34 ( "nc:%s\\r\\n" , VAR_171 -> VAR_172 . VAR_173 . VAR_174 ) ; METHOD_35 ( "cnonce:%s\\r\\n" , VAR_175 -> VAR_176 . VAR_177 . VAR_178 ) ; METHOD_36 ( "response:%s\\r\\n" , VAR_179 -> VAR_180 . VAR_181 . VAR_182 ) ; METHOD_37 ( "opaque:%s\\r\\n" , VAR_183 -> VAR_184 . VAR_185 . VAR_186 ) ; } else { return ; } if ( VAR_187 == VAR_188 || VAR_189 == VAR_190 ) VAR_191 -> VAR_192 . VAR_193 . VAR_194 = VAR_195 ; if ( VAR_196 -> VAR_197 -> METHOD_38 != VAR_198 ) { VAR_199 -> VAR_200 = VAR_201 -> VAR_202 -> METHOD_39 ( VAR_203 , VAR_204 -> VAR_205 . VAR_206 . VAR_207 , VAR_208 -> VAR_209 . VAR_210 ) ; } else { VAR_211 -> VAR_212 = VAR_213 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; struct STRUCT_OR_UNION_1 VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; unsigned TYPE_5 VAR_6 ; if ( ! METHOD_1 ( VAR_7 , VAR_8 -> VAR_9 , 9 ) ) goto VAR_10 ; VAR_11 -> VAR_12 = ( TYPE_6 ) METHOD_2 ( & VAR_13 -> VAR_14 [ 0 ] ) ; VAR_15 -> VAR_16 = ( TYPE_7 ) METHOD_3 ( & VAR_17 -> VAR_18 [ 2 ] ) ; VAR_19 -> VAR_20 = ( TYPE_8 ) METHOD_4 ( & VAR_21 -> VAR_22 [ 4 ] ) ;  VAR_23 -> VAR_24 = ( TYPE_9 ) METHOD_5 ( & VAR_25 -> VAR_26 [ 6 ] ) ;  VAR_27 -> VAR_28 = ( TYPE_10 ) ( ( VAR_29 -> VAR_30 [ 8 ] >> 6 ) & 0x01 ) ; VAR_31 = ( TYPE_11 ) ( ( VAR_32 -> VAR_33 [ 8 ] >> 7 ) & 0x01 ) ; if ( VAR_34 ) { VAR_35 = ( TYPE_12 ) ( VAR_36 -> VAR_37 [ 8 ] & 0x07 ) ; VAR_38 -> VAR_39 . VAR_40 = 1 << ( 1 + VAR_41 ) ; } if ( VAR_42 ) { if ( ! METHOD_6 ( VAR_43 , & VAR_44 -> VAR_45 ) ) goto VAR_46 ; } if ( VAR_47 -> VAR_48 ) { VAR_49 -> VAR_50 . VAR_51 [ VAR_52 -> VAR_53 ] . VAR_54 = 0 ; } if ( ! METHOD_7 ( VAR_55 , VAR_56 -> VAR_57 , 1 ) ) goto VAR_58 ; VAR_59 = ( unsigned TYPE_13 ) VAR_60 -> VAR_61 [ 0 ] ; if ( VAR_62 < 2 || VAR_63 > 11 ) { METHOD_8 ( VAR_64 -> VAR_65 , "InvalidLZWminimumcodesize" ) ; goto VAR_66 ; } if ( ! METHOD_9 ( VAR_67 ) ) goto VAR_68 ; VAR_69 -> VAR_70 = ( TYPE_14 ) VAR_71 -> VAR_72 * ( TYPE_15 ) VAR_73 -> VAR_74 ; if ( ! METHOD_10 ( VAR_75 ) ) goto VAR_76 ; METHOD_11 ( & VAR_77 , VAR_78 ) ; METHOD_12 ( & VAR_79 ) ; while ( 1 ) { if ( ! METHOD_13 ( VAR_80 , VAR_81 -> VAR_82 , 1 ) ) goto VAR_83 ; VAR_84 = ( TYPE_16 ) VAR_85 -> VAR_86 [ 0 ] ; if ( VAR_87 == 0 ) break ; if ( ! METHOD_14 ( VAR_88 , VAR_89 -> VAR_90 , VAR_91 ) ) goto VAR_92 ; if ( ! METHOD_15 ( VAR_93 , & VAR_94 , VAR_95 -> VAR_96 , VAR_97 ) ) goto VAR_98 ; if ( VAR_99 . VAR_100 ) break ; if ( VAR_101 -> VAR_102 >= VAR_103 -> VAR_104 ) break ; } VAR_105 = 1 ; VAR_106 : return VAR_107 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  METHOD_1 ( VAR_1 -> VAR_2 . VAR_3 , VAR_4 ,  sizeof ( VAR_5 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 )  {  TYPE_5 VAR_4 ;  VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 , METHOD_2 ( VAR_8 -> VAR_9 , 0 ) , VAR_10 , VAR_11 , 0 ,  VAR_12 , VAR_13 , VAR_14 , 100 ) ;  if ( VAR_15 < 0 ) METHOD_3 ( VAR_16 , VAR_17 , VAR_18 -> VAR_19 , "%sreturned%d\\n" , VAR_20 , VAR_21 ) ;  return VAR_22 ;  }
TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 ; VAR_3 = ( TYPE_4 ) METHOD_1 ( VAR_4 , sizeof ( * VAR_5 ) ) ; if ( ! VAR_6 ) return VAR_7 ; VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 . METHOD_2 . VAR_13 = VAR_14 ;  return VAR_15 ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { if ( ! METHOD_1 ( VAR_2 , & VAR_3 -> VAR_4 ) && ! METHOD_2 ( & VAR_5 -> VAR_6 ) ) { METHOD_3 ( & VAR_7 -> VAR_8 ) ; METHOD_4 ( VAR_9 -> VAR_10 ) ; METHOD_5 ( VAR_11 , VAR_12 ) ; return ; } if ( ! METHOD_6 ( VAR_13 , & VAR_14 -> VAR_15 ) ) { METHOD_7 ( VAR_16 -> VAR_17 ) ; METHOD_8 ( & VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 ) ;  METHOD_9 ( VAR_22 -> VAR_23 , VAR_24 ) ;  } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ) { struct STRUCT_OR_UNION_4 * VAR_0 = STRUCT_OR_UNION_5 -> VAR_1 ; struct STRUCT_OR_UNION_6 * VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 ) ; TYPE_1 VAR_5 ; METHOD_2 ( & VAR_6 ) ; METHOD_3 ( & VAR_7 -> VAR_8 ) ; METHOD_4 ( & VAR_9 ) ; if ( VAR_10 -> VAR_11 ) METHOD_5 ( VAR_12 -> VAR_13 ) ; if ( VAR_14 -> VAR_15 ) { METHOD_6 ( VAR_16 -> VAR_17 -> VAR_18 , 1 ) ; METHOD_7 ( VAR_19 -> VAR_20 ) ; }  VAR_21 = METHOD_8 ( STRUCT_OR_UNION_7 , STRUCT_OR_UNION_8 ) ;  return VAR_22 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , const TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; VAR_9 . VAR_10 = VAR_11 -> VAR_12 ; VAR_13 . VAR_14 = ( TYPE_10 * ) VAR_15 -> VAR_16 ; VAR_17 = METHOD_1 ( & VAR_18 , VAR_19 ) ; if ( VAR_20 )  return VAR_21 ;  VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ? VAR_25 : VAR_26 , & VAR_27 , VAR_28 -> VAR_29 , * VAR_30 ) ; if ( VAR_31 ) { * VAR_32 = "INVALID_S4U2SELF_CHECKSUM" ; METHOD_3 ( VAR_33 , * VAR_34 ) ; * VAR_35 = VAR_36 ; return VAR_37 ; } if ( METHOD_4 ( VAR_38 , ( * VAR_39 ) -> VAR_40 . VAR_41 ) == 0 || ( * VAR_42 ) -> VAR_43 . VAR_44 . VAR_45 != 0 ) { * VAR_46 = "INVALID_S4U2SELF_REQUEST" ; METHOD_5 ( VAR_47 , * VAR_48 ) ; * VAR_49 = VAR_50 ; return VAR_51 ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = METHOD_1 ( TYPE_5 , VAR_6 , VAR_7 -> VAR_8 ) ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 = 0 ; switch ( VAR_11 -> VAR_12 . VAR_13 [ 0 ] ) { case VAR_14 : if ( VAR_15 -> VAR_16 || ! METHOD_2 ( VAR_17 -> VAR_18 ) ) goto VAR_19 ; break ; case VAR_20 : VAR_21 = METHOD_3 ( VAR_22 , VAR_23 ) ; if ( VAR_24 < 0 ) goto VAR_25 ; break ; case VAR_26 : case VAR_27 : VAR_28 = METHOD_4 ( VAR_29 , VAR_30 ) ; if ( VAR_31 < 0 ) goto VAR_32 ; break ; case VAR_33 : VAR_34 = METHOD_5 ( VAR_35 , VAR_36 ) ; if ( VAR_37 < 0 ) goto VAR_38 ; break ; case VAR_39 : if ( VAR_40 -> VAR_41 . VAR_42 [ 1 ] & 1 ) goto VAR_43 ; break ; case VAR_44 : if ( VAR_45 -> VAR_46 . VAR_47 [ 1 ] & 3 ) goto VAR_48 ; break ; case VAR_49 : if ( VAR_50 -> VAR_51 . VAR_52 [ 1 ] & 1 ) goto VAR_53 ; break ; case VAR_54 : if ( VAR_55 -> VAR_56 . VAR_57 [ 1 ] & 3 ) goto VAR_58 ; break ; case VAR_59 : if ( METHOD_6 ( VAR_60 ) < 0 ) { return - 1 ; } break ; case VAR_61 : VAR_62 -> VAR_63 = VAR_64 -> VAR_65 . VAR_66 [ 4 ] & 1 ; METHOD_7 ( VAR_67 -> VAR_68 , VAR_69 -> VAR_70 . VAR_71 [ 4 ] & 1 ) ; break ; case VAR_72 : METHOD_8 ( VAR_73 , 0 , 8 ) ; METHOD_9 ( VAR_74 -> VAR_75 , & VAR_76 ) ; if ( ! VAR_77 ) goto VAR_78 ; VAR_79 /= VAR_80 -> VAR_81 ; VAR_82 -- ; VAR_83 -> VAR_84 = VAR_85 ; if ( VAR_86 > VAR_87 ) VAR_88 = VAR_89 ; VAR_90 [ 0 ] = ( VAR_91 >> 24 ) & 0xff ; VAR_92 [ 1 ] = ( VAR_93 >> 16 ) & 0xff ; VAR_94 [ 2 ] = ( VAR_95 >> 8 ) & 0xff ; VAR_96 [ 3 ] = VAR_97 & 0xff ; VAR_98 [ 4 ] = 0 ; VAR_99 [ 5 ] = 0 ; VAR_100 [ 6 ] = VAR_101 -> VAR_102 * 2 ; VAR_103 [ 7 ] = 0 ; VAR_104 = 8 ; break ; case VAR_105 : METHOD_10 ( VAR_106 , 0 , 8 ) ; VAR_107 [ 7 ] = 8 ; VAR_108 = 8 ; break ; case VAR_109 : if ( ( VAR_110 -> VAR_111 . VAR_112 [ 1 ] & 31 ) == VAR_113 ) { METHOD_11 ( "SAIREADCAPACITY(16)\\n" ) ; METHOD_12 ( VAR_114 , 0 , VAR_115 -> VAR_116 . VAR_117 ) ; METHOD_13 ( VAR_118 -> VAR_119 , & VAR_120 ) ; if ( ! VAR_121 ) goto VAR_122 ; VAR_123 /= VAR_124 -> VAR_125 ; VAR_126 -- ; VAR_127 -> VAR_128 = VAR_129 ; VAR_130 [ 0 ] = ( VAR_131 >> 56 ) & 0xff ; VAR_132 [ 1 ] = ( VAR_133 >> 48 ) & 0xff ; VAR_134 [ 2 ] = ( VAR_135 >> 40 ) & 0xff ; VAR_136 [ 3 ] = ( VAR_137 >> 32 ) & 0xff ; VAR_138 [ 4 ] = ( VAR_139 >> 24 ) & 0xff ; VAR_140 [ 5 ] = ( VAR_141 >> 16 ) & 0xff ; VAR_142 [ 6 ] = ( VAR_143 >> 8 ) & 0xff ; VAR_144 [ 7 ] = VAR_145 & 0xff ; VAR_146 [ 8 ] = 0 ; VAR_147 [ 9 ] = 0 ; VAR_148 [ 10 ] = VAR_149 -> VAR_150 * 2 ; VAR_151 [ 11 ] = 0 ; VAR_152 [ 12 ] = 0 ; VAR_153 [ 13 ] = METHOD_14 ( & VAR_154 -> VAR_155 . VAR_156 ) ; if ( VAR_157 -> VAR_158 . VAR_159 . VAR_160 ) { VAR_161 [ 14 ] = 0x80 ; } VAR_162 = VAR_163 -> VAR_164 . VAR_165 ; break ; } METHOD_15 ( "UnsupportedServiceActionIn\\n" ) ; goto VAR_166 ; case VAR_167 : break ; default : METHOD_16 ( VAR_168 , METHOD_17 ( VAR_169 ) ) ; return - 1 ; } return VAR_170 ; VAR_171 : if ( VAR_172 -> VAR_173 || ! METHOD_18 ( VAR_174 -> VAR_175 ) ) { METHOD_19 ( VAR_176 , METHOD_20 ( VAR_177 ) ) ; } else { METHOD_21 ( VAR_178 , METHOD_22 ( VAR_179 ) ) ; } return - 1 ; VAR_180 : if ( VAR_181 -> VAR_182 . VAR_183 == - 1 ) { METHOD_23 ( VAR_184 , METHOD_24 ( VAR_185 ) ) ; } return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 -> VAR_3 && VAR_4 -> VAR_5 -> VAR_6 -> VAR_7 || ! VAR_8 -> VAR_9 . VAR_10 ||  VAR_11 -> VAR_12 . VAR_13 ||  VAR_14 -> VAR_15 -> VAR_16 == VAR_17 ) return 0 ; return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 ) {  if ( VAR_5 -> VAR_6 . VAR_7 . VAR_8 & VAR_9 ) {  METHOD_1 ( VAR_10 -> VAR_11 , ~ ( TYPE_4 ) 0 ) ;  return sizeof ( struct STRUCT_OR_UNION_2 ) + VAR_12 ;  } METHOD_2 ( VAR_13 || VAR_14 || VAR_15 ) ; METHOD_3 ( & VAR_16 -> VAR_17 , VAR_18 , VAR_19 -> VAR_20 ) ; METHOD_4 ( VAR_21 ) ; METHOD_5 ( VAR_22 , VAR_23 -> VAR_24 , VAR_25 -> VAR_26 , & VAR_27 -> VAR_28 , VAR_29 , VAR_30 ) ; METHOD_6 ( VAR_31 , METHOD_7 ( VAR_32 -> VAR_33 . VAR_34 . VAR_35 ) , VAR_36 ) ; METHOD_8 ( & VAR_37 -> VAR_38 ) ;  return sizeof ( struct STRUCT_OR_UNION_3 ) + METHOD_9 ( VAR_39 -> VAR_40 . VAR_41 . VAR_42 ) ;  }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 ; while ( 1 ) { TYPE_2 VAR_5 ; TYPE_3 VAR_6 ; VAR_7 = ( struct STRUCT_OR_UNION_4 * ) ( VAR_8 + 1 ) ; if ( METHOD_1 ( VAR_9 -> VAR_10 ) != VAR_11 ) return 0 ; if ( VAR_12 -> VAR_13 == 0 ) return VAR_14 ; for ( VAR_15 = 0 ; VAR_16 < METHOD_2 ( VAR_17 -> VAR_18 ) ; VAR_19 ++ ) { if ( VAR_20 < METHOD_3 ( VAR_21 [ VAR_22 ] . VAR_23 ) ) break ; } if ( -- VAR_24 < 0 ) return 0 ; VAR_25 = METHOD_4 ( VAR_26 [ VAR_27 ] . VAR_28 ) ; VAR_29 = ( VAR_30 << 32 ) + METHOD_5 ( VAR_31 [ VAR_32 ] . VAR_33 ) ; if ( METHOD_6 ( VAR_34 -> VAR_35 , VAR_36 << METHOD_7 ( VAR_37 ) , 0 , METHOD_8 ( VAR_38 ) , VAR_39 ) )  return 0 ;  VAR_40 = ( struct STRUCT_OR_UNION_5 * ) VAR_41 ; } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 , 0 ) ; if ( METHOD_2 ( VAR_7 ) ) { VAR_8 = - VAR_9 ; goto VAR_10 ; } STRUCT_OR_UNION_2 = METHOD_3 ( VAR_11 ) ;  if ( METHOD_4 ( VAR_12 , & STRUCT_OR_UNION_3 -> VAR_13 ) ) {  VAR_14 = - VAR_15 ; goto VAR_16 ; } VAR_17 = METHOD_5 ( VAR_18 , VAR_19 ) ; if ( VAR_20 == 0 ) goto VAR_21 ; if ( VAR_22 != - VAR_23 ) goto VAR_24 ; if ( ! METHOD_6 ( VAR_25 ) ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } VAR_29 : VAR_30 = - VAR_31 ; if ( STRUCT_OR_UNION_4 -> VAR_32 -> METHOD_7 ) { METHOD_8 ( & STRUCT_OR_UNION_5 -> VAR_33 ) ; VAR_34 = METHOD_9 ( STRUCT_OR_UNION_6 ) ; if ( VAR_35 == 0 ) VAR_36 = STRUCT_OR_UNION_7 -> VAR_37 -> METHOD_10 ( STRUCT_OR_UNION_8 , VAR_38 , VAR_39 ) ; METHOD_11 ( & STRUCT_OR_UNION_9 -> VAR_40 ) ; } VAR_41 : METHOD_12 ( STRUCT_OR_UNION_10 ) ; VAR_42 : return VAR_43 ; }
int METHOD_0 ( TYPE_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 _U_ ) { const struct STRUCT_OR_UNION_0 * VAR_3 ; const TYPE_3 * VAR_4 ; unsigned VAR_5 , VAR_6 ; TYPE_4 VAR_7 ; VAR_8 = ( const struct STRUCT_OR_UNION_1 * ) VAR_9 ; VAR_10 = VAR_11 -> VAR_12 ; if ( ! METHOD_1 ( VAR_13 -> VAR_14 ) ) { VAR_15 = VAR_16 - VAR_17 ; goto VAR_18 ; } VAR_19 = ( VAR_20 -> VAR_21 + 1 ) << 3 ; METHOD_2 ( VAR_22 -> VAR_23 ) ; VAR_24 = VAR_25 -> VAR_26 ; if ( VAR_27 <= VAR_28 && VAR_29 < VAR_30 [ VAR_31 ] ) { METHOD_3 ( ( VAR_32 , "(headerlength%uistoosmallfortype%u)" , VAR_33 , VAR_34 ) ) ; goto VAR_35 ; } METHOD_4 ( ( VAR_36 , "mobility:%s" , METHOD_5 ( VAR_37 , "type-%u" , VAR_38 ) ) ) ; switch ( VAR_39 ) { case VAR_40 : VAR_41 = VAR_42 ; break ; case VAR_43 : case VAR_44 : VAR_45 = VAR_46 ; if ( VAR_47 -> VAR_48 ) {  METHOD_6 ( * VAR_49 , VAR_50 + 8 ) ;  METHOD_7 ( ( VAR_51 , "%sInitCookie=%08x:%08x" , VAR_52 == VAR_53 ? "Home" : "Care-of" , METHOD_8 ( & VAR_54 [ VAR_55 ] ) , METHOD_9 ( & VAR_56 [ VAR_57 + 4 ] ) ) ) ; } VAR_58 += 8 ; break ; case VAR_59 : case VAR_60 : METHOD_10 ( VAR_61 -> VAR_62 [ 0 ] ) ; METHOD_11 ( ( VAR_63 , "nonceid=0x%x" , METHOD_12 ( & VAR_64 -> VAR_65 [ 0 ] ) ) ) ; VAR_66 = VAR_67 ; if ( VAR_68 -> VAR_69 ) {  METHOD_13 ( * VAR_70 , VAR_71 + 8 ) ;  METHOD_14 ( ( VAR_72 , "%sInitCookie=%08x:%08x" , VAR_73 == VAR_74 ? "Home" : "Care-of" , METHOD_15 ( & VAR_75 [ VAR_76 ] ) , METHOD_16 ( & VAR_77 [ VAR_78 + 4 ] ) ) ) ; } VAR_79 += 8 ; if ( VAR_80 -> VAR_81 ) {  METHOD_17 ( * VAR_82 , VAR_83 + 8 ) ;  METHOD_18 ( ( VAR_84 , "%sKeygenToken=%08x:%08x" , VAR_85 == VAR_86 ? "Home" : "Care-of" , METHOD_19 ( & VAR_87 [ VAR_88 ] ) , METHOD_20 ( & VAR_89 [ VAR_90 + 4 ] ) ) ) ; } VAR_91 += 8 ; break ; case VAR_92 : METHOD_21 ( VAR_93 -> VAR_94 [ 0 ] ) ; METHOD_22 ( ( VAR_95 , "seq=%u" , METHOD_23 ( & VAR_96 -> VAR_97 [ 0 ] ) ) ) ; VAR_98 = VAR_99 ;  METHOD_24 ( * VAR_100 , VAR_101 + 1 ) ;   if ( VAR_102 [ VAR_103 ] & 0xf0 )  METHOD_25 ( ( VAR_104 , "" ) ) ; if ( VAR_105 [ VAR_106 ] & 0x80 ) METHOD_26 ( ( VAR_107 , "A" ) ) ; if ( VAR_108 [ VAR_109 ] & 0x40 ) METHOD_27 ( ( VAR_110 , "H" ) ) ; if ( VAR_111 [ VAR_112 ] & 0x20 ) METHOD_28 ( ( VAR_113 , "L" ) ) ; if ( VAR_114 [ VAR_115 ] & 0x10 )  METHOD_29 ( ( VAR_116 , "K" ) ) ;  VAR_117 += 1 ; VAR_118 += 1 ;  METHOD_30 ( * VAR_119 , VAR_120 + 2 ) ;  METHOD_31 ( ( VAR_121 , "lifetime=%u" , METHOD_32 ( & VAR_122 [ VAR_123 ] ) << 2 ) ) ; VAR_124 += 2 ; break ; case VAR_125 : METHOD_33 ( VAR_126 -> VAR_127 [ 0 ] ) ; METHOD_34 ( ( VAR_128 , "status=%u" , VAR_129 -> VAR_130 [ 0 ] ) ) ;  if ( VAR_131 -> VAR_132 [ 1 ] & 0x80 )  METHOD_35 ( ( VAR_133 , "K" ) ) ; VAR_134 = VAR_135 ;  METHOD_36 ( * VAR_136 , VAR_137 + 2 ) ;  METHOD_37 ( ( VAR_138 , "seq=%u" , METHOD_38 ( & VAR_139 [ VAR_140 ] ) ) ) ; VAR_141 += 2 ;  METHOD_39 ( * VAR_142 , VAR_143 + 2 ) ;  METHOD_40 ( ( VAR_144 , "lifetime=%u" , METHOD_41 ( & VAR_145 [ VAR_146 ] ) << 2 ) ) ; VAR_147 += 2 ; break ; case VAR_148 : METHOD_42 ( VAR_149 -> VAR_150 [ 0 ] ) ; METHOD_43 ( ( VAR_151 , "status=%u" , VAR_152 -> VAR_153 [ 0 ] ) ) ; VAR_154 = VAR_155 ;  METHOD_44 ( * VAR_156 , VAR_157 + 16 ) ;  METHOD_45 ( ( VAR_158 , "homeaddr%s" , METHOD_46 ( VAR_159 , & VAR_160 [ VAR_161 ] ) ) ) ; VAR_162 += 16 ; break ; default : METHOD_47 ( ( VAR_163 , "len=%u" , VAR_164 -> VAR_165 ) ) ; return ( VAR_166 ) ; break ; } if ( VAR_167 -> VAR_168 ) if ( METHOD_48 ( VAR_169 , & VAR_170 [ VAR_171 ] , VAR_172 - VAR_173 ) ) goto VAR_174 ; return ( VAR_175 ) ; VAR_176 : METHOD_49 ( ( VAR_177 , "%s" , VAR_178 ) ) ; return ( - 1 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 ) ;  VAR_2 -> VAR_3 = & VAR_4 ;  VAR_5 -> VAR_6 = VAR_7 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = ( struct STRUCT_OR_UNION_4 * ) VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = STRUCT_OR_UNION_6 -> VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 = METHOD_1 ( VAR_8 ) -> VAR_9 ; METHOD_2 ( "sock%psk%p" , STRUCT_OR_UNION_8 , VAR_10 ) ; if ( ! VAR_11 ) return - VAR_12 ; METHOD_3 ( VAR_13 ) ; * VAR_14 = sizeof ( * VAR_15 ) ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> STRUCT_OR_UNION_9 = VAR_20 -> VAR_21 ;  METHOD_4 ( VAR_22 ) ;  return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; TYPE_3 VAR_4 = * VAR_5 ; TYPE_4 VAR_6 = 1 ; TYPE_5 * VAR_7 = ( TYPE_6 * ) VAR_8 ; if ( VAR_9 && ( VAR_10 < 5 ) ) { * VAR_11 = 5 ; return 255 ; } else if ( VAR_12 < 3 ) { * VAR_13 = 3 ; return 255 ; } VAR_14 = 3 ; VAR_15 [ 0 ] = VAR_16 -> VAR_17 ; VAR_18 [ 2 ] = ( TYPE_7 ) VAR_19 -> VAR_20 ;  VAR_21 [ 2 ] = STRUCT_OR_UNION_5 -> VAR_22 ;  if ( VAR_23 ) { struct STRUCT_OR_UNION_6 * VAR_24 ; VAR_25 = METHOD_2 ( VAR_26 ) ; VAR_27 [ 3 ] = VAR_28 -> VAR_29 ; VAR_30 [ 3 ] = ( TYPE_8 ) VAR_31 -> VAR_32 ; VAR_33 [ 4 ] = VAR_34 -> VAR_35 ; VAR_36 = 5 ; VAR_37 = 2 ; } * VAR_38 = VAR_39 ; return VAR_40 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , const TYPE_6 * * VAR_5 , TYPE_7 * * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; if ( VAR_9 -> VAR_10 & VAR_11 ) { * VAR_12 = "INVALIDASOPTIONS" ; return VAR_13 ; } if ( VAR_14 . VAR_15 && VAR_16 . VAR_17 < VAR_18 ) { * VAR_19 = "CLIENTEXPIRED" ; if ( VAR_20 ) return ( VAR_21 ) ; else return ( VAR_22 ) ; } if ( VAR_23 . VAR_24 && VAR_25 . VAR_26 < VAR_27 && ! METHOD_1 ( VAR_28 . VAR_29 , VAR_30 ) ) { * VAR_31 = "CLIENTKEYEXPIRED" ; if ( VAR_32 ) return ( VAR_33 ) ; else return ( VAR_34 ) ; } if ( VAR_35 . VAR_36 && VAR_37 . VAR_38 < VAR_39 ) { * VAR_40 = "SERVICEEXPIRED" ; return ( VAR_41 ) ; } if ( METHOD_2 ( VAR_42 . VAR_43 , VAR_44 ) && ! METHOD_3 ( VAR_45 . VAR_46 , VAR_47 ) ) { * VAR_48 = "REQUIREDPWCHANGE" ; return ( VAR_49 ) ; } if ( ( METHOD_4 ( VAR_50 -> VAR_51 , VAR_52 ) || METHOD_5 ( VAR_53 -> VAR_54 , VAR_55 ) ) && ( METHOD_6 ( VAR_56 . VAR_57 , VAR_58 ) || METHOD_7 ( VAR_59 . VAR_60 , VAR_61 ) ) ) { * VAR_62 = "POSTDATENOTALLOWED" ; return ( VAR_63 ) ; } if ( METHOD_8 ( VAR_64 -> VAR_65 , VAR_66 ) && ( METHOD_9 ( VAR_67 . VAR_68 , VAR_69 ) || METHOD_10 ( VAR_70 . VAR_71 , VAR_72 ) ) ) { * VAR_73 = "PROXIABLENOTALLOWED" ; return ( VAR_74 ) ; } if ( METHOD_11 ( VAR_75 . VAR_76 , VAR_77 ) ) { * VAR_78 = "CLIENTLOCKEDOUT" ; return ( VAR_79 ) ; } if ( METHOD_12 ( VAR_80 . VAR_81 , VAR_82 ) ) { * VAR_83 = "SERVICELOCKEDOUT" ; return ( VAR_84 ) ; } if ( METHOD_13 ( VAR_85 . VAR_86 , VAR_87 ) ) { * VAR_88 = "SERVICENOTALLOWED" ; return ( VAR_89 ) ; }  if ( METHOD_14 ( VAR_90 , VAR_91 -> VAR_92 , VAR_93 -> VAR_94 ) != 0 ) {  * VAR_95 = "ANONYMOUSNOTALLOWED" ; return ( VAR_96 ) ; } VAR_97 = METHOD_15 ( VAR_98 , VAR_99 , & VAR_100 , & VAR_101 , VAR_102 , VAR_103 , VAR_104 ) ; if ( VAR_105 && VAR_106 != VAR_107 ) return METHOD_16 ( VAR_108 ) ; VAR_109 = METHOD_17 ( VAR_110 , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 ) ; if ( VAR_116 ) return VAR_117 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = ( TYPE_4 * ) VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; METHOD_1 ( "btif_dm_upstreams_cbackev:%s" , METHOD_2 ( VAR_7 ) ) ; switch ( VAR_8 ) { case VAR_9 : { TYPE_8 VAR_10 ; TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = ( TYPE_11 * ) VAR_21 ; VAR_22 = METHOD_3 ( & VAR_23 ) ; if ( VAR_24 == VAR_25 ) { METHOD_4 ( ( TYPE_12 * ) VAR_26 . VAR_27 ) ; } else { METHOD_5 ( METHOD_6 ( ) ) ; } if ( METHOD_7 ( VAR_28 ) && ( VAR_29 == VAR_30 ) ) METHOD_8 ( VAR_31 ) ; VAR_32 = METHOD_9 ( ) ; for ( VAR_33 = 0 ; VAR_34 <= VAR_35 ; VAR_36 ++ ) { if ( VAR_37 & ( TYPE_13 ) ( METHOD_10 ( VAR_38 ) ) ) { METHOD_11 ( VAR_39 , VAR_40 ) ; } } METHOD_12 ( & VAR_41 , 0 , sizeof ( VAR_42 ) ) ; VAR_43 . VAR_44 = VAR_45 ; METHOD_13 ( ) ; METHOD_14 ( ) ; METHOD_15 ( VAR_46 -> VAR_47 . VAR_48 ) ; } break ; case VAR_49 : VAR_50 = METHOD_16 ( ) ; for ( VAR_51 = 0 ; VAR_52 <= VAR_53 ; VAR_54 ++ ) { if ( VAR_55 & ( TYPE_14 ) ( METHOD_17 ( VAR_56 ) ) ) { METHOD_18 ( VAR_57 , VAR_58 ) ; } } METHOD_19 ( ) ; break ; case VAR_59 : METHOD_20 ( & VAR_60 -> VAR_61 ) ; break ; case VAR_62 : METHOD_21 ( & VAR_63 -> VAR_64 ) ; break ; case VAR_65 : if ( VAR_66 . VAR_67 == VAR_68 ) { METHOD_22 ( VAR_69 . VAR_70 , VAR_71 . VAR_72 ) ; METHOD_23 ( VAR_73 . VAR_74 , VAR_75 ) ; METHOD_24 ( VAR_76 -> VAR_77 . VAR_78 , & VAR_79 , VAR_80 ) ; } break ; case VAR_81 : METHOD_25 ( & VAR_82 -> VAR_83 ) ; break ; case VAR_84 : METHOD_26 ( & VAR_85 -> VAR_86 ) ; break ; case VAR_87 : METHOD_27 ( VAR_88 . VAR_89 , VAR_90 -> VAR_91 . VAR_92 ) ; METHOD_28 ( VAR_93 -> VAR_94 . VAR_95 , VAR_96 ) ; if ( METHOD_29 ( VAR_97 ) && ( VAR_98 == VAR_99 ) ) METHOD_30 ( VAR_100 ) ; METHOD_31 ( & VAR_101 ) ; METHOD_32 ( VAR_102 , & VAR_103 , VAR_104 ) ; break ; case VAR_105 : { if ( VAR_106 -> VAR_107 . VAR_108 & VAR_109 ) { if ( VAR_110 -> VAR_111 . VAR_112 == VAR_113 ) { METHOD_33 ( VAR_114 , VAR_115 , VAR_116 ) ; VAR_117 = VAR_118 ; } else if ( VAR_119 -> VAR_120 . VAR_121 == VAR_122 ) { METHOD_34 ( VAR_123 , VAR_124 , VAR_125 ) ; VAR_126 = VAR_127 ; } else if ( VAR_128 -> VAR_129 . VAR_130 == VAR_131 ) { VAR_132 = VAR_133 ; } } } break ; case VAR_134 : METHOD_35 ( VAR_135 . VAR_136 , VAR_137 -> VAR_138 . VAR_139 ) ; METHOD_36 ( "BTA_DM_LINK_UP_EVT.SendingBT_ACL_STATE_CONNECTED" ) ; METHOD_37 ( & VAR_140 ) ; METHOD_38 ( VAR_141 , VAR_142 , VAR_143 , & VAR_144 , VAR_145 ) ; break ; case VAR_146 : METHOD_39 ( VAR_147 . VAR_148 , VAR_149 -> VAR_150 . VAR_151 ) ; METHOD_40 ( VAR_152 -> VAR_153 . VAR_154 , VAR_155 ) ; METHOD_41 ( "BTA_DM_LINK_DOWN_EVT.SendingBT_ACL_STATE_DISCONNECTED" ) ; METHOD_42 ( VAR_156 , VAR_157 , VAR_158 , & VAR_159 , VAR_160 ) ; break ; case VAR_161 : METHOD_43 ( "ReceivedH/WError." ) ; METHOD_44 ( ) ;  METHOD_45 ( 100000 ) ;  METHOD_46 ( METHOD_47 ( ) , VAR_162 ) ; break ; if ( METHOD_48 ( VAR_163 ) && ( VAR_164 == VAR_165 ) ) case VAR_166 : METHOD_49 ( "BTA_DM_BLE_KEY_EVTkey_type=0x%02x" , VAR_167 -> VAR_168 . VAR_169 ) ; if ( VAR_170 . VAR_171 != VAR_172 ) { METHOD_50 ( "BondstatenotsenttoAppsofar.Notifytheappnow" ) ; METHOD_51 ( VAR_173 , ( TYPE_15 * ) VAR_174 -> VAR_175 . VAR_176 , VAR_177 ) ; } else if ( METHOD_52 ( VAR_178 . VAR_179 , VAR_180 -> VAR_181 . VAR_182 , VAR_183 ) != 0 ) { METHOD_53 ( "BDmismatchdiscardBLEkey_type=%d" , VAR_184 -> VAR_185 . VAR_186 ) ; break ; } switch ( VAR_187 -> VAR_188 . VAR_189 ) { case VAR_190 : METHOD_54 ( "RcvBTA_LE_KEY_PENC" ) ; VAR_191 . VAR_192 . VAR_193 = VAR_194 ; VAR_195 . VAR_196 . VAR_197 = VAR_198 -> VAR_199 . VAR_200 -> VAR_201 ; break ; case VAR_202 : METHOD_55 ( "RcvBTA_LE_KEY_PID" ) ; VAR_203 . VAR_204 . VAR_205 = VAR_206 ; VAR_207 . VAR_208 . VAR_209 = VAR_210 -> VAR_211 . VAR_212 -> VAR_213 ; break ; case VAR_214 : METHOD_56 ( "RcvBTA_LE_KEY_PCSRK" ) ; VAR_215 . VAR_216 . VAR_217 = VAR_218 ; VAR_219 . VAR_220 . VAR_221 = VAR_222 -> VAR_223 . VAR_224 -> VAR_225 ; break ; case VAR_226 : METHOD_57 ( "RcvBTA_LE_KEY_LENC" ) ; VAR_227 . VAR_228 . VAR_229 = VAR_230 ; VAR_231 . VAR_232 . VAR_233 = VAR_234 -> VAR_235 . VAR_236 -> VAR_237 ; break ; case VAR_238 : METHOD_58 ( "RcvBTA_LE_KEY_LCSRK" ) ; VAR_239 . VAR_240 . VAR_241 = VAR_242 ; VAR_243 . VAR_244 . VAR_245 = VAR_246 -> VAR_247 . VAR_248 -> VAR_249 ; break ; case VAR_250 : METHOD_59 ( "RcvBTA_LE_KEY_LID" ) ; VAR_251 . VAR_252 . VAR_253 = VAR_254 ; break ; default : METHOD_60 ( "unknownBLEkeytype(0x%02x)" , VAR_255 -> VAR_256 . VAR_257 ) ; break ; } break ; case VAR_258 : METHOD_61 ( "BTA_DM_BLE_SEC_REQ_EVT." ) ; METHOD_62 ( & VAR_259 -> VAR_260 ) ; break ; case VAR_261 : METHOD_63 ( "BTA_DM_BLE_PASSKEY_NOTIF_EVT." ) ; METHOD_64 ( & VAR_262 -> VAR_263 ) ; break ; case VAR_264 : METHOD_65 ( "BTA_DM_BLE_PASSKEY_REQ_EVT." ) ; METHOD_66 ( & VAR_265 -> VAR_266 ) ; break ; case VAR_267 : METHOD_67 ( "BTA_DM_BLE_PASSKEY_REQ_EVT." ) ; METHOD_68 ( & VAR_268 -> VAR_269 ) ; break ; case VAR_270 : METHOD_69 ( "BTA_DM_BLE_OOB_REQ_EVT." ) ; break ; case VAR_271 : METHOD_70 ( "BTA_DM_BLE_LOCAL_IR_EVT." ) ; VAR_272 . VAR_273 = VAR_274 ; METHOD_71 ( & VAR_275 . VAR_276 . VAR_277 [ 0 ] , & VAR_278 -> VAR_279 . VAR_280 [ 0 ] , sizeof ( VAR_281 ) ) ; METHOD_72 ( & VAR_282 . VAR_283 . VAR_284 [ 0 ] , & VAR_285 -> VAR_286 . VAR_287 [ 0 ] , sizeof ( VAR_288 ) ) ; METHOD_73 ( & VAR_289 . VAR_290 . VAR_291 [ 0 ] , & VAR_292 -> VAR_293 . VAR_294 [ 0 ] , sizeof ( VAR_295 ) ) ; METHOD_74 ( ( TYPE_16 * ) & VAR_296 . VAR_297 . VAR_298 [ 0 ] , VAR_299 , VAR_300 ) ; METHOD_75 ( ( TYPE_17 * ) & VAR_301 . VAR_302 . VAR_303 [ 0 ] , VAR_304 , VAR_305 ) ; METHOD_76 ( ( TYPE_18 * ) & VAR_306 . VAR_307 . VAR_308 [ 0 ] , VAR_309 , VAR_310 ) ; break ; case VAR_311 : METHOD_77 ( "BTA_DM_BLE_LOCAL_ER_EVT." ) ; VAR_312 . VAR_313 = VAR_314 ; METHOD_78 ( & VAR_315 . VAR_316 [ 0 ] , & VAR_317 -> VAR_318 [ 0 ] , sizeof ( VAR_319 ) ) ; METHOD_79 ( ( TYPE_19 * ) & VAR_320 . VAR_321 [ 0 ] , VAR_322 , VAR_323 ) ; break ; case VAR_324 : METHOD_80 ( "BTA_DM_BLE_AUTH_CMPL_EVT." ) ; METHOD_81 ( & VAR_325 -> VAR_326 ) ; break ; case VAR_327 : { TYPE_20 VAR_328 ; TYPE_21 VAR_329 ; TYPE_22 VAR_330 [ 512 ] ; TYPE_23 VAR_331 ; VAR_332 . VAR_333 = VAR_334 ; VAR_335 . VAR_336 = ( TYPE_24 * ) VAR_337 ; VAR_338 . VAR_339 = sizeof ( VAR_340 ) ; METHOD_82 ( & VAR_341 ) ; VAR_342 . VAR_343 = METHOD_83 ( ) ; VAR_344 . VAR_345 = sizeof ( TYPE_25 ) ; if ( VAR_346 . VAR_347 == 1 ) VAR_348 . VAR_349 = VAR_350 . VAR_351 ; else VAR_352 . VAR_353 = 0 ; VAR_354 . VAR_355 = VAR_356 . VAR_357 ; VAR_358 . VAR_359 = VAR_360 . VAR_361 ; VAR_362 . VAR_363 = VAR_364 . VAR_365 ; VAR_366 . VAR_367 = VAR_368 . VAR_369 ; VAR_370 . VAR_371 = VAR_372 . VAR_373 ; VAR_374 . VAR_375 = VAR_376 . VAR_377 ; VAR_378 . VAR_379 = VAR_380 . VAR_381 ; VAR_382 . VAR_383 = VAR_384 . VAR_385 > 0 ; VAR_386 . VAR_387 = VAR_388 . VAR_389 > 0 ; METHOD_84 ( VAR_390 . VAR_391 , & VAR_392 , VAR_393 . VAR_394 ) ; METHOD_85 ( VAR_395 , VAR_396 , VAR_397 , 1 , & VAR_398 ) ; break ; } case VAR_399 : { TYPE_26 * VAR_400 = ( TYPE_27 * ) VAR_401 ; TYPE_28 VAR_402 ; VAR_403 . VAR_404 = VAR_405 -> VAR_406 ; VAR_407 . VAR_408 = VAR_409 -> VAR_410 ; VAR_411 . VAR_412 = VAR_413 -> VAR_414 ; VAR_415 . VAR_416 = VAR_417 -> VAR_418 ; VAR_419 . VAR_420 = VAR_421 -> VAR_422 ; VAR_423 . VAR_424 = VAR_425 -> VAR_426 ; METHOD_86 ( VAR_427 , VAR_428 , & VAR_429 ) ; break ; } case VAR_430 : case VAR_431 : case VAR_432 : case VAR_433 : case VAR_434 : default : METHOD_87 ( "btif_dm_cback:unhandledevent(%d)" , VAR_435 ) ; break ; } METHOD_88 ( VAR_436 , VAR_437 ) ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { const unsigned TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 , * VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 * VAR_7 ; TYPE_8 VAR_8 ; register const TYPE_9 * VAR_9 ; register TYPE_10 VAR_10 , VAR_11 ; register TYPE_11 * VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 , VAR_15 ; METHOD_1 ( VAR_16 != ( const TYPE_14 * ) VAR_17 ) ; METHOD_2 ( VAR_18 -> VAR_19 == VAR_20 ) ; if ( VAR_21 -> VAR_22 != VAR_23 ) ( TYPE_15 ) METHOD_3 ( VAR_24 , METHOD_4 ( ) , "%s" , VAR_25 -> VAR_26 ) ; METHOD_5 ( VAR_27 != ( TYPE_16 * ) VAR_28 ) ; METHOD_6 ( VAR_29 -> VAR_30 == VAR_31 ) ; VAR_32 = METHOD_7 ( VAR_33 , VAR_34 ) ; if ( ( VAR_35 -> VAR_36 == 0 ) || ( VAR_37 -> VAR_38 == 0 ) ) METHOD_8 ( VAR_39 , "MustSpecifyImageSize" ) ; VAR_40 = METHOD_9 ( VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; if ( VAR_47 == VAR_48 ) return ( METHOD_10 ( VAR_49 ) ) ; METHOD_11 ( VAR_50 , VAR_51 , VAR_52 ) ; if ( VAR_53 -> VAR_54 != VAR_55 ) { VAR_56 = METHOD_12 ( VAR_57 , VAR_58 , VAR_59 , VAR_60 ) ; if ( VAR_61 == VAR_62 ) { VAR_63 = METHOD_13 ( VAR_64 ) ; return ( ( TYPE_17 * ) VAR_65 ) ; } if ( METHOD_14 ( VAR_66 , VAR_67 -> VAR_68 ) == VAR_69 ) METHOD_15 ( VAR_70 , VAR_71 , "UnexpectedEndOfFile" , VAR_72 -> VAR_73 ) ; } VAR_74 = METHOD_16 ( VAR_75 , VAR_76 -> VAR_77 . VAR_78 , 1 , VAR_79 , VAR_80 ) ; ( TYPE_18 ) METHOD_17 ( VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 = METHOD_18 ( VAR_85 , VAR_86 ) ; if ( VAR_87 == ( TYPE_19 * ) VAR_88 ) METHOD_19 ( VAR_89 , "MemoryAllocationFailed" ) ; VAR_90 = VAR_91 ; if ( METHOD_20 ( VAR_92 -> VAR_93 , "YCbCrA" ) == 0 ) { VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; } VAR_99 = ( const unsigned TYPE_20 * ) VAR_100 ; if ( VAR_101 -> VAR_102 != 0 ) while ( VAR_103 -> VAR_104 < VAR_105 -> VAR_106 ) { VAR_107 -> VAR_108 ++ ; VAR_109 = METHOD_21 ( VAR_110 , VAR_111 , VAR_112 ) ; for ( VAR_113 = 0 ; VAR_114 < ( TYPE_21 ) VAR_115 -> VAR_116 ; VAR_117 ++ ) { VAR_118 = ( const unsigned TYPE_22 * ) METHOD_22 ( VAR_119 , VAR_120 , METHOD_23 ( VAR_121 ) , & VAR_122 ) ; if ( VAR_123 != ( TYPE_23 ) VAR_124 ) break ; } } VAR_125 = 0 ; VAR_126 = 0 ; VAR_127 = 0 ; do { if ( ( VAR_128 -> VAR_129 != VAR_130 ) && ( VAR_131 -> VAR_132 != 0 ) ) if ( VAR_133 -> VAR_134 >= ( VAR_135 -> VAR_136 + VAR_137 -> VAR_138 - 1 ) ) break ; VAR_139 = METHOD_24 ( VAR_140 , VAR_141 -> VAR_142 , VAR_143 -> VAR_144 , VAR_145 ) ; if ( VAR_146 == VAR_147 ) {  VAR_148 = METHOD_25 ( VAR_149 ) ;  return ( METHOD_26 ( VAR_150 ) ) ; } METHOD_27 ( VAR_151 , VAR_152 , VAR_153 ) ; switch ( VAR_154 -> VAR_155 ) { case VAR_156 : default : { if ( VAR_157 == 0 ) { VAR_158 = METHOD_28 ( VAR_159 , VAR_160 , VAR_161 ) ; VAR_162 = ( const unsigned TYPE_24 * ) METHOD_29 ( VAR_163 , VAR_164 , METHOD_30 ( VAR_165 ) , & VAR_166 ) ; } for ( VAR_167 = 0 ; VAR_168 < ( TYPE_25 ) VAR_169 -> VAR_170 . VAR_171 ; VAR_172 ++ ) { if ( VAR_173 != ( TYPE_26 ) VAR_174 ) { METHOD_31 ( VAR_175 , VAR_176 , "UnexpectedEndOfFile" , VAR_177 -> VAR_178 ) ; break ; } VAR_179 = METHOD_32 ( VAR_180 , 0 , 0 , VAR_181 -> VAR_182 , 1 , VAR_183 ) ; if ( VAR_184 == ( TYPE_27 * ) VAR_185 ) break ; VAR_186 = METHOD_33 ( VAR_187 , ( TYPE_28 * ) VAR_188 , VAR_189 , VAR_190 , VAR_191 , VAR_192 ) ; if ( METHOD_34 ( VAR_193 , VAR_194 ) == VAR_195 ) break ; if ( ( ( VAR_196 - VAR_197 -> VAR_198 . VAR_199 ) >= 0 ) && ( ( VAR_200 - VAR_201 -> VAR_202 . VAR_203 ) < ( TYPE_29 ) VAR_204 -> VAR_205 ) ) { VAR_206 = METHOD_35 ( VAR_207 , VAR_208 -> VAR_209 . VAR_210 , 0 , VAR_211 -> VAR_212 , 1 , VAR_213 ) ; VAR_214 = METHOD_36 ( VAR_215 , 0 , VAR_216 - VAR_217 -> VAR_218 . VAR_219 , VAR_220 -> VAR_221 , 1 , VAR_222 ) ; if ( ( VAR_223 == ( const TYPE_30 * ) VAR_224 ) || ( VAR_225 == ( TYPE_31 * ) VAR_226 ) ) break ; for ( VAR_227 = 0 ; VAR_228 < ( TYPE_32 ) VAR_229 -> VAR_230 ; VAR_231 ++ ) { METHOD_37 ( VAR_232 , METHOD_38 ( VAR_233 , VAR_234 ) , VAR_235 ) ; METHOD_39 ( VAR_236 , METHOD_40 ( VAR_237 , VAR_238 ) , VAR_239 ) ; METHOD_41 ( VAR_240 , METHOD_42 ( VAR_241 , VAR_242 ) , VAR_243 ) ; if ( VAR_244 -> VAR_245 != VAR_246 ) METHOD_43 ( VAR_247 , METHOD_44 ( VAR_248 , VAR_249 ) , VAR_250 ) ; VAR_251 += METHOD_45 ( VAR_252 ) ; VAR_253 += METHOD_46 ( VAR_254 ) ; } if ( METHOD_47 ( VAR_255 , VAR_256 ) == VAR_257 ) break ; } if ( VAR_258 -> VAR_259 == ( TYPE_33 * ) VAR_260 ) { VAR_261 = METHOD_48 ( VAR_262 , VAR_263 , ( TYPE_34 ) VAR_264 , VAR_265 -> VAR_266 ) ; if ( VAR_267 == VAR_268 ) break ; } VAR_269 = ( const unsigned TYPE_35 * ) METHOD_49 ( VAR_270 , VAR_271 , METHOD_50 ( VAR_272 ) , & VAR_273 ) ; } break ; } case VAR_274 : { static TYPE_36 VAR_275 [ 4 ] = { VAR_276 , VAR_277 , VAR_278 , VAR_279 } ; if ( VAR_280 == 0 ) { VAR_281 = METHOD_51 ( VAR_282 , VAR_283 , VAR_284 ) ; VAR_285 = ( const unsigned TYPE_37 * ) METHOD_52 ( VAR_286 , VAR_287 , METHOD_53 ( VAR_288 ) , & VAR_289 ) ; } for ( VAR_290 = 0 ; VAR_291 < ( TYPE_38 ) VAR_292 -> VAR_293 . VAR_294 ; VAR_295 ++ ) { for ( VAR_296 = 0 ; VAR_297 < ( VAR_298 -> VAR_299 != VAR_300 ? 4 : 3 ) ; VAR_301 ++ ) { if ( VAR_302 != ( TYPE_39 ) VAR_303 ) { METHOD_54 ( VAR_304 , VAR_305 , "UnexpectedEndOfFile" , VAR_306 -> VAR_307 ) ; break ; } VAR_308 = VAR_309 [ VAR_310 ] ; VAR_311 = METHOD_55 ( VAR_312 , 0 , 0 , VAR_313 -> VAR_314 , 1 , VAR_315 ) ; if ( VAR_316 == ( TYPE_40 * ) VAR_317 ) break ; VAR_318 = METHOD_56 ( VAR_319 , ( TYPE_41 * ) VAR_320 , VAR_321 , VAR_322 , VAR_323 , VAR_324 ) ; if ( METHOD_57 ( VAR_325 , VAR_326 ) == VAR_327 ) break ; if ( ( ( VAR_328 - VAR_329 -> VAR_330 . VAR_331 ) >= 0 ) && ( ( VAR_332 - VAR_333 -> VAR_334 . VAR_335 ) < ( TYPE_42 ) VAR_336 -> VAR_337 ) ) { VAR_338 = METHOD_58 ( VAR_339 , VAR_340 -> VAR_341 . VAR_342 , 0 , VAR_343 -> VAR_344 , 1 , VAR_345 ) ; VAR_346 = METHOD_59 ( VAR_347 , 0 , VAR_348 - VAR_349 -> VAR_350 . VAR_351 , VAR_352 -> VAR_353 , 1 , VAR_354 ) ; if ( ( VAR_355 == ( const TYPE_43 * ) VAR_356 ) || ( VAR_357 == ( TYPE_44 * ) VAR_358 ) ) break ; for ( VAR_359 = 0 ; VAR_360 < ( TYPE_45 ) VAR_361 -> VAR_362 ; VAR_363 ++ ) { switch ( VAR_364 ) { case VAR_365 : { METHOD_60 ( VAR_366 , METHOD_61 ( VAR_367 , VAR_368 ) , VAR_369 ) ; break ; } case VAR_370 : { METHOD_62 ( VAR_371 , METHOD_63 ( VAR_372 , VAR_373 ) , VAR_374 ) ; break ; } case VAR_375 : { METHOD_64 ( VAR_376 , METHOD_65 ( VAR_377 , VAR_378 ) , VAR_379 ) ; break ; } case VAR_380 : { METHOD_66 ( VAR_381 , METHOD_67 ( VAR_382 , VAR_383 ) , VAR_384 ) ; break ; } default : break ; } VAR_385 += METHOD_68 ( VAR_386 ) ; VAR_387 += METHOD_69 ( VAR_388 ) ; } if ( METHOD_70 ( VAR_389 , VAR_390 ) == VAR_391 ) break ; } VAR_392 = ( const unsigned TYPE_46 * ) METHOD_71 ( VAR_393 , VAR_394 , METHOD_72 ( VAR_395 ) , & VAR_396 ) ; } if ( VAR_397 -> VAR_398 == ( TYPE_47 * ) VAR_399 ) { VAR_400 = METHOD_73 ( VAR_401 , VAR_402 , ( TYPE_48 ) VAR_403 , VAR_404 -> VAR_405 ) ; if ( VAR_406 == VAR_407 ) break ; } } break ; } case VAR_408 : { if ( VAR_409 == 0 ) { VAR_410 = METHOD_74 ( VAR_411 , VAR_412 , VAR_413 ) ; VAR_414 = ( const unsigned TYPE_49 * ) METHOD_75 ( VAR_415 , VAR_416 , METHOD_76 ( VAR_417 ) , & VAR_418 ) ; } for ( VAR_419 = 0 ; VAR_420 < ( TYPE_50 ) VAR_421 -> VAR_422 . VAR_423 ; VAR_424 ++ ) { if ( VAR_425 != ( TYPE_51 ) VAR_426 ) { METHOD_77 ( VAR_427 , VAR_428 , "UnexpectedEndOfFile" , VAR_429 -> VAR_430 ) ; break ; } VAR_431 = METHOD_78 ( VAR_432 , 0 , 0 , VAR_433 -> VAR_434 , 1 , VAR_435 ) ; if ( VAR_436 == ( TYPE_52 * ) VAR_437 ) break ; VAR_438 = METHOD_79 ( VAR_439 , ( TYPE_53 * ) VAR_440 , VAR_441 , VAR_442 , VAR_443 , VAR_444 ) ; if ( METHOD_80 ( VAR_445 , VAR_446 ) == VAR_447 ) break ; if ( ( ( VAR_448 - VAR_449 -> VAR_450 . VAR_451 ) >= 0 ) && ( ( VAR_452 - VAR_453 -> VAR_454 . VAR_455 ) < ( TYPE_54 ) VAR_456 -> VAR_457 ) ) { VAR_458 = METHOD_81 ( VAR_459 , VAR_460 -> VAR_461 . VAR_462 , 0 , VAR_463 -> VAR_464 , 1 , VAR_465 ) ; VAR_466 = METHOD_82 ( VAR_467 , 0 , VAR_468 - VAR_469 -> VAR_470 . VAR_471 , VAR_472 -> VAR_473 , 1 , VAR_474 ) ; if ( ( VAR_475 == ( const TYPE_55 * ) VAR_476 ) || ( VAR_477 == ( TYPE_56 * ) VAR_478 ) ) break ; for ( VAR_479 = 0 ; VAR_480 < ( TYPE_57 ) VAR_481 -> VAR_482 ; VAR_483 ++ ) { METHOD_83 ( VAR_484 , METHOD_84 ( VAR_485 , VAR_486 ) , VAR_487 ) ; VAR_488 += METHOD_85 ( VAR_489 ) ; VAR_490 += METHOD_86 ( VAR_491 ) ; } if ( METHOD_87 ( VAR_492 , VAR_493 ) == VAR_494 ) break ; } VAR_495 = ( const unsigned TYPE_58 * ) METHOD_88 ( VAR_496 , VAR_497 , METHOD_89 ( VAR_498 ) , & VAR_499 ) ; } if ( VAR_500 -> VAR_501 == ( TYPE_59 * ) VAR_502 ) { VAR_503 = METHOD_90 ( VAR_504 , VAR_505 , 1 , 5 ) ; if ( VAR_506 == VAR_507 ) break ; } for ( VAR_508 = 0 ; VAR_509 < ( TYPE_60 ) VAR_510 -> VAR_511 . VAR_512 ; VAR_513 ++ ) { if ( VAR_514 != ( TYPE_61 ) VAR_515 ) { METHOD_91 ( VAR_516 , VAR_517 , "UnexpectedEndOfFile" , VAR_518 -> VAR_519 ) ; break ; } VAR_520 = METHOD_92 ( VAR_521 , 0 , 0 , VAR_522 -> VAR_523 , 1 , VAR_524 ) ; if ( VAR_525 == ( TYPE_62 * ) VAR_526 ) break ; VAR_527 = METHOD_93 ( VAR_528 , ( TYPE_63 * ) VAR_529 , VAR_530 , VAR_531 , VAR_532 , VAR_533 ) ; if ( METHOD_94 ( VAR_534 , VAR_535 ) == VAR_536 ) break ; if ( ( ( VAR_537 - VAR_538 -> VAR_539 . VAR_540 ) >= 0 ) && ( ( VAR_541 - VAR_542 -> VAR_543 . VAR_544 ) < ( TYPE_64 ) VAR_545 -> VAR_546 ) ) { VAR_547 = METHOD_95 ( VAR_548 , VAR_549 -> VAR_550 . VAR_551 , 0 , VAR_552 -> VAR_553 , 1 , VAR_554 ) ; VAR_555 = METHOD_96 ( VAR_556 , 0 , VAR_557 - VAR_558 -> VAR_559 . VAR_560 , VAR_561 -> VAR_562 , 1 , VAR_563 ) ; if ( ( VAR_564 == ( const TYPE_65 * ) VAR_565 ) || ( VAR_566 == ( TYPE_66 * ) VAR_567 ) ) break ; for ( VAR_568 = 0 ; VAR_569 < ( TYPE_67 ) VAR_570 -> VAR_571 ; VAR_572 ++ ) { METHOD_97 ( VAR_573 , METHOD_98 ( VAR_574 , VAR_575 ) , VAR_576 ) ; VAR_577 += METHOD_99 ( VAR_578 ) ; VAR_579 += METHOD_100 ( VAR_580 ) ; } if ( METHOD_101 ( VAR_581 , VAR_582 ) == VAR_583 ) break ; } VAR_584 = ( const unsigned TYPE_68 * ) METHOD_102 ( VAR_585 , VAR_586 , METHOD_103 ( VAR_587 ) , & VAR_588 ) ; } if ( VAR_589 -> VAR_590 == ( TYPE_69 * ) VAR_591 ) { VAR_592 = METHOD_104 ( VAR_593 , VAR_594 , 2 , 5 ) ; if ( VAR_595 == VAR_596 ) break ; } for ( VAR_597 = 0 ; VAR_598 < ( TYPE_70 ) VAR_599 -> VAR_600 . VAR_601 ; VAR_602 ++ ) { if ( VAR_603 != ( TYPE_71 ) VAR_604 ) { METHOD_105 ( VAR_605 , VAR_606 , "UnexpectedEndOfFile" , VAR_607 -> VAR_608 ) ; break ; } VAR_609 = METHOD_106 ( VAR_610 , 0 , 0 , VAR_611 -> VAR_612 , 1 , VAR_613 ) ; if ( VAR_614 == ( TYPE_72 * ) VAR_615 ) break ; VAR_616 = METHOD_107 ( VAR_617 , ( TYPE_73 * ) VAR_618 , VAR_619 , VAR_620 , VAR_621 , VAR_622 ) ; if ( METHOD_108 ( VAR_623 , VAR_624 ) == VAR_625 ) break ; if ( ( ( VAR_626 - VAR_627 -> VAR_628 . VAR_629 ) >= 0 ) && ( ( VAR_630 - VAR_631 -> VAR_632 . VAR_633 ) < ( TYPE_74 ) VAR_634 -> VAR_635 ) ) { VAR_636 = METHOD_109 ( VAR_637 , VAR_638 -> VAR_639 . VAR_640 , 0 , VAR_641 -> VAR_642 , 1 , VAR_643 ) ; VAR_644 = METHOD_110 ( VAR_645 , 0 , VAR_646 - VAR_647 -> VAR_648 . VAR_649 , VAR_650 -> VAR_651 , 1 , VAR_652 ) ; if ( ( VAR_653 == ( const TYPE_75 * ) VAR_654 ) || ( VAR_655 == ( TYPE_76 * ) VAR_656 ) ) break ; for ( VAR_657 = 0 ; VAR_658 < ( TYPE_77 ) VAR_659 -> VAR_660 ; VAR_661 ++ ) { METHOD_111 ( VAR_662 , METHOD_112 ( VAR_663 , VAR_664 ) , VAR_665 ) ; VAR_666 += METHOD_113 ( VAR_667 ) ; VAR_668 += METHOD_114 ( VAR_669 ) ; } if ( METHOD_115 ( VAR_670 , VAR_671 ) == VAR_672 ) break ; } VAR_673 = ( const unsigned TYPE_78 * ) METHOD_116 ( VAR_674 , VAR_675 , METHOD_117 ( VAR_676 ) , & VAR_677 ) ; } if ( VAR_678 -> VAR_679 == ( TYPE_79 * ) VAR_680 ) { VAR_681 = METHOD_118 ( VAR_682 , VAR_683 , 3 , 5 ) ; if ( VAR_684 == VAR_685 ) break ; } if ( VAR_686 -> VAR_687 != VAR_688 ) { for ( VAR_689 = 0 ; VAR_690 < ( TYPE_80 ) VAR_691 -> VAR_692 . VAR_693 ; VAR_694 ++ ) { if ( VAR_695 != ( TYPE_81 ) VAR_696 ) { METHOD_119 ( VAR_697 , VAR_698 , "UnexpectedEndOfFile" , VAR_699 -> VAR_700 ) ; break ; } VAR_701 = METHOD_120 ( VAR_702 , 0 , 0 , VAR_703 -> VAR_704 , 1 , VAR_705 ) ; if ( VAR_706 == ( TYPE_82 * ) VAR_707 ) break ; VAR_708 = METHOD_121 ( VAR_709 , ( TYPE_83 * ) VAR_710 , VAR_711 , VAR_712 , VAR_713 , VAR_714 ) ; if ( METHOD_122 ( VAR_715 , VAR_716 ) == VAR_717 ) break ; if ( ( ( VAR_718 - VAR_719 -> VAR_720 . VAR_721 ) >= 0 ) && ( ( VAR_722 - VAR_723 -> VAR_724 . VAR_725 ) < ( TYPE_84 ) VAR_726 -> VAR_727 ) ) { VAR_728 = METHOD_123 ( VAR_729 , VAR_730 -> VAR_731 . VAR_732 , 0 , VAR_733 -> VAR_734 , 1 , VAR_735 ) ; VAR_736 = METHOD_124 ( VAR_737 , 0 , VAR_738 - VAR_739 -> VAR_740 . VAR_741 , VAR_742 -> VAR_743 , 1 , VAR_744 ) ; if ( ( VAR_745 == ( const TYPE_85 * ) VAR_746 ) || ( VAR_747 == ( TYPE_86 * ) VAR_748 ) ) break ; for ( VAR_749 = 0 ; VAR_750 < ( TYPE_87 ) VAR_751 -> VAR_752 ; VAR_753 ++ ) { METHOD_125 ( VAR_754 , METHOD_126 ( VAR_755 , VAR_756 ) , VAR_757 ) ; VAR_758 += METHOD_127 ( VAR_759 ) ; VAR_760 += METHOD_128 ( VAR_761 ) ; } if ( METHOD_129 ( VAR_762 , VAR_763 ) == VAR_764 ) break ; } VAR_765 = ( const unsigned TYPE_88 * ) METHOD_130 ( VAR_766 , VAR_767 , METHOD_131 ( VAR_768 ) , & VAR_769 ) ; } if ( VAR_770 -> VAR_771 == ( TYPE_89 * ) VAR_772 ) { VAR_773 = METHOD_132 ( VAR_774 , VAR_775 , 4 , 5 ) ; if ( VAR_776 == VAR_777 ) break ; } } if ( VAR_778 -> VAR_779 == ( TYPE_90 * ) VAR_780 ) { VAR_781 = METHOD_133 ( VAR_782 , VAR_783 , 5 , 5 ) ; if ( VAR_784 == VAR_785 ) break ; } break ; } case VAR_786 : { METHOD_134 ( "Y" , VAR_787 -> VAR_788 ) ; VAR_789 = METHOD_135 ( VAR_790 , VAR_791 , VAR_792 , VAR_793 ) ; if ( VAR_794 == VAR_795 ) { VAR_796 = METHOD_136 ( VAR_797 ) ; VAR_798 = METHOD_137 ( VAR_799 ) ; return ( ( TYPE_91 * ) VAR_800 ) ; } if ( METHOD_138 ( VAR_801 , VAR_802 -> VAR_803 ) == VAR_804 ) METHOD_139 ( VAR_805 , VAR_806 , "UnexpectedEndOfFile" , VAR_807 -> VAR_808 ) ; VAR_809 = METHOD_140 ( VAR_810 , VAR_811 , VAR_812 ) ; for ( VAR_813 = 0 ; VAR_814 < ( TYPE_92 ) VAR_815 ; VAR_816 ++ ) for ( VAR_817 = 0 ; VAR_818 < ( TYPE_93 ) VAR_819 -> VAR_820 . VAR_821 ; VAR_822 ++ ) { VAR_823 = ( const unsigned TYPE_94 * ) METHOD_141 ( VAR_824 , VAR_825 , METHOD_142 ( VAR_826 ) , & VAR_827 ) ; if ( VAR_828 != ( TYPE_95 ) VAR_829 ) { METHOD_143 ( VAR_830 , VAR_831 , "UnexpectedEndOfFile" , VAR_832 -> VAR_833 ) ; break ; } } VAR_834 = ( const unsigned TYPE_96 * ) METHOD_144 ( VAR_835 , VAR_836 , METHOD_145 ( VAR_837 ) , & VAR_838 ) ; for ( VAR_839 = 0 ; VAR_840 < ( TYPE_97 ) VAR_841 -> VAR_842 . VAR_843 ; VAR_844 ++ ) { if ( VAR_845 != ( TYPE_98 ) VAR_846 ) { METHOD_146 ( VAR_847 , VAR_848 , "UnexpectedEndOfFile" , VAR_849 -> VAR_850 ) ; break ; } VAR_851 = METHOD_147 ( VAR_852 , 0 , 0 , VAR_853 -> VAR_854 , 1 , VAR_855 ) ; if ( VAR_856 == ( TYPE_99 * ) VAR_857 ) break ; VAR_858 = METHOD_148 ( VAR_859 , ( TYPE_100 * ) VAR_860 , VAR_861 , VAR_862 , VAR_863 , VAR_864 ) ; if ( METHOD_149 ( VAR_865 , VAR_866 ) == VAR_867 ) break ; if ( ( ( VAR_868 - VAR_869 -> VAR_870 . VAR_871 ) >= 0 ) && ( ( VAR_872 - VAR_873 -> VAR_874 . VAR_875 ) < ( TYPE_101 ) VAR_876 -> VAR_877 ) ) { VAR_878 = METHOD_150 ( VAR_879 , VAR_880 -> VAR_881 . VAR_882 , 0 , VAR_883 -> VAR_884 , 1 , VAR_885 ) ; VAR_886 = METHOD_151 ( VAR_887 , 0 , VAR_888 - VAR_889 -> VAR_890 . VAR_891 , VAR_892 -> VAR_893 , 1 , VAR_894 ) ; if ( ( VAR_895 == ( const TYPE_102 * ) VAR_896 ) || ( VAR_897 == ( TYPE_103 * ) VAR_898 ) ) break ; for ( VAR_899 = 0 ; VAR_900 < ( TYPE_104 ) VAR_901 -> VAR_902 ; VAR_903 ++ ) { METHOD_152 ( VAR_904 , METHOD_153 ( VAR_905 , VAR_906 ) , VAR_907 ) ; VAR_908 += METHOD_154 ( VAR_909 ) ; VAR_910 += METHOD_155 ( VAR_911 ) ; } if ( METHOD_156 ( VAR_912 , VAR_913 ) == VAR_914 ) break ; } VAR_915 = ( const unsigned TYPE_105 * ) METHOD_157 ( VAR_916 , VAR_917 , METHOD_158 ( VAR_918 ) , & VAR_919 ) ; } if ( VAR_920 -> VAR_921 == ( TYPE_106 * ) VAR_922 ) { VAR_923 = METHOD_159 ( VAR_924 , VAR_925 , 1 , 5 ) ; if ( VAR_926 == VAR_927 ) break ; } ( TYPE_107 ) METHOD_160 ( VAR_928 ) ; METHOD_161 ( "Cb" , VAR_929 -> VAR_930 ) ; VAR_931 = METHOD_162 ( VAR_932 , VAR_933 , VAR_934 , VAR_935 ) ; if ( VAR_936 == VAR_937 ) { VAR_938 = METHOD_163 ( VAR_939 ) ; VAR_940 = METHOD_164 ( VAR_941 ) ; return ( ( TYPE_108 * ) VAR_942 ) ; } VAR_943 = METHOD_165 ( VAR_944 , VAR_945 , VAR_946 ) ; for ( VAR_947 = 0 ; VAR_948 < ( TYPE_109 ) VAR_949 ; VAR_950 ++ ) for ( VAR_951 = 0 ; VAR_952 < ( TYPE_110 ) VAR_953 -> VAR_954 . VAR_955 ; VAR_956 ++ ) { VAR_957 = ( const unsigned TYPE_111 * ) METHOD_166 ( VAR_958 , VAR_959 , METHOD_167 ( VAR_960 ) , & VAR_961 ) ; if ( VAR_962 != ( TYPE_112 ) VAR_963 ) { METHOD_168 ( VAR_964 , VAR_965 , "UnexpectedEndOfFile" , VAR_966 -> VAR_967 ) ; break ; } } VAR_968 = ( const unsigned TYPE_113 * ) METHOD_169 ( VAR_969 , VAR_970 , METHOD_170 ( VAR_971 ) , & VAR_972 ) ; for ( VAR_973 = 0 ; VAR_974 < ( TYPE_114 ) VAR_975 -> VAR_976 . VAR_977 ; VAR_978 ++ ) { if ( VAR_979 != ( TYPE_115 ) VAR_980 ) { METHOD_171 ( VAR_981 , VAR_982 , "UnexpectedEndOfFile" , VAR_983 -> VAR_984 ) ; break ; } VAR_985 = METHOD_172 ( VAR_986 , 0 , 0 , VAR_987 -> VAR_988 , 1 , VAR_989 ) ; if ( VAR_990 == ( TYPE_116 * ) VAR_991 ) break ; VAR_992 = METHOD_173 ( VAR_993 , ( TYPE_117 * ) VAR_994 , VAR_995 , VAR_996 , VAR_997 , VAR_998 ) ; if ( METHOD_174 ( VAR_999 , VAR_1000 ) == VAR_1001 ) break ; if ( ( ( VAR_1002 - VAR_1003 -> VAR_1004 . VAR_1005 ) >= 0 ) && ( ( VAR_1006 - VAR_1007 -> VAR_1008 . VAR_1009 ) < ( TYPE_118 ) VAR_1010 -> VAR_1011 ) ) { VAR_1012 = METHOD_175 ( VAR_1013 , VAR_1014 -> VAR_1015 . VAR_1016 , 0 , VAR_1017 -> VAR_1018 , 1 , VAR_1019 ) ; VAR_1020 = METHOD_176 ( VAR_1021 , 0 , VAR_1022 - VAR_1023 -> VAR_1024 . VAR_1025 , VAR_1026 -> VAR_1027 , 1 , VAR_1028 ) ; if ( ( VAR_1029 == ( const TYPE_119 * ) VAR_1030 ) || ( VAR_1031 == ( TYPE_120 * ) VAR_1032 ) ) break ; for ( VAR_1033 = 0 ; VAR_1034 < ( TYPE_121 ) VAR_1035 -> VAR_1036 ; VAR_1037 ++ ) { METHOD_177 ( VAR_1038 , METHOD_178 ( VAR_1039 , VAR_1040 ) , VAR_1041 ) ; VAR_1042 += METHOD_179 ( VAR_1043 ) ; VAR_1044 += METHOD_180 ( VAR_1045 ) ; } if ( METHOD_181 ( VAR_1046 , VAR_1047 ) == VAR_1048 ) break ; } VAR_1049 = ( const unsigned TYPE_122 * ) METHOD_182 ( VAR_1050 , VAR_1051 , METHOD_183 ( VAR_1052 ) , & VAR_1053 ) ; } if ( VAR_1054 -> VAR_1055 == ( TYPE_123 * ) VAR_1056 ) { VAR_1057 = METHOD_184 ( VAR_1058 , VAR_1059 , 2 , 5 ) ; if ( VAR_1060 == VAR_1061 ) break ; } ( TYPE_124 ) METHOD_185 ( VAR_1062 ) ; METHOD_186 ( "Cr" , VAR_1063 -> VAR_1064 ) ; VAR_1065 = METHOD_187 ( VAR_1066 , VAR_1067 , VAR_1068 , VAR_1069 ) ; if ( VAR_1070 == VAR_1071 ) { VAR_1072 = METHOD_188 ( VAR_1073 ) ; VAR_1074 = METHOD_189 ( VAR_1075 ) ; return ( ( TYPE_125 * ) VAR_1076 ) ; } VAR_1077 = METHOD_190 ( VAR_1078 , VAR_1079 , VAR_1080 ) ; for ( VAR_1081 = 0 ; VAR_1082 < ( TYPE_126 ) VAR_1083 ; VAR_1084 ++ ) for ( VAR_1085 = 0 ; VAR_1086 < ( TYPE_127 ) VAR_1087 -> VAR_1088 . VAR_1089 ; VAR_1090 ++ ) { VAR_1091 = ( const unsigned TYPE_128 * ) METHOD_191 ( VAR_1092 , VAR_1093 , METHOD_192 ( VAR_1094 ) , & VAR_1095 ) ; if ( VAR_1096 != ( TYPE_129 ) VAR_1097 ) { METHOD_193 ( VAR_1098 , VAR_1099 , "UnexpectedEndOfFile" , VAR_1100 -> VAR_1101 ) ; break ; } } VAR_1102 = ( const unsigned TYPE_130 * ) METHOD_194 ( VAR_1103 , VAR_1104 , METHOD_195 ( VAR_1105 ) , & VAR_1106 ) ; for ( VAR_1107 = 0 ; VAR_1108 < ( TYPE_131 ) VAR_1109 -> VAR_1110 . VAR_1111 ; VAR_1112 ++ ) { if ( VAR_1113 != ( TYPE_132 ) VAR_1114 ) { METHOD_196 ( VAR_1115 , VAR_1116 , "UnexpectedEndOfFile" , VAR_1117 -> VAR_1118 ) ; break ; } VAR_1119 = METHOD_197 ( VAR_1120 , 0 , 0 , VAR_1121 -> VAR_1122 , 1 , VAR_1123 ) ; if ( VAR_1124 == ( TYPE_133 * ) VAR_1125 ) break ; VAR_1126 = METHOD_198 ( VAR_1127 , ( TYPE_134 * ) VAR_1128 , VAR_1129 , VAR_1130 , VAR_1131 , VAR_1132 ) ; if ( METHOD_199 ( VAR_1133 , VAR_1134 ) == VAR_1135 ) break ; if ( ( ( VAR_1136 - VAR_1137 -> VAR_1138 . VAR_1139 ) >= 0 ) && ( ( VAR_1140 - VAR_1141 -> VAR_1142 . VAR_1143 ) < ( TYPE_135 ) VAR_1144 -> VAR_1145 ) ) { VAR_1146 = METHOD_200 ( VAR_1147 , VAR_1148 -> VAR_1149 . VAR_1150 , 0 , VAR_1151 -> VAR_1152 , 1 , VAR_1153 ) ; VAR_1154 = METHOD_201 ( VAR_1155 , 0 , VAR_1156 - VAR_1157 -> VAR_1158 . VAR_1159 , VAR_1160 -> VAR_1161 , 1 , VAR_1162 ) ; if ( ( VAR_1163 == ( const TYPE_136 * ) VAR_1164 ) || ( VAR_1165 == ( TYPE_137 * ) VAR_1166 ) ) break ; for ( VAR_1167 = 0 ; VAR_1168 < ( TYPE_138 ) VAR_1169 -> VAR_1170 ; VAR_1171 ++ ) { METHOD_202 ( VAR_1172 , METHOD_203 ( VAR_1173 , VAR_1174 ) , VAR_1175 ) ; VAR_1176 += METHOD_204 ( VAR_1177 ) ; VAR_1178 += METHOD_205 ( VAR_1179 ) ; } if ( METHOD_206 ( VAR_1180 , VAR_1181 ) == VAR_1182 ) break ; } VAR_1183 = ( const unsigned TYPE_139 * ) METHOD_207 ( VAR_1184 , VAR_1185 , METHOD_208 ( VAR_1186 ) , & VAR_1187 ) ; } if ( VAR_1188 -> VAR_1189 == ( TYPE_140 * ) VAR_1190 ) { VAR_1191 = METHOD_209 ( VAR_1192 , VAR_1193 , 3 , 5 ) ; if ( VAR_1194 == VAR_1195 ) break ; } if ( VAR_1196 -> VAR_1197 != VAR_1198 ) { ( TYPE_141 ) METHOD_210 ( VAR_1199 ) ; METHOD_211 ( "A" , VAR_1200 -> VAR_1201 ) ; VAR_1202 = METHOD_212 ( VAR_1203 , VAR_1204 , VAR_1205 , VAR_1206 ) ; if ( VAR_1207 == VAR_1208 ) { VAR_1209 = METHOD_213 ( VAR_1210 ) ; VAR_1211 = METHOD_214 ( VAR_1212 ) ; return ( ( TYPE_142 * ) VAR_1213 ) ; } VAR_1214 = METHOD_215 ( VAR_1215 , VAR_1216 , VAR_1217 ) ; for ( VAR_1218 = 0 ; VAR_1219 < ( TYPE_143 ) VAR_1220 ; VAR_1221 ++ ) for ( VAR_1222 = 0 ; VAR_1223 < ( TYPE_144 ) VAR_1224 -> VAR_1225 . VAR_1226 ; VAR_1227 ++ ) { VAR_1228 = ( const unsigned TYPE_145 * ) METHOD_216 ( VAR_1229 , VAR_1230 , METHOD_217 ( VAR_1231 ) , & VAR_1232 ) ; if ( VAR_1233 != ( TYPE_146 ) VAR_1234 ) { METHOD_218 ( VAR_1235 , VAR_1236 , "UnexpectedEndOfFile" , VAR_1237 -> VAR_1238 ) ; break ; } } VAR_1239 = ( const unsigned TYPE_147 * ) METHOD_219 ( VAR_1240 , VAR_1241 , METHOD_220 ( VAR_1242 ) , & VAR_1243 ) ; for ( VAR_1244 = 0 ; VAR_1245 < ( TYPE_148 ) VAR_1246 -> VAR_1247 . VAR_1248 ; VAR_1249 ++ ) { if ( VAR_1250 != ( TYPE_149 ) VAR_1251 ) { METHOD_221 ( VAR_1252 , VAR_1253 , "UnexpectedEndOfFile" , VAR_1254 -> VAR_1255 ) ; break ; } VAR_1256 = METHOD_222 ( VAR_1257 , 0 , 0 , VAR_1258 -> VAR_1259 , 1 , VAR_1260 ) ; if ( VAR_1261 == ( TYPE_150 * ) VAR_1262 ) break ; VAR_1263 = METHOD_223 ( VAR_1264 , ( TYPE_151 * ) VAR_1265 , VAR_1266 , VAR_1267 , VAR_1268 , VAR_1269 ) ; if ( METHOD_224 ( VAR_1270 , VAR_1271 ) == VAR_1272 ) break ; if ( ( ( VAR_1273 - VAR_1274 -> VAR_1275 . VAR_1276 ) >= 0 ) && ( ( VAR_1277 - VAR_1278 -> VAR_1279 . VAR_1280 ) < ( TYPE_152 ) VAR_1281 -> VAR_1282 ) ) { VAR_1283 = METHOD_225 ( VAR_1284 , VAR_1285 -> VAR_1286 . VAR_1287 , 0 , VAR_1288 -> VAR_1289 , 1 , VAR_1290 ) ; VAR_1291 = METHOD_226 ( VAR_1292 , 0 , VAR_1293 - VAR_1294 -> VAR_1295 . VAR_1296 , VAR_1297 -> VAR_1298 , 1 , VAR_1299 ) ; if ( ( VAR_1300 == ( const TYPE_153 * ) VAR_1301 ) || ( VAR_1302 == ( TYPE_154 * ) VAR_1303 ) ) break ; for ( VAR_1304 = 0 ; VAR_1305 < ( TYPE_155 ) VAR_1306 -> VAR_1307 ; VAR_1308 ++ ) { METHOD_227 ( VAR_1309 , METHOD_228 ( VAR_1310 , VAR_1311 ) , VAR_1312 ) ; VAR_1313 += METHOD_229 ( VAR_1314 ) ; VAR_1315 += METHOD_230 ( VAR_1316 ) ; } if ( METHOD_231 ( VAR_1317 , VAR_1318 ) == VAR_1319 ) break ; } VAR_1320 = ( const unsigned TYPE_156 * ) METHOD_232 ( VAR_1321 , VAR_1322 , METHOD_233 ( VAR_1323 ) , & VAR_1324 ) ; } if ( VAR_1325 -> VAR_1326 == ( TYPE_157 * ) VAR_1327 ) { VAR_1328 = METHOD_234 ( VAR_1329 , VAR_1330 , 4 , 5 ) ; if ( VAR_1331 == VAR_1332 ) break ; } } if ( VAR_1333 -> VAR_1334 == ( TYPE_158 * ) VAR_1335 ) { VAR_1336 = METHOD_235 ( VAR_1337 , VAR_1338 , 5 , 5 ) ; if ( VAR_1339 == VAR_1340 ) break ; } break ; } } METHOD_236 ( VAR_1341 , VAR_1342 ) ; if ( VAR_1343 -> VAR_1344 != 0 ) if ( VAR_1345 -> VAR_1346 >= ( VAR_1347 -> VAR_1348 + VAR_1349 -> VAR_1350 - 1 ) ) break ; if ( VAR_1351 == ( TYPE_159 ) VAR_1352 ) { METHOD_237 ( VAR_1353 , VAR_1354 , VAR_1355 ) ; if ( METHOD_238 ( VAR_1356 ) == ( TYPE_160 * ) VAR_1357 ) { VAR_1358 = METHOD_239 ( VAR_1359 ) ; return ( ( TYPE_161 * ) VAR_1360 ) ; } VAR_1361 = METHOD_240 ( VAR_1362 ) ; VAR_1363 = METHOD_241 ( VAR_1364 , VAR_1365 , METHOD_242 ( VAR_1366 ) , METHOD_243 ( VAR_1367 ) ) ; if ( VAR_1368 == VAR_1369 ) break ; } VAR_1370 ++ ; } while ( VAR_1371 == ( TYPE_162 ) VAR_1372 ) ; VAR_1373 = METHOD_244 ( VAR_1374 ) ; VAR_1375 = METHOD_245 ( VAR_1376 ) ; ( TYPE_163 ) METHOD_246 ( VAR_1377 ) ; return ( METHOD_247 ( VAR_1378 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { switch ( VAR_4 ) { case '' : return ; case '>' : VAR_5 -> VAR_6 = VAR_7 ; return ; case '<' : VAR_8 -> VAR_9 = VAR_10 ; return ; case '!' : {  TYPE_5 VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ;  if ( ! METHOD_2 ( VAR_14 ) ) METHOD_3 ( VAR_15 , "alignment%disnotapowerof2" , VAR_16 ) ; VAR_17 -> VAR_18 = VAR_19 ; return ; } default : { const TYPE_6 * VAR_20 = METHOD_4 ( VAR_21 , "invalidformatoption\'%c\'" , VAR_22 ) ; METHOD_5 ( VAR_23 , 1 , VAR_24 ) ; } } }
TYPE_0 METHOD_0 ( ) {  METHOD_1 ( VAR_0 , "Usage:%s<codec><width><height><infile><outfile>\\n" , VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , unsigned TYPE_2 * * VAR_1 , unsigned TYPE_3 * * VAR_2 , TYPE_4 * * VAR_3 , unsigned TYPE_5 * VAR_4 , unsigned TYPE_6 * VAR_5 , unsigned TYPE_7 * VAR_6 ) { VAR_7 * VAR_8 ; const unsigned TYPE_8 VAR_9 = 512 ; TYPE_9 VAR_10 [ 512 + 1 ] ; unsigned TYPE_10 VAR_11 = 0 ; unsigned TYPE_11 * VAR_12 = VAR_13 ; unsigned TYPE_12 VAR_14 = 0 ; VAR_15 = METHOD_1 ( VAR_16 , "r" ) ; if ( VAR_17 == VAR_18 ) { METHOD_2 ( VAR_19 , "cannotopenCSRfile!\\n" ) ; return ; } while ( METHOD_3 ( VAR_20 , VAR_21 , VAR_22 ) != VAR_23 ) { if ( METHOD_4 ( VAR_24 ) == VAR_25 ) { METHOD_5 ( VAR_26 , "couldnotreadfilelength!\\n" ) ; return ; } if ( VAR_27 [ 0 ] == '%' ) { continue ; } else { if ( VAR_28 == 0 ) {  if ( METHOD_6 ( VAR_29 , "%u%u%u" , VAR_30 , VAR_31 , VAR_32 ) == 3 ) {  * VAR_33 = ( unsigned TYPE_13 * ) METHOD_7 ( sizeof ( unsigned TYPE_14 ) * ( * VAR_34 ) ) ; * VAR_35 = ( unsigned TYPE_15 * ) METHOD_8 ( sizeof ( unsigned TYPE_16 ) * ( * VAR_36 + 1 ) ) ; * VAR_37 = ( TYPE_17 * ) METHOD_9 ( sizeof ( TYPE_18 ) * ( * VAR_38 ) ) ; VAR_39 = ( unsigned TYPE_19 * ) METHOD_10 ( sizeof ( unsigned TYPE_20 ) * ( * VAR_40 ) ) ; if ( ( * VAR_41 == VAR_42 ) || ( * VAR_43 == VAR_44 ) || ( * VAR_45 == VAR_46 ) || ( VAR_47 == VAR_48 ) ) { METHOD_11 ( VAR_49 , "couldnotallocatespdata!\\n" ) ; return ; } METHOD_12 ( * VAR_50 , 0 , sizeof ( unsigned TYPE_21 ) * ( * VAR_51 + 1 ) ) ; METHOD_13 ( * VAR_52 , 0 , sizeof ( unsigned TYPE_22 ) * ( * VAR_53 ) ) ; METHOD_14 ( * VAR_54 , 0 , sizeof ( TYPE_23 ) * ( * VAR_55 ) ) ; METHOD_15 ( VAR_56 , 0 , sizeof ( unsigned TYPE_24 ) * ( * VAR_57 ) ) ; for ( VAR_58 = 0 ; VAR_59 < ( * VAR_60 + 1 ) ; VAR_61 ++ ) ( * VAR_62 ) [ VAR_63 ] = ( * VAR_64 ) ; ( * VAR_65 ) [ 0 ] = 0 ; VAR_66 = 0 ; VAR_67 = 1 ; } else { METHOD_16 ( VAR_68 , "couldnotcsrdescription!\\n" ) ; return ; } } else { unsigned TYPE_25 VAR_69 , VAR_70 ; TYPE_26 VAR_71 ; if ( METHOD_17 ( VAR_72 , "%u%u%lf" , & VAR_73 , & VAR_74 , & VAR_75 ) != 3 ) { METHOD_18 ( VAR_76 , "couldnotreadelement!\\n" ) ; return ; } VAR_77 -- ; VAR_78 -- ; ( * VAR_79 ) [ VAR_80 ] = VAR_81 ; ( * VAR_82 ) [ VAR_83 ] = VAR_84 ; VAR_85 ++ ; VAR_86 [ VAR_87 ] = 1 ; ( * VAR_88 ) [ VAR_89 + 1 ] = VAR_90 ; } } } METHOD_19 ( VAR_91 ) ; if ( VAR_92 != ( * VAR_93 ) ) { METHOD_20 ( VAR_94 , "wewerenotabletoreadallelements!\\n" ) ; return ; } for ( VAR_95 = 0 ; VAR_96 < ( * VAR_97 ) ; VAR_98 ++ ) { if ( VAR_99 [ VAR_100 ] == 0 ) { ( * VAR_101 ) [ VAR_102 + 1 ] = ( * VAR_103 ) [ VAR_104 ] ; } } if ( VAR_105 != VAR_106 ) { METHOD_21 ( VAR_107 ) ; } }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; register TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; TYPE_10 VAR_10 , VAR_11 ; unsigned TYPE_11 * VAR_12 ; METHOD_1 ( VAR_13 != ( const TYPE_12 * ) VAR_14 ) ; METHOD_2 ( VAR_15 -> VAR_16 == VAR_17 ) ; if ( VAR_18 -> VAR_19 != VAR_20 ) ( TYPE_13 ) METHOD_3 ( VAR_21 , METHOD_4 ( ) , "%s" , VAR_22 -> VAR_23 ) ; METHOD_5 ( VAR_24 != ( TYPE_14 * ) VAR_25 ) ; METHOD_6 ( VAR_26 -> VAR_27 == VAR_28 ) ; VAR_29 = METHOD_7 ( VAR_30 ) ; if ( ( VAR_31 -> VAR_32 == 0 ) || ( VAR_33 -> VAR_34 == 0 ) ) METHOD_8 ( VAR_35 , "MustSpecifyImageSize" ) ; METHOD_9 ( VAR_36 , VAR_37 ) ; if ( VAR_38 -> VAR_39 != VAR_40 ) { VAR_41 = METHOD_10 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 == VAR_47 ) { VAR_48 = METHOD_11 ( VAR_49 ) ; return ( ( TYPE_15 * ) VAR_50 ) ; } if ( METHOD_12 ( VAR_51 , VAR_52 -> VAR_53 ) == VAR_54 ) METHOD_13 ( VAR_55 , VAR_56 , "UnexpectedEndOfFile" , VAR_57 -> VAR_58 ) ; } VAR_59 = METHOD_14 ( VAR_60 , VAR_61 -> VAR_62 . VAR_63 , 1 , VAR_64 , VAR_65 ) ; ( TYPE_16 ) METHOD_15 ( VAR_66 , VAR_67 ) ; VAR_68 = METHOD_16 ( VAR_69 , VAR_70 ) ; if ( VAR_71 == ( TYPE_17 * ) VAR_72 ) METHOD_17 ( VAR_73 , "MemoryAllocationFailed" ) ; VAR_74 = METHOD_18 ( VAR_75 ) ; VAR_76 = VAR_77 ; if ( METHOD_19 ( VAR_78 -> VAR_79 , "CMYKA" ) == 0 ) { VAR_80 = VAR_81 ; VAR_82 -> VAR_83 = VAR_84 ; } if ( VAR_85 -> VAR_86 != 0 ) while ( VAR_87 -> VAR_88 < VAR_89 -> VAR_90 ) { VAR_91 -> VAR_92 ++ ; VAR_93 = METHOD_20 ( VAR_94 , VAR_95 , VAR_96 ) ; for ( VAR_97 = 0 ; VAR_98 < ( TYPE_18 ) VAR_99 -> VAR_100 ; VAR_101 ++ ) { VAR_102 = METHOD_21 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 != ( TYPE_19 ) VAR_107 ) break ; } } VAR_108 = 0 ; VAR_109 = 0 ; VAR_110 = 0 ; do { if ( ( VAR_111 -> VAR_112 != VAR_113 ) && ( VAR_114 -> VAR_115 != 0 ) ) if ( VAR_116 -> VAR_117 >= ( VAR_118 -> VAR_119 + VAR_120 -> VAR_121 - 1 ) )  break ;  METHOD_22 ( VAR_122 , VAR_123 ) ; switch ( VAR_124 -> VAR_125 ) { case VAR_126 : default : { if ( VAR_127 == 0 ) { VAR_128 = METHOD_23 ( VAR_129 , VAR_130 , VAR_131 ) ; VAR_132 = METHOD_24 ( VAR_133 , VAR_134 , VAR_135 ) ; } for ( VAR_136 = 0 ; VAR_137 < ( TYPE_20 ) VAR_138 -> VAR_139 . VAR_140 ; VAR_141 ++ ) { register const TYPE_21 * VAR_142 VAR_143 ; register const TYPE_22 * VAR_144 VAR_145 ; register TYPE_23 * VAR_146 VAR_147 ; register TYPE_24 * VAR_148 VAR_149 ; register TYPE_25 VAR_150 ; if ( VAR_151 != ( TYPE_26 ) VAR_152 ) { METHOD_25 ( VAR_153 , VAR_154 , "UnexpectedEndOfFile" , VAR_155 -> VAR_156 ) ; break ; } VAR_157 = METHOD_26 ( VAR_158 , 0 , 0 , VAR_159 -> VAR_160 , 1 , VAR_161 ) ; if ( VAR_162 == ( TYPE_27 * ) VAR_163 ) break ; VAR_164 = METHOD_27 ( VAR_165 , ( TYPE_28 * ) VAR_166 , VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ; if ( METHOD_28 ( VAR_171 , VAR_172 ) == VAR_173 ) break ; if ( ( ( VAR_174 - VAR_175 -> VAR_176 . VAR_177 ) >= 0 ) && ( ( VAR_178 - VAR_179 -> VAR_180 . VAR_181 ) < ( TYPE_29 ) VAR_182 -> VAR_183 ) ) { VAR_184 = METHOD_29 ( VAR_185 , VAR_186 -> VAR_187 . VAR_188 , 0 , VAR_189 -> VAR_190 , 1 , VAR_191 ) ; VAR_192 = METHOD_30 ( VAR_193 , 0 , VAR_194 - VAR_195 -> VAR_196 . VAR_197 , VAR_198 -> VAR_199 , 1 , VAR_200 ) ; if ( ( VAR_201 == ( const TYPE_30 * ) VAR_202 ) || ( VAR_203 == ( TYPE_31 * ) VAR_204 ) ) break ; VAR_205 = METHOD_31 ( VAR_206 ) ; VAR_207 = METHOD_32 ( VAR_208 ) ; for ( VAR_209 = 0 ; VAR_210 < ( TYPE_32 ) VAR_211 -> VAR_212 ; VAR_213 ++ ) { METHOD_33 ( VAR_214 , METHOD_34 ( VAR_215 ) ) ; METHOD_35 ( VAR_216 , METHOD_36 ( VAR_217 ) ) ; METHOD_37 ( VAR_218 , METHOD_38 ( VAR_219 ) ) ; METHOD_39 ( VAR_220 + VAR_221 , METHOD_40 ( VAR_222 + VAR_223 -> VAR_224 . VAR_225 + VAR_226 ) ) ; METHOD_41 ( VAR_227 , VAR_228 ) ; if ( VAR_229 -> VAR_230 != VAR_231 ) METHOD_42 ( VAR_232 , METHOD_43 ( VAR_233 ) ) ; VAR_234 ++ ; VAR_235 ++ ; } if ( METHOD_44 ( VAR_236 , VAR_237 ) == VAR_238 ) break ; } if ( VAR_239 -> VAR_240 == ( TYPE_33 * ) VAR_241 ) { VAR_242 = METHOD_45 ( VAR_243 , VAR_244 , ( TYPE_34 ) VAR_245 , VAR_246 -> VAR_247 ) ; if ( VAR_248 == VAR_249 ) break ; } VAR_250 = METHOD_46 ( VAR_251 , VAR_252 , VAR_253 ) ; } break ; } case VAR_254 : { static TYPE_35 VAR_255 [ 5 ] = { VAR_256 , VAR_257 , VAR_258 , VAR_259 , VAR_260 } ; if ( VAR_261 == 0 ) { VAR_262 = METHOD_47 ( VAR_263 , VAR_264 , VAR_265 ) ; VAR_266 = METHOD_48 ( VAR_267 , VAR_268 , VAR_269 ) ; } for ( VAR_270 = 0 ; VAR_271 < ( TYPE_36 ) VAR_272 -> VAR_273 . VAR_274 ; VAR_275 ++ ) { register const TYPE_37 * VAR_276 VAR_277 ; register const TYPE_38 * VAR_278 VAR_279 ; register TYPE_39 * VAR_280 VAR_281 ; register TYPE_40 * VAR_282 VAR_283 ; register TYPE_41 VAR_284 ; if ( VAR_285 != ( TYPE_42 ) VAR_286 ) { METHOD_49 ( VAR_287 , VAR_288 , "UnexpectedEndOfFile" , VAR_289 -> VAR_290 ) ; break ; } for ( VAR_291 = 0 ; VAR_292 < ( VAR_293 -> VAR_294 != VAR_295 ? 5 : 4 ) ; VAR_296 ++ ) { VAR_297 = VAR_298 [ VAR_299 ] ; VAR_300 = METHOD_50 ( VAR_301 , 0 , 0 , VAR_302 -> VAR_303 , 1 , VAR_304 ) ; if ( VAR_305 == ( TYPE_43 * ) VAR_306 ) break ; VAR_307 = METHOD_51 ( VAR_308 , ( TYPE_44 * ) VAR_309 , VAR_310 , VAR_311 , VAR_312 , VAR_313 ) ; if ( METHOD_52 ( VAR_314 , VAR_315 ) == VAR_316 ) break ; if ( ( ( VAR_317 - VAR_318 -> VAR_319 . VAR_320 ) >= 0 ) && ( ( VAR_321 - VAR_322 -> VAR_323 . VAR_324 ) < ( TYPE_45 ) VAR_325 -> VAR_326 ) ) { VAR_327 = METHOD_53 ( VAR_328 , VAR_329 -> VAR_330 . VAR_331 , 0 , VAR_332 -> VAR_333 , 1 , VAR_334 ) ; VAR_335 = METHOD_54 ( VAR_336 , 0 , VAR_337 - VAR_338 -> VAR_339 . VAR_340 , VAR_341 -> VAR_342 , 1 , VAR_343 ) ; if ( ( VAR_344 == ( const TYPE_46 * ) VAR_345 ) || ( VAR_346 == ( TYPE_47 * ) VAR_347 ) ) break ; VAR_348 = METHOD_55 ( VAR_349 ) ; VAR_350 = METHOD_56 ( VAR_351 ) ; for ( VAR_352 = 0 ; VAR_353 < ( TYPE_48 ) VAR_354 -> VAR_355 ; VAR_356 ++ ) { switch ( VAR_357 ) { case VAR_358 : { METHOD_57 ( VAR_359 , METHOD_58 ( VAR_360 ) ) ; break ; } case VAR_361 : { METHOD_59 ( VAR_362 , METHOD_60 ( VAR_363 ) ) ; break ; } case VAR_364 : { METHOD_61 ( VAR_365 , METHOD_62 ( VAR_366 ) ) ; break ; } case VAR_367 : { METHOD_63 ( VAR_368 + VAR_369 , METHOD_64 ( VAR_370 + VAR_371 -> VAR_372 . VAR_373 + VAR_374 ) ) ; break ; } case VAR_375 : { METHOD_65 ( VAR_376 , METHOD_66 ( VAR_377 ) ) ; break ; } default : break ; } VAR_378 ++ ; VAR_379 ++ ; } if ( METHOD_67 ( VAR_380 , VAR_381 ) == VAR_382 ) break ; } VAR_383 = METHOD_68 ( VAR_384 , VAR_385 , VAR_386 ) ; } if ( VAR_387 -> VAR_388 == ( TYPE_49 * ) VAR_389 ) { VAR_390 = METHOD_69 ( VAR_391 , VAR_392 , ( TYPE_50 ) VAR_393 , VAR_394 -> VAR_395 ) ; if ( VAR_396 == VAR_397 ) break ; } } break ; } case VAR_398 : { if ( VAR_399 == 0 ) { VAR_400 = METHOD_70 ( VAR_401 , VAR_402 , VAR_403 ) ; VAR_404 = METHOD_71 ( VAR_405 , VAR_406 , VAR_407 ) ; } for ( VAR_408 = 0 ; VAR_409 < ( TYPE_51 ) VAR_410 -> VAR_411 . VAR_412 ; VAR_413 ++ ) { register const TYPE_52 * VAR_414 VAR_415 ; register TYPE_53 * VAR_416 VAR_417 ; register TYPE_54 VAR_418 ; if ( VAR_419 != ( TYPE_55 ) VAR_420 ) { METHOD_72 ( VAR_421 , VAR_422 , "UnexpectedEndOfFile" , VAR_423 -> VAR_424 ) ; break ; } VAR_425 = METHOD_73 ( VAR_426 , 0 , 0 , VAR_427 -> VAR_428 , 1 , VAR_429 ) ; if ( VAR_430 == ( TYPE_56 * ) VAR_431 ) break ; VAR_432 = METHOD_74 ( VAR_433 , ( TYPE_57 * ) VAR_434 , VAR_435 , VAR_436 , VAR_437 , VAR_438 ) ; if ( METHOD_75 ( VAR_439 , VAR_440 ) == VAR_441 ) break ; if ( ( ( VAR_442 - VAR_443 -> VAR_444 . VAR_445 ) >= 0 ) && ( ( VAR_446 - VAR_447 -> VAR_448 . VAR_449 ) < ( TYPE_58 ) VAR_450 -> VAR_451 ) ) { VAR_452 = METHOD_76 ( VAR_453 , VAR_454 -> VAR_455 . VAR_456 , 0 , VAR_457 -> VAR_458 , 1 , VAR_459 ) ; VAR_460 = METHOD_77 ( VAR_461 , 0 , VAR_462 - VAR_463 -> VAR_464 . VAR_465 , VAR_466 -> VAR_467 , 1 , VAR_468 ) ; if ( ( VAR_469 == ( const TYPE_59 * ) VAR_470 ) || ( VAR_471 == ( TYPE_60 * ) VAR_472 ) ) break ; for ( VAR_473 = 0 ; VAR_474 < ( TYPE_61 ) VAR_475 -> VAR_476 ; VAR_477 ++ ) { METHOD_78 ( VAR_478 , METHOD_79 ( VAR_479 ) ) ; VAR_480 ++ ; VAR_481 ++ ; } if ( METHOD_80 ( VAR_482 , VAR_483 ) == VAR_484 ) break ; } VAR_485 = METHOD_81 ( VAR_486 , VAR_487 , VAR_488 ) ; } if ( VAR_489 -> VAR_490 == ( TYPE_62 * ) VAR_491 ) { VAR_492 = METHOD_82 ( VAR_493 , VAR_494 , 1 , 6 ) ; if ( VAR_495 == VAR_496 ) break ; } for ( VAR_497 = 0 ; VAR_498 < ( TYPE_63 ) VAR_499 -> VAR_500 . VAR_501 ; VAR_502 ++ ) { register const TYPE_64 * VAR_503 VAR_504 ; register TYPE_65 * VAR_505 VAR_506 ; register TYPE_66 VAR_507 ; if ( VAR_508 != ( TYPE_67 ) VAR_509 ) { METHOD_83 ( VAR_510 , VAR_511 , "UnexpectedEndOfFile" , VAR_512 -> VAR_513 ) ; break ; } VAR_514 = METHOD_84 ( VAR_515 , 0 , 0 , VAR_516 -> VAR_517 , 1 , VAR_518 ) ; if ( VAR_519 == ( TYPE_68 * ) VAR_520 ) break ; VAR_521 = METHOD_85 ( VAR_522 , ( TYPE_69 * ) VAR_523 , VAR_524 , VAR_525 , VAR_526 , VAR_527 ) ; if ( METHOD_86 ( VAR_528 , VAR_529 ) == VAR_530 ) break ; if ( ( ( VAR_531 - VAR_532 -> VAR_533 . VAR_534 ) >= 0 ) && ( ( VAR_535 - VAR_536 -> VAR_537 . VAR_538 ) < ( TYPE_70 ) VAR_539 -> VAR_540 ) ) { VAR_541 = METHOD_87 ( VAR_542 , VAR_543 -> VAR_544 . VAR_545 , 0 , VAR_546 -> VAR_547 , 1 , VAR_548 ) ; VAR_549 = METHOD_88 ( VAR_550 , 0 , VAR_551 - VAR_552 -> VAR_553 . VAR_554 , VAR_555 -> VAR_556 , 1 , VAR_557 ) ; if ( ( VAR_558 == ( const TYPE_71 * ) VAR_559 ) || ( VAR_560 == ( TYPE_72 * ) VAR_561 ) ) break ; for ( VAR_562 = 0 ; VAR_563 < ( TYPE_73 ) VAR_564 -> VAR_565 ; VAR_566 ++ ) { METHOD_89 ( VAR_567 , METHOD_90 ( VAR_568 ) ) ; VAR_569 ++ ; VAR_570 ++ ; } if ( METHOD_91 ( VAR_571 , VAR_572 ) == VAR_573 ) break ; } VAR_574 = METHOD_92 ( VAR_575 , VAR_576 , VAR_577 ) ; } if ( VAR_578 -> VAR_579 == ( TYPE_74 * ) VAR_580 ) { VAR_581 = METHOD_93 ( VAR_582 , VAR_583 , 2 , 6 ) ; if ( VAR_584 == VAR_585 ) break ; } for ( VAR_586 = 0 ; VAR_587 < ( TYPE_75 ) VAR_588 -> VAR_589 . VAR_590 ; VAR_591 ++ ) { register const TYPE_76 * VAR_592 VAR_593 ; register TYPE_77 * VAR_594 VAR_595 ; register TYPE_78 VAR_596 ; if ( VAR_597 != ( TYPE_79 ) VAR_598 ) { METHOD_94 ( VAR_599 , VAR_600 , "UnexpectedEndOfFile" , VAR_601 -> VAR_602 ) ; break ; } VAR_603 = METHOD_95 ( VAR_604 , 0 , 0 , VAR_605 -> VAR_606 , 1 , VAR_607 ) ; if ( VAR_608 == ( TYPE_80 * ) VAR_609 ) break ; VAR_610 = METHOD_96 ( VAR_611 , ( TYPE_81 * ) VAR_612 , VAR_613 , VAR_614 , VAR_615 , VAR_616 ) ; if ( METHOD_97 ( VAR_617 , VAR_618 ) == VAR_619 ) break ; if ( ( ( VAR_620 - VAR_621 -> VAR_622 . VAR_623 ) >= 0 ) && ( ( VAR_624 - VAR_625 -> VAR_626 . VAR_627 ) < ( TYPE_82 ) VAR_628 -> VAR_629 ) ) { VAR_630 = METHOD_98 ( VAR_631 , VAR_632 -> VAR_633 . VAR_634 , 0 , VAR_635 -> VAR_636 , 1 , VAR_637 ) ; VAR_638 = METHOD_99 ( VAR_639 , 0 , VAR_640 - VAR_641 -> VAR_642 . VAR_643 , VAR_644 -> VAR_645 , 1 , VAR_646 ) ; if ( ( VAR_647 == ( const TYPE_83 * ) VAR_648 ) || ( VAR_649 == ( TYPE_84 * ) VAR_650 ) ) break ; for ( VAR_651 = 0 ; VAR_652 < ( TYPE_85 ) VAR_653 -> VAR_654 ; VAR_655 ++ ) { METHOD_100 ( VAR_656 , METHOD_101 ( VAR_657 ) ) ; VAR_658 ++ ; VAR_659 ++ ; } if ( METHOD_102 ( VAR_660 , VAR_661 ) == VAR_662 ) break ; } VAR_663 = METHOD_103 ( VAR_664 , VAR_665 , VAR_666 ) ; } if ( VAR_667 -> VAR_668 == ( TYPE_86 * ) VAR_669 ) { VAR_670 = METHOD_104 ( VAR_671 , VAR_672 , 3 , 6 ) ; if ( VAR_673 == VAR_674 ) break ; } for ( VAR_675 = 0 ; VAR_676 < ( TYPE_87 ) VAR_677 -> VAR_678 . VAR_679 ; VAR_680 ++ ) { register const TYPE_88 * VAR_681 VAR_682 ; register const TYPE_89 * VAR_683 VAR_684 ; register TYPE_90 * VAR_685 VAR_686 ; register TYPE_91 * VAR_687 VAR_688 ; register TYPE_92 VAR_689 ; if ( VAR_690 != ( TYPE_93 ) VAR_691 ) { METHOD_105 ( VAR_692 , VAR_693 , "UnexpectedEndOfFile" , VAR_694 -> VAR_695 ) ; break ; } VAR_696 = METHOD_106 ( VAR_697 , 0 , 0 , VAR_698 -> VAR_699 , 1 , VAR_700 ) ; if ( VAR_701 == ( TYPE_94 * ) VAR_702 ) break ; VAR_703 = METHOD_107 ( VAR_704 , ( TYPE_95 * ) VAR_705 , VAR_706 , VAR_707 , VAR_708 , VAR_709 ) ; if ( METHOD_108 ( VAR_710 , VAR_711 ) == VAR_712 ) break ; if ( ( ( VAR_713 - VAR_714 -> VAR_715 . VAR_716 ) >= 0 ) && ( ( VAR_717 - VAR_718 -> VAR_719 . VAR_720 ) < ( TYPE_96 ) VAR_721 -> VAR_722 ) ) { VAR_723 = METHOD_109 ( VAR_724 , VAR_725 -> VAR_726 . VAR_727 , 0 , VAR_728 -> VAR_729 , 1 , VAR_730 ) ; VAR_731 = METHOD_110 ( VAR_732 , 0 , VAR_733 - VAR_734 -> VAR_735 . VAR_736 , VAR_737 -> VAR_738 , 1 , VAR_739 ) ; if ( ( VAR_740 == ( const TYPE_97 * ) VAR_741 ) || ( VAR_742 == ( TYPE_98 * ) VAR_743 ) ) break ; VAR_744 = METHOD_111 ( VAR_745 ) ; VAR_746 = METHOD_112 ( VAR_747 ) ; for ( VAR_748 = 0 ; VAR_749 < ( TYPE_99 ) VAR_750 -> VAR_751 ; VAR_752 ++ ) { METHOD_113 ( VAR_753 + VAR_754 , METHOD_114 ( VAR_755 + VAR_756 -> VAR_757 . VAR_758 + VAR_759 ) ) ; VAR_760 ++ ; VAR_761 ++ ; } if ( METHOD_115 ( VAR_762 , VAR_763 ) == VAR_764 ) break ; } VAR_765 = METHOD_116 ( VAR_766 , VAR_767 , VAR_768 ) ; } if ( VAR_769 -> VAR_770 == ( TYPE_100 * ) VAR_771 ) { VAR_772 = METHOD_117 ( VAR_773 , VAR_774 , 4 , 6 ) ; if ( VAR_775 == VAR_776 ) break ; } if ( VAR_777 -> VAR_778 != VAR_779 ) { for ( VAR_780 = 0 ; VAR_781 < ( TYPE_101 ) VAR_782 -> VAR_783 . VAR_784 ; VAR_785 ++ ) { register const TYPE_102 * VAR_786 VAR_787 ; register TYPE_103 * VAR_788 VAR_789 ; register TYPE_104 VAR_790 ; if ( VAR_791 != ( TYPE_105 ) VAR_792 ) { METHOD_118 ( VAR_793 , VAR_794 , "UnexpectedEndOfFile" , VAR_795 -> VAR_796 ) ; break ; } VAR_797 = METHOD_119 ( VAR_798 , 0 , 0 , VAR_799 -> VAR_800 , 1 , VAR_801 ) ; if ( VAR_802 == ( TYPE_106 * ) VAR_803 ) break ; VAR_804 = METHOD_120 ( VAR_805 , ( TYPE_107 * ) VAR_806 , VAR_807 , VAR_808 , VAR_809 , VAR_810 ) ; if ( METHOD_121 ( VAR_811 , VAR_812 ) == VAR_813 ) break ; if ( ( ( VAR_814 - VAR_815 -> VAR_816 . VAR_817 ) >= 0 ) && ( ( VAR_818 - VAR_819 -> VAR_820 . VAR_821 ) < ( TYPE_108 ) VAR_822 -> VAR_823 ) ) { VAR_824 = METHOD_122 ( VAR_825 , VAR_826 -> VAR_827 . VAR_828 , 0 , VAR_829 -> VAR_830 , 1 , VAR_831 ) ; VAR_832 = METHOD_123 ( VAR_833 , 0 , VAR_834 - VAR_835 -> VAR_836 . VAR_837 , VAR_838 -> VAR_839 , 1 , VAR_840 ) ; if ( ( VAR_841 == ( const TYPE_109 * ) VAR_842 ) || ( VAR_843 == ( TYPE_110 * ) VAR_844 ) ) break ; for ( VAR_845 = 0 ; VAR_846 < ( TYPE_111 ) VAR_847 -> VAR_848 ; VAR_849 ++ ) { METHOD_124 ( VAR_850 , METHOD_125 ( VAR_851 ) ) ; VAR_852 ++ ; VAR_853 ++ ; } if ( METHOD_126 ( VAR_854 , VAR_855 ) == VAR_856 ) break ; } VAR_857 = METHOD_127 ( VAR_858 , VAR_859 , VAR_860 ) ; } if ( VAR_861 -> VAR_862 == ( TYPE_112 * ) VAR_863 ) { VAR_864 = METHOD_128 ( VAR_865 , VAR_866 , 5 , 6 ) ; if ( VAR_867 == VAR_868 ) break ; } } if ( VAR_869 -> VAR_870 == ( TYPE_113 * ) VAR_871 ) { VAR_872 = METHOD_129 ( VAR_873 , VAR_874 , 6 , 6 ) ; if ( VAR_875 == VAR_876 ) break ; } break ; } case VAR_877 : { METHOD_130 ( "C" , VAR_878 -> VAR_879 ) ; VAR_880 = METHOD_131 ( VAR_881 , VAR_882 , VAR_883 , VAR_884 ) ; if ( VAR_885 == VAR_886 ) { VAR_887 = METHOD_132 ( VAR_888 ) ; VAR_889 = METHOD_133 ( VAR_890 ) ; return ( ( TYPE_114 * ) VAR_891 ) ; } if ( METHOD_134 ( VAR_892 , VAR_893 -> VAR_894 ) == VAR_895 ) METHOD_135 ( VAR_896 , VAR_897 , "UnexpectedEndOfFile" , VAR_898 -> VAR_899 ) ; VAR_900 = METHOD_136 ( VAR_901 , VAR_902 , VAR_903 ) ; for ( VAR_904 = 0 ; VAR_905 < ( TYPE_115 ) VAR_906 ; VAR_907 ++ ) for ( VAR_908 = 0 ; VAR_909 < ( TYPE_116 ) VAR_910 -> VAR_911 . VAR_912 ; VAR_913 ++ ) if ( METHOD_137 ( VAR_914 , VAR_915 , VAR_916 ) != ( TYPE_117 ) VAR_917 ) { METHOD_138 ( VAR_918 , VAR_919 , "UnexpectedEndOfFile" , VAR_920 -> VAR_921 ) ; break ; } VAR_922 = METHOD_139 ( VAR_923 , VAR_924 , VAR_925 ) ; for ( VAR_926 = 0 ; VAR_927 < ( TYPE_118 ) VAR_928 -> VAR_929 . VAR_930 ; VAR_931 ++ ) { register const TYPE_119 * VAR_932 VAR_933 ; register TYPE_120 * VAR_934 VAR_935 ; register TYPE_121 VAR_936 ; if ( VAR_937 != ( TYPE_122 ) VAR_938 ) { METHOD_140 ( VAR_939 , VAR_940 , "UnexpectedEndOfFile" , VAR_941 -> VAR_942 ) ; break ; } VAR_943 = METHOD_141 ( VAR_944 , 0 , 0 , VAR_945 -> VAR_946 , 1 , VAR_947 ) ; if ( VAR_948 == ( TYPE_123 * ) VAR_949 ) break ; VAR_950 = METHOD_142 ( VAR_951 , ( TYPE_124 * ) VAR_952 , VAR_953 , VAR_954 , VAR_955 , VAR_956 ) ; if ( METHOD_143 ( VAR_957 , VAR_958 ) == VAR_959 ) break ; if ( ( ( VAR_960 - VAR_961 -> VAR_962 . VAR_963 ) >= 0 ) && ( ( VAR_964 - VAR_965 -> VAR_966 . VAR_967 ) < ( TYPE_125 ) VAR_968 -> VAR_969 ) ) { VAR_970 = METHOD_144 ( VAR_971 , VAR_972 -> VAR_973 . VAR_974 , 0 , VAR_975 -> VAR_976 , 1 , VAR_977 ) ; VAR_978 = METHOD_145 ( VAR_979 , 0 , VAR_980 - VAR_981 -> VAR_982 . VAR_983 , VAR_984 -> VAR_985 , 1 , VAR_986 ) ; if ( ( VAR_987 == ( const TYPE_126 * ) VAR_988 ) || ( VAR_989 == ( TYPE_127 * ) VAR_990 ) ) break ; for ( VAR_991 = 0 ; VAR_992 < ( TYPE_128 ) VAR_993 -> VAR_994 ; VAR_995 ++ ) { METHOD_146 ( VAR_996 , METHOD_147 ( VAR_997 ) ) ; VAR_998 ++ ; VAR_999 ++ ; } if ( METHOD_148 ( VAR_1000 , VAR_1001 ) == VAR_1002 ) break ; } VAR_1003 = METHOD_149 ( VAR_1004 , VAR_1005 , VAR_1006 ) ; } if ( VAR_1007 -> VAR_1008 == ( TYPE_129 * ) VAR_1009 ) { VAR_1010 = METHOD_150 ( VAR_1011 , VAR_1012 , 1 , 5 ) ; if ( VAR_1013 == VAR_1014 ) break ; } ( TYPE_130 ) METHOD_151 ( VAR_1015 ) ; METHOD_152 ( "M" , VAR_1016 -> VAR_1017 ) ; VAR_1018 = METHOD_153 ( VAR_1019 , VAR_1020 , VAR_1021 , VAR_1022 ) ; if ( VAR_1023 == VAR_1024 ) { VAR_1025 = METHOD_154 ( VAR_1026 ) ; VAR_1027 = METHOD_155 ( VAR_1028 ) ; return ( ( TYPE_131 * ) VAR_1029 ) ; } VAR_1030 = METHOD_156 ( VAR_1031 , VAR_1032 , VAR_1033 ) ; for ( VAR_1034 = 0 ; VAR_1035 < ( TYPE_132 ) VAR_1036 ; VAR_1037 ++ ) for ( VAR_1038 = 0 ; VAR_1039 < ( TYPE_133 ) VAR_1040 -> VAR_1041 . VAR_1042 ; VAR_1043 ++ ) if ( METHOD_157 ( VAR_1044 , VAR_1045 , VAR_1046 ) != ( TYPE_134 ) VAR_1047 ) { METHOD_158 ( VAR_1048 , VAR_1049 , "UnexpectedEndOfFile" , VAR_1050 -> VAR_1051 ) ; break ; } VAR_1052 = METHOD_159 ( VAR_1053 , VAR_1054 , VAR_1055 ) ; for ( VAR_1056 = 0 ; VAR_1057 < ( TYPE_135 ) VAR_1058 -> VAR_1059 . VAR_1060 ; VAR_1061 ++ ) { register const TYPE_136 * VAR_1062 VAR_1063 ; register TYPE_137 * VAR_1064 VAR_1065 ; register TYPE_138 VAR_1066 ; if ( VAR_1067 != ( TYPE_139 ) VAR_1068 ) { METHOD_160 ( VAR_1069 , VAR_1070 , "UnexpectedEndOfFile" , VAR_1071 -> VAR_1072 ) ; break ; } VAR_1073 = METHOD_161 ( VAR_1074 , 0 , 0 , VAR_1075 -> VAR_1076 , 1 , VAR_1077 ) ; if ( VAR_1078 == ( TYPE_140 * ) VAR_1079 ) break ; VAR_1080 = METHOD_162 ( VAR_1081 , ( TYPE_141 * ) VAR_1082 , VAR_1083 , VAR_1084 , VAR_1085 , VAR_1086 ) ; if ( METHOD_163 ( VAR_1087 , VAR_1088 ) == VAR_1089 ) break ; if ( ( ( VAR_1090 - VAR_1091 -> VAR_1092 . VAR_1093 ) >= 0 ) && ( ( VAR_1094 - VAR_1095 -> VAR_1096 . VAR_1097 ) < ( TYPE_142 ) VAR_1098 -> VAR_1099 ) ) { VAR_1100 = METHOD_164 ( VAR_1101 , VAR_1102 -> VAR_1103 . VAR_1104 , 0 , VAR_1105 -> VAR_1106 , 1 , VAR_1107 ) ; VAR_1108 = METHOD_165 ( VAR_1109 , 0 , VAR_1110 - VAR_1111 -> VAR_1112 . VAR_1113 , VAR_1114 -> VAR_1115 , 1 , VAR_1116 ) ; if ( ( VAR_1117 == ( const TYPE_143 * ) VAR_1118 ) || ( VAR_1119 == ( TYPE_144 * ) VAR_1120 ) ) break ; for ( VAR_1121 = 0 ; VAR_1122 < ( TYPE_145 ) VAR_1123 -> VAR_1124 ; VAR_1125 ++ ) { METHOD_166 ( VAR_1126 , METHOD_167 ( VAR_1127 ) ) ; VAR_1128 ++ ; VAR_1129 ++ ; } if ( METHOD_168 ( VAR_1130 , VAR_1131 ) == VAR_1132 ) break ; } VAR_1133 = METHOD_169 ( VAR_1134 , VAR_1135 , VAR_1136 ) ; } if ( VAR_1137 -> VAR_1138 == ( TYPE_146 * ) VAR_1139 ) { VAR_1140 = METHOD_170 ( VAR_1141 , VAR_1142 , 2 , 5 ) ; if ( VAR_1143 == VAR_1144 ) break ; } ( TYPE_147 ) METHOD_171 ( VAR_1145 ) ; METHOD_172 ( "Y" , VAR_1146 -> VAR_1147 ) ; VAR_1148 = METHOD_173 ( VAR_1149 , VAR_1150 , VAR_1151 , VAR_1152 ) ; if ( VAR_1153 == VAR_1154 ) { VAR_1155 = METHOD_174 ( VAR_1156 ) ; VAR_1157 = METHOD_175 ( VAR_1158 ) ; return ( ( TYPE_148 * ) VAR_1159 ) ; } VAR_1160 = METHOD_176 ( VAR_1161 , VAR_1162 , VAR_1163 ) ; for ( VAR_1164 = 0 ; VAR_1165 < ( TYPE_149 ) VAR_1166 ; VAR_1167 ++ ) for ( VAR_1168 = 0 ; VAR_1169 < ( TYPE_150 ) VAR_1170 -> VAR_1171 . VAR_1172 ; VAR_1173 ++ ) if ( METHOD_177 ( VAR_1174 , VAR_1175 , VAR_1176 ) != ( TYPE_151 ) VAR_1177 ) { METHOD_178 ( VAR_1178 , VAR_1179 , "UnexpectedEndOfFile" , VAR_1180 -> VAR_1181 ) ; break ; } VAR_1182 = METHOD_179 ( VAR_1183 , VAR_1184 , VAR_1185 ) ; for ( VAR_1186 = 0 ; VAR_1187 < ( TYPE_152 ) VAR_1188 -> VAR_1189 . VAR_1190 ; VAR_1191 ++ ) { register const TYPE_153 * VAR_1192 VAR_1193 ; register TYPE_154 * VAR_1194 VAR_1195 ; register TYPE_155 VAR_1196 ; if ( VAR_1197 != ( TYPE_156 ) VAR_1198 ) { METHOD_180 ( VAR_1199 , VAR_1200 , "UnexpectedEndOfFile" , VAR_1201 -> VAR_1202 ) ; break ; } VAR_1203 = METHOD_181 ( VAR_1204 , 0 , 0 , VAR_1205 -> VAR_1206 , 1 , VAR_1207 ) ; if ( VAR_1208 == ( TYPE_157 * ) VAR_1209 ) break ; VAR_1210 = METHOD_182 ( VAR_1211 , ( TYPE_158 * ) VAR_1212 , VAR_1213 , VAR_1214 , VAR_1215 , VAR_1216 ) ; if ( METHOD_183 ( VAR_1217 , VAR_1218 ) == VAR_1219 ) break ; if ( ( ( VAR_1220 - VAR_1221 -> VAR_1222 . VAR_1223 ) >= 0 ) && ( ( VAR_1224 - VAR_1225 -> VAR_1226 . VAR_1227 ) < ( TYPE_159 ) VAR_1228 -> VAR_1229 ) ) { VAR_1230 = METHOD_184 ( VAR_1231 , VAR_1232 -> VAR_1233 . VAR_1234 , 0 , VAR_1235 -> VAR_1236 , 1 , VAR_1237 ) ; VAR_1238 = METHOD_185 ( VAR_1239 , 0 , VAR_1240 - VAR_1241 -> VAR_1242 . VAR_1243 , VAR_1244 -> VAR_1245 , 1 , VAR_1246 ) ; if ( ( VAR_1247 == ( const TYPE_160 * ) VAR_1248 ) || ( VAR_1249 == ( TYPE_161 * ) VAR_1250 ) ) break ; for ( VAR_1251 = 0 ; VAR_1252 < ( TYPE_162 ) VAR_1253 -> VAR_1254 ; VAR_1255 ++ ) { METHOD_186 ( VAR_1256 , METHOD_187 ( VAR_1257 ) ) ; VAR_1258 ++ ; VAR_1259 ++ ; } if ( METHOD_188 ( VAR_1260 , VAR_1261 ) == VAR_1262 ) break ; } VAR_1263 = METHOD_189 ( VAR_1264 , VAR_1265 , VAR_1266 ) ; } if ( VAR_1267 -> VAR_1268 == ( TYPE_163 * ) VAR_1269 ) { VAR_1270 = METHOD_190 ( VAR_1271 , VAR_1272 , 3 , 5 ) ; if ( VAR_1273 == VAR_1274 ) break ; } ( TYPE_164 ) METHOD_191 ( VAR_1275 ) ; METHOD_192 ( "K" , VAR_1276 -> VAR_1277 ) ; VAR_1278 = METHOD_193 ( VAR_1279 , VAR_1280 , VAR_1281 , VAR_1282 ) ; if ( VAR_1283 == VAR_1284 ) { VAR_1285 = METHOD_194 ( VAR_1286 ) ; VAR_1287 = METHOD_195 ( VAR_1288 ) ; return ( ( TYPE_165 * ) VAR_1289 ) ; } VAR_1290 = METHOD_196 ( VAR_1291 , VAR_1292 , VAR_1293 ) ; for ( VAR_1294 = 0 ; VAR_1295 < ( TYPE_166 ) VAR_1296 ; VAR_1297 ++ ) for ( VAR_1298 = 0 ; VAR_1299 < ( TYPE_167 ) VAR_1300 -> VAR_1301 . VAR_1302 ; VAR_1303 ++ ) if ( METHOD_197 ( VAR_1304 , VAR_1305 , VAR_1306 ) != ( TYPE_168 ) VAR_1307 ) { METHOD_198 ( VAR_1308 , VAR_1309 , "UnexpectedEndOfFile" , VAR_1310 -> VAR_1311 ) ; break ; } VAR_1312 = METHOD_199 ( VAR_1313 , VAR_1314 , VAR_1315 ) ; for ( VAR_1316 = 0 ; VAR_1317 < ( TYPE_169 ) VAR_1318 -> VAR_1319 . VAR_1320 ; VAR_1321 ++ ) { register const TYPE_170 * VAR_1322 VAR_1323 ; register const TYPE_171 * VAR_1324 VAR_1325 ; register TYPE_172 * VAR_1326 VAR_1327 ; register TYPE_173 * VAR_1328 VAR_1329 ; register TYPE_174 VAR_1330 ; if ( VAR_1331 != ( TYPE_175 ) VAR_1332 ) { METHOD_200 ( VAR_1333 , VAR_1334 , "UnexpectedEndOfFile" , VAR_1335 -> VAR_1336 ) ; break ; } VAR_1337 = METHOD_201 ( VAR_1338 , 0 , 0 , VAR_1339 -> VAR_1340 , 1 , VAR_1341 ) ; if ( VAR_1342 == ( TYPE_176 * ) VAR_1343 ) break ; VAR_1344 = METHOD_202 ( VAR_1345 , ( TYPE_177 * ) VAR_1346 , VAR_1347 , VAR_1348 , VAR_1349 , VAR_1350 ) ; if ( METHOD_203 ( VAR_1351 , VAR_1352 ) == VAR_1353 ) break ; if ( ( ( VAR_1354 - VAR_1355 -> VAR_1356 . VAR_1357 ) >= 0 ) && ( ( VAR_1358 - VAR_1359 -> VAR_1360 . VAR_1361 ) < ( TYPE_178 ) VAR_1362 -> VAR_1363 ) ) { VAR_1364 = METHOD_204 ( VAR_1365 , VAR_1366 -> VAR_1367 . VAR_1368 , 0 , VAR_1369 -> VAR_1370 , 1 , VAR_1371 ) ; VAR_1372 = METHOD_205 ( VAR_1373 , 0 , VAR_1374 - VAR_1375 -> VAR_1376 . VAR_1377 , VAR_1378 -> VAR_1379 , 1 , VAR_1380 ) ; if ( ( VAR_1381 == ( const TYPE_179 * ) VAR_1382 ) || ( VAR_1383 == ( TYPE_180 * ) VAR_1384 ) ) break ; VAR_1385 = METHOD_206 ( VAR_1386 ) ; VAR_1387 = METHOD_207 ( VAR_1388 ) ; for ( VAR_1389 = 0 ; VAR_1390 < ( TYPE_181 ) VAR_1391 -> VAR_1392 ; VAR_1393 ++ ) { METHOD_208 ( VAR_1394 + VAR_1395 , METHOD_209 ( VAR_1396 + VAR_1397 -> VAR_1398 . VAR_1399 + VAR_1400 ) ) ; VAR_1401 ++ ; VAR_1402 ++ ; } if ( METHOD_210 ( VAR_1403 , VAR_1404 ) == VAR_1405 ) break ; } VAR_1406 = METHOD_211 ( VAR_1407 , VAR_1408 , VAR_1409 ) ; } if ( VAR_1410 -> VAR_1411 == ( TYPE_182 * ) VAR_1412 ) { VAR_1413 = METHOD_212 ( VAR_1414 , VAR_1415 , 3 , 5 ) ; if ( VAR_1416 == VAR_1417 ) break ; } if ( VAR_1418 -> VAR_1419 != VAR_1420 ) { ( TYPE_183 ) METHOD_213 ( VAR_1421 ) ; METHOD_214 ( "A" , VAR_1422 -> VAR_1423 ) ; VAR_1424 = METHOD_215 ( VAR_1425 , VAR_1426 , VAR_1427 , VAR_1428 ) ; if ( VAR_1429 == VAR_1430 ) { VAR_1431 = METHOD_216 ( VAR_1432 ) ; VAR_1433 = METHOD_217 ( VAR_1434 ) ; return ( ( TYPE_184 * ) VAR_1435 ) ; } VAR_1436 = METHOD_218 ( VAR_1437 , VAR_1438 , VAR_1439 ) ; for ( VAR_1440 = 0 ; VAR_1441 < ( TYPE_185 ) VAR_1442 ; VAR_1443 ++ ) for ( VAR_1444 = 0 ; VAR_1445 < ( TYPE_186 ) VAR_1446 -> VAR_1447 . VAR_1448 ; VAR_1449 ++ ) if ( METHOD_219 ( VAR_1450 , VAR_1451 , VAR_1452 ) != ( TYPE_187 ) VAR_1453 ) { METHOD_220 ( VAR_1454 , VAR_1455 , "UnexpectedEndOfFile" , VAR_1456 -> VAR_1457 ) ; break ; } VAR_1458 = METHOD_221 ( VAR_1459 , VAR_1460 , VAR_1461 ) ; for ( VAR_1462 = 0 ; VAR_1463 < ( TYPE_188 ) VAR_1464 -> VAR_1465 . VAR_1466 ; VAR_1467 ++ ) { register const TYPE_189 * VAR_1468 VAR_1469 ; register TYPE_190 * VAR_1470 VAR_1471 ; register TYPE_191 VAR_1472 ; if ( VAR_1473 != ( TYPE_192 ) VAR_1474 ) { METHOD_222 ( VAR_1475 , VAR_1476 , "UnexpectedEndOfFile" , VAR_1477 -> VAR_1478 ) ; break ; } VAR_1479 = METHOD_223 ( VAR_1480 , 0 , 0 , VAR_1481 -> VAR_1482 , 1 , VAR_1483 ) ; if ( VAR_1484 == ( TYPE_193 * ) VAR_1485 ) break ; VAR_1486 = METHOD_224 ( VAR_1487 , ( TYPE_194 * ) VAR_1488 , VAR_1489 , VAR_1490 , VAR_1491 , VAR_1492 ) ; if ( METHOD_225 ( VAR_1493 , VAR_1494 ) == VAR_1495 ) break ; if ( ( ( VAR_1496 - VAR_1497 -> VAR_1498 . VAR_1499 ) >= 0 ) && ( ( VAR_1500 - VAR_1501 -> VAR_1502 . VAR_1503 ) < ( TYPE_195 ) VAR_1504 -> VAR_1505 ) ) { VAR_1506 = METHOD_226 ( VAR_1507 , VAR_1508 -> VAR_1509 . VAR_1510 , 0 , VAR_1511 -> VAR_1512 , 1 , VAR_1513 ) ; VAR_1514 = METHOD_227 ( VAR_1515 , 0 , VAR_1516 - VAR_1517 -> VAR_1518 . VAR_1519 , VAR_1520 -> VAR_1521 , 1 , VAR_1522 ) ; if ( ( VAR_1523 == ( const TYPE_196 * ) VAR_1524 ) || ( VAR_1525 == ( TYPE_197 * ) VAR_1526 ) ) break ; for ( VAR_1527 = 0 ; VAR_1528 < ( TYPE_198 ) VAR_1529 -> VAR_1530 ; VAR_1531 ++ ) { METHOD_228 ( VAR_1532 , METHOD_229 ( VAR_1533 ) ) ; VAR_1534 ++ ; VAR_1535 ++ ; } if ( METHOD_230 ( VAR_1536 , VAR_1537 ) == VAR_1538 ) break ; } VAR_1539 = METHOD_231 ( VAR_1540 , VAR_1541 , VAR_1542 ) ; } if ( VAR_1543 -> VAR_1544 == ( TYPE_199 * ) VAR_1545 ) { VAR_1546 = METHOD_232 ( VAR_1547 , VAR_1548 , 4 , 5 ) ; if ( VAR_1549 == VAR_1550 ) break ; } } if ( VAR_1551 -> VAR_1552 == ( TYPE_200 * ) VAR_1553 ) { VAR_1554 = METHOD_233 ( VAR_1555 , VAR_1556 , 5 , 5 ) ; if ( VAR_1557 == VAR_1558 ) break ; } break ; } } METHOD_234 ( VAR_1559 , VAR_1560 ) ; if ( VAR_1561 -> VAR_1562 != 0 ) if ( VAR_1563 -> VAR_1564 >= ( VAR_1565 -> VAR_1566 + VAR_1567 -> VAR_1568 - 1 ) ) break ; if ( VAR_1569 == ( TYPE_201 ) VAR_1570 ) { METHOD_235 ( VAR_1571 , VAR_1572 ) ; if ( METHOD_236 ( VAR_1573 ) == ( TYPE_202 * ) VAR_1574 ) { VAR_1575 = METHOD_237 ( VAR_1576 ) ; return ( ( TYPE_203 * ) VAR_1577 ) ; } VAR_1578 = METHOD_238 ( VAR_1579 ) ; VAR_1580 = METHOD_239 ( VAR_1581 , VAR_1582 , METHOD_240 ( VAR_1583 ) , METHOD_241 ( VAR_1584 ) ) ; if ( VAR_1585 == VAR_1586 ) break ; } VAR_1587 ++ ; } while ( VAR_1588 == ( TYPE_204 ) VAR_1589 ) ; VAR_1590 = METHOD_242 ( VAR_1591 ) ; METHOD_243 ( & VAR_1592 -> VAR_1593 , & VAR_1594 -> VAR_1595 ) ; VAR_1596 = METHOD_244 ( VAR_1597 ) ; ( TYPE_205 ) METHOD_245 ( VAR_1598 ) ; return ( METHOD_246 ( VAR_1599 ) ) ; }
static VAR_0 TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_2 VAR_3 = ( TYPE_3 ) VAR_4 * VAR_5 ;  TYPE_4 VAR_6 ;   VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 ) ;  VAR_12 -> VAR_13 = VAR_14 / VAR_15 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ;  if ( ! VAR_6 || ( ! VAR_7 && VAR_8 ) )  VAR_9 = VAR_10 ; else if ( ! VAR_11 -> VAR_12 || ! VAR_13 -> VAR_14 ) VAR_15 = VAR_16 ; else {  VAR_17 = VAR_18 -> VAR_19 -> VAR_20 . METHOD_1 ( VAR_21 -> VAR_22 -> VAR_23 , VAR_24 , VAR_25 ,  VAR_26 , VAR_27 ) ; } return METHOD_2 ( VAR_28 , VAR_29 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , const TYPE_5 * VAR_4 ) { TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; if ( ! METHOD_1 ( VAR_8 , "packetization-mode" ) ) { METHOD_2 ( VAR_9 , VAR_10 , "RTPPacketizationMode:%d\\n" , METHOD_3 ( VAR_11 ) ) ; VAR_12 -> VAR_13 = METHOD_4 ( VAR_14 ) ; if ( VAR_15 -> VAR_16 > 1 ) METHOD_5 ( VAR_17 , VAR_18 , "InterleavedRTPmodeisnotsupportedyet.\\n" ) ; } else if ( ! METHOD_6 ( VAR_19 , "profile-level-id" ) ) { if ( METHOD_7 ( VAR_20 ) == 6 ) METHOD_8 ( VAR_21 , VAR_22 , VAR_23 ) ; } else if ( ! METHOD_9 ( VAR_24 , "sprop-parameter-sets" ) ) { TYPE_7 VAR_25 ;  if ( VAR_26 [ METHOD_10 ( VAR_27 ) - 1 ] == ',' ) {  METHOD_11 ( VAR_28 , VAR_29 , "MissingPPSinsprop-parameter-sets,ignoring\\n" ) ; return 0 ; } VAR_30 -> VAR_31 = 0 ; METHOD_12 ( & VAR_32 -> VAR_33 ) ; VAR_34 = METHOD_13 ( VAR_35 , & VAR_36 -> VAR_37 , & VAR_38 -> VAR_39 , VAR_40 ) ; METHOD_14 ( VAR_41 , VAR_42 , "Extradatasetto%p(size:%d)\\n" , VAR_43 -> VAR_44 , VAR_45 -> VAR_46 ) ; return VAR_47 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )  { struct STRUCT_OR_UNION_2 * VAR_0 = STRUCT_OR_UNION_3 -> VAR_1 ; struct STRUCT_OR_UNION_4 * VAR_2 = METHOD_1 ( VAR_3 ) ; unsigned TYPE_1 VAR_4 = METHOD_2 ( STRUCT_OR_UNION_5 ) ; unsigned TYPE_2 VAR_5 ; TYPE_3 VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; struct STRUCT_OR_UNION_8 * VAR_12 = VAR_13 ; unsigned TYPE_4 VAR_14 ; unsigned TYPE_5 VAR_15 ; struct STRUCT_OR_UNION_9 * VAR_16 = METHOD_3 ( STRUCT_OR_UNION_10 ) ; TYPE_6 VAR_17 = - VAR_18 ; VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_11 -> VAR_23 , VAR_24 ) ; if ( ! VAR_25 ) goto VAR_26 ; VAR_27 = VAR_28 -> VAR_29 ; VAR_30 = ( struct STRUCT_OR_UNION_12 * ) ( VAR_31 -> VAR_32 + VAR_33 ) ; VAR_34 = * ( unsigned TYPE_7 * ) VAR_35 ; if ( VAR_36 + VAR_37 > VAR_38 ) { TYPE_8 VAR_39 = VAR_40 - VAR_41 ; VAR_42 = METHOD_5 ( VAR_43 , VAR_44 ) ; if ( VAR_45 == VAR_46 ) { printk ( KERN_INFO "%s:outofmemory\\n" , VAR_47 ) ; VAR_48 = - VAR_49 ; goto VAR_50 ; } METHOD_6 ( VAR_51 , VAR_52 -> VAR_53 + VAR_54 , VAR_55 ) ; METHOD_7 ( VAR_56 ) ; VAR_57 = METHOD_8 ( STRUCT_OR_UNION_13 -> VAR_58 , ++ VAR_59 ) ; if ( ! VAR_60 ) goto VAR_61 ; METHOD_9 ( ( TYPE_9 * ) VAR_62 + VAR_63 , VAR_64 -> VAR_65 , VAR_66 - VAR_67 ) ; VAR_68 = VAR_69 ; } STRUCT_OR_UNION_14 -> VAR_70 = METHOD_10 ( VAR_71 -> VAR_72 , VAR_73 -> VAR_74 , METHOD_11 ( STRUCT_OR_UNION_15 ) ) ; VAR_75 -> VAR_76 = VAR_77 ; if ( VAR_78 -> VAR_79 [ - VAR_80 ] & 2 ) { if ( VAR_81 -> VAR_82 != VAR_83 ) STRUCT_OR_UNION_16 -> VAR_84 = VAR_85 | VAR_86 -> VAR_87 ; else STRUCT_OR_UNION_17 -> VAR_88 = VAR_89 | VAR_90 | VAR_91 ; METHOD_12 ( STRUCT_OR_UNION_18 , 1 ) ; } else { if ( VAR_92 -> VAR_93 != VAR_94 ) { STRUCT_OR_UNION_19 -> VAR_95 = VAR_96 | VAR_97 -> VAR_98 ; } else { STRUCT_OR_UNION_20 -> VAR_99 = VAR_100 | VAR_101 | VAR_102 ; } METHOD_13 ( STRUCT_OR_UNION_21 , 1 ) ; } STRUCT_OR_UNION_22 -> VAR_103 = VAR_104 -> VAR_105 ; STRUCT_OR_UNION_23 -> VAR_106 = VAR_107 -> VAR_108 ; STRUCT_OR_UNION_24 -> VAR_109 = 0 ; VAR_110 -> VAR_111 [ 0 ] = 0 ; VAR_112 -> VAR_113 [ 1 ] = 0 ; VAR_114 -> VAR_115 [ 2 ] = 0 ; VAR_116 -> VAR_117 = METHOD_14 ( VAR_118 -> VAR_119 ) ; if ( VAR_120 -> VAR_121 [ - VAR_122 ] & 0x80 ) { VAR_123 = METHOD_15 ( STRUCT_OR_UNION_25 ) ; if ( VAR_124 < 0 ) goto VAR_125 ; VAR_126 = - VAR_127 ; } else { VAR_128 -> VAR_129 = 0 ; VAR_130 -> VAR_131 = 0 ; STRUCT_OR_UNION_26 -> VAR_132 = METHOD_16 ( VAR_133 -> VAR_134 ) ; } if ( VAR_135 -> VAR_136 ) STRUCT_OR_UNION_27 -> VAR_137 &= 0x00ffffff ; if ( VAR_138 -> VAR_139 [ 0 ] ) { printk ( KERN_DEBUG "ISOFS:Interleavedfilesnot(yet)supported.\\n" ) ; STRUCT_OR_UNION_28 -> VAR_140 = 0 ; } if ( VAR_141 -> VAR_142 [ 0 ] != 0 ) { printk ( KERN_DEBUG "ISOFS:Fileunitsize!=0forISOfile(%ld).\\n" , STRUCT_OR_UNION_29 -> VAR_143 ) ; } TYPE_10 TYPE_11 if ( ( VAR_144 -> VAR_145 [ - VAR_146 ] & ~ 2 ) != 0 ) { printk ( KERN_DEBUG "ISOFS:UnusualflagsettingsforISOfile" "(%ld%x).\\n" , STRUCT_OR_UNION_30 -> VAR_147 , VAR_148 -> VAR_149 [ - VAR_150 ] ) ; } STRUCT_OR_UNION_31 -> VAR_151 . VAR_152 = STRUCT_OR_UNION_32 -> VAR_153 . VAR_154 = STRUCT_OR_UNION_33 -> VAR_155 . VAR_156 = METHOD_17 ( VAR_157 -> VAR_158 , VAR_159 ) ; STRUCT_OR_UNION_34 -> VAR_160 . VAR_161 = STRUCT_OR_UNION_35 -> VAR_162 . VAR_163 = STRUCT_OR_UNION_36 -> VAR_164 . VAR_165 = 0 ; VAR_166 -> VAR_167 = ( METHOD_18 ( VAR_168 -> VAR_169 ) + METHOD_19 ( VAR_170 -> VAR_171 ) ) ; STRUCT_OR_UNION_37 -> VAR_172 = ( STRUCT_OR_UNION_38 -> VAR_173 + 511 ) >> 9 ; if ( ! VAR_174 ) {  METHOD_20 ( VAR_175 , STRUCT_OR_UNION_39 ) ;  if ( VAR_176 -> VAR_177 ) STRUCT_OR_UNION_40 -> VAR_178 = VAR_179 -> VAR_180 ; if ( VAR_181 -> VAR_182 ) STRUCT_OR_UNION_41 -> VAR_183 = VAR_184 -> VAR_185 ; } if ( METHOD_21 ( STRUCT_OR_UNION_42 -> VAR_186 ) && VAR_187 -> VAR_188 && VAR_189 -> VAR_190 != VAR_191 ) STRUCT_OR_UNION_43 -> VAR_192 = VAR_193 | VAR_194 -> VAR_195 ; if ( METHOD_22 ( STRUCT_OR_UNION_44 -> VAR_196 ) && VAR_197 -> VAR_198 && VAR_199 -> VAR_200 != VAR_201 ) STRUCT_OR_UNION_45 -> VAR_202 = VAR_203 | VAR_204 -> VAR_205 ; if ( METHOD_23 ( STRUCT_OR_UNION_46 -> VAR_206 ) ) { STRUCT_OR_UNION_47 -> VAR_207 = & VAR_208 ; switch ( VAR_209 -> VAR_210 ) { TYPE_12 TYPE_13 case VAR_211 : STRUCT_OR_UNION_48 -> VAR_212 . VAR_213 = & VAR_214 ; break ; default : STRUCT_OR_UNION_49 -> VAR_215 . VAR_216 = & VAR_217 ; break ; } } else if ( METHOD_24 ( STRUCT_OR_UNION_50 -> VAR_218 ) ) { STRUCT_OR_UNION_51 -> VAR_219 = & VAR_220 ; STRUCT_OR_UNION_52 -> VAR_221 = & VAR_222 ; } else if ( METHOD_25 ( STRUCT_OR_UNION_53 -> VAR_223 ) ) { STRUCT_OR_UNION_54 -> VAR_224 = & VAR_225 ; STRUCT_OR_UNION_55 -> VAR_226 . VAR_227 = & VAR_228 ; } else METHOD_26 ( STRUCT_OR_UNION_56 , STRUCT_OR_UNION_57 -> VAR_229 , STRUCT_OR_UNION_58 -> VAR_230 ) ; VAR_231 = 0 ; VAR_232 : METHOD_27 ( VAR_233 ) ; if ( VAR_234 ) METHOD_28 ( VAR_235 ) ; return VAR_236 ; VAR_237 : printk ( KERN_WARNING "ISOFS:unabletoreadi-nodeblock\\n" ) ; VAR_238 : goto VAR_239 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { if ( VAR_5 == VAR_6 ) {  VAR_7 += METHOD_1 ( VAR_8 , "%12.3f%12.3f%12.3f%12.3fK" , VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ;  } else {  VAR_13 += METHOD_2 ( VAR_14 , "%12.3f%12.3f%12.3f%12.3fk" , VAR_15 , VAR_16 , VAR_17 , VAR_18 ) ;  }  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 ; if ( ! METHOD_1 ( VAR_4 ) ) return METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_8 -> VAR_9 == 9 && VAR_10 -> VAR_11 == 13 ) { if ( VAR_12 -> VAR_13 == 2 ) { if ( METHOD_3 ( VAR_14 ) ) return VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 , VAR_18 ) & VAR_19 ; } else if ( VAR_20 -> VAR_21 == 0 ) { if ( METHOD_5 ( VAR_22 ) ) return VAR_23 ; VAR_24 = VAR_25 ; } else {  METHOD_6 ( ) ;  } } else if ( VAR_26 -> VAR_27 == 14 && ( VAR_28 -> VAR_29 & 12 ) == 8 ) { if ( METHOD_7 ( VAR_30 ) ) return VAR_31 ; VAR_32 = ( ( VAR_33 -> VAR_34 & 3 ) << 3 ) | ( VAR_35 -> VAR_36 & 7 ) ; } else {  METHOD_8 ( ) ;  } if ( ! METHOD_9 ( VAR_37 , VAR_38 ) ) return VAR_39 ; if ( VAR_40 -> VAR_41 ) { if ( METHOD_10 ( VAR_42 ) ) return VAR_43 ; METHOD_11 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 ) ; } else { VAR_48 -> VAR_49 = METHOD_12 ( VAR_50 , VAR_51 ) ; } return VAR_52 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 )  {  METHOD_1 ( VAR_1 -> VAR_2 ) ; METHOD_2 ( VAR_3 ) -> METHOD_3 ( VAR_4 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 [ 32001 ] ; TYPE_8 VAR_7 [ 32001 ] ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 = 0 ; VAR_11 [ 0 ] = 0 ; METHOD_1 ( VAR_12 , VAR_13 ) ; if ( METHOD_2 ( VAR_14 , & VAR_15 ) != VAR_16 ) { if ( VAR_17 ) METHOD_3 ( VAR_18 , VAR_19 , 0 ) ; METHOD_4 ( VAR_20 , "[ISQL]ERROR:CouldnotSQLAllocStmt\\n" ) ; return 0 ; } if ( VAR_21 ) { VAR_22 = METHOD_5 ( VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 == VAR_27 ) { METHOD_6 ( VAR_28 , "[ISQL]INFO:SQLExecDirectreturnedSQL_NO_DATA\\n" ) ; } else if ( VAR_29 == VAR_30 ) { if ( VAR_31 ) METHOD_7 ( VAR_32 , VAR_33 , VAR_34 ) ; METHOD_8 ( VAR_35 , "[ISQL]INFO:SQLExecDirectreturnedSQL_SUCCESS_WITH_INFO\\n" ) ; } else if ( VAR_36 != VAR_37 ) { if ( VAR_38 ) METHOD_9 ( VAR_39 , VAR_40 , VAR_41 ) ; METHOD_10 ( VAR_42 , "[ISQL]ERROR:CouldnotSQLExecDirect\\n" ) ; METHOD_11 ( VAR_43 , VAR_44 ) ;  METHOD_12 ( VAR_45 ) ;  return 0 ; } } else { if ( METHOD_13 ( VAR_46 , VAR_47 , VAR_48 ) != VAR_49 ) { if ( VAR_50 ) METHOD_14 ( VAR_51 , VAR_52 , VAR_53 ) ; METHOD_15 ( VAR_54 , "[ISQL]ERROR:CouldnotSQLPrepare\\n" ) ; METHOD_16 ( VAR_55 , VAR_56 ) ; return 0 ; } VAR_57 = METHOD_17 ( VAR_58 ) ; if ( VAR_59 == VAR_60 ) { METHOD_18 ( VAR_61 , "[ISQL]INFO:SQLExecutereturnedSQL_NO_DATA\\n" ) ; } else if ( VAR_62 == VAR_63 ) { if ( VAR_64 ) METHOD_19 ( VAR_65 , VAR_66 , VAR_67 ) ; METHOD_20 ( VAR_68 , "[ISQL]INFO:SQLExecutereturnedSQL_SUCCESS_WITH_INFO\\n" ) ; } else if ( VAR_69 != VAR_70 ) { if ( VAR_71 ) METHOD_21 ( VAR_72 , VAR_73 , VAR_74 ) ; METHOD_22 ( VAR_75 , "[ISQL]ERROR:CouldnotSQLExecute\\n" ) ; METHOD_23 ( VAR_76 , VAR_77 ) ; return 0 ; } } do { if ( METHOD_24 ( VAR_78 , & VAR_79 ) != VAR_80 ) { if ( VAR_81 ) METHOD_25 ( VAR_82 , VAR_83 , VAR_84 ) ; METHOD_26 ( VAR_85 , "[ISQL]ERROR:CouldnotSQLNumResultCols\\n" ) ; METHOD_27 ( VAR_86 , VAR_87 ) ; return 0 ; } if ( VAR_88 > 0 ) { if ( VAR_89 ) METHOD_28 ( VAR_90 ) ; else if ( VAR_91 == 0 ) METHOD_29 ( VAR_92 , VAR_93 ) ; else if ( VAR_94 && VAR_95 ) METHOD_30 ( VAR_96 , VAR_97 ) ; if ( VAR_98 ) METHOD_31 ( VAR_99 ) ; else if ( VAR_100 == 0 ) VAR_101 = METHOD_32 ( VAR_102 ) ; else METHOD_33 ( VAR_103 , VAR_104 ) ; } if ( VAR_105 ) METHOD_34 ( VAR_106 ) ; else if ( VAR_107 == 0 ) METHOD_35 ( VAR_108 , VAR_109 , VAR_110 ) ; } while ( METHOD_36 ( METHOD_37 ( VAR_111 ) ) ) ; METHOD_38 ( VAR_112 , VAR_113 ) ; return 1 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 ; VAR_6 = METHOD_1 ( STRUCT_OR_UNION_2 , VAR_7 ) ; if ( METHOD_2 ( VAR_8 ) ) return - VAR_9 ;  VAR_10 = METHOD_3 ( VAR_11 , ( TYPE_7 TYPE_8 * ) VAR_12 + VAR_13 , VAR_14 ) ;  if ( VAR_15 ) return - VAR_16 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) {  TYPE_3 * VAR_2 , * VAR_3 , * VAR_4 ;  TYPE_4 * VAR_5 = METHOD_1 ( VAR_6 , ( const TYPE_5 * const * ) VAR_7 , sizeof ( VAR_8 ) / sizeof ( VAR_9 [ 0 ] ) , VAR_10 ) ; VAR_11 = METHOD_2 ( VAR_12 ) ; while ( 1 ) { TYPE_6 VAR_13 = METHOD_3 ( VAR_14 ) ; switch ( VAR_15 ) { case VAR_16 : VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; break ; VAR_21 : case VAR_22 : if ( VAR_23 ) METHOD_4 ( "outputfilealreadyspecified" ) ; if ( METHOD_5 ( VAR_24 -> VAR_25 , "-" ) == 0 ) VAR_26 = VAR_27 ; else if ( ! ( VAR_28 = METHOD_6 ( VAR_29 -> VAR_30 , "w" ) ) ) METHOD_7 ( "%s:%s" , VAR_31 -> VAR_32 , METHOD_8 ( VAR_33 ) ) ; break ; case VAR_34 : VAR_35 = 1 ; break ; case VAR_36 : VAR_37 = 0 ; break ; case VAR_38 : METHOD_9 ( ) ; METHOD_10 ( 0 ) ; break ; case VAR_39 : METHOD_11 ( "t1asm(LCDFt1utils)%s\\n" , VAR_40 ) ;  METHOD_12 ( "Copyright(C)1992-2010I.LeeHetherington,EddieKohleretal.\\n\\\nThisisfreesoftware;seethesourceforcopyingconditions.\\n\\\nThereisNOwarranty,notevenformerchantabilityorfitnessfora\\n\\\nparticularpurpose.\\n" ) ;  METHOD_13 ( 0 ) ; break ; case VAR_41 : if ( VAR_42 && VAR_43 ) METHOD_14 ( "toomanyarguments" ) ; else if ( VAR_44 ) goto VAR_45 ; if ( METHOD_15 ( VAR_46 -> VAR_47 , "-" ) == 0 ) VAR_48 = VAR_49 ; else if ( ! ( VAR_50 = METHOD_16 ( VAR_51 -> VAR_52 , "r" ) ) ) METHOD_17 ( "%s:%s" , VAR_53 -> VAR_54 , METHOD_18 ( VAR_55 ) ) ; break ; case VAR_56 : goto VAR_57 ; case VAR_58 : METHOD_19 ( ) ; METHOD_20 ( 1 ) ; break ; } } VAR_59 : if ( ! VAR_60 ) { if ( VAR_61 == - 1 ) VAR_62 = 64 ; else if ( VAR_63 < 8 ) { VAR_64 = 8 ; METHOD_21 ( "warning:linelengthraisedto%d" , VAR_65 ) ; } else if ( VAR_66 > 1024 ) { VAR_67 = 1024 ; METHOD_22 ( "warning:linelengthloweredto%d" , VAR_68 ) ; } } if ( ! VAR_69 ) VAR_70 = VAR_71 ; if ( ! VAR_72 ) VAR_73 = VAR_74 ; if ( VAR_75 ) METHOD_23 ( & VAR_76 , VAR_77 , VAR_78 ) ; if METHOD_24 ( VAR_79 ) || METHOD_25 ( VAR_80 ) if ( VAR_81 ) METHOD_26 ( METHOD_27 ( VAR_82 ) , VAR_83 ) ; while ( ! METHOD_28 ( VAR_84 ) && ! METHOD_29 ( VAR_85 ) ) { METHOD_30 ( ) ; if ( ! VAR_86 ) {  if ( METHOD_31 ( VAR_87 , "currentfileeexec" , 17 ) == 0 && METHOD_32 ( VAR_88 [ 17 ] ) ) {   for ( VAR_89 = VAR_90 + 18 ; METHOD_33 ( * VAR_91 ) ; VAR_92 ++ )  ; METHOD_34 ( VAR_93 ) ; continue ; } else if ( METHOD_35 ( VAR_94 , "/lenIV" , 6 ) == 0 ) {  VAR_95 = METHOD_36 ( VAR_96 + 6 ) ;  } else if ( ( VAR_97 = METHOD_37 ( VAR_98 , "stringcurrentfile" ) )  && METHOD_38 ( VAR_99 , "readstring" ) ) {  * VAR_100 = '\\0' ; VAR_101 = METHOD_39 ( VAR_102 , '/' ) ; if ( VAR_103 ) { VAR_104 = VAR_105 ; ++ VAR_106 ; while ( ! METHOD_40 ( * VAR_107 ) && * VAR_108 != '{' ) * VAR_109 ++ = * VAR_110 ++ ; * VAR_111 = '\\0' ; } * VAR_112 = 's' ; } } if ( ! VAR_113 ) {  if ( ( VAR_114 = METHOD_41 ( VAR_115 , "/Subrs" ) ) && METHOD_42 ( VAR_116 [ 7 ] ) )  VAR_117 = VAR_118 = 1 ;  else if ( ( VAR_119 = METHOD_43 ( VAR_120 , "/CharStrings" ) ) && METHOD_44 ( VAR_121 [ 13 ] ) )  VAR_122 = VAR_123 = 1 ; } if ( ( VAR_124 = METHOD_45 ( VAR_125 , "currentfileclosefile" ) ) ) { VAR_126 += sizeof ( "currentfileclosefile" ) - 1 ;  for ( VAR_127 = VAR_128 ; METHOD_46 ( * VAR_129 ) && * VAR_130 != '\\n' ; VAR_131 ++ )  ; if ( VAR_132 == VAR_133 && ! * VAR_134 ) METHOD_47 ( "warning:`currentfileclosefile\'linetoolong" ) ; else if ( VAR_135 != VAR_136 ) { if ( * VAR_137 != '\\n' ) METHOD_48 ( "textafter`currentfileclosefile\'ignored" ) ; * VAR_138 ++ = '\\n' ; * VAR_139 ++ = '\\0' ; } METHOD_49 ( VAR_140 ) ; break ; } METHOD_50 ( VAR_141 ) ; if ( VAR_142 ) { if ( ! VAR_143 [ 0 ] ) METHOD_51 ( "couldn\'tfindcharstringstartcommand" ) ; METHOD_52 ( ) ; } } if ( VAR_144 ) METHOD_53 ( ) ; while ( ! METHOD_54 ( VAR_145 ) && ! METHOD_55 ( VAR_146 ) ) { METHOD_56 ( ) ; METHOD_57 ( VAR_147 ) ; } if ( VAR_148 ) METHOD_58 ( & VAR_149 ) ; if ( ! VAR_150 ) METHOD_59 ( "warning:nocharstringsfoundininputfile" ) ; METHOD_60 ( VAR_151 ) ; METHOD_61 ( VAR_152 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = & STRUCT_OR_UNION_2 ; TYPE_2 VAR_3 = 9600 ; TYPE_3 VAR_4 = 8 ; TYPE_4 VAR_5 = 'n' ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 = VAR_8 | VAR_9 | VAR_10 ; TYPE_7 * VAR_11 ; struct STRUCT_OR_UNION_3 * VAR_12 ; struct STRUCT_OR_UNION_4 * VAR_13 ; TYPE_8 VAR_14 ; struct STRUCT_OR_UNION_5 * VAR_15 = VAR_16 ; struct STRUCT_OR_UNION_6 VAR_17 ; if ( VAR_18 ) { VAR_19 = METHOD_1 ( VAR_20 , VAR_21 , 10 ) ; VAR_22 = VAR_23 ; while ( * VAR_24 >= '0' && * VAR_25 <= '9' ) VAR_26 ++ ; if ( * VAR_27 ) VAR_28 = * VAR_29 ++ ; if ( * VAR_30 ) VAR_31 = * VAR_32 ++ - '0' ; if ( * VAR_33 ) VAR_34 = ( * VAR_35 ++ == 'r' ) ; } if ( VAR_36 == 0 ) VAR_37 = 9600 ; switch ( VAR_38 ) { case 7 : VAR_39 |= VAR_40 ; break ; default : case 8 : VAR_41 |= VAR_42 ; break ; } switch ( VAR_43 ) { case 'o' : case 'O' : VAR_44 |= VAR_45 ; break ; case 'e' : case 'E' : VAR_46 |= VAR_47 ; break ; } VAR_48 -> VAR_49 = VAR_50 ; VAR_51 = METHOD_2 ( VAR_52 -> VAR_53 ) ; if ( VAR_54 == VAR_55 ) { METHOD_3 ( "NoUSBdeviceconnectedtottyUSB%i\\n" , VAR_56 -> VAR_57 ) ; return - VAR_58 ; } VAR_59 = VAR_60 -> VAR_61 ; VAR_62 = METHOD_4 ( VAR_63 -> VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; METHOD_5 ( & VAR_67 -> VAR_68 , VAR_69 ) ; VAR_70 -> VAR_71 = VAR_72 ; ++ VAR_73 -> VAR_74 . VAR_75 ; if ( ! METHOD_6 ( & VAR_76 -> VAR_77 ) ) { if ( VAR_78 -> VAR_79 -> METHOD_7 ) { VAR_80 = METHOD_8 ( sizeof ( * VAR_81 ) , VAR_82 ) ; if ( ! VAR_83 ) { VAR_84 = - VAR_85 ; goto VAR_86 ; } METHOD_9 ( & VAR_87 -> VAR_88 ) ; VAR_89 -> VAR_90 = VAR_91 ; VAR_92 -> VAR_93 = VAR_94 -> VAR_95 ; METHOD_10 ( & VAR_96 -> VAR_97 ) ; METHOD_11 ( & VAR_98 -> VAR_99 ) ; METHOD_12 ( & VAR_100 -> VAR_101 ) ; METHOD_13 ( & VAR_102 -> VAR_103 -> VAR_104 ) ; METHOD_14 ( VAR_105 -> VAR_106 -> VAR_107 ) ; VAR_108 -> VAR_109 = & VAR_110 ; METHOD_15 ( VAR_111 ) ; METHOD_16 ( & VAR_112 -> VAR_113 , VAR_114 ) ; } VAR_115 = VAR_116 -> VAR_117 -> METHOD_17 ( VAR_118 , VAR_119 ) ; if ( VAR_120 ) { METHOD_18 ( & VAR_121 -> VAR_122 , "couldnotopenUSBconsoleport\\n" ) ; goto VAR_123 ; } if ( VAR_124 -> VAR_125 -> METHOD_19 ) { VAR_126 -> VAR_127 . VAR_128 = VAR_129 ; METHOD_20 ( & VAR_130 -> VAR_131 , VAR_132 , VAR_133 ) ; METHOD_21 ( & VAR_134 , 0 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ; VAR_135 -> VAR_136 -> METHOD_22 ( VAR_137 , VAR_138 , & VAR_139 ) ; METHOD_23 ( & VAR_140 -> VAR_141 , VAR_142 ) ; METHOD_24 ( VAR_143 ) ; } METHOD_25 ( & VAR_144 -> VAR_145 , 1 ) ; } -- VAR_146 -> VAR_147 . VAR_148 ; VAR_149 -> VAR_150 . STRUCT_OR_UNION_8 = 1 ; METHOD_26 ( & VAR_151 -> VAR_152 ) ; return VAR_153 ; VAR_154 : METHOD_27 ( & VAR_155 -> VAR_156 , VAR_157 ) ; METHOD_28 ( VAR_158 ) ; VAR_159 : VAR_160 -> VAR_161 . VAR_162 = 0 ;  METHOD_29 ( VAR_163 -> VAR_164 ) ;  VAR_165 : METHOD_30 ( VAR_166 ) ; METHOD_31 ( & VAR_167 -> VAR_168 ) ; return VAR_169 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; METHOD_1 ( & VAR_4 ) ; VAR_5 = - VAR_6 ; STRUCT_OR_UNION_2 -> VAR_7 = alloc_percpu ( TYPE_4 ) ; if ( ! STRUCT_OR_UNION_3 -> VAR_8 ) goto VAR_9 ; STRUCT_OR_UNION_4 -> VAR_10 = - 1 ; if ( ! VAR_11 ) goto VAR_12 ; STRUCT_OR_UNION_5 -> VAR_13 = VAR_14 ; if ( VAR_15 < 0 ) { VAR_16 = METHOD_2 ( & VAR_17 , STRUCT_OR_UNION_6 , VAR_18 , 0 , VAR_19 ) ; if ( VAR_20 < 0 ) { VAR_21 = VAR_22 ; goto VAR_23 ; } } STRUCT_OR_UNION_7 -> VAR_24 = VAR_25 ; if ( VAR_26 ) { VAR_27 = METHOD_3 ( STRUCT_OR_UNION_8 ) ; if ( VAR_28 ) goto VAR_29 ; } VAR_30 : STRUCT_OR_UNION_9 -> VAR_31 = METHOD_4 ( STRUCT_OR_UNION_10 -> VAR_32 ) ; if ( STRUCT_OR_UNION_11 -> VAR_33 ) goto VAR_34 ; VAR_35 = - VAR_36 ; STRUCT_OR_UNION_12 -> VAR_37 = alloc_percpu ( struct STRUCT_OR_UNION_13 ) ; if ( ! STRUCT_OR_UNION_14 -> VAR_38 ) goto VAR_39 ; for_each_possible_cpu ( VAR_40 ) { struct STRUCT_OR_UNION_15 * VAR_41 ; VAR_42 = METHOD_5 ( STRUCT_OR_UNION_16 -> VAR_43 , VAR_44 ) ; METHOD_6 ( & VAR_45 -> VAR_46 ) ; METHOD_7 ( & VAR_47 -> VAR_48 . VAR_49 , & VAR_50 ) ; METHOD_8 ( & VAR_51 -> VAR_52 . VAR_53 , & VAR_54 ) ;  VAR_55 -> VAR_56 . VAR_57 = VAR_58 ;  VAR_59 -> VAR_60 . STRUCT_OR_UNION_17 = STRUCT_OR_UNION_18 ; METHOD_9 ( VAR_61 , VAR_62 ) ; METHOD_10 ( & VAR_63 -> VAR_64 ) ; VAR_65 -> VAR_66 = STRUCT_OR_UNION_19 ; } VAR_67 : if ( ! STRUCT_OR_UNION_20 -> VAR_68 ) { if ( STRUCT_OR_UNION_21 -> VAR_69 ) { STRUCT_OR_UNION_22 -> VAR_70 = VAR_71 ; STRUCT_OR_UNION_23 -> VAR_72 = VAR_73 ; STRUCT_OR_UNION_24 -> VAR_74 = VAR_75 ; } else { STRUCT_OR_UNION_25 -> VAR_76 = VAR_77 ; STRUCT_OR_UNION_26 -> VAR_78 = VAR_79 ; STRUCT_OR_UNION_27 -> VAR_80 = VAR_81 ; } } if ( ! STRUCT_OR_UNION_28 -> VAR_82 ) { STRUCT_OR_UNION_29 -> VAR_83 = VAR_84 ; STRUCT_OR_UNION_30 -> VAR_85 = VAR_86 ; } if ( ! STRUCT_OR_UNION_31 -> VAR_87 ) STRUCT_OR_UNION_32 -> VAR_88 = VAR_89 ; METHOD_11 ( & STRUCT_OR_UNION_33 -> VAR_90 , & VAR_91 ) ; VAR_92 = 0 ; VAR_93 : METHOD_12 ( & VAR_94 ) ; return VAR_95 ; VAR_96 : METHOD_13 ( STRUCT_OR_UNION_34 -> VAR_97 ) ; METHOD_14 ( STRUCT_OR_UNION_35 -> VAR_98 ) ; VAR_99 : if ( STRUCT_OR_UNION_36 -> VAR_100 >= VAR_101 ) METHOD_15 ( & VAR_102 , STRUCT_OR_UNION_37 -> VAR_103 ) ; VAR_104 : METHOD_16 ( STRUCT_OR_UNION_38 -> VAR_105 ) ; goto VAR_106 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , unsigned TYPE_4 * VAR_2 , TYPE_5 VAR_3 ,  struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 )  { if ( METHOD_1 ( ! METHOD_2 ( ! VAR_4 , VAR_5 , VAR_6 ) ) ) return - VAR_7 ; STRUCT_OR_UNION_4 -> VAR_8 = VAR_9 ; STRUCT_OR_UNION_5 -> VAR_10 = VAR_11 ; * VAR_12 = 1 ;  return 0 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 ; TYPE_1 VAR_5 ; TYPE_2 VAR_6 ;  TYPE_3 VAR_7 = 0 ;  TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 -> VAR_14 ;  VAR_15 = 1 << VAR_16 -> VAR_17 ;   if ( VAR_18 < 2 ) {  VAR_19 -> VAR_20 = 0 ; return 1 ; } VAR_21 = ( ( VAR_22 -> VAR_23 + VAR_24 - 1 ) + ( ( METHOD_2 ( VAR_25 -> VAR_26 -> VAR_27 ) + 1 ) << METHOD_3 ( VAR_28 ) ) ) / VAR_29 ; VAR_30 = VAR_31 * sizeof ( struct STRUCT_OR_UNION_3 ) ; VAR_32 -> VAR_33 = METHOD_4 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 == VAR_38 ) { METHOD_5 ( VAR_39 , VAR_40 , "notenoughmemoryfor%uflexgroups" , VAR_41 ) ; goto VAR_42 ; } for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; VAR_47 ++ ) { VAR_48 = METHOD_6 ( VAR_49 , VAR_50 , VAR_51 ) ; VAR_52 = METHOD_7 ( VAR_53 , VAR_54 ) ; METHOD_8 ( METHOD_9 ( VAR_55 , VAR_56 ) , & VAR_57 -> VAR_58 [ VAR_59 ] . VAR_60 ) ; METHOD_10 ( METHOD_11 ( VAR_61 , VAR_62 ) , & VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 ) ; METHOD_12 ( METHOD_13 ( VAR_67 , VAR_68 ) , & VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 ) ; } return 1 ; VAR_73 : return 0 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ;  if ( METHOD_2 ( VAR_7 < VAR_8 ) )  return 0 ; return 1 ; }
TYPE_0 * METHOD_0 ( const TYPE_1 * * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = 0 , * VAR_4 = 0 , * VAR_5 = METHOD_1 ( ) ;  for ( VAR_6 = 0 ; VAR_7 && VAR_8 < VAR_9 ; ++ VAR_10 ) {  VAR_11 = METHOD_2 ( VAR_12 [ VAR_13 ] ) ;  if ( ! VAR_14 )  VAR_15 -> VAR_16 = VAR_17 ; else METHOD_3 ( VAR_18 , VAR_19 ) ; VAR_20 = VAR_21 ; } return VAR_22 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 * VAR_3 [ ] ) { struct STRUCT_OR_UNION_2 * VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 [ VAR_7 + 3 ] ; TYPE_5 * VAR_8 = ( METHOD_1 ( VAR_9 ) ? METHOD_2 ( VAR_10 ) : METHOD_3 ( VAR_11 ) ) ; if ( ! METHOD_4 ( VAR_12 , VAR_13 ) ) return 0 ; if ( VAR_14 < 2 ) return METHOD_5 ( VAR_15 , "AUTHENTICATE" ) ; if ( METHOD_6 ( VAR_16 [ 1 ] ) > 400 ) return METHOD_7 ( VAR_17 , VAR_18 ) ; if ( METHOD_8 ( VAR_19 ) ) return METHOD_9 ( VAR_20 , VAR_21 ) ; if ( ! ( VAR_22 = METHOD_10 ( VAR_23 ) ) ) { if ( METHOD_11 ( METHOD_12 ( VAR_24 ) , "*" ) ) VAR_25 = METHOD_13 ( ( TYPE_6 * ) METHOD_14 ( VAR_26 ) ) ; else VAR_27 = VAR_28 ; } if ( ! VAR_29 && METHOD_15 ( METHOD_16 ( VAR_30 ) , "*" ) ) return METHOD_17 ( VAR_31 , VAR_32 , ":serviceunavailable" ) ; if ( VAR_33 && METHOD_18 ( VAR_34 ) ) return 0 ; if ( ! METHOD_19 ( VAR_35 ) ) { do { METHOD_20 ( VAR_36 ) = METHOD_21 ( ) & 0x7fffffff ; } while ( ! METHOD_22 ( VAR_37 ) ) ; VAR_38 = 1 ; } if ( METHOD_23 ( VAR_39 , ':' ) != VAR_40 ) METHOD_24 ( 0 , VAR_41 , sizeof ( VAR_42 ) , "[%s]" , VAR_43 ) ; else METHOD_25 ( VAR_44 , VAR_45 , sizeof ( VAR_46 ) ) ; if ( VAR_47 ) { if ( VAR_48 ) {  if ( ! METHOD_26 ( METHOD_27 ( VAR_49 ) ) )  METHOD_28 ( & VAR_50 , VAR_51 , VAR_52 , "%C%C!%u.%uS%s:%s" , VAR_53 , & VAR_54 , METHOD_29 ( VAR_55 ) , METHOD_30 ( VAR_56 ) , VAR_57 [ 1 ] , METHOD_31 ( VAR_58 ) ) ; else METHOD_32 ( & VAR_59 , VAR_60 , VAR_61 , "%C%C!%u.%uS:%s" , VAR_62 , & VAR_63 , METHOD_33 ( VAR_64 ) , METHOD_34 ( VAR_65 ) , VAR_66 [ 1 ] ) ; if ( METHOD_35 ( VAR_67 ) ) METHOD_36 ( & VAR_68 , VAR_69 , VAR_70 , "%C%C!%u.%uH:%s@%s:%s" , VAR_71 , & VAR_72 , METHOD_37 ( VAR_73 ) , METHOD_38 ( VAR_74 ) , METHOD_39 ( VAR_75 ) , VAR_76 , METHOD_40 ( VAR_77 ) ) ; } else { METHOD_41 ( & VAR_78 , VAR_79 , VAR_80 , "%C%C!%u.%uC:%s" , VAR_81 , & VAR_82 , METHOD_42 ( VAR_83 ) , METHOD_43 ( VAR_84 ) , VAR_85 [ 1 ] ) ; } } else { if ( VAR_86 ) {  if ( ! METHOD_44 ( METHOD_45 ( VAR_87 ) ) )  METHOD_46 ( & VAR_88 , VAR_89 , VAR_90 , "*%C!%u.%uS%s:%s" , & VAR_91 , METHOD_47 ( VAR_92 ) , METHOD_48 ( VAR_93 ) , VAR_94 [ 1 ] , METHOD_49 ( VAR_95 ) ) ; else METHOD_50 ( & VAR_96 , VAR_97 , VAR_98 , "*%C!%u.%uS:%s" , & VAR_99 , METHOD_51 ( VAR_100 ) , METHOD_52 ( VAR_101 ) , VAR_102 [ 1 ] ) ; if ( METHOD_53 ( VAR_103 ) ) METHOD_54 ( & VAR_104 , VAR_105 , VAR_106 , "*%C!%u.%uH:%s@%s:%s" , & VAR_107 , METHOD_55 ( VAR_108 ) , METHOD_56 ( VAR_109 ) , METHOD_57 ( VAR_110 ) , VAR_111 , METHOD_58 ( VAR_112 ) ) ; } else { METHOD_59 ( & VAR_113 , VAR_114 , VAR_115 , "*%C!%u.%uC:%s" , & VAR_116 , METHOD_60 ( VAR_117 ) , METHOD_61 ( VAR_118 ) , VAR_119 [ 1 ] ) ; } } if ( ! METHOD_62 ( & METHOD_63 ( VAR_120 ) ) ) METHOD_64 ( METHOD_65 ( & METHOD_66 ( VAR_121 ) ) , VAR_122 , ( TYPE_7 * ) VAR_123 , VAR_124 , METHOD_67 ( VAR_125 ) ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; if ! VAR_5 if ( ( TYPE_6 ) VAR_6 & ( sizeof ( TYPE_7 ) - 1 ) ) { for ( VAR_7 = 0 ; VAR_8 + 7 < VAR_9 ; VAR_10 += 8 ) { VAR_11 [ VAR_12 + 0 ] = VAR_13 [ VAR_14 + 0 ] - VAR_15 [ VAR_16 + 0 ] ; VAR_17 [ VAR_18 + 1 ] = VAR_19 [ VAR_20 + 1 ] - VAR_21 [ VAR_22 + 1 ] ; VAR_23 [ VAR_24 + 2 ] = VAR_25 [ VAR_26 + 2 ] - VAR_27 [ VAR_28 + 2 ] ; VAR_29 [ VAR_30 + 3 ] = VAR_31 [ VAR_32 + 3 ] - VAR_33 [ VAR_34 + 3 ] ; VAR_35 [ VAR_36 + 4 ] = VAR_37 [ VAR_38 + 4 ] - VAR_39 [ VAR_40 + 4 ] ; VAR_41 [ VAR_42 + 5 ] = VAR_43 [ VAR_44 + 5 ] - VAR_45 [ VAR_46 + 5 ] ; VAR_47 [ VAR_48 + 6 ] = VAR_49 [ VAR_50 + 6 ] - VAR_51 [ VAR_52 + 6 ] ; VAR_53 [ VAR_54 + 7 ] = VAR_55 [ VAR_56 + 7 ] - VAR_57 [ VAR_58 + 7 ] ; } } else  for ( VAR_59 = 0 ; VAR_60 <= VAR_61 - sizeof ( TYPE_8 ) ; VAR_62 += sizeof ( TYPE_9 ) ) {  TYPE_10 VAR_63 = * ( TYPE_11 * ) ( VAR_64 + VAR_65 ) ; TYPE_12 VAR_66 = * ( TYPE_13 * ) ( VAR_67 + VAR_68 ) ; * ( TYPE_14 * ) ( VAR_69 + VAR_70 ) = ( ( VAR_71 | VAR_72 ) - ( VAR_73 & VAR_74 ) ) ^ ( ( VAR_75 ^ VAR_76 ^ VAR_77 ) & VAR_78 ) ; } for ( ; VAR_79 < VAR_80 ; VAR_81 ++ ) VAR_82 [ VAR_83 + 0 ] = VAR_84 [ VAR_85 + 0 ] - VAR_86 [ VAR_87 + 0 ] ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = ( TYPE_6 * ) VAR_5 ; TYPE_7 * VAR_6 = VAR_7 -> VAR_8 ; VAR_9 * VAR_10 ; TYPE_8 VAR_11 = VAR_12 ; TYPE_9 VAR_13 = VAR_14 -> VAR_15 -> VAR_16 ; TYPE_10 VAR_17 = VAR_18 - VAR_19 -> VAR_20 ;  VAR_21 += VAR_22 -> VAR_23 ;  if ( VAR_24 -> VAR_25 ) { if ( VAR_26 & VAR_27 ) { if ( VAR_28 >= 2 && * ( VAR_29 - 1 ) == 0 && METHOD_1 ( * ( VAR_30 - 2 ) ) ) return VAR_31 ; if ( VAR_32 + VAR_33 + 1 < VAR_34 -> VAR_35 && * ( VAR_36 + VAR_37 + 1 ) == 0 && METHOD_2 ( * ( VAR_38 + VAR_39 ) ) ) return VAR_40 ; } else { if ( VAR_41 >= 1 && METHOD_3 ( * ( VAR_42 - 1 ) ) ) return VAR_43 ; if ( VAR_44 + VAR_45 < VAR_46 -> VAR_47 && METHOD_4 ( * ( VAR_48 + VAR_49 ) ) ) return VAR_50 ; } } if ( METHOD_5 ( VAR_51 ) ) { VAR_52 = METHOD_6 ( VAR_53 , VAR_54 -> VAR_55 , VAR_56 , VAR_57 -> VAR_58 , VAR_59 , VAR_60 ) ; } else { if ( VAR_61 -> VAR_62 [ VAR_63 ] . VAR_64 == 0 ) { METHOD_7 ( METHOD_8 ( VAR_65 -> VAR_66 -> VAR_67 , & VAR_68 , sizeof ( VAR_69 ) , VAR_70 ) ) ; } METHOD_9 ( METHOD_10 ( VAR_71 -> VAR_72 -> VAR_73 , sizeof ( VAR_74 ) , ( TYPE_11 * * ) & VAR_75 ) ) ; VAR_76 -> VAR_77 = METHOD_11 ( VAR_78 , VAR_79 ) ; METHOD_12 ( METHOD_13 ( VAR_80 -> VAR_81 -> VAR_82 , VAR_83 , VAR_84 -> VAR_85 , ( TYPE_12 * * ) & VAR_86 -> VAR_87 ) ) ; if ( VAR_88 == VAR_89 ) { VAR_90 -> VAR_91 = VAR_92 -> VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> VAR_104 = VAR_105 ; METHOD_14 ( METHOD_15 ( VAR_106 , & VAR_107 -> VAR_108 [ VAR_109 ] , METHOD_16 ( VAR_110 ) ) ) ; } } return VAR_111 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = VAR_1 ; TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 ) ; VAR_7 = METHOD_2 ( VAR_8 ) ; VAR_9 = METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( "server_request_direct_streamlocal:originator%sport%d,target%s" , VAR_10 , VAR_11 , VAR_12 ) ; if ( ( VAR_13 . VAR_14 & VAR_15 ) != 0 &&  ! VAR_16 && ! VAR_17 . VAR_18 ) {  VAR_19 = METHOD_6 ( VAR_20 , "direct-streamlocal@openssh.com" , "direct-streamlocal" ) ; } else { METHOD_7 ( "refusedstreamlocalportforward:" "originator%sport%d,target%s" , VAR_21 , VAR_22 , VAR_23 ) ; } METHOD_8 ( VAR_24 ) ; METHOD_9 ( VAR_25 ) ; return VAR_26 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  if ( ! METHOD_1 ( VAR_4 ) ) {  if ( VAR_5 -> VAR_6 >= 256 ) { METHOD_2 ( VAR_7 , VAR_8 , "Treesizeexceeded!\\n" ) ; return VAR_9 ; } if ( VAR_10 ) { VAR_11 -> VAR_12 [ VAR_13 -> VAR_14 ] = VAR_15 ; VAR_16 -> VAR_17 [ VAR_18 -> VAR_19 ] = VAR_20 ; } else { VAR_21 -> VAR_22 [ VAR_23 -> VAR_24 ] = 0 ; VAR_25 -> VAR_26 [ VAR_27 -> VAR_28 ] = 0 ; } VAR_29 -> VAR_30 [ VAR_31 -> VAR_32 ] = METHOD_3 ( VAR_33 , 8 ) ; VAR_34 -> VAR_35 ++ ; if ( VAR_36 -> VAR_37 < VAR_38 ) VAR_39 -> VAR_40 = VAR_41 ; return 0 ; } else { TYPE_5 VAR_42 ; VAR_43 ++ ; VAR_44 = METHOD_4 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; if ( VAR_49 ) return VAR_50 ; return METHOD_5 ( VAR_51 , VAR_52 , VAR_53 | ( 1 << ( VAR_54 - 1 ) ) , VAR_55 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 , VAR_5 , VAR_6 ; if ( VAR_7 -> VAR_8 ) { if ( VAR_9 == VAR_10 ) { TYPE_3 TYPE_4 * VAR_11 ; VAR_12 = ( TYPE_5 TYPE_6 TYPE_7 * ) VAR_13 -> VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 -> VAR_18 , VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; }  VAR_22 -> VAR_23 = VAR_24 ;  } else { VAR_25 -> VAR_26 = VAR_27 ; } VAR_28 = VAR_29 -> VAR_30 * sizeof ( struct STRUCT_OR_UNION_3 ) ; if ( METHOD_2 ( VAR_31 , ( TYPE_8 TYPE_9 TYPE_10 * ) VAR_32 -> VAR_33 , VAR_34 ) ) return - VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; VAR_39 = 0 ; for ( VAR_40 = 0 ; VAR_41 < VAR_42 -> VAR_43 ; VAR_44 ++ ) { TYPE_11 VAR_45 = VAR_46 [ VAR_47 ] . VAR_48 ; if ( VAR_49 > VAR_50 - VAR_51 ) { VAR_52 = VAR_53 - VAR_54 ; VAR_55 [ VAR_56 ] . VAR_57 = VAR_58 ; } VAR_59 += VAR_60 ; } return VAR_61 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = METHOD_1 ( VAR_5 , 1 ) ; TYPE_6 VAR_6 [ VAR_7 ] ; TYPE_7 * VAR_8 = VAR_9 ; register TYPE_8 * VAR_10 ; register TYPE_9 * VAR_11 ; register TYPE_10 VAR_12 ; register TYPE_11 VAR_13 ;  TYPE_12 VAR_14 ;  if ( VAR_15 > VAR_16 ) { if ( ! ( VAR_17 = METHOD_2 ( VAR_18 , sizeof ( TYPE_13 ) ) ) ) { METHOD_3 ( ) ; } } if ( VAR_19 >= 2 ) {  VAR_20 = ( VAR_21 + 1 - VAR_22 ) >> 1 ;   VAR_23 = VAR_24 - VAR_25 ;  VAR_26 = VAR_27 ; VAR_28 = VAR_29 ; VAR_30 = & VAR_31 [ ( 1 - VAR_32 ) * VAR_33 ] ; while ( VAR_34 -- > 0 ) { * VAR_35 = * VAR_36 ; ++ VAR_37 ; VAR_38 += VAR_39 << 1 ; } VAR_40 = & VAR_41 [ ( 1 - VAR_42 ) * VAR_43 ] ; VAR_44 = & VAR_45 [ ( 2 - VAR_46 ) * VAR_47 ] ; VAR_48 = VAR_49 - VAR_50 - ( ! VAR_51 ) ; while ( VAR_52 -- > 0 ) { * VAR_53 = * VAR_54 ; VAR_55 += VAR_56 ; VAR_57 += VAR_58 << 1 ; }  VAR_59 = & VAR_60 [ VAR_61 * VAR_62 ] ;  VAR_63 = VAR_64 ; VAR_65 = VAR_66 ; while ( VAR_67 -- > 0 ) { * VAR_68 = * VAR_69 ; VAR_70 += VAR_71 ; ++ VAR_72 ; } } if ( VAR_73 != VAR_74 ) { METHOD_4 ( VAR_75 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_2 VAR_7 ; TYPE_3 VAR_8 = - VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 & VAR_13 ) { METHOD_1 ( VAR_14 , "BadreturnfromREPLY_ADD_STA(0x%08X)\\n" , VAR_15 -> VAR_16 . VAR_17 ) ; return VAR_18 ; } METHOD_2 ( VAR_19 , "Processingresponseforaddingstation%u\\n" , VAR_20 ) ; METHOD_3 ( & VAR_21 -> VAR_22 -> VAR_23 , VAR_24 ) ; switch ( VAR_25 -> VAR_26 . VAR_27 . VAR_28 ) { case VAR_29 : METHOD_4 ( VAR_30 , "REPLY_ADD_STAPASSED\\n" ) ;  METHOD_5 ( VAR_31 , VAR_32 ) ;  VAR_33 = 0 ; break ; case VAR_34 : METHOD_6 ( VAR_35 , "Addingstation%dfailed,noroomintable.\\n" , VAR_36 ) ; break ; case VAR_37 : METHOD_7 ( VAR_38 , "Addingstation%dfailed,noblockack" "resource.\\n" , VAR_39 ) ; break ; case VAR_40 : METHOD_8 ( VAR_41 , "Attemptingtomodifynon-existingstation%d\\n" , VAR_42 ) ; break ; default : METHOD_9 ( VAR_43 , "ReceivedREPLY_ADD_STA:(0x%08X)\\n" , VAR_44 -> VAR_45 . VAR_46 . VAR_47 ) ; break ; } METHOD_10 ( VAR_48 , "%sstationid%uaddr%pM\\n" , VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 . VAR_53 == VAR_54 ? "Modified" : "Added" , VAR_55 , VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 . VAR_61 ) ; METHOD_11 ( VAR_62 , "%sstationaccordingtocmdbuffer%pM\\n" , VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 . VAR_67 == VAR_68 ? "Modified" : "Added" , VAR_69 -> VAR_70 . VAR_71 ) ; METHOD_12 ( & VAR_72 -> VAR_73 -> VAR_74 , VAR_75 ) ; return VAR_76 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 ; if ( VAR_5 ) { METHOD_1 ( VAR_6 ) ; VAR_7 = VAR_8 ; } if ( ! VAR_9 ) return ; VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ;  VAR_15 = METHOD_3 ( VAR_16 , "a" ) ;  if ( VAR_17 ) { TYPE_6 VAR_18 = METHOD_4 ( VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 | METHOD_6 ( VAR_23 , VAR_24 ) ) ; METHOD_7 ( VAR_25 , VAR_26 , VAR_27 | METHOD_8 ( VAR_28 , VAR_29 ) ) ; } METHOD_9 ( VAR_30 ) ; }
TYPE_0 METHOD_0 ( ) { METHOD_1 ( "ruletest{strings:$a=/ssi/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_2 ( "ruletest{strings:$a=/ssi(s|p)/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_3 ( "ruletest{strings:$a=/ssim*/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_4 ( "ruletest{strings:$a=/ssa?/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_5 ( "ruletest{strings:$a=/Miss/nocasecondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_6 ( "ruletest{strings:$a=/(M|N)iss/nocasecondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_7 ( "ruletest{strings:$a=/[M-N]iss/nocasecondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_8 ( "ruletest{strings:$a=/(Mi|ssi)ssippi/nocasecondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_9 ( "ruletest{strings:$a=/ppi\\\\tmi/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_10 ( "ruletest{strings:$a=/ppi\\\\.mi/condition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_11 ( "ruletest{strings:$a=/^mississippi/fullwordcondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_12 ( "ruletest{strings:$a=/mississippi.*mississippi$/scondition:$a}" , "mississippi\\tmississippi.mississippi\\nmississippi" ) ; METHOD_13 ( "ruletest{strings:$a=/^ssi/condition:$a}" , "mississippi" ) ; METHOD_14 ( "ruletest{strings:$a=/ssi$/condition:$a}" , "mississippi" ) ; METHOD_15 ( "ruletest{strings:$a=/ssissi/fullwordcondition:$a}" , "mississippi" ) ; METHOD_16 ( "ruletest{strings:$a=/^[isp]+/condition:$a}" , "mississippi" ) ; METHOD_17 ( ")" ) ; METHOD_18 ( "abc" , "abc" , "abc" ) ; METHOD_19 ( "abc" , "xbc" ) ; METHOD_20 ( "abc" , "axc" ) ; METHOD_21 ( "abc" , "abx" ) ; METHOD_22 ( "abc" , "xabcx" , "abc" ) ; METHOD_23 ( "abc" , "ababc" , "abc" ) ; METHOD_24 ( "a.c" , "abc" , "abc" ) ; METHOD_25 ( "a.b" , "a\\nb" ) ; METHOD_26 ( "a.*b" , "acc\\nccb" ) ; METHOD_27 ( "a.{4,5}b" , "acc\\nccb" ) ; METHOD_28 ( "a.b" , "a\\rb" , "a\\rb" ) ; METHOD_29 ( "ab*c" , "abc" , "abc" ) ; METHOD_30 ( "ab*c" , "ac" , "ac" ) ; METHOD_31 ( "ab*bc" , "abc" , "abc" ) ; METHOD_32 ( "ab*bc" , "abbc" , "abbc" ) ; METHOD_33 ( "a.*bb" , "abbbb" , "abbbb" ) ; METHOD_34 ( "a.*?bbb" , "abbbbbb" , "abbb" ) ; METHOD_35 ( "a.*c" , "ac" , "ac" ) ; METHOD_36 ( "a.*c" , "axyzc" , "axyzc" ) ; METHOD_37 ( "ab+c" , "abbc" , "abbc" ) ; METHOD_38 ( "ab+c" , "ac" ) ; METHOD_39 ( "ab+" , "abbbb" , "abbbb" ) ; METHOD_40 ( "ab+?" , "abbbb" , "ab" ) ; METHOD_41 ( "ab+bc" , "abc" ) ; METHOD_42 ( "ab+bc" , "abq" ) ; METHOD_43 ( "a+b+c" , "aabbabc" , "abc" ) ; METHOD_44 ( "ab?bc" , "abbbbc" ) ; METHOD_45 ( "ab?c" , "abc" , "abc" ) ; METHOD_46 ( "ab*?" , "abbb" , "a" ) ; METHOD_47 ( "ab?c" , "abc" , "abc" ) ; METHOD_48 ( "ab??" , "ab" , "a" ) ; METHOD_49 ( "a(b|x)c" , "abc" , "abc" ) ; METHOD_50 ( "a(b|x)c" , "axc" , "axc" ) ; METHOD_51 ( "a(b|.)c" , "axc" , "axc" ) ; METHOD_52 ( "a(b|x|y)c" , "ayc" , "ayc" ) ; METHOD_53 ( "(a+|b)*" , "ab" , "ab" ) ; METHOD_54 ( "a|b|c|d|e" , "e" , "e" ) ; METHOD_55 ( "(a|b|c|d|e)f" , "ef" , "ef" ) ; METHOD_56 ( ".b{2}" , "abb" , "abb" ) ; METHOD_57 ( "ab{1}c" , "abc" , "abc" ) ; METHOD_58 ( "ab{1,2}c" , "abbc" , "abbc" ) ; METHOD_59 ( "ab{1,}c" , "abbbc" , "abbbc" ) ; METHOD_60 ( "ab{1,}b" , "ab" ) ; METHOD_61 ( "ab{1}c" , "abbc" ) ; METHOD_62 ( "ab{0,}c" , "ac" , "ac" ) ; METHOD_63 ( "ab{0,}c" , "abbbc" , "abbbc" ) ; METHOD_64 ( "ab{,3}c" , "abbbc" , "abbbc" ) ; METHOD_65 ( "ab{,2}c" , "abbbc" ) ; METHOD_66 ( "ab{4,5}bc" , "abbbbc" ) ; METHOD_67 ( "ab{2,3}?" , "abbbbb" , "abb" ) ; METHOD_68 ( "ab{.*}" , "ab{c}" , "ab{c}" ) ; METHOD_69 ( ".(aa){1,2}" , "aaaaaaaaaa" , "aaaaa" ) ; METHOD_70 ( "a.(bc.){2}" , "aabcabca" , "aabcabca" ) ; METHOD_71 ( "(ab{1,2}c){1,3}" , "abbcabc" , "abbcabc" ) ; METHOD_72 ( "ab(c|cc){1,3}d" , "abccccccd" , "abccccccd" ) ; METHOD_73 ( "a[bx]c" , "abc" , "abc" ) ; METHOD_74 ( "a[bx]c" , "axc" , "axc" ) ; METHOD_75 ( "a[0-9]*b" , "ab" , "ab" ) ; METHOD_76 ( "a[0-9]*b" , "a0123456789b" , "a0123456789b" ) ; METHOD_77 ( "[0-9a-f]+" , "0123456789abcdef" , "0123456789abcdef" ) ; METHOD_78 ( "[0-9a-f]+" , "xyz0123456789xyz" , "0123456789" ) ; METHOD_79 ( "a[\\\\s\\\\S]b" , "ab" , "ab" ) ; METHOD_80 ( "a[\\\\d\\\\D]b" , "a1b" , "a1b" ) ; METHOD_81 ( "[x-z]+" , "abc" ) ; METHOD_82 ( "a[-]?c" , "ac" , "ac" ) ; METHOD_83 ( "a[-b]" , "a-" , "a-" ) ; METHOD_84 ( "a[-b]" , "ab" , "ab" ) ; METHOD_85 ( "a[b-]" , "a-" , "a-" ) ; METHOD_86 ( "a[b-]" , "ab" , "ab" ) ; METHOD_87 ( "[a-c-e]" , "b" , "b" ) ; METHOD_88 ( "[a-c-e]" , "-" , "-" ) ; METHOD_89 ( "[a-c-e]" , "d" ) ; METHOD_90 ( "[b-a]" ) ; METHOD_91 ( "(abc" ) ; METHOD_92 ( "abc)" ) ; METHOD_93 ( "a[]b" ) ; METHOD_94 ( "a\\\\" ) ; METHOD_95 ( "a[\\\\-b]" , "a-" , "a-" ) ; METHOD_96 ( "a[\\\\-b]" , "ab" , "ab" ) ; METHOD_97 ( "a[\\\\" ) ; METHOD_98 ( "a]" , "a]" , "a]" ) ; METHOD_99 ( "a[]]b" , "a]b" , "a]b" ) ; METHOD_100 ( "a[\\\\]]b" , "a]b" , "a]b" ) ; METHOD_101 ( "a[^bc]d" , "aed" , "aed" ) ; METHOD_102 ( "a[^bc]d" , "abd" ) ; METHOD_103 ( "a[^-b]c" , "adc" , "adc" ) ; METHOD_104 ( "a[^-b]c" , "a-c" ) ; METHOD_105 ( "a[^]b]c" , "a]c" ) ; METHOD_106 ( "a[^]b]c" , "adc" , "adc" ) ; METHOD_107 ( "[^ab]*" , "cde" , "cde" ) ; METHOD_108 ( ")(" ) ; METHOD_109 ( "a\\\\sb" , "ab" , "ab" ) ; METHOD_110 ( "a\\\\sb" , "a\\tb" , "a\\tb" ) ; METHOD_111 ( "a\\\\sb" , "a\\rb" , "a\\rb" ) ; METHOD_112 ( "a\\\\sb" , "a\\nb" , "a\\nb" ) ; METHOD_113 ( "a\\\\sb" , "a\\vb" , "a\\vb" ) ; METHOD_114 ( "a\\\\sb" , "a\\fb" , "a\\fb" ) ; METHOD_115 ( "a\\\\Sb" , "ab" ) ; METHOD_116 ( "a\\\\Sb" , "a\\tb" ) ; METHOD_117 ( "a\\\\Sb" , "a\\rb" ) ; METHOD_118 ( "a\\\\Sb" , "a\\nb" ) ; METHOD_119 ( "a\\\\Sb" , "a\\vb" ) ; METHOD_120 ( "a\\\\Sb" , "a\\fb" ) ; METHOD_121 ( "\\\\n\\\\r\\\\t\\\\f\\\\a" , "\\n\\r\\t\\f\\a" , "\\n\\r\\t\\f\\a" ) ; METHOD_122 ( "[\\\\n][\\\\r][\\\\t][\\\\f][\\\\a]" , "\\n\\r\\t\\f\\a" , "\\n\\r\\t\\f\\a" ) ; METHOD_123 ( "\\\\x01\\\\x02\\\\x03" , "\\x01\\x02\\x03" , "\\x01\\x02\\x03" ) ; METHOD_124 ( "[\\\\x01-\\\\x03]+" , "\\x01\\x02\\x03" , "\\x01\\x02\\x03" ) ; METHOD_125 ( "[\\\\x00-\\\\x02]+" , "\\x03\\x04\\x05" ) ; METHOD_126 ( "[\\\\x5D]" , "]" , "]" ) ; METHOD_127 ( "[\\\\0x5A-\\\\x5D]" , "\\x5B" , "\\x5B" ) ; METHOD_128 ( "[\\\\x5D-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; METHOD_129 ( "[\\\\x5C-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; METHOD_130 ( "[\\\\x5D-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; METHOD_131 ( "a\\\\wc" , "abc" , "abc" ) ; METHOD_132 ( "a\\\\wc" , "a_c" , "a_c" ) ; METHOD_133 ( "a\\\\wc" , "a0c" , "a0c" ) ; METHOD_134 ( "a\\\\wc" , "a*c" ) ; METHOD_135 ( "\\\\w+" , "--ab_cd0123--" , "ab_cd0123" ) ; METHOD_136 ( "[\\\\w]+" , "--ab_cd0123--" , "ab_cd0123" ) ; METHOD_137 ( "\\\\D+" , "1234abc5678" , "abc" ) ; METHOD_138 ( "[\\\\d]+" , "0123456789" , "0123456789" ) ; METHOD_139 ( "[\\\\D]+" , "1234abc5678" , "abc" ) ; METHOD_140 ( "[\\\\da-fA-F]+" , "123abc" , "123abc" ) ; METHOD_141 ( "^(ab|cd)e" , "abcde" ) ; METHOD_142 ( "(abc|)ef" , "abcdef" , "ef" ) ; METHOD_143 ( "(abc|)ef" , "abcef" , "abcef" ) ; METHOD_144 ( "\\\\babc" , "abc" , "abc" ) ; METHOD_145 ( "abc\\\\b" , "abc" , "abc" ) ; METHOD_146 ( "\\\\babc" , "1abc" ) ; METHOD_147 ( "abc\\\\b" , "abc1" ) ; METHOD_148 ( "abc\\\\s\\\\b" , "abcx" , "abc" ) ; METHOD_149 ( "abc\\\\s\\\\b" , "abc" ) ; METHOD_150 ( "\\\\babc\\\\b" , "abc" , "abc" ) ; METHOD_151 ( "\\\\b\\\\w\\\\w\\\\w\\\\b" , "abc" , "abc" ) ; METHOD_152 ( "\\\\w\\\\w\\\\w\\\\b" , "abcd" , "bcd" ) ; METHOD_153 ( "\\\\b\\\\w\\\\w\\\\w" , "abcd" , "abc" ) ; METHOD_154 ( "\\\\b\\\\w\\\\w\\\\w\\\\b" , "abcd" ) ; METHOD_155 ( "\\\\Babc" , "abc" ) ; METHOD_156 ( "abc\\\\B" , "abc" ) ; METHOD_157 ( "\\\\Babc" , "1abc" , "abc" ) ; METHOD_158 ( "abc\\\\B" , "abc1" , "abc" ) ; METHOD_159 ( "abc\\\\s\\\\B" , "abcx" ) ; METHOD_160 ( "abc\\\\s\\\\B" , "abc" , "abc" ) ; METHOD_161 ( "\\\\w\\\\w\\\\w\\\\B" , "abcd" , "abc" ) ; METHOD_162 ( "\\\\B\\\\w\\\\w\\\\w" , "abcd" , "bcd" ) ; METHOD_163 ( "\\\\B\\\\w\\\\w\\\\w\\\\B" , "abcd" ) ; METHOD_164 ( "(|abc)ef" ) ; METHOD_165 ( "((a)(b)c)(d)" , "abcd" , "abcd" ) ; METHOD_166 ( "(a|b)c*d" , "abcd" , "bcd" ) ; METHOD_167 ( "(ab|ab*)bc" , "abc" , "abc" ) ; METHOD_168 ( "a([bc]*)c*" , "abc" , "abc" ) ; METHOD_169 ( "a([bc]*)c*" , "ac" , "ac" ) ; METHOD_170 ( "a([bc]*)c*" , "a" , "a" ) ; METHOD_171 ( "a([bc]*)(c*d)" , "abcd" , "abcd" ) ; METHOD_172 ( "a([bc]+)(c*d)" , "abcd" , "abcd" ) ; METHOD_173 ( "a([bc]*)(c+d)" , "abcd" , "abcd" ) ; METHOD_174 ( "a[bcd]*dcdcde" , "adcdcde" , "adcdcde" ) ; METHOD_175 ( "a[bcd]+dcdcde" , "adcdcde" ) ; METHOD_176 ( "\\\\((.*),(.*)\\\\)" , "(a,b)" , "(a,b)" ) ; METHOD_177 ( "abc|123$" , "abcx" , "abc" ) ; METHOD_178 ( "abc|123$" , "123x" ) ; METHOD_179 ( "abc|^123" , "123" , "123" ) ; METHOD_180 ( "abc|^123" , "x123" ) ; METHOD_181 ( "^abc$" , "abc" , "abc" ) ; METHOD_182 ( "^abc$" , "abcc" ) ; METHOD_183 ( "^abc" , "abcc" , "abc" ) ; METHOD_184 ( "^abc$" , "aabc" ) ; METHOD_185 ( "abc$" , "aabc" , "abc" ) ; METHOD_186 ( "^a(bc+|b[eh])g|.h$" , "abhg" , "abhg" ) ; METHOD_187 ( "(bc+d$|ef*g.|h?i(j|k))" , "effgz" , "effgz" ) ; METHOD_188 ( "(bc+d$|ef*g.|h?i(j|k))" , "ij" , "ij" ) ; METHOD_189 ( "(bc+d$|ef*g.|h?i(j|k))" , "effg" ) ; METHOD_190 ( "(bc+d$|ef*g.|h?i(j|k))" , "bcdd" ) ; METHOD_191 ( "(bc+d$|ef*g.|h?i(j|k))" , "reffgz" , "effgz" ) ; METHOD_192 ( "whatever|x.x" , "xyx" , "xyx" ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_8 ) ; if ( ! METHOD_2 ( VAR_9 ) ) return - VAR_10 ; if ( STRUCT_OR_UNION_6 -> VAR_11 != STRUCT_OR_UNION_7 -> VAR_12 -> VAR_13 ) return - VAR_14 ; if ( ( VAR_15 -> VAR_16 . VAR_17 & VAR_18 ) && ! ( VAR_19 & VAR_20 ) ) { return - VAR_21 ; }  VAR_22 = METHOD_3 ( VAR_23 , VAR_24 ) ;  if ( VAR_25 ) return VAR_26 ; METHOD_4 ( & VAR_27 -> VAR_28 ) ; if ( VAR_29 & VAR_30 ) VAR_31 = METHOD_5 ( STRUCT_OR_UNION_8 -> VAR_32 , VAR_33 ) ; else if ( ! METHOD_6 ( VAR_34 ) ) VAR_35 = - VAR_36 ; else VAR_37 = METHOD_7 ( VAR_38 , VAR_39 , VAR_40 , 0 ) ; if ( ! VAR_41 ) { METHOD_8 ( ) ; VAR_42 |= VAR_43 -> VAR_44 . VAR_45 & ~ VAR_46 ; VAR_47 -> VAR_48 . VAR_49 = VAR_50 ; METHOD_9 ( VAR_51 -> VAR_52 ) ; METHOD_10 ( ) ; } METHOD_11 ( & VAR_53 -> VAR_54 ) ; return VAR_55 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ;  TYPE_3 VAR_7 , VAR_8 ;  struct STRUCT_OR_UNION_7 * VAR_9 ; TYPE_4 VAR_10 = 0 ; VAR_11 = - VAR_12 ; if ( VAR_13 & ~ ( VAR_14 | VAR_15 | VAR_16 | VAR_17 | VAR_18 ) ) goto VAR_19 ; if 0 if ( METHOD_1 ( VAR_20 ) -> VAR_21 < 0 ) return - VAR_22 ; if ( VAR_23 & VAR_24 ) { VAR_25 = METHOD_2 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ; goto VAR_31 ; } VAR_32 = METHOD_3 ( VAR_33 , VAR_34 , VAR_35 & VAR_36 , & VAR_37 ) ; if ( VAR_38 == VAR_39 ) goto VAR_40 ; if ( METHOD_4 ( VAR_41 ) -> VAR_42 ) { struct STRUCT_OR_UNION_8 VAR_43 = { 0 } ; VAR_44 = - VAR_45 ; VAR_46 = sizeof ( VAR_47 ) ; if ( VAR_48 < VAR_49 ) goto VAR_50 ; VAR_51 -= VAR_52 ; if ( METHOD_5 ( VAR_53 ) ) { struct STRUCT_OR_UNION_9 * VAR_54 = METHOD_6 ( VAR_55 ) ; VAR_56 . VAR_57 = METHOD_7 ( VAR_58 ) ; VAR_59 . VAR_60 = VAR_61 -> VAR_62 ; if ( VAR_63 -> VAR_64 & VAR_65 ) VAR_66 . VAR_67 = VAR_68 ; else if ( VAR_69 -> VAR_70 & VAR_71 ) VAR_72 . VAR_73 = VAR_74 ; else if ( VAR_75 -> VAR_76 & VAR_77 ) VAR_78 . VAR_79 = VAR_80 ; else if ( VAR_81 -> VAR_82 & VAR_83 ) goto VAR_84 ; else METHOD_8 ( ) ; if ( VAR_85 -> VAR_86 & VAR_87 ) VAR_88 . VAR_89 |= VAR_90 ; } else VAR_91 . VAR_92 = VAR_93 ; if ( VAR_94 -> VAR_95 == VAR_96 ) { VAR_97 . VAR_98 = VAR_99 ; VAR_100 . VAR_101 = METHOD_9 ( VAR_102 ) ; VAR_103 . VAR_104 = VAR_105 -> VAR_106 ; } else if ( VAR_107 -> VAR_108 == VAR_109 ) { VAR_110 . VAR_111 = VAR_112 ; } VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , ( TYPE_5 * ) & VAR_116 , VAR_117 ) ; if ( VAR_118 < 0 ) goto VAR_119 ; }  VAR_120 = & METHOD_11 ( VAR_121 ) -> VAR_122 . VAR_123 ;   if ( STRUCT_OR_UNION_10 -> VAR_124 == VAR_125 )  VAR_126 -> VAR_127 = sizeof ( struct STRUCT_OR_UNION_11 ) ;  else  VAR_128 -> VAR_129 = VAR_130 -> VAR_131 + VAR_132 ( struct STRUCT_OR_UNION_12 , VAR_133 ) ;  VAR_134 = VAR_135 -> VAR_136 ;  if ( VAR_137 > VAR_138 ) { VAR_139 = VAR_140 ; VAR_141 -> VAR_142 |= VAR_143 ; } VAR_144 = METHOD_12 ( VAR_145 , 0 , VAR_146 -> VAR_147 , VAR_148 ) ; if ( VAR_149 ) goto VAR_150 ; METHOD_13 ( VAR_151 , VAR_152 , VAR_153 ) ;  if ( VAR_154 -> VAR_155 )  METHOD_14 ( VAR_156 -> VAR_157 , & METHOD_15 ( VAR_158 ) -> VAR_159 ,  VAR_160 -> VAR_161 ) ;  if ( METHOD_16 ( VAR_162 ) -> VAR_163 ) { struct STRUCT_OR_UNION_13 VAR_164 ; VAR_165 . VAR_166 = VAR_167 ; if ( VAR_168 -> VAR_169 == VAR_170 ) VAR_171 . VAR_172 |= VAR_173 ; VAR_174 . VAR_175 = METHOD_17 ( VAR_176 ) -> VAR_177 ; VAR_178 . VAR_179 = VAR_180 -> VAR_181 ; VAR_182 . VAR_183 = 0 ; VAR_184 . VAR_185 = METHOD_18 ( VAR_186 ) ; if ( METHOD_19 ( VAR_187 ) ) { VAR_188 . VAR_189 = METHOD_20 ( VAR_190 ) ; VAR_191 . VAR_192 |= VAR_193 ; } else { VAR_194 . VAR_195 = 0 ; } VAR_196 . VAR_197 = 0 ; METHOD_21 ( VAR_198 , VAR_199 , VAR_200 , sizeof ( VAR_201 ) , & VAR_202 ) ; } VAR_203 = VAR_204 + ( ( VAR_205 & VAR_206 ) ? VAR_207 -> VAR_208 : VAR_209 ) ; VAR_210 : METHOD_22 ( VAR_211 , VAR_212 ) ; VAR_213 : return VAR_214 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 [ VAR_2 ] ;  TYPE_3 VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; METHOD_1 ( VAR_6 >= VAR_7 ) ; if ( ( VAR_8 = METHOD_2 ( VAR_9 , VAR_10 , VAR_11 ) ) < 0 ) { return - 1 ; } for ( VAR_12 = VAR_13 - 1 ; VAR_14 >= 0 ; -- VAR_15 ) { if ( METHOD_3 ( VAR_16 , VAR_17 [ VAR_18 ] ) == VAR_19 ) { return - 1 ; } } if ( VAR_20 < VAR_21 ) { return - 1 ; } VAR_22 = ( METHOD_4 ( TYPE_6 , VAR_23 [ 0 ] ) << 24 ) | ( METHOD_5 ( TYPE_7 , VAR_24 [ 1 ] ) << 16 ) | ( METHOD_6 ( TYPE_8 , VAR_25 [ 2 ] ) << 8 ) | VAR_26 [ 3 ] ; if ( VAR_27 != VAR_28 ) { return - 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; unsigned TYPE_1 VAR_2 ; TYPE_2 VAR_3 ;  if ( VAR_4 -> VAR_5 < 2 )  return - 1 ; VAR_6 = VAR_7 -> VAR_8 [ 0 ] ; VAR_9 -> VAR_10 = VAR_11 -> VAR_12 [ 1 ] -> VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ; for ( VAR_19 = 0 ; VAR_20 < METHOD_2 ( VAR_21 -> VAR_22 ) ; ++ VAR_23 ) VAR_24 -> VAR_25 [ VAR_26 ] -> VAR_27 = VAR_28 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  TYPE_5 VAR_4 = 0 , VAR_5 = 1 ;  TYPE_6 VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ;  TYPE_8 VAR_10 ;  TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 , VAR_15 ; TYPE_13 VAR_16 = METHOD_1 ( VAR_17 ) ; TYPE_14 VAR_18 = METHOD_2 ( VAR_19 ) ; TYPE_15 VAR_20 = METHOD_3 ( VAR_21 ) ; TYPE_16 VAR_22 = METHOD_4 ( VAR_23 ) ; TYPE_17 VAR_24 = METHOD_5 ( VAR_25 ) ; TYPE_18 VAR_26 = METHOD_6 ( VAR_27 ) ? 3 : 1 ; TYPE_19 VAR_28 = 16 ; if ( VAR_29 == 3 && METHOD_7 ( VAR_30 ) != 127 ) { METHOD_8 ( "can\'tcreatevalidRIFFwavheaderfornon-normalizedfloatingdata!" ) ; return VAR_31 ; } if ( VAR_32 == - 1 ) VAR_33 = 0x7ffff000 / ( VAR_34 * VAR_35 ) ; VAR_36 = VAR_37 * VAR_38 * VAR_39 ; if ( VAR_40 > 0xff000000 ) { if ( VAR_41 ) METHOD_9 ( "total_data_bytes=%lld,sorf64" , VAR_42 ) ; VAR_43 = 0 ; VAR_44 = 1 ; } else if ( VAR_45 ) METHOD_10 ( "total_data_bytes=%lld,soriff" , VAR_46 ) ; METHOD_11 ( VAR_47 ) ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; VAR_54 . VAR_55 = VAR_56 ; VAR_57 . VAR_58 = VAR_59 * VAR_60 * VAR_61 ; VAR_62 . VAR_63 = VAR_64 * VAR_65 ; VAR_66 . VAR_67 = VAR_68 ; if ( VAR_69 > 2 || VAR_70 != 0x5 - VAR_71 ) { VAR_72 = sizeof ( VAR_73 ) ; VAR_74 . VAR_75 = 22 ; VAR_76 . VAR_77 = VAR_78 ; VAR_79 . VAR_80 = VAR_81 ; VAR_82 . VAR_83 = VAR_84 ; VAR_85 . VAR_86 = 0xfffe ; VAR_87 . VAR_88 = VAR_89 * 8 ; VAR_90 . VAR_91 [ 4 ] = 0x10 ; VAR_92 . VAR_93 [ 6 ] = 0x80 ; VAR_94 . VAR_95 [ 9 ] = 0xaa ; VAR_96 . VAR_97 [ 11 ] = 0x38 ; VAR_98 . VAR_99 [ 12 ] = 0x9b ; VAR_100 . VAR_101 [ 13 ] = 0x71 ; } METHOD_12 ( VAR_102 . VAR_103 , VAR_104 ? "RF64" : "RIFF" , sizeof ( VAR_105 . VAR_106 ) ) ; METHOD_13 ( VAR_107 . VAR_108 , "WAVE" , sizeof ( VAR_109 . VAR_110 ) ) ; VAR_111 = sizeof ( VAR_112 ) + VAR_113 + sizeof ( VAR_114 ) + ( ( VAR_115 + 1 ) & ~ ( TYPE_20 ) 1 ) ; if ( VAR_116 ) VAR_117 += sizeof ( VAR_118 ) + sizeof ( VAR_119 ) ;  if ( VAR_120 ) VAR_121 += sizeof ( VAR_122 ) ;  METHOD_14 ( VAR_123 . VAR_124 , "fmt" , sizeof ( VAR_125 . VAR_126 ) ) ; METHOD_15 ( VAR_127 . VAR_128 , "data" , sizeof ( VAR_129 . VAR_130 ) ) ; VAR_131 . VAR_132 = VAR_133 ; if ( VAR_134 ) { METHOD_16 ( VAR_135 ) ; METHOD_17 ( VAR_136 . VAR_137 , "junk" , sizeof ( VAR_138 . VAR_139 ) ) ; VAR_140 . VAR_141 = sizeof ( VAR_142 ) - 8 ; METHOD_18 ( & VAR_143 , VAR_144 ) ; } if ( VAR_145 ) { METHOD_19 ( VAR_146 . VAR_147 , "ds64" , sizeof ( VAR_148 . VAR_149 ) ) ;  VAR_150 . VAR_151 = sizeof ( VAR_152 ) ;  METHOD_20 ( VAR_153 ) ; VAR_154 . VAR_155 = VAR_156 ; VAR_157 . VAR_158 = VAR_159 ;  VAR_160 . VAR_161 = VAR_162 ;  VAR_163 . VAR_164 = ( TYPE_21 ) - 1 ; VAR_165 . VAR_166 = ( TYPE_22 ) - 1 ; METHOD_21 ( & VAR_167 , VAR_168 ) ; METHOD_22 ( & VAR_169 , VAR_170 ) ; } else { VAR_171 . VAR_172 = ( TYPE_23 ) VAR_173 ; VAR_174 . VAR_175 = ( TYPE_24 ) VAR_176 ; }  METHOD_23 ( & VAR_177 , VAR_178 ) ;  METHOD_24 ( & VAR_179 , VAR_180 ) ; METHOD_25 ( & VAR_181 , VAR_182 ) ; METHOD_26 ( & VAR_183 , VAR_184 ) ; if ( ! METHOD_27 ( VAR_185 , & VAR_186 , sizeof ( VAR_187 ) , & VAR_188 ) || VAR_189 != sizeof ( VAR_190 ) || ( VAR_191 && ( ! METHOD_28 ( VAR_192 , & VAR_193 , sizeof ( VAR_194 ) , & VAR_195 ) || VAR_196 != sizeof ( VAR_197 ) ) ) ||  ( VAR_198 && ( ! METHOD_29 ( VAR_199 , & VAR_200 , sizeof ( VAR_201 ) , & VAR_202 ) || VAR_203 != sizeof ( VAR_204 ) ) ) ||  ( VAR_205 && ( ! METHOD_30 ( VAR_206 , & VAR_207 , sizeof ( VAR_208 ) , & VAR_209 ) || VAR_210 != sizeof ( VAR_211 ) ) ) || ! METHOD_31 ( VAR_212 , & VAR_213 , sizeof ( VAR_214 ) , & VAR_215 ) || VAR_216 != sizeof ( VAR_217 ) || ! METHOD_32 ( VAR_218 , & VAR_219 , VAR_220 , & VAR_221 ) || VAR_222 != VAR_223 || ! METHOD_33 ( VAR_224 , & VAR_225 , sizeof ( VAR_226 ) , & VAR_227 ) || VAR_228 != sizeof ( VAR_229 ) ) { METHOD_34 ( "can\'twrite.WAVdata,diskprobablyfull!" ) ; return VAR_230 ; } return VAR_231 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , const unsigned TYPE_2 VAR_3 , const unsigned TYPE_3 VAR_4 , const unsigned TYPE_4 VAR_5 ) { struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; struct STRUCT_OR_UNION_6 * VAR_7 = METHOD_2 ( STRUCT_OR_UNION_7 ) ;  struct STRUCT_OR_UNION_8 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ;  TYPE_5 VAR_11 , VAR_12 = 0 ; unsigned VAR_13 , VAR_14 , VAR_15 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 ; unsigned VAR_19 = 0 ; unsigned VAR_20 ;  const unsigned VAR_21 = VAR_22 - 1 ;  TYPE_6 VAR_23 = 0 ; enum VAR_24 VAR_25 ; TYPE_7 * VAR_26 ; TYPE_8 VAR_27 = 0 ; METHOD_3 ( VAR_28 < 1 ) ; METHOD_4 ( VAR_29 == VAR_30 ) ; METHOD_5 ( VAR_31 -> VAR_32 , VAR_33 , 1 ) ; if ( VAR_34 == VAR_35 ) { struct STRUCT_OR_UNION_9 * VAR_36 ; VAR_37 = METHOD_6 ( VAR_38 , VAR_39 ) ; VAR_40 = VAR_41 -> VAR_42 [ VAR_43 ] ; VAR_44 = METHOD_7 ( VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 , VAR_50 , & VAR_51 ) ; METHOD_8 ( VAR_52 < 1 ) ; VAR_53 = VAR_54 ; } else { VAR_55 = VAR_56 > 1 ? VAR_57 -> VAR_58 : VAR_59 -> VAR_60 ; VAR_61 = METHOD_9 ( VAR_62 , VAR_63 - VAR_64 -> VAR_65 [ VAR_66 ] ) ; if ( VAR_67 == VAR_68 -> VAR_69 ) { VAR_70 = VAR_71 - VAR_72 ; VAR_73 = VAR_74 ; } else { VAR_75 = VAR_76 ; VAR_77 = VAR_78 - VAR_79 -> VAR_80 ; VAR_81 = METHOD_10 ( VAR_82 ) ; VAR_83 += ( VAR_84 - VAR_85 ) ; } } VAR_86 = VAR_87 + VAR_88 ; VAR_89 = VAR_90 ; do { TYPE_9 VAR_91 ; VAR_92 = VAR_93 - VAR_94 ; VAR_95 = METHOD_11 ( VAR_96 , & VAR_97 , & VAR_98 ) ; if ( VAR_99 ) return VAR_100 ; VAR_101 += VAR_102 ; if ( VAR_103 != VAR_104 || METHOD_12 ( VAR_105 ) ) METHOD_13 ( VAR_106 , VAR_107 , VAR_108 ) ; switch ( VAR_109 ) { case VAR_110 : if ( VAR_111 == 1 ) { VAR_112 = ( TYPE_10 * ) ( VAR_113 -> VAR_114 + sizeof ( struct STRUCT_OR_UNION_10 ) ) ; VAR_115 = * VAR_116 ; } for ( ; VAR_117 - 1 < VAR_118 - VAR_119 -> VAR_120 && VAR_121 > 0 ; VAR_122 ++ , VAR_123 -- ) METHOD_14 ( VAR_124 , VAR_125 -> VAR_126 , VAR_127 , 0 , VAR_128 ++ ) ; if ( VAR_129 - 1 == VAR_130 - VAR_131 -> VAR_132 ) { VAR_133 -- ; METHOD_15 ( VAR_134 -> VAR_135 [ VAR_136 ] , sizeof ( struct STRUCT_OR_UNION_11 ) , VAR_137 , sizeof ( struct STRUCT_OR_UNION_12 ) ) ; METHOD_16 ( VAR_138 , sizeof ( struct STRUCT_OR_UNION_13 ) + sizeof ( TYPE_11 ) ) ; VAR_139 = ( TYPE_12 * ) ( VAR_140 -> VAR_141 [ VAR_142 ] -> VAR_143 + sizeof ( struct STRUCT_OR_UNION_14 ) ) ; * VAR_144 = VAR_145 ; VAR_146 = VAR_147 ; for ( VAR_148 = VAR_149 ; VAR_150 < VAR_151 ; VAR_152 ++ ) { if ( VAR_153 -> VAR_154 [ VAR_155 ] == VAR_156 ) break ; METHOD_17 ( VAR_157 -> VAR_158 [ VAR_159 ] ) ; VAR_160 -> VAR_161 [ VAR_162 ] = VAR_163 ; } VAR_164 = VAR_165 ; } if ( VAR_166 == 0 ) break ; case VAR_167 : if ( VAR_168 > 1 && VAR_169 < VAR_170 ) METHOD_18 ( VAR_171 -> VAR_172 , VAR_173 -> VAR_174 [ VAR_175 - 1 ] , 1 ) ; for ( ; VAR_176 < VAR_177 && VAR_178 > 0 ; VAR_179 ++ , VAR_180 -- ) METHOD_19 ( VAR_181 , VAR_182 -> VAR_183 , VAR_184 , VAR_185 -> VAR_186 [ VAR_187 - 1 ] , VAR_188 ++ ) ; if ( VAR_189 == VAR_190 ) VAR_191 = VAR_192 ; if ( VAR_193 == 0 ) break ; case VAR_194 : METHOD_20 ( VAR_195 > VAR_196 ) ; METHOD_21 ( VAR_197 -> VAR_198 [ VAR_199 ] == VAR_200 ) ; METHOD_22 ( VAR_201 -> VAR_202 , VAR_203 -> VAR_204 [ VAR_205 ] , 1 ) ; VAR_206 = VAR_207 ; VAR_208 = METHOD_23 ( VAR_209 , VAR_210 ) ; VAR_211 = VAR_212 ; while ( VAR_213 -- > 0 ) * VAR_214 ++ = METHOD_24 ( VAR_215 ++ ) ;  break ;  } } while ( ( VAR_216 != VAR_217 ) || ! VAR_218 ) ; VAR_219 -> VAR_220 = VAR_221 ; METHOD_25 ( & VAR_222 -> VAR_223 , VAR_224 ) ; METHOD_26 ( VAR_225 , VAR_226 -> VAR_227 [ 0 ] -> VAR_228 ) ; METHOD_27 ( VAR_229 , STRUCT_OR_UNION_15 -> VAR_230 , VAR_231 ) ; VAR_232 -> VAR_233 = VAR_234 << STRUCT_OR_UNION_16 -> VAR_235 ; METHOD_28 ( VAR_236 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { METHOD_1 ( TYPE_1 ) METHOD_2 ( VAR_3 , "%-28s=%d\\n" , TYPE_2 , VAR_4 -> VAR_5 . VAR_6 . TYPE_3 ) if ( VAR_7 -> VAR_8 == 0 ) { METHOD_3 ( VAR_9 , "Codec:%s\\n" ,  METHOD_4 ( VAR_10 -> VAR_11 -> METHOD_5 ( ) ) ) ;  METHOD_6 ( VAR_12 , "Sourcefile:%sFormat:%s\\n" , VAR_13 -> VAR_14 ,  VAR_15 -> VAR_16 ? "I420" : "YV12" ) ;  } if ( VAR_17 -> VAR_18 || VAR_19 -> VAR_20 ) METHOD_7 ( VAR_21 , "\\nStreamIndex:%d\\n" , VAR_22 -> VAR_23 ) ; METHOD_8 ( VAR_24 , "Destinationfile:%s\\n" , VAR_25 -> VAR_26 . VAR_27 ) ; METHOD_9 ( VAR_28 , "Encoderparameters:\\n" ) ; METHOD_10 ( VAR_29 ) ; METHOD_11 ( VAR_30 ) ; METHOD_12 ( VAR_31 ) ; METHOD_13 ( VAR_32 ) ; METHOD_14 ( VAR_33 ) ;  METHOD_15 ( VAR_34 . VAR_35 ) ;  METHOD_16 ( VAR_36 . VAR_37 ) ; METHOD_17 ( VAR_38 ) ; METHOD_18 ( VAR_39 ) ; METHOD_19 ( VAR_40 ) ; METHOD_20 ( VAR_41 ) ;  METHOD_21 ( VAR_42 ) ;  METHOD_22 ( VAR_43 ) ; METHOD_23 ( VAR_44 ) ; METHOD_24 ( VAR_45 ) ; METHOD_25 ( VAR_46 ) ; METHOD_26 ( VAR_47 ) ; METHOD_27 ( VAR_48 ) ; METHOD_28 ( VAR_49 ) ; METHOD_29 ( VAR_50 ) ; METHOD_30 ( VAR_51 ) ; METHOD_31 ( VAR_52 ) ; METHOD_32 ( VAR_53 ) ; METHOD_33 ( VAR_54 ) ; METHOD_34 ( VAR_55 ) ; METHOD_35 ( VAR_56 ) ; METHOD_36 ( VAR_57 ) ; METHOD_37 ( VAR_58 ) ; METHOD_38 ( VAR_59 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 , TYPE_12 VAR_11 , TYPE_13 VAR_12 , TYPE_14 VAR_13 ) { VAR_14 * VAR_15 ; TYPE_15 VAR_16 ; VAR_17 = METHOD_1 ( ( TYPE_16 * ) VAR_18 , VAR_19 ) ; if ( ! VAR_20 ) return VAR_21 ; if ( VAR_22 == 0 ) VAR_23 = VAR_24 * METHOD_2 ( VAR_25 ) ; switch ( VAR_26 ) { case 32 : VAR_27 -> VAR_28 = VAR_29 ; break ; case 24 : VAR_30 -> VAR_31 = VAR_32 ; break ; case 16 : VAR_33 -> VAR_34 = VAR_35 ; break ; case 8 : VAR_36 -> VAR_37 = VAR_38 ; break ; case 4 : VAR_39 -> VAR_40 = VAR_41 ; break ; default : METHOD_3 ( VAR_42 , VAR_43 ) ; return VAR_44 ; } VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = VAR_50 ; VAR_51 = METHOD_4 ( VAR_52 , VAR_53 ) ; METHOD_5 ( VAR_54 , VAR_55 ) ; if ( ! VAR_56 ) return VAR_57 ;  METHOD_6 ( VAR_58 -> VAR_59 -> VAR_60 )   METHOD_7 ( VAR_61 ) ;  METHOD_8 ( VAR_62 -> VAR_63 -> VAR_64 )  METHOD_9 ( VAR_65 -> VAR_66 -> VAR_67 )   VAR_68 -> METHOD_10 ( VAR_69 ) ;   METHOD_11 ( VAR_70 -> VAR_71 -> VAR_72 )  if ( ! METHOD_12 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , VAR_80 -> VAR_81 , VAR_82 , 0 , 0 , 0 , VAR_83 , VAR_84 ) ) return VAR_85 ; return VAR_86 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ,  TYPE_1 * VAR_2 )  {  VAR_3 * VAR_4 ;  TYPE_2 VAR_5 , VAR_6 [ 3 ] = { 0 } ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 . VAR_10 ; TYPE_3 VAR_11 ;  * VAR_12 = 0 ;  if ( ( VAR_13 = METHOD_1 ( VAR_14 , VAR_15 ) ) != 0 )  goto VAR_16 ;  if ( ( VAR_17 = METHOD_2 ( VAR_18 , VAR_19 ) ) != 0 ) goto VAR_20 ; if ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 , & VAR_24 ) ) != 0 ) goto VAR_25 ; if ( METHOD_4 ( VAR_26 [ 0 ] & ( VAR_27 - 1U ) ) ) return - VAR_28 ; if ( METHOD_5 ( VAR_29 [ 0 ] & VAR_30 ) ) { TYPE_4 VAR_31 ; TYPE_5 VAR_32 ;  VAR_33 = ( TYPE_6 * ) VAR_34 -> VAR_35 - ( TYPE_7 * ) VAR_36 -> VAR_37 ;  VAR_38 = VAR_39 -> VAR_40 . VAR_41 - VAR_42 ; if ( VAR_43 > VAR_44 ) {  METHOD_6 ( "NFS:servercheatingingetattr"  "aclreply:attrlen%u>recvd%u\\n" , VAR_45 , VAR_46 ) ; return - VAR_47 ; } METHOD_7 ( VAR_48 , VAR_49 ) ;  * VAR_50 = VAR_51 ;  } else VAR_52 = - VAR_53 ; VAR_54 : return VAR_55 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 = VAR_3 -> VAR_4 . VAR_5 ? VAR_6 -> VAR_7 . VAR_8 : VAR_9 -> VAR_10 . VAR_11 ; if ( ! METHOD_1 ( VAR_12 -> VAR_13 . VAR_14 ) ) return ( VAR_15 ) ;  if ( VAR_16 -> VAR_17 . VAR_18 != VAR_19 || VAR_20 -> VAR_21 . VAR_22 -> VAR_23 != & VAR_24 -> VAR_25 ) {  } else if ( METHOD_2 ( VAR_26 ) ) { VAR_27 = METHOD_3 ( VAR_28 -> VAR_29 . VAR_30 ) ; if ( VAR_31 == 2 ) return ( VAR_32 ) ; if ( VAR_33 == 0 && ! METHOD_4 ( VAR_34 ) ) return ( VAR_35 ) ; else METHOD_5 ( VAR_36 ) ; } METHOD_6 ( VAR_37 ) ; if ( VAR_38 -> VAR_39 != VAR_40 ) METHOD_7 ( VAR_41 -> VAR_42 ) ; else if ( VAR_43 -> VAR_44 != VAR_45 ) METHOD_8 ( VAR_46 -> VAR_47 ) ; METHOD_9 ( VAR_48 -> VAR_49 ) ; return ( VAR_50 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  METHOD_1 ( VAR_3 % 4096 == 0 ) ;  METHOD_2 ( STRUCT_OR_UNION_2 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; STRUCT_OR_UNION_4 -> VAR_4 = VAR_5 ; STRUCT_OR_UNION_5 -> VAR_6 = VAR_7 - 1 ; STRUCT_OR_UNION_6 -> VAR_8 = VAR_9 & VAR_10 ; STRUCT_OR_UNION_7 -> VAR_11 = VAR_12 | ( VAR_13 & VAR_14 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { unsigned TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = 0 ; TYPE_4 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; if ( VAR_11 ) METHOD_1 ( VAR_12 , VAR_13 ) ; METHOD_2 ( VAR_14 ) ;  VAR_15 = METHOD_3 ( VAR_16 -> VAR_17 ) ;   VAR_18 = METHOD_4 ( VAR_19 -> VAR_20 ) ;  if ( VAR_21 == 0 ) return 0 ; VAR_22 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_23 ) ; if ( VAR_24 == VAR_25 ) return - VAR_26 ; if ( VAR_27 & VAR_28 ) { struct STRUCT_OR_UNION_6 VAR_29 ; unsigned TYPE_5 VAR_30 ; METHOD_6 ( & VAR_31 ) ;  VAR_32 = METHOD_7 ( VAR_33 ) ;  if ( VAR_34 > VAR_35 ) VAR_36 -= VAR_37 ; else VAR_38 = 0 ; } VAR_39 = ( VAR_40 + VAR_41 - 1 ) / VAR_42 + METHOD_8 ( ) ; VAR_43 = ( VAR_44 + VAR_45 - 1 ) / VAR_46 ; METHOD_9 ( ) ; VAR_47 = METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( & VAR_48 [ VAR_49 ] . VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 = METHOD_13 ( ) ; VAR_57 -> VAR_58 . STRUCT_OR_UNION_7 . VAR_59 = VAR_60 ; VAR_61 -> VAR_62 . STRUCT_OR_UNION_8 . VAR_63 = VAR_64 ; VAR_65 -> VAR_66 . STRUCT_OR_UNION_9 . VAR_67 = VAR_68 ; VAR_69 -> VAR_70 . STRUCT_OR_UNION_10 . VAR_71 = VAR_72 ; VAR_73 = VAR_74 [ VAR_75 ] . VAR_76 ; METHOD_14 ( VAR_77 ) ; if ( VAR_78 [ VAR_79 ] . VAR_80 == VAR_81 ) { METHOD_15 ( & VAR_82 [ VAR_83 ] . VAR_84 , VAR_85 ) ; METHOD_16 ( ) ; return VAR_86 ; } if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 ) ; METHOD_19 ( VAR_90 ) ; METHOD_20 ( & VAR_91 [ VAR_92 ] . VAR_93 , VAR_94 ) ; METHOD_21 ( ) ; return VAR_95 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; const TYPE_2 * VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 ) ; if ( METHOD_2 ( VAR_7 , 1 ) ) METHOD_3 ( VAR_8 , 1 ) ; else if ( METHOD_4 ( VAR_9 , 1 ) ) METHOD_5 ( VAR_10 , "" , 0 ) ; else METHOD_6 ( VAR_11 , METHOD_7 ( VAR_12 , 1 ) , 0 ) ; VAR_13 = METHOD_8 ( VAR_14 , - 1 ) ;  if ( ! METHOD_9 ( VAR_15 -> VAR_16 , VAR_17 , & VAR_18 , 0 ) )  METHOD_10 ( VAR_19 , METHOD_11 ( VAR_20 , VAR_21 . VAR_22 [ 0 ] . VAR_23 ) ) ; else METHOD_12 ( VAR_24 , - 1 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 , TYPE_2 * VAR_4 ) { struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_5 * VAR_11 = VAR_12 -> VAR_13 ; struct STRUCT_OR_UNION_6 * VAR_14 , VAR_15 ;  struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ;  struct STRUCT_OR_UNION_9 * VAR_16 = VAR_17 ;  TYPE_3 VAR_18 ;   TYPE_4 VAR_19 = 500 , VAR_20 = - 1 , VAR_21 , VAR_22 , VAR_23 ;  TYPE_5 VAR_24 ; TYPE_6 VAR_25 [ 64 ] ; const TYPE_7 * VAR_26 = VAR_27 ; if ( VAR_28 -> VAR_29 != VAR_30 ) return METHOD_1 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ;  if ( ( STRUCT_OR_UNION_10 = METHOD_2 ( VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) == VAR_39 ) {  VAR_40 = 416 ; ( TYPE_8 ) METHOD_3 ( VAR_41 , sizeof ( VAR_42 ) , "bytes*/%lld" , VAR_43 -> VAR_44 ) ; VAR_45 = VAR_46 ; goto VAR_47 ; } if ( ( VAR_48 = METHOD_4 ( VAR_49 , VAR_50 ) ) == - 1 ) goto VAR_51 ; VAR_52 = METHOD_5 ( VAR_53 , VAR_54 , VAR_55 ) ;  if ( ( VAR_56 = METHOD_6 ( ) ) == VAR_57 ) {  VAR_58 = "failedtoallocatefilebuffer" ; goto VAR_59 ; } if ( VAR_60 == 1 ) {  ( TYPE_9 ) METHOD_7 ( VAR_61 , sizeof ( VAR_62 ) ,  "bytes%lld-%lld/%lld" , STRUCT_OR_UNION_11 -> VAR_63 , STRUCT_OR_UNION_12 -> VAR_64 , VAR_65 -> VAR_66 ) ; if ( METHOD_8 ( & VAR_67 -> VAR_68 , "Content-Range" , VAR_69 ) == VAR_70 ) goto VAR_71 ;  VAR_72 = STRUCT_OR_UNION_13 -> VAR_73 - STRUCT_OR_UNION_14 -> VAR_74 + 1 ;   if ( METHOD_9 ( VAR_75 , VAR_76 , STRUCT_OR_UNION_15 ) == 0 )  goto VAR_77 ; } else {  VAR_78 = 0 ;  VAR_79 = METHOD_10 ( ) ; while ( VAR_80 -- ) { if ( ( VAR_81 = METHOD_11 ( VAR_82 , "\\r\\n--%ud\\r\\n" , VAR_83 ) ) == - 1 ) goto VAR_84 ;  VAR_85 += VAR_86 ;  if ( ( VAR_87 = METHOD_12 ( VAR_88 , "Content-Type:%s/%s\\r\\n" , VAR_89 -> STRUCT_OR_UNION_16 , VAR_90 -> VAR_91 ) ) == - 1 ) goto VAR_92 ; VAR_93 += VAR_94 ; if ( ( VAR_95 = METHOD_13 ( VAR_96 , "Content-Range:bytes%lld-%lld/%lld\\r\\n\\r\\n" , STRUCT_OR_UNION_17 -> VAR_97 , STRUCT_OR_UNION_18 -> VAR_98 , VAR_99 -> VAR_100 ) ) == - 1 ) goto VAR_101 ; VAR_102 += VAR_103 ; if ( METHOD_14 ( VAR_104 , VAR_105 , STRUCT_OR_UNION_19 ) == 0 ) goto VAR_106 ; VAR_107 += STRUCT_OR_UNION_20 -> VAR_108 - STRUCT_OR_UNION_21 -> VAR_109 + 1 ;  STRUCT_OR_UNION_22 ++ ;  }  if ( ( VAR_110 = METHOD_15 ( VAR_111 , "\\r\\n--%ud--\\r\\n" ,  VAR_112 ) ) == - 1 ) goto VAR_113 ;  VAR_114 += VAR_115 ;  ( TYPE_10 ) METHOD_16 ( VAR_116 . STRUCT_OR_UNION_23 , "multipart" , sizeof ( VAR_117 . STRUCT_OR_UNION_24 ) ) ; ( TYPE_11 ) METHOD_17 ( VAR_118 . VAR_119 , sizeof ( VAR_120 . VAR_121 ) ,  "byteranges;boundary=%ud" , VAR_122 ) ;  VAR_123 = & VAR_124 ; }  METHOD_18 ( VAR_125 ) ;  VAR_126 = - 1 ; VAR_127 = METHOD_19 ( VAR_128 , 206 , VAR_129 , VAR_130 , METHOD_20 ( METHOD_21 ( VAR_131 ) , VAR_132 -> VAR_133 . VAR_134 ) ) ; switch ( VAR_135 ) { case - 1 : goto VAR_136 ; case 0 :  goto VAR_137 ;  default : break ; }  if ( METHOD_22 ( VAR_138 , VAR_139 ) == - 1 )  goto VAR_140 ;  METHOD_23 ( VAR_141 -> VAR_142 , VAR_143 | VAR_144 ) ;   if ( VAR_145 -> VAR_146 )  VAR_147 -> VAR_148 = VAR_149 ; else VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = 0 ; VAR_155 : METHOD_24 ( VAR_156 ) ; METHOD_25 ( VAR_157 ) ; return ( 0 ) ; VAR_158 : METHOD_26 ( VAR_159 -> VAR_160 , VAR_161 | VAR_162 ) ; METHOD_27 ( VAR_163 -> VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 :  if ( VAR_169 != VAR_170 )  METHOD_28 ( VAR_171 ) ; if ( VAR_172 != - 1 ) METHOD_29 ( VAR_173 ) ; if ( VAR_174 == VAR_175 ) VAR_176 = METHOD_30 ( VAR_177 ) ; METHOD_31 ( VAR_178 , VAR_179 , VAR_180 ) ; return ( - 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 = VAR_6 ;  VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ;   METHOD_2 ( VAR_10 , VAR_11 , 0 ) ;   VAR_12 = METHOD_3 ( VAR_13 , VAR_14 ) ;  if ( ( VAR_15 & VAR_16 ) != 0 ) {  VAR_17 &= ~ VAR_18 ;  VAR_19 -> VAR_20 = VAR_21 ; VAR_22 |= METHOD_4 ( & VAR_23 ) ; }  if ( ( VAR_24 & VAR_25 ) != 0 )  {  METHOD_5 ( VAR_26 , VAR_27 , VAR_28 ) ;   VAR_29 = METHOD_6 ( VAR_30 , VAR_31 ) & VAR_32 ;  if ( VAR_33 >= ( VAR_34 + 8 ) ) { VAR_35 |= METHOD_7 ( & VAR_36 -> VAR_37 ) ; } }  if ( ( VAR_38 & VAR_39 ) != 0 )  {  VAR_40 &= ~ VAR_41 ;  VAR_42 -> VAR_43 = VAR_44 ; VAR_45 |= METHOD_8 ( & VAR_46 ) ; }  METHOD_9 ( VAR_47 , VAR_48 , VAR_49 ) ;  return VAR_50 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,   struct STRUCT_OR_UNION_0 * VAR_1 ) {   METHOD_1 ( VAR_2 , VAR_3 -> VAR_4 , VAR_5 ) ;  METHOD_2 ( VAR_6 , VAR_7 -> VAR_8 ) ; METHOD_3 ( VAR_9 , VAR_10 -> VAR_11 ) ; METHOD_4 ( VAR_12 , VAR_13 -> VAR_14 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 * const VAR_7 = VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 = VAR_15 -> VAR_16 ; const TYPE_8 * VAR_17 = VAR_18 -> VAR_19 ; if ( VAR_20 < 32 ) return VAR_21 ; VAR_22 = VAR_23 [ 1 ] & 7 ; VAR_24 -> VAR_25 = VAR_26 [ 1 ] & 0xE0 ; VAR_27 = METHOD_1 ( & VAR_28 [ 14 ] ) ; VAR_29 = METHOD_2 ( & VAR_30 [ 16 ] ) ; VAR_31 -> VAR_32 = VAR_33 [ 19 ] ; VAR_34 -> VAR_35 = METHOD_3 ( & VAR_36 [ 20 ] ) ; VAR_37 -> VAR_38 = VAR_39 + 32 ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 + VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 = VAR_48 - VAR_49 -> VAR_50 - 32 ; if ( VAR_51 -> VAR_52 > 512 ) return VAR_53 ; if ( VAR_54 < VAR_55 -> VAR_56 + 32 ) return VAR_57 ; if ( VAR_58 -> VAR_59 < 1 ) return VAR_60 ; if ( VAR_61 -> VAR_62 != VAR_63 && VAR_64 -> VAR_65 != VAR_66 && VAR_67 -> VAR_68 != VAR_69 ) { METHOD_4 ( VAR_70 , "Pixelformat0x%0x" , VAR_71 -> VAR_72 ) ; return VAR_73 ; } if ( ( VAR_74 = METHOD_5 ( VAR_75 , VAR_76 , VAR_77 ) ) < 0 ) return VAR_78 ; if ( VAR_79 -> VAR_80 == VAR_81 ) VAR_82 = VAR_83 -> VAR_84 ; else VAR_85 = METHOD_6 ( VAR_86 -> VAR_87 -> VAR_88 , 16 ) ; VAR_89 -> VAR_90 = VAR_91 - VAR_92 -> VAR_93 -> VAR_94 ; if ( VAR_95 -> VAR_96 < VAR_97 * VAR_98 -> VAR_99 * ( TYPE_9 ) VAR_100 -> VAR_101 / 8 ) return VAR_102 ; if ( ! VAR_103 && VAR_104 -> VAR_105 && VAR_106 -> VAR_107 <= 8 && VAR_108 -> VAR_109 != VAR_110 ) { VAR_111 -> VAR_112 = VAR_113 ;  } else if ( VAR_114 == 1 && ( VAR_115 -> VAR_116 == 6 || VAR_117 -> VAR_118 == 8 ) ) {  if ( VAR_119 -> VAR_120 != ( 1 << ( VAR_121 -> VAR_122 - 1 ) ) ) return VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; } else if ( ! VAR_127 && VAR_128 -> VAR_129 == 24 && VAR_130 -> VAR_131 == VAR_132 && ! VAR_133 -> VAR_134 ) { VAR_135 -> VAR_136 = VAR_137 ; } else { METHOD_7 ( VAR_138 , "Encoding%d,bpp%dandformat0x%x" , VAR_139 , VAR_140 -> VAR_141 , VAR_142 -> VAR_143 ) ; return VAR_144 ; } if ( ( VAR_145 = METHOD_8 ( VAR_146 , VAR_147 , 0 ) ) < 0 ) return VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; if ( VAR_152 ) { METHOD_9 ( & VAR_153 -> VAR_154 , & VAR_155 -> VAR_156 , VAR_157 * VAR_158 + VAR_159 ) ; if ( ! VAR_160 -> VAR_161 ) return METHOD_10 ( VAR_162 ) ; if ( VAR_163 -> VAR_164 == 8 ) METHOD_11 ( VAR_165 , VAR_166 ) ; else METHOD_12 ( VAR_167 , VAR_168 ) ; } else if ( VAR_169 -> VAR_170 == VAR_171 ) { METHOD_13 ( VAR_172 , VAR_173 ) ; } else { METHOD_14 ( VAR_174 , VAR_175 ) ; } * VAR_176 = 1 ; return VAR_177 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { METHOD_1 ( VAR_4 ) ; METHOD_2 ( "UIPC_Send:ch_id:%d%dbytes" , VAR_5 , VAR_6 ) ; METHOD_3 ( ) ;  if ( METHOD_4 ( VAR_7 . VAR_8 [ VAR_9 ] . VAR_10 , VAR_11 , VAR_12 ) < 0 )  { METHOD_5 ( "failedtowrite(%s)" , METHOD_6 ( VAR_13 ) ) ; } METHOD_7 ( ) ; return VAR_14 ; }
static const TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; const TYPE_2 * VAR_2 = VAR_3 -> VAR_4 ; do { switch ( * VAR_5 -> VAR_6 ) { case ':' : VAR_7 -> VAR_8 . VAR_9 = & VAR_10 -> VAR_11 [ 0 ] ; VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = 0 ; return ++ VAR_16 -> VAR_17 ; case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : case '+' : case '-' : case '.' : if ( VAR_18 -> VAR_19 == VAR_20 ) {  return VAR_21 ;  } case 'A' : case 'B' : case 'C' : case 'D' : case 'E' : case 'F' : case 'G' : case 'H' : case 'I' : case 'J' : case 'K' : case 'L' : case 'M' : case 'N' : case 'O' : case 'P' : case 'Q' : case 'R' : case 'S' : case 'T' : case 'U' : case 'V' : case 'W' : case 'X' : case 'Y' : case 'Z' : case 'a' : case 'b' : case 'c' : case 'd' : case 'e' : case 'f' : case 'g' : case 'h' : case 'i' : case 'j' : case 'k' : case 'l' : case 'm' : case 'n' : case 'o' : case 'p' : case 'q' : case 'r' : case 's' : case 't' : case 'u' : case 'v' : case 'w' : case 'x' : case 'y' : case 'z' : VAR_22 -> VAR_23 [ VAR_24 -> VAR_25 ++ ] = * VAR_26 -> VAR_27 ; break ; default : if ( ! ( VAR_28 = METHOD_1 ( VAR_29 , VAR_30 , VAR_31 -> VAR_32 , VAR_33 -> VAR_34 , VAR_35 , 1 ) ) ) {  return VAR_36 ;  } VAR_37 -> VAR_38 += VAR_39 - 1 ; } } while ( ++ VAR_40 -> VAR_41 != VAR_42 -> VAR_43 ) ;  return VAR_44 -> VAR_45 = VAR_46 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned VAR_1 , unsigned TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = ( struct STRUCT_OR_UNION_2 * ) VAR_4 -> VAR_5 ; switch ( VAR_6 ) { case VAR_7 : {  struct STRUCT_OR_UNION_3 VAR_8 ;  VAR_9 . VAR_10 = VAR_11 | VAR_12 | VAR_13 ; VAR_14 . VAR_15 = 0 ; VAR_16 . VAR_17 = 0 ; VAR_18 . VAR_19 = 0 ; if ( METHOD_1 ( ( TYPE_2 TYPE_3 * ) VAR_20 , & VAR_21 , sizeof ( VAR_22 ) ) ) return - VAR_23 ; return 0 ; } default : METHOD_2 ( VAR_24 , 1 , "Unknownioctl%08x\\n" , VAR_25 ) ; return - VAR_26 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 )  {  if ( ( VAR_2 -> VAR_3 == VAR_4 || VAR_5 -> VAR_6 == VAR_7 ) && ( VAR_8 & VAR_9 ) && ( VAR_10 & VAR_11 ) ) { if ( ! VAR_12 -> VAR_13 ) { VAR_14 -> VAR_15 = VAR_16 ; METHOD_1 ( & VAR_17 ) ; METHOD_2 ( & VAR_18 -> VAR_19 , & VAR_20 ) ; METHOD_3 ( & VAR_21 ) ; }  } else if ( VAR_22 -> VAR_23 ) {  METHOD_4 ( VAR_24 ) ; }  }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 ) { TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , sizeof ( TYPE_7 ) ) ; if ( VAR_9 == VAR_10 ) return VAR_11 ; VAR_12 -> VAR_13 = VAR_14 ; VAR_15 -> VAR_16 = VAR_17 ; VAR_18 -> VAR_19 = METHOD_2 ( VAR_20 , VAR_21 , sizeof ( TYPE_8 * ) ) ; if ( VAR_22 -> VAR_23 == VAR_24 ) return VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 ; VAR_29 ++ ) {  VAR_30 -> VAR_31 [ VAR_32 ] = METHOD_3 ( VAR_33 , VAR_34 , sizeof ( TYPE_9 ) ) ;  if ( VAR_35 == 256 ) { for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ ) { VAR_40 -> VAR_41 [ VAR_42 ] [ VAR_43 ] = METHOD_4 ( VAR_44 [ VAR_45 ] , METHOD_5 ( VAR_46 ) ) ; } } else { for ( VAR_47 = 0 ; VAR_48 < VAR_49 ; VAR_50 ++ ) { VAR_51 -> VAR_52 [ VAR_53 ] [ VAR_54 ] = METHOD_6 ( VAR_55 [ VAR_56 ] , ( TYPE_10 ) VAR_57 ) ; } } } return VAR_58 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 * VAR_3 , unsigned TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 ; const TYPE_4 * VAR_7 = VAR_8 ; const TYPE_5 * VAR_9 = VAR_10 ; const TYPE_6 * VAR_11 = VAR_12 ; struct STRUCT_OR_UNION_5 VAR_13 ; struct STRUCT_OR_UNION_6 VAR_14 ; struct STRUCT_OR_UNION_7 VAR_15 ; TYPE_7 VAR_16 = 0 ; TYPE_8 VAR_17 = - VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 ) ; if ( ! VAR_21 ) goto VAR_22 ; VAR_23 . VAR_24 = VAR_25 ; METHOD_2 ( & VAR_26 ) ; VAR_27 = METHOD_3 ( VAR_28 ) ; if ( ! VAR_29 ) { VAR_30 = - VAR_31 ; goto VAR_32 ; } VAR_33 . VAR_34 = VAR_35 ; METHOD_4 ( & VAR_36 ) ; if ( ! METHOD_5 ( VAR_37 , VAR_38 ) ) { } else if ( ! METHOD_6 ( VAR_39 , VAR_40 ) || ! METHOD_7 ( VAR_41 , VAR_42 ) || ! METHOD_8 ( VAR_43 , VAR_44 ) || ! METHOD_9 ( VAR_45 , VAR_46 ) ) { } else if ( ! METHOD_10 ( VAR_47 , VAR_48 ) || ! METHOD_11 ( VAR_49 , VAR_50 ) ) { VAR_51 = - 1 ; } else { VAR_52 = METHOD_12 ( VAR_53 ) ; if ( ! VAR_54 ) { VAR_55 = - VAR_56 ; goto VAR_57 ; } if ( VAR_58 -> VAR_59 & VAR_60 ) VAR_61 = 1 ; } if ( VAR_62 ) {  if ( METHOD_13 ( VAR_63 , VAR_64 , & STRUCT_OR_UNION_8 ) ) {  VAR_65 = - VAR_66 ; goto VAR_67 ; } VAR_68 = METHOD_14 ( & STRUCT_OR_UNION_9 ) ; METHOD_15 ( & STRUCT_OR_UNION_10 ) ; if ( ! VAR_69 ) { VAR_70 = - VAR_71 ; goto VAR_72 ; } } else { if ( ! VAR_73 ) VAR_74 = "<NULL>" ; VAR_75 = METHOD_16 ( VAR_76 ) ; if ( ! VAR_77 ) { VAR_78 = - VAR_79 ; goto VAR_80 ; } } VAR_81 . VAR_82 = VAR_83 ; METHOD_17 ( & VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 . VAR_90 . VAR_91 = VAR_92 ; VAR_93 -> VAR_94 . VAR_95 . VAR_96 = & VAR_97 ; VAR_98 -> VAR_99 . VAR_100 . VAR_101 = & VAR_102 ; VAR_103 -> VAR_104 . VAR_105 . VAR_106 = & VAR_107 ; VAR_108 -> VAR_109 . VAR_110 . VAR_111 = VAR_112 ; do { METHOD_18 ( VAR_113 , VAR_114 ) ; VAR_115 = METHOD_19 ( VAR_116 ) ; } while ( VAR_117 == VAR_118 ) ; VAR_119 : METHOD_20 ( VAR_120 ) ; METHOD_21 ( VAR_121 ) ; if ( VAR_122 ) METHOD_22 ( VAR_123 ) ; METHOD_23 ( VAR_124 ) ; return VAR_125 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , const struct STRUCT_OR_UNION_0 * VAR_5 , const struct STRUCT_OR_UNION_1 * VAR_6 ) { switch ( VAR_7 ) { case VAR_8 : METHOD_1 ( VAR_9 , VAR_10 , VAR_11 ) ; return ( 1 ) ; case VAR_12 : METHOD_2 ( VAR_13 , VAR_14 , VAR_15 ) ; return ( 1 ) ; case VAR_16 : case VAR_17 : METHOD_3 ( VAR_18 , VAR_19 , VAR_20 , VAR_21 ) ; return ( 1 ) ; case VAR_22 : METHOD_4 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; return ( 1 ) ; case VAR_27 : if ( VAR_28 -> VAR_29 ) METHOD_5 ( ( VAR_30 , "et1" ) ) ; METHOD_6 ( VAR_31 , VAR_32 , VAR_33 ) ; return ( 1 ) ; case VAR_34 : METHOD_7 ( VAR_35 , VAR_36 , VAR_37 ) ; return ( 1 ) ; case VAR_38 : METHOD_8 ( ( VAR_39 , "(NOV-ETHII)" ) ) ; METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; return ( 1 ) ; case VAR_43 : if ( VAR_44 == 0 || VAR_45 == 0 ) { METHOD_10 ( ( VAR_46 , "[|osi]" ) ) ; return ( 1 ) ; }  METHOD_11 ( VAR_47 , VAR_48 + 1 , VAR_49 - 1 , VAR_50 - 1 ) ;  return ( 1 ) ; case VAR_51 : case VAR_52 : case VAR_53 : case VAR_54 : METHOD_12 ( VAR_55 , VAR_56 , VAR_57 ) ; return ( 1 ) ; case VAR_58 : METHOD_13 ( VAR_59 , VAR_60 , VAR_61 ) ; return ( 1 ) ; case VAR_62 : METHOD_14 ( VAR_63 , VAR_64 , VAR_65 , VAR_66 , VAR_67 ) ; return ( 1 ) ; case VAR_68 : if ( VAR_69 ) { METHOD_15 ( ( VAR_70 , ":" ) ) ; METHOD_16 ( VAR_71 , VAR_72 , VAR_73 ) ; } return ( 1 ) ; case VAR_74 : METHOD_17 ( VAR_75 , VAR_76 , VAR_77 ) ; return ( 1 ) ; case VAR_78 : METHOD_18 ( VAR_79 , VAR_80 , VAR_81 ) ; return ( 1 ) ; case VAR_82 : case VAR_83 : METHOD_19 ( VAR_84 , VAR_85 , VAR_86 ) ; return ( 1 ) ; case VAR_87 : METHOD_20 ( VAR_88 , VAR_89 , VAR_90 ) ; return ( 1 ) ; case VAR_91 : METHOD_21 ( VAR_92 , VAR_93 , VAR_94 ) ; return ( 1 ) ; case VAR_95 : METHOD_22 ( VAR_96 , VAR_97 , VAR_98 ) ; return ( 1 ) ; case VAR_99 : case VAR_100 : METHOD_23 ( VAR_101 , VAR_102 , VAR_103 ) ; return ( 1 ) ; case VAR_104 : METHOD_24 ( VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ; return ( 1 ) ; case VAR_109 : METHOD_25 ( VAR_110 , VAR_111 ) ; return ( 1 ) ; case VAR_112 : case VAR_113 : METHOD_26 ( VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ; return ( 1 ) ; case VAR_118 : METHOD_27 ( VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; return ( 1 ) ; case VAR_123 : METHOD_28 ( VAR_124 , VAR_125 , VAR_126 ) ; return ( 1 ) ; case VAR_127 : METHOD_29 ( VAR_128 , VAR_129 , VAR_130 , VAR_131 , VAR_132 , VAR_133 ) ; return ( 1 ) ; case VAR_134 : case VAR_135 : case VAR_136 : case VAR_137 : case VAR_138 : default : return ( 0 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 , TYPE_2 VAR_0 ) { TYPE_3 * VAR_1 , * VAR_2 = VAR_3 ; TYPE_4 VAR_4 , VAR_5 = 0 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 = VAR_8 ; TYPE_7 * VAR_9 ; TYPE_8 VAR_10 = 1 ; if ( zend_parse_parameters ( METHOD_1 ( ) VAR_11 , "s|ls!b" , & VAR_12 , & VAR_13 , & VAR_14 , & VAR_15 , & VAR_16 , & VAR_17 ) == FAILURE ) { return ; } VAR_18 = php_escape_html_entities_ex ( VAR_19 , VAR_20 , & VAR_21 , VAR_22 , ( TYPE_9 ) VAR_23 , VAR_24 , VAR_25 VAR_26 ) ;  METHOD_2 ( VAR_27 , ( TYPE_10 ) VAR_28 , 0 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 , struct STRUCT_OR_UNION_2 * VAR_4 ) { TYPE_3 * VAR_5 = VAR_6 ; TYPE_4 * VAR_7 = VAR_8 , * VAR_9 = VAR_10 ; TYPE_5 * VAR_11 = VAR_12 ; TYPE_6 * VAR_13 = VAR_14 , * VAR_15 = VAR_16 ; TYPE_7 VAR_17 = - 1 ; TYPE_8 * VAR_18 = VAR_19 ; TYPE_9 VAR_20 [ VAR_21 ] ; TYPE_10 VAR_22 [ VAR_23 ] ; struct STRUCT_OR_UNION_3 VAR_24 ; switch ( VAR_25 -> VAR_26 ) { case VAR_27 : case VAR_28 : case VAR_29 : case VAR_30 : break ; default : METHOD_1 ( "%s:unsupportedpublickeytype%s" , VAR_31 , METHOD_2 ( VAR_32 -> VAR_33 , VAR_34 ) ) ; return ( - 1 ) ; } METHOD_3 ( & VAR_35 , sizeof ( VAR_36 ) ) ; if ( ( VAR_37 . VAR_38 = METHOD_4 ( VAR_39 -> VAR_40 , VAR_41 -> VAR_42 ) ) == VAR_43 ) goto VAR_44 ; VAR_45 . VAR_46 = VAR_47 -> VAR_48 ; VAR_49 . VAR_50 = VAR_51 -> VAR_52 ; if ( METHOD_5 ( & VAR_53 , VAR_54 , sizeof ( VAR_55 ) ) == - 1 ) goto VAR_56 ; if ( VAR_57 == 0 && VAR_58 ) { VAR_59 = ( TYPE_11 * ) VAR_60 ; } if ( VAR_61 > 0 ) { if ( ( VAR_62 = METHOD_6 ( VAR_63 , VAR_64 ) ) == VAR_65 ) goto VAR_66 ; if ( ( VAR_67 = METHOD_7 ( ) ) == VAR_68 ) goto VAR_69 ; if ( ( VAR_70 = METHOD_8 ( VAR_71 , VAR_72 ) ) ) { if ( ! METHOD_9 ( VAR_73 , VAR_74 ) ) { goto VAR_75 ; } } else if ( METHOD_10 ( VAR_76 ) == 1 && ( VAR_77 = METHOD_11 ( VAR_78 , VAR_79 ) ) ) { if ( ! METHOD_12 ( VAR_80 , VAR_81 ) ) { goto VAR_82 ; } } else { METHOD_13 ( "%s:unknownkeytypereceived" , VAR_83 ) ; goto VAR_84 ; } } METHOD_14 ( VAR_85 ) ; if ( METHOD_15 ( VAR_86 , VAR_87 , sizeof ( VAR_88 ) ) >= sizeof ( VAR_89 ) || METHOD_16 ( VAR_90 , VAR_91 , sizeof ( VAR_92 ) ) >= sizeof ( VAR_93 ) ) { METHOD_17 ( "%s:publickeyidtoolong%s" , VAR_94 , VAR_95 ) ; goto VAR_96 ; } if ( ( VAR_97 = METHOD_18 ( VAR_98 , "r" ) ) == VAR_99 ) { METHOD_19 ( VAR_100 == 0 ? VAR_101 : VAR_102 , "%s:couldnotopenpublickey%s" , VAR_103 , VAR_104 ) ; goto VAR_105 ; } VAR_106 = METHOD_20 ( VAR_107 , VAR_108 , VAR_109 , VAR_110 ) ; if ( VAR_111 == VAR_112 ) { METHOD_21 ( VAR_113 ) ; VAR_114 = METHOD_22 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 ) ; METHOD_23 ( VAR_119 ) ; if ( VAR_120 == VAR_121 ) goto VAR_122 ; if ( ( VAR_123 = METHOD_24 ( ) ) == VAR_124 ) goto VAR_125 ; if ( ! METHOD_25 ( VAR_126 , VAR_127 ) ) goto VAR_128 ; } else { METHOD_26 ( VAR_129 ) ; } if ( VAR_130 == VAR_131 ) goto VAR_132 ;  if ( VAR_133 && ! METHOD_27 ( VAR_134 , VAR_135 ) ) {  METHOD_28 ( "%s:publickeydoesnotmatch%s" , VAR_136 , VAR_137 ) ; goto VAR_138 ; } METHOD_29 ( "%s:validpublickeyinfile%s" , VAR_139 , VAR_140 ) ; if ( VAR_141 && METHOD_30 ( VAR_142 , VAR_143 ) ) goto VAR_144 ; VAR_145 = 0 ; VAR_146 : if ( VAR_147 != 0 ) METHOD_31 ( VAR_148 ) ; VAR_149 : METHOD_32 ( VAR_150 . VAR_151 ) ; if ( VAR_152 != VAR_153 ) METHOD_33 ( VAR_154 ) ; if ( VAR_155 != VAR_156 ) METHOD_34 ( VAR_157 ) ; if ( VAR_158 != VAR_159 ) METHOD_35 ( VAR_160 ) ; if ( VAR_161 != VAR_162 ) METHOD_36 ( VAR_163 ) ; if ( VAR_164 != VAR_165 ) { METHOD_37 ( VAR_166 ) ; if ( VAR_167 != VAR_168 ) METHOD_38 ( VAR_169 ) ; } return ( VAR_170 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , "%i" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; METHOD_5 ( ) ;  METHOD_6 ( VAR_9 , VAR_10 ) ;  METHOD_7 ( VAR_11 , VAR_12 ) ; VAR_13 = METHOD_8 ( VAR_14 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ,  TYPE_5 VAR_4 , TYPE_6 VAR_5 ) {  TYPE_7 * VAR_6 = & VAR_7 -> VAR_8 ;  TYPE_8 VAR_9 = METHOD_1 ( VAR_10 ) , VAR_11 = ( 1 << VAR_12 ) / 4 ;   TYPE_9 VAR_13 = VAR_14 [ VAR_15 ] [ VAR_16 ] ;  METHOD_2 ( VAR_17 >= VAR_18 ) ; if ( VAR_19 >= VAR_20 -> VAR_21 || VAR_22 >= VAR_23 -> VAR_24 ) return ; switch ( VAR_25 ) { case VAR_26 :  METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ;   * ( VAR_31 -> VAR_32 [ 0 ] ) = METHOD_4 ( VAR_33 , VAR_34 ) -> VAR_35 ;  METHOD_5 ( VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; break ; case VAR_41 :  * METHOD_6 ( VAR_42 , VAR_43 ) = 0 ;  METHOD_7 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ;  * ( VAR_48 -> VAR_49 [ 0 ] ) = METHOD_8 ( VAR_50 , VAR_51 ) -> VAR_52 ;   METHOD_9 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ;  if ( VAR_58 + VAR_59 < VAR_60 -> VAR_61 ) {  * METHOD_10 ( VAR_62 , VAR_63 ) = 1 ;  METHOD_11 ( VAR_64 , VAR_65 , VAR_66 , VAR_67 + VAR_68 ) ; * ( VAR_69 -> VAR_70 [ 0 ] ) = METHOD_12 ( VAR_71 , VAR_72 ) -> VAR_73 ;  METHOD_13 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 + VAR_78 , VAR_79 ) ;  } break ; case VAR_80 :  * METHOD_14 ( VAR_81 , VAR_82 ) = 0 ;  METHOD_15 ( VAR_83 , VAR_84 , VAR_85 , VAR_86 ) ;  * ( VAR_87 -> VAR_88 [ 0 ] ) = METHOD_16 ( VAR_89 , VAR_90 ) -> VAR_91 ;   METHOD_17 ( VAR_92 , VAR_93 , VAR_94 , VAR_95 , VAR_96 ) ;  if ( VAR_97 + VAR_98 < VAR_99 -> VAR_100 ) {  * METHOD_18 ( VAR_101 , VAR_102 ) = 1 ;  METHOD_19 ( VAR_103 , VAR_104 , VAR_105 + VAR_106 , VAR_107 ) ; * ( VAR_108 -> VAR_109 [ 0 ] ) = METHOD_20 ( VAR_110 , VAR_111 ) -> VAR_112 ;  METHOD_21 ( VAR_113 , VAR_114 , VAR_115 + VAR_116 , VAR_117 , VAR_118 ) ;  } break ; case VAR_119 :  * METHOD_22 ( VAR_120 , VAR_121 ) = 0 ;  METHOD_23 ( VAR_122 , VAR_123 , VAR_124 , VAR_125 , VAR_126 ,  * ( METHOD_24 ( VAR_127 , VAR_128 ) ) ) ;  * METHOD_25 ( VAR_129 , VAR_130 ) = 1 ;  METHOD_26 ( VAR_131 , VAR_132 , VAR_133 , VAR_134 + VAR_135 , VAR_136 ,  * ( METHOD_27 ( VAR_137 , VAR_138 ) ) ) ; * METHOD_28 ( VAR_139 , VAR_140 ) = 2 ;  METHOD_29 ( VAR_141 , VAR_142 , VAR_143 + VAR_144 , VAR_145 , VAR_146 ,  * ( METHOD_30 ( VAR_147 , VAR_148 ) ) ) ; * METHOD_31 ( VAR_149 , VAR_150 ) = 3 ; METHOD_32 ( VAR_151 , VAR_152 , VAR_153 + VAR_154 , VAR_155 + VAR_156 , VAR_157 , * ( METHOD_33 ( VAR_158 , VAR_159 ) ) ) ;  break ;  default : break ; } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 = VAR_4 ; const TYPE_4 * VAR_5 , * VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 * VAR_8 ; if ( METHOD_1 ( VAR_9 , "submodule" , & VAR_10 , & VAR_11 , & VAR_12 ) < 0 || ! VAR_13 ) return 0 ; VAR_14 = METHOD_2 ( VAR_15 , VAR_16 ) ; if ( METHOD_3 ( VAR_17 ) < 0 ) VAR_18 -> VAR_19 |= METHOD_4 ( VAR_20 -> VAR_21 , VAR_22 -> VAR_23 , VAR_24 , "disallowedsubmodulename:%s" , VAR_25 ) ;  METHOD_5 ( VAR_26 ) ;  return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = VAR_2 -> VAR_3 -> VAR_4 ; TYPE_3 VAR_5 = VAR_6 -> VAR_7 . VAR_8 [ 0 ] / 2 ; TYPE_4 VAR_9 = VAR_10 - 4 ; TYPE_5 VAR_11 = 0 ; TYPE_6 VAR_12 ; unsigned TYPE_7 VAR_13 ; TYPE_8 VAR_14 ; unsigned TYPE_9 VAR_15 = 0 , VAR_16 ; unsigned TYPE_10 VAR_17 [ 4 ] ; unsigned TYPE_11 VAR_18 , VAR_19 ; unsigned TYPE_12 VAR_20 , VAR_21 ; unsigned TYPE_13 * VAR_22 = ( unsigned TYPE_14 * ) VAR_23 -> VAR_24 . VAR_25 [ 0 ] ; TYPE_15 VAR_26 = 0 ;  TYPE_16 VAR_27 = 0 ;  TYPE_17 VAR_28 ; TYPE_18 VAR_29 , VAR_30 ; TYPE_19 VAR_31 ; if ( VAR_32 -> VAR_33 [ VAR_34 ] != 0xe1 ) METHOD_1 ( VAR_35 -> VAR_36 , VAR_37 , "Firstchunkbyteis0x%02xinsteadof0xe1\\n" , VAR_38 -> VAR_39 [ VAR_40 ] ) ; VAR_41 = METHOD_2 ( & VAR_42 -> VAR_43 [ VAR_44 ] ) & 0x00FFFFFF ; VAR_45 += 4 ; if ( VAR_46 != VAR_47 -> VAR_48 ) METHOD_3 ( VAR_49 -> VAR_50 , VAR_51 , "MOVchunksize!=encodedchunksize;usingMOVchunksize\\n" ) ; VAR_52 = VAR_53 -> VAR_54 ; VAR_55 = ( ( VAR_56 -> VAR_57 -> VAR_58 + 3 ) / 4 ) * ( ( VAR_59 -> VAR_60 -> VAR_61 + 3 ) / 4 ) ; while ( VAR_62 < VAR_63 ) { VAR_64 = VAR_65 -> VAR_66 [ VAR_67 ++ ] ; VAR_68 = ( VAR_69 & 0x1f ) + 1 ; if ( ( VAR_70 & 0x80 ) == 0 ) { VAR_71 = ( VAR_72 << 8 ) | ( VAR_73 -> VAR_74 [ VAR_75 ++ ] ) ; VAR_76 = 0 ; if ( ( VAR_77 -> VAR_78 [ VAR_79 ] & 0x80 ) != 0 ) { VAR_80 = 0x20 ; VAR_81 = 1 ; } } switch ( VAR_82 & 0xe0 ) { case 0x80 : while ( VAR_83 -- ) { METHOD_4 ( ) ; } break ; case 0xa0 : VAR_84 = METHOD_5 ( & VAR_85 -> VAR_86 [ VAR_87 ] ) ; VAR_88 += 2 ; while ( VAR_89 -- ) {  VAR_90 = VAR_91 + VAR_92 ;  for ( VAR_93 = 0 ; VAR_94 < 4 ; VAR_95 ++ ) { for ( VAR_96 = 0 ; VAR_97 < 4 ; VAR_98 ++ ) { VAR_99 [ VAR_100 ] = VAR_101 ; VAR_102 ++ ; } VAR_103 += VAR_104 ; }  METHOD_6 ( ) ;  } break ; case 0xc0 : VAR_105 = METHOD_7 ( & VAR_106 -> VAR_107 [ VAR_108 ] ) ; VAR_109 += 2 ; case 0x20 : VAR_110 = METHOD_8 ( & VAR_111 -> VAR_112 [ VAR_113 ] ) ; VAR_114 += 2 ; VAR_115 [ 0 ] = VAR_116 ; VAR_117 [ 1 ] = 0 ; VAR_118 [ 2 ] = 0 ; VAR_119 [ 3 ] = VAR_120 ; VAR_121 = ( VAR_122 >> 10 ) & 0x1F ; VAR_123 = ( VAR_124 >> 10 ) & 0x1F ; VAR_125 [ 1 ] |= ( ( 11 * VAR_126 + 21 * VAR_127 ) >> 5 ) << 10 ; VAR_128 [ 2 ] |= ( ( 21 * VAR_129 + 11 * VAR_130 ) >> 5 ) << 10 ; VAR_131 = ( VAR_132 >> 5 ) & 0x1F ; VAR_133 = ( VAR_134 >> 5 ) & 0x1F ; VAR_135 [ 1 ] |= ( ( 11 * VAR_136 + 21 * VAR_137 ) >> 5 ) << 5 ; VAR_138 [ 2 ] |= ( ( 21 * VAR_139 + 11 * VAR_140 ) >> 5 ) << 5 ; VAR_141 = VAR_142 & 0x1F ; VAR_143 = VAR_144 & 0x1F ; VAR_145 [ 1 ] |= ( ( 11 * VAR_146 + 21 * VAR_147 ) >> 5 ) ; VAR_148 [ 2 ] |= ( ( 21 * VAR_149 + 11 * VAR_150 ) >> 5 ) ; if ( VAR_151 -> VAR_152 - VAR_153 < VAR_154 * 4 ) return ; while ( VAR_155 -- ) {  VAR_156 = VAR_157 + VAR_158 ;  for ( VAR_159 = 0 ; VAR_160 < 4 ; VAR_161 ++ ) { VAR_162 = VAR_163 -> VAR_164 [ VAR_165 ++ ] ; for ( VAR_166 = 0 ; VAR_167 < 4 ; VAR_168 ++ ) { VAR_169 = ( VAR_170 >> ( 2 * ( 3 - VAR_171 ) ) ) & 0x03 ; VAR_172 [ VAR_173 ] = VAR_174 [ VAR_175 ] ; VAR_176 ++ ; } VAR_177 += VAR_178 ; }  METHOD_9 ( ) ;  } break ; case 0x00 : if ( VAR_179 -> VAR_180 - VAR_181 < 16 ) return ;  VAR_182 = VAR_183 + VAR_184 ;  for ( VAR_185 = 0 ; VAR_186 < 4 ; VAR_187 ++ ) { for ( VAR_188 = 0 ; VAR_189 < 4 ; VAR_190 ++ ) { if ( ( VAR_191 != 0 ) || ( VAR_192 != 0 ) ) { VAR_193 = METHOD_10 ( & VAR_194 -> VAR_195 [ VAR_196 ] ) ; VAR_197 += 2 ; } VAR_198 [ VAR_199 ] = VAR_200 ; VAR_201 ++ ; } VAR_202 += VAR_203 ; }  METHOD_11 ( ) ;  break ; default : METHOD_12 ( VAR_204 -> VAR_205 , VAR_206 , "Unknownopcode%dinrpzachunk." "Skipremaining%dbytesofchunkdata.\\n" , VAR_207 , VAR_208 - VAR_209 ) ; return ; } } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 ;  METHOD_1 ( VAR_4 >= 0 ) ; METHOD_2 ( VAR_5 ) ; METHOD_3 ( 100 , ( "mem_read(%p,%p,%d)\\n" , VAR_6 , VAR_7 , VAR_8 ) ) ; TYPE_5 * VAR_9 = ( TYPE_6 * ) VAR_10 ; VAR_11 = VAR_12 -> VAR_13 - VAR_14 -> VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 , VAR_18 ) ; METHOD_5 ( VAR_19 , & VAR_20 -> VAR_21 [ VAR_22 -> VAR_23 ] , VAR_24 ) ; VAR_25 -> VAR_26 += VAR_27 ; return VAR_28 ; }
static struct STRUCT_OR_UNION_0 * * METHOD_0 ( struct STRUCT_OR_UNION_1 * * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; const struct STRUCT_OR_UNION_5 * VAR_5 ; unsigned TYPE_0 VAR_6 , VAR_7 ; unsigned TYPE_1 VAR_8 ; TYPE_2 VAR_9 = 1 ; struct STRUCT_OR_UNION_6 * VAR_10 ;  TYPE_3 VAR_11 ;  VAR_12 = METHOD_1 ( VAR_13 ) ; VAR_14 = VAR_15 + sizeof ( * VAR_16 ) ; VAR_17 = METHOD_2 ( VAR_18 , VAR_19 ) ; if ( METHOD_3 ( VAR_20 , VAR_21 ) ) { VAR_22 = METHOD_4 ( VAR_23 , VAR_24 , VAR_25 ) ; if ( METHOD_5 ( ! VAR_26 ) ) goto VAR_27 ; } if ( ( VAR_28 -> VAR_29 & ~ ( VAR_30 | VAR_31 ) ) != 0 ) goto VAR_32 ; VAR_33 = VAR_34 -> VAR_35 ; METHOD_6 ( ) ; VAR_36 = METHOD_7 ( VAR_37 ) ; if ( ! VAR_38 ) goto VAR_39 ; VAR_40 = VAR_41 ; if ( VAR_42 -> VAR_43 & VAR_44 ) VAR_45 += VAR_46 ; if ( VAR_47 -> VAR_48 & VAR_49 ) VAR_50 += VAR_51 ; VAR_52 = VAR_53 + VAR_54 ; if ( METHOD_8 ( VAR_55 , VAR_56 ) ) { VAR_57 = METHOD_9 ( VAR_58 , VAR_59 , VAR_60 ) ; if ( METHOD_10 ( ! VAR_61 ) ) goto VAR_62 ; } if ( ( VAR_63 -> VAR_64 & VAR_65 ) && ! METHOD_11 ( VAR_66 ) -> VAR_67 ) { if ( METHOD_12 ( VAR_68 ) ) goto VAR_69 ; METHOD_13 ( VAR_70 , VAR_71 , 0 , VAR_72 ) ; } for ( VAR_73 = * VAR_74 ; VAR_75 ; VAR_76 = VAR_77 -> VAR_78 ) { const struct STRUCT_OR_UNION_7 * VAR_79 ; if ( ! METHOD_14 ( VAR_80 ) -> VAR_81 ) continue ; VAR_82 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_83 -> VAR_84 + VAR_85 ) ; if ( VAR_86 -> VAR_87 != VAR_88 -> VAR_89 || VAR_90 -> VAR_91 != VAR_92 -> VAR_93 ) { METHOD_15 ( VAR_94 ) -> VAR_95 = 0 ; continue ; } if ( VAR_96 -> VAR_97 & VAR_98 ) { if ( * ( TYPE_4 * ) ( VAR_99 + 1 ) != * ( TYPE_5 * ) ( VAR_100 + 1 ) ) { METHOD_16 ( VAR_101 ) -> VAR_102 = 0 ; continue ; } } } METHOD_17 ( VAR_103 , VAR_104 ) ; METHOD_18 ( VAR_105 , VAR_106 , VAR_107 ) ; VAR_108 = VAR_109 -> VAR_110 . METHOD_19 ( VAR_111 , VAR_112 ) ; VAR_113 = 0 ; VAR_114 : METHOD_20 ( ) ; VAR_115 : METHOD_21 ( VAR_116 ) -> VAR_117 |= VAR_118 ; return VAR_119 ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ;  if ( ! ( VAR_4 = METHOD_1 ( sizeof ( TYPE_5 ) ) ) ) {  return 0 ; } VAR_5 -> VAR_6 = 0 ; VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = VAR_17 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = VAR_22 * VAR_23 ; if ( VAR_24 -> VAR_25 > 0 ) { if ( ! ( VAR_26 -> VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 , sizeof ( TYPE_6 * ) ) ) ) { METHOD_3 ( VAR_30 ) ; return 0 ; } } if ( VAR_31 -> VAR_32 > 0 ) { if ( ! ( VAR_33 -> VAR_34 = METHOD_4 ( VAR_35 -> VAR_36 , sizeof ( TYPE_7 ) ) ) ) { METHOD_5 ( VAR_37 ) ; return 0 ; } } for ( VAR_38 = 0 ; VAR_39 < VAR_40 ; ++ VAR_41 ) { VAR_42 -> VAR_43 [ VAR_44 ] = & VAR_45 -> VAR_46 [ VAR_47 * VAR_48 -> VAR_49 ] ; } for ( VAR_50 = 0 ; VAR_51 < VAR_52 -> VAR_53 ; ++ VAR_54 ) { VAR_55 -> VAR_56 [ VAR_57 ] = 0 ; } VAR_58 -> VAR_59 = 0 ; VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; return VAR_70 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 [ ] = "ATH" ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; VAR_7 . VAR_8 . VAR_9 = 0 ; if ( VAR_10 -> VAR_11 . VAR_12 . VAR_13 == 0 ) { VAR_14 -> VAR_15 . VAR_16 . VAR_17 = METHOD_1 ( VAR_18 ) ; for ( VAR_19 = 0 ; VAR_20 < VAR_21 -> VAR_22 . VAR_23 . VAR_24 ; VAR_25 ++ ) VAR_26 -> VAR_27 . VAR_28 . VAR_29 [ VAR_30 ] = 0 ; } VAR_31 -> VAR_32 . VAR_33 . VAR_34 = VAR_35 -> VAR_36 . VAR_37 . VAR_38 ; VAR_39 = METHOD_2 ( VAR_40 , VAR_41 -> VAR_42 , VAR_43 -> VAR_44 , 0 , & ( VAR_45 -> VAR_46 ) , & ( VAR_47 -> VAR_48 ) , VAR_49 -> VAR_50 , & ( VAR_51 -> VAR_52 ) , VAR_53 -> VAR_54 , & ( VAR_55 -> VAR_56 ) , & ( VAR_57 -> VAR_58 ) , 0 ) ; if ( VAR_59 == VAR_60 ) { if ( VAR_61 -> VAR_62 == VAR_63 ) VAR_64 -> VAR_65 . VAR_66 . VAR_67 = 0 ; if ( VAR_68 -> VAR_69 == VAR_70 ) VAR_71 -> VAR_72 . VAR_73 . VAR_74 = 0 ; if ( VAR_75 -> VAR_76 == VAR_77 && VAR_78 -> VAR_79 == VAR_80 ) { VAR_81 -> VAR_82 . VAR_83 . VAR_84 = 0 ; } else { TYPE_8 VAR_85 = METHOD_3 ( ( TYPE_9 * ) & VAR_86 , & ( VAR_87 -> VAR_88 . VAR_89 ) ) ; if ( ! VAR_90 ) { return VAR_91 ; } VAR_92 = METHOD_4 ( ( TYPE_10 * ) & VAR_93 , & ( VAR_94 -> VAR_95 . VAR_96 ) ) ; if ( ! VAR_97 ) { return VAR_98 ; } VAR_99 = METHOD_5 ( VAR_100 -> VAR_101 ) ; if ( VAR_102 . VAR_103 . VAR_104 == 0 ) { VAR_105 -> VAR_106 . VAR_107 . VAR_108 = 0 ; } else {  VAR_109 = METHOD_6 ( VAR_110 , VAR_111 -> VAR_112 , & ( VAR_113 . VAR_114 ) , VAR_115 , & ( VAR_116 -> VAR_117 . VAR_118 ) ,  & ( VAR_119 -> VAR_120 . VAR_121 ) , VAR_122 * 8 , ( TYPE_11 * ) & ( VAR_123 -> VAR_124 ) ) ; } if ( VAR_125 != VAR_126 ) { return ( VAR_127 ) ; } } VAR_128 -> VAR_129 . VAR_130 . VAR_131 = 0 ; VAR_132 -> VAR_133 . VAR_134 . VAR_135 = 0 ; VAR_136 -> VAR_137 = 0 ; } return VAR_138 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 , 0 ) ; if ( METHOD_2 ( VAR_7 ) ) { VAR_8 = - VAR_9 ; goto VAR_10 ; } STRUCT_OR_UNION_2 = METHOD_3 ( VAR_11 ) ;  VAR_12 = METHOD_4 ( VAR_13 , VAR_14 ) ;  if ( VAR_15 == 0 ) goto VAR_16 ; if ( VAR_17 != - VAR_18 ) goto VAR_19 ; if ( ! METHOD_5 ( VAR_20 ) ) { VAR_21 = - VAR_22 ; goto VAR_23 ; } VAR_24 : VAR_25 = - VAR_26 ; if ( STRUCT_OR_UNION_3 -> VAR_27 -> METHOD_6 ) { METHOD_7 ( & STRUCT_OR_UNION_4 -> VAR_28 ) ; VAR_29 = METHOD_8 ( STRUCT_OR_UNION_5 ) ; if ( VAR_30 == 0 ) VAR_31 = STRUCT_OR_UNION_6 -> VAR_32 -> METHOD_9 ( STRUCT_OR_UNION_7 , VAR_33 , VAR_34 ) ; METHOD_10 ( & STRUCT_OR_UNION_8 -> VAR_35 ) ; } VAR_36 : METHOD_11 ( STRUCT_OR_UNION_9 ) ; VAR_37 : return VAR_38 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) ( VAR_4 -> VAR_5 ) ; TYPE_6 VAR_6 = 0 ; TYPE_7 * VAR_7 = VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 , VAR_11 = 0 ; TYPE_10 VAR_12 = 0 ; TYPE_11 VAR_13 = 0 ; TYPE_12 VAR_14 ; TYPE_13 VAR_15 = 0 ; TYPE_14 VAR_16 = 0 , VAR_17 = VAR_18 ; TYPE_15 VAR_19 = 0 , VAR_20 = 0 ; TYPE_16 * VAR_21 ; TYPE_17 * VAR_22 ; TYPE_18 * VAR_23 ; METHOD_1 ( ( TYPE_19 * ) "Parse_thread" ) ; VAR_24 = ( TYPE_20 * ) VAR_25 ; VAR_26 = ( TYPE_21 * ) VAR_27 ; { TYPE_22 VAR_28 ; VAR_29 = VAR_30 -> VAR_31 ; METHOD_2 ( VAR_32 , 0 , sizeof ( TYPE_23 ) ) ; VAR_33 -> VAR_34 = VAR_35 ; } VAR_36 -> VAR_37 = VAR_38 ; if ( VAR_39 -> VAR_40 != 1 ) { return VAR_41 ; } METHOD_3 ( ) ; if ( 0 == VAR_42 -> VAR_43 ) { if ( VAR_44 -> VAR_45 == VAR_46 ) { VAR_47 -> VAR_48 |= 1 << VAR_49 ; VAR_50 -> VAR_51 |= VAR_52 ; return VAR_53 ; } if ( VAR_54 -> VAR_55 <= 0 ) { VAR_56 -> VAR_57 |= 1 << VAR_58 ; VAR_59 -> VAR_60 |= VAR_61 ; return VAR_62 ; } } VAR_63 -> VAR_64 = 0 ; VAR_65 -> VAR_66 = 0 ; VAR_67 -> VAR_68 = VAR_69 ; if ( VAR_70 -> VAR_71 >= METHOD_4 ( TYPE_24 , VAR_72 ) ) VAR_73 -> VAR_74 = & VAR_75 -> VAR_76 ; VAR_77 -> VAR_78 = 0 ; VAR_79 -> VAR_80 = 0 ; VAR_81 -> VAR_82 . VAR_83 = 1 ; VAR_84 -> VAR_85 = VAR_86 ; if ( 0 == VAR_87 -> VAR_88 && VAR_89 -> VAR_90 == 0 ) { TYPE_25 VAR_91 ; if ( VAR_92 -> VAR_93 -> VAR_94 == 0 ) { VAR_95 -> VAR_96 |= 1 << VAR_97 ; VAR_98 -> VAR_99 |= VAR_100 ; return VAR_101 ; } for ( VAR_102 = 0 ; VAR_103 < VAR_104 -> VAR_105 -> VAR_106 ; VAR_107 ++ ) { if ( VAR_108 -> VAR_109 -> VAR_110 [ VAR_111 ] == VAR_112 ) { VAR_113 -> VAR_114 |= 1 << VAR_115 ; VAR_116 -> VAR_117 |= VAR_118 ; return VAR_119 ; } if ( VAR_120 -> VAR_121 -> VAR_122 [ VAR_123 ] == 0 ) { VAR_124 -> VAR_125 |= 1 << VAR_126 ; VAR_127 -> VAR_128 |= VAR_129 ; return VAR_130 ; } } } if ( VAR_131 -> VAR_132 >= VAR_133 ) { VAR_134 -> VAR_135 = VAR_136 ; return VAR_137 ; } VAR_138 -> VAR_139 = VAR_140 -> VAR_141 ; VAR_142 -> VAR_143 = 0 ; VAR_144 -> VAR_145 = - 1 ; VAR_146 -> VAR_147 = 0 ; VAR_148 -> VAR_149 = 0 ; VAR_150 -> VAR_151 = - 1 ; VAR_152 -> VAR_153 = - 1 ; { if ( ( VAR_154 | VAR_155 ) == VAR_156 -> VAR_157 ) { VAR_158 -> VAR_159 = 0 ; } } VAR_160 -> VAR_161 = 0 ; if ( VAR_162 -> VAR_163 == 1 && VAR_164 -> VAR_165 == 1 && VAR_166 -> VAR_167 == 0 ) { TYPE_26 VAR_168 ; TYPE_27 VAR_169 = 0 , VAR_170 ; for ( VAR_171 = 0 ; VAR_172 < VAR_173 -> VAR_174 ; VAR_175 ++ ) { if ( 0 == VAR_176 -> VAR_177 [ VAR_178 ] || 1 == VAR_179 -> VAR_180 [ VAR_181 ] ) { VAR_182 = 1 ; break ; } } if ( 0 == VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 |= ( 1 << VAR_189 ) ; return ( VAR_190 ) ; } while ( 1 ) { TYPE_28 * VAR_191 ; VAR_192 = ( TYPE_29 * ) METHOD_5 ( ( TYPE_30 * ) VAR_193 -> VAR_194 , & VAR_195 ) ; if ( VAR_196 == VAR_197 ) { TYPE_31 VAR_198 , VAR_199 = 0 ; for ( VAR_200 = 0 ; VAR_201 < ( VAR_202 ) ; VAR_203 ++ ) { if ( 0 != VAR_204 -> VAR_205 [ VAR_206 ] ) { VAR_207 = 1 ; break ; } } if ( 1 == VAR_208 ) { VAR_209 -> VAR_210 = VAR_211 ; VAR_212 -> VAR_213 |= ( 1 << VAR_214 ) ; return ( VAR_215 ) ; } } else { if ( 1 == VAR_216 -> VAR_217 [ VAR_218 ] ) { METHOD_6 ( ( TYPE_32 * ) VAR_219 -> VAR_220 , VAR_221 , VAR_222 ) ; } else { METHOD_7 ( ( TYPE_33 * ) VAR_223 -> VAR_224 , VAR_225 , VAR_226 ) ; break ; } } } } if ( VAR_227 -> VAR_228 && VAR_229 -> VAR_230 ) { METHOD_8 ( VAR_231 , VAR_232 -> VAR_233 , & ( VAR_234 -> VAR_235 ) ) ; if ( 0 == VAR_236 -> VAR_237 . VAR_238 ) { VAR_239 -> VAR_240 = 0 ; VAR_241 -> VAR_242 = VAR_243 -> VAR_244 . VAR_245 ; METHOD_9 ( VAR_246 , & ( VAR_247 -> VAR_248 ) , VAR_249 -> VAR_250 , VAR_251 -> VAR_252 ) ; VAR_253 -> VAR_254 += VAR_255 -> VAR_256 ; VAR_257 -> VAR_258 = 1 ; } METHOD_10 ( VAR_259 , & ( VAR_260 -> VAR_261 ) ) ; VAR_262 -> VAR_263 = ( TYPE_34 ) VAR_264 -> VAR_265 ; VAR_266 -> VAR_267 = ( TYPE_35 ) VAR_268 -> VAR_269 ; VAR_270 -> VAR_271 = 0 ; VAR_272 -> VAR_273 = VAR_274 -> VAR_275 ; VAR_276 -> VAR_277 = VAR_278 -> VAR_279 . VAR_280 ; VAR_281 -> VAR_282 = VAR_283 -> VAR_284 . VAR_285 ; VAR_286 -> VAR_287 = VAR_288 -> VAR_289 . VAR_290 ; VAR_291 -> VAR_292 = VAR_293 -> VAR_294 . VAR_295 ; VAR_296 -> VAR_297 = VAR_298 -> VAR_299 . VAR_300 ; VAR_301 -> VAR_302 = VAR_303 -> VAR_304 . VAR_305 ; VAR_306 -> VAR_307 = - 1 ; VAR_308 -> VAR_309 = VAR_310 ; VAR_311 -> VAR_312 = 0 ; if ( 0 == VAR_313 -> VAR_314 . VAR_315 ) { return ( VAR_316 ) ; } else return ( VAR_317 ) ; } if ( VAR_318 -> VAR_319 == 1 ) { METHOD_11 ( VAR_320 ) ; } VAR_321 -> VAR_322 = 0 ; VAR_323 -> VAR_324 = 0 ; VAR_325 -> VAR_326 = 0 ; VAR_327 -> VAR_328 = 0 ; VAR_329 -> VAR_330 = 0 ; VAR_331 -> VAR_332 = 0 ; VAR_333 -> VAR_334 = 2 ; VAR_335 -> VAR_336 = 0 ; VAR_337 -> VAR_338 = 0 ; VAR_339 -> VAR_340 = 0 ; VAR_341 -> VAR_342 = 0 ; VAR_343 -> VAR_344 = 0 ; VAR_345 -> VAR_346 = 0 ; METHOD_12 ( "Startingprocesscall\\n" ) ; VAR_347 -> VAR_348 = 0 ; do { TYPE_36 VAR_349 ; VAR_350 = ( TYPE_37 * ) VAR_351 -> VAR_352 + VAR_353 -> VAR_354 ; VAR_355 = VAR_356 -> VAR_357 - VAR_358 -> VAR_359 ; if ( ( VAR_360 == VAR_361 -> VAR_362 ) && ( VAR_363 -> VAR_364 & 1 ) ) { TYPE_38 VAR_365 ; TYPE_39 * VAR_366 ; TYPE_40 * VAR_367 = VAR_368 -> VAR_369 ; VAR_370 = METHOD_13 ( 256000 , VAR_371 -> VAR_372 * VAR_373 -> VAR_374 * 3 / 2 ) ; VAR_375 = VAR_376 -> METHOD_14 ( VAR_377 , 128 , VAR_378 ) ; METHOD_15 ( ( VAR_379 == VAR_380 ) , VAR_381 ) ; VAR_382 -> VAR_383 = VAR_384 ; VAR_385 -> VAR_386 = VAR_387 ; } if ( VAR_388 -> VAR_389 ) { VAR_390 = VAR_391 -> VAR_392 ; VAR_393 = VAR_394 -> VAR_395 ; } else { VAR_396 = VAR_397 -> VAR_398 ; VAR_399 = VAR_400 -> VAR_401 ; } VAR_402 = 0 ; VAR_403 = METHOD_16 ( VAR_404 , 0 , VAR_405 , & VAR_406 , & VAR_407 ) ; if ( VAR_408 == - 1 ) VAR_409 = 0 ; VAR_410 = METHOD_17 ( VAR_411 , VAR_412 ) ; VAR_413 = VAR_414 + VAR_415 ; VAR_416 -> VAR_417 += VAR_418 ; { TYPE_41 VAR_419 , VAR_420 ; if ( VAR_421 -> VAR_422 == VAR_423 ) { VAR_424 = * ( VAR_425 + VAR_426 ) ; VAR_427 = ( TYPE_42 ) ( METHOD_18 ( VAR_428 ) ) ; if ( VAR_429 == 0 ) { VAR_430 = 1 ; continue ; } else { if ( 1 == VAR_431 ) { VAR_432 -> VAR_433 -= VAR_434 ; VAR_435 -> VAR_436 = VAR_437 ; VAR_438 -> VAR_439 = VAR_440 ; VAR_441 -> VAR_442 |= ( 1 << VAR_443 ) ; VAR_444 -> VAR_445 = 0 ; VAR_446 -> VAR_447 = sizeof ( TYPE_43 ) ; METHOD_19 ( VAR_448 ) ; if ( VAR_449 -> VAR_450 == 3 ) { METHOD_20 ( VAR_451 ) ; } return ( VAR_452 ) ; } } } } if ( VAR_453 ) { METHOD_21 ( VAR_454 , VAR_455 + VAR_456 , VAR_457 ) ; if ( ( VAR_458 + 8 ) < VAR_459 ) { METHOD_22 ( VAR_460 + VAR_461 , 0 , 8 ) ; } VAR_462 = 1 ; } else { if ( VAR_463 == 0 ) { VAR_464 -> VAR_465 = VAR_466 ; VAR_467 -> VAR_468 |= 1 << VAR_469 ; if ( VAR_470 -> VAR_471 == 0 ) { METHOD_23 ( VAR_472 , VAR_473 ) ; VAR_474 -> VAR_475 = VAR_476 -> VAR_477 ; VAR_478 -> VAR_479 = 0 ; return ( VAR_480 ) ; } else { VAR_481 -> VAR_482 = 1 ; continue ; } } else { VAR_483 = 0 ; continue ; } } VAR_484 -> VAR_485 = 0 ; VAR_486 = METHOD_24 ( VAR_487 , VAR_488 , VAR_489 , VAR_490 ) ; if ( VAR_491 != VAR_492 ) { TYPE_44 VAR_493 = METHOD_25 ( VAR_494 ) ; VAR_495 -> VAR_496 = VAR_497 | VAR_498 ; VAR_499 = VAR_500 ; if ( ( VAR_501 == VAR_502 ) || ( VAR_503 == VAR_504 ) || ( VAR_505 == VAR_506 )  || ( VAR_507 == VAR_508 ) )  { break ; } if ( ( VAR_509 == VAR_510 ) || ( VAR_511 == VAR_512 ) ) { VAR_513 -> VAR_514 -= VAR_515 ; VAR_516 = VAR_517 ; break ; } if ( VAR_518 == VAR_519 ) { VAR_520 = VAR_521 ; break ; } } if ( VAR_522 -> VAR_523 ) { VAR_524 -> VAR_525 -= VAR_526 ; VAR_527 -> VAR_528 = VAR_529 ; VAR_530 -> VAR_531 |= ( 1 << VAR_532 ) ; VAR_533 -> VAR_534 = 0 ; VAR_535 -> VAR_536 = sizeof ( TYPE_45 ) ; METHOD_26 ( VAR_537 ) ; if ( VAR_538 -> VAR_539 == 3 ) { METHOD_27 ( VAR_540 ) ; } return ( VAR_541 ) ; } VAR_542 = ( ( VAR_543 -> VAR_544 == 1 ) && ( VAR_545 -> VAR_546 != 3 ) && ( VAR_547 -> VAR_548 < VAR_549 -> VAR_550 ) ) ; VAR_551 = ( ( ( VAR_552 -> VAR_553 == 0 ) && ( ( VAR_554 -> VAR_555 == 0 ) || ( VAR_556 == 1 ) ) ) && ( VAR_557 -> VAR_558 < VAR_559 -> VAR_560 ) ) ; } while ( ( VAR_561 == 1 ) || ( VAR_562 == 1 ) ) ; if ( ( VAR_563 -> VAR_564 == 1 ) && ( VAR_565 != VAR_566 ) && VAR_567 -> VAR_568 < VAR_569 -> VAR_570 * VAR_571 -> VAR_572 ) { TYPE_46 VAR_573 ; TYPE_47 VAR_574 ; TYPE_48 VAR_575 ; TYPE_49 VAR_576 ; VAR_577 = ( VAR_578 -> VAR_579 * VAR_580 -> VAR_581 ) - VAR_582 -> VAR_583 ; if ( VAR_584 -> VAR_585 && ( VAR_586 -> VAR_587 == 0 ) ) VAR_588 = 1 ; else VAR_589 = 2 ; VAR_590 = METHOD_28 ( VAR_591 , VAR_592 , VAR_593 -> VAR_594 == VAR_595 , VAR_596 -> VAR_597 -> VAR_598 , & VAR_599 , VAR_600 ) ; if ( ( VAR_601 == VAR_602 ) || ( VAR_603 == VAR_604 ) ) { return VAR_605 ; } } if ( ( VAR_606 == VAR_607 ) || ( VAR_608 == VAR_609 ) || ( VAR_610 == VAR_611 )  || ( VAR_612 == VAR_613 ) )  { METHOD_29 ( VAR_614 ) ; if ( VAR_615 -> VAR_616 == 3 ) { METHOD_30 ( VAR_617 ) ; } if ( VAR_618 == VAR_619 ) { VAR_620 -> VAR_621 -= VAR_622 ; } return VAR_623 ; } if ( VAR_624 -> VAR_625 ) { if ( VAR_626 -> VAR_627 == 2 ) { if ( ( VAR_628 -> VAR_629 == 0 ) && ( VAR_630 -> VAR_631 == 1 ) && ( VAR_632 -> VAR_633 -> VAR_634 == 0 ) ) { TYPE_50 VAR_635 , VAR_636 ; TYPE_51 VAR_637 ; TYPE_52 * VAR_638 = & VAR_639 ; TYPE_53 * VAR_640 = & VAR_641 -> VAR_642 ; VAR_643 = ( VAR_644 -> VAR_645 * VAR_646 -> VAR_647 ) - 1 ; VAR_648 -> VAR_649 = VAR_650 + 1 ; METHOD_31 ( VAR_651 , VAR_652 , VAR_653 , VAR_654 -> VAR_655 , 0 ) ; VAR_656 = VAR_657 - VAR_658 -> VAR_659 + 1 ; METHOD_32 ( "mbsleftfordeblocking=%d\\n" , VAR_660 ) ; if ( VAR_661 != 0 ) METHOD_33 ( VAR_662 , VAR_663 , VAR_664 , 1 ) ; VAR_665 -> VAR_666 = 0 ; } } METHOD_34 ( VAR_667 ) ; if ( VAR_668 -> VAR_669 == 3 ) { METHOD_35 ( VAR_670 ) ; } } METHOD_36 ( ) ; if ( ( VAR_671 -> VAR_672 & 0xff ) != VAR_673 ) { VAR_674 -> VAR_675 = ( TYPE_54 ) VAR_676 -> VAR_677 ; VAR_678 -> VAR_679 = ( TYPE_55 ) VAR_680 -> VAR_681 ; } if ( VAR_682 -> VAR_683 != 3 ) { VAR_684 -> VAR_685 |= ( 1 << VAR_686 ) ; } if ( VAR_687 -> VAR_688 == 1 && VAR_689 -> VAR_690 != 3 ) { VAR_691 -> VAR_692 |= ( 1 << VAR_693 ) ; } if ( VAR_694 -> VAR_695 ) { VAR_696 -> VAR_697 = VAR_698 ; VAR_699 -> VAR_700 |= ( 1 << VAR_701 ) ; VAR_702 -> VAR_703 = 0 ; VAR_704 -> VAR_705 = sizeof ( TYPE_56 ) ; if ( VAR_706 -> VAR_707 == 3 ) { METHOD_37 ( VAR_708 ) ; } return ( VAR_709 ) ; } if ( ( VAR_710 -> VAR_711 == 1 ) && ( VAR_712 != VAR_713 ) ) { if ( VAR_714 -> VAR_715 -> VAR_716 ) { if ( 1 == VAR_717 -> VAR_718 -> VAR_719 ) { VAR_720 -> VAR_721 |= VAR_722 ; } else { VAR_723 -> VAR_724 |= VAR_725 ; } } if ( ( VAR_726 -> VAR_727 -> VAR_728 & VAR_729 ) == 0 ) { VAR_730 = METHOD_38 ( VAR_731 ) ; if ( VAR_732 != 0 ) { return VAR_733 ; } } if ( VAR_734 -> VAR_735 == 3 ) { VAR_736 -> VAR_737 = VAR_738 -> VAR_739 -> VAR_740 + 1 ; } if ( VAR_741 -> VAR_742 -> VAR_743 == VAR_744 ) { VAR_745 -> VAR_746 = VAR_747 ; } else if ( VAR_748 -> VAR_749 == VAR_750 ) { VAR_751 -> VAR_752 = VAR_753 ; } else if ( VAR_754 -> VAR_755 == VAR_756 ) { VAR_757 -> VAR_758 = VAR_759 ; } else if ( VAR_760 -> VAR_761 == VAR_762 ) { VAR_763 -> VAR_764 = VAR_765 ; } else { METHOD_39 ( "Shouldn\'tcomehere\\n" ) ; } VAR_766 -> VAR_767 = VAR_768 -> VAR_769 -> VAR_770 ; VAR_771 -> VAR_772 = VAR_773 -> VAR_774 + 2 ; VAR_775 -> VAR_776 = VAR_777 -> VAR_778 - VAR_779 -> VAR_780 -> VAR_781 ; } if ( VAR_782 -> VAR_783 == 3 ) { METHOD_40 ( VAR_784 ) ; } { if ( ( VAR_785 == VAR_786 -> VAR_787 ) && VAR_788 -> VAR_789 ) { METHOD_41 ( VAR_790 , VAR_791 -> VAR_792 , & ( VAR_793 -> VAR_794 ) ) ; if ( 0 == VAR_795 -> VAR_796 . VAR_797 ) { VAR_798 -> VAR_799 = 0 ; VAR_800 -> VAR_801 = 1 ; } } METHOD_42 ( VAR_802 , VAR_803 ) ; if ( VAR_804 -> VAR_805 && ( VAR_806 -> VAR_807 < VAR_808 -> VAR_809 . VAR_810 ) ) { VAR_811 -> VAR_812 = VAR_813 -> VAR_814 . VAR_815 - VAR_816 -> VAR_817 ; METHOD_43 ( VAR_818 , & ( VAR_819 -> VAR_820 ) , VAR_821 -> VAR_822 , VAR_823 -> VAR_824 ) ; VAR_825 -> VAR_826 += VAR_827 -> VAR_828 ; } METHOD_44 ( VAR_829 , & ( VAR_830 -> VAR_831 ) ) ; } if ( VAR_832 -> VAR_833 == 1 && ( VAR_834 -> VAR_835 & 1 ) == 1 ) { VAR_836 -> VAR_837 = 1 ; if ( ( VAR_838 != VAR_839 -> VAR_840 ) && ( 1 == ( VAR_841 -> VAR_842 -> VAR_843 ) ) ) { if ( ( 0 == VAR_844 -> VAR_845 -> VAR_846 ) && ( 0 == VAR_847 -> VAR_848 -> VAR_849 ) ) VAR_850 -> VAR_851 = 0 ; } } METHOD_45 ( ) ; METHOD_46 ( "Thenumbytesconsumed:%d\\n" , VAR_852 -> VAR_853 ) ; return VAR_854 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ; TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ; VAR_19 = VAR_20 . VAR_21 ; VAR_22 = VAR_23 . VAR_24 ; VAR_25 = VAR_26 . VAR_27 ; VAR_28 = VAR_29 . VAR_30 ; VAR_31 = METHOD_4 ( VAR_32 . VAR_33 ) ;  VAR_34 = METHOD_5 ( VAR_35 -> VAR_36 ) ;  switch ( VAR_37 ) { case VAR_38 : if ( METHOD_6 ( VAR_39 -> VAR_40 , VAR_41 ) || METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ) { VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = VAR_50 ; } else { VAR_51 -> VAR_52 += VAR_53 ; VAR_54 -> VAR_55 += VAR_56 ; } if ( VAR_57 -> VAR_58 + VAR_59 < VAR_60 || VAR_61 -> VAR_62 + VAR_63 < VAR_64 ) { VAR_65 -> VAR_66 = 0 ; VAR_67 -> VAR_68 = VAR_69 ; } else { VAR_70 -> VAR_71 += VAR_72 ; VAR_73 -> VAR_74 += VAR_75 ; } VAR_76 -> VAR_77 = METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 . VAR_81 ) ; break ; case VAR_82 : if ( METHOD_9 ( VAR_83 -> VAR_84 , VAR_85 ) || METHOD_10 ( VAR_86 -> VAR_87 , VAR_88 ) ) { VAR_89 -> VAR_90 = VAR_91 ; VAR_92 -> VAR_93 = VAR_94 ; } else { VAR_95 -> VAR_96 -= VAR_97 ; VAR_98 -> VAR_99 -= VAR_100 ; } if ( VAR_101 -> VAR_102 < VAR_103 ) { VAR_104 -> VAR_105 = 0 ; VAR_106 -> VAR_107 = VAR_108 ; } else { VAR_109 -> VAR_110 -= VAR_111 ; VAR_112 -> VAR_113 -= VAR_114 ; } VAR_115 -> VAR_116 = METHOD_11 ( VAR_117 -> VAR_118 , VAR_119 . VAR_120 ) ; break ; case VAR_121 : VAR_122 -> VAR_123 = METHOD_12 ( VAR_124 -> VAR_125 , VAR_126 . VAR_127 ) ; if ( VAR_128 < 0 || VAR_129 -> VAR_130 < 0 ) { METHOD_13 ( VAR_131 ) ; METHOD_14 ( VAR_132 ) ; break ; } if ( VAR_133 > VAR_134 || VAR_135 -> VAR_136 > VAR_137 ) { METHOD_15 ( VAR_138 ) ; METHOD_16 ( VAR_139 ) ; break ; } VAR_140 -> VAR_141 *= VAR_142 ; VAR_143 -> VAR_144 *= VAR_145 ; if ( VAR_146 -> VAR_147 > VAR_148 ) { VAR_149 -> VAR_150 = VAR_151 ; VAR_152 -> VAR_153 = VAR_154 ; } else { VAR_155 -> VAR_156 = VAR_157 -> VAR_158 ; VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; } break ; case VAR_163 : if ( VAR_164 && VAR_165 ) { METHOD_17 ( VAR_166 , VAR_167 -> VAR_168 . VAR_169 & VAR_170 . VAR_171 . VAR_172 ) ; break ; } VAR_173 -> VAR_174 = METHOD_18 ( VAR_175 -> VAR_176 , VAR_177 . VAR_178 ) ; VAR_179 -> VAR_180 = VAR_181 -> VAR_182 . VAR_183 ; VAR_184 -> VAR_185 = METHOD_19 ( VAR_186 -> VAR_187 , VAR_188 ) ; if ( VAR_189 -> VAR_190 < 0 || VAR_191 < 0 ) { VAR_192 -> VAR_193 = VAR_194 ; VAR_195 -> VAR_196 = VAR_197 ; } else { VAR_198 -> VAR_199 = VAR_200 -> VAR_201 ; VAR_202 -> VAR_203 = VAR_204 -> VAR_205 ; } METHOD_20 ( VAR_206 ) ; break ; case VAR_207 : if ( VAR_208 && VAR_209 ) { METHOD_21 ( VAR_210 , VAR_211 -> VAR_212 . VAR_213 | VAR_214 . VAR_215 . VAR_216 ) ; break ; } VAR_217 -> VAR_218 = METHOD_22 ( VAR_219 -> VAR_220 , VAR_221 . VAR_222 ) ; VAR_223 -> VAR_224 = METHOD_23 ( VAR_225 -> VAR_226 , VAR_227 ) ; VAR_228 -> VAR_229 = VAR_230 -> VAR_231 . VAR_232 | VAR_233 -> VAR_234 . VAR_235 ; if ( VAR_236 -> VAR_237 < 0 || VAR_238 < 0 ) { VAR_239 -> VAR_240 = VAR_241 ; VAR_242 -> VAR_243 = VAR_244 ; } else { VAR_245 -> VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = VAR_251 -> VAR_252 ; } METHOD_24 ( VAR_253 ) ; break ; case VAR_254 : if ( VAR_255 >= VAR_256 ) { METHOD_25 ( VAR_257 , VAR_258 , VAR_259 -> VAR_260 ) ; break ; } VAR_261 -> VAR_262 = VAR_263 ; VAR_264 -> VAR_265 = VAR_266 ; if ( VAR_267 -> VAR_268 > 1ULL << ( 63 - VAR_269 ) ) { VAR_270 -> VAR_271 = 0 ; VAR_272 -> VAR_273 = VAR_274 ; } else { VAR_275 -> VAR_276 <<= VAR_277 ; VAR_278 -> VAR_279 <<= VAR_280 ; } if ( VAR_281 ) VAR_282 -> VAR_283 = METHOD_26 ( VAR_284 -> VAR_285 , VAR_286 ) ; else VAR_287 -> VAR_288 = METHOD_27 ( VAR_289 , VAR_290 ) ; METHOD_28 ( VAR_291 ) ; break ; case VAR_292 : if ( VAR_293 >= VAR_294 ) { METHOD_29 ( VAR_295 , VAR_296 , VAR_297 -> VAR_298 ) ; break ; } VAR_299 -> VAR_300 = VAR_301 ; VAR_302 -> VAR_303 = VAR_304 ; if ( VAR_305 ) VAR_306 -> VAR_307 = METHOD_30 ( VAR_308 -> VAR_309 , VAR_310 ) ; else VAR_311 -> VAR_312 = METHOD_31 ( VAR_313 , VAR_314 ) ; VAR_315 -> VAR_316 >>= VAR_317 ; VAR_318 -> VAR_319 >>= VAR_320 ; METHOD_32 ( VAR_321 ) ; break ; default : METHOD_33 ( VAR_322 , VAR_323 , VAR_324 -> VAR_325 ) ; break ; } if ( METHOD_34 ( VAR_326 -> VAR_327 ) != VAR_328 ) { METHOD_35 ( VAR_329 , 4 ) ; METHOD_36 ( & VAR_330 , 4 ) ; } METHOD_37 ( VAR_331 ) ; METHOD_38 ( VAR_332 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 = VAR_4 ; unsigned TYPE_4 VAR_5 ; if ( VAR_6 == VAR_7 ) { struct STRUCT_OR_UNION_1 TYPE_5 ; VAR_8 = offsetofend ( struct STRUCT_OR_UNION_2 , VAR_9 ) ; if ( METHOD_1 ( & TYPE_6 , ( TYPE_7 TYPE_8 * ) VAR_10 , VAR_11 ) ) return - VAR_12 ; if ( TYPE_9 . VAR_13 < VAR_14 ) return - VAR_15 ; TYPE_10 . VAR_16 = VAR_17 ; if ( VAR_18 -> VAR_19 ) TYPE_11 . VAR_20 |= VAR_21 ; TYPE_12 . VAR_22 = VAR_23 + VAR_24 -> VAR_25 ; TYPE_13 . VAR_26 = VAR_27 ; return METHOD_2 ( ( TYPE_14 TYPE_15 * ) VAR_28 , & TYPE_16 , VAR_29 ) ? - VAR_30 : 0 ; } else if ( VAR_31 == VAR_32 ) { struct STRUCT_OR_UNION_3 * VAR_33 = VAR_34 -> VAR_35 ; struct STRUCT_OR_UNION_4 TYPE_17 ; struct STRUCT_OR_UNION_5 VAR_36 = { . VAR_37 = VAR_38 , . VAR_39 = 0 } ; TYPE_18 VAR_40 , VAR_41 ; VAR_42 = offsetofend ( struct STRUCT_OR_UNION_6 , VAR_43 ) ; if ( METHOD_3 ( & TYPE_19 , ( TYPE_20 TYPE_21 * ) VAR_44 , VAR_45 ) ) return - VAR_46 ; if ( TYPE_22 . VAR_47 < VAR_48 ) return - VAR_49 ; switch ( TYPE_23 . VAR_50 ) { case VAR_51 : TYPE_24 . VAR_52 = METHOD_4 ( TYPE_25 . VAR_53 ) ; TYPE_26 . VAR_54 = VAR_55 -> VAR_56 ; TYPE_27 . VAR_57 = VAR_58 | VAR_59 ; break ; case VAR_60 ... VAR_61 : TYPE_28 . VAR_62 = METHOD_5 ( TYPE_29 . VAR_63 ) ; TYPE_30 . VAR_64 = METHOD_6 ( VAR_65 , TYPE_31 . VAR_66 ) ; if ( ! TYPE_32 . VAR_67 ) { TYPE_33 . VAR_68 = 0 ; break ; } TYPE_34 . VAR_69 = VAR_70 | VAR_71 ; if ( VAR_72 -> VAR_73 [ TYPE_35 . VAR_74 ] ) { TYPE_36 . VAR_75 |= VAR_76 ; if ( TYPE_37 . VAR_77 == VAR_78 -> VAR_79 ) { VAR_80 = METHOD_7 ( VAR_81 , & VAR_82 ) ; if ( VAR_83 ) return VAR_84 ; } } break ; case VAR_85 : { TYPE_38 TYPE_39 * VAR_86 ; TYPE_40 VAR_87 ; TYPE_41 . VAR_88 = METHOD_8 ( TYPE_42 . VAR_89 ) ; TYPE_43 . VAR_90 = 0 ; TYPE_44 . VAR_91 = METHOD_9 ( VAR_92 , TYPE_45 . VAR_93 ) ; if ( ! TYPE_46 . VAR_94 ) { if ( VAR_95 -> VAR_96 [ VAR_97 ] . VAR_98 & VAR_99 ) TYPE_47 . VAR_100 = 0x20000 ; else break ; } VAR_101 = METHOD_10 ( VAR_102 , & VAR_103 ) ; if ( ! VAR_104 || ! VAR_105 ) { TYPE_48 . VAR_106 = 0 ; break ; } METHOD_11 ( VAR_107 , VAR_108 ) ; TYPE_49 . VAR_109 = VAR_110 ; break ; } case VAR_111 : if ( ! VAR_112 -> VAR_113 ) return - VAR_114 ; TYPE_50 . VAR_115 = METHOD_12 ( TYPE_51 . VAR_116 ) ; TYPE_52 . VAR_117 = 0xc0000 ; TYPE_53 . VAR_118 = VAR_119 | VAR_120 ; break ; default : if ( TYPE_54 . VAR_121 >= VAR_122 + VAR_123 -> VAR_124 ) return - VAR_125 ; VAR_126 = TYPE_55 . VAR_127 - VAR_128 ; TYPE_56 . VAR_129 = METHOD_13 ( TYPE_57 . VAR_130 ) ; TYPE_58 . VAR_131 = VAR_132 -> VAR_133 [ VAR_134 ] . VAR_135 ; TYPE_59 . VAR_136 = VAR_137 -> VAR_138 [ VAR_139 ] . VAR_140 ; VAR_141 = METHOD_14 ( VAR_142 , & VAR_143 , VAR_144 -> VAR_145 [ VAR_146 ] . VAR_147 , VAR_148 -> VAR_149 [ VAR_150 ] . VAR_151 ) ; if ( VAR_152 ) return VAR_153 ; } if ( VAR_154 . VAR_155 ) { TYPE_60 . VAR_156 |= VAR_157 ; if ( TYPE_61 . VAR_158 < sizeof ( TYPE_62 ) + VAR_159 . VAR_160 ) { TYPE_63 . VAR_161 = sizeof ( TYPE_64 ) + VAR_162 . VAR_163 ; TYPE_65 . VAR_164 = 0 ; } else { METHOD_15 ( & VAR_165 , sizeof ( TYPE_66 ) ) ; if ( METHOD_16 ( ( TYPE_67 TYPE_68 * ) VAR_166 + sizeof ( TYPE_69 ) , VAR_167 . VAR_168 , VAR_169 . VAR_170 ) ) { METHOD_17 ( VAR_171 . VAR_172 ) ; return - VAR_173 ; } TYPE_70 . VAR_174 = sizeof ( TYPE_71 ) ; } METHOD_18 ( VAR_175 . VAR_176 ) ; } return METHOD_19 ( ( TYPE_72 TYPE_73 * ) VAR_177 , & TYPE_74 , VAR_178 ) ? - VAR_179 : 0 ; } else if ( VAR_180 == VAR_181 ) { struct STRUCT_OR_UNION_7 TYPE_75 ; VAR_182 = offsetofend ( struct STRUCT_OR_UNION_8 , VAR_183 ) ; if ( METHOD_20 ( & TYPE_76 , ( TYPE_77 TYPE_78 * ) VAR_184 , VAR_185 ) ) return - VAR_186 ; if ( TYPE_79 . VAR_187 < VAR_188 || TYPE_80 . VAR_189 >= VAR_190 ) return - VAR_191 ; switch ( TYPE_81 . VAR_192 ) { case VAR_193 ... VAR_194 : case VAR_195 : break ; case VAR_196 : if ( METHOD_21 ( VAR_197 -> VAR_198 ) ) break ; default : return - VAR_199 ; } TYPE_82 . VAR_200 = VAR_201 ; TYPE_83 . VAR_202 = METHOD_22 ( VAR_203 , TYPE_84 . VAR_204 ) ; if ( TYPE_85 . VAR_205 == VAR_206 ) TYPE_86 . VAR_207 |= ( VAR_208 | VAR_209 ) ; else TYPE_87 . VAR_210 |= VAR_211 ; return METHOD_23 ( ( TYPE_88 TYPE_89 * ) VAR_212 , & TYPE_90 , VAR_213 ) ? - VAR_214 : 0 ; } else if ( VAR_215 == VAR_216 ) { struct STRUCT_OR_UNION_9 VAR_217 ;  TYPE_91 * VAR_218 = VAR_219 ;   TYPE_92 VAR_220 = 0 ;  VAR_221 = offsetofend ( struct STRUCT_OR_UNION_10 , VAR_222 ) ; if ( METHOD_24 ( & VAR_223 , ( TYPE_93 TYPE_94 * ) VAR_224 , VAR_225 ) ) return - VAR_226 ; if ( VAR_227 . VAR_228 < VAR_229 || VAR_230 . VAR_231 >= VAR_232 ||  VAR_233 . VAR_234 & ~ ( VAR_235 |  VAR_236 ) ) return - VAR_237 ;  if ( ! ( VAR_238 . VAR_239 & VAR_240 ) ) {  TYPE_95 VAR_241 ; TYPE_96 VAR_242 = METHOD_25 ( VAR_243 , VAR_244 . VAR_245 ) ;  if ( VAR_246 . VAR_247 & VAR_248 )  VAR_249 = sizeof ( VAR_250 ) ; else if ( VAR_251 . VAR_252 & VAR_253 ) VAR_254 = sizeof ( VAR_255 ) ; else return - VAR_256 ; if ( VAR_257 . VAR_258 - VAR_259 < VAR_260 . VAR_261 * VAR_262 ||  VAR_263 . VAR_264 >= VAR_265 || VAR_266 . VAR_267 + VAR_268 . VAR_269 > VAR_270 )  return - VAR_271 ; VAR_272 = METHOD_26 ( ( TYPE_97 TYPE_98 * ) ( VAR_273 + VAR_274 ) , VAR_275 . VAR_276 * VAR_277 ) ; if ( METHOD_27 ( VAR_278 ) ) return METHOD_28 ( VAR_279 ) ; } METHOD_29 ( & VAR_280 -> VAR_281 ) ; VAR_282 = METHOD_30 ( VAR_283 , VAR_284 . VAR_285 , VAR_286 . VAR_287 , VAR_288 . VAR_289 , VAR_290 . VAR_291 , VAR_292 ) ; METHOD_31 ( & VAR_293 -> VAR_294 ) ; METHOD_32 ( VAR_295 ) ; return VAR_296 ; } else if ( VAR_297 == VAR_298 ) { return VAR_299 -> VAR_300 ? METHOD_33 ( VAR_301 -> VAR_302 ) : - VAR_303 ; } else if ( VAR_304 == VAR_305 ) { struct STRUCT_OR_UNION_11 VAR_306 ; struct STRUCT_OR_UNION_12 VAR_307 = { 0 } ; struct STRUCT_OR_UNION_13 * VAR_308 = VAR_309 ; TYPE_99 VAR_310 = VAR_311 ; TYPE_100 VAR_312 = 0 ; VAR_313 = offsetofend ( struct STRUCT_OR_UNION_14 , VAR_314 ) ; if ( METHOD_34 ( & VAR_315 , ( TYPE_101 TYPE_102 * ) VAR_316 , VAR_317 ) ) return - VAR_318 ; if ( VAR_319 . VAR_320 < VAR_321 ) return - VAR_322 ; VAR_323 . VAR_324 = 0 ; if ( ! METHOD_35 ( VAR_325 -> VAR_326 -> VAR_327 ) ) VAR_328 = VAR_329 ; else if ( METHOD_36 ( VAR_330 -> VAR_331 -> VAR_332 ) ) return - VAR_333 ; VAR_334 = METHOD_37 ( VAR_335 -> VAR_336 , VAR_337 , & VAR_338 . VAR_339 , VAR_340 ) ; if ( VAR_341 ) return VAR_342 ; METHOD_38 ( ! VAR_343 . VAR_344 ) ; if ( VAR_345 . VAR_346 < sizeof ( VAR_347 ) + ( VAR_348 . VAR_349 * sizeof ( * VAR_350 ) ) ) { VAR_351 = - VAR_352 ; VAR_353 . VAR_354 = VAR_355 . VAR_356 ; goto VAR_357 ; } VAR_358 = METHOD_39 ( VAR_359 . VAR_360 , sizeof ( * VAR_361 ) , VAR_362 ) ; if ( ! VAR_363 ) return - VAR_364 ; VAR_365 . VAR_366 = VAR_367 ; VAR_368 = METHOD_40 ( VAR_369 -> VAR_370 , VAR_371 , & VAR_372 , VAR_373 ) ; if ( ! VAR_374 ) VAR_375 . VAR_376 = VAR_377 . VAR_378 ; VAR_379 : if ( METHOD_41 ( ( TYPE_103 TYPE_104 * ) VAR_380 , & VAR_381 , VAR_382 ) ) VAR_383 = - VAR_384 ; if ( ! VAR_385 ) { if ( METHOD_42 ( ( TYPE_105 TYPE_106 * ) ( VAR_386 + VAR_387 ) , VAR_388 , VAR_389 . VAR_390 * sizeof ( * VAR_391 ) ) ) VAR_392 = - VAR_393 ; } METHOD_43 ( VAR_394 ) ; return VAR_395 ; } else if ( VAR_396 == VAR_397 ) { struct STRUCT_OR_UNION_15 VAR_398 ; VAR_399 * VAR_400 ; struct STRUCT_OR_UNION_16 * VAR_401 ; struct STRUCT_OR_UNION_17 TYPE_107 ; TYPE_108 VAR_402 = VAR_403 ; TYPE_109 VAR_404 , VAR_405 = 0 , VAR_406 = 0 ; VAR_407 = offsetofend ( struct STRUCT_OR_UNION_18 , VAR_408 ) ; if ( METHOD_44 ( & VAR_409 , ( TYPE_110 TYPE_111 * ) VAR_410 , VAR_411 ) ) return - VAR_412 ; if ( VAR_413 . VAR_414 < VAR_415 || VAR_416 . VAR_417 ) return - VAR_418 ; if ( ! METHOD_45 ( VAR_419 -> VAR_420 -> VAR_421 ) ) VAR_422 = VAR_423 ; else if ( METHOD_46 ( VAR_424 -> VAR_425 -> VAR_426 ) ) return - VAR_427 ; VAR_428 = METHOD_47 ( VAR_429 -> VAR_430 , VAR_431 , & VAR_432 , VAR_433 ) ; if ( VAR_434 ) return VAR_435 ; if ( ! VAR_436 . VAR_437 || VAR_438 . VAR_439 > VAR_440 ) return - VAR_441 ; VAR_442 = METHOD_48 ( VAR_443 . VAR_444 , sizeof ( * VAR_445 ) , VAR_446 ) ; VAR_447 = METHOD_49 ( VAR_448 . VAR_449 , sizeof ( * VAR_450 ) , VAR_451 ) ; if ( ! VAR_452 || ! VAR_453 ) { METHOD_50 ( VAR_454 ) ; METHOD_51 ( VAR_455 ) ; return - VAR_456 ; } if ( METHOD_52 ( VAR_457 , ( TYPE_112 TYPE_113 * ) ( VAR_458 + VAR_459 ) , VAR_460 . VAR_461 * sizeof ( * VAR_462 ) ) ) { METHOD_53 ( VAR_463 ) ; METHOD_54 ( VAR_464 ) ; return - VAR_465 ; } for ( VAR_466 = 0 ; VAR_467 < VAR_468 . VAR_469 ; VAR_470 ++ ) { struct STRUCT_OR_UNION_19 * VAR_471 ; struct STRUCT_OR_UNION_20 VAR_472 = METHOD_55 ( VAR_473 [ VAR_474 ] ) ; if ( ! VAR_475 . VAR_476 ) { VAR_477 = - VAR_478 ; break ; } VAR_479 = METHOD_56 ( VAR_480 . VAR_481 ) ; METHOD_57 ( VAR_482 ) ; if ( METHOD_58 ( VAR_483 ) ) { VAR_484 = METHOD_59 ( VAR_485 ) ; break ; } VAR_486 [ VAR_487 ] . VAR_488 = VAR_489 ; VAR_490 [ VAR_491 ] . VAR_492 = METHOD_60 ( VAR_493 ) ; } METHOD_61 ( VAR_494 ) ; if ( VAR_495 ) goto VAR_496 ; TYPE_114 . VAR_497 = VAR_498 . VAR_499 ; TYPE_115 . VAR_500 = VAR_501 ; VAR_502 = METHOD_62 ( VAR_503 -> VAR_504 , VAR_505 , & TYPE_116 , VAR_506 ) ; if ( ! VAR_507 ) VAR_508 = VAR_509 ? METHOD_63 ( VAR_510 -> VAR_511 -> VAR_512 ) : METHOD_64 ( VAR_513 -> VAR_514 -> VAR_515 ) ; VAR_516 : for ( VAR_517 -- ; VAR_518 >= 0 ; VAR_519 -- ) METHOD_65 ( VAR_520 [ VAR_521 ] . VAR_522 ) ; METHOD_66 ( VAR_523 ) ; return VAR_524 ; } return - VAR_525 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , unsigned VAR_2 , unsigned VAR_3 , struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 , TYPE_2 * VAR_4 ) { TYPE_3 * VAR_5 = METHOD_1 ( ) ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 = VAR_6 -> VAR_7 ; TYPE_4 VAR_8 = STRUCT_OR_UNION_7 -> VAR_9 ; TYPE_5 VAR_10 = 0 , VAR_11 ; TYPE_6 VAR_12 = 0 ; METHOD_2 ( STRUCT_OR_UNION_8 , VAR_13 , VAR_14 , VAR_15 ) ;  if ( METHOD_3 ( STRUCT_OR_UNION_9 , VAR_16 ) ) {  VAR_17 = METHOD_4 ( VAR_18 , STRUCT_OR_UNION_10 ) ; if ( VAR_19 ) { METHOD_5 ( STRUCT_OR_UNION_11 ) ; METHOD_6 ( STRUCT_OR_UNION_12 ) ; goto VAR_20 ; } } if ( METHOD_7 ( STRUCT_OR_UNION_13 ) ) { VAR_21 = METHOD_8 ( STRUCT_OR_UNION_14 , VAR_22 , VAR_23 , VAR_24 , STRUCT_OR_UNION_15 ) ; if ( VAR_25 < 0 ) goto VAR_26 ; VAR_27 = VAR_28 ; } else VAR_29 = METHOD_9 ( STRUCT_OR_UNION_16 , VAR_30 , VAR_31 , VAR_32 , VAR_33 , STRUCT_OR_UNION_17 , VAR_34 ) ; VAR_35 = METHOD_10 ( STRUCT_OR_UNION_18 , VAR_36 + VAR_37 ) ; METHOD_11 ( STRUCT_OR_UNION_19 ) ; METHOD_12 ( STRUCT_OR_UNION_20 ) ; if ( VAR_38 < VAR_39 ) METHOD_13 ( STRUCT_OR_UNION_21 , VAR_40 , VAR_41 ) ; if ( VAR_42 ) METHOD_14 ( VAR_43 , STRUCT_OR_UNION_22 ) ; if ( VAR_44 + VAR_45 > STRUCT_OR_UNION_23 -> VAR_46 && METHOD_15 ( STRUCT_OR_UNION_24 ) ) METHOD_16 ( VAR_47 , STRUCT_OR_UNION_25 ) ; VAR_48 : VAR_49 = METHOD_17 ( VAR_50 ) ; if ( ! VAR_51 ) VAR_52 = VAR_53 ; if ( VAR_54 + VAR_55 > STRUCT_OR_UNION_26 -> VAR_56 ) { METHOD_18 ( STRUCT_OR_UNION_27 ) ; if ( STRUCT_OR_UNION_28 -> VAR_57 ) METHOD_19 ( VAR_58 , STRUCT_OR_UNION_29 ) ; } return VAR_59 ? VAR_60 : VAR_61 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 VAR_7 ; if ( VAR_8 -> VAR_9 == 1 ) VAR_10 -> VAR_11 = 0 ; else VAR_12 -> VAR_13 = 1 ;  VAR_14 -> VAR_15 = - 1 ;  VAR_16 -> VAR_17 = METHOD_1 ( VAR_18 ) ; if ( ! VAR_19 -> VAR_20 ) return METHOD_2 ( VAR_21 ) ; if ( VAR_22 ) METHOD_3 ( & VAR_23 -> VAR_24 , * VAR_25 , 0 ) ; if ( VAR_26 -> VAR_27 ) { TYPE_7 VAR_28 = METHOD_4 ( VAR_29 -> VAR_30 ) ; if ( VAR_31 < 2 || METHOD_5 ( "\\r\\n" , VAR_32 -> VAR_33 + VAR_34 - 2 ) ) { METHOD_6 ( VAR_35 , VAR_36 , "NotrailingCRLFfoundinHTTPheader.\\n" ) ; VAR_37 = METHOD_7 ( & VAR_38 -> VAR_39 , VAR_40 + 3 ) ; if ( VAR_41 < 0 ) return VAR_42 ; VAR_43 -> VAR_44 [ VAR_45 ] = '\\r' ; VAR_46 -> VAR_47 [ VAR_48 + 1 ] = '\\n' ; VAR_49 -> VAR_50 [ VAR_51 + 2 ] = '\\0' ; } } if ( VAR_52 -> VAR_53 ) { return METHOD_8 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; } VAR_58 = METHOD_9 ( VAR_59 , VAR_60 ) ; if ( VAR_61 < 0 ) METHOD_10 ( & VAR_62 -> VAR_63 ) ; return VAR_64 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { struct STRUCT_OR_UNION_4 VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; struct STRUCT_OR_UNION_6 * VAR_7 ; struct STRUCT_OR_UNION_7 * VAR_8 = METHOD_1 ( VAR_9 ) ; const struct STRUCT_OR_UNION_8 * VAR_10 = METHOD_2 ( VAR_11 ) ; TYPE_0 VAR_12 = METHOD_3 ( VAR_13 -> VAR_14 ) - 1 ; struct STRUCT_OR_UNION_9 * VAR_15 = VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_1 VAR_18 ; struct STRUCT_OR_UNION_11 * VAR_19 ; TYPE_2 VAR_20 ; TYPE_3 VAR_21 ; if ( ! VAR_22 || ! VAR_23 -> VAR_24 || VAR_25 -> VAR_26 ) goto VAR_27 ; if ( METHOD_4 ( VAR_28 ) || ( VAR_29 = METHOD_5 ( VAR_30 , VAR_31 ) ) == 0 ) { METHOD_6 ( METHOD_7 ( VAR_32 ) , VAR_33 ) ; goto VAR_34 ; } METHOD_8 ( METHOD_9 ( VAR_35 ) , VAR_36 ) ; METHOD_10 ( & VAR_37 , 0 , sizeof ( VAR_38 ) ) ; METHOD_11 ( VAR_39 , & VAR_40 , & VAR_41 , 0 ) ; if ( ! METHOD_12 ( & VAR_42 , & VAR_43 ) ) goto VAR_44 ; VAR_45 = VAR_46 ; VAR_47 = METHOD_13 ( & VAR_48 ) ; if ( ! VAR_49 ) goto VAR_50 ; VAR_51 = METHOD_14 ( VAR_52 ) ; VAR_53 = METHOD_15 ( VAR_54 ) ; VAR_55 -> VAR_56 = METHOD_16 ( VAR_57 -> VAR_58 ) - 1 ; VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; VAR_69 -> VAR_70 = VAR_71 -> VAR_72 ; VAR_73 -> VAR_74 = METHOD_17 ( VAR_75 ) -> VAR_76 ; VAR_77 -> VAR_78 = METHOD_18 ( VAR_79 ) -> VAR_80 ; VAR_81 -> VAR_82 = VAR_83 ; VAR_84 -> VAR_85 = VAR_86 . VAR_87 ; VAR_88 -> VAR_89 = VAR_90 . VAR_91 ; VAR_92 -> VAR_93 = VAR_94 . VAR_95 ; VAR_96 -> VAR_97 = VAR_98 . VAR_99 ; VAR_100 -> VAR_101 = VAR_102 . VAR_103 ? VAR_104 . VAR_105 : 0 ; if ( VAR_106 && VAR_107 -> VAR_108 ) {  TYPE_4 VAR_109 = sizeof ( struct STRUCT_OR_UNION_12 ) + VAR_110 -> VAR_111 ;  VAR_112 -> VAR_113 = METHOD_19 ( VAR_114 , VAR_115 ) ;  if ( VAR_116 -> VAR_117 != VAR_118 && METHOD_20 ( VAR_119 -> VAR_120 , VAR_121 ) ) {  METHOD_21 ( VAR_122 -> VAR_123 ) ; VAR_124 -> VAR_125 = VAR_126 ; } } if ( METHOD_22 ( VAR_127 , VAR_128 , VAR_129 ) ) { METHOD_23 ( VAR_130 ) ; goto VAR_131 ; } VAR_132 -> VAR_133 = 0UL ; VAR_134 -> VAR_135 = 0 ; { struct STRUCT_OR_UNION_13 VAR_136 ; METHOD_24 ( & VAR_137 , 0 , VAR_138 -> VAR_139 , METHOD_25 ( VAR_140 ) , VAR_141 , VAR_142 , METHOD_26 ( VAR_143 ) , ( VAR_144 && VAR_145 -> VAR_146 ) ? VAR_147 -> VAR_148 : VAR_149 -> VAR_150 , VAR_151 -> VAR_152 , VAR_153 -> VAR_154 , VAR_155 -> VAR_156 ) ; METHOD_27 ( VAR_157 , METHOD_28 ( & VAR_158 ) ) ; VAR_159 = METHOD_29 ( METHOD_30 ( VAR_160 ) , & VAR_161 ) ; if ( METHOD_31 ( VAR_162 ) ) { METHOD_32 ( VAR_163 ) ; goto VAR_164 ; } } VAR_165 -> VAR_166 = VAR_167 -> VAR_168 ? : METHOD_33 ( & VAR_169 -> VAR_170 , VAR_171 ) ; METHOD_34 ( METHOD_35 ( VAR_172 ) , VAR_173 -> VAR_174 , & VAR_175 -> VAR_176 , & VAR_177 -> VAR_178 , VAR_179 -> VAR_180 , & VAR_181 , METHOD_36 ( & VAR_182 -> VAR_183 , VAR_184 ) ) ; VAR_185 -> VAR_186 = VAR_187 ; VAR_188 = METHOD_37 ( VAR_189 , VAR_190 , VAR_191 , & VAR_192 -> VAR_193 ) ; VAR_194 : return VAR_195 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 = 0 ; unsigned TYPE_4 VAR_3 ; do { const unsigned TYPE_5 VAR_4 = VAR_5 [ 0 ] ; if ( ( VAR_6 > 127 ) || ( METHOD_1 ( VAR_7 ) == VAR_8 ) ) return - 1 ; const unsigned TYPE_6 VAR_9 = VAR_10 [ 1 ] ; if ( ( VAR_11 > 127 ) || ( METHOD_2 ( VAR_12 ) == VAR_13 ) ) return - 1 ; const unsigned TYPE_7 VAR_14 = VAR_15 [ 2 ] ; if ( ( VAR_16 > 127 ) || ( ( VAR_17 != '=' ) && ( METHOD_3 ( VAR_18 ) == VAR_19 ) ) ) return - 1 ; VAR_20 = VAR_21 [ 3 ] ; if ( ( VAR_22 > 127 ) || ( ( VAR_23 != '=' ) && ( METHOD_4 ( VAR_24 ) == VAR_25 ) ) ) return - 1 ; VAR_26 += 4 ;  * VAR_27 ++ = ( METHOD_5 ( VAR_28 ) << 2 ) | ( METHOD_6 ( VAR_29 ) >> 4 ) ;  VAR_30 ++ ; if ( VAR_31 != '=' ) {  * VAR_32 ++ = ( ( METHOD_7 ( VAR_33 ) << 4 ) & 0xf0 ) | ( METHOD_8 ( VAR_34 ) >> 2 ) ;  VAR_35 ++ ; if ( VAR_36 != '=' ) {  * VAR_37 ++ = ( ( METHOD_9 ( VAR_38 ) << 6 ) & 0xc0 ) | METHOD_10 ( VAR_39 ) ;  VAR_40 ++ ; } } } while ( * VAR_41 && VAR_42 != '=' ) ; return VAR_43 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;  METHOD_3 ( VAR_6 -> VAR_7 ) ;  return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const struct STRUCT_OR_UNION_2 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 , VAR_4 ;  TYPE_4 VAR_5 , VAR_6 , VAR_7 ;  TYPE_5 VAR_8 = 0 ; TYPE_6 VAR_9 ; struct STRUCT_OR_UNION_3 VAR_10 ; struct STRUCT_OR_UNION_4 * VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ; struct STRUCT_OR_UNION_6 * VAR_13 ; struct STRUCT_OR_UNION_7 * VAR_14 , * VAR_15 ; struct STRUCT_OR_UNION_8 VAR_16 ; TYPE_7 VAR_17 ; TYPE_8 VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 , VAR_21 ) ; if ( ! VAR_22 ) return 0 ; VAR_23 = METHOD_2 ( STRUCT_OR_UNION_9 , VAR_24 , & VAR_25 , 0 ) ; if ( VAR_26 ) return VAR_27 ; METHOD_3 ( & VAR_28 ) ; VAR_29 = METHOD_4 ( STRUCT_OR_UNION_10 -> VAR_30 . VAR_31 -> VAR_32 ) ; VAR_33 = STRUCT_OR_UNION_11 -> VAR_34 ; VAR_35 = METHOD_5 ( VAR_36 -> VAR_37 ) ; if ( ! VAR_38 -> VAR_39 -> VAR_40 -> VAR_41 -> VAR_42 ) return - VAR_43 ; VAR_44 = * VAR_45 ; if ( VAR_46 -> VAR_47 & VAR_48 ) VAR_49 = VAR_50 -> VAR_51 ; else VAR_52 = VAR_53 -> VAR_54 ; METHOD_6 ( & VAR_55 , VAR_56 , VAR_57 , VAR_58 , 0 ) ; do { TYPE_9 VAR_59 ; VAR_60 = METHOD_7 ( VAR_61 -> VAR_62 , VAR_63 , & VAR_64 ) ; VAR_65 = METHOD_8 ( VAR_66 , VAR_67 ) ; if ( ! VAR_68 ) { VAR_69 = - VAR_70 ; break ; } VAR_71 = METHOD_9 ( VAR_72 -> VAR_73 , VAR_74 ) ; if ( VAR_75 ) { METHOD_10 ( VAR_76 ) ; break ; } VAR_77 = VAR_78 ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 ; VAR_82 ++ ) {  VAR_83 = min_t ( const TYPE_10 , VAR_84 , VAR_85 ) ;  VAR_86 = METHOD_11 ( VAR_87 -> VAR_88 [ VAR_89 ] , & VAR_90 ,  0 , VAR_91 ) ;  VAR_92 -= VAR_93 ; METHOD_12 ( & VAR_94 , VAR_95 ) ;  }   VAR_96 = VAR_97 - VAR_98 ;  VAR_99 -> VAR_100 = VAR_101 ; VAR_102 -> VAR_103 = VAR_104 ; VAR_105 -> VAR_106 = ( TYPE_11 ) VAR_107 ; VAR_108 -> VAR_109 = METHOD_13 ( VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 = VAR_122 - ( ( VAR_123 - 1 ) * VAR_124 ) ; VAR_125 = METHOD_14 ( VAR_126 ) ; if ( VAR_127 ) { METHOD_15 ( & VAR_128 -> VAR_129 , VAR_130 ) ; break ; } METHOD_16 ( & VAR_131 -> VAR_132 , & VAR_133 ) ; VAR_134 += VAR_135 ; VAR_136 -= VAR_137 ; } while ( VAR_138 > 0 ) ; if ( ! METHOD_17 ( & VAR_139 ) ) VAR_140 = 0 ; VAR_141 : METHOD_18 ( VAR_142 , VAR_143 , & VAR_144 , VAR_145 ) { if ( ! VAR_146 ) { VAR_147 = METHOD_19 ( & VAR_148 -> VAR_149 ) ; if ( VAR_150 ) VAR_151 = - VAR_152 ; else if ( VAR_153 -> VAR_154 ) VAR_155 = VAR_156 -> VAR_157 ; else VAR_158 += VAR_159 -> VAR_160 ; if ( VAR_161 == - VAR_162 ) { VAR_163 = METHOD_20 ( VAR_164 ) ; goto VAR_165 ; } } METHOD_21 ( & VAR_166 -> VAR_167 ) ; METHOD_22 ( & VAR_168 -> VAR_169 , VAR_170 ) ; } if ( VAR_171 > 0 ) * VAR_172 += VAR_173 ; METHOD_23 ( VAR_174 , VAR_175 ) ; return VAR_176 ? VAR_177 : ( TYPE_12 ) VAR_178 ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 = ( unsigned TYPE_4 ) METHOD_1 ( VAR_4 ) ; unsigned TYPE_5 VAR_5 ;  if ( ! ( VAR_6 & VAR_7 ) )  return VAR_8 ; for ( VAR_9 = 0 ; VAR_10 < * VAR_11 - 4 ; VAR_12 ++ ) if ( VAR_13 [ VAR_14 ] == 0x29 && VAR_15 [ VAR_16 + 2 ] == 0x19 ) { VAR_17 [ VAR_18 ] = 0x19 ; VAR_19 [ VAR_20 + 2 ] = 0x29 ; METHOD_2 ( VAR_21 [ VAR_22 + 3 ] , VAR_23 [ VAR_24 + 1 ] ) ; } return VAR_25 ; }
const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 , VAR_2 , VAR_3 ;  TYPE_3 VAR_4 , VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 [ VAR_8 ] ; TYPE_6 VAR_9 [ VAR_10 ] ; TYPE_7 VAR_11 [ VAR_12 ] ; TYPE_8 VAR_13 ;  TYPE_9 * const VAR_14 = METHOD_1 ( VAR_15 ) ;  if ( VAR_16 == VAR_17 || VAR_18 == VAR_19 ) return VAR_20 ; METHOD_2 ( VAR_21 ) ;  VAR_22 = VAR_23 -> VAR_24 ;   if ( VAR_25 -> VAR_26 <= 0 ) return METHOD_3 ( VAR_27 ) ;  METHOD_4 ( VAR_28 , VAR_29 , "\\n" ) ;  VAR_30 = VAR_31 / VAR_32 -> VAR_33 + 1 ;   for ( VAR_34 = 0 ; VAR_35 < VAR_36 -> VAR_37 ; ++ VAR_38 ) {   VAR_39 = VAR_40 ;  if ( VAR_41 -> VAR_42 == VAR_43 && ( VAR_44 == 1 || VAR_45 == 3 ) ) { VAR_46 -= VAR_47 ; } METHOD_5 ( VAR_48 , VAR_49 , "Layer%dAveragePSNR=[%2.3f,%2.3f,%2.3f,%2.3f],Bytes=[%u]\\n" , VAR_50 , ( TYPE_10 ) VAR_51 -> VAR_52 [ VAR_53 ] [ 0 ] / VAR_54 , ( TYPE_11 ) VAR_55 -> VAR_56 [ VAR_57 ] [ 1 ] / VAR_58 , ( TYPE_12 ) VAR_59 -> VAR_60 [ VAR_61 ] [ 2 ] / VAR_62 , ( TYPE_13 ) VAR_63 -> VAR_64 [ VAR_65 ] [ 3 ] / VAR_66 , VAR_67 -> VAR_68 [ VAR_69 ] ) ; VAR_70 = VAR_71 -> VAR_72 * VAR_73 -> VAR_74 * 255.0 * 255.0 * VAR_75 ; VAR_76 [ 1 ] = VAR_77 ; VAR_78 [ 2 ] = VAR_79 [ 3 ] = VAR_80 / 4 ; VAR_81 [ 0 ] = VAR_82 * 1.5 ; for ( VAR_83 = 0 ; VAR_84 < VAR_85 ; VAR_86 ++ ) { VAR_87 [ VAR_88 ] = METHOD_6 ( VAR_89 -> VAR_90 [ VAR_91 ] [ VAR_92 ] / VAR_93 [ VAR_94 ] ) ; VAR_95 [ VAR_96 ] = VAR_97 -> VAR_98 [ VAR_99 ] [ VAR_100 ] * 255.0 * 255.0 / VAR_101 [ VAR_102 ] ; } METHOD_7 ( VAR_103 , VAR_104 , "Layer%dOverallPSNR=[%2.3f,%2.3f,%2.3f,%2.3f]\\n" , VAR_105 , VAR_106 [ 0 ] , VAR_107 [ 1 ] , VAR_108 [ 2 ] , VAR_109 [ 3 ] ) ; METHOD_8 ( VAR_110 , VAR_111 , "Layer%dOverallMSE=[%2.3f,%2.3f,%2.3f,%2.3f]\\n" , VAR_112 , VAR_113 [ 0 ] , VAR_114 [ 1 ] , VAR_115 [ 2 ] , VAR_116 [ 3 ] ) ; VAR_117 += VAR_118 -> VAR_119 [ VAR_120 ] ; VAR_121 -> VAR_122 [ VAR_123 ] = 0 ; for ( VAR_124 = 0 ; VAR_125 < VAR_126 ; ++ VAR_127 ) { VAR_128 -> VAR_129 [ VAR_130 ] [ VAR_131 ] = 0 ; VAR_132 -> VAR_133 [ VAR_134 ] [ VAR_135 ] = 0 ; } }  VAR_136 -> VAR_137 = 0 ;  METHOD_9 ( VAR_138 , VAR_139 , "TotalBytes=[%u]\\n" , VAR_140 ) ; return METHOD_10 ( VAR_141 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 )  { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; VAR_6 = VAR_7 ; while ( VAR_8 > 4 ) { VAR_9 = * VAR_10 ++ ; if ( VAR_11 == 5 ) {  * VAR_12 ++ = VAR_13 ;  VAR_14 -- ; } else if ( VAR_15 == * VAR_16 ) { VAR_17 ++ ; if ( * VAR_18 < 0xFF ) { VAR_19 = ( TYPE_7 ) * VAR_20 ++ ; VAR_21 += 2 ; } else { VAR_22 ++ ; VAR_23 = * ( ( TYPE_8 * ) VAR_24 ) ; VAR_25 += 4 ; }  METHOD_1 ( VAR_26 , VAR_27 , VAR_28 ) ;  VAR_29 += VAR_30 ; VAR_31 -= VAR_32 ; } else {  * VAR_33 ++ = VAR_34 ;  VAR_35 -- ; } } * ( ( TYPE_9 * ) VAR_36 ) = * ( ( TYPE_10 * ) VAR_37 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 = ( VAR_7 -> VAR_8 [ 1 ] && VAR_9 -> VAR_10 == VAR_11 -> VAR_12 [ 1 ] ) ; TYPE_7 VAR_13 = VAR_14 -> VAR_15 ; TYPE_8 VAR_16 = VAR_17 -> VAR_18 ; TYPE_9 VAR_19 ; if ( ! VAR_20 && VAR_21 < VAR_22 ) { TYPE_10 VAR_23 = { 0 , 0 } ; TYPE_11 VAR_24 = VAR_25 -> VAR_26 -> VAR_27 ; for ( VAR_28 . VAR_29 = VAR_30 - 1 ; VAR_31 . VAR_32 >= VAR_33 ; VAR_34 . VAR_35 -- ) if ( ! METHOD_1 ( VAR_36 , VAR_37 ) || VAR_38 . VAR_39 == VAR_40 . VAR_41 ) break ; VAR_42 = VAR_43 . VAR_44 + 1 ; if ( VAR_45 > VAR_46 ) { TYPE_12 VAR_47 = { 0 , 0 , 0 , 0 } ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; METHOD_2 ( VAR_54 , VAR_55 - VAR_56 , 0 , VAR_57 ) ; METHOD_3 ( VAR_58 ) ; VAR_59 -> VAR_60 -= VAR_61 - VAR_62 ; } } VAR_63 -> VAR_64 [ 0 ] = METHOD_4 ( VAR_65 , VAR_66 -> VAR_67 [ 0 ] , VAR_68 , VAR_69 ) ; if ( VAR_70 -> VAR_71 [ 1 ] ) VAR_72 -> VAR_73 [ 1 ] = METHOD_5 ( VAR_74 , VAR_75 -> VAR_76 [ 1 ] , VAR_77 , VAR_78 ) ; VAR_79 -> VAR_80 = VAR_81 ? VAR_82 -> VAR_83 [ 1 ] : VAR_84 -> VAR_85 [ 0 ] ; VAR_86 -> VAR_87 = VAR_88 ; VAR_89 -> VAR_90 = VAR_91 ;  if ( VAR_92 -> VAR_93 )  METHOD_6 ( VAR_94 -> VAR_95 , VAR_96 -> VAR_97 ) ; VAR_98 -> VAR_99 = METHOD_7 ( VAR_100 -> VAR_101 , sizeof ( VAR_102 ) * VAR_103 ) ; if ( VAR_104 > VAR_105 ) { TYPE_13 VAR_106 ; VAR_107 . VAR_108 = 0 ; VAR_109 . VAR_110 = VAR_111 ; VAR_112 . VAR_113 = VAR_114 ; VAR_115 . VAR_116 = VAR_117 ; METHOD_8 ( VAR_118 , VAR_119 ) ; } if ( VAR_120 > VAR_121 ) { if ( ! VAR_122 && VAR_123 -> VAR_124 && VAR_125 -> VAR_126 -> METHOD_9 ) { TYPE_14 VAR_127 = VAR_128 - VAR_129 ; while ( VAR_130 ) { TYPE_15 VAR_131 = { 0 , 0 , 0 , 0 } ; TYPE_16 VAR_132 = { 0 , 0 } ; if ( ! ( VAR_133 -> VAR_134 -> METHOD_10 ( VAR_135 -> VAR_136 , VAR_137 -> VAR_138 , VAR_139 -> VAR_140 ) ) ) break ; VAR_141 . VAR_142 = VAR_143 -> VAR_144 ; VAR_145 . VAR_146 = VAR_147 -> VAR_148 ; METHOD_11 ( VAR_149 , - 1 , 0 , VAR_150 ) ; for ( VAR_151 . VAR_152 = 0 ; VAR_153 . VAR_154 < VAR_155 -> VAR_156 ; VAR_157 . VAR_158 += VAR_159 -> VAR_160 [ VAR_161 . VAR_162 ] . VAR_163 ) METHOD_12 ( VAR_164 , VAR_165 , VAR_166 -> VAR_167 + VAR_168 . VAR_169 ) ; VAR_170 . VAR_171 = 1 ; METHOD_13 ( VAR_172 , VAR_173 ) ; METHOD_14 ( VAR_174 ) ; VAR_175 -- ; VAR_176 -> VAR_177 ++ ; } } { TYPE_17 VAR_178 ; VAR_179 . VAR_180 = VAR_181 ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 = 0 ; VAR_187 . VAR_188 = VAR_189 ; METHOD_15 ( VAR_190 , VAR_191 ) ; } } if ( VAR_192 -> VAR_193 && VAR_194 -> VAR_195 -> METHOD_16 ) return ( * VAR_196 -> VAR_197 -> METHOD_17 ) ( VAR_198 , VAR_199 , VAR_200 -> VAR_201 ) ; return 1 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 VAR_4 , struct STRUCT_OR_UNION_0 * VAR_5 , const TYPE_6 * VAR_6 ) {  const TYPE_7 * VAR_7 = * VAR_8 ;  const TYPE_8 * VAR_9 ; TYPE_9 VAR_10 = 0 ; TYPE_10 VAR_11 = 0 ; METHOD_1 ( * VAR_12 == VAR_13 ) ;  for ( ; * VAR_14 < VAR_15 ; ( * VAR_16 ) ++ ) {  TYPE_11 VAR_17 = * * VAR_18 ;  if ( ! VAR_19 && VAR_20 == '{' && ( * VAR_21 ) - VAR_22 >= 2 &&  * ( * VAR_23 - 2 ) == '\\\\' && * ( * VAR_24 - 1 ) == 'N' ) { VAR_25 = 1 ; } else if ( VAR_26 && VAR_27 == '}' ) {  VAR_28 = 0 ;  } else if ( VAR_29 == '{' || VAR_30 == '}' ) { if ( VAR_31 == 0 ) {  if ( * VAR_32 + 1 < VAR_33 && * ( * VAR_34 + 1 ) == VAR_35 ) {  VAR_36 = * VAR_37 + 1 ; * VAR_38 += 2 ; VAR_39 = 1 ; goto VAR_40 ; } if ( VAR_41 == '}' ) {  METHOD_2 ( VAR_42 , VAR_43 , "f-string:single\'}\'isnotallowed" ) ;  return - 1 ; } }  break ;  } }  VAR_44 = * VAR_45 ;   METHOD_3 ( * VAR_46 <= VAR_47 ) ;   METHOD_4 ( * VAR_48 == VAR_49 || * * VAR_50 == '{' || * * VAR_51 == '}' ) ;  VAR_52 :  if ( VAR_53 != VAR_54 ) {  if ( VAR_55 ) * VAR_56 = METHOD_5 ( VAR_57 ,  VAR_58 - VAR_59 ,  VAR_60 , VAR_61 ) ; else * VAR_62 = METHOD_6 ( VAR_63 , VAR_64 , VAR_65 ,  VAR_66 - VAR_67 ) ;  if ( ! * VAR_68 ) return - 1 ; } return VAR_69 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 )  { unsigned TYPE_3 * VAR_2 ;  METHOD_1 ( VAR_3 >= 0 ) ;   METHOD_2 ( 100 , ( "mem_resize(%p,%d)\\n" , VAR_4 , VAR_5 ) ) ;  if ( ! ( VAR_6 = METHOD_3 ( VAR_7 -> VAR_8 , VAR_9 , sizeof ( unsigned TYPE_4 ) ) ) && VAR_10 ) { METHOD_4 ( 100 , ( "mem_resizereallocfailed\\n" ) ) ; return - 1 ; } METHOD_5 ( 100 , ( "mem_resizereallocsucceeded\\n" ) ) ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = VAR_16 ; return 0 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( ) ;  struct STRUCT_OR_UNION_0 * VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ;  TYPE_2 * VAR_4 = VAR_5 ; if ( VAR_6 ) { VAR_7 = METHOD_3 ( VAR_8 -> VAR_9 ) ; METHOD_4 ( VAR_10 ) ; } METHOD_5 ( "problemid:\'%s\'" , VAR_11 ) ; return VAR_12 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , enum VAR_1 * VAR_2 , TYPE_2 * VAR_3 , TYPE_3 * VAR_4 ) { if ( VAR_5 == VAR_6 ) { * VAR_7 = VAR_8 ; * VAR_9 = VAR_10 ; return VAR_11 ; } * VAR_12 = VAR_13 ; if ( VAR_14 -> VAR_15 . VAR_16 == VAR_17 ) { const TYPE_4 * VAR_18 = METHOD_1 ( VAR_19 -> VAR_20 , VAR_21 -> VAR_22 . VAR_23 ) ;  if ( ! METHOD_2 ( VAR_24 , VAR_25 , VAR_26 ) ) {  log_err ( VAR_27 -> VAR_28 , "Illegalmodifierpredicate\\"%s\\";Ignored\\n" , VAR_29 ) ; return VAR_30 ; } VAR_31 = VAR_32 -> VAR_33 . VAR_34 ; } else if ( VAR_35 -> VAR_36 . VAR_37 == VAR_38 ) { const TYPE_5 * VAR_39 = METHOD_3 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 . VAR_44 ) ; if ( VAR_45 && METHOD_4 ( VAR_46 , "any" ) ) { * VAR_47 = VAR_48 ; * VAR_49 = VAR_50 ; return VAR_51 ; } } return METHOD_5 ( VAR_52 -> VAR_53 , VAR_54 , VAR_55 , & VAR_56 -> VAR_57 , VAR_58 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ;  METHOD_2 ( & VAR_3 -> VAR_4 ) ; METHOD_3 ( VAR_5 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_8 VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_9 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; unsigned TYPE_10 * VAR_21 , * VAR_22 ; if ( VAR_23 == VAR_24 ) return ; VAR_25 = VAR_26 ; VAR_27 = VAR_28 ; VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; METHOD_1 ( VAR_33 , VAR_34 , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 , "rfbScaledScreenUpdateRect" ) ; VAR_39 = METHOD_2 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = METHOD_3 ( VAR_44 , VAR_45 , VAR_46 ) ; VAR_47 = METHOD_4 ( VAR_48 , VAR_49 , VAR_50 ) ; VAR_51 = METHOD_5 ( VAR_52 , VAR_53 , VAR_54 ) ; VAR_55 = VAR_56 -> VAR_57 ; VAR_58 = VAR_59 / 8 ; VAR_60 = VAR_61 * VAR_62 ; VAR_63 = ( unsigned TYPE_11 * ) ( VAR_64 -> VAR_65 + ( VAR_66 * VAR_67 -> VAR_68 + VAR_69 * VAR_70 ) ) ; VAR_71 = ( unsigned TYPE_12 * ) ( VAR_72 -> VAR_73 + ( VAR_74 * VAR_75 -> VAR_76 + VAR_77 * VAR_78 ) ) ; VAR_79 = METHOD_6 ( VAR_80 , VAR_81 , 1 ) ; VAR_82 = METHOD_7 ( VAR_83 , VAR_84 , 1 ) ; VAR_85 = VAR_86 * VAR_87 ; if ( ( VAR_88 + VAR_89 ) > ( VAR_90 -> VAR_91 ) ) { if ( VAR_92 == 0 ) VAR_93 = VAR_94 -> VAR_95 ; else VAR_96 = VAR_97 -> VAR_98 - VAR_99 ; } if ( ( VAR_100 + VAR_101 ) > ( VAR_102 -> VAR_103 ) ) { if ( VAR_104 == 0 ) VAR_105 = VAR_106 -> VAR_107 ; else VAR_108 = VAR_109 -> VAR_110 - VAR_111 ; } if ( VAR_112 -> VAR_113 . VAR_114 ) { unsigned TYPE_13 * VAR_115 ; unsigned TYPE_14 VAR_116 , VAR_117 , VAR_118 , VAR_119 ; unsigned TYPE_15 VAR_120 = VAR_121 -> VAR_122 . VAR_123 ; unsigned TYPE_16 VAR_124 = VAR_125 -> VAR_126 . VAR_127 ; unsigned TYPE_17 VAR_128 = VAR_129 -> VAR_130 . VAR_131 ; unsigned TYPE_18 VAR_132 = VAR_133 -> VAR_134 . VAR_135 ; unsigned TYPE_19 VAR_136 = VAR_137 -> VAR_138 . VAR_139 ; unsigned TYPE_20 VAR_140 = VAR_141 -> VAR_142 . VAR_143 ; for ( VAR_144 = 0 ; VAR_145 < VAR_146 ; VAR_147 ++ ) { for ( VAR_148 = 0 ; VAR_149 < VAR_150 ; VAR_151 ++ ) { VAR_152 = VAR_153 = VAR_154 = 0 ; for ( VAR_155 = 0 ; VAR_156 < VAR_157 ; VAR_158 ++ ) { for ( VAR_159 = 0 ; VAR_160 < VAR_161 ; VAR_162 ++ ) { VAR_163 = & VAR_164 [ ( ( ( VAR_165 * VAR_166 ) + VAR_167 ) * VAR_168 ) + ( VAR_169 * VAR_170 -> VAR_171 ) ] ; VAR_172 = 0 ; switch ( VAR_173 ) { case 4 : VAR_174 = * ( ( unsigned TYPE_21 * ) VAR_175 ) ; break ; case 2 : VAR_176 = * ( ( unsigned TYPE_22 * ) VAR_177 ) ; break ; case 1 : VAR_178 = * ( ( unsigned TYPE_23 * ) VAR_179 ) ; break ; default : for ( VAR_180 = 0 ; VAR_181 < VAR_182 ; VAR_183 ++ )  VAR_184 += ( VAR_185 [ VAR_186 ] << ( 8 * VAR_187 ) ) ;  break ; } VAR_188 += ( ( VAR_189 >> VAR_190 ) & VAR_191 ) ; VAR_192 += ( ( VAR_193 >> VAR_194 ) & VAR_195 ) ; VAR_196 += ( ( VAR_197 >> VAR_198 ) & VAR_199 ) ; } } VAR_200 /= VAR_201 ; VAR_202 /= VAR_203 ; VAR_204 /= VAR_205 ; VAR_206 = ( ( VAR_207 & VAR_208 ) << VAR_209 ) | ( ( VAR_210 & VAR_211 ) << VAR_212 ) | ( ( VAR_213 & VAR_214 ) << VAR_215 ) ; switch ( VAR_216 ) { case 4 : * ( ( unsigned TYPE_24 * ) VAR_217 ) = ( unsigned TYPE_25 ) VAR_218 ; break ; case 2 : * ( ( unsigned TYPE_26 * ) VAR_219 ) = ( unsigned TYPE_27 ) VAR_220 ; break ; case 1 : * ( ( unsigned TYPE_28 * ) VAR_221 ) = ( unsigned TYPE_29 ) VAR_222 ; break ; default : for ( VAR_223 = 0 ; VAR_224 < VAR_225 ; VAR_226 ++ ) VAR_227 [ VAR_228 ] = ( VAR_229 >> ( 8 * VAR_230 ) ) & 0xff ; break ; } VAR_231 += VAR_232 ; } VAR_233 += ( VAR_234 -> VAR_235 * VAR_236 ) ; VAR_237 += ( VAR_238 -> VAR_239 - VAR_240 ) ; } } else { for ( VAR_241 = VAR_242 ; VAR_243 < ( VAR_244 + VAR_245 ) ; VAR_246 ++ ) { for ( VAR_247 = VAR_248 ; VAR_249 < ( VAR_250 + VAR_251 ) ; VAR_252 ++ ) METHOD_8 ( & VAR_253 -> VAR_254 [ ( VAR_255 * VAR_256 -> VAR_257 ) + ( VAR_258 * VAR_259 ) ] , & VAR_260 -> VAR_261 [ ( VAR_262 * VAR_263 * VAR_264 -> VAR_265 ) + ( VAR_266 * VAR_267 * VAR_268 ) ] , VAR_269 ) ; } } }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 , VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_13 * VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_14 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_15 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , "%s" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_16 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_17 * ) VAR_45 ) ; } VAR_46 . VAR_47 = METHOD_10 ( VAR_48 ) ; do { if ( VAR_49 . VAR_50 != 0x01DA ) METHOD_11 ( VAR_51 , "ImproperImageHeader" ) ; VAR_52 . VAR_53 = ( unsigned TYPE_18 ) METHOD_12 ( VAR_54 ) ; switch ( VAR_55 . VAR_56 ) { case 0x00 : VAR_57 -> VAR_58 = VAR_59 ; break ; case 0x01 : VAR_60 -> VAR_61 = VAR_62 ; break ; default : METHOD_13 ( VAR_63 , "ImproperImageHeader" ) ; } VAR_64 . VAR_65 = ( unsigned TYPE_19 ) METHOD_14 ( VAR_66 ) ; if ( ( VAR_67 . VAR_68 == 0 ) || ( VAR_69 . VAR_70 > 2 ) ) METHOD_15 ( VAR_71 , "ImproperImageHeader" ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == 0 ) || ( VAR_86 . VAR_87 > 4 ) ) METHOD_20 ( VAR_88 , "ImproperImageHeader" ) ; VAR_89 . VAR_90 = METHOD_21 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_22 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_23 ( VAR_97 ) ; ( TYPE_20 ) METHOD_24 ( VAR_98 , sizeof ( VAR_99 . VAR_100 ) , ( unsigned TYPE_21 * ) VAR_101 . VAR_102 ) ; VAR_103 . VAR_104 [ sizeof ( VAR_105 . VAR_106 ) - 1 ] = '\\0' ; if ( * VAR_107 . VAR_108 != '\\0' ) ( TYPE_22 ) METHOD_25 ( VAR_109 , "label" , VAR_110 . VAR_111 , VAR_112 ) ; VAR_113 . VAR_114 = METHOD_26 ( VAR_115 ) ; if ( VAR_116 . VAR_117 != 0 ) METHOD_27 ( VAR_118 , "ImproperImageHeader" ) ; VAR_119 = METHOD_28 ( VAR_120 , sizeof ( VAR_121 . VAR_122 ) , VAR_123 . VAR_124 ) ; ( TYPE_23 ) VAR_125 ; VAR_126 -> VAR_127 = VAR_128 . VAR_129 ; VAR_130 -> VAR_131 = VAR_132 . VAR_133 ; VAR_134 -> VAR_135 = ( TYPE_24 ) METHOD_29 ( VAR_136 . VAR_137 , VAR_138 ) ; if ( VAR_139 . VAR_140 == 0 ) VAR_141 -> VAR_142 = ( TYPE_25 ) METHOD_30 ( ( TYPE_26 ) 8 * VAR_143 . VAR_144 , VAR_145 ) ; if ( VAR_146 . VAR_147 < 3 ) { VAR_148 -> VAR_149 = VAR_150 ; VAR_151 -> VAR_152 = VAR_153 . VAR_154 > 1 ? 65535 : 256 ; }  if ( ( VAR_155 -> VAR_156 != VAR_157 ) && ( VAR_158 -> VAR_159 != 0 ) )  if ( VAR_160 -> VAR_161 >= ( VAR_162 -> VAR_163 + VAR_164 -> VAR_165 - 1 ) ) break ; VAR_166 = METHOD_31 ( VAR_167 , VAR_168 -> VAR_169 , VAR_170 -> VAR_171 , VAR_172 ) ; if ( VAR_173 == VAR_174 ) return ( METHOD_32 ( VAR_175 ) ) ; VAR_176 = ( TYPE_27 ) VAR_177 . VAR_178 ; VAR_179 = ( TYPE_28 ) VAR_180 . VAR_181 * VAR_182 . VAR_183 ; if ( ( 4 * VAR_184 * VAR_185 ) != ( ( TYPE_29 ) ( TYPE_30 ) ( 4 * VAR_186 * VAR_187 ) ) ) METHOD_33 ( VAR_188 , "MemoryAllocationFailed" ) ; VAR_189 = METHOD_34 ( VAR_190 . VAR_191 , VAR_192 . VAR_193 * 4 * VAR_194 * sizeof ( * VAR_195 ) ) ; if ( VAR_196 == ( TYPE_31 * ) VAR_197 ) METHOD_35 ( VAR_198 , "MemoryAllocationFailed" ) ; VAR_199 = ( unsigned TYPE_32 * ) METHOD_36 ( VAR_200 ) ; if ( ( TYPE_33 ) VAR_201 . VAR_202 != 0x01 ) { unsigned TYPE_34 * VAR_203 ; VAR_204 = ( unsigned TYPE_35 * ) METHOD_37 ( VAR_205 . VAR_206 , VAR_207 * sizeof ( * VAR_208 ) ) ; if ( VAR_209 == ( unsigned TYPE_36 * ) VAR_210 ) METHOD_38 ( VAR_211 , "MemoryAllocationFailed" ) ; for ( VAR_212 = 0 ; VAR_213 < ( TYPE_37 ) VAR_214 . VAR_215 ; VAR_216 ++ ) { VAR_217 = VAR_218 + VAR_219 * VAR_220 ; for ( VAR_221 = 0 ; VAR_222 < ( TYPE_38 ) VAR_223 . VAR_224 ; VAR_225 ++ ) { VAR_226 = METHOD_39 ( VAR_227 , VAR_228 * VAR_229 . VAR_230 , VAR_231 ) ; if ( METHOD_40 ( VAR_232 ) != VAR_233 ) break ; if ( VAR_234 == 2 ) for ( VAR_235 = 0 ; VAR_236 < ( TYPE_39 ) VAR_237 . VAR_238 ; VAR_239 ++ ) { * VAR_240 = VAR_241 [ 2 * VAR_242 ] ; * ( VAR_243 + 1 ) = VAR_244 [ 2 * VAR_245 + 1 ] ; VAR_246 += 8 ; } else for ( VAR_247 = 0 ; VAR_248 < ( TYPE_40 ) VAR_249 . VAR_250 ; VAR_251 ++ ) { * VAR_252 = VAR_253 [ VAR_254 ] ; VAR_255 += 4 ; } } } VAR_256 = ( unsigned TYPE_41 * ) METHOD_41 ( VAR_257 ) ; } else { TYPE_42 * VAR_258 ; TYPE_43 * VAR_259 ; TYPE_44 VAR_260 , * VAR_261 ; unsigned TYPE_45 * VAR_262 ; unsigned TYPE_46 VAR_263 ; VAR_264 = ( TYPE_47 * ) METHOD_42 ( ( TYPE_48 ) VAR_265 . VAR_266 , VAR_267 . VAR_268 * sizeof ( * VAR_269 ) ) ; VAR_270 = ( TYPE_49 * ) METHOD_43 ( VAR_271 . VAR_272 , VAR_273 . VAR_274 * sizeof ( * VAR_275 ) ) ; VAR_276 = METHOD_44 ( ( TYPE_50 ) VAR_277 . VAR_278 + 10UL , 4UL * sizeof ( * VAR_279 ) ) ; if ( ( VAR_280 == ( TYPE_51 * ) VAR_281 ) || ( VAR_282 == ( TYPE_52 * ) VAR_283 ) || ( VAR_284 == ( TYPE_53 * ) VAR_285 ) ) { if ( VAR_286 == ( TYPE_54 * ) VAR_287 ) VAR_288 = ( TYPE_55 * ) METHOD_45 ( VAR_289 ) ; if ( VAR_290 == ( TYPE_56 * ) VAR_291 ) VAR_292 = ( TYPE_57 * ) METHOD_46 ( VAR_293 ) ; if ( VAR_294 == ( TYPE_58 * ) VAR_295 ) VAR_296 = METHOD_47 ( VAR_297 ) ; METHOD_48 ( VAR_298 , "MemoryAllocationFailed" ) ; } VAR_299 = ( unsigned TYPE_59 * ) METHOD_49 ( VAR_300 ) ; for ( VAR_301 = 0 ; VAR_302 < ( TYPE_60 ) ( VAR_303 . VAR_304 * VAR_305 . VAR_306 ) ; VAR_307 ++ ) VAR_308 [ VAR_309 ] = METHOD_50 ( VAR_310 ) ; for ( VAR_311 = 0 ; VAR_312 < ( TYPE_61 ) ( VAR_313 . VAR_314 * VAR_315 . VAR_316 ) ; VAR_317 ++ ) { VAR_318 [ VAR_319 ] = METHOD_51 ( VAR_320 ) ; if ( VAR_321 [ VAR_322 ] > ( 4 * ( TYPE_62 ) VAR_323 . VAR_324 + 10 ) ) METHOD_52 ( VAR_325 , "ImproperImageHeader" ) ; } VAR_326 = 0 ; VAR_327 = 0 ; for ( VAR_328 = 0 ; ( ( VAR_329 < ( TYPE_63 ) VAR_330 . VAR_331 ) && ( VAR_332 == 0 ) ) ; VAR_333 ++ ) for ( VAR_334 = 0 ; ( ( VAR_335 < ( TYPE_64 ) VAR_336 . VAR_337 ) && ( VAR_338 == 0 ) ) ; VAR_339 ++ ) { if ( VAR_340 [ VAR_341 + VAR_342 * VAR_343 . VAR_344 ] < VAR_345 ) VAR_346 = 1 ; VAR_347 = VAR_348 [ VAR_349 + VAR_350 * VAR_351 . VAR_352 ] ; } VAR_353 = ( TYPE_65 ) METHOD_53 ( VAR_354 ) ; if ( VAR_355 == 1 ) { for ( VAR_356 = 0 ; VAR_357 < ( TYPE_66 ) VAR_358 . VAR_359 ; VAR_360 ++ ) { VAR_361 = VAR_362 ; for ( VAR_363 = 0 ; VAR_364 < ( TYPE_67 ) VAR_365 . VAR_366 ; VAR_367 ++ ) { if ( VAR_368 != VAR_369 [ VAR_370 + VAR_371 * VAR_372 . VAR_373 ] ) { VAR_374 = VAR_375 [ VAR_376 + VAR_377 * VAR_378 . VAR_379 ] ; VAR_380 = ( TYPE_68 ) METHOD_54 ( VAR_381 , ( TYPE_69 ) VAR_382 , VAR_383 ) ; } VAR_384 = METHOD_55 ( VAR_385 , ( TYPE_70 ) VAR_386 [ VAR_387 + VAR_388 * VAR_389 . VAR_390 ] , VAR_391 ) ; if ( METHOD_56 ( VAR_392 ) != VAR_393 ) break ; VAR_394 += ( TYPE_71 ) VAR_395 [ VAR_396 + VAR_397 * VAR_398 . VAR_399 ] ; VAR_400 = METHOD_57 ( VAR_401 , ( TYPE_72 ) ( VAR_402 [ VAR_403 + VAR_404 * VAR_405 . VAR_406 ] / VAR_407 ) , VAR_408 , 1L * VAR_409 . VAR_410 , VAR_411 + VAR_412 * VAR_413 ) ; if ( VAR_414 == VAR_415 ) METHOD_58 ( VAR_416 , "ImproperImageHeader" ) ; VAR_417 += ( VAR_418 . VAR_419 * 4 * VAR_420 ) ; } } } else { TYPE_73 VAR_421 ; VAR_422 = METHOD_59 ( VAR_423 ) ; VAR_424 = VAR_425 ; for ( VAR_426 = 0 ; VAR_427 < ( TYPE_74 ) VAR_428 . VAR_429 ; VAR_430 ++ ) { for ( VAR_431 = 0 ; VAR_432 < ( TYPE_75 ) VAR_433 . VAR_434 ; VAR_435 ++ ) { if ( VAR_436 != VAR_437 [ VAR_438 + VAR_439 * VAR_440 . VAR_441 ] ) { VAR_442 = VAR_443 [ VAR_444 + VAR_445 * VAR_446 . VAR_447 ] ; VAR_448 = ( TYPE_76 ) METHOD_60 ( VAR_449 , ( TYPE_77 ) VAR_450 , VAR_451 ) ; } VAR_452 = METHOD_61 ( VAR_453 , ( TYPE_78 ) VAR_454 [ VAR_455 + VAR_456 * VAR_457 . VAR_458 ] , VAR_459 ) ; if ( METHOD_62 ( VAR_460 ) != VAR_461 ) break ; VAR_462 += ( TYPE_79 ) VAR_463 [ VAR_464 + VAR_465 * VAR_466 . VAR_467 ] ; VAR_468 = METHOD_63 ( VAR_469 , ( TYPE_80 ) ( VAR_470 [ VAR_471 + VAR_472 * VAR_473 . VAR_474 ] / VAR_475 ) , VAR_476 , 1L * VAR_477 . VAR_478 , VAR_479 + VAR_480 * VAR_481 ) ; if ( VAR_482 == VAR_483 ) METHOD_64 ( VAR_484 , "ImproperImageHeader" ) ; } VAR_485 += ( VAR_486 . VAR_487 * 4 * VAR_488 ) ; } VAR_489 = ( TYPE_81 ) METHOD_65 ( VAR_490 , VAR_491 , VAR_492 ) ; } VAR_493 = METHOD_66 ( VAR_494 ) ; VAR_495 = ( TYPE_82 * ) METHOD_67 ( VAR_496 ) ; VAR_497 = ( TYPE_83 * ) METHOD_68 ( VAR_498 ) ; } VAR_499 -> VAR_500 = VAR_501 . VAR_502 == 4 ? VAR_503 : VAR_504 ; VAR_505 -> VAR_506 = VAR_507 . VAR_508 ; VAR_509 -> VAR_510 = VAR_511 . VAR_512 ; if ( VAR_513 -> VAR_514 == VAR_515 ) { if ( VAR_516 == 2 ) { for ( VAR_517 = 0 ; VAR_518 < ( TYPE_84 ) VAR_519 -> VAR_520 ; VAR_521 ++ ) { VAR_522 = VAR_523 + ( VAR_524 -> VAR_525 - VAR_526 - 1 ) * 8 * VAR_527 -> VAR_528 ; VAR_529 = METHOD_69 ( VAR_530 , 0 , VAR_531 , VAR_532 -> VAR_533 , 1 , VAR_534 ) ; if ( VAR_535 == ( TYPE_85 * ) VAR_536 ) break ; for ( VAR_537 = 0 ; VAR_538 < ( TYPE_86 ) VAR_539 -> VAR_540 ; VAR_541 ++ ) { METHOD_70 ( VAR_542 , METHOD_71 ( ( unsigned TYPE_87 ) ( ( * ( VAR_543 + 0 ) << 8 ) | ( * ( VAR_544 + 1 ) ) ) ) , VAR_545 ) ; METHOD_72 ( VAR_546 , METHOD_73 ( ( unsigned TYPE_88 ) ( ( * ( VAR_547 + 2 ) << 8 ) | ( * ( VAR_548 + 3 ) ) ) ) , VAR_549 ) ; METHOD_74 ( VAR_550 , METHOD_75 ( ( unsigned TYPE_89 ) ( ( * ( VAR_551 + 4 ) << 8 ) | ( * ( VAR_552 + 5 ) ) ) ) , VAR_553 ) ; METHOD_76 ( VAR_554 , VAR_555 , VAR_556 ) ; if ( VAR_557 -> VAR_558 != VAR_559 ) METHOD_77 ( VAR_560 , METHOD_78 ( ( unsigned TYPE_90 ) ( ( * ( VAR_561 + 6 ) << 8 ) | ( * ( VAR_562 + 7 ) ) ) ) , VAR_563 ) ; VAR_564 += 8 ; VAR_565 += METHOD_79 ( VAR_566 ) ; } if ( METHOD_80 ( VAR_567 , VAR_568 ) == VAR_569 ) break ; if ( VAR_570 -> VAR_571 == ( TYPE_91 * ) VAR_572 ) { VAR_573 = METHOD_81 ( VAR_574 , VAR_575 , ( TYPE_92 ) VAR_576 , VAR_577 -> VAR_578 ) ; if ( VAR_579 == VAR_580 ) break ; } } } else for ( VAR_581 = 0 ; VAR_582 < ( TYPE_93 ) VAR_583 -> VAR_584 ; VAR_585 ++ ) { VAR_586 = VAR_587 + ( VAR_588 -> VAR_589 - VAR_590 - 1 ) * 4 * VAR_591 -> VAR_592 ; VAR_593 = METHOD_82 ( VAR_594 , 0 , VAR_595 , VAR_596 -> VAR_597 , 1 , VAR_598 ) ; if ( VAR_599 == ( TYPE_94 * ) VAR_600 ) break ; for ( VAR_601 = 0 ; VAR_602 < ( TYPE_95 ) VAR_603 -> VAR_604 ; VAR_605 ++ ) { METHOD_83 ( VAR_606 , METHOD_84 ( * VAR_607 ) , VAR_608 ) ; METHOD_85 ( VAR_609 , METHOD_86 ( * ( VAR_610 + 1 ) ) , VAR_611 ) ; METHOD_87 ( VAR_612 , METHOD_88 ( * ( VAR_613 + 2 ) ) , VAR_614 ) ; METHOD_89 ( VAR_615 , VAR_616 , VAR_617 ) ; if ( VAR_618 -> VAR_619 != VAR_620 ) METHOD_90 ( VAR_621 , METHOD_91 ( * ( VAR_622 + 3 ) ) , VAR_623 ) ; VAR_624 += 4 ; VAR_625 += METHOD_92 ( VAR_626 ) ; } if ( METHOD_93 ( VAR_627 , VAR_628 ) == VAR_629 ) break ; if ( VAR_630 -> VAR_631 == ( TYPE_96 * ) VAR_632 ) { VAR_633 = METHOD_94 ( VAR_634 , VAR_635 , ( TYPE_97 ) VAR_636 , VAR_637 -> VAR_638 ) ; if ( VAR_639 == VAR_640 ) break ; } } } else { if ( METHOD_95 ( VAR_641 , VAR_642 -> VAR_643 , VAR_644 ) == VAR_645 ) METHOD_96 ( VAR_646 , "MemoryAllocationFailed" ) ; if ( VAR_647 == 2 ) { for ( VAR_648 = 0 ; VAR_649 < ( TYPE_98 ) VAR_650 -> VAR_651 ; VAR_652 ++ ) { VAR_653 = VAR_654 + ( VAR_655 -> VAR_656 - VAR_657 - 1 ) * 8 * VAR_658 -> VAR_659 ; VAR_660 = METHOD_97 ( VAR_661 , 0 , VAR_662 , VAR_663 -> VAR_664 , 1 , VAR_665 ) ; if ( VAR_666 == ( TYPE_99 * ) VAR_667 ) break ; for ( VAR_668 = 0 ; VAR_669 < ( TYPE_100 ) VAR_670 -> VAR_671 ; VAR_672 ++ ) { VAR_673 = ( * VAR_674 << 8 ) ; VAR_675 |= ( * ( VAR_676 + 1 ) ) ; METHOD_98 ( VAR_677 , ( TYPE_101 ) VAR_678 , VAR_679 ) ; VAR_680 += 8 ; VAR_681 += METHOD_99 ( VAR_682 ) ; } if ( METHOD_100 ( VAR_683 , VAR_684 ) == VAR_685 ) break ; if ( VAR_686 -> VAR_687 == ( TYPE_102 * ) VAR_688 ) { VAR_689 = METHOD_101 ( VAR_690 , VAR_691 , ( TYPE_103 ) VAR_692 , VAR_693 -> VAR_694 ) ; if ( VAR_695 == VAR_696 ) break ; } } } else for ( VAR_697 = 0 ; VAR_698 < ( TYPE_104 ) VAR_699 -> VAR_700 ; VAR_701 ++ ) { VAR_702 = VAR_703 + ( VAR_704 -> VAR_705 - VAR_706 - 1 ) * 4 * VAR_707 -> VAR_708 ; VAR_709 = METHOD_102 ( VAR_710 , 0 , VAR_711 , VAR_712 -> VAR_713 , 1 , VAR_714 ) ; if ( VAR_715 == ( TYPE_105 * ) VAR_716 ) break ; for ( VAR_717 = 0 ; VAR_718 < ( TYPE_106 ) VAR_719 -> VAR_720 ; VAR_721 ++ ) { METHOD_103 ( VAR_722 , * VAR_723 , VAR_724 ) ; VAR_725 += 4 ; VAR_726 += METHOD_104 ( VAR_727 ) ; } if ( METHOD_105 ( VAR_728 , VAR_729 ) == VAR_730 ) break ; if ( VAR_731 -> VAR_732 == ( TYPE_107 * ) VAR_733 ) { VAR_734 = METHOD_106 ( VAR_735 , VAR_736 , ( TYPE_108 ) VAR_737 , VAR_738 -> VAR_739 ) ; if ( VAR_740 == VAR_741 ) break ; } } ( TYPE_109 ) METHOD_107 ( VAR_742 , VAR_743 ) ; } VAR_744 = METHOD_108 ( VAR_745 ) ; if ( METHOD_109 ( VAR_746 ) != VAR_747 ) { METHOD_110 ( VAR_748 , VAR_749 , "UnexpectedEndOfFile" , VAR_750 -> VAR_751 ) ; break ; } if ( VAR_752 -> VAR_753 != 0 ) if ( VAR_754 -> VAR_755 >= ( VAR_756 -> VAR_757 + VAR_758 -> VAR_759 - 1 ) ) break ; VAR_760 . VAR_761 = METHOD_111 ( VAR_762 ) ; if ( VAR_763 . VAR_764 == 0x01DA ) { METHOD_112 ( VAR_765 , VAR_766 , VAR_767 ) ; if ( METHOD_113 ( VAR_768 ) == ( TYPE_110 * ) VAR_769 ) { VAR_770 = METHOD_114 ( VAR_771 ) ; return ( ( TYPE_111 * ) VAR_772 ) ; } VAR_773 = METHOD_115 ( VAR_774 ) ; VAR_775 = METHOD_116 ( VAR_776 , VAR_777 , METHOD_117 ( VAR_778 ) , METHOD_118 ( VAR_779 ) ) ; if ( VAR_780 == VAR_781 ) break ; } } while ( VAR_782 . VAR_783 == 0x01DA ) ; ( TYPE_112 ) METHOD_119 ( VAR_784 ) ; return ( METHOD_120 ( VAR_785 ) ) ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  {  const TYPE_3 * VAR_2 = ( const TYPE_4 * ) VAR_3 ;  METHOD_1 ( ( VAR_4 , "%u" , METHOD_2 ( VAR_5 ) & VAR_6 ) ) ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ;  if ( ! VAR_4 || ! VAR_5 )  return 0 ; VAR_6 = METHOD_1 ( VAR_7 ) ;  if ( METHOD_2 ( VAR_8 ) !=   METHOD_3 ( VAR_9 ) )  return - VAR_10 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) {  TYPE_6 VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ;  if ( VAR_11 || ! VAR_12 ) return VAR_13 ; if ( VAR_14 == 100 || VAR_15 == 0 ) { printk ( KERN_WARNING "perf:Dynamicinterruptthrottlingdisabled,canhangyoursystem!\\n" ) ; METHOD_2 ( VAR_16 , 0 ) ; } else { METHOD_3 ( ) ; } return 0 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 * * VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; TYPE_10 VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 , VAR_18 , VAR_19 , VAR_20 ; TYPE_14 VAR_21 ; TYPE_15 * VAR_22 = 00 ; TYPE_16 * VAR_23 = 00 ; const TYPE_17 * VAR_24 = 00 ; TYPE_18 * VAR_25 = 00 ; TYPE_19 * VAR_26 = 00 ; TYPE_20 * VAR_27 = 00 ; TYPE_21 * VAR_28 = 00 ; METHOD_1 ( VAR_29 != 00 ) ; METHOD_2 ( VAR_30 != 00 ) ; METHOD_3 ( VAR_31 < VAR_32 -> VAR_33 * VAR_34 -> VAR_35 ) ; VAR_36 = & VAR_37 -> VAR_38 [ VAR_39 ] ; VAR_40 = VAR_41 -> VAR_42 + 1 ; VAR_43 = 4 * VAR_44 ; VAR_45 = ( TYPE_22 * ) METHOD_4 ( VAR_46 * VAR_47 -> VAR_48 * sizeof ( TYPE_23 ) ) ; if ( ! VAR_49 ) { return 00 ; } VAR_50 = ( TYPE_24 * * ) METHOD_5 ( VAR_51 -> VAR_52 * sizeof ( TYPE_25 * ) ) ; if ( ! VAR_53 ) { METHOD_6 ( VAR_54 ) ; return 00 ; } VAR_55 = METHOD_7 ( VAR_56 , VAR_57 , VAR_58 ) ; if ( ! VAR_59 ) { METHOD_8 ( VAR_60 ) ; METHOD_9 ( VAR_61 ) ; return 00 ; } VAR_62 = VAR_63 ; for ( VAR_64 = 0 ; VAR_65 < VAR_66 -> VAR_67 ; ++ VAR_68 ) { VAR_69 [ VAR_70 ] = VAR_71 ; VAR_72 += VAR_73 ; } METHOD_10 ( VAR_74 , VAR_75 , VAR_76 , & VAR_77 , & VAR_78 , & VAR_79 , & VAR_80 , & VAR_81 , & VAR_82 , & VAR_83 , & VAR_84 , VAR_85 ) ; VAR_86 = 1 ; VAR_87 = VAR_88 * VAR_89 ; VAR_90 = VAR_91 -> VAR_92 * VAR_93 ; VAR_94 = VAR_95 * VAR_96 ; VAR_97 = VAR_98 ;  VAR_99 -> VAR_100 = ( TYPE_26 * ) METHOD_11 ( ( VAR_101 -> VAR_102 + 1 ) * VAR_103 , sizeof ( TYPE_27 ) ) ;   if  ( ! VAR_104 -> VAR_105 ) { METHOD_12 ( VAR_106 ) ; METHOD_13 ( VAR_107 ) ; METHOD_14 ( VAR_108 , VAR_109 ) ; return 00 ; } VAR_110 = VAR_111 -> VAR_112 ; VAR_113 = VAR_114 -> VAR_115 ; VAR_116 = VAR_117 -> VAR_118 ; VAR_119 -> VAR_120 = VAR_121 ; VAR_122 -> VAR_123 = VAR_124 ; VAR_125 -> VAR_126 = VAR_127 ; VAR_128 -> VAR_129 = VAR_130 ; VAR_131 -> VAR_132 = VAR_133 ; VAR_134 -> VAR_135 = VAR_136 ; VAR_137 -> VAR_138 = VAR_139 ; VAR_140 -> VAR_141 = VAR_142 ; for ( VAR_143 = 0 ; VAR_144 < VAR_145 -> VAR_146 ; ++ VAR_147 ) { TYPE_28 * VAR_148 = VAR_149 -> VAR_150 ; VAR_151 = VAR_152 [ VAR_153 ] ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 -> VAR_159 = VAR_160 -> VAR_161 ; for ( VAR_162 = 0 ; VAR_163 < VAR_164 -> VAR_165 ; VAR_166 ++ ) { VAR_167 -> VAR_168 = * ( VAR_169 ++ ) ; VAR_170 -> VAR_171 = * ( VAR_172 ++ ) ; VAR_173 -> VAR_174 = * ( VAR_175 ++ ) ; VAR_176 -> VAR_177 = * ( VAR_178 ++ ) ; ++ VAR_179 ; } ++ VAR_180 ; ++ VAR_181 ; ++ VAR_182 ; } ++ VAR_183 ; for ( VAR_184 = 1 ; VAR_185 < VAR_186 ; ++ VAR_187 ) { VAR_188 = VAR_189 -> VAR_190 ; VAR_191 = VAR_192 -> VAR_193 ; VAR_194 = VAR_195 -> VAR_196 ; VAR_197 -> VAR_198 = VAR_199 ; VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 ; VAR_206 -> VAR_207 = VAR_208 ; VAR_209 -> VAR_210 = VAR_211 ; VAR_212 -> VAR_213 = VAR_214 ; VAR_215 -> VAR_216 = VAR_217 ; VAR_218 -> VAR_219 = VAR_220 ; for ( VAR_221 = 0 ; VAR_222 < VAR_223 -> VAR_224 ; ++ VAR_225 ) { TYPE_29 * VAR_226 = VAR_227 -> VAR_228 ; VAR_229 = VAR_230 [ VAR_231 ] ; VAR_232 -> VAR_233 = VAR_234 -> VAR_235 ; VAR_236 -> VAR_237 = VAR_238 -> VAR_239 ; for ( VAR_240 = 0 ; VAR_241 < VAR_242 -> VAR_243 ; VAR_244 ++ ) { VAR_245 -> VAR_246 = * ( VAR_247 ++ ) ; VAR_248 -> VAR_249 = * ( VAR_250 ++ ) ; VAR_251 -> VAR_252 = * ( VAR_253 ++ ) ; VAR_254 -> VAR_255 = * ( VAR_256 ++ ) ; ++ VAR_257 ; } ++ VAR_258 ; ++ VAR_259 ; ++ VAR_260 ; } VAR_261 -> VAR_262 = ( VAR_263 - 1 ) -> VAR_264 ; ++ VAR_265 ; } METHOD_15 ( VAR_266 ) ; VAR_267 = 00 ; METHOD_16 ( VAR_268 ) ; VAR_269 = 00 ; if ( VAR_270 -> VAR_271 ) { METHOD_17 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 ) ; } else { METHOD_18 ( VAR_276 , VAR_277 , VAR_278 , VAR_279 ) ; } return VAR_280 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( const TYPE_0 * VAR_0 ) {  return METHOD_1 ( METHOD_2 ( VAR_1 ) , "%s" ,  VAR_2 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  TYPE_1 VAR_1 = 0 ;  TYPE_2 VAR_2 , VAR_3 ; METHOD_1 ( & STRUCT_OR_UNION_3 -> VAR_4 . VAR_5 -> VAR_6 . VAR_7 ) ; VAR_8 = STRUCT_OR_UNION_4 -> VAR_9 . VAR_10 -> VAR_11 . VAR_12 & VAR_13 ; VAR_14 = VAR_15 -> VAR_16 & VAR_17 ; if ( ! VAR_18 && VAR_19 ) VAR_20 = 1 ; METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_21 . VAR_22 -> VAR_23 . VAR_24 , & VAR_25 -> VAR_26 , sizeof ( STRUCT_OR_UNION_6 -> VAR_27 . VAR_28 -> VAR_29 . VAR_30 ) ) ; STRUCT_OR_UNION_7 -> VAR_31 . VAR_32 -> VAR_33 . VAR_34 = VAR_35 -> VAR_36 ;  METHOD_3 ( STRUCT_OR_UNION_8 , 0 , STRUCT_OR_UNION_9 -> VAR_37 . VAR_38 -> VAR_39 . VAR_40 [ 0 ] . VAR_41 , VAR_42 ) ;  METHOD_4 ( & STRUCT_OR_UNION_10 -> VAR_43 . VAR_44 -> VAR_45 . VAR_46 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 * * VAR_3 ) { TYPE_5 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_6 * VAR_7 = & VAR_8 -> VAR_9 . VAR_10 ; TYPE_7 TYPE_8 ;  METHOD_1 ( & VAR_11 -> VAR_12 , 0 , sizeof ( VAR_13 -> VAR_14 ) ) ;  METHOD_2 ( VAR_15 -> VAR_16 , 0 , sizeof ( VAR_17 -> VAR_18 ) ) ;  for ( TYPE_9 = VAR_19 -> VAR_20 ; TYPE_10 < VAR_21 -> VAR_22 ;  TYPE_11 += VAR_23 ) {  TYPE_12 VAR_24 = 0 ;  TYPE_13 VAR_25 = 0 ; const TYPE_14 VAR_26 = VAR_27 -> VAR_28 * VAR_29 + TYPE_15 ;  TYPE_16 * * VAR_30 = VAR_31 -> VAR_32 + VAR_33 ;   TYPE_17 * * VAR_34 = VAR_35 -> VAR_36 + VAR_37 ;   TYPE_18 VAR_38 ;  VAR_39 -> VAR_40 . VAR_41 = VAR_42 ;  METHOD_3 ( VAR_43 -> VAR_44 . VAR_45 ) ;   switch ( VAR_46 -> VAR_47 . VAR_48 ) {  case VAR_49 :  METHOD_4 ( VAR_50 , VAR_51 , VAR_52 , TYPE_19 ) ;   METHOD_5 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 , VAR_57 , TYPE_20 , VAR_58 ,   1 , & VAR_59 , & VAR_60 ) ;  break ; case VAR_61 :  METHOD_6 ( VAR_62 , VAR_63 , VAR_64 , TYPE_21 , VAR_65 ) ;   METHOD_7 ( VAR_66 , VAR_67 , VAR_68 , VAR_69 , TYPE_22 ) ;   METHOD_8 ( VAR_70 , VAR_71 , VAR_72 , VAR_73 , VAR_74 , TYPE_23 , VAR_75 ,   1 , & VAR_76 , & VAR_77 ) ;  break ;  case VAR_78 :  case VAR_79 :  VAR_80 = VAR_81 -> VAR_82 . VAR_83 == VAR_84 ?  VAR_85 -> VAR_86 . VAR_87 : METHOD_9 ( VAR_88 , VAR_89 , TYPE_24 ) ;  METHOD_10 ( VAR_90 , VAR_91 , VAR_92 , VAR_93 , TYPE_25 , VAR_94 ) ;   METHOD_11 ( VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 , TYPE_26 , VAR_100 ,   1 , & VAR_101 , & VAR_102 ) ;  break ; case VAR_103 :  if ( VAR_104 -> VAR_105 . VAR_106 || METHOD_12 ( VAR_107 , VAR_108 ) ) {   METHOD_13 ( VAR_109 , VAR_110 , VAR_111 , VAR_112 , TYPE_27 , VAR_113 ,   & VAR_114 , & VAR_115 , 1 , VAR_116 ) ;  } else {  METHOD_14 ( VAR_117 , VAR_118 , VAR_119 ) ;   METHOD_15 ( VAR_120 , VAR_121 , VAR_122 , VAR_123 , VAR_124 , TYPE_28 ,   VAR_125 , 1 , & VAR_126 , & VAR_127 ) ;  } break ; default : METHOD_16 ( 0 ) ;  }  } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 , * VAR_5 ; TYPE_3 VAR_6 = 0 , VAR_7 = 0 , VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ; do { if ( ! VAR_11 -> VAR_12 ) { METHOD_2 ( VAR_13 , VAR_14 , 0 ) ; if ( ! VAR_15 ) VAR_16 = - VAR_17 ; break ; } if ( VAR_18 >= VAR_19 -> VAR_20 || VAR_21 -> VAR_22 >= VAR_23 -> VAR_24 ) break ; VAR_25 = VAR_26 -> VAR_27 + ( ( VAR_28 -> VAR_29 + VAR_30 ) & ( VAR_31 -> VAR_32 - 1 ) ) ; VAR_33 = ( VAR_34 -> VAR_35 + VAR_36 -> VAR_37 ) & ( VAR_38 -> VAR_39 - 1 ) ;  METHOD_3 ( VAR_40 , VAR_41 ) ;  VAR_42 = VAR_43 -> VAR_44 + VAR_45 ; * VAR_46 = * VAR_47 ; VAR_48 -> VAR_49 &= ~ VAR_50 ; if ( VAR_51 -> VAR_52 > VAR_53 ) VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 ++ ; VAR_59 += VAR_60 -> VAR_61 ; VAR_62 -= VAR_63 -> VAR_64 ; VAR_65 ++ ; } while ( VAR_66 ) ; if ( ! VAR_67 && VAR_68 -> VAR_69 && ( VAR_70 & VAR_71 ) ) VAR_72 = - VAR_73 ; METHOD_4 ( VAR_74 ) ; METHOD_5 ( VAR_75 ) ; if ( VAR_76 > 0 ) METHOD_6 ( VAR_77 ) ; return VAR_78 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 VAR_6 , * VAR_7 ; const TYPE_3 * VAR_8 ; TYPE_4 VAR_9 ;  VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , sizeof ( VAR_13 ) , & VAR_14 ) ;  METHOD_3 ( VAR_15 == VAR_16 ) ; VAR_17 = VAR_18 [ VAR_19 ] [ VAR_20 -> VAR_21 ] [ VAR_22 ] ; switch ( VAR_23 ) { default : VAR_24 = METHOD_4 ( STRUCT_OR_UNION_6 ) ; if ( VAR_25 -> VAR_26 == 0 ) { VAR_27 = "nf_ct_dccp:notpickingupexistingconnection" ; goto VAR_28 ; } case VAR_29 : break ; case VAR_30 : VAR_31 = "nf_ct_dccp:invalidstatetransition" ; goto VAR_32 ; } VAR_33 -> VAR_34 . VAR_35 . VAR_36 [ VAR_37 ] = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 . VAR_42 [ VAR_43 ] = VAR_44 ; VAR_45 -> VAR_46 . VAR_47 . VAR_48 = VAR_49 ; VAR_50 -> VAR_51 . VAR_52 . VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 . VAR_58 = VAR_59 ; VAR_60 -> VAR_61 . VAR_62 . VAR_63 = 0 ; return VAR_64 ; VAR_65 : if ( METHOD_5 ( STRUCT_OR_UNION_7 , VAR_66 ) ) METHOD_6 ( STRUCT_OR_UNION_8 , METHOD_7 ( VAR_67 ) , 0 , VAR_68 , VAR_69 , VAR_70 , VAR_71 , "%s" , VAR_72 ) ; return VAR_73 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 * VAR_2 = VAR_3 ;  TYPE_4 * VAR_4 = "/etc" ;   if ( ( VAR_5 = METHOD_1 ( & VAR_6 , VAR_7 ) ) == VAR_8 ) {  METHOD_2 ( ) ; METHOD_3 ( VAR_9 , METHOD_4 ( "can\'topentemporaryfile" ) ) ; } METHOD_5 ( VAR_10 , METHOD_6 ( VAR_11 ) ) ; VAR_12 = VAR_13 ; return VAR_14 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; const TYPE_6 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; TYPE_9 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_10 VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_11 VAR_28 [ 3 ] ; TYPE_12 * VAR_29 ; TYPE_13 VAR_30 ; if ( VAR_31 < VAR_32 ) return VAR_33 ; METHOD_1 ( & VAR_34 , VAR_35 , VAR_36 ) ; VAR_37 = METHOD_2 ( & VAR_38 ) ; VAR_39 = METHOD_3 ( & VAR_40 ) ; if ( VAR_41 != VAR_42 ) { METHOD_4 ( VAR_43 , VAR_44 , "unsupportedversion\\n" ) ; return VAR_45 ; } if ( VAR_46 < VAR_47 || VAR_48 < VAR_49 ) { METHOD_5 ( VAR_50 , VAR_51 , "invalidheadersize\\n" ) ; return VAR_52 ; } VAR_53 = METHOD_6 ( & VAR_54 ) ; VAR_55 = METHOD_7 ( & VAR_56 ) ; VAR_57 -> VAR_58 = METHOD_8 ( & VAR_59 ) ; VAR_60 -> VAR_61 = METHOD_9 ( & VAR_62 ) ; VAR_63 = METHOD_10 ( & VAR_64 ) ; VAR_65 = METHOD_11 ( & VAR_66 ) ; VAR_67 = METHOD_12 ( & VAR_68 ) ; VAR_69 = METHOD_13 ( & VAR_70 ) ; VAR_71 = METHOD_14 ( & VAR_72 ) ; VAR_73 = METHOD_15 ( & VAR_74 ) ; VAR_75 = METHOD_16 ( & VAR_76 ) ; VAR_77 = METHOD_17 ( & VAR_78 ) ; VAR_79 [ 0 ] = METHOD_18 ( & VAR_80 ) ; VAR_81 [ 1 ] = METHOD_19 ( & VAR_82 ) ; VAR_83 [ 2 ] = METHOD_20 ( & VAR_84 ) ; METHOD_21 ( & VAR_85 , 8 ) ; VAR_86 = METHOD_22 ( & VAR_87 ) ; METHOD_23 ( & VAR_88 , VAR_89 - ( VAR_90 - 20 ) ) ; METHOD_24 ( VAR_91 , VAR_92 , "pixformat%" VAR_93 ",pixdepth%" VAR_94 ",bunit%" VAR_95 ",bitorder%" VAR_96 ",bpad%" VAR_97 "\\n" , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; METHOD_25 ( VAR_103 , VAR_104 , "vclass%" VAR_105 ",ncolors%" VAR_106 ",bpp%" VAR_107 ",be%" VAR_108 ",lsize%" VAR_109 ",xoffset%" VAR_110 "\\n" , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; METHOD_26 ( VAR_117 , VAR_118 , "red%0" PRIx32 ",green%0" PRIx32 ",blue%0" PRIx32 "\\n" , VAR_119 [ 0 ] , VAR_120 [ 1 ] , VAR_121 [ 2 ] ) ; if ( VAR_122 > VAR_123 ) { METHOD_27 ( VAR_124 , VAR_125 , "invalidpixmapformat\\n" ) ; return VAR_126 ; } if ( VAR_127 == 0 || VAR_128 > 32 ) { METHOD_28 ( VAR_129 , VAR_130 , "invalidpixmapdepth\\n" ) ; return VAR_131 ; } if ( VAR_132 ) { avpriv_request_sample ( VAR_133 , "xoffset%" VAR_134 "" , VAR_135 ) ; return VAR_136 ; } if ( VAR_137 > 1 ) { METHOD_29 ( VAR_138 , VAR_139 , "invalidbyteorder\\n" ) ; return VAR_140 ; } if ( VAR_141 > 1 ) { METHOD_30 ( VAR_142 , VAR_143 , "invalidbitmapbitorder\\n" ) ; return VAR_144 ; } if ( VAR_145 != 8 && VAR_146 != 16 && VAR_147 != 32 ) { METHOD_31 ( VAR_148 , VAR_149 , "invalidbitmapunit\\n" ) ; return VAR_150 ; } if ( VAR_151 != 8 && VAR_152 != 16 && VAR_153 != 32 ) { METHOD_32 ( VAR_154 , VAR_155 , "invalidbitmapscan-linepad\\n" ) ; return VAR_156 ; } if ( VAR_157 == 0 || VAR_158 > 32 ) { METHOD_33 ( VAR_159 , VAR_160 , "invalidbitsperpixel\\n" ) ; return VAR_161 ; } if ( VAR_162 > 256 ) { METHOD_34 ( VAR_163 , VAR_164 , "invalidnumberofentriesincolormap\\n" ) ; return VAR_165 ; } if ( ( VAR_166 = METHOD_35 ( VAR_167 -> VAR_168 , VAR_169 -> VAR_170 , 0 , VAR_171 ) ) < 0 ) return VAR_172 ; VAR_173 = METHOD_36 ( VAR_174 -> VAR_175 * VAR_176 , VAR_177 ) / 8 ; if ( VAR_178 < VAR_179 ) { METHOD_37 ( VAR_180 , VAR_181 , "invalidbytesperscan-line\\n" ) ; return VAR_182 ; } if ( METHOD_38 ( & VAR_183 ) < VAR_184 * VAR_185 + ( TYPE_14 ) VAR_186 -> VAR_187 * VAR_188 ) { METHOD_39 ( VAR_189 , VAR_190 , "inputbuffertoosmall\\n" ) ; return VAR_191 ; } if ( VAR_192 != VAR_193 ) { avpriv_report_missing_feature ( VAR_194 , "Pixmapformat%" VAR_195 , VAR_196 ) ; return VAR_197 ; } VAR_198 -> VAR_199 = VAR_200 ; switch ( VAR_201 ) { case VAR_202 : case VAR_203 : if ( VAR_204 != 1 && VAR_205 != 8 ) return VAR_206 ;  if ( VAR_207 == 1 ) {  VAR_208 -> VAR_209 = VAR_210 ;  } else if ( VAR_211 == 8 ) {  VAR_212 -> VAR_213 = VAR_214 ; } break ; case VAR_215 : case VAR_216 : if ( VAR_217 == 8 ) VAR_218 -> VAR_219 = VAR_220 ; break ; case VAR_221 : case VAR_222 : if ( VAR_223 != 16 && VAR_224 != 24 && VAR_225 != 32 ) return VAR_226 ; if ( VAR_227 == 16 && VAR_228 == 15 ) { if ( VAR_229 [ 0 ] == 0x7C00 && VAR_230 [ 1 ] == 0x3E0 && VAR_231 [ 2 ] == 0x1F ) VAR_232 -> VAR_233 = VAR_234 ? VAR_235 : VAR_236 ; else if ( VAR_237 [ 0 ] == 0x1F && VAR_238 [ 1 ] == 0x3E0 && VAR_239 [ 2 ] == 0x7C00 ) VAR_240 -> VAR_241 = VAR_242 ? VAR_243 : VAR_244 ; } else if ( VAR_245 == 16 && VAR_246 == 16 ) { if ( VAR_247 [ 0 ] == 0xF800 && VAR_248 [ 1 ] == 0x7E0 && VAR_249 [ 2 ] == 0x1F ) VAR_250 -> VAR_251 = VAR_252 ? VAR_253 : VAR_254 ; else if ( VAR_255 [ 0 ] == 0x1F && VAR_256 [ 1 ] == 0x7E0 && VAR_257 [ 2 ] == 0xF800 ) VAR_258 -> VAR_259 = VAR_260 ? VAR_261 : VAR_262 ; } else if ( VAR_263 == 24 ) { if ( VAR_264 [ 0 ] == 0xFF0000 && VAR_265 [ 1 ] == 0xFF00 && VAR_266 [ 2 ] == 0xFF ) VAR_267 -> VAR_268 = VAR_269 ? VAR_270 : VAR_271 ; else if ( VAR_272 [ 0 ] == 0xFF && VAR_273 [ 1 ] == 0xFF00 && VAR_274 [ 2 ] == 0xFF0000 ) VAR_275 -> VAR_276 = VAR_277 ? VAR_278 : VAR_279 ; } else if ( VAR_280 == 32 ) { if ( VAR_281 [ 0 ] == 0xFF0000 && VAR_282 [ 1 ] == 0xFF00 && VAR_283 [ 2 ] == 0xFF ) VAR_284 -> VAR_285 = VAR_286 ? VAR_287 : VAR_288 ; else if ( VAR_289 [ 0 ] == 0xFF && VAR_290 [ 1 ] == 0xFF00 && VAR_291 [ 2 ] == 0xFF0000 ) VAR_292 -> VAR_293 = VAR_294 ? VAR_295 : VAR_296 ; } METHOD_40 ( & VAR_297 , VAR_298 * VAR_299 ) ; break ; default : METHOD_41 ( VAR_300 , VAR_301 , "invalidvisualclass\\n" ) ; return VAR_302 ; } if ( VAR_303 -> VAR_304 == VAR_305 ) { avpriv_request_sample ( VAR_306 , "Unknownfile:bpp%" VAR_307 ",pixdepth%" VAR_308 ",vclass%" VAR_309 "" , VAR_310 , VAR_311 , VAR_312 ) ; return VAR_313 ; } if ( ( VAR_314 = METHOD_42 ( VAR_315 , VAR_316 , 0 ) ) < 0 ) return VAR_317 ; VAR_318 -> VAR_319 = 1 ; VAR_320 -> VAR_321 = VAR_322 ; if ( VAR_323 -> VAR_324 == VAR_325 ) { TYPE_15 * VAR_326 = ( TYPE_16 * ) VAR_327 -> VAR_328 [ 1 ] ; TYPE_17 VAR_329 , VAR_330 , VAR_331 ; for ( VAR_332 = 0 ; VAR_333 < VAR_334 ; VAR_335 ++ ) { METHOD_43 ( & VAR_336 , 4 ) ; VAR_337 = METHOD_44 ( & VAR_338 ) ; METHOD_45 ( & VAR_339 , 1 ) ; VAR_340 = METHOD_46 ( & VAR_341 ) ; METHOD_47 ( & VAR_342 , 1 ) ; VAR_343 = METHOD_48 ( & VAR_344 ) ; METHOD_49 ( & VAR_345 , 3 ) ; VAR_346 [ VAR_347 ] = VAR_348 << 16 | VAR_349 << 8 | VAR_350 ; } } VAR_351 = VAR_352 -> VAR_353 [ 0 ] ; for ( VAR_354 = 0 ; VAR_355 < VAR_356 -> VAR_357 ; VAR_358 ++ ) { METHOD_50 ( & VAR_359 , VAR_360 , VAR_361 ) ; METHOD_51 ( & VAR_362 , VAR_363 - VAR_364 ) ; VAR_365 += VAR_366 -> VAR_367 [ 0 ] ; } * VAR_368 = 1 ; return VAR_369 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 , const TYPE_7 * VAR_6 , TYPE_8 VAR_7 , TYPE_9 * VAR_8 , TYPE_10 * VAR_9 , const TYPE_11 * VAR_10 , const TYPE_12 * * VAR_11 , TYPE_13 * * VAR_12 , const struct STRUCT_OR_UNION_0 * VAR_13 ) { TYPE_14 VAR_14 ; TYPE_15 VAR_15 = VAR_16 , VAR_17 = VAR_18 , VAR_19 = VAR_20 , VAR_21 = VAR_22 , VAR_23 = VAR_24 ; TYPE_16 VAR_25 = VAR_26 ; TYPE_17 * VAR_27 = VAR_28 , * VAR_29 = VAR_30 , * VAR_31 = VAR_32 , * VAR_33 = VAR_34 , * VAR_35 = VAR_36 ; TYPE_18 * VAR_37 = VAR_38 , * VAR_39 = VAR_40 , * VAR_41 = VAR_42 ; VAR_43 * VAR_44 , * VAR_45 ; TYPE_19 VAR_46 = VAR_47 ; TYPE_20 * VAR_48 = & VAR_49 -> VAR_50 ; TYPE_21 VAR_51 = VAR_52 ; const TYPE_22 * VAR_53 ; TYPE_23 VAR_54 ; TYPE_24 VAR_55 ;  TYPE_25 VAR_56 ;  const TYPE_26 * VAR_57 = METHOD_1 ( VAR_58 , VAR_59 -> VAR_60 . VAR_61 , 1 ) ; TYPE_27 * * VAR_62 = VAR_63 ; TYPE_28 VAR_64 = 0 ; TYPE_29 * VAR_65 = VAR_66 ; TYPE_30 VAR_67 ; VAR_68 * VAR_69 ; TYPE_31 VAR_70 ; TYPE_32 VAR_71 ; TYPE_33 VAR_72 [ 128 ] ; TYPE_34 VAR_73 = 0 ; VAR_74 * VAR_75 ; VAR_76 * VAR_77 ; TYPE_35 VAR_78 = VAR_79 ; METHOD_2 ( & VAR_80 , 0 , sizeof ( VAR_81 ) ) ; METHOD_3 ( & VAR_82 , 0 , sizeof ( VAR_83 ) ) ; METHOD_4 ( & VAR_84 ) ; METHOD_5 ( & VAR_85 , 0 , sizeof ( VAR_86 ) ) ; VAR_87 = VAR_88 -> VAR_89 ; VAR_90 = VAR_91 -> VAR_92 ; VAR_93 |= VAR_94 ; if ( VAR_95 -> VAR_96 . VAR_97 ) { VAR_98 * VAR_99 ; TYPE_36 * VAR_100 ; TYPE_37 VAR_101 ; VAR_102 * VAR_103 ; TYPE_38 VAR_104 = 0 ; TYPE_39 * VAR_105 = VAR_106 ; if ( VAR_107 -> VAR_108 == VAR_109 || VAR_110 -> VAR_111 -> VAR_112 == 0 ) { VAR_113 = VAR_114 ; METHOD_6 ( VAR_115 , VAR_116 , 0 , "Nosecondticketpresentinrequest" ) ; goto VAR_117 ; } VAR_118 = & VAR_119 -> VAR_120 -> VAR_121 [ 0 ] ; if ( ! METHOD_7 ( & VAR_122 -> VAR_123 ) ) { METHOD_8 ( VAR_124 , VAR_125 , 0 , "Additionalticketisnotaticket-grantingticket" ) ; VAR_126 = VAR_127 ; goto VAR_128 ; } METHOD_9 ( VAR_129 , & VAR_130 , VAR_131 -> VAR_132 , VAR_133 -> VAR_134 ) ; if ( VAR_135 -> VAR_136 . VAR_137 ) { VAR_138 = * VAR_139 -> VAR_140 . VAR_141 ; VAR_142 = & VAR_143 ; } VAR_144 = METHOD_10 ( VAR_145 , VAR_146 , VAR_147 , VAR_148 , VAR_149 , VAR_150 , & VAR_151 ) ; METHOD_11 ( VAR_152 , VAR_153 ) ; if ( VAR_154 ) { if ( VAR_155 == VAR_156 ) VAR_157 = VAR_158 ; goto VAR_159 ; } VAR_160 = METHOD_12 ( VAR_161 , & VAR_162 -> VAR_163 , VAR_164 , VAR_165 -> VAR_166 . VAR_167 , & VAR_168 ) ; if ( VAR_169 ) { METHOD_13 ( VAR_170 , VAR_171 ) ; VAR_172 = VAR_173 ; goto VAR_174 ; } VAR_175 = METHOD_14 ( VAR_176 , VAR_177 , & VAR_178 -> VAR_179 , & VAR_180 , 0 ) ; METHOD_15 ( VAR_181 , VAR_182 ) ; if ( VAR_183 ) goto VAR_184 ; VAR_185 = METHOD_16 ( VAR_186 , VAR_187 , & VAR_188 , VAR_189 ) ; if ( VAR_190 ) goto VAR_191 ; VAR_192 = & VAR_193 . VAR_194 ; VAR_195 = VAR_196 . VAR_197 ; } METHOD_17 ( VAR_198 , & VAR_199 , * VAR_200 , VAR_201 ) ; VAR_202 = METHOD_18 ( VAR_203 , VAR_204 , & VAR_205 ) ; if ( VAR_206 ) goto VAR_207 ; METHOD_19 ( VAR_208 , & VAR_209 , VAR_210 -> VAR_211 , VAR_212 -> VAR_213 ) ; VAR_214 = METHOD_20 ( VAR_215 , VAR_216 , & VAR_217 ) ; if ( VAR_218 ) goto VAR_219 ; METHOD_21 ( METHOD_22 ( VAR_220 -> VAR_221 ) , METHOD_23 ( ) , VAR_222 , sizeof ( VAR_223 ) ) ; if ( * VAR_224 ) METHOD_24 ( VAR_225 , VAR_226 , 0 , "TGS-REQ%sfrom%sfor%s[%s]" , VAR_227 , VAR_228 , VAR_229 , VAR_230 ) ; else METHOD_25 ( VAR_231 , VAR_232 , 0 , "TGS-REQ%sfrom%sfor%s" , VAR_233 , VAR_234 , VAR_235 ) ; VAR_236 : VAR_237 = METHOD_26 ( VAR_238 , VAR_239 , VAR_240 , VAR_241 | VAR_242 , VAR_243 , VAR_244 , & VAR_245 ) ; if ( VAR_246 == VAR_247 ) { METHOD_27 ( VAR_248 , VAR_249 , 5 , "target%sdoesnothavesecretsatthisKDC,needtoproxy" , VAR_250 ) ; goto VAR_251 ; } else if ( VAR_252 == VAR_253 ) { METHOD_28 ( VAR_254 ) ; VAR_255 = METHOD_29 ( VAR_256 -> VAR_257 . VAR_258 -> VAR_259 ) ; if ( VAR_260 == VAR_261 ) { VAR_262 = METHOD_30 ( VAR_263 ) ; goto VAR_264 ; } METHOD_31 ( VAR_265 , VAR_266 , 5 , "Returningareferraltorealm%sfor" "server%s." , VAR_267 , VAR_268 ) ; METHOD_32 ( VAR_269 , VAR_270 ) ; VAR_271 = VAR_272 ; VAR_273 = METHOD_33 ( VAR_274 , & VAR_275 , VAR_276 , VAR_277 , VAR_278 , VAR_279 ) ; if ( VAR_280 ) goto VAR_281 ; METHOD_34 ( VAR_282 ) ; VAR_283 = VAR_284 ; VAR_285 = METHOD_35 ( VAR_286 , VAR_287 , & VAR_288 ) ; if ( VAR_289 ) goto VAR_290 ; goto VAR_291 ; } else if ( VAR_292 ) { const TYPE_40 * VAR_293 , * VAR_294 ; TYPE_41 VAR_295 ; TYPE_42 * VAR_296 ; if ( ( VAR_297 = METHOD_36 ( & VAR_298 -> VAR_299 ) ) != VAR_300 ) { if ( VAR_301 == VAR_302 ) { VAR_303 = METHOD_37 ( VAR_304 , VAR_305 -> VAR_306 , VAR_307 , VAR_308 , VAR_309 , & VAR_310 , & VAR_311 ) ; if ( VAR_312 ) goto VAR_313 ; } VAR_314 = VAR_315 > 0 ? VAR_316 [ -- VAR_317 ] : VAR_318 ; if ( VAR_319 ) { METHOD_38 ( VAR_320 , VAR_321 , 5 , "krbtgtfrom%svia%sfor" "realm%snotfound,trying%s" , VAR_322 -> VAR_323 , VAR_324 , VAR_325 , VAR_326 ) ; METHOD_39 ( VAR_327 ) ; VAR_328 = METHOD_40 ( VAR_329 ) ; if ( VAR_330 == VAR_331 ) { VAR_332 = METHOD_41 ( VAR_333 ) ; goto VAR_334 ; } METHOD_42 ( VAR_335 , VAR_336 ) ; VAR_337 = VAR_338 ; METHOD_43 ( VAR_339 , & VAR_340 , VAR_341 , VAR_342 , VAR_343 , VAR_344 ) ; METHOD_44 ( VAR_345 ) ; VAR_346 = VAR_347 ; VAR_348 = METHOD_45 ( VAR_349 , VAR_350 , & VAR_351 ) ; if ( VAR_352 ) goto VAR_353 ; goto VAR_354 ; } } else if ( METHOD_46 ( VAR_355 , VAR_356 , & VAR_357 -> VAR_358 , VAR_359 , & VAR_360 ) ) { if ( METHOD_47 ( VAR_361 [ 0 ] , VAR_362 -> VAR_363 ) != 0 ) { METHOD_48 ( VAR_364 , VAR_365 , 5 , "Returningareferraltorealm%sfor" "server%sthatwasnotfound" , VAR_366 [ 0 ] , VAR_367 ) ; METHOD_49 ( VAR_368 , VAR_369 ) ; VAR_370 = VAR_371 ; METHOD_50 ( VAR_372 , & VAR_373 , VAR_374 , VAR_375 , VAR_376 [ 0 ] , VAR_377 ) ; METHOD_51 ( VAR_378 ) ; VAR_379 = VAR_380 ; VAR_381 = METHOD_52 ( VAR_382 , VAR_383 , & VAR_384 ) ; if ( VAR_385 ) { METHOD_53 ( VAR_386 , VAR_387 ) ; goto VAR_388 ; } METHOD_54 ( VAR_389 ) ; VAR_390 = METHOD_55 ( VAR_391 [ 0 ] ) ; METHOD_56 ( VAR_392 , VAR_393 ) ; goto VAR_394 ; } METHOD_57 ( VAR_395 , VAR_396 ) ; } VAR_397 = METHOD_58 ( VAR_398 , VAR_399 ) ; METHOD_59 ( VAR_400 , VAR_401 , 0 , "Servernotfoundindatabase:%s:%s" , VAR_402 , VAR_403 ) ; METHOD_60 ( VAR_404 , VAR_405 ) ; if ( VAR_406 == VAR_407 ) VAR_408 = VAR_409 ; goto VAR_410 ; } if ( VAR_411 -> VAR_412 . VAR_413 ) VAR_414 = VAR_415 -> VAR_416 . VAR_417 ; else VAR_418 = VAR_419 ; { TYPE_43 VAR_420 ; if ( VAR_421 -> VAR_422 . VAR_423 ) { TYPE_44 VAR_424 ; VAR_425 = & VAR_426 . VAR_427 ; for ( VAR_428 = 0 ; VAR_429 < VAR_430 -> VAR_431 . VAR_432 ; VAR_433 ++ ) if ( VAR_434 -> VAR_435 . VAR_436 [ VAR_437 ] == VAR_438 . VAR_439 . VAR_440 ) break ; if ( VAR_441 == VAR_442 -> VAR_443 . VAR_444 ) { METHOD_61 ( VAR_445 , VAR_446 , 0 , "Additiontickethavenotmatchingetypes" ) ; METHOD_62 ( VAR_447 ) ; VAR_448 = VAR_449 ; goto VAR_450 ; } VAR_451 = VAR_452 -> VAR_453 . VAR_454 [ VAR_455 ] ; VAR_456 = 0 ; } else { VAR_457 * VAR_458 ; VAR_459 = METHOD_63 ( VAR_460 , METHOD_64 ( VAR_461 , VAR_462 ) ? VAR_463 -> VAR_464 : VAR_465 -> VAR_466 , VAR_467 , VAR_468 , VAR_469 -> VAR_470 . VAR_471 , VAR_472 -> VAR_473 . VAR_474 , & VAR_475 , VAR_476 ) ; if ( VAR_477 ) { METHOD_65 ( VAR_478 , VAR_479 , 0 , "Server(%s)hasnosupportforetypes" , VAR_480 ) ; goto VAR_481 ; } VAR_482 = METHOD_66 ( VAR_483 , VAR_484 , VAR_485 , VAR_486 , VAR_487 , & VAR_488 ) ; if ( VAR_489 ) { METHOD_67 ( VAR_490 , VAR_491 , 0 , "Server(%s)hasnosupportedetypes" , VAR_492 ) ; goto VAR_493 ; } VAR_494 = & VAR_495 -> VAR_496 ; VAR_497 = VAR_498 -> VAR_499 . VAR_500 ; } VAR_501 = METHOD_68 ( VAR_502 , VAR_503 , & VAR_504 ) ; if ( VAR_505 ) goto VAR_506 ; } VAR_507 = METHOD_69 ( VAR_508 , & VAR_509 -> VAR_510 , VAR_511 , VAR_512 , & VAR_513 ) ; if ( VAR_514 ) { METHOD_70 ( VAR_515 , VAR_516 , 0 , "FailedtofindkeyforkrbtgtPACcheck" ) ; goto VAR_517 ; } VAR_518 = METHOD_71 ( VAR_519 , & VAR_520 , VAR_521 , VAR_522 , VAR_523 , VAR_524 ) ; if ( VAR_525 ) { METHOD_72 ( VAR_526 , VAR_527 , 0 , "Failedtomakekrbtgtprincipalnameobjectfor" "authz-datasignatures" ) ; goto VAR_528 ; } VAR_529 = METHOD_73 ( VAR_530 , VAR_531 , & VAR_532 ) ; if ( VAR_533 ) { METHOD_74 ( VAR_534 , VAR_535 , 0 , "Failedtomakekrbtgtprincipalnameobjectfor" "authz-datasignatures" ) ; goto VAR_536 ; } VAR_537 = METHOD_75 ( VAR_538 , VAR_539 , VAR_540 , VAR_541 , VAR_542 , VAR_543 , & VAR_544 ) ; if ( VAR_545 ) { TYPE_45 * VAR_546 = VAR_547 ; VAR_548 = METHOD_76 ( VAR_549 , VAR_550 -> VAR_551 . VAR_552 , & VAR_553 ) ; METHOD_77 ( VAR_554 , VAR_555 , 0 , "Nosuchprincipal%s(neededforauthz-datasignaturekeys)" "whileprocessingTGS-REQforservice%swithkrbtg%s" , VAR_556 , VAR_557 , ( VAR_558 == 0 ) ? VAR_559 : "<unknown>" ) ; METHOD_78 ( VAR_560 ) ; VAR_561 = VAR_562 ; goto VAR_563 ; } if ( METHOD_79 ( METHOD_80 ( VAR_564 , VAR_565 -> VAR_566 . VAR_567 ) , METHOD_81 ( VAR_568 , VAR_569 -> VAR_570 . VAR_571 ) ) != 0 ) { TYPE_46 * VAR_572 ; VAR_573 = METHOD_82 ( VAR_574 , VAR_575 -> VAR_576 . VAR_577 , & VAR_578 ) ; METHOD_83 ( VAR_579 , VAR_580 , 0 , "Requestwithwrongkrbtgt:%s" , ( VAR_581 == 0 ) ? VAR_582 : "<unknown>" ) ; if ( VAR_583 == 0 ) METHOD_84 ( VAR_584 ) ; VAR_585 = VAR_586 ; goto VAR_587 ; } VAR_588 = METHOD_85 ( VAR_589 , VAR_590 , VAR_591 , VAR_592 , VAR_593 , & VAR_594 ) ; if ( VAR_595 ) { METHOD_86 ( VAR_596 , VAR_597 , 0 , "FailedtofindkeyforkrbtgtPACsignature" ) ; goto VAR_598 ; } VAR_599 = METHOD_87 ( VAR_600 , & VAR_601 -> VAR_602 , VAR_603 , VAR_604 -> VAR_605 . VAR_606 , & VAR_607 ) ; if ( VAR_608 ) { METHOD_88 ( VAR_609 , VAR_610 , 0 , "FailedtofindkeyforkrbtgtPACsignature" ) ; goto VAR_611 ; } VAR_612 = METHOD_89 ( VAR_613 , VAR_614 , VAR_615 , VAR_616 | VAR_617 , VAR_618 , & VAR_619 , & VAR_620 ) ; if ( VAR_621 == VAR_622 ) { } else if ( VAR_623 ) { const TYPE_47 * VAR_624 , * VAR_625 ; VAR_626 = METHOD_90 ( VAR_627 , VAR_628 -> VAR_629 . VAR_630 ) ; if ( METHOD_91 ( METHOD_92 ( VAR_631 , VAR_632 ) , VAR_633 ) == 0 ) { if ( VAR_634 == VAR_635 ) VAR_636 = VAR_637 ; METHOD_93 ( VAR_638 , VAR_639 , 1 , "Clientnolongerindatabase:%s" , VAR_640 ) ; goto VAR_641 ; } VAR_642 = METHOD_94 ( VAR_643 , VAR_644 ) ; METHOD_95 ( VAR_645 , VAR_646 , 1 , "Clientnotfoundindatabase:%s" , VAR_647 ) ; METHOD_96 ( VAR_648 , VAR_649 ) ; } VAR_650 = METHOD_97 ( VAR_651 , VAR_652 , VAR_653 , VAR_654 , VAR_655 , VAR_656 , VAR_657 , & VAR_658 -> VAR_659 , VAR_660 , & VAR_661 -> VAR_662 , VAR_663 , & VAR_664 , & VAR_665 ) ; if ( VAR_666 ) { const TYPE_48 * VAR_667 = METHOD_98 ( VAR_668 , VAR_669 ) ; METHOD_99 ( VAR_670 , VAR_671 , 0 , "VerifyPACfailedfor%s(%s)from%swith%s" , VAR_672 , VAR_673 , VAR_674 , VAR_675 ) ; METHOD_100 ( VAR_676 , VAR_677 ) ; goto VAR_678 ; } VAR_679 = METHOD_101 ( VAR_680 , VAR_681 , VAR_682 , VAR_683 , VAR_684 , & VAR_685 , & VAR_686 ) ; if ( VAR_687 ) { const TYPE_49 * VAR_688 = METHOD_102 ( VAR_689 , VAR_690 ) ; METHOD_103 ( VAR_691 , VAR_692 , 0 , "KRB5SignedPathcheckfailedfor%s(%s)from%swith%s" , VAR_693 , VAR_694 , VAR_695 , VAR_696 ) ; METHOD_104 ( VAR_697 , VAR_698 ) ; goto VAR_699 ; } VAR_700 = VAR_701 ; VAR_702 = VAR_703 ; if ( VAR_704 ) { const TYPE_50 * VAR_705 ; TYPE_51 VAR_706 = 0 ; VAR_707 = METHOD_105 ( VAR_708 , & VAR_709 , VAR_710 ) ; if ( VAR_711 ) { TYPE_52 VAR_712 ; TYPE_53 VAR_713 ; TYPE_54 VAR_714 ; const TYPE_55 * VAR_715 ; VAR_716 = METHOD_106 ( VAR_717 -> VAR_718 . VAR_719 , VAR_720 -> VAR_721 . VAR_722 , & VAR_723 , VAR_724 ) ; if ( VAR_725 ) { METHOD_107 ( VAR_726 , VAR_727 , 0 , "FailedtodecodePA-S4U2Self" ) ; goto VAR_728 ; } VAR_729 = METHOD_108 ( VAR_730 , & VAR_731 , & VAR_732 ) ; if ( VAR_733 ) goto VAR_734 ; VAR_735 = METHOD_109 ( VAR_736 , & VAR_737 -> VAR_738 , 0 , & VAR_739 ) ; if ( VAR_740 ) { const TYPE_56 * VAR_741 = METHOD_110 ( VAR_742 , VAR_743 ) ; METHOD_111 ( & VAR_744 ) ; METHOD_112 ( & VAR_745 ) ; METHOD_113 ( VAR_746 , VAR_747 , 0 , "krb5_crypto_initfailed:%s" , VAR_748 ) ; METHOD_114 ( VAR_749 , VAR_750 ) ; goto VAR_751 ; } VAR_752 = METHOD_115 ( VAR_753 , VAR_754 , VAR_755 , VAR_756 . VAR_757 , VAR_758 . VAR_759 , & VAR_760 . VAR_761 ) ; METHOD_116 ( & VAR_762 ) ; METHOD_117 ( VAR_763 , VAR_764 ) ; if ( VAR_765 ) { const TYPE_57 * VAR_766 = METHOD_118 ( VAR_767 , VAR_768 ) ; METHOD_119 ( & VAR_769 ) ; METHOD_120 ( VAR_770 , VAR_771 , 0 , "krb5_verify_checksumfailedforS4U2Self:%s" , VAR_772 ) ; METHOD_121 ( VAR_773 , VAR_774 ) ; goto VAR_775 ; } VAR_776 = METHOD_122 ( VAR_777 , & VAR_778 , VAR_779 . VAR_780 , VAR_781 . VAR_782 ) ; METHOD_123 ( & VAR_783 ) ; if ( VAR_784 ) goto VAR_785 ; VAR_786 = METHOD_124 ( VAR_787 , VAR_788 , & VAR_789 ) ; if ( VAR_790 ) goto VAR_791 ; if ( VAR_792 . VAR_793 ) { TYPE_58 VAR_794 = VAR_795 ; METHOD_125 ( & VAR_796 ) ; VAR_797 = METHOD_126 ( VAR_798 , VAR_799 , VAR_800 , VAR_801 | VAR_802 , VAR_803 , & VAR_804 , & VAR_805 ) ; if ( VAR_806 ) { const TYPE_59 * VAR_807 ; if ( VAR_808 == VAR_809 ) VAR_810 = VAR_811 ; VAR_812 = METHOD_127 ( VAR_813 , VAR_814 ) ; METHOD_128 ( VAR_815 , VAR_816 , 1 , "S2U4Selfprincipaltoimpersonate%snotfoundindatabase:%s" , VAR_817 , VAR_818 ) ; METHOD_129 ( VAR_819 , VAR_820 ) ; goto VAR_821 ; } VAR_822 = METHOD_130 ( VAR_823 , VAR_824 , & VAR_825 ) ; if ( VAR_826 ) { METHOD_131 ( VAR_827 , VAR_828 , 0 , "PACgenerationfailedfor--%s" , VAR_829 ) ; goto VAR_830 ; } if ( VAR_831 != VAR_832 ) { VAR_833 = METHOD_132 ( VAR_834 , VAR_835 , VAR_836 -> VAR_837 . VAR_838 , VAR_839 -> VAR_840 . VAR_841 , VAR_842 , & VAR_843 -> VAR_844 , & VAR_845 ) ; METHOD_133 ( VAR_846 , VAR_847 ) ; if ( VAR_848 ) { METHOD_134 ( VAR_849 , VAR_850 , 0 , "PACsigningfailedfor--%s" , VAR_851 ) ; goto VAR_852 ; } } } VAR_853 = METHOD_135 ( VAR_854 , VAR_855 , VAR_856 , VAR_857 , VAR_858 ) ; if ( VAR_859 ) { METHOD_136 ( VAR_860 , VAR_861 , 0 , "S4U2Self:%sisnotallowed" "toimpersonatetoservice" "(triedforuser%stoservice%s)" , VAR_862 , VAR_863 , VAR_864 ) ; goto VAR_865 ; } if ( VAR_866 -> VAR_867 . VAR_868 . VAR_869 ) { VAR_870 = "[forwardable]" ; } else { VAR_871 -> VAR_872 . VAR_873 = 0 ; VAR_874 = "" ; } METHOD_137 ( VAR_875 , VAR_876 , 0 , "s4u2self%simpersonating%sto" "service%s%s" , VAR_877 , VAR_878 , VAR_879 , VAR_880 ) ; } } if ( VAR_881 != VAR_882 && VAR_883 -> VAR_884 != VAR_885 && VAR_886 -> VAR_887 -> VAR_888 != 0 && VAR_889 -> VAR_890 . VAR_891 == 0 ) { TYPE_60 VAR_892 = 0 ; VAR_893 * VAR_894 ; VAR_895 * VAR_896 ; if ( ! VAR_897 ) { VAR_898 = VAR_899 ; METHOD_138 ( VAR_900 , VAR_901 , 0 , "Constraineddelegationdoneonserviceticket%s/%s" , VAR_902 , VAR_903 ) ; goto VAR_904 ; } VAR_905 = & VAR_906 -> VAR_907 -> VAR_908 [ 0 ] ; VAR_909 = METHOD_139 ( VAR_910 , & VAR_911 -> VAR_912 , METHOD_140 ( VAR_913 , & VAR_914 -> VAR_915 , VAR_916 -> VAR_917 . VAR_918 ? * VAR_919 -> VAR_920 . VAR_921 : 0 ) , VAR_922 -> VAR_923 . VAR_924 , & VAR_925 ) ; if ( VAR_926 ) { VAR_927 = VAR_928 ; goto VAR_929 ; } VAR_930 = METHOD_141 ( VAR_931 , VAR_932 , & VAR_933 -> VAR_934 , & VAR_935 , 0 ) ; if ( VAR_936 ) { METHOD_142 ( VAR_937 , VAR_938 , 0 , "failedtodecryptticketfor" "constraineddelegationfrom%sto%s" , VAR_939 , VAR_940 ) ; goto VAR_941 ; } VAR_942 = METHOD_143 ( VAR_943 , & VAR_944 , VAR_945 . VAR_946 , VAR_947 . VAR_948 ) ; if ( VAR_949 ) goto VAR_950 ; VAR_951 = METHOD_144 ( VAR_952 , VAR_953 , & VAR_954 ) ; if ( VAR_955 ) goto VAR_956 ; VAR_957 = METHOD_145 ( VAR_958 , & VAR_959 , VAR_960 -> VAR_961 , VAR_962 -> VAR_963 ) ; if ( VAR_964 ) goto VAR_965 ; VAR_966 = METHOD_146 ( VAR_967 , VAR_968 , & VAR_969 ) ; if ( VAR_970 ) goto VAR_971 ; if ( VAR_972 . VAR_973 . VAR_974 == 0 ) { METHOD_147 ( VAR_975 , VAR_976 , 0 , "Missingforwardableflagonticketfor" "constraineddelegationfrom%s(%s)as%sto%s" , VAR_977 , VAR_978 , VAR_979 , VAR_980 ) ; VAR_981 = VAR_982 ; goto VAR_983 ; } VAR_984 = METHOD_148 ( VAR_985 , VAR_986 , VAR_987 , VAR_988 , VAR_989 , VAR_990 ) ; if ( VAR_991 ) { METHOD_149 ( VAR_992 , VAR_993 , 0 , "constraineddelegationfrom%s(%s)as%sto%snotallowed" , VAR_994 , VAR_995 , VAR_996 , VAR_997 ) ; goto VAR_998 ; } VAR_999 = METHOD_150 ( VAR_1000 , VAR_1001 , & VAR_1002 , VAR_1003 ) ; if ( VAR_1004 ) { goto VAR_1005 ; } METHOD_151 ( & VAR_1006 ) ; VAR_1007 = METHOD_152 ( VAR_1008 , VAR_1009 , VAR_1010 , VAR_1011 , VAR_1012 , VAR_1013 , VAR_1014 , & VAR_1015 -> VAR_1016 , VAR_1017 , & VAR_1018 -> VAR_1019 , & VAR_1020 , & VAR_1021 , & VAR_1022 ) ; if ( VAR_1023 ) { const TYPE_61 * VAR_1024 = METHOD_153 ( VAR_1025 , VAR_1026 ) ; METHOD_154 ( VAR_1027 , VAR_1028 , 0 , "VerifydelegatedPACfailedto%sforclient" "%s(%s)as%sfrom%swith%s" , VAR_1029 , VAR_1030 , VAR_1031 , VAR_1032 , VAR_1033 , VAR_1034 ) ; METHOD_155 ( VAR_1035 , VAR_1036 ) ; goto VAR_1037 ; } VAR_1038 = METHOD_156 ( VAR_1039 , VAR_1040 , VAR_1041 , VAR_1042 , & VAR_1043 , VAR_1044 , & VAR_1045 ) ; if ( VAR_1046 ) { const TYPE_62 * VAR_1047 = METHOD_157 ( VAR_1048 , VAR_1049 ) ; METHOD_158 ( VAR_1050 , VAR_1051 , 0 , "KRB5SignedPathcheckfromservice%sfailed" "fordelegationto%sforclient%s(%s)" "from%sfailedwith%s" , VAR_1052 , VAR_1053 , VAR_1054 , VAR_1055 , VAR_1056 , VAR_1057 ) ; METHOD_159 ( VAR_1058 , VAR_1059 ) ; goto VAR_1060 ; } if ( ! VAR_1061 ) { VAR_1062 = VAR_1063 ; METHOD_160 ( VAR_1064 , VAR_1065 , 0 , "TicketnotsignedwithPACnorSignedPathservice%sfailed" "fordelegationto%sforclient%s(%s)" "from%s" , VAR_1066 , VAR_1067 , VAR_1068 , VAR_1069 , VAR_1070 ) ; goto VAR_1071 ; } METHOD_161 ( VAR_1072 , VAR_1073 , 0 , "constraineddelegationfor%s" "from%s(%s)to%s" , VAR_1074 , VAR_1075 , VAR_1076 , VAR_1077 ) ; } VAR_1078 = METHOD_162 ( VAR_1079 , VAR_1080 , VAR_1081 , VAR_1082 , VAR_1083 , VAR_1084 , VAR_1085 ) ; if ( VAR_1086 ) goto VAR_1087 ; if ( ( VAR_1088 -> VAR_1089 . VAR_1090 || VAR_1091 -> VAR_1092 . VAR_1093 ) && ! METHOD_163 ( VAR_1094 , VAR_1095 -> VAR_1096 . VAR_1097 , VAR_1098 -> VAR_1099 . VAR_1100 ) ) { METHOD_164 ( VAR_1101 , VAR_1102 , 0 , "Inconsistentrequest." ) ; VAR_1103 = VAR_1104 ; goto VAR_1105 ; } if ( ! METHOD_165 ( VAR_1106 , VAR_1107 , VAR_1108 -> VAR_1109 , VAR_1110 ) ) { VAR_1111 = VAR_1112 ; METHOD_166 ( VAR_1113 , VAR_1114 , 0 , "Requestfromwrongaddress" ) ; goto VAR_1115 ; } if ( VAR_1116 ) { TYPE_63 VAR_1117 ; TYPE_64 VAR_1118 ; METHOD_167 ( VAR_1119 , VAR_1120 , 0 , "Addingserverreferralto%s" , VAR_1121 ) ; VAR_1122 = METHOD_168 ( VAR_1123 , & VAR_1124 , 0 , & VAR_1125 ) ; if ( VAR_1126 ) goto VAR_1127 ; VAR_1128 = METHOD_169 ( VAR_1129 , VAR_1130 , VAR_1131 , VAR_1132 , VAR_1133 , VAR_1134 , & VAR_1135 . VAR_1136 ) ; METHOD_170 ( VAR_1137 , VAR_1138 ) ; if ( VAR_1139 ) { METHOD_171 ( VAR_1140 , VAR_1141 , 0 , "Failedbuildingserverreferral" ) ; goto VAR_1142 ; } VAR_1143 . VAR_1144 = VAR_1145 ; VAR_1146 = METHOD_172 ( & VAR_1147 , & VAR_1148 ) ; METHOD_173 ( & VAR_1149 . VAR_1150 ) ; if ( VAR_1151 ) { METHOD_174 ( VAR_1152 , VAR_1153 , 0 , "AddserverreferralMETHOD-DATAfailed" ) ; goto VAR_1154 ; } } VAR_1155 = METHOD_175 ( VAR_1156 , VAR_1157 , VAR_1158 , VAR_1159 , VAR_1160 , VAR_1161 , VAR_1162 , VAR_1163 , & VAR_1164 , VAR_1165 , * VAR_1166 , VAR_1167 , VAR_1168 , VAR_1169 , VAR_1170 , VAR_1171 ,  VAR_1172 ,  VAR_1173 -> VAR_1174 . VAR_1175 , VAR_1176 , & VAR_1177 , & VAR_1178 , VAR_1179 , VAR_1180 ) ; VAR_1181 : if ( VAR_1182 != VAR_1183 ) METHOD_176 ( VAR_1184 ) ; METHOD_177 ( VAR_1185 ) ; METHOD_178 ( VAR_1186 ) ; METHOD_179 ( VAR_1187 ) ; METHOD_180 ( VAR_1188 ) ; METHOD_181 ( VAR_1189 , VAR_1190 ) ; METHOD_182 ( & VAR_1191 ) ; METHOD_183 ( VAR_1192 , & VAR_1193 ) ; if ( VAR_1194 ) METHOD_184 ( VAR_1195 , VAR_1196 ) ; if ( VAR_1197 ) METHOD_185 ( VAR_1198 , VAR_1199 ) ; if ( VAR_1200 ) METHOD_186 ( VAR_1201 , VAR_1202 ) ; if ( VAR_1203 ) METHOD_187 ( VAR_1204 , VAR_1205 ) ; if ( VAR_1206 && VAR_1207 != VAR_1208 ) METHOD_188 ( VAR_1209 , VAR_1210 ) ; METHOD_189 ( VAR_1211 , VAR_1212 ) ; METHOD_190 ( VAR_1213 , VAR_1214 ) ; METHOD_191 ( VAR_1215 , VAR_1216 ) ; METHOD_192 ( VAR_1217 , VAR_1218 ) ; METHOD_193 ( VAR_1219 ) ; METHOD_194 ( & VAR_1220 ) ; METHOD_195 ( & VAR_1221 ) ; return VAR_1222 ; }
static TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = STRUCT_OR_UNION_5 -> STRUCT_OR_UNION_6 ; METHOD_1 ( STRUCT_OR_UNION_7 -> VAR_3 , STRUCT_OR_UNION_8 ) ; METHOD_2 ( VAR_4 , VAR_5 ) ; if ( STRUCT_OR_UNION_9 -> VAR_6 != VAR_7 -> STRUCT_OR_UNION_10 . VAR_8 ) { METHOD_3 ( STRUCT_OR_UNION_11 , VAR_9 ) ; METHOD_4 ( STRUCT_OR_UNION_12 ) ; } METHOD_5 ( STRUCT_OR_UNION_13 -> VAR_10 ) ;  VAR_11 = STRUCT_OR_UNION_14 -> VAR_12 -> VAR_13 -> METHOD_6 ( STRUCT_OR_UNION_15 , VAR_14 ) ;  VAR_15 = METHOD_7 ( VAR_16 ) ; if ( ! METHOD_8 ( VAR_17 ) ) { TYPE_4 * VAR_18 = METHOD_9 ( VAR_19 ) ; VAR_20 = 0 ; if ( VAR_21 ) VAR_22 = METHOD_10 ( VAR_23 , VAR_24 ) ; else if ( VAR_25 -> VAR_26 == VAR_27 ) { VAR_28 = METHOD_11 ( & VAR_29 -> STRUCT_OR_UNION_16 , VAR_30 ) ; if ( VAR_31 ) METHOD_12 ( & VAR_32 -> STRUCT_OR_UNION_17 ) ; } if ( STRUCT_OR_UNION_18 -> VAR_33 -> VAR_34 -> METHOD_13 ) STRUCT_OR_UNION_19 -> VAR_35 -> VAR_36 -> METHOD_14 ( STRUCT_OR_UNION_20 , VAR_37 , VAR_38 ) ; } return VAR_39 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 TYPE_2 * VAR_1 ) {  struct STRUCT_OR_UNION_1 VAR_2 = {   . VAR_3 = VAR_4 -> VAR_5 -> VAR_6 ,  . VAR_7 = VAR_8 -> VAR_9 -> VAR_10 == VAR_11  } ;  if ( METHOD_1 ( VAR_12 , & VAR_13 , sizeof ( VAR_14 ) ) ) return - VAR_15 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * * VAR_0 ,   struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 )  { while ( VAR_3 & 3 )  VAR_4 -> VAR_5 [ VAR_6 ++ ] = VAR_7 ;   VAR_8 -> VAR_9 = VAR_10 ;   if ( VAR_11 && METHOD_1 ( STRUCT_OR_UNION_4 , VAR_12 , VAR_13 ) ) {  METHOD_2 ( VAR_14 ) ; return - VAR_15 ; } METHOD_3 ( * VAR_16 ) ; * VAR_17 = VAR_18 ; return 0 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { VAR_1 * VAR_2 ; struct STRUCT_OR_UNION_0 * VAR_3 ; TYPE_3 VAR_4 , VAR_5 , VAR_6 , VAR_7 ; METHOD_1 ( VAR_8 ) ; VAR_9 = VAR_10 -> VAR_11 ; VAR_12 -> VAR_13 = 0 ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , VAR_17 -> VAR_18 , VAR_19 -> VAR_20 , - 1 , & VAR_21 ) ; if ( VAR_22 ) return VAR_23 ; VAR_24 = METHOD_3 ( VAR_25 , VAR_26 ) ; if ( ( VAR_27 -> VAR_28 & VAR_29 ) && ( VAR_30 == VAR_31 ) ) { METHOD_4 ( VAR_32 -> VAR_33 , VAR_34 ) ; return VAR_35 ; } else if ( VAR_36 == VAR_37 ) { if ( VAR_38 -> VAR_39 & VAR_40 ) { METHOD_5 ( VAR_41 -> VAR_42 , VAR_43 ) ; return VAR_44 ; } METHOD_6 ( VAR_45 ) ; VAR_46 -> VAR_47 |= VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 = VAR_59 -> VAR_60 ; VAR_61 -> VAR_62 = VAR_63 -> VAR_64 ;  }  VAR_65 = METHOD_7 ( VAR_66 , VAR_67 ) ; if ( VAR_68 == VAR_69 ) { METHOD_8 ( VAR_70 -> VAR_71 , VAR_72 -> VAR_73 ) ; VAR_74 = METHOD_9 ( VAR_75 ) ; if ( ! VAR_76 ) { VAR_77 = METHOD_10 ( & VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , & VAR_82 ) ; } if ( VAR_83 ) { METHOD_11 ( VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; METHOD_12 ( VAR_88 -> VAR_89 ) ; return ( VAR_90 ) ; } if ( VAR_91 ) METHOD_13 ( VAR_92 -> VAR_93 , VAR_94 , 0 ) ; VAR_95 = METHOD_14 ( & VAR_96 -> VAR_97 , VAR_98 ) ; if ( VAR_99 ) return ( VAR_100 ) ; VAR_101 = METHOD_15 ( VAR_102 ) ; return ( VAR_103 ) ; } VAR_104 = METHOD_16 ( & VAR_105 -> VAR_106 , VAR_107 ) ; if ( VAR_108 ) return ( VAR_109 ) ; if ( VAR_110 -> VAR_111 > 0 ) { VAR_112 = METHOD_17 ( VAR_113 ) ; if ( VAR_114 ) return ( VAR_115 ) ; } if ( VAR_116 -> VAR_117 & VAR_118 ) { VAR_119 = METHOD_18 ( VAR_120 ) ; if ( VAR_121 ) return ( VAR_122 ) ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ; VAR_127 -> VAR_128 = VAR_129 -> VAR_130 ; VAR_131 -> VAR_132 = VAR_133 -> VAR_134 ; VAR_135 -> VAR_136 = VAR_137 -> VAR_138 ;  if ( VAR_139 -> VAR_140 ) {  VAR_141 = METHOD_19 ( VAR_142 ) ; if ( VAR_143 ) return ( VAR_144 ) ; } VAR_145 = METHOD_20 ( VAR_146 -> VAR_147 , VAR_148 -> VAR_149 , VAR_150 -> VAR_151 , - 1 , & VAR_152 ) ; if ( VAR_153 ) return VAR_154 ; METHOD_21 ( VAR_155 , VAR_156 ) ; if ( ( VAR_157 = METHOD_22 ( VAR_158 , VAR_159 ) ) ) { METHOD_23 ( VAR_160 -> VAR_161 , VAR_162 -> VAR_163 ) ; VAR_164 = METHOD_24 ( VAR_165 , VAR_166 , VAR_167 ) ; if ( ! VAR_168 ) { VAR_169 = METHOD_25 ( & VAR_170 -> VAR_171 , VAR_172 -> VAR_173 , & VAR_174 ) ; } if ( VAR_175 ) { METHOD_26 ( VAR_176 ) ; VAR_177 -> VAR_178 = VAR_179 ; METHOD_27 ( VAR_180 -> VAR_181 ) ; return ( VAR_182 ) ; } if ( VAR_183 ) METHOD_28 ( VAR_184 -> VAR_185 , VAR_186 , 0 ) ; } VAR_187 = METHOD_29 ( & VAR_188 -> VAR_189 , VAR_190 ) ; } else if ( VAR_191 -> VAR_192 > 0 ) { VAR_193 = METHOD_30 ( VAR_194 ) ; } return VAR_195 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_2 * VAR_4 = METHOD_1 ( VAR_5 -> VAR_6 ) ; VAR_7 -> VAR_8 -> VAR_9 = VAR_10 -> VAR_11 ; VAR_12 -> VAR_13 -> VAR_14 = VAR_15 -> VAR_16 ; VAR_17 -> VAR_18 -> VAR_19 = VAR_20 -> VAR_21 ; VAR_22 * VAR_23 ; TYPE_3 * VAR_24 = METHOD_2 ( VAR_25 -> VAR_26 -> VAR_27 ) ; while ( ( VAR_28 = METHOD_3 ( VAR_29 ) ) != VAR_30 ) { METHOD_4 ( "Header:%s:%s" , ( TYPE_4 * ) VAR_31 -> VAR_32 , ( TYPE_5 * ) VAR_33 -> VAR_34 ) ; } METHOD_5 ( VAR_35 ) ; if ( VAR_36 -> VAR_37 -> VAR_38 != VAR_39 ) goto VAR_40 ; if ( METHOD_6 ( VAR_41 -> VAR_42 , "Host" ) == VAR_43 ) goto VAR_44 ; TYPE_6 VAR_45 = VAR_46 -> VAR_47 -> VAR_48 + VAR_49 -> VAR_50 -> VAR_51 * 0.1 ; if ( VAR_52 < 1.1 ) goto VAR_53 ; const TYPE_7 * VAR_54 = METHOD_7 ( VAR_55 -> VAR_56 , "Upgrade" ) ; if ( VAR_57 == VAR_58 || METHOD_8 ( VAR_59 , "websocket" ) != 0 ) goto VAR_60 ; const TYPE_8 * VAR_61 = METHOD_9 ( VAR_62 -> VAR_63 , "Connection" ) ;  if ( VAR_64 == VAR_65 )  goto VAR_66 ; else { TYPE_9 VAR_67 = VAR_68 ; TYPE_10 VAR_69 ; TYPE_11 * VAR_70 = METHOD_10 ( VAR_71 , METHOD_11 ( VAR_72 ) , "," , 1 , & VAR_73 ) ; if ( VAR_74 == VAR_75 ) goto VAR_76 ; for ( TYPE_12 VAR_77 = 0 ; VAR_78 < VAR_79 ; VAR_80 ++ ) { TYPE_13 VAR_81 = VAR_82 [ VAR_83 ] ; METHOD_12 ( VAR_84 , "" ) ; if ( METHOD_13 ( VAR_85 , "Upgrade" ) == 0 ) { VAR_86 = VAR_87 ; break ; } } METHOD_14 ( VAR_88 , VAR_89 ) ; if ( ! VAR_90 ) goto VAR_91 ; } const TYPE_14 * VAR_92 = METHOD_15 ( VAR_93 -> VAR_94 , "Sec-WebSocket-Version" ) ; if ( VAR_95 == VAR_96 || METHOD_16 ( VAR_97 , "13" ) != 0 ) goto VAR_98 ; const TYPE_15 * VAR_99 = METHOD_17 ( VAR_100 -> VAR_101 , "Sec-WebSocket-Key" ) ; if ( VAR_102 == VAR_103 ) goto VAR_104 ; const TYPE_16 * VAR_105 = METHOD_18 ( VAR_106 -> VAR_107 , "Sec-WebSocket-Protocol" ) ; if ( VAR_108 && ! METHOD_19 ( VAR_109 , VAR_110 -> VAR_111 ) ) goto VAR_112 ; if ( METHOD_20 ( VAR_113 -> VAR_114 ) > 0 ) { const TYPE_17 * VAR_115 = METHOD_21 ( VAR_116 -> VAR_117 , "Origin" ) ; if ( VAR_118 == VAR_119 || ! METHOD_22 ( VAR_120 , VAR_121 -> VAR_122 ) ) goto VAR_123 ; } if ( VAR_124 -> VAR_125 . METHOD_23 ) { VAR_126 -> VAR_127 = VAR_128 -> VAR_129 . METHOD_24 ( VAR_130 ) ; if ( VAR_131 -> VAR_132 == VAR_133 ) goto VAR_134 ; } VAR_135 -> VAR_136 = VAR_137 ; VAR_138 -> VAR_139 = METHOD_25 ( METHOD_26 ( VAR_140 -> VAR_141 , VAR_142 -> VAR_143 ) ) ; VAR_144 -> VAR_145 = METHOD_27 ( VAR_146 -> VAR_147 -> VAR_148 ) ; if ( VAR_149 -> VAR_150 . METHOD_28 ) { VAR_151 -> VAR_152 . METHOD_29 ( VAR_153 -> VAR_154 , VAR_155 -> VAR_156 ) ; } if ( VAR_157 ) { METHOD_30 ( VAR_158 -> VAR_159 , VAR_160 -> VAR_161 , VAR_162 ) ; } else { METHOD_31 ( VAR_163 -> VAR_164 , VAR_165 , VAR_166 ) ; } return 0 ; VAR_167 : METHOD_32 ( METHOD_33 ( VAR_168 -> VAR_169 ) , VAR_170 -> VAR_171 ) ; return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned VAR_1 ) { if ( VAR_2 > 0 ) { if ( METHOD_1 ( VAR_3 , VAR_4 ) ) METHOD_2 ( 1 ) ; } TYPE_2 * VAR_5 = METHOD_3 ( VAR_6 , "basename" ) ; if ( ! VAR_7 ) VAR_8 = METHOD_4 ( VAR_9 , VAR_10 ) ; TYPE_3 * VAR_11 = METHOD_5 ( "%s/%s-%s-%u.new" , VAR_12 , VAR_13 , METHOD_6 ( VAR_14 ) , VAR_15 ) ; METHOD_7 ( VAR_16 , "basename" ) ;  struct STRUCT_OR_UNION_0 * VAR_17 = METHOD_8 ( VAR_18 , VAR_19 , VAR_20 ) ;  if ( ! VAR_21 ) { METHOD_9 ( "Errorcreatingproblemdirectory\'%s\'" , VAR_22 ) ; } METHOD_10 ( VAR_23 , VAR_24 , VAR_25 ) ; METHOD_11 ( VAR_26 , VAR_27 , VAR_28 ) ; TYPE_4 VAR_29 = METHOD_12 ( VAR_30 , VAR_31 ) ; if ( ! VAR_32 ) { TYPE_5 * VAR_33 = METHOD_13 ( VAR_34 ) ; if ( VAR_35 ) { METHOD_14 ( VAR_36 , VAR_37 , VAR_38 ) ; METHOD_15 ( VAR_39 ) ; } } TYPE_6 VAR_40 [ sizeof ( TYPE_7 ) * 3 + 2 ] ; METHOD_16 ( VAR_41 , "%lu" , ( TYPE_8 ) VAR_42 ) ; METHOD_17 ( VAR_43 , VAR_44 , VAR_45 ) ; TYPE_9 VAR_46 ; TYPE_10 VAR_47 ; METHOD_18 ( & VAR_48 , VAR_49 ) ; while ( METHOD_19 ( & VAR_50 , & VAR_51 , & VAR_52 ) ) { METHOD_20 ( VAR_53 , ( TYPE_11 * ) VAR_54 , ( TYPE_12 * ) VAR_55 ) ; } METHOD_21 ( VAR_56 ) ; METHOD_22 ( VAR_57 ) ; TYPE_13 * VAR_58 = METHOD_23 ( VAR_59 , METHOD_24 ( VAR_60 ) - METHOD_25 ( ".new" ) ) ; if ( METHOD_26 ( VAR_61 , VAR_62 ) == 0 ) METHOD_27 ( VAR_63 , VAR_64 ) ; METHOD_28 ( VAR_65 ) ; METHOD_29 ( "Savedproblemdirectoryofpid%uto\'%s\'" , VAR_66 , VAR_67 ) ; METHOD_30 ( "HTTP/1.1201Created\\r\\n\\r\\n" ) ; METHOD_31 ( VAR_68 ) ; METHOD_32 ( VAR_69 ) ; METHOD_33 ( VAR_70 , VAR_71 ) ; if ( VAR_72 > 0 ) { METHOD_34 ( VAR_73 , VAR_74 * ( TYPE_14 ) ( 1024 * 1024 ) , VAR_75 ) ; } METHOD_35 ( VAR_76 ) ; METHOD_36 ( 0 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 , VAR_3 ;  TYPE_4 VAR_4 , VAR_5 , VAR_6 ; VAR_7 = 0 ; VAR_8 = 0 ; VAR_9 = 0 ; METHOD_1 ( VAR_10 , 0 , VAR_11 , VAR_12 , VAR_13 ) ; VAR_14 [ 0 ] = VAR_15 ; VAR_16 = 0 ; METHOD_2 ( VAR_17 , 1 , 0 , VAR_18 , VAR_19 , VAR_20 ) ; VAR_21 [ 1 ] = VAR_22 ; VAR_23 = 0 ; METHOD_3 ( VAR_24 , 1 , VAR_25 , VAR_26 , VAR_27 ) ; METHOD_4 ( VAR_28 , 2 , 0 , VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 [ 2 ] = VAR_33 ; VAR_34 = 0 ; METHOD_5 ( VAR_35 , 3 , 0 , VAR_36 , VAR_37 , VAR_38 ) ; METHOD_6 ( VAR_39 , 2 , 1 , VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 [ 3 ] = VAR_44 ; VAR_45 = 0 ; METHOD_7 ( VAR_46 , 2 , VAR_47 , VAR_48 , VAR_49 ) ; METHOD_8 ( VAR_50 , 3 , 1 , VAR_51 , VAR_52 , VAR_53 ) ; METHOD_9 ( VAR_54 , 4 , 0 , VAR_55 , VAR_56 , VAR_57 ) ; VAR_58 [ 4 ] = VAR_59 ; VAR_60 = 0 ; METHOD_10 ( VAR_61 , 5 , 0 , VAR_62 , VAR_63 , VAR_64 ) ; METHOD_11 ( VAR_65 , 4 , 1 , VAR_66 , VAR_67 , VAR_68 ) ; METHOD_12 ( VAR_69 , 3 , 2 , VAR_70 , VAR_71 , VAR_72 ) ; VAR_73 [ 5 ] = VAR_74 ; VAR_75 = 0 ; METHOD_13 ( VAR_76 , 3 , VAR_77 , VAR_78 , VAR_79 ) ; METHOD_14 ( VAR_80 , 4 , 2 , VAR_81 , VAR_82 , VAR_83 ) ; METHOD_15 ( VAR_84 , 5 , 1 , VAR_85 , VAR_86 , VAR_87 ) ; METHOD_16 ( VAR_88 , 6 , 0 , VAR_89 , VAR_90 , VAR_91 ) ; VAR_92 [ 6 ] = VAR_93 ; VAR_94 = 0 ; METHOD_17 ( VAR_95 , 7 , 0 , VAR_96 , VAR_97 , VAR_98 ) ; METHOD_18 ( VAR_99 , 6 , 1 , VAR_100 , VAR_101 , VAR_102 ) ; METHOD_19 ( VAR_103 , 5 , 2 , VAR_104 , VAR_105 , VAR_106 ) ; METHOD_20 ( VAR_107 , 4 , 3 , VAR_108 , VAR_109 , VAR_110 ) ; VAR_111 [ 7 ] = VAR_112 ; VAR_113 = 0 ; METHOD_21 ( VAR_114 , 4 , VAR_115 , VAR_116 , VAR_117 ) ; METHOD_22 ( VAR_118 , 5 , 3 , VAR_119 , VAR_120 , VAR_121 ) ; METHOD_23 ( VAR_122 , 6 , 2 , VAR_123 , VAR_124 , VAR_125 ) ; METHOD_24 ( VAR_126 , 7 , 1 , VAR_127 , VAR_128 , VAR_129 ) ; VAR_130 [ 8 ] = VAR_131 ; VAR_132 = 0 ; METHOD_25 ( VAR_133 , 7 , 2 , VAR_134 , VAR_135 , VAR_136 ) ; METHOD_26 ( VAR_137 , 6 , 3 , VAR_138 , VAR_139 , VAR_140 ) ; METHOD_27 ( VAR_141 , 5 , 4 , VAR_142 , VAR_143 , VAR_144 ) ; VAR_145 [ 9 ] = VAR_146 ; VAR_147 = 0 ; METHOD_28 ( VAR_148 , 5 , VAR_149 , VAR_150 , VAR_151 ) ; METHOD_29 ( VAR_152 , 6 , 4 , VAR_153 , VAR_154 , VAR_155 ) ; METHOD_30 ( VAR_156 , 7 , 3 , VAR_157 , VAR_158 , VAR_159 ) ; VAR_160 [ 10 ] = VAR_161 ; VAR_162 = 0 ; METHOD_31 ( VAR_163 , 7 , 4 , VAR_164 , VAR_165 , VAR_166 ) ; METHOD_32 ( VAR_167 , 6 , 5 , VAR_168 , VAR_169 , VAR_170 ) ; VAR_171 [ 11 ] = VAR_172 ; VAR_173 = 0 ; METHOD_33 ( VAR_174 , 6 , VAR_175 , VAR_176 , VAR_177 ) ; METHOD_34 ( VAR_178 , 7 , 5 , VAR_179 , VAR_180 , VAR_181 ) ; VAR_182 [ 12 ] = VAR_183 ; VAR_184 = 0 ; METHOD_35 ( VAR_185 , 7 , 6 , VAR_186 , VAR_187 , VAR_188 ) ; VAR_189 [ 13 ] = VAR_190 ; VAR_191 = 0 ; METHOD_36 ( VAR_192 , 7 , VAR_193 , VAR_194 , VAR_195 ) ; VAR_196 [ 14 ] = VAR_197 ; VAR_198 [ 15 ] = VAR_199 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ,  TYPE_1 VAR_2 )  { struct STRUCT_OR_UNION_2 * VAR_3 ;  TYPE_2 VAR_4 ;  VAR_5 = METHOD_1 ( VAR_6 ) ; METHOD_2 ( VAR_7 , 0 , sizeof ( * VAR_8 ) ) ; VAR_9 -> VAR_10 . VAR_11 = VAR_12 ; VAR_13 -> VAR_14 . VAR_15 = VAR_16 ;  VAR_17 -> VAR_18 . VAR_19 = VAR_20 ;  if ( VAR_21 -> VAR_22 & VAR_23 ) { VAR_24 -> VAR_25 . VAR_26 = METHOD_3 ( VAR_27 ) -> VAR_28 ; if ( VAR_29 -> VAR_30 == VAR_31 && VAR_32 -> VAR_33 == VAR_34 ) VAR_35 -> VAR_36 . VAR_37 -= VAR_38 -> VAR_39 ; } VAR_40 = METHOD_4 ( VAR_41 , VAR_42 ) ; if ( VAR_43 ) METHOD_5 ( VAR_44 ) ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 , VAR_4 = VAR_5 , VAR_6 = VAR_7 , VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 ; VAR_11 * TYPE_7 ; TYPE_8 VAR_12 , VAR_13 ; METHOD_1 ( VAR_14 != ( const TYPE_9 * ) VAR_15 ) ; METHOD_2 ( VAR_16 -> VAR_17 == VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) ( TYPE_10 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , "%s" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_11 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 ) ; VAR_32 = METHOD_8 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 = METHOD_9 ( VAR_40 ) ; return ( ( TYPE_12 * ) VAR_41 ) ; } if ( METHOD_10 ( VAR_42 , & VAR_43 ) != VAR_44 ) { METHOD_11 ( VAR_45 , "ImproperImageHeader" ) ; } if ( VAR_46 . VAR_47 & VAR_48 ) VAR_49 = VAR_50 ; if ( VAR_51 . VAR_52 & VAR_53 && VAR_54 . VAR_55 > 0 ) VAR_56 = VAR_57 ; ( TYPE_13 ) METHOD_12 ( VAR_58 , 128 , VAR_59 ) ; if ( VAR_60 . VAR_61 . VAR_62 & VAR_63 ) { VAR_64 = VAR_65 ; if ( VAR_66 . VAR_67 . VAR_68 & VAR_69 ) { VAR_70 = VAR_71 ; TYPE_14 = VAR_72 ; } else { VAR_73 = VAR_74 ; TYPE_15 = VAR_75 ; } } else if ( VAR_76 . VAR_77 . VAR_78 & VAR_79 ) { VAR_80 = VAR_81 ; if ( VAR_82 . VAR_83 . VAR_84 & VAR_85 ) { METHOD_13 ( VAR_86 , "ImageTypeNotSupported" ) ; } else { VAR_87 = VAR_88 ; TYPE_16 = VAR_89 ; } } else if ( VAR_90 . VAR_91 . VAR_92 & VAR_93 ) { switch ( VAR_94 . VAR_95 . VAR_96 ) { case VAR_97 : { VAR_98 = VAR_99 ; VAR_100 = VAR_101 ; TYPE_17 = VAR_102 ; break ; } case VAR_103 : { VAR_104 = VAR_105 ; VAR_106 = VAR_107 ; TYPE_18 = VAR_108 ; break ; } case VAR_109 : { VAR_110 = VAR_111 ; VAR_112 = VAR_113 ; TYPE_19 = VAR_114 ; break ; } default : { METHOD_14 ( VAR_115 , "ImageTypeNotSupported" ) ; } } } else { METHOD_15 ( VAR_116 , "ImageTypeNotSupported" ) ; } VAR_117 = 1 ; if ( VAR_118 ) { VAR_119 = 0 ; if ( VAR_120 . VAR_121 & VAR_122 ) VAR_123 ++ ; if ( VAR_124 . VAR_125 & VAR_126 ) VAR_127 ++ ; if ( VAR_128 . VAR_129 & VAR_130 ) VAR_131 ++ ; if ( VAR_132 . VAR_133 & VAR_134 ) VAR_135 ++ ; if ( VAR_136 . VAR_137 & VAR_138 ) VAR_139 ++ ; if ( VAR_140 . VAR_141 & VAR_142 ) VAR_143 ++ ; } if ( VAR_144 ) VAR_145 = VAR_146 . VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < VAR_150 ; VAR_151 ++ ) { if ( VAR_152 != 0 ) { METHOD_16 ( VAR_153 , VAR_154 ) ; if ( METHOD_17 ( VAR_155 ) == ( TYPE_20 * ) VAR_156 ) return ( METHOD_18 ( VAR_157 ) ) ; VAR_158 = METHOD_19 ( VAR_159 ) ; } VAR_160 -> VAR_161 = VAR_162 ; VAR_163 -> VAR_164 = VAR_165 ; VAR_166 -> VAR_167 = VAR_168 . VAR_169 ; VAR_170 -> VAR_171 = VAR_172 . VAR_173 ; VAR_174 -> VAR_175 = VAR_176 ; VAR_177 -> VAR_178 = VAR_179 ; VAR_180 -> VAR_181 = 8 ; if ( VAR_182 -> VAR_183 != VAR_184 ) { ( TYPE_21 ) METHOD_20 ( VAR_185 ) ; return ( METHOD_21 ( VAR_186 ) ) ; }  if ( ( TYPE_22 ) ( VAR_187 , & VAR_188 , VAR_189 ) != VAR_190 )  { ( TYPE_23 ) METHOD_22 ( VAR_191 ) ; return ( METHOD_23 ( VAR_192 ) ) ; } } if ( METHOD_24 ( VAR_193 ) != VAR_194 ) METHOD_25 ( VAR_195 , VAR_196 , "UnexpectedEndOfFile" , VAR_197 -> VAR_198 ) ; ( TYPE_24 ) METHOD_26 ( VAR_199 ) ; return ( METHOD_27 ( VAR_200 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , register TYPE_3 VAR_2 , register const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 = VAR_8 ; const TYPE_7 * VAR_9 ; METHOD_1 ( VAR_10 [ 0 ] ) ; VAR_11 = ( VAR_12 [ 0 ] & 0xf0 ) >> 4 ; VAR_13 = VAR_14 [ 0 ] & 0x0f ; VAR_15 = METHOD_2 ( VAR_16 , "unknowntype(%u)" , VAR_17 ) ; METHOD_3 ( ( VAR_18 , "VRRPv%u,%s" , VAR_19 , VAR_20 ) ) ; if ( VAR_21 != 255 ) METHOD_4 ( ( VAR_22 , ",(ttl%u)" , VAR_23 ) ) ; if ( VAR_24 < 2 || VAR_25 > 3 || VAR_26 != VAR_27 ) return ; METHOD_5 ( VAR_28 [ 2 ] ) ; METHOD_6 ( ( VAR_29 , ",vrid%u,prio%u" , VAR_30 [ 1 ] , VAR_31 [ 2 ] ) ) ; METHOD_7 ( VAR_32 [ 5 ] ) ; if ( VAR_33 == 2 ) { VAR_34 = VAR_35 [ 4 ] ; METHOD_8 ( ( VAR_36 , ",authtype%s" , METHOD_9 ( VAR_37 , VAR_38 , VAR_39 ) ) ) ; METHOD_10 ( ( VAR_40 , ",intvl%us,length%u" , VAR_41 [ 5 ] , VAR_42 ) ) ; } else { TYPE_8 VAR_43 = ( VAR_44 [ 4 ] & 0x0f ) << 8 | VAR_45 [ 5 ] ; METHOD_11 ( ( VAR_46 , ",intvl%ucs,length%u" , VAR_47 , VAR_48 ) ) ; } if ( VAR_49 -> VAR_50 ) { TYPE_9 VAR_51 = VAR_52 [ 3 ] ; TYPE_10 VAR_53 ; TYPE_11 VAR_54 ; if ( VAR_55 == 2 && METHOD_12 ( VAR_56 [ 0 ] , VAR_57 ) ) { struct STRUCT_OR_UNION_0 VAR_58 [ 1 ] ; VAR_59 [ 0 ] . VAR_60 = VAR_61 ; VAR_62 [ 0 ] . VAR_63 = VAR_64 ;  if ( METHOD_13 ( VAR_65 , 1 ) )  METHOD_14 ( ( VAR_66 , ",(badvrrpcksum%x)" ,  METHOD_15 ( & VAR_67 [ 6 ] ) ) ) ;  } if ( VAR_68 == 3 && METHOD_16 ( VAR_69 [ 0 ] , VAR_70 ) ) { TYPE_12 VAR_71 = METHOD_17 ( VAR_72 , ( const struct STRUCT_OR_UNION_1 * ) VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 ) ; if ( VAR_78 ) METHOD_18 ( ( VAR_79 , ",(badvrrpcksum%x)" , METHOD_19 ( & VAR_80 [ 6 ] ) ) ) ; } METHOD_20 ( ( VAR_81 , ",addrs" ) ) ; if ( VAR_82 > 1 ) METHOD_21 ( ( VAR_83 , "(%d)" , VAR_84 ) ) ; METHOD_22 ( ( VAR_85 , ":" ) ) ; VAR_86 = '' ; VAR_87 += 8 ; for ( VAR_88 = 0 ; VAR_89 < VAR_90 ; VAR_91 ++ ) { METHOD_23 ( VAR_92 [ 3 ] ) ; METHOD_24 ( ( VAR_93 , "%c%s" , VAR_94 , METHOD_25 ( VAR_95 , VAR_96 ) ) ) ; VAR_97 = ',' ; VAR_98 += 4 ; } if ( VAR_99 == 2 && VAR_100 == VAR_101 ) { METHOD_26 ( VAR_102 [ 7 ] ) ; METHOD_27 ( ( VAR_103 , "auth\\"" ) ) ; if ( fn_printn ( VAR_104 , VAR_105 , 8 , VAR_106 -> ndo_snapend ) ) { METHOD_28 ( ( VAR_107 , "\\"" ) ) ; goto VAR_108 ; } METHOD_29 ( ( VAR_109 , "\\"" ) ) ; } } return ; VAR_110 : METHOD_30 ( ( VAR_111 , "[|vrrp]" ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( ) ; TYPE_3 * VAR_1 = METHOD_2 ( ) ; TYPE_4 VAR_2 ; VAR_3 = VAR_4 ; METHOD_3 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 , METHOD_4 ( "no-slash" ) , METHOD_5 ( "no-slash" ) ) ; METHOD_6 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , METHOD_7 ( "/" ) , METHOD_8 ( "/" ) ) ; METHOD_9 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 , METHOD_10 ( "/abc" ) , METHOD_11 ( "/abc" ) ) ; METHOD_12 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 , METHOD_13 ( "/abc/" ) , METHOD_14 ( "/abc/" ) ) ; METHOD_15 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , METHOD_16 ( "/abc/def" ) , METHOD_17 ( "/abc/def" ) ) ; METHOD_18 ( VAR_25 , VAR_26 , VAR_27 , VAR_28 , METHOD_19 ( "/abc?" ) , METHOD_20 ( "/abc?" ) ) ; METHOD_21 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 , METHOD_22 ( "/abc?d" ) , METHOD_23 ( "/abc?d" ) ) ; METHOD_24 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 , METHOD_25 ( "/abc?d=" ) , METHOD_26 ( "/abc?d=" ) ) ; METHOD_27 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 , METHOD_28 ( "/abc?d=e" ) , METHOD_29 ( "/abc?d=e" ) ) ; METHOD_30 ( VAR_41 , VAR_42 , VAR_43 , VAR_44 , METHOD_31 ( "/abc?d=e&" ) , METHOD_32 ( "/abc?d=e&" ) ) ; METHOD_33 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , METHOD_34 ( "/abc?d=e&f" ) , METHOD_35 ( "/abc?d=e&f" ) ) ; METHOD_36 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 , METHOD_37 ( "/abc?d=e&f=g" ) , METHOD_38 ( "/abc?d=e&f=g" ) ) ; METHOD_39 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 , METHOD_40 ( "/abc?d=e&f=g" ) , METHOD_41 ( "/abc?d=e&f=g" ) ) ; METHOD_42 ( VAR_57 , VAR_58 , VAR_59 , VAR_60 , METHOD_43 ( "/abc?d=e&f=gany" ) , METHOD_44 ( "/abc?d=e&f=g" ) ) ; METHOD_45 ( VAR_61 , VAR_62 , VAR_63 , VAR_64 , METHOD_46 ( "/%2F" ) , METHOD_47 ( "/%2F" ) ) ; METHOD_48 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 , METHOD_49 ( "/%2f" ) , METHOD_50 ( "/%2F" ) ) ; METHOD_51 ( VAR_69 , VAR_70 , VAR_71 , VAR_72 , METHOD_52 ( "/%20" ) , METHOD_53 ( "/%20" ) ) ; METHOD_54 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 , METHOD_55 ( "/%2b" ) , METHOD_56 ( "/%2B" ) ) ; METHOD_57 ( VAR_77 , VAR_78 , VAR_79 , VAR_80 , METHOD_58 ( "/%2B" ) , METHOD_59 ( "/%2B" ) ) ; METHOD_60 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , METHOD_61 ( "/%3a" ) , METHOD_62 ( "/%3A" ) ) ; METHOD_63 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 , METHOD_64 ( "/%3A" ) , METHOD_65 ( "/%3A" ) ) ; METHOD_66 ( VAR_89 , VAR_90 , VAR_91 , VAR_92 , METHOD_67 ( "/~test%20ä_" ) , METHOD_68 ( "/~test%20%C3%A4_" ) ) ; METHOD_69 ( VAR_93 , VAR_94 , VAR_95 , VAR_96 , METHOD_70 ( "/\\375" ) , "" , ( TYPE_5 ) - 2 ) ; METHOD_71 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 , METHOD_72 ( "/\\376" ) , "" , ( TYPE_6 ) - 2 ) ; METHOD_73 ( VAR_101 , VAR_102 , VAR_103 , VAR_104 , METHOD_74 ( "/\\377" ) , "" , ( TYPE_7 ) - 2 ) ; VAR_105 = VAR_106 ; METHOD_75 ( VAR_107 , VAR_108 , VAR_109 , VAR_110 , METHOD_76 ( "/" ) , METHOD_77 ( "/" ) ) ; METHOD_78 ( VAR_111 , VAR_112 , VAR_113 , VAR_114 , METHOD_79 ( "/abc" ) , METHOD_80 ( "/abc" ) ) ; METHOD_81 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 , METHOD_82 ( "/abc/" ) , METHOD_83 ( "/abc/" ) ) ; METHOD_84 ( VAR_119 , VAR_120 , VAR_121 , VAR_122 , METHOD_85 ( "/abc/def" ) , METHOD_86 ( "/abc/def" ) ) ; METHOD_87 ( VAR_123 , VAR_124 , VAR_125 , VAR_126 , METHOD_88 ( "/abc?" ) , METHOD_89 ( "/abc?" ) ) ; METHOD_90 ( VAR_127 , VAR_128 , VAR_129 , VAR_130 , METHOD_91 ( "/abc?d" ) , METHOD_92 ( "/abc?d" ) ) ; METHOD_93 ( VAR_131 , VAR_132 , VAR_133 , VAR_134 , METHOD_94 ( "/abc?d=" ) , METHOD_95 ( "/abc?d=" ) ) ; METHOD_96 ( VAR_135 , VAR_136 , VAR_137 , VAR_138 , METHOD_97 ( "/abc?d=e" ) , METHOD_98 ( "/abc?d=e" ) ) ; METHOD_99 ( VAR_139 , VAR_140 , VAR_141 , VAR_142 , METHOD_100 ( "/abc?d=e&" ) , METHOD_101 ( "/abc?d=e&" ) ) ; METHOD_102 ( VAR_143 , VAR_144 , VAR_145 , VAR_146 , METHOD_103 ( "/abc?d=e&f" ) , METHOD_104 ( "/abc?d=e&f" ) ) ; METHOD_105 ( VAR_147 , VAR_148 , VAR_149 , VAR_150 , METHOD_106 ( "/abc?d=e&f=g" ) , METHOD_107 ( "/abc?d=e&f=g" ) ) ; METHOD_108 ( VAR_151 , VAR_152 , VAR_153 , VAR_154 , METHOD_109 ( "/abc?d=e&f=g" ) , METHOD_110 ( "/abc?d=e&f=g" ) ) ; METHOD_111 ( VAR_155 , VAR_156 , VAR_157 , VAR_158 , METHOD_112 ( "/abc?d=e&f=gany" ) , METHOD_113 ( "/abc?d=e&f=g" ) ) ; METHOD_114 ( VAR_159 , VAR_160 , VAR_161 , VAR_162 , METHOD_115 ( "/%2F" ) , METHOD_116 ( "/%2F" ) ) ; METHOD_117 ( VAR_163 , VAR_164 , VAR_165 , VAR_166 , METHOD_118 ( "/%2f" ) , METHOD_119 ( "/%2F" ) ) ; METHOD_120 ( VAR_167 , VAR_168 , VAR_169 , VAR_170 , METHOD_121 ( "/%20" ) , METHOD_122 ( "/%20" ) ) ; METHOD_123 ( VAR_171 , VAR_172 , VAR_173 , VAR_174 , METHOD_124 ( "/%2b" ) , METHOD_125 ( "/+" ) ) ; METHOD_126 ( VAR_175 , VAR_176 , VAR_177 , VAR_178 , METHOD_127 ( "/%2B" ) , METHOD_128 ( "/+" ) ) ; METHOD_129 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 , METHOD_130 ( "/%3a" ) , METHOD_131 ( "/:" ) ) ; METHOD_132 ( VAR_183 , VAR_184 , VAR_185 , VAR_186 , METHOD_133 ( "/%3A" ) , METHOD_134 ( "/:" ) ) ; METHOD_135 ( VAR_187 , VAR_188 , VAR_189 , VAR_190 , METHOD_136 ( "/~test%20ä_" ) , METHOD_137 ( "/~test%20%C3%A4_" ) ) ; METHOD_138 ( VAR_191 , VAR_192 , VAR_193 , VAR_194 , METHOD_139 ( "/\\375" ) , "" , ( TYPE_8 ) - 2 ) ; METHOD_140 ( VAR_195 , VAR_196 , VAR_197 , VAR_198 , METHOD_141 ( "/\\376" ) , "" , ( TYPE_9 ) - 2 ) ; METHOD_142 ( VAR_199 , VAR_200 , VAR_201 , VAR_202 , METHOD_143 ( "/\\377" ) , "" , ( TYPE_10 ) - 2 ) ; VAR_203 |= VAR_204 ; METHOD_144 ( VAR_205 , VAR_206 , VAR_207 , VAR_208 , METHOD_145 ( "/\\a" ) , "" , ( TYPE_11 ) - 2 ) ; METHOD_146 ( VAR_209 , VAR_210 , VAR_211 , VAR_212 , METHOD_147 ( "/\\t" ) , "" , ( TYPE_12 ) - 2 ) ; METHOD_148 ( VAR_213 , VAR_214 , VAR_215 , VAR_216 , METHOD_149 ( "/\\r" ) , "" , ( TYPE_13 ) - 2 ) ; METHOD_150 ( VAR_217 , VAR_218 , VAR_219 , VAR_220 , METHOD_151 ( "/\\177" ) , "" , ( TYPE_14 ) - 2 ) ; if METHOD_152 ( VAR_221 ) || METHOD_153 ( VAR_222 ) VAR_223 |= VAR_224 ; METHOD_154 ( VAR_225 , VAR_226 , VAR_227 , VAR_228 , METHOD_155 ( "/a\\\\b" ) , METHOD_156 ( "/a/b" ) ) ; VAR_229 |= VAR_230 ; METHOD_157 ( VAR_231 , VAR_232 , VAR_233 , VAR_234 , METHOD_158 ( "/a/b?c=/" ) , METHOD_159 ( "/a/b?c=/" ) ) ; METHOD_160 ( VAR_235 , VAR_236 , VAR_237 , VAR_238 , METHOD_161 ( "/a/b?c=%2f" ) , METHOD_162 ( "/a/b?c=/" ) ) ;  METHOD_163 ( VAR_239 , VAR_240 , VAR_241 , VAR_242 , METHOD_164 ( "/a%2fb" ) , METHOD_165 ( "/a/b" ) ) ;  METHOD_166 ( VAR_243 , VAR_244 , VAR_245 , VAR_246 , METHOD_167 ( "/a%2Fb" ) , METHOD_168 ( "/a/b" ) ) ; METHOD_169 ( VAR_247 , VAR_248 , VAR_249 , VAR_250 , METHOD_170 ( "/a%2fb?c=/" ) , METHOD_171 ( "/a/b?c=/" ) ) ; METHOD_172 ( VAR_251 , VAR_252 , VAR_253 , VAR_254 , METHOD_173 ( "/a%2fb?c=%2f" ) , METHOD_174 ( "/a/b?c=/" ) ) ; VAR_255 &= ~ VAR_256 ; VAR_257 |= VAR_258 ; METHOD_175 ( VAR_259 , VAR_260 , VAR_261 , VAR_262 , METHOD_176 ( "/a%2fb" ) , "" , ( TYPE_15 ) - 2 ) ; METHOD_177 ( VAR_263 , VAR_264 , VAR_265 , VAR_266 , METHOD_178 ( "/a%2Fb" ) , "" , ( TYPE_16 ) - 2 ) ; METHOD_179 ( VAR_267 , VAR_268 , VAR_269 , VAR_270 , METHOD_180 ( "/a/b?c=%2f" ) , METHOD_181 ( "/a/b?c=/" ) ) ; VAR_271 &= ~ VAR_272 ; VAR_273 |= VAR_274 ; METHOD_182 ( VAR_275 , VAR_276 , VAR_277 , VAR_278 , METHOD_183 ( "./a/b" ) , METHOD_184 ( "/a/b" ) ) ; METHOD_185 ( VAR_279 , VAR_280 , VAR_281 , VAR_282 , METHOD_186 ( "../a/b" ) , METHOD_187 ( "/a/b" ) ) ; METHOD_188 ( VAR_283 , VAR_284 , VAR_285 , VAR_286 , METHOD_189 ( "/a/./b" ) , METHOD_190 ( "/a/b" ) ) ; METHOD_191 ( VAR_287 , VAR_288 , VAR_289 , VAR_290 , METHOD_192 ( "/a/../b" ) , METHOD_193 ( "/b" ) ) ; METHOD_194 ( VAR_291 , VAR_292 , VAR_293 , VAR_294 , METHOD_195 ( "/a/b/." ) , METHOD_196 ( "/a/b/" ) ) ; METHOD_197 ( VAR_295 , VAR_296 , VAR_297 , VAR_298 , METHOD_198 ( "/a/b/.." ) , METHOD_199 ( "/a/" ) ) ; METHOD_200 ( VAR_299 , VAR_300 , VAR_301 , VAR_302 , METHOD_201 ( "/a/../b/.." ) , METHOD_202 ( "/" ) ) ; VAR_303 &= ~ VAR_304 ; VAR_305 |= VAR_306 ; METHOD_203 ( VAR_307 , VAR_308 , VAR_309 , VAR_310 , METHOD_204 ( "./a/b" ) , "" , ( TYPE_17 ) - 2 ) ; METHOD_205 ( VAR_311 , VAR_312 , VAR_313 , VAR_314 , METHOD_206 ( "../a/b" ) , "" , ( TYPE_18 ) - 2 ) ; METHOD_207 ( VAR_315 , VAR_316 , VAR_317 , VAR_318 , METHOD_208 ( "/a/./b" ) , "" , ( TYPE_19 ) - 2 ) ; METHOD_209 ( VAR_319 , VAR_320 , VAR_321 , VAR_322 , METHOD_210 ( "/a/../b" ) , "" , ( TYPE_20 ) - 2 ) ; METHOD_211 ( VAR_323 , VAR_324 , VAR_325 , VAR_326 , METHOD_212 ( "/a/b/." ) , "" , ( TYPE_21 ) - 2 ) ; METHOD_213 ( VAR_327 , VAR_328 , VAR_329 , VAR_330 , METHOD_214 ( "/a/b/.." ) , "" , ( TYPE_22 ) - 2 ) ; VAR_331 &= ~ VAR_332 ; VAR_333 |= VAR_334 ; METHOD_215 ( VAR_335 , VAR_336 , VAR_337 , VAR_338 , METHOD_216 ( "/a/b?c=d+e" ) , METHOD_217 ( "/a/b?c=d+e" ) ) ; METHOD_218 ( VAR_339 , VAR_340 , VAR_341 , VAR_342 , METHOD_219 ( "/a/b?c=d%20e" ) , METHOD_220 ( "/a/b?c=d+e" ) ) ; VAR_343 &= ~ VAR_344 ; METHOD_221 ( VAR_345 ) ; METHOD_222 ( VAR_346 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) , * VAR_2 ; TYPE_2 VAR_3 = 0 ; if ( METHOD_2 ( VAR_4 , VAR_5 ) ) return 0 ; METHOD_3 ( ) ; VAR_6 = METHOD_4 ( VAR_7 ) ; if ( METHOD_5 ( STRUCT_OR_UNION_3 -> VAR_8 , VAR_9 -> VAR_10 ) && METHOD_6 ( STRUCT_OR_UNION_4 -> VAR_11 , VAR_12 -> VAR_13 ) && METHOD_7 ( STRUCT_OR_UNION_5 -> VAR_14 , VAR_15 -> VAR_16 ) && METHOD_8 ( STRUCT_OR_UNION_6 -> VAR_17 , VAR_18 -> VAR_19 ) && METHOD_9 ( STRUCT_OR_UNION_7 -> VAR_20 , VAR_21 -> VAR_22 ) && METHOD_10 ( STRUCT_OR_UNION_8 -> VAR_23 , VAR_24 -> VAR_25 ) ) goto VAR_26 ; if ( METHOD_11 ( VAR_27 -> VAR_28 , VAR_29 ) ) goto VAR_30 ; METHOD_12 ( ) ; return - VAR_31 ; VAR_32 : METHOD_13 ( ) ; METHOD_14 ( ) ; if ( VAR_33 -> VAR_34 ) VAR_35 = METHOD_15 ( VAR_36 -> VAR_37 ) ; METHOD_16 ( ) ;  if ( ! VAR_38 && ! METHOD_17 ( METHOD_18 ( VAR_39 ) -> VAR_40 , VAR_41 ) ) {  METHOD_19 ( ) ; return - VAR_42 ; } METHOD_20 ( ) ; return METHOD_21 ( VAR_43 , VAR_44 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ;  for ( VAR_5 = 0 ; VAR_6 <= VAR_7 - sizeof ( TYPE_6 ) ; VAR_8 += sizeof ( TYPE_7 ) ) {  TYPE_8 VAR_9 = * ( TYPE_9 * ) ( VAR_10 + VAR_11 ) ; TYPE_10 VAR_12 = * ( TYPE_11 * ) ( VAR_13 + VAR_14 ) ; * ( TYPE_12 * ) ( VAR_15 + VAR_16 ) = ( ( VAR_17 & VAR_18 ) + ( VAR_19 & VAR_20 ) ) ^ ( ( VAR_21 ^ VAR_22 ) & VAR_23 ) ; } for ( ; VAR_24 < VAR_25 ; VAR_26 ++ ) VAR_27 [ VAR_28 ] = VAR_29 [ VAR_30 ] + VAR_31 [ VAR_32 ] ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 , struct STRUCT_OR_UNION_1 * VAR_4 ) { if ( VAR_5 == VAR_6 ) { METHOD_1 ( 1 , "UseanactualdevicestructureforDMAallocation\\n" ) ; return VAR_7 ; } if ( METHOD_2 ( VAR_8 ) && VAR_9 -> VAR_10 <= METHOD_3 ( 32 ) ) VAR_11 |= VAR_12 ; if ( METHOD_4 ( VAR_13 ) && ( VAR_14 & VAR_15 ) ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; TYPE_4 * VAR_16 ; VAR_17 = METHOD_5 ( VAR_18 ) ; STRUCT_OR_UNION_4 = METHOD_6 ( VAR_19 , VAR_20 >> VAR_21 , METHOD_7 ( VAR_22 ) ) ; if ( ! STRUCT_OR_UNION_5 ) return VAR_23 ; * VAR_24 = METHOD_8 ( VAR_25 , METHOD_9 ( STRUCT_OR_UNION_6 ) ) ; VAR_26 = METHOD_10 ( STRUCT_OR_UNION_7 ) ;  if ( VAR_27 & VAR_28 )  METHOD_11 ( VAR_29 , 0 , VAR_30 ) ; return VAR_31 ; } else { return METHOD_12 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 ;  TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 * VAR_6 ; TYPE_8 * VAR_7 ;  TYPE_9 VAR_8 ;  if ( METHOD_1 ( VAR_9 ) > 0 && METHOD_2 ( VAR_10 ) > 0 ) { METHOD_3 ( VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_4 ( VAR_14 ) ; for ( VAR_15 = VAR_16 -> VAR_17 , VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; VAR_21 > 0 ; -- VAR_22 , VAR_23 += VAR_24 ) { VAR_25 = VAR_26 ; for ( VAR_27 = VAR_28 -> VAR_29 , VAR_30 = VAR_31 ; VAR_32 > 0 ; -- VAR_33 , ++ VAR_34 ) { VAR_35 = * VAR_36 ; if ( VAR_37 < VAR_38 ) { * VAR_39 = VAR_40 ; } else if ( VAR_41 > VAR_42 ) { * VAR_43 = VAR_44 ; } } } } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_6 * VAR_7 = & VAR_8 -> VAR_9 ; TYPE_7 VAR_10 = 0 ; VAR_11 * VAR_12 ; TYPE_8 VAR_13 ; for ( VAR_14 = 0 ; VAR_15 < VAR_16 ; VAR_17 ++ ) { VAR_18 = VAR_19 -> VAR_20 + VAR_21 ; if ( VAR_22 -> VAR_23 ) { break ; } } if ( VAR_24 == VAR_25 ) { return ; } if ( VAR_26 == VAR_27 ) { switch ( VAR_28 ) { case VAR_29 : VAR_30 -> VAR_31 . VAR_32 = 1 ; METHOD_1 ( VAR_33 , VAR_34 ) ; break ; case VAR_35 : VAR_36 -> VAR_37 . VAR_38 = 1 ; METHOD_2 ( VAR_39 , VAR_40 ) ; break ; case VAR_41 : VAR_42 -> VAR_43 . VAR_44 = 1 ; METHOD_3 ( VAR_45 ) ; break ; case VAR_46 : VAR_47 -> VAR_48 . VAR_49 = 1 ; METHOD_4 ( VAR_50 ) ; break ; case VAR_51 : VAR_52 -> VAR_53 . VAR_54 = 1 ;  METHOD_5 ( VAR_55 ,   VAR_56 ) ;  break ; default : for ( VAR_57 = 0 ; VAR_58 < VAR_59 ; VAR_60 ++ ) { METHOD_6 ( VAR_61 , 8 ) ; } break ; } } else { switch ( VAR_62 ) { case VAR_63 : VAR_64 -> VAR_65 . VAR_66 = 1 ;  METHOD_7 ( VAR_67 ,   VAR_68 ) ;  break ; default : for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; VAR_72 ++ ) { METHOD_8 ( VAR_73 , 8 ) ; } break ; } } VAR_74 = METHOD_9 ( VAR_75 ) ; if ( VAR_76 ) { TYPE_9 VAR_77 ; TYPE_10 VAR_78 = 0 ; TYPE_11 VAR_79 = 0xFF ; TYPE_12 VAR_80 ; TYPE_13 VAR_81 ; METHOD_10 ( VAR_82 ) ; METHOD_11 ( VAR_83 ) ; while ( VAR_84 > 9 ) { METHOD_12 ( "reserved_payload_extension_data" , VAR_85 , VAR_86 , 1 ) ; VAR_87 -- ; } VAR_88 = METHOD_13 ( VAR_89 , VAR_90 ) ; while ( VAR_91 & ( VAR_92 >> VAR_93 ) ) { VAR_94 ++ ; continue ; } while ( VAR_95 > ( 9 - VAR_96 ) ) { METHOD_14 ( "reserved_payload_extension_data" , VAR_97 , VAR_98 , 1 ) ; VAR_99 -- ; } METHOD_15 ( "payload_bit_equal_to_one" , VAR_100 , VAR_101 , 1 ) ; VAR_102 -- ; while ( VAR_103 ) { METHOD_16 ( "payload_bit_equal_to_zero" , VAR_104 , VAR_105 , 1 ) ; VAR_106 -- ; } } return ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ;  VAR_5 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_3 ) , VAR_6 ) ;  if ( ! VAR_7 ) return - VAR_8 ; VAR_9 -> VAR_10 = ! 0 ; METHOD_2 ( & VAR_11 -> VAR_12 ) ; if ( METHOD_3 ( & VAR_13 -> VAR_14 , VAR_15 , VAR_16 ) ) { METHOD_4 ( VAR_17 ) ; return - VAR_18 ; } if ( ! METHOD_5 ( VAR_19 -> VAR_20 ) ) METHOD_6 ( VAR_21 -> VAR_22 ) ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = 0 ; VAR_29 -> VAR_30 = 0 ; if ( VAR_31 -> VAR_32 > 9 ) VAR_33 -> VAR_34 = VAR_35 ; else VAR_36 -> VAR_37 = VAR_38 ; if ( VAR_39 > 0 ) { VAR_40 -> VAR_41 = VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; METHOD_7 ( & VAR_46 -> VAR_47 , "%s-read&writeintervalsforcedto%d\\n" , VAR_48 , VAR_49 ) ; } else { VAR_50 -> VAR_51 = VAR_52 -> VAR_53 -> VAR_54 ; VAR_55 -> VAR_56 = VAR_57 -> VAR_58 -> VAR_59 ; METHOD_8 ( & VAR_60 -> VAR_61 , "%s-intervals:read=%dwrite=%d\\n" , VAR_62 , VAR_63 -> VAR_64 , VAR_65 -> VAR_66 ) ; } METHOD_9 ( VAR_67 , VAR_68 ) ; VAR_69 -> VAR_70 . VAR_71 = 256 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { unsigned VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; TYPE_2 VAR_5 ; TYPE_3 * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 -> VAR_9 + VAR_10 ; TYPE_4 VAR_11 ; TYPE_5 VAR_12 = VAR_13 ; TYPE_6 VAR_14 = METHOD_1 ( VAR_15 ) ; TYPE_7 VAR_16 = - VAR_17 ; if ( ! METHOD_2 ( VAR_18 ) ) { METHOD_3 ( VAR_19 ) ; return 0 ; } if ( VAR_20 && VAR_21 <= METHOD_4 ( VAR_22 ) && VAR_23 >= VAR_24 ) VAR_25 = VAR_26 ; METHOD_5 ( VAR_27 , "SDMAmod_num_sdma:%u\\n" , VAR_28 ) ; METHOD_6 ( VAR_29 , "SDMAchip_sdma_engines:%u\\n" , METHOD_7 ( VAR_30 ) ) ; METHOD_8 ( VAR_31 , "SDMAchip_sdma_mem_size:%u\\n" , METHOD_9 ( VAR_32 ) ) ; VAR_33 = METHOD_10 ( VAR_34 ) / ( VAR_35 * VAR_36 ) ; METHOD_11 ( & VAR_37 -> VAR_38 ) ; METHOD_12 ( & VAR_39 -> VAR_40 , 0 ) ; VAR_41 = METHOD_13 ( ) ; METHOD_14 ( VAR_42 , "SDMAengines%zudescq_cnt%u\\n" , VAR_43 , VAR_44 ) ; VAR_45 -> VAR_46 = METHOD_15 ( VAR_47 , sizeof ( * VAR_48 -> VAR_49 ) , VAR_50 , VAR_51 -> VAR_52 ) ; if ( ! VAR_53 -> VAR_54 ) return VAR_55 ; VAR_56 = METHOD_16 ( VAR_57 , VAR_58 ) ; if ( VAR_59 ) VAR_60 -> VAR_61 = VAR_62 ; else VAR_63 -> VAR_64 = VAR_65 ; if ( ! VAR_66 ) VAR_67 = VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; ++ VAR_72 ) { VAR_73 = & VAR_74 -> VAR_75 [ VAR_76 ] ; VAR_77 -> VAR_78 = VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 -> VAR_87 = VAR_88 ; VAR_89 -> VAR_90 = METHOD_17 ( VAR_91 ) ; VAR_92 -> VAR_93 = METHOD_18 ( VAR_94 ) ; VAR_95 -> VAR_96 = ( 1 << VAR_97 -> VAR_98 ) - 1 ; VAR_99 -> VAR_100 = ( TYPE_8 ) 1 << ( 0 * VAR_101 + VAR_102 ) ; VAR_103 -> VAR_104 = ( TYPE_9 ) 1 << ( 1 * VAR_105 + VAR_106 ) ; VAR_107 -> VAR_108 = ( TYPE_10 ) 1 << ( 2 * VAR_109 + VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 -> VAR_114 | VAR_115 -> VAR_116 | VAR_117 -> VAR_118 ; METHOD_19 ( & VAR_119 -> VAR_120 ) ; METHOD_20 ( & VAR_121 -> VAR_122 ) ; METHOD_21 ( & VAR_123 -> VAR_124 ) ; METHOD_22 ( & VAR_125 -> VAR_126 ) ; METHOD_23 ( & VAR_127 -> VAR_128 ) ; VAR_129 -> VAR_130 = 0xfffffffe00000000ULL ; METHOD_24 ( VAR_131 , VAR_132 ) ; METHOD_25 ( & VAR_133 -> VAR_134 . VAR_135 ) ; METHOD_26 ( & VAR_136 -> VAR_137 . VAR_138 ) ; METHOD_27 ( & VAR_139 -> VAR_140 ) ; METHOD_28 ( & VAR_141 -> VAR_142 ) ; VAR_143 -> VAR_144 = METHOD_29 ( VAR_145 , VAR_146 , METHOD_30 ( VAR_147 ) ) ; METHOD_31 ( & VAR_148 -> VAR_149 , VAR_150 , ( unsigned TYPE_11 ) VAR_151 ) ; METHOD_32 ( & VAR_152 -> VAR_153 , VAR_154 , ( unsigned TYPE_12 ) VAR_155 ) ; METHOD_33 ( & VAR_156 -> VAR_157 , VAR_158 ) ; METHOD_34 ( & VAR_159 -> VAR_160 , VAR_161 ) ; VAR_162 -> VAR_163 = 0 ; METHOD_35 ( & VAR_164 -> VAR_165 , VAR_166 , 0 ) ; VAR_167 -> VAR_168 = METHOD_36 ( & VAR_169 -> VAR_170 -> VAR_171 , VAR_172 * sizeof ( TYPE_13 [ 2 ] ) , & VAR_173 -> VAR_174 , VAR_175 ) ; if ( ! VAR_176 -> VAR_177 ) goto VAR_178 ; VAR_179 -> VAR_180 = METHOD_37 ( METHOD_38 ( VAR_181 , sizeof ( struct STRUCT_OR_UNION_4 * ) ) , VAR_182 , VAR_183 -> VAR_184 ) ; if ( ! VAR_185 -> VAR_186 ) goto VAR_187 ; } VAR_188 -> VAR_189 = VAR_190 * VAR_191 ; VAR_192 -> VAR_193 = METHOD_39 ( & VAR_194 -> VAR_195 -> VAR_196 , VAR_197 -> VAR_198 , & VAR_199 -> VAR_200 , VAR_201 ) ; if ( ! VAR_202 -> VAR_203 ) { METHOD_40 ( VAR_204 , "failedtoallocateSendDMAheadmemory\\n" ) ; goto VAR_205 ; } VAR_206 -> VAR_207 = METHOD_41 ( & VAR_208 -> VAR_209 -> VAR_210 , sizeof ( TYPE_14 ) , & VAR_211 -> VAR_212 , VAR_213 ) ; if ( ! VAR_214 -> VAR_215 ) { METHOD_42 ( VAR_216 , "failedtoallocateSendDMApadmemory\\n" ) ; goto VAR_217 ; } VAR_218 = ( TYPE_15 * ) VAR_219 -> VAR_220 ; for ( VAR_221 = 0 ; VAR_222 < VAR_223 ; ++ VAR_224 ) { unsigned TYPE_16 VAR_225 ; VAR_226 = & VAR_227 -> VAR_228 [ VAR_229 ] ; VAR_230 -> VAR_231 = VAR_232 ; VAR_233 += VAR_234 ; VAR_235 = ( unsigned TYPE_17 ) VAR_236 -> VAR_237 - ( unsigned TYPE_18 ) VAR_238 -> VAR_239 ; VAR_240 -> VAR_241 = VAR_242 -> VAR_243 + VAR_244 ; METHOD_43 ( VAR_245 , VAR_246 , VAR_247 ) ; } VAR_248 -> VAR_249 |= VAR_250 ; VAR_251 -> VAR_252 |= VAR_253 ? VAR_254 : 0 ; VAR_255 -> VAR_256 = VAR_257 ; VAR_258 = METHOD_44 ( VAR_259 , VAR_260 , VAR_261 -> VAR_262 , VAR_263 ) ; if ( VAR_264 < 0 ) goto VAR_265 ; VAR_266 = METHOD_45 ( sizeof ( * VAR_267 ) , VAR_268 ) ; if ( ! VAR_269 ) { VAR_270 = - VAR_271 ; goto VAR_272 ; } VAR_273 = METHOD_46 ( VAR_274 , & VAR_275 ) ;  if ( VAR_276 < 0 )  goto VAR_277 ;  VAR_278 -> VAR_279 = VAR_280 ;  METHOD_47 ( VAR_281 , "SDMAnum_sdma:%u\\n" , VAR_282 -> VAR_283 ) ; return 0 ; VAR_284 : METHOD_48 ( VAR_285 , VAR_286 ) ; return VAR_287 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ;  METHOD_1 ( & VAR_4 -> VAR_5 ) ;  return 0 ; }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 16 TYPE_5 * VAR_5 ; const TYPE_6 * VAR_6 ; TYPE_7 * VAR_7 , * VAR_8 ; register TYPE_8 VAR_9 ; TYPE_9 VAR_10 [ VAR_11 ] = { 256 , 192 , 128 , 96 , 64 , 48 , 40 , 32 , 24 , 16 } ; VAR_12 = VAR_13 ; * VAR_14 = 0 ; VAR_15 = 0 ; VAR_16 = VAR_17 ; while ( * VAR_18 != '\\0' && VAR_19 < VAR_20 ) { TYPE_10 VAR_21 ; while ( ( METHOD_1 ( ( TYPE_11 ) ( ( unsigned TYPE_12 ) * VAR_22 ) ) != 0 ) ) VAR_23 ++ ; VAR_24 = ( TYPE_13 ) METHOD_2 ( VAR_25 , & VAR_26 , 10 ) ;  if ( VAR_27 == VAR_28 || VAR_29 < 16 || VAR_30 > 256 )  return ( ( TYPE_14 * ) VAR_31 ) ; VAR_32 = VAR_33 ; VAR_34 [ VAR_35 ++ ] = VAR_36 ; while ( ( METHOD_3 ( ( TYPE_15 ) ( ( unsigned TYPE_16 ) * VAR_37 ) ) != 0 ) || ( * VAR_38 == ',' ) ) VAR_39 ++ ; } if ( VAR_40 == 0 ) VAR_41 = 10 ; * VAR_42 = VAR_43 ; for ( VAR_44 = 0 ; VAR_45 < * VAR_46 ; VAR_47 ++ ) { VAR_48 = METHOD_4 ( VAR_49 , VAR_50 [ VAR_51 ] , VAR_52 [ VAR_53 ] , VAR_54 -> VAR_55 , VAR_56 ) ; if ( VAR_57 == ( TYPE_17 * ) VAR_58 ) return ( METHOD_5 ( VAR_59 ) ) ; if ( VAR_60 == ( TYPE_18 * ) VAR_61 ) VAR_62 = VAR_63 ; else METHOD_6 ( & VAR_64 , VAR_65 ) ; } return ( VAR_66 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 -> VAR_13 . VAR_14 , VAR_15 ) ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; if ( * VAR_19 ) { if ( VAR_20 > ( VAR_21 -> VAR_22 . VAR_23 >> 1 ) ) { VAR_24 *= 2 ; } } else {  TYPE_7 VAR_25 = METHOD_3 ( VAR_26 , VAR_27 ) ;  VAR_28 += VAR_29 ; VAR_30 += METHOD_4 ( VAR_31 , VAR_32 , VAR_33 ) ; } return VAR_34 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 ; TYPE_2 VAR_5 = VAR_6 , VAR_7 = VAR_8 , VAR_9 = VAR_10 ; VAR_11 = METHOD_1 ( METHOD_2 ( VAR_12 ) ) ; METHOD_3 ( VAR_13 ) ; while ( METHOD_4 ( VAR_14 ) ) { VAR_15 = METHOD_5 ( VAR_16 ) ; METHOD_6 ( VAR_17 , & VAR_18 ) ;  METHOD_7 ( VAR_19 , VAR_20 , VAR_21 ) ;  if ( METHOD_8 ( VAR_22 , "command" ) == 0 ) VAR_23 = VAR_24 ; else if ( METHOD_9 ( VAR_25 , "rspfile" ) == 0 ) VAR_26 = VAR_27 ; else if ( METHOD_10 ( VAR_28 , "rspfile_content" ) == 0 ) VAR_29 = VAR_30 ; } if ( ! VAR_31 ) METHOD_11 ( "rule\'%s\'hasnocommand" , VAR_32 -> VAR_33 ) ; if ( VAR_34 != VAR_35 ) METHOD_12 ( "rule\'%s\'hasrspfileandnorspfile_contentorviceversa" , VAR_36 -> VAR_37 ) ; METHOD_13 ( VAR_38 , VAR_39 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 4 ] = { 0 , 0 , 0 , 0 } ; VAR_3 [ 0 ] = '\\\\' ; VAR_4 [ 1 ] = METHOD_1 ( VAR_5 ) ;  if ( VAR_6 [ 1 ] == VAR_7 )  return 0 ; if ( VAR_8 [ 1 ] == 'x' ) { VAR_9 [ 2 ] = METHOD_2 ( VAR_10 ) ;  if ( VAR_11 [ 2 ] == VAR_12 )  return 0 ; VAR_13 [ 3 ] = METHOD_3 ( VAR_14 ) ;  if ( VAR_15 [ 3 ] == VAR_16 )  return 0 ; } * VAR_17 = METHOD_4 ( VAR_18 ) ; return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 , "\\r\\n\\r\\n" ) ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_0 VAR_6 ; TYPE_5 * VAR_7 = VAR_8 ; TYPE_6 * VAR_9 ; TYPE_7 * VAR_10 ; TYPE_8 VAR_11 = 0 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 = VAR_14 ; TYPE_11 VAR_15 ; struct STRUCT_OR_UNION_1 VAR_16 = VAR_17 ; if ( VAR_18 == VAR_19 ) { if ( sizeof ( VAR_20 -> VAR_21 ) - 1 <= VAR_22 -> VAR_23 ) { return METHOD_2 ( VAR_24 , 431 , VAR_25 ) ; } return VAR_26 ; } if ( VAR_27 . VAR_28 ) { * VAR_29 = '\\0' ; METHOD_3 ( & VAR_30 , "%s%llu:%s" , METHOD_4 ( VAR_31 -> VAR_32 -> VAR_33 ) , ( unsigned TYPE_12 TYPE_13 ) VAR_34 -> VAR_35 , VAR_36 -> VAR_37 ) ; * VAR_38 = '\\r' ; } for ( VAR_39 = VAR_40 -> VAR_41 ; '' != * VAR_42 ; VAR_43 ++ ) { if ( '\\0' == * VAR_44 ) { return METHOD_5 ( VAR_45 , 400 , VAR_46 ) ; } } switch ( METHOD_6 ( * VAR_47 -> VAR_48 ) ) { case 'G' : if ( 3 != VAR_49 - VAR_50 -> VAR_51 || 0 != METHOD_7 ( "GET" , VAR_52 -> VAR_53 , 3 ) ) { return METHOD_8 ( VAR_54 , 400 , VAR_55 ) ; } VAR_56 = VAR_57 ; break ; case 'P' : { const TYPE_14 * VAR_58 ; TYPE_15 VAR_59 = 0 ; TYPE_16 * VAR_60 ; if ( 3 == VAR_61 - VAR_62 -> VAR_63 && 0 == METHOD_9 ( "PUT" , VAR_64 -> VAR_65 , 3 ) ) { VAR_66 = VAR_67 ; } else if ( 4 == VAR_68 - VAR_69 -> VAR_70 && 0 == METHOD_10 ( "POST" , VAR_71 -> VAR_72 , 4 ) ) { VAR_73 = VAR_74 ; } else { return METHOD_11 ( VAR_75 , 400 , VAR_76 ) ; } if ( VAR_77 == ( VAR_78 = METHOD_12 ( VAR_79 -> VAR_80 , ( TYPE_17 ) ( VAR_81 - VAR_82 -> VAR_83 ) , "Content-Length" , & VAR_84 ) ) ) { return METHOD_13 ( VAR_85 , 411 , VAR_86 ) ; } VAR_87 = ( TYPE_18 ) METHOD_14 ( VAR_88 , & VAR_89 , 10 ) ; if ( VAR_90 != VAR_91 + VAR_92 ) { return METHOD_15 ( VAR_93 , 411 , VAR_94 ) ; } break ; } case 'D' : if ( 6 != VAR_95 - VAR_96 -> VAR_97 || 0 != METHOD_16 ( "DELETE" , VAR_98 -> VAR_99 , 6 ) ) { return METHOD_17 ( VAR_100 , 400 , VAR_101 ) ; } VAR_102 = VAR_103 ; break ; case 'H' : if ( 4 != VAR_104 - VAR_105 -> VAR_106 || 0 != METHOD_18 ( "HEAD" , VAR_107 -> VAR_108 , 4 ) ) { return METHOD_19 ( VAR_109 , 400 , VAR_110 ) ; } VAR_111 = VAR_112 ; break ; case 'O' : if ( 7 != VAR_113 - VAR_114 -> VAR_115 || 0 != METHOD_20 ( "OPTIONS" , VAR_116 -> VAR_117 , 7 ) ) { return METHOD_21 ( VAR_118 , 400 , VAR_119 ) ; } VAR_120 = VAR_121 ; break ; case 'C' : if ( 7 != VAR_122 - VAR_123 -> VAR_124 || 0 != METHOD_22 ( "CONNECT" , VAR_125 -> VAR_126 , 7 ) ) { return METHOD_23 ( VAR_127 , 400 , VAR_128 ) ; } VAR_129 = VAR_130 ; break ; default : return METHOD_24 ( VAR_131 , 400 , VAR_132 ) ; } for ( ; '' == * VAR_133 ; VAR_134 ++ ) { if ( '\\0' == * VAR_135 ) { return METHOD_25 ( VAR_136 , 400 , VAR_137 ) ; } } VAR_138 . VAR_139 = VAR_140 ; for ( ; '' != * VAR_141 ; VAR_142 ++ ) { switch ( * VAR_143 ) { case '?' : VAR_144 . VAR_145 = VAR_146 ; VAR_147 = VAR_148 + 1 ; break ; case '\\0' : return METHOD_26 ( VAR_149 , 400 , VAR_150 ) ; default : break ; } } if ( VAR_151 == VAR_152 ) { VAR_153 . VAR_154 = VAR_155 ; VAR_156 = VAR_157 ; VAR_158 = VAR_159 ; } else { VAR_160 = VAR_161 ; } VAR_162 = VAR_163 - VAR_164 -> VAR_165 + 4 + VAR_166 ; * VAR_167 = VAR_168 ; if ( VAR_169 == VAR_170 ) { TYPE_19 VAR_171 [ 20148 ] ; const TYPE_20 * VAR_172 = VAR_173 ; if ( VAR_174 != ( VAR_175 = METHOD_27 ( & VAR_176 , VAR_177 . VAR_178 , ( TYPE_21 ) ( VAR_179 . VAR_180 - VAR_181 . VAR_182 ) ) ) ) { if ( METHOD_28 ( VAR_183 , VAR_184 , VAR_185 ) ) { return METHOD_29 ( VAR_186 , 500 , VAR_187 ) ; } return VAR_188 ; } if ( METHOD_30 ( ) ) { const TYPE_22 * VAR_189 ; TYPE_23 VAR_190 = 0 ; if ( VAR_191 == ( VAR_192 = METHOD_31 ( VAR_193 -> VAR_194 , ( TYPE_24 ) ( VAR_195 - VAR_196 -> VAR_197 ) , "Host" , & VAR_198 ) ) ) { return METHOD_32 ( VAR_199 , 411 , VAR_200 ) ; } ( ( TYPE_25 * ) VAR_201 ) [ VAR_202 ] = '\\0' ; VAR_203 = METHOD_33 ( VAR_204 , VAR_205 , sizeof ( VAR_206 ) ) ; ( ( TYPE_26 * ) VAR_207 ) [ VAR_208 ] = '\\r' ; } if ( VAR_209 . VAR_210 && VAR_211 != ( VAR_212 = METHOD_34 ( & VAR_213 , VAR_214 . VAR_215 , ( TYPE_27 ) ( VAR_216 . VAR_217 - VAR_218 . VAR_219 ) , VAR_220 ) ) ) { if ( METHOD_35 ( VAR_221 , VAR_222 , VAR_223 ) ) { return METHOD_36 ( VAR_224 , 500 , VAR_225 ) ; } return VAR_226 ; } if ( VAR_227 == ( VAR_228 = METHOD_37 ( VAR_229 . VAR_230 , VAR_231 , & VAR_232 ) ) ) { if ( VAR_233 != ( VAR_234 = METHOD_38 ( & VAR_235 , VAR_236 . VAR_237 , ( TYPE_28 ) ( VAR_238 . VAR_239 - VAR_240 . VAR_241 ) , VAR_242 ) ) ) { if ( METHOD_39 ( VAR_243 , VAR_244 , VAR_245 ) ) { return METHOD_40 ( VAR_246 , 500 , VAR_247 ) ; } return VAR_248 ; } if ( VAR_249 == VAR_250 . VAR_251 ) { return METHOD_41 ( VAR_252 , 404 , VAR_253 ) ; } VAR_254 = VAR_255 . VAR_256 ; } } else if ( VAR_257 == ( VAR_258 = METHOD_42 ( VAR_259 . VAR_260 , VAR_261 , & VAR_262 ) ) ) { return METHOD_43 ( VAR_263 , 404 , VAR_264 ) ; } if ( VAR_265 == ( VAR_266 -> VAR_267 = METHOD_44 ( VAR_268 ) ) ) { return METHOD_45 ( VAR_269 , 413 , VAR_270 ) ; } if ( ( TYPE_29 ) VAR_271 -> VAR_272 <= VAR_273 ) { METHOD_46 ( VAR_274 -> VAR_275 -> VAR_276 , VAR_277 -> VAR_278 , VAR_279 -> VAR_280 ) ; if ( ( TYPE_30 ) VAR_281 -> VAR_282 < VAR_283 ) { METHOD_47 ( VAR_284 -> VAR_285 -> VAR_286 + VAR_287 -> VAR_288 , 0 , VAR_289 - VAR_290 -> VAR_291 ) ; } } else { METHOD_48 ( VAR_292 -> VAR_293 -> VAR_294 , VAR_295 -> VAR_296 , VAR_297 ) ; } VAR_298 -> VAR_299 -> VAR_300 [ VAR_301 ] = '\\0' ; VAR_302 -> VAR_303 -> VAR_304 = VAR_305 ; VAR_306 -> VAR_307 -> VAR_308 = VAR_309 ; VAR_310 -> VAR_311 -> VAR_312 = VAR_313 ;  VAR_314 -> VAR_315 -> VAR_316 . VAR_317 = VAR_318 -> VAR_319 -> VAR_320 + ( VAR_321 . VAR_322 - VAR_323 -> VAR_324 ) ;  VAR_325 -> VAR_326 -> VAR_327 . VAR_328 = ( TYPE_31 ) ( VAR_329 . VAR_330 - VAR_331 . VAR_332 ) ; VAR_333 -> VAR_334 -> VAR_335 . VAR_336 = VAR_337 -> VAR_338 -> VAR_339 + ( VAR_340 - VAR_341 -> VAR_342 ) ; VAR_343 -> VAR_344 -> VAR_345 . VAR_346 = ( TYPE_32 ) ( VAR_347 - VAR_348 ) ; VAR_349 -> VAR_350 -> VAR_351 . VAR_352 [ VAR_353 -> VAR_354 -> VAR_355 . VAR_356 ] = '\\0' ; VAR_357 -> VAR_358 -> VAR_359 . VAR_360 = VAR_361 -> VAR_362 -> VAR_363 + ( VAR_364 - VAR_365 -> VAR_366 + 4 ) ; VAR_367 -> VAR_368 -> VAR_369 . VAR_370 = ( unsigned TYPE_33 ) VAR_371 ; VAR_372 = METHOD_49 ( VAR_373 , "\\r\\n" ) ; VAR_374 -> VAR_375 -> VAR_376 . VAR_377 = VAR_378 -> VAR_379 -> VAR_380 + ( VAR_381 + 2 - VAR_382 -> VAR_383 ) ; if ( VAR_384 < VAR_385 ) { VAR_386 -> VAR_387 -> VAR_388 . VAR_389 = ( unsigned TYPE_34 ) ( VAR_390 - VAR_391 - 2 ) ; } else { VAR_392 -> VAR_393 -> VAR_394 . VAR_395 = 0 ; } VAR_396 -> VAR_397 -> VAR_398 = VAR_399 ; VAR_400 -> VAR_401 -> VAR_402 = VAR_403 ; return VAR_404 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 == VAR_5 ) {  METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) ;  } else {  TYPE_5 VAR_9 [ 256 ] ;   TYPE_6 * VAR_10 = & VAR_11 [ 0 ] ;  TYPE_7 VAR_12 , VAR_13 ;  TYPE_8 VAR_14 [ 16 ] , VAR_15 [ 16 ] ;  const TYPE_9 VAR_16 = VAR_17 [ VAR_18 ] ; for ( VAR_19 = 0 ; VAR_20 < 16 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < 16 ; ++ VAR_24 ) VAR_25 [ VAR_26 ] = VAR_27 [ VAR_28 * VAR_29 + VAR_30 ] * 4 ; VAR_31 . METHOD_2 ( VAR_32 , VAR_33 ) ; for ( VAR_34 = 0 ; VAR_35 < 16 ; ++ VAR_36 )  VAR_37 [ VAR_38 * 16 + VAR_39 ] = ( VAR_40 [ VAR_41 ] + 1 + ( VAR_42 [ VAR_43 ] < 0 ) ) >> 2 ;  } for ( VAR_44 = 0 ; VAR_45 < 16 ; ++ VAR_46 ) { for ( VAR_47 = 0 ; VAR_48 < 16 ; ++ VAR_49 ) VAR_50 [ VAR_51 ] = VAR_52 [ VAR_53 + VAR_54 * 16 ] ; VAR_55 . METHOD_3 ( VAR_56 , VAR_57 ) ; for ( VAR_58 = 0 ; VAR_59 < 16 ; ++ VAR_60 ) VAR_61 [ VAR_62 + VAR_63 * 16 ] = VAR_64 [ VAR_65 ] ; } } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , const TYPE_5 * const * VAR_4 , TYPE_6 VAR_5 , const TYPE_7 * VAR_6 , struct STRUCT_OR_UNION_0 * VAR_7 , TYPE_8 * * VAR_8 , TYPE_9 * VAR_9 , TYPE_10 * * VAR_10 ) { TYPE_11 VAR_11 = VAR_12 ; TYPE_12 TYPE_13 VAR_13 = - 1 ; TYPE_14 TYPE_15 * VAR_14 = METHOD_1 ( "export-desktop-XXXXXX" ) ; g_autoptr ( TYPE_16 ) VAR_15 = VAR_16 ; TYPE_17 TYPE_18 * VAR_17 = VAR_18 ; TYPE_19 VAR_19 ; TYPE_20 TYPE_21 * VAR_20 = VAR_21 ; TYPE_22 VAR_22 ; g_autoptr ( TYPE_23 ) VAR_23 = VAR_24 ; TYPE_24 TYPE_25 * VAR_25 = VAR_26 ; TYPE_26 VAR_27 ; g_auto ( TYPE_27 ) VAR_28 = VAR_29 ; g_auto ( TYPE_28 ) VAR_30 = VAR_31 ; TYPE_29 * VAR_32 = VAR_33 ; TYPE_30 TYPE_31 * VAR_34 = METHOD_2 ( VAR_35 ) ; TYPE_32 TYPE_33 * VAR_36 = METHOD_3 ( VAR_37 ) ; TYPE_34 TYPE_35 * VAR_38 = METHOD_4 ( VAR_39 ) ; TYPE_36 VAR_40 ; if ( ! METHOD_5 ( VAR_41 , VAR_42 , & VAR_43 , VAR_44 , VAR_45 ) ) goto VAR_46 ; if ( ! METHOD_6 ( VAR_47 , VAR_48 , & VAR_49 , & VAR_50 , VAR_51 ) ) goto VAR_52 ; VAR_53 = METHOD_7 ( ) ; if ( ! METHOD_8 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ) goto VAR_59 ; if ( METHOD_9 ( VAR_60 , ".service" ) ) { TYPE_37 TYPE_38 * VAR_61 = VAR_62 ; TYPE_39 TYPE_40 * VAR_63 = METHOD_10 ( VAR_64 , METHOD_11 ( VAR_65 ) - METHOD_12 ( ".service" ) ) ; VAR_66 = METHOD_13 ( VAR_67 , "D-BUSService" , "Name" , VAR_68 ) ; if ( VAR_69 == VAR_70 || METHOD_14 ( VAR_71 , VAR_72 ) != 0 ) { return METHOD_15 ( VAR_73 , VAR_74 , METHOD_16 ( "D-Busservicefile\'%s\'haswrongname" ) , VAR_75 ) ; } } if ( METHOD_17 ( VAR_76 , ".desktop" ) ) { TYPE_41 VAR_77 ; g_auto ( TYPE_42 ) VAR_78 = METHOD_18 ( VAR_79 , "Application" , "tags" , & VAR_80 , VAR_81 ) ; if ( VAR_82 != VAR_83 ) { METHOD_19 ( VAR_84 , VAR_85 , "X-Flatpak-Tags" , ( const TYPE_43 * const * ) VAR_86 , VAR_87 ) ; } METHOD_20 ( VAR_88 , VAR_89 , "X-Flatpak" , VAR_90 ) ; if ( VAR_91 != VAR_92 ) { const TYPE_44 * VAR_93 = "X-Flatpak-RenamedFrom" ; g_auto ( TYPE_45 ) VAR_94 = METHOD_21 ( VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 ) ; g_autoptr ( TYPE_46 ) VAR_100 = METHOD_22 ( VAR_101 ) ; g_autoptr ( TYPE_47 ) VAR_102 = METHOD_23 ( VAR_103 , VAR_104 ) ; const TYPE_48 * VAR_105 ; for ( VAR_106 = 0 ; VAR_107 != VAR_108 && VAR_109 [ VAR_110 ] != VAR_111 ; VAR_112 ++ ) { if ( ! METHOD_24 ( VAR_113 , VAR_114 [ VAR_115 ] ) ) { TYPE_49 * VAR_116 = METHOD_25 ( VAR_117 [ VAR_118 ] ) ; METHOD_26 ( VAR_119 , VAR_120 , VAR_121 ) ; METHOD_27 ( VAR_122 , METHOD_28 ( & VAR_123 ) ) ; } } METHOD_29 ( METHOD_30 ( VAR_124 , VAR_125 ) ) ; VAR_126 = VAR_127 + METHOD_31 ( VAR_128 ) ; for ( VAR_129 = 0 ; VAR_130 [ VAR_131 ] != VAR_132 ; VAR_133 ++ ) { TYPE_50 TYPE_51 * VAR_134 = METHOD_32 ( VAR_135 [ VAR_136 ] , VAR_137 , VAR_138 ) ; if ( ! METHOD_33 ( VAR_139 , VAR_140 ) ) { METHOD_34 ( VAR_141 , VAR_142 , VAR_143 ) ; METHOD_35 ( VAR_144 , METHOD_36 ( & VAR_145 ) ) ; } } if ( VAR_146 -> VAR_147 > 0 ) { METHOD_37 ( VAR_148 , VAR_149 ) ; METHOD_38 ( VAR_150 , VAR_151 , VAR_152 , ( const TYPE_52 * const * ) VAR_153 -> VAR_154 , VAR_155 -> VAR_156 - 1 ) ; } } } VAR_157 = METHOD_39 ( VAR_158 , VAR_159 ) ; for ( VAR_160 = 0 ; VAR_161 [ VAR_162 ] != VAR_163 ; VAR_164 ++ ) { g_auto ( TYPE_53 ) VAR_165 = METHOD_40 ( VAR_166 , VAR_167 [ VAR_168 ] , "X-Flatpak-RunOptions" , VAR_169 , VAR_170 ) ; TYPE_54 TYPE_55 * VAR_171 = METHOD_41 ( VAR_172 ) ; METHOD_42 ( VAR_173 , VAR_174 [ VAR_175 ] , "X-Flatpak-RunOptions" , VAR_176 ) ; METHOD_43 ( VAR_177 , VAR_178 [ VAR_179 ] , "TryExec" , VAR_180 ) ; METHOD_44 ( VAR_181 , VAR_182 [ VAR_183 ] , "X-GNOME-Bugzilla-ExtraInfoScript" , VAR_184 ) ; VAR_185 = METHOD_45 ( "" ) ; METHOD_46 ( VAR_186 , VAR_187 "/flatpakrun--branch=%s--arch=%s" , VAR_188 , VAR_189 ) ; if ( VAR_190 != VAR_191 ) METHOD_47 ( VAR_192 , "%s" , VAR_193 ) ; VAR_194 = METHOD_48 ( VAR_195 , VAR_196 [ VAR_197 ] , "Exec" , VAR_198 ) ; if ( VAR_199 && METHOD_49 ( VAR_200 , & VAR_201 , & VAR_202 , VAR_203 ) && VAR_204 >= 1 ) { TYPE_56 VAR_205 ; TYPE_57 TYPE_58 * VAR_206 = METHOD_50 ( VAR_207 [ 0 ] ) ; METHOD_51 ( VAR_208 , "--command=%s" , VAR_209 ) ; for ( VAR_210 = 1 ; VAR_211 < VAR_212 ; VAR_213 ++ ) { if ( METHOD_52 ( VAR_214 [ VAR_215 ] , "%f" ) == 0 || METHOD_53 ( VAR_216 [ VAR_217 ] , "%u" ) == 0 ) { METHOD_54 ( VAR_218 , "--file-forwarding" ) ; break ; } } METHOD_55 ( VAR_219 , "" ) ; METHOD_56 ( VAR_220 , VAR_221 ) ; for ( VAR_222 = 1 ; VAR_223 < VAR_224 ; VAR_225 ++ ) { TYPE_59 TYPE_60 * VAR_226 = METHOD_57 ( VAR_227 [ VAR_228 ] ) ; if ( METHOD_58 ( VAR_229 , "%f" ) == 0 ) METHOD_59 ( VAR_230 , "@@%s@@" , VAR_231 ) ; else if ( METHOD_60 ( VAR_232 , "%u" ) == 0 ) METHOD_61 ( VAR_233 , "@@u%s@@" , VAR_234 ) ; else if ( METHOD_62 ( VAR_235 , "@@" ) )  METHOD_63 ( METHOD_64 ( "SkippinginvalidExecargument%s\\n" ) , VAR_236 ) ;  else METHOD_65 ( VAR_237 , "%s" , VAR_238 ) ; } } else { METHOD_66 ( VAR_239 , "" ) ; METHOD_67 ( VAR_240 , VAR_241 ) ; } METHOD_68 ( VAR_242 , VAR_243 [ VAR_244 ] , VAR_245 , VAR_246 -> VAR_247 ) ; } VAR_248 = METHOD_69 ( VAR_249 , & VAR_250 , VAR_251 ) ; if ( VAR_252 == VAR_253 ) goto VAR_254 ; if ( ! METHOD_70 ( VAR_255 , 0755 , VAR_256 , & VAR_257 , VAR_258 , VAR_259 ) ) goto VAR_260 ; if ( ! METHOD_71 ( VAR_261 , VAR_262 , VAR_263 , VAR_264 , VAR_265 , VAR_266 ) ) goto VAR_267 ; if ( ! METHOD_72 ( VAR_268 , VAR_269 , VAR_270 ) ) goto VAR_271 ; if ( VAR_272 ) * VAR_273 = METHOD_73 ( & VAR_274 ) ; VAR_275 = VAR_276 ; VAR_277 : if ( VAR_278 != VAR_279 ) METHOD_74 ( VAR_280 , VAR_281 ) ; return VAR_282 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * * VAR_0 ) { TYPE_1 VAR_1 = 1 ; struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ;  METHOD_1 ( VAR_5 == VAR_6 ) ;  METHOD_2 ( VAR_7 , "Unfoldingthemeta-tree" ) ; METHOD_3 ( VAR_8 ) ; METHOD_4 ( & VAR_9 ) ; METHOD_5 ( VAR_10 , "done.\\n\\n" ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_11 , & VAR_12 , VAR_13 ) { if ( VAR_14 -> VAR_15 == 0 ) { METHOD_8 ( VAR_16 , VAR_17 * sizeof ( struct STRUCT_OR_UNION_3 ) ) ; METHOD_9 ( & VAR_18 [ VAR_19 - 1 ] , & VAR_20 -> VAR_21 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_22 ++ ; } } METHOD_10 ( VAR_23 , VAR_24 * sizeof ( struct STRUCT_OR_UNION_5 ) ) ; VAR_25 [ VAR_26 - 1 ] . VAR_27 = VAR_28 ; * VAR_29 = VAR_30 ; return ( VAR_31 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { METHOD_1 ( VAR_2 != VAR_3 ) ; METHOD_2 ( VAR_4 != VAR_5 ) ; METHOD_3 ( * VAR_6 != '\\0' ) ;  TYPE_3 * VAR_7 = METHOD_4 ( METHOD_5 ( VAR_8 ) + 5 ) ;   if ( ! VAR_9 ) {  METHOD_6 ( "%sunabletoallocatememoryforfilename." , VAR_10 ) ; return VAR_11 ; } METHOD_7 ( VAR_12 , VAR_13 ) ; METHOD_8 ( VAR_14 , ".new" ) ; TYPE_4 * VAR_15 = METHOD_9 ( VAR_16 , "wt" ) ; if ( ! VAR_17 ) { METHOD_10 ( "%sunabletowritefile\'%s\':%s" , VAR_18 , VAR_19 , METHOD_11 ( VAR_20 ) ) ; goto VAR_21 ; } for ( const TYPE_5 * VAR_22 = METHOD_12 ( VAR_23 -> VAR_24 ) ; VAR_25 != METHOD_13 ( VAR_26 -> VAR_27 ) ; VAR_28 = METHOD_14 ( VAR_29 ) ) { const TYPE_6 * VAR_30 = ( const TYPE_7 * ) METHOD_15 ( VAR_31 ) ;  METHOD_16 ( VAR_32 , "[%s]\\n" , VAR_33 -> VAR_34 ) ;  for ( const TYPE_8 * VAR_35 = METHOD_17 ( VAR_36 -> VAR_37 ) ; VAR_38 != METHOD_18 ( VAR_39 -> VAR_40 ) ; VAR_41 = METHOD_19 ( VAR_42 ) ) { const TYPE_9 * VAR_43 = ( const TYPE_10 * ) METHOD_20 ( VAR_44 ) ;  METHOD_21 ( VAR_45 , "%s=%s\\n" , VAR_46 -> VAR_47 , VAR_48 -> VAR_49 ) ;  } if ( METHOD_22 ( VAR_50 ) != METHOD_23 ( VAR_51 -> VAR_52 ) )  METHOD_24 ( '\\n' , VAR_53 ) ;  } METHOD_25 ( VAR_54 ) ;  METHOD_26 ( VAR_55 ) ;  if ( METHOD_27 ( VAR_56 , VAR_57 | VAR_58 | VAR_59 | VAR_60 ) == - 1 ) { METHOD_28 ( "%sunabletochangefilepermissions\'%s\':%s" , VAR_61 , VAR_62 , METHOD_29 ( VAR_63 ) ) ; goto VAR_64 ; } if ( METHOD_30 ( VAR_65 , VAR_66 ) == - 1 ) { METHOD_31 ( "%sunabletocommitfile\'%s\':%s" , VAR_67 , VAR_68 , METHOD_32 ( VAR_69 ) ) ; goto VAR_70 ; }  METHOD_33 ( VAR_71 ) ;  return VAR_72 ;  VAR_73 : ;  METHOD_34 ( VAR_74 ) ;  METHOD_35 ( VAR_75 ) ;  return VAR_76 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 * VAR_1 , TYPE_2 VAR_2 , unsigned TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 ; unsigned TYPE_7 * VAR_8 = VAR_9 ; VAR_10 -- ; while ( VAR_11 < VAR_12 ) { VAR_13 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_14 + VAR_15 ) ;  switch ( VAR_16 -> VAR_17 ) {  case 1 : if ( VAR_18 -> VAR_19 > 0 )  break ;  case 2 : if ( VAR_20 == 0 ) return - VAR_21 ; VAR_22 = VAR_23 ; * VAR_24 ++ = '/' ; VAR_25 -- ; break ; case 3 : if ( VAR_26 < 3 ) return - VAR_27 ; METHOD_1 ( VAR_28 , "../" , 3 ) ; VAR_29 += 3 ; VAR_30 -= 3 ; break ; case 4 : if ( VAR_31 < 2 ) return - VAR_32 ; METHOD_2 ( VAR_33 , "./" , 2 ) ; VAR_34 += 2 ; VAR_35 -= 2 ; break ;  case 5 :  VAR_36 = METHOD_3 ( VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 , VAR_42 , VAR_43 ) ; VAR_44 += VAR_45 ; VAR_46 -= VAR_47 ; if ( VAR_48 == 0 ) return - VAR_49 ; * VAR_50 ++ = '/' ; VAR_51 -- ; break ; }  VAR_52 += sizeof ( struct STRUCT_OR_UNION_3 ) + VAR_53 -> VAR_54 ;  } if ( VAR_55 > VAR_56 + 1 ) VAR_57 [ - 1 ] = '\\0' ; else VAR_58 [ 0 ] = '\\0' ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , register const TYPE_4 * VAR_3 ) { register const struct STRUCT_OR_UNION_0 * VAR_4 ; register const TYPE_5 * VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; struct STRUCT_OR_UNION_1 VAR_10 ; METHOD_1 ( ( VAR_11 , "%d" , VAR_12 ) ) ; VAR_13 = 0 ; VAR_14 = ( const struct STRUCT_OR_UNION_2 * ) VAR_15 ; if ( ! METHOD_2 ( VAR_16 , VAR_17 , VAR_18 ) ) goto VAR_19 ; VAR_20 = ( METHOD_3 ( & VAR_21 -> VAR_22 . VAR_23 ) == VAR_24 ) ; VAR_25 = METHOD_4 ( & VAR_26 -> VAR_27 . VAR_28 ) ; if ( ! VAR_29 && VAR_30 < VAR_31 ) VAR_32 = VAR_33 [ VAR_34 ] ; METHOD_5 ( ( VAR_35 , "%s" , METHOD_6 ( VAR_36 , "proc-%u" , VAR_37 ) ) ) ; switch ( VAR_38 ) { case VAR_39 : case VAR_40 : case VAR_41 : case VAR_42 : case VAR_43 : case VAR_44 : if ( ( VAR_45 = METHOD_7 ( VAR_46 , VAR_47 , VAR_48 ) ) != VAR_49 && METHOD_8 ( VAR_50 , VAR_51 , VAR_52 ) != VAR_53 ) return ; break ; case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : if ( ( VAR_59 = METHOD_9 ( VAR_60 , VAR_61 , VAR_62 ) ) != VAR_63 && METHOD_10 ( VAR_64 , VAR_65 , VAR_66 ) != VAR_67 ) return ; break ; case VAR_68 : if ( ( VAR_69 = METHOD_11 ( VAR_70 , VAR_71 , VAR_72 ) ) != VAR_73 && ( VAR_74 = METHOD_12 ( VAR_75 , VAR_76 , VAR_77 ) ) != VAR_78 ) { METHOD_13 ( VAR_79 [ 0 ] ) ; VAR_80 = METHOD_14 ( & VAR_81 [ 0 ] ) ; if ( VAR_82 & ~ VAR_83 ) { METHOD_15 ( ( VAR_84 , "%04x" , VAR_85 ) ) ; } else if ( ( VAR_86 & VAR_87 ) == VAR_88 ) { METHOD_16 ( ( VAR_89 , "NFS_ACCESS_FULL" ) ) ; } else { TYPE_10 VAR_90 = '' ; if ( VAR_91 & VAR_92 ) { METHOD_17 ( ( VAR_93 , "NFS_ACCESS_READ" ) ) ; VAR_94 = '|' ; } if ( VAR_95 & VAR_96 ) { METHOD_18 ( ( VAR_97 , "%cNFS_ACCESS_LOOKUP" , VAR_98 ) ) ; VAR_99 = '|' ; } if ( VAR_100 & VAR_101 ) { METHOD_19 ( ( VAR_102 , "%cNFS_ACCESS_MODIFY" , VAR_103 ) ) ; VAR_104 = '|' ; } if ( VAR_105 & VAR_106 ) { METHOD_20 ( ( VAR_107 , "%cNFS_ACCESS_EXTEND" , VAR_108 ) ) ; VAR_109 = '|' ; } if ( VAR_110 & VAR_111 ) { METHOD_21 ( ( VAR_112 , "%cNFS_ACCESS_DELETE" , VAR_113 ) ) ; VAR_114 = '|' ; } if ( VAR_115 & VAR_116 ) METHOD_22 ( ( VAR_117 , "%cNFS_ACCESS_EXECUTE" , VAR_118 ) ) ; } return ; } break ; case VAR_119 : if ( ( VAR_120 = METHOD_23 ( VAR_121 , VAR_122 , VAR_123 ) ) != VAR_124 && ( VAR_125 = METHOD_24 ( VAR_126 , VAR_127 , VAR_128 ) ) != VAR_129 ) { if ( VAR_130 ) { METHOD_25 ( VAR_131 [ 2 ] ) ; METHOD_26 ( ( VAR_132 , "%ubytes@%" VAR_133 , METHOD_27 ( & VAR_134 [ 2 ] ) , METHOD_28 ( & VAR_135 [ 0 ] ) ) ) ; } else { METHOD_29 ( VAR_136 [ 1 ] ) ; METHOD_30 ( ( VAR_137 , "%ubytes@%u" , METHOD_31 ( & VAR_138 [ 1 ] ) , METHOD_32 ( & VAR_139 [ 0 ] ) ) ) ; } return ; } break ; case VAR_140 : if ( ( VAR_141 = METHOD_33 ( VAR_142 , VAR_143 , VAR_144 ) ) != VAR_145 && ( VAR_146 = METHOD_34 ( VAR_147 , VAR_148 , VAR_149 ) ) != VAR_150 ) { if ( VAR_151 ) {  METHOD_35 ( VAR_152 [ 2 ] ) ;  METHOD_36 ( ( VAR_153 , "%u(%u)bytes@%" VAR_154 , METHOD_37 ( & VAR_155 [ 4 ] ) , METHOD_38 ( & VAR_156 [ 2 ] ) , METHOD_39 ( & VAR_157 [ 0 ] ) ) ) ; if ( VAR_158 -> VAR_159 ) {  VAR_160 += 3 ;  METHOD_40 ( VAR_161 [ 0 ] ) ; METHOD_41 ( ( VAR_162 , "<%s>" , METHOD_42 ( VAR_163 , VAR_164 , METHOD_43 ( VAR_165 ) ) ) ) ; } } else { METHOD_44 ( VAR_166 [ 3 ] ) ; METHOD_45 ( ( VAR_167 , "%u(%u)bytes@%u(%u)" , METHOD_46 ( & VAR_168 [ 3 ] ) , METHOD_47 ( & VAR_169 [ 2 ] ) , METHOD_48 ( & VAR_170 [ 1 ] ) , METHOD_49 ( & VAR_171 [ 0 ] ) ) ) ; } return ; } break ; case VAR_172 : if ( ( VAR_173 = METHOD_50 ( VAR_174 , VAR_175 , VAR_176 ) ) != VAR_177 && ( VAR_178 = METHOD_51 ( VAR_179 , VAR_180 , VAR_181 ) ) != VAR_182 ) { METHOD_52 ( ( VAR_183 , "->" ) ) ; if ( VAR_184 && ( VAR_185 = METHOD_53 ( VAR_186 , VAR_187 , & VAR_188 ) ) == VAR_189 ) break ; if ( METHOD_54 ( VAR_190 , VAR_191 ) == VAR_192 ) break ; if ( VAR_193 && VAR_194 -> VAR_195 ) METHOD_55 ( VAR_196 , & VAR_197 , VAR_198 -> VAR_199 ) ; return ; } break ; case VAR_200 : if ( ( VAR_201 = METHOD_56 ( VAR_202 , VAR_203 , VAR_204 ) ) != VAR_205 && ( VAR_206 = METHOD_57 ( VAR_207 , VAR_208 , VAR_209 ) ) != VAR_210 ) { METHOD_58 ( * VAR_211 ) ; VAR_212 = ( TYPE_11 ) METHOD_59 ( VAR_213 ) ; VAR_214 ++ ; if ( ( VAR_215 = METHOD_60 ( VAR_216 , VAR_217 , & VAR_218 ) ) == VAR_219 ) break ; METHOD_61 ( ( VAR_220 , "%s" , METHOD_62 ( VAR_221 , "unk-ft%d" , VAR_222 ) ) ) ; if ( VAR_223 -> VAR_224 && ( VAR_225 == VAR_226 || VAR_227 == VAR_228 ) ) { METHOD_63 ( VAR_229 [ 1 ] ) ; METHOD_64 ( ( VAR_230 , "%u/%u" , METHOD_65 ( & VAR_231 [ 0 ] ) , METHOD_66 ( & VAR_232 [ 1 ] ) ) ) ; VAR_233 += 2 ; } if ( VAR_234 -> VAR_235 ) METHOD_67 ( VAR_236 , & VAR_237 , VAR_238 -> VAR_239 ) ; return ; } break ; case VAR_240 : if ( ( VAR_241 = METHOD_68 ( VAR_242 , VAR_243 , VAR_244 ) ) != VAR_245 && ( VAR_246 = METHOD_69 ( VAR_247 , VAR_248 , VAR_249 ) ) != VAR_250 ) { METHOD_70 ( ( VAR_251 , "->" ) ) ; if ( METHOD_71 ( VAR_252 , VAR_253 , VAR_254 ) != VAR_255 ) return ; } break ; case VAR_256 : if ( ( VAR_257 = METHOD_72 ( VAR_258 , VAR_259 , VAR_260 ) ) != VAR_261 && ( VAR_262 = METHOD_73 ( VAR_263 , VAR_264 , VAR_265 ) ) != VAR_266 ) { METHOD_74 ( ( VAR_267 , "->" ) ) ; if ( METHOD_75 ( VAR_268 , VAR_269 , VAR_270 ) != VAR_271 ) return ; } break ; case VAR_272 : if ( ( VAR_273 = METHOD_76 ( VAR_274 , VAR_275 , VAR_276 ) ) != VAR_277 && ( VAR_278 = METHOD_77 ( VAR_279 , VAR_280 , VAR_281 ) ) != VAR_282 ) { if ( VAR_283 ) { METHOD_78 ( VAR_284 [ 4 ] ) ; METHOD_79 ( ( VAR_285 , "%ubytes@%" VAR_286 , METHOD_80 ( & VAR_287 [ 4 ] ) , METHOD_81 ( & VAR_288 [ 0 ] ) ) ) ; if ( VAR_289 -> VAR_290 ) METHOD_82 ( ( VAR_291 , "verf%08x%08x" , VAR_292 [ 2 ] , VAR_293 [ 3 ] ) ) ; } else { METHOD_83 ( VAR_294 [ 1 ] ) ; METHOD_84 ( ( VAR_295 , "%ubytes@%d" , METHOD_85 ( & VAR_296 [ 1 ] ) , METHOD_86 ( & VAR_297 [ 0 ] ) ) ) ; } return ; } break ; case VAR_298 : if ( ( VAR_299 = METHOD_87 ( VAR_300 , VAR_301 , VAR_302 ) ) != VAR_303 && ( VAR_304 = METHOD_88 ( VAR_305 , VAR_306 , VAR_307 ) ) != VAR_308 ) { METHOD_89 ( VAR_309 [ 4 ] ) ; METHOD_90 ( ( VAR_310 , "%ubytes@%" VAR_311 , METHOD_91 ( & VAR_312 [ 4 ] ) , METHOD_92 ( & VAR_313 [ 0 ] ) ) ) ; if ( VAR_314 -> VAR_315 ) { METHOD_93 ( VAR_316 [ 5 ] ) ; METHOD_94 ( ( VAR_317 , "max%uverf%08x%08x" , METHOD_95 ( & VAR_318 [ 5 ] ) , VAR_319 [ 2 ] , VAR_320 [ 3 ] ) ) ; } return ; } break ; case VAR_321 : if ( ( VAR_322 = METHOD_96 ( VAR_323 , VAR_324 , VAR_325 ) ) != VAR_326 && ( VAR_327 = METHOD_97 ( VAR_328 , VAR_329 , VAR_330 ) ) != VAR_331 ) { METHOD_98 ( VAR_332 [ 2 ] ) ; METHOD_99 ( ( VAR_333 , "%ubytes@%" VAR_334 , METHOD_100 ( & VAR_335 [ 2 ] ) , METHOD_101 ( & VAR_336 [ 0 ] ) ) ) ; return ; } break ; default : return ; } VAR_337 : if ( ! VAR_338 ) METHOD_102 ( ( VAR_339 , "%s" , VAR_340 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 VAR_3 = 0 ; TYPE_4 VAR_4 = VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; const TYPE_6 * VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 = 0 ; if ( ( VAR_11 == '<' ) && ( METHOD_1 ( 1 ) == '?' ) ) { TYPE_9 VAR_12 = VAR_13 -> VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; METHOD_2 ( 2 ) ; VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 ) ; if ( VAR_24 != VAR_25 ) { if ( ( VAR_26 == '?' ) && ( METHOD_4 ( 1 ) == '>' ) ) { if ( VAR_27 != VAR_28 -> VAR_29 ) { METHOD_5 ( VAR_30 , VAR_31 , "PIdeclarationdoesn\'tstartandstopinthesameentity\\n" ) ; } METHOD_6 ( 2 ) ; if ( ( VAR_32 -> VAR_33 ) && ( ! VAR_34 -> VAR_35 ) && ( VAR_36 -> VAR_37 -> METHOD_7 != VAR_38 ) ) VAR_39 -> VAR_40 -> METHOD_8 ( VAR_41 -> VAR_42 ,  VAR_43 , VAR_44 ) ;  VAR_45 -> VAR_46 = VAR_47 ; return ; } VAR_48 = ( TYPE_10 * ) METHOD_9 ( VAR_49 * sizeof ( TYPE_11 ) ) ; if ( VAR_50 == VAR_51 ) { METHOD_10 ( VAR_52 , VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; return ; } VAR_57 = VAR_58 ; if ( ! METHOD_11 ( VAR_59 ) ) { METHOD_12 ( VAR_60 , VAR_61 , "ParsePI:PI%sspaceexpected\\n" , VAR_62 ) ; } VAR_63 ; VAR_64 = METHOD_13 ( VAR_65 ) ; while ( METHOD_14 ( VAR_66 ) && ( ( VAR_67 != '?' ) || ( METHOD_15 ( 1 ) != '>' ) ) ) { if ( VAR_68 + 5 >= VAR_69 ) { TYPE_12 * VAR_70 ; VAR_71 *= 2 ; VAR_72 = ( TYPE_13 * ) METHOD_16 ( VAR_73 , VAR_74 * sizeof ( TYPE_14 ) ) ; if ( VAR_75 == VAR_76 ) { METHOD_17 ( VAR_77 , VAR_78 ) ; METHOD_18 ( VAR_79 ) ; VAR_80 -> VAR_81 = VAR_82 ; return ; } VAR_83 = VAR_84 ; } VAR_85 ++ ; if ( VAR_86 > 50 ) { VAR_87 ; VAR_88 = 0 ; } METHOD_19 ( VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; METHOD_20 ( VAR_93 ) ; VAR_94 = METHOD_21 ( VAR_95 ) ; if ( VAR_96 == 0 ) { VAR_97 ; VAR_98 ; VAR_99 = METHOD_22 ( VAR_100 ) ; } } VAR_101 [ VAR_102 ] = 0 ; if ( VAR_103 != '?' ) { METHOD_23 ( VAR_104 , VAR_105 , "ParsePI:PI%sneverend...\\n" , VAR_106 ) ; } else { if ( VAR_107 != VAR_108 -> VAR_109 ) { METHOD_24 ( VAR_110 , VAR_111 , "PIdeclarationdoesn\'tstartandstopinthesameentity\\n" ) ; } METHOD_25 ( 2 ) ; TYPE_15 TYPE_16 if ( ( ( VAR_112 == XML_PARSER_MISC ) || ( VAR_113 == VAR_114 ) ) && ( METHOD_26 ( VAR_115 , VAR_116 ) ) ) { TYPE_17 VAR_117 = METHOD_27 ( ) ; if ( ( VAR_118 == VAR_119 ) || ( VAR_120 == VAR_121 ) ) METHOD_28 ( VAR_122 , VAR_123 ) ; } if ( ( VAR_124 -> VAR_125 ) && ( ! VAR_126 -> VAR_127 ) && ( VAR_128 -> VAR_129 -> METHOD_29 != VAR_130 ) ) VAR_131 -> VAR_132 -> METHOD_30 ( VAR_133 -> VAR_134 , VAR_135 , VAR_136 ) ; } METHOD_31 ( VAR_137 ) ; } else { METHOD_32 ( VAR_138 , VAR_139 , VAR_140 ) ; }  VAR_141 -> VAR_142 = VAR_143 ;  } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_4 * VAR_9 = ( struct STRUCT_OR_UNION_5 * ) VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 ; unsigned TYPE_5 VAR_13 , VAR_14 ; TYPE_6 VAR_15 , VAR_16 = 0 ; TYPE_7 VAR_17 ; TYPE_8 VAR_18 = METHOD_2 ( VAR_19 ) ;  TYPE_9 VAR_20 ;  if ( VAR_21 ) * VAR_22 = sizeof ( * VAR_23 ) ; if ( VAR_24 & VAR_25 ) return METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 : VAR_30 = METHOD_4 ( VAR_31 , VAR_32 | ( VAR_33 ? VAR_34 : 0 ) , & VAR_35 , & VAR_36 , & VAR_37 ) ; if ( ! VAR_38 ) goto VAR_39 ; VAR_40 = VAR_41 -> VAR_42 - sizeof ( struct STRUCT_OR_UNION_7 ) ; VAR_43 = VAR_44 ; if ( VAR_45 > VAR_46 ) VAR_47 = VAR_48 ; else if ( VAR_49 < VAR_50 ) VAR_51 -> VAR_52 |= VAR_53 ; if ( VAR_54 < VAR_55 || METHOD_5 ( VAR_56 ) -> VAR_57 ) { if ( METHOD_6 ( VAR_58 ) ) goto VAR_59 ; } if ( METHOD_7 ( VAR_60 ) ) VAR_61 = METHOD_8 ( VAR_62 , sizeof ( struct STRUCT_OR_UNION_8 ) , VAR_63 -> VAR_64 , VAR_65 ) ; else { VAR_66 = METHOD_9 ( VAR_67 , sizeof ( struct STRUCT_OR_UNION_9 ) , VAR_68 -> VAR_69 ) ; if ( VAR_70 == - VAR_71 ) goto VAR_72 ; } if ( METHOD_10 ( VAR_73 ) ) { METHOD_11 ( VAR_74 , METHOD_12 ) ; if ( ! VAR_75 ) { METHOD_13 ( & VAR_76 -> VAR_77 ) ; METHOD_14 ( METHOD_15 ( VAR_78 ) , VAR_79 , VAR_80 ) ; } goto VAR_81 ; } if ( ! VAR_82 ) METHOD_16 ( METHOD_17 ( VAR_83 ) , VAR_84 , VAR_85 ) ; METHOD_18 ( VAR_86 , VAR_87 , VAR_88 ) ; if ( VAR_89 ) { VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = METHOD_19 ( VAR_95 ) -> VAR_96 ; VAR_97 -> VAR_98 . VAR_99 = METHOD_20 ( VAR_100 ) -> VAR_101 ; METHOD_21 ( VAR_102 -> VAR_103 , 0 , sizeof ( VAR_104 -> VAR_105 ) ) ;  }  if ( VAR_106 -> VAR_107 ) METHOD_22 ( VAR_108 , VAR_109 ) ; VAR_110 = VAR_111 ; if ( VAR_112 & VAR_113 ) VAR_114 = VAR_115 ; VAR_116 : METHOD_23 ( VAR_117 , VAR_118 ) ; VAR_119 : return VAR_120 ; VAR_121 : VAR_122 = METHOD_24 ( VAR_123 ) ; if ( ! METHOD_25 ( VAR_124 , VAR_125 , VAR_126 ) ) { METHOD_26 ( METHOD_27 ( VAR_127 ) , VAR_128 , VAR_129 ) ; METHOD_28 ( METHOD_29 ( VAR_130 ) , VAR_131 , VAR_132 ) ; } METHOD_30 ( VAR_133 , VAR_134 ) ; if ( VAR_135 ) return - VAR_136 ; VAR_137 -> VAR_138 &= ~ VAR_139 ; goto VAR_140 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , register TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 , VAR_4 , VAR_5 ;  const TYPE_5 * VAR_6 ; const TYPE_6 * VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = VAR_11 ; if ( ! VAR_12 -> VAR_13 ) { METHOD_1 ( ( VAR_14 , ",RPKI-RTR" ) ) ; return ; }  while ( VAR_15 >= sizeof ( TYPE_7 ) ) {  METHOD_2 ( * VAR_16 , sizeof ( TYPE_8 ) ) ; VAR_17 = ( const TYPE_9 * ) VAR_18 ; VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 -> VAR_24 ) ; METHOD_4 ( * VAR_25 , VAR_26 ) ; if ( ! VAR_27 || ! VAR_28 ) { break ; } if ( VAR_29 < VAR_30 ) { goto VAR_31 ; }  if ( METHOD_5 ( VAR_32 , VAR_33 , 8 ) )  goto VAR_34 ; VAR_35 -= VAR_36 ;  VAR_37 += VAR_38 ;  }  return ;  VAR_39 : METHOD_6 ( ( VAR_40 , "\\n\\t%s" , VAR_41 ) ) ; }
const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , register const TYPE_3 * VAR_2 ) { register TYPE_4 VAR_3 , VAR_4 ; register const TYPE_5 * VAR_5 = VAR_6 ; register TYPE_6 VAR_7 = 0 ;  TYPE_7 VAR_8 ;  TYPE_8 VAR_9 ;  TYPE_9 VAR_10 = VAR_11 -> VAR_12 - VAR_13 ;  if ( ( VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ) == ( TYPE_10 ) - 1 ) return ( VAR_17 ) ; if ( ! METHOD_2 ( * VAR_18 , 1 ) ) return ( VAR_19 ) ;  VAR_20 = 1 ;  if ( ( ( VAR_21 = * VAR_22 ++ ) & VAR_23 ) != VAR_24 ) { VAR_25 = 0 ; VAR_26 = VAR_27 + VAR_28 ; } if ( VAR_29 != 0 ) while ( VAR_30 && VAR_31 < VAR_32 -> VAR_33 ) { if ( ( VAR_34 & VAR_35 ) == VAR_36 ) { if ( ! VAR_37 ) { VAR_38 = VAR_39 + 1 ; VAR_40 = 1 ; } if ( ! METHOD_3 ( * VAR_41 , 1 ) ) return ( VAR_42 ) ;  VAR_43 = VAR_44 + ( ( ( VAR_45 << 8 ) | * VAR_46 ) & 0x3fff ) ;  if ( ( VAR_47 = METHOD_4 ( VAR_48 , VAR_49 ) ) == ( TYPE_11 ) - 1 ) return ( VAR_50 ) ; if ( ! METHOD_5 ( * VAR_51 , 1 ) ) return ( VAR_52 ) ; VAR_53 = * VAR_54 ++ ;  VAR_55 ++ ;  if ( VAR_56 >= VAR_57 ) { METHOD_6 ( ( VAR_58 , "<LOOP>" ) ) ; return ( VAR_59 ) ; } continue ; } if ( ( VAR_60 & VAR_61 ) == VAR_62 ) { VAR_63 = ( VAR_64 & ~ VAR_65 ) ; switch ( VAR_66 ) { case VAR_67 : if ( METHOD_7 ( VAR_68 , VAR_69 ) == VAR_70 ) return ( VAR_71 ) ; break ; default : METHOD_8 ( ( VAR_72 , "<ELT%d>" , VAR_73 ) ) ; return ( VAR_74 ) ; } } else { if ( METHOD_9 ( VAR_75 , VAR_76 , VAR_77 , VAR_78 -> VAR_79 ) ) return ( VAR_80 ) ; } VAR_81 += VAR_82 ;  VAR_83 += VAR_84 ;  METHOD_10 ( ( VAR_85 , "." ) ) ; if ( ( VAR_86 = METHOD_11 ( VAR_87 , VAR_88 ) ) == ( TYPE_12 ) - 1 ) return ( VAR_89 ) ; if ( ! METHOD_12 ( * VAR_90 , 1 ) ) return ( VAR_91 ) ; VAR_92 = * VAR_93 ++ ;  VAR_94 ++ ;  if ( ! VAR_95 ) VAR_96 += VAR_97 + 1 ; } else METHOD_13 ( ( VAR_98 , "." ) ) ; return ( VAR_99 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 VAR_7 ; TYPE_1 VAR_8 ; TYPE_2 VAR_9 = 0 ; TYPE_3 * VAR_10 = VAR_11 -> VAR_12 ; TYPE_4 VAR_13 ; TYPE_5 VAR_14 ; TYPE_6 VAR_15 ; TYPE_7 VAR_16 ; TYPE_8 VAR_17 = 0 ; METHOD_1 ( VAR_18 ) ;  VAR_19 = METHOD_2 ( VAR_20 , VAR_21 -> VAR_22 ) ;  VAR_23 = METHOD_3 ( VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 , & VAR_29 , VAR_30 ) ; if ( VAR_31 ) return VAR_32 ; VAR_33 -> VAR_34 = VAR_35 = ( TYPE_9 ) VAR_36 ; VAR_37 -> VAR_38 = VAR_39 ; while ( VAR_40 > 0 ) { TYPE_10 VAR_41 ; METHOD_4 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 ) ; VAR_46 = 1 ; VAR_47 = METHOD_5 ( VAR_48 -> VAR_49 , VAR_50 , ( TYPE_11 ) VAR_51 , VAR_52 , VAR_53 | VAR_54 , VAR_55 -> VAR_56 , VAR_57 -> VAR_58 , & VAR_59 , & VAR_60 , VAR_61 -> VAR_62 ) ; if ( ! VAR_63 ) { VAR_64 = METHOD_6 ( & VAR_65 -> VAR_66 , VAR_67 -> VAR_68 , & VAR_69 ) ; } if ( VAR_70 ) { METHOD_7 ( VAR_71 ) ; VAR_72 -> VAR_73 = VAR_74 ; METHOD_8 ( VAR_75 -> VAR_76 ) ; return ( VAR_77 ) ; } if ( VAR_78 ) METHOD_9 ( VAR_79 -> VAR_80 , VAR_81 , 0 ) ; METHOD_10 ( VAR_82 == 1 ) ; METHOD_11 ( ( VAR_83 . VAR_84 != VAR_85 ) && ( VAR_86 . VAR_87 != VAR_88 ) ) ; VAR_89 += VAR_90 . VAR_91 ; VAR_92 -= VAR_93 . VAR_94 ; VAR_95 = METHOD_12 ( & VAR_96 -> VAR_97 , VAR_98 ) ; if ( VAR_99 ) return ( VAR_100 ) ; } VAR_101 = VAR_102 -> VAR_103 ; VAR_104 = VAR_105 -> VAR_106 ;  VAR_107 = VAR_108 -> VAR_109 ;  while ( VAR_110 > 0 ) { struct STRUCT_OR_UNION_4 * VAR_111 ; TYPE_12 VAR_112 ; TYPE_13 VAR_113 ; METHOD_13 ( VAR_114 > 0 ) ; METHOD_14 ( VAR_115 -> VAR_116 , VAR_117 -> VAR_118 ) ; VAR_119 = 1 ; VAR_120 = METHOD_15 ( VAR_121 , ( TYPE_14 ) VAR_122 , VAR_123 , & VAR_124 , & VAR_125 , VAR_126 ) ; if ( VAR_127 ) return ( VAR_128 ) ; METHOD_16 ( VAR_129 == 1 ) ; METHOD_17 ( ( VAR_130 . VAR_131 != VAR_132 ) && ( VAR_133 . VAR_134 != VAR_135 ) ) ; VAR_136 = METHOD_18 ( VAR_137 , VAR_138 . VAR_139 ) , VAR_140 = METHOD_19 ( VAR_141 , VAR_142 . VAR_143 ) ; VAR_144 = METHOD_20 ( VAR_145 -> VAR_146 , VAR_147 , VAR_148 , 0 ) ; if ( ! VAR_149 ) return VAR_150 ; VAR_151 -> VAR_152 = & VAR_153 ; METHOD_21 ( VAR_154 , VAR_155 , VAR_156 -> VAR_157 -> VAR_158 , & VAR_159 , & VAR_160 , & VAR_161 ) ; VAR_162 = METHOD_22 ( VAR_163 ) ; METHOD_23 ( VAR_164 ) ; if ( VAR_165 ) return VAR_166 ; VAR_167 += VAR_168 . VAR_169 ; VAR_170 -= VAR_171 . VAR_172 ; } METHOD_24 ( VAR_173 == 0 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { METHOD_1 ( VAR_3 , "format" , "text" ) ; TYPE_4 * VAR_4 = METHOD_2 ( ) ;  TYPE_5 VAR_5 = METHOD_3 ( VAR_6 ,  "POST%sHTTP/1.0\\r\\n" "Content-Type:application/x-www-form-urlencoded\\r\\n"  "Content-Length:%d\\r\\n"  "%s" "\\r\\n" "%s" ,  VAR_7 ,  METHOD_4 ( VAR_8 ) , VAR_9 ? VAR_10 : "" , METHOD_5 ( VAR_11 ) ) ; METHOD_6 ( VAR_12 ) ; if ( VAR_13 < 0 ) METHOD_7 ( VAR_14 , "Monit:cannotsendcommandtothemonitdaemon--%s" , VAR_15 ) ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 = ( struct STRUCT_OR_UNION_3 * ) VAR_2 -> VAR_3 [ 0 ] ; struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_5 VAR_7 ; union STRUCT_OR_UNION_6 * VAR_8 ; struct STRUCT_OR_UNION_7 * VAR_9 ; TYPE_0 VAR_10 ; unsigned TYPE_1 VAR_11 ; VAR_12 = METHOD_1 ( sizeof ( union STRUCT_OR_UNION_8 ) , VAR_13 ) ; if ( VAR_14 == VAR_15 ) return VAR_16 ; VAR_17 = & VAR_18 -> VAR_19 ; METHOD_2 ( & VAR_20 . VAR_21 ) ; METHOD_3 ( & VAR_22 -> VAR_23 , VAR_24 ) ; METHOD_4 ( VAR_25 , 0 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ; VAR_26 = METHOD_5 ( METHOD_6 ( & VAR_27 -> VAR_28 ) , VAR_29 , VAR_30 , & VAR_31 ) ; METHOD_7 ( & VAR_32 -> VAR_33 , VAR_34 ) ;  if ( VAR_35 != VAR_36 )  return VAR_37 ;  METHOD_8 ( & VAR_38 . VAR_39 ) ;  VAR_40 -> VAR_41 = VAR_42 -> VAR_43 . VAR_44 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 . VAR_49 ; VAR_50 -> VAR_51 = VAR_52 -> VAR_53 . VAR_54 ; VAR_55 -> VAR_56 = VAR_57 -> VAR_58 . VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 . VAR_64 ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 . VAR_69 ; VAR_70 -> VAR_71 = VAR_72 -> VAR_73 . VAR_74 ; VAR_75 -> VAR_76 = VAR_77 -> VAR_78 . VAR_79 ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 . VAR_84 ; VAR_85 -> VAR_86 = VAR_87 -> VAR_88 . VAR_89 ; VAR_90 -> VAR_91 = VAR_92 -> VAR_93 . VAR_94 ; VAR_95 -> VAR_96 = VAR_97 -> VAR_98 . VAR_99 ; VAR_100 -> VAR_101 = VAR_102 -> VAR_103 . VAR_104 ; VAR_105 -> VAR_106 = VAR_107 -> VAR_108 . VAR_109 ; METHOD_9 ( VAR_110 ) ; return VAR_111 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 ) {  VAR_2 -> VAR_3 = METHOD_1 ( 1.0f , METHOD_2 ( 0.0f , VAR_4 -> VAR_5 ) ) ;   VAR_6 -> VAR_7 = METHOD_3 ( 1.0f , METHOD_4 ( 0.0f , VAR_8 -> VAR_9 ) ) ;   VAR_10 -> VAR_11 = METHOD_5 ( 1.0f , METHOD_6 ( 0.0f , VAR_12 -> VAR_13 ) ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 * VAR_3 , TYPE_3 * VAR_4 , unsigned TYPE_4 VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 ; VAR_7 * VAR_8 ; TYPE_5 VAR_9 ; METHOD_1 ( VAR_10 ) ;  if ( METHOD_2 ( VAR_11 , VAR_12 ) < 0 )  return VAR_13 ; if ( ! ( VAR_14 & VAR_15 ) && ! METHOD_3 ( VAR_16 ) ) { VAR_17 = METHOD_4 ( METHOD_5 ( METHOD_6 ( VAR_18 ) , VAR_19 -> VAR_20 ) ) ; VAR_21 = METHOD_7 ( VAR_22 , VAR_23 , VAR_24 , & VAR_25 ) ; if ( ! METHOD_8 ( * VAR_26 ) ) goto VAR_27 ; goto VAR_28 ; } if ( METHOD_9 ( METHOD_10 ( VAR_29 ) ) ) goto VAR_30 ; STRUCT_OR_UNION_5 = METHOD_11 ( VAR_31 , VAR_32 ) ; if ( ! STRUCT_OR_UNION_6 ) goto VAR_33 ; if ( METHOD_12 ( STRUCT_OR_UNION_7 , VAR_34 , VAR_35 , & VAR_36 ) ) goto VAR_37 ; METHOD_13 ( STRUCT_OR_UNION_8 ) ; VAR_38 = METHOD_14 ( STRUCT_OR_UNION_9 , VAR_39 -> VAR_40 ) ; if ( VAR_41 -> VAR_42 & VAR_43 ) VAR_44 = METHOD_15 ( METHOD_16 ( VAR_45 ) ) ; VAR_46 = METHOD_17 ( VAR_47 , VAR_48 , VAR_49 , & VAR_50 ) ; if ( ! METHOD_18 ( * VAR_51 ) ) goto VAR_52 ; METHOD_19 ( VAR_53 , VAR_54 ) ; METHOD_20 ( STRUCT_OR_UNION_10 , VAR_55 , VAR_56 ) ; METHOD_21 ( STRUCT_OR_UNION_11 , VAR_57 , VAR_58 ) ; METHOD_22 ( STRUCT_OR_UNION_12 , VAR_59 ) ; VAR_60 : METHOD_23 ( VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; METHOD_24 ( VAR_65 , VAR_66 , VAR_67 ) ; VAR_68 : METHOD_25 ( VAR_69 , VAR_70 ) ; return 0 ; VAR_71 : METHOD_26 ( STRUCT_OR_UNION_13 , VAR_72 ) ; METHOD_27 ( STRUCT_OR_UNION_14 ) ; goto VAR_73 ; VAR_74 : METHOD_28 ( STRUCT_OR_UNION_15 ) ; VAR_75 : return VAR_76 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; METHOD_1 ( VAR_3 != VAR_4 ) ; if ( ! METHOD_2 ( VAR_5 ) ) return ; VAR_6 = METHOD_3 ( TYPE_4 , 1 ) ; VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 -> VAR_21 ; VAR_22 -> VAR_23 = VAR_24 -> VAR_25 ; VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 = VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 = METHOD_4 ( VAR_40 -> VAR_41 ) ; VAR_42 -> VAR_43 = METHOD_5 ( VAR_44 -> VAR_45 ) ; VAR_46 -> VAR_47 = VAR_48 -> VAR_49 ;  VAR_50 -> VAR_51 = VAR_52 -> VAR_53 ;   VAR_54 -> VAR_55 = VAR_56 -> VAR_57 ;  * VAR_58 = ( TYPE_5 * ) VAR_59 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) {  struct STRUCT_OR_UNION_1 * VAR_4 , * VAR_5 = VAR_6 -> VAR_7 ;  if ( VAR_8 == 1 ) return 0 ; VAR_9 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_2 ) * VAR_10 ) ; if ( ! VAR_11 ) return - VAR_12 ; METHOD_2 ( VAR_13 , VAR_14 , sizeof ( struct STRUCT_OR_UNION_3 ) * VAR_15 ) ; METHOD_3 ( VAR_16 + VAR_17 + VAR_18 - 1 , VAR_19 + VAR_20 , sizeof ( struct STRUCT_OR_UNION_4 ) * ( VAR_21 - VAR_22 - VAR_23 + 1 ) ) ;  VAR_24 -> VAR_25 = VAR_26 ;  METHOD_4 ( VAR_27 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , register const TYPE_3 * VAR_2 ) { register const struct STRUCT_OR_UNION_0 * VAR_3 ; register const struct STRUCT_OR_UNION_1 * VAR_4 ; VAR_5 = ( const struct STRUCT_OR_UNION_2 * ) VAR_6 ; VAR_7 = ( const struct STRUCT_OR_UNION_3 * ) VAR_8 ;  METHOD_1 ( VAR_9 -> VAR_10 ) ;  if ( VAR_11 -> VAR_12 ) { METHOD_2 ( ( VAR_13 , "frag(0x%08x:%d|%ld)" , METHOD_3 ( & VAR_14 -> VAR_15 ) , METHOD_4 ( & VAR_16 -> VAR_17 ) & VAR_18 , sizeof ( struct STRUCT_OR_UNION_4 ) + METHOD_5 ( & VAR_19 -> VAR_20 ) - ( TYPE_4 ) ( VAR_21 - VAR_22 ) - sizeof ( struct STRUCT_OR_UNION_5 ) ) ) ; } else { METHOD_6 ( ( VAR_23 , "frag(%d|%ld)" , METHOD_7 ( & VAR_24 -> VAR_25 ) & VAR_26 , sizeof ( struct STRUCT_OR_UNION_6 ) + METHOD_8 ( & VAR_27 -> VAR_28 ) - ( TYPE_5 ) ( VAR_29 - VAR_30 ) - sizeof ( struct STRUCT_OR_UNION_7 ) ) ) ; } if ( ( METHOD_9 ( & VAR_31 -> VAR_32 ) & VAR_33 ) != 0 ) return - 1 ; else { METHOD_10 ( ( VAR_34 , "" ) ) ; return sizeof ( struct STRUCT_OR_UNION_8 ) ; } VAR_35 : METHOD_11 ( ( VAR_36 , "[|frag]" ) ) ; return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const unsigned VAR_2 ) { unsigned VAR_3 , VAR_4 ; for ( VAR_5 = 0 ; VAR_6 < VAR_7 ; VAR_8 += VAR_9 ) { METHOD_1 ( VAR_10 [ VAR_11 ] ) ; if ( VAR_12 [ VAR_13 ] == VAR_14 ) VAR_15 = 1 ; else { if ( VAR_16 + 1 < VAR_17 ) { METHOD_2 ( VAR_18 [ VAR_19 + 1 ] ) ; VAR_20 = VAR_21 [ VAR_22 + 1 ] + 2 ; } else goto VAR_23 ; } if ( VAR_24 + VAR_25 > VAR_26 ) goto VAR_27 ; METHOD_3 ( VAR_28 [ VAR_29 + VAR_30 ] ) ; switch ( VAR_31 [ VAR_32 ] ) { case VAR_33 : METHOD_4 ( ( VAR_34 , "(pad1)" ) ) ; break ; case VAR_35 : if ( VAR_36 - VAR_37 < VAR_38 ) { METHOD_5 ( ( VAR_39 , "(padn:trunc)" ) ) ; goto VAR_40 ; } METHOD_6 ( ( VAR_41 , "(padn)" ) ) ; break ; case VAR_42 : if ( VAR_43 - VAR_44 < VAR_45 ) { METHOD_7 ( ( VAR_46 , "(refresh:trunc)" ) ) ; goto VAR_47 ; }  METHOD_8 ( ( VAR_48 , "(refresh:%u)" ,  METHOD_9 ( & VAR_49 [ VAR_50 + 2 ] ) << 2 ) ) ; break ; case VAR_51 : if ( VAR_52 - VAR_53 < VAR_54 ) { METHOD_10 ( ( VAR_55 , "(altcoa:trunc)" ) ) ; goto VAR_56 ; } METHOD_11 ( ( VAR_57 , "(alt-CoA:%s)" , METHOD_12 ( VAR_58 , & VAR_59 [ VAR_60 + 2 ] ) ) ) ; break ; case VAR_61 : if ( VAR_62 - VAR_63 < VAR_64 ) { METHOD_13 ( ( VAR_65 , "(ni:trunc)" ) ) ; goto VAR_66 ; } METHOD_14 ( ( VAR_67 , "(ni:ho=0x%04xco=0x%04x)" , METHOD_15 ( & VAR_68 [ VAR_69 + 2 ] ) , METHOD_16 ( & VAR_70 [ VAR_71 + 4 ] ) ) ) ; break ; case VAR_72 : if ( VAR_73 - VAR_74 < VAR_75 ) { METHOD_17 ( ( VAR_76 , "(auth:trunc)" ) ) ; goto VAR_77 ; } METHOD_18 ( ( VAR_78 , "(auth)" ) ) ; break ; default : if ( VAR_79 - VAR_80 < VAR_81 ) { METHOD_19 ( ( VAR_82 , "(sopt_type%u:trunc)" , VAR_83 [ VAR_84 ] ) ) ; goto VAR_85 ; } METHOD_20 ( ( VAR_86 , "(type-0x%02x:len=%u)" , VAR_87 [ VAR_88 ] , VAR_89 [ VAR_90 + 1 ] ) ) ; break ; } } return 0 ; VAR_91 : return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ; if ( ! VAR_4 -> VAR_5 ) VAR_6 -> VAR_7 = VAR_8 ; if ( ( VAR_9 -> VAR_10 != 2 ) && VAR_11 -> VAR_12 ) { VAR_13 -> VAR_14 = VAR_15 -> VAR_16 ; VAR_17 -> VAR_18 += VAR_19 -> VAR_20 ; VAR_21 -> VAR_22 = VAR_23 -> VAR_24 / VAR_25 -> VAR_26 ; }  METHOD_1 ( VAR_27 -> VAR_28 , 1 , ( VAR_29 -> VAR_30 * VAR_31 -> VAR_32 ) ) ;  VAR_33 -> VAR_34 = VAR_35 -> VAR_36 * VAR_37 -> VAR_38 ; VAR_39 -> VAR_40 = 0 ; VAR_41 -> VAR_42 = 0 ; VAR_43 -> VAR_44 = 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * VAR_4 = METHOD_1 ( VAR_5 ) ; METHOD_2 ( VAR_6 != VAR_7 ) ; METHOD_3 ( VAR_8 -> VAR_9 != VAR_10 ) ; if ( ( * VAR_11 -> VAR_12 ) ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ) { TYPE_6 VAR_17 = VAR_18 -> VAR_19 ; METHOD_4 ( VAR_20 > 0 ) ;  METHOD_5 ( ( VAR_21 % VAR_22 ) == 0 ) ;  METHOD_6 ( VAR_23 -> VAR_24 != VAR_25 ) ; while ( VAR_26 > 0 ) {  ( * VAR_27 -> VAR_28 ) ( VAR_29 , VAR_30 , VAR_31 ) ;  VAR_32 -= VAR_33 ; VAR_34 += VAR_35 ; } return 1 ; } else return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; TYPE_6 VAR_5 ;  TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 ;  if ( ! VAR_10 || ! VAR_11 || ! VAR_12 ) { METHOD_1 ( VAR_13 -> VAR_14 , VAR_15 , "ExifMnoteCanon" , "ShortMakerNote" ) ; return ; } VAR_16 = 6 + VAR_17 -> VAR_18 ; if ( METHOD_2 ( VAR_19 , VAR_20 , 2 ) ) { METHOD_3 ( VAR_21 -> VAR_22 , VAR_23 , "ExifMnoteCanon" , "ShortMakerNote" ) ; return ; } VAR_24 = METHOD_4 ( VAR_25 + VAR_26 , VAR_27 -> VAR_28 ) ; VAR_29 += 2 ; METHOD_5 ( VAR_30 ) ; VAR_31 -> VAR_32 = METHOD_6 ( VAR_33 -> VAR_34 , sizeof ( VAR_35 ) * VAR_36 ) ; if ( ! VAR_37 -> VAR_38 ) { METHOD_7 ( VAR_39 -> VAR_40 , "ExifMnoteCanon" , sizeof ( VAR_41 ) * VAR_42 ) ; return ; } VAR_43 = 0 ; for ( VAR_44 = VAR_45 , VAR_46 = VAR_47 ; VAR_48 ; -- VAR_49 , VAR_50 += 12 ) { TYPE_8 VAR_51 ; METHOD_8 ( & VAR_52 -> VAR_53 [ VAR_54 ] , 0 , sizeof ( VAR_55 ) ) ; if ( METHOD_9 ( VAR_56 , VAR_57 , 12 ) ) { METHOD_10 ( VAR_58 -> VAR_59 , VAR_60 , "ExifMnoteCanon" , "ShortMakerNote" ) ; break ; } VAR_61 -> VAR_62 [ VAR_63 ] . VAR_64 = METHOD_11 ( VAR_65 + VAR_66 , VAR_67 -> VAR_68 ) ; VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 = METHOD_12 ( VAR_73 + VAR_74 + 2 , VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 [ VAR_79 ] . VAR_80 = METHOD_13 ( VAR_81 + VAR_82 + 4 , VAR_83 -> VAR_84 ) ; VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 = VAR_89 -> VAR_90 ; METHOD_14 ( VAR_91 -> VAR_92 , VAR_93 , "ExifMnoteCanon" , "Loadingentry0x%x(\'%s\')..." , VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 , METHOD_15 ( VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 ) ) ; if ( METHOD_16 ( VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 ) && VAR_106 / METHOD_17 ( VAR_107 -> VAR_108 [ VAR_109 ] . VAR_110 ) < VAR_111 -> VAR_112 [ VAR_113 ] . VAR_114 ) { METHOD_18 ( VAR_115 -> VAR_116 , VAR_117 , "ExifMnoteCanon" , "Tagsizeoverflowdetected(%u*%lu)" , METHOD_19 ( VAR_118 -> VAR_119 [ VAR_120 ] . VAR_121 ) , VAR_122 -> VAR_123 [ VAR_124 ] . VAR_125 ) ; continue ; } VAR_126 = METHOD_20 ( VAR_127 -> VAR_128 [ VAR_129 ] . VAR_130 ) * VAR_131 -> VAR_132 [ VAR_133 ] . VAR_134 ; VAR_135 -> VAR_136 [ VAR_137 ] . VAR_138 = VAR_139 ; if ( ! VAR_140 ) { METHOD_21 ( VAR_141 -> VAR_142 , VAR_143 , "ExifMnoteCanon" , "Invalidzero-lengthtagsize" ) ; continue ; } else { TYPE_9 VAR_144 = VAR_145 + 8 ; if ( VAR_146 > 4 ) VAR_147 = METHOD_22 ( VAR_148 + VAR_149 , VAR_150 -> VAR_151 ) + 6 ; if ( METHOD_23 ( VAR_152 , VAR_153 , VAR_154 ) ) { METHOD_24 ( VAR_155 -> VAR_156 , VAR_157 , "ExifMnoteCanon" , "Tagdatapastendofbuffer(%u>%u)" , ( unsigned ) ( VAR_158 + VAR_159 ) , VAR_160 ) ; continue ; } VAR_161 -> VAR_162 [ VAR_163 ] . VAR_164 = METHOD_25 ( VAR_165 -> VAR_166 , VAR_167 ) ; if ( ! VAR_168 -> VAR_169 [ VAR_170 ] . VAR_171 ) { METHOD_26 ( VAR_172 -> VAR_173 , "ExifMnoteCanon" , VAR_174 ) ; continue ; } METHOD_27 ( VAR_175 -> VAR_176 [ VAR_177 ] . VAR_178 , VAR_179 + VAR_180 , VAR_181 ) ; }  ++ VAR_182 ;  } VAR_183 -> VAR_184 = VAR_185 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * VAR_7 ; TYPE_9 VAR_8 ; VAR_9 = ( TYPE_10 * ) VAR_10 ;  if ( ! VAR_11 -> VAR_12 ) {  * VAR_13 = VAR_14 ; return VAR_15 ; } if ( METHOD_1 ( VAR_16 , VAR_17 , VAR_18 ) != VAR_19 ) { VAR_20 = METHOD_2 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ; } else { VAR_28 = METHOD_3 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; } return VAR_36 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; if ( VAR_3 ) { VAR_4 -> VAR_5 = VAR_6 ;  METHOD_2 ( VAR_7 ) ;  } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; TYPE_4 VAR_5 = VAR_6 -> VAR_7 & ( VAR_8 | VAR_9 ) ; VAR_10 * VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 [ 22 ] , VAR_14 [ 22 ] ; TYPE_7 VAR_15 = 0 ; VAR_16 * VAR_17 ; METHOD_1 ( "myisamchk" ) ; VAR_18 -> VAR_19 = VAR_20 = VAR_21 -> VAR_22 = VAR_23 -> VAR_24 = VAR_25 = 0 ; VAR_26 = 0 ; VAR_27 -> VAR_28 = VAR_29 ; if ( ! ( VAR_30 = METHOD_2 ( VAR_31 , ( VAR_32 -> VAR_33 & ( VAR_34 | VAR_35 ) ) ? VAR_36 : VAR_37 , VAR_38 | ( ( VAR_39 -> VAR_40 & VAR_41 ) ? VAR_42 : ( VAR_43 -> VAR_44 & VAR_45 ) ? VAR_46 : VAR_47 ) ) ) ) { VAR_48 -> VAR_49 = 1 ; switch ( VAR_50 ) { case VAR_51 : METHOD_3 ( VAR_52 , "\'%s\'doesn\'thaveacorrectindexdefinition.Youneedtorecreateitbeforeyoucandoarepair" , VAR_53 ) ; break ; case VAR_54 : METHOD_4 ( VAR_55 , "\'%s\'isnotaMyISAM-table" , VAR_56 ) ; break ; case VAR_57 : METHOD_5 ( VAR_58 , "\'%s\'ismarkedascrashed" , VAR_59 ) ; break ; case VAR_60 : METHOD_6 ( VAR_61 , "\'%s\'ismarkedascrashedafterlastrepair" , VAR_62 ) ; break ; case VAR_63 : METHOD_7 ( VAR_64 , "\'%s\'isanoldtypeofMyISAM-table" , VAR_65 ) ; break ; case VAR_66 : METHOD_8 ( VAR_67 , "Couldn\'treadcompleteheaderfrom\'%s\'" , VAR_68 ) ; break ; case VAR_69 : METHOD_9 ( VAR_70 , "\'%s\'islocked.Use-wtowaituntilunlocked" , VAR_71 ) ; break ; case VAR_72 : METHOD_10 ( VAR_73 , "File\'%s\'doesn\'texist" , VAR_74 ) ; break ; case VAR_75 : METHOD_11 ( VAR_76 , "Youdon\'thavepermissiontouse\'%s\'" , VAR_77 ) ; break ; default : METHOD_12 ( VAR_78 , "%dwhenopeningMyISAM-table\'%s\'" , VAR_79 , VAR_80 ) ; break ; } METHOD_13 ( 1 ) ; } VAR_81 = VAR_82 -> VAR_83 ; VAR_84 -> VAR_85 &= ~ VAR_86 ; VAR_87 -> VAR_88 -= VAR_89 -> VAR_90 ; VAR_91 -> VAR_92 = 0 ; if ( VAR_93 -> VAR_94 & ( VAR_95 | VAR_96 ) ) { TYPE_8 VAR_97 = METHOD_14 ( VAR_98 ) || VAR_99 -> VAR_100 . VAR_101 != 0 ; if ( ( VAR_102 -> VAR_103 & ( VAR_104 | VAR_105 ) ) && ( ( VAR_106 -> VAR_107 . VAR_108 & ( VAR_109 | VAR_110 | VAR_111 ) || ! ( VAR_112 -> VAR_113 & VAR_114 ) ) ) ) VAR_115 = 1 ; if ( VAR_116 -> VAR_117 -> VAR_118 . VAR_119 && VAR_120 -> VAR_121 -> VAR_122 ) { if ( ( VAR_123 -> VAR_124 & VAR_125 ) && ( VAR_126 -> VAR_127 . VAR_128 & VAR_129 ) ) VAR_130 = 1 ; if ( ( VAR_131 -> VAR_132 & VAR_133 ) && ( VAR_134 -> VAR_135 . VAR_136 & VAR_137 ) ) VAR_138 = 1 ; if ( ( VAR_139 -> VAR_140 & VAR_141 ) && ( VAR_142 -> VAR_143 . VAR_144 & VAR_145 ) ) VAR_146 = 1 ; } if ( ( VAR_147 -> VAR_148 & VAR_149 ) && ( VAR_150 -> VAR_151 . VAR_152 & ( VAR_153 | VAR_154 | VAR_155 ) ) ) VAR_156 = 1 ; if ( ! VAR_157 ) { if ( ! ( VAR_158 -> VAR_159 & VAR_160 ) || VAR_161 -> VAR_162 & VAR_163 ) METHOD_15 ( "MyISAMfile:%sisalreadychecked\\n" , VAR_164 ) ; if ( METHOD_16 ( VAR_165 ) ) { METHOD_17 ( VAR_166 , "%dwhenclosingMyISAM-table\'%s\'" , VAR_167 , VAR_168 ) ; METHOD_18 ( 1 ) ; } METHOD_19 ( 0 ) ; } } if ( ( VAR_169 -> VAR_170 & ( VAR_171 | VAR_172 | VAR_173 | VAR_174 ) ) && ( ( ( VAR_175 -> VAR_176 & VAR_177 ) && VAR_178 -> VAR_179 == VAR_180 ) || METHOD_20 ( VAR_181 -> VAR_182 . VAR_183 . VAR_184 ) != VAR_185 || METHOD_21 ( VAR_186 -> VAR_187 . VAR_188 . VAR_189 ) != VAR_190 || METHOD_22 ( VAR_191 -> VAR_192 , VAR_193 -> VAR_194 . VAR_195 , ~ VAR_196 -> VAR_197 . VAR_198 ) || METHOD_23 ( VAR_199 ) || VAR_200 -> VAR_201 -> VAR_202 . VAR_203 . VAR_204 [ 3 ] != VAR_205 [ 3 ] || ( VAR_206 && VAR_207 -> VAR_208 != VAR_209 -> VAR_210 . VAR_211 . VAR_212 ) || VAR_213 != VAR_214 ) ) { if ( VAR_215 ) VAR_216 -> VAR_217 = VAR_218 -> VAR_219 ; if ( METHOD_24 ( VAR_220 , & VAR_221 , VAR_222 ) ) { ( TYPE_9 ) METHOD_25 ( VAR_223 , "MyISAM-table\'%s\'isnotfixedbecauseoferrors\\n" , VAR_224 ) ; return ( - 1 ) ; } VAR_225 = 1 ; if ( ! ( VAR_226 -> VAR_227 & VAR_228 ) ) { VAR_229 -> VAR_230 |= VAR_231 ; if ( ! ( VAR_232 -> VAR_233 & VAR_234 ) ) METHOD_26 ( "-\'%s\'hasoldtable-format.Recreatingindex\\n" , VAR_235 ) ; VAR_236 |= VAR_237 ; } VAR_238 = VAR_239 -> VAR_240 ; VAR_241 -> VAR_242 -= VAR_243 -> VAR_244 ; VAR_245 -> VAR_246 = 0 ; } if ( VAR_247 -> VAR_248 & VAR_249 ) { VAR_250 -> VAR_251 ++ ; VAR_252 -> VAR_253 += VAR_254 -> VAR_255 -> VAR_256 ; VAR_257 -> VAR_258 += VAR_259 -> VAR_260 -> VAR_261 ; METHOD_27 ( VAR_262 , VAR_263 , VAR_264 ) ; } else { if ( ! VAR_265 ++ ) METHOD_28 ( ) ; if ( ! ( VAR_266 -> VAR_267 & VAR_268 ) ) VAR_269 = VAR_270 ; else VAR_271 = VAR_272 ; if ( VAR_273 -> VAR_274 == VAR_275 ) VAR_276 -> VAR_277 = VAR_278 ; if ( METHOD_29 ( VAR_279 , VAR_280 , 0 ) ) { METHOD_30 ( VAR_281 , "Can\'tlockindexfileof\'%s\',error:%d" , VAR_282 , VAR_283 ) ; VAR_284 -> VAR_285 = 0 ; goto VAR_286 ; } METHOD_31 ( VAR_287 , VAR_288 ) ; VAR_289 = VAR_290 -> VAR_291 ; if ( VAR_292 -> VAR_293 & ( VAR_294 | VAR_295 | VAR_296 ) ) { if ( VAR_297 -> VAR_298 & VAR_299 ) { TYPE_10 VAR_300 = VAR_301 -> VAR_302 . VAR_303 ; METHOD_32 ( VAR_304 -> VAR_305 . VAR_306 , VAR_307 -> VAR_308 . VAR_309 , VAR_310 -> VAR_311 ) ; if ( VAR_312 != VAR_313 -> VAR_314 . VAR_315 ) VAR_316 -> VAR_317 |= VAR_318 ; } if ( VAR_319 && METHOD_33 ( VAR_320 , VAR_321 , VAR_322 -> VAR_323 & ~ VAR_324 ) ) { if ( VAR_325 -> VAR_326 & VAR_327 ) { VAR_328 = 0 ; METHOD_34 ( VAR_329 , "Creatingnewdatafile\\n" ) ; } else { VAR_330 = 1 ; METHOD_35 ( VAR_331 , "Quick-recoveraborted;Runrecoverywithoutswitch\'q\'" ) ; } } if ( ! VAR_332 ) { if ( ( VAR_333 -> VAR_334 & ( VAR_335 | VAR_336 ) ) && ( METHOD_36 ( VAR_337 -> VAR_338 . VAR_339 ) || ( VAR_340 && ! VAR_341 -> VAR_342 && ! VAR_343 ) ) && METHOD_37 ( VAR_344 , VAR_345 -> VAR_346 -> VAR_347 , VAR_348 -> VAR_349 -> VAR_350 . VAR_351 , VAR_352 -> VAR_353 ) ) { if ( VAR_354 -> VAR_355 & VAR_356 )  VAR_357 = METHOD_38 ( VAR_358 , VAR_359 , VAR_360 , VAR_361 ) ;  else  VAR_362 = METHOD_39 ( VAR_363 , VAR_364 , VAR_365 , VAR_366 ) ;  VAR_367 = 1 ; } else if ( VAR_368 -> VAR_369 & VAR_370 )  VAR_371 = METHOD_40 ( VAR_372 , VAR_373 , VAR_374 , VAR_375 ) ;  } if ( ! VAR_376 && VAR_377 -> VAR_378 & VAR_379 ) { TYPE_11 TYPE_12 if ( VAR_380 -> VAR_381 & VAR_382 ) { ( TYPE_13 ) METHOD_41 ( VAR_383 -> VAR_384 , METHOD_42 ( VAR_385 ) ) ; VAR_386 |= METHOD_43 ( VAR_387 , VAR_388 , VAR_389 , METHOD_44 ( 0 ) ) ; if ( METHOD_45 ( VAR_390 , VAR_391 -> VAR_392 , VAR_393 , - 1 ) ) VAR_394 = 1 ; VAR_395 -> VAR_396 &= ~ VAR_397 ; VAR_398 -> VAR_399 . VAR_400 = VAR_401 -> VAR_402 ; } if ( ! VAR_403 ) { TYPE_14 VAR_404 ; TYPE_15 VAR_405 = 1 ; for ( VAR_406 = 0 ; VAR_407 < VAR_408 -> VAR_409 . VAR_410 ; VAR_411 ++ ) if ( VAR_412 -> VAR_413 [ VAR_414 ] . VAR_415 & ( VAR_416 | VAR_417 ) ) VAR_418 = 0 ; VAR_419 = METHOD_46 ( VAR_420 , VAR_421 , VAR_422 , VAR_423 -> VAR_424 , ( TYPE_16 ) ! ( VAR_425 -> VAR_426 & VAR_427 ) , VAR_428 ) ; VAR_429 = VAR_430 -> VAR_431 ; if ( ! VAR_432 && ! VAR_433 ) { if ( VAR_434 -> VAR_435 ) METHOD_47 ( "Tablehadacompressedindex;Wemustnowrecreatetheindex" ) ;  VAR_436 = METHOD_48 ( VAR_437 , VAR_438 , VAR_439 , 1 ) ;  } } } if ( ! VAR_440 && VAR_441 -> VAR_442 & VAR_443 )  VAR_444 = METHOD_49 ( VAR_445 , VAR_446 , VAR_447 ) ;  if ( ! VAR_448 ) VAR_449 -> VAR_450 . VAR_451 &= ~ ( VAR_452 | VAR_453 | VAR_454 ) ; else METHOD_50 ( VAR_455 ) ; } else if ( ( VAR_456 -> VAR_457 & VAR_458 ) || ! ( VAR_459 -> VAR_460 & VAR_461 ) ) { if ( ! ( VAR_462 -> VAR_463 & VAR_464 ) || VAR_465 -> VAR_466 & VAR_467 ) METHOD_51 ( "CheckingMyISAMfile:%s\\n" , VAR_468 ) ; if ( ! ( VAR_469 -> VAR_470 & VAR_471 ) ) METHOD_52 ( "Datarecords:%7sDeletedblocks:%7s\\n" , METHOD_53 ( VAR_472 -> VAR_473 -> VAR_474 , VAR_475 ) , METHOD_54 ( VAR_476 -> VAR_477 -> VAR_478 , VAR_479 ) ) ; VAR_480 = METHOD_55 ( VAR_481 , VAR_482 ) ; METHOD_56 ( VAR_483 -> VAR_484 . VAR_485 , VAR_486 -> VAR_487 ) ; VAR_488 = METHOD_57 ( VAR_489 , VAR_490 ) ; if ( ! VAR_491 || ! ( VAR_492 -> VAR_493 & ( VAR_494 | VAR_495 ) ) ) VAR_496 |= METHOD_58 ( VAR_497 , VAR_498 , VAR_499 -> VAR_500 ) ; if ( ( ! VAR_501 || ( ! ( VAR_502 -> VAR_503 & ( VAR_504 | VAR_505 ) ) && ! VAR_506 -> VAR_507 ) ) ) { VAR_508 |= METHOD_59 ( VAR_509 , VAR_510 ) ; if ( ! VAR_511 && ( VAR_512 -> VAR_513 & ( VAR_514 | VAR_515 ) ) ) VAR_516 = METHOD_60 ( VAR_517 , VAR_518 , ( ( VAR_519 -> VAR_520 & VAR_521 ) ? VAR_522 : 0 ) | ( ( VAR_523 -> VAR_524 & VAR_525 ) ? VAR_526 : 0 ) ) ; } if ( ( ! VAR_527 && ! VAR_528 ) || ! ( VAR_529 -> VAR_530 & ( VAR_531 | VAR_532 ) ) ) { if ( VAR_533 -> VAR_534 & ( VAR_535 | VAR_536 ) ) ( TYPE_17 ) METHOD_61 ( VAR_537 , VAR_538 , VAR_539 -> VAR_540 , 0 , 0 ) ; ( TYPE_18 ) METHOD_62 ( & VAR_541 -> VAR_542 , VAR_543 , ( TYPE_19 ) VAR_544 -> VAR_545 , VAR_546 , ( VAR_547 -> VAR_548 ? VAR_549 -> VAR_550 : VAR_551 -> VAR_552 . VAR_553 ) , 1 , METHOD_63 ( VAR_554 ) ) ; METHOD_64 ( VAR_555 ) ; if ( ( VAR_556 -> VAR_557 -> VAR_558 & ( VAR_559 | VAR_560 ) ) || ( VAR_561 -> VAR_562 & ( VAR_563 | VAR_564 ) ) ) VAR_565 |= METHOD_65 ( VAR_566 , VAR_567 , VAR_568 -> VAR_569 & VAR_570 ) ; VAR_571 |= METHOD_66 ( VAR_572 , VAR_573 -> VAR_574 , VAR_575 -> VAR_576 ) ; ( TYPE_20 ) METHOD_67 ( & VAR_577 -> VAR_578 ) ; } if ( ! VAR_579 ) { if ( ( VAR_580 -> VAR_581 . VAR_582 & VAR_583 ) && ( VAR_584 -> VAR_585 & VAR_586 ) ) VAR_587 -> VAR_588 |= VAR_589 | VAR_590 ; VAR_591 -> VAR_592 . VAR_593 &= ~ ( VAR_594 | VAR_595 | VAR_596 ) ; } else if ( ! METHOD_68 ( VAR_597 ) && ( VAR_598 -> VAR_599 & VAR_600 ) ) { METHOD_69 ( VAR_601 ) ; VAR_602 -> VAR_603 |= VAR_604 | VAR_605 ; } } } if ( ( VAR_606 -> VAR_607 & VAR_608 ) || ( ( VAR_609 -> VAR_610 & VAR_611 ) && VAR_612 -> VAR_613 -> VAR_614 . VAR_615 ) ) METHOD_70 ( VAR_616 , VAR_617 , ( TYPE_21 ) ! METHOD_71 ( VAR_618 -> VAR_619 & VAR_620 ) ) ; if ( ! ( VAR_621 -> VAR_622 & VAR_623 ) ) { if ( VAR_624 -> VAR_625 & VAR_626 && ! ( VAR_627 -> VAR_628 & VAR_629 ) ) VAR_630 |= METHOD_72 ( VAR_631 , VAR_632 , VAR_633 | ( ( ( VAR_634 -> VAR_635 & VAR_636 ) ? VAR_637 : 0 ) | ( VAR_638 ? VAR_639 : 0 ) | ( ( VAR_640 -> VAR_641 & VAR_642 ) ? VAR_643 : 0 ) ) ) ; ( TYPE_22 ) METHOD_73 ( VAR_644 , VAR_645 -> VAR_646 , 0L , VAR_647 , "indexfile" , VAR_648 ) ; VAR_649 -> VAR_650 &= ~ VAR_651 ; } METHOD_74 ( VAR_652 , VAR_653 ) ; VAR_654 : if ( METHOD_75 ( VAR_655 ) ) { METHOD_76 ( VAR_656 , "%dwhenclosingMyISAM-table\'%s\'" , VAR_657 , VAR_658 ) ; METHOD_77 ( 1 ) ; } if ( VAR_659 == 0 ) { if ( VAR_660 -> VAR_661 & VAR_662 ) VAR_663 |= METHOD_78 ( VAR_664 , VAR_665 , VAR_666 , ( ( VAR_667 -> VAR_668 & VAR_669 ) ? METHOD_79 ( VAR_670 ) : METHOD_80 ( 0 ) ) ) ; if ( VAR_671 -> VAR_672 & VAR_673 ) VAR_674 |= METHOD_81 ( VAR_675 , VAR_676 , VAR_677 , METHOD_82 ( 0 ) ) ; } ( TYPE_23 ) METHOD_83 ( VAR_678 ) ; ( TYPE_24 ) METHOD_84 ( VAR_679 ) ; if ( VAR_680 -> VAR_681 ) { if ( VAR_682 -> VAR_683 & ( VAR_684 | VAR_685 | VAR_686 ) ) { ( TYPE_25 ) METHOD_85 ( VAR_687 , "MyISAM-table\'%s\'isnotfixedbecauseoferrors\\n" , VAR_688 ) ; if ( VAR_689 -> VAR_690 & VAR_691 ) ( TYPE_26 ) METHOD_86 ( VAR_692 , "Tryfixingitbyusingthe--safe-recover(-o),the--force(-f)optionorbynotusingthe--quick(-q)flag\\n" ) ; } else if ( ! ( VAR_693 -> VAR_694 & 2 ) && ! ( VAR_695 -> VAR_696 & VAR_697 ) ) ( TYPE_27 ) METHOD_87 ( VAR_698 , "MyISAM-table\'%s\'iscorrupted\\nFixitusingswitch\\"-r\\"or\\"-o\\"\\n" , VAR_699 ) ; } else if ( VAR_700 -> VAR_701 && ! ( VAR_702 -> VAR_703 & ( VAR_704 | VAR_705 | VAR_706 | VAR_707 ) ) ) ( TYPE_28 ) METHOD_88 ( VAR_708 , "MyISAM-table\'%s\'isusablebutshouldbefixed\\n" , VAR_709 ) ; ( TYPE_29 ) METHOD_89 ( VAR_710 ) ; METHOD_90 ( VAR_711 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) {  TYPE_5 VAR_4 = ( VAR_5 ? VAR_6 : ( TYPE_6 ) METHOD_1 ( VAR_7 ) ) + 1 ;  TYPE_7 * VAR_8 = METHOD_2 ( VAR_9 ) ; unsigned TYPE_8 VAR_10 ; TYPE_9 VAR_11 = 0 ; unsigned TYPE_10 VAR_12 ;  TYPE_11 VAR_13 ;  if ( ! VAR_14 ) return VAR_15 ; while ( -- VAR_16 > 0 ) { VAR_17 = * VAR_18 ; if ( ( '%' == VAR_19 ) && METHOD_3 ( VAR_20 [ 1 ] ) && METHOD_4 ( VAR_21 [ 2 ] ) ) { TYPE_12 VAR_22 [ 3 ] ; TYPE_13 * VAR_23 ; VAR_24 [ 0 ] = VAR_25 [ 1 ] ; VAR_26 [ 1 ] = VAR_27 [ 2 ] ; VAR_28 [ 2 ] = 0 ; VAR_29 = METHOD_5 ( VAR_30 , & VAR_31 , 16 ) ; VAR_32 = METHOD_6 ( VAR_33 ) ;  VAR_34 = METHOD_7 ( VAR_35 , & VAR_36 , 1 ) ;   if ( VAR_37 ) {  METHOD_8 ( VAR_38 ) ; return VAR_39 ; } VAR_40 += 2 ; VAR_41 -= 2 ; } VAR_42 [ VAR_43 ++ ] = VAR_44 ; VAR_45 ++ ; } VAR_46 [ VAR_47 ] = 0 ; if ( VAR_48 )  * VAR_49 = VAR_50 ;  return VAR_51 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 = STRUCT_OR_UNION_4 -> VAR_3 ; const struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_2 VAR_7 = 0 ; TYPE_3 VAR_8 = 0 ; unsigned TYPE_4 VAR_9 = 0 ; if ( METHOD_1 ( METHOD_2 ( ) , VAR_10 ) ) VAR_11 |= VAR_12 ; do { struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; TYPE_5 VAR_13 ; unsigned TYPE_6 VAR_14 ; unsigned TYPE_7 VAR_15 ; TYPE_8 VAR_16 ; TYPE_9 * VAR_17 ; VAR_18 = ( VAR_19 & ( VAR_20 - 1 ) ) ; VAR_21 = VAR_22 >> VAR_23 ; VAR_24 = min_t ( unsigned TYPE_10 , VAR_25 - VAR_26 , METHOD_3 ( VAR_27 ) ) ; VAR_28 : if ( METHOD_4 ( METHOD_5 ( VAR_29 , VAR_30 ) ) ) { VAR_31 = - VAR_32 ; break ; } VAR_33 = VAR_34 -> METHOD_6 ( STRUCT_OR_UNION_8 , VAR_35 , VAR_36 , VAR_37 , VAR_38 , & STRUCT_OR_UNION_9 , & VAR_39 ) ; if ( METHOD_7 ( VAR_40 ) ) break ; METHOD_8 ( ) ; VAR_41 = METHOD_9 ( STRUCT_OR_UNION_10 , VAR_42 , VAR_43 , VAR_44 ) ; METHOD_10 ( ) ; METHOD_11 ( STRUCT_OR_UNION_11 ) ; VAR_45 = VAR_46 -> METHOD_12 ( STRUCT_OR_UNION_12 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , STRUCT_OR_UNION_13 , VAR_51 ) ; if ( METHOD_13 ( VAR_52 < 0 ) ) break ; VAR_53 = VAR_54 ; METHOD_14 ( ) ;  if ( METHOD_15 ( VAR_55 == 0 ) ) {  VAR_56 = min_t ( unsigned TYPE_11 , VAR_57 - VAR_58 , METHOD_16 ( VAR_59 ) ) ; goto VAR_60 ; }  METHOD_17 ( VAR_61 , VAR_62 ) ;  VAR_63 += VAR_64 ; VAR_65 += VAR_66 ; METHOD_18 ( VAR_67 ) ; } while ( METHOD_19 ( VAR_68 ) ) ; return VAR_69 ? VAR_70 : VAR_71 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { const struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; TYPE_2 VAR_9 ; TYPE_3 VAR_10 ; TYPE_4 VAR_11 ; VAR_12 = VAR_13 -> METHOD_1 ( VAR_14 , * VAR_15 , & VAR_16 ) ; METHOD_2 ( VAR_17 , VAR_18 -> VAR_19 , VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 -> VAR_24 ; VAR_25 = ( struct STRUCT_OR_UNION_6 * ) VAR_26 -> VAR_27 ; VAR_28 = METHOD_3 ( VAR_29 -> VAR_30 ) ; if ( VAR_31 == 0 ) { TYPE_5 VAR_32 = 0 ; do { METHOD_4 ( 2 ) ; METHOD_5 ( ) ; VAR_33 = METHOD_6 ( VAR_34 -> VAR_35 ) ; } while ( VAR_36 == 0 && VAR_37 ++ < 5 ) ; if ( METHOD_7 ( VAR_38 == 0 ) ) { VAR_39 = VAR_40 -> VAR_41 ; goto VAR_42 ; } } if ( METHOD_8 ( METHOD_9 ( VAR_43 , VAR_44 ) ) ) { METHOD_10 ( VAR_45 -> VAR_46 -> VAR_47 , "DMARX:Droppingpoisonedbuffer.\\n" ) ; VAR_48 = VAR_49 -> VAR_50 ; goto VAR_51 ; }  if ( METHOD_11 ( VAR_52 > VAR_53 -> VAR_54 ) ) {  TYPE_6 VAR_55 = 0 ; TYPE_7 VAR_56 = VAR_57 ; while ( 1 ) { VAR_58 = VAR_59 -> METHOD_12 ( VAR_60 , * VAR_61 , & VAR_62 ) ; METHOD_13 ( VAR_63 , VAR_64 -> VAR_65 ) ; METHOD_14 ( VAR_66 , VAR_67 -> VAR_68 , VAR_69 -> VAR_70 ) ; * VAR_71 = METHOD_15 ( VAR_72 , * VAR_73 ) ; VAR_74 ++ ; VAR_75 -= VAR_76 -> VAR_77 ; if ( VAR_78 <= 0 ) break ; } METHOD_16 ( VAR_79 -> VAR_80 -> VAR_81 , "DMARXbuffertoosmall" "(len:%u,buffer:%u,nr-dropped:%d)\\n" , VAR_82 , VAR_83 -> VAR_84 , VAR_85 ) ; goto VAR_86 ; } VAR_87 = VAR_88 -> VAR_89 ; VAR_90 = METHOD_17 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 ) ; if ( METHOD_18 ( VAR_95 ) ) { METHOD_19 ( VAR_96 -> VAR_97 -> VAR_98 , "DMARX:setup_rx_descbuffer()failed\\n" ) ; goto VAR_99 ; } METHOD_20 ( VAR_100 , VAR_101 , VAR_102 -> VAR_103 , 0 ) ; METHOD_21 ( VAR_104 , VAR_105 + VAR_106 -> VAR_107 ) ; METHOD_22 ( VAR_108 , VAR_109 -> VAR_110 ) ; METHOD_23 ( VAR_111 -> VAR_112 , VAR_113 , VAR_114 ) ; VAR_115 : return ; VAR_116 : METHOD_24 ( VAR_117 , VAR_118 ) ; METHOD_25 ( VAR_119 , VAR_120 , VAR_121 -> VAR_122 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 * VAR_1 ; DEBUGMSGTL ( ( "init_usm" , "unit_usm:%" NETSNMP_PRIo "u%" NETSNMP_PRIo "u\\n" , VAR_2 [ 0 ] , VAR_3 [ 1 ] ) ) ; METHOD_1 ( ) ; VAR_4 = METHOD_2 ( STRUCT_OR_UNION_1 ) ; if ( VAR_5 == VAR_6 ) return ; VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ;  VAR_16 -> VAR_17 = VAR_18 ;  VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; if ( METHOD_3 ( VAR_31 , "usm" , VAR_32 ) != VAR_33 ) { METHOD_4 ( VAR_34 ) ; METHOD_5 ( VAR_35 , "couldnotregisterusmsecmod\\n" ) ; return ; } METHOD_6 ( VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; METHOD_7 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 ) ; METHOD_8 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ; METHOD_9 ( "snmp" , "defAuthType" , VAR_48 , VAR_49 , "MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224" ) ; METHOD_10 ( "snmp" , "defPrivType" , VAR_50 , VAR_51 , "DES" TYPE_3 TYPE_4 "|AES|AES-128" TYPE_5 NETSNMP_DRAFT_BLUMENTHAL_AES_04 "|AES-192|AES-256" else "(AESsupportnotavailable)" ) ; METHOD_11 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; VAR_56 = METHOD_12 ( VAR_57 , VAR_58 ) ; METHOD_13 ( VAR_59 , "userSetAuthPass" , VAR_60 , VAR_61 , VAR_62 ) ; METHOD_14 ( VAR_63 , "userSetPrivPass" , VAR_64 , VAR_65 , VAR_66 ) ; METHOD_15 ( VAR_67 , "userSetAuthKey" , VAR_68 , VAR_69 , VAR_70 ) ; METHOD_16 ( VAR_71 , "userSetPrivKey" , VAR_72 , VAR_73 , VAR_74 ) ; METHOD_17 ( VAR_75 , "userSetAuthLocalKey" , VAR_76 , VAR_77 , VAR_78 ) ; METHOD_18 ( VAR_79 , "userSetPrivLocalKey" , VAR_80 , VAR_81 , VAR_82 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 METHOD_1 , TYPE_2 METHOD_2 , TYPE_3 * VAR_1 ) { TYPE_4 VAR_2 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; METHOD_3 ( & VAR_4 , VAR_5 ) ; while ( ( STRUCT_OR_UNION_4 = METHOD_4 ( VAR_6 ) ) != VAR_7 ) { if ( STRUCT_OR_UNION_5 -> STRUCT_OR_UNION_6 ) METHOD_5 ( VAR_8 , STRUCT_OR_UNION_7 -> STRUCT_OR_UNION_8 ) ; METHOD_6 ( STRUCT_OR_UNION_9 , VAR_9 ) ; } for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 . VAR_14 ; VAR_15 ++ ) { struct STRUCT_OR_UNION_10 * VAR_16 = VAR_17 -> VAR_18 . VAR_19 + VAR_20 ; struct STRUCT_OR_UNION_11 * VAR_21 = VAR_22 -> VAR_23 ; const TYPE_5 * VAR_24 = VAR_25 -> VAR_26 ; const TYPE_6 * VAR_27 = VAR_28 -> VAR_29 ; if ( VAR_30 -> VAR_31 & ( VAR_32 | VAR_33 ) ) continue ; if ( VAR_34 -> VAR_35 == VAR_36 ) { VAR_37 -> VAR_38 |= VAR_39 ;  METHOD_7 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 ) ;  continue ; } if ( ! VAR_44 ) VAR_45 = "" ; if ( VAR_46 -> VAR_47 == VAR_48 ) { METHOD_8 ( VAR_49 , ( struct STRUCT_OR_UNION_12 * ) VAR_50 , METHOD_9 , & VAR_51 , VAR_52 , VAR_53 ) ; continue ; } if ( VAR_54 -> VAR_55 == VAR_56 ) { METHOD_10 ( VAR_57 , ( struct STRUCT_OR_UNION_13 * ) VAR_58 , METHOD_11 ,  VAR_59 , VAR_60 , VAR_61 ) ;  continue ; } METHOD_12 ( "unknownpendingobject%s(%s)" , METHOD_13 ( & VAR_62 -> VAR_63 ) , VAR_64 ) ; } METHOD_14 ( & VAR_65 -> VAR_66 ) ; METHOD_15 ( & VAR_67 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ! VAR_6 ) VAR_7 = & VAR_8 ; VAR_9 -> VAR_10 = VAR_11 -> VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; ++ VAR_16 ) VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 = VAR_21 -> VAR_22 [ VAR_23 ] . VAR_24 = VAR_25 ;  return ! METHOD_1 ( VAR_26 -> VAR_27 , VAR_28 , VAR_29 , VAR_30 -> VAR_31 | VAR_32 , VAR_33 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 , VAR_8 , VAR_9 , VAR_10 = - 1 , VAR_11 ; TYPE_8 VAR_12 , VAR_13 ; const TYPE_9 * VAR_14 = VAR_15 + VAR_16 ; TYPE_10 VAR_17 [ 768 ] , VAR_18 [ 3 ] ; TYPE_11 VAR_19 = ( VAR_20 -> VAR_21 + 1 ) * VAR_22 -> VAR_23 ; TYPE_12 VAR_24 ; TYPE_13 VAR_25 , VAR_26 , VAR_27 ; TYPE_14 VAR_28 , VAR_29 , VAR_30 ; TYPE_15 * VAR_31 = VAR_32 -> VAR_33 + VAR_34 * VAR_35 -> VAR_36 * 3 + VAR_37 * VAR_38 -> VAR_39 * VAR_40 -> VAR_41 ; if ( VAR_42 < 2 ) return VAR_43 ; VAR_44 = METHOD_1 ( VAR_45 -> VAR_46 - VAR_47 * VAR_48 -> VAR_49 , VAR_50 -> VAR_51 ) ; VAR_52 = METHOD_2 ( VAR_53 -> VAR_54 - VAR_55 * VAR_56 -> VAR_57 , VAR_58 -> VAR_59 ) ; VAR_60 = * VAR_61 ++ ; VAR_62 = VAR_63 >> 5 ; if ( VAR_64 == 0 ) { TYPE_16 VAR_65 ; METHOD_3 ( VAR_66 , VAR_67 , 3 ) ; VAR_68 += 3 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; VAR_72 ++ , VAR_73 += VAR_74 -> VAR_75 ) for ( VAR_76 = 0 ; VAR_77 < VAR_78 ; VAR_79 ++ ) METHOD_4 ( VAR_80 + VAR_81 * 3 , VAR_82 , 3 ) ; return 0 ; } else if ( VAR_83 == 1 ) { return METHOD_5 ( & VAR_84 -> VAR_85 , VAR_86 , VAR_87 , VAR_88 , VAR_89 - VAR_90 , VAR_91 , VAR_92 -> VAR_93 , VAR_94 , 0 , 0 , 0 ) ; } if ( VAR_95 != 2 ) { METHOD_6 ( VAR_96 , VAR_97 , 3 ) ; VAR_98 += 3 ; } VAR_99 = * VAR_100 ++ + 1 ; METHOD_7 ( VAR_101 , VAR_102 , VAR_103 * 3 ) ; VAR_104 += VAR_105 * 3 ; if ( VAR_106 != 2 ) { for ( VAR_107 = 0 ; VAR_108 < VAR_109 ; VAR_110 ++ ) { if ( ! METHOD_8 ( VAR_111 + VAR_112 * 3 , VAR_113 , 3 ) ) { VAR_114 = VAR_115 ; break ; } } } if ( VAR_116 - VAR_117 < 2 ) return 0 ; VAR_118 = ( VAR_119 [ 0 ] << 8 ) | VAR_120 [ 1 ] ; VAR_121 += 2 ;  if ( VAR_122 - VAR_123 < VAR_124 )  return VAR_125 ; VAR_126 = METHOD_9 ( VAR_127 -> VAR_128 , & VAR_129 , VAR_130 , VAR_131 ) ; if ( VAR_132 ) return VAR_133 ; VAR_134 += VAR_135 ; if ( VAR_136 == 2 ) { METHOD_10 ( VAR_137 -> VAR_138 , VAR_139 , VAR_140 , VAR_141 -> VAR_142 , VAR_143 , 0 , VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ; return 0 ; } VAR_149 = * VAR_150 ++ + 1 ; VAR_151 = 0 ; VAR_152 = METHOD_11 ( VAR_153 , 16 ) >> 4 ; VAR_154 = 0 ; for ( VAR_155 = 0 ; VAR_156 < ( METHOD_12 ( VAR_157 , 16 ) >> 4 ) ; VAR_158 ++ ) { for ( VAR_159 = 0 ; VAR_160 < ( METHOD_13 ( VAR_161 , 16 ) >> 4 ) ; VAR_162 ++ ) { if ( ! VAR_163 ) {  VAR_164 = * VAR_165 ++ ;  VAR_166 = 8 ; } VAR_167 = VAR_168 & 1 ; VAR_169 -- ; VAR_170 >>= 1 ; VAR_171 += VAR_172 ; if ( VAR_173 > VAR_174 ) return VAR_175 ; VAR_176 -> VAR_177 [ VAR_178 + VAR_179 * VAR_180 ] = VAR_181 ; } } METHOD_14 ( VAR_182 -> VAR_183 , 0 , VAR_184 -> VAR_185 * VAR_186 ) ; METHOD_15 ( & VAR_187 -> VAR_188 , VAR_189 , VAR_190 , VAR_191 , VAR_192 - VAR_193 , VAR_194 -> VAR_195 , VAR_196 -> VAR_197 , VAR_198 -> VAR_199 , VAR_200 , VAR_201 , 0 ) ; METHOD_16 ( VAR_202 -> VAR_203 , VAR_204 , VAR_205 , VAR_206 -> VAR_207 , VAR_208 -> VAR_209 , VAR_210 -> VAR_211 , VAR_212 , VAR_213 , VAR_214 , VAR_215 , VAR_216 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( METHOD_2 ( & VAR_1 -> VAR_2 ) ) ; METHOD_3 ( & VAR_3 -> VAR_4 , & VAR_5 -> VAR_6 . VAR_7 ) ; METHOD_4 ( ! VAR_8 -> VAR_9 ) ; METHOD_5 ( VAR_10 -> VAR_11 ) ; VAR_12 -> VAR_13 = VAR_14 ; METHOD_6 ( VAR_15 -> VAR_16 ) ;  METHOD_7 ( & VAR_17 -> VAR_18 ) ;  }
static TYPE_0 METHOD_0 ( const TYPE_1 VAR_0 , const unsigned TYPE_2 * VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , unsigned TYPE_5 * VAR_4 ) { VAR_5 if ( VAR_6 == 0 ) return ( VAR_7 ) ; VAR_8 -- METHOD_1 ( VAR_9 ) if ( ( ( TYPE_6 ) VAR_10 + VAR_11 ) > ( TYPE_7 ) VAR_12 ) return ( VAR_13 ) ; VAR_14 += VAR_15 TYPE_8 VAR_16 ; register TYPE_9 VAR_17 , VAR_18 ; TYPE_10 VAR_19 ; TYPE_11 VAR_20 ; VAR_21 = ( TYPE_12 ) VAR_22 ; for ( VAR_23 = 0 ; ( VAR_24 > 1 ) && ( VAR_25 < ( TYPE_13 ) VAR_26 ) ; ) { VAR_27 -- ; VAR_28 = ( TYPE_14 ) ( * VAR_29 ++ ) ; if ( VAR_30 == 128 ) continue ; if ( VAR_31 > 128 ) { VAR_32 = 256 - VAR_33 + 1 ; VAR_34 ; VAR_35 = ( * VAR_36 ++ ) ; for ( VAR_37 = 0 ; VAR_38 < ( TYPE_15 ) VAR_39 ; VAR_40 ++ ) { switch ( VAR_41 ) { case 1 : { METHOD_2 ( 8 ) ; * VAR_42 ++ = ( VAR_43 >> 7 ) & 0x01 ? 0U : 255U ; * VAR_44 ++ = ( VAR_45 >> 6 ) & 0x01 ? 0U : 255U ; * VAR_46 ++ = ( VAR_47 >> 5 ) & 0x01 ? 0U : 255U ; * VAR_48 ++ = ( VAR_49 >> 4 ) & 0x01 ? 0U : 255U ; * VAR_50 ++ = ( VAR_51 >> 3 ) & 0x01 ? 0U : 255U ; * VAR_52 ++ = ( VAR_53 >> 2 ) & 0x01 ? 0U : 255U ; * VAR_54 ++ = ( VAR_55 >> 1 ) & 0x01 ? 0U : 255U ; * VAR_56 ++ = ( VAR_57 >> 0 ) & 0x01 ? 0U : 255U ; break ; } case 2 : { METHOD_3 ( 4 ) ; * VAR_58 ++ = ( unsigned TYPE_16 ) ( ( VAR_59 >> 6 ) & 0x03 ) ; * VAR_60 ++ = ( unsigned TYPE_17 ) ( ( VAR_61 >> 4 ) & 0x03 ) ; * VAR_62 ++ = ( unsigned TYPE_18 ) ( ( VAR_63 >> 2 ) & 0x03 ) ; * VAR_64 ++ = ( unsigned TYPE_19 ) ( ( VAR_65 & 0x03 ) & 0x03 ) ; break ; } case 4 : { METHOD_4 ( 2 ) ; * VAR_66 ++ = ( unsigned TYPE_20 ) ( ( VAR_67 >> 4 ) & 0xff ) ; * VAR_68 ++ = ( unsigned TYPE_21 ) ( ( VAR_69 & 0x0f ) & 0xff ) ; break ; } default : { METHOD_5 ( 1 ) ; * VAR_70 ++ = ( unsigned TYPE_22 ) VAR_71 ; break ; } } } continue ; } VAR_72 ++ ; for ( VAR_73 = 0 ; VAR_74 < ( TYPE_23 ) VAR_75 ; VAR_76 ++ ) {  switch ( VAR_77 )  { case 1 : { METHOD_6 ( 8 ) ; * VAR_78 ++ = ( * VAR_79 >> 7 ) & 0x01 ? 0U : 255U ; * VAR_80 ++ = ( * VAR_81 >> 6 ) & 0x01 ? 0U : 255U ; * VAR_82 ++ = ( * VAR_83 >> 5 ) & 0x01 ? 0U : 255U ; * VAR_84 ++ = ( * VAR_85 >> 4 ) & 0x01 ? 0U : 255U ; * VAR_86 ++ = ( * VAR_87 >> 3 ) & 0x01 ? 0U : 255U ; * VAR_88 ++ = ( * VAR_89 >> 2 ) & 0x01 ? 0U : 255U ; * VAR_90 ++ = ( * VAR_91 >> 1 ) & 0x01 ? 0U : 255U ; * VAR_92 ++ = ( * VAR_93 >> 0 ) & 0x01 ? 0U : 255U ; break ; } case 2 : { METHOD_7 ( 4 ) ; * VAR_94 ++ = ( * VAR_95 >> 6 ) & 0x03 ; * VAR_96 ++ = ( * VAR_97 >> 4 ) & 0x03 ; * VAR_98 ++ = ( * VAR_99 >> 2 ) & 0x03 ; * VAR_100 ++ = ( * VAR_101 & 0x03 ) & 0x03 ; break ; } case 4 : { METHOD_8 ( 2 ) ; * VAR_102 ++ = ( * VAR_103 >> 4 ) & 0xff ; * VAR_104 ++ = ( * VAR_105 & 0x0f ) & 0xff ; break ; } default : { METHOD_9 ( 1 ) ; * VAR_106 ++ = ( * VAR_107 ) ; break ; } }  VAR_108 ;  VAR_109 ++ ; } } return ( VAR_110 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 , * VAR_4 ; if ( METHOD_1 ( ! VAR_5 ) ) return - VAR_6 ; METHOD_2 ( VAR_7 ) ; if ( VAR_8 -> VAR_9 & VAR_10 ) { METHOD_3 ( & VAR_11 ) ; while ( VAR_12 -> VAR_13 & VAR_14 ) { METHOD_4 ( & VAR_15 ) ; METHOD_5 ( 10 ) ; METHOD_6 ( & VAR_16 ) ; } METHOD_7 ( & VAR_17 ) ; METHOD_8 ( & VAR_18 ) ; METHOD_9 ( & VAR_19 -> VAR_20 ) ; METHOD_10 ( & VAR_21 ) ; } else { VAR_22 = VAR_23 -> VAR_24 ; if ( METHOD_11 ( ! VAR_25 ) ) goto VAR_26 ; METHOD_12 ( & VAR_27 -> VAR_28 ) ; while ( VAR_29 -> VAR_30 & VAR_31 ) { METHOD_13 ( & VAR_32 -> VAR_33 ) ; METHOD_14 ( 10 ) ; METHOD_15 ( & VAR_34 -> VAR_35 ) ; } METHOD_16 ( & VAR_36 -> VAR_37 ) ; METHOD_17 ( & VAR_38 ) ; METHOD_18 ( & VAR_39 -> VAR_40 ) ; if ( VAR_41 && METHOD_19 ( & VAR_42 -> VAR_43 ) && VAR_44 -> VAR_45 . METHOD_20 ) VAR_46 -> VAR_47 . METHOD_21 ( VAR_48 ) ;  METHOD_22 ( VAR_49 , VAR_50 , & VAR_51 -> VAR_52 ,  VAR_53 ) {  METHOD_23 ( & VAR_54 ) ;  METHOD_24 ( VAR_55 , 1 , VAR_56 ) ; METHOD_25 ( & VAR_57 -> VAR_58 , & VAR_59 ) ; VAR_60 -> VAR_61 = VAR_62 ; VAR_63 -> VAR_64 = VAR_65 ;  METHOD_26 ( & VAR_66 ) ;   }  METHOD_27 ( & VAR_67 ) ; } VAR_68 : if ( VAR_69 -> METHOD_28 ) VAR_70 -> METHOD_29 ( VAR_71 ) ; METHOD_30 ( VAR_72 -> VAR_73 ) ; METHOD_31 ( VAR_74 ) ; if ( VAR_75 ) METHOD_32 ( VAR_76 -> VAR_77 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; if ( VAR_5 < 2 ) return 0 ; METHOD_1 ( * VAR_6 , 2 ) ; VAR_7 = VAR_8 [ 1 ] ; VAR_9 = VAR_10 [ 0 ] ; if ( VAR_11 < VAR_12 ) return 0 ; if ( VAR_13 < 2 ) { METHOD_2 ( ( VAR_14 , "\\n\\t%sOption(0x%02x),length%u(lengthbogus,shouldbe>=2)" , METHOD_3 ( VAR_15 , "Unknown" , VAR_16 ) , VAR_17 , VAR_18 ) ) ; return 0 ; } METHOD_4 ( ( VAR_19 , "\\n\\t%sOption(0x%02x),length%u" , METHOD_5 ( VAR_20 , "Unknown" , VAR_21 ) , VAR_22 , VAR_23 ) ) ; switch ( VAR_24 ) { case VAR_25 : if ( VAR_26 < 3 ) { METHOD_6 ( ( VAR_27 , "(lengthbogus,shouldbe>=3)" ) ) ; return VAR_28 ; }  METHOD_7 ( * ( VAR_29 + 2 ) , 1 ) ;  METHOD_8 ( ( VAR_30 , ":Version:%u,DictionaryBits:%u" , VAR_31 [ 2 ] >> 5 , VAR_32 [ 2 ] & 0x1f ) ) ; break ; case VAR_33 : if ( VAR_34 < 4 ) { METHOD_9 ( ( VAR_35 , "(lengthbogus,shouldbe>=4)" ) ) ; return VAR_36 ; }  METHOD_10 ( * ( VAR_37 + 2 ) , 1 ) ;  METHOD_11 ( ( VAR_38 , ":Features:%u,PxP:%s,History:%u,CTX-ID:%u" , ( VAR_39 [ 2 ] & 0xc0 ) >> 6 , ( VAR_40 [ 2 ] & 0x20 ) ? "Enabled" : "Disabled" , VAR_41 [ 2 ] & 0x1f , VAR_42 [ 3 ] ) ) ; break ; case VAR_43 : if ( VAR_44 < 4 ) { METHOD_12 ( ( VAR_45 , "(lengthbogus,shouldbe>=4)" ) ) ; return VAR_46 ; }  METHOD_13 ( * ( VAR_47 + 2 ) , 1 ) ;  METHOD_14 ( ( VAR_48 , ":Window:%uK,Method:%s(0x%x),MBZ:%u,CHK:%u" , ( VAR_49 [ 2 ] & 0xf0 ) >> 4 , ( ( VAR_50 [ 2 ] & 0x0f ) == 8 ) ? "zlib" : "unknown" , VAR_51 [ 2 ] & 0x0f , ( VAR_52 [ 3 ] & 0xfc ) >> 2 , VAR_53 [ 3 ] & 0x03 ) ) ; break ; if 0 case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : case VAR_59 : case VAR_60 : case VAR_61 : case VAR_62 : case VAR_63 : case VAR_64 : case VAR_65 : break ; default : if ( VAR_66 -> VAR_67 < 2 ) METHOD_15 ( VAR_68 , & VAR_69 [ 2 ] , "\\n\\t" , VAR_70 - 2 ) ; break ; } if ( VAR_71 -> VAR_72 > 1 ) METHOD_16 ( VAR_73 , & VAR_74 [ 2 ] , "\\n\\t" , VAR_75 - 2 ) ; return VAR_76 ; VAR_77 : METHOD_17 ( ( VAR_78 , "[|ccp]" ) ) ; return 0 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , TYPE_3 * VAR_1 ) { TYPE_4 * VAR_2 = VAR_3 ? VAR_4 -> VAR_5 : VAR_6 ; TYPE_5 * VAR_7 = VAR_8 ? VAR_9 -> VAR_10 : VAR_11 ; if ( VAR_12 ) { TYPE_6 VAR_13 = VAR_14 -> VAR_15 ;  const TYPE_7 * VAR_16 = VAR_17 -> VAR_18 ;  TYPE_8 VAR_19 = VAR_20 -> VAR_21 ; TYPE_9 VAR_22 = METHOD_1 ( VAR_23 -> VAR_24 ) ; METHOD_2 ( VAR_25 -> VAR_26 , "io.va" , ( VAR_27 -> VAR_28 ) ? VAR_29 -> VAR_30 -> VAR_31 : 0 ) ; METHOD_3 ( VAR_32 -> VAR_33 , "bin.baddr" , VAR_34 ) ; METHOD_4 ( VAR_35 -> VAR_36 , "asm.arch" , VAR_37 ) ; METHOD_5 ( VAR_38 -> VAR_39 , "asm.bits" , VAR_40 ) ; METHOD_6 ( VAR_41 -> VAR_42 , "anal.arch" , VAR_43 ) ;  if ( VAR_44 -> VAR_45 && * VAR_46 -> VAR_47 ) {   METHOD_7 ( VAR_48 -> VAR_49 , "anal.cpu" , VAR_50 -> VAR_51 ) ;  } else { METHOD_8 ( VAR_52 -> VAR_53 , "anal.cpu" , VAR_54 ) ; } METHOD_9 ( VAR_55 -> VAR_56 , VAR_57 ) ; METHOD_10 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 ) ;  METHOD_11 ( VAR_64 , VAR_65 ) ;  return VAR_66 ; } return VAR_67 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  struct STRUCT_OR_UNION_1 * VAR_1 , * VAR_2 ;  struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; METHOD_2 ( VAR_8 , & VAR_9 -> VAR_10 . VAR_11 ) ; METHOD_3 ( VAR_12 , & VAR_13 -> VAR_14 , VAR_15 ) { METHOD_4 ( & VAR_16 -> VAR_17 ) ; METHOD_5 ( & VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 ) ; METHOD_6 ( & VAR_22 -> VAR_23 ) ; } METHOD_7 ( VAR_24 ) ; METHOD_8 ( VAR_25 , VAR_26 , & VAR_27 -> VAR_28 , VAR_29 ) { TYPE_1 VAR_30 ; VAR_31 = METHOD_9 ( VAR_32 -> VAR_33 ) ; if ( VAR_34 ) METHOD_10 ( VAR_35 , VAR_36 , VAR_37 ) ; else METHOD_11 ( & VAR_38 -> VAR_39 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 -> VAR_11 ; TYPE_6 * VAR_12 = & VAR_13 -> VAR_14 -> VAR_15 ; TYPE_7 VAR_16 ; TYPE_8 VAR_17 ; TYPE_9 VAR_18 ; if ( VAR_19 -> VAR_20 != 0 ) { if ( ! VAR_21 -> VAR_22 -> VAR_23 )  VAR_24 -> VAR_25 = METHOD_1 (  VAR_26 ) ; else VAR_27 -> VAR_28 -> VAR_29 += VAR_30 -> VAR_31 ; } VAR_32 = VAR_33 -> VAR_34 + METHOD_2 ( VAR_35 , VAR_36 ) ; if ( ( VAR_37 < 0 ) || ( VAR_38 > 51 ) ) return VAR_39 ; VAR_40 -> VAR_41 = VAR_42 ; METHOD_3 ( "SH:slice_qp_delta" , VAR_43 -> VAR_44 - VAR_45 -> VAR_46 ) ; if ( VAR_47 -> VAR_48 == 1 ) { VAR_49 = METHOD_4 ( VAR_50 , VAR_51 ) ; METHOD_5 ( "SH:disable_deblocking_filter_idc" , VAR_52 ) ; if ( VAR_53 > VAR_54 ) { return VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 ; if ( VAR_59 != 1 ) { VAR_60 = METHOD_6 ( VAR_61 , VAR_62 ) << 1 ; if ( ( VAR_63 > VAR_64 ) || ( VAR_65 > VAR_66 ) ) { return VAR_67 ; } VAR_68 -> VAR_69 = VAR_70 ; METHOD_7 ( "SH:slice_alpha_c0_offset_div2" , VAR_71 -> VAR_72 >> 1 ) ; VAR_73 = METHOD_8 ( VAR_74 , VAR_75 ) << 1 ; if ( ( VAR_76 > VAR_77 ) || ( VAR_78 > VAR_79 ) ) { return VAR_80 ; } VAR_81 -> VAR_82 = VAR_83 ; METHOD_9 ( "SH:slice_beta_offset_div2" , VAR_84 -> VAR_85 >> 1 ) ; } else { VAR_86 -> VAR_87 = 0 ; VAR_88 -> VAR_89 = 0 ; } } else { VAR_90 -> VAR_91 = 0 ; VAR_92 -> VAR_93 = 0 ; VAR_94 -> VAR_95 = 0 ; } VAR_96 -> VAR_97 [ 0 ] = 0 ; VAR_98 -> VAR_99 [ 1 ] = 0 ; VAR_100 -> VAR_101 = 2 ; if ( VAR_102 -> VAR_103 ) { VAR_104 ; VAR_105 ; if ( VAR_106 -> VAR_107 -> VAR_108 ) { VAR_109 -> VAR_110 = VAR_111 ; } else VAR_112 -> VAR_113 = VAR_114 ; VAR_115 = METHOD_10 ( VAR_116 , VAR_117 , VAR_118 ) ; if ( VAR_119 != VAR_120 ) return VAR_121 ; VAR_122 ; VAR_123 ; } else { if ( VAR_124 -> VAR_125 -> VAR_126 ) { VAR_127 -> VAR_128 = VAR_129 ; } else VAR_130 -> VAR_131 = VAR_132 ; VAR_133 = METHOD_11 ( VAR_134 , VAR_135 , VAR_136 ) ; if ( VAR_137 != VAR_138 ) return VAR_139 ; } return VAR_140 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ;  TYPE_6 VAR_5 ;   TYPE_7 VAR_6 [ VAR_7 ] ;  TYPE_8 VAR_8 [ VAR_9 ] ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 [ 13 ] ; VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( VAR_17 < 0 ) return VAR_18 ;  VAR_19 = METHOD_2 ( & VAR_20 -> VAR_21 , VAR_22 , VAR_23 , & VAR_24 ,  VAR_25 , VAR_26 , VAR_27 ) ; if ( VAR_28 == - 1 ) return VAR_29 ;  if ( ! METHOD_3 ( VAR_30 -> VAR_31 , VAR_32 , VAR_33 ,   VAR_34 , & VAR_35 -> VAR_36 , VAR_37 -> VAR_38 , VAR_39 , VAR_40 ) )  return VAR_41 ; if ( VAR_42 -> VAR_43 == VAR_44 ) VAR_45 -> VAR_46 = VAR_47 -> VAR_48 . VAR_49 ; else { if ( VAR_50 -> VAR_51 != VAR_52 -> VAR_53 . VAR_54 ) VAR_55 -> VAR_56 = VAR_57 ; } * VAR_58 = VAR_59 ; return VAR_60 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 . VAR_7 ) ; if ( VAR_8 ) { if ( VAR_9 -> VAR_10 -> VAR_11 . VAR_12 != VAR_13 -> VAR_14 -> VAR_15 ) return ( 1 ) ; while ( METHOD_2 ( VAR_16 -> VAR_17 -> VAR_18 . VAR_19 ) ) { METHOD_3 ( VAR_20 ) ; if ( ! METHOD_4 ( VAR_21 ) ) return ( 0 ) ;  METHOD_5 ( VAR_22 , & ( VAR_23 -> VAR_24 -> VAR_25 ) ,   VAR_26 -> VAR_27 -> VAR_28 . VAR_29 ) ;  } } VAR_30 -> VAR_31 -> VAR_32 . VAR_33 = VAR_34 -> VAR_35 -> VAR_36 ; VAR_37 -> VAR_38 -> VAR_39 . VAR_40 = VAR_41 -> VAR_42 -> VAR_43 + 1 ; return ( 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 * VAR_8 ; VAR_9 = VAR_10 -> VAR_11 ; TYPE_6 VAR_12 = 0 ; do { if ( METHOD_1 ( VAR_13 , & VAR_14 ) == VAR_15 ) { break ; } TYPE_7 VAR_16 = ! VAR_17 && ! VAR_18 ; switch ( VAR_19 ) { case VAR_20 : if ( METHOD_2 ( VAR_21 , VAR_22 ) == VAR_23 ) { break ; } if ( VAR_24 ) { TYPE_8 VAR_25 = VAR_26 -> VAR_27 . VAR_28 - VAR_29 -> VAR_30 ; TYPE_9 VAR_31 = VAR_32 -> VAR_33 . VAR_34 - VAR_35 -> VAR_36 ; if ( VAR_37 > 0 || VAR_38 > 0 ) { VAR_39 -> VAR_40 += VAR_41 ; VAR_42 -> VAR_43 += VAR_44 ; } TYPE_10 * VAR_45 = & VAR_46 -> VAR_47 [ VAR_48 -> VAR_49 - 1 ] ; TYPE_11 VAR_50 = VAR_51 -> VAR_52 . VAR_53 + VAR_54 -> VAR_55 . VAR_56 - VAR_57 -> VAR_58 ; if ( VAR_59 > 0 ) { VAR_60 -> VAR_61 . VAR_62 -= VAR_63 ; } TYPE_12 VAR_64 = VAR_65 -> VAR_66 . VAR_67 + VAR_68 -> VAR_69 . VAR_70 - VAR_71 -> VAR_72 ; if ( VAR_73 > 0 ) { VAR_74 -> VAR_75 . VAR_76 -= VAR_77 ; } if ( ! METHOD_3 ( VAR_78 , & VAR_79 ) ) { break ; } } if ( VAR_80 ) {  TYPE_13 VAR_81 = VAR_82 -> VAR_83 . VAR_84 - VAR_85 -> VAR_86 ;  TYPE_14 VAR_87 = VAR_88 -> VAR_89 . VAR_90 - VAR_91 -> VAR_92 ;  const TYPE_15 VAR_93 = VAR_94 -> VAR_95 . VAR_96 * VAR_97 -> VAR_98 . VAR_99 ;  if ( VAR_100 > VAR_101 -> VAR_102 || VAR_103 > 0 || VAR_104 > 0 ) { TYPE_16 * VAR_105 = METHOD_4 ( VAR_106 -> VAR_107 , VAR_108 , sizeof ( VAR_109 ) ) ; if ( VAR_110 == VAR_111 ) { VAR_112 -> VAR_113 = VAR_114 ; break ; } VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; } if ( VAR_121 -> VAR_122 . VAR_123 ) { TYPE_17 VAR_124 , VAR_125 ; TYPE_18 VAR_126 [ ] = { 0 , 4 , 2 , 1 } ; TYPE_19 VAR_127 [ ] = { 8 , 8 , 4 , 2 } ; for ( VAR_128 = 0 ; VAR_129 < 4 ; VAR_130 ++ ) for ( VAR_131 = VAR_132 [ VAR_133 ] ; VAR_134 < VAR_135 -> VAR_136 . VAR_137 ; VAR_138 += VAR_139 [ VAR_140 ] ) { if ( METHOD_5 ( VAR_141 , VAR_142 -> VAR_143 + VAR_144 * VAR_145 -> VAR_146 . VAR_147 , VAR_148 -> VAR_149 . VAR_150 ) == VAR_151 ) break ; } } else { if ( METHOD_6 ( VAR_152 , VAR_153 -> VAR_154 , VAR_155 -> VAR_156 . VAR_157 * VAR_158 -> VAR_159 . VAR_160 ) == VAR_161 ) { break ; } } if ( VAR_162 -> VAR_163 > 1 ) { unsigned TYPE_20 * VAR_164 = VAR_165 -> VAR_166 ; unsigned TYPE_21 * VAR_167 = VAR_168 -> VAR_169 ; unsigned TYPE_22 * const VAR_170 = VAR_171 -> VAR_172 + VAR_173 -> VAR_174 . VAR_175 * VAR_176 -> VAR_177 . VAR_178 ; do { unsigned TYPE_23 * VAR_179 = VAR_180 + VAR_181 -> VAR_182 . VAR_183 * VAR_184 -> VAR_185 ; unsigned TYPE_24 * const VAR_186 = VAR_187 + VAR_188 -> VAR_189 . VAR_190 ; unsigned TYPE_25 * VAR_191 = VAR_192 + VAR_193 -> VAR_194 . VAR_195 / VAR_196 -> VAR_197 ; do { * VAR_198 = * VAR_199 ; VAR_200 ++ ; VAR_201 += VAR_202 -> VAR_203 ; } while ( VAR_204 < VAR_205 ) ; VAR_206 = VAR_207 ; VAR_208 = VAR_209 ; } while ( VAR_210 < VAR_211 ) ; } return ; } else { do { if ( METHOD_7 ( VAR_212 , & VAR_213 ) == VAR_214 ) { break ; } } while ( VAR_215 != VAR_216 ) ; if ( VAR_217 ) { return ; } } break ; case VAR_218 : if ( METHOD_8 ( VAR_219 , & VAR_220 , & VAR_221 ) == VAR_222 ) { break ; } if ( VAR_223 ) { METHOD_9 ( VAR_224 , & VAR_225 ) ; if ( METHOD_10 ( VAR_226 , VAR_227 , VAR_228 ) == VAR_229 ) { break ; } } while ( VAR_230 != VAR_231 ) { if ( METHOD_11 ( VAR_232 , & VAR_233 ) == VAR_234 ) { break ; } if ( VAR_235 && METHOD_12 ( VAR_236 , VAR_237 , VAR_238 ) == VAR_239 ) { break ; } } break ; case VAR_240 : break ; default : break ; } } while ( VAR_241 != VAR_242 ) ; VAR_243 -> METHOD_13 ( VAR_244 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 , 0 ) ; if ( METHOD_2 ( VAR_7 ) ) { VAR_8 = - VAR_9 ; goto VAR_10 ; } STRUCT_OR_UNION_2 = METHOD_3 ( VAR_11 ) ; VAR_12 = METHOD_4 ( VAR_13 , VAR_14 ) ; if ( VAR_15 == 0 ) goto VAR_16 ; if ( VAR_17 != - VAR_18 ) goto VAR_19 ; if ( ! METHOD_5 ( VAR_20 ) ) { VAR_21 = - VAR_22 ; goto VAR_23 ; } VAR_24 :  VAR_25 = METHOD_6 ( STRUCT_OR_UNION_3 ) ;   if ( VAR_26 == 0 ) {  VAR_27 = - VAR_28 ;  if ( STRUCT_OR_UNION_4 -> VAR_29 -> METHOD_7 ) {  METHOD_8 ( & STRUCT_OR_UNION_5 -> VAR_30 ) ;  VAR_31 = STRUCT_OR_UNION_6 -> VAR_32 -> METHOD_9 ( STRUCT_OR_UNION_7 , VAR_33 , VAR_34 ) ;  METHOD_10 ( & STRUCT_OR_UNION_8 -> VAR_35 ) ; } } VAR_36 : METHOD_11 ( STRUCT_OR_UNION_9 ) ; VAR_37 : return VAR_38 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; TYPE_7 * VAR_10 [ ] = { VAR_11 , VAR_12 } ; TYPE_8 * VAR_13 = METHOD_1 ( VAR_14 ) ; if ( ( VAR_15 -> VAR_16 == VAR_17 ) ||  METHOD_2 ( & VAR_18 -> VAR_19 -> VAR_20 ) )  return VAR_21 ; VAR_22 = METHOD_3 ( & VAR_23 -> VAR_24 -> VAR_25 , 0 , "*()" ) ; if ( VAR_26 != VAR_27 -> VAR_28 -> VAR_29 . VAR_30 ) return VAR_31 ; VAR_32 = METHOD_4 ( VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 != VAR_37 ) return VAR_38 ; VAR_39 = METHOD_5 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 . VAR_44 , VAR_45 , VAR_46 -> VAR_47 . VAR_48 , VAR_49 , 0 , & VAR_50 ) ; if ( VAR_51 != VAR_52 ) { METHOD_6 ( VAR_53 , VAR_54 -> VAR_55 . VAR_56 ? VAR_57 -> VAR_58 . VAR_59 : "" ) ; return VAR_60 ; } METHOD_7 ( VAR_61 , "subtreesearch(%s):done\\n" , VAR_62 -> VAR_63 . VAR_64 ? VAR_65 -> VAR_66 . VAR_67 : "" ) ; VAR_68 = METHOD_8 ( VAR_69 -> VAR_70 , VAR_71 ) ; if ( VAR_72 != 1 ) { METHOD_9 ( VAR_73 ) ; return VAR_74 ; } VAR_75 = METHOD_10 ( VAR_76 -> VAR_77 , VAR_78 ) ; if ( VAR_79 == VAR_80 ) { METHOD_11 ( VAR_81 ) ; return VAR_82 ; } VAR_83 = METHOD_12 ( VAR_84 -> VAR_85 , VAR_86 ) ; if ( VAR_87 == VAR_88 ) { METHOD_13 ( VAR_89 ) ; return VAR_90 ; } METHOD_14 ( VAR_91 ) ; VAR_92 = METHOD_15 ( VAR_93 , VAR_94 , VAR_95 -> VAR_96 -> VAR_97 . VAR_98 ) ; if ( VAR_99 != VAR_100 ) return VAR_101 ; VAR_102 = METHOD_16 ( VAR_103 -> VAR_104 ) ; if ( VAR_105 != VAR_106 ) return VAR_107 ; METHOD_17 ( VAR_108 , "Accesstouse%shasbeengranted\\n" , VAR_109 -> VAR_110 -> VAR_111 . VAR_112 ) ; return VAR_113 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  if ( METHOD_1 ( VAR_3 , 4 , & VAR_4 ) ) return - 1 ;  * VAR_5 = ( VAR_6 & 0x80000000 ) ? ( - METHOD_2 ( VAR_7 , ( ( ( ~ VAR_8 ) &   0x7fffffff ) + 1 ) ) ) : METHOD_3 ( VAR_9 , VAR_10 ) ;  return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 ; TYPE_1 VAR_5 = 0 ; if ( VAR_6 -> VAR_7 < METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_6 ) ) || VAR_8 -> VAR_9 . VAR_10 ) return - VAR_11 ; VAR_12 = METHOD_2 ( VAR_13 ) ; switch ( VAR_14 -> VAR_15 ) { case VAR_16 : VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; VAR_21 -> VAR_22 . VAR_23 . VAR_24 = VAR_25 -> VAR_26 . VAR_27 ; VAR_28 -> VAR_29 . VAR_30 . VAR_31 = 0 ; break ; case VAR_32 : VAR_33 -> VAR_34 . VAR_35 = VAR_36 ; VAR_37 -> VAR_38 . VAR_39 . VAR_40 = VAR_41 -> VAR_42 . VAR_43 ; VAR_44 -> VAR_45 . VAR_46 . VAR_47 = VAR_48 -> VAR_49 . VAR_50 ; break ; case VAR_51 : VAR_52 -> VAR_53 . VAR_54 = VAR_55 ; VAR_56 -> VAR_57 . VAR_58 . VAR_59 = VAR_60 -> VAR_61 . VAR_62 ; VAR_63 -> VAR_64 . VAR_65 . VAR_66 = VAR_67 -> VAR_68 . VAR_69 ; VAR_70 -> VAR_71 . VAR_72 . VAR_73 = ~ 0 ; VAR_74 -> VAR_75 . VAR_76 . VAR_77 = ~ 0 ; break ; case VAR_78 : VAR_79 -> VAR_80 . VAR_81 = VAR_82 ; VAR_83 -> VAR_84 . VAR_85 . VAR_86 = VAR_87 -> VAR_88 . VAR_89 ; VAR_90 -> VAR_91 . VAR_92 . VAR_93 = VAR_94 -> VAR_95 . VAR_96 ; VAR_97 -> VAR_98 . VAR_99 . VAR_100 = VAR_101 -> VAR_102 . VAR_103 ; VAR_104 -> VAR_105 . VAR_106 . VAR_107 = VAR_108 -> VAR_109 . VAR_110 ; break ; default : METHOD_3 ( ) ; } VAR_111 -> VAR_112 . VAR_113 = ! ! ( VAR_114 -> VAR_115 & VAR_116 ) ; VAR_117 -> VAR_118 . VAR_119 = ! ! ( VAR_120 -> VAR_121 & VAR_122 ) ; VAR_123 -> VAR_124 . VAR_125 = 1 ; VAR_126 -> VAR_127 . VAR_128 = VAR_129 -> VAR_130 ; VAR_131 -> VAR_132 . VAR_133 = METHOD_4 ( VAR_134 , 1 ) ; if ( ! VAR_135 -> VAR_136 . VAR_137 ) { VAR_138 = - VAR_139 ; goto VAR_140 ; } if ( VAR_141 -> VAR_142 & 0x7 ) { VAR_143 = - VAR_144 ; goto VAR_145 ; } VAR_146 = METHOD_5 ( VAR_147 -> VAR_148 , 1 , & STRUCT_OR_UNION_7 , 1 ) ; if ( VAR_149 != 1 ) goto VAR_150 ; VAR_151 = 0 ; METHOD_6 ( VAR_152 -> VAR_153 . VAR_154 , STRUCT_OR_UNION_8 , 8 , METHOD_7 ( VAR_155 -> VAR_156 ) ) ; if ( VAR_157 -> VAR_158 . VAR_159 || VAR_160 -> VAR_161 . VAR_162 ) { VAR_163 -> VAR_164 . VAR_165 = METHOD_8 ( sizeof ( * VAR_166 -> VAR_167 . VAR_168 ) , VAR_169 ) ; if ( ! VAR_170 -> VAR_171 . VAR_172 ) { VAR_173 = - VAR_174 ; goto VAR_175 ; } VAR_176 -> VAR_177 . VAR_178 -> VAR_179 = VAR_180 -> VAR_181 ; VAR_182 -> VAR_183 . VAR_184 -> VAR_185 = VAR_186 ; } VAR_187 -> VAR_188 . VAR_189 = METHOD_9 ( VAR_190 -> VAR_191 ) ; VAR_192 -> VAR_193 . VAR_194 = VAR_195 -> VAR_196 + METHOD_10 ( VAR_197 -> VAR_198 ) ; return VAR_199 ; VAR_200 : if ( STRUCT_OR_UNION_9 ) METHOD_11 ( STRUCT_OR_UNION_10 ) ;  METHOD_12 ( VAR_201 -> VAR_202 . VAR_203 ) ;  return VAR_204 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 ; VAR_4 = VAR_5 [ VAR_6 -> VAR_7 ] ;  METHOD_1 ( VAR_8 != VAR_9 ) ;  VAR_10 = & VAR_11 -> STRUCT_OR_UNION_3 [ VAR_12 -> VAR_13 ] ; for ( VAR_14 = 1 ; VAR_15 < 4 ; VAR_16 ++ ) { VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 = 0 ; VAR_21 -> VAR_22 [ VAR_23 ] . VAR_24 = 0 ; VAR_25 -> VAR_26 [ VAR_27 ] . VAR_28 = 0 ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 , VAR_10 = VAR_11 & VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 ; struct STRUCT_OR_UNION_8 * VAR_14 = VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ;  METHOD_3 ( "size%zuflags0x%xtimeo%ld\\n" , VAR_19 , VAR_20 , VAR_21 ) ;  VAR_22 -> VAR_23 = 0 ; if ( VAR_24 & VAR_25 ) goto VAR_26 ; while ( 1 ) { if ( ! METHOD_4 ( & VAR_27 -> VAR_28 ) ) { VAR_29 = METHOD_5 ( VAR_30 , VAR_31 ) ; break ; } if ( VAR_32 -> VAR_33 ) { VAR_34 = METHOD_6 ( VAR_35 , VAR_36 ) ; break ; } if ( ! METHOD_7 ( VAR_37 , & VAR_38 ) ) { if ( VAR_39 ) { VAR_40 = - VAR_41 ; break ; } VAR_42 = METHOD_8 ( * METHOD_9 ( VAR_43 ) , ( ! METHOD_10 ( & VAR_44 -> VAR_45 ) || VAR_46 -> VAR_47 || METHOD_11 ( VAR_48 , & VAR_49 ) ) , VAR_50 ) ; METHOD_12 ( "recvmsgwokeinc%ptimeo%ld\\n" , VAR_51 , VAR_52 ) ; if ( VAR_53 > 0 || VAR_54 == VAR_55 ) continue ; VAR_56 = VAR_57 ; if ( VAR_58 == 0 ) VAR_59 = - VAR_60 ; break ; } METHOD_13 ( "copyinginc%pfrom%pI4:%utouser\\n" , VAR_61 , & VAR_62 -> VAR_63 -> VAR_64 , METHOD_14 ( VAR_65 -> VAR_66 . VAR_67 ) ) ; VAR_68 = VAR_69 -> VAR_70 -> VAR_71 -> METHOD_15 ( VAR_72 , VAR_73 -> VAR_74 , VAR_75 ) ; if ( VAR_76 < 0 ) break ; if ( ! METHOD_16 ( VAR_77 , VAR_78 , ! ( VAR_79 & VAR_80 ) ) ) { METHOD_17 ( VAR_81 ) ; VAR_82 = VAR_83 ; METHOD_18 ( VAR_84 ) ; continue ; } if ( VAR_85 < METHOD_19 ( VAR_86 -> VAR_87 . VAR_88 ) ) { if ( VAR_89 & VAR_90 ) VAR_91 = METHOD_20 ( VAR_92 -> VAR_93 . VAR_94 ) ; VAR_95 -> VAR_96 |= VAR_97 ; } if ( METHOD_21 ( VAR_98 , VAR_99 ) ) { VAR_100 = - VAR_101 ; goto VAR_102 ; } METHOD_22 ( VAR_103 ) ; VAR_104 = ( struct STRUCT_OR_UNION_9 * ) VAR_105 -> VAR_106 ; if ( VAR_107 ) { VAR_108 -> VAR_109 = VAR_110 ; VAR_111 -> VAR_112 = VAR_113 -> VAR_114 . VAR_115 ; VAR_116 -> VAR_117 . VAR_118 = VAR_119 -> VAR_120 ; METHOD_23 ( VAR_121 -> VAR_122 , 0 , sizeof ( VAR_123 -> VAR_124 ) ) ; VAR_125 -> VAR_126 = sizeof ( * VAR_127 ) ; } break ; } if ( VAR_128 ) METHOD_24 ( VAR_129 ) ; VAR_130 : return VAR_131 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { VAR_4 * VAR_5 ; TYPE_5 VAR_6 [ 64 + VAR_7 ] ;  if ( METHOD_1 ( VAR_8 , sizeof ( VAR_9 ) , VAR_10 , VAR_11 ) >= sizeof ( VAR_12 ) )  return - 1 ; if ( METHOD_2 ( VAR_13 , VAR_14 ) != 0 ) return - 1 ; VAR_15 = METHOD_3 ( VAR_16 , "w" ) ; if ( ! VAR_17 ) { if ( VAR_18 ) METHOD_4 ( VAR_19 , "failedtoset%s(%u)for%s:%s" , VAR_20 , VAR_21 , VAR_22 , METHOD_5 ( VAR_23 ) ) ; return - 1 ; } METHOD_6 ( VAR_24 , "%u" , VAR_25 ) ; METHOD_7 ( VAR_26 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 == VAR_3 ) { METHOD_1 ( ) ; VAR_4 = VAR_5 ; } if ( VAR_6 > 0 && VAR_7 [ VAR_8 - 1 ] == '\\n' ) VAR_9 [ VAR_10 - 1 ] = '\\r' ; METHOD_2 ( ( TYPE_3 * ) VAR_11 , VAR_12 ) ; if ( METHOD_3 ( VAR_13 , "/FontName" , 9 ) == 0 ) {  for ( VAR_14 += 9 ; METHOD_4 ( * VAR_15 ) ; VAR_16 ++ ) ;  if ( * VAR_17 == '/' ) { const TYPE_4 * VAR_18 = ++ VAR_19 ;  while ( * VAR_20 && ! METHOD_5 ( * VAR_21 ) ) VAR_22 ++ ;  METHOD_6 ( VAR_23 ) ; VAR_24 = ( TYPE_5 * ) METHOD_7 ( VAR_25 - VAR_26 + 1 ) ; METHOD_8 ( VAR_27 , VAR_28 , VAR_29 - VAR_30 ) ; VAR_31 [ VAR_32 - VAR_33 ] = 0 ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 , VAR_4 = 0 ; TYPE_3 VAR_5 [ VAR_6 ] ; struct STRUCT_OR_UNION_1 * VAR_7 = ( struct STRUCT_OR_UNION_2 * ) VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 VAR_10 ; TYPE_4 TYPE_5 TYPE_6 * VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; while ( VAR_15 ) { if ( METHOD_1 ( VAR_16 ) < 0 ) return - 1 ; METHOD_2 ( & VAR_17 , METHOD_3 ( "Markingmessagesdeleted..." ) , VAR_18 , VAR_19 , VAR_20 -> VAR_21 ) ; TYPE_7 TYPE_8 VAR_22 = METHOD_4 ( VAR_23 , VAR_24 -> VAR_25 ) ; for ( VAR_26 = 0 , VAR_27 = 0 , VAR_28 = 0 ; VAR_29 == 0 && VAR_30 < VAR_31 -> VAR_32 ; VAR_33 ++ ) { if ( VAR_34 -> VAR_35 [ VAR_36 ] -> VAR_37 && VAR_38 -> VAR_39 [ VAR_40 ] -> VAR_41 != - 1 ) { VAR_42 ++ ; if ( ! VAR_43 -> VAR_44 ) METHOD_5 ( & VAR_45 , VAR_46 , - 1 ) ; METHOD_6 ( VAR_47 , sizeof ( VAR_48 ) , "DELE%d\\r\\n" , VAR_49 -> VAR_50 [ VAR_51 ] -> VAR_52 ) ; VAR_53 = METHOD_7 ( VAR_54 , VAR_55 , sizeof ( VAR_56 ) ) ; if ( VAR_57 == 0 ) {  METHOD_8 ( VAR_58 -> VAR_59 , VAR_60 -> VAR_61 [ VAR_62 ] -> VAR_63 ) ;  TYPE_9 TYPE_10 VAR_64 ( VAR_65 , VAR_66 -> VAR_67 [ VAR_68 ] -> VAR_69 , METHOD_9 ( VAR_70 -> VAR_71 [ VAR_72 ] -> VAR_73 ) ) ; } } TYPE_11 TYPE_12 if ( VAR_74 -> VAR_75 [ VAR_76 ] -> VAR_77 ) { METHOD_10 ( VAR_78 , VAR_79 -> VAR_80 [ VAR_81 ] -> VAR_82 , METHOD_11 ( VAR_83 -> VAR_84 [ VAR_85 ] -> VAR_86 ) , VAR_87 -> VAR_88 [ VAR_89 ] , 0 ) ; } } TYPE_13 TYPE_14 TYPE_15 ( VAR_90 ) ; if ( VAR_91 == 0 ) { METHOD_12 ( VAR_92 , "QUIT\\r\\n" , sizeof ( VAR_93 ) ) ; VAR_94 = METHOD_13 ( VAR_95 , VAR_96 , sizeof ( VAR_97 ) ) ; } if ( VAR_98 == 0 ) { VAR_99 -> VAR_100 = VAR_101 ; METHOD_14 ( VAR_102 ) ; VAR_103 -> VAR_104 = VAR_105 ; return 0 ; } if ( VAR_106 == - 2 ) { METHOD_15 ( "%s" , VAR_107 -> VAR_108 ) ; return - 1 ; } } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; static TYPE_6 VAR_7 = VAR_8 ; if ( ! VAR_9 && METHOD_1 ( & VAR_10 ) ) return ( VAR_11 ) ; switch ( VAR_12 -> VAR_13 ) { case VAR_14 : if ( * VAR_15 ) { if ( ( VAR_16 = METHOD_2 ( VAR_17 , * VAR_18 , & VAR_19 ) ) != 0 ) return VAR_20 ; } if ( ! METHOD_3 ( VAR_21 , & VAR_22 ) ) return VAR_23 ; if ( VAR_24 ) METHOD_4 ( VAR_25 ) ; break ; case VAR_26 : if ( ! METHOD_5 ( VAR_27 , & VAR_28 ) ) return VAR_29 ; if ( VAR_30 ) { VAR_31 = METHOD_6 ( VAR_32 , VAR_33 , & VAR_34 ) ; if ( VAR_35 != 0 ) return VAR_36 ; * VAR_37 = VAR_38 ; METHOD_7 ( VAR_39 ) ; } else * VAR_40 = VAR_41 ; break ; case VAR_42 : if ( * VAR_43 != VAR_44 ) METHOD_8 ( VAR_45 , * VAR_46 ) ;  break ;  } return VAR_47 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; METHOD_1 ( VAR_3 ) ; METHOD_2 ( VAR_4 , ( unsigned TYPE_4 ) "uipc-main" , 0 , 0 , 0 ) ; METHOD_3 ( VAR_5 ) ; while ( VAR_6 . VAR_7 ) { VAR_8 . VAR_9 = VAR_10 . VAR_11 ;  VAR_12 = METHOD_4 ( VAR_13 . VAR_14 + 1 , & VAR_15 . VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ;  if ( VAR_20 == 0 ) { METHOD_5 ( "selecttimeout" ) ; continue ; } else if ( VAR_21 < 0 ) { METHOD_6 ( "selectfailed%s" , METHOD_7 ( VAR_22 ) ) ; continue ; } METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( VAR_23 ) ; for ( VAR_24 = 0 ; VAR_25 < VAR_26 ; VAR_27 ++ ) { if ( VAR_28 != VAR_29 ) METHOD_12 ( VAR_30 ) ; } METHOD_13 ( ) ; } METHOD_14 ( "UIPCREADTHREADEXITING" ) ; METHOD_15 ( ) ; VAR_31 . VAR_32 = 0 ; METHOD_16 ( "UIPCREADTHREADDONE" ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_2 ( VAR_7 ) ; const TYPE_2 VAR_8 = VAR_9 -> VAR_10 ; TYPE_3 VAR_11 = 0 ; if ( VAR_12 -> VAR_13 == VAR_14 ) { if ( VAR_15 -> VAR_16 == VAR_17 ) { if ( METHOD_3 ( VAR_18 ) -> VAR_19 -> METHOD_4 ( VAR_20 , VAR_21 ) < 0 ) return 1 ;  goto VAR_22 ;  } if ( VAR_23 -> VAR_24 == VAR_25 ) goto VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; return 1 ; } else if ( VAR_30 -> VAR_31 == VAR_32 ) { VAR_33 -> VAR_34 = VAR_35 ; return 1 ; } if ( VAR_36 -> VAR_37 != VAR_38 && METHOD_5 ( VAR_39 , VAR_40 ) ) goto VAR_41 ; if ( ( VAR_42 -> VAR_43 != VAR_44 && VAR_45 -> VAR_46 == VAR_47 ) || ( VAR_48 -> VAR_49 == VAR_50 && VAR_51 -> VAR_52 == VAR_53 ) || ( VAR_54 -> VAR_55 == VAR_56 && VAR_57 -> VAR_58 == VAR_59 ) ) { METHOD_6 ( VAR_60 , VAR_61 -> VAR_62 , VAR_63 ) ; goto VAR_64 ; } if ( METHOD_7 ( VAR_65 , VAR_66 , VAR_67 ) ) return 1 ; if ( VAR_68 -> VAR_69 == VAR_70 ) { METHOD_8 ( VAR_71 , VAR_72 ) ; return 0 ; } else if ( VAR_73 -> VAR_74 == VAR_75 ) { if ( METHOD_9 ( VAR_76 , VAR_77 ) ) return 0 ; goto VAR_78 ; } else if ( VAR_79 -> VAR_80 == VAR_81 ) { if ( METHOD_10 ( VAR_82 , VAR_83 ) ) return 0 ; goto VAR_84 ; } switch ( VAR_85 -> VAR_86 ) { case VAR_87 : VAR_88 = METHOD_11 ( VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; if ( VAR_93 >= 0 ) return VAR_94 ; METHOD_12 ( VAR_95 ) ; return 0 ; case VAR_96 : METHOD_13 ( VAR_97 , VAR_98 ) ; METHOD_14 ( VAR_99 , VAR_100 ) ; case VAR_101 : VAR_102 = METHOD_15 ( VAR_103 , VAR_104 , VAR_105 , VAR_106 ) ; break ; } if ( VAR_107 -> VAR_108 == VAR_109 || VAR_110 -> VAR_111 == VAR_112 ) { switch ( VAR_113 ) { case VAR_114 : VAR_115 -> METHOD_16 ( VAR_116 ) ; METHOD_17 ( VAR_117 , VAR_118 , VAR_119 ) ; break ; } } else if ( METHOD_18 ( VAR_120 -> VAR_121 == VAR_122 ) ) { METHOD_19 ( VAR_123 , VAR_124 -> VAR_125 , VAR_126 ) ; goto VAR_127 ; } if ( ! VAR_128 ) { VAR_129 : METHOD_20 ( VAR_130 ) ; } return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 STRUCT_OR_UNION_2 ;  METHOD_1 ( VAR_4 >= 1 && VAR_5 <= VAR_6 ) ;  METHOD_2 ( VAR_7 >= 0 && VAR_8 <= VAR_9 ) ; VAR_10 = VAR_11 * VAR_12 ; VAR_13 = METHOD_3 ( VAR_14 , 4096 ) ; VAR_15 -> VAR_16 . VAR_17 = VAR_18 ; VAR_19 -> VAR_20 . VAR_21 = VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = 0 ; VAR_26 -> VAR_27 . VAR_28 = VAR_29 ; VAR_30 -> VAR_31 . VAR_32 = VAR_33 ; VAR_34 -> VAR_35 . VAR_36 = METHOD_4 ( VAR_37 ) ;  METHOD_5 ( VAR_38 , VAR_39 ) ;  METHOD_6 ( & STRUCT_OR_UNION_3 , VAR_40 , VAR_41 , VAR_42 ) ; METHOD_7 ( VAR_43 , VAR_44 , VAR_45 , VAR_46 + VAR_47 -> VAR_48 . VAR_49 ) ; return ( METHOD_8 ( VAR_50 , ( TYPE_4 * ) & STRUCT_OR_UNION_4 , sizeof ( STRUCT_OR_UNION_5 ) ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = VAR_1 ;  while ( METHOD_1 ( * VAR_2 ) )  VAR_3 ++ ; return ( * VAR_4 == '/' || ( VAR_5 [ 0 ] == 'd' && VAR_6 [ 1 ] == 'u' && VAR_7 [ 2 ] == 'p' ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 * VAR_0 = STRUCT_OR_UNION_2 -> VAR_1 ; struct STRUCT_OR_UNION_3 * TYPE_2 ; struct STRUCT_OR_UNION_4 * VAR_2 = VAR_3 ; TYPE_3 * VAR_4 , * VAR_5 , * VAR_6 ; VAR_7 * VAR_8 , * VAR_9 ; TYPE_4 VAR_10 , VAR_11 , VAR_12 ; TYPE_5 VAR_13 , VAR_14 , VAR_15 = 0 ;  if ( ! VAR_16 -> VAR_17 ) {  METHOD_1 ( "%s:disabledbecauseofinvaliduser" , VAR_18 ) ; return 0 ; } if ( ( VAR_19 = METHOD_2 ( STRUCT_OR_UNION_5 , & VAR_20 , & VAR_21 ) ) != 0 || ( VAR_22 = METHOD_3 ( STRUCT_OR_UNION_6 , & VAR_23 , & VAR_24 ) ) != 0 || ( VAR_25 = METHOD_4 ( STRUCT_OR_UNION_7 , & VAR_26 , VAR_27 ) ) != 0 || ( VAR_28 = METHOD_5 ( STRUCT_OR_UNION_8 , & VAR_29 , VAR_30 ) ) != 0 || ( VAR_31 = METHOD_6 ( STRUCT_OR_UNION_9 , & VAR_32 , & VAR_33 ) ) != 0 ) METHOD_7 ( "%s:packetparsing:%s" , VAR_34 , METHOD_8 ( VAR_35 ) ) ; TYPE_6 ( "%s:cuser%schost%spkalg%sslen%zu" , VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; TYPE_7 TYPE_8 TYPE_9 ( "signature:" ) ; METHOD_9 ( VAR_41 , VAR_42 , TYPE_10 ) ; VAR_43 = METHOD_10 ( VAR_44 ) ; if ( VAR_45 == VAR_46 ) { METHOD_11 ( "%s:unsupportedpublickeyalgorithm:%s" , VAR_47 , VAR_48 ) ; goto VAR_49 ; } if ( ( VAR_50 = METHOD_12 ( VAR_51 , VAR_52 , & VAR_53 ) ) != 0 ) { METHOD_13 ( "%s:key_from_blob:%s" , VAR_54 , METHOD_14 ( VAR_55 ) ) ; goto VAR_56 ; } if ( VAR_57 == VAR_58 ) { METHOD_15 ( "%s:cannotdecodekey:%s" , VAR_59 , VAR_60 ) ; goto VAR_61 ; } if ( VAR_62 -> VAR_63 != VAR_64 ) { METHOD_16 ( "%s:typemismatchfordecodedkey" "(received%d,expected%d)" , VAR_65 , VAR_66 -> VAR_67 , VAR_68 ) ; goto VAR_69 ; } if ( METHOD_17 ( VAR_70 -> VAR_71 ) == VAR_72 && ( STRUCT_OR_UNION_10 -> VAR_73 & VAR_74 ) != 0 ) { METHOD_18 ( "RefusingRSAkeybecausepeerusesunsafe" "signatureformat" ) ; goto VAR_75 ; } if ( METHOD_19 ( VAR_76 , VAR_77 . VAR_78 , 0 ) != 1 ) { METHOD_20 ( "%s:keytype%snotinHostbasedAcceptedKeyTypes" , VAR_79 , METHOD_21 ( VAR_80 ) ) ; goto VAR_81 ; }  if ( ( TYPE_11 = METHOD_22 ( ) ) == VAR_82 )  METHOD_23 ( "%s:sshbuf_newfailed" , VAR_83 ) ; if ( ( VAR_84 = METHOD_24 ( TYPE_12 , VAR_85 , VAR_86 ) ) != 0 || ( VAR_87 = METHOD_25 ( TYPE_13 , VAR_88 ) ) != 0 || ( VAR_89 = METHOD_26 ( TYPE_14 , VAR_90 -> VAR_91 ) ) != 0 || ( VAR_92 = METHOD_27 ( TYPE_15 , VAR_93 -> VAR_94 ) ) != 0 || ( VAR_95 = METHOD_28 ( TYPE_16 , "hostbased" ) ) != 0 || ( VAR_96 = METHOD_29 ( TYPE_17 , VAR_97 , VAR_98 ) ) != 0 || ( VAR_99 = METHOD_30 ( TYPE_18 , VAR_100 , VAR_101 ) ) != 0 || ( VAR_102 = METHOD_31 ( TYPE_19 , VAR_103 ) ) != 0 || ( VAR_104 = METHOD_32 ( TYPE_20 , VAR_105 ) ) != 0 ) METHOD_33 ( "%s:buffererror:%s" , VAR_106 , METHOD_34 ( VAR_107 ) ) ; TYPE_21 TYPE_22 VAR_108 ( TYPE_23 , TYPE_24 ) ; auth2_record_info ( VAR_109 , "clientuser\\"%.100s\\",clienthost\\"%.100s\\"" , VAR_110 , VAR_111 ) ; VAR_112 = 0 ; if ( METHOD_35 ( METHOD_36 ( VAR_113 -> VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ) && METHOD_37 ( METHOD_38 ( VAR_118 , VAR_119 , VAR_120 , METHOD_39 ( TYPE_25 ) , METHOD_40 ( TYPE_26 ) , VAR_121 , STRUCT_OR_UNION_11 -> VAR_122 ) ) == 0 ) VAR_123 = 1 ; METHOD_41 ( VAR_124 , VAR_125 , VAR_126 ) ; METHOD_42 ( TYPE_27 ) ; VAR_127 : METHOD_43 ( "%s:authenticated%d" , VAR_128 , VAR_129 ) ; METHOD_44 ( VAR_130 ) ; METHOD_45 ( VAR_131 ) ; METHOD_46 ( VAR_132 ) ; METHOD_47 ( VAR_133 ) ; METHOD_48 ( VAR_134 ) ; METHOD_49 ( VAR_135 ) ; return VAR_136 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) {   const TYPE_2 VAR_2 = METHOD_1 ( VAR_3 , METHOD_2 ( VAR_4 ) ) ;  return VAR_5 > VAR_6 ? VAR_7 : VAR_8 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_0 * VAR_4 = ( struct STRUCT_OR_UNION_1 * ) VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = ( struct STRUCT_OR_UNION_3 * ) VAR_7 -> VAR_8 ; TYPE_4 * VAR_9 = VAR_10 ; VAR_11 = 0 ; VAR_12 = METHOD_1 ( VAR_13 , & VAR_14 , 10 ) ; if ( VAR_15 ) return - 1 ; while ( * VAR_16 == '' ) VAR_17 ++ ; METHOD_2 ( VAR_18 , VAR_19 , METHOD_3 ( VAR_20 ) + 1 ) ;  for ( VAR_21 = 0 ; VAR_22 < VAR_23 -> VAR_24 ; VAR_25 ++ )  if ( METHOD_4 ( VAR_26 , VAR_27 -> VAR_28 [ VAR_29 ] -> VAR_30 ) == 0 ) break ; if ( VAR_31 == VAR_32 -> VAR_33 ) { METHOD_5 ( 1 , "newheader%d%s\\n" , VAR_34 , VAR_35 ) ; if ( VAR_36 >= VAR_37 -> VAR_38 ) METHOD_6 ( VAR_39 ) ; VAR_40 -> VAR_41 ++ ; VAR_42 -> VAR_43 [ VAR_44 ] = METHOD_7 ( ) ; VAR_45 -> VAR_46 [ VAR_47 ] -> VAR_48 = METHOD_8 ( VAR_49 ) ; } else if ( VAR_50 -> VAR_51 [ VAR_52 ] -> VAR_53 != VAR_54 - 1 ) VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 [ VAR_60 ] -> VAR_61 = VAR_62 ; VAR_63 -> VAR_64 [ VAR_65 ] -> VAR_66 = VAR_67 - 1 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , unsigned TYPE_5 * VAR_4 , unsigned TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 = VAR_8 ; TYPE_9 * VAR_9 = VAR_10 ; const unsigned TYPE_10 * VAR_11 = VAR_12 ; TYPE_11 VAR_13 = 1 ; TYPE_12 * VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ; * VAR_19 = 0 ; METHOD_2 ( "foundkdcPkIdinASREQ\\n" ) ; VAR_20 = METHOD_3 ( VAR_21 , & VAR_22 , ( TYPE_13 ) VAR_23 ) ; if ( VAR_24 == VAR_25 )  goto VAR_26 ;  VAR_27 = METHOD_4 ( METHOD_5 ( VAR_28 ) , VAR_29 -> VAR_30 ) ; if ( ! VAR_31 ) { VAR_32 = METHOD_6 ( METHOD_7 ( VAR_33 ) , VAR_34 -> VAR_35 ) ; if ( ! VAR_36 ) * VAR_37 = 1 ; } VAR_38 = 0 ;  VAR_39 :  METHOD_8 ( VAR_40 -> VAR_41 ) ; METHOD_9 ( VAR_42 -> VAR_43 ) ; METHOD_10 ( VAR_44 ) ; return VAR_45 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; for ( VAR_5 = 0 ; VAR_6 -> VAR_7 && VAR_8 < VAR_9 -> VAR_10 ; VAR_11 ++ ) { TYPE_4 * VAR_12 = VAR_13 -> VAR_14 + VAR_15 ; for ( VAR_16 = 0 ; VAR_17 < VAR_18 -> VAR_19 ; VAR_20 ++ ) { TYPE_5 * VAR_21 = VAR_22 -> VAR_23 + VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 -> VAR_28 * VAR_29 -> VAR_30 ; VAR_31 ++ ) {  TYPE_6 * VAR_32 = VAR_33 -> VAR_34 + VAR_35 ;  METHOD_1 ( & VAR_36 -> VAR_37 ) ; METHOD_2 ( & VAR_38 -> VAR_39 ) ; METHOD_3 ( & VAR_40 -> VAR_41 ) ; }  METHOD_4 ( & VAR_42 -> VAR_43 ) ;  } METHOD_5 ( & VAR_44 -> VAR_45 ) ; } METHOD_6 ( & VAR_46 -> VAR_47 ) ; METHOD_7 ( & VAR_48 -> VAR_49 ) ; METHOD_8 ( & VAR_50 -> VAR_51 ) ; METHOD_9 ( & VAR_52 -> VAR_53 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { const TYPE_2 * VAR_1 ; TYPE_3 VAR_2 = VAR_3 ; TYPE_4 VAR_4 ; if ( VAR_5 != '%' ) return ; VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 ) ; if ( VAR_9 == VAR_10 ) { METHOD_2 ( VAR_11 , VAR_12 , "PEReference:noname\\n" ) ; return ; } if ( VAR_13 ) METHOD_3 ( VAR_14 , "PEReference:%s\\n" , VAR_15 ) ; if ( VAR_16 != ';' ) { METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ; return ; } VAR_20 ; VAR_21 -> VAR_22 ++ ; if ( ( VAR_23 -> VAR_24 != VAR_25 ) && ( VAR_26 -> VAR_27 -> METHOD_5 != VAR_28 ) ) VAR_29 = VAR_30 -> VAR_31 -> METHOD_6 ( VAR_32 -> VAR_33 , VAR_34 ) ; if ( VAR_35 -> VAR_36 == VAR_37 ) return ; if ( VAR_38 == VAR_39 ) { if ( ( VAR_40 -> VAR_41 == 1 ) || ( ( VAR_42 -> VAR_43 == 0 ) && ( VAR_44 -> VAR_45 == 0 ) ) ) { METHOD_7 ( VAR_46 , VAR_47 , "PEReference:%%%s;notfound\\n" , VAR_48 ) ; } else { if ( ( VAR_49 -> VAR_50 ) && ( VAR_51 -> VAR_52 . VAR_53 != VAR_54 ) ) { METHOD_8 ( VAR_55 , VAR_56 , "PEReference:%%%s;notfound\\n" , VAR_57 , VAR_58 ) ; } else METHOD_9 ( VAR_59 , VAR_60 , "PEReference:%%%s;notfound\\n" , VAR_61 , VAR_62 ) ; VAR_63 -> VAR_64 = 0 ; } METHOD_10 ( VAR_65 , 0 , VAR_66 , 0 ) ; } else { if ( ( VAR_67 -> VAR_68 != VAR_69 ) && ( VAR_70 -> VAR_71 != VAR_72 ) ) { METHOD_11 ( VAR_73 , VAR_74 , "Internal:%%%s;isnotaparameterentity\\n" , VAR_75 , VAR_76 ) ; } else { TYPE_5 VAR_77 [ 4 ] ; TYPE_6 VAR_78 ; if ( ( VAR_79 -> VAR_80 == VAR_81 ) && ( ( VAR_82 -> VAR_83 & VAR_84 ) == 0 ) && ( ( VAR_85 -> VAR_86 & VAR_87 ) == 0 ) && ( ( VAR_88 -> VAR_89 & VAR_90 ) == 0 ) && ( ( VAR_91 -> VAR_92 & VAR_93 ) == 0 ) && ( VAR_94 -> VAR_95 == 0 ) && ( VAR_96 -> VAR_97 == 0 ) ) return ; VAR_98 = METHOD_12 ( VAR_99 , VAR_100 ) ;  if ( METHOD_13 ( VAR_101 , VAR_102 ) < 0 )  return ; if ( VAR_103 -> VAR_104 == VAR_105 ) { GROW if ( VAR_106 -> VAR_107 == VAR_108 ) return ; if ( ( VAR_109 -> VAR_110 -> VAR_111 - VAR_112 -> VAR_113 -> VAR_114 ) >= 4 ) { VAR_115 [ 0 ] = VAR_116 ; VAR_117 [ 1 ] = METHOD_14 ( 1 ) ; VAR_118 [ 2 ] = METHOD_15 ( 2 ) ; VAR_119 [ 3 ] = METHOD_16 ( 3 ) ; VAR_120 = METHOD_17 ( VAR_121 , 4 ) ; if ( VAR_122 != VAR_123 ) { METHOD_18 ( VAR_124 , VAR_125 ) ; } } if ( ( METHOD_19 ( VAR_126 , '<' , '?' , 'x' , 'm' , 'l' ) ) && ( METHOD_20 ( METHOD_21 ( 5 ) ) ) ) { METHOD_22 ( VAR_127 ) ; } } } } VAR_128 -> VAR_129 = 1 ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 )  {  return METHOD_1 ( VAR_1 ) ;  }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 * VAR_4 , * VAR_5 = VAR_6 ; const TYPE_5 * VAR_7 = "" ; TYPE_6 ( VAR_8 ) * VAR_9 = VAR_10 ; const TYPE_7 * VAR_11 = "" ; TYPE_8 * VAR_12 = VAR_13 ; TYPE_9 * VAR_14 = VAR_15 ; TYPE_10 * VAR_16 = VAR_17 ; TYPE_11 VAR_18 , VAR_19 ; if ( ! VAR_20 || ! VAR_21 -> VAR_22 ) { return VAR_23 ; } if ( VAR_24 -> VAR_25 > VAR_26 -> VAR_27 . VAR_28 ) { return VAR_29 ; }  if ( VAR_30 -> VAR_31 < 1 ) {  return VAR_32 ; } VAR_33 = METHOD_1 ( ) ; if ( ! VAR_34 ) { return VAR_35 ; } VAR_36 = & VAR_37 -> VAR_38 [ VAR_39 -> VAR_40 ] ; if ( VAR_41 -> VAR_42 && VAR_43 -> VAR_44 < VAR_45 -> VAR_46 ) { VAR_47 = & VAR_48 -> VAR_49 [ VAR_50 -> VAR_51 ] ; } if ( VAR_52 -> VAR_53 && VAR_54 -> VAR_55 < VAR_56 -> VAR_57 ) { VAR_58 = & VAR_59 -> VAR_60 [ VAR_61 -> VAR_62 ] ; } if ( ! ( VAR_63 = ( TYPE_12 * ) METHOD_2 ( METHOD_3 ( 1 , VAR_64 -> VAR_65 ) , sizeof ( TYPE_13 ) ) ) ) { METHOD_4 ( "Warning:CannotallocatememoryforElf_(Verneed)\\n" ) ; goto VAR_66 ; } VAR_67 = VAR_68 + VAR_69 -> VAR_70 ; METHOD_5 ( VAR_71 , "section_name" , VAR_72 , 0 ) ; METHOD_6 ( VAR_73 , "num_entries" , VAR_74 -> VAR_75 , 0 ) ; METHOD_7 ( VAR_76 , "addr" , VAR_77 -> VAR_78 , 0 ) ; METHOD_8 ( VAR_79 , "offset" , VAR_80 -> VAR_81 , 0 ) ; METHOD_9 ( VAR_82 , "link" , VAR_83 -> VAR_84 , 0 ) ; METHOD_10 ( VAR_85 , "link_section_name" , VAR_86 , 0 ) ; if ( VAR_87 -> VAR_88 > VAR_89 -> VAR_90 || VAR_91 -> VAR_92 + VAR_93 -> VAR_94 > VAR_95 -> VAR_96 ) { goto VAR_97 ; } if ( VAR_98 -> VAR_99 + VAR_100 -> VAR_101 < VAR_102 -> VAR_103 ) { goto VAR_104 ; } VAR_105 = METHOD_11 ( VAR_106 -> VAR_107 , VAR_108 -> VAR_109 , VAR_110 , VAR_111 -> VAR_112 ) ; if ( VAR_113 < 0 ) goto VAR_114 ; for ( VAR_115 = 0 , VAR_116 = 0 ; VAR_117 < VAR_118 -> VAR_119 ; ++ VAR_120 ) { TYPE_14 VAR_121 , VAR_122 ; TYPE_15 * VAR_123 = VAR_124 + VAR_125 ; TYPE_16 ( TYPE_17 ) VAR_126 = { 0 } ; if ( VAR_127 + sizeof ( TYPE_18 ( TYPE_19 ) ) > VAR_128 ) { goto VAR_129 ; } TYPE_20 ( TYPE_21 ) * VAR_130 = & VAR_131 ; TYPE_22 VAR_132 [ 32 ] = { 0 } ; VAR_133 = METHOD_12 ( ) ; if ( ! VAR_134 ) { goto VAR_135 ; } VAR_136 = 0 ; VAR_137 . VAR_138 = METHOD_13 ( VAR_139 , VAR_140 ) VAR_141 . VAR_142 = METHOD_14 ( VAR_143 , VAR_144 ) VAR_145 . VAR_146 = METHOD_15 ( VAR_147 , VAR_148 ) VAR_149 . VAR_150 = METHOD_16 ( VAR_151 , VAR_152 ) VAR_153 . VAR_154 = METHOD_17 ( VAR_155 , VAR_156 ) METHOD_18 ( VAR_157 , "vn_version" , VAR_158 -> VAR_159 , 0 ) ; METHOD_19 ( VAR_160 , "idx" , VAR_161 , 0 ) ; if ( VAR_162 -> VAR_163 > VAR_164 -> VAR_165 ) { goto VAR_166 ; } { TYPE_23 * VAR_167 = METHOD_20 ( & VAR_168 -> VAR_169 [ VAR_170 -> VAR_171 ] , 16 ) ; METHOD_21 ( VAR_172 , "file_name" , VAR_173 , 0 ) ; METHOD_22 ( VAR_174 ) ; } METHOD_23 ( VAR_175 , "cnt" , VAR_176 -> VAR_177 , 0 ) ; TYPE_24 VAR_178 = VAR_179 -> VAR_180 ; if ( VAR_181 < 1 ) { goto VAR_182 ; } VAR_183 += VAR_184 ; for ( VAR_185 = 0 , VAR_186 = VAR_187 + VAR_188 -> VAR_189 ; VAR_190 < VAR_191 -> VAR_192 && VAR_193 + sizeof ( TYPE_25 ( TYPE_26 ) ) <= VAR_194 ; ++ VAR_195 ) { TYPE_27 TYPE_28 ; TYPE_29 ( TYPE_30 ) * VAR_196 = VAR_197 ; TYPE_31 ( TYPE_32 ) VAR_198 = { 0 } ; VAR_199 = METHOD_24 ( ) ; if ( ! VAR_200 ) { goto VAR_201 ; } VAR_202 = ( TYPE_33 ( TYPE_34 ) * ) & VAR_203 ; TYPE_35 = 0 ; VAR_204 . VAR_205 = METHOD_25 ( VAR_206 , TYPE_36 ) VAR_207 . VAR_208 = METHOD_26 ( VAR_209 , TYPE_37 ) VAR_210 . VAR_211 = METHOD_27 ( VAR_212 , TYPE_38 ) VAR_213 . VAR_214 = METHOD_28 ( VAR_215 , TYPE_39 ) VAR_216 . VAR_217 = METHOD_29 ( VAR_218 , TYPE_40 ) if ( VAR_219 -> VAR_220 > VAR_221 -> VAR_222 ) { goto VAR_223 ; } METHOD_30 ( VAR_224 , "idx" , VAR_225 , 0 ) ; if ( VAR_226 -> VAR_227 > 0 && VAR_228 -> VAR_229 + 8 < VAR_230 -> VAR_231 ) { TYPE_41 VAR_232 [ 16 ] ; METHOD_31 ( VAR_233 , & VAR_234 -> VAR_235 [ VAR_236 -> VAR_237 ] , sizeof ( VAR_238 ) - 1 ) ; VAR_239 [ sizeof ( VAR_240 ) - 1 ] = 0 ; METHOD_32 ( VAR_241 , "name" , VAR_242 , 0 ) ; } METHOD_33 ( VAR_243 , "flags" , METHOD_34 ( VAR_244 -> VAR_245 ) , 0 ) ; METHOD_35 ( VAR_246 , "version" , VAR_247 -> VAR_248 , 0 ) ; VAR_249 += VAR_250 -> VAR_251 ; VAR_252 += VAR_253 -> VAR_254 ; METHOD_36 ( VAR_255 , sizeof ( VAR_256 ) , "vernaux%d" , VAR_257 ) ; METHOD_37 ( VAR_258 , VAR_259 , VAR_260 ) ; } if ( ( TYPE_42 ) VAR_261 -> VAR_262 < 0 ) { METHOD_38 ( "Invalidvn_next\\n" ) ; break ; } VAR_263 += VAR_264 -> VAR_265 ; METHOD_39 ( VAR_266 , sizeof ( VAR_267 ) , "version%d" , VAR_268 ) ; METHOD_40 ( VAR_269 , VAR_270 , VAR_271 ) ; if ( ! VAR_272 -> VAR_273 ) { break ; } } METHOD_41 ( VAR_274 ) ; return VAR_275 ; VAR_276 : METHOD_42 ( VAR_277 ) ; METHOD_43 ( VAR_278 ) ; METHOD_44 ( VAR_279 ) ; METHOD_45 ( VAR_280 ) ; return VAR_281 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { const TYPE_3 * const VAR_2 = ( const TYPE_4 * ) VAR_3 ; const TYPE_5 * const VAR_4 = ( const TYPE_6 * ) VAR_5 ;  if ( VAR_6 -> VAR_7 < VAR_8 -> VAR_9 ) {  return 1 ; } else if ( VAR_10 -> VAR_11 == VAR_12 -> VAR_13 ) { return 0 ; } else { return - 1 ; } }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , const unsigned TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 ; TYPE_8 VAR_8 , VAR_9 ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 ; const TYPE_11 * VAR_12 = "" ; const TYPE_12 * VAR_13 = "corrupt:" ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = VAR_19 ; VAR_20 . VAR_21 = VAR_22 ; if ( VAR_23 -> VAR_24 & VAR_25 ) return 0 ; if ( METHOD_1 ( & VAR_26 , & VAR_27 ) == - 1 ) return 0 ; TYPE_13 TYPE_14 TYPE_15 ( & VAR_28 ) ; if ( ( VAR_29 = METHOD_2 ( & VAR_30 , & VAR_31 , & VAR_32 ) ) == - 1 ) { VAR_33 = "Can\'treadSAT" ; goto VAR_34 ; } TYPE_16 TYPE_17 TYPE_18 ( "SAT" , & VAR_35 , METHOD_3 ( & VAR_36 ) ) ; if ( ( VAR_37 = METHOD_4 ( & VAR_38 , & VAR_39 , & VAR_40 , & VAR_41 ) ) == - 1 ) { VAR_42 = "Can\'treadSSAT" ; goto VAR_43 ; } TYPE_19 TYPE_20 TYPE_21 ( "SSAT" , & VAR_44 , METHOD_5 ( & VAR_45 ) ) ; if ( ( VAR_46 = METHOD_6 ( & VAR_47 , & VAR_48 , & VAR_49 , & VAR_50 ) ) == - 1 ) { VAR_51 = "Can\'treaddirectory" ; goto VAR_52 ; } const TYPE_22 * VAR_53 ; if ( ( VAR_54 = METHOD_7 ( & VAR_55 , & VAR_56 , & VAR_57 , & VAR_58 , & VAR_59 , & VAR_60 ) ) == - 1 ) { VAR_61 = "Cannotreadshortstream" ; goto VAR_62 ; } TYPE_23 TYPE_24 TYPE_25 ( & VAR_63 , & VAR_64 , & VAR_65 , & VAR_66 , & VAR_67 , & VAR_68 ) ; TYPE_26 TYPE_27 if ( VAR_69 ) { if ( METHOD_8 ( VAR_70 ) ) { TYPE_28 VAR_71 [ 128 ] ; if ( METHOD_9 ( VAR_72 , "CLSID%s," , METHOD_10 ( VAR_73 , sizeof ( VAR_74 ) , VAR_75 -> VAR_76 ) ) == - 1 ) return - 1 ; } } if ( ( VAR_77 = METHOD_11 ( & VAR_78 , & VAR_79 , & VAR_80 , & VAR_81 , & VAR_82 , & VAR_83 , & VAR_84 ) ) == - 1 ) { if ( VAR_85 == VAR_86 ) { VAR_87 = VAR_88 ; VAR_89 = "Nosummaryinfo" ; } else { VAR_90 = "Cannotreadsummaryinfo" ; } goto VAR_91 ; } TYPE_29 TYPE_30 TYPE_31 ( & VAR_92 , & VAR_93 ) ; if ( ( VAR_94 = METHOD_12 ( VAR_95 , & VAR_96 , & VAR_97 ,  VAR_98 -> VAR_99 ) ) < 0 )  VAR_100 = "Can\'texpandsummary_info" ; if ( VAR_101 == 0 ) { const TYPE_32 * VAR_102 = VAR_103 ; TYPE_33 * VAR_104 ; TYPE_34 VAR_105 [ METHOD_13 ( VAR_106 -> VAR_107 ) ] ; TYPE_35 VAR_108 , VAR_109 ; for ( VAR_110 = 0 ; VAR_111 == VAR_112 && VAR_113 < VAR_114 . VAR_115 ; VAR_116 ++ ) { VAR_117 = & VAR_118 . VAR_119 [ VAR_120 ] ; for ( VAR_121 = 0 ; VAR_122 < sizeof ( VAR_123 ) ; VAR_124 ++ ) VAR_125 [ VAR_126 ] = ( TYPE_36 ) METHOD_14 ( VAR_127 -> VAR_128 [ VAR_129 ] ) ; VAR_130 = METHOD_15 ( VAR_131 , METHOD_16 ( VAR_132 ) ? VAR_133 : VAR_134 ) ; } if ( METHOD_17 ( VAR_135 ) ) { if ( VAR_136 != VAR_137 ) { if ( METHOD_18 ( VAR_138 , "%s" , VAR_139 ) == - 1 ) return - 1 ; VAR_140 = 1 ; } } else { if ( VAR_141 == VAR_142 ) VAR_143 = "vnd.ms-office" ; if ( METHOD_19 ( VAR_144 , "application/%s" , VAR_145 ) == - 1 ) return - 1 ; VAR_146 = 1 ; } } METHOD_20 ( VAR_147 . VAR_148 ) ; VAR_149 : METHOD_21 ( VAR_150 . VAR_151 ) ; VAR_152 : METHOD_22 ( VAR_153 . VAR_154 ) ; VAR_155 : METHOD_23 ( VAR_156 . VAR_157 ) ; VAR_158 : METHOD_24 ( VAR_159 . VAR_160 ) ; VAR_161 : if ( VAR_162 == - 1 ) { if ( METHOD_25 ( VAR_163 ) ) { if ( METHOD_26 ( VAR_164 , "CompositeDocumentFileV2Document" ) == - 1 ) return - 1 ; if ( * VAR_165 ) if ( METHOD_27 ( VAR_166 , ",%s%s" , VAR_167 , VAR_168 ) == - 1 ) return - 1 ; } else { if ( METHOD_28 ( VAR_169 , "application/CDFV2-corrupt" ) == - 1 ) return - 1 ; } VAR_170 = 1 ; } return VAR_171 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( unsigned TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ;  TYPE_1 VAR_3 = sizeof ( * VAR_4 ) + VAR_5 ;  if ( ( METHOD_1 ( VAR_6 ) >> VAR_7 ) + 2 > VAR_8 ) return VAR_9 ; if ( VAR_10 <= ( VAR_11 << VAR_12 ) ) VAR_13 = METHOD_2 ( VAR_14 , VAR_15 | VAR_16 | VAR_17 ) ; if ( ! VAR_18 ) { VAR_19 = METHOD_3 ( VAR_20 ) ; if ( ! VAR_21 ) return VAR_22 ; } METHOD_4 ( VAR_23 , 0 , sizeof ( * VAR_24 ) ) ; VAR_25 -> VAR_26 = VAR_27 ; return VAR_28 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = METHOD_1 ( VAR_5 ) ; VAR_6 -> VAR_7 = VAR_8 -> VAR_9 . VAR_10 ; VAR_11 -> VAR_12 = VAR_13 -> VAR_14 . VAR_15 + VAR_16 -> VAR_17 . VAR_18 ; while ( add_post_var ( VAR_19 , VAR_20 , TYPE_6 VAR_21 ) ) { if ( ++ VAR_22 -> VAR_23 > VAR_24 ) { php_error_docref ( TYPE_7 VAR_25 , VAR_26 , "Inputvariablesexceeded%" VAR_27 "." "Toincreasethelimitchangemax_input_varsinphp.ini." , VAR_28 ) ; return VAR_29 ; } }  if ( ! TYPE_8 ) {  METHOD_2 ( VAR_30 -> VAR_31 . VAR_32 , VAR_33 -> VAR_34 , VAR_35 -> VAR_36 . VAR_37 = VAR_38 -> VAR_39 - VAR_40 -> VAR_41 ) ; } return VAR_42 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_4 * VAR_2 ; VAR_3 * VAR_4 ;  if ( ! METHOD_1 ( STRUCT_OR_UNION_5 , & VAR_5 ) )  return - VAR_6 ; switch ( STRUCT_OR_UNION_6 -> VAR_7 ) { case VAR_8 : if ( VAR_9 == 0 || VAR_10 == VAR_11 ) VAR_12 = VAR_13 ; break ; case VAR_14 : switch ( VAR_15 ) { case 0 : case VAR_16 : VAR_17 = VAR_18 ; break ; case VAR_19 : TYPE_3 TYPE_4 case VAR_20 : case VAR_21 : TYPE_5 TYPE_6 case VAR_22 : TYPE_7 TYPE_8 case VAR_23 : return - VAR_24 ; TYPE_9 TYPE_10 case VAR_25 : if ( METHOD_2 ( VAR_26 ) ) return - VAR_27 ; break ; TYPE_11 TYPE_12 case VAR_28 : if ( METHOD_3 ( VAR_29 ) ) return - VAR_30 ; default : break ; } break ; case VAR_31 : break ; default : return - VAR_32 ; } VAR_33 = METHOD_4 ( STRUCT_OR_UNION_7 , VAR_34 , VAR_35 , & VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) return - VAR_40 ; VAR_41 = METHOD_5 ( VAR_42 ) -> VAR_43 = METHOD_6 ( ) ; if ( ! VAR_44 ) { METHOD_7 ( VAR_45 ) ; return - VAR_46 ; } METHOD_8 ( STRUCT_OR_UNION_8 , VAR_47 ) ; VAR_48 -> VAR_49 = VAR_50 ; STRUCT_OR_UNION_9 -> VAR_51 = & VAR_52 ; VAR_53 -> VAR_54 = VAR_55 ; VAR_56 -> VAR_57 = VAR_58 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 ; switch ( VAR_3 -> VAR_4 ) { case 2 : { TYPE_2 TYPE_3 VAR_5 ; VAR_6 = VAR_7 -> VAR_8 ;  VAR_9 -> VAR_10 = VAR_11 -> VAR_12 . VAR_13 ;  VAR_14 -> VAR_15 . VAR_16 = VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 ) ; break ; } case 4 :  VAR_20 -> VAR_21 = VAR_22 -> VAR_23 . VAR_24 ;  break ; case 5 : VAR_25 = METHOD_2 ( VAR_26 ) ; break ; case 6 : VAR_27 = METHOD_3 ( VAR_28 ) ; break ; } return VAR_29 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 [ VAR_3 ] ; TYPE_3 VAR_4 [ VAR_5 ] ; struct STRUCT_OR_UNION_1 VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_2 VAR_8 ; struct STRUCT_OR_UNION_3 VAR_9 ; if ( VAR_10 -> VAR_11 && VAR_12 -> VAR_13 == VAR_14 ) { METHOD_1 ( VAR_15 , VAR_16 ) ; return ; } if ( ! VAR_17 ) return ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 = & VAR_23 ; METHOD_2 ( VAR_24 , VAR_25 ) ; VAR_26 -> VAR_27 = VAR_28 ; if ( ! VAR_29 . VAR_30 || VAR_31 . VAR_32 ) return ; METHOD_3 ( 3 , "Subscribingto%s\\n" , VAR_33 . VAR_34 ) ; METHOD_4 ( VAR_35 , "mailboxes\\"" , sizeof ( VAR_36 ) ) ; mutt_account_tourl ( & VAR_37 -> conn -> account , & VAR_38 ) ;  imap_quote_string ( VAR_39 , sizeof ( VAR_40 ) , VAR_41 . VAR_42 ) ;  VAR_43 . path = VAR_44 + 1 ; VAR_45 . path [ strlen ( VAR_46 . path ) - 1 ] = '\\0' ; if ( mutt_str_strcmp ( VAR_47 . user , ImapUser ) == 0 ) VAR_48 . user = VAR_49 ; url_tostring ( & VAR_50 , VAR_51 + 11 , sizeof ( VAR_52 ) - 11 , 0 ) ; mutt_str_strcat ( VAR_53 , sizeof ( VAR_54 ) , "\\"" ) ; METHOD_5 ( & VAR_55 ) ; METHOD_6 ( & VAR_56 ) ; VAR_57 . VAR_58 = VAR_59 ; VAR_60 . VAR_61 = sizeof ( VAR_62 ) ; if ( METHOD_7 ( VAR_63 , & VAR_64 , & VAR_65 ) ) METHOD_8 ( 1 , "Erroraddingsubscribedmailbox:%s\\n" , VAR_66 ) ; METHOD_9 ( & VAR_67 . VAR_68 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ,  TYPE_1 * * VAR_2 , TYPE_2 * VAR_3 ,  TYPE_3 * VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 , VAR_11 ; struct STRUCT_OR_UNION_3 * VAR_12 ;  TYPE_7 * VAR_13 , * VAR_14 ;  TYPE_8 VAR_15 ; TYPE_9 VAR_16 ; struct STRUCT_OR_UNION_4 VAR_17 ;  struct STRUCT_OR_UNION_5 VAR_18 ;  TYPE_10 * VAR_19 , * VAR_20 ; struct STRUCT_OR_UNION_6 VAR_21 ; struct STRUCT_OR_UNION_7 VAR_22 ; struct STRUCT_OR_UNION_8 * VAR_23 ; unsigned TYPE_11 VAR_24 , VAR_25 ; TYPE_12 VAR_26 ; TYPE_13 VAR_27 ; METHOD_1 ( VAR_28 , VAR_29 , sizeof ( VAR_30 ) + 1 , VAR_31 ) ; VAR_32 = METHOD_2 ( VAR_33 ) ; METHOD_3 ( "tickettype%d%s\\n" , VAR_34 , METHOD_4 ( VAR_35 ) ) ; VAR_36 = METHOD_5 ( VAR_37 ) ; if ( VAR_38 != 1 ) goto VAR_39 ; VAR_40 = METHOD_6 ( VAR_41 , VAR_42 ) ; if ( METHOD_7 ( VAR_43 ) ) { VAR_44 = METHOD_8 ( VAR_45 ) ; goto VAR_46 ; }  VAR_47 = METHOD_9 ( VAR_48 , VAR_49 , VAR_50 , VAR_51 ,  VAR_52 ) ; if ( VAR_53 <= 0 ) { VAR_54 = VAR_55 ; goto VAR_56 ; } METHOD_10 ( "decrypted%dbytes\\n" , VAR_57 ) ; VAR_58 = VAR_59 ; VAR_60 = VAR_61 + VAR_62 ; VAR_63 = METHOD_11 ( & VAR_64 ) ; if ( VAR_65 != 1 ) goto VAR_66 ; METHOD_12 ( & VAR_67 , & VAR_68 -> VAR_69 , sizeof ( VAR_70 ) ) ; VAR_71 = METHOD_13 ( & VAR_72 , & VAR_73 , VAR_74 ) ; if ( VAR_75 ) goto VAR_76 ; METHOD_14 ( & VAR_77 , & VAR_78 , sizeof ( VAR_79 ) ) ; METHOD_15 ( & VAR_80 , & VAR_81 ) ; VAR_82 = METHOD_16 ( ) + VAR_83 . VAR_84 ; VAR_85 = VAR_86 - ( VAR_87 . VAR_88 / 4 ) ; METHOD_17 ( "expires=%lurenew_after=%lu\\n" , VAR_89 , VAR_90 ) ; METHOD_18 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 ) ;  VAR_95 = VAR_96 ;  if ( VAR_97 ) { METHOD_19 ( "encryptedticket\\n" ) ; VAR_98 = METHOD_20 ( & VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; if ( VAR_104 < 0 ) { VAR_105 = VAR_106 ; goto VAR_107 ;  }  VAR_108 = METHOD_21 ( & VAR_109 ) ; } else { METHOD_22 ( VAR_110 , VAR_111 , VAR_112 , VAR_113 ) ;  METHOD_23 ( VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ;  METHOD_24 ( VAR_118 , VAR_119 , VAR_120 ) ; } VAR_121 = VAR_122 + VAR_123 ; METHOD_25 ( "ticketblobis%dbytes\\n" , VAR_124 ) ; METHOD_26 ( & VAR_125 , VAR_126 , 1 + sizeof ( TYPE_14 ) , VAR_127 ) ; VAR_128 = METHOD_27 ( & VAR_129 ) ; VAR_130 = METHOD_28 ( & VAR_131 ) ; VAR_132 = METHOD_29 ( & VAR_133 , & VAR_134 , VAR_135 ) ; if ( VAR_136 ) goto VAR_137 ; METHOD_30 ( & VAR_138 -> VAR_139 ) ; if ( VAR_140 -> VAR_141 ) METHOD_31 ( VAR_142 -> VAR_143 ) ; VAR_144 -> VAR_145 = VAR_146 ; VAR_147 -> VAR_148 = VAR_149 ; VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = VAR_155 ; VAR_156 -> VAR_157 = VAR_158 ; VAR_159 -> VAR_160 = VAR_161 ; METHOD_32 ( "gotticketservice%d(%s)secret_id%lldlen%d\\n" , VAR_162 , METHOD_33 ( VAR_163 ) , VAR_164 -> VAR_165 , ( TYPE_15 ) VAR_166 -> VAR_167 -> VAR_168 . VAR_169 ) ; VAR_170 -> VAR_171 |= VAR_172 -> VAR_173 ; VAR_174 :  return VAR_175 ;  VAR_176 : VAR_177 = - VAR_178 ; goto VAR_179 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 ) METHOD_1 ( STRUCT_OR_UNION_3 ) ;  STRUCT_OR_UNION_4 -> VAR_4 = 0 ;  VAR_5 -> VAR_6 -> METHOD_2 ( STRUCT_OR_UNION_5 , VAR_7 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 , VAR_2 , VAR_3 = 0 , VAR_4 ; TYPE_3 VAR_5 ; const unsigned TYPE_4 * VAR_6 ; unsigned TYPE_5 * VAR_7 ; VAR_8 = VAR_9 -> VAR_10 -> METHOD_1 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , 16384 , & VAR_15 ) ; if ( ! VAR_16 ) return ( ( TYPE_6 ) VAR_17 ) ; if ( VAR_18 < 6 ) { VAR_19 = VAR_20 ; METHOD_2 ( VAR_21 , VAR_22 ) ; goto VAR_23 ; } VAR_24 = VAR_25 = ( unsigned TYPE_7 * ) VAR_26 -> VAR_27 ;  METHOD_3 ( VAR_28 , VAR_29 -> VAR_30 -> VAR_31 ) ;  METHOD_4 ( VAR_32 , VAR_33 ) ; if ( VAR_34 + 6 != VAR_35 ) { VAR_36 = VAR_37 ; METHOD_5 ( VAR_38 , VAR_39 ) ; goto VAR_40 ; } METHOD_6 ( VAR_41 -> VAR_42 -> VAR_43 ) ; VAR_44 -> VAR_45 -> VAR_46 = 0 ; VAR_47 -> VAR_48 -> VAR_49 = METHOD_7 ( VAR_50 ) ; if ( ! VAR_51 -> VAR_52 -> VAR_53 ) { METHOD_8 ( VAR_54 , VAR_55 ) ; goto VAR_56 ; } METHOD_9 ( VAR_57 -> VAR_58 -> VAR_59 , VAR_60 , VAR_61 ) ; VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; METHOD_10 ( VAR_66 , VAR_67 , VAR_68 -> VAR_69 -> VAR_70 , & VAR_71 -> VAR_72 -> VAR_73 , METHOD_11 ( ) , VAR_74 ) ; VAR_75 = 1 ; return ( VAR_76 ) ; VAR_77 : METHOD_12 ( VAR_78 , VAR_79 , VAR_80 ) ; VAR_81 : VAR_82 -> VAR_83 = VAR_84 ; return ( - 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 , VAR_2 [ 256 ] ; TYPE_3 VAR_3 ; METHOD_1 ( VAR_4 ) ; VAR_5 -> VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; VAR_9 = METHOD_3 ( "/dev/input/" , VAR_10 -> VAR_11 ) ; VAR_12 -> VAR_13 = METHOD_4 ( VAR_14 , VAR_15 | VAR_16 | VAR_17 | VAR_18 ) ; if ( VAR_19 -> VAR_20 < 0 ) return METHOD_5 ( VAR_21 , "Failedtoopen%s:%m" , VAR_22 ) ; VAR_23 = METHOD_6 ( VAR_24 ) ; if ( VAR_25 < 0 ) return METHOD_7 ( VAR_26 , "Failedtodeterminewhetherinputdeviceisrelevanttous:%m" ) ; if ( VAR_27 == 0 ) return METHOD_8 ( METHOD_9 ( VAR_28 ) , "Device%sdoesnotexposekeysorswitchesrelevanttous,ignoring." , VAR_29 ) ; if ( METHOD_10 ( VAR_30 -> VAR_31 , METHOD_11 ( sizeof ( VAR_32 ) ) , VAR_33 ) < 0 ) { VAR_34 = METHOD_12 ( VAR_35 , "Failedtogetinputname:%m" ) ; goto VAR_36 ; } ( TYPE_4 ) METHOD_13 ( VAR_37 ) ;  VAR_38 = METHOD_14 ( VAR_39 -> VAR_40 -> VAR_41 , & VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ;  if ( VAR_49 < 0 ) { METHOD_15 ( VAR_50 , "Failedtoaddbuttonevent:%m" ) ; goto VAR_51 ; } METHOD_16 ( "Watchingsystembuttonson/dev/input/%s(%s)" , VAR_52 -> VAR_53 , VAR_54 ) ; return 0 ; VAR_55 : VAR_56 -> VAR_57 = METHOD_17 ( VAR_58 -> VAR_59 ) ; return VAR_60 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = 0 ; ( TYPE_3 ) VAR_2 ; VAR_3 += METHOD_1 ( ) ; VAR_4 += METHOD_2 ( ) ; VAR_5 += METHOD_3 ( ) ; VAR_6 += METHOD_4 ( ) ; VAR_7 += METHOD_5 ( ) ; VAR_8 += METHOD_6 ( ) ; VAR_9 += METHOD_7 ( ) ; VAR_10 += METHOD_8 ( ) ; VAR_11 += METHOD_9 ( ) ;  if ( VAR_12 )  return VAR_13 ; else return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * * VAR_2 , const TYPE_3 * * VAR_3 , TYPE_4 * * VAR_4 ) { switch ( VAR_5 -> VAR_6 . VAR_7 ) { case VAR_8 : * VAR_9 = VAR_10 ; * VAR_11 = METHOD_1 ( VAR_12 , VAR_13 -> VAR_14 . VAR_15 ) ; * VAR_16 = VAR_17 ; return ( * VAR_18 != VAR_19 ) ; case VAR_20 : * VAR_21 = METHOD_2 ( VAR_22 , VAR_23 -> VAR_24 . VAR_25 ) ; * VAR_26 = METHOD_3 ( VAR_27 , VAR_28 -> VAR_29 . VAR_30 ) ; * VAR_31 = VAR_32 ;  return VAR_33 ;  case VAR_34 : * VAR_35 = METHOD_4 ( VAR_36 , VAR_37 -> VAR_38 . VAR_39 ) ; * VAR_40 = METHOD_5 ( VAR_41 , VAR_42 -> VAR_43 . VAR_44 ) ; * VAR_45 = VAR_46 -> VAR_47 . VAR_48 ;  return VAR_49 ;  default : break ; } METHOD_6 ( VAR_50 , "Unexpectedoperator%dinResolveLhs\\n" , VAR_51 -> VAR_52 . VAR_53 ) ; return VAR_54 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 , * VAR_3 ; METHOD_1 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) { if ( VAR_8 -> VAR_9 -> VAR_10 == VAR_11 -> VAR_12 -> VAR_13 && VAR_14 -> VAR_15 -> VAR_16 == VAR_17 -> VAR_18 -> VAR_19 )  METHOD_2 ( VAR_20 ) ;  } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * const VAR_4 = VAR_5 ? METHOD_1 ( VAR_6 , 1 ) : VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 * VAR_10 ; TYPE_8 VAR_11 = VAR_12 ; TYPE_9 VAR_13 = 1 ; TYPE_10 VAR_14 , VAR_15 ;  METHOD_2 ( VAR_16 , VAR_17 ) ;  VAR_18 = METHOD_3 ( METHOD_4 ( VAR_19 , VAR_20 ) ) ; if ( ! VAR_21 ) return VAR_22 ; if ( METHOD_5 ( VAR_23 , VAR_24 , METHOD_6 ( VAR_25 , VAR_26 ) , 0 ) ) return VAR_27 ; VAR_28 = METHOD_7 ( VAR_29 , METHOD_8 ( VAR_30 , VAR_31 + 1 ) ) ; if ( ! VAR_32 ) return VAR_33 ; if ( METHOD_9 ( METHOD_10 ( VAR_34 , VAR_35 + 2 ) ) == VAR_36 ) { VAR_37 = METHOD_11 ( VAR_38 , METHOD_12 ( VAR_39 , VAR_40 + 3 ) ) ; if ( ! VAR_41 ) return VAR_42 ; VAR_43 += 2 ; }  VAR_44 = METHOD_13 ( VAR_45 , METHOD_14 ( VAR_46 , VAR_47 + 3 ) ) ;  if ( ! VAR_48 ) return VAR_49 ; METHOD_15 ( VAR_50 , & VAR_51 , & VAR_52 ) ;  if ( VAR_53 )   return METHOD_16 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ,  METHOD_17 ( VAR_59 ) , VAR_60 -> VAR_61 , VAR_62 , VAR_63 , VAR_64 -> VAR_65 ) ; else  return METHOD_18 ( VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 ,  METHOD_19 ( VAR_71 ) , VAR_72 -> VAR_73 , VAR_74 , VAR_75 , VAR_76 -> VAR_77 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 , VAR_5 ) ; struct STRUCT_OR_UNION_3 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ;  TYPE_2 VAR_8 = 0 ;  if ( ! VAR_9 ) return - VAR_10 ; if ( METHOD_3 ( & VAR_11 -> VAR_12 ) ) return - VAR_13 ; if ( ! METHOD_4 ( VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_5 ( VAR_18 -> VAR_19 , VAR_20 , VAR_21 , & STRUCT_OR_UNION_6 ) ; if ( VAR_22 < 0 ) return VAR_23 ; METHOD_6 ( STRUCT_OR_UNION_7 -> VAR_24 , VAR_25 , VAR_26 ) ; VAR_27 -> VAR_28 -> METHOD_7 ( & VAR_29 -> VAR_30 . VAR_31 , VAR_32 ) ; METHOD_8 ( VAR_33 , STRUCT_OR_UNION_8 -> VAR_34 , VAR_35 , VAR_36 ) ; * VAR_37 = STRUCT_OR_UNION_9 ; return VAR_38 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_1 ( VAR_9 ) ; TYPE_2 VAR_10 ; METHOD_2 ( & VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 , & VAR_17 , 64 ) ; METHOD_4 ( VAR_18 , VAR_19 . VAR_20 ) ;  if ( METHOD_5 ( VAR_21 . VAR_22 == VAR_23 ) )  { METHOD_6 ( VAR_24 , VAR_25 . VAR_26 . VAR_27 . VAR_28 , VAR_29 . VAR_30 . VAR_31 . VAR_32 , VAR_33 ) ; return METHOD_7 ( VAR_34 , & VAR_35 , 0 ) ; } while ( VAR_36 . VAR_37 >= 64 ) { METHOD_8 ( VAR_38 , VAR_39 . VAR_40 . VAR_41 . VAR_42 , VAR_43 . VAR_44 . VAR_45 . VAR_46 , VAR_47 . VAR_48 - ( VAR_49 . VAR_50 % 64 ) ) ; VAR_51 = METHOD_9 ( VAR_52 , & VAR_53 , VAR_54 . VAR_55 % 64 ) ; } if ( VAR_56 . VAR_57 ) { METHOD_10 ( VAR_58 , VAR_59 . VAR_60 . VAR_61 . VAR_62 , VAR_63 . VAR_64 . VAR_65 . VAR_66 , VAR_67 . VAR_68 ) ; VAR_69 = METHOD_11 ( VAR_70 , & VAR_71 , 0 ) ; } return VAR_72 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_5 * VAR_3 ; struct STRUCT_OR_UNION_6 * VAR_4 ; TYPE_3 VAR_5 ; TYPE_4 VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; struct STRUCT_OR_UNION_7 VAR_9 ; METHOD_1 ( VAR_10 ) ; VAR_11 = STRUCT_OR_UNION_8 -> VAR_12 ; VAR_13 = METHOD_2 ( VAR_14 ) ; VAR_15 = 0 ;  METHOD_3 ( VAR_16 ) ;  if ( VAR_17 -> VAR_18 != VAR_19 ) { if ( METHOD_4 ( VAR_20 , VAR_21 ) ) VAR_22 = 0 ; else VAR_23 = - VAR_24 ; goto VAR_25 ; } if ( VAR_26 & VAR_27 ) { VAR_28 = - VAR_29 ; goto VAR_30 ; } if ( VAR_31 -> VAR_32 & VAR_33 ) { VAR_34 = 0 ; goto VAR_35 ; } if ( ! VAR_36 ) { VAR_37 = 0 ; goto VAR_38 ; } VAR_39 = METHOD_5 ( VAR_40 , VAR_41 & VAR_42 , VAR_43 ) ; if ( VAR_44 >= VAR_45 -> METHOD_6 ( VAR_46 ) ) { VAR_47 = - VAR_48 ; goto VAR_49 ; } VAR_50 = METHOD_7 ( VAR_51 , VAR_52 & VAR_53 ) ; VAR_54 = 0 ; VAR_55 = VAR_56 -> METHOD_8 ( VAR_57 , VAR_58 , & VAR_59 ) ; if ( VAR_60 < 0 ) goto VAR_61 ; METHOD_9 ( METHOD_10 ( VAR_62 ) , & VAR_63 , VAR_64 ) ; while ( 1 ) { TYPE_7 VAR_65 = METHOD_11 ( VAR_66 ) ; if ( VAR_67 < 0 ) { VAR_68 = - VAR_69 ; goto VAR_70 ; } else if ( VAR_71 > 0 ) { TYPE_8 VAR_72 ; VAR_73 = VAR_74 -> METHOD_12 ( VAR_75 , VAR_76 , & VAR_77 ) ; if ( VAR_78 < 0 ) break ; VAR_79 = VAR_80 -> METHOD_13 ( VAR_81 , VAR_82 -> VAR_83 , VAR_84 - VAR_85 , VAR_86 ) ; if ( VAR_87 < 0 ) { VAR_88 = - VAR_89 ; break ; } VAR_90 += VAR_91 ; VAR_92 = VAR_93 -> METHOD_14 ( VAR_94 , VAR_95 , VAR_96 , ! ( VAR_97 & VAR_98 ) , & VAR_99 ) ; if ( VAR_100 < 0 ) goto VAR_101 ; if ( VAR_102 >= VAR_103 || VAR_104 & VAR_105 ) break ; VAR_106 -= VAR_107 ; } else { if ( VAR_108 -> VAR_109 != 0 || ( VAR_110 -> VAR_111 & VAR_112 ) || ( VAR_113 -> VAR_114 & VAR_115 ) ) { break ; } if ( VAR_116 == 0 ) { VAR_117 = - VAR_118 ; break ; } VAR_119 = VAR_120 -> METHOD_15 ( VAR_121 , VAR_122 , & VAR_123 ) ; if ( VAR_124 < 0 ) break ; METHOD_16 ( VAR_125 ) ; VAR_126 = METHOD_17 ( VAR_127 ) ; METHOD_18 ( VAR_128 ) ; if ( METHOD_19 ( VAR_129 ) ) { VAR_130 = METHOD_20 ( VAR_131 ) ; break ; } else if ( VAR_132 == 0 ) { VAR_133 = - VAR_134 ; break ; } METHOD_21 ( METHOD_22 ( VAR_135 ) , & VAR_136 , VAR_137 ) ; } } if ( VAR_138 -> VAR_139 ) VAR_140 = - VAR_141 -> VAR_142 ; else if ( VAR_143 -> VAR_144 & VAR_145 ) VAR_146 = 0 ; if ( VAR_147 > 0 ) { if ( ! ( VAR_148 & VAR_149 ) ) { if ( VAR_150 -> VAR_151 & VAR_152 ) { if ( METHOD_23 ( VAR_153 ) <= 0 ) { VAR_154 -> VAR_155 = VAR_156 ; METHOD_24 ( VAR_157 , VAR_158 ) ; VAR_159 -> METHOD_25 ( VAR_160 ) ; } } } VAR_161 = VAR_162 ; } VAR_163 : METHOD_26 ( METHOD_27 ( VAR_164 ) , & VAR_165 ) ; VAR_166 : METHOD_28 ( VAR_167 ) ; return VAR_168 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , unsigned TYPE_2 * * VAR_1 , unsigned TYPE_3 * * VAR_2 , TYPE_4 * * VAR_3 , unsigned TYPE_5 * VAR_4 , unsigned TYPE_6 * VAR_5 , unsigned TYPE_7 * VAR_6 ) { VAR_7 * VAR_8 ; const unsigned TYPE_8 VAR_9 = 512 ; TYPE_9 VAR_10 [ 512 + 1 ] ; unsigned TYPE_10 VAR_11 = 0 ; unsigned TYPE_11 * VAR_12 = VAR_13 ; unsigned TYPE_12 VAR_14 = 0 ; VAR_15 = METHOD_1 ( VAR_16 , "r" ) ; if ( VAR_17 == VAR_18 ) { METHOD_2 ( VAR_19 , "cannotopenCSRfile!\\n" ) ; return - 1 ; } while ( METHOD_3 ( VAR_20 , VAR_21 , VAR_22 ) != VAR_23 ) { if ( METHOD_4 ( VAR_24 ) == VAR_25 ) { METHOD_5 ( VAR_26 , "couldnotreadfilelength!\\n" ) ; return - 1 ; } if ( VAR_27 [ 0 ] == '%' ) { continue ; } else { if ( VAR_28 == 0 ) {  if ( METHOD_6 ( VAR_29 , "%u%u%u" , VAR_30 , VAR_31 , VAR_32 ) == 3 ) {  * VAR_33 = ( unsigned TYPE_13 * ) METHOD_7 ( sizeof ( unsigned TYPE_14 ) * ( * VAR_34 ) ) ; * VAR_35 = ( unsigned TYPE_15 * ) METHOD_8 ( sizeof ( unsigned TYPE_16 ) * ( * VAR_36 + 1 ) ) ; * VAR_37 = ( TYPE_17 * ) METHOD_9 ( sizeof ( TYPE_18 ) * ( * VAR_38 ) ) ; VAR_39 = ( unsigned TYPE_19 * ) METHOD_10 ( sizeof ( unsigned TYPE_20 ) * ( * VAR_40 ) ) ; if ( ( * VAR_41 == VAR_42 ) || ( * VAR_43 == VAR_44 ) || ( * VAR_45 == VAR_46 ) || ( VAR_47 == VAR_48 ) ) { METHOD_11 ( VAR_49 , "couldnotallocatespdata!\\n" ) ; return - 1 ; } METHOD_12 ( * VAR_50 , 0 , sizeof ( unsigned TYPE_21 ) * ( * VAR_51 + 1 ) ) ; METHOD_13 ( * VAR_52 , 0 , sizeof ( unsigned TYPE_22 ) * ( * VAR_53 ) ) ; METHOD_14 ( * VAR_54 , 0 , sizeof ( TYPE_23 ) * ( * VAR_55 ) ) ; METHOD_15 ( VAR_56 , 0 , sizeof ( unsigned TYPE_24 ) * ( * VAR_57 ) ) ; for ( VAR_58 = 0 ; VAR_59 < ( * VAR_60 + 1 ) ; VAR_61 ++ ) ( * VAR_62 ) [ VAR_63 ] = ( * VAR_64 ) ; ( * VAR_65 ) [ 0 ] = 0 ; VAR_66 = 0 ; VAR_67 = 1 ; } else { METHOD_16 ( VAR_68 , "couldnotcsrdescription!\\n" ) ; return - 1 ; } } else { unsigned TYPE_25 VAR_69 , VAR_70 ; TYPE_26 VAR_71 ; if ( METHOD_17 ( VAR_72 , "%u%u%lf" , & VAR_73 , & VAR_74 , & VAR_75 ) != 3 ) { METHOD_18 ( VAR_76 , "couldnotreadelement!\\n" ) ; return - 1 ; } VAR_77 -- ; VAR_78 -- ; ( * VAR_79 ) [ VAR_80 ] = VAR_81 ; ( * VAR_82 ) [ VAR_83 ] = VAR_84 ; VAR_85 ++ ; VAR_86 [ VAR_87 ] = 1 ; ( * VAR_88 ) [ VAR_89 + 1 ] = VAR_90 ; } } } METHOD_19 ( VAR_91 ) ; if ( VAR_92 != ( * VAR_93 ) ) { METHOD_20 ( VAR_94 , "wewerenotabletoreadallelements!\\n" ) ; return - 1 ; } for ( VAR_95 = 0 ; VAR_96 < ( * VAR_97 ) ; VAR_98 ++ ) { if ( VAR_99 [ VAR_100 ] == 0 ) { ( * VAR_101 ) [ VAR_102 + 1 ] = ( * VAR_103 ) [ VAR_104 ] ; } } if ( VAR_105 != VAR_106 ) { METHOD_21 ( VAR_107 ) ; } return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { typedef struct { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; unsigned TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 ; unsigned TYPE_7 VAR_6 ; unsigned TYPE_8 VAR_7 ; unsigned TYPE_9 VAR_8 ; unsigned TYPE_10 VAR_9 ; } TYPE_11 ; typedef struct { unsigned TYPE_12 VAR_10 ; TYPE_13 VAR_11 ; } TYPE_14 ; typedef struct { unsigned TYPE_15 VAR_12 ; unsigned TYPE_16 VAR_13 ; TYPE_17 VAR_14 ; TYPE_18 VAR_15 ; } TYPE_19 ; typedef struct { unsigned VAR_16 ; unsigned VAR_17 ; unsigned TYPE_20 VAR_18 ; } TYPE_21 ; typedef struct { unsigned TYPE_22 VAR_19 ; unsigned TYPE_23 VAR_20 ; unsigned TYPE_24 VAR_21 ; unsigned TYPE_25 VAR_22 ; unsigned TYPE_26 VAR_23 ; } TYPE_27 ; typedef struct { unsigned TYPE_28 VAR_24 ; unsigned TYPE_29 VAR_25 ; unsigned TYPE_30 VAR_26 ; unsigned TYPE_31 VAR_27 ; } TYPE_32 ; typedef struct { unsigned TYPE_33 VAR_28 ; unsigned TYPE_34 VAR_29 ; unsigned TYPE_35 VAR_30 ; unsigned TYPE_36 VAR_31 ; unsigned TYPE_37 VAR_32 ; unsigned TYPE_38 VAR_33 ; unsigned TYPE_39 VAR_34 ; unsigned TYPE_40 VAR_35 ; unsigned TYPE_41 VAR_36 ; unsigned TYPE_42 VAR_37 ; } TYPE_43 ; typedef struct { unsigned TYPE_44 VAR_38 ; unsigned TYPE_45 VAR_39 ; } TYPE_46 ; TYPE_47 * VAR_40 ; unsigned TYPE_48 VAR_41 ; TYPE_49 VAR_42 ; TYPE_50 VAR_43 ; TYPE_51 VAR_44 ; TYPE_52 VAR_45 ; TYPE_53 VAR_46 ; TYPE_54 VAR_47 ; TYPE_55 VAR_48 ; TYPE_56 VAR_49 ; TYPE_57 VAR_50 , VAR_51 , VAR_52 ; TYPE_58 VAR_53 ; TYPE_59 VAR_54 ; unsigned TYPE_60 * VAR_55 ; TYPE_61 VAR_56 ; METHOD_1 ( VAR_57 != ( const TYPE_62 * ) VAR_58 ) ; METHOD_2 ( VAR_59 -> VAR_60 == VAR_61 ) ; METHOD_3 ( VAR_62 != ( TYPE_63 * ) VAR_63 ) ; METHOD_4 ( VAR_64 -> VAR_65 == VAR_66 ) ; VAR_67 = 1 ; VAR_68 = METHOD_5 ( VAR_69 , VAR_70 ) ; VAR_71 -> VAR_72 = 8 ; VAR_73 = METHOD_6 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 ) ; if ( VAR_78 == VAR_79 ) { VAR_80 = METHOD_7 ( VAR_81 ) ; return ( ( TYPE_64 * ) VAR_82 ) ; } VAR_83 . VAR_84 = METHOD_8 ( VAR_85 ) ; VAR_86 . VAR_87 = ( TYPE_65 ) METHOD_9 ( VAR_88 ) ; VAR_89 . VAR_90 = METHOD_10 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_11 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_12 ( VAR_97 ) ; VAR_98 . VAR_99 = METHOD_13 ( VAR_100 ) ; VAR_101 . VAR_102 = METHOD_14 ( VAR_103 ) ; VAR_104 . VAR_105 = METHOD_15 ( VAR_106 ) ; if ( VAR_107 . VAR_108 != 0x435057FF || ( VAR_109 . VAR_110 >> 8 ) != 0x16 ) METHOD_16 ( VAR_111 , "ImproperImageHeader" ) ; if ( VAR_112 . VAR_113 != 0 ) METHOD_17 ( VAR_114 , "EncryptedWPGImageFileNotSupported" ) ; VAR_115 -> VAR_116 = 1 ; VAR_117 -> VAR_118 = 1 ; VAR_119 -> VAR_120 = 0 ; VAR_121 = 0 ; VAR_122 . VAR_123 = 0 ; switch ( VAR_124 . VAR_125 ) { case 1 : while ( ! METHOD_18 ( VAR_126 ) ) { ( TYPE_66 ) METHOD_19 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 ) ; if ( METHOD_20 ( VAR_131 ) ) break ; VAR_132 . VAR_133 = ( VAR_134 = METHOD_21 ( VAR_135 ) ) ; if ( VAR_136 == VAR_137 ) break ; METHOD_22 ( VAR_138 , & VAR_139 . VAR_140 ) ; if ( METHOD_23 ( VAR_141 ) ) break ; VAR_142 . VAR_143 = METHOD_24 ( VAR_144 ) + VAR_145 . VAR_146 ; switch ( VAR_147 . VAR_148 ) { case 0x0B : VAR_149 . VAR_150 = METHOD_25 ( VAR_151 ) ; VAR_152 . VAR_153 = METHOD_26 ( VAR_154 ) ; if ( ( VAR_155 . VAR_156 == 0 ) || ( VAR_157 . VAR_158 == 0 ) ) METHOD_27 ( VAR_159 , "ImproperImageHeader" ) ; VAR_160 . VAR_161 = METHOD_28 ( VAR_162 ) ; VAR_163 . VAR_164 = METHOD_29 ( VAR_165 ) ; VAR_166 . VAR_167 = METHOD_30 ( VAR_168 ) ; if ( VAR_169 . VAR_170 && VAR_171 . VAR_172 ) { VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 . VAR_178 = VAR_179 . VAR_180 / 470.0 ; VAR_181 -> VAR_182 . VAR_183 = VAR_184 . VAR_185 / 470.0 ; } VAR_186 -> VAR_187 = VAR_188 . VAR_189 ; VAR_190 -> VAR_191 = VAR_192 . VAR_193 ; VAR_194 = VAR_195 . VAR_196 ; goto VAR_197 ; case 0x0E : VAR_198 . VAR_199 = METHOD_31 ( VAR_200 ) ; VAR_201 . VAR_202 = METHOD_32 ( VAR_203 ) ; VAR_204 -> VAR_205 = VAR_206 . VAR_207 ; if ( ! METHOD_33 ( VAR_208 , VAR_209 -> VAR_210 , VAR_211 ) ) goto VAR_212 ; for ( VAR_213 = VAR_214 . VAR_215 ; VAR_216 < ( TYPE_67 ) VAR_217 . VAR_218 ; VAR_219 ++ ) { VAR_220 -> VAR_221 [ VAR_222 ] . VAR_223 = METHOD_34 ( ( unsigned TYPE_68 ) METHOD_35 ( VAR_224 ) ) ; VAR_225 -> VAR_226 [ VAR_227 ] . VAR_228 = METHOD_36 ( ( unsigned TYPE_69 ) METHOD_37 ( VAR_229 ) ) ; VAR_230 -> VAR_231 [ VAR_232 ] . VAR_233 = METHOD_38 ( ( unsigned TYPE_70 ) METHOD_39 ( VAR_234 ) ) ; } break ; case 0x11 : if ( VAR_235 . VAR_236 > 8 ) VAR_237 = METHOD_40 ( VAR_238 , VAR_239 , METHOD_41 ( VAR_240 ) + 8 , ( TYPE_71 ) VAR_241 . VAR_242 - 8 , VAR_243 ) ; break ; case 0x14 : VAR_244 . VAR_245 = METHOD_42 ( VAR_246 ) ; VAR_247 . VAR_248 = METHOD_43 ( VAR_249 ) ; VAR_250 . VAR_251 = METHOD_44 ( VAR_252 ) ; VAR_253 . VAR_254 = METHOD_45 ( VAR_255 ) ; VAR_256 . VAR_257 = METHOD_46 ( VAR_258 ) ; VAR_259 . VAR_260 = METHOD_47 ( VAR_261 ) ; VAR_262 . VAR_263 = METHOD_48 ( VAR_264 ) ; if ( ( VAR_265 . VAR_266 == 0 ) || ( VAR_267 . VAR_268 == 0 ) ) METHOD_49 ( VAR_269 , "ImproperImageHeader" ) ; VAR_270 . VAR_271 = METHOD_50 ( VAR_272 ) ; VAR_273 . VAR_274 = METHOD_51 ( VAR_275 ) ; VAR_276 . VAR_277 = METHOD_52 ( VAR_278 ) ; VAR_279 -> VAR_280 = VAR_281 ; VAR_282 -> VAR_283 . VAR_284 = ( unsigned TYPE_72 ) ( ( VAR_285 . VAR_286 - VAR_287 . VAR_288 ) / 470.0 ) ; VAR_289 -> VAR_290 . VAR_291 = ( unsigned TYPE_73 ) ( ( VAR_292 . VAR_293 - VAR_294 . VAR_295 ) / 470.0 ) ; VAR_296 -> VAR_297 . VAR_298 = ( TYPE_74 ) ( VAR_299 . VAR_300 / 470.0 ) ; VAR_301 -> VAR_302 . VAR_303 = ( TYPE_75 ) ( VAR_304 . VAR_305 / 470.0 ) ; if ( VAR_306 . VAR_307 && VAR_308 . VAR_309 ) { VAR_310 -> VAR_311 . VAR_312 = VAR_313 . VAR_314 / 470.0 ; VAR_315 -> VAR_316 . VAR_317 = VAR_318 . VAR_319 / 470.0 ; } VAR_320 -> VAR_321 = VAR_322 . VAR_323 ; VAR_324 -> VAR_325 = VAR_326 . VAR_327 ; VAR_328 = VAR_329 . VAR_330 ; VAR_331 : if ( ( VAR_332 -> VAR_333 == 0 ) && ( VAR_334 != 24 ) ) { VAR_335 -> VAR_336 = VAR_337 << VAR_338 ; if ( ! METHOD_53 ( VAR_339 , VAR_340 -> VAR_341 , VAR_342 ) ) { VAR_343 : METHOD_54 ( VAR_344 , "MemoryAllocationFailed" ) ; } for ( VAR_345 = 0 ; ( VAR_346 < ( TYPE_76 ) VAR_347 -> VAR_348 ) && ( VAR_349 < 256 ) ; VAR_350 ++ ) { VAR_351 -> VAR_352 [ VAR_353 ] . VAR_354 = METHOD_55 ( VAR_355 [ VAR_356 ] . VAR_357 ) ; VAR_358 -> VAR_359 [ VAR_360 ] . VAR_361 = METHOD_56 ( VAR_362 [ VAR_363 ] . VAR_364 ) ; VAR_365 -> VAR_366 [ VAR_367 ] . VAR_368 = METHOD_57 ( VAR_369 [ VAR_370 ] . VAR_371 ) ; } } else { if ( VAR_372 < 24 ) if ( ( VAR_373 -> VAR_374 < ( VAR_375 << VAR_376 ) ) && ( VAR_377 != 24 ) ) VAR_378 -> VAR_379 = ( TYPE_77 * ) METHOD_58 ( VAR_380 -> VAR_381 , ( TYPE_78 ) ( VAR_382 << VAR_383 ) , sizeof ( * VAR_384 -> VAR_385 ) ) ; } if ( VAR_386 == 1 ) { if ( VAR_387 -> VAR_388 [ 0 ] . VAR_389 == 0 && VAR_390 -> VAR_391 [ 0 ] . VAR_392 == 0 && VAR_393 -> VAR_394 [ 0 ] . VAR_395 == 0 && VAR_396 -> VAR_397 [ 1 ] . VAR_398 == 0 && VAR_399 -> VAR_400 [ 1 ] . VAR_401 == 0 && VAR_402 -> VAR_403 [ 1 ] . VAR_404 == 0 ) { VAR_405 -> VAR_406 [ 1 ] . VAR_407 = VAR_408 -> VAR_409 [ 1 ] . VAR_410 = VAR_411 -> VAR_412 [ 1 ] . VAR_413 = VAR_414 ; } } if ( METHOD_59 ( VAR_415 , VAR_416 , VAR_417 ) < 0 ) { VAR_418 : METHOD_60 ( VAR_419 , "UnableToDecompressImage" ) ; } if ( VAR_420 . VAR_421 == 0x14 && VAR_422 . VAR_423 != 0 && ! VAR_424 -> VAR_425 ) { if ( VAR_426 . VAR_427 & 0x8000 ) { TYPE_79 * VAR_428 ; VAR_429 = METHOD_61 ( VAR_430 , VAR_431 ) ; if ( VAR_432 != ( TYPE_80 * ) VAR_433 ) { METHOD_62 ( VAR_434 , VAR_435 ) ; ( TYPE_81 ) METHOD_63 ( & VAR_436 ) ; METHOD_64 ( & VAR_437 , VAR_438 ) ; } } if ( VAR_439 . VAR_440 & 0x2000 ) { TYPE_82 * VAR_441 ; VAR_442 = METHOD_65 ( VAR_443 , VAR_444 ) ; if ( VAR_445 != ( TYPE_83 * ) VAR_446 ) { METHOD_66 ( VAR_447 , VAR_448 ) ; ( TYPE_84 ) METHOD_67 ( & VAR_449 ) ; METHOD_68 ( & VAR_450 , VAR_451 ) ; } } if ( VAR_452 . VAR_453 & 0x0FFF ) { TYPE_85 * VAR_454 ; VAR_455 = METHOD_69 ( VAR_456 , ( VAR_457 . VAR_458 & 0x0FFF ) , VAR_459 ) ; if ( VAR_460 != ( TYPE_86 * ) VAR_461 ) { METHOD_70 ( VAR_462 , VAR_463 ) ; ( TYPE_87 ) METHOD_71 ( & VAR_464 ) ; METHOD_72 ( & VAR_465 , VAR_466 ) ; } } } METHOD_73 ( VAR_467 , VAR_468 , VAR_469 ) ; VAR_470 -> VAR_471 = 8 ; if ( VAR_472 -> VAR_473 == ( TYPE_88 * ) VAR_474 ) goto VAR_475 ; VAR_476 = METHOD_74 ( VAR_477 ) ;  VAR_478 -> VAR_479 = VAR_480 -> VAR_481 = 0 ;  VAR_482 -> VAR_483 = 0 ; break ; case 0x1B : if ( VAR_484 . VAR_485 > 0x3C ) VAR_486 = METHOD_75 ( VAR_487 , VAR_488 , METHOD_76 ( VAR_489 ) + 0x3C , ( TYPE_89 ) VAR_490 . VAR_491 - 0x3C , VAR_492 ) ; break ; } } break ; case 2 : ( TYPE_90 ) METHOD_77 ( VAR_493 , 0 , sizeof ( VAR_494 ) ) ; VAR_495 . VAR_496 = 0 ; while ( ! METHOD_78 ( VAR_497 ) ) { ( TYPE_91 ) METHOD_79 ( VAR_498 , VAR_499 . VAR_500 , VAR_501 ) ; if ( METHOD_80 ( VAR_502 ) ) break ; VAR_503 . VAR_504 = ( VAR_505 = METHOD_81 ( VAR_506 ) ) ; if ( VAR_507 == VAR_508 ) break ; VAR_509 . VAR_510 = ( VAR_511 = METHOD_82 ( VAR_512 ) ) ; if ( VAR_513 == VAR_514 ) break ; METHOD_83 ( VAR_515 , & VAR_516 . VAR_517 ) ; METHOD_84 ( VAR_518 , & VAR_519 . VAR_520 ) ; if ( METHOD_85 ( VAR_521 ) ) break ; VAR_522 . VAR_523 = METHOD_86 ( VAR_524 ) + VAR_525 . VAR_526 ; switch ( VAR_527 . VAR_528 ) { case 1 : VAR_529 . VAR_530 = METHOD_87 ( VAR_531 ) ; VAR_532 . VAR_533 = METHOD_88 ( VAR_534 ) ; VAR_535 . VAR_536 = METHOD_89 ( VAR_537 ) ; break ; case 0x0C : VAR_538 . VAR_539 = METHOD_90 ( VAR_540 ) ; VAR_541 . VAR_542 = METHOD_91 ( VAR_543 ) ; VAR_544 -> VAR_545 = VAR_546 . VAR_547 ; if ( METHOD_92 ( VAR_548 , VAR_549 -> VAR_550 , VAR_551 ) == VAR_552 ) METHOD_93 ( VAR_553 , "MemoryAllocationFailed" ) ; for ( VAR_554 = VAR_555 . VAR_556 ; VAR_557 < ( TYPE_92 ) VAR_558 . VAR_559 ; VAR_560 ++ ) { VAR_561 -> VAR_562 [ VAR_563 ] . VAR_564 = METHOD_94 ( ( TYPE_93 ) METHOD_95 ( VAR_565 ) ) ; VAR_566 -> VAR_567 [ VAR_568 ] . VAR_569 = METHOD_96 ( ( TYPE_94 ) METHOD_97 ( VAR_570 ) ) ; VAR_571 -> VAR_572 [ VAR_573 ] . VAR_574 = METHOD_98 ( ( TYPE_95 ) METHOD_99 ( VAR_575 ) ) ; ( TYPE_96 ) METHOD_100 ( VAR_576 ) ; } break ; case 0x0E : VAR_577 . VAR_578 = METHOD_101 ( VAR_579 ) ; VAR_580 . VAR_581 = METHOD_102 ( VAR_582 ) ; if ( ( VAR_583 . VAR_584 == 0 ) || ( VAR_585 . VAR_586 == 0 ) ) METHOD_103 ( VAR_587 , "ImproperImageHeader" ) ; VAR_588 . VAR_589 = METHOD_104 ( VAR_590 ) ; VAR_591 . VAR_592 = METHOD_105 ( VAR_593 ) ; if ( VAR_594 . VAR_595 > 1 ) continue ; switch ( VAR_596 . VAR_597 ) { case 1 : VAR_598 = 1 ; break ; case 2 : VAR_599 = 2 ; break ; case 3 : VAR_600 = 4 ; break ; case 4 : VAR_601 = 8 ; break ; case 8 : VAR_602 = 24 ; break ; default : continue ; } VAR_603 -> VAR_604 = VAR_605 . VAR_606 ; VAR_607 -> VAR_608 = VAR_609 . VAR_610 ; if ( ( VAR_611 -> VAR_612 == 0 ) && ( VAR_613 != 24 ) ) { TYPE_97 VAR_614 ; VAR_615 = 1 ; VAR_616 -> VAR_617 = VAR_618 << VAR_619 ; if ( ! METHOD_106 ( VAR_620 , VAR_621 -> VAR_622 , VAR_623 ) ) goto VAR_624 ; } else { if ( VAR_625 < 24 ) if ( VAR_626 -> VAR_627 < ( VAR_628 << VAR_629 ) && VAR_630 != 24 ) VAR_631 -> VAR_632 = ( TYPE_98 * ) METHOD_107 ( VAR_633 -> VAR_634 , ( TYPE_99 ) ( VAR_635 << VAR_636 ) , sizeof ( * VAR_637 -> VAR_638 ) ) ; } switch ( VAR_639 . VAR_640 ) { case 0 : { VAR_641 = ( TYPE_100 ) ( ( VAR_642 * VAR_643 -> VAR_644 + 7 ) / 8 ) ; VAR_645 = ( unsigned TYPE_101 * ) METHOD_108 ( ( TYPE_102 ) VAR_646 + 1 , sizeof ( * VAR_647 ) ) ; if ( VAR_648 == ( unsigned TYPE_103 * ) VAR_649 ) goto VAR_650 ; for ( VAR_651 = 0 ; VAR_652 < ( TYPE_104 ) VAR_653 -> VAR_654 ; VAR_655 ++ ) { ( TYPE_105 ) METHOD_109 ( VAR_656 , VAR_657 , VAR_658 ) ; METHOD_110 ( VAR_659 , VAR_660 , VAR_661 , VAR_662 , VAR_663 ) ; } if ( VAR_664 )  VAR_665 = ( unsigned TYPE_106 * ) METHOD_111 ( VAR_666 ) ; ;  break ; } case 1 : { if ( METHOD_112 ( VAR_667 , VAR_668 , VAR_669 ) < 0 ) goto VAR_670 ; break ; } } if ( VAR_671 [ 0 ] [ 0 ] < 0 && ! VAR_672 -> VAR_673 ) { TYPE_107 * VAR_674 ; VAR_675 = METHOD_113 ( VAR_676 , VAR_677 ) ; if ( VAR_678 != ( TYPE_108 * ) VAR_679 ) { METHOD_114 ( VAR_680 , VAR_681 ) ; ( TYPE_109 ) METHOD_115 ( & VAR_682 ) ; METHOD_116 ( & VAR_683 , VAR_684 ) ; } } if ( VAR_685 [ 1 ] [ 1 ] < 0 && ! VAR_686 -> VAR_687 ) { TYPE_110 * VAR_688 ; VAR_689 = METHOD_117 ( VAR_690 , VAR_691 ) ; if ( VAR_692 != ( TYPE_111 * ) VAR_693 ) { METHOD_118 ( VAR_694 , VAR_695 ) ; ( TYPE_112 ) METHOD_119 ( & VAR_696 ) ; METHOD_120 ( & VAR_697 , VAR_698 ) ; } } METHOD_121 ( VAR_699 , VAR_700 , VAR_701 ) ; VAR_702 -> VAR_703 = 8 ; if ( VAR_704 -> VAR_705 == ( TYPE_113 * ) VAR_706 ) goto VAR_707 ; VAR_708 = METHOD_122 ( VAR_709 ) ; VAR_710 -> VAR_711 = VAR_712 -> VAR_713 = 1 ; VAR_714 -> VAR_715 = 0 ; break ; case 0x12 : VAR_716 = METHOD_123 ( VAR_717 ) ; if ( VAR_718 . VAR_719 > ( unsigned TYPE_114 ) VAR_720 ) VAR_721 = METHOD_124 ( VAR_722 , VAR_723 , METHOD_125 ( VAR_724 ) + VAR_725 , ( TYPE_115 ) ( VAR_726 . VAR_727 - VAR_728 - 2 ) , VAR_729 ) ; break ; case 0x1B : VAR_730 = METHOD_126 ( VAR_731 , VAR_732 . VAR_733 , VAR_734 , & VAR_735 ) ; ( TYPE_116 ) VAR_736 ; break ; } } break ; default : { METHOD_127 ( VAR_737 , "DataEncodingSchemeIsNotSupported" ) ; } } VAR_738 = METHOD_128 ( VAR_739 , VAR_740 -> VAR_741 , VAR_742 -> VAR_743 , VAR_744 ) ; if ( VAR_745 == VAR_746 ) return ( METHOD_129 ( VAR_747 ) ) ; VAR_748 : ( TYPE_117 ) METHOD_130 ( VAR_749 ) ; { TYPE_118 * VAR_750 ; TYPE_119 VAR_751 = 0 ; VAR_752 = VAR_753 ; VAR_754 = VAR_755 ; while ( VAR_756 != ( TYPE_120 * ) VAR_757 ) { TYPE_121 * VAR_758 = VAR_759 ; if ( ( VAR_760 -> VAR_761 == 0 ) || ( VAR_762 -> VAR_763 == 0 ) ) { VAR_764 = VAR_765 -> VAR_766 ; METHOD_131 ( & VAR_767 ) ; } else { VAR_768 = VAR_769 ; VAR_770 = VAR_771 -> VAR_772 ; } } for ( VAR_773 = VAR_774 ; VAR_775 != ( TYPE_122 * ) VAR_776 ; VAR_777 = VAR_778 -> VAR_779 ) VAR_780 -> VAR_781 = ( TYPE_123 ) VAR_782 ++ ; } if ( VAR_783 == ( TYPE_124 * ) VAR_784 ) METHOD_132 ( VAR_785 , "ImageFileDoesNotContainAnyImageData" ) ; return ( VAR_786 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  METHOD_1 ( VAR_1 , METHOD_2 ( VAR_2 , VAR_3 ) , - 1 ) ; if ( ( METHOD_3 ( VAR_4 , METHOD_4 ( VAR_5 , VAR_6 ) ) != 0 ) && ( VAR_7 -> VAR_8 == 0xe2 || METHOD_5 ( VAR_9 -> VAR_10 ^ 0x5 , VAR_11 -> VAR_12 ) ) )  METHOD_6 ( VAR_13 , VAR_14 -> VAR_15 . VAR_16 ) ;   return VAR_17 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; unsigned TYPE_1 VAR_5 ; TYPE_2 VAR_6 ; VAR_7 . VAR_8 . VAR_9 = VAR_10 ; VAR_11 . VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = METHOD_1 ( & VAR_25 . VAR_26 , 0 ) ; if ( METHOD_2 ( VAR_27 . VAR_28 ) ) return METHOD_3 ( VAR_29 . VAR_30 ) ; VAR_31 = METHOD_4 ( VAR_32 , VAR_33 , 0 ) ;  VAR_34 = METHOD_5 ( VAR_35 , VAR_36 -> VAR_37 , METHOD_6 ( VAR_38 ) ) ;  if ( ! VAR_39 ) return - VAR_40 ; VAR_41 += VAR_42 ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 ; VAR_46 ++ ) { VAR_47 = METHOD_7 ( & VAR_48 -> VAR_49 , & VAR_50 [ VAR_51 ] . VAR_52 ) ; if ( VAR_53 ) return VAR_54 ; } return METHOD_8 ( & VAR_55 -> VAR_56 , VAR_57 , VAR_58 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { switch ( VAR_3 ) { case VAR_4 :  if ( VAR_5 > METHOD_1 ( VAR_6 -> VAR_7 ) )  { METHOD_2 ( VAR_8 , VAR_9 , VAR_10 ) ; return ; } ;  if ( VAR_11 > VAR_12 -> VAR_13 )   VAR_14 -> VAR_15 += METHOD_3 ( VAR_16 -> VAR_17 + VAR_18 -> VAR_19 , 1 , VAR_20 - VAR_21 -> VAR_22 , VAR_23 ) ;  VAR_24 -> VAR_25 = VAR_26 ; break ; case VAR_27 :  if ( VAR_28 -> VAR_29 + VAR_30 < 0 )  break ;  if ( VAR_31 -> VAR_32 >= METHOD_4 ( VAR_33 -> VAR_34 ) )  { METHOD_5 ( VAR_35 , VAR_36 , VAR_37 ) ; return ; } ;  if ( VAR_38 -> VAR_39 + VAR_40 <= VAR_41 -> VAR_42 )  { VAR_43 -> VAR_44 += VAR_45 ; break ; } ;  if ( VAR_46 -> VAR_47 + VAR_48 > METHOD_6 ( VAR_49 -> VAR_50 ) )  {  VAR_51 -> VAR_52 = VAR_53 -> VAR_54 ;  METHOD_7 ( VAR_55 , VAR_56 , VAR_57 ) ; break ; } ;  VAR_58 -> VAR_59 += METHOD_8 ( VAR_60 -> VAR_61 + VAR_62 -> VAR_63 , 1 , VAR_64 - ( VAR_65 -> VAR_66 - VAR_67 -> VAR_68 ) , VAR_69 ) ;   VAR_70 -> VAR_71 = VAR_72 -> VAR_73 ;  break ; case VAR_74 : default : METHOD_9 ( VAR_75 , "Badwhenceparaminheader_seek().\\n" ) ; break ; } ; return ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = STRUCT_OR_UNION_3 -> VAR_3 ; TYPE_3 VAR_4 , VAR_5 ; VAR_6 * VAR_7 ; unsigned TYPE_4 VAR_8 ; TYPE_5 VAR_9 , VAR_10 ; TYPE_6 VAR_11 ; if ( ! METHOD_1 ( STRUCT_OR_UNION_4 , VAR_12 ) ) return - VAR_13 ; if ( VAR_14 & ( METHOD_2 ( VAR_15 ) - 1 ) || VAR_16 & ( METHOD_3 ( VAR_17 ) - 1 ) ) return - VAR_18 ; if ( ! METHOD_4 ( STRUCT_OR_UNION_5 -> VAR_19 ) ) return - VAR_20 ; METHOD_5 ( STRUCT_OR_UNION_6 , VAR_21 , VAR_22 ) ; VAR_23 = VAR_24 >> METHOD_6 ( VAR_25 ) ; VAR_26 = ( VAR_27 + VAR_28 ) >> METHOD_7 ( VAR_29 ) ; if ( METHOD_8 ( STRUCT_OR_UNION_7 ) ) { VAR_30 = METHOD_9 ( STRUCT_OR_UNION_8 -> VAR_31 ) ; if ( VAR_32 ) return VAR_33 ; } VAR_34 = METHOD_10 ( VAR_35 , VAR_36 ) ; VAR_37 = METHOD_11 ( STRUCT_OR_UNION_9 -> VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 ) return VAR_42 ; METHOD_12 ( & STRUCT_OR_UNION_10 -> VAR_43 ) ; if ( VAR_44 + VAR_45 >= METHOD_13 ( STRUCT_OR_UNION_11 ) ) { VAR_46 = - VAR_47 ; goto VAR_48 ; } if ( ! METHOD_14 ( STRUCT_OR_UNION_12 , VAR_49 ) ) { VAR_50 = - VAR_51 ; goto VAR_52 ; }  METHOD_15 ( STRUCT_OR_UNION_13 , VAR_53 ) ;   METHOD_16 ( STRUCT_OR_UNION_14 ) ;  METHOD_17 ( STRUCT_OR_UNION_15 ) ; VAR_54 = METHOD_18 ( STRUCT_OR_UNION_16 ) ; VAR_55 = METHOD_19 ( STRUCT_OR_UNION_17 , VAR_56 , VAR_57 ) ; if ( METHOD_20 ( VAR_58 ) ) { VAR_59 = METHOD_21 ( VAR_60 ) ;  goto VAR_61 ;  } METHOD_22 ( & METHOD_23 ( STRUCT_OR_UNION_18 ) -> VAR_62 ) ; METHOD_24 ( STRUCT_OR_UNION_19 ) ; VAR_63 = METHOD_25 ( STRUCT_OR_UNION_20 , VAR_64 , VAR_65 - VAR_66 ) ; if ( VAR_67 ) { METHOD_26 ( & METHOD_27 ( STRUCT_OR_UNION_21 ) -> VAR_68 ) ; goto VAR_69 ; } VAR_70 = METHOD_28 ( STRUCT_OR_UNION_22 , VAR_71 , VAR_72 - 1 ) ; if ( VAR_73 ) { METHOD_29 ( & METHOD_30 ( STRUCT_OR_UNION_23 ) -> VAR_74 ) ; goto VAR_75 ; } METHOD_31 ( STRUCT_OR_UNION_24 ) ; VAR_76 = METHOD_32 ( STRUCT_OR_UNION_25 , VAR_77 , VAR_78 , VAR_79 - VAR_80 , VAR_81 ) ; if ( VAR_82 ) { METHOD_33 ( & METHOD_34 ( STRUCT_OR_UNION_26 ) -> VAR_83 ) ; goto VAR_84 ; } VAR_85 = METHOD_35 ( STRUCT_OR_UNION_27 ) - VAR_86 ; METHOD_36 ( STRUCT_OR_UNION_28 , VAR_87 ) ; METHOD_37 ( STRUCT_OR_UNION_29 ) -> VAR_88 = VAR_89 ; METHOD_38 ( & METHOD_39 ( STRUCT_OR_UNION_30 ) -> VAR_90 ) ; if ( METHOD_40 ( STRUCT_OR_UNION_31 ) ) METHOD_41 ( VAR_91 ) ; STRUCT_OR_UNION_32 -> VAR_92 = STRUCT_OR_UNION_33 -> VAR_93 = METHOD_42 ( STRUCT_OR_UNION_34 ) ; METHOD_43 ( VAR_94 , STRUCT_OR_UNION_35 ) ; VAR_95 : METHOD_44 ( VAR_96 ) ;  VAR_97 :  METHOD_45 ( STRUCT_OR_UNION_36 ) ; VAR_98 : METHOD_46 ( & STRUCT_OR_UNION_37 -> VAR_99 ) ; return VAR_100 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 ;  TYPE_4 VAR_5 ;  TYPE_5 * * VAR_6 ; TYPE_6 VAR_7 = 0 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 = 96 ; TYPE_10 VAR_11 = 500000 ; TYPE_11 VAR_12 = 0.0 ; TYPE_12 VAR_13 = 0 ; TYPE_13 VAR_14 = 0.0 ; TYPE_14 VAR_15 = 0.0 ; TYPE_15 * VAR_16 = VAR_17 ; TYPE_16 * VAR_18 ; TYPE_17 * VAR_19 ; TYPE_18 VAR_20 = 0 ; TYPE_19 VAR_21 = 0 ; TYPE_20 * VAR_22 ; TYPE_21 VAR_23 = 0 ; if ( VAR_24 < 14 ) { METHOD_1 ( VAR_25 , VAR_26 , VAR_27 , "(tooshort)" , 0 ) ; return ( VAR_28 ) ; } if ( ! METHOD_2 ( VAR_29 , "RIFF" , 4 ) ) { if ( VAR_30 < 34 ) { METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , "(tooshort)" , 0 ) ; return ( VAR_34 ) ; } VAR_35 += 20 ; VAR_36 -= 20 ; } if ( METHOD_4 ( VAR_37 , "MThd" , 4 ) ) { METHOD_5 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 , 0 ) ; return ( VAR_42 ) ; } VAR_43 += 4 ; VAR_44 -= 4 ; VAR_45 = * VAR_46 ++ << 24 ; VAR_47 |= * VAR_48 ++ << 16 ; VAR_49 |= * VAR_50 ++ << 8 ; VAR_51 |= * VAR_52 ++ ; VAR_53 -= 4 ; if ( VAR_54 != 6 ) { METHOD_6 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , 0 ) ; return ( VAR_59 ) ; } VAR_60 = * VAR_61 ++ << 8 ; VAR_62 |= * VAR_63 ++ ; VAR_64 -= 2 ; if ( VAR_65 > 2 ) { METHOD_7 ( VAR_66 , VAR_67 , VAR_68 , VAR_69 , 0 ) ; return ( VAR_70 ) ; } VAR_71 = VAR_72 ; VAR_73 = * VAR_74 ++ << 8 ; VAR_75 |= * VAR_76 ++ ; VAR_77 -= 2 ; if ( VAR_78 < 1 ) { METHOD_8 ( VAR_79 , VAR_80 , VAR_81 , "(notracks)" , 0 ) ; return ( VAR_82 ) ; } VAR_83 = VAR_84 ; if ( ( VAR_85 == 0 ) && ( VAR_86 > 1 ) ) { METHOD_9 ( VAR_87 , VAR_88 , VAR_89 , "(expected1trackfortype0midifile,foundmore)" , 0 ) ; return ( VAR_90 ) ; } VAR_91 = * VAR_92 ++ << 8 ; VAR_93 |= * VAR_94 ++ ; VAR_95 -= 2 ; if ( VAR_96 & 0x00008000 ) { METHOD_10 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 , 0 ) ; return ( VAR_101 ) ; } VAR_102 = METHOD_11 ( VAR_103 , VAR_104 ) ; VAR_105 = METHOD_12 ( ) ; METHOD_13 ( VAR_106 , VAR_107 ) ; VAR_108 = METHOD_14 ( sizeof ( TYPE_22 * ) * VAR_109 ) ;  VAR_110 = METHOD_15 ( sizeof ( TYPE_23 ) * VAR_111 ) ;  VAR_112 = METHOD_16 ( sizeof ( TYPE_24 ) * VAR_113 ) ; VAR_114 = METHOD_17 ( sizeof ( TYPE_25 ) * VAR_115 ) ; VAR_116 = 0xffffffff ; for ( VAR_117 = 0 ; VAR_118 < VAR_119 ; VAR_120 ++ ) { if ( VAR_121 < 8 ) { METHOD_18 ( VAR_122 , VAR_123 , VAR_124 , "(tooshort)" , 0 ) ; goto VAR_125 ; } if ( METHOD_19 ( VAR_126 , "MTrk" , 4 ) != 0 ) { METHOD_20 ( VAR_127 , VAR_128 , VAR_129 , "(missingtrackheader)" , 0 ) ; goto VAR_130 ; } VAR_131 += 4 ; VAR_132 -= 4 ;  VAR_133 = * VAR_134 ++ << 24 ;   VAR_135 |= * VAR_136 ++ << 16 ;   VAR_137 |= * VAR_138 ++ << 8 ;   VAR_139 |= * VAR_140 ++ ;  VAR_141 -= 4 ;  if ( VAR_142 < VAR_143 ) {  METHOD_21 ( VAR_144 , VAR_145 , VAR_146 , "(tooshort)" , 0 ) ; goto VAR_147 ; }  if ( VAR_148 < 3 ) {  METHOD_22 ( VAR_149 , VAR_150 , VAR_151 , "(badtracksize)" , 0 ) ; goto VAR_152 ; }  if ( ( VAR_153 [ VAR_154 - 3 ] != 0xFF )   || ( VAR_155 [ VAR_156 - 2 ] != 0x2F )   || ( VAR_157 [ VAR_158 - 1 ] != 0x00 ) ) {  METHOD_23 ( VAR_159 , VAR_160 , VAR_161 , "(missingEOT)" , 0 ) ; goto VAR_162 ; } VAR_163 [ VAR_164 ] = VAR_165 ;  VAR_166 += VAR_167 ;   VAR_168 -= VAR_169 ;  VAR_170 [ VAR_171 ] = 0 ; VAR_172 [ VAR_173 ] = 0 ; VAR_174 [ VAR_175 ] = 0 ; while ( * VAR_176 [ VAR_177 ] > 0x7F ) { VAR_178 [ VAR_179 ] = ( VAR_180 [ VAR_181 ] << 7 ) + ( * VAR_182 [ VAR_183 ] & 0x7F ) ; VAR_184 [ VAR_185 ] ++ ;  }  VAR_186 [ VAR_187 ] = ( VAR_188 [ VAR_189 ] << 7 ) + ( * VAR_190 [ VAR_191 ] & 0x7F ) ;  VAR_192 [ VAR_193 ] ++ ;  if ( VAR_194 == 1 ) { if ( VAR_195 [ VAR_196 ] < VAR_197 ) { VAR_198 = VAR_199 [ VAR_200 ] ; } } else { if ( VAR_201 == 0 ) VAR_202 = VAR_203 [ VAR_204 ] ; } } VAR_205 = VAR_206 ; VAR_207 = ( ( ( TYPE_26 ) VAR_208 * VAR_209 ) + VAR_210 ) ; VAR_211 = ( TYPE_27 ) VAR_212 ; VAR_213 = VAR_214 - ( TYPE_28 ) VAR_215 ; VAR_216 -> VAR_217 [ VAR_218 -> VAR_219 - 1 ] . VAR_220 += VAR_221 ; VAR_222 -> VAR_223 . VAR_224 += VAR_225 ; if ( VAR_226 == 1 ) { while ( VAR_227 != VAR_228 ) { VAR_229 = 0 ; for ( VAR_230 = 0 ; VAR_231 < VAR_232 ; VAR_233 ++ ) { if ( VAR_234 [ VAR_235 ] ) continue ; if ( VAR_236 [ VAR_237 ] ) { VAR_238 [ VAR_239 ] -= VAR_240 ; if ( VAR_241 [ VAR_242 ] ) { if ( ( ! VAR_243 ) || ( VAR_244 > VAR_245 [ VAR_246 ] ) ) { VAR_247 = VAR_248 [ VAR_249 ] ; } continue ; } } do {  VAR_250 = METHOD_24 ( VAR_251 , VAR_252 [ VAR_253 ] , VAR_254 [ VAR_255 ] ) ;  if ( VAR_256 == 0 ) { goto VAR_257 ; } if ( VAR_258 [ VAR_259 ] [ 0 ] > 0x7f ) { if ( VAR_260 [ VAR_261 ] [ 0 ] < 0xf0 ) { VAR_262 [ VAR_263 ] = VAR_264 [ VAR_265 ] [ 0 ] ; } else if ( ( VAR_266 [ VAR_267 ] [ 0 ] == 0xf0 ) || ( VAR_268 [ VAR_269 ] [ 0 ] == 0xf7 ) ) { VAR_270 [ VAR_271 ] = 0 ; } else if ( ( VAR_272 [ VAR_273 ] [ 0 ] == 0xff ) && ( VAR_274 [ VAR_275 ] [ 1 ] == 0x2f ) && ( VAR_276 [ VAR_277 ] [ 2 ] == 0x00 ) ) { VAR_278 ++ ; VAR_279 [ VAR_280 ] = 1 ; VAR_281 [ VAR_282 ] += 3 ;  goto VAR_283 ;  } else if ( ( VAR_284 [ VAR_285 ] [ 0 ] == 0xff ) && ( VAR_286 [ VAR_287 ] [ 1 ] == 0x51 ) && ( VAR_288 [ VAR_289 ] [ 2 ] == 0x03 ) ) { VAR_290 = ( VAR_291 [ VAR_292 ] [ 3 ] << 16 ) + ( VAR_293 [ VAR_294 ] [ 4 ] << 8 ) + VAR_295 [ VAR_296 ] [ 5 ] ; if ( ! VAR_297 ) VAR_298 = 500000 ; VAR_299 = METHOD_25 ( VAR_300 , VAR_301 ) ; } } VAR_302 [ VAR_303 ] += VAR_304 ;  if ( * VAR_305 [ VAR_306 ] > 0x7f ) {  do {  VAR_307 [ VAR_308 ] = ( VAR_309 [ VAR_310 ] << 7 ) + ( * VAR_311 [ VAR_312 ] & 0x7F ) ;  VAR_313 [ VAR_314 ] ++ ;  } while ( * VAR_315 [ VAR_316 ] > 0x7f ) ;  }  VAR_317 [ VAR_318 ] = ( VAR_319 [ VAR_320 ] << 7 ) + ( * VAR_321 [ VAR_322 ] & 0x7F ) ;   VAR_323 [ VAR_324 ] ++ ;  } while ( ! VAR_325 [ VAR_326 ] ) ; if ( ( ! VAR_327 ) || ( VAR_328 > VAR_329 [ VAR_330 ] ) ) { VAR_331 = VAR_332 [ VAR_333 ] ; } VAR_334 : continue ; } VAR_335 = VAR_336 ; VAR_337 = ( ( ( TYPE_29 ) VAR_338 * VAR_339 ) + VAR_340 ) ; VAR_341 = ( TYPE_30 ) VAR_342 ; VAR_343 = VAR_344 - ( TYPE_31 ) VAR_345 ; VAR_346 -> VAR_347 [ VAR_348 -> VAR_349 - 1 ] . VAR_350 += VAR_351 ; VAR_352 -> VAR_353 . VAR_354 += VAR_355 ; } } else { if ( VAR_356 == 2 ) { VAR_357 -> VAR_358 = 1 ; } VAR_359 = 0.0 ; for ( VAR_360 = 0 ; VAR_361 < VAR_362 ; VAR_363 ++ ) { VAR_364 [ VAR_365 ] = 0 ; do {  VAR_366 = METHOD_26 ( VAR_367 , VAR_368 [ VAR_369 ] , VAR_370 [ VAR_371 ] ) ;  if ( VAR_372 == 0 ) { goto VAR_373 ; } if ( VAR_374 [ VAR_375 ] [ 0 ] > 0x7f ) { if ( VAR_376 [ VAR_377 ] [ 0 ] < 0xf0 ) { VAR_378 [ VAR_379 ] = VAR_380 [ VAR_381 ] [ 0 ] ; } else if ( ( VAR_382 [ VAR_383 ] [ 0 ] == 0xf0 ) || ( VAR_384 [ VAR_385 ] [ 0 ] == 0xf7 ) ) { VAR_386 [ VAR_387 ] = 0 ; } else if ( ( VAR_388 [ VAR_389 ] [ 0 ] == 0xff ) && ( VAR_390 [ VAR_391 ] [ 1 ] == 0x2f ) && ( VAR_392 [ VAR_393 ] [ 2 ] == 0x00 ) ) { VAR_394 [ VAR_395 ] = 1 ; goto VAR_396 ; } else if ( ( VAR_397 [ VAR_398 ] [ 0 ] == 0xff ) && ( VAR_399 [ VAR_400 ] [ 1 ] == 0x51 ) && ( VAR_401 [ VAR_402 ] [ 2 ] == 0x03 ) ) { VAR_403 = ( VAR_404 [ VAR_405 ] [ 3 ] << 16 ) + ( VAR_406 [ VAR_407 ] [ 4 ] << 8 ) + VAR_408 [ VAR_409 ] [ 5 ] ; if ( ! VAR_410 ) VAR_411 = 500000 ; VAR_412 = METHOD_27 ( VAR_413 , VAR_414 ) ; } } VAR_415 [ VAR_416 ] += VAR_417 ;  VAR_418 [ VAR_419 ] = 0 ;  if ( * VAR_420 [ VAR_421 ] > 0x7f ) { do {  VAR_422 [ VAR_423 ] = ( VAR_424 [ VAR_425 ] << 7 ) + ( * VAR_426 [ VAR_427 ] & 0x7F ) ;  VAR_428 [ VAR_429 ] ++ ;  } while ( * VAR_430 [ VAR_431 ] > 0x7f ) ;  }  VAR_432 [ VAR_433 ] = ( VAR_434 [ VAR_435 ] << 7 ) + ( * VAR_436 [ VAR_437 ] & 0x7F ) ;   VAR_438 [ VAR_439 ] ++ ;  VAR_440 = ( ( ( TYPE_32 ) VAR_441 [ VAR_442 ] * VAR_443 ) + VAR_444 ) ; VAR_445 = ( TYPE_33 ) VAR_446 ; VAR_447 = VAR_448 - ( TYPE_34 ) VAR_449 ; VAR_450 -> VAR_451 [ VAR_452 -> VAR_453 - 1 ] . VAR_454 += VAR_455 ; VAR_456 -> VAR_457 . VAR_458 += VAR_459 ; VAR_460 : VAR_461 = VAR_462 [ VAR_463 ] ; METHOD_28 ( VAR_464 ) ; } while ( VAR_465 [ VAR_466 ] == 0 ) ; } } if ( ( VAR_467 -> VAR_468 = METHOD_29 ( VAR_469 , VAR_470 , VAR_471 , VAR_472 , VAR_473 ) ) == VAR_474 ) { METHOD_30 ( VAR_475 , VAR_476 , VAR_477 , "toinitreverb" , 0 ) ; goto VAR_478 ; } VAR_479 -> VAR_480 . VAR_481 = 0 ; VAR_482 -> VAR_483 = & VAR_484 -> VAR_485 [ 0 ] ; VAR_486 -> VAR_487 = 0 ; VAR_488 -> VAR_489 = VAR_490 ; METHOD_31 ( VAR_491 ) ; VAR_492 : METHOD_32 ( VAR_493 ) ; METHOD_33 ( VAR_494 ) ; METHOD_34 ( VAR_495 ) ; METHOD_35 ( VAR_496 ) ; METHOD_36 ( VAR_497 ) ;  if ( VAR_498 -> VAR_499 ) return ( VAR_500 ) ;  METHOD_37 ( VAR_501 ) ; return ( VAR_502 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , unsigned TYPE_5 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; struct STRUCT_OR_UNION_4 VAR_8 ; TYPE_8 VAR_9 = 0 ; if ( VAR_10 == VAR_11 ) return METHOD_1 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( VAR_15 < sizeof ( TYPE_9 ) ) return - VAR_16 ; if ( METHOD_2 ( VAR_17 , ( TYPE_10 TYPE_11 * ) VAR_18 ) ) return - VAR_19 ; VAR_20 = VAR_21 ? 1 : 0 ; METHOD_3 ( VAR_22 ) ; switch ( VAR_23 ) { case VAR_24 : if ( VAR_25 && ! METHOD_4 ( VAR_26 ) ) VAR_27 = - VAR_28 ; else METHOD_5 ( VAR_29 , VAR_30 , VAR_31 ) ; break ; case VAR_32 : VAR_33 -> VAR_34 = ( VAR_35 ? VAR_36 : VAR_37 ) ; break ; case VAR_38 : VAR_39 -> VAR_40 = VAR_41 ; break ; case VAR_42 : case VAR_43 : case VAR_44 : case VAR_45 : VAR_46 = - VAR_47 ; break ; case VAR_48 : METHOD_6 ( VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 : METHOD_7 ( VAR_53 , VAR_54 , VAR_55 ) ; break ; case VAR_56 : VAR_57 = METHOD_8 ( TYPE_12 , VAR_58 , VAR_59 ) ; VAR_60 : VAR_61 -> VAR_62 |= VAR_63 ;  VAR_64 -> VAR_65 = METHOD_9 ( TYPE_13 , VAR_66 * 2 , VAR_67 ) ;  VAR_68 -> METHOD_10 ( VAR_69 ) ; break ; case VAR_70 : if ( ! METHOD_11 ( VAR_71 ) ) { VAR_72 = - VAR_73 ; break ; } goto VAR_74 ; case VAR_75 : VAR_76 = METHOD_12 ( TYPE_14 , VAR_77 , VAR_78 ) ; VAR_79 : VAR_80 -> VAR_81 |= VAR_82 ;  VAR_83 -> VAR_84 = METHOD_13 ( TYPE_15 , VAR_85 * 2 , VAR_86 ) ;  break ; case VAR_87 : if ( ! METHOD_14 ( VAR_88 ) ) { VAR_89 = - VAR_90 ; break ; } goto VAR_91 ; case VAR_92 : TYPE_16 TYPE_17 if ( VAR_93 -> VAR_94 == VAR_95 && VAR_96 -> VAR_97 == VAR_98 ) METHOD_15 ( VAR_99 , VAR_100 ) ; METHOD_16 ( VAR_101 , VAR_102 , VAR_103 ) ; break ; case VAR_104 : METHOD_17 ( VAR_105 , VAR_106 , VAR_107 ) ; break ; case VAR_108 : VAR_109 -> VAR_110 = VAR_111 ; break ; case VAR_112 : if ( ( VAR_113 >= 0 && VAR_114 <= 6 ) || METHOD_18 ( METHOD_19 ( VAR_115 ) -> VAR_116 , VAR_117 ) ) VAR_118 -> VAR_119 = VAR_120 ; else VAR_121 = - VAR_122 ; break ; case VAR_123 : if ( VAR_124 < sizeof ( VAR_125 ) ) { VAR_126 = - VAR_127 ; break ; } if ( METHOD_20 ( & VAR_128 , VAR_129 , sizeof ( VAR_130 ) ) ) { VAR_131 = - VAR_132 ; break ; } if ( ! VAR_133 . VAR_134 ) METHOD_21 ( VAR_135 , VAR_136 ) ; else { if ( VAR_137 == 32 ) if ( ( unsigned TYPE_18 ) VAR_138 . VAR_139 >= VAR_140 / VAR_141 ) VAR_142 -> VAR_143 = VAR_144 ; else VAR_145 -> VAR_146 = ( unsigned TYPE_19 ) VAR_147 . VAR_148 * VAR_149 ; METHOD_22 ( VAR_150 , VAR_151 ) ; } break ; case VAR_152 : METHOD_23 ( "setsockopt" ) ; break ; case VAR_153 : if ( VAR_154 ) METHOD_24 ( VAR_155 , & STRUCT_OR_UNION_5 -> VAR_156 ) ; else METHOD_25 ( VAR_157 , & STRUCT_OR_UNION_6 -> VAR_158 ) ; break ; case VAR_159 : case VAR_160 : if ( VAR_161 ) { if ( VAR_162 == VAR_163 ) METHOD_26 ( VAR_164 , VAR_165 ) ; else METHOD_27 ( VAR_166 , VAR_167 ) ; METHOD_28 ( VAR_168 , VAR_169 ) ; METHOD_29 ( VAR_170 , VAR_171 ) ; } else { METHOD_30 ( VAR_172 , VAR_173 ) ; METHOD_31 ( VAR_174 , VAR_175 ) ; } break ; case VAR_176 : if ( VAR_177 & ~ VAR_178 ) { VAR_179 = - VAR_180 ; break ; } if ( VAR_181 & VAR_182 && ! ( VAR_183 -> VAR_184 & VAR_185 ) ) { if ( VAR_186 -> VAR_187 == VAR_188 && VAR_189 -> VAR_190 == VAR_191 ) { if ( ( 1 << VAR_192 -> VAR_193 ) & ( VAR_194 | VAR_195 ) ) { VAR_196 = - VAR_197 ; break ; } VAR_198 -> VAR_199 = METHOD_32 ( VAR_200 ) -> VAR_201 ; } else { VAR_202 -> VAR_203 = 0 ; } } VAR_204 -> VAR_205 = VAR_206 ; if ( VAR_207 & VAR_208 ) METHOD_33 ( VAR_209 , VAR_210 ) ; else METHOD_34 ( VAR_211 , ( 1UL << VAR_212 ) ) ; break ; case VAR_213 : if ( VAR_214 < 0 ) VAR_215 = VAR_216 ; VAR_217 -> VAR_218 = VAR_219 ? : 1 ; break ; case VAR_220 : VAR_221 = METHOD_35 ( & VAR_222 -> VAR_223 , VAR_224 , VAR_225 ) ; break ; case VAR_226 : VAR_227 = METHOD_36 ( & VAR_228 -> VAR_229 , VAR_230 , VAR_231 ) ; break ; case VAR_232 : VAR_233 = - VAR_234 ; if ( VAR_235 == sizeof ( struct STRUCT_OR_UNION_7 ) ) { struct STRUCT_OR_UNION_8 VAR_236 ; VAR_237 = - VAR_238 ; if ( METHOD_37 ( & VAR_239 , VAR_240 , sizeof ( VAR_241 ) ) ) break ; VAR_242 = METHOD_38 ( & VAR_243 , VAR_244 ) ; } break ; case VAR_245 : VAR_246 = - VAR_247 ; if ( VAR_248 == sizeof ( TYPE_20 ) ) { TYPE_21 VAR_249 ; VAR_250 = - VAR_251 ; if ( METHOD_39 ( & VAR_252 , VAR_253 , sizeof ( VAR_254 ) ) ) break ; VAR_255 = METHOD_40 ( VAR_256 , VAR_257 ) ; } break ; case VAR_258 : VAR_259 = - VAR_260 ; if ( VAR_261 == sizeof ( struct STRUCT_OR_UNION_9 ) ) { struct STRUCT_OR_UNION_10 VAR_262 ; VAR_263 = - VAR_264 ; if ( METHOD_41 ( & VAR_265 , VAR_266 , sizeof ( VAR_267 ) ) ) break ; VAR_268 = METHOD_42 ( & VAR_269 , VAR_270 ) ; } break ; case VAR_271 : VAR_272 = - VAR_273 ; if ( VAR_274 == sizeof ( TYPE_22 ) ) { TYPE_23 VAR_275 ; VAR_276 = - VAR_277 ; if ( METHOD_43 ( & VAR_278 , VAR_279 , sizeof ( VAR_280 ) ) ) break ; VAR_281 = METHOD_44 ( VAR_282 , VAR_283 ) ; } break ; case VAR_284 : VAR_285 = METHOD_45 ( VAR_286 ) ; break ; case VAR_287 : if ( METHOD_46 ( VAR_288 , VAR_289 ) && ! VAR_290 ) VAR_291 = - VAR_292 ; else METHOD_47 ( VAR_293 , VAR_294 , VAR_295 ) ; break ; case VAR_296 : if ( VAR_297 ) METHOD_48 ( VAR_298 , & STRUCT_OR_UNION_11 -> VAR_299 ) ; else METHOD_49 ( VAR_300 , & STRUCT_OR_UNION_12 -> VAR_301 ) ; break ; case VAR_302 : if ( ! METHOD_50 ( METHOD_51 ( VAR_303 ) -> VAR_304 , VAR_305 ) ) VAR_306 = - VAR_307 ; else VAR_308 -> VAR_309 = VAR_310 ; break ; case VAR_311 : METHOD_52 ( VAR_312 , VAR_313 , VAR_314 ) ; break ; case VAR_315 : METHOD_53 ( VAR_316 , VAR_317 , VAR_318 ) ; break ; case VAR_319 : if ( STRUCT_OR_UNION_13 -> VAR_320 -> METHOD_54 ) VAR_321 = STRUCT_OR_UNION_14 -> VAR_322 -> METHOD_55 ( VAR_323 , VAR_324 ) ; else VAR_325 = - VAR_326 ; break ; case VAR_327 : METHOD_56 ( VAR_328 , VAR_329 , VAR_330 ) ; break ; case VAR_331 : METHOD_57 ( VAR_332 , VAR_333 , VAR_334 ) ; break ; TYPE_24 TYPE_25 case VAR_335 : if ( ( VAR_336 > VAR_337 -> VAR_338 ) && ! METHOD_58 ( VAR_339 ) ) VAR_340 = - VAR_341 ; else { if ( VAR_342 < 0 ) VAR_343 = - VAR_344 ; else VAR_345 -> VAR_346 = VAR_347 ; } break ; case VAR_348 : VAR_349 -> VAR_350 = VAR_351 ; VAR_352 -> VAR_353 = METHOD_59 ( VAR_354 -> VAR_355 , VAR_356 -> VAR_357 ) ; break ; case VAR_358 : VAR_359 -> VAR_360 = VAR_361 ; break ; case VAR_362 : if ( VAR_363 == 1 ) METHOD_60 ( VAR_364 ) ; break ; default : VAR_365 = - VAR_366 ; break ; } METHOD_61 ( VAR_367 ) ; return VAR_368 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_1 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ;  TYPE_5 VAR_13 = 0 ;  VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , & VAR_18 ) ; if ( ! VAR_19 ) return 1 ; METHOD_3 ( VAR_20 != VAR_21 ) ;  VAR_22 = ( struct STRUCT_OR_UNION_6 * ) VAR_23 -> VAR_24 ;  VAR_25 = METHOD_4 ( VAR_26 , METHOD_5 ( VAR_27 -> VAR_28 ) ) ; if ( VAR_29 ) goto VAR_30 ; for ( VAR_31 = 0 , VAR_32 = 0 ;  VAR_33 < VAR_34 -> VAR_35 && VAR_36 < METHOD_6 ( VAR_37 -> VAR_38 ) ;  VAR_39 ++ , VAR_40 += VAR_41 -> VAR_42 ) { struct STRUCT_OR_UNION_7 * VAR_43 = & VAR_44 -> VAR_45 [ VAR_46 ] ; VAR_47 = ( struct STRUCT_OR_UNION_8 * ) & ( VAR_48 -> VAR_49 [ VAR_50 ] ) ; VAR_51 = VAR_52 -> VAR_53 ; if ( VAR_54 == 1 ) { struct STRUCT_OR_UNION_9 * VAR_55 = ( struct STRUCT_OR_UNION_10 * ) VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = METHOD_7 ( VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = METHOD_8 ( VAR_66 -> VAR_67 ) ; VAR_68 -> VAR_69 = VAR_70 ; } else if ( VAR_71 == 2 ) { struct STRUCT_OR_UNION_11 * VAR_72 = ( struct STRUCT_OR_UNION_12 * ) VAR_73 ; if ( ! METHOD_9 ( VAR_74 -> VAR_75 . VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ) { TYPE_6 VAR_79 = METHOD_11 ( ( ( TYPE_7 * ) VAR_80 -> VAR_81 . VAR_82 ) [ 0 ] ) ; if ( VAR_83 < 0x0200 ) { VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; } else { VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; } } else if ( ! METHOD_12 ( VAR_96 -> VAR_97 . VAR_98 , VAR_99 , METHOD_13 ( VAR_100 ) ) ) { TYPE_8 VAR_101 ; struct STRUCT_OR_UNION_13 * VAR_102 ; struct STRUCT_OR_UNION_14 * VAR_103 = ( struct STRUCT_OR_UNION_15 * ) VAR_104 ; VAR_105 -> VAR_106 = VAR_107 ; VAR_108 -> VAR_109 . VAR_110 . VAR_111 = METHOD_14 ( VAR_112 -> VAR_113 ) ; for ( VAR_114 = 0 ; VAR_115 < VAR_116 -> VAR_117 ; VAR_118 ++ ) { struct STRUCT_OR_UNION_16 * VAR_119 ; VAR_120 = METHOD_15 ( VAR_121 -> VAR_122 [ VAR_123 ] ) ; VAR_124 = METHOD_16 ( VAR_125 , VAR_126 , VAR_127 , & VAR_128 ) ; VAR_129 -> VAR_130 . VAR_131 . VAR_132 [ VAR_133 ] = VAR_134 ; if ( VAR_135 == VAR_136 ) continue ; VAR_137 = ( struct STRUCT_OR_UNION_17 * ) VAR_138 -> VAR_139 ; if ( VAR_140 != 0 || METHOD_17 ( VAR_141 -> VAR_142 . VAR_143 , VAR_144 , METHOD_18 ( VAR_145 ) ) ) { METHOD_19 ( VAR_146 ) ; VAR_147 -> VAR_148 . VAR_149 . VAR_150 [ VAR_151 ] = VAR_152 ; } } VAR_153 -> VAR_154 = VAR_155 ; } else if ( ! METHOD_20 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 , METHOD_21 ( VAR_160 ) ) ) { struct STRUCT_OR_UNION_18 * VAR_161 = & VAR_162 -> VAR_163 . VAR_164 ; struct STRUCT_OR_UNION_19 * VAR_165 = ( struct STRUCT_OR_UNION_20 * ) & ( VAR_166 -> VAR_167 [ VAR_168 ] ) ; METHOD_22 ( "ParsingLogicalvolpart%dtype%did=%s\\n" , VAR_169 , VAR_170 , VAR_171 ) ; VAR_172 -> VAR_173 = VAR_174 ; VAR_175 -> VAR_176 = VAR_177 ; VAR_178 -> VAR_179 = METHOD_23 ( VAR_180 -> VAR_181 ) ; VAR_182 -> VAR_183 = METHOD_24 ( VAR_184 -> VAR_185 ) ; VAR_186 -> VAR_187 = METHOD_25 ( VAR_188 -> VAR_189 ) ; VAR_190 -> VAR_191 = METHOD_26 ( VAR_192 -> VAR_193 ) ; VAR_194 -> VAR_195 = METHOD_27 ( VAR_196 -> VAR_197 ) ; if ( VAR_198 -> VAR_199 & 0x01 ) VAR_200 -> VAR_201 |= VAR_202 ; METHOD_28 ( "MetadataIdentsuffix=0x%x\\n" , METHOD_29 ( * ( TYPE_9 * ) VAR_203 -> VAR_204 . VAR_205 ) ) ; METHOD_30 ( "Metadatapartnum=%d\\n" , METHOD_31 ( VAR_206 -> VAR_207 ) ) ; METHOD_32 ( "Metadatapartallocunitsize=%d\\n" , METHOD_33 ( VAR_208 -> VAR_209 ) ) ; METHOD_34 ( "Metadatafileloc=%d\\n" , METHOD_35 ( VAR_210 -> VAR_211 ) ) ; METHOD_36 ( "Mirrorfileloc=%d\\n" , METHOD_37 ( VAR_212 -> VAR_213 ) ) ; METHOD_38 ( "Bitmapfileloc=%d\\n" , METHOD_39 ( VAR_214 -> VAR_215 ) ) ; METHOD_40 ( "Flags:%d%d\\n" , VAR_216 -> VAR_217 , VAR_218 -> VAR_219 ) ; } else { METHOD_41 ( "Unknownident:%s\\n" , VAR_220 -> VAR_221 . VAR_222 ) ; continue ; } VAR_223 -> VAR_224 = METHOD_42 ( VAR_225 -> VAR_226 ) ; VAR_227 -> VAR_228 = METHOD_43 ( VAR_229 -> VAR_230 ) ; } METHOD_44 ( "Partition(%d:%d)type%donvolume%d\\n" , VAR_231 , VAR_232 -> VAR_233 , VAR_234 , VAR_235 -> VAR_236 ) ; } if ( VAR_237 ) { struct STRUCT_OR_UNION_21 * VAR_238 = ( struct STRUCT_OR_UNION_22 * ) & ( VAR_239 -> VAR_240 [ 0 ] ) ; * VAR_241 = METHOD_45 ( VAR_242 -> VAR_243 ) ; METHOD_46 ( "FileSetfoundinLogicalVolDescatblock=%d,partition=%d\\n" , VAR_244 -> VAR_245 , VAR_246 -> VAR_247 ) ; } if ( VAR_248 -> VAR_249 . VAR_250 ) METHOD_47 ( VAR_251 , METHOD_48 ( VAR_252 -> VAR_253 ) ) ; VAR_254 : METHOD_49 ( VAR_255 ) ; return VAR_256 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 [ 3 ] ; TYPE_7 * VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ;  if ( VAR_11 ) {  METHOD_1 ( "warning:ignoringBMPdecoderoptions\\n" ) ; } METHOD_2 ( "THEBMPFORMATISNOTFULLYSUPPORTED!\\n" "THATIS,THEJASPERSOFTWARECANNOTDECODEALLTYPESOFBMPDATA.\\n" "IFYOUHAVEANYPROBLEMS,PLEASETRYCONVERTINGYOURIMAGEDATA\\n" "TOTHEPNMFORMAT,ANDUSINGTHISFORMATINSTEAD.\\n" ) ; if ( METHOD_3 ( VAR_12 , & VAR_13 ) ) { METHOD_4 ( "cannotgetheader\\n" ) ;  return 0 ;  } METHOD_5 ( 1 , ( "BMPheader:magic0x%x;siz%d;res1%d;res2%d;off%d\\n" , VAR_14 . VAR_15 , VAR_16 . VAR_17 , VAR_18 . VAR_19 , VAR_20 . VAR_21 , VAR_22 . VAR_23 ) ) ; if ( ! ( VAR_24 = METHOD_6 ( VAR_25 ) ) ) { METHOD_7 ( "cannotgetinfo\\n" ) ;  return 0 ;  } METHOD_8 ( 1 ,  ( "BMPinformation:len%d;width%d;height%d;numplanes%d;"  "depth%d;enctype%d;siz%d;hres%d;vres%d;numcolors%d;"  "mincolors%d\\n" , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ,   VAR_34 -> VAR_35 , VAR_36 -> VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ,   VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ) ;  if ( ! METHOD_9 ( & VAR_48 , VAR_49 ) ) { METHOD_10 ( "error:unsupportedBMPencoding\\n" ) ;  METHOD_11 ( VAR_50 ) ;  return 0 ; } if ( ( VAR_51 = VAR_52 . VAR_53 - ( VAR_54 + VAR_55 + METHOD_12 ( VAR_56 ) ) ) < 0 ) { METHOD_13 ( "error:possiblybadbitmapoffset?\\n" ) ;  return 0 ;  } if ( VAR_57 > 0 ) { METHOD_14 ( "skippingunknowndatainBMPfile\\n" ) ; if ( METHOD_15 ( VAR_58 , VAR_59 ) ) {  METHOD_16 ( VAR_60 ) ;  return 0 ; } } VAR_61 = METHOD_17 ( VAR_62 ) ; for ( VAR_63 = 0 , VAR_64 = VAR_65 ; VAR_66 < VAR_67 ; ++ VAR_68 , ++ VAR_69 ) { VAR_70 -> VAR_71 = 0 ; VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 = 1 ; VAR_76 -> VAR_77 = 1 ; VAR_78 -> VAR_79 = VAR_80 -> VAR_81 ; VAR_82 -> VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 = 8 ; VAR_88 -> VAR_89 = VAR_90 ; } if ( ! ( VAR_91 = METHOD_18 ( VAR_92 , VAR_93 , VAR_94 ) ) ) {  METHOD_19 ( VAR_95 ) ;  return 0 ; } if ( VAR_96 == 3 ) { METHOD_20 ( VAR_97 , VAR_98 ) ; METHOD_21 ( VAR_99 , 0 , METHOD_22 ( VAR_100 ) ) ; METHOD_23 ( VAR_101 , 1 , METHOD_24 ( VAR_102 ) ) ; METHOD_25 ( VAR_103 , 2 , METHOD_26 ( VAR_104 ) ) ; } else { METHOD_27 ( VAR_105 , VAR_106 ) ; METHOD_28 ( VAR_107 , 0 , METHOD_29 ( VAR_108 ) ) ; } if ( METHOD_30 ( VAR_109 , VAR_110 , VAR_111 ) ) {  METHOD_31 ( VAR_112 ) ;   METHOD_32 ( VAR_113 ) ;   return 0 ;  }  METHOD_33 ( VAR_114 ) ;  return VAR_115 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 , ... ) { TYPE_4 VAR_4 ;  struct STRUCT_OR_UNION_1 VAR_5 ;  TYPE_5 VAR_6 [ 32 ] ; METHOD_1 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) - 1 ) ; METHOD_3 ( VAR_12 , VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = & VAR_19 ; if ( ! ( VAR_20 & VAR_21 ) ) goto VAR_22 ; if ( METHOD_4 ( VAR_23 ) && METHOD_5 ( VAR_24 -> VAR_25 ) ) METHOD_6 ( "[%s]:[%s:%d]:%d:%pV" ,  METHOD_7 ( & VAR_26 -> VAR_27 -> VAR_28 ) , VAR_29 , VAR_30 ,  VAR_31 -> VAR_32 , & VAR_33 ) ; else  METHOD_8 ( "[0000:00:00.0]:[%s:%d]:%pV" , VAR_34 , VAR_35 , & VAR_36 ) ;  VAR_37 : METHOD_9 ( VAR_38 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( ! METHOD_1 ( ) ) { METHOD_2 ( ) ; METHOD_3 ( ) ; } METHOD_4 ( VAR_3 ) ; METHOD_5 ( VAR_4 ) ; if ( ! VAR_5 ) METHOD_6 ( VAR_6 ) ; METHOD_7 ( ) ;  METHOD_8 ( VAR_7 , VAR_8 ) ;  if ( VAR_9 [ VAR_10 ] . VAR_11 == VAR_12 ) { if ( ! VAR_13 ) { TYPE_4 VAR_14 = METHOD_9 ( VAR_15 [ VAR_16 ] . VAR_17 , VAR_18 ) ; METHOD_10 ( "switchingtopage_no:%d" , VAR_19 ) ; METHOD_11 ( VAR_20 , VAR_21 ) ; return ; } } if ( VAR_22 [ VAR_23 ] . VAR_24 == VAR_25 ) { if ( METHOD_12 ( ) ) { METHOD_13 ( ) ; METHOD_14 ( ) ; METHOD_15 ( VAR_26 , VAR_27 ) ; } else METHOD_16 ( METHOD_17 ( VAR_28 ) , VAR_29 ) ; METHOD_18 ( ) ; } if ( VAR_30 [ VAR_31 ] . VAR_32 == VAR_33 ) { METHOD_19 ( VAR_34 ) ; METHOD_20 ( VAR_35 , METHOD_21 ( VAR_36 ) ) ; } if ( VAR_37 [ VAR_38 ] . VAR_39 == VAR_40 ) { METHOD_22 ( VAR_41 ) ; METHOD_23 ( VAR_42 , VAR_43 ) ; METHOD_24 ( METHOD_25 ( VAR_44 ) , VAR_45 ) ; } if ( VAR_46 [ VAR_47 ] . VAR_48 == VAR_49 ) { METHOD_26 ( "g_event_selected:\'%s\'" , VAR_50 ) ; if ( VAR_51 && VAR_52 [ 0 ] ) { METHOD_27 ( ) ; METHOD_28 ( VAR_53 ) ; } } if ( VAR_54 [ VAR_55 ] . VAR_56 == VAR_57 ) { if ( ! VAR_58 && ! VAR_59 ) METHOD_29 ( ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 , VAR_5 -> VAR_6 ) ; if ( VAR_7 == VAR_8 ) return - VAR_9 ; if ( VAR_10 -> VAR_11 ) { unsigned TYPE_1 VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 -> VAR_16 ; VAR_17 ++ ) { struct STRUCT_OR_UNION_3 VAR_18 ;  METHOD_2 ( & VAR_19 -> VAR_20 [ VAR_21 ] , & VAR_22 ) ;  if ( METHOD_3 ( & VAR_23 -> VAR_24 [ VAR_25 ] , & VAR_26 , sizeof ( VAR_27 ) ) ) return - VAR_28 ; } } if ( VAR_29 -> VAR_30 ) { struct STRUCT_OR_UNION_4 TYPE_2 * VAR_31 ; unsigned TYPE_3 VAR_32 ; for ( VAR_33 = 0 , VAR_34 = VAR_35 -> VAR_36 ; VAR_37 < VAR_38 -> VAR_39 ; VAR_40 ++ ) { struct STRUCT_OR_UNION_5 VAR_41 ; if ( VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 -> VAR_46 != VAR_47 ) continue ;  METHOD_4 ( VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 ,  & VAR_52 . VAR_53 ) ; METHOD_5 ( VAR_54 -> VAR_55 [ VAR_56 ] . VAR_57 , & VAR_58 . VAR_59 ) ; VAR_60 . VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 ; if ( METHOD_6 ( VAR_66 , & VAR_67 , sizeof ( * VAR_68 ) ) ) return - VAR_69 ; VAR_70 ++ ; } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , const TYPE_6 * VAR_5 , TYPE_7 VAR_6 , const TYPE_8 * VAR_7 , const TYPE_9 * VAR_8 , TYPE_10 VAR_9 , TYPE_11 * VAR_10 , TYPE_12 * VAR_11 , TYPE_13 VAR_12 , const TYPE_14 * VAR_13 , TYPE_15 * VAR_14 ,  TYPE_16 VAR_15 ,  TYPE_17 * VAR_16 , TYPE_18 VAR_17 , TYPE_19 VAR_18 , const TYPE_20 * VAR_19 , const TYPE_21 * VAR_20 , const TYPE_22 * * VAR_21 , TYPE_23 * VAR_22 ) { TYPE_24 VAR_23 ; TYPE_25 VAR_24 ; TYPE_26 VAR_25 ; TYPE_27 VAR_26 = VAR_27 -> VAR_28 ; TYPE_28 VAR_29 ; TYPE_29 VAR_30 = 0 ; METHOD_1 ( & VAR_31 , 0 , sizeof ( VAR_32 ) ) ; METHOD_2 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_3 ( & VAR_35 , 0 , sizeof ( VAR_36 ) ) ; VAR_37 . VAR_38 = 5 ; VAR_39 . VAR_40 = VAR_41 ; VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; METHOD_4 ( & VAR_46 -> VAR_47 ) ; VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 , * VAR_52 -> VAR_53 ) ; METHOD_6 ( VAR_54 . VAR_55 ) ; * VAR_56 . VAR_57 = VAR_58 ; VAR_59 = METHOD_7 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 , & VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; METHOD_8 ( VAR_67 -> VAR_68 == VAR_69 ) METHOD_9 ( VAR_70 -> VAR_71 == VAR_72 ) METHOD_10 ( VAR_73 -> VAR_74 == VAR_75 ) METHOD_11 ( TYPE_30 ) 0 METHOD_12 ( TYPE_31 ) 0 VAR_76 = METHOD_13 ( VAR_77 , VAR_78 , ! VAR_79 . VAR_80 || METHOD_14 || METHOD_15 ( VAR_81 ) || ! ( ( METHOD_16 && METHOD_17 ( VAR_82 ) ) || METHOD_18 ) , & VAR_83 -> VAR_84 , & VAR_85 , METHOD_19 ( VAR_86 , VAR_87 ) , METHOD_20 ( VAR_88 , VAR_89 -> VAR_90 . VAR_91 ) ,  METHOD_21 ( VAR_92 , VAR_93 -> VAR_94 . VAR_95 ) ) ;  if ( VAR_96 ) goto VAR_97 ; METHOD_22 ( & VAR_98 -> VAR_99 , & VAR_100 . VAR_101 . VAR_102 ) ; METHOD_23 ( & VAR_103 . VAR_104 . VAR_105 , VAR_106 ) ; METHOD_24 ( & VAR_107 -> VAR_108 , & VAR_109 . VAR_110 ) ; METHOD_25 ( & VAR_111 -> VAR_112 , & VAR_113 . VAR_114 ) ; VAR_115 . VAR_116 . VAR_117 = 5 ; VAR_118 . VAR_119 = VAR_120 . VAR_121 ; { TYPE_32 VAR_122 ; VAR_123 = VAR_124 . VAR_125 - * VAR_126 . VAR_127 ; if ( VAR_128 && VAR_129 -> VAR_130 . VAR_131 ) VAR_132 = METHOD_26 ( VAR_133 , * VAR_134 -> VAR_135 . VAR_136 ) ; if ( VAR_137 -> VAR_138 . VAR_139 ) VAR_140 = METHOD_27 ( VAR_141 , * VAR_142 -> VAR_143 . VAR_144 ) ; VAR_145 . VAR_146 = * VAR_147 . VAR_148 + VAR_149 ; } if ( VAR_150 . VAR_151 && VAR_152 -> VAR_153 . VAR_154 && VAR_155 . VAR_156 == VAR_157 && VAR_158 . VAR_159 < * VAR_160 -> VAR_161 && VAR_162 -> VAR_163 != VAR_164 ) { VAR_165 . VAR_166 . VAR_167 = 1 ; METHOD_28 ( VAR_168 . VAR_169 ) ; * VAR_170 . VAR_171 = * VAR_172 -> VAR_173 ; } if ( VAR_174 . VAR_175 ) { TYPE_33 VAR_176 ; VAR_177 = * VAR_178 . VAR_179 - * VAR_180 . VAR_181 ; if ( VAR_182 && VAR_183 -> VAR_184 . VAR_185 ) VAR_186 = METHOD_29 ( VAR_187 , * VAR_188 -> VAR_189 . VAR_190 ) ; if ( VAR_191 -> VAR_192 . VAR_193 ) VAR_194 = METHOD_30 ( VAR_195 , * VAR_196 -> VAR_197 . VAR_198 ) ; * VAR_199 . VAR_200 = * VAR_201 . VAR_202 + VAR_203 ; } if ( VAR_204 . VAR_205 ) { * VAR_206 . VAR_207 = METHOD_31 ( * VAR_208 . VAR_209 , * VAR_210 -> VAR_211 ) ; * VAR_212 . VAR_213 = METHOD_32 ( * VAR_214 . VAR_215 , * VAR_216 . VAR_217 ) ; VAR_218 . VAR_219 = METHOD_33 ( VAR_220 . VAR_221 , * VAR_222 . VAR_223 ) ; } * VAR_224 . VAR_225 = METHOD_34 ( * VAR_226 . VAR_227 , VAR_228 . VAR_229 ) ; if ( * VAR_230 . VAR_231 == VAR_232 . VAR_233 ) { VAR_234 = VAR_235 ; goto VAR_236 ; } if ( VAR_237 . VAR_238 && VAR_239 . VAR_240 == * VAR_241 . VAR_242 ) { METHOD_35 ( VAR_243 . VAR_244 ) ; VAR_245 . VAR_246 = VAR_247 ; VAR_248 . VAR_249 . VAR_250 = 0 ; } VAR_251 . VAR_252 . VAR_253 = VAR_254 -> VAR_255 . VAR_256 ; VAR_257 . VAR_258 . VAR_259 = VAR_260 -> VAR_261 . VAR_262 ; VAR_263 . VAR_264 . VAR_265 = VAR_266 -> VAR_267 . VAR_268 ; VAR_269 . VAR_270 . VAR_271 = VAR_272 -> VAR_273 . VAR_274 . VAR_275 ; if ( VAR_276 -> VAR_277 ) { VAR_278 = METHOD_36 ( VAR_279 , & VAR_280 , VAR_281 , VAR_282 ) ; if ( VAR_283 ) goto VAR_284 ; } if ( VAR_285 ) { unsigned TYPE_34 VAR_286 = 0 ; if ( VAR_287 . VAR_288 == VAR_289 ) { VAR_290 . VAR_291 = METHOD_37 ( 1 , sizeof ( * VAR_292 . VAR_293 ) ) ; if ( VAR_294 . VAR_295 == VAR_296 ) { VAR_297 = VAR_298 ; METHOD_38 ( VAR_299 , VAR_300 , "malloc:outofmemory" ) ; goto VAR_301 ; } } for ( VAR_302 = 0 ; VAR_303 < VAR_304 -> VAR_305 ; VAR_306 ++ ) { VAR_307 = METHOD_39 ( VAR_308 . VAR_309 , & VAR_310 -> VAR_311 [ VAR_312 ] ) ; if ( VAR_313 ) { METHOD_40 ( VAR_314 , VAR_315 , "malloc:outofmemory" ) ; goto VAR_316 ; } } VAR_317 = METHOD_41 ( VAR_318 , VAR_319 . VAR_320 , VAR_321 ) ; if ( VAR_322 == 0 ) { if ( VAR_323 . VAR_324 -> VAR_325 == 1 ) { METHOD_42 ( VAR_326 . VAR_327 ) ; METHOD_43 ( VAR_328 . VAR_329 ) ; VAR_330 . VAR_331 = VAR_332 ; } else { TYPE_35 * VAR_333 = VAR_334 . VAR_335 ; METHOD_44 ( & VAR_336 -> VAR_337 [ VAR_338 -> VAR_339 - 1 ] ) ; VAR_340 -> VAR_341 -- ; } } } VAR_342 = METHOD_45 ( VAR_343 , VAR_344 , & VAR_345 . VAR_346 ) ; if ( VAR_347 ) goto VAR_348 ; VAR_349 . VAR_350 = VAR_351 -> VAR_352 ; VAR_353 . VAR_354 = VAR_355 -> VAR_356 ; VAR_357 . VAR_358 = VAR_359 . VAR_360 ; VAR_361 . VAR_362 . VAR_363 = METHOD_46 ( 1 , sizeof ( * VAR_364 . VAR_365 . VAR_366 ) ) ; if ( VAR_367 . VAR_368 . VAR_369 == VAR_370 ) { VAR_371 = VAR_372 ; goto VAR_373 ; } VAR_374 . VAR_375 . VAR_376 = 1 ; VAR_377 . VAR_378 = VAR_379 -> VAR_380 ; VAR_381 . VAR_382 = VAR_383 . VAR_384 ; VAR_385 . VAR_386 = VAR_387 . VAR_388 ; VAR_389 . VAR_390 = VAR_391 . VAR_392 ; VAR_393 . VAR_394 = VAR_395 . VAR_396 ; VAR_397 . VAR_398 = VAR_399 . VAR_400 ; VAR_401 . VAR_402 = VAR_403 . VAR_404 . VAR_405 ; VAR_406 . VAR_407 = VAR_408 . VAR_409 . VAR_410 ; METHOD_47 ( VAR_411 , VAR_412 , "TGS-REQ" , VAR_413 . VAR_414 , VAR_415 . VAR_416 , VAR_417 . VAR_418 , VAR_419 . VAR_420 ) ; { TYPE_36 * VAR_421 = METHOD_48 ( & VAR_422 . VAR_423 ) ; if ( VAR_424 == VAR_425 || METHOD_49 ( VAR_426 , VAR_427 . VAR_428 ) == 0 ) { VAR_429 = METHOD_50 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 , VAR_434 , VAR_435 , VAR_436 , & VAR_437 ) ; if ( VAR_438 ) goto VAR_439 ; } } if ( VAR_440 -> VAR_441 ) { VAR_442 . VAR_443 = METHOD_51 ( 1 , sizeof ( * VAR_444 . VAR_445 ) ) ; if ( VAR_446 . VAR_447 == VAR_448 ) { VAR_449 = VAR_450 ; goto VAR_451 ; } VAR_452 = METHOD_52 ( VAR_453 , VAR_454 . VAR_455 ) ; if ( VAR_456 ) goto VAR_457 ; } if ( METHOD_53 ( VAR_458 , VAR_459 -> VAR_460 ) != 0 && METHOD_54 ( VAR_461 -> VAR_462 . VAR_463 , VAR_464 -> VAR_465 ) ) { METHOD_55 ( VAR_466 , VAR_467 -> VAR_468 ) ; VAR_469 = 1 ; } VAR_470 = METHOD_56 ( VAR_471 , VAR_472 , VAR_473 , 0 , & VAR_474 , & VAR_475 , & VAR_476 , VAR_477 -> VAR_478 , VAR_479 , VAR_480 , 0 , VAR_481 , VAR_482 , VAR_483 , VAR_484 ) ; if ( VAR_485 ) METHOD_57 ( VAR_486 , VAR_487 -> VAR_488 ) ; VAR_489 : METHOD_58 ( & VAR_490 ) ; METHOD_59 ( & VAR_491 . VAR_492 ) ; if ( VAR_493 . VAR_494 ) METHOD_60 ( VAR_495 . VAR_496 ) ; if ( VAR_497 . VAR_498 ) METHOD_61 ( VAR_499 . VAR_500 ) ; if ( VAR_501 . VAR_502 ) { METHOD_62 ( VAR_503 . VAR_504 ) ; METHOD_63 ( VAR_505 . VAR_506 ) ; } METHOD_64 ( & VAR_507 . VAR_508 ) ; METHOD_65 ( VAR_509 . VAR_510 . VAR_511 . VAR_512 , 0 , VAR_513 . VAR_514 . VAR_515 . VAR_516 ) ; METHOD_66 ( & VAR_517 . VAR_518 ) ; return VAR_519 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 ; TYPE_7 * VAR_7 ; TYPE_8 VAR_8 ; register TYPE_9 * VAR_9 ; register TYPE_10 VAR_10 , VAR_11 ; register unsigned TYPE_11 * VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; TYPE_13 VAR_16 , VAR_17 ; unsigned TYPE_14 VAR_18 [ 12 ] , * VAR_19 ; unsigned TYPE_15 VAR_20 , VAR_21 , VAR_22 , VAR_23 ; METHOD_1 ( VAR_24 != ( const TYPE_16 * ) VAR_25 ) ; METHOD_2 ( VAR_26 -> VAR_27 == VAR_28 ) ; if ( VAR_29 -> VAR_30 != VAR_31 ) ( TYPE_17 ) METHOD_3 ( VAR_32 , METHOD_4 ( ) , "%s" , VAR_33 -> VAR_34 ) ; METHOD_5 ( VAR_35 != ( TYPE_18 * ) VAR_36 ) ; METHOD_6 ( VAR_37 -> VAR_38 == VAR_39 ) ; VAR_40 = METHOD_7 ( VAR_41 , VAR_42 ) ; VAR_43 = METHOD_8 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ; if ( VAR_48 == VAR_49 ) { VAR_50 = METHOD_9 ( VAR_51 ) ; return ( ( TYPE_19 * ) VAR_52 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_53 , 0 , sizeof ( VAR_54 ) ) ; VAR_55 . VAR_56 = 0 ; VAR_57 = 0 ; VAR_58 = 0 ; VAR_59 = METHOD_11 ( VAR_60 , 2 , VAR_61 ) ; if ( VAR_62 != 2 ) METHOD_12 ( VAR_63 , "ImproperImageHeader" ) ; do { TYPE_21 VAR_64 ; TYPE_22 VAR_65 ; VAR_66 = METHOD_13 ( VAR_67 ) - 2 ; VAR_68 . VAR_69 = 0 ; while ( METHOD_14 ( ( TYPE_23 * ) VAR_70 , "BA" , 2 ) == 0 ) { VAR_71 . VAR_72 = METHOD_15 ( VAR_73 ) ; VAR_74 . VAR_75 = METHOD_16 ( VAR_76 ) ; VAR_77 . VAR_78 = METHOD_17 ( VAR_79 ) ; VAR_80 = METHOD_18 ( VAR_81 , 2 , VAR_82 ) ; if ( VAR_83 != 2 ) break ; } if ( VAR_84 -> VAR_85 != VAR_86 ) ( TYPE_24 ) METHOD_19 ( VAR_87 , METHOD_20 ( ) , "Magick:%c%c" , VAR_88 [ 0 ] , VAR_89 [ 1 ] ) ; if ( ( VAR_90 != 2 ) || ( ( METHOD_21 ( ( TYPE_25 * ) VAR_91 , "BM" , 2 ) != 0 ) && ( METHOD_22 ( ( TYPE_26 * ) VAR_92 , "CI" , 2 ) != 0 ) ) ) METHOD_23 ( VAR_93 , "ImproperImageHeader" ) ; VAR_94 . VAR_95 = METHOD_24 ( VAR_96 ) ; ( TYPE_27 ) METHOD_25 ( VAR_97 ) ; VAR_98 . VAR_99 = METHOD_26 ( VAR_100 ) ; VAR_101 . VAR_102 = METHOD_27 ( VAR_103 ) ; if ( VAR_104 -> VAR_105 != VAR_106 ) ( TYPE_28 ) METHOD_28 ( VAR_107 , METHOD_29 ( ) , "BMPsize:%u" , VAR_108 . VAR_109 ) ; if ( VAR_110 . VAR_111 == 12 ) { ( TYPE_29 ) METHOD_30 ( VAR_112 -> VAR_113 , "BMP2" , VAR_114 ) ; VAR_115 . VAR_116 = ( TYPE_30 ) ( ( TYPE_31 ) METHOD_31 ( VAR_117 ) ) ; VAR_118 . VAR_119 = ( TYPE_32 ) ( ( TYPE_33 ) METHOD_32 ( VAR_120 ) ) ; VAR_121 . VAR_122 = METHOD_33 ( VAR_123 ) ; VAR_124 . VAR_125 = METHOD_34 ( VAR_126 ) ; VAR_127 . VAR_128 = 0 ; VAR_129 . VAR_130 = 0 ; VAR_131 . VAR_132 = 0 ; VAR_133 . VAR_134 = VAR_135 ; VAR_136 . VAR_137 = 0 ; VAR_138 . VAR_139 = 0 ; if ( VAR_140 -> VAR_141 != VAR_142 ) { ( TYPE_34 ) METHOD_35 ( VAR_143 , METHOD_36 ( ) , "Format:OS/2Bitmap" ) ; ( TYPE_35 ) METHOD_37 ( VAR_144 , METHOD_38 ( ) , "Geometry:%.20gx%.20g" , ( TYPE_36 ) VAR_145 . VAR_146 , ( TYPE_37 ) VAR_147 . VAR_148 ) ; } } else { if ( VAR_149 . VAR_150 < 40 ) METHOD_39 ( VAR_151 , "NonOS2HeaderSizeError" ) ; VAR_152 . VAR_153 = ( TYPE_38 ) METHOD_40 ( VAR_154 ) ; VAR_155 . VAR_156 = ( TYPE_39 ) METHOD_41 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_42 ( VAR_160 ) ; VAR_161 . VAR_162 = METHOD_43 ( VAR_163 ) ; VAR_164 . VAR_165 = METHOD_44 ( VAR_166 ) ; VAR_167 . VAR_168 = METHOD_45 ( VAR_169 ) ; VAR_170 . VAR_171 = METHOD_46 ( VAR_172 ) ; VAR_173 . VAR_174 = METHOD_47 ( VAR_175 ) ; VAR_176 . VAR_177 = METHOD_48 ( VAR_178 ) ;  if ( VAR_179 . VAR_180 > METHOD_49 ( VAR_181 ) )  METHOD_50 ( VAR_182 , "InsufficientImageDataInFile" ) ; VAR_183 . VAR_184 = METHOD_51 ( VAR_185 ) ; if ( VAR_186 -> VAR_187 != VAR_188 ) { ( TYPE_40 ) METHOD_52 ( VAR_189 , METHOD_53 ( ) , "Format:MSWindowsbitmap" ) ; ( TYPE_41 ) METHOD_54 ( VAR_190 , METHOD_55 ( ) , "Geometry:%.20gx%.20g" , ( TYPE_42 ) VAR_191 . VAR_192 , ( TYPE_43 ) VAR_193 . VAR_194 ) ; ( TYPE_44 ) METHOD_56 ( VAR_195 , METHOD_57 ( ) , "Bitsperpixel:%.20g" , ( TYPE_45 ) VAR_196 . VAR_197 ) ; switch ( VAR_198 . VAR_199 ) { case VAR_200 : { ( TYPE_46 ) METHOD_58 ( VAR_201 , METHOD_59 ( ) , "Compression:BI_RGB" ) ; break ; } case VAR_202 : { ( TYPE_47 ) METHOD_60 ( VAR_203 , METHOD_61 ( ) , "Compression:BI_RLE4" ) ; break ; } case VAR_204 : { ( TYPE_48 ) METHOD_62 ( VAR_205 , METHOD_63 ( ) , "Compression:BI_RLE8" ) ; break ; } case VAR_206 : { ( TYPE_49 ) METHOD_64 ( VAR_207 , METHOD_65 ( ) , "Compression:BI_BITFIELDS" ) ; break ; } case VAR_208 : { ( TYPE_50 ) METHOD_66 ( VAR_209 , METHOD_67 ( ) , "Compression:BI_PNG" ) ; break ; } case VAR_210 : { ( TYPE_51 ) METHOD_68 ( VAR_211 , METHOD_69 ( ) , "Compression:BI_JPEG" ) ; break ; } default : { ( TYPE_52 ) METHOD_70 ( VAR_212 , METHOD_71 ( ) , "Compression:UNKNOWN(%u)" , VAR_213 . VAR_214 ) ; } } ( TYPE_53 ) METHOD_72 ( VAR_215 , METHOD_73 ( ) , "Numberofcolors:%u" , VAR_216 . VAR_217 ) ; } VAR_218 . VAR_219 = METHOD_74 ( VAR_220 ) ; VAR_221 . VAR_222 = METHOD_75 ( VAR_223 ) ; VAR_224 . VAR_225 = METHOD_76 ( VAR_226 ) ; if ( VAR_227 . VAR_228 > 40 ) { TYPE_54 VAR_229 ; VAR_230 . VAR_231 = METHOD_77 ( VAR_232 ) ; VAR_233 . VAR_234 = METHOD_78 ( VAR_235 ) ; METHOD_79 ( ( TYPE_55 ) 0x40000000 ) VAR_236 . VAR_237 . VAR_238 = ( TYPE_56 ) METHOD_80 ( VAR_239 ) / METHOD_81 ; VAR_240 . VAR_241 . VAR_242 = ( TYPE_57 ) METHOD_82 ( VAR_243 ) / METHOD_83 ; VAR_244 . VAR_245 . VAR_246 = ( TYPE_58 ) METHOD_84 ( VAR_247 ) / METHOD_85 ; VAR_248 . VAR_249 . VAR_250 = ( TYPE_59 ) METHOD_86 ( VAR_251 ) / METHOD_87 ; VAR_252 . VAR_253 . VAR_254 = ( TYPE_60 ) METHOD_88 ( VAR_255 ) / METHOD_89 ; VAR_256 . VAR_257 . VAR_258 = ( TYPE_61 ) METHOD_90 ( VAR_259 ) / METHOD_91 ; VAR_260 . VAR_261 . VAR_262 = ( TYPE_62 ) METHOD_92 ( VAR_263 ) / METHOD_93 ; VAR_264 . VAR_265 . VAR_266 = ( TYPE_63 ) METHOD_94 ( VAR_267 ) / METHOD_95 ; VAR_268 . VAR_269 . VAR_270 = ( TYPE_64 ) METHOD_96 ( VAR_271 ) / METHOD_97 ; VAR_272 = VAR_273 . VAR_274 . VAR_275 + VAR_276 . VAR_277 . VAR_278 + VAR_279 . VAR_280 . VAR_281 ; VAR_282 = METHOD_98 ( VAR_283 ) ; VAR_284 . VAR_285 . VAR_286 *= VAR_287 ; VAR_288 . VAR_289 . VAR_290 *= VAR_291 ; VAR_292 -> VAR_293 . VAR_294 . VAR_295 = VAR_296 . VAR_297 . VAR_298 ; VAR_299 -> VAR_300 . VAR_301 . VAR_302 = VAR_303 . VAR_304 . VAR_305 ; VAR_306 = VAR_307 . VAR_308 . VAR_309 + VAR_310 . VAR_311 . VAR_312 + VAR_313 . VAR_314 . VAR_315 ; VAR_316 = METHOD_99 ( VAR_317 ) ; VAR_318 . VAR_319 . VAR_320 *= VAR_321 ; VAR_322 . VAR_323 . VAR_324 *= VAR_325 ; VAR_326 -> VAR_327 . VAR_328 . VAR_329 = VAR_330 . VAR_331 . VAR_332 ; VAR_333 -> VAR_334 . VAR_335 . VAR_336 = VAR_337 . VAR_338 . VAR_339 ; VAR_340 = VAR_341 . VAR_342 . VAR_343 + VAR_344 . VAR_345 . VAR_346 + VAR_347 . VAR_348 . VAR_349 ; VAR_350 = METHOD_100 ( VAR_351 ) ; VAR_352 . VAR_353 . VAR_354 *= VAR_355 ; VAR_356 . VAR_357 . VAR_358 *= VAR_359 ; VAR_360 -> VAR_361 . VAR_362 . VAR_363 = VAR_364 . VAR_365 . VAR_366 ; VAR_367 -> VAR_368 . VAR_369 . VAR_370 = VAR_371 . VAR_372 . VAR_373 ; VAR_374 . VAR_375 . VAR_376 = ( TYPE_65 ) METHOD_101 ( VAR_377 ) / 0x10000 ; VAR_378 . VAR_379 . VAR_380 = ( TYPE_66 ) METHOD_102 ( VAR_381 ) / 0x10000 ; VAR_382 . VAR_383 . VAR_384 = ( TYPE_67 ) METHOD_103 ( VAR_385 ) / 0x10000 ; VAR_386 -> VAR_387 = ( VAR_388 . VAR_389 . VAR_390 + VAR_391 . VAR_392 . VAR_393 + VAR_394 . VAR_395 . VAR_396 ) / 3.0 ; } else ( TYPE_68 ) METHOD_104 ( VAR_397 -> VAR_398 , "BMP3" , VAR_399 ) ; if ( VAR_400 . VAR_401 > 108 ) { TYPE_69 VAR_402 ; VAR_403 = METHOD_105 ( VAR_404 ) ; switch ( ( TYPE_70 ) VAR_405 ) { case VAR_406 : { VAR_407 -> VAR_408 = VAR_409 ; break ; } case VAR_410 : { VAR_411 -> VAR_412 = VAR_413 ; break ; } case VAR_414 : { VAR_415 -> VAR_416 = VAR_417 ; break ; } case VAR_418 : { VAR_419 -> VAR_420 = VAR_421 ; break ; } } ( TYPE_71 ) METHOD_106 ( VAR_422 ) ; ( TYPE_72 ) METHOD_107 ( VAR_423 ) ; ( TYPE_73 ) METHOD_108 ( VAR_424 ) ; } } if ( ( TYPE_74 ) VAR_425 . VAR_426 > METHOD_109 ( VAR_427 ) ) ( TYPE_75 ) METHOD_110 ( VAR_428 , METHOD_111 ( ) , VAR_429 , "LengthAndFilesizeDoNotMatch" , "`%s\'" , VAR_430 -> VAR_431 ) ; else if ( ( TYPE_76 ) VAR_432 . VAR_433 < METHOD_112 ( VAR_434 ) ) ( TYPE_77 ) METHOD_113 ( VAR_435 , METHOD_114 ( ) , VAR_436 , "LengthAndFilesizeDoNotMatch" , "`%s\'" , VAR_437 -> VAR_438 ) ; if ( VAR_439 . VAR_440 <= 0 ) METHOD_115 ( VAR_441 , "NegativeOrZeroImageSize" ) ; if ( VAR_442 . VAR_443 == 0 ) METHOD_116 ( VAR_444 , "NegativeOrZeroImageSize" ) ; if ( VAR_445 . VAR_446 != 1 ) METHOD_117 ( VAR_447 , "StaticPlanesValueNotEqualToOne" ) ; if ( ( VAR_448 . VAR_449 != 1 ) && ( VAR_450 . VAR_451 != 4 ) && ( VAR_452 . VAR_453 != 8 ) && ( VAR_454 . VAR_455 != 16 ) && ( VAR_456 . VAR_457 != 24 ) && ( VAR_458 . VAR_459 != 32 ) ) METHOD_118 ( VAR_460 , "UnrecognizedBitsPerPixel" ) ; if ( VAR_461 . VAR_462 < 16 && VAR_463 . VAR_464 > ( 1U << VAR_465 . VAR_466 ) ) METHOD_119 ( VAR_467 , "UnrecognizedNumberOfColors" ) ; if ( ( VAR_468 . VAR_469 == 1 ) && ( VAR_470 . VAR_471 != 8 ) ) METHOD_120 ( VAR_472 , "UnrecognizedBitsPerPixel" ) ; if ( ( VAR_473 . VAR_474 == 2 ) && ( VAR_475 . VAR_476 != 4 ) ) METHOD_121 ( VAR_477 , "UnrecognizedBitsPerPixel" ) ; if ( ( VAR_478 . VAR_479 == 3 ) && ( VAR_480 . VAR_481 < 16 ) ) METHOD_122 ( VAR_482 , "UnrecognizedBitsPerPixel" ) ; switch ( VAR_483 . VAR_484 ) { case VAR_485 : VAR_486 -> VAR_487 = VAR_488 ; break ; case VAR_489 : case VAR_490 : VAR_491 -> VAR_492 = VAR_493 ; break ; case VAR_494 : break ; case VAR_495 : METHOD_123 ( VAR_496 , "JPEGCompressNotSupported" ) ; case VAR_497 : METHOD_124 ( VAR_498 , "PNGCompressNotSupported" ) ; default : METHOD_125 ( VAR_499 , "UnrecognizedImageCompression" ) ; } VAR_500 -> VAR_501 = ( TYPE_78 ) METHOD_126 ( VAR_502 . VAR_503 ) ; VAR_504 -> VAR_505 = ( TYPE_79 ) METHOD_127 ( VAR_506 . VAR_507 ) ; VAR_508 -> VAR_509 = VAR_510 . VAR_511 <= 8 ? VAR_512 . VAR_513 : 8 ; VAR_514 -> VAR_515 = ( ( VAR_516 . VAR_517 != 0 ) && ( VAR_518 . VAR_519 == VAR_520 ) ) ? VAR_521 : VAR_522 ; if ( VAR_523 . VAR_524 < 16 ) { TYPE_80 VAR_525 ; VAR_526 -> VAR_527 = VAR_528 ; VAR_529 -> VAR_530 = VAR_531 . VAR_532 ; VAR_533 = 1 ; if ( VAR_534 -> VAR_535 == 0 ) VAR_536 -> VAR_537 = VAR_538 << VAR_539 . VAR_540 ; } VAR_541 -> VAR_542 . VAR_543 = ( TYPE_81 ) VAR_544 . VAR_545 / 100.0 ; VAR_546 -> VAR_547 . VAR_548 = ( TYPE_82 ) VAR_549 . VAR_550 / 100.0 ; VAR_551 -> VAR_552 = VAR_553 ; if ( ( VAR_554 -> VAR_555 != VAR_556 ) && ( VAR_557 -> VAR_558 != 0 ) ) if ( VAR_559 -> VAR_560 >= ( VAR_561 -> VAR_562 + VAR_563 -> VAR_564 - 1 ) ) break ; VAR_565 = METHOD_128 ( VAR_566 , VAR_567 -> VAR_568 , VAR_569 -> VAR_570 , VAR_571 ) ; if ( VAR_572 == VAR_573 ) return ( METHOD_129 ( VAR_574 ) ) ; if ( VAR_575 -> VAR_576 == VAR_577 ) { unsigned TYPE_83 * VAR_578 ; TYPE_84 VAR_579 ; if ( VAR_580 -> VAR_581 != VAR_582 ) ( TYPE_85 ) METHOD_130 ( VAR_583 , METHOD_131 ( ) , "Readingcolormapof%.20gcolors" , ( TYPE_86 ) VAR_584 -> VAR_585 ) ; if ( METHOD_132 ( VAR_586 , VAR_587 -> VAR_588 , VAR_589 ) == VAR_590 ) METHOD_133 ( VAR_591 , "MemoryAllocationFailed" ) ; VAR_592 = ( unsigned TYPE_87 * ) METHOD_134 ( ( TYPE_88 ) VAR_593 -> VAR_594 , 4 * sizeof ( * VAR_595 ) ) ; if ( VAR_596 == ( unsigned TYPE_89 * ) VAR_597 ) METHOD_135 ( VAR_598 , "MemoryAllocationFailed" ) ; if ( ( VAR_599 . VAR_600 == 12 ) || ( VAR_601 . VAR_602 == 64 ) ) VAR_603 = 3 ; else VAR_604 = 4 ; VAR_605 = METHOD_136 ( VAR_606 , VAR_607 + 14 + VAR_608 . VAR_609 , VAR_610 ) ; if ( VAR_611 < 0 ) { VAR_612 = ( unsigned TYPE_90 * ) METHOD_137 ( VAR_613 ) ; METHOD_138 ( VAR_614 , "ImproperImageHeader" ) ; } VAR_615 = METHOD_139 ( VAR_616 , VAR_617 * VAR_618 -> VAR_619 , VAR_620 ) ; if ( VAR_621 != ( TYPE_91 ) ( VAR_622 * VAR_623 -> VAR_624 ) ) { VAR_625 = ( unsigned TYPE_92 * ) METHOD_140 ( VAR_626 ) ; METHOD_141 ( VAR_627 , "InsufficientImageDataInFile" ) ; } VAR_628 = VAR_629 ; for ( VAR_630 = 0 ; VAR_631 < ( TYPE_93 ) VAR_632 -> VAR_633 ; VAR_634 ++ ) { VAR_635 -> VAR_636 [ VAR_637 ] . VAR_638 = ( TYPE_94 ) METHOD_142 ( * VAR_639 ++ ) ; VAR_640 -> VAR_641 [ VAR_642 ] . VAR_643 = ( TYPE_95 ) METHOD_143 ( * VAR_644 ++ ) ; VAR_645 -> VAR_646 [ VAR_647 ] . VAR_648 = ( TYPE_96 ) METHOD_144 ( * VAR_649 ++ ) ; if ( VAR_650 == 4 ) VAR_651 ++ ; } VAR_652 = ( unsigned TYPE_97 * ) METHOD_145 ( VAR_653 ) ; } if ( VAR_654 . VAR_655 == VAR_656 ) METHOD_146 ( VAR_657 , "ImproperImageHeader" ) ; VAR_658 = VAR_659 . VAR_660 ; VAR_661 = METHOD_147 ( VAR_662 , VAR_663 + VAR_664 . VAR_665 , VAR_666 ) ; if ( VAR_667 < 0 ) METHOD_148 ( VAR_668 , "ImproperImageHeader" ) ; if ( VAR_669 . VAR_670 == VAR_671 ) VAR_672 . VAR_673 <<= 1 ; VAR_674 = 4 * ( ( VAR_675 -> VAR_676 * VAR_677 . VAR_678 + 31 ) / 32 ) ; VAR_679 = ( TYPE_98 ) VAR_680 * VAR_681 -> VAR_682 ; if ( ( VAR_683 . VAR_684 == VAR_685 ) || ( VAR_686 . VAR_687 == VAR_688 ) ) { if ( ( TYPE_99 ) VAR_689 > METHOD_149 ( VAR_690 ) ) METHOD_150 ( VAR_691 , "InsufficientImageDataInFile" ) ; VAR_692 = METHOD_151 ( VAR_693 -> VAR_694 , METHOD_152 ( VAR_695 , VAR_696 -> VAR_697 + 256UL ) * sizeof ( * VAR_698 ) ) ; if ( VAR_699 == ( TYPE_100 * ) VAR_700 ) METHOD_153 ( VAR_701 , "MemoryAllocationFailed" ) ; VAR_702 = ( unsigned TYPE_101 * ) METHOD_154 ( VAR_703 ) ; if ( VAR_704 -> VAR_705 != VAR_706 ) ( TYPE_102 ) METHOD_155 ( VAR_707 , METHOD_156 ( ) , "Readingpixels(%.20gbytes)" , ( TYPE_103 ) VAR_708 ) ; VAR_709 = METHOD_157 ( VAR_710 , VAR_711 , VAR_712 ) ; if ( VAR_713 != ( TYPE_104 ) VAR_714 ) { VAR_715 = METHOD_158 ( VAR_716 ) ; METHOD_159 ( VAR_717 , "InsufficientImageDataInFile" ) ; } } else { VAR_718 = METHOD_160 ( VAR_719 -> VAR_720 , METHOD_161 ( VAR_721 , VAR_722 -> VAR_723 + 256UL ) * sizeof ( * VAR_724 ) ) ; if ( VAR_725 == ( TYPE_105 * ) VAR_726 ) METHOD_162 ( VAR_727 , "MemoryAllocationFailed" ) ; VAR_728 = ( unsigned TYPE_106 * ) METHOD_163 ( VAR_729 ) ; VAR_730 = METHOD_164 ( VAR_731 , VAR_732 . VAR_733 , VAR_734 , VAR_735 -> VAR_736 * VAR_737 -> VAR_738 ) ; if ( VAR_739 == VAR_740 ) { VAR_741 = METHOD_165 ( VAR_742 ) ; METHOD_166 ( VAR_743 , "UnableToRunlengthDecodeImage" ) ; } } if ( VAR_744 . VAR_745 == VAR_746 ) { if ( ( VAR_747 -> VAR_748 == VAR_749 ) && ( VAR_750 . VAR_751 == 40 ) && ( VAR_752 . VAR_753 == 32 ) ) { VAR_754 = 4 * ( VAR_755 -> VAR_756 ) ; for ( VAR_757 = ( TYPE_107 ) VAR_758 -> VAR_759 - 1 ; VAR_760 >= 0 ; VAR_761 -- ) { VAR_762 = VAR_763 + ( VAR_764 -> VAR_765 - VAR_766 - 1 ) * VAR_767 ; for ( VAR_768 = 0 ; VAR_769 < ( TYPE_108 ) VAR_770 -> VAR_771 ; VAR_772 ++ ) { if ( * ( VAR_773 + 3 ) != 0 ) { VAR_774 -> VAR_775 = VAR_776 ; VAR_777 = - 1 ; break ; } VAR_778 += 4 ; } } } VAR_779 . VAR_780 = VAR_781 -> VAR_782 != VAR_783 ? 0xff000000U : 0U ; VAR_784 . VAR_785 = 0x00ff0000U ; VAR_786 . VAR_787 = 0x0000ff00U ; VAR_788 . VAR_789 = 0x000000ffU ; if ( VAR_790 . VAR_791 == 16 ) { VAR_792 . VAR_793 = 0x00007c00U ; VAR_794 . VAR_795 = 0x000003e0U ; VAR_796 . VAR_797 = 0x0000001fU ; } } ( TYPE_109 ) METHOD_167 ( & VAR_798 , 0 , sizeof ( VAR_799 ) ) ; ( TYPE_110 ) METHOD_168 ( & VAR_800 , 0 , sizeof ( VAR_801 ) ) ; if ( ( VAR_802 . VAR_803 == 16 ) || ( VAR_804 . VAR_805 == 32 ) ) { register unsigned TYPE_111 VAR_806 ; if ( VAR_807 . VAR_808 != 0 ) while ( ( ( VAR_809 . VAR_810 << VAR_811 . VAR_812 ) & 0x80000000UL ) == 0 ) { VAR_813 . VAR_814 ++ ; if ( VAR_815 . VAR_816 >= 32U ) break ; } if ( VAR_817 . VAR_818 != 0 ) while ( ( ( VAR_819 . VAR_820 << VAR_821 . VAR_822 ) & 0x80000000UL ) == 0 ) { VAR_823 . VAR_824 ++ ; if ( VAR_825 . VAR_826 >= 32U ) break ; } if ( VAR_827 . VAR_828 != 0 ) while ( ( ( VAR_829 . VAR_830 << VAR_831 . VAR_832 ) & 0x80000000UL ) == 0 ) { VAR_833 . VAR_834 ++ ; if ( VAR_835 . VAR_836 >= 32U ) break ; } if ( VAR_837 . VAR_838 != 0 ) while ( ( ( VAR_839 . VAR_840 << VAR_841 . VAR_842 ) & 0x80000000UL ) == 0 ) { VAR_843 . VAR_844 ++ ; if ( VAR_845 . VAR_846 >= 32U ) break ; } VAR_847 = VAR_848 . VAR_849 ; while ( ( ( VAR_850 . VAR_851 << VAR_852 ) & 0x80000000UL ) != 0 ) { VAR_853 ++ ; if ( VAR_854 >= 32U ) break ; } VAR_855 . VAR_856 = ( TYPE_112 ) ( VAR_857 - VAR_858 . VAR_859 ) ; VAR_860 = VAR_861 . VAR_862 ; while ( ( ( VAR_863 . VAR_864 << VAR_865 ) & 0x80000000UL ) != 0 ) { VAR_866 ++ ; if ( VAR_867 >= 32U ) break ; } VAR_868 . VAR_869 = ( TYPE_113 ) ( VAR_870 - VAR_871 . VAR_872 ) ; VAR_873 = VAR_874 . VAR_875 ; while ( ( ( VAR_876 . VAR_877 << VAR_878 ) & 0x80000000UL ) != 0 ) { VAR_879 ++ ; if ( VAR_880 >= 32U ) break ; } VAR_881 . VAR_882 = ( TYPE_114 ) ( VAR_883 - VAR_884 . VAR_885 ) ; VAR_886 = VAR_887 . VAR_888 ; while ( ( ( VAR_889 . VAR_890 << VAR_891 ) & 0x80000000UL ) != 0 ) { VAR_892 ++ ; if ( VAR_893 >= 32U ) break ; } VAR_894 . VAR_895 = ( TYPE_115 ) ( VAR_896 - VAR_897 . VAR_898 ) ; } switch ( VAR_899 . VAR_900 ) { case 1 : { for ( VAR_901 = ( TYPE_116 ) VAR_902 -> VAR_903 - 1 ; VAR_904 >= 0 ; VAR_905 -- ) { VAR_906 = VAR_907 + ( VAR_908 -> VAR_909 - VAR_910 - 1 ) * VAR_911 ; VAR_912 = METHOD_169 ( VAR_913 , 0 , VAR_914 , VAR_915 -> VAR_916 , 1 , VAR_917 ) ; if ( VAR_918 == ( TYPE_117 * ) VAR_919 ) break ; for ( VAR_920 = 0 ; VAR_921 < ( ( TYPE_118 ) VAR_922 -> VAR_923 - 7 ) ; VAR_924 += 8 ) { for ( VAR_925 = 0 ; VAR_926 < 8 ; VAR_927 ++ ) { VAR_928 = ( TYPE_119 ) ( ( ( * VAR_929 ) & ( 0x80 >> VAR_930 ) ) != 0 ? 0x01 : 0x00 ) ; METHOD_170 ( VAR_931 , VAR_932 , VAR_933 ) ; VAR_934 += METHOD_171 ( VAR_935 ) ; } VAR_936 ++ ; } if ( ( VAR_937 -> VAR_938 % 8 ) != 0 ) { for ( VAR_939 = 0 ; VAR_940 < ( VAR_941 -> VAR_942 % 8 ) ; VAR_943 ++ ) { VAR_944 = ( TYPE_120 ) ( ( ( * VAR_945 ) & ( 0x80 >> VAR_946 ) ) != 0 ? 0x01 : 0x00 ) ; METHOD_172 ( VAR_947 , VAR_948 , VAR_949 ) ; VAR_950 += METHOD_173 ( VAR_951 ) ; } VAR_952 ++ ; } if ( METHOD_174 ( VAR_953 , VAR_954 ) == VAR_955 ) break ; if ( VAR_956 -> VAR_957 == ( TYPE_121 * ) VAR_958 ) { VAR_959 = METHOD_175 ( VAR_960 , VAR_961 , ( TYPE_122 ) ( VAR_962 -> VAR_963 - VAR_964 ) , VAR_965 -> VAR_966 ) ; if ( VAR_967 == VAR_968 ) break ; } } ( TYPE_123 ) METHOD_176 ( VAR_969 , VAR_970 ) ; break ; } case 4 : { for ( VAR_971 = ( TYPE_124 ) VAR_972 -> VAR_973 - 1 ; VAR_974 >= 0 ; VAR_975 -- ) { VAR_976 = VAR_977 + ( VAR_978 -> VAR_979 - VAR_980 - 1 ) * VAR_981 ; VAR_982 = METHOD_177 ( VAR_983 , 0 , VAR_984 , VAR_985 -> VAR_986 , 1 , VAR_987 ) ; if ( VAR_988 == ( TYPE_125 * ) VAR_989 ) break ; for ( VAR_990 = 0 ; VAR_991 < ( ( TYPE_126 ) VAR_992 -> VAR_993 - 1 ) ; VAR_994 += 2 ) { METHOD_178 ( VAR_995 , ( TYPE_127 ) ( ( * VAR_996 >> 4 ) & 0x0f ) , & VAR_997 , VAR_998 ) ; METHOD_179 ( VAR_999 , VAR_1000 , VAR_1001 ) ; VAR_1002 += METHOD_180 ( VAR_1003 ) ; METHOD_181 ( VAR_1004 , ( TYPE_128 ) ( * VAR_1005 & 0x0f ) , & VAR_1006 , VAR_1007 ) ; METHOD_182 ( VAR_1008 , VAR_1009 , VAR_1010 ) ; VAR_1011 += METHOD_183 ( VAR_1012 ) ; VAR_1013 ++ ; } if ( ( VAR_1014 -> VAR_1015 % 2 ) != 0 ) { METHOD_184 ( VAR_1016 , ( TYPE_129 ) ( ( * VAR_1017 >> 4 ) & 0xf ) , & VAR_1018 , VAR_1019 ) ; METHOD_185 ( VAR_1020 , VAR_1021 , VAR_1022 ) ; VAR_1023 += METHOD_186 ( VAR_1024 ) ; VAR_1025 ++ ; VAR_1026 ++ ; } if ( VAR_1027 < ( TYPE_130 ) VAR_1028 -> VAR_1029 ) break ; if ( METHOD_187 ( VAR_1030 , VAR_1031 ) == VAR_1032 ) break ; if ( VAR_1033 -> VAR_1034 == ( TYPE_131 * ) VAR_1035 ) { VAR_1036 = METHOD_188 ( VAR_1037 , VAR_1038 , ( TYPE_132 ) ( VAR_1039 -> VAR_1040 - VAR_1041 ) , VAR_1042 -> VAR_1043 ) ; if ( VAR_1044 == VAR_1045 ) break ; } } ( TYPE_133 ) METHOD_189 ( VAR_1046 , VAR_1047 ) ; break ; } case 8 : { if ( ( VAR_1048 . VAR_1049 == VAR_1050 ) || ( VAR_1051 . VAR_1052 == VAR_1053 ) ) VAR_1054 = VAR_1055 -> VAR_1056 ; for ( VAR_1057 = ( TYPE_134 ) VAR_1058 -> VAR_1059 - 1 ; VAR_1060 >= 0 ; VAR_1061 -- ) { VAR_1062 = VAR_1063 + ( VAR_1064 -> VAR_1065 - VAR_1066 - 1 ) * VAR_1067 ; VAR_1068 = METHOD_190 ( VAR_1069 , 0 , VAR_1070 , VAR_1071 -> VAR_1072 , 1 , VAR_1073 ) ; if ( VAR_1074 == ( TYPE_135 * ) VAR_1075 ) break ; for ( VAR_1076 = ( TYPE_136 ) VAR_1077 -> VAR_1078 ; VAR_1079 != 0 ; -- VAR_1080 ) { METHOD_191 ( VAR_1081 , ( TYPE_137 ) * VAR_1082 ++ , & VAR_1083 , VAR_1084 ) ; METHOD_192 ( VAR_1085 , VAR_1086 , VAR_1087 ) ; VAR_1088 += METHOD_193 ( VAR_1089 ) ; } if ( METHOD_194 ( VAR_1090 , VAR_1091 ) == VAR_1092 ) break ; VAR_1093 = ( TYPE_138 ) ( VAR_1094 -> VAR_1095 - VAR_1096 - 1 ) ; if ( VAR_1097 -> VAR_1098 == ( TYPE_139 * ) VAR_1099 ) { VAR_1100 = METHOD_195 ( VAR_1101 , VAR_1102 , ( TYPE_140 ) ( VAR_1103 -> VAR_1104 - VAR_1105 ) , VAR_1106 -> VAR_1107 ) ; if ( VAR_1108 == VAR_1109 ) break ; } } ( TYPE_141 ) METHOD_196 ( VAR_1110 , VAR_1111 ) ; break ; } case 16 : { unsigned TYPE_142 VAR_1112 , VAR_1113 ; if ( ( VAR_1114 . VAR_1115 != VAR_1116 ) && ( VAR_1117 . VAR_1118 != VAR_1119 ) ) { VAR_1120 = METHOD_197 ( VAR_1121 ) ; METHOD_198 ( VAR_1122 , "UnrecognizedImageCompression" ) ; } VAR_1123 = 2 * ( VAR_1124 -> VAR_1125 + VAR_1126 -> VAR_1127 % 2 ) ; VAR_1128 -> VAR_1129 = VAR_1130 ; for ( VAR_1131 = ( TYPE_143 ) VAR_1132 -> VAR_1133 - 1 ; VAR_1134 >= 0 ; VAR_1135 -- ) { VAR_1136 = VAR_1137 + ( VAR_1138 -> VAR_1139 - VAR_1140 - 1 ) * VAR_1141 ; VAR_1142 = METHOD_199 ( VAR_1143 , 0 , VAR_1144 , VAR_1145 -> VAR_1146 , 1 , VAR_1147 ) ; if ( VAR_1148 == ( TYPE_144 * ) VAR_1149 ) break ; for ( VAR_1150 = 0 ; VAR_1151 < ( TYPE_145 ) VAR_1152 -> VAR_1153 ; VAR_1154 ++ ) { VAR_1155 = ( unsigned TYPE_146 ) ( * VAR_1156 ++ ) ; VAR_1157 |= ( * VAR_1158 ++ ) << 8 ; VAR_1159 = ( ( VAR_1160 & VAR_1161 . VAR_1162 ) << VAR_1163 . VAR_1164 ) >> 16 ; if ( VAR_1165 . VAR_1166 == 5 ) VAR_1167 |= ( ( VAR_1168 & 0xe000 ) >> 5 ) ; if ( VAR_1169 . VAR_1170 <= 8 ) VAR_1171 |= ( ( VAR_1172 & 0xff00 ) >> 8 ) ; VAR_1173 = ( ( VAR_1174 & VAR_1175 . VAR_1176 ) << VAR_1177 . VAR_1178 ) >> 16 ; if ( VAR_1179 . VAR_1180 == 5 ) VAR_1181 |= ( ( VAR_1182 & 0xe000 ) >> 5 ) ; if ( VAR_1183 . VAR_1184 == 6 ) VAR_1185 |= ( ( VAR_1186 & 0xc000 ) >> 6 ) ; if ( VAR_1187 . VAR_1188 <= 8 ) VAR_1189 |= ( ( VAR_1190 & 0xff00 ) >> 8 ) ; VAR_1191 = ( ( VAR_1192 & VAR_1193 . VAR_1194 ) << VAR_1195 . VAR_1196 ) >> 16 ; if ( VAR_1197 . VAR_1198 == 5 ) VAR_1199 |= ( ( VAR_1200 & 0xe000 ) >> 5 ) ; if ( VAR_1201 . VAR_1202 <= 8 ) VAR_1203 |= ( ( VAR_1204 & 0xff00 ) >> 8 ) ; METHOD_200 ( VAR_1205 , METHOD_201 ( ( unsigned TYPE_147 ) VAR_1206 ) , VAR_1207 ) ; METHOD_202 ( VAR_1208 , METHOD_203 ( ( unsigned TYPE_148 ) VAR_1209 ) , VAR_1210 ) ; METHOD_204 ( VAR_1211 , METHOD_205 ( ( unsigned TYPE_149 ) VAR_1212 ) , VAR_1213 ) ; METHOD_206 ( VAR_1214 , VAR_1215 , VAR_1216 ) ; if ( VAR_1217 -> VAR_1218 != VAR_1219 ) { VAR_1220 = ( ( VAR_1221 & VAR_1222 . VAR_1223 ) << VAR_1224 . VAR_1225 ) >> 16 ; if ( VAR_1226 . VAR_1227 <= 8 ) VAR_1228 |= ( ( VAR_1229 & 0xff00 ) >> 8 ) ; METHOD_207 ( VAR_1230 , METHOD_208 ( ( unsigned TYPE_150 ) VAR_1231 ) , VAR_1232 ) ; } VAR_1233 += METHOD_209 ( VAR_1234 ) ; } if ( METHOD_210 ( VAR_1235 , VAR_1236 ) == VAR_1237 ) break ; VAR_1238 = ( TYPE_151 ) ( VAR_1239 -> VAR_1240 - VAR_1241 - 1 ) ; if ( VAR_1242 -> VAR_1243 == ( TYPE_152 * ) VAR_1244 ) { VAR_1245 = METHOD_211 ( VAR_1246 , VAR_1247 , ( TYPE_153 ) ( VAR_1248 -> VAR_1249 - VAR_1250 ) , VAR_1251 -> VAR_1252 ) ; if ( VAR_1253 == VAR_1254 ) break ; } } break ; } case 24 : { VAR_1255 = 4 * ( ( VAR_1256 -> VAR_1257 * 24 + 31 ) / 32 ) ; for ( VAR_1258 = ( TYPE_154 ) VAR_1259 -> VAR_1260 - 1 ; VAR_1261 >= 0 ; VAR_1262 -- ) { VAR_1263 = VAR_1264 + ( VAR_1265 -> VAR_1266 - VAR_1267 - 1 ) * VAR_1268 ; VAR_1269 = METHOD_212 ( VAR_1270 , 0 , VAR_1271 , VAR_1272 -> VAR_1273 , 1 , VAR_1274 ) ; if ( VAR_1275 == ( TYPE_155 * ) VAR_1276 ) break ; for ( VAR_1277 = 0 ; VAR_1278 < ( TYPE_156 ) VAR_1279 -> VAR_1280 ; VAR_1281 ++ ) { METHOD_213 ( VAR_1282 , METHOD_214 ( * VAR_1283 ++ ) , VAR_1284 ) ; METHOD_215 ( VAR_1285 , METHOD_216 ( * VAR_1286 ++ ) , VAR_1287 ) ; METHOD_217 ( VAR_1288 , METHOD_218 ( * VAR_1289 ++ ) , VAR_1290 ) ; METHOD_219 ( VAR_1291 , VAR_1292 , VAR_1293 ) ; VAR_1294 += METHOD_220 ( VAR_1295 ) ; } if ( METHOD_221 ( VAR_1296 , VAR_1297 ) == VAR_1298 ) break ; VAR_1299 = ( TYPE_157 ) ( VAR_1300 -> VAR_1301 - VAR_1302 - 1 ) ; if ( VAR_1303 -> VAR_1304 == ( TYPE_158 * ) VAR_1305 ) { VAR_1306 = METHOD_222 ( VAR_1307 , VAR_1308 , ( TYPE_159 ) ( VAR_1309 -> VAR_1310 - VAR_1311 ) , VAR_1312 -> VAR_1313 ) ; if ( VAR_1314 == VAR_1315 ) break ; } } break ; } case 32 : { if ( ( VAR_1316 . VAR_1317 != VAR_1318 ) && ( VAR_1319 . VAR_1320 != VAR_1321 ) ) { VAR_1322 = METHOD_223 ( VAR_1323 ) ; METHOD_224 ( VAR_1324 , "UnrecognizedImageCompression" ) ; } VAR_1325 = 4 * ( VAR_1326 -> VAR_1327 ) ; for ( VAR_1328 = ( TYPE_160 ) VAR_1329 -> VAR_1330 - 1 ; VAR_1331 >= 0 ; VAR_1332 -- ) { unsigned TYPE_161 VAR_1333 , VAR_1334 ; VAR_1335 = VAR_1336 + ( VAR_1337 -> VAR_1338 - VAR_1339 - 1 ) * VAR_1340 ; VAR_1341 = METHOD_225 ( VAR_1342 , 0 , VAR_1343 , VAR_1344 -> VAR_1345 , 1 , VAR_1346 ) ; if ( VAR_1347 == ( TYPE_162 * ) VAR_1348 ) break ; for ( VAR_1349 = 0 ; VAR_1350 < ( TYPE_163 ) VAR_1351 -> VAR_1352 ; VAR_1353 ++ ) { VAR_1354 = ( unsigned TYPE_164 ) ( * VAR_1355 ++ ) ; VAR_1356 |= ( ( unsigned TYPE_165 ) * VAR_1357 ++ << 8 ) ; VAR_1358 |= ( ( unsigned TYPE_166 ) * VAR_1359 ++ << 16 ) ; VAR_1360 |= ( ( unsigned TYPE_167 ) * VAR_1361 ++ << 24 ) ; VAR_1362 = ( ( VAR_1363 & VAR_1364 . VAR_1365 ) << VAR_1366 . VAR_1367 ) >> 16 ; if ( VAR_1368 . VAR_1369 == 8 ) VAR_1370 |= ( VAR_1371 >> 8 ) ; VAR_1372 = ( ( VAR_1373 & VAR_1374 . VAR_1375 ) << VAR_1376 . VAR_1377 ) >> 16 ; if ( VAR_1378 . VAR_1379 == 8 ) VAR_1380 |= ( VAR_1381 >> 8 ) ; VAR_1382 = ( ( VAR_1383 & VAR_1384 . VAR_1385 ) << VAR_1386 . VAR_1387 ) >> 16 ; if ( VAR_1388 . VAR_1389 == 8 ) VAR_1390 |= ( VAR_1391 >> 8 ) ; METHOD_226 ( VAR_1392 , METHOD_227 ( ( unsigned TYPE_168 ) VAR_1393 ) , VAR_1394 ) ; METHOD_228 ( VAR_1395 , METHOD_229 ( ( unsigned TYPE_169 ) VAR_1396 ) , VAR_1397 ) ; METHOD_230 ( VAR_1398 , METHOD_231 ( ( unsigned TYPE_170 ) VAR_1399 ) , VAR_1400 ) ; METHOD_232 ( VAR_1401 , VAR_1402 , VAR_1403 ) ; if ( VAR_1404 -> VAR_1405 != VAR_1406 ) { VAR_1407 = ( ( VAR_1408 & VAR_1409 . VAR_1410 ) << VAR_1411 . VAR_1412 ) >> 16 ; if ( VAR_1413 . VAR_1414 == 8 ) VAR_1415 |= ( VAR_1416 >> 8 ) ; METHOD_233 ( VAR_1417 , METHOD_234 ( ( unsigned TYPE_171 ) VAR_1418 ) , VAR_1419 ) ; } VAR_1420 += METHOD_235 ( VAR_1421 ) ; } if ( METHOD_236 ( VAR_1422 , VAR_1423 ) == VAR_1424 ) break ; VAR_1425 = ( TYPE_172 ) ( VAR_1426 -> VAR_1427 - VAR_1428 - 1 ) ; if ( VAR_1429 -> VAR_1430 == ( TYPE_173 * ) VAR_1431 ) { VAR_1432 = METHOD_237 ( VAR_1433 , VAR_1434 , ( TYPE_174 ) ( VAR_1435 -> VAR_1436 - VAR_1437 ) , VAR_1438 -> VAR_1439 ) ; if ( VAR_1440 == VAR_1441 ) break ; } } break ; } default : { VAR_1442 = METHOD_238 ( VAR_1443 ) ; METHOD_239 ( VAR_1444 , "ImproperImageHeader" ) ; } } VAR_1445 = METHOD_240 ( VAR_1446 ) ; if ( VAR_1447 > 0 ) break ; if ( METHOD_241 ( VAR_1448 ) != VAR_1449 ) { METHOD_242 ( VAR_1450 , VAR_1451 , "UnexpectedEndOfFile" , VAR_1452 -> VAR_1453 ) ; break ; } if ( VAR_1454 . VAR_1455 < 0 ) { TYPE_175 * VAR_1456 ; VAR_1457 = METHOD_243 ( VAR_1458 , VAR_1459 ) ; if ( VAR_1460 != ( TYPE_176 * ) VAR_1461 ) { METHOD_244 ( VAR_1462 , VAR_1463 ) ; METHOD_245 ( & VAR_1464 , VAR_1465 ) ; VAR_1466 = VAR_1467 ; } } if ( VAR_1468 -> VAR_1469 != 0 ) if ( VAR_1470 -> VAR_1471 >= ( VAR_1472 -> VAR_1473 + VAR_1474 -> VAR_1475 - 1 ) ) break ;  * VAR_1476 = '\\0' ;   if ( VAR_1477 . VAR_1478 != 0 )   {  VAR_1479 = METHOD_246 ( VAR_1480 , ( TYPE_177 ) VAR_1481 . VAR_1482 , VAR_1483 ) ;  if ( VAR_1484 < 0 )  METHOD_247 ( VAR_1485 , "ImproperImageHeader" ) ;  }  VAR_1486 = METHOD_248 ( VAR_1487 , 2 , VAR_1488 ) ; if ( ( VAR_1489 == 2 ) && ( METHOD_249 ( VAR_1490 , 2 ) != VAR_1491 ) ) { METHOD_250 ( VAR_1492 , VAR_1493 , VAR_1494 ) ; if ( METHOD_251 ( VAR_1495 ) == ( TYPE_178 * ) VAR_1496 ) { VAR_1497 = VAR_1498 ; return ( ( TYPE_179 * ) VAR_1499 ) ; } VAR_1500 = METHOD_252 ( VAR_1501 ) ; VAR_1502 = METHOD_253 ( VAR_1503 , VAR_1504 , METHOD_254 ( VAR_1505 ) , METHOD_255 ( VAR_1506 ) ) ; if ( VAR_1507 == VAR_1508 ) break ; } } while ( METHOD_256 ( VAR_1509 , 2 ) != VAR_1510 ) ; ( TYPE_180 ) METHOD_257 ( VAR_1511 ) ; if ( VAR_1512 == VAR_1513 ) return ( METHOD_258 ( VAR_1514 ) ) ; return ( METHOD_259 ( VAR_1515 ) ) ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 ) { struct STRUCT_OR_UNION_5 * VAR_4 ; struct STRUCT_OR_UNION_6 * VAR_5 ; struct STRUCT_OR_UNION_7 * VAR_6 ; if ( METHOD_1 ( VAR_7 ) ) goto VAR_8 ; if ( VAR_9 == VAR_10 && ( VAR_11 = METHOD_2 ( VAR_12 , VAR_13 ) ) == VAR_14 ) goto VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 , VAR_18 , VAR_19 ) ; if ( VAR_20 == VAR_21 ) goto VAR_22 ; METHOD_4 ( VAR_23 , VAR_24 ) ; VAR_25 = METHOD_5 ( VAR_26 ) ; VAR_27 = METHOD_6 ( VAR_28 ) ; VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ;  VAR_41 -> VAR_42 = VAR_43 -> VAR_44 ;  VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = METHOD_7 ( VAR_50 ) ; VAR_51 -> VAR_52 = METHOD_8 ( VAR_53 ) -> VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; METHOD_9 ( VAR_58 , METHOD_10 ( VAR_59 ) ) ; if ( METHOD_11 ( VAR_60 , VAR_61 ) < 0 ) { METHOD_12 ( VAR_62 ) ; goto VAR_63 ; } METHOD_13 ( VAR_64 , VAR_65 ) ; return VAR_66 ; VAR_67 : METHOD_14 ( METHOD_15 ( VAR_68 ) , VAR_69 ) ; VAR_70 : METHOD_16 ( VAR_71 ) ; VAR_72 : METHOD_17 ( METHOD_18 ( VAR_73 ) , VAR_74 ) ; return VAR_75 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { struct STRUCT_OR_UNION_1 VAR_3 ;  VAR_4 -> VAR_5 = VAR_6 ;  VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = 0 ; VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 = VAR_17 ; VAR_18 . VAR_19 = VAR_20 ; VAR_21 . VAR_22 = VAR_23 ; VAR_24 . VAR_25 = VAR_26 ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = 0 ; METHOD_1 ( & VAR_32 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 -> VAR_6 ; if ( VAR_7 -> VAR_8 != VAR_9 ) return ;  if ( VAR_10 != 0 )  VAR_11 = METHOD_1 ( VAR_12 ,  METHOD_2 ( METHOD_3 ( VAR_13 ) + VAR_14 ,   VAR_15 , 0 ) ) ;  METHOD_4 ( VAR_16 , VAR_17 , VAR_18 , sizeof ( TYPE_4 ) , & VAR_19 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; struct STRUCT_OR_UNION_3 * VAR_5 = STRUCT_OR_UNION_4 -> VAR_6 . STRUCT_OR_UNION_5 ; TYPE_4 VAR_7 ; if ( ! VAR_8 ) return 0 ; VAR_9 = VAR_10 -> VAR_11 ; VAR_12 = VAR_13 + VAR_14 -> VAR_15 ; VAR_16 = VAR_17 ; if ( ! ( VAR_18 -> VAR_19 & VAR_20 ) ) VAR_21 |= VAR_22 ; if ( ! STRUCT_OR_UNION_6 -> VAR_23 . VAR_24 ) VAR_25 |= VAR_26 ; while ( VAR_27 < VAR_28 ) { unsigned TYPE_5 VAR_29 ; if ( METHOD_1 ( VAR_30 , METHOD_2 ( VAR_31 ) ) ) { VAR_32 += 1 ; continue ; } VAR_33 = METHOD_3 ( STRUCT_OR_UNION_7 , VAR_34 ) ; while ( ( VAR_35 + ( VAR_36 >> VAR_37 ) ) > VAR_38 ) VAR_39 >>= 1 ; while ( ( VAR_40 << VAR_41 ) & ( VAR_42 - 1 ) ) VAR_43 >>= 1 ; while ( METHOD_4 ( VAR_44 , VAR_45 ) & ( VAR_46 - 1 ) ) VAR_47 >>= 1 ; VAR_48 = METHOD_5 ( VAR_49 , VAR_50 , VAR_51 ) ; if ( METHOD_6 ( VAR_52 ) ) { VAR_53 += 1 ; continue ; } VAR_54 = METHOD_7 ( VAR_55 , METHOD_8 ( VAR_56 ) , METHOD_9 ( VAR_57 ) , VAR_58 , VAR_59 ) ; if ( VAR_60 ) { printk ( KERN_ERR "kvm_iommu_map_address:" "iommufailedtomappfn=%llx\\n" , VAR_61 ) ;  goto VAR_62 ;  } VAR_63 += VAR_64 >> VAR_65 ; } return 0 ; VAR_66 :  METHOD_10 ( STRUCT_OR_UNION_8 , VAR_67 -> VAR_68 , VAR_69 ) ;  return VAR_70 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) VAR_3 -> VAR_4 ; TYPE_1 VAR_5 [ ] = { 0x00 , 0xff , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 } ;  METHOD_1 ( & VAR_6 [ 4 ] , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 ) ;  VAR_11 -> VAR_12 -> METHOD_2 ( VAR_13 , 0x72 , sizeof ( VAR_14 ) - ( 6 - VAR_15 -> VAR_16 ) , VAR_17 , VAR_18 , VAR_19 ) ; return 0 ; }
static VAR_0 unsigned TYPE_0 METHOD_0 ( const TYPE_1 VAR_1 , const unsigned TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; if ( VAR_4 == VAR_5 ) {  VAR_6 = ( unsigned TYPE_4 ) ( ( VAR_7 [ 3 ] << 24 ) | ( VAR_8 [ 2 ] << 16 ) |   ( VAR_9 [ 1 ] << 8 ) | ( VAR_10 [ 0 ] ) ) ;   return ( ( unsigned TYPE_5 ) ( VAR_11 & 0xffffffff ) ) ;  }  VAR_12 = ( unsigned TYPE_6 ) ( ( VAR_13 [ 0 ] << 24 ) | ( VAR_14 [ 1 ] << 16 ) |   ( VAR_15 [ 2 ] << 8 ) | VAR_16 [ 3 ] ) ;   return ( ( unsigned TYPE_7 ) ( VAR_17 & 0xffffffff ) ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 ;  struct STRUCT_OR_UNION_3 * VAR_6 ;  TYPE_3 VAR_7 ;  if ( METHOD_2 ( VAR_8 == 0 ) ) return VAR_9 ;  if ( VAR_10 ) {  VAR_11 = METHOD_3 ( VAR_12 , VAR_13 ) ; if ( VAR_14 && ( ! METHOD_4 ( VAR_15 , VAR_16 ) || METHOD_5 ( VAR_17 ) != VAR_18 ) )  return VAR_19 ;  } VAR_20 = METHOD_6 ( VAR_21 , VAR_22 ) ; VAR_23 -> VAR_24 = VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; if ( METHOD_7 ( VAR_29 ) ) { METHOD_8 ( VAR_30 , VAR_31 ) ; return VAR_32 ; } METHOD_9 ( & VAR_33 -> VAR_34 ) ; VAR_35 = METHOD_10 ( VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; METHOD_11 ( & VAR_40 -> VAR_41 ) ; METHOD_12 ( ) ; if ( VAR_42 ) { METHOD_13 ( VAR_43 , VAR_44 ) ; return VAR_45 ; } return VAR_46 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 -> VAR_3 =  if METHOD_1  ( VAR_4 -> VAR_5 ? VAR_6 : 0 ) | ( VAR_7 -> VAR_8 ? VAR_9 : 0 ) | ( VAR_10 -> VAR_11 ? VAR_12 : 0 ) | ( VAR_13 -> VAR_14 ? VAR_15 : 0 ) | VAR_16 -> VAR_17 . VAR_18 ; VAR_19 -> VAR_20 = VAR_21 -> VAR_22 . VAR_23 ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 . VAR_28 ;  if METHOD_2  VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = VAR_43 -> VAR_44 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 VAR_3 ; TYPE_2 VAR_4 = VAR_5 -> VAR_6 . VAR_7 ; do { if ( METHOD_1 ( VAR_8 -- <= 0 ) ) {  METHOD_2 ( VAR_9 -> VAR_10 , "Missingextrainfo\\n" ) ;  return - VAR_11 ; } METHOD_3 ( & VAR_12 , METHOD_4 ( & VAR_13 -> VAR_14 , VAR_15 ) , sizeof ( VAR_16 ) ) ; if ( METHOD_5 ( ! VAR_17 . VAR_18 || VAR_19 . VAR_20 >= VAR_21 ) ) { VAR_22 -> VAR_23 . VAR_24 = ++ VAR_25 ;  METHOD_6 ( VAR_26 -> VAR_27 ,   "Invalidextratype:%d\\n" , VAR_28 . VAR_29 ) ;  return - VAR_30 ; } METHOD_7 ( & VAR_31 [ VAR_32 . VAR_33 - 1 ] , & VAR_34 , sizeof ( VAR_35 ) ) ; VAR_36 -> VAR_37 . VAR_38 = ++ VAR_39 ; } while ( VAR_40 . VAR_41 & VAR_42 ) ; return VAR_43 ; }
static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_3 ) + 16 , VAR_4 ) ; if ( ! VAR_5 ) return - VAR_6 ; VAR_7 = ( struct STRUCT_OR_UNION_4 * ) METHOD_2 ( VAR_8 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; VAR_9 -> VAR_10 = VAR_11 ; VAR_12 -> VAR_13 = VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = ( TYPE_1 ) 0 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = ( sizeof ( struct STRUCT_OR_UNION_6 ) / sizeof ( VAR_30 ) ) ;  METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 -> VAR_36 ) ;  return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 VAR_7 ; unsigned TYPE_3 VAR_8 ; if ( VAR_9 >= VAR_10 && VAR_11 <= VAR_12 ) VAR_13 -> VAR_14 = * VAR_15 ; if ( ( VAR_16 -> VAR_17 & ( 1 << VAR_18 ) ) == 0 || ! VAR_19 -> VAR_20 ) return ;  VAR_21 . VAR_22 = VAR_23 ;  VAR_24 . VAR_25 = * VAR_26 ; VAR_27 . VAR_28 = VAR_29 ; METHOD_1 ( & VAR_30 -> VAR_31 , VAR_32 ) ; METHOD_2 ( VAR_33 , & VAR_34 ) ; METHOD_3 ( & VAR_35 -> VAR_36 , VAR_37 ) ; METHOD_4 ( & VAR_38 -> VAR_39 , VAR_40 , VAR_41 ) ; METHOD_5 ( & VAR_42 -> VAR_43 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; switch ( VAR_5 -> VAR_6 ) { case VAR_7 : { struct STRUCT_OR_UNION_4 * VAR_8 = ( struct STRUCT_OR_UNION_5 * ) VAR_9 ; TYPE_2 * VAR_10 = VAR_11 -> VAR_12 ;  TYPE_3 VAR_13 ;   if ( ! VAR_14 -> VAR_15 )  break ;  VAR_16 = ( VAR_17 - sizeof ( struct STRUCT_OR_UNION_6 ) + 1 )  / VAR_18 -> VAR_19 ; while ( VAR_20 -- ) { METHOD_1 ( VAR_21 -> VAR_22 , VAR_23 -> VAR_24 , VAR_25 , VAR_26 -> VAR_27 ) ; VAR_28 += VAR_29 -> VAR_30 ; } } break ; case VAR_31 : { struct STRUCT_OR_UNION_7 * VAR_32 = ( struct STRUCT_OR_UNION_8 * ) VAR_33 ; TYPE_4 VAR_34 = VAR_35 - sizeof ( struct STRUCT_OR_UNION_9 ) + 1 ; TYPE_5 VAR_36 = VAR_37 -> VAR_38 ; TYPE_6 * VAR_39 = VAR_40 -> VAR_41 ; TYPE_7 VAR_42 ; TYPE_8 VAR_43 ; if ( ! VAR_44 ) break ; VAR_45 = VAR_46 / VAR_47 ; for ( VAR_48 = 0 ; VAR_49 < VAR_50 ; VAR_51 ++ ) { METHOD_2 ( VAR_52 -> VAR_53 , VAR_54 -> VAR_55 , VAR_56 , VAR_57 ) ; VAR_58 += VAR_59 ; } } break ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  if VAR_5  TYPE_6 VAR_6 [ 8 ] ; if VAR_7 VAR_8 * VAR_9 = & VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_0 VAR_12 ; TYPE_7 VAR_13 = 0 ;  if VAR_14  if VAR_15 if ( VAR_16 -> VAR_17 & VAR_18 ) { METHOD_1 ( VAR_19 ) ; } METHOD_2 ( & VAR_20 ) ; if ( VAR_21 -> VAR_22 != VAR_23 -> VAR_24 . VAR_25 || VAR_26 -> VAR_27 != VAR_28 -> VAR_29 . VAR_30 ) { METHOD_3 ( VAR_31 -> VAR_32 . VAR_33 < 2 ) ; METHOD_4 ( VAR_34 ) ; METHOD_5 ( VAR_35 ) ; } if ( METHOD_6 ( VAR_36 -> VAR_37 , VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 -> VAR_43 ? VAR_44 -> VAR_45 : VAR_46 ) ) VAR_47 = - 1 ; METHOD_7 ( & VAR_48 ) ; VAR_49 -> VAR_50 += METHOD_8 ( & VAR_51 ) ;  if VAR_52  if VAR_53 if ( VAR_54 -> VAR_55 & VAR_56 ) { METHOD_9 ( VAR_57 ) ; } return VAR_58 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 ; unsigned TYPE_3 VAR_9 , VAR_10 ; unsigned TYPE_4 VAR_11 ; TYPE_5 VAR_12 = 0 ; TYPE_6 VAR_13 = 0 ; TYPE_7 * VAR_14 = METHOD_1 ( VAR_15 ) ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) == 0 ) { if ( METHOD_3 ( VAR_18 ) != VAR_19 ) {  VAR_20 -> VAR_21 = VAR_22 ;  return ; } VAR_23 = VAR_24 -> VAR_25 ; VAR_26 = VAR_27 + VAR_28 ; * VAR_29 = '\\0' ; VAR_30 ++ ; METHOD_4 ( VAR_31 ) ; } else { VAR_32 = METHOD_5 ( VAR_33 ) ; * ( VAR_34 - 1 ) = '\\0' ; METHOD_6 ( VAR_35 , VAR_36 ) ; } VAR_37 = METHOD_7 ( VAR_38 , VAR_39 , 1 ) ; VAR_40 = VAR_41 -> VAR_42 ; VAR_43 = VAR_44 -> VAR_45 ; if ( * VAR_46 ++ != '(' ) { METHOD_8 ( 1 , "ErrorparsingSTATUS\\n" ) ; return ; } while ( * VAR_47 && * VAR_48 != ')' ) { VAR_49 = METHOD_9 ( VAR_50 ) ; VAR_51 = 0 ; const unsigned TYPE_8 VAR_52 = METHOD_10 ( VAR_53 , & VAR_54 , 10 ) ; if ( ( ( VAR_55 == VAR_56 ) && ( VAR_57 == VAR_58 ) ) || ( ( unsigned TYPE_9 ) VAR_59 != VAR_60 ) ) { METHOD_11 ( 1 , "ErrorparsingSTATUSnumber\\n" ) ; return ; } const unsigned TYPE_10 VAR_61 = ( unsigned TYPE_11 ) VAR_62 ; if ( METHOD_12 ( "MESSAGES" , VAR_63 , 8 ) == 0 ) { VAR_64 -> VAR_65 = VAR_66 ; VAR_67 = 1 ; } else if ( METHOD_13 ( "RECENT" , VAR_68 , 6 ) == 0 ) VAR_69 -> VAR_70 = VAR_71 ; else if ( METHOD_14 ( "UIDNEXT" , VAR_72 , 7 ) == 0 ) VAR_73 -> VAR_74 = VAR_75 ; else if ( METHOD_15 ( "UIDVALIDITY" , VAR_76 , 11 ) == 0 ) VAR_77 -> VAR_78 = VAR_79 ; else if ( METHOD_16 ( "UNSEEN" , VAR_80 , 6 ) == 0 ) VAR_81 -> VAR_82 = VAR_83 ; VAR_84 = VAR_85 ; if ( * VAR_86 && * VAR_87 != ')' ) VAR_88 = METHOD_17 ( VAR_89 ) ; } METHOD_18 ( 3 , "%s(UIDVALIDITY:%u,UIDNEXT:%u)%dmessages,%drecent,%dunseen\\n" , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 , VAR_94 -> VAR_95 , VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 ) ; if ( VAR_102 -> VAR_103 && VAR_104 -> VAR_105 == VAR_106 ) { METHOD_19 ( VAR_107 -> VAR_108 , VAR_109 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; return ; } METHOD_20 ( 3 , "RunningdefaultSTATUShandler\\n" ) ; for ( VAR_110 = VAR_111 ; VAR_112 ; VAR_113 = VAR_114 -> VAR_115 ) { if ( VAR_116 -> VAR_117 != VAR_118 ) continue ; if ( METHOD_21 ( VAR_119 -> VAR_120 , & VAR_121 ) < 0 ) { METHOD_22 ( 1 , "Errorparsingmailbox%s,skipping\\n" , VAR_122 -> VAR_123 ) ; continue ; } if ( METHOD_23 ( & VAR_124 -> VAR_125 -> VAR_126 , & VAR_127 . VAR_128 ) ) { if ( VAR_129 . VAR_130 ) { VAR_131 = METHOD_24 ( VAR_132 . VAR_133 ) ; METHOD_25 ( VAR_134 , VAR_135 . VAR_136 , VAR_137 , METHOD_26 ( VAR_138 ) + 1 ) ; METHOD_27 ( & VAR_139 . VAR_140 ) ; } else VAR_141 = METHOD_28 ( "INBOX" ) ; if ( VAR_142 && ( METHOD_29 ( VAR_143 , VAR_144 ) == 0 ) ) { METHOD_30 ( 3 , "Found%sinbuffylist(OV:%uON:%uU:%d)\\n" , VAR_145 , VAR_146 , VAR_147 , VAR_148 -> VAR_149 ) ; if ( VAR_150 ) { if ( VAR_151 && VAR_152 == VAR_153 -> VAR_154 ) { if ( VAR_155 < VAR_156 -> VAR_157 ) VAR_158 = ( VAR_159 -> VAR_160 > 0 ) ; } else if ( ! VAR_161 && ! VAR_162 ) { VAR_163 = ( VAR_164 -> VAR_165 > 0 ) ; } else VAR_166 = ( VAR_167 -> VAR_168 > 0 ) ; } else VAR_169 = ( VAR_170 -> VAR_171 > 0 ) ; TYPE_12 TYPE_13 if ( ( VAR_172 -> VAR_173 != VAR_174 ) || ( VAR_175 -> VAR_176 != VAR_177 -> VAR_178 ) || ( VAR_179 -> VAR_180 != VAR_181 -> VAR_182 ) ) { METHOD_31 ( VAR_183 ) ; } VAR_184 -> VAR_185 = VAR_186 ; if ( VAR_187 ) VAR_188 -> VAR_189 = VAR_190 -> VAR_191 ; VAR_192 -> VAR_193 = VAR_194 -> VAR_195 ; if ( VAR_196 -> VAR_197 ) { VAR_198 -> VAR_199 = VAR_200 ; } METHOD_32 ( & VAR_201 ) ; return ; } METHOD_33 ( & VAR_202 ) ; } METHOD_34 ( & VAR_203 . VAR_204 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; if ( VAR_4 ) return VAR_5 ;  METHOD_2 ( VAR_6 -> VAR_7 , VAR_8 ) ;  return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 , unsigned TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; unsigned TYPE_7 VAR_6 [ VAR_7 ] ; unsigned TYPE_8 VAR_8 , VAR_9 ; unsigned TYPE_9 VAR_10 , VAR_11 ; unsigned TYPE_10 VAR_12 , VAR_13 ; unsigned TYPE_11 VAR_14 , VAR_15 ; if ( ! VAR_16 || ! VAR_17 || ! VAR_18 || ! VAR_19 ) { return 0 ; } if ( METHOD_1 ( VAR_20 , VAR_21 , 1 , VAR_22 ) != 1 ) { METHOD_2 ( VAR_23 , "\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n" ) ; return 0 ; } VAR_24 = VAR_25 [ 0 ] ; VAR_26 = VAR_27 [ 2 ] ;  VAR_28 = METHOD_3 ( & VAR_29 [ 5 ] ) ;  VAR_30 = VAR_31 [ 7 ] ; if 0  VAR_32 = METHOD_4 ( & VAR_33 [ 8 ] ) ;   VAR_34 = METHOD_5 ( & VAR_35 [ 10 ] ) ;   VAR_36 = METHOD_6 ( & VAR_37 [ 12 ] ) ;   VAR_38 = METHOD_7 ( & VAR_39 [ 14 ] ) ;  VAR_40 = VAR_41 [ 16 ] ; VAR_42 = VAR_43 [ 17 ] ; * VAR_44 = ( unsigned TYPE_12 ) VAR_45 ; * VAR_46 = ( unsigned TYPE_13 ) VAR_47 ; * VAR_48 = ( unsigned TYPE_14 ) VAR_49 ; if ( VAR_50 ) { unsigned TYPE_15 * VAR_51 = ( unsigned TYPE_16 * ) METHOD_8 ( VAR_52 ) ; if ( VAR_53 == 0 ) { METHOD_9 ( VAR_54 , "tga_readheader:memoryout\\n" ) ; return 0 ; } if ( ! METHOD_10 ( VAR_55 , VAR_56 , 1 , VAR_57 ) ) { METHOD_11 ( VAR_58 , "\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n" ) ; METHOD_12 ( VAR_59 ) ; return 0 ; } METHOD_13 ( VAR_60 ) ; } if ( VAR_61 > 8 ) { METHOD_14 ( VAR_62 , "Sorry,compressedtgafilesarenotcurrentlysupported.\\n" ) ; return 0 ; } * VAR_63 = ! ( VAR_64 & 32 ) ; VAR_65 = VAR_66 * ( VAR_67 / 8 ) ; if ( VAR_68 > 0 ) { METHOD_15 ( VAR_69 , "Filecontainsapalette-notyetsupported." ) ; METHOD_16 ( VAR_70 , VAR_71 , VAR_72 ) ; } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 ;  TYPE_5 VAR_7 ;  if ( VAR_8 < sizeof ( VAR_9 ) ) return - VAR_10 ; if ( METHOD_1 ( & VAR_11 , VAR_12 , sizeof ( VAR_13 ) ) ) return - VAR_14 ; if ( VAR_15 . VAR_16 >= METHOD_2 ( VAR_17 ) ) return - VAR_18 ; if ( VAR_19 . VAR_20 + sizeof ( VAR_21 ) > VAR_22 ) return - VAR_23 ; if ( ! VAR_24 [ VAR_25 . VAR_26 METHOD_3 ) return - VAR_27 ; VAR_28 = VAR_29 [ VAR_30 . VAR_31 METHOD_4 ( STRUCT_OR_UNION_4 , VAR_32 + sizeof ( VAR_33 ) , VAR_34 . VAR_35 , VAR_36 . VAR_37 ) ; if ( ! VAR_38 ) VAR_39 = VAR_40 ; return VAR_41 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 VAR_0 , union STRUCT_OR_UNION_0 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) {  if ( METHOD_1 ( VAR_3 ) == VAR_4 ) {   VAR_5 -> VAR_6 = METHOD_2 ( VAR_7 . VAR_8 ,  VAR_9 , & VAR_10 -> VAR_11 ) ; } else { METHOD_3 ( VAR_12 . VAR_13 , VAR_14 ) ; }  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ;  TYPE_3 VAR_4 ;  if ( VAR_5 -> VAR_6 ) return VAR_7 -> VAR_8 ; VAR_9 = ( VAR_10 -> VAR_11 == ( TYPE_4 ) - 1 ? 1 : METHOD_1 ( VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ) ) ; if ( VAR_16 -> VAR_17 == VAR_18 ) VAR_19 = METHOD_2 ( VAR_20 , VAR_21 , ( TYPE_5 ) VAR_22 -> VAR_23 , "TIFFNumberOfStrips" ) ; return ( VAR_24 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 , VAR_10 = VAR_11 & VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 ; struct STRUCT_OR_UNION_8 * VAR_14 = VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ;  METHOD_3 ( "size%zuflags0x%xtimeo%ld\\n" , VAR_19 , VAR_20 , VAR_21 ) ;  VAR_22 -> VAR_23 = 0 ; if ( VAR_24 & VAR_25 ) goto VAR_26 ; while ( 1 ) { if ( ! METHOD_4 ( & VAR_27 -> VAR_28 ) ) { VAR_29 = METHOD_5 ( VAR_30 , VAR_31 ) ; break ; } if ( VAR_32 -> VAR_33 ) { VAR_34 = METHOD_6 ( VAR_35 , VAR_36 ) ; break ; } if ( ! METHOD_7 ( VAR_37 , & VAR_38 ) ) { if ( VAR_39 ) { VAR_40 = - VAR_41 ; break ; } VAR_42 = METHOD_8 ( * METHOD_9 ( VAR_43 ) , ( ! METHOD_10 ( & VAR_44 -> VAR_45 ) || VAR_46 -> VAR_47 || METHOD_11 ( VAR_48 , & VAR_49 ) ) , VAR_50 ) ; METHOD_12 ( "recvmsgwokeinc%ptimeo%ld\\n" , VAR_51 , VAR_52 ) ; if ( VAR_53 > 0 || VAR_54 == VAR_55 ) continue ; VAR_56 = VAR_57 ; if ( VAR_58 == 0 ) VAR_59 = - VAR_60 ; break ; } METHOD_13 ( "copyinginc%pfrom%pI4:%utouser\\n" , VAR_61 , & VAR_62 -> VAR_63 -> VAR_64 , METHOD_14 ( VAR_65 -> VAR_66 . VAR_67 ) ) ; VAR_68 = VAR_69 -> VAR_70 -> VAR_71 -> METHOD_15 ( VAR_72 , VAR_73 -> VAR_74 , VAR_75 ) ; if ( VAR_76 < 0 ) break ; if ( ! METHOD_16 ( VAR_77 , VAR_78 , ! ( VAR_79 & VAR_80 ) ) ) { METHOD_17 ( VAR_81 ) ; VAR_82 = VAR_83 ; METHOD_18 ( VAR_84 ) ; continue ; } if ( VAR_85 < METHOD_19 ( VAR_86 -> VAR_87 . VAR_88 ) ) { if ( VAR_89 & VAR_90 ) VAR_91 = METHOD_20 ( VAR_92 -> VAR_93 . VAR_94 ) ; VAR_95 -> VAR_96 |= VAR_97 ; } if ( METHOD_21 ( VAR_98 , VAR_99 ) ) { VAR_100 = - VAR_101 ; goto VAR_102 ; } METHOD_22 ( VAR_103 ) ; VAR_104 = ( struct STRUCT_OR_UNION_9 * ) VAR_105 -> VAR_106 ; if ( VAR_107 ) { VAR_108 -> VAR_109 = VAR_110 ; VAR_111 -> VAR_112 = VAR_113 -> VAR_114 . VAR_115 ; VAR_116 -> VAR_117 . VAR_118 = VAR_119 -> VAR_120 ; METHOD_23 ( VAR_121 -> VAR_122 , 0 , sizeof ( VAR_123 -> VAR_124 ) ) ; VAR_125 -> VAR_126 = sizeof ( * VAR_127 ) ; } break ; } if ( VAR_128 ) METHOD_24 ( VAR_129 ) ; VAR_130 : return VAR_131 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_4 * VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 -> VAR_12 , & VAR_13 ) ; const TYPE_5 * VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , & VAR_17 ) ;  const TYPE_6 * VAR_18 = VAR_19 ;  TYPE_7 VAR_20 ; TYPE_8 VAR_21 = 0 ; VAR_22 = METHOD_3 ( & VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 -> VAR_28 , VAR_29 , 0 , VAR_30 -> VAR_31 , "authzprovider" ) ; VAR_32 = METHOD_4 ( VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 == VAR_37 ) { ap_log_rerror ( VAR_38 , VAR_39 , 0 , VAR_40 , METHOD_5 ( 02314 ) "UnabletocompileVMforauthzprovider%s" , VAR_41 -> VAR_42 ) ; return VAR_43 ; } METHOD_6 ( VAR_44 , VAR_45 -> VAR_46 ) ; if ( ! METHOD_7 ( VAR_47 , - 1 ) ) { ap_log_rerror ( VAR_48 , VAR_49 , 0 , VAR_50 , METHOD_8 ( 02319 ) "Unabletofindentryfunction\'%s\'in%s(notavalidfunction)" , VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_9 ( VAR_55 , VAR_56 , VAR_57 ) ; return VAR_58 ; } METHOD_10 ( VAR_59 , VAR_60 ) ;  if ( VAR_61 -> VAR_62 ) {  TYPE_9 VAR_63 ;  if ( ! METHOD_11 ( VAR_64 , VAR_65 -> VAR_66 -> VAR_67 ) ) {  ap_log_rerror ( VAR_68 , VAR_69 , 0 , VAR_70 , METHOD_12 ( 02315 ) "Error:authzprovider%s:toomanyarguments" , VAR_71 -> VAR_72 ) ; METHOD_13 ( VAR_73 , VAR_74 , VAR_75 ) ; return VAR_76 ; }  for ( VAR_77 = 0 ; VAR_78 < VAR_79 -> VAR_80 -> VAR_81 ; VAR_82 ++ ) {   const TYPE_10 * VAR_83 = APR_ARRAY_IDX ( VAR_84 -> VAR_85 , VAR_86 , const TYPE_11 * ) ;  METHOD_14 ( VAR_87 , VAR_88 ) ; }  VAR_89 = VAR_90 -> VAR_91 -> VAR_92 ;  } if ( METHOD_15 ( VAR_93 , 1 + VAR_94 , 1 , 0 ) ) { const TYPE_12 * VAR_95 = METHOD_16 ( VAR_96 , - 1 ) ; ap_log_rerror ( VAR_97 , VAR_98 , 0 , VAR_99 , METHOD_17 ( 02316 ) "Errorexecutingauthzprovider%s:%s" , VAR_100 -> VAR_101 , VAR_102 ) ; METHOD_18 ( VAR_103 , VAR_104 , VAR_105 ) ; return VAR_106 ; } if ( ! METHOD_19 ( VAR_107 , - 1 ) ) { ap_log_rerror ( VAR_108 , VAR_109 , 0 , VAR_110 , METHOD_20 ( 02317 ) "Error:authzprovider%sdidnotreturninteger" , VAR_111 -> VAR_112 ) ; METHOD_21 ( VAR_113 , VAR_114 , VAR_115 ) ; return VAR_116 ; } VAR_117 = METHOD_22 ( VAR_118 , - 1 ) ; METHOD_23 ( VAR_119 , VAR_120 , VAR_121 ) ; switch ( VAR_122 ) { case VAR_123 : case VAR_124 : case VAR_125 : case VAR_126 : case VAR_127 : return VAR_128 ; default : ap_log_rerror ( VAR_129 , VAR_130 , 0 , VAR_131 , METHOD_24 ( 02318 ) "Error:authzprovider%s:invalidreturnvalue%d" , VAR_132 -> VAR_133 , VAR_134 ) ; } return VAR_135 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ;  TYPE_2 VAR_6 ;  VAR_7 &= VAR_8 ;  VAR_9 = METHOD_1 ( VAR_10 ) ;  if ( VAR_11 ) return VAR_12 ; VAR_13 = VAR_14 -> VAR_15 ; if ( VAR_16 && ! ( VAR_17 -> VAR_18 & VAR_19 ) && ( VAR_20 -> VAR_21 & ( VAR_22 | VAR_23 | VAR_24 ) ) ) { if ( VAR_25 - VAR_26 -> VAR_27 < VAR_28 ) return - VAR_29 ; } if ( METHOD_2 ( METHOD_3 ( VAR_30 ) ) ) return - VAR_31 ; METHOD_4 ( VAR_32 -> VAR_33 ) ; if ( VAR_34 < VAR_35 -> VAR_36 ) { unsigned TYPE_3 VAR_37 , VAR_38 ; VAR_39 = VAR_40 -> VAR_41 - VAR_42 ; VAR_43 = ( VAR_44 -> VAR_45 - VAR_46 ) >> VAR_47 ; VAR_48 = - VAR_49 ; if ( VAR_50 <= VAR_51 -> VAR_52 ) { VAR_53 = METHOD_5 ( VAR_54 , VAR_55 , VAR_56 ) ; if ( ! VAR_57 ) { METHOD_6 ( & VAR_58 -> VAR_59 ) ; if ( VAR_60 -> VAR_61 & VAR_62 ) VAR_63 -> VAR_64 += VAR_65 ; METHOD_7 ( VAR_66 , VAR_67 -> VAR_68 , VAR_69 ) ; METHOD_8 ( VAR_70 ) ; VAR_71 -> VAR_72 = VAR_73 ; VAR_74 -> VAR_75 -= VAR_76 ; METHOD_9 ( VAR_77 ) ; METHOD_10 ( VAR_78 ) ; METHOD_11 ( & VAR_79 -> VAR_80 ) ; METHOD_12 ( VAR_81 ) ; } } } METHOD_13 ( VAR_82 -> VAR_83 ) ; METHOD_14 ( VAR_84 , VAR_85 -> VAR_86 ) ; METHOD_15 ( VAR_87 ) ; return VAR_88 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 ,  const TYPE_5 * VAR_4 , TYPE_6 VAR_5 )  { TYPE_7 TYPE_8 struct STRUCT_OR_UNION_0 VAR_6 ;  if ( METHOD_1 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 & ~ VAR_11 , VAR_12 ) ) {  if ( VAR_13 ) { METHOD_2 ( "failedtomount\'%s\'on\'%s\'(optional):%s" , VAR_14 , VAR_15 , METHOD_3 ( VAR_16 ) ) ; return 0 ; } else { METHOD_4 ( "failedtomount\'%s\'on\'%s\'" , VAR_17 , VAR_18 ) ; return - 1 ; } } if ( ( VAR_19 & VAR_20 ) || ( VAR_21 & VAR_22 ) ) { METHOD_5 ( "remounting%son%storespectbindorremountoptions" , VAR_23 ? VAR_24 : "(none)" , VAR_25 ? VAR_26 : "(none)" ) ; unsigned TYPE_9 VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) VAR_30 |= VAR_31 ; TYPE_10 TYPE_11 if ( STRUCT_OR_UNION_1 ( VAR_32 , & VAR_33 ) == 0 ) { unsigned TYPE_12 VAR_34 = VAR_35 ; if ( VAR_36 . VAR_37 & VAR_38 ) VAR_39 |= VAR_40 ; if ( VAR_41 . VAR_42 & VAR_43 ) VAR_44 |= VAR_45 ; if ( VAR_46 . VAR_47 & VAR_48 ) VAR_49 |= VAR_50 ; if ( VAR_51 . VAR_52 & VAR_53 ) VAR_54 |= VAR_55 ; METHOD_6 ( "(atremount)flagsfor%swas%lu,requiredextraflagsare%lu" , VAR_56 , VAR_57 . VAR_58 , VAR_59 ) ; if ( ! ( VAR_60 & VAR_61 ) ) { if ( ! ( VAR_62 & ~ VAR_63 ) && VAR_64 == 0 ) { METHOD_7 ( "mountflagsalreadywas%lu,skippingremount" , VAR_65 ) ; goto VAR_66 ; } } VAR_67 |= VAR_68 ; } if ( METHOD_8 ( VAR_69 , VAR_70 , VAR_71 ,  VAR_72 | VAR_73 , VAR_74 ) ) {  if ( VAR_75 ) { METHOD_9 ( "failedtomount\'%s\'on\'%s\'(optional):%s" , VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ; return 0 ; } else { METHOD_11 ( "failedtomount\'%s\'on\'%s\'" , VAR_79 , VAR_80 ) ; return - 1 ; } } } TYPE_13 TYPE_14 VAR_81 : METHOD_12 ( "mounted\'%s\'on\'%s\',type\'%s\'" , VAR_82 , VAR_83 , VAR_84 ) ; return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 4 ] , VAR_3 [ VAR_4 ] ; TYPE_4 VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 * VAR_9 ; TYPE_9 VAR_10 ; register TYPE_10 VAR_11 ; TYPE_11 VAR_12 , VAR_13 ; TYPE_12 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; unsigned TYPE_13 VAR_18 ; METHOD_1 ( VAR_19 != ( const TYPE_14 * ) VAR_20 ) ; METHOD_2 ( VAR_21 -> VAR_22 == VAR_23 ) ; if ( VAR_24 -> VAR_25 != VAR_26 ) ( TYPE_15 ) METHOD_3 ( VAR_27 , METHOD_4 ( ) , "%s" , VAR_28 -> VAR_29 ) ; METHOD_5 ( VAR_30 != ( TYPE_16 * ) VAR_31 ) ; METHOD_6 ( VAR_32 -> VAR_33 == VAR_34 ) ; VAR_35 = METHOD_7 ( VAR_36 ) ; VAR_37 = METHOD_8 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; if ( VAR_42 == VAR_43 ) { VAR_44 = METHOD_9 ( VAR_45 ) ; return ( ( TYPE_17 * ) VAR_46 ) ; } VAR_47 = 0 ; VAR_48 = METHOD_10 ( VAR_49 , 4 , ( unsigned TYPE_18 * ) VAR_50 ) ; VAR_51 += VAR_52 ; if ( ( VAR_53 != 4 ) || ( ( METHOD_11 ( VAR_54 , "SDPX" , 4 ) != 0 ) && ( METHOD_12 ( ( TYPE_19 * ) VAR_55 , "XPDS" , 4 ) != 0 ) ) ) METHOD_13 ( VAR_56 , "ImproperImageHeader" ) ; VAR_57 -> VAR_58 = VAR_59 ; if ( METHOD_14 ( VAR_60 , "SDPX" , 4 ) == 0 ) VAR_61 -> VAR_62 = VAR_63 ; ( TYPE_20 ) METHOD_15 ( & VAR_64 , 0 , sizeof ( VAR_65 ) ) ; VAR_66 . VAR_67 . VAR_68 = METHOD_16 ( VAR_69 ) ; VAR_70 += 4 ; VAR_71 += METHOD_17 ( VAR_72 , sizeof ( VAR_73 . VAR_74 . VAR_75 ) , ( unsigned TYPE_21 * ) VAR_76 . VAR_77 . VAR_78 ) ; ( TYPE_22 ) METHOD_18 ( VAR_79 , "dpx:file.version" , "%.8s" , VAR_80 . VAR_81 . VAR_82 ) ; VAR_83 . VAR_84 . VAR_85 = METHOD_19 ( VAR_86 ) ; VAR_87 += 4 ; VAR_88 . VAR_89 . VAR_90 = METHOD_20 ( VAR_91 ) ; VAR_92 += 4 ; if ( VAR_93 . VAR_94 . VAR_95 != ~ 0U ) ( TYPE_23 ) METHOD_21 ( VAR_96 , "dpx:file.ditto.key" , "%u" , VAR_97 . VAR_98 . VAR_99 ) ; VAR_100 . VAR_101 . VAR_102 = METHOD_22 ( VAR_103 ) ; VAR_104 += 4 ; VAR_105 . VAR_106 . VAR_107 = METHOD_23 ( VAR_108 ) ; VAR_109 += 4 ; VAR_110 . VAR_111 . VAR_112 = METHOD_24 ( VAR_113 ) ; VAR_114 += 4 ; VAR_115 += METHOD_25 ( VAR_116 , sizeof ( VAR_117 . VAR_118 . VAR_119 ) , ( unsigned TYPE_24 * ) VAR_120 . VAR_121 . VAR_122 ) ; ( TYPE_25 ) METHOD_26 ( VAR_123 , "dpx:file.filename" , "%.100s" , VAR_124 . VAR_125 . VAR_126 ) ; ( TYPE_26 ) METHOD_27 ( VAR_127 , "document" , "%.100s" , VAR_128 . VAR_129 . VAR_130 ) ; VAR_131 += METHOD_28 ( VAR_132 , sizeof ( VAR_133 . VAR_134 . VAR_135 ) , ( unsigned TYPE_27 * ) VAR_136 . VAR_137 . VAR_138 ) ; if ( * VAR_139 . VAR_140 . VAR_141 != '\\0' ) ( TYPE_28 ) METHOD_29 ( VAR_142 , "dpx:file.timestamp" , "%.24s" , VAR_143 . VAR_144 . VAR_145 ) ; VAR_146 += METHOD_30 ( VAR_147 , sizeof ( VAR_148 . VAR_149 . VAR_150 ) , ( unsigned TYPE_29 * ) VAR_151 . VAR_152 . VAR_153 ) ; if ( * VAR_154 . VAR_155 . VAR_156 == '\\0' ) { ( TYPE_30 ) METHOD_31 ( VAR_157 , "dpx:file.creator" , "%.100s" , METHOD_32 ( ( TYPE_31 * ) VAR_158 ) ) ; ( TYPE_32 ) METHOD_33 ( VAR_159 , "software" , "%.100s" , METHOD_34 ( ( TYPE_33 * ) VAR_160 ) ) ; } else { ( TYPE_34 ) METHOD_35 ( VAR_161 , "dpx:file.creator" , "%.100s" , VAR_162 . VAR_163 . VAR_164 ) ; ( TYPE_35 ) METHOD_36 ( VAR_165 , "software" , "%.100s" , VAR_166 . VAR_167 . VAR_168 ) ; } VAR_169 += METHOD_37 ( VAR_170 , sizeof ( VAR_171 . VAR_172 . VAR_173 ) , ( unsigned TYPE_36 * ) VAR_174 . VAR_175 . VAR_176 ) ; if ( * VAR_177 . VAR_178 . VAR_179 != '\\0' ) { ( TYPE_37 ) METHOD_38 ( VAR_180 , "dpx:file.project" , "%.200s" , VAR_181 . VAR_182 . VAR_183 ) ; ( TYPE_38 ) METHOD_39 ( VAR_184 , "comment" , "%.100s" , VAR_185 . VAR_186 . VAR_187 ) ; } VAR_188 += METHOD_40 ( VAR_189 , sizeof ( VAR_190 . VAR_191 . VAR_192 ) , ( unsigned TYPE_39 * ) VAR_193 . VAR_194 . VAR_195 ) ; if ( * VAR_196 . VAR_197 . VAR_198 != '\\0' ) { ( TYPE_40 ) METHOD_41 ( VAR_199 , "dpx:file.copyright" , "%.200s" , VAR_200 . VAR_201 . VAR_202 ) ; ( TYPE_41 ) METHOD_42 ( VAR_203 , "copyright" , "%.100s" , VAR_204 . VAR_205 . VAR_206 ) ; } VAR_207 . VAR_208 . VAR_209 = METHOD_43 ( VAR_210 ) ; VAR_211 += 4 ; if ( VAR_212 . VAR_213 . VAR_214 != ~ 0U ) ( TYPE_42 ) METHOD_44 ( VAR_215 , "dpx:file.encrypt_key" , "%u" , VAR_216 . VAR_217 . VAR_218 ) ; VAR_219 += METHOD_45 ( VAR_220 , sizeof ( VAR_221 . VAR_222 . VAR_223 ) , ( unsigned TYPE_43 * ) VAR_224 . VAR_225 . VAR_226 ) ; VAR_227 . VAR_228 . VAR_229 = METHOD_46 ( VAR_230 ) ; if ( VAR_231 . VAR_232 . VAR_233 > 7 ) METHOD_47 ( VAR_234 , "ImproperImageHeader" ) ; VAR_235 += 2 ; if ( VAR_236 . VAR_237 . VAR_238 != ( unsigned TYPE_44 ) ~ 0 ) ( TYPE_45 ) METHOD_48 ( VAR_239 , "dpx:image.orientation" , "%d" , VAR_240 . VAR_241 . VAR_242 ) ; switch ( VAR_243 . VAR_244 . VAR_245 ) { default : case 0 : VAR_246 -> VAR_247 = VAR_248 ; break ; case 1 : VAR_249 -> VAR_250 = VAR_251 ; break ; case 2 : VAR_252 -> VAR_253 = VAR_254 ; break ; case 3 : VAR_255 -> VAR_256 = VAR_257 ; break ; case 4 : VAR_258 -> VAR_259 = VAR_260 ; break ; case 5 : VAR_261 -> VAR_262 = VAR_263 ; break ; case 6 : VAR_264 -> VAR_265 = VAR_266 ; break ; case 7 : VAR_267 -> VAR_268 = VAR_269 ; break ; } VAR_270 . VAR_271 . VAR_272 = METHOD_49 ( VAR_273 ) ; if ( VAR_274 . VAR_275 . VAR_276 > VAR_277 ) METHOD_50 ( VAR_278 , "ImproperImageHeader" ) ; VAR_279 += 2 ; VAR_280 . VAR_281 . VAR_282 = METHOD_51 ( VAR_283 ) ; VAR_284 += 4 ; VAR_285 -> VAR_286 = VAR_287 . VAR_288 . VAR_289 ; VAR_290 . VAR_291 . VAR_292 = METHOD_52 ( VAR_293 ) ; VAR_294 += 4 ; VAR_295 -> VAR_296 = VAR_297 . VAR_298 . VAR_299 ; for ( VAR_300 = 0 ; VAR_301 < 8 ; VAR_302 ++ ) { TYPE_46 VAR_303 [ VAR_304 ] ; VAR_305 . VAR_306 . VAR_307 [ VAR_308 ] . VAR_309 = METHOD_53 ( VAR_310 ) ; VAR_311 += 4 ; VAR_312 . VAR_313 . VAR_314 [ VAR_315 ] . VAR_316 = METHOD_54 ( VAR_317 ) ; VAR_318 += 4 ; VAR_319 . VAR_320 . VAR_321 [ VAR_322 ] . VAR_323 = METHOD_55 ( VAR_324 ) ; VAR_325 += 4 ; VAR_326 . VAR_327 . VAR_328 [ VAR_329 ] . VAR_330 = METHOD_56 ( VAR_331 ) ; VAR_332 += 4 ; VAR_333 . VAR_334 . VAR_335 [ VAR_336 ] . VAR_337 = METHOD_57 ( VAR_338 ) ; VAR_339 += 4 ; VAR_340 . VAR_341 . VAR_342 [ VAR_343 ] . VAR_344 = ( unsigned TYPE_47 ) METHOD_58 ( VAR_345 ) ; VAR_346 ++ ; VAR_347 . VAR_348 . VAR_349 [ VAR_350 ] . VAR_351 = ( unsigned TYPE_48 ) METHOD_59 ( VAR_352 ) ; ( TYPE_49 ) METHOD_60 ( VAR_353 , VAR_354 , "dpx:image.element[%lu].transfer-characteristic" , ( TYPE_50 ) VAR_355 ) ; ( TYPE_51 ) METHOD_61 ( VAR_356 , VAR_357 , "%s" , METHOD_62 ( ( TYPE_52 ) VAR_358 . VAR_359 . VAR_360 [ VAR_361 ] . VAR_362 ) ) ; VAR_363 ++ ; VAR_364 . VAR_365 . VAR_366 [ VAR_367 ] . VAR_368 = ( unsigned TYPE_53 ) METHOD_63 ( VAR_369 ) ; VAR_370 ++ ; VAR_371 . VAR_372 . VAR_373 [ VAR_374 ] . VAR_375 = ( unsigned TYPE_54 ) METHOD_64 ( VAR_376 ) ; VAR_377 ++ ; VAR_378 . VAR_379 . VAR_380 [ VAR_381 ] . VAR_382 = METHOD_65 ( VAR_383 ) ; VAR_384 += 2 ; VAR_385 . VAR_386 . VAR_387 [ VAR_388 ] . VAR_389 = METHOD_66 ( VAR_390 ) ; VAR_391 += 2 ; VAR_392 . VAR_393 . VAR_394 [ VAR_395 ] . VAR_396 = METHOD_67 ( VAR_397 ) ; VAR_398 += 4 ; VAR_399 . VAR_400 . VAR_401 [ VAR_402 ] . VAR_403 = METHOD_68 ( VAR_404 ) ; VAR_405 += 4 ; VAR_406 . VAR_407 . VAR_408 [ VAR_409 ] . VAR_410 = METHOD_69 ( VAR_411 ) ; VAR_412 += 4 ; VAR_413 += METHOD_70 ( VAR_414 , sizeof ( VAR_415 . VAR_416 . VAR_417 [ VAR_418 ] . VAR_419 ) , ( unsigned TYPE_55 * ) VAR_420 . VAR_421 . VAR_422 [ VAR_423 ] . VAR_424 ) ; } ( TYPE_56 ) METHOD_71 ( VAR_425 , VAR_426 ) ; VAR_427 += METHOD_72 ( VAR_428 , sizeof ( VAR_429 . VAR_430 . VAR_431 ) , ( unsigned TYPE_57 * ) VAR_432 . VAR_433 . VAR_434 ) ; if ( VAR_435 . VAR_436 . VAR_437 >= 1664U ) { VAR_438 . VAR_439 . VAR_440 = METHOD_73 ( VAR_441 ) ; VAR_442 += 4 ; if ( VAR_443 . VAR_444 . VAR_445 != ~ 0U ) ( TYPE_58 ) METHOD_74 ( VAR_446 , "dpx:orientation.x_offset" , "%u" , VAR_447 . VAR_448 . VAR_449 ) ; VAR_450 . VAR_451 . VAR_452 = METHOD_75 ( VAR_453 ) ; VAR_454 += 4 ; if ( VAR_455 . VAR_456 . VAR_457 != ~ 0U ) ( TYPE_59 ) METHOD_76 ( VAR_458 , "dpx:orientation.y_offset" , "%u" , VAR_459 . VAR_460 . VAR_461 ) ; VAR_462 . VAR_463 . VAR_464 = METHOD_77 ( VAR_465 ) ; VAR_466 += 4 ; if ( METHOD_78 ( VAR_467 . VAR_468 . VAR_469 ) != VAR_470 ) ( TYPE_60 ) METHOD_79 ( VAR_471 , "dpx:orientation.x_center" , "%g" , VAR_472 . VAR_473 . VAR_474 ) ; VAR_475 . VAR_476 . VAR_477 = METHOD_80 ( VAR_478 ) ; VAR_479 += 4 ; if ( METHOD_81 ( VAR_480 . VAR_481 . VAR_482 ) != VAR_483 ) ( TYPE_61 ) METHOD_82 ( VAR_484 , "dpx:orientation.y_center" , "%g" , VAR_485 . VAR_486 . VAR_487 ) ; VAR_488 . VAR_489 . VAR_490 = METHOD_83 ( VAR_491 ) ; VAR_492 += 4 ; if ( VAR_493 . VAR_494 . VAR_495 != ~ 0U ) ( TYPE_62 ) METHOD_84 ( VAR_496 , "dpx:orientation.x_size" , "%u" , VAR_497 . VAR_498 . VAR_499 ) ; VAR_500 . VAR_501 . VAR_502 = METHOD_85 ( VAR_503 ) ; VAR_504 += 4 ; if ( VAR_505 . VAR_506 . VAR_507 != ~ 0U ) ( TYPE_63 ) METHOD_86 ( VAR_508 , "dpx:orientation.y_size" , "%u" , VAR_509 . VAR_510 . VAR_511 ) ; VAR_512 += METHOD_87 ( VAR_513 , sizeof ( VAR_514 . VAR_515 . VAR_516 ) , ( unsigned TYPE_64 * ) VAR_517 . VAR_518 . VAR_519 ) ; if ( * VAR_520 . VAR_521 . VAR_522 != '\\0' ) ( TYPE_65 ) METHOD_88 ( VAR_523 , "dpx:orientation.filename" , "%.100s" , VAR_524 . VAR_525 . VAR_526 ) ; VAR_527 += METHOD_89 ( VAR_528 , sizeof ( VAR_529 . VAR_530 . VAR_531 ) , ( unsigned TYPE_66 * ) VAR_532 . VAR_533 . VAR_534 ) ; if ( * VAR_535 . VAR_536 . VAR_537 != '\\0' ) ( TYPE_67 ) METHOD_90 ( VAR_538 , "dpx:orientation.timestamp" , "%.24s" , VAR_539 . VAR_540 . VAR_541 ) ; VAR_542 += METHOD_91 ( VAR_543 , sizeof ( VAR_544 . VAR_545 . VAR_546 ) , ( unsigned TYPE_68 * ) VAR_547 . VAR_548 . VAR_549 ) ; if ( * VAR_550 . VAR_551 . VAR_552 != '\\0' ) ( TYPE_69 ) METHOD_92 ( VAR_553 , "dpx:orientation.device" , "%.32s" , VAR_554 . VAR_555 . VAR_556 ) ; VAR_557 += METHOD_93 ( VAR_558 , sizeof ( VAR_559 . VAR_560 . VAR_561 ) , ( unsigned TYPE_70 * ) VAR_562 . VAR_563 . VAR_564 ) ; if ( * VAR_565 . VAR_566 . VAR_567 != '\\0' ) ( TYPE_71 ) METHOD_94 ( VAR_568 , "dpx:orientation.serial" , "%.32s" , VAR_569 . VAR_570 . VAR_571 ) ; for ( VAR_572 = 0 ; VAR_573 < 4 ; VAR_574 ++ ) { VAR_575 . VAR_576 . VAR_577 [ VAR_578 ] = METHOD_95 ( VAR_579 ) ; VAR_580 += 2 ; } if ( ( VAR_581 . VAR_582 . VAR_583 [ 0 ] != ( unsigned TYPE_72 ) ( ~ 0 ) ) && ( VAR_584 . VAR_585 . VAR_586 [ 1 ] != ( unsigned TYPE_73 ) ( ~ 0 ) ) ) ( TYPE_74 ) METHOD_96 ( VAR_587 , "dpx:orientation.border" , "%dx%d%+d%+d" , VAR_588 . VAR_589 . VAR_590 [ 0 ] , VAR_591 . VAR_592 . VAR_593 [ 1 ] , VAR_594 . VAR_595 . VAR_596 [ 2 ] , VAR_597 . VAR_598 . VAR_599 [ 3 ] ) ; for ( VAR_600 = 0 ; VAR_601 < 2 ; VAR_602 ++ ) { VAR_603 . VAR_604 . VAR_605 [ VAR_606 ] = METHOD_97 ( VAR_607 ) ; VAR_608 += 4 ; } if ( ( VAR_609 . VAR_610 . VAR_611 [ 0 ] != ~ 0U ) && ( VAR_612 . VAR_613 . VAR_614 [ 1 ] != ~ 0U ) ) ( TYPE_75 ) METHOD_98 ( VAR_615 , "dpx:orientation.aspect_ratio" , "%ux%u" , VAR_616 . VAR_617 . VAR_618 [ 0 ] , VAR_619 . VAR_620 . VAR_621 [ 1 ] ) ; VAR_622 += METHOD_99 ( VAR_623 , sizeof ( VAR_624 . VAR_625 . VAR_626 ) , ( unsigned TYPE_76 * ) VAR_627 . VAR_628 . VAR_629 ) ; } if ( VAR_630 . VAR_631 . VAR_632 >= 1920U ) { VAR_633 += METHOD_100 ( VAR_634 , sizeof ( VAR_635 . VAR_636 . VAR_637 ) , ( unsigned TYPE_77 * ) VAR_638 . VAR_639 . VAR_640 ) ; if ( * VAR_641 . VAR_642 . VAR_643 != '\\0' ) ( TYPE_78 ) METHOD_101 ( VAR_644 , "dpx:film.id" , "%.2s" , VAR_645 . VAR_646 . VAR_647 ) ; VAR_648 += METHOD_102 ( VAR_649 , sizeof ( VAR_650 . VAR_651 . VAR_652 ) , ( unsigned TYPE_79 * ) VAR_653 . VAR_654 . VAR_655 ) ; if ( * VAR_656 . VAR_657 . VAR_658 != '\\0' ) ( TYPE_80 ) METHOD_103 ( VAR_659 , "dpx:film.type" , "%.2s" , VAR_660 . VAR_661 . VAR_662 ) ; VAR_663 += METHOD_104 ( VAR_664 , sizeof ( VAR_665 . VAR_666 . VAR_667 ) , ( unsigned TYPE_81 * ) VAR_668 . VAR_669 . VAR_670 ) ; if ( * VAR_671 . VAR_672 . VAR_673 != '\\0' ) ( TYPE_82 ) METHOD_105 ( VAR_674 , "dpx:film.offset" , "%.2s" , VAR_675 . VAR_676 . VAR_677 ) ; VAR_678 += METHOD_106 ( VAR_679 , sizeof ( VAR_680 . VAR_681 . VAR_682 ) , ( unsigned TYPE_83 * ) VAR_683 . VAR_684 . VAR_685 ) ; if ( * VAR_686 . VAR_687 . VAR_688 != '\\0' ) ( TYPE_84 ) METHOD_107 ( VAR_689 , "dpx:film.prefix" , "%.6s" , VAR_690 . VAR_691 . VAR_692 ) ; VAR_693 += METHOD_108 ( VAR_694 , sizeof ( VAR_695 . VAR_696 . VAR_697 ) , ( unsigned TYPE_85 * ) VAR_698 . VAR_699 . VAR_700 ) ; if ( * VAR_701 . VAR_702 . VAR_703 != '\\0' ) ( TYPE_86 ) METHOD_109 ( VAR_704 , "dpx:film.count" , "%.4s" , VAR_705 . VAR_706 . VAR_707 ) ; VAR_708 += METHOD_110 ( VAR_709 , sizeof ( VAR_710 . VAR_711 . VAR_712 ) , ( unsigned TYPE_87 * ) VAR_713 . VAR_714 . VAR_715 ) ; if ( * VAR_716 . VAR_717 . VAR_718 != '\\0' ) ( TYPE_88 ) METHOD_111 ( VAR_719 , "dpx:film.format" , "%.4s" , VAR_720 . VAR_721 . VAR_722 ) ; VAR_723 . VAR_724 . VAR_725 = METHOD_112 ( VAR_726 ) ; VAR_727 += 4 ; if ( VAR_728 . VAR_729 . VAR_730 != ~ 0U ) ( TYPE_89 ) METHOD_113 ( VAR_731 , "dpx:film.frame_position" , "%u" , VAR_732 . VAR_733 . VAR_734 ) ; VAR_735 . VAR_736 . VAR_737 = METHOD_114 ( VAR_738 ) ; VAR_739 += 4 ; if ( VAR_740 . VAR_741 . VAR_742 != ~ 0U ) ( TYPE_90 ) METHOD_115 ( VAR_743 , "dpx:film.sequence_extent" , "%u" , VAR_744 . VAR_745 . VAR_746 ) ; VAR_747 . VAR_748 . VAR_749 = METHOD_116 ( VAR_750 ) ; VAR_751 += 4 ; if ( VAR_752 . VAR_753 . VAR_754 != ~ 0U ) ( TYPE_91 ) METHOD_117 ( VAR_755 , "dpx:film.held_count" , "%u" , VAR_756 . VAR_757 . VAR_758 ) ; VAR_759 . VAR_760 . VAR_761 = METHOD_118 ( VAR_762 ) ; VAR_763 += 4 ; if ( METHOD_119 ( VAR_764 . VAR_765 . VAR_766 ) != VAR_767 ) ( TYPE_92 ) METHOD_120 ( VAR_768 , "dpx:film.frame_rate" , "%g" , VAR_769 . VAR_770 . VAR_771 ) ; VAR_772 . VAR_773 . VAR_774 = METHOD_121 ( VAR_775 ) ; VAR_776 += 4 ; if ( METHOD_122 ( VAR_777 . VAR_778 . VAR_779 ) != VAR_780 ) ( TYPE_93 ) METHOD_123 ( VAR_781 , "dpx:film.shutter_angle" , "%g" , VAR_782 . VAR_783 . VAR_784 ) ; VAR_785 += METHOD_124 ( VAR_786 , sizeof ( VAR_787 . VAR_788 . VAR_789 ) , ( unsigned TYPE_94 * ) VAR_790 . VAR_791 . VAR_792 ) ; if ( * VAR_793 . VAR_794 . VAR_795 != '\\0' ) ( TYPE_95 ) METHOD_125 ( VAR_796 , "dpx:film.frame_id" , "%.32s" , VAR_797 . VAR_798 . VAR_799 ) ; VAR_800 += METHOD_126 ( VAR_801 , sizeof ( VAR_802 . VAR_803 . VAR_804 ) , ( unsigned TYPE_96 * ) VAR_805 . VAR_806 . VAR_807 ) ; if ( * VAR_808 . VAR_809 . VAR_810 != '\\0' ) ( TYPE_97 ) METHOD_127 ( VAR_811 , "dpx:film.slate" , "%.100s" , VAR_812 . VAR_813 . VAR_814 ) ; VAR_815 += METHOD_128 ( VAR_816 , sizeof ( VAR_817 . VAR_818 . VAR_819 ) , ( unsigned TYPE_98 * ) VAR_820 . VAR_821 . VAR_822 ) ; } if ( VAR_823 . VAR_824 . VAR_825 >= 2048U ) { VAR_826 . VAR_827 . VAR_828 = ( unsigned TYPE_99 ) METHOD_129 ( VAR_829 ) ; VAR_830 += 4 ; METHOD_130 ( VAR_831 . VAR_832 . VAR_833 , VAR_834 ) ; ( TYPE_100 ) METHOD_131 ( VAR_835 , "dpx:television.time.code" , VAR_836 ) ; VAR_837 . VAR_838 . VAR_839 = ( unsigned TYPE_101 ) METHOD_132 ( VAR_840 ) ; VAR_841 += 4 ; METHOD_133 ( VAR_842 . VAR_843 . VAR_844 , VAR_845 ) ; ( TYPE_102 ) METHOD_134 ( VAR_846 , "dpx:television.user.bits" , VAR_847 ) ; VAR_848 . VAR_849 . VAR_850 = ( unsigned TYPE_103 ) METHOD_135 ( VAR_851 ) ; VAR_852 ++ ; if ( VAR_853 . VAR_854 . VAR_855 != 0 ) ( TYPE_104 ) METHOD_136 ( VAR_856 , "dpx:television.interlace" , "%.20g" , ( TYPE_105 ) VAR_857 . VAR_858 . VAR_859 ) ; VAR_860 . VAR_861 . VAR_862 = ( unsigned TYPE_106 ) METHOD_137 ( VAR_863 ) ; VAR_864 ++ ; if ( VAR_865 . VAR_866 . VAR_867 != 0 ) ( TYPE_107 ) METHOD_138 ( VAR_868 , "dpx:television.field_number" , "%.20g" , ( TYPE_108 ) VAR_869 . VAR_870 . VAR_871 ) ; VAR_872 . VAR_873 . VAR_874 = ( unsigned TYPE_109 ) METHOD_139 ( VAR_875 ) ; VAR_876 ++ ; if ( VAR_877 . VAR_878 . VAR_879 != 0 ) ( TYPE_110 ) METHOD_140 ( VAR_880 , "dpx:television.video_signal" , "%.20g" , ( TYPE_111 ) VAR_881 . VAR_882 . VAR_883 ) ; VAR_884 . VAR_885 . VAR_886 = ( unsigned TYPE_112 ) METHOD_141 ( VAR_887 ) ; VAR_888 ++ ; if ( VAR_889 . VAR_890 . VAR_891 != 0 ) ( TYPE_113 ) METHOD_142 ( VAR_892 , "dpx:television.padding" , "%d" , VAR_893 . VAR_894 . VAR_895 ) ; VAR_896 . VAR_897 . VAR_898 = METHOD_143 ( VAR_899 ) ; VAR_900 += 4 ; if ( METHOD_144 ( VAR_901 . VAR_902 . VAR_903 ) != VAR_904 ) ( TYPE_114 ) METHOD_145 ( VAR_905 , "dpx:television.horizontal_sample_rate" , "%g" , VAR_906 . VAR_907 . VAR_908 ) ; VAR_909 . VAR_910 . VAR_911 = METHOD_146 ( VAR_912 ) ; VAR_913 += 4 ; if ( METHOD_147 ( VAR_914 . VAR_915 . VAR_916 ) != VAR_917 ) ( TYPE_115 ) METHOD_148 ( VAR_918 , "dpx:television.vertical_sample_rate" , "%g" , VAR_919 . VAR_920 . VAR_921 ) ; VAR_922 . VAR_923 . VAR_924 = METHOD_149 ( VAR_925 ) ; VAR_926 += 4 ; if ( METHOD_150 ( VAR_927 . VAR_928 . VAR_929 ) != VAR_930 ) ( TYPE_116 ) METHOD_151 ( VAR_931 , "dpx:television.frame_rate" , "%g" , VAR_932 . VAR_933 . VAR_934 ) ; VAR_935 . VAR_936 . VAR_937 = METHOD_152 ( VAR_938 ) ; VAR_939 += 4 ; if ( METHOD_153 ( VAR_940 . VAR_941 . VAR_942 ) != VAR_943 ) ( TYPE_117 ) METHOD_154 ( VAR_944 , "dpx:television.time_offset" , "%g" , VAR_945 . VAR_946 . VAR_947 ) ; VAR_948 . VAR_949 . VAR_950 = METHOD_155 ( VAR_951 ) ; VAR_952 += 4 ; if ( METHOD_156 ( VAR_953 . VAR_954 . VAR_955 ) != VAR_956 ) ( TYPE_118 ) METHOD_157 ( VAR_957 , "dpx:television.gamma" , "%g" , VAR_958 . VAR_959 . VAR_960 ) ; VAR_961 . VAR_962 . VAR_963 = METHOD_158 ( VAR_964 ) ; VAR_965 += 4 ; if ( METHOD_159 ( VAR_966 . VAR_967 . VAR_968 ) != VAR_969 ) ( TYPE_119 ) METHOD_160 ( VAR_970 , "dpx:television.black_level" , "%g" , VAR_971 . VAR_972 . VAR_973 ) ; VAR_974 . VAR_975 . VAR_976 = METHOD_161 ( VAR_977 ) ; VAR_978 += 4 ; if ( METHOD_162 ( VAR_979 . VAR_980 . VAR_981 ) != VAR_982 ) ( TYPE_120 ) METHOD_163 ( VAR_983 , "dpx:television.black_gain" , "%g" , VAR_984 . VAR_985 . VAR_986 ) ; VAR_987 . VAR_988 . VAR_989 = METHOD_164 ( VAR_990 ) ; VAR_991 += 4 ; if ( METHOD_165 ( VAR_992 . VAR_993 . VAR_994 ) != VAR_995 ) ( TYPE_121 ) METHOD_166 ( VAR_996 , "dpx:television.break_point" , "%g" , VAR_997 . VAR_998 . VAR_999 ) ; VAR_1000 . VAR_1001 . VAR_1002 = METHOD_167 ( VAR_1003 ) ; VAR_1004 += 4 ; if ( METHOD_168 ( VAR_1005 . VAR_1006 . VAR_1007 ) != VAR_1008 ) ( TYPE_122 ) METHOD_169 ( VAR_1009 , "dpx:television.white_level" , "%g" , VAR_1010 . VAR_1011 . VAR_1012 ) ; VAR_1013 . VAR_1014 . VAR_1015 = METHOD_170 ( VAR_1016 ) ; VAR_1017 += 4 ; if ( METHOD_171 ( VAR_1018 . VAR_1019 . VAR_1020 ) != VAR_1021 ) ( TYPE_123 ) METHOD_172 ( VAR_1022 , "dpx:television.integration_times" , "%g" , VAR_1023 . VAR_1024 . VAR_1025 ) ; VAR_1026 += METHOD_173 ( VAR_1027 , sizeof ( VAR_1028 . VAR_1029 . VAR_1030 ) , ( unsigned TYPE_124 * ) VAR_1031 . VAR_1032 . VAR_1033 ) ; } if ( VAR_1034 . VAR_1035 . VAR_1036 > 2080U ) { VAR_1037 += METHOD_174 ( VAR_1038 , sizeof ( VAR_1039 . VAR_1040 . VAR_1041 ) , ( unsigned TYPE_125 * ) VAR_1042 . VAR_1043 . VAR_1044 ) ; if ( * VAR_1045 . VAR_1046 . VAR_1047 != '\\0' ) ( TYPE_126 ) METHOD_175 ( VAR_1048 , "dpx:user.id" , "%.32s" , VAR_1049 . VAR_1050 . VAR_1051 ) ; if ( ( VAR_1052 . VAR_1053 . VAR_1054 != ~ 0U ) && ( ( TYPE_127 ) VAR_1055 . VAR_1056 . VAR_1057 > sizeof ( VAR_1058 . VAR_1059 . VAR_1060 ) ) ) { TYPE_128 * VAR_1061 ; VAR_1062 = METHOD_176 ( ( const TYPE_129 * ) VAR_1063 , VAR_1064 . VAR_1065 . VAR_1066 - sizeof ( VAR_1067 . VAR_1068 . VAR_1069 ) ) ; if ( VAR_1070 == ( TYPE_130 * ) VAR_1071 ) METHOD_177 ( VAR_1072 , "MemoryAllocationFailed" ) ; VAR_1073 += METHOD_178 ( VAR_1074 , METHOD_179 ( VAR_1075 ) , METHOD_180 ( VAR_1076 ) ) ; ( TYPE_131 ) METHOD_181 ( VAR_1077 , "dpx:user-data" , VAR_1078 ) ; VAR_1079 = METHOD_182 ( VAR_1080 ) ; } } for ( ; VAR_1081 < ( TYPE_132 ) VAR_1082 . VAR_1083 . VAR_1084 ; VAR_1085 ++ ) ( TYPE_133 ) METHOD_183 ( VAR_1086 ) ; if ( VAR_1087 -> VAR_1088 != VAR_1089 ) { ( TYPE_134 ) METHOD_184 ( VAR_1090 ) ;  return ( METHOD_185 ( VAR_1091 ) ) ;  } for ( VAR_1092 = 0 ; VAR_1093 < ( TYPE_135 ) VAR_1094 . VAR_1095 . VAR_1096 ; VAR_1097 ++ ) { if ( ( VAR_1098 . VAR_1099 . VAR_1100 [ VAR_1101 ] . VAR_1102 != ~ 0U ) && ( VAR_1103 . VAR_1104 . VAR_1105 [ VAR_1106 ] . VAR_1107 != 0U ) ) { TYPE_136 VAR_1108 ; VAR_1109 = ( TYPE_137 ) VAR_1110 . VAR_1111 . VAR_1112 [ VAR_1113 ] . VAR_1114 ; if ( VAR_1115 < VAR_1116 ) VAR_1117 = METHOD_186 ( VAR_1118 , VAR_1119 , VAR_1120 ) ; else for ( ; VAR_1121 < VAR_1122 ; VAR_1123 ++ ) ( TYPE_138 ) METHOD_187 ( VAR_1124 ) ; if ( VAR_1125 != VAR_1126 ) METHOD_188 ( VAR_1127 , "UnableToReadImageData" ) ; } METHOD_189 ( ( TYPE_139 ) VAR_1128 . VAR_1129 . VAR_1130 [ VAR_1131 ] . VAR_1132 , & VAR_1133 -> VAR_1134 ) ; VAR_1135 -> VAR_1136 = VAR_1137 . VAR_1138 . VAR_1139 [ VAR_1140 ] . VAR_1141 ; VAR_1142 = 1 ; VAR_1143 = VAR_1144 ; VAR_1145 = VAR_1146 . VAR_1147 . VAR_1148 [ VAR_1149 ] . VAR_1150 ; switch ( VAR_1151 ) { case VAR_1152 : { VAR_1153 = 2 ; VAR_1154 = VAR_1155 ; break ; } case VAR_1156 : case VAR_1157 : { VAR_1158 = 3 ; VAR_1159 = VAR_1160 ; break ; } case VAR_1161 : { VAR_1162 = 3 ; VAR_1163 = VAR_1164 ; break ; } case VAR_1165 : case VAR_1166 : { VAR_1167 -> VAR_1168 = VAR_1169 ; VAR_1170 = 4 ; VAR_1171 = VAR_1172 ; break ; } default : break ; } switch ( VAR_1173 ) { case VAR_1174 : case VAR_1175 : case VAR_1176 : { ( TYPE_140 ) METHOD_190 ( VAR_1177 , VAR_1178 ) ; break ; } case VAR_1179 : { ( TYPE_141 ) METHOD_191 ( VAR_1180 , VAR_1181 ) ; break ; } default : { ( TYPE_142 ) METHOD_192 ( VAR_1182 , VAR_1183 ) ; if ( VAR_1184 . VAR_1185 . VAR_1186 [ VAR_1187 ] . VAR_1188 == VAR_1189 ) ( TYPE_143 ) METHOD_193 ( VAR_1190 , VAR_1191 ) ; if ( VAR_1192 . VAR_1193 . VAR_1194 [ VAR_1195 ] . VAR_1196 == VAR_1197 ) ( TYPE_144 ) METHOD_194 ( VAR_1198 , VAR_1199 ) ; break ; } } VAR_1200 = METHOD_195 ( VAR_1201 -> VAR_1202 , VAR_1203 , VAR_1204 -> VAR_1205 , VAR_1206 . VAR_1207 . VAR_1208 [ VAR_1209 ] . VAR_1210 == 0 ? VAR_1211 : VAR_1212 ) ; VAR_1213 = VAR_1214 ; VAR_1215 = 0 ; VAR_1216 = METHOD_196 ( VAR_1217 , VAR_1218 ) ; if ( VAR_1219 == ( TYPE_145 * ) VAR_1220 ) METHOD_197 ( VAR_1221 , "MemoryAllocationFailed" ) ; METHOD_198 ( VAR_1222 , 32 ) ; METHOD_199 ( VAR_1223 , VAR_1224 . VAR_1225 . VAR_1226 [ VAR_1227 ] . VAR_1228 == 0 ? VAR_1229 : VAR_1230 ) ; for ( VAR_1231 = 0 ; VAR_1232 < ( TYPE_146 ) VAR_1233 -> VAR_1234 ; VAR_1235 ++ ) { TYPE_147 VAR_1236 ; register TYPE_148 * VAR_1237 ; TYPE_149 VAR_1238 ; TYPE_150 VAR_1239 , VAR_1240 ; unsigned TYPE_151 * VAR_1241 ; if ( VAR_1242 == VAR_1243 ) continue ; VAR_1244 = METHOD_200 ( VAR_1245 ) ; { VAR_1246 = METHOD_201 ( VAR_1247 , VAR_1248 , VAR_1249 ) ; if ( ( VAR_1250 -> VAR_1251 != ( TYPE_152 ) VAR_1252 ) && ( VAR_1253 -> VAR_1254 == ( TYPE_153 * ) VAR_1255 ) ) { TYPE_154 VAR_1256 ; VAR_1257 = METHOD_202 ( VAR_1258 , VAR_1259 , ( TYPE_155 ) VAR_1260 , VAR_1261 -> VAR_1262 ) ; if ( VAR_1263 == VAR_1264 ) VAR_1265 = VAR_1266 ; } VAR_1267 = VAR_1268 ++ ; } if ( VAR_1269 != ( TYPE_156 ) VAR_1270 ) VAR_1271 = VAR_1272 ; VAR_1273 = METHOD_203 ( VAR_1274 , 0 , VAR_1275 , VAR_1276 -> VAR_1277 , 1 , VAR_1278 ) ; if ( VAR_1279 == ( TYPE_157 * ) VAR_1280 ) { VAR_1281 = VAR_1282 ; continue ; } VAR_1283 = METHOD_204 ( VAR_1284 , ( TYPE_158 * ) VAR_1285 , VAR_1286 , VAR_1287 , VAR_1288 , VAR_1289 ) ; ( TYPE_159 ) VAR_1290 ; VAR_1291 = METHOD_205 ( VAR_1292 , VAR_1293 ) ; if ( VAR_1294 == VAR_1295 ) VAR_1296 = VAR_1297 ; } VAR_1298 = METHOD_206 ( VAR_1299 ) ; if ( VAR_1300 == VAR_1301 ) METHOD_207 ( VAR_1302 , "UnableToReadImageData" ) ; METHOD_208 ( VAR_1303 , VAR_1304 ) ; if ( METHOD_209 ( VAR_1305 ) != VAR_1306 ) METHOD_210 ( VAR_1307 , VAR_1308 , "UnexpectedEndOfFile" , VAR_1309 -> VAR_1310 ) ; } ( TYPE_160 ) METHOD_211 ( VAR_1311 ) ; return ( METHOD_212 ( VAR_1312 ) ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; unsigned TYPE_1 VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 , & VAR_6 ) ; if ( ! VAR_7 ) return ; if ( VAR_8 -> VAR_9 == VAR_10 -> VAR_11 ) { VAR_12 -> VAR_13 -> METHOD_2 ( VAR_14 ) ; VAR_15 -> VAR_16 = 1 ; VAR_17 -> VAR_18 = VAR_19 -> VAR_20 ;  VAR_21 -> VAR_22 = - 1 ;  ++ VAR_23 -> VAR_24 ;  VAR_25 -> VAR_26 += VAR_27 -> VAR_28 ;  } METHOD_3 ( VAR_29 , VAR_30 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { const TYPE_3 * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 ; METHOD_1 ( VAR_9 ) ; VAR_10 = METHOD_2 ( VAR_11 , "://" ) ;  if ( ! VAR_12 )  return 0 ; VAR_13 = VAR_14 + 3 ; VAR_15 = METHOD_3 ( VAR_16 , '@' ) ; VAR_17 = METHOD_4 ( VAR_18 , ':' ) ; VAR_19 = METHOD_5 ( VAR_20 , '/' ) ; if ( ! VAR_21 || VAR_22 <= VAR_23 ) { VAR_24 = VAR_25 ; } else if ( ! VAR_26 || VAR_27 <= VAR_28 ) { VAR_29 -> VAR_30 = METHOD_6 ( VAR_31 , VAR_32 - VAR_33 ) ; VAR_34 = VAR_35 + 1 ; } else { VAR_36 -> VAR_37 = METHOD_7 ( VAR_38 , VAR_39 - VAR_40 ) ; VAR_41 -> VAR_42 = METHOD_8 ( VAR_43 + 1 , VAR_44 - ( VAR_45 + 1 ) ) ; VAR_46 = VAR_47 + 1 ; } if ( VAR_48 - VAR_49 > 0 ) VAR_50 -> VAR_51 = METHOD_9 ( VAR_52 , VAR_53 - VAR_54 ) ; VAR_55 -> VAR_56 = METHOD_10 ( VAR_57 , VAR_58 - VAR_59 ) ; while ( * VAR_60 == '/' ) VAR_61 ++ ; if ( * VAR_62 ) { TYPE_4 * VAR_63 ; VAR_64 -> VAR_65 = METHOD_11 ( VAR_66 ) ; VAR_67 = VAR_68 -> VAR_69 + METHOD_12 ( VAR_70 -> VAR_71 ) - 1 ; while ( VAR_72 > VAR_73 -> VAR_74 && * VAR_75 == '/' ) * VAR_76 -- = '\\0' ; } if ( METHOD_13 ( VAR_77 , VAR_78 , "username" , VAR_79 -> VAR_80 ) < 0 || METHOD_14 ( VAR_81 , VAR_82 , "password" , VAR_83 -> VAR_84 ) < 0 || METHOD_15 ( VAR_85 , VAR_86 , "protocol" , VAR_87 -> VAR_88 ) < 0 || METHOD_16 ( VAR_89 , VAR_90 , "host" , VAR_91 -> VAR_92 ) < 0 || METHOD_17 ( VAR_93 , VAR_94 , "path" , VAR_95 -> VAR_96 ) < 0 ) return - 1 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ,  struct STRUCT_OR_UNION_0 * VAR_3 )  { static TYPE_4 ( VAR_4 ) ; unsigned TYPE_5 VAR_5 ; METHOD_1 ( & VAR_6 , VAR_7 ) ; if ( * VAR_8 ) { METHOD_2 ( & VAR_9 , VAR_10 ) ; return VAR_11 ; } METHOD_3 ( VAR_12 , VAR_13 ) ; * VAR_14 = VAR_15 ; METHOD_4 ( & VAR_16 , VAR_17 ) ;  METHOD_5 ( VAR_18 ) ;  return VAR_19 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = container_of ( VAR_2 , struct STRUCT_OR_UNION_2 , VAR_3 ) ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 -> VAR_7 ? VAR_8 -> VAR_9 -> VAR_10 : VAR_11 -> VAR_12 -> VAR_13 ;  if ( VAR_14 -> VAR_15 && VAR_16 > 0 ) {  METHOD_1 ( VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_2 ( VAR_20 -> VAR_21 , VAR_22 , & VAR_23 -> VAR_24 ) ; if ( METHOD_3 ( & VAR_25 -> VAR_26 ) ) VAR_27 = - VAR_28 ; METHOD_4 ( VAR_29 -> VAR_30 ) ; } VAR_31 -> VAR_32 -> METHOD_5 ( VAR_33 -> VAR_34 , VAR_35 , VAR_36 ) ; if ( VAR_37 -> VAR_38 -> VAR_39 &&  ! ( VAR_40 -> VAR_41 -> VAR_42 & VAR_43 ) )  METHOD_6 ( VAR_44 -> VAR_45 -> VAR_46 , 1 ) ;  METHOD_7 ( VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ) ;  VAR_51 -> VAR_52 -> VAR_53 = VAR_54 ; if ( VAR_55 -> VAR_56 ) METHOD_8 ( VAR_57 -> VAR_58 ) ; METHOD_9 ( VAR_59 -> VAR_60 ) ; METHOD_10 ( VAR_61 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = & ( METHOD_1 ( VAR_5 ) -> VAR_6 ) ; if ( VAR_7 -> VAR_8 != VAR_9 ) goto VAR_10 ; if ( METHOD_2 ( VAR_11 ) ) goto VAR_12 ; if ( ! METHOD_3 ( VAR_13 , VAR_14 , VAR_15 ) ) goto VAR_16 ; if ( METHOD_4 ( VAR_17 ) -> VAR_18 . VAR_19 && METHOD_5 ( VAR_20 ) ) return VAR_21 ; METHOD_6 ( VAR_22 ) ; if ( METHOD_7 ( VAR_23 ) -> VAR_24 <= 1 ) goto VAR_25 ; if ( ! METHOD_8 ( VAR_26 ) ) goto VAR_27 ; VAR_28 = METHOD_9 ( VAR_29 ) ; if ( VAR_30 -> VAR_31 && VAR_32 -> VAR_33 ) goto VAR_34 ; METHOD_10 ( VAR_35 ) -> VAR_36 |= VAR_37 ; VAR_38 = METHOD_11 ( & VAR_39 -> VAR_40 , VAR_41 ) ; if ( ! METHOD_12 ( VAR_42 ) && METHOD_13 ( VAR_43 , VAR_44 ) ) { METHOD_14 ( METHOD_15 ( VAR_45 -> VAR_46 . VAR_47 ) , VAR_48 ) ; METHOD_16 ( VAR_49 , VAR_50 , VAR_51 , METHOD_17 ( VAR_52 ) ) ; goto VAR_53 ; } if ( METHOD_18 ( VAR_54 , METHOD_19 ( VAR_55 -> VAR_56 . VAR_57 ) + VAR_58 -> VAR_59 . VAR_60 ) ) goto VAR_61 ; VAR_62 = METHOD_20 ( VAR_63 ) ; METHOD_21 ( VAR_64 ) ;  if ( VAR_65 -> VAR_66 & VAR_67 && ! VAR_68 -> VAR_69 && ! METHOD_22 ( VAR_70 ) )  METHOD_23 ( VAR_71 ) ; VAR_72 -> VAR_73 = METHOD_24 ( VAR_74 -> VAR_75 ) ; return METHOD_25 ( VAR_76 , VAR_77 , VAR_78 , VAR_79 -> VAR_80 , VAR_81 -> VAR_82 . VAR_83 , VAR_84 ) ; VAR_85 : METHOD_26 ( VAR_86 , VAR_87 , VAR_88 , 0 ) ; goto VAR_89 ; VAR_90 : METHOD_27 ( METHOD_28 ( METHOD_29 ( VAR_91 ) -> VAR_92 ) , VAR_93 ) ; METHOD_30 ( VAR_94 , VAR_95 , VAR_96 , 0 ) ; VAR_97 : METHOD_31 ( VAR_98 ) ; return VAR_99 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_5 * const VAR_8 = VAR_9 -> VAR_10 ; TYPE_2 VAR_11 ; METHOD_1 ( VAR_12 , METHOD_2 ( "ikev2parentinR1outI2:calculatingg^{xy},sendingI2" ) ) ; if ( VAR_13 == VAR_14 ) { METHOD_3 ( VAR_15 , "%s:Requestwasdisconnectedfromstate" , VAR_16 ) ; if ( VAR_17 -> VAR_18 ) METHOD_4 ( VAR_19 -> VAR_20 ) ; return ; } METHOD_5 ( VAR_21 == VAR_22 ) ; METHOD_6 ( VAR_23 == VAR_24 ) ; METHOD_7 ( VAR_25 != VAR_26 ) ; METHOD_8 ( VAR_27 -> VAR_28 == VAR_29 -> VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 ) ; METHOD_10 ( VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 = METHOD_11 ( VAR_38 , VAR_39 ) ; if ( VAR_40 -> VAR_41 != VAR_42 ) { METHOD_12 ( & VAR_43 -> VAR_44 , VAR_45 ) ; if ( VAR_46 -> VAR_47 ) METHOD_13 ( VAR_48 -> VAR_49 ) ; } METHOD_14 ( ) ;  METHOD_15 ( METHOD_16 ( ) ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  struct STRUCT_OR_UNION_3 * VAR_1 = STRUCT_OR_UNION_4 -> VAR_2 . VAR_3 [ 0 ] ;   struct STRUCT_OR_UNION_5 * VAR_4 ;  struct STRUCT_OR_UNION_6 * VAR_5 ; TYPE_1 VAR_6 = VAR_7 -> VAR_8 ; TYPE_2 * VAR_9 ; TYPE_3 VAR_10 = 0 ; if ( ! VAR_11 -> VAR_12 ) return - VAR_13 ; if ( VAR_14 <= 0 || VAR_15 > 32767 || ! VAR_16 -> VAR_17 ) return - VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 + 1 , VAR_21 ) ; if ( ! VAR_22 ) return - VAR_23 ; VAR_24 = METHOD_2 ( ) ; if ( ! VAR_25 ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } VAR_29 = METHOD_3 ( STRUCT_OR_UNION_7 ) ; if ( ! VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } METHOD_4 ( VAR_34 , VAR_35 -> VAR_36 , VAR_37 ) ; VAR_38 [ VAR_39 ] = '\\0' ; VAR_40 = METHOD_5 ( VAR_41 , VAR_42 , VAR_43 ) ; if ( VAR_44 != VAR_45 ) { VAR_46 = - VAR_47 ; METHOD_6 ( VAR_48 ) ; goto VAR_49 ; } if ( ! VAR_50 -> VAR_51 ) { VAR_52 = - VAR_53 ; METHOD_7 ( VAR_54 ) ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 -> VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_8 ( VAR_64 -> STRUCT_OR_UNION_8 , VAR_65 -> STRUCT_OR_UNION_9 , VAR_66 -> VAR_67 ) ; METHOD_9 ( VAR_68 ) ; METHOD_10 ( VAR_69 ) ; VAR_70 = METHOD_11 ( VAR_71 , VAR_72 ) ; if ( VAR_73 < 0 ) { METHOD_12 ( "trusted_key:key_sealfailed(%d)\\n" , VAR_74 ) ; METHOD_13 ( VAR_75 ) ; goto VAR_76 ; } if ( VAR_77 -> METHOD_14 ) { VAR_78 = METHOD_15 ( VAR_79 -> METHOD_16 ) ; if ( VAR_80 < 0 ) { METHOD_17 ( "trusted_key:pcrlockfailed(%d)\\n" , VAR_81 ) ; METHOD_18 ( VAR_82 ) ; goto VAR_83 ; } } METHOD_19 ( STRUCT_OR_UNION_10 , VAR_84 ) ; METHOD_20 ( & VAR_85 -> VAR_86 , VAR_87 ) ; VAR_88 : METHOD_21 ( VAR_89 ) ; METHOD_22 ( VAR_90 ) ; return VAR_91 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; for ( VAR_5 = 4 , VAR_6 = 0 ; ; ) { if ( ( VAR_7 = METHOD_1 ( VAR_8 ) ) == VAR_9 ) { return - 1 ; }  VAR_10 |= ( VAR_11 << 24 ) ;  if ( -- VAR_12 <= 0 ) { break ; } VAR_13 >>= 8 ; } if ( VAR_14 ) { * VAR_15 = VAR_16 ; } return 0 ; }
static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 * VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; unsigned TYPE_3 VAR_5 ; unsigned TYPE_4 VAR_6 , VAR_7 ;  while ( ( VAR_8 = METHOD_1 ( & VAR_9 ) ) != VAR_10 ) {  VAR_11 = ( ( VAR_12 -> VAR_13 [ 0 ] << 8 ) & 0xF00 ) + ( ( VAR_14 -> VAR_15 [ 1 ] << 0 ) & 0x0FF ) ; VAR_16 = VAR_17 -> VAR_18 [ 2 ] ;  VAR_19 = ( TYPE_5 * ) ( VAR_20 -> VAR_21 + 4 ) ;  VAR_22 = VAR_23 + 1 - VAR_24 ; METHOD_2 ( VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 , VAR_28 ) ; if ( VAR_29 ) { if ( METHOD_4 ( VAR_30 , VAR_31 ) == 0 ) METHOD_5 ( VAR_32 ) ; continue ; } if ( VAR_33 == VAR_34 ) { if ( ( VAR_35 = METHOD_6 ( VAR_36 ) ) != VAR_37 ) { if ( METHOD_7 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 ) == 0 ) METHOD_8 ( VAR_42 ) ; } else { METHOD_9 ( VAR_43 ) ; } } else { METHOD_10 ( VAR_44 ) ; } } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ; VAR_15 = - VAR_16 ; if ( VAR_17 -> VAR_18 & ( VAR_19 - 1 ) ) goto VAR_20 ; if ( VAR_21 -> VAR_22 & ( VAR_23 - 1 ) ) goto VAR_24 ; if ( VAR_25 && ( ( VAR_26 -> VAR_27 & ( VAR_28 - 1 ) ) || ! METHOD_2 ( VAR_29 , ( TYPE_5 TYPE_6 * ) ( unsigned TYPE_7 ) VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ) ) goto VAR_34 ; if ( VAR_35 -> VAR_36 >= VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 + VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) goto VAR_45 ; VAR_46 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_47 , VAR_48 -> VAR_49 ) ; VAR_50 = VAR_51 -> VAR_52 >> VAR_53 ; VAR_54 = VAR_55 -> VAR_56 >> VAR_57 ; VAR_58 = - VAR_59 ; if ( VAR_60 > VAR_61 ) goto VAR_62 ; if ( ! VAR_63 ) VAR_64 -> VAR_65 &= ~ VAR_66 ; VAR_67 = VAR_68 = * VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 . VAR_88 && VAR_89 != VAR_90 . VAR_91 ) goto VAR_92 ; if ( ! VAR_93 && ! VAR_94 . VAR_95 ) goto VAR_96 ; VAR_97 = - VAR_98 ; METHOD_4 ( VAR_99 , STRUCT_OR_UNION_7 -> VAR_100 ) { if ( VAR_101 -> VAR_102 >= VAR_103 || VAR_104 == VAR_105 ) continue ; if ( ! ( ( VAR_106 + VAR_107 <= VAR_108 -> VAR_109 ) || ( VAR_110 >= VAR_111 -> VAR_112 + VAR_113 -> VAR_114 ) ) ) goto VAR_115 ; } if ( ! ( VAR_116 . VAR_117 & VAR_118 ) ) VAR_119 . VAR_120 = VAR_121 ; VAR_122 = - VAR_123 ; if ( ! VAR_124 . VAR_125 ) { VAR_126 . VAR_127 = VAR_128 ; VAR_129 . VAR_130 = VAR_131 -> VAR_132 ; if ( METHOD_5 ( & VAR_133 , VAR_134 ) ) goto VAR_135 ; } else if ( VAR_136 && VAR_137 -> VAR_138 != VAR_139 . VAR_140 ) { VAR_141 = - VAR_142 ; goto VAR_143 ; } if ( ( VAR_144 . VAR_145 & VAR_146 ) && ! VAR_147 . VAR_148 ) { if ( METHOD_6 ( & VAR_149 ) < 0 ) goto VAR_150 ; } if ( ! VAR_151 || VAR_152 != VAR_153 . VAR_154 ) { struct STRUCT_OR_UNION_8 * VAR_155 ; VAR_156 = - VAR_157 ; VAR_158 = METHOD_7 ( STRUCT_OR_UNION_9 -> VAR_159 , sizeof ( struct STRUCT_OR_UNION_10 ) , VAR_160 ) ; if ( ! VAR_161 ) goto VAR_162 ; VAR_163 = METHOD_8 ( VAR_164 , VAR_165 -> VAR_166 ) ; VAR_167 -> VAR_168 |= VAR_169 ; METHOD_9 ( VAR_170 , VAR_171 ) ; VAR_172 = STRUCT_OR_UNION_11 -> VAR_173 ; METHOD_10 ( STRUCT_OR_UNION_12 -> VAR_174 , VAR_175 ) ; METHOD_11 ( & STRUCT_OR_UNION_13 -> VAR_176 ) ;  METHOD_12 ( STRUCT_OR_UNION_14 , VAR_177 ) ;  METHOD_13 ( VAR_178 ) ; } VAR_179 = METHOD_14 ( STRUCT_OR_UNION_15 , & VAR_180 , VAR_181 , VAR_182 , VAR_183 ) ; if ( VAR_184 )  goto VAR_185 ;  if ( VAR_186 ) { VAR_187 = METHOD_15 ( STRUCT_OR_UNION_16 , & VAR_188 ) ; if ( VAR_189 ) goto VAR_190 ; } else METHOD_16 ( STRUCT_OR_UNION_17 , & VAR_191 ) ; VAR_192 = - VAR_193 ; VAR_194 = METHOD_17 ( STRUCT_OR_UNION_18 -> VAR_195 , sizeof ( struct STRUCT_OR_UNION_19 ) , VAR_196 ) ; if ( ! VAR_197 ) goto VAR_198 ;  if ( ! VAR_199 ) {  VAR_200 . VAR_201 = VAR_202 ; METHOD_18 ( & VAR_203 . VAR_204 , 0 , sizeof ( VAR_205 . VAR_206 ) ) ; } METHOD_19 ( VAR_207 , & VAR_208 ) ; VAR_209 = STRUCT_OR_UNION_20 -> VAR_210 ; METHOD_20 ( STRUCT_OR_UNION_21 -> VAR_211 , VAR_212 ) ; METHOD_21 ( & STRUCT_OR_UNION_22 -> VAR_213 ) ; METHOD_22 ( STRUCT_OR_UNION_23 , VAR_214 , VAR_215 , VAR_216 ) ; METHOD_23 ( & VAR_217 , & VAR_218 ) ; METHOD_24 ( VAR_219 ) ; return 0 ;  VAR_220 :  METHOD_25 ( & VAR_221 , & VAR_222 ) ; VAR_223 : return VAR_224 ; }
unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; enum VAR_4 VAR_5 ; TYPE_2 VAR_6 ; struct STRUCT_OR_UNION_3 VAR_7 ; METHOD_1 ( VAR_8 == VAR_9 || VAR_10 == VAR_11 ) ; VAR_12 = METHOD_2 ( VAR_13 , & VAR_14 ) ; METHOD_3 ( VAR_15 && ( VAR_16 == VAR_17 || VAR_18 == VAR_19 ) ) ; if ( VAR_20 == VAR_21 ) { VAR_22 = METHOD_4 ( 0x7F000001 ) ; } else { struct STRUCT_OR_UNION_4 * VAR_23 ; struct STRUCT_OR_UNION_5 * VAR_24 ; VAR_25 = 0 ; METHOD_5 ( ) ; VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 ) ;  if ( VAR_29 != VAR_30 ) {  VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; } METHOD_7 ( ) ; if ( ! VAR_37 ) return VAR_38 ; } METHOD_8 ( & VAR_39 . VAR_40 , 0 , sizeof ( VAR_41 . VAR_42 ) ) ; METHOD_9 ( & VAR_43 . VAR_44 , 0 , sizeof ( VAR_45 . VAR_46 ) ) ; VAR_47 . VAR_48 = VAR_49 -> VAR_50 [ 0 ] . VAR_51 | VAR_52 ; VAR_53 . VAR_54 . VAR_55 = VAR_56 ; VAR_57 . VAR_58 . VAR_59 = VAR_60 ; VAR_61 . VAR_62 = VAR_63 -> VAR_64 [ 0 ] . VAR_65 ; VAR_66 . VAR_67 = VAR_68 -> VAR_69 [ 0 ] . VAR_70 ; return METHOD_10 ( VAR_71 , & VAR_72 , VAR_73 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * const VAR_1 [ ] , TYPE_3 VAR_2 , TYPE_4 * const VAR_3 [ ] , TYPE_5 VAR_4 , struct STRUCT_OR_UNION_0 VAR_5 [ ] , TYPE_6 VAR_6 , TYPE_7 * VAR_7 , TYPE_8 VAR_8 , TYPE_9 VAR_9 ) { TYPE_10 VAR_10 [ VAR_11 ] = { 0 } ; TYPE_11 * VAR_12 ; TYPE_12 VAR_13 = 0 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 = 0 ; TYPE_15 VAR_16 = - 1 ; TYPE_16 VAR_17 = - 1 ; TYPE_17 VAR_18 = 0 ; TYPE_18 VAR_19 = METHOD_1 ( VAR_20 ) ;  VAR_21 = VAR_22 ;  * VAR_23 = '\\0' ; do { const struct STRUCT_OR_UNION_1 * VAR_24 ; const TYPE_19 * VAR_25 ; const TYPE_20 * VAR_26 ; TYPE_21 VAR_27 = 0 ; TYPE_22 VAR_28 = 0 ; TYPE_23 VAR_29 ; TYPE_24 VAR_30 ; VAR_31 = VAR_32 ; VAR_33 = METHOD_2 ( VAR_34 , VAR_35 , & VAR_36 ) ; VAR_37 = VAR_38 ;  switch ( VAR_39 ) {  case VAR_40 : VAR_41 = VAR_42 >= 2 ; VAR_43 = VAR_44 ; VAR_45 = METHOD_3 ( VAR_46 , VAR_47 , VAR_48 ) ; VAR_49 = METHOD_4 ( VAR_50 , METHOD_5 ( VAR_51 -> VAR_52 ) ) ; if ( ! VAR_53 ) return - VAR_54 ; if ( METHOD_6 ( VAR_55 , VAR_56 , VAR_57 ) ) VAR_58 = 0 ; break ; case VAR_59 : VAR_60 = VAR_61 >= 2 ; VAR_62 = VAR_63 ; break ; case VAR_64 : VAR_65 ++ ; if ( VAR_66 == VAR_67 ) return - VAR_68 ;  VAR_69 = METHOD_7 ( VAR_70 , VAR_71 , & VAR_72 ) ;  if ( VAR_73 - VAR_74 + 2 + VAR_75 >= VAR_76 ) return - VAR_77 ; if ( VAR_78 != VAR_79 + 1 ) * VAR_80 ++ = '/' ; METHOD_8 ( VAR_81 , VAR_82 ) ; VAR_83 += VAR_84 ; VAR_85 [ VAR_86 ] = VAR_87 ; if ( VAR_88 == 1 ) VAR_89 = VAR_90 ; if ( METHOD_9 ( VAR_91 , VAR_92 , VAR_93 ) ) VAR_94 = 2 ; else if ( VAR_95 ) VAR_96 -- ; else VAR_97 = VAR_98 ; VAR_99 = VAR_100 ; break ; case VAR_101 : if ( VAR_102 < 0 ) return - VAR_103 ; VAR_104 = VAR_105 ; VAR_106 = VAR_107 [ VAR_108 -- ] ; while ( VAR_109 > VAR_110 && * -- VAR_111 != '/' ) ; * VAR_112 = '\\0' ;  break ;  case VAR_113 : VAR_114 = 1 ; break ; } if ( VAR_115 && VAR_116 == - 1 ) { if ( VAR_117 && VAR_118 <= VAR_119 && VAR_120 == VAR_121 [ VAR_122 - 1 ] . VAR_123 + VAR_124 [ VAR_125 - 1 ] . VAR_126 - VAR_127 ) VAR_128 = VAR_129 [ -- VAR_130 ] . VAR_131 - VAR_132 ; else VAR_133 = VAR_134 ; } if ( ! VAR_135 && VAR_136 != - 1 ) { if ( VAR_137 < VAR_138 ) { VAR_139 [ VAR_140 ] . VAR_141 = VAR_142 + VAR_143 ; VAR_144 [ VAR_145 ] . VAR_146 = VAR_147 - VAR_148 ; } VAR_149 ++ ; VAR_150 = - 1 ; } } while ( VAR_151 != VAR_152 ) ; if ( VAR_153 != METHOD_10 ( VAR_154 ) ) return - VAR_155 ; if ( VAR_156 < VAR_157 ) { VAR_158 [ VAR_159 ] . VAR_160 = VAR_161 + VAR_162 ; VAR_163 [ VAR_164 ] . VAR_165 = VAR_166 - VAR_167 ; if ( VAR_168 ) VAR_169 [ VAR_170 ] . VAR_171 += METHOD_11 ( VAR_172 ) ; } VAR_173 ++ ; return VAR_174 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; VAR_10 = METHOD_1 ( VAR_11 ) ; METHOD_2 ( & VAR_12 , VAR_13 , 4 ) ; if ( ( ! METHOD_3 ( VAR_14 , ( ( TYPE_10 * ) & VAR_15 ) + 4 , sizeof ( TYPE_11 ) - 4 , & VAR_16 ) || VAR_17 != sizeof ( TYPE_12 ) - 4 ) || METHOD_4 ( VAR_18 . VAR_19 , "DSD" , 4 ) ) { METHOD_5 ( "%sisnotavalid.DFFfile!" , VAR_20 ) ; return VAR_21 ; } else if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) && ! METHOD_6 ( VAR_25 , & VAR_26 , sizeof ( TYPE_13 ) ) ) { METHOD_7 ( "%s" , METHOD_8 ( VAR_27 ) ) ; return VAR_28 ; } if 1 METHOD_9 ( & VAR_29 , VAR_30 ) ; if ( VAR_31 && ! ( VAR_32 -> VAR_33 & VAR_34 ) && VAR_35 . VAR_36 && VAR_37 . VAR_38 + 1 && VAR_39 . VAR_40 + 12 != VAR_41 ) { METHOD_10 ( "%sisnotavalid.DFFfile(bytotalsize)!" , VAR_42 ) ; return VAR_43 ; } if ( VAR_44 ) METHOD_11 ( "fileheaderindicatedlength=%lld" , VAR_45 . VAR_46 ) ; while ( 1 ) { if ( ! METHOD_12 ( VAR_47 , & VAR_48 , sizeof ( TYPE_14 ) , & VAR_49 ) || VAR_50 != sizeof ( TYPE_15 ) ) { METHOD_13 ( "%sisnotavalid.DFFfile!" , VAR_51 ) ; return VAR_52 ; } else if ( ! ( VAR_53 -> VAR_54 & VAR_55 ) && ! METHOD_14 ( VAR_56 , & VAR_57 , sizeof ( TYPE_16 ) ) ) { METHOD_15 ( "%s" , METHOD_16 ( VAR_58 ) ) ; return VAR_59 ; } METHOD_17 ( & VAR_60 , VAR_61 ) ; if ( VAR_62 ) METHOD_18 ( "chunkheaderindicatedlength=%lld" , VAR_63 . VAR_64 ) ; if ( ! METHOD_19 ( VAR_65 . VAR_66 , "FVER" , 4 ) ) { TYPE_17 VAR_67 ; if ( VAR_68 . VAR_69 != sizeof ( VAR_70 ) || ! METHOD_20 ( VAR_71 , & VAR_72 , sizeof ( VAR_73 ) , & VAR_74 ) || VAR_75 != sizeof ( VAR_76 ) ) { METHOD_21 ( "%sisnotavalid.DFFfile!" , VAR_77 ) ; return VAR_78 ; } else if ( ! ( VAR_79 -> VAR_80 & VAR_81 ) && ! METHOD_22 ( VAR_82 , & VAR_83 , sizeof ( VAR_84 ) ) ) { METHOD_23 ( "%s" , METHOD_24 ( VAR_85 ) ) ; return VAR_86 ; } METHOD_25 ( & VAR_87 , "L" ) ; if ( VAR_88 ) METHOD_26 ( "dsdifffileversion=0x%08x" , VAR_89 ) ; } else if ( ! METHOD_27 ( VAR_90 . VAR_91 , "PROP" , 4 ) ) { TYPE_18 * VAR_92 ; if ( VAR_93 . VAR_94 < 4 || VAR_95 . VAR_96 > 1024 ) { METHOD_28 ( "%sisnotavalid.DFFfile!" , VAR_97 ) ; return VAR_98 ; } if ( VAR_99 ) METHOD_29 ( "gotPROPchunkof%dbytestotal" , ( TYPE_19 ) VAR_100 . VAR_101 ) ; VAR_102 = METHOD_30 ( ( TYPE_20 ) VAR_103 . VAR_104 ) ; if ( ! METHOD_31 ( VAR_105 , VAR_106 , ( TYPE_21 ) VAR_107 . VAR_108 , & VAR_109 ) || VAR_110 != VAR_111 . VAR_112 ) { METHOD_32 ( "%sisnotavalid.DFFfile!" , VAR_113 ) ; METHOD_33 ( VAR_114 ) ; return VAR_115 ; } else if ( ! ( VAR_116 -> VAR_117 & VAR_118 ) && ! METHOD_34 ( VAR_119 , VAR_120 , ( TYPE_22 ) VAR_121 . VAR_122 ) ) { METHOD_35 ( "%s" , METHOD_36 ( VAR_123 ) ) ; METHOD_37 ( VAR_124 ) ; return VAR_125 ; } if ( ! METHOD_38 ( VAR_126 , "SND" , 4 ) ) { TYPE_23 * VAR_127 = VAR_128 + 4 , * VAR_129 = VAR_130 + VAR_131 . VAR_132 ; TYPE_24 VAR_133 , VAR_134 , VAR_135 = 0 ; TYPE_25 VAR_136 ; while ( VAR_137 - VAR_138 >= sizeof ( VAR_139 ) ) { METHOD_39 ( & VAR_140 , VAR_141 , sizeof ( VAR_142 ) ) ; VAR_143 += sizeof ( VAR_144 ) ; METHOD_40 ( & VAR_145 , VAR_146 ) ; if ( VAR_147 - VAR_148 >= VAR_149 . VAR_150 ) { if ( ! METHOD_41 ( VAR_151 . VAR_152 , "FS" , 4 ) && VAR_153 . VAR_154 == 4 ) { METHOD_42 ( & VAR_155 , VAR_156 , sizeof ( VAR_157 ) ) ; METHOD_43 ( & VAR_158 , "L" ) ; VAR_159 += VAR_160 . VAR_161 ; if ( VAR_162 ) METHOD_44 ( "gotsamplerateof%uHz" , VAR_163 ) ; } else if ( ! METHOD_45 ( VAR_164 . VAR_165 , "CHNL" , 4 ) && VAR_166 . VAR_167 >= 2 ) { METHOD_46 ( & VAR_168 , VAR_169 , sizeof ( VAR_170 ) ) ; METHOD_47 ( & VAR_171 , "S" ) ; VAR_172 += sizeof ( VAR_173 ) ; VAR_174 = ( TYPE_26 ) ( VAR_175 . VAR_176 - sizeof ( VAR_177 ) ) / 4 ; while ( VAR_178 -- ) { if ( ! METHOD_48 ( VAR_179 , "SLFT" , 4 ) || ! METHOD_49 ( VAR_180 , "MLFT" , 4 ) ) VAR_181 |= 0x1 ; else if ( ! METHOD_50 ( VAR_182 , "SRGT" , 4 ) || ! METHOD_51 ( VAR_183 , "MRGT" , 4 ) ) VAR_184 |= 0x2 ; else if ( ! METHOD_52 ( VAR_185 , "LS" , 4 ) ) VAR_186 |= 0x10 ; else if ( ! METHOD_53 ( VAR_187 , "RS" , 4 ) ) VAR_188 |= 0x20 ; else if ( ! METHOD_54 ( VAR_189 , "C" , 4 ) ) VAR_190 |= 0x4 ; else if ( ! METHOD_55 ( VAR_191 , "LFE" , 4 ) ) VAR_192 |= 0x8 ; else if ( VAR_193 ) METHOD_56 ( "undchannelID%c%c%c%c" , VAR_194 [ 0 ] , VAR_195 [ 1 ] , VAR_196 [ 2 ] , VAR_197 [ 3 ] ) ; VAR_198 += 4 ; } if ( VAR_199 ) METHOD_57 ( "%dchannels,mask=0x%08x" , VAR_200 , VAR_201 ) ; } else if ( ! METHOD_58 ( VAR_202 . VAR_203 , "CMPR" , 4 ) && VAR_204 . VAR_205 >= 4 ) { if ( METHOD_59 ( VAR_206 , "DSD" , 4 ) ) { METHOD_60 ( "DSDIFFfilesmustbeuncompressed,not\\"%c%c%c%c\\"!" , VAR_207 [ 0 ] , VAR_208 [ 1 ] , VAR_209 [ 2 ] , VAR_210 [ 3 ] ) ; METHOD_61 ( VAR_211 ) ; return VAR_212 ; } VAR_213 += VAR_214 . VAR_215 ; } else { if ( VAR_216 ) METHOD_62 ( "gotPROP/SNDchunktype\\"%c%c%c%c\\"of%dbytes" , VAR_217 . VAR_218 [ 0 ] , VAR_219 . VAR_220 [ 1 ] , VAR_221 . VAR_222 [ 2 ] , VAR_223 . VAR_224 [ 3 ] , VAR_225 . VAR_226 ) ; VAR_227 += VAR_228 . VAR_229 ; } } else { METHOD_63 ( "%sisnotavalid.DFFfile!" , VAR_230 ) ; METHOD_64 ( VAR_231 ) ; return VAR_232 ; } } if ( VAR_233 && ( VAR_234 -> VAR_235 || ( VAR_236 -> VAR_237 & VAR_238 ) ) ) { METHOD_65 ( "thisDSDIFFfilealreadyhaschannelorderinformation!" ) ; METHOD_66 ( VAR_239 ) ; return VAR_240 ; } else if ( VAR_241 ) VAR_242 -> VAR_243 = VAR_244 ; VAR_245 -> VAR_246 = 8 ; VAR_247 -> VAR_248 = 1 ; VAR_249 -> VAR_250 = VAR_251 ; VAR_252 -> VAR_253 = VAR_254 / 8 ; VAR_255 -> VAR_256 |= VAR_257 ; } else if ( VAR_258 ) METHOD_67 ( "gotunknownPROPchunktype\\"%c%c%c%c\\"of%dbytes" , VAR_259 [ 0 ] , VAR_260 [ 1 ] , VAR_261 [ 2 ] , VAR_262 [ 3 ] , VAR_263 . VAR_264 ) ; METHOD_68 ( VAR_265 ) ; } else if ( ! METHOD_69 ( VAR_266 . VAR_267 , "DSD" , 4 ) ) { VAR_268 = VAR_269 . VAR_270 / VAR_271 -> VAR_272 ; break ; } else { TYPE_27 VAR_273 = ( TYPE_28 ) ( ( ( VAR_274 . VAR_275 ) + 1 ) & ~ ( TYPE_29 ) 1 ) ;  TYPE_30 * VAR_276 = METHOD_70 ( VAR_277 ) ;  if ( VAR_278 ) METHOD_71 ( "extraunknownchunk\\"%c%c%c%c\\"of%dbytes" , VAR_279 . VAR_280 [ 0 ] , VAR_281 . VAR_282 [ 1 ] , VAR_283 . VAR_284 [ 2 ] , VAR_285 . VAR_286 [ 3 ] , VAR_287 . VAR_288 ) ; if ( ! METHOD_72 ( VAR_289 , VAR_290 , VAR_291 , & VAR_292 ) || VAR_293 != VAR_294 || ( ! ( VAR_295 -> VAR_296 & VAR_297 ) && ! METHOD_73 ( VAR_298 , VAR_299 , VAR_300 ) ) ) { METHOD_74 ( "%s" , METHOD_75 ( VAR_301 ) ) ; METHOD_76 ( VAR_302 ) ; return VAR_303 ; } METHOD_77 ( VAR_304 ) ; } } if ( VAR_305 ) METHOD_78 ( "settingconfigurationwith%lldsamples" , VAR_306 ) ; if ( ! METHOD_79 ( VAR_307 , VAR_308 , VAR_309 , VAR_310 ) ) { METHOD_80 ( "%s:%s" , VAR_311 , METHOD_81 ( VAR_312 ) ) ; return VAR_313 ; } return VAR_314 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 = VAR_7 , * VAR_8 = VAR_9 , * VAR_10 = VAR_11 , * VAR_12 = VAR_13 ; TYPE_7 * VAR_14 ; TYPE_8 * VAR_15 = VAR_16 ; const TYPE_9 * VAR_17 ; const TYPE_10 * VAR_18 = VAR_19 ; TYPE_11 * VAR_20 = VAR_21 ; TYPE_12 * VAR_22 = VAR_23 ; METHOD_1 ( TYPE_13 ) * VAR_24 = VAR_25 ; METHOD_2 ( TYPE_14 ) * VAR_26 = VAR_27 ; TYPE_15 * VAR_28 = VAR_29 ; unsigned TYPE_16 * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_17 VAR_34 = 0 , VAR_35 = 0 ; if ( VAR_36 == VAR_37 ) { METHOD_3 ( VAR_38 , VAR_39 ) ; return VAR_40 ; } if ( VAR_41 -> VAR_42 . VAR_43 == VAR_44 ) { METHOD_4 ( VAR_45 , VAR_46 ) ; return VAR_47 ; } VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; switch ( VAR_54 ) { case VAR_55 : VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 . VAR_59 -> VAR_60 ) ; if ( ! METHOD_7 ( VAR_61 ) && VAR_62 == VAR_63 ) { METHOD_8 ( VAR_64 , VAR_65 ) ; goto VAR_66 ; } VAR_67 = VAR_68 -> VAR_69 . VAR_70 -> VAR_71 ; break ; case VAR_72 : VAR_73 = VAR_74 -> VAR_75 . VAR_76 -> VAR_77 ; VAR_78 = VAR_79 -> VAR_80 . VAR_81 -> VAR_82 ; VAR_83 = VAR_84 -> VAR_85 . VAR_86 -> VAR_87 -> VAR_88 ; VAR_89 = VAR_90 -> VAR_91 . VAR_92 -> VAR_93 -> VAR_94 ; VAR_95 = METHOD_9 ( VAR_96 -> VAR_97 ) ; if ( VAR_98 == VAR_99 ) { METHOD_10 ( VAR_100 , VAR_101 ) ; goto VAR_102 ; } break ; case VAR_103 : VAR_104 = VAR_105 -> VAR_106 . VAR_107 -> VAR_108 ; VAR_109 = VAR_110 -> VAR_111 . VAR_112 -> VAR_113 -> VAR_114 ; VAR_115 = VAR_116 -> VAR_117 . VAR_118 -> VAR_119 -> VAR_120 ; VAR_121 = METHOD_11 ( VAR_122 -> VAR_123 ) ; if ( VAR_124 == VAR_125 ) { METHOD_12 ( VAR_126 , VAR_127 ) ; goto VAR_128 ; } break ; default : METHOD_13 ( VAR_129 , VAR_130 ) ; goto VAR_131 ; }  if ( VAR_132 != VAR_133 ) {  for ( VAR_134 = 0 ; VAR_135 < METHOD_14 ( VAR_136 ) ; VAR_137 ++ ) { VAR_138 = METHOD_15 ( VAR_139 , VAR_140 ) ; if ( ( VAR_141 = METHOD_16 ( METHOD_17 ( ) ) ) == VAR_142 ) { METHOD_18 ( VAR_143 , VAR_144 ) ; goto VAR_145 ; } VAR_146 = METHOD_19 ( VAR_147 -> VAR_148 ) ; VAR_149 = METHOD_20 ( VAR_150 ) ; if ( VAR_151 == VAR_152 ) { METHOD_21 ( VAR_153 , VAR_154 ) ; goto VAR_155 ; } METHOD_22 ( VAR_156 , VAR_157 ) ; if ( VAR_158 == VAR_159 ) VAR_160 = VAR_161 ; else METHOD_23 ( VAR_162 , VAR_163 ) ; VAR_164 = VAR_165 ; } } if ( VAR_166 != VAR_167 ) { if ( ( VAR_168 = METHOD_24 ( METHOD_25 ( ) ) ) == VAR_169 ) { METHOD_26 ( VAR_170 , VAR_171 ) ; goto VAR_172 ; } if ( VAR_173 ) { for ( VAR_174 = 0 ; VAR_175 < METHOD_27 ( VAR_176 ) ; VAR_177 ++ ) { VAR_178 = METHOD_28 ( VAR_179 , VAR_180 ) ; if ( ! METHOD_29 ( VAR_181 , VAR_182 ) ) break ; VAR_183 = VAR_184 ; } if ( VAR_185 == VAR_186 ) { METHOD_30 ( VAR_187 , VAR_188 ) ; goto VAR_189 ; } } if ( VAR_190 == VAR_191 ) { for ( VAR_192 = 0 ; VAR_193 < METHOD_31 ( VAR_194 ) ; VAR_195 ++ ) { VAR_196 = METHOD_32 ( VAR_197 , VAR_198 ) ; if ( METHOD_33 ( & VAR_199 , & VAR_200 , VAR_201 , VAR_202 ) < 0 ) goto VAR_203 ; METHOD_34 ( ) ; } } else { if ( METHOD_35 ( & VAR_204 , & VAR_205 , VAR_206 , VAR_207 ) < 0 ) goto VAR_208 ; METHOD_36 ( ) ; } VAR_209 = VAR_210 ; METHOD_37 ( VAR_211 , & VAR_212 ) ; if ( METHOD_38 ( VAR_213 , VAR_214 , VAR_215 , VAR_216 , VAR_217 , 0 ) <= 0 ) goto VAR_218 ; if ( METHOD_39 ( VAR_219 , VAR_220 -> VAR_221 ) < 0 ) goto VAR_222 ; VAR_223 = METHOD_40 ( VAR_224 ) ; VAR_225 = METHOD_41 ( VAR_226 ) ; if ( ! VAR_227 ) goto VAR_228 ; if ( METHOD_42 ( VAR_229 , VAR_230 ) <= 0 ) goto VAR_231 ; if ( VAR_232 == VAR_233 ) { VAR_234 = VAR_235 ; VAR_236 = VAR_237 ; VAR_238 = VAR_239 ; } if ( VAR_240 != METHOD_43 ( VAR_241 ) ) { if ( ! METHOD_44 ( VAR_242 , VAR_243 ) ) { METHOD_45 ( VAR_244 , VAR_245 ) ; VAR_246 = VAR_247 ; VAR_248 = VAR_249 ; VAR_250 = VAR_251 ; } } METHOD_46 ( ) ; if ( METHOD_47 ( VAR_252 , VAR_253 , VAR_254 , VAR_255 , VAR_256 , 0 ) <= 0 ) goto VAR_257 ; METHOD_48 ( VAR_258 , VAR_259 ) ; VAR_260 = VAR_261 ; METHOD_49 ( VAR_262 , VAR_263 ) ; VAR_264 = VAR_265 ; if ( VAR_266 == VAR_267 ) VAR_268 = VAR_269 ; else METHOD_50 ( VAR_270 , VAR_271 ) ; VAR_272 = VAR_273 ; }  if ( METHOD_51 ( VAR_274 ) || ( VAR_275 != VAR_276 ) ) {  VAR_277 = VAR_278 ; } else { if ( VAR_279 -> VAR_280 > 0 ) VAR_281 = METHOD_52 ( VAR_282 -> VAR_283 , VAR_284 -> VAR_285 ) ; else { VAR_286 = METHOD_53 ( METHOD_54 ( ) ) ; METHOD_55 ( VAR_287 , 0 ) ; } if ( VAR_288 == VAR_289 ) goto VAR_290 ; } METHOD_56 ( VAR_291 , VAR_292 ) ; VAR_293 = VAR_294 ; return VAR_295 ; VAR_296 : METHOD_57 ( VAR_297 , VAR_298 ) ; METHOD_58 ( VAR_299 , VAR_300 ) ; METHOD_59 ( VAR_301 ) ; METHOD_60 ( VAR_302 ) ; METHOD_61 ( VAR_303 ) ; METHOD_62 ( VAR_304 ) ; return VAR_305 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 ( * VAR_2 ) [ 2 ] , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( VAR_7 -> VAR_8 & VAR_9 ) METHOD_1 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 ; VAR_13 ++ ) { VAR_14 = VAR_15 [ VAR_16 ] [ 0 ] ; VAR_17 = VAR_18 [ VAR_19 ] [ 1 ] ; if ( VAR_20 < 0 ) { if ( VAR_21 >= 3 ) continue ; else { VAR_22 = METHOD_2 ( "/dev/null" , VAR_23 == 0 ? VAR_24 : VAR_25 ) ; VAR_26 = VAR_27 ; if ( VAR_28 == - 1 ) { METHOD_3 ( VAR_29 , - VAR_30 ) ; METHOD_4 ( "failedtoopenstdio" ) ; METHOD_5 ( 127 ) ; } } } if ( VAR_31 == VAR_32 ) METHOD_6 ( VAR_33 , 0 ) ; else METHOD_7 ( VAR_34 , VAR_35 ) ; if ( VAR_36 <= 2 ) METHOD_8 ( VAR_37 , 0 ) ; if ( VAR_38 != - 1 ) METHOD_9 ( VAR_39 ) ; } for ( VAR_40 = 0 ; VAR_41 < VAR_42 ; VAR_43 ++ ) { VAR_44 = VAR_45 [ VAR_46 ] [ 1 ] ; if ( VAR_47 >= 0 && VAR_48 != VAR_49 ) METHOD_10 ( VAR_50 ) ; } if ( VAR_51 -> VAR_52 != VAR_53 && METHOD_11 ( VAR_54 -> VAR_55 ) ) { METHOD_12 ( VAR_56 , - VAR_57 ) ; METHOD_13 ( "chdir()" ) ; METHOD_14 ( 127 ) ; }  if ( ( VAR_58 -> VAR_59 & VAR_60 ) && METHOD_15 ( VAR_61 -> VAR_62 ) ) {  METHOD_16 ( VAR_63 , - VAR_64 ) ; METHOD_17 ( "setgid()" ) ; METHOD_18 ( 127 ) ; } if ( ( VAR_65 -> VAR_66 & VAR_67 ) && METHOD_19 ( VAR_68 -> VAR_69 ) ) { METHOD_20 ( VAR_70 , - VAR_71 ) ; METHOD_21 ( "setuid()" ) ; METHOD_22 ( 127 ) ; } if ( VAR_72 -> VAR_73 != VAR_74 ) { VAR_75 = VAR_76 -> VAR_77 ; } METHOD_23 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 ) ; METHOD_24 ( VAR_82 , - VAR_83 ) ; METHOD_25 ( "execvp()" ) ; METHOD_26 ( 127 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 , TYPE_4 * VAR_4 , TYPE_5 VAR_5 ) { struct STRUCT_OR_UNION_1 * VAR_6 = VAR_7 -> VAR_8 ;  TYPE_6 VAR_9 , VAR_10 ;  if ( 1 + VAR_11 > VAR_12 ) { METHOD_1 ( "i2cwr:len=%distoobig!\\n" , VAR_13 ) ; return - VAR_14 ; }  VAR_15 = ( VAR_16 == VAR_17 || VAR_18 == 0 ) ;  METHOD_2 ( & VAR_19 -> VAR_20 ) ; VAR_21 -> VAR_22 [ 0 ] = VAR_23 ; METHOD_3 ( & VAR_24 -> VAR_25 [ 1 ] , VAR_26 , VAR_27 ) ;  if ( VAR_28 )  VAR_29 = METHOD_4 ( VAR_30 , VAR_31 -> VAR_32 , 1 + VAR_33 ) ; else VAR_34 = METHOD_5 ( VAR_35 , VAR_36 -> VAR_37 , 1 + VAR_38 ,  VAR_39 , VAR_40 , 0 ) ;  METHOD_6 ( & VAR_41 -> VAR_42 ) ; return VAR_43 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; TYPE_2 VAR_3 ; METHOD_1 ( "GsmXSMPClient:Settingupnewconnection" ) ; VAR_4 = METHOD_2 ( VAR_5 -> VAR_6 -> VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 , METHOD_4 ( VAR_10 , VAR_11 , 0 ) | VAR_12 ) ; VAR_13 = METHOD_5 ( VAR_14 ) ; VAR_15 -> VAR_16 -> VAR_17 = METHOD_6 ( VAR_18 , VAR_19 | VAR_20 , ( TYPE_3 ) VAR_21 , VAR_22 ) ; METHOD_7 ( VAR_23 ) ;  VAR_24 -> VAR_25 -> VAR_26 = METHOD_8 ( 5 ,  ( TYPE_4 ) VAR_27 , VAR_28 ) ; METHOD_9 ( VAR_29 ) ; METHOD_10 ( "GsmXSMPClient:Newclient\'%s\'" , VAR_30 -> VAR_31 -> VAR_32 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { if ( VAR_5 -> VAR_6 > 0 ) { TYPE_6 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_7 VAR_10 , VAR_11 ; if ( ! VAR_12 ) return - 1 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; ) { if ( METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ) return - 1 ;  for ( VAR_20 = 0 ; VAR_21 < VAR_22 -> VAR_23 ; VAR_24 ++ )  VAR_25 [ VAR_26 ++ ] += VAR_27 [ VAR_28 ] ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 )  {  VAR_2 += METHOD_1 ( VAR_3 , "%12.3f0m%12.3f%12.3f%12.3f%12.3f0%12.3fc\\n" , - VAR_4 , - VAR_5 , VAR_6 * VAR_7 , - VAR_8 * VAR_9 , VAR_10 , VAR_11 ) ; VAR_12 += METHOD_2 ( VAR_13 , "%12.3f%12.3f%12.3f%12.3f%12.3f0c\\n" , VAR_14 * VAR_15 , VAR_16 , VAR_17 , VAR_18 * VAR_19 , VAR_20 ) ; VAR_21 += METHOD_3 ( VAR_22 , "%12.3f%12.3f%12.3f%12.3f0%12.3fc\\n" , VAR_23 , - VAR_24 * VAR_25 , VAR_26 * VAR_27 , - VAR_28 , - VAR_29 ) ; VAR_30 += METHOD_4 ( VAR_31 , "%12.3f%12.3f%12.3f%12.3f%12.3f0c%s\\n" , - VAR_32 * VAR_33 , - VAR_34 , - VAR_35 , - VAR_36 * VAR_37 , - VAR_38 , VAR_39 ) ;  }
static TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; struct STRUCT_OR_UNION_8 * VAR_12 ; struct STRUCT_OR_UNION_9 * VAR_13 ; struct STRUCT_OR_UNION_10 * VAR_14 ; struct STRUCT_OR_UNION_11 * VAR_15 ; struct STRUCT_OR_UNION_12 * VAR_16 ; struct STRUCT_OR_UNION_13 * STRUCT_OR_UNION_14 ; struct STRUCT_OR_UNION_15 * VAR_17 ; struct STRUCT_OR_UNION_16 * VAR_18 ; struct STRUCT_OR_UNION_17 VAR_19 = VAR_20 ; TYPE_2 VAR_21 ; TYPE_3 VAR_22 = 0 ; TYPE_4 VAR_23 = 0 ; TYPE_5 VAR_24 ; TYPE_6 VAR_25 ; TYPE_7 VAR_26 ; VAR_27 = METHOD_1 ( ) ; if ( ! VAR_28 ) { VAR_29 = VAR_30 -> VAR_31 = - VAR_32 ; goto VAR_33 ; } VAR_34 = METHOD_2 ( sizeof ( * VAR_35 ) , VAR_36 ) ; if ( ! VAR_37 ) { VAR_38 = VAR_39 -> VAR_40 = - VAR_41 ; goto VAR_42 ; } VAR_43 = METHOD_3 ( VAR_44 , & VAR_45 ) ; if ( VAR_46 ) { VAR_47 -> VAR_48 = VAR_49 ; goto VAR_50 ; } METHOD_4 ( VAR_51 , VAR_52 , & VAR_53 ) ; if ( VAR_54 > 0 ) { VAR_55 = METHOD_5 ( VAR_56 , & VAR_57 -> VAR_58 , VAR_59 , VAR_60 ) ; if ( VAR_61 ) { VAR_62 -> VAR_63 = VAR_64 ; goto VAR_65 ; } } VAR_66 = METHOD_6 ( VAR_67 , VAR_68 , VAR_69 -> VAR_70 . VAR_71 , VAR_72 , VAR_73 -> VAR_74 ) ; if ( VAR_75 ) { VAR_76 -> VAR_77 = VAR_78 ; goto VAR_79 ; } VAR_80 . VAR_81 = VAR_82 ; VAR_83 . VAR_84 = ( TYPE_8 ) - 1 ; VAR_85 . VAR_86 = VAR_87 ; VAR_88 = VAR_89 -> VAR_90 ; VAR_91 -> VAR_92 = & VAR_93 -> VAR_94 ; STRUCT_OR_UNION_18 = VAR_95 -> STRUCT_OR_UNION_19 ; VAR_96 = METHOD_7 ( STRUCT_OR_UNION_20 ) ; VAR_97 = VAR_98 -> VAR_99 ; VAR_100 = METHOD_8 ( VAR_101 ) -> VAR_102 ; METHOD_9 ( VAR_103 , VAR_104 ) ; VAR_105 = METHOD_10 ( VAR_106 , & VAR_107 ) ; METHOD_11 ( VAR_108 ) ; VAR_109 = METHOD_12 ( VAR_110 , VAR_111 , VAR_112 , METHOD_13 ( VAR_113 ) , STRUCT_OR_UNION_21 -> VAR_114 . VAR_115 , STRUCT_OR_UNION_22 -> VAR_116 . VAR_117 , 0 ) ; if ( VAR_118 != VAR_119 && ! METHOD_14 ( VAR_120 ) ) { VAR_121 -> VAR_122 = - VAR_123 ; goto VAR_124 ; } else if ( METHOD_15 ( VAR_125 ) ) { VAR_126 = METHOD_16 ( VAR_127 ) ; METHOD_17 ( VAR_128 , VAR_129 , VAR_130 ) ; goto VAR_131 ; } METHOD_18 ( VAR_132 ) ; VAR_133 = METHOD_19 ( VAR_134 , VAR_135 ) ; if ( VAR_136 ) { METHOD_20 ( VAR_137 , VAR_138 , VAR_139 ) ; goto VAR_140 ; } METHOD_21 ( VAR_141 , VAR_142 ) ; METHOD_22 ( & VAR_143 -> VAR_144 , VAR_145 -> VAR_146 ) ; METHOD_23 ( VAR_147 , & VAR_148 -> VAR_149 , sizeof ( * VAR_150 ) ) ; METHOD_24 ( VAR_151 ) ; VAR_152 = METHOD_25 ( VAR_153 ) ; if ( VAR_154 -> VAR_155 ) VAR_156 |= VAR_157 ; else VAR_158 &= ~ VAR_159 ; METHOD_26 ( VAR_160 , VAR_161 ) ; METHOD_27 ( VAR_162 , VAR_163 -> VAR_164 ) ; METHOD_28 ( & VAR_165 ) ; METHOD_29 ( VAR_166 -> VAR_167 , VAR_168 . VAR_169 , VAR_170 ) ; METHOD_30 ( VAR_171 -> VAR_172 , VAR_173 -> VAR_174 . VAR_175 , VAR_176 ) ; VAR_177 -> VAR_178 . VAR_179 = METHOD_31 ( VAR_180 . VAR_181 ) ; VAR_182 -> VAR_183 . VAR_184 = METHOD_32 ( VAR_185 . VAR_186 ) ; METHOD_33 ( VAR_187 , VAR_188 -> VAR_189 ) ; METHOD_34 ( & VAR_190 -> VAR_191 , 0 , sizeof ( VAR_192 -> VAR_193 ) ) ; METHOD_35 ( & VAR_194 -> VAR_195 , 0 , sizeof ( VAR_196 -> VAR_197 ) ) ; METHOD_36 ( VAR_198 , 0 ) ; METHOD_37 ( VAR_199 , 0 ) ; VAR_200 = METHOD_38 ( VAR_201 ) ; VAR_202 = METHOD_39 ( VAR_203 , VAR_204 , VAR_205 , VAR_206 , 0 , & VAR_207 ) ; if ( VAR_208 ) { METHOD_40 ( VAR_209 ) ; METHOD_41 ( VAR_210 ) ; METHOD_42 ( VAR_211 , VAR_212 , VAR_213 ) ; goto VAR_214 ; } METHOD_43 ( VAR_215 ) ; VAR_216 = METHOD_44 ( VAR_217 , VAR_218 , VAR_219 , & VAR_220 , VAR_221 ) ; METHOD_45 ( VAR_222 ) ; METHOD_46 ( VAR_223 ) ; if ( VAR_224 ) { METHOD_47 ( VAR_225 , VAR_226 , VAR_227 ) ; goto VAR_228 ; } VAR_229 -> VAR_230 = 1 ; METHOD_48 ( ) ; METHOD_49 ( VAR_231 , VAR_232 ) ; VAR_233 . VAR_234 = VAR_235 -> VAR_236 ; VAR_237 = METHOD_50 ( VAR_238 , VAR_239 , & VAR_240 , VAR_241 ) ; METHOD_51 ( VAR_242 ) ; METHOD_52 ( VAR_243 ) ; if ( VAR_244 ) { METHOD_53 ( VAR_245 , VAR_246 , VAR_247 ) ; goto VAR_248 ; } VAR_249 = METHOD_54 ( VAR_250 , VAR_251 , VAR_252 , VAR_253 -> VAR_254 . VAR_255 , METHOD_55 ( VAR_256 ) , VAR_257 , STRUCT_OR_UNION_23 -> VAR_258 . VAR_259 , STRUCT_OR_UNION_24 -> VAR_260 . VAR_261 ) ; if ( VAR_262 ) { METHOD_56 ( VAR_263 , VAR_264 , VAR_265 ) ; goto VAR_266 ; } VAR_267 . VAR_268 = ( TYPE_9 ) - 1 ; VAR_269 -> VAR_270 = METHOD_57 ( VAR_271 -> VAR_272 , & VAR_273 ) ; if ( METHOD_58 ( VAR_274 -> VAR_275 ) ) { VAR_276 = METHOD_59 ( VAR_277 -> VAR_278 ) ; METHOD_60 ( VAR_279 , VAR_280 , VAR_281 ) ; goto VAR_282 ; } VAR_283 = METHOD_61 ( VAR_284 , VAR_285 ) ; if ( VAR_286 ) { METHOD_62 ( VAR_287 , VAR_288 , VAR_289 ) ; goto VAR_290 ; } VAR_291 = METHOD_63 ( VAR_292 , VAR_293 , ( unsigned TYPE_10 ) - 1 ) ; if ( VAR_294 ) { METHOD_64 ( VAR_295 , VAR_296 , VAR_297 ) ; goto VAR_298 ; } VAR_299 = METHOD_65 ( VAR_300 , VAR_301 , STRUCT_OR_UNION_25 -> VAR_302 . VAR_303 , STRUCT_OR_UNION_26 -> VAR_304 . VAR_305 , VAR_306 , & VAR_307 , VAR_308 , VAR_309 ) ;  METHOD_66 ( VAR_310 == - VAR_311 ) ;  if ( VAR_312 ) { METHOD_67 ( VAR_313 , VAR_314 , VAR_315 ) ; goto VAR_316 ; } METHOD_68 ( VAR_317 , VAR_318 -> VAR_319 + STRUCT_OR_UNION_27 -> VAR_320 . VAR_321 * 2 ) ; VAR_322 -> VAR_323 = VAR_324 -> VAR_325 = VAR_326 ; VAR_327 = METHOD_69 ( VAR_328 , VAR_329 , VAR_330 ) ; if ( VAR_331 ) METHOD_70 ( VAR_332 , VAR_333 , VAR_334 ) ; VAR_335 : METHOD_71 ( VAR_336 ) ; VAR_337 -> VAR_338 = VAR_339 ; VAR_340 : METHOD_72 ( VAR_341 ) ; VAR_342 : METHOD_73 ( VAR_343 ) ; VAR_344 : METHOD_74 ( VAR_345 , & VAR_346 -> VAR_347 , ( TYPE_11 ) - 1 ) ; return VAR_348 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ;  if ( VAR_3 ) {   struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_2 ( VAR_5 ) ;  METHOD_3 ( & VAR_6 ) ; METHOD_4 ( METHOD_5 ( & VAR_7 -> VAR_8 ) ) ; if ( METHOD_6 ( & VAR_9 -> VAR_10 ) ) METHOD_7 ( & VAR_11 -> VAR_12 ) ; VAR_13 -- ;  METHOD_8 ( & VAR_14 ) ;  }  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned VAR_1 ) { const TYPE_2 * VAR_2 ; unsigned VAR_3 , VAR_4 , VAR_5 ; TYPE_3 VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , "444" , & VAR_9 , & VAR_10 , & VAR_11 ) ; if ( ( VAR_12 = METHOD_2 ( VAR_13 ) ) == VAR_14 ) return 0 ; METHOD_3 ( VAR_15 , "Tag:%x\\n" , VAR_16 ) ; if ( VAR_17 ) METHOD_4 ( VAR_18 , "Layout:%s\\n" , VAR_19 -> VAR_20 ) ; if ( VAR_21 < VAR_22 ) METHOD_5 ( VAR_23 , "j" , VAR_24 - VAR_25 ) ; if ( VAR_26 -> VAR_27 != VAR_28 )  { TYPE_4 VAR_29 = VAR_30 -> VAR_31 . VAR_32 * sizeof ( VAR_33 -> VAR_34 [ 0 ] ) ;  METHOD_6 ( VAR_35 -> VAR_36 ) ; if ( ( VAR_37 -> VAR_38 = METHOD_7 ( VAR_39 ) ) == VAR_40 ) return VAR_41 ; METHOD_8 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; } ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 ) {  TYPE_3 VAR_3 = ( TYPE_4 ) VAR_4 -> VAR_5 [ VAR_6 -> VAR_7 ] ;  if ( VAR_8 == 0 && VAR_9 -> VAR_10 == 0 ) VAR_11 = VAR_12 -> VAR_13 ; if ( VAR_14 + 2 <= VAR_15 ) return VAR_16 ; } return VAR_17 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 ) { TYPE_4 VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; if ( METHOD_1 ( VAR_8 ) != 2 ) return - VAR_9 ; VAR_10 = ( VAR_11 >> 8 ) & 15 ; VAR_12 = VAR_13 -> VAR_14 [ VAR_15 ] ; if ( ! VAR_16 ) { METHOD_2 ( VAR_17 , VAR_18 , VAR_19 ) ;  METHOD_3 ( VAR_20 , 1 , 0 ,  VAR_21 , VAR_22 ) ; } VAR_23 = - VAR_24 ; switch ( VAR_25 & 0xF000 ) { case 0x0000 : if ( VAR_26 == 0x000B ) { VAR_27 = METHOD_4 ( VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 == 0 ) VAR_32 -> VAR_33 = VAR_34 -> VAR_35 ; } else if ( ( VAR_36 & 0x00FF ) == 0x0023 ) { VAR_37 = METHOD_5 ( VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == 0 ) VAR_42 -> VAR_43 += VAR_44 + 4 ; } else if ( ( VAR_45 & 0x00FF ) == 0x0003 ) { VAR_46 = METHOD_6 ( VAR_47 , VAR_48 , VAR_49 ) ; if ( VAR_50 == 0 ) { VAR_51 -> VAR_52 = VAR_53 -> VAR_54 + 4 ; VAR_55 -> VAR_56 += VAR_57 + 4 ; } } else { goto VAR_58 ; } break ; case 0x1000 : goto VAR_59 ; case 0x2000 : goto VAR_60 ; case 0x4000 : if ( ( VAR_61 & 0x00FF ) == 0x002B ) { VAR_62 = METHOD_7 ( VAR_63 , VAR_64 , VAR_65 ) ; if ( VAR_66 == 0 ) VAR_67 -> VAR_68 = VAR_69 ; } else if ( ( VAR_70 & 0x00FF ) == 0x000B ) { VAR_71 = METHOD_8 ( VAR_72 , VAR_73 , VAR_74 ) ; if ( VAR_75 == 0 ) { VAR_76 -> VAR_77 = VAR_78 -> VAR_79 + 4 ; VAR_80 -> VAR_81 = VAR_82 ; } } else { goto VAR_83 ; } break ; case 0x5000 : goto VAR_84 ; case 0x6000 : goto VAR_85 ; case 0x8000 : switch ( VAR_86 & 0x0F00 ) { case 0x0100 : goto VAR_87 ; case 0x0500 : goto VAR_88 ; case 0x0B00 : break ; case 0x0F00 : VAR_89 = METHOD_9 ( VAR_90 , VAR_91 , VAR_92 ) ; if ( VAR_93 == 0 ) { if METHOD_10 ( VAR_94 ) || METHOD_11 ( VAR_95 ) if ( ( VAR_96 -> VAR_97 & 0x00000001 ) != 0 ) VAR_98 -> VAR_99 += 4 ; else VAR_100 -> VAR_101 += METHOD_12 ( VAR_102 ) ; } break ; case 0x0900 : break ; case 0x0D00 : VAR_103 = METHOD_13 ( VAR_104 , VAR_105 , VAR_106 ) ; if ( VAR_107 == 0 ) { if METHOD_14 ( VAR_108 ) || METHOD_15 ( VAR_109 ) if ( ( VAR_110 -> VAR_111 & 0x00000001 ) == 0 ) VAR_112 -> VAR_113 += 4 ; else VAR_114 -> VAR_115 += METHOD_16 ( VAR_116 ) ; } break ; } break ; case 0xA000 : VAR_117 = METHOD_17 ( VAR_118 , VAR_119 , VAR_120 ) ; if ( VAR_121 == 0 ) VAR_122 -> VAR_123 += METHOD_18 ( VAR_124 ) ; break ; case 0xB000 : VAR_125 = METHOD_19 ( VAR_126 , VAR_127 , VAR_128 ) ; if ( VAR_129 == 0 ) { VAR_130 -> VAR_131 = VAR_132 -> VAR_133 + 4 ; VAR_134 -> VAR_135 += METHOD_20 ( VAR_136 ) ; } break ; } return VAR_137 ; VAR_138 : VAR_139 = METHOD_21 ( VAR_140 , VAR_141 , VAR_142 ) ; if ( VAR_143 == 0 ) VAR_144 -> VAR_145 += METHOD_22 ( VAR_146 ) ; return VAR_147 ; }
static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( "iptables:loophook%upos%u%08X.\\n" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ;  if ( ( VAR_38 -> VAR_39 == sizeof ( struct STRUCT_OR_UNION_4 ) &&  ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) &&  VAR_46 -> VAR_47 < 0 &&  METHOD_4 ( & VAR_48 -> VAR_49 ) ) || VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( "mark_source_chains:bad" "negativeverdict(%i)\\n" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; TYPE_8 TYPE_9 if ( VAR_67 -> VAR_68 & ( 1 << VAR_69 ) ) { METHOD_7 ( "Backunset" "onhook%u" "rule%u\\n" , VAR_70 , VAR_71 ) ; } VAR_72 = VAR_73 ; VAR_74 = VAR_75 -> VAR_76 . VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = 0 ; if ( VAR_81 == VAR_82 ) goto VAR_83 ; VAR_84 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_85 + VAR_86 ) ; } while ( VAR_87 == VAR_88 + VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 -> VAR_93 ; VAR_94 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_95 + VAR_96 + VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 += VAR_103 ; } else { TYPE_10 VAR_104 = VAR_105 -> VAR_106 ; if ( METHOD_8 ( VAR_107 -> VAR_108 . VAR_109 . VAR_110 . VAR_111 , VAR_112 ) == 0 && VAR_113 >= 0 ) { if ( VAR_114 > VAR_115 -> VAR_116 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_9 ( "mark_source_chains:" "badverdict(%i)\\n" , VAR_117 ) ; return 0 ; } METHOD_10 ( "Jumprule%u->%u\\n" , VAR_118 , VAR_119 ) ; } else { VAR_120 = VAR_121 + VAR_122 -> VAR_123 ; } VAR_124 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_125 + VAR_126 ) ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } } VAR_133 : METHOD_11 ( "Finishedchain%u\\n" , VAR_134 ) ; } return 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; TYPE_4 VAR_5 , VAR_6 ; TYPE_5 VAR_7 , * VAR_8 , VAR_9 [ 256 ] ; VAR_10 = VAR_11 ; VAR_12 -> VAR_13 = 0 ; METHOD_1 ( VAR_14 , 0 , VAR_15 ) ; while ( METHOD_2 ( VAR_16 ) >= 0 ) ++ VAR_17 -> VAR_18 ; if ( ! VAR_19 -> VAR_20 ) return 0 ; METHOD_3 ( VAR_21 , 0 , VAR_22 ) ;  VAR_23 -> VAR_24 = METHOD_4 ( 1 , sizeof ( VAR_25 ) * VAR_26 -> VAR_27 ) ;  VAR_28 = 1 ; for ( VAR_29 = 0 ; VAR_30 < VAR_31 -> VAR_32 ; VAR_33 ++ ) { if ( ( VAR_34 = METHOD_5 ( VAR_35 ) ) < 0 ) break ; VAR_36 -> VAR_37 [ VAR_38 ] . VAR_39 = VAR_40 ++ ; VAR_41 = 0 ; while ( METHOD_6 ( VAR_42 , ( ( VAR_43 = METHOD_7 ( VAR_44 ) ) != 'f' ) ) ) METHOD_8 ( VAR_45 , VAR_46 - ( ++ VAR_47 ) , VAR_48 ) ; if ( VAR_49 >= sizeof ( VAR_50 ) ) { METHOD_9 ( "Failedtolocatethestartxreftoken." "ThismightbeacorruptPDF.\\n" ) ; return - 1 ; } METHOD_10 ( VAR_51 , 0 , sizeof ( VAR_52 ) ) ; METHOD_11 ( METHOD_12 ( VAR_53 , 1 , VAR_54 , VAR_55 ) , VAR_56 , "Failedtoreadstartxref.\\n" ) ; VAR_57 = VAR_58 ; while ( * VAR_59 == '' || * VAR_60 == '\\n' || * VAR_61 == '\\r' ) ++ VAR_62 ; VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 = METHOD_13 ( VAR_67 ) ; if ( VAR_68 -> VAR_69 [ VAR_70 ] . VAR_71 == 0 ) METHOD_14 ( VAR_72 , & VAR_73 -> VAR_74 [ VAR_75 ] ) ; else { VAR_76 = METHOD_15 ( VAR_77 ) ; METHOD_16 ( VAR_78 , VAR_79 -> VAR_80 [ VAR_81 ] . VAR_82 , VAR_83 ) ; VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 = METHOD_17 ( VAR_88 ) ; METHOD_18 ( VAR_89 , VAR_90 , VAR_91 ) ; } if ( ! METHOD_19 ( VAR_92 , VAR_93 , & VAR_94 -> VAR_95 [ VAR_96 ] ) ) { VAR_97 = VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 ; METHOD_20 ( & VAR_102 -> VAR_103 [ VAR_104 ] , 0 , sizeof ( VAR_105 ) ) ; VAR_106 -> VAR_107 [ VAR_108 ] . VAR_109 = VAR_110 ; METHOD_21 ( VAR_111 ) ; METHOD_22 ( VAR_112 ) ; continue ; } METHOD_23 ( VAR_113 , & VAR_114 -> VAR_115 [ VAR_116 ] ) ; } if ( VAR_117 -> VAR_118 [ 0 ] . VAR_119 ) METHOD_24 ( VAR_120 ) ; METHOD_25 ( VAR_121 , VAR_122 ) ; return VAR_123 -> VAR_124 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = - 1 ; TYPE_6 * VAR_5 = METHOD_1 ( VAR_6 ) ; VAR_7 = 0 ;  if ( ! VAR_8 || ( VAR_9 && ! VAR_10 ) )  METHOD_2 ( VAR_11 ) ; if ( VAR_12 ) { if ( METHOD_3 ( VAR_13 , VAR_14 , 0 , VAR_15 ) != VAR_16 ) METHOD_4 ( VAR_17 ) ; } if ( METHOD_5 ( & VAR_18 , VAR_19 -> VAR_20 , VAR_21 , VAR_22 , VAR_23 ) != VAR_24 ) METHOD_6 ( VAR_25 ) ;  VAR_26 :  return VAR_27 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 ; VAR_5 = METHOD_2 ( & VAR_6 -> VAR_7 , VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( VAR_10 ) ; VAR_11 = METHOD_4 ( & VAR_12 -> VAR_13 , VAR_14 ) ; if ( VAR_15 ) METHOD_5 ( VAR_16 ) ; METHOD_6 ( VAR_17 ) ;  VAR_18 = METHOD_7 ( & VAR_19 -> VAR_20 , VAR_21 ) ;   if ( VAR_22 )   METHOD_8 ( VAR_23 , VAR_24 , VAR_25 -> VAR_26 ) ;   }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 ) { METHOD_1 ( ) ; METHOD_2 ( ) ;  METHOD_3 ( & VAR_0 ) ;  METHOD_4 ( ) ;  METHOD_5 ( ) ;  METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ( unsigned TYPE_3 ) VAR_1 , METHOD_10 ( VAR_2 * sizeof ( struct STRUCT_OR_UNION_0 ) ) ) ; METHOD_11 ( VAR_3 ) ; METHOD_12 ( ( unsigned TYPE_4 ) VAR_4 , METHOD_13 ( VAR_5 * sizeof ( struct STRUCT_OR_UNION_1 ) ) ) ; METHOD_14 ( & VAR_6 ) ; METHOD_15 ( ) ; METHOD_16 ( VAR_7 ) ; METHOD_17 ( VAR_8 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( "chanserv" , & VAR_1 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) {  struct STRUCT_OR_UNION_1 * VAR_3 = ( ( struct STRUCT_OR_UNION_2 * ) VAR_4 ) -> VAR_5 -> VAR_6 ;  struct STRUCT_OR_UNION_3 VAR_7 ;  METHOD_1 ( & VAR_8 , VAR_9 ) ;  return METHOD_2 ( VAR_10 , VAR_11 , & VAR_12 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { unsigned TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 = VAR_6 ; METHOD_1 ( ) ;  if ( VAR_7 -> VAR_8 != VAR_9 )   goto VAR_10 ;  if ( ! VAR_11 -> VAR_12 ) { METHOD_2 ( METHOD_3 ( ) ) ;  goto VAR_13 ;  } if ( ( VAR_14 != VAR_15 ) && ! ( VAR_16 & VAR_17 ) ) VAR_18 = ( VAR_19 - VAR_20 ) >> VAR_21 ; if ( VAR_22 > VAR_23 ) { VAR_24 = VAR_25 ; METHOD_4 ( VAR_26 ) ; METHOD_5 ( ) ; } else { for ( VAR_27 = VAR_28 ; VAR_29 < VAR_30 ; VAR_31 += VAR_32 ) { METHOD_6 ( VAR_33 ) ; METHOD_7 ( VAR_34 ) ; } } METHOD_8 ( VAR_35 , VAR_36 ) ; VAR_37 : if ( VAR_38 == VAR_39 ) { VAR_40 = 0UL ; VAR_41 = VAR_42 ; } if ( METHOD_9 ( METHOD_10 ( VAR_43 ) , METHOD_11 ( ) ) < VAR_44 ) METHOD_12 ( METHOD_13 ( VAR_45 ) , VAR_46 , VAR_47 , VAR_48 ) ; METHOD_14 ( ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  TYPE_1 VAR_1 ; TYPE_2 VAR_2 ; if ( ! VAR_3 -> VAR_4 ) return ; METHOD_1 ( VAR_5 , "Stream%dPSNR(Overall/Avg/Y/U/V)" , VAR_6 -> VAR_7 ) ;  VAR_8 = METHOD_2 ( ( TYPE_3 ) VAR_9 -> VAR_10 , 255.0 ,  ( TYPE_4 ) VAR_11 -> VAR_12 ) ; METHOD_3 ( VAR_13 , "%.3f" , VAR_14 ) ; for ( VAR_15 = 0 ; VAR_16 < 4 ; VAR_17 ++ ) { METHOD_4 ( VAR_18 , "%.3f" , VAR_19 -> VAR_20 [ VAR_21 ] / VAR_22 -> VAR_23 ) ; } METHOD_5 ( VAR_24 , "\\n" ) ; }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 [ 500 ] ;  TYPE_4 VAR_3 = 0 ; TYPE_5 VAR_4 = 0 ; VAR_5 * VAR_6 ; METHOD_1 ( VAR_7 , "/proc/%d/environ" , VAR_8 ) ; VAR_9 = METHOD_2 ( VAR_10 , "r" ) ; if ( VAR_11 == VAR_12 ) return VAR_13 ; for ( ; ; ) {  VAR_14 [ VAR_15 ] = METHOD_3 ( VAR_16 ) ;  if ( VAR_17 == 1 && ( VAR_18 [ VAR_19 ] == 0 || VAR_20 [ VAR_21 ] == '\\0' || VAR_22 [ VAR_23 ] == VAR_24 ) ) { TYPE_6 * VAR_25 ; VAR_26 [ VAR_27 ] = 0 ; VAR_28 = METHOD_4 ( METHOD_5 ( VAR_29 ) + 10 ) ; METHOD_6 ( VAR_30 , "%s" , VAR_31 ) ; METHOD_7 ( VAR_32 ) ; return VAR_33 ; } switch ( VAR_34 [ VAR_35 ] ) { case VAR_36 : METHOD_8 ( VAR_37 ) ; return VAR_38 ; case '=' : VAR_39 [ VAR_40 ] = 0 ; if ( ! METHOD_9 ( VAR_41 , VAR_42 ) ) { VAR_43 = 1 ; } VAR_44 = 0 ; break ; case '\\0' : VAR_45 = 0 ; break ; default : VAR_46 ++ ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  if ( ! METHOD_1 ( & VAR_1 -> VAR_2 -> VAR_3 ) )  return ; METHOD_2 ( & VAR_4 -> VAR_5 -> VAR_6 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ; TYPE_6 * VAR_9 , * VAR_10 ; TYPE_7 * VAR_11 , * VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; if ( VAR_17 ) {  VAR_18 = METHOD_1 ( METHOD_2 ( VAR_19 ) * 2 + 16 ) ;  METHOD_3 ( VAR_20 , "%s/%s" , VAR_21 , VAR_22 ) ; if ( ( VAR_23 = METHOD_4 ( VAR_24 , '.' ) ) && ( METHOD_5 ( VAR_25 , ".pdf" , 4 ) == 0 ) ) * VAR_26 = '\\0' ; METHOD_6 ( VAR_27 , ".summary" ) ; if ( ! ( VAR_28 = METHOD_7 ( VAR_29 , "w" ) ) ) { METHOD_8 ( "Couldnotopenfile\'%s\'forwriting\\n" , VAR_30 ) ; return ; } } VAR_31 = ( VAR_32 ) ? VAR_33 : VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; if ( VAR_38 && VAR_39 -> VAR_40 [ 0 ] . VAR_41 ) -- VAR_42 ; for ( VAR_43 = 1 ; VAR_44 < VAR_45 -> VAR_46 ; ++ VAR_47 ) if ( VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 == 0 ) -- VAR_52 ; if ( ! VAR_53 -> VAR_54 || ( ! VAR_55 && VAR_56 -> VAR_57 [ 0 ] . VAR_58 ) ) VAR_59 = 1 ; VAR_60 = 0 ; for ( VAR_61 = 0 ; ! ( const TYPE_8 ) VAR_62 -> VAR_63 && VAR_64 < VAR_65 -> VAR_66 ; VAR_67 ++ ) { if ( VAR_68 & VAR_69 ) continue ; for ( VAR_70 = 0 ; VAR_71 < VAR_72 -> VAR_73 [ VAR_74 ] . VAR_75 ; VAR_76 ++ ) { ++ VAR_77 ; METHOD_9 ( VAR_78 , "%s:--%c--Version%d--Object%d(%s)" , VAR_79 -> VAR_80 , METHOD_10 ( VAR_81 , VAR_82 , VAR_83 ) , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 , VAR_88 -> VAR_89 [ VAR_90 ] . VAR_91 [ VAR_92 ] . VAR_93 , METHOD_11 ( VAR_94 , VAR_95 -> VAR_96 [ VAR_97 ] . VAR_98 [ VAR_99 ] . VAR_100 , & VAR_101 -> VAR_102 [ VAR_103 ] ) ) ; if ( 0 ) METHOD_12 ( VAR_104 , "Page(%d)\\n" , VAR_105 ) ; else METHOD_13 ( VAR_106 , "\\n" ) ; } } if ( ! ( VAR_107 & VAR_108 ) ) { if ( VAR_109 -> VAR_110 || ! VAR_111 ) METHOD_14 ( VAR_112 , "%s:ThisPDFcontainspotentialcrossreferencestreams.\\n" "%s:Anobjectsummaryisnotavailable.\\n" , VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ; METHOD_15 ( VAR_117 , "----------%s----------\\n" "Versions:%d\\n" , VAR_118 -> VAR_119 , VAR_120 ) ; if ( ! VAR_121 -> VAR_122 ) for ( VAR_123 = 0 ; VAR_124 < VAR_125 -> VAR_126 ; VAR_127 ++ ) { if ( VAR_128 -> VAR_129 [ VAR_130 ] . VAR_131 ) continue ; VAR_132 = VAR_133 -> VAR_134 [ VAR_135 ] . VAR_136 ; if ( VAR_137 -> VAR_138 [ 0 ] . VAR_139 ) VAR_140 += VAR_141 -> VAR_142 [ 0 ] . VAR_143 ; if ( VAR_144 -> VAR_145 [ VAR_146 ] . VAR_147 && VAR_148 ) METHOD_16 ( VAR_149 , "Version%d--%dobjects\\n" , VAR_150 -> VAR_151 [ VAR_152 ] . VAR_153 , VAR_154 ) ; } } else METHOD_17 ( VAR_155 , "%s:%d\\n" , VAR_156 -> VAR_157 , VAR_158 ) ; if ( VAR_159 ) { METHOD_18 ( VAR_160 ) ; METHOD_19 ( VAR_161 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * * VAR_1 ) { TYPE_2 VAR_2 = 0 ; TYPE_3 VAR_3 = 0 ; if ( ! VAR_4 ) return VAR_5 ; VAR_6 = ( * * VAR_7 ) & VAR_8 ; VAR_9 = ( * * VAR_10 ) & VAR_11 ; ( * VAR_12 ) ++ ; if ( VAR_13 == VAR_14 ) { switch ( VAR_15 ) { case VAR_16 : case VAR_17 : case VAR_18 : case VAR_19 : case VAR_20 : case VAR_21 : { TYPE_4 VAR_22 = * * VAR_23 & VAR_24 ; if ( ( * * VAR_25 & VAR_26 ) != VAR_27 ) { METHOD_1 ( "%s:invalidsizenodetypefornodetype0x%02x:found0x%02x,expected0x%02x\\n" , VAR_28 , VAR_29 , * * VAR_30 & VAR_31 , VAR_32 ) ; return VAR_33 ; } ( * VAR_34 ) ++ ; VAR_35 = 1 << VAR_36 ; if ( * VAR_37 + VAR_38 > VAR_39 -> VAR_40 ) { METHOD_2 ( "%s:sizenodedatabytesfornodetype0x%02xpointoutsideofvalidrange\\n" , VAR_41 , VAR_42 ) ; return VAR_43 ; } VAR_44 = METHOD_3 ( * VAR_45 , VAR_46 ) ; ( * VAR_47 ) += VAR_48 ; break ; } default : break ; } } switch ( VAR_49 ) { case VAR_50 : switch ( VAR_51 ) { case VAR_52 : { TYPE_5 VAR_53 = METHOD_4 ( ) ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = 1 ; return METHOD_5 ( VAR_62 , VAR_63 ) ; } case VAR_64 : { TYPE_6 VAR_65 = METHOD_6 ( ) ; VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 = 1 ; return METHOD_7 ( VAR_74 , VAR_75 ) ; } case VAR_76 : default : return VAR_77 ; } case VAR_78 : if ( * VAR_79 + ( TYPE_7 ) ( 1 << VAR_80 ) > VAR_81 -> VAR_82 ) { METHOD_8 ( "%s:BPLIST_UINTdatabytespointoutsideofvalidrange\\n" , VAR_83 ) ; return VAR_84 ; } return METHOD_9 ( VAR_85 , VAR_86 ) ; case VAR_87 : if ( * VAR_88 + ( TYPE_8 ) ( 1 << VAR_89 ) > VAR_90 -> VAR_91 ) { METHOD_10 ( "%s:BPLIST_REALdatabytespointoutsideofvalidrange\\n" , VAR_92 ) ; return VAR_93 ; } return METHOD_11 ( VAR_94 , VAR_95 ) ; case VAR_96 : if ( 3 != VAR_97 ) { METHOD_12 ( "%s:invaliddatasizeforBPLIST_DATEnode\\n" , VAR_98 ) ; return VAR_99 ; } if ( * VAR_100 + ( TYPE_9 ) ( 1 << VAR_101 ) > VAR_102 -> VAR_103 ) { METHOD_13 ( "%s:BPLIST_DATEdatabytespointoutsideofvalidrange\\n" , VAR_104 ) ; return VAR_105 ; } return METHOD_14 ( VAR_106 , VAR_107 ) ; case VAR_108 :  if ( * VAR_109 + VAR_110 > VAR_111 -> VAR_112 ) {  METHOD_15 ( "%s:BPLIST_DATAdatabytespointoutsideofvalidrange\\n" , VAR_113 ) ; return VAR_114 ; } return METHOD_16 ( VAR_115 , VAR_116 ) ; case VAR_117 :  if ( * VAR_118 + VAR_119 > VAR_120 -> VAR_121 ) {  METHOD_17 ( "%s:BPLIST_STRINGdatabytespointoutsideofvalidrange\\n" , VAR_122 ) ; return VAR_123 ; } return METHOD_18 ( VAR_124 , VAR_125 ) ; case VAR_126 : if ( VAR_127 * 2 < VAR_128 ) { METHOD_19 ( "%s:IntegeroverflowwhencalculatingBPLIST_UNICODEdatasize.\\n" , VAR_129 ) ; return VAR_130 ; }  if ( * VAR_131 + VAR_132 * 2 > VAR_133 -> VAR_134 ) {  METHOD_20 ( "%s:BPLIST_UNICODEdatabytespointoutsideofvalidrange\\n" , VAR_135 ) ; return VAR_136 ; } return METHOD_21 ( VAR_137 , VAR_138 ) ; case VAR_139 : case VAR_140 :  if ( * VAR_141 + VAR_142 > VAR_143 -> VAR_144 ) {  METHOD_22 ( "%s:BPLIST_ARRAYdatabytespointoutsideofvalidrange\\n" , VAR_145 ) ; return VAR_146 ; } return METHOD_23 ( VAR_147 , VAR_148 , VAR_149 ) ; case VAR_150 : if ( * VAR_151 + VAR_152 + 1 > VAR_153 -> VAR_154 ) { METHOD_24 ( "%s:BPLIST_UIDdatabytespointoutsideofvalidrange\\n" , VAR_155 ) ; return VAR_156 ; } return METHOD_25 ( VAR_157 , VAR_158 ) ; case VAR_159 :  if ( * VAR_160 + VAR_161 > VAR_162 -> VAR_163 ) {  METHOD_26 ( "%s:BPLIST_REALdatabytespointoutsideofvalidrange\\n" , VAR_164 ) ; return VAR_165 ; } return METHOD_27 ( VAR_166 , VAR_167 , VAR_168 ) ; default : METHOD_28 ( "%s:unexpectednodetype0x%02x\\n" , VAR_169 , VAR_170 ) ; return VAR_171 ; } return VAR_172 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 = ( TYPE_3 * ) VAR_3 -> VAR_4 ; METHOD_1 ( "InitializingKSZ8851Ethernetcontroller...\\r\\n" ) ; if ( VAR_5 == VAR_6 ) VAR_7 -> VAR_8 -> METHOD_2 ( ) ; VAR_9 -> VAR_10 -> METHOD_3 ( ) ;  TRACE_DEBUG ( "CIDER=0x%04" PRIX16 "\\r\\n" , METHOD_4 ( VAR_11 , VAR_12 ) ) ;   TRACE_DEBUG ( "PHY1ILR=0x%04" PRIX16 "\\r\\n" , METHOD_5 ( VAR_13 , VAR_14 ) ) ;   TRACE_DEBUG ( "PHY1IHR=0x%04" PRIX16 "\\r\\n" , METHOD_6 ( VAR_15 , VAR_16 ) ) ;   if ( METHOD_7 ( VAR_17 , VAR_18 ) != VAR_19 )  { return VAR_20 ; } METHOD_8 ( VAR_21 ) ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = METHOD_9 ( VAR_26 ) ; VAR_27 -> VAR_28 = METHOD_10 ( VAR_29 ) ; if ( VAR_30 -> VAR_31 == VAR_32 || VAR_33 -> VAR_34 == VAR_35 ) { METHOD_11 ( VAR_36 -> VAR_37 ) ; METHOD_12 ( VAR_38 -> VAR_39 ) ; return VAR_40 ; }  METHOD_13 ( VAR_41 , VAR_42 , METHOD_14 ( VAR_43 -> VAR_44 . VAR_45 [ 0 ] ) ) ;   METHOD_15 ( VAR_46 , VAR_47 , METHOD_16 ( VAR_48 -> VAR_49 . VAR_50 [ 1 ] ) ) ;   METHOD_17 ( VAR_51 , VAR_52 , METHOD_18 ( VAR_53 -> VAR_54 . VAR_55 [ 2 ] ) ) ;   METHOD_19 ( VAR_56 , VAR_57 , VAR_58 | VAR_59 | VAR_60 ) ;  METHOD_20 ( VAR_61 , VAR_62 , VAR_63 ) ; METHOD_21 ( VAR_64 , VAR_65 , VAR_66 | VAR_67 | VAR_68 | VAR_69 | VAR_70 ) ; METHOD_22 ( VAR_71 , VAR_72 , VAR_73 | VAR_74 | VAR_75 ) ; METHOD_23 ( VAR_76 , VAR_77 , VAR_78 | VAR_79 ) ; METHOD_24 ( VAR_80 , VAR_81 , VAR_82 ) ; METHOD_25 ( VAR_83 , VAR_84 , 1 ) ;  METHOD_26 ( VAR_85 , VAR_86 , VAR_87 ) ;   METHOD_27 ( VAR_88 , VAR_89 , VAR_90 ) ;   METHOD_28 ( VAR_91 , VAR_92 , VAR_93 | VAR_94 |  VAR_95 | VAR_96 | VAR_97 | VAR_98 | VAR_99 | VAR_100 | VAR_101 | VAR_102 | VAR_103 | VAR_104 ) ;  METHOD_29 ( VAR_105 , VAR_106 , VAR_107 | VAR_108 | VAR_109 ) ;   METHOD_30 ( VAR_110 , VAR_111 , VAR_112 ) ;   METHOD_31 ( VAR_113 , VAR_114 , VAR_115 ) ;  METHOD_32 ( & VAR_116 -> VAR_117 ) ; VAR_118 -> VAR_119 = VAR_120 ; METHOD_33 ( & VAR_121 ) ; return VAR_122 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; if ( ! VAR_5 ) return ; VAR_6 -> VAR_7 = VAR_8 ; METHOD_1 ( & VAR_9 -> VAR_10 ) ; METHOD_2 ( & VAR_11 -> VAR_12 ) ; VAR_13 -> VAR_14 = VAR_15 ; METHOD_3 ( & VAR_16 -> VAR_17 ) ; METHOD_4 ( & VAR_18 -> VAR_19 ) ; METHOD_5 ( VAR_20 ) ; VAR_21 = METHOD_6 ( VAR_22 -> VAR_23 ) ; METHOD_7 ( & VAR_24 -> VAR_25 ) ; METHOD_8 ( & VAR_26 -> VAR_27 ) ; METHOD_9 ( & VAR_28 -> VAR_29 ) ;  VAR_30 -> VAR_31 . VAR_32 = 1 ;  METHOD_10 ( & VAR_33 -> VAR_34 . VAR_35 ) ; if ( METHOD_11 ( & VAR_36 -> VAR_37 . VAR_38 ) ) METHOD_12 ( VAR_39 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; VAR_3 -> VAR_4 -> VAR_5 = METHOD_2 ( VAR_6 -> VAR_7 -> VAR_8 , VAR_9 ) ;  METHOD_3 ( & VAR_10 -> VAR_11 ) ;  METHOD_4 ( VAR_12 -> VAR_13 ) ; METHOD_5 ( VAR_14 -> VAR_15 ) ; METHOD_6 ( VAR_16 -> VAR_17 ) ; METHOD_7 ( & VAR_18 -> VAR_19 ) ; METHOD_8 ( & VAR_20 -> VAR_21 ) ; METHOD_9 ( VAR_22 ) -> METHOD_10 ( VAR_23 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * const VAR_3 = & VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_0 VAR_6 = { VAR_7 , VAR_8 , & VAR_9 -> VAR_10 [ 0 ] -> VAR_11 . VAR_12 } ;  METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ,  & VAR_17 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 ; struct STRUCT_OR_UNION_4 * VAR_2 ; struct STRUCT_OR_UNION_5 * VAR_3 ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 ; TYPE_2 * VAR_7 ; TYPE_3 VAR_8 = 0 ;  if ( METHOD_1 ( VAR_9 , & STRUCT_OR_UNION_6 -> VAR_10 ) )  return - VAR_11 ; VAR_12 = STRUCT_OR_UNION_7 -> VAR_13 . VAR_14 [ 0 ] ; if ( ! VAR_15 -> VAR_16 ) return - VAR_17 ; if ( VAR_18 <= 0 || VAR_19 > 32767 || ! VAR_20 -> VAR_21 ) return - VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 + 1 , VAR_25 ) ; if ( ! VAR_26 ) return - VAR_27 ; VAR_28 = METHOD_3 ( ) ; if ( ! VAR_29 ) { VAR_30 = - VAR_31 ; goto VAR_32 ; } VAR_33 = METHOD_4 ( STRUCT_OR_UNION_8 ) ; if ( ! VAR_34 ) { VAR_35 = - VAR_36 ; goto VAR_37 ; } METHOD_5 ( VAR_38 , VAR_39 -> VAR_40 , VAR_41 ) ; VAR_42 [ VAR_43 ] = '\\0' ; VAR_44 = METHOD_6 ( VAR_45 , VAR_46 , VAR_47 ) ; if ( VAR_48 != VAR_49 ) { VAR_50 = - VAR_51 ; METHOD_7 ( VAR_52 ) ; goto VAR_53 ; } if ( ! VAR_54 -> VAR_55 ) { VAR_56 = - VAR_57 ; METHOD_8 ( VAR_58 ) ; goto VAR_59 ; } VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; VAR_64 -> VAR_65 = VAR_66 -> VAR_67 ; METHOD_9 ( VAR_68 -> STRUCT_OR_UNION_9 , VAR_69 -> STRUCT_OR_UNION_10 , VAR_70 -> VAR_71 ) ; METHOD_10 ( VAR_72 ) ; METHOD_11 ( VAR_73 ) ; VAR_74 = METHOD_12 ( VAR_75 , VAR_76 ) ; if ( VAR_77 < 0 ) { METHOD_13 ( "trusted_key:key_sealfailed(%d)\\n" , VAR_78 ) ; METHOD_14 ( VAR_79 ) ; goto VAR_80 ; } if ( VAR_81 -> METHOD_15 ) { VAR_82 = METHOD_16 ( VAR_83 -> METHOD_17 ) ; if ( VAR_84 < 0 ) { METHOD_18 ( "trusted_key:pcrlockfailed(%d)\\n" , VAR_85 ) ; METHOD_19 ( VAR_86 ) ; goto VAR_87 ; } } METHOD_20 ( STRUCT_OR_UNION_11 , VAR_88 ) ; METHOD_21 ( & VAR_89 -> VAR_90 , VAR_91 ) ; VAR_92 : METHOD_22 ( VAR_93 ) ; METHOD_23 ( VAR_94 ) ; return VAR_95 ; }
TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 , unsigned TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { unsigned TYPE_5 * VAR_4 ; const unsigned TYPE_6 * VAR_5 ; TYPE_7 VAR_6 , VAR_7 ; TYPE_8 VAR_8 = 0 ; const unsigned TYPE_9 * VAR_9 ; const unsigned TYPE_10 * const VAR_10 = VAR_11 + VAR_12 ; unsigned TYPE_11 * const VAR_13 = VAR_14 + * VAR_15 ; VAR_16 = VAR_17 ; VAR_18 = VAR_19 ; if ( METHOD_1 ( VAR_20 < 3 ) ) goto VAR_21 ; if ( * VAR_22 > 17 ) { VAR_23 = * VAR_24 ++ - 17 ; if ( VAR_25 < 4 ) { VAR_26 = VAR_27 ; goto VAR_28 ; } goto VAR_29 ; } for ( ; ; ) { VAR_30 = * VAR_31 ++ ; if ( VAR_32 < 16 ) { if ( METHOD_2 ( VAR_33 == 0 ) ) { if ( METHOD_3 ( VAR_34 == 0 ) ) { while ( METHOD_4 ( * VAR_35 == 0 ) ) { VAR_36 += 255 ; VAR_37 ++ ;  METHOD_5 ( 1 ) ;  } VAR_38 += 15 + * VAR_39 ++ ; } VAR_40 += 3 ; VAR_41 : if d ( VAR_42 )  if ( METHOD_6 ( METHOD_7 ( VAR_43 + 15 ) && METHOD_8 ( VAR_44 + 15 ) ) ) {  const unsigned TYPE_12 * VAR_45 = VAR_46 + VAR_47 ; unsigned TYPE_13 * VAR_48 = VAR_49 + VAR_50 ; do { METHOD_9 ( VAR_51 , VAR_52 ) ; VAR_53 += 8 ; VAR_54 += 8 ; METHOD_10 ( VAR_55 , VAR_56 ) ; VAR_57 += 8 ; VAR_58 += 8 ; } while ( VAR_59 < VAR_60 ) ; VAR_61 = VAR_62 ; VAR_63 = VAR_64 ; } else {  METHOD_11 ( VAR_65 ) ;   METHOD_12 ( VAR_66 + 3 ) ;  do { * VAR_67 ++ = * VAR_68 ++ ; } while ( -- VAR_69 > 0 ) ; } VAR_70 = 4 ; continue ; } else if ( VAR_71 != 4 ) { VAR_72 = VAR_73 & 3 ; VAR_74 = VAR_75 - 1 ; VAR_76 -= VAR_77 >> 2 ; VAR_78 -= * VAR_79 ++ << 2 ; METHOD_13 ( VAR_80 ) ;  METHOD_14 ( 2 ) ;  VAR_81 [ 0 ] = VAR_82 [ 0 ] ; VAR_83 [ 1 ] = VAR_84 [ 1 ] ; VAR_85 += 2 ; goto VAR_86 ; } else { VAR_87 = VAR_88 & 3 ; VAR_89 = VAR_90 - ( 1 + VAR_91 ) ; VAR_92 -= VAR_93 >> 2 ; VAR_94 -= * VAR_95 ++ << 2 ; VAR_96 = 3 ; } } else if ( VAR_97 >= 64 ) { VAR_98 = VAR_99 & 3 ; VAR_100 = VAR_101 - 1 ; VAR_102 -= ( VAR_103 >> 2 ) & 7 ; VAR_104 -= * VAR_105 ++ << 3 ; VAR_106 = ( VAR_107 >> 5 ) - 1 + ( 3 - 1 ) ; } else if ( VAR_108 >= 32 ) { VAR_109 = ( VAR_110 & 31 ) + ( 3 - 1 ) ; if ( METHOD_15 ( VAR_111 == 2 ) ) { while ( METHOD_16 ( * VAR_112 == 0 ) ) { VAR_113 += 255 ; VAR_114 ++ ;  METHOD_17 ( 1 ) ;  } VAR_115 += 31 + * VAR_116 ++ ;  METHOD_18 ( 2 ) ;  } VAR_117 = VAR_118 - 1 ; VAR_119 = METHOD_19 ( VAR_120 ) ; VAR_121 += 2 ; VAR_122 -= VAR_123 >> 2 ; VAR_124 &= 3 ; } else { VAR_125 = VAR_126 ; VAR_127 -= ( VAR_128 & 8 ) << 11 ; VAR_129 = ( VAR_130 & 7 ) + ( 3 - 1 ) ; if ( METHOD_20 ( VAR_131 == 2 ) ) { while ( METHOD_21 ( * VAR_132 == 0 ) ) { VAR_133 += 255 ; VAR_134 ++ ;  METHOD_22 ( 1 ) ;  } VAR_135 += 7 + * VAR_136 ++ ;  METHOD_23 ( 2 ) ;  } VAR_137 = METHOD_24 ( VAR_138 ) ; VAR_139 += 2 ; VAR_140 -= VAR_141 >> 2 ; VAR_142 &= 3 ; if ( VAR_143 == VAR_144 ) goto VAR_145 ; VAR_146 -= 0x4000 ; } METHOD_25 ( VAR_147 ) ; if d ( VAR_148 ) if ( VAR_149 - VAR_150 >= 8 ) { unsigned TYPE_14 * VAR_151 = VAR_152 + VAR_153 ;  if ( METHOD_26 ( METHOD_27 ( VAR_154 + 15 ) ) ) {  do { METHOD_28 ( VAR_155 , VAR_156 ) ; VAR_157 += 8 ; VAR_158 += 8 ; METHOD_29 ( VAR_159 , VAR_160 ) ; VAR_161 += 8 ; VAR_162 += 8 ; } while ( VAR_163 < VAR_164 ) ; VAR_165 = VAR_166 ;  if ( METHOD_30 ( 6 ) ) {  VAR_167 = VAR_168 ; METHOD_31 ( VAR_169 , VAR_170 ) ; VAR_171 += VAR_172 ; VAR_173 += VAR_174 ; continue ; } } else {  METHOD_32 ( VAR_175 ) ;  do { * VAR_176 ++ = * VAR_177 ++ ; } while ( VAR_178 < VAR_179 ) ; } } else { unsigned TYPE_15 * VAR_180 = VAR_181 + VAR_182 ;  METHOD_33 ( VAR_183 ) ;  VAR_184 [ 0 ] = VAR_185 [ 0 ] ; VAR_186 [ 1 ] = VAR_187 [ 1 ] ; VAR_188 += 2 ; VAR_189 += 2 ; do { * VAR_190 ++ = * VAR_191 ++ ; } while ( VAR_192 < VAR_193 ) ; } VAR_194 : VAR_195 = VAR_196 ; VAR_197 = VAR_198 ; if d ( VAR_199 )  if ( METHOD_34 ( METHOD_35 ( 6 ) && METHOD_36 ( 4 ) ) ) {  METHOD_37 ( VAR_200 , VAR_201 ) ; VAR_202 += VAR_203 ; VAR_204 += VAR_205 ; } else {  METHOD_38 ( VAR_206 + 3 ) ;   METHOD_39 ( VAR_207 ) ;  while ( VAR_208 > 0 ) { * VAR_209 ++ = * VAR_210 ++ ; VAR_211 -- ; } } } VAR_212 : * VAR_213 = VAR_214 - VAR_215 ; return ( VAR_216 != 3 ? VAR_217 : VAR_218 == VAR_219 ? VAR_220 : VAR_221 < VAR_222 ? VAR_223 : VAR_224 ) ; VAR_225 : * VAR_226 = VAR_227 - VAR_228 ; return VAR_229 ; VAR_230 : * VAR_231 = VAR_232 - VAR_233 ; return VAR_234 ; VAR_235 : * VAR_236 = VAR_237 - VAR_238 ; return VAR_239 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * * VAR_2 , const TYPE_4 * * VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , enum VAR_7 VAR_8 , TYPE_8 * VAR_9 , TYPE_9 * VAR_10 ) { TYPE_10 VAR_11 , VAR_12 ; const TYPE_11 * VAR_13 ; const TYPE_12 * VAR_14 ; const TYPE_13 * VAR_15 ; const TYPE_14 * VAR_16 ; TYPE_15 * VAR_17 ; TYPE_16 * VAR_18 ; TYPE_17 VAR_19 ; TYPE_18 VAR_20 , VAR_21 ; TYPE_19 VAR_22 , VAR_23 , VAR_24 , VAR_25 ; TYPE_20 VAR_26 , VAR_27 ; TYPE_21 TYPE_22 TYPE_23 VAR_28 ; const TYPE_24 * VAR_29 ; TYPE_25 VAR_30 ; VAR_31 = METHOD_1 ( VAR_32 , 0 ) ; VAR_33 = VAR_34 ? * VAR_35 : VAR_36 ; VAR_37 = VAR_38 ? * VAR_39 : VAR_40 ; VAR_41 = VAR_42 ; VAR_43 = METHOD_2 ( VAR_44 ) ; METHOD_3 ( "Loading%sfromFITImageat%08lx...\\n" , VAR_45 , VAR_46 ) ; METHOD_4 ( VAR_47 + VAR_48 ) ;  if ( METHOD_5 ( VAR_49 , VAR_50 ) ) {   METHOD_6 ( "BadFIT%simageformat!\\n" , VAR_51 ) ;  METHOD_7 ( VAR_52 + VAR_53 ) ;  return - VAR_54 ;  } METHOD_8 ( VAR_55 + VAR_56 ) ; if ( VAR_57 ) { METHOD_9 ( VAR_58 + VAR_59 ) ; VAR_60 = METHOD_10 ( VAR_61 , VAR_62 ) ; } else { METHOD_11 ( VAR_63 + VAR_64 ) ; if ( VAR_65 && ! VAR_66 ) { VAR_67 = METHOD_12 ( VAR_68 , METHOD_13 ( ) ) ; } else { VAR_69 = METHOD_14 ( VAR_70 , VAR_71 ) ; } if ( VAR_72 < 0 ) { METHOD_15 ( "Couldnotfindconfigurationnode\\n" ) ; METHOD_16 ( VAR_73 + VAR_74 ) ; return - VAR_75 ; } VAR_76 = METHOD_17 ( VAR_77 , VAR_78 , VAR_79 ) ; METHOD_18 ( "Using\'%s\'configuration\\n" , VAR_80 ) ; if ( VAR_81 == VAR_82 ) VAR_83 -> VAR_84 = VAR_85 ; if ( VAR_86 && VAR_87 -> VAR_88 ) { METHOD_19 ( "VerifyingHashIntegrity..." ) ; if ( METHOD_20 ( VAR_89 , VAR_90 ) ) { METHOD_21 ( "BadDataHash\\n" ) ; METHOD_22 ( VAR_91 + VAR_92 ) ; return - VAR_93 ; } METHOD_23 ( "OK\\n" ) ; } METHOD_24 ( VAR_94 ) ; VAR_95 = METHOD_25 ( VAR_96 , VAR_97 , VAR_98 ) ; VAR_99 = METHOD_26 ( VAR_100 , VAR_101 , VAR_102 ) ; } if ( VAR_103 < 0 ) { METHOD_27 ( "Couldnotfindsubimagenodetype\'%s\'\\n" , VAR_104 ) ; METHOD_28 ( VAR_105 + VAR_106 ) ; return - VAR_107 ; } METHOD_29 ( "Trying\'%s\'%ssubimage\\n" , VAR_108 , VAR_109 ) ; VAR_110 = METHOD_30 ( VAR_111 , VAR_112 , VAR_113 -> VAR_114 ) ; if ( VAR_115 ) { METHOD_31 ( VAR_116 + VAR_117 ) ; return VAR_118 ; } METHOD_32 ( VAR_119 + VAR_120 ) ; if ( ! METHOD_33 ( ) && METHOD_34 ( VAR_121 ) ) { if ( ! METHOD_35 ( VAR_122 , VAR_123 ) ) { METHOD_36 ( "UnsupportedArchitecture\\n" ) ; METHOD_37 ( VAR_124 + VAR_125 ) ; return - VAR_126 ; } } TYPE_26 TYPE_27 VAR_127 ( VAR_128 , VAR_129 , & VAR_130 ) ; VAR_131 -> VAR_132 . VAR_133 = VAR_134 ; METHOD_38 ( VAR_135 + VAR_136 ) ; VAR_137 = METHOD_39 ( VAR_138 , VAR_139 , VAR_140 ) || METHOD_40 ( VAR_141 , VAR_142 , VAR_143 ) || ( VAR_144 == VAR_145 && METHOD_41 ( VAR_146 , VAR_147 , VAR_148 ) ) ; VAR_149 = VAR_150 == VAR_151 || VAR_152 == VAR_153 || METHOD_42 ( VAR_154 , VAR_155 , VAR_156 ) || METHOD_43 ( VAR_157 , VAR_158 , VAR_159 ) || METHOD_44 ( VAR_160 , VAR_161 , VAR_162 ) || METHOD_45 ( VAR_163 , VAR_164 , VAR_165 ) || METHOD_46 ( VAR_166 , VAR_167 , VAR_168 ) ; if ( ( ! VAR_169 || ! VAR_170 ) && VAR_171 != VAR_172 ) { METHOD_47 ( VAR_173 , VAR_174 , & VAR_175 ) ; METHOD_48 ( "No%s%s%sImage\\n" , METHOD_49 ( VAR_176 ) , METHOD_50 ( VAR_177 ) , METHOD_51 ( VAR_178 ) ) ; METHOD_52 ( VAR_179 + VAR_180 ) ; return - VAR_181 ; } METHOD_53 ( VAR_182 + VAR_183 ) ; if ( METHOD_54 ( VAR_184 , VAR_185 , ( const TYPE_28 * * ) & VAR_186 , & VAR_187 ) ) { METHOD_55 ( "Couldnotfind%ssubimagedata!\\n" , VAR_188 ) ; METHOD_56 ( VAR_189 + VAR_190 ) ; return - VAR_191 ; } if ( METHOD_57 ( VAR_192 ) && VAR_193 ) { METHOD_58 ( "DecryptingData..." ) ; if ( METHOD_59 ( VAR_194 , VAR_195 , & VAR_196 , & VAR_197 ) ) { METHOD_60 ( "Error\\n" ) ; return - VAR_198 ; } METHOD_61 ( "OK\\n" ) ; } if ( ! METHOD_62 ( ) && METHOD_63 ( VAR_199 ) ) METHOD_64 ( & VAR_200 , & VAR_201 ) ; VAR_202 = ( TYPE_29 ) VAR_203 ; METHOD_65 ( VAR_204 + VAR_205 ) ; VAR_206 = METHOD_66 ( VAR_207 ) ; VAR_208 = VAR_209 ; if ( VAR_210 == VAR_211 ) { } else if ( METHOD_67 ( VAR_212 , VAR_213 , & VAR_214 ) ) { if ( VAR_215 == VAR_216 ) { METHOD_68 ( "Can\'tget%ssubimageloadaddress!\\n" , VAR_217 ) ; METHOD_69 ( VAR_218 + VAR_219 ) ; return - VAR_220 ; } } else if ( VAR_221 != VAR_222 || VAR_223 ) { TYPE_30 VAR_224 , VAR_225 ; VAR_226 = VAR_227 ; VAR_228 = VAR_229 + METHOD_70 ( VAR_230 ) ; VAR_231 = VAR_232 + VAR_233 ; if ( VAR_234 != VAR_235 && VAR_236 < VAR_237 && VAR_238 > VAR_239 ) { METHOD_71 ( "Error:%soverwritten\\n" , VAR_240 ) ; return - VAR_241 ; } METHOD_72 ( "Loading%sfrom0x%08lxto0x%08lx\\n" , VAR_242 , VAR_243 , VAR_244 ) ; } else { VAR_245 = VAR_246 ; } VAR_247 = VAR_248 ; VAR_249 = VAR_250 ; if ( ! METHOD_73 ( VAR_251 , VAR_252 , & VAR_253 ) && VAR_254 != VAR_255 && ! ( VAR_256 == VAR_257 || VAR_258 == VAR_259 || VAR_260 == VAR_261 ) ) { TYPE_31 VAR_262 = VAR_263 * 20 ; if ( VAR_264 == VAR_265 ) { VAR_266 = METHOD_74 ( VAR_267 ) ; VAR_268 = METHOD_75 ( VAR_269 ) ; } else { VAR_270 = METHOD_76 ( VAR_271 , VAR_272 ) ; } if ( METHOD_77 ( VAR_273 , VAR_274 , VAR_275 , VAR_276 , VAR_277 , VAR_278 , VAR_279 , VAR_280 , & VAR_281 ) ) { METHOD_78 ( "Errordecompressing%s\\n" , VAR_282 ) ; return - VAR_283 ; } VAR_284 = VAR_285 - VAR_286 ; } else if ( VAR_287 != VAR_288 ) { VAR_289 = METHOD_79 ( VAR_290 , VAR_291 ) ; METHOD_80 ( VAR_292 , VAR_293 , VAR_294 ) ; } if ( VAR_295 == VAR_296 && VAR_297 != VAR_298 ) METHOD_81 ( "WARNING:\'compression\'nodesforramdisksaredeprecated," "pleasefixyour.itsfile!\\n" ) ; if ( VAR_299 == VAR_300 && METHOD_82 ( VAR_301 ) ) { METHOD_83 ( "SubimagedataisnotaFDT" ) ; return - VAR_302 ; } METHOD_84 ( VAR_303 + VAR_304 ) ; * VAR_305 = VAR_306 ; * VAR_307 = VAR_308 ; if ( VAR_309 ) * VAR_310 = ( TYPE_32 * ) VAR_311 ; if ( VAR_312 ) * VAR_313 = ( TYPE_33 * ) ( VAR_314 ? : VAR_315 ) ; return VAR_316 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 ;  VAR_4 . VAR_5 = VAR_6 ; if ( VAR_7 -> VAR_8 & VAR_9 ) VAR_10 . VAR_11 = 0 ; else VAR_12 . VAR_13 = - 1 ; METHOD_1 ( VAR_14 . VAR_15 , VAR_16 , VAR_17 ) ; METHOD_2 ( VAR_18 -> VAR_19 , & VAR_20 ) ; }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 ) { TYPE_3 VAR_0 = - VAR_1 , VAR_2 , VAR_3 ; METHOD_1 ( VAR_4 , & VAR_5 ) ; for ( VAR_6 = 0 ; VAR_7 < METHOD_2 ( VAR_8 ) ; ++ VAR_9 ) METHOD_3 ( VAR_10 , VAR_11 [ VAR_12 ] ) ; VAR_13 = ( unsigned TYPE_4 * ) METHOD_4 ( VAR_14 ) ; if ( ! VAR_15 ) return VAR_16 ; VAR_17 = ( unsigned TYPE_5 * ) METHOD_5 ( VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; VAR_21 = ( unsigned TYPE_6 * ) METHOD_6 ( VAR_22 ) ; if ( ! VAR_23 ) goto VAR_24 ; VAR_25 = ( unsigned TYPE_7 * ) METHOD_7 ( VAR_26 ) ; if ( ! VAR_27 ) goto VAR_28 ; VAR_29 = ( unsigned TYPE_8 * ) METHOD_8 ( VAR_30 ) ; if ( ! VAR_31 ) goto VAR_32 ; VAR_33 = ( unsigned TYPE_9 * ) METHOD_9 ( VAR_34 ) ; if ( ! VAR_35 ) goto VAR_36 ; if ( VAR_37 ) { VAR_38 = ( unsigned TYPE_10 * ) METHOD_10 ( VAR_39 ) ; if ( ! VAR_40 ) goto VAR_41 ; } VAR_42 = ( unsigned TYPE_11 * ) METHOD_11 ( VAR_43 ) ; if ( ! VAR_44 ) goto VAR_45 ; VAR_46 = ( unsigned TYPE_12 * ) METHOD_12 ( VAR_47 ) ; if ( ! VAR_48 ) goto VAR_49 ; METHOD_13 ( VAR_50 , 0xff , VAR_51 ) ; METHOD_14 ( VAR_52 , 0xff , VAR_53 ) ; METHOD_15 ( VAR_54 , 0xff , VAR_55 ) ; METHOD_16 ( 0x80 , VAR_56 ) ; METHOD_17 ( VAR_57 , 0xff , VAR_58 ) ; METHOD_18 ( VAR_59 , 0xff , VAR_60 ) ; METHOD_19 ( VAR_61 , 0xff , VAR_62 ) ; if ( VAR_63 ) METHOD_20 ( VAR_64 , 0xff , VAR_65 ) ; if ( METHOD_21 ( & VAR_66 ) < 0 ) { VAR_67 = - VAR_68 ; goto VAR_69 ; } if ( METHOD_22 ( VAR_70 ) ) METHOD_23 ( VAR_71 ) ; if ( ! METHOD_24 ( ) ) VAR_72 = 0 ; if ( ! METHOD_25 ( ) ) VAR_73 = 0 ; if ( VAR_74 ) METHOD_26 ( ) ; if ( ! METHOD_27 ( ) || ! METHOD_28 ( ) ) { VAR_75 = 0 ; VAR_76 = 0 ; VAR_77 = 0 ; } if ( ! METHOD_29 ( ) ) VAR_78 = 0 ; if ( ! METHOD_30 ( ) ) VAR_79 = 0 ; if ( ! METHOD_31 ( ) ) VAR_80 = 0 ; if ( ! VAR_81 ) VAR_82 -> VAR_83 = VAR_84 ; if ( ! METHOD_32 ( ) ) VAR_85 -> VAR_86 = VAR_87 ; if ( VAR_88 && ! METHOD_33 ( ) ) METHOD_34 ( ) ; if ( ! METHOD_35 ( ) ) VAR_89 = 0 ; if ( ! METHOD_36 ( ) ) VAR_90 = 0 ; if ( METHOD_37 ( ) ) { VAR_91 = VAR_92 ; VAR_93 = VAR_94 ; VAR_95 = 48 ; } METHOD_38 ( VAR_96 , VAR_97 ) ; METHOD_39 ( VAR_98 , VAR_99 ) ; METHOD_40 ( VAR_100 , VAR_101 ) ; METHOD_41 ( VAR_102 , VAR_103 ) ; METHOD_42 ( VAR_104 , VAR_105 ) ; METHOD_43 ( VAR_106 , VAR_107 ) ; METHOD_44 ( VAR_108 , VAR_109 ) ; METHOD_45 ( VAR_110 , VAR_111 , VAR_112 ) ; METHOD_46 ( VAR_113 , VAR_114 , VAR_115 ) ; METHOD_47 ( 0 , VAR_116 ) ;  if ( VAR_117 ) {  for ( VAR_118 = 0x800 ; VAR_119 <= 0x8ff ; VAR_120 ++ ) METHOD_48 ( VAR_121 ) ; METHOD_49 ( 0x802 ) ; METHOD_50 ( 0x839 ) ; METHOD_51 ( 0x808 ) ; METHOD_52 ( 0x80b ) ; METHOD_53 ( 0x83f ) ;  }  if ( VAR_122 ) { METHOD_54 ( 0ull , ( VAR_123 ) ? VAR_124 : 0ull , ( VAR_125 ) ? VAR_126 : 0ull , 0ull , VAR_127 ) ; METHOD_55 ( ) ; METHOD_56 ( ) ; } else METHOD_57 ( ) ; METHOD_58 ( ) ; if ( ! VAR_128 || ! VAR_129 || ! METHOD_59 ( ) ) VAR_130 = 0 ; if ( ! VAR_131 ) { VAR_132 -> VAR_133 = VAR_134 ; VAR_135 -> VAR_136 = VAR_137 ; VAR_138 -> VAR_139 = VAR_140 ; VAR_141 -> VAR_142 = VAR_143 ; } METHOD_60 ( VAR_144 ) ; return METHOD_61 ( ) ; VAR_145 : METHOD_62 ( ( unsigned TYPE_13 ) VAR_146 ) ; VAR_147 : METHOD_63 ( ( unsigned TYPE_14 ) VAR_148 ) ; VAR_149 : if ( VAR_150 ) METHOD_64 ( ( unsigned TYPE_15 ) VAR_151 ) ; VAR_152 : METHOD_65 ( ( unsigned TYPE_16 ) VAR_153 ) ; VAR_154 : METHOD_66 ( ( unsigned TYPE_17 ) VAR_155 ) ; VAR_156 : METHOD_67 ( ( unsigned TYPE_18 ) VAR_157 ) ; VAR_158 : METHOD_68 ( ( unsigned TYPE_19 ) VAR_159 ) ; VAR_160 : METHOD_69 ( ( unsigned TYPE_20 ) VAR_161 ) ; VAR_162 : METHOD_70 ( ( unsigned TYPE_21 ) VAR_163 ) ; return VAR_164 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * VAR_4 = "" ; const TYPE_5 * VAR_5 = "" ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 ( VAR_8 ) * VAR_9 = VAR_10 ; TYPE_8 VAR_11 [ sizeof ( TYPE_9 ( VAR_12 ) ) ] = { 0 } ; TYPE_10 * VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; if ( VAR_16 -> VAR_17 > VAR_18 -> VAR_19 . VAR_20 ) { return VAR_21 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; if ( VAR_27 -> VAR_28 < 1 || VAR_29 -> VAR_30 > VAR_31 ) { return VAR_32 ; } TYPE_12 ( VAR_33 ) * VAR_34 = METHOD_1 ( VAR_35 -> VAR_36 , sizeof ( TYPE_13 ) ) ; if ( ! VAR_37 ) { return VAR_38 ; } if ( VAR_39 -> VAR_40 && VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) { VAR_45 = & VAR_46 -> VAR_47 [ VAR_48 -> VAR_49 ] ; } if ( VAR_50 && VAR_51 -> VAR_52 && VAR_53 -> VAR_54 < VAR_55 -> VAR_56 ) { VAR_57 = & VAR_58 -> VAR_59 [ VAR_60 -> VAR_61 ] ; } if ( ! VAR_62 ) { METHOD_2 ( "Warning:Cannotallocatememory(CheckElf_(Verdef))\\n" ) ; return VAR_63 ; } VAR_64 = METHOD_3 ( ) ; VAR_65 = ( TYPE_14 * ) VAR_66 + VAR_67 -> VAR_68 ; METHOD_4 ( VAR_69 , "section_name" , VAR_70 , 0 ) ; METHOD_5 ( VAR_71 , "entries" , VAR_72 -> VAR_73 , 0 ) ; METHOD_6 ( VAR_74 , "addr" , VAR_75 -> VAR_76 , 0 ) ; METHOD_7 ( VAR_77 , "offset" , VAR_78 -> VAR_79 , 0 ) ; METHOD_8 ( VAR_80 , "link" , VAR_81 -> VAR_82 , 0 ) ; METHOD_9 ( VAR_83 , "link_section_name" , VAR_84 , 0 ) ;  for ( VAR_85 = 0 , VAR_86 = 0 ; VAR_87 >= 0 && VAR_88 < VAR_89 -> VAR_90 && ( ( TYPE_15 * ) VAR_91 + VAR_92 < VAR_93 ) ; ++ VAR_94 ) {  TYPE_16 * VAR_95 = METHOD_10 ( ) ; TYPE_17 * VAR_96 = ( ( TYPE_18 * ) VAR_97 ) + VAR_98 ; TYPE_19 VAR_99 [ 32 ] = { 0 } ; TYPE_20 ( VAR_100 ) * VAR_101 = ( TYPE_21 ( VAR_102 ) * ) VAR_103 ; TYPE_22 ( TYPE_23 ) VAR_104 = { 0 } ; TYPE_24 VAR_105 = 0 ; TYPE_25 VAR_106 = 0 ; METHOD_11 ( VAR_107 -> VAR_108 , VAR_109 -> VAR_110 + VAR_111 , VAR_112 , sizeof ( TYPE_26 ( VAR_113 ) ) ) ; VAR_114 -> VAR_115 = METHOD_12 ( VAR_116 , VAR_117 ) VAR_118 -> VAR_119 = METHOD_13 ( VAR_120 , VAR_121 ) VAR_122 -> VAR_123 = METHOD_14 ( VAR_124 , VAR_125 ) VAR_126 -> VAR_127 = METHOD_15 ( VAR_128 , VAR_129 ) VAR_130 -> VAR_131 = METHOD_16 ( VAR_132 , VAR_133 ) VAR_134 -> VAR_135 = METHOD_17 ( VAR_136 , VAR_137 ) VAR_138 -> VAR_139 = METHOD_18 ( VAR_140 , VAR_141 ) TYPE_27 VAR_142 = VAR_143 -> VAR_144 ;  if ( VAR_145 < 1 ) {  METHOD_19 ( VAR_146 ) ; goto VAR_147 ; } VAR_148 += VAR_149 ;  if ( VAR_150 > VAR_151 || VAR_152 + sizeof ( TYPE_28 ( TYPE_29 ) ) > VAR_153 ) {  METHOD_20 ( VAR_154 ) ; goto VAR_155 ; } VAR_156 = 0 ; VAR_157 . VAR_158 = METHOD_21 ( VAR_159 , VAR_160 ) VAR_161 . VAR_162 = METHOD_22 ( VAR_163 , VAR_164 ) VAR_165 = VAR_166 + VAR_167 -> VAR_168 ; if ( VAR_169 . VAR_170 > VAR_171 -> VAR_172 ) { METHOD_23 ( VAR_173 ) ; goto VAR_174 ; } METHOD_24 ( VAR_175 , "idx" , VAR_176 , 0 ) ; METHOD_25 ( VAR_177 , "vd_version" , VAR_178 -> VAR_179 , 0 ) ; METHOD_26 ( VAR_180 , "vd_ndx" , VAR_181 -> VAR_182 , 0 ) ; METHOD_27 ( VAR_183 , "vd_cnt" , VAR_184 -> VAR_185 , 0 ) ; METHOD_28 ( VAR_186 , "vda_name" , & VAR_187 -> VAR_188 [ VAR_189 . VAR_190 ] , 0 ) ; METHOD_29 ( VAR_191 , "flags" , METHOD_30 ( VAR_192 -> VAR_193 ) , 0 ) ; for ( VAR_194 = 1 ; VAR_195 < VAR_196 -> VAR_197 ; ++ VAR_198 ) { TYPE_30 VAR_199 ; TYPE_31 * VAR_200 = METHOD_31 ( ) ; VAR_201 += VAR_202 . VAR_203 ; VAR_204 += VAR_205 . VAR_206 ;  if ( VAR_207 > VAR_208 || VAR_209 + sizeof ( TYPE_32 ( TYPE_33 ) ) > VAR_210 ) {  METHOD_32 ( VAR_211 ) ; METHOD_33 ( VAR_212 ) ; goto VAR_213 ; } VAR_214 = 0 ; VAR_215 . VAR_216 = METHOD_34 ( VAR_217 , VAR_218 ) VAR_219 . VAR_220 = METHOD_35 ( VAR_221 , VAR_222 ) if ( VAR_223 . VAR_224 > VAR_225 -> VAR_226 ) { METHOD_36 ( VAR_227 ) ; METHOD_37 ( VAR_228 ) ; goto VAR_229 ; } METHOD_38 ( VAR_230 , "idx" , VAR_231 , 0 ) ; METHOD_39 ( VAR_232 , "parent" , VAR_233 , 0 ) ; METHOD_40 ( VAR_234 , "vda_name" , & VAR_235 -> VAR_236 [ VAR_237 . VAR_238 ] , 0 ) ; METHOD_41 ( VAR_239 , sizeof ( VAR_240 ) , "parent%d" , VAR_241 - 1 ) ; METHOD_42 ( VAR_242 , VAR_243 , VAR_244 ) ; } METHOD_43 ( VAR_245 , sizeof ( VAR_246 ) , "verdef%d" , VAR_247 ) ; METHOD_44 ( VAR_248 , VAR_249 , VAR_250 ) ; if ( ! VAR_251 -> VAR_252 ) { METHOD_45 ( VAR_253 ) ; goto VAR_254 ; } if ( ( TYPE_34 ) VAR_255 -> VAR_256 < 1 ) { METHOD_46 ( "Warning:Invalidvd_nextintheELFversion\\n" ) ; break ; } VAR_257 += VAR_258 -> VAR_259 ; } METHOD_47 ( VAR_260 ) ; return VAR_261 ; VAR_262 : METHOD_48 ( VAR_263 ) ; METHOD_49 ( VAR_264 ) ; return VAR_265 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( "%s" , VAR_0 ) ; if ( VAR_1 > 0 ) {  METHOD_2 ( VAR_2 , VAR_3 ) ;  METHOD_3 ( VAR_4 ) ; VAR_5 = - 1 ; } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 [ ] ) { struct STRUCT_OR_UNION_0 * VAR_2 ; const TYPE_3 * VAR_3 ; const TYPE_4 * VAR_4 ; TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 ) ; if ( VAR_9 == VAR_10 ) METHOD_2 ( 1 , "%s:Groupnotfound" , VAR_11 ) ; TYPE_6 * VAR_12 = VAR_13 ; VAR_14 = METHOD_3 ( METHOD_4 ( ) ) ; if ( VAR_15 ) VAR_16 = VAR_17 -> VAR_18 ; if ( ! METHOD_5 ( VAR_19 -> VAR_20 ) ) { METHOD_6 ( 1 , "User%sisnotamemberofgroup%s\\n" , VAR_21 ? VAR_22 : "(unknown)" , VAR_23 ) ; } if ( VAR_24 == VAR_25 ) METHOD_7 ( "Couldnotfindusernameforuid%d\\n" , METHOD_8 ( ) ) ; setenv ( "USER" , VAR_26 ? : "" , 1 ) ; VAR_27 = METHOD_9 ( VAR_28 [ 0 ] , '/' ) ; if ( VAR_29 ) VAR_30 ++ ; else VAR_31 = VAR_32 [ 0 ] ; VAR_33 = METHOD_10 ( VAR_34 , '-' ) ; if ( VAR_35 == VAR_36 ) METHOD_11 ( 1 , "Callingcommandhasno\'-\'" ) ; VAR_37 ++ ; VAR_38 = METHOD_12 ( VAR_39 ) ; if ( VAR_40 == VAR_41 ) METHOD_13 ( 1 , "%s:Notavalidsubcommand" , VAR_42 ) ; for ( VAR_43 = 1 ; VAR_44 < VAR_45 ; VAR_46 ++ )  if ( METHOD_14 ( VAR_47 [ VAR_48 ] , "--allow-untrusted" ) == 0 )  METHOD_15 ( 1 , "%s:notallowedoption" , "--allow-untrusted" ) ; VAR_49 [ 0 ] = VAR_50 ; METHOD_16 ( 0 ) ; METHOD_17 ( 0 ) ; METHOD_18 ( VAR_51 , ( TYPE_7 * const * ) VAR_52 ) ; METHOD_19 ( VAR_53 ) ; return 1 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) {  METHOD_1 ( VAR_8 ) ;  return VAR_9 ; } switch ( VAR_10 -> VAR_11 ) { case VAR_12 : VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ; if ( ! VAR_17 ) goto VAR_18 ; VAR_19 = METHOD_3 ( VAR_20 -> VAR_21 . VAR_22 . VAR_23 , VAR_24 ) ; if ( ! VAR_25 ) goto VAR_26 ; if ( METHOD_4 ( VAR_27 , & VAR_28 , VAR_29 ) == - 1 ) goto VAR_30 ; METHOD_5 ( VAR_31 ) ; VAR_32 = METHOD_6 ( VAR_33 -> VAR_34 . VAR_35 . VAR_36 , VAR_37 ) ; if ( ! VAR_38 ) goto VAR_39 ; if ( METHOD_7 ( VAR_40 , & VAR_41 , VAR_42 ) == - 1 ) goto VAR_43 ; METHOD_8 ( VAR_44 ) ; break ; case VAR_45 : VAR_46 = METHOD_9 ( VAR_47 , VAR_48 , VAR_49 ) ; if ( ! VAR_50 ) goto VAR_51 ; VAR_52 = METHOD_10 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 , VAR_57 ) ; if ( ! VAR_58 ) goto VAR_59 ; if ( METHOD_11 ( VAR_60 , & VAR_61 , VAR_62 ) == - 1 ) goto VAR_63 ; METHOD_12 ( VAR_64 ) ; break ; case VAR_65 : VAR_66 = METHOD_13 ( VAR_67 , VAR_68 , VAR_69 ) ; if ( ! VAR_70 ) goto VAR_71 ; VAR_72 = METHOD_14 ( VAR_73 -> VAR_74 . VAR_75 . VAR_76 ) ; if ( ! VAR_77 ) goto VAR_78 ; if ( METHOD_15 ( VAR_79 , & VAR_80 , VAR_81 ) == - 1 ) goto VAR_82 ; METHOD_16 ( VAR_83 ) ; break ; case VAR_84 : VAR_85 = METHOD_17 ( VAR_86 , VAR_87 , VAR_88 ) ; if ( ! VAR_89 ) goto VAR_90 ; VAR_91 = METHOD_18 ( VAR_92 -> VAR_93 . VAR_94 . VAR_95 , METHOD_19 ) ; if ( ! VAR_96 ) goto VAR_97 ; if ( METHOD_20 ( VAR_98 , & VAR_99 , VAR_100 ) == - 1 ) goto VAR_101 ; METHOD_21 ( VAR_102 ) ; VAR_103 = METHOD_22 ( VAR_104 -> VAR_105 . VAR_106 . VAR_107 ) ; if ( ! VAR_108 ) goto VAR_109 ; if ( METHOD_23 ( VAR_110 , & VAR_111 , VAR_112 ) == - 1 ) goto VAR_113 ; METHOD_24 ( VAR_114 ) ; break ; case VAR_115 : VAR_116 = METHOD_25 ( VAR_117 , VAR_118 , VAR_119 ) ; if ( ! VAR_120 ) goto VAR_121 ; VAR_122 = METHOD_26 ( VAR_123 -> VAR_124 . VAR_125 . VAR_126 , VAR_127 ) ; if ( ! VAR_128 ) goto VAR_129 ; if ( METHOD_27 ( VAR_130 , & VAR_131 , VAR_132 ) == - 1 ) goto VAR_133 ; METHOD_28 ( VAR_134 ) ; break ; } return VAR_135 ; VAR_136 : METHOD_29 ( VAR_137 ) ; METHOD_30 ( VAR_138 ) ; return VAR_139 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { TYPE_4 VAR_5 ; if ( VAR_6 -> VAR_7 <= 0 && VAR_8 == - 1 ) return ; if ( VAR_9 -> VAR_10 >= VAR_11 && VAR_12 == 1 ) return ; METHOD_1 ( VAR_13 , VAR_14 ) ; METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , - 1 ) ; METHOD_3 ( VAR_18 , VAR_19 ) ; if ( VAR_20 == 1 ) { VAR_21 -> VAR_22 ++ ; if ( VAR_23 -> VAR_24 <= VAR_25 ) VAR_26 -> VAR_27 += VAR_28 ; } else if ( VAR_29 == - 1 ) { VAR_30 -> VAR_31 -- ; if ( VAR_32 -> VAR_33 < VAR_34 ) VAR_35 -> VAR_36 -= VAR_37 ; }  VAR_38 = VAR_39 -> VAR_40 ;  if ( VAR_41 == VAR_42 ) { if ( VAR_43 -> VAR_44 > 0 && VAR_45 -> VAR_46 <= VAR_47 ) VAR_48 -= VAR_49 ;  }  if ( VAR_50 -> VAR_51 > 0 ) { METHOD_4 ( VAR_52 , 0 ) ; METHOD_5 ( VAR_53 , VAR_54 ) ; } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { const TYPE_6 * VAR_5 = ( const TYPE_7 * ) VAR_6 -> VAR_7 ; const TYPE_8 * VAR_8 = ( ( const TYPE_9 * ) VAR_9 ) + VAR_10 ;  ( TYPE_10 ) & VAR_11 ;   if ( VAR_12 >= VAR_13 && ( TYPE_11 ) ( VAR_14 - VAR_15 ) <= METHOD_1 ( VAR_16 ) * VAR_17 -> VAR_18 )  return 0 ; DPRINTF ( ( "%d:offsetbegin%p<end%p||%" SIZE_T_FORMAT "u" ">%" SIZE_T_FORMAT "u[%" SIZE_T_FORMAT "u%" SIZE_T_FORMAT "u]\\n" , VAR_19 , VAR_20 , VAR_21 , ( TYPE_12 ) ( VAR_22 - VAR_23 ) ,  METHOD_2 ( VAR_24 ) * VAR_25 -> VAR_26 , METHOD_3 ( VAR_27 ) , VAR_28 -> VAR_29 ) ) ;  VAR_30 = VAR_31 ; return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 [ 17 ] [ 2 ] ; unsigned VAR_10 [ 2 ] ; const TYPE_7 * VAR_11 ; const TYPE_8 * VAR_12 ; TYPE_9 * VAR_13 ; TYPE_10 * VAR_14 ; TYPE_11 VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 ; TYPE_14 VAR_18 ; TYPE_15 VAR_19 = 0 ; TYPE_16 VAR_20 ; TYPE_17 VAR_21 ; TYPE_18 VAR_22 ; TYPE_19 VAR_23 ; TYPE_20 VAR_24 ; TYPE_21 VAR_25 ; TYPE_22 VAR_26 ; TYPE_23 VAR_27 ; TYPE_24 VAR_28 ; TYPE_25 VAR_29 ; TYPE_26 VAR_30 ; TYPE_27 VAR_31 ; TYPE_28 VAR_32 ; TYPE_29 VAR_33 ; TYPE_30 VAR_34 ; TYPE_31 VAR_35 ; TYPE_32 VAR_36 = VAR_37 [ VAR_38 ] ; VAR_39 = & VAR_40 -> VAR_41 [ VAR_42 ] ; VAR_43 = & VAR_44 -> VAR_45 . VAR_46 [ VAR_47 ] ;  if 0  METHOD_1 ( VAR_48 , VAR_49 ) ; VAR_50 = VAR_51 -> VAR_52 ; VAR_53 = VAR_54 -> VAR_55 ; VAR_56 = VAR_57 -> VAR_58 ; VAR_59 = VAR_60 -> VAR_61 ; VAR_62 = ! VAR_63 ; VAR_64 = * VAR_65 -> VAR_66 ; VAR_67 = VAR_68 -> VAR_69 * VAR_70 ; if ( VAR_71 -> VAR_72 . VAR_73 -> VAR_74 . VAR_75 == VAR_76 ) VAR_77 = ( VAR_78 * 9 ) >> 4 ; VAR_79 = VAR_80 -> VAR_81 ; VAR_82 [ 0 ] = VAR_83 [ 1 ] = 0 ; VAR_84 [ VAR_85 ] [ 0 ] . VAR_86 = 0 ; VAR_87 [ VAR_88 ] [ 0 ] . VAR_89 = 0 ; VAR_90 [ VAR_91 ] [ 0 ] . VAR_92 = 16 ; VAR_93 [ VAR_94 ] [ 0 ] . VAR_95 = VAR_96 ; VAR_97 [ VAR_98 ] [ 0 ] . VAR_99 = 0 ; * ( VAR_100 [ VAR_101 ] + 1 ) = * ( VAR_102 [ VAR_103 ] + 0 ) ; VAR_104 = VAR_105 ; for ( VAR_106 = VAR_107 ; VAR_108 -- > VAR_109 ; ) { TYPE_33 VAR_110 ; TYPE_34 VAR_111 ; TYPE_35 VAR_112 ; VAR_113 = VAR_114 [ VAR_115 ] ; VAR_116 = VAR_117 [ VAR_118 ] ; if ( VAR_119 ) { TYPE_36 VAR_120 = 0 ; VAR_121 = VAR_122 [ VAR_123 ] [ 0 ] . VAR_124 ; VAR_125 = VAR_126 [ VAR_127 ] [ 1 ] . VAR_128 ; VAR_129 = VAR_130 [ VAR_131 ] [ 0 ] . VAR_132 ; VAR_133 = VAR_134 [ VAR_135 ] [ 1 ] . VAR_136 ; VAR_137 = ( VAR_138 + VAR_139 ) -> VAR_140 ; if ( VAR_141 < 16 ) { VAR_142 = VAR_143 [ VAR_144 + 1 ] ; VAR_145 = VAR_146 [ VAR_147 ] ; VAR_148 += VAR_149 -> VAR_150 [ VAR_151 ] [ VAR_152 ] [ VAR_153 ] [ VAR_154 [ VAR_155 ] [ 0 ] . VAR_156 ] ; VAR_157 += VAR_158 -> VAR_159 [ VAR_160 ] [ VAR_161 ] [ VAR_162 ] [ VAR_163 [ VAR_164 ] [ 1 ] . VAR_165 ] ; } VAR_166 = METHOD_2 ( VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ; VAR_171 = METHOD_3 ( VAR_172 , VAR_173 , VAR_174 , VAR_175 ) ; if ( VAR_176 == VAR_177 ) { VAR_178 = METHOD_4 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 ) ; VAR_183 = METHOD_5 ( VAR_184 , VAR_185 , VAR_186 , VAR_187 ) ; } VAR_188 = VAR_189 < VAR_190 ; VAR_191 = * ( VAR_192 + VAR_193 ) ; VAR_194 = VAR_195 [ VAR_196 ] - VAR_197 [ VAR_198 ] ; VAR_199 = VAR_200 * VAR_201 ; VAR_202 [ VAR_203 ] [ 0 ] . VAR_204 = VAR_205 + ( VAR_206 ? VAR_207 : VAR_208 ) ; VAR_209 [ VAR_210 ] [ 0 ] . VAR_211 = VAR_212 + ( VAR_213 ? VAR_214 : VAR_215 ) ; VAR_216 [ VAR_217 ] [ 0 ] . VAR_218 = VAR_219 ; VAR_220 [ VAR_221 ] [ 0 ] . VAR_222 = VAR_223 ; VAR_224 [ VAR_225 ] [ 0 ] . VAR_226 = VAR_227 ; VAR_228 [ 0 ] |= VAR_229 << VAR_230 ; VAR_231 = VAR_232 [ VAR_233 ] [ 0 ] . VAR_234 ; VAR_235 = VAR_236 [ VAR_237 ] [ 1 ] . VAR_238 ; if ( ( METHOD_6 ( VAR_239 ) * VAR_240 [ VAR_241 ] > METHOD_7 ( VAR_242 [ VAR_243 ] ) ) && ( METHOD_8 ( VAR_244 ) * VAR_245 [ VAR_246 ] < METHOD_9 ( VAR_247 [ VAR_248 ] ) + VAR_249 [ VAR_250 ] ) ) VAR_251 = 1 ; else VAR_252 = 0 ; if ( VAR_253 ) { VAR_254 = - ( VAR_255 < 0 ) ; VAR_256 -= 2 * VAR_257 + 1 ; } if ( ! VAR_258 ) { VAR_259 = VAR_260 [ VAR_261 ] [ 0 ] . VAR_262 == VAR_263 ? VAR_264 : VAR_265 ; VAR_266 = VAR_267 [ VAR_268 ] [ 1 ] . VAR_269 == VAR_270 ? VAR_271 : VAR_272 ; } else { VAR_273 = VAR_274 = ( VAR_275 + VAR_276 ) -> VAR_277 ; } if ( VAR_278 < 16 ) { VAR_279 = VAR_280 [ VAR_281 + 1 ] ; if ( VAR_282 != VAR_283 ) { VAR_284 = VAR_285 [ VAR_286 ] ; VAR_287 += VAR_288 -> VAR_289 [ VAR_290 ] [ VAR_291 ] [ VAR_292 ] [ VAR_293 [ VAR_294 ] [ 0 ] . VAR_295 ] ; } if ( VAR_296 != VAR_297 ) { VAR_298 = VAR_299 [ VAR_300 ] ; VAR_301 += VAR_302 -> VAR_303 [ VAR_304 ] [ VAR_305 ] [ VAR_306 ] [ VAR_307 [ VAR_308 ] [ 1 ] . VAR_309 ] ; } } VAR_310 = METHOD_10 ( VAR_311 , VAR_312 , VAR_313 , VAR_314 ) ; VAR_315 = METHOD_11 ( VAR_316 , VAR_317 , VAR_318 , VAR_319 ) ; if ( VAR_320 == VAR_321 ) { VAR_322 = METHOD_12 ( VAR_323 , VAR_324 , VAR_325 , VAR_326 ) ; VAR_327 = METHOD_13 ( VAR_328 , VAR_329 , VAR_330 , VAR_331 ) ; } VAR_332 = VAR_333 < VAR_334 ; VAR_335 = * ( VAR_336 + VAR_337 ) ; if ( VAR_338 ) { VAR_339 -= ( VAR_340 [ VAR_341 ] + VAR_342 ) ^ VAR_343 ; VAR_344 = VAR_345 * VAR_346 ; } VAR_347 [ VAR_348 ] [ 1 ] . VAR_349 = VAR_350 + ( VAR_351 ? VAR_352 : VAR_353 ) ; VAR_354 [ VAR_355 ] [ 1 ] . VAR_356 = VAR_357 + ( VAR_358 ? VAR_359 : VAR_360 ) ; VAR_361 [ VAR_362 ] [ 1 ] . VAR_363 = VAR_364 ; VAR_365 [ VAR_366 ] [ 1 ] . VAR_367 = VAR_368 ? VAR_369 : VAR_370 ; VAR_371 [ VAR_372 ] [ 1 ] . VAR_373 = VAR_374 ; VAR_375 [ 1 ] |= VAR_376 << VAR_377 ; VAR_378 = VAR_379 ; } else { VAR_380 = VAR_381 [ VAR_382 + 1 ] ; VAR_383 = VAR_384 [ VAR_385 ] [ 0 ] . VAR_386 ; VAR_387 = VAR_388 [ VAR_389 ] [ 1 ] . VAR_390 ; if ( VAR_391 != VAR_392 ) { VAR_393 [ VAR_394 ] [ 0 ] . VAR_395 += VAR_396 -> VAR_397 [ VAR_398 ] [ VAR_399 ] [ 0 ] [ VAR_400 ] ; VAR_401 [ VAR_402 ] [ 0 ] . VAR_403 = VAR_404 ; } if ( VAR_405 != VAR_406 ) { VAR_407 [ VAR_408 ] [ 1 ] . VAR_409 += VAR_410 -> VAR_411 [ VAR_412 ] [ VAR_413 ] [ 0 ] [ VAR_414 ] ; VAR_415 [ VAR_416 ] [ 1 ] . VAR_417 = VAR_418 ; } } } VAR_419 = VAR_420 [ VAR_421 + 1 ] ; METHOD_14 ( VAR_422 , * VAR_423 , * VAR_424 ) ; VAR_425 = VAR_426 [ VAR_427 ] [ 0 ] . VAR_428 ; VAR_429 = VAR_430 [ VAR_431 ] [ 1 ] . VAR_432 ; VAR_433 = VAR_434 [ VAR_435 ] [ 0 ] . VAR_436 ; VAR_437 = VAR_438 [ VAR_439 ] [ 1 ] . VAR_440 ; VAR_441 = VAR_442 [ VAR_443 ] [ 0 ] . VAR_444 ; VAR_445 = VAR_446 [ VAR_447 ] [ 1 ] . VAR_448 ; VAR_449 += VAR_450 -> VAR_451 [ VAR_452 ] [ VAR_453 ] [ VAR_454 ] [ VAR_455 ] ; VAR_456 += VAR_457 -> VAR_458 [ VAR_459 ] [ VAR_460 ] [ VAR_461 ] [ VAR_462 ] ; VAR_463 = METHOD_15 ( VAR_464 , VAR_465 , VAR_466 , VAR_467 ) ; VAR_468 = METHOD_16 ( VAR_469 , VAR_470 , VAR_471 , VAR_472 ) ; if ( VAR_473 == VAR_474 ) { VAR_475 = METHOD_17 ( VAR_476 , VAR_477 , VAR_478 , VAR_479 ) ; VAR_480 = METHOD_18 ( VAR_481 , VAR_482 , VAR_483 , VAR_484 ) ; } VAR_485 = VAR_486 < VAR_487 ; VAR_488 = VAR_489 - 1 ; for ( VAR_490 = VAR_491 ; VAR_492 < VAR_493 ; VAR_494 = VAR_495 ) { VAR_496 = VAR_497 [ VAR_498 ] [ VAR_499 ] . VAR_500 ; if ( VAR_501 ) VAR_502 = VAR_503 ; VAR_504 = VAR_505 [ VAR_506 ] ; VAR_507 [ VAR_508 ] = VAR_509 ; VAR_510 [ VAR_511 ] = VAR_512 * VAR_513 [ VAR_514 ] ; VAR_515 = VAR_516 [ VAR_517 ] [ VAR_518 ] . VAR_519 ; VAR_520 = ( VAR_521 [ VAR_522 ] >> VAR_523 ) & 1 ; } VAR_524 ++ ; * VAR_525 = * VAR_526 = ( VAR_527 != ! VAR_528 ) ; * VAR_529 -> VAR_530 = ( TYPE_37 ) VAR_531 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; TYPE_1 VAR_3 ; VAR_4 = METHOD_1 ( STRUCT_OR_UNION_4 , VAR_5 -> VAR_6 ) ; if ( VAR_7 < 0 ) return VAR_8 ; STRUCT_OR_UNION_5 -> VAR_9 = VAR_10 -> VAR_11 ;  if ( ! METHOD_2 ( VAR_12 , & STRUCT_OR_UNION_6 -> VAR_13 ) )  VAR_14 = METHOD_3 ( STRUCT_OR_UNION_7 ) ; METHOD_4 ( STRUCT_OR_UNION_8 , VAR_15 -> VAR_16 . VAR_17 [ 0 ] ) ; VAR_18 -> VAR_19 . VAR_20 [ 0 ] = VAR_21 ; if ( VAR_22 ) METHOD_5 ( & VAR_23 -> VAR_24 , VAR_25 ) ; return VAR_26 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , TYPE_5 TYPE_6 * VAR_3 ) { struct STRUCT_OR_UNION_2 VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = STRUCT_OR_UNION_4 -> VAR_6 ; TYPE_7 VAR_7 , VAR_8 , VAR_9 = 0 ; METHOD_1 ( "sk%p,opt%d" , VAR_10 , VAR_11 ) ; if ( METHOD_2 ( VAR_12 , VAR_13 ) ) return - VAR_14 ; METHOD_3 ( VAR_15 ) ; if ( METHOD_4 ( VAR_16 ) -> VAR_17 != VAR_18 ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } switch ( VAR_22 ) { case VAR_23 : if ( METHOD_5 ( VAR_24 ) -> VAR_25 & VAR_26 ) VAR_27 = 1 ; else VAR_28 = 0 ; if ( METHOD_6 ( VAR_29 , VAR_30 ) ) VAR_31 = - VAR_32 ; break ; case VAR_33 : if ( METHOD_7 ( VAR_34 ) -> VAR_35 & VAR_36 ) VAR_37 = 1 ; else VAR_38 = 0 ; if ( METHOD_8 ( VAR_39 , VAR_40 ) ) VAR_41 = - VAR_42 ; break ; case VAR_43 : {  struct STRUCT_OR_UNION_5 * VAR_44 = & METHOD_9 ( VAR_45 ) -> VAR_46 ;  VAR_47 . VAR_48 = VAR_49 -> VAR_50 ; VAR_51 . VAR_52 = VAR_53 -> VAR_54 ; VAR_55 . VAR_56 [ 0 ] = * ( ( TYPE_8 * ) VAR_57 -> VAR_58 + 0 ) ; VAR_59 . VAR_60 [ 1 ] = * ( ( TYPE_9 * ) VAR_61 -> VAR_62 + 1 ) ; } VAR_63 = min_t ( unsigned TYPE_10 , VAR_64 , sizeof ( VAR_65 ) ) ; if ( METHOD_10 ( VAR_66 , & VAR_67 , VAR_68 ) ) VAR_69 = - VAR_70 ; break ; default : VAR_71 = - VAR_72 ; break ; } VAR_73 : METHOD_11 ( VAR_74 ) ; return VAR_75 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { static TYPE_2 VAR_2 ;  TYPE_3 VAR_3 , VAR_4 ;  TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; const TYPE_6 * VAR_7 = VAR_8 ; METHOD_1 ( VAR_9 , & VAR_10 ) ; if ( ( VAR_11 . VAR_12 = METHOD_2 ( * VAR_13 , VAR_14 , & VAR_15 ) ) ) goto VAR_16 ; if ( ( VAR_17 . VAR_18 = METHOD_3 ( ( TYPE_7 * ) VAR_19 ) ) ) goto VAR_20 ; VAR_21 . VAR_22 = VAR_23 -> VAR_24 ; if ( METHOD_4 ( VAR_25 , & VAR_26 , & VAR_27 ) < 0 ) { VAR_28 . VAR_29 = VAR_30 ; goto VAR_31 ; } VAR_32 . VAR_33 = METHOD_5 ( ( TYPE_8 * ) VAR_34 , & VAR_35 . VAR_36 ) ; if ( VAR_37 . VAR_38 != 0 ) VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 , VAR_42 . VAR_43 ) ; METHOD_7 ( "kadm5_get_privs" , VAR_44 . VAR_45 , VAR_46 , & VAR_47 , & VAR_48 , VAR_49 ) ; if ( VAR_50 != VAR_51 ) METHOD_8 ( VAR_52 -> VAR_53 , VAR_54 ) ;  METHOD_9 ( & VAR_55 , & VAR_56 ) ;  METHOD_10 ( & VAR_57 , & VAR_58 ) ;  VAR_59 :  METHOD_11 ( VAR_60 ) ; return & VAR_61 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 , * VAR_4 ; VAR_5 -> VAR_6 = VAR_7 -> VAR_8 ; VAR_9 -> VAR_10 . VAR_11 = VAR_12 -> VAR_13 . VAR_14 ; VAR_15 -> VAR_16 . VAR_17 = VAR_18 -> VAR_19 . VAR_20 ;  VAR_21 -> VAR_22 . VAR_23 = VAR_24 -> VAR_25 . VAR_26 ;  METHOD_1 ( & VAR_27 -> VAR_28 . VAR_29 , VAR_30 , VAR_31 -> VAR_32 . VAR_33 . VAR_34 , VAR_35 ) ; METHOD_2 ( VAR_36 , VAR_37 , & VAR_38 -> VAR_39 . VAR_40 ) { VAR_41 = list_entry ( VAR_42 , struct STRUCT_OR_UNION_4 , VAR_43 ) ; if ( ! METHOD_3 ( VAR_44 , & VAR_45 -> VAR_46 ) ) { METHOD_4 ( VAR_47 , VAR_48 ) ; continue ; } if ( VAR_49 -> VAR_50 >= VAR_51 ) METHOD_5 ( VAR_52 ) ; } if ( VAR_53 -> VAR_54 >= VAR_55 ) { VAR_56 -> VAR_57 = VAR_58 -> VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; VAR_64 -> VAR_65 = VAR_66 -> VAR_67 ; METHOD_6 ( VAR_68 -> VAR_69 ) ; METHOD_7 ( & VAR_70 -> VAR_71 ) ; VAR_72 -> VAR_73 = 0 ; } else { METHOD_8 ( VAR_74 , & VAR_75 -> VAR_76 . VAR_77 , VAR_78 ) { if ( ! METHOD_9 ( VAR_79 , & VAR_80 -> VAR_81 ) ) METHOD_10 ( VAR_82 , & VAR_83 -> VAR_84 , VAR_85 , VAR_86 -> VAR_87 ) ; } VAR_88 -> VAR_89 = VAR_90 -> VAR_91 - 1 ; VAR_92 -> VAR_93 = VAR_94 -> VAR_95 ; if ( ! VAR_96 -> VAR_97 ) { VAR_98 -> VAR_99 = VAR_100 -> VAR_101 ; VAR_102 -> VAR_103 = VAR_104 ; } if ( ! VAR_105 -> VAR_106 ) { METHOD_11 ( VAR_107 , VAR_108 ) ; } } METHOD_12 ( VAR_109 -> VAR_110 . VAR_111 ) ; VAR_112 -> VAR_113 . VAR_114 = VAR_115 -> VAR_116 . VAR_117 ; VAR_118 -> VAR_119 . VAR_120 = VAR_121 ; METHOD_13 ( VAR_122 -> VAR_123 . VAR_124 ) ; VAR_125 -> VAR_126 . VAR_127 = VAR_128 -> VAR_129 . VAR_130 ; VAR_131 -> VAR_132 . VAR_133 = VAR_134 ; METHOD_14 ( VAR_135 -> VAR_136 . VAR_137 ) ; VAR_138 -> VAR_139 . VAR_140 = VAR_141 -> VAR_142 . VAR_143 ; VAR_144 -> VAR_145 . VAR_146 = VAR_147 ; METHOD_15 ( VAR_148 -> VAR_149 ) ; METHOD_16 ( VAR_150 , VAR_151 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_4 TYPE_4 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_5 TYPE_5 * VAR_10 ; struct STRUCT_OR_UNION_6 * VAR_11 ; TYPE_6 VAR_12 = 0 ; TYPE_7 VAR_13 = 0 ; TYPE_8 VAR_14 = 0 ; TYPE_9 VAR_15 ; TYPE_10 TYPE_11 * VAR_16 [ 32 ] ; TYPE_12 * VAR_17 [ 32 ] ; TYPE_13 VAR_18 = 0 ; TYPE_14 VAR_19 = 0 ; TYPE_15 VAR_20 , VAR_21 = 0 ; TYPE_16 VAR_22 ; if ( VAR_23 -> VAR_24 ) { dprintk ( ( KERN_DEBUG "aacraid:sendrawsrb-EBUSY\\n" ) ) ; return - VAR_25 ; } if ( ! METHOD_1 ( VAR_26 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Nopermissiontosendrawsrb\\n" ) ) ; return - VAR_27 ; } if ( ! ( VAR_28 = METHOD_2 ( VAR_29 ) ) ) { return - VAR_30 ; } METHOD_3 ( VAR_31 ) ; VAR_32 -> VAR_33 -> VAR_34 . VAR_35 &= ~ METHOD_4 ( VAR_36 ) ; VAR_37 = ( struct STRUCT_OR_UNION_7 * ) METHOD_5 ( VAR_38 ) ; METHOD_6 ( VAR_39 , 0 , sizeof ( VAR_40 ) ) ; if ( METHOD_7 ( & VAR_41 , & VAR_42 -> VAR_43 , sizeof ( TYPE_17 ) ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopydatasizefromuser\\n" ) ) ; VAR_44 = - VAR_45 ; goto VAR_46 ; }  if ( VAR_47 > ( VAR_48 -> VAR_49 - sizeof ( struct STRUCT_OR_UNION_8 ) ) ) {  VAR_50 = - VAR_51 ; goto VAR_52 ; } VAR_53 = METHOD_8 ( VAR_54 , VAR_55 ) ; if ( ! VAR_56 ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotmakeacopyofthesrb\\n" ) ) ; VAR_57 = - VAR_58 ; goto VAR_59 ; } if ( METHOD_9 ( VAR_60 , VAR_61 , VAR_62 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysrbfromuser\\n" ) ) ; VAR_63 = - VAR_64 ; goto VAR_65 ; } VAR_66 = VAR_67 + VAR_68 ; VAR_69 = VAR_70 -> VAR_71 ; VAR_72 -> VAR_73 = METHOD_10 ( VAR_74 ) ; VAR_75 -> VAR_76 = METHOD_11 ( VAR_77 -> VAR_78 ) ; VAR_79 -> VAR_80 = METHOD_12 ( VAR_81 -> VAR_82 ) ; VAR_83 -> VAR_84 = METHOD_13 ( VAR_85 -> VAR_86 ) ; VAR_87 -> VAR_88 = METHOD_14 ( VAR_89 -> VAR_90 ) ; VAR_91 -> VAR_92 = METHOD_15 ( VAR_93 ) ; VAR_94 -> VAR_95 = 0 ; VAR_96 -> VAR_97 = METHOD_16 ( VAR_98 -> VAR_99 ) ; METHOD_17 ( VAR_100 -> VAR_101 , VAR_102 -> VAR_103 , sizeof ( VAR_104 -> VAR_105 ) ) ; switch ( VAR_106 & ( VAR_107 | VAR_108 ) ) { case VAR_109 : VAR_110 = VAR_111 ; break ; case ( VAR_112 | VAR_113 ) : VAR_114 = VAR_115 ; break ; case VAR_116 : VAR_117 = VAR_118 ; break ; default : VAR_119 = VAR_120 ; } if ( VAR_121 -> VAR_122 . VAR_123 > METHOD_18 ( VAR_124 ) ) { dprintk ( ( KERN_DEBUG "aacraid:toomanysgentries%d\\n" , METHOD_19 ( VAR_125 -> VAR_126 . VAR_127 ) ) ) ; VAR_128 = - VAR_129 ; goto VAR_130 ; } VAR_131 = sizeof ( struct STRUCT_OR_UNION_9 ) - sizeof ( struct STRUCT_OR_UNION_10 ) + ( ( VAR_132 -> VAR_133 . VAR_134 & 0xff ) * sizeof ( struct STRUCT_OR_UNION_11 ) ) ; VAR_135 = VAR_136 + ( VAR_137 -> VAR_138 . VAR_139 & 0xff ) * ( sizeof ( struct STRUCT_OR_UNION_12 ) - sizeof ( struct STRUCT_OR_UNION_13 ) ) ; if ( ( VAR_140 != VAR_141 ) && ( VAR_142 != VAR_143 ) ) { dprintk ( ( KERN_DEBUG "aacraid:BadSizespecifiedin" "RawSRBcommandcalculatedfibsize=%lu;%lu" "user_srbcmd->sg.count=%daac_srb=%lusgentry=%lu;%lu" "issuedfibsize=%d\\n" , VAR_144 , VAR_145 , VAR_146 -> VAR_147 . VAR_148 , sizeof ( struct STRUCT_OR_UNION_14 ) , sizeof ( struct STRUCT_OR_UNION_15 ) , sizeof ( struct STRUCT_OR_UNION_16 ) , VAR_149 ) ) ; VAR_150 = - VAR_151 ; goto VAR_152 ; } if ( ( VAR_153 == VAR_154 ) && VAR_155 -> VAR_156 . VAR_157 ) { dprintk ( ( KERN_DEBUG "aacraid:SGwithnodirectionspecifiedinRawSRBcommand\\n" ) ) ; VAR_158 = - VAR_159 ; goto VAR_160 ; } VAR_161 = 0 ; if ( VAR_162 -> VAR_163 . VAR_164 & VAR_165 ) { struct STRUCT_OR_UNION_17 * VAR_166 = ( struct STRUCT_OR_UNION_18 * ) & VAR_167 -> VAR_168 ; struct STRUCT_OR_UNION_19 * VAR_169 = ( struct STRUCT_OR_UNION_20 * ) & VAR_170 -> VAR_171 ; if ( VAR_172 == VAR_173 ) { VAR_174 = VAR_175 ; for ( VAR_176 = 0 ; VAR_177 < VAR_178 -> VAR_179 ; VAR_180 ++ ) { TYPE_18 VAR_181 ; TYPE_19 * VAR_182 ; if ( VAR_183 -> VAR_184 [ VAR_185 ] . VAR_186 > ( ( VAR_187 -> VAR_188 . VAR_189 & VAR_190 ) ? ( VAR_191 -> VAR_192 -> VAR_193 << 9 ) : 65536 ) ) { VAR_194 = - VAR_195 ; goto VAR_196 ; } VAR_197 = METHOD_20 ( VAR_198 -> VAR_199 [ VAR_200 ] . VAR_201 , VAR_202 | VAR_203 ) ; if ( ! VAR_204 ) { dprintk ( ( KERN_DEBUG "aacraid:CouldnotallocateSGbuffer-size=%dbuffernumber%dof%d\\n" , VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 , VAR_209 , VAR_210 -> VAR_211 ) ) ; VAR_212 = - VAR_213 ; goto VAR_214 ; } VAR_215 = ( TYPE_20 ) VAR_216 -> VAR_217 [ VAR_218 ] . VAR_219 [ 0 ] ; VAR_220 += ( ( TYPE_21 ) VAR_221 -> VAR_222 [ VAR_223 ] . VAR_224 [ 1 ] ) << 32 ; VAR_225 [ VAR_226 ] = ( TYPE_22 TYPE_23 * ) ( TYPE_24 ) VAR_227 ; VAR_228 [ VAR_229 ] = VAR_230 ; VAR_231 = VAR_232 ; if ( VAR_233 & VAR_234 ) { if ( METHOD_21 ( VAR_235 , VAR_236 [ VAR_237 ] , VAR_238 -> VAR_239 [ VAR_240 ] . VAR_241 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysgdatafromuser\\n" ) ) ; VAR_242 = - VAR_243 ; goto VAR_244 ; } } VAR_245 = METHOD_22 ( VAR_246 -> VAR_247 , VAR_248 , VAR_249 -> VAR_250 [ VAR_251 ] . VAR_252 , VAR_253 ) ; VAR_254 -> VAR_255 [ VAR_256 ] . VAR_257 [ 0 ] = METHOD_23 ( VAR_258 & 0xffffffff ) ; VAR_259 -> VAR_260 [ VAR_261 ] . VAR_262 [ 1 ] = METHOD_24 ( VAR_263 >> 32 ) ; VAR_264 += VAR_265 -> VAR_266 [ VAR_267 ] . VAR_268 ; VAR_269 -> VAR_270 [ VAR_271 ] . VAR_272 = METHOD_25 ( VAR_273 -> VAR_274 [ VAR_275 ] . VAR_276 ) ; } } else { struct STRUCT_OR_UNION_21 * VAR_277 ; VAR_278 = METHOD_26 ( VAR_279 - sizeof ( struct STRUCT_OR_UNION_22 ) + sizeof ( struct STRUCT_OR_UNION_23 ) , VAR_280 ) ; if ( ! VAR_281 ) { dprintk ( ( KERN_DEBUG "aacraid:AllocationerrorinRawSRBcommand\\n" ) ) ; VAR_282 = - VAR_283 ; goto VAR_284 ; } METHOD_27 ( VAR_285 , VAR_286 , VAR_287 - sizeof ( struct STRUCT_OR_UNION_24 ) + sizeof ( struct STRUCT_OR_UNION_25 ) ) ; VAR_288 = VAR_289 ; for ( VAR_290 = 0 ; VAR_291 < VAR_292 -> VAR_293 ; VAR_294 ++ ) { TYPE_25 VAR_295 ; TYPE_26 * VAR_296 ; if ( VAR_297 -> VAR_298 [ VAR_299 ] . VAR_300 > ( ( VAR_301 -> VAR_302 . VAR_303 & VAR_304 ) ? ( VAR_305 -> VAR_306 -> VAR_307 << 9 ) : 65536 ) ) { METHOD_28 ( VAR_308 ) ; VAR_309 = - VAR_310 ; goto VAR_311 ; } VAR_312 = METHOD_29 ( VAR_313 -> VAR_314 [ VAR_315 ] . VAR_316 , VAR_317 | VAR_318 ) ; if ( ! VAR_319 ) { dprintk ( ( KERN_DEBUG "aacraid:CouldnotallocateSGbuffer-size=%dbuffernumber%dof%d\\n" , VAR_320 -> VAR_321 [ VAR_322 ] . VAR_323 , VAR_324 , VAR_325 -> VAR_326 ) ) ; METHOD_30 ( VAR_327 ) ; VAR_328 = - VAR_329 ; goto VAR_330 ; } VAR_331 [ VAR_332 ] = ( TYPE_27 TYPE_28 * ) ( TYPE_29 ) VAR_333 -> VAR_334 [ VAR_335 ] . VAR_336 ; VAR_337 [ VAR_338 ] = VAR_339 ; VAR_340 = VAR_341 ; if ( VAR_342 & VAR_343 ) { if ( METHOD_31 ( VAR_344 , VAR_345 [ VAR_346 ] , VAR_347 -> VAR_348 [ VAR_349 ] . VAR_350 ) ) { METHOD_32 ( VAR_351 ) ; dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysgdatafromuser\\n" ) ) ; VAR_352 = - VAR_353 ; goto VAR_354 ; } } VAR_355 = METHOD_33 ( VAR_356 -> VAR_357 , VAR_358 , VAR_359 -> VAR_360 [ VAR_361 ] . VAR_362 , VAR_363 ) ; VAR_364 -> VAR_365 [ VAR_366 ] . VAR_367 [ 0 ] = METHOD_34 ( VAR_368 & 0xffffffff ) ; VAR_369 -> VAR_370 [ VAR_371 ] . VAR_372 [ 1 ] = METHOD_35 ( VAR_373 >> 32 ) ; VAR_374 += VAR_375 -> VAR_376 [ VAR_377 ] . VAR_378 ; VAR_379 -> VAR_380 [ VAR_381 ] . VAR_382 = METHOD_36 ( VAR_383 -> VAR_384 [ VAR_385 ] . VAR_386 ) ; } METHOD_37 ( VAR_387 ) ; } VAR_388 -> VAR_389 = METHOD_38 ( VAR_390 ) ; VAR_391 -> VAR_392 = METHOD_39 ( VAR_393 + 1 ) ; VAR_394 = METHOD_40 ( VAR_395 , VAR_396 , VAR_397 , VAR_398 , 1 , 1 , VAR_399 , VAR_400 ) ; } else { struct STRUCT_OR_UNION_26 * VAR_401 = & VAR_402 -> VAR_403 ; struct STRUCT_OR_UNION_27 * VAR_404 = & VAR_405 -> VAR_406 ; if ( VAR_407 == VAR_408 ) { struct STRUCT_OR_UNION_28 * VAR_409 = ( struct STRUCT_OR_UNION_29 * ) VAR_410 ; for ( VAR_411 = 0 ; VAR_412 < VAR_413 -> VAR_414 ; VAR_415 ++ ) { TYPE_30 VAR_416 ; TYPE_31 * VAR_417 ; if ( VAR_418 -> VAR_419 [ VAR_420 ] . VAR_421 > ( ( VAR_422 -> VAR_423 . VAR_424 & VAR_425 ) ? ( VAR_426 -> VAR_427 -> VAR_428 << 9 ) : 65536 ) ) { VAR_429 = - VAR_430 ; goto VAR_431 ; } VAR_432 = METHOD_41 ( VAR_433 -> VAR_434 [ VAR_435 ] . VAR_436 , VAR_437 | VAR_438 ) ; if ( ! VAR_439 ) { dprintk ( ( KERN_DEBUG "aacraid:CouldnotallocateSGbuffer-size=%dbuffernumber%dof%d\\n" , VAR_440 -> VAR_441 [ VAR_442 ] . VAR_443 , VAR_444 , VAR_445 -> VAR_446 ) ) ; VAR_447 = - VAR_448 ; goto VAR_449 ; } VAR_450 = ( TYPE_32 ) VAR_451 -> VAR_452 [ VAR_453 ] . VAR_454 [ 0 ] ; VAR_455 += ( ( TYPE_33 ) VAR_456 -> VAR_457 [ VAR_458 ] . VAR_459 [ 1 ] ) << 32 ; VAR_460 [ VAR_461 ] = ( TYPE_34 TYPE_35 * ) VAR_462 ; VAR_463 [ VAR_464 ] = VAR_465 ; VAR_466 = VAR_467 ; if ( VAR_468 & VAR_469 ) { if ( METHOD_42 ( VAR_470 , VAR_471 [ VAR_472 ] , VAR_473 -> VAR_474 [ VAR_475 ] . VAR_476 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysgdatafromuser\\n" ) ) ; VAR_477 = - VAR_478 ; goto VAR_479 ; } } VAR_480 = METHOD_43 ( VAR_481 -> VAR_482 , VAR_483 , VAR_484 -> VAR_485 [ VAR_486 ] . VAR_487 , VAR_488 ) ; VAR_489 -> VAR_490 [ VAR_491 ] . VAR_492 = METHOD_44 ( VAR_493 & 0xffffffff ) ; VAR_494 += VAR_495 -> VAR_496 [ VAR_497 ] . VAR_498 ; VAR_499 -> VAR_500 [ VAR_501 ] . VAR_502 = METHOD_45 ( VAR_503 -> VAR_504 [ VAR_505 ] . VAR_506 ) ; } } else { for ( VAR_507 = 0 ; VAR_508 < VAR_509 -> VAR_510 ; VAR_511 ++ ) { TYPE_36 VAR_512 ; TYPE_37 * VAR_513 ; if ( VAR_514 -> VAR_515 [ VAR_516 ] . VAR_517 > ( ( VAR_518 -> VAR_519 . VAR_520 & VAR_521 ) ? ( VAR_522 -> VAR_523 -> VAR_524 << 9 ) : 65536 ) ) { VAR_525 = - VAR_526 ; goto VAR_527 ; } VAR_528 = METHOD_46 ( VAR_529 -> VAR_530 [ VAR_531 ] . VAR_532 , VAR_533 ) ; if ( ! VAR_534 ) { dprintk ( ( KERN_DEBUG "aacraid:CouldnotallocateSGbuffer-size=%dbuffernumber%dof%d\\n" , VAR_535 -> VAR_536 [ VAR_537 ] . VAR_538 , VAR_539 , VAR_540 -> VAR_541 ) ) ; VAR_542 = - VAR_543 ; goto VAR_544 ; } VAR_545 [ VAR_546 ] = ( TYPE_38 TYPE_39 * ) ( TYPE_40 ) VAR_547 -> VAR_548 [ VAR_549 ] . VAR_550 ; VAR_551 [ VAR_552 ] = VAR_553 ; VAR_554 = VAR_555 ; if ( VAR_556 & VAR_557 ) { if ( METHOD_47 ( VAR_558 , VAR_559 [ VAR_560 ] , VAR_561 -> VAR_562 [ VAR_563 ] . VAR_564 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysgdatafromuser\\n" ) ) ; VAR_565 = - VAR_566 ; goto VAR_567 ; } } VAR_568 = METHOD_48 ( VAR_569 -> VAR_570 , VAR_571 , VAR_572 -> VAR_573 [ VAR_574 ] . VAR_575 , VAR_576 ) ; VAR_577 -> VAR_578 [ VAR_579 ] . VAR_580 = METHOD_49 ( VAR_581 ) ; VAR_582 += VAR_583 -> VAR_584 [ VAR_585 ] . VAR_586 ; VAR_587 -> VAR_588 [ VAR_589 ] . VAR_590 = METHOD_50 ( VAR_591 -> VAR_592 [ VAR_593 ] . VAR_594 ) ; } } VAR_595 -> VAR_596 = METHOD_51 ( VAR_597 ) ; VAR_598 -> VAR_599 = METHOD_52 ( VAR_600 + 1 ) ; VAR_601 = METHOD_53 ( VAR_602 , VAR_603 , VAR_604 , VAR_605 , 1 , 1 , VAR_606 , VAR_607 ) ; } if ( VAR_608 == - VAR_609 ) { VAR_610 = - VAR_611 ; goto VAR_612 ; } if ( VAR_613 != 0 ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotsendrawsrbfibtohba\\n" ) ) ; VAR_614 = - VAR_615 ; goto VAR_616 ; } if ( VAR_617 & VAR_618 ) { for ( VAR_619 = 0 ; VAR_620 <= VAR_621 ; VAR_622 ++ ) { VAR_623 = METHOD_54 ( ( VAR_624 -> VAR_625 . VAR_626 & VAR_627 ) ? ( ( struct STRUCT_OR_UNION_30 * ) & VAR_628 -> VAR_629 ) -> VAR_630 [ VAR_631 ] . VAR_632 : VAR_633 -> VAR_634 . VAR_635 [ VAR_636 ] . VAR_637 ) ; if ( METHOD_55 ( VAR_638 [ VAR_639 ] , VAR_640 [ VAR_641 ] , VAR_642 ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopysgdatatouser\\n" ) ) ; VAR_643 = - VAR_644 ; goto VAR_645 ; } } } VAR_646 = ( struct STRUCT_OR_UNION_31 * ) METHOD_56 ( VAR_647 ) ; if ( METHOD_57 ( VAR_648 , VAR_649 , sizeof ( struct STRUCT_OR_UNION_32 ) ) ) { dprintk ( ( KERN_DEBUG "aacraid:Couldnotcopyreplytouser\\n" ) ) ; VAR_650 = - VAR_651 ; goto VAR_652 ; } VAR_653 : METHOD_58 ( VAR_654 ) ; for ( VAR_655 = 0 ; VAR_656 <= VAR_657 ; VAR_658 ++ ) { METHOD_59 ( VAR_659 [ VAR_660 ] ) ; } if ( VAR_661 != - VAR_662 ) { METHOD_60 ( VAR_663 ) ; METHOD_61 ( VAR_664 ) ; } return VAR_665 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { static const TYPE_5 VAR_4 [ ] = "PredictorEncodeTile" ; TYPE_6 * VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_7 * VAR_7 ; TYPE_8 VAR_8 = VAR_9 , VAR_10 ; unsigned TYPE_9 * VAR_11 ; TYPE_10 VAR_12 ; METHOD_2 ( VAR_13 != VAR_14 ) ; METHOD_3 ( VAR_15 -> VAR_16 != VAR_17 ) ; METHOD_4 ( VAR_18 -> VAR_19 != VAR_20 ) ; VAR_21 = ( TYPE_11 * ) METHOD_5 ( VAR_22 ) ; if ( VAR_23 == VAR_24 ) { METHOD_6 ( VAR_25 -> VAR_26 , VAR_27 , "Outofmemoryallocating" TIFF_SSIZE_FORMAT "bytetempbuffer." , VAR_28 ) ; return 0 ; } METHOD_7 ( VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 = VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; METHOD_8 ( VAR_37 > 0 ) ;  METHOD_9 ( ( VAR_38 % VAR_39 ) == 0 ) ;  while ( VAR_40 > 0 ) { ( * VAR_41 -> VAR_42 ) ( VAR_43 , VAR_44 , VAR_45 ) ; VAR_46 -= VAR_47 ; VAR_48 += VAR_49 ; } VAR_50 = ( * VAR_51 -> VAR_52 ) ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; METHOD_10 ( VAR_57 ) ; return VAR_58 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 = ( struct STRUCT_OR_UNION_1 * ) VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ;  struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( VAR_6 -> VAR_7 . VAR_8 ) ;   METHOD_2 ( VAR_9 -> VAR_10 . VAR_11 ) ;   if ( METHOD_3 ( VAR_12 -> VAR_13 . VAR_14 ) ) {  METHOD_4 ( "%s:sockisbusy\\n" , VAR_15 ) ; if ( ! METHOD_5 ( & VAR_16 -> VAR_17 , VAR_18 + ( VAR_19 / 20 ) ) ) METHOD_6 ( VAR_20 ) ; goto VAR_21 ; } if ( VAR_22 -> VAR_23 . VAR_24 ) goto VAR_25 ; METHOD_7 ( STRUCT_OR_UNION_5 , VAR_26 , METHOD_8 ( VAR_27 ) , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; VAR_35 :  METHOD_9 ( VAR_36 -> VAR_37 . VAR_38 ) ;  METHOD_10 ( VAR_39 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = & VAR_6 -> VAR_7 -> VAR_8 ; VAR_9 -> VAR_10 . VAR_11 = 1 ; VAR_12 -> VAR_13 . VAR_14 . VAR_15 = 0 ; METHOD_1 ( VAR_16 , VAR_17 ) ; METHOD_2 ( VAR_18 , VAR_19 ) ; METHOD_3 ( VAR_20 , VAR_21 ) ; METHOD_4 ( VAR_22 , VAR_23 ) ; METHOD_5 ( VAR_24 , VAR_25 ) ; METHOD_6 ( VAR_26 , VAR_27 ) ; METHOD_7 ( VAR_28 , VAR_29 ) ; METHOD_8 ( VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 ) ; METHOD_10 ( VAR_33 , VAR_34 ) ;  METHOD_11 ( VAR_35 , VAR_36 ) ;  METHOD_12 ( VAR_37 , VAR_38 ) ; METHOD_13 ( VAR_39 , VAR_40 ) ; METHOD_14 ( VAR_41 , VAR_42 ) ; METHOD_15 ( VAR_43 , VAR_44 ) ; METHOD_16 ( VAR_45 , VAR_46 ) ; METHOD_17 ( VAR_47 , VAR_48 ) ; METHOD_18 ( VAR_49 , VAR_50 ) ; METHOD_19 ( VAR_51 , VAR_52 ) ; METHOD_20 ( VAR_53 , VAR_54 ) ; METHOD_21 ( VAR_55 , VAR_56 ) ; METHOD_22 ( VAR_57 , VAR_58 ) ; METHOD_23 ( VAR_59 , VAR_60 ) ; METHOD_24 ( VAR_61 , VAR_62 ) ; METHOD_25 ( VAR_63 , VAR_64 ) ; METHOD_26 ( VAR_65 , VAR_66 ) ; METHOD_27 ( VAR_67 , VAR_68 ) ; METHOD_28 ( VAR_69 , VAR_70 ) ; METHOD_29 ( VAR_71 , VAR_72 ) ; METHOD_30 ( VAR_73 , VAR_74 ) ; METHOD_31 ( VAR_75 , VAR_76 ) ; METHOD_32 ( VAR_77 , VAR_78 ) ; METHOD_33 ( VAR_79 , VAR_80 ) ; METHOD_34 ( VAR_81 , VAR_82 ) ; METHOD_35 ( VAR_83 , VAR_84 ) ; METHOD_36 ( VAR_85 , VAR_86 ) ; VAR_87 -> VAR_88 = VAR_89 ; VAR_90 -> VAR_91 = METHOD_37 ( VAR_92 -> VAR_93 ) ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_38 ( & VAR_97 -> VAR_98 ) ; METHOD_39 ( & VAR_99 -> VAR_100 ) ; METHOD_40 ( & VAR_101 -> VAR_102 ) ; METHOD_41 ( & VAR_103 -> VAR_104 ) ; METHOD_42 ( & VAR_105 -> VAR_106 ) ; VAR_107 -> VAR_108 . VAR_109 = 0xf000 ; VAR_110 -> VAR_111 . VAR_112 = 0xffff0000 ; VAR_113 -> VAR_114 . VAR_115 = VAR_116 | VAR_117 | VAR_118 | VAR_119 ; VAR_120 -> VAR_121 . VAR_122 = 0xffff ; VAR_123 -> VAR_124 . VAR_125 = 0xffff ; VAR_126 -> VAR_127 . VAR_128 = 0xffff ; METHOD_43 ( & VAR_129 -> VAR_130 , VAR_131 ) ; METHOD_44 ( & VAR_132 -> VAR_133 , VAR_134 ) ; METHOD_45 ( & VAR_135 -> VAR_136 , 0 ) ; VAR_137 -> VAR_138 = 0xffff0ff0 ; METHOD_46 ( & VAR_139 -> VAR_140 , 2 ) ; VAR_141 -> VAR_142 = 0x0000fff0 ; VAR_143 -> VAR_144 . VAR_145 . VAR_146 [ VAR_147 ] = VAR_148 -> VAR_149 ; METHOD_47 ( & VAR_150 -> VAR_151 , VAR_152 | VAR_153 | VAR_154 ) ; METHOD_48 ( & VAR_155 -> VAR_156 ) ; VAR_157 -> VAR_158 = VAR_159 ; if ( VAR_160 ) { VAR_161 -> VAR_162 = 1 ; METHOD_49 ( VAR_163 , VAR_164 ) ; METHOD_50 ( VAR_165 , VAR_166 ) ; METHOD_51 ( VAR_167 , VAR_168 ) ; METHOD_52 ( VAR_169 , VAR_170 ) ; VAR_171 -> VAR_172 = VAR_173 -> VAR_174 . VAR_175 . VAR_176 ; VAR_177 -> VAR_178 = 0 ; VAR_179 -> VAR_180 = 0 ; } VAR_181 -> VAR_182 = 0 ; VAR_183 -> VAR_184 . VAR_185 = 0 ; VAR_186 -> VAR_187 . VAR_188 . VAR_189 = 0 ; if ( METHOD_53 ( VAR_190 ) ) { VAR_191 -> VAR_192 = 3000 ; METHOD_54 ( VAR_193 , VAR_194 ) ; } METHOD_55 ( VAR_195 -> VAR_196 ) ; METHOD_56 ( VAR_197 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_2 * VAR_1 ,  const TYPE_3 * VAR_2 , const TYPE_4 VAR_3 [ 2 ] )  { TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 , & VAR_12 , & VAR_13 ) == - 1 ) return - 1 ; if ( METHOD_2 ( VAR_14 ) ) { const TYPE_8 * VAR_15 ; if ( METHOD_3 ( VAR_16 , "CompositeDocumentFileV2Document" ) == - 1 ) return - 1 ; if ( METHOD_4 ( VAR_17 , ",%sEndian" , VAR_18 . VAR_19 == 0xfffe ? "Little" : "Big" ) == - 1 ) return - 2 ; switch ( VAR_20 . VAR_21 ) { case 2 : if ( METHOD_5 ( VAR_22 , ",Os:Windows,Version%d.%d" , VAR_23 . VAR_24 & 0xff , ( TYPE_9 ) VAR_25 . VAR_26 >> 8 ) == - 1 ) return - 2 ; break ; case 1 : if ( METHOD_6 ( VAR_27 , ",Os:MacOS,Version%d.%d" , ( TYPE_10 ) VAR_28 . VAR_29 >> 8 , VAR_30 . VAR_31 & 0xff ) == - 1 ) return - 2 ; break ; default : if ( METHOD_7 ( VAR_32 , ",Os%d,Version:%d.%d" , VAR_33 . VAR_34 , VAR_35 . VAR_36 & 0xff , ( TYPE_11 ) VAR_37 . VAR_38 >> 8 ) == - 1 ) return - 2 ; break ; }  VAR_39 = METHOD_8 ( VAR_40 , VAR_41 ) ;  if ( VAR_42 ) if ( METHOD_9 ( VAR_43 , ",%s" , VAR_44 ) == - 1 )  return - 2 ;  }  VAR_45 = METHOD_10 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ;  METHOD_11 ( VAR_50 ) ; return VAR_51 == - 1 ? - 2 : VAR_52 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ;  TYPE_5 VAR_5 , VAR_6 , VAR_7 ;  TYPE_6 VAR_8 ; TYPE_7 * VAR_9 = VAR_10 -> VAR_11 ; TYPE_8 * VAR_12 = & VAR_13 -> VAR_14 ; TYPE_9 VAR_15 , VAR_16 , VAR_17 ; TYPE_10 VAR_18 , VAR_19 ; TYPE_11 VAR_20 ; TYPE_12 VAR_21 = 0 ; TYPE_13 VAR_22 = 0 ; TYPE_14 VAR_23 = 0 ; TYPE_15 VAR_24 = 0 ; TYPE_16 VAR_25 = 0 ; TYPE_17 VAR_26 = 0 ; TYPE_18 VAR_27 = 0 ; TYPE_19 VAR_28 = 0 ; TYPE_20 VAR_29 = 0 ; TYPE_21 VAR_30 ; TYPE_22 VAR_31 ; TYPE_23 VAR_32 ; TYPE_24 VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 ; VAR_38 ; VAR_39 = METHOD_1 ( VAR_40 , 8 ) ; METHOD_2 ( "SPS:profile_idc" , VAR_41 ) ; VAR_42 = METHOD_3 ( VAR_43 ) ; VAR_44 = METHOD_4 ( VAR_45 ) ; METHOD_5 ( VAR_46 ) ; METHOD_6 ( VAR_47 , 5 ) ; if ( ( VAR_48 != VAR_49 ) && ( VAR_50 != VAR_51 ) && ( VAR_52 != VAR_53 ) ) { if ( ( VAR_54 != VAR_55 ) || ( ( VAR_56 != 1 ) && ( VAR_57 != 1 ) ) ) { return ( VAR_58 ) ; } } VAR_59 = METHOD_7 ( VAR_60 , 8 ) ; METHOD_8 ( "SPS:u4_level_idc" , VAR_61 ) ; VAR_62 = METHOD_9 ( VAR_63 , VAR_64 ) ; if ( VAR_65 & VAR_66 ) return VAR_67 ; VAR_68 = VAR_69 ; METHOD_10 ( "SPS:seq_parameter_set_id" , VAR_70 ) ; VAR_71 = VAR_72 -> VAR_73 ; if ( VAR_74 -> VAR_75 & 1 ) { * VAR_76 = * VAR_77 -> VAR_78 ; } if ( ( VAR_79 -> VAR_80 & 1 ) && ( VAR_81 -> VAR_82 != VAR_83 ) ) { VAR_84 -> VAR_85 = 1 ; return VAR_86 ; } if ( ( VAR_87 -> VAR_88 & 1 ) && ( VAR_89 -> VAR_90 != VAR_91 ) ) { VAR_92 -> VAR_93 = 1 ; return VAR_94 ; } VAR_95 -> VAR_96 = VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = 1 ; VAR_106 -> VAR_107 = 0 ; VAR_108 -> VAR_109 = 0 ; VAR_110 -> VAR_111 = 0 ; VAR_112 -> VAR_113 = 0 ; if ( VAR_114 == VAR_115 ) { VAR_116 -> VAR_117 = METHOD_11 ( VAR_118 , VAR_119 ) ; if ( VAR_120 -> VAR_121 != 1 ) { return VAR_122 ; } VAR_123 -> VAR_124 = METHOD_12 ( VAR_125 , VAR_126 ) ; if ( VAR_127 -> VAR_128 != 0 ) { return VAR_129 ; } VAR_130 -> VAR_131 = METHOD_13 ( VAR_132 , VAR_133 ) ; if ( VAR_134 -> VAR_135 != 0 ) { return VAR_136 ; } VAR_137 -> VAR_138 = ( TYPE_25 ) METHOD_14 ( VAR_139 ) ; if ( VAR_140 -> VAR_141 != 0 ) { return VAR_142 ; } VAR_143 -> VAR_144 = ( TYPE_26 ) METHOD_15 ( VAR_145 ) ; if ( VAR_146 -> VAR_147 ) { for ( VAR_148 = 0 ; VAR_149 < 8 ; VAR_150 ++ ) { VAR_151 -> VAR_152 [ VAR_153 ] = METHOD_16 ( VAR_154 ) ; VAR_155 -> VAR_156 [ VAR_157 ] = 0 ; if ( VAR_158 -> VAR_159 [ VAR_160 ] ) { if ( VAR_161 < 6 ) { METHOD_17 ( VAR_162 -> VAR_163 [ VAR_164 ] , 16 , & VAR_165 -> VAR_166 [ VAR_167 ] , VAR_168 ) ; } else { METHOD_18 ( VAR_169 -> VAR_170 [ VAR_171 - 6 ] , 64 , & VAR_172 -> VAR_173 [ VAR_174 ] , VAR_175 ) ; } } } } } VAR_176 = 4 + METHOD_19 ( VAR_177 , VAR_178 ) ; if ( VAR_179 > VAR_180 ) { return VAR_181 ; } VAR_182 -> VAR_183 = VAR_184 ; METHOD_20 ( "SPS:log2_max_frame_num_minus4" , ( VAR_185 -> VAR_186 - 4 ) ) ; VAR_187 = ( 1 << ( VAR_188 -> VAR_189 ) ) ; VAR_190 -> VAR_191 = VAR_192 - 1 ; VAR_193 = METHOD_21 ( VAR_194 , VAR_195 ) ; if ( VAR_196 > VAR_197 ) { return VAR_198 ; } VAR_199 -> VAR_200 = VAR_201 ; METHOD_22 ( "SPS:pic_order_cnt_type" , VAR_202 -> VAR_203 ) ; VAR_204 -> VAR_205 = 1 ; if ( VAR_206 -> VAR_207 == 0 ) { VAR_208 = 4 + METHOD_23 ( VAR_209 , VAR_210 ) ; if ( VAR_211 > VAR_212 ) { return VAR_213 ; } VAR_214 -> VAR_215 = VAR_216 ; VAR_217 -> VAR_218 = ( 1 << VAR_219 ) ; METHOD_24 ( "SPS:log2_max_pic_order_cnt_lsb_minus4" , ( VAR_220 - 4 ) ) ; } else if ( VAR_221 -> VAR_222 == 1 ) { VAR_223 -> VAR_224 = METHOD_25 ( VAR_225 ) ; METHOD_26 ( "SPS:delta_pic_order_always_zero_flag" , VAR_226 -> VAR_227 ) ; VAR_228 -> VAR_229 = METHOD_27 ( VAR_230 , VAR_231 ) ; METHOD_28 ( "SPS:offset_for_non_ref_pic" , VAR_232 -> VAR_233 ) ; VAR_234 -> VAR_235 = METHOD_29 ( VAR_236 , VAR_237 ) ; METHOD_30 ( "SPS:offset_for_top_to_bottom_field" , VAR_238 -> VAR_239 ) ; VAR_240 = METHOD_31 ( VAR_241 , VAR_242 ) ; if ( VAR_243 > 255 ) return VAR_244 ; VAR_245 -> VAR_246 = VAR_247 ; METHOD_32 ( "SPS:num_ref_frames_in_pic_order_cnt_cycle" , VAR_248 -> VAR_249 ) ; for ( VAR_250 = 0 ; VAR_251 < VAR_252 -> VAR_253 ; VAR_254 ++ ) { VAR_255 -> VAR_256 [ VAR_257 ] = METHOD_33 ( VAR_258 , VAR_259 ) ; METHOD_34 ( "SPS:offset_for_ref_frame" , VAR_260 -> VAR_261 [ VAR_262 ] ) ; } } VAR_263 = METHOD_35 ( VAR_264 , VAR_265 ) ; if ( ( VAR_266 > VAR_267 ) ) { return VAR_268 ; } if ( ( VAR_269 -> VAR_270 & 1 ) && ( VAR_271 -> VAR_272 != VAR_273 ) ) { VAR_274 -> VAR_275 = 1 ; return VAR_276 ; } VAR_277 -> VAR_278 = VAR_279 ; METHOD_36 ( "SPS:num_ref_frames" , VAR_280 -> VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_37 ( VAR_284 ) ; METHOD_38 ( "SPS:gaps_in_frame_num_value_allowed_flag" , VAR_285 -> VAR_286 ) ; VAR_287 -> VAR_288 = 1 + METHOD_39 ( VAR_289 , VAR_290 ) ; METHOD_40 ( "SPS:pic_width_in_mbs_minus1" , VAR_291 -> VAR_292 - 1 ) ; VAR_293 = ( VAR_294 -> VAR_295 << 4 ) ; VAR_296 = METHOD_41 ( VAR_297 , VAR_298 ) ; VAR_299 -> VAR_300 = 1 + VAR_301 ; VAR_302 = ( VAR_303 -> VAR_304 << 4 ) ; VAR_305 -> VAR_306 = ( VAR_307 -> VAR_308 * VAR_309 -> VAR_310 ) - 1 ; VAR_311 -> VAR_312 = VAR_313 -> VAR_314 + 1 ; VAR_315 -> VAR_316 = METHOD_42 ( VAR_317 , VAR_318 -> VAR_319 ) ; VAR_320 = METHOD_43 ( VAR_321 ) ; if ( ( VAR_322 -> VAR_323 & 1 ) && ( VAR_324 -> VAR_325 != VAR_326 ) ) { VAR_327 -> VAR_328 = 1 ; return VAR_329 ; } VAR_330 -> VAR_331 = VAR_332 ; METHOD_44 ( "SPS:frame_mbs_only_flag" , VAR_333 ) ; if ( ! VAR_334 )  {  VAR_335 <<= 1 ;  VAR_336 -> VAR_337 = METHOD_45 ( VAR_338 ) ;  METHOD_46 ( "SPS:mb_adaptive_frame_field_flag" , VAR_339 -> VAR_340 ) ; } else VAR_341 -> VAR_342 = 0 ; VAR_343 -> VAR_344 = METHOD_47 ( VAR_345 ) ; METHOD_48 ( "SPS:direct_8x8_inference_flag" , VAR_346 -> VAR_347 ) ; VAR_348 = METHOD_49 ( VAR_349 ) ; METHOD_50 ( "SPS:frame_cropping_flag" , VAR_350 ) ; if ( VAR_351 ) { VAR_352 = METHOD_51 ( VAR_353 , VAR_354 ) ; METHOD_52 ( "SPS:frame_cropping_rect_left_offset" , VAR_355 ) ; VAR_356 = METHOD_53 ( VAR_357 , VAR_358 ) ; METHOD_54 ( "SPS:frame_cropping_rect_right_offset" , VAR_359 ) ; VAR_360 = METHOD_55 ( VAR_361 , VAR_362 ) ; METHOD_56 ( "SPS:frame_cropping_rect_top_offset" , VAR_363 ) ; VAR_364 = METHOD_57 ( VAR_365 , VAR_366 ) ; METHOD_58 ( "SPS:frame_cropping_rect_bottom_offset" , VAR_367 ) ; } VAR_368 -> VAR_369 = METHOD_59 ( VAR_370 ) ; METHOD_60 ( "SPS:vui_parameters_present_flag" , VAR_371 -> VAR_372 ) ; VAR_373 = VAR_374 + ( TYPE_27 ) ( VAR_375 << 1 ) ; if ( 1 == VAR_376 -> VAR_377 ) { if ( VAR_378 -> VAR_379 > VAR_380 ) VAR_381 = VAR_382 -> VAR_383 ; } VAR_384 = VAR_385 + ( TYPE_28 ) ( VAR_386 << 2 ) ; VAR_387 = VAR_388 + ( TYPE_29 ) ( VAR_389 << 2 ) ; VAR_390 = METHOD_61 ( VAR_391 , VAR_392 ) ; VAR_393 = ( VAR_394 >> 1 ) + ( TYPE_30 ) ( VAR_395 << 2 ) ; VAR_396 = METHOD_62 ( VAR_397 , ( VAR_398 >> 1 ) ) ; { TYPE_31 VAR_399 = 0 ; TYPE_32 VAR_400 = 0 ; TYPE_33 VAR_401 = 0 ; TYPE_34 VAR_402 = 0 ; TYPE_35 VAR_403 ; TYPE_36 VAR_404 ; if ( VAR_405 ) { VAR_406 = VAR_407 << 1 ; VAR_408 = VAR_409 << 1 ; VAR_410 = ( 1 == VAR_411 -> VAR_412 ) ; VAR_413 = ( 2 - VAR_414 ) ; VAR_415 = ( VAR_416 << VAR_417 ) ; VAR_418 = ( VAR_419 << VAR_420 ) ; } VAR_421 = ( VAR_422 * VAR_423 ) + ( VAR_424 ) ; VAR_425 = ( VAR_426 * ( VAR_427 >> 1 ) ) + ( VAR_428 >> 1 ) * VAR_429 ; VAR_430 = VAR_431 - ( VAR_432 + VAR_433 ) ; VAR_434 = VAR_435 - ( VAR_436 + VAR_437 ) ; if ( ( VAR_438 < VAR_439 ) || ( VAR_440 < VAR_441 ) ) { return VAR_442 ; } if ( ( VAR_443 -> VAR_444 & 1 ) && ( VAR_445 -> VAR_446 != VAR_447 ) ) { VAR_448 -> VAR_449 = 1 ; return VAR_450 ; } if ( ( VAR_451 -> VAR_452 & 1 ) && ( VAR_453 -> VAR_454 != VAR_455 ) ) { VAR_456 -> VAR_457 = 1 ; return VAR_458 ; } if ( ( VAR_459 > VAR_460 ) || ( VAR_461 > VAR_462 ) || ( VAR_463 < VAR_464 ) || ( VAR_465 < VAR_466 ) || ( VAR_467 * ( TYPE_37 ) VAR_468 > VAR_469 ) ) { return VAR_470 ; } if ( ( VAR_471 << VAR_472 -> VAR_473 ) > VAR_474 ) { return VAR_475 ; } } if ( ( VAR_476 -> VAR_477 & 1 ) && ( 1 == VAR_478 -> VAR_479 ) && ( 1 == VAR_480 -> VAR_481 . VAR_482 ) ) { VAR_483 = VAR_484 -> VAR_485 . VAR_486 ; } else { VAR_487 = - 1 ; } if ( 1 == VAR_488 -> VAR_489 ) { VAR_490 = METHOD_63 ( & VAR_491 -> VAR_492 , VAR_493 ) ; if ( VAR_494 != VAR_495 ) return VAR_496 ; } if ( ( VAR_497 -> VAR_498 & 1 ) && ( - 1 != ( TYPE_38 ) VAR_499 ) && ( 1 == VAR_500 -> VAR_501 ) && ( 1 == VAR_502 -> VAR_503 . VAR_504 ) && ( VAR_505 -> VAR_506 . VAR_507 != VAR_508 ) ) { VAR_509 -> VAR_510 = 1 ; return VAR_511 ; } if ( VAR_512 -> VAR_513 > VAR_514 -> VAR_515 ) { return VAR_516 ; } VAR_517 -> VAR_518 = VAR_519 ; VAR_520 -> VAR_521 = VAR_522 ; VAR_523 -> VAR_524 = VAR_525 ; VAR_526 -> VAR_527 = VAR_528 ; VAR_529 -> VAR_530 = VAR_531 ; VAR_532 -> VAR_533 = VAR_534 ; VAR_535 -> VAR_536 = VAR_537 ; VAR_538 -> VAR_539 = VAR_540 ; VAR_541 -> VAR_542 . VAR_543 = ( TYPE_39 ) ( VAR_544 << ( 1 - VAR_545 ) ) ; VAR_546 -> VAR_547 . VAR_548 = ( TYPE_40 ) ( VAR_549 << ( 1 - VAR_550 ) ) ; VAR_551 -> VAR_552 = VAR_553 -> VAR_554 ; VAR_555 -> VAR_556 = VAR_557 -> VAR_558 ; VAR_559 -> VAR_560 = VAR_561 ; VAR_562 -> VAR_563 = VAR_564 ; VAR_565 -> VAR_566 = VAR_567 ; VAR_568 -> VAR_569 [ VAR_570 ] = * VAR_571 ; VAR_572 -> VAR_573 = & VAR_574 -> VAR_575 [ VAR_576 ] ; return VAR_577 ; }
static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_1 TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , & VAR_9 -> VAR_10 ) ;  VAR_11 |= METHOD_2 ( VAR_12 , & VAR_13 -> VAR_14 ) ;  VAR_15 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_2 ) ) ; VAR_16 = METHOD_4 ( METHOD_5 ( VAR_17 ) , & VAR_18 -> VAR_19 ) ; VAR_20 |= METHOD_6 ( VAR_21 , & VAR_22 -> VAR_23 ) ; if ( VAR_24 ) return - VAR_25 ; VAR_26 = METHOD_7 ( VAR_27 , VAR_28 , ( unsigned TYPE_7 ) VAR_29 ) ; return VAR_30 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 * const VAR_3 = VAR_4 -> VAR_5 ;  TYPE_5 * const VAR_6 = va_arg ( VAR_7 , TYPE_6 * ) ;   if ( VAR_8 == VAR_9 )  return VAR_10 ;  VAR_11 -> VAR_12 . VAR_13 = VAR_14 -> VAR_15 ;   VAR_16 -> VAR_17 . VAR_18 = VAR_19 -> VAR_20 ;   VAR_21 -> VAR_22 = VAR_23 -> VAR_24 ;   VAR_25 -> VAR_26 = VAR_27 -> VAR_28 ;   VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ;  if ( METHOD_1 ( VAR_33 -> VAR_34 , VAR_35 -> VAR_36 , VAR_37 -> VAR_38 ) != 0 ) return VAR_39 ; VAR_40 -> VAR_41 . VAR_42 = VAR_43 -> VAR_44 ; VAR_45 -> VAR_46 . VAR_47 = VAR_48 -> VAR_49 ; METHOD_2 ( & VAR_50 -> VAR_51 , & VAR_52 -> VAR_53 , & VAR_54 -> VAR_55 ) ; METHOD_3 ( VAR_56 -> VAR_57 , & VAR_58 -> VAR_59 ) ; return VAR_60 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 , VAR_3 ;   TYPE_4 VAR_4 , VAR_5 ;  TYPE_5 VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_0 * VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( VAR_14 , VAR_15 ) ; METHOD_4 ( VAR_16 , VAR_17 ) ; if ( VAR_18 != ( TYPE_7 ) - 1 ) METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; else METHOD_6 ( VAR_22 , VAR_23 ) ; METHOD_7 ( VAR_24 , VAR_25 , & VAR_26 ) ; METHOD_8 ( VAR_27 , VAR_28 , & VAR_29 ) ; if ( VAR_30 == VAR_31 ) { METHOD_9 ( VAR_32 , VAR_33 , VAR_34 ) ; } else if ( VAR_35 == VAR_36 ) { TYPE_8 VAR_37 , VAR_38 ; METHOD_10 ( VAR_39 , VAR_40 , & VAR_41 , & VAR_42 ) ; if ( VAR_43 != 1 || VAR_44 != 1 ) { METHOD_11 ( VAR_45 , "tiffcp:%s:Can\'tcopy/convertsubsampledimage.\\n" , METHOD_12 ( VAR_46 ) ) ; return VAR_47 ; } } if ( VAR_48 == VAR_49 ) { if ( VAR_50 == VAR_51 && VAR_52 == VAR_53 ) METHOD_13 ( VAR_54 , VAR_55 , VAR_56 ) ; else METHOD_14 ( VAR_57 , VAR_58 , VAR_59 ) ; } else if ( VAR_60 == VAR_61 || VAR_62 == VAR_63 ) METHOD_15 ( VAR_64 , VAR_65 , VAR_66 == 1 ? VAR_67 : VAR_68 ) ; else if ( VAR_69 == VAR_70 && VAR_71 == 3 ) { METHOD_16 ( VAR_72 , VAR_73 , VAR_74 ) ; } else METHOD_17 ( VAR_75 , 1 , VAR_76 ) ; if ( VAR_77 != 0 ) METHOD_18 ( VAR_78 , VAR_79 , VAR_80 ) ; else METHOD_19 ( VAR_81 , 1 , VAR_82 ) ; METHOD_20 ( VAR_83 , VAR_84 , & VAR_85 ) ; switch ( VAR_86 ) { case VAR_87 : case VAR_88 : METHOD_21 ( METHOD_22 ( VAR_89 ) , "usingbottom-leftorientation" ) ; VAR_90 = VAR_91 ; case VAR_92 : case VAR_93 : break ; case VAR_94 : case VAR_95 : default : METHOD_23 ( METHOD_24 ( VAR_96 ) , "usingtop-leftorientation" ) ; VAR_97 = VAR_98 ; case VAR_99 : case VAR_100 : break ; } METHOD_25 ( VAR_101 , VAR_102 , VAR_103 ) ; if ( VAR_104 == - 1 ) VAR_105 = METHOD_26 ( VAR_106 ) ; if ( VAR_107 ) { if ( VAR_108 == ( TYPE_9 ) - 1 ) METHOD_27 ( VAR_109 , VAR_110 , & VAR_111 ) ; if ( VAR_112 == ( TYPE_10 ) - 1 ) METHOD_28 ( VAR_113 , VAR_114 , & VAR_115 ) ; METHOD_29 ( VAR_116 , & VAR_117 , & VAR_118 ) ; METHOD_30 ( VAR_119 , VAR_120 , VAR_121 ) ; METHOD_31 ( VAR_122 , VAR_123 , VAR_124 ) ; } else { if ( VAR_125 == ( TYPE_11 ) 0 ) { if ( ! METHOD_32 ( VAR_126 , VAR_127 , & VAR_128 ) ) { VAR_129 = METHOD_33 ( VAR_130 , VAR_131 ) ; } if ( VAR_132 > VAR_133 && VAR_134 != ( TYPE_12 ) - 1 ) VAR_135 = VAR_136 ; } else if ( VAR_137 == ( TYPE_13 ) - 1 ) VAR_138 = VAR_139 ; METHOD_34 ( VAR_140 , VAR_141 , VAR_142 ) ; } if ( VAR_143 != ( TYPE_14 ) - 1 ) METHOD_35 ( VAR_144 , VAR_145 , VAR_146 ) ; else METHOD_36 ( VAR_147 , VAR_148 ) ; if ( VAR_149 <= 4 ) METHOD_37 ( VAR_150 , 4 , VAR_151 ) ; METHOD_38 ( VAR_152 , 4 , VAR_153 ) ; switch ( VAR_154 ) { case VAR_155 : METHOD_39 ( VAR_156 , VAR_157 , VAR_158 ) ; METHOD_40 ( VAR_159 , VAR_160 , VAR_161 ) ; break ; case VAR_162 : METHOD_41 ( VAR_163 , 1 , VAR_164 ) ; METHOD_42 ( VAR_165 , 1 , VAR_166 ) ; METHOD_43 ( VAR_167 , 1 , VAR_168 ) ; METHOD_44 ( VAR_169 , 1 , VAR_170 ) ; break ; case VAR_171 : case VAR_172 : case VAR_173 : case VAR_174 : if ( VAR_175 != ( TYPE_15 ) - 1 ) METHOD_45 ( VAR_176 , VAR_177 , VAR_178 ) ; else METHOD_46 ( VAR_179 , VAR_180 ) ; if ( VAR_181 != - 1 ) { if ( VAR_182 == VAR_183 || VAR_184 == VAR_185 ) METHOD_47 ( VAR_186 , VAR_187 , VAR_188 ) ; else if ( VAR_189 == VAR_190 ) METHOD_48 ( VAR_191 , VAR_192 , VAR_193 ) ; } break ; case VAR_194 : case VAR_195 : if ( VAR_196 == VAR_197 ) { if ( VAR_198 != ( TYPE_16 ) - 1 ) METHOD_49 ( VAR_199 , VAR_200 , VAR_201 ) ; else METHOD_50 ( VAR_202 , VAR_203 ) ; } else METHOD_51 ( VAR_204 , 1 , VAR_205 ) ; METHOD_52 ( VAR_206 , 1 , VAR_207 ) ; METHOD_53 ( VAR_208 , 1 , VAR_209 ) ; METHOD_54 ( VAR_210 , 1 , VAR_211 ) ; METHOD_55 ( VAR_212 , 1 , VAR_213 ) ; METHOD_56 ( VAR_214 , 1 , VAR_215 ) ; METHOD_57 ( VAR_216 , 1 , VAR_217 ) ; break ; } { TYPE_17 VAR_218 ; TYPE_18 * * VAR_219 ; if ( METHOD_58 ( VAR_220 , VAR_221 , & VAR_222 , & VAR_223 ) ) METHOD_59 ( VAR_224 , VAR_225 , VAR_226 , VAR_227 ) ; } { TYPE_19 VAR_228 ; const TYPE_20 * VAR_229 ; if ( METHOD_60 ( VAR_230 , VAR_231 , & VAR_232 ) ) { METHOD_61 ( VAR_233 , VAR_234 , VAR_235 ) ; if ( METHOD_62 ( VAR_236 , VAR_237 , & VAR_238 ) ) { TYPE_21 VAR_239 = METHOD_63 ( VAR_240 ) + 1 ; const TYPE_22 * VAR_241 = VAR_242 ; while ( VAR_243 > 1 ) { VAR_244 = METHOD_64 ( VAR_245 , '\\0' ) ; VAR_246 ++ ; VAR_247 += ( METHOD_65 ( VAR_248 ) + 1 ) ; VAR_249 -- ; } METHOD_66 ( VAR_250 , VAR_251 , VAR_252 , VAR_253 ) ; } } } { unsigned TYPE_23 VAR_254 , VAR_255 ; if ( VAR_256 == 1 ) { if ( VAR_257 < 0 ) { if ( METHOD_67 ( VAR_258 , VAR_259 , & VAR_260 , & VAR_261 ) ) METHOD_68 ( VAR_262 , VAR_263 , VAR_264 , VAR_265 ) ; } else METHOD_69 ( VAR_266 , VAR_267 , VAR_268 ++ , 0 ) ; } else { if ( METHOD_70 ( VAR_269 , VAR_270 , & VAR_271 , & VAR_272 ) ) { if ( VAR_273 < 0 ) METHOD_71 ( VAR_274 , VAR_275 , VAR_276 , VAR_277 ) ; else METHOD_72 ( VAR_278 , VAR_279 , VAR_280 ++ , 0 ) ; } } } for ( VAR_281 = VAR_282 ; VAR_283 < & VAR_284 [ VAR_285 ] ; VAR_286 ++ ) METHOD_73 ( VAR_287 -> VAR_288 , VAR_289 -> VAR_290 , VAR_291 -> VAR_292 ) ; VAR_293 = METHOD_74 ( VAR_294 , VAR_295 , VAR_296 , VAR_297 ) ; return ( VAR_298 ? ( * VAR_299 ) ( VAR_300 , VAR_301 , VAR_302 , VAR_303 , VAR_304 ) : VAR_305 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * const VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { const TYPE_6 * VAR_5 = & VAR_6 -> VAR_7 ; const TYPE_7 VAR_8 = VAR_9 -> VAR_10 ; const TYPE_8 VAR_11 = VAR_12 -> VAR_13 ;  const TYPE_9 VAR_14 = METHOD_1 ( VAR_15 ) ;  const TYPE_10 VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; TYPE_11 * const VAR_19 = & VAR_20 -> VAR_21 [ VAR_22 ] ; TYPE_12 * const VAR_23 = & VAR_24 -> VAR_25 [ VAR_26 ] ; TYPE_13 * const VAR_27 = & VAR_28 -> VAR_29 ; TYPE_14 * const VAR_30 = & VAR_31 -> VAR_32 [ VAR_33 ] ; TYPE_15 * const VAR_34 = & VAR_35 -> VAR_36 [ VAR_37 ] ; TYPE_16 * const VAR_38 = & VAR_39 -> VAR_40 ; TYPE_17 VAR_41 ; if ( ! VAR_42 ) { return ; } else { const TYPE_18 VAR_43 = VAR_44 [ VAR_45 ] ; const TYPE_19 VAR_46 = VAR_47 [ VAR_48 ] ; TYPE_20 VAR_49 = VAR_50 ; for ( VAR_51 = 0 ; VAR_52 < VAR_53 ; VAR_54 ++ ) {  METHOD_3 ( & VAR_55 -> VAR_56 [ VAR_57 ] , VAR_58 , VAR_59 ) ;  VAR_60 += 8 ; } } * VAR_61 |= VAR_62 [ VAR_63 ] << VAR_64 ; * VAR_65 |= VAR_66 [ VAR_67 ] << VAR_68 ; * VAR_69 |= VAR_70 [ VAR_71 ] << VAR_72 ; * VAR_73 |= VAR_74 [ VAR_75 ] << VAR_76 ; if ( VAR_77 -> VAR_78 && METHOD_4 ( VAR_79 ) ) return ; * VAR_80 |= ( VAR_81 [ VAR_82 ] & VAR_83 [ VAR_84 ] ) << VAR_85 ; * VAR_86 |= ( VAR_87 [ VAR_88 ] & VAR_89 [ VAR_90 ] ) << VAR_91 ; * VAR_92 |= ( VAR_93 [ VAR_94 ] & VAR_95 [ VAR_96 ] ) << VAR_97 ; * VAR_98 |= ( VAR_99 [ VAR_100 ] & VAR_101 [ VAR_102 ] ) << VAR_103 ; if ( VAR_104 == VAR_105 )  * VAR_106 |= ( VAR_107 [ VAR_108 ] & 0xffffffffffffffff ) << VAR_109 ;  if ( VAR_110 == VAR_111 ) * VAR_112 |= ( VAR_113 [ VAR_114 ] & 0xffff ) << VAR_115 ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , "%i" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; METHOD_5 ( ) ;  METHOD_6 ( VAR_9 , VAR_10 ) ;  METHOD_7 ( VAR_11 , VAR_12 ) ; VAR_13 = METHOD_8 ( VAR_14 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_2 VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 , * VAR_9 ; unsigned TYPE_3 VAR_10 = 0 ; struct STRUCT_OR_UNION_4 * VAR_11 = METHOD_1 ( VAR_12 , VAR_13 -> VAR_14 ) ; if ( VAR_15 -> VAR_16 ) {  METHOD_2 ( & VAR_17 -> VAR_18 , VAR_19 ) ;  VAR_20 -> VAR_21 = - 1 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; METHOD_3 ( VAR_27 -> VAR_28 == VAR_29 -> VAR_30 ) ; VAR_31 -> VAR_32 ^= 1 ; if ( ! VAR_33 -> VAR_34 ) METHOD_4 ( VAR_35 , VAR_36 ) ; METHOD_5 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 . VAR_41 ) { unsigned TYPE_4 VAR_42 = METHOD_6 ( VAR_43 ) ; METHOD_7 ( VAR_44 != VAR_45 && VAR_46 != VAR_47 ) ; VAR_48 |= METHOD_8 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; } if ( VAR_53 || VAR_54 -> VAR_55 ) { METHOD_9 ( VAR_56 -> VAR_57 ) ; METHOD_10 ( VAR_58 ) ; } VAR_59 -> VAR_60 = 0 ; if ( VAR_61 -> VAR_62 ) METHOD_11 ( & VAR_63 -> VAR_64 , VAR_65 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 ;  VAR_5 -> METHOD_2 ( VAR_6 , VAR_7 -> VAR_8 ) ;  if ( VAR_9 > ( VAR_10 -> VAR_11 - sizeof ( VAR_12 ) ) ) return ( TYPE_5 ) - 1 ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 + VAR_16 ) ; return VAR_17 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ! VAR_6 ) VAR_7 = & VAR_8 ; VAR_9 -> VAR_10 = VAR_11 -> VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; ++ VAR_16 ) VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 = VAR_21 -> VAR_22 [ VAR_23 ] . VAR_24 = VAR_25 ;  return ! METHOD_1 ( VAR_26 -> VAR_27 , VAR_28 , VAR_29 , VAR_30 -> VAR_31 | VAR_32 , VAR_33 ) ;  }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; TYPE_6 VAR_5 = VAR_6 / 2 ;  METHOD_1 ( VAR_7 , VAR_8 , VAR_9 ) ;  METHOD_2 ( VAR_10 , VAR_11 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 ; if ( ! METHOD_1 ( VAR_7 , VAR_8 , "%*" , & VAR_9 ) ) { return VAR_10 ; } if ( METHOD_2 ( VAR_11 , "disable" ) ) { METHOD_3 ( VAR_12 -> VAR_13 -> VAR_14 , 0 ) ; return 0 ; } else if ( METHOD_4 ( VAR_15 , "enable" ) ) { METHOD_5 ( VAR_16 -> VAR_17 -> VAR_18 , 1 ) ; return 0 ; } for ( VAR_19 = METHOD_6 ( VAR_20 , & VAR_21 ) ; VAR_22 ; VAR_23 = METHOD_7 ( VAR_24 , & VAR_25 ) ) {  VAR_26 = METHOD_8 ( VAR_27 , "=\\t," , & VAR_28 ) ;  VAR_29 = strim ( VAR_30 , "\\"\'" , MPR_TRIM_BOTH ) ; if ( ! VAR_31 || * VAR_32 == '\\0' ) continue ; if ( METHOD_9 ( VAR_33 , "visible" ) ) { httpSetRouteSessionVisibility ( VAR_34 -> VAR_35 , scaselessmatch ( VAR_36 , "visible" ) ) ; } else if ( METHOD_10 ( VAR_37 , "name" ) ) { httpSetRouteCookie ( VAR_38 -> VAR_39 , VAR_40 ) ; } else { mprLog ( "errorappwebconfig" , 0 , "UnknownSessionCookieoption%s" , VAR_41 ) ; return VAR_42 ; } } return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) METHOD_2 ( VAR_4 , 0 ) ; TYPE_1 VAR_5 ;  TYPE_2 VAR_6 ;  if ( VAR_7 ) return 0 ;  VAR_8 = VAR_9 -> VAR_10 ;   if ( VAR_11 -> VAR_12 && VAR_13 -> VAR_14 -> VAR_15 )  VAR_16 = VAR_17 -> VAR_18 -> VAR_19 ; VAR_20 = METHOD_3 ( METHOD_4 ( VAR_21 ) , VAR_22 , VAR_23 , VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 , METHOD_5 ( VAR_32 ) , VAR_33 -> VAR_34 ) ; if ( ! METHOD_6 ( VAR_35 ) ) { VAR_36 = 0 ; METHOD_7 ( VAR_37 , & VAR_38 -> VAR_39 ) ; } else { VAR_40 = METHOD_8 ( VAR_41 ) ; VAR_42 -> VAR_43 = 0 ; if ( ! VAR_44 || VAR_45 -> VAR_46 != VAR_47 || ( VAR_48 -> VAR_49 & VAR_50 ) || ( VAR_51 = METHOD_9 ( VAR_52 ) ) != 0 ) VAR_53 -> VAR_54 = - VAR_55 ; } return VAR_56 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 )  { METHOD_1 ( VAR_2 -> VAR_3 , VAR_4 , sizeof ( VAR_5 ) ) ; VAR_6 -> VAR_7 = VAR_8 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 [ 256 ] ; TYPE_4 VAR_3 [ 256 ] ; TYPE_5 * VAR_4 ; VAR_5 * VAR_6 ;  TYPE_6 VAR_7 ;  METHOD_1 ( VAR_8 , 0 , sizeof ( VAR_9 ) ) ;  METHOD_2 ( VAR_10 , 0 , sizeof ( VAR_11 ) ) ;  VAR_12 = METHOD_3 ( ) ; switch ( VAR_13 ) { case VAR_14 : VAR_15 = VAR_16 ; VAR_17 = & VAR_18 -> VAR_19 ; break ; case VAR_20 : VAR_21 = VAR_22 ; VAR_23 = & VAR_24 -> VAR_25 ; break ; case VAR_26 : VAR_27 = VAR_28 ; VAR_29 = & VAR_30 -> VAR_31 ; break ; default : return VAR_32 ; } METHOD_4 ( VAR_33 , "%s%s%d" , VAR_34 , VAR_35 , VAR_36 -> VAR_37 ) ;  METHOD_5 ( VAR_38 , "%s%s%d_C_%lu" , VAR_39 , VAR_40 ,   VAR_41 -> VAR_42 , ( TYPE_7 unsigned ) VAR_43 ) ;  if ( * VAR_44 == VAR_45 ) { if ( METHOD_6 ( VAR_46 , VAR_47 , VAR_48 , 32768 ) != VAR_49 ) { return VAR_50 ; } } if ( METHOD_7 ( * VAR_51 ) == VAR_52 ) { VAR_53 -> VAR_54 |= VAR_55 ; return VAR_56 ; } return VAR_57 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { struct STRUCT_OR_UNION_0 * VAR_6 = ( struct STRUCT_OR_UNION_1 * ) VAR_7 ; if ( VAR_8 == VAR_9 ) return - VAR_10 ; switch ( VAR_11 ) { case VAR_12 : if ( VAR_13 == VAR_14 || * VAR_15 != sizeof ( TYPE_7 ) ) return - VAR_16 ; * ( TYPE_8 * ) VAR_17 = 0 ; break ; case VAR_18 : { if ( VAR_19 == VAR_20 || VAR_21 != sizeof ( TYPE_9 ) || VAR_22 == VAR_23 || * VAR_24 != sizeof ( TYPE_10 ) ) { METHOD_1 ( "fx_command()EFFECT_CMD_SET_CONFIGinvalidargs" ) ; return - VAR_25 ; } * ( TYPE_11 * ) VAR_26 = METHOD_2 ( VAR_27 -> VAR_28 , ( TYPE_12 * ) VAR_29 ) ; if ( * ( TYPE_13 * ) VAR_30 != 0 ) break ; if ( VAR_31 -> VAR_32 != VAR_33 ) * ( TYPE_14 * ) VAR_34 = METHOD_3 ( VAR_35 , VAR_36 ) ; } break ; case VAR_37 : if ( VAR_38 == VAR_39 || * VAR_40 != sizeof ( TYPE_15 ) ) { METHOD_4 ( "fx_command()EFFECT_CMD_GET_CONFIGinvalidargs" ) ; return - VAR_41 ; } METHOD_5 ( VAR_42 -> VAR_43 , ( TYPE_16 * ) VAR_44 ) ; break ; case VAR_45 : break ; case VAR_46 : { if ( VAR_47 == VAR_48 || VAR_49 < ( TYPE_17 ) sizeof ( TYPE_18 ) || VAR_50 == VAR_51 ||  * VAR_52 < ( TYPE_19 ) sizeof ( TYPE_20 ) ) {  METHOD_6 ( "fx_command()EFFECT_CMD_GET_PARAMinvalidargs" ) ; return - VAR_53 ; } TYPE_21 * VAR_54 = ( TYPE_22 * ) VAR_55 ; METHOD_7 ( VAR_56 , VAR_57 , sizeof ( TYPE_23 ) + VAR_58 -> VAR_59 ) ; VAR_60 = ( TYPE_24 * ) VAR_61 ; VAR_62 -> VAR_63 = - VAR_64 ; } break ; case VAR_65 : { if ( VAR_66 == VAR_67 || VAR_68 < ( TYPE_25 ) sizeof ( TYPE_26 ) || VAR_69 == VAR_70 || * VAR_71 != sizeof ( VAR_72 ) ) { METHOD_8 ( "fx_command()EFFECT_CMD_SET_PARAMinvalidargs" ) ; return - VAR_73 ; } TYPE_27 * VAR_74 = ( TYPE_28 * ) VAR_75 ; if ( VAR_76 -> VAR_77 != sizeof ( VAR_78 ) ) { METHOD_9 ( "fx_command()EFFECT_CMD_SET_PARAMinvalidparamformat" ) ; return - VAR_79 ; } * ( TYPE_29 * ) VAR_80 = - VAR_81 ; } break ; case VAR_82 : if ( VAR_83 == VAR_84 || * VAR_85 != sizeof ( TYPE_30 ) ) { METHOD_10 ( "fx_command()EFFECT_CMD_ENABLEinvalidargs" ) ; return - VAR_86 ; } * ( TYPE_31 * ) VAR_87 = METHOD_11 ( VAR_88 , VAR_89 ) ; break ; case VAR_90 : if ( VAR_91 == VAR_92 || * VAR_93 != sizeof ( TYPE_32 ) ) { METHOD_12 ( "fx_command()EFFECT_CMD_DISABLEinvalidargs" ) ; return - VAR_94 ; } * ( TYPE_33 * ) VAR_95 = METHOD_13 ( VAR_96 , VAR_97 ) ; break ; case VAR_98 : case VAR_99 : case VAR_100 : case VAR_101 : if ( VAR_102 == VAR_103 || VAR_104 != sizeof ( TYPE_34 ) ) { METHOD_14 ( "fx_command()%sinvalidargs" , VAR_105 == VAR_106 ? "EFFECT_CMD_SET_DEVICE" : VAR_107 == VAR_108 ? "EFFECT_CMD_SET_INPUT_DEVICE" : VAR_109 == VAR_110 ? "EFFECT_CMD_SET_VOLUME" : VAR_111 == VAR_112 ? "EFFECT_CMD_SET_AUDIO_MODE" : "" ) ; return - VAR_113 ; } METHOD_15 ( "fx_command()%svalue%08x" , VAR_114 == VAR_115 ? "EFFECT_CMD_SET_DEVICE" : VAR_116 == VAR_117 ? "EFFECT_CMD_SET_INPUT_DEVICE" : VAR_118 == VAR_119 ? "EFFECT_CMD_SET_VOLUME" : VAR_120 == VAR_121 ? "EFFECT_CMD_SET_AUDIO_MODE" : "" , * ( TYPE_35 * ) VAR_122 ) ; break ; default : return - VAR_123 ; } return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 "BoundingBox:" VAR_3 "BeginDocument:" VAR_4 "<?xpacketbegin=" VAR_5 "<?xpacketend=" VAR_6 "BeginICCProfile:" VAR_7 "CMYKCustomColor:" VAR_8 "CMYKProcessColor:" VAR_9 "DocumentMedia:" VAR_10 "DocumentCustomColors:" VAR_11 "DocumentProcessColors:" VAR_12 "EndDocument:" VAR_13 "HiResBoundingBox:" VAR_14 "ImageData:" VAR_15 "PageBoundingBox:" VAR_16 "LanguageLevel:" VAR_17 "PageMedia:" VAR_18 "Pages:" VAR_19 "BeginPhotoshop:" VAR_20 "!PS-" RenderPostscriptText "RenderingPostscript..." VAR_21 "+" TYPE_3 VAR_22 [ VAR_23 ] , * VAR_24 , VAR_25 [ VAR_26 ] , VAR_27 [ VAR_28 ] , VAR_29 [ VAR_30 ] , VAR_31 [ VAR_32 ] , * VAR_33 , VAR_34 [ VAR_35 ] ; const TYPE_4 * VAR_36 ; const TYPE_5 * VAR_37 ; TYPE_6 VAR_38 ; TYPE_7 * VAR_39 , * VAR_40 , * VAR_41 ; TYPE_8 * VAR_42 ; TYPE_9 VAR_43 , VAR_44 ; TYPE_10 VAR_45 , VAR_46 , VAR_47 , VAR_48 ; TYPE_11 VAR_49 ; TYPE_12 VAR_50 , VAR_51 ; TYPE_13 VAR_52 ; register TYPE_14 * VAR_53 ; register TYPE_15 VAR_54 ; TYPE_16 VAR_55 , VAR_56 ; TYPE_17 TYPE_18 VAR_57 [ 256 ] ; TYPE_19 VAR_58 ; TYPE_20 VAR_59 , VAR_60 ; TYPE_21 * VAR_61 ; unsigned TYPE_22 VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 , VAR_67 , VAR_68 ; METHOD_1 ( VAR_69 != ( const TYPE_23 * ) VAR_70 ) ; METHOD_2 ( VAR_71 -> VAR_72 == VAR_73 ) ; if ( VAR_74 -> VAR_75 != VAR_76 ) ( TYPE_24 ) METHOD_3 ( VAR_77 , METHOD_4 ( ) , "%s" , VAR_78 -> VAR_79 ) ; METHOD_5 ( VAR_80 != ( TYPE_25 * ) VAR_81 ) ; METHOD_6 ( VAR_82 -> VAR_83 == VAR_84 ) ; VAR_85 = METHOD_7 ( VAR_86 , VAR_87 ) ; VAR_88 = METHOD_8 ( VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; if ( VAR_93 == VAR_94 ) { VAR_95 = METHOD_9 ( VAR_96 ) ; return ( ( TYPE_26 * ) VAR_97 ) ; } VAR_98 = METHOD_10 ( VAR_99 -> VAR_100 , VAR_101 ) ; if ( VAR_102 == VAR_103 ) { METHOD_11 ( VAR_104 , VAR_105 , "UnableToCreateTemporaryFile" , VAR_106 -> VAR_107 ) ; VAR_108 = METHOD_12 ( VAR_109 ) ; return ( ( TYPE_27 * ) VAR_110 ) ; } ( TYPE_28 ) METHOD_13 ( VAR_111 , 0 , sizeof ( VAR_112 ) ) ; VAR_113 [ ( TYPE_29 ) '0' ] = 0 ; VAR_114 [ ( TYPE_30 ) '1' ] = 1 ; VAR_115 [ ( TYPE_31 ) '2' ] = 2 ; VAR_116 [ ( TYPE_32 ) '3' ] = 3 ; VAR_117 [ ( TYPE_33 ) '4' ] = 4 ; VAR_118 [ ( TYPE_34 ) '5' ] = 5 ; VAR_119 [ ( TYPE_35 ) '6' ] = 6 ; VAR_120 [ ( TYPE_36 ) '7' ] = 7 ; VAR_121 [ ( TYPE_37 ) '8' ] = 8 ; VAR_122 [ ( TYPE_38 ) '9' ] = 9 ; VAR_123 [ ( TYPE_39 ) 'a' ] = 10 ; VAR_124 [ ( TYPE_40 ) 'b' ] = 11 ; VAR_125 [ ( TYPE_41 ) 'c' ] = 12 ; VAR_126 [ ( TYPE_42 ) 'd' ] = 13 ; VAR_127 [ ( TYPE_43 ) 'e' ] = 14 ; VAR_128 [ ( TYPE_44 ) 'f' ] = 15 ; VAR_129 [ ( TYPE_45 ) 'A' ] = 10 ; VAR_130 [ ( TYPE_46 ) 'B' ] = 11 ; VAR_131 [ ( TYPE_47 ) 'C' ] = 12 ; VAR_132 [ ( TYPE_48 ) 'D' ] = 13 ; VAR_133 [ ( TYPE_49 ) 'E' ] = 14 ; VAR_134 [ ( TYPE_50 ) 'F' ] = 15 ; VAR_135 . VAR_136 = VAR_137 ; VAR_138 . VAR_139 = VAR_140 ; if ( ( VAR_141 -> VAR_142 . VAR_143 == 0.0 ) || ( VAR_144 -> VAR_145 . VAR_146 == 0.0 ) ) { VAR_147 = METHOD_14 ( VAR_148 , & VAR_149 ) ; VAR_150 -> VAR_151 . VAR_152 = VAR_153 . VAR_154 ; VAR_155 -> VAR_156 . VAR_157 = VAR_158 . VAR_159 ; if ( ( VAR_160 & VAR_161 ) == 0 ) VAR_162 -> VAR_163 . VAR_164 = VAR_165 -> VAR_166 . VAR_167 ; } if ( VAR_168 -> VAR_169 != ( TYPE_51 * ) VAR_170 ) { VAR_171 = METHOD_15 ( VAR_172 -> VAR_173 , & VAR_174 ) ; VAR_175 -> VAR_176 . VAR_177 = VAR_178 . VAR_179 ; VAR_180 -> VAR_181 . VAR_182 = VAR_183 . VAR_184 ; if ( ( VAR_185 & VAR_186 ) == 0 ) VAR_187 -> VAR_188 . VAR_189 = VAR_190 -> VAR_191 . VAR_192 ; } ( TYPE_52 ) METHOD_16 ( VAR_193 , & VAR_194 ) ; if ( VAR_195 -> VAR_196 != ( TYPE_53 * ) VAR_197 ) ( TYPE_54 ) METHOD_17 ( VAR_198 -> VAR_199 , & VAR_200 ) ; VAR_201 = VAR_202 -> VAR_203 ; VAR_204 . VAR_205 = ( TYPE_55 ) METHOD_18 ( ( TYPE_56 ) ( VAR_206 . VAR_207 * VAR_208 . VAR_209 / VAR_210 . VAR_211 ) - 0.5 ) ; VAR_212 . VAR_213 = ( TYPE_57 ) METHOD_19 ( ( TYPE_58 ) ( VAR_214 . VAR_215 * VAR_216 . VAR_217 / VAR_218 . VAR_219 ) - 0.5 ) ; ( TYPE_59 ) METHOD_20 ( & VAR_220 , 0 , sizeof ( VAR_221 ) ) ; ( TYPE_60 ) METHOD_21 ( VAR_222 , 0 , sizeof ( VAR_223 ) ) ; VAR_224 = VAR_225 -> VAR_226 == VAR_227 ? VAR_228 : VAR_229 ; ( TYPE_61 ) METHOD_22 ( & VAR_230 , 0 , sizeof ( VAR_231 ) ) ; VAR_232 = 0 ; VAR_233 = 0 ; VAR_234 = 0 ; VAR_235 = 0 ; VAR_236 = 0 ; VAR_237 = 0 ; VAR_238 = 1 ; VAR_239 = ( ~ 0UL ) ; VAR_240 = VAR_241 ; VAR_242 = VAR_243 ; for ( VAR_244 = METHOD_23 ( VAR_245 ) ; VAR_246 != VAR_247 ; VAR_248 = METHOD_24 ( VAR_249 ) ) { * VAR_250 ++ = ( TYPE_62 ) VAR_251 ; if ( ( METHOD_25 ( "\\n\\r%" , VAR_252 ) == ( TYPE_63 * ) VAR_253 ) && ( ( TYPE_64 ) ( VAR_254 - VAR_255 ) < ( VAR_256 - 1 ) ) ) continue ; * VAR_257 = '\\0' ; VAR_258 = VAR_259 ; if ( METHOD_26 ( VAR_260 , VAR_261 , METHOD_27 ( VAR_262 ) ) == 0 ) VAR_263 = VAR_264 ; if ( METHOD_28 ( VAR_265 , VAR_266 , METHOD_29 ( VAR_267 ) ) == 0 ) VAR_268 = VAR_269 ; if ( VAR_270 != VAR_271 ) continue ; if ( METHOD_30 ( VAR_272 , VAR_273 , METHOD_31 ( VAR_274 ) ) == 0 ) { ( TYPE_65 ) METHOD_32 ( VAR_275 , "ps:Level" , VAR_276 + 4 , VAR_277 ) ; if ( METHOD_33 ( VAR_278 , "*EPSF-*" , VAR_279 ) != VAR_280 ) VAR_281 = 1 ; } if ( METHOD_34 ( VAR_282 , VAR_283 , METHOD_35 ( VAR_284 ) ) == 0 ) ( TYPE_66 ) VAR_285 ( VAR_286 , VAR_287 "%lu" , & VAR_288 ) ; if ( METHOD_36 ( VAR_289 , VAR_290 , METHOD_37 ( VAR_291 ) ) == 0 ) ( TYPE_67 ) VAR_292 ( VAR_293 , VAR_294 "%lu" , & VAR_295 ) ; if ( METHOD_38 ( VAR_296 , VAR_297 , METHOD_39 ( VAR_298 ) ) == 0 ) ( TYPE_68 ) VAR_299 ( VAR_300 , VAR_301 "%lu%lu" , & VAR_302 , & VAR_303 ) ; VAR_304 = METHOD_40 ( VAR_305 ) ; if ( METHOD_41 ( VAR_306 , VAR_307 , VAR_308 ) == 0 ) { if ( ( METHOD_42 ( VAR_309 , "*Cyan*" , VAR_310 ) != VAR_311 ) || ( METHOD_43 ( VAR_312 , "*Magenta*" , VAR_313 ) != VAR_314 ) || ( METHOD_44 ( VAR_315 , "*Yellow*" , VAR_316 ) != VAR_317 ) ) VAR_318 = VAR_319 ; } if ( METHOD_45 ( VAR_320 , VAR_321 , METHOD_46 ( VAR_322 ) ) == 0 ) VAR_323 = VAR_324 ; if ( METHOD_47 ( VAR_325 , VAR_326 , METHOD_48 ( VAR_327 ) ) == 0 ) VAR_328 = VAR_329 ; VAR_330 = METHOD_49 ( VAR_331 ) ; if ( ( METHOD_50 ( VAR_332 , VAR_333 , VAR_334 ) == 0 ) || ( METHOD_51 ( VAR_335 , VAR_336 , METHOD_52 ( VAR_337 ) ) == 0 ) || ( METHOD_53 ( VAR_338 , VAR_339 , METHOD_54 ( VAR_340 ) ) == 0 ) ) { TYPE_69 VAR_341 [ VAR_342 ] , * VAR_343 ; register TYPE_70 * VAR_344 ; ( TYPE_71 ) METHOD_55 ( VAR_345 , VAR_346 , "ps:SpotColor-%.20g" , ( TYPE_72 ) ( VAR_347 ++ ) ) ; for ( VAR_348 = VAR_349 ; * VAR_350 != '\\0' ; VAR_351 ++ ) if ( METHOD_56 ( ( TYPE_73 ) ( unsigned TYPE_74 ) * VAR_352 ) != 0 ) break ; VAR_353 = METHOD_57 ( VAR_354 ) ; ( TYPE_75 ) METHOD_58 ( & VAR_355 , "(" , "" ) ; ( TYPE_76 ) METHOD_59 ( & VAR_356 , ")" , "" ) ; ( TYPE_77 ) METHOD_60 ( VAR_357 ) ; if ( * VAR_358 != '\\0' ) ( TYPE_78 ) METHOD_61 ( VAR_359 , VAR_360 , VAR_361 , VAR_362 ) ; VAR_363 = METHOD_62 ( VAR_364 ) ; continue ; } if ( VAR_365 -> VAR_366 != ( TYPE_79 * ) VAR_367 ) continue ; VAR_368 = 0 ; VAR_369 = 0 ; if ( METHOD_63 ( VAR_370 , VAR_371 , METHOD_64 ( VAR_372 ) ) == 0 ) { VAR_373 = ( TYPE_80 ) VAR_374 ( VAR_375 , VAR_376 "%lf%lf%lf%lf" , & VAR_377 . VAR_378 , & VAR_379 . VAR_380 , & VAR_381 . VAR_382 , & VAR_383 . VAR_384 ) ; VAR_385 = 2 ; } if ( METHOD_65 ( VAR_386 , VAR_387 , METHOD_66 ( VAR_388 ) ) == 0 ) { VAR_389 = ( TYPE_81 ) VAR_390 ( VAR_391 , VAR_392 "%lf%lf%lf%lf" , & VAR_393 . VAR_394 , & VAR_395 . VAR_396 , & VAR_397 . VAR_398 , & VAR_399 . VAR_400 ) ; VAR_401 = 1 ; } if ( METHOD_67 ( VAR_402 , VAR_403 , METHOD_68 ( VAR_404 ) ) == 0 ) { VAR_405 = ( TYPE_82 ) VAR_406 ( VAR_407 , VAR_408 "%lf%lf%lf%lf" , & VAR_409 . VAR_410 , & VAR_411 . VAR_412 , & VAR_413 . VAR_414 , & VAR_415 . VAR_416 ) ; VAR_417 = 3 ; } if ( METHOD_69 ( VAR_418 , VAR_419 , METHOD_70 ( VAR_420 ) ) == 0 ) { VAR_421 = ( TYPE_83 ) VAR_422 ( VAR_423 , VAR_424 "%lf%lf%lf%lf" , & VAR_425 . VAR_426 , & VAR_427 . VAR_428 , & VAR_429 . VAR_430 , & VAR_431 . VAR_432 ) ; VAR_433 = 1 ; } if ( METHOD_71 ( VAR_434 , VAR_435 , METHOD_72 ( VAR_436 ) ) == 0 ) { VAR_437 = ( TYPE_84 ) VAR_438 ( VAR_439 , VAR_440 "%lf%lf%lf%lf" , & VAR_441 . VAR_442 , & VAR_443 . VAR_444 , & VAR_445 . VAR_446 , & VAR_447 . VAR_448 ) ; VAR_449 = 1 ; } if ( ( VAR_450 != 4 ) || ( VAR_451 < ( TYPE_85 ) VAR_452 ) ) continue ; if ( ( METHOD_73 ( VAR_453 . VAR_454 - VAR_455 . VAR_456 ) <= METHOD_74 ( VAR_457 . VAR_458 - VAR_459 . VAR_460 ) ) || ( METHOD_75 ( VAR_461 . VAR_462 - VAR_463 . VAR_464 ) <= METHOD_76 ( VAR_465 . VAR_466 - VAR_467 . VAR_468 ) ) ) if ( VAR_469 == ( TYPE_86 ) VAR_470 ) continue ; VAR_471 = VAR_472 ; VAR_473 = VAR_474 ; } if ( ( METHOD_77 ( VAR_475 . VAR_476 - VAR_477 . VAR_478 ) >= VAR_479 ) && ( METHOD_78 ( VAR_480 . VAR_481 - VAR_482 . VAR_483 ) >= VAR_484 ) ) { ( TYPE_87 ) METHOD_79 ( VAR_485 , VAR_486 , "%gx%g%+.15g%+.15g" , VAR_487 . VAR_488 - VAR_489 . VAR_490 , VAR_491 . VAR_492 - VAR_493 . VAR_494 , VAR_495 . VAR_496 , VAR_497 . VAR_498 ) ; ( TYPE_88 ) METHOD_80 ( VAR_499 , "ps:HiResBoundingBox" , VAR_500 , VAR_501 ) ; VAR_502 . VAR_503 = ( TYPE_89 ) METHOD_81 ( ( TYPE_90 ) ( ( VAR_504 . VAR_505 - VAR_506 . VAR_507 ) * VAR_508 . VAR_509 / VAR_510 . VAR_511 ) - 0.5 ) ; VAR_512 . VAR_513 = ( TYPE_91 ) METHOD_82 ( ( TYPE_92 ) ( ( VAR_514 . VAR_515 - VAR_516 . VAR_517 ) * VAR_518 . VAR_519 / VAR_520 . VAR_521 ) - 0.5 ) ; } VAR_522 = VAR_523 ; VAR_524 = METHOD_83 ( VAR_525 , "eps:fit-page" ) ; if ( VAR_526 != ( TYPE_93 * ) VAR_527 ) { TYPE_94 * VAR_528 ; VAR_529 = METHOD_84 ( VAR_530 ) ; VAR_531 = METHOD_85 ( VAR_532 , & VAR_533 . VAR_534 , & VAR_535 . VAR_536 , & VAR_537 . VAR_538 , & VAR_539 . VAR_540 ) ; if ( VAR_541 == VAR_542 ) { ( TYPE_95 ) METHOD_86 ( VAR_543 , METHOD_87 ( ) , VAR_544 ,  "InvalidGeometry" , "`%s\'" , VAR_545 ) ;  VAR_546 = METHOD_88 ( VAR_547 ) ; return ( ( TYPE_96 * ) VAR_548 ) ; } VAR_549 . VAR_550 = ( TYPE_97 ) METHOD_89 ( ( TYPE_98 ) ( VAR_551 . VAR_552 * VAR_553 -> VAR_554 . VAR_555 / VAR_556 . VAR_557 ) - 0.5 ) ; VAR_558 . VAR_559 = ( TYPE_99 ) METHOD_90 ( ( TYPE_100 ) ( VAR_560 . VAR_561 * VAR_562 -> VAR_563 . VAR_564 / VAR_565 . VAR_566 ) - 0.5 ) ; VAR_567 = METHOD_91 ( VAR_568 ) ; VAR_569 = VAR_570 ; } if ( METHOD_92 ( VAR_571 -> VAR_572 ) != VAR_573 ) VAR_574 = VAR_575 ; VAR_576 = METHOD_93 ( VAR_577 ) ; if ( VAR_578 == - 1 ) { METHOD_94 ( VAR_579 , VAR_580 , "UnableToOpenFile" , VAR_581 -> VAR_582 ) ; VAR_583 = METHOD_95 ( VAR_584 ) ; return ( ( TYPE_101 * ) VAR_585 ) ; } ( TYPE_102 ) METHOD_96 ( VAR_586 , "/setpagedevice{pop}bind1indexwhere{" "dupwcheck{31rollput}{popdef}ifelse}{def}ifelse\\n" "<</UseCIEColortrue>>setpagedevice\\n" , VAR_587 ) ; VAR_588 = METHOD_97 ( VAR_589 , VAR_590 , ( unsigned TYPE_103 ) METHOD_98 ( VAR_591 ) ) ; if ( VAR_592 -> VAR_593 == ( TYPE_104 * ) VAR_594 ) { TYPE_105 VAR_595 [ VAR_596 ] ; ( TYPE_106 ) METHOD_99 ( VAR_597 , VAR_598 , "%g%gtranslate\\n" , - VAR_599 . VAR_600 , - VAR_601 . VAR_602 ) ; VAR_603 = METHOD_100 ( VAR_604 , VAR_605 , ( unsigned TYPE_107 ) METHOD_101 ( VAR_606 ) ) ; } VAR_607 = METHOD_102 ( VAR_608 ) - 1 ; if ( VAR_609 -> VAR_610 != VAR_611 ) VAR_612 = METHOD_103 ( "ps:mono" , ( TYPE_108 * ) VAR_613 , VAR_614 ) ; else if ( VAR_615 != VAR_616 ) VAR_617 = METHOD_104 ( "ps:cmyk" , ( TYPE_109 * ) VAR_618 , VAR_619 ) ; else VAR_620 = METHOD_105 ( "ps:alpha" , ( TYPE_110 * ) VAR_621 , VAR_622 ) ; if ( VAR_623 == ( const TYPE_111 * ) VAR_624 ) { ( TYPE_112 ) METHOD_106 ( VAR_625 ) ; VAR_626 = METHOD_107 ( VAR_627 ) ; return ( ( TYPE_113 * ) VAR_628 ) ; } VAR_629 = METHOD_108 ( "" ) ; VAR_630 = METHOD_109 ( "" ) ; ( TYPE_114 ) METHOD_110 ( VAR_631 , VAR_632 , "%gx%g" , VAR_633 . VAR_634 , VAR_635 . VAR_636 ) ; ( TYPE_115 ) METHOD_111 ( VAR_637 , VAR_638 , "-g%.20gx%.20g" , ( TYPE_116 ) VAR_639 . VAR_640 , ( TYPE_117 ) VAR_641 . VAR_642 ) ; VAR_643 = METHOD_112 ( VAR_644 ) ; * VAR_645 -> VAR_646 = '\\0' ; if ( VAR_647 -> VAR_648 != 0 ) { TYPE_118 VAR_649 [ VAR_650 ] ; ( TYPE_119 ) METHOD_113 ( VAR_651 , VAR_652 , "-dFirstPage=%.20g" "-dLastPage=%.20g" , ( TYPE_120 ) VAR_653 -> VAR_654 + 1 , ( TYPE_121 ) ( VAR_655 -> VAR_656 + VAR_657 -> VAR_658 ) ) ; ( TYPE_122 ) METHOD_114 ( VAR_659 , VAR_660 , VAR_661 ) ; VAR_662 -> VAR_663 = 0 ; if ( VAR_664 -> VAR_665 != ( TYPE_123 * ) VAR_666 ) * VAR_667 -> VAR_668 = '\\0' ; } if ( * VAR_669 -> VAR_670 == 'E' ) { VAR_671 = METHOD_115 ( VAR_672 , "eps:use-cropbox" ) ; if ( ( VAR_673 == ( const TYPE_124 * ) VAR_674 ) || ( METHOD_116 ( VAR_675 ) != VAR_676 ) ) ( TYPE_125 ) METHOD_117 ( VAR_677 , "-dEPSCrop" , VAR_678 ) ; if ( VAR_679 != VAR_680 ) ( TYPE_126 ) METHOD_118 ( VAR_681 , "-dEPSFitPage" , VAR_682 ) ; } ( TYPE_127 ) METHOD_119 ( VAR_683 , VAR_684 -> VAR_685 , VAR_686 ) ; ( TYPE_128 ) METHOD_120 ( VAR_687 ) ; ( TYPE_129 ) METHOD_121 ( VAR_688 ) ; ( TYPE_130 ) METHOD_122 ( VAR_689 , "%d" , VAR_690 ) ; ( TYPE_131 ) METHOD_123 ( VAR_691 , VAR_692 , METHOD_124 ( VAR_693 ) , VAR_694 -> VAR_695 != VAR_696 ? 4 : 1 , VAR_697 -> VAR_698 != VAR_699 ? 4 : 1 , VAR_700 , VAR_701 , VAR_702 , VAR_703 , VAR_704 ) ; VAR_705 = METHOD_125 ( VAR_706 ) ; VAR_707 = METHOD_126 ( VAR_708 ) ; * VAR_709 = '\\0' ; VAR_710 = METHOD_127 ( VAR_711 -> VAR_712 , VAR_713 , VAR_714 , VAR_715 ) ; ( TYPE_132 ) METHOD_128 ( VAR_716 , VAR_717 , VAR_718 , 1 , VAR_719 -> VAR_720 , VAR_721 ) ; if ( ( VAR_722 == VAR_723 ) || ( METHOD_129 ( VAR_724 -> VAR_725 ) == VAR_726 ) ) { ( TYPE_133 ) METHOD_130 ( VAR_727 , "-cshowpage" , VAR_728 ) ; VAR_729 = METHOD_131 ( VAR_730 -> VAR_731 , VAR_732 , VAR_733 , VAR_734 ) ; } ( TYPE_134 ) METHOD_132 ( VAR_735 ) ; ( TYPE_135 ) METHOD_133 ( VAR_736 ) ; VAR_737 = ( TYPE_136 * ) VAR_738 ; if ( VAR_739 == VAR_740 ) for ( VAR_741 = 1 ; ; VAR_742 ++ ) { ( TYPE_137 ) METHOD_134 ( VAR_743 , VAR_744 , VAR_745 , ( TYPE_138 ) VAR_746 , VAR_747 -> VAR_748 , VAR_749 ) ; if ( METHOD_135 ( VAR_750 -> VAR_751 ) == VAR_752 ) break ; ( TYPE_139 ) METHOD_136 ( VAR_753 -> VAR_754 ) ; } else for ( VAR_755 = 1 ; ; VAR_756 ++ ) { ( TYPE_140 ) METHOD_137 ( VAR_757 , VAR_758 , VAR_759 , ( TYPE_141 ) VAR_760 , VAR_761 -> VAR_762 , VAR_763 ) ; if ( METHOD_138 ( VAR_764 -> VAR_765 ) == VAR_766 ) break ; VAR_767 -> VAR_768 = VAR_769 ; VAR_770 -> VAR_771 = 0 ; VAR_772 = METHOD_139 ( VAR_773 , VAR_774 ) ; ( TYPE_142 ) METHOD_140 ( VAR_775 -> VAR_776 ) ; if ( VAR_777 == ( TYPE_143 * ) VAR_778 ) break ; METHOD_141 ( & VAR_779 , VAR_780 ) ; } ( TYPE_144 ) METHOD_142 ( VAR_781 -> VAR_782 ) ; VAR_783 = METHOD_143 ( VAR_784 ) ; if ( VAR_785 == ( TYPE_145 * ) VAR_786 ) { if ( * VAR_787 != '\\0' ) ( TYPE_146 ) METHOD_144 ( VAR_788 , METHOD_145 ( ) , VAR_789 , "PostscriptDelegateFailed" , "`%s\'" , VAR_790 ) ; VAR_791 = METHOD_146 ( VAR_792 ) ; return ( ( TYPE_147 * ) VAR_793 ) ; } if ( METHOD_147 ( VAR_794 -> VAR_795 , "BMP" ) == 0 ) { TYPE_148 * VAR_796 ; VAR_797 = METHOD_148 ( VAR_798 , VAR_799 ) ; if ( VAR_800 != ( TYPE_149 * ) VAR_801 ) { VAR_802 = METHOD_149 ( VAR_803 ) ; VAR_804 = VAR_805 ; } } ( TYPE_150 ) METHOD_150 ( VAR_806 , 0 , VAR_807 ) ; for ( VAR_808 = METHOD_151 ( VAR_809 ) ; VAR_810 != VAR_811 ; VAR_812 = METHOD_152 ( VAR_813 ) ) { * VAR_814 ++ = ( TYPE_151 ) VAR_815 ; if ( ( METHOD_153 ( "\\n\\r%" , VAR_816 ) == ( TYPE_152 * ) VAR_817 ) && ( ( TYPE_153 ) ( VAR_818 - VAR_819 ) < ( VAR_820 - 1 ) ) ) continue ; * VAR_821 = '\\0' ; VAR_822 = VAR_823 ; if ( METHOD_154 ( VAR_824 , VAR_825 , METHOD_155 ( VAR_826 ) ) == 0 ) VAR_827 = VAR_828 ; if ( METHOD_156 ( VAR_829 , VAR_830 , METHOD_157 ( VAR_831 ) ) == 0 ) VAR_832 = VAR_833 ; if ( VAR_834 != VAR_835 ) continue ; if ( METHOD_158 ( VAR_836 , VAR_837 , METHOD_159 ( VAR_838 ) ) == 0 ) { unsigned TYPE_154 * VAR_839 ; VAR_840 = METHOD_160 ( VAR_841 ) ; VAR_842 = METHOD_161 ( VAR_843 ) ; for ( VAR_844 = 0 ; ( VAR_845 = METHOD_162 ( VAR_846 , VAR_847 ) ) != VAR_848 ; VAR_849 ++ ) { if ( VAR_850 >= ( TYPE_155 ) METHOD_163 ( VAR_851 ) ) { METHOD_164 ( VAR_852 , ( TYPE_156 ) VAR_853 << 1 ) ; VAR_854 = METHOD_165 ( VAR_855 ) ; } VAR_856 [ VAR_857 ] = ( unsigned TYPE_157 ) VAR_858 ; } METHOD_166 ( VAR_859 , ( TYPE_158 ) VAR_860 + 1 ) ; ( TYPE_159 ) METHOD_167 ( VAR_861 , "icc" , VAR_862 , VAR_863 ) ; VAR_864 = METHOD_168 ( VAR_865 ) ; continue ; } if ( METHOD_169 ( VAR_866 , VAR_867 , METHOD_170 ( VAR_868 ) ) == 0 ) { unsigned TYPE_160 * VAR_869 ; VAR_870 = ( TYPE_161 ) VAR_871 ( VAR_872 , VAR_873 "%lu" , & VAR_874 ) ; if ( VAR_875 != 1 ) continue ; VAR_876 = VAR_877 ; if ( ( TYPE_162 ) VAR_878 > METHOD_171 ( VAR_879 ) ) METHOD_172 ( VAR_880 , "InsufficientImageDataInFile" ) ; VAR_881 = METHOD_173 ( ( const TYPE_163 * ) VAR_882 , VAR_883 ) ; if ( VAR_884 != ( TYPE_164 * ) VAR_885 ) { VAR_886 = METHOD_174 ( VAR_887 ) ; for ( VAR_888 = 0 ; VAR_889 < ( TYPE_165 ) VAR_890 ; VAR_891 ++ ) * VAR_892 ++ = ( unsigned TYPE_166 ) METHOD_175 ( VAR_893 , VAR_894 ) ; ( TYPE_167 ) METHOD_176 ( VAR_895 , "8bim" , VAR_896 , VAR_897 ) ; VAR_898 = METHOD_177 ( VAR_899 ) ; } continue ; } if ( METHOD_178 ( VAR_900 , VAR_901 , METHOD_179 ( VAR_902 ) ) == 0 ) { VAR_903 = VAR_904 ; VAR_905 = METHOD_180 ( VAR_906 ) ; for ( VAR_907 = ( TYPE_168 ) METHOD_181 ( VAR_908 ) - 1 ; VAR_909 != VAR_910 ; VAR_911 ++ ) { METHOD_182 ( VAR_912 , ( TYPE_169 ) ( VAR_913 + 1 ) ) ; VAR_914 = METHOD_183 ( VAR_915 ) ; METHOD_184 ( VAR_916 ) [ VAR_917 ] = ( unsigned TYPE_170 ) VAR_918 ; * VAR_919 ++ = ( TYPE_171 ) VAR_920 ; if ( ( METHOD_185 ( "\\n\\r%" , VAR_921 ) == ( TYPE_172 * ) VAR_922 ) && ( ( TYPE_173 ) ( VAR_923 - VAR_924 ) < ( VAR_925 - 1 ) ) ) continue ; * VAR_926 = '\\0' ; VAR_927 = VAR_928 ; if ( METHOD_186 ( VAR_929 , VAR_930 , METHOD_187 ( VAR_931 ) ) == 0 ) break ; } METHOD_188 ( VAR_932 , ( TYPE_174 ) VAR_933 ) ; ( TYPE_175 ) METHOD_189 ( VAR_934 , "xmp" , VAR_935 , VAR_936 ) ; VAR_937 = METHOD_190 ( VAR_938 ) ; continue ; } } ( TYPE_176 ) METHOD_191 ( VAR_939 ) ; if ( VAR_940 -> VAR_941 != 0 ) { TYPE_177 * VAR_942 ; for ( VAR_943 = 0 ; VAR_944 < ( TYPE_178 ) VAR_945 -> VAR_946 ; VAR_947 ++ ) { VAR_948 = METHOD_192 ( VAR_949 , 1 , 1 , VAR_950 , VAR_951 ) ; if ( VAR_952 != ( TYPE_179 * ) VAR_953 ) METHOD_193 ( & VAR_954 , VAR_955 ) ; } } do { ( TYPE_180 ) METHOD_194 ( VAR_956 -> VAR_957 , VAR_958 , VAR_959 ) ; ( TYPE_181 ) METHOD_195 ( VAR_960 -> VAR_961 , VAR_962 -> VAR_963 , VAR_964 ) ; if ( VAR_965 != 0 ) VAR_966 -> VAR_967 = VAR_968 ; if ( VAR_969 != 0 ) VAR_970 -> VAR_971 = VAR_972 ; VAR_973 -> VAR_974 = VAR_975 ; ( TYPE_182 ) METHOD_196 ( VAR_976 , VAR_977 ) ; ( TYPE_183 ) METHOD_197 ( VAR_978 , VAR_979 ) ; VAR_980 = METHOD_198 ( VAR_981 ) ; if ( VAR_982 != ( TYPE_184 * ) VAR_983 ) VAR_984 = VAR_985 ; } while ( VAR_986 != ( TYPE_185 * ) VAR_987 ) ; VAR_988 = METHOD_199 ( VAR_989 ) ; VAR_990 = 0 ; for ( VAR_991 = METHOD_200 ( VAR_992 ) ; VAR_993 != ( TYPE_186 * ) VAR_994 ; ) { VAR_995 -> VAR_996 = VAR_997 ++ ; VAR_998 = METHOD_201 ( VAR_999 ) ; } return ( METHOD_202 ( VAR_1000 ) ) ; }
static struct STRUCT_OR_UNION_0 * * METHOD_0 ( TYPE_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * * VAR_3 = VAR_4 ; TYPE_3 VAR_5 ; TYPE_4 VAR_6 = 1 ; TYPE_5 VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 = 0 ; TYPE_7 * VAR_11 ; if ( VAR_12 <= 0 ) return VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , sizeof ( * VAR_16 ) , & VAR_17 ) ; if ( VAR_18 == VAR_19 ) goto VAR_20 ; METHOD_2 ( VAR_21 , VAR_22 , VAR_23 * sizeof ( * VAR_24 ) ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { if ( VAR_29 [ VAR_30 ] . VAR_31 == 1 ) { VAR_32 [ VAR_33 ] . VAR_34 = 2 ; VAR_35 [ VAR_36 ] . VAR_37 [ 1 ] = VAR_38 ; VAR_39 [ VAR_40 ] . VAR_41 [ 1 ] = 0 ; VAR_42 [ VAR_43 ] . VAR_44 [ 1 ] = VAR_45 ; } } for ( VAR_46 = 0 ; VAR_47 < VAR_48 - 1 ; VAR_49 ++ ) if ( VAR_50 [ VAR_51 ] . VAR_52 != VAR_53 [ VAR_54 + 1 ] . VAR_55 ) VAR_56 ++ ; VAR_57 = ( struct STRUCT_OR_UNION_2 * * ) METHOD_3 ( VAR_58 + 1 , sizeof ( struct STRUCT_OR_UNION_3 * ) ) ; if ( VAR_59 == VAR_60 ) { VAR_61 = VAR_62 ; goto VAR_63 ; } for ( VAR_64 = 0 , VAR_65 = 0 , VAR_66 = 0 , VAR_67 = VAR_68 [ 0 ] . VAR_69 ; VAR_70 < VAR_71 ; VAR_72 ++ ) { VAR_73 * VAR_74 ; if ( VAR_75 == VAR_76 - 1 || VAR_77 [ VAR_78 + 1 ] . VAR_79 != VAR_80 ) { VAR_81 [ VAR_82 ] = METHOD_4 ( sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_83 ) ; if ( VAR_84 [ VAR_85 ] == VAR_86 ) goto VAR_87 ; VAR_88 = METHOD_5 ( VAR_89 + VAR_90 , ( TYPE_8 ) VAR_91 - VAR_92 + 1 , VAR_93 , & VAR_94 ) ; if ( VAR_95 ) goto VAR_96 ; VAR_97 [ VAR_98 ] -> VAR_99 = VAR_100 -> VAR_101 ; VAR_102 [ VAR_103 ] -> VAR_104 = VAR_105 -> VAR_106 ; METHOD_6 ( VAR_107 ) ; VAR_108 ++ ; VAR_109 = VAR_110 + 1 ;  VAR_111 = VAR_112 [ VAR_113 ] . VAR_114 ;  } } VAR_115 [ VAR_116 ] = VAR_117 ; VAR_118 : METHOD_7 ( VAR_119 ) ; if ( VAR_120 != 0 ) { if ( VAR_121 != VAR_122 ) { for ( VAR_123 = 0 ; VAR_124 <= VAR_125 ; VAR_126 ++ ) if ( VAR_127 [ VAR_128 ] != VAR_129 ) METHOD_8 ( VAR_130 [ VAR_131 ] ) ; METHOD_9 ( VAR_132 ) ; VAR_133 = VAR_134 ; } } return VAR_135 ; }
static TYPE_0 METHOD_0 ( TYPE_1 , TYPE_2 * VAR_0 , TYPE_3 * VAR_1 , TYPE_4 * VAR_2 , TYPE_5 * VAR_3 ) { TYPE_6 VAR_4 , VAR_5 , VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ; { VAR_11 = METHOD_2 ( VAR_12 , VAR_13 , VAR_14 ) ; { METHOD_3 ( VAR_15 , VAR_16 , VAR_17 ) ; METHOD_4 ( VAR_18 , VAR_19 , VAR_20 ) ; } METHOD_5 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( VAR_24 -> VAR_25 ) { METHOD_6 ( VAR_26 , VAR_27 , VAR_28 ) ; if ( ! METHOD_7 ( VAR_29 -> VAR_30 , "arguments" ) ) METHOD_8 ( VAR_31 , VAR_32 , "redefining\'arguments\'isnotallowedinstrictmode" ) ; if ( ! METHOD_9 ( VAR_33 -> VAR_34 , "eval" ) ) METHOD_10 ( VAR_35 , VAR_36 , "redefining\'eval\'isnotallowedinstrictmode" ) ; } METHOD_11 ( VAR_37 , VAR_38 , VAR_39 ) ; METHOD_12 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 -> VAR_44 ) ; METHOD_13 ( VAR_45 , VAR_46 , VAR_47 ) ; METHOD_14 ( VAR_48 , VAR_49 , VAR_50 ) ;  VAR_51 = METHOD_15 ( VAR_52 , VAR_53 , VAR_54 ) ;  } METHOD_16 ( VAR_55 , VAR_56 , VAR_57 ) ; METHOD_17 ( VAR_58 , VAR_59 , VAR_60 ) ; METHOD_18 ( VAR_61 , VAR_62 , VAR_63 ) ; METHOD_19 ( VAR_64 , VAR_65 , VAR_66 ) ; METHOD_20 ( VAR_67 , VAR_68 , VAR_69 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , const TYPE_3 * VAR_1 , unsigned TYPE_4 * * VAR_2 , unsigned TYPE_5 * * VAR_3 , TYPE_6 * * VAR_4 , unsigned TYPE_7 * VAR_5 , unsigned TYPE_8 * VAR_6 , unsigned TYPE_9 * VAR_7 ) { VAR_8 * VAR_9 ; const unsigned TYPE_10 VAR_10 = 512 ; TYPE_11 VAR_11 [ 512 + 1 ] ; unsigned TYPE_12 VAR_12 = 0 ; unsigned TYPE_13 * VAR_13 = VAR_14 ; unsigned TYPE_14 VAR_15 = 0 ; VAR_16 = METHOD_1 ( VAR_17 , "r" ) ; if ( VAR_18 == VAR_19 ) { METHOD_2 ( VAR_20 , VAR_21 ) ; return ; } while ( METHOD_3 ( VAR_22 , VAR_23 , VAR_24 ) != VAR_25 ) { if ( METHOD_4 ( VAR_26 ) == VAR_27 ) { METHOD_5 ( * VAR_28 ) ; METHOD_6 ( * VAR_29 ) ; METHOD_7 ( * VAR_30 ) ; METHOD_8 ( VAR_31 ) ; * VAR_32 = 0 ; * VAR_33 = 0 ; * VAR_34 = 0 ; METHOD_9 ( VAR_35 ) ; METHOD_10 ( VAR_36 , VAR_37 ) ; return ; } if ( VAR_38 [ 0 ] == '%' ) { continue ; } else { if ( VAR_39 == 0 ) {  if ( METHOD_11 ( VAR_40 , "%u%u%u" , VAR_41 , VAR_42 , VAR_43 ) == 3 ) {  * VAR_44 = ( unsigned TYPE_15 * ) METHOD_12 ( sizeof ( unsigned TYPE_16 ) * ( * VAR_45 ) ) ; * VAR_46 = ( unsigned TYPE_17 * ) METHOD_13 ( sizeof ( unsigned TYPE_18 ) * ( ( TYPE_19 ) ( * VAR_47 ) + 1 ) ) ; * VAR_48 = ( TYPE_20 * ) METHOD_14 ( sizeof ( TYPE_21 ) * ( * VAR_49 ) ) ; VAR_50 = ( unsigned TYPE_22 * ) METHOD_15 ( sizeof ( unsigned TYPE_23 ) * ( * VAR_51 ) ) ; if ( ( * VAR_52 == VAR_53 ) || ( * VAR_54 == VAR_55 ) || ( * VAR_56 == VAR_57 ) || ( VAR_58 == VAR_59 ) ) { METHOD_16 ( * VAR_60 ) ; METHOD_17 ( * VAR_61 ) ; METHOD_18 ( * VAR_62 ) ; METHOD_19 ( VAR_63 ) ; * VAR_64 = 0 ; * VAR_65 = 0 ; * VAR_66 = 0 ; METHOD_20 ( VAR_67 ) ; METHOD_21 ( VAR_68 , VAR_69 ) ; return ; } METHOD_22 ( * VAR_70 , 0 , sizeof ( unsigned TYPE_24 ) * ( * VAR_71 ) ) ; METHOD_23 ( * VAR_72 , 0 , sizeof ( unsigned TYPE_25 ) * ( ( TYPE_26 ) ( * VAR_73 ) + 1 ) ) ; METHOD_24 ( * VAR_74 , 0 , sizeof ( TYPE_27 ) * ( * VAR_75 ) ) ; METHOD_25 ( VAR_76 , 0 , sizeof ( unsigned TYPE_28 ) * ( * VAR_77 ) ) ; for ( VAR_78 = 0 ; VAR_79 <= * VAR_80 ; ++ VAR_81 ) { ( * VAR_82 ) [ VAR_83 ] = * VAR_84 ; } ( * VAR_85 ) [ 0 ] = 0 ; VAR_86 = 0 ; VAR_87 = 1 ; } else { METHOD_26 ( VAR_88 , VAR_89 ) ; METHOD_27 ( VAR_90 ) ; return ; } } else { unsigned TYPE_29 VAR_91 = 0 , VAR_92 = 0 ; TYPE_30 VAR_93 = 0 ; if ( METHOD_28 ( VAR_94 , "%u%u%lf" , & VAR_95 , & VAR_96 , & VAR_97 ) != 3 ) { METHOD_29 ( * VAR_98 ) ; METHOD_30 ( * VAR_99 ) ; METHOD_31 ( * VAR_100 ) ; METHOD_32 ( VAR_101 ) ; * VAR_102 = 0 ; * VAR_103 = 0 ; * VAR_104 = 0 ; METHOD_33 ( VAR_105 ) ; METHOD_34 ( VAR_106 , VAR_107 ) ; return ; }  VAR_108 -- ;  VAR_109 -- ; ( * VAR_110 ) [ VAR_111 ] = VAR_112 ; ( * VAR_113 ) [ VAR_114 ] = VAR_115 ; VAR_116 ++ ; VAR_117 [ VAR_118 ] = 1 ; ( * VAR_119 ) [ VAR_120 + 1 ] = VAR_121 ; } } } METHOD_35 ( VAR_122 ) ; if ( VAR_123 != ( * VAR_124 ) ) { METHOD_36 ( * VAR_125 ) ; METHOD_37 ( * VAR_126 ) ; METHOD_38 ( * VAR_127 ) ; METHOD_39 ( VAR_128 ) ; * VAR_129 = 0 ; * VAR_130 = 0 ; * VAR_131 = 0 ; METHOD_40 ( VAR_132 , VAR_133 ) ; return ; } if ( VAR_134 != VAR_135 ) { for ( VAR_136 = 0 ; VAR_137 < ( * VAR_138 ) ; VAR_139 ++ ) { if ( VAR_140 [ VAR_141 ] == 0 ) { ( * VAR_142 ) [ VAR_143 + 1 ] = ( * VAR_144 ) [ VAR_145 ] ; } } METHOD_41 ( VAR_146 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { VAR_5 * VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 [ VAR_9 ] ; TYPE_8 VAR_10 [ VAR_11 ] ; TYPE_9 * VAR_12 ; TYPE_10 VAR_13 , VAR_14 ; METHOD_1 ( VAR_15 != VAR_16 && VAR_17 != VAR_18 && VAR_19 != VAR_20 ) ; VAR_21 = VAR_22 -> VAR_23 ; VAR_24 = ( VAR_25 -> VAR_26 == VAR_27 ) ; VAR_28 = ( TYPE_11 * ) VAR_29 -> VAR_30 ; METHOD_2 ( VAR_31 ) ; METHOD_3 ( VAR_32 , "TCOS3:%dPKCS1:%d\\n" , VAR_33 , ! ! ( VAR_34 -> VAR_35 & VAR_36 ) ) ; METHOD_4 ( VAR_37 , & VAR_38 , VAR_39 > 255 ? VAR_40 : VAR_41 , 0x2A , 0x80 , 0x86 ) ; VAR_42 . VAR_43 = VAR_44 ; VAR_45 . VAR_46 = sizeof ( VAR_47 ) ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; VAR_54 . VAR_55 = VAR_56 . VAR_57 = VAR_58 + 1 ; VAR_59 [ 0 ] = VAR_60 ? 0x00 : ( ( VAR_61 -> VAR_62 & VAR_63 ) ? 0x81 : 0x02 ) ;  METHOD_5 ( VAR_64 + 1 , VAR_65 , VAR_66 ) ;  VAR_67 = METHOD_6 ( VAR_68 , & VAR_69 ) ; METHOD_7 ( VAR_70 -> VAR_71 , VAR_72 , "APDUtransmitfailed" ) ; if ( VAR_73 . VAR_74 == 0x90 && VAR_75 . VAR_76 == 0x00 ) { TYPE_12 VAR_77 = ( VAR_78 . VAR_79 > VAR_80 ) ? VAR_81 : VAR_82 . VAR_83 ; unsigned TYPE_13 VAR_84 = 0 ; if ( VAR_85 && ( VAR_86 -> VAR_87 & VAR_88 ) && VAR_89 . VAR_90 [ 0 ] == 0 && VAR_91 . VAR_92 [ 1 ] == 2 ) { VAR_93 = 2 ; while ( VAR_94 < VAR_95 && VAR_96 . VAR_97 [ VAR_98 ] != 0 ) ++ VAR_99 ; VAR_100 = ( VAR_101 < VAR_102 - 1 ) ? VAR_103 + 1 : 0 ; } METHOD_8 ( VAR_104 , VAR_105 . VAR_106 + VAR_107 , VAR_108 - VAR_109 ) ; METHOD_9 ( VAR_110 -> VAR_111 , VAR_112 , VAR_113 - VAR_114 ) ; } METHOD_10 ( VAR_115 -> VAR_116 , VAR_117 , METHOD_11 ( VAR_118 , VAR_119 . VAR_120 , VAR_121 . VAR_122 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 ;  TYPE_3 VAR_3 ;   TYPE_4 VAR_4 ;  TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; METHOD_2 ( VAR_7 , VAR_8 , "%s()" , VAR_9 ) ; VAR_10 = METHOD_3 ( & VAR_11 , & VAR_12 ) ; if ( VAR_13 == VAR_14 ) return VAR_15 ;  METHOD_4 ( VAR_16 , VAR_17 , & VAR_18 ) ;  METHOD_5 ( VAR_19 , VAR_20 , & VAR_21 ) ; METHOD_6 ( VAR_22 , VAR_23 ) ; if ( VAR_24 != 0 ) { METHOD_7 ( VAR_25 , VAR_26 , "mcs_recv_connect_response(),result=%d" , VAR_27 ) ; return VAR_28 ; } METHOD_8 ( VAR_29 , VAR_30 , & VAR_31 ) ; METHOD_9 ( VAR_32 , VAR_33 ) ;  METHOD_10 ( VAR_34 ) ;  METHOD_11 ( VAR_35 , VAR_36 , & VAR_37 ) ; METHOD_12 ( VAR_38 ) ; return METHOD_13 ( VAR_39 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 * * VAR_3 ) { TYPE_4 * VAR_4 = 0 ; TYPE_5 * VAR_5 = VAR_6 ; TYPE_6 * VAR_7 = 0 ; TYPE_7 * VAR_8 = VAR_9 ; TYPE_8 * VAR_10 = VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; TYPE_11 VAR_14 , * VAR_15 = 0 ; TYPE_12 VAR_16 = 0 ; TYPE_13 VAR_17 ; TYPE_14 VAR_18 = 0 ; TYPE_15 VAR_19 = 0 ; TYPE_16 VAR_20 ; TYPE_17 VAR_21 , VAR_22 = 0 ; TYPE_18 VAR_23 ; TYPE_19 * VAR_24 = VAR_25 ; VAR_26 * VAR_27 ; TYPE_20 VAR_28 = VAR_29 , VAR_30 = VAR_31 , VAR_32 = VAR_33 ; VAR_34 * VAR_35 [ 2 ] , VAR_36 ; TYPE_21 VAR_37 ; const TYPE_22 * VAR_38 = 0 ; TYPE_23 * VAR_39 = VAR_40 ; TYPE_24 * VAR_41 = VAR_42 ; TYPE_25 * VAR_43 = VAR_44 , * VAR_45 = VAR_46 ; TYPE_26 * VAR_47 , * VAR_48 = VAR_49 ; TYPE_27 * VAR_50 = VAR_51 ; TYPE_28 * * VAR_52 = VAR_53 ; unsigned TYPE_29 VAR_54 = 0 , VAR_55 = 0 ; TYPE_30 VAR_56 ; const TYPE_31 * VAR_57 = VAR_58 ; TYPE_32 VAR_59 = 0 ; struct STRUCT_OR_UNION_1 * VAR_60 = VAR_61 ; TYPE_33 * VAR_62 ; TYPE_34 VAR_63 ; TYPE_35 * * VAR_64 = VAR_65 ; TYPE_36 * VAR_66 = VAR_67 ; TYPE_37 * VAR_68 = VAR_69 ; TYPE_38 * * VAR_70 = VAR_71 ; METHOD_1 ( & VAR_72 , 0 , sizeof ( VAR_73 ) ) ; METHOD_2 ( & VAR_74 , 0 , sizeof ( VAR_75 ) ) ; METHOD_3 ( & VAR_76 , 0 , sizeof ( VAR_77 ) ) ; METHOD_4 ( & VAR_78 , 0 , sizeof ( VAR_79 ) ) ; VAR_80 . VAR_81 = VAR_82 ; VAR_83 = METHOD_5 ( VAR_84 , & VAR_85 ) ; if ( VAR_86 ) return VAR_87 ; VAR_88 = VAR_89 -> VAR_90 ; if ( VAR_91 -> VAR_92 != VAR_93 ) { METHOD_6 ( VAR_94 -> VAR_95 , VAR_96 ) ; return VAR_97 ; } VAR_98 = METHOD_7 ( VAR_99 , VAR_100 -> VAR_101 ) ; if ( VAR_102 == VAR_103 ) { METHOD_8 ( VAR_104 -> VAR_105 , VAR_106 ) ; return VAR_107 ; } VAR_108 = METHOD_9 ( VAR_109 , & VAR_110 ) ; if ( VAR_111 != 0 ) { METHOD_10 ( VAR_112 -> VAR_113 , VAR_114 ) ; return VAR_115 ; } VAR_116 = METHOD_11 ( VAR_117 , VAR_118 , VAR_119 , & VAR_120 ) ; if ( VAR_121 ) { METHOD_12 ( VAR_122 -> VAR_123 , VAR_124 ) ; return VAR_125 ; } METHOD_13 ( VAR_126 , VAR_127 , VAR_128 ) ; VAR_129 = METHOD_14 ( VAR_130 , VAR_131 , VAR_132 , VAR_133 , & VAR_134 , & VAR_135 , & VAR_136 , & VAR_137 , & VAR_138 ) ; if ( VAR_139 && VAR_140 -> VAR_141 ) VAR_142 = VAR_143 -> VAR_144 -> VAR_145 ; if ( VAR_146 ) { VAR_147 = "PROCESS_TGS" ; goto VAR_148 ; } if ( ! VAR_149 ) { VAR_150 = VAR_151 ; VAR_152 = "UNEXPECTEDNULLinheader_ticket" ; goto VAR_153 ; } VAR_154 = METHOD_15 ( VAR_155 , VAR_156 , & VAR_157 -> VAR_158 ) ; if ( VAR_159 ) { VAR_160 = "GENERATE_TICKET_ID" ; goto VAR_161 ; } VAR_162 . VAR_163 = VAR_164 -> VAR_165 ; VAR_166 . VAR_167 = ( TYPE_39 * ) VAR_168 -> VAR_169 ; VAR_170 = METHOD_16 ( & VAR_171 , & VAR_172 , VAR_173 , VAR_174 -> VAR_175 -> VAR_176 , VAR_177 , VAR_178 ) ; VAR_179 = VAR_180 -> VAR_181 ; if ( VAR_182 != 0 ) { VAR_183 = "FIND_FAST" ; goto VAR_184 ; } VAR_185 = METHOD_17 ( VAR_186 , & VAR_187 -> VAR_188 , VAR_189 , & VAR_190 , & VAR_191 ) ; if ( VAR_192 ) { VAR_193 = "GET_LOCAL_TGT" ; goto VAR_194 ; } VAR_195 -> VAR_196 = VAR_197 ; VAR_198 = VAR_199 -> VAR_200 ; VAR_201 -> VAR_202 = VAR_203 ; METHOD_18 ( VAR_204 , VAR_205 ) ; if ( METHOD_19 ( VAR_206 -> VAR_207 , VAR_208 ) ) { METHOD_20 ( VAR_209 , VAR_210 ) ; METHOD_21 ( VAR_211 , VAR_212 ) ; } VAR_213 = METHOD_22 ( VAR_214 , VAR_215 , VAR_216 , & VAR_217 , & VAR_218 ) ; if ( VAR_219 != 0 ) goto VAR_220 ; VAR_221 = VAR_222 -> VAR_223 ; VAR_224 = METHOD_23 ( VAR_225 -> VAR_226 ) && ! METHOD_24 ( VAR_227 , VAR_228 -> VAR_229 , VAR_230 -> VAR_231 ) ; VAR_232 -> VAR_233 = VAR_234 ; if ( ( VAR_235 = METHOD_25 ( VAR_236 , & VAR_237 ) ) ) { VAR_238 = "TIME_OF_DAY" ; goto VAR_239 ; } if ( ( VAR_240 = METHOD_26 ( VAR_241 , VAR_242 , * VAR_243 , VAR_244 , VAR_245 , & VAR_246 , & VAR_247 ) ) ) { if ( ! VAR_248 ) VAR_249 = "UNKNOWN_REASON" ; if ( VAR_250 == VAR_251 || VAR_252 == VAR_253 ) VAR_254 -> VAR_255 = VAR_256 ; VAR_257 = VAR_258 + VAR_259 ; goto VAR_260 ; } if ( ! METHOD_27 ( VAR_261 , VAR_262 -> VAR_263 ) ) METHOD_28 ( VAR_264 , VAR_265 ) ; VAR_266 = METHOD_29 ( VAR_267 , VAR_268 , VAR_269 -> VAR_270 , VAR_271 , VAR_272 , VAR_273 -> VAR_274 , VAR_275 , & VAR_276 , & VAR_277 , & VAR_278 ) ; if ( VAR_279 != VAR_280 || VAR_281 != 0 ) { if ( VAR_282 != VAR_283 ) VAR_284 -> VAR_285 = VAR_286 -> VAR_287 . VAR_288 ; if ( VAR_289 == VAR_290 || VAR_291 == VAR_292 ) VAR_293 -> VAR_294 = VAR_295 ; VAR_296 -> VAR_297 = VAR_298 ; METHOD_30 ( VAR_299 , VAR_300 ? VAR_301 : VAR_302 , VAR_303 ) ; VAR_304 -> VAR_305 = VAR_306 ; } if ( VAR_307 ) goto VAR_308 ; if ( VAR_309 != VAR_310 ) { METHOD_31 ( VAR_311 , VAR_312 ) ; if ( VAR_313 ) { VAR_314 = VAR_315 ; VAR_316 = "LOOKING_UP_SERVER" ; goto VAR_317 ; } } VAR_318 = METHOD_32 ( VAR_319 , VAR_320 , VAR_321 , & VAR_322 , & VAR_323 ) ; if ( VAR_324 ) goto VAR_325 ; if ( METHOD_33 ( VAR_326 -> VAR_327 , VAR_328 ) ) { VAR_329 = METHOD_34 ( VAR_330 , VAR_331 , VAR_332 -> VAR_333 [ VAR_334 ] -> VAR_335 , VAR_336 , VAR_337 -> VAR_338 -> VAR_339 , VAR_340 -> VAR_341 , & VAR_342 ) ; if ( VAR_343 == VAR_344 || VAR_345 == VAR_346 ) VAR_347 -> VAR_348 = VAR_349 ; else if ( VAR_350 ) VAR_351 -> VAR_352 = VAR_353 ; VAR_354 -> VAR_355 = VAR_356 ; VAR_357 = METHOD_35 ( VAR_358 , VAR_359 -> VAR_360 [ VAR_361 ] , & VAR_362 -> VAR_363 ) ; if ( VAR_364 ) { VAR_365 = "GENERATE_TICKET_ID" ; VAR_366 = VAR_367 ; goto VAR_368 ; } METHOD_36 ( VAR_369 , VAR_370 ? VAR_371 : VAR_372 , VAR_373 ) ; if ( VAR_374 ) goto VAR_375 ; METHOD_37 ( VAR_376 , VAR_377 ) ; METHOD_38 ( METHOD_39 ( VAR_378 -> VAR_379 ) ) ; METHOD_40 ( VAR_380 == VAR_381 ) ; VAR_382 = VAR_383 ; VAR_384 = VAR_385 ; } else if ( VAR_386 -> VAR_387 & VAR_388 ) { METHOD_41 ( VAR_389 , VAR_390 ) ; VAR_391 = VAR_392 ; } else METHOD_42 ( VAR_393 == VAR_394 ) ; VAR_395 -> VAR_396 = VAR_397 ; VAR_398 = METHOD_43 ( VAR_399 , VAR_400 , VAR_401 , & VAR_402 , & VAR_403 ) ; if ( VAR_404 ) goto VAR_405 ; if ( METHOD_44 ( VAR_406 , VAR_407 ) ) VAR_408 = VAR_409 -> VAR_410 [ VAR_411 ] -> VAR_412 ; else VAR_413 = VAR_414 ; VAR_415 = VAR_416 -> VAR_417 . VAR_418 ; if ( VAR_419 == VAR_420 ) { VAR_421 = METHOD_45 ( VAR_422 , VAR_423 , VAR_424 , & VAR_425 ) ; if ( VAR_426 ) { VAR_427 = "GET_AUTH_INDICATORS" ; goto VAR_428 ; } } VAR_429 = METHOD_46 ( VAR_430 , VAR_431 , VAR_432 ) ; if ( VAR_433 ) { VAR_434 = "HIGHER_AUTHENTICATION_REQUIRED" ; goto VAR_435 ; } if ( VAR_436 ) VAR_437 . VAR_438 = VAR_439 -> VAR_440 ; else VAR_441 . VAR_442 = VAR_443 -> VAR_444 ; VAR_445 . VAR_446 = METHOD_47 ( VAR_447 -> VAR_448 ) ; VAR_449 . VAR_450 |= METHOD_48 ( VAR_451 -> VAR_452 ) ; VAR_453 . VAR_454 . VAR_455 = 0 ; if ( METHOD_49 ( VAR_456 -> VAR_457 , VAR_458 ) ) METHOD_50 ( VAR_459 . VAR_460 , VAR_461 ) ; METHOD_51 ( VAR_462 . VAR_463 , VAR_464 ) ; VAR_465 . VAR_466 = VAR_467 -> VAR_468 ; VAR_469 . VAR_470 = 0 ; VAR_471 . VAR_472 = VAR_473 ; if ( METHOD_52 ( VAR_474 -> VAR_475 , VAR_476 ) ) { if ( METHOD_53 ( VAR_477 , VAR_478 ) ) { if ( VAR_479 != VAR_480 && METHOD_54 ( VAR_481 -> VAR_482 , VAR_483 ) ) METHOD_55 ( VAR_484 . VAR_485 , VAR_486 ) ; else if ( ! METHOD_56 ( VAR_487 -> VAR_488 , VAR_489 ) ) METHOD_57 ( VAR_490 . VAR_491 , VAR_492 ) ; else if ( ! VAR_493 && ! METHOD_58 ( VAR_494 -> VAR_495 , VAR_496 ) ) METHOD_59 ( VAR_497 . VAR_498 , VAR_499 ) ; } } if ( METHOD_60 ( VAR_500 -> VAR_501 , VAR_502 ) || METHOD_61 ( VAR_503 -> VAR_504 , VAR_505 ) ) { VAR_506 . VAR_507 = VAR_508 -> VAR_509 ; VAR_510 . VAR_511 = VAR_512 -> VAR_513 ; } if ( METHOD_62 ( VAR_514 -> VAR_515 , VAR_516 ) && ! METHOD_63 ( VAR_517 -> VAR_518 , VAR_519 ) ) METHOD_64 ( VAR_520 . VAR_521 , VAR_522 ) ; if ( METHOD_65 ( VAR_523 -> VAR_524 , VAR_525 ) ) { METHOD_66 ( VAR_526 . VAR_527 , VAR_528 ) ; VAR_529 . VAR_530 . VAR_531 = VAR_532 -> VAR_533 ; } else VAR_534 . VAR_535 . VAR_536 = VAR_537 ; if ( METHOD_67 ( VAR_538 -> VAR_539 , VAR_540 ) ) { METHOD_68 ( METHOD_69 ( VAR_541 , VAR_542 ) == 0 ) ; VAR_543 = * ( VAR_544 ) ; VAR_545 = * ( VAR_546 -> VAR_547 ) ; VAR_548 . VAR_549 = VAR_550 ; METHOD_70 ( VAR_551 . VAR_552 , VAR_553 ) ; } if ( METHOD_71 ( VAR_554 -> VAR_555 , VAR_556 ) ) { TYPE_40 VAR_557 ; TYPE_41 VAR_558 ; METHOD_72 ( METHOD_73 ( VAR_559 , VAR_560 ) == 0 ) ; VAR_561 = * ( VAR_562 ) ; VAR_563 = * ( VAR_564 -> VAR_565 ) ; VAR_566 . VAR_567 = VAR_568 ; VAR_569 = VAR_570 . VAR_571 . VAR_572 ? VAR_573 . VAR_574 . VAR_575 : VAR_576 . VAR_577 . VAR_578 ; VAR_579 = METHOD_74 ( VAR_580 . VAR_581 . VAR_582 , VAR_583 ) ; VAR_584 . VAR_585 . VAR_586 = VAR_587 ; VAR_588 . VAR_589 . VAR_590 = METHOD_75 ( VAR_591 -> VAR_592 -> VAR_593 . VAR_594 , METHOD_76 ( VAR_595 , VAR_596 ) ) ; } else { VAR_597 . VAR_598 . VAR_599 = VAR_600 ; METHOD_77 ( VAR_601 , VAR_602 . VAR_603 . VAR_604 , VAR_605 -> VAR_606 . VAR_607 , VAR_608 -> VAR_609 , VAR_610 , VAR_611 , & VAR_612 . VAR_613 . VAR_614 ) ; } METHOD_78 ( VAR_615 , VAR_616 , VAR_617 , VAR_618 , VAR_619 , & VAR_620 ) ; VAR_621 . VAR_622 . VAR_623 = VAR_624 ; if ( VAR_625 . VAR_626 . VAR_627 == VAR_628 . VAR_629 . VAR_630 ) VAR_631 . VAR_632 . VAR_633 = 0 ; if ( METHOD_79 ( VAR_634 , VAR_635 ) ) { VAR_636 = VAR_637 -> VAR_638 . VAR_639 ; } else if ( METHOD_80 ( VAR_640 , VAR_641 ) ) { VAR_642 = VAR_643 -> VAR_644 ; } else { VAR_645 = VAR_646 ; } if ( METHOD_81 ( VAR_647 -> VAR_648 , VAR_649 ) ) { TYPE_42 * VAR_650 = VAR_651 -> VAR_652 [ VAR_653 ] -> VAR_654 ; VAR_655 = * ( VAR_656 -> VAR_657 ) ; } else { if ( ( VAR_658 = METHOD_82 ( VAR_659 , VAR_660 , - 1 , - 1 , 0 , & VAR_661 ) ) ) { VAR_662 = "FINDING_SERVER_KEY" ; goto VAR_663 ; } if ( ( VAR_664 = METHOD_83 ( VAR_665 , VAR_666 , VAR_667 , & VAR_668 , VAR_669 ) ) ) { VAR_670 = "DECRYPT_SERVER_KEY" ; goto VAR_671 ; } } if ( METHOD_84 ( VAR_672 , VAR_673 ) ) { METHOD_85 ( VAR_674 -> VAR_675 , VAR_676 ) ; } if ( METHOD_86 ( VAR_677 -> VAR_678 , VAR_679 ) == 0 ) { if ( ! METHOD_87 ( VAR_680 , VAR_681 ) ) { METHOD_88 ( VAR_682 , VAR_683 ) ; METHOD_89 ( VAR_684 , VAR_685 ) ; METHOD_90 ( VAR_686 == VAR_687 ) ; VAR_688 = METHOD_91 ( VAR_689 , VAR_690 -> VAR_691 , VAR_692 , & VAR_693 ) ; } } if ( METHOD_92 ( VAR_694 , VAR_695 ) && ! METHOD_93 ( VAR_696 , VAR_697 ) ) VAR_698 . VAR_699 = VAR_700 -> VAR_701 . VAR_702 ; else VAR_703 . VAR_704 = VAR_705 -> VAR_706 ; VAR_707 . VAR_708 = & VAR_709 ; VAR_710 . VAR_711 . VAR_712 = VAR_713 ; VAR_714 . VAR_715 . VAR_716 = VAR_717 ; if ( METHOD_94 ( VAR_718 , VAR_719 -> VAR_720 , VAR_721 ) || METHOD_95 ( VAR_722 , VAR_723 -> VAR_724 , VAR_725 . VAR_726 ) ) { VAR_727 . VAR_728 = VAR_729 -> VAR_730 ; } else { if ( VAR_731 -> VAR_732 . VAR_733 != VAR_734 ) { VAR_735 = "VALIDATE_TRANSIT_TYPE" ; VAR_736 = VAR_737 ; goto VAR_738 ; } METHOD_96 ( & VAR_739 . VAR_740 , 0 , sizeof ( VAR_741 . VAR_742 ) ) ; VAR_743 . VAR_744 . VAR_745 = VAR_746 ; if ( ( VAR_747 = METHOD_97 ( & VAR_748 -> VAR_749 . VAR_750 , & VAR_751 . VAR_752 . VAR_753 , VAR_754 -> VAR_755 , VAR_756 . VAR_757 , VAR_758 -> VAR_759 ) ) ) { VAR_760 = "ADD_TO_TRANSITED_LIST" ; goto VAR_761 ; } VAR_762 = 1 ; } if ( METHOD_98 ( VAR_763 , VAR_764 ) ) { VAR_765 = METHOD_99 ( VAR_766 , VAR_767 -> VAR_768 , VAR_769 , VAR_770 ) ; if ( VAR_771 ) { VAR_772 = "NON_TRANSITIVE" ; goto VAR_773 ; } } if ( ! METHOD_100 ( VAR_774 -> VAR_775 , VAR_776 ) ) { VAR_777 = METHOD_101 ( VAR_778 , & VAR_779 . VAR_780 . VAR_781 , METHOD_102 ( VAR_782 , VAR_783 -> VAR_784 ) , METHOD_103 ( VAR_785 , VAR_786 -> VAR_787 ) ) ; if ( VAR_788 == 0 ) { METHOD_104 ( VAR_789 . VAR_790 , VAR_791 ) ; } else { METHOD_105 ( VAR_792 , VAR_793 , VAR_794 , & VAR_795 . VAR_796 . VAR_797 , VAR_798 ) ; } } else METHOD_106 ( VAR_799 , METHOD_107 ( "notcheckingtransitpath" ) ) ; if ( VAR_800 -> VAR_801 && ! METHOD_108 ( VAR_802 . VAR_803 , VAR_804 ) ) { VAR_805 = VAR_806 ; VAR_807 = "BAD_TRANSIT" ; VAR_808 -> VAR_809 = VAR_810 ; goto VAR_811 ; } VAR_812 = METHOD_109 ( VAR_813 , VAR_814 , VAR_815 , VAR_816 , VAR_817 , VAR_818 , VAR_819 != VAR_820 ? VAR_821 : VAR_822 -> VAR_823 -> VAR_824 , & VAR_825 , VAR_826 , VAR_827 , VAR_828 , VAR_829 ? VAR_830 -> VAR_831 . VAR_832 : VAR_833 , VAR_834 , VAR_835 , & VAR_836 ) ; if ( VAR_837 ) { METHOD_110 ( VAR_838 , METHOD_111 ( "TGS_REQ:handle_authdata(%d)" ) , VAR_839 ) ; VAR_840 = "HANDLE_AUTHDATA" ; goto VAR_841 ; } VAR_842 . VAR_843 = & VAR_844 ; if ( METHOD_112 ( VAR_845 -> VAR_846 , VAR_847 ) ) { TYPE_43 * VAR_848 = VAR_849 -> VAR_850 [ VAR_851 ] -> VAR_852 ; TYPE_44 VAR_853 = VAR_854 -> VAR_855 ; if ( ! METHOD_113 ( VAR_856 , VAR_857 -> VAR_858 , VAR_859 ) ) { VAR_860 = VAR_861 ; VAR_862 = VAR_863 ; VAR_864 = "2ND_TKT_MISMATCH" ; VAR_865 -> VAR_866 = VAR_867 ; METHOD_114 ( VAR_868 , VAR_869 , VAR_870 ) ; goto VAR_871 ; } VAR_872 = 0 ; VAR_873 . VAR_874 . VAR_875 = VAR_876 -> VAR_877 -> VAR_878 ; METHOD_115 ( VAR_879 , VAR_880 , VAR_881 ) ; VAR_882 ++ ; } else { VAR_883 = VAR_884 -> VAR_885 ; } VAR_886 = METHOD_116 ( VAR_887 , & VAR_888 , & VAR_889 ) ; if ( ! METHOD_117 ( VAR_890 -> VAR_891 , VAR_892 ) ) METHOD_118 ( VAR_893 , & VAR_894 ) ; if ( VAR_895 ) { VAR_896 = "ENCRYPT_TICKET" ; goto VAR_897 ; } VAR_898 . VAR_899 . VAR_900 = VAR_901 ; VAR_902 -> VAR_903 = VAR_904 ; VAR_905 . VAR_906 = VAR_907 ; if ( METHOD_119 ( VAR_908 , VAR_909 ) && METHOD_120 ( VAR_910 , VAR_911 -> VAR_912 , VAR_913 ) != VAR_914 ) { VAR_915 = METHOD_121 ( VAR_916 , VAR_917 , VAR_918 -> VAR_919 -> VAR_920 , VAR_921 , & VAR_922 , & VAR_923 ) ; if ( VAR_924 ) { VAR_925 = "MAKE_S4U2SELF_PADATA" ; VAR_926 -> VAR_927 = VAR_928 ; } METHOD_122 ( VAR_929 , VAR_930 ? VAR_931 : VAR_932 , VAR_933 ) ; if ( VAR_934 ) goto VAR_935 ; } VAR_936 . VAR_937 = VAR_938 . VAR_939 ; VAR_940 . VAR_941 . VAR_942 = 0 ; VAR_943 . VAR_944 = & VAR_945 ; VAR_946 . VAR_947 = & VAR_948 ; VAR_949 . VAR_950 = VAR_951 -> VAR_952 ; VAR_953 . VAR_954 = VAR_955 . VAR_956 ; VAR_957 . VAR_958 = VAR_959 ; VAR_960 . VAR_961 = 0 ; VAR_962 . VAR_963 = 0 ; VAR_964 [ 0 ] = & VAR_965 ; VAR_966 [ 1 ] = 0 ; VAR_967 . VAR_968 = VAR_969 ; VAR_970 . VAR_971 = 0 ; VAR_972 . VAR_973 = VAR_974 . VAR_975 ; VAR_976 . VAR_977 = VAR_978 . VAR_979 ; VAR_980 . VAR_981 . VAR_982 = VAR_983 ? VAR_984 -> VAR_985 : VAR_986 -> VAR_987 -> VAR_988 -> VAR_989 ; VAR_990 = METHOD_123 ( VAR_991 , VAR_992 , & VAR_993 , VAR_994 ? VAR_995 -> VAR_996 : VAR_997 -> VAR_998 -> VAR_999 -> VAR_1000 ) ; if ( VAR_1001 != 0 ) { VAR_1002 = "MAKE_FAST_RESPONSE" ; goto VAR_1003 ; } VAR_1004 = METHOD_124 ( VAR_1005 , VAR_1006 ? VAR_1007 : VAR_1008 -> VAR_1009 -> VAR_1010 , & VAR_1011 ) ; if ( VAR_1012 ) { VAR_1013 = "MAKE_FAST_REPLY_KEY" ; goto VAR_1014 ; } VAR_1015 = METHOD_125 ( VAR_1016 , VAR_1017 , VAR_1018 , VAR_1019 , VAR_1020 , & VAR_1021 , VAR_1022 && METHOD_126 ( VAR_1023 , VAR_1024 ) ) ; if ( VAR_1025 ) { VAR_1026 = "KDC_RETURN_ENC_PADATA" ; goto VAR_1027 ; } VAR_1028 = METHOD_127 ( VAR_1029 , & VAR_1030 , & VAR_1031 -> VAR_1032 ) ; if ( VAR_1033 ) { VAR_1034 = "GENERATE_TICKET_ID" ; goto VAR_1035 ; } if ( METHOD_128 ( VAR_1036 ) ) VAR_1037 . VAR_1038 = ( TYPE_45 ) METHOD_129 ( ) ; VAR_1039 = METHOD_130 ( VAR_1040 , VAR_1041 , & VAR_1042 , VAR_1043 ? 1 : 0 , VAR_1044 , & VAR_1045 , VAR_1046 ) ; if ( VAR_1047 ) { VAR_1048 = "ENCODE_KDC_REP" ; } else { VAR_1049 = "ISSUE" ; } METHOD_131 ( VAR_1050 . VAR_1051 . VAR_1052 . VAR_1053 , 0 , VAR_1054 . VAR_1055 . VAR_1056 . VAR_1057 ) ; METHOD_132 ( VAR_1058 . VAR_1059 . VAR_1060 . VAR_1061 ) ; METHOD_133 ( VAR_1062 . VAR_1063 . VAR_1064 . VAR_1065 , 0 , VAR_1066 . VAR_1067 . VAR_1068 . VAR_1069 ) ; METHOD_134 ( VAR_1070 . VAR_1071 . VAR_1072 . VAR_1073 ) ; VAR_1074 :  METHOD_135 ( VAR_1075 != VAR_1076 ) ;  if ( VAR_1077 ) METHOD_136 ( VAR_1078 , VAR_1079 ) ; if ( VAR_1080 ) VAR_1081 = METHOD_137 ( VAR_1082 , VAR_1083 ) ; VAR_1084 -> VAR_1085 = VAR_1086 ; if ( ! VAR_1087 ) VAR_1088 -> VAR_1089 = & VAR_1090 ; METHOD_138 ( VAR_1091 , VAR_1092 ? VAR_1093 : VAR_1094 , VAR_1095 ) ; METHOD_139 ( VAR_1096 ) ; METHOD_140 ( VAR_1097 , VAR_1098 , VAR_1099 , & VAR_1100 , VAR_1101 , VAR_1102 , VAR_1103 , VAR_1104 , VAR_1105 , VAR_1106 , VAR_1107 , VAR_1108 ) ; if ( VAR_1109 ) { METHOD_141 ( VAR_1110 , VAR_1111 ) ; VAR_1112 = VAR_1113 ; } if ( VAR_1114 ) { TYPE_46 VAR_1115 = 0 ; if ( VAR_1116 == 0 ) { VAR_1117 = METHOD_142 ( VAR_1118 , VAR_1119 ) ; VAR_1120 = 1 ; } VAR_1121 -= VAR_1122 ; if ( VAR_1123 < 0 || VAR_1124 > VAR_1125 ) VAR_1126 = VAR_1127 ; VAR_1128 = METHOD_143 ( VAR_1129 , VAR_1130 , VAR_1131 , VAR_1132 , ( VAR_1133 != VAR_1134 ) ? VAR_1135 -> VAR_1136 : VAR_1137 , VAR_1138 , VAR_1139 , VAR_1140 ) ; if ( VAR_1141 ) { METHOD_144 ( VAR_1142 , VAR_1143 ) ; VAR_1144 = 0 ; } } if ( VAR_1145 != VAR_1146 ) METHOD_145 ( VAR_1147 , VAR_1148 ) ; if ( VAR_1149 != VAR_1150 ) METHOD_146 ( VAR_1151 , VAR_1152 ) ; if ( VAR_1153 ) METHOD_147 ( VAR_1154 ) ; METHOD_148 ( VAR_1155 , VAR_1156 ) ; METHOD_149 ( VAR_1157 , VAR_1158 ) ; METHOD_150 ( VAR_1159 , VAR_1160 ) ; METHOD_151 ( VAR_1161 , VAR_1162 ) ; METHOD_152 ( VAR_1163 , VAR_1164 ) ; if ( VAR_1165 . VAR_1166 != VAR_1167 ) METHOD_153 ( VAR_1168 , & VAR_1169 ) ; if ( VAR_1170 ) METHOD_154 ( VAR_1171 . VAR_1172 . VAR_1173 . VAR_1174 ) ; if ( VAR_1175 != VAR_1176 ) METHOD_155 ( VAR_1177 , VAR_1178 ) ; if ( VAR_1179 != VAR_1180 ) METHOD_156 ( VAR_1181 , VAR_1182 ) ; if ( VAR_1183 != VAR_1184 ) METHOD_157 ( VAR_1185 , VAR_1186 ) ; if ( VAR_1187 != VAR_1188 ) METHOD_158 ( VAR_1189 , VAR_1190 ) ; if ( VAR_1191 . VAR_1192 ) METHOD_159 ( VAR_1193 , VAR_1194 . VAR_1195 ) ; if ( VAR_1196 . VAR_1197 ) METHOD_160 ( VAR_1198 , VAR_1199 . VAR_1200 ) ; if ( VAR_1201 . VAR_1202 != VAR_1203 ) METHOD_161 ( VAR_1204 , VAR_1205 . VAR_1206 ) ; METHOD_162 ( VAR_1207 , VAR_1208 ) ; METHOD_163 ( VAR_1209 ) ; return VAR_1210 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_1 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = & VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_4 VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; struct STRUCT_OR_UNION_5 * VAR_14 ; TYPE_4 VAR_15 , VAR_16 , VAR_17 = 0 ; TYPE_5 VAR_18 = 0 ; if ( VAR_19 -> VAR_20 != VAR_21 || ! VAR_22 ) return - VAR_23 ; VAR_24 = VAR_25 -> VAR_26 - ( VAR_27 * VAR_28 ) ; VAR_29 = METHOD_1 ( METHOD_2 ( VAR_30 ) - 1 ) ; VAR_31 = ( VAR_32 << VAR_33 ) | ( VAR_34 << VAR_35 ) ; VAR_36 = VAR_37 ; VAR_38 |= VAR_39 ; METHOD_3 ( & VAR_40 , 0 , sizeof ( VAR_41 ) ) ; VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; VAR_46 . VAR_47 = VAR_48 -> VAR_49 -> VAR_50 . VAR_51 ; VAR_52 . VAR_53 = 0 ; VAR_54 . VAR_55 = VAR_56 -> VAR_57 ; VAR_58 . VAR_59 = VAR_60 -> VAR_61 ; VAR_62 . VAR_63 . VAR_64 [ 0 ] = METHOD_4 ( VAR_65 ) ; VAR_66 . VAR_67 . VAR_68 |= METHOD_5 ( VAR_69 ) ; VAR_70 . VAR_71 . VAR_72 [ 0 ] = METHOD_6 ( VAR_73 -> VAR_74 ) ; VAR_75 . VAR_76 . VAR_77 |= METHOD_7 ( VAR_78 ) ; VAR_79 -> VAR_80 = METHOD_8 ( TYPE_6 , VAR_81 , VAR_82 ) ; VAR_83 = METHOD_9 ( VAR_84 ) ; if ( VAR_85 ) { METHOD_10 ( & VAR_86 -> VAR_87 -> VAR_88 , "FailedtoreconfigRSSfornum_queues(%u)\\n" , VAR_89 -> VAR_90 ) ; return VAR_91 ; } VAR_92 -> VAR_93 = VAR_94 ; METHOD_11 ( & VAR_95 -> VAR_96 -> VAR_97 -> VAR_98 , "ReconfiguredRSSwithnum_queues(%u)\\n" , VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 - VAR_108 ; VAR_109 = METHOD_12 ( VAR_110 , & VAR_111 , VAR_112 ) ; if ( VAR_113 ) { METHOD_13 ( & VAR_114 -> VAR_115 -> VAR_116 , "Updatevsitcconfigfailed,err%saq_err%s\\n" , METHOD_14 ( VAR_117 , VAR_118 ) , METHOD_15 ( VAR_119 , VAR_120 -> VAR_121 . VAR_122 ) ) ; return VAR_123 ; } METHOD_16 ( VAR_124 , & VAR_125 ) ; VAR_126 -> VAR_127 . VAR_128 = 0 ; METHOD_17 ( & VAR_129 -> VAR_130 ) ; for ( VAR_131 = 0 ; VAR_132 < VAR_133 ; VAR_134 ++ ) { VAR_135 = METHOD_18 ( sizeof ( * VAR_136 ) , VAR_137 ) ; if ( ! VAR_138 ) { VAR_139 = - VAR_140 ; goto VAR_141 ; } METHOD_19 ( & VAR_142 -> VAR_143 ) ; VAR_144 -> VAR_145 = VAR_146 ; if ( ! METHOD_20 ( VAR_147 , VAR_148 , VAR_149 ) ) { VAR_150 = - VAR_151 ;  goto VAR_152 ;  } VAR_153 -> VAR_154 = VAR_155 ; VAR_156 -> VAR_157 -= VAR_158 -> VAR_159 ; VAR_160 -> VAR_161 ++ ; METHOD_21 ( & VAR_162 -> VAR_163 , & VAR_164 -> VAR_165 ) ; } return VAR_166 ; VAR_167 : METHOD_22 ( & VAR_168 -> VAR_169 -> VAR_170 , "Failedtosetupmacvlans\\n" ) ; METHOD_23 ( VAR_171 ) ; return VAR_172 ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 * VAR_2 ) {  if ( * VAR_3 >= 17 && VAR_4 [ 11 ] == 0x3c && VAR_5 [ 12 ] == 0x02 ) {  METHOD_1 ( VAR_6 , "fixingupCherryCymotionreportdescriptor\\n" ) ; VAR_7 [ 11 ] = VAR_8 [ 16 ] = 0xff ; VAR_9 [ 12 ] = VAR_10 [ 17 ] = 0x03 ; } return VAR_11 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 , TYPE_5 VAR_3 , struct STRUCT_OR_UNION_2 * VAR_4 , struct STRUCT_OR_UNION_3 * VAR_5 ) { struct STRUCT_OR_UNION_4 * VAR_6 = STRUCT_OR_UNION_5 -> VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_7 VAR_11 ; unsigned VAR_12 ; struct STRUCT_OR_UNION_8 VAR_13 ; TYPE_6 * VAR_14 = VAR_15 , * VAR_16 , * VAR_17 ; TYPE_7 VAR_18 ; if ( ( * VAR_19 != 0 ) || ( VAR_20 >= VAR_21 ) ) return - VAR_22 ; VAR_23 = METHOD_1 ( VAR_24 , VAR_25 ) ; if ( METHOD_2 ( VAR_26 ) ) return METHOD_3 ( VAR_27 ) ; METHOD_4 ( & VAR_28 ) ; METHOD_5 ( & VAR_29 , 0 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ; VAR_30 = - VAR_31 ; if ( VAR_32 -> VAR_33 != 0 ) goto VAR_34 ; if ( METHOD_6 ( VAR_35 ) && ! METHOD_7 ( STRUCT_OR_UNION_10 , VAR_36 , VAR_37 ) ) goto VAR_38 ; VAR_39 = - VAR_40 ; VAR_41 = VAR_42 ; for ( ; VAR_43 ; VAR_44 = VAR_45 ) { VAR_46 = METHOD_8 ( VAR_47 , '\\n' ) ; if ( VAR_48 ) { * VAR_49 = '\\0' ; VAR_50 ++ ; if ( * VAR_51 == '\\0' ) VAR_52 = VAR_53 ; } VAR_54 = METHOD_9 ( VAR_55 ) ; VAR_56 . VAR_57 = METHOD_10 ( VAR_58 , & VAR_59 , 10 ) ; if ( ! METHOD_11 ( * VAR_60 ) ) goto VAR_61 ; VAR_62 = METHOD_12 ( VAR_63 ) ; VAR_64 . VAR_65 = METHOD_13 ( VAR_66 , & VAR_67 , 10 ) ; if ( ! METHOD_14 ( * VAR_68 ) ) goto VAR_69 ; VAR_70 = METHOD_15 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 , & VAR_75 , 10 ) ; if ( * VAR_76 && ! METHOD_17 ( * VAR_77 ) ) goto VAR_78 ; VAR_79 = METHOD_18 ( VAR_80 ) ; if ( * VAR_81 != '\\0' ) goto VAR_82 ; if ( ( VAR_83 . VAR_84 == ( TYPE_8 ) - 1 ) || ( VAR_85 . VAR_86 == ( TYPE_9 ) - 1 ) ) goto VAR_87 ; if ( ( VAR_88 . VAR_89 + VAR_90 . VAR_91 ) <= VAR_92 . VAR_93 ) goto VAR_94 ; if ( ( VAR_95 . VAR_96 + VAR_97 . VAR_98 ) <= VAR_99 . VAR_100 ) goto VAR_101 ; if ( METHOD_19 ( & VAR_102 , & VAR_103 ) ) goto VAR_104 ; if ( ( VAR_105 . VAR_106 + 1 ) == VAR_107 && ( VAR_108 != VAR_109 ) ) goto VAR_110 ; VAR_111 = METHOD_20 ( & VAR_112 , & VAR_113 ) ; if ( VAR_114 < 0 ) goto VAR_115 ; VAR_116 = - VAR_117 ; } if ( VAR_118 . VAR_119 == 0 ) goto VAR_120 ; VAR_121 = - VAR_122 ;  if ( ! METHOD_21 ( STRUCT_OR_UNION_11 , VAR_123 , VAR_124 , & VAR_125 ) )  goto VAR_126 ; VAR_127 = METHOD_22 ( & VAR_128 ) ; if ( VAR_129 < 0 ) goto VAR_130 ; VAR_131 = - VAR_132 ; for ( VAR_133 = 0 ; VAR_134 < VAR_135 . VAR_136 ; VAR_137 ++ ) { struct STRUCT_OR_UNION_12 * VAR_138 ; TYPE_10 VAR_139 ; if ( VAR_140 . VAR_141 <= VAR_142 ) VAR_143 = & VAR_144 . VAR_145 [ VAR_146 ] ; else VAR_147 = & VAR_148 . VAR_149 [ VAR_150 ] ; VAR_151 = METHOD_23 ( VAR_152 , VAR_153 -> VAR_154 , VAR_155 -> VAR_156 ) ; if ( VAR_157 == ( TYPE_11 ) - 1 ) goto VAR_158 ; VAR_159 -> VAR_160 = VAR_161 ; }  if ( VAR_162 . VAR_163 <= VAR_164 ) {  METHOD_24 ( VAR_165 -> VAR_166 , VAR_167 . VAR_168 , VAR_169 . VAR_170 * sizeof ( VAR_171 . VAR_172 [ 0 ] ) ) ; } else { VAR_173 -> VAR_174 = VAR_175 . VAR_176 ; VAR_177 -> VAR_178 = VAR_179 . VAR_180 ; } METHOD_25 ( ) ; VAR_181 -> VAR_182 = VAR_183 . VAR_184 ; * VAR_185 = VAR_186 ; VAR_187 = VAR_188 ; VAR_189 : if ( VAR_190 < 0 && VAR_191 . VAR_192 > VAR_193 ) { METHOD_26 ( VAR_194 . VAR_195 ) ; METHOD_27 ( VAR_196 . VAR_197 ) ; VAR_198 -> VAR_199 = VAR_200 ; VAR_201 -> VAR_202 = VAR_203 ; VAR_204 -> VAR_205 = 0 ; } METHOD_28 ( & VAR_206 ) ; METHOD_29 ( VAR_207 ) ; return VAR_208 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * METHOD_1 ) ( TYPE_3 * , const TYPE_4 * , TYPE_5 * , TYPE_6 ) , TYPE_7 * VAR_1 ) { TYPE_8 * VAR_2 = VAR_3 ; if ( METHOD_2 ( VAR_4 ) < 0 ) { return - 1 ; } VAR_5 -> VAR_6 [ VAR_7 -> VAR_8 ] = '\\0' ; if ( VAR_9 -> VAR_10 [ 5 ] == '?' ) { return METHOD_3 ( VAR_11 , "vCont;c;s" ) ; } if ( ! ( VAR_12 = METHOD_4 ( VAR_13 -> VAR_14 , ";" ) ) ) { return METHOD_5 ( VAR_15 , "E01" ) ; } while ( VAR_16 = METHOD_6 ( VAR_17 , ";" ) ) { METHOD_7 ( "action:%s\\n" , VAR_18 ) ; switch ( VAR_19 [ 0 ] ) { case 's' : if ( METHOD_8 ( VAR_20 , "ds" , VAR_21 , 0 ) < 0 ) { METHOD_9 ( VAR_22 , "E01" ) ; return - 1 ; } return METHOD_10 ( VAR_23 , "OK" ) ; case 'c' : if ( METHOD_11 ( VAR_24 , "dc" , VAR_25 , 0 ) < 0 ) { METHOD_12 ( VAR_26 , "E01" ) ; return - 1 ; } return METHOD_13 ( VAR_27 , "OK" ) ; default : return METHOD_14 ( VAR_28 , "E01" ) ; } }  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 = VAR_2 ;  TYPE_3 VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 = 0 ; VAR_9 = METHOD_1 ( & VAR_10 -> VAR_11 , "wwlqq" , & VAR_12 , & VAR_13 , & VAR_14 , & VAR_15 . VAR_16 , & VAR_17 . VAR_18 ) ; if ( VAR_19 ) return ( VAR_20 ) ; if ( VAR_21 != 24 ) return ( VAR_22 ) ; VAR_23 = METHOD_2 ( VAR_24 , & VAR_25 ) ; if ( VAR_26 ) { METHOD_3 ( VAR_27 , VAR_28 ) ; return ( VAR_29 ) ; }  VAR_30 = VAR_31 -> VAR_32 ;  if ( ( VAR_33 -> VAR_34 -> VAR_35 & VAR_36 ) == 0 ) ( TYPE_9 ) METHOD_4 ( VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 ) ; ( TYPE_10 ) METHOD_5 ( & VAR_42 -> VAR_43 , "wwl" , 4 , 0 ) ; return ( VAR_44 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ;  VAR_2 * VAR_3 ;  TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; VAR_6 * VAR_7 ; TYPE_5 VAR_8 ; VAR_9 * VAR_10 ; TYPE_6 VAR_11 ; if ( ! ( VAR_12 = METHOD_1 ( ) ) ) { goto VAR_13 ; } if ( ! VAR_14 -> VAR_15 ) { return VAR_16 ; } VAR_17 = 0 ; VAR_18 = VAR_19 -> VAR_20 [ VAR_21 ] ; VAR_22 = VAR_23 -> VAR_24 ; VAR_25 = VAR_26 -> VAR_27 ; for ( ; ; ) { if ( VAR_28 < 4 ) { goto VAR_29 ; } if ( ! ( VAR_30 = METHOD_2 ( 0 , 0 ) ) ) { goto VAR_31 ; } if ( METHOD_3 ( VAR_32 , METHOD_4 ( VAR_33 ) , VAR_34 ) ) { goto VAR_35 ; } VAR_36 = ( VAR_37 [ 0 ] << 24 ) | ( VAR_38 [ 1 ] << 16 ) | ( VAR_39 [ 2 ] << 8 ) | VAR_40 [ 3 ] ; VAR_41 -= 4 ; VAR_42 += 4 ; while ( VAR_43 ) { if ( ! VAR_44 ) { if ( ++ VAR_45 >= VAR_46 -> VAR_47 ) { goto VAR_48 ; } VAR_49 = VAR_50 -> VAR_51 [ VAR_52 ] ; VAR_53 = VAR_54 -> VAR_55 ; VAR_56 = VAR_57 -> VAR_58 ; } VAR_59 = METHOD_5 ( VAR_60 , VAR_61 ) ; if ( METHOD_6 ( VAR_62 , VAR_63 , VAR_64 ) != VAR_65 ) { goto VAR_66 ; } VAR_67 -= VAR_68 ; VAR_69 += VAR_70 ; VAR_71 -= VAR_72 ; } METHOD_7 ( VAR_73 ) ; if ( ! VAR_74 ) { if ( ++ VAR_75 >= VAR_76 -> VAR_77 ) { break ; } VAR_78 = VAR_79 -> VAR_80 [ VAR_81 ] ; VAR_82 = VAR_83 -> VAR_84 ; VAR_85 = VAR_86 -> VAR_87 ; } } return VAR_88 ; VAR_89 : if ( VAR_90 ) { METHOD_8 ( VAR_91 ) ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) VAR_3 -> VAR_4 ; if ( VAR_5 ) { VAR_6 -> VAR_7 = VAR_8 ;  VAR_9 -> VAR_10 = VAR_11 ;  VAR_12 -> VAR_13 . VAR_14 . VAR_15 = METHOD_1 ( VAR_16 ) ; VAR_17 -> VAR_18 . VAR_19 . VAR_20 = METHOD_2 ( VAR_21 ) ; VAR_22 -> VAR_23 . VAR_24 . VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; VAR_28 -> VAR_29 = sizeof ( struct STRUCT_OR_UNION_4 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 , * VAR_10 ; VAR_11 = - VAR_12 ; if ( VAR_13 -> VAR_14 & ( VAR_15 - 1 ) ) goto VAR_16 ; if ( VAR_17 -> VAR_18 & ( VAR_19 - 1 ) ) goto VAR_20 ;  if ( VAR_21 && ( VAR_22 -> VAR_23 & ( VAR_24 - 1 ) ) )  goto VAR_25 ; if ( VAR_26 -> VAR_27 >= VAR_28 + VAR_29 ) goto VAR_30 ; if ( VAR_31 -> VAR_32 + VAR_33 -> VAR_34 < VAR_35 -> VAR_36 ) goto VAR_37 ; VAR_38 = & STRUCT_OR_UNION_6 -> VAR_39 -> VAR_40 [ VAR_41 -> VAR_42 ] ; VAR_43 = VAR_44 -> VAR_45 >> VAR_46 ; VAR_47 = VAR_48 -> VAR_49 >> VAR_50 ; VAR_51 = - VAR_52 ; if ( VAR_53 > VAR_54 ) goto VAR_55 ; if ( ! VAR_56 ) VAR_57 -> VAR_58 &= ~ VAR_59 ; VAR_60 = VAR_61 = * VAR_62 ; VAR_63 . VAR_64 = VAR_65 -> VAR_66 ; VAR_67 . VAR_68 = VAR_69 ; VAR_70 . VAR_71 = VAR_72 ; VAR_73 . VAR_74 = VAR_75 -> VAR_76 ; VAR_77 = - VAR_78 ; if ( VAR_79 && VAR_80 . VAR_81 && VAR_82 != VAR_83 . VAR_84 ) goto VAR_85 ; VAR_86 = - VAR_87 ; for ( VAR_88 = 0 ; VAR_89 < VAR_90 ; ++ VAR_91 ) { struct STRUCT_OR_UNION_7 * VAR_92 = & STRUCT_OR_UNION_8 -> VAR_93 -> VAR_94 [ VAR_95 ] ; if ( VAR_96 == VAR_97 || ! VAR_98 -> VAR_99 ) continue ; if ( ! ( ( VAR_100 + VAR_101 <= VAR_102 -> VAR_103 ) || ( VAR_104 >= VAR_105 -> VAR_106 + VAR_107 -> VAR_108 ) ) ) goto VAR_109 ; } if ( ! ( VAR_110 . VAR_111 & VAR_112 ) ) VAR_113 . VAR_114 = VAR_115 ; VAR_116 = - VAR_117 ; TYPE_6 TYPE_7 if ( VAR_118 && ! VAR_119 . VAR_120 ) { VAR_121 . VAR_122 = METHOD_1 ( VAR_123 * sizeof ( * VAR_124 . VAR_125 ) ) ; if ( ! VAR_126 . VAR_127 ) goto VAR_128 ; VAR_129 . VAR_130 = VAR_131 ; VAR_132 . VAR_133 = VAR_134 -> VAR_135 ; } if ( ! VAR_136 ) goto VAR_137 ; for ( VAR_138 = 0 ; VAR_139 < VAR_140 - 1 ; ++ VAR_141 ) { unsigned TYPE_8 VAR_142 ; unsigned TYPE_9 VAR_143 ; TYPE_10 VAR_144 ; TYPE_11 VAR_145 = VAR_146 + 2 ; ( TYPE_12 ) VAR_147 ; if ( VAR_148 . VAR_149 [ VAR_150 ] ) continue ; VAR_151 = 1 + ( ( VAR_152 + VAR_153 - 1 ) >> METHOD_2 ( VAR_154 ) ) ; VAR_155 -= VAR_156 >> METHOD_3 ( VAR_157 ) ; VAR_158 . VAR_159 [ VAR_160 ] = METHOD_4 ( VAR_161 * sizeof ( * VAR_162 . VAR_163 [ VAR_164 ] ) ) ; if ( ! VAR_165 . VAR_166 [ VAR_167 ] ) goto VAR_168 ; if ( VAR_169 & ( METHOD_5 ( VAR_170 ) - 1 ) ) VAR_171 . VAR_172 [ VAR_173 ] [ 0 ] . VAR_174 = 1 ; if ( ( VAR_175 + VAR_176 ) & ( METHOD_6 ( VAR_177 ) - 1 ) ) VAR_178 . VAR_179 [ VAR_180 ] [ VAR_181 - 1 ] . VAR_182 = 1 ; VAR_183 = VAR_184 . VAR_185 >> VAR_186 ; if ( ( VAR_187 ^ VAR_188 ) & ( METHOD_7 ( VAR_189 ) - 1 ) || ! VAR_190 ) for ( VAR_191 = 0 ; VAR_192 < VAR_193 ; ++ VAR_194 ) VAR_195 . VAR_196 [ VAR_197 ] [ VAR_198 ] . VAR_199 = 1 ; } VAR_200 : if ( ( VAR_201 . VAR_202 & VAR_203 ) && ! VAR_204 . VAR_205 ) { if ( METHOD_8 ( & VAR_206 ) < 0 ) goto VAR_207 ; } else VAR_208 . VAR_209 = VAR_210 ; if ( VAR_211 ) VAR_212 . VAR_213 = VAR_214 -> VAR_215 ; if ( ! VAR_216 ) { VAR_217 = - VAR_218 ; VAR_219 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_9 ) , VAR_220 ) ; if ( ! VAR_221 ) goto VAR_222 ; METHOD_10 ( VAR_223 , STRUCT_OR_UNION_10 -> VAR_224 , sizeof ( struct STRUCT_OR_UNION_11 ) ) ; if ( VAR_225 -> VAR_226 >= VAR_227 -> VAR_228 ) VAR_229 -> VAR_230 = VAR_231 -> VAR_232 + 1 ; VAR_233 -> VAR_234 ++ ; VAR_235 -> VAR_236 [ VAR_237 -> VAR_238 ] . VAR_239 |= VAR_240 ; VAR_241 = STRUCT_OR_UNION_12 -> VAR_242 ; METHOD_11 ( STRUCT_OR_UNION_13 -> VAR_243 , VAR_244 ) ; METHOD_12 ( & STRUCT_OR_UNION_14 -> VAR_245 ) ; METHOD_13 ( STRUCT_OR_UNION_15 ) ; METHOD_14 ( VAR_246 ) ; } VAR_247 = METHOD_15 ( STRUCT_OR_UNION_16 , & VAR_248 , VAR_249 , VAR_250 , VAR_251 ) ; if ( VAR_252 ) goto VAR_253 ; if ( VAR_254 ) { VAR_255 = METHOD_16 ( STRUCT_OR_UNION_17 , & VAR_256 ) ; if ( VAR_257 ) goto VAR_258 ; } VAR_259 = - VAR_260 ; VAR_261 = METHOD_17 ( sizeof ( struct STRUCT_OR_UNION_18 ) , VAR_262 ) ; if ( ! VAR_263 ) goto VAR_264 ; METHOD_18 ( VAR_265 , STRUCT_OR_UNION_19 -> VAR_266 , sizeof ( struct STRUCT_OR_UNION_20 ) ) ; if ( VAR_267 -> VAR_268 >= VAR_269 -> VAR_270 ) VAR_271 -> VAR_272 = VAR_273 -> VAR_274 + 1 ; VAR_275 -> VAR_276 ++ ; if ( ! VAR_277 ) { VAR_278 . VAR_279 = VAR_280 ; VAR_281 . VAR_282 = VAR_283 ; for ( VAR_284 = 0 ; VAR_285 < VAR_286 - 1 ; ++ VAR_287 ) VAR_288 . VAR_289 [ VAR_290 ] = VAR_291 ; } VAR_292 -> VAR_293 [ VAR_294 -> VAR_295 ] = VAR_296 ; VAR_297 = STRUCT_OR_UNION_21 -> VAR_298 ; METHOD_19 ( STRUCT_OR_UNION_22 -> VAR_299 , VAR_300 ) ; METHOD_20 ( & STRUCT_OR_UNION_23 -> VAR_301 ) ; METHOD_21 ( STRUCT_OR_UNION_24 , VAR_302 , VAR_303 , VAR_304 ) ; METHOD_22 ( & VAR_305 , & VAR_306 ) ; METHOD_23 ( VAR_307 ) ; return 0 ; VAR_308 : METHOD_24 ( & VAR_309 , & VAR_310 ) ; VAR_311 : return VAR_312 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , "enter" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ;  }  VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , "ImproperImageHeader" ) ; if ( METHOD_17 ( VAR_67 . VAR_68 , "MATLAB" , 6 ) != 0 ) { VAR_69 = METHOD_18 ( VAR_70 , VAR_71 , VAR_72 ) ; if ( VAR_73 == VAR_74 ) goto VAR_75 ; VAR_76 = VAR_77 ; goto VAR_78 ; } VAR_79 . VAR_80 = METHOD_19 ( VAR_81 ) ; if ( METHOD_20 ( VAR_82 , 2 , ( unsigned TYPE_35 * ) & VAR_83 . VAR_84 ) != 2 ) METHOD_21 ( VAR_85 , "ImproperImageHeader" ) ; if ( VAR_86 ) ( TYPE_36 ) METHOD_22 ( VAR_87 , METHOD_23 ( ) , "Endian%c%c" , VAR_88 . VAR_89 [ 0 ] , VAR_90 . VAR_91 [ 1 ] ) ; if ( ! METHOD_24 ( VAR_92 . VAR_93 , "IM" , 2 ) ) { METHOD_25 = VAR_94 ; METHOD_26 = METHOD_27 ; METHOD_28 = VAR_95 ; METHOD_29 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; } else if ( ! METHOD_30 ( VAR_100 . VAR_101 , "MI" , 2 ) ) { METHOD_31 = VAR_102 ; METHOD_32 = VAR_103 ; METHOD_33 = VAR_104 ; METHOD_34 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } else goto VAR_109 ; if ( METHOD_35 ( VAR_110 . VAR_111 , "MATLAB" , 6 ) ) VAR_112 : METHOD_36 ( VAR_113 , "ImproperImageHeader" ) ; VAR_114 = METHOD_37 ( VAR_115 ) ; while ( ! METHOD_38 ( VAR_116 ) ) { VAR_117 = 1 ; ( TYPE_37 ) METHOD_39 ( VAR_118 , VAR_119 , VAR_120 ) ; VAR_121 . VAR_122 = METHOD_40 ( VAR_123 ) ; if ( METHOD_41 ( VAR_124 ) ) break ; VAR_125 . VAR_126 = METHOD_42 ( VAR_127 ) ; if ( METHOD_43 ( VAR_128 ) ) break ; VAR_129 += VAR_130 . VAR_131 + 4 + 4 ; VAR_132 = VAR_133 ; if d ( VAR_134 ) if ( VAR_135 . VAR_136 == VAR_137 ) { VAR_138 = METHOD_44 ( VAR_139 , VAR_140 . VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 == VAR_145 ) continue ; VAR_146 . VAR_147 = METHOD_45 ( VAR_148 ) ; } if ( VAR_149 . VAR_150 != VAR_151 ) continue ; VAR_152 . VAR_153 = METHOD_46 ( VAR_154 ) ; VAR_155 . VAR_156 = METHOD_47 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_48 ( VAR_160 ) ; VAR_161 . VAR_162 = VAR_163 . VAR_164 & 0xFF ; VAR_165 . VAR_166 = ( VAR_167 . VAR_168 >> 8 ) & 0xFF ; VAR_169 . VAR_170 = METHOD_49 ( VAR_171 ) ; if ( VAR_172 != VAR_173 ) VAR_174 . VAR_175 = METHOD_50 ( VAR_176 ) ; VAR_177 . VAR_178 = METHOD_51 ( VAR_179 ) ; VAR_180 . VAR_181 = METHOD_52 ( VAR_182 ) ; VAR_183 . VAR_184 = METHOD_53 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_54 ( VAR_188 ) ; switch ( VAR_189 . VAR_190 ) { case 8 : VAR_191 = VAR_192 = 1 ; break ; case 12 : VAR_193 = VAR_194 = METHOD_55 ( VAR_195 ) ; ( TYPE_38 ) METHOD_56 ( VAR_196 ) ; if ( VAR_197 != 3 ) METHOD_57 ( VAR_198 , "MultidimensionalMatricesAreNotSupported" ) ; break ; case 16 : VAR_199 = VAR_200 = METHOD_58 ( VAR_201 ) ; if ( VAR_202 != 3 && VAR_203 != 1 ) METHOD_59 ( VAR_204 , "MultidimensionalMatricesAreNotSupported" ) ; VAR_205 = METHOD_60 ( VAR_206 ) ; if ( VAR_207 == 0 ) METHOD_61 ( VAR_208 , "ImproperImageHeader" ) ; break ; default : METHOD_62 ( VAR_209 , "MultidimensionalMatricesAreNotSupported" ) ; } VAR_210 . VAR_211 = METHOD_63 ( VAR_212 ) ; VAR_213 . VAR_214 = METHOD_64 ( VAR_215 ) ; if ( VAR_216 ) ( TYPE_39 ) METHOD_65 ( VAR_217 , METHOD_66 ( ) , "MATLAB_HDR.StructureClass%d" , VAR_218 . VAR_219 ) ; if ( VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 && VAR_241 . VAR_242 != VAR_243 && VAR_244 . VAR_245 != VAR_246 && VAR_247 . VAR_248 != VAR_249 && VAR_250 . VAR_251 != VAR_252 ) METHOD_67 ( VAR_253 , "UnsupportedCellTypeInTheMatrix" ) ; switch ( VAR_254 . VAR_255 ) { case 0 : VAR_256 = METHOD_68 ( VAR_257 ) ; VAR_258 = 4 * ( TYPE_40 ) ( ( VAR_259 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_69 ( VAR_260 , VAR_261 , VAR_262 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_70 ( VAR_263 , 4 , ( unsigned TYPE_43 * ) & VAR_264 ) ; break ; default : goto VAR_265 ; } VAR_266 = METHOD_71 ( VAR_267 ) ; if ( VAR_268 ) ( TYPE_44 ) METHOD_72 ( VAR_269 , METHOD_73 ( ) , "MATLAB_HDR.CellType:%.20g" , ( TYPE_45 ) VAR_270 ) ; ( TYPE_46 ) METHOD_74 ( VAR_271 , 4 , ( unsigned TYPE_47 * ) & VAR_272 ) ; VAR_273 : switch ( VAR_274 ) { case VAR_275 : case VAR_276 : VAR_277 = 8 ; if ( VAR_278 . VAR_279 & VAR_280 ) VAR_281 -> VAR_282 = 1 ; else VAR_283 -> VAR_284 = 8 ; VAR_285 = ( TYPE_48 ) VAR_286 . VAR_287 ; break ; case VAR_288 : case VAR_289 : VAR_290 = 16 ; VAR_291 -> VAR_292 = 16 ; VAR_293 = ( TYPE_49 ) ( 2 * VAR_294 . VAR_295 ) ; break ; case VAR_296 : case VAR_297 : VAR_298 = 32 ; VAR_299 -> VAR_300 = 32 ; VAR_301 = ( TYPE_50 ) ( 4 * VAR_302 . VAR_303 ) ; break ; case VAR_304 : case VAR_305 : VAR_306 = 64 ; VAR_307 -> VAR_308 = 64 ; VAR_309 = ( TYPE_51 ) ( 8 * VAR_310 . VAR_311 ) ; break ; case VAR_312 : VAR_313 = 32 ; VAR_314 -> VAR_315 = 32 ; ( TYPE_52 ) METHOD_75 ( VAR_316 , "quantum:format" , "floating-point" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_53 ) ( 4 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 64 ; VAR_325 -> VAR_326 = 64 ; ( TYPE_54 ) METHOD_76 ( VAR_327 , "quantum:format" , "floating-point" ) ; METHOD_77 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_78 ( VAR_328 , "IncompatibleSizeOfDouble" ) ; if ( VAR_329 . VAR_330 & VAR_331 ) { } VAR_332 = ( TYPE_57 ) ( 8 * VAR_333 . VAR_334 ) ; break ; default : METHOD_79 ( VAR_335 , "UnsupportedCellTypeInTheMatrix" ) ; } ( TYPE_58 ) VAR_336 ; VAR_337 -> VAR_338 = VAR_339 . VAR_340 ; VAR_341 -> VAR_342 = VAR_343 . VAR_344 ; VAR_345 = METHOD_80 ( VAR_346 , VAR_347 ) ; if ( VAR_348 == ( TYPE_59 * ) VAR_349 ) METHOD_81 ( VAR_350 , "MemoryAllocationFailed" ) ; VAR_351 = 1 ; VAR_352 -> VAR_353 = VAR_354 << VAR_355 -> VAR_356 ; if ( VAR_357 -> VAR_358 == 0 || VAR_359 -> VAR_360 == 0 ) goto VAR_361 ; if ( ( VAR_362 . VAR_363 == 8 ) && ( ( VAR_364 . VAR_365 & VAR_366 ) == 0 ) ) { VAR_367 -> VAR_368 = VAR_369 ; METHOD_82 ( VAR_370 , VAR_371 , VAR_372 ) ; } if ( VAR_373 -> VAR_374 ) { TYPE_60 VAR_375 = VAR_376 -> VAR_377 ; VAR_378 -> VAR_379 = VAR_380 -> VAR_381 ; VAR_382 -> VAR_383 = VAR_384 ; goto VAR_385 ; } VAR_386 = METHOD_83 ( VAR_387 , VAR_388 -> VAR_389 , VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 == VAR_394 ) return ( METHOD_84 ( VAR_395 ) ) ; VAR_396 = ( unsigned TYPE_61 * ) METHOD_85 ( ( TYPE_62 ) ( VAR_397 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_398 == VAR_399 ) METHOD_86 ( VAR_400 , "MemoryAllocationFailed" ) ; ( TYPE_64 ) METHOD_87 ( VAR_401 , 0 , VAR_402 * sizeof ( TYPE_65 ) ) ; VAR_403 = 0 ; VAR_404 = 0 ; if ( VAR_405 == VAR_406 || VAR_407 == VAR_408 ) { METHOD_88 ( VAR_409 , VAR_410 -> VAR_411 , VAR_412 . VAR_413 , VAR_414 . VAR_415 , VAR_416 , VAR_417 , VAR_418 , & VAR_419 -> VAR_420 , & VAR_421 -> VAR_422 ) ; } if ( VAR_423 == 1 ) VAR_424 = 0 ; do { for ( VAR_425 = 0 ; VAR_426 < ( TYPE_66 ) VAR_427 . VAR_428 ; VAR_429 ++ ) { VAR_430 = METHOD_89 ( VAR_431 , 0 , VAR_432 . VAR_433 - VAR_434 - 1 , VAR_435 -> VAR_436 , 1 , VAR_437 ) ; if ( VAR_438 == ( TYPE_67 * ) VAR_439 ) { if ( VAR_440 ) ( TYPE_68 ) METHOD_90 ( VAR_441 , METHOD_91 ( ) , "MATsetimagepixelsreturnsunexpectedNULLonarow%u." , ( unsigned ) ( VAR_442 . VAR_443 - VAR_444 - 1 ) ) ; goto VAR_445 ; } if ( METHOD_92 ( VAR_446 , VAR_447 , ( unsigned TYPE_69 * ) VAR_448 ) != ( TYPE_70 ) VAR_449 ) { if ( VAR_450 ) ( TYPE_71 ) METHOD_93 ( VAR_451 , METHOD_94 ( ) , "MATcannotreadscanrow%ufromafile." , ( unsigned ) ( VAR_452 . VAR_453 - VAR_454 - 1 ) ) ; goto VAR_455 ; } if ( ( VAR_456 == VAR_457 || VAR_458 == VAR_459 ) && ( VAR_460 . VAR_461 & VAR_462 ) ) { METHOD_95 ( ( unsigned TYPE_72 * ) VAR_463 , VAR_464 ) ; if ( METHOD_96 ( VAR_465 , ( TYPE_73 * ) VAR_466 , VAR_467 , VAR_468 [ VAR_469 ] , VAR_470 , VAR_471 ) <= 0 ) { VAR_472 : if ( VAR_473 ) ( TYPE_74 ) METHOD_97 ( VAR_474 , METHOD_98 ( ) , "MATfailedtoImportQuantumPixelsforarow%u" , ( unsigned ) ( VAR_475 . VAR_476 - VAR_477 - 1 ) ) ; break ; } } else { if ( METHOD_99 ( VAR_478 , ( TYPE_75 * ) VAR_479 , VAR_480 , VAR_481 [ VAR_482 ] , VAR_483 , VAR_484 ) <= 0 ) goto VAR_485 ; if ( VAR_486 <= 1 && ( VAR_487 == VAR_488 || VAR_489 == VAR_490 || VAR_491 == VAR_492 || VAR_493 == VAR_494 ) ) METHOD_100 ( VAR_495 , VAR_496 , VAR_497 . VAR_498 ) ; } if ( ! METHOD_101 ( VAR_499 , VAR_500 ) ) { if ( VAR_501 ) ( TYPE_76 ) METHOD_102 ( VAR_502 , METHOD_103 ( ) , "MATfailedtosyncimagepixelsforarow%u" , ( unsigned ) ( VAR_503 . VAR_504 - VAR_505 - 1 ) ) ; goto VAR_506 ; } } } while ( VAR_507 -- >= 2 ) ; VAR_508 : if ( VAR_509 . VAR_510 & VAR_511 ) { VAR_512 = METHOD_104 ( VAR_513 ) ; VAR_514 = METHOD_105 ( VAR_515 ) ; if ( VAR_516 == VAR_517 || VAR_518 == VAR_519 ) { METHOD_106 ( VAR_520 , VAR_521 -> VAR_522 , VAR_523 . VAR_524 , VAR_525 . VAR_526 , VAR_527 , VAR_528 , VAR_529 , & VAR_530 , & VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_77 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_107 ( VAR_539 , VAR_540 , ( TYPE_78 * ) VAR_541 ) ; METHOD_108 ( VAR_542 , ( TYPE_79 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } if ( VAR_548 == VAR_549 ) for ( VAR_550 = 0 ; VAR_551 < ( TYPE_80 ) VAR_552 . VAR_553 ; VAR_554 ++ ) { METHOD_109 ( VAR_555 , VAR_556 , ( TYPE_81 * ) VAR_557 ) ; METHOD_110 ( VAR_558 , ( TYPE_82 * ) VAR_559 , VAR_560 , VAR_561 , VAR_562 , VAR_563 ) ; } } if ( ( VAR_564 . VAR_565 == 8 ) && ( ( VAR_566 . VAR_567 & VAR_568 ) == 0 ) ) VAR_569 -> VAR_570 = VAR_571 ; if ( VAR_572 -> VAR_573 == 1 ) VAR_574 -> VAR_575 = VAR_576 ; if ( VAR_577 == VAR_578 ) VAR_579 = VAR_580 ; VAR_581 = METHOD_111 ( VAR_582 , 90.0 , VAR_583 ) ; if ( VAR_584 != ( TYPE_83 * ) VAR_585 ) { VAR_586 -> VAR_587 . VAR_588 = 0 ; VAR_589 -> VAR_590 . VAR_591 = 0 ; VAR_592 = VAR_593 -> VAR_594 ; VAR_595 -> VAR_596 = VAR_597 -> VAR_598 ; VAR_599 -> VAR_600 = VAR_601 -> VAR_602 ; VAR_603 -> VAR_604 = VAR_605 ; METHOD_112 ( & VAR_606 , VAR_607 ) ; METHOD_113 ( & VAR_608 ) ; } VAR_609 : if ( VAR_610 != VAR_611 ) if ( VAR_612 != VAR_613 ) { METHOD_114 ( & VAR_614 ) ; if ( VAR_615 ) { if ( VAR_616 -> VAR_617 ) { METHOD_115 ( VAR_618 -> VAR_619 ) ; VAR_620 -> VAR_621 = VAR_622 ; ( TYPE_84 ) METHOD_116 ( VAR_623 -> VAR_624 ) ; } } } METHOD_117 ( VAR_625 , VAR_626 , VAR_627 ) ; if ( VAR_628 -> VAR_629 == ( TYPE_85 * ) VAR_630 ) break ; VAR_631 = METHOD_118 ( VAR_632 ) ; VAR_633 -> VAR_634 = VAR_635 -> VAR_636 = 0 ; VAR_637 -> VAR_638 = 0 ; METHOD_119 ( VAR_639 ) ; VAR_640 = VAR_641 ; if ( -- VAR_642 > 0 ) { VAR_643 = VAR_644 ; if ( VAR_645 == VAR_646 ) VAR_647 = VAR_648 ; goto VAR_649 ; } if ( ( VAR_650 != VAR_651 ) && ( VAR_652 != VAR_653 ) ) { METHOD_120 ( & VAR_654 ) ; if ( VAR_655 ) { if ( VAR_656 -> VAR_657 ) { METHOD_121 ( VAR_658 -> VAR_659 ) ; VAR_660 -> VAR_661 = VAR_662 ; ( TYPE_86 ) METHOD_122 ( VAR_663 -> VAR_664 ) ; } } } } METHOD_123 ( VAR_665 ) ;  VAR_666 = METHOD_124 ( VAR_667 ) ;  VAR_668 : VAR_669 = METHOD_125 ( VAR_670 ) ; METHOD_126 ( VAR_671 ) ; { TYPE_87 * VAR_672 ; TYPE_88 VAR_673 = 0 ; VAR_674 = VAR_675 ; VAR_676 = VAR_677 ; while ( VAR_678 != ( TYPE_89 * ) VAR_679 ) { TYPE_90 * VAR_680 = VAR_681 ; if ( ( VAR_682 -> VAR_683 == 0 ) || ( VAR_684 -> VAR_685 == 0 ) ) { VAR_686 = VAR_687 -> VAR_688 ; METHOD_127 ( & VAR_689 ) ; } else { VAR_690 = VAR_691 ; VAR_692 = VAR_693 -> VAR_694 ; } } for ( VAR_695 = VAR_696 ; VAR_697 != ( TYPE_91 * ) VAR_698 ; VAR_699 = VAR_700 -> VAR_701 ) VAR_702 -> VAR_703 = VAR_704 ++ ; } if ( VAR_705 != VAR_706 ) { if ( VAR_707 -> VAR_708 ) { METHOD_128 ( VAR_709 -> VAR_710 ) ; VAR_711 -> VAR_712 = VAR_713 ; ( TYPE_92 ) METHOD_129 ( VAR_714 -> VAR_715 ) ; } METHOD_130 ( VAR_716 ) ; VAR_717 = VAR_718 ; } if ( VAR_719 ) ( TYPE_93 ) METHOD_131 ( VAR_720 , METHOD_132 ( ) , "return" ) ; if ( VAR_721 == VAR_722 ) METHOD_133 ( VAR_723 , "ImproperImageHeader" ) ; return ( VAR_724 ) ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) {  TYPE_4 * VAR_4 ;  TYPE_5 * VAR_5 ; TYPE_6 * VAR_6 ;  const TYPE_7 * VAR_7 ;  if ( VAR_8 > VAR_9 / 6 ) return VAR_10 ; VAR_11 = METHOD_1 ( ( TYPE_8 * ) VAR_12 , VAR_13 * 6 ) ; if ( VAR_14 == VAR_15 ) return VAR_16 ; VAR_17 = VAR_18 = METHOD_2 ( VAR_19 ) ; VAR_20 = VAR_21 + VAR_22 ; while ( VAR_23 < VAR_24 ) { if ( * VAR_25 == '\\\\' ) { * VAR_26 ++ = * VAR_27 ++ ;  if ( * VAR_28 & 0x80 ) {  METHOD_3 ( VAR_29 , "u005c" ) ;  VAR_30 += 5 ;  } } if ( * VAR_31 & 0x80 ) { TYPE_9 * VAR_32 ; TYPE_10 VAR_33 ; TYPE_11 * VAR_34 ; TYPE_12 VAR_35 , VAR_36 ; VAR_37 = METHOD_4 ( VAR_38 , & VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { METHOD_5 ( VAR_43 ) ; return VAR_44 ; } VAR_45 = METHOD_6 ( VAR_46 ) ; VAR_47 = METHOD_7 ( VAR_48 ) ; VAR_49 = METHOD_8 ( VAR_50 ) ; for ( VAR_51 = 0 ; VAR_52 < VAR_53 ; VAR_54 ++ ) { TYPE_13 VAR_55 = METHOD_9 ( VAR_56 , VAR_57 , VAR_58 ) ; METHOD_10 ( VAR_59 , "\\\\U%08x" , VAR_60 ) ; VAR_61 += 10 ; }  METHOD_11 ( VAR_62 - VAR_63 <= METHOD_12 ( VAR_64 ) ) ;  METHOD_13 ( VAR_65 ) ; } else { * VAR_66 ++ = * VAR_67 ++ ; } } VAR_68 = VAR_69 - VAR_70 ; VAR_71 = VAR_72 ;  return METHOD_14 ( VAR_73 , VAR_74 , VAR_75 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * * VAR_4 ) { static TYPE_6 * VAR_5 = "libevt_record_values_read_event" ; TYPE_7 VAR_6 = 0 ; TYPE_8 VAR_7 = 0 ; TYPE_9 VAR_8 = 0 ; TYPE_10 VAR_9 = 0 ; TYPE_11 VAR_10 = 0 ; TYPE_12 VAR_11 = 0 ; TYPE_13 VAR_12 = 0 ; TYPE_14 VAR_13 = 0 ; TYPE_15 VAR_14 = 0 ; TYPE_16 VAR_15 = 0 ; TYPE_17 VAR_16 = 0 ; TYPE_18 VAR_17 = 0 ; if d ( VAR_18 ) TYPE_19 VAR_19 = 0 ; TYPE_20 VAR_20 = 0 ; if ( VAR_21 == VAR_22 ) { METHOD_1 ( VAR_23 , VAR_24 , VAR_25 , "%s:invalidrecordvalues." , VAR_26 ) ; return ( - 1 ) ; } if ( VAR_27 == VAR_28 ) { METHOD_2 ( VAR_29 , VAR_30 , VAR_31 , "%s:invalidrecorddata." , VAR_32 ) ; return ( - 1 ) ; } if ( VAR_33 > ( TYPE_21 ) VAR_34 ) { METHOD_3 ( VAR_35 , VAR_36 , VAR_37 , "%s:invalidrecorddatasizevalueexceedsmaximum." , VAR_38 ) ; return ( - 1 ) ; } if ( VAR_39 < ( sizeof ( TYPE_22 ) + 4 ) ) { METHOD_4 ( VAR_40 , VAR_41 , VAR_42 , "%s:recorddatasizevalueoutofbounds." , VAR_43 ) ; return ( - 1 ) ; } METHOD_5 ( ( ( TYPE_23 * ) VAR_44 ) -> VAR_45 , VAR_46 ) ; METHOD_6 ( ( ( TYPE_24 * ) VAR_47 ) -> VAR_48 , VAR_49 -> VAR_50 ) ; METHOD_7 ( ( ( TYPE_25 * ) VAR_51 ) -> VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_8 ( ( ( TYPE_26 * ) VAR_55 ) -> VAR_56 , VAR_57 -> VAR_58 ) ; METHOD_9 ( ( ( TYPE_27 * ) VAR_59 ) -> VAR_60 , VAR_61 -> VAR_62 ) ; METHOD_10 ( ( ( TYPE_28 * ) VAR_63 ) -> VAR_64 , VAR_65 -> VAR_66 ) ; METHOD_11 ( ( ( TYPE_29 * ) VAR_67 ) -> VAR_68 , VAR_69 -> VAR_70 ) ; METHOD_12 ( ( ( TYPE_30 * ) VAR_71 ) -> VAR_72 , VAR_73 ) ; METHOD_13 ( ( ( TYPE_31 * ) VAR_74 ) -> VAR_75 , VAR_76 ) ; METHOD_14 ( ( ( TYPE_32 * ) VAR_77 ) -> VAR_78 , VAR_79 ) ; METHOD_15 ( ( ( TYPE_33 * ) VAR_80 ) -> VAR_81 , VAR_82 ) ; METHOD_16 ( ( ( TYPE_34 * ) VAR_83 ) -> VAR_84 , VAR_85 ) ; METHOD_17 ( & ( VAR_86 [ VAR_87 - 4 ] ) , VAR_88 ) ; if d ( VAR_89 ) if ( VAR_90 != 0 ) { METHOD_18 ( "%s:size\\t\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_91 , VAR_92 ) ; METHOD_19 ( "%s:signature\\t\\t\\t\\t:%c%c%c%c\\n" , VAR_93 , ( ( TYPE_35 * ) VAR_94 ) -> VAR_95 [ 0 ] , ( ( TYPE_36 * ) VAR_96 ) -> VAR_97 [ 1 ] , ( ( TYPE_37 * ) VAR_98 ) -> VAR_99 [ 2 ] , ( ( TYPE_38 * ) VAR_100 ) -> VAR_101 [ 3 ] ) ; METHOD_20 ( "%s:recordnumber\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_102 , VAR_103 -> VAR_104 ) ; if ( METHOD_21 ( VAR_105 , "creationtime\\t\\t\\t\\t" , ( ( TYPE_39 * ) VAR_106 ) -> VAR_107 , 4 , VAR_108 , VAR_109 , VAR_110 | VAR_111 , VAR_112 ) != 1 ) { METHOD_22 ( VAR_113 , VAR_114 , VAR_115 , "%s:unabletoprintPOSIXtimevalue." , VAR_116 ) ; goto VAR_117 ; } if ( METHOD_23 ( VAR_118 , "writtentime\\t\\t\\t\\t" , ( ( TYPE_40 * ) VAR_119 ) -> VAR_120 , 4 , VAR_121 , VAR_122 , VAR_123 | VAR_124 , VAR_125 ) != 1 ) { METHOD_24 ( VAR_126 , VAR_127 , VAR_128 , "%s:unabletoprintPOSIXtimevalue." , VAR_129 ) ; goto VAR_130 ; } METHOD_25 ( "%s:eventidentifier\\t\\t\\t:0x%08" PRIx32 "\\n" , VAR_131 , VAR_132 -> VAR_133 ) ; METHOD_26 ( "%s:eventidentifier:code\\t\\t\\t:%" PRIu32 "\\n" , VAR_134 , VAR_135 -> VAR_136 & 0x0000ffffUL ) ; METHOD_27 ( "%s:eventidentifier:facility\\t\\t:%" PRIu32 "\\n" , VAR_137 , ( VAR_138 -> VAR_139 & 0x0fff0000UL ) >> 16 ) ; METHOD_28 ( "%s:eventidentifier:reserved\\t\\t:%" PRIu32 "\\n" , VAR_140 , ( VAR_141 -> VAR_142 & 0x10000000UL ) >> 28 ) ; METHOD_29 ( "%s:eventidentifier:customerflags\\t:%" PRIu32 "\\n" , VAR_143 , ( VAR_144 -> VAR_145 & 0x20000000UL ) >> 29 ) ; METHOD_30 ( "%s:eventidentifier:severity\\t\\t:%" PRIu32 "(" , VAR_146 , ( VAR_147 -> VAR_148 & 0xc0000000UL ) >> 30 ) ; METHOD_31 ( VAR_149 -> VAR_150 ) ; METHOD_32 ( ")\\n" ) ; METHOD_33 ( "%s:eventtype\\t\\t\\t\\t:%" PRIu16 "(" , VAR_151 , VAR_152 -> VAR_153 ) ; METHOD_34 ( VAR_154 -> VAR_155 ) ; METHOD_35 ( ")\\n" ) ; METHOD_36 ( ( ( TYPE_41 * ) VAR_156 ) -> VAR_157 , VAR_158 ) ; METHOD_37 ( "%s:numberofstrings\\t\\t\\t:%" PRIu16 "\\n" , VAR_159 , VAR_160 ) ; METHOD_38 ( "%s:eventcategory\\t\\t\\t\\t:%" PRIu16 "\\n" , VAR_161 , VAR_162 -> VAR_163 ) ; METHOD_39 ( ( ( TYPE_42 * ) VAR_164 ) -> VAR_165 , VAR_166 ) ; METHOD_40 ( "%s:eventflags\\t\\t\\t\\t:0x%04" PRIx16 "\\n" , VAR_167 , VAR_168 ) ; METHOD_41 ( ( ( TYPE_43 * ) VAR_169 ) -> VAR_170 , VAR_171 ) ; METHOD_42 ( "%s:closingrecordvaluesnumber\\t\\t:%" PRIu32 "\\n" , VAR_172 , VAR_173 ) ; METHOD_43 ( "%s:stringsoffset\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_174 , VAR_175 ) ; METHOD_44 ( "%s:usersecurityidentifier(SID)size\\t:%" PRIu32 "\\n" , VAR_176 , VAR_177 ) ; METHOD_45 ( "%s:usersecurityidentifier(SID)offset\\t:%" PRIu32 "\\n" , VAR_178 , VAR_179 ) ; METHOD_46 ( "%s:datasize\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_180 , VAR_181 ) ; METHOD_47 ( "%s:dataoffset\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_182 , VAR_183 ) ; } VAR_184 = sizeof ( TYPE_44 ) ; if ( ( VAR_185 == 0 ) && ( VAR_186 != 0 ) ) { METHOD_48 ( VAR_187 , VAR_188 , VAR_189 , "%s:userSIDoffsetorsizevalueoutofbounds." , VAR_190 ) ; goto VAR_191 ; } if ( VAR_192 != 0 ) { if ( ( ( TYPE_45 ) VAR_193 < VAR_194 ) || ( ( TYPE_46 ) VAR_195 >= ( VAR_196 - 4 ) ) ) { METHOD_49 ( VAR_197 , VAR_198 , VAR_199 , "%s:userSIDoffsetvalueoutofbounds." , VAR_200 ) ; goto VAR_201 ; } if ( VAR_202 != 0 ) { if ( ( TYPE_47 ) ( VAR_203 + VAR_204 ) > ( VAR_205 - 4 ) ) { METHOD_50 ( VAR_206 , VAR_207 , VAR_208 , "%s:userSIDsizevalueoutofbounds." , VAR_209 ) ; goto VAR_210 ; } } } if ( ( ( TYPE_48 ) VAR_211 < VAR_212 ) || ( ( TYPE_49 ) VAR_213 >= ( VAR_214 - 4 ) ) ) { METHOD_51 ( VAR_215 , VAR_216 , VAR_217 , "%s:stringsoffsetvalueoutofbounds." , VAR_218 ) ; goto VAR_219 ; } if ( ( ( TYPE_50 ) VAR_220 < VAR_221 ) || ( ( TYPE_51 ) VAR_222 >= ( VAR_223 - 4 ) ) ) { if ( VAR_224 != 0 ) { METHOD_52 ( VAR_225 , VAR_226 , VAR_227 , "%s:dataoffsetvalueoutofbounds." , VAR_228 ) ; goto VAR_229 ; } VAR_230 = ( TYPE_52 ) VAR_231 - 4 ; } if ( ( ( TYPE_53 ) VAR_232 >= ( VAR_233 - 4 ) ) && ( VAR_234 != VAR_235 ) ) { METHOD_53 ( VAR_236 , VAR_237 , VAR_238 , "%s:stringsoffsetvalueoutofbounds." , VAR_239 ) ; goto VAR_240 ; } if ( VAR_241 != 0 ) { if ( VAR_242 < VAR_243 ) { METHOD_54 ( VAR_244 , VAR_245 , VAR_246 , "%s:stringsoffsetvalueoutofbounds." , VAR_247 ) ; goto VAR_248 ; } } if ( VAR_249 != 0 ) { VAR_250 = VAR_251 - ( TYPE_54 ) VAR_252 ; } else if ( VAR_253 != 0 ) { VAR_254 = VAR_255 - ( TYPE_55 ) VAR_256 ; } if ( VAR_257 != 0 ) { VAR_258 = VAR_259 - VAR_260 ; } if ( VAR_261 != 0 ) { if ( ( TYPE_56 ) ( VAR_262 + VAR_263 ) > ( VAR_264 - 4 ) ) { METHOD_55 ( VAR_265 , VAR_266 , VAR_267 , "%s:datasizevalueoutofbounds." , VAR_268 ) ; goto VAR_269 ; } } if ( VAR_270 != 0 ) { if d ( VAR_271 ) if ( VAR_272 != 0 ) { METHOD_56 ( "%s:membersdata:\\n" , VAR_273 ) ; METHOD_57 ( & ( VAR_274 [ VAR_275 ] ) , VAR_276 , VAR_277 ) ; } if ( METHOD_58 ( & ( VAR_278 -> VAR_279 ) , VAR_280 , VAR_281 ) != 1 ) { METHOD_59 ( VAR_282 , VAR_283 , VAR_284 , "%s:unabletocreatesourcenamevalue." , VAR_285 ) ; goto VAR_286 ; } VAR_287 = METHOD_60 ( VAR_288 -> VAR_289 , & ( VAR_290 [ VAR_291 ] ) , VAR_292 , VAR_293 , VAR_294 , VAR_295 ) ; if ( VAR_296 == - 1 ) { METHOD_61 ( VAR_297 , VAR_298 , VAR_299 , "%s:unabletosetdataofsourcenamevalue." , VAR_300 ) ; goto VAR_301 ; } if d ( VAR_302 ) if ( VAR_303 != 0 ) { METHOD_62 ( "%s:sourcename\\t\\t\\t\\t:" , VAR_304 ) ; if ( METHOD_63 ( VAR_305 -> VAR_306 , 0 , 0 , VAR_307 ) != 1 ) { METHOD_64 ( VAR_308 , VAR_309 , VAR_310 , "%s:unabletoprintsourcenamevalue." , VAR_311 ) ; goto VAR_312 ; } METHOD_65 ( "\\n" ) ; } VAR_313 += VAR_314 ; VAR_315 -= ( TYPE_57 ) VAR_316 ; if ( METHOD_66 ( & ( VAR_317 -> VAR_318 ) , VAR_319 , VAR_320 ) != 1 ) { METHOD_67 ( VAR_321 , VAR_322 , VAR_323 , "%s:unabletocreatecomputernamevalue." , VAR_324 ) ; goto VAR_325 ; } VAR_326 = METHOD_68 ( VAR_327 -> VAR_328 , & ( VAR_329 [ VAR_330 ] ) , VAR_331 , VAR_332 , VAR_333 , VAR_334 ) ; if ( VAR_335 == - 1 ) { METHOD_69 ( VAR_336 , VAR_337 , VAR_338 , "%s:unabletosetdataofcomputernamevalue." , VAR_339 ) ; goto VAR_340 ; } if d ( VAR_341 ) if ( VAR_342 != 0 ) { METHOD_70 ( "%s:computername\\t\\t\\t\\t:" , VAR_343 ) ; if ( METHOD_71 ( VAR_344 -> VAR_345 , 0 , 0 , VAR_346 ) != 1 ) { METHOD_72 ( VAR_347 , VAR_348 , VAR_349 , "%s:unabletoprintcomputernamevalue." , VAR_350 ) ; goto VAR_351 ; } METHOD_73 ( "\\n" ) ; } VAR_352 += VAR_353 ; VAR_354 -= ( TYPE_58 ) VAR_355 ; if ( VAR_356 > 0 ) { if d ( VAR_357 ) if ( VAR_358 != 0 ) { METHOD_74 ( "%s:memberstrailingdata:\\n" , VAR_359 ) ; METHOD_75 ( & ( VAR_360 [ VAR_361 ] ) , VAR_362 , VAR_363 ) ; } VAR_364 += VAR_365 ; } } if ( VAR_366 != 0 ) {  if ( METHOD_76 (  & ( VAR_367 -> VAR_368 ) , VAR_369 , VAR_370 ) != 1 ) { METHOD_77 ( VAR_371 , VAR_372 , VAR_373 , "%s:unabletocreateusersecurityidentifier(SID)value." , VAR_374 ) ; goto VAR_375 ; } if ( METHOD_78 ( VAR_376 -> VAR_377 , & ( VAR_378 [ VAR_379 ] ) , ( TYPE_59 ) VAR_380 , VAR_381 , VAR_382 , VAR_383 ) != 1 ) { METHOD_79 ( VAR_384 , VAR_385 , VAR_386 , "%s:unabletosetdataofusersecurityidentifier(SID)value." , VAR_387 ) ; goto VAR_388 ; } if d ( VAR_389 ) if ( VAR_390 != 0 ) { METHOD_80 ( "%s:usersecurityidentifier(SID)\\t\\t:" , VAR_391 ) ; if ( METHOD_81 ( VAR_392 -> VAR_393 , 0 , 0 , VAR_394 ) != 1 ) { METHOD_82 ( VAR_395 , VAR_396 , VAR_397 , "%s:unabletoprintusersecurityidentifier(SID)value." , VAR_398 ) ; goto VAR_399 ; } METHOD_83 ( "\\n" ) ; } VAR_400 += VAR_401 ; } if ( VAR_402 != 0 )  {  if d ( VAR_403 ) if ( VAR_404 != 0 ) { METHOD_84 ( "%s:stringsdata:\\n" , VAR_405 ) ; METHOD_85 ( & ( VAR_406 [ VAR_407 ] ) , VAR_408 , VAR_409 ) ; } if ( VAR_410 == 0 ) { VAR_411 = VAR_412 + VAR_413 - 2 ; while ( VAR_414 > VAR_415 ) { if ( ( VAR_416 [ VAR_417 ] != 0 ) || ( VAR_418 [ VAR_419 + 1 ] != 0 ) ) { VAR_420 += 2 ; break ; } VAR_421 -= 2 ; VAR_422 -= 2 ; } } if ( METHOD_86 ( & ( VAR_423 -> VAR_424 ) , VAR_425 , VAR_426 ) != 1 ) { METHOD_87 ( VAR_427 , VAR_428 , VAR_429 , "%s:unabletocreatestringsvalue." , VAR_430 ) ; goto VAR_431 ; } VAR_432 = METHOD_88 ( VAR_433 -> VAR_434 , & ( VAR_435 [ VAR_436 ] ) , VAR_437 , VAR_438 , VAR_439 ) ; if ( VAR_440 == - 1 ) { METHOD_89 ( VAR_441 , VAR_442 , VAR_443 , "%s:unabletosetdataofstringsvalue." , VAR_444 ) ; goto VAR_445 ; } VAR_446 += VAR_447 ; } if ( VAR_448 != 0 ) {  if d ( VAR_449 )  if ( VAR_450 != 0 ) { METHOD_90 ( "%s:data:\\n" , VAR_451 ) ; METHOD_91 (  & ( VAR_452 [ VAR_453 ] ) ,  ( TYPE_60 ) VAR_454 , VAR_455 ) ; } if ( METHOD_92 ( & ( VAR_456 -> VAR_457 ) , VAR_458 , VAR_459 ) != 1 ) { METHOD_93 ( VAR_460 , VAR_461 , VAR_462 , "%s:unabletocreatedatavalue." , VAR_463 ) ; goto VAR_464 ; } if ( METHOD_94 ( VAR_465 -> VAR_466 , & ( VAR_467 [ VAR_468 ] ) , ( TYPE_61 ) VAR_469 , VAR_470 , VAR_471 , VAR_472 ) != 1 ) { METHOD_95 ( VAR_473 , VAR_474 , VAR_475 , "%s:unabletosetdataofdatavalue." , VAR_476 ) ; goto VAR_477 ; } if d ( VAR_478 ) VAR_479 += VAR_480 ; } if d ( VAR_481 ) if ( VAR_482 != 0 ) { if ( VAR_483 < ( VAR_484 - 4 ) ) { METHOD_96 ( "%s:padding:\\n" , VAR_485 ) ; METHOD_97 ( & ( VAR_486 [ VAR_487 ] ) , ( TYPE_62 ) VAR_488 - VAR_489 - 4 , VAR_490 ) ; } METHOD_98 ( "%s:sizecopy\\t\\t\\t\\t:%" PRIu32 "\\n" , VAR_491 , VAR_492 ) ; METHOD_99 ( "\\n" ) ; } if ( ( VAR_493 == 0 ) && ( VAR_494 == 0 ) ) { VAR_495 = VAR_496 ; } if ( VAR_497 != VAR_498 ) { METHOD_100 ( VAR_499 , VAR_500 , VAR_501 , "%s:valuemismatchforsizeandsizecopy." , VAR_502 ) ; goto VAR_503 ; } if ( VAR_504 != ( TYPE_63 ) VAR_505 ) { METHOD_101 ( VAR_506 , VAR_507 , VAR_508 , "%s:valuemismatchforrecord_valuesdatasizeandsize." , VAR_509 ) ; goto VAR_510 ; } return ( 1 ) ; VAR_511 : if ( VAR_512 -> VAR_513 != VAR_514 ) { METHOD_102 ( & ( VAR_515 -> VAR_516 ) , VAR_517 ) ; } if ( VAR_518 -> VAR_519 != VAR_520 ) { METHOD_103 ( & ( VAR_521 -> VAR_522 ) , VAR_523 ) ; } if ( VAR_524 -> VAR_525 != VAR_526 ) { METHOD_104 ( & ( VAR_527 -> VAR_528 ) , VAR_529 ) ; } if ( VAR_530 -> VAR_531 != VAR_532 ) { METHOD_105 ( & ( VAR_533 -> VAR_534 ) , VAR_535 ) ; } if ( VAR_536 -> VAR_537 != VAR_538 ) { METHOD_106 ( & ( VAR_539 -> VAR_540 ) , VAR_541 ) ; } return ( - 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 = 0 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 TYPE_10 ;  TYPE_11 VAR_9 ;  VAR_10 = METHOD_1 ( VAR_11 ) ; METHOD_2 ( & VAR_12 , VAR_13 , 4 ) ; if ( ! METHOD_3 ( VAR_14 , ( ( TYPE_12 * ) & VAR_15 ) + 4 , sizeof ( TYPE_13 ) - 4 , & VAR_16 ) || VAR_17 != sizeof ( TYPE_14 ) - 4 || METHOD_4 ( VAR_18 . VAR_19 , VAR_20 , sizeof ( VAR_21 ) ) || METHOD_5 ( VAR_22 . VAR_23 , VAR_24 , sizeof ( VAR_25 ) ) ) { METHOD_6 ( "%sisnotavalid.W64file!" , VAR_26 ) ; return VAR_27 ; } else if ( ! ( VAR_28 -> VAR_29 & VAR_30 ) && ! METHOD_7 ( VAR_31 , & VAR_32 , sizeof ( VAR_33 ) ) ) { METHOD_8 ( "%s" , METHOD_9 ( VAR_34 ) ) ; return VAR_35 ; } if 1 METHOD_10 ( & VAR_36 , VAR_37 ) ; if ( VAR_38 && ! ( VAR_39 -> VAR_40 & VAR_41 ) && VAR_42 . VAR_43 && VAR_44 . VAR_45 + 1 && VAR_46 . VAR_47 != VAR_48 ) { METHOD_11 ( "%sisnotavalid.W64file!" , VAR_49 ) ; return VAR_50 ; } while ( 1 ) { if ( ! METHOD_12 ( VAR_51 , & VAR_52 , sizeof ( TYPE_15 ) , & VAR_53 ) || VAR_54 != sizeof ( TYPE_16 ) ) { METHOD_13 ( "%sisnotavalid.W64file!" , VAR_55 ) ; return VAR_56 ; } else if ( ! ( VAR_57 -> VAR_58 & VAR_59 ) && ! METHOD_14 ( VAR_60 , & VAR_61 , sizeof ( TYPE_17 ) ) ) { METHOD_15 ( "%s" , METHOD_16 ( VAR_62 ) ) ; return VAR_63 ; } METHOD_17 ( & VAR_64 , VAR_65 ) ; VAR_66 . VAR_67 -= sizeof ( VAR_68 ) ; if ( ! METHOD_18 ( VAR_69 . VAR_70 , VAR_71 , sizeof ( VAR_72 ) ) ) {  TYPE_18 VAR_73 = VAR_74 , VAR_75 ;  VAR_76 . VAR_77 = ( VAR_78 . VAR_79 + 7 ) & ~ 7L ; if ( VAR_80 . VAR_81 < 16 || VAR_82 . VAR_83 > sizeof ( TYPE_19 ) || ! METHOD_19 ( VAR_84 , & TYPE_20 , ( TYPE_21 ) VAR_85 . VAR_86 , & VAR_87 ) || VAR_88 != VAR_89 . VAR_90 ) { METHOD_20 ( "%sisnotavalid.W64file!" , VAR_91 ) ; return VAR_92 ; } else if ( ! ( VAR_93 -> VAR_94 & VAR_95 ) && ! METHOD_21 ( VAR_96 , & TYPE_22 , ( TYPE_23 ) VAR_97 . VAR_98 ) ) { METHOD_22 ( "%s" , METHOD_23 ( VAR_99 ) ) ; return VAR_100 ; } METHOD_24 ( & TYPE_24 , VAR_101 ) ; if ( VAR_102 ) { METHOD_25 ( "formattagsize=%d" , VAR_103 . VAR_104 ) ; METHOD_26 ( "FormatTag=%x,NumChannels=%d,BitsPerSample=%d" , TYPE_25 . VAR_105 , TYPE_26 . VAR_106 , TYPE_27 . VAR_107 ) ; METHOD_27 ( "BlockAlign=%d,SampleRate=%d,BytesPerSecond=%d" , TYPE_28 . VAR_108 , TYPE_29 . VAR_109 , TYPE_30 . VAR_110 ) ; if ( VAR_111 . VAR_112 > 16 ) METHOD_28 ( "cbSize=%d,ValidBitsPerSample=%d" , TYPE_31 . VAR_113 , TYPE_32 . VAR_114 ) ; if ( VAR_115 . VAR_116 > 20 ) METHOD_29 ( "ChannelMask=%x,SubFormat=%d" , TYPE_33 . VAR_117 , TYPE_34 . VAR_118 ) ; } if ( VAR_119 . VAR_120 > 16 && TYPE_35 . VAR_121 == 2 ) VAR_122 -> VAR_123 |= VAR_124 ; VAR_125 = ( TYPE_36 . VAR_126 == 0xfffe && VAR_127 . VAR_128 == 40 ) ? TYPE_37 . VAR_129 : TYPE_38 . VAR_130 ; VAR_131 -> VAR_132 = ( VAR_133 . VAR_134 == 40 && TYPE_39 . VAR_135 ) ? TYPE_40 . VAR_136 : TYPE_41 . VAR_137 ; if ( VAR_138 != 1 && VAR_139 != 3 ) VAR_140 = VAR_141 ; if ( VAR_142 == 3 && VAR_143 -> VAR_144 != 32 ) VAR_145 = VAR_146 ; if ( ! TYPE_42 . VAR_147 || TYPE_43 . VAR_148 > 256 || TYPE_44 . VAR_149 / TYPE_45 . VAR_150 < ( VAR_151 -> VAR_152 + 7 ) / 8 || TYPE_46 . VAR_153 / TYPE_47 . VAR_154 > 4 || TYPE_48 . VAR_155 % TYPE_49 . VAR_156 ) VAR_157 = VAR_158 ; if ( VAR_159 -> VAR_160 < 1 || VAR_161 -> VAR_162 > 32 ) VAR_163 = VAR_164 ; if ( ! VAR_165 ) { METHOD_30 ( "%sisanunsupported.W64format!" , VAR_166 ) ; return VAR_167 ; } if ( VAR_168 . VAR_169 < 40 ) { if ( ! VAR_170 -> VAR_171 && ! ( VAR_172 -> VAR_173 & VAR_174 ) ) { if ( TYPE_50 . VAR_175 <= 2 ) VAR_176 -> VAR_177 = 0x5 - TYPE_51 . VAR_178 ; else if ( TYPE_52 . VAR_179 <= 18 ) VAR_180 -> VAR_181 = ( 1 << TYPE_53 . VAR_182 ) - 1 ; else VAR_183 -> VAR_184 = 0x3ffff ; } } else if ( TYPE_54 . VAR_185 && ( VAR_186 -> VAR_187 || ( VAR_188 -> VAR_189 & VAR_190 ) ) ) { METHOD_31 ( "thisW64filealreadyhaschannelorderinformation!" ) ; return VAR_191 ; } else if ( TYPE_55 . VAR_192 ) VAR_193 -> VAR_194 = TYPE_56 . VAR_195 ; if ( VAR_196 == 3 ) VAR_197 -> VAR_198 = 127 ; else if ( ( VAR_199 -> VAR_200 & VAR_201 ) && TYPE_57 . VAR_202 / TYPE_58 . VAR_203 == 4 ) { if ( TYPE_59 . VAR_204 == 24 ) VAR_205 -> VAR_206 = 127 + 23 ; else if ( TYPE_60 . VAR_207 == 32 ) VAR_208 -> VAR_209 = 127 + 15 ; } if ( VAR_210 ) { if ( VAR_211 -> VAR_212 == 127 ) METHOD_32 ( "dataformat:normalized32-bitfloatingpoint" ) ; else METHOD_33 ( "dataformat:%d-bitintegersstoredin%dbyte(s)" , VAR_213 -> VAR_214 , TYPE_61 . VAR_215 / TYPE_62 . VAR_216 ) ; } } else if ( ! METHOD_34 ( VAR_217 . VAR_218 , VAR_219 , sizeof ( VAR_220 ) ) ) { if ( ! TYPE_63 . VAR_221 ) { METHOD_35 ( "%sisnotavalid.W64file!" , VAR_222 ) ; return VAR_223 ; } if ( ( VAR_224 -> VAR_225 & VAR_226 ) || VAR_227 . VAR_228 <= 0 ) { VAR_229 -> VAR_230 |= VAR_231 ; if ( VAR_232 && METHOD_36 ( VAR_233 ) != - 1 ) VAR_234 = ( VAR_235 - METHOD_37 ( VAR_236 ) ) / TYPE_64 . VAR_237 ; else VAR_238 = - 1 ; } else { if ( VAR_239 && VAR_240 - VAR_241 . VAR_242 > 16777216 ) { METHOD_38 ( "this.W64filehasover16MBofextraRIFFdata,probablyiscorrupt!" ) ; return VAR_243 ; } VAR_244 = VAR_245 . VAR_246 / TYPE_65 . VAR_247 ; if ( ! VAR_248 ) { METHOD_39 ( "this.W64filehasnoaudiosamples,probablyiscorrupt!" ) ; return VAR_249 ; } if ( VAR_250 > VAR_251 ) { METHOD_40 ( "%shastoomanysamplesforWavPack!" , VAR_252 ) ; return VAR_253 ; } } VAR_254 -> VAR_255 = TYPE_66 . VAR_256 / TYPE_67 . VAR_257 ; VAR_258 -> VAR_259 = TYPE_68 . VAR_260 ; VAR_261 -> VAR_262 = TYPE_69 . VAR_263 ; break ; } else { TYPE_70 VAR_264 = ( VAR_265 . VAR_266 + 7 ) & ~ 7L ; TYPE_71 * VAR_267 ; if ( VAR_268 < 0 || VAR_269 > 4194304 ) { METHOD_41 ( "%sisnotavalid.W64file!" , VAR_270 ) ; return VAR_271 ; } VAR_272 = METHOD_42 ( VAR_273 ) ; if ( VAR_274 ) METHOD_43 ( "extraunknownchunk\\"%c%c%c%c\\"of%dbytes" , VAR_275 . VAR_276 [ 0 ] , VAR_277 . VAR_278 [ 1 ] , VAR_279 . VAR_280 [ 2 ] , VAR_281 . VAR_282 [ 3 ] , VAR_283 . VAR_284 ) ; if ( ! METHOD_44 ( VAR_285 , VAR_286 , VAR_287 , & VAR_288 ) || VAR_289 != VAR_290 || ( ! ( VAR_291 -> VAR_292 & VAR_293 ) && ! METHOD_45 ( VAR_294 , VAR_295 , VAR_296 ) ) ) { METHOD_46 ( "%s" , METHOD_47 ( VAR_297 ) ) ; METHOD_48 ( VAR_298 ) ; return VAR_299 ; } METHOD_49 ( VAR_300 ) ; } } if ( ! METHOD_50 ( VAR_301 , VAR_302 , VAR_303 , VAR_304 ) ) { METHOD_51 ( "%s:%s" , VAR_305 , METHOD_52 ( VAR_306 ) ) ; return VAR_307 ; } return VAR_308 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; VAR_10 = METHOD_1 ( VAR_11 ) ; METHOD_2 ( & VAR_12 , VAR_13 , 4 ) ; if ( ( ! METHOD_3 ( VAR_14 , ( ( TYPE_10 * ) & VAR_15 ) + 4 , sizeof ( TYPE_11 ) - 4 , & VAR_16 ) || VAR_17 != sizeof ( TYPE_12 ) - 4 ) || METHOD_4 ( VAR_18 . VAR_19 , "DSD" , 4 ) ) { METHOD_5 ( "%sisnotavalid.DFFfile!" , VAR_20 ) ; return VAR_21 ; } else if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) && ! METHOD_6 ( VAR_25 , & VAR_26 , sizeof ( TYPE_13 ) ) ) { METHOD_7 ( "%s" , METHOD_8 ( VAR_27 ) ) ; return VAR_28 ; } if 1 METHOD_9 ( & VAR_29 , VAR_30 ) ; if ( VAR_31 && ! ( VAR_32 -> VAR_33 & VAR_34 ) && VAR_35 . VAR_36 && VAR_37 . VAR_38 + 1 && VAR_39 . VAR_40 + 12 != VAR_41 ) { METHOD_10 ( "%sisnotavalid.DFFfile(bytotalsize)!" , VAR_42 ) ; return VAR_43 ; } if ( VAR_44 ) METHOD_11 ( "fileheaderindicatedlength=%lld" , VAR_45 . VAR_46 ) ; while ( 1 ) { if ( ! METHOD_12 ( VAR_47 , & VAR_48 , sizeof ( TYPE_14 ) , & VAR_49 ) || VAR_50 != sizeof ( TYPE_15 ) ) { METHOD_13 ( "%sisnotavalid.DFFfile!" , VAR_51 ) ; return VAR_52 ; } else if ( ! ( VAR_53 -> VAR_54 & VAR_55 ) && ! METHOD_14 ( VAR_56 , & VAR_57 , sizeof ( TYPE_16 ) ) ) { METHOD_15 ( "%s" , METHOD_16 ( VAR_58 ) ) ; return VAR_59 ; } METHOD_17 ( & VAR_60 , VAR_61 ) ; if ( VAR_62 ) METHOD_18 ( "chunkheaderindicatedlength=%lld" , VAR_63 . VAR_64 ) ; if ( ! METHOD_19 ( VAR_65 . VAR_66 , "FVER" , 4 ) ) { TYPE_17 VAR_67 ; if ( VAR_68 . VAR_69 != sizeof ( VAR_70 ) || ! METHOD_20 ( VAR_71 , & VAR_72 , sizeof ( VAR_73 ) , & VAR_74 ) || VAR_75 != sizeof ( VAR_76 ) ) { METHOD_21 ( "%sisnotavalid.DFFfile!" , VAR_77 ) ; return VAR_78 ; } else if ( ! ( VAR_79 -> VAR_80 & VAR_81 ) && ! METHOD_22 ( VAR_82 , & VAR_83 , sizeof ( VAR_84 ) ) ) { METHOD_23 ( "%s" , METHOD_24 ( VAR_85 ) ) ; return VAR_86 ; } METHOD_25 ( & VAR_87 , "L" ) ; if ( VAR_88 ) METHOD_26 ( "dsdifffileversion=0x%08x" , VAR_89 ) ; } else if ( ! METHOD_27 ( VAR_90 . VAR_91 , "PROP" , 4 ) ) { TYPE_18 * VAR_92 ; if ( VAR_93 . VAR_94 < 4 || VAR_95 . VAR_96 > 1024 ) { METHOD_28 ( "%sisnotavalid.DFFfile!" , VAR_97 ) ; return VAR_98 ; } if ( VAR_99 ) METHOD_29 ( "gotPROPchunkof%dbytestotal" , ( TYPE_19 ) VAR_100 . VAR_101 ) ; VAR_102 = METHOD_30 ( ( TYPE_20 ) VAR_103 . VAR_104 ) ; if ( ! METHOD_31 ( VAR_105 , VAR_106 , ( TYPE_21 ) VAR_107 . VAR_108 , & VAR_109 ) || VAR_110 != VAR_111 . VAR_112 ) { METHOD_32 ( "%sisnotavalid.DFFfile!" , VAR_113 ) ; METHOD_33 ( VAR_114 ) ; return VAR_115 ; } else if ( ! ( VAR_116 -> VAR_117 & VAR_118 ) && ! METHOD_34 ( VAR_119 , VAR_120 , ( TYPE_22 ) VAR_121 . VAR_122 ) ) { METHOD_35 ( "%s" , METHOD_36 ( VAR_123 ) ) ; METHOD_37 ( VAR_124 ) ; return VAR_125 ; } if ( ! METHOD_38 ( VAR_126 , "SND" , 4 ) ) { TYPE_23 * VAR_127 = VAR_128 + 4 , * VAR_129 = VAR_130 + VAR_131 . VAR_132 ; TYPE_24 VAR_133 = 0 , VAR_134 , VAR_135 = 0 ;  TYPE_25 VAR_136 ;  while ( VAR_137 - VAR_138 >= sizeof ( VAR_139 ) ) { METHOD_39 ( & VAR_140 , VAR_141 , sizeof ( VAR_142 ) ) ; VAR_143 += sizeof ( VAR_144 ) ; METHOD_40 ( & VAR_145 , VAR_146 ) ; if ( VAR_147 . VAR_148 > 0 && VAR_149 . VAR_150 <= VAR_151 - VAR_152 ) { if ( ! METHOD_41 ( VAR_153 . VAR_154 , "FS" , 4 ) && VAR_155 . VAR_156 == 4 ) { METHOD_42 ( & VAR_157 , VAR_158 , sizeof ( VAR_159 ) ) ; METHOD_43 ( & VAR_160 , "L" ) ; VAR_161 += VAR_162 . VAR_163 ; if ( VAR_164 ) METHOD_44 ( "gotsamplerateof%uHz" , VAR_165 ) ; } else if ( ! METHOD_45 ( VAR_166 . VAR_167 , "CHNL" , 4 ) && VAR_168 . VAR_169 >= 2 ) { METHOD_46 ( & VAR_170 , VAR_171 , sizeof ( VAR_172 ) ) ; METHOD_47 ( & VAR_173 , "S" ) ; VAR_174 += sizeof ( VAR_175 ) ; VAR_176 = ( TYPE_26 ) ( VAR_177 . VAR_178 - sizeof ( VAR_179 ) ) / 4 ; if ( VAR_180 < VAR_181 || VAR_182 < 1 || VAR_183 > 256 ) { METHOD_48 ( "%sisnotavalid.DFFfile!" , VAR_184 ) ; METHOD_49 ( VAR_185 ) ; return VAR_186 ; } while ( VAR_187 -- ) { if ( ! METHOD_50 ( VAR_188 , "SLFT" , 4 ) || ! METHOD_51 ( VAR_189 , "MLFT" , 4 ) ) VAR_190 |= 0x1 ; else if ( ! METHOD_52 ( VAR_191 , "SRGT" , 4 ) || ! METHOD_53 ( VAR_192 , "MRGT" , 4 ) ) VAR_193 |= 0x2 ; else if ( ! METHOD_54 ( VAR_194 , "LS" , 4 ) ) VAR_195 |= 0x10 ; else if ( ! METHOD_55 ( VAR_196 , "RS" , 4 ) ) VAR_197 |= 0x20 ; else if ( ! METHOD_56 ( VAR_198 , "C" , 4 ) ) VAR_199 |= 0x4 ; else if ( ! METHOD_57 ( VAR_200 , "LFE" , 4 ) ) VAR_201 |= 0x8 ; else if ( VAR_202 ) METHOD_58 ( "undchannelID%c%c%c%c" , VAR_203 [ 0 ] , VAR_204 [ 1 ] , VAR_205 [ 2 ] , VAR_206 [ 3 ] ) ; VAR_207 += 4 ; } if ( VAR_208 ) METHOD_59 ( "%dchannels,mask=0x%08x" , VAR_209 , VAR_210 ) ; } else if ( ! METHOD_60 ( VAR_211 . VAR_212 , "CMPR" , 4 ) && VAR_213 . VAR_214 >= 4 ) { if ( METHOD_61 ( VAR_215 , "DSD" , 4 ) ) { METHOD_62 ( "DSDIFFfilesmustbeuncompressed,not\\"%c%c%c%c\\"!" , VAR_216 [ 0 ] , VAR_217 [ 1 ] , VAR_218 [ 2 ] , VAR_219 [ 3 ] ) ; METHOD_63 ( VAR_220 ) ; return VAR_221 ; } VAR_222 += VAR_223 . VAR_224 ; } else { if ( VAR_225 ) METHOD_64 ( "gotPROP/SNDchunktype\\"%c%c%c%c\\"of%dbytes" , VAR_226 . VAR_227 [ 0 ] , VAR_228 . VAR_229 [ 1 ] , VAR_230 . VAR_231 [ 2 ] , VAR_232 . VAR_233 [ 3 ] , VAR_234 . VAR_235 ) ; VAR_236 += VAR_237 . VAR_238 ; } } else { METHOD_65 ( "%sisnotavalid.DFFfile!" , VAR_239 ) ; METHOD_66 ( VAR_240 ) ; return VAR_241 ; } } if ( VAR_242 && ( VAR_243 -> VAR_244 || ( VAR_245 -> VAR_246 & VAR_247 ) ) ) { METHOD_67 ( "thisDSDIFFfilealreadyhaschannelorderinformation!" ) ; METHOD_68 ( VAR_248 ) ; return VAR_249 ; } else if ( VAR_250 ) VAR_251 -> VAR_252 = VAR_253 ; VAR_254 -> VAR_255 = 8 ; VAR_256 -> VAR_257 = 1 ; VAR_258 -> VAR_259 = VAR_260 ; VAR_261 -> VAR_262 = VAR_263 / 8 ; VAR_264 -> VAR_265 |= VAR_266 ; } else if ( VAR_267 ) METHOD_69 ( "gotunknownPROPchunktype\\"%c%c%c%c\\"of%dbytes" , VAR_268 [ 0 ] , VAR_269 [ 1 ] , VAR_270 [ 2 ] , VAR_271 [ 3 ] , VAR_272 . VAR_273 ) ; METHOD_70 ( VAR_274 ) ; } else if ( ! METHOD_71 ( VAR_275 . VAR_276 , "DSD" , 4 ) ) {  if ( ! VAR_277 -> VAR_278 ) {  METHOD_72 ( "%sisnotavalid.DFFfile!" , VAR_279 ) ; return VAR_280 ; } VAR_281 = VAR_282 . VAR_283 / VAR_284 -> VAR_285 ; break ; } else { TYPE_27 VAR_286 = ( TYPE_28 ) ( ( ( VAR_287 . VAR_288 ) + 1 ) & ~ ( TYPE_29 ) 1 ) ; TYPE_30 * VAR_289 ; if ( VAR_290 < 0 || VAR_291 > 4194304 ) { METHOD_73 ( "%sisnotavalid.DFFfile!" , VAR_292 ) ; return VAR_293 ; } VAR_294 = METHOD_74 ( VAR_295 ) ; if ( VAR_296 ) METHOD_75 ( "extraunknownchunk\\"%c%c%c%c\\"of%dbytes" , VAR_297 . VAR_298 [ 0 ] , VAR_299 . VAR_300 [ 1 ] , VAR_301 . VAR_302 [ 2 ] , VAR_303 . VAR_304 [ 3 ] , VAR_305 . VAR_306 ) ; if ( ! METHOD_76 ( VAR_307 , VAR_308 , VAR_309 , & VAR_310 ) || VAR_311 != VAR_312 || ( ! ( VAR_313 -> VAR_314 & VAR_315 ) && ! METHOD_77 ( VAR_316 , VAR_317 , VAR_318 ) ) ) { METHOD_78 ( "%s" , METHOD_79 ( VAR_319 ) ) ; METHOD_80 ( VAR_320 ) ; return VAR_321 ; } METHOD_81 ( VAR_322 ) ; } } if ( VAR_323 ) METHOD_82 ( "settingconfigurationwith%lldsamples" , VAR_324 ) ; if ( ! METHOD_83 ( VAR_325 , VAR_326 , VAR_327 , VAR_328 ) ) { METHOD_84 ( "%s:%s" , VAR_329 , METHOD_85 ( VAR_330 ) ) ; return VAR_331 ; } return VAR_332 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 ; unsigned TYPE_3 VAR_4 ; if ( METHOD_1 ( ! VAR_5 ) ) return - VAR_6 ; if ( VAR_7 -> VAR_8 & VAR_9 ) { if ( ! VAR_10 ) { METHOD_2 ( & VAR_11 , VAR_12 ) ; VAR_13 -> VAR_14 &= ~ VAR_15 ;  METHOD_3 ( & VAR_16 , VAR_17 ) ;  } goto VAR_18 ; } VAR_19 = VAR_20 -> VAR_21 ; if ( ! VAR_22 ) return - VAR_23 ; METHOD_4 ( & VAR_24 -> VAR_25 , VAR_26 ) ; METHOD_5 ( & VAR_27 -> VAR_28 ) ; METHOD_6 ( & VAR_29 -> VAR_30 ) ; if ( ( VAR_31 -> VAR_32 & VAR_33 ) && ! ( -- VAR_34 -> VAR_35 ) ) { VAR_36 -> VAR_37 . METHOD_7 ( VAR_38 ) ; if ( VAR_39 -> VAR_40 & VAR_41 ) { VAR_42 -> VAR_43 &= ~ VAR_44 ; METHOD_8 ( VAR_45 , 0 ) ; if ( VAR_46 -> VAR_47 & VAR_48 ) { VAR_49 -> VAR_50 &= ~ VAR_51 ; VAR_52 -> VAR_53 . METHOD_9 ( VAR_54 ) ; } } } if ( ! VAR_55 ) VAR_56 -> VAR_57 &= ~ ( VAR_58 | VAR_59 ) ; METHOD_10 ( & VAR_60 -> VAR_61 , VAR_62 ) ; VAR_63 : if ( VAR_64 != VAR_65 ) METHOD_11 ( VAR_66 , VAR_67 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 [ ] ) { VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; TYPE_4 * VAR_7 = VAR_8 [ 0 ] ; TYPE_5 * VAR_9 = METHOD_1 ( VAR_10 [ 1 ] ) ; TYPE_6 * VAR_11 = VAR_12 [ 2 ] ; const TYPE_7 * VAR_13 ; unsigned TYPE_8 VAR_14 , VAR_15 , VAR_16 ; TYPE_9 VAR_17 ; VAR_18 * VAR_19 ; if ( VAR_20 < 1 ) { METHOD_2 ( VAR_21 , VAR_22 , VAR_23 , "FLAGS" ) ; METHOD_3 ( VAR_24 , VAR_25 , METHOD_4 ( "Syntax:FLAGS<channel>[target][flags]" ) ) ; return ; } VAR_26 = METHOD_5 ( VAR_27 ) ; if ( ! VAR_28 ) { METHOD_6 ( VAR_29 , VAR_30 , METHOD_7 ( "Channel\\2%s\\2isnotregistered." ) , VAR_31 ) ; return ; } if ( METHOD_8 ( VAR_32 , "private:close:closer" ) && ( VAR_33 || ! METHOD_9 ( VAR_34 , VAR_35 ) ) ) { METHOD_10 ( VAR_36 , VAR_37 , METHOD_11 ( "\\2%s\\2isclosed." ) , VAR_38 ) ; return ; } if ( ! VAR_39 || ( VAR_40 && VAR_41 [ 0 ] == '+' && VAR_42 == VAR_43 ) ) { unsigned TYPE_10 VAR_44 = ( VAR_45 != VAR_46 ) ? METHOD_12 ( VAR_47 , 0 ) : 0 ; METHOD_13 ( VAR_48 , VAR_49 , VAR_50 ) ; return ; }  else if ( ! METHOD_14 ( VAR_51 , "LIST" ) && METHOD_15 ( VAR_52 ) == VAR_53 )  { METHOD_16 ( VAR_54 , VAR_55 , 0 ) ; METHOD_17 ( VAR_56 ) ; return ; }  else if ( ! METHOD_18 ( VAR_57 , "CLEAR" ) && METHOD_19 ( VAR_58 ) == VAR_59 )  { METHOD_20 ( VAR_60 ) ; if ( ! METHOD_21 ( VAR_61 , VAR_62 , VAR_63 ) ) { METHOD_22 ( VAR_64 , VAR_65 , "Youarenotauthorizedtoperformthisoperation." ) ; return ; } VAR_66 * VAR_67 ; METHOD_23 ( VAR_68 , VAR_69 , VAR_70 -> VAR_71 . VAR_72 ) { VAR_73 = VAR_74 -> VAR_75 ; if ( VAR_76 -> VAR_77 & VAR_78 ) continue ; METHOD_24 ( VAR_79 ) ; } METHOD_25 ( VAR_80 , VAR_81 , "CLEAR:FLAGS:\\2%s\\2" , VAR_82 -> VAR_83 ) ; METHOD_26 ( VAR_84 , METHOD_27 ( "Clearedflagsin\\2%s\\2." ) , VAR_85 -> VAR_86 ) ; return ; }  else if ( ! METHOD_28 ( VAR_87 , "MODIFY" ) && METHOD_29 ( VAR_88 ) == VAR_89 )  { METHOD_30 ( VAR_90 ) ; if ( VAR_91 < 3 ) { METHOD_31 ( VAR_92 , VAR_93 , VAR_94 , "FLAGS" ) ; METHOD_32 ( VAR_95 , VAR_96 , METHOD_33 ( "Syntax:FLAGS<channel>MODIFY[target]<flags>" ) ) ; return ; } VAR_97 = METHOD_34 ( VAR_98 [ 2 ] , '' ) ; if ( VAR_99 ) * VAR_100 ++ = '\\0' ; VAR_101 = METHOD_35 ( VAR_102 [ 2 ] ) ; } { VAR_103 * VAR_104 ; if ( ! VAR_105 -> VAR_106 ) { METHOD_36 ( VAR_107 , VAR_108 , METHOD_37 ( "Youarenotloggedin." ) ) ; return ; } if ( ! VAR_109 ) { if ( ! ( VAR_110 -> VAR_111 & VAR_112 ) && ! METHOD_38 ( VAR_113 , VAR_114 , VAR_115 ) ) { METHOD_39 ( VAR_116 , VAR_117 , METHOD_40 ( "Youarenotauthorizedtoexecutethiscommand." ) ) ; return ; } if ( METHOD_41 ( VAR_118 ) ) VAR_119 = METHOD_42 ( VAR_120 , VAR_121 , 0 ) ; else { if ( ! ( VAR_122 = METHOD_43 ( VAR_123 ) ) ) { METHOD_44 ( VAR_124 , VAR_125 , METHOD_45 ( "\\2%s\\2isnotregistered." ) , VAR_126 ) ; return ; } METHOD_46 ( VAR_127 ) ; VAR_128 = METHOD_47 ( VAR_129 -> VAR_130 ) ; VAR_131 = METHOD_48 ( VAR_132 , VAR_133 , 0 ) ; } if ( VAR_134 != VAR_135 ) { VAR_136 = METHOD_49 ( VAR_137 -> VAR_138 , 0 ) ; METHOD_50 ( VAR_139 , VAR_140 , METHOD_51 ( "Flagsfor\\2%s\\2in\\2%s\\2are\\2%s\\2." ) , VAR_141 , VAR_142 , VAR_143 ) ; } else METHOD_52 ( VAR_144 , "" , METHOD_53 ( "Noflagsfor\\2%s\\2in\\2%s\\2." ) , VAR_145 , VAR_146 ) ; METHOD_54 ( VAR_147 , VAR_148 , "FLAGS:\\2%s\\2on\\2%s\\2" , VAR_149 -> VAR_150 , VAR_151 ) ; return ; } VAR_152 = METHOD_55 ( VAR_153 , VAR_154 ) ; if ( VAR_155 & VAR_156 ) VAR_157 = VAR_158 ; else { if ( ! ( VAR_159 & VAR_160 ) ) { if ( VAR_161 & VAR_162 || VAR_163 -> VAR_164 == VAR_165 || METHOD_56 ( VAR_166 , METHOD_57 ( VAR_167 -> VAR_168 ) -> VAR_169 ) || METHOD_58 ( VAR_170 , "-*" ) ) { METHOD_59 ( VAR_171 , VAR_172 , METHOD_60 ( "Youarenotauthorizedtoexecutethiscommand." ) ) ; return ; } } if ( METHOD_61 ( VAR_173 , METHOD_62 ( VAR_174 -> VAR_175 ) -> VAR_176 ) ) VAR_177 = METHOD_63 ( VAR_178 , VAR_179 ) ; else VAR_180 |= METHOD_64 ( VAR_181 , VAR_182 ) ; } if ( * VAR_183 == '+' || * VAR_184 == '-' || * VAR_185 == '=' ) { METHOD_65 ( VAR_186 , & VAR_187 , & VAR_188 ) ; if ( VAR_189 == 0 && VAR_190 == 0 ) { METHOD_66 ( VAR_191 , VAR_192 , METHOD_67 ( "Novalidflagsgiven,use/%s%sHELPFLAGSforalist" ) , VAR_193 -> VAR_194 ? "" : "msg" , VAR_195 . VAR_196 -> VAR_197 ) ; return ; } } else { VAR_198 = METHOD_68 ( VAR_199 , VAR_200 ) ; if ( VAR_201 == 0 ) { if ( * VAR_202 == '+' || * VAR_203 == '-' || * VAR_204 == '=' ) METHOD_69 ( VAR_205 , VAR_206 , METHOD_70 ( "Usage:FLAGS%s[target][flags]" ) , VAR_207 -> VAR_208 ) ; else METHOD_71 ( VAR_209 , VAR_210 , METHOD_72 ( "Invalidtemplatenamegiven,use/%s%sTEMPLATE%sforalist" ) , VAR_211 -> VAR_212 ? "" : "msg" , VAR_213 . VAR_214 -> VAR_215 , VAR_216 -> VAR_217 ) ; return ; } VAR_218 = VAR_219 & ~ VAR_220 ; } if ( ! METHOD_73 ( VAR_221 ) ) { if ( ! ( VAR_222 = METHOD_74 ( VAR_223 ) ) ) { METHOD_75 ( VAR_224 , VAR_225 , METHOD_76 ( "\\2%s\\2isnotregistered." ) , VAR_226 ) ; return ; } METHOD_77 ( VAR_227 ) ; VAR_228 = METHOD_78 ( VAR_229 -> VAR_230 ) ; VAR_231 = METHOD_79 ( VAR_232 , VAR_233 , VAR_234 , VAR_235 , METHOD_80 ( VAR_236 -> VAR_237 ) ) ; if ( VAR_238 -> VAR_239 & VAR_240 && VAR_241 & VAR_242 && ! ( VAR_243 & VAR_244 ) ) { METHOD_81 ( VAR_245 , VAR_246 , METHOD_82 ( "Youmaynotremoveafounder\'s+faccess." ) ) ; return ; } if ( VAR_247 -> VAR_248 & VAR_249 && VAR_250 & VAR_251 && METHOD_83 ( VAR_252 ) == 1 ) { METHOD_84 ( VAR_253 , VAR_254 , METHOD_85 ( "Youmaynotremovethelastfounder." ) ) ; return ; } if ( ! ( VAR_255 -> VAR_256 & VAR_257 ) && VAR_258 & VAR_259 ) { if ( METHOD_86 ( VAR_260 ) >= VAR_261 . VAR_262 ) { METHOD_87 ( VAR_263 , VAR_264 , METHOD_88 ( "Only%dfoundersallowedperchannel." ) , VAR_265 . VAR_266 ) ; METHOD_89 ( VAR_267 ) ; return ; } if ( ! METHOD_90 ( VAR_268 ) ) { METHOD_91 ( VAR_269 , VAR_270 , METHOD_92 ( "\\2%s\\2hastoomanychannelsregistered." ) , VAR_271 -> VAR_272 ) ; METHOD_93 ( VAR_273 ) ; return ; } if ( ! METHOD_94 ( VAR_274 ) ) { METHOD_95 ( VAR_275 , VAR_276 , METHOD_96 ( "\\2%s\\2cannottakefoundershipofachannel." ) , VAR_277 -> VAR_278 ) ; METHOD_97 ( VAR_279 ) ; return ; } } if ( VAR_280 & VAR_281 ) VAR_282 |= VAR_283 , VAR_284 &= ~ VAR_285 ; if ( METHOD_98 ( VAR_286 ) && ( VAR_287 & METHOD_99 ( VAR_288 ) -> VAR_289 && VAR_290 != VAR_291 && VAR_292 != 0 && ( VAR_293 -> VAR_294 == 0 || VAR_295 -> VAR_296 == VAR_297 ) ) ) { METHOD_100 ( VAR_298 , VAR_299 , METHOD_101 ( "\\2%s\\2doesnotwishtobeaddedtochannelaccesslists(NEVEROPset)." ) , VAR_300 -> VAR_301 ) ; METHOD_102 ( VAR_302 ) ; return ; } if ( VAR_303 -> VAR_304 == 0 && METHOD_103 ( VAR_305 ) ) { METHOD_104 ( VAR_306 , VAR_307 , METHOD_105 ( "Channel%saccesslistisfull." ) , VAR_308 -> VAR_309 ) ; METHOD_106 ( VAR_310 ) ; return ; } VAR_311 . VAR_312 = VAR_313 ; VAR_314 . VAR_315 = VAR_316 -> VAR_317 ; if ( ! METHOD_107 ( VAR_318 , & VAR_319 , & VAR_320 , VAR_321 ) ) { METHOD_108 ( VAR_322 , VAR_323 , METHOD_109 ( "Youarenotallowedtoset\\2%s\\2on\\2%s\\2in\\2%s\\2." ) , METHOD_110 ( VAR_324 , VAR_325 ) , VAR_326 -> VAR_327 , VAR_328 -> VAR_329 ) ; METHOD_111 ( VAR_330 ) ; return ; } VAR_331 . VAR_332 = VAR_333 -> VAR_334 ; METHOD_112 ( & VAR_335 ) ; METHOD_113 ( VAR_336 ) ; } else { if ( VAR_337 & VAR_338 ) { METHOD_114 ( VAR_339 , VAR_340 , METHOD_115 ( "Youmaynotsetfounderstatusonahostmask." ) ) ; return ; } VAR_341 = METHOD_116 ( VAR_342 , VAR_343 , VAR_344 , VAR_345 , METHOD_117 ( VAR_346 -> VAR_347 ) ) ; if ( VAR_348 -> VAR_349 == 0 && METHOD_118 ( VAR_350 ) ) { METHOD_119 ( VAR_351 , VAR_352 , METHOD_120 ( "Channel%saccesslistisfull." ) , VAR_353 -> VAR_354 ) ; METHOD_121 ( VAR_355 ) ; return ; } VAR_356 . VAR_357 = VAR_358 ; VAR_359 . VAR_360 = VAR_361 -> VAR_362 ; if ( ! METHOD_122 ( VAR_363 , & VAR_364 , & VAR_365 , VAR_366 ) ) { METHOD_123 ( VAR_367 , VAR_368 , METHOD_124 ( "Youarenotallowedtoset\\2%s\\2on\\2%s\\2in\\2%s\\2." ) , METHOD_125 ( VAR_369 , VAR_370 ) , VAR_371 , VAR_372 -> VAR_373 ) ; METHOD_126 ( VAR_374 ) ; return ; } VAR_375 . VAR_376 = VAR_377 -> VAR_378 ; METHOD_127 ( & VAR_379 ) ; METHOD_128 ( VAR_380 ) ; } if ( ( VAR_381 | VAR_382 ) == 0 ) { METHOD_129 ( VAR_383 , VAR_384 , METHOD_130 ( "Channelaccessto\\2%s\\2for\\2%s\\2unchanged." ) , VAR_385 , VAR_386 ) ; return ; } VAR_387 = METHOD_131 ( VAR_388 , VAR_389 ) ; METHOD_132 ( VAR_390 , METHOD_133 ( "Flags\\2%s\\2wereseton\\2%s\\2in\\2%s\\2." ) , VAR_391 , VAR_392 , VAR_393 ) ; METHOD_134 ( VAR_394 , VAR_395 , "FLAGS:\\2%s\\2\\2%s\\2\\2%s\\2" , VAR_396 -> VAR_397 , VAR_398 , VAR_399 ) ; METHOD_135 ( VAR_400 , "\\2%s\\2setflags\\2%s\\2on\\2%s\\2" , METHOD_136 ( VAR_401 ) , VAR_402 , VAR_403 ) ; } METHOD_137 ( VAR_404 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_2 ( VAR_5 -> VAR_6 ) ; TYPE_2 * VAR_7 = VAR_8 -> VAR_9 ;  METHOD_3 ( VAR_10 , VAR_11 ) ;  METHOD_4 ( VAR_12 , VAR_13 , VAR_14 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { if ( VAR_3 -> VAR_4 >= 7 && VAR_5 -> VAR_6 < VAR_7 - VAR_8 && ! METHOD_1 ( VAR_9 -> VAR_10 , "GAB2" ) && METHOD_2 ( VAR_11 -> VAR_12 + 5 ) == 2 ) { TYPE_4 VAR_13 [ 256 ] ; TYPE_5 VAR_14 = VAR_15 , VAR_16 ; TYPE_6 * VAR_17 = VAR_18 -> VAR_19 ; VAR_20 * VAR_21 ; TYPE_7 VAR_22 ; TYPE_8 VAR_23 ; TYPE_9 * VAR_24 = METHOD_3 ( VAR_25 -> VAR_26 + 7 , VAR_27 -> VAR_28 - 7 , 0 , VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; TYPE_10 VAR_33 ; unsigned TYPE_11 VAR_34 = METHOD_4 ( VAR_35 ) ; if ( VAR_36 > VAR_37 -> VAR_38 - VAR_39 -> VAR_40 ) goto VAR_41 ; VAR_42 = METHOD_5 ( VAR_43 , VAR_44 , VAR_45 , sizeof ( VAR_46 ) ) ; METHOD_6 ( VAR_47 , VAR_48 - VAR_49 ) ; if ( * VAR_50 ) METHOD_7 ( & VAR_51 -> VAR_52 , "title" , VAR_53 , 0 ) ; METHOD_8 ( VAR_54 ) ; METHOD_9 ( VAR_55 ) ; VAR_56 = VAR_57 -> VAR_58 - VAR_59 -> VAR_60 ; VAR_61 = ( TYPE_12 ) { . VAR_62 = METHOD_10 ( VAR_63 + VAR_64 ) , . VAR_65 = VAR_66 } ; if ( ! VAR_67 . VAR_68 ) goto VAR_69 ; METHOD_11 ( VAR_70 . VAR_71 , VAR_72 -> VAR_73 , VAR_74 ) ; VAR_75 = METHOD_12 ( & VAR_76 , 1 , & VAR_77 ) ; METHOD_13 ( & VAR_78 . VAR_79 ) ; if ( ! VAR_80 ) goto VAR_81 ;  if ( ! ( VAR_82 -> VAR_83 = METHOD_14 ( ) ) )  goto VAR_84 ; VAR_85 -> VAR_86 -> VAR_87 = VAR_88 ; if ( METHOD_15 ( VAR_89 -> VAR_90 , VAR_91 ) < 0 ) goto VAR_92 ; if ( ! METHOD_16 ( & VAR_93 -> VAR_94 , "" , VAR_95 , VAR_96 ) ) { if ( VAR_97 -> VAR_98 -> VAR_99 != 1 ) goto VAR_100 ; METHOD_17 ( VAR_101 -> VAR_102 , & VAR_103 -> VAR_104 ) ; METHOD_18 ( VAR_105 -> VAR_106 , VAR_107 -> VAR_108 -> VAR_109 [ 0 ] -> VAR_110 ) ; VAR_111 = VAR_112 -> VAR_113 -> VAR_114 [ 0 ] -> VAR_115 ; METHOD_19 ( VAR_116 , 64 , VAR_117 . VAR_118 , VAR_119 . VAR_120 ) ; } VAR_121 -> VAR_122 = VAR_123 -> VAR_124 ; METHOD_20 ( VAR_125 , 0 , sizeof ( * VAR_126 ) ) ; return 1 ; VAR_127 : METHOD_21 ( & VAR_128 -> VAR_129 ) ; METHOD_22 ( & VAR_130 ) ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 * * VAR_7 , TYPE_9 * VAR_8 ) { TYPE_10 VAR_9 ; TYPE_11 VAR_10 = 0 ; TYPE_12 VAR_11 , VAR_12 ; TYPE_13 VAR_13 ; TYPE_14 VAR_14 ; TYPE_15 VAR_15 = 0 ; TYPE_16 VAR_16 ; TYPE_17 VAR_17 ;  TYPE_18 VAR_18 = 0 ;  TYPE_19 VAR_19 = 0 , VAR_20 = 0 ; VAR_21 = 0 ; VAR_22 = 0 ; if ( ! ( VAR_23 & VAR_24 ) ) { if ( ( VAR_25 = METHOD_1 ( VAR_26 , VAR_27 , & VAR_28 ) ) ) return ( VAR_29 ) ;  if ( METHOD_2 ( VAR_30 . VAR_31 , VAR_32 ) ) {  VAR_33 = VAR_34 ; VAR_35 = 1 ; } METHOD_3 ( VAR_36 . VAR_37 ) ; } if ( VAR_38 & VAR_39 ) { VAR_40 = VAR_41 ; VAR_42 = 1 ; } if ( ( VAR_43 = METHOD_4 ( VAR_44 , VAR_45 , & VAR_46 ) ) ) return ( VAR_47 ) ;  if ( VAR_48 && METHOD_5 ( VAR_49 . VAR_50 , VAR_51 ) ) {  if ( ! VAR_52 ) { VAR_53 = VAR_54 ; VAR_55 = 2 ; } } if ( VAR_56 && ! VAR_57 ) * VAR_58 = VAR_59 ; else METHOD_6 ( VAR_60 . VAR_61 ) ; if ( ( METHOD_7 ( VAR_62 , * ( ( TYPE_20 * ) VAR_63 ) , ( TYPE_21 * ) & VAR_64 , 1 ) ) < 0 ) { return ( VAR_65 ) ; } if ( VAR_66 ) return ( VAR_67 ) ; if ( ( VAR_68 = METHOD_8 ( VAR_69 , VAR_70 , & VAR_71 ) ) ) return VAR_72 ; if ( * VAR_73 == VAR_74 ) { VAR_75 = METHOD_9 ( VAR_76 , & VAR_77 ) ; * VAR_78 = VAR_79 ; VAR_80 = 1 ; } METHOD_10 ( VAR_81 , * VAR_82 , & VAR_83 ) ; if ( ( ! VAR_84 ) && VAR_85 == VAR_86 ) { if ( VAR_87 != VAR_88 && VAR_89 -> VAR_90 > 0 ) { VAR_91 = METHOD_11 ( VAR_92 , & VAR_93 -> VAR_94 [ 0 ] , & VAR_95 ) ; } else { VAR_96 . VAR_97 = 7 ; VAR_98 . VAR_99 = "default" ; VAR_100 = METHOD_12 ( VAR_101 , & VAR_102 , & VAR_103 ) ; } if ( ! VAR_104 ) VAR_105 = METHOD_13 ( VAR_106 , * VAR_107 , VAR_108 ) ; VAR_109 = 1 ; } if ( ! VAR_110 ) { VAR_111 = METHOD_14 ( VAR_112 , VAR_113 , & VAR_114 , VAR_115 , VAR_116 , & VAR_117 , VAR_118 ) ; METHOD_15 ( VAR_119 . VAR_120 ) ; } if ( VAR_121 ) { TYPE_22 VAR_122 ; const TYPE_23 * VAR_123 ; METHOD_16 ( & VAR_124 , 0 , sizeof ( VAR_125 ) ) ; METHOD_17 ( VAR_126 , & VAR_127 . VAR_128 , & VAR_129 . VAR_130 ) ; if ( VAR_131 ) VAR_132 . VAR_133 = VAR_134 ; else { ( TYPE_24 ) METHOD_18 ( VAR_135 , "????" , & VAR_136 . VAR_137 ) ; VAR_138 = 1 ; } VAR_139 . VAR_140 = VAR_141 - VAR_142 ; if ( VAR_143 . VAR_144 > 127 ) VAR_145 . VAR_146 = VAR_147 ; VAR_148 = METHOD_19 ( VAR_149 ) ; VAR_150 . VAR_151 . VAR_152 = METHOD_20 ( VAR_153 ) + 1 ; VAR_154 . VAR_155 . VAR_156 = METHOD_21 ( VAR_157 ) ; if ( ! VAR_158 . VAR_159 . VAR_160 ) { VAR_161 = VAR_162 ; goto VAR_163 ; } if ( ( VAR_164 = METHOD_22 ( VAR_165 , & VAR_166 , & VAR_167 ) ) ) { METHOD_23 ( VAR_168 . VAR_169 . VAR_170 ) ; goto VAR_171 ; } METHOD_24 ( VAR_172 . VAR_173 . VAR_174 ) ; if ( VAR_175 ) METHOD_25 ( VAR_176 , VAR_177 . VAR_178 ) ; } else { VAR_179 . VAR_180 = 0 ; VAR_181 . VAR_182 = 0 ; } VAR_183 = METHOD_26 ( VAR_184 , VAR_185 , & VAR_186 ) ; if ( VAR_187 . VAR_188 ) { METHOD_27 ( VAR_189 . VAR_190 ) ; VAR_191 = VAR_192 ; goto VAR_193 ; } if ( VAR_194 ) goto VAR_195 ; if ( ( VAR_196 & VAR_197 ) ) { if ( ( VAR_198 = METHOD_28 ( VAR_199 , * VAR_200 , & VAR_201 ) ) ) { return ( VAR_202 ) ; } VAR_203 = METHOD_29 ( VAR_204 , VAR_205 , & VAR_206 ) ; METHOD_30 ( VAR_207 . VAR_208 ) ; } VAR_209 : ; if ( VAR_210 ) { if ( VAR_211 ) { METHOD_31 ( VAR_212 , * VAR_213 ) ; } else if ( VAR_214 && VAR_215 != VAR_216 ) { METHOD_32 ( VAR_217 , VAR_218 ) ; METHOD_33 ( VAR_219 , * VAR_220 , VAR_221 ) ; } } return VAR_222 ; }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) {   METHOD_1 ( VAR_3 , VAR_4 >= VAR_5 , 1 ) ;  return VAR_6 >= VAR_7 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 ; unsigned TYPE_2 * VAR_5 ; unsigned TYPE_3 VAR_6 , VAR_7 ; TYPE_4 VAR_8 [ 100 ] ; TYPE_5 VAR_9 , VAR_10 = 0 ; VAR_11 = VAR_12 + VAR_13 + VAR_14 + 1 ; switch ( VAR_15 ) { case VAR_16 : VAR_17 += 1 + VAR_18 + VAR_19 ; VAR_20 = METHOD_2 ( VAR_21 , VAR_22 ) ; VAR_23 += VAR_24 ; break ; case VAR_25 : case VAR_26 : case VAR_27 : VAR_28 += 2 ; break ; } if ( ( VAR_29 = METHOD_3 ( VAR_30 , VAR_31 ) ) == VAR_32 ) return ; METHOD_4 ( VAR_33 , VAR_34 + VAR_35 + 1 ) ; VAR_36 = METHOD_5 ( VAR_37 , METHOD_6 ( VAR_38 ) ) ; VAR_39 = ( VAR_40 -> VAR_41 >> 8 ) & 0x0F ; VAR_42 = ( VAR_43 -> VAR_44 >> 0 ) & 0xFF ; switch ( VAR_45 ) { case VAR_46 : * VAR_47 ++ = VAR_48 | VAR_49 ; * VAR_50 ++ = VAR_51 ; * VAR_52 ++ = VAR_53 ;  * VAR_54 ++ = 0xAA ;  METHOD_7 ( VAR_55 , & VAR_56 -> VAR_57 , VAR_58 ) ; VAR_59 += VAR_60 ; METHOD_8 ( VAR_61 , & VAR_62 -> VAR_63 , VAR_64 ) ; VAR_65 += VAR_66 ; METHOD_9 ( VAR_67 , VAR_68 , VAR_69 ) ; VAR_70 += VAR_71 ; break ; case VAR_72 : * VAR_73 ++ = VAR_74 | VAR_75 ; * VAR_76 ++ = VAR_77 ; * VAR_78 ++ = VAR_79 ; * VAR_80 ++ = 0x00 ; * VAR_81 ++ = 0 ; break ; case VAR_82 : * VAR_83 ++ = VAR_84 | VAR_85 ; * VAR_86 ++ = VAR_87 ; * VAR_88 ++ = VAR_89 ; * VAR_90 ++ = VAR_91 -> VAR_92 ; * VAR_93 ++ = VAR_94 -> VAR_95 ; break ; case VAR_96 : * VAR_97 ++ = VAR_98 | VAR_99 ; * VAR_100 ++ = VAR_101 ; * VAR_102 ++ = VAR_103 ; * VAR_104 ++ = VAR_105 ; * VAR_106 ++ = 0 ; break ; case VAR_107 : case VAR_108 : * VAR_109 ++ = VAR_110 | VAR_111 ; * VAR_112 ++ = VAR_113 ; * VAR_114 = VAR_115 ; * VAR_116 ++ |= ( VAR_117 -> VAR_118 << 5 ) & 0xE0 ; break ; case VAR_119 : case VAR_120 : * VAR_121 ++ = VAR_122 | VAR_123 ; * VAR_124 ++ = VAR_125 ; * VAR_126 ++ = VAR_127 ; break ; default : printk ( KERN_ERR "ROSE:rose_write_internal-invalidframetype%02X\\n" , VAR_128 ) ; METHOD_10 ( VAR_129 ) ; return ; } METHOD_11 ( VAR_130 , VAR_131 -> VAR_132 ) ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( unsigned TYPE_0 VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = VAR_6 , * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 , * VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; struct STRUCT_OR_UNION_8 * VAR_12 ; TYPE_1 VAR_13 ; METHOD_1 ( ! VAR_14 ) ; if ( METHOD_2 ( ! ( VAR_15 & VAR_16 ) ) ) { METHOD_3 ( VAR_17 ) ; return VAR_18 ; } VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = METHOD_4 ( VAR_23 ) ; if ( METHOD_5 ( VAR_24 ) ) return VAR_25 ; METHOD_6 ( ) ; VAR_26 = VAR_27 | VAR_28 ; if ( VAR_29 != VAR_30 -> VAR_31 ) VAR_32 |= VAR_33 | VAR_34 ; VAR_35 = METHOD_7 ( VAR_36 , VAR_37 -> VAR_38 . VAR_39 , VAR_40 ) ; if ( METHOD_8 ( VAR_41 ) ) { METHOD_9 ( ) ; METHOD_10 ( VAR_42 ) ; return METHOD_11 ( VAR_43 ) ; } VAR_44 -> VAR_45 = VAR_46 ; METHOD_12 ( & VAR_47 -> VAR_48 , & VAR_49 -> VAR_50 ) ; VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; while ( VAR_55 ) { VAR_56 -> VAR_57 = VAR_58 ;  if ( VAR_59 ) {  if ( & VAR_60 -> VAR_61 == VAR_62 -> VAR_63 . VAR_64 ) { VAR_65 -> VAR_66 . VAR_67 = METHOD_13 ( & VAR_68 -> VAR_69 ) ; VAR_70 = & VAR_71 -> VAR_72 ; } if ( & VAR_73 -> VAR_74 == VAR_75 -> VAR_76 . VAR_77 ) { VAR_78 -> VAR_79 . VAR_80 = METHOD_14 ( & VAR_81 -> VAR_82 ) ; VAR_83 = & VAR_84 -> VAR_85 ; } } VAR_86 = METHOD_15 ( VAR_87 , VAR_88 ) ; VAR_89 = METHOD_16 ( VAR_90 , VAR_91 ) ; if ( ! VAR_92 ) break ; while ( VAR_93 -> VAR_94 . VAR_95 != VAR_96 -> VAR_97 . VAR_98 ) VAR_99 = METHOD_17 ( VAR_100 , VAR_101 ) ; } METHOD_18 ( ) ; if ( VAR_102 ) METHOD_19 ( VAR_103 ) ; if ( VAR_104 ) METHOD_20 ( VAR_105 ) ; return VAR_106 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { switch ( VAR_3 -> VAR_4 ) { case VAR_5 : return 0 ; case VAR_6 : case VAR_7 :  return ( ( VAR_8 < VAR_9 -> VAR_10 ) ||   ( ( VAR_11 + VAR_12 ) > ( VAR_13 -> VAR_14 + VAR_15 -> VAR_16 ) ) ) ?  - VAR_17 : 0 ; default : return - VAR_18 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 ) { const struct STRUCT_OR_UNION_0 * VAR_4 ; const struct STRUCT_OR_UNION_1 * VAR_5 ; const TYPE_5 * VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; if ( VAR_10 < VAR_11 ) return ; VAR_12 = ( const struct STRUCT_OR_UNION_2 * ) VAR_13 ; VAR_14 = ( const struct STRUCT_OR_UNION_3 * ) VAR_15 ; VAR_16 = VAR_17 - VAR_18 ; switch ( VAR_19 -> VAR_20 ) { case VAR_21 : if ( VAR_22 == sizeof ( * VAR_23 ) + 4 ) { METHOD_1 ( ( VAR_24 , "who-are-yourequest" ) ) ; break ; } METHOD_2 ( ( VAR_25 , "nodeinformationquery" ) ) ; METHOD_3 ( * VAR_26 , sizeof ( * VAR_27 ) ) ; VAR_28 = ( const struct STRUCT_OR_UNION_4 * ) VAR_29 ; METHOD_4 ( ( VAR_30 , "(" ) ) ; switch ( METHOD_5 ( & VAR_31 -> VAR_32 ) ) { case VAR_33 : METHOD_6 ( ( VAR_34 , "noop" ) ) ; break ; case VAR_35 : METHOD_7 ( ( VAR_36 , "supportedqtypes" ) ) ; VAR_37 = METHOD_8 ( & VAR_38 -> VAR_39 ) ; if ( VAR_40 ) METHOD_9 ( ( VAR_41 , "[%s]" , ( VAR_42 & 0x01 ) ? "C" : "" ) ) ; break ; case VAR_43 : METHOD_10 ( ( VAR_44 , "DNSname" ) ) ; break ; case VAR_45 : METHOD_11 ( ( VAR_46 , "nodeaddresses" ) ) ; VAR_47 = VAR_48 -> VAR_49 ; if ( ! VAR_50 ) break ; METHOD_12 ( ( VAR_51 , "[%s%s%s%s%s%s]" , ( VAR_52 & VAR_53 ) ? "a" : "" , ( VAR_54 & VAR_55 ) ? "G" : "" , ( VAR_56 & VAR_57 ) ? "S" : "" , ( VAR_58 & VAR_59 ) ? "L" : "" , ( VAR_60 & VAR_61 ) ? "C" : "" , ( VAR_62 & VAR_63 ) ? "A" : "" ) ) ; break ; default : METHOD_13 ( ( VAR_64 , "unknown" ) ) ; break ; } if ( VAR_65 -> VAR_66 == VAR_67 || VAR_68 -> VAR_69 == VAR_70 ) { if ( VAR_71 != sizeof ( * VAR_72 ) ) if ( VAR_73 -> VAR_74 ) METHOD_14 ( ( VAR_75 , ",invalidlen" ) ) ; METHOD_15 ( ( VAR_76 , ")" ) ) ; break ; } if ( VAR_77 == sizeof ( * VAR_78 ) ) { METHOD_16 ( ( VAR_79 , ",03draft" ) ) ; METHOD_17 ( ( VAR_80 , ")" ) ) ; break ; } switch ( VAR_81 -> VAR_82 ) { case VAR_83 : if ( ! METHOD_18 ( * VAR_84 , sizeof ( * VAR_85 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) ) break ; if ( VAR_86 != sizeof ( * VAR_87 ) + sizeof ( struct STRUCT_OR_UNION_6 ) ) { if ( VAR_88 -> VAR_89 ) METHOD_19 ( ( VAR_90 , ",invalidsubjectlen" ) ) ; break ; } METHOD_20 ( ( VAR_91 , ",subject=%s" , METHOD_21 ( VAR_92 , VAR_93 + 1 ) ) ) ; break ; case VAR_94 : METHOD_22 ( ( VAR_95 , ",subject=DNSname" ) ) ; VAR_96 = ( const TYPE_8 * ) ( VAR_97 + 1 ) ; if ( VAR_98 [ 0 ] == VAR_99 - VAR_100 - 1 ) { if ( VAR_101 -> VAR_102 ) METHOD_23 ( ( VAR_103 , ",03draft" ) ) ; VAR_104 ++ ; METHOD_24 ( ( VAR_105 , ",\\"" ) ) ; while ( VAR_106 < VAR_107 ) { safeputchar ( VAR_108 , * VAR_109 ) ; VAR_110 ++ ; } METHOD_25 ( ( VAR_111 , "\\"" ) ) ; } else METHOD_26 ( VAR_112 , VAR_113 , VAR_114 ) ; break ; case VAR_115 : if ( ! METHOD_27 ( * VAR_116 , sizeof ( * VAR_117 ) + sizeof ( struct STRUCT_OR_UNION_7 ) ) ) break ; if ( VAR_118 != sizeof ( * VAR_119 ) + sizeof ( struct STRUCT_OR_UNION_8 ) ) { if ( VAR_120 -> VAR_121 ) METHOD_28 ( ( VAR_122 , ",invalidsubjectlen" ) ) ; break ; } METHOD_29 ( ( VAR_123 , ",subject=%s" , METHOD_30 ( VAR_124 , VAR_125 + 1 ) ) ) ; break ; default : METHOD_31 ( ( VAR_126 , ",unknownsubject" ) ) ; break ; } METHOD_32 ( ( VAR_127 , ")" ) ) ; break ; case VAR_128 : if ( VAR_129 > VAR_130 ) { METHOD_33 ( ( VAR_131 , "[|icmp6:nodeinformationreply]" ) ) ; break ; } VAR_132 = 0 ;  VAR_133 = ( const struct STRUCT_OR_UNION_9 * ) VAR_134 ;  METHOD_34 ( ( VAR_135 , "nodeinformationreply" ) ) ; METHOD_35 ( ( VAR_136 , "(" ) ) ; switch ( VAR_137 -> VAR_138 ) { case VAR_139 : if ( VAR_140 -> VAR_141 ) { METHOD_36 ( ( VAR_142 , "success" ) ) ; VAR_143 ++ ; } break ; case VAR_144 : METHOD_37 ( ( VAR_145 , "refused" ) ) ; VAR_146 ++ ; if ( VAR_147 != sizeof ( * VAR_148 ) ) if ( VAR_149 -> VAR_150 ) METHOD_38 ( ( VAR_151 , ",invalidlength" ) ) ; break ; case VAR_152 : METHOD_39 ( ( VAR_153 , "unknown" ) ) ; VAR_154 ++ ; if ( VAR_155 != sizeof ( * VAR_156 ) ) if ( VAR_157 -> VAR_158 ) METHOD_40 ( ( VAR_159 , ",invalidlength" ) ) ; break ; } if ( VAR_160 -> VAR_161 != VAR_162 ) { METHOD_41 ( ( VAR_163 , ")" ) ) ; break ; } switch ( METHOD_42 ( & VAR_164 -> VAR_165 ) ) { case VAR_166 : if ( VAR_167 ) METHOD_43 ( ( VAR_168 , "," ) ) ; METHOD_44 ( ( VAR_169 , "noop" ) ) ; if ( VAR_170 != sizeof ( * VAR_171 ) ) if ( VAR_172 -> VAR_173 ) METHOD_45 ( ( VAR_174 , ",invalidlength" ) ) ; break ; case VAR_175 : if ( VAR_176 ) METHOD_46 ( ( VAR_177 , "," ) ) ; METHOD_47 ( ( VAR_178 , "supportedqtypes" ) ) ; VAR_179 = METHOD_48 ( & VAR_180 -> VAR_181 ) ; if ( VAR_182 ) METHOD_49 ( ( VAR_183 , "[%s]" , ( VAR_184 & 0x01 ) ? "C" : "" ) ) ; break ; case VAR_185 : if ( VAR_186 ) METHOD_50 ( ( VAR_187 , "," ) ) ; METHOD_51 ( ( VAR_188 , "DNSname" ) ) ;  VAR_189 = ( const TYPE_9 * ) ( VAR_190 + 1 ) + 4 ;  if ( VAR_191 [ 0 ] == VAR_192 - VAR_193 - 1 ) { if ( VAR_194 -> VAR_195 ) METHOD_52 ( ( VAR_196 , ",03draft" ) ) ; VAR_197 ++ ; METHOD_53 ( ( VAR_198 , ",\\"" ) ) ; while ( VAR_199 < VAR_200 ) { safeputchar ( VAR_201 , * VAR_202 ) ; VAR_203 ++ ; } METHOD_54 ( ( VAR_204 , "\\"" ) ) ; } else METHOD_55 ( VAR_205 , VAR_206 , VAR_207 ) ; if ( ( METHOD_56 ( & VAR_208 -> VAR_209 ) & 0x01 ) != 0 ) METHOD_57 ( ( VAR_210 , "[TTL=%u]" , METHOD_58 ( VAR_211 + 1 ) ) ) ; break ; case VAR_212 : if ( VAR_213 ) METHOD_59 ( ( VAR_214 , "," ) ) ; METHOD_60 ( ( VAR_215 , "nodeaddresses" ) ) ; VAR_216 = sizeof ( * VAR_217 ) ; while ( VAR_218 < VAR_219 ) { if ( VAR_220 + sizeof ( struct STRUCT_OR_UNION_10 ) + sizeof ( TYPE_10 ) > VAR_221 ) break ; METHOD_61 ( ( VAR_222 , "%s" , METHOD_62 ( VAR_223 , VAR_224 + VAR_225 ) ) ) ; VAR_226 += sizeof ( struct STRUCT_OR_UNION_11 ) ; METHOD_63 ( ( VAR_227 , "(%d)" , ( TYPE_11 ) METHOD_64 ( VAR_228 + VAR_229 ) ) ) ; VAR_230 += sizeof ( TYPE_12 ) ; } VAR_231 = VAR_232 -> VAR_233 ; if ( ! VAR_234 ) break ; METHOD_65 ( ( VAR_235 , "[%s%s%s%s%s%s%s]" , ( VAR_236 & VAR_237 ) ? "a" : "" , ( VAR_238 & VAR_239 ) ? "G" : "" , ( VAR_240 & VAR_241 ) ? "S" : "" , ( VAR_242 & VAR_243 ) ? "L" : "" , ( VAR_244 & VAR_245 ) ? "C" : "" , ( VAR_246 & VAR_247 ) ? "A" : "" , ( VAR_248 & VAR_249 ) ? "T" : "" ) ) ; break ; default : if ( VAR_250 ) METHOD_66 ( ( VAR_251 , "," ) ) ; METHOD_67 ( ( VAR_252 , "unknown" ) ) ; break ; } METHOD_68 ( ( VAR_253 , ")" ) ) ; break ; } return ; VAR_254 : METHOD_69 ( ( VAR_255 , "[|icmp6]" ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 ,  TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; if ( VAR_6 -> VAR_7 == VAR_8 && ! METHOD_1 ( & VAR_9 -> VAR_10 ) ) METHOD_2 ( "missingblobobject\'%s\'" , METHOD_3 ( & VAR_11 -> VAR_12 ) ) ; if ( VAR_13 -> VAR_14 -> VAR_15 && ! VAR_16 -> VAR_17 && VAR_18 -> VAR_19 != VAR_20 ) METHOD_4 ( VAR_21 -> VAR_22 . VAR_23 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 * VAR_3 ) { TYPE_3 VAR_4 = 0 ; TYPE_4 VAR_5 = 0 ; struct STRUCT_OR_UNION_2 VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 = 0 ; struct STRUCT_OR_UNION_3 * VAR_9 = VAR_10 -> VAR_11 ;  * VAR_12 = 0 ;  if ( VAR_13 == VAR_14 ) return - VAR_15 ; VAR_16 . VAR_17 = ( struct STRUCT_OR_UNION_4 * ) & VAR_18 -> VAR_19 ; VAR_20 . VAR_21 = sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = 0 ; if ( VAR_27 -> VAR_28 ) VAR_29 . VAR_30 = VAR_31 + VAR_32 ; else VAR_33 . VAR_34 = VAR_35 ; VAR_36 = 0 ; for ( VAR_37 = 0 ; VAR_38 < VAR_39 ; VAR_40 ++ ) VAR_41 += VAR_42 [ VAR_43 ] . VAR_44 ; VAR_45 = 0 ; while ( VAR_46 ) { VAR_47 = METHOD_1 ( VAR_48 , & VAR_49 , & VAR_50 [ VAR_51 ] , VAR_52 - VAR_53 , VAR_54 ) ; if ( VAR_55 == - VAR_56 || VAR_57 == - VAR_58 ) { METHOD_2 ( VAR_59 == - VAR_60 ) ; VAR_61 ++ ; if ( VAR_62 >= 14 || ( ! VAR_63 -> VAR_64 && ( VAR_65 > 2 ) ) ) { METHOD_3 ( 1 , "sendsonsock%pstuckfor15" "seconds" , VAR_66 ) ; VAR_67 = - VAR_68 ; break ; } METHOD_4 ( 1 << VAR_69 ) ; continue ; } if ( VAR_70 < 0 ) break ; * VAR_71 += VAR_72 ; if ( VAR_73 == VAR_74 ) { VAR_75 = 0 ; break ; } if ( VAR_76 > VAR_77 ) { METHOD_5 ( 1 , "sent%drequested%d" , VAR_78 , VAR_79 ) ; break ; } if ( VAR_80 == 0 ) { METHOD_6 ( 1 , "tcpsentnodata" ) ; METHOD_7 ( 500 ) ; continue ; } VAR_81 -= VAR_82 ; for ( VAR_83 = VAR_84 ; VAR_85 < VAR_86 ; VAR_87 ++ ) { if ( VAR_88 [ VAR_89 ] . VAR_90 ) { if ( VAR_91 > VAR_92 [ VAR_93 ] . VAR_94 ) { VAR_95 -= VAR_96 [ VAR_97 ] . VAR_98 ; VAR_99 [ VAR_100 ] . VAR_101 = 0 ; } else { VAR_102 [ VAR_103 ] . VAR_104 += VAR_105 ; VAR_106 [ VAR_107 ] . VAR_108 -= VAR_109 ; VAR_110 = VAR_111 ; break ; } } } VAR_112 = 0 ; VAR_113 = 0 ; } return VAR_114 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) VAR_3 -> VAR_4 ;  VAR_5 -> VAR_6 ++ ;   }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { unsigned TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; if ( VAR_7 == - 1 ) VAR_8 = METHOD_1 ( VAR_9 ) ; else if ( ( TYPE_7 ) VAR_10 == - 2 ) VAR_11 = METHOD_2 ( VAR_12 ) ; switch ( VAR_13 -> VAR_14 ) { case 12 : VAR_15 = VAR_16 -> VAR_17 + VAR_18 * 3 / 2 ; VAR_19 = VAR_20 -> VAR_21 + VAR_22 * 3 / 2 ; if ( VAR_23 & 1 ) { TYPE_8 VAR_24 ; METHOD_3 ( & VAR_25 , VAR_26 -> VAR_27 , VAR_28 - 1 , VAR_29 ) ; VAR_30 [ 0 ] = ( ( VAR_31 & 0xf ) << 4 ) | ( VAR_32 . VAR_33 >> 8 ) ; VAR_34 [ 1 ] = VAR_35 >> 4 ; } else { TYPE_9 VAR_36 ;  if ( VAR_37 != VAR_38 -> VAR_39 - 1 )  METHOD_4 ( & VAR_40 , VAR_41 -> VAR_42 , VAR_43 + 1 , VAR_44 ) ; else VAR_45 . VAR_46 = 0 ; VAR_47 [ 0 ] = VAR_48 & 0xff ; VAR_49 [ 1 ] = ( VAR_50 >> 8 ) | ( ( 0xff & VAR_51 . VAR_52 ) << 4 ) ; } VAR_53 = 2 ; break ; case 16 : VAR_54 = VAR_55 -> VAR_56 + VAR_57 * 2 ; VAR_58 = VAR_59 -> VAR_60 + VAR_61 * 2 ; * ( unsigned TYPE_10 * ) VAR_62 = METHOD_5 ( VAR_63 ) ; VAR_64 = 2 ; break ; case 32 : { TYPE_11 VAR_65 ; METHOD_6 ( & VAR_66 , VAR_67 -> VAR_68 , VAR_69 , VAR_70 ) ; VAR_71 = VAR_72 -> VAR_73 + VAR_74 * 4 ; VAR_75 = VAR_76 -> VAR_77 + VAR_78 * 4 ; * ( TYPE_12 * ) VAR_79 = METHOD_7 ( ( VAR_80 & 0xfffffff ) | ( VAR_81 . VAR_82 << 28 ) ) ; VAR_83 = 4 ; } break ; default : METHOD_8 ( "BadFATentrysize:%dbits." , VAR_84 -> VAR_85 ) ; } METHOD_9 ( VAR_86 , VAR_87 , VAR_88 ) ; if ( VAR_89 -> VAR_90 > 1 ) { METHOD_10 ( VAR_91 + VAR_92 -> VAR_93 , VAR_94 , VAR_95 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 * VAR_7 ; if ( ! VAR_8 -> VAR_9 . VAR_10 ) return ; if ( ! VAR_11 -> VAR_12 . VAR_13 ) return ;  METHOD_1 ( & VAR_14 , VAR_15 -> VAR_16 . VAR_17 , sizeof ( TYPE_8 ) ) ;   METHOD_2 ( & VAR_18 , VAR_19 -> VAR_20 . VAR_21 , sizeof ( TYPE_9 ) ) ;  VAR_22 = ( TYPE_10 * ) & VAR_23 ; VAR_24 = ( TYPE_11 * ) & VAR_25 ; VAR_26 = ( VAR_27 -> VAR_28 . VAR_29 -> VAR_30 . VAR_31 != VAR_32 && VAR_33 -> VAR_34 . VAR_35 -> VAR_36 . VAR_37 != VAR_38 ) ; VAR_39 = VAR_40 ? VAR_41 : VAR_42 ; for ( VAR_43 = 0 ; VAR_44 < 16 ; VAR_45 ++ ) { METHOD_3 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 + VAR_50 [ VAR_51 ] , VAR_52 + VAR_53 [ VAR_54 ] ) ; } if ( VAR_55 ) { VAR_56 = 24 ; METHOD_4 ( VAR_57 , VAR_58 , VAR_59 , VAR_60 + VAR_61 [ VAR_62 ] , VAR_63 + VAR_64 [ VAR_65 ] ) ; METHOD_5 ( & VAR_66 -> VAR_67 , VAR_68 , VAR_69 + VAR_70 [ VAR_71 ] , VAR_72 + VAR_73 [ VAR_74 ] ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; METHOD_2 ( "ping_unhash(isk=%p,isk->num=%u)\\n" , VAR_3 , VAR_4 -> VAR_5 ) ; if ( METHOD_3 ( VAR_6 ) ) { METHOD_4 ( & VAR_7 . VAR_8 ) ; METHOD_5 ( & VAR_9 -> VAR_10 ) ;  METHOD_6 ( VAR_11 ) ;  VAR_12 -> VAR_13 = 0 ; VAR_14 -> VAR_15 = 0 ; METHOD_7 ( METHOD_8 ( VAR_16 ) , VAR_17 -> VAR_18 , - 1 ) ; METHOD_9 ( & VAR_19 . VAR_20 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 = VAR_10 -> VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 , VAR_14 ; const TYPE_12 VAR_15 = VAR_16 -> VAR_17 ; TYPE_13 VAR_18 ; TYPE_14 VAR_19 ; TYPE_15 VAR_20 ; TYPE_16 * const VAR_21 = VAR_22 -> VAR_23 ; TYPE_17 * VAR_24 = VAR_25 -> VAR_26 ; TYPE_18 * VAR_27 = VAR_28 -> VAR_29 ; TYPE_19 * VAR_30 = & VAR_31 -> VAR_32 ; VAR_33 * VAR_34 ; VAR_35 * VAR_36 ; VAR_37 * VAR_38 ; TYPE_20 VAR_39 ; TYPE_21 VAR_40 ; TYPE_22 VAR_41 ; TYPE_23 VAR_42 = VAR_43 -> VAR_44 ; VAR_45 * VAR_46 ; TYPE_24 VAR_47 ; if ( VAR_48 -> VAR_49 -> VAR_50 & VAR_51 ) { METHOD_1 ( VAR_52 ) ; return 0 ;  }  if ( VAR_53 == 1 ) { VAR_54 -> VAR_55 -> VAR_56 = VAR_57 ; if ( ! VAR_58 -> VAR_59 ) { METHOD_2 ( VAR_60 , VAR_61 , VAR_62 -> VAR_63 -> VAR_64 ) ; VAR_65 -> VAR_66 . VAR_67 = VAR_68 -> VAR_69 -> VAR_70 ; } { TYPE_25 VAR_71 , VAR_72 , VAR_73 = 0 ; VAR_74 -> VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 = VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; if ( VAR_86 -> VAR_87 != VAR_88 ) VAR_89 = VAR_90 -> VAR_91 -> VAR_92 + 2 ; VAR_93 = 0 ; for ( VAR_94 = 0 ; VAR_95 < VAR_96 ; VAR_97 ++ ) if ( VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 == VAR_102 ) VAR_103 = VAR_104 ; { VAR_105 -> VAR_106 -> VAR_107 = 0 ; VAR_108 -> VAR_109 -> VAR_110 = 0 ; VAR_111 -> VAR_112 -> VAR_113 = VAR_114 ; VAR_115 -> VAR_116 -> VAR_117 = 1 ; VAR_118 -> VAR_119 -> VAR_120 = 1 ; VAR_121 = METHOD_3 ( VAR_122 , VAR_123 , VAR_124 , VAR_125 -> VAR_126 -> VAR_127 , & VAR_128 -> VAR_129 [ VAR_130 ] ) ; if ( VAR_131 != VAR_132 ) { return VAR_133 ; } } VAR_134 -> VAR_135 [ 0 ] [ 0 ] -> VAR_136 = 0 ; VAR_137 -> VAR_138 = 0 ; { METHOD_4 ( VAR_139 , VAR_140 -> VAR_141 , & ( VAR_142 -> VAR_143 ) ) ; if ( 0 != VAR_144 -> VAR_145 . VAR_146 ) { VAR_147 -> VAR_148 = VAR_149 -> VAR_150 . VAR_151 ; } else VAR_152 -> VAR_153 = 1 ; } if ( VAR_154 -> VAR_155 == 1 ) { if ( VAR_156 -> VAR_157 == 0 ) { METHOD_5 ( VAR_158 -> VAR_159 , VAR_160 , ( TYPE_26 * ) VAR_161 , ( TYPE_27 * ) VAR_162 ) ; VAR_163 -> VAR_164 = 1 ; } if ( ( VAR_165 -> VAR_166 == 3 ) && ( ( VAR_167 -> VAR_168 == 0 ) || VAR_169 -> VAR_170 ) && ( VAR_171 -> VAR_172 == 0 ) ) { VAR_173 -> VAR_174 = 0 ; METHOD_6 ( VAR_175 -> VAR_176 , VAR_177 , ( TYPE_28 * ) VAR_178 , ( TYPE_29 * ) VAR_179 ) ; VAR_180 -> VAR_181 = 1 ; } } } } else { VAR_182 * VAR_183 ; VAR_184 = VAR_185 -> VAR_186 + VAR_187 -> VAR_188 ; if ( VAR_189 -> VAR_190 && VAR_191 == VAR_192 -> VAR_193 ) { VAR_194 = VAR_195 -> VAR_196 ; if ( VAR_197 ) { VAR_198 = VAR_199 -> VAR_200 + VAR_201 - 1 ; } else { if ( VAR_202 -> VAR_203 ) { VAR_204 = VAR_205 -> VAR_206 - 1 ; } else { VAR_207 = VAR_208 -> VAR_209 + VAR_210 -> VAR_211 - 1 ; } } VAR_212 -> VAR_213 = VAR_214 -> VAR_215 ; VAR_216 -> VAR_217 = VAR_218 -> VAR_219 ; VAR_220 -> VAR_221 = VAR_222 -> VAR_223 ; VAR_224 -> VAR_225 = VAR_226 -> VAR_227 ; VAR_228 -> VAR_229 -- ; VAR_230 -> VAR_231 -= VAR_232 ; if ( VAR_233 ) { if ( VAR_234 -> VAR_235 == VAR_236 || VAR_237 -> VAR_238 == VAR_239 ) { VAR_240 -> METHOD_7 ( VAR_241 , VAR_242 , VAR_243 ) ; VAR_244 -> VAR_245 = VAR_246 -> VAR_247 ; } VAR_248 = VAR_249 - VAR_250 -> VAR_251 - 1 ; VAR_252 = ( ! VAR_253 ) && ( ! ( VAR_254 && ( VAR_255 & 0x01 ) ) ) ; VAR_256 = 1 ; VAR_257 = 1 ; VAR_258 -> VAR_259 = VAR_260 ; if ( VAR_261 -> VAR_262 ) { METHOD_8 ( VAR_263 , VAR_264 , VAR_265 , VAR_266 , VAR_267 , VAR_268 ) ; VAR_269 -> VAR_270 += VAR_271 ; } else { METHOD_9 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 , VAR_276 , VAR_277 ) ; } VAR_278 -> VAR_279 += VAR_280 ; VAR_281 -> VAR_282 = 0 ; VAR_283 -> VAR_284 = 0 ; } if ( VAR_285 -> VAR_286 >= VAR_287 -> VAR_288 * VAR_289 -> VAR_290 ) { VAR_291 -> VAR_292 = 1 ; return 0 ; } VAR_293 -> VAR_294 ++ ; VAR_295 -> VAR_296 = VAR_297 -> VAR_298 ; VAR_299 -> VAR_300 = VAR_301 -> VAR_302 ; VAR_303 -> VAR_304 ++ ; } else { VAR_305 -> VAR_306 = VAR_307 -> VAR_308 + VAR_309 -> VAR_310 ; } } { TYPE_30 VAR_311 ; TYPE_31 VAR_312 ; TYPE_32 * VAR_313 ; VAR_314 = VAR_315 ; if ( ( 1 >= VAR_316 -> VAR_317 -> VAR_318 ) && ( 0 == VAR_319 -> VAR_320 ) ) { VAR_321 = 1 ; } VAR_322 = ( ( 2 * VAR_323 ) + 1 ) ; if ( VAR_324 != VAR_325 -> VAR_326 -> VAR_327 ) { VAR_328 *= 2 ; } VAR_329 = VAR_330 * sizeof ( TYPE_33 * ) ; VAR_331 += VAR_332 * sizeof ( TYPE_34 * ) ; VAR_333 = ( TYPE_35 * ) VAR_334 -> VAR_335 ; VAR_336 += VAR_337 * VAR_338 -> VAR_339 ; VAR_340 -> VAR_341 -> VAR_342 = ( volatile TYPE_36 * * ) VAR_343 ; } VAR_344 -> VAR_345 -> VAR_346 = VAR_347 -> VAR_348 << VAR_349 ; VAR_350 -> VAR_351 -> VAR_352 = 0 ; VAR_353 -> VAR_354 -> VAR_355 = 0 ; if ( VAR_356 -> VAR_357 -> VAR_358 ) VAR_359 -> VAR_360 = VAR_361 -> VAR_362 -> VAR_363 ; VAR_364 -> VAR_365 -> VAR_366 = VAR_367 -> VAR_368 << VAR_369 ; VAR_370 -> VAR_371 -> VAR_372 = VAR_373 -> VAR_374 -> VAR_375 ; if ( VAR_376 -> VAR_377 ) { VAR_378 -> VAR_379 -> VAR_380 = VAR_381 -> VAR_382 ; } else { VAR_383 -> VAR_384 = VAR_385 -> VAR_386 ; } VAR_387 = VAR_388 ; VAR_389 = VAR_390 ; VAR_391 -> VAR_392 -> VAR_393 = VAR_394 ; VAR_395 -> VAR_396 -> VAR_397 = VAR_398 ; VAR_399 -> METHOD_10 = VAR_400 ; VAR_401 -> VAR_402 = VAR_403 -> VAR_404 ; VAR_405 -> VAR_406 = 2 ; VAR_407 -> VAR_408 = VAR_409 -> VAR_410 ; METHOD_11 ( VAR_411 , 0 ) ; VAR_412 = VAR_413 -> VAR_414 ; VAR_415 = VAR_416 -> VAR_417 ; VAR_418 = VAR_419 ; VAR_420 = 0 ; VAR_421 = 0 ; VAR_422 = 0 ; VAR_423 = 0 ; VAR_424 = VAR_425 -> VAR_426 ; VAR_427 = VAR_428 ; while ( ! VAR_429 ) { TYPE_37 VAR_430 ; if ( VAR_431 > VAR_432 -> VAR_433 -> VAR_434 ) break ; VAR_435 = VAR_436 -> VAR_437 + VAR_438 ; VAR_439 -> VAR_440 = VAR_441 ; VAR_442 -> VAR_443 = 0 ; VAR_444 -> VAR_445 = ( VAR_446 >> VAR_447 ) ; VAR_448 = VAR_449 -> VAR_450 + VAR_451 ; VAR_452 -> VAR_453 = 0 ; VAR_454 -> VAR_455 = 1 ; VAR_456 -> VAR_457 = 0 ; if ( VAR_458 ) METHOD_12 ( VAR_459 , VAR_460 , VAR_461 , VAR_462 ) ; else METHOD_13 ( VAR_463 , VAR_464 , VAR_465 , VAR_466 ) ; if ( VAR_467 -> VAR_468 == 0 ) { METHOD_14 ( VAR_469 , VAR_470 , VAR_471 -> VAR_472 , VAR_473 -> VAR_474 ) ; } VAR_475 -> VAR_476 = 0 ; VAR_477 -> VAR_478 = 0 ; VAR_479 -> VAR_480 = VAR_481 ; VAR_482 -> VAR_483 = VAR_484 ; VAR_485 -> VAR_486 = 0 ; VAR_487 = VAR_488 -> VAR_489 ; VAR_490 -> VAR_491 = VAR_492 ; VAR_493 -> VAR_494 = 0 ; VAR_495 -> VAR_496 ++ ; METHOD_15 ( VAR_497 , VAR_498 , VAR_499 ) ; VAR_500 -> VAR_501 -> VAR_502 = VAR_503 ; VAR_504 -> VAR_505 |= VAR_506 ; VAR_507 -- ; VAR_508 -> VAR_509 = VAR_510 -> VAR_511 ; if ( VAR_512 ) { METHOD_16 ( VAR_513 , VAR_514 ) ; } VAR_515 ++ ; VAR_516 ++ ; VAR_517 ++ ; VAR_518 ++ ; VAR_519 = VAR_520 - VAR_521 -> VAR_522 - 1 ; VAR_523 = ( ! VAR_524 ) && ( ! ( VAR_525 && ( VAR_526 & 0x01 ) ) ) ; VAR_527 = ! VAR_528 ; VAR_529 = ( VAR_530 == VAR_531 -> VAR_532 ) || VAR_533 || VAR_534 ; VAR_535 = VAR_536 || VAR_537 ; VAR_538 -> VAR_539 = VAR_540 ; if ( VAR_541 ) { VAR_542 -> METHOD_17 ( VAR_543 , VAR_544 , VAR_545 ) ; VAR_546 = 0 ; VAR_547 = VAR_548 -> VAR_549 ; VAR_550 -> VAR_551 = VAR_552 -> VAR_553 ; if ( VAR_554 -> VAR_555 ) { METHOD_18 ( VAR_556 , VAR_557 , VAR_558 , VAR_559 , VAR_560 , VAR_561 ) ; VAR_562 -> VAR_563 += VAR_564 ; } else { METHOD_19 ( VAR_565 , VAR_566 , VAR_567 , VAR_568 , VAR_569 , VAR_570 ) ; } VAR_571 -> VAR_572 += VAR_573 ; if ( VAR_574 ) VAR_575 = 0 ; VAR_576 = VAR_577 ; VAR_578 -> VAR_579 = VAR_580 ; } } VAR_581 -> VAR_582 = 0 ; VAR_583 -> VAR_584 -> VAR_585 = VAR_586 - VAR_587 -> VAR_588 -> VAR_589 ; METHOD_20 ( "Mbsinslice:%d\\n" , VAR_590 -> VAR_591 -> VAR_592 ) ; VAR_593 -> VAR_594 ++ ; if ( VAR_595 -> VAR_596 != 0 ) VAR_597 -> VAR_598 ++ ; VAR_599 -> VAR_600 = VAR_601 -> VAR_602 ; VAR_603 -> VAR_604 = VAR_605 -> VAR_606 ; if ( VAR_607 -> VAR_608 >= VAR_609 -> VAR_610 * VAR_611 -> VAR_612 ) { VAR_613 -> VAR_614 = 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { TYPE_5 * VAR_3 ; unsigned TYPE_6 VAR_4 = * VAR_5 ; TYPE_7 VAR_6 = 0 ; struct STRUCT_OR_UNION_2 * VAR_7 = STRUCT_OR_UNION_3 -> VAR_8 ; unsigned TYPE_8 VAR_9 , VAR_10 ;  if ( ! VAR_11 )  return 0 ; VAR_12 = ( TYPE_9 * ) METHOD_1 ( VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = 0 ; if ( ! METHOD_2 ( & VAR_17 -> VAR_18 ) ) goto VAR_19 ; METHOD_3 ( & VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 -> VAR_24 ; VAR_25 = VAR_26 -> VAR_27 ; METHOD_4 ( & VAR_28 -> VAR_29 ) ; while ( VAR_30 > 0 ) { TYPE_10 VAR_31 , VAR_32 ; TYPE_11 VAR_33 ; if ( VAR_34 >= ( VAR_35 - VAR_36 ) ) break ; VAR_37 = VAR_38 - ( VAR_39 + VAR_40 ) ; VAR_41 = METHOD_5 ( TYPE_12 , VAR_42 , VAR_43 ) ; VAR_44 = METHOD_6 ( VAR_45 , VAR_46 ) ; VAR_47 = METHOD_7 ( VAR_48 , ( VAR_49 + VAR_50 ) , VAR_51 , VAR_52 , 0 ) ; if ( VAR_53 <= 0 ) { VAR_54 = VAR_55 ; break ; } if ( METHOD_8 ( VAR_56 , VAR_57 , VAR_58 ) ) { VAR_59 = - VAR_60 ; break ; } VAR_61 += VAR_62 ; VAR_63 += VAR_64 ; VAR_65 += VAR_66 ; VAR_67 -= VAR_68 ; } * VAR_69 = VAR_70 ; METHOD_9 ( VAR_71 ) ; VAR_72 : METHOD_10 ( ( unsigned TYPE_13 ) VAR_73 ) ; return VAR_74 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 )  {  TYPE_1 VAR_1 = METHOD_1 ( VAR_2 , STRUCT_OR_UNION_3 , 0 ) ;  if ( ( METHOD_2 ( STRUCT_OR_UNION_4 -> VAR_3 ) -> VAR_4 == - 1 ) && ( METHOD_3 ( STRUCT_OR_UNION_5 -> VAR_5 ) -> VAR_6 == 2 ) ) {  VAR_7 = METHOD_4 ( VAR_8 , STRUCT_OR_UNION_6 , 14 ) ;  } return VAR_9 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , unsigned TYPE_0 VAR_1 )  { struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( & VAR_4 ) ; if ( METHOD_2 ( VAR_5 ) ) return VAR_6 ; VAR_7 -> VAR_8 = VAR_9 ; METHOD_3 ( & VAR_10 -> VAR_11 . VAR_12 ) ; METHOD_4 ( & VAR_13 -> VAR_14 . VAR_15 ) ; VAR_16 -> VAR_17 . VAR_18 = 0 ;  VAR_19 -> VAR_20 . VAR_21 = VAR_22 ;   VAR_23 -> VAR_24 . VAR_25 = VAR_26 ;  return VAR_27 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ; TYPE_4 * VAR_6 = VAR_7 -> VAR_8 -> VAR_9 [ 0 ] ; TYPE_5 * VAR_10 ; TYPE_6 VAR_11 , VAR_12 ; if ( METHOD_1 ( VAR_13 ) ) { VAR_14 = 1 ; VAR_15 = VAR_16 ; } else { VAR_17 = 0 ; VAR_18 = METHOD_2 ( VAR_19 , VAR_20 -> VAR_21 , VAR_22 -> VAR_23 ) ; if ( ! VAR_24 ) { METHOD_3 ( & VAR_25 ) ; return METHOD_4 ( VAR_26 ) ; } METHOD_5 ( VAR_27 , VAR_28 ) ; }  for ( VAR_29 = 0 ; VAR_30 < 4 && VAR_31 -> VAR_32 [ VAR_33 ] ; VAR_34 ++ ) {  TYPE_7 VAR_35 = VAR_36 -> VAR_37 ; TYPE_8 VAR_38 = VAR_39 -> VAR_40 ; TYPE_9 VAR_41 = VAR_42 -> VAR_43 ; if ( VAR_44 ) { VAR_45 = VAR_46 -> VAR_47 ; VAR_48 = VAR_49 -> VAR_50 ; VAR_51 = VAR_52 -> VAR_53 ; } if ( METHOD_6 ( VAR_54 , VAR_55 ) > 2 * VAR_56 ) METHOD_7 ( VAR_57 , VAR_58 -> VAR_59 [ VAR_60 ] , VAR_61 -> VAR_62 [ VAR_63 ] , VAR_64 , VAR_65 , VAR_66 -> VAR_67 [ VAR_68 ] , VAR_69 -> VAR_70 [ VAR_71 ] , VAR_72 ) ; else if ( VAR_73 -> VAR_74 [ VAR_75 ] != VAR_76 -> VAR_77 [ VAR_78 ] ) METHOD_8 ( VAR_79 -> VAR_80 [ VAR_81 ] , VAR_82 -> VAR_83 [ VAR_84 ] , VAR_85 -> VAR_86 [ VAR_87 ] , VAR_88 -> VAR_89 [ VAR_90 ] , VAR_91 , VAR_92 ) ; } if ( ! VAR_93 ) METHOD_9 ( & VAR_94 ) ; return METHOD_10 ( VAR_95 , VAR_96 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { METHOD_1 ( VAR_1 -> VAR_2 , VAR_3 -> VAR_4 [ 0 ] ) ;  if ( VAR_5 -> VAR_6 [ 1 ] )  METHOD_2 ( VAR_7 -> VAR_8 , VAR_9 -> VAR_10 [ 1 ] ) ; METHOD_3 ( VAR_11 -> VAR_12 , VAR_13 -> VAR_14 ) ; METHOD_4 ( VAR_15 -> VAR_16 , VAR_17 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , enum VAR_5 VAR_6 , TYPE_5 VAR_7 ) { struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_2 * VAR_11 = METHOD_1 ( VAR_12 ) ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 + VAR_15 ; TYPE_6 VAR_16 , VAR_17 = 0 ; VAR_18 = METHOD_2 ( VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 ) return VAR_28 ; VAR_29 += VAR_30 -> VAR_31 ; if ( VAR_32 -> VAR_33 == VAR_34 ) { if ( VAR_35 == VAR_36 && VAR_37 >= 0 && METHOD_4 ( VAR_38 , VAR_39 ) ) { METHOD_5 ( VAR_40 , "R%dleaksaddrintomap\\n" , VAR_41 ) ; return - VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; if ( ! VAR_49 && VAR_50 == VAR_51 && VAR_52 >= 0 ) METHOD_7 ( VAR_53 , VAR_54 , VAR_55 ) ; } else if ( VAR_56 -> VAR_57 == VAR_58 ) { enum VAR_59 VAR_60 = VAR_61 ; if ( VAR_62 == VAR_63 && VAR_64 >= 0 && METHOD_8 ( VAR_65 , VAR_66 ) ) { METHOD_9 ( VAR_67 , "R%dleaksaddrintoctx\\n" , VAR_68 ) ; return - VAR_69 ; } if ( VAR_70 -> VAR_71 ) { METHOD_10 ( VAR_72 , "dereferenceofmodifiedctxptrR%doff=%d+%d,ctx+constisallowed,ctx+const+constisnot\\n" , VAR_73 , VAR_74 -> VAR_75 , VAR_76 - VAR_77 -> VAR_78 ) ; return - VAR_79 ; } if ( ! METHOD_11 ( VAR_80 -> VAR_81 ) || VAR_82 -> VAR_83 . VAR_84 ) { TYPE_7 VAR_85 [ 48 ] ; METHOD_12 ( VAR_86 , sizeof ( VAR_87 ) , VAR_88 -> VAR_89 ) ; METHOD_13 ( VAR_90 , "variablectxaccessvar_off=%soff=%dsize=%d" , VAR_91 , VAR_92 , VAR_93 ) ; return - VAR_94 ; } VAR_95 = METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 , & VAR_101 ) ; if ( ! VAR_102 && VAR_103 == VAR_104 && VAR_105 >= 0 ) { if ( VAR_106 == VAR_107 ) METHOD_15 ( VAR_108 , VAR_109 , VAR_110 ) ; else METHOD_16 ( VAR_111 , VAR_112 , VAR_113 ) ; VAR_114 [ VAR_115 ] . VAR_116 = 0 ; VAR_117 [ VAR_118 ] . VAR_119 = 0 ; VAR_120 [ VAR_121 ] . VAR_122 = 0 ; VAR_123 [ VAR_124 ] . VAR_125 = VAR_126 ; } } else if ( VAR_127 -> VAR_128 == VAR_129 ) { if ( ! METHOD_17 ( VAR_130 -> VAR_131 ) ) { TYPE_8 VAR_132 [ 48 ] ; METHOD_18 ( VAR_133 , sizeof ( VAR_134 ) , VAR_135 -> VAR_136 ) ; METHOD_19 ( VAR_137 , "variablestackaccessvar_off=%soff=%dsize=%d" , VAR_138 , VAR_139 , VAR_140 ) ; return - VAR_141 ; } VAR_142 += VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 >= 0 || VAR_147 < - VAR_148 ) { METHOD_20 ( VAR_149 , "invalidstackoff=%dsize=%d\\n" , VAR_150 , VAR_151 ) ; return - VAR_152 ; } if ( VAR_153 -> VAR_154 -> VAR_155 -> VAR_156 < - VAR_157 ) VAR_158 -> VAR_159 -> VAR_160 -> VAR_161 = - VAR_162 ; if ( VAR_163 == VAR_164 ) VAR_165 = METHOD_21 ( VAR_166 , VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ; else VAR_171 = METHOD_22 ( VAR_172 , VAR_173 , VAR_174 , VAR_175 , VAR_176 ) ; } else if ( METHOD_23 ( VAR_177 ) ) { if ( VAR_178 == VAR_179 && ! METHOD_24 ( VAR_180 , VAR_181 , VAR_182 ) ) { METHOD_25 ( VAR_183 , "cannotwriteintopacket\\n" ) ; return - VAR_184 ; } if ( VAR_185 == VAR_186 && VAR_187 >= 0 && METHOD_26 ( VAR_188 , VAR_189 ) ) { METHOD_27 ( VAR_190 , "R%dleaksaddrintopacket\\n" , VAR_191 ) ; return - VAR_192 ; } VAR_193 = METHOD_28 ( VAR_194 , VAR_195 , VAR_196 , VAR_197 , VAR_198 ) ; if ( ! VAR_199 && VAR_200 == VAR_201 && VAR_202 >= 0 ) METHOD_29 ( VAR_203 , VAR_204 , VAR_205 ) ; } else { METHOD_30 ( VAR_206 , "R%dinvalidmemaccess\'%s\'\\n" , VAR_207 , VAR_208 [ VAR_209 -> VAR_210 ] ) ; return - VAR_211 ; } if ( ! VAR_212 && VAR_213 < VAR_214 && VAR_215 >= 0 && VAR_216 == VAR_217 && VAR_218 [ VAR_219 ] . VAR_220 == VAR_221 ) {  VAR_222 [ VAR_223 ] . VAR_224 =  METHOD_31 ( VAR_225 [ VAR_226 ] . VAR_227 , VAR_228 ) ; METHOD_32 ( & VAR_229 [ VAR_230 ] ) ; } return VAR_231 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 = 0 ;  TYPE_5 VAR_5 , VAR_6 = METHOD_1 ( VAR_7 ) ;  TYPE_6 VAR_8 = METHOD_2 ( VAR_9 ) ; TYPE_7 VAR_10 = 0 ; TYPE_8 VAR_11 = METHOD_3 ( VAR_12 , VAR_13 , & VAR_14 ) ; TYPE_9 VAR_15 = METHOD_4 ( VAR_16 ) ; if ( VAR_17 == 0 ) { METHOD_5 ( "" , "TIFFscanlinesizeiszero!" ) ; return 0 ; } for ( VAR_18 = 0 ; VAR_19 < VAR_20 ; VAR_21 ++ ) { VAR_22 = METHOD_6 ( VAR_23 , VAR_24 , VAR_25 , - 1 ) ; VAR_26 = VAR_27 / VAR_28 ; if ( ( VAR_29 < ( VAR_30 - 1 ) ) && ( VAR_31 != ( TYPE_10 ) VAR_32 ) ) METHOD_7 ( "" , "Strip%d:read%lubytes,stripsize%lu" , ( TYPE_11 ) VAR_33 + 1 , ( unsigned TYPE_12 ) VAR_34 , ( unsigned TYPE_13 ) VAR_35 ) ; if ( VAR_36 < 0 && ! VAR_37 ) { METHOD_8 ( "" , "Errorreadingstrip%luafter%lurows" , ( unsigned TYPE_14 ) VAR_38 , ( unsigned TYPE_15 ) VAR_39 ) ; return 0 ; } VAR_40 += VAR_41 ; } return 1 ; }
static TYPE_0 * METHOD_0 ( const struct STRUCT_OR_UNION_0 * const VAR_0 , TYPE_1 VAR_1 , const TYPE_2 * const VAR_2 ) { const TYPE_3 VAR_3 = METHOD_1 ( VAR_4 ) ;  const TYPE_4 VAR_5 = VAR_6 [ VAR_7 - 1 ] == '.' ? 0 : 1 ;   struct STRUCT_OR_UNION_1 * VAR_8 ;  for ( VAR_9 = VAR_10 -> VAR_11 ; VAR_12 ; VAR_13 = VAR_14 -> VAR_15 ) { if ( ! VAR_16 -- ) { const TYPE_5 * const VAR_17 = ( ( TYPE_6 * ) VAR_18 ) + sizeof ( struct STRUCT_OR_UNION_2 ) ; const TYPE_7 VAR_19 = VAR_20 -> VAR_21 ; TYPE_8 * const VAR_22 = ( TYPE_9 * ) METHOD_2 ( VAR_23 + VAR_24 + VAR_25 + 1 ) ; if ( ! VAR_26 ) return VAR_27 ; METHOD_3 ( VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 ) VAR_32 [ VAR_33 ] = '.' ; METHOD_4 ( VAR_34 + VAR_35 + VAR_36 , VAR_37 , VAR_38 ) ; VAR_39 [ VAR_40 + VAR_41 + VAR_42 ] = 0 ; return VAR_43 ; } } METHOD_5 ( 0 ) ; return VAR_44 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 ; VAR_2 . VAR_3 = VAR_4 / 1000 ; VAR_5 . VAR_6 = 1000 * 1000 * ( VAR_7 % 1000 ) ; TYPE_2 VAR_8 ; do {  VAR_9 = METHOD_1 ( & VAR_10 , & VAR_11 ) ;  } while ( VAR_12 == - 1 && VAR_13 == VAR_14 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 = 0 ; TYPE_6 VAR_9 ; VAR_10 = - VAR_11 ; if ( VAR_12 & VAR_13 ) goto VAR_14 ;  VAR_15 -> VAR_16 = 0 ;  VAR_17 = - VAR_18 ; if ( VAR_19 -> VAR_20 == VAR_21 ) goto VAR_22 ; METHOD_1 ( VAR_23 ) ; VAR_24 = METHOD_2 ( VAR_25 , VAR_26 & VAR_27 , VAR_28 ) ; VAR_29 = METHOD_3 ( VAR_30 , VAR_31 & VAR_32 ) ; do { TYPE_7 VAR_33 ; struct STRUCT_OR_UNION_6 * VAR_34 ; METHOD_4 ( VAR_35 ) ; VAR_36 = METHOD_5 ( & VAR_37 -> VAR_38 ) ; METHOD_6 ( VAR_39 ) ; if ( VAR_40 == VAR_41 ) { if ( VAR_42 >= VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_7 ( VAR_46 ) ; if ( VAR_47 ) goto VAR_48 ; VAR_49 = - VAR_50 ; if ( VAR_51 -> VAR_52 & VAR_53 ) goto VAR_54 ; VAR_55 = - VAR_56 ; if ( VAR_57 -> VAR_58 != VAR_59 ) goto VAR_60 ; if ( METHOD_8 ( VAR_61 , VAR_62 ) ) goto VAR_63 ; METHOD_9 ( VAR_64 ) ; VAR_65 = - VAR_66 ; if ( ! VAR_67 ) break ; METHOD_10 ( VAR_68 ) ; VAR_69 = METHOD_11 ( VAR_70 , VAR_71 ) ; if ( METHOD_12 ( VAR_72 ) ) { VAR_73 = METHOD_13 ( VAR_74 ) ; goto VAR_75 ; } METHOD_14 ( VAR_76 ) ; continue ; VAR_77 : METHOD_15 ( VAR_78 ) ; break ; } METHOD_16 ( VAR_79 ) ; VAR_80 = min_t ( unsigned TYPE_8 , VAR_81 -> VAR_82 , VAR_83 ) ; if ( METHOD_17 ( VAR_84 -> VAR_85 , VAR_86 -> VAR_87 , VAR_88 ) ) { METHOD_18 ( & VAR_89 -> VAR_90 , VAR_91 ) ; if ( VAR_92 == 0 ) VAR_93 = - VAR_94 ; break ; } VAR_95 += VAR_96 ; VAR_97 -= VAR_98 ; if ( ! ( VAR_99 & VAR_100 ) ) { METHOD_19 ( VAR_101 , VAR_102 ) ; if ( VAR_103 -> VAR_104 ) { METHOD_20 ( & VAR_105 -> VAR_106 , VAR_107 ) ; break ; } METHOD_21 ( VAR_108 ) ; } else { METHOD_22 ( & VAR_109 -> VAR_110 , VAR_111 ) ; break ; } } while ( VAR_112 ) ; METHOD_23 ( VAR_113 ) ; VAR_114 : return VAR_115 ? : VAR_116 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 0x01 VAR_3 0x02 VAR_4 0x03 VAR_5 0x05 VAR_6 0x06 VAR_7 0x07 TYPE_3 VAR_8 [ 12 ] ; TYPE_4 * VAR_9 ; TYPE_5 VAR_10 , VAR_11 , VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 * VAR_15 ; TYPE_9 VAR_16 ; register TYPE_10 VAR_17 ; register TYPE_11 * VAR_18 ; register TYPE_12 VAR_19 ; register unsigned TYPE_13 * VAR_20 ; TYPE_14 VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 ,  VAR_27 ,  VAR_28 ; TYPE_15 VAR_29 , VAR_30 ; unsigned TYPE_16 VAR_31 [ 256 ] , * VAR_32 , VAR_33 , VAR_34 , * VAR_35 ; METHOD_1 ( VAR_36 != ( const TYPE_17 * ) VAR_37 ) ; METHOD_2 ( VAR_38 -> VAR_39 == VAR_40 ) ; if ( VAR_41 -> VAR_42 != VAR_43 ) ( TYPE_18 ) METHOD_3 ( VAR_44 , METHOD_4 ( ) , "%s" , VAR_45 -> VAR_46 ) ; METHOD_5 ( VAR_47 != ( TYPE_19 * ) VAR_48 ) ; METHOD_6 ( VAR_49 -> VAR_50 == VAR_51 ) ; VAR_52 = METHOD_7 ( VAR_53 , VAR_54 ) ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ; if ( VAR_60 == VAR_61 ) return ( METHOD_9 ( VAR_62 ) ) ; VAR_63 = METHOD_10 ( VAR_64 , 2 , ( unsigned TYPE_20 * ) VAR_65 ) ; if ( ( VAR_66 != 2 ) || ( METHOD_11 ( VAR_67 , "\\122\\314" , 2 ) != 0 ) ) METHOD_12 ( VAR_68 , "ImproperImageHeader" ) ; do { VAR_69 -> VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 -> VAR_74 . VAR_75 = METHOD_14 ( VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_15 ( VAR_79 ) ; VAR_80 -> VAR_81 = METHOD_16 ( VAR_82 ) ; VAR_83 = ( TYPE_21 ) METHOD_17 ( VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 & 0x04 ? VAR_88 : VAR_89 ; VAR_90 = ( TYPE_22 ) METHOD_18 ( VAR_91 ) ; VAR_92 = ( TYPE_23 ) METHOD_19 ( VAR_93 ) ; VAR_94 = ( TYPE_24 ) METHOD_20 ( VAR_95 ) ; VAR_96 = ( unsigned TYPE_25 ) METHOD_21 ( VAR_97 ) ; if ( VAR_98 >= 64 ) METHOD_22 ( VAR_99 , "ImproperImageHeader" ) ; VAR_100 = 1 ; VAR_101 = VAR_102 << VAR_103 ; if ( ( VAR_104 == 0 ) || ( VAR_105 == 2 ) || ( ( VAR_106 & 0x04 ) && ( VAR_107 > 254 ) ) || ( VAR_108 != 8 ) || ( VAR_109 -> VAR_110 == 0 ) ) METHOD_23 ( VAR_111 , "ImproperImageHeader" ) ; if ( VAR_112 & 0x02 ) { for ( VAR_113 = 0 ; VAR_114 < ( TYPE_26 ) VAR_115 ; VAR_116 ++ ) VAR_117 [ VAR_118 ] = 0 ; ( TYPE_27 ) METHOD_24 ( VAR_119 ) ; } else { VAR_120 = VAR_121 ; for ( VAR_122 = 0 ; VAR_123 < ( TYPE_28 ) VAR_124 ; VAR_125 ++ ) * VAR_126 ++ = ( unsigned TYPE_29 ) METHOD_25 ( VAR_127 ) ; } if ( ( VAR_128 & 0x01 ) == 0 ) ( TYPE_30 ) METHOD_26 ( VAR_129 ) ; if ( METHOD_27 ( VAR_130 ) != VAR_131 ) { METHOD_28 ( VAR_132 , VAR_133 , "UnexpectedEndOfFile" , VAR_134 -> VAR_135 ) ; break ; } VAR_136 = ( unsigned TYPE_31 * ) VAR_137 ; if ( VAR_138 != 0 ) { VAR_139 = ( unsigned TYPE_32 * ) METHOD_29 ( VAR_140 , 3 * VAR_141 * sizeof ( * VAR_142 ) ) ; if ( VAR_143 == ( unsigned TYPE_33 * ) VAR_144 ) METHOD_30 ( VAR_145 , "MemoryAllocationFailed" ) ; VAR_146 = VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < ( TYPE_34 ) VAR_150 ; VAR_151 ++ ) for ( VAR_152 = 0 ; VAR_153 < ( TYPE_35 ) VAR_154 ; VAR_155 ++ ) * VAR_156 ++ = ( unsigned TYPE_36 ) METHOD_31 ( METHOD_32 ( VAR_157 ) ) ; } if ( ( VAR_158 & 0x08 ) != 0 ) { TYPE_37 * VAR_159 ; TYPE_38 VAR_160 ; VAR_161 = METHOD_33 ( VAR_162 ) ; if ( VAR_163 != 0 ) { VAR_164 = ( TYPE_39 * ) METHOD_34 ( VAR_165 , sizeof ( * VAR_166 ) ) ; if ( VAR_167 == ( TYPE_40 * ) VAR_168 ) METHOD_35 ( VAR_169 , "MemoryAllocationFailed" ) ; VAR_170 = METHOD_36 ( VAR_171 , VAR_172 - 1 , ( unsigned TYPE_41 * ) VAR_173 ) ; VAR_174 [ VAR_175 - 1 ] = '\\0' ; ( TYPE_42 ) METHOD_37 ( VAR_176 , "comment" , VAR_177 , VAR_178 ) ; VAR_179 = METHOD_38 ( VAR_180 ) ; if ( ( VAR_181 & 0x01 ) == 0 ) ( TYPE_43 ) METHOD_39 ( VAR_182 ) ; } } if ( ( VAR_183 -> VAR_184 != VAR_185 ) && ( VAR_186 -> VAR_187 != 0 ) ) if ( VAR_188 -> VAR_189 >= ( VAR_190 -> VAR_191 + VAR_192 -> VAR_193 - 1 ) ) break ; VAR_194 = METHOD_40 ( VAR_195 , VAR_196 -> VAR_197 , VAR_198 -> VAR_199 , VAR_200 ) ; if ( VAR_201 == VAR_202 ) return ( METHOD_41 ( VAR_203 ) ) ; if ( VAR_204 -> VAR_205 != VAR_206 ) VAR_207 ++ ; VAR_208 = ( TYPE_44 ) VAR_209 -> VAR_210 * VAR_211 -> VAR_212 ; VAR_213 = ( VAR_214 % 2 == 0 ) ? VAR_215 : VAR_216 + 1 ; if ( ( VAR_217 * VAR_218 ) != ( TYPE_45 ) ( VAR_219 * VAR_220 ) ) METHOD_42 ( VAR_221 , "MemoryAllocationFailed" ) ; VAR_222 = METHOD_43 ( VAR_223 -> VAR_224 , VAR_225 -> VAR_226 * METHOD_44 ( VAR_227 , 4 ) * sizeof ( * VAR_228 ) ) ; if ( VAR_229 == ( TYPE_46 * ) VAR_230 ) METHOD_45 ( VAR_231 , "MemoryAllocationFailed" ) ; VAR_232 = VAR_233 -> VAR_234 * VAR_235 -> VAR_236 * METHOD_46 ( VAR_237 , 4 ) ; VAR_238 = ( unsigned TYPE_47 * ) METHOD_47 ( VAR_239 ) ; if ( ( VAR_240 & 0x01 ) && ! ( VAR_241 & 0x02 ) ) { TYPE_48 VAR_242 ; VAR_243 = VAR_244 ; for ( VAR_245 = 0 ; VAR_246 < ( TYPE_49 ) VAR_247 ; VAR_248 ++ ) { if ( VAR_249 -> VAR_250 == VAR_251 ) for ( VAR_252 = 0 ; VAR_253 < ( TYPE_50 ) VAR_254 ; VAR_255 ++ ) * VAR_256 ++ = VAR_257 [ VAR_258 ] ; else { for ( VAR_259 = 0 ; VAR_260 < ( TYPE_51 ) ( VAR_261 - 1 ) ; VAR_262 ++ ) * VAR_263 ++ = VAR_264 [ VAR_265 ] ; * VAR_266 ++ = 0 ; } } } VAR_267 = 0 ; VAR_268 = 0 ; VAR_269 = 0 ; VAR_270 = METHOD_48 ( VAR_271 ) ; do { switch ( VAR_272 & 0x3f ) { case VAR_273 : { VAR_274 = METHOD_49 ( VAR_275 ) ; if ( VAR_276 & 0x40 ) VAR_277 = METHOD_50 ( VAR_278 ) ; VAR_279 = 0 ; VAR_280 += VAR_281 ; break ; } case VAR_282 : { VAR_283 = METHOD_51 ( VAR_284 ) ; VAR_285 = ( unsigned TYPE_52 ) VAR_286 ; if ( VAR_287 == 255 ) VAR_288 = ( unsigned TYPE_53 ) ( VAR_289 - 1 ) ; VAR_290 = 0 ; break ; } case VAR_291 : { VAR_292 = METHOD_52 ( VAR_293 ) ; if ( VAR_294 & 0x40 ) VAR_295 = METHOD_53 ( VAR_296 ) ; VAR_297 += VAR_298 ; break ; } case VAR_299 : { VAR_300 = METHOD_54 ( VAR_301 ) ; if ( VAR_302 & 0x40 ) VAR_303 = METHOD_55 ( VAR_304 ) ; VAR_305 = ( ( VAR_306 -> VAR_307 - VAR_308 - 1 ) * VAR_309 -> VAR_310 * VAR_311 ) + VAR_312 * VAR_313 + VAR_314 ; VAR_315 ++ ;  if ( VAR_316 + ( ( TYPE_54 ) VAR_317 * VAR_318 ) > VAR_319 )  { if ( VAR_320 != 0 ) VAR_321 = ( unsigned TYPE_55 * ) METHOD_56 ( VAR_322 ) ; VAR_323 = METHOD_57 ( VAR_324 ) ; METHOD_58 ( VAR_325 , "UnableToReadImageData" ) ; } VAR_326 = VAR_327 + VAR_328 ; for ( VAR_329 = 0 ; VAR_330 < ( TYPE_56 ) VAR_331 ; VAR_332 ++ ) { VAR_333 = ( unsigned TYPE_57 ) METHOD_59 ( VAR_334 ) ; if ( ( VAR_335 < ( TYPE_58 ) VAR_336 -> VAR_337 ) && ( ( VAR_338 + VAR_339 ) < ( TYPE_59 ) VAR_340 -> VAR_341 ) ) * VAR_342 = VAR_343 ; VAR_344 += VAR_345 ; } if ( VAR_346 & 0x01 ) ( TYPE_60 ) METHOD_60 ( VAR_347 ) ; VAR_348 += VAR_349 ; break ; } case VAR_350 : { VAR_351 = METHOD_61 ( VAR_352 ) ; if ( VAR_353 & 0x40 ) VAR_354 = METHOD_62 ( VAR_355 ) ; VAR_356 = ( unsigned TYPE_61 ) METHOD_63 ( VAR_357 ) ; ( TYPE_62 ) METHOD_64 ( VAR_358 ) ; VAR_359 = ( ( VAR_360 -> VAR_361 - VAR_362 - 1 ) * VAR_363 -> VAR_364 * VAR_365 ) + VAR_366 * VAR_367 + VAR_368 ; VAR_369 ++ ;  if ( VAR_370 + ( ( TYPE_63 ) VAR_371 * VAR_372 ) > VAR_373 )  { if ( VAR_374 != 0 ) VAR_375 = ( unsigned TYPE_64 * ) METHOD_65 ( VAR_376 ) ; VAR_377 = METHOD_66 ( VAR_378 ) ; METHOD_67 ( VAR_379 , "UnableToReadImageData" ) ; } VAR_380 = VAR_381 + VAR_382 ; for ( VAR_383 = 0 ; VAR_384 < ( TYPE_65 ) VAR_385 ; VAR_386 ++ ) { if ( ( VAR_387 < ( TYPE_66 ) VAR_388 -> VAR_389 ) && ( ( VAR_390 + VAR_391 ) < ( TYPE_67 ) VAR_392 -> VAR_393 ) ) * VAR_394 = VAR_395 ; VAR_396 += VAR_397 ; } VAR_398 += VAR_399 ; break ; } default : break ; } VAR_400 = METHOD_68 ( VAR_401 ) ; } while ( ( ( VAR_402 & 0x3f ) != VAR_403 ) && ( VAR_404 != VAR_405 ) ) ; if ( VAR_406 != 0 ) { TYPE_68 VAR_407 ; VAR_408 = ( TYPE_69 ) ( VAR_409 - 1 ) ; VAR_410 = VAR_411 ; VAR_412 = ( TYPE_70 ) VAR_413 ; if ( VAR_414 == 1 ) for ( VAR_415 = 0 ; VAR_416 < ( TYPE_71 ) VAR_417 ; VAR_418 ++ ) { METHOD_69 ( VAR_419 , * VAR_420 & VAR_421 , & VAR_422 , VAR_423 ) ; * VAR_424 = VAR_425 [ ( TYPE_72 ) VAR_426 ] ; VAR_427 ++ ; } else if ( ( VAR_428 >= 3 ) && ( VAR_429 >= 3 ) ) for ( VAR_430 = 0 ; VAR_431 < ( TYPE_73 ) VAR_432 ; VAR_433 ++ ) for ( VAR_434 = 0 ; VAR_435 < ( TYPE_74 ) VAR_436 ; VAR_437 ++ ) { METHOD_70 ( VAR_438 , ( TYPE_75 ) ( VAR_439 * VAR_440 + ( * VAR_441 & VAR_442 ) ) , & VAR_443 , VAR_444 ) ; * VAR_445 = VAR_446 [ ( TYPE_76 ) VAR_447 ] ; VAR_448 ++ ; } if ( ( VAR_449 < ( TYPE_77 ) VAR_450 ) || ( VAR_451 < ( TYPE_78 ) VAR_452 ) ) { VAR_453 = ( unsigned TYPE_79 * ) METHOD_71 ( VAR_454 ) ; VAR_455 = METHOD_72 ( VAR_456 ) ; METHOD_73 ( VAR_457 , "UnableToReadImageData" ) ; } } if ( VAR_458 >= 3 ) { VAR_459 = VAR_460 ; for ( VAR_461 = 0 ; VAR_462 < ( TYPE_80 ) VAR_463 -> VAR_464 ; VAR_465 ++ ) { VAR_466 = METHOD_74 ( VAR_467 , 0 , VAR_468 , VAR_469 -> VAR_470 , 1 , VAR_471 ) ; if ( VAR_472 == ( TYPE_81 * ) VAR_473 ) break ; for ( VAR_474 = 0 ; VAR_475 < ( TYPE_82 ) VAR_476 -> VAR_477 ; VAR_478 ++ ) { METHOD_75 ( VAR_479 , METHOD_76 ( * VAR_480 ++ ) , VAR_481 ) ; METHOD_77 ( VAR_482 , METHOD_78 ( * VAR_483 ++ ) , VAR_484 ) ; METHOD_79 ( VAR_485 , METHOD_80 ( * VAR_486 ++ ) , VAR_487 ) ; if ( VAR_488 -> VAR_489 != VAR_490 ) METHOD_81 ( VAR_491 , METHOD_82 ( * VAR_492 ++ ) , VAR_493 ) ; VAR_494 += METHOD_83 ( VAR_495 ) ; } if ( METHOD_84 ( VAR_496 , VAR_497 ) == VAR_498 ) break ; if ( VAR_499 -> VAR_500 == ( TYPE_83 * ) VAR_501 ) { VAR_502 = METHOD_85 ( VAR_503 , VAR_504 , ( TYPE_84 ) VAR_505 , VAR_506 -> VAR_507 ) ; if ( VAR_508 == VAR_509 ) break ; } } } else { if ( VAR_510 == 0 ) VAR_511 = 256 ; if ( METHOD_86 ( VAR_512 , VAR_513 , VAR_514 ) == VAR_515 ) METHOD_87 ( VAR_516 , "MemoryAllocationFailed" ) ; VAR_517 = VAR_518 ; if ( VAR_519 == 1 ) for ( VAR_520 = 0 ; VAR_521 < ( TYPE_85 ) VAR_522 -> VAR_523 ; VAR_524 ++ ) { VAR_525 -> VAR_526 [ VAR_527 ] . VAR_528 = ( TYPE_86 ) METHOD_88 ( ( unsigned TYPE_87 ) VAR_529 ) ; VAR_530 -> VAR_531 [ VAR_532 ] . VAR_533 = ( TYPE_88 ) METHOD_89 ( ( unsigned TYPE_89 ) VAR_534 ) ; VAR_535 -> VAR_536 [ VAR_537 ] . VAR_538 = ( TYPE_90 ) METHOD_90 ( ( unsigned TYPE_91 ) VAR_539 ) ; } else if ( VAR_540 > 1 ) for ( VAR_541 = 0 ; VAR_542 < ( TYPE_92 ) VAR_543 -> VAR_544 ; VAR_545 ++ ) { VAR_546 -> VAR_547 [ VAR_548 ] . VAR_549 = ( TYPE_93 ) METHOD_91 ( * VAR_550 ) ; VAR_551 -> VAR_552 [ VAR_553 ] . VAR_554 = ( TYPE_94 ) METHOD_92 ( * ( VAR_555 + VAR_556 ) ) ; VAR_557 -> VAR_558 [ VAR_559 ] . VAR_560 = ( TYPE_95 ) METHOD_93 ( * ( VAR_561 + VAR_562 * 2 ) ) ; VAR_563 ++ ; } VAR_564 = VAR_565 ; if ( VAR_566 -> VAR_567 == VAR_568 ) { for ( VAR_569 = 0 ; VAR_570 < ( TYPE_96 ) VAR_571 -> VAR_572 ; VAR_573 ++ ) { VAR_574 = METHOD_94 ( VAR_575 , 0 , VAR_576 , VAR_577 -> VAR_578 , 1 , VAR_579 ) ; if ( VAR_580 == ( TYPE_97 * ) VAR_581 ) break ; for ( VAR_582 = 0 ; VAR_583 < ( TYPE_98 ) VAR_584 -> VAR_585 ; VAR_586 ++ ) { METHOD_95 ( VAR_587 , * VAR_588 ++ , VAR_589 ) ; VAR_590 += METHOD_96 ( VAR_591 ) ; } if ( METHOD_97 ( VAR_592 , VAR_593 ) == VAR_594 ) break ; if ( VAR_595 -> VAR_596 == ( TYPE_99 * ) VAR_597 ) { VAR_598 = METHOD_98 ( VAR_599 , VAR_600 , ( TYPE_100 ) VAR_601 , VAR_602 -> VAR_603 ) ; if ( VAR_604 == VAR_605 ) break ; } } ( TYPE_101 ) METHOD_99 ( VAR_606 , VAR_607 ) ; } else { for ( VAR_608 = 0 ; VAR_609 < ( TYPE_102 ) VAR_610 -> VAR_611 ; VAR_612 ++ ) { VAR_613 = METHOD_100 ( VAR_614 , 0 , VAR_615 , VAR_616 -> VAR_617 , 1 , VAR_618 ) ; if ( VAR_619 == ( TYPE_103 * ) VAR_620 ) break ; for ( VAR_621 = 0 ; VAR_622 < ( TYPE_104 ) VAR_623 -> VAR_624 ; VAR_625 ++ ) { METHOD_101 ( VAR_626 , ( TYPE_105 ) * VAR_627 ++ , & VAR_628 , VAR_629 ) ; METHOD_102 ( VAR_630 , METHOD_103 ( VAR_631 -> VAR_632 [ ( TYPE_106 ) VAR_633 ] . VAR_634 ) , VAR_635 ) ; METHOD_104 ( VAR_636 , ( TYPE_107 ) * VAR_637 ++ , & VAR_638 , VAR_639 ) ; METHOD_105 ( VAR_640 , METHOD_106 ( VAR_641 -> VAR_642 [ ( TYPE_108 ) VAR_643 ] . VAR_644 ) , VAR_645 ) ; METHOD_107 ( VAR_646 , ( TYPE_109 ) * VAR_647 ++ , & VAR_648 , VAR_649 ) ; METHOD_108 ( VAR_650 , METHOD_109 ( VAR_651 -> VAR_652 [ ( TYPE_110 ) VAR_653 ] . VAR_654 ) , VAR_655 ) ; METHOD_110 ( VAR_656 , METHOD_111 ( * VAR_657 ++ ) , VAR_658 ) ; VAR_659 += METHOD_112 ( VAR_660 ) ; } if ( VAR_661 < ( TYPE_111 ) VAR_662 -> VAR_663 ) break ; if ( METHOD_113 ( VAR_664 , VAR_665 ) == VAR_666 ) break ; if ( VAR_667 -> VAR_668 == ( TYPE_112 * ) VAR_669 ) { VAR_670 = METHOD_114 ( VAR_671 , VAR_672 , ( TYPE_113 ) VAR_673 , VAR_674 -> VAR_675 ) ; if ( VAR_676 == VAR_677 ) break ; } } VAR_678 -> VAR_679 = ( TYPE_114 * ) METHOD_115 ( VAR_680 -> VAR_681 ) ; VAR_682 -> VAR_683 = VAR_684 ; VAR_685 -> VAR_686 = 0 ; } } if ( VAR_687 != 0 ) VAR_688 = ( unsigned TYPE_115 * ) METHOD_116 ( VAR_689 ) ; VAR_690 = METHOD_117 ( VAR_691 ) ; if ( METHOD_118 ( VAR_692 ) != VAR_693 ) { METHOD_119 ( VAR_694 , VAR_695 , "UnexpectedEndOfFile" , VAR_696 -> VAR_697 ) ; break ; } if ( VAR_698 -> VAR_699 != 0 ) if ( VAR_700 -> VAR_701 >= ( VAR_702 -> VAR_703 + VAR_704 -> VAR_705 - 1 ) ) break ; ( TYPE_116 ) METHOD_120 ( VAR_706 ) ; VAR_707 = METHOD_121 ( VAR_708 , 2 , ( unsigned TYPE_117 * ) VAR_709 ) ; if ( ( VAR_710 != 0 ) && ( METHOD_122 ( VAR_711 , "\\122\\314" , 2 ) == 0 ) ) { METHOD_123 ( VAR_712 , VAR_713 , VAR_714 ) ; if ( METHOD_124 ( VAR_715 ) == ( TYPE_118 * ) VAR_716 ) { VAR_717 = METHOD_125 ( VAR_718 ) ; return ( ( TYPE_119 * ) VAR_719 ) ; } VAR_720 = METHOD_126 ( VAR_721 ) ; VAR_722 = METHOD_127 ( VAR_723 , VAR_724 , METHOD_128 ( VAR_725 ) , METHOD_129 ( VAR_726 ) ) ; if ( VAR_727 == VAR_728 ) break ; } } while ( ( VAR_729 != 0 ) && ( METHOD_130 ( VAR_730 , "\\122\\314" , 2 ) == 0 ) ) ; ( TYPE_120 ) METHOD_131 ( VAR_731 ) ; return ( METHOD_132 ( VAR_732 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 )  { TYPE_2 VAR_1 ; VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ;  VAR_6 = VAR_7 -> VAR_8 ;  for ( VAR_9 = 0 ; VAR_10 < 4 ; VAR_11 ++ ) { VAR_12 = VAR_13 -> VAR_14 [ VAR_15 ] ; VAR_16 = VAR_17 -> VAR_18 [ VAR_19 ] ; if ( VAR_20 == 0 )  METHOD_1 ( VAR_21 -> VAR_22 -> VAR_23 [ VAR_24 ] , VAR_25 , 0xFF ) ;   else if ( VAR_26 < VAR_27 )   METHOD_2 ( VAR_28 , VAR_29 -> VAR_30 -> VAR_31 [ VAR_32 ] , VAR_33 ) ;  else METHOD_3 ( VAR_34 -> VAR_35 -> VAR_36 [ VAR_37 ] , VAR_38 , VAR_39 ) ;  VAR_40 += VAR_41 ;  }  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const struct STRUCT_OR_UNION_2 * VAR_0 )  {  if ( VAR_1 -> VAR_2 != 0 ) return - VAR_3 ; if ( ! METHOD_1 ( STRUCT_OR_UNION_3 ) ) { if ( ! STRUCT_OR_UNION_4 -> VAR_4 -> VAR_5 -> METHOD_2 ) return - VAR_6 ; if ( ! STRUCT_OR_UNION_5 -> VAR_7 -> VAR_8 -> METHOD_3 ( STRUCT_OR_UNION_6 ) ) return - VAR_9 ; return METHOD_4 ( STRUCT_OR_UNION_7 , VAR_10 ) ; } if ( METHOD_5 ( STRUCT_OR_UNION_8 , VAR_11 ) ) return 0 ; printk ( KERN_WARNING "%s:Policyinconsistentwithencryptioncontext\\n" , VAR_12 ) ; return - VAR_13 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const TYPE_0 * VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 * VAR_4 , struct STRUCT_OR_UNION_2 * VAR_5 , unsigned TYPE_4 VAR_6 ) { struct STRUCT_OR_UNION_3 VAR_7 = { . VAR_8 . VAR_9 = VAR_10 , . VAR_11 . VAR_12 = VAR_13 , . VAR_14 = METHOD_1 ( ) ,  . VAR_15 . VAR_16 = VAR_17 -> VAR_18 ,  . VAR_19 . VAR_20 = VAR_21 , . VAR_22 . VAR_23 = VAR_24 , } ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; TYPE_5 VAR_25 ; TYPE_6 VAR_26 ; METHOD_2 ( "%s,%s,%p,%zu,%p,%p,%lx" , VAR_27 . VAR_28 . VAR_29 -> VAR_30 , VAR_31 . VAR_32 . VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 -> METHOD_3 ) { VAR_40 = VAR_41 -> METHOD_4 ( & VAR_42 . VAR_43 ) ; if ( VAR_44 < 0 ) { STRUCT_OR_UNION_6 = METHOD_5 ( VAR_45 ) ; goto VAR_46 ; } } VAR_47 = METHOD_6 ( & VAR_48 ) ; if ( ! METHOD_7 ( VAR_49 ) ) { STRUCT_OR_UNION_7 = METHOD_8 ( VAR_50 ) ; if ( VAR_51 ) { METHOD_9 ( & VAR_52 ) ; VAR_53 = METHOD_10 ( VAR_54 , STRUCT_OR_UNION_8 ) ; METHOD_11 ( VAR_55 ) ; if ( VAR_56 < 0 ) { METHOD_12 ( STRUCT_OR_UNION_9 ) ; STRUCT_OR_UNION_10 = METHOD_13 ( VAR_57 ) ; goto VAR_58 ; } } } else if ( METHOD_14 ( VAR_59 ) != - VAR_60 ) { STRUCT_OR_UNION_11 = METHOD_15 ( VAR_61 ) ; } else { STRUCT_OR_UNION_12 = METHOD_16 ( - VAR_62 ) ; if ( ! VAR_63 ) goto VAR_64 ; STRUCT_OR_UNION_13 = METHOD_17 ( & VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; } VAR_71 : if ( VAR_72 -> METHOD_18 ) VAR_73 -> METHOD_19 ( & VAR_74 . VAR_75 ) ; VAR_76 : METHOD_20 ( "=%p" , STRUCT_OR_UNION_14 ) ; return STRUCT_OR_UNION_15 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_4 * VAR_9 = ( struct STRUCT_OR_UNION_5 * ) VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 ; TYPE_5 VAR_13 ; TYPE_6 VAR_14 ; if ( VAR_15 & VAR_16 )  return - VAR_17 ;  if ( VAR_18 ) * VAR_19 = sizeof ( * VAR_20 ) ; if ( VAR_21 & VAR_22 ) return METHOD_2 ( VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 . VAR_30 . VAR_31 ) return METHOD_3 ( VAR_32 , VAR_33 , VAR_34 ) ; VAR_35 = METHOD_4 ( VAR_36 , VAR_37 , VAR_38 , & VAR_39 ) ; if ( ! VAR_40 ) goto VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; if ( VAR_45 > VAR_46 ) { VAR_47 = VAR_48 ; VAR_49 -> VAR_50 |= VAR_51 ; } if ( METHOD_5 ( VAR_52 ) ) { VAR_53 = METHOD_6 ( VAR_54 , 0 , VAR_55 -> VAR_56 , VAR_57 ) ; } else if ( VAR_58 -> VAR_59 & VAR_60 ) { if ( METHOD_7 ( VAR_61 ) ) goto VAR_62 ; VAR_63 = METHOD_8 ( VAR_64 , 0 , VAR_65 -> VAR_66 , VAR_67 ) ; } else { VAR_68 = METHOD_9 ( VAR_69 , 0 , VAR_70 -> VAR_71 ) ; if ( VAR_72 == - VAR_73 ) goto VAR_74 ; } if ( VAR_75 ) goto VAR_76 ; if ( VAR_77 ) { VAR_78 -> VAR_79 = VAR_80 ; VAR_81 -> VAR_82 = 0 ; VAR_83 -> VAR_84 = METHOD_10 ( VAR_85 ) -> VAR_86 ; VAR_87 -> VAR_88 = 0 ; VAR_89 -> VAR_90 = METHOD_11 ( & VAR_91 -> VAR_92 ,  METHOD_12 ( VAR_93 ) -> VAR_94 ) ;  } METHOD_13 ( VAR_95 , VAR_96 , VAR_97 ) ; if ( VAR_98 -> VAR_99 . VAR_100 ) METHOD_14 ( VAR_101 , VAR_102 , VAR_103 ) ; VAR_104 = VAR_105 ; if ( VAR_106 & VAR_107 ) VAR_108 = VAR_109 -> VAR_110 ; VAR_111 : METHOD_15 ( VAR_112 , VAR_113 ) ; VAR_114 : return VAR_115 ; VAR_116 : METHOD_16 ( VAR_117 , VAR_118 , VAR_119 ) ; VAR_120 = ( VAR_121 & VAR_122 ) ? - VAR_123 : - VAR_124 ; goto VAR_125 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 ) { TYPE_2 * TYPE_3 , * VAR_1 , * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , VAR_7 [ 228 ] ; unsigned TYPE_4 * VAR_8 = VAR_9 , * VAR_10 = VAR_11 ; TYPE_5 VAR_12 , VAR_13 , VAR_14 ; TYPE_6 VAR_15 , VAR_16 = VAR_17 ; TYPE_7 VAR_18 , VAR_19 ; TYPE_8 * VAR_20 ; VAR_21 = METHOD_1 ( VAR_22 , 4 ) ; if ( ! VAR_23 || ! METHOD_2 ( VAR_24 ) ) goto VAR_25 ; VAR_26 = METHOD_3 ( VAR_27 ) ; TYPE_9 = METHOD_4 ( VAR_28 , 0 ) ; VAR_29 = METHOD_5 ( VAR_30 , 1 ) ; VAR_31 = METHOD_6 ( VAR_32 , 2 ) ; VAR_33 = METHOD_7 ( VAR_34 , 3 ) ; VAR_35 = METHOD_8 ( VAR_36 , 5 ) ; VAR_37 = METHOD_9 ( VAR_38 , 6 ) ; VAR_39 = METHOD_10 ( VAR_40 , 7 ) ; VAR_41 = METHOD_11 ( METHOD_12 ( VAR_42 , 8 ) ) ;  if ( ! TYPE_10 || ! VAR_43 || ! VAR_44 || ! VAR_45 || ! VAR_46 || ! VAR_47 || ! VAR_48 ) {   if ( TYPE_11 )  METHOD_13 ( TYPE_12 ) ; if ( VAR_49 ) METHOD_14 ( VAR_50 ) ; if ( VAR_51 ) METHOD_15 ( VAR_52 ) ; goto VAR_53 ; } METHOD_16 ( & STRUCT_OR_UNION_2 -> VAR_54 ) ; METHOD_17 ( STRUCT_OR_UNION_3 -> VAR_55 . TYPE_13 ) ; STRUCT_OR_UNION_4 -> VAR_56 . TYPE_14 = TYPE_15 ; METHOD_18 ( STRUCT_OR_UNION_5 -> VAR_57 , 65 , "%s" , VAR_58 ) ; VAR_59 = METHOD_19 ( VAR_60 ) / 2 ; VAR_61 = METHOD_20 ( VAR_62 ) / 2 ; METHOD_21 ( STRUCT_OR_UNION_6 -> VAR_63 , 9 , "%s" , VAR_64 ) ; METHOD_22 ( STRUCT_OR_UNION_7 -> VAR_65 , 9 , "%s" , VAR_66 ) ; METHOD_23 ( STRUCT_OR_UNION_8 -> VAR_67 , 9 , "%s" , VAR_68 ) ; STRUCT_OR_UNION_9 -> VAR_69 . VAR_70 = VAR_71 ; VAR_72 = STRUCT_OR_UNION_10 -> VAR_73 = VAR_74 + STRUCT_OR_UNION_11 -> VAR_75 + STRUCT_OR_UNION_12 -> VAR_76 + VAR_77 ; STRUCT_OR_UNION_13 -> VAR_78 = VAR_79 + STRUCT_OR_UNION_14 -> VAR_80 ; for ( VAR_81 = 0 ; VAR_82 < STRUCT_OR_UNION_15 -> VAR_83 ; VAR_84 ++ ) METHOD_24 ( STRUCT_OR_UNION_16 -> VAR_85 . VAR_86 [ VAR_87 ] ) ; if ( VAR_88 ) { STRUCT_OR_UNION_17 -> VAR_89 . VAR_90 = METHOD_25 ( STRUCT_OR_UNION_18 -> VAR_91 . VAR_92 , sizeof ( TYPE_16 * ) * VAR_93 + 1 ) ; for ( VAR_94 = 0 ; VAR_95 < VAR_96 ; VAR_97 ++ ) { TYPE_17 * VAR_98 = METHOD_26 ( VAR_99 , VAR_100 ) ; STRUCT_OR_UNION_19 -> VAR_101 . VAR_102 [ VAR_103 ] = METHOD_27 ( 32 ) ; if ( METHOD_28 ( ! STRUCT_OR_UNION_20 -> VAR_104 . VAR_105 [ VAR_106 ] ) ) METHOD_29 ( 1 , "Failedtomallocpoolsworkmerkle_bin" ) ; if ( VAR_107 ) METHOD_30 ( VAR_108 , "merkle%d:%s" , VAR_109 , VAR_110 ) ; VAR_111 = METHOD_31 ( STRUCT_OR_UNION_21 -> VAR_112 . VAR_113 [ VAR_114 ] , VAR_115 , 32 ) ; METHOD_32 ( VAR_116 ) ; if ( METHOD_33 ( ! VAR_117 ) ) { METHOD_34 ( VAR_118 , "Failedtoconvertmerkletomerkle_bininparse_notify" ) ; goto VAR_119 ; } } } STRUCT_OR_UNION_22 -> VAR_120 = VAR_121 ; if ( VAR_122 ) STRUCT_OR_UNION_23 -> VAR_123 = 0 ; if 0 VAR_124 = METHOD_35 ( STRUCT_OR_UNION_24 -> VAR_125 ) + METHOD_36 ( STRUCT_OR_UNION_25 -> VAR_126 ) ; 32 + METHOD_37 ( STRUCT_OR_UNION_26 -> VAR_127 ) + METHOD_38 ( STRUCT_OR_UNION_27 -> VAR_128 ) + 8 + 96 ; METHOD_39 ( VAR_129 , 225 , "%s%s%s%s%s%s%s" , STRUCT_OR_UNION_28 -> VAR_130 , STRUCT_OR_UNION_29 -> VAR_131 , VAR_132 , STRUCT_OR_UNION_30 -> VAR_133 , STRUCT_OR_UNION_31 -> VAR_134 , "00000000" , VAR_135 ) ; VAR_136 = METHOD_40 ( STRUCT_OR_UNION_32 -> VAR_137 , VAR_138 , 112 ) ; if ( METHOD_41 ( ! VAR_139 ) ) { METHOD_42 ( VAR_140 , "Failedtoconvertheadertoheader_bininparse_notify" ) ; goto VAR_141 ; } VAR_142 = METHOD_43 ( VAR_143 ) ; VAR_144 = METHOD_44 ( VAR_145 , VAR_146 , VAR_147 ) ; if ( METHOD_45 ( ! VAR_148 ) ) { METHOD_46 ( VAR_149 , "Failedtoconvertcb1tocb1_bininparse_notify" ) ; goto VAR_150 ; } VAR_151 = METHOD_47 ( VAR_152 ) ; VAR_153 = METHOD_48 ( VAR_154 , VAR_155 , VAR_156 ) ; if ( METHOD_49 ( ! VAR_157 ) ) { METHOD_50 ( VAR_158 , "Failedtoconvertcb2tocb2_bininparse_notify" ) ; goto VAR_159 ; } METHOD_51 ( STRUCT_OR_UNION_33 -> VAR_160 ) ; METHOD_52 ( & VAR_161 ) ; STRUCT_OR_UNION_34 -> VAR_162 = METHOD_53 ( VAR_163 , 1 ) ; if ( METHOD_54 ( ! STRUCT_OR_UNION_35 -> VAR_164 ) ) METHOD_55 ( 1 , "Failedtocallocpoolcoinbaseinparse_notify" ) ; METHOD_56 ( STRUCT_OR_UNION_36 -> VAR_165 , VAR_166 , VAR_167 ) ; METHOD_57 ( STRUCT_OR_UNION_37 -> VAR_168 + VAR_169 , STRUCT_OR_UNION_38 -> VAR_170 , STRUCT_OR_UNION_39 -> VAR_171 ) ; METHOD_58 ( STRUCT_OR_UNION_40 -> VAR_172 + VAR_173 + STRUCT_OR_UNION_41 -> VAR_174 + STRUCT_OR_UNION_42 -> VAR_175 , VAR_176 , VAR_177 ) ; if ( VAR_178 ) { TYPE_18 * VAR_179 = METHOD_59 ( STRUCT_OR_UNION_43 -> VAR_180 , STRUCT_OR_UNION_44 -> VAR_181 ) ; METHOD_60 ( VAR_182 , "Pool%dcoinbase%s" , STRUCT_OR_UNION_45 -> VAR_183 , VAR_184 ) ; METHOD_61 ( VAR_185 ) ; } VAR_186 : METHOD_62 ( & STRUCT_OR_UNION_46 -> VAR_187 ) ; if ( VAR_188 ) { METHOD_63 ( VAR_189 , "job_id:%s" , TYPE_19 ) ; METHOD_64 ( VAR_190 , "prev_hash:%s" , VAR_191 ) ; METHOD_65 ( VAR_192 , "coinbase1:%s" , VAR_193 ) ; METHOD_66 ( VAR_194 , "coinbase2:%s" , VAR_195 ) ; METHOD_67 ( VAR_196 , "bbversion:%s" , VAR_197 ) ; METHOD_68 ( VAR_198 , "nbit:%s" , VAR_199 ) ; METHOD_69 ( VAR_200 , "ntime:%s" , VAR_201 ) ; METHOD_70 ( VAR_202 , "clean:%s" , VAR_203 ? "yes" : "no" ) ; } METHOD_71 ( VAR_204 ) ; METHOD_72 ( VAR_205 ) ; STRUCT_OR_UNION_47 -> VAR_206 ++ ; VAR_207 ++ ; if ( STRUCT_OR_UNION_48 == METHOD_73 ( ) ) VAR_208 = VAR_209 ; VAR_210 : return VAR_211 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { METHOD_1 ( VAR_3 != VAR_4 ) ; METHOD_2 ( VAR_5 > 0 ) ; TYPE_4 VAR_6 = 0 ; while ( VAR_7 > 0 ) {  TYPE_5 VAR_8 = METHOD_3 ( VAR_9 , VAR_10 + VAR_11 , VAR_12 ) ;  switch ( VAR_13 ) { case - 1 : METHOD_4 ( "In%s,errorwritingtotheserialportwithfd%d:%s" , VAR_14 , VAR_15 , METHOD_5 ( VAR_16 ) ) ; return VAR_17 ; case 0 : return VAR_18 ; default : VAR_19 += VAR_20 ; VAR_21 -= VAR_22 ; break ; } } return VAR_23 ; }
TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 * VAR_4 ) ;  if ( VAR_5 ) {  METHOD_2 ( VAR_6 , '\\0' , ( VAR_7 * VAR_8 ) ) ;  } return VAR_9 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; METHOD_1 ( VAR_1 ) ; VAR_2 = VAR_3 -> STRUCT_OR_UNION_1 ; VAR_4 -> STRUCT_OR_UNION_2 = VAR_5 ; METHOD_2 ( VAR_6 ) ; if ( METHOD_3 ( & VAR_7 -> VAR_8 ) ) { if ( VAR_9 -> VAR_10 && VAR_11 -> VAR_12 -> METHOD_4 ) VAR_13 -> VAR_14 -> METHOD_5 ( VAR_15 -> VAR_16 ) ; METHOD_6 ( VAR_17 ) ;  METHOD_7 ( VAR_18 ) ;  }  }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 * VAR_2 ;  METHOD_1 ( VAR_3 ) ;  TYPE_4 * VAR_4 = METHOD_2 ( VAR_5 , & VAR_6 ) ;  if ( VAR_7 == VAR_8 ) { if ( METHOD_3 ( VAR_9 ) ) METHOD_4 ( ) ; else return VAR_10 ; } if ( VAR_11 ) {  VAR_12 = METHOD_5 ( "O()O" , METHOD_6 ( VAR_13 ) , VAR_14 ) ;  METHOD_7 ( VAR_15 ) ; return VAR_16 ; } return METHOD_8 ( "O()" , METHOD_9 ( VAR_17 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 TYPE_3 if ( ! VAR_2 -> VAR_3 -> VAR_4 && VAR_5 -> VAR_6 && VAR_7 -> VAR_8 == VAR_9 -> VAR_10 -> VAR_11 ) { struct STRUCT_OR_UNION_1 * VAR_12 = VAR_13 ; struct STRUCT_OR_UNION_2 * VAR_14 = VAR_15 -> VAR_16 ; unsigned VAR_17 = VAR_18 -> VAR_19 ; VAR_20 = METHOD_1 ( VAR_21 -> VAR_22 [ 0 ] , METHOD_2 ( VAR_23 -> VAR_24 [ 0 ] . VAR_25 . VAR_26 ) ,  VAR_27 , ( TYPE_4 * * ) & VAR_28 ) ;  if ( VAR_29 || ! ( VAR_30 -> VAR_31 & VAR_32 ) ) return 0 ; METHOD_3 ( & VAR_33 -> VAR_34 , "Dual-RoleOTGdeviceon%sHNPport\\n" , ( VAR_35 == VAR_36 -> VAR_37 ) ? "" : "non-" ) ; if ( VAR_38 == VAR_39 -> VAR_40 ) { VAR_41 -> VAR_42 = 1 ; VAR_43 = METHOD_4 ( VAR_44 , METHOD_5 ( VAR_45 , 0 ) , VAR_46 , 0 , VAR_47 , 0 , VAR_48 , 0 , VAR_49 ) ; if ( VAR_50 < 0 ) { METHOD_6 ( & VAR_51 -> VAR_52 , "can\'tsetHNPmode:%d\\n" , VAR_53 ) ; VAR_54 -> VAR_55 = 0 ; } } else if ( VAR_56 -> VAR_57 == sizeof ( struct STRUCT_OR_UNION_3 ) ) { VAR_58 = METHOD_7 ( VAR_59 , METHOD_8 ( VAR_60 , 0 ) , VAR_61 , 0 , VAR_62 , 0 , VAR_63 , 0 , VAR_64 ) ; if ( VAR_65 < 0 ) METHOD_9 ( & VAR_66 -> VAR_67 , "seta_alt_hnp_supportfailed:%d\\n" , VAR_68 ) ; } } return VAR_69 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_1 * TYPE_4 = METHOD_1 ( VAR_4 ) ; TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = TYPE_7 -> VAR_7 - METHOD_2 ( TYPE_8 ) ; TYPE_9 VAR_8 = VAR_9 - ( TYPE_10 -> VAR_10 - TYPE_11 -> VAR_11 ) ;  TYPE_12 -> VAR_12 += VAR_13 ;  if ( VAR_14 < 0 ) { TYPE_13 VAR_15 = ( TYPE_14 ) TYPE_15 -> VAR_16 * TYPE_16 -> VAR_17 + TYPE_17 -> VAR_18 - 1 ; VAR_19 = METHOD_3 ( VAR_20 , TYPE_18 -> VAR_21 ) - TYPE_19 -> VAR_22 ; } else if ( ( VAR_23 & VAR_24 ) && ! ( VAR_25 & VAR_26 ) ) { VAR_27 = min_t ( TYPE_20 , VAR_28 , VAR_29 ( TYPE_21 , TYPE_22 -> VAR_30 - TYPE_23 -> VAR_31 , VAR_32 ) + 1 ) ; } else { VAR_33 = METHOD_4 ( VAR_34 , VAR_35 ) ; } VAR_36 = METHOD_5 ( VAR_37 , ( VAR_38 ? 1 : 0 ) ) ; TYPE_24 -> VAR_39 = METHOD_6 ( TYPE_25 ) + VAR_40 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,   TYPE_3 VAR_2 ) {   const TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ,   VAR_5 -> VAR_6 . VAR_7 [ VAR_8 ] ) ;   if ( ! VAR_9 -> VAR_10 )  ++ VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] [ VAR_15 ] ; return VAR_16 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  return METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ;   }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; const TYPE_4 * VAR_5 ; TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; unsigned TYPE_6 VAR_10 [ VAR_11 ] , VAR_12 [ VAR_13 ] , * VAR_14 = VAR_15 ; TYPE_7 VAR_16 ; METHOD_1 ( VAR_17 , VAR_18 , "13" , & VAR_19 , & VAR_20 , & VAR_21 , & VAR_22 ) ; METHOD_2 ( VAR_23 ) ; if ( ! METHOD_3 ( VAR_24 ) ) { METHOD_4 ( VAR_25 ) ; if ( METHOD_5 ( VAR_26 ) != VAR_27 ) METHOD_6 ( VAR_28 , "saltmustbean8-octetstring" ) ; VAR_29 = ( unsigned TYPE_8 * ) METHOD_7 ( VAR_30 ) ; } VAR_31 = METHOD_8 ( VAR_32 ) ? 2048 : METHOD_9 ( VAR_33 ) ; VAR_34 = METHOD_10 ( VAR_35 ) ? METHOD_11 ( ) : METHOD_12 ( VAR_36 ) ; METHOD_13 ( VAR_37 , VAR_38 ) ; METHOD_14 ( METHOD_15 ( VAR_39 ) , VAR_40 , VAR_41 , ( unsigned TYPE_9 * ) METHOD_16 ( VAR_42 ) , METHOD_17 ( VAR_43 ) , VAR_44 , VAR_45 , VAR_46 ) ; if ( METHOD_18 ( VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 , - 1 ) != 1 ) METHOD_19 ( VAR_52 , VAR_53 ) ; METHOD_20 ( VAR_54 , sizeof VAR_55 ) ; METHOD_21 ( VAR_56 , sizeof VAR_57 ) ;  return VAR_58 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_3 * VAR_3 = METHOD_2 ( VAR_4 ) ; METHOD_3 ( & VAR_5 -> VAR_6 , METHOD_4 ( VAR_7 ) , & VAR_8 , VAR_9 , "stellaris_enet" , 0x1000 ) ; METHOD_5 ( VAR_10 , & VAR_11 -> VAR_12 ) ; METHOD_6 ( VAR_13 , & VAR_14 -> VAR_15 ) ; METHOD_7 ( & VAR_16 -> VAR_17 . VAR_18 ) ; VAR_19 -> VAR_20 = METHOD_8 ( & VAR_21 , & VAR_22 -> VAR_23 , METHOD_9 ( METHOD_10 ( VAR_24 ) ) , VAR_25 -> VAR_26 , VAR_27 ) ; METHOD_11 ( METHOD_12 ( VAR_28 -> VAR_29 ) , VAR_30 -> VAR_31 . VAR_32 . VAR_33 ) ; METHOD_13 ( VAR_34 ) ;  METHOD_14 ( VAR_35 , "stellaris_enet" , - 1 , 1 ,  VAR_36 , VAR_37 , VAR_38 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , register const TYPE_2 * VAR_2 ) {  register TYPE_3 VAR_3 = VAR_4 -> VAR_5 ;  register TYPE_4 VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 < VAR_10 ) { METHOD_1 ( ( VAR_11 , "[|chdlc]" ) ) ; return ( VAR_12 ) ; }  return ( METHOD_2 ( VAR_13 , VAR_14 , VAR_15 ) ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , const TYPE_2 * VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; TYPE_5 * VAR_10 ; TYPE_6 * VAR_11 = VAR_12 ; struct STRUCT_OR_UNION_6 * VAR_13 ; TYPE_7 TYPE_8 struct STRUCT_OR_UNION_7 * VAR_14 = VAR_15 ; unsigned TYPE_9 VAR_16 = 0 ; TYPE_10 VAR_17 = 0 ; VAR_18 : VAR_19 = 0 ; VAR_20 = VAR_21 ; VAR_22 = VAR_23 ; VAR_24 = VAR_25 ; VAR_26 = VAR_27 ; VAR_28 = VAR_29 ; VAR_30 = METHOD_1 ( ) ; VAR_31 = METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_8 ) , VAR_32 ) ; if ( ! VAR_33 ) { VAR_34 = - VAR_35 ; goto VAR_36 ; } if ( METHOD_3 ( VAR_37 , VAR_38 , VAR_39 ) ) { VAR_40 = - VAR_41 ; goto VAR_42 ; } if ( VAR_43 -> VAR_44 ) { METHOD_4 ( 1 , "nulluser" ) ; VAR_45 -> VAR_46 = "" ; } else if ( VAR_47 -> VAR_48 ) { METHOD_5 ( 1 , "Username:%s" , VAR_49 -> VAR_50 ) ; } else { METHOD_6 ( "Nousernamespecified" ) ; VAR_51 = - VAR_52 ; goto VAR_53 ; } if ( VAR_54 -> VAR_55 == VAR_56 ) { VAR_57 -> VAR_58 = METHOD_7 ( ) ; } else { VAR_59 -> VAR_60 = METHOD_8 ( VAR_61 -> VAR_62 ) ; if ( VAR_63 -> VAR_64 == VAR_65 ) { METHOD_9 ( 1 , "CIFSmounterror:iocharset%snotfound" , VAR_66 -> VAR_67 ) ; VAR_68 = - VAR_69 ; goto VAR_70 ; } } VAR_71 -> VAR_72 = VAR_73 -> VAR_74 ; VAR_75 = METHOD_10 ( VAR_76 ) ; if ( METHOD_11 ( VAR_77 ) ) { VAR_78 = METHOD_12 ( VAR_79 ) ; goto VAR_80 ; } VAR_81 = METHOD_13 ( VAR_82 , VAR_83 ) ; if ( METHOD_14 ( VAR_84 ) ) { VAR_85 = METHOD_15 ( VAR_86 ) ; VAR_87 = VAR_88 ; goto VAR_89 ; } METHOD_16 ( VAR_90 , VAR_91 ) ; if ( VAR_92 -> VAR_93 & VAR_94 ) VAR_95 -> VAR_96 = VAR_97 ; else VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = 100 ; VAR_103 = METHOD_17 ( VAR_104 , VAR_105 ) ; if ( METHOD_18 ( VAR_106 ) ) { VAR_107 = METHOD_19 ( VAR_108 ) ; VAR_109 = VAR_110 ; goto VAR_111 ; } if ( ! VAR_112 -> VAR_113 ) { METHOD_20 ( VAR_114 , VAR_115 ) ; METHOD_21 ( VAR_116 , VAR_117 ) ; } if ( VAR_118 -> VAR_119 -> VAR_120 & VAR_121 ) METHOD_22 ( VAR_122 , VAR_123 , VAR_124 , VAR_125 ) ; else VAR_126 -> VAR_127 = 0 ; if ( ( VAR_128 -> VAR_129 & VAR_130 ) == 0 ) METHOD_23 ( VAR_131 -> VAR_132 , METHOD_24 ( VAR_133 ) ) ; if ( ( VAR_134 -> VAR_135 == 0 ) && ( VAR_136 -> VAR_137 > ( 1024 * 127 ) ) ) { VAR_138 -> VAR_139 = 1024 * 127 ; METHOD_25 ( VAR_140 , "noverylargereadsupport,rsizenow127K" ) ; } if ( ! ( VAR_141 -> VAR_142 -> VAR_143 & VAR_144 ) ) VAR_145 -> VAR_146 = METHOD_26 ( VAR_147 -> VAR_148 , ( VAR_149 -> VAR_150 -> VAR_151 -> VAR_152 - VAR_153 ) ) ; if ( ! ( VAR_154 -> VAR_155 -> VAR_156 & VAR_157 ) ) VAR_158 -> VAR_159 = METHOD_27 ( VAR_160 -> VAR_161 , ( VAR_162 -> VAR_163 -> VAR_164 -> VAR_165 - VAR_166 ) ) ; VAR_167 :  if ( ! VAR_168 && VAR_169 -> VAR_170 && VAR_171 ) {  VAR_172 = METHOD_28 ( VAR_173 , VAR_174 ) ; if ( VAR_175 == VAR_176 ) { VAR_177 = - VAR_178 ; goto VAR_179 ; } VAR_180 = METHOD_29 ( VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; if ( VAR_185 != 0 && VAR_186 != - VAR_187 ) { METHOD_30 ( VAR_188 ) ; goto VAR_189 ; } METHOD_31 ( VAR_190 ) ; } if ( VAR_191 == - VAR_192 ) { TYPE_11 TYPE_12 if ( VAR_193 > MAX_NESTED_LINKS ) { VAR_194 = - VAR_195 ; goto VAR_196 ; } if ( ( VAR_197 -> VAR_198 & VAR_199 ) == 0 ) METHOD_32 ( VAR_200 -> VAR_201 , METHOD_33 ( VAR_202 ) ) ; VAR_203 = METHOD_34 ( VAR_204 , VAR_205 ) ; if ( METHOD_35 ( VAR_206 ) ) { VAR_207 = METHOD_36 ( VAR_208 ) ; goto VAR_209 ; } METHOD_37 ( 1 , "Gettingreferralfor:%s" , VAR_210 ) ; VAR_211 = METHOD_38 ( VAR_212 , VAR_213 , VAR_214 + 1 , VAR_215 -> VAR_216 , & VAR_217 , & VAR_218 , VAR_219 -> VAR_220 & VAR_221 ) ; if ( ! VAR_222 && VAR_223 > 0 ) { TYPE_13 * VAR_224 = VAR_225 ; if ( VAR_226 != VAR_227 ) METHOD_39 ( VAR_228 ) ; VAR_229 = METHOD_40 ( VAR_230 -> VAR_231 , VAR_232 + 1 , VAR_233 , & VAR_234 ) ; METHOD_41 ( VAR_235 , VAR_236 ) ; METHOD_42 ( VAR_237 ) ; METHOD_43 ( VAR_238 ) ; if ( METHOD_44 ( VAR_239 ) ) { VAR_240 = METHOD_45 ( VAR_241 ) ; VAR_242 = VAR_243 ; goto VAR_244 ; } if ( VAR_245 ) METHOD_46 ( VAR_246 ) ; else if ( VAR_247 ) METHOD_47 ( VAR_248 ) ; METHOD_48 ( & VAR_249 ) ; VAR_250 ++ ; METHOD_49 ( VAR_251 ) ; goto VAR_252 ; } else VAR_253 = - VAR_254 ; } if ( VAR_255 ) goto VAR_256 ; VAR_257 = METHOD_50 ( sizeof * VAR_258 , VAR_259 ) ; if ( VAR_260 == VAR_261 ) { VAR_262 = - VAR_263 ; goto VAR_264 ; } VAR_265 -> VAR_266 = VAR_267 -> VAR_268 ; VAR_269 -> VAR_270 = VAR_271 ; VAR_272 -> VAR_273 = VAR_274 ; METHOD_51 ( VAR_275 , & VAR_276 -> VAR_277 ) ; METHOD_52 ( VAR_278 , & VAR_279 -> VAR_280 ) ; VAR_281 -> VAR_282 = VAR_283 ; METHOD_53 ( & VAR_284 -> VAR_285 ) ; METHOD_54 ( & VAR_286 -> VAR_287 , VAR_288 ) ; METHOD_55 ( & VAR_289 -> VAR_290 ) ; METHOD_56 ( VAR_291 , & VAR_292 -> VAR_293 , VAR_294 ) ; VAR_295 : if ( VAR_296 ) { if ( VAR_297 != VAR_298 ) METHOD_57 ( VAR_299 ) ; if ( VAR_300 ) METHOD_58 ( VAR_301 ) ; else if ( VAR_302 ) METHOD_59 ( VAR_303 ) ; else METHOD_60 ( VAR_304 ) ; goto VAR_305 ; } VAR_306 : METHOD_61 ( & VAR_307 ) ; METHOD_62 ( VAR_308 ) ; return VAR_309 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = METHOD_1 ( VAR_4 , VAR_5 ) ; struct STRUCT_OR_UNION_3 VAR_6 ; TYPE_2 VAR_7 = 1 ; struct STRUCT_OR_UNION_4 * VAR_8 = METHOD_2 ( VAR_9 ) ; if ( VAR_10 && VAR_11 -> VAR_12 == 0 ) METHOD_3 ( VAR_13 ) ; if ( VAR_14 ) { if ( ! METHOD_4 ( VAR_15 , VAR_16 ) ) { struct STRUCT_OR_UNION_5 VAR_17 ; METHOD_5 ( VAR_18 , & VAR_19 ) ; METHOD_6 ( VAR_20 , VAR_21 , VAR_22 , sizeof ( VAR_23 ) , & VAR_24 ) ; } else { struct STRUCT_OR_UNION_6 VAR_25 ; METHOD_7 ( VAR_26 , & VAR_27 ) ; METHOD_8 ( VAR_28 , VAR_29 , VAR_30 , sizeof ( VAR_31 ) , & VAR_32 ) ; } } METHOD_9 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; if ( ( VAR_35 -> VAR_36 & VAR_37 ) && METHOD_10 ( VAR_38 -> VAR_39 , VAR_40 . VAR_41 + 0 ) ) VAR_42 = 0 ; if ( VAR_43 && ( VAR_44 -> VAR_45 & VAR_46 ) && METHOD_11 ( VAR_47 -> VAR_48 , VAR_49 . VAR_50 + 2 ) ) VAR_51 = 0 ; if ( ! VAR_52 ) { METHOD_12 ( VAR_53 , VAR_54 , VAR_55 , sizeof ( VAR_56 ) , & VAR_57 ) ; if ( METHOD_13 ( VAR_58 ) && VAR_59 -> VAR_60 &&  ( VAR_61 -> VAR_62 & VAR_63 ) )  METHOD_14 ( VAR_64 , VAR_65 , VAR_66 , VAR_67 -> VAR_68 , VAR_69 -> VAR_70 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 ; VAR_5 = ( TYPE_4 * ) VAR_6 -> VAR_7 ; if ( ! VAR_8 ) return 1 ; METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 , VAR_12 , METHOD_2 ( VAR_13 , VAR_14 ) ) ; METHOD_3 ( VAR_15 -> VAR_16 , VAR_17 , VAR_18 , METHOD_4 ( VAR_19 , VAR_20 ) ) ; METHOD_5 ( VAR_21 -> VAR_22 , VAR_23 , VAR_24 , METHOD_6 ( VAR_25 , VAR_26 ) ) ;  if ( VAR_27 -> VAR_28 )  METHOD_7 ( VAR_29 -> VAR_30 , VAR_31 -> VAR_32 , VAR_33 -> VAR_34 ) ; METHOD_8 ( VAR_35 -> VAR_36 , VAR_37 ) ; if ( VAR_38 -> VAR_39 ) { METHOD_9 ( VAR_40 -> VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 ; } if ( METHOD_10 ( VAR_45 , VAR_46 ) ) { VAR_47 -> VAR_48 = METHOD_11 ( VAR_49 -> VAR_50 ) ; if ( ! VAR_51 -> VAR_52 ) return 1 ; } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * VAR_6 ) { if ( ( VAR_7 == VAR_8 ) || ( VAR_9 == VAR_10 ) || ( VAR_11 == VAR_12 ) ) {  return VAR_13 ;  } TYPE_8 VAR_14 = VAR_15 ; if ( VAR_16 != VAR_17 ) { VAR_18 = VAR_19 ; } METHOD_1 ( VAR_20 , VAR_21 , VAR_22 ) ; if ( METHOD_2 ( VAR_23 + VAR_24 , VAR_25 - VAR_26 , VAR_27 , VAR_28 + VAR_29 ) != VAR_30 ) { return VAR_31 ; } * VAR_32 = ( ( VAR_33 [ 11 ] & 0x80 ) == 0x80 ) ? 1 : 0 ; TYPE_9 VAR_34 = 0 ; VAR_35 = ( ( TYPE_10 ) VAR_36 [ VAR_37 - VAR_38 ] << 0 ) ; VAR_39 |= ( ( TYPE_11 ) VAR_40 [ VAR_41 - VAR_42 + 1 ] << 8 ) ; VAR_43 |= ( ( TYPE_12 ) VAR_44 [ VAR_45 - VAR_46 + 2 ] << 16 ) ; VAR_47 |= ( ( TYPE_13 ) VAR_48 [ VAR_49 - VAR_50 + 3 ] << 24 ) ; if ( * VAR_51 == 0 ) { if ( METHOD_3 ( VAR_52 , ( VAR_53 - VAR_54 ) , VAR_55 , VAR_56 ) != VAR_57 ) { return VAR_58 ; } } if ( VAR_59 == 1 ) else if ( * VAR_60 == 1 ) { TYPE_14 VAR_61 [ VAR_62 ] = { 0 } ; TYPE_15 VAR_63 = 0 ; VAR_64 [ VAR_65 ++ ] = ( TYPE_16 ) VAR_66 ; METHOD_4 ( VAR_67 + VAR_68 , VAR_69 , VAR_70 ) ; VAR_71 += VAR_72 ; VAR_73 [ VAR_74 ++ ] = VAR_75 & 0xFF ; VAR_76 [ VAR_77 ++ ] = ( VAR_78 >> 8 ) & 0xFF ; TYPE_17 VAR_79 [ VAR_80 + VAR_81 ] = { 0 } ; METHOD_5 ( VAR_82 , VAR_83 , VAR_84 ) ; METHOD_6 ( VAR_85 + VAR_86 - 1 , VAR_87 , VAR_88 ) ; if ( METHOD_7 ( VAR_89 , VAR_90 + VAR_91 - VAR_92 - VAR_93 , VAR_94 , VAR_95 ) != VAR_96 ) { return VAR_97 ; } } else { return VAR_98 ; } return VAR_99 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 ; TYPE_0 VAR_2 ; STRUCT_OR_UNION_5 = METHOD_1 ( VAR_3 ) ; if ( ! STRUCT_OR_UNION_6 ) return METHOD_2 ( - VAR_4 ) ; VAR_5 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_6 ) ; if ( ! VAR_7 ) { METHOD_4 ( STRUCT_OR_UNION_8 ) ; return METHOD_5 ( - VAR_8 ) ; } VAR_9 = METHOD_6 ( & VAR_10 -> VAR_11 ) ; if ( VAR_12 ) { METHOD_7 ( VAR_13 ) ; METHOD_8 ( STRUCT_OR_UNION_9 ) ; return METHOD_9 ( VAR_14 ) ; } VAR_15 -> VAR_16 . VAR_17 = & VAR_18 ; VAR_19 -> VAR_20 = METHOD_10 ( 1 , & VAR_21 ) ; METHOD_11 ( & VAR_22 -> VAR_23 , 1 ) ; VAR_24 -> VAR_25 = VAR_26 ; METHOD_12 ( & VAR_27 -> VAR_28 ) ; METHOD_13 ( & VAR_29 -> VAR_30 ) ; VAR_31 -> VAR_32 = 0 ; VAR_33 -> VAR_34 = METHOD_14 ( VAR_35 ) ; VAR_36 -> STRUCT_OR_UNION_10 = STRUCT_OR_UNION_11 ;  return VAR_37 ;  }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 , VAR_5 -> VAR_6 , VAR_7 ) ; if ( VAR_8 ) { TYPE_0 VAR_9 = ( TYPE_1 * ) VAR_10 - ( TYPE_2 * ) VAR_11 ; METHOD_2 ( VAR_12 , VAR_13 , VAR_14 -> VAR_15 ) ; if ( VAR_16 -> VAR_17 ) * ( ( TYPE_3 * * ) & VAR_18 -> VAR_19 ) += VAR_20 ; if ( VAR_21 -> VAR_22 ) * ( ( TYPE_4 * * ) & VAR_23 -> VAR_24 ) += VAR_25 ; if ( VAR_26 -> VAR_27 ) * ( ( TYPE_5 * * ) & VAR_28 -> VAR_29 ) += VAR_30 ; if ( VAR_31 -> VAR_32 ) * ( ( TYPE_6 * * ) & VAR_33 -> VAR_34 ) += VAR_35 ;  }  return VAR_36 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 ) { union STRUCT_OR_UNION_0 VAR_0 ; union STRUCT_OR_UNION_1 VAR_1 ; union STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; if ( ! METHOD_1 ( & VAR_6 , VAR_7 ) ) { switch ( VAR_8 . VAR_9 ) { case 0x6 : return METHOD_2 ( ) ; case 0xb : return METHOD_3 ( ) ; case 0xf : return METHOD_4 ( ) ; } return - VAR_10 ; } METHOD_5 ( 10 , & VAR_11 . VAR_12 , & VAR_13 . VAR_14 , & VAR_15 , & VAR_16 . VAR_17 ) ; if ( VAR_18 . VAR_19 . VAR_20 < VAR_21 ) return - VAR_22 ; VAR_23 = VAR_24 . VAR_25 . VAR_26 ; if ( VAR_27 < 2 ) VAR_28 = VAR_29 ; else VAR_30 = VAR_31 ; VAR_32 . VAR_33 = VAR_34 ; VAR_35 . VAR_36 = VAR_37 . VAR_38 . VAR_39 ; VAR_40 . VAR_41 = VAR_42 . VAR_43 . VAR_44 ; VAR_45 . VAR_46 = ( 1ULL << VAR_47 . VAR_48 . VAR_49 ) - 1 ; VAR_50 . VAR_51 = VAR_52 . VAR_53 ; VAR_54 . VAR_55 = VAR_56 . VAR_57 . VAR_58 ; VAR_59 . VAR_60 = min_t ( unsigned , VAR_61 , VAR_62 . VAR_63 ) ; if ( VAR_64 > 1 ) VAR_65 . VAR_66 = METHOD_6 ( ( TYPE_5 ) VAR_67 . VAR_68 . VAR_69 , 3 ) ; if ( VAR_70 > 1 ) { TYPE_6 VAR_71 ; METHOD_7 ( VAR_72 , VAR_73 ) ; VAR_74 . VAR_75 . VAR_76 = VAR_77 ; } METHOD_8 ( ) ; METHOD_9 ( VAR_78 ) ; switch ( VAR_79 . VAR_80 ) { case 14 : METHOD_10 ( "Coreevents," ) ; break ; case 15 : METHOD_11 ( VAR_81 ) ; case 22 : case 23 : case 29 : METHOD_12 ( VAR_82 , VAR_83 , sizeof ( VAR_84 ) ) ; METHOD_13 ( ) ; VAR_85 . VAR_86 = VAR_87 ; VAR_88 . VAR_89 = VAR_90 ; METHOD_14 ( "Core2events," ) ; break ; case 26 : case 30 : case 46 : METHOD_15 ( VAR_91 , VAR_92 , sizeof ( VAR_93 ) ) ; METHOD_16 ( VAR_94 , VAR_95 , sizeof ( VAR_96 ) ) ; METHOD_17 ( ) ; VAR_97 . VAR_98 = VAR_99 ; VAR_100 . VAR_101 = VAR_102 ; VAR_103 . VAR_104 = VAR_105 ; VAR_106 . VAR_107 = VAR_108 ; VAR_109 [ VAR_110 ] = X86_CONFIG ( . VAR_111 = 0x0e , . VAR_112 = 0x01 , . VAR_113 = 1 , . VAR_114 = 1 ) ; VAR_115 [ VAR_116 ] = X86_CONFIG ( . VAR_117 = 0xb1 , . VAR_118 = 0x3f , . VAR_119 = 1 , . VAR_120 = 1 ) ; METHOD_18 ( VAR_121 ) ; METHOD_19 ( "Nehalemevents," ) ; break ; case 28 : case 38 : case 39 : case 53 : case 54 : METHOD_20 ( VAR_122 , VAR_123 , sizeof ( VAR_124 ) ) ; METHOD_21 ( ) ; VAR_125 . VAR_126 = VAR_127 ; VAR_128 . VAR_129 = VAR_130 ; METHOD_22 ( "Atomevents," ) ; break ; case 37 : case 44 : case 47 : METHOD_23 ( VAR_131 , VAR_132 , sizeof ( VAR_133 ) ) ; METHOD_24 ( VAR_134 , VAR_135 , sizeof ( VAR_136 ) ) ; METHOD_25 ( ) ; VAR_137 . VAR_138 = VAR_139 ; VAR_140 . VAR_141 = VAR_142 ; VAR_143 . VAR_144 = VAR_145 ; VAR_146 . VAR_147 = VAR_148 ; VAR_149 . VAR_150 |= VAR_151 ; VAR_152 [ VAR_153 ] = X86_CONFIG ( . VAR_154 = 0x0e , . VAR_155 = 0x01 , . VAR_156 = 1 , . VAR_157 = 1 ) ; VAR_158 [ VAR_159 ] = X86_CONFIG ( . VAR_160 = 0xb1 , . VAR_161 = 0x3f , . VAR_162 = 1 , . VAR_163 = 1 ) ; METHOD_26 ( "Westmereevents," ) ; break ; case 42 : case 45 : METHOD_27 ( VAR_164 ) ; METHOD_28 ( VAR_165 , VAR_166 , sizeof ( VAR_167 ) ) ; METHOD_29 ( VAR_168 , VAR_169 , sizeof ( VAR_170 ) ) ; METHOD_30 ( ) ; VAR_171 . VAR_172 = VAR_173 ; VAR_174 . VAR_175 = VAR_176 ; VAR_177 . VAR_178 = VAR_179 ;  VAR_180 . VAR_181 = VAR_182 ;  VAR_183 . VAR_184 |= VAR_185 ; VAR_186 . VAR_187 |= VAR_188 ; VAR_189 [ VAR_190 ] = X86_CONFIG ( . VAR_191 = 0x0e , . VAR_192 = 0x01 , . VAR_193 = 1 , . VAR_194 = 1 ) ; VAR_195 [ VAR_196 ] = X86_CONFIG ( . VAR_197 = 0xb1 , . VAR_198 = 0x01 , . VAR_199 = 1 , . VAR_200 = 1 ) ; METHOD_31 ( "SandyBridgeevents," ) ; break ; case 58 : case 62 : METHOD_32 ( VAR_201 , VAR_202 , sizeof ( VAR_203 ) ) ; METHOD_33 ( VAR_204 , VAR_205 , sizeof ( VAR_206 ) ) ; METHOD_34 ( ) ; VAR_207 . VAR_208 = VAR_209 ; VAR_210 . VAR_211 = VAR_212 ;  VAR_213 . VAR_214 = VAR_215 ;  VAR_216 . VAR_217 = VAR_218 ; VAR_219 . VAR_220 |= VAR_221 ; VAR_222 . VAR_223 |= VAR_224 ; VAR_225 [ VAR_226 ] = X86_CONFIG ( . VAR_227 = 0x0e , . VAR_228 = 0x01 , . VAR_229 = 1 , . VAR_230 = 1 ) ; METHOD_35 ( "IvyBridgeevents," ) ; break ; default : switch ( VAR_231 . VAR_232 ) { case 1 : VAR_233 . VAR_234 = VAR_235 ; METHOD_36 ( "genericarchitectedperfmonv1," ) ; break ; default : VAR_236 . VAR_237 = VAR_238 ; METHOD_37 ( "genericarchitectedperfmon," ) ; break ; } } if ( VAR_239 . VAR_240 > VAR_241 ) { WARN ( 1 , VAR_242 "hwperfevents%d>max(%d),clipping!" , VAR_243 . VAR_244 , VAR_245 ) ; VAR_246 . VAR_247 = VAR_248 ; } VAR_249 . VAR_250 = ( 1 << VAR_251 . VAR_252 ) - 1 ; if ( VAR_253 . VAR_254 > VAR_255 ) { WARN ( 1 , VAR_256 "hwperfeventsfixed%d>max(%d),clipping!" , VAR_257 . VAR_258 , VAR_259 ) ; VAR_260 . VAR_261 = VAR_262 ; } VAR_263 . VAR_264 |= ( ( 1LL << VAR_265 . VAR_266 ) - 1 ) << VAR_267 ; if ( VAR_268 . VAR_269 ) { METHOD_38 ( VAR_270 , VAR_271 . VAR_272 ) { if ( VAR_273 -> VAR_274 != VAR_275 || VAR_276 -> VAR_277 == VAR_278 ) { continue ; } VAR_279 -> VAR_280 |= ( 1ULL << VAR_281 . VAR_282 ) - 1 ; VAR_283 -> VAR_284 += VAR_285 . VAR_286 ; } } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { static TYPE_1 VAR_2 ; static unsigned TYPE_2 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_1 ( VAR_5 ) ;  TYPE_3 VAR_6 ;  if ( METHOD_2 ( METHOD_3 ( VAR_7 ) , VAR_8 , VAR_9 , & VAR_10 -> VAR_11 ) ) return ; VAR_12 = VAR_13 / VAR_14 ; if ( VAR_15 != VAR_16 ) {  VAR_17 = VAR_18 ;   VAR_19 = 0 ;  } if ( ++ VAR_20 <= VAR_21 ) { METHOD_4 ( METHOD_5 ( VAR_22 ) , VAR_23 ) ; METHOD_6 ( VAR_24 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 ) ; if ( VAR_5 -> VAR_6 & VAR_7 ) {  struct STRUCT_OR_UNION_3 VAR_8 ;  VAR_9 . VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 ) -> VAR_13 -> VAR_14 ; METHOD_3 ( VAR_15 , & VAR_16 . VAR_17 ) ; METHOD_4 ( VAR_18 , VAR_19 . VAR_20 ) ; METHOD_5 ( VAR_21 , VAR_22 , VAR_23 , sizeof ( VAR_24 ) , & VAR_25 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 , VAR_6 ;  struct STRUCT_OR_UNION_0 VAR_7 = { VAR_8 , 0 } ;   struct STRUCT_OR_UNION_1 VAR_9 ;  METHOD_1 ( VAR_10 , & VAR_11 ) ; VAR_12 = VAR_13 ;  METHOD_2 ( & VAR_14 , 0 , 16 ) ;   VAR_15 = METHOD_3 ( & VAR_16 ) ;  VAR_17 += VAR_18 ;  METHOD_4 ( ) ;  METHOD_5 ( ) ; VAR_19 = METHOD_6 ( VAR_20 , VAR_21 ) ; VAR_22 += VAR_23 ;  METHOD_7 ( & VAR_24 , ( TYPE_6 ) VAR_25 , 16 ) ;  VAR_26 += METHOD_8 ( VAR_27 , VAR_28 ) ; * VAR_29 = VAR_30 - VAR_31 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ,  struct STRUCT_OR_UNION_2 * VAR_0 , const TYPE_1 * VAR_1 ) { METHOD_1 ( ! STRUCT_OR_UNION_3 ) ; if ( ! METHOD_2 ( VAR_2 ) ) return - VAR_3 ; if ( METHOD_3 ( VAR_4 , '%' ) ) return METHOD_4 ( STRUCT_OR_UNION_4 , VAR_5 , VAR_6 ) ; else if ( METHOD_5 ( STRUCT_OR_UNION_5 , VAR_7 ) ) return - VAR_8 ; else if ( VAR_9 -> VAR_10 != VAR_11 ) METHOD_6 ( VAR_12 -> VAR_13 , VAR_14 , VAR_15 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 -> VAR_3 . VAR_4 ) ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_1 VAR_11 = 0 ; unsigned TYPE_2 VAR_12 = 0 ; TYPE_3 * VAR_13 ;  TYPE_4 VAR_14 , VAR_15 ;  VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 -> VAR_18 . VAR_19 ) , METHOD_5 ( VAR_20 -> VAR_21 . VAR_22 ) ) ; if ( VAR_23 & VAR_24 ) return - VAR_25 ; if ( VAR_26 -> VAR_27 . VAR_28 == VAR_29 ) { if ( VAR_30 -> VAR_31 . VAR_32 == VAR_33 || VAR_34 -> VAR_35 . VAR_36 == VAR_37 ) VAR_38 |= VAR_39 ; } if ( METHOD_6 ( VAR_40 , VAR_41 , & VAR_42 ) && ( ! VAR_43 -> VAR_44 . VAR_45 || METHOD_7 ( & VAR_46 -> VAR_47 [ 0 ] , VAR_48 , & VAR_49 ) ) ) { METHOD_8 ( "classdescriptornotpresent\\n" ) ; return - VAR_50 ; }  VAR_51 -> VAR_52 = METHOD_9 ( VAR_53 -> VAR_54 ) ;   VAR_55 -> VAR_56 = VAR_57 -> VAR_58 ;   for ( VAR_59 = 0 ; VAR_60 < VAR_61 -> VAR_62 ; VAR_63 ++ )  if ( VAR_64 -> VAR_65 [ VAR_66 ] . VAR_67 == VAR_68 ) VAR_69 = METHOD_10 ( VAR_70 -> VAR_71 [ VAR_72 ] . VAR_73 ) ; if ( ! VAR_74 || VAR_75 > VAR_76 ) { METHOD_11 ( "weirdsizeofreportdescriptor(%u)\\n" , VAR_77 ) ; return - VAR_78 ; } VAR_79 = METHOD_12 ( VAR_80 , VAR_81 ) ; if ( ! VAR_82 ) return - VAR_83 ; METHOD_13 ( VAR_84 , VAR_85 -> VAR_86 . VAR_87 , 0 , 0 ) ; VAR_88 = METHOD_14 ( VAR_89 , VAR_90 -> VAR_91 . VAR_92 , VAR_93 , VAR_94 , VAR_95 ) ; if ( VAR_96 < 0 ) { METHOD_15 ( "readingreportdescriptorfailed\\n" ) ; METHOD_16 ( VAR_97 ) ; goto VAR_98 ; } VAR_99 = METHOD_17 ( VAR_100 , VAR_101 , VAR_102 ) ; METHOD_18 ( VAR_103 ) ; if ( VAR_104 ) { METHOD_19 ( "parsingreportdescriptorfailed\\n" ) ; goto VAR_105 ; } VAR_106 -> VAR_107 |= VAR_108 ; return 0 ; VAR_109 : return VAR_110 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * TYPE_3 , TYPE_4 TYPE_5 TYPE_6 , const TYPE_7 * VAR_2 TYPE_8 , VAR_3 TYPE_9 TYPE_10 , VAR_4 TYPE_11 TYPE_12 , VAR_5 TYPE_13 TYPE_14 , TYPE_15 VAR_6 TYPE_16 ) {  struct STRUCT_OR_UNION_1 VAR_7 ;  TYPE_17 VAR_8 , VAR_9 , VAR_10 ; unsigned TYPE_18 VAR_11 , VAR_12 ; const unsigned TYPE_19 * VAR_13 ;  METHOD_1 ( * TYPE_20 ) ;  METHOD_2 ( & VAR_14 , TYPE_21 , sizeof ( VAR_15 ) ) ; METHOD_3 ( VAR_16 , METHOD_4 ( VAR_17 ) , VAR_18 . VAR_19 . VAR_20 ) ; VAR_21 = METHOD_5 ( VAR_22 . VAR_23 . VAR_24 ) ; METHOD_6 ( ( VAR_25 , "len=%d" , VAR_26 - 4 ) ) ; if ( 2 < VAR_27 -> VAR_28 && 4 < VAR_29 ) { METHOD_7 ( ( VAR_30 , "" ) ) ; if ( ! METHOD_8 ( VAR_31 , ( const TYPE_22 * ) ( TYPE_23 + 1 ) , VAR_32 - 4 ) ) goto VAR_33 ; } VAR_34 = VAR_35 - sizeof ( struct STRUCT_OR_UNION_2 ) ; VAR_36 = 0 ; VAR_37 = 0 ; VAR_38 = ( const unsigned TYPE_24 * ) ( TYPE_25 ) + sizeof ( struct STRUCT_OR_UNION_3 ) ; switch ( VAR_39 . VAR_40 ) { case VAR_41 : METHOD_9 ( ( VAR_42 , "ipv4:" ) ) ; VAR_43 = 1 ; break ; case VAR_44 : METHOD_10 ( ( VAR_45 , "fqdn:" ) ) ; VAR_46 = 1 ; break ; case VAR_47 : METHOD_11 ( ( VAR_48 , "rfc822:" ) ) ; VAR_49 = 1 ; break ; case VAR_50 : METHOD_12 ( ( VAR_51 , "ipv6:" ) ) ; VAR_52 = 1 ; break ; case VAR_53 : METHOD_13 ( ( VAR_54 , "dn:" ) ) ; VAR_55 = 1 ; break ; case VAR_56 : METHOD_14 ( ( VAR_57 , "gn:" ) ) ; VAR_58 = 1 ; break ; case VAR_59 : METHOD_15 ( ( VAR_60 , "keyid:" ) ) ; VAR_61 = 1 ; break ; } if ( VAR_62 ) { METHOD_16 ( * VAR_63 , VAR_64 ) ; for ( VAR_65 = 0 ; VAR_66 < VAR_67 ; VAR_68 ++ ) { if ( METHOD_17 ( VAR_69 [ VAR_70 ] ) ) { METHOD_18 ( ( VAR_71 , "%c" , VAR_72 [ VAR_73 ] ) ) ; } else { METHOD_19 ( ( VAR_74 , "." ) ) ; } } } if ( VAR_75 ) { if ( ! METHOD_20 ( VAR_76 , ( const TYPE_26 * ) VAR_77 , VAR_78 ) ) goto VAR_79 ; } return ( const TYPE_27 * ) TYPE_28 + VAR_80 ; VAR_81 : METHOD_21 ( ( VAR_82 , "[|%s]" , METHOD_22 ( VAR_83 ) ) ) ; return VAR_84 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 ,  TYPE_2 * VAR_3 ) {  TYPE_3 * VAR_4 = METHOD_1 ( VAR_5 , VAR_6 ) ;  METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 , VAR_13 , 0 ) ; VAR_14 -> VAR_15 |= VAR_16 ;  METHOD_4 ( ( TYPE_4 * ) VAR_17 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; VAR_7 = 0 ; VAR_8 = 0 ; if ( ! ( VAR_9 = METHOD_1 ( ) ) ) { goto VAR_10 ; } VAR_11 -> VAR_12 = 0 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0 ; VAR_19 -> VAR_20 = 0 ; VAR_21 -> VAR_22 = 0 ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = - 1 ; VAR_27 -> VAR_28 = 0 ; if ( ! ( VAR_29 = METHOD_2 ( VAR_30 ) ) ) { goto VAR_31 ; } while ( ! ( VAR_32 = METHOD_3 ( VAR_33 ) ) ) { switch ( METHOD_4 ( METHOD_5 ( VAR_34 , METHOD_6 ( VAR_35 ) ) ) -> VAR_36 ) { case VAR_37 : VAR_38 -> VAR_39 = METHOD_7 ( METHOD_8 ( VAR_40 ) ) ; break ; case VAR_41 : VAR_42 -> VAR_43 = METHOD_9 ( METHOD_10 ( VAR_44 ) ) ; break ; case VAR_45 : VAR_46 -> VAR_47 = METHOD_11 ( METHOD_12 ( VAR_48 ) ) ; break ; case VAR_49 : VAR_50 -> VAR_51 = METHOD_13 ( METHOD_14 ( VAR_52 ) ) ; break ; case VAR_53 : VAR_54 -> VAR_55 = METHOD_15 ( METHOD_16 ( VAR_56 ) ) ; break ; case VAR_57 : VAR_58 -> VAR_59 = METHOD_17 ( METHOD_18 ( VAR_60 ) ) ; break ; case VAR_61 : VAR_62 -> VAR_63 = METHOD_19 ( METHOD_20 ( VAR_64 ) ) ; break ; case VAR_65 : VAR_66 -> VAR_67 = METHOD_21 ( METHOD_22 ( VAR_68 ) ) ; break ; case VAR_69 : if ( ! ( VAR_70 -> VAR_71 = METHOD_23 ( METHOD_24 ( VAR_72 ) ) ) ) { return - 1 ; } break ; } }  METHOD_25 ( VAR_73 ) ;  if ( ! VAR_74 -> VAR_75 || ! VAR_76 -> VAR_77 ) { goto VAR_78 ; } if ( METHOD_26 ( VAR_79 , VAR_80 -> VAR_81 , VAR_82 ) ) { goto VAR_83 ; }  return 0 ;  VAR_84 : if ( VAR_85 ) { METHOD_27 ( VAR_86 ) ; } if ( VAR_87 ) { METHOD_28 ( VAR_88 ) ; } return - 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_3 * VAR_6 = & VAR_7 -> VAR_8 [ VAR_9 ] ; struct STRUCT_OR_UNION_4 * VAR_10 ; struct STRUCT_OR_UNION_5 * VAR_11 ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; TYPE_3 VAR_12 , VAR_13 ; for ( VAR_14 = 0 ; VAR_15 < VAR_16 ; VAR_17 ++ ) { VAR_18 = METHOD_2 ( VAR_19 ) ; if ( ! VAR_20 ) { VAR_21 = - VAR_22 ; goto VAR_23 ; } VAR_24 = VAR_25 [ VAR_26 ] . VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; STRUCT_OR_UNION_8 = METHOD_3 ( 0 , VAR_31 ) ; if ( ! STRUCT_OR_UNION_9 ) { VAR_32 = - VAR_33 ; goto VAR_34 ; } METHOD_4 ( STRUCT_OR_UNION_10 , VAR_35 -> VAR_36 , VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , VAR_41 -> VAR_42 , VAR_43 , VAR_44 ) ; if ( ! ( VAR_45 -> VAR_46 % VAR_47 -> VAR_48 ) ) { STRUCT_OR_UNION_11 -> VAR_49 |= VAR_50 ; } METHOD_5 ( STRUCT_OR_UNION_12 , & VAR_51 -> VAR_52 ) ; VAR_53 = METHOD_6 ( STRUCT_OR_UNION_13 , VAR_54 ) ; if ( VAR_55 ) { METHOD_7 ( VAR_56 , VAR_57 , "usbbulktransmitfailed:%d\\n" , VAR_58 ) ; METHOD_8 ( STRUCT_OR_UNION_14 ) ;  VAR_59 = - VAR_60 ;  goto VAR_61 ; } METHOD_9 ( STRUCT_OR_UNION_15 ) ; } return 0 ; VAR_62 : METHOD_10 ( VAR_63 -> VAR_64 , VAR_65 ) ; VAR_66 : return VAR_67 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 , VAR_8 ;  TYPE_7 VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 ;   TYPE_8 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ;  TYPE_9 VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 , VAR_28 ; TYPE_10 VAR_29 , VAR_30 ; TYPE_11 VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 ; TYPE_12 VAR_37 , VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 ; TYPE_13 VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ; TYPE_14 * VAR_49 ; TYPE_15 * VAR_50 ; TYPE_16 * VAR_51 ; const TYPE_17 * VAR_52 = VAR_53 ; TYPE_18 VAR_54 ; VAR_55 = VAR_56 << 1 ; VAR_57 = VAR_58 << 2 ; VAR_59 = ( VAR_60 << 2 ) + ( VAR_61 << 1 ) ; VAR_62 = & ( VAR_63 [ VAR_64 ] ) ; VAR_65 = & ( VAR_66 [ VAR_67 ] ) ; VAR_68 = & ( VAR_69 [ VAR_70 ] ) ; VAR_71 = 6 * ( VAR_72 ) ; for ( VAR_73 = 0 ; VAR_74 < VAR_75 ; VAR_76 ++ ) { for ( VAR_77 = 0 ; VAR_78 < VAR_79 ; VAR_80 ++ ) { VAR_81 = ( * VAR_82 ++ ) ; VAR_83 = ( * VAR_84 ++ ) ; VAR_85 = ( * VAR_86 ++ ) ; VAR_87 = ( * VAR_88 ++ ) ; VAR_89 = ( * VAR_90 ++ ) ; VAR_91 = ( * VAR_92 ++ ) ; VAR_93 = VAR_94 [ 0 ] ; VAR_95 = VAR_96 [ VAR_97 ] ; VAR_98 = VAR_99 [ VAR_100 ] ; VAR_101 = VAR_102 [ VAR_103 ] ;  VAR_104 = VAR_105 + VAR_106 ;   VAR_107 = VAR_108 - VAR_109 ;   VAR_110 = VAR_111 + VAR_112 ;   VAR_113 = VAR_114 - VAR_115 ;   VAR_116 [ 0 ] = VAR_117 + VAR_118 ;   VAR_119 = VAR_120 - VAR_121 ;  VAR_122 = VAR_123 [ 1 ] ; VAR_124 = VAR_125 [ VAR_126 + 1 ] ; VAR_127 = VAR_128 [ VAR_129 + 1 ] ; VAR_130 = VAR_131 [ VAR_132 + 1 ] ;  VAR_133 = VAR_134 + VAR_135 ;   VAR_136 = VAR_137 - VAR_138 ;   VAR_139 = VAR_140 + VAR_141 ;   VAR_142 = VAR_143 - VAR_144 ;   VAR_145 [ 1 ] = VAR_146 + VAR_147 ;   VAR_148 = VAR_149 - VAR_150 ;   VAR_151 = VAR_152 + VAR_153 ;   VAR_154 = VAR_155 - VAR_156 ;   VAR_157 = VAR_158 + VAR_159 ;   VAR_160 = VAR_161 - VAR_162 ;  VAR_163 = METHOD_1 ( VAR_164 , VAR_165 ) ; VAR_166 = METHOD_2 ( VAR_167 , VAR_168 ) ; VAR_169 [ VAR_170 ] = ( TYPE_19 ) ( ( VAR_171 + VAR_172 ) >> 32 ) << VAR_173 ; VAR_174 = METHOD_3 ( VAR_175 , VAR_176 ) ; VAR_177 = METHOD_4 ( VAR_178 , VAR_179 ) ; VAR_180 [ VAR_181 + 1 ] = ( TYPE_20 ) ( ( VAR_182 - VAR_183 ) >> 32 ) << VAR_184 ; VAR_185 = METHOD_5 ( VAR_186 , VAR_187 ) ; VAR_188 = METHOD_6 ( VAR_189 , VAR_190 ) ; VAR_191 [ VAR_192 ] = ( TYPE_21 ) ( ( VAR_193 + VAR_194 ) >> 32 ) << VAR_195 ; VAR_196 = METHOD_7 ( VAR_197 , VAR_198 ) ; VAR_199 = METHOD_8 ( VAR_200 , VAR_201 ) ; VAR_202 [ VAR_203 + 1 ] = ( TYPE_22 ) ( ( VAR_204 - VAR_205 ) >> 32 ) << VAR_206 ; VAR_207 = METHOD_9 ( VAR_208 , VAR_209 ) ; VAR_210 = METHOD_10 ( VAR_211 , VAR_212 ) ; VAR_213 [ VAR_214 ] = ( TYPE_23 ) ( ( VAR_215 + VAR_216 ) >> 32 ) << VAR_217 ; VAR_218 = METHOD_11 ( VAR_219 , VAR_220 ) ; VAR_221 = METHOD_12 ( VAR_222 , VAR_223 ) ; VAR_224 [ VAR_225 + 1 ] = ( TYPE_24 ) ( ( VAR_226 - VAR_227 ) >> 32 ) << VAR_228 ; VAR_229 += 2 ; } VAR_230 += VAR_231 ; VAR_232 = VAR_233 - VAR_234 ; } }
static TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , const TYPE_5 * * VAR_4 ) { unsigned TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 = * VAR_8 , VAR_9 , VAR_10 ; TYPE_8 VAR_11 = 1 ; VAR_12 : if ( METHOD_1 ( VAR_13 - VAR_14 < 2 ) ) { if ( VAR_15 == VAR_16 ) goto VAR_17 ; goto VAR_18 ; } VAR_19 = VAR_20 [ VAR_21 ++ ] ;  if ( VAR_22 == 0 ) {  if ( VAR_23 [ VAR_24 ++ ] != 0 ) goto VAR_25 ; if ( -- VAR_26 <= 0 ) { * VAR_27 = VAR_28 - * VAR_29 ; * VAR_30 = VAR_31 ; return 0 ; } goto VAR_32 ; } if ( METHOD_2 ( ( VAR_33 & 0x1f ) == VAR_34 ) ) { do { if ( METHOD_3 ( VAR_35 - VAR_36 < 2 ) ) goto VAR_37 ; VAR_38 = VAR_39 [ VAR_40 ++ ] ; } while ( VAR_41 & 0x80 ) ; } VAR_42 = VAR_43 [ VAR_44 ++ ] ;  if ( VAR_45 <= 0x7f ) {  VAR_46 += VAR_47 ; goto VAR_48 ; } if ( METHOD_4 ( VAR_49 == VAR_50 ) ) { if ( METHOD_5 ( ( VAR_51 & VAR_52 ) == VAR_53 << 5 ) ) goto VAR_54 ; VAR_55 ++ ; goto VAR_56 ; } VAR_57 = VAR_58 - 0x80 ;  if ( METHOD_6 ( VAR_59 > sizeof ( TYPE_9 ) - 1 ) )  goto VAR_60 ; if ( METHOD_7 ( VAR_61 > VAR_62 - VAR_63 ) ) goto VAR_64 ;  for ( VAR_65 = 0 ; VAR_66 > 0 ; VAR_67 -- ) {  VAR_68 <<= 8 ; VAR_69 |= VAR_70 [ VAR_71 ++ ] ; }  VAR_72 += VAR_73 ;  goto VAR_74 ; VAR_75 : * VAR_76 = "Unsupportedlength" ; goto VAR_77 ; VAR_78 : * VAR_79 = "Indefinitelenprimitivenotpermitted" ; goto VAR_80 ; VAR_81 : * VAR_82 = "InvalidlengthEOC" ; goto VAR_83 ; VAR_84 : * VAR_85 = "Dataoverrunerror" ; goto VAR_86 ; VAR_87 : * VAR_88 = "MissingEOCinindefinitelencons" ; VAR_89 : * VAR_90 = VAR_91 ; return - 1 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * * VAR_1 , TYPE_2 VAR_2 ) { unsigned TYPE_3 VAR_3 ; TYPE_4 * VAR_4 = VAR_5 ; if ( ! VAR_6 ) { METHOD_1 ( 1 , "coherentpoolnotinitialised!\\n" ) ; return VAR_7 ; } VAR_8 = METHOD_2 ( VAR_9 , VAR_10 ) ; if ( VAR_11 ) { TYPE_5 VAR_12 = METHOD_3 ( VAR_13 , VAR_14 ) ; * VAR_15 = METHOD_4 ( VAR_16 ) ; VAR_17 = ( TYPE_6 * ) VAR_18 ;  if ( VAR_19 & VAR_20 )  METHOD_5 ( VAR_21 , 0 , VAR_22 ) ; } return VAR_23 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) {  return METHOD_1 ( STRUCT_OR_UNION_2 , STRUCT_OR_UNION_3 -> VAR_1 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { unsigned VAR_4 ; unsigned VAR_5 = VAR_6 -> VAR_7 ; unsigned VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = VAR_12 -> VAR_13 ; TYPE_3 VAR_14 = VAR_15 -> VAR_16 ; TYPE_4 VAR_17 = VAR_18 -> VAR_19 ; TYPE_5 * VAR_20 ; VAR_21 = METHOD_1 ( sizeof ( TYPE_6 ) * VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) return ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { VAR_29 [ VAR_30 ] = VAR_31 < 0 ? METHOD_2 ( METHOD_3 ( VAR_32 , VAR_33 , VAR_34 + VAR_35 * VAR_36 , VAR_37 ) , VAR_38 ) : METHOD_4 ( VAR_39 , VAR_40 , VAR_41 + VAR_42 * VAR_43 , VAR_44 ) ; if ( ! ( VAR_45 -> VAR_46 & VAR_47 ) &&  VAR_48 [ VAR_49 ] >= VAR_50 && VAR_51 [ VAR_52 ] <= VAR_53 &&  VAR_54 -> VAR_55 [ VAR_56 [ VAR_57 ] - VAR_58 ] . VAR_59 == VAR_60 + 1 ) goto VAR_61 ; } for ( VAR_62 = 0 ; VAR_63 < VAR_64 ; VAR_65 ++ ) { if ( VAR_66 & VAR_67 -> VAR_68 ) { METHOD_5 ( VAR_69 , VAR_70 , & VAR_71 -> VAR_72 [ VAR_73 ] , VAR_74 [ VAR_75 ] , VAR_76 ) ; continue ; } if ( VAR_77 -> VAR_78 [ VAR_79 ] >= VAR_80 && VAR_81 -> VAR_82 [ VAR_83 ] <= VAR_84  && VAR_85 -> VAR_86 [ VAR_87 -> VAR_88 [ VAR_89 ] - VAR_90 ] . VAR_91  && METHOD_6 ( VAR_92 , VAR_93 -> VAR_94 [ VAR_95 ] , VAR_96 ) ) METHOD_7 ( VAR_97 , VAR_98 , & VAR_99 -> VAR_100 [ VAR_101 -> VAR_102 [ VAR_103 ] - VAR_104 ] , 0 , VAR_105 ) ; if ( VAR_106 [ VAR_107 ] >= VAR_108 && VAR_109 [ VAR_110 ] <= VAR_111  && VAR_112 -> VAR_113 [ VAR_114 [ VAR_115 ] - VAR_116 ] . VAR_117  && METHOD_8 ( VAR_118 -> VAR_119 , VAR_120 [ VAR_121 ] , VAR_122 ) ) METHOD_9 ( VAR_123 , VAR_124 , & VAR_125 -> VAR_126 [ VAR_127 [ VAR_128 ] - VAR_129 ] , 1 , VAR_130 ) ; } METHOD_10 ( VAR_131 -> VAR_132 , VAR_133 , VAR_134 * sizeof ( TYPE_7 ) ) ; VAR_135 : METHOD_11 ( VAR_136 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ,  struct STRUCT_OR_UNION_0 * VAR_1 ) {  const TYPE_2 VAR_2 = VAR_3 -> VAR_4 != VAR_5 -> VAR_6 || VAR_7 -> VAR_8 != VAR_9 -> VAR_10 ;  METHOD_1 ( VAR_11 , VAR_12 ) ;  if ( VAR_13 ) {  METHOD_2 ( VAR_14 , VAR_15 -> VAR_16 - 1 , 16 ) ;   METHOD_3 ( VAR_17 , VAR_18 -> VAR_19 - 1 , 16 ) ;  } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 * VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 ) { struct STRUCT_OR_UNION_0 * VAR_11 = VAR_12 -> VAR_13 ; const TYPE_12 * VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 , VAR_18 ) ; const TYPE_13 * VAR_19 = VAR_20 + VAR_21 -> VAR_22 -> VAR_23 - VAR_24 ; TYPE_14 VAR_25 ; TYPE_15 VAR_26 ; TYPE_16 VAR_27 ; TYPE_17 VAR_28 = VAR_29 - VAR_30 ; TYPE_18 VAR_31 = VAR_32 -> VAR_33 ; VAR_34 * VAR_35 , * VAR_36 , * VAR_37 = VAR_38 ; TYPE_19 VAR_39 = VAR_40 ;  if ( VAR_41 >= VAR_42 ) {  } VAR_43 = METHOD_2 ( VAR_44 , VAR_45 - VAR_46 , & VAR_47 ) ; VAR_48 = METHOD_3 ( VAR_49 , VAR_50 - VAR_51 , & VAR_52 ) ; TYPE_20 VAR_53 = 0 ; TYPE_21 VAR_54 = VAR_55 ; if ( ! ( VAR_56 = METHOD_4 ( ( TYPE_22 ) VAR_57 ) ) ) { return ; } if ( ! ( VAR_58 = METHOD_5 ( ( TYPE_23 ) VAR_59 ) ) ) { METHOD_6 ( VAR_60 ) ; return ; } struct STRUCT_OR_UNION_1 VAR_61 [ VAR_62 ] ; METHOD_7 ( VAR_63 , 0 , sizeof ( struct STRUCT_OR_UNION_2 ) * VAR_64 ) ; if ( ! ( VAR_65 & 0x0008 ) ) { VAR_66 [ VAR_67 ] . VAR_68 = "this" ; VAR_69 [ VAR_70 ] . VAR_71 = METHOD_8 ( "%s;" , VAR_72 ) ; VAR_73 [ VAR_74 ] . VAR_75 = 0 ; VAR_76 [ VAR_77 ] . VAR_78 = VAR_79 ; VAR_80 [ VAR_81 ] . VAR_82 = VAR_83 ; VAR_84 ++ ; } if ( ! ( VAR_85 = METHOD_9 ( VAR_86 , VAR_87 ) ) ) { METHOD_10 ( VAR_88 ) ; METHOD_11 ( VAR_89 ) ; return ; } TYPE_24 * VAR_90 = METHOD_12 ( VAR_91 ) ; TYPE_25 * VAR_92 ; TYPE_26 * VAR_93 ; TYPE_27 VAR_94 ; METHOD_13 ( VAR_95 , VAR_96 , VAR_97 ) { if ( ( VAR_98 >= VAR_99 ) || ! VAR_100 || VAR_101 <= 0 ) { METHOD_14 ( VAR_102 ) ; METHOD_15 ( VAR_103 ) ; METHOD_16 ( VAR_104 ) ; return ; } VAR_105 = METHOD_17 ( VAR_106 , VAR_107 - VAR_108 , & VAR_109 ) ; VAR_110 -= 1 ; VAR_111 = METHOD_18 ( VAR_112 , VAR_113 ) ; VAR_114 = VAR_115 ; switch ( VAR_116 [ 0 ] ) { case 'D' : case 'J' : VAR_117 += 2 ; break ; default : VAR_118 += 1 ; break ; } if ( VAR_119 ) { VAR_120 [ VAR_121 ] . VAR_122 = VAR_123 ; VAR_124 [ VAR_125 ] . VAR_126 = VAR_127 ; VAR_128 [ VAR_129 ] . VAR_130 = VAR_131 ; VAR_132 [ VAR_133 ] . VAR_134 = VAR_135 ; VAR_136 [ VAR_137 ] . VAR_138 = VAR_139 ; } -- VAR_140 ; } TYPE_28 VAR_141 = * ( VAR_142 ++ ) & 0xff ; while ( VAR_143 ) { switch ( VAR_144 ) { case 0x0 : VAR_145 = VAR_146 ; break ; case 0x1 : { TYPE_29 VAR_147 ; VAR_148 = METHOD_19 ( VAR_149 , VAR_150 - VAR_151 , & VAR_152 ) ; VAR_153 += VAR_154 ; } break ; case 0x2 : { TYPE_30 VAR_155 = METHOD_20 ( & VAR_156 , VAR_157 ) ; VAR_158 += VAR_159 ; } break ; case 0x3 : { TYPE_31 VAR_160 ; TYPE_32 VAR_161 ; TYPE_33 VAR_162 ; VAR_163 = METHOD_21 ( VAR_164 , VAR_165 - VAR_166 , & VAR_167 ) ; VAR_168 = METHOD_22 ( VAR_169 , VAR_170 - VAR_171 , & VAR_172 ) ; VAR_173 -= 1 ; VAR_174 = METHOD_23 ( VAR_175 , VAR_176 - VAR_177 , & VAR_178 ) ; VAR_179 -= 1 ; if ( VAR_180 >= VAR_181 ) { METHOD_24 ( VAR_182 ) ; METHOD_25 ( VAR_183 ) ; return ; } if ( VAR_184 [ VAR_185 ] . VAR_186 ) { struct STRUCT_OR_UNION_3 * VAR_187 = METHOD_26 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( ! VAR_188 ) { VAR_189 = VAR_190 ; break ; } VAR_191 -> VAR_192 = VAR_193 [ VAR_194 ] . VAR_195 ; VAR_196 -> VAR_197 = VAR_198 [ VAR_199 ] . VAR_200 ; VAR_201 -> VAR_202 = VAR_203 [ VAR_204 ] . VAR_205 ; VAR_206 -> VAR_207 = VAR_208 [ VAR_209 ] . VAR_210 ; VAR_211 -> VAR_212 = VAR_213 ; VAR_214 -> VAR_215 = VAR_216 ; VAR_217 -> VAR_218 = VAR_219 ; METHOD_27 ( VAR_220 , VAR_221 ) ; } VAR_222 [ VAR_223 ] . VAR_224 = METHOD_28 ( VAR_225 , VAR_226 ) ; VAR_227 [ VAR_228 ] . VAR_229 = METHOD_29 ( VAR_230 , VAR_231 ) ; VAR_232 [ VAR_233 ] . VAR_234 = VAR_235 ; VAR_236 [ VAR_237 ] . VAR_238 = VAR_239 ; VAR_240 [ VAR_241 ] . VAR_242 = VAR_243 ; } break ; case 0x4 : { TYPE_34 VAR_244 ; TYPE_35 VAR_245 ; TYPE_36 VAR_246 ; TYPE_37 VAR_247 ; VAR_248 = METHOD_30 ( VAR_249 , VAR_250 - VAR_251 , & VAR_252 ) ; VAR_253 = METHOD_31 ( VAR_254 , VAR_255 - VAR_256 , & VAR_257 ) ; VAR_258 -= 1 ; VAR_259 = METHOD_32 ( VAR_260 , VAR_261 - VAR_262 , & VAR_263 ) ; VAR_264 -= 1 ; VAR_265 = METHOD_33 ( VAR_266 , VAR_267 - VAR_268 , & VAR_269 ) ; VAR_270 -= 1 ; if ( VAR_271 >= VAR_272 ) { METHOD_34 ( VAR_273 ) ; METHOD_35 ( VAR_274 ) ; return ; } if ( VAR_275 [ VAR_276 ] . VAR_277 ) { struct STRUCT_OR_UNION_5 * VAR_278 = METHOD_36 ( sizeof ( struct STRUCT_OR_UNION_6 ) ) ; if ( ! VAR_279 ) { VAR_280 = VAR_281 ; break ; } VAR_282 -> VAR_283 = VAR_284 [ VAR_285 ] . VAR_286 ; VAR_287 -> VAR_288 = VAR_289 [ VAR_290 ] . VAR_291 ; VAR_292 -> VAR_293 = VAR_294 [ VAR_295 ] . VAR_296 ; VAR_297 -> VAR_298 = VAR_299 [ VAR_300 ] . VAR_301 ; VAR_302 -> VAR_303 = VAR_304 ; VAR_305 -> VAR_306 = VAR_307 ; VAR_308 -> VAR_309 = VAR_310 ; METHOD_37 ( VAR_311 , VAR_312 ) ; } VAR_313 [ VAR_314 ] . VAR_315 = METHOD_38 ( VAR_316 , VAR_317 ) ; VAR_318 [ VAR_319 ] . VAR_320 = METHOD_39 ( VAR_321 , VAR_322 ) ; VAR_323 [ VAR_324 ] . VAR_325 = VAR_326 ; VAR_327 [ VAR_328 ] . VAR_329 = METHOD_40 ( VAR_330 , VAR_331 ) ; VAR_332 [ VAR_333 ] . VAR_334 = VAR_335 ; } break ; case 0x5 : { TYPE_38 VAR_336 ; VAR_337 = METHOD_41 ( VAR_338 , VAR_339 - VAR_340 , & VAR_341 ) ; if ( VAR_342 [ VAR_343 ] . VAR_344 ) { struct STRUCT_OR_UNION_7 * VAR_345 = METHOD_42 ( sizeof ( struct STRUCT_OR_UNION_8 ) ) ; if ( ! VAR_346 ) { VAR_347 = VAR_348 ; break ; } VAR_349 -> VAR_350 = VAR_351 [ VAR_352 ] . VAR_353 ; VAR_354 -> VAR_355 = VAR_356 [ VAR_357 ] . VAR_358 ; VAR_359 -> VAR_360 = VAR_361 [ VAR_362 ] . VAR_363 ; VAR_364 -> VAR_365 = VAR_366 [ VAR_367 ] . VAR_368 ; VAR_369 -> VAR_370 = VAR_371 ; VAR_372 -> VAR_373 = VAR_374 ; VAR_375 -> VAR_376 = VAR_377 ; METHOD_43 ( VAR_378 , VAR_379 ) ; } VAR_380 [ VAR_381 ] . VAR_382 = VAR_383 ; } break ; case 0x6 : { TYPE_39 VAR_384 ; VAR_385 = METHOD_44 ( VAR_386 , VAR_387 - VAR_388 , & VAR_389 ) ; if ( ! VAR_390 [ VAR_391 ] . VAR_392 ) { VAR_393 [ VAR_394 ] . VAR_395 = VAR_396 ; VAR_397 [ VAR_398 ] . VAR_399 = VAR_400 ; } } break ; case 0x7 : break ; case 0x8 : break ; case 0x9 : { VAR_401 = METHOD_45 ( VAR_402 , VAR_403 - VAR_404 , & VAR_405 ) ; VAR_406 -- ; } break ; default : { TYPE_40 VAR_407 = VAR_408 - 0x0a ; VAR_409 += ( VAR_410 / 15 ) ; VAR_411 += - 4 + ( VAR_412 % 15 ) ; struct STRUCT_OR_UNION_9 * VAR_413 = METHOD_46 ( sizeof ( struct STRUCT_OR_UNION_10 ) ) ; if ( ! VAR_414 ) { VAR_415 = VAR_416 ; break ; } VAR_417 -> VAR_418 = VAR_419 ; VAR_420 -> VAR_421 = VAR_422 ; VAR_423 -> VAR_424 = VAR_425 ; METHOD_47 ( VAR_426 , VAR_427 ) ; } break ; } VAR_428 = * ( VAR_429 ++ ) & 0xff ; } if ( ! VAR_430 -> VAR_431 ) { VAR_432 -> VAR_433 = METHOD_48 ( ) ; } TYPE_41 * VAR_434 ; TYPE_42 VAR_435 [ 64 ] ; TYPE_43 * VAR_436 ; TYPE_44 * VAR_437 ; struct STRUCT_OR_UNION_11 * VAR_438 ; METHOD_49 ( VAR_439 , VAR_440 , VAR_441 ) { VAR_442 = METHOD_50 ( "%s|%" VAR_443 , METHOD_51 ( VAR_444 , VAR_445 -> VAR_446 ) , VAR_447 -> VAR_448 ) ; VAR_449 = METHOD_52 ( VAR_450 -> VAR_451 + VAR_452 , VAR_453 , 16 ) ; METHOD_53 ( VAR_454 -> VAR_455 , VAR_456 , VAR_457 , 0 ) ; METHOD_54 ( VAR_458 -> VAR_459 , VAR_460 , VAR_461 , 0 ) ; } if ( ! VAR_462 ) { METHOD_55 ( VAR_463 ) ; METHOD_56 ( VAR_464 ) ; METHOD_57 ( VAR_465 ) ; return ; } TYPE_45 * VAR_466 ; struct STRUCT_OR_UNION_12 * VAR_467 ; VAR_468 -> METHOD_58 ( "positions:\\n" ) ; METHOD_59 ( VAR_469 , VAR_470 , VAR_471 ) { VAR_472 -> METHOD_60 ( "0x%04llxline=%llu\\n" , VAR_473 -> VAR_474 , VAR_475 -> VAR_476 ) ; } VAR_477 -> METHOD_61 ( "locals:\\n" ) ; TYPE_46 * VAR_478 ; struct STRUCT_OR_UNION_13 * VAR_479 ; METHOD_62 ( VAR_480 , VAR_481 , VAR_482 ) { if ( VAR_483 -> VAR_484 ) { VAR_485 -> METHOD_63 ( "0x%04x-0x%04xreg=%d%s%s%s\\n" , VAR_486 -> VAR_487 , VAR_488 -> VAR_489 , VAR_490 -> VAR_491 , VAR_492 -> VAR_493 , VAR_494 -> VAR_495 , VAR_496 -> VAR_497 ) ; } else { VAR_498 -> METHOD_64 ( "0x%04x-0x%04xreg=%d%s%s\\n" , VAR_499 -> VAR_500 , VAR_501 -> VAR_502 , VAR_503 -> VAR_504 , VAR_505 -> VAR_506 , VAR_507 -> VAR_508 ) ; } } for ( VAR_509 = 0 ; VAR_510 < VAR_511 ; VAR_512 ++ ) { if ( VAR_513 [ VAR_514 ] . VAR_515 ) { if ( VAR_516 [ VAR_517 ] . VAR_518 ) { VAR_519 -> METHOD_65 ( "0x%04x-0x%04xreg=%d%s%s" "%s\\n" , VAR_520 [ VAR_521 ] . VAR_522 , VAR_523 , VAR_524 , VAR_525 [ VAR_526 ] . VAR_527 , VAR_528 [ VAR_529 ] . VAR_530 , VAR_531 [ VAR_532 ] . VAR_533 ) ; } else { VAR_534 -> METHOD_66 ( "0x%04x-0x%04xreg=%d%s%s" "\\n" , VAR_535 [ VAR_536 ] . VAR_537 , VAR_538 , VAR_539 , VAR_540 [ VAR_541 ] . VAR_542 , VAR_543 [ VAR_544 ] . VAR_545 ) ; } } } METHOD_67 ( VAR_546 ) ; METHOD_68 ( VAR_547 ) ; METHOD_69 ( VAR_548 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 == ( TYPE_3 ) VAR_3 -> VAR_4 ) { volatile TYPE_4 VAR_5 = METHOD_1 ( ) ; METHOD_2 ( VAR_6 , VAR_7 , METHOD_3 ( VAR_8 ) ) ; METHOD_4 ( VAR_9 , VAR_10 , METHOD_5 ( VAR_11 ) ) ; METHOD_6 ( VAR_12 , VAR_13 , METHOD_7 ( VAR_14 ) ) ; METHOD_8 ( VAR_15 , VAR_16 , METHOD_9 ( VAR_17 ) ) ;  METHOD_10 ( VAR_18 , VAR_19 , METHOD_11 ( VAR_20 ) ) ;  METHOD_12 ( VAR_21 , VAR_22 , METHOD_13 ( VAR_23 ) ) ; METHOD_14 ( VAR_24 , VAR_25 ) ; METHOD_15 ( VAR_26 , VAR_27 , VAR_28 ) ; METHOD_16 ( VAR_29 , VAR_30 , METHOD_17 ( VAR_31 ) ) ; METHOD_18 ( VAR_32 , VAR_33 , METHOD_19 ( VAR_34 ) ) ; METHOD_20 ( VAR_35 , VAR_36 , METHOD_21 ( VAR_37 ) ) ; METHOD_22 ( VAR_38 , VAR_39 , METHOD_23 ( VAR_40 ) ) ; METHOD_24 ( VAR_41 , VAR_42 , VAR_43 ) ; METHOD_25 ( VAR_44 , VAR_45 , VAR_46 ) ; METHOD_26 ( VAR_47 , VAR_48 , METHOD_27 ( VAR_49 ) ) ; METHOD_28 ( VAR_50 , VAR_51 , METHOD_29 ( VAR_52 ) ) ; METHOD_30 ( VAR_53 , VAR_54 , VAR_55 ) ; METHOD_31 ( VAR_56 , VAR_57 , VAR_58 ) ; METHOD_32 ( VAR_59 , VAR_60 , VAR_61 ) ; if ( VAR_62 . VAR_63 ) { volatile TYPE_5 VAR_64 = METHOD_33 ( VAR_65 ) ; METHOD_34 ( VAR_66 , VAR_67 , VAR_68 ) ; } VAR_69 -> VAR_70 = ( TYPE_6 * ) VAR_71 ; } return ( TYPE_7 ) VAR_72 -> VAR_73 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_1 VAR_7 ; VAR_8 = VAR_9 -> VAR_10 ; METHOD_1 ( & VAR_11 , VAR_12 ) ; METHOD_2 ( VAR_13 . VAR_14 < METHOD_3 ( VAR_15 -> VAR_16 -> VAR_17 ) / 8 ) ; METHOD_4 ( VAR_18 -> VAR_19 < VAR_20 . VAR_21 ) ; VAR_22 = & METHOD_5 ( VAR_23 ) [ VAR_24 -> VAR_25 ] ; if ( VAR_26 -> VAR_27 & VAR_28 ) { VAR_29 = METHOD_6 ( VAR_30 , VAR_31 -> VAR_32 ) ; METHOD_7 ( VAR_33 -> VAR_34 == VAR_35 -> VAR_36 ) ; METHOD_8 ( METHOD_9 ( VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , VAR_41 -> VAR_42 ) == 0 ) ; VAR_43 = METHOD_10 ( VAR_44 -> VAR_45 ) ; if ( VAR_46 -> VAR_47 & VAR_48 ) { VAR_49 -> VAR_50 = VAR_51 ; return 0 ; } if ( VAR_52 -> VAR_53 < VAR_54 ) { VAR_55 -> VAR_56 = VAR_57 ; return METHOD_11 ( VAR_58 ) ; } VAR_59 -> VAR_60 = VAR_61 ; METHOD_12 ( VAR_62 -> VAR_63 , & VAR_64 -> VAR_65 [ VAR_66 -> VAR_67 ] , VAR_68 ) ; } else { VAR_69 = METHOD_13 ( VAR_70 , VAR_71 -> VAR_72 ) ; METHOD_14 ( VAR_73 -> VAR_74 == VAR_75 -> VAR_76 ) ; METHOD_15 ( METHOD_16 ( VAR_77 -> VAR_78 , VAR_79 -> VAR_80 , VAR_81 -> VAR_82 ) == 0 ) ;  VAR_83 = METHOD_17 ( VAR_84 -> VAR_85 ) ;  VAR_86 -> VAR_87 = METHOD_18 ( VAR_88 -> VAR_89 ) ; VAR_90 -> VAR_91 = METHOD_19 ( VAR_92 -> VAR_93 -> VAR_94 ,  VAR_95 ) ;  if ( VAR_96 -> VAR_97 & VAR_98 ) {  VAR_99 -> VAR_100 = VAR_101 ;  return 0 ; }  if ( VAR_102 -> VAR_103 < VAR_104 ) {  VAR_105 -> VAR_106 = VAR_107 ; return METHOD_20 ( VAR_108 ) ; }  VAR_109 -> VAR_110 = VAR_111 ;  } return 0 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( unsigned TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ;  TYPE_1 VAR_3 = sizeof ( * VAR_4 ) + VAR_5 ;  if ( ( METHOD_1 ( VAR_6 ) >> VAR_7 ) + 2 > VAR_8 ) return VAR_9 ; if ( VAR_10 <= ( VAR_11 << VAR_12 ) ) VAR_13 = METHOD_2 ( VAR_14 , VAR_15 | VAR_16 | VAR_17 ) ; if ( ! VAR_18 ) { VAR_19 = METHOD_3 ( VAR_20 ) ; if ( ! VAR_21 ) return VAR_22 ; } METHOD_4 ( VAR_23 , 0 , sizeof ( * VAR_24 ) ) ; VAR_25 -> VAR_26 = VAR_27 ; return VAR_28 ; }
static TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { while ( ! METHOD_1 ( VAR_1 ) ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = list_entry ( VAR_2 -> VAR_3 , struct STRUCT_OR_UNION_3 , VAR_4 ) ; METHOD_2 ( & STRUCT_OR_UNION_4 -> VAR_5 ) ; METHOD_3 ( "-%u" , STRUCT_OR_UNION_5 -> VAR_6 ) ; METHOD_4 ( STRUCT_OR_UNION_6 ) ;  if ( STRUCT_OR_UNION_7 -> VAR_7 -> METHOD_5 )  STRUCT_OR_UNION_8 -> VAR_8 -> METHOD_6 ( STRUCT_OR_UNION_9 ) ; METHOD_7 ( STRUCT_OR_UNION_10 ) ; if ( METHOD_8 ( VAR_9 , & STRUCT_OR_UNION_11 -> VAR_10 ) ) { METHOD_9 ( & STRUCT_OR_UNION_12 -> VAR_11 -> VAR_12 ) ; STRUCT_OR_UNION_13 -> VAR_13 -> VAR_14 -- ; STRUCT_OR_UNION_14 -> VAR_15 -> VAR_16 -= STRUCT_OR_UNION_15 -> VAR_17 ; METHOD_10 ( & STRUCT_OR_UNION_16 -> VAR_18 -> VAR_19 ) ; } METHOD_11 ( & STRUCT_OR_UNION_17 -> VAR_20 -> VAR_21 ) ; if ( METHOD_12 ( VAR_22 , & STRUCT_OR_UNION_18 -> VAR_23 ) ) METHOD_13 ( & STRUCT_OR_UNION_19 -> VAR_24 -> VAR_25 ) ; METHOD_14 ( STRUCT_OR_UNION_20 -> VAR_26 ) ; METHOD_15 ( STRUCT_OR_UNION_21 -> VAR_27 ) ; TYPE_2 TYPE_3 STRUCT_OR_UNION_22 -> VAR_28 = VAR_29 ; METHOD_16 ( VAR_30 , STRUCT_OR_UNION_23 ) ; } }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 = 0 ; TYPE_7 TYPE_8 TYPE_9 VAR_10 [ 16384 ] , * VAR_11 ; VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 = VAR_17 ; VAR_18 . VAR_19 = 0 ; VAR_20 . VAR_21 = 0 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = 0 ; VAR_27 . VAR_28 = 64 ; VAR_29 . VAR_30 = VAR_31 . VAR_32 = ( TYPE_10 * ) METHOD_1 ( VAR_33 . VAR_34 ) ; * ( VAR_35 . VAR_36 ) = '\\0' ; METHOD_2 ( & VAR_37 ) ; if ( ! VAR_38 . VAR_39 ) METHOD_3 ( VAR_40 , ( METHOD_4 ( VAR_41 ) , METHOD_5 ( "syntaxerror" ) , METHOD_6 ( "Emptyquery." ) ) ) ;  VAR_42 = METHOD_7 ( VAR_43 . VAR_44 , VAR_45 . VAR_46 ) ;  VAR_47 = ( TYPE_11 * ) METHOD_8 ( VAR_48 ) ; METHOD_9 ( VAR_49 , VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 . VAR_54 ; VAR_55 = METHOD_10 ( VAR_56 ) ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 . VAR_60 ; VAR_61 ++ ) { VAR_62 [ VAR_63 ] . VAR_64 = VAR_65 . VAR_66 -> VAR_67 ; VAR_68 [ VAR_69 ] . VAR_70 = VAR_71 . VAR_72 -> VAR_73 ; VAR_74 [ VAR_75 ] . VAR_76 = VAR_77 . VAR_78 -> VAR_79 ; VAR_80 [ VAR_81 ] . VAR_82 = VAR_83 . VAR_84 -> VAR_85 ; VAR_86 [ VAR_87 ] . VAR_88 = VAR_89 . VAR_90 -> VAR_91 ; VAR_92 = VAR_93 . VAR_94 -> VAR_95 ; METHOD_11 ( VAR_96 . VAR_97 ) ; VAR_98 . VAR_99 = VAR_100 ; } METHOD_12 ( ( TYPE_12 * ) METHOD_13 ( VAR_101 ) , ( TYPE_13 * ) VAR_102 . VAR_103 , VAR_104 . VAR_105 ) ; METHOD_14 ( VAR_106 . VAR_107 ) ; VAR_108 = 0 ; METHOD_15 ( VAR_109 , & VAR_110 ) ; return VAR_111 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_1 ; struct STRUCT_OR_UNION_3 * VAR_2 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; struct STRUCT_OR_UNION_5 * VAR_3 ; TYPE_2 VAR_4 ; struct STRUCT_OR_UNION_6 VAR_5 ; TYPE_3 VAR_6 = 0 ;  if ( VAR_7 && ! METHOD_2 ( VAR_8 ) )  return 0 ; METHOD_3 ( & METHOD_4 ( STRUCT_OR_UNION_7 -> VAR_9 ) -> VAR_10 ) ; if ( METHOD_5 ( & VAR_11 -> VAR_12 ) ) goto VAR_13 ; VAR_14 = METHOD_6 ( STRUCT_OR_UNION_8 ) ; VAR_15 = VAR_16 -> VAR_17 . VAR_18 ; VAR_19 = METHOD_7 ( STRUCT_OR_UNION_9 -> VAR_20 ) ; METHOD_8 ( 4 , "removeinode%lufromorphanlist\\n" , STRUCT_OR_UNION_10 -> VAR_21 ) ; METHOD_9 ( & VAR_22 -> VAR_23 ) ;  if ( VAR_24 -> VAR_25 && ! VAR_26 )  goto VAR_27 ; VAR_28 = METHOD_10 ( VAR_29 , STRUCT_OR_UNION_11 , & VAR_30 ) ; if ( VAR_31 ) goto VAR_32 ; if ( VAR_33 == & VAR_34 -> VAR_35 ) { METHOD_11 ( 4 , "superblockwillpointto%u\\n" , VAR_36 ) ; METHOD_12 ( VAR_37 -> VAR_38 , "get_write_access" ) ; VAR_39 = METHOD_13 ( VAR_40 , VAR_41 -> VAR_42 ) ; if ( VAR_43 ) goto VAR_44 ; VAR_45 -> VAR_46 -> VAR_47 = METHOD_14 ( VAR_48 ) ; VAR_49 = METHOD_15 ( VAR_50 , STRUCT_OR_UNION_12 -> VAR_51 ) ; } else { struct STRUCT_OR_UNION_13 VAR_52 ; struct STRUCT_OR_UNION_14 * VAR_53 = & list_entry ( VAR_54 , struct STRUCT_OR_UNION_15 , VAR_55 ) -> VAR_56 ; METHOD_16 ( 4 , "orphaninode%luwillpointto%u\\n" , VAR_57 -> VAR_58 , VAR_59 ) ; VAR_60 = METHOD_17 ( VAR_61 , VAR_62 , & VAR_63 ) ; if ( VAR_64 ) goto VAR_65 ; METHOD_18 ( VAR_66 ) = VAR_67 ; VAR_68 = METHOD_19 ( VAR_69 , VAR_70 , & VAR_71 ) ; } if ( VAR_72 ) goto VAR_73 ; METHOD_20 ( STRUCT_OR_UNION_16 ) = 0 ; VAR_74 = METHOD_21 ( VAR_75 , STRUCT_OR_UNION_17 , & VAR_76 ) ; VAR_77 : METHOD_22 ( STRUCT_OR_UNION_18 -> VAR_78 , VAR_79 ) ; VAR_80 : METHOD_23 ( & METHOD_24 ( STRUCT_OR_UNION_19 -> VAR_81 ) -> VAR_82 ) ; return VAR_83 ; VAR_84 : METHOD_25 ( VAR_85 . VAR_86 ) ; goto VAR_87 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  const TYPE_6 VAR_5 = 0.0000001 ;  if ( METHOD_1 ( VAR_6 ) ) METHOD_2 ( VAR_7 , "NaN" , VAR_8 ) ;  else if ( ! METHOD_3 ( VAR_9 ) ) {  if ( VAR_10 < 0 ) METHOD_4 ( VAR_11 , "-Infinity" , VAR_12 ) ;   else METHOD_5 ( VAR_13 , "Infinity" , VAR_14 ) ;  } else { if ( VAR_15 < 0 ) { if ( -- VAR_16 <= 0 ) { * VAR_17 = 0 ; return ; } * ( VAR_18 ++ ) = '-' ; VAR_19 = - VAR_20 ; } if ( ( ( TYPE_7 ) ( VAR_21 + VAR_22 ) ) == ( 1 + ( TYPE_8 ) VAR_23 ) ) VAR_24 = ( TYPE_9 ) ( 1 + ( TYPE_10 ) VAR_25 ) ; TYPE_11 VAR_26 = 1 ; while ( VAR_27 * VAR_28 <= VAR_29 ) VAR_30 *= VAR_31 ; while ( VAR_32 >= 1 ) { TYPE_12 VAR_33 = ( TYPE_13 ) ( VAR_34 / VAR_35 ) ; VAR_36 -= VAR_37 * VAR_38 ; if ( -- VAR_39 <= 0 ) { * VAR_40 = 0 ; return ; } * ( VAR_41 ++ ) = METHOD_6 ( VAR_42 ) ; VAR_43 /= VAR_44 ; } TYPE_14 TYPE_15 if ( ( ( VAR_45 < 0 ) && VAR_46 > 0 ) || VAR_47 > 0 ) { TYPE_16 VAR_48 = VAR_49 ; VAR_50 *= VAR_51 ; while ( ( ( VAR_52 < 0 ) && ( VAR_53 > - 12 ) && ( VAR_54 > VAR_55 ) ) || ( VAR_56 > 0 ) ) { TYPE_17 VAR_57 = ( TYPE_18 ) ( VAR_58 + ( ( VAR_59 == 1 ) ? 0.4 : 0.00000001 ) ) ; VAR_60 = ( VAR_61 - VAR_62 ) * VAR_63 ; if ( VAR_64 == VAR_65 ) VAR_66 = VAR_67 - 1 ; if ( ! VAR_68 ) { VAR_69 = VAR_70 ; if ( -- VAR_71 <= 0 ) { * VAR_72 = 0 ; return ; } * ( VAR_73 ++ ) = '.' ; } if ( -- VAR_74 <= 0 ) { * VAR_75 = 0 ; return ; } * ( VAR_76 ++ ) = METHOD_7 ( VAR_77 ) ; VAR_78 -- ; } } * ( VAR_79 ++ ) = 0 ; } }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 , VAR_5 , VAR_6 ; TYPE_5 VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 ; TYPE_7 VAR_11 ; TYPE_8 * VAR_12 = VAR_13 ; TYPE_9 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; TYPE_10 VAR_18 , VAR_19 , VAR_20 ; TYPE_11 VAR_21 [ 32 ] ; TYPE_12 VAR_22 [ 32 ] ; TYPE_13 VAR_23 ; TYPE_14 * VAR_24 = VAR_25 ; VAR_26 = 1 ; VAR_27 = VAR_28 ; METHOD_1 ( & VAR_29 , 0 , sizeof ( TYPE_15 ) ) ; VAR_30 = 0 ; VAR_31 = METHOD_2 ( VAR_32 , "rb" ) ; if ( ! VAR_33 ) { METHOD_3 ( VAR_34 , "Failedtoopen%sforreading!\\n" , VAR_35 ) ; return VAR_36 ; } METHOD_4 ( VAR_37 , 0 , VAR_38 ) ;  if ( METHOD_5 ( VAR_39 , "PG%[\\t]%c%c%[\\t+-]%d%[\\t]%d%[\\t]%d" , VAR_40 , & VAR_41 ,  & VAR_42 , VAR_43 , & VAR_44 , VAR_45 , & VAR_46 , VAR_47 , & VAR_48 ) != 9 ) { METHOD_6 ( VAR_49 ) ; METHOD_7 ( VAR_50 , "ERROR:Failedtoreadtherightnumberofelementfromthefscanf()function!\\n" ) ; return VAR_51 ; } VAR_52 = 0 ; VAR_53 = '+' ; while ( VAR_54 [ VAR_55 ] != '\\0' ) { if ( VAR_56 [ VAR_57 ] == '-' ) { VAR_58 = '-' ; } VAR_59 ++ ; } METHOD_8 ( VAR_60 ) ; if ( VAR_61 == 'M' && VAR_62 == 'L' ) { VAR_63 = 1 ; } else if ( VAR_64 == 'M' && VAR_65 == 'L' ) { VAR_66 = 0 ; } else { METHOD_9 ( VAR_67 ) ; METHOD_10 ( VAR_68 , "Badpgxheader,pleasecheckinputfile\\n" ) ; return VAR_69 ; } VAR_70 . VAR_71 = ( TYPE_16 ) VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = ( TYPE_17 ) VAR_76 -> VAR_77 ; VAR_78 . VAR_79 = ! VAR_80 . VAR_81 ? ( TYPE_18 ) ( ( VAR_82 - 1 ) * VAR_83 -> VAR_84 + 1 ) : VAR_85 . VAR_86 + ( TYPE_19 ) ( VAR_87 - 1 ) * ( TYPE_20 ) VAR_88 -> VAR_89 + 1 ; VAR_90 . VAR_91 = ! VAR_92 . VAR_93 ? ( TYPE_21 ) ( ( VAR_94 - 1 ) * VAR_95 -> VAR_96 + 1 ) : VAR_97 . VAR_98 + ( TYPE_22 ) ( VAR_99 - 1 ) * ( TYPE_23 ) VAR_100 -> VAR_101 + 1 ; if ( VAR_102 == '-' ) { VAR_103 . VAR_104 = 1 ; } else { VAR_105 . VAR_106 = 0 ; } if ( VAR_107 < 8 ) { VAR_108 = 1 ; VAR_109 = 8 - VAR_110 ; VAR_111 = VAR_112 - VAR_113 ; if ( VAR_114 . VAR_115 ) { VAR_116 = ( 1 << ( VAR_117 - 1 ) ) ; } else { VAR_118 = 0 ; } VAR_119 . VAR_120 = 0 ; VAR_121 = 8 ; } else { VAR_122 = VAR_123 = VAR_124 = VAR_125 = 0 ; } VAR_126 . VAR_127 = ( TYPE_24 ) VAR_128 ; VAR_129 . VAR_130 = ( TYPE_25 ) VAR_131 ; VAR_132 . VAR_133 = ( TYPE_26 ) VAR_134 -> VAR_135 ; VAR_136 . VAR_137 = ( TYPE_27 ) VAR_138 -> VAR_139 ; VAR_140 = METHOD_11 ( ( TYPE_28 ) VAR_141 , & VAR_142 , VAR_143 ) ; if ( ! VAR_144 ) { METHOD_12 ( VAR_145 ) ; return VAR_146 ; } VAR_147 -> VAR_148 = VAR_149 . VAR_150 ; VAR_151 -> VAR_152 = VAR_153 . VAR_154 ; VAR_155 -> VAR_156 = VAR_157 . VAR_158 ; VAR_159 -> VAR_160 = VAR_161 . VAR_162 ; VAR_163 = & VAR_164 -> VAR_165 [ 0 ] ; for ( VAR_166 = 0 ; VAR_167 < VAR_168 * VAR_169 ; VAR_170 ++ ) { TYPE_29 VAR_171 ; if ( VAR_172 ) { VAR_173 = METHOD_13 ( VAR_174 ) + VAR_175 ; VAR_176 = ( VAR_177 << VAR_178 ) + ( VAR_179 >> VAR_180 ) ; VAR_181 -> VAR_182 [ VAR_183 ] = ( unsigned TYPE_30 ) VAR_184 ; if ( VAR_185 > VAR_186 ) { VAR_187 = VAR_188 ; } continue ; } if ( VAR_189 -> VAR_190 == 8 ) { if ( ! VAR_191 -> VAR_192 ) { VAR_193 = METHOD_14 ( VAR_194 ) ; } else { VAR_195 = ( TYPE_31 ) METHOD_15 ( VAR_196 ) ; } } else if ( VAR_197 -> VAR_198 <= 16 ) { if ( ! VAR_199 -> VAR_200 ) { VAR_201 = METHOD_16 ( VAR_202 , VAR_203 ) ; } else { VAR_204 = ( TYPE_32 ) METHOD_17 ( VAR_205 , VAR_206 ) ; } } else { if ( ! VAR_207 -> VAR_208 ) { VAR_209 = ( TYPE_33 ) METHOD_18 ( VAR_210 , VAR_211 ) ; } else { VAR_212 = ( TYPE_34 ) METHOD_19 ( VAR_213 , VAR_214 ) ; } } if ( VAR_215 > VAR_216 ) { VAR_217 = VAR_218 ; } VAR_219 -> VAR_220 [ VAR_221 ] = VAR_222 ; } METHOD_20 ( VAR_223 ) ; VAR_224 -> VAR_225 = ( TYPE_35 ) METHOD_21 ( VAR_226 ) + 1 ; return VAR_227 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * ( * METHOD_1 ) ( TYPE_2 * , TYPE_3 * , const TYPE_4 * , ... ) ) { TYPE_5 VAR_0 [ 8 ] ; TYPE_6 VAR_1 ; for ( VAR_2 = 0 ; VAR_3 <= 8 ; VAR_4 ++ ) { TYPE_7 VAR_5 = VAR_6 ; TYPE_8 * VAR_7 = METHOD_2 ( VAR_8 , & VAR_9 , "%d" , 12345 ) ; METHOD_3 ( VAR_10 != VAR_11 ) ; METHOD_4 ( METHOD_5 ( VAR_12 , "12345" ) == 0 ) ; METHOD_6 ( VAR_13 == 5 ) ; METHOD_7 ( VAR_14 ) ; } for ( VAR_15 = 0 ; VAR_16 <= 8 ; VAR_17 ++ ) { TYPE_9 VAR_18 ; TYPE_10 * VAR_19 ; METHOD_8 ( VAR_20 , "DEADBEEF" , 8 ) ; VAR_21 = VAR_22 ; VAR_23 = METHOD_9 ( VAR_24 , & VAR_25 , "%d" , 12345 ) ; METHOD_10 ( VAR_26 != VAR_27 ) ; METHOD_11 ( METHOD_12 ( VAR_28 , "12345" ) == 0 ) ; METHOD_13 ( VAR_29 == 5 ) ;  if ( VAR_30 < 6 )  METHOD_14 ( VAR_31 != VAR_32 ) ; METHOD_15 ( METHOD_16 ( VAR_33 + VAR_34 , & "DEADBEEF" [ VAR_35 ] , 8 - VAR_36 ) == 0 ) ; if ( VAR_37 != VAR_38 ) METHOD_17 ( VAR_39 ) ; }  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( & VAR_3 ) ; struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_2 ( ) ; unsigned TYPE_3 VAR_5 = VAR_6 ; TYPE_4 VAR_7 = METHOD_3 ( ) ; TYPE_5 VAR_8 , VAR_9 ; TYPE_6 VAR_10 ; unsigned TYPE_7 VAR_11 ; TYPE_8 VAR_12 = 0 ; if ( VAR_13 == 0 ) VAR_14 = METHOD_4 ( STRUCT_OR_UNION_4 , VAR_15 ) ; VAR_16 = ( sizeof ( VAR_17 ) > 4 ) ? VAR_18 >> 32 : 0 ; VAR_19 = ( sizeof ( VAR_20 ) > 4 ) ? VAR_21 >> 32 : 0 ; STRUCT_OR_UNION_5 -> VAR_22 [ 0 ] ^= VAR_23 ^ VAR_24 ^ VAR_25 ; STRUCT_OR_UNION_6 -> VAR_26 [ 1 ] ^= VAR_27 ^ VAR_28 ; VAR_29 = VAR_30 ? METHOD_5 ( VAR_31 ) : VAR_32 ; STRUCT_OR_UNION_7 -> VAR_33 [ 2 ] ^= VAR_34 ; STRUCT_OR_UNION_8 -> VAR_35 [ 3 ] ^= ( sizeof ( VAR_36 ) > 4 ) ? VAR_37 >> 32 : METHOD_6 ( STRUCT_OR_UNION_9 , VAR_38 ) ; METHOD_7 ( STRUCT_OR_UNION_10 ) ; METHOD_8 ( VAR_39 ) ;  if ( METHOD_9 ( VAR_40 == 0 ) ) {  if ( ( STRUCT_OR_UNION_11 -> VAR_41 >= 64 ) && METHOD_10 ( ( TYPE_9 * ) STRUCT_OR_UNION_12 -> VAR_42 , sizeof ( STRUCT_OR_UNION_13 -> VAR_43 ) ) ) { STRUCT_OR_UNION_14 -> VAR_44 = 0 ; STRUCT_OR_UNION_15 -> VAR_45 = VAR_46 ; } return ; } if ( ( STRUCT_OR_UNION_16 -> VAR_47 < 64 ) && ! METHOD_11 ( VAR_48 , STRUCT_OR_UNION_17 -> VAR_49 + VAR_50 ) ) return ; VAR_51 = & VAR_52 ; if ( ! METHOD_12 ( & VAR_53 -> VAR_54 ) ) return ; STRUCT_OR_UNION_18 -> VAR_55 = VAR_56 ; METHOD_13 ( VAR_57 , & STRUCT_OR_UNION_19 -> VAR_58 , sizeof ( STRUCT_OR_UNION_20 -> VAR_59 ) ) ; if ( METHOD_14 ( & VAR_60 ) ) { METHOD_15 ( VAR_61 , & VAR_62 , sizeof ( VAR_63 ) ) ; VAR_64 = 1 ; } METHOD_16 ( & VAR_65 -> VAR_66 ) ; STRUCT_OR_UNION_21 -> VAR_67 = 0 ; METHOD_17 ( VAR_68 , VAR_69 + 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 -> VAR_3 == VAR_4 ) {  METHOD_1 ( VAR_5 , "ID:" , VAR_6 ) ;   METHOD_2 ( VAR_7 , METHOD_3 ( ) , VAR_8 ) ;  } else if ( VAR_9 -> VAR_10 == VAR_11 ) {  METHOD_4 ( VAR_12 , "String:\'" , VAR_13 ) ;   METHOD_5 ( VAR_14 , METHOD_6 ( ) , VAR_15 ) ;  METHOD_7 ( VAR_16 , "\'" , VAR_17 ) ; } else METHOD_8 ( VAR_18 -> VAR_19 , VAR_20 , VAR_21 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { TYPE_3 VAR_1 = - 1 ; TYPE_4 VAR_2 ; struct STRUCT_OR_UNION_0 VAR_3 ; static TYPE_5 * VAR_4 [ ] = { ".z" , "-z" , "_z" , ".Z" , ".gz" , "-gz" , ".zz" , "-zz" , ".zip" , ".ZIP" , ".tgz" , VAR_5 } ; if ( VAR_6 == VAR_7 ) { METHOD_1 ( VAR_8 . VAR_9 , "<stdin>" ) ; VAR_10 . VAR_11 = 0 ; VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 = VAR_17 . VAR_18 & 2 ? ( METHOD_2 ( VAR_19 . VAR_20 , & VAR_21 ) ? METHOD_3 ( VAR_22 ) : VAR_23 . VAR_24 ) : 0 ; VAR_25 = 0 ; } else { if ( VAR_26 != VAR_27 . VAR_28 ) { METHOD_4 ( VAR_29 . VAR_30 , VAR_31 , sizeof ( VAR_32 . VAR_33 ) ) ; if ( VAR_34 . VAR_35 [ sizeof ( VAR_36 . VAR_37 ) - 1 ] ) METHOD_5 ( "nametoolong:" , VAR_38 ) ; } VAR_39 = METHOD_6 ( VAR_40 . VAR_41 ) ; if ( METHOD_7 ( VAR_42 . VAR_43 , & VAR_44 ) ) { if ( VAR_45 == VAR_46 && ( VAR_47 . VAR_48 || VAR_49 . VAR_50 ) ) { TYPE_6 * * VAR_51 = VAR_52 ; do { if ( * VAR_53 == VAR_54 || VAR_55 + METHOD_8 ( * VAR_56 ) >= sizeof ( VAR_57 . VAR_58 ) ) break ; METHOD_9 ( VAR_59 . VAR_60 + VAR_61 , * VAR_62 ++ ) ; VAR_63 = 0 ; } while ( METHOD_10 ( VAR_64 . VAR_65 , & VAR_66 ) && VAR_67 == VAR_68 ) ; } TYPE_7 TYPE_8 if ( VAR_69 == TYPE_9 || VAR_70 == VAR_71 ) METHOD_11 ( VAR_72 . VAR_73 , "toolarge--notcompiledwithlargefilesupport" ) ; if ( VAR_74 ) { VAR_75 . VAR_76 [ VAR_77 ] = 0 ; METHOD_12 ( "%sdoesnotexist--skipping" , VAR_78 . VAR_79 ) ; return ; } VAR_80 = METHOD_13 ( VAR_81 . VAR_82 ) ; } if ( ( VAR_83 . VAR_84 & VAR_85 ) != VAR_86 && ( VAR_87 . VAR_88 & VAR_89 ) != VAR_90 && ( VAR_91 . VAR_92 & VAR_93 ) != VAR_94 ) { METHOD_14 ( "%sisaspecialfileordevice--skipping" , VAR_95 . VAR_96 ) ; return ; } if ( ( VAR_97 . VAR_98 & VAR_99 ) == VAR_100 && ! VAR_101 . VAR_102 && ! VAR_103 . VAR_104 ) { METHOD_15 ( "%sisasymboliclink--skipping" , VAR_105 . VAR_106 ) ; return ; } if ( ( VAR_107 . VAR_108 & VAR_109 ) == VAR_110 && ! VAR_111 . VAR_112 ) { METHOD_16 ( "%sisadirectory--skipping" , VAR_113 . VAR_114 ) ; return ; } if ( ( VAR_115 . VAR_116 & VAR_117 ) == VAR_118 ) { TYPE_10 * VAR_119 , * VAR_120 , * VAR_121 , * VAR_122 , * VAR_123 ; TYPE_11 VAR_124 , VAR_125 ; VAR_126 * VAR_127 ; struct STRUCT_OR_UNION_1 * VAR_128 ; VAR_129 = METHOD_17 ( VAR_130 . VAR_131 ) ; if ( VAR_132 == VAR_133 ) return ; VAR_134 = 512 ; VAR_135 = METHOD_18 ( VAR_136 ) ; if ( VAR_137 == VAR_138 ) METHOD_19 ( "notenoughmemory" , "" ) ; * VAR_139 = 0 ; VAR_140 = VAR_141 ; while ( ( VAR_142 = METHOD_20 ( VAR_143 ) ) != VAR_144 ) { if ( VAR_145 -> VAR_146 [ 0 ] == 0 || ( VAR_147 -> VAR_148 [ 0 ] == '.' && ( VAR_149 -> VAR_150 [ 1 ] == 0 || ( VAR_151 -> VAR_152 [ 1 ] == '.' && VAR_153 -> VAR_154 [ 2 ] == 0 ) ) ) ) continue ; VAR_155 = METHOD_21 ( VAR_156 -> VAR_157 ) + 1 ; if ( VAR_158 + VAR_159 + 1 > VAR_160 + VAR_161 ) { do { VAR_162 <<= 1 ; } while ( VAR_163 + VAR_164 + 1 > VAR_165 + VAR_166 ) ; VAR_167 = METHOD_22 ( VAR_168 , VAR_169 ) ; if ( VAR_170 == VAR_171 ) { METHOD_23 ( VAR_172 ) ; METHOD_24 ( "notenoughmemory" , "" ) ; } VAR_173 = VAR_174 + ( VAR_175 - VAR_176 ) ; VAR_177 = VAR_178 ; } METHOD_25 ( VAR_179 , VAR_180 -> VAR_181 ) ; VAR_182 += VAR_183 ; * VAR_184 = 0 ; } METHOD_26 ( VAR_185 ) ; VAR_186 = VAR_187 = VAR_188 . VAR_189 + METHOD_27 ( VAR_190 . VAR_191 ) ; if ( VAR_192 > VAR_193 . VAR_194 && VAR_195 [ - 1 ] != ( unsigned TYPE_12 ) '/' ) { if ( ( TYPE_13 ) ( VAR_196 - VAR_197 . VAR_198 ) >= sizeof ( VAR_199 . VAR_200 ) ) METHOD_28 ( "pathtoolong" , VAR_201 . VAR_202 ) ; * VAR_203 ++ = '/' ; } VAR_204 = VAR_205 ; while ( * VAR_206 ) { METHOD_29 ( VAR_207 , VAR_208 , sizeof ( VAR_209 . VAR_210 ) - ( VAR_211 - VAR_212 . VAR_213 ) ) ; if ( VAR_214 . VAR_215 [ sizeof ( VAR_216 . VAR_217 ) - 1 ] ) { METHOD_30 ( VAR_218 . VAR_219 + ( sizeof ( VAR_220 . VAR_221 ) - 4 ) , "..." ) ; METHOD_31 ( "pathtoolong:" , VAR_222 . VAR_223 ) ; } METHOD_32 ( VAR_224 . VAR_225 ) ; VAR_226 += METHOD_33 ( VAR_227 ) + 1 ; } * VAR_228 = 0 ; METHOD_34 ( VAR_229 ) ; return ; } if ( ! ( VAR_230 . VAR_231 || VAR_232 . VAR_233 || VAR_234 . VAR_235 ) && VAR_236 >= METHOD_35 ( VAR_237 . VAR_238 ) && METHOD_36 ( VAR_239 . VAR_240 + VAR_241 - METHOD_37 ( VAR_242 . VAR_243 ) , VAR_244 . VAR_245 ) == 0 ) { METHOD_38 ( "%sendswith%s--skipping" , VAR_246 . VAR_247 , VAR_248 . VAR_249 ) ; return ; } if ( VAR_250 . VAR_251 == 1 && ! VAR_252 . VAR_253 && ! VAR_254 . VAR_255 ) { TYPE_14 VAR_256 = METHOD_39 ( VAR_257 . VAR_258 ) ; if ( VAR_259 == 0 ) { METHOD_40 ( "%sdoesnothavecompressedsuffix--skipping" , VAR_260 . VAR_261 ) ; return ; } VAR_262 -= VAR_263 ; } VAR_264 . VAR_265 = METHOD_41 ( VAR_266 . VAR_267 , VAR_268 , 0 ) ; if ( VAR_269 . VAR_270 < 0 ) METHOD_42 ( "readerroron" , VAR_271 . VAR_272 ) ; VAR_273 . VAR_274 = VAR_275 . VAR_276 & 1 ? METHOD_43 ( VAR_277 . VAR_278 ) : VAR_279 ; VAR_280 . VAR_281 = VAR_282 . VAR_283 & 2 ? VAR_284 . VAR_285 : 0 ; } METHOD_44 ( VAR_286 . VAR_287 ) ; VAR_288 . VAR_289 = VAR_290 ; if ( VAR_291 . VAR_292 ) { METHOD_45 ( ) ; VAR_293 = METHOD_46 ( 1 ) ; if ( VAR_294 != 8 && VAR_295 != 257 && ! ( VAR_296 == - 2 && VAR_297 . VAR_298 && VAR_299 . VAR_300 && VAR_301 . VAR_302 != 2 && ! VAR_303 . VAR_304 ) ) { METHOD_47 ( VAR_305 . VAR_306 ) ; if ( VAR_307 . VAR_308 != 0 ) METHOD_48 ( VAR_309 . VAR_310 ) ; if ( VAR_311 != - 1 ) METHOD_49 ( VAR_312 < 0 ? "%sisnotcompressed--skipping" : "%shasunknowncompressionmethod--skipping" , VAR_313 . VAR_314 ) ; return ; } if ( VAR_315 . VAR_316 == 2 ) { if ( VAR_317 == 8 ) METHOD_50 ( ) ; else { METHOD_51 ( ) ; if ( VAR_318 . VAR_319 ) { VAR_320 . VAR_321 -= 3 ; METHOD_52 ( VAR_322 , 0 , VAR_323 . VAR_324 , 0 ) ; } } METHOD_53 ( VAR_325 . VAR_326 ) ; if ( VAR_327 . VAR_328 != 0 ) METHOD_54 ( VAR_329 . VAR_330 ) ; return ; } } if ( VAR_331 . VAR_332 ) { METHOD_55 ( ) ; METHOD_56 ( VAR_333 . VAR_334 ) ; if ( VAR_335 . VAR_336 != 0 ) METHOD_57 ( VAR_337 . VAR_338 ) ; return ; } if ( VAR_339 == VAR_340 || VAR_341 . VAR_342 ) { VAR_343 . VAR_344 = METHOD_58 ( METHOD_59 ( "<stdout>" ) + 1 ) ; if ( VAR_345 . VAR_346 == VAR_347 ) METHOD_60 ( "notenoughmemory" , "" ) ; METHOD_61 ( VAR_348 . VAR_349 , "<stdout>" ) ; VAR_350 . VAR_351 = 1 ; if ( ! VAR_352 . VAR_353 && ! VAR_354 . VAR_355 && METHOD_62 ( VAR_356 . VAR_357 ) ) METHOD_63 ( "tryingtowritecompresseddatatoaterminal" , "(use-ftoforce)" ) ; } else {  TYPE_15 * VAR_358 , * VAR_359 ;  VAR_360 = VAR_361 . VAR_362 ;  if ( VAR_363 . VAR_364 && ( VAR_365 . VAR_366 & 1 ) != 0 && VAR_367 . VAR_368 != VAR_369 ) {   VAR_370 = VAR_371 . VAR_372 ;   VAR_373 = METHOD_64 ( VAR_374 . VAR_375 ) ;  }  VAR_376 = VAR_377 . VAR_378 && METHOD_65 ( VAR_379 + VAR_380 , ".tgz" ) ? "" : ".tar" ;   VAR_381 . VAR_382 = METHOD_66 ( VAR_383 + ( VAR_384 . VAR_385 ? METHOD_67 ( VAR_386 ) : METHOD_68 ( VAR_387 . VAR_388 ) ) + 1 ) ;  if ( VAR_389 . VAR_390 == VAR_391 ) METHOD_69 ( "notenoughmemory" , "" ) ;  METHOD_70 ( VAR_392 . VAR_393 , VAR_394 , VAR_395 ) ;   METHOD_71 ( VAR_396 . VAR_397 + VAR_398 , VAR_399 . VAR_400 ? VAR_401 : VAR_402 . VAR_403 ) ;  VAR_404 . VAR_405 = METHOD_72 ( VAR_406 . VAR_407 , VAR_408 | VAR_409 | VAR_410 | ( VAR_411 . VAR_412 ? 0 : VAR_413 ) , 0600 ) ; if ( VAR_414 . VAR_415 < 0 && VAR_416 == VAR_417 && METHOD_73 ( 0 ) && VAR_418 . VAR_419 ) { TYPE_16 VAR_420 , VAR_421 ; METHOD_74 ( VAR_422 , "%sexists--overwrite(y/n)?" , VAR_423 . VAR_424 ) ; METHOD_75 ( VAR_425 ) ; VAR_426 = - 1 ; do { VAR_427 = METHOD_76 ( ) ; if ( VAR_428 < 0 && VAR_429 != '' && VAR_430 != '\\t' ) VAR_431 = VAR_432 == 'y' || VAR_433 == 'Y' ? 1 : 0 ; } while ( VAR_434 != VAR_435 && VAR_436 != '\\n' && VAR_437 != '\\r' ) ; if ( VAR_438 == 1 ) VAR_439 . VAR_440 = METHOD_77 ( VAR_441 . VAR_442 , VAR_443 | VAR_444 | VAR_445 , 0600 ) ; } if ( VAR_446 . VAR_447 < 0 && VAR_448 == VAR_449 ) { METHOD_78 ( "%sexists--skipping" , VAR_450 . VAR_451 ) ; METHOD_79 ( VAR_452 . VAR_453 ) ; METHOD_80 ( VAR_454 . VAR_455 ) ; if ( VAR_456 . VAR_457 != 0 ) METHOD_81 ( VAR_458 . VAR_459 ) ; return ; } if ( VAR_460 . VAR_461 < 0 ) METHOD_82 ( "writeerroron" , VAR_462 . VAR_463 ) ; } METHOD_83 ( VAR_464 . VAR_465 ) ; METHOD_84 ( VAR_466 . VAR_467 ) ; if ( VAR_468 . VAR_469 > 1 ) METHOD_85 ( VAR_470 , "%sto%s" , VAR_471 . VAR_472 , VAR_473 . VAR_474 ) ; if ( VAR_475 . VAR_476 ) { if ( VAR_477 == 8 ) METHOD_86 ( ) ; else if ( VAR_478 == 257 ) METHOD_87 ( ) ; else METHOD_88 ( ) ; } TYPE_17 TYPE_18 else if ( VAR_479 . VAR_480 > 1 ) METHOD_89 ( ) ; else METHOD_90 ( 0 ) ; if ( VAR_481 . VAR_482 > 1 ) { METHOD_91 ( '\\n' , VAR_483 ) ; METHOD_92 ( VAR_484 ) ; } if ( VAR_485 . VAR_486 != 0 ) METHOD_93 ( VAR_487 . VAR_488 ) ; if ( VAR_489 . VAR_490 != 1 ) { if ( METHOD_94 ( VAR_491 . VAR_492 ) ) METHOD_95 ( "writeerroron" , VAR_493 . VAR_494 ) ; VAR_495 . VAR_496 = - 1 ; if ( VAR_497 . VAR_498 != 0 ) { METHOD_96 ( VAR_499 . VAR_500 , VAR_501 . VAR_502 ) ; if ( ! VAR_503 . VAR_504 ) METHOD_97 ( VAR_505 . VAR_506 ) ; } if ( VAR_507 . VAR_508 && ( VAR_509 . VAR_510 & 2 ) != 0 && VAR_511 . VAR_512 ) METHOD_98 ( VAR_513 . VAR_514 , VAR_515 . VAR_516 ) ; } METHOD_99 ( VAR_517 . VAR_518 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 , * VAR_4 ;  TYPE_5  VAR_5 ; register TYPE_6 VAR_6 ; if ( METHOD_1 ( & VAR_7 , & VAR_8 ) == VAR_9 ) METHOD_2 ( VAR_10 , VAR_11 , "MemoryAllocationFailed" , METHOD_3 ( VAR_12 ) ) ; VAR_13 = METHOD_4 ( VAR_14 [ VAR_15 - 1 ] , "wb" ) ; if ( VAR_16 == ( TYPE_7 * ) VAR_17 ) { METHOD_5 ( VAR_18 , VAR_19 , "UnableToOpenFile" , VAR_20 [ VAR_21 - 1 ] ) ; return ( VAR_22 ) ; }  for ( VAR_23 = 2 ; VAR_24 < ( TYPE_8 ) ( VAR_25 - 1 ) ; VAR_26 ++ ) {  if 0 fprintf ( VAR_27 , "DEBUG:ConcatenateImage:\\"%s\\"\\n" , VAR_28 [ VAR_29 ] ) ; VAR_30 = METHOD_6 ( VAR_31 [ VAR_32 ] , "rb" ) ; if ( VAR_33 == ( TYPE_9 * ) VAR_34 ) { METHOD_7 ( VAR_35 , VAR_36 , "UnableToOpenFile" , VAR_37 [ VAR_38 ] ) ; continue ; } for ( VAR_39 = METHOD_8 ( VAR_40 ) ; VAR_41 != VAR_42 ; VAR_43 = METHOD_9 ( VAR_44 ) )  ( TYPE_10 ) METHOD_10 ( ( TYPE_11 ) VAR_45 , VAR_46 ) ;   ( TYPE_12 ) METHOD_11 ( VAR_47 ) ;  ( TYPE_13 ) METHOD_12 ( VAR_48 [ VAR_49 ] ) ; } ( TYPE_14 ) METHOD_13 ( VAR_50 ) ;  return ( VAR_51 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) {  TYPE_3 * const VAR_2 = METHOD_1 ( VAR_3 ) ;  if ( VAR_4 == VAR_5 || VAR_6 == VAR_7 || VAR_8 == VAR_9 ) { return VAR_10 ; } METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 , sizeof ( VAR_14 -> VAR_15 ) ) ; VAR_16 -> VAR_17 [ sizeof ( VAR_18 -> VAR_19 ) - 1 ] = '\\0' ; return VAR_20 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 [ VAR_4 ] ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 | VAR_8 | VAR_9 , VAR_10 ) ; if ( METHOD_2 ( VAR_11 ) ) goto VAR_12 ; return VAR_13 ; VAR_14 :  METHOD_3 ( VAR_15 , "error:failedtoopenjournaldevice%s:%ld" ,  METHOD_4 ( VAR_16 , VAR_17 ) , METHOD_5 ( VAR_18 ) ) ; return VAR_19 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  { TYPE_1 * VAR_1 = VAR_2 , * VAR_3 = VAR_4 ; TYPE_2 VAR_5 ; TYPE_3 VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 = 256 ; TYPE_6 VAR_9 , VAR_10 ; TYPE_7 * VAR_11 = VAR_12 ; TYPE_8 * VAR_13 = VAR_14 ;  TYPE_9 * VAR_15 = "/etc" ;  METHOD_1 ( ) ;  if ( ( VAR_16 = METHOD_2 ( & VAR_17 , VAR_18 ) ) == VAR_19 )  return - 1 ; if ( METHOD_3 ( METHOD_4 ( VAR_20 ) , ( TYPE_10 ) 0 , ( TYPE_11 ) 0 ) < 0 ) goto VAR_21 ; if ( METHOD_5 ( ) < 0 ) goto VAR_22 ; VAR_23 = METHOD_6 ( VAR_24 , "r" ) ; if ( ! VAR_25 ) goto VAR_26 ; VAR_27 = METHOD_7 ( VAR_28 -> VAR_29 ) ; VAR_30 = METHOD_8 ( VAR_31 ) ; if ( ! VAR_32 ) goto VAR_33 ; VAR_34 = VAR_35 ; while ( METHOD_9 ( VAR_36 , VAR_37 , VAR_38 ) != VAR_39 ) { VAR_40 = METHOD_10 ( VAR_41 ) ; while ( VAR_42 [ VAR_43 - 1 ] != '\\n' && ! METHOD_11 ( VAR_44 ) ) { TYPE_12 * VAR_45 ; VAR_46 *= 2 ; VAR_47 = METHOD_12 ( VAR_48 , VAR_49 ) ; if ( VAR_50 == VAR_51 ) goto VAR_52 ; VAR_53 = VAR_54 ; if ( METHOD_13 ( & VAR_55 [ VAR_56 ] , VAR_57 / 2 , VAR_58 ) == VAR_59 ) break ; VAR_60 = METHOD_14 ( VAR_61 ) ; } if ( ! VAR_62 && VAR_63 [ VAR_64 ] == ':' && ! METHOD_15 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 ) ) { if ( METHOD_16 ( VAR_69 , VAR_70 ) < 0 ) goto VAR_71 ; VAR_72 = VAR_73 ; continue ; } METHOD_17 ( VAR_74 , VAR_75 ) ; } if ( METHOD_18 ( METHOD_19 ( VAR_76 ) , 0644 ) < 0 ) goto VAR_77 ; VAR_78 = METHOD_20 ( VAR_79 ) ; VAR_80 = VAR_81 ; if ( VAR_82 != 0 ) goto VAR_83 ; METHOD_21 ( VAR_84 ) ; VAR_85 = VAR_86 ; if ( ! VAR_87 ) { VAR_88 = VAR_89 ; goto VAR_90 ; } METHOD_22 ( VAR_91 ".OLD" ) ; ignore_result ( link ( VAR_92 , VAR_93 ".OLD" ) ) ; if ( METHOD_23 ( VAR_94 , VAR_95 ) < 0 ) goto VAR_96 ; METHOD_24 ( ) ; return 0 ; VAR_97 : VAR_98 = VAR_99 ; METHOD_25 ( ) ; if ( VAR_100 != VAR_101 ) METHOD_26 ( VAR_102 ) ; if ( VAR_103 != VAR_104 ) METHOD_27 ( VAR_105 ) ; METHOD_28 ( VAR_106 ) ; if ( VAR_107 != VAR_108 ) METHOD_29 ( VAR_109 ) ; METHOD_30 ( VAR_110 ) ; VAR_111 = VAR_112 ; return - 1 ; }
static unsigned TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , TYPE_2 VAR_1 ,  unsigned TYPE_3 VAR_2 [ ] [ 2 ] , const unsigned TYPE_4 VAR_3 [ ] ) { unsigned TYPE_5 VAR_4 , VAR_5 ; if ( VAR_6 [ VAR_7 ] <= 0 ) VAR_8 = VAR_9 [ - VAR_10 [ VAR_11 ] ] ; else VAR_12 = METHOD_1 ( VAR_13 [ VAR_14 ] , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 [ VAR_19 + 1 ] <= 0 ) VAR_20 = VAR_21 [ - VAR_22 [ VAR_23 + 1 ] ] ; else VAR_24 = METHOD_2 ( VAR_25 [ VAR_26 + 1 ] , VAR_27 , VAR_28 , VAR_29 ) ; VAR_30 [ VAR_31 >> 1 ] [ 0 ] = VAR_32 ; VAR_33 [ VAR_34 >> 1 ] [ 1 ] = VAR_35 ; return VAR_36 + VAR_37 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * const VAR_0 , const TYPE_2 * const VAR_1 ) {  return METHOD_1 ( VAR_2 , VAR_3 , METHOD_2 ( VAR_4 ) + 1U ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * const VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 , VAR_3 ) ; if ( ! VAR_4 ) { return VAR_5 ; } const TYPE_3 * VAR_6 = METHOD_2 ( VAR_7 ) ; if ( ! VAR_8 ) { METHOD_3 ( "UnabletoretrievestanzanameforCarbon" ) ; return VAR_9 ; } if ( METHOD_4 ( VAR_10 , "private" ) == 0 ) { METHOD_5 ( "Carbonreceivedwithprivateelement." ) ; return VAR_11 ; } if ( ( METHOD_6 ( VAR_12 , "received" ) != 0 ) && ( METHOD_7 ( VAR_13 , "sent" ) != 0 ) ) { METHOD_8 ( "Carbonreceivedwithunrecognisedstanzaname:%s" , VAR_14 ) ; return VAR_15 ; } TYPE_4 * VAR_16 = METHOD_9 ( VAR_17 , VAR_18 ) ; if ( ! VAR_19 ) { METHOD_10 ( "Carbonreceivedwithnoforwardedelement" ) ; return VAR_20 ; } TYPE_5 * VAR_21 = METHOD_11 ( VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) { METHOD_12 ( "Carbonreceivedwithnomessageelement" ) ; return VAR_25 ; } TYPE_6 * VAR_26 = METHOD_13 ( VAR_27 ) ; if ( ! VAR_28 ) { METHOD_14 ( "Carbonreceivedwithnomessage." ) ; return VAR_29 ; }  const TYPE_7 * VAR_30 = METHOD_15 ( VAR_31 ) ;  const TYPE_8 * VAR_32 = METHOD_16 ( VAR_33 ) ; if ( ! VAR_34 ) VAR_35 = VAR_36 ; TYPE_9 * VAR_37 = METHOD_17 ( VAR_38 ) ;  TYPE_10 * VAR_39 = METHOD_18 ( VAR_40 ) ;  TYPE_11 * VAR_41 = METHOD_19 ( METHOD_20 ( ) ) ; TYPE_12 * VAR_42 = VAR_43 ; TYPE_13 * VAR_44 = METHOD_21 ( VAR_45 , VAR_46 ) ; if ( VAR_47 ) { VAR_48 = METHOD_22 ( VAR_49 ) ; } if ( METHOD_23 ( VAR_50 -> VAR_51 , VAR_52 -> VAR_53 ) == 0 ) { METHOD_24 ( VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 , VAR_59 ) ; } else { METHOD_25 ( VAR_60 -> VAR_61 , VAR_62 , VAR_63 ) ; } TYPE_14 * VAR_64 = METHOD_26 ( ) ; METHOD_27 ( VAR_65 , VAR_66 ) ; METHOD_28 ( VAR_67 , VAR_68 ) ; METHOD_29 ( VAR_69 ) ; METHOD_30 ( VAR_70 ) ; METHOD_31 ( VAR_71 ) ; return VAR_72 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ,  struct STRUCT_OR_UNION_2 * VAR_0 , const TYPE_1 * VAR_1 ) { METHOD_1 ( ! STRUCT_OR_UNION_3 ) ; if ( ! METHOD_2 ( VAR_2 ) ) return - VAR_3 ; if ( METHOD_3 ( VAR_4 , '%' ) ) return METHOD_4 ( STRUCT_OR_UNION_4 , VAR_5 , VAR_6 ) ; else if ( METHOD_5 ( STRUCT_OR_UNION_5 , VAR_7 ) ) return - VAR_8 ; else if ( VAR_9 -> VAR_10 != VAR_11 ) METHOD_6 ( VAR_12 -> VAR_13 , VAR_14 , VAR_15 ) ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 = 0 ; TYPE_5 VAR_9 ; if ( VAR_10 & VAR_11 )  return - VAR_12 ;  VAR_13 -> VAR_14 = 0 ; METHOD_1 ( "sk%psize%zu" , VAR_15 , VAR_16 ) ; METHOD_2 ( VAR_17 ) ; VAR_18 = METHOD_3 ( VAR_19 , VAR_20 & VAR_21 , VAR_22 ) ; VAR_23 = METHOD_4 ( VAR_24 , VAR_25 & VAR_26 ) ; do { struct STRUCT_OR_UNION_6 * VAR_27 ; TYPE_6 VAR_28 ; VAR_29 = METHOD_5 ( & VAR_30 -> VAR_31 ) ; if ( ! VAR_32 ) { if ( VAR_33 >= VAR_34 ) break ; VAR_35 = METHOD_6 ( VAR_36 ) ; if ( VAR_37 ) break ; if ( VAR_38 -> VAR_39 & VAR_40 ) break ; VAR_41 = - VAR_42 ; if ( ! VAR_43 ) break ; VAR_44 = METHOD_7 ( VAR_45 , VAR_46 ) ; if ( METHOD_8 ( VAR_47 ) ) { VAR_48 = METHOD_9 ( VAR_49 ) ; goto VAR_50 ; } continue ; } VAR_51 = min_t ( unsigned TYPE_7 , VAR_52 -> VAR_53 , VAR_54 ) ; if ( METHOD_10 ( VAR_55 , 0 , VAR_56 -> VAR_57 , VAR_58 ) ) { METHOD_11 ( & VAR_59 -> VAR_60 , VAR_61 ) ; if ( ! VAR_62 ) VAR_63 = - VAR_64 ; break ; } VAR_65 += VAR_66 ; VAR_67 -= VAR_68 ; METHOD_12 ( VAR_69 , VAR_70 , VAR_71 ) ; if ( ! ( VAR_72 & VAR_73 ) ) { TYPE_8 VAR_74 = METHOD_13 ( VAR_75 ) ; if ( VAR_76 <= VAR_77 ) { METHOD_14 ( VAR_78 , VAR_79 ) ; } else { struct STRUCT_OR_UNION_7 * VAR_80 ; METHOD_15 ( VAR_81 , VAR_82 ) ; VAR_83 -= VAR_84 ; METHOD_16 ( VAR_85 , VAR_86 ) { if ( VAR_87 <= VAR_88 -> VAR_89 ) { VAR_90 -> VAR_91 -= VAR_92 ; VAR_93 -> VAR_94 -= VAR_95 ; METHOD_17 ( VAR_96 , VAR_97 ) ; break ; } else if ( VAR_98 -> VAR_99 ) { VAR_100 -= VAR_101 -> VAR_102 ; VAR_103 -> VAR_104 -= VAR_105 -> VAR_106 ; VAR_107 -> VAR_108 -= VAR_109 -> VAR_110 ; METHOD_18 ( VAR_111 , VAR_112 -> VAR_113 ) ; } } } if ( VAR_114 -> VAR_115 ) { METHOD_19 ( & VAR_116 -> VAR_117 , VAR_118 ) ; break ; } METHOD_20 ( VAR_119 ) ; } else { METHOD_21 ( & VAR_120 -> VAR_121 , VAR_122 ) ; break ; } } while ( VAR_123 ) ; VAR_124 : METHOD_22 ( VAR_125 ) ; return VAR_126 ? : VAR_127 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) {  METHOD_1 ( VAR_8 ) ;  return VAR_9 ; } switch ( VAR_10 -> VAR_11 ) { case VAR_12 : VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ; if ( ! VAR_17 ) goto VAR_18 ; VAR_19 = METHOD_3 ( VAR_20 -> VAR_21 . VAR_22 . VAR_23 ) ; if ( ! VAR_24 ) goto VAR_25 ; if ( METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 ) == - 1 ) goto VAR_29 ; METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 -> VAR_33 . VAR_34 . VAR_35 ) ; if ( ! VAR_36 ) goto VAR_37 ; if ( METHOD_7 ( VAR_38 , & VAR_39 , VAR_40 ) == - 1 ) goto VAR_41 ; METHOD_8 ( VAR_42 ) ; VAR_43 = METHOD_9 ( VAR_44 -> VAR_45 . VAR_46 . VAR_47 , VAR_48 ) ; if ( ! VAR_49 ) goto VAR_50 ; if ( METHOD_10 ( VAR_51 , & VAR_52 , VAR_53 ) == - 1 ) goto VAR_54 ; METHOD_11 ( VAR_55 ) ; break ; } VAR_56 = METHOD_12 ( VAR_57 -> VAR_58 ) ; if ( ! VAR_59 ) goto VAR_60 ; if ( METHOD_13 ( VAR_61 , & VAR_62 , VAR_63 ) < 0 ) goto VAR_64 ; METHOD_14 ( VAR_65 ) ; VAR_66 = METHOD_15 ( VAR_67 -> VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; if ( METHOD_16 ( VAR_71 , & VAR_72 , VAR_73 ) < 0 ) goto VAR_74 ; METHOD_17 ( VAR_75 ) ; return VAR_76 ; VAR_77 : METHOD_18 ( VAR_78 ) ; METHOD_19 ( VAR_79 ) ; return VAR_80 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 = VAR_6 -> VAR_7 . VAR_8 ; VAR_9 = ( TYPE_7 * ) VAR_10 ; VAR_11 -> VAR_12 . VAR_13 = 0 ; if ( VAR_14 > VAR_15 ) { VAR_16 = VAR_17 ; } METHOD_1 ( VAR_18 -> VAR_19 , VAR_20 -> VAR_21 . VAR_22 , VAR_23 ) ; METHOD_2 ( & ( VAR_24 -> VAR_25 ) , VAR_26 -> VAR_27 , VAR_28 ) ; { { TYPE_8 VAR_29 ; VAR_30 = METHOD_3 ( VAR_31 ) ; if ( ( TYPE_9 ) VAR_32 != VAR_33 ) { VAR_34 -> VAR_35 . VAR_36 = VAR_37 ; VAR_38 = METHOD_4 ( & VAR_39 -> VAR_40 ) ; VAR_41 -> VAR_42 . VAR_43 = VAR_44 >> 3 ; if ( VAR_45 -> VAR_46 . VAR_47 > VAR_48 -> VAR_49 . VAR_50 ) { VAR_51 -> VAR_52 . VAR_53 = VAR_54 -> VAR_55 . VAR_56 ; } if ( VAR_57 -> VAR_58 . VAR_59 == 0 ) VAR_60 -> VAR_61 . VAR_62 = VAR_63 ; if ( VAR_64 == VAR_65 ) { VAR_66 -> VAR_67 . VAR_68 = 0 ; VAR_69 -> VAR_70 = 0 ; VAR_71 -> VAR_72 . VAR_73 = VAR_74 -> VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; } METHOD_5 ( VAR_81 , VAR_82 ) ; return ; } } VAR_83 -> VAR_84 . VAR_85 = VAR_86 -> VAR_87 ; VAR_88 -> VAR_89 . VAR_90 = VAR_91 -> VAR_92 ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 -> VAR_98 . VAR_99 = VAR_100 ; VAR_101 = METHOD_6 ( & VAR_102 -> VAR_103 ) ; VAR_104 -> VAR_105 . VAR_106 = VAR_107 >> 3 ; if ( VAR_108 -> VAR_109 . VAR_110 > VAR_111 -> VAR_112 . VAR_113 ) { VAR_114 -> VAR_115 . VAR_116 = VAR_117 -> VAR_118 . VAR_119 ; } VAR_120 -> VAR_121 . VAR_122 = 0 ;  VAR_123 -> VAR_124 = 1 ;  } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; struct STRUCT_OR_UNION_0 * VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; struct STRUCT_OR_UNION_1 * VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ;  TYPE_8 VAR_11 , VAR_12 , VAR_13 ;  VAR_14 = VAR_15 -> VAR_16 [ VAR_17 ] . VAR_18 ; VAR_19 = VAR_20 -> VAR_21 [ VAR_22 ] . VAR_23 ;  if ( ! ( VAR_24 = METHOD_1 ( VAR_25 * VAR_26 * sizeof ( struct STRUCT_OR_UNION_4 ) ) ) )  return VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; ++ VAR_31 ) { for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; ++ VAR_35 ) { if ( VAR_36 < VAR_37 && VAR_38 < VAR_39 ) { VAR_40 [ VAR_41 + VAR_42 * VAR_43 ] = VAR_44 -> VAR_45 [ VAR_46 ] . VAR_47 [ VAR_48 + VAR_49 * VAR_50 ] ; } else { VAR_51 = & VAR_52 [ VAR_53 + VAR_54 * VAR_55 ] ; VAR_56 -> VAR_57 = METHOD_2 ( VAR_58 -> VAR_59 , 0 ) ; VAR_60 -> VAR_61 = 0 ; } } } METHOD_3 ( VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 ) ; VAR_66 -> VAR_67 [ VAR_68 ] . VAR_69 = VAR_70 ; VAR_71 -> VAR_72 [ VAR_73 ] . VAR_74 = VAR_75 ; VAR_76 -> VAR_77 [ VAR_78 ] . VAR_79 = VAR_80 ; METHOD_4 ( VAR_81 -> VAR_82 , & VAR_83 , & VAR_84 ) ; VAR_85 -> VAR_86 = 0 ; VAR_87 -> VAR_88 = 0 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 ; ++ VAR_93 ) { if ( ! VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 ) { VAR_98 -> VAR_99 = METHOD_5 ( VAR_100 -> VAR_101 , VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 * VAR_106 ) ; VAR_107 -> VAR_108 = METHOD_6 ( VAR_109 -> VAR_110 , VAR_111 -> VAR_112 [ VAR_113 ] . VAR_114 * VAR_115 ) ; } } for ( VAR_116 = ( TYPE_9 ) METHOD_7 ( VAR_117 -> VAR_118 ) - 1 ; VAR_119 >= 0 ; -- VAR_120 ) { VAR_121 = METHOD_8 ( VAR_122 -> VAR_123 , VAR_124 ) ; if ( VAR_125 -> VAR_126 . VAR_127 >= VAR_128 -> VAR_129 || VAR_130 -> VAR_131 . VAR_132 >= VAR_133 -> VAR_134 ) METHOD_9 ( VAR_135 -> VAR_136 , VAR_137 ) ; else { if ( VAR_138 -> VAR_139 . VAR_140 > VAR_141 -> VAR_142 ) VAR_143 -> VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; if ( VAR_148 -> VAR_149 . VAR_150 > VAR_151 -> VAR_152 ) VAR_153 -> VAR_154 . VAR_155 = VAR_156 -> VAR_157 ; } } for ( VAR_158 = ( TYPE_10 ) METHOD_10 ( VAR_159 -> VAR_160 ) - 1 ; VAR_161 >= 0 ; -- VAR_162 ) { VAR_163 = METHOD_11 ( VAR_164 -> VAR_165 , VAR_166 ) ; if ( VAR_167 -> VAR_168 >= VAR_169 -> VAR_170 || VAR_171 -> VAR_172 >= VAR_173 -> VAR_174 ) METHOD_12 ( VAR_175 -> VAR_176 , VAR_177 ) ; } return VAR_178 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { register TYPE_4 VAR_3 ; register TYPE_5 VAR_4 ; if ( VAR_5 < 3 ) { METHOD_1 ( ( VAR_6 , "[badlength%u]" , VAR_7 ) ) ;  return ;  } if ( ( VAR_8 + 1 ) & 3 )  METHOD_2 ( ( VAR_9 , "[badlength%u]" , VAR_10 ) ) ;  VAR_11 = VAR_12 [ 2 ] - 1 ; if ( VAR_13 < 3 || ( ( VAR_14 + 1 ) & 3 ) || VAR_15 > VAR_16 + 1 ) METHOD_3 ( ( VAR_17 , "[badptr%u]" , VAR_18 [ 2 ] ) ) ; for ( VAR_19 = 3 ; VAR_20 < VAR_21 ; VAR_22 += 4 ) {  METHOD_4 ( ( VAR_23 , "%s" , METHOD_5 ( VAR_24 , & VAR_25 [ VAR_26 ] ) ) ) ;  if ( VAR_27 > VAR_28 ) METHOD_6 ( ( VAR_29 , "," ) ) ;  }  }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 )  {  return METHOD_1 ( VAR_1 -> VAR_2 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 ) { TYPE_7 VAR_6 = VAR_7 ; if ( ! VAR_8 || ( VAR_9 && ! VAR_10 ) ) VAR_11 = VAR_12 ; else if ( ! VAR_13 -> VAR_14 || ! VAR_15 -> VAR_16 ) VAR_17 = VAR_18 ; else if ( ! ( VAR_19 -> VAR_20 -> VAR_21 & VAR_22 ) ) VAR_23 = VAR_24 ; else { unsigned TYPE_8 VAR_25 = VAR_26 -> VAR_27 -> VAR_28 . VAR_29 ; METHOD_1 ( ) ; if ( VAR_30 == 1 )  VAR_31 = VAR_32 -> VAR_33 -> VAR_34 . METHOD_2 ( VAR_35 -> VAR_36 -> VAR_37 , VAR_38 , VAR_39 ,  VAR_40 , VAR_41 , VAR_42 ) ; else { TYPE_9 VAR_43 ; VAR_44 += VAR_45 - 1 ; if ( VAR_46 ) VAR_47 += VAR_48 - 1 ; for ( VAR_49 = VAR_50 - 1 ; VAR_51 >= 0 ; VAR_52 -- ) {  if ( ( VAR_53 = VAR_54 -> VAR_55 -> VAR_56 . METHOD_3 ( VAR_57 -> VAR_58 -> VAR_59 , VAR_60 , VAR_61 ,  VAR_62 , VAR_63 , VAR_64 ) ) ) break ; VAR_65 -- ; if ( VAR_66 ) VAR_67 -- ; } VAR_68 ++ ; } METHOD_4 ( ) ; } return METHOD_5 ( VAR_69 , VAR_70 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 ; const TYPE_4 * VAR_8 = "" ;  TYPE_5 VAR_9 [ VAR_10 ] ;  VAR_11 * VAR_12 ; TYPE_6 VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; TYPE_7 VAR_21 ; VAR_22 * VAR_23 , * VAR_24 ; VAR_25 * VAR_26 , * VAR_27 ; static TYPE_8 VAR_28 [ ] = "xtractprotos" ; if ( VAR_29 == 1 ) { METHOD_1 ( VAR_30 , "xtractprotos[-prestring=<string>][-protos=<where>]" "[listofCfiles]\\n" "wheretheprestringisprependedtoeachprototype,and\\n" "protoscanbeeither\'inline\'orthenameofanoutput" "prototypefile\\n" ) ; return 1 ; } VAR_31 = VAR_32 = VAR_33 ; VAR_34 = VAR_35 ; VAR_36 = 0 ; VAR_37 = METHOD_2 ( 3 , VAR_38 ) ; for ( VAR_39 = 1 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { if ( VAR_43 [ VAR_44 ] [ 0 ] == '-' ) { if ( ! METHOD_3 ( VAR_45 [ VAR_46 ] , "-prestring" , 10 ) ) { VAR_47 ++ ;  VAR_48 = METHOD_4 ( VAR_49 [ VAR_50 ] + 1 , "prestring=%s" , VAR_51 ) ;  if ( VAR_52 != 1 ) { METHOD_5 ( VAR_53 , "parsefailureforprestring\\n" ) ; return 1 ; }  if ( ( VAR_54 = METHOD_6 ( VAR_55 ) ) > VAR_56 - 3 ) {  METHOD_7 ( "prestringtoolarge;omitting!\\n" , VAR_57 ) ; } else { VAR_58 [ VAR_59 ] = '' ; VAR_60 [ VAR_61 + 1 ] = '\\0' ; VAR_62 = METHOD_8 ( VAR_63 ) ; } } else if ( ! METHOD_9 ( VAR_64 [ VAR_65 ] , "-protos" , 7 ) ) { VAR_66 ++ ;  VAR_67 = METHOD_10 ( VAR_68 [ VAR_69 ] + 1 , "protos=%s" , VAR_70 ) ;  if ( VAR_71 != 1 ) { METHOD_11 ( VAR_72 , "parsefailureforprotos\\n" ) ; return 1 ; } VAR_73 = METHOD_12 ( VAR_74 ) ; if ( ! METHOD_13 ( VAR_75 , "inline" , 7 ) ) VAR_76 = VAR_77 ; } } } if ( VAR_78 - VAR_79 < 2 ) { METHOD_14 ( VAR_80 , "nofilesspecified!\\n" ) ; return 1 ; } VAR_81 = METHOD_15 ( 500 ) ; VAR_82 = METHOD_16 ( 0 ) ; METHOD_17 ( VAR_83 , ( TYPE_9 * ) "/*" , VAR_84 ) ;  METHOD_18 ( VAR_85 , VAR_86 ,  "*Theseprototypeswereautogen\'dbyxtractprotos,v.%s" , VAR_87 ) ; METHOD_19 ( VAR_88 , VAR_89 , VAR_90 ) ; METHOD_20 ( VAR_91 , ( TYPE_10 * ) "*/" , VAR_92 ) ; METHOD_21 ( VAR_93 , ( TYPE_11 * ) "ifdef__cplusplus" , VAR_94 ) ; METHOD_22 ( VAR_95 , ( TYPE_12 * ) "extern\\"C\\"{" , VAR_96 ) ; METHOD_23 ( VAR_97 , ( TYPE_13 * ) "/*__cplusplus*/\\n" , VAR_98 ) ; VAR_99 = METHOD_24 ( VAR_100 , 1 ) ; METHOD_25 ( VAR_101 , VAR_102 ) ; METHOD_26 ( VAR_103 ) ; METHOD_27 ( & VAR_104 ) ; VAR_105 = 1 + VAR_106 ; VAR_107 = VAR_108 ; if ( ( VAR_109 = METHOD_28 ( ) ) == VAR_110 ) { METHOD_29 ( VAR_111 , "failuretomakeawriteabletempfile\\n" ) ; return 1 ; } for ( VAR_112 = VAR_113 ; VAR_114 < VAR_115 ; VAR_116 ++ ) { VAR_117 = VAR_118 [ VAR_119 ] ; VAR_120 = METHOD_30 ( VAR_121 ) ; if ( VAR_122 [ VAR_123 - 1 ] == 'h' ) continue ;  METHOD_31 ( VAR_124 , VAR_125 , "cpp-ansi-DNO_PROTOS%s%s" ,  VAR_126 , VAR_127 ) ; VAR_128 = METHOD_32 ( VAR_129 ) ; if ( VAR_130 ) { METHOD_33 ( VAR_131 , "cppfailurefor%s;continuing\\n" , VAR_132 ) ; continue ; } if ( ( VAR_133 = METHOD_34 ( VAR_134 , VAR_135 ) ) == VAR_136 ) { METHOD_35 ( VAR_137 , "parsefailurefor%s;continuing\\n" , VAR_138 ) ; continue ; } if ( METHOD_36 ( VAR_139 ) > 1 ) { METHOD_37 ( VAR_140 , VAR_141 ) ; VAR_142 = VAR_143 ; } METHOD_38 ( VAR_144 ) ; } METHOD_39 ( VAR_145 ) ; METHOD_40 ( VAR_146 ) ; VAR_147 = METHOD_41 ( 0 ) ; METHOD_42 ( VAR_148 , ( TYPE_14 * ) "\\nifdef__cplusplus" , VAR_149 ) ; METHOD_43 ( VAR_150 , ( TYPE_15 * ) "}" , VAR_151 ) ; METHOD_44 ( VAR_152 , ( TYPE_16 * ) "/*__cplusplus*/" , VAR_153 ) ; VAR_154 = METHOD_45 ( VAR_155 , 1 ) ; METHOD_46 ( VAR_156 , VAR_157 ) ; METHOD_47 ( VAR_158 ) ; METHOD_48 ( & VAR_159 ) ; VAR_160 = ( TYPE_17 * ) METHOD_49 ( VAR_161 , & VAR_162 ) ; METHOD_50 ( & VAR_163 ) ; if ( ! VAR_164 ) { METHOD_51 ( VAR_165 , "%s\\n" , VAR_166 ) ; METHOD_52 ( VAR_167 ) ; return 0 ; } if ( ! VAR_168 ) { METHOD_53 ( VAR_169 , "Noprotosfound\\n" ) ; METHOD_54 ( VAR_170 ) ; return 1 ; } VAR_171 = METHOD_55 ( "allheaders_top.txt" ) ; if ( ! VAR_172 ) { METHOD_56 ( VAR_173 , sizeof ( VAR_174 ) , "include\\"%s\\"\\n" , VAR_175 ) ; METHOD_57 ( VAR_176 , VAR_177 ) ; METHOD_58 ( VAR_178 , "w" , VAR_179 , VAR_180 ) ; } else { METHOD_59 ( VAR_181 , VAR_182 ) ; } VAR_183 = METHOD_60 ( "allheaders_bot.txt" ) ; METHOD_61 ( VAR_184 , & VAR_185 ) ; METHOD_62 ( "allheaders.h" , VAR_186 , 0 , 0 ) ; METHOD_63 ( & VAR_187 ) ; METHOD_64 ( VAR_188 ) ; return 0 ; }
static unsigned TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 -> VAR_6 ; unsigned TYPE_2 * VAR_7 ;  if ( VAR_8 > VAR_9 -> VAR_10 ) return VAR_11 ;  if ( ! VAR_12 -> VAR_13 ) { TYPE_3 VAR_14 = sizeof ( unsigned TYPE_4 * ) * VAR_15 -> VAR_16 ; if ( ! ( VAR_17 -> VAR_18 = ( unsigned TYPE_5 * * ) VAR_19 -> METHOD_1 ( VAR_20 , VAR_21 ) ) ) { VAR_22 -> VAR_23 = VAR_24 ; return VAR_25 ; } METHOD_2 ( VAR_26 -> VAR_27 , 0 , VAR_28 ) ; } if ( VAR_29 -> VAR_30 [ VAR_31 ] ) return VAR_32 -> VAR_33 [ VAR_34 ] ; if ( ! ( VAR_35 = ( unsigned TYPE_6 * ) VAR_36 -> METHOD_3 ( VAR_37 , VAR_38 -> VAR_39 ) ) ) { VAR_40 -> VAR_41 = VAR_42 ; return VAR_43 ; } if ( VAR_44 -> METHOD_4 ( VAR_45 , ( TYPE_7 ) ( VAR_46 -> VAR_47 + ( VAR_48 * VAR_49 -> VAR_50 ) ) , VAR_51 ) ) { VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> METHOD_5 ( VAR_56 ) ; return VAR_57 ; } if ( VAR_58 -> METHOD_6 ( VAR_59 , VAR_60 , ( TYPE_8 ) VAR_61 -> VAR_62 ) != ( TYPE_9 ) VAR_63 -> VAR_64 ) { VAR_65 -> VAR_66 = VAR_67 ; VAR_68 -> METHOD_7 ( VAR_69 ) ; return VAR_70 ; } if ( ! ( ( VAR_71 [ 0 ] == 0x50 ) && ( VAR_72 [ 1 ] == 0x4D ) && ( VAR_73 [ 2 ] == 0x47 ) && ( ( VAR_74 [ 3 ] == 0x4C ) || ( VAR_75 [ 3 ] == 0x49 ) ) ) ) { VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> METHOD_8 ( VAR_80 ) ; return VAR_81 ; } return VAR_82 -> VAR_83 [ VAR_84 ] = VAR_85 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 , * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 VAR_5 ; METHOD_1 ( VAR_6 , VAR_7 ) ; METHOD_2 ( VAR_8 , 0 , sizeof ( VAR_9 ) ) ; VAR_10 . VAR_11 = VAR_12 ;  if ( ! METHOD_3 ( & VAR_13 , VAR_14 ) )  return - VAR_15 ; METHOD_4 ( VAR_16 , & VAR_17 -> VAR_18 , VAR_19 ) {  if ( ! METHOD_5 ( & VAR_20 , VAR_21 ) )  return - VAR_22 ; }  if ( ! METHOD_6 ( & VAR_23 , VAR_24 ) )  return - VAR_25 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; unsigned VAR_5 , VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 = 0 ; METHOD_1 ( VAR_9 ) ; if ( ! VAR_10 -> VAR_11 && VAR_12 -> VAR_13 -> VAR_14 != 8 ) VAR_15 -> VAR_16 -> VAR_17 = 0 ; if ( VAR_18 -> VAR_19 == METHOD_2 ( "WV1F" ) && METHOD_3 ( VAR_20 , 24 ) == 0x575630 ) { METHOD_4 ( VAR_21 , 24 ) ; if ( METHOD_5 ( VAR_22 , 8 ) == 0xF0 ) goto VAR_23 ; } VAR_24 = 0xff ; for ( ; ; ) { if ( METHOD_6 ( VAR_25 ) >= VAR_26 -> VAR_27 ) { if ( VAR_28 -> VAR_29 == 8 && ( VAR_30 -> VAR_31 >= 0 || VAR_32 -> VAR_33 >= 0 ) || VAR_34 -> VAR_35 == METHOD_7 ( "QMP4" ) ) { METHOD_8 ( VAR_36 -> VAR_37 , VAR_38 , "frameskip%d\\n" , VAR_39 -> VAR_40 ) ; return VAR_41 ; } else return VAR_42 ; } VAR_43 = METHOD_9 ( VAR_44 , 8 ) ; VAR_45 = ( ( VAR_46 << 8 ) | VAR_47 ) & 0xffffffff ; if ( ( VAR_48 & 0xFFFFFF00 ) != 0x100 ) continue ; if ( VAR_49 -> VAR_50 -> VAR_51 & VAR_52 ) { METHOD_10 ( VAR_53 -> VAR_54 , VAR_55 , "startcode:%3X" , VAR_56 ) ; if ( VAR_57 <= 0x11F ) METHOD_11 ( VAR_58 -> VAR_59 , VAR_60 , "VideoObjectStart" ) ; else if ( VAR_61 <= 0x12F ) METHOD_12 ( VAR_62 -> VAR_63 , VAR_64 , "VideoObjectLayerStart" ) ; else if ( VAR_65 <= 0x13F ) METHOD_13 ( VAR_66 -> VAR_67 , VAR_68 , "Reserved" ) ; else if ( VAR_69 <= 0x15F ) METHOD_14 ( VAR_70 -> VAR_71 , VAR_72 , "FGSbpstart" ) ; else if ( VAR_73 <= 0x1AF ) METHOD_15 ( VAR_74 -> VAR_75 , VAR_76 , "Reserved" ) ; else if ( VAR_77 == 0x1B0 ) METHOD_16 ( VAR_78 -> VAR_79 , VAR_80 , "VisualObjectSeqStart" ) ; else if ( VAR_81 == 0x1B1 ) METHOD_17 ( VAR_82 -> VAR_83 , VAR_84 , "VisualObjectSeqEnd" ) ; else if ( VAR_85 == 0x1B2 ) METHOD_18 ( VAR_86 -> VAR_87 , VAR_88 , "UserData" ) ; else if ( VAR_89 == 0x1B3 ) METHOD_19 ( VAR_90 -> VAR_91 , VAR_92 , "GroupofVOPstart" ) ; else if ( VAR_93 == 0x1B4 ) METHOD_20 ( VAR_94 -> VAR_95 , VAR_96 , "VideoSessionError" ) ; else if ( VAR_97 == 0x1B5 ) METHOD_21 ( VAR_98 -> VAR_99 , VAR_100 , "VisualObjectStart" ) ; else if ( VAR_101 == 0x1B6 ) METHOD_22 ( VAR_102 -> VAR_103 , VAR_104 , "VideoObjectPlanestart" ) ; else if ( VAR_105 == 0x1B7 ) METHOD_23 ( VAR_106 -> VAR_107 , VAR_108 , "slicestart" ) ; else if ( VAR_109 == 0x1B8 ) METHOD_24 ( VAR_110 -> VAR_111 , VAR_112 , "extensionstart" ) ; else if ( VAR_113 == 0x1B9 ) METHOD_25 ( VAR_114 -> VAR_115 , VAR_116 , "fgsstart" ) ; else if ( VAR_117 == 0x1BA ) METHOD_26 ( VAR_118 -> VAR_119 , VAR_120 , "FBAObjectstart" ) ; else if ( VAR_121 == 0x1BB ) METHOD_27 ( VAR_122 -> VAR_123 , VAR_124 , "FBAObjectPlanestart" ) ; else if ( VAR_125 == 0x1BC ) METHOD_28 ( VAR_126 -> VAR_127 , VAR_128 , "MeshObjectstart" ) ; else if ( VAR_129 == 0x1BD ) METHOD_29 ( VAR_130 -> VAR_131 , VAR_132 , "MeshObjectPlanestart" ) ; else if ( VAR_133 == 0x1BE ) METHOD_30 ( VAR_134 -> VAR_135 , VAR_136 , "StillTextureObjectstart" ) ; else if ( VAR_137 == 0x1BF ) METHOD_31 ( VAR_138 -> VAR_139 , VAR_140 , "TextureSpatialLayerstart" ) ; else if ( VAR_141 == 0x1C0 ) METHOD_32 ( VAR_142 -> VAR_143 , VAR_144 , "TextureSNRLayerstart" ) ; else if ( VAR_145 == 0x1C1 ) METHOD_33 ( VAR_146 -> VAR_147 , VAR_148 , "TextureTilestart" ) ; else if ( VAR_149 == 0x1C2 ) METHOD_34 ( VAR_150 -> VAR_151 , VAR_152 , "TextureShapeLayerstart" ) ; else if ( VAR_153 == 0x1C3 ) METHOD_35 ( VAR_154 -> VAR_155 , VAR_156 , "stuffingstart" ) ; else if ( VAR_157 <= 0x1C5 ) METHOD_36 ( VAR_158 -> VAR_159 , VAR_160 , "reserved" ) ; else if ( VAR_161 <= 0x1FF ) METHOD_37 ( VAR_162 -> VAR_163 , VAR_164 , "Systemstart" ) ; METHOD_38 ( VAR_165 -> VAR_166 , VAR_167 , "at%d\\n" , METHOD_39 ( VAR_168 ) ) ; } if ( VAR_169 >= 0x120 && VAR_170 <= 0x12F ) { if ( VAR_171 ) { METHOD_40 ( VAR_172 -> VAR_173 , VAR_174 , "IgnoringmultipleVOLheaders\\n" ) ; continue ; } VAR_175 ++ ; if ( ( VAR_176 = METHOD_41 ( VAR_177 , VAR_178 ) ) < 0 ) return VAR_179 ; } else if ( VAR_180 == VAR_181 ) { METHOD_42 ( VAR_182 , VAR_183 ) ; } else if ( VAR_184 == VAR_185 ) { METHOD_43 ( VAR_186 , VAR_187 ) ; } else if ( VAR_188 == VAR_189 ) { TYPE_6 VAR_190 , VAR_191 ; METHOD_44 ( VAR_192 , VAR_193 , & VAR_194 , & VAR_195 ) ; if ( VAR_196 == VAR_197 && ( VAR_198 > 0 && VAR_199 < 9 ) ) { VAR_200 -> VAR_201 = 1 ; METHOD_45 ( VAR_202 ) ; METHOD_46 ( VAR_203 , VAR_204 , 0 ) ; } else if ( VAR_205 -> VAR_206 ) { METHOD_47 ( VAR_207 -> VAR_208 , "Mixesstudioandnonstudioprofile\\n" ) ; return VAR_209 ; } VAR_210 -> VAR_211 -> VAR_212 = VAR_213 ; VAR_214 -> VAR_215 -> VAR_216 = VAR_217 ; } else if ( VAR_218 == VAR_219 ) { if ( VAR_220 -> VAR_221 ) { if ( ( VAR_222 = METHOD_48 ( VAR_223 , VAR_224 ) ) < 0 ) return VAR_225 ; } else METHOD_49 ( VAR_226 , VAR_227 ) ; } else if ( VAR_228 == VAR_229 ) { break ; } METHOD_50 ( VAR_230 ) ; VAR_231 = 0xff ; } VAR_232 : if ( VAR_233 -> VAR_234 -> VAR_235 & VAR_236 ) VAR_237 -> VAR_238 = 1 ; VAR_239 -> VAR_240 -> VAR_241 = ! VAR_242 -> VAR_243 ; if ( VAR_244 -> VAR_245 ) {  METHOD_51 ( VAR_246 -> VAR_247 -> VAR_248 == VAR_249 ) ;  if ( ! VAR_250 -> VAR_251 -> VAR_252 ) { METHOD_52 ( VAR_253 -> VAR_254 , VAR_255 , "MissingVOLheader\\n" ) ; return VAR_256 ; } return METHOD_53 ( VAR_257 , VAR_258 ) ; } else return METHOD_54 ( VAR_259 , VAR_260 ) ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; unsigned TYPE_7 * VAR_8 = VAR_9 ; unsigned TYPE_8 VAR_10 [ 16 ] ; for ( VAR_11 = 0 ; VAR_12 < VAR_13 ; VAR_14 ++ ) { TYPE_9 VAR_15 = 0 ; TYPE_10 VAR_16 = 0 ; for ( VAR_17 = - 8 ; VAR_18 < 0 ; VAR_19 ++ ) VAR_20 [ VAR_21 ] = VAR_22 [ 0 ] ;  for ( VAR_23 = VAR_24 ; VAR_25 < VAR_26 + 17 ; VAR_27 ++ )  VAR_28 [ VAR_29 ] = VAR_30 [ VAR_31 - 1 ] ; for ( VAR_32 = - 8 ; VAR_33 <= 6 ; VAR_34 ++ ) { VAR_35 += VAR_36 [ VAR_37 ] * VAR_38 [ VAR_39 ] ; VAR_40 += VAR_41 [ VAR_42 ] ; VAR_43 [ VAR_44 + 8 ] = 0 ; } for ( VAR_45 = 0 ; VAR_46 < VAR_47 + 8 ; VAR_48 ++ ) { TYPE_11 VAR_49 = VAR_50 [ VAR_51 + 7 ] - VAR_52 [ VAR_53 - 8 ] ; TYPE_12 VAR_54 = VAR_55 [ VAR_56 + 7 ] + VAR_57 [ VAR_58 - 8 ] ; VAR_59 += VAR_60 ; VAR_61 += VAR_62 * VAR_63 ; VAR_64 [ VAR_65 & 15 ] = VAR_66 [ VAR_67 ] ; if ( VAR_68 * 15 - VAR_69 * VAR_70 < VAR_71 ) { VAR_72 [ VAR_73 & 15 ] = ( 8 + VAR_74 + VAR_75 [ VAR_76 ] ) >> 4 ; } VAR_77 [ VAR_78 - 8 ] = VAR_79 [ ( VAR_80 - 8 ) & 15 ] ; } VAR_81 += VAR_82 ; } }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { const TYPE_7 * VAR_6 ; TYPE_8 VAR_7 ; const TYPE_9 * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_17 * VAR_22 ; if ( VAR_23 > VAR_24 / 4 ) { VAR_25 = VAR_26 ; goto VAR_27 ; } VAR_28 = CAST ( const TYPE_18 * , ( const TYPE_19 * ) ( ( const TYPE_20 * ) VAR_29 -> VAR_30 + VAR_31 ) ) ; if ( METHOD_1 ( VAR_32 , VAR_33 , VAR_34 , sizeof ( * VAR_35 ) , VAR_36 ) == - 1 ) goto VAR_37 ; VAR_38 . VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 / 8 ) if ( VAR_43 . VAR_44 > METHOD_4 ) { VAR_45 = VAR_46 ; goto VAR_47 ; } VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 ) ; METHOD_6 ( VAR_52 / ( 4 * sizeof ( * VAR_53 ) ) ) if ( VAR_54 . VAR_55 > METHOD_7 ) goto VAR_56 ; METHOD_8 ( ( "sectionlen:%uproperties%u\\n" , VAR_57 . VAR_58 , VAR_59 . VAR_60 ) ) ; if ( * VAR_61 ) { if ( * VAR_62 > METHOD_9 ) goto VAR_63 ; * VAR_64 += VAR_65 . VAR_66 ; VAR_67 = CAST ( TYPE_21 * , METHOD_10 ( * VAR_68 , * VAR_69 * sizeof ( * VAR_70 ) ) ) ; } else { * VAR_71 = VAR_72 . VAR_73 ; VAR_74 = CAST ( TYPE_22 * , METHOD_11 ( * VAR_75 * sizeof ( * VAR_76 ) ) ) ; } if ( VAR_77 == VAR_78 ) goto VAR_79 ; * VAR_80 = VAR_81 ; VAR_82 += * VAR_83 ; * VAR_84 += VAR_85 . VAR_86 ; VAR_87 = CAST ( const TYPE_23 * , ( const TYPE_24 * ) ( ( const TYPE_25 * ) ( const TYPE_26 * ) VAR_88 -> VAR_89 + VAR_90 + sizeof ( VAR_91 ) ) ) ; VAR_92 = CAST ( const TYPE_27 * , ( const TYPE_28 * ) ( ( ( const TYPE_29 * ) ( const TYPE_30 * ) VAR_93 ) + VAR_94 . VAR_95 ) ) ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , 0 , VAR_99 ) == - 1 ) goto VAR_100 ; for ( VAR_101 = 0 ; VAR_102 < VAR_103 . VAR_104 ; VAR_105 ++ ) {  TYPE_31 VAR_106 = METHOD_13 ( VAR_107 , ( VAR_108 << 1 ) + 1 ) ;  VAR_109 = ( const TYPE_32 * ) ( const TYPE_33 * ) ( ( const TYPE_34 * ) ( const TYPE_35 * ) VAR_110 + VAR_111 - 2 * sizeof ( TYPE_36 ) ) ; if ( VAR_112 > VAR_113 ) { METHOD_14 ( ( "Ranoftheend%p>%p\\n" , VAR_114 , VAR_115 ) ) ; goto VAR_116 ; } VAR_117 [ VAR_118 ] . VAR_119 = METHOD_15 ( VAR_120 , VAR_121 << 1 ) ; VAR_122 [ VAR_123 ] . VAR_124 = METHOD_16 ( VAR_125 , 0 ) ; METHOD_17 ( ( "%" SIZE_T_FORMAT "u)id=%xtype=%xoffs=0x%tx,0x%x\\n" , VAR_126 , VAR_127 [ VAR_128 ] . VAR_129 , VAR_130 [ VAR_131 ] . VAR_132 , VAR_133 - VAR_134 , VAR_135 ) ) ; if ( VAR_136 [ VAR_137 ] . VAR_138 & VAR_139 ) { VAR_140 = METHOD_18 ( VAR_141 , 1 ) ; if ( VAR_142 == 0 ) { METHOD_19 ( ( "CDF_VECTORwithnelements==0\\n" ) ) ; goto VAR_143 ; } VAR_144 = 2 ; } else { VAR_145 = 1 ; VAR_146 = 1 ; } VAR_147 = VAR_148 * sizeof ( TYPE_37 ) ; if ( VAR_149 [ VAR_150 ] . VAR_151 & ( VAR_152 | VAR_153 | VAR_154 ) ) goto VAR_155 ; switch ( VAR_156 [ VAR_157 ] . VAR_158 & VAR_159 ) { case VAR_160 : case VAR_161 : break ; case VAR_162 : if ( VAR_163 [ VAR_164 ] . VAR_165 & VAR_166 ) goto VAR_167 ; ( TYPE_38 ) METHOD_20 ( & VAR_168 , & VAR_169 [ VAR_170 ] , sizeof ( VAR_171 ) ) ; VAR_172 [ VAR_173 ] . VAR_174 = METHOD_21 ( VAR_175 ) ; break ; case VAR_176 : if ( VAR_177 [ VAR_178 ] . VAR_179 & VAR_180 ) goto VAR_181 ; ( TYPE_39 ) METHOD_22 ( & VAR_182 , & VAR_183 [ VAR_184 ] , sizeof ( VAR_185 ) ) ; VAR_186 [ VAR_187 ] . VAR_188 = METHOD_23 ( ( TYPE_40 ) VAR_189 ) ; break ; case VAR_190 : case VAR_191 : if ( VAR_192 [ VAR_193 ] . VAR_194 & VAR_195 ) goto VAR_196 ; ( TYPE_41 ) METHOD_24 ( & VAR_197 , & VAR_198 [ VAR_199 ] , sizeof ( VAR_200 ) ) ; VAR_201 [ VAR_202 ] . VAR_203 = METHOD_25 ( VAR_204 ) ; break ; case VAR_205 : if ( VAR_206 [ VAR_207 ] . VAR_208 & VAR_209 ) goto VAR_210 ; ( TYPE_42 ) METHOD_26 ( & VAR_211 , & VAR_212 [ VAR_213 ] , sizeof ( VAR_214 ) ) ; VAR_215 [ VAR_216 ] . VAR_217 = METHOD_27 ( ( TYPE_43 ) VAR_218 ) ; break ; case VAR_219 : if ( VAR_220 [ VAR_221 ] . VAR_222 & VAR_223 ) goto VAR_224 ; ( TYPE_44 ) METHOD_28 ( & VAR_225 , & VAR_226 [ VAR_227 ] , sizeof ( VAR_228 ) ) ; VAR_229 [ VAR_230 ] . VAR_231 = METHOD_29 ( ( TYPE_45 ) VAR_232 ) ; break ; case VAR_233 : if ( VAR_234 [ VAR_235 ] . VAR_236 & VAR_237 ) goto VAR_238 ; ( TYPE_46 ) METHOD_30 ( & VAR_239 , & VAR_240 [ VAR_241 ] , sizeof ( VAR_242 ) ) ; VAR_243 = METHOD_31 ( VAR_244 ) ; METHOD_32 ( & VAR_245 [ VAR_246 ] . VAR_247 , & VAR_248 , sizeof ( VAR_249 [ VAR_250 ] . VAR_251 ) ) ; break ; case VAR_252 : if ( VAR_253 [ VAR_254 ] . VAR_255 & VAR_256 ) goto VAR_257 ; ( TYPE_47 ) METHOD_33 ( & VAR_258 , & VAR_259 [ VAR_260 ] , sizeof ( VAR_261 ) ) ; VAR_262 = METHOD_34 ( ( TYPE_48 ) VAR_263 ) ; METHOD_35 ( & VAR_264 [ VAR_265 ] . VAR_266 , & VAR_267 , sizeof ( VAR_268 [ VAR_269 ] . VAR_270 ) ) ; break ; case VAR_271 : case VAR_272 : if ( VAR_273 > 1 ) { TYPE_49 VAR_274 = VAR_275 - * VAR_276 ; if ( * VAR_277 > METHOD_36 || VAR_278 > METHOD_37 ) goto VAR_279 ; * VAR_280 += VAR_281 ; VAR_282 = CAST ( TYPE_50 * , METHOD_38 ( * VAR_283 , * VAR_284 * sizeof ( * VAR_285 ) ) ) ; if ( VAR_286 == VAR_287 ) goto VAR_288 ; * VAR_289 = VAR_290 ; VAR_291 = * VAR_292 + VAR_293 ; } METHOD_39 ( ( "nelements=%" SIZE_T_FORMAT "u\\n" , VAR_294 ) ) ; for ( VAR_295 = 0 ; VAR_296 < VAR_297 && VAR_298 < VAR_299 . VAR_300 ; VAR_301 ++ , VAR_302 ++ ) { TYPE_51 VAR_303 = METHOD_40 ( VAR_304 , VAR_305 ) ; VAR_306 [ VAR_307 ] . VAR_308 . VAR_309 = VAR_310 ; VAR_311 [ VAR_312 ] . VAR_313 . VAR_314 = ( const TYPE_52 * ) ( const TYPE_53 * ) ( & VAR_315 [ VAR_316 + sizeof ( VAR_317 ) ] ) ; METHOD_41 ( ( "l=%d,r=%" SIZE_T_FORMAT "u,s=%s\\n" , VAR_318 , METHOD_42 ( VAR_319 , sizeof ( VAR_320 ) ) , VAR_321 [ VAR_322 ] . VAR_323 . VAR_324 ) ) ; if ( VAR_325 & 1 ) VAR_326 ++ ; VAR_327 += VAR_328 >> 1 ; if ( VAR_329 + VAR_330 >= VAR_331 ) goto VAR_332 ; VAR_333 = VAR_334 * sizeof ( TYPE_54 ) ; } VAR_335 -- ; break ; case VAR_336 : if ( VAR_337 [ VAR_338 ] . VAR_339 & VAR_340 ) goto VAR_341 ; ( TYPE_55 ) METHOD_43 ( & VAR_342 , & VAR_343 [ VAR_344 ] , sizeof ( VAR_345 ) ) ; VAR_346 [ VAR_347 ] . VAR_348 = METHOD_44 ( ( TYPE_56 ) VAR_349 ) ; break ; case VAR_350 : if ( VAR_351 [ VAR_352 ] . VAR_353 & VAR_354 ) goto VAR_355 ; break ; default : VAR_356 : METHOD_45 ( ( "Don\'tknowhowtodealwith%x\\n" , VAR_357 [ VAR_358 ] . VAR_359 ) ) ; break ; } } return 0 ; VAR_360 : METHOD_46 ( * VAR_361 ) ; return - 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 METHOD_1 , TYPE_7 * VAR_5 , TYPE_8 * VAR_6 ) { TYPE_9 * VAR_7 ; TYPE_10 * VAR_8 [ VAR_9 ] ; TYPE_11 * VAR_10 [ VAR_11 ] ; TYPE_12 VAR_12 [ VAR_13 ] ; TYPE_13 * VAR_14 = VAR_15 ; TYPE_14 * VAR_16 = VAR_17 ; TYPE_15 * VAR_18 ; TYPE_16 * VAR_19 ; TYPE_17 VAR_20 ; TYPE_18 VAR_21 ; TYPE_19 VAR_22 ; TYPE_20 VAR_23 ; TYPE_21 VAR_24 ; TYPE_22 VAR_25 = 0 ; TYPE_23 VAR_26 ; TYPE_24 VAR_27 ; VAR_28 = VAR_29 & VAR_30 ? ( TYPE_25 ) VAR_31 : ( TYPE_26 ) VAR_32 ; VAR_33 = VAR_34 & VAR_35 ? - 1 : 1 ; if ( VAR_36 & VAR_37 ) VAR_38 -- ; VAR_39 [ VAR_40 ] = VAR_41 ; VAR_42 [ VAR_43 ] = VAR_44 ; VAR_45 [ VAR_46 ] = 0 ; VAR_47 ++ ; while ( VAR_48 > 0 ) { VAR_49 -- ; VAR_50 = VAR_51 [ VAR_52 ] ; VAR_53 = VAR_54 [ VAR_55 ] ; VAR_56 = VAR_57 [ VAR_58 ] ; VAR_59 = VAR_60 ; while ( ! VAR_61 ) { if ( * VAR_62 == VAR_63 ) { if ( VAR_64 & VAR_65 ) { METHOD_2 ( METHOD_3 ( VAR_66 & VAR_67 ? VAR_68 + 1 : VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ) ; break ; } else { if ( VAR_73 != VAR_74 ) * VAR_75 = VAR_76 ; return VAR_77 ; } } if ( VAR_78 >= VAR_79 ) break ; switch ( * VAR_80 ) { case VAR_81 : if ( * VAR_82 == * ( VAR_83 + 1 ) ) { VAR_84 ++ ; VAR_85 += VAR_86 ; VAR_87 += 2 ; } else { VAR_88 = VAR_89 ; } break ; case VAR_90 : VAR_91 = * ( TYPE_27 * ) ( VAR_92 + 1 ) & 0xFF ; VAR_93 = * ( TYPE_28 * ) ( VAR_94 + 1 ) >> 8 ; if ( ( * VAR_95 & VAR_96 ) == VAR_97 ) { VAR_98 ++ ; VAR_99 += VAR_100 ; VAR_101 += 3 ; } else { VAR_102 = VAR_103 ; } break ; case VAR_104 : VAR_105 ++ ; VAR_106 += VAR_107 ; VAR_108 += 1 ; break ; case VAR_109 : VAR_110 = ( TYPE_29 * ) ( VAR_111 + 1 ) ; VAR_112 = VAR_113 + 1 + sizeof ( TYPE_30 ) ; for ( VAR_114 = VAR_115 -> VAR_116 + 1 ; VAR_117 <= VAR_118 -> VAR_119 ; VAR_120 ++ ) {  VAR_121 = VAR_122 + VAR_123 * VAR_124 ;  if ( VAR_125 + VAR_126 >= VAR_127 )  break ;  if ( * ( VAR_128 ) != VAR_129 || ( * ( VAR_130 ) == VAR_131 && * ( VAR_132 + 1 ) == * VAR_133 ) ) { if ( VAR_134 >= VAR_135 ) return - 4 ; VAR_136 [ VAR_137 ] = VAR_138 ; VAR_139 [ VAR_140 ] = VAR_141 ; VAR_142 [ VAR_143 ] = VAR_144 + VAR_145 ; VAR_146 ++ ; } } VAR_147 += VAR_148 * VAR_149 -> VAR_150 ; VAR_151 += VAR_152 -> VAR_153 ;  VAR_154 = VAR_155 ;  break ; default : METHOD_4 ( VAR_156 ) ; } } } if ( VAR_157 != VAR_158 ) * VAR_159 = - 1 ; return VAR_160 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  if ( VAR_3 > 32 && VAR_4 < 128 ) { METHOD_1 ( VAR_5 >= 4 ) ; VAR_6 [ 0 ] = '\\'' ; VAR_7 [ 1 ] = ( TYPE_4 ) VAR_8 ; VAR_9 [ 2 ] = '\\'' ; VAR_10 [ 3 ] = 0 ; return ; } switch ( VAR_11 ) {  case VAR_12 : METHOD_2 ( VAR_13 , "EOF" , VAR_14 ) ; return ;   case VAR_15 : METHOD_3 ( VAR_16 , "ID" , VAR_17 ) ; return ;   case VAR_18 : METHOD_4 ( VAR_19 , "INT" , VAR_20 ) ; return ;   case VAR_21 : METHOD_5 ( VAR_22 , "FLOAT" , VAR_23 ) ; return ;   case VAR_24 : METHOD_6 ( VAR_25 , "STRING" , VAR_26 ) ; return ;   case VAR_27 : METHOD_7 ( VAR_28 , "UNFINISHEDSTRING" , VAR_29 ) ; return ;   case VAR_30 : METHOD_8 ( VAR_31 , "TEMPLATELITERAL" , VAR_32 ) ; return ;   case VAR_33 : METHOD_9 ( VAR_34 , "UNFINISHEDTEMPLATELITERAL" , VAR_35 ) ; return ;   case VAR_36 : METHOD_10 ( VAR_37 , "REGEX" , VAR_38 ) ; return ;   case VAR_39 : METHOD_11 ( VAR_40 , "UNFINISHEDREGEX" , VAR_41 ) ; return ;   case VAR_42 : METHOD_12 ( VAR_43 , "UNFINISHEDCOMMENT" , VAR_44 ) ; return ;  } if ( VAR_45 >= VAR_46 && VAR_47 < VAR_48 ) { const TYPE_5 VAR_49 [ ] = "==\\0" "===\\0" "!=\\0" "!==\\0" "<=\\0" "<<\\0" "<<=\\0" ">=\\0" ">>\\0" ">>>\\0" ">>=\\0" ">>>=\\0" "+=\\0" "-=\\0" "++\\0" "--\\0" "*=\\0" "/=\\0" "%=\\0" "&=\\0" "&&\\0" "|=\\0" "||\\0" "^=\\0" "=>\\0" "if\\0" "else\\0" "do\\0" "while\\0" "for\\0" "return\\0" "continue\\0" "function\\0" "return\\0" "var\\0" "let\\0" "const\\0" "this\\0" "throw\\0" "try\\0" "catch\\0" "finally\\0" "true\\0" "false\\0" "null\\0" "undefined\\0" "new\\0" "in\\0" "instanceof\\0" "switch\\0" "case\\0" "default\\0" "delete\\0" "typeof\\0" "void\\0" "debugger\\0" "class\\0" "extends\\0" "super\\0" "static\\0" ; unsigned TYPE_6 VAR_50 = 0 ; TYPE_7 VAR_51 = VAR_52 - VAR_53 ; while ( VAR_54 > 0 && VAR_55 < sizeof ( VAR_56 ) ) { while ( VAR_57 [ VAR_58 ] && VAR_59 < sizeof ( VAR_60 ) ) VAR_61 ++ ; VAR_62 ++ ; VAR_63 -- ; } METHOD_13 ( VAR_64 == 0 ) ;  METHOD_14 ( VAR_65 , & VAR_66 [ VAR_67 ] , VAR_68 ) ;  return ; }  METHOD_15 ( VAR_69 >= 10 ) ;  METHOD_16 ( VAR_70 , VAR_71 , "?[%d]" , VAR_72 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( ) ; METHOD_2 ( VAR_1 , - 1 ) ; if ( METHOD_3 ( VAR_2 -> VAR_3 ) ) { METHOD_4 ( ) ; return ; } METHOD_5 ( ) ; if ( METHOD_6 ( VAR_4 ) ) { METHOD_7 ( ) ; METHOD_8 ( ) ; return ; } if ( METHOD_9 ( VAR_5 -> VAR_6 . VAR_7 & VAR_8 ) ) { METHOD_10 ( ) ; METHOD_11 ( ) ; return ; } VAR_9 -> VAR_10 . VAR_11 |= VAR_12 ; METHOD_12 ( ) ; METHOD_13 ( & VAR_13 -> VAR_14 ) ;  METHOD_14 ( ) ;  if ( METHOD_15 ( ! ( VAR_15 -> VAR_16 . VAR_17 & VAR_18 ) ) ) { struct STRUCT_OR_UNION_1 * VAR_19 = VAR_20 ; if ( METHOD_16 ( ! ( VAR_21 -> VAR_22 & VAR_23 ) ) ) { METHOD_17 ( & VAR_24 -> VAR_25 , VAR_26 ) ; if ( ! METHOD_18 ( VAR_27 , & VAR_28 -> VAR_29 , VAR_30 ) ) return ; } if ( METHOD_19 ( & VAR_31 -> VAR_32 , & VAR_33 ) ) METHOD_20 ( & VAR_34 , 1 ) ; return ; } METHOD_21 ( VAR_35 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  if ( ! METHOD_1 ( VAR_2 , VAR_3 , 16 ) ) {  METHOD_2 ( VAR_4 , VAR_5 , 4 ) ;  } else if ( ! METHOD_3 ( VAR_6 , VAR_7 , 32 ) ) {  METHOD_4 ( VAR_8 , VAR_9 - 16 , 4 ) ;  } else if ( ! METHOD_5 ( VAR_10 , VAR_11 , 64 ) ) {  METHOD_6 ( VAR_12 , VAR_13 - 32 , 5 ) ;  } else { METHOD_7 ( VAR_14 , VAR_15 - 64 ) ; } }
enum VAR_0 METHOD_0 ( const TYPE_0 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_1 * VAR_3 , TYPE_2 VAR_4 , TYPE_3 * VAR_5 ) { TYPE_4 TYPE_5 VAR_6 = VAR_7 ; TYPE_6 TYPE_7 * VAR_8 = VAR_9 ; TYPE_8 TYPE_9 * VAR_10 = VAR_11 ; const TYPE_10 * VAR_12 , * VAR_13 , * VAR_14 ; TYPE_11 VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 ; TYPE_14 VAR_18 ; METHOD_1 ( VAR_19 ) ; METHOD_2 ( VAR_20 ) ; VAR_21 = METHOD_3 ( VAR_22 , "vu-" ) ; if ( ! VAR_23 ) goto VAR_24 ; VAR_25 = METHOD_4 ( VAR_26 , '-' ) ;  if ( ! VAR_27 || VAR_28 == VAR_29 )  goto VAR_30 ; VAR_31 = METHOD_5 ( VAR_32 + 1 , & VAR_33 ) ; if ( VAR_34 < 0 ) goto VAR_35 ; VAR_36 = METHOD_6 ( VAR_37 , VAR_38 - VAR_39 ) ; if ( ! METHOD_7 ( VAR_40 ) ) goto VAR_41 ; VAR_42 = METHOD_8 ( & VAR_43 ) ; if ( VAR_44 < 0 ) goto VAR_45 ; VAR_46 = METHOD_9 ( VAR_47 , "org.freedesktop.machine1" , "/org/freedesktop/machine1" , "org.freedesktop.machine1.Manager" , "MapFromMachineUser" , & VAR_48 , & VAR_49 , "su" , VAR_50 , ( TYPE_15 ) VAR_51 ) ; if ( VAR_52 < 0 ) { if ( METHOD_10 ( & VAR_53 , VAR_54 ) ) goto VAR_55 ; goto VAR_56 ; } VAR_57 = METHOD_11 ( VAR_58 , "u" , & VAR_59 ) ; if ( VAR_60 < 0 ) goto VAR_61 ; VAR_62 = METHOD_12 ( VAR_63 ) ; if ( VAR_64 < VAR_65 + 1 ) { * VAR_66 = VAR_67 ; return VAR_68 ; } METHOD_13 ( VAR_69 , VAR_70 , VAR_71 + 1 ) ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 -> VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = 65534 ; VAR_80 -> VAR_81 = VAR_82 ; VAR_83 -> VAR_84 = ( TYPE_16 * ) "*" ; VAR_85 -> VAR_86 = ( TYPE_17 * ) "/" ; VAR_87 -> VAR_88 = ( TYPE_18 * ) "/sbin/nologin" ; * VAR_89 = 0 ; return VAR_90 ; VAR_91 : * VAR_92 = 0 ; return VAR_93 ; VAR_94 : * VAR_95 = - VAR_96 ; return VAR_97 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ) { struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 = STRUCT_OR_UNION_6 -> VAR_0 -> VAR_1 ; struct STRUCT_OR_UNION_7 * VAR_2 = VAR_3 ; unsigned TYPE_1 * VAR_4 ;  TYPE_2 VAR_5 = - VAR_6 ;  unsigned TYPE_3 * VAR_7 = METHOD_1 ( STRUCT_OR_UNION_8 ) ; struct STRUCT_OR_UNION_9 * VAR_8 ;  TYPE_4 VAR_9 ;  VAR_10 = METHOD_2 ( STRUCT_OR_UNION_10 ) ; VAR_11 = METHOD_3 ( STRUCT_OR_UNION_11 , 0 ) ; METHOD_4 ( & VAR_12 -> VAR_13 ) ; if ( VAR_14 -> VAR_15 == VAR_16 ) { VAR_17 = VAR_18 -> VAR_19 . VAR_20 + VAR_21 -> VAR_22 ; } else { VAR_23 = METHOD_5 ( STRUCT_OR_UNION_12 -> VAR_24 , VAR_25 ) ;  if ( ! VAR_26 )  goto VAR_27 ; VAR_28 = VAR_29 -> VAR_30 ; } METHOD_6 ( STRUCT_OR_UNION_13 -> VAR_31 , VAR_32 , STRUCT_OR_UNION_14 -> VAR_33 , VAR_34 ) ; METHOD_7 ( VAR_35 ) ; METHOD_8 ( & VAR_36 -> VAR_37 ) ; METHOD_9 ( STRUCT_OR_UNION_15 ) ; METHOD_10 ( STRUCT_OR_UNION_16 ) ; METHOD_11 ( STRUCT_OR_UNION_17 ) ; return 0 ;  VAR_38 :  METHOD_12 ( & VAR_39 -> VAR_40 ) ; METHOD_13 ( STRUCT_OR_UNION_18 ) ;  METHOD_14 ( STRUCT_OR_UNION_19 ) ;  METHOD_15 ( STRUCT_OR_UNION_20 ) ; return VAR_41 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 * VAR_1 ; if ( METHOD_1 ( VAR_2 ) ) VAR_3 = VAR_4 ;  else if ( VAR_5 -> VAR_6 . VAR_7 & VAR_8 ) {  if ( METHOD_2 ( VAR_9 ) ) VAR_10 = VAR_11 ; else VAR_12 = VAR_13 ; } else { if ( METHOD_3 ( VAR_14 ) ) VAR_15 = VAR_16 ; else VAR_17 = VAR_18 ; } METHOD_4 ( VAR_19 , METHOD_5 ( VAR_20 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 = 0 , VAR_5 = 0 ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 * VAR_8 = VAR_9 , * VAR_10 = VAR_11 ; TYPE_8 * VAR_12 = VAR_13 ; TYPE_9 * VAR_14 = VAR_15 ; TYPE_10 * VAR_16 = VAR_17 ; METHOD_1 ( VAR_18 ) ; if ( VAR_19 == VAR_20 ) return VAR_21 ; * VAR_22 = VAR_23 ; METHOD_2 ( ) ; METHOD_3 ( ) ; * ( VAR_24 ) = ( TYPE_11 ) METHOD_4 ( sizeof ( VAR_25 ) ) ; if ( * VAR_26 == VAR_27 ) { VAR_28 = VAR_29 ; goto VAR_30 ; } METHOD_5 ( * VAR_31 , 0 , sizeof ( VAR_32 ) ) ; METHOD_6 ( VAR_33 , VAR_34 , "(objectclass=krbPwdPolicy)" , VAR_35 ) ; VAR_36 = METHOD_7 ( VAR_37 , VAR_38 ) ;  if ( VAR_39 != VAR_40 ) {  if ( ( VAR_41 = METHOD_8 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 , * VAR_46 ) ) != 0 ) goto VAR_47 ; }  VAR_48 :  METHOD_9 ( VAR_49 ) ; if ( VAR_50 != 0 ) { if ( * VAR_51 != VAR_52 ) { METHOD_10 ( VAR_53 , * VAR_54 ) ; * VAR_55 = VAR_56 ; } } METHOD_11 ( VAR_57 , VAR_58 ) ; return VAR_59 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 * VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; if ( 0 == VAR_13 -> VAR_14 ) return VAR_15 ; METHOD_1 ( "pic_parameter_set_id" , VAR_16 , VAR_17 ) ; VAR_18 = VAR_19 ; if ( ( VAR_20 >= VAR_21 ) || ( VAR_22 < 0 ) ) { if ( VAR_23 -> VAR_24 ) return VAR_25 ; else VAR_26 = 0 ; } VAR_27 = ( VAR_28 -> VAR_29 . VAR_30 + VAR_31 - 1 ) ; VAR_32 -> VAR_33 = VAR_34 ; METHOD_2 ( "seq_parameter_set_id" , VAR_35 , VAR_36 ) ; VAR_37 -> VAR_38 = VAR_39 ; VAR_40 -> VAR_41 = METHOD_3 ( VAR_42 -> VAR_43 , 0 , VAR_44 - 2 ) ; VAR_45 = ( VAR_46 -> VAR_47 . VAR_48 + VAR_49 -> VAR_50 ) ; if ( 0 == VAR_51 -> VAR_52 ) { return VAR_53 ; } METHOD_4 ( "dependent_slices_enabled_flag" , VAR_54 , VAR_55 , 1 ) ; VAR_56 -> VAR_57 = VAR_58 ; METHOD_5 ( "output_flag_present_flag" , VAR_59 , VAR_60 , 1 ) ; VAR_61 -> VAR_62 = VAR_63 ; METHOD_6 ( "num_extra_slice_header_bits" , VAR_64 , VAR_65 , 3 ) ; VAR_66 -> VAR_67 = VAR_68 ; METHOD_7 ( "sign_data_hiding_flag" , VAR_69 , VAR_70 , 1 ) ; VAR_71 -> VAR_72 = VAR_73 ; METHOD_8 ( "cabac_init_present_flag" , VAR_74 , VAR_75 , 1 ) ; VAR_76 -> VAR_77 = VAR_78 ; METHOD_9 ( "num_ref_idx_l0_default_active_minus1" , VAR_79 , VAR_80 ) ; VAR_81 -> VAR_82 = VAR_83 + 1 ; METHOD_10 ( "num_ref_idx_l1_default_active_minus1" , VAR_84 , VAR_85 ) ; VAR_86 -> VAR_87 = VAR_88 + 1 ; METHOD_11 ( "pic_init_qp_minus26" , VAR_89 , VAR_90 ) ; VAR_91 -> VAR_92 = VAR_93 + 26 ; METHOD_12 ( "constrained_intra_pred_flag" , VAR_94 , VAR_95 , 1 ) ; VAR_96 -> VAR_97 = VAR_98 ; METHOD_13 ( "transform_skip_enabled_flag" , VAR_99 , VAR_100 , 1 ) ; VAR_101 -> VAR_102 = VAR_103 ; METHOD_14 ( "cu_qp_delta_enabled_flag" , VAR_104 , VAR_105 , 1 ) ; VAR_106 -> VAR_107 = VAR_108 ; if ( VAR_109 -> VAR_110 ) { METHOD_15 ( "diff_cu_qp_delta_depth" , VAR_111 , VAR_112 ) ; VAR_113 -> VAR_114 = VAR_115 ; } else { VAR_116 -> VAR_117 = 0 ; } VAR_118 -> VAR_119 = VAR_120 -> VAR_121 - VAR_122 -> VAR_123 ; METHOD_16 ( "cb_qp_offset" , VAR_124 , VAR_125 ) ; VAR_126 -> VAR_127 = VAR_128 ; METHOD_17 ( "cr_qp_offset" , VAR_129 , VAR_130 ) ; VAR_131 -> VAR_132 = VAR_133 ; METHOD_18 ( "slicelevel_chroma_qp_flag" , VAR_134 , VAR_135 , 1 ) ; VAR_136 -> VAR_137 = VAR_138 ; METHOD_19 ( "weighted_pred_flag" , VAR_139 , VAR_140 , 1 ) ; VAR_141 -> VAR_142 = VAR_143 ; METHOD_20 ( "weighted_bipred_flag" , VAR_144 , VAR_145 , 1 ) ; VAR_146 -> VAR_147 = VAR_148 ; METHOD_21 ( "transquant_bypass_enable_flag" , VAR_149 , VAR_150 , 1 ) ; VAR_151 -> VAR_152 = VAR_153 ; METHOD_22 ( "tiles_enabled_flag" , VAR_154 , VAR_155 , 1 ) ; VAR_156 -> VAR_157 = VAR_158 ; METHOD_23 ( "entropy_coding_sync_enabled_flag" , VAR_159 , VAR_160 , 1 ) ; VAR_161 -> VAR_162 = VAR_163 ; VAR_164 -> VAR_165 = 0 ; if ( VAR_166 -> VAR_167 ) {  METHOD_24 ( "num_tile_columns_minus1" , VAR_168 , VAR_169 ) ;  VAR_170 -> VAR_171 = VAR_172 + 1 ; METHOD_25 ( "num_tile_rows_minus1" , VAR_173 , VAR_174 ) ; VAR_175 -> VAR_176 = VAR_177 + 1 ; if ( ( VAR_178 -> VAR_179 < 1 ) ||  ( VAR_180 -> VAR_181 > VAR_182 -> VAR_183 ) ||  ( VAR_184 -> VAR_185 < 1 ) ||  ( VAR_186 -> VAR_187 > VAR_188 -> VAR_189 ) )  return VAR_190 ; METHOD_26 ( "uniform_spacing_flag" , VAR_191 , VAR_192 , 1 ) ; VAR_193 -> VAR_194 = VAR_195 ; { TYPE_7 VAR_196 ; TYPE_8 VAR_197 , VAR_198 ; VAR_199 = 0 ; for ( VAR_200 = 0 ; VAR_201 < VAR_202 -> VAR_203 ; VAR_204 ++ ) { VAR_205 * VAR_206 ; if ( ! VAR_207 -> VAR_208 ) { if ( VAR_209 < ( VAR_210 -> VAR_211 - 1 ) ) { METHOD_27 ( "column_width_minus1[i]" , VAR_212 , VAR_213 ) ; VAR_214 += 1 ; } else { VAR_215 = VAR_216 -> VAR_217 - VAR_218 ; } } else { VAR_219 = ( ( VAR_220 + 1 ) * VAR_221 -> VAR_222 ) / VAR_223 -> VAR_224 - ( VAR_225 * VAR_226 -> VAR_227 ) / VAR_228 -> VAR_229 ; } for ( VAR_230 = 0 ; VAR_231 < VAR_232 -> VAR_233 ; VAR_234 ++ ) { VAR_235 = VAR_236 -> VAR_237 + VAR_238 * VAR_239 -> VAR_240 + VAR_241 ; VAR_242 -> VAR_243 = VAR_244 ; VAR_245 -> VAR_246 = VAR_247 ; } VAR_248 += VAR_249 ; if ( ( VAR_250 > VAR_251 -> VAR_252 ) || ( VAR_253 <= 0 ) ) return VAR_254 ; } VAR_255 = 0 ; for ( VAR_256 = 0 ; VAR_257 < ( VAR_258 -> VAR_259 ) ; VAR_260 ++ ) { VAR_261 * VAR_262 ; if ( ! VAR_263 -> VAR_264 ) { if ( VAR_265 < ( VAR_266 -> VAR_267 - 1 ) ) { METHOD_28 ( "row_height_minus1[i]" , VAR_268 , VAR_269 ) ; VAR_270 += 1 ; } else { VAR_271 = VAR_272 -> VAR_273 - VAR_274 ; } } else { VAR_275 = ( ( VAR_276 + 1 ) * VAR_277 -> VAR_278 ) / VAR_279 -> VAR_280 - ( VAR_281 * VAR_282 -> VAR_283 ) / VAR_284 -> VAR_285 ; } for ( VAR_286 = 0 ; VAR_287 < VAR_288 -> VAR_289 ; VAR_290 ++ ) { VAR_291 = VAR_292 -> VAR_293 + VAR_294 * VAR_295 -> VAR_296 + VAR_297 ; VAR_298 -> VAR_299 = VAR_300 ; VAR_301 -> VAR_302 = VAR_303 ; } VAR_304 += VAR_305 ; if ( ( VAR_306 > VAR_307 -> VAR_308 ) || ( VAR_309 <= 0 ) ) return VAR_310 ; } } METHOD_29 ( "loop_filter_across_tiles_enabled_flag" , VAR_311 , VAR_312 , 1 ) ; VAR_313 -> VAR_314 = VAR_315 ; } else { VAR_316 -> VAR_317 = 1 ; VAR_318 -> VAR_319 = 1 ; VAR_320 -> VAR_321 = 1 ; VAR_322 -> VAR_323 -> VAR_324 = 0 ; VAR_325 -> VAR_326 -> VAR_327 = 0 ; VAR_328 -> VAR_329 -> VAR_330 = VAR_331 -> VAR_332 ; VAR_333 -> VAR_334 -> VAR_335 = VAR_336 -> VAR_337 ; } METHOD_30 ( "loop_filter_across_slices_enabled_flag" , VAR_338 , VAR_339 , 1 ) ; VAR_340 -> VAR_341 = VAR_342 ; METHOD_31 ( "deblocking_filter_control_present_flag" , VAR_343 , VAR_344 , 1 ) ; VAR_345 -> VAR_346 = VAR_347 ; VAR_348 -> VAR_349 = 0 ; VAR_350 -> VAR_351 = 0 ; VAR_352 -> VAR_353 = 0 ; VAR_354 -> VAR_355 = 0 ; if ( VAR_356 -> VAR_357 ) { METHOD_32 ( "deblocking_filter_override_enabled_flag" , VAR_358 , VAR_359 , 1 ) ; VAR_360 -> VAR_361 = VAR_362 ; METHOD_33 ( "pic_disable_deblocking_filter_flag" , VAR_363 , VAR_364 , 1 ) ; VAR_365 -> VAR_366 = VAR_367 ; if ( ! VAR_368 -> VAR_369 ) { METHOD_34 ( "pps_beta_offset_div2" , VAR_370 , VAR_371 ) ; VAR_372 -> VAR_373 = VAR_374 ; METHOD_35 ( "pps_tc_offset_div2" , VAR_375 , VAR_376 ) ; VAR_377 -> VAR_378 = VAR_379 ; } } METHOD_36 ( "pps_scaling_list_data_present_flag" , VAR_380 , VAR_381 , 1 ) ; VAR_382 -> VAR_383 = VAR_384 ; if ( VAR_385 -> VAR_386 ) { METHOD_37 ( VAR_387 -> VAR_388 ) ; METHOD_38 ( VAR_389 , VAR_390 -> VAR_391 ) ; } METHOD_39 ( "lists_modification_present_flag" , VAR_392 , VAR_393 , 1 ) ; VAR_394 -> VAR_395 = VAR_396 ; METHOD_40 ( "log2_parallel_merge_level_minus2" , VAR_397 , VAR_398 ) ; VAR_399 -> VAR_400 = VAR_401 + 2 ; METHOD_41 ( "slice_header_extension_present_flag" , VAR_402 , VAR_403 , 1 ) ; VAR_404 -> VAR_405 = VAR_406 ; METHOD_42 ( "pps_extension_flag" , VAR_407 , VAR_408 , 1 ) ; VAR_409 -> VAR_410 = 1 ; return VAR_411 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , const unsigned TYPE_2 VAR_3 , const unsigned TYPE_3 VAR_4 , const unsigned TYPE_4 VAR_5 ) { struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; struct STRUCT_OR_UNION_6 * VAR_7 = METHOD_2 ( STRUCT_OR_UNION_7 ) ;  struct STRUCT_OR_UNION_8 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ;  TYPE_5 VAR_11 , VAR_12 = 0 ; unsigned VAR_13 , VAR_14 , VAR_15 , VAR_16 = 0 , VAR_17 = 0 , VAR_18 = 0 ; unsigned VAR_19 = 0 ; unsigned VAR_20 ;  const unsigned VAR_21 = VAR_22 - 1 ;  TYPE_6 VAR_23 = 0 ; enum VAR_24 VAR_25 ; TYPE_7 * VAR_26 ; TYPE_8 VAR_27 = 0 ; METHOD_3 ( VAR_28 < 1 ) ; METHOD_4 ( VAR_29 == VAR_30 ) ; METHOD_5 ( VAR_31 -> VAR_32 , VAR_33 , 1 ) ; if ( VAR_34 == VAR_35 ) { struct STRUCT_OR_UNION_9 * VAR_36 ; VAR_37 = METHOD_6 ( VAR_38 , VAR_39 ) ; VAR_40 = VAR_41 -> VAR_42 [ VAR_43 ] ; VAR_44 = METHOD_7 ( VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 , VAR_50 , & VAR_51 ) ; METHOD_8 ( VAR_52 < 1 ) ; VAR_53 = VAR_54 ; } else { VAR_55 = VAR_56 > 1 ? VAR_57 -> VAR_58 : VAR_59 -> VAR_60 ; VAR_61 = METHOD_9 ( VAR_62 , VAR_63 - VAR_64 -> VAR_65 [ VAR_66 ] ) ; if ( VAR_67 == VAR_68 -> VAR_69 ) { VAR_70 = VAR_71 - VAR_72 ; VAR_73 = VAR_74 ; } else { VAR_75 = VAR_76 ; VAR_77 = VAR_78 - VAR_79 -> VAR_80 ; VAR_81 = METHOD_10 ( VAR_82 ) ; VAR_83 += ( VAR_84 - VAR_85 ) ; } } VAR_86 = VAR_87 + VAR_88 ; VAR_89 = VAR_90 ; do { TYPE_9 VAR_91 ; VAR_92 = VAR_93 - VAR_94 ; VAR_95 = METHOD_11 ( VAR_96 , & VAR_97 , & VAR_98 ) ; if ( VAR_99 ) return VAR_100 ; VAR_101 += VAR_102 ; if ( VAR_103 != VAR_104 || METHOD_12 ( VAR_105 ) ) METHOD_13 ( VAR_106 , VAR_107 , VAR_108 ) ; switch ( VAR_109 ) { case VAR_110 : if ( VAR_111 == 1 ) { VAR_112 = ( TYPE_10 * ) ( VAR_113 -> VAR_114 + sizeof ( struct STRUCT_OR_UNION_10 ) ) ; VAR_115 = * VAR_116 ; } for ( ; VAR_117 - 1 < VAR_118 - VAR_119 -> VAR_120 && VAR_121 > 0 ; VAR_122 ++ , VAR_123 -- ) METHOD_14 ( VAR_124 , VAR_125 -> VAR_126 , VAR_127 , 0 , VAR_128 ++ ) ; if ( VAR_129 - 1 == VAR_130 - VAR_131 -> VAR_132 ) { VAR_133 -- ; METHOD_15 ( VAR_134 -> VAR_135 [ VAR_136 ] , sizeof ( struct STRUCT_OR_UNION_11 ) , VAR_137 , sizeof ( struct STRUCT_OR_UNION_12 ) ) ; METHOD_16 ( VAR_138 , sizeof ( struct STRUCT_OR_UNION_13 ) + sizeof ( TYPE_11 ) ) ; VAR_139 = ( TYPE_12 * ) ( VAR_140 -> VAR_141 [ VAR_142 ] -> VAR_143 + sizeof ( struct STRUCT_OR_UNION_14 ) ) ; * VAR_144 = VAR_145 ; VAR_146 = VAR_147 ; for ( VAR_148 = VAR_149 ; VAR_150 < VAR_151 ; VAR_152 ++ ) { if ( VAR_153 -> VAR_154 [ VAR_155 ] == VAR_156 ) break ; METHOD_17 ( VAR_157 -> VAR_158 [ VAR_159 ] ) ; VAR_160 -> VAR_161 [ VAR_162 ] = VAR_163 ; } VAR_164 = VAR_165 ; } if ( VAR_166 == 0 ) break ; case VAR_167 : if ( VAR_168 > 1 && VAR_169 < VAR_170 ) METHOD_18 ( VAR_171 -> VAR_172 , VAR_173 -> VAR_174 [ VAR_175 - 1 ] , 1 ) ; for ( ; VAR_176 < VAR_177 && VAR_178 > 0 ; VAR_179 ++ , VAR_180 -- ) METHOD_19 ( VAR_181 , VAR_182 -> VAR_183 , VAR_184 , VAR_185 -> VAR_186 [ VAR_187 - 1 ] , VAR_188 ++ ) ; if ( VAR_189 == VAR_190 ) VAR_191 = VAR_192 ; if ( VAR_193 == 0 ) break ; case VAR_194 : METHOD_20 ( VAR_195 > VAR_196 ) ; METHOD_21 ( VAR_197 -> VAR_198 [ VAR_199 ] == VAR_200 ) ; METHOD_22 ( VAR_201 -> VAR_202 , VAR_203 -> VAR_204 [ VAR_205 ] , 1 ) ; VAR_206 = VAR_207 ; VAR_208 = METHOD_23 ( VAR_209 , VAR_210 ) ; VAR_211 = VAR_212 ; while ( VAR_213 -- > 0 ) * VAR_214 ++ = METHOD_24 ( VAR_215 ++ ) ;  break ;  } } while ( ( VAR_216 != VAR_217 ) || ! VAR_218 ) ; VAR_219 -> VAR_220 = VAR_221 ; METHOD_25 ( & VAR_222 -> VAR_223 , VAR_224 ) ; METHOD_26 ( VAR_225 , VAR_226 -> VAR_227 [ 0 ] -> VAR_228 ) ; METHOD_27 ( VAR_229 , STRUCT_OR_UNION_15 -> VAR_230 , VAR_231 ) ; VAR_232 -> VAR_233 = VAR_234 << STRUCT_OR_UNION_16 -> VAR_235 ; METHOD_28 ( VAR_236 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , ... ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; unsigned TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 , * VAR_11 ; TYPE_12 VAR_12 = 0 , VAR_13 ; VAR_14 = VAR_15 ; METHOD_1 ( VAR_16 , VAR_17 ) ; while ( ( VAR_18 = * VAR_19 ++ ) )  { switch ( VAR_20 )  { case '' : break ; case 'e' : VAR_21 -> VAR_22 = VAR_23 ; break ; case 'E' : VAR_24 -> VAR_25 = VAR_26 ; break ; case 't' : VAR_27 = VAR_28 ; break ; case 'T' : VAR_29 = VAR_30 ; break ; case 'm' : VAR_31 = METHOD_2 ( VAR_32 , unsigned TYPE_13 ) ; METHOD_3 ( VAR_33 , VAR_34 ) ; VAR_35 += 4 ; break ; case '1' : VAR_36 = METHOD_4 ( VAR_37 , unsigned TYPE_14 ) ; METHOD_5 ( VAR_38 , VAR_39 ) ; VAR_40 += 1 ; break ; case '2' : VAR_41 = METHOD_6 ( VAR_42 , unsigned TYPE_15 ) ; if ( VAR_43 -> VAR_44 == VAR_45 ) { METHOD_7 ( VAR_46 , VAR_47 ) ; } else { METHOD_8 ( VAR_48 , VAR_49 ) ; } ; VAR_50 += 2 ; break ; case '3' : VAR_51 = METHOD_9 ( VAR_52 , unsigned TYPE_16 ) ; if ( VAR_53 -> VAR_54 == VAR_55 ) { METHOD_10 ( VAR_56 , VAR_57 ) ; } else { METHOD_11 ( VAR_58 , VAR_59 ) ; } ; VAR_60 += 3 ; break ; case '4' : VAR_61 = METHOD_12 ( VAR_62 , unsigned TYPE_17 ) ; if ( VAR_63 -> VAR_64 == VAR_65 ) { METHOD_13 ( VAR_66 , VAR_67 ) ; } else { METHOD_14 ( VAR_68 , VAR_69 ) ; } ; VAR_70 += 4 ; break ; case '8' : VAR_71 = METHOD_15 ( VAR_72 , TYPE_18 ) ; if ( VAR_73 -> VAR_74 == VAR_75 && VAR_76 == VAR_77 ) { METHOD_16 ( VAR_78 , VAR_79 ) ; VAR_80 += 8 ; } else if ( VAR_81 -> VAR_82 == VAR_83 && VAR_84 == VAR_85 ) { METHOD_17 ( VAR_86 , VAR_87 ) ; VAR_88 += 8 ; } else if ( VAR_89 -> VAR_90 == VAR_91 && VAR_92 == VAR_93 ) { VAR_94 = VAR_95 & 0xFFFFFFFF ; METHOD_18 ( VAR_96 , VAR_97 ) ; VAR_98 += 4 ; } else if ( VAR_99 -> VAR_100 == VAR_101 && VAR_102 == VAR_103 ) { VAR_104 = VAR_105 & 0xFFFFFFFF ; METHOD_19 ( VAR_106 , VAR_107 ) ; VAR_108 += 4 ; } break ; case 'f' : VAR_109 = ( TYPE_19 ) METHOD_20 ( VAR_110 , TYPE_20 ) ; if ( VAR_111 -> VAR_112 == VAR_113 )  METHOD_21 ( VAR_114 , VAR_115 -> VAR_116 + VAR_117 -> VAR_118 ) ;  else  METHOD_22 ( VAR_119 , VAR_120 -> VAR_121 + VAR_122 -> VAR_123 ) ;  VAR_124 -> VAR_125 += 4 ; VAR_126 += 4 ; break ; case 'd' : VAR_127 = METHOD_23 ( VAR_128 , TYPE_21 ) ; if ( VAR_129 -> VAR_130 == VAR_131 )  METHOD_24 ( VAR_132 , VAR_133 -> VAR_134 + VAR_135 -> VAR_136 ) ;  else  METHOD_25 ( VAR_137 , VAR_138 -> VAR_139 + VAR_140 -> VAR_141 ) ;  VAR_142 -> VAR_143 += 8 ; VAR_144 += 8 ; break ; case 's' : VAR_145 = METHOD_26 ( VAR_146 , TYPE_22 * ) ; VAR_147 = METHOD_27 ( VAR_148 ) + 1 ;  VAR_149 += ( VAR_150 & 1 ) ;  if ( VAR_151 -> VAR_152 == VAR_153 ) METHOD_28 ( VAR_154 , VAR_155 ) ; else METHOD_29 ( VAR_156 , VAR_157 ) ;  METHOD_30 ( & ( VAR_158 -> VAR_159 [ VAR_160 -> VAR_161 ] ) , VAR_162 , VAR_163 ) ;   VAR_164 -> VAR_165 += VAR_166 ;   VAR_167 -> VAR_168 [ VAR_169 -> VAR_170 - 1 ] = 0 ;  VAR_171 += 4 + VAR_172 ; break ; case 'S' : VAR_173 = METHOD_31 ( VAR_174 , TYPE_23 * ) ; VAR_175 = METHOD_32 ( VAR_176 ) ;  if ( VAR_177 -> VAR_178 == VAR_179 )  METHOD_33 ( VAR_180 , VAR_181 ) ; else METHOD_34 ( VAR_182 , VAR_183 ) ;  METHOD_35 ( & ( VAR_184 -> VAR_185 [ VAR_186 -> VAR_187 ] ) , VAR_188 , VAR_189 + 1 ) ;  VAR_190 += ( VAR_191 & 1 ) ;  VAR_192 -> VAR_193 += VAR_194 ;   VAR_195 -> VAR_196 [ VAR_197 -> VAR_198 ] = 0 ;  VAR_199 += 4 + VAR_200 ; break ; case 'p' : VAR_201 = METHOD_36 ( VAR_202 , TYPE_24 * ) ; VAR_203 = METHOD_37 ( VAR_204 ) ; VAR_205 = ( VAR_206 & 1 ) ? VAR_207 : VAR_208 + 1 ; VAR_209 = ( VAR_210 > 254 ) ? 254 : VAR_211 ;  METHOD_38 ( VAR_212 , VAR_213 ) ;   METHOD_39 ( & ( VAR_214 -> VAR_215 [ VAR_216 -> VAR_217 ] ) , VAR_218 , VAR_219 ) ;   VAR_220 -> VAR_221 += VAR_222 ;  VAR_223 += 1 + VAR_224 ; break ; case 'b' : VAR_225 = METHOD_40 ( VAR_226 , TYPE_25 * ) ; VAR_227 = METHOD_41 ( VAR_228 , TYPE_26 ) ;  if ( VAR_229 -> VAR_230 + VAR_231 < sizeof ( VAR_232 -> VAR_233 ) )   { METHOD_42 ( & ( VAR_234 -> VAR_235 [ VAR_236 -> VAR_237 ] ) , VAR_238 , VAR_239 ) ;  VAR_240 -> VAR_241 += VAR_242 ; VAR_243 += VAR_244 ; } ; break ; case 'z' : VAR_245 = METHOD_43 ( VAR_246 , TYPE_27 ) ; VAR_247 += VAR_248 ; while ( VAR_249 ) { VAR_250 -> VAR_251 [ VAR_252 -> VAR_253 ] = 0 ;  VAR_254 -> VAR_255 ++ ;  VAR_256 -- ; } ; break ; case 'h' : VAR_257 = METHOD_44 ( VAR_258 , TYPE_28 * ) ;  METHOD_45 ( & ( VAR_259 -> VAR_260 [ VAR_261 -> VAR_262 ] ) , VAR_263 , 16 ) ;   VAR_264 -> VAR_265 += 16 ;  VAR_266 += 16 ; break ; case 'j' : VAR_267 = METHOD_46 ( VAR_268 , TYPE_29 ) ;  VAR_269 -> VAR_270 += VAR_271 ;  VAR_272 += VAR_273 ; break ; case 'o' : VAR_274 = METHOD_47 ( VAR_275 , TYPE_30 ) ;  if ( VAR_276 < sizeof ( VAR_277 -> VAR_278 ) )  { VAR_279 -> VAR_280 = VAR_281 ; VAR_282 = 0 ; } ; break ; default : METHOD_48 ( VAR_283 , "***Invalidformatspecifier`%c\'\\n" , VAR_284 ) ; VAR_285 -> VAR_286 = VAR_287 ; break ; } ; } ; METHOD_49 ( VAR_288 ) ; return VAR_289 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 , VAR_6 ;  if ( VAR_7 ) {  METHOD_1 ( KERN_INFO "cx24116:%s(" , VAR_8 ) ; for ( VAR_9 = 0 ; VAR_10 < VAR_11 -> VAR_12 ; ) { METHOD_2 ( KERN_INFO "0x%02x" , VAR_13 -> VAR_14 [ VAR_15 ] ) ; if ( ++ VAR_16 < VAR_17 -> VAR_18 ) METHOD_3 ( KERN_INFO "," ) ; } METHOD_4 ( ")toneburst=%d\\n" , VAR_19 ) ; }  if ( VAR_20 -> VAR_21 > ( VAR_22 - VAR_23 ) )  return - VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 -> VAR_28 ; VAR_29 ++ ) VAR_30 -> VAR_31 . VAR_32 [ VAR_33 + VAR_34 ] = VAR_35 -> VAR_36 [ VAR_37 ] ; VAR_38 -> VAR_39 . VAR_40 [ VAR_41 ] = VAR_42 -> VAR_43 ; VAR_44 -> VAR_45 . VAR_46 = VAR_47 + VAR_48 -> VAR_49 . VAR_50 [ VAR_51 ] ; if ( VAR_52 == VAR_53 ) return 0 ; else if ( VAR_54 == VAR_55 ) VAR_56 -> VAR_57 . VAR_58 [ VAR_59 ] = 0 ; else if ( VAR_60 == VAR_61 ) { if ( VAR_62 -> VAR_63 >= 4 && VAR_64 -> VAR_65 [ 2 ] == 0x38 ) VAR_66 -> VAR_67 . VAR_68 [ VAR_69 ] = ( ( VAR_70 -> VAR_71 [ 3 ] & 4 ) >> 2 ) ; if ( VAR_72 ) METHOD_5 ( "%sburst=%d\\n" , VAR_73 , VAR_74 -> VAR_75 . VAR_76 [ VAR_77 ] ) ; } VAR_78 = METHOD_6 ( VAR_79 ) ; if ( VAR_80 != 0 ) return VAR_81 ; METHOD_7 ( 100 ) ; VAR_82 = METHOD_8 ( VAR_83 , & VAR_84 -> VAR_85 ) ; if ( VAR_86 != 0 ) return VAR_87 ; METHOD_9 ( ( VAR_88 -> VAR_89 . VAR_90 [ VAR_91 ] << 4 ) + ( ( VAR_92 == VAR_93 ) ? 30 : 60 ) ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 TYPE_5 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = STRUCT_OR_UNION_3 -> VAR_4 ; struct STRUCT_OR_UNION_4 VAR_5 ; struct STRUCT_OR_UNION_5 VAR_6 ; TYPE_6 VAR_7 , VAR_8 = 0 ; METHOD_1 ( "sk%p" , VAR_9 ) ; if ( METHOD_2 ( VAR_10 , VAR_11 ) ) return - VAR_12 ; METHOD_3 ( VAR_13 ) ; switch ( VAR_14 ) { case VAR_15 : if ( VAR_16 -> VAR_17 != VAR_18 ) { VAR_19 = - VAR_20 ; break ; } VAR_21 . VAR_22 = METHOD_4 ( VAR_23 ) -> VAR_24 -> VAR_25 ; METHOD_5 ( "mtu%d" , VAR_26 . VAR_27 ) ; VAR_28 = min_t ( unsigned TYPE_7 , VAR_29 , sizeof ( VAR_30 ) ) ; if ( METHOD_6 ( VAR_31 , ( TYPE_8 * ) & VAR_32 , VAR_33 ) ) VAR_34 = - VAR_35 ; break ; case VAR_36 : if ( VAR_37 -> VAR_38 != VAR_39 ) { VAR_40 = - VAR_41 ; break ; }  VAR_42 . VAR_43 = METHOD_7 ( VAR_44 ) -> VAR_45 -> VAR_46 -> VAR_47 ;  METHOD_8 ( VAR_48 . VAR_49 , METHOD_9 ( VAR_50 ) -> VAR_51 -> VAR_52 -> VAR_53 , 3 ) ; VAR_54 = min_t ( unsigned TYPE_9 , VAR_55 , sizeof ( VAR_56 ) ) ; if ( METHOD_10 ( VAR_57 , ( TYPE_10 * ) & VAR_58 , VAR_59 ) ) VAR_60 = - VAR_61 ; break ; default : VAR_62 = - VAR_63 ; break ; } METHOD_11 ( VAR_64 ) ; return VAR_65 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 ; TYPE_13 VAR_27 , VAR_28 ; TYPE_14 VAR_29 ; unsigned TYPE_15 * VAR_30 , * VAR_31 ; METHOD_1 ( VAR_32 != ( const TYPE_16 * ) VAR_33 ) ; METHOD_2 ( VAR_34 -> VAR_35 == VAR_36 ) ; if ( VAR_37 -> VAR_38 != VAR_39 ) ( TYPE_17 ) METHOD_3 ( VAR_40 , METHOD_4 ( ) , "%s" , VAR_41 -> VAR_42 ) ; METHOD_5 ( VAR_43 != ( TYPE_18 * ) VAR_44 ) ; METHOD_6 ( VAR_45 -> VAR_46 == VAR_47 ) ; VAR_48 = METHOD_7 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_9 ( VAR_59 ) ; return ( ( TYPE_19 * ) VAR_60 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_61 , 0 , sizeof ( VAR_62 ) ) ; VAR_63 . VAR_64 = METHOD_11 ( VAR_65 ) ; do { if ( VAR_66 . VAR_67 != 0x59a66a95 ) METHOD_12 ( VAR_68 , "ImproperImageHeader" ) ; VAR_69 . VAR_70 = METHOD_13 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_14 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_15 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_16 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_17 ( VAR_83 ) ; VAR_84 . VAR_85 = METHOD_18 ( VAR_86 ) ; VAR_87 . VAR_88 = METHOD_19 ( VAR_89 ) ; VAR_90 = VAR_91 . VAR_92 * VAR_93 . VAR_94 ; if ( ( VAR_95 . VAR_96 != 0 ) && ( VAR_97 . VAR_98 != VAR_99 / VAR_100 . VAR_101 ) ) METHOD_20 ( VAR_102 , "ImproperImageHeader" ) ; if ( ( VAR_103 . VAR_104 != VAR_105 ) && ( VAR_106 . VAR_107 != VAR_108 ) && ( VAR_109 . VAR_110 != VAR_111 ) ) METHOD_21 ( VAR_112 , "ImproperImageHeader" ) ; if ( ( VAR_113 . VAR_114 == VAR_115 ) && ( VAR_116 . VAR_117 != 0 ) ) METHOD_22 ( VAR_118 , "ImproperImageHeader" ) ; if ( ( VAR_119 . VAR_120 == 0 ) || ( VAR_121 . VAR_122 > 32 ) ) METHOD_23 ( VAR_123 , "ImproperImageHeader" ) ; if ( ( VAR_124 . VAR_125 != VAR_126 ) && ( VAR_127 . VAR_128 != VAR_129 ) && ( VAR_130 . VAR_131 != VAR_132 ) ) METHOD_24 ( VAR_133 , "ColormapTypeNotSupported" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = VAR_144 . VAR_145 <= 8 ? VAR_146 . VAR_147 : VAR_148 ; if ( VAR_149 . VAR_150 < 24 ) { TYPE_21 VAR_151 ; VAR_152 -> VAR_153 = VAR_154 . VAR_155 ; VAR_156 = 1 ; if ( VAR_157 . VAR_158 == VAR_159 ) VAR_160 -> VAR_161 = VAR_162 << VAR_163 . VAR_164 ; if ( VAR_165 . VAR_166 == VAR_167 ) VAR_168 -> VAR_169 = VAR_170 . VAR_171 / 3 ; if ( METHOD_25 ( VAR_172 , VAR_173 -> VAR_174 , VAR_175 ) == VAR_176 ) METHOD_26 ( VAR_177 , "MemoryAllocationFailed" ) ; } switch ( VAR_178 . VAR_179 ) { case VAR_180 : break ; case VAR_181 : { unsigned TYPE_22 * VAR_182 ; VAR_183 = ( unsigned TYPE_23 * ) METHOD_27 ( VAR_184 -> VAR_185 , sizeof ( * VAR_186 ) ) ; if ( VAR_187 == ( unsigned TYPE_24 * ) VAR_188 ) METHOD_28 ( VAR_189 , "MemoryAllocationFailed" ) ; VAR_190 = METHOD_29 ( VAR_191 , VAR_192 -> VAR_193 , VAR_194 ) ; if ( VAR_195 != ( TYPE_25 ) VAR_196 -> VAR_197 ) METHOD_30 ( VAR_198 , "UnexpectedEndOfFile" ) ; for ( VAR_199 = 0 ; VAR_200 < ( TYPE_26 ) VAR_201 -> VAR_202 ; VAR_203 ++ ) VAR_204 -> VAR_205 [ VAR_206 ] . VAR_207 = ( TYPE_27 ) METHOD_31 ( VAR_208 [ VAR_209 ] ) ; VAR_210 = METHOD_32 ( VAR_211 , VAR_212 -> VAR_213 , VAR_214 ) ; if ( VAR_215 != ( TYPE_28 ) VAR_216 -> VAR_217 ) METHOD_33 ( VAR_218 , "UnexpectedEndOfFile" ) ; for ( VAR_219 = 0 ; VAR_220 < ( TYPE_29 ) VAR_221 -> VAR_222 ; VAR_223 ++ ) VAR_224 -> VAR_225 [ VAR_226 ] . VAR_227 = ( TYPE_30 ) METHOD_34 ( VAR_228 [ VAR_229 ] ) ; VAR_230 = METHOD_35 ( VAR_231 , VAR_232 -> VAR_233 , VAR_234 ) ; if ( VAR_235 != ( TYPE_31 ) VAR_236 -> VAR_237 ) METHOD_36 ( VAR_238 , "UnexpectedEndOfFile" ) ; for ( VAR_239 = 0 ; VAR_240 < ( TYPE_32 ) VAR_241 -> VAR_242 ; VAR_243 ++ ) VAR_244 -> VAR_245 [ VAR_246 ] . VAR_247 = ( TYPE_33 ) METHOD_37 ( VAR_248 [ VAR_249 ] ) ; VAR_250 = ( unsigned TYPE_34 * ) METHOD_38 ( VAR_251 ) ; break ; } case VAR_252 : { unsigned TYPE_35 * VAR_253 ; VAR_254 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_255 . VAR_256 , sizeof ( * VAR_257 ) ) ; if ( VAR_258 == ( unsigned TYPE_37 * ) VAR_259 ) METHOD_40 ( VAR_260 , "MemoryAllocationFailed" ) ; VAR_261 = METHOD_41 ( VAR_262 , VAR_263 . VAR_264 , VAR_265 ) ; if ( VAR_266 != ( TYPE_38 ) VAR_267 . VAR_268 ) METHOD_42 ( VAR_269 , "UnexpectedEndOfFile" ) ; VAR_270 = ( unsigned TYPE_39 * ) METHOD_43 ( VAR_271 ) ; break ; } default : METHOD_44 ( VAR_272 , "ColormapTypeNotSupported" ) ; } VAR_273 -> VAR_274 = VAR_275 . VAR_276 == 32 ? VAR_277 : VAR_278 ; VAR_279 -> VAR_280 = VAR_281 . VAR_282 ; VAR_283 -> VAR_284 = VAR_285 . VAR_286 ; if ( VAR_287 -> VAR_288 != VAR_289 ) { ( TYPE_40 ) METHOD_45 ( VAR_290 ) ; return ( METHOD_46 ( VAR_291 ) ) ; } VAR_292 = METHOD_47 ( VAR_293 , VAR_294 -> VAR_295 , VAR_296 -> VAR_297 , VAR_298 ) ; if ( VAR_299 == VAR_300 ) return ( METHOD_48 ( VAR_301 ) ) ; if ( ( VAR_302 . VAR_303 * sizeof ( * VAR_304 ) ) / sizeof ( * VAR_305 ) != VAR_306 . VAR_307 || ! VAR_308 . VAR_309 ) METHOD_49 ( VAR_310 , "MemoryAllocationFailed" ) ; VAR_311 = ( TYPE_41 ) VAR_312 -> VAR_313 * VAR_314 -> VAR_315 ;  if ( ( VAR_316 . VAR_317 != VAR_318 ) && ( VAR_319 . VAR_320 >= 8 ) &&   ( ( VAR_321 * ( ( VAR_322 . VAR_323 + 7 ) / 8 ) ) > VAR_324 . VAR_325 ) )  METHOD_50 ( VAR_326 , "ImproperImageHeader" ) ; VAR_327 = VAR_328 . VAR_329 * VAR_330 . VAR_331 ; VAR_332 = ( unsigned TYPE_42 * ) METHOD_51 ( ( TYPE_43 ) METHOD_52 ( VAR_333 . VAR_334 , VAR_335 * VAR_336 . VAR_337 ) , sizeof ( * VAR_338 ) ) ; if ( VAR_339 == ( unsigned TYPE_44 * ) VAR_340 ) METHOD_53 ( VAR_341 , "MemoryAllocationFailed" ) ; VAR_342 = ( TYPE_45 ) METHOD_54 ( VAR_343 , VAR_344 . VAR_345 , VAR_346 ) ; if ( VAR_347 != ( TYPE_46 ) VAR_348 . VAR_349 ) METHOD_55 ( VAR_350 , "UnableToReadImageData" ) ; VAR_351 = VAR_352 ; VAR_353 = 0 ; if ( VAR_354 . VAR_355 == VAR_356 ) { TYPE_47 VAR_357 ; VAR_358 = VAR_359 . VAR_360 ; if ( ( VAR_361 == 0 ) || ( VAR_362 . VAR_363 == 0 ) || ( VAR_364 . VAR_365 == 0 ) || ( ( VAR_366 / VAR_367 . VAR_368 ) != VAR_369 . VAR_370 ) ) METHOD_56 ( VAR_371 , "MemoryAllocationFailed" ) ; VAR_372 += 15 ; VAR_373 <<= 1 ; if ( ( VAR_374 >> 1 ) != ( VAR_375 . VAR_376 * VAR_377 . VAR_378 + 15 ) ) METHOD_57 ( VAR_379 , "MemoryAllocationFailed" ) ; VAR_380 >>= 4 ; VAR_381 = ( unsigned TYPE_48 * ) METHOD_58 ( VAR_382 , VAR_383 * sizeof ( * VAR_384 ) ) ; if ( VAR_385 == ( unsigned TYPE_49 * ) VAR_386 ) METHOD_59 ( VAR_387 , "MemoryAllocationFailed" ) ; ( TYPE_50 ) METHOD_60 ( VAR_388 , VAR_389 . VAR_390 , VAR_391 , VAR_392 * VAR_393 ) ; VAR_394 = ( unsigned TYPE_51 * ) METHOD_61 ( VAR_395 ) ; } VAR_396 = VAR_397 ; if ( VAR_398 . VAR_399 == 1 ) for ( VAR_400 = 0 ; VAR_401 < ( TYPE_52 ) VAR_402 -> VAR_403 ; VAR_404 ++ ) { VAR_405 = METHOD_62 ( VAR_406 , 0 , VAR_407 , VAR_408 -> VAR_409 , 1 , VAR_410 ) ; if ( VAR_411 == ( TYPE_53 * ) VAR_412 ) break ; for ( VAR_413 = 0 ; VAR_414 < ( ( TYPE_54 ) VAR_415 -> VAR_416 - 7 ) ; VAR_417 += 8 ) { for ( VAR_418 = 7 ; VAR_419 >= 0 ; VAR_420 -- ) { METHOD_63 ( VAR_421 , ( TYPE_55 ) ( ( * VAR_422 ) & ( 0x01 << VAR_423 ) ? 0x00 : 0x01 ) , VAR_424 ) ; VAR_425 += METHOD_64 ( VAR_426 ) ; } VAR_427 ++ ; } if ( ( VAR_428 -> VAR_429 % 8 ) != 0 ) { for ( VAR_430 = 7 ; VAR_431 >= ( TYPE_56 ) ( 8 - ( VAR_432 -> VAR_433 % 8 ) ) ; VAR_434 -- ) { METHOD_65 ( VAR_435 , ( TYPE_57 ) ( ( * VAR_436 ) & ( 0x01 << VAR_437 ) ? 0x00 : 0x01 ) , VAR_438 ) ; VAR_439 += METHOD_66 ( VAR_440 ) ; } VAR_441 ++ ; } if ( ( ( ( VAR_442 -> VAR_443 / 8 ) + ( VAR_444 -> VAR_445 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_446 ++ ; if ( METHOD_67 ( VAR_447 , VAR_448 ) == VAR_449 ) break ; if ( VAR_450 -> VAR_451 == ( TYPE_58 * ) VAR_452 ) { VAR_453 = METHOD_68 ( VAR_454 , VAR_455 , ( TYPE_59 ) VAR_456 , VAR_457 -> VAR_458 ) ; if ( VAR_459 == VAR_460 ) break ; } } else if ( VAR_461 -> VAR_462 == VAR_463 ) { if ( VAR_464 == 0 ) VAR_465 = VAR_466 -> VAR_467 ; VAR_468 = VAR_469 -> VAR_470 * ( VAR_471 -> VAR_472 + VAR_473 -> VAR_474 % 2 ) ; if ( ( ( VAR_475 . VAR_476 == VAR_477 ) && ( VAR_478 > ( VAR_479 * VAR_480 -> VAR_481 ) ) ) || ( ( VAR_482 . VAR_483 != VAR_484 ) && ( VAR_485 > VAR_486 . VAR_487 ) ) ) METHOD_69 ( VAR_488 , "UnableToReadImageData" ) ; for ( VAR_489 = 0 ; VAR_490 < ( TYPE_60 ) VAR_491 -> VAR_492 ; VAR_493 ++ ) { VAR_494 = METHOD_70 ( VAR_495 , 0 , VAR_496 , VAR_497 -> VAR_498 , 1 , VAR_499 ) ; if ( VAR_500 == ( TYPE_61 * ) VAR_501 ) break ; for ( VAR_502 = 0 ; VAR_503 < ( TYPE_62 ) VAR_504 -> VAR_505 ; VAR_506 ++ ) { METHOD_71 ( VAR_507 , * VAR_508 ++ , VAR_509 ) ; VAR_510 += METHOD_72 ( VAR_511 ) ; } if ( ( VAR_512 -> VAR_513 % 2 ) != 0 ) VAR_514 ++ ; if ( METHOD_73 ( VAR_515 , VAR_516 ) == VAR_517 ) break ; if ( VAR_518 -> VAR_519 == ( TYPE_63 * ) VAR_520 ) { VAR_521 = METHOD_74 ( VAR_522 , VAR_523 , ( TYPE_64 ) VAR_524 , VAR_525 -> VAR_526 ) ; if ( VAR_527 == VAR_528 ) break ; } } } else { TYPE_65 VAR_529 ; VAR_530 = 3 ; if ( VAR_531 -> VAR_532 != VAR_533 ) VAR_534 ++ ; if ( VAR_535 == 0 ) VAR_536 = VAR_537 * VAR_538 -> VAR_539 ;  VAR_540 = VAR_541 -> VAR_542 * ( VAR_543 + VAR_544 -> VAR_545 % 2 ) ;  if ( ( ( VAR_546 . VAR_547 == VAR_548 ) && ( VAR_549 > ( VAR_550 * VAR_551 -> VAR_552 ) ) ) || ( ( VAR_553 . VAR_554 != VAR_555 ) && ( VAR_556 > VAR_557 . VAR_558 ) ) ) METHOD_75 ( VAR_559 , "UnableToReadImageData" ) ; for ( VAR_560 = 0 ; VAR_561 < ( TYPE_66 ) VAR_562 -> VAR_563 ; VAR_564 ++ ) { VAR_565 = METHOD_76 ( VAR_566 , 0 , VAR_567 , VAR_568 -> VAR_569 , 1 , VAR_570 ) ; if ( VAR_571 == ( TYPE_67 * ) VAR_572 ) break ; for ( VAR_573 = 0 ; VAR_574 < ( TYPE_68 ) VAR_575 -> VAR_576 ; VAR_577 ++ ) { if ( VAR_578 -> VAR_579 != VAR_580 ) METHOD_77 ( VAR_581 , METHOD_78 ( * VAR_582 ++ ) , VAR_583 ) ; if ( VAR_584 . VAR_585 == VAR_586 ) { METHOD_79 ( VAR_587 , METHOD_80 ( * VAR_588 ++ ) , VAR_589 ) ; METHOD_81 ( VAR_590 , METHOD_82 ( * VAR_591 ++ ) , VAR_592 ) ; METHOD_83 ( VAR_593 , METHOD_84 ( * VAR_594 ++ ) , VAR_595 ) ; } else { METHOD_85 ( VAR_596 , METHOD_86 ( * VAR_597 ++ ) , VAR_598 ) ; METHOD_87 ( VAR_599 , METHOD_88 ( * VAR_600 ++ ) , VAR_601 ) ; METHOD_89 ( VAR_602 , METHOD_90 ( * VAR_603 ++ ) , VAR_604 ) ; } if ( VAR_605 -> VAR_606 != 0 ) { METHOD_91 ( VAR_607 , METHOD_92 ( VAR_608 -> VAR_609 [ ( TYPE_69 ) METHOD_93 ( VAR_610 , VAR_611 ) ] . VAR_612 ) , VAR_613 ) ; METHOD_94 ( VAR_614 , METHOD_95 ( VAR_615 -> VAR_616 [ ( TYPE_70 ) METHOD_96 ( VAR_617 , VAR_618 ) ] . VAR_619 ) , VAR_620 ) ; METHOD_97 ( VAR_621 , METHOD_98 ( VAR_622 -> VAR_623 [ ( TYPE_71 ) METHOD_99 ( VAR_624 , VAR_625 ) ] . VAR_626 ) , VAR_627 ) ; } VAR_628 += METHOD_100 ( VAR_629 ) ; } if ( ( ( VAR_630 * VAR_631 -> VAR_632 ) % 2 ) != 0 ) VAR_633 ++ ; if ( METHOD_101 ( VAR_634 , VAR_635 ) == VAR_636 ) break ; if ( VAR_637 -> VAR_638 == ( TYPE_72 * ) VAR_639 ) { VAR_640 = METHOD_102 ( VAR_641 , VAR_642 , ( TYPE_73 ) VAR_643 , VAR_644 -> VAR_645 ) ; if ( VAR_646 == VAR_647 ) break ; } } } if ( VAR_648 -> VAR_649 == VAR_650 ) ( TYPE_74 ) METHOD_103 ( VAR_651 , VAR_652 ) ; VAR_653 = ( unsigned TYPE_75 * ) METHOD_104 ( VAR_654 ) ; if ( METHOD_105 ( VAR_655 ) != VAR_656 ) { METHOD_106 ( VAR_657 , VAR_658 , "UnexpectedEndOfFile" , VAR_659 -> VAR_660 ) ; break ; } if ( VAR_661 -> VAR_662 != 0 ) if ( VAR_663 -> VAR_664 >= ( VAR_665 -> VAR_666 + VAR_667 -> VAR_668 - 1 ) ) break ; VAR_669 . VAR_670 = METHOD_107 ( VAR_671 ) ; if ( VAR_672 . VAR_673 == 0x59a66a95 ) { METHOD_108 ( VAR_674 , VAR_675 , VAR_676 ) ; if ( METHOD_109 ( VAR_677 ) == ( TYPE_76 * ) VAR_678 ) { VAR_679 = METHOD_110 ( VAR_680 ) ; return ( ( TYPE_77 * ) VAR_681 ) ; } VAR_682 = METHOD_111 ( VAR_683 ) ; VAR_684 = METHOD_112 ( VAR_685 , VAR_686 , METHOD_113 ( VAR_687 ) , METHOD_114 ( VAR_688 ) ) ; if ( VAR_689 == VAR_690 ) break ; } } while ( VAR_691 . VAR_692 == 0x59a66a95 ) ; ( TYPE_78 ) METHOD_115 ( VAR_693 ) ; return ( METHOD_116 ( VAR_694 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * * VAR_4 ) { union STRUCT_OR_UNION_1 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_5 VAR_8 [ VAR_9 ] ; TYPE_6 VAR_10 ;  TYPE_7 VAR_11 ;  TYPE_8 VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_9 VAR_17 [ 10 ] , VAR_18 [ 10 ] ; TYPE_10 VAR_19 , VAR_20 ; TYPE_11 * VAR_21 ; if ( METHOD_1 ( VAR_22 , VAR_23 , VAR_24 ) == VAR_25 ) { * VAR_26 = METHOD_2 ( VAR_27 , VAR_28 ) ; if ( * VAR_29 == 0 ) { * VAR_30 = VAR_31 ; } return VAR_32 ; } VAR_33 = METHOD_3 ( VAR_34 , "%9d]%2d:%2d:%2d.%9d%9s%9s" , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 , & VAR_39 , VAR_40 , VAR_41 ) ; if ( VAR_42 != 7 ) { * VAR_43 = VAR_44 ; * VAR_45 = METHOD_4 ( "toshiba:recordheaderisn\'tvalid" ) ; return VAR_46 ; } do { if ( METHOD_5 ( VAR_47 , VAR_48 , VAR_49 ) == VAR_50 ) { * VAR_51 = METHOD_6 ( VAR_52 , VAR_53 ) ; if ( * VAR_54 == 0 ) { * VAR_55 = VAR_56 ; } return VAR_57 ; } VAR_58 [ 16 ] = '\\0' ; } while ( METHOD_7 ( VAR_59 , "OFFSET0001-0203" ) != 0 ) ;  VAR_60 = METHOD_8 ( VAR_61 + 64 , "LEN=%9u" , & VAR_62 ) ;  if ( VAR_63 != 1 ) { * VAR_64 = VAR_65 ;  * VAR_66 = METHOD_9 ( "toshiba:OFFSETlinedoesn\'thavevalidLENitem" ) ;  return VAR_67 ; } if ( VAR_68 > VAR_69 ) { * VAR_70 = VAR_71 ; * VAR_72 = METHOD_10 ( "toshiba:Filehas%u-bytepacket,biggerthanmaximumof%u" , VAR_73 , VAR_74 ) ; return VAR_75 ; } VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = VAR_81 | VAR_82 ; VAR_83 -> VAR_84 . VAR_85 = VAR_86 * 3600 + VAR_87 * 60 + VAR_88 ; VAR_89 -> VAR_90 . VAR_91 = VAR_92 * 10000000 ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; switch ( VAR_99 [ 0 ] ) { case 'B' : VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> VAR_104 . VAR_105 = ( VAR_106 [ 0 ] == 'T' ) ; VAR_107 -> VAR_108 . VAR_109 = ( TYPE_12 ) METHOD_11 ( & VAR_110 [ 1 ] , VAR_111 , 10 ) ; break ; case 'D' : VAR_112 -> VAR_113 = VAR_114 ; VAR_115 -> VAR_116 . VAR_117 = ( VAR_118 [ 0 ] == 'T' ) ; VAR_119 -> VAR_120 . VAR_121 = 0 ; break ; default : VAR_122 -> VAR_123 = VAR_124 ; VAR_125 -> VAR_126 . VAR_127 = - 1 ; break ; } METHOD_12 ( VAR_128 , VAR_129 ) ; VAR_130 = METHOD_13 ( VAR_131 ) ; VAR_132 = VAR_133 / 16 + ( ( VAR_134 % 16 ) ? 1 : 0 ) ; for ( VAR_135 = 0 ; VAR_136 < VAR_137 ; VAR_138 ++ ) { if ( METHOD_14 ( VAR_139 , VAR_140 , VAR_141 ) == VAR_142 ) { * VAR_143 = METHOD_15 ( VAR_144 , VAR_145 ) ; if ( * VAR_146 == 0 ) { * VAR_147 = VAR_148 ; } return VAR_149 ; } if ( ! METHOD_16 ( VAR_150 , VAR_151 , VAR_152 * 16 ) ) { * VAR_153 = VAR_154 ; * VAR_155 = METHOD_17 ( "toshiba:hexdumpnotvalid" ) ; return VAR_156 ; } } return VAR_157 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = METHOD_1 ( VAR_10 ) ; unsigned TYPE_4 VAR_11 , VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 , * VAR_14 , * VAR_15 ;  TYPE_5 VAR_16 = 0 ;  if ( ( VAR_17 -> VAR_18 == VAR_19 ) && METHOD_2 ( & VAR_20 -> VAR_21 ) && METHOD_3 ( & VAR_22 -> VAR_23 ) && METHOD_4 ( & VAR_24 -> VAR_25 . VAR_26 ) ) return 0 ; if ( VAR_27 & ( VAR_28 ) ) return - VAR_29 ; VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , VAR_33 , & VAR_34 ) ; if ( ! VAR_35 ) { if ( VAR_36 -> VAR_37 & VAR_38 ) return 0 ; return VAR_39 ; } VAR_40 = VAR_41 -> VAR_42 ; VAR_43 = min_t ( unsigned TYPE_6 , VAR_44 , VAR_45 ) ; if ( ! VAR_46 ) VAR_47 -> VAR_48 = VAR_49 -> VAR_50 | VAR_51 ; VAR_52 = VAR_53 ; if ( METHOD_6 ( VAR_54 , 0 , VAR_55 -> VAR_56 , VAR_57 ) ) { if ( ! ( VAR_58 & VAR_59 ) ) METHOD_7 ( & VAR_60 -> VAR_61 , VAR_62 ) ; return - VAR_63 ; } if ( VAR_64 -> VAR_65 == VAR_66 ) { if ( VAR_67 < VAR_68 ) VAR_69 -> VAR_70 |= VAR_71 ; VAR_72 -> VAR_73 |= VAR_74 ; } VAR_75 = METHOD_8 ( VAR_76 , VAR_77 , VAR_78 , VAR_79 , METHOD_9 ( VAR_80 ) ) ; if ( VAR_81 ) { if ( ! ( VAR_82 & VAR_83 ) ) METHOD_10 ( & VAR_84 -> VAR_85 , VAR_86 ) ; return VAR_87 ; } if ( ! ( VAR_88 & VAR_89 ) ) { if ( VAR_90 -> VAR_91 == VAR_92 ) { METHOD_11 ( VAR_93 , VAR_94 ) ; if ( VAR_95 -> VAR_96 ) { METHOD_12 ( & VAR_97 -> VAR_98 , VAR_99 ) ; goto VAR_100 ; } } METHOD_13 ( VAR_101 ) ; if ( VAR_102 -> VAR_103 == VAR_104 ) { METHOD_14 ( & VAR_105 -> VAR_106 ) ; if ( METHOD_15 ( & VAR_107 -> VAR_108 ) > VAR_109 -> VAR_110 ) { METHOD_16 ( 1 ) ; METHOD_17 ( VAR_111 ) ; return - VAR_112 ; } } METHOD_18 ( & VAR_113 -> VAR_114 . VAR_115 ) ; VAR_116 = METHOD_19 ( & VAR_117 -> VAR_118 ) ; while ( VAR_119 ) { if ( METHOD_20 ( VAR_120 , VAR_121 ) ) { METHOD_21 ( & VAR_122 -> VAR_123 , VAR_124 ) ; break ; } else { VAR_125 = METHOD_22 ( & VAR_126 -> VAR_127 ) ; } } if ( METHOD_23 ( & VAR_128 -> VAR_129 ) ) { if ( ! METHOD_24 ( & VAR_130 -> VAR_131 . VAR_132 ) ) METHOD_25 ( VAR_133 ) ; if ( METHOD_26 ( & VAR_134 -> VAR_135 ) >= VAR_136 -> VAR_137 / 2 ) { VAR_138 = METHOD_27 ( VAR_139 , VAR_140 ) ; if ( VAR_141 ) { VAR_142 -> VAR_143 = VAR_144 ; VAR_145 -> METHOD_28 ( VAR_146 ) ; } } } METHOD_29 ( & VAR_147 -> VAR_148 . VAR_149 ) ; } VAR_150 : if ( VAR_151 -> VAR_152 == VAR_153 && ( VAR_154 & VAR_155 ) ) VAR_156 = VAR_157 ; return VAR_158 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 [ VAR_3 + 1 ] ; struct STRUCT_OR_UNION_3 VAR_4 ; TYPE_1 VAR_5 ; if ( ! VAR_6 [ VAR_7 ] ) return - VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 [ VAR_13 ] , VAR_14 ) ; if ( VAR_15 ) return VAR_16 ; VAR_17 . VAR_18 = METHOD_2 ( VAR_19 [ VAR_20 ] ) ; VAR_21 . VAR_22 = METHOD_3 ( METHOD_4 ( VAR_23 [ VAR_24 ] ) ) ;  METHOD_5 ( VAR_25 . VAR_26 , METHOD_6 ( VAR_27 [ VAR_28 ] ) ) ;  return METHOD_7 ( VAR_29 -> VAR_30 , VAR_31 , & VAR_32 , sizeof ( VAR_33 ) ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; TYPE_2 VAR_4 , VAR_5 ; if ( ! VAR_6 ) return - VAR_7 ;  VAR_8 -> VAR_9 = VAR_10 ;  switch ( VAR_11 -> VAR_12 ) { case 1 : VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; break ; case 2 : VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 ; break ; case 4 : VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; break ; TYPE_3 TYPE_4 case 8 : VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = VAR_36 ; break ; default : METHOD_1 ( VAR_37 -> VAR_38 , "Invalidregistersize:%d\\n" , VAR_39 -> VAR_40 ) ; return - VAR_41 ; } for ( VAR_42 = 0 ; VAR_43 < VAR_44 -> VAR_45 ; VAR_46 ++ ) { if ( METHOD_2 ( VAR_47 + VAR_48 * VAR_49 -> VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) == VAR_54 ) { METHOD_3 ( VAR_55 , VAR_56 ) ; return - VAR_57 ; } } VAR_58 = ( ( VAR_59 -> VAR_60 * VAR_61 -> VAR_62 ) - ( VAR_63 -> VAR_64 - VAR_65 -> VAR_66 ) ) ; VAR_67 -> VAR_68 = METHOD_4 ( VAR_69 , VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 ) { METHOD_5 ( VAR_74 , VAR_75 -> VAR_76 ) ; return - VAR_77 ; }  return 0 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 , * VAR_5 ; TYPE_3 VAR_6 = 0 , VAR_7 ; TYPE_4 VAR_8 = VAR_9 ; VAR_10 : VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( VAR_14 ) return VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; if ( VAR_19 ) return VAR_20 ; METHOD_3 ( VAR_21 , VAR_22 ) ; do { if ( ! VAR_23 -> VAR_24 ) { METHOD_4 ( VAR_25 , VAR_26 , 0 ) ; if ( ! VAR_27 ) VAR_28 = - VAR_29 ; break ; } if ( ! VAR_30 -> VAR_31 && ! VAR_32 -> VAR_33 ) break ; if ( ! VAR_34 -> VAR_35 || VAR_36 -> VAR_37 >= VAR_38 -> VAR_39 ) { if ( VAR_40 ) break ; if ( VAR_41 & VAR_42 ) { VAR_43 = - VAR_44 ; break ; } METHOD_5 ( VAR_45 ) ; METHOD_6 ( VAR_46 ) ; goto VAR_47 ; } VAR_48 = VAR_49 -> VAR_50 + VAR_51 -> VAR_52 ; VAR_53 = ( VAR_54 -> VAR_55 + VAR_56 -> VAR_57 ) & ( VAR_58 -> VAR_59 - 1 ) ; VAR_60 = VAR_61 -> VAR_62 + VAR_63 ; if ( VAR_64 >= VAR_65 -> VAR_66 ) { * VAR_67 = * VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 ++ ; VAR_74 -> VAR_75 = ( VAR_76 -> VAR_77 + 1 ) & ( VAR_78 -> VAR_79 - 1 ) ; VAR_80 -> VAR_81 -- ; VAR_82 = VAR_83 ; } else {  METHOD_7 ( VAR_84 , VAR_85 ) ;  * VAR_86 = * VAR_87 ; VAR_88 -> VAR_89 &= ~ VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 ++ ; VAR_96 -> VAR_97 += VAR_98 -> VAR_99 ; VAR_100 -> VAR_101 -= VAR_102 -> VAR_103 ; } VAR_104 += VAR_105 -> VAR_106 ; VAR_107 -= VAR_108 -> VAR_109 ; } while ( VAR_110 ) ; METHOD_8 ( VAR_111 ) ; METHOD_9 ( VAR_112 ) ; if ( VAR_113 > 0 ) METHOD_10 ( VAR_114 ) ; if ( VAR_115 ) METHOD_11 ( VAR_116 ) ; return VAR_117 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 -> VAR_3 <= VAR_4 -> VAR_5 ) ;  if ( VAR_6 -> VAR_7 == VAR_8 -> VAR_9 ) {  VAR_10 -> VAR_11 = VAR_12 -> VAR_13 * 2 + 256 ; VAR_14 -> VAR_15 = METHOD_2 ( VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ) ; } METHOD_3 ( VAR_20 -> VAR_21 < VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 [ VAR_26 -> VAR_27 ++ ] = VAR_28 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  switch ( VAR_1 ) { case VAR_2 :  return VAR_3 ;  case VAR_4 :  return VAR_5 ;  case VAR_6 :  return VAR_7 ;  default :  return VAR_8 ;  } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 ) ; VAR_4 -> VAR_5 = VAR_6 | VAR_7 ;  VAR_8 -> VAR_9 = VAR_10 ;  VAR_11 -> VAR_12 = & VAR_13 ; VAR_14 -> VAR_15 = 30 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = - 1 ; VAR_30 -> VAR_31 = - 1 ; VAR_32 -> VAR_33 = - 1 ; VAR_34 -> VAR_35 = - 1 ; VAR_36 -> VAR_37 = - 1 ; VAR_38 -> VAR_39 = - 1 ; VAR_40 -> VAR_41 = - 1 ; METHOD_3 ( & VAR_42 -> VAR_43 ) ; VAR_44 -> VAR_45 = VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = 6000 ; VAR_52 -> VAR_53 = 10 * VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = 10 ; VAR_60 -> VAR_61 = 1 ; VAR_62 -> VAR_63 = VAR_64 | VAR_65 ; VAR_66 -> VAR_67 = 25 ; VAR_68 -> VAR_69 = - 1 ; VAR_70 -> VAR_71 = 5 * VAR_72 ; VAR_73 -> VAR_74 = 0 ; VAR_75 -> VAR_76 = 0 ; }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { TYPE_3 * VAR_1 = VAR_2 -> VAR_3 ; VAR_4 * VAR_5 ; unsigned TYPE_4 VAR_6 ; unsigned TYPE_5 VAR_7 = 0 ; unsigned TYPE_6 VAR_8 = 0 ; unsigned TYPE_7 VAR_9 ; unsigned TYPE_8 VAR_10 ; unsigned TYPE_9 VAR_11 ; unsigned TYPE_10 VAR_12 ; unsigned TYPE_11 VAR_13 ; unsigned TYPE_12 VAR_14 ; unsigned TYPE_13 VAR_15 = 11025 ; unsigned TYPE_14 VAR_16 = 1103 ; unsigned TYPE_15 * VAR_17 = VAR_18 ; TYPE_16 * VAR_19 = VAR_20 ; TYPE_17 * VAR_21 = VAR_22 ; TYPE_18 VAR_23 ; TYPE_19 VAR_24 = 0 ; METHOD_1 ( VAR_25 , 4 ) ; VAR_26 = METHOD_2 ( VAR_27 ) ; VAR_28 = METHOD_3 ( VAR_29 ) ; METHOD_4 ( VAR_30 , 4 ) ; VAR_31 = METHOD_5 ( VAR_32 ) ; if ( VAR_33 > VAR_34 / 2 || VAR_35 > VAR_36 / sizeof ( VAR_37 ) ) return VAR_38 ; METHOD_6 ( VAR_39 , 2 ) ; VAR_40 = METHOD_7 ( VAR_41 ) ; VAR_42 = METHOD_8 ( VAR_43 ) ; VAR_44 = METHOD_9 ( VAR_45 ) ; VAR_46 = METHOD_10 ( VAR_47 ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; if ( ! VAR_51 ) return METHOD_12 ( VAR_52 ) ; VAR_53 -> VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 -> VAR_63 = 0 ; VAR_64 -> VAR_65 -> VAR_66 = 320 ; VAR_67 -> VAR_68 -> VAR_69 = 200 ; VAR_70 -> VAR_71 -> VAR_72 = VAR_73 ; if ( VAR_74 == VAR_75 && VAR_76 > 0 ) VAR_77 -> VAR_78 -> VAR_79 += VAR_80 ; if ( METHOD_13 ( VAR_81 , VAR_82 -> VAR_83 , VAR_84 , VAR_85 -> VAR_86 -> VAR_87 ) < 0 ) return METHOD_14 ( VAR_88 ) ; if ( VAR_89 ) { if ( ! VAR_90 || VAR_91 > 42 ) { METHOD_15 ( VAR_92 , VAR_93 , "Invalidnumberofchannels:%d\\n" , VAR_94 ) ; return VAR_95 ; } VAR_96 = VAR_97 ; VAR_98 = VAR_99 ; VAR_100 = METHOD_16 ( VAR_101 , VAR_102 ) ; if ( ! VAR_103 ) return METHOD_17 ( VAR_104 ) ; VAR_105 -> VAR_106 -> VAR_107 = VAR_108 ; VAR_109 -> VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 -> VAR_115 = 1 ; VAR_116 -> VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 -> VAR_122 = 8 ; VAR_123 -> VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = VAR_130 -> VAR_131 -> VAR_132 * VAR_133 -> VAR_134 -> VAR_135 * VAR_136 -> VAR_137 -> VAR_138 ; VAR_139 -> VAR_140 -> VAR_141 = VAR_142 -> VAR_143 -> VAR_144 * VAR_145 -> VAR_146 -> VAR_147 / 8 ; METHOD_18 ( VAR_148 , 32 , 1 , VAR_149 ) ; } METHOD_19 ( VAR_150 -> VAR_151 [ 0 ] , 32 , VAR_152 , VAR_153 ) ; VAR_154 = METHOD_20 ( VAR_155 * sizeof ( VAR_156 ) ) ; VAR_157 = METHOD_21 ( VAR_158 * sizeof ( VAR_159 ) ) ; VAR_160 = METHOD_22 ( VAR_161 * sizeof ( VAR_162 ) ) ; if ( ! VAR_163 || ! VAR_164 || ! VAR_165 ) { METHOD_23 ( VAR_166 ) ; METHOD_24 ( VAR_167 ) ; METHOD_25 ( VAR_168 ) ; return METHOD_26 ( VAR_169 ) ; }  for ( VAR_170 = 0 ; VAR_171 < VAR_172 ; VAR_173 ++ )   VAR_174 [ VAR_175 ] = METHOD_27 ( VAR_176 ) ;   for ( VAR_177 = 0 ; VAR_178 < VAR_179 ; VAR_180 ++ )   VAR_181 [ VAR_182 ] = METHOD_28 ( VAR_183 ) ;   for ( VAR_184 = 0 ; VAR_185 < VAR_186 ; VAR_187 ++ )  VAR_188 [ VAR_189 ] = METHOD_29 ( VAR_190 ) & 0xFFFF ;  for ( VAR_191 = 0 ; VAR_192 < VAR_193 ; VAR_194 ++ ) {  if ( VAR_195 [ VAR_196 ] < 0 || VAR_197 [ VAR_198 ] > VAR_199 [ VAR_200 ] ) { VAR_201 = VAR_202 ; break ; } if ( VAR_203 && VAR_204 [ VAR_205 ] ) { METHOD_30 ( VAR_206 -> VAR_207 [ 1 ] , VAR_208 [ VAR_209 ] , VAR_210 , VAR_211 [ VAR_212 ] , 0 , VAR_213 ) ; VAR_214 += VAR_215 [ VAR_216 ] / VAR_217 ; } METHOD_31 ( VAR_218 -> VAR_219 [ 0 ] , VAR_220 [ VAR_221 ] + VAR_222 [ VAR_223 ] , VAR_224 , VAR_225 [ VAR_226 ] - VAR_227 [ VAR_228 ] , 0 , VAR_229 ) ; ++ VAR_230 ; } METHOD_32 ( VAR_231 ) ; METHOD_33 ( VAR_232 ) ; METHOD_34 ( VAR_233 ) ; return VAR_234 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( ! VAR_6 -> VAR_7 ) { VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] ; goto VAR_13 ; } else { TYPE_5 VAR_14 , VAR_15 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 -> VAR_25 ; VAR_26 ++ ) { VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 ] ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 -> VAR_34 ; VAR_35 ++ ) { TYPE_6 VAR_36 , VAR_37 ; VAR_38 = & VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 = VAR_43 -> VAR_44 * ( 1u << ( VAR_45 -> VAR_46 + VAR_47 -> VAR_48 - 1 - VAR_49 ) ) ; VAR_50 = VAR_51 -> VAR_52 * ( 1u << ( VAR_53 -> VAR_54 + VAR_55 -> VAR_56 - 1 - VAR_57 ) ) ; VAR_58 -> VAR_59 = ! VAR_60 -> VAR_61 ? VAR_62 : METHOD_1 ( VAR_63 -> VAR_64 , VAR_65 ) ; VAR_66 -> VAR_67 = ! VAR_68 -> VAR_69 ? VAR_70 : METHOD_2 ( VAR_71 -> VAR_72 , VAR_73 ) ; } } } if ( ! VAR_74 -> VAR_75 ) { VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; VAR_81 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = VAR_94 -> VAR_95 ; } for ( VAR_96 -> VAR_97 = VAR_98 -> VAR_99 . VAR_100 ; VAR_101 -> VAR_102 < VAR_103 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 += ( TYPE_7 ) ( VAR_108 -> VAR_109 - ( TYPE_8 ) ( VAR_110 -> VAR_111 % ( TYPE_9 ) VAR_112 -> VAR_113 ) ) ) { for ( VAR_114 -> VAR_115 = VAR_116 -> VAR_117 . VAR_118 ; VAR_119 -> VAR_120 < VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 += ( TYPE_10 ) ( VAR_126 -> VAR_127 - ( TYPE_11 ) ( VAR_128 -> VAR_129 % ( TYPE_12 ) VAR_130 -> VAR_131 ) ) ) { for ( VAR_132 -> VAR_133 = VAR_134 -> VAR_135 . VAR_136 ; VAR_137 -> VAR_138 < VAR_139 -> VAR_140 . VAR_141 ; VAR_142 -> VAR_143 ++ ) { VAR_144 = & VAR_145 -> VAR_146 [ VAR_147 -> VAR_148 ] ; for ( VAR_149 -> VAR_150 = VAR_151 -> VAR_152 . VAR_153 ; VAR_154 -> VAR_155 < METHOD_3 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 ++ ) { TYPE_13 VAR_163 ; TYPE_14 VAR_164 , VAR_165 ; TYPE_15 VAR_166 , VAR_167 ; TYPE_16 VAR_168 , VAR_169 ; TYPE_17 VAR_170 , VAR_171 ; VAR_172 = & VAR_173 -> VAR_174 [ VAR_175 -> VAR_176 ] ; VAR_177 = VAR_178 -> VAR_179 - 1 - VAR_180 -> VAR_181 ; VAR_182 = METHOD_4 ( VAR_183 -> VAR_184 , ( TYPE_18 ) ( VAR_185 -> VAR_186 << VAR_187 ) ) ; VAR_188 = METHOD_5 ( VAR_189 -> VAR_190 , ( TYPE_19 ) ( VAR_191 -> VAR_192 << VAR_193 ) ) ; VAR_194 = METHOD_6 ( VAR_195 -> VAR_196 , ( TYPE_20 ) ( VAR_197 -> VAR_198 << VAR_199 ) ) ; VAR_200 = METHOD_7 ( VAR_201 -> VAR_202 , ( TYPE_21 ) ( VAR_203 -> VAR_204 << VAR_205 ) ) ; VAR_206 = VAR_207 -> VAR_208 + VAR_209 ; VAR_210 = VAR_211 -> VAR_212 + VAR_213 ;  if ( ! ( ( VAR_214 -> VAR_215 % ( TYPE_22 ) ( VAR_216 -> VAR_217 << VAR_218 ) == 0 ) || ( ( VAR_219 -> VAR_220 == VAR_221 -> VAR_222 ) &&  ( ( VAR_223 << VAR_224 ) % ( 1 << VAR_225 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_226 -> VAR_227 % ( TYPE_23 ) ( VAR_228 -> VAR_229 << VAR_230 ) == 0 ) || ( ( VAR_231 -> VAR_232 == VAR_233 -> VAR_234 ) && ( ( VAR_235 << VAR_236 ) % ( 1 << VAR_237 ) ) ) ) ) { continue ; } if ( ( VAR_238 -> VAR_239 == 0 ) || ( VAR_240 -> VAR_241 == 0 ) ) { continue ; } if ( ( VAR_242 == VAR_243 ) || ( VAR_244 == VAR_245 ) ) { continue ; } VAR_246 = METHOD_8 ( METHOD_9 ( VAR_247 -> VAR_248 , ( TYPE_24 ) ( VAR_249 -> VAR_250 << VAR_251 ) ) , ( TYPE_25 ) VAR_252 -> VAR_253 ) - METHOD_10 ( VAR_254 , ( TYPE_26 ) VAR_255 -> VAR_256 ) ; VAR_257 = METHOD_11 ( METHOD_12 ( VAR_258 -> VAR_259 , ( TYPE_27 ) ( VAR_260 -> VAR_261 << VAR_262 ) ) , ( TYPE_28 ) VAR_263 -> VAR_264 ) - METHOD_13 ( VAR_265 , ( TYPE_29 ) VAR_266 -> VAR_267 ) ; VAR_268 -> VAR_269 = ( TYPE_30 ) ( VAR_270 + VAR_271 * ( TYPE_31 ) VAR_272 -> VAR_273 ) ; for ( VAR_274 -> VAR_275 = VAR_276 -> VAR_277 . VAR_278 ; VAR_279 -> VAR_280 < VAR_281 -> VAR_282 . VAR_283 ; VAR_284 -> VAR_285 ++ ) { VAR_286 = VAR_287 -> VAR_288 * VAR_289 -> VAR_290 + VAR_291 -> VAR_292 * VAR_293 -> VAR_294 + VAR_295 -> VAR_296 * VAR_297 -> VAR_298 + VAR_299 -> VAR_300 * VAR_301 -> VAR_302 ; if ( ! VAR_303 -> VAR_304 [ VAR_305 ] ) { VAR_306 -> VAR_307 [ VAR_308 ] = 1 ; return VAR_309 ; } VAR_310 : ; } } } } } return VAR_311 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * * VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 , TYPE_11 VAR_10 ) { TYPE_12 VAR_11 = 0 ; TYPE_13 VAR_12 = { 0 , 0 , VAR_13 } ; TYPE_14 * VAR_14 = VAR_15 ; TYPE_15 * VAR_16 = VAR_17 ; TYPE_16 VAR_18 = 0 ; unsigned TYPE_17 * VAR_19 = VAR_20 ; unsigned TYPE_18 * VAR_21 = VAR_22 , * VAR_23 = VAR_24 ; unsigned TYPE_19 VAR_25 = 0 ; unsigned TYPE_20 VAR_26 = 0 , VAR_27 = 0 ; TYPE_21 VAR_28 ; TYPE_22 * VAR_29 = VAR_30 ; TYPE_23 * VAR_31 = VAR_32 ; TYPE_24 * VAR_33 = VAR_34 ; TYPE_25 * VAR_35 = VAR_36 ; TYPE_26 VAR_37 ; TYPE_27 VAR_38 = - 1 ; TYPE_28 * VAR_39 = VAR_40 ; TYPE_29 * VAR_41 = VAR_42 ; TYPE_30 * VAR_43 = VAR_44 ; TYPE_31 VAR_45 ; TYPE_32 VAR_46 ; TYPE_33 VAR_47 = 0 ; * VAR_48 = VAR_49 ; if ( VAR_50 -> VAR_51 == VAR_52 ) { return METHOD_1 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; } if ( VAR_58 -> VAR_59 <= 0 || VAR_60 -> VAR_61 == VAR_62 ) return 0 ; if ( VAR_63 == VAR_64 ) { TYPE_34 ( "missingrequestcontext\\n" ) ; return VAR_65 ; } VAR_66 = METHOD_2 ( VAR_67 , VAR_68 , VAR_69 -> VAR_70 ) ; if ( VAR_71 == VAR_72 ) { TYPE_35 ( "Unabletolocatecorrectrealmcontext\\n" ) ; return VAR_73 ; } TYPE_36 ( "pkinit_return_padata:entered!\\n" ) ; VAR_74 = ( TYPE_37 ) VAR_75 ; if ( VAR_76 -> VAR_77 ) { METHOD_3 ( VAR_78 -> VAR_79 ) ; VAR_80 -> VAR_81 = 0 ; VAR_82 -> VAR_83 = VAR_84 ; } for ( VAR_85 = 0 ; VAR_86 < VAR_87 -> VAR_88 ; VAR_89 ++ ) { VAR_90 = VAR_91 -> VAR_92 [ VAR_93 ] ; if ( ! METHOD_4 ( VAR_94 ) ) continue ; else { TYPE_38 ( "KDCpickedetype=%d\\n" , VAR_95 ) ; break ; } } if ( VAR_96 == VAR_97 -> VAR_98 ) { VAR_99 = VAR_100 ; goto VAR_101 ; } switch ( ( TYPE_39 ) VAR_102 -> VAR_103 ) { case VAR_104 : METHOD_5 ( & VAR_105 ) ; if ( VAR_106 == VAR_107 ) { VAR_108 = VAR_109 ; goto VAR_110 ; } VAR_111 -> VAR_112 = VAR_113 ; break ; case VAR_114 : case VAR_115 : METHOD_6 ( & VAR_116 ) ; if ( VAR_117 == VAR_118 ) { VAR_119 = VAR_120 ; goto VAR_121 ; } VAR_122 -> VAR_123 = VAR_124 ; break ; default : VAR_125 = VAR_126 ; goto VAR_127 ; } if ( VAR_128 -> VAR_129 != VAR_130 && VAR_131 -> VAR_132 -> VAR_133 != VAR_134 ) { VAR_135 = VAR_136 -> VAR_137 -> VAR_138 -> VAR_139 . VAR_140 ; VAR_141 = VAR_142 -> VAR_143 -> VAR_144 -> VAR_145 . VAR_146 ; VAR_147 -> VAR_148 = VAR_149 ; } else if ( VAR_150 -> VAR_151 != VAR_152 && VAR_153 -> VAR_154 -> VAR_155 != VAR_156 ) { VAR_157 = VAR_158 -> VAR_159 -> VAR_160 -> VAR_161 . VAR_162 ; VAR_163 = VAR_164 -> VAR_165 -> VAR_166 -> VAR_167 . VAR_168 ; VAR_169 -> VAR_170 = VAR_171 ; } if ( VAR_172 != VAR_173 && ( VAR_174 -> VAR_175 == VAR_176 || VAR_177 -> VAR_178 == VAR_179 ) ) { TYPE_40 ( "receivedDHkeydeliveryASREQ\\n" ) ; VAR_180 = METHOD_7 ( VAR_181 , VAR_182 -> VAR_183 , VAR_184 -> VAR_185 , VAR_186 -> VAR_187 , VAR_188 , VAR_189 , & VAR_190 , & VAR_191 , & VAR_192 , & VAR_193 ) ; if ( VAR_194 ) { TYPE_41 ( "failedtoprocess/createdhparamters\\n" ) ; goto VAR_195 ; } } if ( ( VAR_196 != VAR_197 && VAR_198 -> VAR_199 == VAR_200 ) || ( VAR_201 != VAR_202 && VAR_203 -> VAR_204 == VAR_205 ) ) { VAR_206 . VAR_207 . VAR_208 = VAR_209 ; VAR_210 . VAR_211 . VAR_212 = VAR_213 ; VAR_214 . VAR_215 = VAR_216 -> VAR_217 ; VAR_218 . VAR_219 = 0 ; VAR_220 = METHOD_8 ( & VAR_221 , & VAR_222 ) ; if ( VAR_223 ) { TYPE_42 ( "encode_krb5_kdc_dh_key_infofailed\\n" ) ; goto VAR_224 ; } TYPE_43 TYPE_44 TYPE_45 ( ( unsigned TYPE_46 * ) VAR_225 -> VAR_226 , VAR_227 -> VAR_228 , "/tmp/kdc_dh_key_info" ) ; switch ( ( TYPE_47 ) VAR_229 -> VAR_230 ) { case VAR_231 : VAR_232 = METHOD_9 ( VAR_233 , VAR_234 -> VAR_235 , VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 , 1 , ( unsigned TYPE_48 * ) VAR_241 -> VAR_242 , VAR_243 -> VAR_244 , & VAR_245 -> VAR_246 . VAR_247 . VAR_248 . VAR_249 , & VAR_250 -> VAR_251 . VAR_252 . VAR_253 . VAR_254 ) ; if ( VAR_255 ) { TYPE_49 ( "failedtocreatepkcs7signeddata\\n" ) ; goto VAR_256 ; } break ; case VAR_257 : case VAR_258 : VAR_259 = METHOD_10 ( VAR_260 , VAR_261 -> VAR_262 , VAR_263 -> VAR_264 , VAR_265 -> VAR_266 , VAR_267 , 1 , ( unsigned TYPE_50 * ) VAR_268 -> VAR_269 , VAR_270 -> VAR_271 , & VAR_272 -> VAR_273 . VAR_274 . VAR_275 , & VAR_276 -> VAR_277 . VAR_278 . VAR_279 ) ; if ( VAR_280 ) { TYPE_51 ( "failedtocreatepkcs7signeddata\\n" ) ; goto VAR_281 ; } break ; } } else { TYPE_52 ( "receivedRSAkeydeliveryASREQ\\n" ) ; VAR_282 = METHOD_11 ( VAR_283 , VAR_284 , VAR_285 ) ; if ( VAR_286 ) { TYPE_53 ( "unabletomakeasessionkey\\n" ) ; goto VAR_287 ; } for ( VAR_288 = 0 ; VAR_289 -> VAR_290 [ VAR_291 ] != VAR_292 ; VAR_293 ++ ) { TYPE_54 ( "%s:Checkingpa_type0x%08x\\n" , VAR_294 , VAR_295 -> VAR_296 [ VAR_297 ] -> VAR_298 ) ; if ( VAR_299 -> VAR_300 [ VAR_301 ] -> VAR_302 == 132 ) VAR_303 = 1 ; } TYPE_55 ( "%s:returnchecksuminsteadofnonce=%d\\n" , VAR_304 , VAR_305 ) ; if ( ( TYPE_56 ) VAR_306 -> VAR_307 == VAR_308 || VAR_309 ) { METHOD_12 ( & VAR_310 ) ; if ( VAR_311 == VAR_312 ) { VAR_313 = VAR_314 ; goto VAR_315 ; } VAR_316 = METHOD_13 ( VAR_317 , 0 , VAR_318 , VAR_319 , VAR_320 , & VAR_321 -> VAR_322 ) ; if ( VAR_323 ) { TYPE_57 ( "unabletocalculateASREQchecksum\\n" ) ; goto VAR_324 ; } TYPE_58 TYPE_59 TYPE_60 ( "calculatingchecksumonbufsize=%d\\n" , VAR_325 -> VAR_326 ) ; METHOD_14 ( VAR_327 -> VAR_328 , VAR_329 -> VAR_330 ) ; TYPE_61 ( "checksumsize=%d\\n" , VAR_331 -> VAR_332 . VAR_333 ) ; METHOD_15 ( VAR_334 -> VAR_335 . VAR_336 , VAR_337 -> VAR_338 . VAR_339 ) ; TYPE_62 ( "encryptingkey(%d)\\n" , VAR_340 -> VAR_341 ) ; METHOD_16 ( VAR_342 -> VAR_343 , VAR_344 -> VAR_345 ) ; METHOD_17 ( VAR_346 , VAR_347 , & VAR_348 -> VAR_349 ) ; VAR_350 = METHOD_18 ( VAR_351 , & VAR_352 ) ; if ( VAR_353 ) { TYPE_63 ( "failedtoencodereply_key_pack\\n" ) ; goto VAR_354 ; } } switch ( ( TYPE_64 ) VAR_355 -> VAR_356 ) { case VAR_357 : VAR_358 -> VAR_359 = VAR_360 ; VAR_361 = METHOD_19 ( VAR_362 , VAR_363 -> VAR_364 , VAR_365 -> VAR_366 , VAR_367 -> VAR_368 , VAR_369 -> VAR_370 , 1 , ( unsigned TYPE_65 * ) VAR_371 -> VAR_372 , VAR_373 -> VAR_374 , & VAR_375 -> VAR_376 . VAR_377 . VAR_378 , & VAR_379 -> VAR_380 . VAR_381 . VAR_382 ) ; break ; case VAR_383 : case VAR_384 : if ( ! VAR_385 ) { METHOD_20 ( & VAR_386 ) ; if ( VAR_387 == VAR_388 ) { VAR_389 = VAR_390 ; goto VAR_391 ; } VAR_392 -> VAR_393 = VAR_394 -> VAR_395 -> VAR_396 . VAR_397 ; METHOD_21 ( VAR_398 , VAR_399 , & VAR_400 -> VAR_401 ) ; VAR_402 = METHOD_22 ( VAR_403 , & VAR_404 ) ; if ( VAR_405 ) { TYPE_66 ( "failedtoencodereply_key_pack\\n" ) ; goto VAR_406 ; } } VAR_407 -> VAR_408 = VAR_409 ; VAR_410 = METHOD_23 ( VAR_411 , VAR_412 -> VAR_413 , VAR_414 -> VAR_415 , VAR_416 -> VAR_417 , VAR_418 -> VAR_419 , 1 , ( unsigned TYPE_67 * ) VAR_420 -> VAR_421 , VAR_422 -> VAR_423 , & VAR_424 -> VAR_425 . VAR_426 . VAR_427 , & VAR_428 -> VAR_429 . VAR_430 . VAR_431 ) ; break ; } if ( VAR_432 ) { TYPE_68 ( "failedtocreatepkcs7envelopeddata:%s\\n" , METHOD_24 ( VAR_433 ) ) ; goto VAR_434 ; } TYPE_69 TYPE_70 TYPE_71 ( ( unsigned TYPE_72 * ) VAR_435 -> VAR_436 , VAR_437 -> VAR_438 , "/tmp/kdc_key_pack" ) ; switch ( ( TYPE_73 ) VAR_439 -> VAR_440 ) { case VAR_441 : TYPE_74 ( VAR_442 -> VAR_443 . VAR_444 . VAR_445 , VAR_446 -> VAR_447 . VAR_448 . VAR_449 , "/tmp/kdc_enc_key_pack" ) ; break ; case VAR_450 : case VAR_451 : TYPE_75 ( VAR_452 -> VAR_453 . VAR_454 . VAR_455 , VAR_456 -> VAR_457 . VAR_458 . VAR_459 , "/tmp/kdc_enc_key_pack" ) ; break ; } } if ( ( VAR_460 != VAR_461 && VAR_462 -> VAR_463 == VAR_464 ) && ( ( VAR_465 -> VAR_466 != VAR_467 && VAR_468 -> VAR_469 -> VAR_470 != VAR_471 ) ) ) { if ( VAR_472 -> VAR_473 != VAR_474 && VAR_475 -> VAR_476 -> VAR_477 != VAR_478 ) { VAR_479 = METHOD_25 ( VAR_480 , VAR_481 -> VAR_482 -> VAR_483 , & ( VAR_484 -> VAR_485 . VAR_486 . VAR_487 ) ) ; if ( VAR_488 ) { TYPE_76 ( "pkinit_pick_kdf_algfailed:%s\\n" , METHOD_26 ( VAR_489 ) ) ; goto VAR_490 ; } } } switch ( ( TYPE_77 ) VAR_491 -> VAR_492 ) { case VAR_493 : VAR_494 = METHOD_27 ( VAR_495 , & VAR_496 ) ; break ; case VAR_497 : case VAR_498 : VAR_499 = METHOD_28 ( VAR_500 , & VAR_501 ) ; break ; } if ( VAR_502 ) { TYPE_78 ( "failedtoencodeAS_REP\\n" ) ; goto VAR_503 ; } TYPE_79 TYPE_80 if ( VAR_504 != VAR_505 ) TYPE_81 ( ( unsigned TYPE_82 * ) VAR_506 -> VAR_507 , VAR_508 -> VAR_509 , "/tmp/kdc_as_rep" ) ; if ( ( VAR_510 != VAR_511 && VAR_512 -> VAR_513 == VAR_514 ) || ( VAR_515 != VAR_516 && VAR_517 -> VAR_518 == VAR_519 ) ) {  if ( VAR_520 -> VAR_521 . VAR_522 . VAR_523 ) {   VAR_524 . VAR_525 = VAR_526 ;  VAR_527 . VAR_528 = VAR_529 ; VAR_530 = METHOD_29 ( VAR_531 , & VAR_532 , VAR_533 -> VAR_534 . VAR_535 . VAR_536 , VAR_537 -> VAR_538 , VAR_539 -> VAR_540 , VAR_541 , ( TYPE_83 * ) VAR_542 , ( TYPE_84 * ) VAR_543 , VAR_544 ) ; if ( VAR_545 ) { TYPE_85 ( "pkinit_alg_agility_kdffailed:%s\\n" , METHOD_30 ( VAR_546 ) ) ; goto VAR_547 ; } } else { VAR_548 = METHOD_31 ( VAR_549 , VAR_550 , VAR_551 , VAR_552 , VAR_553 ) ; if ( VAR_554 ) { TYPE_86 ( "pkinit_octetstring2keyfailed:%s\\n" , METHOD_32 ( VAR_555 ) ) ; goto VAR_556 ; } } } * VAR_557 = METHOD_33 ( sizeof ( TYPE_87 ) ) ; if ( * VAR_558 == VAR_559 ) { VAR_560 = VAR_561 ; METHOD_34 ( VAR_562 -> VAR_563 ) ; METHOD_35 ( VAR_564 ) ; VAR_565 = VAR_566 ; goto VAR_567 ; } ( * VAR_568 ) -> VAR_569 = VAR_570 ; switch ( ( TYPE_88 ) VAR_571 -> VAR_572 ) { case VAR_573 : ( * VAR_574 ) -> VAR_575 = VAR_576 ; break ; case VAR_577 : case VAR_578 : ( * VAR_579 ) -> VAR_580 = VAR_581 ; break ; } ( * VAR_582 ) -> VAR_583 = VAR_584 -> VAR_585 ; ( * VAR_586 ) -> VAR_587 = ( TYPE_89 * ) VAR_588 -> VAR_589 ; VAR_590 : METHOD_36 ( VAR_591 , VAR_592 ) ; METHOD_37 ( VAR_593 . VAR_594 ) ; METHOD_38 ( VAR_595 ) ; if ( VAR_596 != VAR_597 ) METHOD_39 ( VAR_598 , VAR_599 ) ; if ( VAR_600 != VAR_601 ) METHOD_40 ( VAR_602 , VAR_603 ) ; METHOD_41 ( VAR_604 ) ; METHOD_42 ( VAR_605 ) ; switch ( ( TYPE_90 ) VAR_606 -> VAR_607 ) { case VAR_608 : METHOD_43 ( & VAR_609 ) ; METHOD_44 ( & VAR_610 ) ; METHOD_45 ( & VAR_611 ) ; break ; case VAR_612 : case VAR_613 : METHOD_46 ( & VAR_614 ) ; METHOD_47 ( & VAR_615 ) ; if ( ! VAR_616 ) METHOD_48 ( & VAR_617 ) ; else METHOD_49 ( & VAR_618 ) ; break ; } if ( VAR_619 ) TYPE_91 ( "pkinit_verify_padatafailure" ) ; return VAR_620 ; }
TYPE_0 TYPE_1 * METHOD_0 ( const TYPE_2 VAR_0 , const TYPE_3 VAR_1 ) { TYPE_4 VAR_2 ;  if ( METHOD_1 ( VAR_3 , VAR_4 ) != VAR_5 )  return ( ( TYPE_5 * ) VAR_6 ) ; VAR_7 = VAR_8 * VAR_9 ; return ( METHOD_2 ( VAR_10 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 , * VAR_2 , * VAR_3 ; TYPE_3 * VAR_4 , * VAR_5 , VAR_6 [ 256 ] ; METHOD_1 ( VAR_7 , 0 , 255 ) ; VAR_8 = ( TYPE_4 * ) METHOD_2 ( METHOD_3 ( VAR_9 , 0 ) ) ; if ( ! VAR_10 ) VAR_11 = STRUCT_OR_UNION_2 -> VAR_12 ; else { TYPE_5 * VAR_13 , * VAR_14 ; VAR_15 = METHOD_4 ( STRUCT_OR_UNION_3 -> VAR_16 , '.' ) ; if ( ! VAR_17 ) { METHOD_5 ( VAR_18 , "Deniedstratumreconnectrequestforpoolwithoutdomain\'%s\'" , STRUCT_OR_UNION_4 -> VAR_19 ) ; return VAR_20 ; } VAR_21 = METHOD_6 ( VAR_22 , '.' ) ; if ( ! VAR_23 ) { METHOD_7 ( VAR_24 , "Deniedstratumreconnectrequesttourlwithoutdomain\'%s\'" , VAR_25 ) ; return VAR_26 ; } if ( METHOD_8 ( VAR_27 , VAR_28 ) ) { METHOD_9 ( VAR_29 , "Deniedstratumreconnectrequesttonon-matchingdomainurl\'%s\'" , STRUCT_OR_UNION_5 -> VAR_30 ) ; return VAR_31 ; } } VAR_32 = ( TYPE_6 * ) METHOD_10 ( METHOD_11 ( VAR_33 , 1 ) ) ; if ( ! VAR_34 ) VAR_35 = STRUCT_OR_UNION_6 -> VAR_36 ;  METHOD_12 ( VAR_37 , "%s:%s" , VAR_38 , VAR_39 ) ;  if ( ! METHOD_13 ( VAR_40 , & VAR_41 , & VAR_42 ) ) return VAR_43 ; METHOD_14 ( VAR_44 , "Stratumreconnectrequestedfrompool%dto%s" , STRUCT_OR_UNION_7 -> VAR_45 , VAR_46 ) ; METHOD_15 ( STRUCT_OR_UNION_8 ) ; METHOD_16 ( & STRUCT_OR_UNION_9 -> VAR_47 ) ; METHOD_17 ( STRUCT_OR_UNION_10 ) ; VAR_48 = STRUCT_OR_UNION_11 -> VAR_49 ; STRUCT_OR_UNION_12 -> VAR_50 = VAR_51 ; STRUCT_OR_UNION_13 -> VAR_52 = STRUCT_OR_UNION_14 -> VAR_53 ; METHOD_18 ( VAR_54 ) ; VAR_55 = STRUCT_OR_UNION_15 -> VAR_56 ; STRUCT_OR_UNION_16 -> VAR_57 = VAR_58 ; METHOD_19 ( VAR_59 ) ; METHOD_20 ( & STRUCT_OR_UNION_17 -> VAR_60 ) ; if ( ! METHOD_21 ( STRUCT_OR_UNION_18 ) ) { METHOD_22 ( STRUCT_OR_UNION_19 ) ; return VAR_61 ; } return VAR_62 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { if ( VAR_3 != VAR_4 && * VAR_5 != '\\0' ) { if ( ! METHOD_1 ( VAR_6 , "page/get" ) ) { TYPE_4 * VAR_7 = METHOD_2 ( VAR_8 , "page" ) ; if ( VAR_9 == VAR_10 ) VAR_11 = METHOD_3 ( VAR_12 ) ;  if ( VAR_13 && ( METHOD_4 ( VAR_14 , VAR_15 ) == 0 ) )  { METHOD_5 ( VAR_16 , "%s" , METHOD_6 ( VAR_17 ) ) ; METHOD_7 ( VAR_18 ) ; return ; } } else if ( ! METHOD_8 ( VAR_19 , "page/set" ) ) { TYPE_5 * VAR_20 = VAR_21 , * VAR_22 = VAR_23 ; if ( ( ( VAR_24 = METHOD_9 ( VAR_25 , "text" ) ) != VAR_26 ) && ( ( VAR_27 = METHOD_10 ( VAR_28 , "page" ) ) != VAR_29 ) ) {  METHOD_11 ( VAR_30 , VAR_31 ) ;  METHOD_12 ( VAR_32 , "success" ) ; METHOD_13 ( VAR_33 ) ;  return ;  } } else if ( ! METHOD_14 ( VAR_34 , "page/delete" ) ) { TYPE_6 * VAR_35 = METHOD_15 ( VAR_36 , "page" ) ; if ( VAR_37 == VAR_38 ) VAR_39 = METHOD_16 ( VAR_40 ) ;  if ( VAR_41 && ( METHOD_17 ( VAR_42 ) > 0 ) )  { METHOD_18 ( VAR_43 , "success" ) ; METHOD_19 ( VAR_44 ) ; return ; } } else if ( ! METHOD_20 ( VAR_45 , "page/exists" ) ) { TYPE_7 * VAR_46 = METHOD_21 ( VAR_47 , "page" ) ; if ( VAR_48 == VAR_49 ) VAR_50 = METHOD_22 ( VAR_51 ) ;  if ( VAR_52 && ( METHOD_23 ( VAR_53 , VAR_54 ) == 0 ) )  { METHOD_24 ( VAR_55 , "success" ) ; METHOD_25 ( VAR_56 ) ; return ; } } else if ( ! METHOD_26 ( VAR_57 , "pages" ) || ! METHOD_27 ( VAR_58 , "search" ) ) { TYPE_8 * * VAR_59 = VAR_60 ; TYPE_9 VAR_61 , VAR_62 ; TYPE_10 * VAR_63 = METHOD_28 ( VAR_64 , "expr" ) ; if ( VAR_65 == VAR_66 ) VAR_67 = METHOD_29 ( VAR_68 ) ; VAR_69 = METHOD_30 ( & VAR_70 , VAR_71 ) ; if ( VAR_72 ) { for ( VAR_73 = 0 ; VAR_74 < VAR_75 ; VAR_76 ++ ) { struct STRUCT_OR_UNION_0 * VAR_77 ; TYPE_11 VAR_78 [ 64 ] ; VAR_79 = METHOD_31 ( & VAR_80 [ VAR_81 ] -> VAR_82 ) ; METHOD_32 ( VAR_83 , sizeof ( VAR_84 ) , "%Y-%m-%d%H:%M" , VAR_85 ) ; METHOD_33 ( VAR_86 , "%s\\t%s\\n" , VAR_87 [ VAR_88 ] -> VAR_89 , VAR_90 ) ; } METHOD_34 ( VAR_91 ) ; return ; } } } METHOD_35 ( VAR_92 , 500 , "Error" ) ; METHOD_36 ( VAR_93 , "<html><body>Failed</body></html>\\n" ) ; METHOD_37 ( VAR_94 ) ; return ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 , VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 . VAR_9 ; TYPE_3 VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 , & VAR_13 -> VAR_14 ) ; if ( ! VAR_15 ) return 0 ; VAR_16 ++ ; VAR_17 -> VAR_18 = METHOD_2 ( * VAR_19 ++ ) ; VAR_20 ++ ; VAR_21 = VAR_22 -> VAR_23 = METHOD_3 ( * VAR_24 ++ ) ; if ( VAR_25 > VAR_26 ) return 0 ;  VAR_27 = ( TYPE_4 * ) VAR_28 - VAR_29 -> VAR_30 ;  VAR_31 = VAR_32 -> VAR_33 + VAR_34 -> VAR_35 . VAR_36 - VAR_37 ; if ( VAR_38 < METHOD_4 ( VAR_39 ) * 4 ) return 0 ; VAR_40 -> VAR_41 [ 0 ] . VAR_42 = ( TYPE_5 * ) VAR_43 ; VAR_44 -> VAR_45 [ 0 ] . VAR_46 = VAR_47 -> VAR_48 - VAR_49 ; VAR_50 = 0 ; while ( VAR_51 > VAR_52 -> VAR_53 [ VAR_54 ] . VAR_55 ) { VAR_56 -= VAR_57 -> VAR_58 [ VAR_59 ] . VAR_60 ; VAR_61 ++ ; VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 = METHOD_5 ( VAR_66 -> VAR_67 [ VAR_68 ] ) ; VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 = VAR_73 ; } VAR_74 -> VAR_75 [ VAR_76 ] . VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = VAR_81 + 1 ; return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_2 ( VAR_6 ) ;  unsigned TYPE_3 VAR_7 ; TYPE_4 * VAR_8 = ( TYPE_5 * ) VAR_9 ; TYPE_6 VAR_10 = 0 ; VAR_11 = METHOD_3 ( VAR_12 , & VAR_13 , 0 ) ; if ( ! VAR_14 || ( * VAR_15 && ( * VAR_16 != '\\n' ) ) ) return - VAR_17 ; if ( VAR_18 >= VAR_19 ) return - VAR_20 ; if ( ! METHOD_4 ( VAR_21 , & VAR_22 -> VAR_23 ) || ! METHOD_5 ( VAR_24 , & VAR_25 -> VAR_26 ) ) return - VAR_27 ;  METHOD_6 ( & VAR_28 -> VAR_29 ) ;  if ( VAR_30 -> VAR_31 [ VAR_32 ] ) VAR_33 = - VAR_34 ; else if ( METHOD_7 ( VAR_35 , & VAR_36 -> VAR_37 ) ) VAR_38 = - VAR_39 ; else { VAR_40 -> VAR_41 [ VAR_42 ] = VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; METHOD_8 ( VAR_47 , VAR_48 -> VAR_49 ) ; } METHOD_9 ( & VAR_50 -> VAR_51 ) ;  if ( VAR_52 )  return VAR_53 ; return VAR_54 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 3 struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 ; TYPE_1 VAR_10 = VAR_11 -> VAR_12 - VAR_13 ; TYPE_2 * VAR_14 = VAR_15 -> VAR_16 ; TYPE_3 VAR_17 , VAR_18 = 0 ; TYPE_4 VAR_19 ; TYPE_5 VAR_20 = ( ( TYPE_6 * ) ( VAR_21 -> VAR_22 . VAR_23 + VAR_24 ) ) [ 0 ] ; unsigned TYPE_7 VAR_25 ; TYPE_8 VAR_26 ; TYPE_9 * VAR_27 ; TYPE_10 * VAR_28 ; TYPE_11 TYPE_12 if ( VAR_29 -> VAR_30 != METHOD_1 ( ( TYPE_13 * ) VAR_31 -> VAR_32 . VAR_33 , VAR_34 ) ) METHOD_2 ( & VAR_35 -> VAR_36 -> VAR_37 , "Checksumofencodedframedoesn\'tmatch!\\n" ) ; METHOD_3 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = VAR_42 -> VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; METHOD_4 ( & VAR_47 -> VAR_48 , VAR_49 ) ;  VAR_50 = METHOD_5 ( & VAR_51 -> VAR_52 . VAR_53 ) ;   if ( ! VAR_54 ) {  METHOD_6 ( & VAR_55 -> VAR_56 -> VAR_57 , "vbisempty,droppingframe\\n" ) ; return ; } if ( VAR_58 -> VAR_59 < VAR_60 * 5 / 4 ) { METHOD_7 ( & VAR_61 -> VAR_62 -> VAR_63 , "Leftspaceinvb2buffer,%dbytes,islessthanconsideredsafelyenoughtoputframeoflength%d.Droppingthisframe.\\n" , VAR_64 -> VAR_65 , VAR_66 ) ; return ; } for ( VAR_67 = 0 ; VAR_68 < 8 - VAR_69 -> VAR_70 ; VAR_71 ++ ) VAR_72 |= 1 << VAR_73 ; VAR_74 = ( ~ VAR_75 ) & 0xff ; VAR_76 [ 0 ] = ( VAR_77 -> VAR_78 & VAR_79 ) | ( VAR_80 & VAR_81 ) ; VAR_82 -- ; VAR_83 ++ ; VAR_84 = VAR_85 -> VAR_86 . VAR_87 + VAR_88 + 1 ; VAR_89 = VAR_90 + VAR_91 ; VAR_92 = 0 ; for ( ; VAR_93 < VAR_94 ; VAR_95 ++ ) { if ( VAR_96 < 2 ) { if ( * VAR_97 == 0 ) ++ VAR_98 ; else VAR_99 = 0 ; } else { if ( ( * VAR_100 & ~ 0x03 ) == 0 ) * VAR_101 ++ = 0x03 ; VAR_102 = * VAR_103 == 0 ; } * VAR_104 ++ = * VAR_105 ; } METHOD_8 ( & VAR_106 -> VAR_107 . VAR_108 , 0 , VAR_109 - ( TYPE_14 * ) METHOD_9 ( & VAR_110 -> VAR_111 . VAR_112 , 0 ) ) ; VAR_113 -> VAR_114 . VAR_115 . VAR_116 = VAR_117 -> VAR_118 ; VAR_119 -> VAR_120 = VAR_121 ; VAR_122 -> VAR_123 = VAR_124 -> VAR_125 ; if ( VAR_126 -> VAR_127 && METHOD_10 ( VAR_128 ) ) { struct STRUCT_OR_UNION_5 VAR_129 = { . VAR_130 = VAR_131 , . VAR_132 . VAR_133 = { . VAR_134 = VAR_135 , . VAR_136 = VAR_137 -> VAR_138 , } , } ; METHOD_11 ( & VAR_139 -> VAR_140 , & VAR_141 ) ; } METHOD_12 ( & VAR_142 -> VAR_143 . VAR_144 , VAR_145 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 = 0 ;  TYPE_6 VAR_5 ;  if ( VAR_6 -> VAR_7 ) return VAR_8 -> VAR_9 . METHOD_1 ( VAR_10 , VAR_11 * VAR_12 , VAR_13 -> VAR_14 ) / VAR_15 ; VAR_16 *= VAR_17 ; if ( VAR_18 <= 0 ) return 0 ; while ( VAR_19 > 0 ) { VAR_20 = ( VAR_21 > VAR_22 ) ? VAR_23 : VAR_24 ; VAR_25 = METHOD_2 ( VAR_26 -> VAR_27 . VAR_28 , ( ( const TYPE_7 * ) VAR_29 ) + VAR_30 , VAR_31 ) ; if ( VAR_32 == - 1 ) { if ( VAR_33 == VAR_34 ) continue ; METHOD_3 ( VAR_35 , VAR_36 ) ; break ; } ; if ( VAR_37 == 0 ) break ; VAR_38 += VAR_39 ; VAR_40 -= VAR_41 ; } ; if ( VAR_42 -> VAR_43 ) VAR_44 -> VAR_45 += VAR_46 ; return VAR_47 / VAR_48 ; }
static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( & VAR_7 , & STRUCT_OR_UNION_4 -> VAR_8 , sizeof ( TYPE_6 ) ) ; METHOD_2 ( & VAR_9 , & STRUCT_OR_UNION_5 -> VAR_10 , sizeof ( TYPE_7 ) ) ; VAR_11 = VAR_12 ; do { VAR_13 = & VAR_14 [ VAR_15 ] ; if ( VAR_16 -> VAR_17 == METHOD_3 ( & VAR_18 -> VAR_19 ) && VAR_20 -> VAR_21 . VAR_22 == VAR_23 && VAR_24 -> VAR_25 . VAR_26 == VAR_27 &&  VAR_28 -> VAR_29 == METHOD_4 ( & VAR_30 -> VAR_31 ) &&  VAR_32 -> VAR_33 == VAR_34 ) { VAR_35 = VAR_36 ; * VAR_37 = VAR_38 -> VAR_39 ; return ( 1 ) ; } if ( ++ VAR_40 >= VAR_41 ) VAR_42 = 0 ; } while ( VAR_43 != VAR_44 ) ; return ( 0 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 , 0 ) ; if ( METHOD_2 ( VAR_7 ) ) { VAR_8 = - VAR_9 ; goto VAR_10 ; } STRUCT_OR_UNION_2 = METHOD_3 ( VAR_11 ) ;  VAR_12 = METHOD_4 ( VAR_13 , VAR_14 ) ;  if ( VAR_15 == 0 ) goto VAR_16 ; if ( VAR_17 != - VAR_18 ) goto VAR_19 ; if ( ! METHOD_5 ( VAR_20 ) ) { VAR_21 = - VAR_22 ; goto VAR_23 ; } VAR_24 : VAR_25 = - VAR_26 ; if ( STRUCT_OR_UNION_3 -> VAR_27 -> METHOD_6 ) { METHOD_7 ( & STRUCT_OR_UNION_4 -> VAR_28 ) ; VAR_29 = METHOD_8 ( STRUCT_OR_UNION_5 ) ; if ( VAR_30 == 0 ) VAR_31 = STRUCT_OR_UNION_6 -> VAR_32 -> METHOD_9 ( STRUCT_OR_UNION_7 , VAR_33 , VAR_34 ) ; METHOD_10 ( & STRUCT_OR_UNION_8 -> VAR_35 ) ; } VAR_36 : METHOD_11 ( STRUCT_OR_UNION_9 ) ; VAR_37 : return VAR_38 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = 0 ; struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = & VAR_8 -> VAR_9 . VAR_10 ; struct STRUCT_OR_UNION_5 * VAR_11 ; TYPE_2 VAR_12 = 0 ; TYPE_3 VAR_13 ; TYPE_4 VAR_14 ; struct STRUCT_OR_UNION_6 * VAR_15 ; TYPE_5 VAR_16 ; struct STRUCT_OR_UNION_7 * VAR_17 ; struct STRUCT_OR_UNION_8 * VAR_18 ; TYPE_6 * VAR_19 = ( TYPE_7 * ) VAR_20 + sizeof ( struct STRUCT_OR_UNION_9 ) ; if ( ! VAR_21 ) return - 1 ; VAR_22 -> VAR_23 = METHOD_1 ( VAR_24 ) ; VAR_25 = & VAR_26 -> VAR_27 . VAR_28 ; VAR_29 -> VAR_30 = VAR_31 ;  METHOD_2 ( VAR_32 -> VAR_33 , 0 , VAR_34 ) ;  METHOD_3 ( VAR_35 -> VAR_36 , VAR_37 -> VAR_38 , VAR_39 -> VAR_40 ) ; METHOD_4 ( VAR_41 , VAR_42 , "info:ADHOC_S_CMD:SSID=%s\\n" , VAR_43 -> VAR_44 ) ; METHOD_5 ( VAR_45 -> VAR_46 . VAR_47 , 0 , VAR_48 ) ; METHOD_6 ( VAR_49 -> VAR_50 . VAR_51 , VAR_52 -> VAR_53 , VAR_54 -> VAR_55 ) ; VAR_56 -> VAR_57 . VAR_58 = VAR_59 -> VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; VAR_67 -> VAR_68 = METHOD_7 ( VAR_69 -> VAR_70 ) ; VAR_71 -> VAR_72 = VAR_73 -> VAR_74 ; VAR_75 3 VAR_76 1 VAR_77 -> VAR_78 . VAR_79 . VAR_80 = VAR_81 ; VAR_82 -> VAR_83 . VAR_84 . VAR_85 = VAR_86 ; if ( ! METHOD_8 ( VAR_87 , VAR_88 -> VAR_89 , ( TYPE_8 ) VAR_90 -> VAR_91 , 0 ) ) { struct STRUCT_OR_UNION_10 * VAR_92 ; VAR_93 = METHOD_9 ( VAR_94 , VAR_95 -> VAR_96 , VAR_97 , 0 ) ; if ( VAR_98 ) VAR_99 -> VAR_100 = ( TYPE_9 ) VAR_101 -> VAR_102 ; } if ( ! VAR_103 -> VAR_104 ) { METHOD_10 ( VAR_105 , VAR_106 , "ADHOC_S_CMD:adhoc_channelcannotbe0\\n" ) ; return - 1 ; } METHOD_11 ( VAR_107 , VAR_108 , "info:ADHOC_S_CMD:creatingADHOConchannel%d\\n" , VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 . VAR_113 . VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 . VAR_119 = VAR_120 -> VAR_121 ; VAR_122 -> VAR_123 = VAR_124 -> VAR_125 ; VAR_126 -> VAR_127 . VAR_128 . VAR_129 = VAR_130 -> VAR_131 ; METHOD_12 ( & VAR_132 -> VAR_133 , & VAR_134 -> VAR_135 , sizeof ( union STRUCT_OR_UNION_11 ) ) ; VAR_136 6 VAR_137 2 VAR_138 -> VAR_139 . VAR_140 . VAR_141 = VAR_142 ; VAR_143 -> VAR_144 . VAR_145 . VAR_146 = VAR_147 ; VAR_148 -> VAR_149 . VAR_150 . VAR_151 = METHOD_13 ( VAR_152 -> VAR_153 ) ; METHOD_14 ( & VAR_154 -> VAR_155 , & VAR_156 -> VAR_157 , sizeof ( union STRUCT_OR_UNION_12 ) ) ; VAR_158 -> VAR_159 |= VAR_160 ; VAR_161 = VAR_162 ; if ( VAR_163 -> VAR_164 . VAR_165 ) { METHOD_15 ( VAR_166 , VAR_167 , "info:ADHOC_S_CMD:wep_statussetprivacytoWEP\\n" ) ; VAR_168 -> VAR_169 = VAR_170 ; VAR_171 |= VAR_172 ; } else { METHOD_16 ( VAR_173 , VAR_174 , "info:ADHOC_S_CMD:wep_statusNOTset,\\t" "settingprivacytoACCEPTALL\\n" ) ; VAR_175 -> VAR_176 = VAR_177 ; } METHOD_17 ( VAR_178 -> VAR_179 , 0 , sizeof ( VAR_180 -> VAR_181 ) ) ; METHOD_18 ( VAR_182 , VAR_183 -> VAR_184 ) ; if ( ( VAR_185 -> VAR_186 & VAR_187 ) && ( VAR_188 -> VAR_189 & VAR_190 ) ) { if ( METHOD_19 ( VAR_191 , VAR_192 , VAR_193 , 0 , & VAR_194 -> VAR_195 , VAR_196 ) ) { METHOD_20 ( VAR_197 , VAR_198 , "ADHOC_S_CMD:GProtectionconfigfailed\\n" ) ; return - 1 ; } } for ( VAR_199 = 0 ; VAR_200 < sizeof ( VAR_201 -> VAR_202 ) ; VAR_203 ++ ) if ( ! VAR_204 -> VAR_205 [ VAR_206 ] ) break ; VAR_207 -> VAR_208 . VAR_209 = VAR_210 ; METHOD_21 ( & VAR_211 -> VAR_212 . VAR_213 , & VAR_214 -> VAR_215 , VAR_216 -> VAR_217 . VAR_218 ) ; METHOD_22 ( VAR_219 , VAR_220 , "info:ADHOC_S_CMD:rates=%4ph\\n" , VAR_221 -> VAR_222 ) ; METHOD_23 ( VAR_223 , VAR_224 , "info:ADHOC_S_CMD:AD-HOCStartcommandisready\\n" ) ; if ( METHOD_24 ( VAR_225 ) ) { VAR_226 = ( struct STRUCT_OR_UNION_13 * ) VAR_227 ; VAR_228 -> VAR_229 . VAR_230 = METHOD_25 ( VAR_231 ) ; VAR_232 -> VAR_233 . VAR_234 = METHOD_26 ( sizeof ( struct STRUCT_OR_UNION_14 ) ) ; METHOD_27 ( VAR_235 -> VAR_236 , 0x00 , sizeof ( struct STRUCT_OR_UNION_15 ) ) ; VAR_237 -> VAR_238 [ 0 ] . VAR_239 = ( TYPE_10 ) VAR_240 -> VAR_241 . VAR_242 . VAR_243 ; METHOD_28 ( VAR_244 , VAR_245 , "info:ADHOC_S_CMD:TLVChan=%d\\n" , VAR_246 -> VAR_247 [ 0 ] . VAR_248 ) ; VAR_249 -> VAR_250 [ 0 ] . VAR_251 = METHOD_29 ( VAR_252 -> VAR_253 . VAR_254 ) ; if ( VAR_255 -> VAR_256 & VAR_257 || VAR_258 -> VAR_259 & VAR_260 ) { if ( VAR_261 -> VAR_262 == VAR_263 ) VAR_264 -> VAR_265 [ 0 ] . VAR_266 |= ( VAR_267 << 4 ) ; else if ( VAR_268 -> VAR_269 == VAR_270 ) VAR_271 -> VAR_272 [ 0 ] . VAR_273 |= ( VAR_274 << 4 ) ; } METHOD_30 ( VAR_275 , VAR_276 , "info:ADHOC_S_CMD:TLVBand=%d\\n" , VAR_277 -> VAR_278 [ 0 ] . VAR_279 ) ; VAR_280 += sizeof ( VAR_281 -> VAR_282 ) + sizeof ( struct STRUCT_OR_UNION_16 ) ; VAR_283 += sizeof ( VAR_284 -> VAR_285 ) + sizeof ( struct STRUCT_OR_UNION_17 ) ; } VAR_286 += METHOD_31 ( VAR_287 , VAR_288 , & VAR_289 ) ; if ( VAR_290 -> VAR_291 . VAR_292 ) { VAR_293 = METHOD_32 ( VAR_294 , & VAR_295 ) ; if ( VAR_296 == - 1 ) return - 1 ; VAR_297 += VAR_298 ; } if ( VAR_299 -> VAR_300 ) { VAR_301 = ( struct STRUCT_OR_UNION_18 * ) VAR_302 ; METHOD_33 ( VAR_303 , 0 , sizeof ( struct STRUCT_OR_UNION_19 ) ) ; VAR_304 -> VAR_305 . VAR_306 = METHOD_34 ( VAR_307 ) ; VAR_308 -> VAR_309 . VAR_310 = METHOD_35 ( sizeof ( struct STRUCT_OR_UNION_20 ) ) ; VAR_311 = METHOD_36 ( VAR_312 -> VAR_313 -> VAR_314 ) ; METHOD_37 ( VAR_315 , VAR_316 , & VAR_317 -> VAR_318 ) ; if ( VAR_319 -> VAR_320 == VAR_321 ) { TYPE_11 VAR_322 ; VAR_323 = METHOD_38 ( VAR_324 -> VAR_325 . VAR_326 ) ; VAR_327 &= ~ VAR_328 ; VAR_329 &= ~ VAR_330 ; VAR_331 -> VAR_332 . VAR_333 = METHOD_39 ( VAR_334 ) ; } VAR_335 += sizeof ( struct STRUCT_OR_UNION_21 ) ; VAR_336 += sizeof ( struct STRUCT_OR_UNION_22 ) ; VAR_337 = ( struct STRUCT_OR_UNION_23 * ) VAR_338 ; METHOD_40 ( VAR_339 , 0 , sizeof ( struct STRUCT_OR_UNION_24 ) ) ; VAR_340 -> VAR_341 . VAR_342 = METHOD_41 ( VAR_343 ) ; VAR_344 -> VAR_345 . VAR_346 = METHOD_42 ( sizeof ( struct STRUCT_OR_UNION_25 ) ) ; VAR_347 -> VAR_348 . VAR_349 = ( TYPE_12 ) VAR_350 -> VAR_351 . VAR_352 . VAR_353 ; if ( VAR_354 -> VAR_355 ) { VAR_356 -> VAR_357 . VAR_358 = VAR_359 -> VAR_360 ; VAR_361 -> VAR_362 . VAR_363 |= VAR_364 ; } VAR_365 -> VAR_366 . VAR_367 = METHOD_43 ( VAR_368 ) ; VAR_369 -> VAR_370 . VAR_371 [ 0 ] = 0xff ; VAR_372 += sizeof ( struct STRUCT_OR_UNION_26 ) ; VAR_373 += sizeof ( struct STRUCT_OR_UNION_27 ) ; } VAR_374 -> VAR_375 = METHOD_44 ( ( TYPE_13 ) ( sizeof ( struct STRUCT_OR_UNION_28 ) + VAR_376 + VAR_377 ) ) ; if ( VAR_378 -> VAR_379 == VAR_380 ) VAR_381 &= ~ VAR_382 ; else VAR_383 |= VAR_384 ; VAR_385 -> VAR_386 = METHOD_45 ( VAR_387 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 * VAR_4 , * VAR_5 ; TYPE_2 * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_4 VAR_15 ; METHOD_1 ( VAR_16 != VAR_17 ) ; VAR_18 = VAR_19 -> VAR_20 ; METHOD_2 ( VAR_21 != VAR_22 ) ; METHOD_3 ( VAR_23 -> VAR_24 != VAR_25 ) ; VAR_26 = ( TYPE_5 * ) VAR_27 -> VAR_28 -> VAR_29 . VAR_30 ; METHOD_4 ( VAR_31 != VAR_32 ) ; if ( ! VAR_33 -> VAR_34 . VAR_35 ) return 0 ; VAR_36 = VAR_37 -> VAR_38 ; METHOD_5 ( VAR_39 != VAR_40 ) ; METHOD_6 ( VAR_41 ) ; if ( VAR_42 -> VAR_43 == 0 || ( METHOD_7 ( VAR_44 ) && ( VAR_45 -> VAR_46 -> VAR_47 + VAR_48 -> VAR_49 . VAR_50 * 16 ) < VAR_51 -> VAR_52 ) ) { for ( VAR_53 = 0 , VAR_54 = & VAR_55 -> VAR_56 [ 0 ] ; VAR_57 < VAR_58 -> VAR_59 . VAR_60 ; VAR_61 ++ ) { VAR_62 = VAR_63 -> METHOD_8 ( VAR_64 , VAR_65 -> VAR_66 , VAR_67 -> VAR_68 , ( TYPE_6 ) VAR_69 -> VAR_70 , ( TYPE_7 ) VAR_71 -> VAR_72 , & VAR_73 -> VAR_74 [ VAR_75 -> VAR_76 ] ) ; if ( VAR_77 -> VAR_78 ) break ; if ( VAR_79 ) return VAR_80 ; VAR_81 = METHOD_9 ( VAR_82 ) ; } METHOD_10 ( VAR_83 ) ; return 0 ; } if ( VAR_84 -> VAR_85 == 0 ) return 0 ; VAR_86 = VAR_87 -> VAR_88 . VAR_89 * sizeof ( * VAR_90 ) ; VAR_91 = VAR_92 = METHOD_11 ( VAR_93 , VAR_94 | VAR_95 ) ; VAR_96 = 0 ; for ( VAR_97 = 0 , VAR_98 = & VAR_99 -> VAR_100 [ 0 ] ; VAR_101 < VAR_102 -> VAR_103 . VAR_104 ; VAR_105 ++ ) { if ( METHOD_12 ( ( ( TYPE_8 * ) VAR_106 < ( TYPE_9 * ) VAR_107 ) || ( ( TYPE_10 * ) VAR_108 >= ( ( TYPE_11 * ) VAR_109 + VAR_110 -> VAR_111 -> VAR_112 ) ) ) ) { METHOD_13 ( "xfs_attr_shortform_list" , VAR_113 , VAR_114 -> VAR_115 -> VAR_116 , VAR_117 ) ; METHOD_14 ( VAR_118 ) ; return - VAR_119 ; } VAR_120 -> VAR_121 = VAR_122 ; VAR_123 -> VAR_124 = METHOD_15 ( VAR_125 -> VAR_126 , VAR_127 -> VAR_128 ) ; VAR_129 -> VAR_130 = VAR_131 -> VAR_132 ; VAR_133 -> VAR_134 = VAR_135 -> VAR_136 ; VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; VAR_141 -> VAR_142 = VAR_143 -> VAR_144 ; VAR_145 = METHOD_16 ( VAR_146 ) ; VAR_147 ++ ; VAR_148 ++ ; } METHOD_17 ( VAR_149 , VAR_150 , sizeof ( * VAR_151 ) , VAR_152 ) ; VAR_153 = 0 ; VAR_154 -> VAR_155 = 1 ; VAR_156 -> VAR_157 = 0 ; for ( VAR_158 = VAR_159 , VAR_160 = 0 ; VAR_161 < VAR_162 ; VAR_163 ++ , VAR_164 ++ ) { if ( VAR_165 -> VAR_166 == VAR_167 -> VAR_168 ) { if ( VAR_169 -> VAR_170 == VAR_171 ) { break ; } VAR_172 ++ ; } else if ( VAR_173 -> VAR_174 > VAR_175 -> VAR_176 ) { break ; } } if ( VAR_177 == VAR_178 ) { METHOD_18 ( VAR_179 ) ; return 0 ; } for ( ; VAR_180 < VAR_181 ; VAR_182 ++ , VAR_183 ++ ) { if ( VAR_184 -> VAR_185 != VAR_186 -> VAR_187 ) { VAR_188 -> VAR_189 = VAR_190 -> VAR_191 ; VAR_192 -> VAR_193 = 0 ; } VAR_194 = VAR_195 -> METHOD_19 ( VAR_196 , VAR_197 -> VAR_198 , VAR_199 -> VAR_200 , VAR_201 -> VAR_202 , VAR_203 -> VAR_204 , & VAR_205 -> VAR_206 [ VAR_207 -> VAR_208 ] ) ;  if ( VAR_209 )  return VAR_210 ;  if ( VAR_211 -> VAR_212 )  break ; VAR_213 -> VAR_214 ++ ; } METHOD_20 ( VAR_215 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  {  return ( METHOD_1 ( METHOD_2 ( VAR_2 ) , VAR_3 -> VAR_4 , VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_9 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 , 0 ) ;  METHOD_2 ( & VAR_6 -> VAR_7 ) ;  METHOD_3 ( & VAR_8 -> VAR_9 , METHOD_4 ( VAR_10 -> VAR_11 * VAR_12 ) , VAR_13 ) ; METHOD_5 ( & VAR_14 -> VAR_15 , 1 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 , TYPE_8 * * VAR_7 ) { TYPE_9 * VAR_8 , * VAR_9 = ( TYPE_10 * ) VAR_10 ; TYPE_11 TYPE_12 VAR_11 ( VAR_12 , "forward_search_range:str:%d,end:%d,s:%d,range:%d\\n" , ( TYPE_13 ) VAR_13 , ( TYPE_14 ) VAR_14 , ( TYPE_15 ) VAR_15 , ( TYPE_16 ) VAR_16 ) ; VAR_17 = VAR_18 ; if ( VAR_19 -> VAR_20 > 0 ) { if ( METHOD_1 ( VAR_21 -> VAR_22 ) ) { VAR_23 += VAR_24 -> VAR_25 ; } else { TYPE_17 * VAR_26 = VAR_27 + VAR_28 -> VAR_29 ;  while ( VAR_30 < VAR_31 ) VAR_32 += METHOD_2 ( VAR_33 -> VAR_34 , VAR_35 ) ;  } } VAR_36 : switch ( VAR_37 -> VAR_38 ) { case VAR_39 : VAR_40 = METHOD_3 ( VAR_41 -> VAR_42 , VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; break ; case VAR_50 : VAR_51 = METHOD_4 ( VAR_52 -> VAR_53 , VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; break ; case VAR_63 : VAR_64 = METHOD_5 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ; break ; case VAR_73 : VAR_74 = METHOD_6 ( VAR_75 , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 , VAR_80 , VAR_81 , VAR_82 ) ; break ; case VAR_83 : VAR_84 = METHOD_7 ( VAR_85 -> VAR_86 , VAR_87 -> VAR_88 , VAR_89 , VAR_90 ) ; break ; } if ( VAR_91 && VAR_92 < VAR_93 ) { if ( VAR_94 - VAR_95 -> VAR_96 < VAR_97 ) { VAR_98 : VAR_99 = VAR_100 ; VAR_101 += METHOD_8 ( VAR_102 -> VAR_103 , VAR_104 ) ; goto VAR_105 ; } if ( VAR_106 -> VAR_107 ) { TYPE_18 * VAR_108 ; switch ( VAR_109 -> VAR_110 ) { case VAR_111 : if ( ! METHOD_9 ( VAR_112 ) ) { VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , ( VAR_116 ? VAR_117 : VAR_118 ) , VAR_119 ) ; if ( ! METHOD_11 ( VAR_120 -> VAR_121 , VAR_122 , VAR_123 ) ) goto VAR_124 ; } break ; case VAR_125 : if ( METHOD_12 ( VAR_126 ) ) { TYPE_19 TYPE_20 VAR_127 = ( TYPE_21 * ) METHOD_13 ( VAR_128 -> VAR_129 , ( VAR_130 ? VAR_131 : VAR_132 ) , VAR_133 ) ; if ( VAR_134 && METHOD_14 ( VAR_135 -> VAR_136 , VAR_137 , VAR_138 ) ) goto VAR_139 ; } else if ( ! METHOD_15 ( VAR_140 -> VAR_141 , VAR_142 , VAR_143 ) TYPE_22 TYPE_23 && ! METHOD_16 ( VAR_144 -> VAR_145 , VAR_146 , VAR_147 ) ) goto VAR_148 ; break ; } } if ( VAR_149 -> VAR_150 == 0 ) { * VAR_151 = VAR_152 ; if ( VAR_153 ) { if ( * VAR_154 > VAR_155 ) * VAR_156 = METHOD_17 ( VAR_157 -> VAR_158 , VAR_159 , VAR_160 ) ; else * VAR_161 = METHOD_18 ( VAR_162 -> VAR_163 , ( VAR_164 ? VAR_165 : VAR_166 ) , VAR_167 ) ; } } else { if ( VAR_168 -> VAR_169 != VAR_170 ) { * VAR_171 = VAR_172 - VAR_173 -> VAR_174 ; if ( * VAR_175 > VAR_176 ) { * VAR_177 = METHOD_19 ( VAR_178 -> VAR_179 , VAR_180 , * VAR_181 , ( const TYPE_24 * * ) VAR_182 ) ; if ( VAR_183 && METHOD_20 ( * VAR_184 ) ) * VAR_185 = METHOD_21 ( VAR_186 -> VAR_187 , ( VAR_188 ? VAR_189 : VAR_190 ) , * VAR_191 ) ; } else { if ( VAR_192 ) * VAR_193 = METHOD_22 ( VAR_194 -> VAR_195 , ( VAR_196 ? VAR_197 : VAR_198 ) , * VAR_199 ) ; } } } * VAR_200 = VAR_201 - VAR_202 -> VAR_203 ; TYPE_25 TYPE_26 VAR_204 ( VAR_205 , "forward_search_rangesuccess:low:%d,high:%d,dmin:%d,dmax:%d\\n" , ( TYPE_27 ) ( * VAR_206 - VAR_207 ) , ( TYPE_28 ) ( * VAR_208 - VAR_209 ) , VAR_210 -> VAR_211 , VAR_212 -> VAR_213 ) ; return 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ;  struct STRUCT_OR_UNION_3 VAR_6 = { . VAR_7 = VAR_8 } ;  TYPE_2 * VAR_9 = VAR_10 -> VAR_11 ; METHOD_2 ( "sk%p" , VAR_12 ) ;  switch ( VAR_13 -> VAR_14 ) {  case VAR_15 : if ( VAR_16 -> VAR_17 != VAR_18 ) METHOD_3 ( & VAR_19 , VAR_20 , 2 , VAR_21 -> VAR_22 ) ; break ; case VAR_23 : VAR_24 . VAR_25 = VAR_26 ;  VAR_27 . VAR_28 = VAR_29 ;  VAR_30 . VAR_31 = VAR_32 ;  VAR_33 . VAR_34 = METHOD_4 ( VAR_35 ) ;   VAR_36 . VAR_37 = METHOD_5 ( VAR_38 ) ;  VAR_39 . VAR_40 = METHOD_6 ( VAR_41 ) ; METHOD_7 ( & VAR_42 , VAR_43 , sizeof ( VAR_44 ) , ( unsigned TYPE_3 ) & VAR_45 ) ; break ; } VAR_46 -> VAR_47 = METHOD_8 ( VAR_48 -> VAR_49 ) ; VAR_50 -> VAR_51 = METHOD_9 ( 0 ) ; return VAR_52 - VAR_53 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 ; TYPE_5 VAR_5 = - 1 ; while ( VAR_6 ) {  do VAR_7 = METHOD_1 ( VAR_8 , VAR_9 , VAR_10 , VAR_11 ) ;  while ( VAR_12 < 0 && VAR_13 == VAR_14 ) ; if ( VAR_15 <= 0 ) { METHOD_2 ( "sockfd:%drecverrno:%d,ret:%d" , VAR_16 , VAR_17 , VAR_18 ) ; return - 1 ; } VAR_19 += VAR_20 ; VAR_21 -= VAR_22 ; } return VAR_23 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 VAR_5 [ VAR_6 ] ; TYPE_5 VAR_7 = 0 ;  VAR_8 -> VAR_9 = - 1 ;  for ( ; ; ) { if ( ( VAR_10 = METHOD_1 ( VAR_11 , VAR_12 , sizeof ( VAR_13 ) ) ) < 0 ) return VAR_14 ; METHOD_2 ( VAR_15 , VAR_16 , "header=\'%s\'\\n" , VAR_17 ) ; VAR_18 = METHOD_3 ( VAR_19 , VAR_20 , VAR_21 -> VAR_22 , VAR_23 ) ; if ( VAR_24 < 0 ) return VAR_25 ; if ( VAR_26 == 0 ) break ; VAR_27 -> VAR_28 ++ ; } if ( VAR_29 -> VAR_30 == - 1 && VAR_31 -> VAR_32 && VAR_33 -> VAR_34 == 2000000000 ) VAR_35 -> VAR_36 = 1 ; METHOD_4 ( VAR_37 -> VAR_38 , & VAR_39 -> VAR_40 ) ; METHOD_5 ( & VAR_41 -> VAR_42 ) ; return VAR_43 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 , * VAR_2 ; VAR_3 = METHOD_1 ( METHOD_2 ( VAR_4 ) , "&" , & VAR_5 ) ;  while ( VAR_6 != 0 ) {  METHOD_3 ( VAR_7 -> VAR_8 , METHOD_4 ( VAR_9 ) ) ; VAR_10 = METHOD_5 ( 0 , "&" , & VAR_11 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * METHOD_1 , unsigned TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 ; if ( ! METHOD_2 && VAR_5 ) { VAR_6 = METHOD_3 ( VAR_7 , VAR_8 ) ; if ( ! VAR_9 ) return - VAR_10 ; METHOD_4 ( VAR_11 , VAR_12 ) ; METHOD_5 = VAR_13 ; }  VAR_14 = VAR_15 -> METHOD_6 ( VAR_16 , METHOD_7 , VAR_17 ) ;  METHOD_8 ( VAR_18 ) ; return VAR_19 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 , VAR_4 ) ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 , * VAR_5 ; METHOD_2 ( & VAR_6 ) ; STRUCT_OR_UNION_5 = METHOD_3 ( VAR_7 , VAR_8 , VAR_9 ) ; if ( ! STRUCT_OR_UNION_6 ) { METHOD_4 ( & VAR_10 ) ; VAR_11 = METHOD_5 ( sizeof ( * VAR_12 ) , VAR_13 ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 ;  METHOD_6 ( & VAR_22 -> VAR_23 , 0 ) ;  METHOD_7 ( & VAR_24 ) ; STRUCT_OR_UNION_7 = METHOD_8 ( VAR_25 , VAR_26 , VAR_27 ) ; if ( STRUCT_OR_UNION_8 ) { METHOD_9 ( VAR_28 ) ; } else { METHOD_10 ( & VAR_29 -> VAR_30 , VAR_31 ) ; STRUCT_OR_UNION_9 = VAR_32 ; } }  if ( ! METHOD_11 ( & STRUCT_OR_UNION_10 -> VAR_33 , 1 , VAR_34 ) )  STRUCT_OR_UNION_11 = VAR_35 ; METHOD_12 ( & VAR_36 ) ; return STRUCT_OR_UNION_12 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , struct STRUCT_OR_UNION_1 * VAR_4 ) { TYPE_5 VAR_5 , VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 ; struct STRUCT_OR_UNION_3 TYPE_6 * VAR_9 ; struct STRUCT_OR_UNION_4 TYPE_7 * VAR_10 ; struct STRUCT_OR_UNION_5 VAR_11 ; struct STRUCT_OR_UNION_6 VAR_12 ; if ( VAR_13 && METHOD_1 ( & VAR_14 , VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ) return - VAR_19 ; VAR_20 = 0 ; VAR_21 = METHOD_2 ( VAR_22 , & VAR_23 , & VAR_24 ) ; if ( ! VAR_25 ) return VAR_26 ; VAR_27 = METHOD_3 ( VAR_28 -> VAR_29 ) ; if ( VAR_30 ) goto VAR_31 ; VAR_32 = VAR_33 ; VAR_34 = ( struct STRUCT_OR_UNION_7 TYPE_8 * ) VAR_35 ; while ( VAR_36 < VAR_37 ) { if ( VAR_38 & VAR_39 ) { VAR_40 = METHOD_4 ( VAR_41 , ( struct STRUCT_OR_UNION_8 TYPE_9 * ) VAR_42 , & VAR_43 , VAR_44 & ~ VAR_45 , VAR_46 ) ; if ( VAR_47 < 0 ) break ; VAR_48 = METHOD_5 ( VAR_49 , & VAR_50 -> VAR_51 ) ; ++ VAR_52 ; } else { VAR_53 = METHOD_6 ( VAR_54 , ( struct STRUCT_OR_UNION_9 TYPE_10 * ) VAR_55 , & VAR_56 , VAR_57 & ~ VAR_58 , VAR_59 ) ; if ( VAR_60 < 0 ) break ; VAR_61 = METHOD_7 ( VAR_62 , & VAR_63 -> VAR_64 ) ; ++ VAR_65 ; } if ( VAR_66 ) break ; ++ VAR_67 ; if ( VAR_68 & VAR_69 ) VAR_70 |= VAR_71 ; if ( VAR_72 ) { METHOD_8 ( VAR_73 ) ; * VAR_74 = METHOD_9 ( VAR_75 , * VAR_76 ) ; if ( VAR_77 -> VAR_78 < 0 ) { VAR_79 -> VAR_80 = VAR_81 -> VAR_82 = 0 ; break ; } if ( VAR_83 -> VAR_84 == 0 && VAR_85 -> VAR_86 == 0 ) break ; } if ( VAR_87 . VAR_88 & VAR_89 ) break ; METHOD_10 ( ) ; }  VAR_90 :  METHOD_11 ( VAR_91 -> VAR_92 , VAR_93 ) ; if ( VAR_94 == 0 )  return VAR_95 ;  if ( VAR_96 != 0 ) { if ( VAR_97 != - VAR_98 ) { VAR_99 -> VAR_100 -> VAR_101 = - VAR_102 ; }  return VAR_103 ;  }  return VAR_104 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 )  { if ( VAR_1 ) { if ( VAR_2 -> VAR_3 ) { METHOD_1 ( VAR_4 -> VAR_5 ) ; VAR_6 -> VAR_7 = 0 ; VAR_8 -> VAR_9 = 0 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; } } }
static TYPE_0 METHOD_0 ( const volatile TYPE_1 * VAR_0 , TYPE_2 VAR_1 )  { TYPE_3 VAR_2 ;  for ( VAR_3 = 0 ; VAR_4 < VAR_5 ; VAR_6 += 8 * 32 )  { ( TYPE_4 ) VAR_7 [ VAR_8 + 0 * 32 ] ; ( TYPE_5 ) VAR_9 [ VAR_10 + 1 * 32 ] ; ( TYPE_6 ) VAR_11 [ VAR_12 + 2 * 32 ] ; ( TYPE_7 ) VAR_13 [ VAR_14 + 3 * 32 ] ; ( TYPE_8 ) VAR_15 [ VAR_16 + 4 * 32 ] ; ( TYPE_9 ) VAR_17 [ VAR_18 + 5 * 32 ] ; ( TYPE_10 ) VAR_19 [ VAR_20 + 6 * 32 ] ; ( TYPE_11 ) VAR_21 [ VAR_22 + 7 * 32 ] ; }  ( TYPE_12 ) VAR_23 [ VAR_24 - 1 ] ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; struct STRUCT_OR_UNION_5 VAR_8 , * VAR_9 , * VAR_10 ; TYPE_5 VAR_11 ; TYPE_6 VAR_12 = 0 , VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_7 VAR_16 = 0 ; struct STRUCT_OR_UNION_6 VAR_17 ; TYPE_8 * VAR_18 = METHOD_1 ( STRUCT_OR_UNION_7 ) -> VAR_19 ; METHOD_2 ( VAR_20 , & VAR_21 -> VAR_22 ) ; METHOD_3 ( "blocks%u/%urequestedforinode%lu\\n" , VAR_23 , VAR_24 , STRUCT_OR_UNION_8 -> VAR_25 ) ; VAR_26 = METHOD_4 ( STRUCT_OR_UNION_9 , VAR_27 , & VAR_28 ) ; if ( VAR_29 ) { if ( VAR_30 == VAR_31 ) { if ( ( VAR_32 & VAR_33 ) == 0 ) { goto VAR_34 ; } } else if ( VAR_35 == VAR_36 ) { VAR_37 = VAR_38 - METHOD_5 ( VAR_39 . VAR_40 ) + METHOD_6 ( & VAR_41 ) ; VAR_42 = METHOD_7 ( & VAR_43 ) - ( VAR_44 - METHOD_8 ( VAR_45 . VAR_46 ) ) ; goto VAR_47 ; } else { METHOD_9 ( ) ; } } VAR_48 = METHOD_10 ( STRUCT_OR_UNION_10 , VAR_49 , VAR_50 ) ; if ( METHOD_11 ( VAR_51 ) ) { VAR_52 = METHOD_12 ( VAR_53 ) ; VAR_54 = VAR_55 ; goto VAR_56 ; } VAR_57 = METHOD_13 ( STRUCT_OR_UNION_11 ) ; if ( VAR_58 [ VAR_59 ] . VAR_60 == VAR_61 && VAR_62 != 0 ) { METHOD_14 ( STRUCT_OR_UNION_12 -> VAR_63 , "badextentaddress" "inode:%lu,iblock:%d,depth:%d" , STRUCT_OR_UNION_13 -> VAR_64 , VAR_65 , VAR_66 ) ; VAR_67 = - VAR_68 ; goto VAR_69 ; } VAR_70 = VAR_71 [ VAR_72 ] . VAR_73 ; VAR_74 = VAR_75 [ VAR_76 ] . VAR_77 ; if ( VAR_78 ) { TYPE_9 VAR_79 = METHOD_15 ( VAR_80 -> VAR_81 ) ; TYPE_10 VAR_82 = METHOD_16 ( VAR_83 ) ; unsigned TYPE_11 VAR_84 ; VAR_85 = METHOD_17 ( VAR_86 ) ; if ( VAR_87 >= VAR_88 && VAR_89 < VAR_90 + VAR_91 ) { VAR_92 = VAR_93 - VAR_94 + VAR_95 ; VAR_96 = VAR_97 - ( VAR_98 - VAR_99 ) ; METHOD_18 ( "%ufitinto%u:%d->%llu\\n" , VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; if ( ! METHOD_19 ( VAR_104 ) ) { METHOD_20 ( STRUCT_OR_UNION_14 , VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ; goto VAR_109 ; } VAR_110 = METHOD_21 ( VAR_111 , STRUCT_OR_UNION_15 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 , VAR_117 , VAR_118 ) ; return VAR_119 ; } } if ( ( VAR_120 & VAR_121 ) == 0 ) { METHOD_22 ( STRUCT_OR_UNION_16 , VAR_122 , VAR_123 ) ; goto VAR_124 ; } VAR_125 . VAR_126 = VAR_127 ; VAR_128 = METHOD_23 ( STRUCT_OR_UNION_17 , VAR_129 , & VAR_130 . VAR_131 , & VAR_132 . VAR_133 ) ; if ( VAR_134 ) goto VAR_135 ; VAR_136 . VAR_137 = VAR_138 ; VAR_139 = METHOD_24 ( STRUCT_OR_UNION_18 , VAR_140 , & VAR_141 . VAR_142 , & VAR_143 . VAR_144 ) ; if ( VAR_145 ) goto VAR_146 ; if ( VAR_147 > VAR_148 && ! ( VAR_149 & VAR_150 ) ) VAR_151 = VAR_152 ; else if ( VAR_153 > VAR_154 && ( VAR_155 & VAR_156 ) ) VAR_157 = VAR_158 ; VAR_159 . VAR_160 = METHOD_25 ( VAR_161 ) ; VAR_162 . VAR_163 = METHOD_26 ( VAR_164 ) ; VAR_165 = METHOD_27 ( STRUCT_OR_UNION_19 , & VAR_166 , VAR_167 ) ; if ( VAR_168 ) VAR_169 = METHOD_28 ( & VAR_170 ) ; else VAR_171 = VAR_172 ; VAR_173 . STRUCT_OR_UNION_20 = STRUCT_OR_UNION_21 ; VAR_174 . VAR_175 = METHOD_29 ( STRUCT_OR_UNION_22 , VAR_176 , VAR_177 ) ; VAR_178 . VAR_179 = VAR_180 ; VAR_181 . VAR_182 = VAR_183 ; if ( METHOD_30 ( STRUCT_OR_UNION_23 -> VAR_184 ) ) VAR_185 . VAR_186 = VAR_187 ; else VAR_188 . VAR_189 = 0 ; VAR_190 = METHOD_31 ( VAR_191 , & VAR_192 , & VAR_193 ) ; if ( ! VAR_194 ) goto VAR_195 ; METHOD_32 ( "allocatenewblock:goal%llu,found%llu/%u\\n" , VAR_196 . VAR_197 , VAR_198 , VAR_199 ) ; METHOD_33 ( & VAR_200 , VAR_201 ) ; VAR_202 . VAR_203 = METHOD_34 ( VAR_204 . VAR_205 ) ; if ( VAR_206 & VAR_207 ) { METHOD_35 ( & VAR_208 ) ;  if ( VAR_209 == VAR_210 ) {  if ( VAR_211 ) VAR_212 -> VAR_213 = VAR_214 ; else METHOD_36 ( STRUCT_OR_UNION_24 , VAR_215 ) ;  }  } if ( METHOD_37 ( METHOD_38 ( STRUCT_OR_UNION_25 ) -> VAR_216 & VAR_217 ) ) { if ( VAR_218 -> VAR_219 ) { VAR_220 = METHOD_39 ( VAR_221 ) ; if ( VAR_222 + VAR_223 . VAR_224 > METHOD_40 ( VAR_225 -> VAR_226 ) + METHOD_41 ( VAR_227 ) ) METHOD_42 ( STRUCT_OR_UNION_26 ) -> VAR_228 &= ~ VAR_229 ; } else { METHOD_43 ( VAR_230 -> VAR_231 == 0 ) ; METHOD_44 ( STRUCT_OR_UNION_27 -> VAR_232 , VAR_233 , "inode%lu,eh->eh_entries=0!" , STRUCT_OR_UNION_28 -> VAR_234 ) ; } } VAR_235 = METHOD_45 ( VAR_236 , STRUCT_OR_UNION_29 , VAR_237 , & VAR_238 , VAR_239 ) ; if ( VAR_240 ) { METHOD_46 ( STRUCT_OR_UNION_30 ) ; METHOD_47 ( VAR_241 , STRUCT_OR_UNION_31 , 0 , METHOD_48 ( & VAR_242 ) , METHOD_49 ( & VAR_243 ) , 0 ) ; goto VAR_244 ; } VAR_245 = METHOD_50 ( & VAR_246 ) ; VAR_247 = METHOD_51 ( & VAR_248 ) ; if ( VAR_249 > VAR_250 ) VAR_251 = VAR_252 ; METHOD_52 ( VAR_253 ) ; if ( VAR_254 & VAR_255 ) METHOD_53 ( STRUCT_OR_UNION_32 , VAR_256 , 1 ) ; if ( ( VAR_257 & VAR_258 ) == 0 ) { METHOD_54 ( STRUCT_OR_UNION_33 , VAR_259 , VAR_260 , VAR_261 , VAR_262 ) ; METHOD_55 ( VAR_263 , STRUCT_OR_UNION_34 , 1 ) ; } else METHOD_56 ( VAR_264 , STRUCT_OR_UNION_35 , 0 ) ; VAR_265 : if ( VAR_266 > VAR_267 ) VAR_268 = VAR_269 ; METHOD_57 ( STRUCT_OR_UNION_36 , VAR_270 ) ; METHOD_58 ( VAR_271 ) ; VAR_272 -> VAR_273 = STRUCT_OR_UNION_37 -> VAR_274 -> VAR_275 ; VAR_276 -> VAR_277 = VAR_278 ; VAR_279 : if ( VAR_280 ) { METHOD_59 ( VAR_281 ) ; METHOD_60 ( VAR_282 ) ; } return VAR_283 ? VAR_284 : VAR_285 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 )  { struct STRUCT_OR_UNION_1 * VAR_4 = METHOD_1 ( VAR_5 -> VAR_6 ) ; struct STRUCT_OR_UNION_2 * VAR_7 ; TYPE_4 VAR_8 = 0 ;  VAR_9 &= ( VAR_10 | VAR_11 ) ;  METHOD_2 ( ) ; VAR_12 = METHOD_3 ( VAR_13 -> VAR_14 ) ; if ( VAR_15 == VAR_16 ) goto VAR_17 ; METHOD_4 ( & VAR_18 -> VAR_19 ) ; if ( VAR_20 -> VAR_21 != VAR_22 ||  ( VAR_23 -> VAR_24 & VAR_25 ) != VAR_26 )  goto VAR_27 ; if ( VAR_28 == VAR_29 ) VAR_30 = & VAR_31 -> VAR_32 ; else if ( METHOD_5 ( VAR_33 -> VAR_34 . VAR_35 , VAR_36 -> VAR_37 , VAR_38 ) != 0 ) goto VAR_39 ; METHOD_6 ( VAR_40 ) ;  METHOD_7 ( VAR_41 , VAR_42 , & VAR_43 -> VAR_44 , VAR_45 ) ;  VAR_46 = 1 ; VAR_47 : METHOD_8 ( & VAR_48 -> VAR_49 ) ; VAR_50 : METHOD_9 ( ) ; if ( ! VAR_51 && VAR_52 != VAR_53 ) {  METHOD_10 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ;  VAR_58 = 1 ; } return VAR_59 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 METHOD_1 { METHOD_2 ( TYPE_3 , VAR_2 METHOD_3 ( ( ( TYPE_4 METHOD_4 & ( VAR_3 METHOD_5 METHOD_6 == ( VAR_4 METHOD_7 METHOD_8 METHOD_9 ( VAR_5 , VAR_6 METHOD_10 ( ( ( VAR_7 METHOD_11 << 8 METHOD_12 | ( VAR_8 METHOD_13 METHOD_14 TYPE_5 * VAR_9 , * VAR_10 ; TYPE_6 VAR_11 = 0 ; TYPE_7 VAR_12 ; TYPE_8 VAR_13 ; register TYPE_9 VAR_14 ; register unsigned TYPE_10 * VAR_15 ; TYPE_11 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_12 VAR_23 , VAR_24 ; unsigned TYPE_13 VAR_25 , VAR_26 , VAR_27 , * VAR_28 , VAR_29 [ 257 ] ; METHOD_15 ( VAR_30 != ( const TYPE_14 * METHOD_16 VAR_31 METHOD_17 ; METHOD_18 ( VAR_32 -> VAR_33 == VAR_34 METHOD_19 ; if ( VAR_35 -> VAR_36 != VAR_37 METHOD_20 ( TYPE_15 METHOD_21 METHOD_22 ( VAR_38 , METHOD_23 ( METHOD_24 , "%s" , VAR_39 -> VAR_40 METHOD_25 ; METHOD_26 ( VAR_41 != ( TYPE_16 * METHOD_27 VAR_42 METHOD_28 ; METHOD_29 ( VAR_43 -> VAR_44 == VAR_45 METHOD_30 ; VAR_46 = METHOD_31 ( VAR_47 , VAR_48 METHOD_32 ; VAR_49 = METHOD_33 ( VAR_50 , VAR_51 , VAR_52 , VAR_53 METHOD_34 ; if ( VAR_54 == VAR_55 METHOD_35 { VAR_56 = METHOD_36 ( VAR_57 METHOD_37 ; return ( ( TYPE_17 * METHOD_38 VAR_58 METHOD_39 ; } VAR_59 = METHOD_40 ( VAR_60 , 6 , VAR_61 METHOD_41 ; if ( ( VAR_62 != 6 METHOD_42 || ( ( METHOD_43 ( ( TYPE_18 * METHOD_44 VAR_63 , "GIF87" , 5 METHOD_45 != 0 METHOD_46 && ( METHOD_47 ( ( TYPE_19 * METHOD_48 VAR_64 , "GIF89" , 5 METHOD_49 != 0 METHOD_50 METHOD_51 METHOD_52 METHOD_53 ( VAR_65 , "ImproperImageHeader" METHOD_54 ; VAR_66 . VAR_67 = METHOD_55 ( VAR_68 METHOD_56 ; VAR_69 . VAR_70 = METHOD_57 ( VAR_71 METHOD_58 ; VAR_72 = ( unsigned TYPE_20 METHOD_59 METHOD_60 ( VAR_73 METHOD_61 ; VAR_74 = ( unsigned TYPE_21 METHOD_62 METHOD_63 ( VAR_75 METHOD_64 ; VAR_76 = ( unsigned TYPE_22 METHOD_65 METHOD_66 ( VAR_77 METHOD_67 ; VAR_78 = 1 ; VAR_79 = VAR_80 << ( ( ( TYPE_23 METHOD_68 VAR_81 & 0x07 METHOD_69 + 1 METHOD_70 ; VAR_82 = ( unsigned TYPE_24 * METHOD_71 METHOD_72 ( ( TYPE_25 METHOD_73 METHOD_74 ( VAR_83 , 256 METHOD_75 , 3UL * sizeof ( * VAR_84 METHOD_76 METHOD_77 ; if ( VAR_85 == ( unsigned TYPE_26 * METHOD_78 VAR_86 METHOD_79  METHOD_80 ( VAR_87 , "MemoryAllocationFailed" METHOD_81 ;  if ( METHOD_82 ( ( TYPE_27 METHOD_83 VAR_88 , 0x80 METHOD_84 != 0 METHOD_85 { VAR_89 = METHOD_86 ( VAR_90 , ( TYPE_28 METHOD_87 ( 3 * VAR_91 METHOD_88 , VAR_92 METHOD_89 ; if ( VAR_93 != ( TYPE_29 METHOD_90 ( 3 * VAR_94 METHOD_91 METHOD_92 { VAR_95 = ( unsigned TYPE_30 * METHOD_93 METHOD_94 ( VAR_96 METHOD_95 ; METHOD_96 ( VAR_97 , "InsufficientImageDataInFile" METHOD_97 ; } } VAR_98 = 0 ; VAR_99 = 0 ; VAR_100 = 0 ; VAR_101 = 1 ; VAR_102 = ( - 1 METHOD_98 ; VAR_103 = 0 ; VAR_104 = METHOD_99 ( VAR_105 , VAR_106 METHOD_100 ; for ( ; ; METHOD_101 { VAR_107 = METHOD_102 ( VAR_108 , 1 , & VAR_109 METHOD_103 ; if ( VAR_110 != 1 METHOD_104 break ; if ( VAR_111 == ( unsigned TYPE_31 METHOD_105 ';' METHOD_106 break ; if ( VAR_112 == ( unsigned TYPE_32 METHOD_107 '!' METHOD_108 { VAR_113 = METHOD_109 ( VAR_114 , 1 , & VAR_115 METHOD_110 ; if ( VAR_116 != 1 METHOD_111 { VAR_117 = ( unsigned TYPE_33 * METHOD_112 METHOD_113 ( VAR_118 METHOD_114 ; VAR_119 = METHOD_115 ( VAR_120 METHOD_116 ; METHOD_117 ( VAR_121 , "UnableToReadExtensionBlock" METHOD_118 ; } switch ( VAR_122 METHOD_119 { case 0xf9 : { while ( METHOD_120 ( VAR_123 , VAR_124 METHOD_121 != 0 METHOD_122 ; VAR_125 = ( TYPE_34 METHOD_123 ( VAR_126 [ 0 ] >> 2 METHOD_124 ; VAR_127 = ( TYPE_35 METHOD_125 ( ( VAR_128 [ 2 ] << 8 METHOD_126 | VAR_129 [ 1 ] METHOD_127 ; if ( ( TYPE_36 METHOD_128 ( VAR_130 [ 0 ] & 0x01 METHOD_129 == 0x01 METHOD_130 VAR_131 = ( TYPE_37 METHOD_131 VAR_132 [ 3 ] ; break ; } case 0xfe : { TYPE_38 * VAR_133 ; TYPE_39 VAR_134 ; VAR_135 = METHOD_132 ( ( TYPE_40 * METHOD_133 VAR_136 METHOD_134 ; for ( VAR_137 = 0 ; ; VAR_138 += VAR_139 METHOD_135 { VAR_140 = ( TYPE_41 METHOD_136 METHOD_137 ( VAR_141 , VAR_142 METHOD_138 ; if ( VAR_143 == 0 METHOD_139 break ; VAR_144 [ VAR_145 ] = '\\0' ; ( TYPE_42 METHOD_140 METHOD_141 ( & VAR_146 , ( const TYPE_43 * METHOD_142 VAR_147 METHOD_143 ; } ( TYPE_44 METHOD_144 METHOD_145 ( VAR_148 , "comment" , VAR_149 , VAR_150 METHOD_146 ; VAR_151 = METHOD_147 ( VAR_152 METHOD_148 ; break ; } case 0xff : { TYPE_45 VAR_153 ; VAR_154 = VAR_155 ; if ( METHOD_149 ( VAR_156 , VAR_157 METHOD_150 != 0 METHOD_151 VAR_158 = METHOD_152 ( ( TYPE_46 * METHOD_153 VAR_159 , "NETSCAPE2.0" , 11 METHOD_154 == 0 ? VAR_160 : VAR_161 ; if ( VAR_162 != VAR_163 METHOD_155 { while ( METHOD_156 ( VAR_164 , VAR_165 METHOD_157 != 0 METHOD_158 VAR_166 = ( TYPE_47 METHOD_159 ( ( VAR_167 [ 2 ] << 8 METHOD_160 | VAR_168 [ 1 ] METHOD_161 ; break ; } else { TYPE_48 VAR_169 [ VAR_170 ] ; TYPE_49 VAR_171 , VAR_172 , VAR_173 ; TYPE_50 VAR_174 , VAR_175 , VAR_176 , VAR_177 ; TYPE_51 * VAR_178 ; unsigned TYPE_52 * VAR_179 ; VAR_180 = METHOD_162 ( ( TYPE_53 * METHOD_163 VAR_181 , "ICCRGBG1012" , 11 METHOD_164 == 0 ? VAR_182 : VAR_183 ; VAR_184 = METHOD_165 ( ( TYPE_54 * METHOD_166 VAR_185 , "ImageMagick" , 11 METHOD_167 == 0 ? VAR_186 : VAR_187 ; VAR_188 = METHOD_168 ( ( TYPE_55 * METHOD_169 VAR_189 , "MGK8BIM0000" , 11 METHOD_170 == 0 ? VAR_190 : VAR_191 ; VAR_192 = METHOD_171 ( ( TYPE_56 * METHOD_172 VAR_193 , "MGKIPTC0000" , 11 METHOD_173 == 0 ? VAR_194 : VAR_195 ; VAR_196 ++ ; ( TYPE_57 METHOD_174 METHOD_175 ( VAR_197 , METHOD_176 ( METHOD_177 , "ReadingGIFapplicationextension" METHOD_178 ; VAR_198 = ( unsigned TYPE_58 * METHOD_179 METHOD_180 ( 255UL , sizeof ( * VAR_199 METHOD_181 METHOD_182 ; if ( VAR_200 == ( unsigned TYPE_59 * METHOD_183 VAR_201 METHOD_184 { VAR_202 = METHOD_185 ( VAR_203 METHOD_186 ; METHOD_187 ( VAR_204 , "MemoryAllocationFailed" METHOD_188 ; } VAR_205 = 255 ; for ( VAR_206 = 0 ; ; METHOD_189 { VAR_207 = ( TYPE_60 METHOD_190 METHOD_191 ( VAR_208 , & VAR_209 [ VAR_210 ] METHOD_192 ; if ( VAR_211 == 0 METHOD_193 break ; VAR_212 += VAR_213 ; if ( VAR_214 > ( VAR_215 - 255 METHOD_194 METHOD_195 { VAR_216 += 4096 ; VAR_217 = ( unsigned TYPE_61 * METHOD_196 METHOD_197 ( VAR_218 , ( TYPE_62 METHOD_198 VAR_219 , sizeof ( * VAR_220 METHOD_199 METHOD_200 ; if ( VAR_221 == ( unsigned TYPE_63 * METHOD_201 VAR_222 METHOD_202 { VAR_223 = METHOD_203 ( VAR_224 METHOD_204 ; METHOD_205 ( VAR_225 , "MemoryAllocationFailed" METHOD_206 ; } } } VAR_226 = METHOD_207 ( VAR_227 , ( TYPE_64 METHOD_208 VAR_228 METHOD_209 ; if ( VAR_229 == ( TYPE_65 * METHOD_210 VAR_230 METHOD_211 { VAR_231 = METHOD_212 ( VAR_232 METHOD_213 ; METHOD_214 ( VAR_233 , "MemoryAllocationFailed" METHOD_215 ; } if ( VAR_234 != VAR_235 METHOD_216 ( TYPE_66 METHOD_217 METHOD_218 ( VAR_236 , "8bim" , sizeof ( VAR_237 METHOD_219 METHOD_220 ; else if ( VAR_238 != VAR_239 METHOD_221 ( TYPE_67 METHOD_222 METHOD_223 ( VAR_240 , "icc" , sizeof ( VAR_241 METHOD_224 METHOD_225 ; else if ( VAR_242 != VAR_243 METHOD_226 ( TYPE_68 METHOD_227 METHOD_228 ( VAR_244 , "iptc" , sizeof ( VAR_245 METHOD_229 METHOD_230 ; else if ( VAR_246 != VAR_247 METHOD_231 { ( TYPE_69 METHOD_232 METHOD_233 ( VAR_248 , "magick" , sizeof ( VAR_249 METHOD_234 METHOD_235 ; VAR_250 -> VAR_251 = METHOD_236 ( ( TYPE_70 * METHOD_237 VAR_252 + 6 , ( TYPE_71 * * METHOD_238 VAR_253 METHOD_239 ; } else ( TYPE_72 METHOD_240 METHOD_241 ( VAR_254 , sizeof ( VAR_255 METHOD_242 , "gif:%.11s" , VAR_256 METHOD_243 ; VAR_257 = ( unsigned TYPE_73 * METHOD_244 METHOD_245 ( VAR_258 METHOD_246 ; if ( VAR_259 == VAR_260 METHOD_247 ( TYPE_74 METHOD_248 METHOD_249 ( VAR_261 , VAR_262 , VAR_263 , VAR_264 METHOD_250 ; VAR_265 = METHOD_251 ( VAR_266 METHOD_252 ; ( TYPE_75 METHOD_253 METHOD_254 ( VAR_267 , METHOD_255 ( METHOD_256 , "profilename=%s" , VAR_268 METHOD_257 ; } break ; } default : { while ( METHOD_258 ( VAR_269 , VAR_270 METHOD_259 != 0 METHOD_260 ; break ; } } } if ( VAR_271 != ( unsigned TYPE_76 METHOD_261 ',' METHOD_262 continue ; if ( VAR_272 != 0 METHOD_263 { METHOD_264 ( VAR_273 , VAR_274 , VAR_275 METHOD_265 ; if ( METHOD_266 ( VAR_276 METHOD_267 == ( TYPE_77 * METHOD_268 VAR_277 METHOD_269 { VAR_278 = METHOD_270 ( VAR_279 METHOD_271 ; VAR_280 = ( unsigned TYPE_78 * METHOD_272 METHOD_273 ( VAR_281 METHOD_274 ; return ( ( TYPE_79 * METHOD_275 VAR_282 METHOD_276 ; } VAR_283 = METHOD_277 ( VAR_284 METHOD_278 ; } VAR_285 ++ ; VAR_286 -> VAR_287 = VAR_288 -> VAR_289 ; ( TYPE_80 METHOD_279 METHOD_280 ( VAR_290 , VAR_291 METHOD_281 ; METHOD_282 ( VAR_292 METHOD_283 ; ( TYPE_81 METHOD_284 METHOD_285 ( VAR_293 , VAR_294 METHOD_286 ; METHOD_287 ( VAR_295 METHOD_288 ; VAR_296 -> VAR_297 = VAR_298 ; VAR_299 -> VAR_300 = VAR_301 ; VAR_302 . VAR_303 = ( TYPE_82 METHOD_289 METHOD_290 ( VAR_304 METHOD_291 ; VAR_305 . VAR_306 = ( TYPE_83 METHOD_292 METHOD_293 ( VAR_307 METHOD_294 ; VAR_308 -> VAR_309 = METHOD_295 ( VAR_310 METHOD_296 ; VAR_311 -> VAR_312 = METHOD_297 ( VAR_313 METHOD_298 ; VAR_314 -> VAR_315 = 8 ; VAR_316 = ( unsigned TYPE_84 METHOD_299 METHOD_300 ( VAR_317 METHOD_301 ; VAR_318 -> VAR_319 = METHOD_302 ( ( TYPE_85 METHOD_303 VAR_320 , 0x40 METHOD_304 != 0 ? VAR_321 : VAR_322 ; VAR_323 -> VAR_324 = METHOD_305 ( ( TYPE_86 METHOD_306 VAR_325 , 0x80 METHOD_307 == 0 ? VAR_326 : VAR_327 << ( ( TYPE_87 METHOD_308 ( VAR_328 & 0x07 METHOD_309 + 1 METHOD_310 ; if ( VAR_329 >= ( TYPE_88 METHOD_311 VAR_330 -> VAR_331 METHOD_312 VAR_332 = ( - 1 METHOD_313 ; VAR_333 -> VAR_334 . VAR_335 = VAR_336 . VAR_337 ; VAR_338 -> VAR_339 . VAR_340 = VAR_341 . VAR_342 ; VAR_343 -> VAR_344 . VAR_345 = VAR_346 . VAR_347 ; VAR_348 -> VAR_349 . VAR_350 = VAR_351 . VAR_352 ; VAR_353 -> VAR_354 = VAR_355 ; VAR_356 -> VAR_357 = 100 ; VAR_358 -> VAR_359 = ( TYPE_89 METHOD_314 VAR_360 ; VAR_361 -> VAR_362 = VAR_363 ; VAR_364 -> VAR_365 = VAR_366 >= 0 ? VAR_367 : VAR_368 ; VAR_369 = 0 ; VAR_370 = 0 ; if ( ( VAR_371 -> VAR_372 == 0 METHOD_315 || ( VAR_373 -> VAR_374 == 0 METHOD_316 METHOD_317 { VAR_375 = ( unsigned TYPE_90 * METHOD_318 METHOD_319 ( VAR_376 METHOD_320 ; VAR_377 = METHOD_321 ( VAR_378 METHOD_322 ; METHOD_323 ( VAR_379 , "NegativeOrZeroImageSize" METHOD_324 ; } if ( METHOD_325 ( VAR_380 , VAR_381 -> VAR_382 , VAR_383 METHOD_326 == VAR_384 METHOD_327 { VAR_385 = ( unsigned TYPE_91 * METHOD_328 METHOD_329 ( VAR_386 METHOD_330 ; VAR_387 = METHOD_331 ( VAR_388 METHOD_332 ; METHOD_333 ( VAR_389 , "MemoryAllocationFailed" METHOD_334 ; } if ( METHOD_335 ( ( TYPE_92 METHOD_336 VAR_390 , 0x80 METHOD_337 == 0 METHOD_338 { VAR_391 = VAR_392 ; for ( VAR_393 = 0 ; VAR_394 < ( TYPE_93 METHOD_339 VAR_395 -> VAR_396 ; VAR_397 ++ METHOD_340 { VAR_398 -> VAR_399 [ VAR_400 ] . VAR_401 = ( TYPE_94 METHOD_341 METHOD_342 ( * VAR_402 ++ METHOD_343 ; VAR_403 -> VAR_404 [ VAR_405 ] . VAR_406 = ( TYPE_95 METHOD_344 METHOD_345 ( * VAR_407 ++ METHOD_346 ; VAR_408 -> VAR_409 [ VAR_410 ] . VAR_411 = ( TYPE_96 METHOD_347 METHOD_348 ( * VAR_412 ++ METHOD_349 ; if ( VAR_413 == VAR_414 METHOD_350 { VAR_415 -> VAR_416 [ VAR_417 ] . VAR_418 = ( TYPE_97 METHOD_351 VAR_419 ; VAR_420 -> VAR_421 = VAR_422 -> VAR_423 [ VAR_424 ] ; } } VAR_425 -> VAR_426 = VAR_427 -> VAR_428 [ METHOD_352 ( ( TYPE_98 METHOD_353 VAR_429 , ( TYPE_99 METHOD_354 VAR_430 -> VAR_431 - 1 METHOD_355 ] ; } else { unsigned TYPE_100 * VAR_432 ; VAR_433 = ( unsigned TYPE_101 * METHOD_356 METHOD_357 ( VAR_434 -> VAR_435 , 3 * sizeof ( * VAR_436 METHOD_358 METHOD_359 ; if ( VAR_437 == ( unsigned TYPE_102 * METHOD_360 VAR_438 METHOD_361 { VAR_439 = ( unsigned TYPE_103 * METHOD_362 METHOD_363 ( VAR_440 METHOD_364 ; VAR_441 = METHOD_365 ( VAR_442 METHOD_366 ; METHOD_367 ( VAR_443 , "MemoryAllocationFailed" METHOD_368 ; } VAR_444 = METHOD_369 ( VAR_445 , ( 3 * VAR_446 -> VAR_447 METHOD_370 * sizeof ( * VAR_448 METHOD_371 , VAR_449 METHOD_372 ; if ( VAR_450 != ( TYPE_104 METHOD_373 ( 3 * VAR_451 -> VAR_452 METHOD_374 METHOD_375 { VAR_453 = ( unsigned TYPE_105 * METHOD_376 METHOD_377 ( VAR_454 METHOD_378 ; VAR_455 = ( unsigned TYPE_106 * METHOD_379 METHOD_380 ( VAR_456 METHOD_381 ; VAR_457 = METHOD_382 ( VAR_458 METHOD_383 ; METHOD_384 ( VAR_459 , "InsufficientImageDataInFile" METHOD_385 ; } VAR_460 = VAR_461 ; for ( VAR_462 = 0 ; VAR_463 < ( TYPE_107 METHOD_386 VAR_464 -> VAR_465 ; VAR_466 ++ METHOD_387 { VAR_467 -> VAR_468 [ VAR_469 ] . VAR_470 = ( TYPE_108 METHOD_388 METHOD_389 ( * VAR_471 ++ METHOD_390 ; VAR_472 -> VAR_473 [ VAR_474 ] . VAR_475 = ( TYPE_109 METHOD_391 METHOD_392 ( * VAR_476 ++ METHOD_393 ; VAR_477 -> VAR_478 [ VAR_479 ] . VAR_480 = ( TYPE_110 METHOD_394 METHOD_395 ( * VAR_481 ++ METHOD_396 ; if ( VAR_482 == VAR_483 METHOD_397 VAR_484 -> VAR_485 [ VAR_486 ] . VAR_487 = ( TYPE_111 METHOD_398 VAR_488 ; } VAR_489 = ( unsigned TYPE_112 * METHOD_399 METHOD_400 ( VAR_490 METHOD_401 ; } if ( VAR_491 -> VAR_492 == 1.0 METHOD_402 { for ( VAR_493 = 0 ; VAR_494 < ( TYPE_113 METHOD_403 VAR_495 -> VAR_496 ; VAR_497 ++ METHOD_404 if ( METHOD_405 ( VAR_498 -> VAR_499 + VAR_500 METHOD_406 == VAR_501 METHOD_407 break ; ( TYPE_114 METHOD_408 METHOD_409 ( VAR_502 , VAR_503 == ( TYPE_115 METHOD_410 VAR_504 -> VAR_505 ? VAR_506 : VAR_507 , VAR_508 METHOD_411 ; } if ( ( VAR_509 -> VAR_510 != VAR_511 METHOD_412 && ( VAR_512 -> VAR_513 != 0 METHOD_413 METHOD_414 if ( VAR_514 -> VAR_515 >= ( VAR_516 -> VAR_517 + VAR_518 -> VAR_519 - 1 METHOD_415 METHOD_416 break ; VAR_520 = METHOD_417 ( VAR_521 , VAR_522 -> VAR_523 , VAR_524 -> VAR_525 , VAR_526 METHOD_418 ; if ( VAR_527 == VAR_528 METHOD_419 return ( METHOD_420 ( VAR_529 METHOD_421 METHOD_422 ; if ( VAR_530 -> VAR_531 != VAR_532 METHOD_423 VAR_533 = METHOD_424 ( VAR_534 , VAR_535 METHOD_425 ; else VAR_536 = METHOD_426 ( VAR_537 , VAR_538 , VAR_539 METHOD_427 ; if ( ( VAR_540 -> VAR_541 == VAR_542 METHOD_428 && ( VAR_543 == VAR_544 METHOD_429 METHOD_430 { VAR_545 = ( unsigned TYPE_116 * METHOD_431 METHOD_432 ( VAR_546 METHOD_433 ; VAR_547 = METHOD_434 ( VAR_548 METHOD_435 ; METHOD_436 ( VAR_549 , "CorruptImage" METHOD_437 ; } VAR_550 += VAR_551 -> VAR_552 * VAR_553 -> VAR_554 ; if ( VAR_555 -> VAR_556 != 0 METHOD_438 if ( VAR_557 -> VAR_558 >= ( VAR_559 -> VAR_560 + VAR_561 -> VAR_562 - 1 METHOD_439 METHOD_440 break ; VAR_563 = ( - 1 METHOD_441 ; VAR_564 = METHOD_442 ( VAR_565 , VAR_566 , ( TYPE_117 METHOD_443 VAR_567 -> VAR_568 - 1 , VAR_569 -> VAR_570 METHOD_444 ; if ( VAR_571 == VAR_572 METHOD_445 break ; } VAR_573 -> VAR_574 = VAR_575 ; VAR_576 = METHOD_446 ( VAR_577 METHOD_447 ; VAR_578 = ( unsigned TYPE_118 * METHOD_448 METHOD_449 ( VAR_579 METHOD_450 ; if ( ( VAR_580 -> VAR_581 == 0 METHOD_451 || ( VAR_582 -> VAR_583 == 0 METHOD_452 METHOD_453 METHOD_454 ( VAR_584 , "NegativeOrZeroImageSize" METHOD_455 ; ( TYPE_119 METHOD_456 METHOD_457 ( VAR_585 METHOD_458 ; return ( METHOD_459 ( VAR_586 METHOD_460 METHOD_461 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_1 = VAR_2 ; METHOD_1 ( "btif_hl_select_close_connected" ) ;  return METHOD_2 ( VAR_3 [ 1 ] , & VAR_4 , sizeof ( VAR_5 ) , 0 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 -> VAR_3 -> VAR_4 , & VAR_5 ) ; if ( VAR_6 -> VAR_7 != 0 ) { METHOD_2 ( VAR_8 , VAR_9 , METHOD_3 ( VAR_10 ) ) ; if ( ( METHOD_4 ( VAR_11 -> VAR_12 , VAR_13 ) != VAR_14 -> VAR_15 ) ) { METHOD_5 ( VAR_16 , VAR_17 -> VAR_18 , VAR_19 ) ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 , unsigned TYPE_4 * VAR_4 ) { unsigned TYPE_5 VAR_5 ; VAR_6 * VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; do { VAR_11 = METHOD_2 ( VAR_12 , VAR_13 ) ; if ( METHOD_3 ( * VAR_14 ) ) { if ( METHOD_4 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ) { VAR_20 += ( VAR_21 - VAR_22 ) >> VAR_23 ; continue ; } }  if ( METHOD_5 ( VAR_24 ) )  METHOD_6 ( VAR_25 , VAR_26 , VAR_27 , VAR_28 ) ; else METHOD_7 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 , VAR_33 ) ; VAR_34 += ( VAR_35 - VAR_36 ) >> VAR_37 ; } while ( VAR_38 ++ , VAR_39 = VAR_40 , VAR_41 != VAR_42 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 ; const struct STRUCT_OR_UNION_0 * VAR_8 ; if ( ! VAR_9 -> VAR_10 ) METHOD_1 ( ( VAR_11 , "ES-IS" ) ) ; if ( VAR_12 <= 2 ) { METHOD_2 ( ( VAR_13 , VAR_14 -> VAR_15 ? "badpkt!" : "noheaderatall!" ) ) ; return ; } VAR_16 = ( const struct STRUCT_OR_UNION_1 * ) VAR_17 ; METHOD_3 ( * VAR_18 ) ; VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = VAR_23 ; if ( VAR_24 -> VAR_25 != VAR_26 ) { METHOD_4 ( ( VAR_27 , "nlpid0x%02xpacketnotsupported" , VAR_28 -> VAR_29 ) ) ; return ; } if ( VAR_30 -> VAR_31 != VAR_32 ) { METHOD_5 ( ( VAR_33 , "version%dpacketnotsupported" , VAR_34 -> VAR_35 ) ) ; return ; } if ( VAR_36 > VAR_37 ) { METHOD_6 ( ( VAR_38 , "lengthindicator(%u)>PDUsize(%u)!" , VAR_39 , VAR_40 ) ) ; return ; } if ( VAR_41 < sizeof ( struct STRUCT_OR_UNION_2 ) + 2 ) { METHOD_7 ( ( VAR_42 , "lengthindicator%u<minPDUsize:" , VAR_43 ) ) ; while ( VAR_44 < VAR_45 -> VAR_46 ) METHOD_8 ( ( VAR_47 , "%02X" , * VAR_48 ++ ) ) ; return ; } VAR_49 = VAR_50 -> VAR_51 & VAR_52 ; if ( VAR_53 -> VAR_54 < 1 ) { METHOD_9 ( ( VAR_55 , "%s%s,length%u" , VAR_56 -> VAR_57 ? "" : "," , METHOD_10 ( VAR_58 , "unknowntype(%u)" , VAR_59 ) , VAR_60 ) ) ; return ; } else METHOD_11 ( ( VAR_61 , "%slength%u\\n\\t%s(%u)" , VAR_62 -> VAR_63 ? "" : "," , VAR_64 , METHOD_12 ( VAR_65 , "unknowntype:%u" , VAR_66 ) , VAR_67 ) ) ; METHOD_13 ( ( VAR_68 , ",v:%u%s" , VAR_69 -> VAR_70 , VAR_71 -> VAR_72 == VAR_73 ? "" : "unsupported" ) ) ; METHOD_14 ( ( VAR_74 , ",checksum:0x%04x" , METHOD_15 ( VAR_75 -> VAR_76 ) ) ) ; METHOD_16 ( VAR_77 , VAR_78 , METHOD_17 ( VAR_79 -> VAR_80 ) , 7 , VAR_81 ) ; METHOD_18 ( ( VAR_82 , ",holdingtime:%us,lengthindicator:%u" , METHOD_19 ( VAR_83 -> VAR_84 ) , VAR_85 ) ) ; if ( VAR_86 -> VAR_87 > 1 ) METHOD_20 ( VAR_88 , VAR_89 , "\\n\\t" , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; VAR_90 += sizeof ( struct STRUCT_OR_UNION_4 ) ; VAR_91 -= sizeof ( struct STRUCT_OR_UNION_5 ) ; switch ( VAR_92 ) { case VAR_93 : { const TYPE_6 * VAR_94 , * VAR_95 , * VAR_96 ; TYPE_7 VAR_97 , VAR_98 , VAR_99 ; METHOD_21 ( * VAR_100 ) ; if ( VAR_101 < 1 ) { METHOD_22 ( ( VAR_102 , ",badredirect/li" ) ) ; return ; } VAR_103 = * VAR_104 ; VAR_105 ++ ; VAR_106 -- ; METHOD_23 ( * VAR_107 , VAR_108 ) ; if ( VAR_109 < VAR_110 ) { METHOD_24 ( ( VAR_111 , ",badredirect/li" ) ) ; return ; } VAR_112 = VAR_113 ; VAR_114 += VAR_115 ; VAR_116 -= VAR_117 ; METHOD_25 ( ( VAR_118 , "\\n\\t%s" , METHOD_26 ( VAR_119 , VAR_120 , VAR_121 ) ) ) ; METHOD_27 ( * VAR_122 ) ; if ( VAR_123 < 1 ) { METHOD_28 ( ( VAR_124 , ",badredirect/li" ) ) ; return ; } VAR_125 = * VAR_126 ; VAR_127 ++ ; VAR_128 -- ; METHOD_29 ( * VAR_129 , VAR_130 ) ; if ( VAR_131 < VAR_132 ) { METHOD_30 ( ( VAR_133 , ",badredirect/li" ) ) ; return ; } VAR_134 = VAR_135 ; VAR_136 += VAR_137 ; VAR_138 -= VAR_139 ; METHOD_31 ( * VAR_140 ) ; if ( VAR_141 < 1 ) { METHOD_32 ( ( VAR_142 , ",badredirect/li" ) ) ; return ; } VAR_143 = * VAR_144 ; VAR_145 ++ ; METHOD_33 ( * VAR_146 , VAR_147 ) ; if ( VAR_148 < VAR_149 ) { METHOD_34 ( ( VAR_150 , ",badredirect/li" ) ) ; return ; } VAR_151 = VAR_152 ; VAR_153 += VAR_154 ; VAR_155 -= VAR_156 ; if ( VAR_157 == 6 ) METHOD_35 ( ( VAR_158 , "\\n\\tSNPA(length:%u):%s" , VAR_159 , METHOD_36 ( VAR_160 , VAR_161 ) ) ) ; else METHOD_37 ( ( VAR_162 , "\\n\\tSNPA(length:%u):%s" , VAR_163 , METHOD_38 ( VAR_164 , VAR_165 , VAR_166 , VAR_167 ) ) ) ; if ( VAR_168 != 0 ) METHOD_39 ( ( VAR_169 , "\\n\\tNET(length:%u)%s" , VAR_170 , METHOD_40 ( VAR_171 , VAR_172 , VAR_173 ) ) ) ; break ; } case VAR_174 : METHOD_41 ( * VAR_175 ) ; if ( VAR_176 < 1 ) { METHOD_42 ( ( VAR_177 , ",badesh/li" ) ) ; return ; } VAR_178 = * VAR_179 ; VAR_180 ++ ; VAR_181 -- ; METHOD_43 ( ( VAR_182 , "\\n\\tNumberofSourceAddresses:%u" , VAR_183 ) ) ; while ( VAR_184 > 0 ) { METHOD_44 ( * VAR_185 ) ; if ( VAR_186 < 1 ) { METHOD_45 ( ( VAR_187 , ",badesh/li" ) ) ; return ; } VAR_188 = * VAR_189 ; VAR_190 ++ ; VAR_191 -- ; METHOD_46 ( * VAR_192 , VAR_193 ) ; if ( VAR_194 < VAR_195 ) { METHOD_47 ( ( VAR_196 , ",badesh/li" ) ) ; return ; } METHOD_48 ( ( VAR_197 , "\\n\\tNET(length:%u):%s" , VAR_198 , METHOD_49 ( VAR_199 , VAR_200 , VAR_201 ) ) ) ; VAR_202 += VAR_203 ; VAR_204 -= VAR_205 ; VAR_206 -- ; } break ; case VAR_207 : { METHOD_50 ( * VAR_208 ) ; if ( VAR_209 < 1 ) { METHOD_51 ( ( VAR_210 , ",badish/li" ) ) ; return ; } VAR_211 = * VAR_212 ; VAR_213 ++ ; VAR_214 -- ; METHOD_52 ( * VAR_215 , VAR_216 ) ; if ( VAR_217 < VAR_218 ) { METHOD_53 ( ( VAR_219 , ",badish/li" ) ) ; return ; } METHOD_54 ( ( VAR_220 , "\\n\\tNET(length:%u):%s" , VAR_221 , METHOD_55 ( VAR_222 , VAR_223 , VAR_224 ) ) ) ; VAR_225 += VAR_226 ; VAR_227 -= VAR_228 ; break ; } default : if ( VAR_229 -> VAR_230 <= 1 ) { if ( VAR_231 < VAR_232 -> VAR_233 ) METHOD_56 ( VAR_234 , VAR_235 , "\\n\\t" , VAR_236 -> VAR_237 - VAR_238 ) ; } return ; } while ( VAR_239 != 0 ) { TYPE_8 VAR_240 , VAR_241 ; const TYPE_9 * VAR_242 ; if ( VAR_243 < 2 ) { METHOD_57 ( ( VAR_244 , ",badopts/li" ) ) ; return ; } METHOD_58 ( * VAR_245 , 2 ) ; VAR_246 = * VAR_247 ++ ; VAR_248 = * VAR_249 ++ ; VAR_250 -= 2 ; if ( VAR_251 > VAR_252 ) { METHOD_59 ( ( VAR_253 , ",opt(%d)toolong" , VAR_254 ) ) ; return ; } VAR_255 -= VAR_256 ; VAR_257 = VAR_258 ; METHOD_60 ( ( VAR_259 , "\\n\\t%sOption%u,length%u,value:" , METHOD_61 ( VAR_260 , "Unknown" , VAR_261 ) , VAR_262 , VAR_263 ) ) ; switch ( VAR_264 ) { case VAR_265 : if ( VAR_266 == 2 ) { METHOD_62 ( * VAR_267 , 2 ) ; METHOD_63 ( ( VAR_268 , "%us" , METHOD_64 ( VAR_269 ) ) ) ; } else METHOD_65 ( ( VAR_270 , "(badlength)" ) ) ; break ; case VAR_271 : while ( VAR_272 > 0 ) {  METHOD_66 ( * VAR_273 ) ;  METHOD_67 ( ( VAR_274 , "%s(0x%02x)" , METHOD_68 ( VAR_275 , "unknown" , * VAR_276 ) , * VAR_277 ) ) ; if ( VAR_278 > 1 ) METHOD_69 ( ( VAR_279 , "," ) ) ; VAR_280 ++ ; VAR_281 -- ; } break ; case VAR_282 : case VAR_283 : case VAR_284 : case VAR_285 : case VAR_286 : default : METHOD_70 ( VAR_287 , VAR_288 , "\\n\\t" , VAR_289 ) ; break ; } if ( VAR_290 -> VAR_291 > 1 ) METHOD_71 ( VAR_292 , VAR_293 , "\\n\\t" , VAR_294 ) ; VAR_295 += VAR_296 ; } VAR_297 :  return ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 ) {   return METHOD_1 ( VAR_2 , VAR_3 , VAR_4 -> VAR_5 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; union STRUCT_OR_UNION_7 * VAR_9 = ( union STRUCT_OR_UNION_8 * ) VAR_10 ; struct STRUCT_OR_UNION_9 * VAR_11 = & VAR_12 -> VAR_13 ; struct STRUCT_OR_UNION_10 * VAR_14 = & VAR_15 -> VAR_16 ; struct STRUCT_OR_UNION_11 * VAR_17 = METHOD_2 ( VAR_18 ) -> VAR_19 ; TYPE_2 VAR_20 ; TYPE_3 VAR_21 ;  TYPE_4 VAR_22 ;  if ( VAR_23 -> VAR_24 != 0 ) return - VAR_25 ; if ( VAR_26 -> VAR_27 > VAR_28 ) return - VAR_29 ; if ( METHOD_3 ( VAR_30 == 0 ) ) VAR_31 = METHOD_4 ( sizeof ( * VAR_32 ) ) + 128 ; VAR_33 = VAR_34 + 128 ; VAR_35 = METHOD_5 ( VAR_36 , VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 & VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 , VAR_51 -> VAR_52 , & VAR_53 ) ; if ( METHOD_6 ( VAR_54 != 0 ) ) return VAR_55 ; VAR_56 = container_of ( VAR_57 , struct STRUCT_OR_UNION_12 , VAR_58 ) ; if ( METHOD_7 ( VAR_59 ) ) VAR_60 -> VAR_61 = METHOD_8 ( VAR_62 -> VAR_63 ) ; VAR_64 = METHOD_9 ( & VAR_65 -> VAR_66 , VAR_67 ) ; if ( METHOD_10 ( VAR_68 != 0 ) ) return VAR_69 ; VAR_70 = & VAR_71 -> VAR_72 . VAR_73 ; if ( VAR_74 -> VAR_75 != VAR_76 ) { VAR_77 = METHOD_11 ( VAR_78 , VAR_79 -> VAR_80 , & VAR_81 -> VAR_82 , & VAR_83 -> VAR_84 ) ;  if ( VAR_85 == 0 && VAR_86 -> VAR_87 -> VAR_88 . VAR_89 * VAR_90 <  VAR_91 -> VAR_92 ) { METHOD_12 ( "Surfacebackupbufferistoosmall.\\n" ) ; METHOD_13 ( & VAR_93 -> VAR_94 ) ; VAR_95 = - VAR_96 ;  goto VAR_97 ;  } } else if ( VAR_98 -> VAR_99 & VAR_100 ) VAR_101 = METHOD_14 ( VAR_102 , VAR_103 , VAR_104 -> VAR_105 , VAR_106 -> VAR_107 & VAR_108 , & VAR_109 , & VAR_110 -> VAR_111 , & VAR_112 -> VAR_113 ) ; if ( METHOD_15 ( VAR_114 != 0 ) ) { METHOD_16 ( & VAR_115 ) ; goto VAR_116 ; } VAR_117 = METHOD_17 ( VAR_118 ) ; VAR_119 = METHOD_18 ( VAR_120 , VAR_121 -> VAR_122 , & VAR_123 -> VAR_124 , VAR_125 -> VAR_126 & VAR_127 , VAR_128 , & VAR_129 , VAR_130 ) ; if ( METHOD_19 ( VAR_131 != 0 ) ) { METHOD_20 ( & VAR_132 ) ; METHOD_21 ( & VAR_133 ) ; goto VAR_134 ; } VAR_135 -> VAR_136 = VAR_137 -> VAR_138 . VAR_139 . VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = VAR_144 -> VAR_145 ; if ( VAR_146 -> VAR_147 ) { VAR_148 -> VAR_149 = METHOD_22 ( & VAR_150 -> VAR_151 -> VAR_152 . VAR_153 ) ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 -> VAR_158 . VAR_159 * VAR_160 ; VAR_161 -> VAR_162 = VAR_163 ; } else { VAR_164 -> VAR_165 = 0 ; VAR_166 -> VAR_167 = 0 ; VAR_168 -> VAR_169 = VAR_170 ; } METHOD_23 ( & VAR_171 ) ; VAR_172 : METHOD_24 ( & VAR_173 -> VAR_174 ) ; return VAR_175 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * const VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { TYPE_9 VAR_8 ; const TYPE_10 VAR_9 = VAR_10 + VAR_11 + VAR_12 ; TYPE_11 * VAR_13 = VAR_14 ; TYPE_12 * VAR_15 = VAR_16 + VAR_17 - 1 ; TYPE_13 * VAR_18 = VAR_19 - VAR_20 ; TYPE_14 * VAR_21 = VAR_22 + VAR_23 ; for ( VAR_24 = 0 ; VAR_25 < VAR_26 ; ++ VAR_27 ) {  METHOD_1 ( VAR_28 , VAR_29 [ 0 ] , VAR_30 ) ;   METHOD_2 ( VAR_31 , VAR_32 [ 0 ] , VAR_33 ) ;  VAR_34 += VAR_35 ; VAR_36 += VAR_37 ; VAR_38 += VAR_39 ; VAR_40 += VAR_41 ; } VAR_42 = VAR_43 - VAR_44 ; VAR_45 = VAR_46 + VAR_47 * ( VAR_48 - 1 ) - VAR_49 ; VAR_50 = VAR_51 + VAR_52 * - VAR_53 - VAR_54 ; VAR_55 = VAR_56 + VAR_57 * VAR_58 - VAR_59 ; for ( VAR_60 = 0 ; VAR_61 < VAR_62 ; ++ VAR_63 ) {  METHOD_3 ( VAR_64 , VAR_65 , VAR_66 ) ;  VAR_67 += VAR_68 ; } for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; ++ VAR_72 ) {  METHOD_4 ( VAR_73 , VAR_74 , VAR_75 ) ;  VAR_76 += VAR_77 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , union STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 ;  struct STRUCT_OR_UNION_8 * VAR_14 ;  union STRUCT_OR_UNION_9 * VAR_15 = VAR_16 ; union STRUCT_OR_UNION_10 * VAR_17 = & VAR_18 -> VAR_19 ; union STRUCT_OR_UNION_11 VAR_20 ;  TYPE_1 VAR_21 = 0 ;  TYPE_2 VAR_22 ; TYPE_3 VAR_23 ; METHOD_1 ( VAR_24 , 0 , sizeof ( struct STRUCT_OR_UNION_12 ) ) ; VAR_25 -> VAR_26 = VAR_27 -> VAR_28 . VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 . VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; if ( METHOD_2 ( & VAR_38 -> VAR_39 . VAR_40 ) & VAR_41 ) VAR_42 -> VAR_43 = VAR_44 -> VAR_45 . VAR_46 ; METHOD_3 ( "%s:dst=%pI6" , VAR_47 , & VAR_48 -> VAR_49 ) ; if ( VAR_50 ) VAR_51 -> VAR_52 = METHOD_4 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 ) ; if ( VAR_57 ) { VAR_58 -> VAR_59 = VAR_60 -> VAR_61 . VAR_62 ; VAR_63 -> VAR_64 = VAR_65 -> VAR_66 . VAR_67 ; METHOD_5 ( "src=%pI6-" , & VAR_68 -> VAR_69 ) ; }  VAR_70 = METHOD_6 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ;  if ( ! VAR_75 || VAR_76 ) goto VAR_77 ; VAR_78 = & VAR_79 -> VAR_80 . VAR_81 ; VAR_82 = METHOD_7 ( VAR_83 ) ; if ( ! METHOD_8 ( VAR_84 ) ) { METHOD_9 ( & VAR_85 , & VAR_86 -> VAR_87 , METHOD_10 ( VAR_88 -> VAR_89 ) ) ; METHOD_11 ( ) ; METHOD_12 ( VAR_90 , & VAR_91 -> VAR_92 , VAR_93 ) { if ( ! VAR_94 -> VAR_95 || ( VAR_96 -> VAR_97 != VAR_98 ) ) continue ; if ( ( VAR_99 -> VAR_100 . VAR_101 . VAR_102 == VAR_103 ) && ( METHOD_13 ( & VAR_104 , & VAR_105 -> VAR_106 ) ) ) { METHOD_14 ( ) ; goto VAR_107 ; } } METHOD_15 ( ) ; METHOD_16 ( VAR_108 ) ; VAR_109 = VAR_110 ; } METHOD_17 ( ) ; METHOD_18 ( VAR_111 , & VAR_112 -> VAR_113 , VAR_114 ) { if ( ! VAR_115 -> VAR_116 ) continue ; if ( ( VAR_117 -> VAR_118 == VAR_119 ) && ( VAR_120 -> VAR_121 . VAR_122 . VAR_123 == VAR_124 ) && ( VAR_125 <= METHOD_19 ( & VAR_126 -> VAR_127 ) ) ) { VAR_128 = METHOD_20 ( VAR_129 , & VAR_130 -> VAR_131 ) ; if ( ! VAR_132 || ( VAR_133 < VAR_134 ) ) { VAR_135 = & VAR_136 -> VAR_137 ; VAR_138 = VAR_139 ; } } } METHOD_21 ( ) ; if ( VAR_140 ) { VAR_141 -> VAR_142 = VAR_143 -> VAR_144 . VAR_145 ; VAR_146 -> VAR_147 = VAR_148 -> VAR_149 . VAR_150 ;  VAR_151 = METHOD_22 ( VAR_152 , VAR_153 , VAR_154 , VAR_155 ) ;  } VAR_156 : if ( ! METHOD_23 ( VAR_157 ) ) { struct STRUCT_OR_UNION_13 * VAR_158 ; VAR_159 = ( struct STRUCT_OR_UNION_14 * ) VAR_160 ; VAR_161 -> VAR_162 = VAR_163 ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 ? VAR_168 -> VAR_169 -> VAR_170 : 0 ; METHOD_24 ( "rt6_dst:%pI6rt6_src:%pI6\\n" , & VAR_171 -> VAR_172 . VAR_173 , & VAR_174 -> VAR_175 ) ; } else { VAR_176 -> VAR_177 = VAR_178 ; METHOD_25 ( "noroute\\n" ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ,  struct STRUCT_OR_UNION_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 ; TYPE_2 VAR_6 ; for ( VAR_7 = 0 ; VAR_8 < 4 ; VAR_9 ++ ) if ( VAR_10 [ VAR_11 ] . VAR_12 ) VAR_13 -> VAR_14 . VAR_15 |= ( VAR_16 << VAR_17 ) ; }
const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { static TYPE_6 VAR_5 = 0 ; TYPE_7 VAR_6 [ 128 ] ; TYPE_8 * VAR_7 ; while ( * VAR_8 ) { switch ( * VAR_9 ) { case '*' : VAR_10 ++ ; while ( VAR_11 < VAR_12 ) { const TYPE_9 * VAR_13 ; VAR_14 ++ ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ) ;  VAR_21 -- ; if ( VAR_22 == VAR_23 ) return ( VAR_24 ) ; if ( VAR_25 == VAR_26 ) return ( VAR_27 ) ; VAR_28 = VAR_29 ; } return ( VAR_30 ) ; case '|' : VAR_31 ++ ; if ( VAR_32 >= VAR_33 ) return ( VAR_34 ) ; break ; case '%' : VAR_35 ++ ; VAR_36 = VAR_37 ; break ; case '' : VAR_38 ++ ; return ( VAR_39 ) ; break ; case '[' : VAR_40 ++ ; if ( VAR_41 >= VAR_42 ) return ( VAR_43 ) ; METHOD_2 ( VAR_44 , 0 , sizeof ( VAR_45 ) ) ; VAR_46 = METHOD_3 ( VAR_47 , ']' ) ; if ( ( TYPE_10 ) ( VAR_48 - VAR_49 + 1 ) > sizeof ( VAR_50 ) ) { return ( VAR_51 ) ; } METHOD_4 ( VAR_52 , VAR_53 , VAR_54 - VAR_55 ) ; VAR_56 [ VAR_57 - VAR_58 ] = '\\0' ; VAR_59 = VAR_60 + 1 ; VAR_61 = METHOD_5 ( VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 ) ; if ( VAR_67 == VAR_68 ) return ( VAR_69 ) ; break ; default : METHOD_6 ( ( VAR_70 , "%c" , * VAR_71 ) ) ; VAR_72 ++ ; break ; } } if ( ! VAR_73 && VAR_74 < VAR_75 ) { TYPE_11 VAR_76 = METHOD_7 ( VAR_77 , VAR_78 ) ; METHOD_8 ( ( VAR_79 , "Data:(%lubytes)\\n" , ( unsigned TYPE_12 ) VAR_80 ) ) ; METHOD_9 ( VAR_81 , VAR_82 , VAR_83 ) ; return ( VAR_84 + VAR_85 ) ; } return ( VAR_86 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , unsigned TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 -> VAR_5 -> VAR_6 = VAR_7 ;  if ( VAR_8 -> VAR_9 -> VAR_10 ) {  METHOD_1 ( VAR_11 -> VAR_12 -> VAR_13 ) ; VAR_14 -> VAR_15 -> VAR_16 = 0 ; } METHOD_2 ( "GsmXSMPClient:Initializingclient%s" , VAR_17 -> VAR_18 -> VAR_19 ) ; * VAR_20 = 0 ; * VAR_21 |= VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = VAR_30 ; * VAR_31 |= VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = VAR_36 ; VAR_37 -> VAR_38 . VAR_39 = VAR_40 ; * VAR_41 |= VAR_42 ; VAR_43 -> VAR_44 . VAR_45 = VAR_46 ; VAR_47 -> VAR_48 . VAR_49 = VAR_50 ; * VAR_51 |= VAR_52 ; VAR_53 -> VAR_54 . VAR_55 = VAR_56 ; VAR_57 -> VAR_58 . VAR_59 = VAR_60 ; * VAR_61 |= VAR_62 ; VAR_63 -> VAR_64 . VAR_65 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = VAR_70 ; * VAR_71 |= VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = VAR_76 ; VAR_77 -> VAR_78 . VAR_79 = VAR_80 ; * VAR_81 |= VAR_82 ; VAR_83 -> VAR_84 . VAR_85 = VAR_86 ; VAR_87 -> VAR_88 . VAR_89 = VAR_90 ; * VAR_91 |= VAR_92 ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 -> VAR_98 . VAR_99 = VAR_100 ; * VAR_101 |= VAR_102 ; VAR_103 -> VAR_104 . VAR_105 = VAR_106 ; VAR_107 -> VAR_108 . VAR_109 = VAR_110 ; * VAR_111 |= VAR_112 ; VAR_113 -> VAR_114 . VAR_115 = VAR_116 ; VAR_117 -> VAR_118 . VAR_119 = VAR_120 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const struct STRUCT_OR_UNION_1 * VAR_4 ; const TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; METHOD_1 ( ( VAR_8 , "wb-prep:" ) ) ; if ( VAR_9 < sizeof ( * VAR_10 ) ) { return ( - 1 ) ; } VAR_11 = METHOD_2 ( & VAR_12 -> VAR_13 ) ; VAR_14 = ( const struct STRUCT_OR_UNION_2 * ) ( VAR_15 + 1 ) ;  while ( -- VAR_16 >= 0 && ! METHOD_3 ( * VAR_17 ) ) {  const struct STRUCT_OR_UNION_3 * VAR_18 , * VAR_19 ; TYPE_5 VAR_20 = '<' ; METHOD_4 ( ( VAR_21 , "%u/%s:%u" , METHOD_5 ( & VAR_22 -> VAR_23 ) , METHOD_6 ( VAR_24 , & VAR_25 -> VAR_26 . VAR_27 ) , METHOD_7 ( & VAR_28 -> VAR_29 . VAR_30 ) ) ) ; VAR_31 = ( struct STRUCT_OR_UNION_4 * ) ( VAR_32 + 1 ) ;  for ( VAR_33 = VAR_34 + VAR_35 -> VAR_36 ; VAR_37 < VAR_38 && ! METHOD_8 ( * VAR_39 ) ; ++ VAR_40 ) {  METHOD_9 ( ( VAR_41 , "%c%s:%u" , VAR_42 , METHOD_10 ( VAR_43 , & VAR_44 -> VAR_45 ) , METHOD_11 ( & VAR_46 -> VAR_47 ) ) ) ; VAR_48 = ',' ; } METHOD_12 ( ( VAR_49 , ">" ) ) ; VAR_50 = ( struct STRUCT_OR_UNION_5 * ) VAR_51 ; } return ( ( TYPE_6 * ) VAR_52 <= VAR_53 ? 0 : - 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 * VAR_7 ; VAR_8 = ( TYPE_9 * ) VAR_9 -> VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) - VAR_13 ; if ( VAR_14 > VAR_15 ) { METHOD_2 ( & VAR_16 -> VAR_17 ) ; return VAR_18 ; }  VAR_19 = METHOD_3 ( VAR_20 , VAR_21 ) & VAR_22 ;  if ( VAR_23 < ( VAR_24 + 8 ) ) { return VAR_25 ; } METHOD_4 ( VAR_26 -> VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ;  VAR_31 . VAR_32 = METHOD_5 ( VAR_33 | ( VAR_34 -> VAR_35 ++ & VAR_36 ) ) ;  VAR_37 . VAR_38 = METHOD_6 ( VAR_39 ) ;  METHOD_7 ( VAR_40 , VAR_41 , VAR_42 ) ;  METHOD_8 ( VAR_43 , ( TYPE_10 * ) & VAR_44 , sizeof ( TYPE_11 ) ) ; METHOD_9 ( VAR_45 , VAR_46 -> VAR_47 , VAR_48 ) ;  METHOD_10 ( VAR_49 , VAR_50 , VAR_51 ) ;   METHOD_11 ( VAR_52 , VAR_53 , VAR_54 ) ;   VAR_55 = METHOD_12 ( VAR_56 , VAR_57 ) & VAR_58 ;  if ( VAR_59 >= ( VAR_60 + 8 ) ) { METHOD_13 ( & VAR_61 -> VAR_62 ) ; } return VAR_63 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; METHOD_1 ( VAR_5 ) ; METHOD_2 ( VAR_6 , VAR_7 ) ; VAR_8 = METHOD_3 ( VAR_9 ) ; if ( METHOD_4 ( VAR_10 ) != VAR_11 ) METHOD_5 ( VAR_12 , "keymustbe%dbytes" , VAR_13 ) ; if ( METHOD_6 ( VAR_14 , VAR_15 , VAR_16 , ( unsigned TYPE_4 * ) METHOD_7 ( VAR_17 ) , VAR_18 , - 1 ) != 1 ) METHOD_8 ( VAR_19 , VAR_20 ) ;  return VAR_21 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 ; unsigned TYPE_2 VAR_11 , VAR_12 , VAR_13 ; TYPE_3 VAR_14 ; TYPE_4 VAR_15 ; TYPE_5 VAR_16 , VAR_17 ; TYPE_6 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; VAR_31 -> VAR_32 [ VAR_33 ] = VAR_34 -> VAR_35 . VAR_36 ; METHOD_1 ( "-->%s()\\n" , VAR_37 ) ; VAR_38 = - 1 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { VAR_43 = VAR_44 -> VAR_45 [ VAR_46 ] ; if ( ! VAR_47 ) { VAR_48 = VAR_49 ; continue ; } if ( METHOD_2 ( VAR_50 ) && VAR_51 -> METHOD_3 ( METHOD_4 ( VAR_52 ) , VAR_53 ) ) { METHOD_5 ( "replaceinslot%d\\n" , VAR_54 ) ; VAR_55 -> VAR_56 = & VAR_57 -> VAR_58 [ VAR_59 ] ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] ; METHOD_6 ( "<--%s()=ok[replace]\\n" , VAR_65 ) ; return VAR_66 ; } } if ( VAR_67 >= 0 ) { METHOD_7 ( "insertinfreeslot%d\\n" , VAR_68 ) ; VAR_69 -> VAR_70 = & VAR_71 -> VAR_72 [ VAR_73 ] ; VAR_74 -> VAR_75 = VAR_76 ; METHOD_8 ( "<--%s()=ok[insert]\\n" , VAR_77 ) ; return VAR_78 ; } VAR_79 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_80 ) ; if ( ! VAR_81 ) return VAR_82 ; VAR_83 -> VAR_84 [ 0 ] = METHOD_10 ( VAR_85 ) ; VAR_86 = METHOD_11 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_87 ) ; if ( ! VAR_88 ) return VAR_89 ; VAR_90 -> VAR_91 [ 1 ] = METHOD_12 ( VAR_92 ) ; METHOD_13 ( "nospareslots\\n" ) ; VAR_93 = VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; VAR_98 ++ ) { VAR_99 = VAR_100 -> VAR_101 [ VAR_102 ] ; if ( METHOD_14 ( VAR_103 ) ) { VAR_104 -> VAR_105 [ VAR_106 ] = 0xff ; VAR_107 = VAR_108 ; continue ; } VAR_109 = VAR_110 -> METHOD_15 ( METHOD_16 ( VAR_111 ) , VAR_112 ) ; VAR_113 >>= VAR_114 & VAR_115 ; VAR_116 -> VAR_117 [ VAR_118 ] = VAR_119 & VAR_120 ; } if ( VAR_121 ) { METHOD_17 ( "havemeta\\n" ) ; goto VAR_122 ; } VAR_123 = 0 ; VAR_124 = VAR_125 -> VAR_126 [ 0 ] ; for ( VAR_127 = 1 ; VAR_128 < VAR_129 ; VAR_130 ++ ) VAR_131 |= VAR_132 -> VAR_133 [ VAR_134 ] ^ VAR_135 ; METHOD_18 ( "onlyleaves;dissimilarity=%lx\\n" , VAR_136 ) ; if ( ( VAR_137 & VAR_138 ) == 0 ) { if ( ( VAR_139 -> VAR_140 [ VAR_141 ] ^ VAR_142 ) == 0 ) goto VAR_143 ;  goto VAR_144 ;  } VAR_145 : METHOD_19 ( "splitnode\\n" ) ; VAR_146 -> VAR_147 [ 0 ] . VAR_148 = METHOD_20 ( VAR_149 ) ; VAR_150 -> VAR_151 = VAR_152 -> VAR_153 ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 -> VAR_159 = METHOD_21 ( VAR_160 ) ; VAR_161 -> VAR_162 = - 1 ; VAR_163 : METHOD_22 ( "do_split_node\\n" ) ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 ; VAR_168 -> VAR_169 = 0 ; for ( VAR_170 = 0 ; VAR_171 < VAR_172 ; VAR_173 ++ ) { VAR_174 = VAR_175 -> VAR_176 [ VAR_177 ] ; if ( VAR_178 != 0xff ) for ( VAR_179 = VAR_180 + 1 ; VAR_181 < VAR_182 + 1 ; VAR_183 ++ ) if ( VAR_184 -> VAR_185 [ VAR_186 ] == VAR_187 ) goto VAR_188 ; } VAR_189 : METHOD_23 ( "sameslot:%x%x[%02x]\\n" , VAR_190 , VAR_191 , VAR_192 ) ; METHOD_24 ( VAR_193 >= VAR_194 ) ; METHOD_25 ( VAR_195 >= VAR_196 + 1 ) ; METHOD_26 ( VAR_197 >= VAR_198 ) ; VAR_199 -> VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < VAR_204 ; VAR_205 ++ ) if ( METHOD_27 ( VAR_206 -> VAR_207 [ VAR_208 ] ) ) VAR_209 -> VAR_210 [ VAR_211 ] = VAR_212 -> VAR_213 [ VAR_214 ] ; else VAR_215 -> VAR_216 [ VAR_217 ] = VAR_218 ; METHOD_28 ( VAR_219 -> VAR_220 [ VAR_221 ] != VAR_222 ) ; VAR_223 -> VAR_224 [ VAR_225 ] = METHOD_29 ( VAR_226 ) ; VAR_227 = - 1 ; VAR_228 = 0 ; for ( VAR_229 = 0 ; VAR_230 < VAR_231 ; VAR_232 ++ ) { if ( METHOD_30 ( VAR_233 -> VAR_234 [ VAR_235 ] ) ) continue ; if ( VAR_236 -> VAR_237 [ VAR_238 ] == VAR_239 ) { VAR_240 -> VAR_241 [ VAR_242 ++ ] = VAR_243 -> VAR_244 [ VAR_245 ] ; VAR_246 -> VAR_247 ++ ; } else { do { VAR_248 ++ ; } while ( VAR_249 -> VAR_250 [ VAR_251 ] != VAR_252 ) ; VAR_253 -> VAR_254 [ VAR_255 ] = VAR_256 -> VAR_257 [ VAR_258 ] ; } } METHOD_31 ( "filtered:f=%xn=%x\\n" , VAR_259 , VAR_260 ) ; if ( VAR_261 -> VAR_262 [ VAR_263 ] != VAR_264 ) { do { VAR_265 ++ ; } while ( VAR_266 -> VAR_267 [ VAR_268 ] != VAR_269 ) ; VAR_270 -> VAR_271 = & VAR_272 -> VAR_273 [ VAR_274 ] ; VAR_275 -> VAR_276 = VAR_277 ; } else { VAR_278 -> VAR_279 = & VAR_280 -> VAR_281 [ VAR_282 ++ ] ; VAR_283 -> VAR_284 = VAR_285 ; } METHOD_32 ( VAR_286 <= 1 ) ; VAR_287 -> VAR_288 = METHOD_33 ( VAR_289 ) ; for ( VAR_290 = 0 ; VAR_291 < VAR_292 ; VAR_293 ++ ) { if ( VAR_294 -> VAR_295 [ VAR_296 ] == 0xff ) { VAR_297 = VAR_298 -> VAR_299 [ VAR_300 ] ; METHOD_34 ( METHOD_35 ( VAR_301 ) ) ; if ( METHOD_36 ( VAR_302 ) ) { VAR_303 = METHOD_37 ( VAR_304 ) ; VAR_305 -> VAR_306 [ VAR_307 ] = & VAR_308 -> VAR_309 ; } else { VAR_310 = METHOD_38 ( VAR_311 ) ; VAR_312 -> VAR_313 [ VAR_314 ] = & VAR_315 -> VAR_316 ; } } } VAR_317 = VAR_318 -> VAR_319 ; if ( ! VAR_320 ) VAR_321 -> VAR_322 [ 0 ] . VAR_323 = & VAR_324 -> VAR_325 -> VAR_326 ; else if ( METHOD_39 ( VAR_327 ) ) VAR_328 -> VAR_329 [ 0 ] . VAR_330 = & METHOD_40 ( VAR_331 ) -> VAR_332 [ VAR_333 -> VAR_334 ] ; else VAR_335 -> VAR_336 [ 0 ] . VAR_337 = & METHOD_41 ( VAR_338 ) -> VAR_339 ; VAR_340 -> VAR_341 [ 0 ] = METHOD_42 ( VAR_342 ) ; METHOD_43 ( "<--%s()=ok[splitnode]\\n" , VAR_343 ) ; return VAR_344 ;  VAR_345 :  METHOD_44 ( "presentleavesclusterbutnotnewleaf\\n" ) ; VAR_346 -> VAR_347 = VAR_348 -> VAR_349 ; VAR_350 -> VAR_351 = VAR_352 -> VAR_353 ; VAR_354 -> VAR_355 = VAR_356 -> VAR_357 ; VAR_358 -> VAR_359 = METHOD_45 ( VAR_360 ) ; VAR_361 -> VAR_362 = VAR_363 -> VAR_364 [ 0 ] ; VAR_365 -> VAR_366 = VAR_367 -> VAR_368 ; VAR_369 -> VAR_370 = VAR_371 ; for ( VAR_372 = 0 ; VAR_373 < VAR_374 ; VAR_375 ++ ) VAR_376 -> VAR_377 [ VAR_378 ] = VAR_379 -> VAR_380 [ VAR_381 ] ; VAR_382 -> VAR_383 [ VAR_384 -> VAR_385 [ 0 ] ] = METHOD_46 ( VAR_386 ) ; VAR_387 -> VAR_388 = & VAR_389 -> VAR_390 [ VAR_391 -> VAR_392 [ VAR_393 ] ] ; VAR_394 -> VAR_395 [ 0 ] . VAR_396 = & METHOD_47 ( VAR_397 -> VAR_398 ) -> VAR_399 [ VAR_400 -> VAR_401 ] ; VAR_402 -> VAR_403 [ 0 ] . VAR_404 = METHOD_48 ( VAR_405 ) ; VAR_406 -> VAR_407 [ 0 ] = METHOD_49 ( VAR_408 ) ; METHOD_50 ( "<--%s()=ok[insertnodebefore]\\n" , VAR_409 ) ; return VAR_410 ; VAR_411 : METHOD_51 ( "allleavesclustertogether\\n" ) ; VAR_412 = VAR_413 ; for ( VAR_414 = 0 ; VAR_415 < VAR_416 ; VAR_417 ++ ) { TYPE_7 VAR_418 = VAR_419 -> METHOD_52 ( METHOD_53 ( VAR_420 -> VAR_421 [ VAR_422 ] ) , VAR_423 ) ; if ( VAR_424 < VAR_425 ) { METHOD_54 ( VAR_426 < 0 ) ; VAR_427 = VAR_428 ; } } METHOD_55 ( VAR_429 == VAR_430 ) ; METHOD_56 ( VAR_431 < VAR_432 + VAR_433 ) ; VAR_434 = METHOD_57 ( VAR_435 , VAR_436 ) ; VAR_437 >>= VAR_438 ; VAR_439 = METHOD_58 ( sizeof ( struct STRUCT_OR_UNION_8 ) + VAR_440 * sizeof ( unsigned TYPE_8 ) , VAR_441 ) ; if ( ! VAR_442 ) return VAR_443 ; VAR_444 -> VAR_445 [ 2 ] = METHOD_59 ( VAR_446 ) ; VAR_447 -> VAR_448 [ 0 ] . VAR_449 = METHOD_60 ( VAR_450 ) ; VAR_451 -> VAR_452 = VAR_453 -> VAR_454 ; VAR_455 -> VAR_456 = VAR_457 -> VAR_458 ; VAR_459 -> VAR_460 = METHOD_61 ( VAR_461 ) ; VAR_462 -> VAR_463 = METHOD_62 ( VAR_464 ) ; VAR_465 -> VAR_466 = 0 ; VAR_467 -> VAR_468 = METHOD_63 ( VAR_469 ) ; VAR_470 -> VAR_471 = - 1 ; VAR_472 -> VAR_473 = VAR_474 = VAR_475 & ~ VAR_476 ; METHOD_64 ( "skip_to_level=%d[diff%d]\\n" , VAR_477 , VAR_478 ) ; METHOD_65 ( VAR_479 <= 0 ) ; for ( VAR_480 = 0 ; VAR_481 < VAR_482 ; VAR_483 ++ ) VAR_484 -> VAR_485 [ VAR_486 ] = VAR_487 -> METHOD_66 ( VAR_488 , VAR_489 * VAR_490 ) ; VAR_491 = VAR_492 << ( VAR_493 & VAR_494 ) ; METHOD_67 ( "blankoff[%zu]%d:%lx\\n" , VAR_495 - 1 , VAR_496 , VAR_497 ) ; VAR_498 -> VAR_499 [ VAR_500 - 1 ] &= ~ VAR_501 ; for ( VAR_502 = 0 ; VAR_503 < VAR_504 ; VAR_505 ++ ) { VAR_506 = VAR_507 -> VAR_508 [ VAR_509 ] ; VAR_510 = VAR_511 -> METHOD_68 ( METHOD_69 ( VAR_512 ) , VAR_513 ) ; VAR_514 >>= VAR_515 & VAR_516 ; VAR_517 -> VAR_518 [ VAR_519 ] = VAR_520 & VAR_521 ; } VAR_522 = VAR_523 -> METHOD_70 ( VAR_524 , VAR_525 ) ; VAR_526 >>= VAR_527 & VAR_528 ; VAR_529 -> VAR_530 [ VAR_531 ] = VAR_532 & VAR_533 ; goto VAR_534 ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 . VAR_0 = VAR_1 ; TYPE_3 . VAR_2 = 0700 ; TYPE_4 . VAR_3 = 11211 ;  TYPE_5 . VAR_4 = 11211 ;  TYPE_6 . VAR_5 = VAR_6 ; TYPE_7 . VAR_7 = 64 * 1024 * 1024 ; TYPE_8 . VAR_8 = 1024 ; TYPE_9 . VAR_9 = 0 ; TYPE_10 . VAR_10 = 0 ; TYPE_11 . VAR_11 = 0 ; TYPE_12 . VAR_12 = 1 ; TYPE_13 . VAR_13 = VAR_14 ; TYPE_14 . VAR_15 = 1.25 ; TYPE_15 . VAR_16 = 48 ; TYPE_16 . VAR_17 = 4 ; TYPE_17 . VAR_18 = 0 ; TYPE_18 . VAR_19 = ':' ; TYPE_19 . VAR_20 = 0 ; TYPE_20 . VAR_21 = 20 ; TYPE_21 . VAR_22 = 1024 ; TYPE_22 . VAR_23 = VAR_24 ; TYPE_23 . VAR_25 = 1024 * 1024 ; TYPE_24 . VAR_26 = 1024 * 1024 ; TYPE_25 . VAR_27 = TYPE_26 . VAR_28 / 2 ; TYPE_27 . VAR_29 = VAR_30 ; TYPE_28 . VAR_31 = VAR_32 ; TYPE_29 . VAR_33 = VAR_34 ; TYPE_30 . VAR_35 = 100 ; TYPE_31 . VAR_36 = 0 ; TYPE_32 . VAR_37 = VAR_38 ; TYPE_33 . VAR_39 = VAR_40 ; TYPE_34 . VAR_41 = 20 ; TYPE_35 . VAR_42 = 40 ; TYPE_36 . VAR_43 = 0.2 ; TYPE_37 . VAR_44 = 2.0 ; TYPE_38 . VAR_45 = VAR_46 ; TYPE_39 . VAR_47 = VAR_48 ; TYPE_40 . VAR_49 = 61 ; TYPE_41 . VAR_50 = 0 ; TYPE_42 . VAR_51 = 0 ; TYPE_43 . VAR_52 = VAR_53 ; TYPE_44 . VAR_54 = 1 ; TYPE_45 . VAR_55 = 0.8 ; TYPE_46 . VAR_56 = 30 ; TYPE_47 . VAR_57 = VAR_58 ; TYPE_48 . VAR_59 = VAR_60 ; TYPE_49 . VAR_61 = VAR_62 ; TYPE_50 . VAR_63 = VAR_64 ; TYPE_51 . VAR_65 = 1000 ; TYPE_52 . VAR_66 = VAR_67 ; TYPE_53 . VAR_68 = VAR_69 ; TYPE_54 . VAR_70 = VAR_71 ; TYPE_55 TYPE_56 TYPE_57 . VAR_72 = VAR_73 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_8 VAR_11 , VAR_12 , VAR_13 , VAR_14 ;  TYPE_9 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ;  TYPE_10 VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 ; TYPE_11 VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 ; TYPE_12 VAR_39 , VAR_40 ; TYPE_13 * VAR_41 , * VAR_42 ; TYPE_14 * VAR_43 , * VAR_44 , * VAR_45 , * VAR_46 ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 + ( TYPE_15 ) VAR_51 ; VAR_52 = VAR_53 ; VAR_54 = VAR_55 + ( TYPE_16 ) ( VAR_56 >> 1 ) ; VAR_57 = VAR_58 + ( TYPE_17 ) ( VAR_59 >> 2 ) ; VAR_60 = VAR_61 + ( TYPE_18 ) ( VAR_62 >> 2 ) ; VAR_63 = 8 ; VAR_64 = VAR_65 >> 1 ; for ( VAR_66 = 0 ; VAR_67 < 2 ; VAR_68 ++ ) { for ( VAR_69 = 0 ; VAR_70 < VAR_71 >> 1 ; VAR_72 += 8 ) { VAR_73 = * VAR_74 ++ >> 2 ; VAR_75 = * VAR_76 ++ ; VAR_77 = * VAR_78 ++ ; VAR_79 = * VAR_80 ++ ; VAR_81 = * VAR_82 ++ ; VAR_83 = * VAR_84 ++ ; VAR_85 = * VAR_86 ++ ; VAR_87 = * VAR_88 ++ ; VAR_89 = * VAR_90 ++ ;  VAR_91 = VAR_92 + VAR_93 ;  VAR_94 = VAR_95 + VAR_96 ; VAR_97 = VAR_98 - VAR_99 ; VAR_100 = VAR_101 - VAR_102 ; VAR_103 = VAR_104 + VAR_105 ; VAR_106 = VAR_107 + VAR_108 ; VAR_109 = VAR_110 - VAR_111 ; VAR_112 = VAR_113 - VAR_114 ; VAR_115 [ VAR_116 ] = VAR_117 ; VAR_118 [ VAR_119 + 1 ] = VAR_120 ;  VAR_121 [ VAR_122 ] = VAR_123 ;   VAR_124 [ VAR_125 + 1 ] = VAR_126 ;  VAR_127 [ VAR_128 ] = VAR_129 ; VAR_130 [ VAR_131 + 1 ] = VAR_132 ;  VAR_133 [ VAR_134 ] = VAR_135 ;   VAR_136 [ VAR_137 + 1 ] = VAR_138 ;  VAR_139 = * VAR_140 ++ ; VAR_141 = * VAR_142 ++ ; VAR_143 = * VAR_144 ++ ; VAR_145 = * VAR_146 ++ ; VAR_147 = * VAR_148 ++ ; VAR_149 = * VAR_150 ++ ; VAR_151 = * VAR_152 ++ ; VAR_153 = * VAR_154 ++ ; VAR_155 = VAR_156 + VAR_157 ; VAR_158 = VAR_159 + VAR_160 ; VAR_161 = VAR_162 - VAR_163 ; VAR_164 = VAR_165 - VAR_166 ; VAR_167 = VAR_168 + VAR_169 ; VAR_170 = VAR_171 + VAR_172 ; VAR_173 = VAR_174 - VAR_175 ; VAR_176 = VAR_177 - VAR_178 ; VAR_179 [ VAR_180 + 2 ] = VAR_181 ; VAR_182 [ VAR_183 + 3 ] = VAR_184 ; VAR_185 [ VAR_186 + 2 ] = VAR_187 ; VAR_188 [ VAR_189 + 3 ] = VAR_190 ; VAR_191 [ VAR_192 + 2 ] = VAR_193 ; VAR_194 [ VAR_195 + 3 ] = VAR_196 ; VAR_197 [ VAR_198 + 2 ] = VAR_199 ; VAR_200 [ VAR_201 + 3 ] = VAR_202 ; } VAR_203 += ( TYPE_19 ) VAR_204 >> 1 ; VAR_205 += ( TYPE_20 ) VAR_206 >> 1 ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 TYPE_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; unsigned VAR_10 ; TYPE_3 VAR_11 ; TYPE_4 VAR_12 = 0 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 ) ) return - VAR_15 ; METHOD_2 ( & VAR_16 -> VAR_17 . VAR_18 ) ; VAR_19 = METHOD_3 ( VAR_20 , VAR_21 -> VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) { METHOD_4 ( "invalidframebufferid\\n" ) ; VAR_25 = - VAR_26 ; goto VAR_27 ; } VAR_28 = METHOD_5 ( VAR_29 ) ; VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = ( struct STRUCT_OR_UNION_7 * ) ( unsigned TYPE_5 ) VAR_34 -> VAR_35 ; if ( ! VAR_36 != ! VAR_37 ) { VAR_38 = - VAR_39 ; goto VAR_40 ; } VAR_41 = VAR_42 & VAR_43 -> VAR_44 ; if ( VAR_45 & VAR_46 && ( VAR_47 % 2 ) ) { VAR_48 = - VAR_49 ; goto VAR_50 ; } if ( VAR_51 && VAR_52 ) {  VAR_53 = METHOD_6 ( VAR_54 * sizeof ( * VAR_55 ) , VAR_56 ) ;  if ( ! VAR_57 ) { VAR_58 = - VAR_59 ; goto VAR_60 ; } VAR_61 = METHOD_7 ( VAR_62 , VAR_63 , VAR_64 * sizeof ( * VAR_65 ) ) ; if ( VAR_66 ) { VAR_67 = - VAR_68 ; goto VAR_69 ; } } if ( VAR_70 -> VAR_71 -> METHOD_8 ) { VAR_72 = VAR_73 -> VAR_74 -> METHOD_9 ( VAR_75 , VAR_76 , VAR_77 , VAR_78 -> VAR_79 , VAR_80 , VAR_81 ) ; } else { VAR_82 = - VAR_83 ; goto VAR_84 ; } VAR_85 : METHOD_10 ( VAR_86 ) ; VAR_87 : METHOD_11 ( & VAR_88 -> VAR_89 . VAR_90 ) ; return VAR_91 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 * VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 , TYPE_4 VAR_5 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ) { VAR_6 * VAR_7 ; unsigned TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; VAR_10 = METHOD_1 ( VAR_11 , VAR_12 ) ; do { VAR_13 = METHOD_2 ( VAR_14 , VAR_15 ) ;  if ( METHOD_3 ( METHOD_4 ( * VAR_16 ) ) )  continue ; if ( METHOD_5 ( VAR_17 ) ) continue ; VAR_18 = METHOD_6 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 , VAR_23 , STRUCT_OR_UNION_3 ) ; if ( VAR_24 ) return VAR_25 ; } while ( VAR_26 ++ , VAR_27 = VAR_28 , VAR_29 != VAR_30 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) { TYPE_3 * VAR_2 , * VAR_3 ; VAR_4 * VAR_5 , * VAR_6 ; TYPE_4 * VAR_7 , * VAR_8 ; TYPE_5 * VAR_9 , * VAR_10 ; TYPE_6 * VAR_11 , * VAR_12 ; TYPE_7 VAR_13 , VAR_14 ;  TYPE_8 VAR_15 , VAR_16 , VAR_17 , VAR_18 ;  if ( VAR_19 < 5 ) { METHOD_1 ( "Incorrectparameters:\\n" ) ;  METHOD_2 ( VAR_20 [ 0 ] ) ;  return 1 ; } VAR_21 = VAR_22 [ 1 ] ; VAR_23 = VAR_24 [ 4 ] ; if ( ! METHOD_3 ( VAR_25 [ 2 ] , & VAR_26 , & VAR_27 ) ) { METHOD_4 ( "Incorrectparameters:%s\\n" , VAR_28 [ 2 ] ) ;  METHOD_5 ( VAR_29 [ 0 ] ) ;  return 1 ; } if ( ! METHOD_6 ( VAR_30 [ 3 ] , & VAR_31 , & VAR_32 ) ) { METHOD_7 ( "Incorrectparameters:%s\\n" , VAR_33 [ 3 ] ) ;  METHOD_8 ( VAR_34 [ 0 ] ) ;  return 1 ; } VAR_35 = METHOD_9 ( VAR_36 , "rb" ) ; if ( VAR_37 == VAR_38 ) { METHOD_10 ( "Can\'topenfile%storead\\n" , VAR_39 ) ;  METHOD_11 ( VAR_40 [ 0 ] ) ;  return 1 ; } VAR_41 = METHOD_12 ( VAR_42 , "wb" ) ; if ( VAR_43 == VAR_44 ) { METHOD_13 ( "Can\'topenfile%stowrite\\n" , VAR_45 ) ;  METHOD_14 ( VAR_46 [ 0 ] ) ;  return 1 ; } if ( VAR_47 >= 6 ) VAR_48 = METHOD_15 ( VAR_49 [ 5 ] ) ; else VAR_50 = VAR_51 ; METHOD_16 ( "Inputsize:%dx%d\\n" , VAR_52 , VAR_53 ) ; METHOD_17 ( "Targetsize:%dx%d,Frames:" , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) METHOD_18 ( "All\\n" ) ; else METHOD_19 ( "%d\\n" , VAR_58 ) ; VAR_59 = ( TYPE_9 * ) METHOD_20 ( VAR_60 * VAR_61 * 3 / 2 ) ; VAR_62 = ( TYPE_10 * ) METHOD_21 ( VAR_63 * VAR_64 * 3 / 2 ) ; VAR_65 = VAR_66 + VAR_67 * VAR_68 ; VAR_69 = VAR_70 + VAR_71 * VAR_72 / 4 ; VAR_73 = VAR_74 + VAR_75 * VAR_76 ; VAR_77 = VAR_78 + VAR_79 * VAR_80 / 4 ; VAR_81 = 0 ; while ( VAR_82 < VAR_83 ) { if ( METHOD_22 ( VAR_84 , VAR_85 * VAR_86 * 3 / 2 , 1 , VAR_87 ) != 1 ) break ; METHOD_23 ( VAR_88 , VAR_89 , VAR_90 , VAR_91 , VAR_92 / 2 , VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 / 2 , VAR_100 , VAR_101 ) ; METHOD_24 ( VAR_102 , VAR_103 * VAR_104 * 3 / 2 , 1 , VAR_105 ) ; VAR_106 ++ ; } METHOD_25 ( "%dframesprocessed\\n" , VAR_107 ) ; METHOD_26 ( VAR_108 ) ; METHOD_27 ( VAR_109 ) ; METHOD_28 ( VAR_110 ) ; METHOD_29 ( VAR_111 ) ; return 0 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 ) {  TYPE_7 * VAR_6 ;  TYPE_8 VAR_7 = ( VAR_8 [ 1 ] << 8 ) | VAR_9 [ 0 ] ; TYPE_9 VAR_10 ; TYPE_10 * VAR_11 ; METHOD_1 ( VAR_12 , 0 , sizeof ( TYPE_11 ) ) ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 ; METHOD_2 ( & VAR_22 -> VAR_23 ) ; for ( VAR_24 = VAR_25 ; VAR_26 -> METHOD_3 ; VAR_27 ++ ) { if ( ( VAR_28 & VAR_29 -> VAR_30 ) == VAR_31 -> VAR_32 ) { VAR_33 = 0 ; VAR_34 -> VAR_35 = VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 = VAR_40 -> VAR_41 ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 ; VAR_52 -> VAR_53 = VAR_54 ; METHOD_4 ( & VAR_55 -> VAR_56 , "" ) ; VAR_57 -> METHOD_5 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 , & VAR_62 , VAR_63 ) ; if ( VAR_64 ) { goto VAR_65 ; } if ( VAR_66 -> VAR_67 <= 0 ) { VAR_68 -> VAR_69 = 2 ; } VAR_70 -> VAR_71 = ( VAR_72 -> VAR_73 == VAR_74 ) ; VAR_75 = METHOD_6 ( & VAR_76 -> VAR_77 ) ; if ( VAR_78 && METHOD_7 ( VAR_79 ) > 1 ) { VAR_80 += METHOD_8 ( VAR_81 ) - 1 ; if ( * VAR_82 == ',' ) { * VAR_83 = '\\0' ; } } return VAR_84 ; } } if ( ( VAR_85 & 0xff00 ) == 0xff00 && ( VAR_86 & 0xf ) > 7 ) { goto VAR_87 ; } VAR_88 : VAR_89 -> VAR_90 = VAR_91 ; VAR_92 -> VAR_93 = VAR_94 ; VAR_95 -> VAR_96 = VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 ; VAR_107 -> VAR_108 = VAR_109 ; VAR_110 -> VAR_111 = 1 ; VAR_112 -> VAR_113 = 1 ; VAR_114 -> VAR_115 = 2 ; METHOD_9 ( & VAR_116 -> VAR_117 , "1,$" ) ; return VAR_118 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 ;  METHOD_1 ( VAR_1 ) ;  TYPE_3 VAR_2 { union STRUCT_OR_UNION_0 * VAR_3 ;  union STRUCT_OR_UNION_1 * VAR_4 ;  VAR_5 = VAR_6 ; while ( VAR_7 ) { VAR_8 = VAR_9 ; VAR_10 = VAR_11 -> VAR_12 . VAR_13 ; VAR_14 -> VAR_15 . VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 ) ; }  }  METHOD_3 ( VAR_19 ) ; VAR_20 = METHOD_4 ( VAR_21 ) ; if ( METHOD_5 ( VAR_22 ) ) { VAR_23 ; } METHOD_6 ( VAR_24 ) ; ( TYPE_4 ) METHOD_7 ( VAR_25 ) ; METHOD_8 ( ( VAR_26 , "Namespacefreed\\n" ) ) ; VAR_27 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { struct STRUCT_OR_UNION_1 VAR_3 ;  VAR_4 -> VAR_5 = VAR_6 ;  VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = 0 ; VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 = VAR_17 ; VAR_18 . VAR_19 = VAR_20 ; VAR_21 . VAR_22 = VAR_23 ; VAR_24 . VAR_25 = VAR_26 ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = 0 ; METHOD_1 ( & VAR_32 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 , VAR_4 ;  METHOD_1 ( VAR_5 ) ; TYPE_5 * VAR_6 , * VAR_7 = METHOD_2 ( VAR_8 ) ; if ( ! VAR_9 ) return 0 ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 ; VAR_13 ++ ) { VAR_14 = METHOD_3 ( VAR_15 [ VAR_16 ] ) ; if ( ! VAR_17 ) { METHOD_4 ( VAR_18 ) ; return 0 ; } METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; } VAR_22 = METHOD_6 ( ( TYPE_6 * ) VAR_23 , & VAR_24 , VAR_25 ) >= 0 ; METHOD_7 ( VAR_26 ) ; return VAR_27 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const TYPE_0 * VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 * VAR_4 , struct STRUCT_OR_UNION_2 * VAR_5 , unsigned TYPE_4 VAR_6 ) { struct STRUCT_OR_UNION_3 VAR_7 = { . VAR_8 . VAR_9 = VAR_10 , . VAR_11 . VAR_12 = VAR_13 , . VAR_14 = METHOD_1 ( ) ,  . VAR_15 . VAR_16 = VAR_17 -> VAR_18 ,  . VAR_19 . VAR_20 = VAR_21 , . VAR_22 . VAR_23 = VAR_24 , } ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; TYPE_5 VAR_25 ; TYPE_6 VAR_26 ; METHOD_2 ( "%s,%s,%p,%zu,%p,%p,%lx" , VAR_27 . VAR_28 . VAR_29 -> VAR_30 , VAR_31 . VAR_32 . VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 -> METHOD_3 ) { VAR_40 = VAR_41 -> METHOD_4 ( & VAR_42 . VAR_43 ) ; if ( VAR_44 < 0 ) { STRUCT_OR_UNION_6 = METHOD_5 ( VAR_45 ) ; goto VAR_46 ; } } VAR_47 = METHOD_6 ( & VAR_48 ) ; if ( ! METHOD_7 ( VAR_49 ) ) { STRUCT_OR_UNION_7 = METHOD_8 ( VAR_50 ) ; if ( VAR_51 ) { METHOD_9 ( & VAR_52 ) ; VAR_53 = METHOD_10 ( VAR_54 , STRUCT_OR_UNION_8 ) ; METHOD_11 ( VAR_55 ) ; if ( VAR_56 < 0 ) { METHOD_12 ( STRUCT_OR_UNION_9 ) ; STRUCT_OR_UNION_10 = METHOD_13 ( VAR_57 ) ; goto VAR_58 ; } } } else if ( METHOD_14 ( VAR_59 ) != - VAR_60 ) { STRUCT_OR_UNION_11 = METHOD_15 ( VAR_61 ) ; } else { STRUCT_OR_UNION_12 = METHOD_16 ( - VAR_62 ) ; if ( ! VAR_63 ) goto VAR_64 ; STRUCT_OR_UNION_13 = METHOD_17 ( & VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; } VAR_71 : if ( VAR_72 -> METHOD_18 ) VAR_73 -> METHOD_19 ( & VAR_74 . VAR_75 ) ; VAR_76 : METHOD_20 ( "=%p" , STRUCT_OR_UNION_14 ) ; return STRUCT_OR_UNION_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = VAR_3 ;  struct STRUCT_OR_UNION_0 * VAR_4 ;  VAR_5 * VAR_6 ; unsigned TYPE_4 VAR_7 ; struct STRUCT_OR_UNION_1 * VAR_8 ; METHOD_1 ( ) ; if ( ! VAR_9 -> VAR_10 ) {  VAR_11 = METHOD_2 ( 1 , sizeof ( struct STRUCT_OR_UNION_2 ) ) ;  if ( ! VAR_12 ) { return VAR_13 ; }  VAR_14 -> VAR_15 = & VAR_16 -> VAR_17 ;  VAR_18 -> VAR_19 -> VAR_20 = sizeof ( * VAR_21 -> VAR_22 ) ; VAR_23 -> VAR_24 -> VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 -> VAR_30 = VAR_31 ; VAR_32 -> VAR_33 -> VAR_34 = VAR_35 -> VAR_36 ; if ( VAR_37 -> VAR_38 . VAR_39 ) {  VAR_40 -> VAR_41 -> VAR_42 -> VAR_43 = * VAR_44 -> VAR_45 . VAR_46 ;   VAR_47 -> VAR_48 . VAR_49 = & VAR_50 -> VAR_51 -> VAR_52 -> VAR_53 ;  } VAR_54 = & VAR_55 -> VAR_56 -> VAR_57 -> VAR_58 ; for ( VAR_59 = 0 ; VAR_60 [ VAR_61 ] . VAR_62 && VAR_63 [ VAR_64 ] . VAR_65 != VAR_66 -> VAR_67 ; VAR_68 ++ ) ;  VAR_69 -> VAR_70 = VAR_71 [ VAR_72 ] . VAR_73 ;  VAR_74 -> VAR_75 . VAR_76 = & VAR_77 -> VAR_78 . VAR_79 ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 . VAR_84 * VAR_85 -> VAR_86 . VAR_87 * 3 / 2 * 2 ; if ( VAR_88 -> VAR_89 < 32768 ) VAR_90 -> VAR_91 = 32768 ; VAR_92 -> VAR_93 = METHOD_3 ( VAR_94 -> VAR_95 ) ; if ( ! VAR_96 -> VAR_97 ) { return VAR_98 ; } if ( VAR_99 ) VAR_100 -> VAR_101 -> VAR_102 . VAR_103 = VAR_104 -> VAR_105 ; else VAR_106 -> VAR_107 -> VAR_108 . VAR_109 = 1 ; VAR_110 = METHOD_4 ( VAR_111 , & VAR_112 -> VAR_113 , & VAR_114 -> VAR_115 , 0 ) ; if ( ! VAR_116 ) {  METHOD_5 ( & VAR_117 -> VAR_118 -> VAR_119 -> VAR_120 ,   VAR_121 -> VAR_122 -> VAR_123 -> VAR_124 ,  VAR_125 -> VAR_126 -> VAR_127 -> VAR_128 , VAR_129 ) ;  VAR_130 = METHOD_6 ( & VAR_131 -> VAR_132 -> VAR_133 -> VAR_134 ) ;   if ( ! VAR_135 )  VAR_136 = VAR_137 ;  else  VAR_138 -> VAR_139 -> VAR_140 -> VAR_141 = VAR_142 ; } } return VAR_143 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_1 * VAR_4 ; VAR_5 * VAR_6 ; TYPE_2 VAR_7 ; TYPE_3 * VAR_8 ; TYPE_4 VAR_9 , VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; struct STRUCT_OR_UNION_2 * VAR_13 ; VAR_14 * VAR_15 ; METHOD_1 ( VAR_16 ) ; VAR_17 = VAR_18 -> VAR_19 ; VAR_20 = VAR_21 -> VAR_22 ; VAR_23 = ( TYPE_6 * ) VAR_24 -> VAR_25 . VAR_26 ; VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 . VAR_30 ) ; VAR_31 = METHOD_3 ( VAR_32 , VAR_33 ) ; METHOD_4 ( VAR_34 != VAR_35 ) ; METHOD_5 ( VAR_36 , VAR_37 -> VAR_38 . VAR_39 , VAR_40 ) ; VAR_41 = ( TYPE_7 * ) VAR_42 ; METHOD_6 ( VAR_43 , - VAR_44 , VAR_45 ) ; METHOD_7 ( VAR_46 , VAR_47 ) ; VAR_48 = VAR_49 ; VAR_50 = METHOD_8 ( VAR_51 , & VAR_52 ) ; if ( VAR_53 ) { if ( VAR_54 == - VAR_55 ) goto VAR_56 ; METHOD_9 ( VAR_57 , VAR_58 , VAR_59 ) ; METHOD_10 ( VAR_60 -> VAR_61 . VAR_62 , VAR_63 , VAR_64 ) ; goto VAR_65 ; } METHOD_11 ( VAR_66 == 0 ) ; VAR_67 = METHOD_12 ( VAR_68 , VAR_69 , & VAR_70 ) ; if ( VAR_71 ) {  VAR_72 = METHOD_13 ( VAR_73 , 0 , VAR_74 ) ;  VAR_75 = VAR_76 ; if ( VAR_77 ) goto VAR_78 ; METHOD_14 ( VAR_79 , VAR_80 , VAR_81 ) ; METHOD_15 ( VAR_82 -> VAR_83 . VAR_84 , VAR_85 , VAR_86 ) ; goto VAR_87 ; } METHOD_16 ( ( TYPE_8 * ) & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = VAR_92 ; VAR_93 . VAR_94 = VAR_95 -> VAR_96 ; VAR_97 . VAR_98 = VAR_99 -> VAR_100 ; VAR_101 . VAR_102 = VAR_103 -> VAR_104 ; VAR_105 . VAR_106 = VAR_107 -> VAR_108 ; VAR_109 . VAR_110 = VAR_111 ; VAR_112 . VAR_113 = VAR_114 -> VAR_115 ; VAR_116 . VAR_117 = VAR_118 ; VAR_119 = & VAR_120 -> VAR_121 [ 0 ] ; for ( VAR_122 = 0 ; VAR_123 < VAR_124 -> VAR_125 . VAR_126 ; VAR_127 ++ ) { VAR_128 . VAR_129 = VAR_130 -> VAR_131 ; VAR_132 . VAR_133 = VAR_134 -> VAR_135 ; VAR_136 . VAR_137 = & VAR_138 -> VAR_139 [ VAR_140 . VAR_141 ] ; VAR_142 . VAR_143 = VAR_144 -> VAR_145 ; VAR_146 . VAR_147 = METHOD_17 ( VAR_148 -> VAR_149 , VAR_150 -> VAR_151 ) ; VAR_152 . VAR_153 = METHOD_18 ( VAR_154 -> VAR_155 ) ; VAR_156 = METHOD_19 ( VAR_157 , & VAR_158 ) ; METHOD_20 ( VAR_159 == - VAR_160 ) ; VAR_161 = METHOD_21 ( VAR_162 , & VAR_163 ) ; METHOD_22 ( VAR_164 != - VAR_165 ) ; if ( VAR_166 ) goto VAR_167 ; VAR_168 = METHOD_23 ( VAR_169 ) ; } VAR_170 = 0 ; * VAR_171 = VAR_172 ; VAR_173 : METHOD_24 ( VAR_174 ) ; return VAR_175 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , unsigned VAR_2 , unsigned * VAR_3 ) { TYPE_3 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 * VAR_7 = & VAR_8 -> VAR_9 ; unsigned VAR_10 = VAR_11 -> VAR_12 ; unsigned VAR_13 , VAR_14 = 0 , VAR_15 = 0 , VAR_16 = 0 ; TYPE_5 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; if ( ( VAR_22 = VAR_23 -> METHOD_1 ( VAR_24 , VAR_25 , & VAR_26 ) ) < 0 ) return VAR_27 ; while ( VAR_28 < 16 ) { VAR_29 = VAR_30 -> VAR_31 [ VAR_32 ] ; if ( VAR_33 >= VAR_34 + VAR_35 ) VAR_36 += VAR_37 ; else break ; VAR_38 ++ ; } VAR_39 = VAR_40 * 16 ; VAR_41 = 0 ; while ( VAR_42 < 256 ) { VAR_43 = VAR_44 -> VAR_45 [ VAR_46 ] ; if ( VAR_47 >= VAR_48 + VAR_49 ) VAR_50 += VAR_51 ; else break ; VAR_52 ++ ; }  if ( ( VAR_53 = VAR_54 -> METHOD_2 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ) < 0 )  return VAR_60 ; VAR_61 -> VAR_62 [ VAR_63 ] = VAR_64 + VAR_65 ; VAR_66 -> VAR_67 [ VAR_68 ] = VAR_69 + VAR_70 ; VAR_71 += VAR_72 ; if ( VAR_73 > VAR_74 ) { VAR_75 = 0 ; for ( VAR_76 = 0 ; VAR_77 < 256 ; VAR_78 ++ ) { unsigned VAR_79 = ( VAR_80 -> VAR_81 [ VAR_82 ] >> 1 ) + 1 ; VAR_83 -> VAR_84 [ VAR_85 ] = VAR_86 ; VAR_87 += VAR_88 ; } for ( VAR_89 = 0 ; VAR_90 < 16 ; VAR_91 ++ ) { unsigned VAR_92 = 0 ; unsigned VAR_93 = VAR_94 << 4 ; for ( VAR_95 = 0 ; VAR_96 < 16 ; VAR_97 ++ ) VAR_98 += VAR_99 -> VAR_100 [ VAR_101 + VAR_102 ] ; VAR_103 -> VAR_104 [ VAR_105 ] = VAR_106 ; } } VAR_107 -> VAR_108 = VAR_109 ; * VAR_110 = VAR_111 & VAR_112 -> VAR_113 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 , * VAR_4 ; if ( METHOD_1 ( ! VAR_5 ) ) return - VAR_6 ; METHOD_2 ( VAR_7 ) ; if ( VAR_8 -> VAR_9 & VAR_10 ) { METHOD_3 ( & VAR_11 ) ; while ( VAR_12 -> VAR_13 & VAR_14 ) { METHOD_4 ( & VAR_15 ) ; METHOD_5 ( 10 ) ; METHOD_6 ( & VAR_16 ) ; } METHOD_7 ( & VAR_17 ) ; METHOD_8 ( & VAR_18 ) ; METHOD_9 ( & VAR_19 -> VAR_20 ) ; METHOD_10 ( & VAR_21 ) ; } else { VAR_22 = VAR_23 -> VAR_24 ; if ( METHOD_11 ( ! VAR_25 ) ) goto VAR_26 ; METHOD_12 ( & VAR_27 -> VAR_28 ) ; while ( VAR_29 -> VAR_30 & VAR_31 ) { METHOD_13 ( & VAR_32 -> VAR_33 ) ; METHOD_14 ( 10 ) ; METHOD_15 ( & VAR_34 -> VAR_35 ) ; } METHOD_16 ( & VAR_36 -> VAR_37 ) ; METHOD_17 ( & VAR_38 ) ; METHOD_18 ( & VAR_39 -> VAR_40 ) ; if ( VAR_41 && METHOD_19 ( & VAR_42 -> VAR_43 ) && VAR_44 -> VAR_45 . METHOD_20 ) VAR_46 -> VAR_47 . METHOD_21 ( VAR_48 ) ;  METHOD_22 ( VAR_49 , VAR_50 , & VAR_51 -> VAR_52 ,  VAR_53 ) {  METHOD_23 ( & VAR_54 ) ;  METHOD_24 ( VAR_55 , 1 , VAR_56 ) ; METHOD_25 ( & VAR_57 -> VAR_58 , & VAR_59 ) ; VAR_60 -> VAR_61 = VAR_62 ; VAR_63 -> VAR_64 = VAR_65 ;  METHOD_26 ( & VAR_66 ) ;   }  METHOD_27 ( & VAR_67 ) ; } VAR_68 : if ( VAR_69 -> METHOD_28 ) VAR_70 -> METHOD_29 ( VAR_71 ) ; METHOD_30 ( VAR_72 -> VAR_73 ) ; METHOD_31 ( VAR_74 ) ; if ( VAR_75 ) METHOD_32 ( VAR_76 -> VAR_77 ) ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 = VAR_4 -> VAR_5 [ 0 ] ; TYPE_3 VAR_6 = VAR_7 -> VAR_8 [ 1 ] ; TYPE_4 VAR_9 = VAR_10 -> VAR_11 [ 2 ] ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_12 -> VAR_13 ) ; struct STRUCT_OR_UNION_4 * VAR_14 ; if ( ! VAR_15 ) { struct STRUCT_OR_UNION_5 * * VAR_16 ; struct STRUCT_OR_UNION_6 * VAR_17 [ VAR_18 + 1 ] ; VAR_19 = METHOD_2 ( VAR_20 -> VAR_21 , & VAR_22 ) ; if ( VAR_23 ) return VAR_24 ;  VAR_25 = METHOD_3 ( VAR_26 , VAR_27 ,   VAR_28 [ VAR_29 ] ,  VAR_30 ) ; if ( VAR_31 ) return VAR_32 ; if ( ! VAR_33 [ VAR_34 ] ) return - VAR_35 ;  VAR_36 = METHOD_4 ( VAR_37 [ VAR_38 ] ) ;  } if ( VAR_39 ) return 0 ; VAR_40 = METHOD_5 ( STRUCT_OR_UNION_7 , VAR_41 ) ; if ( ! VAR_42 ) return - VAR_43 ;  METHOD_6 ( & VAR_44 -> VAR_45 ) ;  VAR_46 = METHOD_7 ( VAR_47 , VAR_48 , VAR_49 , & VAR_50 ) ; if ( ! VAR_51 ) VAR_52 = 1 ; METHOD_8 ( & VAR_53 -> VAR_54 ) ; METHOD_9 ( & VAR_55 -> VAR_56 ) ; VAR_57 -> VAR_58 [ 0 ] = VAR_59 ; VAR_60 -> VAR_61 [ 1 ] = VAR_62 ; VAR_63 -> VAR_64 [ 2 ] = VAR_65 ; return VAR_66 -> VAR_67 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { * VAR_4 = VAR_5 ; if ( VAR_6 -> VAR_7 . VAR_8 == 0 ) {  METHOD_1 ( ( TYPE_5 * ) VAR_9 -> VAR_10 . VAR_11 , 0 , sizeof ( VAR_12 -> VAR_13 . VAR_14 ) ) ;   METHOD_2 ( VAR_15 -> VAR_16 . VAR_17 , 0 , sizeof ( VAR_18 -> VAR_19 . VAR_20 ) ) ;  } if ( VAR_21 -> VAR_22 . VAR_23 && ! ( VAR_24 == VAR_25 && VAR_26 == 0 ) ) { VAR_27 -> VAR_28 . VAR_29 [ VAR_30 -> VAR_31 . VAR_32 ] = VAR_33 ; VAR_34 -> VAR_35 . VAR_36 [ VAR_37 -> VAR_38 . VAR_39 ] = VAR_40 ; VAR_41 -> VAR_42 . VAR_43 ++ ; if ( VAR_44 -> VAR_45 . VAR_46 > ( 1 << VAR_47 ) + 1 ) { VAR_48 -> VAR_49 . VAR_50 = 0 ; * VAR_51 = VAR_52 ; return - 1 ; } return 0 ; }  if ( ! VAR_53 -> VAR_54 . VAR_55 )  { VAR_56 -> VAR_57 . VAR_58 [ 0 ] = VAR_59 ; VAR_60 -> VAR_61 . VAR_62 [ 0 ] = VAR_63 ; VAR_64 -> VAR_65 . VAR_66 = 1 ; } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 ;  METHOD_1 ( VAR_7 , VAR_8 ) ;  if ( VAR_9 -> VAR_10 ) METHOD_2 ( VAR_11 -> VAR_12 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) {  struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ;  METHOD_2 ( STRUCT_OR_UNION_4 ) ; if ( METHOD_3 ( ! METHOD_4 ( ) && ! ( VAR_3 -> VAR_4 & VAR_5 ) ) ) { METHOD_5 ( & STRUCT_OR_UNION_5 -> VAR_6 . VAR_7 , VAR_8 ) ; if ( ! METHOD_6 ( VAR_9 , & STRUCT_OR_UNION_6 -> VAR_10 . VAR_11 , VAR_12 ) ) return ; } if ( METHOD_7 ( & STRUCT_OR_UNION_7 -> VAR_13 . VAR_14 , & VAR_15 ) ) METHOD_8 ( & VAR_16 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; TYPE_2 VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_7 = METHOD_2 ( STRUCT_OR_UNION_8 -> VAR_8 ) ; struct STRUCT_OR_UNION_9 * VAR_9 = & VAR_10 -> VAR_11 ; unsigned TYPE_3 VAR_12 ; unsigned TYPE_4 VAR_13 = 0 ; TYPE_5 VAR_14 = - VAR_15 ; VAR_16 : if ( VAR_17 -> VAR_18 >= VAR_19 -> VAR_20 [ VAR_21 -> VAR_22 ] . VAR_23 ) { METHOD_3 ( "block=%d,partition=%doutofrange\\n" , VAR_24 -> VAR_25 , VAR_26 -> VAR_27 ) ; return - VAR_28 ; } VAR_29 = METHOD_4 ( STRUCT_OR_UNION_10 -> VAR_30 , VAR_31 , 0 , & VAR_32 ) ; if ( ! VAR_33 ) { METHOD_5 ( STRUCT_OR_UNION_11 -> VAR_34 , "(ino%ld)failed!bh\\n" , STRUCT_OR_UNION_12 -> VAR_35 ) ; return - VAR_36 ; } if ( VAR_37 != VAR_38 && VAR_39 != VAR_40 && VAR_41 != VAR_42 ) { METHOD_6 ( STRUCT_OR_UNION_13 -> VAR_43 , "(ino%ld)failedident=%d\\n" , STRUCT_OR_UNION_14 -> VAR_44 , VAR_45 ) ; goto VAR_46 ; } VAR_47 = ( struct STRUCT_OR_UNION_15 * ) VAR_48 -> VAR_49 ; VAR_50 = ( struct STRUCT_OR_UNION_16 * ) VAR_51 -> VAR_52 ; if ( VAR_53 -> VAR_54 . VAR_55 == METHOD_7 ( 4096 ) ) { struct STRUCT_OR_UNION_17 * VAR_56 ; VAR_57 = METHOD_8 ( STRUCT_OR_UNION_18 -> VAR_58 , VAR_59 , 1 , & VAR_60 ) ; if ( VAR_61 == VAR_62 && VAR_63 ) { struct STRUCT_OR_UNION_19 VAR_64 ; struct STRUCT_OR_UNION_20 * VAR_65 ; VAR_66 = ( struct STRUCT_OR_UNION_21 * ) VAR_67 -> VAR_68 ; VAR_69 = METHOD_9 ( VAR_70 -> VAR_71 . VAR_72 ) ; if ( VAR_73 -> VAR_74 . VAR_75 ) { METHOD_10 ( VAR_76 ) ; METHOD_11 ( & VAR_77 -> VAR_78 , & VAR_79 , sizeof ( struct STRUCT_OR_UNION_22 ) ) ; if ( ++ VAR_80 > VAR_81 ) { METHOD_12 ( STRUCT_OR_UNION_23 -> VAR_82 , "toomanyICBsinICBhierarchy" "(max%dsupported)\\n" , VAR_83 ) ; goto VAR_84 ; } METHOD_13 ( VAR_85 ) ; goto VAR_86 ; } } METHOD_14 ( VAR_87 ) ; } else if ( VAR_88 -> VAR_89 . VAR_90 != METHOD_15 ( 4 ) ) { METHOD_16 ( STRUCT_OR_UNION_24 -> VAR_91 , "unsupportedstrategytype:%d\\n" , METHOD_17 ( VAR_92 -> VAR_93 . VAR_94 ) ) ; goto VAR_95 ; } if ( VAR_96 -> VAR_97 . VAR_98 == METHOD_18 ( 4 ) ) VAR_99 -> VAR_100 = 0 ; else VAR_101 -> VAR_102 = 1 ; VAR_103 -> VAR_104 = METHOD_19 ( VAR_105 -> VAR_106 . VAR_107 ) & VAR_108 ; VAR_109 -> VAR_110 = 0 ; VAR_111 -> VAR_112 = 0 ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 -> VAR_118 = 0 ; VAR_119 -> VAR_120 = 0 ; if ( VAR_121 -> VAR_122 . VAR_123 == METHOD_20 ( VAR_124 ) ) { VAR_125 -> VAR_126 = 1 ; VAR_127 -> VAR_128 = 0 ; VAR_129 = METHOD_21 ( STRUCT_OR_UNION_25 , STRUCT_OR_UNION_26 -> VAR_130 -> VAR_131 - sizeof ( struct STRUCT_OR_UNION_27 ) ) ; if ( VAR_132 ) goto VAR_133 ; METHOD_22 ( VAR_134 -> VAR_135 . VAR_136 , VAR_137 -> VAR_138 + sizeof ( struct STRUCT_OR_UNION_28 ) , STRUCT_OR_UNION_29 -> VAR_139 -> VAR_140 - sizeof ( struct STRUCT_OR_UNION_30 ) ) ; } else if ( VAR_141 -> VAR_142 . VAR_143 == METHOD_23 ( VAR_144 ) ) { VAR_145 -> VAR_146 = 0 ; VAR_147 -> VAR_148 = 0 ; VAR_149 = METHOD_24 ( STRUCT_OR_UNION_31 , STRUCT_OR_UNION_32 -> VAR_150 -> VAR_151 - sizeof ( struct STRUCT_OR_UNION_33 ) ) ; if ( VAR_152 ) goto VAR_153 ; METHOD_25 ( VAR_154 -> VAR_155 . VAR_156 , VAR_157 -> VAR_158 + sizeof ( struct STRUCT_OR_UNION_34 ) , STRUCT_OR_UNION_35 -> VAR_159 -> VAR_160 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; } else if ( VAR_161 -> VAR_162 . VAR_163 == METHOD_26 ( VAR_164 ) ) { VAR_165 -> VAR_166 = 0 ; VAR_167 -> VAR_168 = 1 ; VAR_169 -> VAR_170 = METHOD_27 ( ( ( struct STRUCT_OR_UNION_37 * ) VAR_171 -> VAR_172 ) -> VAR_173 ) ; VAR_174 = METHOD_28 ( STRUCT_OR_UNION_38 , STRUCT_OR_UNION_39 -> VAR_175 -> VAR_176 - sizeof ( struct STRUCT_OR_UNION_40 ) ) ; if ( VAR_177 ) goto VAR_178 ; METHOD_29 ( VAR_179 -> VAR_180 . VAR_181 , VAR_182 -> VAR_183 + sizeof ( struct STRUCT_OR_UNION_41 ) , STRUCT_OR_UNION_42 -> VAR_184 -> VAR_185 - sizeof ( struct STRUCT_OR_UNION_43 ) ) ; return 0 ; } VAR_186 = - VAR_187 ; METHOD_30 ( & VAR_188 -> VAR_189 ) ; METHOD_31 ( STRUCT_OR_UNION_44 , METHOD_32 ( VAR_190 -> VAR_191 ) ) ; if ( ! METHOD_33 ( STRUCT_OR_UNION_45 -> VAR_192 ) || METHOD_34 ( STRUCT_OR_UNION_46 -> VAR_193 , VAR_194 ) || METHOD_35 ( STRUCT_OR_UNION_47 -> VAR_195 , VAR_196 ) ) STRUCT_OR_UNION_48 -> VAR_197 = METHOD_36 ( STRUCT_OR_UNION_49 -> VAR_198 ) -> VAR_199 ; METHOD_37 ( STRUCT_OR_UNION_50 , METHOD_38 ( VAR_200 -> VAR_201 ) ) ; if ( ! METHOD_39 ( STRUCT_OR_UNION_51 -> VAR_202 ) || METHOD_40 ( STRUCT_OR_UNION_52 -> VAR_203 , VAR_204 ) || METHOD_41 ( STRUCT_OR_UNION_53 -> VAR_205 , VAR_206 ) ) STRUCT_OR_UNION_54 -> VAR_207 = METHOD_42 ( STRUCT_OR_UNION_55 -> VAR_208 ) -> VAR_209 ; if ( VAR_210 -> VAR_211 . VAR_212 != VAR_213 && VAR_214 -> VAR_215 != VAR_216 ) STRUCT_OR_UNION_56 -> VAR_217 = VAR_218 -> VAR_219 ; else if ( VAR_220 -> VAR_221 . VAR_222 == VAR_223 && VAR_224 -> VAR_225 != VAR_226 ) STRUCT_OR_UNION_57 -> VAR_227 = VAR_228 -> VAR_229 ; else STRUCT_OR_UNION_58 -> VAR_230 = METHOD_43 ( VAR_231 ) ; STRUCT_OR_UNION_59 -> VAR_232 &= ~ VAR_233 -> VAR_234 ; METHOD_44 ( & VAR_235 -> VAR_236 ) ; VAR_237 = METHOD_45 ( VAR_238 -> VAR_239 ) ; if ( ! VAR_240 ) { if ( ! VAR_241 ) { VAR_242 = - VAR_243 ; goto VAR_244 ; } VAR_245 = 1 ; } METHOD_46 ( STRUCT_OR_UNION_60 , VAR_246 ) ; STRUCT_OR_UNION_61 -> VAR_247 = METHOD_47 ( VAR_248 -> VAR_249 ) ; VAR_250 -> VAR_251 = STRUCT_OR_UNION_62 -> VAR_252 ; if ( VAR_253 -> VAR_254 == 0 ) { STRUCT_OR_UNION_63 -> VAR_255 = METHOD_48 ( VAR_256 -> VAR_257 ) << ( STRUCT_OR_UNION_64 -> VAR_258 -> VAR_259 - 9 ) ; if ( ! METHOD_49 ( & STRUCT_OR_UNION_65 -> VAR_260 , VAR_261 -> VAR_262 ) ) STRUCT_OR_UNION_66 -> VAR_263 = VAR_264 -> VAR_265 ; if ( ! METHOD_50 ( & STRUCT_OR_UNION_67 -> VAR_266 , VAR_267 -> VAR_268 ) ) STRUCT_OR_UNION_68 -> VAR_269 = VAR_270 -> VAR_271 ; if ( ! METHOD_51 ( & STRUCT_OR_UNION_69 -> VAR_272 , VAR_273 -> VAR_274 ) ) STRUCT_OR_UNION_70 -> VAR_275 = VAR_276 -> VAR_277 ; VAR_278 -> VAR_279 = METHOD_52 ( VAR_280 -> VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_53 ( VAR_284 -> VAR_285 ) ; VAR_286 -> VAR_287 = METHOD_54 ( VAR_288 -> VAR_289 ) ; VAR_290 -> VAR_291 = METHOD_55 ( VAR_292 -> VAR_293 ) ; } else { STRUCT_OR_UNION_71 -> VAR_294 = METHOD_56 ( VAR_295 -> VAR_296 ) << ( STRUCT_OR_UNION_72 -> VAR_297 -> VAR_298 - 9 ) ; if ( ! METHOD_57 ( & STRUCT_OR_UNION_73 -> VAR_299 , VAR_300 -> VAR_301 ) ) STRUCT_OR_UNION_74 -> VAR_302 = VAR_303 -> VAR_304 ; if ( ! METHOD_58 ( & STRUCT_OR_UNION_75 -> VAR_305 , VAR_306 -> VAR_307 ) ) STRUCT_OR_UNION_76 -> VAR_308 = VAR_309 -> VAR_310 ; if ( ! METHOD_59 ( & VAR_311 -> VAR_312 , VAR_313 -> VAR_314 ) ) VAR_315 -> VAR_316 = VAR_317 -> VAR_318 ; if ( ! METHOD_60 ( & STRUCT_OR_UNION_77 -> VAR_319 , VAR_320 -> VAR_321 ) ) STRUCT_OR_UNION_78 -> VAR_322 = VAR_323 -> VAR_324 ; VAR_325 -> VAR_326 = METHOD_61 ( VAR_327 -> VAR_328 ) ; VAR_329 -> VAR_330 = METHOD_62 ( VAR_331 -> VAR_332 ) ; VAR_333 -> VAR_334 = METHOD_63 ( VAR_335 -> VAR_336 ) ; VAR_337 -> VAR_338 = METHOD_64 ( VAR_339 -> VAR_340 ) ; } STRUCT_OR_UNION_79 -> VAR_341 = VAR_342 -> VAR_343 ;  switch ( VAR_344 -> VAR_345 . VAR_346 ) {  case VAR_347 : STRUCT_OR_UNION_80 -> VAR_348 = & VAR_349 ; STRUCT_OR_UNION_81 -> VAR_350 = & VAR_351 ; STRUCT_OR_UNION_82 -> VAR_352 |= VAR_353 ; METHOD_65 ( STRUCT_OR_UNION_83 ) ; break ; case VAR_354 : case VAR_355 : case VAR_356 : case VAR_357 : if ( VAR_358 -> VAR_359 == VAR_360 ) STRUCT_OR_UNION_84 -> VAR_361 . VAR_362 = & VAR_363 ; else STRUCT_OR_UNION_85 -> VAR_364 . VAR_365 = & VAR_366 ; STRUCT_OR_UNION_86 -> VAR_367 = & VAR_368 ; STRUCT_OR_UNION_87 -> VAR_369 = & VAR_370 ; STRUCT_OR_UNION_88 -> VAR_371 |= VAR_372 ; break ; case VAR_373 : STRUCT_OR_UNION_89 -> VAR_374 |= VAR_375 ; break ; case VAR_376 : STRUCT_OR_UNION_90 -> VAR_377 |= VAR_378 ; break ; case VAR_379 : METHOD_66 ( STRUCT_OR_UNION_91 , STRUCT_OR_UNION_92 -> VAR_380 | VAR_381 , 0 ) ; break ; case VAR_382 : METHOD_67 ( STRUCT_OR_UNION_93 , STRUCT_OR_UNION_94 -> VAR_383 | VAR_384 , 0 ) ; break ; case VAR_385 : STRUCT_OR_UNION_95 -> VAR_386 . VAR_387 = & VAR_388 ; STRUCT_OR_UNION_96 -> VAR_389 = & VAR_390 ; STRUCT_OR_UNION_97 -> VAR_391 = VAR_392 | VAR_393 ; break ; case VAR_394 : METHOD_68 ( "METADATAFILE-----\\n" ) ; break ; case VAR_395 : METHOD_69 ( "METADATAMIRRORFILE-----\\n" ) ; break ; case VAR_396 : METHOD_70 ( "METADATABITMAPFILE-----\\n" ) ; break ; default : METHOD_71 ( STRUCT_OR_UNION_98 -> VAR_397 , "(ino%ld)failedunknownfiletype=%d\\n" , STRUCT_OR_UNION_99 -> VAR_398 , VAR_399 -> VAR_400 . VAR_401 ) ; goto VAR_402 ; } if ( METHOD_72 ( STRUCT_OR_UNION_100 -> VAR_403 ) || METHOD_73 ( STRUCT_OR_UNION_101 -> VAR_404 ) ) { struct STRUCT_OR_UNION_102 * VAR_405 = ( struct STRUCT_OR_UNION_103 * ) METHOD_74 ( STRUCT_OR_UNION_104 , 12 , 1 ) ; if ( VAR_406 ) { METHOD_75 ( STRUCT_OR_UNION_105 , STRUCT_OR_UNION_106 -> VAR_407 , METHOD_76 ( METHOD_77 ( VAR_408 -> VAR_409 ) , METHOD_78 ( VAR_410 -> VAR_411 ) ) ) ; } else goto VAR_412 ; } VAR_413 = 0 ; VAR_414 : METHOD_79 ( VAR_415 ) ; return VAR_416 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  METHOD_1 ( VAR_3 , VAR_4 , VAR_5 & VAR_6 ) ;   METHOD_2 ( VAR_7 , VAR_8 , METHOD_3 ( VAR_9 ) ) ;   METHOD_4 ( VAR_10 , VAR_11 , METHOD_5 ( VAR_12 ) ) ;   while ( ( METHOD_6 ( VAR_13 , VAR_14 ) & VAR_15 ) != 0 )  { } }
static TYPE_0 METHOD_0 (  TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 ;  TYPE_3 VAR_2 = 0 ; VAR_3 = VAR_4 ; while ( * VAR_5 != '\\0' ) if ( * VAR_6 ++ == '%' ) { if ( * VAR_7 == '\\0' ) return 1 ; if ( * VAR_8 == '%' ) VAR_9 ++ ; else if ( * VAR_10 == 's' || * VAR_11 == 'S' ) { VAR_12 = 1 ; VAR_13 ++ ; } else { if ( * VAR_14 == '' ) VAR_15 ++ ; while ( * VAR_16 >= '0' && * VAR_17 <= '9' ) VAR_18 ++ ; if ( * VAR_19 ++ != 'l' ) return 1 ; if ( * VAR_20 == 'u' ) VAR_21 ++ ; else return 1 ; VAR_22 ++ ; } } return ( VAR_23 != 3 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; METHOD_2 ( & VAR_3 -> VAR_4 ) ; METHOD_3 ( & VAR_5 -> VAR_6 ) ; METHOD_4 ( VAR_7 ) ; if ( VAR_8 -> VAR_9 == VAR_10 && VAR_11 -> VAR_12 != VAR_13 ) { METHOD_5 ( "AttempttoreleaseTCPsocketinstate%d%p\\n" , VAR_14 -> VAR_15 , VAR_16 ) ; return ; } if ( ! METHOD_6 ( VAR_17 , VAR_18 ) ) { METHOD_7 ( "Attempttoreleasealiveinetsocket%p\\n" , VAR_19 ) ; return ; } METHOD_8 ( METHOD_9 ( & VAR_20 -> VAR_21 ) ) ; METHOD_10 ( METHOD_11 ( & VAR_22 -> VAR_23 ) ) ; METHOD_12 ( VAR_24 -> VAR_25 ) ; METHOD_13 ( VAR_26 -> VAR_27 ) ;  METHOD_14 ( VAR_28 -> VAR_29 ) ;  METHOD_15 ( METHOD_16 ( VAR_30 -> VAR_31 , 1 ) ) ; METHOD_17 ( VAR_32 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_1 ( VAR_9 ) ; TYPE_2 VAR_10 ; METHOD_2 ( & VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 , & VAR_17 , 64 ) ; METHOD_4 ( VAR_18 , VAR_19 . VAR_20 ) ;  if ( METHOD_5 ( VAR_21 . VAR_22 == VAR_23 ) )  { METHOD_6 ( VAR_24 , VAR_25 . VAR_26 . VAR_27 . VAR_28 , VAR_29 . VAR_30 . VAR_31 . VAR_32 , VAR_33 ) ; return METHOD_7 ( VAR_34 , & VAR_35 , 0 ) ; } while ( VAR_36 . VAR_37 >= 64 ) { METHOD_8 ( VAR_38 , VAR_39 . VAR_40 . VAR_41 . VAR_42 , VAR_43 . VAR_44 . VAR_45 . VAR_46 , VAR_47 . VAR_48 - ( VAR_49 . VAR_50 % 64 ) ) ; VAR_51 = METHOD_9 ( VAR_52 , & VAR_53 , VAR_54 . VAR_55 % 64 ) ; } if ( VAR_56 . VAR_57 ) { METHOD_10 ( VAR_58 , VAR_59 . VAR_60 . VAR_61 . VAR_62 , VAR_63 . VAR_64 . VAR_65 . VAR_66 , VAR_67 . VAR_68 ) ; VAR_69 = METHOD_11 ( VAR_70 , & VAR_71 , 0 ) ; } return VAR_72 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; if ( VAR_9 == 0 ) goto VAR_10 ; METHOD_1 ( * VAR_11 ) ; VAR_12 = 0 ; VAR_13 = 0 ; if ( * VAR_14 == '-' ) { VAR_15 = 1 ; VAR_16 ++ ; VAR_17 -- ; } VAR_18 = 0 ; VAR_19 = 0 ; for ( ; ; ) { if ( VAR_20 == 0 ) goto VAR_21 ; METHOD_2 ( * VAR_22 ) ; VAR_23 = * VAR_24 ; if ( ! ( VAR_25 >= '0' && VAR_26 <= '9' ) ) {  if ( ! VAR_27 )   goto VAR_28 ;  break ; } VAR_29 -= '0' ; if ( VAR_30 > ( VAR_31 / 10 ) ) { VAR_32 = 1 ; } else { VAR_33 *= 10 ; if ( VAR_34 == VAR_35 && VAR_36 > ( VAR_37 % 10 ) ) { VAR_38 = 1 ; } else VAR_39 += VAR_40 ; } VAR_41 ++ ; VAR_42 -- ; VAR_43 = 1 ; } if ( ! VAR_44 ) goto VAR_45 ; if ( VAR_46 == 0 ) goto VAR_47 ; METHOD_3 ( * VAR_48 ) ;  if ( * VAR_49 != '\\r' )   goto VAR_50 ;  VAR_51 ++ ; VAR_52 -- ; if ( VAR_53 == 0 ) goto VAR_54 ; METHOD_4 ( * VAR_55 ) ;  if ( * VAR_56 != '\\n' )   goto VAR_57 ;  VAR_58 ++ ; VAR_59 -- ; * VAR_60 = VAR_61 ; if ( VAR_62 ) { if ( VAR_63 || VAR_64 != 1 ) return ( - 4 ) ; VAR_65 = - 1 ; } return ( VAR_66 ? - 3 : VAR_67 ) ; VAR_68 :  return ( - 2 ) ;  VAR_69 :  return ( - 5 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ; TYPE_1 VAR_8 ; TYPE_2 VAR_9 ; TYPE_3 VAR_10 ; METHOD_1 ( VAR_11 ) ; VAR_12 = VAR_13 -> VAR_14 ; METHOD_2 ( & VAR_15 , VAR_16 ) ; VAR_17 = METHOD_3 ( VAR_18 ) ; METHOD_4 ( VAR_19 . VAR_20 < METHOD_5 ( VAR_21 -> VAR_22 -> VAR_23 ) / 8 ) ; VAR_24 = VAR_25 -> VAR_26 ; VAR_27 = VAR_28 = VAR_29 . VAR_30 / 2 ; for ( VAR_31 = & VAR_32 [ VAR_33 ] ; VAR_34 > 4 ; VAR_35 = & VAR_36 [ VAR_37 ] ) { VAR_38 /= 2 ; if ( METHOD_6 ( VAR_39 -> VAR_40 ) < VAR_41 ) VAR_42 += VAR_43 ; else if ( METHOD_7 ( VAR_44 -> VAR_45 ) > VAR_46 ) VAR_47 -= VAR_48 ; else break ; } METHOD_8 ( VAR_49 >= 0 && ( ! VAR_50 . VAR_51 || VAR_52 < VAR_53 . VAR_54 ) ) ; METHOD_9 ( VAR_55 <= 4 || METHOD_10 ( VAR_56 -> VAR_57 ) == VAR_58 ) ; while ( VAR_59 > 0 && METHOD_11 ( VAR_60 -> VAR_61 ) >= VAR_62 ) { VAR_63 -- ; VAR_64 -- ; } while ( VAR_65 < VAR_66 . VAR_67 && METHOD_12 ( VAR_68 -> VAR_69 ) < VAR_70 ) { VAR_71 ++ ; VAR_72 ++ ; } if ( VAR_73 == VAR_74 . VAR_75 || METHOD_13 ( VAR_76 -> VAR_77 ) != VAR_78 ) { VAR_79 -> VAR_80 = VAR_81 ; return METHOD_14 ( VAR_82 ) ; } for ( ; VAR_83 < VAR_84 . VAR_85 && ( METHOD_15 ( VAR_86 -> VAR_87 ) == VAR_88 ) ; VAR_89 ++ , VAR_90 ++ ) { if ( ( VAR_91 -> VAR_92 & VAR_93 ) != ( VAR_94 -> VAR_95 & VAR_96 ) ) { continue ; } if ( VAR_97 -> VAR_98 & VAR_99 ) { VAR_100 = METHOD_16 ( VAR_101 , VAR_102 ) ; if ( VAR_103 -> VAR_104 != VAR_105 -> VAR_106 ) continue ; if ( METHOD_17 ( VAR_107 -> VAR_108 , VAR_109 -> VAR_110 , VAR_111 -> VAR_112 ) != 0 ) continue ; if ( ! METHOD_18 ( VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ) continue ; VAR_117 -> VAR_118 = VAR_119 ; return METHOD_19 ( VAR_120 ) ; } else { VAR_121 = METHOD_20 ( VAR_122 , VAR_123 ) ; if ( VAR_124 -> VAR_125 != VAR_126 -> VAR_127 ) continue ; if ( METHOD_21 ( VAR_128 -> VAR_129 , VAR_130 -> VAR_131 , VAR_132 -> VAR_133 ) != 0 ) continue ; if ( ! METHOD_22 ( VAR_134 -> VAR_135 , VAR_136 -> VAR_137 ) ) continue ; VAR_138 -> VAR_139 = VAR_140 ;  VAR_141 -> VAR_142 = METHOD_23 ( VAR_143 -> VAR_144 ) ;  VAR_145 -> VAR_146 = METHOD_24 ( VAR_147 -> VAR_148 ) ; VAR_149 -> VAR_150 = METHOD_25 ( VAR_151 -> VAR_152 -> VAR_153 ,  VAR_154 -> VAR_155 ) ;  return METHOD_26 ( VAR_156 ) ; } } VAR_157 -> VAR_158 = VAR_159 ; return METHOD_27 ( VAR_160 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 TYPE_3 TYPE_4 ( "DefragInOrderSimpleTest" , VAR_0 ) ; TYPE_5 ( "DefragReverseSimpleTest" , VAR_1 ) ; TYPE_6 ( "DefragSturgesNovakBsdTest" , VAR_2 ) ; TYPE_7 ( "DefragSturgesNovakLinuxTest" , VAR_3 ) ; TYPE_8 ( "DefragSturgesNovakWindowsTest" , VAR_4 ) ; TYPE_9 ( "DefragSturgesNovakSolarisTest" , VAR_5 ) ; TYPE_10 ( "DefragSturgesNovakFirstTest" , VAR_6 ) ; TYPE_11 ( "DefragSturgesNovakLastTest" , VAR_7 ) ; TYPE_12 ( "DefragIPv4NoDataTest" , VAR_8 ) ; TYPE_13 ( "DefragIPv4TooLargeTest" , VAR_9 ) ; TYPE_14 ( "IPV6DefragInOrderSimpleTest" , VAR_10 ) ; TYPE_15 ( "IPV6DefragReverseSimpleTest" , VAR_11 ) ; TYPE_16 ( "IPV6DefragSturgesNovakBsdTest" , VAR_12 ) ; TYPE_17 ( "IPV6DefragSturgesNovakLinuxTest" , VAR_13 ) ; TYPE_18 ( "IPV6DefragSturgesNovakWindowsTest" , VAR_14 ) ; TYPE_19 ( "IPV6DefragSturgesNovakSolarisTest" , VAR_15 ) ; TYPE_20 ( "IPV6DefragSturgesNovakFirstTest" , VAR_16 ) ; TYPE_21 ( "IPV6DefragSturgesNovakLastTest" , VAR_17 ) ; TYPE_22 ( "DefragVlanTest" , VAR_18 ) ; TYPE_23 ( "DefragVlanQinQTest" , VAR_19 ) ; TYPE_24 ( "DefragTrackerReuseTest" , VAR_20 ) ; TYPE_25 ( "DefragTimeoutTest" , VAR_21 ) ; TYPE_26 ( "DefragMfIpv4Test" , VAR_22 ) ; TYPE_27 ( "DefragMfIpv6Test" , VAR_23 ) ;   }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; METHOD_1 ( & VAR_7 , 0 , sizeof ( VAR_8 ) ) ; VAR_9 . VAR_10 = VAR_11 ; VAR_12 . VAR_13 . VAR_14 = 4 ; METHOD_2 ( VAR_15 . VAR_16 . VAR_17 , VAR_18 ) ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ;  if ( VAR_25 ) {  VAR_26 . VAR_27 = METHOD_3 ( VAR_28 + VAR_29 ) ; if ( VAR_30 . VAR_31 == VAR_32 ) { return VAR_33 ; } if ( VAR_34 ) { VAR_35 . VAR_36 [ 0 ] = VAR_37 ; VAR_38 . VAR_39 ++ ; } METHOD_4 ( & VAR_40 . VAR_41 [ VAR_42 ] , VAR_43 , VAR_44 ) ; } VAR_45 = METHOD_5 ( & VAR_46 -> VAR_47 , & VAR_48 ) ; if ( VAR_49 != VAR_50 ) { METHOD_6 ( VAR_51 . VAR_52 ) ; VAR_53 . VAR_54 = VAR_55 ; } return VAR_56 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * VAR_4 = "" ; const TYPE_5 * VAR_5 = "" ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 ( VAR_8 ) * VAR_9 = VAR_10 ; TYPE_8 VAR_11 [ sizeof ( TYPE_9 ( VAR_12 ) ) ] = { 0 } ; TYPE_10 * VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; if ( VAR_16 -> VAR_17 > VAR_18 -> VAR_19 . VAR_20 ) { return VAR_21 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; if ( ( TYPE_12 ) VAR_27 -> VAR_28 < 1 ) { return VAR_29 ; } TYPE_13 ( VAR_30 ) * VAR_31 = METHOD_1 ( VAR_32 -> VAR_33 , sizeof ( TYPE_14 ) ) ; if ( ! VAR_34 ) { return VAR_35 ; } if ( VAR_36 -> VAR_37 && VAR_38 -> VAR_39 < VAR_40 -> VAR_41 ) { VAR_42 = & VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 ] ; } if ( VAR_47 && VAR_48 -> VAR_49 && VAR_50 -> VAR_51 < VAR_52 -> VAR_53 ) { VAR_54 = & VAR_55 -> VAR_56 [ VAR_57 -> VAR_58 ] ; } if ( ! VAR_59 ) { METHOD_2 ( "Warning:Cannotallocatememory(CheckElf_(Verdef))\\n" ) ; return VAR_60 ; } VAR_61 = METHOD_3 ( ) ; VAR_62 = ( TYPE_15 * ) VAR_63 + VAR_64 -> VAR_65 ; METHOD_4 ( VAR_66 , "section_name" , VAR_67 , 0 ) ; METHOD_5 ( VAR_68 , "entries" , VAR_69 -> VAR_70 , 0 ) ; METHOD_6 ( VAR_71 , "addr" , VAR_72 -> VAR_73 , 0 ) ; METHOD_7 ( VAR_74 , "offset" , VAR_75 -> VAR_76 , 0 ) ; METHOD_8 ( VAR_77 , "link" , VAR_78 -> VAR_79 , 0 ) ; METHOD_9 ( VAR_80 , "link_section_name" , VAR_81 , 0 ) ; for ( VAR_82 = 0 , VAR_83 = 0 ; VAR_84 >= 0 && VAR_85 < VAR_86 -> VAR_87 && ( ( TYPE_16 * ) VAR_88 + VAR_89 < VAR_90 ) ; ++ VAR_91 ) { TYPE_17 * VAR_92 = METHOD_10 ( ) ; TYPE_18 * VAR_93 = ( ( TYPE_19 * ) VAR_94 ) + VAR_95 ;  TYPE_20 VAR_96 [ 32 ] = { 0 } ;  TYPE_21 ( VAR_97 ) * VAR_98 = ( TYPE_22 ( VAR_99 ) * ) VAR_100 ; TYPE_23 ( TYPE_24 ) VAR_101 = { 0 } ; TYPE_25 VAR_102 = 0 ; TYPE_26 VAR_103 = 0 ; METHOD_11 ( VAR_104 -> VAR_105 , VAR_106 -> VAR_107 + VAR_108 , VAR_109 , sizeof ( TYPE_27 ( VAR_110 ) ) ) ; VAR_111 -> VAR_112 = METHOD_12 ( VAR_113 , VAR_114 ) VAR_115 -> VAR_116 = METHOD_13 ( VAR_117 , VAR_118 ) VAR_119 -> VAR_120 = METHOD_14 ( VAR_121 , VAR_122 ) VAR_123 -> VAR_124 = METHOD_15 ( VAR_125 , VAR_126 ) VAR_127 -> VAR_128 = METHOD_16 ( VAR_129 , VAR_130 ) VAR_131 -> VAR_132 = METHOD_17 ( VAR_133 , VAR_134 ) VAR_135 -> VAR_136 = METHOD_18 ( VAR_137 , VAR_138 ) TYPE_28 VAR_139 = VAR_140 -> VAR_141 ;  if ( VAR_142 < 1 || VAR_143 + VAR_144 < VAR_145 ) {  METHOD_19 ( VAR_146 ) ; goto VAR_147 ; }  VAR_148 += VAR_149 ;  if ( VAR_150 > VAR_151 || VAR_152 + sizeof ( TYPE_29 ( TYPE_30 ) ) > VAR_153 ) { METHOD_20 ( VAR_154 ) ; goto VAR_155 ; } VAR_156 = 0 ; VAR_157 . VAR_158 = METHOD_21 ( VAR_159 , VAR_160 ) VAR_161 . VAR_162 = METHOD_22 ( VAR_163 , VAR_164 ) VAR_165 = VAR_166 + VAR_167 -> VAR_168 ; if ( VAR_169 . VAR_170 > VAR_171 -> VAR_172 ) { METHOD_23 ( VAR_173 ) ; goto VAR_174 ; } METHOD_24 ( VAR_175 , "idx" , VAR_176 , 0 ) ; METHOD_25 ( VAR_177 , "vd_version" , VAR_178 -> VAR_179 , 0 ) ; METHOD_26 ( VAR_180 , "vd_ndx" , VAR_181 -> VAR_182 , 0 ) ; METHOD_27 ( VAR_183 , "vd_cnt" , VAR_184 -> VAR_185 , 0 ) ; METHOD_28 ( VAR_186 , "vda_name" , & VAR_187 -> VAR_188 [ VAR_189 . VAR_190 ] , 0 ) ; METHOD_29 ( VAR_191 , "flags" , METHOD_30 ( VAR_192 -> VAR_193 ) , 0 ) ; for ( VAR_194 = 1 ; VAR_195 < VAR_196 -> VAR_197 ; ++ VAR_198 ) { TYPE_31 VAR_199 ; TYPE_32 * VAR_200 = METHOD_31 ( ) ; VAR_201 += VAR_202 . VAR_203 ; VAR_204 += VAR_205 . VAR_206 ;  if ( VAR_207 > VAR_208 || VAR_209 + sizeof ( TYPE_33 ( TYPE_34 ) ) > VAR_210 ) {  METHOD_32 ( VAR_211 ) ; METHOD_33 ( VAR_212 ) ; goto VAR_213 ; } VAR_214 = 0 ; VAR_215 . VAR_216 = METHOD_34 ( VAR_217 , VAR_218 ) VAR_219 . VAR_220 = METHOD_35 ( VAR_221 , VAR_222 ) if ( VAR_223 . VAR_224 > VAR_225 -> VAR_226 ) { METHOD_36 ( VAR_227 ) ; METHOD_37 ( VAR_228 ) ; goto VAR_229 ; } METHOD_38 ( VAR_230 , "idx" , VAR_231 , 0 ) ; METHOD_39 ( VAR_232 , "parent" , VAR_233 , 0 ) ; METHOD_40 ( VAR_234 , "vda_name" , & VAR_235 -> VAR_236 [ VAR_237 . VAR_238 ] , 0 ) ; METHOD_41 ( VAR_239 , sizeof ( VAR_240 ) , "parent%d" , VAR_241 - 1 ) ; METHOD_42 ( VAR_242 , VAR_243 , VAR_244 ) ; } METHOD_43 ( VAR_245 , sizeof ( VAR_246 ) , "verdef%d" , VAR_247 ) ; METHOD_44 ( VAR_248 , VAR_249 , VAR_250 ) ; if ( ! VAR_251 -> VAR_252 ) { METHOD_45 ( VAR_253 ) ; goto VAR_254 ; } if ( ( TYPE_35 ) VAR_255 -> VAR_256 < 1 ) { METHOD_46 ( "Warning:Invalidvd_nextintheELFversion\\n" ) ; break ; } VAR_257 += VAR_258 -> VAR_259 ; } METHOD_47 ( VAR_260 ) ; return VAR_261 ; VAR_262 : METHOD_48 ( VAR_263 ) ; METHOD_49 ( VAR_264 ) ; return VAR_265 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { if ( VAR_2 == VAR_3 || VAR_4 == VAR_5 ) TYPE_3 VAR_6 ; TYPE_4 * VAR_7 ; TYPE_5 * VAR_8 ; TYPE_6 * VAR_9 ; TYPE_7 * VAR_10 ; VAR_11 * VAR_12 ; VAR_13 = & VAR_14 -> VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 , "\\t" , & VAR_18 ) ; if ( VAR_19 == VAR_20 ) return VAR_21 ; if ( ! METHOD_2 ( VAR_22 , "Basic" ) ) { VAR_23 -> VAR_24 = VAR_25 ; } else if ( ! METHOD_3 ( VAR_26 , "Digest" ) ) { VAR_27 -> VAR_28 = VAR_29 ; } else { return VAR_30 ; } VAR_31 = METHOD_4 ( VAR_32 , "," , & VAR_33 ) ; while ( VAR_34 != VAR_35 ) {  VAR_36 = METHOD_5 ( VAR_37 , '=' ) ;  if ( VAR_38 != VAR_39 ) { * VAR_40 = '\\0' ; VAR_41 = METHOD_6 ( VAR_42 ) ; VAR_43 = METHOD_7 ( VAR_44 + 1 ) ; VAR_45 = METHOD_8 ( VAR_46 ) ; if ( VAR_47 > 0 && VAR_48 [ VAR_49 - 1 ] == \'\\"\' ) VAR_50 [ VAR_51 - 1 ] = '\\0' ; if ( VAR_52 [ 0 ] == \'\\"\' ) VAR_53 ++ ; if ( ! METHOD_9 ( VAR_54 , "realm" ) ) { METHOD_10 ( VAR_55 -> VAR_56 , VAR_57 , VAR_58 ) ; } if ( VAR_59 == VAR_60 ) else if ( ! METHOD_11 ( VAR_61 , "nonce" ) ) { METHOD_12 ( VAR_62 -> VAR_63 , VAR_64 , VAR_65 + 1 ) ; } else if ( ! METHOD_13 ( VAR_66 , "opaque" ) ) { METHOD_14 ( VAR_67 -> VAR_68 , VAR_69 , VAR_70 + 1 ) ; } else if ( ! METHOD_15 ( VAR_71 , "stale" ) ) { if ( ! METHOD_16 ( VAR_72 , "true" ) ) VAR_73 -> VAR_74 = VAR_75 ; else VAR_76 -> VAR_77 = VAR_78 ; } VAR_79 = METHOD_17 ( VAR_80 , "," , & VAR_81 ) ; } } return VAR_82 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 = - 1 ; TYPE_7 VAR_6 = * VAR_7 ; TYPE_8 VAR_8 = 0 ; GET32 ( VAR_9 ) do { if ( VAR_10 + 4 > VAR_11 ) goto VAR_12 ; METHOD_1 ( & VAR_13 , VAR_14 + VAR_15 , 4 ) ; VAR_16 += 4 ; VAR_17 = METHOD_2 ( VAR_18 ) ; } while ( 0 ) GET16 ( VAR_19 ) do { if ( VAR_20 + 2 > VAR_21 ) goto VAR_22 ; METHOD_3 ( & VAR_23 , VAR_24 + VAR_25 , 2 ) ; VAR_26 += 2 ; VAR_27 = METHOD_4 ( VAR_28 ) ; } while ( 0 ) METHOD_5 ( VAR_29 ) do { if ( VAR_30 >= VAR_31 ) goto VAR_32 ; VAR_33 = VAR_34 [ VAR_35 ++ ] ; } while ( 0 ) TYPE_9 * VAR_36 = VAR_37 ; const TYPE_10 * const VAR_38 = VAR_39 + VAR_40 ; for ( ; ; ) { TYPE_11 VAR_41 ;  if ( VAR_42 >= VAR_43 ) return - 1 ;  METHOD_6 ( VAR_44 ) ; if ( ! VAR_45 ) break ; if ( VAR_46 & 0xc0 ) { TYPE_12 VAR_47 ; METHOD_7 ( VAR_48 ) ; if ( VAR_49 < 0 ) VAR_50 = VAR_51 ; VAR_52 = ( ( ( TYPE_13 ) VAR_53 & 0x3f ) << 8 ) + VAR_54 ; if ( VAR_55 < 0 || VAR_56 >= VAR_57 ) return - 1 ; if ( ++ VAR_58 > VAR_59 ) return - 1 ; continue ; } if ( VAR_60 > 63 ) return - 1 ; if ( VAR_61 != VAR_62 ) { if ( VAR_63 + 1 >= VAR_64 ) return - 1 ; * VAR_65 ++ = '.' ; } if ( VAR_66 + VAR_67 >= VAR_68 ) return - 1 ;  METHOD_8 ( VAR_69 , VAR_70 + VAR_71 , VAR_72 ) ;  VAR_73 += VAR_74 ; VAR_75 += VAR_76 ; } if ( VAR_77 >= VAR_78 ) return - 1 ; * VAR_79 = '\\0' ; if ( VAR_80 < 0 ) * VAR_81 = VAR_82 ; else * VAR_83 = VAR_84 ; return 0 ; VAR_85 : return - 1 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 . VAR_9 / 8 ; TYPE_6 VAR_10 = VAR_11 / VAR_12 ; TYPE_7 VAR_13 = VAR_14 ; TYPE_8 * VAR_15 = ( TYPE_9 * ) VAR_16 ; TYPE_10 * VAR_17 = ( TYPE_11 * ) METHOD_2 ( VAR_18 ) ;  METHOD_3 ( ( VAR_19 % ( VAR_20 * VAR_21 ) ) == 0 ) ;  if ( ! VAR_22 )  return ;  while ( VAR_23 > VAR_24 ) { REPEAT4 ( VAR_25 , VAR_26 [ VAR_27 ] = ( unsigned TYPE_12 ) ( ( VAR_28 [ VAR_29 ] + VAR_30 [ 0 ] ) & 0xff ) ; VAR_31 ++ ) VAR_32 -= VAR_33 ; } METHOD_4 ( VAR_34 , VAR_35 , VAR_36 ) ; VAR_37 = ( TYPE_13 * ) VAR_38 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { TYPE_14 VAR_43 ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 ; VAR_47 ++ ) { if VAR_48 VAR_49 [ VAR_50 * VAR_51 + VAR_52 ] = VAR_53 [ VAR_54 * VAR_55 + VAR_56 ] ; else VAR_57 [ VAR_58 * VAR_59 + VAR_60 ] = VAR_61 [ ( VAR_62 - VAR_63 - 1 ) * VAR_64 + VAR_65 ] ; } } METHOD_5 ( VAR_66 ) ;  }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 = METHOD_1 ( METHOD_2 ( VAR_2 ) + 1 ) ;   METHOD_3 ( VAR_3 , VAR_4 ) ;  return VAR_5 ; }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { METHOD_1 ( VAR_1 , STRUCT_OR_UNION_3 -> VAR_2 ) ;  if ( METHOD_2 ( STRUCT_OR_UNION_4 ) )  METHOD_3 ( VAR_3 , ":%u" , STRUCT_OR_UNION_5 -> VAR_4 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 , TYPE_5 VAR_3 , struct STRUCT_OR_UNION_2 * VAR_4 , struct STRUCT_OR_UNION_3 * VAR_5 ) { struct STRUCT_OR_UNION_4 * VAR_6 = STRUCT_OR_UNION_5 -> VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_7 VAR_11 ; unsigned VAR_12 ; struct STRUCT_OR_UNION_8 * VAR_13 = VAR_14 ; unsigned TYPE_6 VAR_15 = 0 ; TYPE_7 * VAR_16 , * VAR_17 , * VAR_18 ; TYPE_8 VAR_19 = - VAR_20 ; METHOD_1 ( & VAR_21 ) ; VAR_22 = - VAR_23 ; if ( VAR_24 -> VAR_25 != 0 ) goto VAR_26 ; if ( METHOD_2 ( VAR_27 ) && ! METHOD_3 ( VAR_28 , VAR_29 ) ) goto VAR_30 ; VAR_31 = - VAR_32 ; VAR_33 = METHOD_4 ( VAR_34 ) ; VAR_35 = ( TYPE_9 * ) VAR_36 ; if ( ! VAR_37 ) goto VAR_38 ; VAR_39 = - VAR_40 ; if ( ( * VAR_41 != 0 ) || ( VAR_42 >= VAR_43 ) ) goto VAR_44 ; VAR_45 = - VAR_46 ; if ( METHOD_5 ( VAR_47 , VAR_48 , VAR_49 ) ) goto VAR_50 ; VAR_51 [ VAR_52 ] = '\\0' ; VAR_53 = - VAR_54 ; VAR_55 = VAR_56 ; VAR_57 . VAR_58 = 0 ; for ( ; VAR_59 ; VAR_60 = VAR_61 ) { VAR_62 = & VAR_63 . VAR_64 [ VAR_65 . VAR_66 ] ; VAR_67 = METHOD_6 ( VAR_68 , '\\n' ) ; if ( VAR_69 ) { * VAR_70 = '\\0' ; VAR_71 ++ ; if ( * VAR_72 == '\\0' ) VAR_73 = VAR_74 ; } VAR_75 = METHOD_7 ( VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_8 ( VAR_79 , & VAR_80 , 10 ) ; if ( ! METHOD_9 ( * VAR_81 ) ) goto VAR_82 ; VAR_83 = METHOD_10 ( VAR_84 ) ; VAR_85 -> VAR_86 = METHOD_11 ( VAR_87 , & VAR_88 , 10 ) ; if ( ! METHOD_12 ( * VAR_89 ) ) goto VAR_90 ; VAR_91 = METHOD_13 ( VAR_92 ) ; VAR_93 -> VAR_94 = METHOD_14 ( VAR_95 , & VAR_96 , 10 ) ; if ( * VAR_97 && ! METHOD_15 ( * VAR_98 ) ) goto VAR_99 ; VAR_100 = METHOD_16 ( VAR_101 ) ; if ( * VAR_102 != '\\0' ) goto VAR_103 ; if ( ( VAR_104 -> VAR_105 == ( TYPE_10 ) - 1 ) || ( VAR_106 -> VAR_107 == ( TYPE_11 ) - 1 ) ) goto VAR_108 ; if ( ( VAR_109 -> VAR_110 + VAR_111 -> VAR_112 ) <= VAR_113 -> VAR_114 ) goto VAR_115 ; if ( ( VAR_116 -> VAR_117 + VAR_118 -> VAR_119 ) <= VAR_120 -> VAR_121 ) goto VAR_122 ; if ( METHOD_17 ( & VAR_123 , VAR_124 ) ) goto VAR_125 ; VAR_126 . VAR_127 ++ ; if ( ( VAR_128 . VAR_129 == VAR_130 ) && ( VAR_131 != VAR_132 ) ) goto VAR_133 ; } if ( VAR_134 . VAR_135 == 0 ) goto VAR_136 ; VAR_137 = - VAR_138 ;  if ( ! METHOD_18 ( VAR_139 , VAR_140 , & VAR_141 ) )  goto VAR_142 ; for ( VAR_143 = 0 ; VAR_144 < VAR_145 . VAR_146 ; VAR_147 ++ ) { TYPE_12 VAR_148 ; VAR_149 = & VAR_150 . VAR_151 [ VAR_152 ] ; VAR_153 = METHOD_19 ( VAR_154 , VAR_155 -> VAR_156 , VAR_157 -> VAR_158 ) ; if ( VAR_159 == ( TYPE_13 ) - 1 ) goto VAR_160 ; VAR_161 -> VAR_162 = VAR_163 ; } METHOD_20 ( VAR_164 -> VAR_165 , VAR_166 . VAR_167 , VAR_168 . VAR_169 * sizeof ( VAR_170 . VAR_171 [ 0 ] ) ) ; METHOD_21 ( ) ; VAR_172 -> VAR_173 = VAR_174 . VAR_175 ; * VAR_176 = VAR_177 ; VAR_178 = VAR_179 ; VAR_180 : METHOD_22 ( & VAR_181 ) ; if ( VAR_182 ) METHOD_23 ( VAR_183 ) ; return VAR_184 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 , const TYPE_6 * VAR_5 , TYPE_7 VAR_6 ) { const TYPE_8 * VAR_7 = VAR_8 , * VAR_9 = VAR_10 + ( VAR_11 -> VAR_12 . VAR_13 - 7 ) ; TYPE_9 VAR_14 ; TYPE_10 VAR_15 ; if ( VAR_16 -> VAR_17 . VAR_18 > VAR_19 ) { return VAR_20 ; } while ( VAR_21 && VAR_22 < VAR_23 && VAR_24 >= VAR_25 ) { if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 == VAR_30 -> VAR_31 ) { METHOD_1 ( VAR_32 ) ; } VAR_33 = METHOD_2 ( VAR_34 , VAR_35 - VAR_36 , & VAR_37 ) ; if ( VAR_38 > VAR_39 -> VAR_40 || ! VAR_41 ) { return VAR_42 ; } METHOD_3 ( & VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 ] ) ; if ( ! VAR_47 ) { VAR_48 -> VAR_49 [ VAR_50 -> VAR_51 ] . VAR_52 = 0 ; VAR_53 -> VAR_54 ++ ; VAR_55 ++ ; continue ; } VAR_56 -> VAR_57 [ VAR_58 -> VAR_59 ] . VAR_60 = VAR_61 ; VAR_62 -> VAR_63 [ VAR_64 -> VAR_65 ] . VAR_66 = VAR_67 -> VAR_68 [ VAR_69 - 1 ] . VAR_70 ; VAR_71 += VAR_72 ; if ( VAR_73 -> VAR_74 < VAR_75 ) { return VAR_76 ; } for ( VAR_77 = 0 ; VAR_78 < VAR_79 -> VAR_80 [ VAR_81 - 1 ] . VAR_82 ; VAR_83 ++ ) { if ( VAR_84 -> VAR_85 [ VAR_86 -> VAR_87 ] . VAR_88 == VAR_89 -> VAR_90 [ VAR_91 -> VAR_92 ] . VAR_93 ) { METHOD_4 ( & VAR_94 -> VAR_95 [ VAR_96 -> VAR_97 ] ) ; } if ( VAR_98 >= VAR_99 -> VAR_100 [ VAR_101 -> VAR_102 ] . VAR_103 || VAR_104 >= VAR_105 -> VAR_106 [ VAR_107 - 1 ] . VAR_108 ) { METHOD_5 ( "Warning:malformeddwarfattributecapacitydoesn\'tmatchlength\\n" ) ; break ; } METHOD_6 ( & VAR_109 -> VAR_110 [ VAR_111 -> VAR_112 ] . VAR_113 [ VAR_114 ] , 0 , sizeof ( VAR_115 -> VAR_116 [ VAR_117 -> VAR_118 ] . VAR_119 [ VAR_120 ] ) ) ; VAR_121 = METHOD_7 ( VAR_122 , VAR_123 - VAR_124 , & VAR_125 -> VAR_126 [ VAR_127 - 1 ] . VAR_128 [ VAR_129 ] , & VAR_130 -> VAR_131 [ VAR_132 -> VAR_133 ] . VAR_134 [ VAR_135 ] , & VAR_136 -> VAR_137 , VAR_138 , VAR_139 ) ; if ( VAR_140 -> VAR_141 [ VAR_142 -> VAR_143 ] . VAR_144 [ VAR_145 ] . VAR_146 == VAR_147 ) { const TYPE_11 * VAR_148 = VAR_149 -> VAR_150 [ VAR_151 -> VAR_152 ] . VAR_153 [ VAR_154 ] . VAR_155 . VAR_156 . VAR_157 ;  METHOD_8 ( VAR_158 , "DW_AT_comp_dir" , VAR_159 , 0 ) ;   }  VAR_160 -> VAR_161 [ VAR_162 -> VAR_163 ] . VAR_164 ++ ; } VAR_165 -> VAR_166 ++ ; } return VAR_167 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 , * VAR_6 = VAR_7 ; VAR_8 * VAR_9 ; TYPE_5 VAR_10 = VAR_11 ; if ( ! VAR_12 ) { if ( ! VAR_13 -> VAR_14 || VAR_15 -> VAR_16 ) return VAR_17 ; if ( ! VAR_18 -> VAR_19 ) { VAR_20 -> VAR_21 = 1 ; METHOD_1 ( VAR_22 -> VAR_23 ) ; } } else { VAR_24 -> VAR_25 -> VAR_26 = ! VAR_27 -> VAR_28 ; VAR_29 -> VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; if ( VAR_34 -> VAR_35 ) METHOD_2 ( VAR_36 -> VAR_37 , "interlaced_coding" , ! VAR_38 -> VAR_39 ) ; } if ( ! VAR_40 -> VAR_41 ) { TYPE_6 VAR_42 ; if ( VAR_43 -> VAR_44 . VAR_45 != VAR_46 -> VAR_47 . VAR_48 ) { TYPE_7 VAR_49 [ 5 ] , VAR_50 [ 5 ] ; METHOD_3 ( VAR_51 -> VAR_52 . VAR_53 , VAR_54 ) ; VAR_55 [ 4 ] = '\\0' ; VAR_56 [ 4 ] = '\\0' ; METHOD_4 ( VAR_57 -> VAR_58 . VAR_59 , VAR_60 ) ; METHOD_5 ( VAR_61 , "Resettingchromafrom%sto%s" , VAR_62 , VAR_63 ) ; if ( ! METHOD_6 ( VAR_64 , VAR_65 -> VAR_66 . VAR_67 ) ) { METHOD_7 ( VAR_68 , "Couldnotresetchromaformatto%s" , VAR_69 ) ; return VAR_70 ; } } METHOD_8 ( & VAR_71 , VAR_72 -> VAR_73 . VAR_74 . VAR_75 , VAR_76 -> VAR_77 . VAR_78 . VAR_79 ) ; METHOD_9 ( & VAR_80 , 1 ) ; VAR_81 -> VAR_82 = METHOD_10 ( & VAR_83 ) ; if ( METHOD_11 ( VAR_84 -> VAR_85 , "interlaced_coding" ) > 0.0 ) { METHOD_12 ( & VAR_86 , 0 ) ; METHOD_13 ( & VAR_87 , 1 ) ; VAR_88 -> VAR_89 = METHOD_14 ( & VAR_90 ) / 2 ; } METHOD_15 ( VAR_91 -> VAR_92 , VAR_93 ) ; METHOD_16 ( VAR_94 -> VAR_95 , VAR_96 -> VAR_97 ) ; METHOD_17 ( VAR_98 -> VAR_99 ) ; VAR_100 -> VAR_101 = 1 ; } if ( ! VAR_102 -> VAR_103 ) { METHOD_18 ( VAR_104 ) ; VAR_105 = METHOD_19 ( VAR_106 , VAR_107 ) ; if ( ! VAR_108 ) return VAR_109 ; METHOD_20 ( VAR_110 -> VAR_111 , VAR_112 ) ; METHOD_21 ( VAR_113 , VAR_114 -> VAR_115 , VAR_116 -> VAR_117 ) ; VAR_118 -> VAR_119 ++ ; VAR_120 = METHOD_22 ( 1 ) ; if ( ! VAR_121 ) return VAR_122 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 - VAR_127 -> VAR_128 ; METHOD_23 ( VAR_129 -> VAR_130 , VAR_131 ) ; VAR_132 = VAR_133 ; if ( METHOD_24 ( VAR_134 -> VAR_135 , "interlaced_coding" ) > 0.0 ) { METHOD_25 ( VAR_136 , VAR_137 -> VAR_138 , VAR_139 -> VAR_140 + VAR_141 -> VAR_142 ) ; VAR_143 -> VAR_144 ++ ; VAR_145 = METHOD_26 ( 1 ) ; if ( ! VAR_146 ) return VAR_147 ; VAR_148 -> VAR_149 = VAR_150 -> VAR_151 - VAR_152 -> VAR_153 + VAR_154 -> VAR_155 ; METHOD_27 ( VAR_156 -> VAR_157 , VAR_158 ) ; VAR_159 = VAR_160 ; } } do { TYPE_8 VAR_161 ; VAR_162 = METHOD_28 ( VAR_163 -> VAR_164 ) ; switch ( VAR_165 ) { case VAR_166 : VAR_167 = VAR_168 ; break ; case VAR_169 : break ; case VAR_170 : VAR_171 -> VAR_172 = 1 ; VAR_173 = VAR_174 ; break ; case VAR_175 : { VAR_176 * VAR_177 ; TYPE_9 VAR_178 ; TYPE_10 VAR_179 ; VAR_180 = METHOD_29 ( VAR_181 -> VAR_182 , & VAR_183 ) ; VAR_184 = METHOD_30 ( VAR_185 -> VAR_186 ) ; if ( ! VAR_187 ) return VAR_188 ; METHOD_31 ( VAR_189 -> VAR_190 , VAR_191 -> VAR_192 , VAR_193 -> VAR_194 ) ; METHOD_32 ( VAR_195 ) ; if ( 0 == VAR_196 -> VAR_197 [ 4 ] ) { VAR_198 -> VAR_199 |= VAR_200 ; if ( ! VAR_201 -> VAR_202 . VAR_203 ) { const TYPE_11 VAR_204 [ ] = { 'B' , 'B' , 'C' , 'D' , 0x10 , 0 , 0 , 0 , 13 , 0 , 0 , 0 , 0 } ; TYPE_12 VAR_205 = METHOD_33 ( VAR_206 -> VAR_207 + 5 ) ;  VAR_208 -> VAR_209 . VAR_210 = METHOD_34 ( VAR_211 + sizeof ( VAR_212 ) ) ;  if ( ! VAR_213 -> VAR_214 . VAR_215 ) return VAR_216 ; METHOD_35 ( VAR_217 -> VAR_218 . VAR_219 , VAR_220 -> VAR_221 , VAR_222 ) ; METHOD_36 ( ( TYPE_13 * ) VAR_223 -> VAR_224 . VAR_225 + VAR_226 , VAR_227 , sizeof ( VAR_228 ) ) ; METHOD_37 ( ( TYPE_14 * ) VAR_229 -> VAR_230 . VAR_231 + VAR_232 + sizeof ( VAR_233 ) - 4 , VAR_234 ) ; VAR_235 -> VAR_236 . VAR_237 = VAR_238 + sizeof ( VAR_239 ) ; } } if ( METHOD_38 ( & VAR_240 , VAR_241 ) ) { TYPE_15 * VAR_242 = METHOD_39 ( VAR_243 -> VAR_244 ) ; VAR_245 -> VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = METHOD_40 ( VAR_251 , VAR_252 ) ; METHOD_41 ( VAR_253 ) ; METHOD_42 ( & VAR_254 , VAR_255 ) ; } else { METHOD_43 ( & VAR_256 , VAR_257 ) ; } break ; } default : break ; } } while ( VAR_258 ) ; return VAR_259 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { register const struct STRUCT_OR_UNION_0 * VAR_3 ; register TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; const TYPE_6 * VAR_6 ; register const TYPE_7 * VAR_7 ; register TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; TYPE_10 VAR_10 = 0 ; TYPE_11 VAR_11 ; VAR_12 = ( const struct STRUCT_OR_UNION_1 * ) VAR_13 ; METHOD_1 ( * VAR_14 ) ; if ( VAR_15 < sizeof ( struct STRUCT_OR_UNION_2 ) ) { METHOD_2 ( ( VAR_16 , "truncated-ip6%u" , VAR_17 ) ) ; return ; } if ( ! VAR_18 -> VAR_19 ) METHOD_3 ( ( VAR_20 , "IP6" ) ) ; if ( METHOD_4 ( VAR_21 ) != 6 ) { METHOD_5 ( ( VAR_22 , "versionerror:%u!=6" , METHOD_6 ( VAR_23 ) ) ) ; return ; } VAR_24 = METHOD_7 ( & VAR_25 -> VAR_26 ) ; VAR_27 = VAR_28 + sizeof ( struct STRUCT_OR_UNION_3 ) ; if ( VAR_29 < VAR_30 ) METHOD_8 ( ( VAR_31 , "truncated-ip6-%ubytesmissing!" , VAR_32 - VAR_33 ) ) ; if ( VAR_34 -> VAR_35 ) { VAR_36 = METHOD_9 ( & VAR_37 -> VAR_38 ) ; METHOD_10 ( ( VAR_39 , "(" ) ) ; if 0 if ( VAR_40 & 0x0f000000 ) METHOD_11 ( ( VAR_41 , "pri0x%02x," , ( VAR_42 & 0x0f000000 ) >> 24 ) ) ; if ( VAR_43 & 0x00ffffff ) METHOD_12 ( ( VAR_44 , "flowlabel0x%06x," , VAR_45 & 0x00ffffff ) ) ; else if ( VAR_46 & 0x0ff00000 ) METHOD_13 ( ( VAR_47 , "class0x%02x," , ( VAR_48 & 0x0ff00000 ) >> 20 ) ) ; if ( VAR_49 & 0x000fffff ) METHOD_14 ( ( VAR_50 , "flowlabel0x%05x," , VAR_51 & 0x000fffff ) ) ; METHOD_15 ( ( VAR_52 , "hlim%u,next-header%s(%u)payloadlength:%u)" , VAR_53 -> VAR_54 , METHOD_16 ( VAR_55 , "unknown" , VAR_56 -> VAR_57 ) , VAR_58 -> VAR_59 , VAR_60 ) ) ; } VAR_61 = VAR_62 + VAR_63 ; if ( VAR_64 < VAR_65 -> VAR_66 ) VAR_67 -> VAR_68 = VAR_69 ; VAR_70 = ( const TYPE_12 * ) VAR_71 ; VAR_72 = sizeof ( struct STRUCT_OR_UNION_4 ) ; VAR_73 = VAR_74 -> VAR_75 ; while ( VAR_76 < VAR_77 -> VAR_78 && VAR_79 > 0 ) {  VAR_80 += VAR_81 ;  VAR_82 -= VAR_83 ; if ( VAR_84 == ( const TYPE_13 * ) ( VAR_85 + 1 ) && VAR_86 != VAR_87 && VAR_88 != VAR_89 && VAR_90 != VAR_91 && VAR_92 != VAR_93 ) { METHOD_17 ( ( VAR_94 , "%s>%s:" , METHOD_18 ( VAR_95 , & VAR_96 -> VAR_97 ) , METHOD_19 ( VAR_98 , & VAR_99 -> VAR_100 ) ) ) ; } switch ( VAR_101 ) { case VAR_102 : VAR_103 = METHOD_20 ( VAR_104 , VAR_105 ) ; if ( VAR_106 < 0 ) return ; VAR_107 = * VAR_108 ; break ; case VAR_109 : VAR_110 = METHOD_21 ( VAR_111 , VAR_112 ) ; if ( VAR_113 < 0 ) return ; VAR_114 = * VAR_115 ; break ; case VAR_116 : VAR_117 = METHOD_22 ( VAR_118 , VAR_119 , ( const TYPE_14 * ) VAR_120 ) ; if ( VAR_121 < 0 || VAR_122 -> VAR_123 <= VAR_124 + VAR_125 ) return ; VAR_126 = * VAR_127 ; VAR_128 = 1 ; break ; case VAR_129 : case VAR_130 : VAR_131 = METHOD_23 ( VAR_132 , VAR_133 , ( const TYPE_15 * ) VAR_134 ) ;  VAR_135 = * VAR_136 ;  return ; case VAR_137 :  VAR_138 = METHOD_24 ( VAR_139 , VAR_140 , ( const TYPE_16 * ) VAR_141 ) ;   VAR_142 = * VAR_143 ;  break ; case VAR_144 : METHOD_25 ( VAR_145 , VAR_146 , ( const TYPE_17 * ) VAR_147 , VAR_148 ) ; return ; case VAR_149 : METHOD_26 ( VAR_150 , VAR_151 , ( const TYPE_18 * ) VAR_152 , VAR_153 ) ; return ; case VAR_154 : METHOD_27 ( VAR_155 , VAR_156 , VAR_157 , ( const TYPE_19 * ) VAR_158 , VAR_159 ) ; return ; case VAR_160 : METHOD_28 ( VAR_161 , VAR_162 , VAR_163 , ( const TYPE_20 * ) VAR_164 , VAR_165 ) ; return ; case VAR_166 : METHOD_29 ( VAR_167 , VAR_168 , VAR_169 , ( const TYPE_21 * ) VAR_170 , VAR_171 ) ; return ; case VAR_172 :  VAR_173 = METHOD_30 ( VAR_174 , VAR_175 ) ;  VAR_176 = * VAR_177 ; break ; case VAR_178 : { TYPE_22 VAR_179 , VAR_180 ; VAR_181 = METHOD_31 ( VAR_182 , VAR_183 , VAR_184 , ( const TYPE_23 * ) VAR_185 , & VAR_186 , & VAR_187 ) ;  VAR_188 = VAR_189 & 0xff ;  VAR_190 -= VAR_191 ; break ; } case VAR_192 : { METHOD_32 ( VAR_193 , VAR_194 ) ; VAR_195 = - 1 ; break ; } case VAR_196 : METHOD_33 ( VAR_197 , VAR_198 , VAR_199 , ( const TYPE_24 * ) VAR_200 ) ; return ; case VAR_201 : METHOD_34 ( VAR_202 , VAR_203 , VAR_204 ) ; return ; case VAR_205 : METHOD_35 ( VAR_206 , VAR_207 , VAR_208 ) ; return ; case VAR_209 : METHOD_36 ( VAR_210 , VAR_211 , VAR_212 ) ; return ; case VAR_213 : METHOD_37 ( VAR_214 , VAR_215 , VAR_216 , ( const TYPE_25 * ) VAR_217 ) ; return ; case VAR_218 : METHOD_38 ( VAR_219 , VAR_220 , VAR_221 ) ; return ; case VAR_222 : METHOD_39 ( VAR_223 , VAR_224 , VAR_225 ) ; return ; case VAR_226 : METHOD_40 ( ( VAR_227 , "nonextheader" ) ) ; return ; default : METHOD_41 ( ( VAR_228 , "ip-proto-%d%d" , VAR_229 , VAR_230 ) ) ; return ; } } return ; VAR_231 : METHOD_42 ( ( VAR_232 , "[|ip6]" ) ) ; }
TYPE_0 * * METHOD_0 ( TYPE_1 VAR_0 , unsigned TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = 0 ; TYPE_4 VAR_3 , VAR_4 ; METHOD_1 ( VAR_5 > 4 ) ;  TYPE_5 VAR_6 = METHOD_2 ( VAR_7 + VAR_8 ) ;  TYPE_6 * * VAR_9 = METHOD_3 ( TYPE_7 * , ( VAR_10 + 1 ) ) ; VAR_11 += 4 ; if ( ! VAR_12 ) return VAR_13 ; for ( VAR_14 = 0 ; VAR_15 < VAR_16 ; VAR_17 ++ ) { TYPE_8 * VAR_18 = VAR_19 [ VAR_20 ] = METHOD_4 ( TYPE_9 , 1 ) ; TYPE_10 * VAR_21 = VAR_22 ; METHOD_5 ( VAR_23 , VAR_24 ) ; VAR_25 -> VAR_26 = METHOD_6 ( VAR_27 + VAR_28 ) ; VAR_29 += 2 ; METHOD_7 ( VAR_30 , VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_8 ( VAR_34 + VAR_35 ) ; VAR_36 += 2 ; if ( VAR_37 -> VAR_38 & VAR_39 ) { VAR_40 -> VAR_41 = METHOD_9 ( VAR_42 , 1 ) ; METHOD_10 ( VAR_43 -> VAR_44 , VAR_45 + VAR_46 , VAR_47 ) ; VAR_48 += sizeof ( VAR_49 ) ; METHOD_11 ( VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = METHOD_12 ( VAR_54 + VAR_55 ) ; VAR_56 += 4 ; if ( VAR_57 -> VAR_58 > 0 ) { TYPE_11 VAR_59 ; VAR_60 -> VAR_61 = METHOD_13 ( VAR_62 , VAR_63 -> VAR_64 ) ; for ( VAR_65 = 0 ; VAR_66 < VAR_67 -> VAR_68 ; VAR_69 ++ ) { TYPE_12 VAR_70 ; METHOD_14 ( VAR_71 , VAR_72 ) ; VAR_73 -> VAR_74 [ VAR_75 ] . VAR_76 = METHOD_15 ( VAR_77 + VAR_78 ) ; VAR_79 += 4 ; VAR_80 -> VAR_81 [ VAR_82 ] . VAR_83 = METHOD_16 ( unsigned TYPE_13 , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 ) ;  for ( VAR_88 = 0 ; VAR_89 < ( VAR_90 -> VAR_91 [ VAR_92 ] . VAR_93 >> 1 ) ; VAR_94 ++ )  VAR_95 -> VAR_96 [ VAR_97 ] . VAR_98 [ VAR_99 ] = ( VAR_100 + VAR_101 ) [ VAR_102 * 2 ] ; VAR_103 += METHOD_17 ( VAR_104 -> VAR_105 [ VAR_106 ] . VAR_107 ) ; } } else { METHOD_18 ( VAR_108 , VAR_109 ) ; VAR_110 -> VAR_111 = METHOD_19 ( VAR_112 + VAR_113 ) ; VAR_114 += 4 ; } } if ( VAR_115 -> VAR_116 & VAR_117 || VAR_118 -> VAR_119 == VAR_120 || VAR_121 -> VAR_122 == VAR_123 || VAR_124 -> VAR_125 == VAR_126 || VAR_127 -> VAR_128 == VAR_129 ) { METHOD_20 ( VAR_130 , VAR_131 ) ; VAR_132 -> VAR_133 = METHOD_21 ( VAR_134 + VAR_135 ) ; VAR_136 += 4 ; } else { VAR_137 -> VAR_138 = 1 ; } if ( VAR_139 -> VAR_140 & VAR_141 ) { VAR_142 -> VAR_143 -= VAR_144 ; } VAR_145 = METHOD_22 ( VAR_146 ) ; for ( VAR_147 = 0 ; VAR_148 < VAR_149 -> VAR_150 ; VAR_151 ++ ) { switch ( VAR_152 -> VAR_153 ) { case VAR_154 : VAR_155 -> VAR_156 = 2 ; METHOD_23 ( VAR_157 , VAR_158 ) ; VAR_159 -> VAR_160 . VAR_161 = METHOD_24 ( VAR_162 + VAR_163 ) ; VAR_164 += 4 ; break ; case VAR_165 : VAR_166 -> VAR_167 = 4 ; METHOD_25 ( VAR_168 , VAR_169 ) ; VAR_170 -> VAR_171 . VAR_172 = METHOD_26 ( VAR_173 + VAR_174 ) ; VAR_175 += 4 ; VAR_176 ++ ; break ; case VAR_177 : case VAR_178 : VAR_179 -> VAR_180 = 4 ; METHOD_27 ( VAR_181 , VAR_182 ) ; VAR_183 -> VAR_184 . VAR_185 = METHOD_28 ( VAR_186 + VAR_187 ) ; VAR_188 += VAR_189 -> VAR_190 ; break ; case VAR_191 : VAR_192 -> VAR_193 = 8 ; METHOD_29 ( VAR_194 , VAR_195 ) ; VAR_196 -> VAR_197 . VAR_198 [ 0 ] = METHOD_30 ( VAR_199 + VAR_200 ) ; METHOD_31 ( VAR_201 + 4 , VAR_202 ) ; VAR_203 -> VAR_204 . VAR_205 [ 1 ] = METHOD_32 ( VAR_206 + VAR_207 + 4 ) ; VAR_208 += 8 ; VAR_209 ++ ; break ; case VAR_210 : case VAR_211 : case VAR_212 : case VAR_213 : VAR_214 -> VAR_215 = 8 ; METHOD_33 ( VAR_216 , VAR_217 ) ; VAR_218 -> VAR_219 . VAR_220 [ 0 ] = METHOD_34 ( VAR_221 + VAR_222 ) ; METHOD_35 ( VAR_223 + 4 , VAR_224 ) ; VAR_225 -> VAR_226 . VAR_227 [ 1 ] = METHOD_36 ( VAR_228 + VAR_229 + 4 ) ; VAR_230 += VAR_231 -> VAR_232 ; break ; case VAR_233 : VAR_234 -> VAR_235 = sizeof ( VAR_236 ) ; METHOD_37 ( & VAR_237 -> VAR_238 . VAR_239 , VAR_240 + VAR_241 , VAR_242 ) ; VAR_243 += VAR_244 -> VAR_245 ; break ; case VAR_246 : case VAR_247 : case VAR_248 : case VAR_249 : METHOD_38 ( VAR_250 , VAR_251 ) ; VAR_252 -> VAR_253 = METHOD_39 ( VAR_254 + VAR_255 ) ; VAR_256 += 4 ;  if ( VAR_257 -> VAR_258 == VAR_259 )  {  VAR_260 -> VAR_261 . VAR_262 = ( unsigned TYPE_14 * ) METHOD_40 ( VAR_263 -> VAR_264 , VAR_265 + VAR_266 ) ;  } else { VAR_267 -> VAR_268 . VAR_269 = METHOD_41 ( unsigned TYPE_15 , VAR_270 -> VAR_271 ) ; METHOD_42 ( VAR_272 -> VAR_273 . VAR_274 , VAR_275 + VAR_276 , VAR_277 -> VAR_278 ) ; } VAR_279 += METHOD_43 ( VAR_280 -> VAR_281 ) ; VAR_282 ++ ; break ; case VAR_283 : case VAR_284 : case VAR_285 : METHOD_44 ( VAR_286 , "Invalidattribute,inputfilemaybecorrupted\\n" ) ; if ( ! VAR_287 ) METHOD_45 ( 1 ) ; return VAR_288 ; default : METHOD_46 ( VAR_289 , "Undefinedattribute,inputfilemaybecorrupted\\n" ) ; if ( ! VAR_290 ) METHOD_47 ( 1 ) ; return VAR_291 ; } if ( VAR_292 ) METHOD_48 ( VAR_293 [ VAR_294 ] ) ; } } VAR_295 [ VAR_296 ] = VAR_297 ; return VAR_298 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; TYPE_2 VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_7 = METHOD_2 ( STRUCT_OR_UNION_8 -> VAR_8 ) ; struct STRUCT_OR_UNION_9 * VAR_9 = & VAR_10 -> VAR_11 ; unsigned TYPE_3 VAR_12 ; unsigned TYPE_4 VAR_13 = 0 ; TYPE_5 VAR_14 = - VAR_15 ; VAR_16 : if ( VAR_17 -> VAR_18 >= VAR_19 -> VAR_20 [ VAR_21 -> VAR_22 ] . VAR_23 ) { METHOD_3 ( "block=%d,partition=%doutofrange\\n" , VAR_24 -> VAR_25 , VAR_26 -> VAR_27 ) ; return - VAR_28 ; } VAR_29 = METHOD_4 ( STRUCT_OR_UNION_10 -> VAR_30 , VAR_31 , 0 , & VAR_32 ) ; if ( ! VAR_33 ) { METHOD_5 ( STRUCT_OR_UNION_11 -> VAR_34 , "(ino%ld)failed!bh\\n" , STRUCT_OR_UNION_12 -> VAR_35 ) ; return - VAR_36 ; } if ( VAR_37 != VAR_38 && VAR_39 != VAR_40 && VAR_41 != VAR_42 ) { METHOD_6 ( STRUCT_OR_UNION_13 -> VAR_43 , "(ino%ld)failedident=%d\\n" , STRUCT_OR_UNION_14 -> VAR_44 , VAR_45 ) ; goto VAR_46 ; } VAR_47 = ( struct STRUCT_OR_UNION_15 * ) VAR_48 -> VAR_49 ; VAR_50 = ( struct STRUCT_OR_UNION_16 * ) VAR_51 -> VAR_52 ; if ( VAR_53 -> VAR_54 . VAR_55 == METHOD_7 ( 4096 ) ) { struct STRUCT_OR_UNION_17 * VAR_56 ; VAR_57 = METHOD_8 ( STRUCT_OR_UNION_18 -> VAR_58 , VAR_59 , 1 , & VAR_60 ) ; if ( VAR_61 == VAR_62 && VAR_63 ) { struct STRUCT_OR_UNION_19 VAR_64 ; struct STRUCT_OR_UNION_20 * VAR_65 ; VAR_66 = ( struct STRUCT_OR_UNION_21 * ) VAR_67 -> VAR_68 ; VAR_69 = METHOD_9 ( VAR_70 -> VAR_71 . VAR_72 ) ; if ( VAR_73 -> VAR_74 . VAR_75 ) { METHOD_10 ( VAR_76 ) ; METHOD_11 ( & VAR_77 -> VAR_78 , & VAR_79 , sizeof ( struct STRUCT_OR_UNION_22 ) ) ; if ( ++ VAR_80 > VAR_81 ) { METHOD_12 ( STRUCT_OR_UNION_23 -> VAR_82 , "toomanyICBsinICBhierarchy" "(max%dsupported)\\n" , VAR_83 ) ; goto VAR_84 ; } METHOD_13 ( VAR_85 ) ; goto VAR_86 ; } } METHOD_14 ( VAR_87 ) ; } else if ( VAR_88 -> VAR_89 . VAR_90 != METHOD_15 ( 4 ) ) { METHOD_16 ( STRUCT_OR_UNION_24 -> VAR_91 , "unsupportedstrategytype:%d\\n" , METHOD_17 ( VAR_92 -> VAR_93 . VAR_94 ) ) ; goto VAR_95 ; } if ( VAR_96 -> VAR_97 . VAR_98 == METHOD_18 ( 4 ) ) VAR_99 -> VAR_100 = 0 ; else VAR_101 -> VAR_102 = 1 ; VAR_103 -> VAR_104 = METHOD_19 ( VAR_105 -> VAR_106 . VAR_107 ) & VAR_108 ; VAR_109 -> VAR_110 = 0 ; VAR_111 -> VAR_112 = 0 ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 -> VAR_118 = 0 ; VAR_119 -> VAR_120 = 0 ; if ( VAR_121 -> VAR_122 . VAR_123 == METHOD_20 ( VAR_124 ) ) { VAR_125 -> VAR_126 = 1 ; VAR_127 -> VAR_128 = 0 ; VAR_129 = METHOD_21 ( STRUCT_OR_UNION_25 , STRUCT_OR_UNION_26 -> VAR_130 -> VAR_131 - sizeof ( struct STRUCT_OR_UNION_27 ) ) ; if ( VAR_132 ) goto VAR_133 ; METHOD_22 ( VAR_134 -> VAR_135 . VAR_136 , VAR_137 -> VAR_138 + sizeof ( struct STRUCT_OR_UNION_28 ) , STRUCT_OR_UNION_29 -> VAR_139 -> VAR_140 - sizeof ( struct STRUCT_OR_UNION_30 ) ) ; } else if ( VAR_141 -> VAR_142 . VAR_143 == METHOD_23 ( VAR_144 ) ) { VAR_145 -> VAR_146 = 0 ; VAR_147 -> VAR_148 = 0 ; VAR_149 = METHOD_24 ( STRUCT_OR_UNION_31 , STRUCT_OR_UNION_32 -> VAR_150 -> VAR_151 - sizeof ( struct STRUCT_OR_UNION_33 ) ) ; if ( VAR_152 ) goto VAR_153 ; METHOD_25 ( VAR_154 -> VAR_155 . VAR_156 , VAR_157 -> VAR_158 + sizeof ( struct STRUCT_OR_UNION_34 ) , STRUCT_OR_UNION_35 -> VAR_159 -> VAR_160 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; } else if ( VAR_161 -> VAR_162 . VAR_163 == METHOD_26 ( VAR_164 ) ) { VAR_165 -> VAR_166 = 0 ; VAR_167 -> VAR_168 = 1 ; VAR_169 -> VAR_170 = METHOD_27 ( ( ( struct STRUCT_OR_UNION_37 * ) VAR_171 -> VAR_172 ) -> VAR_173 ) ; VAR_174 = METHOD_28 ( STRUCT_OR_UNION_38 , STRUCT_OR_UNION_39 -> VAR_175 -> VAR_176 - sizeof ( struct STRUCT_OR_UNION_40 ) ) ; if ( VAR_177 ) goto VAR_178 ; METHOD_29 ( VAR_179 -> VAR_180 . VAR_181 , VAR_182 -> VAR_183 + sizeof ( struct STRUCT_OR_UNION_41 ) , STRUCT_OR_UNION_42 -> VAR_184 -> VAR_185 - sizeof ( struct STRUCT_OR_UNION_43 ) ) ; return 0 ; } VAR_186 = - VAR_187 ; METHOD_30 ( & VAR_188 -> VAR_189 ) ; METHOD_31 ( STRUCT_OR_UNION_44 , METHOD_32 ( VAR_190 -> VAR_191 ) ) ; if ( ! METHOD_33 ( STRUCT_OR_UNION_45 -> VAR_192 ) || METHOD_34 ( STRUCT_OR_UNION_46 -> VAR_193 , VAR_194 ) || METHOD_35 ( STRUCT_OR_UNION_47 -> VAR_195 , VAR_196 ) ) STRUCT_OR_UNION_48 -> VAR_197 = METHOD_36 ( STRUCT_OR_UNION_49 -> VAR_198 ) -> VAR_199 ; METHOD_37 ( STRUCT_OR_UNION_50 , METHOD_38 ( VAR_200 -> VAR_201 ) ) ; if ( ! METHOD_39 ( STRUCT_OR_UNION_51 -> VAR_202 ) || METHOD_40 ( STRUCT_OR_UNION_52 -> VAR_203 , VAR_204 ) || METHOD_41 ( STRUCT_OR_UNION_53 -> VAR_205 , VAR_206 ) ) STRUCT_OR_UNION_54 -> VAR_207 = METHOD_42 ( STRUCT_OR_UNION_55 -> VAR_208 ) -> VAR_209 ; if ( VAR_210 -> VAR_211 . VAR_212 != VAR_213 && VAR_214 -> VAR_215 != VAR_216 ) STRUCT_OR_UNION_56 -> VAR_217 = VAR_218 -> VAR_219 ; else if ( VAR_220 -> VAR_221 . VAR_222 == VAR_223 && VAR_224 -> VAR_225 != VAR_226 ) STRUCT_OR_UNION_57 -> VAR_227 = VAR_228 -> VAR_229 ; else STRUCT_OR_UNION_58 -> VAR_230 = METHOD_43 ( VAR_231 ) ; STRUCT_OR_UNION_59 -> VAR_232 &= ~ VAR_233 -> VAR_234 ; METHOD_44 ( & VAR_235 -> VAR_236 ) ; VAR_237 = METHOD_45 ( VAR_238 -> VAR_239 ) ; if ( ! VAR_240 ) { if ( ! VAR_241 ) { VAR_242 = - VAR_243 ; goto VAR_244 ; } VAR_245 = 1 ; } METHOD_46 ( STRUCT_OR_UNION_60 , VAR_246 ) ; STRUCT_OR_UNION_61 -> VAR_247 = METHOD_47 ( VAR_248 -> VAR_249 ) ; VAR_250 -> VAR_251 = STRUCT_OR_UNION_62 -> VAR_252 ; if ( VAR_253 -> VAR_254 == 0 ) { STRUCT_OR_UNION_63 -> VAR_255 = METHOD_48 ( VAR_256 -> VAR_257 ) << ( STRUCT_OR_UNION_64 -> VAR_258 -> VAR_259 - 9 ) ; if ( ! METHOD_49 ( & STRUCT_OR_UNION_65 -> VAR_260 , VAR_261 -> VAR_262 ) ) STRUCT_OR_UNION_66 -> VAR_263 = VAR_264 -> VAR_265 ; if ( ! METHOD_50 ( & STRUCT_OR_UNION_67 -> VAR_266 , VAR_267 -> VAR_268 ) ) STRUCT_OR_UNION_68 -> VAR_269 = VAR_270 -> VAR_271 ; if ( ! METHOD_51 ( & STRUCT_OR_UNION_69 -> VAR_272 , VAR_273 -> VAR_274 ) ) STRUCT_OR_UNION_70 -> VAR_275 = VAR_276 -> VAR_277 ; VAR_278 -> VAR_279 = METHOD_52 ( VAR_280 -> VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_53 ( VAR_284 -> VAR_285 ) ; VAR_286 -> VAR_287 = METHOD_54 ( VAR_288 -> VAR_289 ) ; VAR_290 -> VAR_291 = METHOD_55 ( VAR_292 -> VAR_293 ) ; } else { STRUCT_OR_UNION_71 -> VAR_294 = METHOD_56 ( VAR_295 -> VAR_296 ) << ( STRUCT_OR_UNION_72 -> VAR_297 -> VAR_298 - 9 ) ; if ( ! METHOD_57 ( & STRUCT_OR_UNION_73 -> VAR_299 , VAR_300 -> VAR_301 ) ) STRUCT_OR_UNION_74 -> VAR_302 = VAR_303 -> VAR_304 ; if ( ! METHOD_58 ( & STRUCT_OR_UNION_75 -> VAR_305 , VAR_306 -> VAR_307 ) ) STRUCT_OR_UNION_76 -> VAR_308 = VAR_309 -> VAR_310 ; if ( ! METHOD_59 ( & VAR_311 -> VAR_312 , VAR_313 -> VAR_314 ) ) VAR_315 -> VAR_316 = VAR_317 -> VAR_318 ; if ( ! METHOD_60 ( & STRUCT_OR_UNION_77 -> VAR_319 , VAR_320 -> VAR_321 ) ) STRUCT_OR_UNION_78 -> VAR_322 = VAR_323 -> VAR_324 ; VAR_325 -> VAR_326 = METHOD_61 ( VAR_327 -> VAR_328 ) ; VAR_329 -> VAR_330 = METHOD_62 ( VAR_331 -> VAR_332 ) ; VAR_333 -> VAR_334 = METHOD_63 ( VAR_335 -> VAR_336 ) ; VAR_337 -> VAR_338 = METHOD_64 ( VAR_339 -> VAR_340 ) ; } STRUCT_OR_UNION_79 -> VAR_341 = VAR_342 -> VAR_343 ;  switch ( VAR_344 -> VAR_345 . VAR_346 ) {  case VAR_347 : STRUCT_OR_UNION_80 -> VAR_348 = & VAR_349 ; STRUCT_OR_UNION_81 -> VAR_350 = & VAR_351 ; STRUCT_OR_UNION_82 -> VAR_352 |= VAR_353 ; METHOD_65 ( STRUCT_OR_UNION_83 ) ; break ; case VAR_354 : case VAR_355 : case VAR_356 : case VAR_357 : if ( VAR_358 -> VAR_359 == VAR_360 ) STRUCT_OR_UNION_84 -> VAR_361 . VAR_362 = & VAR_363 ; else STRUCT_OR_UNION_85 -> VAR_364 . VAR_365 = & VAR_366 ; STRUCT_OR_UNION_86 -> VAR_367 = & VAR_368 ; STRUCT_OR_UNION_87 -> VAR_369 = & VAR_370 ; STRUCT_OR_UNION_88 -> VAR_371 |= VAR_372 ; break ; case VAR_373 : STRUCT_OR_UNION_89 -> VAR_374 |= VAR_375 ; break ; case VAR_376 : STRUCT_OR_UNION_90 -> VAR_377 |= VAR_378 ; break ; case VAR_379 : METHOD_66 ( STRUCT_OR_UNION_91 , STRUCT_OR_UNION_92 -> VAR_380 | VAR_381 , 0 ) ; break ; case VAR_382 : METHOD_67 ( STRUCT_OR_UNION_93 , STRUCT_OR_UNION_94 -> VAR_383 | VAR_384 , 0 ) ; break ; case VAR_385 : STRUCT_OR_UNION_95 -> VAR_386 . VAR_387 = & VAR_388 ; STRUCT_OR_UNION_96 -> VAR_389 = & VAR_390 ; STRUCT_OR_UNION_97 -> VAR_391 = VAR_392 | VAR_393 ; break ; case VAR_394 : METHOD_68 ( "METADATAFILE-----\\n" ) ; break ; case VAR_395 : METHOD_69 ( "METADATAMIRRORFILE-----\\n" ) ; break ; case VAR_396 : METHOD_70 ( "METADATABITMAPFILE-----\\n" ) ; break ; default : METHOD_71 ( STRUCT_OR_UNION_98 -> VAR_397 , "(ino%ld)failedunknownfiletype=%d\\n" , STRUCT_OR_UNION_99 -> VAR_398 , VAR_399 -> VAR_400 . VAR_401 ) ; goto VAR_402 ; } if ( METHOD_72 ( STRUCT_OR_UNION_100 -> VAR_403 ) || METHOD_73 ( STRUCT_OR_UNION_101 -> VAR_404 ) ) { struct STRUCT_OR_UNION_102 * VAR_405 = ( struct STRUCT_OR_UNION_103 * ) METHOD_74 ( STRUCT_OR_UNION_104 , 12 , 1 ) ; if ( VAR_406 ) { METHOD_75 ( STRUCT_OR_UNION_105 , STRUCT_OR_UNION_106 -> VAR_407 , METHOD_76 ( METHOD_77 ( VAR_408 -> VAR_409 ) , METHOD_78 ( VAR_410 -> VAR_411 ) ) ) ; } else goto VAR_412 ; } VAR_413 = 0 ; VAR_414 : METHOD_79 ( VAR_415 ) ; return VAR_416 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_2 VAR_8 ; struct STRUCT_OR_UNION_3 VAR_9 ; unsigned TYPE_3 VAR_10 ; TYPE_4 VAR_11 ; unsigned TYPE_5 VAR_12 , VAR_13 , VAR_14 ; const TYPE_6 TYPE_7 * VAR_15 = ( TYPE_8 TYPE_9 * ) VAR_16 ; VAR_17 = - VAR_18 ; if ( METHOD_1 ( & VAR_19 , VAR_20 , sizeof ( VAR_21 ) ) ) goto VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 , VAR_25 . VAR_26 , VAR_27 . VAR_28 ) ; if ( VAR_29 ) goto VAR_30 ; VAR_31 = VAR_32 . VAR_33 ; VAR_34 = VAR_35 + VAR_36 . VAR_37 ; VAR_38 = - VAR_39 ; if ( ! METHOD_3 ( VAR_40 ) ) goto VAR_41 ; METHOD_4 ( & VAR_42 -> VAR_43 ) ;  VAR_44 = METHOD_5 ( VAR_45 , VAR_46 , & VAR_47 ) ;  if ( ! VAR_48 ) goto VAR_49 ; VAR_50 = - VAR_51 ; if ( VAR_52 -> VAR_53 >= VAR_54 ) goto VAR_55 ; if ( METHOD_6 ( VAR_56 ) ) { unsigned TYPE_10 VAR_57 = METHOD_7 ( VAR_58 ) ; if ( VAR_59 & ( VAR_60 - 1 ) ) goto VAR_61 ; } VAR_62 = VAR_63 ; VAR_64 = - VAR_65 ; for ( VAR_66 = VAR_67 ; VAR_68 && VAR_69 -> VAR_70 < VAR_71 ; VAR_72 = VAR_73 -> VAR_74 ) { METHOD_8 ( ) ; METHOD_9 ( ! ! VAR_75 -> VAR_76 . VAR_77 ^ ! ! ( VAR_78 -> VAR_79 & ( VAR_80 | VAR_81 ) ) ) ; if ( ! METHOD_10 ( VAR_82 ) ) goto VAR_83 ; VAR_84 = VAR_85 ; } METHOD_11 ( ! VAR_86 ) ; if ( VAR_87 -> VAR_88 < VAR_89 ) VAR_90 = VAR_91 ; VAR_92 = 0 ; do { METHOD_12 ( ) ; METHOD_13 ( ! METHOD_14 ( VAR_93 ) ) ; if ( ! VAR_94 -> VAR_95 . VAR_96 ) goto VAR_97 ; METHOD_15 ( ! ( VAR_98 -> VAR_99 & VAR_100 ) ) ; if ( VAR_101 -> VAR_102 > VAR_103 ) VAR_104 = VAR_105 -> VAR_106 ; VAR_107 = METHOD_16 ( VAR_108 , VAR_109 -> VAR_110 ) ; if ( METHOD_17 ( VAR_111 ) ) { struct STRUCT_OR_UNION_4 VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; VAR_116 . VAR_117 = VAR_118 - VAR_119 ; METHOD_18 ( VAR_120 -> VAR_121 . VAR_122 , & VAR_123 ) ; } VAR_124 = VAR_125 -> VAR_126 & ~ ( VAR_127 | VAR_128 ) ; VAR_129 = METHOD_19 ( VAR_130 , VAR_131 , VAR_132 , VAR_133 , VAR_134 , VAR_135 -> VAR_136 , VAR_137 -> VAR_138 , VAR_139 -> VAR_140 , METHOD_20 ( VAR_141 ) , VAR_142 ) ; if ( VAR_143 ) { VAR_144 = VAR_145 ; goto VAR_146 ; } if ( VAR_147 -> VAR_148 < VAR_149 ) { VAR_150 = METHOD_21 ( VAR_151 , VAR_152 , VAR_153 , 1 ) ; if ( VAR_154 ) break ; } if ( VAR_155 -> VAR_156 > VAR_157 ) { VAR_158 = METHOD_22 ( VAR_159 , VAR_160 , VAR_161 , 0 ) ; if ( VAR_162 ) break ; } VAR_163 : VAR_164 -> VAR_165 = VAR_166 ; VAR_167 -> VAR_168 = VAR_169 ; VAR_170 : VAR_171 = VAR_172 ; VAR_173 = VAR_174 -> VAR_175 ; VAR_176 = VAR_177 -> VAR_178 ; } while ( VAR_179 && VAR_180 -> VAR_181 < VAR_182 ) ; VAR_183 : METHOD_23 ( & VAR_184 -> VAR_185 ) ; METHOD_24 ( VAR_186 ) ; VAR_187 : return VAR_188 ; }
static unsigned TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned TYPE_3 VAR_2 ; unsigned TYPE_4 VAR_3 ;  VAR_4 = METHOD_1 ( VAR_5 -> VAR_6 . VAR_7 ,  VAR_8 -> VAR_9 . VAR_10 , VAR_11 , 0 , & VAR_12 ) ; VAR_13 = VAR_14 << 4 ; if ( VAR_15 < 8 << 12 ) VAR_16 = VAR_17 < 5 << 12 ? VAR_18 : 5 << 12 ; return VAR_19 ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , "%i" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; * ( METHOD_5 ( VAR_9 ) - 1 ) = '' ; METHOD_6 ( ) ;  METHOD_7 ( VAR_10 , VAR_11 ) ;  METHOD_8 ( VAR_12 , VAR_13 ) ; VAR_14 = METHOD_9 ( VAR_15 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ;  if ( VAR_5 ) {  VAR_6 * VAR_7 ;  METHOD_1 ( VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , & VAR_12 ) ;  METHOD_2 ( & VAR_13 -> VAR_14 , VAR_15 , VAR_16 ) ; return VAR_17 ; } else { return VAR_18 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * TYPE_1 ) { struct STRUCT_OR_UNION_1 * VAR_0 = TYPE_2 -> VAR_1 ; struct STRUCT_OR_UNION_2 VAR_2 , VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 , VAR_6 ; TYPE_5 VAR_7 = 0 ; if ( TYPE_6 -> VAR_8 == VAR_9 || TYPE_7 -> VAR_10 == VAR_11 ) return METHOD_1 ( TYPE_8 ) ;  VAR_12 -> METHOD_2 ( TYPE_9 , VAR_13 , & VAR_14 ) ;   METHOD_3 ( TYPE_10 , & VAR_15 , & VAR_16 ) ;  VAR_17 -> METHOD_4 ( TYPE_11 , VAR_18 , & VAR_19 ) ; VAR_20 >>= 32 ; VAR_21 = ( TYPE_12 ) ( VAR_22 & 0xfffc ) ; VAR_23 = ( TYPE_13 ) ( VAR_24 + 8 ) ; if ( VAR_25 & VAR_26 ) { VAR_27 . VAR_28 = 0 ; VAR_29 . VAR_30 = 1 ; } VAR_31 -> METHOD_5 ( TYPE_14 , VAR_32 , & VAR_33 , 0 , VAR_34 ) ; VAR_35 -> METHOD_6 ( TYPE_15 , VAR_36 , & VAR_37 , 0 , VAR_38 ) ; TYPE_16 -> VAR_39 [ VAR_40 ] = TYPE_17 -> VAR_41 ; if ( VAR_42 & VAR_43 ) { TYPE_18 TYPE_19 TYPE_20 -> VAR_44 [ VAR_45 ] = TYPE_21 -> VAR_46 & ~ VAR_47 ; VAR_48 -> METHOD_7 ( TYPE_22 , TYPE_23 -> VAR_49 == VAR_50 ? VAR_51 : VAR_52 , & VAR_53 ) ; TYPE_24 -> VAR_54 = VAR_55 ; VAR_56 -> METHOD_8 ( TYPE_25 , VAR_57 , & VAR_58 ) ; TYPE_26 -> VAR_59 &= ~ ( VAR_60 | VAR_61 ) ; } else { VAR_62 -> METHOD_9 ( TYPE_27 , VAR_63 , & VAR_64 ) ; TYPE_28 -> VAR_65 = ( TYPE_29 ) VAR_66 ; TYPE_30 -> VAR_67 &= ~ ( VAR_68 | VAR_69 | VAR_70 ) ; } return VAR_71 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_6 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; if ( VAR_18 -> VAR_19 < 4 ) { return VAR_20 ; } for ( VAR_21 = 0 ; VAR_22 + 1 < VAR_23 -> VAR_24 && VAR_25 -> VAR_26 [ VAR_27 ] != 0xff ; VAR_28 ++ ) ; if ( VAR_29 > 0 ) { METHOD_1 ( VAR_30 -> VAR_31 , VAR_32 , "Discarding%dbytesat" "beginningofimage.\\n" , VAR_33 ) ; } for ( ++ VAR_34 ; VAR_35 + 1 < VAR_36 -> VAR_37 && VAR_38 -> VAR_39 [ VAR_40 ] == 0xff ; VAR_41 ++ ) ; if ( VAR_42 + 1 >= VAR_43 -> VAR_44 && VAR_45 -> VAR_46 [ VAR_47 ] ) { METHOD_2 ( VAR_48 -> VAR_49 , VAR_50 , "InvalidJPEGimage:" "noSOImarkerfound.\\n" ) ; return VAR_51 ; } VAR_52 = VAR_53 -> VAR_54 [ VAR_55 ] ; if ( VAR_56 != VAR_57 ) { METHOD_3 ( VAR_58 -> VAR_59 , VAR_60 , "InvalidJPEGimage:first" "markeris%02x,shouldbeSOI.\\n" , VAR_61 ) ; return VAR_62 ; } for ( ++ VAR_63 ; VAR_64 + 1 < VAR_65 -> VAR_66 && VAR_67 -> VAR_68 [ VAR_69 ] == 0xff ; VAR_70 ++ ) ; if ( VAR_71 + 1 >= VAR_72 -> VAR_73 ) { METHOD_4 ( VAR_74 -> VAR_75 , VAR_76 , "InvalidJPEGimage:" "noimagecontentfound.\\n" ) ; return VAR_77 ; } VAR_78 = VAR_79 -> VAR_80 [ VAR_81 ] ; VAR_82 = VAR_83 + 1 ; for ( VAR_84 = 0 ; ; VAR_85 ++ ) { if ( VAR_86 == VAR_87 ) { break ; } else if ( VAR_88 == VAR_89 ) { for ( VAR_90 = VAR_91 ; VAR_92 + 1 < VAR_93 -> VAR_94 ; VAR_95 ++ ) { if ( VAR_96 -> VAR_97 [ VAR_98 ] != 0xff ) continue ; VAR_99 = VAR_100 ; for ( ++ VAR_101 ; VAR_102 + 1 < VAR_103 -> VAR_104 && VAR_105 -> VAR_106 [ VAR_107 ] == 0xff ; VAR_108 ++ ) ; if ( VAR_109 + 1 >= VAR_110 -> VAR_111 ) { VAR_112 = - 1 ; } else { if ( VAR_113 -> VAR_114 [ VAR_115 ] == 0x00 ) continue ; VAR_116 = VAR_117 -> VAR_118 [ VAR_119 ] ; VAR_120 = VAR_121 + 1 ; } break ; } } else { VAR_122 = VAR_123 ; if ( VAR_124 + 2 > VAR_125 -> VAR_126 ) { METHOD_5 ( VAR_127 -> VAR_128 , VAR_129 , "InvalidJPEGimage:" "truncatedat%02xmarker.\\n" , VAR_130 ) ; return VAR_131 ; } VAR_132 = METHOD_6 ( VAR_133 -> VAR_134 + VAR_135 ) ; if ( VAR_136 + VAR_137 > VAR_138 -> VAR_139 ) { METHOD_7 ( VAR_140 -> VAR_141 , VAR_142 , "InvalidJPEGimage:" "truncatedat%02xmarkersegment.\\n" , VAR_143 ) ; return VAR_144 ; } VAR_145 = VAR_146 + VAR_147 ; VAR_148 = VAR_149 ; if ( VAR_150 -> VAR_151 [ VAR_152 ] != 0xff ) { VAR_153 = - 1 ; } else { for ( ++ VAR_154 ; VAR_155 + 1 < VAR_156 -> VAR_157 && VAR_158 -> VAR_159 [ VAR_160 ] == 0xff ; VAR_161 ++ ) ; if ( VAR_162 + 1 >= VAR_163 -> VAR_164 ) { VAR_165 = - 1 ; } else { VAR_166 = VAR_167 -> VAR_168 [ VAR_169 ] ; VAR_170 = VAR_171 + 1 ; } } } if ( VAR_172 == VAR_173 ) { VAR_174 = METHOD_8 ( VAR_175 -> VAR_176 + VAR_177 ) ;  VAR_178 = VAR_179 ;  VAR_180 = METHOD_9 ( VAR_181 - VAR_182 + VAR_183 ) ; if ( ! VAR_184 ) return METHOD_10 ( VAR_185 ) ; METHOD_11 ( VAR_186 , VAR_187 -> VAR_188 + VAR_189 , VAR_190 ) ; for ( VAR_191 = VAR_192 + VAR_193 , VAR_194 = VAR_195 ; VAR_196 < VAR_197 ; VAR_198 ++ , VAR_199 ++ ) { if ( VAR_200 -> VAR_201 [ VAR_202 ] == 0xff ) { while ( VAR_203 -> VAR_204 [ VAR_205 ] == 0xff ) ++ VAR_206 ; VAR_207 [ VAR_208 ] = 0xff ; } else { VAR_209 [ VAR_210 ] = VAR_211 -> VAR_212 [ VAR_213 ] ; } } VAR_214 = VAR_215 ; METHOD_12 ( VAR_216 + VAR_217 , 0 , VAR_218 ) ; } else { VAR_219 = VAR_220 -> VAR_221 + VAR_222 ; VAR_223 = VAR_224 - VAR_225 ; VAR_226 = VAR_227 -> VAR_228 ; } VAR_229 = METHOD_13 ( VAR_230 , VAR_231 , VAR_232 , VAR_233 , VAR_234 , VAR_235 , VAR_236 ) ; if ( VAR_237 < 0 ) return VAR_238 ; if ( VAR_239 == - 1 ) break ; VAR_240 = VAR_241 ; VAR_242 = VAR_243 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { METHOD_1 ( VAR_2 , VAR_3 ) ;  if ( METHOD_2 ( VAR_4 ) == 1 ) {  TYPE_2 VAR_5 = METHOD_3 ( VAR_6 , METHOD_4 ( VAR_7 , 0 ) ) ; if ( ! VAR_8 ) return VAR_9 ; return METHOD_5 ( VAR_10 , METHOD_6 ( VAR_11 ) , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ) ; } else if ( METHOD_7 ( METHOD_8 ( VAR_20 , 1 ) ) == VAR_21 ) { TYPE_3 VAR_22 , VAR_23 ; TYPE_4 VAR_24 ; TYPE_5 * VAR_25 = METHOD_9 ( VAR_26 , 0 ) ; VAR_27 = METHOD_10 ( VAR_28 , VAR_29 ) ; if ( ! VAR_30 ) return VAR_31 ; if ( ! METHOD_11 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ) return VAR_36 ; switch ( VAR_37 -> VAR_38 ) { case VAR_39 : case VAR_40 : case VAR_41 : break ; default : METHOD_12 ( VAR_42 , VAR_43 , "illegalexpressionforaugmentedassignment" ) ; return VAR_44 ; } VAR_45 = METHOD_13 ( VAR_46 , 2 ) ; if ( METHOD_14 ( VAR_47 ) == VAR_48 ) VAR_49 = METHOD_15 ( VAR_50 , VAR_51 ) ; else VAR_52 = METHOD_16 ( VAR_53 , VAR_54 ) ; if ( ! VAR_55 ) return VAR_56 ; VAR_57 = METHOD_17 ( VAR_58 , METHOD_18 ( VAR_59 , 1 ) ) ; if ( ! VAR_60 ) return VAR_61 ; return METHOD_19 ( VAR_62 , VAR_63 , VAR_64 , METHOD_20 ( VAR_65 ) , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 -> VAR_73 ) ; } else if ( METHOD_21 ( METHOD_22 ( VAR_74 , 1 ) ) == VAR_75 ) { TYPE_6 VAR_76 , VAR_77 , VAR_78 ; TYPE_7 * VAR_79 = METHOD_23 ( VAR_80 , 0 ) ; TYPE_8 * VAR_81 , * VAR_82 = METHOD_24 ( VAR_83 , 1 ) ; TYPE_9 VAR_84 = 1 ; VAR_85 = VAR_86 ; while ( METHOD_25 ( VAR_87 ) == 1 ) { VAR_88 = METHOD_26 ( VAR_89 , 0 ) ; } if ( METHOD_27 ( VAR_90 ) > 0 && METHOD_28 ( METHOD_29 ( VAR_91 , 0 ) ) == VAR_92 ) { VAR_93 = 0 ; } VAR_94 = METHOD_30 ( VAR_95 , VAR_96 ) ; if ( ! VAR_97 ) { return VAR_98 ; } switch ( VAR_99 -> VAR_100 ) { case VAR_101 : if ( METHOD_31 ( VAR_102 , VAR_103 -> VAR_104 . VAR_105 . VAR_106 , VAR_107 , 0 ) ) { return VAR_108 ; } VAR_109 -> VAR_110 . VAR_111 . VAR_112 = VAR_113 ; break ; case VAR_114 : if ( METHOD_32 ( VAR_115 , VAR_116 -> VAR_117 . VAR_118 . VAR_119 , VAR_120 , 1 ) ) { return VAR_121 ; } VAR_122 -> VAR_123 . VAR_124 . VAR_125 = VAR_126 ; break ; case VAR_127 : VAR_128 -> VAR_129 . VAR_130 . VAR_131 = VAR_132 ; break ; case VAR_133 : METHOD_33 ( VAR_134 , VAR_135 , "onlysingletarget(notlist)canbeannotated" ) ; return VAR_136 ; case VAR_137 : METHOD_34 ( VAR_138 , VAR_139 , "onlysingletarget(nottuple)canbeannotated" ) ; return VAR_140 ; default : METHOD_35 ( VAR_141 , VAR_142 , "illegaltargetforannotation" ) ; return VAR_143 ; } if ( VAR_144 -> VAR_145 != VAR_146 ) { VAR_147 = 0 ; } VAR_148 = METHOD_36 ( VAR_149 , 1 ) ; VAR_150 = METHOD_37 ( VAR_151 , VAR_152 ) ; if ( ! VAR_153 ) { return VAR_154 ; } if ( METHOD_38 ( VAR_155 ) == 2 ) { return METHOD_39 ( VAR_156 , VAR_157 , VAR_158 , VAR_159 , METHOD_40 ( VAR_160 ) , VAR_161 -> VAR_162 , VAR_163 -> VAR_164 , VAR_165 -> VAR_166 , VAR_167 -> VAR_168 ) ; } else { VAR_169 = METHOD_41 ( VAR_170 , 3 ) ; if ( METHOD_42 ( VAR_171 ) == VAR_172 ) { VAR_173 = METHOD_43 ( VAR_174 , VAR_175 ) ; } else { VAR_176 = METHOD_44 ( VAR_177 , VAR_178 ) ; } if ( ! VAR_179 ) { return VAR_180 ; } return METHOD_45 ( VAR_181 , VAR_182 , VAR_183 , VAR_184 , METHOD_46 ( VAR_185 ) , VAR_186 -> VAR_187 , VAR_188 -> VAR_189 , VAR_190 -> VAR_191 , VAR_192 -> VAR_193 ) ; } } else {  TYPE_10 VAR_194 ;  VAR_195 * VAR_196 ; TYPE_11 * VAR_197 ; TYPE_12 VAR_198 ;  METHOD_47 ( METHOD_48 ( VAR_199 , 1 ) , VAR_200 ) ;   VAR_201 = METHOD_49 ( METHOD_50 ( VAR_202 ) / 2 , VAR_203 -> VAR_204 ) ;  if ( ! VAR_205 ) return VAR_206 ;  for ( VAR_207 = 0 ; VAR_208 < METHOD_51 ( VAR_209 ) - 2 ; VAR_210 += 2 ) {  TYPE_13 VAR_211 ; TYPE_14 * VAR_212 = METHOD_52 ( VAR_213 , VAR_214 ) ; if ( METHOD_53 ( VAR_215 ) == VAR_216 ) { METHOD_54 ( VAR_217 , VAR_218 , "assignmenttoyieldexpressionnotpossible" ) ; return VAR_219 ; } VAR_220 = METHOD_55 ( VAR_221 , VAR_222 ) ; if ( ! VAR_223 ) return VAR_224 ; if ( ! METHOD_56 ( VAR_225 , VAR_226 , VAR_227 , METHOD_57 ( VAR_228 , VAR_229 ) ) ) return VAR_230 ; METHOD_58 ( VAR_231 , VAR_232 / 2 , VAR_233 ) ; }  VAR_234 = METHOD_59 ( VAR_235 , METHOD_60 ( VAR_236 ) - 1 ) ;  if ( METHOD_61 ( VAR_237 ) == VAR_238 ) VAR_239 = METHOD_62 ( VAR_240 , VAR_241 ) ; else VAR_242 = METHOD_63 ( VAR_243 , VAR_244 ) ; if ( ! VAR_245 ) return VAR_246 ;  return METHOD_64 ( VAR_247 , VAR_248 , METHOD_65 ( VAR_249 ) , VAR_250 -> VAR_251 ,  VAR_252 -> VAR_253 , VAR_254 -> VAR_255 , VAR_256 -> VAR_257 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 * VAR_1 , TYPE_3 * TYPE_4 , unsigned TYPE_5 VAR_2 , TYPE_6 VAR_3 , TYPE_7 VAR_4 ) { unsigned TYPE_8 * VAR_5 = TYPE_9 -> VAR_6 ; TYPE_10 VAR_7 = 16 ;  unsigned TYPE_11 * VAR_8 = VAR_9 -> VAR_10 + VAR_11 ;  TYPE_12 VAR_12 = VAR_13 -> VAR_14 ;  unsigned TYPE_13 * VAR_15 = VAR_16 -> VAR_17 + VAR_18 ;  TYPE_14 VAR_19 = VAR_20 -> VAR_21 ;  TYPE_15 VAR_22 , VAR_23 , VAR_24 ;  TYPE_16 VAR_25 = 0 ;  TYPE_17 VAR_26 [ 3 ] = { 3 , 4 , 6 } ;  if ( VAR_27 <= VAR_28 ) {  for ( VAR_29 = 0 ; VAR_30 < 3 ; VAR_31 ++ )  VAR_32 [ VAR_33 ] += 1 ; } for ( VAR_34 = 0 ; VAR_35 < 16 ; ++ VAR_36 ) { for ( VAR_37 = 0 ; VAR_38 < 16 ; ++ VAR_39 ) { TYPE_18 VAR_40 = 0 ; TYPE_19 VAR_41 = 0 ; TYPE_20 VAR_42 = 0 ; VAR_43 = VAR_44 [ VAR_45 ] - VAR_46 [ VAR_47 ] ; VAR_48 = METHOD_1 ( VAR_49 ) ;  if ( VAR_50 <= 3 )  { VAR_51 [ VAR_52 ] = VAR_53 [ VAR_54 ] ;  VAR_55 += VAR_56 ;  } else {  if ( VAR_57 >= 4 && VAR_58 <= 7 )  VAR_59 = VAR_60 [ 0 ] ; else if ( VAR_61 >= 8 && VAR_62 <= 15 ) VAR_63 = VAR_64 [ 1 ] ; else VAR_65 = VAR_66 [ 2 ] ; if ( VAR_67 > 0 ) { if ( ( VAR_68 [ VAR_69 ] + VAR_70 ) > 255 ) VAR_71 [ VAR_72 ] = 255 ; else VAR_73 [ VAR_74 ] = VAR_75 [ VAR_76 ] + VAR_77 ;  VAR_78 += VAR_79 ;  } else { if ( ( VAR_80 [ VAR_81 ] - VAR_82 ) < 0 ) VAR_83 [ VAR_84 ] = 0 ; else  VAR_85 [ VAR_86 ] = VAR_87 [ VAR_88 ] - VAR_89 ;  VAR_90 -= VAR_91 ; } } } VAR_92 += VAR_93 ; VAR_94 += VAR_95 ; VAR_96 += VAR_97 ; }  if ( METHOD_2 ( VAR_98 ) > VAR_99 )  return VAR_100 ;  METHOD_3 ( VAR_101 -> VAR_102 + VAR_103 , VAR_104 ,   TYPE_21 -> VAR_105 , VAR_106 ) ;  return VAR_107 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_2 ( VAR_5 ) ; TYPE_3 * VAR_6 = VAR_7 ;  TYPE_4 VAR_8 = 0 ;  if VAR_9 METHOD_3 ( VAR_10 ) ; METHOD_4 ( VAR_11 ) ; VAR_12 |= METHOD_5 ( & VAR_13 -> VAR_14 , & VAR_15 -> VAR_16 , sizeof ( VAR_17 ) ) ; VAR_18 |= METHOD_6 ( & VAR_19 -> VAR_20 , & VAR_21 -> VAR_22 , sizeof ( VAR_23 -> VAR_24 ) ) ; VAR_25 |= METHOD_7 ( & VAR_26 -> VAR_27 , & VAR_28 -> VAR_29 , sizeof ( VAR_30 -> VAR_31 ) ) ; return VAR_32 ? - VAR_33 : 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; if ( ( VAR_6 & VAR_7 ) == 0 ) { if ( VAR_8 -> VAR_9 == VAR_10 ) { VAR_11 -> VAR_12 = VAR_13 ; METHOD_1 ( & VAR_14 -> VAR_15 ) ; METHOD_2 ( & VAR_16 ) ; METHOD_3 ( & VAR_17 -> VAR_18 , VAR_19 -> VAR_20 ) ; METHOD_4 ( & VAR_21 ) ; } } if ( VAR_22 -> VAR_23 != VAR_24 ) { VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 = METHOD_5 ( VAR_30 -> VAR_31 , VAR_32 -> VAR_33 , VAR_34 -> VAR_35 , VAR_36 -> VAR_37 ) ;  VAR_38 -> VAR_39 = VAR_40 -> VAR_41 ;  VAR_42 -> VAR_43 = VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 = VAR_48 -> VAR_49 ; VAR_50 -> VAR_51 = VAR_52 -> VAR_53 . VAR_54 ; if ( VAR_55 == VAR_56 ) VAR_57 -> VAR_58 = VAR_59 -> VAR_60 . VAR_61 ; VAR_62 -> VAR_63 = VAR_64 -> VAR_65 . VAR_66 ; if ( VAR_67 == VAR_68 ) VAR_69 -> VAR_70 = VAR_71 -> VAR_72 . VAR_73 ; if ( VAR_74 == VAR_75 ) VAR_76 -> VAR_77 = VAR_78 -> VAR_79 . VAR_80 ; if ( ( VAR_81 & VAR_82 ) == 0 ) { VAR_83 -> VAR_84 = VAR_85 -> VAR_86 ; METHOD_6 ( VAR_87 -> VAR_88 ) ; } METHOD_7 ( VAR_89 ) ; VAR_90 = VAR_91 ; } else { VAR_92 -> VAR_93 = 0 ; VAR_94 = VAR_95 ; } return VAR_96 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 ;  if ( VAR_2 -> VAR_3 == VAR_4 )  VAR_5 = VAR_6 -> VAR_7 ;  else  VAR_8 = VAR_9 -> VAR_10 ;  METHOD_1 ( "Callingconfigfs_undepend_itemfor" "remote_dev:%premote_dev->dev_group:%p\\n" , VAR_11 , & VAR_12 -> VAR_13 . VAR_14 ) ; METHOD_2 ( & VAR_15 -> VAR_16 . VAR_17 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 VAR_0 ; TYPE_2 VAR_1 ; TYPE_3 METHOD_1 ; TYPE_4 VAR_2 ; VAR_3 = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 == - 1 ) { METHOD_3 ( STRUCT_OR_UNION_2 , "FailedtocreateICMP6socket." ) ; return - VAR_8 ; } VAR_9 = 1 ; VAR_10 = METHOD_4 ( VAR_11 , VAR_12 , VAR_13 , & VAR_14 , sizeof ( VAR_15 ) ) ; if ( VAR_16 == - 1 ) { METHOD_5 ( STRUCT_OR_UNION_3 , "FailedtosetsockoptIPV6_RECVPKTINFO." ) ; METHOD_6 = - VAR_17 ; goto VAR_18 ; } VAR_19 = 255 ; VAR_20 = METHOD_7 ( VAR_21 , VAR_22 , VAR_23 , & VAR_24 , sizeof ( VAR_25 ) ) ; if ( VAR_26 == - 1 ) {  METHOD_8 ( STRUCT_OR_UNION_4 , "FailedtosetsockoptIPV6_MULTICAST_HOPS." ) ;  METHOD_9 = - VAR_27 ; goto VAR_28 ; } STRUCT_OR_UNION_5 -> VAR_29 = VAR_30 ; return 0 ; VAR_31 : METHOD_10 ( VAR_32 ) ; return METHOD_11 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 ) { struct STRUCT_OR_UNION_4 * VAR_2 = STRUCT_OR_UNION_5 -> VAR_3 ; struct STRUCT_OR_UNION_6 * VAR_4 = VAR_5 ; TYPE_1 VAR_6 ;  if ( VAR_7 ) {  VAR_8 = METHOD_1 ( STRUCT_OR_UNION_7 , VAR_9 ) ; if ( VAR_10 ) { if ( VAR_11 == VAR_12 ) { METHOD_2 ( VAR_13 , "keepingthisblock" ) ; } else { METHOD_3 ( VAR_14 , "reusingblock" ) ; VAR_15 = METHOD_4 ( STRUCT_OR_UNION_8 , 1 ) ; if ( VAR_16 ) { METHOD_5 ( VAR_17 ) ; goto VAR_18 ; } METHOD_6 ( & METHOD_7 ( VAR_19 ) -> VAR_20 , 1 ) ; METHOD_8 ( VAR_21 , "refcountnow=%d" , METHOD_9 ( METHOD_10 ( VAR_22 ) -> VAR_23 ) ) ; } METHOD_11 ( VAR_24 ) ; } else if ( VAR_25 && VAR_26 == METHOD_12 ( VAR_27 ) ) { VAR_28 = VAR_29 ; METHOD_13 ( VAR_30 ) ;  METHOD_14 ( VAR_31 ) ;  } else { TYPE_2 VAR_32 = METHOD_15 ( VAR_33 , METHOD_16 ( STRUCT_OR_UNION_9 ) -> VAR_34 ) ; TYPE_3 VAR_35 = METHOD_17 ( STRUCT_OR_UNION_10 , VAR_36 , & VAR_37 ) ; if ( VAR_38 ) goto VAR_39 ; METHOD_18 ( STRUCT_OR_UNION_11 , "creatingblock%d" , VAR_40 ) ; VAR_41 = METHOD_19 ( VAR_42 , VAR_43 ) ; if ( METHOD_20 ( ! VAR_44 ) ) { METHOD_21 ( STRUCT_OR_UNION_12 , VAR_45 , 1 ) ; METHOD_22 ( STRUCT_OR_UNION_13 ) ; VAR_46 = - VAR_47 ; goto VAR_48 ; } METHOD_23 ( VAR_49 ) ; METHOD_24 ( VAR_50 -> VAR_51 , VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_25 ( VAR_55 ) ; METHOD_26 ( VAR_56 ) ;  METHOD_27 ( VAR_57 ) ;  METHOD_28 ( VAR_58 ) ; } METHOD_29 ( VAR_59 ) ; if ( METHOD_30 ( STRUCT_OR_UNION_14 ) ) { METHOD_31 ( VAR_60 ) ; VAR_61 = - VAR_62 ; if ( METHOD_32 ( VAR_63 ) && ! METHOD_33 ( VAR_64 ) ) goto VAR_65 ; } } METHOD_34 ( STRUCT_OR_UNION_15 ) -> VAR_66 = VAR_67 ? VAR_68 -> VAR_69 : 0 ; STRUCT_OR_UNION_16 -> VAR_70 = VAR_71 ; if ( METHOD_35 ( STRUCT_OR_UNION_17 ) ) { VAR_72 = METHOD_36 ( STRUCT_OR_UNION_18 , 1 ) ; if ( VAR_73 && VAR_74 != - VAR_75 ) { if ( VAR_76 && VAR_77 != VAR_78 ) { METHOD_37 ( STRUCT_OR_UNION_19 , 1 ) ; METHOD_38 ( STRUCT_OR_UNION_20 ) ; } goto VAR_79 ; } } else METHOD_39 ( STRUCT_OR_UNION_21 ) ; VAR_80 = 0 ; if ( VAR_81 && VAR_82 != VAR_83 ) {  struct STRUCT_OR_UNION_22 * VAR_84 ;  VAR_85 = METHOD_40 ( VAR_86 , VAR_87 -> VAR_88 , VAR_89 -> VAR_90 ) ; METHOD_41 ( VAR_91 ) ; if ( METHOD_42 ( VAR_92 ) -> VAR_93 == METHOD_43 ( 1 ) ) {  if ( VAR_94 )  METHOD_44 ( VAR_95 ) ; METHOD_45 ( VAR_96 , "freeing" ) ; METHOD_46 ( STRUCT_OR_UNION_23 , VAR_97 -> VAR_98 , 1 ) ; METHOD_47 ( STRUCT_OR_UNION_24 ) ; METHOD_48 ( VAR_99 ) ; METHOD_49 ( VAR_100 ) ; } else { METHOD_50 ( & METHOD_51 ( VAR_101 ) -> VAR_102 , - 1 ) ;  if ( VAR_103 )  METHOD_52 ( VAR_104 ) ; METHOD_53 ( STRUCT_OR_UNION_25 , 1 ) ; METHOD_54 ( STRUCT_OR_UNION_26 ) ; METHOD_55 ( VAR_105 ) ; METHOD_56 ( VAR_106 , "refcountnow=%d" , METHOD_57 ( METHOD_58 ( VAR_107 ) -> VAR_108 ) ) ; } METHOD_59 ( VAR_109 ) ; } VAR_110 : METHOD_60 ( VAR_111 ) ; return VAR_112 ; }
static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , VAR_5 , "%s" , "compression" ) ;  if ( METHOD_1 ( VAR_6 , VAR_7 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_8 ) ) goto VAR_9 ; return 0 ; VAR_10 : return - VAR_11 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 * const VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ; if ( VAR_5 ) {  if ( ! METHOD_1 ( VAR_6 -> VAR_7 , VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 ) )  return VAR_14 ; else return VAR_15 ; } else { return VAR_16 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_3 * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 = 0 ; TYPE_6 * VAR_6 = VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) {  VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_3 -> VAR_15 ) ;  if ( VAR_16 < 0 )  return VAR_17 ;  STRUCT_OR_UNION_4 -> VAR_18 = VAR_19 ; METHOD_2 ( STRUCT_OR_UNION_5 ) ; if ( VAR_20 == 0 ) VAR_21 = VAR_22 ; } break ; case VAR_23 : VAR_24 = VAR_25 ; break ; default : return - VAR_26 ; } if ( VAR_27 ) { VAR_28 = METHOD_3 ( VAR_29 -> VAR_30 ) ; VAR_31 = METHOD_4 ( VAR_32 , VAR_33 ) ; if ( ! VAR_34 ) return - VAR_35 ; VAR_36 = METHOD_5 ( & VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 < 0 ) goto VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 , STRUCT_OR_UNION_6 , VAR_45 , VAR_46 , VAR_47 , 0 ) ; VAR_48 : METHOD_7 ( VAR_49 ) ; if ( ! VAR_50 ) METHOD_8 ( STRUCT_OR_UNION_7 , VAR_51 , VAR_52 ) ; return VAR_53 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 14 ] ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 = 0 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; register TYPE_8 VAR_7 ; TYPE_9 VAR_8 , VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 ; METHOD_1 ( VAR_12 != ( const TYPE_12 * ) VAR_13 ) ; METHOD_2 ( VAR_14 -> VAR_15 == VAR_16 ) ; if ( VAR_17 -> VAR_18 != VAR_19 ) ( TYPE_13 ) METHOD_3 ( VAR_20 , METHOD_4 ( ) , "%s" , VAR_21 -> VAR_22 ) ; METHOD_5 ( VAR_23 != ( TYPE_14 * ) VAR_24 ) ; METHOD_6 ( VAR_25 -> VAR_26 == VAR_27 ) ; VAR_28 = METHOD_7 ( VAR_29 ) ; VAR_30 = METHOD_8 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; if ( VAR_35 == VAR_36 ) { VAR_37 = METHOD_9 ( VAR_38 ) ; return ( ( TYPE_15 * ) VAR_39 ) ; } VAR_40 = METHOD_10 ( VAR_41 , 14 , ( unsigned TYPE_16 * ) VAR_42 ) ; if ( ( VAR_43 != 14 ) || ( METHOD_11 ( ( TYPE_17 * ) VAR_44 , "gimpxcf" , 8 ) != 0 ) ) METHOD_12 ( VAR_45 , "ImproperImageHeader" ) ; ( TYPE_18 ) METHOD_13 ( & VAR_46 , 0 , sizeof ( TYPE_19 ) ) ; VAR_47 . VAR_48 = VAR_49 ; VAR_50 . VAR_51 = METHOD_14 ( VAR_52 ) ; VAR_53 . VAR_54 = METHOD_15 ( VAR_55 ) ; if ( ( VAR_56 . VAR_57 > 262144 ) || ( VAR_58 . VAR_59 > 262144 ) ) METHOD_16 ( VAR_60 , "ImproperImageHeader" ) ; VAR_61 . VAR_62 = METHOD_17 ( VAR_63 ) ; VAR_64 -> VAR_65 = VAR_66 . VAR_67 ; VAR_68 -> VAR_69 = VAR_70 . VAR_71 ; VAR_72 = VAR_73 . VAR_74 ; VAR_75 . VAR_76 = METHOD_18 ( VAR_77 ) ; VAR_78 -> VAR_79 = VAR_80 ; VAR_81 -> VAR_82 = 8 ; VAR_83 = METHOD_19 ( VAR_84 , VAR_85 -> VAR_86 , VAR_87 -> VAR_88 ) ; if ( VAR_89 == VAR_90 ) { METHOD_20 ( VAR_91 , & VAR_92 -> VAR_93 ) ; return ( METHOD_21 ( VAR_94 ) ) ; } if ( VAR_95 == VAR_96 ) ; else if ( VAR_97 == VAR_98 ) VAR_99 -> VAR_100 = VAR_101 ; else if ( VAR_102 == VAR_103 ) METHOD_22 ( VAR_104 , "ColormapTypeNotSupported" ) ; ( TYPE_20 ) METHOD_23 ( VAR_105 , VAR_106 ) ; ( TYPE_21 ) METHOD_24 ( VAR_107 ) ; while ( ( VAR_108 == VAR_109 ) && ( METHOD_25 ( VAR_110 ) == VAR_111 ) ) { TYPE_22 VAR_112 = ( TYPE_23 ) METHOD_26 ( VAR_113 ) ; TYPE_24 VAR_114 = METHOD_27 ( VAR_115 ) ; switch ( VAR_116 ) { case VAR_117 : VAR_118 = 1 ; break ; case VAR_119 : { TYPE_25 VAR_120 = METHOD_28 ( VAR_121 ) ; if ( METHOD_29 ( VAR_122 , 3 * VAR_123 ) == VAR_124 ) METHOD_30 ( & VAR_125 -> VAR_126 , VAR_127 , "UnexpectedEndOfFile" , VAR_128 -> VAR_129 ) ; break ; } case VAR_130 : { VAR_131 . VAR_132 = METHOD_31 ( VAR_133 ) ; if ( ( VAR_134 . VAR_135 != VAR_136 ) && ( VAR_137 . VAR_138 != VAR_139 ) && ( VAR_140 . VAR_141 != VAR_142 ) && ( VAR_143 . VAR_144 != VAR_145 ) ) METHOD_32 ( VAR_146 , "UnrecognizedImageCompression" ) ; } break ; case VAR_147 : { if ( METHOD_33 ( VAR_148 , VAR_149 ) == VAR_150 ) METHOD_34 ( & VAR_151 -> VAR_152 , VAR_153 , "UnexpectedEndOfFile" , VAR_154 -> VAR_155 ) ; } break ; case VAR_156 : { ( TYPE_26 ) METHOD_35 ( VAR_157 ) ; ( TYPE_27 ) METHOD_36 ( VAR_158 ) ; } break ; case VAR_159 : { ( TYPE_28 ) METHOD_37 ( VAR_160 ) ; } break ; case VAR_161 : { if ( METHOD_38 ( VAR_162 , VAR_163 ) == VAR_164 ) METHOD_39 ( & VAR_165 -> VAR_166 , VAR_167 , "UnexpectedEndOfFile" , VAR_168 -> VAR_169 ) ; } break ; case VAR_170 : { ( TYPE_29 ) METHOD_40 ( VAR_171 ) ; } break ; case VAR_172 : { if ( METHOD_41 ( VAR_173 , VAR_174 ) == VAR_175 ) METHOD_42 ( & VAR_176 -> VAR_177 , VAR_178 , "UnexpectedEndOfFile" , VAR_179 -> VAR_180 ) ; } break ; case VAR_181 : { TYPE_30 VAR_182 [ 1000 ] ; ( TYPE_31 ) METHOD_43 ( VAR_183 ) ; ( TYPE_32 ) METHOD_44 ( VAR_184 ) ; for ( VAR_185 = 0 ; VAR_186 < 5 ; VAR_187 ++ ) ( TYPE_33 ) METHOD_45 ( VAR_188 , VAR_189 , sizeof ( VAR_190 ) ) ; } break ; default : { TYPE_34 VAR_191 [ 16 ] ; TYPE_35 VAR_192 ; while ( ( VAR_193 > 0 ) && ( METHOD_46 ( VAR_194 ) == VAR_195 ) ) { VAR_196 = ( TYPE_36 ) METHOD_47 ( 16 , VAR_197 ) ; VAR_198 = ( TYPE_37 ) METHOD_48 ( VAR_199 , ( TYPE_38 ) VAR_200 , ( unsigned TYPE_39 * ) & VAR_201 ) ; if ( ! VAR_202 ) METHOD_49 ( VAR_203 , "CorruptImage" ) ; VAR_204 -= ( TYPE_40 ) METHOD_50 ( 16 , ( TYPE_41 ) VAR_205 ) ; } } break ; } } if ( VAR_206 == VAR_207 ) METHOD_51 ( VAR_208 , "ImproperImageHeader" ) ; if ( ( VAR_209 -> VAR_210 != VAR_211 ) && ( VAR_212 -> VAR_213 != 0 ) ) { ; } else { TYPE_42 VAR_214 = 0 , VAR_215 = VAR_216 , VAR_217 = 0 ; TYPE_43 VAR_218 = METHOD_52 ( VAR_219 ) ; TYPE_44 * VAR_220 ; do { TYPE_45 VAR_221 = METHOD_53 ( VAR_222 ) ; if ( VAR_223 == 0 ) VAR_224 = VAR_225 ; else VAR_226 ++ ; if ( METHOD_54 ( VAR_227 ) != VAR_228 ) { METHOD_55 ( VAR_229 , VAR_230 , "UnexpectedEndOfFile" , VAR_231 -> VAR_232 ) ; break ; } } while ( VAR_233 == VAR_234 ) ; VAR_235 . VAR_236 = VAR_237 ; VAR_238 = METHOD_56 ( VAR_239 , VAR_240 , VAR_241 ) ; if ( VAR_242 < 0 ) METHOD_57 ( VAR_243 , "ImproperImageHeader" ) ; VAR_244 = ( TYPE_46 ) VAR_245 ; VAR_246 = ( TYPE_47 * ) METHOD_58 ( VAR_247 , sizeof ( * VAR_248 ) ) ; if ( VAR_249 == ( TYPE_48 * ) VAR_250 ) METHOD_59 ( VAR_251 , "MemoryAllocationFailed" ) ; ( TYPE_49 ) METHOD_60 ( VAR_252 , 0 , VAR_253 * sizeof ( TYPE_50 ) ) ; for ( ; ; ) { TYPE_51 VAR_254 ; TYPE_52 VAR_255 , VAR_256 ; VAR_257 = ( TYPE_53 ) METHOD_61 ( VAR_258 ) ; if ( VAR_259 == 0 ) break ; VAR_260 = METHOD_62 ( VAR_261 ) ; if ( METHOD_63 ( VAR_262 , VAR_263 , VAR_264 ) != VAR_265 ) METHOD_64 ( VAR_266 , "NotEnoughPixelData" ) ; VAR_267 = METHOD_65 ( VAR_268 , VAR_269 , & VAR_270 , & VAR_271 [ VAR_272 ] , VAR_273 ) ; if ( VAR_274 == VAR_275 ) { TYPE_54 VAR_276 ; for ( VAR_277 = 0 ; VAR_278 < VAR_279 ; VAR_280 ++ ) VAR_281 [ VAR_282 ] . VAR_283 = METHOD_66 ( VAR_284 [ VAR_285 ] . VAR_286 ) ; VAR_287 = ( TYPE_55 * ) METHOD_67 ( VAR_288 ) ; METHOD_68 ( VAR_289 , "MemoryAllocationFailed" ) ; } VAR_290 = METHOD_69 ( VAR_291 , VAR_292 , VAR_293 ) ; VAR_294 ++ ; } if 0 { signed TYPE_56 VAR_295 ; for ( VAR_296 = VAR_297 - 1 ; VAR_298 >= 0 ; VAR_299 -- ) { if ( VAR_300 [ VAR_301 ] . VAR_302 ) { METHOD_70 ( VAR_303 , VAR_304 , VAR_305 [ VAR_306 ] . VAR_307 , VAR_308 [ VAR_309 ] . VAR_310 , VAR_311 [ VAR_312 ] . VAR_313 ) ; VAR_314 [ VAR_315 ] . VAR_316 = METHOD_71 ( VAR_317 [ VAR_318 ] . VAR_319 ) ; if ( VAR_320 == VAR_321 ) { TYPE_57 VAR_322 ; METHOD_72 ( & VAR_323 ) ; VAR_324 . VAR_325 = VAR_326 ; METHOD_73 ( & VAR_327 , VAR_328 [ VAR_329 ] . VAR_330 ) ; } } } } else { TYPE_58 VAR_331 ; for ( VAR_332 = ( TYPE_59 ) VAR_333 - 1 ; VAR_334 >= 0 ; VAR_335 -- ) METHOD_74 ( & VAR_336 , VAR_337 [ VAR_338 ] . VAR_339 ) ; } VAR_340 = ( TYPE_60 * ) METHOD_75 ( VAR_341 ) ; if 0 while ( VAR_342 ) { VAR_343 -> VAR_344 += METHOD_76 ( VAR_345 -> VAR_346 , & VAR_347 , 1 ) ; if ( VAR_348 == 0 ) break ; VAR_349 = VAR_350 -> VAR_351 ; METHOD_77 ( VAR_352 , VAR_353 ) ; VAR_354 = METHOD_78 ( VAR_355 , VAR_356 ) ; if ( VAR_357 == 0 ) goto VAR_358 ; VAR_359 ++ ; if ( VAR_360 != VAR_361 -> VAR_362 ) METHOD_79 ( VAR_363 , VAR_364 , - 1 ) ; METHOD_80 ( VAR_365 , VAR_366 ) ; } } ( TYPE_61 ) METHOD_81 ( VAR_367 ) ;  METHOD_82 ( METHOD_83 ( & VAR_368 ) ) ;  if ( VAR_369 == VAR_370 ) VAR_371 -> VAR_372 = VAR_373 ; return ( METHOD_84 ( VAR_374 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_1 VAR_7 , VAR_8 = VAR_9 -> VAR_10 . VAR_11 . VAR_12 ; METHOD_1 ( & VAR_13 -> VAR_14 . VAR_15 , & VAR_16 , VAR_17 ) ; VAR_18 = METHOD_2 ( & VAR_19 , VAR_20 ,  VAR_21 -> VAR_22 . VAR_23 . VAR_24 , 0 , 0 ) ;  if ( VAR_25 ) goto VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = METHOD_3 ( VAR_30 , VAR_31 ) ; VAR_32 -> VAR_33 . VAR_34 = METHOD_4 ( VAR_35 , VAR_36 ) ; VAR_37 -> VAR_38 . VAR_39 = METHOD_5 ( VAR_40 , VAR_41 ) ; VAR_42 -> VAR_43 . VAR_44 = METHOD_6 ( VAR_45 , VAR_46 ) ; METHOD_7 ( & VAR_47 , VAR_48 -> VAR_49 ) ; METHOD_8 ( VAR_50 , & VAR_51 , & VAR_52 ) ; METHOD_9 ( & VAR_53 ) ; VAR_54 : VAR_55 -> VAR_56 . VAR_57 . VAR_58 = VAR_59 ; }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 = 3 * VAR_4 ;  struct STRUCT_OR_UNION_0 * VAR_5 = METHOD_1 ( 1 , sizeof ( * VAR_6 ) + VAR_7 ) ; VAR_8 -> VAR_9 = VAR_10 + VAR_11 ; VAR_12 -> VAR_13 = VAR_14 ; VAR_15 -> TYPE_5 = TYPE_6 ; VAR_16 -> VAR_17 = VAR_18 ; METHOD_2 ( VAR_19 -> VAR_20 ) ; if ( ! METHOD_3 ( VAR_21 ) ) { php_error_docref ( TYPE_7 VAR_22 , VAR_23 , "FailedtoparseURLscheme:\'%s\'" , VAR_24 -> VAR_25 ) ; METHOD_4 ( VAR_26 ) ; return TYPE_8 ; } if ( ! METHOD_5 ( VAR_27 ) ) { METHOD_6 ( VAR_28 ) ; return TYPE_9 ; } if ( ! METHOD_7 ( VAR_29 ) ) { php_error_docref ( TYPE_10 VAR_30 , VAR_31 , "FailedtoparseURLquery:\'%s\'" , VAR_32 -> VAR_33 ) ; METHOD_8 ( VAR_34 ) ; return TYPE_11 ; } if ( ! METHOD_9 ( VAR_35 ) ) { php_error_docref ( TYPE_12 VAR_36 , VAR_37 , "FailedtoparseURLfragment:\'%s\'" , VAR_38 -> VAR_39 ) ; METHOD_10 ( VAR_40 ) ; return TYPE_13 ; } return ( TYPE_14 * ) VAR_41 ; }
static TYPE_0 METHOD_0 ( TYPE_1 , TYPE_2 VAR_0 ) { TYPE_3 * VAR_1 , * VAR_2 ; TYPE_4 VAR_3 , VAR_4 ; TYPE_5 * * VAR_5 = TYPE_6 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; if ( zend_parse_parameters ( METHOD_1 ( ) VAR_12 , "rall" , & VAR_13 , & VAR_14 , & VAR_15 , & VAR_16 ) == FAILURE ) { return ; } METHOD_2 ( VAR_17 , TYPE_10 , & VAR_18 , - 1 , "Image" , VAR_19 ) ; VAR_20 = VAR_21 ; VAR_22 = VAR_23 ; VAR_24 = METHOD_3 ( METHOD_4 ( VAR_25 ) ) ; if ( VAR_26 < 6 ) { php_error_docref ( TYPE_11 VAR_27 , VAR_28 , "Youmusthaveatleast3pointsinyourarray" ) ; VAR_29 ; } if ( VAR_30 <= 0 ) { php_error_docref ( TYPE_12 VAR_31 , VAR_32 , "Youmustgiveapositivenumberofpoints" ) ; VAR_33 ; } if ( VAR_34 < VAR_35 * 2 ) { php_error_docref ( TYPE_13 VAR_36 , VAR_37 , "Tryingtouse%dpointsinarraywithonly%dpoints" , VAR_38 , VAR_39 / 2 ) ; VAR_40 ; } VAR_41 = ( TYPE_14 ) METHOD_5 ( VAR_42 , sizeof ( VAR_43 ) , 0 ) ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 ; VAR_47 ++ ) { if ( METHOD_6 ( METHOD_7 ( VAR_48 ) , ( VAR_49 * 2 ) , ( TYPE_15 * * ) & VAR_50 ) == VAR_51 ) {  METHOD_8 ( ( VAR_52 ) ) ;   METHOD_9 ( * VAR_53 ) ;   VAR_54 [ VAR_55 ] . VAR_56 = METHOD_10 ( VAR_57 ) ;  } if ( METHOD_11 ( METHOD_12 ( VAR_58 ) , ( VAR_59 * 2 ) + 1 , ( TYPE_16 * * ) & VAR_60 ) == VAR_61 ) {  METHOD_13 ( VAR_62 ) ;   METHOD_14 ( * VAR_63 ) ;   VAR_64 [ VAR_65 ] . VAR_66 = METHOD_15 ( VAR_67 ) ;  } }  if ( VAR_68 ) {  METHOD_16 ( VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ; } else { METHOD_17 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; } METHOD_18 ( VAR_77 ) ; VAR_78 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { const struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 , VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; TYPE_2 TYPE_3 ;  TYPE_4 = ( VAR_9 -> VAR_10 & ~ VAR_11 ) == VAR_12 ;  VAR_13 = VAR_14 -> VAR_15 ; if ( VAR_16 ) { VAR_17 -> VAR_18 = METHOD_1 ( VAR_19 ) ; } else if ( ! VAR_20 -> VAR_21 ) { if ( ! TYPE_5 ) return ; } VAR_22 -> METHOD_2 ( VAR_23 -> VAR_24 , & VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; if ( VAR_28 && ( VAR_29 -> VAR_30 & VAR_31 || TYPE_6 ) ) VAR_32 -> VAR_33 += VAR_34 -> METHOD_4 ( VAR_35 , VAR_36 ) ; VAR_37 = VAR_38 -> METHOD_5 ( VAR_39 , VAR_40 ) ; if ( VAR_41 <= 0 ) { if ( ! TYPE_7 ) VAR_42 -> VAR_43 . VAR_44 = 1 ; } else { VAR_45 -> VAR_46 = METHOD_6 ( VAR_47 ) ; } }
TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , unsigned TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , unsigned TYPE_5 * * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 ; TYPE_8 VAR_13 , VAR_14 ; TYPE_9 VAR_15 , VAR_16 ; TYPE_10 VAR_17 , VAR_18 ; TYPE_11 VAR_19 , VAR_20 ; TYPE_12 VAR_21 , VAR_22 , VAR_23 = 2 , VAR_24 ; TYPE_13 VAR_25 [ 10 ] ; TYPE_14 VAR_26 [ VAR_27 ] ; unsigned TYPE_15 * VAR_28 , * VAR_29 ; TYPE_16 VAR_30 , VAR_31 ; TYPE_17 VAR_32 , VAR_33 ; TYPE_18 VAR_34 ; VAR_35 = VAR_36 = 0 ; VAR_37 = VAR_38 = 0 ; VAR_39 = 2 ; VAR_40 = 1 ; VAR_41 = VAR_42 = 0 ; VAR_43 = 1 ; VAR_44 = 0 ; VAR_45 = 0 ; VAR_46 = 2048 ; VAR_47 = 2048 ;  VAR_48 = ( unsigned TYPE_19 * ) METHOD_1 ( VAR_49 * VAR_50 , 1 ) ;  if ( VAR_51 == VAR_52 ) { return ( VAR_53 ) ; } for ( VAR_54 = 0 ; VAR_55 < 16 ; VAR_56 ++ ) { VAR_57 [ VAR_58 ] = VAR_59 [ VAR_60 ] ; } for ( VAR_61 = 0 ; VAR_62 < 6 ; VAR_63 ++ ) { for ( VAR_64 = 0 ; VAR_65 < 6 ; VAR_66 ++ ) { for ( VAR_67 = 0 ; VAR_68 < 6 ; VAR_69 ++ ) { VAR_70 [ VAR_71 ++ ] = METHOD_2 ( VAR_72 * 51 , VAR_73 * 51 , VAR_74 * 51 ) ; } } } for ( VAR_75 = 0 ; VAR_76 < 24 ; VAR_77 ++ ) { VAR_78 [ VAR_79 ++ ] = METHOD_3 ( VAR_80 * 11 , VAR_81 * 11 , VAR_82 * 11 ) ; } for ( ; VAR_83 < VAR_84 ; VAR_85 ++ ) { VAR_86 [ VAR_87 ] = METHOD_4 ( 255 , 255 , 255 ) ; }  ( TYPE_20 ) METHOD_5 ( VAR_88 , VAR_89 , VAR_90 * VAR_91 ) ;  while ( * VAR_92 != '\\0' ) { if ( ( VAR_93 [ 0 ] == '\\033' && VAR_94 [ 1 ] == 'P' ) || * VAR_95 == 0x90 ) { if ( * VAR_96 == '\\033' ) { VAR_97 ++ ; } VAR_98 = METHOD_6 ( ++ VAR_99 , VAR_100 , & VAR_101 ) ; if ( * VAR_102 == 'q' ) { VAR_103 ++ ; if ( VAR_104 > 0 ) { switch ( VAR_105 [ 0 ] ) { case 0 : case 1 : VAR_106 = 2 ; break ; case 2 : VAR_107 = 5 ; break ; case 3 : VAR_108 = 4 ; break ; case 4 : VAR_109 = 4 ; break ; case 5 : VAR_110 = 3 ; break ; case 6 : VAR_111 = 3 ; break ; case 7 : VAR_112 = 2 ; break ; case 8 : VAR_113 = 2 ; break ; case 9 : VAR_114 = 1 ; break ; } } if ( VAR_115 > 2 ) { if ( VAR_116 [ 2 ] == 0 ) { VAR_117 [ 2 ] = 10 ; } VAR_118 = VAR_119 * VAR_120 [ 2 ] / 10 ; VAR_121 = VAR_122 * VAR_123 [ 2 ] / 10 ; if ( VAR_124 <= 0 ) VAR_125 = 1 ; if ( VAR_126 <= 0 ) VAR_127 = 1 ; } } } else if ( ( VAR_128 [ 0 ] == '\\033' && VAR_129 [ 1 ] == '\\\\' ) || * VAR_130 == 0x9C ) { break ; } else if ( * VAR_131 == \'"\' ) { VAR_132 = METHOD_7 ( ++ VAR_133 , VAR_134 , & VAR_135 ) ; if ( VAR_136 > 0 ) VAR_137 = VAR_138 [ 0 ] ; if ( VAR_139 > 1 ) VAR_140 = VAR_141 [ 1 ] ; if ( VAR_142 > 2 && VAR_143 [ 2 ] > 0 ) VAR_144 = VAR_145 [ 2 ] ; if ( VAR_146 > 3 && VAR_147 [ 3 ] > 0 ) VAR_148 = VAR_149 [ 3 ] ; if ( VAR_150 <= 0 ) VAR_151 = 1 ; if ( VAR_152 <= 0 ) VAR_153 = 1 ; if ( VAR_154 < VAR_155 || VAR_156 < VAR_157 ) { VAR_158 = VAR_159 > VAR_160 ? VAR_161 : VAR_162 ; VAR_163 = VAR_164 > VAR_165 ? VAR_166 : VAR_167 ;  VAR_168 = ( unsigned TYPE_21 * ) METHOD_8 ( VAR_169 * VAR_170 , 1 ) ;  if ( VAR_171 == ( unsigned TYPE_22 * ) VAR_172 ) { VAR_173 = ( unsigned TYPE_23 * ) RelinquishMagickMemory ( VAR_174 ) ; return ( VAR_175 ) ; }  ( TYPE_24 ) METHOD_9 ( VAR_176 , VAR_177 , VAR_178 * VAR_179 ) ;  for ( VAR_180 = 0 ; VAR_181 < VAR_182 ; ++ VAR_183 ) {  ( TYPE_25 ) CopyMagickMemory ( VAR_184 + VAR_185 * VAR_186 , VAR_187 + VAR_188 * VAR_189 , VAR_190 ) ;  } VAR_191 = ( unsigned TYPE_26 * ) RelinquishMagickMemory ( VAR_192 ) ; VAR_193 = VAR_194 ; VAR_195 = VAR_196 ; VAR_197 = VAR_198 ; } } else if ( * VAR_199 == '!' ) { VAR_200 = METHOD_10 ( ++ VAR_201 , VAR_202 , & VAR_203 ) ; if ( VAR_204 > 0 ) { VAR_205 = VAR_206 [ 0 ] ; } } else if ( * VAR_207 == '' ) { VAR_208 = METHOD_11 ( ++ VAR_209 , VAR_210 , & VAR_211 ) ; if ( VAR_212 > 0 ) { if ( ( VAR_213 = VAR_214 [ 0 ] ) < 0 ) { VAR_215 = 0 ; } else if ( VAR_216 >= VAR_217 ) { VAR_218 = VAR_219 - 1 ; } } if ( VAR_220 > 4 ) { if ( VAR_221 [ 1 ] == 1 ) { if ( VAR_222 [ 2 ] > 360 ) VAR_223 [ 2 ] = 360 ; if ( VAR_224 [ 3 ] > 100 ) VAR_225 [ 3 ] = 100 ; if ( VAR_226 [ 4 ] > 100 ) VAR_227 [ 4 ] = 100 ; VAR_228 [ VAR_229 ] = hls_to_rgb ( VAR_230 [ 2 ] * 100 / 360 , VAR_231 [ 3 ] , VAR_232 [ 4 ] ) ; } else if ( VAR_233 [ 1 ] == 2 ) { if ( VAR_234 [ 2 ] > 100 ) VAR_235 [ 2 ] = 100 ; if ( VAR_236 [ 3 ] > 100 ) VAR_237 [ 3 ] = 100 ; if ( VAR_238 [ 4 ] > 100 ) VAR_239 [ 4 ] = 100 ; VAR_240 [ VAR_241 ] = SIXEL_XRGB ( VAR_242 [ 2 ] , VAR_243 [ 3 ] , VAR_244 [ 4 ] ) ; } } } else if ( * VAR_245 == '$' ) { VAR_246 ++ ; VAR_247 = 0 ; VAR_248 = 1 ; } else if ( * VAR_249 == '-' ) { VAR_250 ++ ; VAR_251 = 0 ; VAR_252 += 6 ; VAR_253 = 1 ; } else if ( * VAR_254 >= '?' && * VAR_255 <= '\\177' ) { if ( VAR_256 < ( VAR_257 + VAR_258 ) || VAR_259 < ( VAR_260 + 6 ) ) { TYPE_27 nx = VAR_261 * 2 ; TYPE_28 ny = VAR_262 * 2 ; while ( nx < ( VAR_263 + VAR_264 ) || ny < ( VAR_265 + 6 ) ) { nx *= 2 ; ny *= 2 ; } VAR_266 = nx ; VAR_267 = ny ;  VAR_268 = ( unsigned TYPE_29 * ) METHOD_12 ( VAR_269 * VAR_270 , 1 ) ;  if ( VAR_271 == ( unsigned TYPE_30 * ) VAR_272 ) { VAR_273 = ( unsigned TYPE_31 * ) RelinquishMagickMemory ( VAR_274 ) ; return ( VAR_275 ) ; }  ( TYPE_32 ) METHOD_13 ( VAR_276 , VAR_277 , VAR_278 * VAR_279 ) ;  for ( VAR_280 = 0 ; VAR_281 < VAR_282 ; ++ VAR_283 ) {  ( TYPE_33 ) CopyMagickMemory ( VAR_284 + VAR_285 * VAR_286 , VAR_287 + VAR_288 * VAR_289 , VAR_290 ) ;  } VAR_291 = ( unsigned TYPE_34 * ) RelinquishMagickMemory ( VAR_292 ) ; VAR_293 = VAR_294 ; VAR_295 = VAR_296 ; VAR_297 = VAR_298 ; } if ( VAR_299 > VAR_300 ) { VAR_301 = VAR_302 ; } if ( ( VAR_303 = * ( VAR_304 ++ ) - '?' ) == 0 ) { VAR_305 += VAR_306 ; } else { VAR_307 = 0x01 ; if ( VAR_308 <= 1 ) { for ( VAR_309 = 0 ; VAR_310 < 6 ; VAR_311 ++ ) { if ( ( VAR_312 & VAR_313 ) != 0 ) { VAR_314 [ VAR_315 * ( VAR_316 + VAR_317 ) + VAR_318 ] = VAR_319 ; if ( VAR_320 < VAR_321 ) { VAR_322 = VAR_323 ; } if ( VAR_324 < ( VAR_325 + VAR_326 ) ) { VAR_327 = VAR_328 + VAR_329 ; } } VAR_330 <<= 1 ; } VAR_331 += 1 ; } else { for ( VAR_332 = 0 ; VAR_333 < 6 ; VAR_334 ++ ) { if ( ( VAR_335 & VAR_336 ) != 0 ) { VAR_337 = VAR_338 << 1 ; for ( VAR_339 = 1 ; ( VAR_340 + VAR_341 ) < 6 ; VAR_342 ++ ) { if ( ( VAR_343 & VAR_344 ) == 0 ) { break ; } VAR_345 <<= 1 ; } for ( VAR_346 = VAR_347 + VAR_348 ; VAR_349 < VAR_350 + VAR_351 + VAR_352 ; ++ VAR_353 ) {  ( TYPE_35 ) METHOD_14 ( VAR_354 + VAR_355 * VAR_356 + VAR_357 , VAR_358 , VAR_359 ) ;  } if ( VAR_360 < ( VAR_361 + VAR_362 - 1 ) ) { VAR_363 = VAR_364 + VAR_365 - 1 ; } if ( VAR_366 < ( VAR_367 + VAR_368 + VAR_369 - 1 ) ) { VAR_370 = VAR_371 + VAR_372 + VAR_373 - 1 ; } VAR_374 += ( VAR_375 - 1 ) ; VAR_376 <<= ( VAR_377 - 1 ) ; } VAR_378 <<= 1 ; } VAR_379 += VAR_380 ; } } VAR_381 = 1 ; } else { VAR_382 ++ ; } } if ( ++ VAR_383 < VAR_384 ) { VAR_385 = VAR_386 ; } if ( ++ VAR_387 < VAR_388 ) { VAR_389 = VAR_390 ; } if ( VAR_391 > VAR_392 || VAR_393 > VAR_394 ) { VAR_395 = VAR_396 ; VAR_397 = VAR_398 ;  if ( ( VAR_399 = ( unsigned TYPE_36 * ) METHOD_15 ( VAR_400 * VAR_401 , 1 ) ) == VAR_402 ) {  VAR_403 = ( unsigned TYPE_37 * ) RelinquishMagickMemory ( VAR_404 ) ; return ( VAR_405 ) ; } for ( VAR_406 = 0 ; VAR_407 < VAR_408 ; ++ VAR_409 ) { ( TYPE_38 ) CopyMagickMemory ( VAR_410 + VAR_411 * VAR_412 , VAR_413 + VAR_414 * VAR_415 , VAR_416 ) ; } VAR_417 = ( unsigned TYPE_39 * ) RelinquishMagickMemory ( VAR_418 ) ; VAR_419 = VAR_420 ; VAR_421 = VAR_422 ; VAR_423 = VAR_424 ; } * VAR_425 = VAR_426 ; * VAR_427 = VAR_428 ; * VAR_429 = VAR_430 ; * VAR_431 = VAR_432 + 1 ; * VAR_433 = ( unsigned TYPE_40 * ) METHOD_16 ( * VAR_434 , 4 ) ; for ( VAR_435 = 0 ; VAR_436 < ( ssize_t ) * VAR_437 ; ++ VAR_438 ) { ( * VAR_439 ) [ VAR_440 * 4 + 0 ] = VAR_441 [ VAR_442 ] >> 16 & 0xff ; ( * VAR_443 ) [ VAR_444 * 4 + 1 ] = VAR_445 [ VAR_446 ] >> 8 & 0xff ; ( * VAR_447 ) [ VAR_448 * 4 + 2 ] = VAR_449 [ VAR_450 ] & 0xff ; ( * VAR_451 ) [ VAR_452 * 4 + 3 ] = 0xff ; } return ( MagickTrue ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , "%i" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; * ( METHOD_5 ( VAR_9 ) - 1 ) = '' ; METHOD_6 ( ) ;  METHOD_7 ( VAR_10 , VAR_11 ) ;  METHOD_8 ( VAR_12 , VAR_13 ) ; VAR_14 = METHOD_9 ( VAR_15 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {   TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ;  if ( VAR_5 ) { TYPE_6 * VAR_6 = ( TYPE_7 * ) VAR_7 ; TYPE_8 VAR_8 ;  METHOD_1 ( & VAR_9 -> VAR_10 , & VAR_11 ) ;   return METHOD_2 ( VAR_12 -> VAR_13 ,  ( TYPE_9 ) VAR_14 -> VAR_15 , & VAR_16 ) ; } else { return VAR_17 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 . VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; const TYPE_1 * VAR_8 = VAR_9 -> VAR_10 . VAR_11 ;  VAR_12 -> VAR_13 = METHOD_1 ( VAR_14 , VAR_15 , 0 , VAR_16 ) ;   if ( ! VAR_17 -> VAR_18 )  return VAR_19 ; return VAR_20 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 ; VAR_4 = * VAR_5 ++ ; if ( VAR_6 == 0 ) return 0 ; while ( VAR_7 > 0 ) { if ( * VAR_8 == 0x00 ) { VAR_9 -- ; VAR_10 ++ ; switch ( * VAR_11 ) { case VAR_12 : VAR_13 = METHOD_1 ( VAR_14 + 1 , VAR_15 , VAR_16 - 1 ) ;  VAR_17 -= VAR_18 + 1 ;  VAR_19 += VAR_20 + 1 ; break ; case VAR_21 : VAR_22 = METHOD_2 ( VAR_23 + 1 , VAR_24 , VAR_25 - 1 ) ;  VAR_26 -= VAR_27 + 1 ;  VAR_28 += VAR_29 + 1 ; break ; default : printk ( KERN_DEBUG "ROSE:rose_parse_facilities-unknownfacilitiesfamily%02X\\n" , * VAR_30 ) ; VAR_31 -- ; VAR_32 ++ ; break ; } } else break ; } return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 -> VAR_4 ; TYPE_3 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_4 VAR_8 , VAR_9 ;  VAR_10 -> VAR_11 = METHOD_1 ( VAR_12 ) ;  if ( ( METHOD_2 ( VAR_13 ) || METHOD_3 ( VAR_14 ) ) && VAR_15 -> VAR_16 ) { VAR_17 -> VAR_18 = ( VAR_19 -> VAR_20 + 1 ) & 0xff ; VAR_21 -> VAR_22 = VAR_23 ; if ( METHOD_4 ( VAR_24 ) ) METHOD_5 ( VAR_25 ) ; } VAR_26 -> VAR_27 = 0 ; if ( METHOD_6 ( VAR_28 ) ) VAR_29 -> VAR_30 = METHOD_7 ( VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_8 ( VAR_34 ) ; if ( VAR_35 -> VAR_36 >= VAR_37 || ! VAR_38 -> VAR_39 . VAR_40 [ VAR_41 -> VAR_42 ] ) { METHOD_9 ( VAR_43 -> VAR_44 , VAR_45 , "PPSidoutofrange:%d\\n" , VAR_46 -> VAR_47 ) ; return VAR_48 ; } if ( ! VAR_49 -> VAR_50 && VAR_51 -> VAR_52 . VAR_53 != ( TYPE_5 * ) VAR_54 -> VAR_55 . VAR_56 [ VAR_57 -> VAR_58 ] -> VAR_59 ) { METHOD_10 ( VAR_60 -> VAR_61 , VAR_62 , "PPSchangedbetweenslices.\\n" ) ; return VAR_63 ; } VAR_64 -> VAR_65 . VAR_66 = ( TYPE_6 * ) VAR_67 -> VAR_68 . VAR_69 [ VAR_70 -> VAR_71 ] -> VAR_72 ; if ( VAR_73 -> VAR_74 == VAR_75 && VAR_76 -> VAR_77 == 1 ) VAR_78 -> VAR_79 = 1 ; if ( VAR_80 -> VAR_81 . VAR_82 != ( TYPE_7 * ) VAR_83 -> VAR_84 . VAR_85 [ VAR_86 -> VAR_87 . VAR_88 -> VAR_89 ] -> VAR_90 ) { const TYPE_8 * VAR_91 = ( TYPE_9 * ) VAR_92 -> VAR_93 . VAR_94 [ VAR_95 -> VAR_96 . VAR_97 -> VAR_98 ] -> VAR_99 ; const TYPE_10 * VAR_100 = VAR_101 -> VAR_102 . VAR_103 ; enum VAR_104 VAR_105 ; if ( VAR_106 && METHOD_11 ( VAR_107 ) && VAR_108 -> VAR_109 != VAR_110 ) { if ( VAR_111 -> VAR_112 != VAR_113 -> VAR_114 || VAR_115 -> VAR_116 != VAR_117 -> VAR_118 || VAR_119 -> VAR_120 [ VAR_121 -> VAR_122 - 1 ] . VAR_123 != VAR_124 -> VAR_125 [ VAR_126 -> VAR_127 - 1 ] . VAR_128 ) VAR_129 -> VAR_130 = 0 ; } METHOD_12 ( VAR_131 ) ; VAR_132 = METHOD_13 ( VAR_133 , VAR_134 , VAR_135 -> VAR_136 ) ; if ( VAR_137 < 0 ) return VAR_138 ; VAR_139 = METHOD_14 ( VAR_140 , VAR_141 ) ; if ( VAR_142 < 0 ) return VAR_143 ; VAR_144 -> VAR_145 -> VAR_146 = VAR_147 ; VAR_148 -> VAR_149 = ( VAR_150 -> VAR_151 + 1 ) & 0xff ; VAR_152 -> VAR_153 = VAR_154 ; } VAR_155 -> VAR_156 = 0 ; if ( ! VAR_157 -> VAR_158 ) { TYPE_11 VAR_159 ; if ( VAR_160 -> VAR_161 . VAR_162 -> VAR_163 ) VAR_164 -> VAR_165 = METHOD_15 ( VAR_166 ) ; VAR_167 = METHOD_16 ( VAR_168 -> VAR_169 . VAR_170 -> VAR_171 * VAR_172 -> VAR_173 . VAR_174 -> VAR_175 ) ; VAR_176 -> VAR_177 = METHOD_17 ( VAR_178 , VAR_179 ) ; if ( VAR_180 -> VAR_181 >= VAR_182 -> VAR_183 . VAR_184 -> VAR_185 * VAR_186 -> VAR_187 . VAR_188 -> VAR_189 ) { METHOD_18 ( VAR_190 -> VAR_191 , VAR_192 , "Invalidslicesegmentaddress:%u.\\n" , VAR_193 -> VAR_194 ) ; return VAR_195 ; } if ( ! VAR_196 -> VAR_197 ) { VAR_198 -> VAR_199 = VAR_200 -> VAR_201 ; VAR_202 -> VAR_203 ++ ; } } else { VAR_204 -> VAR_205 = VAR_206 -> VAR_207 = 0 ; VAR_208 -> VAR_209 = 0 ; VAR_210 -> VAR_211 = 0 ; } if ( ! VAR_212 -> VAR_213 ) { VAR_214 -> VAR_215 = 0 ; for ( VAR_216 = 0 ; VAR_217 < VAR_218 -> VAR_219 . VAR_220 -> VAR_221 ; VAR_222 ++ ) METHOD_19 ( VAR_223 , 1 ) ; VAR_224 -> VAR_225 = METHOD_20 ( VAR_226 ) ; if ( ! ( VAR_227 -> VAR_228 == VAR_229 || VAR_230 -> VAR_231 == VAR_232 || VAR_233 -> VAR_234 == VAR_235 ) ) { METHOD_21 ( VAR_236 -> VAR_237 , VAR_238 , "Unknownslicetype:%d.\\n" , VAR_239 -> VAR_240 ) ; return VAR_241 ; } if ( METHOD_22 ( VAR_242 ) && VAR_243 -> VAR_244 != VAR_245 ) { METHOD_23 ( VAR_246 -> VAR_247 , VAR_248 , "InterslicesinanIRAPframe.\\n" ) ; return VAR_249 ; } VAR_250 -> VAR_251 = 1 ; if ( VAR_252 -> VAR_253 . VAR_254 -> VAR_255 ) VAR_256 -> VAR_257 = METHOD_24 ( VAR_258 ) ; if ( VAR_259 -> VAR_260 . VAR_261 -> VAR_262 ) VAR_263 -> VAR_264 = METHOD_25 ( VAR_265 , 2 ) ; if ( ! METHOD_26 ( VAR_266 ) ) { TYPE_12 VAR_267 , VAR_268 ; VAR_269 -> VAR_270 = METHOD_27 ( VAR_271 , VAR_272 -> VAR_273 . VAR_274 -> VAR_275 ) ; VAR_276 = METHOD_28 ( VAR_277 -> VAR_278 . VAR_279 , VAR_280 -> VAR_281 , VAR_282 -> VAR_283 , VAR_284 -> VAR_285 ) ; if ( ! VAR_286 -> VAR_287 && VAR_288 != VAR_289 -> VAR_290 ) { METHOD_29 ( VAR_291 -> VAR_292 , VAR_293 , "IgnoringPOCchangebetweenslices:%d->%d\\n" , VAR_294 -> VAR_295 , VAR_296 ) ; if ( VAR_297 -> VAR_298 -> VAR_299 & VAR_300 ) return VAR_301 ; VAR_302 = VAR_303 -> VAR_304 ; } VAR_305 -> VAR_306 = VAR_307 ; VAR_308 -> VAR_309 = METHOD_30 ( VAR_310 ) ; VAR_311 = METHOD_31 ( VAR_312 ) ; if ( ! VAR_313 -> VAR_314 ) { VAR_315 = METHOD_32 ( VAR_316 , VAR_317 -> VAR_318 , & VAR_319 -> VAR_320 , VAR_321 -> VAR_322 . VAR_323 , 1 ) ; if ( VAR_324 < 0 ) return VAR_325 ; VAR_326 -> VAR_327 = & VAR_328 -> VAR_329 ; } else { TYPE_13 VAR_330 , VAR_331 ; if ( ! VAR_332 -> VAR_333 . VAR_334 -> VAR_335 ) { METHOD_33 ( VAR_336 -> VAR_337 , VAR_338 , "NoreflistsintheSPS.\\n" ) ; return VAR_339 ; } VAR_340 = METHOD_34 ( VAR_341 -> VAR_342 . VAR_343 -> VAR_344 ) ; VAR_345 = VAR_346 > 0 ? METHOD_35 ( VAR_347 , VAR_348 ) : 0 ; VAR_349 -> VAR_350 = & VAR_351 -> VAR_352 . VAR_353 -> VAR_354 [ VAR_355 ] ; } VAR_356 -> VAR_357 = VAR_358 - METHOD_36 ( VAR_359 ) ; VAR_360 = METHOD_37 ( VAR_361 ) ; VAR_362 = METHOD_38 ( VAR_363 , & VAR_364 -> VAR_365 , VAR_366 ) ; if ( VAR_367 < 0 ) { METHOD_39 ( VAR_368 -> VAR_369 , VAR_370 , "InvalidlongtermRPS.\\n" ) ; if ( VAR_371 -> VAR_372 -> VAR_373 & VAR_374 ) return VAR_375 ; } VAR_376 -> VAR_377 = VAR_378 - METHOD_40 ( VAR_379 ) ; if ( VAR_380 -> VAR_381 . VAR_382 -> VAR_383 ) VAR_384 -> VAR_385 = METHOD_41 ( VAR_386 ) ; else VAR_387 -> VAR_388 = 0 ; } else { VAR_389 -> VAR_390 . VAR_391 = VAR_392 ; VAR_393 -> VAR_394 = 0 ; } if ( VAR_395 -> VAR_396 && VAR_397 -> VAR_398 == 0 && VAR_399 -> VAR_400 != VAR_401 && VAR_402 -> VAR_403 != VAR_404 && VAR_405 -> VAR_406 != VAR_407 && VAR_408 -> VAR_409 != VAR_410 && VAR_411 -> VAR_412 != VAR_413 && VAR_414 -> VAR_415 != VAR_416 && VAR_417 -> VAR_418 != VAR_419 ) VAR_420 -> VAR_421 = VAR_422 -> VAR_423 ; if ( VAR_424 -> VAR_425 . VAR_426 -> VAR_427 ) { VAR_428 -> VAR_429 [ 0 ] = METHOD_42 ( VAR_430 ) ; if ( VAR_431 -> VAR_432 . VAR_433 -> VAR_434 ) { VAR_435 -> VAR_436 [ 1 ] = VAR_437 -> VAR_438 [ 2 ] = METHOD_43 ( VAR_439 ) ; } } else { VAR_440 -> VAR_441 [ 0 ] = 0 ; VAR_442 -> VAR_443 [ 1 ] = 0 ; VAR_444 -> VAR_445 [ 2 ] = 0 ; } VAR_446 -> VAR_447 [ VAR_448 ] = VAR_449 -> VAR_450 [ VAR_451 ] = 0 ; if ( VAR_452 -> VAR_453 == VAR_454 || VAR_455 -> VAR_456 == VAR_457 ) { TYPE_14 VAR_458 ; VAR_459 -> VAR_460 [ VAR_461 ] = VAR_462 -> VAR_463 . VAR_464 -> VAR_465 ; if ( VAR_466 -> VAR_467 == VAR_468 ) VAR_469 -> VAR_470 [ VAR_471 ] = VAR_472 -> VAR_473 . VAR_474 -> VAR_475 ; if ( METHOD_44 ( VAR_476 ) ) { VAR_477 -> VAR_478 [ VAR_479 ] = METHOD_45 ( VAR_480 ) + 1 ; if ( VAR_481 -> VAR_482 == VAR_483 ) VAR_484 -> VAR_485 [ VAR_486 ] = METHOD_46 ( VAR_487 ) + 1 ; } if ( VAR_488 -> VAR_489 [ VAR_490 ] > VAR_491 || VAR_492 -> VAR_493 [ VAR_494 ] > VAR_495 ) { METHOD_47 ( VAR_496 -> VAR_497 , VAR_498 , "Toomanyrefs:%d/%d.\\n" , VAR_499 -> VAR_500 [ VAR_501 ] , VAR_502 -> VAR_503 [ VAR_504 ] ) ; return VAR_505 ; } VAR_506 -> VAR_507 [ 0 ] = 0 ; VAR_508 -> VAR_509 [ 1 ] = 0 ; VAR_510 = METHOD_48 ( VAR_511 ) ; if ( ! VAR_512 ) { METHOD_49 ( VAR_513 -> VAR_514 , VAR_515 , "ZerorefsforaframewithPorBslices.\\n" ) ; return VAR_516 ; } if ( VAR_517 -> VAR_518 . VAR_519 -> VAR_520 && VAR_521 > 1 ) { VAR_522 -> VAR_523 [ 0 ] = METHOD_50 ( VAR_524 ) ; if ( VAR_525 -> VAR_526 [ 0 ] ) { for ( VAR_527 = 0 ; VAR_528 < VAR_529 -> VAR_530 [ VAR_531 ] ; VAR_532 ++ ) VAR_533 -> VAR_534 [ 0 ] [ VAR_535 ] = METHOD_51 ( VAR_536 , METHOD_52 ( VAR_537 ) ) ; } if ( VAR_538 -> VAR_539 == VAR_540 ) { VAR_541 -> VAR_542 [ 1 ] = METHOD_53 ( VAR_543 ) ; if ( VAR_544 -> VAR_545 [ 1 ] == 1 ) for ( VAR_546 = 0 ; VAR_547 < VAR_548 -> VAR_549 [ VAR_550 ] ; VAR_551 ++ ) VAR_552 -> VAR_553 [ 1 ] [ VAR_554 ] = METHOD_54 ( VAR_555 , METHOD_55 ( VAR_556 ) ) ; } } if ( VAR_557 -> VAR_558 == VAR_559 ) VAR_560 -> VAR_561 = METHOD_56 ( VAR_562 ) ; if ( VAR_563 -> VAR_564 . VAR_565 -> VAR_566 ) VAR_567 -> VAR_568 = METHOD_57 ( VAR_569 ) ; else VAR_570 -> VAR_571 = 0 ; VAR_572 -> VAR_573 = 0 ; if ( VAR_574 -> VAR_575 ) { VAR_576 -> VAR_577 = VAR_578 ; if ( VAR_579 -> VAR_580 == VAR_581 ) VAR_582 -> VAR_583 = ! METHOD_58 ( VAR_584 ) ; if ( VAR_585 -> VAR_586 [ VAR_587 -> VAR_588 ] > 1 ) { VAR_589 -> VAR_590 = METHOD_59 ( VAR_591 ) ; if ( VAR_592 -> VAR_593 >= VAR_594 -> VAR_595 [ VAR_596 -> VAR_597 ] ) { METHOD_60 ( VAR_598 -> VAR_599 , VAR_600 , "Invalidcollocated_ref_idx:%d.\\n" , VAR_601 -> VAR_602 ) ; return VAR_603 ; } } } if ( ( VAR_604 -> VAR_605 . VAR_606 -> VAR_607 && VAR_608 -> VAR_609 == VAR_610 ) || ( VAR_611 -> VAR_612 . VAR_613 -> VAR_614 && VAR_615 -> VAR_616 == VAR_617 ) ) { TYPE_15 VAR_618 = METHOD_61 ( VAR_619 , VAR_620 ) ; if ( VAR_621 < 0 ) return VAR_622 ; } VAR_623 -> VAR_624 = 5 - METHOD_62 ( VAR_625 ) ; if ( VAR_626 -> VAR_627 < 1 || VAR_628 -> VAR_629 > 5 ) { METHOD_63 ( VAR_630 -> VAR_631 , VAR_632 , "InvalidnumberofmergingMVPcandidates:%d.\\n" , VAR_633 -> VAR_634 ) ; return VAR_635 ; } } VAR_636 -> VAR_637 = METHOD_64 ( VAR_638 ) ; if ( VAR_639 -> VAR_640 . VAR_641 -> VAR_642 ) { VAR_643 -> VAR_644 = METHOD_65 ( VAR_645 ) ; VAR_646 -> VAR_647 = METHOD_66 ( VAR_648 ) ; } else { VAR_649 -> VAR_650 = 0 ; VAR_651 -> VAR_652 = 0 ; } if ( VAR_653 -> VAR_654 . VAR_655 -> VAR_656 ) VAR_657 -> VAR_658 = METHOD_67 ( VAR_659 ) ; else VAR_660 -> VAR_661 = 0 ; if ( VAR_662 -> VAR_663 . VAR_664 -> VAR_665 ) { TYPE_16 VAR_666 = 0 ; if ( VAR_667 -> VAR_668 . VAR_669 -> VAR_670 ) VAR_671 = METHOD_68 ( VAR_672 ) ; if ( VAR_673 ) { VAR_674 -> VAR_675 = METHOD_69 ( VAR_676 ) ; if ( ! VAR_677 -> VAR_678 ) { TYPE_17 VAR_679 = METHOD_70 ( VAR_680 ) ; TYPE_18 VAR_681 = METHOD_71 ( VAR_682 ) ; if ( VAR_683 < - 6 || VAR_684 > 6 || VAR_685 < - 6 || VAR_686 > 6 ) { METHOD_72 ( VAR_687 -> VAR_688 , VAR_689 , "Invaliddeblockfilteroffsets:%d,%d\\n" , VAR_690 , VAR_691 ) ; return VAR_692 ; } VAR_693 -> VAR_694 = VAR_695 * 2 ; VAR_696 -> VAR_697 = VAR_698 * 2 ; } } else { VAR_699 -> VAR_700 = VAR_701 -> VAR_702 . VAR_703 -> VAR_704 ; VAR_705 -> VAR_706 = VAR_707 -> VAR_708 . VAR_709 -> VAR_710 ; VAR_711 -> VAR_712 = VAR_713 -> VAR_714 . VAR_715 -> VAR_716 ; } } else { VAR_717 -> VAR_718 = 0 ; VAR_719 -> VAR_720 = 0 ; VAR_721 -> VAR_722 = 0 ; } if ( VAR_723 -> VAR_724 . VAR_725 -> VAR_726 && ( VAR_727 -> VAR_728 [ 0 ] || VAR_729 -> VAR_730 [ 1 ] || ! VAR_731 -> VAR_732 ) ) { VAR_733 -> VAR_734 = METHOD_73 ( VAR_735 ) ; } else { VAR_736 -> VAR_737 = VAR_738 -> VAR_739 . VAR_740 -> VAR_741 ; } } else if ( ! VAR_742 -> VAR_743 ) { METHOD_74 ( VAR_744 -> VAR_745 , VAR_746 , "Independentslicesegmentmissing.\\n" ) ; return VAR_747 ; } VAR_748 -> VAR_749 = 0 ; if ( VAR_750 -> VAR_751 . VAR_752 -> VAR_753 || VAR_754 -> VAR_755 . VAR_756 -> VAR_757 ) { unsigned VAR_758 = METHOD_75 ( VAR_759 ) ; if ( VAR_760 > METHOD_76 ( VAR_761 ) ) { METHOD_77 ( VAR_762 -> VAR_763 , VAR_764 , "num_entry_point_offsets%disinvalid\\n" , VAR_765 ) ; return VAR_766 ; } VAR_767 -> VAR_768 = VAR_769 ; if ( VAR_770 -> VAR_771 > 0 ) { TYPE_19 VAR_772 = METHOD_78 ( VAR_773 ) + 1 ; if ( VAR_774 < 1 || VAR_775 > 32 ) { VAR_776 -> VAR_777 = 0 ; METHOD_79 ( VAR_778 -> VAR_779 , VAR_780 , "offset_len%disinvalid\\n" , VAR_781 ) ; return VAR_782 ; } METHOD_80 ( & VAR_783 -> VAR_784 ) ; METHOD_81 ( & VAR_785 -> VAR_786 ) ; METHOD_82 ( & VAR_787 -> VAR_788 ) ; VAR_789 -> VAR_790 = METHOD_83 ( VAR_791 -> VAR_792 , sizeof ( unsigned ) ) ; VAR_793 -> VAR_794 = METHOD_84 ( VAR_795 -> VAR_796 , sizeof ( TYPE_20 ) ) ; VAR_797 -> VAR_798 = METHOD_85 ( VAR_799 -> VAR_800 , sizeof ( TYPE_21 ) ) ; if ( ! VAR_801 -> VAR_802 || ! VAR_803 -> VAR_804 || ! VAR_805 -> VAR_806 ) { VAR_807 -> VAR_808 = 0 ; METHOD_86 ( VAR_809 -> VAR_810 , VAR_811 , "Failedtoallocatememory\\n" ) ; return METHOD_87 ( VAR_812 ) ; } for ( VAR_813 = 0 ; VAR_814 < VAR_815 -> VAR_816 ; VAR_817 ++ ) { unsigned VAR_818 = METHOD_88 ( VAR_819 , VAR_820 ) ; VAR_821 -> VAR_822 [ VAR_823 ] = VAR_824 + 1 ; } if ( VAR_825 -> VAR_826 > 1 && ( VAR_827 -> VAR_828 . VAR_829 -> VAR_830 > 1 || VAR_831 -> VAR_832 . VAR_833 -> VAR_834 > 1 ) ) { VAR_835 -> VAR_836 = 0 ; VAR_837 -> VAR_838 = 1 ; } else VAR_839 -> VAR_840 = 0 ; } else VAR_841 -> VAR_842 = 0 ; } if ( VAR_843 -> VAR_844 . VAR_845 -> VAR_846 ) { unsigned TYPE_22 VAR_847 = METHOD_89 ( VAR_848 ) ; if ( VAR_849 * 8LL > METHOD_90 ( VAR_850 ) ) { METHOD_91 ( VAR_851 -> VAR_852 , VAR_853 , "toomanyslice_header_extension_data_bytes\\n" ) ; return VAR_854 ; } for ( VAR_855 = 0 ; VAR_856 < VAR_857 ; VAR_858 ++ ) METHOD_92 ( VAR_859 , 8 ) ; } VAR_860 -> VAR_861 = 26U + VAR_862 -> VAR_863 . VAR_864 -> VAR_865 + VAR_866 -> VAR_867 ; if ( VAR_868 -> VAR_869 > 51 || VAR_870 -> VAR_871 < - VAR_872 -> VAR_873 . VAR_874 -> VAR_875 ) { METHOD_93 ( VAR_876 -> VAR_877 , VAR_878 , "Theslice_qp%disoutsidethevalidrange" "[%d,51].\\n" , VAR_879 -> VAR_880 , - VAR_881 -> VAR_882 . VAR_883 -> VAR_884 ) ; return VAR_885 ; } VAR_886 -> VAR_887 = VAR_888 -> VAR_889 ; if ( ! VAR_890 -> VAR_891 . VAR_892 && VAR_893 -> VAR_894 . VAR_895 ) { METHOD_94 ( VAR_896 -> VAR_897 , VAR_898 , "Impossibleslicesegment.\\n" ) ; return VAR_899 ; } if ( METHOD_95 ( VAR_900 ) < 0 ) { METHOD_96 ( VAR_901 -> VAR_902 , VAR_903 , "Overreadsliceheaderby%dbits\\n" , - METHOD_97 ( VAR_904 ) ) ; return VAR_905 ; } VAR_906 -> VAR_907 -> VAR_908 = ! VAR_909 -> VAR_910 . VAR_911 ; if ( ! VAR_912 -> VAR_913 . VAR_914 -> VAR_915 ) VAR_916 -> VAR_917 -> VAR_918 = VAR_919 -> VAR_920 . VAR_921 ; VAR_922 -> VAR_923 = 1 ; VAR_924 -> VAR_925 -> VAR_926 . VAR_927 = 0 ; VAR_928 -> VAR_929 -> VAR_930 . VAR_931 = 0 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * TYPE_2 ) { VAR_0 * VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = & TYPE_5 -> VAR_4 ; TYPE_6 VAR_5 = 0 ; const TYPE_7 * TYPE_8 ; TYPE_9 VAR_6 = ( TYPE_10 ) VAR_7 ; VAR_8 = TYPE_11 -> VAR_9 ; METHOD_1 ( TYPE_12 -> VAR_10 , 0 , sizeof ( TYPE_13 -> VAR_11 ) ) ; TYPE_14 -> VAR_12 = 0 ; TYPE_15 -> VAR_13 = 1 ; TYPE_16 -> VAR_14 = TYPE_17 -> VAR_15 ; if ( TYPE_18 -> VAR_16 != VAR_17 ) { TYPE_19 -> VAR_18 <<= 1 ; if ( TYPE_20 -> VAR_19 == VAR_20 ) { VAR_21 = TYPE_21 -> VAR_22 ; } } do { TYPE_22 VAR_23 , VAR_24 ;  TYPE_23 VAR_25 = 0 ;  TYPE_24 VAR_26 = 0 ; TYPE_25 * VAR_27 ; TYPE_26 * VAR_28 ; TYPE_27 VAR_29 ; METHOD_2 ( TYPE_28 -> VAR_30 , TYPE_29 -> VAR_31 ) ; if ( TYPE_30 -> VAR_32 == VAR_33 )  METHOD_3 ( TYPE_31 ) ;  else  METHOD_4 ( TYPE_32 ) ;  METHOD_5 ( TYPE_33 -> VAR_34 , TYPE_34 -> VAR_35 ) ; VAR_36 = VAR_37 + ( TYPE_35 -> VAR_38 << 4 ) ; VAR_39 = ( TYPE_36 -> VAR_40 << 4 ) * TYPE_37 -> VAR_41 ; VAR_42 = VAR_43 -> VAR_44 + VAR_45 + VAR_46 ; if ( TYPE_38 -> VAR_47 == 0 ) { TYPE_39 VAR_48 , VAR_49 , VAR_50 ; TYPE_40 VAR_51 = ( TYPE_41 -> VAR_52 ) ; if ( TYPE_42 -> VAR_53 == VAR_54 ) { TYPE_43 = & TYPE_44 -> VAR_55 [ VAR_56 METHOD_6 ; } else { TYPE_45 = & TYPE_46 -> VAR_57 [ VAR_58 METHOD_7 ; } VAR_59 = TYPE_47 -> VAR_60 ; VAR_61 = VAR_62 + ( TYPE_48 -> VAR_63 << 4 ) ; VAR_64 = ( TYPE_49 -> VAR_65 << 4 ) ; TYPE_50 -> VAR_66 . VAR_67 = VAR_68 -> VAR_69 + VAR_70 * VAR_71 + VAR_72 ; VAR_73 = VAR_74 >> 1 ; TYPE_51 -> VAR_75 . VAR_76 = VAR_77 -> VAR_78 + ( VAR_79 >> 1 ) * VAR_80 + ( VAR_81 >> 1 ) ; TYPE_52 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 + ( VAR_86 >> 1 ) * VAR_87 + ( VAR_88 >> 1 ) ; TYPE_53 TYPE_54 -> VAR_89 ( TYPE_55 ) ; } for ( VAR_90 = 0 ; VAR_91 < VAR_92 ; ++ VAR_93 ) { if ( ( TYPE_56 -> VAR_94 & ( 1 << ( VAR_95 - 1 - VAR_96 ) ) ) != 0 ) { VAR_97 = TYPE_57 -> METHOD_8 ( TYPE_58 , VAR_98 , TYPE_59 -> VAR_99 , TYPE_60 -> VAR_100 , VAR_101 , 0 ) ; if ( ( TYPE_61 ) VAR_102 != VAR_103 ) { return VAR_104 ; } VAR_105 = VAR_106 [ VAR_107 METHOD_9 ; if ( TYPE_62 -> VAR_108 == 0 ) VAR_109 = VAR_110 [ VAR_111 METHOD_10 ; else VAR_112 = VAR_113 [ VAR_114 METHOD_11 ; METHOD_12 ( VAR_115 , TYPE_63 -> VAR_116 , TYPE_64 -> VAR_117 ) ; PROFILE_DISABLE_IDCT_IF0 { TYPE_65 VAR_118 ; if ( 1 == ( TYPE_66 -> VAR_119 | TYPE_67 -> VAR_120 ) ) VAR_121 = 0 ; else VAR_122 = 1 ; if ( 0 == TYPE_68 -> VAR_123 ) { VAR_124 = VAR_125 + VAR_126 * TYPE_69 -> VAR_127 + VAR_128 ; VAR_129 = TYPE_70 -> VAR_130 << TYPE_71 -> VAR_131 ; } else { VAR_132 = ( TYPE_72 * ) VAR_133 ; VAR_134 = 8 ; } TYPE_73 -> VAR_135 [ VAR_136 * 2 + TYPE_74 -> VAR_137 METHOD_13 ( VAR_138 , TYPE_75 -> VAR_139 , VAR_140 , VAR_141 + VAR_142 * TYPE_76 -> VAR_143 + VAR_144 , 8 , VAR_145 , TYPE_77 -> VAR_146 << TYPE_78 -> VAR_147 , ~ TYPE_79 -> VAR_148 , ~ TYPE_80 -> VAR_149 ) ; } } } VAR_150 >>= 1 ; VAR_151 >>= 2 ; if ( ( TYPE_81 -> VAR_152 & 0x02 ) != 0 ) { VAR_153 = VAR_154 -> VAR_155 + VAR_156 + VAR_157 ; VAR_158 = TYPE_82 -> METHOD_14 ( TYPE_83 , VAR_159 , TYPE_84 -> VAR_160 , TYPE_85 -> VAR_161 , VAR_162 , 0 ) ; if ( ( TYPE_86 ) VAR_163 != VAR_164 ) { return VAR_165 ; } METHOD_15 ( VAR_166 , TYPE_87 -> VAR_167 , TYPE_88 -> VAR_168 ) ; PROFILE_DISABLE_IDCT_IF0 { TYPE_89 VAR_169 ; if ( 1 == ( TYPE_90 -> VAR_170 | TYPE_91 -> VAR_171 ) ) VAR_172 = 0 ; else VAR_173 = 1 ; if ( 0 == TYPE_92 -> VAR_174 ) { VAR_175 = VAR_176 ; VAR_177 = TYPE_93 -> VAR_178 >> 1 ; } else { VAR_179 = ( TYPE_94 * ) VAR_180 ; VAR_181 = 8 ; } TYPE_95 -> VAR_182 [ VAR_183 * 2 + TYPE_96 -> VAR_184 METHOD_16 ( VAR_185 , TYPE_97 -> VAR_186 , VAR_187 , VAR_188 , 8 , VAR_189 , TYPE_98 -> VAR_190 >> 1 , ~ TYPE_99 -> VAR_191 , ~ TYPE_100 -> VAR_192 ) ; } } if ( ( TYPE_101 -> VAR_193 & 0x01 ) != 0 ) { VAR_194 = VAR_195 -> VAR_196 + VAR_197 + VAR_198 ; VAR_199 = TYPE_102 -> METHOD_17 ( TYPE_103 , VAR_200 , TYPE_104 -> VAR_201 , TYPE_105 -> VAR_202 , VAR_203 , 0 ) ; if ( ( TYPE_106 ) VAR_204 != VAR_205 ) { return VAR_206 ; } METHOD_18 ( VAR_207 , TYPE_107 -> VAR_208 , TYPE_108 -> VAR_209 ) ; PROFILE_DISABLE_IDCT_IF0 { TYPE_109 VAR_210 ; if ( 1 == ( TYPE_110 -> VAR_211 | TYPE_111 -> VAR_212 ) ) VAR_213 = 0 ; else VAR_214 = 1 ; if ( 0 == TYPE_112 -> VAR_215 ) { VAR_216 = VAR_217 ; VAR_218 = TYPE_113 -> VAR_219 >> 1 ; } else { VAR_220 = ( TYPE_114 * ) VAR_221 ; VAR_222 = 8 ; } TYPE_115 -> VAR_223 [ VAR_224 * 2 + TYPE_116 -> VAR_225 METHOD_19 ( VAR_226 , TYPE_117 -> VAR_227 , VAR_228 , VAR_229 , 8 , VAR_230 , TYPE_118 -> VAR_231 >> 1 , ~ TYPE_119 -> VAR_232 , ~ TYPE_120 -> VAR_233 ) ; } } TYPE_121 -> VAR_234 -- ; TYPE_122 -> VAR_235 = 0 ; TYPE_123 -> VAR_236 ++ ; if ( TYPE_124 -> VAR_237 . VAR_238 > TYPE_125 -> VAR_239 . VAR_240 ) { return VAR_241 ; } else if ( TYPE_126 -> VAR_242 == TYPE_127 -> VAR_243 ) { TYPE_128 -> VAR_244 = 0 ; TYPE_129 -> VAR_245 ++ ; } } while ( TYPE_130 -> VAR_246 != 0 && METHOD_20 ( & TYPE_131 -> VAR_247 , 23 ) != 0x0 ) ; return VAR_248 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = & VAR_4 -> VAR_5 ; if ( VAR_6 == VAR_7 ) {  const TYPE_5 * const VAR_8 =   & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 [ 0 ] ] . VAR_13 ;  if ( ! METHOD_1 ( VAR_14 , VAR_15 ) ) METHOD_2 ( & VAR_16 -> VAR_17 , VAR_18 , "Incorrectbufferdimensions" ) ; else METHOD_3 ( VAR_19 , VAR_20 ) ; } else { METHOD_4 ( & VAR_21 -> VAR_22 , VAR_23 , "Invalidreferenceframe" ) ; } return VAR_24 -> VAR_25 . VAR_26 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; VAR_4 * VAR_5 ;  TYPE_5 VAR_6 ;  VAR_7 * VAR_8 ; METHOD_1 ( VAR_9 >= 0 ) ; if ( METHOD_2 ( VAR_10 ) > 0 && METHOD_3 ( VAR_11 ) > 0 ) { METHOD_4 ( VAR_12 -> VAR_13 ) ; VAR_14 = METHOD_5 ( VAR_15 ) ; for ( VAR_16 = VAR_17 -> VAR_18 , VAR_19 = VAR_20 -> VAR_21 [ 0 ] ; VAR_22 > 0 ; -- VAR_23 , VAR_24 += VAR_25 ) { for ( VAR_26 = VAR_27 -> VAR_28 , VAR_29 = VAR_30 ; VAR_31 > 0 ; -- VAR_32 , ++ VAR_33 ) { * VAR_34 = METHOD_6 ( * VAR_35 , VAR_36 ) ; } } } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 = 0UL ; if ( VAR_2 -> VAR_3 & VAR_4 ) VAR_5 = METHOD_1 ( ) ;  VAR_6 -> METHOD_2 = METHOD_3 ( VAR_7 ) ;  if ( METHOD_4 ( ) ) { VAR_8 -> METHOD_5 = VAR_9 -> METHOD_6 ; VAR_10 -> VAR_11 = VAR_12 ; } else { VAR_13 -> METHOD_7 = METHOD_8 ( VAR_14 ) ; VAR_15 -> VAR_16 = VAR_17 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * * VAR_2 ) { switch ( VAR_3 ) { case 'B' : case 'b' : return sizeof ( TYPE_4 ) ; case 'H' : case 'h' : return sizeof ( TYPE_5 ) ; case 'L' : case 'l' : return sizeof ( TYPE_6 ) ; case 'T' : return sizeof ( TYPE_7 ) ; case 'f' : return sizeof ( TYPE_8 ) ; case 'd' : return sizeof ( TYPE_9 ) ; case 'x' : return 1 ;  case 'c' : return METHOD_1 ( VAR_4 , VAR_5 , 1 ) ;  case 'i' : case 'I' : {  TYPE_10 VAR_6 = METHOD_2 ( VAR_7 , VAR_8 , sizeof ( TYPE_11 ) ) ;  if ( VAR_9 > VAR_10 ) METHOD_3 ( VAR_11 , "integralsize%dislargerthanlimitof%d" , VAR_12 , VAR_13 ) ; return VAR_14 ; } default : return 0 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 VAR_7 = VAR_8 -> VAR_9 . VAR_10 ; unsigned TYPE_7 * VAR_11 = VAR_12 ; unsigned TYPE_8 * VAR_13 = VAR_14 , * VAR_15 = VAR_16 , * VAR_17 = VAR_18 , * VAR_19 = VAR_20 ; TYPE_9 VAR_21 , VAR_22 , VAR_23 , VAR_24 ; TYPE_10 VAR_25 ; TYPE_11 VAR_26 ; TYPE_12 VAR_27 , VAR_28 ; TYPE_13 VAR_29 = VAR_30 -> VAR_31 ; TYPE_14 VAR_32 ; TYPE_15 VAR_33 ; TYPE_16 VAR_34 , VAR_35 ; TYPE_17 VAR_36 = VAR_37 -> VAR_38 ; TYPE_18 VAR_39 = 1 , VAR_40 ; TYPE_19 VAR_41 ; VAR_42 = METHOD_1 ( VAR_43 ) ; VAR_44 = METHOD_2 ( VAR_45 , VAR_46 ? 4 : 3 , VAR_47 , "gtStripSeparate" ) ; if ( VAR_48 == 0 ) { return ( 0 ) ; } VAR_49 = METHOD_3 ( VAR_50 ) ; if ( VAR_51 & VAR_52 ) { VAR_53 = VAR_54 - 1 ; VAR_55 = - ( TYPE_20 ) ( VAR_56 + VAR_57 ) ; } else { VAR_58 = 0 ; VAR_59 = - ( TYPE_21 ) ( VAR_60 - VAR_61 ) ; } switch ( VAR_62 -> VAR_63 ) { case VAR_64 : case VAR_65 : case VAR_66 : VAR_67 = 1 ; break ; default : VAR_68 = 3 ; break ; } METHOD_4 ( VAR_69 , VAR_70 , & VAR_71 ) ; VAR_72 = METHOD_5 ( VAR_73 ) ; VAR_74 = ( VAR_75 < VAR_76 ? VAR_77 - VAR_78 : 0 ) ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 ; VAR_82 += VAR_83 ) {  VAR_84 = VAR_85 - ( VAR_86 + VAR_87 -> VAR_88 ) % VAR_89 ;  VAR_90 = ( VAR_91 + VAR_92 > VAR_93 ? VAR_94 - VAR_95 : VAR_96 ) ; VAR_97 = VAR_98 + VAR_99 -> VAR_100 ;  if ( VAR_101 == VAR_102 )  { if ( METHOD_6 ( VAR_103 , METHOD_7 ( VAR_104 , VAR_105 , 0 ) , ( TYPE_22 * * ) & VAR_106 , VAR_107 ,  ( ( VAR_108 + VAR_109 -> VAR_110 ) % VAR_111 + VAR_112 ) * VAR_113 ) == ( TYPE_23 ) ( - 1 )  && ( VAR_114 == VAR_115 || VAR_116 -> VAR_117 ) ) { VAR_118 = 0 ; break ; } VAR_119 = VAR_120 ; if ( VAR_121 == 1 ) { VAR_122 = VAR_123 = VAR_124 ; VAR_125 = ( VAR_126 ? ( VAR_127 + 3 * VAR_128 ) : VAR_129 ) ; } else { VAR_130 = VAR_131 + VAR_132 ; VAR_133 = VAR_134 + VAR_135 ; VAR_136 = ( VAR_137 ? ( VAR_138 + VAR_139 ) : VAR_140 ) ; } } else if ( METHOD_8 ( VAR_141 , METHOD_9 ( VAR_142 , VAR_143 , 0 ) ,  VAR_144 , ( ( VAR_145 + VAR_146 -> VAR_147 ) % VAR_148 + VAR_149 ) * VAR_150 ) == ( TYPE_24 ) ( - 1 )  && VAR_151 -> VAR_152 ) { VAR_153 = 0 ; break ; } if ( VAR_154 > 1 && METHOD_10 ( VAR_155 , METHOD_11 ( VAR_156 , VAR_157 , 1 ) ,  VAR_158 , ( ( VAR_159 + VAR_160 -> VAR_161 ) % VAR_162 + VAR_163 ) * VAR_164 ) == ( TYPE_25 ) ( - 1 )  && VAR_165 -> VAR_166 ) { VAR_167 = 0 ; break ; } if ( VAR_168 > 1 && METHOD_12 ( VAR_169 , METHOD_13 ( VAR_170 , VAR_171 , 2 ) ,  VAR_172 , ( ( VAR_173 + VAR_174 -> VAR_175 ) % VAR_176 + VAR_177 ) * VAR_178 ) == ( TYPE_26 ) ( - 1 )  && VAR_179 -> VAR_180 ) { VAR_181 = 0 ; break ; } if ( VAR_182 ) { if ( METHOD_14 ( VAR_183 , METHOD_15 ( VAR_184 , VAR_185 , VAR_186 ) ,  VAR_187 , ( ( VAR_188 + VAR_189 -> VAR_190 ) % VAR_191 + VAR_192 ) * VAR_193 ) == ( TYPE_27 ) ( - 1 )  && VAR_194 -> VAR_195 ) { VAR_196 = 0 ; break ; } } VAR_197 = ( ( VAR_198 + VAR_199 -> VAR_200 ) % VAR_201 ) * VAR_202 + ( ( TYPE_28 ) VAR_203 -> VAR_204 * VAR_205 -> VAR_206 ) ; ( * VAR_207 ) ( VAR_208 , VAR_209 + VAR_210 * VAR_211 , 0 , VAR_212 , VAR_213 , VAR_214 , VAR_215 , VAR_216 , VAR_217 + VAR_218 , VAR_219 + VAR_220 , VAR_221 + VAR_222 , ( VAR_223 ? ( VAR_224 + VAR_225 ) : VAR_226 ) ) ; VAR_227 += ( ( VAR_228 & VAR_229 ) ? - ( TYPE_29 ) VAR_230 : ( TYPE_30 ) VAR_231 ) ; } if ( VAR_232 & VAR_233 ) { TYPE_31 VAR_234 ; for ( VAR_235 = 0 ; VAR_236 < VAR_237 ; VAR_238 ++ ) { TYPE_32 * VAR_239 = VAR_240 + ( VAR_241 * VAR_242 ) ; TYPE_33 * VAR_243 = VAR_244 + VAR_245 - 1 ; while ( VAR_246 < VAR_247 ) { TYPE_34 VAR_248 = * VAR_249 ; * VAR_250 = * VAR_251 ; * VAR_252 = VAR_253 ; VAR_254 ++ ; VAR_255 -- ; } } } METHOD_16 ( VAR_256 ) ; return ( VAR_257 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 , VAR_2 ; TYPE_3 * VAR_3 ; switch ( METHOD_1 ( VAR_4 ) ) { case VAR_5 : if ( METHOD_2 ( METHOD_3 ( VAR_6 , 0 ) ) == VAR_7 ) return 0 ; else return METHOD_4 ( METHOD_5 ( VAR_8 , 0 ) ) ; case VAR_9 : VAR_10 = 0 ; for ( VAR_11 = 0 ; VAR_12 < METHOD_6 ( VAR_13 ) ; VAR_14 ++ ) { VAR_15 = METHOD_7 ( VAR_16 , VAR_17 ) ; if ( METHOD_8 ( VAR_18 ) == VAR_19 ) VAR_20 += METHOD_9 ( VAR_21 ) ; } return VAR_22 ; case VAR_23 : return METHOD_10 ( METHOD_11 ( VAR_24 , 0 ) ) ; case VAR_25 : return 1 ; case VAR_26 : return METHOD_12 ( VAR_27 ) / 2 ; case VAR_28 : if ( METHOD_13 ( VAR_29 ) == 1 ) return METHOD_14 ( METHOD_15 ( VAR_30 , 0 ) ) ; else { VAR_31 = 2 ; VAR_32 = 0 ; if ( METHOD_16 ( METHOD_17 ( VAR_33 , 1 ) ) == VAR_34 ) VAR_35 += 2 ; for ( ; VAR_36 < ( METHOD_18 ( VAR_37 ) - 1 ) ; VAR_38 ++ ) VAR_39 += METHOD_19 ( METHOD_20 ( VAR_40 , VAR_41 ) ) ; return VAR_42 ; } default : { TYPE_4 VAR_43 [ 128 ] ; METHOD_21 ( VAR_44 , "Non-statementfound:%d%d" , METHOD_22 ( VAR_45 ) , METHOD_23 ( VAR_46 ) ) ; METHOD_24 ( VAR_47 ) ; } }  METHOD_25 ( 0 ) ;  return 0 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 VAR_2 )  { if ( VAR_3 -> VAR_4 < METHOD_1 ( VAR_5 -> VAR_6 ) - 2 )   { VAR_7 -> VAR_8 [ VAR_9 -> VAR_10 ++ ] = ( VAR_11 >> 8 ) ;   VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = VAR_16 ;   } ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { struct STRUCT_OR_UNION_1 VAR_4 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_5 ; enum VAR_6 VAR_7 ; TYPE_5 VAR_8 ; if ( VAR_9 & ~ ( VAR_10 | VAR_11 | VAR_12 | VAR_13 | VAR_14 | VAR_15 ) ) return - VAR_16 ;  if ( VAR_17 == - 1 )  VAR_18 = VAR_19 ; else if ( VAR_20 < 0 ) { VAR_21 = VAR_22 ; STRUCT_OR_UNION_4 = METHOD_1 ( - VAR_23 ) ; } else if ( VAR_24 == 0 ) { VAR_25 = VAR_26 ; STRUCT_OR_UNION_5 = METHOD_2 ( VAR_27 , VAR_28 ) ; } else { VAR_29 = VAR_30 ; STRUCT_OR_UNION_6 = METHOD_3 ( VAR_31 ) ; } VAR_32 . VAR_33 = VAR_34 ; VAR_35 . VAR_36 = STRUCT_OR_UNION_7 ; VAR_37 . VAR_38 = VAR_39 | VAR_40 ; VAR_41 . VAR_42 = VAR_43 ; VAR_44 . VAR_45 = 0 ; VAR_46 . VAR_47 = VAR_48 ; VAR_49 = METHOD_4 ( & VAR_50 ) ; METHOD_5 ( STRUCT_OR_UNION_8 ) ; if ( VAR_51 > 0 && VAR_52 && METHOD_6 ( VAR_53 . VAR_54 , VAR_55 ) ) VAR_56 = - VAR_57 ; return VAR_58 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_5 * VAR_2 = METHOD_1 ( STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_3 = STRUCT_OR_UNION_8 -> VAR_4 ; struct STRUCT_OR_UNION_9 * VAR_5 = VAR_6 ; TYPE_2 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_10 * TYPE_3 ; TYPE_4 VAR_9 = 0 ; struct STRUCT_OR_UNION_11 VAR_10 ; TYPE_5 VAR_11 = VAR_12 ; TYPE_6 VAR_13 ; if ( VAR_14 == VAR_15 -> VAR_16 ) VAR_17 -> VAR_18 = & VAR_19 ; METHOD_2 ( ) ;  VAR_20 = METHOD_3 ( STRUCT_OR_UNION_12 , VAR_21 , VAR_22 -> VAR_23 ) ;  if ( VAR_24 < 0 ) return VAR_25 ; VAR_26 = - VAR_27 ; if ( VAR_28 -> VAR_29 & VAR_30 ) goto VAR_31 ; if ( VAR_32 -> VAR_33 ) { VAR_34 = VAR_35 -> VAR_36 == VAR_37 ? - VAR_38 : - VAR_39 ; goto VAR_40 ; } else { VAR_41 = - VAR_42 ; VAR_43 = METHOD_4 ( VAR_44 ) ; if ( ! VAR_45 ) goto VAR_46 ; } if ( VAR_47 -> VAR_48 & VAR_49 ) goto VAR_50 ; while ( VAR_51 < VAR_52 ) { VAR_53 = VAR_54 - VAR_55 ; if ( VAR_56 > ( ( VAR_57 -> VAR_58 >> 1 ) - 64 ) ) VAR_59 = ( VAR_60 -> VAR_61 >> 1 ) - 64 ; if ( VAR_62 > VAR_63 ) VAR_64 = VAR_65 ; TYPE_7 = METHOD_5 ( VAR_66 , VAR_67 , VAR_68 -> VAR_69 & VAR_70 , & VAR_71 ) ; if ( TYPE_8 == VAR_72 ) goto VAR_73 ; VAR_74 = min_t ( TYPE_9 , VAR_75 , VAR_76 ( TYPE_10 ) ) ; VAR_77 = METHOD_6 ( VAR_78 -> VAR_79 , TYPE_11 , ! VAR_80 ) ; if ( VAR_81 < 0 ) { METHOD_7 ( TYPE_12 ) ; goto VAR_82 ; } VAR_83 = VAR_84 + 1 ; VAR_85 = VAR_86 ; VAR_87 = METHOD_8 ( METHOD_9 ( TYPE_13 , VAR_88 ) , VAR_89 -> VAR_90 , VAR_91 ) ; if ( VAR_92 ) { METHOD_10 ( TYPE_14 ) ; goto VAR_93 ; } METHOD_11 ( VAR_94 ) ; if ( METHOD_12 ( VAR_95 , VAR_96 ) || ( VAR_97 -> VAR_98 & VAR_99 ) ) goto VAR_100 ; METHOD_13 ( TYPE_15 , STRUCT_OR_UNION_13 , VAR_101 ) ; METHOD_14 ( & VAR_102 -> VAR_103 , TYPE_16 ) ; if ( VAR_104 > METHOD_15 ( VAR_105 ) -> VAR_106 ) METHOD_16 ( VAR_107 ) -> VAR_108 = VAR_109 ; METHOD_17 ( VAR_110 ) ; VAR_111 -> METHOD_18 ( VAR_112 , VAR_113 ) ; VAR_114 += VAR_115 ; } METHOD_19 ( VAR_116 -> VAR_117 ) ; VAR_118 -> VAR_119 = VAR_120 ; return VAR_121 ; VAR_122 : METHOD_20 ( VAR_123 ) ; METHOD_21 ( TYPE_17 ) ; VAR_124 : if ( VAR_125 == 0 && ! ( VAR_126 -> VAR_127 & VAR_128 ) ) METHOD_22 ( VAR_129 , VAR_130 , 0 ) ; VAR_131 = - VAR_132 ; VAR_133 : METHOD_23 ( VAR_134 -> VAR_135 ) ; VAR_136 -> VAR_137 = VAR_138 ; return VAR_139 ? : VAR_140 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = METHOD_1 ( VAR_3 , VAR_4 ) ;  if ( VAR_5 & ( 1 << ( VAR_6 - 1 ) ) )  return VAR_7 - ( 1 << VAR_8 ) ; else return VAR_9 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; for ( VAR_3 = 0 ; VAR_4 < 3 ; ++ VAR_5 ) { unsigned TYPE_4 * VAR_6 = VAR_7 -> VAR_8 [ VAR_9 ] ; const TYPE_5 VAR_10 = VAR_11 -> VAR_12 [ VAR_13 ] ;  const TYPE_6 VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ;  const TYPE_7 VAR_17 = METHOD_2 ( VAR_18 , VAR_19 ) ; TYPE_8 VAR_20 ; for ( VAR_21 = 0 ; VAR_22 < VAR_23 ; ++ VAR_24 ) {  if ( METHOD_3 ( VAR_25 , 1 , VAR_26 , VAR_27 ) != VAR_28 )  return 0 ; VAR_29 += VAR_30 ; } } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 [ VAR_6 ] ; TYPE_5 VAR_7 [ VAR_8 ] ; TYPE_6 * VAR_9 = VAR_10 ;  TYPE_7 VAR_11 ;  TYPE_8 VAR_12 ; TYPE_9 VAR_13 ; TYPE_10 VAR_14 ; TYPE_11 VAR_15 ;  if ( VAR_16 -> VAR_17 < sizeof ( struct STRUCT_OR_UNION_2 ) + 2 ) {  METHOD_1 ( "l2tp:incorrecthiddenavpreceived(type%hu):" "lengthtoosmall(%hubytes)\\n" ,  METHOD_2 ( VAR_18 -> VAR_19 ) , VAR_20 -> VAR_21 ) ;  return - 1 ; }  VAR_22 = VAR_23 -> VAR_24 - sizeof ( struct STRUCT_OR_UNION_3 ) ;  METHOD_3 ( & VAR_25 ) ; METHOD_4 ( & VAR_26 , & VAR_27 -> VAR_28 , sizeof ( VAR_29 -> VAR_30 ) ) ; METHOD_5 ( & VAR_31 , VAR_32 , VAR_33 ) ; METHOD_6 ( & VAR_34 , VAR_35 -> VAR_36 . VAR_37 , VAR_38 -> VAR_39 ) ; METHOD_7 ( VAR_40 , & VAR_41 ) ; if ( VAR_42 <= VAR_43 ) { METHOD_8 ( VAR_44 -> VAR_45 , VAR_46 , VAR_47 ) ; return 0 ; } METHOD_9 ( VAR_48 , VAR_49 -> VAR_50 , VAR_51 ) ; VAR_52 = METHOD_10 ( * ( TYPE_12 * ) VAR_53 ) ; if ( VAR_54 <= VAR_55 - 2 ) { METHOD_11 ( VAR_56 -> VAR_57 , VAR_58 , VAR_59 ) ; return 0 ; } if ( VAR_60 > VAR_61 - 2 ) { METHOD_12 ( "l2tp:incorrecthiddenavpreceived(type%hu):" "originalattributelengthtoobig(ciphered" "attributelength:%hubytes,advertisedoriginal" "attributelength:%hubytes)\\n" , METHOD_13 ( VAR_62 -> VAR_63 ) , VAR_64 , VAR_65 ) ; return - 1 ; } VAR_66 = VAR_67 + 2 - VAR_68 ; VAR_69 = VAR_70 % VAR_71 ; VAR_72 = VAR_73 / VAR_74 ; if ( VAR_75 ) { VAR_76 = VAR_77 -> VAR_78 + VAR_79 * VAR_80 ; METHOD_14 ( & VAR_81 ) ; METHOD_15 ( & VAR_82 , VAR_83 , VAR_84 ) ; METHOD_16 ( & VAR_85 , VAR_86 , VAR_87 ) ; METHOD_17 ( VAR_88 , & VAR_89 ) ; METHOD_18 ( VAR_90 + VAR_91 , VAR_92 , VAR_93 ) ; VAR_94 -= VAR_95 ; } else VAR_96 = VAR_97 -> VAR_98 + ( VAR_99 - 1 ) * VAR_100 ; while ( VAR_101 >= VAR_102 -> VAR_103 ) { METHOD_19 ( & VAR_104 ) ; METHOD_20 ( & VAR_105 , VAR_106 , VAR_107 ) ; METHOD_21 ( & VAR_108 , VAR_109 , VAR_110 ) ; METHOD_22 ( VAR_111 , & VAR_112 ) ; METHOD_23 ( VAR_113 + VAR_114 , VAR_115 , VAR_116 ) ; VAR_117 -= VAR_118 ; } METHOD_24 ( VAR_119 -> VAR_120 , VAR_121 , VAR_122 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = ( struct STRUCT_OR_UNION_2 * ) VAR_4 -> VAR_5 ;  return METHOD_1 ( VAR_6 -> VAR_7 -> VAR_8 , VAR_9 -> VAR_10 -> VAR_11 , VAR_12 , VAR_13 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = METHOD_1 ( VAR_5 ) ; switch ( VAR_6 ) { case VAR_7 : if ( VAR_8 == VAR_9 ) VAR_10 = VAR_11 -> VAR_12 = METHOD_2 ( sizeof ( * VAR_13 ) + METHOD_3 ( ) ) ; if ( VAR_14 == VAR_15 ) { METHOD_4 ( VAR_16 , VAR_17 ) ; return 0 ; } VAR_18 -> VAR_19 . VAR_20 = 0 ; VAR_21 -> VAR_22 . VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = 12 ; VAR_32 -> VAR_33 = VAR_34 ; return 1 ; case VAR_35 : if ( VAR_36 ) { TYPE_6 * VAR_37 = ( TYPE_7 * ) VAR_38 ; VAR_39 -> VAR_40 = METHOD_5 ( VAR_41 , sizeof ( * VAR_42 ) + METHOD_6 ( ) ) ; if ( VAR_43 -> VAR_44 == VAR_45 ) { METHOD_7 ( VAR_46 , VAR_47 ) ; return 0 ; } } return 1 ; case VAR_48 : if ( VAR_49 <= 0 || VAR_50 > VAR_51 ) return 0 ; VAR_52 -> VAR_53 = VAR_54 ; return 1 ; case VAR_55 : if ( VAR_56 != 12 ) return 0 ; VAR_57 -> VAR_58 [ 0 ] = VAR_59 -> VAR_60 . VAR_61 [ 1 ] = METHOD_8 ( ( unsigned TYPE_8 * ) VAR_62 ) ; VAR_63 -> VAR_64 [ 1 ] = VAR_65 -> VAR_66 . VAR_67 [ 2 ] = METHOD_9 ( ( unsigned TYPE_9 * ) VAR_68 + 4 ) ; VAR_69 -> VAR_70 [ 2 ] = VAR_71 -> VAR_72 . VAR_73 [ 3 ] = METHOD_10 ( ( unsigned TYPE_10 * ) VAR_74 + 8 ) ; return 1 ; case VAR_75 : if ( VAR_76 <= 0 || VAR_77 > VAR_78 ) return 0 ; if ( VAR_79 != VAR_80 ) { METHOD_11 ( VAR_81 -> VAR_82 , VAR_83 , VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; } return 1 ; case VAR_88 : if ( VAR_89 <= 0 || VAR_90 > VAR_91 || ! VAR_92 -> VAR_93 ) return 0 ; METHOD_12 ( VAR_94 , VAR_95 -> VAR_96 , VAR_97 ) ; return 1 ; case VAR_98 : if ( VAR_99 != VAR_100 ) return 0 ; { unsigned TYPE_11 VAR_101 ; unsigned TYPE_12 * VAR_102 = VAR_103 , VAR_104 [ VAR_105 ] ; VAR_106 = VAR_107 [ VAR_108 - 2 ] << 8 | VAR_109 [ VAR_110 - 1 ] ; if ( ! VAR_111 -> VAR_112 ) {  VAR_113 -= VAR_114 ;  METHOD_13 ( VAR_115 , VAR_116 , VAR_117 - 2 ) ; VAR_118 = VAR_119 ; VAR_120 [ VAR_121 - 2 ] = ( unsigned TYPE_13 ) ( VAR_122 >> 8 ) ; VAR_123 [ VAR_124 - 1 ] = ( unsigned TYPE_14 ) VAR_125 ; } VAR_126 -> VAR_127 = VAR_128 ; VAR_129 -> VAR_130 . VAR_131 [ 1 ] = VAR_132 -> VAR_133 [ 0 ] ; VAR_134 -> VAR_135 . VAR_136 [ 2 ] = VAR_137 -> VAR_138 [ 1 ] ^ METHOD_14 ( VAR_139 ) ; VAR_140 -> VAR_141 . VAR_142 [ 3 ] = VAR_143 -> VAR_144 [ 2 ] ^ METHOD_15 ( VAR_145 + 4 ) ; VAR_146 -> VAR_147 = 0 ; METHOD_16 ( VAR_148 , VAR_149 , VAR_150 , VAR_151 ) ; return VAR_152 ; } case VAR_153 : return 1 ; default : return - 1 ; } }
struct STRUCT_OR_UNION_0 * METHOD_0 ( const TYPE_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 ; if ( ! VAR_4 ) return METHOD_1 ( - VAR_5 ) ; VAR_6 &= ~ ( VAR_7 | VAR_8 ) ; VAR_9 &= VAR_10 ; VAR_11 = METHOD_2 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( ! VAR_15 ) {  METHOD_3 ( "%s" , VAR_16 ) ;  if ( ! ( ( VAR_17 ^ VAR_18 ) & VAR_19 & VAR_20 ) )  METHOD_4 ( "%s-all" , VAR_21 ) ;  VAR_22 = METHOD_5 ( VAR_23 , VAR_24 , VAR_25 ) ; } if ( VAR_26 ) return METHOD_6 ( VAR_27 ) ? METHOD_7 ( VAR_28 ) : VAR_29 ; return METHOD_8 ( VAR_30 , VAR_31 , VAR_32 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 . VAR_7 . VAR_8 ; TYPE_2 VAR_9 ; METHOD_1 ( & VAR_10 -> VAR_11 . VAR_12 , & VAR_13 , VAR_14 ) ; VAR_15 = METHOD_2 ( & VAR_16 , VAR_17 ,  VAR_18 -> VAR_19 . VAR_20 . VAR_21 , 0 , 0 ) ;  if ( VAR_22 ) goto VAR_23 ; VAR_24 -> VAR_25 . VAR_26 = METHOD_3 ( VAR_27 , VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 . VAR_32 = METHOD_4 ( VAR_33 , VAR_34 -> VAR_35 ) ; METHOD_5 ( & VAR_36 , VAR_37 -> VAR_38 ) ; METHOD_6 ( & VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; METHOD_7 ( VAR_44 , & VAR_45 , & VAR_46 ) ; METHOD_8 ( & VAR_47 ) ; VAR_48 : VAR_49 -> VAR_50 . VAR_51 . VAR_52 = VAR_53 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 ) ; if ( VAR_2 || VAR_3 ) METHOD_2 ( "fslib_copy_libs%s\\n" , VAR_4 ) ; if ( METHOD_3 ( VAR_5 , VAR_6 ) ) { if ( VAR_7 || VAR_8 ) METHOD_4 ( "cannotfind%sforprivate-lib,skipping...\\n" , VAR_9 ) ; return ; } METHOD_5 ( VAR_10 ) ; METHOD_6 ( VAR_11 , 0644 ) ; if ( METHOD_7 ( VAR_12 , METHOD_8 ( ) , METHOD_9 ( ) ) ) METHOD_10 ( "chown" ) ; if ( VAR_13 || VAR_14 ) METHOD_11 ( "runningfldd%s\\n" , VAR_15 ) ; METHOD_12 ( VAR_16 | VAR_17 | VAR_18 , 3 , VAR_19 , VAR_20 , VAR_21 ) ; TYPE_2 * VAR_22 = METHOD_13 ( VAR_23 , "r" ) ; if ( ! VAR_24 ) METHOD_14 ( "fopen" ) ; TYPE_3 VAR_25 [ VAR_26 ] ; while ( METHOD_15 ( VAR_27 , VAR_28 , VAR_29 ) ) { TYPE_4 * VAR_30 = METHOD_16 ( VAR_31 , '\\n' ) ; if ( VAR_32 ) * VAR_33 = '\\0' ; METHOD_17 ( VAR_34 ) ; } METHOD_18 ( VAR_35 ) ;  }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { METHOD_1 ( VAR_1 , STRUCT_OR_UNION_3 -> VAR_2 ) ;  if ( METHOD_2 ( STRUCT_OR_UNION_4 ) )  METHOD_3 ( VAR_3 , ":%u" , STRUCT_OR_UNION_5 -> VAR_4 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = ( struct STRUCT_OR_UNION_4 * ) VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = STRUCT_OR_UNION_6 -> VAR_6 ;  METHOD_1 ( "sock%p,sk%p" , STRUCT_OR_UNION_7 , VAR_7 ) ;  VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 = METHOD_2 ( VAR_13 ) -> VAR_14 ; if ( VAR_15 ) METHOD_3 ( & VAR_16 -> VAR_17 , & METHOD_4 ( VAR_18 ) -> VAR_19 ) ; else METHOD_5 ( & VAR_20 -> VAR_21 , & METHOD_6 ( VAR_22 ) -> VAR_23 ) ; * VAR_24 = sizeof ( struct STRUCT_OR_UNION_8 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_0 VAR_2 ; if ( VAR_3 < VAR_4 ) { return - 1 ; } METHOD_1 ( VAR_5 , & VAR_6 ) ; if ( VAR_7 . VAR_8 != VAR_9 ) { return - 1 ; } if ( VAR_10 . VAR_11 == VAR_12 ) { struct STRUCT_OR_UNION_1 VAR_13 ; struct STRUCT_OR_UNION_2 VAR_14 ; TYPE_3 VAR_15 = 0 ; METHOD_2 ( & VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 . VAR_22 + ( VAR_23 - VAR_24 ) ) ; METHOD_3 ( & VAR_25 , 0 ) ; if ( VAR_26 . VAR_27 > VAR_28 || ( VAR_29 - VAR_30 . VAR_31 ) > 65535 ) { VAR_32 = VAR_33 . VAR_34 ; } else { return - 1 ; } VAR_35 = METHOD_4 ( VAR_36 + VAR_37 , VAR_38 - VAR_39 , & VAR_40 ) ; while ( VAR_41 ) { if ( VAR_42 . VAR_43 == VAR_44 ) {  METHOD_5 ( VAR_45 , VAR_46 . VAR_47 , VAR_48 . VAR_49 ) ;  METHOD_6 ( VAR_50 , VAR_51 ) ; } else if ( VAR_52 . VAR_53 == VAR_54 ) { METHOD_7 ( ( const TYPE_4 * ) VAR_55 . VAR_56 , 1 , VAR_57 . VAR_58 , VAR_59 ) ; } else if ( VAR_60 . VAR_61 == VAR_62 ) { VAR_63 = 1 ; if ( VAR_64 ) { METHOD_8 ( ) ; METHOD_9 ( VAR_65 , ( TYPE_5 * ) VAR_66 , VAR_67 , 0 ) ; METHOD_10 ( VAR_68 , VAR_69 ) ; } } VAR_70 = METHOD_11 ( VAR_71 , 0 , & VAR_72 ) ; } } else if ( VAR_73 . VAR_74 == VAR_75 ) { } else if ( VAR_76 . VAR_77 == VAR_78 ) { struct STRUCT_OR_UNION_3 VAR_79 ; METHOD_12 ( & VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 . VAR_85 , 0 ) ; METHOD_13 ( & VAR_86 , 0 ) ; if ( ! VAR_87 ) { METHOD_14 ( VAR_88 , METHOD_15 ( "Connectionclosed.\\n" ) ) ; } VAR_89 = 0 ; } else { METHOD_16 ( VAR_90 , METHOD_17 ( "Unhandeledpackettype:%dreceivedfromserver%s\\n" ) , VAR_91 . VAR_92 , METHOD_18 ( ( struct STRUCT_OR_UNION_4 * ) VAR_93 ) ) ; return - 1 ; } return VAR_94 . VAR_95 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 * * VAR_0 , TYPE_2 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , const struct STRUCT_OR_UNION_1 * VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 * VAR_5 ; TYPE_5 VAR_6 ; unsigned TYPE_6 * VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; if ( VAR_11 ) { METHOD_2 ( VAR_12 , "Error%dduringNTLMSSPauthentication\\n" , VAR_13 ) ; * VAR_14 = 0 ; goto VAR_15 ; } * VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 ) , VAR_18 ) ; VAR_19 = ( TYPE_7 * ) * VAR_20 ; METHOD_5 ( VAR_21 -> VAR_22 , VAR_23 , 8 ) ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 = VAR_28 | VAR_29 | VAR_30 | VAR_31 | VAR_32 |  VAR_33 | VAR_34 ;   if ( VAR_35 -> VAR_36 -> VAR_37 ) {  VAR_38 |= VAR_39 ; if ( ! VAR_40 -> VAR_41 -> VAR_42 || VAR_43 -> VAR_44 -> VAR_45 ) VAR_46 |= VAR_47 ;  }  VAR_48 = * VAR_49 + sizeof ( TYPE_8 ) ; VAR_50 -> VAR_51 = METHOD_6 ( VAR_52 ) ; VAR_53 -> VAR_54 . VAR_55 = METHOD_7 ( sizeof ( TYPE_9 ) ) ; VAR_56 -> VAR_57 . VAR_58 = 0 ; VAR_59 -> VAR_60 . VAR_61 = 0 ; VAR_62 -> VAR_63 . VAR_64 = METHOD_8 ( VAR_65 - * VAR_66 ) ; if ( VAR_67 -> VAR_68 != VAR_69 ) { METHOD_9 ( VAR_70 , VAR_71 -> VAR_72 . VAR_73 + VAR_74 , VAR_75 -> VAR_76 . VAR_77 - VAR_78 ) ; VAR_79 += VAR_80 -> VAR_81 . VAR_82 - VAR_83 ; VAR_84 -> VAR_85 . VAR_86 = METHOD_10 ( VAR_87 -> VAR_88 . VAR_89 - VAR_90 ) ; VAR_91 -> VAR_92 . VAR_93 = METHOD_11 ( VAR_94 -> VAR_95 . VAR_96 - VAR_97 ) ; } else { VAR_98 -> VAR_99 . VAR_100 = 0 ; VAR_101 -> VAR_102 . VAR_103 = 0 ; } if ( VAR_104 -> VAR_105 == VAR_106 ) { VAR_107 -> VAR_108 . VAR_109 = METHOD_12 ( VAR_110 - * VAR_111 ) ; VAR_112 -> VAR_113 . VAR_114 = 0 ; VAR_115 -> VAR_116 . VAR_117 = 0 ; VAR_118 += 2 ; } else { TYPE_10 VAR_119 ; VAR_120 = METHOD_13 ( ( TYPE_11 * ) VAR_121 , VAR_122 -> VAR_123 , VAR_124 , VAR_125 ) ; VAR_126 *= 2 ; VAR_127 -> VAR_128 . VAR_129 = METHOD_14 ( VAR_130 - * VAR_131 ) ; VAR_132 -> VAR_133 . VAR_134 = METHOD_15 ( VAR_135 ) ; VAR_136 -> VAR_137 . VAR_138 = METHOD_16 ( VAR_139 ) ; VAR_140 += VAR_141 ; } if ( VAR_142 -> VAR_143 == VAR_144 ) { VAR_145 -> VAR_146 . VAR_147 = METHOD_17 ( VAR_148 - * VAR_149 ) ; VAR_150 -> VAR_151 . VAR_152 = 0 ; VAR_153 -> VAR_154 . VAR_155 = 0 ; VAR_156 += 2 ; } else { TYPE_12 VAR_157 ; VAR_158 = METHOD_18 ( ( TYPE_13 * ) VAR_159 , VAR_160 -> VAR_161 , VAR_162 , VAR_163 ) ; VAR_164 *= 2 ; VAR_165 -> VAR_166 . VAR_167 = METHOD_19 ( VAR_168 - * VAR_169 ) ; VAR_170 -> VAR_171 . VAR_172 = METHOD_20 ( VAR_173 ) ; VAR_174 -> VAR_175 . VAR_176 = METHOD_21 ( VAR_177 ) ; VAR_178 += VAR_179 ; } VAR_180 -> VAR_181 . VAR_182 = METHOD_22 ( VAR_183 - * VAR_184 ) ; VAR_185 -> VAR_186 . VAR_187 = 0 ; VAR_188 -> VAR_189 . VAR_190 = 0 ; VAR_191 += 2 ; if ( ( ( VAR_192 -> VAR_193 -> VAR_194 & VAR_195 ) || ( VAR_196 -> VAR_197 -> VAR_198 & VAR_199 ) ) && ! METHOD_23 ( VAR_200 ) ) { METHOD_24 ( VAR_201 , VAR_202 -> VAR_203 -> VAR_204 , VAR_205 ) ; VAR_206 -> VAR_207 . VAR_208 = METHOD_25 ( VAR_209 - * VAR_210 ) ; VAR_211 -> VAR_212 . VAR_213 = METHOD_26 ( VAR_214 ) ; VAR_215 -> VAR_216 . VAR_217 = METHOD_27 ( VAR_218 ) ; VAR_219 += VAR_220 ; } else { VAR_221 -> VAR_222 . VAR_223 = METHOD_28 ( VAR_224 - * VAR_225 ) ; VAR_226 -> VAR_227 . VAR_228 = 0 ; VAR_229 -> VAR_230 . VAR_231 = 0 ; } * VAR_232 = VAR_233 - * VAR_234 ; VAR_235 : return VAR_236 ; }
static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , "kpp" , sizeof ( VAR_5 . VAR_6 ) ) ;  if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = METHOD_1 ( VAR_4 ) ; TYPE_5 VAR_5 = VAR_6 -> VAR_7 ; unsigned TYPE_6 * VAR_8 = ( unsigned TYPE_7 * ) VAR_9 ;  METHOD_2 ( ( VAR_10 % VAR_11 ) == 0 ) ;  if ( VAR_12 > VAR_13 ) { VAR_14 -= VAR_15 ; if ( VAR_16 == 3 ) { unsigned TYPE_8 VAR_17 , VAR_18 , VAR_19 ; unsigned TYPE_9 VAR_20 = VAR_21 [ 0 ] ; unsigned TYPE_10 VAR_22 = VAR_23 [ 1 ] ; unsigned TYPE_11 VAR_24 = VAR_25 [ 2 ] ; do { VAR_26 = VAR_27 [ 3 ] ; VAR_28 [ 3 ] = ( unsigned TYPE_12 ) ( ( VAR_29 - VAR_30 ) & 0xff ) ; VAR_31 = VAR_32 ; VAR_33 = VAR_34 [ 4 ] ; VAR_35 [ 4 ] = ( unsigned TYPE_13 ) ( ( VAR_36 - VAR_37 ) & 0xff ) ; VAR_38 = VAR_39 ; VAR_40 = VAR_41 [ 5 ] ; VAR_42 [ 5 ] = ( unsigned TYPE_14 ) ( ( VAR_43 - VAR_44 ) & 0xff ) ; VAR_45 = VAR_46 ; VAR_47 += 3 ; } while ( ( VAR_48 -= 3 ) > 0 ) ; } else if ( VAR_49 == 4 ) { unsigned TYPE_15 VAR_50 , VAR_51 , VAR_52 , VAR_53 ; unsigned TYPE_16 VAR_54 = VAR_55 [ 0 ] ; unsigned TYPE_17 VAR_56 = VAR_57 [ 1 ] ; unsigned TYPE_18 VAR_58 = VAR_59 [ 2 ] ; unsigned TYPE_19 VAR_60 = VAR_61 [ 3 ] ; do { VAR_62 = VAR_63 [ 4 ] ; VAR_64 [ 4 ] = ( unsigned TYPE_20 ) ( ( VAR_65 - VAR_66 ) & 0xff ) ; VAR_67 = VAR_68 ; VAR_69 = VAR_70 [ 5 ] ; VAR_71 [ 5 ] = ( unsigned TYPE_21 ) ( ( VAR_72 - VAR_73 ) & 0xff ) ; VAR_74 = VAR_75 ; VAR_76 = VAR_77 [ 6 ] ; VAR_78 [ 6 ] = ( unsigned TYPE_22 ) ( ( VAR_79 - VAR_80 ) & 0xff ) ; VAR_81 = VAR_82 ; VAR_83 = VAR_84 [ 7 ] ; VAR_85 [ 7 ] = ( unsigned TYPE_23 ) ( ( VAR_86 - VAR_87 ) & 0xff ) ; VAR_88 = VAR_89 ; VAR_90 += 4 ; } while ( ( VAR_91 -= 4 ) > 0 ) ; } else { VAR_92 += VAR_93 - 1 ; do { REPEAT4 ( VAR_94 , VAR_95 [ VAR_96 ] = ( unsigned TYPE_24 ) ( ( VAR_97 [ VAR_98 ] - VAR_99 [ 0 ] ) & 0xff ) ; VAR_100 -- ) } while ( ( VAR_101 -= VAR_102 ) > 0 ) ; } }  }
static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , struct STRUCT_OR_UNION_1 * VAR_4 ) { TYPE_4 VAR_5 ; if ( VAR_6 -> VAR_7 <= 0 ||  VAR_8 -> VAR_9 <= 0 ||  VAR_10 -> VAR_11 <= 0 || VAR_12 -> VAR_13 > VAR_14 -> VAR_15 >> METHOD_1 ( VAR_16 ) || ( VAR_17 -> VAR_18 & ~ ( VAR_19 | VAR_20 | VAR_21 ) ) != 0 ) return - VAR_22 ; if ( VAR_23 ) { if ( ! METHOD_2 ( VAR_24 ) ) return - VAR_25 ; METHOD_3 ( & VAR_26 ) ; if ( METHOD_4 ( VAR_27 ) ) { METHOD_5 ( & VAR_28 ) ; return - VAR_29 ; } VAR_30 [ VAR_31 ] = * VAR_32 ; VAR_33 [ VAR_34 ] . VAR_35 = "userformat" ; for ( VAR_36 = VAR_37 << 2 ; VAR_38 < ( VAR_39 << 2 ) + 4 ; VAR_40 ++ ) VAR_41 [ VAR_42 ] = VAR_43 [ VAR_44 + 0x80 ] = VAR_45 [ VAR_46 ] . VAR_47 + 1 ; METHOD_6 ( ) ; for ( VAR_48 = 0 ; VAR_49 < VAR_50 ; VAR_51 ++ ) { struct STRUCT_OR_UNION_2 * VAR_52 = VAR_53 [ VAR_54 ] ; if ( ! VAR_55 || METHOD_7 ( VAR_56 [ VAR_57 ] . VAR_58 ) != VAR_59 ) continue ; METHOD_8 ( VAR_60 , VAR_61 ) ; } METHOD_9 ( & VAR_62 ) ; } else { TYPE_5 VAR_63 ; if ( METHOD_10 ( VAR_64 ) ) return - VAR_65 ; if ( VAR_66 != VAR_67 ) { if ( METHOD_11 ( VAR_68 , VAR_69 ) == - VAR_70 ) return - VAR_71 ; } VAR_72 = VAR_73 -> VAR_74 ; VAR_75 [ VAR_76 ] = * VAR_77 ; if ( VAR_78 == VAR_79 ) METHOD_12 ( VAR_80 , VAR_81 [ VAR_82 ] . VAR_83 ) ; VAR_84 [ VAR_85 ] = & VAR_86 [ VAR_87 ] ; VAR_88 [ VAR_89 ] = VAR_90 [ VAR_91 ] . VAR_92 ; if ( VAR_93 == VAR_94 ) VAR_95 -> VAR_96 = - 1 ; else VAR_97 -> VAR_98 = 1 ; if ( VAR_99 -> VAR_100 > VAR_101 [ VAR_102 ] . VAR_103 || VAR_104 -> VAR_105 || ( ( VAR_106 [ VAR_107 ] . VAR_108 ^ VAR_109 ) & ( VAR_110 | VAR_111 ) ) ) METHOD_13 ( VAR_112 ) ; else METHOD_14 ( ) ; } return 0 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * * VAR_2 ) { TYPE_3 VAR_3 ; const TYPE_4 * VAR_4 , * VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; TYPE_6 VAR_8 ; * VAR_9 = VAR_10 ; VAR_11 = METHOD_1 ( ( TYPE_7 * ) VAR_12 -> VAR_13 , VAR_14 -> VAR_15 , & VAR_16 , & VAR_17 ,  & VAR_18 , & VAR_19 , & VAR_20 ) ;  if ( VAR_21 ) return VAR_22 ; if ( ! METHOD_2 ( VAR_23 , & VAR_24 ) ) return VAR_25 ; return METHOD_3 ( & VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const struct STRUCT_OR_UNION_2 * VAR_0 , const TYPE_1 * VAR_1 ) { TYPE_2 * VAR_2 ; TYPE_3 VAR_3 [ VAR_4 ] ; TYPE_4 VAR_5 , VAR_6 = 0 , VAR_7 ; const TYPE_5 * VAR_8 ; VAR_9 = METHOD_1 ( "lxc.lxcpath" ) ; if ( ! VAR_10 ) { METHOD_2 ( "Outofmemory" ) ; return - 1 ; } VAR_11 = METHOD_3 ( VAR_12 , VAR_13 , "%s/%s/rootfs" , VAR_14 , VAR_15 ) ; if ( VAR_16 < 0 || VAR_17 >= VAR_18 ) goto VAR_19 ; VAR_20 = METHOD_4 ( STRUCT_OR_UNION_3 -> VAR_21 , VAR_22 ) ; if ( VAR_23 ) { VAR_24 = METHOD_5 ( VAR_25 ) ; goto VAR_26 ; } VAR_27 : VAR_28 = METHOD_6 ( STRUCT_OR_UNION_4 -> VAR_29 , VAR_30 -> VAR_31 ) ; if ( ! VAR_32 ) { METHOD_7 ( "ignoringmountpoint\'%s\'" , STRUCT_OR_UNION_5 -> VAR_33 ) ; return VAR_34 ; } VAR_35 = METHOD_8 ( VAR_36 -> VAR_37 ) ; VAR_38 : VAR_39 = METHOD_9 ( VAR_40 , VAR_41 , "%s/%s" , VAR_42 -> VAR_43 , VAR_44 + VAR_45 ) ; if ( VAR_46 < 0 || VAR_47 >= VAR_48 ) { METHOD_10 ( "pathnmetoolongfor\'%s\'" , STRUCT_OR_UNION_6 -> VAR_49 ) ; return - 1 ; }  return METHOD_11 ( STRUCT_OR_UNION_7 , VAR_50 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( METHOD_2 ( VAR_4 ) ) ;  if ( METHOD_3 ( VAR_5 , "__debug__" ) == 0 ) {  METHOD_4 ( VAR_6 , VAR_7 , "assignmenttokeyword" ) ; return 1 ; } if ( VAR_8 ) { const TYPE_4 * const * VAR_9 ; for ( VAR_10 = VAR_11 ; * VAR_12 ; VAR_13 ++ ) {  if ( METHOD_5 ( VAR_14 , * VAR_15 ) == 0 ) {  METHOD_6 ( VAR_16 , VAR_17 , "assignmenttokeyword" ) ; return 1 ; } } } return 0 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { TYPE_1 VAR_3 ; TYPE_2 VAR_4 = 0 ; struct STRUCT_OR_UNION_3 * * VAR_5 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_6 VAR_9 ; struct STRUCT_OR_UNION_7 TYPE_5 ; METHOD_1 ( TYPE_6 , VAR_10 , * VAR_11 ) { unsigned TYPE_7 VAR_12 = ( unsigned TYPE_8 ) TYPE_9 . VAR_13 ; unsigned TYPE_10 VAR_14 = TYPE_11 . VAR_15 ; unsigned TYPE_12 VAR_16 = ( VAR_17 + VAR_18 + VAR_19 - 1 ) >> VAR_20 ; unsigned TYPE_13 VAR_21 = VAR_22 >> VAR_23 ; if ( VAR_24 < VAR_25 ) return METHOD_2 ( - VAR_26 ) ; VAR_27 += VAR_28 - VAR_29 ; if ( VAR_30 & METHOD_3 ( VAR_31 ) ) return METHOD_4 ( - VAR_32 ) ; } if ( ! VAR_33 ) return METHOD_5 ( - VAR_34 ) ; STRUCT_OR_UNION_8 = METHOD_6 ( VAR_35 , VAR_36 ) ; if ( ! STRUCT_OR_UNION_9 ) return METHOD_7 ( - VAR_37 ) ; VAR_38 = - VAR_39 ; VAR_40 = METHOD_8 ( VAR_41 , sizeof ( struct STRUCT_OR_UNION_10 * ) , VAR_42 ) ; if ( ! VAR_43 ) goto VAR_44 ; METHOD_9 ( TYPE_14 , VAR_45 , * VAR_46 ) { unsigned TYPE_15 VAR_47 = ( unsigned TYPE_16 ) TYPE_17 . VAR_48 ; unsigned TYPE_18 VAR_49 = TYPE_19 . VAR_50 ; unsigned TYPE_20 VAR_51 = ( VAR_52 + VAR_53 + VAR_54 - 1 ) >> VAR_55 ; unsigned TYPE_21 VAR_56 = VAR_57 >> VAR_58 ; const TYPE_22 VAR_59 = VAR_60 - VAR_61 ; const TYPE_23 VAR_62 = VAR_63 + VAR_64 ; VAR_65 = METHOD_10 ( VAR_66 , VAR_67 , ( VAR_68 -> VAR_69 & VAR_70 ) != VAR_71 , & VAR_72 [ VAR_73 ] ) ; if ( VAR_74 < VAR_75 ) { VAR_76 = - VAR_77 ; goto VAR_78 ; } VAR_79 = METHOD_11 ( VAR_80 ) ; for ( VAR_81 = VAR_82 ; VAR_83 < VAR_84 ; VAR_85 ++ ) { unsigned TYPE_24 VAR_86 = VAR_87 - VAR_88 ;  if ( VAR_89 <= 0 )  break ; if ( VAR_90 > VAR_91 ) VAR_92 = VAR_93 ; if ( METHOD_12 ( VAR_94 , STRUCT_OR_UNION_11 , VAR_95 [ VAR_96 ] , VAR_97 , VAR_98 ) < VAR_99 ) break ;  VAR_100 -= VAR_101 ;  VAR_102 = 0 ; } VAR_103 = VAR_104 ; while ( VAR_105 < VAR_106 ) METHOD_13 ( VAR_107 [ VAR_108 ++ ] ) ; } METHOD_14 ( VAR_109 ) ; METHOD_15 ( STRUCT_OR_UNION_12 , VAR_110 ) ; METHOD_16 ( STRUCT_OR_UNION_13 ) ; return STRUCT_OR_UNION_14 ; VAR_111 : for ( VAR_112 = 0 ; VAR_113 < VAR_114 ; VAR_115 ++ ) { if ( ! VAR_116 [ VAR_117 ] ) break ; METHOD_17 ( VAR_118 [ VAR_119 ] ) ; } VAR_120 : METHOD_18 ( VAR_121 ) ; METHOD_19 ( STRUCT_OR_UNION_15 ) ; return METHOD_20 ( VAR_122 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; switch ( VAR_9 -> VAR_10 ) { case VAR_11 : break ; case VAR_12 : { METHOD_1 ( "warning:palettizedimagesnotfullysupported\\n" ) ; VAR_13 = 1 << VAR_14 -> VAR_15 ;  METHOD_2 ( VAR_16 <= VAR_17 ) ;  VAR_18 = VAR_19 -> VAR_20 / 3 ; for ( VAR_21 = 0 ; VAR_22 < VAR_23 ; VAR_24 ++ ) { VAR_25 -> VAR_26 [ VAR_27 ] = 0 ; } if ( ( VAR_28 -> VAR_29 % 3 ) || VAR_30 -> VAR_31 < 0 || VAR_32 -> VAR_33 > 3 * VAR_34 ) { return - 1 ; } for ( VAR_35 = 0 ; VAR_36 < 3 ; VAR_37 ++ ) { for ( VAR_38 = 0 ; VAR_39 < VAR_40 ; VAR_41 ++ ) { if ( ( VAR_42 = METHOD_3 ( VAR_43 ) ) == VAR_44 ) { return - 1 ; } VAR_45 = 0 ; switch ( VAR_46 ) { case 0 : VAR_47 = METHOD_4 ( VAR_48 ) ; break ; case 1 : VAR_49 = METHOD_5 ( VAR_50 ) ; break ; case 2 : VAR_51 = METHOD_6 ( VAR_52 ) ; break ; } VAR_53 -> VAR_54 [ VAR_55 ] |= VAR_56 ; } } } break ; default : return - 1 ; break ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = & VAR_11 -> VAR_12 ;  const TYPE_3 * VAR_13 = VAR_14 -> VAR_15 -> METHOD_1 . VAR_16 ;  TYPE_4 VAR_17 ; TYPE_5 VAR_18 [ VAR_19 + 1 ] ; * VAR_20 = VAR_21 ; METHOD_2 ( VAR_22 ) ; VAR_23 = METHOD_3 ( VAR_24 ) ; if ( VAR_25 != VAR_26 ) return VAR_27 ; VAR_28 -> VAR_29 . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; if ( VAR_44 -> VAR_45 . VAR_46 && VAR_47 -> VAR_48 . VAR_49 ) { struct STRUCT_OR_UNION_4 VAR_50 ; struct STRUCT_OR_UNION_5 * VAR_51 ; VAR_52 = VAR_53 -> METHOD_4 . VAR_54 . VAR_55 ; METHOD_5 ( & VAR_56 , 0 , sizeof ( VAR_57 ) ) ; VAR_58 -> METHOD_6 . VAR_59 . VAR_60 = & VAR_61 ; VAR_62 = METHOD_7 ( VAR_63 , VAR_64 , VAR_65 -> VAR_66 . VAR_67 , VAR_68 -> VAR_69 ) ; VAR_70 -> METHOD_8 . VAR_71 . VAR_72 = VAR_73 ; if ( VAR_74 != VAR_75 ) return VAR_76 ; } if ( ( VAR_77 -> VAR_78 -> VAR_79 & VAR_80 ) && VAR_81 -> METHOD_9 . VAR_82 != VAR_83 ) { VAR_84 = METHOD_10 ( VAR_85 , VAR_86 ) ; if ( VAR_87 ) return VAR_88 ; } METHOD_11 ( VAR_89 ) ; VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; VAR_99 -> VAR_100 = VAR_101 ; if ( ! * VAR_102 ) { if ( ! METHOD_12 ( VAR_103 , sizeof VAR_104 ) ) VAR_105 = VAR_106 ; else VAR_107 = "localhost" ; }  VAR_108 -> VAR_109 = METHOD_13 ( VAR_110 -> VAR_111 , VAR_112 , 0 , & VAR_113 ) ;  if ( ! VAR_114 -> VAR_115 ) return VAR_116 ; METHOD_14 ( VAR_117 , VAR_118 ) ; if ( VAR_119 -> METHOD_15 . VAR_120 == VAR_121 ) VAR_122 = METHOD_16 ( VAR_123 , VAR_124 ) ; else { VAR_125 = METHOD_17 ( VAR_126 ) ; if ( ! VAR_127 ) * VAR_128 = VAR_129 ; } return VAR_130 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 -> VAR_3 == VAR_4 ) {  METHOD_1 ( VAR_5 , "ID:" , VAR_6 ) ;   METHOD_2 ( VAR_7 , METHOD_3 ( ) , VAR_8 ) ;  } else if ( VAR_9 -> VAR_10 == VAR_11 ) {  METHOD_4 ( VAR_12 , "String:\'" , VAR_13 ) ;   METHOD_5 ( VAR_14 , METHOD_6 ( ) , VAR_15 ) ;  METHOD_7 ( VAR_16 , "\'" , VAR_17 ) ; } else METHOD_8 ( VAR_18 -> VAR_19 , VAR_20 , VAR_21 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; TYPE_5 VAR_5 [ 128 METHOD_1 ; TYPE_6 VAR_6 = { . VAR_7 = VAR_8 } ;  for ( VAR_9 = VAR_10 = 0 ; VAR_11 < sizeof ( VAR_12 ) - 1 && VAR_13 [ VAR_14 METHOD_2 ; VAR_15 ++ , VAR_16 ++ ) {  if ( VAR_17 [ VAR_18 METHOD_3 == '' ) { VAR_19 -- ; continue ; } VAR_20 [ VAR_21 METHOD_4 = METHOD_5 ( ( const TYPE_7 ) VAR_22 [ VAR_23 METHOD_6 ) ; } VAR_24 [ VAR_25 METHOD_7 = 0 ; METHOD_8 ( & VAR_26 , VAR_27 ) ; VAR_28 . VAR_29 = VAR_30 ; if ( VAR_31 < 0 || VAR_32 > 1 ) { return - 1 ; } if ( ! VAR_33 [ VAR_34 METHOD_9 ( & VAR_35 , VAR_36 , VAR_37 ) ) { return - 1 ; } return VAR_38 . VAR_39 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 [ 2 ] ;  TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; METHOD_1 ( VAR_4 >= 2 ) ; if ( ( VAR_5 = METHOD_2 ( VAR_6 , VAR_7 , 2 ) ) < 0 ) { return - 1 ; } for ( VAR_8 = VAR_9 - 1 ; VAR_10 >= 0 ; -- VAR_11 ) { if ( METHOD_3 ( VAR_12 , VAR_13 [ VAR_14 ] ) == VAR_15 ) { return - 1 ; } } if ( VAR_16 < 2 ) { return - 1 ; } if ( VAR_17 [ 0 ] == 'P' && METHOD_4 ( VAR_18 [ 1 ] ) ) { return 0 ; } return - 1 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 -> VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 = VAR_13 ; struct STRUCT_OR_UNION_5 * VAR_14 ; struct STRUCT_OR_UNION_6 * VAR_15 ; struct STRUCT_OR_UNION_7 * VAR_16 ; struct STRUCT_OR_UNION_8 * VAR_17 ; TYPE_4 VAR_18 ; TYPE_5 VAR_19 ; TYPE_6 VAR_20 ; TYPE_7 VAR_21 = 0 ; TYPE_8 VAR_22 ; TYPE_9 VAR_23 = 0 ; TYPE_10 VAR_24 = 0 ; TYPE_11 VAR_25 = 0 ; TYPE_12 VAR_26 ; TYPE_13 VAR_27 = 0 ; TYPE_14 VAR_28 = 0 ; METHOD_1 ( VAR_29 % VAR_30 ) ; METHOD_2 ( VAR_31 != 0 && VAR_32 != sizeof ( struct STRUCT_OR_UNION_9 ) ) ; if ( VAR_33 -> VAR_34 && VAR_35 -> VAR_36 . VAR_37 . VAR_38 & VAR_39 ) { METHOD_3 ( VAR_40 -> VAR_41 , ~ ( TYPE_15 ) 0 ) ;  return sizeof ( struct STRUCT_OR_UNION_10 ) + VAR_42 ;  } if ( METHOD_4 ( VAR_43 -> VAR_44 . VAR_45 . VAR_46 ) == 0 ) VAR_47 = 1 ; else VAR_48 = METHOD_5 ( METHOD_6 ( VAR_49 -> VAR_50 . VAR_51 . VAR_52 ) , VAR_53 ) ; VAR_54 = METHOD_7 ( & VAR_55 -> VAR_56 , VAR_57 , & VAR_58 ) ; if ( VAR_59 == 0 ) { METHOD_8 ( VAR_60 , & VAR_61 -> VAR_62 ) ; METHOD_9 ( VAR_63 ) ; VAR_64 = - VAR_65 ; goto VAR_66 ; } if ( VAR_67 -> VAR_68 ) { VAR_69 = METHOD_10 ( VAR_70 , VAR_71 , & VAR_72 , 0 , VAR_73 ) ; VAR_74 += VAR_75 ; if ( VAR_76 < VAR_77 ) { METHOD_11 ( & VAR_78 -> VAR_79 , VAR_80 - VAR_81 ) ; VAR_82 = VAR_83 ; VAR_84 = 1 ; } if ( VAR_85 == 0 ) { METHOD_12 ( VAR_86 , & VAR_87 -> VAR_88 ) ; METHOD_13 ( VAR_89 ) ; VAR_90 = - VAR_91 ; goto VAR_92 ; } } if ( ! VAR_93 -> VAR_94 ) { if ( VAR_95 -> VAR_96 . VAR_97 ) { VAR_98 -> VAR_99 . VAR_100 = METHOD_14 ( VAR_101 , VAR_102 -> VAR_103 . VAR_104 , VAR_105 -> VAR_106 . VAR_107 , VAR_108 ) ; METHOD_15 ( "ic%pmappingrm%p:%d\\n" , VAR_109 , VAR_110 , VAR_111 -> VAR_112 . VAR_113 ) ; if ( VAR_114 -> VAR_115 . VAR_116 == 0 ) { METHOD_16 ( VAR_117 ) ; METHOD_17 ( & VAR_118 -> VAR_119 , VAR_120 ) ; VAR_121 = - VAR_122 ; goto VAR_123 ; } } else { VAR_124 -> VAR_125 . VAR_126 = 0 ; } METHOD_18 ( VAR_127 ) ; VAR_128 -> VAR_129 = & VAR_130 -> VAR_131 ; if ( METHOD_19 ( VAR_132 , & VAR_133 -> VAR_134 ) ) VAR_135 -> VAR_136 . VAR_137 . VAR_138 |= VAR_139 ; if ( METHOD_20 ( VAR_140 , & VAR_141 -> VAR_142 ) ) VAR_143 -> VAR_144 . VAR_145 . VAR_146 |= VAR_147 ; if ( VAR_148 -> VAR_149 . VAR_150 ) { struct STRUCT_OR_UNION_11 VAR_151 ; VAR_152 . VAR_153 = METHOD_21 ( VAR_154 -> VAR_155 . VAR_156 ) ; METHOD_22 ( & VAR_157 -> VAR_158 . VAR_159 , VAR_160 , & VAR_161 , sizeof ( VAR_162 ) ) ; } if ( VAR_163 -> VAR_164 ) { METHOD_23 ( & VAR_165 -> VAR_166 . VAR_167 , METHOD_24 ( VAR_168 -> VAR_169 ) , METHOD_25 ( VAR_170 -> VAR_171 ) ) ; } VAR_172 -> VAR_173 . VAR_174 . VAR_175 = METHOD_26 ( METHOD_27 ( VAR_176 ) ) ; METHOD_28 ( & VAR_177 -> VAR_178 . VAR_179 ) ; if ( VAR_180 -> VAR_181 ) { METHOD_29 ( VAR_182 , 0 , & VAR_183 , 1 , VAR_184 - VAR_185 ) ; VAR_186 += VAR_187 ; METHOD_30 ( VAR_188 > 255 ) ; } } if ( VAR_189 -> VAR_190 . VAR_191 && VAR_192 -> VAR_193 . VAR_194 ) VAR_195 = VAR_196 ; VAR_197 = & VAR_198 -> VAR_199 [ VAR_200 ] ; VAR_201 = VAR_202 ; VAR_203 = VAR_204 ; VAR_205 = & VAR_206 -> VAR_207 -> VAR_208 [ VAR_209 ] ; VAR_210 = 0 ; do { unsigned TYPE_16 VAR_211 = 0 ; VAR_212 -> VAR_213 . VAR_214 = VAR_215 ; VAR_216 -> VAR_217 . VAR_218 = VAR_219 ; VAR_220 -> VAR_221 . VAR_222 = 1 ; VAR_223 -> VAR_224 . VAR_225 = VAR_226 ; VAR_227 -> VAR_228 = VAR_229 ; VAR_230 -> VAR_231 = VAR_232 ; VAR_233 -> VAR_234 [ 0 ] . VAR_235 = VAR_236 -> VAR_237 + ( VAR_238 * sizeof ( struct STRUCT_OR_UNION_12 ) ) ; VAR_239 -> VAR_240 [ 0 ] . VAR_241 = sizeof ( struct STRUCT_OR_UNION_13 ) ; METHOD_31 ( & VAR_242 -> VAR_243 [ VAR_244 ] , & VAR_245 -> VAR_246 . VAR_247 , sizeof ( struct STRUCT_OR_UNION_14 ) ) ; if ( VAR_248 < VAR_249 && VAR_250 != & VAR_251 -> VAR_252 . VAR_253 [ VAR_254 -> VAR_255 . VAR_256 ] ) { VAR_257 = METHOD_32 ( VAR_258 , METHOD_33 ( VAR_259 , VAR_260 ) - VAR_261 ) ; VAR_262 -> VAR_263 . VAR_264 = 2 ; VAR_265 -> VAR_266 [ 1 ] . VAR_267 = METHOD_34 ( VAR_268 , VAR_269 ) + VAR_270 ; VAR_271 -> VAR_272 [ 1 ] . VAR_273 = VAR_274 ; VAR_275 += VAR_276 ; VAR_277 += VAR_278 ; if ( VAR_279 == METHOD_35 ( VAR_280 , VAR_281 ) ) { VAR_282 ++ ; VAR_283 = 0 ; } } METHOD_36 ( VAR_284 , VAR_285 , 0 ) ; if ( VAR_286 -> VAR_287 && VAR_288 && VAR_289 == ( VAR_290 - 1 ) ) VAR_291 -> VAR_292 . VAR_293 |= VAR_294 | VAR_295 ; if ( VAR_296 -> VAR_297 . VAR_298 & VAR_299 ) VAR_300 ++ ; METHOD_37 ( "send%pwr%pnum_sge%unext%p\\n" , VAR_301 , & VAR_302 -> VAR_303 , VAR_304 -> VAR_305 . VAR_306 , VAR_307 -> VAR_308 . VAR_309 ) ; if ( VAR_310 -> VAR_311 && VAR_312 ) { struct STRUCT_OR_UNION_15 * VAR_313 = & VAR_314 -> VAR_315 [ VAR_316 ] ; VAR_317 -> VAR_318 = VAR_319 ; METHOD_38 ( VAR_320 ) ; VAR_321 = 0 ; METHOD_39 ( VAR_322 ) ; } if ( VAR_323 ) VAR_324 -> VAR_325 . VAR_326 = & VAR_327 -> VAR_328 ; VAR_329 = VAR_330 ; VAR_331 = ( VAR_332 + 1 ) % VAR_333 -> VAR_334 . VAR_335 ; VAR_336 = & VAR_337 -> VAR_338 [ VAR_339 ] ; VAR_340 ++ ; } while ( VAR_341 < VAR_342 && VAR_343 != & VAR_344 -> VAR_345 . VAR_346 [ VAR_347 -> VAR_348 . VAR_349 ] ) ; if ( VAR_350 == 0 ) VAR_351 += sizeof ( struct STRUCT_OR_UNION_16 ) ; if ( VAR_352 == & VAR_353 -> VAR_354 . VAR_355 [ VAR_356 -> VAR_357 . VAR_358 ] ) { VAR_359 -> VAR_360 = VAR_361 -> VAR_362 ; VAR_363 -> VAR_364 . VAR_365 |= VAR_366 ; VAR_367 -> VAR_368 = VAR_369 ; } if ( VAR_370 < VAR_371 ) { METHOD_40 ( & VAR_372 -> VAR_373 , VAR_374 - VAR_375 ) ; VAR_376 = VAR_377 ; } if ( VAR_378 -> VAR_379 && VAR_380 < VAR_381 ) METHOD_41 ( VAR_382 , VAR_383 - VAR_384 ) ; if ( VAR_385 ) METHOD_42 ( VAR_386 , & VAR_387 -> VAR_388 ) ; VAR_389 = & VAR_390 -> VAR_391 ; VAR_392 = METHOD_43 ( VAR_393 -> VAR_394 -> VAR_395 , & VAR_396 -> VAR_397 , & VAR_398 ) ; METHOD_44 ( "ic%pfirst%p(wr%p)ret%dwr%p\\n" , VAR_399 , VAR_400 , & VAR_401 -> VAR_402 , VAR_403 , VAR_404 ) ; METHOD_45 ( VAR_405 != & VAR_406 -> VAR_407 ) ; if ( VAR_408 ) { printk ( KERN_WARNING "RDS/IB:ib_post_sendto%pI4" "returned%d\\n" , & VAR_409 -> VAR_410 , VAR_411 ) ; METHOD_46 ( & VAR_412 -> VAR_413 , VAR_414 ) ; METHOD_47 ( VAR_415 , VAR_416 ) ; if ( VAR_417 -> VAR_418 ) { VAR_419 -> VAR_420 = VAR_421 -> VAR_422 ; VAR_423 -> VAR_424 = VAR_425 ; } METHOD_48 ( VAR_426 -> VAR_427 , "ib_post_sendfailed\\n" ) ; goto VAR_428 ; } VAR_429 = VAR_430 ; VAR_431 : METHOD_49 ( VAR_432 ) ; return VAR_433 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 . VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; TYPE_1 VAR_9 ; VAR_10 = VAR_11 -> VAR_12 . VAR_13 ; VAR_14 = METHOD_1 ( & VAR_15 -> VAR_16 , sizeof ( * VAR_17 ) , VAR_18 ) ; if ( ! VAR_19 ) return - VAR_20 ; VAR_21 = METHOD_2 ( VAR_22 , VAR_23 , 0 ) ;  VAR_24 -> VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 , VAR_28 -> VAR_29 , METHOD_4 ( VAR_30 ) ) ;  if ( ! VAR_31 -> VAR_32 ) { METHOD_5 ( & VAR_33 -> VAR_34 , "failedtoremapregister\\n" ) ; return - VAR_35 ; } VAR_36 -> STRUCT_OR_UNION_6 = METHOD_6 ( ) ; if ( ! VAR_37 -> STRUCT_OR_UNION_7 ) return - VAR_38 ; VAR_39 = VAR_40 -> STRUCT_OR_UNION_8 ; VAR_41 -> VAR_42 = VAR_43 ; if ( VAR_44 ) { VAR_45 -> VAR_46 = VAR_47 -> VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 = ~ VAR_59 -> VAR_60 ; } else { VAR_61 -> VAR_62 = "unimacMIIbus" ; VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 = VAR_68 ; } VAR_69 -> VAR_70 = & VAR_71 -> VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ; VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = VAR_81 ; METHOD_7 ( VAR_82 -> VAR_83 , VAR_84 , "%s-%d" , VAR_85 -> VAR_86 , VAR_87 -> VAR_88 ) ; VAR_89 = METHOD_8 ( VAR_90 , VAR_91 ) ; if ( VAR_92 ) { METHOD_9 ( & VAR_93 -> VAR_94 , "MDIObusregistrationfailed\\n" ) ; goto VAR_95 ; } METHOD_10 ( VAR_96 , VAR_97 ) ; METHOD_11 ( & VAR_98 -> VAR_99 , "BroadcomUniMACMDIObusat0x%p\\n" , VAR_100 -> VAR_101 ) ; return 0 ; VAR_102 : METHOD_12 ( VAR_103 ) ; return VAR_104 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) return VAR_7 ; if ( ! METHOD_1 ( VAR_8 ) ) return VAR_9 ; if ( VAR_10 -> VAR_11 -> VAR_12 != VAR_13 ) return VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; VAR_18 = ( TYPE_3 * ) VAR_19 -> VAR_20 ; if ( VAR_21 -> VAR_22 == VAR_23 ) VAR_24 -> VAR_25 = METHOD_2 ( VAR_26 , VAR_27 , VAR_28 ) ; if ( METHOD_3 ( VAR_29 -> VAR_30 ) < 0 ) { if ( ! VAR_31 ) VAR_32 = VAR_33 ; METHOD_4 ( VAR_34 , "Authenticationfailure,checkcredentials.\\n" "Ifcredentialsarevalid,theNTLMSSPimplementationmaybetoblame.\\n" ) ; METHOD_5 ( VAR_35 -> VAR_36 ) ;  return VAR_37 ;  } METHOD_6 ( VAR_38 -> VAR_39 ) ; return VAR_40 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 VAR_3 ; TYPE_1 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , & VAR_7 ) ; if ( VAR_8 ) goto VAR_9 ; VAR_10 = METHOD_2 ( VAR_11 , & VAR_12 -> VAR_13 , VAR_14 ) ; if ( VAR_15 ) goto VAR_16 ; VAR_17 = METHOD_3 ( VAR_18 ) ; if ( VAR_19 ) goto VAR_20 ;  VAR_21 = METHOD_4 ( VAR_22 , VAR_23 , & VAR_24 -> VAR_25 ) ;  VAR_26 : return VAR_27 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) {  return METHOD_1 ( STRUCT_OR_UNION_2 , STRUCT_OR_UNION_3 -> VAR_1 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; const TYPE_4 * VAR_5 ; TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; unsigned TYPE_6 VAR_10 [ VAR_11 ] , VAR_12 [ VAR_13 ] , * VAR_14 = VAR_15 ; TYPE_7 VAR_16 ; METHOD_1 ( VAR_17 , VAR_18 , "13" , & VAR_19 , & VAR_20 , & VAR_21 , & VAR_22 ) ; METHOD_2 ( VAR_23 ) ; if ( ! METHOD_3 ( VAR_24 ) ) { METHOD_4 ( VAR_25 ) ; if ( METHOD_5 ( VAR_26 ) != VAR_27 ) METHOD_6 ( VAR_28 , "saltmustbean8-octetstring" ) ; VAR_29 = ( unsigned TYPE_8 * ) METHOD_7 ( VAR_30 ) ; } VAR_31 = METHOD_8 ( VAR_32 ) ? 2048 : METHOD_9 ( VAR_33 ) ; VAR_34 = METHOD_10 ( VAR_35 ) ? METHOD_11 ( ) : METHOD_12 ( VAR_36 ) ; METHOD_13 ( VAR_37 , VAR_38 ) ; METHOD_14 ( METHOD_15 ( VAR_39 ) , VAR_40 , VAR_41 , ( unsigned TYPE_9 * ) METHOD_16 ( VAR_42 ) , METHOD_17 ( VAR_43 ) , VAR_44 , VAR_45 , VAR_46 ) ; if ( METHOD_18 ( VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 , - 1 ) != 1 ) METHOD_19 ( VAR_52 , VAR_53 ) ; METHOD_20 ( VAR_54 , sizeof VAR_55 ) ; METHOD_21 ( VAR_56 , sizeof VAR_57 ) ;  return VAR_58 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , const TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; if ( VAR_8 -> VAR_9 & ( VAR_10 | VAR_11 ) ) {  return VAR_12 ;  } if ( ! METHOD_1 ( VAR_13 , VAR_14 -> VAR_15 ,  VAR_16 ) ) {  return VAR_17 ; } if ( ! METHOD_2 ( VAR_18 -> VAR_19 , VAR_20 ) ) { * VAR_21 = "EVIDENCE_TKT_NOT_FORWARDABLE" ; return VAR_22 ; } VAR_23 = METHOD_3 ( VAR_24 , VAR_25 -> VAR_26 , VAR_27 , VAR_28 ) ; if ( VAR_29 ) { * VAR_30 = "NOT_ALLOWED_TO_DELEGATE" ; return VAR_31 ; } return 0 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_2 ( VAR_7 ) ; METHOD_3 ( & VAR_8 -> VAR_9 , 0 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; if ( METHOD_4 ( ! ( VAR_10 -> VAR_11 & VAR_12 ) ) ) { * VAR_13 = * METHOD_5 ( ) ; VAR_14 -> VAR_15 = 0 ; if ( VAR_16 ) VAR_17 -> VAR_18 = VAR_19 ; } else { METHOD_6 ( VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_21 -> VAR_22 . VAR_23 = VAR_24 ; VAR_25 -> VAR_26 . VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = VAR_31 ; } VAR_32 -> VAR_33 . VAR_34 = ( unsigned TYPE_4 ) VAR_35 ; VAR_36 -> VAR_37 . VAR_38 = ( unsigned TYPE_5 ) VAR_39 ; METHOD_7 ( VAR_40 ) ; if ( VAR_41 & VAR_42 )  VAR_43 -> VAR_44 = VAR_45 -> VAR_46 ;  METHOD_8 ( VAR_47 , VAR_48 ) ; return 0 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 * VAR_2 ;  VAR_3 * VAR_4 ; METHOD_1 ( 100 , ( "jas_stream_memopen(%p,%d)\\n" , VAR_5 , VAR_6 ) ) ;  if ( ! ( VAR_7 = METHOD_2 ( ) ) ) {  return 0 ; } VAR_8 -> VAR_9 = VAR_10 | VAR_11 | VAR_12 ; METHOD_3 ( VAR_13 , VAR_14 , 0 , 0 ) ; VAR_15 -> VAR_16 = & VAR_17 ; if ( ! ( VAR_18 = METHOD_4 ( sizeof ( VAR_19 ) ) ) ) { METHOD_5 ( VAR_20 ) ; return 0 ; } VAR_21 -> VAR_22 = ( TYPE_4 * ) VAR_23 ; VAR_24 -> VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; if ( VAR_28 <= 0 ) {  VAR_29 -> VAR_30 = 1024 ;  VAR_31 -> VAR_32 = 1 ; } else {  VAR_33 -> VAR_34 = VAR_35 ;   VAR_36 -> VAR_37 = 0 ;  } if ( VAR_38 ) { VAR_39 -> VAR_40 = ( unsigned TYPE_5 * ) VAR_41 ; } else { VAR_42 -> VAR_43 = METHOD_6 ( VAR_44 -> VAR_45 ) ; VAR_46 -> VAR_47 = 1 ; } if ( ! VAR_48 -> VAR_49 ) { METHOD_7 ( VAR_50 ) ; return 0 ; } METHOD_8 ( 100 , ( "jas_stream_memopenbufferbuf=%pmyalloc=%d\\n" , VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ) ; if ( VAR_55 > 0 && VAR_56 ) { VAR_57 -> VAR_58 = VAR_59 ; } else { VAR_60 -> VAR_61 = 0 ; } VAR_62 -> VAR_63 = 0 ; return VAR_64 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 = 0 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 TYPE_10 ; TYPE_11 VAR_9 = 0 ;  TYPE_12 VAR_10 ;  VAR_11 = METHOD_1 ( VAR_12 ) ; METHOD_2 ( & VAR_13 , VAR_14 , 4 ) ; if ( ! METHOD_3 ( VAR_15 , ( ( TYPE_13 * ) & VAR_16 ) + 4 , sizeof ( TYPE_14 ) - 4 , & VAR_17 ) || VAR_18 != sizeof ( TYPE_15 ) - 4 || METHOD_4 ( VAR_19 . VAR_20 , VAR_21 , sizeof ( VAR_22 ) ) || METHOD_5 ( VAR_23 . VAR_24 , VAR_25 , sizeof ( VAR_26 ) ) ) { METHOD_6 ( "%sisnotavalid.W64file!" , VAR_27 ) ; return VAR_28 ; } else if ( ! ( VAR_29 -> VAR_30 & VAR_31 ) && ! METHOD_7 ( VAR_32 , & VAR_33 , sizeof ( VAR_34 ) ) ) { METHOD_8 ( "%s" , METHOD_9 ( VAR_35 ) ) ; return VAR_36 ; } if 1 METHOD_10 ( & VAR_37 , VAR_38 ) ; if ( VAR_39 && ! ( VAR_40 -> VAR_41 & VAR_42 ) && VAR_43 . VAR_44 && VAR_45 . VAR_46 + 1 && VAR_47 . VAR_48 != VAR_49 ) { METHOD_11 ( "%sisnotavalid.W64file!" , VAR_50 ) ; return VAR_51 ; } while ( 1 ) { if ( ! METHOD_12 ( VAR_52 , & VAR_53 , sizeof ( TYPE_16 ) , & VAR_54 ) || VAR_55 != sizeof ( TYPE_17 ) ) { METHOD_13 ( "%sisnotavalid.W64file!" , VAR_56 ) ; return VAR_57 ; } else if ( ! ( VAR_58 -> VAR_59 & VAR_60 ) && ! METHOD_14 ( VAR_61 , & VAR_62 , sizeof ( TYPE_18 ) ) ) { METHOD_15 ( "%s" , METHOD_16 ( VAR_63 ) ) ; return VAR_64 ; } METHOD_17 ( & VAR_65 , VAR_66 ) ; VAR_67 . VAR_68 -= sizeof ( VAR_69 ) ; if ( ! METHOD_18 ( VAR_70 . VAR_71 , VAR_72 , sizeof ( VAR_73 ) ) ) { TYPE_19 VAR_74 = VAR_75 , VAR_76 ; if ( VAR_77 ++ ) { METHOD_19 ( "%sisnotavalid.W64file!" , VAR_78 ) ; return VAR_79 ; } VAR_80 . VAR_81 = ( VAR_82 . VAR_83 + 7 ) & ~ 7L ; if ( VAR_84 . VAR_85 < 16 || VAR_86 . VAR_87 > sizeof ( TYPE_20 ) || ! METHOD_20 ( VAR_88 , & TYPE_21 , ( TYPE_22 ) VAR_89 . VAR_90 , & VAR_91 ) || VAR_92 != VAR_93 . VAR_94 ) { METHOD_21 ( "%sisnotavalid.W64file!" , VAR_95 ) ; return VAR_96 ; } else if ( ! ( VAR_97 -> VAR_98 & VAR_99 ) && ! METHOD_22 ( VAR_100 , & TYPE_23 , ( TYPE_24 ) VAR_101 . VAR_102 ) ) { METHOD_23 ( "%s" , METHOD_24 ( VAR_103 ) ) ; return VAR_104 ; } METHOD_25 ( & TYPE_25 , VAR_105 ) ; if ( VAR_106 ) { METHOD_26 ( "formattagsize=%d" , VAR_107 . VAR_108 ) ; METHOD_27 ( "FormatTag=%x,NumChannels=%d,BitsPerSample=%d" , TYPE_26 . VAR_109 , TYPE_27 . VAR_110 , TYPE_28 . VAR_111 ) ; METHOD_28 ( "BlockAlign=%d,SampleRate=%d,BytesPerSecond=%d" , TYPE_29 . VAR_112 , TYPE_30 . VAR_113 , TYPE_31 . VAR_114 ) ; if ( VAR_115 . VAR_116 > 16 ) METHOD_29 ( "cbSize=%d,ValidBitsPerSample=%d" , TYPE_32 . VAR_117 , TYPE_33 . VAR_118 ) ; if ( VAR_119 . VAR_120 > 20 ) METHOD_30 ( "ChannelMask=%x,SubFormat=%d" , TYPE_34 . VAR_121 , TYPE_35 . VAR_122 ) ; } if ( VAR_123 . VAR_124 > 16 && TYPE_36 . VAR_125 == 2 ) VAR_126 -> VAR_127 |= VAR_128 ; VAR_129 = ( TYPE_37 . VAR_130 == 0xfffe && VAR_131 . VAR_132 == 40 ) ? TYPE_38 . VAR_133 : TYPE_39 . VAR_134 ; VAR_135 -> VAR_136 = ( VAR_137 . VAR_138 == 40 && TYPE_40 . VAR_139 ) ? TYPE_41 . VAR_140 : TYPE_42 . VAR_141 ; if ( VAR_142 != 1 && VAR_143 != 3 ) VAR_144 = VAR_145 ; if ( VAR_146 == 3 && VAR_147 -> VAR_148 != 32 ) VAR_149 = VAR_150 ; if ( ! TYPE_43 . VAR_151 || TYPE_44 . VAR_152 > 256 || TYPE_45 . VAR_153 / TYPE_46 . VAR_154 < ( VAR_155 -> VAR_156 + 7 ) / 8 || TYPE_47 . VAR_157 / TYPE_48 . VAR_158 > 4 || TYPE_49 . VAR_159 % TYPE_50 . VAR_160 ) VAR_161 = VAR_162 ; if ( VAR_163 -> VAR_164 < 1 || VAR_165 -> VAR_166 > 32 ) VAR_167 = VAR_168 ; if ( ! VAR_169 ) { METHOD_31 ( "%sisanunsupported.W64format!" , VAR_170 ) ; return VAR_171 ; } if ( VAR_172 . VAR_173 < 40 ) { if ( ! VAR_174 -> VAR_175 && ! ( VAR_176 -> VAR_177 & VAR_178 ) ) { if ( TYPE_51 . VAR_179 <= 2 ) VAR_180 -> VAR_181 = 0x5 - TYPE_52 . VAR_182 ; else if ( TYPE_53 . VAR_183 <= 18 ) VAR_184 -> VAR_185 = ( 1 << TYPE_54 . VAR_186 ) - 1 ; else VAR_187 -> VAR_188 = 0x3ffff ; } } else if ( TYPE_55 . VAR_189 && ( VAR_190 -> VAR_191 || ( VAR_192 -> VAR_193 & VAR_194 ) ) ) { METHOD_32 ( "thisW64filealreadyhaschannelorderinformation!" ) ; return VAR_195 ; } else if ( TYPE_56 . VAR_196 ) VAR_197 -> VAR_198 = TYPE_57 . VAR_199 ; if ( VAR_200 == 3 ) VAR_201 -> VAR_202 = 127 ; else if ( ( VAR_203 -> VAR_204 & VAR_205 ) && TYPE_58 . VAR_206 / TYPE_59 . VAR_207 == 4 ) { if ( TYPE_60 . VAR_208 == 24 ) VAR_209 -> VAR_210 = 127 + 23 ; else if ( TYPE_61 . VAR_211 == 32 ) VAR_212 -> VAR_213 = 127 + 15 ; } if ( VAR_214 ) { if ( VAR_215 -> VAR_216 == 127 ) METHOD_33 ( "dataformat:normalized32-bitfloatingpoint" ) ; else METHOD_34 ( "dataformat:%d-bitintegersstoredin%dbyte(s)" , VAR_217 -> VAR_218 , TYPE_62 . VAR_219 / TYPE_63 . VAR_220 ) ; } } else if ( ! METHOD_35 ( VAR_221 . VAR_222 , VAR_223 , sizeof ( VAR_224 ) ) ) { if ( ! TYPE_64 . VAR_225 ) { METHOD_36 ( "%sisnotavalid.W64file!" , VAR_226 ) ; return VAR_227 ; } if ( ( VAR_228 -> VAR_229 & VAR_230 ) || VAR_231 . VAR_232 <= 0 ) { VAR_233 -> VAR_234 |= VAR_235 ; if ( VAR_236 && METHOD_37 ( VAR_237 ) != - 1 ) VAR_238 = ( VAR_239 - METHOD_38 ( VAR_240 ) ) / TYPE_65 . VAR_241 ; else VAR_242 = - 1 ; } else { if ( VAR_243 && VAR_244 - VAR_245 . VAR_246 > 16777216 ) { METHOD_39 ( "this.W64filehasover16MBofextraRIFFdata,probablyiscorrupt!" ) ; return VAR_247 ; } VAR_248 = VAR_249 . VAR_250 / TYPE_66 . VAR_251 ; if ( ! VAR_252 ) { METHOD_40 ( "this.W64filehasnoaudiosamples,probablyiscorrupt!" ) ; return VAR_253 ; } if ( VAR_254 > VAR_255 ) { METHOD_41 ( "%shastoomanysamplesforWavPack!" , VAR_256 ) ; return VAR_257 ; } } VAR_258 -> VAR_259 = TYPE_67 . VAR_260 / TYPE_68 . VAR_261 ; VAR_262 -> VAR_263 = TYPE_69 . VAR_264 ; VAR_265 -> VAR_266 = TYPE_70 . VAR_267 ; break ; } else { TYPE_71 VAR_268 = ( VAR_269 . VAR_270 + 7 ) & ~ 7L ; TYPE_72 * VAR_271 ; if ( VAR_272 < 0 || VAR_273 > 4194304 ) { METHOD_42 ( "%sisnotavalid.W64file!" , VAR_274 ) ; return VAR_275 ; } VAR_276 = METHOD_43 ( VAR_277 ) ; if ( VAR_278 ) METHOD_44 ( "extraunknownchunk\\"%c%c%c%c\\"of%dbytes" , VAR_279 . VAR_280 [ 0 ] , VAR_281 . VAR_282 [ 1 ] , VAR_283 . VAR_284 [ 2 ] , VAR_285 . VAR_286 [ 3 ] , VAR_287 . VAR_288 ) ; if ( ! METHOD_45 ( VAR_289 , VAR_290 , VAR_291 , & VAR_292 ) || VAR_293 != VAR_294 || ( ! ( VAR_295 -> VAR_296 & VAR_297 ) && ! METHOD_46 ( VAR_298 , VAR_299 , VAR_300 ) ) ) { METHOD_47 ( "%s" , METHOD_48 ( VAR_301 ) ) ; METHOD_49 ( VAR_302 ) ; return VAR_303 ; } METHOD_50 ( VAR_304 ) ; } } if ( ! METHOD_51 ( VAR_305 , VAR_306 , VAR_307 , VAR_308 ) ) { METHOD_52 ( "%s:%s" , VAR_309 , METHOD_53 ( VAR_310 ) ) ; return VAR_311 ; } return VAR_312 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 = STRUCT_OR_UNION_6 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_7 * VAR_6 = METHOD_1 ( STRUCT_OR_UNION_8 -> VAR_7 ) ; VAR_8 * VAR_9 ; if ( METHOD_2 ( STRUCT_OR_UNION_9 ) -> VAR_10 & VAR_11 ) return 0 ; if ( VAR_12 -> VAR_13 + VAR_14 -> VAR_15 > METHOD_3 ( STRUCT_OR_UNION_10 ) && ! METHOD_4 ( VAR_16 ) ) return 0 ; if ( METHOD_5 ( VAR_17 ) == VAR_18 )  VAR_19 = VAR_20 ;  else  VAR_21 = VAR_22 ;  return METHOD_6 ( VAR_23 , STRUCT_OR_UNION_11 , STRUCT_OR_UNION_12 -> VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 , 0 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 = ( TYPE_8 ) VAR_7 -> VAR_8 ; TYPE_9 VAR_9 = VAR_10 ; TYPE_10 * VAR_11 = VAR_12 , * VAR_13 = VAR_14 , * VAR_15 = VAR_16 , * * VAR_17 ; TYPE_11 VAR_18 [ 256 ] ; TYPE_12 VAR_19 ; TYPE_13 TYPE_14 TYPE_15 VAR_20 ; TYPE_16 VAR_21 , VAR_22 ; METHOD_1 ( VAR_23 ) ; METHOD_2 ( VAR_24 -> VAR_25 ) ; if ( VAR_26 != VAR_27 ) { METHOD_3 ( VAR_28 , "authrequestfromclient(mechanism=%s)" , VAR_29 ) ;  if ( ! METHOD_4 ( VAR_30 -> VAR_31 , VAR_32 ) ) {  METHOD_5 ( VAR_33 , "clientrequestedmechanism(%s)thatwedidn\'toffer" , VAR_34 ) ; METHOD_6 ( VAR_35 , METHOD_7 ( VAR_36 , VAR_37 , VAR_38 ) , 0 ) ; return ; } VAR_39 = METHOD_8 ( VAR_40 -> VAR_41 , VAR_42 , & VAR_43 ) ; if ( VAR_44 != VAR_45 ) { METHOD_9 ( VAR_46 , "gsasl_server_startfailed,nosaslforthisconn;(%d):%s" , VAR_47 , METHOD_10 ( VAR_48 ) ) ; METHOD_11 ( VAR_49 , METHOD_12 ( VAR_50 , VAR_51 , METHOD_13 ( VAR_52 ) ) , 0 ) ; return ; } ( VAR_53 -> VAR_54 ) ( VAR_55 , VAR_56 , ( TYPE_17 * * ) & VAR_57 , VAR_58 , VAR_59 -> VAR_60 ) ; VAR_61 = METHOD_14 ( VAR_62 ) ; if ( VAR_63 != VAR_64 ) METHOD_15 ( VAR_65 ) ; VAR_66 = ( TYPE_18 ) METHOD_16 ( 1 , sizeof ( struct STRUCT_OR_UNION_0 ) ) ; VAR_67 -> VAR_68 = VAR_69 ; VAR_70 -> VAR_71 = VAR_72 ; METHOD_17 ( VAR_73 , ( TYPE_19 * ) VAR_74 ) ; METHOD_18 ( VAR_75 , VAR_76 , VAR_77 -> VAR_78 ) ; METHOD_19 ( VAR_79 , VAR_80 , VAR_81 ) ; VAR_82 [ 0 ] = '\\0' ; METHOD_20 ( VAR_83 , 256 ) ; VAR_84 [ 255 ] = '\\0' ; METHOD_21 ( VAR_85 , VAR_86 , VAR_87 ) ; VAR_88 = VAR_89 ; TYPE_20 TYPE_21 for ( VAR_90 = 0 ; VAR_91 < VAR_92 -> VAR_93 -> VAR_94 ; VAR_95 ++ ) if ( VAR_96 -> VAR_97 -> VAR_98 [ VAR_99 ] -> VAR_100 == VAR_101 && VAR_102 -> VAR_103 [ VAR_104 -> VAR_105 -> VAR_106 [ VAR_107 ] -> VAR_108 ] != VAR_109 ) VAR_110 = ( ( TYPE_22 ) VAR_111 -> VAR_112 [ VAR_113 -> VAR_114 -> VAR_115 [ VAR_116 ] -> VAR_117 ] ) -> VAR_118 ; if ( VAR_119 != VAR_120 ) { for ( VAR_121 = 0 ; VAR_122 < VAR_123 ; VAR_124 ++ ) if ( VAR_125 [ VAR_126 ] != VAR_127 ) { VAR_128 -> VAR_129 [ VAR_130 ] = METHOD_22 ( VAR_131 [ VAR_132 ] ) ; } else { VAR_133 -> VAR_134 [ VAR_135 ] = VAR_136 ; break ; } } METHOD_23 ( VAR_137 , "saslcontextinitialisedfor%d" , VAR_138 -> VAR_139 ) ; VAR_140 -> VAR_141 [ VAR_142 -> VAR_143 ] = ( TYPE_23 * ) VAR_144 ; if ( METHOD_24 ( VAR_145 , "ANONYMOUS" ) == 0 ) { ( VAR_146 -> VAR_147 ) ( VAR_148 , VAR_149 , ( TYPE_24 * * ) & VAR_150 , VAR_151 , VAR_152 -> VAR_153 ) ; VAR_154 = METHOD_25 ( VAR_155 ) ; VAR_156 = METHOD_26 ( VAR_157 ) ; } else if ( METHOD_27 ( VAR_158 , "<" ) != VAR_159 && METHOD_28 ( VAR_160 , "=" , METHOD_29 ( VAR_161 , "<" ) - VAR_162 ) == 0 ) { METHOD_30 ( VAR_163 , "gsaslauthstringisempty" ) ; VAR_164 = METHOD_31 ( "" ) ; VAR_165 = METHOD_32 ( VAR_166 ) ; } else { VAR_167 = METHOD_33 ( VAR_168 , VAR_169 , & VAR_170 , & VAR_171 ) ; if ( VAR_172 != VAR_173 ) { METHOD_34 ( VAR_174 , "gsasl_base64_fromfailed,nosaslforthisconn;(%d):%s" , VAR_175 , METHOD_35 ( VAR_176 ) ) ; METHOD_36 ( VAR_177 , METHOD_37 ( VAR_178 , VAR_179 , METHOD_38 ( VAR_180 ) ) , 0 ) ; if ( VAR_181 != VAR_182 ) METHOD_39 ( VAR_183 ) ; return ; } } VAR_184 = METHOD_40 ( VAR_185 , VAR_186 , VAR_187 , & VAR_188 , & VAR_189 ) ; } else { VAR_190 = METHOD_41 ( VAR_191 , VAR_192 , & VAR_193 , & VAR_194 ) ; if ( VAR_195 != VAR_196 ) { METHOD_42 ( VAR_197 , "gsasl_base64_fromfailed,nosaslforthisconn;(%d):%s" , VAR_198 , METHOD_43 ( VAR_199 ) ) ; METHOD_44 ( VAR_200 , METHOD_45 ( VAR_201 , VAR_202 , METHOD_46 ( VAR_203 ) ) , 0 ) ; return ; } if ( ! VAR_204 ) { METHOD_47 ( VAR_205 , "responsesendbeforeauthrequestenablingmechanism(decoded:%.*s)" , VAR_206 , VAR_207 ) ; METHOD_48 ( VAR_208 , METHOD_49 ( VAR_209 , VAR_210 , "responsesendbeforeauthrequestenablingmechanism" ) , 0 ) ; if ( VAR_211 != VAR_212 ) METHOD_50 ( VAR_213 ) ; return ; } METHOD_51 ( VAR_214 , "responsefromclient(decoded:%.*s)" , VAR_215 , VAR_216 ) ; VAR_217 = METHOD_52 ( VAR_218 , VAR_219 , VAR_220 , & VAR_221 , & VAR_222 ) ; } if ( VAR_223 != VAR_224 ) METHOD_53 ( VAR_225 ) ; if ( VAR_226 == VAR_227 ) { METHOD_54 ( VAR_228 , "saslhandshakecompleted" ) ; VAR_229 = METHOD_55 ( VAR_230 , VAR_231 , & VAR_232 , & VAR_233 ) ; if ( VAR_234 == VAR_235 ) { METHOD_56 ( VAR_236 , METHOD_57 ( VAR_237 , VAR_238 , VAR_239 ) , 0 ) ; METHOD_58 ( VAR_240 ) ; ( ( TYPE_25 ) VAR_241 -> VAR_242 -> VAR_243 -> VAR_244 ) -> VAR_245 = VAR_246 ; ( ( TYPE_26 ) VAR_247 -> VAR_248 -> VAR_249 -> VAR_250 ) -> VAR_251 = ( TYPE_27 * ) VAR_252 ; } else { METHOD_59 ( VAR_253 , "gsasl_base64_tofailed,nosaslforthisconn;(%d):%s" , VAR_254 , METHOD_60 ( VAR_255 ) ) ; METHOD_61 ( VAR_256 , METHOD_62 ( VAR_257 , VAR_258 , METHOD_63 ( VAR_259 ) ) , 0 ) ; if ( VAR_260 != VAR_261 ) METHOD_64 ( VAR_262 ) ; } if ( VAR_263 != VAR_264 ) METHOD_65 ( VAR_265 ) ; return ; } if ( VAR_266 == VAR_267 ) { METHOD_66 ( VAR_268 , "saslhandshakeinprogress(challenge:%.*s)" , VAR_269 , VAR_270 ) ; VAR_271 = METHOD_67 ( VAR_272 , VAR_273 , & VAR_274 , & VAR_275 ) ; if ( VAR_276 == VAR_277 ) { METHOD_68 ( VAR_278 , METHOD_69 ( VAR_279 , VAR_280 , VAR_281 ) , 0 ) ; METHOD_70 ( VAR_282 ) ; } else { METHOD_71 ( VAR_283 , "gsasl_base64_tofailed,nosaslforthisconn;(%d):%s" , VAR_284 , METHOD_72 ( VAR_285 ) ) ; METHOD_73 ( VAR_286 , METHOD_74 ( VAR_287 , VAR_288 , METHOD_75 ( VAR_289 ) ) , 0 ) ; if ( VAR_290 != VAR_291 ) METHOD_76 ( VAR_292 ) ; } if ( VAR_293 != VAR_294 ) METHOD_77 ( VAR_295 ) ; return ; } if ( VAR_296 != VAR_297 ) METHOD_78 ( VAR_298 ) ; METHOD_79 ( VAR_299 , "saslhandshakefailed;(%d):%s" , VAR_300 , METHOD_80 ( VAR_301 ) ) ; switch ( VAR_302 ) { case VAR_303 : case VAR_304 : case VAR_305 : case VAR_306 : case VAR_307 : case VAR_308 : case VAR_309 : case VAR_310 : case VAR_311 : VAR_312 = VAR_313 ; break ; case VAR_314 : case VAR_315 : VAR_316 = VAR_317 ; break ; case VAR_318 : VAR_319 = VAR_320 ; break ; default : VAR_321 = VAR_322 ; } METHOD_81 ( VAR_323 , METHOD_82 ( VAR_324 , VAR_325 , METHOD_83 ( VAR_326 ) ) , 0 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_4 VAR_11 , VAR_12 , VAR_13 , VAR_14 ; if ( VAR_15 [ VAR_16 ] . VAR_17 != VAR_18 ) { if ( VAR_19 && VAR_20 == 0 && METHOD_1 ( VAR_21 [ VAR_22 ] ) ) return 0 ; METHOD_2 ( VAR_23 , "R%dtype=%sexpected=%s\\n" , VAR_24 , VAR_25 [ VAR_26 [ VAR_27 ] . VAR_28 ] , VAR_29 [ VAR_30 ] ) ; return - VAR_31 ; } if ( ! METHOD_3 ( VAR_32 [ VAR_33 ] . VAR_34 ) ) { TYPE_5 VAR_35 [ 48 ] ; METHOD_4 ( VAR_36 , sizeof ( VAR_37 ) , VAR_38 [ VAR_39 ] . VAR_40 ) ; METHOD_5 ( VAR_41 , "invalidvariablestackreadR%dvar_off=%s\\n" , VAR_42 , VAR_43 ) ;  }  VAR_44 = VAR_45 [ VAR_46 ] . VAR_47 + VAR_48 [ VAR_49 ] . VAR_50 . VAR_51 ; if ( VAR_52 >= 0 || VAR_53 < - VAR_54 || VAR_55 + VAR_56 > 0 || VAR_57 < 0 || ( VAR_58 == 0 && ! VAR_59 ) ) { METHOD_6 ( VAR_60 , "invalidstacktypeR%doff=%daccess_size=%d\\n" , VAR_61 , VAR_62 , VAR_63 ) ; return - VAR_64 ; } if ( VAR_65 -> VAR_66 -> VAR_67 -> VAR_68 < - VAR_69 ) VAR_70 -> VAR_71 -> VAR_72 -> VAR_73 = - VAR_74 ; if ( VAR_75 && VAR_76 -> VAR_77 ) { VAR_78 -> VAR_79 = VAR_80 ; VAR_81 -> VAR_82 = VAR_83 ; return 0 ; } for ( VAR_84 = 0 ; VAR_85 < VAR_86 ; VAR_87 ++ ) { VAR_88 = - ( VAR_89 + VAR_90 ) - 1 ; VAR_91 = VAR_92 / VAR_93 ; if ( VAR_94 -> VAR_95 <= VAR_96 || VAR_97 -> VAR_98 [ VAR_99 ] . VAR_100 [ VAR_101 % VAR_102 ] != VAR_103 ) { METHOD_7 ( VAR_104 , "invalidindirectreadfromstackoff%d+%dsize%d\\n" , VAR_105 , VAR_106 , VAR_107 ) ; return - VAR_108 ; } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; if ( ! VAR_10 || ! VAR_11 || ! VAR_12 ) { METHOD_1 ( VAR_13 -> VAR_14 , VAR_15 , "ExifMnoteDataFuji" , "ShortMakerNote" ) ; return ; } VAR_16 = 6 + VAR_17 -> VAR_18 ; if ( METHOD_2 ( VAR_19 , VAR_20 , 12 ) ) { METHOD_3 ( VAR_21 -> VAR_22 , VAR_23 , "ExifMnoteDataFuji" , "ShortMakerNote" ) ; return ; } VAR_24 -> VAR_25 = VAR_26 ; VAR_27 += METHOD_4 ( VAR_28 + VAR_29 + 8 , VAR_30 ) ; if ( METHOD_5 ( VAR_31 , VAR_32 , 2 ) ) { METHOD_6 ( VAR_33 -> VAR_34 , VAR_35 , "ExifMnoteDataFuji" , "ShortMakerNote" ) ; return ; } VAR_36 = METHOD_7 ( VAR_37 + VAR_38 , VAR_39 ) ; VAR_40 += 2 ; METHOD_8 ( VAR_41 ) ; VAR_42 -> VAR_43 = METHOD_9 ( VAR_44 -> VAR_45 , sizeof ( VAR_46 ) * VAR_47 ) ; if ( ! VAR_48 -> VAR_49 ) { METHOD_10 ( VAR_50 -> VAR_51 , "ExifMnoteDataFuji" , sizeof ( VAR_52 ) * VAR_53 ) ; return ; } VAR_54 = 0 ; for ( VAR_55 = VAR_56 , VAR_57 = VAR_58 ; VAR_59 ; -- VAR_60 , VAR_61 += 12 ) { TYPE_8 VAR_62 ;  if ( METHOD_11 ( VAR_63 , VAR_64 , 12 ) ) {  METHOD_12 ( VAR_65 -> VAR_66 , VAR_67 , "ExifMnoteDataFuji" , "ShortMakerNote" ) ; break ; } VAR_68 -> VAR_69 [ VAR_70 ] . VAR_71 = METHOD_13 ( VAR_72 + VAR_73 , VAR_74 -> VAR_75 ) ; VAR_76 -> VAR_77 [ VAR_78 ] . VAR_79 = METHOD_14 ( VAR_80 + VAR_81 + 2 , VAR_82 -> VAR_83 ) ; VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 = METHOD_15 ( VAR_88 + VAR_89 + 4 , VAR_90 -> VAR_91 ) ; VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 = VAR_96 -> VAR_97 ; METHOD_16 ( VAR_98 -> VAR_99 , VAR_100 , "ExifMnoteDataFuji" , "Loadingentry0x%x(\'%s\')..." , VAR_101 -> VAR_102 [ VAR_103 ] . VAR_104 , METHOD_17 ( VAR_105 -> VAR_106 [ VAR_107 ] . VAR_108 ) ) ; if ( METHOD_18 ( VAR_109 -> VAR_110 [ VAR_111 ] . VAR_112 ) && VAR_113 / METHOD_19 ( VAR_114 -> VAR_115 [ VAR_116 ] . VAR_117 ) < VAR_118 -> VAR_119 [ VAR_120 ] . VAR_121 ) { METHOD_20 ( VAR_122 -> VAR_123 , VAR_124 , "ExifMnoteDataFuji" , "Tagsizeoverflowdetected(%u*%lu)" , METHOD_21 ( VAR_125 -> VAR_126 [ VAR_127 ] . VAR_128 ) , VAR_129 -> VAR_130 [ VAR_131 ] . VAR_132 ) ; continue ; } VAR_133 = METHOD_22 ( VAR_134 -> VAR_135 [ VAR_136 ] . VAR_137 ) * VAR_138 -> VAR_139 [ VAR_140 ] . VAR_141 ; VAR_142 -> VAR_143 [ VAR_144 ] . VAR_145 = VAR_146 ; if ( VAR_147 ) { TYPE_9 VAR_148 = VAR_149 + 8 ; if ( VAR_150 > 4 ) VAR_151 = METHOD_23 ( VAR_152 + VAR_153 , VAR_154 -> VAR_155 ) + 6 + VAR_156 -> VAR_157 ; if ( METHOD_24 ( VAR_158 , VAR_159 , VAR_160 ) ) { METHOD_25 ( VAR_161 -> VAR_162 , VAR_163 , "ExifMnoteDataFuji" , "Tagdatapastendof" "buffer(%u>=%u)" , ( unsigned ) ( VAR_164 + VAR_165 ) , VAR_166 ) ; continue ; } VAR_167 -> VAR_168 [ VAR_169 ] . VAR_170 = METHOD_26 ( VAR_171 -> VAR_172 , VAR_173 ) ; if ( ! VAR_174 -> VAR_175 [ VAR_176 ] . VAR_177 ) { METHOD_27 ( VAR_178 -> VAR_179 , "ExifMnoteDataFuji" , VAR_180 ) ; continue ; } METHOD_28 ( VAR_181 -> VAR_182 [ VAR_183 ] . VAR_184 , VAR_185 + VAR_186 , VAR_187 ) ; } ++ VAR_188 ; } VAR_189 -> VAR_190 = VAR_191 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 )  {  if ( METHOD_1 ( ) == VAR_1 ) return VAR_2 ; return METHOD_2 ( VAR_3 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 ) { const struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 ; TYPE_4 VAR_9 , VAR_10 ; unsigned TYPE_5 VAR_11 ; TYPE_6 VAR_12 ; TYPE_7 VAR_13 ; VAR_14 * VAR_15 ; if ( VAR_16 -> VAR_17 != 0 ) return 0 ; if ( ! METHOD_1 ( VAR_18 , VAR_19 -> VAR_20 ) ) return - 1 ; VAR_21 = VAR_22 -> VAR_23 - VAR_24 ; if ( VAR_25 < ( TYPE_8 ) sizeof ( struct STRUCT_OR_UNION_4 ) ) return - 1 ; VAR_26 = ( struct STRUCT_OR_UNION_5 * ) ( METHOD_2 ( VAR_27 ) + VAR_28 ) ; VAR_29 = VAR_30 -> VAR_31 * 4 ;  if ( VAR_32 < VAR_33 )  return - 1 ; if ( VAR_34 -> VAR_35 == VAR_36 ) { struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 = METHOD_3 ( VAR_37 ) ; unsigned TYPE_9 VAR_38 = METHOD_4 ( STRUCT_OR_UNION_8 , VAR_39 , VAR_40 ) ; unsigned TYPE_10 VAR_41 = METHOD_5 ( METHOD_6 ( METHOD_7 ( VAR_42 ) ) , VAR_43 ) ; if ( VAR_44 <= VAR_45 ) { METHOD_8 ( "unknownorinvalidpath-MTU(%u)\\n" , VAR_46 ) ; return - 1 ; } VAR_47 = VAR_48 - VAR_49 ; } else VAR_50 = VAR_51 -> VAR_52 ; VAR_53 = ( TYPE_11 * ) VAR_54 ; for ( VAR_55 = sizeof ( struct STRUCT_OR_UNION_9 ) ; VAR_56 <= VAR_57 - VAR_58 ; VAR_59 += METHOD_9 ( VAR_60 , VAR_61 ) ) { if ( VAR_62 [ VAR_63 ] == VAR_64 && VAR_65 [ VAR_66 + 1 ] == VAR_67 ) { TYPE_12 VAR_68 ; VAR_69 = ( VAR_70 [ VAR_71 + 2 ] << 8 ) | VAR_72 [ VAR_73 + 3 ] ; if ( VAR_74 <= VAR_75 ) return 0 ; VAR_76 [ VAR_77 + 2 ] = ( VAR_78 & 0xff00 ) >> 8 ; VAR_79 [ VAR_80 + 3 ] = VAR_81 & 0x00ff ; METHOD_10 ( & VAR_82 -> VAR_83 , VAR_84 , METHOD_11 ( VAR_85 ) , METHOD_12 ( VAR_86 ) , VAR_87 ) ; return 0 ; } } if ( VAR_88 > VAR_89 ) return 0 ;  if ( METHOD_13 ( VAR_90 ) < VAR_91 ) {  if ( METHOD_14 ( VAR_92 , 0 , VAR_93 - METHOD_15 ( VAR_94 ) , VAR_95 ) ) return - 1 ; VAR_96 = ( struct STRUCT_OR_UNION_10 * ) ( METHOD_16 ( VAR_97 ) + VAR_98 ) ; } METHOD_17 ( VAR_99 , VAR_100 ) ; if ( METHOD_18 ( VAR_101 ) == VAR_102 ) VAR_103 = METHOD_19 ( VAR_104 , ( TYPE_13 ) 536 ) ; else VAR_105 = METHOD_20 ( VAR_106 , ( TYPE_14 ) 1220 ) ; VAR_107 = ( TYPE_15 * ) VAR_108 + sizeof ( struct STRUCT_OR_UNION_11 ) ; METHOD_21 ( VAR_109 + VAR_110 , VAR_111 , VAR_112 - sizeof ( struct STRUCT_OR_UNION_12 ) ) ; METHOD_22 ( & VAR_113 -> VAR_114 , VAR_115 , METHOD_23 ( VAR_116 ) , METHOD_24 ( VAR_117 + VAR_118 ) , VAR_119 ) ; VAR_120 [ 0 ] = VAR_121 ; VAR_122 [ 1 ] = VAR_123 ; VAR_124 [ 2 ] = ( VAR_125 & 0xff00 ) >> 8 ; VAR_126 [ 3 ] = VAR_127 & 0x00ff ; METHOD_25 ( & VAR_128 -> VAR_129 , VAR_130 , 0 , * ( ( TYPE_16 * ) VAR_131 ) , VAR_132 ) ; VAR_133 = ( ( TYPE_17 * ) VAR_134 ) [ 6 ] ; VAR_135 -> VAR_136 += VAR_137 / 4 ; METHOD_26 ( & VAR_138 -> VAR_139 , VAR_140 , VAR_141 , ( ( TYPE_18 * ) VAR_142 ) [ 6 ] , VAR_143 ) ; return VAR_144 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 ( * METHOD_1 ) ( struct STRUCT_OR_UNION_1 * ) ) { struct STRUCT_OR_UNION_2 * VAR_1 ; struct STRUCT_OR_UNION_3 * VAR_2 = ( struct STRUCT_OR_UNION_4 * ) METHOD_2 ( VAR_3 ) ; struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 -> VAR_6 ? METHOD_3 ( VAR_7 -> VAR_8 ) : VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; unsigned TYPE_2 VAR_12 , VAR_13 , VAR_14 , VAR_15 ; TYPE_3 VAR_16 = 0 ; TYPE_4 VAR_17 , VAR_18 = 0 , VAR_19 = 0 ; VAR_20 * VAR_21 , VAR_22 = 0 ; struct STRUCT_OR_UNION_8 * STRUCT_OR_UNION_9 = METHOD_4 ( METHOD_5 ( VAR_23 ) -> VAR_24 ) ; VAR_25 = METHOD_6 ( VAR_26 , & VAR_27 ) ; VAR_28 = * VAR_29 ; VAR_30 = METHOD_7 ( VAR_31 ) ; if ( ! VAR_32 -> VAR_33 && VAR_34 -> VAR_35 > VAR_36 ) { VAR_37 -> VAR_38 = METHOD_8 ( VAR_39 ) -> VAR_40 ; METHOD_9 ( VAR_41 , VAR_42 , 0 , VAR_43 ) ; METHOD_10 ( STRUCT_OR_UNION_10 , METHOD_11 ( METHOD_12 ( VAR_44 ) ) , VAR_45 ) ; METHOD_13 ( VAR_46 ) ; return - VAR_47 ; } if ( VAR_48 && VAR_49 -> VAR_50 < VAR_51 ) { if ( VAR_52 -> VAR_53 ) VAR_54 = VAR_55 -> VAR_56 ; } VAR_57 -= VAR_58 + sizeof ( struct STRUCT_OR_UNION_11 ) ; if ( METHOD_14 ( VAR_59 ) ) { TYPE_5 VAR_60 = METHOD_15 ( VAR_61 ) ; struct STRUCT_OR_UNION_12 * VAR_62 ; if ( VAR_63 - VAR_64 > VAR_65 || ( ( VAR_66 - VAR_67 ) & 7 ) || METHOD_16 ( VAR_68 ) ) goto VAR_69 ; METHOD_17 ( VAR_70 , VAR_71 ) { if ( VAR_72 -> VAR_73 > VAR_74 || ( ( VAR_75 -> VAR_76 & 7 ) && VAR_77 -> VAR_78 ) || METHOD_18 ( VAR_79 ) < VAR_80 ) goto VAR_81 ; if ( METHOD_19 ( VAR_82 ) ) goto VAR_83 ; METHOD_20 ( VAR_84 -> VAR_85 ) ; if ( VAR_86 -> VAR_87 ) { VAR_88 -> VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 = VAR_94 ; } VAR_95 -> VAR_96 -= VAR_97 -> VAR_98 ; } VAR_99 = 0 ; VAR_100 = 0 ; VAR_101 = METHOD_21 ( VAR_102 ) -> VAR_103 ; METHOD_22 ( VAR_104 ) ; * VAR_105 = VAR_106 ; VAR_107 = METHOD_23 ( METHOD_24 ( VAR_108 ) , VAR_109 , VAR_110 ) ; if ( ! VAR_111 ) { METHOD_25 ( STRUCT_OR_UNION_13 , METHOD_26 ( METHOD_27 ( VAR_112 ) ) , VAR_113 ) ; return - VAR_114 ; } METHOD_28 ( VAR_115 , VAR_116 ) ; VAR_117 = ( struct STRUCT_OR_UNION_14 * ) METHOD_29 ( VAR_118 , sizeof ( struct STRUCT_OR_UNION_15 ) ) ; METHOD_30 ( VAR_119 , VAR_120 ) ; METHOD_31 ( VAR_121 ) ; METHOD_32 ( METHOD_33 ( VAR_122 ) , VAR_123 , VAR_124 ) ;  METHOD_34 ( VAR_125 ) ;  VAR_126 -> VAR_127 = VAR_128 ; VAR_129 -> VAR_130 = 0 ; VAR_131 -> VAR_132 = METHOD_35 ( VAR_133 ) ; VAR_134 = VAR_135 -> VAR_136 ; VAR_137 = METHOD_36 ( VAR_138 ) ; VAR_139 -> VAR_140 = VAR_141 - METHOD_37 ( VAR_142 ) ; VAR_143 -> VAR_144 = VAR_145 ; METHOD_38 ( VAR_146 ) -> VAR_147 = METHOD_39 ( VAR_148 - sizeof ( struct STRUCT_OR_UNION_16 ) ) ; METHOD_40 ( & VAR_149 -> VAR_150 ) ; for ( ; ; ) { if ( VAR_151 ) { VAR_152 -> VAR_153 = VAR_154 ; METHOD_41 ( VAR_155 ) ; VAR_156 = ( struct STRUCT_OR_UNION_17 * ) METHOD_42 ( VAR_157 , sizeof ( struct STRUCT_OR_UNION_18 ) ) ; METHOD_43 ( VAR_158 , VAR_159 ) ; METHOD_44 ( VAR_160 ) ; METHOD_45 ( METHOD_46 ( VAR_161 ) , VAR_162 , VAR_163 ) ; VAR_164 += VAR_165 -> VAR_166 - VAR_167 - sizeof ( struct STRUCT_OR_UNION_19 ) ; VAR_168 -> VAR_169 = VAR_170 ; VAR_171 -> VAR_172 = 0 ; VAR_173 -> VAR_174 = METHOD_47 ( VAR_175 ) ; if ( VAR_176 -> VAR_177 != VAR_178 ) VAR_179 -> VAR_180 |= METHOD_48 ( VAR_181 ) ; VAR_182 -> VAR_183 = VAR_184 ; METHOD_49 ( VAR_185 ) -> VAR_186 = METHOD_50 ( VAR_187 -> VAR_188 - sizeof ( struct STRUCT_OR_UNION_20 ) ) ; METHOD_51 ( VAR_189 , VAR_190 ) ; } VAR_191 = METHOD_52 ( VAR_192 ) ; if ( ! VAR_193 ) METHOD_53 ( STRUCT_OR_UNION_21 , METHOD_54 ( & VAR_194 -> VAR_195 ) , VAR_196 ) ; if ( VAR_197 || ! VAR_198 ) break ; VAR_199 = VAR_200 ; VAR_201 = VAR_202 -> VAR_203 ; VAR_204 -> VAR_205 = VAR_206 ; } METHOD_55 ( VAR_207 ) ; if ( VAR_208 == 0 ) { METHOD_56 ( STRUCT_OR_UNION_22 , METHOD_57 ( & VAR_209 -> VAR_210 ) , VAR_211 ) ; METHOD_58 ( & VAR_212 -> VAR_213 ) ; return 0 ; } while ( VAR_214 ) { VAR_215 = VAR_216 -> VAR_217 ; METHOD_59 ( VAR_218 ) ; VAR_219 = VAR_220 ; } METHOD_60 ( STRUCT_OR_UNION_23 , METHOD_61 ( & VAR_221 -> VAR_222 ) , VAR_223 ) ; METHOD_62 ( & VAR_224 -> VAR_225 ) ; return VAR_226 ; VAR_227 : METHOD_63 ( VAR_228 , VAR_229 ) { if ( VAR_230 == VAR_231 ) break ; VAR_232 -> VAR_233 = VAR_234 ; VAR_235 -> VAR_236 = VAR_237 ; VAR_238 -> VAR_239 += VAR_240 -> VAR_241 ; } } VAR_242 : VAR_243 = VAR_244 -> VAR_245 - VAR_246 ; VAR_247 = VAR_248 ; * VAR_249 = VAR_250 ; while ( VAR_251 > 0 ) { VAR_252 = VAR_253 ; if ( VAR_254 > VAR_255 ) VAR_256 = VAR_257 ; if ( VAR_258 < VAR_259 ) { VAR_260 &= ~ 7 ; } if ( ( VAR_261 = METHOD_64 ( VAR_262 + VAR_263 + sizeof ( struct STRUCT_OR_UNION_24 ) + METHOD_65 ( VAR_264 -> VAR_265 . VAR_266 ) , VAR_267 ) ) == VAR_268 ) { NETDEBUG ( KERN_INFO "IPv6:frag:nomemoryfornewfragment!\\n" ) ; METHOD_66 ( STRUCT_OR_UNION_25 , METHOD_67 ( METHOD_68 ( VAR_269 ) ) , VAR_270 ) ; VAR_271 = - VAR_272 ; goto VAR_273 ; } METHOD_69 ( VAR_274 , VAR_275 ) ; METHOD_70 ( VAR_276 , METHOD_71 ( VAR_277 -> VAR_278 . VAR_279 ) ) ; METHOD_72 ( VAR_280 , VAR_281 + VAR_282 + sizeof ( struct STRUCT_OR_UNION_26 ) ) ; METHOD_73 ( VAR_283 ) ; VAR_284 = ( struct STRUCT_OR_UNION_27 * ) ( METHOD_74 ( VAR_285 ) + VAR_286 ) ; VAR_287 -> VAR_288 = ( VAR_289 -> VAR_290 + VAR_291 + sizeof ( struct STRUCT_OR_UNION_28 ) ) ; if ( VAR_292 -> VAR_293 ) METHOD_75 ( VAR_294 , VAR_295 -> VAR_296 ) ; METHOD_76 ( VAR_297 , METHOD_77 ( VAR_298 ) , VAR_299 ) ; VAR_300 -> VAR_301 = VAR_302 ; VAR_303 -> VAR_304 = 0 ; if ( ! VAR_305 ) {  METHOD_78 ( VAR_306 ) ;  VAR_307 = VAR_308 -> VAR_309 ; } else VAR_310 -> VAR_311 = VAR_312 ; if ( METHOD_79 ( VAR_313 , VAR_314 , METHOD_80 ( VAR_315 ) , VAR_316 ) ) METHOD_81 ( ) ; VAR_317 -= VAR_318 ; VAR_319 -> VAR_320 = METHOD_82 ( VAR_321 ) ; if ( VAR_322 > 0 ) VAR_323 -> VAR_324 |= METHOD_83 ( VAR_325 ) ; METHOD_84 ( VAR_326 ) -> VAR_327 = METHOD_85 ( VAR_328 -> VAR_329 - sizeof ( struct STRUCT_OR_UNION_29 ) ) ; VAR_330 += VAR_331 ; VAR_332 += VAR_333 ; VAR_334 = METHOD_86 ( VAR_335 ) ; if ( VAR_336 ) goto VAR_337 ; METHOD_87 ( STRUCT_OR_UNION_30 , METHOD_88 ( METHOD_89 ( VAR_338 ) ) , VAR_339 ) ; } METHOD_90 ( STRUCT_OR_UNION_31 , METHOD_91 ( METHOD_92 ( VAR_340 ) ) , VAR_341 ) ; METHOD_93 ( VAR_342 ) ; return VAR_343 ; VAR_344 : METHOD_94 ( STRUCT_OR_UNION_32 , METHOD_95 ( METHOD_96 ( VAR_345 ) ) , VAR_346 ) ; METHOD_97 ( VAR_347 ) ; return VAR_348 ; }
static TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 )  { TYPE_1 VAR_2 = METHOD_1 ( METHOD_2 ( VAR_3 ) -> VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 ;  TYPE_2 VAR_6 ;  VAR_7 = METHOD_3 ( VAR_8 , VAR_9 ) ;  if ( ! VAR_10 ) { METHOD_4 ( VAR_11 , "outofmemory" ) ; return ; }  VAR_12 = METHOD_5 ( VAR_13 , VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 ) ;  if ( VAR_19 ) {  METHOD_6 ( VAR_20 ) ;   if ( VAR_21 == - VAR_22 ) {  METHOD_7 ( VAR_23 , "alreadyincache" ) ;  VAR_24 = 0 ;  } } else { METHOD_8 ( VAR_25 , "inserting[%x]" , ( TYPE_3 ) VAR_26 ) ;  METHOD_9 ( VAR_27 ) ;  } }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 , VAR_6 ) ; TYPE_7 * VAR_7 ;  VAR_8 * VAR_9 ;  VAR_10 = METHOD_2 ( & VAR_11 , & VAR_12 -> VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ;  VAR_17 = METHOD_3 ( VAR_18 , VAR_19 , VAR_20 ) ;  VAR_21 -> VAR_22 . VAR_23 = METHOD_4 ( VAR_24 -> VAR_25 , VAR_26 ) ; return VAR_27 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 VAR_2 )  { if ( VAR_3 -> VAR_4 < METHOD_1 ( VAR_5 -> VAR_6 ) - 3 )   { VAR_7 -> VAR_8 [ VAR_9 -> VAR_10 ++ ] = VAR_11 ;   VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = ( VAR_16 >> 8 ) ;   VAR_17 -> VAR_18 [ VAR_19 -> VAR_20 ++ ] = ( VAR_21 >> 16 ) ;   } ;  }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; struct STRUCT_OR_UNION_0 * VAR_2 ; struct STRUCT_OR_UNION_1 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; if ( METHOD_2 ( VAR_9 ) ) return METHOD_3 ( VAR_10 ) ; METHOD_4 ( & VAR_11 , 0 , sizeof ( VAR_12 ) ) ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 . VAR_18 = VAR_19 ; VAR_20 = METHOD_5 ( VAR_21 , ( struct STRUCT_OR_UNION_2 * ) & VAR_22 ) ;  if ( VAR_23 || VAR_24 -> VAR_25 -> VAR_26 != VAR_27 )  VAR_28 = - VAR_29 ; METHOD_6 ( "addr%pI4ret%dnodetype%d\\n" , & VAR_30 , VAR_31 , VAR_32 -> VAR_33 ? VAR_34 -> VAR_35 -> VAR_36 : - 1 ) ; METHOD_7 ( VAR_37 ) ; return VAR_38 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_2 -> VAR_3 ) ;  struct STRUCT_OR_UNION_4 * VAR_4 = ( struct STRUCT_OR_UNION_5 * ) & VAR_5 -> VAR_6 [ 1 ] ;   struct STRUCT_OR_UNION_6 VAR_7 ;  METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_7 ) > sizeof ( VAR_8 -> VAR_9 ) - sizeof ( VAR_10 -> VAR_11 [ 0 ] ) ) ; VAR_12 . VAR_13 = VAR_14 -> VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 -> VAR_22 -> VAR_23 ; VAR_24 . VAR_25 = VAR_26 ;  if ( ! VAR_27 -> VAR_28 [ 0 ] ) {  VAR_29 -> VAR_30 [ 0 ] = 1 ; METHOD_3 ( VAR_31 , VAR_32 ) ; } ( TYPE_1 ) STRUCT_OR_UNION_8 ( STRUCT_OR_UNION_9 , VAR_33 , VAR_34 , & VAR_35 ) ; return VAR_36 -> VAR_37 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = - 1 ;  TYPE_5 * VAR_4 = METHOD_1 ( VAR_5 ) ;  VAR_6 = 0 ;  if ( METHOD_2 ( & VAR_7 , VAR_8 -> VAR_9 , VAR_10 , VAR_11 ) != VAR_12 )  METHOD_3 ( VAR_13 ) ;  VAR_14 :  return VAR_15 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 = METHOD_1 ( STRUCT_OR_UNION_3 -> VAR_2 ) ; struct STRUCT_OR_UNION_4 * VAR_3 = VAR_4 -> VAR_5 ;  struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_2 ( STRUCT_OR_UNION_6 ) ;  TYPE_2 VAR_7 ; METHOD_3 ( VAR_8 , VAR_9 ) ;  VAR_10 = - VAR_11 ;   if ( VAR_12 -> VAR_13 == VAR_14 ) {  METHOD_4 ( VAR_15 ) ; if ( VAR_16 ) VAR_17 = METHOD_5 ( VAR_18 , VAR_19 ) ; else VAR_20 = METHOD_6 ( VAR_21 , VAR_22 , VAR_23 ) ;  METHOD_7 ( VAR_24 ) ;  METHOD_8 ( STRUCT_OR_UNION_7 -> VAR_25 ) ;  }  if ( ! VAR_26 ) METHOD_9 ( STRUCT_OR_UNION_8 ) ;  METHOD_10 ( VAR_27 ) ;  return VAR_28 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 VAR_0 , TYPE_3 * * VAR_1 ) { TYPE_4 * VAR_2 ; TYPE_5 TYPE_6 ( * VAR_3 ) -> VAR_4 . VAR_5 = VAR_6 . VAR_7 . VAR_8 ; if ( * VAR_9 == & VAR_10 ) {  VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 ) ;  if ( VAR_15 ) { METHOD_2 ( VAR_16 , "Globaloptions:%s" , VAR_17 ) ; return 1 ; } } if ( * VAR_18 != & VAR_19 || VAR_20 ) {  if ( * VAR_21 == & VAR_22 )  METHOD_3 ( VAR_23 , "Initializinginetdmodeconfiguration" ) ; else METHOD_4 ( VAR_24 , "Initializingservice[%s]" , ( * VAR_25 ) -> VAR_26 ) ; VAR_27 = METHOD_5 ( VAR_28 , VAR_29 , VAR_30 , VAR_31 ) ; if ( VAR_32 ) { if ( * VAR_33 == & VAR_34 ) METHOD_6 ( VAR_35 , "Inetdmode:%s" , VAR_36 ) ; else METHOD_7 ( VAR_37 , "Service[%s]:%s" , ( * VAR_38 ) -> VAR_39 , VAR_40 ) ; return 1 ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * * VAR_3 = VAR_4 ; * VAR_5 = METHOD_1 ( * VAR_6 , VAR_7 , VAR_8 ) ;  if ( ! * VAR_9 && ! ( VAR_10 && VAR_11 ) )  return METHOD_2 ( VAR_12 ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 * VAR_7 = VAR_8 ; TYPE_9 * VAR_9 = VAR_10 ; TYPE_10 VAR_11 = 0 , VAR_12 = 0 ; TYPE_11 VAR_13 ; METHOD_1 ( & VAR_14 , '\\0' , sizeof ( TYPE_12 ) ) ; VAR_15 = VAR_16 ; VAR_17 = METHOD_2 ( VAR_18 ) ; if ( VAR_19 != VAR_20 ) { METHOD_3 ( VAR_21 , "SeemsnottobeaTNEFfile\\n" ) ; return 1 ; } VAR_22 = METHOD_4 ( VAR_23 ) ; METHOD_5 ( "TNEFKey:%hx\\n" , VAR_24 ) ; while ( METHOD_6 ( VAR_25 ) ) { VAR_26 = METHOD_7 ( VAR_27 ) ; if ( VAR_28 == VAR_29 ) break ; if ( VAR_30 -> VAR_31 == VAR_32 ) { if ( VAR_33 ) { METHOD_8 ( VAR_34 , VAR_35 ) ; METHOD_9 ( VAR_36 ) ; } else { VAR_37 = METHOD_10 ( TYPE_13 , 1 ) ; } } switch ( VAR_38 -> VAR_39 ) { case VAR_40 : if ( VAR_41 -> VAR_42 == VAR_43 ) { VAR_44 . VAR_45 = METHOD_11 ( VAR_46 ) ; } else if ( VAR_47 -> VAR_48 == VAR_49 ) { TYPE_14 * * VAR_50 = METHOD_12 ( VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; if ( VAR_55 ) { TYPE_15 VAR_56 ; for ( VAR_57 = 0 ; VAR_58 [ VAR_59 ] ; VAR_60 ++ ) { TYPE_16 * VAR_61 = VAR_62 [ VAR_63 ] ;  if ( VAR_64 -> VAR_65 == VAR_66 )  { VAR_67 . VAR_68 = METHOD_13 ( VAR_69 ) ; VAR_70 = VAR_71 -> VAR_72 ; }  else if ( VAR_73 -> VAR_74 == VAR_75 )  { VAR_76 . VAR_77 = METHOD_14 ( VAR_78 ) ; VAR_79 = VAR_80 -> VAR_81 ; } } METHOD_15 ( VAR_82 ) ; METHOD_16 ( VAR_83 ) ; } } break ; case VAR_84 : METHOD_17 ( VAR_85 , VAR_86 ) ; break ; default : METHOD_18 ( VAR_87 , "Invalidlvltypeonattribute:%d\\n" , VAR_88 -> VAR_89 ) ; return 1 ; break ; } METHOD_19 ( VAR_90 ) ; METHOD_20 ( VAR_91 ) ; } if ( VAR_92 ) { METHOD_21 ( VAR_93 , VAR_94 ) ; METHOD_22 ( VAR_95 ) ; METHOD_23 ( VAR_96 ) ; } if ( VAR_97 & VAR_98 ) { TYPE_17 VAR_99 = 0 ; TYPE_18 VAR_100 = 0 ; if ( METHOD_24 ( VAR_101 , "all" ) == 0 ) { VAR_102 = 1 ; VAR_103 = "rht" ; } for ( ; VAR_104 < 3 ; VAR_105 ++ ) { TYPE_19 * * VAR_106 = METHOD_25 ( VAR_107 , VAR_108 [ VAR_109 ] , & VAR_110 ) ; if ( VAR_111 ) { TYPE_20 VAR_112 = 0 ; for ( ; VAR_113 [ VAR_114 ] ; VAR_115 ++ ) { METHOD_26 ( VAR_116 [ VAR_117 ] , VAR_118 ) ; METHOD_27 ( VAR_119 [ VAR_120 ] ) ; METHOD_28 ( VAR_121 [ VAR_122 ] ) ; } METHOD_29 ( VAR_123 ) ; if ( ! VAR_124 ) break ; } } } if ( VAR_125 . VAR_126 ) { METHOD_30 ( VAR_127 . VAR_128 , 1 ) ; METHOD_31 ( VAR_129 . VAR_130 ) ; } if ( VAR_131 > 0 ) { METHOD_32 ( VAR_132 . VAR_133 , VAR_134 ) ; METHOD_33 ( VAR_135 . VAR_136 ) ; } if ( VAR_137 > 0 ) { METHOD_34 ( VAR_138 . VAR_139 , VAR_140 ) ; METHOD_35 ( VAR_141 . VAR_142 ) ; } return 0 ; }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { switch ( VAR_3 ) { case VAR_4 : * ( TYPE_4 * ) VAR_5 = VAR_6 -> VAR_7 ; return 0 ; case VAR_8 : * ( TYPE_5 * ) VAR_9 = VAR_10 -> VAR_11 ; return 0 ; case VAR_12 : * ( TYPE_6 * ) VAR_13 = VAR_14 -> VAR_15 ; return 0 ; case VAR_16 : * ( TYPE_7 * ) VAR_17 = VAR_18 -> VAR_19 ; return 0 ;  default :  VAR_20 = VAR_21 ; return - 1 ; } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_2 TYPE_3 * VAR_1 , TYPE_4 VAR_2 ) { unsigned TYPE_5 VAR_3 [ VAR_4 ] , VAR_5 ; TYPE_6 VAR_6 = 0 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 = METHOD_1 ( STRUCT_OR_UNION_2 ) ; VAR_10 = VAR_11 >> 4 ; METHOD_2 ( METHOD_3 ( "sequencer_write(dev=%d,count=%d)\\n" , VAR_12 , VAR_13 ) ) ; if ( VAR_14 == VAR_15 ) return - VAR_16 ; VAR_17 = VAR_18 ; while ( VAR_19 >= 4 ) { if ( METHOD_4 ( ( TYPE_8 * ) VAR_20 , & ( VAR_21 ) [ VAR_22 ] , 4 ) ) goto VAR_23 ; VAR_24 = VAR_25 [ 0 ] ; if ( VAR_26 == VAR_27 ) { TYPE_9 VAR_28 , VAR_29 ; VAR_30 = * ( unsigned TYPE_10 * ) & VAR_31 [ 2 ] ; if ( VAR_32 < 0 || VAR_33 >= VAR_34 || VAR_35 [ VAR_36 ] == VAR_37 ) return - VAR_38 ; if ( ! ( VAR_39 & ( 1 << VAR_40 ) ) ) return - VAR_41 ; VAR_42 = ( * ( TYPE_11 * ) & VAR_43 [ 0 ] ) & 0xffff ;  VAR_44 = VAR_45 [ VAR_46 ] -> METHOD_5 ( VAR_47 , VAR_48 , VAR_49 , VAR_50 + 4 , VAR_51 , 0 ) ;  if ( VAR_52 < 0 ) return VAR_53 ; return VAR_54 ; } if ( VAR_55 >= 128 ) { if ( VAR_56 == VAR_57 && VAR_58 == VAR_59 ) { METHOD_6 ( KERN_WARNING "Sequencer:Invalidlevel2event%x\\n" , VAR_60 ) ; return - VAR_61 ; } VAR_62 = 8 ; if ( VAR_63 < VAR_64 ) { if ( ! VAR_65 ) METHOD_7 ( ) ; return VAR_66 - VAR_67 ; } if ( METHOD_8 ( ( TYPE_12 * ) & VAR_68 [ 4 ] , & ( VAR_69 ) [ VAR_70 + 4 ] , 4 ) ) goto VAR_71 ; } else { if ( VAR_72 == VAR_73 ) { METHOD_9 ( KERN_WARNING "Sequencer:4byteeventinlevel2mode\\n" ) ; return - VAR_74 ; } VAR_75 = 4 ; if ( VAR_76 [ 0 ] != VAR_77 ) VAR_78 = 1 ; } if ( VAR_79 [ 0 ] == VAR_80 ) { if ( ! VAR_81 [ VAR_82 [ 2 ] ] ) { TYPE_13 VAR_83 , VAR_84 ; TYPE_14 VAR_85 = VAR_86 [ 2 ] ; if ( VAR_87 >= VAR_88 || VAR_89 [ VAR_90 ] == VAR_91 ) { return - VAR_92 ; } VAR_93 = METHOD_10 ( STRUCT_OR_UNION_3 ) ; if ( ( VAR_94 = VAR_95 [ VAR_96 ] -> METHOD_11 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ) < 0 ) { METHOD_12 ( ) ; METHOD_13 ( KERN_WARNING "SequencerError:UnabletoopenMidi%d\\n" , VAR_101 ) ; return VAR_102 ; } VAR_103 [ VAR_104 ] = 1 ; } } if ( ! METHOD_14 ( VAR_105 , ( STRUCT_OR_UNION_4 -> VAR_106 & ( VAR_107 ) ? 1 : 0 ) ) ) { TYPE_15 VAR_108 = VAR_109 - VAR_110 ; if ( ! VAR_111 ) METHOD_15 ( ) ; if ( ! VAR_112 && ( STRUCT_OR_UNION_5 -> VAR_113 & VAR_114 ) ) return - VAR_115 ; else return VAR_116 ; } VAR_117 += VAR_118 ; VAR_119 -= VAR_120 ; } if ( ! VAR_121 ) METHOD_16 ( ) ; VAR_122 : return VAR_123 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 ) {  TYPE_2 * VAR_1 = METHOD_1 ( STRUCT_OR_UNION_2 -> VAR_2 -> VAR_3 ) ;  if ( VAR_4 == 0 ) METHOD_2 ( STRUCT_OR_UNION_3 ) ; if ( VAR_5 ) METHOD_3 ( VAR_6 , STRUCT_OR_UNION_4 , VAR_7 ) ; else METHOD_4 ( STRUCT_OR_UNION_5 , VAR_8 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_5 * VAR_9 = VAR_10 -> VAR_11 ; VAR_12 -> VAR_13 = VAR_14 -> VAR_15 = 0 ; if ( ! VAR_16 -> VAR_17 ) return VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 -> VAR_21 -> VAR_22 ) ; for ( VAR_23 = 0 ; VAR_24 < VAR_25 ; VAR_26 ++ ) {  VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 , VAR_30 + 1 ) ;   METHOD_3 ( VAR_31 , VAR_32 ) ;  if ( ! VAR_33 ) goto VAR_34 ; VAR_35 -> VAR_36 = 1 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = VAR_43 -> VAR_44 -> VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = VAR_49 -> VAR_50 -> VAR_51 -> VAR_52 ; VAR_53 -> VAR_54 = METHOD_4 ( VAR_55 -> VAR_56 ) ; if ( VAR_57 -> VAR_58 ) VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = 0 ; VAR_64 -> VAR_65 = 0 ; VAR_66 -> VAR_67 = 0 ; VAR_68 -> VAR_69 = 0 ; VAR_70 -> VAR_71 = VAR_72 -> VAR_73 = 0 ; if ( VAR_74 -> VAR_75 -> VAR_76 -> VAR_77 ) VAR_78 -> VAR_79 = VAR_80 -> VAR_81 -> VAR_82 -> VAR_83 ; if ( VAR_84 -> VAR_85 -> VAR_86 -> VAR_87 == 1 ) { VAR_88 -> VAR_89 = VAR_90 -> VAR_91 -> VAR_92 -> VAR_93 [ 0 ] . VAR_94 ; if ( VAR_95 -> VAR_96 > 1 ) VAR_97 -> VAR_98 = 0 ; } if ( ! VAR_99 -> VAR_100 || ! VAR_101 -> VAR_102 || ( VAR_103 -> VAR_104 >= 10 ) ) VAR_105 -> VAR_106 = VAR_107 -> VAR_108 = 0 ; VAR_109 -> VAR_110 = ( TYPE_6 * ) METHOD_5 ( VAR_111 ) ; if ( ! VAR_112 -> VAR_113 ) return VAR_114 ; if ( VAR_115 -> VAR_116 -> VAR_117 -> VAR_118 == VAR_119 ) { VAR_120 -> VAR_121 = METHOD_6 ( VAR_122 ) ; } else { VAR_123 -> VAR_124 = METHOD_7 ( VAR_125 ) ; } if ( ! VAR_126 -> VAR_127 ) return VAR_128 ; if ( VAR_129 ) VAR_130 -> VAR_131 -> VAR_132 = 0 ; if ( METHOD_8 ( VAR_133 -> VAR_134 , 1 ) ) VAR_135 -> VAR_136 += VAR_137 -> VAR_138 -> VAR_139 -> VAR_140 ; if ( VAR_141 -> VAR_142 != VAR_143 ) { METHOD_9 ( VAR_144 , VAR_145 ) ; } else { if ( VAR_146 -> VAR_147 -> VAR_148 -> VAR_149 && VAR_150 -> VAR_151 -> VAR_152 -> VAR_153 -> VAR_154 == VAR_155 ) { METHOD_10 ( VAR_156 , VAR_157 ) ; } else { METHOD_11 ( VAR_158 , VAR_159 , 0 ) ; } } if ( VAR_160 -> VAR_161 && VAR_162 -> VAR_163 -> VAR_164 -> VAR_165 ) { METHOD_12 ( & VAR_166 -> VAR_167 -> VAR_168 -> VAR_169 -> VAR_170 , VAR_171 -> VAR_172 -> VAR_173 -> VAR_174 -> VAR_175 ) ; VAR_176 -> VAR_177 -> VAR_178 -> VAR_179 -> VAR_180 = VAR_181 ; } } return VAR_182 ; VAR_183 : METHOD_13 ( VAR_184 ) ; return VAR_185 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 )  { TYPE_4 VAR_3 ; TYPE_5 VAR_4 = 1 ; TYPE_6 VAR_5 = 0 ; VAR_6 = VAR_7 ; while ( VAR_8 > 4 && VAR_9 < VAR_10 - 4 ) { if ( VAR_11 > 5 && * VAR_12 == * ( VAR_13 + 1 ) ) { VAR_14 ++ ; } else if ( VAR_15 == 1 ) { * VAR_16 ++ = * VAR_17 ; VAR_18 ++ ; } else if ( VAR_19 < 256 ) { * VAR_20 ++ = * VAR_21 ; * VAR_22 ++ = * VAR_23 ; * VAR_24 ++ = VAR_25 - 2 ; VAR_26 = 1 ; VAR_27 += 3 ; } else { * VAR_28 ++ = * VAR_29 ; * VAR_30 ++ = * VAR_31 ; * VAR_32 ++ = 0xFF ; * VAR_33 ++ = ( VAR_34 & 0x000000FF ) ; * VAR_35 ++ = ( VAR_36 & 0x0000FF00 ) >> 8 ; * VAR_37 ++ = ( VAR_38 & 0x00FF0000 ) >> 16 ; * VAR_39 ++ = ( VAR_40 & 0xFF000000 ) >> 24 ; VAR_41 = 1 ; VAR_42 += 7 ; } VAR_43 ++ ; VAR_44 -- ; } if ( VAR_45 < VAR_46 - 4 ) METHOD_1 ( VAR_47 , VAR_48 , 4 ) ; VAR_49 += 4 ; return VAR_50 ; }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 * VAR_2 ;  if ( VAR_3 ) Com_Printf ( "Tryingtoload\\"%s\\"...\\n" , VAR_4 ) ; if ( ! VAR_5 || ! ( VAR_6 = METHOD_1 ( VAR_7 ) ) ) { const TYPE_4 * VAR_8 ; TYPE_5 VAR_9 [ VAR_10 ] ; VAR_11 = METHOD_2 ( ) ; if ( ! * VAR_12 ) VAR_13 = "." ; Com_Printf ( "Tryingtoload\\"%s\\"from\\"%s\\"...\\n" , VAR_14 , VAR_15 ) ; METHOD_3 ( VAR_16 , sizeof ( VAR_17 ) , "%s%c%s" , VAR_18 , VAR_19 , VAR_20 ) ; if ( ! ( VAR_21 = METHOD_4 ( VAR_22 ) ) ) { const TYPE_6 * VAR_23 = METHOD_5 ( "fs_basepath" ) ; if ( ! VAR_24 || ! * VAR_25 ) VAR_26 = "." ; if ( METHOD_6 ( VAR_27 , VAR_28 ) ) { Com_Printf ( "Tryingtoload\\"%s\\"from\\"%s\\"...\\n" , VAR_29 , VAR_30 ) ; METHOD_7 ( VAR_31 , sizeof ( VAR_32 ) , "%s%c%s" , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 ) ; } if ( ! VAR_38 ) Com_Printf ( "Loading\\"%s\\"failed\\n" , VAR_39 ) ; } } return VAR_40 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( ) ; if ( VAR_0 ) { if ( VAR_1 -> VAR_2 ) METHOD_2 ( VAR_3 -> VAR_4 ) ; METHOD_3 ( VAR_5 ) ; } VAR_6 = VAR_7 ; VAR_8 = VAR_9 ;  if ( VAR_10 ) {  TYPE_2 VAR_11 ; for ( VAR_12 = 0 ; VAR_13 < VAR_14 ; ++ VAR_15 ) METHOD_4 ( VAR_16 [ VAR_17 ] ) ; METHOD_5 ( VAR_18 ) ; VAR_19 = 0 ; VAR_20 = 0 ; VAR_21 = VAR_22 ; } if ( VAR_23 != VAR_24 && VAR_25 != & VAR_26 [ 0 ] ) METHOD_6 ( VAR_27 ) ; if ( VAR_28 ) VAR_29 = VAR_30 ; METHOD_7 ( VAR_31 ) ; METHOD_8 ( VAR_32 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 , unsigned TYPE_4 * VAR_3 , TYPE_5 * VAR_4 METHOD_1 { METHOD_2 ( VAR_5 METHOD_3 ( ( VAR_6 & 0xffffff00UL METHOD_4 == 0xfffffe00UL METHOD_5  METHOD_6 ( VAR_7 METHOD_7 { VAR_8 = ( VAR_9 << VAR_10 METHOD_8 & 0xffffffff ; VAR_11 -= VAR_12 ; while ( VAR_13 <= 24 METHOD_9 { if ( VAR_14 >= ( VAR_15 + 0x800 METHOD_10 METHOD_11 { VAR_16 = METHOD_12 ( VAR_17 , 0x800 , VAR_18 METHOD_13 ; VAR_19 = VAR_20 ; } VAR_21 |= ( ( unsigned TYPE_6 METHOD_14 ( * VAR_22 METHOD_15 << ( 24 - VAR_23 METHOD_16 METHOD_17 ; VAR_24 += 8 ; VAR_25 ++ ; } }  typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_7 VAR_26 , VAR_27 ; TYPE_8 VAR_28 ; unsigned TYPE_9 VAR_29 ; } STRUCT_OR_UNION_1 ; STRUCT_OR_UNION_2 * VAR_30 [ 3 ] ; register TYPE_10 VAR_31 , VAR_32 ; register STRUCT_OR_UNION_3 * VAR_33 ; register unsigned TYPE_11 * VAR_34 , * VAR_35 ; TYPE_12 VAR_36 , VAR_37 , VAR_38 , VAR_39 [ 3 ] , VAR_40 , VAR_41 ; TYPE_13 VAR_42 , VAR_43 ; unsigned TYPE_14 * VAR_44 ; METHOD_18 ( VAR_45 != ( const TYPE_15 * METHOD_19 VAR_46 METHOD_20 ; METHOD_21 ( VAR_47 -> VAR_48 == VAR_49 METHOD_22 ; if ( VAR_50 -> VAR_51 != VAR_52 METHOD_23 ( TYPE_16 METHOD_24 METHOD_25 ( VAR_53 , METHOD_26 ( METHOD_27 , "%s" , VAR_54 -> VAR_55 METHOD_28 ; METHOD_29 ( VAR_56 != ( unsigned TYPE_17 * METHOD_30 VAR_57 METHOD_31 ; METHOD_32 ( VAR_58 != ( unsigned TYPE_18 * METHOD_33 VAR_59 METHOD_34 ; METHOD_35 ( VAR_60 != ( unsigned TYPE_19 * METHOD_36 VAR_61 METHOD_37 ; VAR_62 = ( unsigned TYPE_20 * METHOD_38 METHOD_39 ( 0x800 , sizeof ( * VAR_63 METHOD_40 METHOD_41 ; if ( VAR_64 == ( unsigned TYPE_21 * METHOD_42 VAR_65 METHOD_43 METHOD_44 ( VAR_66 , "MemoryAllocationFailed" , VAR_67 -> VAR_68 METHOD_45 ; VAR_69 = 0 ; VAR_70 = 32 ; VAR_71 = VAR_72 + 0x800 ; for ( VAR_73 = 0 ; VAR_74 < 3 ; VAR_75 ++ METHOD_46 { VAR_76 [ VAR_77 ] = ( STRUCT_OR_UNION_4 * METHOD_47 VAR_78 ; VAR_79 [ VAR_80 ] = 0 ; } for ( VAR_81 = 0 ; VAR_82 < ( VAR_83 -> VAR_84 > 1536 ? 3 : 1 METHOD_48 ; VAR_85 ++ METHOD_49 { METHOD_50 ( 8 METHOD_51 ; VAR_86 = ( VAR_87 & 0xff METHOD_52 + 1 ; VAR_88 [ VAR_89 ] = ( STRUCT_OR_UNION_5 * METHOD_53 METHOD_54 ( VAR_90 , sizeof ( * VAR_91 [ VAR_92 ] METHOD_55 METHOD_56 ; if ( VAR_93 [ VAR_94 ] == ( STRUCT_OR_UNION_6 * METHOD_57 VAR_95 METHOD_58 { VAR_96 = ( unsigned TYPE_22 * METHOD_59 METHOD_60 ( VAR_97 METHOD_61 ;  METHOD_62 ( VAR_98 , "MemoryAllocationFailed" ,  VAR_99 -> VAR_100 METHOD_63 ; } VAR_101 = VAR_102 [ VAR_103 ] ; for ( VAR_104 = 0 ; VAR_105 < ( TYPE_23 METHOD_64 VAR_106 ; VAR_107 ++ METHOD_65 { METHOD_66 ( 8 METHOD_67 ; VAR_108 -> VAR_109 = ( unsigned TYPE_24 METHOD_68 ( VAR_110 & 0xff METHOD_69 + 1 ; if ( VAR_111 -> VAR_112 > 16 METHOD_70 {  VAR_113 = ( unsigned TYPE_25 * METHOD_71 METHOD_72 ( VAR_114 METHOD_73 ;  return ( VAR_115 METHOD_74 ; } METHOD_75 ( 16 METHOD_76 ; VAR_116 -> VAR_117 = ( unsigned TYPE_26 METHOD_77 ( VAR_118 & 0xffff METHOD_78 << 16 ; METHOD_79 ( 8 METHOD_80 ; VAR_119 -> VAR_120 = ( unsigned TYPE_27 METHOD_81 ( VAR_121 & 0xff METHOD_82 ; VAR_122 -> VAR_123 = ( ~ ( ( 1U << ( 32 - VAR_124 -> VAR_125 METHOD_83 METHOD_84 - 1 METHOD_85 METHOD_86 ; VAR_126 ++ ; } VAR_127 [ VAR_128 ] = ( TYPE_28 METHOD_87 VAR_129 ; } for ( VAR_130 = 0 ; VAR_131 < 1 ; VAR_132 ++ METHOD_88 METHOD_89 ( 16 METHOD_90 ; for ( VAR_133 = 0 ; VAR_134 < 1 ; VAR_135 ++ METHOD_91 METHOD_92 ( 16 METHOD_93 ; while ( ( VAR_136 & 0x00fff000UL METHOD_94 != 0x00fff000UL METHOD_95 METHOD_96 ( 8 METHOD_97 ; while ( METHOD_98 ( VAR_137 METHOD_99 == 0 METHOD_100 METHOD_101 ( 1 METHOD_102 ; VAR_138 = 0 ; VAR_139 = 0 ; VAR_140 = 0 ; VAR_141 = 0 ; VAR_142 = VAR_143 ; for ( ; ; METHOD_103 { if ( METHOD_104 ( VAR_144 METHOD_105 != 0 METHOD_106 { METHOD_107 ( 16 METHOD_108 ; VAR_145 = ( ( VAR_146 >> 9 METHOD_109 & 0x1fff METHOD_110 ; if ( VAR_147 == VAR_148 -> VAR_149 METHOD_111 break ; METHOD_112 ( 8 METHOD_113 ; VAR_150 = VAR_151 >> 30 ; METHOD_114 ( 16 METHOD_115 ; switch ( VAR_152 METHOD_116 { case 0 : { VAR_153 = VAR_154 + VAR_155 * VAR_156 -> VAR_157 ; VAR_158 = ( TYPE_29 METHOD_117 VAR_159 -> VAR_160 ; break ; } case 2 : { VAR_161 = VAR_162 + ( VAR_163 >> 1 METHOD_118 * VAR_164 -> VAR_165 ; VAR_166 = ( TYPE_30 METHOD_119 ( VAR_167 -> VAR_168 >> 1 METHOD_120 ; VAR_169 -- ; break ; } case 3 : { VAR_170 = VAR_171 + ( VAR_172 >> 1 METHOD_121 * VAR_173 -> VAR_174 ; VAR_175 = ( TYPE_31 METHOD_122 ( VAR_176 -> VAR_177 >> 1 METHOD_123 ; VAR_178 -- ; break ; } default : { for ( VAR_179 = 0 ; VAR_180 < ( VAR_181 -> VAR_182 > 1536 ? 3 : 1 METHOD_124 ; VAR_183 ++ METHOD_125 VAR_184 [ VAR_185 ] = ( STRUCT_OR_UNION_7 * METHOD_126 METHOD_127 ( VAR_186 [ VAR_187 ] METHOD_128 ; VAR_188 = ( unsigned TYPE_32 * METHOD_129 METHOD_130 ( VAR_189 METHOD_131 ; METHOD_132 ( VAR_190 , "CorruptImage" , VAR_191 -> VAR_192 METHOD_133 ; } } VAR_193 = VAR_194 [ VAR_195 ] ; continue ; } VAR_196 = VAR_197 [ VAR_198 ] ; for ( VAR_199 = 0 ; ( ( VAR_200 < ( TYPE_33 METHOD_134 VAR_201 METHOD_135 && ( ( VAR_202 & VAR_203 -> VAR_204 METHOD_136 != VAR_205 -> VAR_206 METHOD_137 METHOD_138 ; VAR_207 ++ METHOD_139 VAR_208 ++ ; if ( ( VAR_209 > VAR_210 -> VAR_211 METHOD_140 || ( VAR_212 == ( STRUCT_OR_UNION_8 * METHOD_141 VAR_213 METHOD_142 METHOD_143 { ( TYPE_34 METHOD_144 METHOD_145 ( VAR_214 , METHOD_146 ( METHOD_147 , VAR_215 , "SkipToSyncByte" , "`%s\'" , VAR_216 -> VAR_217 METHOD_148 ; while ( ( VAR_218 & 0x00fff000 METHOD_149 != 0x00fff000 METHOD_150 METHOD_151 ( 8 METHOD_152 ; while ( METHOD_153 ( VAR_219 METHOD_154 == 0 METHOD_155 METHOD_156 ( 1 METHOD_157 ; continue ; } if ( VAR_220 -> VAR_221 < 128 METHOD_158 VAR_222 = ( TYPE_35 METHOD_159 ( * VAR_223 METHOD_160 + VAR_224 -> VAR_225 ; else VAR_226 = ( TYPE_36 METHOD_161 ( * VAR_227 METHOD_162 + VAR_228 -> VAR_229 - 256 ; * VAR_230 = ( unsigned TYPE_37 METHOD_163 ( ( VAR_231 < 0 METHOD_164 ? 0 : ( VAR_232 > 255 METHOD_165 ? 255 : VAR_233 METHOD_166 ; VAR_234 ++ ; METHOD_167 ( VAR_235 -> VAR_236 METHOD_168 ; VAR_237 -- ; } for ( VAR_238 = 0 ; VAR_239 < ( VAR_240 -> VAR_241 > 1536 ? 3 : 1 METHOD_169 ; VAR_242 ++ METHOD_170 VAR_243 [ VAR_244 ] = ( STRUCT_OR_UNION_9 * METHOD_171 METHOD_172 ( VAR_245 [ VAR_246 ] METHOD_173 ; VAR_247 = ( unsigned TYPE_38 * METHOD_174 METHOD_175 ( VAR_248 METHOD_176 ; return ( VAR_249 METHOD_177 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 ) { VAR_5 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 , VAR_9 ; TYPE_7 METHOD_1 = VAR_10 ; TYPE_8 VAR_11 = VAR_12 ; TYPE_9 VAR_13 = 0 ; if ( VAR_14 == VAR_15 ) { METHOD_2 ( VAR_16 , METHOD_3 ( VAR_17 , VAR_18 ) , "namedargumentsmustfollowbare*" ) ; return - 1 ; } METHOD_4 ( VAR_19 != VAR_20 ) ; while ( VAR_21 < METHOD_5 ( VAR_22 ) ) { VAR_23 = METHOD_6 ( VAR_24 , VAR_25 ) ; switch ( METHOD_7 ( VAR_26 ) ) { case VAR_27 : case VAR_28 : if ( VAR_29 + 1 < METHOD_8 ( VAR_30 ) && METHOD_9 ( METHOD_10 ( VAR_31 , VAR_32 + 1 ) ) == VAR_33 ) { VAR_34 = METHOD_11 ( VAR_35 , METHOD_12 ( VAR_36 , VAR_37 + 2 ) ) ; if ( ! VAR_38 ) goto VAR_39 ; METHOD_13 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 += 2 ; } else { METHOD_14 ( VAR_44 , VAR_45 , VAR_46 ) ; } if ( METHOD_15 ( VAR_47 ) == 3 ) { VAR_48 = METHOD_16 ( VAR_49 , METHOD_17 ( VAR_50 , 2 ) ) ; if ( ! VAR_51 ) goto VAR_52 ; } else { VAR_53 = VAR_54 ; } VAR_55 = METHOD_18 ( VAR_56 , 0 ) ; VAR_57 = METHOD_19 ( VAR_58 ) ; if ( ! VAR_59 ) goto VAR_60 ; if ( METHOD_20 ( VAR_61 , VAR_62 , VAR_63 , 0 ) ) goto VAR_64 ; METHOD_21 = METHOD_22 ( VAR_65 , VAR_66 , VAR_67 , METHOD_23 ( VAR_68 ) , VAR_69 -> VAR_70 , VAR_71 -> VAR_72 ) ; if ( ! METHOD_24 ) goto VAR_73 ; METHOD_25 ( VAR_74 , VAR_75 ++ , METHOD_26 ) ; VAR_76 += 1 ;  if ( METHOD_27 ( METHOD_28 ( VAR_77 , VAR_78 ) ) == VAR_79 )  VAR_80 += 1 ; break ; case VAR_81 : METHOD_29 -> VAR_82 = METHOD_30 ( VAR_83 ) ; if ( ! METHOD_31 -> VAR_84 ) goto VAR_85 ; VAR_86 += 1 ; break ; case VAR_87 : return VAR_88 ; default : METHOD_32 ( VAR_89 , VAR_90 , "unexpectednode" ) ; goto VAR_91 ; } } return VAR_92 ; VAR_93 : return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { VAR_2 * VAR_3 ; VAR_4 = METHOD_1 ( ) ; METHOD_2 ( VAR_5 , METHOD_3 ( "Cookie" ) , METHOD_4 ( "CockpitAuth=v=1;k=blah" ) ) ; if ( METHOD_5 ( VAR_6 -> VAR_7 , "/cockpit" , VAR_8 ) ) METHOD_6 ( ) ; METHOD_7 ( VAR_9 ) ; METHOD_8 ( VAR_10 , METHOD_9 ( "Cookie" ) , METHOD_10 ( "CockpitAuth=v=2;k=blah" ) ) ; if ( METHOD_11 ( VAR_11 -> VAR_12 , "/cockpit" , VAR_13 ) ) METHOD_12 ( ) ;  METHOD_13 ( VAR_14 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 . VAR_5 ; TYPE_4 VAR_6 ; METHOD_1 ( VAR_7 , "qntsty=%d;numguard=%d;numstepsizes=%d\\n" , ( TYPE_5 ) VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 . VAR_13 , VAR_14 -> VAR_15 . VAR_16 ) ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 . VAR_21 ; ++ VAR_22 ) { METHOD_2 ( VAR_23 , "expn[%d]=0x%04x;mant[%d]=0x%04x;\\n" ,  VAR_24 , ( unsigned ) METHOD_3 ( VAR_25 -> VAR_26 . VAR_27 [ VAR_28 ] ) ,   VAR_29 , ( unsigned ) METHOD_4 ( VAR_30 -> VAR_31 . VAR_32 [ VAR_33 ] ) ) ;  } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; if ( METHOD_1 ( & VAR_3 -> VAR_4 ) < 5 ) return VAR_5 ; VAR_6 -> VAR_7 = METHOD_2 ( & VAR_8 -> VAR_9 ) + 1 ; if ( VAR_10 -> VAR_11 >= VAR_12 ) { METHOD_3 ( VAR_13 -> VAR_14 , VAR_15 , "nreslevels%disinvalid\\n" , VAR_16 -> VAR_17 ) ; return VAR_18 ; } if ( VAR_19 -> VAR_20 < VAR_21 -> VAR_22 ) VAR_23 -> VAR_24 = 1 ; else VAR_25 -> VAR_26 = VAR_27 -> VAR_28 - VAR_29 -> VAR_30 ; VAR_31 -> VAR_32 = ( METHOD_4 ( & VAR_33 -> VAR_34 ) & 15 ) + 2 ; VAR_35 -> VAR_36 = ( METHOD_5 ( & VAR_37 -> VAR_38 ) & 15 ) + 2 ; if ( VAR_39 -> VAR_40 > 10 || VAR_41 -> VAR_42 > 10 || VAR_43 -> VAR_44 + VAR_45 -> VAR_46 > 12 ) { METHOD_6 ( VAR_47 -> VAR_48 , VAR_49 , "cblksizeinvalid\\n" ) ; return VAR_50 ; }  VAR_51 -> VAR_52 = METHOD_7 ( & VAR_53 -> VAR_54 ) ;  if ( VAR_55 -> VAR_56 != 0 ) { METHOD_8 ( VAR_57 -> VAR_58 , VAR_59 , "extracblkstyles%X\\n" , VAR_60 -> VAR_61 ) ; } VAR_62 -> VAR_63 = METHOD_9 ( & VAR_64 -> VAR_65 ) ; if ( ( VAR_66 -> VAR_67 -> VAR_68 & VAR_69 ) && ( VAR_70 -> VAR_71 == VAR_72 ) ) VAR_73 -> VAR_74 = VAR_75 ; if ( VAR_76 -> VAR_77 & VAR_78 ) { TYPE_4 VAR_79 ; for ( VAR_80 = 0 ; VAR_81 < VAR_82 -> VAR_83 ; VAR_84 ++ ) { VAR_85 = METHOD_10 ( & VAR_86 -> VAR_87 ) ; VAR_88 -> VAR_89 [ VAR_90 ] = VAR_91 & 0x0F ; VAR_92 -> VAR_93 [ VAR_94 ] = ( VAR_95 >> 4 ) & 0x0F ; } } else { METHOD_11 ( VAR_96 -> VAR_97 , 15 , sizeof ( VAR_98 -> VAR_99 ) ) ; METHOD_12 ( VAR_100 -> VAR_101 , 15 , sizeof ( VAR_102 -> VAR_103 ) ) ; } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_2 * VAR_2 ) { TYPE_3 * VAR_3 = VAR_4 ; const TYPE_4 * VAR_5 = VAR_6 ; TYPE_5 * VAR_7 = VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; while ( VAR_11 && * VAR_12 ) {  if ( '%' == * VAR_13 ) {  if ( '%' == VAR_14 [ 1 ] ) { METHOD_1 ( '%' , VAR_15 ) ; VAR_16 += 2 ; } else { TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; TYPE_10 VAR_19 ; if ( '{' == VAR_20 [ 1 ] ) { TYPE_11 VAR_21 = VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 , '}' ) ; VAR_25 += 2 ; if ( ! VAR_26 ) { METHOD_3 ( "%{" , VAR_27 ) ; continue ; } VAR_28 = * VAR_29 ; * VAR_30 = 0 ; for ( VAR_31 = 0 ; VAR_32 [ VAR_33 ] . VAR_34 ; VAR_35 ++ ) { if ( METHOD_4 ( VAR_36 , VAR_37 [ VAR_38 ] . VAR_39 ) ) { VAR_40 = VAR_41 ; switch ( VAR_42 [ VAR_43 ] . VAR_44 ) { case VAR_45 : if ( ( VAR_46 == METHOD_5 ( VAR_47 , VAR_48 , & VAR_49 ) ) && VAR_50 ) METHOD_6 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : if ( VAR_54 == METHOD_7 ( VAR_55 , VAR_56 , & VAR_57 ) ) METHOD_8 ( VAR_58 , "%03ld" , VAR_59 ) ; break ; case VAR_60 : if ( VAR_61 == METHOD_9 ( VAR_62 , VAR_63 , & VAR_64 ) ) METHOD_10 ( VAR_65 , "%03ld" , VAR_66 ) ; break ; case VAR_67 : if ( VAR_68 == METHOD_11 ( VAR_69 , VAR_70 , & VAR_71 ) ) METHOD_12 ( VAR_72 , "%ld" , VAR_73 ) ; break ; case VAR_74 : if ( VAR_75 == METHOD_13 ( VAR_76 , VAR_77 , & VAR_78 ) ) METHOD_14 ( VAR_79 , "%ld" , VAR_80 ) ; break ; case VAR_81 : if ( VAR_82 == METHOD_15 ( VAR_83 , VAR_84 , & VAR_85 ) ) METHOD_16 ( VAR_86 , "%ld" , VAR_87 ) ; break ; case VAR_88 : if ( VAR_89 == METHOD_17 ( VAR_90 , VAR_91 , & VAR_92 ) ) METHOD_18 ( VAR_93 , "%ld" , VAR_94 ) ; break ; case VAR_95 : if ( VAR_96 == METHOD_19 ( VAR_97 , VAR_98 , & VAR_99 ) ) METHOD_20 ( VAR_100 , "%.6f" , VAR_101 ) ; break ; case VAR_102 : if ( VAR_103 == METHOD_21 ( VAR_104 , VAR_105 , & VAR_106 ) ) METHOD_22 ( VAR_107 , "%.6f" , VAR_108 ) ; break ; case VAR_109 : if ( VAR_110 == METHOD_23 ( VAR_111 , VAR_112 , & VAR_113 ) ) METHOD_24 ( VAR_114 , "%.6f" , VAR_115 ) ; break ; case VAR_116 : if ( VAR_117 == METHOD_25 ( VAR_118 , VAR_119 , & VAR_120 ) ) METHOD_26 ( VAR_121 , "%.6f" , VAR_122 ) ; break ; case VAR_123 : if ( VAR_124 == METHOD_27 ( VAR_125 , VAR_126 , & VAR_127 ) ) METHOD_28 ( VAR_128 , "%.6f" , VAR_129 ) ; break ; case VAR_130 : if ( VAR_131 == METHOD_29 ( VAR_132 , VAR_133 , & VAR_134 ) ) METHOD_30 ( VAR_135 , "%.6f" , VAR_136 ) ; break ; case VAR_137 : if ( VAR_138 == METHOD_31 ( VAR_139 , VAR_140 , & VAR_141 ) ) METHOD_32 ( VAR_142 , "%.6f" , VAR_143 ) ; break ; case VAR_144 : if ( VAR_145 == METHOD_33 ( VAR_146 , VAR_147 , & VAR_148 ) ) METHOD_34 ( VAR_149 , "%.0f" , VAR_150 ) ; break ; case VAR_151 : if ( VAR_152 == METHOD_35 ( VAR_153 , VAR_154 , & VAR_155 ) ) METHOD_36 ( VAR_156 , "%.0f" , VAR_157 ) ; break ; case VAR_158 : if ( VAR_159 == METHOD_37 ( VAR_160 , VAR_161 , & VAR_162 ) ) METHOD_38 ( VAR_163 , "%.3f" , VAR_164 ) ; break ; case VAR_165 : if ( VAR_166 == METHOD_39 ( VAR_167 , VAR_168 , & VAR_169 ) ) METHOD_40 ( VAR_170 , "%.3f" , VAR_171 ) ; break ; case VAR_172 : if ( ( VAR_173 == METHOD_41 ( VAR_174 , VAR_175 , & VAR_176 ) ) && VAR_177 ) METHOD_42 ( VAR_178 , VAR_179 ) ; break ; case VAR_180 : if ( ( VAR_181 == METHOD_43 ( VAR_182 , VAR_183 , & VAR_184 ) ) && VAR_185 ) METHOD_44 ( VAR_186 , VAR_187 ) ; break ; case VAR_188 : if ( ( VAR_189 == METHOD_45 ( VAR_190 , VAR_191 , & VAR_192 ) ) && VAR_193 ) METHOD_46 ( VAR_194 , VAR_195 ) ; break ; case VAR_196 : if ( VAR_197 == METHOD_47 ( VAR_198 , VAR_199 , & VAR_200 ) ) METHOD_48 ( VAR_201 , "%ld" , VAR_202 ) ; break ; case VAR_203 : if ( VAR_204 == METHOD_49 ( VAR_205 , VAR_206 , & VAR_207 ) ) METHOD_50 ( VAR_208 , "%ld" , VAR_209 ) ; break ; case VAR_210 : if ( VAR_211 -> VAR_212 ) METHOD_51 ( VAR_213 , "%s" , VAR_214 -> VAR_215 ) ; break ; case VAR_216 : if ( VAR_217 == METHOD_52 ( VAR_218 , VAR_219 , & VAR_220 ) ) METHOD_53 ( VAR_221 , "%s" , VAR_222 ) ; break ; case VAR_223 : if ( VAR_224 == METHOD_54 ( VAR_225 , VAR_226 , & VAR_227 ) ) METHOD_55 ( VAR_228 , "%ld" , VAR_229 ) ; break ; case VAR_230 : if ( VAR_231 == METHOD_56 ( VAR_232 , VAR_233 , & VAR_234 ) ) METHOD_57 ( VAR_235 , "%s" , VAR_236 ) ; break ; case VAR_237 : if ( VAR_238 == METHOD_58 ( VAR_239 , VAR_240 , & VAR_241 ) ) METHOD_59 ( VAR_242 , "%ld" , VAR_243 ) ; break ; case VAR_244 : if ( VAR_245 == METHOD_60 ( VAR_246 , VAR_247 , & VAR_248 ) ) { const TYPE_12 * VAR_249 = "0" ; switch ( VAR_250 ) { case VAR_251 : VAR_252 = "1.0" ; break ; case VAR_253 : VAR_254 = "1.1" ; break ; case VAR_255 : VAR_256 = "2" ; break ; } METHOD_61 ( VAR_257 , VAR_258 ) ; } break ; case VAR_259 : if ( VAR_260 == METHOD_62 ( VAR_261 , VAR_262 , & VAR_263 ) ) METHOD_63 ( VAR_264 , "%s" , VAR_265 ) ; break ; default : break ; } break ; } } if ( ! VAR_266 ) { METHOD_64 ( VAR_267 , "curl:unknown--write-outvariable:\'%s\'\\n" , VAR_268 ) ; } VAR_269 = VAR_270 + 1 ; * VAR_271 = VAR_272 ; } else { METHOD_65 ( '%' , VAR_273 ) ; METHOD_66 ( VAR_274 [ 1 ] , VAR_275 ) ; VAR_276 += 2 ; } } } else if ( '\\\\' == * VAR_277 ) { switch ( VAR_278 [ 1 ] ) { case 'r' : METHOD_67 ( '\\r' , VAR_279 ) ; break ; case 'n' : METHOD_68 ( '\\n' , VAR_280 ) ; break ; case 't' : METHOD_69 ( '\\t' , VAR_281 ) ; break ; default : METHOD_70 ( * VAR_282 , VAR_283 ) ; METHOD_71 ( VAR_284 [ 1 ] , VAR_285 ) ; break ; } VAR_286 += 2 ; } else { METHOD_72 ( * VAR_287 , VAR_288 ) ; VAR_289 ++ ; } } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 VAR_1 [ 2 ] ,  TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < 1 + METHOD_1 ( VAR_6 ) ; ++ VAR_7 ) {  const TYPE_5 * VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 [ VAR_13 ] ] [ 0 ] . VAR_14 ;  const TYPE_6 VAR_15 = { VAR_16 [ VAR_17 ] . VAR_18 . VAR_19 - VAR_20 -> VAR_21 , VAR_22 [ VAR_23 ] . VAR_24 . VAR_25 - VAR_26 -> VAR_27 } ; METHOD_2 ( & VAR_28 , VAR_29 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 = { 0 } ; TYPE_5 VAR_5 = { 0 } ; TYPE_6 VAR_6 = 0 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 = { 0 } ; TYPE_10 * VAR_10 = VAR_11 ; const TYPE_11 * VAR_12 = VAR_13 ; TYPE_12 VAR_14 = 0 ; const TYPE_13 VAR_15 = 30 ; const TYPE_14 VAR_16 = 200 ; VAR_17 = VAR_18 [ 0 ] ; if ( VAR_19 != 6 ) METHOD_1 ( "Invalidnumberofarguments" ) ; VAR_20 = METHOD_2 ( "vp8" ) ; if ( ! VAR_21 ) METHOD_3 ( "Unsupportedcodec." ) ; VAR_22 = METHOD_4 ( VAR_23 [ 5 ] ) ; if ( ! VAR_24 ) METHOD_5 ( "Couldn\'tparseframenumber\'%s\'\\n" , VAR_25 [ 5 ] ) ; VAR_26 . VAR_27 = VAR_28 -> VAR_29 ; VAR_30 . VAR_31 = METHOD_6 ( VAR_32 [ 1 ] , VAR_33 , 0 ) ; VAR_34 . VAR_35 = METHOD_7 ( VAR_36 [ 2 ] , VAR_37 , 0 ) ; VAR_38 . VAR_39 . VAR_40 = 1 ; VAR_41 . VAR_42 . VAR_43 = VAR_44 ; if ( VAR_45 . VAR_46 <= 0 || VAR_47 . VAR_48 <= 0 || ( VAR_49 . VAR_50 % 2 ) != 0 || ( VAR_51 . VAR_52 % 2 ) != 0 ) { METHOD_8 ( "Invalidframesize:%dx%d" , VAR_53 . VAR_54 , VAR_55 . VAR_56 ) ; } if ( ! METHOD_9 ( & VAR_57 , VAR_58 , VAR_59 . VAR_60 , VAR_61 . VAR_62 , 1 ) ) { METHOD_10 ( "Failedtoallocateimage." ) ; }  METHOD_11 ( "Using%s\\n" , METHOD_12 ( VAR_63 -> METHOD_13 ( ) ) ) ;   VAR_64 = METHOD_14 ( VAR_65 -> METHOD_15 ( ) , & VAR_66 , 0 ) ;  if ( VAR_67 ) METHOD_16 ( & VAR_68 , "Failedtogetdefaultcodecconfig." ) ; VAR_69 . VAR_70 = VAR_71 . VAR_72 ; VAR_73 . VAR_74 = VAR_75 . VAR_76 ; VAR_77 . VAR_78 . VAR_79 = VAR_80 . VAR_81 . VAR_82 ; VAR_83 . VAR_84 . VAR_85 = VAR_86 . VAR_87 . VAR_88 ; VAR_89 . VAR_90 = VAR_91 ; VAR_92 = METHOD_17 ( VAR_93 [ 4 ] , VAR_94 , & VAR_95 ) ; if ( ! VAR_96 ) METHOD_18 ( "Failedtoopen%sforwriting." , VAR_97 [ 4 ] ) ; if ( ! ( VAR_98 = METHOD_19 ( VAR_99 [ 3 ] , "rb" ) ) ) METHOD_20 ( "Failedtoopen%sforreading." , VAR_100 [ 3 ] ) ;  if ( METHOD_21 ( & VAR_101 , VAR_102 -> METHOD_22 ( ) , & VAR_103 , 0 ) )  METHOD_23 ( & VAR_104 , "Failedtoinitializeencoder" ) ; while ( METHOD_24 ( & VAR_105 , VAR_106 ) ) { if ( VAR_107 + 1 == VAR_108 ) { TYPE_15 VAR_109 ; VAR_110 . VAR_111 = VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; if ( METHOD_25 ( & VAR_116 , VAR_117 , & VAR_118 ) ) METHOD_26 ( & VAR_119 , "Failedtosetreferenceframe" ) ; } METHOD_27 ( & VAR_120 , & VAR_121 , VAR_122 ++ , VAR_123 ) ; }  METHOD_28 ( & VAR_124 , VAR_125 , - 1 , VAR_126 ) ;  METHOD_29 ( "\\n" ) ; METHOD_30 ( VAR_127 ) ; METHOD_31 ( "Processed%dframes.\\n" , VAR_128 ) ; METHOD_32 ( & VAR_129 ) ; if ( METHOD_33 ( & VAR_130 ) ) METHOD_34 ( & VAR_131 , "Failedtodestroycodec." ) ; METHOD_35 ( VAR_132 ) ; return VAR_133 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 ; TYPE_0 VAR_6 , VAR_7 = sizeof ( struct STRUCT_OR_UNION_6 ) ; VAR_8 = ( struct STRUCT_OR_UNION_7 * ) VAR_9 -> VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 -> VAR_13 ) ; if ( VAR_14 > METHOD_2 ( ) ) goto VAR_15 ; VAR_16 = hlist_entry ( VAR_17 -> VAR_18 , struct STRUCT_OR_UNION_8 , VAR_19 ) ; METHOD_3 ( & VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 -> VAR_24 ; METHOD_4 ( VAR_25 ) ;  if ( METHOD_5 ( VAR_26 , 0 , VAR_27 - VAR_28 -> VAR_29 , VAR_30 ) < 0 ) {  METHOD_6 ( VAR_31 ) ; VAR_32 = VAR_33 ; goto VAR_34 ; } METHOD_7 ( VAR_35 , VAR_36 ) ; METHOD_8 ( VAR_37 -> VAR_38 - VAR_39 , METHOD_9 ( VAR_40 ) , VAR_41 ) ; METHOD_10 ( VAR_42 , - VAR_43 ) ; METHOD_11 ( VAR_44 ) ; METHOD_12 ( VAR_45 ) ; METHOD_13 ( VAR_46 , VAR_47 , VAR_48 ) { VAR_49 = VAR_50 -> VAR_51 -> VAR_52 - VAR_53 ; METHOD_14 ( METHOD_15 ( VAR_54 , VAR_55 ) , VAR_56 -> VAR_57 -> VAR_58 + VAR_59 , VAR_60 ) ; } VAR_61 : METHOD_16 ( VAR_62 ) ; return VAR_63 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const TYPE_0 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; TYPE_2 VAR_9 ; VAR_10 = METHOD_1 ( sizeof ( * VAR_11 ) + VAR_12 -> VAR_13 . VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) return VAR_17 ; METHOD_2 ( ) ; VAR_18 = METHOD_3 ( VAR_19 -> VAR_20 ) ; if ( VAR_21 ) { VAR_22 -> VAR_23 = METHOD_4 ( VAR_24 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_25 ) ; if ( ! VAR_26 -> VAR_27 ) { METHOD_5 ( ) ; goto VAR_28 ; } if ( VAR_29 -> VAR_30 ) { for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { VAR_35 -> VAR_36 [ VAR_37 ] . VAR_38 = VAR_39 -> VAR_40 + 1 ; VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = METHOD_6 ( VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 , sizeof ( VAR_49 ) , VAR_50 ) ; if ( ! VAR_51 -> VAR_52 [ VAR_53 ] . VAR_54 ) { METHOD_7 ( ) ; goto VAR_55 ; } } } } METHOD_8 ( ) ;  METHOD_9 ( & VAR_56 -> VAR_57 ) ;  METHOD_10 ( & VAR_58 -> VAR_59 , VAR_60 ) ; METHOD_11 ( & VAR_61 -> VAR_62 . VAR_63 , VAR_64 ) ; METHOD_12 ( & VAR_65 -> VAR_66 . VAR_67 ) ; TYPE_3 TYPE_4 if ( VAR_68 ( & VAR_69 -> VAR_70 ) && ! VAR_71 -> VAR_72 . VAR_73 . VAR_74 ) METHOD_13 ( & VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = VAR_79 ; METHOD_14 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 , VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_15 ( & VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 . VAR_101 ; METHOD_16 ( & VAR_102 -> VAR_103 , 1024 , 8 ) ; for ( VAR_104 = 0 ; VAR_105 < METHOD_17 ( VAR_106 -> VAR_107 ) ; VAR_108 ++ ) METHOD_18 ( & VAR_109 -> VAR_110 [ VAR_111 ] , 1024 , 8 ) ; if ( METHOD_19 ( VAR_112 , VAR_113 , VAR_114 ) ) goto VAR_115 ; for ( VAR_116 = 0 ; VAR_117 < VAR_118 ; VAR_119 ++ ) { VAR_120 -> VAR_121 [ VAR_122 ] = VAR_123 ; } for ( VAR_124 = 0 ; VAR_125 < VAR_126 ; VAR_127 ++ ) { METHOD_20 ( & VAR_128 -> VAR_129 [ VAR_130 ] ) ; METHOD_21 ( & VAR_131 -> VAR_132 [ VAR_133 ] ) ; } for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) VAR_138 -> VAR_139 [ VAR_140 ] = METHOD_22 ( VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 = VAR_145 ; if ( VAR_146 -> VAR_147 . VAR_148 == VAR_149 || VAR_150 -> VAR_151 . VAR_152 == VAR_153 ) { struct STRUCT_OR_UNION_7 * VAR_154 = VAR_155 -> VAR_156 . VAR_157 -> VAR_158 [ METHOD_23 ( VAR_159 ) ] ; TYPE_5 VAR_160 = ( VAR_161 -> VAR_162 . VAR_163 & VAR_164 ) >> VAR_165 ; switch ( VAR_166 ) { case VAR_167 : VAR_168 -> VAR_169 = VAR_170 ; break ; case VAR_171 : VAR_172 -> VAR_173 = VAR_174 ; break ; case VAR_175 : VAR_176 -> VAR_177 = VAR_178 ; break ; default : METHOD_24 ( 1 ) ; } } METHOD_25 ( VAR_179 , "AllocatedSTA%pM\\n" , VAR_180 -> VAR_181 . VAR_182 ) ; return VAR_183 ; VAR_184 : if ( VAR_185 -> VAR_186 ) { for ( VAR_187 = 0 ; VAR_188 < VAR_189 ; VAR_190 ++ ) METHOD_26 ( VAR_191 -> VAR_192 [ VAR_193 ] . VAR_194 ) ; METHOD_27 ( VAR_195 -> VAR_196 ) ; } METHOD_28 ( VAR_197 ) ; return VAR_198 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { if ( METHOD_1 ( VAR_2 ) &&  METHOD_2 ( ) && ! METHOD_3 ( VAR_3 ) )  return - VAR_4 ; if ( ! ( VAR_5 -> VAR_6 . VAR_7 & VAR_8 ) ) return 0 ; if ( VAR_9 -> VAR_10 == VAR_11 ) { if ( VAR_12 -> VAR_13 & VAR_14 ) return 0 ; } if ( METHOD_4 ( ) && ! METHOD_5 ( VAR_15 ) ) return - VAR_16 ; return 0 ; }
static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 ) { METHOD_1 ( ) ; METHOD_2 ( ) ;  METHOD_3 ( & VAR_0 ) ;  METHOD_4 ( ) ;  METHOD_5 ( ) ;  METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ( unsigned TYPE_3 ) VAR_1 , METHOD_10 ( VAR_2 * sizeof ( struct STRUCT_OR_UNION_0 ) ) ) ; METHOD_11 ( VAR_3 ) ; METHOD_12 ( ( unsigned TYPE_4 ) VAR_4 , METHOD_13 ( VAR_5 * sizeof ( struct STRUCT_OR_UNION_1 ) ) ) ; METHOD_14 ( & VAR_6 ) ; METHOD_15 ( ) ; METHOD_16 ( VAR_7 ) ; METHOD_17 ( VAR_8 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 ; unsigned TYPE_1 * VAR_6 = VAR_7 -> VAR_8 -> VAR_9 ; TYPE_2 VAR_10 = VAR_11 -> VAR_12 -> VAR_13 ; struct STRUCT_OR_UNION_4 * VAR_14 ; struct STRUCT_OR_UNION_5 * VAR_15 ; struct STRUCT_OR_UNION_6 * VAR_16 = VAR_17 ; struct STRUCT_OR_UNION_7 * VAR_18 = VAR_19 ; struct STRUCT_OR_UNION_8 * VAR_20 = VAR_21 ; struct STRUCT_OR_UNION_9 * VAR_22 = METHOD_1 ( VAR_23 ) ; struct STRUCT_OR_UNION_10 * STRUCT_OR_UNION_11 ; TYPE_3 VAR_24 ; TYPE_4 VAR_25 , VAR_26 ; TYPE_5 * VAR_27 ; TYPE_6 VAR_28 = 0 ; TYPE_7 VAR_29 = 0 ; TYPE_8 VAR_30 = - 1 ; TYPE_9 VAR_31 = - 1 ; unsigned TYPE_10 VAR_32 ; TYPE_11 VAR_33 ; TYPE_12 VAR_34 ; unsigned TYPE_13 VAR_35 = 0 ; TYPE_14 VAR_36 = 0 ; struct STRUCT_OR_UNION_12 * VAR_37 ; TYPE_15 VAR_38 = - VAR_39 ; VAR_40 = ( unsigned TYPE_16 ) VAR_41 -> VAR_42 ; if ( VAR_43 == VAR_44 ) return - VAR_45 ; VAR_46 = ( VAR_47 == VAR_48 ) ? 1 : VAR_49 ; if ( VAR_50 == VAR_51 ) { VAR_52 = METHOD_2 ( VAR_53 , 1 ) ;  VAR_54 = METHOD_3 ( VAR_55 , 0 ) ;  goto VAR_56 ; } if ( ! VAR_57 ) { METHOD_4 ( & VAR_58 -> VAR_59 , "Weirddescriptorreferences\\n" ) ; return - VAR_60 ; } if ( ! VAR_61 ) { if ( VAR_62 -> VAR_63 -> VAR_64 && VAR_65 -> VAR_66 -> VAR_67 -> VAR_68 && VAR_69 -> VAR_70 -> VAR_71 -> VAR_72 ) { METHOD_5 ( & VAR_73 -> VAR_74 , "Seekingextradescriptorsonendpoint\\n" ) ; VAR_75 = VAR_76 -> VAR_77 -> VAR_78 -> VAR_79 ; VAR_80 = VAR_81 -> VAR_82 -> VAR_83 -> VAR_84 ; } else { METHOD_6 ( & VAR_85 -> VAR_86 , "Zerolengthdescriptorreferences\\n" ) ; return - VAR_87 ; } } while ( VAR_88 > 0 ) { VAR_89 = VAR_90 [ 0 ] ; if ( ! VAR_91 ) { METHOD_7 ( & VAR_92 -> VAR_93 , "skippinggarbagebyte\\n" ) ; VAR_94 = 1 ; goto VAR_95 ; } if ( VAR_96 [ 1 ] != VAR_97 ) { METHOD_8 ( & VAR_98 -> VAR_99 , "skippinggarbage\\n" ) ; goto VAR_100 ; } switch ( VAR_101 [ 2 ] ) { case VAR_102 : if ( VAR_103 < sizeof ( struct STRUCT_OR_UNION_13 ) ) goto VAR_104 ; if ( VAR_105 ) { METHOD_9 ( & VAR_106 -> VAR_107 , "Morethanone" "uniondescriptor,skipping...\\n" ) ; goto VAR_108 ; } VAR_109 = ( struct STRUCT_OR_UNION_14 * ) VAR_110 ; break ; case VAR_111 : if ( VAR_112 < sizeof ( struct STRUCT_OR_UNION_15 ) ) goto VAR_113 ; VAR_114 = ( struct STRUCT_OR_UNION_16 * ) VAR_115 ; break ; case VAR_116 : break ; case VAR_117 : if ( VAR_118 < 4 ) goto VAR_119 ; VAR_120 = VAR_121 [ 3 ] ; break ; case VAR_122 : if ( VAR_123 < 5 ) goto VAR_124 ; VAR_125 = VAR_126 [ 3 ] ; VAR_127 = VAR_128 [ 4 ] ; break ; default : METHOD_10 ( & VAR_129 -> VAR_130 , "Ignoringdescriptor:" "type%02x,length%ud\\n" , VAR_131 [ 2 ] , VAR_132 ) ; break ; } VAR_133 : VAR_134 -= VAR_135 ; VAR_136 += VAR_137 ; } if ( ! VAR_138 ) { if ( VAR_139 > 0 ) { METHOD_11 ( & VAR_140 -> VAR_141 , "Nouniondescriptor,usingcallmanagementdescriptor\\n" ) ; if ( VAR_142 & VAR_143 ) VAR_144 = METHOD_12 ( VAR_145 , 0 ) ; else VAR_146 = METHOD_13 ( VAR_147 , ( VAR_148 = VAR_149 ) ) ; VAR_150 = VAR_151 ; } else { if ( VAR_152 -> VAR_153 -> VAR_154 . VAR_155 != 3 ) { METHOD_14 ( & VAR_156 -> VAR_157 , "Nouniondescriptor,givingup\\n" ) ; return - VAR_158 ; } else { METHOD_15 ( & VAR_159 -> VAR_160 , "Nouniondescriptor,testingforcastrateddevice\\n" ) ; VAR_161 = 1 ; VAR_162 = VAR_163 = VAR_164 ; goto VAR_165 ; } } } else { VAR_166 = METHOD_16 ( VAR_167 , VAR_168 -> VAR_169 ) ; VAR_170 = METHOD_17 ( VAR_171 , ( VAR_172 = VAR_173 -> VAR_174 ) ) ; } if ( ! VAR_175 || ! VAR_176 ) { METHOD_18 ( & VAR_177 -> VAR_178 , "nointerfaces\\n" ) ; return - VAR_179 ; } if ( VAR_180 != VAR_181 ) METHOD_19 ( & VAR_182 -> VAR_183 , "Separatecallcontrolinterface.Thatisnotfullysupported.\\n" ) ; if ( VAR_184 == VAR_185 ) { METHOD_20 ( & VAR_186 -> VAR_187 , "Controlanddatainterfacesarenotseparated!\\n" ) ; VAR_188 = 1 ; VAR_189 |= VAR_190 ; if ( VAR_191 -> VAR_192 -> VAR_193 . VAR_194 != 3 ) { METHOD_21 ( & VAR_195 -> VAR_196 , "Thisneedsexactly3endpoints\\n" ) ; return - VAR_197 ; } VAR_198 : for ( VAR_199 = 0 ; VAR_200 < 3 ; VAR_201 ++ ) { struct STRUCT_OR_UNION_17 * VAR_202 ; VAR_203 = & VAR_204 -> VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 ; if ( METHOD_22 ( VAR_209 ) ) VAR_210 = VAR_211 ; else if ( METHOD_23 ( VAR_212 ) ) VAR_213 = VAR_214 ; else if ( METHOD_24 ( VAR_215 ) ) VAR_216 = VAR_217 ; else return - VAR_218 ; } if ( ! VAR_219 || ! VAR_220 || ! VAR_221 ) return - VAR_222 ; else goto VAR_223 ; } VAR_224 : if ( VAR_225 -> VAR_226 -> VAR_227 . VAR_228 != VAR_229 ) { if ( VAR_230 -> VAR_231 -> VAR_232 . VAR_233 == VAR_234 ) { METHOD_25 ( & VAR_235 -> VAR_236 , "Yourdevicehasswitchedinterfaces.\\n" ) ; METHOD_26 ( VAR_237 , VAR_238 ) ; } else { return - VAR_239 ; } } if ( ! VAR_240 && VAR_241 != VAR_242 ) return - VAR_243 ; if ( ! VAR_244 && METHOD_27 ( VAR_245 ) ) { METHOD_28 ( & VAR_246 -> VAR_247 , "Thedatainterfaceisn\'tavailable\\n" ) ; return - VAR_248 ; } if ( VAR_249 -> VAR_250 -> VAR_251 . VAR_252 < 2 || VAR_253 -> VAR_254 -> VAR_255 . VAR_256 == 0 ) return - VAR_257 ; VAR_258 = & VAR_259 -> VAR_260 -> VAR_261 [ 0 ] . VAR_262 ; VAR_263 = & VAR_264 -> VAR_265 -> VAR_266 [ 0 ] . VAR_267 ; VAR_268 = & VAR_269 -> VAR_270 -> VAR_271 [ 1 ] . VAR_272 ; if ( ! METHOD_29 ( VAR_273 ) ) { METHOD_30 ( & VAR_274 -> VAR_275 , "Thedatainterfacehasswitchedendpoints\\n" ) ; METHOD_31 ( VAR_276 , VAR_277 ) ; } VAR_278 : METHOD_32 ( & VAR_279 -> VAR_280 , "interfacesarevalid\\n" ) ; STRUCT_OR_UNION_18 = METHOD_33 ( sizeof ( struct STRUCT_OR_UNION_19 ) , VAR_281 ) ; if ( STRUCT_OR_UNION_20 == VAR_282 ) goto VAR_283 ; VAR_284 = METHOD_34 ( STRUCT_OR_UNION_21 ) ; if ( VAR_285 < 0 ) { METHOD_35 ( & VAR_286 -> VAR_287 , "nomorefreeacmdevices\\n" ) ; METHOD_36 ( STRUCT_OR_UNION_22 ) ; return - VAR_288 ; } VAR_289 = METHOD_37 ( VAR_290 ) ; VAR_291 = METHOD_38 ( VAR_292 ) * ( VAR_293 == VAR_294 ? 1 : 2 ) ; STRUCT_OR_UNION_23 -> VAR_295 = VAR_296 ; STRUCT_OR_UNION_24 -> VAR_297 = METHOD_39 ( VAR_298 ) * 20 ; STRUCT_OR_UNION_25 -> VAR_299 = VAR_300 ; STRUCT_OR_UNION_26 -> VAR_301 = VAR_302 ; STRUCT_OR_UNION_27 -> VAR_303 = VAR_304 ; STRUCT_OR_UNION_28 -> VAR_305 = VAR_306 ; STRUCT_OR_UNION_29 -> VAR_307 = VAR_308 ; if ( VAR_309 & VAR_310 ) STRUCT_OR_UNION_30 -> VAR_311 &= ~ VAR_312 ; STRUCT_OR_UNION_31 -> VAR_313 = VAR_314 ; STRUCT_OR_UNION_32 -> VAR_315 = VAR_316 ; STRUCT_OR_UNION_33 -> VAR_317 = VAR_318 ; METHOD_40 ( & STRUCT_OR_UNION_34 -> VAR_319 , VAR_320 ) ; METHOD_41 ( & STRUCT_OR_UNION_35 -> VAR_321 ) ; METHOD_42 ( & STRUCT_OR_UNION_36 -> VAR_322 ) ; METHOD_43 ( & STRUCT_OR_UNION_37 -> VAR_323 ) ; METHOD_44 ( & STRUCT_OR_UNION_38 -> VAR_324 ) ; STRUCT_OR_UNION_39 -> VAR_325 = METHOD_45 ( VAR_326 , VAR_327 -> VAR_328 ) ; STRUCT_OR_UNION_40 -> VAR_329 = METHOD_46 ( VAR_330 ) ; if ( STRUCT_OR_UNION_41 -> VAR_331 ) STRUCT_OR_UNION_42 -> VAR_332 = VAR_333 -> VAR_334 ; METHOD_47 ( & STRUCT_OR_UNION_43 -> VAR_335 ) ; STRUCT_OR_UNION_44 -> VAR_336 . VAR_337 = & VAR_338 ; METHOD_48 ( & STRUCT_OR_UNION_45 -> VAR_339 ) ; STRUCT_OR_UNION_46 -> VAR_340 = VAR_341 ; VAR_342 = METHOD_49 ( VAR_343 , VAR_344 , VAR_345 , & STRUCT_OR_UNION_47 -> VAR_346 ) ; if ( ! VAR_347 ) goto VAR_348 ; STRUCT_OR_UNION_48 -> VAR_349 = VAR_350 ; if ( METHOD_50 ( STRUCT_OR_UNION_49 ) < 0 ) goto VAR_351 ; STRUCT_OR_UNION_50 -> VAR_352 = METHOD_51 ( 0 , VAR_353 ) ; if ( ! STRUCT_OR_UNION_51 -> VAR_354 ) goto VAR_355 ; for ( VAR_356 = 0 ; VAR_357 < VAR_358 ; VAR_359 ++ ) { struct STRUCT_OR_UNION_52 * VAR_360 = & ( STRUCT_OR_UNION_53 -> VAR_361 [ VAR_362 ] ) ; struct STRUCT_OR_UNION_54 * STRUCT_OR_UNION_55 ; VAR_363 -> VAR_364 = METHOD_52 ( STRUCT_OR_UNION_56 -> VAR_365 , VAR_366 , VAR_367 , & VAR_368 -> VAR_369 ) ; if ( ! VAR_370 -> VAR_371 ) goto VAR_372 ; VAR_373 -> VAR_374 = VAR_375 ; VAR_376 -> VAR_377 = STRUCT_OR_UNION_57 ; STRUCT_OR_UNION_58 = METHOD_53 ( 0 , VAR_378 ) ; if ( ! STRUCT_OR_UNION_59 ) goto VAR_379 ; STRUCT_OR_UNION_60 -> VAR_380 |= VAR_381 ; STRUCT_OR_UNION_61 -> VAR_382 = VAR_383 -> VAR_384 ; if ( STRUCT_OR_UNION_62 -> VAR_385 ) { METHOD_54 ( STRUCT_OR_UNION_63 , STRUCT_OR_UNION_64 -> VAR_386 , STRUCT_OR_UNION_65 -> VAR_387 , VAR_388 -> VAR_389 , STRUCT_OR_UNION_66 -> VAR_390 , VAR_391 , VAR_392 , STRUCT_OR_UNION_67 -> VAR_393 ) ; } else { METHOD_55 ( STRUCT_OR_UNION_68 , STRUCT_OR_UNION_69 -> VAR_394 , STRUCT_OR_UNION_70 -> VAR_395 , VAR_396 -> VAR_397 , STRUCT_OR_UNION_71 -> VAR_398 , VAR_399 , VAR_400 ) ; } STRUCT_OR_UNION_72 -> VAR_401 [ VAR_402 ] = STRUCT_OR_UNION_73 ; METHOD_56 ( VAR_403 , & STRUCT_OR_UNION_74 -> VAR_404 ) ; } for ( VAR_405 = 0 ; VAR_406 < VAR_407 ; VAR_408 ++ ) { struct STRUCT_OR_UNION_75 * VAR_409 = & ( STRUCT_OR_UNION_76 -> VAR_410 [ VAR_411 ] ) ; VAR_412 -> STRUCT_OR_UNION_77 = METHOD_57 ( 0 , VAR_413 ) ; if ( VAR_414 -> STRUCT_OR_UNION_78 == VAR_415 ) goto VAR_416 ; if ( METHOD_58 ( VAR_417 ) ) METHOD_59 ( VAR_418 -> STRUCT_OR_UNION_79 , VAR_419 , METHOD_60 ( VAR_420 , VAR_421 -> VAR_422 ) , VAR_423 , STRUCT_OR_UNION_80 -> VAR_424 , VAR_425 , VAR_426 , VAR_427 -> VAR_428 ) ; else METHOD_61 ( VAR_429 -> STRUCT_OR_UNION_81 , VAR_430 , METHOD_62 ( VAR_431 , VAR_432 -> VAR_433 ) , VAR_434 , STRUCT_OR_UNION_82 -> VAR_435 , VAR_436 , VAR_437 ) ; VAR_438 -> STRUCT_OR_UNION_83 -> VAR_439 |= VAR_440 ; if ( VAR_441 & VAR_442 ) VAR_443 -> STRUCT_OR_UNION_84 -> VAR_444 |= VAR_445 ; VAR_446 -> VAR_447 = STRUCT_OR_UNION_85 ; } METHOD_63 ( VAR_448 , STRUCT_OR_UNION_86 ) ; VAR_449 = METHOD_64 ( & VAR_450 -> VAR_451 , & VAR_452 ) ; if ( VAR_453 < 0 ) goto VAR_454 ; if ( VAR_455 ) { STRUCT_OR_UNION_87 -> VAR_456 = METHOD_65 ( VAR_457 -> VAR_458 - 4 , VAR_459 ) ; if ( ! STRUCT_OR_UNION_88 -> VAR_460 ) goto VAR_461 ; STRUCT_OR_UNION_89 -> VAR_462 = VAR_463 -> VAR_464 - 4 ; METHOD_66 ( STRUCT_OR_UNION_90 -> VAR_465 , ( TYPE_17 * ) & VAR_466 -> VAR_467 , VAR_468 -> VAR_469 - 4 ) ; STRUCT_OR_UNION_91 -> VAR_470 = VAR_471 -> VAR_472 ; VAR_473 = METHOD_67 ( & VAR_474 -> VAR_475 , & VAR_476 ) ; if ( VAR_477 < 0 ) { METHOD_68 ( STRUCT_OR_UNION_92 -> VAR_478 ) ; STRUCT_OR_UNION_93 -> VAR_479 = VAR_480 ; STRUCT_OR_UNION_94 -> VAR_481 = 0 ; goto VAR_482 ; } VAR_483 = METHOD_69 ( & VAR_484 -> VAR_485 , & VAR_486 ) ; if ( VAR_487 < 0 ) { METHOD_70 ( & VAR_488 -> VAR_489 , & VAR_490 ) ; METHOD_71 ( STRUCT_OR_UNION_95 -> VAR_491 ) ; STRUCT_OR_UNION_96 -> VAR_492 = VAR_493 ; STRUCT_OR_UNION_97 -> VAR_494 = 0 ; goto VAR_495 ; } } VAR_496 : METHOD_72 ( STRUCT_OR_UNION_98 -> VAR_497 , VAR_498 , METHOD_73 ( VAR_499 , VAR_500 -> VAR_501 ) , STRUCT_OR_UNION_99 -> VAR_502 , VAR_503 , VAR_504 , STRUCT_OR_UNION_100 , VAR_505 -> VAR_506 ? VAR_507 -> VAR_508 : 16 ) ; STRUCT_OR_UNION_101 -> VAR_509 -> VAR_510 |= VAR_511 ; STRUCT_OR_UNION_102 -> VAR_512 -> VAR_513 = STRUCT_OR_UNION_103 -> VAR_514 ; METHOD_74 ( & VAR_515 -> VAR_516 , "ttyACM%d:USBACMdevice\\n" , VAR_517 ) ; STRUCT_OR_UNION_104 -> VAR_518 . VAR_519 = METHOD_75 ( 9600 ) ; STRUCT_OR_UNION_105 -> VAR_520 . VAR_521 = 8 ; METHOD_76 ( STRUCT_OR_UNION_106 , & STRUCT_OR_UNION_107 -> VAR_522 ) ; METHOD_77 ( & VAR_523 , VAR_524 , STRUCT_OR_UNION_108 ) ; METHOD_78 ( VAR_525 , STRUCT_OR_UNION_109 ) ; METHOD_79 ( VAR_526 ) ; VAR_527 = METHOD_80 ( & STRUCT_OR_UNION_110 -> VAR_528 , VAR_529 , VAR_530 , & VAR_531 -> VAR_532 ) ; if ( METHOD_81 ( VAR_533 ) ) { VAR_534 = METHOD_82 ( VAR_535 ) ; goto VAR_536 ; } if ( VAR_537 & VAR_538 ) { METHOD_83 ( VAR_539 , METHOD_84 ( VAR_540 , VAR_541 -> VAR_542 ) ) ; METHOD_85 ( VAR_543 , METHOD_86 ( VAR_544 , VAR_545 -> VAR_546 ) ) ; } return 0 ; VAR_547 : if ( STRUCT_OR_UNION_111 -> VAR_548 ) { METHOD_87 ( & STRUCT_OR_UNION_112 -> VAR_549 -> VAR_550 , & VAR_551 ) ; METHOD_88 ( & STRUCT_OR_UNION_113 -> VAR_552 -> VAR_553 , & VAR_554 ) ; METHOD_89 ( STRUCT_OR_UNION_114 -> VAR_555 ) ; } METHOD_90 ( & STRUCT_OR_UNION_115 -> VAR_556 -> VAR_557 , & VAR_558 ) ; VAR_559 : METHOD_91 ( VAR_560 , VAR_561 ) ; for ( VAR_562 = 0 ; VAR_563 < VAR_564 ; VAR_565 ++ ) METHOD_92 ( STRUCT_OR_UNION_116 -> VAR_566 [ VAR_567 ] . STRUCT_OR_UNION_117 ) ; VAR_568 : for ( VAR_569 = 0 ; VAR_570 < VAR_571 ; VAR_572 ++ ) METHOD_93 ( STRUCT_OR_UNION_118 -> VAR_573 [ VAR_574 ] ) ; METHOD_94 ( STRUCT_OR_UNION_119 ) ; METHOD_95 ( STRUCT_OR_UNION_120 -> VAR_575 ) ; VAR_576 : METHOD_96 ( STRUCT_OR_UNION_121 ) ; VAR_577 : METHOD_97 ( VAR_578 , VAR_579 , STRUCT_OR_UNION_122 -> VAR_580 , STRUCT_OR_UNION_123 -> VAR_581 ) ; VAR_582 : METHOD_98 ( STRUCT_OR_UNION_124 ) ; METHOD_99 ( STRUCT_OR_UNION_125 ) ; VAR_583 : return VAR_584 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , & VAR_13 ) ; if ( VAR_14 < 0 ) { return VAR_15 ; }  METHOD_2 ( VAR_16 , 1 , 0 , VAR_17 , VAR_18 ) ;  VAR_19 = ( VAR_20 >> 4 ) & 0x3f ; if ( METHOD_3 ( VAR_21 ) ) { TYPE_8 VAR_22 ; if ( ! METHOD_4 ( VAR_23 , ( unsigned TYPE_9 ) VAR_24 , 1UL << VAR_25 ) ) { return - 1 ; } if ( METHOD_5 ( & VAR_26 , ( const TYPE_10 * ) ( TYPE_11 ) VAR_27 , ( 1 << VAR_28 ) ) > 0 ) { return - 1 ; } switch ( VAR_29 ) { case 1 : if ( VAR_30 ) { VAR_31 -> VAR_32 [ VAR_33 ] = ( TYPE_12 ) ( TYPE_13 ) * ( TYPE_14 * ) & VAR_34 ; } else { VAR_35 -> VAR_36 [ VAR_37 ] = ( TYPE_15 ) * ( TYPE_16 * ) & VAR_38 ; } break ; case 2 : VAR_39 -> VAR_40 [ VAR_41 ] = ( TYPE_17 ) ( TYPE_18 ) * ( TYPE_19 * ) & VAR_42 ; break ; case 3 : VAR_43 -> VAR_44 [ VAR_45 ] = VAR_46 ; break ; default : METHOD_6 ( "Unexpectedwidth_shift%dinmisaligned_load,PC=%08lx\\n" , VAR_47 , ( unsigned TYPE_20 ) VAR_48 -> VAR_49 ) ; break ; } } else { TYPE_21 VAR_50 , VAR_51 ; switch ( VAR_52 ) { case 1 : METHOD_7 ( VAR_53 , VAR_54 , & VAR_55 -> VAR_56 [ VAR_57 ] ) ; break ; case 2 : asm ( "ldlo.l%1,0,%0" : METHOD_8 ( VAR_58 ) : METHOD_9 ( VAR_59 ) ) ; asm ( "ldhi.l%1,3,%0" : METHOD_10 ( VAR_60 ) : METHOD_11 ( VAR_61 ) ) ; VAR_62 -> VAR_63 [ VAR_64 ] = VAR_65 | VAR_66 ; break ; case 3 : asm ( "ldlo.q%1,0,%0" : METHOD_12 ( VAR_67 ) : METHOD_13 ( VAR_68 ) ) ; asm ( "ldhi.q%1,7,%0" : METHOD_14 ( VAR_69 ) : METHOD_15 ( VAR_70 ) ) ; VAR_71 -> VAR_72 [ VAR_73 ] = VAR_74 | VAR_75 ; break ; default : METHOD_16 ( "Unexpectedwidth_shift%dinmisaligned_load,PC=%08lx\\n" , VAR_76 , ( unsigned TYPE_22 ) VAR_77 -> VAR_78 ) ; break ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 ; TYPE_2 VAR_2 , VAR_3 = 0 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) {  VAR_8 = METHOD_1 ( VAR_9 [ VAR_10 ] , VAR_11 ) ;  if ( VAR_12 < 0 ) continue ; break ; } if ( VAR_13 == VAR_14 ) { METHOD_2 ( "%sERROR:uinputdeviceopenfailed" , VAR_15 ) ; return - 1 ; } METHOD_3 ( & VAR_16 , 0 , sizeof ( VAR_17 ) ) ; if ( VAR_18 ) METHOD_4 ( VAR_19 . VAR_20 , VAR_21 , VAR_22 - 1 ) ; VAR_23 . VAR_24 . VAR_25 = VAR_26 ; VAR_27 . VAR_28 . VAR_29 = 0x0000 ; VAR_30 . VAR_31 . VAR_32 = 0x0000 ; VAR_33 . VAR_34 . VAR_35 = 0x0000 ;  if ( METHOD_5 ( VAR_36 , & VAR_37 , sizeof ( VAR_38 ) ) < 0 ) {  METHOD_6 ( "%sUnabletowritedeviceinformation" , VAR_39 ) ; METHOD_7 ( VAR_40 ) ; return - 1 ; }  METHOD_8 ( VAR_41 , VAR_42 , VAR_43 ) ;   METHOD_9 ( VAR_44 , VAR_45 , VAR_46 ) ;   METHOD_10 ( VAR_47 , VAR_48 , VAR_49 ) ;  for ( VAR_50 = 0 ; VAR_51 [ VAR_52 ] . VAR_53 != VAR_54 ; VAR_55 ++ )  METHOD_11 ( VAR_56 , VAR_57 , VAR_58 [ VAR_59 ] . VAR_60 ) ;   if ( METHOD_12 ( VAR_61 , VAR_62 , VAR_63 ) < 0 ) {  METHOD_13 ( "%sUnabletocreateuinputdevice" , VAR_64 ) ; METHOD_14 ( VAR_65 ) ; return - 1 ; } return VAR_66 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 ;  TYPE_1 VAR_2 ; if ( METHOD_1 ( VAR_3 ) ) return METHOD_2 ( 2 , 2 ) ; VAR_4 = METHOD_3 ( VAR_5 , VAR_6 ) ; if ( VAR_7 < 0 ) return VAR_8 ;  VAR_9 = METHOD_4 ( VAR_10 ) ;   if ( ! VAR_11 )  return - VAR_12 ;  if ( ! ( VAR_13 -> VAR_14 & METHOD_5 ( 3 ) ) )  return - VAR_15 ;  switch ( ( VAR_16 -> VAR_17 << 1 ) | VAR_18 -> VAR_19 ) {  case 0 : return METHOD_6 ( 2 , 2 ) ; case 1 : return METHOD_7 ( 4 , 4 ) ; case 2 : return METHOD_8 ( 4 , 8 ) ; case 3 : default : return - VAR_20 ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 ) { if ( VAR_2 -> VAR_3 ) { unsigned TYPE_1 VAR_4 ; for ( VAR_5 = 0 ; VAR_6 < VAR_7 -> VAR_8 ; VAR_9 ++ )  METHOD_1 ( & VAR_10 -> VAR_11 [ VAR_12 ] . VAR_13 ) ;  METHOD_2 ( VAR_14 -> VAR_15 ) ; } METHOD_3 ( VAR_16 ) ; } }
METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; struct STRUCT_OR_UNION_1 * VAR_1 ; TYPE_3 VAR_2 ; METHOD_1 ( VAR_3 != VAR_4 ) ; METHOD_2 ( VAR_5 != VAR_6 ) ; if ( TYPE_4 & ~ ( VAR_7 | VAR_8 ) ) return - VAR_9 ; VAR_10 = METHOD_3 ( ) ; if ( METHOD_4 ( METHOD_5 ( & VAR_11 -> VAR_12 ) >= VAR_13 ) ) { VAR_14 = - VAR_15 ; goto VAR_16 ; } VAR_17 = METHOD_6 ( VAR_18 , VAR_19 ) ; if ( METHOD_7 ( VAR_20 ) ) { VAR_21 = METHOD_8 ( VAR_22 ) ; goto VAR_23 ; } METHOD_9 ( & VAR_24 -> VAR_25 ) ; VAR_26 = METHOD_10 ( "inotify" , & VAR_27 , VAR_28 , VAR_29 | TYPE_5 ) ; if ( VAR_30 >= 0 ) return VAR_31 ;  METHOD_11 ( & VAR_32 -> VAR_33 ) ;  VAR_34 : METHOD_12 ( VAR_35 ) ; return VAR_36 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 )  { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; * VAR_3 = VAR_4 ; VAR_5 = METHOD_1 ( sizeof ( * VAR_6 ) , & VAR_7 ) ; if ( VAR_8 == VAR_9 ) goto VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = VAR_16 ; VAR_17 -> VAR_18 = VAR_19 ; VAR_20 -> VAR_21 = 0 ;  VAR_22 = METHOD_2 ( & VAR_23 -> VAR_24 ) ;  if ( VAR_25 != 0 ) goto VAR_26 ; * VAR_27 = VAR_28 ; VAR_29 : if ( VAR_30 != 0 ) METHOD_3 ( VAR_31 ) ; return VAR_32 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ; TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ; VAR_19 = VAR_20 . VAR_21 ; VAR_22 = VAR_23 . VAR_24 ; VAR_25 = VAR_26 . VAR_27 ; VAR_28 = VAR_29 . VAR_30 ; VAR_31 = METHOD_4 ( VAR_32 . VAR_33 ) ;  VAR_34 = METHOD_5 ( VAR_35 -> VAR_36 ) ;  switch ( VAR_37 ) { case VAR_38 : if ( METHOD_6 ( VAR_39 -> VAR_40 , VAR_41 ) || METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ) { VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = VAR_50 ; } else { VAR_51 -> VAR_52 += VAR_53 ; VAR_54 -> VAR_55 += VAR_56 ; } if ( VAR_57 -> VAR_58 + VAR_59 < VAR_60 || VAR_61 -> VAR_62 + VAR_63 < VAR_64 ) { VAR_65 -> VAR_66 = 0 ; VAR_67 -> VAR_68 = VAR_69 ; } else { VAR_70 -> VAR_71 += VAR_72 ; VAR_73 -> VAR_74 += VAR_75 ; } VAR_76 -> VAR_77 = METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 . VAR_81 ) ; break ; case VAR_82 : if ( METHOD_9 ( VAR_83 -> VAR_84 , VAR_85 ) || METHOD_10 ( VAR_86 -> VAR_87 , VAR_88 ) ) { VAR_89 -> VAR_90 = VAR_91 ; VAR_92 -> VAR_93 = VAR_94 ; } else { VAR_95 -> VAR_96 -= VAR_97 ; VAR_98 -> VAR_99 -= VAR_100 ; } if ( VAR_101 -> VAR_102 < VAR_103 ) { VAR_104 -> VAR_105 = 0 ; VAR_106 -> VAR_107 = VAR_108 ; } else { VAR_109 -> VAR_110 -= VAR_111 ; VAR_112 -> VAR_113 -= VAR_114 ; } VAR_115 -> VAR_116 = METHOD_11 ( VAR_117 -> VAR_118 , VAR_119 . VAR_120 ) ; break ; case VAR_121 : VAR_122 -> VAR_123 = METHOD_12 ( VAR_124 -> VAR_125 , VAR_126 . VAR_127 ) ; if ( VAR_128 < 0 || VAR_129 -> VAR_130 < 0 ) { METHOD_13 ( VAR_131 ) ; METHOD_14 ( VAR_132 ) ; break ; } if ( VAR_133 > VAR_134 || VAR_135 -> VAR_136 > VAR_137 ) { METHOD_15 ( VAR_138 ) ; METHOD_16 ( VAR_139 ) ; break ; } VAR_140 -> VAR_141 *= VAR_142 ; VAR_143 -> VAR_144 *= VAR_145 ; if ( VAR_146 -> VAR_147 > VAR_148 ) { VAR_149 -> VAR_150 = VAR_151 ; VAR_152 -> VAR_153 = VAR_154 ; } else { VAR_155 -> VAR_156 = VAR_157 -> VAR_158 ; VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; } break ; case VAR_163 : if ( VAR_164 && VAR_165 ) { METHOD_17 ( VAR_166 , VAR_167 -> VAR_168 . VAR_169 & VAR_170 . VAR_171 . VAR_172 ) ; break ; } VAR_173 -> VAR_174 = METHOD_18 ( VAR_175 -> VAR_176 , VAR_177 . VAR_178 ) ; VAR_179 -> VAR_180 = VAR_181 -> VAR_182 . VAR_183 ; VAR_184 -> VAR_185 = METHOD_19 ( VAR_186 -> VAR_187 , VAR_188 ) ; if ( VAR_189 -> VAR_190 < 0 || VAR_191 < 0 ) { VAR_192 -> VAR_193 = VAR_194 ; VAR_195 -> VAR_196 = VAR_197 ; } else { VAR_198 -> VAR_199 = VAR_200 -> VAR_201 ; VAR_202 -> VAR_203 = VAR_204 -> VAR_205 ; } METHOD_20 ( VAR_206 ) ; break ; case VAR_207 : if ( VAR_208 && VAR_209 ) { METHOD_21 ( VAR_210 , VAR_211 -> VAR_212 . VAR_213 | VAR_214 . VAR_215 . VAR_216 ) ; break ; } VAR_217 -> VAR_218 = METHOD_22 ( VAR_219 -> VAR_220 , VAR_221 . VAR_222 ) ; VAR_223 -> VAR_224 = METHOD_23 ( VAR_225 -> VAR_226 , VAR_227 ) ; VAR_228 -> VAR_229 = VAR_230 -> VAR_231 . VAR_232 | VAR_233 -> VAR_234 . VAR_235 ; if ( VAR_236 -> VAR_237 < 0 || VAR_238 < 0 ) { VAR_239 -> VAR_240 = VAR_241 ; VAR_242 -> VAR_243 = VAR_244 ; } else { VAR_245 -> VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = VAR_251 -> VAR_252 ; } METHOD_24 ( VAR_253 ) ; break ; case VAR_254 : if ( VAR_255 >= VAR_256 ) { METHOD_25 ( VAR_257 , VAR_258 , VAR_259 -> VAR_260 ) ; break ; } VAR_261 -> VAR_262 = VAR_263 ; VAR_264 -> VAR_265 = VAR_266 ; if ( VAR_267 -> VAR_268 > 1ULL << ( 63 - VAR_269 ) ) { VAR_270 -> VAR_271 = 0 ; VAR_272 -> VAR_273 = VAR_274 ; } else { VAR_275 -> VAR_276 <<= VAR_277 ; VAR_278 -> VAR_279 <<= VAR_280 ; } if ( VAR_281 ) VAR_282 -> VAR_283 = METHOD_26 ( VAR_284 -> VAR_285 , VAR_286 ) ; else VAR_287 -> VAR_288 = METHOD_27 ( VAR_289 , VAR_290 ) ; METHOD_28 ( VAR_291 ) ; break ; case VAR_292 : if ( VAR_293 >= VAR_294 ) { METHOD_29 ( VAR_295 , VAR_296 , VAR_297 -> VAR_298 ) ; break ; } VAR_299 -> VAR_300 = VAR_301 ; VAR_302 -> VAR_303 = VAR_304 ; if ( VAR_305 ) VAR_306 -> VAR_307 = METHOD_30 ( VAR_308 -> VAR_309 , VAR_310 ) ; else VAR_311 -> VAR_312 = METHOD_31 ( VAR_313 , VAR_314 ) ; VAR_315 -> VAR_316 >>= VAR_317 ; VAR_318 -> VAR_319 >>= VAR_320 ; METHOD_32 ( VAR_321 ) ; break ; default : METHOD_33 ( VAR_322 , VAR_323 , VAR_324 -> VAR_325 ) ; break ; } if ( METHOD_34 ( VAR_326 -> VAR_327 ) != VAR_328 ) { METHOD_35 ( VAR_329 , 4 ) ; METHOD_36 ( & VAR_330 , 4 ) ; } METHOD_37 ( VAR_331 ) ; METHOD_38 ( VAR_332 ) ; return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; METHOD_1 ( VAR_3 -> VAR_4 == VAR_5 ) ; if ( VAR_6 -> VAR_7 != VAR_8 ) ( TYPE_4 ) METHOD_2 ( VAR_9 , METHOD_3 ( ) , "%s" , VAR_10 -> VAR_11 ) ; METHOD_4 ( VAR_12 != ( TYPE_5 * ) VAR_13 ) ; METHOD_5 ( VAR_14 -> VAR_15 == VAR_16 ) ; VAR_17 = ( TYPE_6 * ) VAR_18 ; if d ( VAR_19 ) { TYPE_7 VAR_20 ; TYPE_8 VAR_21 ; TYPE_9 VAR_22 , VAR_23 ; TYPE_10 VAR_24 , VAR_25 ; TYPE_11 * VAR_26 ; TYPE_12 VAR_27 ; TYPE_13 VAR_28 ; register TYPE_14 * VAR_29 ; register TYPE_15 VAR_30 ; VAR_31 * VAR_32 ; TYPE_16 VAR_33 ; METHOD_6 ( VAR_34 != ( const TYPE_17 * ) VAR_35 ) ; VAR_36 = 0 ; VAR_37 . VAR_38 = sizeof ( VAR_39 ) ; VAR_40 = ( TYPE_18 * ) VAR_41 ; while ( METHOD_7 ( VAR_42 , VAR_43 , & VAR_44 , 0 ) && ++ VAR_45 ) { if ( ( VAR_46 . VAR_47 & VAR_48 ) != VAR_49 ) continue ; VAR_50 = METHOD_8 ( VAR_51 . VAR_52 , VAR_53 . VAR_54 , VAR_55 , VAR_56 ) ; if ( VAR_57 == ( TYPE_19 ) VAR_58 ) METHOD_9 ( VAR_59 , "UnableToCreateDC" ) ; VAR_60 = METHOD_10 ( VAR_61 ) ; VAR_62 -> VAR_63 = ( TYPE_20 ) METHOD_11 ( VAR_64 , VAR_65 ) ; VAR_66 -> VAR_67 = ( TYPE_21 ) METHOD_12 ( VAR_68 , VAR_69 ) ; VAR_70 -> VAR_71 = VAR_72 ;  VAR_73 = METHOD_13 ( VAR_74 , VAR_75 -> VAR_76 , VAR_77 -> VAR_78 ) ;  if ( VAR_79 == VAR_80 ) { METHOD_14 ( VAR_81 , & VAR_82 -> VAR_83 ) ; return ( METHOD_15 ( VAR_84 ) ) ; }  if ( VAR_85 == ( TYPE_22 * ) VAR_86 )  VAR_87 = VAR_88 ; else METHOD_16 ( & VAR_89 , VAR_90 ) ; VAR_91 = METHOD_17 ( VAR_92 ) ; if ( VAR_93 == ( TYPE_23 ) VAR_94 ) { METHOD_18 ( VAR_95 ) ; METHOD_19 ( VAR_96 , "UnableToCreateDC" ) ; } ( TYPE_24 ) METHOD_20 ( & VAR_97 , 0 , sizeof ( TYPE_25 ) ) ; VAR_98 . VAR_99 . VAR_100 = sizeof ( VAR_101 ) ; VAR_102 . VAR_103 . VAR_104 = ( TYPE_26 ) VAR_105 -> VAR_106 ; VAR_107 . VAR_108 . VAR_109 = ( - 1 ) * ( TYPE_27 ) VAR_110 -> VAR_111 ; VAR_112 . VAR_113 . VAR_114 = 1 ; VAR_115 . VAR_116 . VAR_117 = 24 ; VAR_118 . VAR_119 . VAR_120 = VAR_121 ; VAR_122 = METHOD_21 ( VAR_123 , & VAR_124 , VAR_125 , ( TYPE_28 * * ) & VAR_126 , VAR_127 , 0 ) ; if ( VAR_128 == ( TYPE_29 ) VAR_129 ) { METHOD_22 ( VAR_130 ) ; METHOD_23 ( VAR_131 ) ; METHOD_24 ( VAR_132 , "UnableToCreateBitmap" ) ; } VAR_133 = ( TYPE_30 ) METHOD_25 ( VAR_134 , VAR_135 ) ; if ( VAR_136 == ( TYPE_31 ) VAR_137 ) { METHOD_26 ( VAR_138 ) ; METHOD_27 ( VAR_139 ) ; METHOD_28 ( VAR_140 ) ; METHOD_29 ( VAR_141 , "UnableToCreateBitmap" ) ; } METHOD_30 ( VAR_142 , 0 , 0 , ( TYPE_32 ) VAR_143 -> VAR_144 , ( TYPE_33 ) VAR_145 -> VAR_146 , VAR_147 , 0 , 0 , VAR_148 ) ; ( TYPE_34 ) METHOD_31 ( VAR_149 , VAR_150 ) ; for ( VAR_151 = 0 ; VAR_152 < ( TYPE_35 ) VAR_153 -> VAR_154 ; VAR_155 ++ ) { VAR_156 = METHOD_32 ( VAR_157 , 0 , VAR_158 , VAR_159 -> VAR_160 , 1 , VAR_161 ) ; if ( VAR_162 == ( TYPE_36 * ) VAR_163 ) break ; for ( VAR_164 = 0 ; VAR_165 < ( TYPE_37 ) VAR_166 -> VAR_167 ; VAR_168 ++ ) { METHOD_33 ( VAR_169 , METHOD_34 ( VAR_170 -> VAR_171 ) ) ; METHOD_35 ( VAR_172 , METHOD_36 ( VAR_173 -> VAR_174 ) ) ; METHOD_37 ( VAR_175 , METHOD_38 ( VAR_176 -> VAR_177 ) ) ; METHOD_39 ( VAR_178 , VAR_179 ) ; VAR_180 ++ ; VAR_181 ++ ; } if ( METHOD_40 ( VAR_182 , VAR_183 ) == VAR_184 ) break ; } METHOD_41 ( VAR_185 ) ; METHOD_42 ( VAR_186 ) ; METHOD_43 ( VAR_187 ) ; } } else if d ( VAR_188 ) { const TYPE_38 * VAR_189 ; TYPE_39 VAR_190 ; ( TYPE_40 ) VAR_191 ; METHOD_44 ( & VAR_192 ) ; VAR_193 = METHOD_45 ( VAR_194 , "x:screen" ) ; if ( VAR_195 != ( const TYPE_41 * ) VAR_196 ) VAR_197 . VAR_198 = METHOD_46 ( VAR_199 ) ; VAR_200 = METHOD_47 ( VAR_201 , "x:silent" ) ; if ( VAR_202 != ( const TYPE_42 * ) VAR_203 ) VAR_204 . VAR_205 = METHOD_48 ( VAR_206 ) ; VAR_207 = METHOD_49 ( VAR_208 , & VAR_209 ) ; } return ( VAR_210 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 = & VAR_5 -> VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ; while ( VAR_10 == VAR_11 ) { METHOD_2 ( VAR_12 , VAR_13 ) ;  while ( METHOD_3 ( VAR_14 , VAR_15 ) != VAR_16 )  { METHOD_4 ( VAR_17 , 8 ) ; } VAR_18 = METHOD_5 ( VAR_19 , VAR_20 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { if IS_ENABLED ( VAR_3 ) struct VAR_4 * VAR_5 = STRUCT_OR_UNION_2 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 -> VAR_9 ; unsigned TYPE_5 VAR_10 = 0 ; TYPE_6 VAR_11 = VAR_12 ; unsigned TYPE_7 VAR_13 = 0 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; TYPE_8 VAR_14 ; TYPE_9 VAR_15 ; TYPE_10 * VAR_16 ; TYPE_11 VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) return - VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 = VAR_30 ; if IS_ENABLED ( VAR_31 ) STRUCT_OR_UNION_6 = STRUCT_OR_UNION_7 -> VAR_32 . STRUCT_OR_UNION_8 ; if ( METHOD_3 ( STRUCT_OR_UNION_9 -> VAR_33 . VAR_34 , "ipc_flood_count" ) && METHOD_4 ( STRUCT_OR_UNION_10 -> VAR_35 . VAR_36 , "ipc_flood_duration_ms" ) )  return - VAR_37 ;  if ( ! METHOD_5 ( STRUCT_OR_UNION_11 -> VAR_38 . VAR_39 , "ipc_flood_duration_ms" ) ) VAR_40 = VAR_41 ; if ( VAR_42 ) VAR_43 = METHOD_6 ( VAR_44 , 0 , & VAR_45 ) ; else VAR_46 = METHOD_7 ( VAR_47 , 0 , & VAR_48 ) ; if ( VAR_49 < 0 ) goto VAR_50 ; if ( VAR_51 ) { if ( ! VAR_52 ) { VAR_53 = VAR_54 ; goto VAR_55 ; } if ( VAR_56 > VAR_57 ) VAR_58 = VAR_59 ; } else { if ( ! VAR_60 ) { VAR_61 = VAR_62 ; goto VAR_63 ; } if ( VAR_64 > VAR_65 ) VAR_66 = VAR_67 ; } VAR_68 = METHOD_8 ( VAR_69 -> VAR_70 ) ; if ( VAR_71 < 0 ) { METHOD_9 ( VAR_72 -> VAR_73 , "error:debugfswritefailedtoresume%d\\n" , VAR_74 ) ; METHOD_10 ( VAR_75 -> VAR_76 ) ; goto VAR_77 ; } VAR_78 = METHOD_11 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 ) ; METHOD_12 ( VAR_84 -> VAR_85 ) ; VAR_86 = METHOD_13 ( VAR_87 -> VAR_88 ) ; if ( VAR_89 < 0 ) METHOD_14 ( VAR_90 -> VAR_91 , "error:debugfswritefailedtoidle%d\\n" , VAR_92 ) ; if ( VAR_93 >= 0 ) VAR_94 = VAR_95 ; VAR_96 : METHOD_15 ( VAR_97 ) ; return VAR_98 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { TYPE_5 * VAR_3 , VAR_4 [ sizeof ( "nnnnn\\0" ) ] ;  TYPE_6 VAR_5 ;   if ( METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) )  return - VAR_9 ; VAR_10 = METHOD_2 ( VAR_11 , & VAR_12 , 0 ) ; if ( ( * VAR_13 != '\\0' ) && ! METHOD_3 ( * VAR_14 ) ) return - VAR_15 ; VAR_16 = VAR_17 ; return VAR_18 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; if ( VAR_3 == VAR_4 ) return ( - 1 ) ; if ( VAR_5 ) { if ( ( VAR_6 -> VAR_7 != VAR_8 ) && ( VAR_9 -> VAR_10 -> VAR_11 ) ) METHOD_1 ( VAR_12 , "%s(%d):" , VAR_13 -> VAR_14 -> VAR_15 , VAR_16 -> VAR_17 -> VAR_18 ) ; METHOD_2 ( VAR_19 ,  "Pushinginput%d:%.30s\\n" , VAR_20 -> VAR_21 + 1 , VAR_22 -> VAR_23 ) ;  } VAR_24 = METHOD_3 ( VAR_25 , VAR_26 ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) return ( - 1 ) ; VAR_30 ; return ( VAR_31 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) ( VAR_3 -> VAR_4 + VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = VAR_7 -> VAR_8 ; unsigned TYPE_1 VAR_9 ; if ( VAR_10 != METHOD_1 ( VAR_11 -> VAR_12 ) ) { METHOD_2 ( VAR_13 , VAR_14 , "MagicMismatch,valid(0x%x)-read(0x%x)" , VAR_15 , METHOD_3 ( VAR_16 -> VAR_17 ) ) ; return 1 ; } if ( VAR_18 != VAR_19 ) { METHOD_4 ( VAR_20 , VAR_21 , "Invalidpage_cache_size(%lu),supportsonly4KB\\n" , VAR_22 ) ; return 1 ; } VAR_23 = 1 << METHOD_5 ( VAR_24 -> VAR_25 ) ; if ( VAR_26 != VAR_27 ) { METHOD_6 ( VAR_28 , VAR_29 , "Invalidblocksize(%u),supportsonly4KB\\n" , VAR_30 ) ; return 1 ; } if ( METHOD_7 ( VAR_31 -> VAR_32 ) != 9 ) { METHOD_8 ( VAR_33 , VAR_34 , "Invalidlogblockspersegment(%u)\\n" , METHOD_9 ( VAR_35 -> VAR_36 ) ) ; return 1 ; } if ( METHOD_10 ( VAR_37 -> VAR_38 ) > VAR_39 || METHOD_11 ( VAR_40 -> VAR_41 ) < VAR_42 ) { METHOD_12 ( VAR_43 , VAR_44 , "Invalidlogsectorsize(%u)" , METHOD_13 ( VAR_45 -> VAR_46 ) ) ; return 1 ; } if ( METHOD_14 ( VAR_47 -> VAR_48 ) + METHOD_15 ( VAR_49 -> VAR_50 ) != VAR_51 ) { METHOD_16 ( VAR_52 , VAR_53 , "Invalidlogsectorsperblock(%u)logsectorsize(%u)" , METHOD_17 ( VAR_54 -> VAR_55 ) , METHOD_18 ( VAR_56 -> VAR_57 ) ) ; return 1 ; } if ( METHOD_19 ( VAR_58 -> VAR_59 ) != 1 || METHOD_20 ( VAR_60 -> VAR_61 ) != 2 || METHOD_21 ( VAR_62 -> VAR_63 ) != 3 ) { METHOD_22 ( VAR_64 , VAR_65 , "InvalidFsMetaIno:node(%u)meta(%u)root(%u)" , METHOD_23 ( VAR_66 -> VAR_67 ) , METHOD_24 ( VAR_68 -> VAR_69 ) , METHOD_25 ( VAR_70 -> VAR_71 ) ) ; return 1 ; }  if ( METHOD_26 ( VAR_72 , VAR_73 ) )  return 1 ; return 0 ; }
TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) {  TYPE_4 * VAR_4 , * VAR_5 ;  VAR_6 = VAR_7 = VAR_8 ; do { if ( * VAR_9 == '$' ) { const TYPE_5 * VAR_10 ; TYPE_6 VAR_11 ;  if ( ( ( ( METHOD_1 ( & VAR_12 [ 1 ] , "ORIGIN" , 6 ) == 0 && ( VAR_13 = 7 ) != 0 )   || ( METHOD_2 ( & VAR_14 [ 1 ] , "PLATFORM" , 8 ) == 0 && ( VAR_15 = 9 ) != 0 ) )  && ( VAR_16 [ VAR_17 ] == '\\0' || VAR_18 [ VAR_19 ] == '/' || ( VAR_20 && VAR_21 [ VAR_22 ] == ':' ) ) ) || ( VAR_23 [ 1 ] == '{' && ( ( METHOD_3 ( & VAR_24 [ 2 ] , "ORIGIN}" , 7 ) == 0 && ( VAR_25 = 9 ) != 0 ) || ( METHOD_4 ( & VAR_26 [ 2 ] , "PLATFORM}" , 9 ) == 0 && ( VAR_27 = 11 ) != 0 ) ) ) ) { VAR_28 = ( ( VAR_29 == 7 || VAR_30 [ 2 ] == 'O' )  ? ( VAR_31 ? VAR_32 : VAR_33 -> VAR_34 )  : VAR_35 ) ; if ( VAR_36 != VAR_37 && VAR_38 != ( const TYPE_7 * ) - 1 ) { VAR_39 = METHOD_5 ( VAR_40 , VAR_41 ) ; VAR_42 += VAR_43 ; } else { VAR_44 = VAR_45 ; VAR_46 += VAR_47 ; while ( * VAR_48 != '\\0' && ( ! VAR_49 || * VAR_50 != ':' ) ) ++ VAR_51 ; } } else * VAR_52 ++ = * VAR_53 ++ ; } else if ( VAR_54 && * VAR_55 == ':' ) { * VAR_56 ++ = * VAR_57 ++ ; VAR_58 = VAR_59 ; } else * VAR_60 ++ = * VAR_61 ++ ; } while ( * VAR_62 != '\\0' ) ; * VAR_63 = '\\0' ; return VAR_64 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = 0 ; TYPE_4 * VAR_3 ; METHOD_1 ( "H264SwDecInit" ) ; if ( ( ( - 1 ) >> 1 ) != ( - 1 ) ) { METHOD_2 ( "H264SwDecInitERROR:Rightshiftisnotsigned" ) ; return ( VAR_4 ) ; } if ( VAR_5 == VAR_6 ) { METHOD_3 ( "H264SwDecInitERROR:decInst==NULL" ) ; return ( VAR_7 ) ; }  VAR_8 = ( TYPE_5 * ) METHOD_4 ( sizeof ( TYPE_6 ) ) ;  if ( VAR_9 == VAR_10 ) { METHOD_5 ( "H264SwDecInitERROR:Memoryallocationfailed" ) ; return ( VAR_11 ) ; } TYPE_7 TYPE_8 TYPE_9 ( VAR_12 -> VAR_13 , "H264SwDecInitdecInst%pnoOutputReordering%d" , ( TYPE_10 * ) VAR_14 , VAR_15 ) ; METHOD_6 ( VAR_16 -> VAR_17 ) ; VAR_18 = METHOD_7 ( & VAR_19 -> VAR_20 , VAR_21 ) ; if ( VAR_22 != VAR_23 ) { METHOD_8 ( VAR_24 ) ; return ( VAR_25 ) ; } VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = 0 ; TYPE_11 TYPE_12 TYPE_13 ( VAR_31 -> VAR_32 , "H264SwDecInitOK:return%p" , ( TYPE_14 * ) VAR_33 ) ; METHOD_9 ( VAR_34 -> VAR_35 ) ; * VAR_36 = ( TYPE_15 * ) VAR_37 ; return ( VAR_38 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 )  {  struct STRUCT_OR_UNION_2 VAR_3 ; DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_3 * , VAR_4 , VAR_5 -> msg_name ) ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = METHOD_1 ( VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 = METHOD_2 ( VAR_12 ) ; struct STRUCT_OR_UNION_7 * VAR_13 = METHOD_3 ( VAR_14 ) ; struct STRUCT_OR_UNION_8 * VAR_15 = VAR_16 ; struct STRUCT_OR_UNION_9 * VAR_17 = VAR_18 ; struct STRUCT_OR_UNION_10 * VAR_19 = VAR_20 ; struct STRUCT_OR_UNION_11 VAR_21 ; struct STRUCT_OR_UNION_12 VAR_22 ; TYPE_2 VAR_23 = VAR_24 -> VAR_25 ; TYPE_3 VAR_26 = - 1 ; TYPE_4 VAR_27 = - 1 ; TYPE_5 VAR_28 = - 1 ; TYPE_6 VAR_29 ; TYPE_7 VAR_30 ; if ( VAR_31 > VAR_32 ) return - VAR_33 ; if ( VAR_34 -> VAR_35 & VAR_36 ) return - VAR_37 ; METHOD_4 ( & VAR_38 , 0 , sizeof ( VAR_39 ) ) ; VAR_40 . VAR_41 = VAR_42 -> VAR_43 ; if ( VAR_44 ) { if ( VAR_45 < VAR_46 ) return - VAR_47 ; if ( VAR_48 -> VAR_49 && VAR_50 -> VAR_51 != VAR_52 ) return - VAR_53 ; VAR_54 = METHOD_5 ( VAR_55 -> VAR_56 ) ; if ( ! VAR_57 ) VAR_58 = VAR_59 -> VAR_60 ; else if ( VAR_61 != VAR_62 -> VAR_63 ) return - VAR_64 ; if ( VAR_65 > 255 ) return - VAR_66 ; VAR_67 = & VAR_68 -> VAR_69 ; if ( VAR_70 -> VAR_71 ) { VAR_72 . VAR_73 = VAR_74 -> VAR_75 & VAR_76 ; if ( VAR_77 . VAR_78 & VAR_79 ) { VAR_80 = METHOD_6 ( VAR_81 , VAR_82 . VAR_83 ) ; if ( ! VAR_84 ) return - VAR_85 ; } } if ( VAR_86 -> VAR_87 == VAR_88 && METHOD_7 ( VAR_89 , & VAR_90 -> VAR_91 ) ) VAR_92 = & VAR_93 -> VAR_94 ; if ( VAR_95 >= sizeof ( struct STRUCT_OR_UNION_13 ) && VAR_96 -> VAR_97 && METHOD_8 ( METHOD_9 ( VAR_98 ) ) ) VAR_99 . VAR_100 = VAR_101 -> VAR_102 ; } else { if ( VAR_103 -> VAR_104 != VAR_105 ) return - VAR_106 ; VAR_107 = VAR_108 -> VAR_109 ; VAR_110 = & VAR_111 -> VAR_112 ; VAR_113 . VAR_114 = VAR_115 -> VAR_116 ; } if ( VAR_117 . VAR_118 == 0 ) VAR_119 . VAR_120 = VAR_121 -> VAR_122 ; if ( VAR_123 -> VAR_124 ) { VAR_125 = & VAR_126 ; METHOD_10 ( VAR_127 , 0 , sizeof ( struct STRUCT_OR_UNION_14 ) ) ; VAR_128 -> VAR_129 = sizeof ( struct STRUCT_OR_UNION_15 ) ; VAR_130 = METHOD_11 ( METHOD_12 ( VAR_131 ) , VAR_132 , VAR_133 , & VAR_134 , VAR_135 , & VAR_136 , & VAR_137 , & VAR_138 ) ; if ( VAR_139 < 0 ) { METHOD_13 ( VAR_140 ) ; return VAR_141 ; } if ( ( VAR_142 . VAR_143 & VAR_144 ) && ! VAR_145 ) { VAR_146 = METHOD_14 ( VAR_147 , VAR_148 . VAR_149 ) ; if ( ! VAR_150 ) return - VAR_151 ; } if ( ! ( VAR_152 -> VAR_153 | VAR_154 -> VAR_155 ) ) VAR_156 = VAR_157 ; } if ( ! VAR_158 )  VAR_159 = VAR_160 -> VAR_161 ;  if ( VAR_162 ) VAR_163 = METHOD_15 ( & VAR_164 , VAR_165 , VAR_166 ) ; VAR_167 = METHOD_16 ( & VAR_168 , VAR_169 ) ; VAR_170 . VAR_171 = VAR_172 ; VAR_173 . VAR_174 = VAR_175 ; VAR_176 . VAR_177 = 0 ; VAR_178 = METHOD_17 ( & VAR_179 , & VAR_180 ) ; if ( VAR_181 ) goto VAR_182 ; if ( ! METHOD_18 ( VAR_183 ) ) VAR_184 . VAR_185 = * VAR_186 ; else VAR_187 . VAR_188 . VAR_189 [ 15 ] = 0x1 ; if ( METHOD_19 ( & VAR_190 . VAR_191 ) && ! METHOD_20 ( & VAR_192 -> VAR_193 ) ) VAR_194 . VAR_195 = VAR_196 -> VAR_197 ; VAR_198 = METHOD_21 ( & VAR_199 , VAR_200 , & VAR_201 ) ; if ( ! VAR_202 . VAR_203 && METHOD_22 ( & VAR_204 . VAR_205 ) ) VAR_206 . VAR_207 = VAR_208 -> VAR_209 ; else if ( ! VAR_210 . VAR_211 ) VAR_212 . VAR_213 = VAR_214 -> VAR_215 ; METHOD_23 ( VAR_216 , METHOD_24 ( & VAR_217 ) ) ; if ( VAR_218 -> VAR_219 ) VAR_220 . VAR_221 |= VAR_222 ; VAR_223 = METHOD_25 ( VAR_224 , & VAR_225 , VAR_226 ) ; if ( METHOD_26 ( VAR_227 ) ) { VAR_228 = METHOD_27 ( VAR_229 ) ; goto VAR_230 ; } if ( VAR_231 < 0 ) VAR_232 = METHOD_28 ( VAR_233 , & VAR_234 , VAR_235 ) ; if ( VAR_236 < 0 ) VAR_237 = VAR_238 -> VAR_239 ; if ( VAR_240 < 0 ) VAR_241 = VAR_242 -> VAR_243 ; if ( VAR_244 -> VAR_245 & VAR_246 ) goto VAR_247 ; VAR_248 : if ( VAR_249 -> VAR_250 ) VAR_251 = METHOD_29 ( VAR_252 , VAR_253 , VAR_254 , & VAR_255 , & VAR_256 , VAR_257 -> VAR_258 ) ; else { METHOD_30 ( VAR_259 ) ; VAR_260 = METHOD_31 ( VAR_261 , VAR_262 , & VAR_263 , VAR_264 , 0 , VAR_265 , VAR_266 , VAR_267 , & VAR_268 , ( struct STRUCT_OR_UNION_16 * ) VAR_269 , VAR_270 -> VAR_271 , VAR_272 ) ; if ( VAR_273 ) METHOD_32 ( VAR_274 ) ; else if ( ! ( VAR_275 -> VAR_276 & VAR_277 ) ) VAR_278 = METHOD_33 ( VAR_279 , & VAR_280 , VAR_281 ) ; METHOD_34 ( VAR_282 ) ; } VAR_283 : METHOD_35 ( VAR_284 ) ; VAR_285 : METHOD_36 ( VAR_286 ) ;  return VAR_287 < 0 ? VAR_288 : VAR_289 ;  VAR_290 : METHOD_37 ( VAR_291 ) ; if ( ! ( VAR_292 -> VAR_293 & VAR_294 ) || VAR_295 ) goto VAR_296 ; VAR_297 = 0 ; goto VAR_298 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 * VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) {  VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_4 -> VAR_15 ) ;  if ( VAR_16 < 0 ) return VAR_17 ; else { if ( VAR_18 == 0 ) VAR_19 = VAR_20 ; } } break ; case VAR_21 : VAR_22 = VAR_23 ; if ( ! METHOD_2 ( STRUCT_OR_UNION_5 -> VAR_24 ) ) return VAR_25 ? - VAR_26 : 0 ; break ; default : return - VAR_27 ; } if ( VAR_28 ) { VAR_29 = METHOD_3 ( VAR_30 , & VAR_31 ) ; if ( METHOD_4 ( VAR_32 ) ) return ( TYPE_6 ) METHOD_5 ( VAR_33 ) ; } VAR_34 = METHOD_6 ( VAR_35 , STRUCT_OR_UNION_6 , VAR_36 , VAR_37 , VAR_38 , 0 ) ; if ( VAR_39 == - VAR_40 ) { VAR_41 = 0 ; if ( VAR_42 == VAR_43 ) { STRUCT_OR_UNION_7 -> VAR_44 = VAR_45 ; METHOD_7 ( STRUCT_OR_UNION_8 ) ; } } METHOD_8 ( VAR_46 ) ; if ( ! VAR_47 ) METHOD_9 ( STRUCT_OR_UNION_9 , VAR_48 , VAR_49 ) ; return VAR_50 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( VAR_3 -> VAR_4 ) ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 [ VAR_7 + 1 ] ; struct STRUCT_OR_UNION_7 VAR_8 = { } ; struct STRUCT_OR_UNION_8 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_9 VAR_11 ; TYPE_1 VAR_12 = 0 ; TYPE_2 VAR_13 = 0 ; TYPE_3 VAR_14 ; TYPE_4 VAR_15 ; TYPE_5 VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_6 VAR_18 = VAR_19 ; TYPE_7 VAR_20 ; VAR_21 = METHOD_2 ( VAR_22 , sizeof ( * VAR_23 ) , VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ; if ( VAR_28 < 0 ) goto VAR_29 ; VAR_30 = METHOD_3 ( VAR_31 ) ; VAR_32 = METHOD_4 ( VAR_33 , VAR_34 ) ; if ( ! VAR_35 ) { VAR_36 = - VAR_37 ; goto VAR_38 ; } METHOD_5 ( VAR_39 ) ; METHOD_6 ( VAR_40 ) ; VAR_41 = VAR_42 [ VAR_43 ] ? METHOD_7 ( VAR_44 [ VAR_45 ] ) : 0 ; VAR_46 = VAR_47 [ VAR_48 ] ? METHOD_8 ( VAR_49 [ VAR_50 ] ) : 0 ; VAR_51 = VAR_52 [ VAR_53 ] ? METHOD_9 ( VAR_54 [ VAR_55 ] ) : 0 ; VAR_56 = VAR_57 [ VAR_58 ] ? METHOD_10 ( VAR_59 [ VAR_60 ] ) : 0 ; if ( VAR_61 [ VAR_62 ] ) VAR_63 = METHOD_11 ( METHOD_12 ( ) , METHOD_13 ( VAR_64 [ VAR_65 ] ) ) ; else VAR_66 = ( VAR_67 ? VAR_68 : METHOD_14 ( ) ) ; METHOD_15 ( VAR_69 ) -> VAR_70 = VAR_71 ; METHOD_16 ( VAR_72 ) -> VAR_73 = VAR_74 ; METHOD_17 ( VAR_75 ) -> VAR_76 = VAR_77 ; METHOD_18 ( VAR_78 , VAR_79 + sizeof ( struct STRUCT_OR_UNION_11 ) ) ; METHOD_19 ( & VAR_80 , 0 , sizeof ( VAR_81 ) ) ; VAR_82 . VAR_83 = VAR_84 ; VAR_85 . VAR_86 = VAR_87 ; VAR_88 . VAR_89 = VAR_90 -> VAR_91 ; VAR_92 . VAR_93 = VAR_94 [ VAR_95 ] ? METHOD_20 ( VAR_96 [ VAR_97 ] ) : 0 ; VAR_98 . VAR_99 = VAR_100 ; VAR_101 . VAR_102 = VAR_103 ; METHOD_21 ( ) ; if ( VAR_104 ) { struct STRUCT_OR_UNION_12 * VAR_105 ; VAR_106 = METHOD_22 ( STRUCT_OR_UNION_13 , VAR_107 ) ; if ( ! VAR_108 ) { VAR_109 = - VAR_110 ; goto VAR_111 ; } VAR_112 -> VAR_113 = METHOD_23 ( VAR_114 ) ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 = METHOD_24 ( VAR_122 , VAR_123 , VAR_124 , VAR_125 -> VAR_126 , VAR_127 , & VAR_128 ) ; VAR_129 = METHOD_25 ( VAR_130 ) ; if ( VAR_131 == 0 && VAR_132 -> VAR_133 . VAR_134 ) VAR_135 = - VAR_136 -> VAR_137 . VAR_138 ; } else { VAR_139 = METHOD_26 ( STRUCT_OR_UNION_14 , & VAR_140 , & VAR_141 , VAR_142 ) ; VAR_143 = 0 ; if ( METHOD_27 ( VAR_144 ) ) VAR_145 = METHOD_28 ( VAR_146 ) ; else METHOD_29 ( VAR_147 , & VAR_148 -> VAR_149 ) ; } if ( VAR_150 ) goto VAR_151 ; if ( VAR_152 -> VAR_153 & VAR_154 ) VAR_155 -> VAR_156 |= VAR_157 ; if ( VAR_158 -> VAR_159 & VAR_160 ) VAR_161 = VAR_162 -> VAR_163 ; if ( VAR_164 -> VAR_165 & VAR_166 )  VAR_167 = METHOD_30 ( VAR_168 , METHOD_31 ( VAR_169 ) . VAR_170 ,  VAR_171 -> VAR_172 , VAR_173 , VAR_174 , VAR_175 -> VAR_176 , VAR_177 . VAR_178 , VAR_179 . VAR_180 , VAR_181 . VAR_182 , VAR_183 . VAR_184 , 0 ) ; else VAR_185 = METHOD_32 ( STRUCT_OR_UNION_15 , VAR_186 , VAR_187 , VAR_188 , & VAR_189 , VAR_190 , METHOD_33 ( VAR_191 ) . VAR_192 , VAR_193 -> VAR_194 ) ; if ( VAR_195 < 0 ) goto VAR_196 ;  METHOD_34 ( ) ;  VAR_197 = METHOD_35 ( VAR_198 , STRUCT_OR_UNION_16 , METHOD_36 ( VAR_199 ) . VAR_200 ) ; VAR_201 : return VAR_202 ; VAR_203 : METHOD_37 ( ) ; METHOD_38 ( VAR_204 ) ; goto VAR_205 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; register TYPE_5 * VAR_4 ; register TYPE_6 VAR_5 ; register unsigned TYPE_7 * VAR_6 ; TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 , VAR_10 ; unsigned TYPE_10 * VAR_11 ; METHOD_1 ( VAR_12 != ( const TYPE_11 * ) VAR_13 ) ; METHOD_2 ( VAR_14 -> VAR_15 == VAR_16 ) ; if ( VAR_17 -> VAR_18 != VAR_19 ) ( TYPE_12 ) METHOD_3 ( VAR_20 , METHOD_4 ( ) , "%s" , VAR_21 -> VAR_22 ) ; METHOD_5 ( VAR_23 != ( TYPE_13 * ) VAR_24 ) ; METHOD_6 ( VAR_25 -> VAR_26 == VAR_27 ) ; VAR_28 = METHOD_7 ( VAR_29 ) ; VAR_30 = METHOD_8 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; if ( VAR_35 == VAR_36 ) { VAR_37 = METHOD_9 ( VAR_38 ) ; return ( ( TYPE_14 * ) VAR_39 ) ; } VAR_40 = METHOD_10 ( VAR_41 ) ; VAR_42 = METHOD_11 ( VAR_43 ) ; if ( METHOD_12 ( VAR_44 ) != VAR_45 ) METHOD_13 ( VAR_46 , "ImproperImageHeader" ) ; if ( ( VAR_47 == 0UL ) || ( VAR_48 == 0UL ) ) METHOD_14 ( VAR_49 , "ImproperImageHeader" ) ; do { TYPE_15 VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = 8 ; if ( ( VAR_59 -> VAR_60 != VAR_61 ) && ( VAR_62 -> VAR_63 != 0 ) ) if ( VAR_64 -> VAR_65 >= ( VAR_66 -> VAR_67 + VAR_68 -> VAR_69 - 1 ) ) break ;  VAR_70 = ( unsigned TYPE_16 * ) METHOD_15 ( VAR_71 -> VAR_72 ,  4 * sizeof ( * VAR_73 ) ) ; if ( VAR_74 == ( unsigned TYPE_17 * ) VAR_75 ) METHOD_16 ( VAR_76 , "MemoryAllocationFailed" ) ; VAR_77 = ( TYPE_18 ) 4 * VAR_78 -> VAR_79 ; for ( VAR_80 = 0 ; VAR_81 < ( TYPE_19 ) VAR_82 -> VAR_83 ; VAR_84 ++ ) { VAR_85 = METHOD_17 ( VAR_86 , VAR_87 , VAR_88 ) ; if ( VAR_89 != VAR_90 ) METHOD_18 ( VAR_91 , "UnableToReadImageData" ) ; VAR_92 = VAR_93 ; VAR_94 = METHOD_19 ( VAR_95 , 0 , VAR_96 , VAR_97 -> VAR_98 , 1 , VAR_99 ) ; if ( VAR_100 == ( TYPE_20 * ) VAR_101 ) break ; for ( VAR_102 = 0 ; VAR_103 < ( TYPE_21 ) VAR_104 -> VAR_105 ; VAR_106 ++ ) { METHOD_20 ( VAR_107 , METHOD_21 ( * VAR_108 ++ ) ) ; METHOD_22 ( VAR_109 , METHOD_23 ( * VAR_110 ++ ) ) ; METHOD_24 ( VAR_111 , METHOD_25 ( * VAR_112 ++ ) ) ; METHOD_26 ( VAR_113 , METHOD_27 ( * VAR_114 ++ ) ) ; if ( VAR_115 -> VAR_116 != VAR_117 ) VAR_118 -> VAR_119 = VAR_120 ; VAR_121 ++ ; } if ( METHOD_28 ( VAR_122 , VAR_123 ) == VAR_124 ) break ; if ( VAR_125 -> VAR_126 == ( TYPE_22 * ) VAR_127 ) { VAR_128 = METHOD_29 ( VAR_129 , VAR_130 , ( TYPE_23 ) VAR_131 , VAR_132 -> VAR_133 ) ; if ( VAR_134 == VAR_135 ) break ; } } VAR_136 = ( unsigned TYPE_24 * ) METHOD_30 ( VAR_137 ) ; if ( METHOD_31 ( VAR_138 ) != VAR_139 ) { METHOD_32 ( VAR_140 , VAR_141 , "UnexpectedEndOfFile" , VAR_142 -> VAR_143 ) ; break ; } if ( VAR_144 -> VAR_145 != 0 ) if ( VAR_146 -> VAR_147 >= ( VAR_148 -> VAR_149 + VAR_150 -> VAR_151 - 1 ) ) break ; VAR_152 = METHOD_33 ( VAR_153 ) ; VAR_154 = METHOD_34 ( VAR_155 ) ; if ( ( VAR_156 != 0UL ) && ( VAR_157 != 0UL ) ) { METHOD_35 ( VAR_158 , VAR_159 ) ; if ( METHOD_36 ( VAR_160 ) == ( TYPE_25 * ) VAR_161 ) { VAR_162 = METHOD_37 ( VAR_163 ) ; return ( ( TYPE_26 * ) VAR_164 ) ; } VAR_165 = METHOD_38 ( VAR_166 ) ; VAR_167 = METHOD_39 ( VAR_168 , VAR_169 , METHOD_40 ( VAR_170 ) , METHOD_41 ( VAR_171 ) ) ; if ( VAR_172 == VAR_173 ) break ; } } while ( ( VAR_174 != 0UL ) && ( VAR_175 != 0UL ) ) ; ( TYPE_27 ) METHOD_42 ( VAR_176 ) ; return ( METHOD_43 ( VAR_177 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; TYPE_5 * VAR_5 = ( TYPE_6 * ) VAR_6 -> VAR_7 ; METHOD_1 ( VAR_8 , 0 , sizeof ( * VAR_9 ) ) ; VAR_10 -> VAR_11 = METHOD_2 ( VAR_12 , 16 ) ; if ( VAR_13 -> VAR_14 > 2 || VAR_15 -> VAR_16 < 0 ) goto VAR_17 ; VAR_18 -> VAR_19 = METHOD_3 ( VAR_20 , 24 ) ; VAR_21 -> VAR_22 = METHOD_4 ( VAR_23 , 24 ) ; VAR_24 -> VAR_25 = METHOD_5 ( VAR_26 , 24 ) + 1 ; VAR_27 -> VAR_28 = ( TYPE_7 ) ( METHOD_6 ( VAR_29 , 6 ) + 1 ) ; VAR_30 -> VAR_31 = ( unsigned TYPE_8 ) METHOD_7 ( VAR_32 , 8 ) ; if ( VAR_33 -> VAR_34 >= VAR_35 -> VAR_36 ) goto VAR_37 ; VAR_38 -> VAR_39 = METHOD_8 ( VAR_40 -> VAR_41 * sizeof ( * VAR_42 -> VAR_43 ) ) ; VAR_44 -> VAR_45 = METHOD_9 ( VAR_46 -> VAR_47 * 8 * sizeof ( * VAR_48 -> VAR_49 ) ) ; for ( VAR_50 = 0 ; VAR_51 < VAR_52 -> VAR_53 ; VAR_54 ++ ) { TYPE_9 VAR_55 = METHOD_10 ( VAR_56 , 3 ) ; if ( METHOD_11 ( VAR_57 , 1 ) ) VAR_58 |= ( METHOD_12 ( VAR_59 , 5 ) << 3 ) ; VAR_60 -> VAR_61 [ VAR_62 ] = VAR_63 ; } for ( VAR_64 = 0 ; VAR_65 < VAR_66 -> VAR_67 ; VAR_68 ++ ) { for ( VAR_69 = 0 ; VAR_70 < 8 ; VAR_71 ++ ) { if ( ( VAR_72 -> VAR_73 [ VAR_74 ] >> VAR_75 ) & 1 ) { unsigned TYPE_10 VAR_76 = ( unsigned TYPE_11 ) METHOD_13 ( VAR_77 , 8 ) ; if ( VAR_78 >= VAR_79 -> VAR_80 ) goto VAR_81 ; VAR_82 -> VAR_83 [ VAR_84 * 8 + VAR_85 ] = VAR_86 ; if ( VAR_87 + 1 > VAR_88 -> VAR_89 ) VAR_90 -> VAR_91 = VAR_92 + 1 ; } else VAR_93 -> VAR_94 [ VAR_95 * 8 + VAR_96 ] = 0xff ; } } if ( METHOD_14 ( VAR_97 ) ) goto VAR_98 ;  return 0 ;  VAR_99 : METHOD_15 ( VAR_100 ) ; return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; const TYPE_2 * VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , 0 ) ; if ( METHOD_2 ( VAR_7 , 1 ) ) METHOD_3 ( VAR_8 , 1 ) ; else if ( METHOD_4 ( VAR_9 , 1 ) ) METHOD_5 ( VAR_10 , "" , 0 ) ; else METHOD_6 ( VAR_11 , METHOD_7 ( VAR_12 , 1 ) , 0 ) ; VAR_13 = METHOD_8 ( VAR_14 , - 1 ) ;  if ( ! METHOD_9 ( VAR_15 -> VAR_16 , VAR_17 , & VAR_18 , 0 ) )  METHOD_10 ( VAR_19 , METHOD_11 ( VAR_20 , VAR_21 . VAR_22 [ 0 ] . VAR_23 ) ) ; else METHOD_12 ( VAR_24 , - 1 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 METHOD_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = VAR_6 -> VAR_7 ; TYPE_4 VAR_8 ; TYPE_5 VAR_9 = 0 ; if ( VAR_10 -> VAR_11 == VAR_12 ) return - VAR_13 ; while ( ( VAR_14 = METHOD_3 ( VAR_15 , VAR_16 , & VAR_17 ) ) != VAR_18 ) { if ( VAR_19 < VAR_20 -> VAR_21 ) { TYPE_6 VAR_22 ; TYPE_7 VAR_23 ; VAR_24 = VAR_25 -> VAR_26 - VAR_27 ; if ( VAR_28 -> VAR_29 ) { TYPE_8 VAR_30 = VAR_31 -> VAR_32 - VAR_33 ; if ( VAR_34 < VAR_35 ) VAR_36 = VAR_37 ; if ( ! VAR_38 ) break ; } VAR_39 = METHOD_4 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 ) ; if ( VAR_44 < 0 ) { if ( ! VAR_45 ) VAR_46 = VAR_47 ; break ; } else if ( VAR_48 <= VAR_49 ) { VAR_50 += VAR_51 ; VAR_52 += VAR_53 ; VAR_54 += VAR_55 ; } VAR_56 = METHOD_5 ( VAR_57 , VAR_58 - 1 , & VAR_59 ) ; if ( ! VAR_60 || ( VAR_61 + 1 != VAR_62 -> VAR_63 ) ) break ; } if ( METHOD_6 ( VAR_64 ) -> VAR_65 ) { METHOD_7 ( VAR_66 , VAR_67 , 0 ) ; ++ VAR_68 ; break ; } METHOD_8 ( VAR_69 , VAR_70 , 0 ) ; if ( ! VAR_71 -> VAR_72 ) break ;  }  VAR_73 -> VAR_74 = VAR_75 ;  METHOD_9 ( VAR_76 ) ;  if ( VAR_77 > 0 ) METHOD_10 ( VAR_78 , VAR_79 ) ; return VAR_80 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 )  { TYPE_4 * VAR_3 ; if ( VAR_4 >= VAR_5 -> VAR_6 ) { if ( METHOD_1 ( VAR_7 , VAR_8 * 2 ) < 0 ) return - 1 ; METHOD_2 ( VAR_9 < VAR_10 -> VAR_11 ) ; } METHOD_3 ( VAR_12 ) ; VAR_13 = VAR_14 -> VAR_15 [ VAR_16 ] ; VAR_17 -> VAR_18 [ VAR_19 ] = VAR_20 ; if ( VAR_21 != VAR_22 ) { METHOD_4 ( VAR_23 ) ; } else { VAR_24 -> VAR_25 ++ ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * * VAR_4 ) { TYPE_6 VAR_5 = VAR_6 ; TYPE_7 * VAR_7 = ( TYPE_8 * ) VAR_8 ; TYPE_9 * VAR_9 = ( TYPE_10 * ) ( VAR_10 -> VAR_11 ) ; METHOD_1 ( VAR_12 ) ; METHOD_2 ( VAR_13 ) ; METHOD_3 ( VAR_14 ) ; if ( VAR_15 == 1 ) { const TYPE_11 * VAR_16 = ( const TYPE_12 * ) METHOD_4 ( VAR_17 [ 0 ] ) ; TYPE_13 VAR_18 = METHOD_5 ( VAR_19 [ 0 ] ) ;  VAR_20 -> VAR_21 = METHOD_6 ( VAR_22 + 1 ) ;  if ( VAR_23 -> VAR_24 == 0 ) { VAR_25 = VAR_26 ; } else { METHOD_7 ( VAR_27 -> VAR_28 , VAR_29 , VAR_30 ) ; VAR_31 -> VAR_32 [ VAR_33 ] = 0 ; VAR_34 = VAR_35 -> VAR_36 -> METHOD_8 ( VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , VAR_41 , & VAR_42 -> VAR_43 ) ; if ( VAR_44 == VAR_45 ) { VAR_46 -> VAR_47 -> VAR_48 = VAR_49 -> VAR_50 ; } } } if ( VAR_51 != VAR_52 ) return VAR_53 ; return METHOD_9 ( VAR_54 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  METHOD_1 ( METHOD_2 ( STRUCT_OR_UNION_3 ) ) ;  return 0 ; }
TYPE_0  METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5  VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 * VAR_8 ) { TYPE_10 VAR_9 ; if ( ! VAR_10 ) { METHOD_1 ( VAR_11 , "fieldtargetisrequiredforAsyncFor" ) ; return VAR_12 ; } if ( ! VAR_13 ) { METHOD_2 ( VAR_14 , "fielditerisrequiredforAsyncFor" ) ; return VAR_15 ; } VAR_16 = ( TYPE_11 ) METHOD_3 ( VAR_17 , sizeof ( * VAR_18 ) ) ; if ( ! VAR_19 ) return VAR_20 ; VAR_21 -> VAR_22 = VAR_23 ; VAR_24 -> VAR_25 . METHOD_4 . VAR_26 = VAR_27 ; VAR_28 -> VAR_29 . METHOD_5 . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 . METHOD_6 . VAR_34 = VAR_35 ;  VAR_36 -> VAR_37 . METHOD_7 . VAR_38 = VAR_39 ;  VAR_40 -> VAR_41 = VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 ; return VAR_52 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register TYPE_2 * VAR_1 , TYPE_3 * VAR_2 )  { TYPE_4 TYPE_5 VAR_3 ; TYPE_6 TYPE_7 * VAR_4 ; TYPE_8 VAR_5 ; TYPE_9 VAR_6 [ VAR_7 ] ; TYPE_10 VAR_8 , VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 * VAR_11 = VAR_12 -> VAR_13 ; TYPE_13 VAR_14 ; METHOD_1 ( "mi_sort_index" ) ; for ( VAR_15 = 0 , VAR_16 = & VAR_17 -> VAR_18 [ 0 ] ; VAR_19 < VAR_20 -> VAR_21 . VAR_22 ; VAR_23 ++ , VAR_24 ++ ) if ( VAR_25 -> VAR_26 == VAR_27 ) METHOD_2 ( 0 ) ; if ( ! ( VAR_28 -> VAR_29 & VAR_30 ) ) METHOD_3 ( "-SortingindexforMyISAM-table\'%s\'\\n" , VAR_31 ) ; METHOD_4 ( VAR_32 -> VAR_33 , VAR_34 , "" , VAR_35 , 2 + 4 + 32 ) ; if ( ( VAR_36 = METHOD_5 ( VAR_37 , METHOD_6 ( VAR_38 -> VAR_39 , VAR_40 -> VAR_41 , "" , VAR_42 , 2 + 4 ) , 0 , VAR_43 -> VAR_44 , METHOD_7 ( 0 ) ) ) <= 0 ) { METHOD_8 ( VAR_45 , "Can\'tcreatenewtempfile:\'%s\'" , VAR_46 -> VAR_47 ) ; METHOD_9 ( - 1 ) ; } if ( METHOD_10 ( VAR_48 , VAR_49 , VAR_50 -> VAR_51 , 0L , ( TYPE_14 ) VAR_52 -> VAR_53 . VAR_54 , "headerblock" ) ) goto VAR_55 ; VAR_56 -> VAR_57 = VAR_58 -> VAR_59 . VAR_60 ; for ( VAR_61 = 0 , VAR_62 = & VAR_63 -> VAR_64 [ 0 ] ; VAR_65 < VAR_66 -> VAR_67 . VAR_68 ; VAR_69 ++ , VAR_70 ++ ) { if ( ! METHOD_11 ( VAR_71 -> VAR_72 -> VAR_73 . VAR_74 , VAR_75 ) ) continue ; if ( VAR_76 -> VAR_77 . VAR_78 [ VAR_79 ] != VAR_80 ) { VAR_81 [ VAR_82 ] = VAR_83 -> VAR_84 ; if ( METHOD_12 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 -> VAR_89 . VAR_90 [ VAR_91 ] , VAR_92 ) ) goto VAR_93 ; } else VAR_94 [ VAR_95 ] = VAR_96 ; } METHOD_13 ( VAR_97 -> VAR_98 , VAR_99 -> VAR_100 , VAR_101 ) ; VAR_102 -> VAR_103 . VAR_104 = ( TYPE_15 ) METHOD_14 ( ( TYPE_16 * ) 0 ) ; VAR_105 = VAR_106 -> VAR_107 ; VAR_108 = VAR_109 -> VAR_110 ; VAR_111 = VAR_112 -> VAR_113 ; VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = VAR_119 -> VAR_120 = VAR_121 -> VAR_122 = 0 ; ( TYPE_17 ) METHOD_15 ( VAR_123 , VAR_124 ) ; ( TYPE_18 ) METHOD_16 ( VAR_125 -> VAR_126 , METHOD_17 ( VAR_127 ) ) ; VAR_128 -> VAR_129 = - 1 ; ( TYPE_19 ) METHOD_18 ( VAR_130 , METHOD_19 ( VAR_131 ) ) ; if ( METHOD_20 ( VAR_132 -> VAR_133 , VAR_134 , VAR_135 ,  METHOD_21 ( 0 ) ) ||  METHOD_22 ( VAR_136 ) ) goto VAR_137 ; VAR_138 -> VAR_139 = VAR_140 ; METHOD_23 ( VAR_141 , VAR_142 , 0 ) ; VAR_143 -> VAR_144 = VAR_145 ; VAR_146 -> VAR_147 = VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; VAR_152 -> VAR_153 = VAR_154 + VAR_155 ; VAR_156 -> VAR_157 = VAR_158 ; VAR_159 -> VAR_160 -> VAR_161 = VAR_162 -> VAR_163 ; VAR_164 -> VAR_165 = ( TYPE_20 ) ( VAR_166 | VAR_167 ) ; for ( VAR_168 = 0 ; VAR_169 < VAR_170 -> VAR_171 -> VAR_172 . VAR_173 ; VAR_174 ++ ) VAR_175 -> VAR_176 -> VAR_177 . VAR_178 [ VAR_179 ] = VAR_180 [ VAR_181 ] ; for ( VAR_182 = 0 ; VAR_183 < VAR_184 -> VAR_185 -> VAR_186 . VAR_187 . VAR_188 ; VAR_189 ++ ) VAR_190 -> VAR_191 -> VAR_192 . VAR_193 [ VAR_194 ] = VAR_195 ; VAR_196 -> VAR_197 -> VAR_198 . VAR_199 &= ~ VAR_200 ; METHOD_24 ( 0 ) ; VAR_201 : ( TYPE_21 ) METHOD_25 ( VAR_202 , METHOD_26 ( VAR_203 ) ) ; VAR_204 : ( TYPE_22 ) METHOD_27 ( VAR_205 , VAR_206 -> VAR_207 , METHOD_28 ( VAR_208 ) ) ; METHOD_29 ( - 1 ) ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { if ( METHOD_1 ( VAR_2 ) -> VAR_3 ) { if ( VAR_4 && ! ( ( 1 << VAR_5 -> VAR_6 ) & ( VAR_7 | VAR_8 ) ) && METHOD_2 ( VAR_9 ) -> VAR_10 != VAR_11 ) { struct STRUCT_OR_UNION_3 * VAR_12 = METHOD_3 ( VAR_13 ) ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 + VAR_18 -> VAR_19 ; VAR_20 -> METHOD_4 ( VAR_21 , VAR_22 -> VAR_23 ) ; } }  VAR_24 = METHOD_5 ( & METHOD_6 ( VAR_25 ) -> VAR_26 , VAR_27 ) ;  METHOD_7 ( VAR_28 ) ; return VAR_29 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 , VAR_6 , VAR_7 ; unsigned TYPE_2 VAR_8 , VAR_9 , VAR_10 ; TYPE_3 VAR_11 ; enum VAR_12 VAR_13 ; VAR_14 = VAR_15 -> VAR_16 ; VAR_17 = VAR_18 -> VAR_19 ; if ( METHOD_2 ( VAR_20 ) ) return METHOD_3 ( VAR_21 ) ; if ( ( VAR_22 & VAR_23 ) == VAR_24 ) return 1 ; if ( METHOD_4 ( VAR_25 ) ) { METHOD_5 ( VAR_26 ) ; return 1 ; } if ( METHOD_6 ( VAR_27 ) ) { if ( METHOD_7 ( VAR_28 ) ) { METHOD_8 ( VAR_29 , VAR_30 ) ; return 1 ; } VAR_31 = METHOD_9 ( VAR_32 , VAR_33 ) ; if ( VAR_34 != VAR_35 ) METHOD_10 ( VAR_36 , VAR_37 ) ; return 1 ; } VAR_38 = 0 ; if ( VAR_39 & VAR_40 ) VAR_41 = METHOD_11 ( VAR_42 ) ; if ( ( VAR_43 & VAR_44 ) && ! ( METHOD_12 ( VAR_45 ) && ! ( VAR_46 & VAR_47 ) ) ) { VAR_48 -> VAR_49 -> VAR_50 = VAR_51 ; VAR_52 -> VAR_53 -> VAR_54 . VAR_55 = VAR_56 ; VAR_57 -> VAR_58 -> VAR_59 . VAR_60 = 3 ; VAR_61 -> VAR_62 -> VAR_63 . VAR_64 [ 0 ] = VAR_65 ; VAR_66 -> VAR_67 -> VAR_68 . VAR_69 [ 1 ] = VAR_70 ; VAR_71 -> VAR_72 -> VAR_73 . VAR_74 [ 2 ] = VAR_75 ; return 0 ; } if ( METHOD_13 ( VAR_76 ) ) { METHOD_14 ( VAR_77 ) ; VAR_78 = METHOD_15 ( VAR_79 ) ; METHOD_16 ( VAR_80 , VAR_81 ) ; if ( METHOD_17 ( VAR_82 ) ) METHOD_18 ( VAR_83 , VAR_84 ) ; return METHOD_19 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 , 0 ) ; } VAR_89 = VAR_90 & VAR_91 ; if ( VAR_92 -> VAR_93 . VAR_94 && METHOD_20 ( VAR_95 , VAR_96 ) ) return METHOD_21 ( VAR_97 , VAR_98 , VAR_99 ) ; switch ( VAR_100 ) {  case VAR_101 :  VAR_102 = METHOD_22 ( VAR_103 ) ; if ( ! ( VAR_104 -> VAR_105 & ( VAR_106 | VAR_107 ) ) ) { VAR_108 -> VAR_109 . VAR_110 &= ~ 15 ; VAR_111 -> VAR_112 . VAR_113 |= VAR_114 | VAR_115 ; if ( ! ( VAR_116 & ~ VAR_117 ) ) METHOD_23 ( VAR_118 ) ; METHOD_24 ( VAR_119 , VAR_120 ) ; return 1 ; } STRUCT_OR_UNION_4 -> VAR_121 . VAR_122 . VAR_123 = VAR_124 | VAR_125 ; STRUCT_OR_UNION_5 -> VAR_126 . VAR_127 . VAR_128 = METHOD_25 ( VAR_129 ) ; case VAR_130 : VAR_131 -> VAR_132 . VAR_133 . VAR_134 = METHOD_26 ( VAR_135 ) ; STRUCT_OR_UNION_6 -> VAR_136 = VAR_137 ; VAR_138 = METHOD_27 ( VAR_139 ) ; STRUCT_OR_UNION_7 -> VAR_140 . VAR_141 . VAR_142 = METHOD_28 ( VAR_143 ) + VAR_144 ; STRUCT_OR_UNION_8 -> VAR_145 . VAR_146 . VAR_147 = VAR_148 ; break ; default : STRUCT_OR_UNION_9 -> VAR_149 = VAR_150 ; STRUCT_OR_UNION_10 -> VAR_151 . VAR_152 = VAR_153 ; STRUCT_OR_UNION_11 -> VAR_154 . VAR_155 = VAR_156 ; break ; } return 0 ; }
const TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { switch ( VAR_1 ) { case 0 : return "Success" ; case VAR_2 : return "Invalidargument" ; case VAR_3 : return "Outofbufferspace" ; case VAR_4 : return "UnsupportedSPDYversion" ; case VAR_5 : return "Operationwouldblock" ; case VAR_6 : return "Protocolerror" ; case VAR_7 : return "Invalidframeoctets" ; case VAR_8 : return "EOF" ; case VAR_9 : return "Datatransferdeferred" ; case VAR_10 : return "NomoreStreamIDavailable" ; case VAR_11 : return "Streamwasalreadyclosedorinvalid" ; case VAR_12 : return "Streamisclosing" ; case VAR_13 : return "Thetransmissionisnotallowedforthisstream" ; case VAR_14 : return "StreamIDisinvalid" ; case VAR_15 : return "Invalidstreamstate" ; case VAR_16 : return "AnotherDATAframehasalreadybeendeferred" ; case VAR_17 : return "requestHEADERSisnotallowed" ; case VAR_18 : return "GOAWAYhasalreadybeensent" ; case VAR_19 : return "Invalidheaderblock" ; case VAR_20 : return "Invalidstate" ; case VAR_21 : return "Theusercallbackfunctionfailedduetothetemporalerror" ; case VAR_22 : return "Thelengthoftheframeisinvalid" ; case VAR_23 : return "Headercompression/decompressionerror" ; case VAR_24 : return "Flowcontrolerror" ; case VAR_25 : return "Insufficientbuffersizegiventofunction" ; case VAR_26 : return "Callbackwaspausedbytheapplication" ; case VAR_27 : return "ToomanyinflightSETTINGS" ; case VAR_28 : return "Serverpushisdisabledbypeer" ; case VAR_29 : return "DATAorHEADERSframehasalreadybeensubmittedforthestream" ; case VAR_30 : return "Thecurrentsessionisclosing" ; case VAR_31 : return "InvalidHTTPheaderfieldwasreceived" ; case VAR_32 : return "ViolationinHTTPmessagingrule" ; case VAR_33 : return "Streamwasrefused" ; case VAR_34 : return "Internalerror" ; case VAR_35 : return "Cancel" ; case VAR_36 : return "WhenalocalendpointexpectstoreceiveSETTINGSframe,it" "receivesanothertypeofframe" ; case VAR_37 : return "Outofmemory" ; case VAR_38 : return "Theusercallbackfunctionfailed" ; case VAR_39 : return "Receivedbadclientmagicbytestring" ; case VAR_40 : return "FloodingwasdetectedinthisHTTP/2session,anditmustbe" "closed" ;  default :  return "Unknownerrorcode" ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ;  METHOD_1 ( VAR_5 , VAR_6 ) ;  METHOD_2 ( VAR_7 , VAR_8 ) ; TYPE_6 TYPE_7 VAR_9 ( VAR_10 , "rdpei_recv_pdu:eventId:%" PRIu16 "(%s)length:%" PRIu32 "" , VAR_11 , METHOD_3 ( VAR_12 ) , VAR_13 ) ; switch ( VAR_14 ) { case VAR_15 : if ( ( VAR_16 = METHOD_4 ( VAR_17 , VAR_18 ) ) ) { WLog_ERR ( VAR_19 , "rdpei_recv_sc_ready_pdufailedwitherror%" PRIu32 "!" , VAR_20 ) ; return VAR_21 ; } if ( ( VAR_22 = METHOD_5 ( VAR_23 ) ) ) { WLog_ERR ( VAR_24 , "rdpei_send_cs_ready_pdufailedwitherror%" PRIu32 "!" , VAR_25 ) ; return VAR_26 ; } break ; case VAR_27 : if ( ( VAR_28 = METHOD_6 ( VAR_29 , VAR_30 ) ) ) { WLog_ERR ( VAR_31 , "rdpei_recv_suspend_touch_pdufailedwitherror%" PRIu32 "!" , VAR_32 ) ; return VAR_33 ; } break ; case VAR_34 : if ( ( VAR_35 = METHOD_7 ( VAR_36 , VAR_37 ) ) ) { WLog_ERR ( VAR_38 , "rdpei_recv_resume_touch_pdufailedwitherror%" PRIu32 "!" , VAR_39 ) ; return VAR_40 ; } break ; default : break ; } return VAR_41 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 ; if ( VAR_2 == VAR_3 ) { METHOD_1 ( VAR_4 ) ; VAR_5 = METHOD_2 ( ) ; if ( VAR_6 > 0 ) METHOD_3 ( VAR_7 , VAR_8 ) ; } VAR_9 -> VAR_10 = METHOD_4 ( VAR_11 , VAR_12 -> VAR_13 ) ; if ( VAR_14 == VAR_15 -> VAR_16 ) { VAR_17 . METHOD_5 ( 0 , VAR_18 , "omzmq3:zsocket_newfailedfor%s:%s" , VAR_19 -> VAR_20 , METHOD_6 ( VAR_21 ) ) ; METHOD_7 ( VAR_22 ) ; } if ( VAR_23 -> VAR_24 ) METHOD_8 ( VAR_25 -> VAR_26 , ( TYPE_2 * ) VAR_27 -> VAR_28 ) ; if ( VAR_29 -> VAR_30 > - 1 ) METHOD_9 ( VAR_31 -> VAR_32 , VAR_33 -> VAR_34 ) ; if ( VAR_35 -> VAR_36 > - 1 ) METHOD_10 ( VAR_37 -> VAR_38 , VAR_39 -> VAR_40 ) ; if ( VAR_41 -> VAR_42 > - 1 ) METHOD_11 ( VAR_43 -> VAR_44 , VAR_45 -> VAR_46 ) ; if ( VAR_47 -> VAR_48 > - 1 ) METHOD_12 ( VAR_49 -> VAR_50 , VAR_51 -> VAR_52 ) ; if ( VAR_53 -> VAR_54 > - 1 ) METHOD_13 ( VAR_55 -> VAR_56 , VAR_57 -> VAR_58 ) ; if ( VAR_59 -> VAR_60 > - 1 ) METHOD_14 ( VAR_61 -> VAR_62 , VAR_63 -> VAR_64 ) ; if ( VAR_65 -> VAR_66 > - 1 ) METHOD_15 ( VAR_67 -> VAR_68 , VAR_69 -> VAR_70 ) ; if ( VAR_71 -> VAR_72 > - 1 ) METHOD_16 ( VAR_73 -> VAR_74 , VAR_75 -> VAR_76 ) ; if ( VAR_77 -> VAR_78 > - 1 ) METHOD_17 ( VAR_79 -> VAR_80 , VAR_81 -> VAR_82 ) ; if ( VAR_83 -> VAR_84 > - 1 ) METHOD_18 ( VAR_85 -> VAR_86 , VAR_87 -> VAR_88 ) ; if ( VAR_89 -> VAR_90 > - 1 ) METHOD_19 ( VAR_91 -> VAR_92 , VAR_93 -> VAR_94 ) ; if ( VAR_95 -> VAR_96 > - 1 ) METHOD_20 ( VAR_97 -> VAR_98 , VAR_99 -> VAR_100 ) ; if ( VAR_101 -> VAR_102 > - 1 ) METHOD_21 ( VAR_103 -> VAR_104 , VAR_105 -> VAR_106 ) ; if ( VAR_107 -> VAR_108 != 1 ) METHOD_22 ( VAR_109 -> VAR_110 , VAR_111 -> VAR_112 ) ; if ( VAR_113 -> VAR_114 > - 1 ) METHOD_23 ( VAR_115 -> VAR_116 , VAR_117 -> VAR_118 ) ; if ( VAR_119 -> VAR_120 > - 1 ) METHOD_24 ( VAR_121 -> VAR_122 , VAR_123 -> VAR_124 ) ; if ( VAR_125 -> VAR_126 == VAR_127 ) {  if ( - 1 == METHOD_25 ( VAR_128 -> VAR_129 , ( TYPE_3 * ) VAR_130 -> VAR_131 ) ) {  VAR_132 . METHOD_26 ( 0 , VAR_133 , "omzmq3:bindfailedfor%s:%s" , VAR_134 -> VAR_135 , METHOD_27 ( VAR_136 ) ) ; METHOD_28 ( VAR_137 ) ; } METHOD_29 ( "omzmq3:bindto%ssuccessful\\n" , VAR_138 -> VAR_139 ) ; } else {  if ( - 1 == METHOD_30 ( VAR_140 -> VAR_141 , ( TYPE_4 * ) VAR_142 -> VAR_143 ) ) {  VAR_144 . METHOD_31 ( 0 , VAR_145 , "omzmq3:connectfailedfor%s:%s" , VAR_146 -> VAR_147 , METHOD_32 ( VAR_148 ) ) ; METHOD_33 ( VAR_149 ) ; } METHOD_34 ( "omzmq3:connectto%ssuccessful" , VAR_150 -> VAR_151 ) ; } VAR_152 : VAR_153 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = METHOD_1 ( VAR_6 ) ;  struct STRUCT_OR_UNION_4 VAR_7 ;  METHOD_2 ( & VAR_8 , 0 , sizeof ( VAR_9 ) ) ; VAR_10 . VAR_11 = VAR_12 -> VAR_13 ; VAR_14 . VAR_15 = VAR_16 -> VAR_17 . VAR_18 . VAR_19 ; VAR_20 . VAR_21 = VAR_22 -> VAR_23 . VAR_24 . VAR_25 ; VAR_26 . VAR_27 = VAR_28 -> VAR_29 ; METHOD_3 ( VAR_30 , VAR_31 . VAR_32 ) ; if ( METHOD_4 ( & VAR_33 . VAR_34 ) & VAR_35 ) VAR_36 . VAR_37 = VAR_38 -> VAR_39 . VAR_40 . VAR_41 ; else VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; if ( VAR_46 -> VAR_47 && VAR_48 -> VAR_49 -> VAR_50 ) { struct STRUCT_OR_UNION_5 * VAR_51 = ( struct STRUCT_OR_UNION_6 * ) VAR_52 -> VAR_53 -> VAR_54 ; VAR_55 . VAR_56 = * VAR_57 -> VAR_58 ; } METHOD_5 ( "%s:skb:%p,len:%d,src:%pI6dst:%pI6\\n" , VAR_59 , VAR_60 ,  VAR_61 -> VAR_62 , & VAR_63 . VAR_64 , & VAR_65 . VAR_66 ) ;   METHOD_6 ( METHOD_7 ( VAR_67 ) , VAR_68 ) ;  if ( ! ( VAR_69 -> VAR_70 & VAR_71 ) ) VAR_72 -> VAR_73 = 1 ;  return METHOD_8 ( VAR_74 , VAR_75 , & VAR_76 , VAR_77 -> VAR_78 , VAR_79 -> VAR_80 ) ;  }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; const TYPE_3 * VAR_7 = "Gettingsbfailed" ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 STRUCT_OR_UNION_8 ; TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; VAR_10 = METHOD_1 ( VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) { VAR_14 = - VAR_15 ; goto VAR_16 ; } VAR_17 = METHOD_2 ( VAR_18 , VAR_19 , & VAR_20 ) ; if ( VAR_21 ) { VAR_22 = "Errorparsingoptions" ; goto VAR_23 ; } VAR_24 = METHOD_3 ( VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; if ( METHOD_4 ( VAR_30 ) ) { VAR_31 = METHOD_5 ( VAR_32 ) ; goto VAR_33 ; } VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 , "ecryptfs" , VAR_37 ) ; if ( VAR_38 ) goto VAR_39 ; METHOD_7 ( VAR_40 , VAR_41 ) ; VAR_42 -> VAR_43 = & VAR_44 -> VAR_45 ; VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = & VAR_50 ; VAR_51 -> VAR_52 = & VAR_53 ; VAR_54 = "Readingsbfailed" ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 | VAR_58 , & STRUCT_OR_UNION_9 ) ; if ( VAR_59 ) { METHOD_9 ( VAR_60 , "kern_path()failed\\n" ) ; goto VAR_61 ; } if ( STRUCT_OR_UNION_10 . STRUCT_OR_UNION_11 -> VAR_62 -> VAR_63 == & VAR_64 ) { VAR_65 = - VAR_66 ; printk ( KERN_ERR "Mountonfilesystemoftype" "eCryptfsexplicitlydisalloweddueto" "knownincompatibilities\\n" ) ; goto VAR_67 ; } if ( VAR_68 && ! METHOD_10 ( STRUCT_OR_UNION_12 . STRUCT_OR_UNION_13 -> VAR_69 -> VAR_70 , METHOD_11 ( ) ) ) { VAR_71 = - VAR_72 ; printk ( KERN_ERR "Mountofdevice(uid:%d)notownedby" "requesteduser(uid:%d)\\n" , METHOD_12 ( STRUCT_OR_UNION_14 . STRUCT_OR_UNION_15 -> VAR_73 ) , METHOD_13 ( & VAR_74 , METHOD_14 ( ) ) ) ; goto VAR_75 ; } METHOD_15 ( VAR_76 , STRUCT_OR_UNION_16 . STRUCT_OR_UNION_17 -> VAR_77 ) ; VAR_78 -> VAR_79 = VAR_80 & ~ VAR_81 ; VAR_82 -> VAR_83 |= STRUCT_OR_UNION_18 . STRUCT_OR_UNION_19 -> VAR_84 -> VAR_85 & ( VAR_86 | VAR_87 ) ; VAR_88 -> VAR_89 = STRUCT_OR_UNION_20 . STRUCT_OR_UNION_21 -> VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 = STRUCT_OR_UNION_22 . STRUCT_OR_UNION_23 -> VAR_94 -> VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ;  STRUCT_OR_UNION_24 = METHOD_16 ( STRUCT_OR_UNION_25 . STRUCT_OR_UNION_26 -> VAR_99 , VAR_100 ) ;  VAR_101 = METHOD_17 ( STRUCT_OR_UNION_27 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_28 ) ) goto VAR_102 ; VAR_103 -> VAR_104 = METHOD_19 ( STRUCT_OR_UNION_29 ) ; if ( ! VAR_105 -> VAR_106 ) { VAR_107 = - VAR_108 ; goto VAR_109 ; } VAR_110 = - VAR_111 ; VAR_112 = METHOD_20 ( VAR_113 , VAR_114 ) ; if ( ! VAR_115 ) goto VAR_116 ; METHOD_21 ( VAR_117 -> VAR_118 , VAR_119 ) ; VAR_120 -> VAR_121 = STRUCT_OR_UNION_30 ; VAR_122 -> VAR_123 |= VAR_124 ; return METHOD_22 ( VAR_125 -> VAR_126 ) ; VAR_127 : METHOD_23 ( & STRUCT_OR_UNION_31 ) ; VAR_128 : METHOD_24 ( VAR_129 ) ; VAR_130 : if ( VAR_131 ) { METHOD_25 ( & VAR_132 -> VAR_133 ) ; METHOD_26 ( VAR_134 , VAR_135 ) ; } printk ( KERN_ERR "%s;rc=[%d]\\n" , VAR_136 , VAR_137 ) ; return METHOD_27 ( VAR_138 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; if ( ( VAR_4 & VAR_5 ) == VAR_6 && ( VAR_7 & VAR_8 ) == VAR_9 ) { TYPE_2 VAR_10 = ( VAR_11 & VAR_12 ) >> 11 ; TYPE_3 VAR_13 = ( VAR_14 & VAR_15 ) >> 16 ; METHOD_2 ( VAR_16 ,  1 , 0 , VAR_17 , 0 ) ;  switch ( VAR_18 ) { case 0 : VAR_19 -> VAR_20 [ VAR_21 ] = METHOD_3 ( ) ; return 0 ; case 1 : VAR_22 -> VAR_23 [ VAR_24 ] = METHOD_4 ( VAR_25 . VAR_26 . VAR_27 , VAR_28 . VAR_29 . VAR_30 ) ; return 0 ; case 2 : VAR_31 -> VAR_32 [ VAR_33 ] = METHOD_5 ( ) ; return 0 ; case 3 : switch ( VAR_34 . VAR_35 ) { case VAR_36 : case VAR_37 : VAR_38 -> VAR_39 [ VAR_40 ] = 1 ; break ; default : VAR_41 -> VAR_42 [ VAR_43 ] = 2 ; } return 0 ; case 29 : VAR_44 -> VAR_45 [ VAR_46 ] = VAR_47 -> VAR_48 ; return 0 ; default : return - 1 ; } } return - 1 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; TYPE_15 VAR_19 ; unsigned VAR_20 , VAR_21 ; unsigned VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 = 0x80 ; VAR_26 * VAR_27 ; TYPE_19 VAR_28 ; unsigned TYPE_20 ( * METHOD_1 ) ( TYPE_21 * VAR_29 ) ; unsigned TYPE_22 ( * METHOD_2 ) ( TYPE_23 * VAR_30 ) ; TYPE_24 ( * METHOD_3 ) ( TYPE_25 * VAR_31 , TYPE_26 VAR_32 , TYPE_27 * VAR_33 ) ; TYPE_28 ( * METHOD_4 ) ( TYPE_29 * VAR_34 , TYPE_30 VAR_35 , TYPE_31 * VAR_36 ) ; METHOD_5 ( VAR_37 != ( const TYPE_32 * ) VAR_38 ) ; METHOD_6 ( VAR_39 -> VAR_40 == VAR_41 ) ; METHOD_7 ( VAR_42 != ( TYPE_33 * ) VAR_43 ) ; METHOD_8 ( VAR_44 -> VAR_45 == VAR_46 ) ; VAR_47 = METHOD_9 ( VAR_48 , METHOD_10 ( ) , "enter" ) ; VAR_49 = METHOD_11 ( VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_34 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_35 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , "ImproperImageHeader" ) ; if ( METHOD_17 ( VAR_67 . VAR_68 , "MATLAB" , 6 ) != 0 ) { VAR_69 = METHOD_18 ( VAR_70 , VAR_71 , VAR_72 ) ; if ( VAR_73 == VAR_74 ) goto VAR_75 ; VAR_76 = VAR_77 ; goto VAR_78 ; } VAR_79 . VAR_80 = METHOD_19 ( VAR_81 ) ; if ( METHOD_20 ( VAR_82 , 2 , ( unsigned TYPE_36 * ) & VAR_83 . VAR_84 ) != 2 ) METHOD_21 ( VAR_85 , "ImproperImageHeader" ) ; if ( VAR_86 ) ( TYPE_37 ) METHOD_22 ( VAR_87 , METHOD_23 ( ) , "Endian%c%c" , VAR_88 . VAR_89 [ 0 ] , VAR_90 . VAR_91 [ 1 ] ) ; if ( ! METHOD_24 ( VAR_92 . VAR_93 , "IM" , 2 ) ) { METHOD_25 = VAR_94 ; METHOD_26 = METHOD_27 ; METHOD_28 = VAR_95 ; METHOD_29 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; } else if ( ! METHOD_30 ( VAR_100 . VAR_101 , "MI" , 2 ) ) { METHOD_31 = VAR_102 ; METHOD_32 = VAR_103 ; METHOD_33 = VAR_104 ; METHOD_34 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } else goto VAR_109 ; if ( METHOD_35 ( VAR_110 . VAR_111 , "MATLAB" , 6 ) ) VAR_112 : METHOD_36 ( VAR_113 , "ImproperImageHeader" ) ; VAR_114 = METHOD_37 ( VAR_115 ) ; while ( ! METHOD_38 ( VAR_116 ) ) { VAR_117 = 1 ; ( TYPE_38 ) METHOD_39 ( VAR_118 , VAR_119 , VAR_120 ) ; VAR_121 . VAR_122 = METHOD_40 ( VAR_123 ) ; if ( METHOD_41 ( VAR_124 ) ) break ; VAR_125 . VAR_126 = METHOD_42 ( VAR_127 ) ; if ( METHOD_43 ( VAR_128 ) ) break ; VAR_129 += VAR_130 . VAR_131 + 4 + 4 ; VAR_132 = VAR_133 ; if d ( VAR_134 ) if ( VAR_135 . VAR_136 == VAR_137 ) { VAR_138 = METHOD_44 ( VAR_139 , VAR_140 . VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 == VAR_145 ) continue ; VAR_146 . VAR_147 = METHOD_45 ( VAR_148 ) ; } if ( VAR_149 . VAR_150 != VAR_151 ) continue ; VAR_152 . VAR_153 = METHOD_46 ( VAR_154 ) ; VAR_155 . VAR_156 = METHOD_47 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_48 ( VAR_160 ) ; VAR_161 . VAR_162 = VAR_163 . VAR_164 & 0xFF ; VAR_165 . VAR_166 = ( VAR_167 . VAR_168 >> 8 ) & 0xFF ; VAR_169 . VAR_170 = METHOD_49 ( VAR_171 ) ; if ( VAR_172 != VAR_173 ) VAR_174 . VAR_175 = METHOD_50 ( VAR_176 ) ; VAR_177 . VAR_178 = METHOD_51 ( VAR_179 ) ; VAR_180 . VAR_181 = METHOD_52 ( VAR_182 ) ; VAR_183 . VAR_184 = METHOD_53 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_54 ( VAR_188 ) ; switch ( VAR_189 . VAR_190 ) { case 8 : VAR_191 = VAR_192 = 1 ; break ; case 12 : VAR_193 = VAR_194 = METHOD_55 ( VAR_195 ) ; VAR_196 = METHOD_56 ( VAR_197 ) ; ( TYPE_39 ) VAR_198 ; if ( VAR_199 != 3 ) METHOD_57 ( VAR_200 , "MultidimensionalMatricesAreNotSupported" ) ; break ; case 16 : VAR_201 = VAR_202 = METHOD_58 ( VAR_203 ) ; if ( VAR_204 != 3 && VAR_205 != 1 ) METHOD_59 ( VAR_206 , "MultidimensionalMatricesAreNotSupported" ) ; VAR_207 = METHOD_60 ( VAR_208 ) ;  break ;  default : METHOD_61 ( VAR_209 , "MultidimensionalMatricesAreNotSupported" ) ; } VAR_210 . VAR_211 = METHOD_62 ( VAR_212 ) ; VAR_213 . VAR_214 = METHOD_63 ( VAR_215 ) ; if ( VAR_216 ) ( TYPE_40 ) METHOD_64 ( VAR_217 , METHOD_65 ( ) , "MATLAB_HDR.StructureClass%d" , VAR_218 . VAR_219 ) ; if ( VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 && VAR_241 . VAR_242 != VAR_243 && VAR_244 . VAR_245 != VAR_246 && VAR_247 . VAR_248 != VAR_249 && VAR_250 . VAR_251 != VAR_252 ) METHOD_66 ( VAR_253 , "UnsupportedCellTypeInTheMatrix" ) ; switch ( VAR_254 . VAR_255 ) { case 0 : VAR_256 = METHOD_67 ( VAR_257 ) ; VAR_258 = 4 * ( TYPE_41 ) ( ( VAR_259 + 3 + 1 ) / 4 ) ; ( TYPE_42 ) METHOD_68 ( VAR_260 , VAR_261 , VAR_262 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_43 ) METHOD_69 ( VAR_263 , 4 , ( unsigned TYPE_44 * ) & VAR_264 ) ; break ; default : goto VAR_265 ; } VAR_266 = METHOD_70 ( VAR_267 ) ; if ( VAR_268 ) ( TYPE_45 ) METHOD_71 ( VAR_269 , METHOD_72 ( ) , "MATLAB_HDR.CellType:%.20g" , ( TYPE_46 ) VAR_270 ) ; ( TYPE_47 ) METHOD_73 ( VAR_271 , 4 , ( unsigned TYPE_48 * ) & VAR_272 ) ; VAR_273 : switch ( VAR_274 ) { case VAR_275 : case VAR_276 : VAR_277 = 8 ; if ( VAR_278 . VAR_279 & VAR_280 ) VAR_281 -> VAR_282 = 1 ; else VAR_283 -> VAR_284 = 8 ; VAR_285 = ( TYPE_49 ) VAR_286 . VAR_287 ; break ; case VAR_288 : case VAR_289 : VAR_290 = 16 ; VAR_291 -> VAR_292 = 16 ; VAR_293 = ( TYPE_50 ) ( 2 * VAR_294 . VAR_295 ) ; break ; case VAR_296 : case VAR_297 : VAR_298 = 32 ; VAR_299 -> VAR_300 = 32 ; VAR_301 = ( TYPE_51 ) ( 4 * VAR_302 . VAR_303 ) ; break ; case VAR_304 : case VAR_305 : VAR_306 = 64 ; VAR_307 -> VAR_308 = 64 ; VAR_309 = ( TYPE_52 ) ( 8 * VAR_310 . VAR_311 ) ; break ; case VAR_312 : VAR_313 = 32 ; VAR_314 -> VAR_315 = 32 ; ( TYPE_53 ) METHOD_74 ( VAR_316 , "quantum:format" , "floating-point" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_54 ) ( 4 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 64 ; VAR_325 -> VAR_326 = 64 ; ( TYPE_55 ) METHOD_75 ( VAR_327 , "quantum:format" , "floating-point" ) ; METHOD_76 ( 4127 ) if ( sizeof ( TYPE_56 ) != 8 ) TYPE_57 METHOD_77 ( VAR_328 , "IncompatibleSizeOfDouble" ) ; if ( VAR_329 . VAR_330 & VAR_331 ) { } VAR_332 = ( TYPE_58 ) ( 8 * VAR_333 . VAR_334 ) ; break ; default : METHOD_78 ( VAR_335 , "UnsupportedCellTypeInTheMatrix" ) ; } ( TYPE_59 ) VAR_336 ; VAR_337 -> VAR_338 = VAR_339 . VAR_340 ; VAR_341 -> VAR_342 = VAR_343 . VAR_344 ; VAR_345 = METHOD_79 ( VAR_346 , VAR_347 ) ; if ( VAR_348 == ( TYPE_60 * ) VAR_349 ) METHOD_80 ( VAR_350 , "MemoryAllocationFailed" ) ; VAR_351 = 1 ; VAR_352 -> VAR_353 = VAR_354 << VAR_355 -> VAR_356 ; if ( VAR_357 -> VAR_358 == 0 || VAR_359 -> VAR_360 == 0 ) goto VAR_361 ; if ( ( VAR_362 . VAR_363 == 8 ) && ( ( VAR_364 . VAR_365 & VAR_366 ) == 0 ) ) { METHOD_81 ( VAR_367 , VAR_368 ) ; VAR_369 -> VAR_370 = VAR_371 ; } if ( VAR_372 -> VAR_373 ) { TYPE_61 VAR_374 = VAR_375 -> VAR_376 ; VAR_377 -> VAR_378 = VAR_379 -> VAR_380 ; VAR_381 -> VAR_382 = VAR_383 ; goto VAR_384 ; } VAR_385 = METHOD_82 ( VAR_386 , VAR_387 -> VAR_388 , VAR_389 -> VAR_390 ) ; if ( VAR_391 == VAR_392 ) { METHOD_83 ( VAR_393 , & VAR_394 -> VAR_395 ) ; return ( METHOD_84 ( VAR_396 ) ) ; } VAR_397 = ( unsigned TYPE_62 * ) METHOD_85 ( ( TYPE_63 ) ( VAR_398 ) , sizeof ( TYPE_64 ) ) ; if ( VAR_399 == VAR_400 ) METHOD_86 ( VAR_401 , "MemoryAllocationFailed" ) ; VAR_402 = 0 ; VAR_403 = 0 ; if ( VAR_404 == VAR_405 || VAR_406 == VAR_407 ) { METHOD_87 ( VAR_408 , VAR_409 -> VAR_410 , VAR_411 . VAR_412 , VAR_413 . VAR_414 , VAR_415 , VAR_416 , VAR_417 , & VAR_418 -> VAR_419 , & VAR_420 -> VAR_421 ) ; } if ( VAR_422 == 1 ) VAR_423 = 0 ; do { for ( VAR_424 = 0 ; VAR_425 < ( TYPE_65 ) VAR_426 . VAR_427 ; VAR_428 ++ ) { VAR_429 = METHOD_88 ( VAR_430 , 0 , VAR_431 . VAR_432 - VAR_433 - 1 , VAR_434 -> VAR_435 , 1 , VAR_436 ) ; if ( VAR_437 == ( TYPE_66 * ) VAR_438 ) { if ( VAR_439 ) ( TYPE_67 ) METHOD_89 ( VAR_440 , METHOD_90 ( ) , "MATsetimagepixelsreturnsunexpectedNULLonarow%u." , ( unsigned ) ( VAR_441 . VAR_442 - VAR_443 - 1 ) ) ; goto VAR_444 ; } if ( METHOD_91 ( VAR_445 , VAR_446 , ( unsigned TYPE_68 * ) VAR_447 ) != ( TYPE_69 ) VAR_448 ) { if ( VAR_449 ) ( TYPE_70 ) METHOD_92 ( VAR_450 , METHOD_93 ( ) , "MATcannotreadscanrow%ufromafile." , ( unsigned ) ( VAR_451 . VAR_452 - VAR_453 - 1 ) ) ; goto VAR_454 ; } if ( ( VAR_455 == VAR_456 || VAR_457 == VAR_458 ) && ( VAR_459 . VAR_460 & VAR_461 ) ) { METHOD_94 ( ( unsigned TYPE_71 * ) VAR_462 , VAR_463 ) ; if ( METHOD_95 ( VAR_464 , ( TYPE_72 * ) VAR_465 , VAR_466 , VAR_467 [ VAR_468 ] , VAR_469 , VAR_470 ) <= 0 ) { VAR_471 : if ( VAR_472 ) ( TYPE_73 ) METHOD_96 ( VAR_473 , METHOD_97 ( ) , "MATfailedtoImportQuantumPixelsforarow%u" , ( unsigned ) ( VAR_474 . VAR_475 - VAR_476 - 1 ) ) ; break ; } } else { if ( METHOD_98 ( VAR_477 , ( TYPE_74 * ) VAR_478 , VAR_479 , VAR_480 [ VAR_481 ] , VAR_482 , VAR_483 ) <= 0 ) goto VAR_484 ; if ( VAR_485 <= 1 && ( VAR_486 == VAR_487 || VAR_488 == VAR_489 || VAR_490 == VAR_491 || VAR_492 == VAR_493 ) ) METHOD_99 ( VAR_494 , VAR_495 . VAR_496 ) ; } if ( ! METHOD_100 ( VAR_497 , VAR_498 ) ) { if ( VAR_499 ) ( TYPE_75 ) METHOD_101 ( VAR_500 , METHOD_102 ( ) , "MATfailedtosyncimagepixelsforarow%u" , ( unsigned ) ( VAR_501 . VAR_502 - VAR_503 - 1 ) ) ; goto VAR_504 ; } } } while ( VAR_505 -- >= 2 ) ; VAR_506 = METHOD_103 ( VAR_507 ) ; VAR_508 : if ( VAR_509 . VAR_510 & VAR_511 ) { VAR_512 = METHOD_104 ( VAR_513 ) ; VAR_514 = METHOD_105 ( VAR_515 ) ; if ( VAR_516 == VAR_517 || VAR_518 == VAR_519 ) { METHOD_106 ( VAR_520 , VAR_521 -> VAR_522 , VAR_523 . VAR_524 , VAR_525 . VAR_526 , VAR_527 , VAR_528 , VAR_529 , & VAR_530 , & VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_76 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_107 ( VAR_539 , VAR_540 , ( TYPE_77 * ) VAR_541 ) ; METHOD_108 ( ( TYPE_78 * ) VAR_542 , VAR_543 , VAR_544 , VAR_545 , VAR_546 ) ; } if ( VAR_547 == VAR_548 ) for ( VAR_549 = 0 ; VAR_550 < ( TYPE_79 ) VAR_551 . VAR_552 ; VAR_553 ++ ) { METHOD_109 ( VAR_554 , VAR_555 , ( TYPE_80 * ) VAR_556 ) ; METHOD_110 ( ( TYPE_81 * ) VAR_557 , VAR_558 , VAR_559 , VAR_560 , VAR_561 ) ; } } if ( ( VAR_562 . VAR_563 == 8 ) && ( ( VAR_564 . VAR_565 & VAR_566 ) == 0 ) ) VAR_567 -> VAR_568 = VAR_569 ; if ( VAR_570 -> VAR_571 == 1 ) VAR_572 -> VAR_573 = VAR_574 ; if ( VAR_575 == VAR_576 ) VAR_577 = VAR_578 ; VAR_579 = METHOD_111 ( VAR_580 , 90.0 , VAR_581 ) ; if ( VAR_582 != ( TYPE_82 * ) VAR_583 ) { VAR_584 -> VAR_585 . VAR_586 = 0 ; VAR_587 -> VAR_588 . VAR_589 = 0 ; VAR_590 = VAR_591 -> VAR_592 ; VAR_593 -> VAR_594 = VAR_595 -> VAR_596 ; VAR_597 -> VAR_598 = VAR_599 -> VAR_600 ; VAR_601 -> VAR_602 = VAR_603 ; METHOD_112 ( & VAR_604 , VAR_605 ) ; METHOD_113 ( & VAR_606 ) ; } VAR_607 : if ( VAR_608 != VAR_609 ) if ( VAR_610 != VAR_611 ) { METHOD_114 ( & VAR_612 ) ; if ( VAR_613 ) { if ( VAR_614 -> VAR_615 ) { METHOD_115 ( VAR_616 -> VAR_617 ) ; VAR_618 -> VAR_619 = VAR_620 ; ( TYPE_83 ) METHOD_116 ( VAR_621 -> VAR_622 ) ; } } } METHOD_117 ( VAR_623 , VAR_624 ) ; if ( VAR_625 -> VAR_626 == ( TYPE_84 * ) VAR_627 ) break ; VAR_628 = METHOD_118 ( VAR_629 ) ; VAR_630 -> VAR_631 = VAR_632 -> VAR_633 = 0 ; VAR_634 -> VAR_635 = 0 ; METHOD_119 ( VAR_636 ) ; VAR_637 = VAR_638 ; if ( -- VAR_639 > 0 ) { VAR_640 = VAR_641 ; if ( VAR_642 == VAR_643 ) VAR_644 = VAR_645 ; goto VAR_646 ; } if ( VAR_647 != VAR_648 ) if ( VAR_649 != VAR_650 ) { METHOD_120 ( & VAR_651 ) ; if ( VAR_652 ) { if ( VAR_653 -> VAR_654 ) { METHOD_121 ( VAR_655 -> VAR_656 ) ; VAR_657 -> VAR_658 = VAR_659 ; ( TYPE_85 ) METHOD_122 ( VAR_660 -> VAR_661 ) ; } } } } METHOD_123 ( VAR_662 ) ; VAR_663 : VAR_664 = METHOD_124 ( VAR_665 ) ; METHOD_125 ( VAR_666 ) ; { TYPE_86 * VAR_667 ; TYPE_87 VAR_668 = 0 ; VAR_669 = VAR_670 ; VAR_671 = VAR_672 ; while ( VAR_673 != ( TYPE_88 * ) VAR_674 ) { TYPE_89 * VAR_675 = VAR_676 ; if ( ( VAR_677 -> VAR_678 == 0 ) || ( VAR_679 -> VAR_680 == 0 ) ) { VAR_681 = VAR_682 -> VAR_683 ; METHOD_126 ( & VAR_684 ) ; } else { VAR_685 = VAR_686 ; VAR_687 = VAR_688 -> VAR_689 ; } } for ( VAR_690 = VAR_691 ; VAR_692 != ( TYPE_90 * ) VAR_693 ; VAR_694 = VAR_695 -> VAR_696 ) VAR_697 -> VAR_698 = VAR_699 ++ ; } if ( VAR_700 != VAR_701 ) { if ( VAR_702 -> VAR_703 ) { METHOD_127 ( VAR_704 -> VAR_705 ) ; VAR_706 -> VAR_707 = VAR_708 ; ( TYPE_91 ) METHOD_128 ( VAR_709 -> VAR_710 ) ; } METHOD_129 ( VAR_711 ) ; VAR_712 = VAR_713 ; } if ( VAR_714 ) ( TYPE_92 ) METHOD_130 ( VAR_715 , METHOD_131 ( ) , "return" ) ; if ( VAR_716 == VAR_717 ) METHOD_132 ( VAR_718 , "ImproperImageHeader" ) ; return ( VAR_719 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ;  METHOD_1 ( VAR_5 , "RDP_NEG_FAILURE" ) ;  METHOD_2 ( VAR_6 , VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 ) ; METHOD_4 ( VAR_10 , VAR_11 ) ; switch ( VAR_12 ) { case VAR_13 : METHOD_5 ( VAR_14 , "Error:SSL_REQUIRED_BY_SERVER" ) ; break ; case VAR_15 : METHOD_6 ( VAR_16 , "Error:SSL_NOT_ALLOWED_BY_SERVER" ) ; VAR_17 -> VAR_18 = VAR_19 ; break ; case VAR_20 : METHOD_7 ( VAR_21 , "Error:SSL_CERT_NOT_ON_SERVER" ) ; VAR_22 -> VAR_23 = VAR_24 ; break ; case VAR_25 : METHOD_8 ( VAR_26 , "Error:INCONSISTENT_FLAGS" ) ; break ; case VAR_27 : METHOD_9 ( VAR_28 , "Error:HYBRID_REQUIRED_BY_SERVER" ) ; break ; default : METHOD_10 ( VAR_29 , "Error:Unknownprotocolsecurityerror%" PRIu32 "" , VAR_30 ) ; break ; } VAR_31 -> VAR_32 = VAR_33 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 [ VAR_5 ] ; TYPE_6 VAR_6 = 0 ; TYPE_7 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_8 VAR_10 [ VAR_11 ] ; TYPE_9 * VAR_12 ; TYPE_10 VAR_13 ; TYPE_11 VAR_14 ; TYPE_12 VAR_15 ; TYPE_13 TYPE_14 TYPE_15 * VAR_16 = VAR_17 ; TYPE_16 * TYPE_17 ; VAR_18 * VAR_19 ; TYPE_18 * VAR_20 ; TYPE_19 * VAR_21 ; TYPE_20 * VAR_22 ; TYPE_21 VAR_23 ; TYPE_22 VAR_24 ; TYPE_23 VAR_25 ; TYPE_24 VAR_26 = VAR_27 ; TYPE_25 VAR_28 = VAR_29 ; TYPE_26 VAR_30 = 0 ; TYPE_27 VAR_31 = VAR_32 -> VAR_33 ; TYPE_28 VAR_34 ; TYPE_29 TYPE_30 TYPE_31 VAR_35 = METHOD_1 ( ) ; METHOD_2 ( VAR_36 , ( TYPE_32 * ) & VAR_37 ) ; VAR_38 = ( TYPE_33 * ) METHOD_3 ( VAR_39 * sizeof ( TYPE_34 ) ) ; if ( VAR_40 == VAR_41 ) return VAR_42 ; while ( ! VAR_43 ) { switch ( * VAR_44 ) { case VAR_45 : TYPE_35 ( VAR_46 == 0 ) ; VAR_47 = VAR_48 ; break ; case VAR_49 : VAR_50 . VAR_51 = * ( TYPE_36 * ) ( VAR_52 + 1 ) ; VAR_53 += sizeof ( TYPE_37 ) ; METHOD_4 ( VAR_54 ) ; break ; case VAR_55 : METHOD_5 ( VAR_56 ) ; break ; case VAR_57 : VAR_58 . VAR_59 = * ( TYPE_38 * ) ( VAR_60 + 1 ) ; VAR_61 += sizeof ( TYPE_39 ) ; VAR_62 [ VAR_63 . VAR_64 ] = 0 ; break ; case VAR_65 : VAR_66 . VAR_67 = * ( TYPE_40 * ) ( VAR_68 + 1 ) ; VAR_69 += sizeof ( TYPE_41 ) ; METHOD_6 ( VAR_70 ) ; if ( ! METHOD_7 ( VAR_71 ) ) VAR_72 [ VAR_73 . VAR_74 ] += VAR_75 . VAR_76 ; break ; case VAR_77 : VAR_78 . VAR_79 = * ( TYPE_42 * ) ( VAR_80 + 1 ) ; VAR_81 += sizeof ( TYPE_43 ) ; VAR_82 [ VAR_83 . VAR_84 ] ++ ; break ; case VAR_85 : VAR_86 . VAR_87 = * ( TYPE_44 * ) ( VAR_88 + 1 ) ; VAR_89 += sizeof ( TYPE_45 ) ; VAR_90 . VAR_91 = VAR_92 [ VAR_93 . VAR_94 ] ; METHOD_8 ( VAR_95 ) ; break ; case VAR_96 : VAR_97 . VAR_98 = * ( TYPE_46 * ) ( VAR_99 + 1 ) ; VAR_100 += sizeof ( TYPE_47 ) ; METHOD_9 ( VAR_101 ) ; VAR_102 [ VAR_103 . VAR_104 ] = VAR_105 . VAR_106 ; break ; case VAR_107 : VAR_108 . VAR_109 = * ( TYPE_48 * ) ( VAR_110 + 1 ) ; VAR_111 += sizeof ( TYPE_49 ) ; METHOD_10 ( VAR_112 ) ; if ( METHOD_11 ( VAR_113 ) ) { VAR_114 . VAR_115 = VAR_116 [ VAR_117 . VAR_118 ] ; METHOD_12 ( VAR_119 ) ; } else { METHOD_13 ( VAR_120 ) ; } break ; case VAR_121 : METHOD_14 ( VAR_122 ) ; METHOD_15 ( VAR_123 ) ; VAR_124 = METHOD_16 ( ! METHOD_17 ( VAR_125 ) , VAR_126 ) ; break ; case VAR_127 : METHOD_18 ( VAR_128 ) ; METHOD_19 ( VAR_129 ) ; METHOD_20 ( VAR_130 ) ; METHOD_21 ( VAR_131 ) ; VAR_132 = METHOD_22 ( VAR_133 . VAR_134 <= VAR_135 . VAR_136 , VAR_137 ) ; break ; case VAR_138 : METHOD_23 ( VAR_139 ) ; METHOD_24 ( VAR_140 ) ; VAR_141 = METHOD_25 ( ! METHOD_26 ( VAR_142 ) && VAR_143 . VAR_144 , VAR_145 ) ; break ; case VAR_146 : METHOD_27 ( VAR_147 ) ; METHOD_28 ( VAR_148 ) ; VAR_149 = METHOD_29 ( METHOD_30 ( VAR_150 ) || ! VAR_151 . VAR_152 , VAR_153 ) ; break ; case VAR_154 : METHOD_31 ( VAR_155 ) ; METHOD_32 ( VAR_156 ) ; if ( METHOD_33 ( VAR_157 ) || METHOD_34 ( VAR_158 ) ) VAR_159 . VAR_160 = 0 ; else VAR_161 . VAR_162 = VAR_163 . VAR_164 && VAR_165 . VAR_166 ; METHOD_35 ( VAR_167 ) ; break ; case VAR_168 : METHOD_36 ( VAR_169 ) ; METHOD_37 ( VAR_170 ) ; if ( METHOD_38 ( VAR_171 ) ) { METHOD_39 ( VAR_172 ) ; } else if ( METHOD_40 ( VAR_173 ) ) { METHOD_41 ( VAR_174 ) ; } else { VAR_175 . VAR_176 = VAR_177 . VAR_178 || VAR_179 . VAR_180 ; METHOD_42 ( VAR_181 ) ; } break ; case VAR_182 : METHOD_43 ( VAR_183 ) ; if ( METHOD_44 ( VAR_184 ) ) VAR_185 . VAR_186 = VAR_187 ; else VAR_188 . VAR_189 = ! VAR_190 . VAR_191 ; METHOD_45 ( VAR_192 ) ; break ; case VAR_193 : METHOD_46 ( VAR_194 ) ; METHOD_47 ( VAR_195 ) ; METHOD_48 ( VAR_196 ) ; METHOD_49 ( VAR_197 ) ; if ( VAR_198 . VAR_199 != 0 ) VAR_200 . VAR_201 = VAR_202 . VAR_203 % VAR_204 . VAR_205 ; else VAR_206 . VAR_207 = VAR_208 ; METHOD_50 ( VAR_209 ) ; break ; case VAR_210 : METHOD_51 ( VAR_211 ) ; METHOD_52 ( VAR_212 ) ; METHOD_53 ( VAR_213 ) ; METHOD_54 ( VAR_214 ) ; VAR_215 . VAR_216 = VAR_217 . VAR_218 >> VAR_219 . VAR_220 ; METHOD_55 ( VAR_221 ) ; break ; case VAR_222 : METHOD_56 ( VAR_223 ) ; METHOD_57 ( VAR_224 ) ; METHOD_58 ( VAR_225 ) ; METHOD_59 ( VAR_226 ) ; VAR_227 . VAR_228 = VAR_229 . VAR_230 << VAR_231 . VAR_232 ; METHOD_60 ( VAR_233 ) ; break ; case VAR_234 : METHOD_61 ( VAR_235 ) ; METHOD_62 ( VAR_236 ) ; VAR_237 . VAR_238 = ~ VAR_239 . VAR_240 ; METHOD_63 ( VAR_241 ) ; break ; case VAR_242 : METHOD_64 ( VAR_243 ) ; METHOD_65 ( VAR_244 ) ; METHOD_66 ( VAR_245 ) ; METHOD_67 ( VAR_246 ) ; VAR_247 . VAR_248 = VAR_249 . VAR_250 & VAR_251 . VAR_252 ; METHOD_68 ( VAR_253 ) ; break ; case VAR_254 : METHOD_69 ( VAR_255 ) ; METHOD_70 ( VAR_256 ) ; METHOD_71 ( VAR_257 ) ; METHOD_72 ( VAR_258 ) ; VAR_259 . VAR_260 = VAR_261 . VAR_262 | VAR_263 . VAR_264 ; METHOD_73 ( VAR_265 ) ; break ; case VAR_266 : METHOD_74 ( VAR_267 ) ; METHOD_75 ( VAR_268 ) ; METHOD_76 ( VAR_269 ) ; METHOD_77 ( VAR_270 ) ; VAR_271 . VAR_272 = VAR_273 . VAR_274 ^ VAR_275 . VAR_276 ; METHOD_78 ( VAR_277 ) ; break ; case VAR_278 : TYPE_50 = * ( TYPE_51 * * ) ( VAR_279 + 1 ) ; VAR_280 += sizeof ( TYPE_52 ) ; VAR_281 . VAR_282 = TYPE_53 -> VAR_283 [ VAR_284 ] & VAR_285 ? 1 : 0 ; METHOD_79 ( VAR_286 ) ; break ; case VAR_287 : TYPE_54 TYPE_55 VAR_288 = * ( TYPE_56 * * ) ( VAR_289 + 1 ) ; VAR_290 += sizeof ( TYPE_57 ) ; break ; case VAR_291 : METHOD_80 ( VAR_292 ) ; TYPE_58 = * ( TYPE_59 * * ) ( VAR_293 + 1 ) ; VAR_294 += sizeof ( TYPE_60 ) ; if ( ! METHOD_81 ( VAR_295 ) && VAR_296 . VAR_297 ) TYPE_61 -> VAR_298 [ VAR_299 ] |= VAR_300 ; else if ( METHOD_82 ( TYPE_62 ) ) TYPE_63 -> VAR_301 -> VAR_302 [ VAR_303 ] |= VAR_304 ; TYPE_64 TYPE_65 TYPE_66 -> VAR_305 += METHOD_83 ( ) - VAR_306 ; VAR_307 = METHOD_84 ( ) ; break ; case VAR_308 : VAR_309 = * ( TYPE_67 * * ) ( VAR_310 + 1 ) ; VAR_311 += sizeof ( TYPE_68 ) ; VAR_312 . VAR_313 = ( TYPE_69 * ) METHOD_85 ( VAR_314 -> VAR_315 , VAR_316 , VAR_317 ) ; TYPE_70 ( VAR_318 . VAR_319 != VAR_320 ) ; METHOD_86 ( VAR_321 ) ; break ; case VAR_322 : VAR_323 = * ( TYPE_71 * * ) ( VAR_324 + 1 ) ; VAR_325 += sizeof ( TYPE_72 ) ; METHOD_87 ( VAR_326 ) ; METHOD_88 ( VAR_327 ) ; VAR_328 . VAR_329 = METHOD_89 ( VAR_330 . VAR_331 , VAR_332 ) ; TYPE_73 ( VAR_333 . VAR_334 != VAR_335 ) ; METHOD_90 ( VAR_336 ) ; break ; case VAR_337 : METHOD_91 ( VAR_338 ) ; METHOD_92 ( VAR_339 ) ; switch ( VAR_340 . VAR_341 -> VAR_342 ) { case VAR_343 : VAR_344 . VAR_345 = ( ( TYPE_74 * ) VAR_346 . VAR_347 ) -> VAR_348 ; break ; case VAR_349 : if ( METHOD_93 ( ( ( TYPE_75 * ) VAR_350 . VAR_351 ) -> VAR_352 ) ) VAR_353 . VAR_354 = VAR_355 ; else VAR_356 . VAR_357 = ( ( TYPE_76 * ) VAR_358 . VAR_359 ) -> VAR_360 ; break ; case VAR_361 : if ( ( ( TYPE_77 * ) VAR_362 . VAR_363 ) -> VAR_364 == VAR_365 ) VAR_366 . VAR_367 = VAR_368 ; else VAR_369 . VAR_370 = ( ( TYPE_78 * ) VAR_371 . VAR_372 ) -> VAR_373 ; break ; default : TYPE_79 ( VAR_374 ) ; } METHOD_94 ( VAR_375 ) ; break ; case VAR_376 : METHOD_95 ( VAR_377 ) ; METHOD_96 ( VAR_378 ) ; METHOD_97 ( VAR_379 ) ; METHOD_98 ( VAR_380 ) ; TYPE_80 ( VAR_381 . VAR_382 -> VAR_383 == VAR_384 ) ; VAR_385 . VAR_386 = METHOD_99 ( VAR_387 . VAR_388 , 0 , ( TYPE_81 ) VAR_389 . VAR_390 ) ; if ( VAR_391 . VAR_392 == VAR_393 ) VAR_394 . VAR_395 = VAR_396 ; METHOD_100 ( VAR_397 ) ; break ; case VAR_398 : METHOD_101 ( VAR_399 ) ; METHOD_102 ( VAR_400 ) ; METHOD_103 ( VAR_401 ) ; METHOD_104 ( VAR_402 ) ; TYPE_82 ( VAR_403 . VAR_404 -> VAR_405 == VAR_406 ) ; VAR_407 . VAR_408 = METHOD_105 ( VAR_409 . VAR_410 , 0 , VAR_411 . VAR_412 -> VAR_413 ) ; if ( VAR_414 . VAR_415 == VAR_416 ) VAR_417 . VAR_418 = VAR_419 ; METHOD_106 ( VAR_420 ) ; break ; case VAR_421 : VAR_422 = * ( TYPE_83 * * ) ( VAR_423 + 1 ) ; VAR_424 += sizeof ( TYPE_84 ) ; VAR_425 = ( TYPE_85 ) METHOD_107 ( VAR_426 ) ; VAR_427 = 0 ; while ( VAR_428 > 0 ) { METHOD_108 ( VAR_429 ) ; if ( METHOD_109 ( VAR_430 ) ) VAR_431 ++ ; VAR_432 [ VAR_433 - 1 ] = VAR_434 ; VAR_435 -- ; } METHOD_110 ( VAR_436 ) ; METHOD_111 ( VAR_437 ) ; if ( VAR_438 > 0 ) { VAR_439 . VAR_440 = VAR_441 ; METHOD_112 ( VAR_442 ) ; break ; } VAR_443 = ( TYPE_86 * ) VAR_444 . VAR_445 ; VAR_446 = VAR_447 ; for ( VAR_448 = 0 ; VAR_449 < VAR_450 ; VAR_451 ++ ) { if ( VAR_452 -> VAR_453 [ VAR_454 ] . VAR_455 == VAR_456 ) break ; if ( METHOD_113 ( VAR_457 -> VAR_458 [ VAR_459 ] . VAR_460 , VAR_461 ) == 0 ) { VAR_462 = VAR_463 -> VAR_464 [ VAR_465 ] . METHOD_114 ( VAR_466 , VAR_467 , VAR_468 ) ; break ; } } TYPE_87 ( VAR_469 < VAR_470 ) ; if ( VAR_471 == VAR_472 ) { VAR_473 . VAR_474 = VAR_475 -> VAR_476 ; METHOD_115 ( VAR_477 ) ; } else { VAR_478 = VAR_479 ; } break ; case VAR_480 : METHOD_116 ( VAR_481 ) ; VAR_482 . VAR_483 = VAR_484 . VAR_485 -> VAR_486 [ VAR_487 ] . VAR_488 != VAR_489 ? 1 : 0 ; METHOD_117 ( VAR_490 ) ; break ; case VAR_491 : METHOD_118 ( VAR_492 ) ; METHOD_119 ( VAR_493 ) ; if ( METHOD_120 ( VAR_494 ) ) { VAR_495 . VAR_496 = 0 ; METHOD_121 ( VAR_497 ) ; break ; } VAR_498 = VAR_499 . VAR_500 -> VAR_501 [ VAR_502 ] . VAR_503 ; VAR_504 . VAR_505 = VAR_506 ; while ( VAR_507 != VAR_508 ) { if ( VAR_509 . VAR_510 == VAR_511 -> VAR_512 + VAR_513 -> VAR_514 ) { VAR_515 . VAR_516 = VAR_517 ; break ; } if ( VAR_518 . VAR_519 < VAR_520 -> VAR_521 + VAR_522 -> VAR_523 ) break ; VAR_524 = VAR_525 -> VAR_526 ; } METHOD_122 ( VAR_527 ) ; break ; case VAR_528 : METHOD_123 ( VAR_529 ) ; METHOD_124 ( VAR_530 ) ; METHOD_125 ( VAR_531 ) ; METHOD_126 ( VAR_532 ) ; METHOD_127 ( VAR_533 ) ; VAR_534 = VAR_535 . VAR_536 -> VAR_537 [ VAR_538 ] . VAR_539 ; VAR_540 . VAR_541 = VAR_542 ; while ( VAR_543 != VAR_544 && ! VAR_545 . VAR_546 ) { if ( VAR_547 -> VAR_548 + VAR_549 -> VAR_550 >= VAR_551 . VAR_552 && VAR_553 -> VAR_554 + VAR_555 -> VAR_556 <= VAR_557 . VAR_558 ) { VAR_559 . VAR_560 = VAR_561 ; } if ( VAR_562 -> VAR_563 + VAR_564 -> VAR_565 > VAR_566 . VAR_567 ) break ; VAR_568 = VAR_569 -> VAR_570 ; } METHOD_128 ( VAR_571 ) ; break ; case VAR_572 : METHOD_129 ( VAR_573 ) ; VAR_574 . VAR_575 = VAR_576 . VAR_577 -> VAR_578 [ VAR_579 ] . VAR_580 ; METHOD_130 ( VAR_581 ) ; break ; case VAR_582 : METHOD_131 ( VAR_583 ) ; METHOD_132 ( VAR_584 ) ; METHOD_133 ( VAR_585 ) ; VAR_586 = VAR_587 . VAR_588 -> VAR_589 [ VAR_590 ] . VAR_591 ; VAR_592 = 1 ; VAR_593 . VAR_594 = VAR_595 ; while ( VAR_596 != VAR_597 && VAR_598 . VAR_599 == VAR_600 ) { if ( VAR_601 . VAR_602 == VAR_603 ) VAR_604 . VAR_605 = VAR_606 -> VAR_607 + VAR_608 -> VAR_609 ; VAR_610 ++ ; VAR_611 = VAR_612 -> VAR_613 ; } METHOD_134 ( VAR_614 ) ; break ; case VAR_615 : METHOD_135 ( VAR_616 ) ; METHOD_136 ( VAR_617 ) ; METHOD_137 ( VAR_618 ) ; VAR_619 = VAR_620 . VAR_621 -> VAR_622 [ VAR_623 ] . VAR_624 ; VAR_625 = 1 ; VAR_626 . VAR_627 = VAR_628 ; while ( VAR_629 != VAR_630 && VAR_631 . VAR_632 == VAR_633 ) { if ( VAR_634 . VAR_635 == VAR_636 ) VAR_637 . VAR_638 = VAR_639 -> VAR_640 ; VAR_641 ++ ; VAR_642 = VAR_643 -> VAR_644 ; } METHOD_138 ( VAR_645 ) ; break ; case VAR_646 : VAR_647 = 0 ; VAR_648 = 0 ; METHOD_139 ( VAR_649 ) ; while ( ! METHOD_140 ( VAR_650 ) ) { if ( VAR_651 . VAR_652 -> VAR_653 [ VAR_654 ] . VAR_655 != VAR_656 ) VAR_657 ++ ; VAR_658 ++ ; METHOD_141 ( VAR_659 ) ; } METHOD_142 ( VAR_660 ) ; if ( METHOD_143 ( VAR_661 ) ) VAR_662 . VAR_663 = VAR_664 >= VAR_665 ? 1 : 0 ; else VAR_666 . VAR_667 = VAR_668 >= VAR_669 . VAR_670 ? 1 : 0 ; METHOD_144 ( VAR_671 ) ; break ; case VAR_672 : VAR_673 . VAR_674 = VAR_675 -> VAR_676 ; METHOD_145 ( VAR_677 ) ; break ; case VAR_678 : VAR_679 . VAR_680 = VAR_681 -> VAR_682 ; METHOD_146 ( VAR_683 ) ; break ; case VAR_684 : METHOD_147 ( VAR_685 ) ; VAR_686 . VAR_687 = METHOD_148 ( VAR_688 -> VAR_689 , ( TYPE_88 ) VAR_690 . VAR_691 ) ; METHOD_149 ( VAR_692 ) ; break ; case VAR_693 : METHOD_150 ( VAR_694 ) ; VAR_695 . VAR_696 = METHOD_151 ( VAR_697 -> VAR_698 , ( TYPE_89 ) VAR_699 . VAR_700 ) ; METHOD_152 ( VAR_701 ) ; break ; case VAR_702 : METHOD_153 ( VAR_703 ) ; VAR_704 . VAR_705 = METHOD_154 ( VAR_706 -> VAR_707 , ( TYPE_90 ) VAR_708 . VAR_709 ) ; METHOD_155 ( VAR_710 ) ; break ; case VAR_711 : METHOD_156 ( VAR_712 ) ; VAR_713 . VAR_714 = METHOD_157 ( VAR_715 -> VAR_716 , ( TYPE_91 ) VAR_717 . VAR_718 ) ; METHOD_158 ( VAR_719 ) ; break ; case VAR_720 : METHOD_159 ( VAR_721 ) ; VAR_722 . VAR_723 = METHOD_160 ( VAR_724 -> VAR_725 , ( TYPE_92 ) VAR_726 . VAR_727 ) ; METHOD_161 ( VAR_728 ) ; break ; case VAR_729 : METHOD_162 ( VAR_730 ) ; VAR_731 . VAR_732 = METHOD_163 ( VAR_733 -> VAR_734 , ( TYPE_93 ) VAR_735 . VAR_736 ) ; METHOD_164 ( VAR_737 ) ; break ; case VAR_738 : METHOD_165 ( VAR_739 ) ; VAR_740 . VAR_741 = METHOD_166 ( VAR_742 -> VAR_743 , ( TYPE_94 ) VAR_744 . VAR_745 ) ; METHOD_167 ( VAR_746 ) ; break ; case VAR_747 : METHOD_168 ( VAR_748 ) ; VAR_749 . VAR_750 = METHOD_169 ( VAR_751 -> VAR_752 , ( TYPE_95 ) VAR_753 . VAR_754 ) ; METHOD_170 ( VAR_755 ) ; break ; case VAR_756 : METHOD_171 ( VAR_757 ) ; VAR_758 . VAR_759 = METHOD_172 ( VAR_760 -> VAR_761 , ( TYPE_96 ) VAR_762 . VAR_763 ) ; METHOD_173 ( VAR_764 ) ; break ; case VAR_765 : METHOD_174 ( VAR_766 ) ; VAR_767 . VAR_768 = METHOD_175 ( VAR_769 -> VAR_770 , ( TYPE_97 ) VAR_771 . VAR_772 ) ; METHOD_176 ( VAR_773 ) ; break ; case VAR_774 : METHOD_177 ( VAR_775 ) ; VAR_776 . VAR_777 = METHOD_178 ( VAR_778 -> VAR_779 , ( TYPE_98 ) VAR_780 . VAR_781 ) ; METHOD_179 ( VAR_782 ) ; break ; case VAR_783 : METHOD_180 ( VAR_784 ) ; VAR_785 . VAR_786 = METHOD_181 ( VAR_787 -> VAR_788 , ( TYPE_99 ) VAR_789 . VAR_790 ) ; METHOD_182 ( VAR_791 ) ; break ; case VAR_792 : METHOD_183 ( VAR_793 ) ; METHOD_184 ( VAR_794 ) ; METHOD_185 ( VAR_795 ) ; METHOD_186 ( VAR_796 ) ; VAR_797 . VAR_798 = METHOD_187 ( VAR_799 . VAR_800 -> VAR_801 , VAR_802 . VAR_803 -> VAR_804 , VAR_805 . VAR_806 -> VAR_807 , VAR_808 . VAR_809 -> VAR_810 ) != VAR_811 ; METHOD_188 ( VAR_812 ) ; break ; case VAR_813 : VAR_814 . VAR_815 = * ( TYPE_100 * ) ( VAR_816 + 1 ) ; VAR_817 += sizeof ( TYPE_101 ) ; VAR_818 = METHOD_189 ( ( TYPE_102 * ) VAR_819 . VAR_820 , VAR_821 ) ; if ( VAR_822 != VAR_823 ) VAR_824 = VAR_825 ; break ; case VAR_826 : METHOD_190 ( VAR_827 ) ; METHOD_191 ( VAR_828 ) ; METHOD_192 ( VAR_829 ) ; METHOD_193 ( VAR_830 ) ; if ( VAR_831 . VAR_832 -> VAR_833 == 0 ) { VAR_834 . VAR_835 = VAR_836 ; METHOD_194 ( VAR_837 ) ; break ; } VAR_838 . VAR_839 = METHOD_195 ( ( TYPE_103 * ) VAR_840 . VAR_841 -> METHOD_196 , ( TYPE_104 * ) VAR_842 . VAR_843 -> VAR_844 , VAR_845 . VAR_846 -> VAR_847 ,  VAR_848 . VAR_849 -> VAR_850 | VAR_851 ,  VAR_852 , VAR_853 ) >= 0 ; METHOD_197 ( VAR_854 ) ; break ; case VAR_855 : VAR_856 . VAR_857 = * ( TYPE_105 * ) ( VAR_858 + 1 ) ; VAR_859 += sizeof ( TYPE_106 ) ; VAR_860 = VAR_861 [ VAR_862 - VAR_863 . VAR_864 ] ; if ( METHOD_198 ( VAR_865 ) ) VAR_866 [ VAR_867 - VAR_868 . VAR_869 ] . VAR_870 = VAR_871 ; else VAR_872 [ VAR_873 - VAR_874 . VAR_875 ] . VAR_876 = ( TYPE_107 ) VAR_877 . VAR_878 ; break ; case VAR_879 : METHOD_199 ( VAR_880 ) ; METHOD_200 ( VAR_881 ) ; VAR_882 . VAR_883 = VAR_884 . VAR_885 -> VAR_886 > 0 ; METHOD_201 ( VAR_887 ) ; break ; case VAR_888 : METHOD_202 ( VAR_889 ) ; METHOD_203 ( VAR_890 ) ; METHOD_204 ( VAR_891 ) ; METHOD_205 ( VAR_892 ) ; VAR_893 . VAR_894 = VAR_895 . VAR_896 == VAR_897 . VAR_898 ; METHOD_206 ( VAR_899 ) ; break ; case VAR_900 : METHOD_207 ( VAR_901 ) ; METHOD_208 ( VAR_902 ) ; METHOD_209 ( VAR_903 ) ; METHOD_210 ( VAR_904 ) ; VAR_905 . VAR_906 = VAR_907 . VAR_908 != VAR_909 . VAR_910 ; METHOD_211 ( VAR_911 ) ; break ; case VAR_912 : METHOD_212 ( VAR_913 ) ; METHOD_213 ( VAR_914 ) ; METHOD_214 ( VAR_915 ) ; METHOD_215 ( VAR_916 ) ; VAR_917 . VAR_918 = VAR_919 . VAR_920 < VAR_921 . VAR_922 ; METHOD_216 ( VAR_923 ) ; break ; case VAR_924 : METHOD_217 ( VAR_925 ) ; METHOD_218 ( VAR_926 ) ; METHOD_219 ( VAR_927 ) ; METHOD_220 ( VAR_928 ) ; VAR_929 . VAR_930 = VAR_931 . VAR_932 > VAR_933 . VAR_934 ; METHOD_221 ( VAR_935 ) ; break ; case VAR_936 : METHOD_222 ( VAR_937 ) ; METHOD_223 ( VAR_938 ) ; METHOD_224 ( VAR_939 ) ; METHOD_225 ( VAR_940 ) ; VAR_941 . VAR_942 = VAR_943 . VAR_944 <= VAR_945 . VAR_946 ; METHOD_226 ( VAR_947 ) ; break ; case VAR_948 : METHOD_227 ( VAR_949 ) ; METHOD_228 ( VAR_950 ) ; METHOD_229 ( VAR_951 ) ; METHOD_230 ( VAR_952 ) ; VAR_953 . VAR_954 = VAR_955 . VAR_956 >= VAR_957 . VAR_958 ; METHOD_231 ( VAR_959 ) ; break ; case VAR_960 : METHOD_232 ( VAR_961 ) ; METHOD_233 ( VAR_962 ) ; METHOD_234 ( VAR_963 ) ; METHOD_235 ( VAR_964 ) ; VAR_965 . VAR_966 = VAR_967 . VAR_968 + VAR_969 . VAR_970 ; METHOD_236 ( VAR_971 ) ; break ; case VAR_972 : METHOD_237 ( VAR_973 ) ; METHOD_238 ( VAR_974 ) ; METHOD_239 ( VAR_975 ) ; METHOD_240 ( VAR_976 ) ; VAR_977 . VAR_978 = VAR_979 . VAR_980 - VAR_981 . VAR_982 ; METHOD_241 ( VAR_983 ) ; break ; case VAR_984 : METHOD_242 ( VAR_985 ) ; METHOD_243 ( VAR_986 ) ; METHOD_244 ( VAR_987 ) ; METHOD_245 ( VAR_988 ) ; VAR_989 . VAR_990 = VAR_991 . VAR_992 * VAR_993 . VAR_994 ; METHOD_246 ( VAR_995 ) ; break ; case VAR_996 : METHOD_247 ( VAR_997 ) ; METHOD_248 ( VAR_998 ) ; METHOD_249 ( VAR_999 ) ; METHOD_250 ( VAR_1000 ) ; if ( VAR_1001 . VAR_1002 != 0 ) VAR_1003 . VAR_1004 = VAR_1005 . VAR_1006 / VAR_1007 . VAR_1008 ; else VAR_1009 . VAR_1010 = VAR_1011 ; METHOD_251 ( VAR_1012 ) ; break ; case VAR_1013 : METHOD_252 ( VAR_1014 ) ; METHOD_253 ( VAR_1015 ) ; VAR_1016 . VAR_1017 = - VAR_1018 . VAR_1019 ; METHOD_254 ( VAR_1020 ) ; break ; case VAR_1021 : METHOD_255 ( VAR_1022 ) ; METHOD_256 ( VAR_1023 ) ; METHOD_257 ( VAR_1024 ) ; METHOD_258 ( VAR_1025 ) ; VAR_1026 . VAR_1027 = VAR_1028 . VAR_1029 < VAR_1030 . VAR_1031 ; METHOD_259 ( VAR_1032 ) ; break ; case VAR_1033 : METHOD_260 ( VAR_1034 ) ; METHOD_261 ( VAR_1035 ) ; METHOD_262 ( VAR_1036 ) ; METHOD_263 ( VAR_1037 ) ; VAR_1038 . VAR_1039 = VAR_1040 . VAR_1041 > VAR_1042 . VAR_1043 ; METHOD_264 ( VAR_1044 ) ; break ; case VAR_1045 : METHOD_265 ( VAR_1046 ) ; METHOD_266 ( VAR_1047 ) ; METHOD_267 ( VAR_1048 ) ; METHOD_268 ( VAR_1049 ) ; VAR_1050 . VAR_1051 = VAR_1052 . VAR_1053 <= VAR_1054 . VAR_1055 ; METHOD_269 ( VAR_1056 ) ; break ; case VAR_1057 : METHOD_270 ( VAR_1058 ) ; METHOD_271 ( VAR_1059 ) ; METHOD_272 ( VAR_1060 ) ; METHOD_273 ( VAR_1061 ) ; VAR_1062 . VAR_1063 = VAR_1064 . VAR_1065 >= VAR_1066 . VAR_1067 ; METHOD_274 ( VAR_1068 ) ; break ; case VAR_1069 : METHOD_275 ( VAR_1070 ) ; METHOD_276 ( VAR_1071 ) ; METHOD_277 ( VAR_1072 ) ; METHOD_278 ( VAR_1073 ) ; VAR_1074 . VAR_1075 = VAR_1076 . VAR_1077 == VAR_1078 . VAR_1079 ; METHOD_279 ( VAR_1080 ) ; break ; case VAR_1081 : METHOD_280 ( VAR_1082 ) ; METHOD_281 ( VAR_1083 ) ; METHOD_282 ( VAR_1084 ) ; METHOD_283 ( VAR_1085 ) ; VAR_1086 . VAR_1087 = VAR_1088 . VAR_1089 != VAR_1090 . VAR_1091 ; METHOD_284 ( VAR_1092 ) ; break ; case VAR_1093 : METHOD_285 ( VAR_1094 ) ; METHOD_286 ( VAR_1095 ) ; METHOD_287 ( VAR_1096 ) ; METHOD_288 ( VAR_1097 ) ; VAR_1098 . VAR_1099 = VAR_1100 . VAR_1101 + VAR_1102 . VAR_1103 ; METHOD_289 ( VAR_1104 ) ; break ; case VAR_1105 : METHOD_290 ( VAR_1106 ) ; METHOD_291 ( VAR_1107 ) ; METHOD_292 ( VAR_1108 ) ; METHOD_293 ( VAR_1109 ) ; VAR_1110 . VAR_1111 = VAR_1112 . VAR_1113 - VAR_1114 . VAR_1115 ; METHOD_294 ( VAR_1116 ) ; break ; case VAR_1117 : METHOD_295 ( VAR_1118 ) ; METHOD_296 ( VAR_1119 ) ; METHOD_297 ( VAR_1120 ) ; METHOD_298 ( VAR_1121 ) ; VAR_1122 . VAR_1123 = VAR_1124 . VAR_1125 * VAR_1126 . VAR_1127 ; METHOD_299 ( VAR_1128 ) ; break ; case VAR_1129 : METHOD_300 ( VAR_1130 ) ; METHOD_301 ( VAR_1131 ) ; METHOD_302 ( VAR_1132 ) ; METHOD_303 ( VAR_1133 ) ; VAR_1134 . VAR_1135 = VAR_1136 . VAR_1137 / VAR_1138 . VAR_1139 ; METHOD_304 ( VAR_1140 ) ; break ; case VAR_1141 : METHOD_305 ( VAR_1142 ) ; METHOD_306 ( VAR_1143 ) ; VAR_1144 . VAR_1145 = - VAR_1146 . VAR_1147 ; METHOD_307 ( VAR_1148 ) ; break ; case VAR_1149 : case VAR_1150 : case VAR_1151 : case VAR_1152 : case VAR_1153 : case VAR_1154 : METHOD_308 ( VAR_1155 ) ; METHOD_309 ( VAR_1156 ) ; METHOD_310 ( VAR_1157 ) ; METHOD_311 ( VAR_1158 ) ; switch ( * VAR_1159 ) { case VAR_1160 : VAR_1161 . VAR_1162 = ( METHOD_312 ( VAR_1163 . VAR_1164 , VAR_1165 . VAR_1166 ) == 0 ) ; break ; case VAR_1167 : VAR_1168 . VAR_1169 = ( METHOD_313 ( VAR_1170 . VAR_1171 , VAR_1172 . VAR_1173 ) != 0 ) ; break ; case VAR_1174 : VAR_1175 . VAR_1176 = ( METHOD_314 ( VAR_1177 . VAR_1178 , VAR_1179 . VAR_1180 ) < 0 ) ; break ; case VAR_1181 : VAR_1182 . VAR_1183 = ( METHOD_315 ( VAR_1184 . VAR_1185 , VAR_1186 . VAR_1187 ) <= 0 ) ; break ; case VAR_1188 : VAR_1189 . VAR_1190 = ( METHOD_316 ( VAR_1191 . VAR_1192 , VAR_1193 . VAR_1194 ) > 0 ) ; break ; case VAR_1195 : VAR_1196 . VAR_1197 = ( METHOD_317 ( VAR_1198 . VAR_1199 , VAR_1200 . VAR_1201 ) >= 0 ) ; break ; } METHOD_318 ( VAR_1202 ) ; break ; default : TYPE_108 ( VAR_1203 ) ; } if ( VAR_1204 > 0 ) { if ( ++ VAR_1205 == 10 ) { if ( METHOD_319 ( METHOD_320 ( VAR_1206 ) , VAR_1207 ) > VAR_1208 ) { TYPE_109 TYPE_110 TYPE_111 ( VAR_1209 != VAR_1210 ) ; VAR_1211 -> VAR_1212 += METHOD_321 ( ) - VAR_1213 ; VAR_1214 = VAR_1215 ; VAR_1216 = VAR_1217 ; } VAR_1218 = 0 ; } } VAR_1219 ++ ; } METHOD_322 ( VAR_1220 ) ; METHOD_323 ( VAR_1221 ) ; return VAR_1222 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ; if ( VAR_5 && ! VAR_6 -> VAR_7 . VAR_8 ) { TYPE_6 * VAR_9 = ( TYPE_7 * ) VAR_10 ; TYPE_8 VAR_11 ; METHOD_1 ( & VAR_12 -> VAR_13 , & VAR_14 ) ; return METHOD_2 ( VAR_15 -> VAR_16 . VAR_17 [ 0 ] , VAR_18 -> VAR_19 , & VAR_20 ) ; } else return VAR_21 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 * METHOD_1 , TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; for ( VAR_8 = 0 ; VAR_9 < VAR_10 -> VAR_11 ; VAR_12 ++ ) { struct STRUCT_OR_UNION_3 * VAR_13 = & VAR_14 -> VAR_15 [ VAR_16 ] ; for ( VAR_17 = METHOD_2 ( & VAR_18 -> VAR_19 , VAR_20 -> VAR_21 ) ; VAR_22 < VAR_23 -> VAR_24 ; VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 , VAR_28 -> VAR_29 , VAR_30 + 1 ) ) {  VAR_31 = METHOD_4 ( VAR_32 -> VAR_33 , VAR_34 + VAR_35 ) ;  if ( VAR_36 -> VAR_37 == VAR_38 -> VAR_39 ) METHOD_5 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 ) ; } VAR_44 += ( 1 << VAR_45 -> VAR_46 ) ; } }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; METHOD_1 ( sizeof ( VAR_5 ) == 8 ) ;  if ( ( VAR_6 = METHOD_2 ( 1 , sizeof ( VAR_7 ) ) ) == VAR_8 )  { VAR_9 = VAR_10 ; return VAR_11 ; } ; METHOD_3 ( VAR_12 ) ; METHOD_4 ( VAR_13 , "File:%s\\n" , VAR_14 ) ; if ( METHOD_5 ( VAR_15 , VAR_16 ) != 0 ) { VAR_17 = VAR_18 -> VAR_19 ; return VAR_20 ; } ; VAR_21 -> VAR_22 . VAR_23 = VAR_24 ; if ( METHOD_6 ( VAR_25 , "-" ) == 0 ) VAR_26 -> VAR_27 = METHOD_7 ( VAR_28 ) ; else VAR_29 -> VAR_30 = METHOD_8 ( VAR_31 ) ; return METHOD_9 ( VAR_32 , VAR_33 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  if ( VAR_1 -> VAR_2 == VAR_3 ) { TYPE_2 VAR_4 [ VAR_5 ] ; TYPE_3 VAR_6 , VAR_7 , VAR_8 = 0 ; for ( VAR_9 = 0 ; VAR_10 < VAR_11 ; ++ VAR_12 ) { VAR_13 [ VAR_14 ] = 0 ; for ( VAR_15 = 0 ; VAR_16 < VAR_17 ; ++ VAR_18 )  VAR_19 [ VAR_20 ] += VAR_21 -> VAR_22 . VAR_23 [ VAR_24 ] [ VAR_25 ] ;  VAR_26 += ( VAR_27 [ VAR_28 ] > 0 ) ; } if ( VAR_29 == 1 ) { for ( VAR_30 = 0 ; VAR_31 < VAR_32 ; ++ VAR_33 ) { if ( VAR_34 [ VAR_35 ] ) { VAR_36 -> VAR_37 = VAR_38 ; break ; } } } } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 = 0 ; TYPE_5 * VAR_5 = VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 = 0 ; if ( ! VAR_10 ) { return VAR_11 ; } while ( VAR_12 ) { TYPE_9 * VAR_13 = METHOD_2 ( VAR_14 , ',' ) ; if ( VAR_15 ) { * VAR_16 ++ = 0 ; } while ( VAR_17 [ 0 ] == '' ) {  VAR_18 ++ ;  } VAR_19 -> VAR_20 [ VAR_21 ] . VAR_22 = VAR_23 ; VAR_24 -> VAR_25 [ VAR_26 ] . VAR_27 = VAR_28 ; VAR_29 -> VAR_30 [ VAR_31 ] . VAR_32 = VAR_33 ; while ( VAR_34 [ 0 ] == '' || VAR_35 [ 0 ] == '[' || VAR_36 [ 0 ] == ']' ) { VAR_37 ++ ; } if ( ! METHOD_3 ( VAR_38 , "lsl" , 3 ) ) { VAR_39 -> VAR_40 [ VAR_41 ] . VAR_42 = VAR_43 ; } else if ( ! METHOD_4 ( VAR_44 , "lsr" , 3 ) ) { VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 = VAR_49 ; } else if ( ! METHOD_5 ( VAR_50 , "asr" , 3 ) ) { VAR_51 -> VAR_52 [ VAR_53 ] . VAR_54 = VAR_55 ; } if ( VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 != VAR_60 ) { VAR_61 -> VAR_62 ++ ; VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 = METHOD_6 ( VAR_67 , VAR_68 + 4 ) ; if ( VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 > 63 ) { return VAR_73 ; } VAR_74 ++ ; VAR_75 = VAR_76 ; continue ; } switch ( VAR_77 [ 0 ] ) { case 'x' : VAR_78 = METHOD_7 ( VAR_79 , ',' ) ; if ( VAR_80 ) { VAR_81 [ 0 ] = '\\0' ; } VAR_82 -> VAR_83 ++ ; VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 = VAR_88 ; VAR_89 -> VAR_90 [ VAR_91 ] . VAR_92 = VAR_93 ; VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 = METHOD_8 ( VAR_98 , VAR_99 + 1 ) ; if ( VAR_100 -> VAR_101 [ VAR_102 ] . VAR_103 > 31 ) { return VAR_104 ; } break ; case 'w' : VAR_105 -> VAR_106 ++ ; VAR_107 -> VAR_108 [ VAR_109 ] . VAR_110 = VAR_111 ; VAR_112 -> VAR_113 [ VAR_114 ] . VAR_115 = VAR_116 ; VAR_117 -> VAR_118 [ VAR_119 ] . VAR_120 = METHOD_9 ( VAR_121 , VAR_122 + 1 ) ; if ( VAR_123 -> VAR_124 [ VAR_125 ] . VAR_126 > 31 ) { return VAR_127 ; } break ; case 'v' : VAR_128 -> VAR_129 ++ ; VAR_130 -> VAR_131 [ VAR_132 ] . VAR_133 = VAR_134 ; VAR_135 -> VAR_136 [ VAR_137 ] . VAR_138 = METHOD_10 ( VAR_139 , VAR_140 + 1 ) ; break ; case 's' : case 'S' : if ( VAR_141 [ 1 ] == 'P' || VAR_142 [ 1 ] == 'p' ) { TYPE_10 VAR_143 ; for ( VAR_144 = 0 ; VAR_145 [ VAR_146 ] . VAR_147 ; VAR_148 ++ ) { if ( ! METHOD_11 ( VAR_149 , VAR_150 [ VAR_151 ] . VAR_152 , METHOD_12 ( VAR_153 [ VAR_154 ] . VAR_155 ) ) ) { VAR_156 -> VAR_157 [ VAR_158 ] . VAR_159 = VAR_160 [ VAR_161 ] . VAR_162 ; break ; } } VAR_163 -> VAR_164 ++ ; VAR_165 -> VAR_166 [ VAR_167 ] . VAR_168 = VAR_169 ; VAR_170 -> VAR_171 [ VAR_172 ] . VAR_173 = VAR_174 | VAR_175 ; VAR_176 -> VAR_177 [ VAR_178 ] . VAR_179 = 31 ; break ; } VAR_180 = METHOD_13 ( VAR_181 ) ; if ( VAR_182 != - 1 ) { VAR_183 -> VAR_184 ++ ; VAR_185 -> VAR_186 [ VAR_187 ] . VAR_188 = VAR_189 ; VAR_190 -> VAR_191 [ VAR_192 ] . VAR_193 = VAR_194 ; } break ; case 'L' : case 'l' : case 'I' : case 'i' : case 'N' : case 'n' : case 'O' : case 'o' : case 'p' : case 'P' : VAR_195 = METHOD_14 ( VAR_196 ) ; if ( VAR_197 != - 1 ) { VAR_198 -> VAR_199 ++ ; VAR_200 -> VAR_201 [ VAR_202 ] . VAR_203 = VAR_204 ; VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 = VAR_209 ; } break ; case '-' : VAR_210 -> VAR_211 [ VAR_212 ] . VAR_213 = - 1 ; default : VAR_214 -> VAR_215 ++ ; VAR_216 -> VAR_217 [ VAR_218 ] . VAR_219 = VAR_220 ; VAR_221 -> VAR_222 [ VAR_223 ] . VAR_224 = METHOD_15 ( VAR_225 , VAR_226 ) ; VAR_227 ++ ; break ; } VAR_228 = VAR_229 ; VAR_230 ++ ; if ( VAR_231 > VAR_232 ) { METHOD_16 ( VAR_233 ) ; return VAR_234 ; } } METHOD_17 ( VAR_235 ) ; return VAR_236 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ;  TYPE_3 * const VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 * const VAR_7 = & VAR_8 -> VAR_9 ; const TYPE_5 VAR_10 = METHOD_1 ( VAR_11 -> VAR_12 ) ;  VAR_13 -> VAR_14 = 0 ;   METHOD_2 ( VAR_15 , VAR_16 -> VAR_17 , 0 , 0 ) ;  METHOD_3 ( VAR_18 , 0 , METHOD_4 ( VAR_19 , VAR_20 ) , 0 , 0 , VAR_21 ) ; METHOD_5 ( VAR_22 , METHOD_6 ( VAR_23 ) , 0 , 0 ) ; METHOD_7 ( & VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 ) ;  VAR_30 -> VAR_31 [ 0 ] -> VAR_32 . VAR_33 = VAR_34 ;  VAR_35 -> VAR_36 [ 0 ] -> VAR_37 . VAR_38 = VAR_39 ; METHOD_8 ( VAR_40 -> VAR_41 [ 0 ] , 0 , sizeof ( * VAR_42 -> VAR_43 [ 0 ] ) * 2 * VAR_44 * VAR_45 ) ;  METHOD_9 ( VAR_46 -> VAR_47 , 0 ,  sizeof ( * VAR_48 -> VAR_49 ) * VAR_50 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ; TYPE_6 * VAR_9 , * VAR_10 ; TYPE_7 * VAR_11 , * VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; if ( VAR_17 ) {  VAR_18 = METHOD_1 ( METHOD_2 ( VAR_19 ) * 2 + 16 ) ;  METHOD_3 ( VAR_20 , "%s/%s" , VAR_21 , VAR_22 ) ; if ( ( VAR_23 = METHOD_4 ( VAR_24 , '.' ) ) && ( METHOD_5 ( VAR_25 , ".pdf" , 4 ) == 0 ) ) * VAR_26 = '\\0' ; METHOD_6 ( VAR_27 , ".summary" ) ; if ( ! ( VAR_28 = METHOD_7 ( VAR_29 , "w" ) ) ) { METHOD_8 ( "Couldnotopenfile\'%s\'forwriting\\n" , VAR_30 ) ; return ; } } VAR_31 = ( VAR_32 ) ? VAR_33 : VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; if ( VAR_38 && VAR_39 -> VAR_40 [ 0 ] . VAR_41 ) -- VAR_42 ; for ( VAR_43 = 1 ; VAR_44 < VAR_45 -> VAR_46 ; ++ VAR_47 ) if ( VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 == 0 ) -- VAR_52 ; if ( ! VAR_53 -> VAR_54 || ( ! VAR_55 && VAR_56 -> VAR_57 [ 0 ] . VAR_58 ) ) VAR_59 = 1 ; VAR_60 = 0 ; for ( VAR_61 = 0 ; ! ( const TYPE_8 ) VAR_62 -> VAR_63 && VAR_64 < VAR_65 -> VAR_66 ; VAR_67 ++ ) { if ( VAR_68 & VAR_69 ) continue ; for ( VAR_70 = 0 ; VAR_71 < VAR_72 -> VAR_73 [ VAR_74 ] . VAR_75 ; VAR_76 ++ ) { ++ VAR_77 ; METHOD_9 ( VAR_78 , "%s:--%c--Version%d--Object%d(%s)" , VAR_79 -> VAR_80 , METHOD_10 ( VAR_81 , VAR_82 , VAR_83 ) , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 , VAR_88 -> VAR_89 [ VAR_90 ] . VAR_91 [ VAR_92 ] . VAR_93 , METHOD_11 ( VAR_94 , VAR_95 -> VAR_96 [ VAR_97 ] . VAR_98 [ VAR_99 ] . VAR_100 , & VAR_101 -> VAR_102 [ VAR_103 ] ) ) ; if ( 0 ) METHOD_12 ( VAR_104 , "Page(%d)\\n" , VAR_105 ) ; else METHOD_13 ( VAR_106 , "\\n" ) ; } } if ( ! ( VAR_107 & VAR_108 ) ) { if ( VAR_109 -> VAR_110 || ! VAR_111 ) METHOD_14 ( VAR_112 , "%s:ThisPDFcontainspotentialcrossreferencestreams.\\n" "%s:Anobjectsummaryisnotavailable.\\n" , VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ; METHOD_15 ( VAR_117 , "----------%s----------\\n" "Versions:%d\\n" , VAR_118 -> VAR_119 , VAR_120 ) ; if ( ! VAR_121 -> VAR_122 ) for ( VAR_123 = 0 ; VAR_124 < VAR_125 -> VAR_126 ; VAR_127 ++ ) { if ( VAR_128 -> VAR_129 [ VAR_130 ] . VAR_131 ) continue ; VAR_132 = VAR_133 -> VAR_134 [ VAR_135 ] . VAR_136 ; if ( VAR_137 -> VAR_138 [ 0 ] . VAR_139 ) VAR_140 += VAR_141 -> VAR_142 [ 0 ] . VAR_143 ; if ( VAR_144 -> VAR_145 [ VAR_146 ] . VAR_147 && VAR_148 ) METHOD_16 ( VAR_149 , "Version%d--%dobjects\\n" , VAR_150 -> VAR_151 [ VAR_152 ] . VAR_153 , VAR_154 ) ; } } else METHOD_17 ( VAR_155 , "%s:%d\\n" , VAR_156 -> VAR_157 , VAR_158 ) ; if ( VAR_159 ) { METHOD_18 ( VAR_160 ) ; METHOD_19 ( VAR_161 ) ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , const TYPE_2 * VAR_2 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_3 VAR_3 , struct STRUCT_OR_UNION_3 * * VAR_4 ) { struct STRUCT_OR_UNION_4 * VAR_5 ; TYPE_4 VAR_6 ; if ( METHOD_1 ( ! VAR_7 ) ) return - VAR_8 ; * VAR_9 = VAR_10 ; if ( VAR_11 < 0 ) VAR_12 = 0 ; VAR_13 = METHOD_2 ( sizeof ( * VAR_14 ) + VAR_15 , VAR_16 ) ; if ( ! VAR_17 ) return - VAR_18 ; if ( VAR_19 > 0 ) VAR_20 -> VAR_21 = ( TYPE_5 * ) VAR_22 + sizeof ( struct STRUCT_OR_UNION_5 ) ; if ( VAR_23 ) METHOD_3 ( VAR_24 -> VAR_25 , VAR_26 , sizeof ( VAR_27 -> VAR_28 ) ) ; VAR_29 = 0 ; METHOD_4 ( & VAR_30 ) ; if ( VAR_31 < 0 ) VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , STRUCT_OR_UNION_6 ) ; if ( VAR_35 < 0 ) VAR_36 = METHOD_6 ( VAR_37 , VAR_38 , STRUCT_OR_UNION_7 ) ; if ( VAR_39 < 0 ) VAR_40 = - VAR_41 ; else if ( VAR_42 < VAR_43 ) { if ( METHOD_7 ( VAR_44 , VAR_45 ) ) VAR_46 = - VAR_47 ; } else if ( VAR_48 >= VAR_49 ) VAR_50 = - VAR_51 ; if ( VAR_52 < 0 ) { METHOD_8 ( & VAR_53 ) ; METHOD_9 ( VAR_54 , "cannotfindtheslotforindex%d(range0-%i),error:%d\\n" , VAR_55 , VAR_56 - 1 , VAR_57 ) ; METHOD_10 ( VAR_58 ) ; return VAR_59 ; } METHOD_11 ( VAR_60 , VAR_61 ) ; if ( VAR_62 >= VAR_63 ) VAR_64 = VAR_65 + 1 ; METHOD_12 ( & VAR_66 ) ; VAR_67 -> VAR_68 = VAR_69 ; VAR_70 -> VAR_71 = VAR_72 ; VAR_73 -> STRUCT_OR_UNION_8 = STRUCT_OR_UNION_9 ; METHOD_13 ( & VAR_74 -> VAR_75 ) ; METHOD_14 ( & VAR_76 -> VAR_77 ) ; METHOD_15 ( & VAR_78 -> VAR_79 ) ;  METHOD_16 ( & VAR_80 -> VAR_81 ) ;  METHOD_17 ( & VAR_82 -> VAR_83 ) ; METHOD_18 ( & VAR_84 -> VAR_85 ) ; METHOD_19 ( & VAR_86 -> VAR_87 ) ; TYPE_6 TYPE_7 TYPE_8 ( & VAR_88 -> VAR_89 ) ; METHOD_20 ( & VAR_90 -> VAR_91 ) ; METHOD_21 ( & VAR_92 -> VAR_93 ) ; VAR_94 -> VAR_95 . VAR_96 = VAR_97 ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 -> VAR_103 . VAR_104 = VAR_105 ; VAR_106 -> VAR_107 . VAR_108 = VAR_109 ; VAR_110 = METHOD_22 ( & VAR_111 -> VAR_112 . VAR_113 , "card%d" , VAR_114 ) ; if ( VAR_115 < 0 ) goto VAR_116 ; VAR_117 = METHOD_23 ( VAR_118 ) ; if ( VAR_119 < 0 ) { METHOD_24 ( VAR_120 , "unabletoregistercontrolminors\\n" ) ; goto VAR_121 ; } VAR_122 = METHOD_25 ( VAR_123 ) ; if ( VAR_124 < 0 ) { METHOD_26 ( VAR_125 , "unabletocreatecardinfo\\n" ) ; goto VAR_126 ; } * VAR_127 = VAR_128 ; return 0 ; VAR_129 : METHOD_27 ( VAR_130 ) ; VAR_131 : METHOD_28 ( & VAR_132 -> VAR_133 ) ; return VAR_134 ; }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 VAR_4 , const TYPE_5 * VAR_5 , TYPE_6 VAR_6 ) { unsigned TYPE_7 VAR_7 ; { TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; METHOD_1 ( & VAR_10 , VAR_11 , VAR_12 ) ; VAR_13 . METHOD_2 ( & VAR_14 , & VAR_15 , & VAR_16 -> VAR_17 , & VAR_18 -> VAR_19 ) ; VAR_20 = METHOD_3 ( & VAR_21 , VAR_22 ) ; if ( VAR_23 < VAR_24 ) { return "2" "exponentiationfailed;toomanyoctets" ; } METHOD_4 ( VAR_25 , VAR_26 . VAR_27 , VAR_28 ) ; METHOD_5 ( VAR_29 . VAR_30 ) ; METHOD_6 ( & VAR_31 ) ; } VAR_32 = VAR_33 - 3 - VAR_34 ; METHOD_7 ( VAR_35 , METHOD_8 ( "verify_shdecryptedSIG1:" , VAR_36 , VAR_37 ) ) ; METHOD_9 ( VAR_38 , METHOD_10 ( "pad_lencalculated:%dhash_len:%d" , VAR_39 , ( TYPE_10 ) VAR_40 ) ) ; if ( VAR_41 [ 0 ] != 0x00 || VAR_42 [ 1 ] != 0x01 || VAR_43 [ VAR_44 + 2 ] != 0x00 ) { return "3" "SIGpaddingdoesnotcheckout" ; }  VAR_45 += VAR_46 + 3 ;   ( * VAR_47 ) = VAR_48 ;  return VAR_49 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 VAR_1 , const TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { METHOD_1 ( VAR_8 ) ; METHOD_2 ( VAR_9 ) ; if ( VAR_10 != VAR_11 ) { TYPE_9 VAR_12 ; METHOD_3 ( & VAR_13 . VAR_14 , VAR_15 , VAR_16 ) ; METHOD_4 ( & VAR_17 . VAR_18 , VAR_19 , VAR_20 ) ; VAR_21 . VAR_22 = METHOD_5 ( VAR_23 ) ; TYPE_10 VAR_24 [ VAR_25 + sizeof ( TYPE_11 ) ] ; METHOD_6 ( VAR_26 , & VAR_27 , sizeof ( TYPE_12 ) ) ; if ( VAR_28 > VAR_29 ) { METHOD_7 ( "btpan_tap_sendethpacketsize:%disexceededlimit!" , VAR_30 ) ; return - 1 ; } METHOD_8 ( VAR_31 + sizeof ( TYPE_13 ) , VAR_32 , VAR_33 ) ;  TYPE_14 VAR_34 = METHOD_9 ( VAR_35 , VAR_36 , VAR_37 + sizeof ( TYPE_15 ) ) ;  METHOD_10 ( "ret:%d" , VAR_38 ) ; return VAR_39 ; } return - 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_7 * VAR_8 = VAR_9 ; TYPE_8 * VAR_10 ; TYPE_9 * VAR_11 = ( TYPE_10 * ) VAR_12 -> VAR_13 ; TYPE_11 * VAR_14 = VAR_15 -> VAR_16 ; TYPE_12 * VAR_17 = VAR_18 -> VAR_19 ; TYPE_13 VAR_20 = VAR_21 -> VAR_22 ; TYPE_14 VAR_23 = VAR_24 -> VAR_25 ; TYPE_15 VAR_26 ; TYPE_16 VAR_27 ; METHOD_1 ( & VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 = VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 = VAR_40 -> VAR_41 ; VAR_42 -> VAR_43 [ 0 ] = VAR_44 -> VAR_45 [ 0 ] ; VAR_46 -> VAR_47 [ 1 ] = VAR_48 -> VAR_49 [ 1 ] ; VAR_50 -> VAR_51 = VAR_52 -> VAR_53 -> VAR_54 ; VAR_55 -> VAR_56 = VAR_57 -> VAR_58 ; VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = 0 ; VAR_64 -> VAR_65 = 0 ; VAR_66 -> VAR_67 = 0 ; if ( VAR_68 -> VAR_69 == 1 ) VAR_70 -> VAR_71 = 1 ; if ( VAR_72 -> VAR_73 == 1 ) { VAR_74 -> VAR_75 = 0 ; if ( VAR_76 -> VAR_77 > 2 ) VAR_78 -> VAR_79 = 2 ; } VAR_80 -> VAR_81 = 0 ; if ( VAR_82 -> VAR_83 == 0 ) { VAR_84 -> VAR_85 = 1 ; } VAR_86 -> VAR_87 = 0 ; if ( VAR_88 -> VAR_89 && VAR_90 -> VAR_91 ) { TYPE_17 VAR_92 ; VAR_93 -> VAR_94 ++ ; VAR_95 = 0 ; switch ( VAR_96 -> VAR_97 ) { case 4 : { VAR_98 = 1 ; break ; } case 3 : { if ( VAR_99 -> VAR_100 != VAR_101 ) VAR_102 = 1 ; break ; } case 2 : { if ( ( VAR_103 -> VAR_104 != VAR_105 ) && ( VAR_106 -> VAR_107 != VAR_108 -> VAR_109 ) ) VAR_110 = 1 ; break ; } case 1 : { if ( 0 == VAR_111 -> VAR_112 ) { VAR_113 = 1 ; } break ; } } if ( VAR_114 ) { if ( VAR_115 -> VAR_116 & 0x2 ) VAR_117 -> VAR_118 = 1 ; if ( 0 == VAR_119 -> VAR_120 ) { if ( VAR_121 -> VAR_122 & 0x4 ) VAR_123 -> VAR_124 = 0 ; if ( VAR_125 -> VAR_126 & 0x8 ) VAR_127 -> VAR_128 = 0 ; } } else VAR_129 -> VAR_130 = 0 ; } { TYPE_18 * VAR_131 = VAR_132 -> VAR_133 ; if ( VAR_134 -> VAR_135 && ( ( VAR_136 -> VAR_137 == VAR_138 ) || ( VAR_139 -> VAR_140 == VAR_141 ) ) ) VAR_142 -> VAR_143 = VAR_144 ; else VAR_145 -> VAR_146 = VAR_147 ; if ( VAR_148 -> VAR_149 == VAR_150 ) { VAR_151 -> VAR_152 = VAR_153 ; VAR_154 -> VAR_155 = VAR_156 ; } if ( VAR_157 -> VAR_158 == VAR_159 ) { if ( VAR_160 -> VAR_161 ) METHOD_2 ( VAR_162 -> VAR_163 ) ; VAR_164 -> VAR_165 = VAR_166 ; } } if ( VAR_167 -> VAR_168 && VAR_169 -> VAR_170 . VAR_171 ) { TYPE_19 VAR_172 ; for ( VAR_173 = 0 ; VAR_174 < VAR_175 ; VAR_176 ++ ) { METHOD_3 ( ( TYPE_20 * ) VAR_177 -> VAR_178 , VAR_179 , VAR_180 ) ; METHOD_4 ( ( TYPE_21 * ) VAR_181 -> VAR_182 , VAR_183 -> VAR_184 [ VAR_185 ] , VAR_186 ) ; METHOD_5 ( ( TYPE_22 * ) VAR_187 -> VAR_188 , VAR_189 , VAR_190 ) ; } VAR_191 -> VAR_192 = 0 ; VAR_193 -> VAR_194 = 0 ; VAR_195 -> VAR_196 . VAR_197 = 0 ; } VAR_198 = METHOD_6 ( VAR_199 , VAR_200 , VAR_201 , VAR_202 ) ; if ( VAR_203 != VAR_204 ) return VAR_205 ; VAR_206 -> VAR_207 = VAR_208 -> VAR_209 ; VAR_210 -> VAR_211 = VAR_212 -> VAR_213 ; VAR_214 -> VAR_215 = VAR_216 -> VAR_217 ; if ( VAR_218 -> VAR_219 ) { TYPE_23 VAR_220 = VAR_221 -> VAR_222 ; TYPE_24 VAR_223 = VAR_224 -> VAR_225 ; TYPE_25 VAR_226 ; if ( ( VAR_227 != VAR_228 -> VAR_229 ) && ( 1 == ( VAR_230 -> VAR_231 -> VAR_232 ) ) ) { VAR_233 = VAR_234 -> VAR_235 ; VAR_236 = VAR_237 -> VAR_238 ; } VAR_239 = ( VAR_240 * VAR_241 ) >> 8 ; if ( VAR_242 -> VAR_243 ) { METHOD_7 ( ( TYPE_26 * ) VAR_244 -> VAR_245 , 0 , VAR_246 ) ; } if ( VAR_247 -> VAR_248 ) { METHOD_8 ( ( TYPE_27 * ) VAR_249 -> VAR_250 , 0 , VAR_251 ) ; } if ( VAR_252 -> VAR_253 ) { METHOD_9 ( ( TYPE_28 * ) VAR_254 -> VAR_255 , 0 , ( VAR_256 * sizeof ( TYPE_29 ) ) ) ; } } VAR_257 -> VAR_258 = & ( VAR_259 -> VAR_260 [ 0 ] ) ; VAR_261 -> VAR_262 = & ( VAR_263 -> VAR_264 [ 0 ] ) ; VAR_265 -> VAR_266 = & ( VAR_267 -> VAR_268 [ 0 ] ) ; VAR_269 -> VAR_270 = 0 ; VAR_271 -> VAR_272 . VAR_273 = 0 ; VAR_274 -> VAR_275 . VAR_276 = 0 ; if ( 1 == VAR_277 -> VAR_278 ) { TYPE_30 VAR_279 ; for ( VAR_280 = 0 ; VAR_281 < VAR_282 ; VAR_283 ++ ) { if ( 0 == VAR_284 -> VAR_285 [ VAR_286 ] ) continue ; METHOD_10 ( ( TYPE_31 * ) VAR_287 -> VAR_288 , VAR_289 , VAR_290 ) ; VAR_291 -> VAR_292 [ VAR_293 ] = 0 ; VAR_294 -> VAR_295 [ VAR_296 ] = 0 ; } } if ( ! ( VAR_297 && 0 != VAR_298 -> VAR_299 ) ) { TYPE_32 * VAR_300 ; TYPE_33 VAR_301 , VAR_302 ; TYPE_34 * VAR_303 ; while ( 1 ) { VAR_304 = ( TYPE_35 * ) METHOD_11 ( ( TYPE_36 * ) VAR_305 -> VAR_306 , & VAR_307 ) ; if ( VAR_308 == VAR_309 ) { VAR_310 -> VAR_311 = VAR_312 ; return VAR_313 ; } if ( 0 == VAR_314 -> VAR_315 [ VAR_316 ] ) { break ; } } VAR_317 = ( TYPE_37 * ) METHOD_12 ( ( TYPE_38 * ) VAR_318 -> VAR_319 , & VAR_320 ) ; if ( VAR_321 == VAR_322 ) { VAR_323 -> VAR_324 = VAR_325 ; return VAR_326 ; } VAR_327 -> VAR_328 = VAR_329 ; VAR_330 -> VAR_331 = VAR_332 ; VAR_333 -> VAR_334 = VAR_335 -> VAR_336 ; VAR_337 -> VAR_338 = VAR_339 ; VAR_340 -> VAR_341 [ VAR_342 ] = VAR_343 ; VAR_344 -> VAR_345 = ( TYPE_39 * ) VAR_346 -> VAR_347 ; VAR_348 -> VAR_349 = ( TYPE_40 * ) VAR_350 -> VAR_351 ; VAR_352 -> VAR_353 [ VAR_354 ] = 0 ;  if ( VAR_355 -> VAR_356 )  { VAR_357 -> VAR_358 [ 0 ] = VAR_359 -> VAR_360 -> VAR_361 [ 0 ] ; * ( VAR_362 -> VAR_363 -> VAR_364 [ 0 ] [ 0 ] ) = * VAR_365 ; * ( VAR_366 -> VAR_367 -> VAR_368 [ 0 ] [ VAR_369 ] ) = * VAR_370 ; } if ( ! VAR_371 -> VAR_372 ) { TYPE_41 VAR_373 ; METHOD_13 ( "-------DisplayBuffersReset--------\\n" ) ; for ( VAR_374 = 0 ; VAR_375 < VAR_376 ; VAR_377 ++ ) { METHOD_14 ( ( TYPE_42 * ) VAR_378 -> VAR_379 , VAR_380 , VAR_381 ) ; METHOD_15 ( ( TYPE_43 * ) VAR_382 -> VAR_383 , VAR_384 -> VAR_385 [ VAR_386 ] , VAR_387 ) ; METHOD_16 ( ( TYPE_44 * ) VAR_388 -> VAR_389 , VAR_390 , VAR_391 ) ; } VAR_392 -> VAR_393 = 0 ; VAR_394 -> VAR_395 = 0 ; VAR_396 -> VAR_397 = 0 ; VAR_398 = ( TYPE_45 * ) METHOD_17 ( ( TYPE_46 * ) VAR_399 -> VAR_400 , & VAR_401 ) ; if ( VAR_402 == VAR_403 ) { VAR_404 -> VAR_405 = VAR_406 ; return VAR_407 ; } VAR_408 = ( TYPE_47 * ) METHOD_18 ( ( TYPE_48 * ) VAR_409 -> VAR_410 , & VAR_411 ) ; if ( VAR_412 == VAR_413 ) { VAR_414 -> VAR_415 = VAR_416 ; return VAR_417 ; } VAR_418 -> VAR_419 = VAR_420 ; VAR_421 -> VAR_422 = VAR_423 ; VAR_424 -> VAR_425 = VAR_426 -> VAR_427 ; VAR_428 -> VAR_429 [ VAR_430 ] = ( TYPE_49 * ) VAR_431 ; VAR_432 -> VAR_433 = VAR_434 ; VAR_435 -> VAR_436 [ VAR_437 ] = VAR_438 ; VAR_439 -> VAR_440 = ( TYPE_50 * ) VAR_441 -> VAR_442 ; VAR_443 -> VAR_444 = ( TYPE_51 * ) VAR_445 -> VAR_446 ; VAR_447 -> VAR_448 [ VAR_449 ] = 0 ; } VAR_450 -> VAR_451 -> VAR_452 = VAR_453 ; VAR_454 -> VAR_455 -> VAR_456 = VAR_457 ; METHOD_19 ( "gotabuffer\\n" ) ; } else { METHOD_20 ( "didnotgetabuffer\\n" ) ; } VAR_458 -> VAR_459 = 1 ; VAR_460 -> VAR_461 -> VAR_462 = VAR_463 ; VAR_464 -> VAR_465 -> VAR_466 = VAR_467 ; VAR_468 -> VAR_469 -> VAR_470 = VAR_471 ; VAR_472 -> VAR_473 -> VAR_474 = VAR_475 -> VAR_476 ; VAR_477 -> VAR_478 -> VAR_479 = VAR_480 -> VAR_481 ; VAR_482 -> VAR_483 -> VAR_484 = VAR_485 -> VAR_486 ; VAR_487 -> VAR_488 -> VAR_489 = VAR_490 -> VAR_491 ; VAR_492 -> VAR_493 = * ( VAR_494 -> VAR_495 ) ; if ( VAR_496 && VAR_497 ) { TYPE_52 VAR_498 ; TYPE_53 VAR_499 , VAR_500 ; VAR_501 -> VAR_502 . VAR_503 += VAR_504 -> VAR_505 . VAR_506 ; VAR_507 -> VAR_508 . VAR_509 += VAR_510 -> VAR_511 . VAR_512 ; VAR_513 -> VAR_514 . VAR_515 += VAR_516 -> VAR_517 . VAR_518 ; VAR_519 -> VAR_520 . VAR_521 += ( ( VAR_522 -> VAR_523 * VAR_524 -> VAR_525 ) >> 5 ) ; VAR_526 -> VAR_527 . VAR_528 += ( ( VAR_529 -> VAR_530 * VAR_531 -> VAR_532 ) >> 5 ) ; VAR_533 -> VAR_534 -> VAR_535 |= VAR_536 ; VAR_537 = VAR_538 -> VAR_539 -> VAR_540 ; VAR_541 = VAR_542 -> VAR_543 -> VAR_544 ; VAR_545 = METHOD_21 ( VAR_546 , VAR_547 ) ; VAR_548 -> VAR_549 -> VAR_550 = VAR_551 ; } VAR_552 -> VAR_553 = VAR_554 -> VAR_555 && ( ! VAR_556 ) ; VAR_557 -> VAR_558 -> VAR_559 |= ( VAR_560 -> VAR_561 << 2 ) ; VAR_562 -> VAR_563 = VAR_564 -> VAR_565 ; VAR_566 -> VAR_567 ++ ; VAR_568 -> VAR_569 = VAR_570 -> VAR_571 + ( ( VAR_572 -> VAR_573 + 1 ) << ( 1 - VAR_574 -> VAR_575 -> VAR_576 ) ) ; VAR_577 -> VAR_578 ++ ; VAR_579 -> VAR_580 = VAR_581 -> VAR_582 [ 0 ] ; VAR_583 -> VAR_584 = VAR_585 -> VAR_586 [ 0 ] ; VAR_587 -> VAR_588 = VAR_589 -> VAR_590 [ 0 ] ; VAR_591 -> VAR_592 = 0 ; VAR_593 -> VAR_594 = VAR_595 -> VAR_596 . VAR_597 ; VAR_598 -> VAR_599 = VAR_600 -> VAR_601 [ 0 ] ; VAR_602 -> VAR_603 = 0 ; VAR_604 -> VAR_605 = 0 ; VAR_606 -> VAR_607 = VAR_608 -> VAR_609 . VAR_610 ; VAR_611 -> VAR_612 = 0 ; VAR_613 -> VAR_614 = 0 ; VAR_615 -> VAR_616 = 0 ; VAR_617 -> VAR_618 = 2 ; VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 = - ( VAR_623 ) ; VAR_624 -> VAR_625 = 0 ; VAR_626 -> VAR_627 = 0 ; VAR_628 -> VAR_629 = 0 ; VAR_630 -> VAR_631 = VAR_632 -> VAR_633 . VAR_634 ; VAR_635 -> VAR_636 = VAR_637 -> VAR_638 . VAR_639 ; VAR_640 -> VAR_641 = VAR_642 -> VAR_643 . VAR_644 ; VAR_645 -> VAR_646 = VAR_647 -> VAR_648 ; VAR_649 -> VAR_650 = - 1 ; VAR_651 -> VAR_652 = 0 ; VAR_653 -> VAR_654 [ 0 ] = 0 ; VAR_655 -> VAR_656 [ 1 ] = 0 ; VAR_657 -> VAR_658 = 0 ; VAR_659 -> VAR_660 = 0 ; VAR_661 -> VAR_662 = 0 ; VAR_663 -> VAR_664 = 0 ; VAR_665 -> VAR_666 = VAR_667 -> VAR_668 ; VAR_669 -> VAR_670 = VAR_671 -> VAR_672 ; VAR_673 -> VAR_674 = VAR_675 -> VAR_676 ; VAR_677 -> VAR_678 = VAR_679 -> VAR_680 ; VAR_681 -> VAR_682 = VAR_683 -> VAR_684 ; VAR_685 -> VAR_686 = VAR_687 -> VAR_688 ; VAR_689 -> VAR_690 = VAR_691 -> VAR_692 + ( VAR_693 -> VAR_694 * VAR_695 ) ; VAR_696 -> VAR_697 = VAR_698 -> VAR_699 + VAR_700 -> VAR_701 * VAR_702 * VAR_703 ; VAR_704 -> VAR_705 = VAR_706 -> VAR_707 + VAR_708 -> VAR_709 * VAR_710 ; VAR_711 -> VAR_712 = VAR_713 -> VAR_714 ; VAR_715 -> VAR_716 = VAR_717 -> VAR_718 ; VAR_719 -> VAR_720 = VAR_721 -> VAR_722 + VAR_723 -> VAR_724 ; { if ( VAR_725 -> VAR_726 ) { VAR_727 -> VAR_728 = VAR_729 ; VAR_730 -> VAR_731 = VAR_732 ; } else { VAR_733 -> VAR_734 = VAR_735 ; VAR_736 -> VAR_737 = VAR_738 -> VAR_739 ; } } { TYPE_54 VAR_740 = VAR_741 -> VAR_742 -> VAR_743 ; TYPE_55 VAR_744 = VAR_745 -> VAR_746 ; TYPE_56 VAR_747 = ( ( ( VAR_748 -> VAR_749 ) >> 4 ) % ( VAR_750 -> VAR_751 >> VAR_752 ) ) ; TYPE_57 VAR_753 = ( VAR_754 ? ( VAR_755 << 4 ) : ( ( VAR_756 -> VAR_757 >> VAR_758 ) << 4 ) ) ; TYPE_58 VAR_759 = VAR_760 ? ( VAR_761 << 3 ) : ( ( VAR_762 -> VAR_763 >> VAR_764 ) << 3 ) ; VAR_765 -> VAR_766 . VAR_767 = VAR_768 -> VAR_769 . VAR_770 ; VAR_771 -> VAR_772 . VAR_773 = VAR_774 -> VAR_775 . VAR_776 ; VAR_777 -> VAR_778 . VAR_779 = VAR_780 -> VAR_781 . VAR_782 ; VAR_783 -> VAR_784 . VAR_785 = VAR_786 -> VAR_787 << VAR_788 ; VAR_789 -> VAR_790 . VAR_791 = VAR_792 -> VAR_793 << VAR_794 ; if ( VAR_795 ) { VAR_796 += VAR_797 -> VAR_798 ; VAR_799 += VAR_800 -> VAR_801 ; } VAR_802 -> VAR_803 . VAR_804 [ 0 ] = ( ( VAR_805 -> VAR_806 << 4 ) >> VAR_807 ) ; VAR_808 -> VAR_809 . VAR_810 [ 0 ] = ( ( VAR_811 -> VAR_812 << 4 ) >> VAR_813 ) ; VAR_814 -> VAR_815 . VAR_816 [ 1 ] = ( VAR_817 + ( VAR_818 << 1 ) + VAR_819 -> VAR_820 . VAR_821 * ( ( 15 << VAR_822 ) + VAR_823 ) ) ; VAR_824 -> VAR_825 . VAR_826 [ 1 ] = ( VAR_827 + ( VAR_828 << 2 ) + VAR_829 -> VAR_830 . VAR_831 * ( ( 15 << VAR_832 ) + VAR_833 ) ) ; METHOD_22 ( VAR_834 ) ; VAR_835 -> VAR_836 . VAR_837 = ( VAR_838 -> VAR_839 << 2 ) - 1 - ( VAR_840 << 2 ) ; VAR_841 -> VAR_842 . VAR_843 = ( ( VAR_844 -> VAR_845 >> VAR_846 ) - 1 ) << ( 4 + VAR_847 ) ; } if ( VAR_848 -> VAR_849 == VAR_850 ) { if ( ( VAR_851 -> VAR_852 ) || ( VAR_853 -> VAR_854 ) ) { METHOD_23 ( VAR_855 , VAR_856 , VAR_857 ) ; VAR_858 -> VAR_859 . VAR_860 = 1 ; } else { METHOD_24 ( VAR_861 ) ; } if ( VAR_862 -> VAR_863 ) { VAR_864 -> VAR_865 . VAR_866 = 1 ; } } else { METHOD_25 ( VAR_867 ) ; } VAR_868 -> VAR_869 . VAR_870 = VAR_871 -> VAR_872 ; VAR_873 -> VAR_874 . VAR_875 = VAR_876 -> VAR_877 ; VAR_878 -> VAR_879 = 1 ; VAR_880 -> VAR_881 = & VAR_882 -> VAR_883 ; if ( VAR_884 -> VAR_885 ) { METHOD_26 ( & VAR_886 -> VAR_887 , & VAR_888 -> VAR_889 , sizeof ( VAR_890 ) ) ; if ( VAR_891 -> VAR_892 >= 3 && VAR_893 -> VAR_894 ) { METHOD_27 ( & VAR_895 -> VAR_896 , & VAR_897 -> VAR_898 , sizeof ( VAR_899 ) ) ; VAR_900 -> VAR_901 = & VAR_902 -> VAR_903 ; } } METHOD_28 ( VAR_904 , & ( VAR_905 -> VAR_906 ) , & ( VAR_907 -> VAR_908 ) , VAR_909 -> VAR_910 , 0 ) ; VAR_911 -> VAR_912 = VAR_913 -> VAR_914 ; VAR_915 -> VAR_916 = 0 ; VAR_917 -> VAR_918 = 0 ; VAR_919 -> VAR_920 = 0 ; VAR_921 -> VAR_922 = VAR_923 -> VAR_924 ; METHOD_29 ( & VAR_925 -> VAR_926 ) ; return VAR_927 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; if ( METHOD_1 ( VAR_7 -> VAR_8 ) >= 100 ) return 0 ; VAR_9 = METHOD_2 ( sizeof ( VAR_10 ) ) ; VAR_11 = METHOD_3 ( VAR_12 , VAR_13 ) ; if ( VAR_14 == VAR_15 || VAR_16 == VAR_17 ) { if ( VAR_18 != VAR_19 ) METHOD_4 ( VAR_20 ) ; if ( VAR_21 != VAR_22 ) METHOD_5 ( VAR_23 ) ; METHOD_6 ( VAR_24 , VAR_25 ) ; return ( 0 ) ; } VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; METHOD_7 ( & ( VAR_34 -> VAR_35 ) , & ( VAR_36 -> VAR_37 -> VAR_38 ) , sizeof ( VAR_39 ) ) ; METHOD_8 ( & ( VAR_40 -> VAR_41 ) , & ( VAR_42 -> VAR_43 -> VAR_44 ) , sizeof ( VAR_45 ) ) ; VAR_46 -> VAR_47 = VAR_48 ; TYPE_4 TYPE_5 if ( VAR_49 ( TYPE_6 ( VAR_50 ) ) && ( VAR_51 -> VAR_52 == VAR_53 || VAR_54 -> VAR_55 == VAR_56 ) ) { METHOD_9 ( TYPE_7 ( VAR_57 ) , VAR_58 , sizeof ( VAR_59 -> VAR_60 ) , & VAR_61 -> VAR_62 ) ; } VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 = 0 ; METHOD_10 ( & ( VAR_68 -> VAR_69 -> VAR_70 ) , 0 , sizeof ( VAR_71 ) ) ; METHOD_11 ( & ( VAR_72 -> VAR_73 -> VAR_74 ) , 0 , sizeof ( VAR_75 ) ) ; if ( ! METHOD_12 ( VAR_76 ) ) { METHOD_13 ( VAR_77 , VAR_78 ) ;  METHOD_14 ( VAR_79 ) ;  METHOD_15 ( VAR_80 ) ;  return ( 0 ) ;  } if ( METHOD_16 ( VAR_81 -> VAR_82 , VAR_83 ) == VAR_84 ) { METHOD_17 ( VAR_85 , VAR_86 ) ;  METHOD_18 ( VAR_87 ) ;  METHOD_19 ( VAR_88 ) ;  return ( 0 ) ;  } return ( 1 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = METHOD_1 ( VAR_6 ) ;  struct STRUCT_OR_UNION_4 VAR_7 ;  METHOD_2 ( & VAR_8 , 0 , sizeof ( VAR_9 ) ) ; VAR_10 . VAR_11 = VAR_12 -> VAR_13 ; VAR_14 . VAR_15 = VAR_16 -> VAR_17 . VAR_18 . VAR_19 ; VAR_20 . VAR_21 = VAR_22 -> VAR_23 . VAR_24 . VAR_25 ; VAR_26 . VAR_27 = VAR_28 -> VAR_29 ; METHOD_3 ( VAR_30 , VAR_31 . VAR_32 ) ; if ( METHOD_4 ( & VAR_33 . VAR_34 ) & VAR_35 ) VAR_36 . VAR_37 = VAR_38 -> VAR_39 . VAR_40 . VAR_41 ; else VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; if ( VAR_46 -> VAR_47 && VAR_48 -> VAR_49 -> VAR_50 ) { struct STRUCT_OR_UNION_5 * VAR_51 = ( struct STRUCT_OR_UNION_6 * ) VAR_52 -> VAR_53 -> VAR_54 ; VAR_55 . VAR_56 = * VAR_57 -> VAR_58 ; } METHOD_5 ( "%s:skb:%p,len:%d,src:%pI6dst:%pI6\\n" , VAR_59 , VAR_60 ,  VAR_61 -> VAR_62 , & VAR_63 . VAR_64 , & VAR_65 . VAR_66 ) ;   METHOD_6 ( METHOD_7 ( VAR_67 ) , VAR_68 ) ;  if ( ! ( VAR_69 -> VAR_70 & VAR_71 ) ) VAR_72 -> VAR_73 = 1 ;  return METHOD_8 ( VAR_74 , VAR_75 , & VAR_76 , VAR_77 -> VAR_78 , VAR_79 -> VAR_80 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 ; TYPE_2 VAR_7 ;  if ( VAR_8 -> VAR_9 < 1 ) {  METHOD_1 ( "execbuf2with%dbuffers\\n" , VAR_10 -> VAR_11 ) ; return - VAR_12 ; } VAR_13 = METHOD_2 ( sizeof ( * VAR_14 ) * VAR_15 -> VAR_16 , VAR_17 | VAR_18 | VAR_19 ) ; if ( VAR_20 == VAR_21 ) VAR_22 = METHOD_3 ( sizeof ( * VAR_23 ) , VAR_24 -> VAR_25 ) ; if ( VAR_26 == VAR_27 ) { METHOD_4 ( "Failedtoallocateexeclistfor%dbuffers\\n" , VAR_28 -> VAR_29 ) ; return - VAR_30 ; } VAR_31 = METHOD_5 ( VAR_32 , ( struct STRUCT_OR_UNION_4 TYPE_3 * ) ( TYPE_4 ) VAR_33 -> VAR_34 , sizeof ( * VAR_35 ) * VAR_36 -> VAR_37 ) ; if ( VAR_38 != 0 ) { METHOD_6 ( "copy%dexecentriesfailed%d\\n" , VAR_39 -> VAR_40 , VAR_41 ) ; METHOD_7 ( VAR_42 ) ; return - VAR_43 ; } VAR_44 = METHOD_8 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; if ( ! VAR_50 ) { VAR_51 = METHOD_9 ( ( struct STRUCT_OR_UNION_5 TYPE_5 * ) ( TYPE_6 ) VAR_52 -> VAR_53 , VAR_54 , sizeof ( * VAR_55 ) * VAR_56 -> VAR_57 ) ; if ( VAR_58 ) { VAR_59 = - VAR_60 ; METHOD_10 ( "failedtocopy%dexecentries" "backtouser(%d)\\n" , VAR_61 -> VAR_62 , VAR_63 ) ; } } METHOD_11 ( VAR_64 ) ; return VAR_65 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; const TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 = ( ! VAR_8 && ! VAR_9 ) ; VAR_10 = METHOD_1 ( VAR_11 , 1 , & VAR_12 ) ; if ( VAR_13 < 0 || VAR_14 < 0 ) return METHOD_2 ( VAR_15 , "Invalidrequesttounpackwithoffsetof%dandlimitof%d." , VAR_16 , VAR_17 ) ; else if ( VAR_18 > VAR_19 ) return METHOD_3 ( VAR_20 , "Startoffset%dgreaterthaninputlength%d." , VAR_21 , VAR_22 ) ; if ( VAR_23 ) VAR_24 = VAR_25 ; METHOD_4 ( & VAR_26 , ( const unsigned TYPE_9 * ) VAR_27 + VAR_28 , VAR_29 - VAR_30 ) ; for ( VAR_31 = 0 ; VAR_32 . VAR_33 > 0 && VAR_34 < VAR_35 ; VAR_36 ++ ) { METHOD_5 ( VAR_37 , & VAR_38 ) ; if ( VAR_39 . VAR_40 == VAR_41 ) { return METHOD_6 ( VAR_42 , "Missingbytesininput." ) ; } else if ( VAR_43 . VAR_44 == VAR_45 ) { return METHOD_7 ( VAR_46 , "Baddataformatininput." ) ; } } if ( ! VAR_47 ) { TYPE_10 VAR_48 = VAR_49 - VAR_50 . VAR_51 ;  METHOD_8 ( VAR_52 , VAR_53 . VAR_54 == 0 ? - 1 : VAR_55 ) ;  METHOD_9 ( VAR_56 , 2 ) ; VAR_57 += 1 ; } return VAR_58 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ,  const TYPE_1 * VAR_1 )  { unsigned TYPE_2 VAR_2 ; TYPE_3 * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 = METHOD_1 ( STRUCT_OR_UNION_2 , "optional" ) != VAR_6 ; VAR_7 = METHOD_2 ( STRUCT_OR_UNION_3 , VAR_8 ) ; if ( VAR_9 < 0 ) return VAR_10 ? 0 : - 1 ; METHOD_3 ( STRUCT_OR_UNION_4 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_5 -> VAR_11 , & VAR_12 , & VAR_13 ) < 0 ) { METHOD_5 ( VAR_14 ) ; return - 1 ; } VAR_15 = METHOD_6 ( STRUCT_OR_UNION_6 -> VAR_16 , VAR_17 , STRUCT_OR_UNION_7 -> VAR_18 ,  VAR_19 , VAR_20 , VAR_21 ) ;  METHOD_7 ( VAR_22 ) ; return VAR_23 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; register TYPE_5 VAR_4 ; register TYPE_6 * VAR_5 ; register unsigned TYPE_7 * VAR_6 ; TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 ; unsigned TYPE_10 * VAR_10 ; METHOD_1 ( VAR_11 != ( const TYPE_11 * ) VAR_12 ) ; METHOD_2 ( VAR_13 -> VAR_14 == VAR_15 ) ; if ( VAR_16 -> VAR_17 != VAR_18 ) ( TYPE_12 ) METHOD_3 ( VAR_19 , METHOD_4 ( ) , "%s" , VAR_20 -> VAR_21 ) ; METHOD_5 ( VAR_22 != ( TYPE_13 * ) VAR_23 ) ; METHOD_6 ( VAR_24 -> VAR_25 == VAR_26 ) ; VAR_27 = METHOD_7 ( VAR_28 ) ; VAR_29 = METHOD_8 ( VAR_30 , VAR_31 , VAR_32 , VAR_33 ) ; if ( VAR_34 == VAR_35 ) { VAR_36 = METHOD_9 ( VAR_37 ) ; return ( ( TYPE_14 * ) VAR_38 ) ; } VAR_39 -> VAR_40 = 256 ; VAR_41 -> VAR_42 = 240 ; VAR_43 -> VAR_44 = 8 ;  VAR_45 = ( unsigned TYPE_15 * ) METHOD_10 ( VAR_46 -> VAR_47 , 3 *  sizeof ( * VAR_48 ) ) ; if ( VAR_49 == ( unsigned TYPE_16 * ) VAR_50 ) METHOD_11 ( VAR_51 , "MemoryAllocationFailed" ) ; VAR_52 = ( TYPE_17 ) ( 3 * VAR_53 -> VAR_54 ) ; for ( VAR_55 = 0 ; VAR_56 < ( TYPE_18 ) VAR_57 -> VAR_58 ; VAR_59 ++ ) { VAR_60 = METHOD_12 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( ( TYPE_19 ) VAR_64 != VAR_65 ) METHOD_13 ( VAR_66 , "UnableToReadImageData" ) ; VAR_67 = VAR_68 ; VAR_69 = METHOD_14 ( VAR_70 , 0 , VAR_71 , VAR_72 -> VAR_73 , 1 , VAR_74 ) ; if ( VAR_75 == ( TYPE_20 * ) VAR_76 ) break ; for ( VAR_77 = 0 ; VAR_78 < ( TYPE_21 ) VAR_79 -> VAR_80 ; VAR_81 ++ ) { METHOD_15 ( VAR_82 , METHOD_16 ( 4 * * VAR_83 ++ ) ) ; METHOD_17 ( VAR_84 , METHOD_18 ( 4 * * VAR_85 ++ ) ) ; METHOD_19 ( VAR_86 , METHOD_20 ( 4 * * VAR_87 ++ ) ) ; METHOD_21 ( VAR_88 , VAR_89 ) ; VAR_90 ++ ; } if ( METHOD_22 ( VAR_91 , VAR_92 ) == VAR_93 ) break ; if ( METHOD_23 ( VAR_94 , VAR_95 , VAR_96 , VAR_97 -> VAR_98 ) == VAR_99 ) break ; } VAR_100 = ( unsigned TYPE_22 * ) METHOD_24 ( VAR_101 ) ; if ( METHOD_25 ( VAR_102 ) != VAR_103 ) METHOD_26 ( VAR_104 , VAR_105 , "UnexpectedEndOfFile" , VAR_106 -> VAR_107 ) ; ( TYPE_23 ) METHOD_27 ( VAR_108 ) ; return ( METHOD_28 ( VAR_109 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 ) {  TYPE_1 VAR_2 , VAR_3 ;  TYPE_2 VAR_4 = 0 ;  const TYPE_3 TYPE_4 * VAR_5 ;  TYPE_5 * VAR_6 ; VAR_7 = ( const TYPE_6 TYPE_7 * ) VAR_8 -> VAR_9 -> VAR_10 ;  METHOD_1 ( * VAR_11 , "argc=%d" , VAR_12 -> VAR_13 . VAR_14 ) ;   VAR_15 = METHOD_2 ( VAR_16 + 1 , VAR_17 ) ;   if ( ! VAR_18 ) {  METHOD_3 ( "outofmemoryforargvstring" ) ; return ; }  for ( VAR_19 = 0 ; VAR_20 < VAR_21 -> VAR_22 . VAR_23 ; VAR_24 ++ ) {  VAR_25 = METHOD_4 ( VAR_26 , VAR_27 , VAR_28 , & VAR_29 , VAR_30 , VAR_31 ) ; if ( VAR_32 <= 0 ) break ; VAR_33 += VAR_34 ; } METHOD_5 ( VAR_35 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 TYPE_8 VAR_6 ; TYPE_9 VAR_7 ; METHOD_1 ( VAR_8 ) ; if ( VAR_9 ) METHOD_2 ( VAR_10 , 0755 ) ;  VAR_11 = METHOD_3 ( VAR_12 , VAR_13 | VAR_14 | VAR_15 | VAR_16 , VAR_17 > 0 ? VAR_18 : 0644 ) ;  if ( VAR_19 < 0 ) return - VAR_20 ; if ( VAR_21 != VAR_22 ) { VAR_23 = METHOD_4 ( VAR_24 , VAR_25 ) ; if ( VAR_26 < 0 ) return - VAR_27 ; } if ( VAR_28 != VAR_29 || VAR_30 != VAR_31 ) { VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 < 0 ) return - VAR_37 ; } if ( VAR_38 != VAR_39 ) { struct STRUCT_OR_UNION_0 VAR_40 [ 2 ] ; METHOD_6 ( & VAR_41 [ 0 ] , VAR_42 ) ; VAR_43 [ 1 ] = VAR_44 [ 0 ] ; VAR_45 = METHOD_7 ( VAR_46 , VAR_47 ) ; } else VAR_48 = METHOD_8 ( VAR_49 , VAR_50 ) ; if ( VAR_51 < 0 ) return - VAR_52 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 * * VAR_5 ) {  TYPE_6 VAR_6 ;   TYPE_7 VAR_7 [ VAR_8 ] ;  TYPE_8 VAR_9 [ VAR_10 ] ; TYPE_9 VAR_11 ; TYPE_10 VAR_12 [ 13 ] ; if ( METHOD_1 ( VAR_13 -> VAR_14 , VAR_15 , VAR_16 , VAR_17 ) == - 1 ) { return VAR_18 ; } if ( METHOD_2 ( VAR_19 , VAR_20 , VAR_21 -> VAR_22 ) == VAR_23 ) { * VAR_24 = METHOD_3 ( VAR_25 -> VAR_26 , VAR_27 ) ; if ( * VAR_28 == 0 ) { * VAR_29 = VAR_30 ; } return VAR_31 ; }  VAR_32 = METHOD_4 ( VAR_33 , VAR_34 , VAR_35 , & VAR_36 ,  VAR_37 , VAR_38 , VAR_39 ) ;  if ( VAR_40 == - 1 )  return VAR_41 ; if ( ! METHOD_5 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 ) ) return VAR_51 ; return VAR_52 ; }
VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )  {  if ( ! STRUCT_OR_UNION_2 -> VAR_1 ) { TYPE_1 VAR_2 = METHOD_1 ( STRUCT_OR_UNION_3 ) ;  TYPE_2 VAR_3 ;  STRUCT_OR_UNION_4 -> VAR_4 = METHOD_2 ( VAR_5 ) ; VAR_6 = METHOD_3 ( VAR_7 ) ; if ( STRUCT_OR_UNION_5 -> VAR_8 - VAR_9 > STRUCT_OR_UNION_6 -> VAR_10 ) STRUCT_OR_UNION_7 -> VAR_11 = STRUCT_OR_UNION_8 -> VAR_12 - VAR_13 ; METHOD_4 ( STRUCT_OR_UNION_9 , VAR_14 ) ; }  }
static TYPE_0 METHOD_0 ( const TYPE_1 VAR_0 , const unsigned TYPE_2 * VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , unsigned TYPE_5 * VAR_4 ) { VAR_5 if ( VAR_6 == 0 ) return ( VAR_7 ) ; VAR_8 -- METHOD_1 ( VAR_9 ) if ( ( ( TYPE_6 ) VAR_10 + VAR_11 ) > ( TYPE_7 ) VAR_12 ) return ( VAR_13 ) ; VAR_14 += VAR_15 TYPE_8 VAR_16 ; register TYPE_9 VAR_17 , VAR_18 ; TYPE_10 VAR_19 ; TYPE_11 VAR_20 ; VAR_21 = ( TYPE_12 ) VAR_22 ; for ( VAR_23 = 0 ; ( VAR_24 > 1 ) && ( VAR_25 < ( TYPE_13 ) VAR_26 ) ; ) { VAR_27 -- ; VAR_28 = ( TYPE_14 ) ( * VAR_29 ++ ) ; if ( VAR_30 == 128 ) continue ; if ( VAR_31 > 128 ) { VAR_32 = 256 - VAR_33 + 1 ; VAR_34 ; VAR_35 = ( * VAR_36 ++ ) ; for ( VAR_37 = 0 ; VAR_38 < ( TYPE_15 ) VAR_39 ; VAR_40 ++ ) { switch ( VAR_41 ) { case 1 : { METHOD_2 ( 8 ) ; * VAR_42 ++ = ( VAR_43 >> 7 ) & 0x01 ? 0U : 255U ; * VAR_44 ++ = ( VAR_45 >> 6 ) & 0x01 ? 0U : 255U ; * VAR_46 ++ = ( VAR_47 >> 5 ) & 0x01 ? 0U : 255U ; * VAR_48 ++ = ( VAR_49 >> 4 ) & 0x01 ? 0U : 255U ; * VAR_50 ++ = ( VAR_51 >> 3 ) & 0x01 ? 0U : 255U ; * VAR_52 ++ = ( VAR_53 >> 2 ) & 0x01 ? 0U : 255U ; * VAR_54 ++ = ( VAR_55 >> 1 ) & 0x01 ? 0U : 255U ; * VAR_56 ++ = ( VAR_57 >> 0 ) & 0x01 ? 0U : 255U ; break ; } case 2 : { METHOD_3 ( 4 ) ; * VAR_58 ++ = ( unsigned TYPE_16 ) ( ( VAR_59 >> 6 ) & 0x03 ) ; * VAR_60 ++ = ( unsigned TYPE_17 ) ( ( VAR_61 >> 4 ) & 0x03 ) ; * VAR_62 ++ = ( unsigned TYPE_18 ) ( ( VAR_63 >> 2 ) & 0x03 ) ; * VAR_64 ++ = ( unsigned TYPE_19 ) ( ( VAR_65 & 0x03 ) & 0x03 ) ; break ; } case 4 : { METHOD_4 ( 2 ) ; * VAR_66 ++ = ( unsigned TYPE_20 ) ( ( VAR_67 >> 4 ) & 0xff ) ; * VAR_68 ++ = ( unsigned TYPE_21 ) ( ( VAR_69 & 0x0f ) & 0xff ) ; break ; } default : { METHOD_5 ( 1 ) ; * VAR_70 ++ = ( unsigned TYPE_22 ) VAR_71 ; break ; } } } continue ; } VAR_72 ++ ; for ( VAR_73 = 0 ; VAR_74 < ( TYPE_23 ) VAR_75 ; VAR_76 ++ ) {  switch ( VAR_77 )  { case 1 : { METHOD_6 ( 8 ) ; * VAR_78 ++ = ( * VAR_79 >> 7 ) & 0x01 ? 0U : 255U ; * VAR_80 ++ = ( * VAR_81 >> 6 ) & 0x01 ? 0U : 255U ; * VAR_82 ++ = ( * VAR_83 >> 5 ) & 0x01 ? 0U : 255U ; * VAR_84 ++ = ( * VAR_85 >> 4 ) & 0x01 ? 0U : 255U ; * VAR_86 ++ = ( * VAR_87 >> 3 ) & 0x01 ? 0U : 255U ; * VAR_88 ++ = ( * VAR_89 >> 2 ) & 0x01 ? 0U : 255U ; * VAR_90 ++ = ( * VAR_91 >> 1 ) & 0x01 ? 0U : 255U ; * VAR_92 ++ = ( * VAR_93 >> 0 ) & 0x01 ? 0U : 255U ; break ; } case 2 : { METHOD_7 ( 4 ) ; * VAR_94 ++ = ( * VAR_95 >> 6 ) & 0x03 ; * VAR_96 ++ = ( * VAR_97 >> 4 ) & 0x03 ; * VAR_98 ++ = ( * VAR_99 >> 2 ) & 0x03 ; * VAR_100 ++ = ( * VAR_101 & 0x03 ) & 0x03 ; break ; } case 4 : { METHOD_8 ( 2 ) ; * VAR_102 ++ = ( * VAR_103 >> 4 ) & 0xff ; * VAR_104 ++ = ( * VAR_105 & 0x0f ) & 0xff ; break ; } default : { METHOD_9 ( 1 ) ; * VAR_106 ++ = ( * VAR_107 ) ; break ; } }  VAR_108 ;  VAR_109 ++ ; } } return ( VAR_110 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 ) {  struct STRUCT_OR_UNION_1 VAR_4 ;  unsigned TYPE_4 VAR_5 ; union STRUCT_OR_UNION_2 * VAR_6 ; TYPE_5 VAR_7 ;  VAR_8 . VAR_9 = VAR_10 ;  VAR_11 . VAR_12 = VAR_13 ; VAR_14 . VAR_15 = VAR_16 ; METHOD_1 ( & VAR_17 -> VAR_18 , VAR_19 ) ; VAR_20 = & VAR_21 -> VAR_22 ; switch ( VAR_23 -> VAR_24 -> VAR_25 ) { case VAR_26 :  METHOD_2 ( METHOD_3 ( & VAR_27 -> VAR_28 , VAR_29 -> VAR_30 . VAR_31 ) ,  & VAR_32 , sizeof ( VAR_33 ) ) ; break ; case VAR_34 :  METHOD_4 ( METHOD_5 ( & VAR_35 -> VAR_36 , VAR_37 -> VAR_38 . VAR_39 ) ,  & VAR_40 , sizeof ( VAR_41 ) ) ; break ; case VAR_42 :  METHOD_6 ( METHOD_7 ( & VAR_43 -> VAR_44 , VAR_45 -> VAR_46 . VAR_47 ) ,  & VAR_48 , sizeof ( VAR_49 ) ) ; break ; default : METHOD_8 ( ) ;  }  VAR_50 -> VAR_51 . VAR_52 ++ ; METHOD_9 ( & VAR_53 -> VAR_54 , VAR_55 ) ; METHOD_10 ( & VAR_56 -> VAR_57 , VAR_58 ) ; if ( VAR_59 ) METHOD_11 ( VAR_60 -> VAR_61 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 * VAR_6 = * VAR_7 ;  if ( ! ( VAR_8 & VAR_9 ) ||  ! ( VAR_10 -> VAR_11 & VAR_12 ) ) return ; for ( VAR_13 = 0 ; ( unsigned TYPE_8 ) VAR_14 [ VAR_15 ] == VAR_16 + 1 ; VAR_17 ++ ) ; if ( VAR_18 [ VAR_19 ] != '\\0' || VAR_20 != 255 ) return ; * VAR_21 = VAR_22 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 ; const struct STRUCT_OR_UNION_0 * VAR_6 ; const struct STRUCT_OR_UNION_1 * VAR_7 ; const struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; const TYPE_7 * VAR_8 , * VAR_9 ; const struct STRUCT_OR_UNION_4 * VAR_10 ; const struct STRUCT_OR_UNION_5 * VAR_11 ; const TYPE_8 * VAR_12 ; TYPE_9 VAR_13 ; const TYPE_10 * VAR_14 ; const struct STRUCT_OR_UNION_6 * VAR_15 ; TYPE_11 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_12 VAR_22 [ VAR_23 + 100 ] ; struct STRUCT_OR_UNION_7 VAR_24 [ 1 ] ; VAR_25 = ( const struct STRUCT_OR_UNION_8 * ) VAR_26 ; VAR_27 = ( const struct STRUCT_OR_UNION_9 * ) VAR_28 ; STRUCT_OR_UNION_10 = ( const struct STRUCT_OR_UNION_11 * ) VAR_29 ; VAR_30 = VAR_31 ; METHOD_1 ( VAR_32 -> VAR_33 ) ; switch ( VAR_34 -> VAR_35 ) { case VAR_36 : case VAR_37 : METHOD_2 ( VAR_38 -> VAR_39 ) ; ( TYPE_13 ) METHOD_3 ( VAR_40 , sizeof ( VAR_41 ) , "echo%s,id%u,seq%u" , VAR_42 -> VAR_43 == VAR_44 ? "request" : "reply" , METHOD_4 ( & VAR_45 -> VAR_46 ) , METHOD_5 ( & VAR_47 -> VAR_48 ) ) ; break ; case VAR_49 : METHOD_6 ( VAR_50 -> VAR_51 . VAR_52 ) ; switch ( VAR_53 -> VAR_54 ) { case VAR_55 : METHOD_7 ( VAR_56 -> VAR_57 . VAR_58 ) ; ( TYPE_14 ) METHOD_8 ( VAR_59 , sizeof ( VAR_60 ) , "%sprotocol%dunreachable" , METHOD_9 ( VAR_61 , & VAR_62 -> VAR_63 . VAR_64 ) , VAR_65 -> VAR_66 . VAR_67 ) ; break ; case VAR_68 : METHOD_10 ( VAR_69 -> VAR_70 . VAR_71 ) ; VAR_72 = & VAR_73 -> VAR_74 ; VAR_75 = METHOD_11 ( VAR_76 ) * 4 ; VAR_77 = ( const struct STRUCT_OR_UNION_12 * ) ( ( ( const TYPE_15 * ) VAR_78 ) + VAR_79 ) ; METHOD_12 ( VAR_80 -> VAR_81 ) ; VAR_82 = METHOD_13 ( & VAR_83 -> VAR_84 ) ; switch ( VAR_85 -> VAR_86 ) { case VAR_87 : ( TYPE_16 ) METHOD_14 ( VAR_88 , sizeof ( VAR_89 ) , "%stcpport%sunreachable" , METHOD_15 ( VAR_90 , & VAR_91 -> VAR_92 ) , METHOD_16 ( VAR_93 , VAR_94 ) ) ; break ; case VAR_95 : ( TYPE_17 ) METHOD_17 ( VAR_96 , sizeof ( VAR_97 ) , "%sudpport%sunreachable" , METHOD_18 ( VAR_98 , & VAR_99 -> VAR_100 ) , METHOD_19 ( VAR_101 , VAR_102 ) ) ; break ; default : ( TYPE_18 ) METHOD_20 ( VAR_103 , sizeof ( VAR_104 ) , "%sprotocol%dport%dunreachable" , METHOD_21 ( VAR_105 , & VAR_106 -> VAR_107 ) , VAR_108 -> VAR_109 , VAR_110 ) ; break ; } break ; case VAR_111 : { register const struct STRUCT_OR_UNION_13 * VAR_112 ; VAR_113 = ( const struct STRUCT_OR_UNION_14 * ) ( const TYPE_19 * ) & VAR_114 -> VAR_115 ; VAR_116 = METHOD_22 ( & VAR_117 -> VAR_118 ) ; if ( VAR_119 ) { ( TYPE_20 ) METHOD_23 ( VAR_120 , sizeof ( VAR_121 ) , "%sunreachable-needtofrag(mtu%d)" , METHOD_24 ( VAR_122 , & VAR_123 -> VAR_124 . VAR_125 ) , VAR_126 ) ; } else { ( TYPE_21 ) METHOD_25 ( VAR_127 , sizeof ( VAR_128 ) , "%sunreachable-needtofrag" , METHOD_26 ( VAR_129 , & VAR_130 -> VAR_131 . VAR_132 ) ) ; } } break ; default : VAR_133 = METHOD_27 ( VAR_134 , "%d%%sunreachable" , VAR_135 -> VAR_136 ) ; ( TYPE_22 ) METHOD_28 ( VAR_137 , sizeof ( VAR_138 ) , VAR_139 , METHOD_29 ( VAR_140 , & VAR_141 -> VAR_142 . VAR_143 ) ) ; break ; } break ; case VAR_144 : METHOD_30 ( VAR_145 -> VAR_146 . VAR_147 ) ; VAR_148 = METHOD_31 ( VAR_149 , "redirect-%d%%stonet%%s" , VAR_150 -> VAR_151 ) ; ( TYPE_23 ) METHOD_32 ( VAR_152 , sizeof ( VAR_153 ) , VAR_154 , METHOD_33 ( VAR_155 , & VAR_156 -> VAR_157 . VAR_158 ) , METHOD_34 ( VAR_159 , & VAR_160 -> VAR_161 ) ) ; break ; case VAR_162 : { register const struct STRUCT_OR_UNION_15 * VAR_163 ; register const struct STRUCT_OR_UNION_16 * VAR_164 ; TYPE_24 VAR_165 , VAR_166 , VAR_167 ; ( TYPE_25 ) METHOD_35 ( VAR_168 , sizeof ( VAR_169 ) , "routeradvertisement" ) ; VAR_170 = VAR_171 + METHOD_36 ( VAR_172 ) ; VAR_173 = ( const struct STRUCT_OR_UNION_17 * ) & VAR_174 -> VAR_175 ; METHOD_37 ( * VAR_176 ) ; ( TYPE_26 ) METHOD_38 ( VAR_177 , "lifetime" , sizeof ( VAR_178 ) - ( VAR_179 - VAR_180 ) ) ; VAR_181 = VAR_182 + METHOD_39 ( VAR_183 ) ; VAR_184 = METHOD_40 ( & VAR_185 -> VAR_186 ) ; if ( VAR_187 < 60 ) { ( TYPE_27 ) METHOD_41 ( VAR_188 , sizeof ( VAR_189 ) - ( VAR_190 - VAR_191 ) , "%u" , VAR_192 ) ; } else if ( VAR_193 < 60 * 60 ) { ( TYPE_28 ) METHOD_42 ( VAR_194 , sizeof ( VAR_195 ) - ( VAR_196 - VAR_197 ) , "%u:%02u" , VAR_198 / 60 , VAR_199 % 60 ) ; } else { ( TYPE_29 ) METHOD_43 ( VAR_200 , sizeof ( VAR_201 ) - ( VAR_202 - VAR_203 ) , "%u:%02u:%02u" , VAR_204 / 3600 , ( VAR_205 % 3600 ) / 60 , VAR_206 % 60 ) ; } VAR_207 = VAR_208 + METHOD_44 ( VAR_209 ) ; VAR_210 = VAR_211 -> VAR_212 ; ( TYPE_30 ) METHOD_45 ( VAR_213 , sizeof ( VAR_214 ) - ( VAR_215 - VAR_216 ) , "%d:" , VAR_217 ) ; VAR_218 = VAR_219 + METHOD_46 ( VAR_220 ) ; VAR_221 = VAR_222 -> VAR_223 ; if ( VAR_224 != 2 ) { ( TYPE_31 ) METHOD_47 ( VAR_225 , sizeof ( VAR_226 ) - ( VAR_227 - VAR_228 ) , "[size%d]" , VAR_229 ) ; break ; } VAR_230 = ( const struct STRUCT_OR_UNION_18 * ) & VAR_231 -> VAR_232 ; while ( VAR_233 -- > 0 ) { METHOD_48 ( * VAR_234 ) ; ( TYPE_32 ) METHOD_49 ( VAR_235 , sizeof ( VAR_236 ) - ( VAR_237 - VAR_238 ) , "{%s%u}" , METHOD_50 ( VAR_239 , & VAR_240 -> VAR_241 ) , METHOD_51 ( & VAR_242 -> VAR_243 ) ) ; VAR_244 = VAR_245 + METHOD_52 ( VAR_246 ) ; ++ VAR_247 ; } } break ; case VAR_248 : METHOD_53 ( VAR_249 -> VAR_250 . VAR_251 ) ; switch ( VAR_252 -> VAR_253 ) { case VAR_254 : VAR_255 = "timeexceededin-transit" ; break ; case VAR_256 : VAR_257 = "ipreassemblytimeexceeded" ; break ; default : ( TYPE_33 ) METHOD_54 ( VAR_258 , sizeof ( VAR_259 ) , "timeexceeded-%d" , VAR_260 -> VAR_261 ) ; break ; } break ; case VAR_262 : if ( VAR_263 -> VAR_264 ) ( TYPE_34 ) METHOD_55 ( VAR_265 , sizeof ( VAR_266 ) , "parameterproblem-code%d" , VAR_267 -> VAR_268 ) ; else { METHOD_56 ( VAR_269 -> VAR_270 ) ; ( TYPE_35 ) METHOD_57 ( VAR_271 , sizeof ( VAR_272 ) , "parameterproblem-octet%d" , VAR_273 -> VAR_274 ) ; } break ; case VAR_275 : METHOD_58 ( VAR_276 -> VAR_277 ) ; ( TYPE_36 ) METHOD_59 ( VAR_278 , sizeof ( VAR_279 ) , "addressmaskis0x%08x" , METHOD_60 ( & VAR_280 -> VAR_281 ) ) ; break ; case VAR_282 : METHOD_61 ( VAR_283 -> VAR_284 ) ; ( TYPE_37 ) METHOD_62 ( VAR_285 , sizeof ( VAR_286 ) , "timestampqueryid%useq%u" , METHOD_63 ( & VAR_287 -> VAR_288 ) , METHOD_64 ( & VAR_289 -> VAR_290 ) ) ; break ; case VAR_291 : METHOD_65 ( VAR_292 -> VAR_293 ) ; ( TYPE_38 ) METHOD_66 ( VAR_294 , sizeof ( VAR_295 ) , "timestampreplyid%useq%u:org%s" , METHOD_67 ( & VAR_296 -> VAR_297 ) , METHOD_68 ( & VAR_298 -> VAR_299 ) , METHOD_69 ( METHOD_70 ( & VAR_300 -> VAR_301 ) ) ) ; ( TYPE_39 ) METHOD_71 ( VAR_302 + METHOD_72 ( VAR_303 ) , sizeof ( VAR_304 ) - METHOD_73 ( VAR_305 ) , ",recv%s" , METHOD_74 ( METHOD_75 ( & VAR_306 -> VAR_307 ) ) ) ; ( TYPE_40 ) METHOD_76 ( VAR_308 + METHOD_77 ( VAR_309 ) , sizeof ( VAR_310 ) - METHOD_78 ( VAR_311 ) , ",xmit%s" , METHOD_79 ( METHOD_80 ( & VAR_312 -> VAR_313 ) ) ) ; break ; default : VAR_314 = METHOD_81 ( VAR_315 , "type-%d" , VAR_316 -> VAR_317 ) ; break ; } METHOD_82 ( ( VAR_318 , "ICMP%s,length%u" , VAR_319 , VAR_320 ) ) ; if ( VAR_321 -> VAR_322 && ! VAR_323 ) { TYPE_41 VAR_324 , VAR_325 ; if ( METHOD_83 ( * VAR_326 , VAR_327 ) ) { VAR_328 [ 0 ] . VAR_329 = ( const TYPE_42 * ) ( const TYPE_43 * ) VAR_330 ; VAR_331 [ 0 ] . VAR_332 = VAR_333 ; VAR_334 = METHOD_84 ( VAR_335 , 1 ) ; if ( VAR_336 != 0 ) { VAR_337 = METHOD_85 ( & VAR_338 -> VAR_339 ) ; METHOD_86 ( ( VAR_340 , "(wrongicmpcksum%x(->%x)!)" , VAR_341 , METHOD_87 ( VAR_342 , VAR_343 ) ) ) ; } } } if ( VAR_344 -> VAR_345 >= 1 && METHOD_88 ( VAR_346 -> VAR_347 ) ) { VAR_348 += 8 ; METHOD_89 ( ( VAR_349 , "\\n\\t" ) ) ; STRUCT_OR_UNION_19 = ( const struct STRUCT_OR_UNION_20 * ) VAR_350 ;  VAR_351 = VAR_352 -> VAR_353 ;  METHOD_90 ( VAR_354 , VAR_355 , METHOD_91 ( & STRUCT_OR_UNION_21 -> VAR_356 ) ) ; VAR_357 -> VAR_358 = VAR_359 ; } if ( VAR_360 -> VAR_361 >= 1 && VAR_362 > VAR_363 && METHOD_92 ( VAR_364 -> VAR_365 ) ) { METHOD_93 ( * VAR_366 ) ; if ( ! VAR_367 -> VAR_368 && METHOD_94 ( VAR_369 -> VAR_370 , VAR_371 - VAR_372 ) ) { VAR_373 [ 0 ] . VAR_374 = ( const TYPE_44 * ) ( const TYPE_45 * ) & VAR_375 -> VAR_376 ; VAR_377 [ 0 ] . VAR_378 = VAR_379 - VAR_380 ; if ( METHOD_95 ( VAR_381 , 1 ) ) { return ; } } METHOD_96 ( ( VAR_382 , "\\n\\tMPLSextensionv%u" , METHOD_97 ( * ( VAR_383 -> VAR_384 ) ) ) ) ; if ( METHOD_98 ( * ( VAR_385 -> VAR_386 ) ) != VAR_387 ) { METHOD_99 ( ( VAR_388 , "packetnotsupported" ) ) ; return ; } VAR_389 = VAR_390 - VAR_391 ; if ( METHOD_100 ( VAR_392 -> VAR_393 , VAR_394 ) ) { VAR_395 [ 0 ] . VAR_396 = ( const TYPE_46 * ) ( const TYPE_47 * ) & VAR_397 -> VAR_398 ; VAR_399 [ 0 ] . VAR_400 = VAR_401 ; METHOD_101 ( ( VAR_402 , ",checksum0x%04x(%scorrect),length%u" , METHOD_102 ( VAR_403 -> VAR_404 ) , METHOD_103 ( VAR_405 , 1 ) ? "in" : "" , VAR_406 ) ) ; } VAR_407 -= 4 ; VAR_408 = ( const TYPE_48 * ) VAR_409 -> VAR_410 ; while ( VAR_411 > sizeof ( struct STRUCT_OR_UNION_22 ) ) { VAR_412 = ( const struct STRUCT_OR_UNION_23 * ) VAR_413 ; METHOD_104 ( * VAR_414 ) ; VAR_415 = METHOD_105 ( VAR_416 -> VAR_417 ) ; VAR_418 = VAR_419 -> VAR_420 ; VAR_421 = VAR_422 -> VAR_423 ; VAR_424 += sizeof ( struct STRUCT_OR_UNION_24 ) ; METHOD_106 ( ( VAR_425 , "\\n\\t%sObject(%u),Class-Type:%u,length%u" , METHOD_107 ( VAR_426 , "unknown" , VAR_427 ) , VAR_428 , VAR_429 , VAR_430 ) ) ; VAR_431 -= sizeof ( struct STRUCT_OR_UNION_25 ) ; if ( ( VAR_432 == 0 ) || ( VAR_433 < sizeof ( struct STRUCT_OR_UNION_26 ) ) ) { return ; } VAR_434 -= sizeof ( struct STRUCT_OR_UNION_27 ) ; switch ( VAR_435 ) { case 1 : switch ( VAR_436 ) { case 1 : METHOD_108 ( * VAR_437 , 4 ) ; VAR_438 = METHOD_109 ( VAR_439 ) ; METHOD_110 ( ( VAR_440 , "\\n\\tlabel%u,exp%u" , METHOD_111 ( VAR_441 ) , METHOD_112 ( VAR_442 ) ) ) ; if ( METHOD_113 ( VAR_443 ) ) METHOD_114 ( ( VAR_444 , ",[S]" ) ) ; METHOD_115 ( ( VAR_445 , ",ttl%u" , METHOD_116 ( VAR_446 ) ) ) ; break ; default : METHOD_117 ( VAR_447 , VAR_448 , "\\n\\t" , VAR_449 ) ; } break ; case 2 : default : METHOD_118 ( VAR_450 , VAR_451 , "\\n\\t" , VAR_452 ) ; break ; } if ( VAR_453 < VAR_454 ) break ; VAR_455 -= VAR_456 ; VAR_457 += VAR_458 ; } } return ; VAR_459 : METHOD_119 ( ( VAR_460 , "[|icmp]" ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 ) {  struct STRUCT_OR_UNION_2 * VAR_1 ;  struct STRUCT_OR_UNION_3 * VAR_2 ; TYPE_2 VAR_3 , VAR_4 ; if ( VAR_5 & VAR_6 ) return - VAR_7 ; VAR_8 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; if ( ! METHOD_2 ( VAR_9 ) -> VAR_10 -> VAR_11 -> METHOD_3 ( METHOD_4 ( VAR_12 ) ) ) { METHOD_5 ( VAR_13 ) ; return 0 ; }  VAR_14 = METHOD_6 ( VAR_15 ) -> VAR_16 ;  if ( VAR_17 && VAR_18 -> VAR_19 && ( VAR_20 -> VAR_21 -> VAR_22 & ( ( 1 << VAR_23 ) | ( 1 << VAR_24 ) | ( 1 << VAR_25 ) ) ) ) VAR_26 = VAR_27 ; METHOD_7 ( & STRUCT_OR_UNION_5 -> VAR_28 ) ; VAR_29 = STRUCT_OR_UNION_6 -> VAR_30 & VAR_31 ; METHOD_8 ( & STRUCT_OR_UNION_7 -> VAR_32 ) ;  VAR_33 = ( VAR_34 != VAR_35 ) ;  METHOD_9 ( VAR_36 ) ; if ( ( ! VAR_37 && METHOD_10 ( STRUCT_OR_UNION_8 ) ) || ( ! VAR_38 && VAR_39 ) || ( VAR_40 && ! VAR_41 ) ) return 0 ; return 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 ) {  TYPE_2 * VAR_0 ; METHOD_1 ( VAR_1 , 1 ) ;  METHOD_2 ( VAR_2 [ VAR_3 ] ) ;  VAR_4 = VAR_5 . VAR_6 ;  VAR_7 . VAR_8 = VAR_9 ;  METHOD_3 ( & VAR_10 ) ; while ( VAR_11 ) { unsigned VAR_12 ; METHOD_4 ( VAR_13 , "Unbindingservice[%s]" , VAR_14 -> VAR_15 ) ; for ( VAR_16 = 0 ; VAR_17 < VAR_18 -> VAR_19 . VAR_20 ; ++ VAR_21 ) METHOD_5 ( VAR_22 , VAR_23 ) ; if ( VAR_24 -> VAR_25 && VAR_26 -> VAR_27 . VAR_28 ) { VAR_29 -> VAR_30 . VAR_31 = 0 ; }  if ( VAR_32 -> VAR_33 )  METHOD_6 ( VAR_34 -> VAR_35 , ( TYPE_3 ) METHOD_7 ( VAR_36 ) + VAR_37 -> VAR_38 + 1 ) ; METHOD_8 ( VAR_39 , "Service[%s]closed" , VAR_40 -> VAR_41 ) ;  {  TYPE_4 * VAR_42 = VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; METHOD_9 ( VAR_50 ) ; } } METHOD_10 ( VAR_51 [ VAR_52 ] ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * VAR_2 ) { VAR_3 3 unsigned TYPE_3 VAR_4 [ VAR_5 ] ; TYPE_4 * VAR_6 , * VAR_7 ; TYPE_5 VAR_8 ; VAR_9 * VAR_10 ; TYPE_6 VAR_11 ; const TYPE_7 * VAR_12 = VAR_13 ; METHOD_1 ( VAR_14 , 0 , sizeof ( * VAR_15 ) ) ; if ( ( VAR_16 = METHOD_2 ( VAR_17 , ',' ) ) != VAR_18 ) { * VAR_19 ++ = '\\0' ; if ( ( VAR_20 = METHOD_3 ( VAR_21 ) ) == VAR_22 ) { METHOD_4 ( VAR_23 , VAR_24 , "Unknownformat`%s\'" , VAR_25 ) ; return VAR_26 ; } VAR_27 = 0 ; while ( ( VAR_28 = METHOD_5 ( & VAR_29 , "," ) ) != VAR_30 ) { if ( * VAR_31 == '\\0' ) { METHOD_6 ( VAR_32 , VAR_33 , "Missingnumber" ) ; return VAR_34 ; }  VAR_35 [ VAR_36 ++ ] = ( unsigned TYPE_8 ) METHOD_7 ( & VAR_37 ) ;   if ( VAR_38 > VAR_39 ) {  METHOD_8 ( VAR_40 , VAR_41 , "Toomanyarguments" ) ; return VAR_42 ; } } if ( VAR_43 < 2 ) { METHOD_9 ( VAR_44 , VAR_45 , "Notenougharguments" ) ; return VAR_46 ; } VAR_47 = ( * VAR_48 ) ( VAR_49 , VAR_50 , & VAR_51 ) ; if ( VAR_52 != VAR_53 ) { METHOD_10 ( VAR_54 , VAR_55 , "%s" , VAR_56 ) ; return VAR_57 ; } } else { VAR_58 = ( TYPE_9 ) METHOD_11 ( & VAR_59 ) ; } * VAR_60 = VAR_61 ; return VAR_62 ; VAR_63 }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; unsigned TYPE_2 VAR_2 , VAR_3 ; unsigned TYPE_3 VAR_4 [ 2048 ] ; const unsigned TYPE_4 * VAR_5 ; enum VAR_6 VAR_7 ; struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 ; unsigned TYPE_5 VAR_10 [ VAR_11 ] ; unsigned TYPE_6 * VAR_12 ; unsigned TYPE_7 VAR_13 = 0 ; TYPE_8 VAR_14 ; struct STRUCT_OR_UNION_2 * VAR_15 = VAR_16 ; struct STRUCT_OR_UNION_3 * VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 -> VAR_20 , VAR_21 , sizeof ( VAR_22 ) ) ; if ( VAR_23 < 0 ) { if ( VAR_24 == VAR_25 || VAR_26 == VAR_27 || VAR_28 == VAR_29 ) return ; METHOD_2 ( VAR_30 , "(s=%d)processRequest():read():%m" , VAR_31 -> VAR_32 ) ; goto VAR_33 ; } if ( VAR_34 == 0 ) { METHOD_3 ( VAR_35 , "(s=%d)requestconnectionclosed" , VAR_36 -> VAR_37 ) ; goto VAR_38 ; } VAR_39 = METHOD_4 ( VAR_40 ) ; VAR_41 = VAR_42 [ 0 ] ; VAR_43 = VAR_44 + 1 ; METHOD_5 ( VAR_45 , VAR_46 , VAR_47 + VAR_48 ) ;  if ( VAR_49 + VAR_50 > VAR_51 + VAR_52 ) {  METHOD_6 ( VAR_53 , "badrequest(lengthencodingl=%un=%u)" , VAR_54 , ( unsigned ) VAR_55 ) ; goto VAR_56 ; } if ( VAR_57 == 0 && VAR_58 != VAR_59 && VAR_60 != VAR_61 && VAR_62 != VAR_63 ) { METHOD_7 ( VAR_64 , "badrequest(length=0,type=%d)" , VAR_65 ) ; goto VAR_66 ; } METHOD_8 ( VAR_67 , "(s=%d)requesttype=%dstr=\'%.*s\'" , VAR_68 -> VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ; switch ( VAR_73 ) { case VAR_74 : VAR_75 = VAR_76 ; METHOD_9 ( ( sizeof ( VAR_77 ) - 1 ) , VAR_78 ) ; METHOD_10 ( VAR_79 , VAR_80 , sizeof ( VAR_81 ) - 1 ) ; VAR_82 += ( sizeof ( VAR_83 ) - 1 ) ; if ( METHOD_11 ( VAR_84 , VAR_85 , VAR_86 - VAR_87 ) < 0 ) { METHOD_12 ( VAR_88 , "(s=%d)write:%m" , VAR_89 -> VAR_90 ) ; goto VAR_91 ; } break ; case VAR_92 : case VAR_93 : case VAR_94 : VAR_95 = VAR_96 + 1 ; while ( VAR_97 && ( VAR_98 < 255 ) ) { if ( VAR_99 -> VAR_100 < VAR_101 ) { METHOD_13 ( VAR_102 , "outdateddevice" ) ; } else { if ( VAR_103 -> VAR_104 [ VAR_105 ] . VAR_106 + VAR_107 -> VAR_108 [ VAR_109 ] . VAR_110 + VAR_111 -> VAR_112 [ VAR_113 ] . VAR_114 + 6 + ( VAR_115 - VAR_116 ) >= ( TYPE_9 ) sizeof ( VAR_117 ) ) break ; if ( ( VAR_118 == VAR_119 && 0 == METHOD_14 ( VAR_120 -> VAR_121 [ VAR_122 ] . VAR_123 , VAR_124 , VAR_125 ) ) || ( VAR_126 == VAR_127 && 0 == METHOD_15 ( VAR_128 -> VAR_129 [ VAR_130 ] . VAR_131 , VAR_132 , VAR_133 ) ) || ( VAR_134 == VAR_135 ) ) { VAR_136 = VAR_137 -> VAR_138 [ VAR_139 ] . VAR_140 ; METHOD_16 ( VAR_141 , VAR_142 ) ; METHOD_17 ( VAR_143 , VAR_144 -> VAR_145 [ VAR_146 ] . VAR_147 , VAR_148 -> VAR_149 [ VAR_150 ] . VAR_151 ) ; VAR_152 += VAR_153 -> VAR_154 [ VAR_155 ] . VAR_156 ; VAR_157 = VAR_158 -> VAR_159 [ VAR_160 ] . VAR_161 ; METHOD_18 ( VAR_162 , VAR_163 ) ; METHOD_19 ( VAR_164 , VAR_165 -> VAR_166 [ VAR_167 ] . VAR_168 , VAR_169 -> VAR_170 [ VAR_171 ] . VAR_172 ) ; VAR_173 += VAR_174 -> VAR_175 [ VAR_176 ] . VAR_177 ; VAR_178 = VAR_179 -> VAR_180 [ VAR_181 ] . VAR_182 ; METHOD_20 ( VAR_183 , VAR_184 ) ; METHOD_21 ( VAR_185 , VAR_186 -> VAR_187 [ VAR_188 ] . VAR_189 , VAR_190 -> VAR_191 [ VAR_192 ] . VAR_193 ) ; VAR_194 += VAR_195 -> VAR_196 [ VAR_197 ] . VAR_198 ; VAR_199 ++ ; } } VAR_200 = VAR_201 -> VAR_202 ; } for ( VAR_203 = VAR_204 . VAR_205 ; VAR_206 && ( VAR_207 < 255 ) ; VAR_208 = VAR_209 -> VAR_210 . VAR_211 ) { if ( METHOD_22 ( VAR_212 -> VAR_213 ) + METHOD_23 ( VAR_214 -> VAR_215 ) + METHOD_24 ( VAR_216 -> VAR_217 ) + 6 + ( VAR_218 - VAR_219 ) >= sizeof ( VAR_220 ) ) break ; if ( ( VAR_221 == VAR_222 && 0 == METHOD_25 ( VAR_223 -> VAR_224 , ( const TYPE_10 * ) VAR_225 , VAR_226 ) ) || ( VAR_227 == VAR_228 && 0 == METHOD_26 ( VAR_229 -> VAR_230 , ( const TYPE_11 * ) VAR_231 , VAR_232 ) ) || ( VAR_233 == VAR_234 ) ) { VAR_235 = METHOD_27 ( VAR_236 -> VAR_237 ) ; METHOD_28 ( VAR_238 , VAR_239 ) ; METHOD_29 ( VAR_240 , VAR_241 -> VAR_242 , VAR_243 ) ; VAR_244 += VAR_245 ; VAR_246 = METHOD_30 ( VAR_247 -> VAR_248 ) ; METHOD_31 ( VAR_249 , VAR_250 ) ; METHOD_32 ( VAR_251 , VAR_252 -> VAR_253 , VAR_254 ) ; VAR_255 += VAR_256 ; VAR_257 = METHOD_33 ( VAR_258 -> VAR_259 ) ; METHOD_34 ( VAR_260 , VAR_261 ) ; METHOD_35 ( VAR_262 , VAR_263 -> VAR_264 , VAR_265 ) ; VAR_266 += VAR_267 ; VAR_268 ++ ; } } VAR_269 [ 0 ] = VAR_270 ; METHOD_36 ( VAR_271 , "(s=%d)response:%ddevice%s" , VAR_272 -> VAR_273 , VAR_274 , ( VAR_275 > 1 ) ? "s" : "" ) ; if ( METHOD_37 ( VAR_276 , VAR_277 , VAR_278 - VAR_279 ) < 0 ) { METHOD_38 ( VAR_280 , "(s=%d)write:%m" , VAR_281 -> VAR_282 ) ; goto VAR_283 ; } break ; case VAR_284 : VAR_285 = METHOD_39 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( ! VAR_286 ) { METHOD_40 ( VAR_287 , "cannotallocatememory" ) ; goto VAR_288 ; } METHOD_41 ( VAR_289 , 0 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; if ( METHOD_42 ( VAR_290 , VAR_291 ) ) { METHOD_43 ( VAR_292 , "badrequest(stcontainsforbiddenchars)" ) ; goto VAR_293 ; } VAR_294 -> VAR_295 = METHOD_44 ( VAR_296 + 1 ) ; if ( ! VAR_297 -> VAR_298 ) { METHOD_45 ( VAR_299 , "cannotallocatememory" ) ; goto VAR_300 ; } METHOD_46 ( VAR_301 -> VAR_302 , VAR_303 , VAR_304 ) ; VAR_305 -> VAR_306 [ VAR_307 ] = '\\0' ; VAR_308 += VAR_309 ; if ( VAR_310 >= VAR_311 + VAR_312 ) { METHOD_47 ( VAR_313 , "badrequest(missingusn)" ) ; goto VAR_314 ; } METHOD_48 ( VAR_315 , VAR_316 , VAR_317 + VAR_318 ) ;  if ( VAR_319 + VAR_320 > VAR_321 + VAR_322 ) {  METHOD_49 ( VAR_323 , "badrequest(lengthencoding)" ) ; goto VAR_324 ; } if ( METHOD_50 ( VAR_325 , VAR_326 ) ) { METHOD_51 ( VAR_327 , "badrequest(usncontainsforbiddenchars)" ) ; goto VAR_328 ; } METHOD_52 ( VAR_329 , "usn=\'%.*s\'" , VAR_330 , VAR_331 ) ; VAR_332 -> VAR_333 = METHOD_53 ( VAR_334 + 1 ) ; if ( ! VAR_335 -> VAR_336 ) { METHOD_54 ( VAR_337 , "cannotallocatememory" ) ; goto VAR_338 ; } METHOD_55 ( VAR_339 -> VAR_340 , VAR_341 , VAR_342 ) ; VAR_343 -> VAR_344 [ VAR_345 ] = '\\0' ; VAR_346 += VAR_347 ; METHOD_56 ( VAR_348 , VAR_349 , VAR_350 + VAR_351 ) ;  if ( VAR_352 + VAR_353 > VAR_354 + VAR_355 ) {  METHOD_57 ( VAR_356 , "badrequest(lengthencoding)" ) ; goto VAR_357 ; } if ( METHOD_58 ( VAR_358 , VAR_359 ) ) { METHOD_59 ( VAR_360 , "badrequest(servercontainsforbiddenchars)" ) ; goto VAR_361 ; } METHOD_60 ( VAR_362 , "server=\'%.*s\'" , VAR_363 , VAR_364 ) ; VAR_365 -> VAR_366 = METHOD_61 ( VAR_367 + 1 ) ; if ( ! VAR_368 -> VAR_369 ) { METHOD_62 ( VAR_370 , "cannotallocatememory" ) ; goto VAR_371 ; } METHOD_63 ( VAR_372 -> VAR_373 , VAR_374 , VAR_375 ) ; VAR_376 -> VAR_377 [ VAR_378 ] = '\\0' ; VAR_379 += VAR_380 ; METHOD_64 ( VAR_381 , VAR_382 , VAR_383 + VAR_384 ) ;  if ( VAR_385 + VAR_386 > VAR_387 + VAR_388 ) {  METHOD_65 ( VAR_389 , "badrequest(lengthencoding)" ) ; goto VAR_390 ; } if ( METHOD_66 ( VAR_391 , VAR_392 ) ) { METHOD_67 ( VAR_393 , "badrequest(locationcontainsforbiddenchars)" ) ; goto VAR_394 ; } METHOD_68 ( VAR_395 , "location=\'%.*s\'" , VAR_396 , VAR_397 ) ; VAR_398 -> VAR_399 = METHOD_69 ( VAR_400 + 1 ) ; if ( ! VAR_401 -> VAR_402 ) { METHOD_70 ( VAR_403 , "cannotallocatememory" ) ; goto VAR_404 ; } METHOD_71 ( VAR_405 -> VAR_406 , VAR_407 , VAR_408 ) ; VAR_409 -> VAR_410 [ VAR_411 ] = '\\0' ; for ( VAR_412 = VAR_413 . VAR_414 ; VAR_415 ; VAR_416 = VAR_417 -> VAR_418 . VAR_419 ) { if ( 0 == METHOD_72 ( VAR_420 -> VAR_421 , VAR_422 -> VAR_423 ) && 0 == METHOD_73 ( VAR_424 -> VAR_425 , VAR_426 -> VAR_427 ) ) { METHOD_74 ( VAR_428 , "Servicealreadyinthelist.Updating..." ) ; METHOD_75 ( VAR_429 -> VAR_430 ) ; METHOD_76 ( VAR_431 -> VAR_432 ) ; METHOD_77 ( VAR_433 -> VAR_434 ) ; VAR_435 -> VAR_436 = VAR_437 -> VAR_438 ; METHOD_78 ( VAR_439 -> VAR_440 ) ; VAR_441 -> VAR_442 = VAR_443 -> VAR_444 ; METHOD_79 ( VAR_445 ) ; VAR_446 = VAR_447 ; return ; } } METHOD_80 ( & VAR_448 , VAR_449 , VAR_450 ) ; METHOD_81 ( VAR_451 , VAR_452 , VAR_453 ) ; VAR_454 = VAR_455 ; break ; case VAR_456 : VAR_457 [ 0 ] = '\\0' ; if ( METHOD_82 ( VAR_458 , VAR_459 , 1 ) < 0 ) { METHOD_83 ( VAR_460 , "(s=%d)write:%m" , VAR_461 -> VAR_462 ) ; goto VAR_463 ; } VAR_464 -> VAR_465 = 1 ; break ; default : METHOD_84 ( VAR_466 , "Unknownrequesttype%d" , VAR_467 ) ; VAR_468 [ 0 ] = '\\0' ; if ( METHOD_85 ( VAR_469 , VAR_470 , 1 ) < 0 ) { METHOD_86 ( VAR_471 , "(s=%d)write:%m" , VAR_472 -> VAR_473 ) ; goto VAR_474 ; } } return ; VAR_475 : if ( VAR_476 ) { METHOD_87 ( VAR_477 -> VAR_478 ) ; METHOD_88 ( VAR_479 -> VAR_480 ) ; METHOD_89 ( VAR_481 -> VAR_482 ) ; METHOD_90 ( VAR_483 -> VAR_484 ) ; METHOD_91 ( VAR_485 ) ; VAR_486 = VAR_487 ; } METHOD_92 ( VAR_488 -> VAR_489 ) ; VAR_490 -> VAR_491 = - 1 ; return ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  METHOD_1 ( VAR_2 , VAR_3 ) { if ( VAR_4 . VAR_5 != ( TYPE_3 * ) VAR_6 ) VAR_7 . VAR_8 = ( TYPE_4 * ) METHOD_2 ( VAR_9 . VAR_10 ) ; if ( VAR_11 != ( unsigned TYPE_5 * ) VAR_12 ) VAR_13 = ( unsigned TYPE_6 * ) METHOD_3 ( VAR_14 ) ; if ( VAR_15 != ( TYPE_7 * ) VAR_16 ) VAR_17 = ( TYPE_8 * ) METHOD_4 ( VAR_18 ) ; if ( VAR_19 != ( TYPE_9 * ) VAR_20 ) VAR_21 = ( TYPE_10 * ) METHOD_5 ( VAR_22 ) ; if ( VAR_23 != ( TYPE_11 * ) VAR_24 ) VAR_25 = ( TYPE_12 * ) METHOD_6 ( VAR_26 ) ; if ( VAR_27 != ( TYPE_13 * ) VAR_28 ) VAR_29 = ( TYPE_14 * ) METHOD_7 ( VAR_30 ) ; if ( VAR_31 -> VAR_32 != ( TYPE_15 * ) VAR_33 ) VAR_34 -> VAR_35 = ( TYPE_16 * ) METHOD_8 ( VAR_36 -> VAR_37 ) ; if ( VAR_38 != ( TYPE_17 * ) VAR_39 ) VAR_40 = ( TYPE_18 * ) METHOD_9 ( VAR_41 ) ; METHOD_10 ( ( VAR_42 ) , ( VAR_43 ) ) ; }  TYPE_19 VAR_44 [ VAR_45 ] , VAR_46 [ VAR_47 ] , VAR_48 [ VAR_49 ] , VAR_50 [ VAR_51 ] ; TYPE_20 VAR_52 ; TYPE_21 * VAR_53 ; TYPE_22 * VAR_54 ; TYPE_23 * VAR_55 , VAR_56 , * VAR_57 , * VAR_58 , * VAR_59 ; TYPE_24 VAR_60 , VAR_61 , VAR_62 ; TYPE_25 VAR_63 ; register unsigned TYPE_26 * VAR_64 ; register TYPE_27 VAR_65 ; TYPE_28 VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 , VAR_72 ; TYPE_29 VAR_73 , VAR_74 ; unsigned TYPE_30 * VAR_75 ; unsigned TYPE_31 VAR_76 , VAR_77 ; METHOD_11 ( VAR_78 != ( const TYPE_32 * ) VAR_79 ) ; METHOD_12 ( VAR_80 -> VAR_81 == VAR_82 ) ; if ( VAR_83 -> VAR_84 != VAR_85 ) ( TYPE_33 ) METHOD_13 ( VAR_86 , METHOD_14 ( ) , "%s" , VAR_87 -> VAR_88 ) ; METHOD_15 ( VAR_89 != ( TYPE_34 * ) VAR_90 ) ; METHOD_16 ( VAR_91 -> VAR_92 == VAR_93 ) ; VAR_94 = METHOD_17 ( VAR_95 , VAR_96 ) ; VAR_97 = METHOD_18 ( VAR_98 , VAR_99 , VAR_100 , VAR_101 ) ; if ( VAR_102 == VAR_103 ) { VAR_104 = METHOD_19 ( VAR_105 ) ; return ( ( TYPE_35 * ) VAR_106 ) ; } VAR_107 -> VAR_108 = 8UL ; VAR_109 -> VAR_110 = VAR_111 ; ( TYPE_36 ) METHOD_20 ( & VAR_112 , 0 , sizeof ( VAR_113 ) ) ; VAR_114 = ( unsigned TYPE_37 * ) VAR_115 ; VAR_116 = ( TYPE_38 * ) VAR_117 ; VAR_118 = ( TYPE_39 * ) VAR_119 ; VAR_120 = ( TYPE_40 * ) VAR_121 ; VAR_122 = ( TYPE_41 * ) VAR_123 ; VAR_124 = ( TYPE_42 * ) METHOD_21 ( sizeof ( * VAR_125 ) ) ; if ( VAR_126 == ( TYPE_43 * ) VAR_127 ) METHOD_22 ( VAR_128 , "MemoryAllocationFailed" ) ; ( TYPE_44 ) METHOD_23 ( VAR_129 , 0 , sizeof ( * VAR_130 ) ) ; VAR_131 = METHOD_24 ( VAR_132 , 128 , ( unsigned TYPE_45 * ) VAR_133 ) ; if ( VAR_134 != 128 ) METHOD_25 ( VAR_135 , "ImproperImageHeader" ) ; VAR_136 = METHOD_26 ( VAR_137 , 4 , ( unsigned TYPE_46 * ) VAR_138 ) ; if ( ( VAR_139 != 4 ) || ( METHOD_27 ( VAR_140 , "DICM" , 4 ) != 0 ) ) { VAR_141 = METHOD_28 ( VAR_142 , 0L , VAR_143 ) ; if ( VAR_144 < 0 ) METHOD_29 ( VAR_145 , "ImproperImageHeader" ) ; } ( TYPE_47 ) METHOD_30 ( VAR_146 , "MONOCHROME1" , VAR_147 ) ; VAR_148 . VAR_149 = 8 ; VAR_150 . VAR_151 = 1 ; VAR_152 . VAR_153 = 8 ; VAR_154 . VAR_155 = 0xffff ; VAR_156 . VAR_157 = 255UL ; VAR_158 . VAR_159 = 1 ; VAR_160 . VAR_161 = ( ~ 0UL ) ; VAR_162 . VAR_163 = 1.0 ; VAR_164 = ( unsigned TYPE_48 * ) VAR_165 ; VAR_166 = 0 ; VAR_167 [ 2 ] = '\\0' ; VAR_168 = VAR_169 ; VAR_170 = 0 ; VAR_171 = ( TYPE_49 * ) VAR_172 ; VAR_173 = ( TYPE_50 * ) VAR_174 ; VAR_175 = ( TYPE_51 * ) VAR_176 ; VAR_177 = ( TYPE_52 * ) VAR_178 ; VAR_179 = 0 ; VAR_180 = 1 ; VAR_181 = VAR_182 ; VAR_183 = VAR_184 ; VAR_185 = 0 ; while ( METHOD_31 ( VAR_186 ) < ( TYPE_53 ) METHOD_32 ( VAR_187 ) ) { for ( VAR_188 = 0 ; ( VAR_189 != 0x7FE0 ) || ( VAR_190 != 0x0010 ) ; ) { VAR_191 -> VAR_192 = ( TYPE_54 ) METHOD_33 ( VAR_193 ) ; VAR_194 = METHOD_34 ( VAR_195 ) ; VAR_196 = METHOD_35 ( VAR_197 ) ; if ( ( VAR_198 == 0xfffc ) && ( VAR_199 == 0xfffc ) ) break ; if ( ( VAR_200 != 0x0002 ) && ( VAR_201 -> VAR_202 == VAR_203 ) ) { VAR_204 = ( unsigned TYPE_55 ) ( ( VAR_205 << 8 ) | ( ( VAR_206 >> 8 ) & 0xFF ) ) ; VAR_207 = ( unsigned TYPE_56 ) ( ( VAR_208 << 8 ) | ( ( VAR_209 >> 8 ) & 0xFF ) ) ; } VAR_210 = 0 ; for ( VAR_211 = 0 ; VAR_212 [ VAR_213 ] . VAR_214 < 0xffff ; VAR_215 ++ ) if ( ( VAR_216 == VAR_217 [ VAR_218 ] . VAR_219 ) && ( VAR_220 == VAR_221 [ VAR_222 ] . VAR_223 ) ) break ; ( TYPE_57 ) METHOD_36 ( VAR_224 , VAR_225 [ VAR_226 ] . VAR_227 , VAR_228 ) ; VAR_229 = METHOD_37 ( VAR_230 , 2 , ( unsigned TYPE_58 * ) VAR_231 ) ; if ( VAR_232 != 2 ) METHOD_38 ( VAR_233 , "ImproperImageHeader" ) ; if ( ( VAR_234 == VAR_235 ) && ( VAR_236 != 0x0002 ) ) VAR_237 = ( METHOD_39 ( ( unsigned TYPE_59 ) * VAR_238 ) != VAR_239 ) && ( METHOD_40 ( ( unsigned TYPE_60 ) * ( VAR_240 + 1 ) ) != VAR_241 ) ? VAR_242 : VAR_243 ; VAR_244 = ( ( VAR_245 == 0x0002 ) && ( VAR_246 == VAR_247 ) ) || ( VAR_248 != VAR_249 ) ? VAR_250 : VAR_251 ; if ( ( VAR_252 != VAR_253 ) && ( METHOD_41 ( VAR_254 , "xs" , 2 ) == 0 ) ) ( TYPE_61 ) METHOD_42 ( VAR_255 , VAR_256 , VAR_257 ) ; if ( ( VAR_258 == VAR_259 ) || ( METHOD_43 ( VAR_260 , "!!" , 2 ) == 0 ) ) { VAR_261 = METHOD_44 ( VAR_262 , ( TYPE_62 ) - 2 , VAR_263 ) ; if ( VAR_264 < 0 ) METHOD_45 ( VAR_265 , "ImproperImageHeader" ) ; VAR_266 = 4 ; } else { VAR_267 = 2 ; if ( ( METHOD_46 ( VAR_268 , "OB" , 2 ) == 0 ) || ( METHOD_47 ( VAR_269 , "UN" , 2 ) == 0 ) || ( METHOD_48 ( VAR_270 , "OW" , 2 ) == 0 ) || ( METHOD_49 ( VAR_271 , "SQ" , 2 ) == 0 ) ) { ( TYPE_63 ) METHOD_50 ( VAR_272 ) ; VAR_273 = 4 ; } } VAR_274 = 0 ; if ( VAR_275 == 4 ) { if ( VAR_276 == 0x0002 ) VAR_277 = METHOD_51 ( VAR_278 ) ; else VAR_279 = METHOD_52 ( VAR_280 ) ; } else if ( VAR_281 == 2 ) { if ( VAR_282 == 0x0002 ) VAR_283 = METHOD_53 ( VAR_284 ) ; else VAR_285 = METHOD_54 ( VAR_286 ) ; } VAR_287 = 0 ; VAR_288 = 1 ; if ( VAR_289 != 0 ) { if ( ( METHOD_55 ( VAR_290 , "OW" , 2 ) == 0 ) || ( METHOD_56 ( VAR_291 , "SS" , 2 ) == 0 ) || ( METHOD_57 ( VAR_292 , "US" , 2 ) == 0 ) ) VAR_293 = 2 ; else if ( ( METHOD_58 ( VAR_294 , "FL" , 2 ) == 0 ) || ( METHOD_59 ( VAR_295 , "OF" , 2 ) == 0 ) || ( METHOD_60 ( VAR_296 , "SL" , 2 ) == 0 ) || ( METHOD_61 ( VAR_297 , "UL" , 2 ) == 0 ) ) VAR_298 = 4 ; else if ( METHOD_62 ( VAR_299 , "FD" , 2 ) == 0 ) VAR_300 = 8 ; else VAR_301 = 1 ; if ( VAR_302 != ~ 0 ) VAR_303 = ( TYPE_64 ) VAR_304 / VAR_305 ; else { VAR_306 = 0 ; VAR_307 = 0 ; } } if ( VAR_308 -> VAR_309 != VAR_310 ) { if ( VAR_311 == VAR_312 ) VAR_313 [ 0 ] = '\\0' ; for ( VAR_314 = 0 ; VAR_315 [ VAR_316 ] . VAR_317 != ( TYPE_65 * ) VAR_318 ; VAR_319 ++ ) if ( ( VAR_320 == VAR_321 [ VAR_322 ] . VAR_323 ) && ( VAR_324 == VAR_325 [ VAR_326 ] . VAR_327 ) ) break ; ( TYPE_66 ) METHOD_63 ( VAR_328 , "0x%04lX%4ld%s-%s(0x%04lx,0x%04lx)" , ( unsigned TYPE_67 ) VAR_329 -> VAR_330 , ( TYPE_68 ) VAR_331 , VAR_332 , VAR_333 , ( unsigned TYPE_69 ) VAR_334 , ( unsigned TYPE_70 ) VAR_335 ) ; if ( VAR_336 [ VAR_337 ] . VAR_338 != ( TYPE_71 * ) VAR_339 ) ( TYPE_72 ) METHOD_64 ( VAR_340 , "%s" , VAR_341 [ VAR_342 ] . VAR_343 ) ; ( TYPE_73 ) METHOD_65 ( VAR_344 , ":" ) ; } if ( ( VAR_345 == 0x7FE0 ) && ( VAR_346 == 0x0010 ) ) { if ( VAR_347 -> VAR_348 != VAR_349 ) ( TYPE_74 ) METHOD_66 ( VAR_350 , "\\n" ) ; break ; } VAR_351 = ( unsigned TYPE_75 * ) VAR_352 ; if ( ( VAR_353 == 1 ) && ( VAR_354 == 1 ) ) VAR_355 = METHOD_67 ( VAR_356 ) ; else if ( ( VAR_357 == 1 ) && ( VAR_358 == 2 ) ) { if ( VAR_359 == 0x0002 ) VAR_360 = METHOD_68 ( VAR_361 ) ; else VAR_362 = METHOD_69 ( VAR_363 ) ; } else if ( ( VAR_364 == 1 ) && ( VAR_365 == 4 ) ) { if ( VAR_366 == 0x0002 ) VAR_367 = METHOD_70 ( VAR_368 ) ; else VAR_369 = METHOD_71 ( VAR_370 ) ; } else if ( ( VAR_371 != 0 ) && ( VAR_372 != 0 ) ) { if ( VAR_373 > ( TYPE_76 ) METHOD_72 ( VAR_374 ) ) METHOD_73 ( VAR_375 , "InsufficientImageDataInFile" ) ; if ( ~ VAR_376 >= 1 ) VAR_377 = ( unsigned TYPE_77 * ) METHOD_74 ( VAR_378 + 1 , VAR_379 * sizeof ( * VAR_380 ) ) ; if ( VAR_381 == ( unsigned TYPE_78 * ) VAR_382 ) METHOD_75 ( VAR_383 , "MemoryAllocationFailed" ) ; VAR_384 = METHOD_76 ( VAR_385 , ( TYPE_79 ) VAR_386 * VAR_387 , VAR_388 ) ; if ( VAR_389 != ( TYPE_80 ) ( VAR_390 * VAR_391 ) ) { if ( VAR_392 -> VAR_393 != VAR_394 ) ( TYPE_81 ) METHOD_77 ( VAR_395 , "count=%dquantum=%d" "length=%dgroup=%d\\n" , ( TYPE_82 ) VAR_396 , ( TYPE_83 ) VAR_397 , ( TYPE_84 ) VAR_398 , ( TYPE_85 ) VAR_399 ) ; METHOD_78 ( VAR_400 , "InsufficientImageDataInFile" ) ; } VAR_401 [ VAR_402 * VAR_403 ] = '\\0' ; } if ( ( ( ( unsigned TYPE_86 ) VAR_404 << 16 ) | VAR_405 ) == 0xFFFEE0DD ) { if ( VAR_406 != ( unsigned TYPE_87 * ) VAR_407 ) VAR_408 = ( unsigned TYPE_88 * ) METHOD_79 ( VAR_409 ) ; continue ; } switch ( VAR_410 ) { case 0x0002 : { switch ( VAR_411 ) { case 0x0010 : { TYPE_89 VAR_412 [ VAR_413 ] ; if ( ( VAR_414 == 0 ) && ( VAR_415 == VAR_416 ) ) { VAR_417 = VAR_418 ; ( TYPE_90 ) METHOD_80 ( VAR_419 , ( TYPE_91 ) 0 , VAR_420 ) ; VAR_421 = 0 ; VAR_422 = 0 ; if ( VAR_423 -> VAR_424 != VAR_425 ) ( TYPE_92 ) METHOD_81 ( VAR_426 , "Corruptedimage-tryingexplicitformat\\n" ) ; break ; } * VAR_427 = '\\0' ; if ( VAR_428 != ( unsigned TYPE_93 * ) VAR_429 ) ( TYPE_94 ) METHOD_82 ( VAR_430 , ( TYPE_95 * ) VAR_431 , VAR_432 ) ; if ( VAR_433 -> VAR_434 != VAR_435 ) ( TYPE_96 ) METHOD_83 ( VAR_436 , "transfer_syntax=%s\\n" , ( const TYPE_97 * ) VAR_437 ) ; if ( METHOD_84 ( VAR_438 , "1.2.840.10008.1.2" , 17 ) == 0 ) { TYPE_98 VAR_439 , VAR_440 ; VAR_441 = 1 ; VAR_442 = 0 ; if ( METHOD_85 ( VAR_443 ) > 17 ) { VAR_444 = ( TYPE_99 ) METHOD_86 ( VAR_445 + 17 , ".%d.%d" , & VAR_446 , & VAR_447 ) ; if ( VAR_448 < 1 ) METHOD_87 ( VAR_449 , "ImproperImageHeader" ) ; } switch ( VAR_450 ) { case 1 : { VAR_451 -> VAR_452 = VAR_453 ; break ; } case 2 : { VAR_454 -> VAR_455 = VAR_456 ; break ; } case 4 : { if ( ( VAR_457 >= 80 ) && ( VAR_458 <= 81 ) ) VAR_459 -> VAR_460 = VAR_461 ; else if ( ( VAR_462 >= 90 ) && ( VAR_463 <= 93 ) ) VAR_464 -> VAR_465 = VAR_466 ; else VAR_467 -> VAR_468 = VAR_469 ; break ; } case 5 : { VAR_470 -> VAR_471 = VAR_472 ; break ; } } } break ; } default : break ; } break ; } case 0x0028 : { switch ( VAR_473 ) { case 0x0002 : { VAR_474 . VAR_475 = ( TYPE_100 ) VAR_476 ; if ( ( VAR_477 . VAR_478 == 0 ) || ( VAR_479 . VAR_480 > 4 ) ) METHOD_88 ( VAR_481 , "ImproperImageHeader" ) ; break ; } case 0x0004 : { if ( VAR_482 == ( unsigned TYPE_101 * ) VAR_483 ) break ; for ( VAR_484 = 0 ; VAR_485 < ( TYPE_102 ) METHOD_89 ( VAR_486 , VAR_487 - 1 ) ; VAR_488 ++ ) VAR_489 [ VAR_490 ] = ( TYPE_103 ) VAR_491 [ VAR_492 ] ; VAR_493 [ VAR_494 ] = '\\0' ; VAR_495 . VAR_496 = METHOD_90 ( VAR_497 , "MONOCHROME1" ) == 0 ? VAR_498 : VAR_499 ; break ; } case 0x0006 : { if ( VAR_500 == 1 ) VAR_501 -> VAR_502 = VAR_503 ; break ; } case 0x0008 : { if ( VAR_504 == ( unsigned TYPE_104 * ) VAR_505 ) break ; VAR_506 = METHOD_91 ( ( TYPE_105 * ) VAR_507 ) ; break ; } case 0x0010 : { VAR_508 = ( TYPE_106 ) VAR_509 ; break ; } case 0x0011 : { VAR_510 = ( TYPE_107 ) VAR_511 ; break ; } case 0x0100 : { VAR_512 . VAR_513 = ( TYPE_108 ) VAR_514 ; VAR_515 . VAR_516 = 1 ; if ( VAR_517 > 8 ) VAR_518 . VAR_519 = 2 ; VAR_520 . VAR_521 = VAR_522 . VAR_523 ; if ( ( VAR_524 . VAR_525 == 0 ) || ( VAR_526 . VAR_527 > 32 ) ) METHOD_92 ( VAR_528 , "ImproperImageHeader" ) ; VAR_529 . VAR_530 = ( 1UL << VAR_531 . VAR_532 ) - 1 ; VAR_533 -> VAR_534 = VAR_535 . VAR_536 ; break ; } case 0x0101 : { VAR_537 . VAR_538 = ( TYPE_109 ) VAR_539 ; VAR_540 . VAR_541 = 1 ; if ( VAR_542 . VAR_543 > 8 ) VAR_544 . VAR_545 = 2 ; VAR_546 . VAR_547 = VAR_548 . VAR_549 ; if ( ( VAR_550 . VAR_551 == 0 ) || ( VAR_552 . VAR_553 > 16 ) ) METHOD_93 ( VAR_554 , "ImproperImageHeader" ) ; VAR_555 . VAR_556 = ( 1UL << VAR_557 . VAR_558 ) - 1 ; VAR_559 . VAR_560 = ( TYPE_110 ) METHOD_94 ( VAR_561 . VAR_562 ) ; VAR_563 -> VAR_564 = VAR_565 . VAR_566 ; break ; } case 0x0102 : { break ; } case 0x0103 : { VAR_567 . VAR_568 = ( TYPE_111 ) VAR_569 ; break ; } case 0x1050 : { if ( VAR_570 != ( unsigned TYPE_112 * ) VAR_571 ) VAR_572 . VAR_573 = METHOD_95 ( ( TYPE_113 * ) VAR_574 , ( TYPE_114 * * ) VAR_575 ) ; break ; } case 0x1051 : { if ( VAR_576 != ( unsigned TYPE_115 * ) VAR_577 ) VAR_578 . VAR_579 = METHOD_96 ( ( TYPE_116 * ) VAR_580 , ( TYPE_117 * * ) VAR_581 ) ; break ; } case 0x1052 : { if ( VAR_582 != ( unsigned TYPE_118 * ) VAR_583 ) VAR_584 . VAR_585 = METHOD_97 ( ( TYPE_119 * ) VAR_586 , ( TYPE_120 * * ) VAR_587 ) ; break ; } case 0x1053 : { if ( VAR_588 != ( unsigned TYPE_121 * ) VAR_589 ) VAR_590 . VAR_591 = METHOD_98 ( ( TYPE_122 * ) VAR_592 , ( TYPE_123 * * ) VAR_593 ) ; break ; } case 0x1200 : case 0x3006 : { if ( VAR_594 == ( unsigned TYPE_124 * ) VAR_595 ) break ; VAR_596 = ( TYPE_125 ) ( VAR_597 / VAR_598 . VAR_599 ) ; VAR_600 = ( TYPE_126 ) VAR_601 ; if ( VAR_602 != ( TYPE_127 * ) VAR_603 ) VAR_604 = ( TYPE_128 * ) METHOD_99 ( VAR_605 ) ; VAR_606 = ( TYPE_129 * ) METHOD_100 ( METHOD_101 ( VAR_607 , 65536 ) , sizeof ( * VAR_608 ) ) ; if ( VAR_609 == ( TYPE_130 * ) VAR_610 ) METHOD_102 ( VAR_611 , "MemoryAllocationFailed" ) ; ( TYPE_131 ) METHOD_103 ( VAR_612 , 0 , METHOD_104 ( VAR_613 , 65536 ) * sizeof ( * VAR_614 ) ) ; for ( VAR_615 = 0 ; VAR_616 < ( TYPE_132 ) VAR_617 ; VAR_618 ++ ) if ( VAR_619 . VAR_620 == 1 ) VAR_621 [ VAR_622 ] = ( TYPE_133 ) VAR_623 [ VAR_624 ] ; else VAR_625 [ VAR_626 ] = ( TYPE_134 ) ( ( TYPE_135 * ) VAR_627 ) [ VAR_628 ] ; break ; } case 0x1201 : { unsigned TYPE_136 VAR_629 ; if ( VAR_630 == ( unsigned TYPE_137 * ) VAR_631 ) break ; VAR_632 = ( TYPE_138 ) ( VAR_633 / 2 ) ; VAR_634 = ( TYPE_139 ) VAR_635 ; if ( VAR_636 != ( TYPE_140 * ) VAR_637 ) VAR_638 = ( TYPE_141 * ) METHOD_105 ( VAR_639 ) ; VAR_640 = ( TYPE_142 * ) METHOD_106 ( METHOD_107 ( VAR_641 , 65536 ) , sizeof ( * VAR_642 ) ) ; if ( VAR_643 == ( TYPE_143 * ) VAR_644 ) METHOD_108 ( VAR_645 , "MemoryAllocationFailed" ) ; ( TYPE_144 ) METHOD_109 ( VAR_646 , 0 , METHOD_110 ( VAR_647 , 65536 ) * sizeof ( * VAR_648 ) ) ; VAR_649 = VAR_650 ; for ( VAR_651 = 0 ; VAR_652 < ( TYPE_145 ) VAR_653 ; VAR_654 ++ ) { if ( VAR_655 -> VAR_656 == VAR_657 ) VAR_658 = ( unsigned TYPE_146 ) ( ( * VAR_659 << 8 ) | * ( VAR_660 + 1 ) ) ; else VAR_661 = ( unsigned TYPE_147 ) ( * VAR_662 | ( * ( VAR_663 + 1 ) << 8 ) ) ; VAR_664 [ VAR_665 ] = ( TYPE_148 ) VAR_666 ; VAR_667 += 2 ; } break ; } case 0x1202 : { unsigned TYPE_149 VAR_668 ; if ( VAR_669 == ( unsigned TYPE_150 * ) VAR_670 ) break ; VAR_671 = ( TYPE_151 ) ( VAR_672 / 2 ) ; VAR_673 = ( TYPE_152 ) VAR_674 ; if ( VAR_675 != ( TYPE_153 * ) VAR_676 ) VAR_677 = ( TYPE_154 * ) METHOD_111 ( VAR_678 ) ; VAR_679 = ( TYPE_155 * ) METHOD_112 ( METHOD_113 ( VAR_680 , 65536 ) , sizeof ( * VAR_681 ) ) ; if ( VAR_682 == ( TYPE_156 * ) VAR_683 ) METHOD_114 ( VAR_684 , "MemoryAllocationFailed" ) ; ( TYPE_157 ) METHOD_115 ( VAR_685 , 0 , METHOD_116 ( VAR_686 , 65536 ) * sizeof ( * VAR_687 ) ) ; VAR_688 = VAR_689 ; for ( VAR_690 = 0 ; VAR_691 < ( TYPE_158 ) VAR_692 ; VAR_693 ++ ) { if ( VAR_694 -> VAR_695 == VAR_696 ) VAR_697 = ( unsigned TYPE_159 ) ( ( * VAR_698 << 8 ) | * ( VAR_699 + 1 ) ) ; else VAR_700 = ( unsigned TYPE_160 ) ( * VAR_701 | ( * ( VAR_702 + 1 ) << 8 ) ) ; VAR_703 [ VAR_704 ] = ( TYPE_161 ) VAR_705 ; VAR_706 += 2 ; } break ; } case 0x1203 : { unsigned TYPE_162 VAR_707 ; if ( VAR_708 == ( unsigned TYPE_163 * ) VAR_709 ) break ; VAR_710 = ( TYPE_164 ) ( VAR_711 / 2 ) ; VAR_712 = ( TYPE_165 ) VAR_713 ; if ( VAR_714 != ( TYPE_166 * ) VAR_715 ) VAR_716 = ( TYPE_167 * ) METHOD_117 ( VAR_717 ) ; VAR_718 = ( TYPE_168 * ) METHOD_118 ( METHOD_119 ( VAR_719 , 65536 ) , sizeof ( * VAR_720 ) ) ; if ( VAR_721 == ( TYPE_169 * ) VAR_722 ) METHOD_120 ( VAR_723 , "MemoryAllocationFailed" ) ; ( TYPE_170 ) METHOD_121 ( VAR_724 , 0 , METHOD_122 ( VAR_725 , 65536 ) * sizeof ( * VAR_726 ) ) ; VAR_727 = VAR_728 ; for ( VAR_729 = 0 ; VAR_730 < ( TYPE_171 ) VAR_731 ; VAR_732 ++ ) { if ( VAR_733 -> VAR_734 == VAR_735 ) VAR_736 = ( unsigned TYPE_172 ) ( ( * VAR_737 << 8 ) | * ( VAR_738 + 1 ) ) ; else VAR_739 = ( unsigned TYPE_173 ) ( * VAR_740 | ( * ( VAR_741 + 1 ) << 8 ) ) ; VAR_742 [ VAR_743 ] = ( TYPE_174 ) VAR_744 ; VAR_745 += 2 ; } break ; } default : break ; } break ; } case 0x2050 : { switch ( VAR_746 ) { case 0x0020 : { if ( ( VAR_747 != ( unsigned TYPE_175 * ) VAR_748 ) && ( METHOD_123 ( ( TYPE_176 * ) VAR_749 , "INVERSE" , 7 ) == 0 ) ) VAR_750 . VAR_751 = VAR_752 ; break ; } default : break ; } break ; } default : break ; } if ( VAR_753 != ( unsigned TYPE_177 * ) VAR_754 ) { TYPE_178 * VAR_755 ; for ( VAR_756 = 0 ; VAR_757 [ VAR_758 ] . VAR_759 != ( TYPE_179 * ) VAR_760 ; VAR_761 ++ ) if ( ( VAR_762 == VAR_763 [ VAR_764 ] . VAR_765 ) && ( VAR_766 == VAR_767 [ VAR_768 ] . VAR_769 ) ) break ; if ( VAR_770 [ VAR_771 ] . VAR_772 != ( TYPE_180 * ) VAR_773 ) { VAR_774 = METHOD_124 ( "dcm:" ) ; ( TYPE_181 ) METHOD_125 ( & VAR_775 , VAR_776 [ VAR_777 ] . VAR_778 ) ; for ( VAR_779 = 0 ; VAR_780 < ( TYPE_182 ) METHOD_126 ( VAR_781 , 4 ) ; VAR_782 ++ ) if ( METHOD_127 ( ( TYPE_183 ) VAR_783 [ VAR_784 ] ) == VAR_785 ) break ; if ( ( VAR_786 == ( TYPE_184 ) VAR_787 ) || ( VAR_788 > 4 ) ) { ( TYPE_185 ) METHOD_128 ( & VAR_789 , "" , "" ) ; ( TYPE_186 ) METHOD_129 ( VAR_790 , VAR_791 , ( TYPE_187 * ) VAR_792 , VAR_793 ) ; } VAR_794 = METHOD_130 ( VAR_795 ) ; } } if ( VAR_796 -> VAR_797 != VAR_798 ) { if ( VAR_799 == ( unsigned TYPE_188 * ) VAR_800 ) ( TYPE_189 ) METHOD_131 ( VAR_801 , "%d\\n" , VAR_802 ) ; else { for ( VAR_803 = 0 ; VAR_804 < ( TYPE_190 ) METHOD_132 ( VAR_805 , 4 ) ; VAR_806 ++ ) if ( METHOD_133 ( ( TYPE_191 ) VAR_807 [ VAR_808 ] ) == VAR_809 ) break ; if ( ( VAR_810 != ( TYPE_192 ) VAR_811 ) && ( VAR_812 <= 4 ) ) { TYPE_193 VAR_813 ; VAR_814 = 0 ; for ( VAR_815 = ( TYPE_194 ) VAR_816 - 1 ; VAR_817 >= 0 ; VAR_818 -- ) VAR_819 = ( 256 * VAR_820 + VAR_821 [ VAR_822 ] ) ; ( TYPE_195 ) METHOD_134 ( VAR_823 , "%d" , VAR_824 ) ; } else for ( VAR_825 = 0 ; VAR_826 < ( TYPE_196 ) VAR_827 ; VAR_828 ++ ) if ( METHOD_135 ( ( TYPE_197 ) VAR_829 [ VAR_830 ] ) != VAR_831 ) ( TYPE_198 ) METHOD_136 ( VAR_832 , "%c" , VAR_833 [ VAR_834 ] ) ; else ( TYPE_199 ) METHOD_137 ( VAR_835 , "%c" , '.' ) ; ( TYPE_200 ) METHOD_138 ( VAR_836 , "\\n" ) ; } } if ( VAR_837 != ( unsigned TYPE_201 * ) VAR_838 ) VAR_839 = ( unsigned TYPE_202 * ) METHOD_139 ( VAR_840 ) ; if ( METHOD_140 ( VAR_841 ) != VAR_842 ) { METHOD_141 ( VAR_843 , VAR_844 , "UnexpectedEndOfFile" , VAR_845 -> VAR_846 ) ; break ; } } if ( ( VAR_847 == 0xfffc ) && ( VAR_848 == 0xfffc ) ) { TYPE_203 * VAR_849 ; VAR_850 = METHOD_142 ( & VAR_851 ) ; if ( VAR_852 != ( TYPE_204 * ) VAR_853 ) VAR_854 = METHOD_143 ( VAR_855 ) ; break ; } if ( ( VAR_856 == 0 ) || ( VAR_857 == 0 ) ) METHOD_144 ( VAR_858 , "ImproperImageHeader" ) ; VAR_859 -> VAR_860 = ( TYPE_205 ) VAR_861 ; VAR_862 -> VAR_863 = ( TYPE_206 ) VAR_864 ; if ( VAR_865 . VAR_866 == 0xffff ) VAR_867 . VAR_868 = ( TYPE_207 ) ( VAR_869 . VAR_870 == 16 ? 1 : 0 ) ; if ( ( VAR_871 -> VAR_872 == VAR_873 ) || ( VAR_874 -> VAR_875 == VAR_876 ) ) { TYPE_208 * VAR_877 ; TYPE_209 * VAR_878 ; TYPE_210 VAR_879 ; for ( VAR_880 = 0 ; VAR_881 < ( TYPE_211 ) VAR_882 -> VAR_883 ; VAR_884 ++ ) if ( METHOD_145 ( VAR_885 ) == VAR_886 ) break ; ( TYPE_212 ) ( ( ( TYPE_213 ) METHOD_146 ( VAR_887 ) << 16 ) | METHOD_147 ( VAR_888 ) ) ; VAR_889 = ( TYPE_214 ) METHOD_148 ( VAR_890 ) ; if ( VAR_891 > ( TYPE_215 ) METHOD_149 ( VAR_892 ) ) METHOD_150 ( VAR_893 , "InsufficientImageDataInFile" ) ; VAR_894 -> VAR_895 = VAR_896 >> 2 ; if ( VAR_897 -> VAR_898 != 0 ) { if ( VAR_899 -> VAR_900 != ( TYPE_216 * ) VAR_901 ) VAR_902 -> VAR_903 = ( TYPE_217 * ) METHOD_151 ( VAR_904 -> VAR_905 ) ; VAR_906 -> VAR_907 = ( TYPE_218 * ) METHOD_152 ( VAR_908 -> VAR_909 , sizeof ( * VAR_910 -> VAR_911 ) ) ; if ( VAR_912 -> VAR_913 == ( TYPE_219 * ) VAR_914 ) METHOD_153 ( VAR_915 , "MemoryAllocationFailed" ) ; for ( VAR_916 = 0 ; VAR_917 < ( TYPE_220 ) VAR_918 -> VAR_919 ; VAR_920 ++ ) VAR_921 -> VAR_922 [ VAR_923 ] = ( TYPE_221 ) METHOD_154 ( VAR_924 ) ; VAR_925 = METHOD_155 ( VAR_926 ) ; for ( VAR_927 = 0 ; VAR_928 < ( TYPE_222 ) VAR_929 -> VAR_930 ; VAR_931 ++ ) VAR_932 -> VAR_933 [ VAR_934 ] += VAR_935 ; } VAR_936 = METHOD_156 ( VAR_937 ) ; METHOD_157 ( VAR_938 , ( TYPE_223 * ) VAR_939 , 0 ) ; VAR_940 = METHOD_158 ( ) ; for ( VAR_941 = 0 ; VAR_942 < ( TYPE_224 ) VAR_943 ; VAR_944 ++ ) { TYPE_225 VAR_945 [ VAR_946 ] ; const TYPE_226 * VAR_947 ; TYPE_227 * VAR_948 ; TYPE_228 * VAR_949 ; TYPE_229 VAR_950 ; unsigned TYPE_230 VAR_951 ; VAR_952 = ( ( unsigned TYPE_231 ) METHOD_159 ( VAR_953 ) << 16 ) | METHOD_160 ( VAR_954 ) ; VAR_955 = ( TYPE_232 ) METHOD_161 ( VAR_956 ) ;  if ( VAR_957 == 0xFFFEE0DD )  break ; if ( VAR_958 != 0xFFFEE000 ) { VAR_959 = METHOD_162 ( VAR_960 ) ; METHOD_163 ( VAR_961 , "ImproperImageHeader" ) ; } VAR_962 = ( TYPE_233 * ) VAR_963 ; VAR_964 = METHOD_164 ( VAR_965 ) ; if ( VAR_966 != - 1 ) VAR_967 = METHOD_165 ( VAR_968 , "wb" ) ; if ( VAR_969 == ( TYPE_234 * ) VAR_970 ) { ( TYPE_235 ) METHOD_166 ( VAR_971 ) ; METHOD_167 ( VAR_972 , VAR_973 , "UnableToCreateTemporaryFile" , VAR_974 ) ; break ; } for ( VAR_975 = VAR_976 ; VAR_977 != 0 ; VAR_978 -- ) { VAR_979 = METHOD_168 ( VAR_980 ) ; if ( VAR_981 == VAR_982 ) { METHOD_169 ( VAR_983 , VAR_984 , "UnexpectedEndOfFile" , VAR_985 -> VAR_986 ) ; break ; } if ( METHOD_170 ( VAR_987 , VAR_988 ) != VAR_989 ) break ; } ( TYPE_236 ) METHOD_171 ( VAR_990 ) ; if ( VAR_991 == VAR_992 ) break ; ( TYPE_237 ) METHOD_172 ( VAR_993 -> VAR_994 , VAR_995 , "jpeg:%s" , VAR_996 ) ; if ( VAR_997 -> VAR_998 == VAR_999 ) ( TYPE_238 ) METHOD_173 ( VAR_1000 -> VAR_1001 , VAR_1002 , "j2k:%s" , VAR_1003 ) ; VAR_1004 = METHOD_174 ( VAR_1005 , VAR_1006 ) ; if ( VAR_1007 != ( TYPE_239 * ) VAR_1008 ) { METHOD_175 ( VAR_1009 ) ; VAR_1010 = METHOD_176 ( VAR_1011 ) ; while ( VAR_1012 != ( const TYPE_240 * ) VAR_1013 ) { ( TYPE_241 ) METHOD_177 ( VAR_1014 , VAR_1015 , METHOD_178 ( VAR_1016 , VAR_1017 , VAR_1018 ) , VAR_1019 ) ; VAR_1020 = METHOD_179 ( VAR_1021 ) ; } METHOD_180 ( & VAR_1022 , VAR_1023 ) ; } ( TYPE_242 ) METHOD_181 ( VAR_1024 ) ; } VAR_1025 = METHOD_182 ( VAR_1026 ) ; if ( VAR_1027 -> VAR_1028 != ( TYPE_243 * ) VAR_1029 ) VAR_1030 -> VAR_1031 = ( TYPE_244 * ) METHOD_183 ( VAR_1032 -> VAR_1033 ) ; VAR_1034 = ( TYPE_245 * ) METHOD_184 ( VAR_1035 ) ; if ( VAR_1036 . VAR_1037 != ( TYPE_246 * ) VAR_1038 ) VAR_1039 . VAR_1040 = ( TYPE_247 * ) METHOD_185 ( VAR_1041 . VAR_1042 ) ; if ( VAR_1043 != ( TYPE_248 * ) VAR_1044 ) VAR_1045 = ( TYPE_249 * ) METHOD_186 ( VAR_1046 ) ; if ( VAR_1047 != ( TYPE_250 * ) VAR_1048 ) VAR_1049 = ( TYPE_251 * ) METHOD_187 ( VAR_1050 ) ; if ( VAR_1051 != ( TYPE_252 * ) VAR_1052 ) VAR_1053 = ( TYPE_253 * ) METHOD_188 ( VAR_1054 ) ; if ( VAR_1055 != ( TYPE_254 * ) VAR_1056 ) VAR_1057 = ( TYPE_255 * ) METHOD_189 ( VAR_1058 ) ; VAR_1059 = METHOD_190 ( VAR_1060 ) ; return ( METHOD_191 ( VAR_1061 ) ) ; } if ( VAR_1062 . VAR_1063 != ( 1UL * VAR_1064 ) ) { TYPE_256 VAR_1065 ; VAR_1066 = ( TYPE_257 ) ( METHOD_192 ( VAR_1067 . VAR_1068 ) + 1 ) ; if ( VAR_1069 > ( TYPE_258 ) METHOD_193 ( VAR_1070 ) ) METHOD_194 ( VAR_1071 , "InsufficientImageDataInFile" ) ; if ( VAR_1072 . VAR_1073 != ( TYPE_259 * ) VAR_1074 ) VAR_1075 . VAR_1076 = ( TYPE_260 * ) METHOD_195 ( VAR_1077 . VAR_1078 ) ; VAR_1079 . VAR_1080 = ( TYPE_261 * ) METHOD_196 ( METHOD_197 ( VAR_1081 , 256 ) , sizeof ( * VAR_1082 . VAR_1083 ) ) ; if ( VAR_1084 . VAR_1085 == ( TYPE_262 * ) VAR_1086 ) METHOD_198 ( VAR_1087 , "MemoryAllocationFailed" ) ; ( TYPE_263 ) METHOD_199 ( VAR_1088 . VAR_1089 , 0 , METHOD_200 ( VAR_1090 , 256 ) * sizeof ( * VAR_1091 . VAR_1092 ) ) ; VAR_1093 = METHOD_201 ( VAR_1094 . VAR_1095 ) ; for ( VAR_1096 = 0 ; VAR_1097 <= ( TYPE_264 ) METHOD_202 ( VAR_1098 . VAR_1099 ) ; VAR_1100 ++ ) VAR_1101 . VAR_1102 [ VAR_1103 ] = METHOD_203 ( ( TYPE_265 ) VAR_1104 , VAR_1105 ) ; } if ( VAR_1106 -> VAR_1107 == VAR_1108 ) { unsigned TYPE_266 VAR_1109 ; for ( VAR_1110 = 0 ; VAR_1111 < ( TYPE_267 ) VAR_1112 -> VAR_1113 ; VAR_1114 ++ ) { TYPE_268 VAR_1115 ; VAR_1116 = METHOD_204 ( VAR_1117 ) ; if ( VAR_1118 == VAR_1119 ) break ; } VAR_1120 = ( ( unsigned TYPE_269 ) METHOD_205 ( VAR_1121 ) << 16 ) | METHOD_206 ( VAR_1122 ) ; ( TYPE_270 ) VAR_1123 ; VAR_1124 = ( TYPE_271 ) METHOD_207 ( VAR_1125 ) ; if ( VAR_1126 > ( TYPE_272 ) METHOD_208 ( VAR_1127 ) ) METHOD_209 ( VAR_1128 , "InsufficientImageDataInFile" ) ; VAR_1129 -> VAR_1130 = VAR_1131 >> 2 ; if ( VAR_1132 -> VAR_1133 != 0 ) { if ( VAR_1134 -> VAR_1135 != ( TYPE_273 * ) VAR_1136 ) VAR_1137 -> VAR_1138 = ( TYPE_274 * ) METHOD_210 ( VAR_1139 -> VAR_1140 ) ; VAR_1141 -> VAR_1142 = ( TYPE_275 * ) METHOD_211 ( VAR_1143 -> VAR_1144 , sizeof ( * VAR_1145 -> VAR_1146 ) ) ; if ( VAR_1147 -> VAR_1148 == ( TYPE_276 * ) VAR_1149 ) METHOD_212 ( VAR_1150 , "MemoryAllocationFailed" ) ; for ( VAR_1151 = 0 ; VAR_1152 < ( TYPE_277 ) VAR_1153 -> VAR_1154 ; VAR_1155 ++ ) { VAR_1156 -> VAR_1157 [ VAR_1158 ] = ( TYPE_278 ) METHOD_213 ( VAR_1159 ) ; if ( METHOD_214 ( VAR_1160 ) != VAR_1161 ) break ; } VAR_1162 = METHOD_215 ( VAR_1163 ) + 8 ; for ( VAR_1164 = 0 ; VAR_1165 < ( TYPE_279 ) VAR_1166 -> VAR_1167 ; VAR_1168 ++ ) VAR_1169 -> VAR_1170 [ VAR_1171 ] += VAR_1172 ; } } for ( VAR_1173 = 0 ; VAR_1174 < ( TYPE_280 ) VAR_1175 ; VAR_1176 ++ ) { VAR_1177 -> VAR_1178 = ( TYPE_281 ) VAR_1179 ; VAR_1180 -> VAR_1181 = ( TYPE_282 ) VAR_1182 ; VAR_1183 -> VAR_1184 = VAR_1185 . VAR_1186 ; VAR_1187 = METHOD_216 ( VAR_1188 , VAR_1189 -> VAR_1190 , VAR_1191 -> VAR_1192 , VAR_1193 ) ; if ( VAR_1194 == VAR_1195 ) break ; VAR_1196 -> VAR_1197 = VAR_1198 ; ( TYPE_283 ) METHOD_217 ( VAR_1199 , VAR_1200 ) ; if ( ( VAR_1201 -> VAR_1202 == ( TYPE_284 * ) VAR_1203 ) && ( VAR_1204 . VAR_1205 == 1 ) ) { TYPE_285 VAR_1206 ; TYPE_286 VAR_1207 ; VAR_1208 = 1 ; if ( VAR_1209 == 0 ) VAR_1210 = VAR_1211 << VAR_1212 . VAR_1213 ; if ( METHOD_218 ( VAR_1214 , VAR_1215 , VAR_1216 ) == VAR_1217 ) METHOD_219 ( VAR_1218 , "MemoryAllocationFailed" ) ; if ( VAR_1219 != ( TYPE_287 * ) VAR_1220 ) for ( VAR_1221 = 0 ; VAR_1222 < ( TYPE_288 ) VAR_1223 ; VAR_1224 ++ ) { VAR_1225 = VAR_1226 [ VAR_1227 ] ; if ( ( VAR_1228 . VAR_1229 != ( TYPE_289 * ) VAR_1230 ) && ( VAR_1231 >= 0 ) && ( VAR_1232 <= ( TYPE_290 ) VAR_1233 . VAR_1234 ) ) VAR_1235 = ( TYPE_291 ) VAR_1236 . VAR_1237 [ VAR_1238 ] ; VAR_1239 -> VAR_1240 [ VAR_1241 ] . VAR_1242 = ( TYPE_292 ) VAR_1243 ; } if ( VAR_1244 != ( TYPE_293 * ) VAR_1245 ) for ( VAR_1246 = 0 ; VAR_1247 < ( TYPE_294 ) VAR_1248 ; VAR_1249 ++ ) { VAR_1250 = VAR_1251 [ VAR_1252 ] ; if ( ( VAR_1253 . VAR_1254 != ( TYPE_295 * ) VAR_1255 ) && ( VAR_1256 >= 0 ) && ( VAR_1257 <= ( TYPE_296 ) VAR_1258 . VAR_1259 ) ) VAR_1260 = ( TYPE_297 ) VAR_1261 . VAR_1262 [ VAR_1263 ] ; VAR_1264 -> VAR_1265 [ VAR_1266 ] . VAR_1267 = ( TYPE_298 ) VAR_1268 ; } if ( VAR_1269 != ( TYPE_299 * ) VAR_1270 ) for ( VAR_1271 = 0 ; VAR_1272 < ( TYPE_300 ) VAR_1273 ; VAR_1274 ++ ) { VAR_1275 = VAR_1276 [ VAR_1277 ] ; if ( ( VAR_1278 . VAR_1279 != ( TYPE_301 * ) VAR_1280 ) && ( VAR_1281 >= 0 ) && ( VAR_1282 <= ( TYPE_302 ) VAR_1283 . VAR_1284 ) ) VAR_1285 = ( TYPE_303 ) VAR_1286 . VAR_1287 [ VAR_1288 ] ; VAR_1289 -> VAR_1290 [ VAR_1291 ] . VAR_1292 = ( TYPE_304 ) VAR_1293 ; } if ( VAR_1294 != ( TYPE_305 * ) VAR_1295 ) for ( VAR_1296 = 0 ; VAR_1297 < ( TYPE_306 ) VAR_1298 ; VAR_1299 ++ ) { VAR_1300 = VAR_1301 [ VAR_1302 ] ; if ( ( VAR_1303 . VAR_1304 != ( TYPE_307 * ) VAR_1305 ) && ( VAR_1306 >= 0 ) && ( VAR_1307 <= ( TYPE_308 ) VAR_1308 . VAR_1309 ) ) VAR_1310 = ( TYPE_309 ) VAR_1311 . VAR_1312 [ VAR_1313 ] ; VAR_1314 -> VAR_1315 [ VAR_1316 ] . VAR_1317 = ( TYPE_310 ) VAR_1318 ; VAR_1319 -> VAR_1320 [ VAR_1321 ] . VAR_1322 = ( TYPE_311 ) VAR_1323 ; VAR_1324 -> VAR_1325 [ VAR_1326 ] . VAR_1327 = ( TYPE_312 ) VAR_1328 ; } } if ( VAR_1329 -> VAR_1330 == VAR_1331 ) { unsigned TYPE_313 VAR_1332 ; for ( VAR_1333 = 0 ; VAR_1334 < ( TYPE_314 ) VAR_1335 -> VAR_1336 ; VAR_1337 ++ ) { TYPE_315 VAR_1338 ; VAR_1339 = METHOD_220 ( VAR_1340 ) ; if ( VAR_1341 == VAR_1342 ) break ; } VAR_1343 = ( ( unsigned TYPE_316 ) METHOD_221 ( VAR_1344 ) << 16 ) | METHOD_222 ( VAR_1345 ) ; VAR_1346 -> VAR_1347 = ( TYPE_317 ) METHOD_223 ( VAR_1348 ) ; if ( ( VAR_1349 != 0xFFFEE000 ) || ( VAR_1350 -> VAR_1351 <= 64 ) || ( METHOD_224 ( VAR_1352 ) != VAR_1353 ) ) { if ( VAR_1354 -> VAR_1355 != ( TYPE_318 * ) VAR_1356 ) VAR_1357 -> VAR_1358 = ( TYPE_319 * ) METHOD_225 ( VAR_1359 -> VAR_1360 ) ; METHOD_226 ( VAR_1361 , "ImproperImageHeader" ) ; } VAR_1362 -> VAR_1363 = 0 ; VAR_1364 -> VAR_1365 = METHOD_227 ( VAR_1366 ) ; for ( VAR_1367 = 0 ; VAR_1368 < 15 ; VAR_1369 ++ ) VAR_1370 -> VAR_1371 [ VAR_1372 ] = ( TYPE_320 ) METHOD_228 ( VAR_1373 ) ; VAR_1374 -> VAR_1375 -= 64 ; if ( VAR_1376 -> VAR_1377 > 1 ) { VAR_1378 . VAR_1379 = 1 ; VAR_1380 . VAR_1381 = 8 ; if ( VAR_1382 -> VAR_1383 > 0 ) ( TYPE_321 ) METHOD_229 ( VAR_1384 , ( TYPE_322 ) VAR_1385 -> VAR_1386 [ 0 ] + VAR_1387 -> VAR_1388 [ 0 ] , VAR_1389 ) ; } } if ( ( VAR_1390 . VAR_1391 > 1 ) && ( VAR_1392 -> VAR_1393 == VAR_1394 ) ) { register TYPE_323 VAR_1395 ; register TYPE_324 * VAR_1396 ; TYPE_325 VAR_1397 ; for ( VAR_1398 = 0 ; VAR_1399 < ( TYPE_326 ) VAR_1400 . VAR_1401 ; VAR_1402 ++ ) { for ( VAR_1403 = 0 ; VAR_1404 < ( TYPE_327 ) VAR_1405 -> VAR_1406 ; VAR_1407 ++ ) { VAR_1408 = METHOD_230 ( VAR_1409 , 0 , VAR_1410 , VAR_1411 -> VAR_1412 , 1 , VAR_1413 ) ; if ( VAR_1414 == ( TYPE_328 * ) VAR_1415 ) break ; for ( VAR_1416 = 0 ; VAR_1417 < ( TYPE_329 ) VAR_1418 -> VAR_1419 ; VAR_1420 ++ ) { switch ( ( TYPE_330 ) VAR_1421 ) { case 0 : { METHOD_231 ( VAR_1422 , METHOD_232 ( ( unsigned TYPE_331 ) METHOD_233 ( VAR_1423 , VAR_1424 ) ) , VAR_1425 ) ; break ; } case 1 : { METHOD_234 ( VAR_1426 , METHOD_235 ( ( unsigned TYPE_332 ) METHOD_236 ( VAR_1427 , VAR_1428 ) ) , VAR_1429 ) ; break ; } case 2 : { METHOD_237 ( VAR_1430 , METHOD_238 ( ( unsigned TYPE_333 ) METHOD_239 ( VAR_1431 , VAR_1432 ) ) , VAR_1433 ) ; break ; } case 3 : { METHOD_240 ( VAR_1434 , METHOD_241 ( ( unsigned TYPE_334 ) METHOD_242 ( VAR_1435 , VAR_1436 ) ) , VAR_1437 ) ; break ; } default : break ; } VAR_1438 += METHOD_243 ( VAR_1439 ) ; } if ( METHOD_244 ( VAR_1440 , VAR_1441 ) == VAR_1442 ) break ; if ( VAR_1443 -> VAR_1444 == ( TYPE_335 * ) VAR_1445 ) { VAR_1446 = METHOD_245 ( VAR_1447 , VAR_1448 , ( TYPE_336 ) VAR_1449 , VAR_1450 -> VAR_1451 ) ; if ( VAR_1452 == VAR_1453 ) break ; } } } } else { const TYPE_337 * VAR_1454 ; VAR_1455 = METHOD_246 ( VAR_1456 , "dcm:display-range" ) ; if ( VAR_1457 != ( const TYPE_338 * ) VAR_1458 ) { if ( METHOD_247 ( VAR_1459 , "reset" ) == 0 ) VAR_1460 . VAR_1461 = 0 ; } VAR_1462 = METHOD_248 ( VAR_1463 , "dcm:window" ) ; if ( VAR_1464 != ( TYPE_339 * ) VAR_1465 ) { TYPE_340 VAR_1466 ; TYPE_341 VAR_1467 ; VAR_1468 = METHOD_249 ( VAR_1469 , & VAR_1470 ) ; if ( VAR_1471 & VAR_1472 ) VAR_1473 . VAR_1474 = VAR_1475 . VAR_1476 ; if ( VAR_1477 & VAR_1478 ) VAR_1479 . VAR_1480 = VAR_1481 . VAR_1482 ; VAR_1483 . VAR_1484 = VAR_1485 ; } VAR_1486 = METHOD_250 ( VAR_1487 , "dcm:rescale" ) ; if ( VAR_1488 != ( TYPE_342 * ) VAR_1489 ) VAR_1490 . VAR_1491 = METHOD_251 ( VAR_1492 ) ; if ( ( VAR_1493 . VAR_1494 != 0 ) && ( VAR_1495 . VAR_1496 == 0 ) ) VAR_1497 . VAR_1498 = VAR_1499 . VAR_1500 ; VAR_1501 = METHOD_252 ( VAR_1502 , & VAR_1503 , VAR_1504 , VAR_1505 , VAR_1506 ) ; if ( ( VAR_1507 != VAR_1508 ) && ( VAR_1509 -> VAR_1510 > 1 ) ) { if ( VAR_1511 -> VAR_1512 > 0 ) ( TYPE_343 ) METHOD_253 ( VAR_1513 , ( TYPE_344 ) VAR_1514 -> VAR_1515 [ 0 ] + VAR_1516 -> VAR_1517 [ 1 ] , VAR_1518 ) ; ( TYPE_345 ) METHOD_254 ( VAR_1519 , & VAR_1520 , VAR_1521 , VAR_1522 , VAR_1523 ) ; } } if ( METHOD_255 ( VAR_1524 , VAR_1525 ) != VAR_1526 ) ( TYPE_346 ) METHOD_256 ( VAR_1527 , VAR_1528 , VAR_1529 ) ; if ( METHOD_257 ( VAR_1530 ) != VAR_1531 ) { METHOD_258 ( VAR_1532 , VAR_1533 , "UnexpectedEndOfFile" , VAR_1534 -> VAR_1535 ) ; break ; } if ( VAR_1536 -> VAR_1537 != 0 ) if ( VAR_1538 -> VAR_1539 >= ( VAR_1540 -> VAR_1541 + VAR_1542 -> VAR_1543 - 1 ) ) break ; if ( VAR_1544 < ( TYPE_347 ) ( VAR_1545 - 1 ) ) { METHOD_259 ( VAR_1546 , VAR_1547 , VAR_1548 ) ; if ( METHOD_260 ( VAR_1549 ) == ( TYPE_348 * ) VAR_1550 ) { VAR_1551 = VAR_1552 ; break ; } VAR_1553 = METHOD_261 ( VAR_1554 ) ; VAR_1555 = METHOD_262 ( VAR_1556 , VAR_1557 , METHOD_263 ( VAR_1558 ) , METHOD_264 ( VAR_1559 ) ) ; if ( VAR_1560 == VAR_1561 ) break ; } } if ( METHOD_265 ( VAR_1562 ) < ( TYPE_349 ) METHOD_266 ( VAR_1563 ) ) { METHOD_267 ( VAR_1564 , VAR_1565 , VAR_1566 ) ; if ( METHOD_268 ( VAR_1567 ) == ( TYPE_350 * ) VAR_1568 ) { VAR_1569 = VAR_1570 ; break ; } VAR_1571 = METHOD_269 ( VAR_1572 ) ; VAR_1573 = METHOD_270 ( VAR_1574 , VAR_1575 , METHOD_271 ( VAR_1576 ) , METHOD_272 ( VAR_1577 ) ) ; if ( VAR_1578 == VAR_1579 ) break ; } } if ( VAR_1580 -> VAR_1581 != ( TYPE_351 * ) VAR_1582 ) VAR_1583 -> VAR_1584 = ( TYPE_352 * ) METHOD_273 ( VAR_1585 -> VAR_1586 ) ; VAR_1587 = ( TYPE_353 * ) METHOD_274 ( VAR_1588 ) ; if ( VAR_1589 . VAR_1590 != ( TYPE_354 * ) VAR_1591 ) VAR_1592 . VAR_1593 = ( TYPE_355 * ) METHOD_275 ( VAR_1594 . VAR_1595 ) ; if ( VAR_1596 != ( TYPE_356 * ) VAR_1597 ) VAR_1598 = ( TYPE_357 * ) METHOD_276 ( VAR_1599 ) ; if ( VAR_1600 != ( TYPE_358 * ) VAR_1601 ) VAR_1602 = ( TYPE_359 * ) METHOD_277 ( VAR_1603 ) ; if ( VAR_1604 != ( TYPE_360 * ) VAR_1605 ) VAR_1606 = ( TYPE_361 * ) METHOD_278 ( VAR_1607 ) ; if ( VAR_1608 != ( TYPE_362 * ) VAR_1609 ) VAR_1610 = ( TYPE_363 * ) METHOD_279 ( VAR_1611 ) ; if ( VAR_1612 == ( TYPE_364 * ) VAR_1613 ) return ( VAR_1614 ) ; ( TYPE_365 ) METHOD_280 ( VAR_1615 ) ; if ( VAR_1616 == VAR_1617 ) return ( METHOD_281 ( VAR_1618 ) ) ; return ( METHOD_282 ( VAR_1619 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 )  {  if ( METHOD_1 ( VAR_0 ) > 0 ) { VAR_1 [ METHOD_2 ( VAR_2 ) - 1 ] = '\\0' ; } METHOD_3 ( ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 [ 4 ] ; VAR_5 * VAR_6 ; METHOD_1 ( "UpdatingMACfilter...\\r\\n" ) ; METHOD_2 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; for ( VAR_9 = 0 ; VAR_10 < VAR_11 ; VAR_12 ++ ) { VAR_13 = & VAR_14 -> VAR_15 [ VAR_16 ] ; if ( VAR_17 -> VAR_18 > 0 ) { VAR_19 = METHOD_3 ( & VAR_20 -> VAR_21 , sizeof ( VAR_22 ) ) ; VAR_23 = ( VAR_24 >> 23 ) & 0x3F ; VAR_25 [ VAR_26 / 16 ] |= ( 1 << ( VAR_27 % 16 ) ) ; } }  METHOD_4 ( VAR_28 , VAR_29 , VAR_30 [ 0 ] ) ;  METHOD_5 ( VAR_31 , VAR_32 , VAR_33 [ 1 ] ) ;  METHOD_6 ( VAR_34 , VAR_35 , VAR_36 [ 2 ] ) ;   METHOD_7 ( VAR_37 , VAR_38 , VAR_39 [ 3 ] ) ;   METHOD_8 ( "EHT1=%04" PRIX16 "\\r\\n" , METHOD_9 ( VAR_40 , VAR_41 ) ) ;   METHOD_10 ( "EHT2=%04" PRIX16 "\\r\\n" , METHOD_11 ( VAR_42 , VAR_43 ) ) ;   METHOD_12 ( "EHT3=%04" PRIX16 "\\r\\n" , METHOD_13 ( VAR_44 , VAR_45 ) ) ;   METHOD_14 ( "EHT4=%04" PRIX16 "\\r\\n" , METHOD_15 ( VAR_46 , VAR_47 ) ) ;  return VAR_48 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned TYPE_3 VAR_2 , VAR_3 [ 3 ] ; TYPE_4 * VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; register TYPE_9 VAR_9 ; register TYPE_10 * VAR_10 ; register unsigned TYPE_11 * VAR_11 ; TYPE_12 VAR_12 , VAR_13 , VAR_14 , VAR_15 ; TYPE_13 VAR_16 , VAR_17 , VAR_18 = 0 , VAR_19 ; unsigned TYPE_14 * VAR_20 ; METHOD_1 ( VAR_21 != ( const TYPE_15 * ) VAR_22 ) ; METHOD_2 ( VAR_23 -> VAR_24 == VAR_25 ) ; if ( VAR_26 -> VAR_27 != VAR_28 ) ( TYPE_16 ) METHOD_3 ( VAR_29 , METHOD_4 ( ) , "%s" , VAR_30 -> VAR_31 ) ; METHOD_5 ( VAR_32 != ( TYPE_17 * ) VAR_33 ) ; METHOD_6 ( VAR_34 -> VAR_35 == VAR_36 ) ; VAR_37 = METHOD_7 ( VAR_38 , VAR_39 ) ; VAR_40 = METHOD_8 ( VAR_41 , VAR_42 , VAR_43 , VAR_44 ) ; if ( VAR_45 == VAR_46 ) { VAR_47 = METHOD_9 ( VAR_48 ) ; return ( ( TYPE_18 * ) VAR_49 ) ; } VAR_50 = METHOD_10 ( VAR_51 , sizeof ( VAR_52 . VAR_53 ) , ( unsigned TYPE_19 * ) VAR_54 . VAR_55 ) ; if ( VAR_56 != sizeof ( VAR_57 . VAR_58 ) ) METHOD_11 ( VAR_59 , "ImproperImageHeader" ) ; VAR_60 . VAR_61 = ( TYPE_20 ) METHOD_12 ( VAR_62 ) ; VAR_63 . VAR_64 = ( TYPE_21 ) METHOD_13 ( VAR_65 ) ; VAR_66 . VAR_67 = METHOD_14 ( VAR_68 ) ; VAR_69 . VAR_70 = METHOD_15 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; ( TYPE_22 ) METHOD_20 ( VAR_84 , 4 , ( unsigned TYPE_23 * ) VAR_85 . VAR_86 ) ; ( TYPE_24 ) METHOD_21 ( VAR_87 , 4 , ( unsigned TYPE_25 * ) VAR_88 . VAR_89 ) ; VAR_90 . VAR_91 = METHOD_22 ( VAR_92 ) ; VAR_93 . VAR_94 = METHOD_23 ( VAR_95 ) ; VAR_96 . VAR_97 = ( TYPE_26 ) METHOD_24 ( VAR_98 ) ; if ( ( METHOD_25 ( VAR_99 . VAR_100 , "vIMG" , 4 ) != 0 ) || ( METHOD_26 ( VAR_101 . VAR_102 , "View" , 4 ) != 0 ) ) METHOD_27 ( VAR_103 , "ImproperImageHeader" ) ; if ( VAR_104 . VAR_105 != 0 ) METHOD_28 ( VAR_106 , "MultipleRecordListNotSupported" ) ; VAR_107 = ( TYPE_27 ) ( ( TYPE_28 ) METHOD_29 ( VAR_108 ) ) ; VAR_109 = ( unsigned TYPE_29 ) METHOD_30 ( VAR_110 ) ; ( TYPE_30 ) VAR_111 ; VAR_112 = METHOD_31 ( VAR_113 , 3 , ( unsigned TYPE_31 * ) VAR_114 ) ; if ( VAR_115 != 3 || METHOD_32 ( VAR_116 , "\\x6f\\x80\\x00" , 3 ) != 0 ) METHOD_33 ( VAR_117 , "CorruptImage" ) ; if ( VAR_118 . VAR_119 > 1 ) { VAR_120 = ( TYPE_32 ) ( ( TYPE_33 ) METHOD_34 ( VAR_121 ) ) ; VAR_122 = ( unsigned TYPE_34 ) METHOD_35 ( VAR_123 ) ; VAR_124 = METHOD_36 ( VAR_125 , 3 , ( unsigned TYPE_35 * ) VAR_126 ) ; if ( VAR_127 != 3 || METHOD_37 ( VAR_128 , "\\x6f\\x80\\x01" , 3 ) != 0 ) METHOD_38 ( VAR_129 , "CorruptImage" ) ; } VAR_130 = ( TYPE_36 ) ( VAR_131 - METHOD_39 ( VAR_132 ) ) ; while ( VAR_133 -- != 0 ) { TYPE_37 VAR_134 ; VAR_135 = METHOD_40 ( VAR_136 ) ; if ( VAR_137 == VAR_138 ) break ; } VAR_139 = METHOD_41 ( VAR_140 , sizeof ( VAR_141 . VAR_142 ) , ( unsigned TYPE_38 * ) VAR_143 . VAR_144 ) ; if ( VAR_145 != sizeof ( VAR_146 . VAR_147 ) ) METHOD_42 ( VAR_148 , "ImproperImageHeader" ) ; VAR_149 . VAR_150 = METHOD_43 ( VAR_151 ) ; VAR_152 . VAR_153 = ( unsigned TYPE_39 ) ( ( TYPE_40 ) METHOD_44 ( VAR_154 ) ) ; VAR_155 . VAR_156 = METHOD_45 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_46 ( VAR_160 ) ; VAR_161 . VAR_162 = ( TYPE_41 ) METHOD_47 ( VAR_163 ) ; VAR_164 . VAR_165 = ( TYPE_42 ) METHOD_48 ( VAR_166 ) ; VAR_167 . VAR_168 = METHOD_49 ( VAR_169 ) ; VAR_170 . VAR_171 = METHOD_50 ( VAR_172 ) ; VAR_173 . VAR_174 = METHOD_51 ( VAR_175 ) ; VAR_176 . VAR_177 = ( TYPE_43 ) METHOD_52 ( VAR_178 ) ; VAR_179 . VAR_180 = ( TYPE_44 ) METHOD_53 ( VAR_181 ) ; VAR_182 -> VAR_183 = ( TYPE_45 ) VAR_184 . VAR_185 ; VAR_186 -> VAR_187 = ( TYPE_46 ) VAR_188 . VAR_189 ; VAR_190 -> VAR_191 = 8 ; VAR_192 = METHOD_54 ( VAR_193 , VAR_194 -> VAR_195 , VAR_196 -> VAR_197 , VAR_198 ) ; if ( VAR_199 == VAR_200 ) return ( METHOD_55 ( VAR_201 ) ) ; VAR_202 -> VAR_203 = VAR_204 ; VAR_205 = VAR_206 . VAR_207 == 0 ? 2UL : VAR_208 . VAR_209 == 2 ? 4UL : 1UL ; VAR_210 = 1 ; if ( METHOD_56 ( VAR_211 , VAR_212 << VAR_213 , VAR_214 ) == VAR_215 ) METHOD_57 ( VAR_216 , "MemoryAllocationFailed" ) ; if ( VAR_217 -> VAR_218 != VAR_219 ) { ( TYPE_47 ) METHOD_58 ( VAR_220 ) ; return ( METHOD_59 ( VAR_221 ) ) ; } VAR_222 = ( VAR_223 * VAR_224 -> VAR_225 + 7 ) / 8 ;  VAR_226 = ( unsigned TYPE_48 * ) METHOD_60 ( VAR_227 + 256UL , VAR_228 -> VAR_229 *  sizeof ( * VAR_230 ) ) ; if ( VAR_231 == ( unsigned TYPE_49 * ) VAR_232 ) METHOD_61 ( VAR_233 , "MemoryAllocationFailed" ) ; switch ( VAR_234 . VAR_235 & 0x07 ) { case 0 : { VAR_236 -> VAR_237 = VAR_238 ; VAR_239 = ( TYPE_50 ) METHOD_62 ( VAR_240 , VAR_241 * VAR_242 -> VAR_243 , VAR_244 ) ; break ; } case 1 : { VAR_245 -> VAR_246 = VAR_247 ; if ( ! METHOD_63 ( VAR_248 , VAR_249 , VAR_250 * VAR_251 -> VAR_252 ) ) METHOD_64 ( VAR_253 , "RLEDecoderError" ) ; break ; } default : METHOD_65 ( VAR_254 , "UnrecognizedImageCompressionType" ) ; } VAR_255 = VAR_256 ; switch ( VAR_257 ) { case 1 : { TYPE_51 VAR_258 ; for ( VAR_259 = 0 ; VAR_260 < ( TYPE_52 ) VAR_261 -> VAR_262 ; VAR_263 ++ ) { VAR_264 = METHOD_66 ( VAR_265 , 0 , VAR_266 , VAR_267 -> VAR_268 , 1 , VAR_269 ) ; if ( VAR_270 == ( TYPE_53 * ) VAR_271 ) break ; for ( VAR_272 = 0 ; VAR_273 < ( ( TYPE_54 ) VAR_274 -> VAR_275 - 7 ) ; VAR_276 += 8 ) { for ( VAR_277 = 0 ; VAR_278 < 8 ; VAR_279 ++ ) { VAR_280 = ( TYPE_55 ) ( * VAR_281 & ( 0x80 >> VAR_282 ) ? 0x00 : 0x01 ) ; METHOD_67 ( VAR_283 , VAR_284 , VAR_285 ) ; VAR_286 += METHOD_68 ( VAR_287 ) ; } VAR_288 ++ ; } if ( METHOD_69 ( VAR_289 , VAR_290 ) == VAR_291 ) break ; VAR_292 = METHOD_70 ( VAR_293 , VAR_294 , ( TYPE_56 ) VAR_295 , VAR_296 -> VAR_297 ) ; if ( VAR_298 == VAR_299 ) break ; } ( TYPE_57 ) METHOD_71 ( VAR_300 , VAR_301 ) ; break ; } case 2 : { for ( VAR_302 = 0 ; VAR_303 < ( TYPE_58 ) VAR_304 -> VAR_305 ; VAR_306 ++ ) { VAR_307 = METHOD_72 ( VAR_308 , 0 , VAR_309 , VAR_310 -> VAR_311 , 1 , VAR_312 ) ; if ( VAR_313 == ( TYPE_59 * ) VAR_314 ) break ; for ( VAR_315 = 0 ; VAR_316 < ( TYPE_60 ) VAR_317 -> VAR_318 - 3 ; VAR_319 += 4 ) { VAR_320 = METHOD_73 ( VAR_321 , 3UL - ( ( * VAR_322 >> 6 ) & 0x03 ) , VAR_323 ) ; METHOD_74 ( VAR_324 , VAR_325 , VAR_326 ) ; VAR_327 += METHOD_75 ( VAR_328 ) ; VAR_329 = METHOD_76 ( VAR_330 , 3UL - ( ( * VAR_331 >> 4 ) & 0x03 ) , VAR_332 ) ; METHOD_77 ( VAR_333 , VAR_334 , VAR_335 ) ; VAR_336 += METHOD_78 ( VAR_337 ) ; VAR_338 = METHOD_79 ( VAR_339 , 3UL - ( ( * VAR_340 >> 2 ) & 0x03 ) , VAR_341 ) ; METHOD_80 ( VAR_342 , VAR_343 , VAR_344 ) ; VAR_345 += METHOD_81 ( VAR_346 ) ; VAR_347 = METHOD_82 ( VAR_348 , 3UL - ( ( * VAR_349 ) & 0x03 ) , VAR_350 ) ; METHOD_83 ( VAR_351 , VAR_352 , VAR_353 ) ; VAR_354 ++ ; VAR_355 += METHOD_84 ( VAR_356 ) ; } if ( METHOD_85 ( VAR_357 , VAR_358 ) == VAR_359 ) break ; VAR_360 = METHOD_86 ( VAR_361 , VAR_362 , ( TYPE_61 ) VAR_363 , VAR_364 -> VAR_365 ) ; if ( VAR_366 == VAR_367 ) break ; } ( TYPE_62 ) METHOD_87 ( VAR_368 , VAR_369 ) ; break ; } case 4 : { for ( VAR_370 = 0 ; VAR_371 < ( TYPE_63 ) VAR_372 -> VAR_373 ; VAR_374 ++ ) { VAR_375 = METHOD_88 ( VAR_376 , 0 , VAR_377 , VAR_378 -> VAR_379 , 1 , VAR_380 ) ; if ( VAR_381 == ( TYPE_64 * ) VAR_382 ) break ; for ( VAR_383 = 0 ; VAR_384 < ( TYPE_65 ) VAR_385 -> VAR_386 - 1 ; VAR_387 += 2 ) { VAR_388 = METHOD_89 ( VAR_389 , 15UL - ( ( * VAR_390 >> 4 ) & 0x0f ) , VAR_391 ) ; METHOD_90 ( VAR_392 , VAR_393 , VAR_394 ) ; VAR_395 += METHOD_91 ( VAR_396 ) ; VAR_397 = METHOD_92 ( VAR_398 , 15UL - ( ( * VAR_399 ) & 0x0f ) , VAR_400 ) ; METHOD_93 ( VAR_401 , VAR_402 , VAR_403 ) ; VAR_404 ++ ; VAR_405 += METHOD_94 ( VAR_406 ) ; } if ( METHOD_95 ( VAR_407 , VAR_408 ) == VAR_409 ) break ; VAR_410 = METHOD_96 ( VAR_411 , VAR_412 , ( TYPE_66 ) VAR_413 , VAR_414 -> VAR_415 ) ; if ( VAR_416 == VAR_417 ) break ; } ( TYPE_67 ) METHOD_97 ( VAR_418 , VAR_419 ) ; break ; } default : METHOD_98 ( VAR_420 , "ImproperImageHeader" ) ; } VAR_421 = ( unsigned TYPE_68 * ) METHOD_99 ( VAR_422 ) ; if ( METHOD_100 ( VAR_423 ) != VAR_424 ) METHOD_101 ( VAR_425 , VAR_426 , "UnexpectedEndOfFile" , VAR_427 -> VAR_428 ) ; if ( VAR_429 . VAR_430 > 1 ) { TYPE_69 * VAR_431 ; TYPE_70 VAR_432 ; register TYPE_71 * VAR_433 ; TYPE_72 VAR_434 ; VAR_435 = ( TYPE_73 ) ( VAR_436 - METHOD_102 ( VAR_437 ) ) ; while ( VAR_438 -- ) METHOD_103 ( VAR_439 ) ; VAR_440 = METHOD_104 ( VAR_441 ) ; VAR_442 = VAR_443 ; VAR_444 = METHOD_105 ( ( TYPE_74 * ) VAR_445 ) ; for ( VAR_446 = VAR_447 ; VAR_448 != VAR_449 ; VAR_450 ++ ) { if ( ( TYPE_75 ) ( VAR_451 - VAR_452 + VAR_453 ) >= VAR_454 ) { * VAR_455 = '\\0' ; VAR_456 <<= 1 ; VAR_457 += VAR_458 ; VAR_459 = ( TYPE_76 * ) METHOD_106 ( VAR_460 , VAR_461 + VAR_462 , sizeof ( * VAR_463 ) ) ; if ( VAR_464 == ( TYPE_77 * ) VAR_465 ) break ; VAR_466 = VAR_467 + METHOD_107 ( VAR_468 ) ; } * VAR_469 = VAR_470 ; VAR_471 = METHOD_108 ( VAR_472 ) ; } * VAR_473 = '\\0' ; if ( VAR_474 == ( TYPE_78 * ) VAR_475 ) METHOD_109 ( VAR_476 , "MemoryAllocationFailed" ) ; ( TYPE_79 ) METHOD_110 ( VAR_477 , "comment" , VAR_478 , VAR_479 ) ; VAR_480 = METHOD_111 ( VAR_481 ) ; } ( TYPE_80 ) METHOD_112 ( VAR_482 ) ; return ( METHOD_113 ( VAR_483 ) ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; unsigned TYPE_2 VAR_2 , VAR_3 ; unsigned TYPE_3 VAR_4 [ 2048 ] ; const unsigned TYPE_4 * VAR_5 ; TYPE_5 VAR_6 ; struct STRUCT_OR_UNION_1 * VAR_7 = VAR_8 ; unsigned TYPE_6 VAR_9 [ 4096 ] ; unsigned TYPE_7 * VAR_10 = VAR_11 + 1 ; unsigned TYPE_8 VAR_12 = 0 ; TYPE_9 VAR_13 ; struct STRUCT_OR_UNION_2 * VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_3 * VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 -> VAR_19 , VAR_20 , sizeof ( VAR_21 ) ) ; if ( VAR_22 < 0 ) { if ( VAR_23 == VAR_24 || VAR_25 == VAR_26 || VAR_27 == VAR_28 ) return ; METHOD_2 ( VAR_29 , "(s=%d)processRequest():read():%m" , VAR_30 -> VAR_31 ) ; goto VAR_32 ; } if ( VAR_33 == 0 ) { METHOD_3 ( VAR_34 , "(s=%d)requestconnectionclosed" , VAR_35 -> VAR_36 ) ; goto VAR_37 ; } VAR_38 = METHOD_4 ( VAR_39 ) ; VAR_40 = VAR_41 [ 0 ] ; VAR_42 = VAR_43 + 1 ; METHOD_5 ( VAR_44 , VAR_45 , VAR_46 + VAR_47 ) ; if ( VAR_48 + VAR_49 > VAR_50 + VAR_51 ) { METHOD_6 ( VAR_52 , "badrequest(lengthencoding)" ) ; goto VAR_53 ; } if ( VAR_54 == 0 && VAR_55 != 3 ) { METHOD_7 ( VAR_56 , "badrequest(length=0)" ) ; goto VAR_57 ; } METHOD_8 ( VAR_58 , "(s=%d)requesttype=%dstr=\'%.*s\'" , VAR_59 -> VAR_60 , VAR_61 , VAR_62 , VAR_63 ) ; switch ( VAR_64 ) { case 1 : case 2 : case 3 : while ( VAR_65 && ( VAR_66 < 255 ) ) { if ( VAR_67 -> VAR_68 < VAR_69 ) { METHOD_9 ( VAR_70 , "outdateddevice" ) ; } else { if ( VAR_71 -> VAR_72 [ VAR_73 ] . VAR_74 + VAR_75 -> VAR_76 [ VAR_77 ] . VAR_78 + VAR_79 -> VAR_80 [ VAR_81 ] . VAR_82 + 6 + ( VAR_83 - VAR_84 ) >= ( TYPE_10 ) sizeof ( VAR_85 ) ) break ; if ( ( VAR_86 == 1 && 0 == METHOD_10 ( VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 , VAR_91 , VAR_92 ) ) || ( VAR_93 == 2 && 0 == METHOD_11 ( VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 , VAR_98 , VAR_99 ) ) || ( VAR_100 == 3 ) ) { VAR_101 = VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 ; METHOD_12 ( VAR_106 , VAR_107 ) ; METHOD_13 ( VAR_108 , VAR_109 -> VAR_110 [ VAR_111 ] . VAR_112 , VAR_113 -> VAR_114 [ VAR_115 ] . VAR_116 ) ; VAR_117 += VAR_118 -> VAR_119 [ VAR_120 ] . VAR_121 ; VAR_122 = VAR_123 -> VAR_124 [ VAR_125 ] . VAR_126 ; METHOD_14 ( VAR_127 , VAR_128 ) ; METHOD_15 ( VAR_129 , VAR_130 -> VAR_131 [ VAR_132 ] . VAR_133 , VAR_134 -> VAR_135 [ VAR_136 ] . VAR_137 ) ; VAR_138 += VAR_139 -> VAR_140 [ VAR_141 ] . VAR_142 ; VAR_143 = VAR_144 -> VAR_145 [ VAR_146 ] . VAR_147 ; METHOD_16 ( VAR_148 , VAR_149 ) ; METHOD_17 ( VAR_150 , VAR_151 -> VAR_152 [ VAR_153 ] . VAR_154 , VAR_155 -> VAR_156 [ VAR_157 ] . VAR_158 ) ; VAR_159 += VAR_160 -> VAR_161 [ VAR_162 ] . VAR_163 ; VAR_164 ++ ; } } VAR_165 = VAR_166 -> VAR_167 ; } for ( VAR_168 = VAR_169 . VAR_170 ; VAR_171 && ( VAR_172 < 255 ) ; VAR_173 = VAR_174 -> VAR_175 . VAR_176 ) { if ( METHOD_18 ( VAR_177 -> VAR_178 ) + METHOD_19 ( VAR_179 -> VAR_180 ) + METHOD_20 ( VAR_181 -> VAR_182 ) + 6 + ( VAR_183 - VAR_184 ) >= sizeof ( VAR_185 ) ) break ; if ( ( VAR_186 == 1 && 0 == METHOD_21 ( VAR_187 -> VAR_188 , ( const TYPE_11 * ) VAR_189 , VAR_190 ) ) || ( VAR_191 == 2 && 0 == METHOD_22 ( VAR_192 -> VAR_193 , ( const TYPE_12 * ) VAR_194 , VAR_195 ) ) || ( VAR_196 == 3 ) ) { VAR_197 = METHOD_23 ( VAR_198 -> VAR_199 ) ; METHOD_24 ( VAR_200 , VAR_201 ) ; METHOD_25 ( VAR_202 , VAR_203 -> VAR_204 , VAR_205 ) ; VAR_206 += VAR_207 ; VAR_208 = METHOD_26 ( VAR_209 -> VAR_210 ) ; METHOD_27 ( VAR_211 , VAR_212 ) ; METHOD_28 ( VAR_213 , VAR_214 -> VAR_215 , VAR_216 ) ; VAR_217 += VAR_218 ; VAR_219 = METHOD_29 ( VAR_220 -> VAR_221 ) ; METHOD_30 ( VAR_222 , VAR_223 ) ; METHOD_31 ( VAR_224 , VAR_225 -> VAR_226 , VAR_227 ) ; VAR_228 += VAR_229 ; VAR_230 ++ ; } } VAR_231 [ 0 ] = VAR_232 ; METHOD_32 ( VAR_233 , "(s=%d)response:%ddevice%s" , VAR_234 -> VAR_235 , VAR_236 , ( VAR_237 > 1 ) ? "s" : "" ) ; if ( METHOD_33 ( VAR_238 -> VAR_239 , VAR_240 , VAR_241 - VAR_242 ) < 0 ) { METHOD_34 ( VAR_243 , "(s=%d)write:%m" , VAR_244 -> VAR_245 ) ; goto VAR_246 ; } break ; case 4 : VAR_247 = METHOD_35 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( ! VAR_248 ) { METHOD_36 ( VAR_249 , "cannotallocatememory" ) ; goto VAR_250 ; }  if ( METHOD_37 ( VAR_251 , VAR_252 ) ) {  METHOD_38 ( VAR_253 , "badrequest(stcontainsforbiddenchars)" ) ; goto VAR_254 ; } VAR_255 -> VAR_256 = METHOD_39 ( VAR_257 + 1 ) ; if ( ! VAR_258 -> VAR_259 ) { METHOD_40 ( VAR_260 , "cannotallocatememory" ) ; goto VAR_261 ; } METHOD_41 ( VAR_262 -> VAR_263 , VAR_264 , VAR_265 ) ; VAR_266 -> VAR_267 [ VAR_268 ] = '\\0' ; VAR_269 += VAR_270 ; if ( VAR_271 >= VAR_272 + VAR_273 ) { METHOD_42 ( VAR_274 , "badrequest(missingusn)" ) ; goto VAR_275 ; } METHOD_43 ( VAR_276 , VAR_277 , VAR_278 + VAR_279 ) ; if ( VAR_280 + VAR_281 > VAR_282 + VAR_283 ) { METHOD_44 ( VAR_284 , "badrequest(lengthencoding)" ) ; goto VAR_285 ; } if ( METHOD_45 ( VAR_286 , VAR_287 ) ) { METHOD_46 ( VAR_288 , "badrequest(usncontainsforbiddenchars)" ) ; goto VAR_289 ; } METHOD_47 ( VAR_290 , "usn=\'%.*s\'" , VAR_291 , VAR_292 ) ; VAR_293 -> VAR_294 = METHOD_48 ( VAR_295 + 1 ) ; if ( ! VAR_296 -> VAR_297 ) { METHOD_49 ( VAR_298 , "cannotallocatememory" ) ; goto VAR_299 ; } METHOD_50 ( VAR_300 -> VAR_301 , VAR_302 , VAR_303 ) ; VAR_304 -> VAR_305 [ VAR_306 ] = '\\0' ; VAR_307 += VAR_308 ; METHOD_51 ( VAR_309 , VAR_310 , VAR_311 + VAR_312 ) ; if ( VAR_313 + VAR_314 > VAR_315 + VAR_316 ) { METHOD_52 ( VAR_317 , "badrequest(lengthencoding)" ) ; goto VAR_318 ; } if ( METHOD_53 ( VAR_319 , VAR_320 ) ) { METHOD_54 ( VAR_321 , "badrequest(servercontainsforbiddenchars)" ) ; goto VAR_322 ; } METHOD_55 ( VAR_323 , "server=\'%.*s\'" , VAR_324 , VAR_325 ) ; VAR_326 -> VAR_327 = METHOD_56 ( VAR_328 + 1 ) ; if ( ! VAR_329 -> VAR_330 ) { METHOD_57 ( VAR_331 , "cannotallocatememory" ) ; goto VAR_332 ; } METHOD_58 ( VAR_333 -> VAR_334 , VAR_335 , VAR_336 ) ; VAR_337 -> VAR_338 [ VAR_339 ] = '\\0' ; VAR_340 += VAR_341 ; METHOD_59 ( VAR_342 , VAR_343 , VAR_344 + VAR_345 ) ; if ( VAR_346 + VAR_347 > VAR_348 + VAR_349 ) { METHOD_60 ( VAR_350 , "badrequest(lengthencoding)" ) ; goto VAR_351 ; } if ( METHOD_61 ( VAR_352 , VAR_353 ) ) { METHOD_62 ( VAR_354 , "badrequest(locationcontainsforbiddenchars)" ) ; goto VAR_355 ; } METHOD_63 ( VAR_356 , "location=\'%.*s\'" , VAR_357 , VAR_358 ) ; VAR_359 -> VAR_360 = METHOD_64 ( VAR_361 + 1 ) ; if ( ! VAR_362 -> VAR_363 ) { METHOD_65 ( VAR_364 , "cannotallocatememory" ) ; goto VAR_365 ; } METHOD_66 ( VAR_366 -> VAR_367 , VAR_368 , VAR_369 ) ; VAR_370 -> VAR_371 [ VAR_372 ] = '\\0' ; for ( VAR_373 = VAR_374 . VAR_375 ; VAR_376 ; VAR_377 = VAR_378 -> VAR_379 . VAR_380 ) { if ( 0 == METHOD_67 ( VAR_381 -> VAR_382 , VAR_383 -> VAR_384 ) && 0 == METHOD_68 ( VAR_385 -> VAR_386 , VAR_387 -> VAR_388 ) ) { METHOD_69 ( VAR_389 , "Serviceallreadyinthelist.Updating..." ) ; METHOD_70 ( VAR_390 -> VAR_391 ) ; METHOD_71 ( VAR_392 -> VAR_393 ) ; METHOD_72 ( VAR_394 -> VAR_395 ) ; VAR_396 -> VAR_397 = VAR_398 -> VAR_399 ; METHOD_73 ( VAR_400 -> VAR_401 ) ; VAR_402 -> VAR_403 = VAR_404 -> VAR_405 ; METHOD_74 ( VAR_406 ) ; VAR_407 = VAR_408 ; return ; } } METHOD_75 ( & VAR_409 , VAR_410 , VAR_411 ) ; VAR_412 = VAR_413 ; break ; default : METHOD_76 ( VAR_414 , "Unknownrequesttype%d" , VAR_415 ) ; VAR_416 [ 0 ] = '\\0' ; if ( METHOD_77 ( VAR_417 -> VAR_418 , VAR_419 , 1 ) < 0 ) { METHOD_78 ( VAR_420 , "(s=%d)write:%m" , VAR_421 -> VAR_422 ) ; goto VAR_423 ; } } return ; VAR_424 : if ( VAR_425 ) { METHOD_79 ( VAR_426 -> VAR_427 ) ; METHOD_80 ( VAR_428 -> VAR_429 ) ; METHOD_81 ( VAR_430 -> VAR_431 ) ; METHOD_82 ( VAR_432 -> VAR_433 ) ; METHOD_83 ( VAR_434 ) ; VAR_435 = VAR_436 ; } METHOD_84 ( VAR_437 -> VAR_438 ) ; VAR_439 -> VAR_440 = - 1 ; return ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) {  TYPE_5 VAR_4 ;  TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 ; TYPE_8 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_9 VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 * VAR_13 ; TYPE_12 VAR_14 ; TYPE_13 * VAR_15 = ( TYPE_14 * ) VAR_16 -> VAR_17 ; TYPE_15 * VAR_18 = ( TYPE_16 * ) VAR_19 -> VAR_20 ; TYPE_17 VAR_21 [ VAR_22 ] , VAR_23 [ VAR_24 ] , VAR_25 [ VAR_26 ] ; TYPE_18 VAR_27 [ VAR_28 ] , VAR_29 [ VAR_30 ] ; TYPE_19 VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 ; TYPE_20 VAR_36 ; TYPE_21 VAR_37 [ VAR_38 ] , VAR_39 [ VAR_40 ] ; TYPE_22 * VAR_41 [ VAR_42 ] ; TYPE_23 * VAR_43 [ VAR_44 ] ; TYPE_24 * VAR_45 [ VAR_46 ] ; TYPE_25 * VAR_47 [ VAR_48 ] ; TYPE_26 * VAR_49 [ VAR_50 ] ; TYPE_27 * VAR_51 [ VAR_52 ] , * VAR_53 [ VAR_54 ] ; TYPE_28 VAR_55 , VAR_56 ; TYPE_29 VAR_57 ; TYPE_30 VAR_58 ; METHOD_1 ( VAR_59 ) ; METHOD_2 ( VAR_60 ) ; METHOD_3 ( VAR_61 ) ; VAR_62 ; VAR_63 = ( 1 << VAR_64 -> VAR_65 ) ; VAR_66 = VAR_67 -> VAR_68 ; if ( 1 == VAR_69 -> VAR_70 ) { VAR_71 = VAR_72 -> VAR_73 ; VAR_74 = VAR_75 -> VAR_76 [ VAR_77 ] . VAR_78 ; VAR_79 = VAR_80 -> VAR_81 [ VAR_82 ] . VAR_83 ; VAR_84 = VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 ; VAR_89 = VAR_90 -> VAR_91 [ VAR_92 ] . VAR_93 ; } else { VAR_94 = VAR_95 -> VAR_96 ; VAR_97 = VAR_98 -> VAR_99 . VAR_100 ; VAR_101 = VAR_102 -> VAR_103 . VAR_104 ; VAR_105 = VAR_106 -> VAR_107 . VAR_108 ; VAR_109 = VAR_110 -> VAR_111 . VAR_112 ; } VAR_113 = 0 ; VAR_114 = 0 ; for ( VAR_115 = 0 ; VAR_116 < VAR_117 ; VAR_118 ++ ) { if ( VAR_119 [ VAR_120 ] ) { VAR_121 [ VAR_122 ] = VAR_123 + VAR_124 [ VAR_125 ] ; VAR_126 ++ ; } else { VAR_127 [ VAR_128 ] = VAR_129 + VAR_130 [ VAR_131 ] ; VAR_132 ++ ; } } VAR_133 = 0 ; for ( VAR_134 = VAR_135 ; VAR_136 < VAR_137 + VAR_138 ; VAR_139 ++ ) { if ( VAR_140 [ VAR_141 ] ) { VAR_142 [ VAR_143 ] = VAR_144 + VAR_145 [ VAR_146 ] ; VAR_147 ++ ; } else { VAR_148 [ VAR_149 ] = VAR_150 + VAR_151 [ VAR_152 ] ; VAR_153 ++ ; } } VAR_154 = 0 ; VAR_155 = 0 ; for ( VAR_156 = 0 ; VAR_157 < VAR_158 -> VAR_159 + VAR_160 -> VAR_161 ; VAR_162 ++ ) { VAR_163 = VAR_164 -> VAR_165 [ VAR_166 ] ; if ( VAR_167 -> VAR_168 [ VAR_169 ] ) { VAR_170 += VAR_171 - VAR_172 -> VAR_173 [ VAR_174 ] * VAR_175 - VAR_176 -> VAR_177 ; } if ( VAR_178 -> VAR_179 [ VAR_180 ] ) { VAR_181 [ VAR_182 ] = VAR_183 ; VAR_184 [ VAR_185 ] = VAR_186 -> VAR_187 [ VAR_188 ] ; VAR_189 ++ ; } else { VAR_190 [ VAR_191 ] = VAR_192 ; VAR_193 [ VAR_194 ] = VAR_195 -> VAR_196 [ VAR_197 ] ; VAR_198 ++ ; } } VAR_199 = VAR_200 + VAR_201 + VAR_202 ; if ( 0 == VAR_203 -> VAR_204 ) { for ( VAR_205 = 0 ; VAR_206 < VAR_207 ; VAR_208 ++ ) { if ( VAR_209 -> VAR_210 [ VAR_211 ] . VAR_212 ) VAR_213 -> VAR_214 [ VAR_215 ] . VAR_216 -> VAR_217 = VAR_218 ; } } for ( VAR_219 = 0 ; VAR_220 < ( TYPE_31 ) VAR_221 ; VAR_222 ++ ) { if ( 0 == VAR_223 [ VAR_224 ] ) { VAR_225 = METHOD_4 ( VAR_226 , VAR_227 [ VAR_228 ] ) ; if ( VAR_229 != VAR_230 ) VAR_231 -> VAR_232 = VAR_233 ; VAR_234 [ VAR_235 ] = VAR_236 ; } else { VAR_237 = METHOD_5 ( VAR_238 , VAR_239 [ VAR_240 ] ) ; if ( VAR_241 != VAR_242 ) VAR_243 -> VAR_244 = VAR_245 ; VAR_246 [ VAR_247 ] = VAR_248 ; } } for ( VAR_249 = 0 ; VAR_250 < ( TYPE_32 ) VAR_251 ; VAR_252 ++ ) { if ( 0 == VAR_253 [ VAR_254 ] ) { VAR_255 = METHOD_6 ( VAR_256 , VAR_257 [ VAR_258 ] ) ; if ( VAR_259 != VAR_260 ) VAR_261 -> VAR_262 = VAR_263 ; VAR_264 [ VAR_265 ] = VAR_266 ; } else { VAR_267 = METHOD_7 ( VAR_268 , VAR_269 [ VAR_270 ] ) ; if ( VAR_271 != VAR_272 ) VAR_273 -> VAR_274 = VAR_275 ; VAR_276 [ VAR_277 ] = VAR_278 ; } } for ( VAR_279 = 0 ; VAR_280 < ( TYPE_33 ) VAR_281 ; VAR_282 ++ ) { VAR_283 = METHOD_8 ( VAR_284 , VAR_285 [ VAR_286 ] ) ; if ( VAR_287 != VAR_288 ) VAR_289 -> VAR_290 = VAR_291 ; VAR_292 [ VAR_293 ] = VAR_294 ; } for ( VAR_295 = 0 ; VAR_296 < ( TYPE_34 ) VAR_297 ; VAR_298 ++ ) { VAR_299 = METHOD_9 ( VAR_300 , VAR_301 [ VAR_302 ] ) ; if ( VAR_303 != VAR_304 ) VAR_305 -> VAR_306 = VAR_307 ; VAR_308 [ VAR_309 ] = VAR_310 ; } for ( VAR_311 = 0 ; VAR_312 < ( TYPE_35 ) VAR_313 ; VAR_314 ++ ) { VAR_315 = METHOD_10 ( VAR_316 , VAR_317 [ VAR_318 ] ) ; if ( VAR_319 != VAR_320 ) VAR_321 -> VAR_322 = VAR_323 ; VAR_324 [ VAR_325 ] = VAR_326 ; } VAR_327 = ( TYPE_36 ) VAR_328 > VAR_329 -> VAR_330 ? ( TYPE_37 ) VAR_331 : VAR_332 -> VAR_333 ; VAR_334 = 0 ; if ( ( VAR_335 == VAR_336 -> VAR_337 ) || ( VAR_338 == VAR_339 -> VAR_340 ) ) { while ( VAR_341 < VAR_342 ) { for ( VAR_343 = 0 ; ( VAR_344 < ( TYPE_38 ) VAR_345 ) && ( VAR_346 < VAR_347 ) ; VAR_348 ++ , VAR_349 ++ ) { if ( VAR_350 == VAR_351 [ VAR_352 ] ) { VAR_353 [ VAR_354 ] = METHOD_11 ( VAR_355 , VAR_356 [ VAR_357 ] ) ; } VAR_358 [ VAR_359 ] = VAR_360 [ VAR_361 ] ; } for ( VAR_362 = 0 ; ( VAR_363 < ( TYPE_39 ) VAR_364 ) && ( VAR_365 < VAR_366 ) ; VAR_367 ++ , VAR_368 ++ ) { if ( VAR_369 == VAR_370 [ VAR_371 ] ) { VAR_372 [ VAR_373 ] = METHOD_12 ( VAR_374 , VAR_375 [ VAR_376 ] ) ; } VAR_377 [ VAR_378 ] = VAR_379 [ VAR_380 ] ; } for ( VAR_381 = 0 ; ( VAR_382 < ( TYPE_40 ) VAR_383 ) && ( VAR_384 < VAR_385 ) ; VAR_386 ++ , VAR_387 ++ ) { if ( VAR_388 == VAR_389 [ VAR_390 ] ) { VAR_391 [ VAR_392 ] = METHOD_13 ( VAR_393 , VAR_394 [ VAR_395 ] ) ; } VAR_396 [ VAR_397 ] = VAR_398 [ VAR_399 ] ; } } for ( VAR_400 = 0 ; ( TYPE_41 ) VAR_401 < VAR_402 -> VAR_403 ; VAR_404 ++ ) { TYPE_42 * VAR_405 ; VAR_406 -> VAR_407 [ VAR_408 ] . VAR_409 = VAR_410 -> VAR_411 . VAR_412 ? ( TYPE_43 * ) VAR_413 [ VAR_414 -> VAR_415 . VAR_416 [ VAR_417 ] ] : ( TYPE_44 * ) VAR_418 [ VAR_419 ] ; VAR_420 = ( TYPE_45 * ) VAR_421 -> VAR_422 [ VAR_423 ] . VAR_424 ; if ( VAR_425 == VAR_426 ) return VAR_427 ; VAR_428 = METHOD_14 ( VAR_429 , VAR_430 -> VAR_431 ) ; VAR_432 -> VAR_433 [ VAR_434 ] . VAR_435 = VAR_436 ; } if ( VAR_437 -> VAR_438 == VAR_439 ) { VAR_440 = ( TYPE_46 ) VAR_441 > VAR_442 -> VAR_443 ? ( TYPE_47 ) VAR_444 : VAR_445 -> VAR_446 ; VAR_447 = 0 ; while ( VAR_448 < VAR_449 ) { for ( VAR_450 = 0 ; ( VAR_451 < ( TYPE_48 ) VAR_452 ) && ( VAR_453 < VAR_454 ) ; VAR_455 ++ , VAR_456 ++ ) { if ( VAR_457 == VAR_458 [ VAR_459 ] ) { VAR_460 [ VAR_461 ] = METHOD_15 ( VAR_462 , VAR_463 [ VAR_464 ] ) ; } VAR_465 [ VAR_466 ] = VAR_467 [ VAR_468 ] ; } for ( VAR_469 = 0 ; ( VAR_470 < ( TYPE_49 ) VAR_471 ) && ( VAR_472 < VAR_473 ) ; VAR_474 ++ , VAR_475 ++ ) { if ( VAR_476 == VAR_477 [ VAR_478 ] ) { VAR_479 [ VAR_480 ] = METHOD_16 ( VAR_481 , VAR_482 [ VAR_483 ] ) ; } VAR_484 [ VAR_485 ] = VAR_486 [ VAR_487 ] ; } for ( VAR_488 = 0 ; ( VAR_489 < ( TYPE_50 ) VAR_490 ) && ( VAR_491 < VAR_492 ) ; VAR_493 ++ , VAR_494 ++ ) { if ( VAR_495 == VAR_496 [ VAR_497 ] ) { VAR_498 [ VAR_499 ] = METHOD_17 ( VAR_500 , VAR_501 [ VAR_502 ] ) ; } VAR_503 [ VAR_504 ] = VAR_505 [ VAR_506 ] ; } } for ( VAR_507 = 0 ; ( TYPE_51 ) VAR_508 < VAR_509 -> VAR_510 ; VAR_511 ++ ) { TYPE_52 * VAR_512 ; VAR_513 -> VAR_514 [ VAR_515 ] . VAR_516 = VAR_517 -> VAR_518 . VAR_519 ? ( TYPE_53 * ) VAR_520 [ VAR_521 -> VAR_522 . VAR_523 [ VAR_524 ] ] : ( TYPE_54 * ) VAR_525 [ VAR_526 ] ; VAR_527 = ( TYPE_55 * ) VAR_528 -> VAR_529 [ VAR_530 ] . VAR_531 ; if ( VAR_532 == VAR_533 ) return VAR_534 ; VAR_535 = METHOD_18 ( VAR_536 , VAR_537 -> VAR_538 ) ; VAR_539 -> VAR_540 [ VAR_541 ] . VAR_542 = VAR_543 ; } } } METHOD_19 ( VAR_544 , VAR_545 , VAR_546 , VAR_547 , VAR_548 , VAR_549 , VAR_550 , VAR_551 , VAR_552 , VAR_553 , VAR_554 , VAR_555 , VAR_556 ) ; for ( VAR_557 = 0 ; VAR_558 < VAR_559 ; VAR_560 ++ ) { if ( ( VAR_561 -> VAR_562 [ VAR_563 ] . VAR_564 ) && ( VAR_565 == VAR_566 -> VAR_567 [ VAR_568 ] . VAR_569 -> VAR_570 ) ) { TYPE_56 * VAR_571 = VAR_572 -> VAR_573 [ VAR_574 ] . VAR_575 ; TYPE_57 * VAR_576 ; METHOD_20 ( VAR_577 , ( TYPE_58 * ) VAR_578 -> VAR_579 , VAR_580 -> VAR_581 ) ; VAR_582 = ( TYPE_59 * ) VAR_583 -> VAR_584 ;  for ( VAR_585 = 0 ; VAR_586 < VAR_587 ; VAR_588 ++ )  { if ( VAR_589 && VAR_590 -> VAR_591 == VAR_592 -> VAR_593 ) {  METHOD_21 ( ( TYPE_60 * ) VAR_594 -> VAR_595 , VAR_596 , VAR_597 ) ;  break ; } VAR_598 ++ ; } } } return VAR_599 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; unsigned TYPE_5 TYPE_6 * VAR_5 = ( unsigned TYPE_7 TYPE_8 * ) VAR_6 ; switch ( VAR_7 ) { case VAR_8 : VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 ) ; break ; case VAR_13 : VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 ) ; break ; case VAR_18 : VAR_19 = METHOD_3 ( VAR_20 , & VAR_21 , VAR_22 , 0 , sizeof ( struct STRUCT_OR_UNION_1 ) , VAR_23 ) ; break ; case VAR_24 : VAR_25 = METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 , 0 , sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_29 ) ; break ; case VAR_30 : VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 , VAR_34 , 0 , sizeof ( union STRUCT_OR_UNION_3 ) , VAR_35 ) ; break ; case VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , & VAR_39 , VAR_40 , 0 , sizeof ( union STRUCT_OR_UNION_4 ) , VAR_41 ) ; break ; TYPE_9 TYPE_10 case VAR_42 : VAR_43 = METHOD_7 ( VAR_44 , VAR_45 ) ; break ; case VAR_46 : VAR_47 = METHOD_8 ( VAR_48 , VAR_49 ) ; break ; case VAR_50 :  VAR_51 = METHOD_9 ( METHOD_10 ( VAR_52 ) -> VAR_53 ,  VAR_54 ) ; break ; case VAR_55 : METHOD_11 ( VAR_56 ) -> VAR_57 = VAR_58 ; VAR_59 = 0 ; break ; TYPE_11 TYPE_12 case VAR_60 : VAR_61 = METHOD_12 ( VAR_62 , VAR_63 ) ; break ; case VAR_64 : VAR_65 = METHOD_13 ( VAR_66 , VAR_67 ) ; break ; TYPE_13 TYPE_14 case VAR_68 : VAR_69 = METHOD_14 ( VAR_70 , & VAR_71 , VAR_72 , 0 , VAR_73 , VAR_74 ) ; break ; case VAR_75 : VAR_76 = METHOD_15 ( VAR_77 , & VAR_78 , VAR_79 , 0 , VAR_80 , VAR_81 ) ; break ; TYPE_15 TYPE_16 case VAR_82 : if ( METHOD_16 ( VAR_83 ) < 0 ) return - VAR_84 ; VAR_85 = METHOD_17 ( VAR_86 , VAR_87 , ( unsigned TYPE_17 TYPE_18 * ) VAR_88 ) ; METHOD_18 ( VAR_89 ) ; break ; case VAR_90 : if ( METHOD_19 ( VAR_91 ) < 0 ) return - VAR_92 ; VAR_93 = METHOD_20 ( VAR_94 , VAR_95 , ( unsigned TYPE_19 TYPE_20 * ) VAR_96 ) ; METHOD_21 ( VAR_97 ) ; break ; default : VAR_98 = METHOD_22 ( VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; break ; } return VAR_103 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 * VAR_5 = VAR_6 ; TYPE_2 * VAR_7 ; TYPE_3 VAR_8 = 0 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 = METHOD_1 ( VAR_11 + VAR_12 -> VAR_13 , 16 ) ; TYPE_6 VAR_14 = VAR_15 + VAR_16 -> VAR_17 ; TYPE_7 VAR_18 = VAR_19 + VAR_20 -> VAR_21 ; TYPE_8 VAR_22 = VAR_23 + ( sizeof ( struct STRUCT_OR_UNION_3 ) * VAR_24 -> VAR_25 ) ; struct STRUCT_OR_UNION_4 * VAR_26 ; if ( VAR_27 < VAR_28 -> VAR_29 || VAR_30 < VAR_31 || VAR_32 < VAR_33 || VAR_34 -> VAR_35 >= ( VAR_36 / sizeof ( struct STRUCT_OR_UNION_5 ) ) || VAR_37 < VAR_38 ) { METHOD_2 ( "overflowinexecarguments\\n" ) ;  goto VAR_39 ;  } VAR_40 = METHOD_3 ( VAR_41 , 1 ) ; if ( ! VAR_42 ) { METHOD_4 ( "Failedtoallocatestorageforcopying" "inbin/renderCLs.\\n" ) ; VAR_43 = - VAR_44 ; goto VAR_45 ; } VAR_46 = VAR_47 + VAR_48 ; VAR_49 -> VAR_50 = VAR_51 + VAR_52 ; VAR_53 -> VAR_54 = VAR_55 + VAR_56 ; VAR_57 -> VAR_58 = VAR_59 + VAR_60 ; VAR_61 -> VAR_62 = VAR_63 -> VAR_64 ; if ( METHOD_5 ( VAR_65 , ( TYPE_9 TYPE_10 * ) ( TYPE_11 ) VAR_66 -> VAR_67 , VAR_68 -> VAR_69 ) ) { VAR_70 = - VAR_71 ; goto VAR_72 ; } if ( METHOD_6 ( VAR_73 -> VAR_74 , ( TYPE_12 TYPE_13 * ) ( TYPE_14 ) VAR_75 -> VAR_76 , VAR_77 -> VAR_78 ) ) { VAR_79 = - VAR_80 ; goto VAR_81 ; } if ( METHOD_7 ( VAR_82 -> VAR_83 , ( TYPE_15 TYPE_16 * ) ( TYPE_17 ) VAR_84 -> VAR_85 , VAR_86 -> VAR_87 ) ) { VAR_88 = - VAR_89 ; goto VAR_90 ; } VAR_91 = METHOD_8 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( METHOD_9 ( VAR_95 ) ) { METHOD_10 ( "Couldn\'tallocateBOforbinning\\n" ) ; VAR_96 = METHOD_11 ( VAR_97 ) ; goto VAR_98 ; } VAR_99 -> VAR_100 = & VAR_101 -> VAR_102 ; METHOD_12 ( & METHOD_13 ( & VAR_103 -> VAR_104 -> VAR_105 ) -> VAR_106 , & VAR_107 -> VAR_108 ) ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 -> VAR_113 + VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 -> VAR_121 -> VAR_122 + VAR_123 ; VAR_124 -> VAR_125 = VAR_126 -> VAR_127 -> VAR_128 + VAR_129 ; VAR_130 -> VAR_131 = VAR_132 -> VAR_133 ; VAR_134 -> VAR_135 = VAR_136 -> VAR_137 -> VAR_138 + VAR_139 ; VAR_140 -> VAR_141 = VAR_142 -> VAR_143 -> VAR_144 + VAR_145 ; VAR_146 -> VAR_147 = VAR_148 -> VAR_149 ; VAR_150 = METHOD_14 ( VAR_151 , VAR_152 -> VAR_153 -> VAR_154 + VAR_155 , VAR_156 , VAR_157 ) ; if ( VAR_158 ) goto VAR_159 ; VAR_160 = METHOD_15 ( VAR_161 , VAR_162 ) ; if ( VAR_163 ) goto VAR_164 ; VAR_165 = METHOD_16 ( VAR_166 , VAR_167 -> VAR_168 , ~ 0ull , VAR_169 ) ; VAR_170 : METHOD_17 ( VAR_171 ) ; return VAR_172 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * TYPE_3 , TYPE_4 TYPE_5 TYPE_6 , const TYPE_7 * VAR_2 TYPE_8 , VAR_3 TYPE_9 TYPE_10 , VAR_4 TYPE_11 TYPE_12 , VAR_5 TYPE_13 TYPE_14 , TYPE_15 VAR_6 TYPE_16 ) {  struct STRUCT_OR_UNION_1 VAR_7 ;  TYPE_17 VAR_8 , VAR_9 , VAR_10 ; unsigned TYPE_18 VAR_11 , VAR_12 ; const unsigned TYPE_19 * VAR_13 ;  METHOD_1 ( * TYPE_20 ) ;  METHOD_2 ( & VAR_14 , TYPE_21 , sizeof ( VAR_15 ) ) ; METHOD_3 ( VAR_16 , METHOD_4 ( VAR_17 ) , VAR_18 . VAR_19 . VAR_20 ) ; VAR_21 = METHOD_5 ( VAR_22 . VAR_23 . VAR_24 ) ; METHOD_6 ( ( VAR_25 , "len=%d" , VAR_26 - 4 ) ) ; if ( 2 < VAR_27 -> VAR_28 && 4 < VAR_29 ) { METHOD_7 ( ( VAR_30 , "" ) ) ; if ( ! METHOD_8 ( VAR_31 , ( const TYPE_22 * ) ( TYPE_23 + 1 ) , VAR_32 - 4 ) ) goto VAR_33 ; } VAR_34 = VAR_35 - sizeof ( struct STRUCT_OR_UNION_2 ) ; VAR_36 = 0 ; VAR_37 = 0 ; VAR_38 = ( const unsigned TYPE_24 * ) ( TYPE_25 ) + sizeof ( struct STRUCT_OR_UNION_3 ) ; switch ( VAR_39 . VAR_40 ) { case VAR_41 : METHOD_9 ( ( VAR_42 , "ipv4:" ) ) ; VAR_43 = 1 ; break ; case VAR_44 : METHOD_10 ( ( VAR_45 , "fqdn:" ) ) ; VAR_46 = 1 ; break ; case VAR_47 : METHOD_11 ( ( VAR_48 , "rfc822:" ) ) ; VAR_49 = 1 ; break ; case VAR_50 : METHOD_12 ( ( VAR_51 , "ipv6:" ) ) ; VAR_52 = 1 ; break ; case VAR_53 : METHOD_13 ( ( VAR_54 , "dn:" ) ) ; VAR_55 = 1 ; break ; case VAR_56 : METHOD_14 ( ( VAR_57 , "gn:" ) ) ; VAR_58 = 1 ; break ; case VAR_59 : METHOD_15 ( ( VAR_60 , "keyid:" ) ) ; VAR_61 = 1 ; break ; } if ( VAR_62 ) { METHOD_16 ( * VAR_63 , VAR_64 ) ; for ( VAR_65 = 0 ; VAR_66 < VAR_67 ; VAR_68 ++ ) { if ( METHOD_17 ( VAR_69 [ VAR_70 ] ) ) { METHOD_18 ( ( VAR_71 , "%c" , VAR_72 [ VAR_73 ] ) ) ; } else { METHOD_19 ( ( VAR_74 , "." ) ) ; } } } if ( VAR_75 ) { if ( ! METHOD_20 ( VAR_76 , ( const TYPE_26 * ) VAR_77 , VAR_78 ) ) goto VAR_79 ; } return ( const TYPE_27 * ) TYPE_28 + VAR_80 ; VAR_81 : METHOD_21 ( ( VAR_82 , "[|%s]" , METHOD_22 ( VAR_83 ) ) ) ; return VAR_84 ; }
TYPE_0  METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 )  { TYPE_4 VAR_3 , VAR_4 ; if ( VAR_5 > 0xff ) { METHOD_1 ( VAR_6 , VAR_7 ) ; } else { METHOD_2 ( VAR_8 , VAR_9 ) ; } if ( VAR_10 != VAR_11 ) { METHOD_3 ( VAR_12 , VAR_13 , "ber_parse_header(),expectedtag%d,got%d" , VAR_14 , VAR_15 ) ; return VAR_16 ; } METHOD_4 ( VAR_17 , VAR_18 ) ; if ( VAR_19 & 0x80 ) { VAR_20 &= ~ 0x80 ; * VAR_21 = 0 ; while ( VAR_22 -- ) METHOD_5 ( VAR_23 , * VAR_24 ) ; } else * VAR_25 = VAR_26 ; return METHOD_6 ( VAR_27 ) ; }
static VAR_0 signed TYPE_0 METHOD_0 ( const unsigned TYPE_1 * * VAR_1 , TYPE_2 * VAR_2 ) { union { unsigned TYPE_3 VAR_3 ; signed TYPE_4 VAR_4 ; } VAR_5 ; TYPE_5 VAR_6 ; register TYPE_6 VAR_7 ; unsigned TYPE_7 VAR_8 [ 4 ] ;  TYPE_8  VAR_9 ; if ( * VAR_10 < 4 ) return ( - 1 ) ; for ( VAR_11 = 0 ; VAR_12 < 4 ; VAR_13 ++ ) { VAR_14 = ( TYPE_9 ) ( * ( * VAR_15 ) ++ ) ; ( * VAR_16 ) -- ; VAR_17 [ VAR_18 ] = ( unsigned TYPE_10 ) VAR_19 ; }  VAR_20 = ( TYPE_11 ) ( VAR_21 [ 0 ] << 24 ) ;   VAR_22 |= VAR_23 [ 1 ] << 16 ;   VAR_24 |= VAR_25 [ 2 ] << 8 ;   VAR_26 |= VAR_27 [ 3 ] ;   VAR_28 . VAR_29 = ( VAR_30 & 0xffffffff ) ;  return ( VAR_31 . VAR_32 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  VAR_4 += METHOD_1 ( VAR_5 , "\\n%12.3f%12.3f%12.3f%12.3fre" , VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ;   }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 ; TYPE_0 VAR_6 , VAR_7 = sizeof ( struct STRUCT_OR_UNION_6 ) ; VAR_8 = ( struct STRUCT_OR_UNION_7 * ) VAR_9 -> VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 -> VAR_13 ) ; if ( VAR_14 > METHOD_2 ( ) ) goto VAR_15 ; VAR_16 = hlist_entry ( VAR_17 -> VAR_18 , struct STRUCT_OR_UNION_8 , VAR_19 ) ; METHOD_3 ( & VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 -> VAR_24 ; METHOD_4 ( VAR_25 ) ;  if ( METHOD_5 ( VAR_26 , 0 , VAR_27 - VAR_28 -> VAR_29 , VAR_30 ) < 0 ) {  METHOD_6 ( VAR_31 ) ; VAR_32 = VAR_33 ; goto VAR_34 ; } METHOD_7 ( VAR_35 , VAR_36 ) ; METHOD_8 ( VAR_37 -> VAR_38 - VAR_39 , METHOD_9 ( VAR_40 ) , VAR_41 ) ; METHOD_10 ( VAR_42 , - VAR_43 ) ; METHOD_11 ( VAR_44 ) ; METHOD_12 ( VAR_45 ) ; METHOD_13 ( VAR_46 , VAR_47 , VAR_48 ) { VAR_49 = VAR_50 -> VAR_51 -> VAR_52 - VAR_53 ; METHOD_14 ( METHOD_15 ( VAR_54 , VAR_55 ) , VAR_56 -> VAR_57 -> VAR_58 + VAR_59 , VAR_60 ) ; } VAR_61 : METHOD_16 ( VAR_62 ) ; return VAR_63 ; }
TYPE_0 METHOD_0 ( TYPE_1 )  { struct STRUCT_OR_UNION_0 * VAR_0 ;  METHOD_1 ( VAR_1 ) ;   VAR_2 = VAR_3 -> STRUCT_OR_UNION_1 ;   VAR_4 -> STRUCT_OR_UNION_2 = VAR_5 ;   METHOD_2 ( VAR_6 ) ;  if ( METHOD_3 ( & VAR_7 -> VAR_8 ) ) { if ( VAR_9 -> VAR_10 && VAR_11 -> VAR_12 -> METHOD_4 ) VAR_13 -> VAR_14 -> METHOD_5 ( VAR_15 -> VAR_16 ) ; METHOD_6 ( VAR_17 ) ; } METHOD_7 ( VAR_18 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_2 ( VAR_5 ) ; TYPE_3 * VAR_6 = VAR_7 ;  TYPE_4 VAR_8 = 0 ;  if VAR_9 METHOD_3 ( VAR_10 ) ; METHOD_4 ( VAR_11 ) ; VAR_12 |= METHOD_5 ( & VAR_13 -> VAR_14 , & VAR_15 -> VAR_16 , sizeof ( VAR_17 ) ) ; VAR_18 |= METHOD_6 ( & VAR_19 -> VAR_20 , & VAR_21 -> VAR_22 , sizeof ( VAR_23 -> VAR_24 ) ) ; VAR_25 |= METHOD_7 ( & VAR_26 -> VAR_27 , & VAR_28 -> VAR_29 , sizeof ( VAR_30 -> VAR_31 ) ) ; return VAR_32 ? - VAR_33 : 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 , TYPE_8 * VAR_7 , TYPE_9 VAR_8 ) { TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; unsigned TYPE_13 * VAR_12 ; TYPE_14 VAR_13 ; TYPE_15 VAR_14 ; TYPE_16 VAR_15 ; TYPE_17 VAR_16 ; TYPE_18 VAR_17 = 0 ; TYPE_19 VAR_18 = 0 ; TYPE_20 VAR_19 ; TYPE_21 VAR_20 ; TYPE_22 VAR_21 ; TYPE_23 VAR_22 ; TYPE_24 VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 . VAR_28 = 0 ; VAR_29 . VAR_30 = VAR_31 . VAR_32 = VAR_33 ; VAR_34 = METHOD_1 ( VAR_35 , VAR_36 , VAR_37 ) ; METHOD_2 ( VAR_38 != VAR_39 ) ; VAR_40 = METHOD_3 ( VAR_41 , VAR_42 , VAR_43 ) ; if ( VAR_44 != VAR_45 && VAR_46 -> VAR_47 . VAR_48 != 0 ) {  * VAR_49 = ( TYPE_25 ) VAR_50 ;  return VAR_51 ; }  if ( VAR_52 -> VAR_53 . VAR_54 < VAR_55 + 14 ) {  * VAR_56 = 0 ; return VAR_57 ; } VAR_58 = ( unsigned TYPE_26 * ) VAR_59 -> VAR_60 . VAR_61 + VAR_62 ; VAR_63 = VAR_64 [ 0 ] ; VAR_65 |= VAR_66 [ 1 ] << 8 ; VAR_67 = VAR_68 [ 2 ] ; VAR_69 |= VAR_70 [ 3 ] << 8 ; if ( VAR_71 [ 4 ] != 0xFF || VAR_72 [ 5 ] != 0xFF ) { * VAR_73 = 0 ; return VAR_74 ; } if ( VAR_75 != VAR_76 && VAR_77 != 0xFFFF ) { * VAR_78 = 0 ; return VAR_79 ; } if ( VAR_80 == VAR_81 && ! ( VAR_82 == 0xFFFF || VAR_83 == VAR_84 -> VAR_85 ) ) { * VAR_86 = 0 ; return VAR_87 ; } if ( ( VAR_88 -> VAR_89 == VAR_90 && VAR_91 > 1 ) || ( VAR_92 -> VAR_93 == VAR_94 && VAR_95 != VAR_96 ) || ( VAR_97 -> VAR_98 == VAR_99 && VAR_100 != VAR_101 ) || ( VAR_102 -> VAR_103 == VAR_104 && VAR_105 != VAR_106 ) ) { * VAR_107 = 0 ; return VAR_108 ; } switch ( VAR_109 ) { case VAR_110 : case VAR_111 : case VAR_112 : VAR_113 = 8 ; if ( VAR_114 != VAR_115 ) VAR_116 = 15 ; break ; case VAR_117 : VAR_118 = 16 ; break ; case VAR_119 : VAR_120 = 20 ; break ; default : * VAR_121 = 0 ; return VAR_122 ; } VAR_123 = METHOD_4 ( VAR_124 , VAR_125 -> VAR_126 , VAR_127 + 14 , VAR_128 + 6 , & VAR_129 , & VAR_130 ) ; if ( VAR_131 != 0 ) { * VAR_132 = VAR_133 ; return VAR_134 ; } if ( VAR_135 == VAR_136 ) { if ( VAR_137 != 0xFFFF ) { if ( VAR_138 -> VAR_139 == VAR_140 ) { unsigned TYPE_27 VAR_141 [ 4 ] ; VAR_142 * VAR_143 ; TYPE_28 VAR_144 ; METHOD_5 ( VAR_145 , VAR_146 ) ; VAR_147 = METHOD_6 ( VAR_148 , VAR_149 -> VAR_150 , & VAR_151 ) ; if ( VAR_152 != 0 ) { VAR_153 = VAR_154 ; goto VAR_155 ; } METHOD_7 ( VAR_156 -> VAR_157 == 16 ) ; for ( VAR_158 = 0 ; VAR_159 < VAR_160 -> VAR_161 ; VAR_162 ++ ) ( ( TYPE_29 * ) VAR_163 -> VAR_164 ) [ VAR_165 ] ^= 0xF0 ; VAR_166 = METHOD_8 ( VAR_167 , VAR_168 , 0 , & VAR_169 [ 0 ] , 4 , VAR_170 , VAR_171 ) ; METHOD_9 ( VAR_172 , VAR_173 ) ; } else { VAR_174 = METHOD_10 ( VAR_175 , 0 , ( ( VAR_176 -> VAR_177 & VAR_178 ) != 0 ) , 0 , 0 , VAR_179 -> VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; } if ( VAR_185 != 0 ) { VAR_186 = VAR_187 ; goto VAR_188 ; } } VAR_189 = METHOD_11 ( VAR_190 , VAR_191 -> VAR_192 -> VAR_193 . VAR_194 ) ; } if ( VAR_195 -> VAR_196 . VAR_197 != VAR_198 + 14 + VAR_199 + VAR_200 ) { VAR_201 = VAR_202 ; goto VAR_203 ; } switch ( VAR_204 ) { case VAR_205 : case VAR_206 : case VAR_207 : case VAR_208 : VAR_209 . VAR_210 = VAR_211 ; break ; case VAR_212 : VAR_213 . VAR_214 = VAR_215 ; break ; case VAR_216 : VAR_217 . VAR_218 = VAR_219 ; break ; default : METHOD_12 ( ) ; } VAR_220 = METHOD_13 ( VAR_221 , VAR_222 . VAR_223 , & VAR_224 ) ; if ( VAR_225 != 0 ) { VAR_226 = VAR_227 ; goto VAR_228 ; } VAR_229 . VAR_230 = VAR_231 ; VAR_232 = METHOD_14 ( VAR_233 , VAR_234 . VAR_235 , VAR_236 , VAR_237 -> VAR_238 , VAR_239 -> VAR_240 , VAR_241 , VAR_242 , VAR_243 , VAR_244 , & VAR_245 ) ; if ( VAR_246 != 0 ) { VAR_247 = VAR_248 ; goto VAR_249 ; } switch ( VAR_250 ) { case VAR_251 : case VAR_252 : VAR_253 = METHOD_15 ( VAR_254 , VAR_255 -> VAR_256 , VAR_257 , ( METHOD_16 ( VAR_258 -> VAR_259 , VAR_260 ) ? VAR_261 -> VAR_262 -> VAR_263 . VAR_264 : VAR_265 ) , VAR_266 . VAR_267 , 16 ) ; if ( VAR_268 != 0 ) { VAR_269 = VAR_270 ; goto VAR_271 ; } VAR_272 . VAR_273 = VAR_274 ; VAR_275 . VAR_276 = VAR_277 . VAR_278 + 16 - VAR_279 . VAR_280 ; VAR_281 = METHOD_17 ( VAR_282 . VAR_283 , VAR_284 + 14 , VAR_285 . VAR_286 ) ; break ; case VAR_287 : case VAR_288 : VAR_289 = METHOD_18 ( VAR_290 . VAR_291 , VAR_292 + 14 , VAR_293 ) ; break ; default : VAR_294 = 0 ; VAR_295 = VAR_296 ; goto VAR_297 ; break ; } if ( VAR_298 != 0 ) { VAR_299 = 0 ; VAR_300 = VAR_301 ; goto VAR_302 ; } if ( VAR_303 == VAR_304 && ( VAR_305 -> VAR_306 & VAR_307 ) == 0 ) { VAR_308 = METHOD_19 ( & VAR_309 , VAR_310 , VAR_311 ) ; if ( VAR_312 != VAR_313 ) goto VAR_314 ; } if ( VAR_315 != VAR_316 ) * VAR_317 = ( VAR_318 != 0xFFFF ) ; if ( VAR_319 != VAR_320 ) * VAR_321 = VAR_322 ; if ( ( VAR_323 -> VAR_324 && VAR_325 != 0xff ) || ( ! VAR_326 -> VAR_327 && VAR_328 != 0 ) ) { * VAR_329 = ( TYPE_30 ) VAR_330 ; VAR_331 = VAR_332 ; } VAR_333 = 0 ; VAR_334 = METHOD_20 ( & VAR_335 -> VAR_336 , ( TYPE_31 ) VAR_337 ) ; VAR_338 : METHOD_21 ( VAR_339 , & VAR_340 ) ; * VAR_341 = VAR_342 ; return VAR_343 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 ) {  TYPE_4 VAR_4 ;  TYPE_5 VAR_5 ;  VAR_6 = METHOD_1 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ;  if ( ! METHOD_2 ( VAR_11 ) ) return VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; VAR_16 ++ ) { if ( VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 & VAR_21 )  * VAR_22 |= VAR_23 ;  if ( VAR_24 -> VAR_25 [ VAR_26 ] . VAR_27 & VAR_28 ) * VAR_29 |= VAR_30 ; } return VAR_31 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {   TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ;  if ( VAR_5 != VAR_6 ) {  TYPE_6 * VAR_7 ;   METHOD_1 ( VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , & VAR_12 ) ;  METHOD_2 ( & VAR_13 -> VAR_14 , VAR_15 , VAR_16 ) ; return VAR_17 ; } else { return VAR_18 ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_1 VAR_4 ; if ( VAR_5 ) { VAR_6 -> VAR_7 = VAR_8 ; for ( VAR_9 = VAR_10 -> VAR_11 - 1 ; VAR_12 >= 0 ; VAR_13 -- ) METHOD_1 ( VAR_14 -> VAR_15 [ VAR_16 ] ) ;  METHOD_2 ( VAR_17 ) ;  } }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 TYPE_3 * TYPE_4 * VAR_2 , VAR_3 VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 = 0 ; struct STRUCT_OR_UNION_2 VAR_8 ; struct STRUCT_OR_UNION_3 VAR_9 ; if ( METHOD_1 ( VAR_10 < 0 ) ) return - VAR_11 ; if ( METHOD_2 ( VAR_12 > VAR_13 / sizeof ( * VAR_14 ) ) ) VAR_15 = VAR_16 / sizeof ( * VAR_17 ) ; if ( METHOD_3 ( ! METHOD_4 ( VAR_18 , VAR_19 , ( VAR_20 * sizeof ( * VAR_21 ) ) ) ) ) return - VAR_22 ; VAR_23 = METHOD_5 ( VAR_24 ) ; if ( METHOD_6 ( ! VAR_25 ) ) { METHOD_7 ( "EINVAL:io_submit:invalidcontextid\\n" ) ; return - VAR_26 ; } METHOD_8 ( & VAR_27 , VAR_28 ) ; METHOD_9 ( & VAR_29 ) ; for ( VAR_30 = 0 ; VAR_31 < VAR_32 ; VAR_33 ++ ) { struct STRUCT_OR_UNION_4 TYPE_7 * VAR_34 ; struct STRUCT_OR_UNION_5 VAR_35 ; if ( METHOD_10 ( METHOD_11 ( VAR_36 , VAR_37 + VAR_38 ) ) ) { VAR_39 = - VAR_40 ; break ; } if ( METHOD_12 ( METHOD_13 ( & VAR_41 , VAR_42 , sizeof ( VAR_43 ) ) ) ) { VAR_44 = - VAR_45 ; break ; } VAR_46 = METHOD_14 ( VAR_47 , VAR_48 , & VAR_49 , & VAR_50 , VAR_51 ) ; if ( VAR_52 ) break ; } METHOD_15 ( & VAR_53 ) ;  METHOD_16 ( & VAR_54 ) ;  METHOD_17 ( VAR_55 ) ; return VAR_56 ? VAR_57 : VAR_58 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ;  VAR_6 -> VAR_7 = VAR_8 ;  METHOD_1 ( & VAR_9 -> VAR_10 ) ; VAR_11 -> VAR_12 = 0 ; if ( VAR_13 -> VAR_14 . VAR_15 == - VAR_16 ) VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; if ( VAR_21 -> VAR_22 ) METHOD_2 ( VAR_23 -> VAR_24 , & VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; VAR_29 -> VAR_30 = VAR_31 ; METHOD_3 ( VAR_32 ) ; METHOD_4 ( & VAR_33 -> VAR_34 ) ; METHOD_5 ( & VAR_35 -> VAR_36 , & VAR_37 -> VAR_38 ) ; METHOD_6 ( & VAR_39 -> VAR_40 ) ;  if ( VAR_41 -> VAR_42 > 1 )  METHOD_7 ( VAR_43 -> VAR_44 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; static const TYPE_2 VAR_3 [ VAR_4 ] = { [ VAR_5 ] = VAR_6 , [ VAR_7 ] = VAR_8 ,  [ VAR_9 ] = VAR_10 ,  [ VAR_11 ] = VAR_12 ,  [ VAR_13 ] = VAR_14 ,  [ VAR_15 ] = VAR_16 , } ; VAR_17 -> VAR_18 = 0 ; for ( VAR_19 = 0 ; VAR_20 < VAR_21 ; VAR_22 ++ ) { METHOD_1 ( & VAR_23 -> VAR_24 [ VAR_25 ] . VAR_26 , VAR_27 [ VAR_28 ] ) ; VAR_29 -> VAR_30 [ VAR_31 ] . VAR_32 = VAR_33 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const struct STRUCT_OR_UNION_0 * VAR_3 = ( const struct STRUCT_OR_UNION_1 * ) VAR_4 ; const TYPE_4 * VAR_5 = "<elided>" ; METHOD_1 ( * VAR_6 , VAR_7 ) ; if ( VAR_8 < VAR_9 ) goto VAR_10 ; VAR_11 += VAR_12 ; VAR_13 -= VAR_14 ; if ( METHOD_2 ( VAR_15 -> VAR_16 ) ) { METHOD_3 ( VAR_17 -> VAR_18 , VAR_19 ) ; if ( VAR_20 < VAR_21 ) goto VAR_22 ; VAR_23 = METHOD_4 ( VAR_24 , VAR_25 -> VAR_26 ) ; VAR_27 += VAR_28 ; VAR_29 -= VAR_30 ; } METHOD_5 ( ( VAR_31 , "[dagid:%s,seq:%u,instance:%u,status:%u]" , VAR_32 , VAR_33 -> VAR_34 , VAR_35 -> VAR_36 , VAR_37 -> VAR_38 ) ) ; if ( VAR_39 -> VAR_40 > 1 ) { const struct STRUCT_OR_UNION_2 * VAR_41 = ( const struct STRUCT_OR_UNION_3 * ) VAR_42 ; METHOD_6 ( VAR_43 , VAR_44 , VAR_45 ) ; } return ; VAR_46 :  METHOD_7 ( ( VAR_47 , "[|dao-truncated]" ) ) ;  return ; VAR_48 : METHOD_8 ( ( VAR_49 , "[|dao-lengthtooshort]" ) ) ; return ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; TYPE_4 * VAR_3 = VAR_4 ; unsigned TYPE_5 VAR_5 ; TYPE_6 VAR_6 = 0 ; TYPE_7 VAR_7 = 0 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; TYPE_10 VAR_10 , VAR_11 ; TYPE_11 VAR_12 , VAR_13 ; TYPE_12 VAR_14 ; struct STRUCT_OR_UNION_5 * VAR_15 = STRUCT_OR_UNION_6 -> VAR_16 ; unsigned TYPE_13 VAR_17 = STRUCT_OR_UNION_7 -> VAR_18 ; METHOD_2 ( STRUCT_OR_UNION_8 , VAR_19 , VAR_20 , VAR_21 ) ; if ( ! METHOD_3 ( STRUCT_OR_UNION_9 -> VAR_22 ) ) return - VAR_23 ; if ( METHOD_4 ( STRUCT_OR_UNION_10 ) ) { VAR_24 = METHOD_5 ( STRUCT_OR_UNION_11 -> VAR_25 ) ; if ( VAR_26 ) return VAR_27 ; } if ( VAR_28 -> VAR_29 && METHOD_6 ( VAR_30 , VAR_31 ) ) { VAR_32 = METHOD_7 ( VAR_33 , VAR_34 , VAR_35 + VAR_36 - 1 ) ; if ( VAR_37 ) return VAR_38 ; } VAR_39 = METHOD_8 ( VAR_40 , 1 << VAR_41 ) ; VAR_42 = METHOD_9 ( ( VAR_43 + VAR_44 ) , 1 << VAR_45 ) ; if ( VAR_46 < VAR_47 || VAR_48 > VAR_49 + VAR_50 ) return - VAR_51 ; VAR_52 = VAR_53 & ( ( 1 << VAR_54 ) - 1 ) ; VAR_55 = ( VAR_56 + VAR_57 ) & ( ( 1 << VAR_58 ) - 1 ) ; VAR_59 = VAR_60 >> VAR_61 ; VAR_62 = ( VAR_63 >> VAR_64 ) ; if ( VAR_65 < VAR_66 ) VAR_67 = 0 ; else VAR_68 -= VAR_69 ;  VAR_70 = VAR_71 |  VAR_72 | VAR_73 ;  if ( VAR_74 & VAR_75 )  VAR_76 |= VAR_77 ;  METHOD_10 ( & STRUCT_OR_UNION_12 -> VAR_78 ) ;  if ( ! ( METHOD_11 ( STRUCT_OR_UNION_13 , VAR_79 ) ) ) { VAR_80 = - VAR_81 ; goto VAR_82 ; } if ( ! ( VAR_83 & VAR_84 ) && VAR_85 + VAR_86 > METHOD_12 ( STRUCT_OR_UNION_14 ) ) { VAR_87 = VAR_88 + VAR_89 ; VAR_90 = METHOD_13 ( STRUCT_OR_UNION_15 , VAR_91 ) ; if ( VAR_92 ) goto VAR_93 ; if ( VAR_94 ) VAR_95 += 1 ; }  if ( VAR_96 > 0 ) {  METHOD_14 ( STRUCT_OR_UNION_16 , VAR_97 , VAR_98 - 1 ) ; STRUCT_OR_UNION_17 -> VAR_99 = STRUCT_OR_UNION_18 -> VAR_100 = METHOD_15 ( STRUCT_OR_UNION_19 ) ; METHOD_16 ( STRUCT_OR_UNION_20 ) ; METHOD_17 ( STRUCT_OR_UNION_21 ) ; VAR_101 = METHOD_18 ( STRUCT_OR_UNION_22 , VAR_102 , VAR_103 , VAR_104 , VAR_105 , VAR_106 ) ; if ( VAR_107 ) goto VAR_108 ; VAR_109 = METHOD_19 ( STRUCT_OR_UNION_23 , 0 , VAR_110 ) ; if ( VAR_111 ) goto VAR_112 ; } if ( ! VAR_113 && ! VAR_114 ) goto VAR_115 ; VAR_116 = ( 2 * METHOD_20 ( STRUCT_OR_UNION_24 , 2 ) ) + 1 ; if ( METHOD_21 ( STRUCT_OR_UNION_25 ) ) VAR_117 += 2 ; VAR_118 = METHOD_22 ( STRUCT_OR_UNION_26 , VAR_119 , VAR_120 ) ; if ( METHOD_23 ( VAR_121 ) ) { VAR_122 = METHOD_24 ( VAR_123 ) ; METHOD_25 ( STRUCT_OR_UNION_27 -> VAR_124 , VAR_125 ) ; goto VAR_126 ; } STRUCT_OR_UNION_28 -> VAR_127 = STRUCT_OR_UNION_29 -> VAR_128 = METHOD_26 ( STRUCT_OR_UNION_30 ) ; if ( VAR_129 ) { METHOD_27 ( STRUCT_OR_UNION_31 , VAR_130 ) ; } else { if ( ( VAR_131 + VAR_132 ) > METHOD_28 ( STRUCT_OR_UNION_32 ) ) METHOD_29 ( STRUCT_OR_UNION_33 , VAR_133 ) ; } METHOD_30 ( VAR_134 , STRUCT_OR_UNION_34 ) ; VAR_135 = METHOD_31 ( VAR_136 , STRUCT_OR_UNION_35 , VAR_137 , VAR_138 ) ; if ( STRUCT_OR_UNION_36 -> VAR_139 & VAR_140 ) METHOD_32 ( VAR_141 ) ; METHOD_33 ( VAR_142 ) ; VAR_143 : METHOD_34 ( STRUCT_OR_UNION_37 ) ; VAR_144 : METHOD_35 ( & STRUCT_OR_UNION_38 -> VAR_145 ) ; return VAR_146 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { if ( VAR_2 -> METHOD_1 < VAR_3 -> VAR_4 ) { VAR_5 -> VAR_6 [ VAR_7 -> METHOD_2 ++ ] = VAR_8 ;  } else {  TYPE_3 VAR_9 = VAR_10 -> VAR_11 * 2 ; TYPE_4 * VAR_12 = METHOD_3 ( VAR_13 -> VAR_14 , VAR_15 * sizeof ( TYPE_5 * ) ) ; if ( VAR_16 ) { VAR_17 -> VAR_18 = VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 [ VAR_25 -> METHOD_4 ++ ] = VAR_26 ; } else { METHOD_5 ( VAR_27 ) ; }  }  }
struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 ; VAR_4 = METHOD_2 ( VAR_5 ) ; if ( METHOD_3 ( VAR_6 ) ) return VAR_7 ;  METHOD_4 ( VAR_8 , VAR_9 ) ;  METHOD_5 ( VAR_10 ) ; return VAR_11 ; }
TYPE_0 METHOD_0 ( const TYPE_1 VAR_0 [ 4 ] ) {  if ( METHOD_1 ( VAR_1 , "YUV4" , 4 ) == 0 ) { return 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 ; while ( VAR_9 ) { TYPE_8 VAR_10 , VAR_11 , VAR_12 ; TYPE_9 VAR_13 = 0 ;  if ( VAR_14 && VAR_15 < 4 ) {  METHOD_1 ( "Process_ipfix[%u]Templatesizeerrorat%sline%u" , VAR_16 -> VAR_17 . VAR_18 , VAR_19 , VAR_20 , METHOD_2 ( VAR_21 ) ) ; VAR_22 = 0 ; continue ; } VAR_23 = ( TYPE_10 * ) VAR_24 ; VAR_25 -= 4 ; VAR_26 = METHOD_3 ( VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 -> VAR_31 ) ; METHOD_5 ( "\\n[%u]TemplateID:%u\\n" , VAR_32 -> VAR_33 . VAR_34 , VAR_35 ) ; METHOD_6 ( "FieldCount:%ubuffersize:%u\\n" , VAR_36 , VAR_37 ) ; METHOD_7 ( ( TYPE_11 * ) VAR_38 . VAR_39 , 0 , ( VAR_40 + 1 ) * sizeof ( TYPE_12 ) ) ; METHOD_8 ( ( TYPE_13 * ) VAR_41 . VAR_42 , 0 , 65536 * sizeof ( struct STRUCT_OR_UNION_0 ) ) ; for ( VAR_43 = 1 ; VAR_44 [ VAR_45 ] . VAR_46 != 0 ; VAR_47 ++ ) { TYPE_14 VAR_48 = VAR_49 [ VAR_50 ] . VAR_51 ; if ( VAR_52 [ VAR_53 ] . VAR_54 == VAR_55 [ VAR_56 - 1 ] . VAR_57 ) continue ; VAR_58 . VAR_59 [ VAR_60 ] . VAR_61 = VAR_62 ; } VAR_63 . VAR_64 = METHOD_9 ( VAR_65 , sizeof ( struct STRUCT_OR_UNION_1 ) ) ; if ( ! VAR_66 . VAR_67 ) { METHOD_10 ( "Process_ipfix:Panic!malloc():%sline%d:%s" , VAR_68 , VAR_69 , METHOD_11 ( VAR_70 ) ) ; VAR_71 = 0 ; continue ; } VAR_72 . VAR_73 = VAR_74 ; VAR_75 = 4 * VAR_76 ; if ( VAR_77 < VAR_78 ) { METHOD_12 ( "Process_ipfix:[%u]Notenoughdatafortemplateelements!required:%i,left:%u" , VAR_79 -> VAR_80 . VAR_81 , VAR_82 , VAR_83 ) ; METHOD_13 ( "ERROR:Notenoughdatafortemplateelements!required:%i,left:%u" , VAR_84 , VAR_85 ) ; return ; } VAR_86 = ( TYPE_15 * ) VAR_87 -> VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 ; VAR_92 ++ ) { TYPE_16 VAR_93 , VAR_94 ; TYPE_17 VAR_95 ; TYPE_18 VAR_96 ; VAR_97 = METHOD_14 ( VAR_98 -> VAR_99 ) ; VAR_100 = METHOD_15 ( VAR_101 -> VAR_102 ) ; VAR_103 = VAR_104 & 0x8000 ? 1 : 0 ; VAR_105 = VAR_106 & 0x7FFF ; VAR_107 = METHOD_16 ( VAR_108 , VAR_109 , VAR_110 ) ; if ( VAR_111 && VAR_112 [ VAR_113 ] . VAR_114 ) { if ( VAR_115 . VAR_116 [ VAR_117 ] == 0 ) { VAR_118 . VAR_119 [ VAR_120 ] = 1 ; VAR_121 ++ ; } } if ( VAR_122 ) { TYPE_19 * VAR_123 = ( TYPE_20 * ) VAR_124 ; VAR_125 += 4 ; if ( VAR_126 < VAR_127 ) { METHOD_17 ( "Process_ipfix:[%u]Notenoughdatafortemplateelements!required:%i,left:%u" , VAR_128 -> VAR_129 . VAR_130 , VAR_131 , VAR_132 ) ; METHOD_18 ( "ERROR:Notenoughdatafortemplateelements!required:%i,left:%u" , VAR_133 , VAR_134 ) ; return ; } if ( METHOD_19 ( VAR_135 -> VAR_136 ) == VAR_137 ) { METHOD_20 ( "[%i]Enterprise:1,Type:%u,Length%uReverseInformationElement:%u\\n" , VAR_138 , VAR_139 , VAR_140 , METHOD_21 ( VAR_141 -> VAR_142 ) ) ; } else { METHOD_22 ( "[%i]Enterprise:1,Type:%u,Length%uEnterpriseNumber:%u\\n" , VAR_143 , VAR_144 , VAR_145 , METHOD_23 ( VAR_146 -> VAR_147 ) ) ; } VAR_148 ++ ; VAR_149 = ( TYPE_21 * ) VAR_150 ; } else { METHOD_24 ( "[%i]Enterprise:0,Type:%u,Length%u\\n" , VAR_151 , VAR_152 , VAR_153 ) ; VAR_154 ++ ; } } METHOD_25 ( "Processed:%u\\n" , VAR_155 ) ; if ( METHOD_26 ( ) ) { if ( VAR_156 [ VAR_157 ] . VAR_158 ) { if ( VAR_159 . VAR_160 [ VAR_161 ] == 0 ) { VAR_162 . VAR_163 [ VAR_164 ] = 1 ; VAR_165 ++ ; } METHOD_27 ( "AddsendingrouterIPaddress(%s)=>Extension:%u\\n" , VAR_166 -> VAR_167 == VAR_168 ? "ipv6" : "ipv4" , VAR_169 ) ; } VAR_170 [ VAR_171 ] . VAR_172 = 0 ; if ( VAR_173 [ VAR_174 ] . VAR_175 ) { if ( VAR_176 . VAR_177 [ VAR_178 ] == 0 ) { VAR_179 . VAR_180 [ VAR_181 ] = 1 ; VAR_182 ++ ; } METHOD_28 ( "Forceaddpacketreceivedtime,Extension:%u\\n" , VAR_183 ) ; } TYPE_22 VAR_184 { TYPE_23 VAR_185 ; for ( VAR_186 = 4 ; VAR_187 [ VAR_188 ] . VAR_189 ; VAR_190 ++ ) { if ( VAR_191 . VAR_192 [ VAR_193 ] ) { METHOD_29 ( "Enabledextension:%i\\n" , VAR_194 ) ; } } } VAR_195 = METHOD_30 ( VAR_196 , VAR_197 ) ; if ( VAR_198 -> VAR_199 ) { METHOD_31 ( "TranslationTablechanged!AddextensionmapID:%i\\n" , VAR_200 -> VAR_201 . VAR_202 -> VAR_203 ) ; METHOD_32 ( VAR_204 , VAR_205 -> VAR_206 . VAR_207 ) ; VAR_208 -> VAR_209 = 0 ; METHOD_33 ( "TranslationTableadded!mapID:%i\\n" , VAR_210 -> VAR_211 . VAR_212 -> VAR_213 ) ; } if ( ! METHOD_34 ( VAR_214 ) ) { METHOD_35 ( "Process_ipfix:[%u]Failedtoreordersequencer.Removetableid:%u" , VAR_215 -> VAR_216 . VAR_217 , VAR_218 ) ; METHOD_36 ( VAR_219 , VAR_220 , VAR_221 ) ; } } else { METHOD_37 ( "Templatedoesnotcontainanycommonfields-skip\\n" ) ; } VAR_222 -= VAR_223 ; VAR_224 = VAR_225 + VAR_226 + 4 ; if ( VAR_227 < 4 ) { METHOD_38 ( "Skip%ubytespadding\\n" , VAR_228 ) ; VAR_229 = 0 ; } METHOD_39 ( VAR_230 . VAR_231 ) ; VAR_232 . VAR_233 = VAR_234 ; } }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; TYPE_9 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_10 * VAR_22 ; VAR_23 * VAR_24 , * VAR_25 , * VAR_26 , * VAR_27 , * VAR_28 , * VAR_29 ;  TYPE_11 * VAR_30 , * VAR_31 , * VAR_32 , * VAR_33 ;  VAR_34 * VAR_35 , * VAR_36 ; METHOD_1 ( "pixFewColorsOctcubeQuantMixed" ) ; if ( ! VAR_37 || METHOD_2 ( VAR_38 ) != 32 ) return ( TYPE_12 * ) METHOD_3 ( "pixsundefinedornot32bpp" , VAR_39 , VAR_40 ) ; if ( VAR_41 <= 0 ) VAR_42 = 3 ; if ( VAR_43 > 6 ) return ( TYPE_13 * ) METHOD_4 ( "invalidlevel" , VAR_44 , VAR_45 ) ; if ( VAR_46 <= 0 ) VAR_47 = 20 ; if ( VAR_48 <= 0 ) VAR_49 = 244 ; if ( VAR_50 <= 0 ) VAR_51 = 20 ; if ( VAR_52 <= 0.0 ) VAR_53 = 0.05 ; if ( VAR_54 <= 2 ) VAR_55 = 15 ;  if ( ( VAR_56 = METHOD_5 ( VAR_57 , VAR_58 ) ) == VAR_59 )   return ( TYPE_14 * ) METHOD_6 ( "toomanycolors" , VAR_60 , VAR_61 ) ;  VAR_62 = METHOD_7 ( VAR_63 ) ; VAR_64 = METHOD_8 ( VAR_65 ) ; VAR_66 = METHOD_9 ( 8 ) ; VAR_67 = ( TYPE_15 * ) METHOD_10 ( 256 , sizeof ( TYPE_16 ) ) ; for ( VAR_68 = 0 ; VAR_69 < 256 ; VAR_70 ++ ) VAR_71 [ VAR_72 ] = - 1 ; for ( VAR_73 = 0 , VAR_74 = 0 ; VAR_75 < VAR_76 ; VAR_77 ++ ) { METHOD_11 ( VAR_78 , VAR_79 , & VAR_80 , & VAR_81 , & VAR_82 ) ; VAR_83 = METHOD_12 ( VAR_84 , VAR_85 ) ; VAR_86 = METHOD_13 ( VAR_87 , VAR_88 ) ; if ( VAR_89 > VAR_90 ) continue ; VAR_91 = METHOD_14 ( VAR_92 , VAR_93 ) ; VAR_94 = METHOD_15 ( VAR_95 , VAR_96 ) ; if ( VAR_97 < VAR_98 ) continue ; if ( VAR_99 - VAR_100 >= VAR_101 ) { METHOD_16 ( VAR_102 , VAR_103 , VAR_104 , VAR_105 ) ; VAR_106 [ VAR_107 ] = VAR_108 ; VAR_109 ++ ; } } METHOD_17 ( VAR_110 , & VAR_111 , & VAR_112 , VAR_113 ) ; VAR_114 = METHOD_18 ( VAR_115 , VAR_116 , 8 ) ; METHOD_19 ( VAR_117 , VAR_118 ) ; VAR_119 = METHOD_20 ( VAR_120 , VAR_121 , 1 ) ; VAR_122 = METHOD_21 ( VAR_123 ) ; VAR_124 = METHOD_22 ( VAR_125 ) ; VAR_126 = METHOD_23 ( VAR_127 ) ; VAR_128 = METHOD_24 ( VAR_129 ) ; VAR_130 = METHOD_25 ( VAR_131 ) ; VAR_132 = METHOD_26 ( VAR_133 ) ; for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) { VAR_138 = VAR_139 + VAR_140 * VAR_141 ; VAR_142 = VAR_143 + VAR_144 * VAR_145 ; VAR_146 = VAR_147 + VAR_148 * VAR_149 ; for ( VAR_150 = 0 ; VAR_151 < VAR_152 ; VAR_153 ++ ) { VAR_154 = METHOD_27 ( VAR_155 , VAR_156 ) ; if ( VAR_157 [ VAR_158 ] == - 1 ) METHOD_28 ( VAR_159 , VAR_160 ) ; else METHOD_29 ( VAR_161 , VAR_162 , VAR_163 [ VAR_164 ] ) ; } } VAR_165 = METHOD_30 ( VAR_166 , 0 ) ; METHOD_31 ( VAR_167 , VAR_168 , VAR_169 , VAR_170 , VAR_171 ) ; METHOD_32 ( VAR_172 ) ; METHOD_33 ( & VAR_173 ) ; METHOD_34 ( & VAR_174 ) ; METHOD_35 ( & VAR_175 ) ; return VAR_176 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * const VAR_7 = & VAR_8 -> VAR_9 ; TYPE_9 * VAR_10 = & VAR_11 -> VAR_12 [ 0 ] ; TYPE_10 * VAR_13 = & VAR_14 -> VAR_15 . VAR_16 [ 0 ] ; TYPE_11 VAR_17 ; TYPE_12 VAR_18 ; TYPE_13 VAR_19 ; TYPE_14 VAR_20 ; TYPE_15 VAR_21 = 3 ; TYPE_16 VAR_22 = ( VAR_23 - 1 ) - VAR_24 ; TYPE_17 VAR_25 ; TYPE_18 VAR_26 = VAR_27 -> VAR_28 [ VAR_29 ] ; TYPE_19 VAR_30 = 256 ;  VAR_31 . VAR_32 = VAR_33 ;  VAR_34 -> VAR_35 . VAR_36 = VAR_37 -> VAR_38 + VAR_39 ; VAR_40 . VAR_41 = 0 ; VAR_42 . VAR_43 . VAR_44 = VAR_45 -> VAR_46 . VAR_47 >> 3 ; VAR_48 . VAR_49 . VAR_50 = VAR_51 -> VAR_52 . VAR_53 >> 3 ; VAR_54 = VAR_55 -> METHOD_1 ( VAR_56 , VAR_57 , VAR_58 , & VAR_59 , & VAR_60 , VAR_61 , VAR_62 -> VAR_63 , & VAR_64 , & VAR_65 , VAR_66 -> VAR_67 , VAR_68 ) ; if ( VAR_69 < VAR_70 - VAR_71 ) VAR_72 += VAR_73 ; if ( VAR_74 < * VAR_75 ) { * VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = VAR_80 . VAR_81 . VAR_82 ; VAR_83 -> VAR_84 = VAR_85 . VAR_86 . VAR_87 ; } VAR_88 = VAR_89 ; VAR_90 = 0 ; while ( VAR_91 < VAR_92 ) { VAR_93 ++ ; if ( VAR_94 ) VAR_95 -- ; else { VAR_96 = VAR_97 -> METHOD_2 ( VAR_98 , VAR_99 , VAR_100 , & VAR_101 , & VAR_102 , VAR_103 + VAR_104 , VAR_105 -> VAR_106 , & VAR_107 , & VAR_108 , VAR_109 -> VAR_110 , VAR_111 ) ; if ( VAR_112 < VAR_113 - VAR_114 ) VAR_115 += VAR_116 ; if ( VAR_117 < * VAR_118 ) { * VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 . VAR_124 . VAR_125 ; VAR_126 -> VAR_127 = VAR_128 . VAR_129 . VAR_130 ; } } } }
static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , "kpp" , sizeof ( VAR_5 . VAR_6 ) ) ;  if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = ( VAR_4 ? ( TYPE_5 ) VAR_5 : METHOD_1 ( VAR_6 ) ) + 1 ; TYPE_6 * VAR_7 ; TYPE_7 * VAR_8 = VAR_9 ; unsigned TYPE_8 VAR_10 ; TYPE_9 VAR_11 = VAR_12 ;  TYPE_10 VAR_13 = 0 ;  TYPE_11 VAR_14 ; TYPE_12 VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 ) ; if ( ! VAR_18 ) return VAR_19 ; VAR_20 = VAR_21 - 1 ; while ( VAR_22 -- ) { VAR_23 = * VAR_24 ; if ( METHOD_3 ( VAR_25 ) ) VAR_26 [ VAR_27 ++ ] = VAR_28 ; else { VAR_29 += 2 ; if ( VAR_30 > VAR_31 ) { VAR_32 *= 2 ; VAR_33 = METHOD_4 ( VAR_34 , VAR_35 ) ; if ( ! VAR_36 ) { METHOD_5 ( VAR_37 ) ; return VAR_38 ; } else { VAR_39 = VAR_40 ; } } VAR_41 = METHOD_6 ( VAR_42 , & VAR_43 , 1 ) ; if ( VAR_44 ) { METHOD_7 ( VAR_45 ) ; return VAR_46 ; } METHOD_8 ( & VAR_47 [ VAR_48 ] , 4 , "%%%02X" , VAR_49 ) ; VAR_50 += 3 ; } VAR_51 ++ ; } VAR_52 [ VAR_53 ] = 0 ; return VAR_54 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 ;  VAR_7 = 0 ;  if ( VAR_8 < 0 ) { VAR_9 = - VAR_10 ; VAR_11 = VAR_12 ; } else { VAR_13 = VAR_14 ; }  if ( VAR_15 -> VAR_16 ) {  if ( VAR_17 == 8 ) { VAR_18 = VAR_19 -> VAR_20 [ VAR_21 -> VAR_22 ] ; VAR_23 -> VAR_24 += 1 ; VAR_25 -> VAR_26 += 8 ; } else if ( VAR_27 == 16 ) { TYPE_7 VAR_28 ; METHOD_1 ( & VAR_29 , & VAR_30 -> VAR_31 [ VAR_32 -> VAR_33 ] ) ; VAR_34 = VAR_35 ; VAR_36 -> VAR_37 += 2 ; VAR_38 -> VAR_39 += 16 ; } else if ( VAR_40 == 32 ) { METHOD_2 ( & VAR_41 , & VAR_42 -> VAR_43 [ VAR_44 -> VAR_45 ] ) ; VAR_46 -> VAR_47 += 4 ; VAR_48 -> VAR_49 += 32 ; } else METHOD_3 ( VAR_50 , "can\'tread%dbits" , VAR_51 ) ; } else { VAR_52 = 0 ; if ( VAR_53 & 7 ) {  VAR_54 = VAR_55 & 7 ;  for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { VAR_60 |= ( METHOD_4 ( VAR_61 -> VAR_62 , & VAR_63 -> VAR_64 ) << VAR_65 ) ; } VAR_66 = VAR_67 - VAR_68 ; } if ( VAR_69 ) { for ( VAR_70 = 0 ; VAR_71 < VAR_72 ; VAR_73 += 8 ) {  METHOD_5 ( VAR_74 . VAR_75 . VAR_76 , & VAR_77 , VAR_78 -> VAR_79 , & VAR_80 -> VAR_81 ) ;   VAR_82 |= ( VAR_83 << ( VAR_84 + VAR_85 ) ) ;  } } VAR_86 -> VAR_87 = ( VAR_88 -> VAR_89 >> 3 ) + 1 ; } if ( VAR_90 && VAR_91 > 0 && VAR_92 < 32 ) { if ( VAR_93 & ( 1 << ( VAR_94 - 1 ) ) ) { VAR_95 |= - 1 ^ ( ( 1 << VAR_96 ) - 1 ) ; } } return VAR_97 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ; unsigned TYPE_1 VAR_3 ;  TYPE_2 VAR_4 = - VAR_5 ;  if ( ! VAR_6 ) return VAR_7 ; if ( METHOD_1 ( ! VAR_8 || ! VAR_9 -> VAR_10 ) ) goto VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ; METHOD_2 ( & VAR_15 -> VAR_16 ) ; if ( METHOD_3 ( VAR_17 , & VAR_18 ) ) { METHOD_4 ( & VAR_19 -> VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 , "control%i:%i:%i:%s:%iisalreadypresent\\n" , VAR_23 . VAR_24 , VAR_25 . VAR_26 , VAR_27 . VAR_28 , VAR_29 . VAR_30 , VAR_31 . VAR_32 ) ; VAR_33 = - VAR_34 ; goto VAR_35 ; } if ( METHOD_6 ( VAR_36 , VAR_37 -> VAR_38 ) < 0 ) { METHOD_7 ( & VAR_39 -> VAR_40 ) ; VAR_41 = - VAR_42 ; goto VAR_43 ; } METHOD_8 ( & VAR_44 -> VAR_45 , & VAR_46 -> VAR_47 ) ; VAR_48 -> VAR_49 += VAR_50 -> VAR_51 ; VAR_52 -> VAR_53 . VAR_54 = VAR_55 -> VAR_56 + 1 ; VAR_57 -> VAR_58 += VAR_59 -> VAR_60 ;  METHOD_9 ( & VAR_61 -> VAR_62 ) ;   for ( VAR_63 = 0 ; VAR_64 < VAR_65 -> VAR_66 ; VAR_67 ++ , VAR_68 . VAR_69 ++ , VAR_70 . VAR_71 ++ )  METHOD_10 ( VAR_72 , VAR_73 , & VAR_74 ) ; return 0 ; VAR_75 : METHOD_11 ( VAR_76 ) ; return VAR_77 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_1 VAR_7 ; const TYPE_2 * VAR_8 ; struct STRUCT_OR_UNION_7 * VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 . VAR_12 ) ; if ( ! VAR_13 -> VAR_14 ) { VAR_15 -> VAR_16 = 1 ; METHOD_2 ( & VAR_17 -> VAR_18 ) ; } VAR_19 = VAR_20 -> VAR_21 . VAR_22 -> VAR_23 ; VAR_24 = ( struct STRUCT_OR_UNION_8 * ) VAR_25 -> STRUCT_OR_UNION_9 ; if ( ! VAR_26 ) { METHOD_3 ( & VAR_27 -> VAR_28 , "blacklistedby%s\\n" , VAR_29 ) ; return - VAR_30 ; } VAR_31 = METHOD_4 ( VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = - VAR_37 ; VAR_38 = METHOD_5 ( sizeof ( * VAR_39 ) ) ; if ( ! VAR_40 ) goto VAR_41 ; METHOD_6 ( VAR_42 , & VAR_43 -> VAR_44 ) ; VAR_45 = METHOD_7 ( VAR_46 ) ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> STRUCT_OR_UNION_10 = VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = METHOD_8 ( VAR_60 , VAR_61 | VAR_62 | VAR_63 ) ; METHOD_9 ( & VAR_64 -> VAR_65 ) ; METHOD_10 ( & VAR_66 -> VAR_67 ) ; METHOD_11 ( & VAR_68 -> VAR_69 ) ; METHOD_12 ( & VAR_70 -> VAR_71 ) ; METHOD_13 ( & VAR_72 -> VAR_73 ) ; VAR_74 -> VAR_75 . VAR_76 = VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = ( unsigned TYPE_3 ) VAR_81 ; METHOD_14 ( & VAR_82 -> VAR_83 , VAR_84 ) ; METHOD_15 ( & VAR_85 -> VAR_86 ) ; VAR_87 -> VAR_88 . VAR_89 = VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = ( unsigned TYPE_4 ) VAR_94 ; METHOD_16 ( & VAR_95 -> VAR_96 ) ; METHOD_17 ( & VAR_97 -> VAR_98 ) ; METHOD_18 ( & VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = 0 ; VAR_103 -> VAR_104 = VAR_105 ; METHOD_19 ( VAR_106 -> VAR_107 , "usb%d" ) ; METHOD_20 ( VAR_108 -> VAR_109 , VAR_110 , sizeof VAR_111 ) ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 + VAR_116 -> VAR_117 ; VAR_118 -> VAR_119 = & VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = & VAR_126 ; if ( VAR_127 -> METHOD_21 ) { VAR_128 = VAR_129 -> METHOD_22 ( VAR_130 , VAR_131 ) ; if ( VAR_132 < 0 ) goto VAR_133 ; if ( ( VAR_134 -> STRUCT_OR_UNION_11 -> VAR_135 & VAR_136 ) != 0 && ( ( VAR_137 -> STRUCT_OR_UNION_12 -> VAR_138 & VAR_139 ) == 0 || ( VAR_140 -> VAR_141 [ 0 ] & 0x02 ) == 0 ) ) METHOD_23 ( VAR_142 -> VAR_143 , "eth%d" ) ; if ( ( VAR_144 -> STRUCT_OR_UNION_13 -> VAR_145 & VAR_146 ) != 0 ) METHOD_24 ( VAR_147 -> VAR_148 , "wlan%d" ) ; if ( ( VAR_149 -> STRUCT_OR_UNION_14 -> VAR_150 & VAR_151 ) != 0 ) METHOD_25 ( VAR_152 -> VAR_153 , "wwan%d" ) ; if ( ( VAR_154 -> STRUCT_OR_UNION_15 -> VAR_155 & VAR_156 ) != 0 ) VAR_157 -> VAR_158 |= VAR_159 ; if ( VAR_160 -> VAR_161 > ( VAR_162 -> VAR_163 - VAR_164 -> VAR_165 ) ) VAR_166 -> VAR_167 = VAR_168 -> VAR_169 - VAR_170 -> VAR_171 ; } else if ( ! VAR_172 -> VAR_173 || ! VAR_174 -> VAR_175 ) VAR_176 = METHOD_26 ( VAR_177 , VAR_178 ) ; else { VAR_179 -> VAR_180 = METHOD_27 ( VAR_181 , VAR_182 -> VAR_183 ) ; VAR_184 -> VAR_185 = METHOD_28 ( VAR_186 , VAR_187 -> VAR_188 ) ; if ( ! ( VAR_189 -> VAR_190 & VAR_191 ) ) VAR_192 = METHOD_29 ( VAR_193 , VAR_194 -> VAR_195 . VAR_196 , VAR_197 -> VAR_198 . VAR_199 ) ; else VAR_200 = 0 ; } if ( VAR_201 >= 0 && VAR_202 -> VAR_203 ) VAR_204 = METHOD_30 ( VAR_205 , VAR_206 ) ; if ( VAR_207 < 0 ) goto VAR_208 ; if ( ! VAR_209 -> VAR_210 ) VAR_211 -> VAR_212 = VAR_213 -> VAR_214 ; VAR_215 -> VAR_216 = METHOD_31 ( VAR_217 -> VAR_218 , VAR_219 -> VAR_220 , 1 ) ; if ( METHOD_32 ( VAR_221 -> VAR_222 , VAR_223 ) ) VAR_224 -> VAR_225 = VAR_226 ; if ( ( VAR_227 -> STRUCT_OR_UNION_16 -> VAR_228 & VAR_229 ) != 0 ) METHOD_33 ( VAR_230 , & VAR_231 ) ; if ( ( VAR_232 -> STRUCT_OR_UNION_17 -> VAR_233 & VAR_234 ) != 0 ) METHOD_34 ( VAR_235 , & VAR_236 ) ; METHOD_35 ( VAR_237 ) ; if ( VAR_238 -> VAR_239 && ! ( VAR_240 -> VAR_241 & VAR_242 ) && ! ( VAR_243 -> VAR_244 & VAR_245 ) ) { VAR_246 -> VAR_247 = METHOD_36 ( 1 , VAR_248 ) ; if ( ! VAR_249 -> VAR_250 ) { VAR_251 = - VAR_252 ; goto VAR_253 ; } } VAR_254 = METHOD_37 ( VAR_255 ) ; if ( VAR_256 ) goto VAR_257 ; METHOD_38 ( VAR_258 , VAR_259 , VAR_260 -> VAR_261 , "register\'%s\'atusb-%s-%s,%s,%pM\\n" , VAR_262 -> VAR_263 . VAR_264 -> VAR_265 , VAR_266 -> VAR_267 -> VAR_268 , VAR_269 -> VAR_270 , VAR_271 -> STRUCT_OR_UNION_18 -> VAR_272 , VAR_273 -> VAR_274 ) ; METHOD_39 ( VAR_275 , VAR_276 ) ; METHOD_40 ( VAR_277 ) ; if ( VAR_278 -> STRUCT_OR_UNION_19 -> VAR_279 & VAR_280 ) METHOD_41 ( VAR_281 , 0 , 0 ) ; return 0 ; VAR_282 : METHOD_42 ( VAR_283 -> VAR_284 ) ; VAR_285 : METHOD_43 ( VAR_286 -> VAR_287 ) ; VAR_288 : if ( VAR_289 -> METHOD_44 ) VAR_290 -> METHOD_45 ( VAR_291 , VAR_292 ) ; VAR_293 :  METHOD_46 ( VAR_294 ) ;  VAR_295 : return VAR_296 ; }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , const TYPE_3 * VAR_1 , const TYPE_4 * * VAR_2 , TYPE_5 VAR_3 , TYPE_6 * VAR_4 , TYPE_7 VAR_5 ) { VAR_6 * VAR_7 ; TYPE_8 * VAR_8 = VAR_9 ; TYPE_9 VAR_10 ; TYPE_10 * VAR_11 ;  TYPE_11 VAR_12 = 16 + 4 + METHOD_1 ( VAR_13 ) + 1 ;   TYPE_12 VAR_14 = VAR_15 ;  if ( METHOD_2 ( VAR_16 , VAR_17 ) != VAR_18 ) return VAR_19 ; for ( VAR_20 = 0 ; VAR_21 < VAR_22 ; VAR_23 ++ ) { VAR_24 += METHOD_3 ( VAR_25 [ VAR_26 ] ) ; if ( METHOD_4 ( VAR_27 , VAR_28 [ VAR_29 ] , 1 ) != VAR_30 ) return VAR_31 ; } if ( ( VAR_32 - VAR_33 ) > VAR_34 -> VAR_35 ) { VAR_36 -> VAR_37 = VAR_38 ; return VAR_39 ; } if ( METHOD_5 ( VAR_40 , VAR_41 , & VAR_42 ) == VAR_43 ) { return VAR_44 ; } VAR_45 = METHOD_6 ( VAR_46 , 0 , 0 , VAR_47 ) ; VAR_48 = & VAR_49 -> VAR_50 ; if ( VAR_51 & VAR_52 ) VAR_53 = METHOD_7 ( VAR_54 , & VAR_55 ) ; else VAR_56 = METHOD_8 ( VAR_57 , & VAR_58 ) ; VAR_59 = METHOD_9 ( VAR_60 , VAR_61 , METHOD_10 ( VAR_62 ) + 1 ) ; for ( VAR_63 = 0 ; VAR_64 < VAR_65 ; VAR_66 ++ ) { VAR_67 = METHOD_11 ( VAR_68 , VAR_69 [ VAR_70 ] -> VAR_71 , METHOD_12 ( VAR_72 [ VAR_73 ] ) ) ; } if ( VAR_74 ) { if ( METHOD_13 ( VAR_75 , VAR_76 ) == VAR_77 ) { return VAR_78 ; } return METHOD_14 ( VAR_79 , VAR_80 , VAR_81 ) ; } else { return METHOD_15 ( VAR_82 , VAR_83 ) ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_0 * VAR_6 = METHOD_1 ( VAR_7 , & VAR_8 ) ; if ( ! VAR_9 || ! ( VAR_10 -> VAR_11 & VAR_12 ) ) goto VAR_13 ; if ( ! METHOD_2 ( VAR_14 -> VAR_15 , '\\n' ) ) goto VAR_16 ; TYPE_5 VAR_17 ; VAR_18 * VAR_19 [ 3 ] ; VAR_20 [ 0 ] = ( TYPE_6 * ) "xdg-open" ; VAR_21 [ 1 ] = METHOD_3 ( VAR_22 , VAR_23 ) ; VAR_24 [ 2 ] = VAR_25 ; const TYPE_7 VAR_26 = METHOD_4 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 | VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , & VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 || VAR_40 != VAR_41 ) { TYPE_8 * VAR_42 = METHOD_5 ( METHOD_6 ( "View/editatextfile" ) , METHOD_7 ( VAR_43 ) , VAR_44 | VAR_45 , VAR_46 , VAR_47 ) ; TYPE_9 * VAR_48 = METHOD_8 ( METHOD_9 ( VAR_49 ) ) ; TYPE_10 * VAR_50 = METHOD_10 ( VAR_51 , VAR_52 ) ; TYPE_11 * VAR_53 = METHOD_11 ( ) ; METHOD_12 ( METHOD_13 ( VAR_54 ) , METHOD_14 ( "_Save" ) , VAR_55 ) ; METHOD_15 ( METHOD_16 ( VAR_56 ) , METHOD_17 ( "_Cancel" ) , VAR_57 ) ; METHOD_18 ( METHOD_19 ( VAR_58 ) , VAR_59 , VAR_60 , VAR_61 , 0 ) ; METHOD_20 ( VAR_62 , 640 , 480 ) ; METHOD_21 ( VAR_63 ) ; if ( ( VAR_64 == 3 && VAR_65 < 7 ) || ( VAR_66 == 3 && VAR_67 == 7 && VAR_68 < 8 ) ) METHOD_22 ( METHOD_23 ( VAR_69 ) , VAR_70 ) ; else METHOD_24 ( METHOD_25 ( VAR_71 ) , VAR_72 ) ; METHOD_26 ( VAR_73 ) ; METHOD_27 ( METHOD_28 ( VAR_74 ) , VAR_75 ) ; if ( METHOD_29 ( METHOD_30 ( VAR_76 ) ) == VAR_77 )  METHOD_31 ( METHOD_32 ( VAR_78 ) , VAR_79 ) ;  METHOD_33 ( VAR_80 ) ; METHOD_34 ( VAR_81 ) ; METHOD_35 ( VAR_82 ) ; } METHOD_36 ( VAR_83 [ 1 ] ) ; VAR_84 : METHOD_37 ( VAR_85 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , unsigned TYPE_2 * VAR_1 , TYPE_3 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { TYPE_4 VAR_4 [ 2048 ] ; unsigned TYPE_5 * VAR_5 = ( unsigned TYPE_6 * ) VAR_6 ; TYPE_7 VAR_7 ; struct STRUCT_OR_UNION_1 * VAR_8 = & VAR_9 -> VAR_10 ; unsigned TYPE_8 * VAR_11 = ( unsigned TYPE_9 * ) VAR_12 ; if ( VAR_13 == VAR_14 && METHOD_1 ( VAR_15 , "sorbo" , 5 ) == 0 ) { unsigned TYPE_10 * VAR_16 = ( unsigned TYPE_11 * ) ( VAR_17 + 5 ) ; TYPE_12 VAR_18 = 2 + 4 + 2 ; * VAR_19 = METHOD_2 ( VAR_20 ) ; METHOD_3 ( VAR_21 + 1 , VAR_22 , 4 ) ; METHOD_4 ( VAR_23 + 1 + 2 , VAR_24 , 2 ) ; METHOD_5 ( "Inetcheckby%s%d\\n" , METHOD_6 ( * VAR_25 ) , METHOD_7 ( * VAR_26 ) ) ; if ( METHOD_8 ( VAR_27 , VAR_28 , VAR_29 , 0 ) != VAR_30 ) return 1 ; return 0 ; } * VAR_31 ++ = METHOD_9 ( VAR_32 ) ; * VAR_33 ++ = * VAR_34 ; VAR_35 = VAR_36 - 2 ;  VAR_37 = METHOD_10 ( * VAR_38 ) ;  if ( VAR_39 > 20000 ) VAR_40 = 1 ; if ( VAR_41 && VAR_42 < 100 ) { VAR_43 = 0 ; METHOD_11 ( VAR_44 , 0 , sizeof ( VAR_45 ) ) ; } METHOD_12 ( "Gotpacket%d%d" , VAR_46 , VAR_47 ) ; if ( METHOD_13 ( VAR_48 ) ) { METHOD_14 ( "(DUP)\\n" ) ; return 0 ; } METHOD_15 ( "\\n" ) ; * VAR_49 ++ = METHOD_16 ( VAR_50 ) ; METHOD_17 ( VAR_51 , VAR_52 + 2 , VAR_53 ) ; VAR_54 += 2 + 2 + 2 ; METHOD_18 ( VAR_55 <= ( TYPE_13 ) sizeof ( VAR_56 ) ) ; if ( METHOD_19 ( VAR_57 , VAR_58 , VAR_59 , 0 ) != VAR_60 ) return 1 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_3 VAR_5 ; TYPE_4 * VAR_6 = VAR_7 ; TYPE_5 VAR_8 = 0 ; if ( ! VAR_9 || VAR_10 -> VAR_11 ) { return VAR_12 ; } VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = METHOD_1 ( ( TYPE_6 ) METHOD_2 ) ; if ( ! VAR_20 -> VAR_21 ) { return VAR_22 ; } VAR_23 -> VAR_24 = METHOD_3 ( ( TYPE_7 ) METHOD_4 ) ; if ( ! VAR_25 -> VAR_26 ) { METHOD_5 ( VAR_27 -> VAR_28 ) ; return VAR_29 ; } VAR_30 -> VAR_31 = METHOD_6 ( ( TYPE_8 ) VAR_32 ) ; if ( ! VAR_33 -> VAR_34 ) { METHOD_7 ( VAR_35 -> VAR_36 ) ; METHOD_8 ( VAR_37 -> VAR_38 ) ; return VAR_39 ; } if ( VAR_40 -> VAR_41 . VAR_42 > VAR_43 -> VAR_44 ) { VAR_45 -> VAR_46 . VAR_47 = 0 ; return VAR_48 ; } VAR_49 -> VAR_50 . VAR_51 = METHOD_9 ( VAR_52 -> VAR_53 . VAR_54 , VAR_55 -> VAR_56 ) ; VAR_57 -> VAR_58 . VAR_59 = METHOD_10 ( VAR_60 -> VAR_61 . VAR_62 , VAR_63 -> VAR_64 ) ; VAR_65 -> VAR_66 . VAR_67 = METHOD_11 ( VAR_68 -> VAR_69 . VAR_70 , VAR_71 -> VAR_72 ) ; if ( VAR_73 -> VAR_74 . VAR_75 > VAR_76 -> VAR_77 ) { METHOD_12 ( "Invalidstringssize\\n" ) ; return VAR_78 ; } if ( VAR_79 -> VAR_80 ) { TYPE_9 VAR_81 = sizeof ( TYPE_10 ) * VAR_82 -> VAR_83 . VAR_84 ; if ( VAR_85 > VAR_86 || VAR_87 < VAR_88 -> VAR_89 . VAR_90 ) { return VAR_91 ; } VAR_92 = METHOD_13 ( 1 , VAR_93 + 1 ) ; for ( VAR_94 = 0 ; VAR_95 < VAR_96 -> VAR_97 . VAR_98 ; VAR_99 ++ ) { TYPE_11 * VAR_100 , * VAR_101 ; struct STRUCT_OR_UNION_1 * VAR_102 = & VAR_103 -> VAR_104 [ VAR_105 ] ; VAR_106 = METHOD_14 ( VAR_107 , VAR_108 ) ; VAR_109 = METHOD_15 ( VAR_110 , VAR_111 ) ; if ( VAR_112 ) { VAR_113 -> METHOD_16 ( "Class%d-\\n" , VAR_114 ) ; } METHOD_17 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 , VAR_119 , & VAR_120 ) ; METHOD_18 ( VAR_121 ) ; METHOD_19 ( VAR_122 ) ; } } if ( VAR_123 ) { TYPE_12 VAR_124 = 0 ; TYPE_13 VAR_125 = VAR_126 -> VAR_127 -> VAR_128 ; for ( VAR_129 = 0 ; VAR_130 < VAR_131 -> VAR_132 . VAR_133 ; VAR_134 ++ ) { TYPE_14 VAR_135 = 0 ; if ( VAR_136 [ VAR_137 ] ) { continue ; }  if ( VAR_138 -> VAR_139 [ VAR_140 ] . VAR_141 > VAR_142 -> VAR_143 . VAR_144 - 1 ) {  continue ; } if ( METHOD_20 ( VAR_145 , VAR_146 -> VAR_147 [ VAR_148 ] . VAR_149 ) ) { continue ; } TYPE_15 * VAR_150 = METHOD_21 ( VAR_151 , VAR_152 -> VAR_153 [ VAR_154 -> VAR_155 [ VAR_156 ] . VAR_157 ] . VAR_158 ) ; if ( ! VAR_159 ) { METHOD_22 ( VAR_160 ) ; continue ; } VAR_161 = METHOD_23 ( VAR_162 ) ; if ( VAR_163 < 1 ) { continue ; } VAR_164 [ VAR_165 - 1 ] = 0 ; TYPE_16 * VAR_166 = METHOD_24 ( VAR_167 , VAR_168 ) ; TYPE_17 * VAR_169 = METHOD_25 ( VAR_170 , VAR_171 ) ; if ( VAR_172 && * VAR_173 ) { TYPE_18 * VAR_174 = METHOD_26 ( TYPE_19 ) ; VAR_175 -> VAR_176 = METHOD_27 ( "%s.method.%s%s" , VAR_177 , VAR_178 , VAR_179 ) ; VAR_180 -> VAR_181 = METHOD_28 ( "FUNC" ) ; VAR_182 -> VAR_183 = METHOD_29 ( "NONE" ) ; VAR_184 -> VAR_185 = VAR_186 ++ ; METHOD_30 ( VAR_187 -> VAR_188 , VAR_189 ) ; TYPE_20 * VAR_190 = METHOD_31 ( TYPE_21 ) ; VAR_191 -> VAR_192 = METHOD_32 ( "imp.%s" , VAR_193 -> VAR_194 ) ; VAR_195 -> VAR_196 = METHOD_33 ( "FUNC" ) ; VAR_197 -> VAR_198 = METHOD_34 ( "NONE" ) ; VAR_199 -> VAR_200 = VAR_201 -> VAR_202 = VAR_203 -> VAR_204 -> VAR_205 + VAR_206 -> VAR_207 . VAR_208 + ( sizeof ( struct STRUCT_OR_UNION_2 ) * VAR_209 ) ; VAR_210 -> VAR_211 = VAR_212 ++ ; METHOD_35 ( VAR_213 -> VAR_214 , VAR_215 ) ; METHOD_36 ( VAR_216 , METHOD_37 ( 0 , "method.%d" , VAR_217 ) , VAR_218 -> VAR_219 , 0 ) ; } METHOD_38 ( VAR_220 ) ; METHOD_39 ( VAR_221 ) ; METHOD_40 ( VAR_222 ) ; } METHOD_41 ( VAR_223 ) ; } return VAR_224 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; switch ( VAR_2 ) { case VAR_3 : case VAR_4 :  case VAR_5 :  VAR_6 = VAR_7 ; break ; case VAR_8 : case VAR_9 : VAR_10 = VAR_11 ; break ; case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : case VAR_16 :  VAR_17 = VAR_18 ;  break ; case VAR_19 : VAR_20 = VAR_21 ; break ; default : VAR_22 = VAR_23 ; break ; } return VAR_24 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) {  TYPE_5 VAR_4 = ( VAR_5 ? VAR_6 : ( TYPE_6 ) METHOD_1 ( VAR_7 ) ) + 1 ;  TYPE_7 * VAR_8 = METHOD_2 ( VAR_9 ) ; unsigned TYPE_8 VAR_10 ; TYPE_9 VAR_11 = 0 ; unsigned TYPE_10 VAR_12 ;  TYPE_11 VAR_13 ;  if ( ! VAR_14 ) return VAR_15 ; while ( -- VAR_16 > 0 ) { VAR_17 = * VAR_18 ; if ( ( '%' == VAR_19 ) && METHOD_3 ( VAR_20 [ 1 ] ) && METHOD_4 ( VAR_21 [ 2 ] ) ) { TYPE_12 VAR_22 [ 3 ] ; TYPE_13 * VAR_23 ; VAR_24 [ 0 ] = VAR_25 [ 1 ] ; VAR_26 [ 1 ] = VAR_27 [ 2 ] ; VAR_28 [ 2 ] = 0 ; VAR_29 = METHOD_5 ( VAR_30 , & VAR_31 , 16 ) ; VAR_32 = METHOD_6 ( VAR_33 ) ;  VAR_34 = METHOD_7 ( VAR_35 , & VAR_36 , 1 ) ;   if ( VAR_37 ) {  METHOD_8 ( VAR_38 ) ; return VAR_39 ; } VAR_40 += 2 ; VAR_41 -= 2 ; } VAR_42 [ VAR_43 ++ ] = VAR_44 ; VAR_45 ++ ; } VAR_46 [ VAR_47 ] = 0 ; if ( VAR_48 )  * VAR_49 = VAR_50 ;  return VAR_51 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { TYPE_3 VAR_2 ; METHOD_1 ( VAR_3 , "RDP_NEG_RSP" ) ; if ( METHOD_2 ( VAR_4 ) < 7 ) { METHOD_3 ( VAR_5 , "InvalidRDP_NEG_RSP" ) ; VAR_6 -> VAR_7 = VAR_8 ;  return ;  } METHOD_4 ( VAR_9 , VAR_10 -> VAR_11 ) ; METHOD_5 ( VAR_12 , VAR_13 ) ; METHOD_6 ( VAR_14 , VAR_15 -> VAR_16 ) ; VAR_17 -> VAR_18 = VAR_19 ;  }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { const TYPE_5 * const VAR_4 = & VAR_5 -> VAR_6 ; TYPE_6 VAR_7 = VAR_8 ; TYPE_7 VAR_9 = VAR_10 ;  TYPE_8 VAR_11 , VAR_12 ;  const TYPE_9 VAR_13 = METHOD_1 ( VAR_14 ) ; VAR_15 = ( ( TYPE_10 ) VAR_16 << VAR_17 ) / VAR_18 -> VAR_19 ; VAR_20 = VAR_21 ; do {  const TYPE_11 VAR_22 = ( TYPE_12 ) METHOD_2 ( VAR_23 -> VAR_24 , VAR_25 ,   VAR_26 ) ;  if ( VAR_27 <= VAR_28 ) { if ( ( VAR_29 - VAR_30 ) <= VAR_31 ) VAR_32 = VAR_33 ; else VAR_34 = VAR_35 - 1 ; break ; } else { VAR_36 = VAR_37 - VAR_38 ; } } while ( ++ VAR_39 <= VAR_40 ) ;  return VAR_41 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; METHOD_1 ( "InitializingTJA1101...\\r\\n" ) ; if ( VAR_2 -> VAR_3 >= 32 ) { VAR_4 -> VAR_5 = VAR_6 ; } if ( VAR_7 -> VAR_8 != VAR_9 ) { VAR_10 -> VAR_11 -> METHOD_2 ( ) ; } if ( VAR_12 -> VAR_13 != VAR_14 ) { VAR_15 -> VAR_16 -> METHOD_3 ( ) ; } METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ; while ( METHOD_5 ( VAR_20 , VAR_21 ) & VAR_22 ) { } METHOD_6 ( VAR_23 ) ; VAR_24 = METHOD_7 ( VAR_25 , VAR_26 ) ; VAR_27 |= VAR_28 ; METHOD_8 ( VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 = METHOD_9 ( VAR_33 , VAR_34 ) ; VAR_35 &= ~ VAR_36 ;  VAR_37 |= VAR_38 ;  METHOD_10 ( VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = METHOD_11 ( VAR_43 , VAR_44 ) ; VAR_45 |= VAR_46 ; METHOD_12 ( VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 -> VAR_51 = VAR_52 ; METHOD_13 ( & VAR_53 ) ; return VAR_54 ; }
static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , "cipher" , sizeof ( VAR_5 . VAR_6 ) ) ;  VAR_7 . VAR_8 = VAR_9 -> VAR_10 ; VAR_11 . VAR_12 = VAR_13 -> VAR_14 . VAR_15 ; VAR_16 . VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; if ( METHOD_1 ( VAR_21 , VAR_22 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_23 ) ) goto VAR_24 ; return 0 ; VAR_25 : return - VAR_26 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const struct STRUCT_OR_UNION_1 * VAR_4 ; const TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; METHOD_1 ( ( VAR_8 , "wb-prep:" ) ) ;  if ( VAR_9 < sizeof ( * VAR_10 ) ) {  return ( - 1 ) ;  }  VAR_11 = METHOD_2 ( & VAR_12 -> VAR_13 ) ; VAR_14 = ( const struct STRUCT_OR_UNION_2 * ) ( VAR_15 + 1 ) ; while ( -- VAR_16 >= 0 && METHOD_3 ( * VAR_17 ) ) { const struct STRUCT_OR_UNION_3 * VAR_18 , * VAR_19 ; TYPE_5 VAR_20 = '<' ; METHOD_4 ( ( VAR_21 , "%u/%s:%u" , METHOD_5 ( & VAR_22 -> VAR_23 ) , METHOD_6 ( VAR_24 , & VAR_25 -> VAR_26 . VAR_27 ) , METHOD_7 ( & VAR_28 -> VAR_29 . VAR_30 ) ) ) ; VAR_31 = ( const struct STRUCT_OR_UNION_4 * ) ( VAR_32 + 1 ) ; for ( VAR_33 = VAR_34 + VAR_35 -> VAR_36 ; VAR_37 < VAR_38 && METHOD_8 ( * VAR_39 ) ; ++ VAR_40 ) { METHOD_9 ( ( VAR_41 , "%c%s:%u" , VAR_42 , METHOD_10 ( VAR_43 , & VAR_44 -> VAR_45 ) , METHOD_11 ( & VAR_46 -> VAR_47 ) ) ) ; VAR_48 = ',' ; } METHOD_12 ( ( VAR_49 , ">" ) ) ; VAR_50 = ( const struct STRUCT_OR_UNION_5 * ) VAR_51 ; } return ( ( const TYPE_6 * ) VAR_52 <= VAR_53 ? 0 : - 1 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) {  METHOD_1 ( & VAR_2 -> VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; unsigned TYPE_1 VAR_5 ; TYPE_2 VAR_6 ; VAR_7 . VAR_8 . VAR_9 = VAR_10 ; VAR_11 . VAR_12 . VAR_13 = VAR_14 ; VAR_15 . VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = METHOD_1 ( & VAR_25 . VAR_26 , 0 ) ; if ( METHOD_2 ( VAR_27 . VAR_28 ) ) return METHOD_3 ( VAR_29 . VAR_30 ) ; VAR_31 = METHOD_4 ( VAR_32 , VAR_33 , 0 ) ;  VAR_34 = METHOD_5 ( VAR_35 , VAR_36 -> VAR_37 , METHOD_6 ( VAR_38 ) ) ;  if ( ! VAR_39 ) return - VAR_40 ; VAR_41 += VAR_42 ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 ; VAR_46 ++ ) { VAR_47 = METHOD_7 ( & VAR_48 -> VAR_49 , & VAR_50 [ VAR_51 ] . VAR_52 ) ; if ( VAR_53 ) return VAR_54 ; } return METHOD_8 ( & VAR_55 -> VAR_56 , VAR_57 , VAR_58 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 , VAR_4 , VAR_5 = 0 , VAR_6 = 0 ; TYPE_3 VAR_7 = 0 , VAR_8 = 0 ; VAR_9 * VAR_10 , * VAR_11 , * VAR_12 , * VAR_13 ; TYPE_4 VAR_14 = VAR_15 , VAR_16 = VAR_17 ; TYPE_5 VAR_18 = VAR_19 ; TYPE_6 * VAR_20 ; if ( METHOD_1 ( VAR_21 ) == VAR_22 ) { if ( METHOD_2 ( VAR_23 ) == 2 ) return METHOD_3 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 -> VAR_31 ) ; VAR_32 = METHOD_4 ( VAR_33 , 1 ) ; } METHOD_5 ( METHOD_6 ( VAR_34 ) == VAR_35 || METHOD_7 ( VAR_36 ) == VAR_37 ) ; for ( VAR_38 = 0 ; VAR_39 < METHOD_8 ( VAR_40 ) ; VAR_41 ++ ) { VAR_42 = METHOD_9 ( VAR_43 , VAR_44 ) ; if ( METHOD_10 ( VAR_45 ) == VAR_46 ) { VAR_47 ++ ; if ( VAR_48 < METHOD_11 ( VAR_49 ) && ( METHOD_12 ( METHOD_13 ( VAR_50 , VAR_51 ) ) == VAR_52 || METHOD_14 ( METHOD_15 ( VAR_53 , VAR_54 ) ) == VAR_55 ) ) { VAR_56 ++ ; } break ; } if ( METHOD_16 ( VAR_57 ) == VAR_58 ) break ; if ( METHOD_17 ( VAR_59 ) == VAR_60 || METHOD_18 ( VAR_61 ) == VAR_62 ) VAR_63 ++ ; if ( METHOD_19 ( VAR_64 ) == VAR_65 ) VAR_66 ++ ; } for ( ; VAR_67 < METHOD_20 ( VAR_68 ) ; ++ VAR_69 ) { VAR_70 = METHOD_21 ( VAR_71 , VAR_72 ) ; if ( METHOD_22 ( VAR_73 ) == VAR_74 ) break ; if ( METHOD_23 ( VAR_75 ) == VAR_76 || METHOD_24 ( VAR_77 ) == VAR_78 ) VAR_79 ++ ; } VAR_80 = ( VAR_81 ? METHOD_25 ( VAR_82 , VAR_83 -> VAR_84 ) : VAR_85 ) ; if ( ! VAR_86 && VAR_87 ) return VAR_88 ; VAR_89 = ( VAR_90 ? METHOD_26 ( VAR_91 , VAR_92 -> VAR_93 ) : VAR_94 ) ; if ( ! VAR_95 && VAR_96 ) return VAR_97 ; VAR_98 = ( VAR_99 ? METHOD_27 ( VAR_100 , VAR_101 -> VAR_102 ) : VAR_103 ) ; if ( ! VAR_104 && VAR_105 ) return VAR_106 ; VAR_107 = ( VAR_108 ? METHOD_28 ( VAR_109 , VAR_110 -> VAR_111 ) : VAR_112 ) ; if ( ! VAR_113 && VAR_114 ) return VAR_115 ; VAR_116 = 0 ; VAR_117 = 0 ; VAR_118 = 0 ; while ( VAR_119 < METHOD_29 ( VAR_120 ) ) { VAR_121 = METHOD_30 ( VAR_122 , VAR_123 ) ; switch ( METHOD_31 ( VAR_124 ) ) { case VAR_125 : case VAR_126 : if ( VAR_127 + 1 < METHOD_32 ( VAR_128 ) && METHOD_33 ( METHOD_34 ( VAR_129 , VAR_130 + 1 ) ) == VAR_131 ) { TYPE_7 VAR_132 = METHOD_35 ( VAR_133 , METHOD_36 ( VAR_134 , VAR_135 + 2 ) ) ; if ( ! VAR_136 ) return VAR_137 ; METHOD_37 ( VAR_138 != VAR_139 ) ; METHOD_38 ( VAR_140 , VAR_141 ++ , VAR_142 ) ; VAR_143 += 2 ; VAR_144 = 1 ; } else if ( VAR_145 ) { METHOD_39 ( VAR_146 , VAR_147 , "non-defaultargumentfollowsdefaultargument" ) ; return VAR_148 ; } VAR_149 = METHOD_40 ( VAR_150 , VAR_151 ) ; if ( ! VAR_152 ) return VAR_153 ; METHOD_41 ( VAR_154 , VAR_155 ++ , VAR_156 ) ; VAR_157 += 1 ; if ( VAR_158 < METHOD_42 ( VAR_159 ) && METHOD_43 ( METHOD_44 ( VAR_160 , VAR_161 ) ) == VAR_162 ) VAR_163 += 1 ; break ; case VAR_164 : if ( VAR_165 + 1 >= METHOD_45 ( VAR_166 ) || ( VAR_167 + 2 == METHOD_46 ( VAR_168 ) && ( METHOD_47 ( METHOD_48 ( VAR_169 , VAR_170 + 1 ) ) == VAR_171 || METHOD_49 ( METHOD_50 ( VAR_172 , VAR_173 + 1 ) ) == VAR_174 ) ) ) { METHOD_51 ( VAR_175 , METHOD_52 ( VAR_176 , VAR_177 ) , "namedargumentsmustfollowbare*" ) ; return VAR_178 ; } VAR_179 = METHOD_53 ( VAR_180 , VAR_181 + 1 ) ; if ( METHOD_54 ( VAR_182 ) == VAR_183 ) { TYPE_8 VAR_184 = 0 ; VAR_185 += 2 ; if ( VAR_186 < METHOD_55 ( VAR_187 ) && METHOD_56 ( METHOD_57 ( VAR_188 , VAR_189 ) ) == VAR_190 ) { METHOD_58 ( VAR_191 , METHOD_59 ( VAR_192 , VAR_193 ) , "bare*hasassociatedtypecomment" ) ; return VAR_194 ; } VAR_195 = METHOD_60 ( VAR_196 , VAR_197 , VAR_198 , VAR_199 , VAR_200 ) ; if ( VAR_201 == - 1 ) return VAR_202 ; VAR_203 = VAR_204 ; } else { VAR_205 = METHOD_61 ( VAR_206 , VAR_207 ) ; if ( ! VAR_208 ) return VAR_209 ; VAR_210 += 2 ; if ( VAR_211 < METHOD_62 ( VAR_212 ) && METHOD_63 ( METHOD_64 ( VAR_213 , VAR_214 ) ) == VAR_215 ) VAR_216 += 1 ; if ( VAR_217 < METHOD_65 ( VAR_218 ) && METHOD_66 ( METHOD_67 ( VAR_219 , VAR_220 ) ) == VAR_221 ) { VAR_222 -> VAR_223 = METHOD_68 ( METHOD_69 ( VAR_224 , VAR_225 ) ) ; if ( ! VAR_226 -> VAR_227 ) return VAR_228 ; VAR_229 += 1 ; } if ( VAR_230 < METHOD_70 ( VAR_231 ) && ( METHOD_71 ( METHOD_72 ( VAR_232 , VAR_233 ) ) == VAR_234 || METHOD_73 ( METHOD_74 ( VAR_235 , VAR_236 ) ) == VAR_237 ) ) { TYPE_9 VAR_238 = 0 ; VAR_239 = METHOD_75 ( VAR_240 , VAR_241 , VAR_242 , VAR_243 , VAR_244 ) ; if ( VAR_245 == - 1 ) return VAR_246 ; VAR_247 = VAR_248 ; } } break ; case VAR_249 : VAR_250 = METHOD_76 ( VAR_251 , VAR_252 + 1 ) ; METHOD_77 ( METHOD_78 ( VAR_253 ) == VAR_254 || METHOD_79 ( VAR_255 ) == VAR_256 ) ; VAR_257 = METHOD_80 ( VAR_258 , VAR_259 ) ; if ( ! VAR_260 ) return VAR_261 ; VAR_262 += 2 ;  if ( METHOD_81 ( METHOD_82 ( VAR_263 , VAR_264 ) ) == VAR_265 )  VAR_266 += 1 ; break ; case VAR_267 : METHOD_83 ( VAR_268 ) ; if ( VAR_269 ) VAR_270 = VAR_271 ; VAR_272 -> VAR_273 = METHOD_84 ( VAR_274 ) ; if ( ! VAR_275 -> VAR_276 ) return VAR_277 ; VAR_278 += 1 ; break ; default : METHOD_85 ( VAR_279 , "unexpectednodeinvarargslist:%d@%d" , METHOD_86 ( VAR_280 ) , VAR_281 ) ; return VAR_282 ; } } return METHOD_87 ( VAR_283 , VAR_284 , VAR_285 , VAR_286 , VAR_287 , VAR_288 , VAR_289 -> VAR_290 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  const TYPE_6 VAR_5 = 0.0000001 ;  if ( METHOD_1 ( VAR_6 ) ) METHOD_2 ( VAR_7 , "NaN" , VAR_8 ) ;  else if ( ! METHOD_3 ( VAR_9 ) ) {  if ( VAR_10 < 0 ) METHOD_4 ( VAR_11 , "-Infinity" , VAR_12 ) ;   else METHOD_5 ( VAR_13 , "Infinity" , VAR_14 ) ;  } else { if ( VAR_15 < 0 ) { if ( -- VAR_16 <= 0 ) { * VAR_17 = 0 ; return ; } * ( VAR_18 ++ ) = '-' ; VAR_19 = - VAR_20 ; } if ( ( ( TYPE_7 ) ( VAR_21 + VAR_22 ) ) == ( 1 + ( TYPE_8 ) VAR_23 ) ) VAR_24 = ( TYPE_9 ) ( 1 + ( TYPE_10 ) VAR_25 ) ; TYPE_11 VAR_26 = 1 ; while ( VAR_27 * VAR_28 <= VAR_29 ) VAR_30 *= VAR_31 ; while ( VAR_32 >= 1 ) { TYPE_12 VAR_33 = ( TYPE_13 ) ( VAR_34 / VAR_35 ) ; VAR_36 -= VAR_37 * VAR_38 ; if ( -- VAR_39 <= 0 ) { * VAR_40 = 0 ; return ; } * ( VAR_41 ++ ) = METHOD_6 ( VAR_42 ) ; VAR_43 /= VAR_44 ; } TYPE_14 TYPE_15 if ( ( ( VAR_45 < 0 ) && VAR_46 > 0 ) || VAR_47 > 0 ) { TYPE_16 VAR_48 = VAR_49 ; VAR_50 *= VAR_51 ; while ( ( ( VAR_52 < 0 ) && ( VAR_53 > - 12 ) && ( VAR_54 > VAR_55 ) ) || ( VAR_56 > 0 ) ) { TYPE_17 VAR_57 = ( TYPE_18 ) ( VAR_58 + ( ( VAR_59 == 1 ) ? 0.4 : 0.00000001 ) ) ; VAR_60 = ( VAR_61 - VAR_62 ) * VAR_63 ; if ( VAR_64 == VAR_65 ) VAR_66 = VAR_67 - 1 ; if ( ! VAR_68 ) { VAR_69 = VAR_70 ; if ( -- VAR_71 <= 0 ) { * VAR_72 = 0 ; return ; } * ( VAR_73 ++ ) = '.' ; } if ( -- VAR_74 <= 0 ) { * VAR_75 = 0 ; return ; } * ( VAR_76 ++ ) = METHOD_7 ( VAR_77 ) ; VAR_78 -- ; } } * ( VAR_79 ++ ) = 0 ; } }
TYPE_0 * METHOD_0 ( TYPE_1 * TYPE_2 , TYPE_3 VAR_0 )  { VAR_1 * VAR_2 ; TYPE_4 * VAR_3 ; if ( ! ( VAR_4 = TYPE_5 ( VAR_5 ( TYPE_6 * , TYPE_7 ) , VAR_6 ) ) ) goto VAR_7 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 ) ) ) goto VAR_10 ; METHOD_2 ( VAR_11 ) ; return VAR_12 ; VAR_13 : if ( VAR_14 ) METHOD_3 ( VAR_15 ) ; return 0 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ) { struct STRUCT_OR_UNION_2 * TYPE_0 ; TYPE_1 = METHOD_1 ( VAR_1 , VAR_2 ) ; if ( ! TYPE_2 ) return VAR_3 ; TYPE_3 -> VAR_4 . VAR_5 = 1 ; TYPE_4 -> VAR_6 . VAR_7 . VAR_8 = 0 ; METHOD_2 ( & TYPE_5 -> VAR_9 , 0 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; METHOD_3 ( & TYPE_6 -> VAR_10 ) ; METHOD_4 ( & TYPE_7 -> VAR_11 ) ; METHOD_5 ( & TYPE_8 -> VAR_12 , & TYPE_9 -> VAR_13 ) ; TYPE_10 -> VAR_14 = 0 ; TYPE_11 -> VAR_15 = 0 ; TYPE_12 -> VAR_16 = 0 ; TYPE_13 -> VAR_17 = 0 ; TYPE_14 -> VAR_18 = 0 ; METHOD_6 ( & ( TYPE_15 -> VAR_19 ) ) ; TYPE_16 TYPE_17 TYPE_18 -> VAR_20 = 0 ; METHOD_7 ( & TYPE_19 -> VAR_21 ) ;  TYPE_20 -> VAR_22 = VAR_23 ;  TYPE_21 -> VAR_24 = 0 ; TYPE_22 -> VAR_25 = 0 ; return & TYPE_23 -> VAR_26 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; TYPE_1 VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 ) ; TYPE_2 VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; METHOD_3 ( & VAR_14 -> VAR_15 ) ; if ( VAR_16 == VAR_17 ) VAR_18 = & VAR_19 -> VAR_20 ; else if ( VAR_21 == VAR_22 ) VAR_23 = & VAR_24 -> VAR_25 ; else METHOD_4 ( ) ;  METHOD_5 ( ! VAR_26 ) ;  VAR_27 = METHOD_6 ( VAR_28 , VAR_29 == VAR_30 ) ; METHOD_7 ( VAR_31 , VAR_32 == VAR_33 ) ; VAR_34 = 0 ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 -> VAR_39 ; VAR_40 ++ ) { if ( VAR_41 -> VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 != VAR_46 ) VAR_47 ++ ; } VAR_48 = VAR_49 -> VAR_50 ; if ( ! VAR_51 ) { METHOD_8 ( VAR_52 ) ; VAR_53 = VAR_54 ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = - 1 ; for ( VAR_61 = 0 , VAR_62 = 0 ; VAR_63 < VAR_64 -> VAR_65 -> VAR_66 ; VAR_67 ++ ) { if ( VAR_68 -> VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 == VAR_73 ) continue ; VAR_74 -> VAR_75 [ VAR_76 ] = VAR_77 -> VAR_78 -> VAR_79 [ VAR_80 ] ; if ( VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 < VAR_85 ) { ++ VAR_86 -> VAR_87 ; } VAR_88 ++ ; } VAR_89 : VAR_90 -> VAR_91 = VAR_92 -> VAR_93 ; METHOD_9 ( VAR_94 -> VAR_95 , VAR_96 ) ; METHOD_10 ( ) ;  METHOD_11 ( & VAR_97 -> VAR_98 ) ;  }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ,  TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; METHOD_1 ( & VAR_3 -> VAR_4 ) ;  VAR_5 = METHOD_2 ( & VAR_6 -> VAR_7 , VAR_8 ) ;  if ( VAR_9 ) METHOD_3 ( VAR_10 ) ; METHOD_4 ( & VAR_11 -> VAR_12 ) ;  return VAR_13 ? VAR_14 : METHOD_5 ( - VAR_15 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 [ 12 ] , VAR_7 [ 12 ] , VAR_8 [ 12 ] , VAR_9 [ 12 ] ; TYPE_7 VAR_10 = 0 , VAR_11 = 0 ; TYPE_8 VAR_12 ; TYPE_9 VAR_13 , VAR_14 ; TYPE_10 unsigned TYPE_11 TYPE_12 ; VAR_15 255 struct STRUCT_OR_UNION_0 VAR_16 [ ] = { { "alt-autoscale" , VAR_17 , 0 , 'A' } , { "imgformat" , VAR_18 , 0 , 'a' } , { "font-smoothing-threshold" , VAR_19 , 0 , 'B' } , { "base" , VAR_20 , 0 , 'b' } , { "color" , VAR_21 , 0 , 'c' } , { "full-size-mode" , VAR_22 , 0 , 'D' } , { "daemon" , VAR_23 , 0 , 'd' } , { "slope-mode" , VAR_24 , 0 , 'E' } , { "end" , VAR_25 , 0 , 'e' } , { "force-rules-legend" , VAR_26 , 0 , 'F' } , { "imginfo" , VAR_27 , 0 , 'f' } , { "graph-render-mode" , VAR_28 , 0 , 'G' } , { "no-legend" , VAR_29 , 0 , 'g' } , { "height" , VAR_30 , 0 , 'h' } , { "no-minor" , VAR_31 , 0 , 'I' } , { "interlaced" , VAR_32 , 0 , 'i' } , { "alt-autoscale-min" , VAR_33 , 0 , 'J' } , { "only-graph" , VAR_34 , 0 , 'j' } , { "units-length" , VAR_35 , 0 , 'L' } , { "lower-limit" , VAR_36 , 0 , 'l' } , { "alt-autoscale-max" , VAR_37 , 0 , 'M' } , { "zoom" , VAR_38 , 0 , 'm' } , { "no-gridfit" , VAR_39 , 0 , 'N' } , { "font" , VAR_40 , 0 , 'n' } , { "logarithmic" , VAR_41 , 0 , 'o' } , { "pango-markup" , VAR_42 , 0 , 'P' } , { "font-render-mode" , VAR_43 , 0 , 'R' } , { "rigid" , VAR_44 , 0 , 'r' } , { "step" , VAR_45 , 0 , 'S' } , { "start" , VAR_46 , 0 , 's' } , { "tabwidth" , VAR_47 , 0 , 'T' } , { "title" , VAR_48 , 0 , 't' } , { "upper-limit" , VAR_49 , 0 , 'u' } , { "vertical-label" , VAR_50 , 0 , 'v' } , { "watermark" , VAR_51 , 0 , 'W' } , { "width" , VAR_52 , 0 , 'w' } , { "units-exponent" , VAR_53 , 0 , 'X' } , { "x-grid" , VAR_54 , 0 , 'x' } , { "alt-y-grid" , VAR_55 , 0 , 'Y' } , { "y-grid" , VAR_56 , 0 , 'y' } , { "lazy" , VAR_57 , 0 , 'z' } , { "units" , VAR_58 , 0 , VAR_59 } , { "alt-y-mrtg" , VAR_60 , 0 , 1000 } , { "disable-rrdtool-tag" , VAR_61 , 0 , 1001 } , { "right-axis" , VAR_62 , 0 , 1002 } , { "right-axis-label" , VAR_63 , 0 , 1003 } , { "right-axis-format" , VAR_64 , 0 , 1004 } , { "legend-position" , VAR_65 , 0 , 1005 } , { "legend-direction" , VAR_66 , 0 , 1006 } , { "border" , VAR_67 , 0 , 1007 } , { "grid-dash" , VAR_68 , 0 , 1008 } , { "dynamic-labels" , VAR_69 , 0 , 1009 } , { "left-axis-format" , VAR_70 , 0 , 1010 } , { 0 , 0 , 0 , 0 } } ; VAR_71 = 0 ; VAR_72 = 0 ; METHOD_1 ( "end-24h" , & VAR_73 ) ; METHOD_2 ( "now" , & VAR_74 ) ; while ( 1 ) { TYPE_13 VAR_75 = 0 ; TYPE_14 VAR_76 ; TYPE_15 VAR_77 , VAR_78 ; VAR_79 = METHOD_3 ( VAR_80 , VAR_81 , "Aa:B:b:c:Dd:Ee:Ff:G:gh:IiJjL:l:Mm:Nn:oPR:rS:s:T:t:u:v:W:w:X:x:Yy:z" , VAR_82 , & VAR_83 ) ; if ( VAR_84 == VAR_85 ) break ; switch ( VAR_86 ) { case 'I' : VAR_87 -> VAR_88 |= VAR_89 ; break ; case 'Y' : VAR_90 -> VAR_91 |= VAR_92 ; break ; case 'A' : VAR_93 -> VAR_94 |= VAR_95 ; break ; case 'J' : VAR_96 -> VAR_97 |= VAR_98 ; break ; case 'M' : VAR_99 -> VAR_100 |= VAR_101 ; break ; case 'j' : VAR_102 -> VAR_103 |= VAR_104 ; break ; case 'g' : VAR_105 -> VAR_106 |= VAR_107 ; break ; case 1005 : if ( METHOD_4 ( VAR_108 , "north" ) == 0 ) { VAR_109 -> VAR_110 = VAR_111 ; } else if ( METHOD_5 ( VAR_112 , "west" ) == 0 ) { VAR_113 -> VAR_114 = VAR_115 ; } else if ( METHOD_6 ( VAR_116 , "south" ) == 0 ) { VAR_117 -> VAR_118 = VAR_119 ; } else if ( METHOD_7 ( VAR_120 , "east" ) == 0 ) { VAR_121 -> VAR_122 = VAR_123 ; } else { METHOD_8 ( "unknownlegend-position\'%s\'" , VAR_124 ) ; return ; } break ; case 1006 : if ( METHOD_9 ( VAR_125 , "topdown" ) == 0 ) { VAR_126 -> VAR_127 = VAR_128 ; } else if ( METHOD_10 ( VAR_129 , "bottomup" ) == 0 ) { VAR_130 -> VAR_131 = VAR_132 ; } else { METHOD_11 ( "unknownlegend-position\'%s\'" , VAR_133 ) ; return ; } break ; case 'F' : VAR_134 -> VAR_135 |= VAR_136 ; break ; case 1001 : VAR_137 -> VAR_138 |= VAR_139 ; break ; case VAR_140 : if ( VAR_141 -> VAR_142 & VAR_143 ) { METHOD_12 ( "--unitscanonlybeusedonce!" ) ; return ; } if ( METHOD_13 ( VAR_144 , "si" ) == 0 ) VAR_145 -> VAR_146 |= VAR_147 ; else { METHOD_14 ( "invalidargumentfor--units:%s" , VAR_148 ) ; return ; } break ; case 'X' : VAR_149 -> VAR_150 = METHOD_15 ( VAR_151 ) ; break ; case 'L' : VAR_152 -> VAR_153 = METHOD_16 ( VAR_154 ) ; VAR_155 -> VAR_156 = 1 ; break ; case 'T' : VAR_157 -> VAR_158 = METHOD_17 ( VAR_159 ) ; break ; case 'S' : VAR_160 -> VAR_161 = METHOD_18 ( VAR_162 ) ; break ; case 'N' : VAR_163 -> VAR_164 = 0 ; break ; case 'P' : VAR_165 -> VAR_166 = 1 ; break ; case 's' : if ( ( VAR_167 = METHOD_19 ( VAR_168 , & VAR_169 ) ) ) { METHOD_20 ( "starttime:%s" , VAR_170 ) ; return ; } break ; case 'e' : if ( ( VAR_171 = METHOD_21 ( VAR_172 , & VAR_173 ) ) ) { METHOD_22 ( "endtime:%s" , VAR_174 ) ; return ; } break ; case 'x' : if ( METHOD_23 ( VAR_175 , "none" ) == 0 ) { VAR_176 -> VAR_177 = 0 ; break ; } ; if ( METHOD_24 ( VAR_178 , "%10[A-Z]:%ld:%10[A-Z]:%ld:%10[A-Z]:%ld:%ld:%n" , VAR_179 , & VAR_180 -> VAR_181 . VAR_182 , VAR_183 , & VAR_184 -> VAR_185 . VAR_186 , VAR_187 , & VAR_188 -> VAR_189 . VAR_190 , & VAR_191 -> VAR_192 . VAR_193 , & VAR_194 ) == 7 && VAR_195 != 0 ) { METHOD_25 ( VAR_196 -> VAR_197 , VAR_198 + VAR_199 , sizeof ( VAR_200 -> VAR_201 ) - 1 ) ; VAR_202 -> VAR_203 [ sizeof ( VAR_204 -> VAR_205 ) - 1 ] = '\\0' ; if ( ( TYPE_16 ) ( VAR_206 -> VAR_207 . VAR_208 = METHOD_26 ( VAR_209 ) ) == - 1 ) { METHOD_27 ( "unknownkeyword%s" , VAR_210 ) ; return ; } else if ( ( TYPE_17 ) ( VAR_211 -> VAR_212 . VAR_213 = METHOD_28 ( VAR_214 ) ) == - 1 ) { METHOD_29 ( "unknownkeyword%s" , VAR_215 ) ; return ; } else if ( ( TYPE_18 ) ( VAR_216 -> VAR_217 . VAR_218 = METHOD_30 ( VAR_219 ) ) == - 1 ) { METHOD_31 ( "unknownkeyword%s" , VAR_220 ) ; return ; } VAR_221 -> VAR_222 . VAR_223 = 1 ; VAR_224 -> VAR_225 . VAR_226 = VAR_227 -> VAR_228 ; } else { METHOD_32 ( "invalidx-gridformat" ) ; return ; } break ; case 'y' : if ( METHOD_33 ( VAR_229 , "none" ) == 0 ) { VAR_230 -> VAR_231 = 0 ; break ; } ; if ( METHOD_34 ( VAR_232 , "%lf:%d" , & VAR_233 -> VAR_234 , & VAR_235 -> VAR_236 ) == 2 ) { if ( VAR_237 -> VAR_238 <= 0 ) { METHOD_35 ( "gridstepmustbe>0" ) ; return ; } else if ( VAR_239 -> VAR_240 < 1 ) { METHOD_36 ( "labelfactormustbe>0" ) ; return ; } } else { METHOD_37 ( "invalidy-gridformat" ) ; return ; } break ; case 1007 : VAR_241 -> VAR_242 = METHOD_38 ( VAR_243 ) ; break ; case 1008 : if ( METHOD_39 ( VAR_244 , "%lf:%lf" , & VAR_245 -> VAR_246 , & VAR_247 -> VAR_248 ) != 2 ) { METHOD_40 ( "expectedgrid-dashformatfloat:float" ) ; return ; } break ; case 1009 : VAR_249 -> VAR_250 = 1 ; break ; case 1002 : if ( METHOD_41 ( VAR_251 , "%lf:%lf" , & VAR_252 -> VAR_253 , & VAR_254 -> VAR_255 ) == 2 ) { if ( VAR_256 -> VAR_257 == 0 ) { METHOD_42 ( "thesecond_axis_scalemustnotbe0" ) ; return ; } } else { METHOD_43 ( "invalidright-axisformatexpectedscale:shift" ) ; return ; } break ; case 1003 : METHOD_44 ( VAR_258 -> VAR_259 , VAR_260 , 150 ) ; VAR_261 -> VAR_262 [ 150 ] = '\\0' ; break ; case 1004 :  if ( METHOD_45 ( VAR_263 ) ) {  METHOD_46 ( "useeither%leor%lfformats" ) ; return ; } METHOD_47 ( VAR_264 -> VAR_265 , VAR_266 , 150 ) ; VAR_267 -> VAR_268 [ 150 ] = '\\0' ; break ; case 1010 :  if ( METHOD_48 ( VAR_269 ) ) {  METHOD_49 ( "useeither%leor%lfformats" ) ; return ; } METHOD_50 ( VAR_270 -> VAR_271 , VAR_272 , 150 ) ; VAR_273 -> VAR_274 [ 150 ] = '\\0' ; break ; case 'v' : METHOD_51 ( VAR_275 -> VAR_276 , VAR_277 , 150 ) ; VAR_278 -> VAR_279 [ 150 ] = '\\0' ; break ; case 'u' : VAR_280 -> VAR_281 = METHOD_52 ( VAR_282 ) ; break ; case 'l' : VAR_283 -> VAR_284 = METHOD_53 ( VAR_285 ) ; break ; case 'b' : VAR_286 -> VAR_287 = METHOD_54 ( VAR_288 ) ; if ( VAR_289 -> VAR_290 != 1024 && VAR_291 -> VAR_292 != 1000 ) { METHOD_55 ( "theonlysensiblevalueforbaseapartfrom1000is1024" ) ; return ; } break ; case 'w' : VAR_293 = METHOD_56 ( VAR_294 ) ; if ( VAR_295 < 10 ) { METHOD_57 ( "widthbelow10pixels" ) ; return ; } VAR_296 -> VAR_297 = VAR_298 ; break ; case 'h' : VAR_299 = METHOD_58 ( VAR_300 ) ; if ( VAR_301 < 10 ) { METHOD_59 ( "heightbelow10pixels" ) ; return ; } VAR_302 -> VAR_303 = VAR_304 ; break ; case 'D' : VAR_305 -> VAR_306 |= VAR_307 ; break ; case 'i' : break ; case 'r' : VAR_308 -> VAR_309 = 1 ; break ; case 'f' : VAR_310 -> VAR_311 = VAR_312 ; break ; case 'a' : if ( ( TYPE_19 ) ( VAR_313 -> VAR_314 = METHOD_60 ( VAR_315 ) ) == - 1 ) { METHOD_61 ( "unsupportedgraphicsformat\'%s\'" , VAR_316 ) ; return ; } break ; case 'z' : VAR_317 -> VAR_318 = 1 ; break ; case 'E' : VAR_319 -> VAR_320 = 1 ; break ; case 'o' : VAR_321 -> VAR_322 = 1 ; break ; case 'c' : if ( METHOD_62 ( VAR_323 , "%10[A-Z]%n%8lx%n" , VAR_324 , & VAR_325 , & TYPE_20 , & VAR_326 ) == 2 ) { TYPE_21 VAR_327 ; TYPE_22 VAR_328 = VAR_329 - VAR_330 ; switch ( VAR_331 ) { case 3 : TYPE_23 = ( ( ( TYPE_24 & 0xF00 ) * 0x110000 ) | ( ( TYPE_25 & 0x0F0 ) * 0x011000 ) | ( ( TYPE_26 & 0x00F ) * 0x001100 ) | 0x000000FF ) ; break ; case 4 : TYPE_27 = ( ( ( TYPE_28 & 0xF000 ) * 0x11000 ) | ( ( TYPE_29 & 0x0F00 ) * 0x01100 ) | ( ( TYPE_30 & 0x00F0 ) * 0x00110 ) | ( ( TYPE_31 & 0x000F ) * 0x00011 ) ) ; break ; case 6 : TYPE_32 = ( TYPE_33 << 8 ) + 0xff ; break ; case 8 : break ; default : METHOD_63 ( "thecolorformatisRRGGBB[AA]" ) ; return ; } if ( ( VAR_332 = METHOD_64 ( VAR_333 ) ) != - 1 ) { VAR_334 -> VAR_335 [ VAR_336 ] = METHOD_65 ( TYPE_34 ) ; } else { METHOD_66 ( "invalidcolorname\'%s\'" , VAR_337 ) ; return ; } } else { METHOD_67 ( "invalidcolordefformat" ) ; return ; } break ; case 'n' : { TYPE_35 VAR_338 [ 15 ] ; TYPE_36 VAR_339 = 1 ; TYPE_37 VAR_340 ; if ( METHOD_68 ( VAR_341 , "%10[A-Z]:%lf%n" , VAR_342 , & VAR_343 , & VAR_344 ) >= 2 ) { TYPE_38 VAR_345 , VAR_346 ; if ( ( VAR_347 = METHOD_69 ( VAR_348 ) ) != - 1 ) { for ( VAR_349 = VAR_350 ; VAR_351 < VAR_352 ; VAR_353 ++ ) { if ( VAR_354 > 0 ) { METHOD_70 ( VAR_355 , VAR_356 , VAR_357 , VAR_358 ) ; } if ( ( TYPE_39 ) METHOD_71 ( VAR_359 ) > VAR_360 + 2 ) { if ( VAR_361 [ VAR_362 ] == ':' ) { METHOD_72 ( VAR_363 , VAR_364 , VAR_365 + VAR_366 + 1 , 0 ) ; } else { METHOD_73 ( "expected:afterfontsizein\'%s\'" , VAR_367 ) ; return ; } } if ( VAR_368 == VAR_369 && VAR_370 != 0 ) break ; } } else { METHOD_74 ( "invalidfonttag\'%s\'" , VAR_371 ) ; return ; } } else { METHOD_75 ( "invalidtextpropertyformat" ) ; return ; } break ; } case 'm' : VAR_372 -> VAR_373 = METHOD_76 ( VAR_374 ) ; if ( VAR_375 -> VAR_376 <= 0.0 ) { METHOD_77 ( "zoomfactormustbe>0" ) ; return ; } break ; case 't' : METHOD_78 ( VAR_377 -> VAR_378 , VAR_379 , 150 ) ; VAR_380 -> VAR_381 [ 150 ] = '\\0' ; break ; case 'R' : if ( METHOD_79 ( VAR_382 , "normal" ) == 0 ) { METHOD_80 ( VAR_383 -> VAR_384 , VAR_385 ) ; METHOD_81 ( VAR_386 -> VAR_387 , VAR_388 ) ; } else if ( METHOD_82 ( VAR_389 , "light" ) == 0 ) { METHOD_83 ( VAR_390 -> VAR_391 , VAR_392 ) ; METHOD_84 ( VAR_393 -> VAR_394 , VAR_395 ) ; } else if ( METHOD_85 ( VAR_396 , "mono" ) == 0 ) { METHOD_86 ( VAR_397 -> VAR_398 , VAR_399 ) ; METHOD_87 ( VAR_400 -> VAR_401 , VAR_402 ) ; } else { METHOD_88 ( "unknownfont-render-mode\'%s\'" , VAR_403 ) ; return ; } break ; case 'G' : if ( METHOD_89 ( VAR_404 , "normal" ) == 0 ) VAR_405 -> VAR_406 = VAR_407 ; else if ( METHOD_90 ( VAR_408 , "mono" ) == 0 ) VAR_409 -> VAR_410 = VAR_411 ; else { METHOD_91 ( "unknowngraph-render-mode\'%s\'" , VAR_412 ) ; return ; } break ; case 'B' : break ; case 'W' : METHOD_92 ( VAR_413 -> VAR_414 , VAR_415 , 100 ) ; VAR_416 -> VAR_417 [ 99 ] = '\\0' ; break ; case 'd' : { if ( VAR_418 -> VAR_419 != VAR_420 ) { METHOD_93 ( "Youcannotspecify--daemon" "morethanonce." ) ; return ; } VAR_421 -> VAR_422 = METHOD_94 ( VAR_423 ) ; if ( VAR_424 -> VAR_425 == VAR_426 ) { METHOD_95 ( "strdupfailed" ) ; return ; } break ; } case '?' : if ( VAR_427 != 0 ) METHOD_96 ( "unknownoption\'%c\'" , VAR_428 ) ; else METHOD_97 ( "unknownoption\'%s\'" , VAR_429 [ VAR_430 - 1 ] ) ; return ; } } { TYPE_40 VAR_431 = METHOD_98 ( VAR_432 -> VAR_433 ) ; if ( VAR_434 != 0 ) return ; } METHOD_99 ( METHOD_100 ( VAR_435 -> VAR_436 ) , VAR_437 -> VAR_438 ) ; METHOD_101 ( VAR_439 -> VAR_440 ) ; if ( VAR_441 -> VAR_442 && VAR_443 -> VAR_444 <= 0 ) { METHOD_102 ( "foralogarithmicyaxisyoumustspecifyalower-limit>0" ) ; return ; } if ( METHOD_103 ( & VAR_445 , & VAR_446 , & VAR_447 , & VAR_448 ) == - 1 ) { return ; } if ( VAR_449 < 3600 * 24 * 365 * 10 ) { METHOD_104 ( "thefirstentrytofetchshouldbeafter1980(%ld)" , VAR_450 ) ; return ; } if ( VAR_451 < VAR_452 ) { METHOD_105 ( "start(%ld)shouldbelessthanend(%ld)" , VAR_453 , VAR_454 ) ; return ; } VAR_455 -> VAR_456 = VAR_457 ; VAR_458 -> VAR_459 = VAR_460 ; VAR_461 -> VAR_462 = METHOD_106 ( ( TYPE_41 ) VAR_463 -> VAR_464 , ( VAR_465 -> VAR_466 - VAR_467 -> VAR_468 ) / VAR_469 -> VAR_470 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 * VAR_5 ; if ( VAR_6 == VAR_7 || VAR_8 == VAR_9 ) return VAR_10 ; if ( VAR_11 -> VAR_12 != VAR_13 ) return VAR_14 ; if ( VAR_15 -> VAR_16 > VAR_17 ) return VAR_18 ; VAR_19 -> VAR_20 [ VAR_21 -> VAR_22 ] = '\\0' ;  VAR_23 = METHOD_1 ( VAR_24 -> VAR_25 , '' ) ;  if ( VAR_26 == VAR_27 ) return VAR_28 ; VAR_29 = METHOD_2 ( VAR_30 + 1 , "?" ) ; if ( VAR_31 == VAR_32 ) return VAR_33 ; if ( * VAR_34 == '?' ) {  VAR_35 = METHOD_3 ( VAR_36 + 1 , '' ) ;  if ( VAR_37 == VAR_38 ) return VAR_39 ; VAR_40 = VAR_41 - VAR_42 ; } else { VAR_43 = VAR_44 ; VAR_45 = 0 ; } VAR_46 = METHOD_4 ( VAR_47 ) ; if ( VAR_48 == 0 ) { METHOD_5 ( VAR_49 , VAR_50 + VAR_51 , VAR_52 -> VAR_53 + VAR_54 -> VAR_55 + 1 - VAR_56 ) ; } else { VAR_57 ++ ; if ( ( VAR_58 -> VAR_59 + VAR_60 - VAR_61 ) > VAR_62 ) return VAR_63 ; METHOD_6 ( VAR_64 + VAR_65 , VAR_66 , VAR_67 -> VAR_68 + VAR_69 -> VAR_70 + 1 - VAR_71 ) ; VAR_72 [ 0 ] = '?' ; METHOD_7 ( VAR_73 + 1 , VAR_74 , VAR_75 - 1 ) ; } VAR_76 -> VAR_77 = VAR_78 -> VAR_79 + VAR_80 - VAR_81 ; return VAR_82 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 ) { VAR_5 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 , VAR_9 ; TYPE_7 METHOD_1 = VAR_10 ; TYPE_8 VAR_11 = VAR_12 ; TYPE_9 VAR_13 = 0 ; if ( VAR_14 == VAR_15 ) { METHOD_2 ( VAR_16 , METHOD_3 ( VAR_17 , VAR_18 ) , "namedargumentsmustfollowbare*" ) ; return - 1 ; } METHOD_4 ( VAR_19 != VAR_20 ) ; while ( VAR_21 < METHOD_5 ( VAR_22 ) ) { VAR_23 = METHOD_6 ( VAR_24 , VAR_25 ) ; switch ( METHOD_7 ( VAR_26 ) ) { case VAR_27 : case VAR_28 : if ( VAR_29 + 1 < METHOD_8 ( VAR_30 ) && METHOD_9 ( METHOD_10 ( VAR_31 , VAR_32 + 1 ) ) == VAR_33 ) { VAR_34 = METHOD_11 ( VAR_35 , METHOD_12 ( VAR_36 , VAR_37 + 2 ) ) ; if ( ! VAR_38 ) goto VAR_39 ; METHOD_13 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 += 2 ; } else { METHOD_14 ( VAR_44 , VAR_45 , VAR_46 ) ; } if ( METHOD_15 ( VAR_47 ) == 3 ) { VAR_48 = METHOD_16 ( VAR_49 , METHOD_17 ( VAR_50 , 2 ) ) ; if ( ! VAR_51 ) goto VAR_52 ; } else { VAR_53 = VAR_54 ; } VAR_55 = METHOD_18 ( VAR_56 , 0 ) ; VAR_57 = METHOD_19 ( VAR_58 ) ; if ( ! VAR_59 ) goto VAR_60 ; if ( METHOD_20 ( VAR_61 , VAR_62 , VAR_63 , 0 ) ) goto VAR_64 ; METHOD_21 = METHOD_22 ( VAR_65 , VAR_66 , VAR_67 , METHOD_23 ( VAR_68 ) , VAR_69 -> VAR_70 , VAR_71 -> VAR_72 , VAR_73 -> VAR_74 , VAR_75 -> VAR_76 ) ; if ( ! METHOD_24 ) goto VAR_77 ; METHOD_25 ( VAR_78 , VAR_79 ++ , METHOD_26 ) ; VAR_80 += 1 ;  if ( METHOD_27 ( METHOD_28 ( VAR_81 , VAR_82 ) ) == VAR_83 )  VAR_84 += 1 ; break ; case VAR_85 : METHOD_29 -> VAR_86 = METHOD_30 ( VAR_87 ) ; if ( ! METHOD_31 -> VAR_88 ) goto VAR_89 ; VAR_90 += 1 ; break ; case VAR_91 : return VAR_92 ; default : METHOD_32 ( VAR_93 , VAR_94 , "unexpectednode" ) ; goto VAR_95 ; } } return VAR_96 ; VAR_97 : return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; TYPE_3 * const VAR_4 = & VAR_5 -> VAR_6 ; if ( VAR_7 -> VAR_8 == VAR_9 ) {  METHOD_1 ( VAR_10 -> VAR_11 . VAR_12 , VAR_13 , sizeof ( VAR_14 ) ) ;  METHOD_2 ( VAR_15 ) ; METHOD_3 ( VAR_16 ) ;  METHOD_4 ( VAR_17 -> VAR_18 , 0 , sizeof ( VAR_19 -> VAR_20 ) ) ;  VAR_21 -> VAR_22 = VAR_23 ;  METHOD_5 ( VAR_24 -> VAR_25 , 0 , sizeof ( VAR_26 -> VAR_27 ) ) ;   METHOD_6 ( VAR_28 -> VAR_29 , 0 , sizeof ( VAR_30 -> VAR_31 ) ) ;  VAR_32 -> VAR_33 = 1 ; VAR_34 -> VAR_35 = 1 ; VAR_36 -> VAR_37 = 0 ; VAR_38 -> VAR_39 = 0 ; VAR_40 -> VAR_41 [ VAR_42 ] = 0 ; VAR_43 -> VAR_44 [ VAR_45 ] = 0 ; } else { if ( ! VAR_46 -> VAR_47 ) { VAR_48 -> VAR_49 = VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; } else { VAR_60 -> VAR_61 = VAR_62 ; VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; } if ( VAR_72 -> VAR_73 && VAR_74 -> VAR_75 && ! VAR_76 -> VAR_77 ) VAR_78 -> VAR_79 = 1 ; } VAR_80 -> VAR_81 = & VAR_82 -> VAR_83 ; VAR_84 -> VAR_85 = VAR_86 -> VAR_87 ; VAR_88 -> VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 -> VAR_100 ; VAR_101 -> VAR_102 = 0 ; VAR_103 -> VAR_104 = 0xffffffff ; if ( VAR_105 -> VAR_106 ) VAR_107 -> VAR_108 = 0xfffffff8 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ;  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ;  TYPE_5 * VAR_4 ;  VAR_5 = ( TYPE_6 * ) VAR_6 -> VAR_7 ;  if ( METHOD_1 ( VAR_8 , VAR_9 ) & VAR_10 )  {  METHOD_2 ( VAR_11 , VAR_12 , VAR_13 -> VAR_14 ) ;  METHOD_3 ( VAR_15 , VAR_16 ,  ( TYPE_7 * ) & VAR_17 -> VAR_18 , sizeof ( TYPE_8 ) ) ;  VAR_19 -> VAR_20 = METHOD_4 ( VAR_21 -> VAR_22 ) ; METHOD_5 ( VAR_23 , VAR_24 , ( TYPE_9 * ) & VAR_25 , sizeof ( TYPE_10 ) ) ; VAR_26 = METHOD_6 ( VAR_27 ) ; METHOD_7 ( VAR_28 , VAR_29 , ( TYPE_11 * ) & VAR_30 , sizeof ( TYPE_12 ) ) ; VAR_31 = METHOD_8 ( VAR_32 ) ;  if ( ( VAR_33 & VAR_34 ) != 0 )  {  VAR_35 = METHOD_9 ( VAR_36 , VAR_37 ) ;   METHOD_10 ( VAR_38 , VAR_39 , VAR_40 -> VAR_41 , VAR_42 ) ;  VAR_43 = VAR_44 ; } else { VAR_45 = VAR_46 ; } if ( VAR_47 -> VAR_48 == VAR_49 ) {  METHOD_11 ( VAR_50 , VAR_51 , VAR_52 ) ;  } else {  METHOD_12 ( VAR_53 , VAR_54 , VAR_55 -> VAR_56 - 2 ) ;  }  METHOD_13 ( VAR_57 , VAR_58 , VAR_59 ) ;  } else { VAR_60 = VAR_61 ; } if ( ! VAR_62 ) { TYPE_13 VAR_63 ; VAR_64 = VAR_65 ;  METHOD_14 ( VAR_66 , VAR_67 -> VAR_68 , VAR_69 , & VAR_70 ) ;  } return VAR_71 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 [ VAR_3 ] ; TYPE_4 * VAR_4 ; struct STRUCT_OR_UNION_0 VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 ; TYPE_5 VAR_7 , VAR_8 ; unsigned TYPE_6 VAR_9 , VAR_10 = 0 ; METHOD_1 ( VAR_11 , & VAR_12 ) ; VAR_13 = METHOD_2 ( VAR_14 , & VAR_15 , & VAR_16 ) ; if ( VAR_17 != VAR_18 || ! VAR_19 ) return VAR_20 ; VAR_21 = METHOD_3 ( VAR_22 , 0 , VAR_23 , VAR_24 , 0 ) ; if ( VAR_25 < 0 ) return VAR_26 ; VAR_27 = ( ( ( TYPE_7 ) VAR_28 [ 0 ] ) << 8 ) | VAR_29 [ 1 ] ; METHOD_4 ( VAR_30 -> VAR_31 , "Storedobjectisofsize:%" SC_FORMAT_LEN_SIZE_T "u" , VAR_32 ) ; if ( VAR_33 < 1 || VAR_34 > VAR_35 ) { METHOD_5 ( VAR_36 -> VAR_37 , "Invalidobjectsize:%" SC_FORMAT_LEN_SIZE_T "u" , VAR_38 ) ; return VAR_39 ; } VAR_40 = 2 ;  while ( VAR_41 [ VAR_42 ] == 0x01 ) {  if ( VAR_43 [ VAR_44 + 1 ] == 0xFE ) { VAR_45 [ VAR_46 ] . VAR_47 = VAR_48 [ VAR_49 + 4 ] ; METHOD_6 ( VAR_50 -> VAR_51 , "Keycontainer%disallocatedanduseskey_ref%d" , VAR_52 + 1 , VAR_53 [ VAR_54 ] . VAR_55 ) ; VAR_56 += 9 ; } else { VAR_57 [ VAR_58 ] . VAR_59 = VAR_60 ; VAR_61 [ VAR_62 ] . VAR_63 = VAR_64 ; METHOD_7 ( VAR_65 -> VAR_66 , "Keycontainer%disunallocated" , VAR_67 + 1 ) ; VAR_68 += 8 ; } VAR_69 ++ ; } for ( ; VAR_70 < VAR_71 ; VAR_72 ++ ) { VAR_73 [ VAR_74 ] . VAR_75 = VAR_76 ; VAR_77 [ VAR_78 ] . VAR_79 = VAR_80 ; } VAR_81 = VAR_82 + VAR_83 ; while ( ( TYPE_8 ) ( VAR_84 - VAR_85 ) < VAR_86 ) { VAR_87 = METHOD_8 ( VAR_88 , VAR_89 - VAR_90 , VAR_91 , METHOD_9 ( VAR_92 , VAR_93 - ( VAR_94 - VAR_95 ) ) , 0 ) ; if ( VAR_96 < 0 ) { METHOD_10 ( VAR_97 -> VAR_98 , "Couldnotreadcertobject" ) ; return VAR_99 ; } VAR_100 += VAR_101 ; } VAR_102 = 0 ; while ( VAR_103 < VAR_104 - 1 ) { if ( VAR_105 [ VAR_106 ] == 0x30 && VAR_107 [ VAR_108 + 1 ] == 0x82 ) { while ( VAR_109 < VAR_110 && VAR_111 [ VAR_112 ] . VAR_113 == VAR_114 ) VAR_115 ++ ; if ( VAR_116 == VAR_117 ) { METHOD_11 ( VAR_118 -> VAR_119 , "Warning:Foundorphanedcertificateatoffset%d" , VAR_120 ) ; return VAR_121 ; } if ( VAR_122 + 3 >= sizeof VAR_123 ) return VAR_124 ; VAR_125 = ( ( ( ( TYPE_9 ) VAR_126 [ VAR_127 + 2 ] ) << 8 ) | VAR_128 [ VAR_129 + 3 ] ) + 4 ; METHOD_12 ( VAR_130 -> VAR_131 , "Foundcertificateofkeycontainer%datoffset%d,len%" SC_FORMAT_LEN_SIZE_T "u" , VAR_132 + 1 , VAR_133 , VAR_134 ) ; VAR_135 [ VAR_136 ] . VAR_137 = VAR_138 ; VAR_139 [ VAR_140 ] . VAR_141 = VAR_142 ; VAR_143 += VAR_144 ; VAR_145 ++ ; } else VAR_146 ++ ; } for ( ; VAR_147 < VAR_148 ; VAR_149 ++ ) { if ( VAR_150 [ VAR_151 ] . VAR_152 ) { METHOD_13 ( VAR_153 -> VAR_154 , "Warning:Certificateofkeycontainer%dismissing" , VAR_155 + 1 ) ; VAR_156 [ VAR_157 ] . VAR_158 = VAR_159 ; VAR_160 [ VAR_161 ] . VAR_162 = VAR_163 ; } } return VAR_164 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; TYPE_1 VAR_2 = VAR_3 -> VAR_4 . VAR_5 [ VAR_6 ] ; TYPE_2 VAR_7 = ( VAR_8 -> VAR_9 . VAR_10 [ VAR_11 ] & - 1u ) | ( ( TYPE_3 ) ( VAR_12 -> VAR_13 . VAR_14 [ VAR_15 ] & - 1u ) << 32 ) ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ;  if ( METHOD_1 ( VAR_25 , & VAR_26 ) != 0 ) {  METHOD_2 ( VAR_27 , VAR_28 ) ; METHOD_3 ( VAR_29 , 0 ) ; return 1 ; } METHOD_4 ( VAR_30 , VAR_31 ) ; METHOD_5 ( VAR_32 ) ; return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 )  { TYPE_3 VAR_2 ;  TYPE_4 VAR_3 = METHOD_1 (  ( const TYPE_5 * ) METHOD_2 ( VAR_4 ) , ( TYPE_6 ) METHOD_3 ( VAR_5 )  ) ;  TYPE_7 VAR_6 ; TYPE_8 VAR_7 = METHOD_4 ( ) ; METHOD_5 ( ( TYPE_9 * ) VAR_8 , VAR_9 ) ; TYPE_10 TYPE_11 VAR_10 ( VAR_11 , VAR_12 , ( TYPE_12 * ) VAR_13 ) ; VAR_14 = METHOD_6 ( VAR_15 ) ; METHOD_7 ( VAR_16 , VAR_17 ) ; METHOD_8 ( VAR_18 ) ; if ( VAR_19 == VAR_20 ) { TYPE_13 VAR_21 = METHOD_9 ( ) ; if ( VAR_22 ) METHOD_10 ( VAR_23 , VAR_24 ) ; else METHOD_11 ( VAR_25 , "Couldnotparsedocument" ) ; return VAR_26 ; } VAR_27 = METHOD_12 ( VAR_28 , 0 , VAR_29 , VAR_30 ) ; METHOD_13 ( VAR_31 , "@errors" , VAR_32 ) ;  return VAR_33 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  unsigned TYPE_1 VAR_2 ;  unsigned TYPE_2 VAR_3 = 0 , VAR_4 ;  struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ;  if ( VAR_8 -> VAR_9 > ( ~ 0UL >> VAR_10 ) ) { return - VAR_11 ; } VAR_12 = VAR_13 -> VAR_14 & VAR_15 ; VAR_16 = METHOD_1 ( ( VAR_17 & ~ VAR_18 ) + VAR_19 -> VAR_20 ) ; VAR_21 = VAR_22 -> VAR_23 << VAR_24 ; if ( ( VAR_25 -> VAR_26 - VAR_27 -> VAR_28 + VAR_29 ) > VAR_30 ) { return - VAR_31 ; } VAR_32 += VAR_33 ; VAR_34 -> VAR_35 = VAR_36 >> VAR_37 ; VAR_38 -> VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 -> VAR_43 ) |= VAR_44 ;  return METHOD_4 ( VAR_45 , VAR_46 -> VAR_47 , VAR_48 >> VAR_49 ,  VAR_50 -> VAR_51 - VAR_52 -> VAR_53 , VAR_54 -> VAR_55 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 * VAR_6 ; TYPE_8 * VAR_7 ; VAR_8 = VAR_9 ; VAR_10 = 3 * VAR_11 -> VAR_12 ; for ( ; ; ) { if ( VAR_13 < VAR_14 ) return VAR_15 - VAR_16 ; VAR_17 = VAR_18 -> VAR_19 ; for ( VAR_20 = 0 ; VAR_21 < VAR_22 -> VAR_23 ; VAR_24 ++ ) { VAR_25 [ 0 ] = VAR_26 [ VAR_27 ] ; VAR_28 [ 1 ] = VAR_29 [ ( VAR_30 + 4 * VAR_31 -> VAR_32 ) / 2 ] ; VAR_33 [ 2 ] = VAR_34 [ ( VAR_35 + 5 * VAR_36 -> VAR_37 ) / 2 ] ;  VAR_38 += 4 ;  } VAR_39 -> METHOD_1 ( ( TYPE_9 * ) VAR_40 -> VAR_41 [ VAR_42 -> VAR_43 ] , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ; if ( ++ VAR_48 -> VAR_49 >= VAR_50 -> VAR_51 ) return - 1 ; VAR_52 = VAR_53 -> VAR_54 ; for ( VAR_55 = 0 ; VAR_56 < VAR_57 -> VAR_58 ; VAR_59 ++ ) { VAR_60 [ 0 ] = VAR_61 [ VAR_62 + VAR_63 -> VAR_64 ] ; VAR_65 [ 1 ] = VAR_66 [ ( VAR_67 + 4 * VAR_68 -> VAR_69 ) / 2 ] ; VAR_70 [ 2 ] = VAR_71 [ ( VAR_72 + 5 * VAR_73 -> VAR_74 ) / 2 ] ;  VAR_75 += 4 ;  } VAR_76 -> METHOD_2 ( ( TYPE_10 * ) VAR_77 -> VAR_78 [ VAR_79 -> VAR_80 ] , VAR_81 -> VAR_82 , VAR_83 -> VAR_84 ) ; if ( ++ VAR_85 -> VAR_86 >= VAR_87 -> VAR_88 ) return - 1 ; VAR_89 += VAR_90 ; VAR_91 -= VAR_92 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 VAR_3 ; METHOD_1 ( VAR_4 , "enteringCDROM_MEDIA_CHANGED\\n" ) ; if ( ! METHOD_2 ( VAR_5 ) ) return - VAR_6 ; if ( ! METHOD_3 ( VAR_7 ) || VAR_8 == VAR_9 ) return METHOD_4 ( VAR_10 , 1 ) ;  if ( ( unsigned TYPE_3 ) VAR_11 >= VAR_12 -> VAR_13 )  return - VAR_14 ; VAR_15 = METHOD_5 ( sizeof ( * VAR_16 ) , VAR_17 ) ; if ( ! VAR_18 ) return - VAR_19 ; VAR_20 = METHOD_6 ( VAR_21 , VAR_22 ) ; if ( ! VAR_23 ) VAR_24 = VAR_25 -> VAR_26 [ VAR_27 ] . VAR_28 ; METHOD_7 ( VAR_29 ) ; return VAR_30 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_3 * VAR_7 , * VAR_8 ; TYPE_3 VAR_9 = VAR_10 & 0xff ; TYPE_4 VAR_11 = VAR_12 >> 8 ; TYPE_5 VAR_13 ; switch ( VAR_14 ) { case VAR_15 : if ( VAR_16 & VAR_17 ) return - VAR_18 ; case VAR_19 : case VAR_20 : case VAR_21 : case VAR_22 : case VAR_23 : case VAR_24 : case VAR_25 : break ; default : return - VAR_26 ; } METHOD_2 ( & VAR_27 ) ;  VAR_28 = - VAR_29 ;  if ( ! VAR_30 -> VAR_31 ) goto VAR_32 ; VAR_33 = - VAR_34 ; if ( VAR_35 -> VAR_36 ) goto VAR_37 ; if ( VAR_38 == VAR_39 || ( VAR_40 & VAR_41 ) ) { VAR_42 = - VAR_43 ; VAR_44 = METHOD_3 ( sizeof ( * VAR_45 ) , VAR_46 ) ; if ( ! VAR_47 ) goto VAR_48 ; METHOD_4 ( & VAR_49 -> VAR_50 , 0 ) ; METHOD_5 ( & VAR_51 -> VAR_52 , 0 ) ; METHOD_6 ( & VAR_53 -> VAR_54 , 0 ) ; VAR_55 -> VAR_56 = VAR_57 ; } if ( VAR_58 & VAR_59 ) { if ( VAR_60 != 0 ) { VAR_61 = - VAR_62 ; goto VAR_63 ; } if ( ! METHOD_7 ( VAR_64 , & VAR_65 ) ) { VAR_66 = - VAR_67 ; goto VAR_68 ; } VAR_69 &= ~ ( VAR_70 >> 8 ) ; } VAR_71 = VAR_72 ; METHOD_8 ( VAR_73 , & VAR_74 , VAR_75 ) { if ( VAR_76 -> VAR_77 == VAR_78 && METHOD_9 ( & VAR_79 -> VAR_80 ) == METHOD_10 ( VAR_81 ) ) { VAR_82 = VAR_83 ; break ; } } VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 -> VAR_88 != VAR_89 ) goto VAR_90 ; if ( ! VAR_91 ) { VAR_92 = - VAR_93 ; VAR_94 = METHOD_11 ( sizeof ( * VAR_95 ) , VAR_96 ) ; if ( ! VAR_97 ) goto VAR_98 ; METHOD_12 ( & VAR_99 -> VAR_100 , METHOD_13 ( VAR_101 ) ) ; VAR_102 -> VAR_103 = VAR_104 ; VAR_105 -> VAR_106 = VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; METHOD_14 ( & VAR_111 -> VAR_112 ) ; METHOD_15 ( & VAR_113 -> VAR_114 ) ; METHOD_16 ( & VAR_115 -> VAR_116 , 0 ) ; METHOD_17 ( VAR_117 ) ; VAR_118 -> VAR_119 . VAR_120 = VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 . VAR_126 = VAR_127 -> VAR_128 . VAR_129 ; VAR_130 -> VAR_131 . VAR_132 = VAR_133 ; VAR_134 -> VAR_135 . VAR_136 = VAR_137 ; VAR_138 -> VAR_139 . VAR_140 = VAR_141 ; METHOD_18 ( & VAR_142 -> VAR_143 , & VAR_144 ) ; } VAR_145 = - VAR_146 ;  if ( VAR_147 -> VAR_148 == VAR_149 &&  VAR_150 -> VAR_151 . VAR_152 == VAR_153 -> VAR_154 . VAR_155 && VAR_156 -> VAR_157 . VAR_158 == VAR_159 -> VAR_160 . VAR_161 ) { VAR_162 = - VAR_163 ; if ( METHOD_19 ( & VAR_164 -> VAR_165 ) < VAR_166 ) { METHOD_20 ( & VAR_167 -> VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_21 ( & VAR_172 -> VAR_173 , METHOD_22 ( & VAR_174 -> VAR_175 ) + 1 ) ; METHOD_23 ( VAR_176 , VAR_177 ) ; VAR_178 = 0 ; } }  VAR_179 :  if ( VAR_180 && VAR_181 ) { METHOD_24 ( VAR_182 ) ; VAR_183 -> VAR_184 = VAR_185 ; } METHOD_25 ( & VAR_186 ) ; return VAR_187 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( & VAR_1 -> VAR_2 -> VAR_3 , VAR_4 ) ;  if ( VAR_5 -> VAR_6 ) {  VAR_7 -> VAR_8 -> VAR_9 = 1 ; METHOD_2 ( & VAR_10 -> VAR_11 -> VAR_12 ) ;  } else  METHOD_3 ( VAR_13 -> VAR_14 ) ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 )  { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; VAR_7 = VAR_8 ;  while ( * VAR_9 && VAR_10 > 0 ) {  if ( * VAR_11 & 0x80 ) { VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , & VAR_15 ) ; if ( VAR_16 < 0 ) return - VAR_17 ;  if ( VAR_18 >= VAR_19 ) {   VAR_20 -= VAR_21 ;   * VAR_22 ++ = ( TYPE_6 ) ( VAR_23 |   ( ( VAR_24 >> 10 ) & VAR_25 ) ) ;  * VAR_26 ++ = ( TYPE_7 ) ( VAR_27 | VAR_28 |  ( VAR_29 & VAR_30 ) ) ;  } else {  * VAR_31 ++ = ( TYPE_8 ) VAR_32 ;  } VAR_33 += VAR_34 ; VAR_35 -= VAR_36 ; } else {  * VAR_37 ++ = * VAR_38 ++ ;  VAR_39 -- ; } } return VAR_40 - VAR_41 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 , VAR_4 ;  if ( VAR_5 -> VAR_6 == VAR_7 ) { if ( VAR_8 > 256 || ! ( VAR_9 -> VAR_10 & VAR_11 ) ) return VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 ; VAR_16 ++ ) { VAR_17 = METHOD_1 ( & VAR_18 -> VAR_19 ) ; VAR_20 -> VAR_21 [ VAR_22 ] = ( VAR_23 -> VAR_24 [ VAR_25 ] & 0x00ffffff ) | ( VAR_26 << 24 ) ; } } else if ( VAR_27 -> VAR_28 == VAR_29 || VAR_30 -> VAR_31 == VAR_32 ) { if ( ( VAR_33 -> VAR_34 == VAR_35 && VAR_36 != 2 ) ||  ( VAR_37 -> VAR_38 == VAR_39 && VAR_40 != 6 ) )  return VAR_41 ; for ( VAR_42 = 0 ; VAR_43 < VAR_44 / 2 ; VAR_45 ++ ) { VAR_46 = METHOD_2 ( METHOD_3 ( & VAR_47 -> VAR_48 ) , VAR_49 -> VAR_50 ) ; if ( VAR_51 -> VAR_52 > 8 ) METHOD_4 ( & VAR_53 -> VAR_54 [ 2 * VAR_55 ] , VAR_56 ) ; else VAR_57 -> VAR_58 [ VAR_59 ] = VAR_60 ; } } else { return VAR_61 ; } METHOD_5 ( & VAR_62 -> VAR_63 , 4 ) ; VAR_64 -> VAR_65 = 1 ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = VAR_2 ; static TYPE_3 VAR_3 = VAR_4 ; CRM_CHECK ( VAR_5 != VAR_6 , return - VAR_7 ) ; if ( METHOD_1 ( "CIB_passwd" ) != VAR_8 ) { VAR_9 = VAR_10 ; } if ( VAR_11 && VAR_12 == VAR_13 ) { VAR_14 = METHOD_2 ( ) ; } if ( VAR_15 && VAR_16 -> VAR_17 == VAR_18 ) { METHOD_3 ( "Connectingtostonith" ) ; VAR_19 = VAR_20 -> VAR_21 -> METHOD_4 ( VAR_22 , VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) { METHOD_5 ( "Settingupstonithcallbacks" ) ; VAR_27 -> VAR_28 -> METHOD_6 ( VAR_29 , VAR_30 , VAR_31 ) ; } } if ( VAR_32 -> VAR_33 != VAR_34 && VAR_35 -> VAR_36 != VAR_37 ) { METHOD_7 ( "ConnectingtotheCIB" ) ; if ( VAR_38 && VAR_39 && VAR_40 -> VAR_41 == VAR_42 ) { VAR_43 = VAR_44 ; METHOD_8 ( "Password:" ) ; } VAR_45 = VAR_46 -> VAR_47 -> METHOD_9 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( VAR_51 != VAR_52 ) { return VAR_53 ; } VAR_54 = METHOD_10 ( VAR_55 ) ; METHOD_11 ( VAR_56 ) ; if ( VAR_57 ) { if ( VAR_58 == VAR_59 ) { VAR_60 = VAR_61 -> VAR_62 -> METHOD_12 ( VAR_63 , VAR_64 ) ; if ( VAR_65 == - VAR_66 ) {  METHOD_13 ( "Notificationsetupfailed,won\'tbeabletoreconnectafterfailure" ) ;  if ( VAR_67 ) { METHOD_14 ( 2 ) ; } VAR_68 = VAR_69 ; } } if ( VAR_70 == VAR_71 ) { VAR_72 -> VAR_73 -> METHOD_15 ( VAR_74 , VAR_75 , VAR_76 ) ; VAR_77 = VAR_78 -> VAR_79 -> METHOD_16 ( VAR_80 , VAR_81 , VAR_82 ) ; } if ( VAR_83 != VAR_84 ) { METHOD_17 ( "Notificationsetupfailed,couldnotmonitorCIBactions" ) ; if ( VAR_85 ) { METHOD_18 ( 2 ) ; } METHOD_19 ( - VAR_86 ) ; } } } return VAR_87 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { METHOD_1 ( & VAR_2 -> VAR_3 , & VAR_4 -> VAR_5 ) ; METHOD_2 ( & VAR_6 -> VAR_7 , & VAR_8 -> VAR_9 ) ; if ( METHOD_3 ( VAR_10 ) ) { VAR_11 -> VAR_12 = ( TYPE_3 ) METHOD_4 ( VAR_13 ) ; VAR_14 -> VAR_15 = VAR_16 ; } else { VAR_17 -> VAR_18 = ( TYPE_4 ) METHOD_5 ( VAR_19 ) ; VAR_20 -> VAR_21 = VAR_22 ; }  VAR_23 -> VAR_24 [ 0 ] = VAR_25 -> VAR_26 [ 0 ] ;  VAR_27 -> VAR_28 [ 1 ] = VAR_29 -> VAR_30 [ 1 ] ; VAR_31 -> VAR_32 = METHOD_6 ( VAR_33 ) ; VAR_34 -> VAR_35 = METHOD_7 ( VAR_36 ) ; VAR_37 -> VAR_38 = 0 ; VAR_39 -> VAR_40 = 0 ; METHOD_8 ( & VAR_41 -> VAR_42 ) ; ( TYPE_5 ) METHOD_9 ( VAR_43 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; VAR_5 = ( TYPE_6 * ) VAR_6 -> VAR_7 ;  VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ;   if ( ( VAR_11 & VAR_12 ) != 0 )  {  if ( ( VAR_13 & ( VAR_14 | VAR_15 | VAR_16 | VAR_17 ) ) == 0 )  {  VAR_18 = METHOD_2 ( VAR_19 , VAR_20 ) & VAR_21 ;  if ( VAR_22 > 0 && VAR_23 <= VAR_24 ) {  METHOD_3 ( VAR_25 , VAR_26 , VAR_27 ) ;   METHOD_4 ( VAR_28 , VAR_29 , VAR_30 ) ;  METHOD_5 ( VAR_31 , VAR_32 -> VAR_33 , VAR_34 ) ;  METHOD_6 ( VAR_35 , VAR_36 , VAR_37 ) ;  VAR_38 = VAR_39 ; METHOD_7 ( VAR_40 , VAR_41 -> VAR_42 , VAR_43 , & VAR_44 ) ; return VAR_45 ; } } }  METHOD_8 ( VAR_46 , VAR_47 , VAR_48 ) ;  return VAR_49 ; }
static TYPE_0  METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ,   TYPE_2 * VAR_2 , TYPE_3 VAR_3 )   {  TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 = VAR_8 ; TYPE_8 VAR_9 = 1 ; TYPE_9 * VAR_10 ; TYPE_10 VAR_11 = VAR_12 ; if ( VAR_13 && VAR_14 -> VAR_15 < 5 ) { METHOD_1 ( VAR_16 , VAR_17 , "AsyncfunctionsareonlysupportedinPython3.5andgreater" ) ; return VAR_18 ; } METHOD_2 ( VAR_19 , VAR_20 ) ; VAR_21 = METHOD_3 ( METHOD_4 ( VAR_22 , VAR_23 ) ) ; if ( ! VAR_24 ) return VAR_25 ; if ( METHOD_5 ( VAR_26 , VAR_27 , METHOD_6 ( VAR_28 , VAR_29 ) , 0 ) ) return VAR_30 ; VAR_31 = METHOD_7 ( VAR_32 , METHOD_8 ( VAR_33 , VAR_34 + 1 ) ) ; if ( ! VAR_35 ) return VAR_36 ; if ( METHOD_9 ( METHOD_10 ( VAR_37 , VAR_38 + 2 ) ) == VAR_39 ) { VAR_40 = METHOD_11 ( VAR_41 , METHOD_12 ( VAR_42 , VAR_43 + 3 ) ) ; if ( ! VAR_44 ) return VAR_45 ; VAR_46 += 2 ; } if ( METHOD_13 ( METHOD_14 ( VAR_47 , VAR_48 + 3 ) ) == VAR_49 ) { VAR_50 = METHOD_15 ( METHOD_16 ( VAR_51 , VAR_52 + 3 ) ) ; VAR_53 += 1 ; } VAR_54 = METHOD_17 ( VAR_55 , METHOD_18 ( VAR_56 , VAR_57 + 3 ) ) ; if ( ! VAR_58 ) return VAR_59 ; if ( ! VAR_60 && METHOD_19 ( METHOD_20 ( VAR_61 , VAR_62 + 3 ) ) > 1 ) { VAR_63 = METHOD_21 ( METHOD_22 ( VAR_64 , VAR_65 + 3 ) , 1 ) ; if ( METHOD_23 ( VAR_66 ) == VAR_67 ) VAR_68 = METHOD_24 ( VAR_69 ) ; } if ( VAR_70 ) return METHOD_25 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 , VAR_75 ,  VAR_76 , METHOD_26 ( VAR_77 ) ,  VAR_78 -> VAR_79 , VAR_80 -> VAR_81 ) ; else return METHOD_27 ( VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 , METHOD_28 ( VAR_88 ) , VAR_89 -> VAR_90 , VAR_91 -> VAR_92 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_1 VAR_11 ;  VAR_12 = METHOD_1 ( VAR_13 , 0xA0000 ) ;  if ( METHOD_2 ( VAR_14 ) ) goto VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 , 0xA0000 ) ; if ( METHOD_4 ( VAR_18 ) ) goto VAR_19 ; VAR_20 = METHOD_5 ( VAR_21 , 0xA0000 ) ; METHOD_6 ( VAR_22 , VAR_23 ) ; if ( METHOD_7 ( VAR_24 ) ) goto VAR_25 ; VAR_26 = METHOD_8 ( VAR_27 , VAR_28 , 0xA0000 , & VAR_29 ) ; for ( VAR_30 = 0 ; VAR_31 < 32 ; VAR_32 ++ ) { if ( METHOD_9 ( * VAR_33 ) ) METHOD_10 ( VAR_34 , METHOD_11 ( * VAR_35 ) ) ; VAR_36 ++ ; } METHOD_12 ( VAR_37 , VAR_38 ) ; VAR_39 :  METHOD_13 ( ) ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 * VAR_4 , * VAR_5 = VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; if ( VAR_9 == 0 ) return - VAR_10 ; if ( VAR_11 [ VAR_12 - 1 ] != '\\0' ) { if ( VAR_13 == VAR_14 ) return - VAR_15 ; VAR_16 [ VAR_17 ] = '\\0' ; } if ( VAR_18 != VAR_19 ) return - VAR_20 ; VAR_21 = VAR_22 ; VAR_23 = METHOD_1 ( VAR_24 ) ; VAR_25 = METHOD_2 ( & VAR_26 , "" ) ; if ( ! VAR_27 ) return - VAR_28 ; VAR_29 = METHOD_3 ( VAR_30 ) ; if ( ! * VAR_31 ) return - VAR_32 ; VAR_33 = VAR_34 - ( VAR_35 - ( TYPE_7 * ) VAR_36 ) ; if ( METHOD_4 ( VAR_37 , "current" ) == 0 ) { if ( METHOD_5 ( VAR_38 , "changehat" ) == 0 ) { VAR_39 = METHOD_6 ( VAR_40 , VAR_41 , ! VAR_42 ) ; } else if ( METHOD_7 ( VAR_43 , "permhat" ) == 0 ) { VAR_44 = METHOD_8 ( VAR_45 , VAR_46 , VAR_47 ) ; } else if ( METHOD_9 ( VAR_48 , "changeprofile" ) == 0 ) { VAR_49 = METHOD_10 ( VAR_50 , ! VAR_51 , ! VAR_52 ) ; } else if ( METHOD_11 ( VAR_53 , "permprofile" ) == 0 ) { VAR_54 = METHOD_12 ( VAR_55 , ! VAR_56 , VAR_57 ) ; } else if ( METHOD_13 ( VAR_58 , "permipc" ) == 0 ) { VAR_59 = METHOD_14 ( VAR_60 ) ; } else { struct STRUCT_OR_UNION_1 VAR_61 ; METHOD_15 ( & VAR_62 , VAR_63 ) ; VAR_64 . VAR_65 . VAR_66 = VAR_67 ; VAR_68 . VAR_69 . VAR_70 = VAR_71 ; VAR_72 . VAR_73 . VAR_74 = - VAR_75 ;  return METHOD_16 ( VAR_76 , VAR_77 , VAR_78 ,  & VAR_79 , VAR_80 ) ; } } else if ( METHOD_17 ( VAR_81 , "exec" ) == 0 ) { VAR_82 = METHOD_18 ( VAR_83 , VAR_84 , ! VAR_85 ) ; } else { return - VAR_86 ; } if ( ! VAR_87 ) VAR_88 = VAR_89 ; return VAR_90 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ;  VAR_9 = 0 ;  if ( METHOD_1 ( VAR_10 , & VAR_11 -> VAR_12 ) || METHOD_2 ( VAR_13 , & VAR_14 -> VAR_15 ) || METHOD_3 ( VAR_16 , & VAR_17 -> VAR_18 ) || METHOD_4 ( VAR_19 , & VAR_20 -> VAR_21 ) || METHOD_5 ( VAR_22 , & VAR_23 -> VAR_24 ) || METHOD_6 ( VAR_25 , & VAR_26 -> VAR_27 ) || METHOD_7 ( VAR_28 , & VAR_29 -> VAR_30 ) || METHOD_8 ( VAR_31 , & VAR_32 -> VAR_33 ) || METHOD_9 ( VAR_34 , & VAR_35 -> VAR_36 ) || METHOD_10 ( VAR_37 , & VAR_38 -> VAR_39 ) ) {  return - 1 ;  }  if ( ! VAR_40 -> VAR_41 || ! VAR_42 -> VAR_43 || ! VAR_44 -> VAR_45 ||  ! VAR_46 -> VAR_47 || ! VAR_48 -> VAR_49 || VAR_50 -> VAR_51 > 16384 ) { return - 1 ; } if ( VAR_52 -> VAR_53 >= VAR_54 -> VAR_55 || VAR_56 -> VAR_57 >= VAR_58 -> VAR_59 ) { METHOD_11 ( "alltilesareoutsidetheimagearea\\n" ) ; return - 1 ; } if ( ! ( VAR_60 -> VAR_61 = METHOD_12 ( VAR_62 -> VAR_63 , sizeof ( VAR_64 ) ) ) ) { return - 1 ; } for ( VAR_65 = 0 ; VAR_66 < VAR_67 -> VAR_68 ; ++ VAR_69 ) { if ( METHOD_13 ( VAR_70 , & VAR_71 ) || METHOD_14 ( VAR_72 , & VAR_73 -> VAR_74 [ VAR_75 ] . VAR_76 ) || METHOD_15 ( VAR_77 , & VAR_78 -> VAR_79 [ VAR_80 ] . VAR_81 ) ) { METHOD_16 ( VAR_82 -> VAR_83 ) ; return - 1 ; } if ( VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 == 0 || VAR_88 -> VAR_89 [ VAR_90 ] . VAR_91 > 255 ) { METHOD_17 ( "invalidXRsizvalue%d\\n" , VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 ) ; METHOD_18 ( VAR_96 -> VAR_97 ) ; return - 1 ; } if ( VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 == 0 || VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 > 255 ) { METHOD_19 ( "invalidYRsizvalue%d\\n" , VAR_106 -> VAR_107 [ VAR_108 ] . VAR_109 ) ; METHOD_20 ( VAR_110 -> VAR_111 ) ; return - 1 ; } VAR_112 -> VAR_113 [ VAR_114 ] . VAR_115 = ( VAR_116 >> 7 ) & 1 ; VAR_117 -> VAR_118 [ VAR_119 ] . VAR_120 = ( VAR_121 & 0x7f ) + 1 ; } if ( METHOD_21 ( VAR_122 ) ) { METHOD_22 ( VAR_123 -> VAR_124 ) ; return - 1 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = 0 ; TYPE_7 VAR_7 = METHOD_1 ( VAR_8 , VAR_9 , VAR_10 , 0 ) ; VAR_11 -> VAR_12 = * VAR_13 & VAR_14 ; if ( VAR_15 -> VAR_16 ) { TYPE_8 VAR_17 ; if ( ( VAR_18 -> VAR_19 > 8 ) || VAR_20 -> VAR_21 ) { METHOD_2 ( "sn_coap_parser_options_parse-tokennotvalid!" ) ; return - 1 ; } VAR_22 = METHOD_3 ( * VAR_23 , VAR_24 , VAR_25 , VAR_26 -> VAR_27 ) ; if ( 0 != VAR_28 ) { METHOD_4 ( "sn_coap_parser_options_parse-**packet_data_pptroverflow!" ) ; return - 1 ; } VAR_29 -> VAR_30 = METHOD_5 ( VAR_31 , * VAR_32 , VAR_33 -> VAR_34 ) ; if ( VAR_35 -> VAR_36 == VAR_37 ) { METHOD_6 ( "sn_coap_parser_options_parse-failedtoallocatetoken!" ) ; return - 1 ; } VAR_38 = METHOD_7 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 -> VAR_43 ) ; } while ( VAR_44 && ( * * VAR_45 != 0xff ) ) { TYPE_9 VAR_46 = ( * * VAR_47 & 0x0F ) ; TYPE_10 VAR_48 = ( * * VAR_49 >> VAR_50 ) ; VAR_51 = METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , 1 ) ; TYPE_11 VAR_55 ; VAR_56 = METHOD_9 ( & VAR_57 , VAR_58 , VAR_59 , VAR_60 , & VAR_61 ) ; if ( VAR_62 != 0 ) { return - 1 ; }  VAR_63 += VAR_64 ;  VAR_65 = METHOD_10 ( & VAR_66 , VAR_67 , VAR_68 , VAR_69 , & VAR_70 ) ; if ( VAR_71 != 0 ) { return - 1 ; } VAR_72 = VAR_73 ; switch ( VAR_74 ) { case VAR_75 : case VAR_76 : case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : case VAR_83 : case VAR_84 : case VAR_85 : case VAR_86 : case VAR_87 : case VAR_88 : if ( METHOD_11 ( VAR_89 , VAR_90 ) == VAR_91 ) { METHOD_12 ( "sn_coap_parser_options_parse-failedtoallocateoptions!" ) ; return - 1 ; } break ; } if ( VAR_92 < VAR_93 ) { METHOD_13 ( "sn_coap_parser_options_parse-**packet_data_pptrwouldoverflowwhenparsingoptions!" ) ; return - 1 ; } switch ( VAR_94 ) { case VAR_95 : if ( ( VAR_96 > 2 ) || ( VAR_97 -> VAR_98 != VAR_99 ) ) { METHOD_14 ( "sn_coap_parser_options_parse-COAP_OPTION_CONTENT_FORMATnotvalid!" ) ; return - 1 ; } VAR_100 -> VAR_101 = ( TYPE_12 ) METHOD_15 ( VAR_102 , VAR_103 ) ; break ; case VAR_104 : if ( VAR_105 > 4 ) { METHOD_16 ( "sn_coap_parser_options_parse-COAP_OPTION_MAX_AGEnotvalid!" ) ; return - 1 ; } VAR_106 -> VAR_107 -> VAR_108 = METHOD_17 ( VAR_109 , VAR_110 ) ; break ; case VAR_111 : if ( ( VAR_112 > 1034 ) || ( VAR_113 < 1 ) || VAR_114 -> VAR_115 -> VAR_116 ) { METHOD_18 ( "sn_coap_parser_options_parse-COAP_OPTION_PROXY_URInotvalid!" ) ; return - 1 ; } VAR_117 -> VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 -> VAR_123 = METHOD_19 ( VAR_124 , * VAR_125 , VAR_126 ) ; if ( VAR_127 -> VAR_128 -> VAR_129 == VAR_130 ) { METHOD_20 ( "sn_coap_parser_options_parse-COAP_OPTION_PROXY_URIallocationfailed!" ) ; return - 1 ; } VAR_131 = METHOD_21 ( VAR_132 , VAR_133 , VAR_134 , VAR_135 ) ; break ; case VAR_136 :  VAR_137 = METHOD_22 ( VAR_138 , VAR_139 ,  VAR_140 , & VAR_141 -> VAR_142 -> VAR_143 , ( TYPE_13 * ) & VAR_144 -> VAR_145 -> VAR_146 , VAR_147 , VAR_148 ) ; if ( VAR_149 < 0 ) { METHOD_23 ( "sn_coap_parser_options_parse-COAP_OPTION_ETAGnotvalid!" ) ; return - 1 ; } break ; case VAR_150 : if ( ( VAR_151 > 255 ) || ( VAR_152 < 1 ) || VAR_153 -> VAR_154 -> VAR_155 ) { METHOD_24 ( "sn_coap_parser_options_parse-COAP_OPTION_URI_HOSTnotvalid!" ) ; return - 1 ; } VAR_156 -> VAR_157 -> VAR_158 = VAR_159 ; VAR_160 -> VAR_161 -> VAR_162 = METHOD_25 ( VAR_163 , * VAR_164 , VAR_165 ) ; if ( VAR_166 -> VAR_167 -> VAR_168 == VAR_169 ) { METHOD_26 ( "sn_coap_parser_options_parse-COAP_OPTION_URI_HOSTallocationfailed!" ) ; return - 1 ; } VAR_170 = METHOD_27 ( VAR_171 , VAR_172 , VAR_173 , VAR_174 ) ; break ; case VAR_175 : if ( VAR_176 -> VAR_177 -> VAR_178 ) { METHOD_28 ( "sn_coap_parser_options_parse-COAP_OPTION_LOCATION_PATHexists!" ) ; return - 1 ; } VAR_179 = METHOD_29 ( VAR_180 , VAR_181 , VAR_182 , & VAR_183 -> VAR_184 -> VAR_185 , & VAR_186 -> VAR_187 -> VAR_188 , VAR_189 , VAR_190 ) ; if ( VAR_191 < 0 ) { METHOD_30 ( "sn_coap_parser_options_parse-COAP_OPTION_LOCATION_PATHnotvalid!" ) ; return - 1 ; } break ; case VAR_192 : if ( ( VAR_193 > 2 ) || VAR_194 -> VAR_195 -> VAR_196 != VAR_197 ) { METHOD_31 ( "sn_coap_parser_options_parse-COAP_OPTION_URI_PORTnotvalid!" ) ; return - 1 ; } VAR_198 -> VAR_199 -> VAR_200 = METHOD_32 ( VAR_201 , VAR_202 ) ; break ; case VAR_203 :  VAR_204 = METHOD_33 ( VAR_205 , VAR_206 , VAR_207 ,  & VAR_208 -> VAR_209 -> VAR_210 , & VAR_211 -> VAR_212 -> VAR_213 , VAR_214 , VAR_215 ) ; if ( VAR_216 < 0 ) { METHOD_34 ( "sn_coap_parser_options_parse-COAP_OPTION_LOCATION_QUERYnotvalid!" ) ; return - 1 ; } break ; case VAR_217 :  VAR_218 = METHOD_35 ( VAR_219 , VAR_220 , VAR_221 ,  & VAR_222 -> VAR_223 , & VAR_224 -> VAR_225 , VAR_226 , VAR_227 ) ; if ( VAR_228 < 0 ) { METHOD_36 ( "sn_coap_parser_options_parse-COAP_OPTION_URI_PATHnotvalid!" ) ; return - 1 ; } break ; case VAR_229 : if ( ( VAR_230 > 2 ) || VAR_231 -> VAR_232 -> VAR_233 != VAR_234 ) { METHOD_37 ( "sn_coap_parser_options_parse-COAP_OPTION_OBSERVEnotvalid!" ) ; return - 1 ; } VAR_235 -> VAR_236 -> VAR_237 = METHOD_38 ( VAR_238 , VAR_239 ) ; break ; case VAR_240 : VAR_241 = METHOD_39 ( VAR_242 , VAR_243 , VAR_244 , & VAR_245 -> VAR_246 -> VAR_247 , & VAR_248 -> VAR_249 -> VAR_250 , VAR_251 , VAR_252 ) ; if ( VAR_253 < 0 ) { METHOD_40 ( "sn_coap_parser_options_parse-COAP_OPTION_URI_QUERYnotvalid!" ) ; return - 1 ; } break ; case VAR_254 : if ( ( VAR_255 > 3 ) || VAR_256 -> VAR_257 -> VAR_258 != VAR_259 ) { METHOD_41 ( "sn_coap_parser_options_parse-COAP_OPTION_BLOCK2notvalid!" ) ; return - 1 ; } VAR_260 -> VAR_261 -> VAR_262 = METHOD_42 ( VAR_263 , VAR_264 ) ; break ; case VAR_265 : if ( ( VAR_266 > 3 ) || VAR_267 -> VAR_268 -> VAR_269 != VAR_270 ) { METHOD_43 ( "sn_coap_parser_options_parse-COAP_OPTION_BLOCK1notvalid!" ) ; return - 1 ; } VAR_271 -> VAR_272 -> VAR_273 = METHOD_44 ( VAR_274 , VAR_275 ) ; break ; case VAR_276 : if ( ( VAR_277 > 2 ) || ( VAR_278 -> VAR_279 -> VAR_280 != VAR_281 ) ) { METHOD_45 ( "sn_coap_parser_options_parse-COAP_OPTION_ACCEPTnotvalid!" ) ; return - 1 ; } VAR_282 -> VAR_283 -> VAR_284 = ( TYPE_14 ) METHOD_46 ( VAR_285 , VAR_286 ) ; break ; case VAR_287 : if ( ( VAR_288 > 4 ) || VAR_289 -> VAR_290 -> VAR_291 ) { METHOD_47 ( "sn_coap_parser_options_parse-COAP_OPTION_SIZE1notvalid!" ) ; return - 1 ; } VAR_292 -> VAR_293 -> VAR_294 = VAR_295 ; VAR_296 -> VAR_297 -> VAR_298 = METHOD_48 ( VAR_299 , VAR_300 ) ; break ; case VAR_301 : if ( ( VAR_302 > 4 ) || VAR_303 -> VAR_304 -> VAR_305 ) { METHOD_49 ( "sn_coap_parser_options_parse-COAP_OPTION_SIZE2notvalid!" ) ; return - 1 ; } VAR_306 -> VAR_307 -> VAR_308 = VAR_309 ; VAR_310 -> VAR_311 -> VAR_312 = METHOD_50 ( VAR_313 , VAR_314 ) ; break ; default : METHOD_51 ( "sn_coap_parser_options_parse-unknownoption!" ) ; return - 1 ; } if ( ( * VAR_315 - VAR_316 ) > VAR_317 ) { return - 1 ; } VAR_318 = METHOD_52 ( VAR_319 , VAR_320 , VAR_321 , 0 ) ; } return 0 ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 ; TYPE_2 VAR_4 = 0 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 = 0 ; TYPE_6 VAR_8 = 0 ; TYPE_7 VAR_9 = 0 ; TYPE_8 VAR_10 = 0 ; TYPE_9 VAR_11 = 60 ; TYPE_10 VAR_12 = 500000 ; TYPE_11 VAR_13 = 0 ; TYPE_12 VAR_14 = 0.0 ; TYPE_13 VAR_15 = 0.0 ; TYPE_14 VAR_16 = 0.0 ; TYPE_15 VAR_17 = 0 ; TYPE_16 VAR_18 = 0 ; TYPE_17 * VAR_19 = VAR_20 ; TYPE_18 VAR_21 = 0 ; TYPE_19 VAR_22 = 0 ; TYPE_20 VAR_23 = 0 ; TYPE_21 VAR_24 = 0 ; if ( METHOD_1 ( VAR_25 , "FORM" , 4 ) ) { METHOD_2 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 , 0 ) ; return VAR_30 ; } VAR_31 += 4 ; VAR_32 -= 4 ; VAR_33 = * VAR_34 ++ << 24 ; VAR_35 |= * VAR_36 ++ << 16 ; VAR_37 |= * VAR_38 ++ << 8 ; VAR_39 |= * VAR_40 ++ ; VAR_41 -= 4 ; if ( METHOD_3 ( VAR_42 , "XDIRINFO" , 8 ) ) { METHOD_4 ( VAR_43 , VAR_44 , VAR_45 , VAR_46 , 0 ) ; return VAR_47 ; } VAR_48 += 8 ; VAR_49 -= 8 ; VAR_50 += 4 ; VAR_51 -= 4 ; VAR_52 = * VAR_53 ++ ; if ( VAR_54 == 0 ) { METHOD_5 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , 0 ) ; return VAR_59 ; } VAR_60 -- ; VAR_61 -= 13 ; VAR_62 += VAR_63 ; VAR_64 -= VAR_65 ; if ( METHOD_6 ( VAR_66 , "CAT" , 4 ) ) { METHOD_7 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 , 0 ) ; return VAR_71 ; } VAR_72 += 4 ; VAR_73 -= 4 ; VAR_74 = * VAR_75 ++ << 24 ; VAR_76 |= * VAR_77 ++ << 16 ; VAR_78 |= * VAR_79 ++ << 8 ; VAR_80 |= * VAR_81 ++ ; VAR_82 -= 4 ; METHOD_8 ( VAR_83 ) ; if ( METHOD_9 ( VAR_84 , "XMID" , 4 ) ) { METHOD_10 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 , 0 ) ; return VAR_89 ; } VAR_90 += 4 ; VAR_91 -= 4 ; VAR_92 = METHOD_11 ( ) ; METHOD_12 ( VAR_93 , VAR_94 ) ; METHOD_13 ( VAR_95 , VAR_96 ) ; VAR_97 = METHOD_14 ( VAR_98 , VAR_99 ) ; VAR_100 = METHOD_15 ( sizeof ( TYPE_22 ) * 16 * 128 ) ; METHOD_16 ( VAR_101 , 0 , ( sizeof ( TYPE_23 ) * 16 * 128 ) ) ; for ( VAR_102 = 0 ; VAR_103 < VAR_104 ; VAR_105 ++ ) { if ( METHOD_17 ( VAR_106 , "FORM" , 4 ) ) { METHOD_18 ( VAR_107 , VAR_108 , VAR_109 , VAR_110 , 0 ) ; goto VAR_111 ; } VAR_112 += 4 ; VAR_113 -= 4 ; VAR_114 = * VAR_115 ++ << 24 ; VAR_116 |= * VAR_117 ++ << 16 ; VAR_118 |= * VAR_119 ++ << 8 ; VAR_120 |= * VAR_121 ++ ; VAR_122 -= 4 ; if ( METHOD_19 ( VAR_123 , "XMID" , 4 ) ) { METHOD_20 ( VAR_124 , VAR_125 , VAR_126 , VAR_127 , 0 ) ; goto VAR_128 ; } VAR_129 += 4 ; VAR_130 -= 4 ; VAR_131 -= 4 ; do { if ( ! METHOD_21 ( VAR_132 , "TIMB" , 4 ) ) { VAR_133 += 4 ; VAR_134 = * VAR_135 ++ << 24 ; VAR_136 |= * VAR_137 ++ << 16 ; VAR_138 |= * VAR_139 ++ << 8 ; VAR_140 |= * VAR_141 ++ ; VAR_142 += VAR_143 ; VAR_144 -= ( 8 + VAR_145 ) ; VAR_146 -= ( 8 + VAR_147 ) ; } else if ( ! METHOD_22 ( VAR_148 , "RBRN" , 4 ) ) { VAR_149 += 4 ; VAR_150 = * VAR_151 ++ << 24 ; VAR_152 |= * VAR_153 ++ << 16 ; VAR_154 |= * VAR_155 ++ << 8 ; VAR_156 |= * VAR_157 ++ ; VAR_158 += VAR_159 ; VAR_160 -= ( 8 + VAR_161 ) ; VAR_162 -= ( 8 + VAR_163 ) ; } else if ( ! METHOD_23 ( VAR_164 , "EVNT" , 4 ) ) { VAR_165 += 4 ; VAR_166 ++ ; VAR_167 = * VAR_168 ++ << 24 ; VAR_169 |= * VAR_170 ++ << 16 ; VAR_171 |= * VAR_172 ++ << 8 ; VAR_173 |= * VAR_174 ++ ; VAR_175 -= 8 ; VAR_176 -= 8 ; do { if ( * VAR_177 < 0x80 ) { VAR_178 = 0 ; if ( * VAR_179 > 0x7f ) { while ( * VAR_180 > 0x7f ) { VAR_181 = ( VAR_182 << 7 ) | ( * VAR_183 ++ & 0x7f ) ; VAR_184 -- ; VAR_185 -- ; VAR_186 -- ; } } VAR_187 = ( VAR_188 << 7 ) | ( * VAR_189 ++ & 0x7f ) ; VAR_190 -- ; VAR_191 -- ; VAR_192 -- ; do { if ( ( VAR_193 != 0 ) && ( VAR_194 <= VAR_195 ) ) { VAR_196 = VAR_197 ; } else { VAR_198 = VAR_199 ; } VAR_200 = ( ( ( TYPE_24 ) VAR_201 * VAR_202 ) + VAR_203 ) ; VAR_204 = ( TYPE_25 ) VAR_205 ; VAR_206 = VAR_207 - ( TYPE_26 ) VAR_208 ; VAR_209 -> VAR_210 [ VAR_211 -> VAR_212 - 1 ] . VAR_213 += VAR_214 ; VAR_215 -> VAR_216 . VAR_217 += VAR_218 ; VAR_219 = 0 ; for ( VAR_220 = 0 ; VAR_221 < ( 16 * 128 ) ; VAR_222 ++ ) { if ( VAR_223 [ VAR_224 ] == 0 ) continue ; VAR_225 [ VAR_226 ] -= VAR_227 ; if ( VAR_228 [ VAR_229 ] == 0 ) { VAR_230 = VAR_231 / 128 ; VAR_232 = VAR_233 - ( VAR_234 * 128 ) ; METHOD_24 ( VAR_235 , VAR_236 , VAR_237 , 0 ) ; } else { if ( ( VAR_238 == 0 ) || ( VAR_239 > VAR_240 [ VAR_241 ] ) ) { VAR_242 = VAR_243 [ VAR_244 ] ; } } } VAR_245 -= VAR_246 ; } while ( VAR_247 ) ; } else { if ( ( VAR_248 [ 0 ] == 0xff ) && ( VAR_249 [ 1 ] == 0x51 ) && ( VAR_250 [ 2 ] == 0x03 ) ) { VAR_251 = 6 ; goto VAR_252 ; }  if ( ( VAR_253 = METHOD_25 ( VAR_254 , VAR_255 , 0 ) ) == 0 ) {  goto VAR_256 ; } if ( ( * VAR_257 & 0xf0 ) == 0x90 ) { VAR_258 = * VAR_259 & 0x0f ; VAR_260 = VAR_261 [ 1 ] ; VAR_262 += VAR_263 ; VAR_264 -= VAR_265 ; VAR_266 -= VAR_267 ; VAR_268 -= VAR_269 ; VAR_270 = 0 ; if ( * VAR_271 > 0x7f ) { while ( * VAR_272 > 0x7f ) { VAR_273 = ( VAR_274 << 7 ) | ( * VAR_275 ++ & 0x7f ) ; VAR_276 -- ; VAR_277 -- ; VAR_278 -- ; } } VAR_279 = ( VAR_280 << 7 ) | ( * VAR_281 ++ & 0x7f ) ; VAR_282 -- ; VAR_283 -- ; VAR_284 -- ; VAR_285 [ 128 * VAR_286 + VAR_287 ] = VAR_288 ; if ( ( VAR_289 > 0 ) && ( ( VAR_290 == 0 ) || ( VAR_291 < VAR_292 ) ) ) { VAR_293 = VAR_294 ; } } else { VAR_295 : VAR_296 += VAR_297 ; VAR_298 -= VAR_299 ; VAR_300 -= VAR_301 ; VAR_302 -= VAR_303 ; } } } while ( VAR_304 ) ; } else { METHOD_26 ( VAR_305 , VAR_306 , VAR_307 , VAR_308 , 0 ) ; goto VAR_309 ; } } while ( VAR_310 ) ; } if ( ( VAR_311 -> VAR_312 = METHOD_27 ( VAR_313 , VAR_314 , VAR_315 , VAR_316 , VAR_317 ) ) == VAR_318 ) { METHOD_28 ( VAR_319 , VAR_320 , VAR_321 , "toinitreverb" , 0 ) ; goto VAR_322 ; } VAR_323 -> VAR_324 . VAR_325 = 0 ; VAR_326 -> VAR_327 = & VAR_328 -> VAR_329 [ 0 ] ; VAR_330 -> VAR_331 = 0 ; VAR_332 -> VAR_333 = VAR_334 ; if ( VAR_335 > 1 ) { VAR_336 -> VAR_337 = 1 ; } METHOD_29 ( VAR_338 ) ; VAR_339 : if ( VAR_340 != VAR_341 ) METHOD_30 ( VAR_342 ) ; if ( VAR_343 -> VAR_344 ) return ( VAR_345 ) ; METHOD_31 ( VAR_346 ) ; return VAR_347 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_3 VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 = ( struct STRUCT_OR_UNION_5 * ) VAR_13 ; TYPE_5 VAR_14 ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ;  if ( METHOD_2 ( VAR_18 == 0 ) )  return 0 ;  VAR_19 = 0 ; VAR_20 = 0 ; METHOD_3 ( VAR_21 ) ; for ( ; ; ) { TYPE_6 VAR_22 = VAR_23 -> VAR_24 ; if ( VAR_25 ) { TYPE_7 VAR_26 = VAR_27 -> VAR_28 ; struct STRUCT_OR_UNION_6 * VAR_29 = VAR_30 -> VAR_31 + VAR_32 ; const struct STRUCT_OR_UNION_7 * VAR_33 = VAR_34 -> VAR_35 ;  TYPE_8 * VAR_36 ;   TYPE_9 VAR_37 = VAR_38 -> VAR_39 ;   TYPE_10 VAR_40 , VAR_41 ;  if ( VAR_42 > VAR_43 ) VAR_44 = VAR_45 ; VAR_46 = VAR_47 -> METHOD_4 ( VAR_48 , VAR_49 ) ; if ( VAR_50 ) { if ( ! VAR_51 ) VAR_52 = VAR_53 ; break ; }  VAR_54 = ! METHOD_5 ( VAR_55 , VAR_56 ) ;  VAR_57 : if ( VAR_58 ) VAR_59 = METHOD_6 ( VAR_60 -> VAR_61 ) ; else VAR_62 = METHOD_7 ( VAR_63 -> VAR_64 ) ; VAR_65 = METHOD_8 ( VAR_66 , VAR_67 + VAR_68 -> VAR_69 , VAR_70 , VAR_71 ) ; if ( VAR_72 ) METHOD_9 ( VAR_73 ) ; else METHOD_10 ( VAR_74 -> VAR_75 ) ; if ( METHOD_11 ( VAR_76 ) ) { if ( VAR_77 ) { VAR_78 = 0 ; goto VAR_79 ; } if ( ! VAR_80 ) VAR_81 = VAR_82 ; break ; } VAR_83 += VAR_84 ; VAR_85 -> VAR_86 += VAR_87 ; VAR_88 -> VAR_89 -= VAR_90 ; if ( VAR_91 -> VAR_92 & VAR_93 ) { VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = 0 ; } if ( ! VAR_98 -> VAR_99 ) { VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> METHOD_12 ( VAR_104 , VAR_105 ) ; VAR_106 = ( VAR_107 + 1 ) & ( VAR_108 -> VAR_109 - 1 ) ; VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = -- VAR_115 ; VAR_116 = 1 ; } VAR_117 -= VAR_118 ; if ( ! VAR_119 ) break ; } if ( VAR_120 ) continue ; if ( ! VAR_121 -> VAR_122 ) break ; if ( ! VAR_123 -> VAR_124 ) { if ( VAR_125 ) break ; if ( VAR_126 -> VAR_127 & VAR_128 ) { VAR_129 = - VAR_130 ; break ; } } if ( METHOD_13 ( VAR_131 ) ) { if ( ! VAR_132 ) VAR_133 = - VAR_134 ; break ; } if ( VAR_135 ) { METHOD_14 ( & VAR_136 -> VAR_137 , VAR_138 | VAR_139 ) ; METHOD_15 ( & VAR_140 -> VAR_141 , VAR_142 , VAR_143 ) ; } METHOD_16 ( VAR_144 ) ; } METHOD_17 ( VAR_145 ) ; if ( VAR_146 ) { METHOD_18 ( & VAR_147 -> VAR_148 , VAR_149 | VAR_150 ) ; METHOD_19 ( & VAR_151 -> VAR_152 , VAR_153 , VAR_154 ) ; } if ( VAR_155 > 0 ) METHOD_20 ( VAR_156 ) ; return VAR_157 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 VAR_2 METHOD_1 { METHOD_2 ( VAR_3 METHOD_3 ( ( VAR_4 << ( VAR_5 METHOD_4 METHOD_5 - 1 METHOD_6 VAR_6 5003 VAR_7 12UL METHOD_7 ( 1UL << VAR_8 METHOD_8  METHOD_9 ( VAR_9 METHOD_10 { if ( VAR_10 > 0 METHOD_11 VAR_11 |= ( TYPE_4 METHOD_12 ( VAR_12 METHOD_13 << VAR_13 ; else VAR_14 = ( TYPE_5 METHOD_14 ( VAR_15 METHOD_15 ; VAR_16 += VAR_17 ; while ( VAR_18 >= 8 METHOD_16 { VAR_19 [ VAR_20 ++ ] = ( unsigned TYPE_6 METHOD_17 ( VAR_21 & 0xff METHOD_18 ; if ( VAR_22 >= 254 METHOD_19 { ( TYPE_7 METHOD_20 METHOD_21 ( VAR_23 , ( unsigned TYPE_8 METHOD_22 VAR_24 METHOD_23 ; ( TYPE_9 METHOD_24 METHOD_25 ( VAR_25 , VAR_26 , VAR_27 METHOD_26 ; VAR_28 = 0 ; } VAR_29 >>= 8 ; VAR_30 -= 8 ; } if ( VAR_31 > VAR_32 METHOD_27 { VAR_33 ++ ; if ( VAR_34 == VAR_35 METHOD_28 VAR_36 = METHOD_29 ; else VAR_37 = METHOD_30 ( VAR_38 METHOD_31 ; } }  TYPE_10 VAR_39 ; TYPE_11 * VAR_40 , * VAR_41 , VAR_42 ; TYPE_12 VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 , VAR_52 , VAR_53 ; TYPE_13 VAR_54 , VAR_55 , VAR_56 , VAR_57 ; unsigned TYPE_14 * VAR_58 , * VAR_59 ; METHOD_32 ( VAR_60 != ( TYPE_15 * METHOD_33 VAR_61 METHOD_34 ; VAR_62 = 1 ; VAR_63 = ( unsigned TYPE_16 * METHOD_35 METHOD_36 ( 256 , sizeof ( * VAR_64 METHOD_37 METHOD_38 ; VAR_65 = ( TYPE_17 * METHOD_39 METHOD_40 ( VAR_66 , sizeof ( * VAR_67 METHOD_41 METHOD_42 ; VAR_68 = ( TYPE_18 * METHOD_43 METHOD_44 ( VAR_69 , sizeof ( * VAR_70 METHOD_45 METHOD_46 ; VAR_71 = ( unsigned TYPE_19 * METHOD_47 METHOD_48 ( VAR_72 , sizeof ( * VAR_73 METHOD_49 METHOD_50 ; if ( ( VAR_74 == ( unsigned TYPE_20 * METHOD_51 VAR_75 METHOD_52 || ( VAR_76 == ( TYPE_21 * METHOD_53 VAR_77 METHOD_54 || ( VAR_78 == ( TYPE_22 * METHOD_55 VAR_79 METHOD_56 || ( VAR_80 == ( unsigned TYPE_23 * METHOD_57 VAR_81 METHOD_58 METHOD_59 { if ( VAR_82 != ( unsigned TYPE_24 * METHOD_60 VAR_83 METHOD_61 VAR_84 = ( unsigned TYPE_25 * METHOD_62 METHOD_63 ( VAR_85 METHOD_64 ; if ( VAR_86 != ( TYPE_26 * METHOD_65 VAR_87 METHOD_66 VAR_88 = ( TYPE_27 * METHOD_67 METHOD_68 ( VAR_89 METHOD_69 ; if ( VAR_90 != ( TYPE_28 * METHOD_70 VAR_91 METHOD_71 VAR_92 = ( TYPE_29 * METHOD_72 METHOD_73 ( VAR_93 METHOD_74 ; if ( VAR_94 != ( unsigned TYPE_30 * METHOD_75 VAR_95 METHOD_76 VAR_96 = ( unsigned TYPE_31 * METHOD_77 METHOD_78 ( VAR_97 METHOD_79 ; return ( VAR_98 METHOD_80 ; } ( TYPE_32 METHOD_81 METHOD_82 ( VAR_99 , 0 , 256 * sizeof ( * VAR_100 METHOD_83 METHOD_84 ; ( TYPE_33 METHOD_85 METHOD_86 ( VAR_101 , 0 , VAR_102 * sizeof ( * VAR_103 METHOD_87 METHOD_88 ; ( TYPE_34 METHOD_89 METHOD_90 ( VAR_104 , 0 , VAR_105 * sizeof ( * VAR_106 METHOD_91 METHOD_92 ; ( TYPE_35 METHOD_93 METHOD_94 ( VAR_107 , 0 , VAR_108 * sizeof ( * VAR_109 METHOD_95 METHOD_96 ; VAR_110 = VAR_111 ; VAR_112 = METHOD_97 ( VAR_113 METHOD_98 ; VAR_114 = ( ( TYPE_36 METHOD_99 VAR_115 << ( VAR_116 - 1 METHOD_100 METHOD_101 ; VAR_117 = VAR_118 + 1 ; VAR_119 = VAR_120 + 2 ; VAR_121 = 0 ; VAR_122 = 0 ; VAR_123 = 0 ; METHOD_102 ( VAR_124 METHOD_103 ; VAR_125 = 0 ; VAR_126 = 0 ; VAR_127 = 0 ; for ( VAR_128 = 0 ; VAR_129 < ( TYPE_37 METHOD_104 VAR_130 -> VAR_131 ; VAR_132 ++ METHOD_105 { register const TYPE_38 * VAR_133 VAR_134 ; register const TYPE_39 * VAR_135 VAR_136 ; register TYPE_40 VAR_137 ; VAR_138 = METHOD_106 ( VAR_139 , 0 , VAR_140 , VAR_141 -> VAR_142 , 1 , & VAR_143 -> VAR_144 METHOD_107 ; if ( VAR_145 == ( const TYPE_41 * METHOD_108 VAR_146 METHOD_109 break ; VAR_147 = METHOD_110 ( VAR_148 METHOD_111 ; if ( VAR_149 == 0 METHOD_112 { VAR_150 = ( TYPE_42 METHOD_113 ( * VAR_151 METHOD_114 ; VAR_152 ++ ; } for ( VAR_153 = ( TYPE_43 METHOD_115 ( VAR_154 == 0 ? 1 : 0 METHOD_116 ; VAR_155 < ( TYPE_44 METHOD_117 VAR_156 -> VAR_157 ; VAR_158 ++ METHOD_118 {  VAR_159 = ( TYPE_45 METHOD_119 ( ( TYPE_46 METHOD_120 METHOD_121 ( VAR_160 + VAR_161 METHOD_122 & 0xff METHOD_123 ;  VAR_162 ++ ; VAR_163 = ( TYPE_47 METHOD_124 ( ( ( TYPE_48 METHOD_125 VAR_164 << ( VAR_165 - 8 METHOD_126 METHOD_127 + VAR_166 METHOD_128 ; if ( VAR_167 >= VAR_168 METHOD_129 VAR_169 -= VAR_170 ;  VAR_171 = VAR_172 ;  VAR_173 = 1 ; if ( VAR_174 [ VAR_175 ] > 0 METHOD_130 { if ( ( VAR_176 [ VAR_177 ] == VAR_178 METHOD_131 && ( VAR_179 [ VAR_180 ] == ( unsigned TYPE_49 METHOD_132 VAR_181 METHOD_133 METHOD_134 { VAR_182 = VAR_183 [ VAR_184 ] ; continue ; } if ( VAR_185 != 0 METHOD_135 VAR_186 = VAR_187 - VAR_188 ; for ( ; ; METHOD_136 { VAR_189 -= VAR_190 ; if ( VAR_191 < 0 METHOD_137 VAR_192 += VAR_193 ; if ( VAR_194 [ VAR_195 ] == 0 METHOD_138 break ; if ( ( VAR_196 [ VAR_197 ] == VAR_198 METHOD_139 && ( VAR_199 [ VAR_200 ] == ( unsigned TYPE_50 METHOD_140 VAR_201 METHOD_141 METHOD_142 { VAR_202 = VAR_203 [ VAR_204 ] ; VAR_205 = VAR_206 ; break ; } } if ( VAR_207 != VAR_208 METHOD_143 continue ; } METHOD_144 ( VAR_209 METHOD_145 ; if ( VAR_210 < METHOD_146 METHOD_147 { VAR_211 [ VAR_212 ] = ( TYPE_51 METHOD_148 VAR_213 ++ ; VAR_214 [ VAR_215 ] = VAR_216 ; VAR_217 [ VAR_218 ] = ( unsigned TYPE_52 METHOD_149 VAR_219 ; } else { for ( VAR_220 = 0 ; VAR_221 < VAR_222 ; VAR_223 ++ METHOD_150 VAR_224 [ VAR_225 ] = 0 ; VAR_226 = VAR_227 + 2 ; METHOD_151 ( VAR_228 METHOD_152 ; VAR_229 = VAR_230 ; VAR_231 = METHOD_153 ( VAR_232 METHOD_154 ; } VAR_233 = ( TYPE_53 METHOD_155 VAR_234 ; } if ( VAR_235 -> VAR_236 == VAR_237 METHOD_156 VAR_238 ++ ; else switch ( VAR_239 METHOD_157 { case 0 : default : { VAR_240 += 8 ; if ( VAR_241 >= ( TYPE_54 METHOD_158 VAR_242 -> VAR_243 METHOD_159 { VAR_244 ++ ; VAR_245 = 4 ; } break ; } case 1 : { VAR_246 += 8 ; if ( VAR_247 >= ( TYPE_55 METHOD_160 VAR_248 -> VAR_249 METHOD_161 { VAR_250 ++ ; VAR_251 = 2 ; } break ; } case 2 : { VAR_252 += 4 ; if ( VAR_253 >= ( TYPE_56 METHOD_162 VAR_254 -> VAR_255 METHOD_163 { VAR_256 ++ ; VAR_257 = 1 ; } break ; } case 3 : { VAR_258 += 2 ; break ; } } } METHOD_164 ( VAR_259 METHOD_165 ; METHOD_166 ( VAR_260 METHOD_167 ; if ( VAR_261 > 0 METHOD_168 { VAR_262 [ VAR_263 ++ ] = ( unsigned TYPE_57 METHOD_169 ( VAR_264 & 0xff METHOD_170 ; if ( VAR_265 >= 254 METHOD_171 { ( TYPE_58 METHOD_172 METHOD_173 ( VAR_266 , ( unsigned TYPE_59 METHOD_174 VAR_267 METHOD_175 ; ( TYPE_60 METHOD_176 METHOD_177 ( VAR_268 , VAR_269 , VAR_270 METHOD_178 ; VAR_271 = 0 ; } } if ( VAR_272 > 0 METHOD_179 { ( TYPE_61 METHOD_180 METHOD_181 ( VAR_273 , ( unsigned TYPE_62 METHOD_182 VAR_274 METHOD_183 ; ( TYPE_63 METHOD_184 METHOD_185 ( VAR_275 , VAR_276 , VAR_277 METHOD_186 ; } VAR_278 = ( unsigned TYPE_64 * METHOD_187 METHOD_188 ( VAR_279 METHOD_189 ; VAR_280 = ( TYPE_65 * METHOD_190 METHOD_191 ( VAR_281 METHOD_192 ; VAR_282 = ( TYPE_66 * METHOD_193 METHOD_194 ( VAR_283 METHOD_195 ; VAR_284 = ( unsigned TYPE_67 * METHOD_196 METHOD_197 ( VAR_285 METHOD_198 ; return ( VAR_286 METHOD_199 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_5 * const VAR_8 = VAR_9 -> VAR_10 ; TYPE_2 VAR_11 ; METHOD_1 ( VAR_12 , METHOD_2 ( "ikev2parentinI2outR2:calculatingg^{xy},sendingR2" ) ) ; if ( VAR_13 == VAR_14 ) { METHOD_3 ( VAR_15 , "%s:Requestwasdisconnectedfromstate" , VAR_16 ) ; if ( VAR_17 -> VAR_18 ) METHOD_4 ( VAR_19 -> VAR_20 ) ; return ; } METHOD_5 ( VAR_21 == VAR_22 ) ; METHOD_6 ( VAR_23 == VAR_24 ) ; METHOD_7 ( VAR_25 != VAR_26 ) ; METHOD_8 ( VAR_27 -> VAR_28 == VAR_29 -> VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 ) ; METHOD_10 ( VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 = METHOD_11 ( VAR_38 , VAR_39 ) ; if ( VAR_40 > VAR_41 ) { TYPE_3 VAR_42 = VAR_43 - VAR_44 ; METHOD_12 ( "ikev2_parent_inI2outR2_tailreturnedSTF_FAILwith%s" , METHOD_13 ( & VAR_45 , VAR_46 ) ) ; } else if ( VAR_47 != VAR_48 ) { METHOD_14 ( "ikev2_parent_inI2outR2_tailreturned%s" , METHOD_15 ( & VAR_49 , VAR_50 ) ) ; } if ( VAR_51 -> VAR_52 != VAR_53 ) { METHOD_16 ( & VAR_54 -> VAR_55 , VAR_56 ) ; if ( VAR_57 -> VAR_58 ) METHOD_17 ( VAR_59 -> VAR_60 ) ; } METHOD_18 ( ) ;  METHOD_19 ( METHOD_20 ( ) ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 = 0 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 = VAR_6 ; TYPE_7 * VAR_7 = "public" ; TYPE_8 VAR_8 [ 256 ] ; TYPE_9 VAR_9 ; TYPE_10 * VAR_10 ; TYPE_11 VAR_11 ; METHOD_1 ( VAR_12 , "i:d:h-" ) ; while ( ( VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ) != VAR_17 ) { switch ( VAR_18 ) { case 'h' : case '-' : METHOD_3 ( VAR_19 [ 0 ] ) ; return ( 0 ) ; case 'i' : VAR_20 = METHOD_4 ( VAR_21 ) ; break ; case 'd' : VAR_22 = VAR_23 ; break ; default : METHOD_5 ( VAR_24 [ 0 ] ) ; return ( - 1 ) ; } } if ( VAR_25 >= VAR_26 ) { METHOD_6 ( VAR_27 , "Commandrequired\\n" ) ; METHOD_7 ( VAR_28 [ 0 ] ) ; return - 1 ; } VAR_29 = VAR_30 [ VAR_31 ++ ] ; METHOD_8 ( "Connectingto%sFMinstance%d\\n" , ( VAR_32 == VAR_33 ) ? "LOCAL" : VAR_34 , VAR_35 ) ; if ( ( VAR_36 = METHOD_9 ( & VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ) != VAR_41 ) { METHOD_10 ( VAR_42 , "Failedtoinitializetheclienthandle:%d\\n" , VAR_43 ) ;  goto VAR_44 ;  } if ( ( VAR_45 = METHOD_11 ( VAR_46 ) ) != VAR_47 ) { METHOD_12 ( VAR_48 , "Failedtoconnect:(%d)%s\\n" , VAR_49 , METHOD_13 ( VAR_50 ) ) ;  goto VAR_51 ;  } for ( VAR_52 = 0 ; VAR_53 < VAR_54 ; VAR_55 ++ ) { if ( METHOD_14 ( VAR_56 , VAR_57 [ VAR_58 ] . VAR_59 ) == 0 ) {  return VAR_60 [ VAR_61 ] . METHOD_15 ( VAR_62 , VAR_63 [ VAR_64 ] . VAR_65 , ( VAR_66 - VAR_67 ) , & VAR_68 [ VAR_69 ] ) ;   }  } METHOD_16 ( VAR_70 , "Command(%s)isnotvalid\\n" , VAR_71 ) ; METHOD_17 ( VAR_72 [ 0 ] ) ; VAR_73 = - 1 ;  VAR_74 :  if ( VAR_75 ) METHOD_18 ( VAR_76 ) ;  return VAR_77 ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; TYPE_11 * VAR_14 ; TYPE_12 VAR_15 ; TYPE_13 VAR_16 ;  if ( METHOD_1 ( ) ) {  METHOD_2 ( ) ; } VAR_17 = VAR_18 [ 0 ] ;  VAR_19 = 0 ;  VAR_20 = 0 ; VAR_21 = 0 ; if d ( VAR_22 ) VAR_23 = VAR_24 ; while ( ( VAR_25 = METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ) >= 0 ) { switch ( VAR_29 ) { case VAR_30 : VAR_31 = 1 ; break ; case VAR_32 : METHOD_4 ( "%s\\n" , VAR_33 ) ; METHOD_5 ( VAR_34 ) ; break ; case VAR_35 : VAR_36 = METHOD_6 ( VAR_37 ) ; break ; case VAR_38 : VAR_39 = VAR_40 ; break ;  case VAR_41 :  VAR_42 = METHOD_7 ( VAR_43 , 0 , 10 ) ; break ; case VAR_44 : default : METHOD_8 ( ) ; break ; } } METHOD_9 ( VAR_45 ) ; if d ( VAR_46 ) METHOD_10 ( VAR_47 ) ; if ( VAR_48 ) { if ( ! ( VAR_49 = METHOD_11 ( VAR_50 , "rb" ) ) ) { METHOD_12 ( VAR_51 , "cannotopeninputimagefile%s\\n" , VAR_52 ) ; METHOD_13 ( VAR_53 ) ; } } else { if ( ! ( VAR_54 = METHOD_14 ( 0 , "rb" ) ) ) { METHOD_15 ( VAR_55 , "cannotopenstandardinput\\n" ) ; METHOD_16 ( VAR_56 ) ; } } if ( ( VAR_57 = METHOD_17 ( VAR_58 ) ) < 0 ) { METHOD_18 ( VAR_59 , "unknownimageformat\\n" ) ; }  if ( ! ( VAR_60 = METHOD_19 ( VAR_61 , VAR_62 , 0 ) ) ) {  METHOD_20 ( VAR_63 ) ; METHOD_21 ( VAR_64 , "cannotloadimage\\n" ) ; return VAR_65 ; } METHOD_22 ( VAR_66 ) ;  if ( ! ( VAR_67 = METHOD_23 ( VAR_68 ) ) ) {  METHOD_24 ( VAR_69 , "warning:imagehasnocomponents\\n" ) ; } if ( VAR_70 ) { VAR_71 = METHOD_25 ( VAR_72 , 0 ) ; VAR_73 = METHOD_26 ( VAR_74 , 0 ) ; VAR_75 = METHOD_27 ( VAR_76 , 0 ) ; } else { VAR_77 = 0 ; VAR_78 = 0 ; VAR_79 = 0 ; }  if ( ! ( VAR_80 = METHOD_28 ( VAR_81 ) ) ) {  METHOD_29 ( ) ; }  METHOD_30 ( "%s%d%d%d%d%ld\\n" , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , ( TYPE_14 ) METHOD_31 ( VAR_87 ) ) ;  METHOD_32 ( VAR_88 ) ; METHOD_33 ( ) ; return VAR_89 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { const TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 = VAR_5 ; for ( TYPE_5 VAR_6 = 1 ; VAR_7 < VAR_8 ; ++ VAR_9 ) { if ( ! METHOD_1 ( "--help" , VAR_10 [ VAR_11 ] ) ) { METHOD_2 ( VAR_12 [ 0 ] ) ; return 0 ; } if ( ! METHOD_3 ( "--insanity" , VAR_13 [ VAR_14 ] ) ) { VAR_15 = VAR_16 ; continue ; } if ( ! METHOD_4 ( VAR_17 [ VAR_18 ] ) ) { METHOD_5 ( "Error:invalidtestname.\\n" ) ; METHOD_6 ( VAR_19 [ 0 ] ) ; return - 1 ; } if ( VAR_20 != VAR_21 ) { METHOD_7 ( "Error:invalidarguments.\\n" ) ; METHOD_8 ( VAR_22 [ 0 ] ) ; return - 1 ; } VAR_23 = VAR_24 [ VAR_25 ] ; } if ( METHOD_9 ( ) ) { METHOD_10 ( "Run\'adbshellstop\'beforerunning%s.\\n" , VAR_26 [ 0 ] ) ; return - 1 ; } TYPE_6 * VAR_27 = METHOD_11 ( VAR_28 ) ; if ( ! VAR_29 ) { METHOD_12 ( "Error:unabletoopenstackconfigfile.\\n" ) ; METHOD_13 ( VAR_30 [ 0 ] ) ; return - 1 ; } for ( const TYPE_7 * VAR_31 = METHOD_14 ( VAR_32 ) ; VAR_33 != METHOD_15 ( VAR_34 ) ; VAR_35 = METHOD_16 ( VAR_36 ) ) { const TYPE_8 * VAR_37 = METHOD_17 ( VAR_38 ) ; if ( METHOD_18 ( VAR_39 , VAR_40 , "LinkKey" ) && METHOD_19 ( VAR_41 , & VAR_42 ) ) { break ; } } METHOD_20 ( VAR_43 ) ; if ( METHOD_21 ( & VAR_44 ) ) { METHOD_22 ( "Error:unabletofindpaireddeviceinconfigfile.\\n" ) ; METHOD_23 ( VAR_45 [ 0 ] ) ; return - 1 ; } if ( ! METHOD_24 ( METHOD_25 ( ) ) ) { METHOD_26 ( "UnabletoopenBluetoothHAL.\\n" ) ; return 1 ; } if ( ! METHOD_27 ( ) ) { METHOD_28 ( "UnabletoinitializeBluetoothsockets.\\n" ) ; return 2 ; } if ( ! METHOD_29 ( ) ) { METHOD_30 ( "UnabletoinitializePAN.\\n" ) ; return 3 ; } if ( ! METHOD_31 ( ) ) { METHOD_32 ( "UnabletoinitializeGATT.\\n" ) ; return 4 ; } VAR_46 = VAR_47 ; METHOD_33 ( & VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; static const TYPE_9 * VAR_52 = "\\x1b[0m" ; static const TYPE_10 * VAR_53 = "\\x1b[0;32m" ; static const TYPE_11 * VAR_54 = "\\x1b[0;31m" ; if ( ! METHOD_34 ( METHOD_35 ( VAR_55 ) ) ) { VAR_56 = VAR_57 = VAR_58 = "" ; } TYPE_12 VAR_59 = 0 ; TYPE_13 VAR_60 = 0 ; TYPE_14 VAR_61 = 0 ; if ( ! VAR_62 ) { for ( TYPE_15 VAR_63 = 0 ; VAR_64 < VAR_65 ; ++ VAR_66 ) { if ( ! VAR_67 || ! METHOD_36 ( VAR_68 , VAR_69 [ VAR_70 ] . VAR_71 ) ) { METHOD_37 ( ) ; if ( VAR_72 [ VAR_73 ] . METHOD_38 ( ) ) { METHOD_39 ( "[%4d]%-64s[%sPASS%s]\\n" , ++ VAR_74 , VAR_75 [ VAR_76 ] . VAR_77 , VAR_78 , VAR_79 ) ; ++ VAR_80 ; } else { METHOD_40 ( "[%4d]%-64s[%sFAIL%s]\\n" , ++ VAR_81 , VAR_82 [ VAR_83 ] . VAR_84 , VAR_85 , VAR_86 ) ; ++ VAR_87 ; } METHOD_41 ( ) ; ++ VAR_88 ; } } } if ( VAR_89 ) { METHOD_42 ( "\\n%sSanitysuitefailedwith%derrors.%s\\n" , VAR_90 , VAR_91 , VAR_92 ) ; METHOD_43 ( ) ; return 4 ; } for ( TYPE_16 VAR_93 = 0 ; VAR_94 < VAR_95 ; ++ VAR_96 ) { if ( ! VAR_97 || ! METHOD_44 ( VAR_98 , VAR_99 [ VAR_100 ] . VAR_101 ) ) { METHOD_45 ( ) ;  METHOD_46 ( VAR_102 -> METHOD_47 ( ) , VAR_103 ) ;  if ( VAR_104 [ VAR_105 ] . METHOD_48 ( ) ) { METHOD_49 ( "[%4d]%-64s[%sPASS%s]\\n" , ++ VAR_106 , VAR_107 [ VAR_108 ] . VAR_109 , VAR_110 , VAR_111 ) ; ++ VAR_112 ; } else { METHOD_50 ( "[%4d]%-64s[%sFAIL%s]\\n" , ++ VAR_113 , VAR_114 [ VAR_115 ] . VAR_116 , VAR_117 , VAR_118 ) ; ++ VAR_119 ; } METHOD_51 ( VAR_120 -> METHOD_52 ( ) , VAR_121 ) ; METHOD_53 ( ) ; ++ VAR_122 ; } } METHOD_54 ( "\\n" ) ; if ( VAR_123 ) { METHOD_55 ( "%d/%dtestsfailed.Seeaboveforfailedtestcases.\\n" , VAR_124 , VAR_125 + VAR_126 ) ; } else { METHOD_56 ( "Alltestspassed!\\n" ) ; } VAR_127 = VAR_128 ; METHOD_57 ( VAR_129 , VAR_130 ) ; METHOD_58 ( ) ; return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; TYPE_7 * VAR_10 [ ] = { VAR_11 , VAR_12 } ; TYPE_8 * VAR_13 = METHOD_1 ( VAR_14 ) ; if ( ( VAR_15 -> VAR_16 == VAR_17 ) ||  METHOD_2 ( & VAR_18 -> VAR_19 -> VAR_20 ) )  return VAR_21 ; VAR_22 = METHOD_3 ( & VAR_23 -> VAR_24 -> VAR_25 , 0 , "*()" ) ; if ( VAR_26 != VAR_27 -> VAR_28 -> VAR_29 . VAR_30 ) return VAR_31 ; VAR_32 = METHOD_4 ( VAR_33 , VAR_34 , VAR_35 ) ; if ( VAR_36 != VAR_37 ) return VAR_38 ; VAR_39 = METHOD_5 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 . VAR_44 , VAR_45 , VAR_46 -> VAR_47 . VAR_48 , VAR_49 , 0 , & VAR_50 ) ; if ( VAR_51 != VAR_52 ) { METHOD_6 ( VAR_53 , VAR_54 -> VAR_55 . VAR_56 ? VAR_57 -> VAR_58 . VAR_59 : "" ) ; return VAR_60 ; } METHOD_7 ( VAR_61 , "subtreesearch(%s):done\\n" , VAR_62 -> VAR_63 . VAR_64 ? VAR_65 -> VAR_66 . VAR_67 : "" ) ; VAR_68 = METHOD_8 ( VAR_69 -> VAR_70 , VAR_71 ) ; if ( VAR_72 != 1 ) { METHOD_9 ( VAR_73 ) ; return VAR_74 ; } VAR_75 = METHOD_10 ( VAR_76 -> VAR_77 , VAR_78 ) ; if ( VAR_79 == VAR_80 ) { METHOD_11 ( VAR_81 ) ; return VAR_82 ; } VAR_83 = METHOD_12 ( VAR_84 -> VAR_85 , VAR_86 ) ; if ( VAR_87 == VAR_88 ) { METHOD_13 ( VAR_89 ) ; return VAR_90 ; } METHOD_14 ( VAR_91 ) ; VAR_92 = METHOD_15 ( VAR_93 , VAR_94 , VAR_95 -> VAR_96 -> VAR_97 . VAR_98 ) ; if ( VAR_99 != VAR_100 ) return VAR_101 ; VAR_102 = METHOD_16 ( VAR_103 -> VAR_104 ) ; if ( VAR_105 != VAR_106 ) return VAR_107 ; METHOD_17 ( VAR_108 , "Accesstouse%shasbeengranted\\n" , VAR_109 -> VAR_110 -> VAR_111 . VAR_112 ) ; return VAR_113 ; }
TYPE_0 TYPE_1 METHOD_0 ( ) { TYPE_2 VAR_0 , VAR_1 , VAR_2 , VAR_3 , VAR_4 = 0 , VAR_5 [ 2 ] , VAR_6 [ 2 ] ; METHOD_1 ( 0 ) ;  for ( VAR_7 = 0 ; VAR_8 < VAR_9 ; VAR_10 ++ )  { TYPE_3 TYPE_4 VAR_11 ( ) ; for ( VAR_12 = 0 ; VAR_13 < VAR_14 ; VAR_15 ++ ) { if ( ( VAR_16 = VAR_17 % 14 ) == 0 ) VAR_18 [ 0 ] = VAR_19 [ 1 ] = VAR_20 [ 0 ] = VAR_21 [ 1 ] = 0 ; if ( VAR_22 % 3 == 2 ) VAR_23 = 4 >> ( 3 - METHOD_2 ( 2 ) ) ; if ( VAR_24 [ VAR_25 & 1 ] ) { if ( ( VAR_26 = METHOD_3 ( 8 ) ) ) { if ( ( VAR_27 [ VAR_28 & 1 ] -= 0x80 << VAR_29 ) < 0 || VAR_30 == 4 ) VAR_31 [ VAR_32 & 1 ] &= ~ ( ( ~ 0u ) << VAR_33 ) ; VAR_34 [ VAR_35 & 1 ] += VAR_36 << VAR_37 ; } } else if ( ( VAR_38 [ VAR_39 & 1 ] = METHOD_4 ( 8 ) ) || VAR_40 > 11 ) VAR_41 [ VAR_42 & 1 ] = VAR_43 [ VAR_44 & 1 ] << 4 | METHOD_5 ( 4 ) ;  if ( ( METHOD_6 ( VAR_45 , VAR_46 ) = VAR_47 [ VAR_48 & 1 ] ) > 4098 && VAR_49 < VAR_50 )  METHOD_7 ( ) ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { unsigned TYPE_2 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; TYPE_3 VAR_5 , VAR_6 = 0 ; struct STRUCT_OR_UNION_3 * VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 , * VAR_9 , * VAR_10 = VAR_11 ; TYPE_4 * VAR_12 ; METHOD_1 ( & VAR_13 ) ; for ( VAR_14 = 0 ; VAR_15 < VAR_16 ; VAR_17 ++ ) { METHOD_2 ( VAR_18 , VAR_19 + VAR_20 , VAR_21 ) { VAR_22 += TYPE_5 ( VAR_23 ( struct STRUCT_OR_UNION_5 , TYPE_6 ) + METHOD_3 ( VAR_24 -> TYPE_7 ) + 1 ) ; VAR_25 += TYPE_8 ( sizeof ( TYPE_9 ) ) ; } } VAR_26 = VAR_27 = METHOD_4 ( VAR_28 , VAR_29 , & VAR_30 ) ;  if ( VAR_31 < VAR_32 ) {  VAR_33 -> VAR_34 |= VAR_35 ; goto VAR_36 ; } VAR_37 -> VAR_38 = VAR_39 -> VAR_40 + VAR_41 ; VAR_42 -> VAR_43 = 0 ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 ; VAR_47 ++ ) { METHOD_5 ( VAR_48 , VAR_49 + VAR_50 , VAR_51 ) { if ( VAR_52 ) VAR_53 -> VAR_54 = ( TYPE_10 ) ( ( TYPE_11 * ) VAR_55 - ( TYPE_12 * ) VAR_56 ) ; VAR_57 = METHOD_6 ( VAR_58 -> VAR_59 ) ; VAR_60 -> VAR_61 = METHOD_7 ( METHOD_8 ( VAR_62 ) ) ; VAR_63 -> VAR_64 = 0 ; METHOD_9 ( VAR_65 -> TYPE_13 , VAR_66 -> TYPE_14 ) ; VAR_67 = VAR_68 ; VAR_69 = METHOD_10 ( VAR_70 -> TYPE_15 + METHOD_11 ( VAR_71 -> TYPE_16 ) + 1 ) ; * VAR_72 = METHOD_12 ( VAR_73 -> VAR_74 ) ; VAR_75 = METHOD_13 ( VAR_76 + 1 ) ; } } METHOD_14 ( ( TYPE_17 * ) VAR_77 - ( TYPE_18 * ) VAR_78 != VAR_79 ) ; VAR_80 : METHOD_15 ( & VAR_81 ) ; return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; TYPE_15 VAR_19 ; unsigned VAR_20 , VAR_21 ; unsigned VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 = 0x80 ; VAR_26 * VAR_27 ; TYPE_19 VAR_28 ; unsigned TYPE_20 ( * METHOD_1 ) ( TYPE_21 * VAR_29 ) ; unsigned TYPE_22 ( * METHOD_2 ) ( TYPE_23 * VAR_30 ) ; TYPE_24 ( * METHOD_3 ) ( TYPE_25 * VAR_31 , TYPE_26 VAR_32 , TYPE_27 * VAR_33 ) ; TYPE_28 ( * METHOD_4 ) ( TYPE_29 * VAR_34 , TYPE_30 VAR_35 , TYPE_31 * VAR_36 ) ; METHOD_5 ( VAR_37 != ( const TYPE_32 * ) VAR_38 ) ; METHOD_6 ( VAR_39 -> VAR_40 == VAR_41 ) ; METHOD_7 ( VAR_42 != ( TYPE_33 * ) VAR_43 ) ; METHOD_8 ( VAR_44 -> VAR_45 == VAR_46 ) ; VAR_47 = METHOD_9 ( VAR_48 , METHOD_10 ( ) , "enter" ) ; VAR_49 = METHOD_11 ( VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_34 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_35 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , "ImproperImageHeader" ) ; VAR_67 . VAR_68 = METHOD_17 ( VAR_69 ) ; if ( METHOD_18 ( VAR_70 , 2 , ( unsigned TYPE_36 * ) & VAR_71 . VAR_72 ) != 2 ) METHOD_19 ( VAR_73 , "ImproperImageHeader" ) ; if ( VAR_74 ) ( TYPE_37 ) METHOD_20 ( VAR_75 , METHOD_21 ( ) , "Endian%c%c" , VAR_76 . VAR_77 [ 0 ] , VAR_78 . VAR_79 [ 1 ] ) ; if ( ! METHOD_22 ( VAR_80 . VAR_81 , "IM" , 2 ) ) { METHOD_23 = VAR_82 ; METHOD_24 = METHOD_25 ; METHOD_26 = VAR_83 ; METHOD_27 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; } else if ( ! METHOD_28 ( VAR_88 . VAR_89 , "MI" , 2 ) ) { METHOD_29 = VAR_90 ; METHOD_30 = VAR_91 ; METHOD_31 = VAR_92 ; METHOD_32 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; } else goto VAR_97 ; if ( METHOD_33 ( VAR_98 . VAR_99 , "MATLAB" , 6 ) ) VAR_100 : METHOD_34 ( VAR_101 , "ImproperImageHeader" ) ; VAR_102 = METHOD_35 ( VAR_103 ) ; while ( ! METHOD_36 ( VAR_104 ) ) { VAR_105 = 1 ; ( TYPE_38 ) METHOD_37 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 . VAR_110 = METHOD_38 ( VAR_111 ) ; if ( METHOD_39 ( VAR_112 ) ) break ; VAR_113 . VAR_114 = METHOD_40 ( VAR_115 ) ; if ( METHOD_41 ( VAR_116 ) ) break ; VAR_117 += VAR_118 . VAR_119 + 4 + 4 ; VAR_120 = VAR_121 ; if d ( VAR_122 ) if ( VAR_123 . VAR_124 == VAR_125 ) { VAR_126 = METHOD_42 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 , VAR_131 ) ; if ( VAR_132 == VAR_133 ) continue ; VAR_134 . VAR_135 = METHOD_43 ( VAR_136 ) ; } if ( VAR_137 . VAR_138 != VAR_139 ) continue ; VAR_140 . VAR_141 = METHOD_44 ( VAR_142 ) ; VAR_143 . VAR_144 = METHOD_45 ( VAR_145 ) ; VAR_146 . VAR_147 = METHOD_46 ( VAR_148 ) ; VAR_149 . VAR_150 = VAR_151 . VAR_152 & 0xFF ; VAR_153 . VAR_154 = ( VAR_155 . VAR_156 >> 8 ) & 0xFF ; VAR_157 . VAR_158 = METHOD_47 ( VAR_159 ) ; if ( VAR_160 != VAR_161 ) VAR_162 . VAR_163 = METHOD_48 ( VAR_164 ) ; VAR_165 . VAR_166 = METHOD_49 ( VAR_167 ) ; VAR_168 . VAR_169 = METHOD_50 ( VAR_170 ) ; VAR_171 . VAR_172 = METHOD_51 ( VAR_173 ) ; VAR_174 . VAR_175 = METHOD_52 ( VAR_176 ) ; switch ( VAR_177 . VAR_178 ) { case 8 : VAR_179 = VAR_180 = 1 ; break ; case 12 : VAR_181 = VAR_182 = METHOD_53 ( VAR_183 ) ; VAR_184 = METHOD_54 ( VAR_185 ) ; ( TYPE_39 ) VAR_186 ; if ( VAR_187 != 3 ) METHOD_55 ( VAR_188 , "MultidimensionalMatricesAreNotSupported" ) ; break ; case 16 : VAR_189 = VAR_190 = METHOD_56 ( VAR_191 ) ; if ( VAR_192 != 3 && VAR_193 != 1 ) METHOD_57 ( VAR_194 , "MultidimensionalMatricesAreNotSupported" ) ; VAR_195 = METHOD_58 ( VAR_196 ) ; break ; default : METHOD_59 ( VAR_197 , "MultidimensionalMatricesAreNotSupported" ) ; } VAR_198 . VAR_199 = METHOD_60 ( VAR_200 ) ; VAR_201 . VAR_202 = METHOD_61 ( VAR_203 ) ; if ( VAR_204 ) ( TYPE_40 ) METHOD_62 ( VAR_205 , METHOD_63 ( ) , "MATLAB_HDR.StructureClass%d" , VAR_206 . VAR_207 ) ; if ( VAR_208 . VAR_209 != VAR_210 && VAR_211 . VAR_212 != VAR_213 && VAR_214 . VAR_215 != VAR_216 && VAR_217 . VAR_218 != VAR_219 && VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 ) METHOD_64 ( VAR_241 , "UnsupportedCellTypeInTheMatrix" ) ; switch ( VAR_242 . VAR_243 ) { case 0 : VAR_244 = METHOD_65 ( VAR_245 ) ; VAR_246 = 4 * ( TYPE_41 ) ( ( VAR_247 + 3 + 1 ) / 4 ) ; ( TYPE_42 ) METHOD_66 ( VAR_248 , VAR_249 , VAR_250 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_43 ) METHOD_67 ( VAR_251 , 4 , ( unsigned TYPE_44 * ) & VAR_252 ) ; break ; default : goto VAR_253 ; } VAR_254 = METHOD_68 ( VAR_255 ) ; if ( VAR_256 ) ( TYPE_45 ) METHOD_69 ( VAR_257 , METHOD_70 ( ) , "MATLAB_HDR.CellType:%.20g" , ( TYPE_46 ) VAR_258 ) ; ( TYPE_47 ) METHOD_71 ( VAR_259 , 4 , ( unsigned TYPE_48 * ) & VAR_260 ) ; VAR_261 : switch ( VAR_262 ) { case VAR_263 : case VAR_264 : VAR_265 = 8 ; if ( VAR_266 . VAR_267 & VAR_268 ) VAR_269 -> VAR_270 = 1 ; else VAR_271 -> VAR_272 = 8 ; VAR_273 = ( TYPE_49 ) VAR_274 . VAR_275 ; break ; case VAR_276 : case VAR_277 : VAR_278 = 16 ; VAR_279 -> VAR_280 = 16 ; VAR_281 = ( TYPE_50 ) ( 2 * VAR_282 . VAR_283 ) ; break ; case VAR_284 : case VAR_285 : VAR_286 = 32 ; VAR_287 -> VAR_288 = 32 ; VAR_289 = ( TYPE_51 ) ( 4 * VAR_290 . VAR_291 ) ; break ; case VAR_292 : case VAR_293 : VAR_294 = 64 ; VAR_295 -> VAR_296 = 64 ; VAR_297 = ( TYPE_52 ) ( 8 * VAR_298 . VAR_299 ) ; break ; case VAR_300 : VAR_301 = 32 ; VAR_302 -> VAR_303 = 32 ; ( TYPE_53 ) METHOD_72 ( VAR_304 , "quantum:format" , "floating-point" ) ; if ( VAR_305 . VAR_306 & VAR_307 ) { } VAR_308 = ( TYPE_54 ) ( 4 * VAR_309 . VAR_310 ) ; break ; case VAR_311 : VAR_312 = 64 ; VAR_313 -> VAR_314 = 64 ; ( TYPE_55 ) METHOD_73 ( VAR_315 , "quantum:format" , "floating-point" ) ; METHOD_74 ( 4127 ) if ( sizeof ( TYPE_56 ) != 8 ) TYPE_57 METHOD_75 ( VAR_316 , "IncompatibleSizeOfDouble" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_58 ) ( 8 * VAR_321 . VAR_322 ) ; break ; default : METHOD_76 ( VAR_323 , "UnsupportedCellTypeInTheMatrix" ) ; } ( TYPE_59 ) VAR_324 ; VAR_325 -> VAR_326 = VAR_327 . VAR_328 ; VAR_329 -> VAR_330 = VAR_331 . VAR_332 ; VAR_333 = METHOD_77 ( VAR_334 , VAR_335 ) ; if ( VAR_336 == ( TYPE_60 * ) VAR_337 ) METHOD_78 ( VAR_338 , "MemoryAllocationFailed" ) ; VAR_339 = 1 ; VAR_340 -> VAR_341 = VAR_342 << VAR_343 -> VAR_344 ; if ( VAR_345 -> VAR_346 == 0 || VAR_347 -> VAR_348 == 0 ) goto VAR_349 ; if ( ( VAR_350 . VAR_351 == 8 ) && ( ( VAR_352 . VAR_353 & VAR_354 ) == 0 ) ) { METHOD_79 ( VAR_355 , VAR_356 ) ; VAR_357 -> VAR_358 = VAR_359 ; } if ( VAR_360 -> VAR_361 ) { TYPE_61 VAR_362 = VAR_363 -> VAR_364 ; VAR_365 -> VAR_366 = VAR_367 -> VAR_368 ; VAR_369 -> VAR_370 = VAR_371 ; goto VAR_372 ; } VAR_373 = METHOD_80 ( VAR_374 , VAR_375 -> VAR_376 , VAR_377 -> VAR_378 ) ; if ( VAR_379 == VAR_380 ) { METHOD_81 ( VAR_381 , & VAR_382 -> VAR_383 ) ; return ( METHOD_82 ( VAR_384 ) ) ; } VAR_385 = ( unsigned TYPE_62 * ) METHOD_83 ( ( TYPE_63 ) ( VAR_386 ) , sizeof ( TYPE_64 ) ) ; if ( VAR_387 == VAR_388 ) METHOD_84 ( VAR_389 , "MemoryAllocationFailed" ) ; VAR_390 = 0 ; VAR_391 = 0 ; if ( VAR_392 == VAR_393 || VAR_394 == VAR_395 ) { METHOD_85 ( VAR_396 , VAR_397 -> VAR_398 , VAR_399 . VAR_400 , VAR_401 . VAR_402 , VAR_403 , VAR_404 , VAR_405 , & VAR_406 -> VAR_407 , & VAR_408 -> VAR_409 ) ; } if ( VAR_410 == 1 ) VAR_411 = 0 ; do { for ( VAR_412 = 0 ; VAR_413 < ( TYPE_65 ) VAR_414 . VAR_415 ; VAR_416 ++ ) { VAR_417 = METHOD_86 ( VAR_418 , 0 , VAR_419 . VAR_420 - VAR_421 - 1 , VAR_422 -> VAR_423 , 1 , VAR_424 ) ; if ( VAR_425 == ( TYPE_66 * ) VAR_426 ) { if ( VAR_427 ) ( TYPE_67 ) METHOD_87 ( VAR_428 , METHOD_88 ( ) , "MATsetimagepixelsreturnsunexpectedNULLonarow%u." , ( unsigned ) ( VAR_429 . VAR_430 - VAR_431 - 1 ) ) ; goto VAR_432 ; } if ( METHOD_89 ( VAR_433 , VAR_434 , ( unsigned TYPE_68 * ) VAR_435 ) != ( TYPE_69 ) VAR_436 ) { if ( VAR_437 ) ( TYPE_70 ) METHOD_90 ( VAR_438 , METHOD_91 ( ) , "MATcannotreadscanrow%ufromafile." , ( unsigned ) ( VAR_439 . VAR_440 - VAR_441 - 1 ) ) ; goto VAR_442 ; } if ( ( VAR_443 == VAR_444 || VAR_445 == VAR_446 ) && ( VAR_447 . VAR_448 & VAR_449 ) ) { METHOD_92 ( ( unsigned TYPE_71 * ) VAR_450 , VAR_451 ) ; if ( METHOD_93 ( VAR_452 , ( TYPE_72 * ) VAR_453 , VAR_454 , VAR_455 [ VAR_456 ] , VAR_457 , VAR_458 ) <= 0 ) { VAR_459 : if ( VAR_460 ) ( TYPE_73 ) METHOD_94 ( VAR_461 , METHOD_95 ( ) , "MATfailedtoImportQuantumPixelsforarow%u" , ( unsigned ) ( VAR_462 . VAR_463 - VAR_464 - 1 ) ) ; break ; } } else { if ( METHOD_96 ( VAR_465 , ( TYPE_74 * ) VAR_466 , VAR_467 , VAR_468 [ VAR_469 ] , VAR_470 , VAR_471 ) <= 0 ) goto VAR_472 ; if ( VAR_473 <= 1 && ( VAR_474 == VAR_475 || VAR_476 == VAR_477 || VAR_478 == VAR_479 || VAR_480 == VAR_481 ) ) METHOD_97 ( VAR_482 , VAR_483 . VAR_484 ) ; } if ( ! METHOD_98 ( VAR_485 , VAR_486 ) ) { if ( VAR_487 ) ( TYPE_75 ) METHOD_99 ( VAR_488 , METHOD_100 ( ) , "MATfailedtosyncimagepixelsforarow%u" , ( unsigned ) ( VAR_489 . VAR_490 - VAR_491 - 1 ) ) ; goto VAR_492 ; } } } while ( VAR_493 -- >= 2 ) ;  VAR_494 :  if ( VAR_495 . VAR_496 & VAR_497 ) { VAR_498 = METHOD_101 ( VAR_499 ) ; VAR_500 = METHOD_102 ( VAR_501 ) ; if ( VAR_502 == VAR_503 || VAR_504 == VAR_505 ) { METHOD_103 ( VAR_506 , VAR_507 -> VAR_508 , VAR_509 . VAR_510 , VAR_511 . VAR_512 , VAR_513 , VAR_514 , VAR_515 , & VAR_516 , & VAR_517 ) ; } if ( VAR_518 == VAR_519 ) for ( VAR_520 = 0 ; VAR_521 < ( TYPE_76 ) VAR_522 . VAR_523 ; VAR_524 ++ ) { METHOD_104 ( VAR_525 , VAR_526 , ( TYPE_77 * ) VAR_527 ) ; METHOD_105 ( ( TYPE_78 * ) VAR_528 , VAR_529 , VAR_530 , VAR_531 , VAR_532 ) ; } if ( VAR_533 == VAR_534 ) for ( VAR_535 = 0 ; VAR_536 < ( TYPE_79 ) VAR_537 . VAR_538 ; VAR_539 ++ ) { METHOD_106 ( VAR_540 , VAR_541 , ( TYPE_80 * ) VAR_542 ) ; METHOD_107 ( ( TYPE_81 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } } if ( ( VAR_548 . VAR_549 == 8 ) && ( ( VAR_550 . VAR_551 & VAR_552 ) == 0 ) ) VAR_553 -> VAR_554 = VAR_555 ; if ( VAR_556 -> VAR_557 == 1 ) VAR_558 -> VAR_559 = VAR_560 ; if ( VAR_561 == VAR_562 ) VAR_563 = VAR_564 ; VAR_565 = METHOD_108 ( VAR_566 , 90.0 , VAR_567 ) ; if ( VAR_568 != ( TYPE_82 * ) VAR_569 ) { VAR_570 -> VAR_571 . VAR_572 = 0 ; VAR_573 -> VAR_574 . VAR_575 = 0 ; VAR_576 = VAR_577 -> VAR_578 ; VAR_579 -> VAR_580 = VAR_581 -> VAR_582 ; VAR_583 -> VAR_584 = VAR_585 -> VAR_586 ; VAR_587 -> VAR_588 = VAR_589 ; METHOD_109 ( & VAR_590 , VAR_591 ) ; METHOD_110 ( & VAR_592 ) ; } VAR_593 : if ( VAR_594 != VAR_595 ) if ( VAR_596 != VAR_597 ) { METHOD_111 ( & VAR_598 ) ; if ( VAR_599 ) { if ( VAR_600 -> VAR_601 ) { METHOD_112 ( VAR_602 -> VAR_603 ) ; VAR_604 -> VAR_605 = VAR_606 ; ( TYPE_83 ) METHOD_113 ( VAR_607 -> VAR_608 ) ; } } } METHOD_114 ( VAR_609 , VAR_610 ) ; if ( VAR_611 -> VAR_612 == ( TYPE_84 * ) VAR_613 ) break ; VAR_614 = METHOD_115 ( VAR_615 ) ; VAR_616 -> VAR_617 = VAR_618 -> VAR_619 = 0 ; VAR_620 -> VAR_621 = 0 ; METHOD_116 ( VAR_622 ) ; VAR_623 = VAR_624 ; if ( -- VAR_625 > 0 ) { VAR_626 = VAR_627 ; if ( VAR_628 == VAR_629 ) VAR_630 = VAR_631 ; goto VAR_632 ; } if ( VAR_633 != VAR_634 ) if ( VAR_635 != VAR_636 ) { METHOD_117 ( & VAR_637 ) ; if ( VAR_638 ) { if ( VAR_639 -> VAR_640 ) { METHOD_118 ( VAR_641 -> VAR_642 ) ; VAR_643 -> VAR_644 = VAR_645 ; ( TYPE_85 ) METHOD_119 ( VAR_646 -> VAR_647 ) ; } } } } VAR_648 = METHOD_120 ( VAR_649 ) ; METHOD_121 ( VAR_650 ) ; METHOD_122 ( VAR_651 ) ; { TYPE_86 * VAR_652 ; TYPE_87 VAR_653 = 0 ; VAR_654 = VAR_655 ; VAR_656 = VAR_657 ; while ( VAR_658 != ( TYPE_88 * ) VAR_659 ) { TYPE_89 * VAR_660 = VAR_661 ; if ( ( VAR_662 -> VAR_663 == 0 ) || ( VAR_664 -> VAR_665 == 0 ) ) { VAR_666 = VAR_667 -> VAR_668 ; METHOD_123 ( & VAR_669 ) ; } else { VAR_670 = VAR_671 ; VAR_672 = VAR_673 -> VAR_674 ; } } for ( VAR_675 = VAR_676 ; VAR_677 != ( TYPE_90 * ) VAR_678 ; VAR_679 = VAR_680 -> VAR_681 ) VAR_682 -> VAR_683 = VAR_684 ++ ; } if ( VAR_685 != VAR_686 ) { if ( VAR_687 -> VAR_688 ) { METHOD_124 ( VAR_689 -> VAR_690 ) ; VAR_691 -> VAR_692 = VAR_693 ; ( TYPE_91 ) METHOD_125 ( VAR_694 -> VAR_695 ) ; } METHOD_126 ( VAR_696 ) ; VAR_697 = VAR_698 ; } if ( VAR_699 ) ( TYPE_92 ) METHOD_127 ( VAR_700 , METHOD_128 ( ) , "return" ) ; if ( VAR_701 == VAR_702 ) METHOD_129 ( VAR_703 , "ImproperImageHeader" ) ; return ( VAR_704 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 ; struct STRUCT_OR_UNION_4 VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; struct STRUCT_OR_UNION_6 VAR_7 ;  TYPE_4 VAR_8 , VAR_9 = - VAR_10 ;  if ( ! METHOD_1 ( STRUCT_OR_UNION_7 ) || ! METHOD_2 ( VAR_11 ) || ! METHOD_3 ( STRUCT_OR_UNION_8 -> VAR_12 [ 0 ] ) ) return 0 ; VAR_13 = METHOD_4 ( & STRUCT_OR_UNION_9 -> VAR_14 ) ; VAR_15 = METHOD_5 ( STRUCT_OR_UNION_10 -> VAR_16 , & STRUCT_OR_UNION_11 -> VAR_17 ) ;  METHOD_6 ( VAR_18 >= VAR_19 -> VAR_20 ) ;   METHOD_7 ( VAR_21 , & VAR_22 -> VAR_23 [ VAR_24 ] , VAR_25 ) {  if ( VAR_26 -> VAR_27 != VAR_28 ) continue ; METHOD_8 ( STRUCT_OR_UNION_12 , VAR_29 , & VAR_30 ) ; if ( ! METHOD_9 ( STRUCT_OR_UNION_13 , & VAR_31 , & VAR_32 ) ) { VAR_33 = METHOD_10 ( VAR_34 , VAR_35 ) ; if ( VAR_36 < 0 ) { printk ( KERN_INFO "failedtobacktoremappedmode,irq:%u\\n" , VAR_37 ) ; goto VAR_38 ; } continue ; } VAR_39 . VAR_40 = METHOD_11 ( METHOD_12 ( VAR_41 ) ) ; VAR_42 . VAR_43 = VAR_44 . VAR_45 ; METHOD_13 ( VAR_46 -> VAR_47 , VAR_48 , VAR_49 -> VAR_50 , VAR_51 . VAR_52 , VAR_53 . VAR_54 , VAR_55 ) ; if ( VAR_56 ) VAR_57 = METHOD_14 ( VAR_58 , & VAR_59 ) ; else { METHOD_15 ( METHOD_16 ( VAR_60 ) ) ; VAR_61 = METHOD_17 ( VAR_62 , VAR_63 ) ; METHOD_18 ( METHOD_19 ( VAR_64 ) ) ; } if ( VAR_65 < 0 ) { printk ( KERN_INFO "%s:failedtoupdatePIIRTE\\n" , VAR_66 ) ; goto VAR_67 ; } } VAR_68 = 0 ; VAR_69 : METHOD_20 ( & STRUCT_OR_UNION_14 -> VAR_70 , VAR_71 ) ; return VAR_72 ; }
static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = container_of ( VAR_3 , struct STRUCT_OR_UNION_2 , VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; if ( VAR_8 )  METHOD_1 ( VAR_9 ) ;  return VAR_10 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { if ( ! ( VAR_3 -> VAR_4 & VAR_5 ) ) return VAR_6 ; if ( memcmp ( VAR_7 , VAR_8 , offsetof ( struct STRUCT_OR_UNION_3 , VAR_9 ) ) == 0 ) return VAR_10 ; if ( VAR_11 -> VAR_12 == VAR_13 ) return VAR_14 ; if ( VAR_15 -> VAR_16 == VAR_17 ) return VAR_18 ; switch ( VAR_19 -> VAR_20 ) { case VAR_21 : if ( VAR_22 -> VAR_23 == VAR_24 ) { return METHOD_1 ( VAR_25 , VAR_26 ) && METHOD_2 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ; } else {  return VAR_31 -> VAR_32 == 0 &&  VAR_33 -> VAR_34 == VAR_35 && VAR_36 -> VAR_37 == VAR_38 && VAR_39 -> VAR_40 == VAR_41 && METHOD_3 ( VAR_42 -> VAR_43 ) ; } case VAR_44 : return memcmp ( VAR_45 , VAR_46 , offsetof ( struct STRUCT_OR_UNION_4 , VAR_47 ) ) == 0 && METHOD_4 ( VAR_48 , VAR_49 ) && METHOD_5 ( VAR_50 -> VAR_51 , VAR_52 -> VAR_53 ) ; case VAR_54 : if ( VAR_55 -> VAR_56 != VAR_57 ) return VAR_58 ; if ( memcmp ( VAR_59 , VAR_60 , offsetof ( struct STRUCT_OR_UNION_5 , VAR_61 ) ) ) return VAR_62 ; return METHOD_6 ( VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 ) ; case VAR_68 : case VAR_69 : if ( VAR_70 -> VAR_71 != VAR_72 -> VAR_73 ) return VAR_74 ; if ( VAR_75 -> VAR_76 > VAR_77 -> VAR_78 ) return VAR_79 ; if ( VAR_80 -> VAR_81 != VAR_82 -> VAR_83 ) return VAR_84 ; if ( VAR_85 -> VAR_86 && ! METHOD_7 ( VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , VAR_91 ) ) return VAR_92 ; return METHOD_8 ( VAR_93 , VAR_94 ) && METHOD_9 ( VAR_95 -> VAR_96 , VAR_97 -> VAR_98 ) ; case VAR_99 : case VAR_100 : case VAR_101 : case VAR_102 : default : return VAR_103 ; } METHOD_10 ( 1 ) ; return VAR_104 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = ( struct STRUCT_OR_UNION_4 * ) VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 = STRUCT_OR_UNION_6 -> VAR_6 ;  METHOD_1 ( "sock%p,sk%p" , STRUCT_OR_UNION_7 , VAR_7 ) ;  VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 = METHOD_2 ( VAR_13 ) -> VAR_14 ; if ( VAR_15 ) METHOD_3 ( & VAR_16 -> VAR_17 , & METHOD_4 ( VAR_18 ) -> VAR_19 ) ; else METHOD_5 ( & VAR_20 -> VAR_21 , & METHOD_6 ( VAR_22 ) -> VAR_23 ) ; * VAR_24 = sizeof ( struct STRUCT_OR_UNION_8 ) ; return 0 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ;  if ( ! VAR_2 )  return VAR_3 ; VAR_4 = ( TYPE_3 * ) ~ ( ( TYPE_4 ) VAR_5 -> VAR_6 ) ; return VAR_7 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = 1 ; VAR_4 -> VAR_5 = 0 ; VAR_6 -> VAR_7 = VAR_8 ; VAR_9 -> VAR_10 = VAR_11 ; VAR_12 -> VAR_13 |= VAR_14 ; VAR_15 += 1 ;  VAR_16 += VAR_17 [ VAR_18 -> VAR_19 ] ;  VAR_20 += METHOD_1 ( VAR_21 , VAR_22 ) ; return VAR_23 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 TYPE_5 const TYPE_6 * VAR_3 , const TYPE_7 * VAR_4 , TYPE_8 * VAR_5 , TYPE_9 * VAR_6 ) { static TYPE_10 VAR_7 [ ] = { VAR_8 } ; TYPE_11 VAR_9 , TYPE_12 , VAR_10 , VAR_11 , VAR_12 ; TYPE_13 VAR_13 , VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 * VAR_17 , * VAR_18 , * VAR_19 ; TYPE_17 VAR_20 ; TYPE_18 * VAR_21 ; VAR_22 * VAR_23 , * VAR_24 , * VAR_25 ; VAR_26 * VAR_27 ; TYPE_19 VAR_28 ; TYPE_20 * VAR_29 ; TYPE_21 * VAR_30 , * VAR_31 ; TYPE_22 TYPE_23 TYPE_24 VAR_32 ; unsigned TYPE_25 * VAR_33 = VAR_34 -> VAR_35 ; TYPE_26 VAR_36 = VAR_37 -> VAR_38 ; TYPE_27 * VAR_39 = VAR_40 -> VAR_41 ; TYPE_28 VAR_42 = VAR_43 -> VAR_44 ; TYPE_29 VAR_45 = VAR_46 -> VAR_47 ; TYPE_30 VAR_48 = VAR_49 -> VAR_50 ; VAR_51 = VAR_52 -> VAR_53 ; VAR_54 = VAR_55 -> VAR_56 ; METHOD_1 ( VAR_57 ) ; VAR_58 ; for ( VAR_59 = 1 ; VAR_60 <= VAR_61 ; VAR_62 ++ ) { VAR_63 [ VAR_64 ] = VAR_65 [ VAR_66 ] = VAR_67 ; } TYPE_31 TYPE_32 METHOD_2 ( VAR_68 , "match_at:str:%d,end:%d,start:%d,sprev:%d\\n" , ( TYPE_33 ) VAR_69 , ( TYPE_34 ) VAR_70 , ( TYPE_35 ) VAR_71 , ( TYPE_36 ) VAR_72 ) ; METHOD_3 ( VAR_73 , "size:%d,startoffset:%d\\n" , ( TYPE_37 ) ( VAR_74 - VAR_75 ) , ( TYPE_38 ) ( VAR_76 - VAR_77 ) ) ; METHOD_4 ( VAR_78 , VAR_79 ) ; VAR_80 = VAR_81 ; VAR_82 = ( TYPE_39 * ) VAR_83 ; while ( 1 ) { TYPE_40 TYPE_41 { TYPE_42 * VAR_84 , * VAR_85 , VAR_86 [ 50 ] ; TYPE_43 TYPE_44 ; METHOD_5 ( VAR_87 , "%4d>\\"" , ( TYPE_45 ) ( VAR_88 - VAR_89 ) ) ; VAR_90 = VAR_91 ; for ( VAR_92 = 0 , VAR_93 = VAR_94 ; VAR_95 < 7 && VAR_96 < VAR_97 ; VAR_98 ++ ) { TYPE_46 = enclen ( VAR_99 , VAR_100 ) ; while ( TYPE_47 -- > 0 ) * VAR_101 ++ = * VAR_102 ++ ; } if ( VAR_103 < VAR_104 ) { xmemcpy ( VAR_105 , "...\\"" , 4 ) ; VAR_106 += 4 ; } else { xmemcpy ( VAR_107 , "\\"" , 1 ) ; VAR_108 += 1 ; } * VAR_109 = 0 ; fputs ( ( TYPE_48 * ) VAR_110 , VAR_111 ) ; for ( VAR_112 = 0 ; VAR_113 < 20 - ( VAR_114 - VAR_115 ) ; VAR_116 ++ ) fputc ( '' , VAR_117 ) ; onig_print_compiled_byte_code ( VAR_118 , VAR_119 , NULL , VAR_120 ) ; METHOD_6 ( VAR_121 , "\\n" ) ; } VAR_122 = VAR_123 ; switch ( * VAR_124 ++ ) { case OP_END : MOP_IN ( OP_END ) ; TYPE_49 = VAR_125 - VAR_126 ; if ( TYPE_50 > VAR_127 ) { OnigRegion * region ; TYPE_51 USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE if ( IS_FIND_LONGEST ( VAR_128 ) ) { if ( TYPE_52 > VAR_129 -> VAR_130 ) { VAR_131 -> VAR_132 = TYPE_53 ; VAR_133 -> best_s = ( TYPE_54 * ) VAR_134 ; } else goto end_best_len ; } VAR_135 = TYPE_55 ; region = VAR_136 -> region ; if ( region ) { TYPE_56 USE_POSIX_API_REGION_OPTION if ( IS_POSIX_REGION ( VAR_137 -> VAR_138 ) ) { posix_regmatch_t * rmt = ( posix_regmatch_t * ) region ; rmt [ 0 ] . rm_so = VAR_139 - VAR_140 ; rmt [ 0 ] . rm_eo = VAR_141 - VAR_142 ; for ( VAR_143 = 1 ; VAR_144 <= VAR_145 ; VAR_146 ++ ) { if ( VAR_147 [ VAR_148 ] != VAR_149 ) { if ( BIT_STATUS_AT ( VAR_150 -> bt_mem_start , VAR_151 ) ) rmt [ VAR_152 ] . rm_so = STACK_AT ( VAR_153 [ VAR_154 ] ) -> u . VAR_155 . pstr - VAR_156 ; else rmt [ VAR_157 ] . rm_so = ( TYPE_57 * ) ( ( void * ) ( VAR_158 [ VAR_159 ] ) ) - VAR_160 ; rmt [ VAR_161 ] . rm_eo = ( BIT_STATUS_AT ( VAR_162 -> bt_mem_end , VAR_163 ) ? STACK_AT ( VAR_164 [ VAR_165 ] ) -> u . VAR_166 . pstr : ( TYPE_58 * ) ( ( void * ) VAR_167 [ VAR_168 ] ) ) - VAR_169 ; } else { rmt [ VAR_170 ] . rm_so = rmt [ VAR_171 ] . rm_eo = ONIG_REGION_NOTPOS ; } } } else { region -> beg [ 0 ] = VAR_172 - VAR_173 ; region -> VAR_174 [ 0 ] = VAR_175 - VAR_176 ; for ( VAR_177 = 1 ; VAR_178 <= VAR_179 ; VAR_180 ++ ) { if ( VAR_181 [ VAR_182 ] != VAR_183 ) { if ( BIT_STATUS_AT ( VAR_184 -> bt_mem_start , VAR_185 ) ) region -> beg [ VAR_186 ] = STACK_AT ( VAR_187 [ VAR_188 ] ) -> u . VAR_189 . pstr - VAR_190 ; else region -> beg [ VAR_191 ] = ( TYPE_59 * ) ( ( void * ) VAR_192 [ VAR_193 ] ) - VAR_194 ; region -> VAR_195 [ VAR_196 ] = ( BIT_STATUS_AT ( VAR_197 -> bt_mem_end , VAR_198 ) ? STACK_AT ( VAR_199 [ VAR_200 ] ) -> u . VAR_201 . pstr : ( TYPE_60 * ) ( ( void * ) VAR_202 [ VAR_203 ] ) ) - VAR_204 ; } else { region -> beg [ VAR_205 ] = region -> VAR_206 [ VAR_207 ] = ONIG_REGION_NOTPOS ; } } TYPE_61 USE_CAPTURE_HISTORY if ( VAR_208 -> capture_history != 0 ) { TYPE_62 r ; OnigCaptureTreeNode * node ; if ( IS_NULL ( region -> history_root ) ) { region -> history_root = node = history_node_new ( ) ; CHECK_NULL_RETURN_MEMERR ( node ) ; } else { node = region -> history_root ; history_tree_clear ( node ) ; } node -> group = 0 ; node -> beg = VAR_209 - VAR_210 ; node -> VAR_211 = VAR_212 - VAR_213 ; VAR_214 = VAR_215 ; r = make_capture_history_tree ( region -> history_root , & VAR_216 , VAR_217 , ( TYPE_63 * ) VAR_218 , VAR_219 ) ; if ( r < 0 ) { VAR_220 = r ; goto finish ; } } TYPE_64 USE_POSIX_API_REGION_OPTION } } } TYPE_65 USE_FIND_LONGEST_SEARCH_ALL_OF_RANGE end_best_len : MOP_OUT ; if ( IS_FIND_CONDITION ( VAR_221 ) ) { if ( IS_FIND_NOT_EMPTY ( VAR_222 ) && VAR_223 == VAR_224 ) { VAR_225 = VAR_226 ; goto fail ; } if ( IS_FIND_LONGEST ( VAR_227 ) && DATA_ENSURE_CHECK1 ) { goto fail ; } } goto finish ; break ; case OP_EXACT1 : MOP_IN ( OP_EXACT1 ) ;  if 0  DATA_ENSURE ( 1 ) ; if ( * VAR_228 != * VAR_229 ) goto fail ;  VAR_230 ++ ; VAR_231 ++ ;  if ( * VAR_232 != * VAR_233 ++ ) goto fail ; DATA_ENSURE ( 0 ) ; VAR_234 ++ ; MOP_OUT ; break ; case OP_EXACT1_IC : MOP_IN ( OP_EXACT1_IC ) ; { TYPE_66 TYPE_67 ; TYPE_68 * VAR_235 , lowbuf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ; DATA_ENSURE ( 1 ) ; TYPE_69 = ONIGENC_MBC_CASE_FOLD ( VAR_236 , VAR_237 , & VAR_238 , VAR_239 , lowbuf ) ; DATA_ENSURE ( 0 ) ; VAR_240 = lowbuf ; while ( TYPE_70 -- > 0 ) { if ( * VAR_241 != * VAR_242 ) { goto fail ; } VAR_243 ++ ; VAR_244 ++ ; } } MOP_OUT ; break ; case OP_EXACT2 : MOP_IN ( OP_EXACT2 ) ; DATA_ENSURE ( 2 ) ; if ( * VAR_245 != * VAR_246 ) goto fail ; VAR_247 ++ ; VAR_248 ++ ; if ( * VAR_249 != * VAR_250 ) goto fail ; VAR_251 = VAR_252 ; VAR_253 ++ ; VAR_254 ++ ; MOP_OUT ; continue ; break ; case OP_EXACT3 : MOP_IN ( OP_EXACT3 ) ; DATA_ENSURE ( 3 ) ; if ( * VAR_255 != * VAR_256 ) goto fail ; VAR_257 ++ ; VAR_258 ++ ; if ( * VAR_259 != * VAR_260 ) goto fail ; VAR_261 ++ ; VAR_262 ++ ; if ( * VAR_263 != * VAR_264 ) goto fail ; VAR_265 = VAR_266 ; VAR_267 ++ ; VAR_268 ++ ; MOP_OUT ; continue ; break ; case OP_EXACT4 : MOP_IN ( OP_EXACT4 ) ; DATA_ENSURE ( 4 ) ; if ( * VAR_269 != * VAR_270 ) goto fail ; VAR_271 ++ ; VAR_272 ++ ; if ( * VAR_273 != * VAR_274 ) goto fail ; VAR_275 ++ ; VAR_276 ++ ; if ( * VAR_277 != * VAR_278 ) goto fail ; VAR_279 ++ ; VAR_280 ++ ; if ( * VAR_281 != * VAR_282 ) goto fail ; VAR_283 = VAR_284 ; VAR_285 ++ ; VAR_286 ++ ; MOP_OUT ; continue ; break ; case OP_EXACT5 : MOP_IN ( OP_EXACT5 ) ; DATA_ENSURE ( 5 ) ; if ( * VAR_287 != * VAR_288 ) goto fail ; VAR_289 ++ ; VAR_290 ++ ; if ( * VAR_291 != * VAR_292 ) goto fail ; VAR_293 ++ ; VAR_294 ++ ; if ( * VAR_295 != * VAR_296 ) goto fail ; VAR_297 ++ ; VAR_298 ++ ; if ( * VAR_299 != * VAR_300 ) goto fail ; VAR_301 ++ ; VAR_302 ++ ; if ( * VAR_303 != * VAR_304 ) goto fail ; VAR_305 = VAR_306 ; VAR_307 ++ ; VAR_308 ++ ; MOP_OUT ; continue ; break ; case OP_EXACTN : MOP_IN ( OP_EXACTN ) ; GET_LENGTH_INC ( VAR_309 , VAR_310 ) ; DATA_ENSURE ( VAR_311 ) ; while ( VAR_312 -- > 0 ) { if ( * VAR_313 ++ != * VAR_314 ++ ) goto fail ; } VAR_315 = VAR_316 - 1 ; MOP_OUT ; continue ; break ; case OP_EXACTN_IC : MOP_IN ( OP_EXACTN_IC ) ; { TYPE_71 TYPE_72 ; TYPE_73 * VAR_317 , * endp , lowbuf [ ONIGENC_MBC_CASE_FOLD_MAXLEN ] ; GET_LENGTH_INC ( VAR_318 , VAR_319 ) ; endp = VAR_320 + VAR_321 ; while ( VAR_322 < endp ) { VAR_323 = VAR_324 ; DATA_ENSURE ( 1 ) ; TYPE_74 = ONIGENC_MBC_CASE_FOLD ( VAR_325 , VAR_326 , & VAR_327 , VAR_328 , lowbuf ) ; DATA_ENSURE ( 0 ) ; VAR_329 = lowbuf ; while ( TYPE_75 -- > 0 ) { if ( * VAR_330 != * VAR_331 ) goto fail ; VAR_332 ++ ; VAR_333 ++ ; } } } MOP_OUT ; continue ; break ; case OP_EXACTMB2N1 : MOP_IN ( OP_EXACTMB2N1 ) ; DATA_ENSURE ( 2 ) ; if ( * VAR_334 != * VAR_335 ) goto fail ; VAR_336 ++ ; VAR_337 ++ ; if ( * VAR_338 != * VAR_339 ) goto fail ; VAR_340 ++ ; VAR_341 ++ ; MOP_OUT ; break ; case OP_EXACTMB2N2 : MOP_IN ( OP_EXACTMB2N2 ) ; DATA_ENSURE ( 4 ) ; if ( * VAR_342 != * VAR_343 ) goto fail ; VAR_344 ++ ; VAR_345 ++ ; if ( * VAR_346 != * VAR_347 ) goto fail ; VAR_348 ++ ; VAR_349 ++ ; VAR_350 = VAR_351 ; if ( * VAR_352 != * VAR_353 ) goto fail ; VAR_354 ++ ; VAR_355 ++ ; if ( * VAR_356 != * VAR_357 ) goto fail ; VAR_358 ++ ; VAR_359 ++ ; MOP_OUT ; continue ; break ; case OP_EXACTMB2N3 : MOP_IN ( OP_EXACTMB2N3 ) ; DATA_ENSURE ( 6 ) ; if ( * VAR_360 != * VAR_361 ) goto fail ; VAR_362 ++ ; VAR_363 ++ ; if ( * VAR_364 != * VAR_365 ) goto fail ; VAR_366 ++ ; VAR_367 ++ ; if ( * VAR_368 != * VAR_369 ) goto fail ; VAR_370 ++ ; VAR_371 ++ ; if ( * VAR_372 != * VAR_373 ) goto fail ; VAR_374 ++ ; VAR_375 ++ ; VAR_376 = VAR_377 ; if ( * VAR_378 != * VAR_379 ) goto fail ; VAR_380 ++ ; VAR_381 ++ ; if ( * VAR_382 != * VAR_383 ) goto fail ; VAR_384 ++ ; VAR_385 ++ ; MOP_OUT ; continue ; break ; case OP_EXACTMB2N : MOP_IN ( OP_EXACTMB2N ) ; GET_LENGTH_INC ( VAR_386 , VAR_387 ) ; DATA_ENSURE ( VAR_388 * 2 ) ; while ( VAR_389 -- > 0 ) { if ( * VAR_390 != * VAR_391 ) goto fail ; VAR_392 ++ ; VAR_393 ++ ; if ( * VAR_394 != * VAR_395 ) goto fail ; VAR_396 ++ ; VAR_397 ++ ; } VAR_398 = VAR_399 - 2 ; MOP_OUT ; continue ; break ; case OP_EXACTMB3N : MOP_IN ( OP_EXACTMB3N ) ; GET_LENGTH_INC ( VAR_400 , VAR_401 ) ; DATA_ENSURE ( VAR_402 * 3 ) ; while ( VAR_403 -- > 0 ) { if ( * VAR_404 != * VAR_405 ) goto fail ; VAR_406 ++ ; VAR_407 ++ ; if ( * VAR_408 != * VAR_409 ) goto fail ; VAR_410 ++ ; VAR_411 ++ ; if ( * VAR_412 != * VAR_413 ) goto fail ; VAR_414 ++ ; VAR_415 ++ ; } VAR_416 = VAR_417 - 3 ; MOP_OUT ; continue ; break ; case OP_EXACTMBN : MOP_IN ( OP_EXACTMBN ) ; GET_LENGTH_INC ( VAR_418 , VAR_419 ) ; GET_LENGTH_INC ( VAR_420 , VAR_421 ) ; VAR_422 *= VAR_423 ; DATA_ENSURE ( VAR_424 ) ; while ( VAR_425 -- > 0 ) { if ( * VAR_426 != * VAR_427 ) goto fail ; VAR_428 ++ ; VAR_429 ++ ; } VAR_430 = VAR_431 - VAR_432 ; MOP_OUT ; continue ; break ; case OP_CCLASS : MOP_IN ( OP_CCLASS ) ; DATA_ENSURE ( 1 ) ; if ( BITSET_AT ( ( ( BitSetRef ) VAR_433 ) , * VAR_434 ) == 0 ) goto fail ; VAR_435 += SIZE_BITSET ; VAR_436 += enclen ( VAR_437 , VAR_438 ) ; MOP_OUT ; break ; case OP_CCLASS_MB : MOP_IN ( OP_CCLASS_MB ) ; if ( ! ONIGENC_IS_MBC_HEAD ( VAR_439 , VAR_440 ) ) goto fail ; cclass_mb : GET_LENGTH_INC ( VAR_441 , VAR_442 ) ; { OnigCodePoint code ; TYPE_76 * ss ; TYPE_77 mb_len ; DATA_ENSURE ( 1 ) ; mb_len = enclen ( VAR_443 , VAR_444 ) ; DATA_ENSURE ( mb_len ) ; ss = VAR_445 ; VAR_446 += mb_len ; code = ONIGENC_MBC_TO_CODE ( VAR_447 , ss , VAR_448 ) ; TYPE_78 PLATFORM_UNALIGNED_WORD_ACCESS if ( ! onig_is_in_code_range ( VAR_449 , code ) ) goto fail ; else VAR_450 = VAR_451 ; ALIGNMENT_RIGHT ( VAR_452 ) ; if ( ! onig_is_in_code_range ( VAR_453 , code ) ) goto fail ; } VAR_454 += VAR_455 ; MOP_OUT ; break ; case OP_CCLASS_MIX : MOP_IN ( OP_CCLASS_MIX ) ; DATA_ENSURE ( 1 ) ; if ( ONIGENC_IS_MBC_HEAD ( VAR_456 , VAR_457 ) ) { VAR_458 += SIZE_BITSET ; goto cclass_mb ; } else { if ( BITSET_AT ( ( ( BitSetRef ) VAR_459 ) , * VAR_460 ) == 0 ) goto fail ; VAR_461 += SIZE_BITSET ; GET_LENGTH_INC ( VAR_462 , VAR_463 ) ; VAR_464 += VAR_465 ; VAR_466 ++ ; } MOP_OUT ; break ; case OP_CCLASS_NOT : MOP_IN ( OP_CCLASS_NOT ) ; DATA_ENSURE ( 1 ) ; if ( BITSET_AT ( ( ( BitSetRef ) VAR_467 ) , * VAR_468 ) != 0 ) goto fail ; VAR_469 += SIZE_BITSET ; VAR_470 += enclen ( VAR_471 , VAR_472 ) ; MOP_OUT ; break ; case OP_CCLASS_MB_NOT : MOP_IN ( OP_CCLASS_MB_NOT ) ; DATA_ENSURE ( 1 ) ; if ( ! ONIGENC_IS_MBC_HEAD ( VAR_473 , VAR_474 ) ) { VAR_475 ++ ; GET_LENGTH_INC ( VAR_476 , VAR_477 ) ; VAR_478 += VAR_479 ; goto cc_mb_not_success ; } cclass_mb_not : GET_LENGTH_INC ( VAR_480 , VAR_481 ) ; { OnigCodePoint code ; TYPE_79 * ss ; TYPE_80 mb_len = enclen ( VAR_482 , VAR_483 ) ; if ( ! DATA_ENSURE_CHECK ( mb_len ) ) { DATA_ENSURE ( 1 ) ; VAR_484 = ( TYPE_81 * ) VAR_485 ; VAR_486 += VAR_487 ; goto cc_mb_not_success ; } ss = VAR_488 ; VAR_489 += mb_len ; code = ONIGENC_MBC_TO_CODE ( VAR_490 , ss , VAR_491 ) ; TYPE_82 PLATFORM_UNALIGNED_WORD_ACCESS if ( onig_is_in_code_range ( VAR_492 , code ) ) goto fail ; else VAR_493 = VAR_494 ; ALIGNMENT_RIGHT ( VAR_495 ) ; if ( onig_is_in_code_range ( VAR_496 , code ) ) goto fail ; } VAR_497 += VAR_498 ; cc_mb_not_success : MOP_OUT ; break ; case OP_CCLASS_MIX_NOT : MOP_IN ( OP_CCLASS_MIX_NOT ) ; DATA_ENSURE ( 1 ) ; if ( ONIGENC_IS_MBC_HEAD ( VAR_499 , VAR_500 ) ) { VAR_501 += SIZE_BITSET ; goto cclass_mb_not ; } else { if ( BITSET_AT ( ( ( BitSetRef ) VAR_502 ) , * VAR_503 ) != 0 ) goto fail ; VAR_504 += SIZE_BITSET ; GET_LENGTH_INC ( VAR_505 , VAR_506 ) ; VAR_507 += VAR_508 ; VAR_509 ++ ; } MOP_OUT ; break ; case OP_CCLASS_NODE : MOP_IN ( OP_CCLASS_NODE ) ; { OnigCodePoint code ; void * node ; TYPE_83 mb_len ; TYPE_84 * ss ; DATA_ENSURE ( 1 ) ; GET_POINTER_INC ( node , VAR_510 ) ; mb_len = enclen ( VAR_511 , VAR_512 ) ; ss = VAR_513 ; VAR_514 += mb_len ; DATA_ENSURE ( 0 ) ; code = ONIGENC_MBC_TO_CODE ( VAR_515 , ss , VAR_516 ) ; if ( onig_is_code_in_cc_len ( mb_len , code , node ) == 0 ) goto fail ; } MOP_OUT ; break ; case OP_ANYCHAR : MOP_IN ( OP_ANYCHAR ) ; DATA_ENSURE ( 1 ) ; TYPE_85 = enclen ( VAR_517 , VAR_518 ) ; DATA_ENSURE ( TYPE_86 ) ; if ( ONIGENC_IS_MBC_NEWLINE ( VAR_519 , VAR_520 , VAR_521 ) ) goto fail ; VAR_522 += TYPE_87 ; MOP_OUT ; break ; case OP_ANYCHAR_ML : MOP_IN ( OP_ANYCHAR_ML ) ; DATA_ENSURE ( 1 ) ; TYPE_88 = enclen ( VAR_523 , VAR_524 ) ; DATA_ENSURE ( TYPE_89 ) ; VAR_525 += TYPE_90 ; MOP_OUT ; break ; case OP_ANYCHAR_STAR : MOP_IN ( OP_ANYCHAR_STAR ) ; while ( DATA_ENSURE_CHECK1 ) { STACK_PUSH_ALT ( VAR_526 , VAR_527 , VAR_528 ) ; TYPE_91 = enclen ( VAR_529 , VAR_530 ) ; DATA_ENSURE ( TYPE_92 ) ; if ( ONIGENC_IS_MBC_NEWLINE ( VAR_531 , VAR_532 , VAR_533 ) ) goto fail ; VAR_534 = VAR_535 ; VAR_536 += TYPE_93 ; } MOP_OUT ; break ; case OP_ANYCHAR_ML_STAR : MOP_IN ( OP_ANYCHAR_ML_STAR ) ; while ( DATA_ENSURE_CHECK1 ) { STACK_PUSH_ALT ( VAR_537 , VAR_538 , VAR_539 ) ; TYPE_94 = enclen ( VAR_540 , VAR_541 ) ; if ( TYPE_95 > 1 ) { DATA_ENSURE ( TYPE_96 ) ; VAR_542 = VAR_543 ; VAR_544 += TYPE_97 ; } else { VAR_545 = VAR_546 ; VAR_547 ++ ; } } MOP_OUT ; break ; case OP_ANYCHAR_STAR_PEEK_NEXT : MOP_IN ( OP_ANYCHAR_STAR_PEEK_NEXT ) ; while ( DATA_ENSURE_CHECK1 ) { if ( * VAR_548 == * VAR_549 ) { STACK_PUSH_ALT ( VAR_550 + 1 , VAR_551 , VAR_552 ) ; } TYPE_98 = enclen ( VAR_553 , VAR_554 ) ; DATA_ENSURE ( TYPE_99 ) ; if ( ONIGENC_IS_MBC_NEWLINE ( VAR_555 , VAR_556 , VAR_557 ) ) goto fail ; VAR_558 = VAR_559 ; VAR_560 += TYPE_100 ; } VAR_561 ++ ; MOP_OUT ; break ; case OP_ANYCHAR_ML_STAR_PEEK_NEXT : MOP_IN ( OP_ANYCHAR_ML_STAR_PEEK_NEXT ) ; while ( DATA_ENSURE_CHECK1 ) { if ( * VAR_562 == * VAR_563 ) { STACK_PUSH_ALT ( VAR_564 + 1 , VAR_565 , VAR_566 ) ; } TYPE_101 = enclen ( VAR_567 , VAR_568 ) ; if ( TYPE_102 > 1 ) { DATA_ENSURE ( TYPE_103 ) ; VAR_569 = VAR_570 ; VAR_571 += TYPE_104 ; } else { VAR_572 = VAR_573 ; VAR_574 ++ ; } } VAR_575 ++ ; MOP_OUT ; break ; TYPE_105 TYPE_106 case OP_STATE_CHECK_ANYCHAR_STAR : MOP_IN ( OP_STATE_CHECK_ANYCHAR_STAR ) ; GET_STATE_CHECK_NUM_INC ( VAR_576 , VAR_577 ) ; while ( DATA_ENSURE_CHECK1 ) { STATE_CHECK_VAL ( VAR_578 , VAR_579 ) ; if ( VAR_580 ) goto fail ; STACK_PUSH_ALT_WITH_STATE_CHECK ( VAR_581 , VAR_582 , VAR_583 , VAR_584 ) ; TYPE_107 = enclen ( VAR_585 , VAR_586 ) ; DATA_ENSURE ( TYPE_108 ) ; if ( ONIGENC_IS_MBC_NEWLINE ( VAR_587 , VAR_588 , VAR_589 ) ) goto fail ; VAR_590 = VAR_591 ; VAR_592 += TYPE_109 ; } MOP_OUT ; break ; case OP_STATE_CHECK_ANYCHAR_ML_STAR : MOP_IN ( OP_STATE_CHECK_ANYCHAR_ML_STAR ) ; GET_STATE_CHECK_NUM_INC ( VAR_593 , VAR_594 ) ; while ( DATA_ENSURE_CHECK1 ) { STATE_CHECK_VAL ( VAR_595 , VAR_596 ) ; if ( VAR_597 ) goto fail ; STACK_PUSH_ALT_WITH_STATE_CHECK ( VAR_598 , VAR_599 , VAR_600 , VAR_601 ) ; TYPE_110 = enclen ( VAR_602 , VAR_603 ) ; if ( TYPE_111 > 1 ) { DATA_ENSURE ( TYPE_112 ) ; VAR_604 = VAR_605 ; VAR_606 += TYPE_113 ; } else { VAR_607 = VAR_608 ; VAR_609 ++ ; } } MOP_OUT ; break ; case OP_WORD : MOP_IN ( OP_WORD ) ; DATA_ENSURE ( 1 ) ; if ( ! ONIGENC_IS_MBC_WORD ( VAR_610 , VAR_611 , VAR_612 ) ) goto fail ; VAR_613 += enclen ( VAR_614 , VAR_615 ) ; MOP_OUT ; break ; case OP_NOT_WORD : MOP_IN ( OP_NOT_WORD ) ; DATA_ENSURE ( 1 ) ; if ( ONIGENC_IS_MBC_WORD ( VAR_616 , VAR_617 , VAR_618 ) ) goto fail ; VAR_619 += enclen ( VAR_620 , VAR_621 ) ; MOP_OUT ; break ; case OP_WORD_BOUND : MOP_IN ( OP_WORD_BOUND ) ; if ( ON_STR_BEGIN ( VAR_622 ) ) { DATA_ENSURE ( 1 ) ; if ( ! ONIGENC_IS_MBC_WORD ( VAR_623 , VAR_624 , VAR_625 ) ) goto fail ; } else if ( ON_STR_END ( VAR_626 ) ) { if ( ! ONIGENC_IS_MBC_WORD ( VAR_627 , VAR_628 , VAR_629 ) ) goto fail ; } else { if ( ONIGENC_IS_MBC_WORD ( VAR_630 , VAR_631 , VAR_632 ) == ONIGENC_IS_MBC_WORD ( VAR_633 , VAR_634 , VAR_635 ) ) goto fail ; } MOP_OUT ; continue ; break ; case OP_NOT_WORD_BOUND : MOP_IN ( OP_NOT_WORD_BOUND ) ; if ( ON_STR_BEGIN ( VAR_636 ) ) { if ( DATA_ENSURE_CHECK1 && ONIGENC_IS_MBC_WORD ( VAR_637 , VAR_638 , VAR_639 ) ) goto fail ; } else if ( ON_STR_END ( VAR_640 ) ) { if ( ONIGENC_IS_MBC_WORD ( VAR_641 , VAR_642 , VAR_643 ) ) goto fail ; } else { if ( ONIGENC_IS_MBC_WORD ( VAR_644 , VAR_645 , VAR_646 ) != ONIGENC_IS_MBC_WORD ( VAR_647 , VAR_648 , VAR_649 ) ) goto fail ; } MOP_OUT ; continue ; break ; TYPE_114 USE_WORD_BEGIN_END case OP_WORD_BEGIN : MOP_IN ( OP_WORD_BEGIN ) ; if ( DATA_ENSURE_CHECK1 && ONIGENC_IS_MBC_WORD ( VAR_650 , VAR_651 , VAR_652 ) ) { if ( ON_STR_BEGIN ( VAR_653 ) || ! ONIGENC_IS_MBC_WORD ( VAR_654 , VAR_655 , VAR_656 ) ) { MOP_OUT ; continue ; } } goto fail ; break ; case OP_WORD_END : MOP_IN ( OP_WORD_END ) ; if ( ! ON_STR_BEGIN ( VAR_657 ) && ONIGENC_IS_MBC_WORD ( VAR_658 , VAR_659 , VAR_660 ) ) { if ( ON_STR_END ( VAR_661 ) || ! ONIGENC_IS_MBC_WORD ( VAR_662 , VAR_663 , VAR_664 ) ) { MOP_OUT ; continue ; } } goto fail ; break ; case OP_BEGIN_BUF : MOP_IN ( OP_BEGIN_BUF ) ; if ( ! ON_STR_BEGIN ( VAR_665 ) ) goto fail ; MOP_OUT ; continue ; break ; case OP_END_BUF : MOP_IN ( OP_END_BUF ) ; if ( ! ON_STR_END ( VAR_666 ) ) goto fail ; MOP_OUT ; continue ; break ; case OP_BEGIN_LINE : MOP_IN ( OP_BEGIN_LINE ) ; if ( ON_STR_BEGIN ( VAR_667 ) ) { if ( IS_NOTBOL ( VAR_668 -> VAR_669 ) ) goto fail ; MOP_OUT ; continue ; } else if ( ONIGENC_IS_MBC_NEWLINE ( VAR_670 , VAR_671 , VAR_672 ) && ! ON_STR_END ( VAR_673 ) ) { MOP_OUT ; continue ; } goto fail ; break ; case OP_END_LINE : MOP_IN ( OP_END_LINE ) ; if ( ON_STR_END ( VAR_674 ) ) { ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE if ( IS_EMPTY_STR || ! ONIGENC_IS_MBC_NEWLINE ( VAR_675 , VAR_676 , VAR_677 ) ) { if ( IS_NOTEOL ( VAR_678 -> VAR_679 ) ) goto fail ; MOP_OUT ; continue ; ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE } } else if ( ONIGENC_IS_MBC_NEWLINE ( VAR_680 , VAR_681 , VAR_682 ) ) { MOP_OUT ; continue ; } TYPE_115 USE_CRNL_AS_LINE_TERMINATOR else if ( ONIGENC_IS_MBC_CRNL ( VAR_683 , VAR_684 , VAR_685 ) ) { MOP_OUT ; continue ; } goto fail ; break ; case OP_SEMI_END_BUF : MOP_IN ( OP_SEMI_END_BUF ) ; if ( ON_STR_END ( VAR_686 ) ) { ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE if ( IS_EMPTY_STR || ! ONIGENC_IS_MBC_NEWLINE ( VAR_687 , VAR_688 , VAR_689 ) ) { if ( IS_NOTEOL ( VAR_690 -> VAR_691 ) ) goto fail ; MOP_OUT ; continue ; ifndef USE_NEWLINE_AT_END_OF_STRING_HAS_EMPTY_LINE } } else if ( ONIGENC_IS_MBC_NEWLINE ( VAR_692 , VAR_693 , VAR_694 ) && ON_STR_END ( VAR_695 + enclen ( VAR_696 , VAR_697 ) ) ) { MOP_OUT ; continue ; } TYPE_116 USE_CRNL_AS_LINE_TERMINATOR else if ( ONIGENC_IS_MBC_CRNL ( VAR_698 , VAR_699 , VAR_700 ) ) { TYPE_117 * ss = VAR_701 + enclen ( VAR_702 , VAR_703 ) ; ss += enclen ( VAR_704 , ss ) ; if ( ON_STR_END ( ss ) ) { MOP_OUT ; continue ; } } goto fail ; break ; case OP_BEGIN_POSITION : MOP_IN ( OP_BEGIN_POSITION ) ; if ( VAR_705 != VAR_706 -> start ) goto fail ; MOP_OUT ; continue ; break ; case OP_MEMORY_START_PUSH : MOP_IN ( OP_MEMORY_START_PUSH ) ; GET_MEMNUM_INC ( VAR_707 , VAR_708 ) ; STACK_PUSH_MEM_START ( VAR_709 , VAR_710 ) ; MOP_OUT ; continue ; break ; case OP_MEMORY_START : MOP_IN ( OP_MEMORY_START ) ; GET_MEMNUM_INC ( VAR_711 , VAR_712 ) ; VAR_713 [ VAR_714 ] = ( TYPE_118 ) ( ( void * ) VAR_715 ) ; MOP_OUT ; continue ; break ; case OP_MEMORY_END_PUSH : MOP_IN ( OP_MEMORY_END_PUSH ) ; GET_MEMNUM_INC ( VAR_716 , VAR_717 ) ; STACK_PUSH_MEM_END ( VAR_718 , VAR_719 ) ; MOP_OUT ; continue ; break ; case OP_MEMORY_END : MOP_IN ( OP_MEMORY_END ) ; GET_MEMNUM_INC ( VAR_720 , VAR_721 ) ; VAR_722 [ VAR_723 ] = ( TYPE_119 ) ( ( void * ) VAR_724 ) ; MOP_OUT ; continue ; break ; TYPE_120 USE_SUBEXP_CALL case OP_MEMORY_END_PUSH_REC : MOP_IN ( OP_MEMORY_END_PUSH_REC ) ; GET_MEMNUM_INC ( VAR_725 , VAR_726 ) ; STACK_GET_MEM_START ( VAR_727 , VAR_728 ) ; STACK_PUSH_MEM_END ( VAR_729 , VAR_730 ) ; VAR_731 [ VAR_732 ] = GET_STACK_INDEX ( VAR_733 ) ; MOP_OUT ; continue ; break ; case OP_MEMORY_END_REC : MOP_IN ( OP_MEMORY_END_REC ) ; GET_MEMNUM_INC ( VAR_734 , VAR_735 ) ; VAR_736 [ VAR_737 ] = ( TYPE_121 ) ( ( void * ) VAR_738 ) ; STACK_GET_MEM_START ( VAR_739 , VAR_740 ) ; if ( BIT_STATUS_AT ( VAR_741 -> bt_mem_start , VAR_742 ) ) VAR_743 [ VAR_744 ] = GET_STACK_INDEX ( VAR_745 ) ; else VAR_746 [ VAR_747 ] = ( TYPE_122 ) ( ( void * ) VAR_748 -> u . VAR_749 . pstr ) ; STACK_PUSH_MEM_END_MARK ( VAR_750 ) ; MOP_OUT ; continue ; break ; case OP_BACKREF1 : MOP_IN ( OP_BACKREF1 ) ; VAR_751 = 1 ; goto backref ; break ; case OP_BACKREF2 : MOP_IN ( OP_BACKREF2 ) ; VAR_752 = 2 ; goto backref ; break ; case OP_BACKREFN : MOP_IN ( OP_BACKREFN ) ; GET_MEMNUM_INC ( VAR_753 , VAR_754 ) ; backref : { TYPE_123 TYPE_124 ; TYPE_125 * pstart , * pend ; if ( VAR_755 > VAR_756 ) goto fail ; if ( VAR_757 [ VAR_758 ] == VAR_759 ) goto fail ; if ( VAR_760 [ VAR_761 ] == VAR_762 ) goto fail ; if ( BIT_STATUS_AT ( VAR_763 -> bt_mem_start , VAR_764 ) ) pstart = STACK_AT ( VAR_765 [ VAR_766 ] ) -> u . VAR_767 . pstr ; else pstart = ( TYPE_126 * ) ( ( void * ) VAR_768 [ VAR_769 ] ) ; pend = ( BIT_STATUS_AT ( VAR_770 -> bt_mem_end , VAR_771 ) ? STACK_AT ( VAR_772 [ VAR_773 ] ) -> u . VAR_774 . pstr : ( TYPE_127 * ) ( ( void * ) VAR_775 [ VAR_776 ] ) ) ; TYPE_128 = pend - pstart ; DATA_ENSURE ( TYPE_129 ) ; VAR_777 = VAR_778 ; STRING_CMP ( pstart , VAR_779 , TYPE_130 ) ; while ( VAR_780 + ( TYPE_131 = enclen ( VAR_781 , VAR_782 ) ) < VAR_783 ) VAR_784 += TYPE_132 ; MOP_OUT ; continue ; } break ; case OP_BACKREFN_IC : MOP_IN ( OP_BACKREFN_IC ) ; GET_MEMNUM_INC ( VAR_785 , VAR_786 ) ; { TYPE_133 TYPE_134 ; TYPE_135 * pstart , * pend ; if ( VAR_787 > VAR_788 ) goto fail ; if ( VAR_789 [ VAR_790 ] == VAR_791 ) goto fail ; if ( VAR_792 [ VAR_793 ] == VAR_794 ) goto fail ; if ( BIT_STATUS_AT ( VAR_795 -> bt_mem_start , VAR_796 ) ) pstart = STACK_AT ( VAR_797 [ VAR_798 ] ) -> u . VAR_799 . pstr ; else pstart = ( TYPE_136 * ) ( ( void * ) VAR_800 [ VAR_801 ] ) ; pend = ( BIT_STATUS_AT ( VAR_802 -> bt_mem_end , VAR_803 ) ? STACK_AT ( VAR_804 [ VAR_805 ] ) -> u . VAR_806 . pstr : ( TYPE_137 * ) ( ( void * ) VAR_807 [ VAR_808 ] ) ) ; TYPE_138 = pend - pstart ; DATA_ENSURE ( TYPE_139 ) ; VAR_809 = VAR_810 ; STRING_CMP_IC ( VAR_811 , pstart , & VAR_812 , TYPE_140 ) ; while ( VAR_813 + ( TYPE_141 = enclen ( VAR_814 , VAR_815 ) ) < VAR_816 ) VAR_817 += TYPE_142 ; MOP_OUT ; continue ; } break ; case OP_BACKREF_MULTI : MOP_IN ( OP_BACKREF_MULTI ) ; { TYPE_143 TYPE_144 , is_fail ; TYPE_145 * pstart , * pend , * swork ; GET_LENGTH_INC ( VAR_818 , VAR_819 ) ; for ( VAR_820 = 0 ; VAR_821 < VAR_822 ; VAR_823 ++ ) { GET_MEMNUM_INC ( VAR_824 , VAR_825 ) ; if ( VAR_826 [ VAR_827 ] == VAR_828 ) continue ; if ( VAR_829 [ VAR_830 ] == VAR_831 ) continue ; if ( BIT_STATUS_AT ( VAR_832 -> bt_mem_start , VAR_833 ) ) pstart = STACK_AT ( VAR_834 [ VAR_835 ] ) -> u . VAR_836 . pstr ; else pstart = ( TYPE_146 * ) ( ( void * ) VAR_837 [ VAR_838 ] ) ; pend = ( BIT_STATUS_AT ( VAR_839 -> bt_mem_end , VAR_840 ) ? STACK_AT ( VAR_841 [ VAR_842 ] ) -> u . VAR_843 . pstr : ( TYPE_147 * ) ( ( void * ) VAR_844 [ VAR_845 ] ) ) ; TYPE_148 = pend - pstart ; DATA_ENSURE ( TYPE_149 ) ; VAR_846 = VAR_847 ; swork = VAR_848 ; STRING_CMP_VALUE ( pstart , swork , TYPE_150 , is_fail ) ; if ( is_fail ) continue ; VAR_849 = swork ; while ( VAR_850 + ( TYPE_151 = enclen ( VAR_851 , VAR_852 ) ) < VAR_853 ) VAR_854 += TYPE_152 ; VAR_855 += ( SIZE_MEMNUM * ( VAR_856 - VAR_857 - 1 ) ) ; break ; } if ( VAR_858 == VAR_859 ) goto fail ; MOP_OUT ; continue ; } break ; case OP_BACKREF_MULTI_IC : MOP_IN ( OP_BACKREF_MULTI_IC ) ; { TYPE_153 TYPE_154 , is_fail ; TYPE_155 * pstart , * pend , * swork ; GET_LENGTH_INC ( VAR_860 , VAR_861 ) ; for ( VAR_862 = 0 ; VAR_863 < VAR_864 ; VAR_865 ++ ) { GET_MEMNUM_INC ( VAR_866 , VAR_867 ) ; if ( VAR_868 [ VAR_869 ] == VAR_870 ) continue ; if ( VAR_871 [ VAR_872 ] == VAR_873 ) continue ; if ( BIT_STATUS_AT ( VAR_874 -> bt_mem_start , VAR_875 ) ) pstart = STACK_AT ( VAR_876 [ VAR_877 ] ) -> u . VAR_878 . pstr ; else pstart = ( TYPE_156 * ) ( ( void * ) VAR_879 [ VAR_880 ] ) ; pend = ( BIT_STATUS_AT ( VAR_881 -> bt_mem_end , VAR_882 ) ? STACK_AT ( VAR_883 [ VAR_884 ] ) -> u . VAR_885 . pstr : ( TYPE_157 * ) ( ( void * ) VAR_886 [ VAR_887 ] ) ) ; TYPE_158 = pend - pstart ; DATA_ENSURE ( TYPE_159 ) ; VAR_888 = VAR_889 ; swork = VAR_890 ; STRING_CMP_VALUE_IC ( VAR_891 , pstart , & swork , TYPE_160 , is_fail ) ; if ( is_fail ) continue ; VAR_892 = swork ; while ( VAR_893 + ( TYPE_161 = enclen ( VAR_894 , VAR_895 ) ) < VAR_896 ) VAR_897 += TYPE_162 ; VAR_898 += ( SIZE_MEMNUM * ( VAR_899 - VAR_900 - 1 ) ) ; break ; } if ( VAR_901 == VAR_902 ) goto fail ; MOP_OUT ; continue ; } break ; TYPE_163 USE_BACKREF_WITH_LEVEL case OP_BACKREF_WITH_LEVEL : { TYPE_164 TYPE_165 ; TYPE_166 ic ; TYPE_167 level ; GET_OPTION_INC ( ic , VAR_903 ) ; GET_LENGTH_INC ( level , VAR_904 ) ; GET_LENGTH_INC ( VAR_905 , VAR_906 ) ; VAR_907 = VAR_908 ; if ( backref_match_at_nested_level ( VAR_909 , VAR_910 , VAR_911 , ic , VAR_912 , ( TYPE_168 ) level , ( TYPE_169 ) VAR_913 , VAR_914 , & VAR_915 , VAR_916 ) ) { while ( VAR_917 + ( TYPE_170 = enclen ( VAR_918 , VAR_919 ) ) < VAR_920 ) VAR_921 += TYPE_171 ; VAR_922 += ( SIZE_MEMNUM * VAR_923 ) ; } else goto fail ; MOP_OUT ; continue ; } break ; if 0 case OP_SET_OPTION_PUSH : MOP_IN ( OP_SET_OPTION_PUSH ) ; GET_OPTION_INC ( VAR_924 , VAR_925 ) ; STACK_PUSH_ALT ( VAR_926 , VAR_927 , VAR_928 ) ; VAR_929 += SIZE_OP_SET_OPTION + SIZE_OP_FAIL ; MOP_OUT ; continue ; break ; case OP_SET_OPTION : MOP_IN ( OP_SET_OPTION ) ; GET_OPTION_INC ( VAR_930 , VAR_931 ) ; MOP_OUT ; continue ; break ; case OP_NULL_CHECK_START : MOP_IN ( OP_NULL_CHECK_START ) ; GET_MEMNUM_INC ( VAR_932 , VAR_933 ) ; STACK_PUSH_NULL_CHECK_START ( VAR_934 , VAR_935 ) ; MOP_OUT ; continue ; break ; case OP_NULL_CHECK_END : MOP_IN ( OP_NULL_CHECK_END ) ; { TYPE_172 isnull ; GET_MEMNUM_INC ( VAR_936 , VAR_937 ) ; STACK_NULL_CHECK ( isnull , VAR_938 , VAR_939 ) ; if ( isnull ) { TYPE_173 TYPE_174 METHOD_7 ( VAR_940 , "NULL_CHECK_END:skipid:%d,s:%d\\n" , ( TYPE_175 ) VAR_941 , ( TYPE_176 ) VAR_942 ) ; null_check_found : switch ( * VAR_943 ++ ) { case OP_JUMP : case OP_PUSH : VAR_944 += SIZE_RELADDR ; break ; case OP_REPEAT_INC : case OP_REPEAT_INC_NG : case OP_REPEAT_INC_SG : case OP_REPEAT_INC_NG_SG : VAR_945 += SIZE_MEMNUM ; break ; default : goto unexpected_bytecode_error ; break ; } } } MOP_OUT ; continue ; break ; TYPE_177 USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT case OP_NULL_CHECK_END_MEMST : MOP_IN ( OP_NULL_CHECK_END_MEMST ) ; { TYPE_178 isnull ; GET_MEMNUM_INC ( VAR_946 , VAR_947 ) ; STACK_NULL_CHECK_MEMST ( isnull , VAR_948 , VAR_949 , VAR_950 ) ; if ( isnull ) { TYPE_179 TYPE_180 METHOD_8 ( VAR_951 , "NULL_CHECK_END_MEMST:skipid:%d,s:%d\\n" , ( TYPE_181 ) VAR_952 , ( TYPE_182 ) VAR_953 ) ; if ( isnull == - 1 ) goto fail ; goto null_check_found ; } } MOP_OUT ; continue ; break ; TYPE_183 USE_SUBEXP_CALL case OP_NULL_CHECK_END_MEMST_PUSH : MOP_IN ( OP_NULL_CHECK_END_MEMST_PUSH ) ; { TYPE_184 isnull ; GET_MEMNUM_INC ( VAR_954 , VAR_955 ) ; TYPE_185 USE_MONOMANIAC_CHECK_CAPTURES_IN_ENDLESS_REPEAT STACK_NULL_CHECK_MEMST_REC ( isnull , VAR_956 , VAR_957 , VAR_958 ) ; else STACK_NULL_CHECK_REC ( isnull , VAR_959 , VAR_960 ) ; if ( isnull ) { TYPE_186 TYPE_187 METHOD_9 ( VAR_961 , "NULL_CHECK_END_MEMST_PUSH:skipid:%d,s:%d\\n" , ( TYPE_188 ) VAR_962 , ( TYPE_189 ) VAR_963 ) ; if ( isnull == - 1 ) goto fail ; goto null_check_found ; } else { STACK_PUSH_NULL_CHECK_END ( VAR_964 ) ; } } MOP_OUT ; continue ; break ; case OP_JUMP : MOP_IN ( OP_JUMP ) ; GET_RELADDR_INC ( VAR_965 , VAR_966 ) ; VAR_967 += VAR_968 ; MOP_OUT ; CHECK_INTERRUPT_IN_MATCH_AT ; continue ; break ; case OP_PUSH : MOP_IN ( OP_PUSH ) ; GET_RELADDR_INC ( VAR_969 , VAR_970 ) ; STACK_PUSH_ALT ( VAR_971 + VAR_972 , VAR_973 , VAR_974 ) ; MOP_OUT ; continue ; break ; TYPE_190 TYPE_191 case OP_STATE_CHECK_PUSH : MOP_IN ( OP_STATE_CHECK_PUSH ) ; GET_STATE_CHECK_NUM_INC ( VAR_975 , VAR_976 ) ; STATE_CHECK_VAL ( VAR_977 , VAR_978 ) ; if ( VAR_979 ) goto fail ; GET_RELADDR_INC ( VAR_980 , VAR_981 ) ; STACK_PUSH_ALT_WITH_STATE_CHECK ( VAR_982 + VAR_983 , VAR_984 , VAR_985 , VAR_986 ) ; MOP_OUT ; continue ; break ; case OP_STATE_CHECK_PUSH_OR_JUMP : MOP_IN ( OP_STATE_CHECK_PUSH_OR_JUMP ) ; GET_STATE_CHECK_NUM_INC ( VAR_987 , VAR_988 ) ; GET_RELADDR_INC ( VAR_989 , VAR_990 ) ; STATE_CHECK_VAL ( VAR_991 , VAR_992 ) ; if ( VAR_993 ) { VAR_994 += VAR_995 ; } else { STACK_PUSH_ALT_WITH_STATE_CHECK ( VAR_996 + VAR_997 , VAR_998 , VAR_999 , VAR_1000 ) ; } MOP_OUT ; continue ; break ; case OP_STATE_CHECK : MOP_IN ( OP_STATE_CHECK ) ; GET_STATE_CHECK_NUM_INC ( VAR_1001 , VAR_1002 ) ; STATE_CHECK_VAL ( VAR_1003 , VAR_1004 ) ; if ( VAR_1005 ) goto fail ; STACK_PUSH_STATE_CHECK ( VAR_1006 , VAR_1007 ) ; MOP_OUT ; continue ; break ; case OP_POP : MOP_IN ( OP_POP ) ; STACK_POP_ONE ; MOP_OUT ; continue ; break ; case OP_PUSH_OR_JUMP_EXACT1 : MOP_IN ( OP_PUSH_OR_JUMP_EXACT1 ) ; GET_RELADDR_INC ( VAR_1008 , VAR_1009 ) ; if ( * VAR_1010 == * VAR_1011 && DATA_ENSURE_CHECK1 ) { VAR_1012 ++ ; STACK_PUSH_ALT ( VAR_1013 + VAR_1014 , VAR_1015 , VAR_1016 ) ; MOP_OUT ; continue ; } VAR_1017 += ( VAR_1018 + 1 ) ; MOP_OUT ; continue ; break ; case OP_PUSH_IF_PEEK_NEXT : MOP_IN ( OP_PUSH_IF_PEEK_NEXT ) ; GET_RELADDR_INC ( VAR_1019 , VAR_1020 ) ; if ( * VAR_1021 == * VAR_1022 ) { VAR_1023 ++ ; STACK_PUSH_ALT ( VAR_1024 + VAR_1025 , VAR_1026 , VAR_1027 ) ; MOP_OUT ; continue ; } VAR_1028 ++ ; MOP_OUT ; continue ; break ; case OP_REPEAT : MOP_IN ( OP_REPEAT ) ; { GET_MEMNUM_INC ( VAR_1029 , VAR_1030 ) ; GET_RELADDR_INC ( VAR_1031 , VAR_1032 ) ; STACK_ENSURE ( 1 ) ; VAR_1033 [ VAR_1034 ] = GET_STACK_INDEX ( VAR_1035 ) ; STACK_PUSH_REPEAT ( VAR_1036 , VAR_1037 ) ; if ( VAR_1038 -> repeat_range [ VAR_1039 ] . lower == 0 ) { STACK_PUSH_ALT ( VAR_1040 + VAR_1041 , VAR_1042 , VAR_1043 ) ; } } MOP_OUT ; continue ; break ; case OP_REPEAT_NG : MOP_IN ( OP_REPEAT_NG ) ; { GET_MEMNUM_INC ( VAR_1044 , VAR_1045 ) ; GET_RELADDR_INC ( VAR_1046 , VAR_1047 ) ; STACK_ENSURE ( 1 ) ; VAR_1048 [ VAR_1049 ] = GET_STACK_INDEX ( VAR_1050 ) ; STACK_PUSH_REPEAT ( VAR_1051 , VAR_1052 ) ; if ( VAR_1053 -> repeat_range [ VAR_1054 ] . lower == 0 ) { STACK_PUSH_ALT ( VAR_1055 , VAR_1056 , VAR_1057 ) ; VAR_1058 += VAR_1059 ; } } MOP_OUT ; continue ; break ; case OP_REPEAT_INC : MOP_IN ( OP_REPEAT_INC ) ; GET_MEMNUM_INC ( VAR_1060 , VAR_1061 ) ; VAR_1062 = VAR_1063 [ VAR_1064 ] ; VAR_1065 = STACK_AT ( VAR_1066 ) ; repeat_inc : VAR_1067 -> u . repeat . count ++ ; if ( VAR_1068 -> u . repeat . count >= VAR_1069 -> repeat_range [ VAR_1070 ] . upper ) { } else if ( VAR_1071 -> u . repeat . count >= VAR_1072 -> repeat_range [ VAR_1073 ] . lower ) { STACK_PUSH_ALT ( VAR_1074 , VAR_1075 , VAR_1076 ) ; VAR_1077 = STACK_AT ( VAR_1078 ) -> u . repeat . pcode ; } else { VAR_1079 = VAR_1080 -> u . repeat . pcode ; } STACK_PUSH_REPEAT_INC ( VAR_1081 ) ; MOP_OUT ; CHECK_INTERRUPT_IN_MATCH_AT ; continue ; break ; case OP_REPEAT_INC_SG : MOP_IN ( OP_REPEAT_INC_SG ) ; GET_MEMNUM_INC ( VAR_1082 , VAR_1083 ) ; STACK_GET_REPEAT ( VAR_1084 , VAR_1085 ) ; VAR_1086 = GET_STACK_INDEX ( VAR_1087 ) ; goto repeat_inc ; break ; case OP_REPEAT_INC_NG : MOP_IN ( OP_REPEAT_INC_NG ) ; GET_MEMNUM_INC ( VAR_1088 , VAR_1089 ) ; VAR_1090 = VAR_1091 [ VAR_1092 ] ; VAR_1093 = STACK_AT ( VAR_1094 ) ; repeat_inc_ng : VAR_1095 -> u . repeat . count ++ ; if ( VAR_1096 -> u . repeat . count < VAR_1097 -> repeat_range [ VAR_1098 ] . upper ) { if ( VAR_1099 -> u . repeat . count >= VAR_1100 -> repeat_range [ VAR_1101 ] . lower ) { TYPE_192 * pcode = VAR_1102 -> u . repeat . pcode ; STACK_PUSH_REPEAT_INC ( VAR_1103 ) ; STACK_PUSH_ALT ( pcode , VAR_1104 , VAR_1105 ) ; } else { VAR_1106 = VAR_1107 -> u . repeat . pcode ; STACK_PUSH_REPEAT_INC ( VAR_1108 ) ; } } else if ( VAR_1109 -> u . repeat . count == VAR_1110 -> repeat_range [ VAR_1111 ] . upper ) { STACK_PUSH_REPEAT_INC ( VAR_1112 ) ; } MOP_OUT ; CHECK_INTERRUPT_IN_MATCH_AT ; continue ; break ; case OP_REPEAT_INC_NG_SG : MOP_IN ( OP_REPEAT_INC_NG_SG ) ; GET_MEMNUM_INC ( VAR_1113 , VAR_1114 ) ; STACK_GET_REPEAT ( VAR_1115 , VAR_1116 ) ; VAR_1117 = GET_STACK_INDEX ( VAR_1118 ) ; goto repeat_inc_ng ; break ; case OP_PUSH_POS : MOP_IN ( OP_PUSH_POS ) ; STACK_PUSH_POS ( VAR_1119 , VAR_1120 ) ; MOP_OUT ; continue ; break ; case OP_POP_POS : MOP_IN ( OP_POP_POS ) ; { STACK_POS_END ( VAR_1121 ) ; VAR_1122 = VAR_1123 -> u . state . pstr ; VAR_1124 = VAR_1125 -> u . state . pstr_prev ; } MOP_OUT ; continue ; break ; case OP_PUSH_POS_NOT : MOP_IN ( OP_PUSH_POS_NOT ) ; GET_RELADDR_INC ( VAR_1126 , VAR_1127 ) ; STACK_PUSH_POS_NOT ( VAR_1128 + VAR_1129 , VAR_1130 , VAR_1131 ) ; MOP_OUT ; continue ; break ; case OP_FAIL_POS : MOP_IN ( OP_FAIL_POS ) ; STACK_POP_TIL_POS_NOT ; goto fail ; break ; case OP_PUSH_STOP_BT : MOP_IN ( OP_PUSH_STOP_BT ) ; STACK_PUSH_STOP_BT ; MOP_OUT ; continue ; break ; case OP_POP_STOP_BT : MOP_IN ( OP_POP_STOP_BT ) ; STACK_STOP_BT_END ; MOP_OUT ; continue ; break ; case OP_LOOK_BEHIND : MOP_IN ( OP_LOOK_BEHIND ) ; GET_LENGTH_INC ( VAR_1132 , VAR_1133 ) ; VAR_1134 = ( TYPE_193 * ) ONIGENC_STEP_BACK ( VAR_1135 , VAR_1136 , VAR_1137 , ( TYPE_194 ) VAR_1138 ) ; if ( IS_NULL ( VAR_1139 ) ) goto fail ; VAR_1140 = ( TYPE_195 * ) onigenc_get_prev_char_head ( VAR_1141 , VAR_1142 , VAR_1143 ) ; MOP_OUT ; continue ; break ; case OP_PUSH_LOOK_BEHIND_NOT : MOP_IN ( OP_PUSH_LOOK_BEHIND_NOT ) ; GET_RELADDR_INC ( VAR_1144 , VAR_1145 ) ; GET_LENGTH_INC ( VAR_1146 , VAR_1147 ) ; VAR_1148 = ( TYPE_196 * ) ONIGENC_STEP_BACK ( VAR_1149 , VAR_1150 , VAR_1151 , ( TYPE_197 ) VAR_1152 ) ; if ( IS_NULL ( VAR_1153 ) ) { VAR_1154 += VAR_1155 ; } else { STACK_PUSH_LOOK_BEHIND_NOT ( VAR_1156 + VAR_1157 , VAR_1158 , VAR_1159 ) ; VAR_1160 = VAR_1161 ; VAR_1162 = ( TYPE_198 * ) onigenc_get_prev_char_head ( VAR_1163 , VAR_1164 , VAR_1165 ) ; } MOP_OUT ; continue ; break ; case OP_FAIL_LOOK_BEHIND_NOT : MOP_IN ( OP_FAIL_LOOK_BEHIND_NOT ) ; STACK_POP_TIL_LOOK_BEHIND_NOT ; goto fail ; break ; TYPE_199 USE_SUBEXP_CALL case OP_CALL : MOP_IN ( OP_CALL ) ; GET_ABSADDR_INC ( VAR_1166 , VAR_1167 ) ; STACK_PUSH_CALL_FRAME ( VAR_1168 ) ; VAR_1169 = VAR_1170 -> VAR_1171 + VAR_1172 ; MOP_OUT ; continue ; break ; case OP_RETURN : MOP_IN ( OP_RETURN ) ; STACK_RETURN ( VAR_1173 ) ; STACK_PUSH_RETURN ; MOP_OUT ; continue ; break ; case VAR_1174 : goto finish ; break ; fail : MOP_OUT ; case OP_FAIL : MOP_IN ( OP_FAIL ) ; STACK_POP ; VAR_1175 = VAR_1176 -> u . state . pcode ; VAR_1177 = VAR_1178 -> u . state . pstr ; VAR_1179 = VAR_1180 -> u . state . pstr_prev ; TYPE_200 TYPE_201 if ( VAR_1181 -> u . state . state_check != 0 ) { VAR_1182 -> type = STK_STATE_CHECK_MARK ; VAR_1183 ++ ; } MOP_OUT ; continue ; break ; default : goto bytecode_error ; } VAR_1184 = VAR_1185 ; } finish : STACK_SAVE ; return VAR_1186 ; TYPE_202 ONIG_DEBUG stack_error : STACK_SAVE ; return ONIGERR_STACK_BUG ; bytecode_error : STACK_SAVE ; return ONIGERR_UNDEFINED_BYTECODE ; unexpected_bytecode_error : STACK_SAVE ; return ONIGERR_UNEXPECTED_BYTECODE ; }
TYPE_0 METHOD_0 ( const TYPE_1 * const VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ;  for ( VAR_5 = 0 ; VAR_6 < VAR_7 ; VAR_8 ++ )  METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ;  TYPE_3 VAR_8 , VAR_9 = - VAR_10 ;  VAR_11 -> VAR_12 = 0 ; if ( STRUCT_OR_UNION_8 -> VAR_13 != VAR_14 ) return - VAR_15 ; if ( VAR_16 & ~ ( VAR_17 | VAR_18 ) ) return - VAR_19 ; VAR_20 = METHOD_1 ( STRUCT_OR_UNION_9 ) ; if ( METHOD_2 ( VAR_21 , & VAR_22 -> VAR_23 ) || METHOD_3 ( VAR_24 , & VAR_25 -> VAR_26 ) || ! METHOD_4 ( VAR_27 , & VAR_28 -> VAR_29 ) ) return 0 ; VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , VAR_33 & VAR_34 , & VAR_35 ) ; if ( ! VAR_36 ) return VAR_37 ; VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 > VAR_42 ) { VAR_43 = VAR_44 ; VAR_45 -> VAR_46 |= VAR_47 ; } VAR_48 = METHOD_6 ( VAR_49 , 0 , VAR_50 -> VAR_51 , VAR_52 ) ; if ( VAR_53 ) return VAR_54 ; METHOD_7 ( VAR_55 , VAR_56 , VAR_57 ) ; if ( ! ( VAR_58 & VAR_59 ) ) { METHOD_8 ( "%d-=%d\\n" , METHOD_9 ( & VAR_60 -> VAR_61 ) , VAR_62 -> VAR_63 ) ; METHOD_10 ( VAR_64 , VAR_65 -> VAR_66 ) ; } METHOD_11 ( VAR_67 , VAR_68 ) ; return VAR_69 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ VAR_2 ] ; TYPE_3 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , sizeof ( VAR_6 ) , "%s/%s" , VAR_7 , STRUCT_OR_UNION_2 -> VAR_8 ) ; if ( VAR_9 >= sizeof ( VAR_10 ) ) { METHOD_2 ( "pathnametoolong" ) ; return - 1 ; }  return METHOD_3 ( STRUCT_OR_UNION_3 , VAR_11 ) ;  }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 ; if ( VAR_9 -> VAR_10 == VAR_11 ) { return METHOD_1 ( VAR_12 -> VAR_13 . VAR_14 , VAR_15 -> VAR_16 . VAR_17 ) ; } VAR_18 = METHOD_2 ( VAR_19 , VAR_20 -> VAR_21 ) ; if ( METHOD_3 ( ! VAR_22 ) ) { return METHOD_4 ( VAR_23 -> VAR_24 . VAR_25 , VAR_26 -> VAR_27 . VAR_28 ) ; } VAR_29 = METHOD_5 ( VAR_30 , VAR_31 ) ; if ( VAR_32 ) { VAR_33 -> VAR_34 ++ ; return VAR_35 -> VAR_36 ; } VAR_37 = METHOD_6 ( VAR_38 -> VAR_39 . VAR_40 , VAR_41 -> VAR_42 . VAR_43 ) ; if ( VAR_44 == - 1 ) { return - 1 ; } if ( VAR_45 -> VAR_46 <= 0 ) { return VAR_47 ; } for ( VAR_48 = 0 ; VAR_49 < VAR_50 ; VAR_51 ++ ) { VAR_52 = & VAR_53 -> VAR_54 [ VAR_55 ] ; if ( VAR_56 -> VAR_57 == - 1 ) { VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 ++ ; VAR_66 -> VAR_67 -- ; VAR_68 -> VAR_69 = VAR_70 ; VAR_71 -> VAR_72 = VAR_73 ;  return VAR_74 ;  } } return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * const VAR_7 = & VAR_8 -> VAR_9 ; TYPE_9 * const VAR_10 = & VAR_11 -> VAR_12 ; TYPE_10 * const VAR_13 = & VAR_14 -> VAR_15 ;  METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ) ;   VAR_21 -> VAR_22 [ 0 ] -> VAR_23 . VAR_24 = VAR_25 ;  if ( ! METHOD_2 ( VAR_26 ) ) {  METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , VAR_31 ,  VAR_32 , VAR_33 , VAR_34 ) ; } else { TYPE_11 VAR_35 = VAR_36 ; METHOD_4 ( & VAR_37 -> VAR_38 [ 0 ] -> VAR_39 , VAR_40 , VAR_41 ) ; } METHOD_5 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , TYPE_2 ; struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_3 VAR_4 ; if ( ! VAR_5 -> VAR_6 -> VAR_7 ) { METHOD_1 ( & VAR_8 -> VAR_9 , "%sfailure:configaccessdisabled\\n" , VAR_10 ) ; return - VAR_11 ; } if ( ! METHOD_2 ( VAR_12 ) ) return - VAR_13 ; TYPE_4 = virtio_cread_feature ( VAR_14 , VAR_15 , struct STRUCT_OR_UNION_3 , VAR_16 , & VAR_17 ) ; if ( TYPE_5 || VAR_18 < VAR_19 || VAR_20 > VAR_21 || ! METHOD_3 ( VAR_22 , VAR_23 ) ) VAR_24 = 1 ; VAR_25 = METHOD_4 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_26 ) ; if ( ! VAR_27 ) return - VAR_28 ; VAR_29 -> VAR_30 |= VAR_31 | VAR_32 ; VAR_33 -> VAR_34 = & VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 = & VAR_41 ; METHOD_5 ( VAR_42 , & VAR_43 -> VAR_44 ) ; if ( METHOD_6 ( VAR_45 , VAR_46 ) ) {  VAR_47 -> VAR_48 |= VAR_49 | VAR_50 | VAR_51 ;  if ( VAR_52 )  VAR_53 -> VAR_54 |= VAR_55 | VAR_56 | VAR_57 ;  if ( METHOD_7 ( VAR_58 , VAR_59 ) ) { VAR_60 -> VAR_61 |= VAR_62 | VAR_63 | VAR_64 | VAR_65 ; } if ( METHOD_8 ( VAR_66 , VAR_67 ) ) VAR_68 -> VAR_69 |= VAR_70 ; if ( METHOD_9 ( VAR_71 , VAR_72 ) ) VAR_73 -> VAR_74 |= VAR_75 ; if ( METHOD_10 ( VAR_76 , VAR_77 ) ) VAR_78 -> VAR_79 |= VAR_80 ; if ( METHOD_11 ( VAR_81 , VAR_82 ) ) VAR_83 -> VAR_84 |= VAR_85 ; VAR_86 -> VAR_87 |= VAR_88 ; if ( VAR_89 ) VAR_90 -> VAR_91 |= VAR_92 -> VAR_93 & ( VAR_94 | VAR_95 ) ; } if ( METHOD_12 ( VAR_96 , VAR_97 ) ) VAR_98 -> VAR_99 |= VAR_100 ; VAR_101 -> VAR_102 = VAR_103 -> VAR_104 ; if ( METHOD_13 ( VAR_105 , VAR_106 ) ) virtio_cread_bytes ( VAR_107 , offsetof ( struct STRUCT_OR_UNION_5 , VAR_108 ) , VAR_109 -> VAR_110 , VAR_111 -> VAR_112 ) ; else TYPE_6 ( VAR_113 ) ; VAR_114 = TYPE_7 ( VAR_115 ) ; VAR_116 -> VAR_117 = VAR_118 ; VAR_119 -> VAR_120 = VAR_121 ; VAR_122 -> priv = VAR_123 ; VAR_124 -> VAR_125 = METHOD_14 ( struct STRUCT_OR_UNION_6 ) ; TYPE_8 = - VAR_126 ; if ( VAR_127 -> VAR_128 == VAR_129 ) goto VAR_130 ; for_each_possible_cpu ( VAR_131 ) { struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ; STRUCT_OR_UNION_9 = METHOD_15 ( VAR_132 -> VAR_133 , VAR_134 ) ; METHOD_16 ( & STRUCT_OR_UNION_10 -> VAR_135 ) ; METHOD_17 ( & STRUCT_OR_UNION_11 -> VAR_136 ) ; } METHOD_18 ( & VAR_137 -> VAR_138 , VAR_139 ) ; if ( METHOD_19 ( VAR_140 , VAR_141 ) || METHOD_20 ( VAR_142 , VAR_143 ) || METHOD_21 ( VAR_144 , VAR_145 ) || METHOD_22 ( VAR_146 , VAR_147 ) ) VAR_148 -> VAR_149 = VAR_150 ; if ( METHOD_23 ( VAR_151 , VAR_152 ) ) VAR_153 -> VAR_154 = VAR_155 ; if ( METHOD_24 ( VAR_156 , VAR_157 ) || METHOD_25 ( VAR_158 , VAR_159 ) ) VAR_160 -> VAR_161 = sizeof ( struct STRUCT_OR_UNION_12 ) ; else VAR_162 -> VAR_163 = sizeof ( struct STRUCT_OR_UNION_13 ) ; if ( METHOD_26 ( VAR_164 , VAR_165 ) || METHOD_27 ( VAR_166 , VAR_167 ) ) VAR_168 -> VAR_169 = VAR_170 ; if ( METHOD_28 ( VAR_171 , VAR_172 ) ) VAR_173 -> VAR_174 = VAR_175 ; if ( VAR_176 -> VAR_177 ) VAR_178 -> VAR_179 = VAR_180 -> VAR_181 ; VAR_182 -> VAR_183 = 1 ; VAR_184 -> VAR_185 = VAR_186 ; TYPE_9 = METHOD_29 ( VAR_187 ) ; if ( TYPE_10 ) goto VAR_188 ; TYPE_11 TYPE_12 if ( VAR_189 -> VAR_190 ) VAR_191 -> VAR_192 = & VAR_193 ; METHOD_30 ( VAR_194 , VAR_195 -> VAR_196 ) ; METHOD_31 ( VAR_197 , VAR_198 -> VAR_199 ) ; TYPE_13 = METHOD_32 ( VAR_200 ) ; if ( TYPE_14 ) { METHOD_33 ( "virtio_net:registeringdevicefailed\\n" ) ; goto VAR_201 ; } METHOD_34 ( VAR_202 ) ; for ( VAR_203 = 0 ; VAR_204 < VAR_205 -> VAR_206 ; VAR_207 ++ ) { METHOD_35 ( VAR_208 , & VAR_209 -> VAR_210 [ VAR_211 ] , VAR_212 ) ; if ( VAR_213 -> VAR_214 [ VAR_215 ] . VAR_216 -> VAR_217 == METHOD_36 ( VAR_218 -> VAR_219 [ VAR_220 ] . VAR_221 ) ) { METHOD_37 ( VAR_222 ) ; TYPE_15 = - VAR_223 ; goto VAR_224 ; } } VAR_225 -> VAR_226 . VAR_227 = & VAR_228 ; TYPE_16 = METHOD_38 ( & VAR_229 -> VAR_230 ) ; if ( TYPE_17 ) { METHOD_39 ( "virtio_net:registeringcpunotifierfailed\\n" ) ; goto VAR_231 ; } if ( METHOD_40 ( VAR_232 -> VAR_233 , VAR_234 ) ) { METHOD_41 ( VAR_235 ) ; METHOD_42 ( & VAR_236 -> VAR_237 ) ; } else { VAR_238 -> VAR_239 = VAR_240 ; METHOD_43 ( VAR_241 ) ; } METHOD_44 ( "virtnet:registereddevice%swith%dRXandTXvq\'s\\n" , VAR_242 -> VAR_243 , VAR_244 ) ; return 0 ; VAR_245 : VAR_246 -> VAR_247 -> VAR_248 -> METHOD_45 ( VAR_249 ) ; METHOD_46 ( VAR_250 ) ; METHOD_47 ( VAR_251 ) ; VAR_252 : METHOD_48 ( & VAR_253 -> VAR_254 ) ; METHOD_49 ( VAR_255 ) ; METHOD_50 ( VAR_256 ) ; VAR_257 : METHOD_51 ( VAR_258 -> VAR_259 ) ; VAR_260 : METHOD_52 ( VAR_261 ) ; return TYPE_18 ; }
TYPE_0 struct STRUCT_OR_UNION_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 ; if ( VAR_5 == VAR_6 ) VAR_7 = VAR_8 "/share/libmysofa/default.sofa" ; if ( METHOD_1 ( VAR_9 , "-" ) ) VAR_10 . VAR_11 = METHOD_2 ( VAR_12 , "rb" ) ; else VAR_13 . VAR_14 = VAR_15 ; if ( ! VAR_16 . VAR_17 ) { METHOD_3 ( "cannotopenfile%s\\n" , VAR_18 ) ; * VAR_19 = VAR_20 ; return VAR_21 ; } VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 ;  * VAR_28 = METHOD_4 ( & VAR_29 , & VAR_30 . VAR_31 ) ;  if ( ! * VAR_32 ) { VAR_33 = METHOD_5 ( & VAR_34 , VAR_35 ) ; } METHOD_6 ( & VAR_36 , & VAR_37 . VAR_38 ) ; METHOD_7 ( VAR_39 . VAR_40 ) ; if ( METHOD_8 ( VAR_41 , "-" ) ) METHOD_9 ( VAR_42 . VAR_43 ) ; return VAR_44 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 0x01 VAR_3 0x02 VAR_4 0x03 VAR_5 0x05 VAR_6 0x06 VAR_7 0x07 TYPE_3 VAR_8 [ 12 ] ; TYPE_4 * VAR_9 ; TYPE_5 VAR_10 , VAR_11 , VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 * VAR_15 ; TYPE_9 VAR_16 ; register TYPE_10 VAR_17 ; register TYPE_11 * VAR_18 ; register TYPE_12 VAR_19 ; register unsigned TYPE_13 * VAR_20 ; TYPE_14 VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_15 VAR_28 , VAR_29 , VAR_30 ; unsigned TYPE_16 VAR_31 [ 256 ] , * VAR_32 , VAR_33 , VAR_34 , * VAR_35 ; METHOD_1 ( VAR_36 != ( const TYPE_17 * ) VAR_37 ) ; METHOD_2 ( VAR_38 -> VAR_39 == VAR_40 ) ; if ( VAR_41 -> VAR_42 != VAR_43 ) ( TYPE_18 ) METHOD_3 ( VAR_44 , METHOD_4 ( ) , "%s" , VAR_45 -> VAR_46 ) ; METHOD_5 ( VAR_47 != ( TYPE_19 * ) VAR_48 ) ; METHOD_6 ( VAR_49 -> VAR_50 == VAR_51 ) ; VAR_52 = METHOD_7 ( VAR_53 , VAR_54 ) ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ; if ( VAR_60 == VAR_61 ) return ( METHOD_9 ( VAR_62 ) ) ; VAR_63 = METHOD_10 ( VAR_64 , 2 , ( unsigned TYPE_20 * ) VAR_65 ) ; if ( ( VAR_66 != 2 ) || ( METHOD_11 ( VAR_67 , "\\122\\314" , 2 ) != 0 ) ) METHOD_12 ( VAR_68 , "ImproperImageHeader" ) ; do { VAR_69 -> VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 -> VAR_74 . VAR_75 = METHOD_14 ( VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_15 ( VAR_79 ) ; VAR_80 -> VAR_81 = METHOD_16 ( VAR_82 ) ; VAR_83 = ( TYPE_21 ) METHOD_17 ( VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 & 0x04 ? VAR_88 : VAR_89 ; VAR_90 = ( TYPE_22 ) METHOD_18 ( VAR_91 ) ; VAR_92 = ( TYPE_23 ) METHOD_19 ( VAR_93 ) ; VAR_94 = ( TYPE_24 ) METHOD_20 ( VAR_95 ) ; VAR_96 = ( unsigned TYPE_25 ) METHOD_21 ( VAR_97 ) ; if ( VAR_98 >= 22 ) METHOD_22 ( VAR_99 , "ImproperImageHeader" ) ; VAR_100 = 1 ; VAR_101 = VAR_102 << VAR_103 ; if ( ( VAR_104 == 0 ) || ( VAR_105 == 2 ) || ( ( VAR_106 & 0x04 ) && ( VAR_107 > 254 ) ) || ( VAR_108 != 8 ) || ( VAR_109 -> VAR_110 == 0 ) ) METHOD_23 ( VAR_111 , "ImproperImageHeader" ) ; if ( VAR_112 & 0x02 ) { for ( VAR_113 = 0 ; VAR_114 < ( TYPE_26 ) VAR_115 ; VAR_116 ++ ) VAR_117 [ VAR_118 ] = 0 ; ( TYPE_27 ) METHOD_24 ( VAR_119 ) ; } else { VAR_120 = VAR_121 ; for ( VAR_122 = 0 ; VAR_123 < ( TYPE_28 ) VAR_124 ; VAR_125 ++ ) * VAR_126 ++ = ( unsigned TYPE_29 ) METHOD_25 ( VAR_127 ) ; } if ( ( VAR_128 & 0x01 ) == 0 ) ( TYPE_30 ) METHOD_26 ( VAR_129 ) ; if ( METHOD_27 ( VAR_130 ) != VAR_131 ) { METHOD_28 ( VAR_132 , VAR_133 , "UnexpectedEndOfFile" , VAR_134 -> VAR_135 ) ; break ; } VAR_136 = ( unsigned TYPE_31 * ) VAR_137 ; if ( VAR_138 != 0 ) { VAR_139 = ( unsigned TYPE_32 * ) METHOD_29 ( VAR_140 , 3 * VAR_141 * sizeof ( * VAR_142 ) ) ; if ( VAR_143 == ( unsigned TYPE_33 * ) VAR_144 ) METHOD_30 ( VAR_145 , "MemoryAllocationFailed" ) ; VAR_146 = VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < ( TYPE_34 ) VAR_150 ; VAR_151 ++ ) for ( VAR_152 = 0 ; VAR_153 < ( TYPE_35 ) VAR_154 ; VAR_155 ++ ) * VAR_156 ++ = ( unsigned TYPE_36 ) METHOD_31 ( METHOD_32 ( VAR_157 ) ) ; } if ( ( VAR_158 & 0x08 ) != 0 ) { TYPE_37 * VAR_159 ; TYPE_38 VAR_160 ; VAR_161 = METHOD_33 ( VAR_162 ) ; if ( VAR_163 != 0 ) { VAR_164 = ( TYPE_39 * ) METHOD_34 ( VAR_165 , sizeof ( * VAR_166 ) ) ; if ( VAR_167 == ( TYPE_40 * ) VAR_168 ) METHOD_35 ( VAR_169 , "MemoryAllocationFailed" ) ; VAR_170 = METHOD_36 ( VAR_171 , VAR_172 - 1 , ( unsigned TYPE_41 * ) VAR_173 ) ; VAR_174 [ VAR_175 - 1 ] = '\\0' ; ( TYPE_42 ) METHOD_37 ( VAR_176 , "comment" , VAR_177 , VAR_178 ) ; VAR_179 = METHOD_38 ( VAR_180 ) ; if ( ( VAR_181 & 0x01 ) == 0 ) ( TYPE_43 ) METHOD_39 ( VAR_182 ) ; } } if ( METHOD_40 ( VAR_183 ) != VAR_184 ) { METHOD_41 ( VAR_185 , VAR_186 , "UnexpectedEndOfFile" , VAR_187 -> VAR_188 ) ; break ; } if ( ( VAR_189 -> VAR_190 != VAR_191 ) && ( VAR_192 -> VAR_193 != 0 ) ) if ( VAR_194 -> VAR_195 >= ( VAR_196 -> VAR_197 + VAR_198 -> VAR_199 - 1 ) ) break ; VAR_200 = METHOD_42 ( VAR_201 , VAR_202 -> VAR_203 , VAR_204 -> VAR_205 , VAR_206 ) ; if ( VAR_207 == VAR_208 ) return ( METHOD_43 ( VAR_209 ) ) ; if ( VAR_210 -> VAR_211 != VAR_212 ) VAR_213 ++ ; VAR_214 = ( TYPE_44 ) VAR_215 -> VAR_216 * VAR_217 -> VAR_218 ; VAR_219 = ( VAR_220 % 2 == 0 ) ? VAR_221 : VAR_222 + 1 ; if ( ( VAR_223 * VAR_224 ) != ( TYPE_45 ) ( VAR_225 * VAR_226 ) ) METHOD_44 ( VAR_227 , "MemoryAllocationFailed" ) ; VAR_228 = METHOD_45 ( VAR_229 -> VAR_230 , VAR_231 -> VAR_232 * METHOD_46 ( VAR_233 , 4 ) * sizeof ( * VAR_234 ) ) ; if ( VAR_235 == ( TYPE_46 * ) VAR_236 ) METHOD_47 ( VAR_237 , "MemoryAllocationFailed" ) ; VAR_238 = VAR_239 -> VAR_240 * VAR_241 -> VAR_242 * METHOD_48 ( VAR_243 , 4 ) ; VAR_244 = ( unsigned TYPE_47 * ) METHOD_49 ( VAR_245 ) ;  if ( ( VAR_246 & 0x01 ) && ! ( VAR_247 & 0x02 ) )  { TYPE_48 VAR_248 ; VAR_249 = VAR_250 ; for ( VAR_251 = 0 ; VAR_252 < ( TYPE_49 ) VAR_253 ; VAR_254 ++ ) { if ( VAR_255 -> VAR_256 == VAR_257 ) for ( VAR_258 = 0 ; VAR_259 < ( TYPE_50 ) VAR_260 ; VAR_261 ++ ) * VAR_262 ++ = VAR_263 [ VAR_264 ] ; else { for ( VAR_265 = 0 ; VAR_266 < ( TYPE_51 ) ( VAR_267 - 1 ) ; VAR_268 ++ ) * VAR_269 ++ = VAR_270 [ VAR_271 ] ; * VAR_272 ++ = 0 ; } } } VAR_273 = 0 ; VAR_274 = 0 ; VAR_275 = 0 ; VAR_276 = METHOD_50 ( VAR_277 ) ; do { switch ( VAR_278 & 0x3f ) { case VAR_279 : { VAR_280 = METHOD_51 ( VAR_281 ) ; if ( VAR_282 & 0x40 ) VAR_283 = METHOD_52 ( VAR_284 ) ; VAR_285 = 0 ; VAR_286 += VAR_287 ; break ; } case VAR_288 : { VAR_289 = METHOD_53 ( VAR_290 ) ; VAR_291 = ( unsigned TYPE_52 ) VAR_292 ; if ( VAR_293 == 255 ) VAR_294 = ( unsigned TYPE_53 ) ( VAR_295 - 1 ) ; VAR_296 = 0 ; break ; } case VAR_297 : { VAR_298 = METHOD_54 ( VAR_299 ) ; if ( VAR_300 & 0x40 ) VAR_301 = METHOD_55 ( VAR_302 ) ; VAR_303 += VAR_304 ; break ; } case VAR_305 : { VAR_306 = METHOD_56 ( VAR_307 ) ; if ( VAR_308 & 0x40 ) VAR_309 = METHOD_57 ( VAR_310 ) ; VAR_311 = ( ( VAR_312 -> VAR_313 - VAR_314 - 1 ) * VAR_315 -> VAR_316 * VAR_317 ) + VAR_318 * VAR_319 + VAR_320 ; VAR_321 ++ ; if ( ( VAR_322 < 0 ) || ( VAR_323 + ( ( TYPE_54 ) VAR_324 * VAR_325 ) > VAR_326 ) ) { if ( VAR_327 != 0 ) VAR_328 = ( unsigned TYPE_55 * ) METHOD_58 ( VAR_329 ) ; VAR_330 = METHOD_59 ( VAR_331 ) ; METHOD_60 ( VAR_332 , "UnableToReadImageData" ) ; } VAR_333 = VAR_334 + VAR_335 ; for ( VAR_336 = 0 ; VAR_337 < ( TYPE_56 ) VAR_338 ; VAR_339 ++ ) { VAR_340 = ( unsigned TYPE_57 ) METHOD_61 ( VAR_341 ) ; if ( ( VAR_342 < ( TYPE_58 ) VAR_343 -> VAR_344 ) && ( ( VAR_345 + VAR_346 ) < ( TYPE_59 ) VAR_347 -> VAR_348 ) ) * VAR_349 = VAR_350 ; VAR_351 += VAR_352 ; } if ( VAR_353 & 0x01 ) ( TYPE_60 ) METHOD_62 ( VAR_354 ) ; VAR_355 += VAR_356 ; break ; } case VAR_357 : { VAR_358 = METHOD_63 ( VAR_359 ) ; if ( VAR_360 & 0x40 ) VAR_361 = METHOD_64 ( VAR_362 ) ; VAR_363 = ( unsigned TYPE_61 ) METHOD_65 ( VAR_364 ) ; ( TYPE_62 ) METHOD_66 ( VAR_365 ) ; VAR_366 = ( ( VAR_367 -> VAR_368 - VAR_369 - 1 ) * VAR_370 -> VAR_371 * VAR_372 ) + VAR_373 * VAR_374 + VAR_375 ; VAR_376 ++ ; if ( ( VAR_377 < 0 ) || ( VAR_378 + ( ( TYPE_63 ) VAR_379 * VAR_380 ) > VAR_381 ) ) { if ( VAR_382 != 0 ) VAR_383 = ( unsigned TYPE_64 * ) METHOD_67 ( VAR_384 ) ; VAR_385 = METHOD_68 ( VAR_386 ) ; METHOD_69 ( VAR_387 , "UnableToReadImageData" ) ; } VAR_388 = VAR_389 + VAR_390 ; for ( VAR_391 = 0 ; VAR_392 < ( TYPE_65 ) VAR_393 ; VAR_394 ++ ) { if ( ( VAR_395 < ( TYPE_66 ) VAR_396 -> VAR_397 ) && ( ( VAR_398 + VAR_399 ) < ( TYPE_67 ) VAR_400 -> VAR_401 ) ) * VAR_402 = VAR_403 ; VAR_404 += VAR_405 ; } VAR_406 += VAR_407 ; break ; } default : break ; } VAR_408 = METHOD_70 ( VAR_409 ) ; } while ( ( ( VAR_410 & 0x3f ) != VAR_411 ) && ( VAR_412 != VAR_413 ) ) ; if ( VAR_414 != 0 ) { TYPE_68 VAR_415 ; VAR_416 = ( TYPE_69 ) ( VAR_417 - 1 ) ; VAR_418 = VAR_419 ; VAR_420 = ( TYPE_70 ) VAR_421 ; if ( VAR_422 == 1 ) for ( VAR_423 = 0 ; VAR_424 < ( TYPE_71 ) VAR_425 ; VAR_426 ++ ) { METHOD_71 ( VAR_427 , * VAR_428 & VAR_429 , & VAR_430 , VAR_431 ) ; * VAR_432 = VAR_433 [ ( TYPE_72 ) VAR_434 ] ; VAR_435 ++ ; } else if ( ( VAR_436 >= 3 ) && ( VAR_437 >= 3 ) ) for ( VAR_438 = 0 ; VAR_439 < ( TYPE_73 ) VAR_440 ; VAR_441 ++ ) for ( VAR_442 = 0 ; VAR_443 < ( TYPE_74 ) VAR_444 ; VAR_445 ++ ) { METHOD_72 ( VAR_446 , ( TYPE_75 ) ( VAR_447 * VAR_448 + ( * VAR_449 & VAR_450 ) ) , & VAR_451 , VAR_452 ) ; * VAR_453 = VAR_454 [ ( TYPE_76 ) VAR_455 ] ; VAR_456 ++ ; } if ( ( VAR_457 < ( TYPE_77 ) VAR_458 ) || ( VAR_459 < ( TYPE_78 ) VAR_460 ) ) { VAR_461 = ( unsigned TYPE_79 * ) METHOD_73 ( VAR_462 ) ; VAR_463 = METHOD_74 ( VAR_464 ) ; METHOD_75 ( VAR_465 , "UnableToReadImageData" ) ; } } if ( VAR_466 >= 3 ) { VAR_467 = VAR_468 ; for ( VAR_469 = 0 ; VAR_470 < ( TYPE_80 ) VAR_471 -> VAR_472 ; VAR_473 ++ ) { VAR_474 = METHOD_76 ( VAR_475 , 0 , VAR_476 , VAR_477 -> VAR_478 , 1 , VAR_479 ) ; if ( VAR_480 == ( TYPE_81 * ) VAR_481 ) break ; for ( VAR_482 = 0 ; VAR_483 < ( TYPE_82 ) VAR_484 -> VAR_485 ; VAR_486 ++ ) { METHOD_77 ( VAR_487 , METHOD_78 ( * VAR_488 ++ ) , VAR_489 ) ; METHOD_79 ( VAR_490 , METHOD_80 ( * VAR_491 ++ ) , VAR_492 ) ; METHOD_81 ( VAR_493 , METHOD_82 ( * VAR_494 ++ ) , VAR_495 ) ; if ( VAR_496 -> VAR_497 != VAR_498 ) METHOD_83 ( VAR_499 , METHOD_84 ( * VAR_500 ++ ) , VAR_501 ) ; VAR_502 += METHOD_85 ( VAR_503 ) ; } if ( METHOD_86 ( VAR_504 , VAR_505 ) == VAR_506 ) break ; if ( VAR_507 -> VAR_508 == ( TYPE_83 * ) VAR_509 ) { VAR_510 = METHOD_87 ( VAR_511 , VAR_512 , ( TYPE_84 ) VAR_513 , VAR_514 -> VAR_515 ) ; if ( VAR_516 == VAR_517 ) break ; } } } else { if ( VAR_518 == 0 ) VAR_519 = 256 ; if ( METHOD_88 ( VAR_520 , VAR_521 , VAR_522 ) == VAR_523 ) METHOD_89 ( VAR_524 , "MemoryAllocationFailed" ) ; VAR_525 = VAR_526 ; if ( VAR_527 == 1 ) for ( VAR_528 = 0 ; VAR_529 < ( TYPE_85 ) VAR_530 -> VAR_531 ; VAR_532 ++ ) { VAR_533 -> VAR_534 [ VAR_535 ] . VAR_536 = ( TYPE_86 ) METHOD_90 ( ( unsigned TYPE_87 ) VAR_537 ) ; VAR_538 -> VAR_539 [ VAR_540 ] . VAR_541 = ( TYPE_88 ) METHOD_91 ( ( unsigned TYPE_89 ) VAR_542 ) ; VAR_543 -> VAR_544 [ VAR_545 ] . VAR_546 = ( TYPE_90 ) METHOD_92 ( ( unsigned TYPE_91 ) VAR_547 ) ; } else if ( VAR_548 > 1 ) for ( VAR_549 = 0 ; VAR_550 < ( TYPE_92 ) VAR_551 -> VAR_552 ; VAR_553 ++ ) { VAR_554 -> VAR_555 [ VAR_556 ] . VAR_557 = ( TYPE_93 ) METHOD_93 ( * VAR_558 ) ; VAR_559 -> VAR_560 [ VAR_561 ] . VAR_562 = ( TYPE_94 ) METHOD_94 ( * ( VAR_563 + VAR_564 ) ) ; VAR_565 -> VAR_566 [ VAR_567 ] . VAR_568 = ( TYPE_95 ) METHOD_95 ( * ( VAR_569 + VAR_570 * 2 ) ) ; VAR_571 ++ ; } VAR_572 = VAR_573 ; if ( VAR_574 -> VAR_575 == VAR_576 ) { for ( VAR_577 = 0 ; VAR_578 < ( TYPE_96 ) VAR_579 -> VAR_580 ; VAR_581 ++ ) { VAR_582 = METHOD_96 ( VAR_583 , 0 , VAR_584 , VAR_585 -> VAR_586 , 1 , VAR_587 ) ; if ( VAR_588 == ( TYPE_97 * ) VAR_589 ) break ; for ( VAR_590 = 0 ; VAR_591 < ( TYPE_98 ) VAR_592 -> VAR_593 ; VAR_594 ++ ) { METHOD_97 ( VAR_595 , * VAR_596 ++ , VAR_597 ) ; VAR_598 += METHOD_98 ( VAR_599 ) ; } if ( METHOD_99 ( VAR_600 , VAR_601 ) == VAR_602 ) break ; if ( VAR_603 -> VAR_604 == ( TYPE_99 * ) VAR_605 ) { VAR_606 = METHOD_100 ( VAR_607 , VAR_608 , ( TYPE_100 ) VAR_609 , VAR_610 -> VAR_611 ) ; if ( VAR_612 == VAR_613 ) break ; } } ( TYPE_101 ) METHOD_101 ( VAR_614 , VAR_615 ) ; } else { for ( VAR_616 = 0 ; VAR_617 < ( TYPE_102 ) VAR_618 -> VAR_619 ; VAR_620 ++ ) { VAR_621 = METHOD_102 ( VAR_622 , 0 , VAR_623 , VAR_624 -> VAR_625 , 1 , VAR_626 ) ; if ( VAR_627 == ( TYPE_103 * ) VAR_628 ) break ; for ( VAR_629 = 0 ; VAR_630 < ( TYPE_104 ) VAR_631 -> VAR_632 ; VAR_633 ++ ) { METHOD_103 ( VAR_634 , ( TYPE_105 ) * VAR_635 ++ , & VAR_636 , VAR_637 ) ; METHOD_104 ( VAR_638 , METHOD_105 ( VAR_639 -> VAR_640 [ ( TYPE_106 ) VAR_641 ] . VAR_642 ) , VAR_643 ) ; METHOD_106 ( VAR_644 , ( TYPE_107 ) * VAR_645 ++ , & VAR_646 , VAR_647 ) ; METHOD_107 ( VAR_648 , METHOD_108 ( VAR_649 -> VAR_650 [ ( TYPE_108 ) VAR_651 ] . VAR_652 ) , VAR_653 ) ; METHOD_109 ( VAR_654 , ( TYPE_109 ) * VAR_655 ++ , & VAR_656 , VAR_657 ) ; METHOD_110 ( VAR_658 , METHOD_111 ( VAR_659 -> VAR_660 [ ( TYPE_110 ) VAR_661 ] . VAR_662 ) , VAR_663 ) ; METHOD_112 ( VAR_664 , METHOD_113 ( * VAR_665 ++ ) , VAR_666 ) ; VAR_667 += METHOD_114 ( VAR_668 ) ; } if ( VAR_669 < ( TYPE_111 ) VAR_670 -> VAR_671 ) break ; if ( METHOD_115 ( VAR_672 , VAR_673 ) == VAR_674 ) break ; if ( VAR_675 -> VAR_676 == ( TYPE_112 * ) VAR_677 ) { VAR_678 = METHOD_116 ( VAR_679 , VAR_680 , ( TYPE_113 ) VAR_681 , VAR_682 -> VAR_683 ) ; if ( VAR_684 == VAR_685 ) break ; } } VAR_686 -> VAR_687 = ( TYPE_114 * ) METHOD_117 ( VAR_688 -> VAR_689 ) ; VAR_690 -> VAR_691 = VAR_692 ; VAR_693 -> VAR_694 = 0 ; } } if ( VAR_695 != 0 ) VAR_696 = ( unsigned TYPE_115 * ) METHOD_118 ( VAR_697 ) ; VAR_698 = METHOD_119 ( VAR_699 ) ; if ( METHOD_120 ( VAR_700 ) != VAR_701 ) { METHOD_121 ( VAR_702 , VAR_703 , "UnexpectedEndOfFile" , VAR_704 -> VAR_705 ) ; break ; } if ( VAR_706 -> VAR_707 != 0 ) if ( VAR_708 -> VAR_709 >= ( VAR_710 -> VAR_711 + VAR_712 -> VAR_713 - 1 ) ) break ; ( TYPE_116 ) METHOD_122 ( VAR_714 ) ; VAR_715 = METHOD_123 ( VAR_716 , 2 , ( unsigned TYPE_117 * ) VAR_717 ) ; if ( ( VAR_718 != 0 ) && ( METHOD_124 ( VAR_719 , "\\122\\314" , 2 ) == 0 ) ) { METHOD_125 ( VAR_720 , VAR_721 , VAR_722 ) ; if ( METHOD_126 ( VAR_723 ) == ( TYPE_118 * ) VAR_724 ) { VAR_725 = METHOD_127 ( VAR_726 ) ; return ( ( TYPE_119 * ) VAR_727 ) ; } VAR_728 = METHOD_128 ( VAR_729 ) ; VAR_730 = METHOD_129 ( VAR_731 , VAR_732 , METHOD_130 ( VAR_733 ) , METHOD_131 ( VAR_734 ) ) ; if ( VAR_735 == VAR_736 ) break ; } } while ( ( VAR_737 != 0 ) && ( METHOD_132 ( VAR_738 , "\\122\\314" , 2 ) == 0 ) ) ; ( TYPE_120 ) METHOD_133 ( VAR_739 ) ; return ( METHOD_134 ( VAR_740 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { TYPE_5 * VAR_3 , VAR_4 [ sizeof ( "nnnnn\\0" ) ] ;  TYPE_6 VAR_5 ;   if ( METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) )  return - VAR_9 ; VAR_10 = METHOD_2 ( VAR_11 , & VAR_12 , 0 ) ; if ( ( * VAR_13 != '\\0' ) && ! METHOD_3 ( * VAR_14 ) ) return - VAR_15 ; VAR_16 = VAR_17 ; return VAR_18 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; METHOD_1 ( VAR_5 != VAR_6 ) ; if ( METHOD_2 ( VAR_7 , & VAR_8 , & VAR_9 ) < 0 ) return - 1 ; VAR_10 = METHOD_3 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( VAR_17 == VAR_18 ) { METHOD_4 ( "mmap(%d,R,PRIVATE,%d,%d)failed:%s\\n" , ( TYPE_6 ) VAR_19 , VAR_20 , ( TYPE_7 ) VAR_21 , METHOD_5 ( VAR_22 ) ) ; return - 1 ; } VAR_23 -> VAR_24 = VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = 1 ;  VAR_31 -> VAR_32 = METHOD_6 ( sizeof ( VAR_33 ) ) ;  VAR_34 -> VAR_35 [ 0 ] . VAR_36 = VAR_37 ; VAR_38 -> VAR_39 [ 0 ] . VAR_40 = VAR_41 ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; if ( VAR_8 -> VAR_9 != METHOD_1 ( VAR_10 ) ) return VAR_11 ; if ( VAR_12 -> VAR_13 >= 3 ) { if ( ! METHOD_2 ( & VAR_14 -> VAR_15 ) ) return VAR_16 ; if ( ! METHOD_3 ( ( TYPE_7 * ) VAR_17 , VAR_18 -> VAR_19 . VAR_20 , VAR_21 ) ) return VAR_22 ; if ( METHOD_4 ( VAR_23 -> VAR_24 ) != VAR_25 ) return VAR_26 ; if ( ! METHOD_5 ( & VAR_27 -> VAR_28 , & VAR_29 -> VAR_30 . VAR_31 ) ) return VAR_32 ; } VAR_33 = METHOD_6 ( VAR_34 -> VAR_35 ) ; if ( VAR_36 & ( 1ULL << 63 ) ) return VAR_37 ; VAR_38 = METHOD_7 ( VAR_39 -> VAR_40 ) ; if ( VAR_41 && METHOD_8 ( VAR_42 ) == VAR_43 ) return VAR_44 ; if ( ( METHOD_9 ( VAR_45 ) || METHOD_10 ( VAR_46 ) ) && VAR_47 == 0 ) return VAR_48 ; if ( VAR_49 && METHOD_11 ( VAR_50 -> VAR_51 ) + METHOD_12 ( VAR_52 -> VAR_53 ) > METHOD_13 ( VAR_54 -> VAR_55 ) ) return VAR_56 ; if ( VAR_57 && METHOD_14 ( VAR_58 ) > VAR_59 -> VAR_60 . VAR_61 ) return VAR_62 ; VAR_63 = METHOD_15 ( VAR_64 -> VAR_65 ) ; if ( VAR_66 && ( VAR_67 & VAR_68 ) && ! VAR_69 -> VAR_70 ) return VAR_71 ; switch ( VAR_72 & VAR_73 ) { case VAR_74 : case VAR_75 : case VAR_76 : case VAR_77 : if ( VAR_78 -> VAR_79 != VAR_80 ) return VAR_81 ; break ; case VAR_82 : case VAR_83 : case VAR_84 :  switch ( VAR_85 -> VAR_86 ) {  case VAR_87 : if ( METHOD_16 ( VAR_88 ) ) return VAR_89 ; if ( VAR_90 > METHOD_17 ( VAR_91 , VAR_92 ) ) return VAR_93 ; if ( VAR_94 -> VAR_95 ) return VAR_96 ; case VAR_97 : case VAR_98 : break ; default : return VAR_99 ; } break ; case 0 : break ; default : return VAR_100 ; } if ( METHOD_18 ( VAR_101 ) ) { switch ( VAR_102 -> VAR_103 ) { case VAR_104 : if ( VAR_105 -> VAR_106 ) return VAR_107 ; case VAR_108 : case VAR_109 : break ; default : return VAR_110 ; } } else { switch ( VAR_111 -> VAR_112 ) { case 0 : case VAR_113 : break ; default : return VAR_114 ; } if ( VAR_115 -> VAR_116 ) return VAR_117 ; } VAR_118 = METHOD_19 ( VAR_119 , METHOD_20 ( VAR_120 -> VAR_121 ) , VAR_122 , VAR_123 ) ; if ( VAR_124 ) return VAR_125 ; if ( VAR_126 -> VAR_127 < 3 ) return VAR_128 ; VAR_129 = METHOD_21 ( VAR_130 -> VAR_131 ) ; if ( ( VAR_132 & ( VAR_133 | VAR_134 ) ) && ! METHOD_22 ( & VAR_135 -> VAR_136 ) ) return VAR_137 ; if ( ( VAR_138 & VAR_139 ) && ( VAR_140 & VAR_141 ) != VAR_142 ) return VAR_143 ; if ( ( VAR_144 & VAR_145 ) && ( VAR_146 & VAR_147 ) ) return VAR_148 ; if ( ( VAR_149 & VAR_150 ) && ( VAR_151 & VAR_152 ) ) return VAR_153 ; VAR_154 = METHOD_23 ( VAR_155 , METHOD_24 ( VAR_156 -> VAR_157 ) , VAR_158 , VAR_159 , VAR_160 ) ; if ( VAR_161 ) return VAR_162 ; return VAR_163 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , unsigned VAR_2 , unsigned * VAR_3 ) { TYPE_3 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 * VAR_7 = & VAR_8 -> VAR_9 ; unsigned VAR_10 = VAR_11 -> VAR_12 ; unsigned VAR_13 , VAR_14 = 0 , VAR_15 = 0 , VAR_16 = 0 ; TYPE_5 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; if ( ( VAR_22 = VAR_23 -> METHOD_1 ( VAR_24 , VAR_25 , & VAR_26 ) ) < 0 ) return VAR_27 ; while ( VAR_28 < 16 ) { VAR_29 = VAR_30 -> VAR_31 [ VAR_32 ] ; if ( VAR_33 >= VAR_34 + VAR_35 ) VAR_36 += VAR_37 ; else break ; VAR_38 ++ ; } VAR_39 = VAR_40 * 16 ; VAR_41 = 0 ; while ( VAR_42 < 256 ) { VAR_43 = VAR_44 -> VAR_45 [ VAR_46 ] ; if ( VAR_47 >= VAR_48 + VAR_49 ) VAR_50 += VAR_51 ; else break ; VAR_52 ++ ; }  if ( ( VAR_53 = VAR_54 -> METHOD_2 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ) < 0 )  return VAR_60 ; VAR_61 -> VAR_62 [ VAR_63 ] = VAR_64 + VAR_65 ; VAR_66 -> VAR_67 [ VAR_68 ] = VAR_69 + VAR_70 ; VAR_71 += VAR_72 ; if ( VAR_73 > VAR_74 ) { VAR_75 = 0 ; for ( VAR_76 = 0 ; VAR_77 < 256 ; VAR_78 ++ ) { unsigned VAR_79 = ( VAR_80 -> VAR_81 [ VAR_82 ] >> 1 ) + 1 ; VAR_83 -> VAR_84 [ VAR_85 ] = VAR_86 ; VAR_87 += VAR_88 ; } for ( VAR_89 = 0 ; VAR_90 < 16 ; VAR_91 ++ ) { unsigned VAR_92 = 0 ; unsigned VAR_93 = VAR_94 << 4 ; for ( VAR_95 = 0 ; VAR_96 < 16 ; VAR_97 ++ ) VAR_98 += VAR_99 -> VAR_100 [ VAR_101 + VAR_102 ] ; VAR_103 -> VAR_104 [ VAR_105 ] = VAR_106 ; } } VAR_107 -> VAR_108 = VAR_109 ; * VAR_110 = VAR_111 & VAR_112 -> VAR_113 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; VAR_7 = 0 ; VAR_8 = 0 ; if ( ! ( VAR_9 = METHOD_1 ( ) ) ) { goto VAR_10 ; } VAR_11 -> VAR_12 = 0 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0 ; VAR_19 -> VAR_20 = 0 ; VAR_21 -> VAR_22 = 0 ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = - 1 ; VAR_27 -> VAR_28 = 0 ; if ( ! ( VAR_29 = METHOD_2 ( VAR_30 ) ) ) { goto VAR_31 ; } while ( ! ( VAR_32 = METHOD_3 ( VAR_33 ) ) ) { switch ( METHOD_4 ( METHOD_5 ( VAR_34 , METHOD_6 ( VAR_35 ) ) ) -> VAR_36 ) { case VAR_37 : VAR_38 -> VAR_39 = METHOD_7 ( METHOD_8 ( VAR_40 ) ) ; break ; case VAR_41 : VAR_42 -> VAR_43 = METHOD_9 ( METHOD_10 ( VAR_44 ) ) ; break ; case VAR_45 : VAR_46 -> VAR_47 = METHOD_11 ( METHOD_12 ( VAR_48 ) ) ; break ; case VAR_49 : VAR_50 -> VAR_51 = METHOD_13 ( METHOD_14 ( VAR_52 ) ) ; break ; case VAR_53 : VAR_54 -> VAR_55 = METHOD_15 ( METHOD_16 ( VAR_56 ) ) ; break ; case VAR_57 : VAR_58 -> VAR_59 = METHOD_17 ( METHOD_18 ( VAR_60 ) ) ; break ; case VAR_61 : VAR_62 -> VAR_63 = METHOD_19 ( METHOD_20 ( VAR_64 ) ) ; break ; case VAR_65 : VAR_66 -> VAR_67 = METHOD_21 ( METHOD_22 ( VAR_68 ) ) ; break ; case VAR_69 : if ( ! ( VAR_70 -> VAR_71 = METHOD_23 ( METHOD_24 ( VAR_72 ) ) ) ) { return - 1 ; } break ; } }  METHOD_25 ( VAR_73 ) ;  if ( ! VAR_74 -> VAR_75 || ! VAR_76 -> VAR_77 ) { goto VAR_78 ; } if ( METHOD_26 ( VAR_79 , VAR_80 -> VAR_81 , VAR_82 ) ) { goto VAR_83 ; }  return 0 ;  VAR_84 : if ( VAR_85 ) { METHOD_27 ( VAR_86 ) ; } if ( VAR_87 ) { METHOD_28 ( VAR_88 ) ; } return - 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 ) { TYPE_7 VAR_6 = VAR_7 ; if ( ! VAR_8 -> VAR_9 . VAR_10 ) return VAR_11 ; if ( VAR_12 ) VAR_13 = METHOD_1 ( VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) VAR_17 = METHOD_2 ( VAR_18 , & VAR_19 -> VAR_20 , & VAR_21 -> VAR_22 , 1 ) ; METHOD_3 ( VAR_23 , VAR_24 , VAR_25 ) ; METHOD_4 ( & VAR_26 -> VAR_27 ) ;  if ( ( ( VAR_28 & VAR_29 ) && ( VAR_30 & VAR_31 ) )  || ( ( VAR_32 & VAR_33 ) && ( VAR_34 & VAR_35 ) ) ) { VAR_36 -> VAR_37 . VAR_38 = "Conflictingflags." ; return VAR_39 ; } if ( VAR_40 & ( VAR_41 | VAR_42 | VAR_43 ) ) { TYPE_8 VAR_44 = 7 ; if ( VAR_45 & VAR_46 ) VAR_47 ^= VAR_48 ; if ( VAR_49 & VAR_50 ) VAR_51 ^= VAR_52 ; if ( VAR_53 & VAR_54 ) VAR_55 ^= VAR_56 ; METHOD_5 ( VAR_57 -> VAR_58 , VAR_59 ) ; } if ( VAR_60 & ( VAR_61 | VAR_62 | VAR_63 | VAR_64 | VAR_65 ) ) { TYPE_9 VAR_66 = 7 ; if ( VAR_67 & VAR_68 ) VAR_69 ^= VAR_70 ; if ( VAR_71 & VAR_72 ) VAR_73 ^= VAR_74 ; if ( VAR_75 & VAR_76 ) VAR_77 ^= VAR_78 ; METHOD_6 ( VAR_79 -> VAR_80 , VAR_81 ) ; } if ( VAR_82 & VAR_83 ) { METHOD_7 ( VAR_84 -> VAR_85 , 0 ) ; } if ( VAR_86 -> VAR_87 . VAR_88 == VAR_89 && VAR_90 -> VAR_91 . VAR_92 == VAR_93 -> VAR_94 . VAR_95 ) { if ( ++ VAR_96 -> VAR_97 > VAR_98 -> VAR_99 . VAR_100 ) { VAR_101 |= VAR_102 ; VAR_103 -> VAR_104 = 1 ; } } if ( ! VAR_105 && VAR_106 -> VAR_107 ) { unsigned TYPE_10 VAR_108 ; TYPE_11 VAR_109 ; TYPE_12 VAR_110 , VAR_111 ; unsigned TYPE_13 VAR_112 , VAR_113 ; unsigned TYPE_14 * VAR_114 ; unsigned TYPE_15 * VAR_115 ; TYPE_16 VAR_116 = 0 ; if ( VAR_117 -> VAR_118 . VAR_119 & VAR_120 ) ( ( TYPE_17 * ) VAR_121 -> VAR_122 ) -> VAR_123 = 1 ; if ( VAR_124 -> VAR_125 . VAR_126 & VAR_127 ) ( ( TYPE_18 * ) VAR_128 -> VAR_129 ) -> VAR_130 = 1 ; VAR_131 = ( VAR_132 & VAR_133 ) ? VAR_134 : 0 ; VAR_135 = VAR_136 * 10000000 * VAR_137 -> VAR_138 . VAR_139 . VAR_140 / VAR_141 -> VAR_142 . VAR_143 . VAR_144 ; VAR_145 = ( VAR_146 + VAR_147 ) * 10000000 * VAR_148 -> VAR_149 . VAR_150 . VAR_151 / VAR_152 -> VAR_153 . VAR_154 . VAR_155 ; if ( VAR_156 != VAR_157 ) { VAR_158 = METHOD_8 ( VAR_159 , & VAR_160 ) ; if ( METHOD_9 ( VAR_161 -> VAR_162 , VAR_163 -> VAR_164 | VAR_165 , & VAR_166 , VAR_167 , VAR_168 ) ) { TYPE_19 * VAR_169 = ( TYPE_20 * ) VAR_170 -> VAR_171 ; VAR_172 = METHOD_10 ( VAR_173 , & VAR_174 -> VAR_175 . VAR_176 ) ; } VAR_177 -> VAR_178 = 0 ; } VAR_179 = VAR_180 -> VAR_181 ; VAR_182 = VAR_183 -> VAR_184 ; VAR_185 = VAR_186 -> VAR_187 + VAR_188 ; VAR_189 = 0 ; while ( VAR_190 >= VAR_191 -> VAR_192 / 2 ) { VAR_193 = METHOD_11 ( VAR_194 -> VAR_195 , & VAR_196 , & VAR_197 , VAR_198 , VAR_199 , & VAR_200 , & VAR_201 , ! VAR_202 ) ; if ( VAR_203 == VAR_204 ) return VAR_205 ; else if ( VAR_206 == - 1 ) break ; if ( VAR_207 ) { TYPE_21 VAR_208 , VAR_209 ; TYPE_22 VAR_210 ; TYPE_23 * VAR_211 = ( TYPE_24 * ) VAR_212 -> VAR_213 ;  VAR_214 = ( TYPE_25 ) 1000000  * VAR_215 -> VAR_216 . VAR_217 . VAR_218 / 2 - 1 ; VAR_219 = ( VAR_220 - VAR_221 ) ; VAR_222 . VAR_223 = VAR_224 ; VAR_225 . VAR_226 . VAR_227 . VAR_228 = ( VAR_229 * VAR_230 -> VAR_231 . VAR_232 . VAR_233 + VAR_234 ) / VAR_235 -> VAR_236 . VAR_237 . VAR_238 / 10000000 ; VAR_239 . VAR_240 . VAR_241 . VAR_242 = ( unsigned TYPE_26 ) ( ( VAR_243 * VAR_244 -> VAR_245 . VAR_246 . VAR_247 + VAR_248 ) / VAR_249 -> VAR_250 . VAR_251 . VAR_252 / 10000000 ) ; VAR_253 . VAR_254 . VAR_255 . VAR_256 = VAR_257 << 16 ; if ( VAR_258 & VAR_259 ) VAR_260 . VAR_261 . VAR_262 . VAR_263 |= VAR_264 ; if ( ! VAR_265 -> VAR_266 . VAR_267 ) { VAR_268 . VAR_269 . VAR_270 . VAR_271 |= VAR_272 ; VAR_273 . VAR_274 . VAR_275 . VAR_276 = ( ( VAR_277 -> VAR_278 * VAR_279 -> VAR_280 . VAR_281 . VAR_282 + VAR_283 ) / VAR_284 -> VAR_285 . VAR_286 . VAR_287 / 10000000 ) + 1 ; VAR_288 . VAR_289 . VAR_290 . VAR_291 = 0 ; } if ( VAR_292 -> VAR_293 ) VAR_294 . VAR_295 . VAR_296 . VAR_297 |= VAR_298 ; if ( VAR_299 -> VAR_300 ) { TYPE_27 VAR_301 ; const TYPE_28 VAR_302 = ( 1 << VAR_303 -> VAR_304 . VAR_305 ) + 1 ; VAR_306 . VAR_307 . VAR_308 . VAR_309 |= VAR_310 ; for ( VAR_311 = 0 ; VAR_312 < VAR_313 ; ++ VAR_314 ) { if VAR_315 & VAR_316 VAR_317 . VAR_318 . VAR_319 . VAR_320 = VAR_321 -> VAR_322 [ VAR_323 ] ; else VAR_324 . VAR_325 . VAR_326 . VAR_327 = VAR_328 ; VAR_329 += VAR_330 -> VAR_331 [ VAR_332 ] ; VAR_333 -= VAR_334 -> VAR_335 [ VAR_336 ] ; VAR_337 . VAR_338 . VAR_339 . VAR_340 = VAR_341 -> VAR_342 [ VAR_343 ] ; VAR_344 . VAR_345 . VAR_346 . VAR_347 = VAR_348 ; if ( VAR_349 == ( VAR_350 - 1 ) ) VAR_351 . VAR_352 . VAR_353 . VAR_354 &= ~ VAR_355 ; METHOD_12 ( & VAR_356 -> VAR_357 . VAR_358 , & VAR_359 ) ; } if VAR_360 & VAR_361 VAR_362 -= VAR_363 -> VAR_364 / 2 ; } else { VAR_365 . VAR_366 . VAR_367 . VAR_368 = VAR_369 ; VAR_370 . VAR_371 . VAR_372 . VAR_373 = VAR_374 ; VAR_375 . VAR_376 . VAR_377 . VAR_378 = - 1 ; METHOD_13 ( & VAR_379 -> VAR_380 . VAR_381 , & VAR_382 ) ; VAR_383 += VAR_384 ; VAR_385 -= VAR_386 ; } } } } return VAR_387 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , "enter" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , "ImproperImageHeader" ) ; VAR_67 . VAR_68 = METHOD_17 ( VAR_69 ) ; if ( METHOD_18 ( VAR_70 , 2 , ( unsigned TYPE_35 * ) & VAR_71 . VAR_72 ) != 2 ) METHOD_19 ( VAR_73 , "ImproperImageHeader" ) ; if ( VAR_74 ) ( TYPE_36 ) METHOD_20 ( VAR_75 , METHOD_21 ( ) , "Endian%c%c" , VAR_76 . VAR_77 [ 0 ] , VAR_78 . VAR_79 [ 1 ] ) ; if ( ! METHOD_22 ( VAR_80 . VAR_81 , "IM" , 2 ) ) { METHOD_23 = VAR_82 ; METHOD_24 = METHOD_25 ; METHOD_26 = VAR_83 ; METHOD_27 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; } else if ( ! METHOD_28 ( VAR_88 . VAR_89 , "MI" , 2 ) ) { METHOD_29 = VAR_90 ; METHOD_30 = VAR_91 ; METHOD_31 = VAR_92 ; METHOD_32 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; } else goto VAR_97 ; if ( METHOD_33 ( VAR_98 . VAR_99 , "MATLAB" , 6 ) ) VAR_100 : METHOD_34 ( VAR_101 , "ImproperImageHeader" ) ; VAR_102 = METHOD_35 ( VAR_103 ) ; while ( ! METHOD_36 ( VAR_104 ) ) { VAR_105 = 1 ; ( TYPE_37 ) METHOD_37 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 . VAR_110 = METHOD_38 ( VAR_111 ) ; if ( METHOD_39 ( VAR_112 ) ) break ; VAR_113 . VAR_114 = METHOD_40 ( VAR_115 ) ; if ( METHOD_41 ( VAR_116 ) ) break ; VAR_117 += VAR_118 . VAR_119 + 4 + 4 ; VAR_120 = VAR_121 ; if d ( VAR_122 ) if ( VAR_123 . VAR_124 == VAR_125 ) { VAR_126 = METHOD_42 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 , VAR_131 ) ; if ( VAR_132 == VAR_133 ) continue ; VAR_134 . VAR_135 = METHOD_43 ( VAR_136 ) ; } if ( VAR_137 . VAR_138 != VAR_139 ) continue ; VAR_140 . VAR_141 = METHOD_44 ( VAR_142 ) ; VAR_143 . VAR_144 = METHOD_45 ( VAR_145 ) ; VAR_146 . VAR_147 = METHOD_46 ( VAR_148 ) ; VAR_149 . VAR_150 = VAR_151 . VAR_152 & 0xFF ; VAR_153 . VAR_154 = ( VAR_155 . VAR_156 >> 8 ) & 0xFF ; VAR_157 . VAR_158 = METHOD_47 ( VAR_159 ) ; if ( VAR_160 != VAR_161 ) VAR_162 . VAR_163 = METHOD_48 ( VAR_164 ) ; VAR_165 . VAR_166 = METHOD_49 ( VAR_167 ) ; VAR_168 . VAR_169 = METHOD_50 ( VAR_170 ) ; VAR_171 . VAR_172 = METHOD_51 ( VAR_173 ) ; VAR_174 . VAR_175 = METHOD_52 ( VAR_176 ) ; switch ( VAR_177 . VAR_178 ) { case 8 : VAR_179 = VAR_180 = 1 ; break ; case 12 : VAR_181 = VAR_182 = METHOD_53 ( VAR_183 ) ; ( TYPE_38 ) METHOD_54 ( VAR_184 ) ; if ( VAR_185 != 3 ) METHOD_55 ( VAR_186 , "MultidimensionalMatricesAreNotSupported" ) ; break ; case 16 : VAR_187 = VAR_188 = METHOD_56 ( VAR_189 ) ; if ( VAR_190 != 3 && VAR_191 != 1 ) METHOD_57 ( VAR_192 , "MultidimensionalMatricesAreNotSupported" ) ; VAR_193 = METHOD_58 ( VAR_194 ) ; break ; default : METHOD_59 ( VAR_195 , "MultidimensionalMatricesAreNotSupported" ) ; } VAR_196 . VAR_197 = METHOD_60 ( VAR_198 ) ; VAR_199 . VAR_200 = METHOD_61 ( VAR_201 ) ; if ( VAR_202 ) ( TYPE_39 ) METHOD_62 ( VAR_203 , METHOD_63 ( ) , "MATLAB_HDR.StructureClass%d" , VAR_204 . VAR_205 ) ; if ( VAR_206 . VAR_207 != VAR_208 && VAR_209 . VAR_210 != VAR_211 && VAR_212 . VAR_213 != VAR_214 && VAR_215 . VAR_216 != VAR_217 && VAR_218 . VAR_219 != VAR_220 && VAR_221 . VAR_222 != VAR_223 && VAR_224 . VAR_225 != VAR_226 && VAR_227 . VAR_228 != VAR_229 && VAR_230 . VAR_231 != VAR_232 && VAR_233 . VAR_234 != VAR_235 && VAR_236 . VAR_237 != VAR_238 ) METHOD_64 ( VAR_239 , "UnsupportedCellTypeInTheMatrix" ) ; switch ( VAR_240 . VAR_241 ) { case 0 : VAR_242 = METHOD_65 ( VAR_243 ) ; VAR_244 = 4 * ( TYPE_40 ) ( ( VAR_245 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_66 ( VAR_246 , VAR_247 , VAR_248 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_67 ( VAR_249 , 4 , ( unsigned TYPE_43 * ) & VAR_250 ) ; break ; default : goto VAR_251 ; } VAR_252 = METHOD_68 ( VAR_253 ) ; if ( VAR_254 ) ( TYPE_44 ) METHOD_69 ( VAR_255 , METHOD_70 ( ) , "MATLAB_HDR.CellType:%.20g" , ( TYPE_45 ) VAR_256 ) ; ( TYPE_46 ) METHOD_71 ( VAR_257 , 4 , ( unsigned TYPE_47 * ) & VAR_258 ) ; VAR_259 : switch ( VAR_260 ) { case VAR_261 : case VAR_262 : VAR_263 = 8 ; if ( VAR_264 . VAR_265 & VAR_266 ) VAR_267 -> VAR_268 = 1 ; else VAR_269 -> VAR_270 = 8 ; VAR_271 = ( TYPE_48 ) VAR_272 . VAR_273 ; break ; case VAR_274 : case VAR_275 : VAR_276 = 16 ; VAR_277 -> VAR_278 = 16 ; VAR_279 = ( TYPE_49 ) ( 2 * VAR_280 . VAR_281 ) ; break ; case VAR_282 : case VAR_283 : VAR_284 = 32 ; VAR_285 -> VAR_286 = 32 ; VAR_287 = ( TYPE_50 ) ( 4 * VAR_288 . VAR_289 ) ; break ; case VAR_290 : case VAR_291 : VAR_292 = 64 ; VAR_293 -> VAR_294 = 64 ; VAR_295 = ( TYPE_51 ) ( 8 * VAR_296 . VAR_297 ) ; break ; case VAR_298 : VAR_299 = 32 ; VAR_300 -> VAR_301 = 32 ; ( TYPE_52 ) METHOD_72 ( VAR_302 , "quantum:format" , "floating-point" ) ; if ( VAR_303 . VAR_304 & VAR_305 ) { } VAR_306 = ( TYPE_53 ) ( 4 * VAR_307 . VAR_308 ) ; break ; case VAR_309 : VAR_310 = 64 ; VAR_311 -> VAR_312 = 64 ; ( TYPE_54 ) METHOD_73 ( VAR_313 , "quantum:format" , "floating-point" ) ; METHOD_74 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_75 ( VAR_314 , "IncompatibleSizeOfDouble" ) ; if ( VAR_315 . VAR_316 & VAR_317 ) { } VAR_318 = ( TYPE_57 ) ( 8 * VAR_319 . VAR_320 ) ; break ; default : METHOD_76 ( VAR_321 , "UnsupportedCellTypeInTheMatrix" ) ; } ( TYPE_58 ) VAR_322 ; VAR_323 -> VAR_324 = VAR_325 . VAR_326 ; VAR_327 -> VAR_328 = VAR_329 . VAR_330 ; VAR_331 = METHOD_77 ( VAR_332 , VAR_333 ) ; if ( VAR_334 == ( TYPE_59 * ) VAR_335 ) METHOD_78 ( VAR_336 , "MemoryAllocationFailed" ) ; VAR_337 = 1 ; VAR_338 -> VAR_339 = VAR_340 << VAR_341 -> VAR_342 ; if ( VAR_343 -> VAR_344 == 0 || VAR_345 -> VAR_346 == 0 ) goto VAR_347 ; if ( ( VAR_348 . VAR_349 == 8 ) && ( ( VAR_350 . VAR_351 & VAR_352 ) == 0 ) ) { VAR_353 -> VAR_354 = VAR_355 ; METHOD_79 ( VAR_356 , VAR_357 , VAR_358 ) ; } if ( VAR_359 -> VAR_360 ) { TYPE_60 VAR_361 = VAR_362 -> VAR_363 ; VAR_364 -> VAR_365 = VAR_366 -> VAR_367 ; VAR_368 -> VAR_369 = VAR_370 ; goto VAR_371 ; } VAR_372 = METHOD_80 ( VAR_373 , VAR_374 -> VAR_375 , VAR_376 -> VAR_377 , VAR_378 ) ; if ( VAR_379 == VAR_380 ) return ( METHOD_81 ( VAR_381 ) ) ;  VAR_382 = ( unsigned TYPE_61 * ) METHOD_82 ( ( TYPE_62 ) ( VAR_383 ) , sizeof ( unsigned TYPE_63 ) ) ;  if ( VAR_384 == VAR_385 ) METHOD_83 ( VAR_386 , "MemoryAllocationFailed" ) ; VAR_387 = 0 ; VAR_388 = 0 ; if ( VAR_389 == VAR_390 || VAR_391 == VAR_392 ) { METHOD_84 ( VAR_393 , VAR_394 -> VAR_395 , VAR_396 . VAR_397 , VAR_398 . VAR_399 , VAR_400 , VAR_401 , VAR_402 , & VAR_403 -> VAR_404 , & VAR_405 -> VAR_406 ) ; } if ( VAR_407 == 1 ) VAR_408 = 0 ; do { for ( VAR_409 = 0 ; VAR_410 < ( TYPE_64 ) VAR_411 . VAR_412 ; VAR_413 ++ ) { VAR_414 = METHOD_85 ( VAR_415 , 0 , VAR_416 . VAR_417 - VAR_418 - 1 , VAR_419 -> VAR_420 , 1 , VAR_421 ) ; if ( VAR_422 == ( TYPE_65 * ) VAR_423 ) { if ( VAR_424 ) ( TYPE_66 ) METHOD_86 ( VAR_425 , METHOD_87 ( ) , "MATsetimagepixelsreturnsunexpectedNULLonarow%u." , ( unsigned ) ( VAR_426 . VAR_427 - VAR_428 - 1 ) ) ; goto VAR_429 ; } if ( METHOD_88 ( VAR_430 , VAR_431 , ( unsigned TYPE_67 * ) VAR_432 ) != ( TYPE_68 ) VAR_433 ) { if ( VAR_434 ) ( TYPE_69 ) METHOD_89 ( VAR_435 , METHOD_90 ( ) , "MATcannotreadscanrow%ufromafile." , ( unsigned ) ( VAR_436 . VAR_437 - VAR_438 - 1 ) ) ; goto VAR_439 ; } if ( ( VAR_440 == VAR_441 || VAR_442 == VAR_443 ) && ( VAR_444 . VAR_445 & VAR_446 ) ) { METHOD_91 ( ( unsigned TYPE_70 * ) VAR_447 , VAR_448 ) ; if ( METHOD_92 ( VAR_449 , ( TYPE_71 * ) VAR_450 , VAR_451 , VAR_452 [ VAR_453 ] , VAR_454 , VAR_455 ) <= 0 ) { VAR_456 : if ( VAR_457 ) ( TYPE_72 ) METHOD_93 ( VAR_458 , METHOD_94 ( ) , "MATfailedtoImportQuantumPixelsforarow%u" , ( unsigned ) ( VAR_459 . VAR_460 - VAR_461 - 1 ) ) ; break ; } } else { if ( METHOD_95 ( VAR_462 , ( TYPE_73 * ) VAR_463 , VAR_464 , VAR_465 [ VAR_466 ] , VAR_467 , VAR_468 ) <= 0 ) goto VAR_469 ; if ( VAR_470 <= 1 && ( VAR_471 == VAR_472 || VAR_473 == VAR_474 || VAR_475 == VAR_476 || VAR_477 == VAR_478 ) ) METHOD_96 ( VAR_479 , VAR_480 , VAR_481 . VAR_482 ) ; } if ( ! METHOD_97 ( VAR_483 , VAR_484 ) ) { if ( VAR_485 ) ( TYPE_74 ) METHOD_98 ( VAR_486 , METHOD_99 ( ) , "MATfailedtosyncimagepixelsforarow%u" , ( unsigned ) ( VAR_487 . VAR_488 - VAR_489 - 1 ) ) ; goto VAR_490 ; } } } while ( VAR_491 -- >= 2 ) ; VAR_492 : if ( VAR_493 . VAR_494 & VAR_495 ) { VAR_496 = METHOD_100 ( VAR_497 ) ; VAR_498 = METHOD_101 ( VAR_499 ) ; if ( VAR_500 == VAR_501 || VAR_502 == VAR_503 ) { METHOD_102 ( VAR_504 , VAR_505 -> VAR_506 , VAR_507 . VAR_508 , VAR_509 . VAR_510 , VAR_511 , VAR_512 , VAR_513 , & VAR_514 , & VAR_515 ) ; } if ( VAR_516 == VAR_517 ) for ( VAR_518 = 0 ; VAR_519 < ( TYPE_75 ) VAR_520 . VAR_521 ; VAR_522 ++ ) { METHOD_103 ( VAR_523 , VAR_524 , ( TYPE_76 * ) VAR_525 ) ; METHOD_104 ( VAR_526 , ( TYPE_77 * ) VAR_527 , VAR_528 , VAR_529 , VAR_530 , VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_78 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_105 ( VAR_539 , VAR_540 , ( TYPE_79 * ) VAR_541 ) ; METHOD_106 ( VAR_542 , ( TYPE_80 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } } if ( ( VAR_548 . VAR_549 == 8 ) && ( ( VAR_550 . VAR_551 & VAR_552 ) == 0 ) ) VAR_553 -> VAR_554 = VAR_555 ; if ( VAR_556 -> VAR_557 == 1 ) VAR_558 -> VAR_559 = VAR_560 ; if ( VAR_561 == VAR_562 ) VAR_563 = VAR_564 ; VAR_565 = METHOD_107 ( VAR_566 , 90.0 , VAR_567 ) ; if ( VAR_568 != ( TYPE_81 * ) VAR_569 ) { VAR_570 -> VAR_571 . VAR_572 = 0 ; VAR_573 -> VAR_574 . VAR_575 = 0 ; VAR_576 = VAR_577 -> VAR_578 ; VAR_579 -> VAR_580 = VAR_581 -> VAR_582 ; VAR_583 -> VAR_584 = VAR_585 -> VAR_586 ; VAR_587 -> VAR_588 = VAR_589 ; METHOD_108 ( & VAR_590 , VAR_591 ) ; METHOD_109 ( & VAR_592 ) ; } VAR_593 : if ( VAR_594 != VAR_595 ) if ( VAR_596 != VAR_597 ) { METHOD_110 ( & VAR_598 ) ; if ( VAR_599 ) { if ( VAR_600 -> VAR_601 ) { METHOD_111 ( VAR_602 -> VAR_603 ) ; VAR_604 -> VAR_605 = VAR_606 ; ( TYPE_82 ) METHOD_112 ( VAR_607 -> VAR_608 ) ; } } } METHOD_113 ( VAR_609 , VAR_610 , VAR_611 ) ; if ( VAR_612 -> VAR_613 == ( TYPE_83 * ) VAR_614 ) break ; VAR_615 = METHOD_114 ( VAR_616 ) ; VAR_617 -> VAR_618 = VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 = 0 ; METHOD_115 ( VAR_623 ) ; VAR_624 = VAR_625 ; if ( -- VAR_626 > 0 ) { VAR_627 = VAR_628 ; if ( VAR_629 == VAR_630 ) VAR_631 = VAR_632 ; goto VAR_633 ; } if ( ( VAR_634 != VAR_635 ) && ( VAR_636 != VAR_637 ) ) { METHOD_116 ( & VAR_638 ) ; if ( VAR_639 ) { if ( VAR_640 -> VAR_641 ) { METHOD_117 ( VAR_642 -> VAR_643 ) ; VAR_644 -> VAR_645 = VAR_646 ; ( TYPE_84 ) METHOD_118 ( VAR_647 -> VAR_648 ) ; } } } } VAR_649 = METHOD_119 ( VAR_650 ) ; METHOD_120 ( VAR_651 ) ; METHOD_121 ( VAR_652 ) ; { TYPE_85 * VAR_653 ; TYPE_86 VAR_654 = 0 ; VAR_655 = VAR_656 ; VAR_657 = VAR_658 ; while ( VAR_659 != ( TYPE_87 * ) VAR_660 ) { TYPE_88 * VAR_661 = VAR_662 ; if ( ( VAR_663 -> VAR_664 == 0 ) || ( VAR_665 -> VAR_666 == 0 ) ) { VAR_667 = VAR_668 -> VAR_669 ; METHOD_122 ( & VAR_670 ) ; } else { VAR_671 = VAR_672 ; VAR_673 = VAR_674 -> VAR_675 ; } } for ( VAR_676 = VAR_677 ; VAR_678 != ( TYPE_89 * ) VAR_679 ; VAR_680 = VAR_681 -> VAR_682 ) VAR_683 -> VAR_684 = VAR_685 ++ ; } if ( VAR_686 != VAR_687 ) { if ( VAR_688 -> VAR_689 ) { METHOD_123 ( VAR_690 -> VAR_691 ) ; VAR_692 -> VAR_693 = VAR_694 ; ( TYPE_90 ) METHOD_124 ( VAR_695 -> VAR_696 ) ; } METHOD_125 ( VAR_697 ) ; VAR_698 = VAR_699 ; } if ( VAR_700 ) ( TYPE_91 ) METHOD_126 ( VAR_701 , METHOD_127 ( ) , "return" ) ; if ( VAR_702 == VAR_703 ) METHOD_128 ( VAR_704 , "ImproperImageHeader" ) ; return ( VAR_705 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 )  { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 ; union { TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; } VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; const TYPE_12 * VAR_14 ; TYPE_13 VAR_15 [ VAR_16 + 100 ] ; TYPE_14 VAR_17 ; VAR_18 = VAR_19 ; VAR_20 = VAR_21 ; switch ( VAR_22 ) { case VAR_23 : if ( VAR_24 != 1 ) METHOD_1 ( ( VAR_25 , "invalidlen" ) ) ; else { METHOD_2 ( * VAR_26 ) ; METHOD_3 ( ( VAR_27 , "%s" , METHOD_4 ( VAR_28 , "UnknownOriginTypecode" , VAR_29 [ 0 ] ) ) ) ; } break ; case VAR_30 : case VAR_31 : if ( VAR_32 % 2 ) { METHOD_5 ( ( VAR_33 , "invalidlen" ) ) ; break ; } if ( ! VAR_34 ) { METHOD_6 ( ( VAR_35 , "empty" ) ) ; break ; } VAR_36 = METHOD_7 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; while ( VAR_41 < VAR_42 + VAR_43 ) { METHOD_8 ( VAR_44 [ 0 ] ) ; METHOD_9 ( ( VAR_45 , "%s" , METHOD_10 ( VAR_46 , "?" , VAR_47 [ 0 ] ) ) ) ; METHOD_11 ( VAR_48 [ 1 ] ) ; for ( VAR_49 = 0 ; VAR_50 < VAR_51 [ 1 ] * VAR_52 ; VAR_53 += VAR_54 ) { METHOD_12 ( VAR_55 [ 2 + VAR_56 ] , VAR_57 ) ; METHOD_13 ( ( VAR_58 , "%s" , METHOD_14 ( VAR_59 , VAR_60 , sizeof ( VAR_61 ) , VAR_62 == 2 ? METHOD_15 ( & VAR_63 [ 2 + VAR_64 ] ) : METHOD_16 ( & VAR_65 [ 2 + VAR_66 ] ) ) ) ) ; } METHOD_17 ( VAR_67 [ 0 ] ) ; METHOD_18 ( ( VAR_68 , "%s" , METHOD_19 ( VAR_69 , "?" , VAR_70 [ 0 ] ) ) ) ; METHOD_20 ( VAR_71 [ 1 ] ) ; VAR_72 += 2 + VAR_73 [ 1 ] * VAR_74 ; } break ; case VAR_75 : if ( VAR_76 != 4 ) METHOD_21 ( ( VAR_77 , "invalidlen" ) ) ; else { METHOD_22 ( VAR_78 [ 0 ] , 4 ) ; METHOD_23 ( ( VAR_79 , "%s" , METHOD_24 ( VAR_80 , VAR_81 ) ) ) ; } break ; case VAR_82 : case VAR_83 : if ( VAR_84 != 4 ) METHOD_25 ( ( VAR_85 , "invalidlen" ) ) ; else { METHOD_26 ( VAR_86 [ 0 ] , 4 ) ; METHOD_27 ( ( VAR_87 , "%u" , METHOD_28 ( VAR_88 ) ) ) ; } break ; case VAR_89 : if ( VAR_90 != 0 ) METHOD_29 ( ( VAR_91 , "invalidlen" ) ) ; break ; case VAR_92 : if ( VAR_93 != 6 && VAR_94 != 8 ) { METHOD_30 ( ( VAR_95 , "invalidlen" ) ) ; break ; } METHOD_31 ( VAR_96 [ 0 ] , VAR_97 ) ; if ( VAR_98 == 6 ) { METHOD_32 ( ( VAR_99 , "AS%s,origin%s" , METHOD_33 ( VAR_100 , VAR_101 , sizeof ( VAR_102 ) , METHOD_34 ( VAR_103 ) ) , METHOD_35 ( VAR_104 , VAR_105 + 2 ) ) ) ; } else { METHOD_36 ( ( VAR_106 , "AS%s,origin%s" , METHOD_37 ( VAR_107 , VAR_108 , sizeof ( VAR_109 ) , METHOD_38 ( VAR_110 ) ) , METHOD_39 ( VAR_111 , VAR_112 + 4 ) ) ) ; } break ; case VAR_113 : if ( VAR_114 != 8 ) { METHOD_40 ( ( VAR_115 , "invalidlen" ) ) ; break ; } METHOD_41 ( VAR_116 [ 0 ] , 8 ) ; METHOD_42 ( ( VAR_117 , "AS%s,origin%s" , METHOD_43 ( VAR_118 , VAR_119 , sizeof ( VAR_120 ) , METHOD_44 ( VAR_121 ) ) , METHOD_45 ( VAR_122 , VAR_123 + 4 ) ) ) ; break ; case VAR_124 : if ( VAR_125 % 4 ) { METHOD_46 ( ( VAR_126 , "invalidlen" ) ) ; break ; } while ( VAR_127 > 0 ) { TYPE_15 VAR_128 ; METHOD_47 ( VAR_129 [ 0 ] , 4 ) ; VAR_130 = METHOD_48 ( VAR_131 ) ; switch ( VAR_132 ) { case VAR_133 : METHOD_49 ( ( VAR_134 , "NO_EXPORT" ) ) ; break ; case VAR_135 : METHOD_50 ( ( VAR_136 , "NO_ADVERTISE" ) ) ; break ; case VAR_137 : METHOD_51 ( ( VAR_138 , "NO_EXPORT_SUBCONFED" ) ) ; break ; default : METHOD_52 ( ( VAR_139 , "%u:%u%s" , ( VAR_140 >> 16 ) & 0xffff , VAR_141 & 0xffff , ( VAR_142 > 4 ) ? "," : "" ) ) ; break ; } VAR_143 -= 4 ; VAR_144 += 4 ; } break ; case VAR_145 : if ( VAR_146 != 4 ) { METHOD_53 ( ( VAR_147 , "invalidlen" ) ) ; break ; } METHOD_54 ( VAR_148 [ 0 ] , 4 ) ; METHOD_55 ( ( VAR_149 , "%s" , METHOD_56 ( VAR_150 , VAR_151 ) ) ) ; break ; case VAR_152 : if ( VAR_153 % 4 ) { METHOD_57 ( ( VAR_154 , "invalidlen" ) ) ; break ; } while ( VAR_155 > 0 ) { METHOD_58 ( VAR_156 [ 0 ] , 4 ) ; METHOD_59 ( ( VAR_157 , "%s%s" , METHOD_60 ( VAR_158 , VAR_159 ) , ( VAR_160 > 4 ) ? "," : "" ) ) ; VAR_161 -= 4 ; VAR_162 += 4 ; } break ; case VAR_163 : METHOD_61 ( VAR_164 [ 0 ] , 3 ) ; VAR_165 = METHOD_62 ( VAR_166 ) ; VAR_167 = VAR_168 [ 2 ] ; METHOD_63 ( ( VAR_169 , "\\n\\tAFI:%s(%u),%sSAFI:%s(%u)" , METHOD_64 ( VAR_170 , "UnknownAFI" , VAR_171 ) , VAR_172 , ( VAR_173 > 128 ) ? "vendorspecific" : "" , METHOD_65 ( VAR_174 , "UnknownSAFI" , VAR_175 ) , VAR_176 ) ) ; switch ( VAR_177 << 8 | VAR_178 ) { case ( VAR_179 << 8 | VAR_180 ) : case ( VAR_181 << 8 | VAR_182 ) : case ( VAR_183 << 8 | VAR_184 ) : case ( VAR_185 << 8 | VAR_186 ) : case ( VAR_187 << 8 | VAR_188 ) : case ( VAR_189 << 8 | VAR_190 ) : case ( VAR_191 << 8 | VAR_192 ) : case ( VAR_193 << 8 | VAR_194 ) : case ( VAR_195 << 8 | VAR_196 ) : case ( VAR_197 << 8 | VAR_198 ) : case ( VAR_199 << 8 | VAR_200 ) : case ( VAR_201 << 8 | VAR_202 ) : case ( VAR_203 << 8 | VAR_204 ) : case ( VAR_205 << 8 | VAR_206 ) : case ( VAR_207 << 8 | VAR_208 ) : case ( VAR_209 << 8 | VAR_210 ) : case ( VAR_211 << 8 | VAR_212 ) : case ( VAR_213 << 8 | VAR_214 ) : case ( VAR_215 << 8 | VAR_216 ) : case ( VAR_217 << 8 | VAR_218 ) : case ( VAR_219 << 8 | VAR_220 ) : case ( VAR_221 << 8 | VAR_222 ) : case ( VAR_223 << 8 | VAR_224 ) : case ( VAR_225 << 8 | VAR_226 ) : case ( VAR_227 << 8 | VAR_228 ) : case ( VAR_229 << 8 | VAR_230 ) : case ( VAR_231 << 8 | VAR_232 ) : break ; default : METHOD_66 ( VAR_233 [ 0 ] , VAR_234 ) ; METHOD_67 ( ( VAR_235 , "\\n\\tnoAFI%u/SAFI%udecoder" , VAR_236 , VAR_237 ) ) ; if ( VAR_238 -> VAR_239 <= 1 ) METHOD_68 ( VAR_240 , VAR_241 , "\\n\\t" , VAR_242 ) ; goto VAR_243 ; break ; } VAR_244 += 3 ; METHOD_69 ( VAR_245 [ 0 ] ) ; VAR_246 = VAR_247 [ 0 ] ; VAR_248 = VAR_249 ; VAR_250 ++ ; if ( VAR_251 ) { TYPE_16 VAR_252 = 0 ; METHOD_70 ( ( VAR_253 , "\\n\\tnexthop:" ) ) ; while ( VAR_254 > 0 ) { if ( VAR_255 ++ > 0 ) { METHOD_71 ( ( VAR_256 , "," ) ) ; } switch ( VAR_257 << 8 | VAR_258 ) { case ( VAR_259 << 8 | VAR_260 ) : case ( VAR_261 << 8 | VAR_262 ) : case ( VAR_263 << 8 | VAR_264 ) : case ( VAR_265 << 8 | VAR_266 ) : case ( VAR_267 << 8 | VAR_268 ) : case ( VAR_269 << 8 | VAR_270 ) : case ( VAR_271 << 8 | VAR_272 ) : if ( VAR_273 < ( TYPE_17 ) sizeof ( struct STRUCT_OR_UNION_0 ) ) { METHOD_72 ( ( VAR_274 , "invalidlen" ) ) ; VAR_275 = 0 ; } else { METHOD_73 ( VAR_276 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_1 ) ) ; METHOD_74 ( ( VAR_277 , "%s" , METHOD_75 ( VAR_278 , VAR_279 ) ) ) ; VAR_280 -= sizeof ( struct STRUCT_OR_UNION_2 ) ; VAR_281 += sizeof ( struct STRUCT_OR_UNION_3 ) ; } break ; case ( VAR_282 << 8 | VAR_283 ) : case ( VAR_284 << 8 | VAR_285 ) : case ( VAR_286 << 8 | VAR_287 ) : if ( VAR_288 < ( TYPE_18 ) ( sizeof ( struct STRUCT_OR_UNION_4 ) + VAR_289 ) ) { METHOD_76 ( ( VAR_290 , "invalidlen" ) ) ; VAR_291 = 0 ; } else { METHOD_77 ( VAR_292 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_5 ) + VAR_293 ) ; METHOD_78 ( ( VAR_294 , "RD:%s,%s" , METHOD_79 ( VAR_295 , VAR_296 ) , METHOD_80 ( VAR_297 , VAR_298 + VAR_299 ) ) ) ; VAR_300 -= ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_301 ) ; VAR_302 += ( sizeof ( struct STRUCT_OR_UNION_7 ) + VAR_303 ) ; } break ; case ( VAR_304 << 8 | VAR_305 ) : case ( VAR_306 << 8 | VAR_307 ) : case ( VAR_308 << 8 | VAR_309 ) : case ( VAR_310 << 8 | VAR_311 ) : if ( VAR_312 < ( TYPE_19 ) sizeof ( struct STRUCT_OR_UNION_8 ) ) { METHOD_81 ( ( VAR_313 , "invalidlen" ) ) ; VAR_314 = 0 ; } else { METHOD_82 ( VAR_315 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_9 ) ) ; METHOD_83 ( ( VAR_316 , "%s" , METHOD_84 ( VAR_317 , VAR_318 ) ) ) ; VAR_319 -= sizeof ( struct STRUCT_OR_UNION_10 ) ; VAR_320 += sizeof ( struct STRUCT_OR_UNION_11 ) ; } break ; case ( VAR_321 << 8 | VAR_322 ) : case ( VAR_323 << 8 | VAR_324 ) : case ( VAR_325 << 8 | VAR_326 ) : if ( VAR_327 < ( TYPE_20 ) ( sizeof ( struct STRUCT_OR_UNION_12 ) + VAR_328 ) ) { METHOD_85 ( ( VAR_329 , "invalidlen" ) ) ; VAR_330 = 0 ; } else { METHOD_86 ( VAR_331 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_13 ) + VAR_332 ) ; METHOD_87 ( ( VAR_333 , "RD:%s,%s" , METHOD_88 ( VAR_334 , VAR_335 ) , METHOD_89 ( VAR_336 , VAR_337 + VAR_338 ) ) ) ; VAR_339 -= ( sizeof ( struct STRUCT_OR_UNION_14 ) + VAR_340 ) ; VAR_341 += ( sizeof ( struct STRUCT_OR_UNION_15 ) + VAR_342 ) ; } break ; case ( VAR_343 << 8 | VAR_344 ) : case ( VAR_345 << 8 | VAR_346 ) : case ( VAR_347 << 8 | VAR_348 ) : case ( VAR_349 << 8 | VAR_350 ) : if ( VAR_351 < ( TYPE_21 ) sizeof ( struct STRUCT_OR_UNION_16 ) ) { METHOD_90 ( ( VAR_352 , "invalidlen" ) ) ; VAR_353 = 0 ; } else { METHOD_91 ( VAR_354 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; METHOD_92 ( ( VAR_355 , "%s" , METHOD_93 ( VAR_356 , VAR_357 ) ) ) ; VAR_358 -= ( sizeof ( struct STRUCT_OR_UNION_18 ) ) ; VAR_359 += ( sizeof ( struct STRUCT_OR_UNION_19 ) ) ; } break ; case ( VAR_360 << 8 | VAR_361 ) : case ( VAR_362 << 8 | VAR_363 ) : case ( VAR_364 << 8 | VAR_365 ) : METHOD_94 ( VAR_366 [ 0 ] , VAR_367 ) ; METHOD_95 ( ( VAR_368 , "%s" , METHOD_96 ( VAR_369 , VAR_370 , VAR_371 ) ) ) ; VAR_372 += VAR_373 ; VAR_374 = 0 ; break ; case ( VAR_375 << 8 | VAR_376 ) : case ( VAR_377 << 8 | VAR_378 ) : case ( VAR_379 << 8 | VAR_380 ) : if ( VAR_381 < VAR_382 + 1 ) { METHOD_97 ( ( VAR_383 , "invalidlen" ) ) ; VAR_384 = 0 ; } else { METHOD_98 ( VAR_385 [ 0 ] , VAR_386 ) ; METHOD_99 ( ( VAR_387 , "RD:%s,%s" , METHOD_100 ( VAR_388 , VAR_389 ) , METHOD_101 ( VAR_390 , VAR_391 + VAR_392 , VAR_393 - VAR_394 ) ) ) ; if ( VAR_395 == VAR_396 + 4 + sizeof ( struct STRUCT_OR_UNION_20 ) && METHOD_102 ( VAR_397 + VAR_398 ) == 0x47000601 ) METHOD_103 ( ( VAR_399 , "=%s" , METHOD_104 ( VAR_400 , VAR_401 + VAR_402 + 4 ) ) ) ; else if ( VAR_403 == VAR_404 + 3 + sizeof ( struct STRUCT_OR_UNION_21 ) && METHOD_105 ( VAR_405 + VAR_406 ) == 0x350000 ) METHOD_106 ( ( VAR_407 , "=%s" , METHOD_107 ( VAR_408 , VAR_409 + VAR_410 + 3 ) ) ) ; VAR_411 += VAR_412 ; VAR_413 = 0 ; } break ; default : METHOD_108 ( VAR_414 [ 0 ] , VAR_415 ) ; METHOD_109 ( ( VAR_416 , "noAFI%u/SAFI%udecoder" , VAR_417 , VAR_418 ) ) ; if ( VAR_419 -> VAR_420 <= 1 ) METHOD_110 ( VAR_421 , VAR_422 , "\\n\\t" , VAR_423 ) ; VAR_424 += VAR_425 ; VAR_426 = 0 ; goto VAR_427 ; break ; } } } METHOD_111 ( ( VAR_428 , ",nh-length:%u" , VAR_429 ) ) ; VAR_430 += VAR_431 ; METHOD_112 ( VAR_432 [ 0 ] ) ; VAR_433 = VAR_434 [ 0 ] ; VAR_435 ++ ; if ( VAR_436 ) { METHOD_113 ( ( VAR_437 , "\\n\\t%uSNPA" , VAR_438 ) ) ; for ( ; VAR_439 > 0 ; VAR_440 -- ) { METHOD_114 ( VAR_441 [ 0 ] ) ; METHOD_115 ( ( VAR_442 , "\\n\\t%dbytes" , VAR_443 [ 0 ] ) ) ; VAR_444 += VAR_445 [ 0 ] + 1 ; } } else { METHOD_116 ( ( VAR_446 , ",noSNPA" ) ) ; } while ( VAR_447 < VAR_448 + VAR_449 ) { switch ( VAR_450 << 8 | VAR_451 ) { case ( VAR_452 << 8 | VAR_453 ) : case ( VAR_454 << 8 | VAR_455 ) : case ( VAR_456 << 8 | VAR_457 ) : VAR_458 = METHOD_117 ( VAR_459 , VAR_460 , VAR_461 , VAR_462 , sizeof ( VAR_463 ) ) ; if ( VAR_464 == - 1 ) METHOD_118 ( ( VAR_465 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_466 == - 2 ) goto VAR_467 ; else if ( VAR_468 == - 3 ) break ; else METHOD_119 ( ( VAR_469 , "\\n\\t%s" , VAR_470 ) ) ; break ; case ( VAR_471 << 8 | VAR_472 ) : VAR_473 = METHOD_120 ( VAR_474 , VAR_475 , VAR_476 , VAR_477 , sizeof ( VAR_478 ) ) ; if ( VAR_479 == - 1 ) METHOD_121 ( ( VAR_480 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_481 == - 2 ) goto VAR_482 ; else if ( VAR_483 == - 3 ) break ; else METHOD_122 ( ( VAR_484 , "\\n\\t%s" , VAR_485 ) ) ; break ; case ( VAR_486 << 8 | VAR_487 ) : case ( VAR_488 << 8 | VAR_489 ) : case ( VAR_490 << 8 | VAR_491 ) : VAR_492 = METHOD_123 ( VAR_493 , VAR_494 , VAR_495 , sizeof ( VAR_496 ) ) ; if ( VAR_497 == - 1 ) METHOD_124 ( ( VAR_498 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_499 == - 2 ) goto VAR_500 ; else METHOD_125 ( ( VAR_501 , "\\n\\t%s" , VAR_502 ) ) ; break ; case ( VAR_503 << 8 | VAR_504 ) : VAR_505 = METHOD_126 ( VAR_506 , VAR_507 , VAR_508 , sizeof ( VAR_509 ) ) ; if ( VAR_510 == - 1 ) METHOD_127 ( ( VAR_511 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_512 == - 2 ) goto VAR_513 ; else METHOD_128 ( ( VAR_514 , "\\n\\t%s" , VAR_515 ) ) ; break ; case ( VAR_516 << 8 | VAR_517 ) : case ( VAR_518 << 8 | VAR_519 ) : VAR_520 = METHOD_129 ( VAR_521 , VAR_522 , VAR_523 , sizeof ( VAR_524 ) ) ; if ( VAR_525 == - 1 ) METHOD_130 ( ( VAR_526 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_527 == - 2 ) goto VAR_528 ; else METHOD_131 ( ( VAR_529 , "\\n\\t%s" , VAR_530 ) ) ; break ; case ( VAR_531 << 8 | VAR_532 ) : VAR_533 = METHOD_132 ( VAR_534 , VAR_535 , VAR_536 , sizeof ( VAR_537 ) ) ; if ( VAR_538 == - 1 ) METHOD_133 ( ( VAR_539 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_540 == - 2 ) goto VAR_541 ; else METHOD_134 ( ( VAR_542 , "\\n\\t%s" , VAR_543 ) ) ; break ; case ( VAR_544 << 8 | VAR_545 ) : case ( VAR_546 << 8 | VAR_547 ) : case ( VAR_548 << 8 | VAR_549 ) : VAR_550 = METHOD_135 ( VAR_551 , VAR_552 , VAR_553 , VAR_554 , sizeof ( VAR_555 ) ) ; if ( VAR_556 == - 1 ) METHOD_136 ( ( VAR_557 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_558 == - 2 ) goto VAR_559 ; else if ( VAR_560 == - 3 ) break ; else METHOD_137 ( ( VAR_561 , "\\n\\t%s" , VAR_562 ) ) ; break ; case ( VAR_563 << 8 | VAR_564 ) : VAR_565 = METHOD_138 ( VAR_566 , VAR_567 , VAR_568 , VAR_569 , sizeof ( VAR_570 ) ) ; if ( VAR_571 == - 1 ) METHOD_139 ( ( VAR_572 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_573 == - 2 ) goto VAR_574 ; else if ( VAR_575 == - 3 ) break ; else METHOD_140 ( ( VAR_576 , "\\n\\t%s" , VAR_577 ) ) ; break ; case ( VAR_578 << 8 | VAR_579 ) : case ( VAR_580 << 8 | VAR_581 ) : case ( VAR_582 << 8 | VAR_583 ) : VAR_584 = METHOD_141 ( VAR_585 , VAR_586 , VAR_587 , sizeof ( VAR_588 ) ) ; if ( VAR_589 == - 1 ) METHOD_142 ( ( VAR_590 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_591 == - 2 ) goto VAR_592 ; else METHOD_143 ( ( VAR_593 , "\\n\\t%s" , VAR_594 ) ) ; break ; case ( VAR_595 << 8 | VAR_596 ) : case ( VAR_597 << 8 | VAR_598 ) : case ( VAR_599 << 8 | VAR_600 ) : case ( VAR_601 << 8 | VAR_602 ) : VAR_603 = METHOD_144 ( VAR_604 , VAR_605 , VAR_606 , sizeof ( VAR_607 ) ) ; if ( VAR_608 == - 1 ) METHOD_145 ( ( VAR_609 , "\\n\\t(illegallength)" ) ) ; else if ( VAR_610 == - 2 ) goto VAR_611 ; else METHOD_146 ( ( VAR_612 , "\\n\\t%s" , VAR_613 ) ) ; break ; case ( VAR_614 << 8 | VAR_615 ) : case ( VAR_616 << 8 | VAR_617 ) : case ( VAR_618 << 8 | VAR_619 ) : VAR_620 = METHOD_147 ( VAR_621 , VAR_622 , VAR_623 , sizeof ( VAR_624 ) ) ; if ( VAR_625 == - 1 ) METHOD_148 ( ( VAR_626 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_627 == - 2 ) goto VAR_628 ; else METHOD_149 ( ( VAR_629 , "\\n\\t%s" , VAR_630 ) ) ; break ; case ( VAR_631 << 8 | VAR_632 ) : case ( VAR_633 << 8 | VAR_634 ) : case ( VAR_635 << 8 | VAR_636 ) : VAR_637 = METHOD_150 ( VAR_638 , VAR_639 , VAR_640 , sizeof ( VAR_641 ) ) ; if ( VAR_642 == - 1 ) METHOD_151 ( ( VAR_643 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_644 == - 2 ) goto VAR_645 ; else METHOD_152 ( ( VAR_646 , "\\n\\t%s" , VAR_647 ) ) ; break ; default : METHOD_153 ( * VAR_648 , VAR_649 ) ; METHOD_154 ( ( VAR_650 , "\\n\\tnoAFI%u/SAFI%udecoder" , VAR_651 , VAR_652 ) ) ; if ( VAR_653 -> VAR_654 <= 1 ) METHOD_155 ( VAR_655 , VAR_656 , "\\n\\t" , VAR_657 ) ; VAR_658 = 0 ; VAR_659 = VAR_660 + VAR_661 ; break ; } if ( VAR_662 < 0 ) break ; VAR_663 += VAR_664 ; } VAR_665 : break ; case VAR_666 : METHOD_156 ( VAR_667 [ 0 ] , VAR_668 ) ; VAR_669 = METHOD_157 ( VAR_670 ) ; VAR_671 = VAR_672 [ 2 ] ; METHOD_158 ( ( VAR_673 , "\\n\\tAFI:%s(%u),%sSAFI:%s(%u)" , METHOD_159 ( VAR_674 , "UnknownAFI" , VAR_675 ) , VAR_676 , ( VAR_677 > 128 ) ? "vendorspecific" : "" , METHOD_160 ( VAR_678 , "UnknownSAFI" , VAR_679 ) , VAR_680 ) ) ; if ( VAR_681 == VAR_682 ) METHOD_161 ( ( VAR_683 , "\\n\\tEnd-of-RibMarker(emptyNLRI)" ) ) ; VAR_684 += 3 ; while ( VAR_685 < VAR_686 + VAR_687 ) { switch ( VAR_688 << 8 | VAR_689 ) { case ( VAR_690 << 8 | VAR_691 ) : case ( VAR_692 << 8 | VAR_693 ) : case ( VAR_694 << 8 | VAR_695 ) : VAR_696 = METHOD_162 ( VAR_697 , VAR_698 , VAR_699 , VAR_700 , sizeof ( VAR_701 ) ) ; if ( VAR_702 == - 1 ) METHOD_163 ( ( VAR_703 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_704 == - 2 ) goto VAR_705 ; else if ( VAR_706 == - 3 ) break ; else METHOD_164 ( ( VAR_707 , "\\n\\t%s" , VAR_708 ) ) ; break ; case ( VAR_709 << 8 | VAR_710 ) : VAR_711 = METHOD_165 ( VAR_712 , VAR_713 , VAR_714 , VAR_715 , sizeof ( VAR_716 ) ) ; if ( VAR_717 == - 1 ) METHOD_166 ( ( VAR_718 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_719 == - 2 ) goto VAR_720 ; else if ( VAR_721 == - 3 ) break ; else METHOD_167 ( ( VAR_722 , "\\n\\t%s" , VAR_723 ) ) ; break ; case ( VAR_724 << 8 | VAR_725 ) : case ( VAR_726 << 8 | VAR_727 ) : case ( VAR_728 << 8 | VAR_729 ) : VAR_730 = METHOD_168 ( VAR_731 , VAR_732 , VAR_733 , sizeof ( VAR_734 ) ) ; if ( VAR_735 == - 1 ) METHOD_169 ( ( VAR_736 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_737 == - 2 ) goto VAR_738 ; else METHOD_170 ( ( VAR_739 , "\\n\\t%s" , VAR_740 ) ) ; break ; case ( VAR_741 << 8 | VAR_742 ) : case ( VAR_743 << 8 | VAR_744 ) : case ( VAR_745 << 8 | VAR_746 ) : VAR_747 = METHOD_171 ( VAR_748 , VAR_749 , VAR_750 , VAR_751 , sizeof ( VAR_752 ) ) ; if ( VAR_753 == - 1 ) METHOD_172 ( ( VAR_754 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_755 == - 2 ) goto VAR_756 ; else if ( VAR_757 == - 3 ) break ; else METHOD_173 ( ( VAR_758 , "\\n\\t%s" , VAR_759 ) ) ; break ; case ( VAR_760 << 8 | VAR_761 ) : VAR_762 = METHOD_174 ( VAR_763 , VAR_764 , VAR_765 , VAR_766 , sizeof ( VAR_767 ) ) ; if ( VAR_768 == - 1 ) METHOD_175 ( ( VAR_769 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_770 == - 2 ) goto VAR_771 ; else if ( VAR_772 == - 3 ) break ; else METHOD_176 ( ( VAR_773 , "\\n\\t%s" , VAR_774 ) ) ; break ; case ( VAR_775 << 8 | VAR_776 ) : case ( VAR_777 << 8 | VAR_778 ) : case ( VAR_779 << 8 | VAR_780 ) : VAR_781 = METHOD_177 ( VAR_782 , VAR_783 , VAR_784 , sizeof ( VAR_785 ) ) ; if ( VAR_786 == - 1 ) METHOD_178 ( ( VAR_787 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_788 == - 2 ) goto VAR_789 ; else METHOD_179 ( ( VAR_790 , "\\n\\t%s" , VAR_791 ) ) ; break ; case ( VAR_792 << 8 | VAR_793 ) : case ( VAR_794 << 8 | VAR_795 ) : case ( VAR_796 << 8 | VAR_797 ) : case ( VAR_798 << 8 | VAR_799 ) : VAR_800 = METHOD_180 ( VAR_801 , VAR_802 , VAR_803 , sizeof ( VAR_804 ) ) ; if ( VAR_805 == - 1 ) METHOD_181 ( ( VAR_806 , "\\n\\t(illegallength)" ) ) ; else if ( VAR_807 == - 2 ) goto VAR_808 ; else METHOD_182 ( ( VAR_809 , "\\n\\t%s" , VAR_810 ) ) ; break ; case ( VAR_811 << 8 | VAR_812 ) : case ( VAR_813 << 8 | VAR_814 ) : case ( VAR_815 << 8 | VAR_816 ) : VAR_817 = METHOD_183 ( VAR_818 , VAR_819 , VAR_820 , sizeof ( VAR_821 ) ) ; if ( VAR_822 == - 1 ) METHOD_184 ( ( VAR_823 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_824 == - 2 ) goto VAR_825 ; else METHOD_185 ( ( VAR_826 , "\\n\\t%s" , VAR_827 ) ) ; break ; case ( VAR_828 << 8 | VAR_829 ) : case ( VAR_830 << 8 | VAR_831 ) : case ( VAR_832 << 8 | VAR_833 ) : VAR_834 = METHOD_186 ( VAR_835 , VAR_836 , VAR_837 , sizeof ( VAR_838 ) ) ; if ( VAR_839 == - 1 ) METHOD_187 ( ( VAR_840 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_841 == - 2 ) goto VAR_842 ; else METHOD_188 ( ( VAR_843 , "\\n\\t%s" , VAR_844 ) ) ; break ; case ( VAR_845 << 8 | VAR_846 ) : VAR_847 = METHOD_189 ( VAR_848 , VAR_849 , VAR_850 , sizeof ( VAR_851 ) ) ; if ( VAR_852 == - 1 ) METHOD_190 ( ( VAR_853 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_854 == - 2 ) goto VAR_855 ; else METHOD_191 ( ( VAR_856 , "\\n\\t%s" , VAR_857 ) ) ; break ; case ( VAR_858 << 8 | VAR_859 ) : case ( VAR_860 << 8 | VAR_861 ) : VAR_862 = METHOD_192 ( VAR_863 , VAR_864 , VAR_865 , sizeof ( VAR_866 ) ) ; if ( VAR_867 == - 1 ) METHOD_193 ( ( VAR_868 , "\\n\\t(illegalprefixlength)" ) ) ; else if ( VAR_869 == - 2 ) goto VAR_870 ; else METHOD_194 ( ( VAR_871 , "\\n\\t%s" , VAR_872 ) ) ; break ; default : METHOD_195 ( * ( VAR_873 - 3 ) , VAR_874 ) ; METHOD_196 ( ( VAR_875 , "noAFI%u/SAFI%udecoder" , VAR_876 , VAR_877 ) ) ; if ( VAR_878 -> VAR_879 <= 1 ) METHOD_197 ( VAR_880 , VAR_881 - 3 , "\\n\\t" , VAR_882 ) ; VAR_883 = 0 ; VAR_884 = VAR_885 + VAR_886 ; break ; } if ( VAR_887 < 0 ) break ; VAR_888 += VAR_889 ; } break ; case VAR_890 : if ( VAR_891 % 8 ) { METHOD_198 ( ( VAR_892 , "invalidlen" ) ) ; break ; } while ( VAR_893 > 0 ) { TYPE_22 VAR_894 ; METHOD_199 ( VAR_895 [ 0 ] , 2 ) ; VAR_896 = METHOD_200 ( VAR_897 ) ; METHOD_201 ( ( VAR_898 , "\\n\\t%s(0x%04x),Flags[%s]" , METHOD_202 ( VAR_899 , "unknownextdcommunitytypecode" , VAR_900 ) , VAR_901 , METHOD_203 ( VAR_902 , "none" , VAR_903 ) ) ) ; METHOD_204 ( * ( VAR_904 + 2 ) , 6 ) ; switch ( VAR_905 ) { case VAR_906 : case VAR_907 : case VAR_908 : METHOD_205 ( ( VAR_909 , ":%u:%u(=%s)" , METHOD_206 ( VAR_910 + 2 ) , METHOD_207 ( VAR_911 + 4 ) , METHOD_208 ( VAR_912 , VAR_913 + 4 ) ) ) ; break ; case VAR_914 : case VAR_915 : case VAR_916 : case VAR_917 : METHOD_209 ( ( VAR_918 , ":%s:%u" , METHOD_210 ( VAR_919 , VAR_920 + 2 ) , METHOD_211 ( VAR_921 + 6 ) ) ) ; break ; case VAR_922 : case VAR_923 : METHOD_212 ( ( VAR_924 , ":%s:%u" , METHOD_213 ( VAR_925 , VAR_926 , sizeof ( VAR_927 ) , METHOD_214 ( VAR_928 + 2 ) ) , METHOD_215 ( VAR_929 + 6 ) ) ) ; break ; case VAR_930 : VAR_931 . VAR_932 = METHOD_216 ( VAR_933 + 2 ) ; METHOD_217 ( ( VAR_934 , ":bandwidth:%.3fMbps" , VAR_935 . VAR_936 * 8 / 1000000 ) ) ; break ; case VAR_937 : case VAR_938 : case VAR_939 : case VAR_940 : case VAR_941 : case VAR_942 : METHOD_218 ( ( VAR_943 , "%s" , METHOD_219 ( VAR_944 , VAR_945 + 2 ) ) ) ; break ; case VAR_946 : case VAR_947 : METHOD_220 ( ( VAR_948 , ":area:%s,router-type:%s,metric-type:%s%s" , METHOD_221 ( VAR_949 , VAR_950 + 2 ) , METHOD_222 ( VAR_951 , "unknown(0x%02x)" , * ( VAR_952 + 6 ) ) , ( * ( VAR_953 + 7 ) & VAR_954 ) ? "E2" : "" , ( ( * ( VAR_955 + 6 ) == VAR_956 ) || ( * ( VAR_957 + 6 ) == VAR_958 ) ) ? "E1" : "" ) ) ; break ; case VAR_959 : METHOD_223 ( ( VAR_960 , ":%sControlFlags[0x%02x]:MTU%u" , METHOD_224 ( VAR_961 , "unknownencaps" , * ( VAR_962 + 2 ) ) , * ( VAR_963 + 3 ) , METHOD_225 ( VAR_964 + 4 ) ) ) ; break ; case VAR_965 : METHOD_226 ( ( VAR_966 , ":AS%u" , METHOD_227 ( VAR_967 + 2 ) ) ) ; break ; default : METHOD_228 ( * VAR_968 , 8 ) ; METHOD_229 ( VAR_969 , VAR_970 , "\\n\\t" , 8 ) ; break ; } VAR_971 -= 8 ; VAR_972 += 8 ; } break ; case VAR_973 : { TYPE_23 VAR_974 , VAR_975 ; METHOD_230 ( VAR_976 [ 0 ] , 5 ) ; VAR_977 = * ( VAR_978 + 1 ) ; VAR_979 = * VAR_980 ; VAR_981 = VAR_982 ; METHOD_231 ( ( VAR_983 , "\\n\\tTunnel-type%s(%u),Flags[%s],MPLSLabel%u" , METHOD_232 ( VAR_984 , "Unknown" , VAR_985 ) , VAR_986 , METHOD_233 ( VAR_987 , "none" , VAR_988 ) , METHOD_234 ( VAR_989 + 2 ) >> 4 ) ) ; VAR_990 += 5 ; VAR_991 -= 5 ; switch ( VAR_992 ) { case VAR_993 : case VAR_994 : METHOD_235 ( VAR_995 [ 0 ] , 8 ) ; METHOD_236 ( ( VAR_996 , "\\n\\tSender%s,P-Group%s" , METHOD_237 ( VAR_997 , VAR_998 ) , METHOD_238 ( VAR_999 , VAR_1000 + 4 ) ) ) ; break ; case VAR_1001 : METHOD_239 ( VAR_1002 [ 0 ] , 8 ) ; METHOD_240 ( ( VAR_1003 , "\\n\\tRoot-Node%s,P-Group%s" , METHOD_241 ( VAR_1004 , VAR_1005 ) , METHOD_242 ( VAR_1006 , VAR_1007 + 4 ) ) ) ; break ; case VAR_1008 : METHOD_243 ( VAR_1009 [ 0 ] , 4 ) ; METHOD_244 ( ( VAR_1010 , "\\n\\tTunnel-Endpoint%s" , METHOD_245 ( VAR_1011 , VAR_1012 ) ) ) ; break ; case VAR_1013 : case VAR_1014 : METHOD_246 ( VAR_1015 [ 0 ] , 8 ) ; METHOD_247 ( ( VAR_1016 , "\\n\\tRoot-Node%s,LSP-ID0x%08x" , METHOD_248 ( VAR_1017 , VAR_1018 ) , METHOD_249 ( VAR_1019 + 4 ) ) ) ; break ; case VAR_1020 : METHOD_250 ( VAR_1021 [ 0 ] , 8 ) ; METHOD_251 ( ( VAR_1022 , "\\n\\tExtended-Tunnel-ID%s,P2MP-ID0x%08x" , METHOD_252 ( VAR_1023 , VAR_1024 ) , METHOD_253 ( VAR_1025 + 4 ) ) ) ; break ; default : if ( VAR_1026 -> VAR_1027 <= 1 ) { METHOD_254 ( VAR_1028 , VAR_1029 , "\\n\\t" , VAR_1030 ) ; } } break ; } case VAR_1031 : { TYPE_24 VAR_1032 ; TYPE_25 VAR_1033 ; VAR_1034 = VAR_1035 ; while ( VAR_1036 >= 3 ) { METHOD_255 ( VAR_1037 [ 0 ] , 3 ) ; VAR_1038 = * VAR_1039 ; VAR_1040 = METHOD_256 ( VAR_1041 + 1 ) ; VAR_1042 += 3 ; VAR_1043 -= 3 ; METHOD_257 ( ( VAR_1044 , "\\n\\t%sTLV(%u),length%u" , METHOD_258 ( VAR_1045 , "Unknown" , VAR_1046 ) , VAR_1047 , VAR_1048 ) ) ; if ( VAR_1049 < 3 ) goto VAR_1050 ; VAR_1051 -= 3 ; METHOD_259 ( VAR_1052 [ 3 ] , VAR_1053 ) ; switch ( VAR_1054 ) { case VAR_1055 : if ( VAR_1056 < 8 ) goto VAR_1057 ; METHOD_260 ( ( VAR_1058 , ",metric%" VAR_1059 , METHOD_261 ( VAR_1060 ) ) ) ; break ; default : if ( VAR_1061 -> VAR_1062 <= 1 ) { METHOD_262 ( VAR_1063 , VAR_1064 , "\\n\\t" , VAR_1065 ) ; } } VAR_1066 += VAR_1067 ; VAR_1068 -= VAR_1069 ; } break ; } case VAR_1070 : METHOD_263 ( VAR_1071 [ 0 ] , 4 ) ; if ( VAR_1072 < 4 ) goto VAR_1073 ; METHOD_264 ( ( VAR_1074 , "\\n\\tOriginAS:%s" , METHOD_265 ( VAR_1075 , VAR_1076 , sizeof ( VAR_1077 ) , METHOD_266 ( VAR_1078 ) ) ) ) ; VAR_1079 += 4 ; VAR_1080 -= 4 ; while ( VAR_1081 ) { TYPE_26 VAR_1082 , VAR_1083 , VAR_1084 ; METHOD_267 ( VAR_1085 [ 0 ] , 2 ) ; if ( VAR_1086 < 2 ) goto VAR_1087 ; VAR_1088 = * VAR_1089 ; VAR_1090 = * ( VAR_1091 + 1 ) ; VAR_1092 += 2 ; VAR_1093 -= 2 ; VAR_1094 = METHOD_268 ( VAR_1095 , VAR_1096 ) ; METHOD_269 ( VAR_1097 [ 0 ] , VAR_1098 ) ; if ( VAR_1099 < VAR_1100 ) goto VAR_1101 ; VAR_1102 = METHOD_270 ( VAR_1103 , VAR_1104 ) ; VAR_1105 += VAR_1106 ; VAR_1107 -= VAR_1108 ; METHOD_271 ( ( VAR_1109 , "\\n\\t%s(%u),length:%u" , METHOD_272 ( VAR_1110 , "UnknownAttribute" , VAR_1111 ) , VAR_1112 , VAR_1113 ) ) ; if ( VAR_1114 ) { METHOD_273 ( ( VAR_1115 , ",Flags[%s%s%s%s" , VAR_1116 & 0x80 ? "O" : "" , VAR_1117 & 0x40 ? "T" : "" , VAR_1118 & 0x20 ? "P" : "" , VAR_1119 & 0x10 ? "E" : "" ) ) ; if ( VAR_1120 & 0xf ) METHOD_274 ( ( VAR_1121 , "+%x" , VAR_1122 & 0xf ) ) ; METHOD_275 ( ( VAR_1123 , "]:" ) ) ; }  if ( ! METHOD_276 ( VAR_1124 , VAR_1125 , VAR_1126 , VAR_1127 ) )  return 0 ; VAR_1128 += VAR_1129 ; VAR_1130 -= VAR_1131 ; } break ; case VAR_1132 : if ( VAR_1133 == 0 || VAR_1134 % 12 ) { METHOD_277 ( ( VAR_1135 , "invalidlen" ) ) ; break ; } METHOD_278 ( ( VAR_1136 , "\\n\\t" ) ) ; while ( VAR_1137 > 0 ) { METHOD_279 ( * VAR_1138 , 12 ) ; METHOD_280 ( ( VAR_1139 , "%u:%u:%u%s" , METHOD_281 ( VAR_1140 ) , METHOD_282 ( VAR_1141 + 4 ) , METHOD_283 ( VAR_1142 + 8 ) , ( VAR_1143 > 12 ) ? "," : "" ) ) ; VAR_1144 += 12 ; VAR_1145 -= 12 ; } break ; default : METHOD_284 ( * VAR_1146 , VAR_1147 ) ; METHOD_285 ( ( VAR_1148 , "\\n\\tnoAttribute%udecoder" , VAR_1149 ) ) ; if ( VAR_1150 -> VAR_1151 <= 1 ) METHOD_286 ( VAR_1152 , VAR_1153 , "\\n\\t" , VAR_1154 ) ; break ; } if ( VAR_1155 -> VAR_1156 > 1 && VAR_1157 ) { METHOD_287 ( * VAR_1158 , VAR_1159 ) ; METHOD_288 ( VAR_1160 , VAR_1161 , "\\n\\t" , VAR_1162 ) ; } return 1 ; VAR_1163 : return 0 ; }
TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , unsigned TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 , unsigned TYPE_5 VAR_4 ) { ( TYPE_6 ) VAR_5 ; ( TYPE_7 ) VAR_6 ;  METHOD_1 ( VAR_7 , VAR_8 , VAR_9 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 ) { ( TYPE_3 ) VAR_2 ; const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 [ 40 ] , VAR_5 [ 40 ] , * VAR_6 = "" ; TYPE_6 * VAR_7 , * VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 ; TYPE_8 VAR_12 ; if ( METHOD_1 ( VAR_13 ) ) { VAR_14 = "uniswapaddliquidity" ; } else if ( METHOD_2 ( VAR_15 ) ) { VAR_16 = "uniswapremoveliquidity" ; } else { return VAR_17 ; } VAR_18 = ( TYPE_9 * ) ( VAR_19 -> VAR_20 . VAR_21 + 4 + 32 - 20 ) ; VAR_22 = METHOD_3 ( VAR_23 -> VAR_24 , VAR_25 ) ; METHOD_4 ( VAR_26 -> VAR_27 . VAR_28 + 4 + 32 , 32 , & VAR_29 ) ; METHOD_5 ( VAR_30 -> VAR_31 . VAR_32 + 4 + 2 * 32 , 32 , & VAR_33 ) ; METHOD_6 ( VAR_34 -> VAR_35 . VAR_36 + 4 + 3 * 32 , 32 , & VAR_37 ) ; VAR_38 = ( TYPE_10 * ) ( VAR_39 -> VAR_40 . VAR_41 + 4 + 6 * 32 - 8 ) ; VAR_42 = ( ( TYPE_11 ) VAR_43 [ 0 ] << 8 * 7 ) | ( ( TYPE_12 ) VAR_44 [ 1 ] << 8 * 6 ) | ( ( TYPE_13 ) VAR_45 [ 2 ] << 8 * 5 ) | ( ( TYPE_14 ) VAR_46 [ 3 ] << 8 * 4 ) | ( ( TYPE_15 ) VAR_47 [ 4 ] << 8 * 3 ) | ( ( TYPE_16 ) VAR_48 [ 5 ] << 8 * 2 ) | ( ( TYPE_17 ) VAR_49 [ 6 ] << 8 * 1 ) | ( ( TYPE_18 ) VAR_50 [ 7 ] ) ; TYPE_19 VAR_51 [ 32 ] ; METHOD_7 ( & VAR_52 , VAR_53 , VAR_54 -> VAR_55 , VAR_56 , sizeof ( VAR_57 ) ) ; METHOD_8 ( VAR_58 , 32 , "%s" , VAR_59 ) ; METHOD_9 ( & VAR_60 , VAR_61 , VAR_62 -> VAR_63 , VAR_64 , sizeof ( VAR_65 ) ) ; METHOD_10 ( VAR_66 , 32 , "%s" , VAR_67 ) ; METHOD_11 ( VAR_68 , VAR_69 , "%s\\nMinimum%s" , VAR_70 , VAR_71 ) ; if ( ! METHOD_12 ( VAR_72 , VAR_73 ) ) { return VAR_74 ; } METHOD_13 ( & VAR_75 , VAR_76 , VAR_77 -> VAR_78 , VAR_79 , sizeof ( VAR_80 ) ) ; METHOD_14 ( VAR_81 , 32 , "%s" , VAR_82 ) ; METHOD_15 ( VAR_83 , VAR_84 , "Minimum%s" , VAR_85 ) ;  METHOD_16 ( VAR_86 , 32 , "%lld" , VAR_87 ) ;  METHOD_17 ( VAR_88 , VAR_89 , "Deadline%s" , METHOD_18 ( ( const TYPE_20 * ) & VAR_90 ) ) ; return VAR_91 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ;  METHOD_1 ( VAR_4 >= 0 && VAR_5 < 32 ) ;  VAR_6 = 0 ; while ( -- VAR_7 >= 0 ) { if ( ( VAR_8 = METHOD_2 ( VAR_9 ) ) < 0 ) { return - 1 ; } VAR_10 = ( VAR_11 << 1 ) | VAR_12 ; } return VAR_13 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned VAR_1 , TYPE_1 TYPE_2 * VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_5 -> VAR_6 ; TYPE_5 VAR_7 ; unsigned TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; VAR_11 * METHOD_1 ; VAR_12 * METHOD_2 ; struct STRUCT_OR_UNION_3 VAR_13 [ VAR_14 ] , * STRUCT_OR_UNION_4 = VAR_15 ; struct STRUCT_OR_UNION_5 VAR_16 ; switch ( VAR_17 ) { case VAR_18 : case VAR_19 : VAR_20 = VAR_21 ; VAR_22 = VAR_23 ; METHOD_3 = STRUCT_OR_UNION_6 -> VAR_24 -> VAR_25 ; METHOD_4 = STRUCT_OR_UNION_7 -> VAR_26 -> VAR_27 ; goto VAR_28 ; case VAR_29 : case VAR_30 : VAR_31 = VAR_32 ; VAR_33 = VAR_34 ; METHOD_5 = STRUCT_OR_UNION_8 -> VAR_35 -> VAR_36 ; METHOD_6 = STRUCT_OR_UNION_9 -> VAR_37 -> VAR_38 ; goto VAR_39 ; VAR_40 : if ( METHOD_7 ( ! ( STRUCT_OR_UNION_10 -> VAR_41 & VAR_42 ) ) ) return - VAR_43 ; if ( ! METHOD_8 && ! METHOD_9 ) return - VAR_44 ; if ( VAR_45 == VAR_46 || VAR_47 == VAR_48 ) VAR_49 = METHOD_10 ( VAR_50 , VAR_51 , VAR_52 , & VAR_53 ,  & VAR_54 , & STRUCT_OR_UNION_11 , VAR_55 ) ;  else VAR_56 = METHOD_11 ( VAR_57 , VAR_58 , VAR_59 , & VAR_60 ,  VAR_61 , STRUCT_OR_UNION_12 ) ;  if ( ! VAR_62 ) VAR_63 = METHOD_12 ( VAR_64 , STRUCT_OR_UNION_13 , & VAR_65 -> VAR_66 , VAR_67 ) ; if ( VAR_68 < 0 ) { if ( STRUCT_OR_UNION_14 != VAR_69 ) METHOD_13 ( STRUCT_OR_UNION_15 ) ; return VAR_70 ; } VAR_71 = VAR_72 ; if ( VAR_73 -> VAR_74 < 0 ) { VAR_75 = - VAR_76 ; break ; } if ( VAR_77 == VAR_78 ) METHOD_14 ( STRUCT_OR_UNION_16 ) ; if ( METHOD_15 ) {  METHOD_16 ( & VAR_79 , VAR_80 , STRUCT_OR_UNION_17 , VAR_81 , VAR_82 ) ;  VAR_83 = METHOD_17 ( VAR_84 , & VAR_85 ) ; } else { VAR_86 = METHOD_18 ( VAR_87 , STRUCT_OR_UNION_18 , VAR_88 , VAR_89 -> VAR_90 ) ; } if ( VAR_91 == VAR_92 ) METHOD_19 ( STRUCT_OR_UNION_19 ) ; break ; case VAR_93 : if ( ! STRUCT_OR_UNION_20 -> VAR_94 -> METHOD_20 ) return - VAR_95 ; VAR_96 = STRUCT_OR_UNION_21 -> VAR_97 -> METHOD_21 ( VAR_98 , 1 ) ; break ; case VAR_99 : if ( ! STRUCT_OR_UNION_22 -> VAR_100 -> METHOD_22 ) return - VAR_101 ; VAR_102 = STRUCT_OR_UNION_23 -> VAR_103 -> METHOD_23 ( VAR_104 , 0 ) ; break ; default : METHOD_24 ( "EINVAL:nooperationprovided\\n" ) ; return - VAR_105 ; } if ( STRUCT_OR_UNION_24 != VAR_106 ) METHOD_25 ( STRUCT_OR_UNION_25 ) ; if ( VAR_107 != - VAR_108 ) { if ( METHOD_26 ( VAR_109 == - VAR_110 || VAR_111 == - VAR_112 || VAR_113 == - VAR_114 || VAR_115 == - VAR_116 ) ) VAR_117 = - VAR_118 ; METHOD_27 ( VAR_119 , VAR_120 , 0 ) ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 != VAR_2 ) ; METHOD_2 ( VAR_3 -> VAR_4 <= ( VAR_5 -> VAR_6 + VAR_7 -> VAR_8 ) ) ; METHOD_3 ( VAR_9 -> VAR_10 > 0 ) ; if ( VAR_11 -> VAR_12 == VAR_13 || VAR_14 -> VAR_15 == VAR_16 ) { if ( ( unsigned TYPE_2 ) VAR_17 -> VAR_18 [ 0 ] == ( unsigned TYPE_3 ) VAR_19 ) { VAR_20 -> VAR_21 = VAR_22 ; } else { VAR_23 -> VAR_24 = VAR_25 ; } if ( VAR_26 . VAR_27 > 1 ) { METHOD_4 ( VAR_28 , "%d:Clientusingthe%sprotocol\\n" , VAR_29 -> VAR_30 , METHOD_5 ( VAR_31 -> VAR_32 ) ) ; } } if ( VAR_33 -> VAR_34 == VAR_35 ) { if ( VAR_36 -> VAR_37 < sizeof ( VAR_38 -> VAR_39 ) ) { return 0 ; } else { TYPE_4 TYPE_5 if ( ( ( TYPE_6 ) ( VAR_40 -> VAR_41 ) ) % 8 != 0 ) { METHOD_6 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ; VAR_48 -> VAR_49 = VAR_50 -> VAR_51 ; if ( VAR_52 . VAR_53 > 1 ) { METHOD_7 ( VAR_54 , "%d:Realigninputbuffer\\n" , VAR_55 -> VAR_56 ) ; } } TYPE_7 * VAR_57 ; VAR_58 = ( TYPE_8 * ) VAR_59 -> VAR_60 ; if ( VAR_61 . VAR_62 > 1 ) { TYPE_9 VAR_63 ; METHOD_8 ( VAR_64 , "<%dReadbinaryprotocoldata:" , VAR_65 -> VAR_66 ) ; for ( VAR_67 = 0 ; VAR_68 < sizeof ( VAR_69 -> VAR_70 ) ; ++ VAR_71 ) { if ( VAR_72 % 4 == 0 ) { METHOD_9 ( VAR_73 , "\\n<%d" , VAR_74 -> VAR_75 ) ; } METHOD_10 ( VAR_76 , "0x%02x" , VAR_77 -> VAR_78 [ VAR_79 ] ) ; } METHOD_11 ( VAR_80 , "\\n" ) ; } VAR_81 -> VAR_82 = * VAR_83 ; VAR_84 -> VAR_85 . VAR_86 . VAR_87 = METHOD_12 ( VAR_88 -> VAR_89 . VAR_90 ) ; VAR_91 -> VAR_92 . VAR_93 . VAR_94 = METHOD_13 ( VAR_95 -> VAR_96 . VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 . VAR_101 = METHOD_14 ( VAR_102 -> VAR_103 . VAR_104 ) ; if ( VAR_105 -> VAR_106 . VAR_107 . VAR_108 != VAR_109 ) { if ( VAR_110 . VAR_111 ) { METHOD_15 ( VAR_112 , "Invalidmagic:%x\\n" , VAR_113 -> VAR_114 . VAR_115 . VAR_116 ) ; } METHOD_16 ( VAR_117 , VAR_118 ) ; return - 1 ; } VAR_119 -> VAR_120 = 0 ; VAR_121 -> VAR_122 = 0 ; VAR_123 -> VAR_124 = 0 ; if ( METHOD_17 ( VAR_125 ) != 0 ) { METHOD_18 ( VAR_126 , "SERVER_ERRORoutofmemory" ) ; return 0 ; } VAR_127 -> VAR_128 = VAR_129 -> VAR_130 . VAR_131 . VAR_132 ; VAR_133 -> VAR_134 = VAR_135 -> VAR_136 . VAR_137 . VAR_138 ; VAR_139 -> VAR_140 = VAR_141 -> VAR_142 . VAR_143 . VAR_144 ; VAR_145 -> VAR_146 = 0 ; METHOD_19 ( VAR_147 ) ; VAR_148 -> VAR_149 -= sizeof ( VAR_150 -> VAR_151 ) ; VAR_152 -> VAR_153 += sizeof ( VAR_154 -> VAR_155 ) ; } } else { TYPE_10 * VAR_156 , * VAR_157 ; if ( VAR_158 -> VAR_159 == 0 ) return 0 ; VAR_160 = METHOD_20 ( VAR_161 -> VAR_162 , '\\n' , VAR_163 -> VAR_164 ) ;  if ( ! VAR_165 )  return 0 ; VAR_166 = VAR_167 + 1 ; if ( ( VAR_168 - VAR_169 -> VAR_170 ) > 1 && * ( VAR_171 - 1 ) == '\\r' ) { VAR_172 -- ; } * VAR_173 = '\\0' ; METHOD_21 ( VAR_174 <= ( VAR_175 -> VAR_176 + VAR_177 -> VAR_178 ) ) ; METHOD_22 ( VAR_179 , VAR_180 -> VAR_181 ) ; VAR_182 -> VAR_183 -= ( VAR_184 - VAR_185 -> VAR_186 ) ; VAR_187 -> VAR_188 = VAR_189 ; METHOD_23 ( VAR_190 -> VAR_191 <= ( VAR_192 -> VAR_193 + VAR_194 -> VAR_195 ) ) ; } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 TYPE_3 if ( ! VAR_2 -> VAR_3 -> VAR_4 && VAR_5 -> VAR_6 && VAR_7 -> VAR_8 == VAR_9 -> VAR_10 -> VAR_11 ) { struct STRUCT_OR_UNION_1 * VAR_12 = VAR_13 ; struct STRUCT_OR_UNION_2 * VAR_14 = VAR_15 -> VAR_16 ; unsigned VAR_17 = VAR_18 -> VAR_19 ; VAR_20 = METHOD_1 ( VAR_21 -> VAR_22 [ 0 ] , METHOD_2 ( VAR_23 -> VAR_24 [ 0 ] . VAR_25 . VAR_26 ) ,  VAR_27 , ( TYPE_4 * * ) & VAR_28 ) ;  if ( VAR_29 || ! ( VAR_30 -> VAR_31 & VAR_32 ) ) return 0 ; METHOD_3 ( & VAR_33 -> VAR_34 , "Dual-RoleOTGdeviceon%sHNPport\\n" , ( VAR_35 == VAR_36 -> VAR_37 ) ? "" : "non-" ) ; if ( VAR_38 == VAR_39 -> VAR_40 ) { VAR_41 -> VAR_42 = 1 ; VAR_43 = METHOD_4 ( VAR_44 , METHOD_5 ( VAR_45 , 0 ) , VAR_46 , 0 , VAR_47 , 0 , VAR_48 , 0 , VAR_49 ) ; if ( VAR_50 < 0 ) { METHOD_6 ( & VAR_51 -> VAR_52 , "can\'tsetHNPmode:%d\\n" , VAR_53 ) ; VAR_54 -> VAR_55 = 0 ; } } else if ( VAR_56 -> VAR_57 == sizeof ( struct STRUCT_OR_UNION_3 ) ) { VAR_58 = METHOD_7 ( VAR_59 , METHOD_8 ( VAR_60 , 0 ) , VAR_61 , 0 , VAR_62 , 0 , VAR_63 , 0 , VAR_64 ) ; if ( VAR_65 < 0 ) METHOD_9 ( & VAR_66 -> VAR_67 , "seta_alt_hnp_supportfailed:%d\\n" , VAR_68 ) ; } } return VAR_69 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 * VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 = & VAR_6 -> VAR_7 ; unsigned TYPE_4 * VAR_8 = VAR_9 ; TYPE_5 VAR_10 ; TYPE_6 VAR_11 , VAR_12 ; TYPE_7 VAR_13 , VAR_14 , VAR_15 ; struct STRUCT_OR_UNION_3 * VAR_16 ; unsigned TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; struct STRUCT_OR_UNION_4 * VAR_19 ; TYPE_10 VAR_20 , VAR_21 ; TYPE_11 VAR_22 [ VAR_23 ] , VAR_24 [ VAR_25 ] ; unsigned VAR_26 = 0 ; METHOD_1 ( & VAR_27 -> VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 -> VAR_32 . VAR_33 != VAR_34 || VAR_35 -> VAR_36 . VAR_37 < VAR_38 || VAR_39 -> VAR_40 . VAR_41 > VAR_42 ) { METHOD_2 ( VAR_43 , "invaliddescriptorforconfigindex%d:" "type=0x%X,length=%d\\n" , VAR_44 , VAR_45 -> VAR_46 . VAR_47 , VAR_48 -> VAR_49 . VAR_50 ) ; return - VAR_51 ; } VAR_52 = VAR_53 -> VAR_54 . VAR_55 ; VAR_56 += VAR_57 -> VAR_58 . VAR_59 ; VAR_60 -= VAR_61 -> VAR_62 . VAR_63 ; VAR_64 = VAR_65 = VAR_66 -> VAR_67 . VAR_68 ; if ( VAR_69 > VAR_70 ) { METHOD_3 ( VAR_71 , "config%dhastoomanyinterfaces:%d," "usingmaximumallowed:%d\\n" , VAR_72 , VAR_73 , VAR_74 ) ; VAR_75 = VAR_76 ; } VAR_77 = 0 ; for ( ( VAR_78 = VAR_79 , VAR_80 = VAR_81 ) ; VAR_82 > 0 ; ( VAR_83 += VAR_84 -> VAR_85 , VAR_86 -= VAR_87 -> VAR_88 ) ) { if ( VAR_89 < sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_4 ( VAR_90 , "config%ddescriptorhas%dexcess" "byte%s,ignoring\\n" , VAR_91 , VAR_92 , METHOD_5 ( VAR_93 ) ) ; break ; } VAR_94 = ( struct STRUCT_OR_UNION_6 * ) VAR_95 ; if ( ( VAR_96 -> VAR_97 > VAR_98 ) || ( VAR_99 -> VAR_100 < 2 ) ) { METHOD_6 ( VAR_101 , "config%dhasaninvaliddescriptor" "oflength%d,skippingremainderoftheconfig\\n" , VAR_102 , VAR_103 -> VAR_104 ) ; break ; } if ( VAR_105 -> VAR_106 == VAR_107 ) { struct STRUCT_OR_UNION_7 * VAR_108 ; TYPE_12 VAR_109 ; VAR_110 = ( struct STRUCT_OR_UNION_8 * ) VAR_111 ; if ( VAR_112 -> VAR_113 < VAR_114 ) { METHOD_7 ( VAR_115 , "config%dhasaninvalid" "interfacedescriptoroflength%d," "skipping\\n" , VAR_116 , VAR_117 -> VAR_118 ) ; continue ; } VAR_119 = VAR_120 -> VAR_121 ; if ( ( VAR_122 -> VAR_123 & VAR_124 ) && VAR_125 >= VAR_126 ) { METHOD_8 ( VAR_127 , "config%dhasmoreinterface" "descriptors,thanitdeclaresin" "bNumInterfaces,ignoringinterface" "number:%d\\n" , VAR_128 , VAR_129 ) ; continue ; } if ( VAR_130 >= VAR_131 ) METHOD_9 ( VAR_132 , "config%dhasaninvalid" "interfacenumber:%dbutmaxis%d\\n" , VAR_133 , VAR_134 , VAR_135 - 1 ) ; for ( VAR_136 = 0 ; VAR_137 < VAR_138 ; ++ VAR_139 ) { if ( VAR_140 [ VAR_141 ] == VAR_142 ) break ; } if ( VAR_143 < VAR_144 ) { if ( VAR_145 [ VAR_146 ] < 255 ) ++ VAR_147 [ VAR_148 ] ; } else if ( VAR_149 < VAR_150 ) { VAR_151 [ VAR_152 ] = VAR_153 ; VAR_154 [ VAR_155 ] = 1 ; ++ VAR_156 ; } } else if ( VAR_157 -> VAR_158 == VAR_159 ) {  if ( VAR_160 == VAR_161 ) {  METHOD_10 ( VAR_162 , "foundmoreInterface" "AssociationDescriptors" "thanallocatedforin" "configuration%d\\n" , VAR_163 ) ; } else { VAR_164 -> VAR_165 [ VAR_166 ] =  ( struct STRUCT_OR_UNION_9  * ) VAR_167 ; VAR_168 ++ ; } } else if ( VAR_169 -> VAR_170 == VAR_171 || VAR_172 -> VAR_173 == VAR_174 ) METHOD_11 ( VAR_175 , "config%dcontainsanunexpected" "descriptoroftype0x%X,skipping\\n" , VAR_176 , VAR_177 -> VAR_178 ) ; } VAR_179 = VAR_180 - VAR_181 ; VAR_182 -> VAR_183 . VAR_184 = METHOD_12 ( VAR_185 - VAR_186 ) ; if ( VAR_187 != VAR_188 ) METHOD_13 ( VAR_189 , "config%dhas%dinterface%s,differentfrom" "thedescriptor\'svalue:%d\\n" , VAR_190 , VAR_191 , METHOD_14 ( VAR_192 ) , VAR_193 ) ; else if ( VAR_194 == 0 ) METHOD_15 ( VAR_195 , "config%dhasnointerfaces?\\n" , VAR_196 ) ; VAR_197 -> VAR_198 . VAR_199 = VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < VAR_204 ; ++ VAR_205 ) { for ( VAR_206 = 0 ; VAR_207 < VAR_208 ; ++ VAR_209 ) { if ( VAR_210 [ VAR_211 ] == VAR_212 ) break ; } if ( VAR_213 >= VAR_214 ) METHOD_16 ( VAR_215 , "config%dhasnointerfacenumber" "%d\\n" , VAR_216 , VAR_217 ) ; } for ( VAR_218 = 0 ; VAR_219 < VAR_220 ; ++ VAR_221 ) { VAR_222 = VAR_223 [ VAR_224 ] ; if ( VAR_225 > VAR_226 ) { METHOD_17 ( VAR_227 , "toomanyalternatesettingsfor" "config%dinterface%d:%d," "usingmaximumallowed:%d\\n" , VAR_228 , VAR_229 [ VAR_230 ] , VAR_231 , VAR_232 ) ; VAR_233 [ VAR_234 ] = VAR_235 = VAR_236 ; } VAR_237 = sizeof ( * VAR_238 ) + sizeof ( struct STRUCT_OR_UNION_10 ) * VAR_239 ; VAR_240 -> VAR_241 [ VAR_242 ] = VAR_243 = METHOD_18 ( VAR_244 , VAR_245 ) ; if ( ! VAR_246 ) return - VAR_247 ; METHOD_19 ( & VAR_248 -> VAR_249 ) ; } VAR_250 -> VAR_251 = VAR_252 ; VAR_253 = METHOD_20 ( VAR_254 , VAR_255 , VAR_256 , VAR_257 , & VAR_258 ) ; VAR_259 -> VAR_260 = VAR_261 ; if ( VAR_262 > 0 ) METHOD_21 ( VAR_263 , "skipped%ddescriptor%safter%s\\n" , VAR_264 , METHOD_22 ( VAR_265 ) , "configuration" ) ; VAR_266 += VAR_267 ; VAR_268 -= VAR_269 ; while ( VAR_270 > 0 ) { VAR_271 = METHOD_23 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 , VAR_276 , VAR_277 , VAR_278 ) ; if ( VAR_279 < 0 ) return VAR_280 ; VAR_281 += VAR_282 ; VAR_283 -= VAR_284 ; } for ( VAR_285 = 0 ; VAR_286 < VAR_287 ; ++ VAR_288 ) { VAR_289 = VAR_290 -> VAR_291 [ VAR_292 ] ; for ( VAR_293 = 0 ; VAR_294 < VAR_295 -> VAR_296 ; ++ VAR_297 ) { for ( VAR_298 = 0 ; VAR_299 < VAR_300 -> VAR_301 ; ++ VAR_302 ) { if ( VAR_303 -> VAR_304 [ VAR_305 ] . VAR_306 . VAR_307 == VAR_308 ) break ; } if ( VAR_309 >= VAR_310 -> VAR_311 ) METHOD_24 ( VAR_312 , "config%dinterface%dhasno" "altsetting%d\\n" , VAR_313 , VAR_314 [ VAR_315 ] , VAR_316 ) ; } } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 , * VAR_7 ; unsigned TYPE_2 VAR_8 ; TYPE_3 VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 , VAR_12 ;  if ( ! VAR_13 && VAR_14 -> VAR_15 >= VAR_16 )   return - VAR_17 ;  if ( VAR_18 -> VAR_19 < 1 ) return - VAR_20 ; VAR_21 = VAR_22 -> VAR_23 == 0 ? VAR_24 : ( VAR_25 -> VAR_26 & ( VAR_27 | VAR_28 | VAR_29 ) ) ; VAR_30 -> VAR_31 . VAR_32 = 0 ; METHOD_1 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_2 ( & VAR_35 -> VAR_36 ) ; VAR_37 = METHOD_3 ( VAR_38 , & VAR_39 -> VAR_40 ) ; VAR_41 = 0 ; if ( VAR_42 ) { if ( VAR_43 ) VAR_44 = METHOD_4 ( VAR_45 , VAR_46 ) ; else VAR_47 = - VAR_48 ; } else { if ( VAR_49 ) VAR_50 = - VAR_51 ; } METHOD_5 ( & VAR_52 -> VAR_53 ) ; if ( VAR_54 < 0 ) return VAR_55 ; METHOD_6 ( & VAR_56 . VAR_57 , & VAR_58 -> VAR_59 , sizeof ( VAR_60 -> VAR_61 ) ) ; VAR_62 . VAR_63 = VAR_64 -> VAR_65 ? VAR_66 -> VAR_67 : 1 ; VAR_68 |= VAR_69 ; if ( VAR_70 -> VAR_71 == VAR_72 ) VAR_73 . VAR_74 = VAR_75 ; else VAR_76 . VAR_77 = VAR_78 ; if ( VAR_79 & VAR_80 ) VAR_81 . VAR_82 = VAR_83 ; if ( VAR_84 & VAR_85 ) VAR_86 . VAR_87 = VAR_88 ; if ( VAR_89 & VAR_90 ) { VAR_91 . VAR_92 . VAR_93 = VAR_94 ; VAR_95 |= VAR_96 ; } switch ( VAR_97 -> VAR_98 ) { case VAR_99 : case VAR_100 : VAR_101 = sizeof ( TYPE_5 ) ; if ( VAR_102 -> VAR_103 > 128 ) return - VAR_104 ; break ; case VAR_105 : VAR_106 = sizeof ( TYPE_6 TYPE_7 ) ; if ( VAR_107 -> VAR_108 > 64 ) return - VAR_109 ; break ; case VAR_110 : VAR_111 = sizeof ( unsigned TYPE_8 ) ; if ( VAR_112 -> VAR_113 > 128 || VAR_114 -> VAR_115 . VAR_116 . VAR_117 == 0 ) return - VAR_118 ; break ; case VAR_119 : VAR_120 = sizeof ( unsigned TYPE_9 ) ; if ( VAR_121 -> VAR_122 > 512 ) return - VAR_123 ; break ; case VAR_124 : VAR_125 = sizeof ( struct STRUCT_OR_UNION_5 ) ; if ( VAR_126 -> VAR_127 != 1 ) return - VAR_128 ; break ; default : return - VAR_129 ; } VAR_130 *= VAR_131 -> VAR_132 ; VAR_133 = METHOD_7 ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_134 , VAR_135 ) ; if ( VAR_136 == VAR_137 ) return - VAR_138 ; VAR_139 -> VAR_140 = VAR_141 ; VAR_142 -> VAR_143 = * VAR_144 ; VAR_145 -> VAR_146 . VAR_147 = 0 ; VAR_148 -> VAR_149 = ( TYPE_10 * ) VAR_150 + sizeof ( * VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; if ( VAR_155 -> VAR_156 . VAR_157 == VAR_158 ) { VAR_159 = METHOD_8 ( VAR_160 ) ; if ( VAR_161 < 0 ) { METHOD_9 ( VAR_162 ) ; return VAR_163 ; } } VAR_164 . VAR_165 = VAR_166 ; VAR_167 = METHOD_10 ( & VAR_168 , VAR_169 ) ; if ( VAR_170 == VAR_171 ) { METHOD_11 ( VAR_172 -> VAR_173 ) ; METHOD_12 ( VAR_174 ) ; return - VAR_175 ; } VAR_176 -> VAR_177 = VAR_178 ; for ( VAR_179 = 0 ; VAR_180 < VAR_181 -> VAR_182 ; VAR_183 ++ ) VAR_184 -> VAR_185 [ VAR_186 ] . VAR_187 = VAR_188 ; VAR_189 = METHOD_13 ( VAR_190 , VAR_191 ) ; if ( VAR_192 < 0 ) return VAR_193 ; METHOD_14 ( & VAR_194 -> VAR_195 ) ; VAR_196 -> VAR_197 ++ ; METHOD_15 ( & VAR_198 -> VAR_199 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , const TYPE_2 * VAR_3 [ ] ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; if ( ! METHOD_1 ( VAR_8 , VAR_9 ) ) return 0 ; if ( METHOD_2 ( VAR_10 -> VAR_11 ) == 3 ) {  METHOD_3 ( VAR_12 , VAR_13 , VAR_14 , "Mixingclientandserverprotocol" ) ;  return 0 ; } VAR_15 = METHOD_4 ( VAR_16 . VAR_17 ) ; if ( VAR_18 == VAR_19 || ! METHOD_5 ( VAR_20 ) ) { METHOD_6 ( VAR_21 , METHOD_7 ( VAR_22 ) , VAR_23 . VAR_24 , METHOD_8 ( VAR_25 -> VAR_26 ) ? "*" : VAR_27 -> VAR_28 ) ; return 0 ; } if ( VAR_29 -> VAR_30 -> VAR_31 ) { * VAR_32 -> VAR_33 -> VAR_34 = '\\0' ; VAR_35 -> VAR_36 -> VAR_37 = 0 ; } if ( METHOD_9 ( VAR_38 [ 1 ] ) > 400 ) { METHOD_10 ( VAR_39 , METHOD_11 ( VAR_40 ) , VAR_41 . VAR_42 , METHOD_12 ( VAR_43 -> VAR_44 ) ? "*" : VAR_45 -> VAR_46 ) ; return 0 ; } if ( ! * VAR_47 -> VAR_48 ) { METHOD_13 ( VAR_49 -> VAR_50 , METHOD_14 ( ) ) ; METHOD_15 ( VAR_51 -> VAR_52 , VAR_53 ) ; } if ( * VAR_54 -> VAR_55 -> VAR_56 ) VAR_57 = METHOD_16 ( VAR_58 -> VAR_59 -> VAR_60 ) ; if ( VAR_61 == VAR_62 ) { METHOD_17 ( VAR_63 , ":%sENCAP%sSASL%s%sH%s%s" , VAR_64 . VAR_65 , VAR_66 -> VAR_67 -> VAR_68 , VAR_69 -> VAR_70 , VAR_71 -> VAR_72 , VAR_73 -> VAR_74 , VAR_75 -> VAR_76 ) ; if ( ! METHOD_18 ( VAR_77 [ 1 ] , "EXTERNAL" ) && VAR_78 -> VAR_79 != VAR_80 ) METHOD_19 ( VAR_81 , ":%sENCAP%sSASL%s%sS%s%s" , VAR_82 . VAR_83 , VAR_84 -> VAR_85 -> VAR_86 , VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , VAR_91 [ 1 ] , VAR_92 -> VAR_93 ) ; else METHOD_20 ( VAR_94 , ":%sENCAP%sSASL%s%sS%s" , VAR_95 . VAR_96 , VAR_97 -> VAR_98 -> VAR_99 , VAR_100 -> VAR_101 , VAR_102 -> VAR_103 , VAR_104 [ 1 ] ) ; METHOD_21 ( VAR_105 -> VAR_106 -> VAR_107 , VAR_108 -> VAR_109 , VAR_110 ) ; } else METHOD_22 ( VAR_111 , ":%sENCAP%sSASL%s%sC%s" , VAR_112 . VAR_113 , VAR_114 -> VAR_115 -> VAR_116 , VAR_117 -> VAR_118 , VAR_119 -> VAR_120 , VAR_121 [ 1 ] ) ; VAR_122 -> VAR_123 -> VAR_124 ++ ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 ; TYPE_4 VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 = VAR_13 ; TYPE_7 VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_1 STRUCT_OR_UNION_2 ; VAR_16 -> VAR_17 . VAR_18 = VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = VAR_36 -> VAR_37 . VAR_38 + VAR_39 ; VAR_40 -> VAR_41 = 1 ; if ( VAR_42 > 0 ) METHOD_1 ( VAR_43 -> VAR_44 . VAR_45 , VAR_46 , VAR_47 ) ; else { VAR_48 = METHOD_2 ( VAR_49 , 1 ) ; if ( VAR_50 != VAR_51 ) return VAR_52 ; } switch ( VAR_53 ) { case VAR_54 : case VAR_55 : case VAR_56 : VAR_57 = VAR_58 = 2 ; break ; case VAR_59 : VAR_60 = VAR_61 = 4 ; break ; TYPE_8 TYPE_9 case VAR_62 : VAR_63 = 4 ; VAR_64 = 8 ; break ; default : return VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; for ( ; ; ) { switch ( VAR_72 -> VAR_73 = METHOD_3 ( VAR_74 , VAR_75 ) ) { case 0x66 : VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ^ 6 ; break ; case 0x67 : if ( VAR_81 == VAR_82 ) VAR_83 -> VAR_84 = VAR_85 ^ 12 ; else VAR_86 -> VAR_87 = VAR_88 ^ 6 ; break ; case 0x26 : case 0x2e : case 0x36 : case 0x3e : VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = ( VAR_93 -> VAR_94 >> 3 ) & 3 ; break ; case 0x64 : case 0x65 : VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 -> VAR_100 & 7 ; break ; case 0x40 ... 0x4f : if ( VAR_101 != VAR_102 ) goto VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; continue ; case 0xf0 : VAR_108 -> VAR_109 = 1 ; break ; case 0xf2 : case 0xf3 : VAR_110 -> VAR_111 = VAR_112 -> VAR_113 ; break ; default : goto VAR_114 ; } VAR_115 -> VAR_116 = 0 ; } VAR_117 : if ( VAR_118 -> VAR_119 & 8 ) VAR_120 -> VAR_121 = 8 ; STRUCT_OR_UNION_3 = VAR_122 [ VAR_123 -> VAR_124 ] ; if ( VAR_125 -> VAR_126 == 0x0f ) { VAR_127 -> VAR_128 = 2 ; VAR_129 -> VAR_130 = METHOD_4 ( VAR_131 , VAR_132 ) ; STRUCT_OR_UNION_4 = VAR_133 [ VAR_134 -> VAR_135 ] ; if ( VAR_136 -> VAR_137 == 0x38 ) { VAR_138 -> VAR_139 = 3 ; VAR_140 -> VAR_141 = METHOD_5 ( VAR_142 , VAR_143 ) ; STRUCT_OR_UNION_5 = VAR_144 [ VAR_145 -> VAR_146 ] ; } } VAR_147 -> VAR_148 = STRUCT_OR_UNION_6 . VAR_149 ; if ( VAR_150 -> VAR_151 & VAR_152 ) VAR_153 -> VAR_154 = METHOD_6 ( VAR_155 , VAR_156 ) ; if ( VAR_157 -> VAR_158 == 1 && ( VAR_159 -> VAR_160 == 0xc5 || VAR_161 -> VAR_162 == 0xc4 ) && ( VAR_163 == VAR_164 || ( VAR_165 -> VAR_166 & 0xc0 ) == 0xc0 ) ) { VAR_167 -> VAR_168 = VAR_169 ; } while ( VAR_170 -> VAR_171 & VAR_172 ) { switch ( VAR_173 -> VAR_174 & VAR_175 ) { case VAR_176 : VAR_177 = ( VAR_178 -> VAR_179 >> 3 ) & 7 ; STRUCT_OR_UNION_7 = STRUCT_OR_UNION_8 . VAR_180 . VAR_181 [ VAR_182 ] ; break ; case VAR_183 : VAR_184 = ( VAR_185 -> VAR_186 >> 3 ) & 7 ; if ( ( VAR_187 -> VAR_188 >> 6 ) == 3 ) STRUCT_OR_UNION_9 = STRUCT_OR_UNION_10 . VAR_189 . VAR_190 -> VAR_191 [ VAR_192 ] ; else STRUCT_OR_UNION_11 = STRUCT_OR_UNION_12 . VAR_193 . VAR_194 -> VAR_195 [ VAR_196 ] ; break ; case VAR_197 : VAR_198 = VAR_199 -> VAR_200 & 7 ; STRUCT_OR_UNION_13 = STRUCT_OR_UNION_14 . VAR_201 . VAR_202 [ VAR_203 ] ; break ; case VAR_204 : if ( VAR_205 -> VAR_206 && VAR_207 ) return VAR_208 ; VAR_209 = VAR_210 ? 0x66 : VAR_211 -> VAR_212 ; switch ( VAR_213 ) { case 0x00 : STRUCT_OR_UNION_15 = STRUCT_OR_UNION_16 . VAR_214 . VAR_215 -> VAR_216 ; break ; case 0x66 : STRUCT_OR_UNION_17 = STRUCT_OR_UNION_18 . VAR_217 . VAR_218 -> VAR_219 ; break ; case 0xf2 : STRUCT_OR_UNION_19 = STRUCT_OR_UNION_20 . VAR_220 . VAR_221 -> VAR_222 ; break ; case 0xf3 : STRUCT_OR_UNION_21 = STRUCT_OR_UNION_22 . VAR_223 . VAR_224 -> VAR_225 ; break ; } break ; case VAR_226 : if ( VAR_227 -> VAR_228 > 0xbf ) STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 . VAR_229 . VAR_230 -> VAR_231 [ VAR_232 -> VAR_233 - 0xc0 ] ; else STRUCT_OR_UNION_25 = STRUCT_OR_UNION_26 . VAR_234 . VAR_235 -> VAR_236 [ ( VAR_237 -> VAR_238 >> 3 ) & 7 ] ; break ; case VAR_239 : if ( ( VAR_240 -> VAR_241 >> 6 ) == 3 ) STRUCT_OR_UNION_27 = STRUCT_OR_UNION_28 . VAR_242 . VAR_243 -> VAR_244 ; else STRUCT_OR_UNION_29 = STRUCT_OR_UNION_30 . VAR_245 . VAR_246 -> VAR_247 ; break ; case VAR_248 : if ( VAR_249 -> VAR_250 == VAR_251 ) STRUCT_OR_UNION_31 = STRUCT_OR_UNION_32 . VAR_252 . VAR_253 -> VAR_254 ; else STRUCT_OR_UNION_33 = STRUCT_OR_UNION_34 . VAR_255 . VAR_256 -> VAR_257 ; break ; default : return VAR_258 ; } VAR_259 -> VAR_260 &= ~ ( TYPE_10 ) VAR_261 ; VAR_262 -> VAR_263 |= STRUCT_OR_UNION_35 . VAR_264 ; } if ( VAR_265 -> VAR_266 == 0 ) return VAR_267 ; VAR_268 -> VAR_269 = STRUCT_OR_UNION_36 . VAR_270 . VAR_271 ; if ( METHOD_7 ( VAR_272 -> VAR_273 ) && METHOD_8 ( ! ( VAR_274 -> VAR_275 & VAR_276 ) ) ) return VAR_277 ; if ( METHOD_9 ( VAR_278 -> VAR_279 & ( VAR_280 | VAR_281 | VAR_282 | VAR_283 | VAR_284 | VAR_285 | VAR_286 | VAR_287 | VAR_288 ) ) ) { VAR_289 -> VAR_290 = STRUCT_OR_UNION_37 . VAR_291 ; VAR_292 -> VAR_293 = STRUCT_OR_UNION_38 . VAR_294 ; if ( VAR_295 -> VAR_296 & VAR_297 ) return VAR_298 ; if ( VAR_299 == VAR_300 ) { if ( VAR_301 -> VAR_302 == 4 && ( VAR_303 -> VAR_304 & VAR_305 ) ) VAR_306 -> VAR_307 = 8 ; else if ( VAR_308 -> VAR_309 & VAR_310 ) VAR_311 -> VAR_312 = 8 ; } if ( VAR_313 -> VAR_314 & VAR_315 ) { if ( VAR_316 == VAR_317 ) VAR_318 -> VAR_319 = 8 ; else VAR_320 -> VAR_321 = 4 ; } if ( ( VAR_322 -> VAR_323 & VAR_324 ) && VAR_325 -> VAR_326 == 2 ) VAR_327 -> VAR_328 = 4 ; if ( VAR_329 -> VAR_330 & VAR_331 ) VAR_332 -> VAR_333 = 16 ; else if ( VAR_334 -> VAR_335 & VAR_336 ) VAR_337 -> VAR_338 = 8 ; } if ( VAR_339 -> VAR_340 & VAR_341 ) { VAR_342 = METHOD_10 ( VAR_343 , & VAR_344 -> VAR_345 ) ; if ( ! VAR_346 ) { VAR_347 = VAR_348 ; VAR_349 -> VAR_350 = VAR_351 -> VAR_352 ; } } else if ( VAR_353 -> VAR_354 & VAR_355 ) VAR_356 = METHOD_11 ( VAR_357 , & VAR_358 -> VAR_359 ) ; if ( VAR_360 != VAR_361 ) goto VAR_362 ; if ( ! VAR_363 ) VAR_364 -> VAR_365 = VAR_366 ; VAR_367 -> VAR_368 . VAR_369 . VAR_370 . VAR_371 = VAR_372 -> VAR_373 ; VAR_374 = METHOD_12 ( VAR_375 , & VAR_376 -> VAR_377 , ( VAR_378 -> VAR_379 >> VAR_380 ) & VAR_381 ) ; if ( VAR_382 != VAR_383 ) goto VAR_384 ; VAR_385 = METHOD_13 ( VAR_386 , & VAR_387 -> VAR_388 , ( VAR_389 -> VAR_390 >> VAR_391 ) & VAR_392 ) ; if ( VAR_393 != VAR_394 ) goto VAR_395 ; VAR_396 = METHOD_14 ( VAR_397 , & VAR_398 -> VAR_399 , ( VAR_400 -> VAR_401 >> VAR_402 ) & VAR_403 ) ;  if ( VAR_404 -> VAR_405 )  VAR_406 -> VAR_407 -> VAR_408 . VAR_409 . VAR_410 = METHOD_15 ( VAR_411 , VAR_412 -> VAR_413 -> VAR_414 . VAR_415 . VAR_416 + VAR_417 -> VAR_418 ) ; VAR_419 : return ( VAR_420 != VAR_421 ) ? VAR_422 : VAR_423 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 . VAR_7 . VAR_8 ; TYPE_2 VAR_9 ; METHOD_1 ( & VAR_10 -> VAR_11 . VAR_12 , & VAR_13 , VAR_14 ) ; VAR_15 = METHOD_2 ( & VAR_16 , VAR_17 ,  VAR_18 -> VAR_19 . VAR_20 . VAR_21 , 0 , 0 ) ;  if ( VAR_22 ) goto VAR_23 ; VAR_24 -> VAR_25 . VAR_26 = METHOD_3 ( VAR_27 , VAR_28 ) ; VAR_29 -> VAR_30 . VAR_31 = METHOD_4 ( VAR_32 , VAR_33 ) ; METHOD_5 ( & VAR_34 , VAR_35 -> VAR_36 ) ; METHOD_6 ( & VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 ) ; METHOD_7 ( VAR_42 , & VAR_43 , & VAR_44 ) ; METHOD_8 ( & VAR_45 ) ; VAR_46 : VAR_47 -> VAR_48 . VAR_49 . VAR_50 = VAR_51 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 -> VAR_2 = VAR_3 ; VAR_4 -> VAR_5 = & VAR_6 ; METHOD_1 ( VAR_7 ) ; VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 |= VAR_13 ; VAR_14 -> VAR_15 |= VAR_16 ; VAR_17 -> VAR_18 |= VAR_19 ; VAR_20 -> VAR_21 &= ~ VAR_22 ;  VAR_23 -> VAR_24 &= ~ VAR_25 ;  METHOD_2 ( VAR_26 -> VAR_27 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 = VAR_4 ; TYPE_4 VAR_5 , VAR_6 = 0 , VAR_7 , VAR_8 ; TYPE_5 VAR_9 , VAR_10 = VAR_11 ; TYPE_6 VAR_12 ; unsigned TYPE_7 VAR_13 ; TYPE_8 * VAR_14 = & VAR_15 -> VAR_16 [ 0 ] ; TYPE_9 * VAR_17 = & VAR_18 -> VAR_19 ; VAR_20 -> VAR_21 -> VAR_22 . VAR_23 = VAR_24 ; METHOD_1 ( VAR_25 ) ; for ( VAR_26 = VAR_27 ; VAR_28 <= VAR_29 ; VAR_30 ++ ) { VAR_31 -> VAR_32 -> VAR_33 . VAR_34 = VAR_35 ; METHOD_2 ( VAR_36 , VAR_37 -> VAR_38 . VAR_39 - VAR_40 -> VAR_41 . VAR_42 , VAR_43 -> VAR_44 . VAR_45 - 1 , VAR_46 -> VAR_47 . VAR_48 , VAR_49 -> VAR_50 , 16 ) ;  VAR_51 = METHOD_3  ( * ( VAR_52 -> VAR_53 ) , VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , 16 , & VAR_58 ) ; VAR_59 = VAR_60 -> VAR_61 [ VAR_62 -> VAR_63 ] [ VAR_64 ] ; VAR_65 = METHOD_4 ( VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , VAR_70 , VAR_71 ) ; if ( VAR_72 > VAR_73 ) { VAR_74 = VAR_75 ; VAR_76 = VAR_77 ; VAR_78 = VAR_79 ; VAR_80 = VAR_81 ; } } VAR_82 -> VAR_83 -> VAR_84 . VAR_85 = VAR_86 ; VAR_87 = METHOD_5 ( VAR_88 , & VAR_89 , & VAR_90 ) ; if ( VAR_91 < VAR_92 ) { VAR_93 -> VAR_94 -> VAR_95 . VAR_96 = VAR_97 ; VAR_98 = VAR_99 ; } * VAR_100 = VAR_101 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; METHOD_1 ( "InitializingENC624J600Ethernetcontroller...\\r\\n" ) ; VAR_3 -> VAR_4 -> METHOD_2 ( ) ; VAR_5 -> VAR_6 -> METHOD_3 ( ) ; VAR_7 = ( TYPE_4 * ) VAR_8 -> VAR_9 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = METHOD_4 ( VAR_15 ) ; if ( VAR_16 -> VAR_17 == VAR_18 ) { return VAR_19 ; } METHOD_5 ( VAR_20 ) ;  METHOD_6 ( VAR_21 , VAR_22 , VAR_23 | VAR_24 ) ;  if ( METHOD_7 ( & VAR_25 -> VAR_26 , & VAR_27 ) ) {  VAR_28 = METHOD_8 ( VAR_29 , VAR_30 ) ;  VAR_31 -> VAR_32 . VAR_33 [ 0 ] = METHOD_9 ( VAR_34 ) ;  VAR_35 = METHOD_10 ( VAR_36 , VAR_37 ) ;  VAR_38 -> VAR_39 . VAR_40 [ 1 ] = METHOD_11 ( VAR_41 ) ;  VAR_42 = METHOD_12 ( VAR_43 , VAR_44 ) ;  VAR_45 -> VAR_46 . VAR_47 [ 2 ] = METHOD_13 ( VAR_48 ) ; METHOD_14 ( & VAR_49 -> VAR_50 , & VAR_51 -> VAR_52 ) ; } else { VAR_53 = METHOD_15 ( VAR_54 -> VAR_55 . VAR_56 [ 0 ] ) ;  METHOD_16 ( VAR_57 , VAR_58 , VAR_59 ) ;  VAR_60 = METHOD_17 ( VAR_61 -> VAR_62 . VAR_63 [ 1 ] ) ;  METHOD_18 ( VAR_64 , VAR_65 , VAR_66 ) ;  VAR_67 = METHOD_19 ( VAR_68 -> VAR_69 . VAR_70 [ 2 ] ) ;  METHOD_20 ( VAR_71 , VAR_72 , VAR_73 ) ;  }  METHOD_21 ( VAR_74 , VAR_75 , VAR_76 ) ;   METHOD_22 ( VAR_77 , VAR_78 , VAR_79 ) ;   METHOD_23 ( VAR_80 , VAR_81 , VAR_82 |  VAR_83 | VAR_84 | VAR_85 | VAR_86 ) ; METHOD_24 ( VAR_87 , VAR_88 , 0x0000 ) ;  METHOD_25 ( VAR_89 , VAR_90 , 0x0000 ) ;   METHOD_26 ( VAR_91 , VAR_92 , 0x0000 ) ;   METHOD_27 ( VAR_93 , VAR_94 , 0x0000 ) ;   METHOD_28 ( VAR_95 , VAR_96 ,  VAR_97 | VAR_98 | VAR_99 | VAR_100 ) ; METHOD_29 ( VAR_101 , VAR_102 , VAR_103 ) ;  METHOD_30 ( VAR_104 , VAR_105 , VAR_106 |  VAR_107 | VAR_108 | VAR_109 | VAR_110 | VAR_111 ) ; METHOD_31 ( VAR_112 , VAR_113 , 0x0000 ) ;  METHOD_32 ( VAR_114 , VAR_115 , VAR_116 |  VAR_117 | VAR_118 | VAR_119 | VAR_120 ) ;  METHOD_33 ( VAR_121 , VAR_122 , VAR_123 ) ;  METHOD_34 ( VAR_124 ) ; METHOD_35 ( VAR_125 ) ; METHOD_36 ( & VAR_126 -> VAR_127 ) ; VAR_128 -> VAR_129 = VAR_130 ; METHOD_37 ( & VAR_131 ) ; return VAR_132 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , ... ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ;  VAR_5 = METHOD_1 ( ( TYPE_6 * ) VAR_6 -> VAR_7 ) ;   VAR_8 = ( ( TYPE_7 * ) VAR_9 -> VAR_10 ) + VAR_11 ;   VAR_12 = sizeof ( VAR_13 -> VAR_14 ) - VAR_15 ;  METHOD_2 ( VAR_16 , VAR_17 ) ; METHOD_3 ( VAR_18 , VAR_19 , VAR_20 , VAR_21 ) ; METHOD_4 ( VAR_22 ) ; VAR_23 [ VAR_24 - 1 ] = 0 ;  VAR_25 -> VAR_26 = METHOD_5 ( ( TYPE_8 * ) VAR_27 -> VAR_28 ) ;  return ; }
static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( "arptables:loophook%upos%u%08X.\\n" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ;  if ( ( VAR_38 -> VAR_39 == sizeof ( struct STRUCT_OR_UNION_4 ) &&  ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) &&  VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) ||  VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( "mark_source_chains:bad" "negativeverdict(%i)\\n" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; VAR_67 = VAR_68 ; VAR_69 = VAR_70 -> VAR_71 . VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = 0 ; if ( VAR_76 == VAR_77 ) goto VAR_78 ; VAR_79 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_80 + VAR_81 ) ; } while ( VAR_82 == VAR_83 + VAR_84 -> VAR_85 ) ; VAR_86 = VAR_87 -> VAR_88 ; VAR_89 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_90 + VAR_91 + VAR_92 ) ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 += VAR_98 ; } else { TYPE_8 VAR_99 = VAR_100 -> VAR_101 ; if ( METHOD_7 ( VAR_102 -> VAR_103 . VAR_104 . VAR_105 . VAR_106 , VAR_107 ) == 0 && VAR_108 >= 0 ) { if ( VAR_109 > VAR_110 -> VAR_111 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_8 ( "mark_source_chains:" "badverdict(%i)\\n" , VAR_112 ) ; return 0 ; } METHOD_9 ( "Jumprule%u->%u\\n" , VAR_113 , VAR_114 ) ; } else { VAR_115 = VAR_116 + VAR_117 -> VAR_118 ; } VAR_119 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_120 + VAR_121 ) ; VAR_122 -> VAR_123 . VAR_124 = VAR_125 ; VAR_126 = VAR_127 ; } } VAR_128 : METHOD_10 ( "Finishedchain%u\\n" , VAR_129 ) ; } return 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 ) { TYPE_2 * TYPE_3 , * VAR_1 , * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , VAR_7 [ 228 ] ; unsigned TYPE_4 * VAR_8 = VAR_9 , * VAR_10 = VAR_11 ; TYPE_5 VAR_12 , VAR_13 , VAR_14 ; TYPE_6 VAR_15 , VAR_16 = VAR_17 ; TYPE_7 VAR_18 , VAR_19 ; TYPE_8 * VAR_20 ; VAR_21 = METHOD_1 ( VAR_22 , 4 ) ; if ( ! VAR_23 || ! METHOD_2 ( VAR_24 ) ) goto VAR_25 ; VAR_26 = METHOD_3 ( VAR_27 ) ; TYPE_9 = METHOD_4 ( VAR_28 , 0 ) ; VAR_29 = METHOD_5 ( VAR_30 , 1 ) ; VAR_31 = METHOD_6 ( VAR_32 , 2 ) ; VAR_33 = METHOD_7 ( VAR_34 , 3 ) ; VAR_35 = METHOD_8 ( VAR_36 , 5 ) ; VAR_37 = METHOD_9 ( VAR_38 , 6 ) ; VAR_39 = METHOD_10 ( VAR_40 , 7 ) ; VAR_41 = METHOD_11 ( METHOD_12 ( VAR_42 , 8 ) ) ;  if ( ! TYPE_10 || ! VAR_43 || ! VAR_44 || ! VAR_45 || ! VAR_46 || ! VAR_47 || ! VAR_48 ) {   if ( TYPE_11 )  METHOD_13 ( TYPE_12 ) ; if ( VAR_49 ) METHOD_14 ( VAR_50 ) ; if ( VAR_51 ) METHOD_15 ( VAR_52 ) ; goto VAR_53 ; } METHOD_16 ( & STRUCT_OR_UNION_2 -> VAR_54 ) ; METHOD_17 ( STRUCT_OR_UNION_3 -> VAR_55 . TYPE_13 ) ; STRUCT_OR_UNION_4 -> VAR_56 . TYPE_14 = TYPE_15 ; METHOD_18 ( STRUCT_OR_UNION_5 -> VAR_57 , 65 , "%s" , VAR_58 ) ; VAR_59 = METHOD_19 ( VAR_60 ) / 2 ; VAR_61 = METHOD_20 ( VAR_62 ) / 2 ; METHOD_21 ( STRUCT_OR_UNION_6 -> VAR_63 , 9 , "%s" , VAR_64 ) ; METHOD_22 ( STRUCT_OR_UNION_7 -> VAR_65 , 9 , "%s" , VAR_66 ) ; METHOD_23 ( STRUCT_OR_UNION_8 -> VAR_67 , 9 , "%s" , VAR_68 ) ; STRUCT_OR_UNION_9 -> VAR_69 . VAR_70 = VAR_71 ; VAR_72 = STRUCT_OR_UNION_10 -> VAR_73 = VAR_74 + STRUCT_OR_UNION_11 -> VAR_75 + STRUCT_OR_UNION_12 -> VAR_76 + VAR_77 ; STRUCT_OR_UNION_13 -> VAR_78 = VAR_79 + STRUCT_OR_UNION_14 -> VAR_80 ; for ( VAR_81 = 0 ; VAR_82 < STRUCT_OR_UNION_15 -> VAR_83 ; VAR_84 ++ ) METHOD_24 ( STRUCT_OR_UNION_16 -> VAR_85 . VAR_86 [ VAR_87 ] ) ; if ( VAR_88 ) { STRUCT_OR_UNION_17 -> VAR_89 . VAR_90 = METHOD_25 ( STRUCT_OR_UNION_18 -> VAR_91 . VAR_92 , sizeof ( TYPE_16 * ) * VAR_93 + 1 ) ; for ( VAR_94 = 0 ; VAR_95 < VAR_96 ; VAR_97 ++ ) { TYPE_17 * VAR_98 = METHOD_26 ( VAR_99 , VAR_100 ) ; STRUCT_OR_UNION_19 -> VAR_101 . VAR_102 [ VAR_103 ] = METHOD_27 ( 32 ) ; if ( METHOD_28 ( ! STRUCT_OR_UNION_20 -> VAR_104 . VAR_105 [ VAR_106 ] ) ) METHOD_29 ( 1 , "Failedtomallocpoolsworkmerkle_bin" ) ; if ( VAR_107 ) METHOD_30 ( VAR_108 , "merkle%d:%s" , VAR_109 , VAR_110 ) ; VAR_111 = METHOD_31 ( STRUCT_OR_UNION_21 -> VAR_112 . VAR_113 [ VAR_114 ] , VAR_115 , 32 ) ; METHOD_32 ( VAR_116 ) ; if ( METHOD_33 ( ! VAR_117 ) ) { METHOD_34 ( VAR_118 , "Failedtoconvertmerkletomerkle_bininparse_notify" ) ; goto VAR_119 ; } } } STRUCT_OR_UNION_22 -> VAR_120 = VAR_121 ; if ( VAR_122 ) STRUCT_OR_UNION_23 -> VAR_123 = 0 ; if 0 VAR_124 = METHOD_35 ( STRUCT_OR_UNION_24 -> VAR_125 ) + METHOD_36 ( STRUCT_OR_UNION_25 -> VAR_126 ) ; 32 + METHOD_37 ( STRUCT_OR_UNION_26 -> VAR_127 ) + METHOD_38 ( STRUCT_OR_UNION_27 -> VAR_128 ) + 8 + 96 ; METHOD_39 ( VAR_129 , 225 , "%s%s%s%s%s%s%s" , STRUCT_OR_UNION_28 -> VAR_130 , STRUCT_OR_UNION_29 -> VAR_131 , VAR_132 , STRUCT_OR_UNION_30 -> VAR_133 , STRUCT_OR_UNION_31 -> VAR_134 , "00000000" , VAR_135 ) ; VAR_136 = METHOD_40 ( STRUCT_OR_UNION_32 -> VAR_137 , VAR_138 , 112 ) ; if ( METHOD_41 ( ! VAR_139 ) ) { METHOD_42 ( VAR_140 , "Failedtoconvertheadertoheader_bininparse_notify" ) ; goto VAR_141 ; } VAR_142 = METHOD_43 ( VAR_143 ) ; VAR_144 = METHOD_44 ( VAR_145 , VAR_146 , VAR_147 ) ; if ( METHOD_45 ( ! VAR_148 ) ) { METHOD_46 ( VAR_149 , "Failedtoconvertcb1tocb1_bininparse_notify" ) ; goto VAR_150 ; } VAR_151 = METHOD_47 ( VAR_152 ) ; VAR_153 = METHOD_48 ( VAR_154 , VAR_155 , VAR_156 ) ; if ( METHOD_49 ( ! VAR_157 ) ) { METHOD_50 ( VAR_158 , "Failedtoconvertcb2tocb2_bininparse_notify" ) ; goto VAR_159 ; } METHOD_51 ( STRUCT_OR_UNION_33 -> VAR_160 ) ; METHOD_52 ( & VAR_161 ) ; STRUCT_OR_UNION_34 -> VAR_162 = METHOD_53 ( VAR_163 , 1 ) ; if ( METHOD_54 ( ! STRUCT_OR_UNION_35 -> VAR_164 ) ) METHOD_55 ( 1 , "Failedtocallocpoolcoinbaseinparse_notify" ) ; METHOD_56 ( STRUCT_OR_UNION_36 -> VAR_165 , VAR_166 , VAR_167 ) ; METHOD_57 ( STRUCT_OR_UNION_37 -> VAR_168 + VAR_169 , STRUCT_OR_UNION_38 -> VAR_170 , STRUCT_OR_UNION_39 -> VAR_171 ) ; METHOD_58 ( STRUCT_OR_UNION_40 -> VAR_172 + VAR_173 + STRUCT_OR_UNION_41 -> VAR_174 + STRUCT_OR_UNION_42 -> VAR_175 , VAR_176 , VAR_177 ) ; if ( VAR_178 ) { TYPE_18 * VAR_179 = METHOD_59 ( STRUCT_OR_UNION_43 -> VAR_180 , STRUCT_OR_UNION_44 -> VAR_181 ) ; METHOD_60 ( VAR_182 , "Pool%dcoinbase%s" , STRUCT_OR_UNION_45 -> VAR_183 , VAR_184 ) ; METHOD_61 ( VAR_185 ) ; } VAR_186 : METHOD_62 ( & STRUCT_OR_UNION_46 -> VAR_187 ) ; if ( VAR_188 ) { METHOD_63 ( VAR_189 , "job_id:%s" , TYPE_19 ) ; METHOD_64 ( VAR_190 , "prev_hash:%s" , VAR_191 ) ; METHOD_65 ( VAR_192 , "coinbase1:%s" , VAR_193 ) ; METHOD_66 ( VAR_194 , "coinbase2:%s" , VAR_195 ) ; METHOD_67 ( VAR_196 , "bbversion:%s" , VAR_197 ) ; METHOD_68 ( VAR_198 , "nbit:%s" , VAR_199 ) ; METHOD_69 ( VAR_200 , "ntime:%s" , VAR_201 ) ; METHOD_70 ( VAR_202 , "clean:%s" , VAR_203 ? "yes" : "no" ) ; } METHOD_71 ( VAR_204 ) ; METHOD_72 ( VAR_205 ) ; STRUCT_OR_UNION_47 -> VAR_206 ++ ; VAR_207 ++ ; if ( STRUCT_OR_UNION_48 == METHOD_73 ( ) ) VAR_208 = VAR_209 ; VAR_210 : return VAR_211 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; if ( ! VAR_2 ) VAR_3 = VAR_4 ; else if ( ! VAR_5 -> VAR_6 || ! VAR_7 -> VAR_8 ) VAR_9 = VAR_10 ; else {  if ( VAR_11 -> VAR_12 -> VAR_13 )   VAR_14 -> VAR_15 -> METHOD_1 ( VAR_16 -> VAR_17 -> VAR_18 ) ;  VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 = VAR_29 ; } return METHOD_2 ( VAR_30 , VAR_31 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_3 ( VAR_5 ) ; TYPE_2 VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 -> VAR_10 . VAR_11 ) return 0 ; if ( METHOD_4 ( VAR_12 -> VAR_13 ) ) { METHOD_5 ( "%sfailedvmentry%x\\n" , VAR_14 , METHOD_6 ( VAR_15 ) ) ; return 1 ; } switch ( VAR_16 ) { case VAR_17 : if ( ! METHOD_7 ( VAR_18 ) ) return 0 ; else if ( METHOD_8 ( VAR_19 ) ) return VAR_20 ; return STRUCT_OR_UNION_4 -> VAR_21 & ( 1u << ( VAR_22 & VAR_23 ) ) ; case VAR_24 : return 0 ; case VAR_25 : return 1 ; case VAR_26 : return METHOD_9 ( STRUCT_OR_UNION_5 , VAR_27 ) ; case VAR_28 : return METHOD_10 ( STRUCT_OR_UNION_6 , VAR_29 ) ; case VAR_30 : return 1 ; case VAR_31 : return 1 ; case VAR_32 : return METHOD_11 ( STRUCT_OR_UNION_7 , VAR_33 ) ; case VAR_34 : return 1 ; case VAR_35 : return METHOD_12 ( STRUCT_OR_UNION_8 , VAR_36 ) ; case VAR_37 : return METHOD_13 ( STRUCT_OR_UNION_9 , VAR_38 ) ; case VAR_39 : return METHOD_14 ( STRUCT_OR_UNION_10 , VAR_40 ) ; case VAR_41 : case VAR_42 : case VAR_43 : case VAR_44 : case VAR_45 : case VAR_46 : case VAR_47 : case VAR_48 : case VAR_49 : case VAR_50 :  return 1 ;  case VAR_51 : return METHOD_15 ( VAR_52 , STRUCT_OR_UNION_11 ) ; case VAR_53 : return METHOD_16 ( STRUCT_OR_UNION_12 , VAR_54 ) ; case VAR_55 : return METHOD_17 ( VAR_56 , STRUCT_OR_UNION_13 ) ; case VAR_57 : case VAR_58 : return METHOD_18 ( VAR_59 , STRUCT_OR_UNION_14 , VAR_60 ) ; case VAR_61 : return 1 ; case VAR_62 : return METHOD_19 ( STRUCT_OR_UNION_15 , VAR_63 ) ; case VAR_64 : return METHOD_20 ( STRUCT_OR_UNION_16 , VAR_65 ) ; case VAR_66 : return METHOD_21 ( STRUCT_OR_UNION_17 , VAR_67 ) || METHOD_22 ( STRUCT_OR_UNION_18 , VAR_68 ) ; case VAR_69 : return 0 ; case VAR_70 : return 1 ; case VAR_71 : return METHOD_23 ( STRUCT_OR_UNION_19 , VAR_72 ) ; case VAR_73 : case VAR_74 : return 0 ; case VAR_75 : return STRUCT_OR_UNION_20 -> VAR_76 & VAR_77 ; case VAR_78 : return METHOD_24 ( STRUCT_OR_UNION_21 , VAR_79 ) ; case VAR_80 : return 1 ; default : return 1 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , enum VAR_3 VAR_4 , TYPE_2 VAR_5 , unsigned TYPE_3 VAR_6 , unsigned TYPE_4 * VAR_7 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_8 ) ; enum VAR_9 VAR_10 = METHOD_2 ( VAR_11 ) ; struct STRUCT_OR_UNION_4 VAR_12 , * VAR_13 ; TYPE_5 VAR_14 , VAR_15 , VAR_16 ; enum VAR_17 VAR_18 ;  VAR_19 = METHOD_3 ( VAR_20 , VAR_21 , sizeof ( VAR_22 ) , & VAR_23 ) ;  METHOD_4 ( VAR_24 == VAR_25 ) ; VAR_26 = VAR_27 -> VAR_28 ; if ( VAR_29 == VAR_30 && ! METHOD_5 ( VAR_31 , & VAR_32 -> VAR_33 ) ) { METHOD_6 ( VAR_34 , VAR_35 , VAR_36 ) ; return VAR_37 ; } METHOD_7 ( & VAR_38 -> VAR_39 ) ; VAR_40 = VAR_41 -> VAR_42 . VAR_43 . VAR_44 [ VAR_45 ] ; VAR_46 = VAR_47 -> VAR_48 . VAR_49 . VAR_50 ; VAR_51 = VAR_52 [ VAR_53 ] [ VAR_54 ] [ VAR_55 ] ; switch ( VAR_56 ) { case VAR_57 : if ( VAR_58 == VAR_59 && VAR_60 == VAR_61 ) { VAR_62 -> VAR_63 . VAR_64 . VAR_65 [ VAR_66 ] = VAR_67 ; VAR_68 -> VAR_69 . VAR_70 . VAR_71 [ ! VAR_72 ] = VAR_73 ; } break ; case VAR_74 : if ( VAR_75 == VAR_76 ) VAR_77 -> VAR_78 . VAR_79 . VAR_80 = METHOD_8 ( VAR_81 ) ; break ; case VAR_82 : if ( VAR_83 == VAR_84 && VAR_85 == VAR_86 && METHOD_9 ( VAR_87 ) == VAR_88 -> VAR_89 . VAR_90 . VAR_91 ) METHOD_10 ( VAR_92 , & VAR_93 -> VAR_94 ) ; break ; case VAR_95 : if ( VAR_96 -> VAR_97 . VAR_98 . VAR_99 == ! VAR_100 && VAR_101 -> VAR_102 . VAR_103 . VAR_104 == VAR_105 && VAR_106 == VAR_107 ) { VAR_108 -> VAR_109 . VAR_110 . VAR_111 [ ! VAR_112 ] = VAR_113 ; VAR_114 -> VAR_115 . VAR_116 . VAR_117 [ VAR_118 ] = VAR_119 ; VAR_120 -> VAR_121 . VAR_122 . VAR_123 = METHOD_11 ( VAR_124 ) ; VAR_125 = VAR_126 ; break ; } VAR_127 -> VAR_128 . VAR_129 . VAR_130 = VAR_131 ; VAR_132 -> VAR_133 . VAR_134 . VAR_135 = VAR_136 ; METHOD_12 ( & VAR_137 -> VAR_138 ) ; if ( METHOD_13 ( STRUCT_OR_UNION_5 , VAR_139 ) ) METHOD_14 ( STRUCT_OR_UNION_6 , VAR_140 , 0 , VAR_141 , VAR_142 , VAR_143 , VAR_144 , "nf_ct_dccp:invalidpacketignored" ) ; return VAR_145 ; case VAR_146 : METHOD_15 ( & VAR_147 -> VAR_148 ) ; if ( METHOD_16 ( STRUCT_OR_UNION_7 , VAR_149 ) ) METHOD_17 ( STRUCT_OR_UNION_8 , VAR_150 , 0 , VAR_151 , VAR_152 , VAR_153 , VAR_154 , "nf_ct_dccp:invalidstatetransition" ) ; return - VAR_155 ; } VAR_156 -> VAR_157 . VAR_158 . VAR_159 = VAR_160 ; VAR_161 -> VAR_162 . VAR_163 . VAR_164 = VAR_165 ; VAR_166 -> VAR_167 . VAR_168 . VAR_169 = VAR_170 ; METHOD_18 ( & VAR_171 -> VAR_172 ) ; if ( VAR_173 != VAR_174 ) METHOD_19 ( VAR_175 , VAR_176 ) ; METHOD_20 ( VAR_177 , VAR_178 , VAR_179 , VAR_180 [ VAR_181 ] ) ; return VAR_182 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ;  if ( METHOD_1 ( & VAR_3 , VAR_4 , sizeof ( struct STRUCT_OR_UNION_3 ) ) )  return - VAR_5 ; VAR_6 -> VAR_7 = VAR_8 . VAR_9 ; VAR_10 -> VAR_11 = VAR_12 . VAR_13 ; VAR_14 -> VAR_15 = VAR_16 . VAR_17 ; VAR_18 -> VAR_19 = VAR_20 . VAR_21 ; VAR_22 -> VAR_23 = VAR_24 . VAR_25 ; VAR_26 -> VAR_27 = VAR_28 . VAR_29 ; VAR_30 -> VAR_31 = VAR_32 . VAR_33 ; VAR_34 -> VAR_35 = VAR_36 . VAR_37 ; VAR_38 -> VAR_39 = VAR_40 . VAR_41 ; VAR_42 -> VAR_43 . VAR_44 = VAR_45 . VAR_46 . VAR_47 ; VAR_48 -> VAR_49 . VAR_50 = VAR_51 . VAR_52 . VAR_53 ; VAR_54 -> VAR_55 = VAR_56 . VAR_57 ; VAR_58 -> VAR_59 = VAR_60 . VAR_61 ; VAR_62 -> VAR_63 = VAR_64 . VAR_65 ; VAR_66 -> VAR_67 = VAR_68 . VAR_69 ; VAR_70 -> VAR_71 = VAR_72 . VAR_73 ; VAR_74 -> VAR_75 = VAR_76 . VAR_77 ; VAR_78 -> VAR_79 = VAR_80 . VAR_81 ; VAR_82 -> VAR_83 = VAR_84 . VAR_85 ; VAR_86 -> VAR_87 = VAR_88 . VAR_89 ; return 0 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 [ VAR_2 ] ; METHOD_1 ( VAR_3 , 0 , sizeof ( VAR_4 ) ) ; TYPE_2 VAR_5 = ( TYPE_3 ) VAR_6 ; for ( ; ; ) { METHOD_2 ( VAR_7 , VAR_8 ) ;  TYPE_4 VAR_9 = METHOD_3 ( VAR_10 , VAR_11 [ VAR_12 ] . VAR_13 , - 1 ) ;  if ( VAR_14 == - 1 ) { METHOD_4 ( "pollret-1,exitthethread,errno:%d,err:%s" , VAR_15 , METHOD_5 ( VAR_16 ) ) ; break ; } if ( VAR_17 != 0 ) { TYPE_5 VAR_18 = VAR_19 ; if ( VAR_20 [ 0 ] . VAR_21 ) { METHOD_6 ( VAR_22 [ 0 ] . VAR_23 == VAR_24 [ VAR_25 ] . VAR_26 ) ; if ( ! METHOD_7 ( VAR_27 ) ) { METHOD_8 ( "h:%d,process_cmd_sockreturnfalse,exit..." , VAR_28 ) ; break ; } if ( VAR_29 == 1 ) VAR_30 = VAR_31 ; else VAR_32 -- ; } if ( VAR_33 ) METHOD_9 ( VAR_34 , VAR_35 , VAR_36 ) ; } else { METHOD_10 ( "nodata,selectret:%d" , VAR_37 ) } ; } VAR_38 [ VAR_39 ] . VAR_40 = - 1 ; METHOD_11 ( "socketpollthreadexiting,h:%d" , VAR_41 ) ; return 0 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) {  METHOD_1 ( VAR_8 ) ;  return VAR_9 ; } VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , & VAR_22 , VAR_23 ) == - 1 ) goto VAR_24 ; METHOD_5 ( VAR_25 ) ; VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 ) ; if ( ! VAR_29 ) goto VAR_30 ; if ( METHOD_7 ( VAR_31 , & VAR_32 , VAR_33 ) == - 1 ) goto VAR_34 ; METHOD_8 ( VAR_35 ) ; return VAR_36 ; VAR_37 : METHOD_9 ( VAR_38 ) ; METHOD_10 ( VAR_39 ) ; return VAR_40 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { TYPE_2 * VAR_2 = METHOD_1 ( VAR_3 , 0 ) ; switch ( METHOD_2 ( VAR_4 ) ) { case VAR_5 : { TYPE_3 * VAR_6 = METHOD_3 ( VAR_7 ) ; if ( ! VAR_8 ) return VAR_9 ; return METHOD_4 ( VAR_10 , VAR_11 , METHOD_5 ( VAR_12 ) , VAR_13 -> VAR_14 , VAR_15 -> VAR_16 ) ; } case VAR_17 : { TYPE_4 * VAR_18 , * VAR_19 = METHOD_6 ( VAR_20 , VAR_21 ) ;  const TYPE_5 * VAR_22 , * VAR_23 = METHOD_7 ( METHOD_8 ( VAR_24 , 0 ) ) ;  TYPE_6 VAR_25 = METHOD_9 ( * VAR_26 ) ; TYPE_7 * VAR_27 , VAR_28 [ 3 ] = { 0 , 0 , 0 } ; VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; while ( * VAR_33 && * VAR_34 != '\\'' && * VAR_35 != \'"\' ) { * VAR_36 ++ = * VAR_37 ++ ; } VAR_38 = PyUnicode_FromString ( VAR_39 ) ; if ( ! VAR_40 ) { return VAR_41 ; } if ( ! VAR_42 ) { ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { TYPE_8 * type , * value , * tback , * errstr ; PyErr_Fetch ( & type , & value , & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) {  TYPE_9 * VAR_43 = "" ;  TYPE_10 buf [ 128 ] ; VAR_44 = _PyUnicode_AsString ( errstr ) ; PyOS_snprintf ( buf , sizeof ( buf ) , "(unicodeerror)%s" , VAR_45 ) ; ast_error ( VAR_46 , buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( VAR_47 , "(unicodeerror)unknownerror" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } return VAR_48 ; } PyArena_AddPyObject ( VAR_49 -> VAR_50 , VAR_51 ) ; return Str ( VAR_52 , VAR_53 , METHOD_10 ( VAR_54 ) , VAR_55 -> VAR_56 , VAR_57 -> VAR_58 ) ; } case NUMBER : { TYPE_11 * pynum = parsenumber ( VAR_59 , METHOD_11 ( VAR_60 ) ) ; if ( ! pynum ) return VAR_61 ; PyArena_AddPyObject ( VAR_62 -> VAR_63 , pynum ) ; return Num ( pynum , METHOD_12 ( VAR_64 ) , VAR_65 -> VAR_66 , VAR_67 -> VAR_68 ) ; } case LPAR : VAR_69 = METHOD_13 ( VAR_70 , 1 ) ; if ( METHOD_14 ( VAR_71 ) == RPAR ) return Tuple ( VAR_72 , VAR_73 , METHOD_15 ( VAR_74 ) , VAR_75 -> VAR_76 , VAR_77 -> VAR_78 ) ; if ( METHOD_16 ( VAR_79 ) == yield_expr ) return ast_for_expr ( VAR_80 , VAR_81 ) ; return ast_for_testlist_comp ( VAR_82 , VAR_83 ) ; case LSQB : VAR_84 = METHOD_17 ( VAR_85 , 1 ) ; if ( METHOD_18 ( VAR_86 ) == RSQB ) return List ( VAR_87 , VAR_88 , METHOD_19 ( VAR_89 ) , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 ) ; REQ ( VAR_94 , listmaker ) ; if ( NCH ( VAR_95 ) == 1 || METHOD_20 ( METHOD_21 ( VAR_96 , 1 ) ) == COMMA ) { asdl_seq * elts = seq_for_testlist ( VAR_97 , VAR_98 ) ; if ( ! elts ) return VAR_99 ; return List ( elts , VAR_100 , METHOD_22 ( VAR_101 ) , VAR_102 -> VAR_103 , VAR_104 -> VAR_105 ) ; } else return ast_for_listcomp ( VAR_106 , VAR_107 ) ; case LBRACE : { TYPE_12 i , size ; asdl_seq * keys , * values ; VAR_108 = METHOD_23 ( VAR_109 , 1 ) ; if ( METHOD_24 ( VAR_110 ) == RBRACE ) { return Dict ( VAR_111 , VAR_112 , METHOD_25 ( VAR_113 ) , VAR_114 -> VAR_115 , VAR_116 -> VAR_117 ) ; } else if ( NCH ( VAR_118 ) == 1 || METHOD_26 ( METHOD_27 ( VAR_119 , 1 ) ) == COMMA ) { asdl_seq * elts ; size = ( NCH ( VAR_120 ) + 1 ) / 2 ; elts = asdl_seq_new ( size , VAR_121 -> VAR_122 ) ; if ( ! elts ) return VAR_123 ; for ( i = 0 ; i < NCH ( VAR_124 ) ; i += 2 ) { TYPE_13 expression ; expression = ast_for_expr ( VAR_125 , METHOD_28 ( VAR_126 , i ) ) ; if ( ! expression ) return VAR_127 ; asdl_seq_SET ( elts , i / 2 , expression ) ; } return Set ( elts , METHOD_29 ( VAR_128 ) , VAR_129 -> VAR_130 , VAR_131 -> VAR_132 ) ; } else if ( METHOD_30 ( METHOD_31 ( VAR_133 , 1 ) ) == comp_for ) { return ast_for_setcomp ( VAR_134 , VAR_135 ) ; } else if ( NCH ( VAR_136 ) > 3 && METHOD_32 ( METHOD_33 ( VAR_137 , 3 ) ) == comp_for ) { return ast_for_dictcomp ( VAR_138 , VAR_139 ) ; } else { size = ( NCH ( VAR_140 ) + 1 ) / 4 ; keys = asdl_seq_new ( size , VAR_141 -> VAR_142 ) ; if ( ! keys ) return VAR_143 ; values = asdl_seq_new ( size , VAR_144 -> VAR_145 ) ; if ( ! values ) return VAR_146 ; for ( i = 0 ; i < NCH ( VAR_147 ) ; i += 4 ) { TYPE_14 expression ; expression = ast_for_expr ( VAR_148 , METHOD_34 ( VAR_149 , i ) ) ; if ( ! expression ) return VAR_150 ; asdl_seq_SET ( keys , i / 4 , expression ) ; expression = ast_for_expr ( VAR_151 , METHOD_35 ( VAR_152 , i + 2 ) ) ; if ( ! expression ) return VAR_153 ; asdl_seq_SET ( values , i / 4 , expression ) ; } return Dict ( keys , values , METHOD_36 ( VAR_154 ) , VAR_155 -> VAR_156 , VAR_157 -> VAR_158 ) ; } } case BACKQUOTE : { TYPE_15 expression ; if ( Py_Py3kWarningFlag && ! ast_warn ( VAR_159 , VAR_160 , "backquotenotsupportedin3.x;userepr()" ) ) return VAR_161 ; expression = ast_for_testlist ( VAR_162 , METHOD_37 ( VAR_163 , 1 ) ) ; if ( ! expression ) return VAR_164 ; return Repr ( expression , METHOD_38 ( VAR_165 ) , VAR_166 -> VAR_167 , VAR_168 -> VAR_169 ) ; } default : PyErr_Format ( PyExc_SystemError , "unhandledatom%d" , METHOD_39 ( VAR_170 ) ) ; return VAR_171 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 * VAR_5 ;  TYPE_7 VAR_6 = 0 ;  TYPE_8 VAR_7 = VAR_8 ; if ( VAR_9 == VAR_10 ) return VAR_11 ; VAR_12 = METHOD_1 ( VAR_13 ) ; VAR_14 = METHOD_2 ( VAR_15 , "=" , & VAR_16 ) ; while ( VAR_17 != VAR_18 ) { VAR_19 = METHOD_3 ( VAR_20 , "" , & VAR_21 ) ; if ( VAR_22 == VAR_23 ) { METHOD_4 ( VAR_24 , VAR_25 , "optionmissingvalue:%s\\n" , VAR_26 ) ; VAR_27 = VAR_28 ; break ; }  if ( METHOD_5 ( "encoding-mode" , VAR_29 ) == 0 ) {  VAR_30 = METHOD_6 ( VAR_31 , VAR_32 ) ; if ( VAR_33 != VAR_34 ) break ;  } else if ( METHOD_7 ( "layers" , VAR_35 ) == 0 ) {  VAR_36 -> VAR_37 = METHOD_8 ( VAR_38 ) ; } else if ( METHOD_9 ( "scale-factors" , VAR_39 ) == 0 ) { VAR_40 = METHOD_10 ( VAR_41 , VAR_42 ) ; if ( VAR_43 != VAR_44 ) break ;  } else if ( METHOD_11 ( "quantizers" , VAR_45 ) == 0 ) {  VAR_46 = METHOD_12 ( VAR_47 , VAR_48 , 0 ) ; if ( VAR_49 != VAR_50 ) break ;  if ( ! VAR_51 ) {  TYPE_9 * const VAR_52 = METHOD_13 ( VAR_53 ) ; METHOD_14 ( METHOD_15 ( VAR_54 ) -> VAR_55 , VAR_56 -> VAR_57 , sizeof ( VAR_58 -> VAR_59 ) ) ; } } else if ( METHOD_16 ( "quantizers-keyframe" , VAR_60 ) == 0 ) { VAR_61 = METHOD_17 ( VAR_62 , VAR_63 , 1 ) ; if ( VAR_64 != VAR_65 ) break ;  VAR_66 = 1 ;  } else { METHOD_18 ( VAR_67 , VAR_68 , "invalidoption:%s\\n" , VAR_69 ) ; VAR_70 = VAR_71 ; break ; } VAR_72 = METHOD_19 ( VAR_73 , "=" , & VAR_74 ) ; } METHOD_20 ( VAR_75 ) ;  return VAR_76 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 == VAR_3 ) { METHOD_1 ( ) ; VAR_4 = VAR_5 ; } if ( VAR_6 > 0 && VAR_7 [ VAR_8 - 1 ] == '\\n' ) VAR_9 [ VAR_10 - 1 ] = '\\r' ; METHOD_2 ( ( TYPE_3 * ) VAR_11 , VAR_12 ) ; if ( METHOD_3 ( VAR_13 , "/FontName" , 9 ) == 0 ) {  for ( VAR_14 += 9 ; METHOD_4 ( * VAR_15 ) ; VAR_16 ++ ) ;  if ( * VAR_17 == '/' ) { const TYPE_4 * VAR_18 = ++ VAR_19 ;  while ( * VAR_20 && ! METHOD_5 ( * VAR_21 ) ) VAR_22 ++ ;  METHOD_6 ( VAR_23 ) ; VAR_24 = ( TYPE_5 * ) METHOD_7 ( VAR_25 - VAR_26 + 1 ) ; METHOD_8 ( VAR_27 , VAR_28 , VAR_29 - VAR_30 ) ; VAR_31 [ VAR_32 - VAR_33 ] = 0 ; } } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 , VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 = VAR_8 ; VAR_9 * VAR_10 ; VAR_11 * VAR_12 ; TYPE_7 VAR_13 ; TYPE_8 VAR_14 = VAR_15 ; METHOD_1 ( VAR_16 ) ; METHOD_2 ( VAR_17 -> VAR_18 ) ;  if ( ( VAR_19 & VAR_20 ) || ( VAR_21 & VAR_22 ) ||  ( VAR_23 & VAR_24 ) || ( VAR_25 & VAR_26 ) || ( VAR_27 & VAR_28 ) || ( VAR_29 & VAR_30 ) || ( VAR_31 & VAR_32 ) || ( VAR_33 & VAR_34 ) || ( VAR_35 & VAR_36 ) ) return VAR_37 ; if ( ( VAR_38 & ~ VAR_39 ) ) return VAR_40 ;  if ( ( VAR_41 & VAR_42 ) && ( VAR_43 & VAR_44 ) )  return VAR_45 ;  if ( VAR_46 == ( TYPE_9 ) VAR_47 )  return VAR_48 ; if ( VAR_49 & VAR_50 ) { VAR_51 = VAR_52 -> VAR_53 ; while ( VAR_54 ) { if ( VAR_55 -> VAR_56 < 256 ) return VAR_57 ; VAR_58 = VAR_59 -> VAR_60 ; } } VAR_61 = METHOD_3 ( VAR_62 , VAR_63 -> VAR_64 , & VAR_65 , & VAR_66 ) ; if ( VAR_67 ) return ( VAR_68 ) ; if ( ( VAR_69 & VAR_70 ) ) { VAR_71 = METHOD_4 ( VAR_72 , VAR_73 -> VAR_74 , & VAR_75 , & VAR_76 ) ; if ( VAR_77 ) goto VAR_78 ; VAR_79 . VAR_80 |= VAR_81 ; if ( VAR_82 . VAR_83 ) METHOD_5 ( VAR_84 . VAR_85 ) ; VAR_86 . VAR_87 = METHOD_6 ( VAR_88 -> VAR_89 ) ; } if ( VAR_90 ) { if ( VAR_91 . VAR_92 ) { VAR_93 = METHOD_7 ( VAR_94 -> VAR_95 , VAR_96 , & ( VAR_97 -> VAR_98 ) ) ; if ( VAR_99 ) goto VAR_100 ; VAR_101 -> VAR_102 += VAR_103 . VAR_104 ; } else { VAR_105 -> VAR_106 = 0 ; } } if ( ( VAR_107 & VAR_108 ) && ( VAR_109 . VAR_110 & VAR_111 ) ) { METHOD_8 ( VAR_112 . VAR_113 ) ; VAR_114 . VAR_115 = VAR_116 ; VAR_117 . VAR_118 &= ~ VAR_119 ; VAR_120 -> VAR_121 = 0 ; } if ( ( VAR_122 & VAR_123 ) ) VAR_124 -> VAR_125 = VAR_126 -> VAR_127 ; if ( ( VAR_128 & VAR_129 ) ) VAR_130 -> VAR_131 = VAR_132 -> VAR_133 ; if ( ( VAR_134 & VAR_135 ) ) VAR_136 -> VAR_137 = VAR_138 -> VAR_139 ; if ( VAR_140 & VAR_141 ) VAR_142 -> VAR_143 = VAR_144 -> VAR_145 ; if ( VAR_146 & VAR_147 ) VAR_148 -> VAR_149 = VAR_150 -> VAR_151 ; if ( ( VAR_152 & VAR_153 ) ) { for ( VAR_154 = 0 ; VAR_155 < VAR_156 -> VAR_157 ; VAR_158 ++ ) VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 = VAR_163 -> VAR_164 ; } if ( VAR_165 & VAR_166 ) { VAR_167 * VAR_168 ; for ( VAR_169 = VAR_170 -> VAR_171 ; VAR_172 ; VAR_173 = VAR_174 -> VAR_175 ) { VAR_176 = METHOD_9 ( VAR_177 -> VAR_178 , VAR_179 , VAR_180 ) ; if ( VAR_181 ) { goto VAR_182 ; } } } if ( VAR_183 & VAR_184 ) { if ( VAR_185 -> VAR_186 != 0 ) { VAR_187 = VAR_188 ; goto VAR_189 ; } VAR_190 -> VAR_191 = 0 ; } VAR_192 -> VAR_193 = VAR_194 ; VAR_195 = METHOD_10 ( VAR_196 -> VAR_197 , VAR_198 -> VAR_199 , VAR_200 , VAR_201 , VAR_202 ) ; if ( VAR_203 ) goto VAR_204 ; VAR_205 = METHOD_11 ( VAR_206 , VAR_207 , & VAR_208 ) ; if ( VAR_209 ) goto VAR_210 ; ( TYPE_10 ) METHOD_12 ( VAR_211 -> VAR_212 , VAR_213 -> VAR_214 , VAR_215 , VAR_216 , VAR_217 ) ; VAR_218 = VAR_219 ; VAR_220 : if ( VAR_221 ) { VAR_222 = METHOD_13 ( VAR_223 -> VAR_224 , & VAR_225 ) ; VAR_226 = VAR_227 ? VAR_228 : VAR_229 ; } METHOD_14 ( VAR_230 , VAR_231 , & VAR_232 ) ; return VAR_233 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; const TYPE_4 * VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 ) ; TYPE_5 VAR_8 [ 4 ] = { 0 } , VAR_9 = 0 ; TYPE_6 VAR_10 , VAR_11 , VAR_12 = VAR_13 -> VAR_14 ;  for ( VAR_15 = 0 ; VAR_16 < 4 && VAR_17 -> VAR_18 [ VAR_19 ] ; VAR_20 ++ ) {  TYPE_7 VAR_21 = METHOD_2 ( VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , VAR_26 ) ; TYPE_8 * VAR_27 = VAR_28 -> VAR_29 [ VAR_30 ] ; TYPE_9 VAR_31 = VAR_32 == 1 || VAR_33 == 2 ? METHOD_3 ( VAR_34 -> VAR_35 , VAR_36 ) : VAR_37 -> VAR_38 ; if ( VAR_39 < 0 ) return VAR_40 ; for ( VAR_41 = 0 ; VAR_42 < VAR_43 ; VAR_44 ++ ) { VAR_45 [ VAR_46 ] = METHOD_4 ( VAR_47 [ VAR_48 ] , VAR_49 , VAR_50 ) ; VAR_51 = METHOD_5 ( VAR_52 , VAR_53 , VAR_54 ) ; VAR_55 += VAR_56 -> VAR_57 [ VAR_58 ] ; } } METHOD_6 ( VAR_59 , VAR_60 , "n:%" PRId64 "pts:%spts_time:%spos:%" PRId64 "" "fmt:%ssar:%d/%ds:%dx%di:%ciskey:%dtype:%c" "checksum:%08Xplane_checksum:[%08X" , VAR_61 -> VAR_62 , METHOD_7 ( VAR_63 -> VAR_64 ) , METHOD_8 ( VAR_65 -> VAR_66 , & VAR_67 -> VAR_68 ) , METHOD_9 ( VAR_69 ) , VAR_70 -> VAR_71 , VAR_72 -> VAR_73 . VAR_74 , VAR_75 -> VAR_76 . VAR_77 , VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , ! VAR_82 -> VAR_83 ? 'P' : VAR_84 -> VAR_85 ? 'T' : 'B' , VAR_86 -> VAR_87 , METHOD_10 ( VAR_88 -> VAR_89 ) , VAR_90 , VAR_91 [ 0 ] ) ;  for ( VAR_92 = 1 ; VAR_93 < 4 && VAR_94 -> VAR_95 [ VAR_96 ] ; VAR_97 ++ )  METHOD_11 ( VAR_98 , VAR_99 , "%08X" , VAR_100 [ VAR_101 ] ) ; METHOD_12 ( VAR_102 , VAR_103 , "]\\n" ) ; return METHOD_13 ( VAR_104 -> VAR_105 -> VAR_106 [ 0 ] , VAR_107 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 = 0 ; TYPE_8 * VAR_7 = METHOD_1 ( "mvs.stt" , "a" ) ; VAR_8 = 0 ; METHOD_2 ( VAR_9 , "MbModesforFrame%d\\n" , VAR_10 ) ; for ( VAR_11 = 0 ; VAR_12 < VAR_13 ; VAR_14 ++ ) { for ( VAR_15 = 0 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { METHOD_3 ( VAR_19 , "%2d" , VAR_20 [ VAR_21 ] . VAR_22 . VAR_23 ) ; VAR_24 ++ ; } METHOD_4 ( VAR_25 , "\\n" ) ; VAR_26 ++ ; } METHOD_5 ( VAR_27 , "\\n" ) ; VAR_28 = 0 ; METHOD_6 ( VAR_29 , "MbmvrefforFrame%d\\n" , VAR_30 ) ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { for ( VAR_35 = 0 ; VAR_36 < VAR_37 ; VAR_38 ++ ) { METHOD_7 ( VAR_39 , "%2d" , VAR_40 [ VAR_41 ] . VAR_42 . VAR_43 ) ; VAR_44 ++ ; } METHOD_8 ( VAR_45 , "\\n" ) ; VAR_46 ++ ; } METHOD_9 ( VAR_47 , "\\n" ) ; VAR_48 = 0 ; METHOD_10 ( VAR_49 , "UVModesforFrame%d\\n" , VAR_50 ) ; for ( VAR_51 = 0 ; VAR_52 < VAR_53 ; VAR_54 ++ ) { for ( VAR_55 = 0 ; VAR_56 < VAR_57 ; VAR_58 ++ ) { METHOD_11 ( VAR_59 , "%2d" , VAR_60 [ VAR_61 ] . VAR_62 . VAR_63 ) ; VAR_64 ++ ; } VAR_65 ++ ; METHOD_12 ( VAR_66 , "\\n" ) ; }  METHOD_13 ( VAR_67 , "\\n" ) ;  VAR_68 = 0 ; METHOD_14 ( VAR_69 , "MbsforFrame%d\\n" , VAR_70 ) ; { TYPE_9 VAR_71 ; for ( VAR_72 = 0 ; VAR_73 < 4 * VAR_74 ; VAR_75 ++ ) { TYPE_10 VAR_76 ; TYPE_11 VAR_77 ; for ( VAR_78 = 0 ; VAR_79 < 4 * VAR_80 ; VAR_81 ++ ) { VAR_82 = ( VAR_83 >> 2 ) * ( VAR_84 + 1 ) + ( VAR_85 >> 2 ) ; VAR_86 = ( VAR_87 & 3 ) * 4 + ( VAR_88 & 3 ) ; if ( VAR_89 [ VAR_90 ] . VAR_91 . VAR_92 == VAR_93 ) METHOD_15 ( VAR_94 , "%2d" , VAR_95 [ VAR_96 ] . VAR_97 [ VAR_98 ] . VAR_99 ) ; else METHOD_16 ( VAR_100 , "xx" ) ; } METHOD_17 ( VAR_101 , "\\n" ) ; } } METHOD_18 ( VAR_102 , "\\n" ) ; VAR_103 = 0 ; METHOD_19 ( VAR_104 , "MVsforFrame%d\\n" , VAR_105 ) ; for ( VAR_106 = 0 ; VAR_107 < VAR_108 ; VAR_109 ++ ) { for ( VAR_110 = 0 ; VAR_111 < VAR_112 ; VAR_113 ++ ) { METHOD_20 ( VAR_114 , "%5d:%-5d" , VAR_115 [ VAR_116 ] . VAR_117 . VAR_118 . VAR_119 . VAR_120 / 2 , VAR_121 [ VAR_122 ] . VAR_123 . VAR_124 . VAR_125 . VAR_126 / 2 ) ; VAR_127 ++ ; } VAR_128 ++ ; METHOD_21 ( VAR_129 , "\\n" ) ; } METHOD_22 ( VAR_130 , "\\n" ) ;  VAR_131 = 0 ;  METHOD_23 ( VAR_132 , "MVsforFrame%d\\n" , VAR_133 ) ; { TYPE_12 VAR_134 ; for ( VAR_135 = 0 ; VAR_136 < 4 * VAR_137 ; VAR_138 ++ ) { TYPE_13 VAR_139 ; TYPE_14 VAR_140 ; for ( VAR_141 = 0 ; VAR_142 < 4 * VAR_143 ; VAR_144 ++ ) { VAR_145 = ( VAR_146 >> 2 ) * ( VAR_147 + 1 ) + ( VAR_148 >> 2 ) ; VAR_149 = ( VAR_150 & 3 ) * 4 + ( VAR_151 & 3 ) ; METHOD_24 ( VAR_152 , "%3d:%-3d" , VAR_153 [ VAR_154 ] . VAR_155 [ VAR_156 ] . VAR_157 . VAR_158 . VAR_159 , VAR_160 [ VAR_161 ] . VAR_162 [ VAR_163 ] . VAR_164 . VAR_165 . VAR_166 ) ; } METHOD_25 ( VAR_167 , "\\n" ) ; } } METHOD_26 ( VAR_168 , "\\n" ) ; METHOD_27 ( VAR_169 ) ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 ;  TYPE_3 * VAR_2 = METHOD_1 ( ) ; if ( VAR_3 == VAR_4 ) return VAR_5 ; for ( VAR_6 = 0 ; VAR_7 < VAR_8 -> VAR_9 -> VAR_10 ; VAR_11 ++ ) { TYPE_4 VAR_12 ; TYPE_5 * VAR_13 , * VAR_14 ; VAR_15 = VAR_16 -> VAR_17 -> VAR_18 [ VAR_19 ] ; if ( VAR_20 == VAR_21 ) continue ; VAR_22 = METHOD_2 ( VAR_23 ) ; if ( VAR_24 == VAR_25 ) goto VAR_26 ; VAR_27 = METHOD_3 ( VAR_28 , VAR_29 , VAR_30 ) ; METHOD_4 ( VAR_31 ) ; if ( VAR_32 < 0 ) goto VAR_33 ; } return VAR_34 ; VAR_35 : METHOD_5 ( VAR_36 ) ; return VAR_37 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 [ 64 ] ; const TYPE_7 VAR_6 = sizeof ( VAR_7 ) - 1 ; METHOD_1 ( VAR_8 , '\\0' , sizeof ( TYPE_8 ) ) ; VAR_9 -> VAR_10 = METHOD_2 ( 1 , 1 , & VAR_11 [ VAR_12 [ 0 ] ] ) ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 = VAR_21 [ 0 ] ; METHOD_3 ( & VAR_22 -> VAR_23 ) ; switch ( VAR_24 [ 0 ] ) { case 0x02 : case 0x03 : case 0x04 : case 0x07 : case 0x0b : case 0x0c : case 0x0f : case 0x12 : case 0x13 : case 0x14 : case 0x17 : case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x22 : case 0x23 : case 0x27 : case 0x2b : case 0x2f : case 0x32 : case 0x33 : case 0x34 : case 0x37 : case 0x3a : case 0x3b : case 0x3c : case 0x3f : case 0x42 : case 0x43 : case 0x44 : case 0x47 : case 0x4b : case 0x4f : case 0x52 : case 0x53 : case 0x54 : case 0x57 : case 0x5a : case 0x5b : case 0x5c : case 0x5f : case 0x62 : case 0x63 : case 0x64 : case 0x67 : case 0x6b : case 0x6f : case 0x72 : case 0x73 : case 0x74 : case 0x77 : case 0x7a : case 0x7b : case 0x7c : case 0x7f : case 0x80 : case 0x82 : case 0x83 : case 0x87 : case 0x89 : case 0x8b : case 0x8f : case 0x92 : case 0x93 : case 0x97 : case 0x9b : case 0x9c : case 0x9e : case 0x9f : case 0xa3 : case 0xa7 : case 0xab : case 0xaf : case 0xb2 : case 0xb3 : case 0xb7 : case 0xbb : case 0xbf : case 0xc2 : case 0xc3 : case 0xc7 : case 0xcb : case 0xcf : case 0xd2 : case 0xd3 : case 0xd4 : case 0xd7 : case 0xda : case 0xdb : case 0xdc : case 0xdf : case 0xe2 : case 0xe3 : case 0xe7 : case 0xeb : case 0xef : case 0xf2 : case 0xf3 : case 0xf4 : case 0xf7 : case 0xfa : case 0xfb : case 0xfc : case 0xff : VAR_25 -> VAR_26 = 1 ; VAR_27 -> VAR_28 = VAR_29 ; break ; case 0x00 : VAR_30 -> VAR_31 = 7 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = 1 ; METHOD_4 ( & VAR_37 -> VAR_38 , ",1,I,=,0,D,=,flags,0x10,|,0x100,sp,+,=[1],pc,1,+,0xfe,sp,+,=[2],3,sp,-=,0xfffe,[2],pc,=" ) ; break ; case 0x78 : case 0x58 : case 0x38 : case 0x18 : case 0xf8 : case 0xd8 : case 0xb8 : VAR_39 -> VAR_40 = 2 ; VAR_41 -> VAR_42 = VAR_43 ; METHOD_5 ( VAR_44 , VAR_45 [ 0 ] ) ; break ; case 0x24 : case 0x2c : VAR_46 -> VAR_47 = VAR_48 ; METHOD_6 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 , 0 ) ; METHOD_7 ( & VAR_53 -> VAR_54 , "a,%s,[1],&,0x80,&,!,!,N,=,a,%s,[1],&,0x40,&,!,!,V,=,a,%s,[1],&,0xff,&,!,Z,=" , VAR_55 , VAR_56 , VAR_57 ) ; break ; case 0x69 : case 0x65 : case 0x75 : case 0x6d : case 0x7d : case 0x79 : case 0x61 : case 0x71 : VAR_58 -> VAR_59 = VAR_60 ; METHOD_8 ( VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; if ( VAR_65 [ 0 ] == 0x69 ) METHOD_9 ( & VAR_66 -> VAR_67 , "%s,a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , VAR_68 ) ; else METHOD_10 ( & VAR_69 -> VAR_70 , "%s,[1],a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , VAR_71 ) ; METHOD_11 ( VAR_72 , VAR_73 ) ; METHOD_12 ( & VAR_74 -> VAR_75 , ",a,a,=,$z,Z,=" ) ; break ; case 0xe9 : case 0xe5 : case 0xf5 : case 0xed : case 0xfd : case 0xf9 : case 0xe1 : case 0xf1 : VAR_76 -> VAR_77 = VAR_78 ; METHOD_13 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 ) ; if ( VAR_83 [ 0 ] == 0xe9 ) METHOD_14 ( & VAR_84 -> VAR_85 , "C,!,%s,+,a,-=" , VAR_86 ) ; else METHOD_15 ( & VAR_87 -> VAR_88 , "C,!,%s,[1],+,a,-=" , VAR_89 ) ; METHOD_16 ( VAR_90 , VAR_91 ) ; METHOD_17 ( & VAR_92 -> VAR_93 , ",a,a,=,$z,Z,=,C,!=" ) ; break ; case 0x09 : case 0x05 : case 0x15 : case 0x0d : case 0x1d : case 0x19 : case 0x01 : case 0x11 : VAR_94 -> VAR_95 = VAR_96 ; METHOD_18 ( VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; if ( VAR_101 [ 0 ] == 0x09 ) METHOD_19 ( & VAR_102 -> VAR_103 , "%s,a,|=" , VAR_104 ) ; else METHOD_20 ( & VAR_105 -> VAR_106 , "%s,[1],a,|=" , VAR_107 ) ; METHOD_21 ( VAR_108 , VAR_109 ) ; break ; case 0x29 : case 0x25 : case 0x35 : case 0x2d : case 0x3d : case 0x39 : case 0x21 : case 0x31 : VAR_110 -> VAR_111 = VAR_112 ; METHOD_22 ( VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; if ( VAR_117 [ 0 ] == 0x29 ) METHOD_23 ( & VAR_118 -> VAR_119 , "%s,a,&=" , VAR_120 ) ; else METHOD_24 ( & VAR_121 -> VAR_122 , "%s,[1],a,&=" , VAR_123 ) ; METHOD_25 ( VAR_124 , VAR_125 ) ; break ; case 0x49 : case 0x45 : case 0x55 : case 0x4d : case 0x5d : case 0x59 : case 0x41 : case 0x51 : VAR_126 -> VAR_127 = VAR_128 ; METHOD_26 ( VAR_129 , VAR_130 , VAR_131 , VAR_132 ) ; if ( VAR_133 [ 0 ] == 0x49 ) METHOD_27 ( & VAR_134 -> VAR_135 , "%s,a,^=" , VAR_136 ) ; else METHOD_28 ( & VAR_137 -> VAR_138 , "%s,[1],a,^=" , VAR_139 ) ; METHOD_29 ( VAR_140 , VAR_141 ) ; break ; case 0x0a : case 0x06 : case 0x16 : case 0x0e : case 0x1e : VAR_142 -> VAR_143 = VAR_144 ; if ( VAR_145 [ 0 ] == 0x0a ) { METHOD_30 ( & VAR_146 -> VAR_147 , "1,a,<<=,$c7,C,=,a,a,=" ) ; } else { METHOD_31 ( VAR_148 , VAR_149 , VAR_150 , VAR_151 , 'x' ) ; METHOD_32 ( & VAR_152 -> VAR_153 , "1,%s,[1],<<,%s,=[1],$c7,C,=" , VAR_154 , VAR_155 ) ; } METHOD_33 ( VAR_156 , VAR_157 ) ; break ; case 0x4a : case 0x46 : case 0x56 : case 0x4e : case 0x5e : VAR_158 -> VAR_159 = VAR_160 ; if ( VAR_161 [ 0 ] == 0x4a ) { METHOD_34 ( & VAR_162 -> VAR_163 , "1,a,&,C,=,1,a,>>=" ) ; } else { METHOD_35 ( VAR_164 , VAR_165 , VAR_166 , VAR_167 , 'x' ) ; METHOD_36 ( & VAR_168 -> VAR_169 , "1,%s,[1],&,C,=,1,%s,[1],>>,%s,=[1]" , VAR_170 , VAR_171 , VAR_172 ) ; } METHOD_37 ( VAR_173 , VAR_174 ) ; break ; case 0x2a : case 0x26 : case 0x36 : case 0x2e : case 0x3e : VAR_175 -> VAR_176 = VAR_177 ; if ( VAR_178 [ 0 ] == 0x2a ) { METHOD_38 ( & VAR_179 -> VAR_180 , "1,a,<<,C,|,a,=,$c7,C,=,a,a,=" ) ; } else { METHOD_39 ( VAR_181 , VAR_182 , VAR_183 , VAR_184 , 'x' ) ; METHOD_40 ( & VAR_185 -> VAR_186 , "1,%s,[1],<<,C,|,%s,=[1],$c7,C,=" , VAR_187 , VAR_188 ) ; } METHOD_41 ( VAR_189 , VAR_190 ) ; break ; case 0x6a : case 0x66 : case 0x76 : case 0x6e : case 0x7e : VAR_191 -> VAR_192 = VAR_193 ; if ( VAR_194 [ 0 ] == 0x6a ) { METHOD_42 ( & VAR_195 -> VAR_196 , "C,N,=,1,a,&,C,=,1,a,>>,7,N,<<,|,a,=" ) ; } else { METHOD_43 ( VAR_197 , VAR_198 , VAR_199 , VAR_200 , 'x' ) ; METHOD_44 ( & VAR_201 -> VAR_202 , "C,N,=,1,%s,[1],&,C,=,1,%s,[1],>>,7,N,<<,|,%s,=[1]" , VAR_203 , VAR_204 , VAR_205 ) ; } METHOD_45 ( VAR_206 , VAR_207 ) ; break ; case 0xe6 : case 0xf6 : case 0xee : case 0xfe : VAR_208 -> VAR_209 = VAR_210 ; METHOD_46 ( VAR_211 , VAR_212 , VAR_213 , VAR_214 , 'x' ) ; METHOD_47 ( & VAR_215 -> VAR_216 , "%s,++=[1]" , VAR_217 ) ; METHOD_48 ( VAR_218 , VAR_219 ) ; break ; case 0xc6 : case 0xd6 : case 0xce : case 0xde : VAR_220 -> VAR_221 = VAR_222 ; METHOD_49 ( VAR_223 , VAR_224 , VAR_225 , VAR_226 , 'x' ) ; METHOD_50 ( & VAR_227 -> VAR_228 , "%s,--=[1]" , VAR_229 ) ; METHOD_51 ( VAR_230 , VAR_231 ) ; break ; case 0xe8 : case 0xc8 : VAR_232 -> VAR_233 = 2 ; VAR_234 -> VAR_235 = VAR_236 ; METHOD_52 ( VAR_237 , VAR_238 [ 0 ] , "+" ) ; break ; case 0xca : case 0x88 : VAR_239 -> VAR_240 = 2 ; VAR_241 -> VAR_242 = VAR_243 ; METHOD_53 ( VAR_244 , VAR_245 [ 0 ] , "-" ) ; break ; case 0xc9 : case 0xc5 : case 0xd5 : case 0xcd : case 0xdd : case 0xd9 : case 0xc1 : case 0xd1 : VAR_246 -> VAR_247 = VAR_248 ; METHOD_54 ( VAR_249 , VAR_250 , VAR_251 , VAR_252 ) ; if ( VAR_253 [ 0 ] == 0xc9 ) METHOD_55 ( & VAR_254 -> VAR_255 , "%s,a,==" , VAR_256 ) ; else METHOD_56 ( & VAR_257 -> VAR_258 , "%s,[1],a,==" , VAR_259 ) ; METHOD_57 ( VAR_260 , VAR_261 ) ; METHOD_58 ( & VAR_262 -> VAR_263 , ",C,!,C,=" ) ; break ; case 0xe0 : case 0xe4 : case 0xec : VAR_264 -> VAR_265 = VAR_266 ; METHOD_59 ( VAR_267 , VAR_268 , VAR_269 , VAR_270 , 0 ) ; if ( VAR_271 [ 0 ] == 0xe0 ) METHOD_60 ( & VAR_272 -> VAR_273 , "%s,x,==" , VAR_274 ) ; else METHOD_61 ( & VAR_275 -> VAR_276 , "%s,[1],x,==" , VAR_277 ) ; METHOD_62 ( VAR_278 , VAR_279 ) ; METHOD_63 ( & VAR_280 -> VAR_281 , ",C,!,C,=" ) ; break ; case 0xc0 : case 0xc4 : case 0xcc : VAR_282 -> VAR_283 = VAR_284 ; METHOD_64 ( VAR_285 , VAR_286 , VAR_287 , VAR_288 , 0 ) ; if ( VAR_289 [ 0 ] == 0xc0 ) METHOD_65 ( & VAR_290 -> VAR_291 , "%s,y,==" , VAR_292 ) ; else METHOD_66 ( & VAR_293 -> VAR_294 , "%s,[1],y,==" , VAR_295 ) ; METHOD_67 ( VAR_296 , VAR_297 ) ; METHOD_68 ( & VAR_298 -> VAR_299 , ",C,!,C,=" ) ; break ; case 0x10 : case 0x30 : case 0x50 : case 0x70 : case 0x90 : case 0xb0 : case 0xd0 : case 0xf0 : VAR_300 -> VAR_301 = 2 ; VAR_302 -> VAR_303 = 3 ; VAR_304 -> VAR_305 = VAR_306 ;  if ( VAR_307 [ 1 ] <= 127 )  VAR_308 -> VAR_309 = VAR_310 + VAR_311 [ 1 ] + VAR_312 -> VAR_313 ;  else VAR_314 -> VAR_315 = VAR_316 - ( 256 - VAR_317 [ 1 ] ) + VAR_318 -> VAR_319 ;   VAR_320 -> VAR_321 = VAR_322 + VAR_323 -> VAR_324 ;  METHOD_69 ( VAR_325 , VAR_326 [ 0 ] ) ; break ; case 0x20 : VAR_327 -> VAR_328 = 6 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 [ 1 ] | VAR_335 [ 2 ] << 8 ; VAR_336 -> VAR_337 = VAR_338 ; VAR_339 -> VAR_340 = 2 ; METHOD_70 ( & VAR_341 -> VAR_342 , "1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=" , VAR_343 -> VAR_344 ) ; break ; case 0x4c : VAR_345 -> VAR_346 = 3 ; VAR_347 -> VAR_348 = VAR_349 ; VAR_350 -> VAR_351 = VAR_352 [ 1 ] | VAR_353 [ 2 ] << 8 ; METHOD_71 ( & VAR_354 -> VAR_355 , "0x%04x,pc,=" , VAR_356 -> VAR_357 ) ; break ; case 0x6c : VAR_358 -> VAR_359 = 5 ; VAR_360 -> VAR_361 = VAR_362 ; METHOD_72 ( & VAR_363 -> VAR_364 , "0x%04x,[2],pc,=" , VAR_365 [ 1 ] | VAR_366 [ 2 ] << 8 ) ; break ; case 0x60 : VAR_367 -> VAR_368 = VAR_369 ; VAR_370 -> VAR_371 = VAR_372 ; VAR_373 -> VAR_374 = 6 ; VAR_375 -> VAR_376 = VAR_377 ; VAR_378 -> VAR_379 = - 2 ; METHOD_73 ( & VAR_380 -> VAR_381 , "0x101,sp,+,[2],pc,=,pc,++=,2,sp,+=" ) ; break ; case 0x40 : VAR_382 -> VAR_383 = VAR_384 ; VAR_385 -> VAR_386 = VAR_387 ; VAR_388 -> VAR_389 = 6 ; VAR_390 -> VAR_391 = VAR_392 ; VAR_393 -> VAR_394 = - 3 ; METHOD_74 ( & VAR_395 -> VAR_396 , "0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+=" ) ; break ; case 0xea : VAR_397 -> VAR_398 = VAR_399 ; VAR_400 -> VAR_401 = 2 ; break ; case 0xa9 : case 0xa5 : case 0xb5 : case 0xad : case 0xbd : case 0xb9 : case 0xa1 : case 0xb1 : VAR_402 -> VAR_403 = VAR_404 ; METHOD_75 ( VAR_405 , VAR_406 , VAR_407 , VAR_408 ) ; if ( VAR_409 [ 0 ] == 0xa9 ) METHOD_76 ( & VAR_410 -> VAR_411 , "%s,a,=" , VAR_412 ) ; else METHOD_77 ( & VAR_413 -> VAR_414 , "%s,[1],a,=" , VAR_415 ) ; METHOD_78 ( VAR_416 , VAR_417 ) ; break ; case 0xa2 : case 0xa6 : case 0xb6 : case 0xae : case 0xbe : VAR_418 -> VAR_419 = VAR_420 ; METHOD_79 ( VAR_421 , VAR_422 , VAR_423 , VAR_424 , 'y' ) ; if ( VAR_425 [ 0 ] == 0xa2 ) METHOD_80 ( & VAR_426 -> VAR_427 , "%s,x,=" , VAR_428 ) ; else METHOD_81 ( & VAR_429 -> VAR_430 , "%s,[1],x,=" , VAR_431 ) ; METHOD_82 ( VAR_432 , VAR_433 ) ; break ; case 0xa0 : case 0xa4 : case 0xb4 : case 0xac : case 0xbc : VAR_434 -> VAR_435 = VAR_436 ; METHOD_83 ( VAR_437 , VAR_438 , VAR_439 , VAR_440 , 'x' ) ; if ( VAR_441 [ 0 ] == 0xa0 ) METHOD_84 ( & VAR_442 -> VAR_443 , "%s,y,=" , VAR_444 ) ; else METHOD_85 ( & VAR_445 -> VAR_446 , "%s,[1],y,=" , VAR_447 ) ; METHOD_86 ( VAR_448 , VAR_449 ) ; break ; case 0x85 : case 0x95 : case 0x8d : case 0x9d : case 0x99 : case 0x81 : case 0x91 : VAR_450 -> VAR_451 = VAR_452 ; METHOD_87 ( VAR_453 , VAR_454 , VAR_455 , VAR_456 ) ; METHOD_88 ( & VAR_457 -> VAR_458 , "a,%s,=[1]" , VAR_459 ) ; break ; case 0x86 : case 0x96 : case 0x8e : VAR_460 -> VAR_461 = VAR_462 ; METHOD_89 ( VAR_463 , VAR_464 , VAR_465 , VAR_466 , 'y' ) ; METHOD_90 ( & VAR_467 -> VAR_468 , "x,%s,=[1]" , VAR_469 ) ; break ; case 0x84 : case 0x94 : case 0x8c : VAR_470 -> VAR_471 = VAR_472 ; METHOD_91 ( VAR_473 , VAR_474 , VAR_475 , VAR_476 , 'x' ) ; METHOD_92 ( & VAR_477 -> VAR_478 , "y,%s,=[1]" , VAR_479 ) ; break ; case 0x08 : case 0x48 : VAR_480 -> VAR_481 = VAR_482 ; VAR_483 -> VAR_484 = 3 ; VAR_485 -> VAR_486 = VAR_487 ; VAR_488 -> VAR_489 = 1 ; METHOD_93 ( VAR_490 , VAR_491 [ 0 ] ) ; break ; case 0x28 : case 0x68 : VAR_492 -> VAR_493 = VAR_494 ; VAR_495 -> VAR_496 = 4 ; VAR_497 -> VAR_498 = VAR_499 ; VAR_500 -> VAR_501 = - 1 ; METHOD_94 ( VAR_502 , VAR_503 [ 0 ] ) ; break ; case 0xaa : case 0x8a : case 0xa8 : case 0x98 : VAR_504 -> VAR_505 = VAR_506 ; VAR_507 -> VAR_508 = 2 ; METHOD_95 ( VAR_509 , VAR_510 [ 0 ] ) ; break ; case 0x9a : VAR_511 -> VAR_512 = VAR_513 ; VAR_514 -> VAR_515 = 2 ; VAR_516 -> VAR_517 = VAR_518 ; METHOD_96 ( VAR_519 , VAR_520 [ 0 ] ) ; break ; case 0xba : VAR_521 -> VAR_522 = VAR_523 ; VAR_524 -> VAR_525 = 2 ; VAR_526 -> VAR_527 = VAR_528 ; METHOD_97 ( VAR_529 , VAR_530 [ 0 ] ) ; break ; } return VAR_531 -> VAR_532 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 TYPE_7 TYPE_8 ; VAR_5 ; METHOD_1 ( VAR_6 ) ; if ( METHOD_2 ( VAR_7 ) >= 2 ) METHOD_3 ( METHOD_4 ( VAR_8 ) , "imp_dbh->connect:dsn=%s,uid=%s,pwd=%s\\n" , VAR_9 ? VAR_10 : "NULL" , VAR_11 ? VAR_12 : "NULL" , VAR_13 ? VAR_14 : "NULL" ) ; VAR_15 -> VAR_16 . VAR_17 = 0 ; VAR_18 -> VAR_19 . VAR_20 = 0 ; VAR_21 -> VAR_22 = VAR_23 ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; VAR_30 -> VAR_31 = VAR_32 ; if d ( VAR_33 ) && VAR_34 >= VAR_35 VAR_36 -> VAR_37 = VAR_38 ; if ( ! my_login ( TYPE_9 VAR_39 , VAR_40 ) ) {  METHOD_5 ( VAR_41 , METHOD_6 ( VAR_42 -> VAR_43 ) ,  METHOD_7 ( VAR_44 -> VAR_45 ) , METHOD_8 ( VAR_46 -> VAR_47 ) ) ; return VAR_48 ; } METHOD_9 ( VAR_49 ) ; METHOD_10 ( VAR_50 , VAR_51 ) ; return VAR_52 ; }
TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 VAR_0 , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { METHOD_1 ( & VAR_3 ) ; TYPE_5 * VAR_4 = METHOD_2 ( VAR_5 ) ; if ( ! VAR_6 ) goto VAR_7 ; TYPE_6 VAR_8 = VAR_9 ; if ( VAR_10 & VAR_11 && ! VAR_12 -> VAR_13 . VAR_14 ) { if ( VAR_15 -> VAR_16 . VAR_17 ) { TYPE_7 VAR_18 = 0 ;  if ( ! ( VAR_19 & VAR_20 ) || ( METHOD_3 ( VAR_21 -> VAR_22 , VAR_23 , & VAR_24 ) == 0 && VAR_25 ) )   METHOD_4 ( & VAR_26 ) ;   METHOD_5 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ;  } else { METHOD_6 ( "%ssocketsignaledforreadwhiledisconnected,slot:%d,channel:%d" , VAR_31 , VAR_32 -> VAR_33 , VAR_34 -> VAR_35 ) ; VAR_36 = VAR_37 ; } } if ( VAR_38 & VAR_39 ) { if ( ! VAR_40 -> VAR_41 . VAR_42 || ! METHOD_7 ( VAR_43 ) ) { METHOD_8 ( "%ssocketsignaledforwritewhiledisconnected(orwritefailure),slot:%d,channel:%d" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; VAR_49 = VAR_50 ; } } if ( VAR_51 || ( VAR_52 & VAR_53 ) ) { TYPE_8 VAR_54 = 0 ;  if ( VAR_55 || METHOD_9 ( VAR_56 -> VAR_57 , VAR_58 , & VAR_59 ) != 0 || ! VAR_60 )  METHOD_10 ( VAR_61 ) ; } VAR_62 : ; METHOD_11 ( & VAR_63 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 , * VAR_7 = VAR_8 , * VAR_9 = VAR_10 ; TYPE_5 * VAR_11 = VAR_12 ; TYPE_6 * VAR_13 = VAR_14 ; TYPE_7 * VAR_15 ; TYPE_8 VAR_16 = 0 ; TYPE_9 VAR_17 , VAR_18 ; TYPE_10 VAR_19 , VAR_20 ; TYPE_11 VAR_21 ; TYPE_12 VAR_22 ; TYPE_13 VAR_23 = 0 ; TYPE_14 VAR_24 = 0 ; TYPE_15 * VAR_25 = VAR_26 ; TYPE_16 * VAR_27 = VAR_28 ; TYPE_17 VAR_29 = 0 ; VAR_30 * VAR_31 ; TYPE_18 VAR_32 = VAR_33 ; TYPE_19 VAR_34 = 0 ; TYPE_20 VAR_35 , VAR_36 = 0 ;  struct STRUCT_OR_UNION_0 VAR_37 ;  METHOD_1 ( VAR_38 -> VAR_39 , VAR_40 , "PPI" ) ; METHOD_2 ( VAR_41 -> VAR_42 , VAR_43 ) ; VAR_44 = METHOD_3 ( VAR_45 , VAR_46 ) ; VAR_47 = METHOD_4 ( VAR_48 , VAR_49 + 1 ) ; VAR_50 = METHOD_5 ( VAR_51 , VAR_52 + 2 ) ; VAR_53 = METHOD_6 ( VAR_54 , VAR_55 + 4 ) ; METHOD_7 ( VAR_56 -> VAR_57 , VAR_58 , "PPIversion%u,%ubytes" , VAR_59 , VAR_60 ) ; if ( VAR_61 ) { VAR_62 = METHOD_8 ( VAR_63 , VAR_64 , VAR_65 , 0 , VAR_66 , "PPIversion%u,%ubytes" , VAR_67 , VAR_68 ) ; VAR_69 = METHOD_9 ( VAR_70 , VAR_71 ) ; METHOD_10 ( VAR_72 , VAR_73 , VAR_74 , VAR_75 , 1 , VAR_76 ) ; VAR_77 = METHOD_11 ( VAR_78 , VAR_79 , VAR_80 , VAR_81 + 1 , 1 , VAR_82 ) ; VAR_83 = METHOD_12 ( VAR_84 , VAR_85 ) ; METHOD_13 ( VAR_86 , VAR_87 , VAR_88 , VAR_89 + 1 , 1 , VAR_90 ) ; METHOD_14 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 + 1 , 1 , VAR_95 ) ; METHOD_15 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 + 2 , 2 , VAR_100 ) ; METHOD_16 ( VAR_101 , VAR_102 , VAR_103 , VAR_104 + 4 , 4 , VAR_105 ) ; } VAR_106 -= VAR_107 ; VAR_108 += 8 ; METHOD_17 ( & VAR_109 , 0 , sizeof ( VAR_110 ) ) ; VAR_111 . VAR_112 = - 1 ; VAR_113 . VAR_114 = VAR_115 ; VAR_116 . VAR_117 = VAR_118 ; VAR_119 . VAR_120 = VAR_121 ; VAR_122 . VAR_123 = 0 ; while ( VAR_124 > 0 ) { VAR_125 = METHOD_18 ( VAR_126 , VAR_127 ) ; VAR_128 = METHOD_19 ( VAR_129 , VAR_130 + 2 ) + 4 ; VAR_131 -= VAR_132 ; switch ( VAR_133 ) { case VAR_134 : METHOD_20 ( VAR_135 , VAR_136 , VAR_137 , VAR_138 , VAR_139 , & VAR_140 ) ; break ; case VAR_141 : METHOD_21 ( VAR_142 , VAR_143 , VAR_144 , VAR_145 , VAR_146 , VAR_147 , & VAR_148 , & VAR_149 , & VAR_150 ) ; break ; case VAR_151 : METHOD_22 ( VAR_152 , VAR_153 , VAR_154 , VAR_155 , VAR_156 , & VAR_157 , & VAR_158 , & VAR_159 ) ; break ; case VAR_160 : METHOD_23 ( VAR_161 ) ; break ; case VAR_162 : METHOD_24 ( VAR_163 ) ; break ; case VAR_164 : METHOD_25 ( VAR_165 ) ; break ; case VAR_166 : METHOD_26 ( VAR_167 , VAR_168 , VAR_169 , VAR_170 , VAR_171 ) ; break ; case VAR_172 : METHOD_27 ( VAR_173 , VAR_174 , VAR_175 , VAR_176 , VAR_177 ) ; break ; case VAR_178 : if ( VAR_179 == VAR_180 ) { METHOD_28 ( VAR_181 , VAR_182 , VAR_183 , VAR_184 , VAR_185 , VAR_186 ) ; } else { VAR_187 = METHOD_29 ( VAR_188 , VAR_189 + 4 , VAR_190 - 4 , - 1 ) ; METHOD_30 ( VAR_191 , VAR_192 , VAR_193 , VAR_194 ) ; } break ; case VAR_195 : if ( VAR_196 == VAR_197 ) { METHOD_31 ( VAR_198 , VAR_199 , VAR_200 , VAR_201 , VAR_202 , VAR_203 ) ; } else { VAR_204 = METHOD_32 ( VAR_205 , VAR_206 + 4 , VAR_207 - 4 , - 1 ) ; METHOD_33 ( VAR_208 , VAR_209 , VAR_210 , VAR_211 ) ; } break ; case VAR_212 : if ( VAR_213 == VAR_214 ) { METHOD_34 ( VAR_215 , VAR_216 , VAR_217 , VAR_218 , VAR_219 , VAR_220 ) ; } else { VAR_221 = METHOD_35 ( VAR_222 , VAR_223 + 4 , VAR_224 - 4 , - 1 ) ; METHOD_36 ( VAR_225 , VAR_226 , VAR_227 , VAR_228 ) ; } break ; case VAR_229 : if ( VAR_230 == VAR_231 ) { METHOD_37 ( VAR_232 , VAR_233 , VAR_234 , VAR_235 , VAR_236 , VAR_237 ) ; } else { VAR_238 = METHOD_38 ( VAR_239 , VAR_240 + 4 , VAR_241 - 4 , - 1 ) ; METHOD_39 ( VAR_242 , VAR_243 , VAR_244 , VAR_245 ) ; } break ; case VAR_246 : if ( VAR_247 == VAR_248 ) { METHOD_40 ( VAR_249 , VAR_250 , VAR_251 , VAR_252 , VAR_253 , VAR_254 ) ; } else { VAR_255 = METHOD_41 ( VAR_256 , VAR_257 + 4 , VAR_258 - 4 , - 1 ) ; METHOD_42 ( VAR_259 , VAR_260 , VAR_261 , VAR_262 ) ; } break ; default : METHOD_43 ( VAR_263 , VAR_264 , VAR_265 , VAR_266 , VAR_267 , VAR_268 ) ; } VAR_269 += VAR_270 ; if ( METHOD_44 ( VAR_271 ) ) { VAR_272 += METHOD_45 ( VAR_273 ) ; } } if ( VAR_274 && METHOD_46 ( VAR_275 ) ) { VAR_276 = METHOD_47 ( VAR_277 , VAR_278 ) ; if 0 if ( METHOD_48 ( VAR_279 ) ) { VAR_280 = METHOD_49 ( VAR_281 ) ; } VAR_282 -> VAR_283 = VAR_284 ; VAR_285 = METHOD_50 ( & VAR_286 , VAR_287 , VAR_288 , VAR_289 ) ; while ( VAR_290 ) { VAR_291 += VAR_292 -> VAR_293 + METHOD_51 ( VAR_294 -> VAR_295 ) + 4 ; VAR_296 = VAR_297 -> VAR_298 ; } if ( VAR_299 > VAR_300 ) { if ( VAR_301 ) { METHOD_52 ( VAR_302 , VAR_303 , & VAR_304 , VAR_305 , VAR_306 , - 1 , "Aggregatelengthgreaterthanmaximum(%u)" , VAR_307 ) ; METHOD_53 ( VAR_308 ) ; } else { return ; } } METHOD_54 ( & VAR_309 , VAR_310 , VAR_311 , VAR_312 , VAR_313 , VAR_314 , VAR_315 , VAR_316 ) ; VAR_317 -> VAR_318 = VAR_319 ; VAR_320 = METHOD_55 ( & VAR_321 , VAR_322 , VAR_323 , VAR_324 ) ; if ( VAR_325 && VAR_326 ) { VAR_327 = VAR_328 ; VAR_329 = METHOD_56 ( VAR_330 , VAR_331 , VAR_332 , - 1 , VAR_333 , & VAR_334 , "A-MPDU(%ubytesw/hdrs):" , VAR_335 ) ; METHOD_57 ( VAR_336 ) ; while ( VAR_337 ) { if ( VAR_338 -> VAR_339 && VAR_340 -> VAR_341 ) { VAR_342 = VAR_343 -> VAR_344 ; if ( ! VAR_345 ) METHOD_58 ( VAR_346 , "," ) ; VAR_347 = VAR_348 ; METHOD_59 ( VAR_349 , "%u(%u)" , VAR_350 -> VAR_351 , VAR_352 -> VAR_353 ) ; METHOD_60 ( VAR_354 , VAR_355 , VAR_356 , 0 , 0 , VAR_357 , "Frame:%u(%ubyte%s)" , VAR_358 , VAR_359 -> VAR_360 , METHOD_61 ( VAR_361 -> VAR_362 , "" , "s" ) ) ; } VAR_363 = VAR_364 -> VAR_365 ; } if ( VAR_366 && VAR_367 != VAR_368 -> VAR_369 -> VAR_370 ) METHOD_62 ( VAR_371 , VAR_372 , VAR_373 , 0 , 0 , VAR_374 ) ; } if ( VAR_375 && ! METHOD_63 ( VAR_376 ) ) { if ( VAR_377 ) { VAR_378 = METHOD_64 ( VAR_379 , METHOD_65 ( "wlan_aggregate" ) , VAR_380 , 0 , VAR_381 , "IEEE802.11AggregateMPDU" ) ; VAR_382 = METHOD_66 ( VAR_383 , VAR_384 ) ; } while ( VAR_385 ) { if ( VAR_386 -> VAR_387 && VAR_388 -> VAR_389 ) { VAR_390 ++ ; VAR_391 = METHOD_67 ( METHOD_68 ( ) , "MPDU%d" , VAR_392 ) ; VAR_393 = METHOD_69 ( VAR_394 , VAR_395 -> VAR_396 ) ; METHOD_70 ( VAR_397 , VAR_398 , VAR_399 ) ; VAR_400 = METHOD_71 ( VAR_401 , VAR_402 , 0 , - 1 , VAR_403 , VAR_404 , VAR_405 ) ; METHOD_72 ( VAR_406 , VAR_407 , VAR_408 , VAR_409 , & VAR_410 ) ; } VAR_411 = VAR_412 -> VAR_413 ; } METHOD_73 ( VAR_414 , VAR_415 , VAR_416 , 0 , 0 , VAR_417 ) ; VAR_418 -> VAR_419 = VAR_420 ; } else { VAR_421 = METHOD_74 ( VAR_422 , VAR_423 ) ; METHOD_75 ( VAR_424 -> VAR_425 , VAR_426 , "IEEE802.11n" ) ; METHOD_76 ( VAR_427 -> VAR_428 , VAR_429 , "UnreassembledA-MPDUdata" ) ; METHOD_77 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 ) ; } return ; } VAR_434 = METHOD_78 ( VAR_435 , VAR_436 ) ; if ( VAR_437 == 105 ) { METHOD_79 ( VAR_438 , VAR_439 , VAR_440 , VAR_441 , & VAR_442 ) ; } else {  METHOD_80 ( VAR_443 ,   METHOD_81 ( VAR_444 ) , VAR_445 , VAR_446 , VAR_447 ) ;  } }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 = METHOD_1 ( VAR_5 ) ; if ( VAR_6 == VAR_7 && VAR_8 == 0 ) VAR_9 = VAR_10 ; TYPE_6 VAR_11 = METHOD_2 ( VAR_12 ) ; unsigned TYPE_7 * VAR_13 ;  VAR_14 = METHOD_3 ( VAR_15 + VAR_16 + 1 ) ;  if ( VAR_17 == VAR_18 ) return VAR_19 ; if ( VAR_20 == VAR_21 ) VAR_22 = VAR_23 ; else if ( ! VAR_24 ) METHOD_4 ( VAR_25 , 0 , VAR_26 + VAR_27 + 1 ) ; VAR_28 = ( TYPE_8 * ) VAR_29 + VAR_30 ; VAR_31 = ( ( unsigned TYPE_9 * ) VAR_32 ) - 1 ; switch ( VAR_33 ) { case VAR_34 : { * VAR_35 = VAR_36 | ( VAR_37 << VAR_38 ) ; break ; } case VAR_39 : { METHOD_5 ( 8 , VAR_40 ) ; VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 = VAR_46 ; * VAR_47 = VAR_48 ; break ; } case VAR_49 : { METHOD_6 ( 16 , VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; * VAR_57 = VAR_58 ; break ; } case VAR_59 : { METHOD_7 ( 32 , VAR_60 ) ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; * VAR_67 = VAR_68 ; break ; } case VAR_69 : { METHOD_8 ( 64 , VAR_70 ) ; VAR_71 -> VAR_72 = VAR_73 ; VAR_74 -> VAR_75 = VAR_76 ; * VAR_77 = VAR_78 ; break ; } } if ( VAR_79 && VAR_80 ) METHOD_9 ( VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 [ VAR_85 ] = '\\0' ; return VAR_86 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; const TYPE_8 * VAR_7 ; TYPE_9 * VAR_8 = VAR_9 ; TYPE_10 * VAR_10 = VAR_11 ; TYPE_11 * VAR_12 = VAR_13 ; TYPE_12 * VAR_14 = VAR_15 ; TYPE_13 VAR_16 ; TYPE_14 VAR_17 ; TYPE_15 VAR_18 ; TYPE_16 VAR_19 ;  TYPE_17 VAR_20 ;  VAR_21 = METHOD_1 ( VAR_22 -> VAR_23 , 8 ) ; VAR_24 = ( VAR_25 -> VAR_26 ? VAR_27 : VAR_28 -> VAR_29 ) ; VAR_30 = VAR_31 -> VAR_32 ;  for ( VAR_33 = 0 ; VAR_34 < VAR_35 -> VAR_36 ; VAR_37 ++ )  { VAR_38 = VAR_39 + ( VAR_40 -> VAR_41 - 1 - VAR_42 ) * VAR_43 ; VAR_44 = VAR_45 -> VAR_46 -> VAR_47 [ 0 ] + VAR_48 * VAR_49 ; VAR_50 = VAR_51 -> VAR_52 -> VAR_53 [ 1 ] + VAR_54 * VAR_55 ; VAR_56 = VAR_57 -> VAR_58 -> VAR_59 [ 2 ] + VAR_60 * VAR_61 ; VAR_62 = VAR_63 -> VAR_64 -> VAR_65 [ 3 ] + VAR_66 * VAR_67 -> VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 -> VAR_72 ; VAR_73 ++ ) { switch ( VAR_74 -> VAR_75 ) { case VAR_76 : VAR_77 = * VAR_78 ++ ; VAR_79 = * VAR_80 ++ ; VAR_81 = * VAR_82 ++ ; VAR_83 ++ ; VAR_84 = 0xFF ; break ; case VAR_85 : VAR_86 = * VAR_87 ++ ; VAR_88 = * VAR_89 ++ ; VAR_90 = * VAR_91 ++ ; VAR_92 = * VAR_93 ++ ; break ; case VAR_94 : VAR_95 = * VAR_96 ++ ; VAR_97 = * VAR_98 ++ ; VAR_99 = * VAR_100 ++ ; VAR_101 ++ ; VAR_102 = 0xFF ; break ; case VAR_103 : VAR_104 = * VAR_105 ++ ; VAR_106 = * VAR_107 ++ ; VAR_108 = * VAR_109 ++ ; VAR_110 = * VAR_111 ++ ; break ; case VAR_112 : VAR_113 = * VAR_114 ++ ; VAR_115 = * VAR_116 ++ ; VAR_117 = * VAR_118 ++ ; VAR_119 = 0xFF ; break ; case VAR_120 : VAR_121 = * VAR_122 ++ ; VAR_123 = * VAR_124 ++ ; VAR_125 = * VAR_126 ++ ; VAR_127 = 0xFF ; break ; case VAR_128 : VAR_129 = ( TYPE_18 ) ( ( ( * ( VAR_130 + 1 ) ) & 0xF8 ) | ( ( * ( VAR_131 + 1 ) ) >> 5 ) ) ; VAR_132 = ( TYPE_19 ) ( ( ( ( * ( VAR_133 + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * VAR_134 ) & 0xE0 ) >> 3 ) ) ; VAR_135 = ( TYPE_20 ) ( ( ( ( * VAR_136 ) & 0x1F ) << 3 ) | ( ( ( * VAR_137 ) >> 2 ) & 0x07 ) ) ; VAR_138 = 0xFF ; VAR_139 += 2 ; break ; case VAR_140 : VAR_141 = ( TYPE_21 ) ( ( ( * ( VAR_142 + 1 ) ) & 0xF8 ) | ( ( * ( VAR_143 + 1 ) ) >> 5 ) ) ; VAR_144 = ( TYPE_22 ) ( ( ( ( * ( VAR_145 + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * VAR_146 ) & 0xE0 ) >> 3 ) ) ; VAR_147 = ( TYPE_23 ) ( ( ( ( * VAR_148 ) & 0x1F ) << 3 ) | ( ( ( * VAR_149 ) >> 2 ) & 0x07 ) ) ; VAR_150 = 0xFF ; VAR_151 += 2 ; break ; case VAR_152 : { TYPE_24 VAR_153 ; TYPE_25 VAR_154 ; VAR_155 = ( 7 - ( VAR_156 % 8 ) ) ; VAR_157 = ( ( * VAR_158 ) >> VAR_159 ) & 1 ; VAR_160 |= ( ( ( * ( VAR_161 + 1 ) ) >> VAR_162 ) & 1 ) << 1 ; VAR_163 |= ( ( ( * ( VAR_164 + 2 ) ) >> VAR_165 ) & 1 ) << 2 ; VAR_166 |= ( ( ( * ( VAR_167 + 3 ) ) >> VAR_168 ) & 1 ) << 3 ; VAR_169 *= 3 ; VAR_170 = ( TYPE_26 ) VAR_171 -> VAR_172 [ VAR_173 ] ; VAR_174 = ( TYPE_27 ) VAR_175 -> VAR_176 [ VAR_177 + 1 ] ; VAR_178 = ( TYPE_28 ) VAR_179 -> VAR_180 [ VAR_181 + 2 ] ; if ( VAR_182 == 0 ) VAR_183 += 4 ; } VAR_184 = 0xFF ; break ; case VAR_185 : { TYPE_29 VAR_186 = ( * VAR_187 ) * 3 ; VAR_188 = ( TYPE_30 ) VAR_189 -> VAR_190 [ VAR_191 ] ; VAR_192 = ( TYPE_31 ) VAR_193 -> VAR_194 [ VAR_195 + 1 ] ; VAR_196 = ( TYPE_32 ) VAR_197 -> VAR_198 [ VAR_199 + 2 ] ; VAR_200 ++ ; } VAR_201 = 0xFF ; break ; default : VAR_202 = VAR_203 = VAR_204 = VAR_205 = 0 ; break ; } * VAR_206 ++ = ( TYPE_33 ) ( ( VAR_207 >> 2 ) + ( VAR_208 >> 1 ) + ( VAR_209 >> 2 ) ) ; * VAR_210 ++ = ( TYPE_34 ) ( ( VAR_211 - VAR_212 ) >> VAR_213 ) ; * VAR_214 ++ = ( TYPE_35 ) ( ( - ( VAR_215 >> 1 ) + VAR_216 - ( VAR_217 >> 1 ) ) >> VAR_218 ) ; * VAR_219 ++ = VAR_220 ; } if ( VAR_221 -> VAR_222 && ( VAR_223 % 2 ) == 1 ) { * VAR_224 = * ( VAR_225 - 1 ) ; * VAR_226 = * ( VAR_227 - 1 ) ; * VAR_228 = * ( VAR_229 - 1 ) ; } } if ( VAR_230 -> VAR_231 && ( VAR_232 % 2 ) == 1 ) { VAR_233 = VAR_234 -> VAR_235 -> VAR_236 [ 0 ] + VAR_237 * VAR_238 ; VAR_239 = VAR_240 -> VAR_241 -> VAR_242 [ 1 ] + VAR_243 * VAR_244 ; VAR_245 = VAR_246 -> VAR_247 -> VAR_248 [ 2 ] + VAR_249 * VAR_250 ; METHOD_2 ( VAR_251 , VAR_252 - VAR_253 , VAR_254 ) ; METHOD_3 ( VAR_255 , VAR_256 - VAR_257 , VAR_258 ) ; METHOD_4 ( VAR_259 , VAR_260 - VAR_261 , VAR_262 ) ; }  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; if ( VAR_8 -> VAR_9 ) return VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; VAR_20 = VAR_21 + ( VAR_22 * 2 ) ; if ( VAR_23 < VAR_24 ) { VAR_25 = METHOD_2 ( VAR_26 , VAR_27 ) + 1 ; }  while ( VAR_28 < VAR_29 )  VAR_30 = METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ;  return VAR_38 ;  }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( const TYPE_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 METHOD_1 , TYPE_4 * VAR_3 , struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; const TYPE_5 * VAR_7 = VAR_8 ; TYPE_6 * VAR_9 = VAR_10 ; TYPE_7 * VAR_11 ; TYPE_8 * VAR_12 ; TYPE_9 VAR_13 = 0 ; TYPE_10 VAR_14 = - VAR_15 ; TYPE_11 VAR_16 ; TYPE_12 VAR_17 = 0 ; TYPE_13 VAR_18 ; VAR_19 += 2 ; VAR_20 = METHOD_2 ( VAR_21 , sizeof ( * VAR_22 ) , VAR_23 ) ; if ( ! VAR_24 ) return METHOD_3 ( - VAR_25 ) ; VAR_26 = METHOD_4 ( VAR_27 , sizeof ( * VAR_28 ) , VAR_29 ) ; if ( ! VAR_30 ) { METHOD_5 ( VAR_31 , - VAR_32 , 0 ) ; goto VAR_33 ; } VAR_34 = METHOD_6 ( VAR_35 , sizeof ( * VAR_36 ) , VAR_37 ) ; if ( ! VAR_38 ) { METHOD_7 ( VAR_39 , - VAR_40 , 0 ) ; goto VAR_41 ; } VAR_42 = VAR_43 ; VAR_44 = VAR_45 ; * VAR_46 = 0 ; while ( * VAR_47 ) { const TYPE_14 * VAR_48 = VAR_49 ++ ; if ( METHOD_8 ( * VAR_50 ) ) continue ; switch ( * VAR_51 ) { case '(' : if ( VAR_52 - VAR_53 > VAR_54 )  return METHOD_9 ( - VAR_55 ) ;  * ( ++ VAR_56 ) = VAR_57 ; continue ; case '!' : if ( ! METHOD_10 ( VAR_58 ) ) break ; VAR_59 = ! VAR_60 ; continue ; } if ( VAR_61 >= VAR_62 ) { METHOD_11 ( VAR_63 , VAR_64 , VAR_65 - VAR_66 ) ; goto VAR_67 ; } VAR_68 [ VAR_69 ] = VAR_70 ; VAR_71 [ VAR_72 ] . VAR_73 = VAR_74 - 1 ; VAR_75 = METHOD_12 ( VAR_76 , VAR_77 , VAR_78 - VAR_79 , VAR_80 , & VAR_81 [ VAR_82 ] . VAR_83 ) ; if ( VAR_84 < 0 ) { VAR_85 = VAR_86 ; goto VAR_87 ; } VAR_88 = VAR_89 + VAR_90 ; VAR_91 ++ ; VAR_92 = - 1 ; while ( 1 ) { VAR_93 = VAR_94 ++ ; if ( METHOD_13 ( * VAR_95 ) ) continue ; switch ( * VAR_96 ) { case ')' : case '\\0' : break ; case '&' : case '|' : if ( VAR_97 [ 1 ] == VAR_98 [ 0 ] ) { VAR_99 ++ ; break ; } default : METHOD_14 ( VAR_100 , VAR_101 , VAR_102 - VAR_103 ) ; goto VAR_104 ; } VAR_105 = * VAR_106 & VAR_107 ; if ( * VAR_108 & VAR_109 ) { METHOD_15 ( VAR_110 , VAR_111 - 1 , VAR_112 ) ; * VAR_113 &= ~ VAR_114 ; } if ( * VAR_115 == '&' ) { * VAR_116 |= VAR_117 ; break ; } if ( * VAR_118 & VAR_119 ) { METHOD_16 ( VAR_120 , VAR_121 - 1 , ! VAR_122 ) ; * VAR_123 &= ~ VAR_124 ; } if ( * VAR_125 == '|' ) { * VAR_126 |= VAR_127 ; break ; } if ( ! * VAR_128 ) goto VAR_129 ; if ( VAR_130 == VAR_131 ) { VAR_132 = - 1 ; METHOD_17 ( VAR_133 , VAR_134 , VAR_135 - VAR_136 ) ; goto VAR_137 ; } VAR_138 -- ; } } VAR_139 : if ( VAR_140 != VAR_141 ) { METHOD_18 ( VAR_142 , VAR_143 , VAR_144 - VAR_145 ) ; goto VAR_146 ; } if ( ! VAR_147 ) { VAR_148 = - VAR_149 ; METHOD_19 ( VAR_150 , VAR_151 , VAR_152 - VAR_153 ) ; goto VAR_154 ; } VAR_155 [ VAR_156 ] . VAR_157 = VAR_158 ; VAR_159 [ VAR_160 ] . VAR_161 = 1 ; VAR_162 [ VAR_163 + 1 ] . VAR_164 = VAR_165 ; VAR_166 [ VAR_167 + 1 ] . VAR_168 = 0 ; VAR_169 [ VAR_170 - 1 ] . VAR_171 = VAR_172 ; VAR_173 [ VAR_174 - 1 ] . VAR_175 = VAR_176 ; for ( VAR_177 = VAR_178 - 1 ; VAR_179 -- ; ) { TYPE_15 VAR_180 = VAR_181 [ VAR_182 ] . VAR_183 ; if ( VAR_184 [ VAR_185 ] . VAR_186 == VAR_187 [ VAR_188 ] . VAR_189 ) VAR_190 [ VAR_191 ] . VAR_192 = VAR_193 [ VAR_194 ] . VAR_195 ; } for ( VAR_196 = 0 ; VAR_197 < VAR_198 ; VAR_199 ++ ) { VAR_200 = VAR_201 [ VAR_202 ] ^ VAR_203 [ VAR_204 ] . VAR_205 ; VAR_206 [ VAR_207 ] . VAR_208 = VAR_209 ; if ( METHOD_20 ( VAR_210 [ VAR_211 ] . VAR_212 <= VAR_213 ) ) { VAR_214 = - VAR_215 ; goto VAR_216 ; } } METHOD_21 ( VAR_217 ) ; METHOD_22 ( VAR_218 ) ; return VAR_219 ; VAR_220 : METHOD_23 ( VAR_221 ) ; METHOD_24 ( VAR_222 ) ; if ( VAR_223 ) { for ( VAR_224 = 0 ; VAR_225 [ VAR_226 ] . VAR_227 ; VAR_228 ++ ) METHOD_25 ( VAR_229 [ VAR_230 ] . VAR_231 ) ; METHOD_26 ( VAR_232 ) ; } return METHOD_27 ( VAR_233 ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) {  const TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ;  TYPE_3 VAR_4 ; if ( VAR_5 -> VAR_6 . VAR_7 == 0 ) {  VAR_8 = ( ( VAR_9 -> VAR_10 . VAR_11 / 2 ) > VAR_12 )   ? VAR_13 : ( TYPE_4 ) ( VAR_14 -> VAR_15 . VAR_16 / 2 ) ;  } else { const TYPE_5 VAR_17 = 32 ;  TYPE_6 VAR_18 = METHOD_1 ( VAR_19 , ( TYPE_7 ) ( 2 * VAR_20 -> VAR_21 - 16 ) ) ;   if ( VAR_22 -> VAR_23 < VAR_24 -> VAR_25 / 2 ) {  VAR_26 = ( TYPE_8 ) ( VAR_27 * VAR_28 -> VAR_29 /  ( VAR_30 -> VAR_31 / 2 ) ) ;  }  VAR_32 = ( ( 16 + VAR_33 ) * VAR_34 -> VAR_35 ) >> 4 ;  } return METHOD_2 ( VAR_36 , VAR_37 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; if ( ( VAR_3 -> VAR_4 . VAR_5 . VAR_6 & ( VAR_7 | VAR_8 ) ) == VAR_9 ) return ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 -> VAR_15 . VAR_16 |= ( VAR_17 | VAR_18 ) ;  METHOD_2 ( VAR_19 ) ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 )  {  TYPE_5 VAR_4 ;  VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 , METHOD_2 ( VAR_8 -> VAR_9 , 0 ) , VAR_10 , VAR_11 , 0 ,  VAR_12 , VAR_13 , VAR_14 , 100 ) ;  if ( VAR_15 < 0 ) METHOD_3 ( VAR_16 , VAR_17 , VAR_18 -> VAR_19 , "%sreturned%d\\n" , VAR_20 , VAR_21 ) ;  return VAR_22 ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {   TYPE_2 VAR_1 = METHOD_1 ( VAR_2 , 2 ) ;  if ( VAR_3 == VAR_4 )  VAR_5 += METHOD_2 ( VAR_6 ) ;  return VAR_7 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const struct STRUCT_OR_UNION_0 * VAR_1 , register const TYPE_2 * VAR_2 ) { register const TYPE_3 * VAR_3 ; register const struct STRUCT_OR_UNION_1 * VAR_4 ; register const struct STRUCT_OR_UNION_2 * VAR_5 ; register const struct STRUCT_OR_UNION_3 * VAR_6 ; register TYPE_4 VAR_7 ; switch ( VAR_8 -> VAR_9 ) { case VAR_10 : {  register const struct STRUCT_OR_UNION_4 * VAR_11 = ( const struct STRUCT_OR_UNION_5 * ) ( ( const TYPE_5 * ) VAR_12 + VAR_13 ) ;  METHOD_1 ( ( VAR_14 , "\\n\\tOptions[%s]" , METHOD_2 ( VAR_15 , "none" , METHOD_3 ( & VAR_16 -> VAR_17 ) ) ) ) ; METHOD_4 ( VAR_18 -> VAR_19 ) ; METHOD_5 ( ( VAR_20 , "\\n\\tHelloTimer%us,DeadTimer%us,Interface-ID%s,Priority%u" , METHOD_6 ( & VAR_21 -> VAR_22 ) , METHOD_7 ( & VAR_23 -> VAR_24 ) , METHOD_8 ( VAR_25 , & VAR_26 -> VAR_27 ) , VAR_28 -> VAR_29 ) ) ; METHOD_9 ( VAR_30 -> VAR_31 ) ; if ( METHOD_10 ( & VAR_32 -> VAR_33 ) != 0 ) METHOD_11 ( ( VAR_34 , "\\n\\tDesignatedRouter%s" , METHOD_12 ( VAR_35 , & VAR_36 -> VAR_37 ) ) ) ; METHOD_13 ( VAR_38 -> VAR_39 ) ; if ( METHOD_14 ( & VAR_40 -> VAR_41 ) != 0 ) METHOD_15 ( ( VAR_42 , ",BackupDesignatedRouter%s" , METHOD_16 ( VAR_43 , & VAR_44 -> VAR_45 ) ) ) ; if ( VAR_46 -> VAR_47 > 1 ) { METHOD_17 ( ( VAR_48 , "\\n\\tNeighborList:" ) ) ; VAR_49 = VAR_50 -> VAR_51 ; while ( ( const TYPE_6 * ) VAR_52 < VAR_53 ) { METHOD_18 ( * VAR_54 ) ; METHOD_19 ( ( VAR_55 , "\\n\\t%s" , METHOD_20 ( VAR_56 , VAR_57 ) ) ) ; ++ VAR_58 ; } } break ; } case VAR_59 : { register const struct STRUCT_OR_UNION_6 * VAR_60 = ( const struct STRUCT_OR_UNION_7 * ) ( ( const TYPE_7 * ) VAR_61 + VAR_62 ) ; METHOD_21 ( VAR_63 -> VAR_64 ) ; METHOD_22 ( ( VAR_65 , "\\n\\tOptions[%s]" , METHOD_23 ( VAR_66 , "none" , METHOD_24 ( & VAR_67 -> VAR_68 ) ) ) ) ; METHOD_25 ( VAR_69 -> VAR_70 ) ; METHOD_26 ( ( VAR_71 , ",DDFlags[%s]" , METHOD_27 ( VAR_72 , "none" , VAR_73 -> VAR_74 ) ) ) ; METHOD_28 ( VAR_75 -> VAR_76 ) ; METHOD_29 ( ( VAR_77 , ",MTU%u,DD-Sequence0x%08x" , METHOD_30 ( & VAR_78 -> VAR_79 ) , METHOD_31 ( & VAR_80 -> VAR_81 ) ) ) ; if ( VAR_82 -> VAR_83 > 1 ) { VAR_84 = VAR_85 -> VAR_86 ; while ( ( const TYPE_8 * ) VAR_87 < VAR_88 ) { if ( METHOD_32 ( VAR_89 , VAR_90 ++ , VAR_91 ) ) goto VAR_92 ; } } break ; } case VAR_93 : if ( VAR_94 -> VAR_95 > 1 ) { VAR_96 = ( const struct STRUCT_OR_UNION_8 * ) ( ( const TYPE_9 * ) VAR_97 + VAR_98 ) ; while ( ( const TYPE_10 * ) VAR_99 < VAR_100 ) { METHOD_33 ( * VAR_101 ) ; METHOD_34 ( ( VAR_102 , "\\n\\tAdvertisingRouter%s" , METHOD_35 ( VAR_103 , & VAR_104 -> VAR_105 ) ) ) ; METHOD_36 ( VAR_106 , METHOD_37 ( & VAR_107 -> VAR_108 ) , & VAR_109 -> VAR_110 ) ; ++ VAR_111 ; } } break ; case VAR_112 : if ( VAR_113 -> VAR_114 > 1 ) { register const struct STRUCT_OR_UNION_9 * VAR_115 = ( const struct STRUCT_OR_UNION_10 * ) ( ( const TYPE_11 * ) VAR_116 + VAR_117 ) ; METHOD_38 ( VAR_118 -> VAR_119 ) ; VAR_120 = METHOD_39 ( & VAR_121 -> VAR_122 ) ; VAR_123 = VAR_124 -> VAR_125 ; while ( ( const TYPE_12 * ) VAR_126 < VAR_127 && VAR_128 -- ) { if ( METHOD_40 ( VAR_129 , VAR_130 , VAR_131 ) ) goto VAR_132 ; VAR_133 = ( const struct STRUCT_OR_UNION_11 * ) ( ( const TYPE_13 * ) VAR_134 + METHOD_41 ( & VAR_135 -> VAR_136 . VAR_137 ) ) ; } } break ; case VAR_138 : if ( VAR_139 -> VAR_140 > 1 ) { VAR_141 = ( const struct STRUCT_OR_UNION_12 * ) ( ( const TYPE_14 * ) VAR_142 + VAR_143 ) ; while ( ( const TYPE_15 * ) VAR_144 < VAR_145 ) { if ( METHOD_42 ( VAR_146 , VAR_147 ++ , VAR_148 ) ) goto VAR_149 ; } } break ; default : break ; } return ( 0 ) ; VAR_150 : return ( 1 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) {  if ( * ( unsigned TYPE_6 * ) VAR_5 > 1 )  return - VAR_6 ; return 1 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , unsigned TYPE_5 VAR_4 ) { unsigned TYPE_6 * VAR_5 = ( unsigned TYPE_7 * ) VAR_6 -> VAR_7 ; unsigned TYPE_8 VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; VAR_13 += VAR_14 >> 3 ; unsigned TYPE_9 VAR_15 = ( 1U << VAR_16 -> VAR_17 . VAR_18 ) - 1 ; TYPE_10 VAR_19 = ( VAR_20 == 0 || ( VAR_21 & VAR_22 ) == VAR_23 ) && ( ! ( VAR_24 -> VAR_25 . VAR_26 & VAR_27 ) ) ; while ( VAR_28 -- ) { if ( VAR_29 -> VAR_30 . VAR_31 & 7 ) { VAR_32 = VAR_33 & 7 ; if ( VAR_34 && VAR_35 == 0 ) { TYPE_11 VAR_36 = ( VAR_37 -> VAR_38 . VAR_39 * ( VAR_40 + 1 ) ) >> 3 ; if ( VAR_41 ) { TYPE_12 VAR_42 = ( TYPE_13 ) ( VAR_43 ? 0xFF : 0 ) ; VAR_44 = ( TYPE_14 ) ( VAR_45 + 1 - ( VAR_46 * 8 / VAR_47 -> VAR_48 . VAR_49 ) ) ; while ( VAR_50 -- ) { * VAR_51 = VAR_52 ; VAR_53 ++ ; } continue ; } } unsigned TYPE_15 VAR_54 = ( unsigned TYPE_16 ) ( 1 << VAR_55 -> VAR_56 . VAR_57 ) - 1 ; unsigned TYPE_17 VAR_58 = ( unsigned TYPE_18 ) * VAR_59 ; unsigned TYPE_19 VAR_60 = ( VAR_61 -> VAR_62 . VAR_63 & VAR_64 ) ? 8 - ( VAR_65 + VAR_66 -> VAR_67 . VAR_68 ) : VAR_69 ;  * VAR_70 = ( TYPE_20 ) ( ( VAR_71 & ~ ( VAR_72 << VAR_73 ) ) | ( ( VAR_74 & VAR_75 ) << VAR_76 ) ) ;  if ( VAR_77 -> VAR_78 . VAR_79 & VAR_80 ) { VAR_81 ++ ; } else { VAR_82 += VAR_83 -> VAR_84 . VAR_85 ; if ( VAR_86 >= 8 ) VAR_87 ++ ; } } else { TYPE_21 VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 . VAR_93 ; VAR_94 += 8 ) { * VAR_95 = ( TYPE_22 ) ( VAR_96 >> VAR_97 ) ; VAR_98 ++ ; } } } }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { struct STRUCT_OR_UNION_0 * const VAR_5 = VAR_6 ; TYPE_6 * VAR_7 = VAR_8 -> VAR_9 ;  TYPE_7 * VAR_10 = VAR_11 -> VAR_12 ;  TYPE_8 * * VAR_13 = VAR_14 -> VAR_15 ; TYPE_9 VAR_16 [ 32 * 32 ] ;  struct STRUCT_OR_UNION_1 * VAR_17 = & VAR_18 -> VAR_19 . VAR_20 [ VAR_21 ] ;  struct STRUCT_OR_UNION_2 * VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 ] ; TYPE_10 * VAR_26 = & VAR_27 -> VAR_28 [ 0 ] -> VAR_29 ; TYPE_11 VAR_30 ; TYPE_12 VAR_31 ; TYPE_13 * VAR_32 = * VAR_33 ; TYPE_14 VAR_34 = VAR_35 -> VAR_36 [ VAR_37 ] ; const TYPE_15 VAR_38 = VAR_39 -> VAR_40 ;  const TYPE_16 * VAR_41 = METHOD_1 ( VAR_42 -> VAR_43 , VAR_44 ) ;  const TYPE_17 VAR_45 = VAR_46 -> VAR_47 ; const TYPE_18 * VAR_48 , * VAR_49 ; const TYPE_19 * VAR_50 ; const TYPE_20 VAR_51 = METHOD_2 ( VAR_52 ) ; unsigned TYPE_21 ( * const VAR_53 ) [ VAR_54 ] [ VAR_55 ] = VAR_56 -> VAR_57 [ VAR_58 ] [ VAR_59 ] [ VAR_60 ] ; TYPE_22 ( * const VAR_61 ) [ VAR_62 ] [ VAR_63 ] =  VAR_64 -> VAR_65 . VAR_66 . VAR_67 [ VAR_68 ] [ VAR_69 ] [ VAR_70 ] ;  unsigned TYPE_23 ( * const VAR_71 ) [ VAR_72 ] =  VAR_73 -> VAR_74 . VAR_75 . VAR_76 [ VAR_77 ] [ VAR_78 ] [ VAR_79 ] ;  const TYPE_24 * const VAR_80 = METHOD_3 ( VAR_81 ) ; const TYPE_25 VAR_82 = METHOD_4 ( & VAR_83 -> VAR_84 . VAR_85 , VAR_86 , VAR_87 ) ;  TYPE_26 VAR_88 , VAR_89 ;  METHOD_5 ( VAR_90 , VAR_91 , VAR_92 , & VAR_93 , & VAR_94 ) ; VAR_95 = METHOD_6 ( VAR_96 , VAR_97 -> VAR_98 + VAR_99 , VAR_100 -> VAR_101 + VAR_102 ) ; VAR_103 = METHOD_7 ( VAR_104 , VAR_105 , VAR_106 , VAR_107 ) ; VAR_108 = VAR_109 -> VAR_110 ; VAR_111 = VAR_112 -> VAR_113 ; VAR_114 = 0 ; while ( VAR_115 < VAR_116 ) { TYPE_27 VAR_117 = 0 ; TYPE_28 VAR_118 = 0 ; VAR_119 = VAR_120 [ VAR_121 [ VAR_122 ] ] ; while ( ! VAR_123 ) { METHOD_8 ( & VAR_124 , VAR_125 [ VAR_126 [ VAR_127 ] ] [ VAR_128 ] , VAR_129 , VAR_130 , VAR_131 [ VAR_132 [ VAR_133 ] ] [ VAR_134 ] ) ; VAR_135 [ VAR_136 [ VAR_137 ] ] [ VAR_138 ] += ! VAR_139 ; VAR_140 = 1 ; VAR_141 [ VAR_142 [ VAR_143 ] ] = 0 ; ++ VAR_144 ; VAR_145 = METHOD_9 ( VAR_146 , VAR_147 , VAR_148 ) ; VAR_149 = VAR_150 [ VAR_151 [ VAR_152 ] ] ; }  METHOD_10 ( & VAR_153 , VAR_154 [ VAR_155 [ VAR_156 ] ] [ VAR_157 ] ,   VAR_158 [ VAR_159 ] . VAR_160 ,   ( TYPE_29 ) VAR_161 [ VAR_162 ] . VAR_163 ,  ( TYPE_30 ) VAR_164 , VAR_165 [ VAR_166 [ VAR_167 ] ] [ VAR_168 ] ) ; VAR_169 [ VAR_170 [ VAR_171 ] ] [ VAR_172 ] += ! VAR_173 ; VAR_174 [ VAR_175 [ VAR_176 ] ] =  VAR_177 [ VAR_178 [ VAR_179 ] . VAR_180 ] ;  ++ VAR_181 ; VAR_182 = METHOD_11 ( VAR_183 , VAR_184 , VAR_185 ) ; } if ( VAR_186 < VAR_187 ) { METHOD_12 ( & VAR_188 , VAR_189 [ VAR_190 [ VAR_191 ] ] [ VAR_192 ] , VAR_193 , 0 , VAR_194 [ VAR_195 [ VAR_196 ] ] [ VAR_197 ] ) ; ++ VAR_198 [ VAR_199 [ VAR_200 ] ] [ VAR_201 ] ; } * VAR_202 = VAR_203 ; METHOD_13 ( VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 > 0 , VAR_209 , VAR_210 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 -> VAR_5 . VAR_6 ;  TYPE_5 * VAR_7 = VAR_8 -> VAR_9 ;  if ( VAR_10 == 0 ) { METHOD_1 ( VAR_11 -> VAR_12 -> VAR_13 -> VAR_14 ) ; return VAR_15 ; } for ( VAR_16 = 0 ; VAR_17 < VAR_18 -> VAR_19 ; VAR_20 ++ ) { struct STRUCT_OR_UNION_0 * VAR_21 = & VAR_22 -> VAR_23 [ VAR_24 ] ; if ( VAR_25 -> VAR_26 == VAR_27 -> VAR_28 ) { METHOD_2 ( VAR_29 -> VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; } } METHOD_3 ( VAR_34 , VAR_35 ) ; return VAR_36 ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 [ VAR_3 ] ; struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; if ( VAR_6 -> VAR_7 ) { METHOD_1 ( VAR_8 -> VAR_9 ) ; return VAR_10 -> VAR_11 ; } switch ( VAR_12 ) { case 0 : VAR_13 = VAR_14 [ 0 ] ; break ; default : VAR_15 = VAR_16 [ 1 ] ; } if ( VAR_17 == VAR_18 ) return METHOD_2 ( - VAR_19 ) ; if ( VAR_20 -> VAR_21 ) printk ( KERN_WARNING "nfs_callback_create_svc:nokthread,%dusers??\\n" , VAR_22 -> VAR_23 ) ;  VAR_24 = METHOD_3 ( & VAR_25 , VAR_26 , VAR_27 ) ;  if ( ! VAR_28 ) { printk ( KERN_ERR "nfs_callback_create_svc:createservicefailed\\n" ) ; return METHOD_4 ( - VAR_29 ) ; } VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = 1024 ; METHOD_5 ( "nfs_callback_create_svc:servicecreated\\n" ) ; return VAR_35 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 * VAR_3 ) {  TYPE_5 VAR_4 , VAR_5 , VAR_6 ; METHOD_1 ( VAR_7 . VAR_8 , VAR_9 . VAR_10 , VAR_11 . VAR_12 , VAR_13 . VAR_14 , VAR_15 ) ; METHOD_2 ( VAR_16 . VAR_17 , VAR_18 -> VAR_19 ) ; METHOD_3 ( VAR_20 . VAR_21 , VAR_22 -> VAR_23 ) ; METHOD_4 ( & VAR_24 , VAR_25 , VAR_26 ) ; TYPE_6 VAR_27 = METHOD_5 ( VAR_28 , 2 ) , VAR_29 ; for ( VAR_30 = VAR_31 - 2 ; VAR_32 >= 0 ; VAR_33 -- ) { if ( METHOD_6 ( VAR_34 , VAR_35 ) ) { METHOD_7 ( VAR_36 . VAR_37 , VAR_38 . VAR_39 ) ; METHOD_8 ( VAR_40 . VAR_41 , VAR_42 . VAR_43 ) ; METHOD_9 ( & VAR_44 , & VAR_45 , & VAR_46 , VAR_47 ) ; METHOD_10 ( VAR_48 . VAR_49 , VAR_50 . VAR_51 ) ; METHOD_11 ( VAR_52 . VAR_53 , VAR_54 . VAR_55 ) ; METHOD_12 ( & VAR_56 , & VAR_57 , VAR_58 ) ; } else { METHOD_13 ( VAR_59 . VAR_60 , VAR_61 . VAR_62 ) ; METHOD_14 ( VAR_63 . VAR_64 , VAR_65 . VAR_66 ) ; METHOD_15 ( & VAR_67 , & VAR_68 , & VAR_69 , VAR_70 ) ; METHOD_16 ( VAR_71 . VAR_72 , VAR_73 . VAR_74 ) ; METHOD_17 ( VAR_75 . VAR_76 , VAR_77 . VAR_78 ) ; METHOD_18 ( & VAR_79 , & VAR_80 , VAR_81 ) ; } } METHOD_19 ( VAR_82 -> VAR_83 , VAR_84 . VAR_85 ) ; METHOD_20 ( VAR_86 -> VAR_87 , VAR_88 . VAR_89 ) ; METHOD_21 ( VAR_90 . VAR_91 , VAR_92 . VAR_93 , VAR_94 . VAR_95 , VAR_96 . VAR_97 , VAR_98 . VAR_99 , VAR_100 . VAR_101 , VAR_102 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { static TYPE_2 VAR_2 ; TYPE_3 * VAR_3 ;  TYPE_4 VAR_4 ,  VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; const TYPE_7 * VAR_8 = VAR_9 ; METHOD_1 ( VAR_10 , & VAR_11 ) ; if ( ( VAR_12 . VAR_13 = METHOD_2 ( VAR_14 -> VAR_15 , VAR_16 , & VAR_17 ) ) ) goto VAR_18 ; if ( ( VAR_19 . VAR_20 = METHOD_3 ( ( TYPE_8 * ) VAR_21 ) ) ) goto VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 ; if ( METHOD_4 ( VAR_27 , & VAR_28 , & VAR_29 ) < 0 ) { VAR_30 . VAR_31 = VAR_32 ; goto VAR_33 ; } if ( METHOD_5 ( VAR_34 -> VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) { VAR_39 . VAR_40 = VAR_41 ; goto VAR_42 ; } if ( ! METHOD_6 ( VAR_43 , METHOD_7 ( VAR_44 ) , VAR_45 -> VAR_46 ) && ( METHOD_8 ( VAR_47 ) || ! METHOD_9 ( VAR_48 -> VAR_49 , METHOD_10 ( VAR_50 ) , VAR_51 , VAR_52 -> VAR_53 , VAR_54 ) ) ) { VAR_55 . VAR_56 = VAR_57 ; METHOD_11 ( "kadm5_get_strings" , VAR_58 , & VAR_59 , & VAR_60 , VAR_61 ) ; } else { VAR_62 . VAR_63 = METHOD_12 ( ( TYPE_9 * ) VAR_64 , VAR_65 -> VAR_66 , & VAR_67 . VAR_68 , & VAR_69 . VAR_70 ) ; if ( VAR_71 . VAR_72 != 0 ) VAR_73 = METHOD_13 ( VAR_74 -> VAR_75 , VAR_76 . VAR_77 ) ; METHOD_14 ( "kadm5_get_strings" , VAR_78 , VAR_79 , & VAR_80 , & VAR_81 , VAR_82 ) ; if ( VAR_83 != VAR_84 ) METHOD_15 ( VAR_85 -> VAR_86 , VAR_87 ) ; } METHOD_16 ( VAR_88 ) ;  METHOD_17 ( & VAR_89 , & VAR_90 ) ;  METHOD_18 ( & VAR_91 , & VAR_92 ) ;  VAR_93 :  METHOD_19 ( VAR_94 ) ; return & VAR_95 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; switch ( VAR_2 ) { case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 :  case VAR_7 :  VAR_8 = VAR_9 ; break ; case VAR_10 : case VAR_11 : VAR_12 = VAR_13 ; break ; case VAR_14 : case VAR_15 : VAR_16 = VAR_17 ; break ; default : VAR_18 = VAR_19 ; break ; } return VAR_20 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { METHOD_1 ( VAR_4 != VAR_5 ) ; METHOD_2 ( VAR_6 != VAR_7 ) ; if ( VAR_8 == VAR_9 ) return METHOD_3 ( VAR_10 , VAR_11 , VAR_12 ) ; struct STRUCT_OR_UNION_0 VAR_13 ; struct STRUCT_OR_UNION_1 VAR_14 ; TYPE_5 VAR_15 [ METHOD_4 ( sizeof ( TYPE_6 ) ) ] ; VAR_16 . VAR_17 = ( TYPE_7 * ) VAR_18 ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = & VAR_24 ; VAR_25 . VAR_26 = 1 ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = sizeof ( VAR_32 ) ; VAR_33 . VAR_34 = VAR_35 ; VAR_36 . VAR_37 = 0 ; struct STRUCT_OR_UNION_2 * VAR_38 = METHOD_5 ( & VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = METHOD_6 ( sizeof ( TYPE_8 ) ) ; * ( TYPE_9 * ) METHOD_7 ( VAR_48 ) = VAR_49 ;  TYPE_10 VAR_50 = METHOD_8 ( VAR_51 -> VAR_52 , & VAR_53 , VAR_54 ) ;  METHOD_9 ( VAR_55 ) ; return VAR_56 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; while ( VAR_6 ) {  do VAR_7 = METHOD_1 ( VAR_8 , VAR_9 , VAR_10 , 0 ) ;  while ( VAR_11 < 0 && VAR_12 == VAR_13 ) ; if ( VAR_14 <= 0 ) { METHOD_2 ( "sockfd:%dsenderrno:%d,ret:%d" , VAR_15 , VAR_16 , VAR_17 ) ; return - 1 ; } VAR_18 += VAR_19 ; VAR_20 -= VAR_21 ; } return VAR_22 ; }
static const TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 ) {  if ( VAR_1 == VAR_2 ) return VAR_3 ;  return ( const TYPE_2 * ) VAR_4 -> VAR_5 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_2 VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 , * VAR_9 ; unsigned TYPE_3 VAR_10 = 0 ; struct STRUCT_OR_UNION_4 * VAR_11 = METHOD_1 ( VAR_12 , VAR_13 -> VAR_14 ) ; if ( VAR_15 -> VAR_16 ) {  METHOD_2 ( & VAR_17 -> VAR_18 , VAR_19 ) ;  VAR_20 -> VAR_21 = - 1 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; METHOD_3 ( VAR_27 -> VAR_28 == VAR_29 -> VAR_30 ) ; VAR_31 -> VAR_32 ^= 1 ; if ( ! VAR_33 -> VAR_34 ) METHOD_4 ( VAR_35 , VAR_36 ) ; METHOD_5 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 . VAR_41 ) { unsigned TYPE_4 VAR_42 = METHOD_6 ( VAR_43 ) ; METHOD_7 ( VAR_44 != VAR_45 && VAR_46 != VAR_47 ) ; VAR_48 |= METHOD_8 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; } if ( VAR_53 || VAR_54 -> VAR_55 ) { METHOD_9 ( VAR_56 -> VAR_57 ) ; METHOD_10 ( VAR_58 ) ; } VAR_59 -> VAR_60 = 0 ; if ( VAR_61 -> VAR_62 ) METHOD_11 ( & VAR_63 -> VAR_64 , VAR_65 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  TYPE_2 VAR_1 ;   METHOD_1 ( VAR_2 , VAR_3 , & VAR_4 ) ;  METHOD_2 ( VAR_5 , VAR_6 ) ; return METHOD_3 ( VAR_7 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * * VAR_2 , TYPE_4 * * * VAR_3 TSRMLS_DC ) { TYPE_5 * * VAR_4 , * * VAR_5 ; TYPE_6 VAR_6 = METHOD_1 ( 0 ) ; if 0 { TYPE_7 VAR_7 ; METHOD_2 ( & VAR_8 , VAR_9 ) ; METHOD_3 ( VAR_10 , "params=" ) ; zend_print_zval_r ( & VAR_11 , 1 TSRMLS_CC ) ; METHOD_4 ( VAR_12 , "\\n" ) ; } VAR_13 . VAR_14 = METHOD_5 ( METHOD_6 ( VAR_15 ) , & VAR_16 . VAR_17 , & VAR_18 . VAR_19 , & VAR_20 . VAR_21 , VAR_22 . VAR_23 , VAR_24 ) ; if ( ( VAR_25 . VAR_26 == VAR_27 && ! METHOD_7 ( VAR_28 , VAR_29 . VAR_30 , VAR_31 . VAR_32 ) ) || ( VAR_33 . VAR_34 == VAR_35 && ! METHOD_8 ( VAR_36 , VAR_37 . VAR_38 ) ) ) { TYPE_8 * VAR_39 , * VAR_40 , * * VAR_41 ; METHOD_9 ( METHOD_10 ( VAR_42 ) , ( TYPE_9 * ) & VAR_43 ) ; METHOD_11 ( VAR_44 ) ; METHOD_12 ( VAR_45 ) ; METHOD_13 ( VAR_46 ) ; METHOD_14 ( VAR_47 , METHOD_15 ( "value" ) , * VAR_48 ) ; METHOD_16 ( VAR_49 ) ; METHOD_17 ( VAR_50 ) ; METHOD_18 ( METHOD_19 ( VAR_51 ) , "arguments" , sizeof ( "arguments" ) , ( TYPE_10 * ) & VAR_52 , sizeof ( TYPE_11 * ) , ( TYPE_12 * ) & VAR_53 ) ; * VAR_54 = VAR_55 ; if ( VAR_56 . VAR_57 == VAR_58 ) { METHOD_20 ( VAR_59 , VAR_60 . VAR_61 , VAR_62 . VAR_63 , ( TYPE_13 * ) & VAR_64 , sizeof ( TYPE_14 * ) , ( TYPE_15 * ) & VAR_65 ) ; } else { METHOD_21 ( VAR_66 , VAR_67 . VAR_68 , ( TYPE_16 * ) & VAR_69 , sizeof ( TYPE_17 * ) , ( TYPE_18 * ) & VAR_70 ) ; } } else { if ( VAR_71 . VAR_72 == VAR_73 ) { METHOD_22 ( VAR_74 , VAR_75 . VAR_76 , VAR_77 . VAR_78 , ( TYPE_19 * ) & VAR_79 ) ; } else { METHOD_23 ( VAR_80 , VAR_81 . VAR_82 , ( TYPE_20 * ) & VAR_83 ) ; } VAR_84 = & VAR_85 ; if ( METHOD_24 ( VAR_86 ) == VAR_87 && VAR_88 == METHOD_25 ( METHOD_26 ( VAR_89 ) , "value" , sizeof ( "value" ) , ( TYPE_21 * ) & VAR_90 ) && VAR_91 == METHOD_27 ( METHOD_28 ( VAR_92 ) , ( TYPE_22 * ) & VAR_93 ) ) { TYPE_23 * * VAR_94 ; while ( METHOD_29 ( VAR_95 ) == VAR_96 && VAR_97 == METHOD_30 ( METHOD_31 ( VAR_98 ) , ( TYPE_24 * ) & VAR_99 ) ) {  if ( METHOD_32 ( VAR_100 ) == VAR_101 ) {  if ( VAR_102 == METHOD_33 ( METHOD_34 ( VAR_103 ) , & VAR_104 . VAR_105 , & VAR_106 . VAR_107 , & VAR_108 . VAR_109 , VAR_110 . VAR_111 , VAR_112 ) ) { if ( VAR_113 == METHOD_35 ( METHOD_36 ( VAR_114 ) , VAR_115 . VAR_116 , VAR_117 . VAR_118 , ( TYPE_25 * ) & VAR_119 ) ) { VAR_120 = VAR_121 ; } else { METHOD_37 ( VAR_122 ) ; METHOD_38 ( METHOD_39 ( VAR_123 ) , VAR_124 . VAR_125 , VAR_126 . VAR_127 , ( TYPE_26 * ) VAR_128 , sizeof ( TYPE_27 * ) , ( TYPE_28 * ) & VAR_129 ) ; break ; } } else { if ( VAR_130 == METHOD_40 ( METHOD_41 ( VAR_131 ) , VAR_132 . VAR_133 , ( TYPE_29 * ) & VAR_134 ) ) { VAR_135 = VAR_136 ; } else if ( VAR_137 . VAR_138 ) { METHOD_42 ( VAR_139 ) ; METHOD_43 ( METHOD_44 ( VAR_140 ) , VAR_141 . VAR_142 , ( TYPE_30 * ) VAR_143 , sizeof ( TYPE_31 * ) , ( TYPE_32 * ) & VAR_144 ) ; break ; } else { METHOD_45 ( VAR_145 ) ; METHOD_46 ( METHOD_47 ( VAR_146 ) , ( TYPE_33 * ) VAR_147 , sizeof ( TYPE_34 * ) , ( TYPE_35 * ) & VAR_148 ) ; break ; } } } else { METHOD_48 ( VAR_149 ) ; if ( METHOD_49 ( VAR_150 ) != VAR_151 ) { METHOD_50 ( * VAR_152 ) ; METHOD_51 ( * VAR_153 ) ; } if ( VAR_154 == METHOD_52 ( METHOD_53 ( VAR_155 ) , & VAR_156 . VAR_157 , & VAR_158 . VAR_159 , & VAR_160 . VAR_161 , VAR_162 . VAR_163 , VAR_164 ) ) { METHOD_54 ( METHOD_55 ( VAR_165 ) , VAR_166 . VAR_167 , VAR_168 . VAR_169 , ( TYPE_36 * ) VAR_170 , sizeof ( TYPE_37 * ) , ( TYPE_38 * ) & VAR_171 ) ; } else if ( VAR_172 . VAR_173 ) { METHOD_56 ( METHOD_57 ( VAR_174 ) , VAR_175 . VAR_176 , ( TYPE_39 * ) VAR_177 , sizeof ( TYPE_40 * ) , ( TYPE_41 * ) & VAR_178 ) ; } else { METHOD_58 ( METHOD_59 ( VAR_179 ) , ( TYPE_42 * ) VAR_180 , sizeof ( TYPE_43 * ) , ( TYPE_44 * ) & VAR_181 ) ; } break ; } } } } while ( METHOD_60 ( VAR_182 ) == VAR_183 && VAR_184 == METHOD_61 ( METHOD_62 ( VAR_185 ) , ( TYPE_45 * ) & VAR_186 ) ) ; * VAR_187 = VAR_188 ; }
TYPE_0 METHOD_0 ( ) {  TYPE_1 TYPE_2 VAR_0 , VAR_1 ;  if ( METHOD_1 ( VAR_2 , & VAR_3 . VAR_4 , VAR_5 , & VAR_6 ) == 0 )  return VAR_7 ;  if ( METHOD_2 ( & VAR_8 ) == VAR_9 )  return VAR_10 ;  if ( METHOD_3 ( & VAR_11 ) == VAR_12 )  return VAR_13 ;   if ( METHOD_4 ( & VAR_14 ) == VAR_15 )  return VAR_16 ; if ( METHOD_5 ( VAR_17 . VAR_18 . VAR_19 , VAR_20 . VAR_21 . VAR_22 ) == VAR_23 )  return VAR_24 ;  if ( METHOD_6 ( VAR_25 . VAR_26 . VAR_27 , VAR_28 ) == VAR_29 ) return VAR_30 ; if ( VAR_31 ) VAR_32 . VAR_33 . VAR_34 = VAR_35 ; return VAR_36 ;  }
static struct STRUCT_OR_UNION_0 *  METHOD_0 ( const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 )  { struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 ; TYPE_0 VAR_0 ; STRUCT_OR_UNION_5 = METHOD_1 ( sizeof ( * STRUCT_OR_UNION_6 ) ) ; if ( ! STRUCT_OR_UNION_7 ) METHOD_2 ( 1 , VAR_1 ) ; METHOD_3 ( & STRUCT_OR_UNION_8 -> VAR_2 ) ;  STRUCT_OR_UNION_9 -> VAR_3 = 0 ;  if ( STRUCT_OR_UNION_10 -> VAR_4 & VAR_5 ) { extern TYPE_1 * * VAR_6 ; for ( VAR_7 = 0 ; VAR_8 [ VAR_9 ] != VAR_10 ; VAR_11 ++ ) { struct STRUCT_OR_UNION_11 * VAR_12 ; const TYPE_2 * VAR_13 , * VAR_14 ; TYPE_3 VAR_15 ; TYPE_4 VAR_16 [ 1024 ] ; VAR_17 = VAR_18 [ VAR_19 ] ; if ( ( VAR_20 = METHOD_4 ( VAR_21 , '=' ) ) == VAR_22 || VAR_23 == VAR_24 ) continue ; VAR_25 = VAR_26 - VAR_27 ; if ( VAR_28 > sizeof ( VAR_29 ) - 1 ) continue ; METHOD_5 ( VAR_30 , VAR_31 , VAR_32 ) ; VAR_33 [ VAR_34 ] = '\\0' ; VAR_35 = METHOD_6 ( VAR_36 , VAR_37 + 1 ) ; if ( METHOD_7 ( VAR_38 , & STRUCT_OR_UNION_12 -> VAR_39 , VAR_40 ) ) { METHOD_8 ( VAR_41 ) ; } else { STRUCT_OR_UNION_13 -> VAR_42 ++ ; } }  }  return STRUCT_OR_UNION_14 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_0 * const VAR_4 = & VAR_5 -> VAR_6 ;  METHOD_1 ( ) ;  if ( VAR_7 -> VAR_8 == VAR_9 || VAR_10 -> VAR_11 || ( VAR_12 -> VAR_13 && ! VAR_14 -> VAR_15 . VAR_16 ) ) { TYPE_3 VAR_17 ;  METHOD_2 ( VAR_18 -> VAR_19 , 0 , VAR_20 -> VAR_21 * VAR_22 -> VAR_23 ) ;  METHOD_3 ( VAR_24 -> VAR_25 , 0 , VAR_26 -> VAR_27 * VAR_28 -> VAR_29 ) ; METHOD_4 ( VAR_30 ) ; METHOD_5 ( VAR_31 ) ; VAR_32 -> VAR_33 = VAR_34 ; METHOD_6 ( VAR_35 , 0 , VAR_36 ) ; for ( VAR_37 = 1 ; VAR_38 < 2 ; VAR_39 ++ ) { const TYPE_4 VAR_40 = METHOD_7 ( & VAR_41 -> VAR_42 , VAR_43 -> VAR_44 , VAR_45 -> VAR_46 ,  VAR_47 [ VAR_48 ] ) ;  METHOD_8 ( VAR_49 , VAR_50 , VAR_51 ) ; METHOD_9 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; } }  }
static TYPE_0 METHOD_0 ( TYPE_1 ) { static TYPE_2 VAR_0 ; if ( VAR_1 ) return 1 ; if ( METHOD_1 ( ) < 0 ) return 0 ; VAR_2 = METHOD_2 ( "mod" , & VAR_3 , VAR_4 , 0 ) ; if ( ! VAR_5 ) return 0 ; if ( ! METHOD_3 ( VAR_6 , VAR_7 , 0 ) ) return 0 ;  VAR_8 = METHOD_4 ( "Module" , VAR_9 , VAR_10 , 1 ) ;   if ( ! VAR_11 ) return 0 ;   VAR_12 = METHOD_5 ( "Interactive" , VAR_13 , VAR_14 ,  1 ) ;  if ( ! VAR_15 ) return 0 ;   VAR_16 = METHOD_6 ( "Expression" , VAR_17 , VAR_18 , 1 ) ;  if ( ! VAR_19 ) return 0 ; VAR_20 = METHOD_7 ( "Suite" , VAR_21 , VAR_22 , 1 ) ; if ( ! VAR_23 ) return 0 ; VAR_24 = METHOD_8 ( "stmt" , & VAR_25 , VAR_26 , 0 ) ; if ( ! VAR_27 ) return 0 ; if ( ! METHOD_9 ( VAR_28 , VAR_29 , 4 ) ) return 0 ; VAR_30 = METHOD_10 ( "FunctionDef" , VAR_31 , VAR_32 ,  5 ) ;   if ( ! VAR_33 ) return 0 ;  VAR_34 = METHOD_11 ( "AsyncFunctionDef" , VAR_35 ,  VAR_36 , 5 ) ;   if ( ! VAR_37 ) return 0 ;   VAR_38 = METHOD_12 ( "ClassDef" , VAR_39 , VAR_40 , 5 ) ;   if ( ! VAR_41 ) return 0 ;   VAR_42 = METHOD_13 ( "Return" , VAR_43 , VAR_44 , 1 ) ;  if ( ! VAR_45 ) return 0 ;  VAR_46 = METHOD_14 ( "Delete" , VAR_47 , VAR_48 , 1 ) ;  if ( ! VAR_49 ) return 0 ;  VAR_50 = METHOD_15 ( "Assign" , VAR_51 , VAR_52 , 2 ) ;  if ( ! VAR_53 ) return 0 ;  VAR_54 = METHOD_16 ( "AugAssign" , VAR_55 , VAR_56 , 3 ) ;  if ( ! VAR_57 ) return 0 ; VAR_58 = METHOD_17 ( "AnnAssign" , VAR_59 , VAR_60 , 4 ) ; if ( ! VAR_61 ) return 0 ; VAR_62 = METHOD_18 ( "For" , VAR_63 , VAR_64 , 4 ) ; if ( ! VAR_65 ) return 0 ; VAR_66 = METHOD_19 ( "AsyncFor" , VAR_67 , VAR_68 , 4 ) ; if ( ! VAR_69 ) return 0 ; VAR_70 = METHOD_20 ( "While" , VAR_71 , VAR_72 , 3 ) ; if ( ! VAR_73 ) return 0 ; VAR_74 = METHOD_21 ( "If" , VAR_75 , VAR_76 , 3 ) ; if ( ! VAR_77 ) return 0 ; VAR_78 = METHOD_22 ( "With" , VAR_79 , VAR_80 , 2 ) ; if ( ! VAR_81 ) return 0 ; VAR_82 = METHOD_23 ( "AsyncWith" , VAR_83 , VAR_84 , 2 ) ; if ( ! VAR_85 ) return 0 ; VAR_86 = METHOD_24 ( "Raise" , VAR_87 , VAR_88 , 2 ) ; if ( ! VAR_89 ) return 0 ; VAR_90 = METHOD_25 ( "Try" , VAR_91 , VAR_92 , 4 ) ; if ( ! VAR_93 ) return 0 ; VAR_94 = METHOD_26 ( "Assert" , VAR_95 , VAR_96 , 2 ) ; if ( ! VAR_97 ) return 0 ; VAR_98 = METHOD_27 ( "Import" , VAR_99 , VAR_100 , 1 ) ; if ( ! VAR_101 ) return 0 ; VAR_102 = METHOD_28 ( "ImportFrom" , VAR_103 , VAR_104 , 3 ) ; if ( ! VAR_105 ) return 0 ; VAR_106 = METHOD_29 ( "Global" , VAR_107 , VAR_108 , 1 ) ; if ( ! VAR_109 ) return 0 ; VAR_110 = METHOD_30 ( "Nonlocal" , VAR_111 , VAR_112 , 1 ) ; if ( ! VAR_113 ) return 0 ; VAR_114 = METHOD_31 ( "Expr" , VAR_115 , VAR_116 , 1 ) ; if ( ! VAR_117 ) return 0 ; VAR_118 = METHOD_32 ( "Pass" , VAR_119 , VAR_120 , 0 ) ; if ( ! VAR_121 ) return 0 ; VAR_122 = METHOD_33 ( "Break" , VAR_123 , VAR_124 , 0 ) ; if ( ! VAR_125 ) return 0 ; VAR_126 = METHOD_34 ( "Continue" , VAR_127 , VAR_128 , 0 ) ; if ( ! VAR_129 ) return 0 ; VAR_130 = METHOD_35 ( "expr" , & VAR_131 , VAR_132 , 0 ) ; if ( ! VAR_133 ) return 0 ; if ( ! METHOD_36 ( VAR_134 , VAR_135 , 4 ) ) return 0 ; VAR_136 = METHOD_37 ( "BoolOp" , VAR_137 , VAR_138 , 2 ) ; if ( ! VAR_139 ) return 0 ; VAR_140 = METHOD_38 ( "NamedExpr" , VAR_141 , VAR_142 , 2 ) ; if ( ! VAR_143 ) return 0 ; VAR_144 = METHOD_39 ( "BinOp" , VAR_145 , VAR_146 , 3 ) ; if ( ! VAR_147 ) return 0 ; VAR_148 = METHOD_40 ( "UnaryOp" , VAR_149 , VAR_150 , 2 ) ; if ( ! VAR_151 ) return 0 ; VAR_152 = METHOD_41 ( "Lambda" , VAR_153 , VAR_154 , 2 ) ; if ( ! VAR_155 ) return 0 ; VAR_156 = METHOD_42 ( "IfExp" , VAR_157 , VAR_158 , 3 ) ; if ( ! VAR_159 ) return 0 ; VAR_160 = METHOD_43 ( "Dict" , VAR_161 , VAR_162 , 2 ) ; if ( ! VAR_163 ) return 0 ; VAR_164 = METHOD_44 ( "Set" , VAR_165 , VAR_166 , 1 ) ; if ( ! VAR_167 ) return 0 ; VAR_168 = METHOD_45 ( "ListComp" , VAR_169 , VAR_170 , 2 ) ; if ( ! VAR_171 ) return 0 ; VAR_172 = METHOD_46 ( "SetComp" , VAR_173 , VAR_174 , 2 ) ; if ( ! VAR_175 ) return 0 ; VAR_176 = METHOD_47 ( "DictComp" , VAR_177 , VAR_178 , 3 ) ; if ( ! VAR_179 ) return 0 ; VAR_180 = METHOD_48 ( "GeneratorExp" , VAR_181 , VAR_182 , 2 ) ; if ( ! VAR_183 ) return 0 ; VAR_184 = METHOD_49 ( "Await" , VAR_185 , VAR_186 , 1 ) ; if ( ! VAR_187 ) return 0 ; VAR_188 = METHOD_50 ( "Yield" , VAR_189 , VAR_190 , 1 ) ; if ( ! VAR_191 ) return 0 ; VAR_192 = METHOD_51 ( "YieldFrom" , VAR_193 , VAR_194 , 1 ) ; if ( ! VAR_195 ) return 0 ; VAR_196 = METHOD_52 ( "Compare" , VAR_197 , VAR_198 , 3 ) ; if ( ! VAR_199 ) return 0 ; VAR_200 = METHOD_53 ( "Call" , VAR_201 , VAR_202 , 3 ) ; if ( ! VAR_203 ) return 0 ; VAR_204 = METHOD_54 ( "FormattedValue" , VAR_205 , VAR_206 , 3 ) ; if ( ! VAR_207 ) return 0 ; VAR_208 = METHOD_55 ( "JoinedStr" , VAR_209 , VAR_210 , 1 ) ; if ( ! VAR_211 ) return 0 ; VAR_212 = METHOD_56 ( "Constant" , VAR_213 , VAR_214 , 1 ) ; if ( ! VAR_215 ) return 0 ; VAR_216 = METHOD_57 ( "Attribute" , VAR_217 , VAR_218 , 3 ) ; if ( ! VAR_219 ) return 0 ; VAR_220 = METHOD_58 ( "Subscript" , VAR_221 , VAR_222 , 3 ) ; if ( ! VAR_223 ) return 0 ; VAR_224 = METHOD_59 ( "Starred" , VAR_225 , VAR_226 , 2 ) ; if ( ! VAR_227 ) return 0 ; VAR_228 = METHOD_60 ( "Name" , VAR_229 , VAR_230 , 2 ) ; if ( ! VAR_231 ) return 0 ; VAR_232 = METHOD_61 ( "List" , VAR_233 , VAR_234 , 2 ) ; if ( ! VAR_235 ) return 0 ; VAR_236 = METHOD_62 ( "Tuple" , VAR_237 , VAR_238 , 2 ) ; if ( ! VAR_239 ) return 0 ; VAR_240 = METHOD_63 ( "expr_context" , & VAR_241 , VAR_242 , 0 ) ; if ( ! VAR_243 ) return 0 ; if ( ! METHOD_64 ( VAR_244 , VAR_245 , 0 ) ) return 0 ; VAR_246 = METHOD_65 ( "Load" , VAR_247 , VAR_248 , 0 ) ; if ( ! VAR_249 ) return 0 ; VAR_250 = METHOD_66 ( VAR_251 , VAR_252 , VAR_253 ) ; if ( ! VAR_254 ) return 0 ; VAR_255 = METHOD_67 ( "Store" , VAR_256 , VAR_257 , 0 ) ; if ( ! VAR_258 ) return 0 ; VAR_259 = METHOD_68 ( VAR_260 , VAR_261 , VAR_262 ) ; if ( ! VAR_263 ) return 0 ; VAR_264 = METHOD_69 ( "Del" , VAR_265 , VAR_266 , 0 ) ; if ( ! VAR_267 ) return 0 ; VAR_268 = METHOD_70 ( VAR_269 , VAR_270 , VAR_271 ) ; if ( ! VAR_272 ) return 0 ; VAR_273 = METHOD_71 ( "AugLoad" , VAR_274 , VAR_275 , 0 ) ; if ( ! VAR_276 ) return 0 ; VAR_277 = METHOD_72 ( VAR_278 , VAR_279 , VAR_280 ) ; if ( ! VAR_281 ) return 0 ; VAR_282 = METHOD_73 ( "AugStore" , VAR_283 , VAR_284 , 0 ) ; if ( ! VAR_285 ) return 0 ; VAR_286 = METHOD_74 ( VAR_287 , VAR_288 , VAR_289 ) ; if ( ! VAR_290 ) return 0 ; VAR_291 = METHOD_75 ( "Param" , VAR_292 , VAR_293 , 0 ) ; if ( ! VAR_294 ) return 0 ; VAR_295 = METHOD_76 ( VAR_296 , VAR_297 , VAR_298 ) ; if ( ! VAR_299 ) return 0 ; VAR_300 = METHOD_77 ( "NamedStore" , VAR_301 , VAR_302 , 0 ) ; if ( ! VAR_303 ) return 0 ; VAR_304 = METHOD_78 ( VAR_305 , VAR_306 , VAR_307 ) ; if ( ! VAR_308 ) return 0 ; VAR_309 = METHOD_79 ( "slice" , & VAR_310 , VAR_311 , 0 ) ; if ( ! VAR_312 ) return 0 ; if ( ! METHOD_80 ( VAR_313 , VAR_314 , 0 ) ) return 0 ; VAR_315 = METHOD_81 ( "Slice" , VAR_316 , VAR_317 , 3 ) ; if ( ! VAR_318 ) return 0 ; VAR_319 = METHOD_82 ( "ExtSlice" , VAR_320 , VAR_321 , 1 ) ; if ( ! VAR_322 ) return 0 ; VAR_323 = METHOD_83 ( "Index" , VAR_324 , VAR_325 , 1 ) ; if ( ! VAR_326 ) return 0 ; VAR_327 = METHOD_84 ( "boolop" , & VAR_328 , VAR_329 , 0 ) ; if ( ! VAR_330 ) return 0 ; if ( ! METHOD_85 ( VAR_331 , VAR_332 , 0 ) ) return 0 ; VAR_333 = METHOD_86 ( "And" , VAR_334 , VAR_335 , 0 ) ; if ( ! VAR_336 ) return 0 ; VAR_337 = METHOD_87 ( VAR_338 , VAR_339 , VAR_340 ) ; if ( ! VAR_341 ) return 0 ; VAR_342 = METHOD_88 ( "Or" , VAR_343 , VAR_344 , 0 ) ; if ( ! VAR_345 ) return 0 ; VAR_346 = METHOD_89 ( VAR_347 , VAR_348 , VAR_349 ) ; if ( ! VAR_350 ) return 0 ; VAR_351 = METHOD_90 ( "operator" , & VAR_352 , VAR_353 , 0 ) ; if ( ! VAR_354 ) return 0 ; if ( ! METHOD_91 ( VAR_355 , VAR_356 , 0 ) ) return 0 ; VAR_357 = METHOD_92 ( "Add" , VAR_358 , VAR_359 , 0 ) ; if ( ! VAR_360 ) return 0 ; VAR_361 = METHOD_93 ( VAR_362 , VAR_363 , VAR_364 ) ; if ( ! VAR_365 ) return 0 ; VAR_366 = METHOD_94 ( "Sub" , VAR_367 , VAR_368 , 0 ) ; if ( ! VAR_369 ) return 0 ; VAR_370 = METHOD_95 ( VAR_371 , VAR_372 , VAR_373 ) ; if ( ! VAR_374 ) return 0 ; VAR_375 = METHOD_96 ( "Mult" , VAR_376 , VAR_377 , 0 ) ; if ( ! VAR_378 ) return 0 ; VAR_379 = METHOD_97 ( VAR_380 , VAR_381 , VAR_382 ) ; if ( ! VAR_383 ) return 0 ; VAR_384 = METHOD_98 ( "MatMult" , VAR_385 , VAR_386 , 0 ) ; if ( ! VAR_387 ) return 0 ; VAR_388 = METHOD_99 ( VAR_389 , VAR_390 , VAR_391 ) ; if ( ! VAR_392 ) return 0 ; VAR_393 = METHOD_100 ( "Div" , VAR_394 , VAR_395 , 0 ) ; if ( ! VAR_396 ) return 0 ; VAR_397 = METHOD_101 ( VAR_398 , VAR_399 , VAR_400 ) ; if ( ! VAR_401 ) return 0 ; VAR_402 = METHOD_102 ( "Mod" , VAR_403 , VAR_404 , 0 ) ; if ( ! VAR_405 ) return 0 ; VAR_406 = METHOD_103 ( VAR_407 , VAR_408 , VAR_409 ) ; if ( ! VAR_410 ) return 0 ; VAR_411 = METHOD_104 ( "Pow" , VAR_412 , VAR_413 , 0 ) ; if ( ! VAR_414 ) return 0 ; VAR_415 = METHOD_105 ( VAR_416 , VAR_417 , VAR_418 ) ; if ( ! VAR_419 ) return 0 ; VAR_420 = METHOD_106 ( "LShift" , VAR_421 , VAR_422 , 0 ) ; if ( ! VAR_423 ) return 0 ; VAR_424 = METHOD_107 ( VAR_425 , VAR_426 , VAR_427 ) ; if ( ! VAR_428 ) return 0 ; VAR_429 = METHOD_108 ( "RShift" , VAR_430 , VAR_431 , 0 ) ; if ( ! VAR_432 ) return 0 ; VAR_433 = METHOD_109 ( VAR_434 , VAR_435 , VAR_436 ) ; if ( ! VAR_437 ) return 0 ; VAR_438 = METHOD_110 ( "BitOr" , VAR_439 , VAR_440 , 0 ) ; if ( ! VAR_441 ) return 0 ; VAR_442 = METHOD_111 ( VAR_443 , VAR_444 , VAR_445 ) ; if ( ! VAR_446 ) return 0 ; VAR_447 = METHOD_112 ( "BitXor" , VAR_448 , VAR_449 , 0 ) ; if ( ! VAR_450 ) return 0 ; VAR_451 = METHOD_113 ( VAR_452 , VAR_453 , VAR_454 ) ; if ( ! VAR_455 ) return 0 ; VAR_456 = METHOD_114 ( "BitAnd" , VAR_457 , VAR_458 , 0 ) ; if ( ! VAR_459 ) return 0 ; VAR_460 = METHOD_115 ( VAR_461 , VAR_462 , VAR_463 ) ; if ( ! VAR_464 ) return 0 ; VAR_465 = METHOD_116 ( "FloorDiv" , VAR_466 , VAR_467 , 0 ) ; if ( ! VAR_468 ) return 0 ; VAR_469 = METHOD_117 ( VAR_470 , VAR_471 , VAR_472 ) ; if ( ! VAR_473 ) return 0 ; VAR_474 = METHOD_118 ( "unaryop" , & VAR_475 , VAR_476 , 0 ) ; if ( ! VAR_477 ) return 0 ; if ( ! METHOD_119 ( VAR_478 , VAR_479 , 0 ) ) return 0 ; VAR_480 = METHOD_120 ( "Invert" , VAR_481 , VAR_482 , 0 ) ; if ( ! VAR_483 ) return 0 ; VAR_484 = METHOD_121 ( VAR_485 , VAR_486 , VAR_487 ) ; if ( ! VAR_488 ) return 0 ; VAR_489 = METHOD_122 ( "Not" , VAR_490 , VAR_491 , 0 ) ; if ( ! VAR_492 ) return 0 ; VAR_493 = METHOD_123 ( VAR_494 , VAR_495 , VAR_496 ) ; if ( ! VAR_497 ) return 0 ; VAR_498 = METHOD_124 ( "UAdd" , VAR_499 , VAR_500 , 0 ) ; if ( ! VAR_501 ) return 0 ; VAR_502 = METHOD_125 ( VAR_503 , VAR_504 , VAR_505 ) ; if ( ! VAR_506 ) return 0 ; VAR_507 = METHOD_126 ( "USub" , VAR_508 , VAR_509 , 0 ) ; if ( ! VAR_510 ) return 0 ; VAR_511 = METHOD_127 ( VAR_512 , VAR_513 , VAR_514 ) ; if ( ! VAR_515 ) return 0 ; VAR_516 = METHOD_128 ( "cmpop" , & VAR_517 , VAR_518 , 0 ) ; if ( ! VAR_519 ) return 0 ; if ( ! METHOD_129 ( VAR_520 , VAR_521 , 0 ) ) return 0 ; VAR_522 = METHOD_130 ( "Eq" , VAR_523 , VAR_524 , 0 ) ; if ( ! VAR_525 ) return 0 ; VAR_526 = METHOD_131 ( VAR_527 , VAR_528 , VAR_529 ) ; if ( ! VAR_530 ) return 0 ; VAR_531 = METHOD_132 ( "NotEq" , VAR_532 , VAR_533 , 0 ) ; if ( ! VAR_534 ) return 0 ; VAR_535 = METHOD_133 ( VAR_536 , VAR_537 , VAR_538 ) ; if ( ! VAR_539 ) return 0 ; VAR_540 = METHOD_134 ( "Lt" , VAR_541 , VAR_542 , 0 ) ; if ( ! VAR_543 ) return 0 ; VAR_544 = METHOD_135 ( VAR_545 , VAR_546 , VAR_547 ) ; if ( ! VAR_548 ) return 0 ; VAR_549 = METHOD_136 ( "LtE" , VAR_550 , VAR_551 , 0 ) ; if ( ! VAR_552 ) return 0 ; VAR_553 = METHOD_137 ( VAR_554 , VAR_555 , VAR_556 ) ; if ( ! VAR_557 ) return 0 ; VAR_558 = METHOD_138 ( "Gt" , VAR_559 , VAR_560 , 0 ) ; if ( ! VAR_561 ) return 0 ; VAR_562 = METHOD_139 ( VAR_563 , VAR_564 , VAR_565 ) ; if ( ! VAR_566 ) return 0 ; VAR_567 = METHOD_140 ( "GtE" , VAR_568 , VAR_569 , 0 ) ; if ( ! VAR_570 ) return 0 ; VAR_571 = METHOD_141 ( VAR_572 , VAR_573 , VAR_574 ) ; if ( ! VAR_575 ) return 0 ; VAR_576 = METHOD_142 ( "Is" , VAR_577 , VAR_578 , 0 ) ; if ( ! VAR_579 ) return 0 ; VAR_580 = METHOD_143 ( VAR_581 , VAR_582 , VAR_583 ) ; if ( ! VAR_584 ) return 0 ; VAR_585 = METHOD_144 ( "IsNot" , VAR_586 , VAR_587 , 0 ) ; if ( ! VAR_588 ) return 0 ; VAR_589 = METHOD_145 ( VAR_590 , VAR_591 , VAR_592 ) ; if ( ! VAR_593 ) return 0 ; VAR_594 = METHOD_146 ( "In" , VAR_595 , VAR_596 , 0 ) ; if ( ! VAR_597 ) return 0 ; VAR_598 = METHOD_147 ( VAR_599 , VAR_600 , VAR_601 ) ; if ( ! VAR_602 ) return 0 ; VAR_603 = METHOD_148 ( "NotIn" , VAR_604 , VAR_605 , 0 ) ; if ( ! VAR_606 ) return 0 ; VAR_607 = METHOD_149 ( VAR_608 , VAR_609 , VAR_610 ) ; if ( ! VAR_611 ) return 0 ; VAR_612 = METHOD_150 ( "comprehension" , & VAR_613 , VAR_614 , 4 ) ; if ( ! VAR_615 ) return 0 ; if ( ! METHOD_151 ( VAR_616 , VAR_617 , 0 ) ) return 0 ; VAR_618 = METHOD_152 ( "excepthandler" , & VAR_619 , VAR_620 , 0 ) ; if ( ! VAR_621 ) return 0 ; if ( ! METHOD_153 ( VAR_622 , VAR_623 , 4 ) ) return 0 ; VAR_624 = METHOD_154 ( "ExceptHandler" , VAR_625 , VAR_626 , 3 ) ; if ( ! VAR_627 ) return 0 ; VAR_628 = METHOD_155 ( "arguments" , & VAR_629 , VAR_630 , 6 ) ; if ( ! VAR_631 ) return 0 ; if ( ! METHOD_156 ( VAR_632 , VAR_633 , 0 ) ) return 0 ;  VAR_634 = METHOD_157 ( "arg" , & VAR_635 , VAR_636 , 2 ) ;  if ( ! VAR_637 ) return 0 ; if ( ! METHOD_158 ( VAR_638 , VAR_639 , 4 ) ) return 0 ; VAR_640 = METHOD_159 ( "keyword" , & VAR_641 , VAR_642 , 2 ) ; if ( ! VAR_643 ) return 0 ; if ( ! METHOD_160 ( VAR_644 , VAR_645 , 0 ) ) return 0 ; VAR_646 = METHOD_161 ( "alias" , & VAR_647 , VAR_648 , 2 ) ; if ( ! VAR_649 ) return 0 ; if ( ! METHOD_162 ( VAR_650 , VAR_651 , 0 ) ) return 0 ; VAR_652 = METHOD_163 ( "withitem" , & VAR_653 , VAR_654 , 2 ) ; if ( ! VAR_655 ) return 0 ; if ( ! METHOD_164 ( VAR_656 , VAR_657 , 0 ) ) return 0 ;  VAR_658 = 1 ;  return 1 ; }
static TYPE_0 METHOD_0 ( ) { TYPE_1 VAR_0 = VAR_1 && ( VAR_2 || VAR_3 -> METHOD_1 ( ) ) ; if ( VAR_4 == VAR_5 ) return ; VAR_6 = VAR_7 ; if ( VAR_8 ) { METHOD_2 ( ) ; const TYPE_2 * VAR_9 = VAR_10 -> METHOD_3 ( ) ; if ( VAR_11 -> METHOD_4 ( ) ) { TYPE_3 VAR_12 [ VAR_13 ] ; METHOD_5 ( VAR_14 , VAR_15 , "%s.%llu" , VAR_16 , METHOD_6 ( ) ) ; if ( ! METHOD_7 ( VAR_17 , VAR_18 ) && VAR_19 != VAR_20 ) METHOD_8 ( "%sunabletorename\'%s\'to\'%s\':%s" , VAR_21 , VAR_22 , VAR_23 , METHOD_9 ( VAR_24 ) ) ; }  VAR_25 = METHOD_10 ( VAR_26 , VAR_27 | VAR_28 | VAR_29 , VAR_30 | VAR_31 | VAR_32 | VAR_33 | VAR_34 ) ;  if ( VAR_35 == VAR_36 ) { METHOD_11 ( "%sunabletoopen\'%s\':%s" , VAR_37 , VAR_38 , METHOD_12 ( VAR_39 ) ) ; VAR_40 = VAR_41 ; return ; }  METHOD_13 ( VAR_42 , "btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea" , 16 ) ;  } else { if ( VAR_43 != VAR_44 ) METHOD_14 ( VAR_45 ) ; VAR_46 = VAR_47 ; METHOD_15 ( ) ; } }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 )  { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; VAR_7 = VAR_8 ;  while ( * VAR_9 && VAR_10 > 0 ) {  if ( * VAR_11 & 0x80 ) { VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , & VAR_15 ) ; if ( VAR_16 < 0 ) return - VAR_17 ;  if ( VAR_18 >= VAR_19 ) {   VAR_20 -= VAR_21 ;   * VAR_22 ++ = ( TYPE_6 ) ( VAR_23 |   ( ( VAR_24 >> 10 ) & VAR_25 ) ) ;  * VAR_26 ++ = ( TYPE_7 ) ( VAR_27 | VAR_28 |  ( VAR_29 & VAR_30 ) ) ;  } else {  * VAR_31 ++ = ( TYPE_8 ) VAR_32 ;  } VAR_33 += VAR_34 ; VAR_35 -= VAR_36 ; } else {  * VAR_37 ++ = * VAR_38 ++ ;  VAR_39 -- ; } } return VAR_40 - VAR_41 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { static TYPE_3 VAR_2 ; struct STRUCT_OR_UNION_0 VAR_3 ; enum { VAR_4 , VAR_5 , VAR_6 } VAR_7 ; TYPE_4 * VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 , VAR_11 ; TYPE_7 VAR_12 , VAR_13 , VAR_14 , TYPE_8 ; TYPE_9 VAR_15 , TYPE_10 , VAR_16 ; TYPE_11 VAR_17 , VAR_18 ; unsigned TYPE_12 TYPE_13 VAR_19 ; TYPE_14 VAR_20 , VAR_21 , VAR_22 = 0 ; TYPE_15 VAR_23 , * VAR_24 , * VAR_25 , * VAR_26 , * VAR_27 , * VAR_28 [ 1 ] , VAR_29 [ 2048 ] , VAR_30 [ 2048 ] ; struct STRUCT_OR_UNION_1 VAR_31 [ 2 ] ; TYPE_16 VAR_32 [ 0 ] TYPE_17 VAR_33 [ 1 ] METHOD_1 ( VAR_34 ) { VAR_35 = VAR_36 ; goto VAR_37 ; } if ( METHOD_2 ( VAR_38 , 0 ) || METHOD_3 ( TYPE_18 , 0 ) ) METHOD_4 ( "Unexpectedoff_t/time_tsize" ) ; VAR_39 = VAR_40 = 0 ; VAR_41 = METHOD_5 ( 0 ) ; if ( ! VAR_42 ) ( TYPE_19 ) METHOD_6 ( VAR_43 ) ; if ( VAR_44 != 1 ) { METHOD_7 ( "ambiguoustarget" ) ; METHOD_8 ( 1 ) ; } VAR_45 = * VAR_46 ; if ( VAR_47 ) METHOD_9 ( VAR_48 ) ; ( TYPE_20 ) METHOD_10 ( VAR_49 , VAR_50 , "" , 1 ) ; if ( STRUCT_OR_UNION_2 ( VAR_51 , & VAR_52 ) == 0 && METHOD_11 ( VAR_53 . VAR_54 ) ) VAR_55 = 1 ; for ( VAR_56 = 1 ; ; VAR_57 = 0 ) { VAR_58 = VAR_59 ; if ( METHOD_12 ( VAR_60 , VAR_61 , VAR_62 , 1 ) != 1 ) return ; if ( * VAR_63 ++ == '\\n' ) METHOD_13 ( "unexpected<newline>" ) ; do { if ( METHOD_14 ( VAR_64 , VAR_65 , & VAR_66 , sizeof ( VAR_67 ) ) != sizeof ( VAR_68 ) ) METHOD_15 ( "lostconnection" ) ; * VAR_69 ++ = VAR_70 ; } while ( VAR_71 < & VAR_72 [ sizeof ( VAR_73 ) - 1 ] && VAR_74 != '\\n' ) ; * VAR_75 = 0 ; if ( VAR_76 ) METHOD_16 ( VAR_77 , "Sink:%s" , VAR_78 ) ; if ( VAR_79 [ 0 ] == '\\01' || VAR_80 [ 0 ] == '\\02' ) { if ( VAR_81 == 0 ) { ( TYPE_21 ) METHOD_17 ( VAR_82 , sizeof ( VAR_83 ) , VAR_84 , "%s" , VAR_85 + 1 ) ; ( TYPE_22 ) METHOD_18 ( VAR_86 , VAR_87 , VAR_88 , METHOD_19 ( VAR_89 ) ) ; } if ( VAR_90 [ 0 ] == '\\02' ) METHOD_20 ( 1 ) ; ++ VAR_91 ; continue ; } if ( VAR_92 [ 0 ] == 'E' ) { ( TYPE_23 ) METHOD_21 ( VAR_93 , VAR_94 , "" , 1 ) ; return ; } if ( VAR_95 == '\\n' ) * -- VAR_96 = 0 ; VAR_97 = VAR_98 ; if ( * VAR_99 == 'T' ) { VAR_100 ++ ; VAR_101 ++ ; if ( ! METHOD_22 ( ( unsigned TYPE_24 ) * VAR_102 ) ) METHOD_23 ( "mtime.secnotpresent" ) ; VAR_103 = METHOD_24 ( VAR_104 , & VAR_105 , 10 ) ; if ( ! VAR_106 || * VAR_107 ++ != '' ) METHOD_25 ( "mtime.secnotdelimited" ) ; if ( METHOD_26 ( VAR_108 , VAR_109 ) ) VAR_110 = 0 ; TYPE_25 . VAR_111 = VAR_112 ; TYPE_26 . VAR_113 = METHOD_27 ( VAR_114 , & VAR_115 , 10 ) ; if ( ! VAR_116 || * VAR_117 ++ != '' || TYPE_27 . VAR_118 < 0 || TYPE_28 . VAR_119 > 999999 ) METHOD_28 ( "mtime.usecnotdelimited" ) ; if ( ! METHOD_29 ( ( unsigned TYPE_29 ) * VAR_120 ) ) METHOD_30 ( "atime.secnotpresent" ) ; VAR_121 = METHOD_31 ( VAR_122 , & VAR_123 , 10 ) ; if ( ! VAR_124 || * VAR_125 ++ != '' ) METHOD_32 ( "atime.secnotdelimited" ) ; if ( METHOD_33 ( VAR_126 , VAR_127 ) ) VAR_128 = 0 ; TYPE_30 . VAR_129 = VAR_130 ; TYPE_31 . VAR_131 = METHOD_34 ( VAR_132 , & VAR_133 , 10 ) ; if ( ! VAR_134 || * VAR_135 ++ != '\\0' || TYPE_32 . VAR_136 < 0 || TYPE_33 . VAR_137 > 999999 ) METHOD_35 ( "atime.usecnotdelimited" ) ; ( TYPE_34 ) METHOD_36 ( VAR_138 , VAR_139 , "" , 1 ) ; continue ; } if ( * VAR_140 != 'C' && * VAR_141 != 'D' ) { if ( VAR_142 ) { METHOD_37 ( "%s" , VAR_143 ) ; METHOD_38 ( 1 ) ; } METHOD_39 ( "expectedcontrolrecord" ) ; } VAR_144 = 0 ; for ( ++ VAR_145 ; VAR_146 < VAR_147 + 5 ; VAR_148 ++ ) { if ( * VAR_149 < '0' || * VAR_150 > '7' ) METHOD_40 ( "badmode" ) ; VAR_151 = ( VAR_152 << 3 ) | ( * VAR_153 - '0' ) ; } if ( ! VAR_154 ) VAR_155 &= ~ VAR_156 ; if ( * VAR_157 ++ != '' ) METHOD_41 ( "modenotdelimited" ) ; if ( ! METHOD_42 ( ( unsigned TYPE_35 ) * VAR_158 ) ) METHOD_43 ( "sizenotpresent" ) ; VAR_159 = METHOD_44 ( VAR_160 , & VAR_161 , 10 ) ; if ( ! VAR_162 || * VAR_163 ++ != '' ) METHOD_45 ( "sizenotdelimited" ) ; if ( METHOD_46 ( TYPE_36 , VAR_164 ) ) METHOD_47 ( "sizeoutofrange" ) ; VAR_165 = ( TYPE_37 ) VAR_166 ;  if ( ( METHOD_48 ( VAR_167 , '/' ) != VAR_168 ) || ( METHOD_49 ( VAR_169 , ".." ) == 0 ) ) {  METHOD_50 ( "error:unexpectedfilename:%s" , VAR_170 ) ; METHOD_51 ( 1 ) ; } if ( VAR_171 ) { static TYPE_38 * VAR_172 ; static TYPE_39 VAR_173 ; TYPE_40 VAR_174 ; VAR_175 = METHOD_52 ( VAR_176 ) + METHOD_53 ( VAR_177 ) + 250 ; if ( VAR_178 > VAR_179 ) { METHOD_54 ( VAR_180 ) ; VAR_181 = METHOD_55 ( VAR_182 ) ; VAR_183 = VAR_184 ; } ( TYPE_41 ) METHOD_56 ( VAR_185 , VAR_186 , "%s%s%s" , VAR_187 , METHOD_57 ( VAR_188 , "/" ) ? "/" : "" , VAR_189 ) ; VAR_190 = VAR_191 ; } else VAR_192 = VAR_193 ; VAR_194 = VAR_195 ; VAR_196 = STRUCT_OR_UNION_3 ( VAR_197 , & VAR_198 ) == 0 ; if ( VAR_199 [ 0 ] == 'D' ) { TYPE_42 VAR_200 = VAR_201 ; if ( ! VAR_202 ) METHOD_58 ( "receiveddirectorywithout-r" ) ; if ( VAR_203 ) { if ( ! METHOD_59 ( VAR_204 . VAR_205 ) ) { VAR_206 = VAR_207 ; goto VAR_208 ; } if ( VAR_209 ) ( TYPE_43 ) METHOD_60 ( VAR_210 , VAR_211 ) ; } else { VAR_212 = 1 ; if ( METHOD_61 ( VAR_213 , VAR_214 | VAR_215 ) < 0 ) goto VAR_216 ; } VAR_217 [ 0 ] = METHOD_62 ( VAR_218 ) ; METHOD_63 ( 1 , VAR_219 ) ; if ( VAR_220 ) { VAR_221 = 0 ; if ( METHOD_64 ( VAR_222 [ 0 ] , VAR_223 ) < 0 ) METHOD_65 ( "%s:settimes:%s" , VAR_224 [ 0 ] , METHOD_66 ( VAR_225 ) ) ; } if ( VAR_226 ) ( TYPE_44 ) METHOD_67 ( VAR_227 [ 0 ] , VAR_228 ) ; METHOD_68 ( VAR_229 [ 0 ] ) ; continue ; } TYPE_45 = VAR_230 ; VAR_231 |= VAR_232 ; if ( ( TYPE_46 = METHOD_69 ( VAR_233 , VAR_234 | VAR_235 , VAR_236 ) ) < 0 ) { VAR_237 : METHOD_70 ( "%s:%s" , VAR_238 , METHOD_71 ( VAR_239 ) ) ; continue ; } ( TYPE_47 ) METHOD_72 ( VAR_240 , VAR_241 , "" , 1 ) ; if ( ( VAR_242 = METHOD_73 ( & VAR_243 , TYPE_48 , VAR_244 ) ) == VAR_245 ) { ( TYPE_49 ) METHOD_74 ( TYPE_50 ) ; continue ; } VAR_246 = VAR_247 -> VAR_248 ; VAR_249 = VAR_250 ; VAR_251 = 0 ; if ( VAR_252 ) METHOD_75 ( VAR_253 , VAR_254 , & VAR_255 ) ; METHOD_76 ( VAR_256 ) ; for ( VAR_257 = VAR_258 = 0 ; VAR_259 < VAR_260 ; VAR_261 += VAR_262 -> VAR_263 ) { VAR_264 = VAR_265 -> VAR_266 ; if ( VAR_267 + VAR_268 > VAR_269 ) VAR_270 = VAR_271 - VAR_272 ; VAR_273 += VAR_274 ; do { VAR_275 = METHOD_77 ( VAR_276 , VAR_277 , VAR_278 , VAR_279 , VAR_280 , & VAR_281 ) ; if ( VAR_282 == 0 ) { METHOD_78 ( "%s" , VAR_283 != VAR_284 ? METHOD_79 ( VAR_285 ) : "droppedconnection" ) ; METHOD_80 ( 1 ) ; } VAR_286 -= VAR_287 ; VAR_288 += VAR_289 ; } while ( VAR_290 > 0 ) ; if ( VAR_291 == VAR_292 -> VAR_293 ) { if ( VAR_294 == VAR_295 ) { if ( METHOD_81 ( VAR_296 , TYPE_51 , VAR_297 -> VAR_298 , VAR_299 ) != VAR_300 ) { VAR_301 = VAR_302 ; VAR_303 = VAR_304 ; } } VAR_305 = 0 ; VAR_306 = VAR_307 -> VAR_308 ; } } METHOD_82 ( VAR_309 ) ; if ( VAR_310 != 0 && VAR_311 == VAR_312 && METHOD_83 ( VAR_313 , TYPE_52 , VAR_314 -> VAR_315 , VAR_316 ) != VAR_317 ) { VAR_318 = VAR_319 ; VAR_320 = VAR_321 ; } if ( VAR_322 == VAR_323 && ( ! VAR_324 || METHOD_84 ( VAR_325 . VAR_326 ) ) && METHOD_85 ( TYPE_53 , VAR_327 ) != 0 ) { METHOD_86 ( "%s:truncate:%s" , VAR_328 , METHOD_87 ( VAR_329 ) ) ; VAR_330 = VAR_331 ; } if ( VAR_332 ) { if ( VAR_333 || TYPE_54 != VAR_334 ) TYPE_55 TYPE_56 if ( VAR_335 ( TYPE_57 , TYPE_58 ) ) { else if ( METHOD_88 ( VAR_336 , TYPE_59 ) ) { METHOD_89 ( "%s:setmode:%s" , VAR_337 , METHOD_90 ( VAR_338 ) ) ; VAR_339 = VAR_340 ; } } else { if ( ! VAR_341 && TYPE_60 != VAR_342 ) TYPE_61 TYPE_62 if ( VAR_343 ( TYPE_63 , TYPE_64 & ~ VAR_344 ) ) { else if ( METHOD_91 ( VAR_345 , TYPE_65 & ~ VAR_346 ) ) { METHOD_92 ( "%s:setmode:%s" , VAR_347 , METHOD_93 ( VAR_348 ) ) ; VAR_349 = VAR_350 ; } } if ( METHOD_94 ( TYPE_66 ) == - 1 ) { VAR_351 = VAR_352 ; VAR_353 = VAR_354 ; } ( TYPE_67 ) METHOD_95 ( ) ; if ( VAR_355 ) METHOD_96 ( ) ; if ( VAR_356 && VAR_357 == VAR_358 ) { VAR_359 = 0 ; if ( METHOD_97 ( VAR_360 , VAR_361 ) < 0 ) { METHOD_98 ( "%s:settimes:%s" , VAR_362 , METHOD_99 ( VAR_363 ) ) ; VAR_364 = VAR_365 ; } } switch ( VAR_366 ) { case VAR_367 : METHOD_100 ( "%s:%s" , VAR_368 , METHOD_101 ( VAR_369 ) ) ; break ; case VAR_370 : ( TYPE_68 ) METHOD_102 ( VAR_371 , VAR_372 , "" , 1 ) ; break ; case VAR_373 : break ; } } VAR_374 : METHOD_103 ( "protocolerror:%s" , VAR_375 ) ; METHOD_104 ( 1 ) ; }
TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { switch ( VAR_3 ) { case VAR_4 : * ( TYPE_4 * ) VAR_5 = VAR_6 -> VAR_7 ; return 0 ; case VAR_8 : * ( TYPE_5 * ) VAR_9 = VAR_10 -> VAR_11 ; return 0 ; case VAR_12 : * ( TYPE_6 * ) VAR_13 = VAR_14 -> VAR_15 ; return 0 ; case VAR_16 : * ( TYPE_7 * ) VAR_17 = VAR_18 -> VAR_19 ; return 0 ;  default :  VAR_20 = VAR_21 ; return - 1 ; } }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) {  static TYPE_2 TYPE_3 VAR_2 ;  TYPE_4 VAR_3 , VAR_4 ;  METHOD_1 ( & TYPE_5 , sizeof ( TYPE_6 ) ) ;   VAR_5 = METHOD_2 ( ( TYPE_7 TYPE_8 ) VAR_6 -> VAR_7 ,  ( TYPE_9 TYPE_10 ) VAR_8 -> VAR_9 ,  VAR_10 -> VAR_11 ^ METHOD_3 ( STRUCT_OR_UNION_3 ) ,  TYPE_11 ) ; VAR_12 = METHOD_4 ( VAR_13 , VAR_14 ) ; VAR_15 -> VAR_16 = METHOD_5 ( VAR_17 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ,   const TYPE_3 * VAR_2 ) {  METHOD_1 ( VAR_3 , VAR_4 , VAR_5 , & VAR_6 [ VAR_7 ] ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 * VAR_1 ; TYPE_2 VAR_2 ; VAR_3 = METHOD_1 ( & VAR_4 , "%s,%s,%s,%s,%s" , VAR_5 -> VAR_6 . VAR_7 , VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 . VAR_13 , VAR_14 -> VAR_15 . VAR_16 , VAR_17 -> VAR_18 . VAR_19 ) ; if ( ! VAR_20 -> VAR_21 . VAR_22 ) { while ( VAR_23 > 0 && VAR_24 [ VAR_25 - 1 ] == ',' ) VAR_26 -- ; VAR_27 [ VAR_28 ] = 0 ; } TYPE_3 TYPE_4 if ( VAR_29 ( "chfn" , VAR_30 -> VAR_31 , VAR_32 -> VAR_33 -> VAR_34 , VAR_35 , VAR_36 ) < 0 ) { else VAR_37 -> VAR_38 -> VAR_39 = VAR_40 ;  if ( METHOD_2 ( VAR_41 -> VAR_42 ) < 0 ) {  METHOD_3 ( "setpwnamfailed" ) ; METHOD_4 ( METHOD_5 ( "Fingerinformation*NOT*changed.Tryagainlater.\\n" ) ) ; return - 1 ; } METHOD_6 ( VAR_43 ) ; METHOD_7 ( METHOD_8 ( "Fingerinformationchanged.\\n" ) ) ; return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , const struct STRUCT_OR_UNION_2 * VAR_3 ) {  if ( VAR_4 -> VAR_5 )  return - VAR_6 ; if ( VAR_7 < METHOD_1 ( & VAR_8 -> VAR_9 ) ) return - VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = METHOD_2 ( & VAR_16 -> VAR_17 ) ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = METHOD_3 ( & VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 = ( TYPE_2 * ) VAR_26 + sizeof ( * VAR_27 ) ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = & VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 ++ ; VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 = & VAR_41 ; VAR_42 -> VAR_43 = 1 ; if ( VAR_44 -> VAR_45 & ( 1 << VAR_46 ) ) { while ( METHOD_4 ( VAR_47 -> VAR_48 ) & ( 1 << VAR_49 ) ) { VAR_50 -> VAR_51 += sizeof ( VAR_52 ) ; if ( ( unsigned TYPE_3 ) VAR_53 -> VAR_54 -  ( unsigned TYPE_4 ) VAR_55 -> VAR_56 >  ( unsigned TYPE_5 ) VAR_57 -> VAR_58 ) return - VAR_59 ; } VAR_60 -> VAR_61 += sizeof ( VAR_62 ) ; } VAR_63 -> VAR_64 = VAR_65 -> VAR_66 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 , VAR_4 ; for ( VAR_5 = VAR_6 -> VAR_7 + 1 ; VAR_8 <= VAR_9 -> VAR_10 ; VAR_11 ++ ) { METHOD_1 ( VAR_12 -> VAR_13 [ VAR_14 ] ) ; VAR_15 -> VAR_16 [ VAR_17 ] = VAR_18 ;  }  VAR_19 -> VAR_20 = VAR_21 -> VAR_22 ; for ( VAR_23 = 0 ; VAR_24 <= VAR_25 -> VAR_26 ; VAR_27 ++ ) { VAR_28 = VAR_29 -> VAR_30 [ VAR_31 ] ; if ( ! VAR_32 ) { VAR_33 = METHOD_2 ( sizeof ( * VAR_34 ) , VAR_35 ) ; if ( ! VAR_36 ) return - VAR_37 ; VAR_38 -> VAR_39 [ VAR_40 ] = VAR_41 ; } VAR_42 = METHOD_3 ( VAR_43 , VAR_44 -> VAR_45 [ VAR_46 ] ) ; if ( VAR_47 ) return VAR_48 ; } return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 , * VAR_3 ; METHOD_1 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) { if ( VAR_8 -> VAR_9 -> VAR_10 == VAR_11 -> VAR_12 -> VAR_13 && VAR_14 -> VAR_15 -> VAR_16 == VAR_17 -> VAR_18 -> VAR_19 )  METHOD_2 ( VAR_20 ) ;  } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , const TYPE_5 * const * VAR_4 , TYPE_6 VAR_5 , const TYPE_7 * VAR_6 , struct STRUCT_OR_UNION_0 * VAR_7 , TYPE_8 * * VAR_8 , TYPE_9 * VAR_9 , TYPE_10 * * VAR_10 ) { TYPE_11 VAR_11 = VAR_12 ; TYPE_12 TYPE_13 VAR_13 = - 1 ; TYPE_14 TYPE_15 * VAR_14 = METHOD_1 ( "export-desktop-XXXXXX" ) ; g_autoptr ( TYPE_16 ) VAR_15 = VAR_16 ; TYPE_17 TYPE_18 * VAR_17 = VAR_18 ; TYPE_19 VAR_19 ; TYPE_20 TYPE_21 * VAR_20 = VAR_21 ; TYPE_22 VAR_22 ; g_autoptr ( TYPE_23 ) VAR_23 = VAR_24 ; TYPE_24 TYPE_25 * VAR_25 = VAR_26 ; TYPE_26 VAR_27 ; g_auto ( TYPE_27 ) VAR_28 = VAR_29 ; g_auto ( TYPE_28 ) VAR_30 = VAR_31 ; TYPE_29 * VAR_32 = VAR_33 ; TYPE_30 TYPE_31 * VAR_34 = METHOD_2 ( VAR_35 ) ; TYPE_32 TYPE_33 * VAR_36 = METHOD_3 ( VAR_37 ) ; TYPE_34 TYPE_35 * VAR_38 = METHOD_4 ( VAR_39 ) ; TYPE_36 VAR_40 ; if ( ! METHOD_5 ( VAR_41 , VAR_42 , & VAR_43 , VAR_44 , VAR_45 ) ) goto VAR_46 ; if ( ! METHOD_6 ( VAR_47 , VAR_48 , & VAR_49 , & VAR_50 , VAR_51 ) ) goto VAR_52 ; VAR_53 = METHOD_7 ( ) ; if ( ! METHOD_8 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ) goto VAR_59 ; if ( METHOD_9 ( VAR_60 , ".service" ) ) { TYPE_37 TYPE_38 * VAR_61 = VAR_62 ; TYPE_39 TYPE_40 * VAR_63 = METHOD_10 ( VAR_64 , METHOD_11 ( VAR_65 ) - METHOD_12 ( ".service" ) ) ; VAR_66 = METHOD_13 ( VAR_67 , "D-BUSService" , "Name" , VAR_68 ) ; if ( VAR_69 == VAR_70 || METHOD_14 ( VAR_71 , VAR_72 ) != 0 ) { return METHOD_15 ( VAR_73 , VAR_74 , METHOD_16 ( "D-Busservicefile\'%s\'haswrongname" ) , VAR_75 ) ; } } if ( METHOD_17 ( VAR_76 , ".desktop" ) ) { TYPE_41 VAR_77 ; g_auto ( TYPE_42 ) VAR_78 = METHOD_18 ( VAR_79 , "Application" , "tags" , & VAR_80 , VAR_81 ) ; if ( VAR_82 != VAR_83 ) { METHOD_19 ( VAR_84 , VAR_85 , "X-Flatpak-Tags" , ( const TYPE_43 * const * ) VAR_86 , VAR_87 ) ; } METHOD_20 ( VAR_88 , VAR_89 , "X-Flatpak" , VAR_90 ) ; if ( VAR_91 != VAR_92 ) { const TYPE_44 * VAR_93 = "X-Flatpak-RenamedFrom" ; g_auto ( TYPE_45 ) VAR_94 = METHOD_21 ( VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 ) ; g_autoptr ( TYPE_46 ) VAR_100 = METHOD_22 ( VAR_101 ) ; g_autoptr ( TYPE_47 ) VAR_102 = METHOD_23 ( VAR_103 , VAR_104 ) ; const TYPE_48 * VAR_105 ; for ( VAR_106 = 0 ; VAR_107 != VAR_108 && VAR_109 [ VAR_110 ] != VAR_111 ; VAR_112 ++ ) { if ( ! METHOD_24 ( VAR_113 , VAR_114 [ VAR_115 ] ) ) { TYPE_49 * VAR_116 = METHOD_25 ( VAR_117 [ VAR_118 ] ) ; METHOD_26 ( VAR_119 , VAR_120 , VAR_121 ) ; METHOD_27 ( VAR_122 , METHOD_28 ( & VAR_123 ) ) ; } } METHOD_29 ( METHOD_30 ( VAR_124 , VAR_125 ) ) ; VAR_126 = VAR_127 + METHOD_31 ( VAR_128 ) ; for ( VAR_129 = 0 ; VAR_130 [ VAR_131 ] != VAR_132 ; VAR_133 ++ ) { TYPE_50 TYPE_51 * VAR_134 = METHOD_32 ( VAR_135 [ VAR_136 ] , VAR_137 , VAR_138 ) ; if ( ! METHOD_33 ( VAR_139 , VAR_140 ) ) { METHOD_34 ( VAR_141 , VAR_142 , VAR_143 ) ; METHOD_35 ( VAR_144 , METHOD_36 ( & VAR_145 ) ) ; } } if ( VAR_146 -> VAR_147 > 0 ) { METHOD_37 ( VAR_148 , VAR_149 ) ; METHOD_38 ( VAR_150 , VAR_151 , VAR_152 , ( const TYPE_52 * const * ) VAR_153 -> VAR_154 , VAR_155 -> VAR_156 - 1 ) ; } } } VAR_157 = METHOD_39 ( VAR_158 , VAR_159 ) ; for ( VAR_160 = 0 ; VAR_161 [ VAR_162 ] != VAR_163 ; VAR_164 ++ ) { g_auto ( TYPE_53 ) VAR_165 = METHOD_40 ( VAR_166 , VAR_167 [ VAR_168 ] , "X-Flatpak-RunOptions" , VAR_169 , VAR_170 ) ; TYPE_54 TYPE_55 * VAR_171 = METHOD_41 ( VAR_172 ) ; METHOD_42 ( VAR_173 , VAR_174 [ VAR_175 ] , "X-Flatpak-RunOptions" , VAR_176 ) ; METHOD_43 ( VAR_177 , VAR_178 [ VAR_179 ] , "TryExec" , VAR_180 ) ; METHOD_44 ( VAR_181 , VAR_182 [ VAR_183 ] , "X-GNOME-Bugzilla-ExtraInfoScript" , VAR_184 ) ; VAR_185 = METHOD_45 ( "" ) ; METHOD_46 ( VAR_186 , VAR_187 "/flatpakrun--branch=%s--arch=%s" , VAR_188 , VAR_189 ) ; if ( VAR_190 != VAR_191 ) METHOD_47 ( VAR_192 , "%s" , VAR_193 ) ; VAR_194 = METHOD_48 ( VAR_195 , VAR_196 [ VAR_197 ] , "Exec" , VAR_198 ) ; if ( VAR_199 && METHOD_49 ( VAR_200 , & VAR_201 , & VAR_202 , VAR_203 ) && VAR_204 >= 1 ) { TYPE_56 VAR_205 ; TYPE_57 TYPE_58 * VAR_206 = METHOD_50 ( VAR_207 [ 0 ] ) ; METHOD_51 ( VAR_208 , "--command=%s" , VAR_209 ) ; for ( VAR_210 = 1 ; VAR_211 < VAR_212 ; VAR_213 ++ ) { if ( METHOD_52 ( VAR_214 [ VAR_215 ] , "%f" ) == 0 || METHOD_53 ( VAR_216 [ VAR_217 ] , "%u" ) == 0 ) { METHOD_54 ( VAR_218 , "--file-forwarding" ) ; break ; } } METHOD_55 ( VAR_219 , "" ) ; METHOD_56 ( VAR_220 , VAR_221 ) ; for ( VAR_222 = 1 ; VAR_223 < VAR_224 ; VAR_225 ++ ) { TYPE_59 TYPE_60 * VAR_226 = METHOD_57 ( VAR_227 [ VAR_228 ] ) ; if ( METHOD_58 ( VAR_229 , "%f" ) == 0 ) METHOD_59 ( VAR_230 , "@@%s@@" , VAR_231 ) ; else if ( METHOD_60 ( VAR_232 , "%u" ) == 0 ) METHOD_61 ( VAR_233 , "@@u%s@@" , VAR_234 ) ;  else  METHOD_62 ( VAR_235 , "%s" , VAR_236 ) ; } } else { METHOD_63 ( VAR_237 , "" ) ; METHOD_64 ( VAR_238 , VAR_239 ) ; } METHOD_65 ( VAR_240 , VAR_241 [ VAR_242 ] , VAR_243 , VAR_244 -> VAR_245 ) ; } VAR_246 = METHOD_66 ( VAR_247 , & VAR_248 , VAR_249 ) ; if ( VAR_250 == VAR_251 ) goto VAR_252 ; if ( ! METHOD_67 ( VAR_253 , 0755 , VAR_254 , & VAR_255 , VAR_256 , VAR_257 ) ) goto VAR_258 ; if ( ! METHOD_68 ( VAR_259 , VAR_260 , VAR_261 , VAR_262 , VAR_263 , VAR_264 ) ) goto VAR_265 ; if ( ! METHOD_69 ( VAR_266 , VAR_267 , VAR_268 ) ) goto VAR_269 ; if ( VAR_270 ) * VAR_271 = METHOD_70 ( & VAR_272 ) ; VAR_273 = VAR_274 ; VAR_275 : if ( VAR_276 != VAR_277 ) METHOD_71 ( VAR_278 , VAR_279 ) ; return VAR_280 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) {  TYPE_4 * const VAR_3 = & VAR_4 -> VAR_5 ;  const TYPE_5 VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 ) ; const TYPE_6 VAR_9 = 1 << VAR_10 -> VAR_11 ; const TYPE_7 VAR_12 = 1 << VAR_13 -> VAR_14 ; TYPE_8 VAR_15 [ 4 ] [ 1 << 6 ] ; TYPE_9 VAR_16 , VAR_17 ;  const TYPE_10 * VAR_18 = VAR_19 ;   TYPE_11 VAR_20 ;  METHOD_2 ( VAR_21 <= 4 ) ; METHOD_3 ( VAR_22 <= ( 1 << 6 ) ) ;  METHOD_4 ( VAR_23 -> VAR_24 , 0 ,  sizeof ( * VAR_25 -> VAR_26 ) * VAR_27 * 2 * VAR_28 ) ;  METHOD_5 ( VAR_29 -> VAR_30 , 0 ,   sizeof ( * VAR_31 -> VAR_32 ) * VAR_33 ) ;  for ( VAR_34 = 0 ; VAR_35 < VAR_36 ; ++ VAR_37 ) { for ( VAR_38 = 0 ; VAR_39 < VAR_40 ; ++ VAR_41 ) {  const TYPE_12 VAR_42 = VAR_43 == VAR_44 - 1 &&  VAR_45 == VAR_46 - 1 ; const TYPE_13 VAR_47 = METHOD_6 ( VAR_48 , VAR_49 , & VAR_50 -> VAR_51 , & VAR_52 ) ; TYPE_14 * const VAR_53 = & VAR_54 [ VAR_55 ] [ VAR_56 ] ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = VAR_62 ; VAR_63 += VAR_64 ; } } for ( VAR_65 = 0 ; VAR_66 < VAR_67 ; ++ VAR_68 ) { for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; ++ VAR_72 ) { const TYPE_15 VAR_73 = VAR_74 -> VAR_75 . VAR_76 ? VAR_77 - VAR_78 - 1 : VAR_79 ; const TYPE_16 VAR_80 = VAR_81 == VAR_82 - 1 && VAR_83 == VAR_84 - 1 ; const TYPE_17 * const VAR_85 = & VAR_86 [ VAR_87 ] [ VAR_88 ] ; TYPE_18 VAR_89 ; METHOD_7 ( & VAR_90 , VAR_91 , VAR_92 , VAR_93 ) ; METHOD_8 ( VAR_94 -> VAR_95 , VAR_96 , VAR_97 -> VAR_98 , & VAR_99 -> VAR_100 , & VAR_101 ) ; METHOD_9 ( VAR_102 , & VAR_103 , & VAR_104 ) ; if ( VAR_105 ) VAR_106 = METHOD_10 ( & VAR_107 ) ; } } return VAR_108 ; }
TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 ) {   TYPE_2 * const VAR_1 = METHOD_1 ( 32 , sizeof ( * VAR_2 ) ) ;   TYPE_3 * const VAR_3 = VAR_4 ? & VAR_5 -> VAR_6 : VAR_7 ;  if ( ! VAR_8 ) return VAR_9 ; METHOD_2 ( * VAR_10 ) ; if ( METHOD_3 ( VAR_11 -> VAR_12 . VAR_13 ) ) { VAR_14 -> VAR_15 . METHOD_4 = 0 ; METHOD_5 ( VAR_16 ) ; return VAR_17 ; } VAR_18 -> VAR_19 . METHOD_6 = 1 ;  METHOD_7 ( ) ;  METHOD_8 ( ) ; METHOD_9 ( & VAR_20 -> VAR_21 , - 1 , sizeof ( VAR_22 -> VAR_23 ) ) ;  VAR_24 -> VAR_25 = 0 ;   VAR_26 -> VAR_27 = * VAR_28 ;  VAR_29 -> VAR_30 = 1 ;  VAR_31 -> VAR_32 = 0 ;   METHOD_10 ( VAR_33 ) ;  METHOD_11 ( VAR_34 ) ; VAR_35 -> VAR_36 . METHOD_12 = 0 ; METHOD_13 ( & VAR_37 -> VAR_38 ) ; return VAR_39 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_6 ) { return VAR_7 ; } if ( ! ( ( TYPE_4 * ) VAR_8 ) -> VAR_9 ) {  METHOD_2 ( VAR_10 , VAR_11 , ( "[isofile]Missingdrefboxindinf\\n" ) ) ;   ( ( TYPE_5 * ) VAR_12 ) -> VAR_13 = ( TYPE_6 * ) METHOD_3 ( VAR_14 ) ;  } return VAR_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; TYPE_2 VAR_3 ; METHOD_1 ( "GsmXSMPClient:Settingupnewconnection" ) ; VAR_4 = METHOD_2 ( VAR_5 -> VAR_6 -> VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 , METHOD_4 ( VAR_10 , VAR_11 , 0 ) | VAR_12 ) ; VAR_13 = METHOD_5 ( VAR_14 ) ; VAR_15 -> VAR_16 -> VAR_17 = METHOD_6 ( VAR_18 , VAR_19 | VAR_20 , ( TYPE_3 ) VAR_21 , VAR_22 ) ; METHOD_7 ( VAR_23 ) ;  VAR_24 -> VAR_25 -> VAR_26 = METHOD_8 ( 5 ,  ( TYPE_4 ) VAR_27 , VAR_28 ) ; METHOD_9 ( VAR_29 ) ; METHOD_10 ( "GsmXSMPClient:Newclient\'%s\'" , VAR_30 -> VAR_31 -> VAR_32 ) ; }
struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 ; TYPE_0 VAR_2 ; if ( ! VAR_3 ) return VAR_4 ; VAR_5 = kmemdup ( VAR_6 , offsetof ( struct STRUCT_OR_UNION_3 , VAR_7 [ VAR_8 -> VAR_9 ] ) , GFP_KERNEL ) ; if ( VAR_10 ) { for ( VAR_11 = 0 ; VAR_12 < VAR_13 -> VAR_14 ; VAR_15 ++ ) METHOD_1 ( VAR_16 -> VAR_17 [ VAR_18 ] ) ; VAR_19 -> VAR_20 = VAR_21 -> VAR_22 ;  }  return VAR_23 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 ;  struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 ) ; VAR_5 = VAR_6 -> VAR_7 ;  if ( VAR_8 == VAR_9 || VAR_10 -> VAR_11 == 0 )  return ; METHOD_2 ( & VAR_12 -> VAR_13 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ,  TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { VAR_5 += VAR_6 ; ++ VAR_7 ; do {  const TYPE_5 VAR_8 = VAR_9 [ VAR_10 ++ ] ;  if ( VAR_11 <= 0 ) { VAR_12 [ - VAR_13 ] . VAR_14 = VAR_15 ; VAR_16 [ - VAR_17 ] . VAR_18 = VAR_19 ; } else { METHOD_1 ( VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ; } } while ( ++ VAR_25 & 1 ) ; }
METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 , TYPE_3 , TYPE_4 ) { TYPE_5 VAR_0 ; struct STRUCT_OR_UNION_0 * VAR_1 ; METHOD_1 ( VAR_2 != VAR_3 ) ; METHOD_2 ( VAR_4 != VAR_5 ) ; if ( ( TYPE_6 & ~ VAR_6 ) || ( TYPE_7 != VAR_7 && TYPE_8 != VAR_8 && TYPE_9 != VAR_9 && TYPE_10 != VAR_10 && TYPE_11 != VAR_11 ) ) return - VAR_12 ; if ( ! METHOD_3 ( VAR_13 ) && ( TYPE_12 == VAR_14 || TYPE_13 == VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_4 ( sizeof ( * VAR_18 ) , VAR_19 ) ; if ( ! VAR_20 ) return - VAR_21 ; METHOD_5 ( & VAR_22 -> VAR_23 ) ;  VAR_24 -> TYPE_14 = TYPE_15 ;  if ( METHOD_6 ( VAR_25 ) ) METHOD_7 ( & VAR_26 -> VAR_27 . VAR_28 , VAR_29 -> TYPE_16 == VAR_30 ? VAR_31 : VAR_32 , VAR_33 ) ; else METHOD_8 ( & VAR_34 -> VAR_35 . VAR_36 , TYPE_17 , VAR_37 ) ; VAR_38 -> VAR_39 = METHOD_9 ( 0 ) ; VAR_40 = METHOD_10 ( "[timerfd]" , & VAR_41 , VAR_42 , VAR_43 | ( TYPE_18 & VAR_44 ) ) ; if ( VAR_45 < 0 ) METHOD_11 ( VAR_46 ) ; return VAR_47 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_4 * VAR_5 , * VAR_6 ;  struct STRUCT_OR_UNION_5 * VAR_7 ; TYPE_1 VAR_8 ;  if ( METHOD_2 ( VAR_9 ) ) {  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ;  VAR_15 = METHOD_4 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ;  METHOD_5 ( ) ; if ( VAR_20 ) goto VAR_21 ; for ( VAR_22 = VAR_23 ; VAR_24 ; VAR_25 = METHOD_6 ( VAR_26 , VAR_27 ) ) METHOD_7 ( VAR_28 ) ; } else { METHOD_8 ( ) ; } if ( VAR_29 ) { METHOD_9 ( VAR_30 , VAR_31 ) ; METHOD_10 ( VAR_32 , VAR_33 , VAR_34 ) ; METHOD_11 ( VAR_35 -> VAR_36 ) ; } else { METHOD_12 ( VAR_37 , VAR_38 , VAR_39 ) ; METHOD_13 ( VAR_40 , VAR_41 ) ; } METHOD_14 ( VAR_42 , VAR_43 , & VAR_44 , VAR_45 ) { struct STRUCT_OR_UNION_6 * VAR_46 ; METHOD_15 ( & VAR_47 -> VAR_48 ) ; VAR_49 = METHOD_16 ( & VAR_50 -> VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_17 ( VAR_55 , VAR_56 ) ; } METHOD_18 ( ) ; return 0 ; VAR_57 : while ( ! METHOD_19 ( & VAR_58 ) ) { VAR_59 = hlist_entry ( VAR_60 . VAR_61 , struct STRUCT_OR_UNION_7 , VAR_62 ) ;  METHOD_20 ( VAR_63 , VAR_64 ) ;  } METHOD_21 ( ) ; METHOD_22 ( VAR_65 , VAR_66 ) ; VAR_67 :  return VAR_68 ;  }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 * VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 * VAR_6 = VAR_7 , * VAR_8 , * VAR_9 ; const TYPE_7 * VAR_10 ; TYPE_8 VAR_11 , VAR_12 = 0 ; TYPE_9 VAR_13 ; * VAR_14 = VAR_15 ; * VAR_16 = 0 ; while ( VAR_17 > 0 ) {  VAR_18 = METHOD_1 ( VAR_19 , VAR_20 , & VAR_21 , & VAR_22 , & VAR_23 , & VAR_24 , & VAR_25 ) ;  if ( VAR_26 ) goto VAR_27 ; if ( ! METHOD_2 ( VAR_28 , & VAR_29 ) ) { VAR_30 = VAR_31 ; goto VAR_32 ; } VAR_33 = METHOD_3 ( VAR_34 , ( VAR_35 + 1 ) * VAR_36 -> VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = VAR_41 ; goto VAR_42 ; } VAR_43 = VAR_44 ; VAR_45 = ( TYPE_10 * ) VAR_46 + VAR_47 * VAR_48 -> VAR_49 ; METHOD_4 ( VAR_50 , 0 , VAR_51 -> VAR_52 ) ; VAR_53 = METHOD_5 ( & VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; if ( VAR_59 ) goto VAR_60 ; VAR_61 ++ ; } * VAR_62 = VAR_63 ; * VAR_64 = VAR_65 ; return 0 ; VAR_66 : METHOD_6 ( VAR_67 , VAR_68 , VAR_69 ) ; METHOD_7 ( VAR_70 ) ; return VAR_71 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 [ 16 ] , VAR_2 [ 16 ] , VAR_3 [ 32 ] , VAR_4 [ 32 ] ; const TYPE_3 VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; const TYPE_4 VAR_8 = METHOD_2 ( VAR_9 , - VAR_10 ) ; const TYPE_5 VAR_11 = METHOD_3 ( VAR_12 , VAR_13 ) ; const TYPE_6 VAR_14 = METHOD_4 ( VAR_15 , - VAR_16 ) ; const TYPE_7 VAR_17 = METHOD_5 ( VAR_18 , VAR_19 ) ; const TYPE_8 VAR_20 = METHOD_6 ( VAR_21 , - VAR_22 ) ; const TYPE_9 VAR_23 = METHOD_7 ( VAR_24 , VAR_25 ) ; const TYPE_10 VAR_26 = METHOD_8 ( VAR_27 , - VAR_28 ) ; const TYPE_11 VAR_29 = METHOD_9 ( VAR_30 , VAR_31 ) ; const TYPE_12 VAR_32 = METHOD_10 ( VAR_33 , - VAR_34 ) ; const TYPE_13 VAR_35 = METHOD_11 ( VAR_36 , VAR_37 ) ; const TYPE_14 VAR_38 = METHOD_12 ( VAR_39 , - VAR_40 ) ; const TYPE_15 VAR_41 = METHOD_13 ( VAR_42 , VAR_43 ) ; const TYPE_16 VAR_44 = METHOD_14 ( VAR_45 , - VAR_46 ) ; const TYPE_17 VAR_47 = METHOD_15 ( VAR_48 , VAR_49 ) ; const TYPE_18 VAR_50 = METHOD_16 ( VAR_51 , - VAR_52 ) ; const TYPE_19 VAR_53 = METHOD_17 ( VAR_54 , VAR_55 ) ; const TYPE_20 VAR_56 = METHOD_18 ( VAR_57 , - VAR_58 ) ; const TYPE_21 VAR_59 = METHOD_19 ( VAR_60 , VAR_61 ) ; const TYPE_22 VAR_62 = METHOD_20 ( VAR_63 , - VAR_64 ) ; const TYPE_23 VAR_65 = METHOD_21 ( - VAR_66 , VAR_67 ) ; const TYPE_24 VAR_68 = METHOD_22 ( - VAR_69 , VAR_70 ) ; const TYPE_25 VAR_71 = METHOD_23 ( VAR_72 , VAR_73 ) ; const TYPE_26 VAR_74 = METHOD_24 ( VAR_75 , - VAR_76 ) ; const TYPE_27 VAR_77 = METHOD_25 ( - VAR_78 , VAR_79 ) ;  const TYPE_28 VAR_80 = METHOD_26 ( - VAR_81 ) ;   const TYPE_29 VAR_82 = METHOD_27 ( VAR_83 ) ;  const TYPE_30 VAR_84 = METHOD_28 ( VAR_85 , - VAR_86 ) ; const TYPE_31 VAR_87 = METHOD_29 ( - VAR_88 , VAR_89 ) ; const TYPE_32 VAR_90 = METHOD_30 ( VAR_91 ) ; const TYPE_33 VAR_92 = METHOD_31 ( 0 ) ; VAR_93 [ 0 ] = METHOD_32 ( VAR_94 [ 15 ] , VAR_95 [ 0 ] ) ; VAR_96 [ 1 ] = METHOD_33 ( VAR_97 [ 15 ] , VAR_98 [ 0 ] ) ; VAR_99 [ 2 ] = METHOD_34 ( VAR_100 [ 13 ] , VAR_101 [ 2 ] ) ; VAR_102 [ 3 ] = METHOD_35 ( VAR_103 [ 13 ] , VAR_104 [ 2 ] ) ; VAR_105 [ 4 ] = METHOD_36 ( VAR_106 [ 11 ] , VAR_107 [ 4 ] ) ; VAR_108 [ 5 ] = METHOD_37 ( VAR_109 [ 11 ] , VAR_110 [ 4 ] ) ; VAR_111 [ 6 ] = METHOD_38 ( VAR_112 [ 9 ] , VAR_113 [ 6 ] ) ; VAR_114 [ 7 ] = METHOD_39 ( VAR_115 [ 9 ] , VAR_116 [ 6 ] ) ; VAR_117 [ 8 ] = METHOD_40 ( VAR_118 [ 7 ] , VAR_119 [ 8 ] ) ; VAR_120 [ 9 ] = METHOD_41 ( VAR_121 [ 7 ] , VAR_122 [ 8 ] ) ; VAR_123 [ 10 ] = METHOD_42 ( VAR_124 [ 5 ] , VAR_125 [ 10 ] ) ; VAR_126 [ 11 ] = METHOD_43 ( VAR_127 [ 5 ] , VAR_128 [ 10 ] ) ; VAR_129 [ 12 ] = METHOD_44 ( VAR_130 [ 3 ] , VAR_131 [ 12 ] ) ; VAR_132 [ 13 ] = METHOD_45 ( VAR_133 [ 3 ] , VAR_134 [ 12 ] ) ; VAR_135 [ 14 ] = METHOD_46 ( VAR_136 [ 1 ] , VAR_137 [ 14 ] ) ; VAR_138 [ 15 ] = METHOD_47 ( VAR_139 [ 1 ] , VAR_140 [ 14 ] ) ; VAR_141 [ 0 ] = METHOD_48 ( VAR_142 [ 0 ] , VAR_143 ) ; VAR_144 [ 1 ] = METHOD_49 ( VAR_145 [ 1 ] , VAR_146 ) ; VAR_147 [ 2 ] = METHOD_50 ( VAR_148 [ 0 ] , VAR_149 ) ; VAR_150 [ 3 ] = METHOD_51 ( VAR_151 [ 1 ] , VAR_152 ) ; VAR_153 [ 4 ] = METHOD_52 ( VAR_154 [ 2 ] , VAR_155 ) ; VAR_156 [ 5 ] = METHOD_53 ( VAR_157 [ 3 ] , VAR_158 ) ; VAR_159 [ 6 ] = METHOD_54 ( VAR_160 [ 2 ] , VAR_161 ) ; VAR_162 [ 7 ] = METHOD_55 ( VAR_163 [ 3 ] , VAR_164 ) ; VAR_165 [ 8 ] = METHOD_56 ( VAR_166 [ 4 ] , VAR_167 ) ; VAR_168 [ 9 ] = METHOD_57 ( VAR_169 [ 5 ] , VAR_170 ) ; VAR_171 [ 10 ] = METHOD_58 ( VAR_172 [ 4 ] , VAR_173 ) ; VAR_174 [ 11 ] = METHOD_59 ( VAR_175 [ 5 ] , VAR_176 ) ; VAR_177 [ 12 ] = METHOD_60 ( VAR_178 [ 6 ] , VAR_179 ) ; VAR_180 [ 13 ] = METHOD_61 ( VAR_181 [ 7 ] , VAR_182 ) ; VAR_183 [ 14 ] = METHOD_62 ( VAR_184 [ 6 ] , VAR_185 ) ; VAR_186 [ 15 ] = METHOD_63 ( VAR_187 [ 7 ] , VAR_188 ) ; VAR_189 [ 16 ] = METHOD_64 ( VAR_190 [ 8 ] , VAR_191 ) ; VAR_192 [ 17 ] = METHOD_65 ( VAR_193 [ 9 ] , VAR_194 ) ; VAR_195 [ 18 ] = METHOD_66 ( VAR_196 [ 8 ] , VAR_197 ) ; VAR_198 [ 19 ] = METHOD_67 ( VAR_199 [ 9 ] , VAR_200 ) ; VAR_201 [ 20 ] = METHOD_68 ( VAR_202 [ 10 ] , VAR_203 ) ; VAR_204 [ 21 ] = METHOD_69 ( VAR_205 [ 11 ] , VAR_206 ) ; VAR_207 [ 22 ] = METHOD_70 ( VAR_208 [ 10 ] , VAR_209 ) ; VAR_210 [ 23 ] = METHOD_71 ( VAR_211 [ 11 ] , VAR_212 ) ; VAR_213 [ 24 ] = METHOD_72 ( VAR_214 [ 12 ] , VAR_215 ) ; VAR_216 [ 25 ] = METHOD_73 ( VAR_217 [ 13 ] , VAR_218 ) ; VAR_219 [ 26 ] = METHOD_74 ( VAR_220 [ 12 ] , VAR_221 ) ; VAR_222 [ 27 ] = METHOD_75 ( VAR_223 [ 13 ] , VAR_224 ) ; VAR_225 [ 28 ] = METHOD_76 ( VAR_226 [ 14 ] , VAR_227 ) ; VAR_228 [ 29 ] = METHOD_77 ( VAR_229 [ 15 ] , VAR_230 ) ; VAR_231 [ 30 ] = METHOD_78 ( VAR_232 [ 14 ] , VAR_233 ) ; VAR_234 [ 31 ] = METHOD_79 ( VAR_235 [ 15 ] , VAR_236 ) ; VAR_237 [ 0 ] = METHOD_80 ( VAR_238 [ 0 ] , VAR_239 [ 16 ] ) ; VAR_240 [ 1 ] = METHOD_81 ( VAR_241 [ 1 ] , VAR_242 [ 17 ] ) ; VAR_243 [ 2 ] = METHOD_82 ( VAR_244 [ 2 ] , VAR_245 [ 18 ] ) ; VAR_246 [ 3 ] = METHOD_83 ( VAR_247 [ 3 ] , VAR_248 [ 19 ] ) ; VAR_249 [ 4 ] = METHOD_84 ( VAR_250 [ 4 ] , VAR_251 [ 20 ] ) ; VAR_252 [ 5 ] = METHOD_85 ( VAR_253 [ 5 ] , VAR_254 [ 21 ] ) ; VAR_255 [ 6 ] = METHOD_86 ( VAR_256 [ 6 ] , VAR_257 [ 22 ] ) ; VAR_258 [ 7 ] = METHOD_87 ( VAR_259 [ 7 ] , VAR_260 [ 23 ] ) ; VAR_261 [ 8 ] = METHOD_88 ( VAR_262 [ 8 ] , VAR_263 [ 24 ] ) ; VAR_264 [ 9 ] = METHOD_89 ( VAR_265 [ 9 ] , VAR_266 [ 25 ] ) ; VAR_267 [ 10 ] = METHOD_90 ( VAR_268 [ 10 ] , VAR_269 [ 26 ] ) ; VAR_270 [ 11 ] = METHOD_91 ( VAR_271 [ 11 ] , VAR_272 [ 27 ] ) ; VAR_273 [ 12 ] = METHOD_92 ( VAR_274 [ 12 ] , VAR_275 [ 28 ] ) ; VAR_276 [ 13 ] = METHOD_93 ( VAR_277 [ 13 ] , VAR_278 [ 29 ] ) ; VAR_279 [ 14 ] = METHOD_94 ( VAR_280 [ 14 ] , VAR_281 [ 30 ] ) ; VAR_282 [ 15 ] = METHOD_95 ( VAR_283 [ 15 ] , VAR_284 [ 31 ] ) ; VAR_285 [ 16 ] = METHOD_96 ( VAR_286 [ 0 ] , VAR_287 [ 16 ] ) ; VAR_288 [ 17 ] = METHOD_97 ( VAR_289 [ 1 ] , VAR_290 [ 17 ] ) ; VAR_291 [ 18 ] = METHOD_98 ( VAR_292 [ 2 ] , VAR_293 [ 18 ] ) ; VAR_294 [ 19 ] = METHOD_99 ( VAR_295 [ 3 ] , VAR_296 [ 19 ] ) ; VAR_297 [ 20 ] = METHOD_100 ( VAR_298 [ 4 ] , VAR_299 [ 20 ] ) ; VAR_300 [ 21 ] = METHOD_101 ( VAR_301 [ 5 ] , VAR_302 [ 21 ] ) ; VAR_303 [ 22 ] = METHOD_102 ( VAR_304 [ 6 ] , VAR_305 [ 22 ] ) ; VAR_306 [ 23 ] = METHOD_103 ( VAR_307 [ 7 ] , VAR_308 [ 23 ] ) ; VAR_309 [ 24 ] = METHOD_104 ( VAR_310 [ 8 ] , VAR_311 [ 24 ] ) ; VAR_312 [ 25 ] = METHOD_105 ( VAR_313 [ 9 ] , VAR_314 [ 25 ] ) ; VAR_315 [ 26 ] = METHOD_106 ( VAR_316 [ 10 ] , VAR_317 [ 26 ] ) ; VAR_318 [ 27 ] = METHOD_107 ( VAR_319 [ 11 ] , VAR_320 [ 27 ] ) ; VAR_321 [ 28 ] = METHOD_108 ( VAR_322 [ 12 ] , VAR_323 [ 28 ] ) ; VAR_324 [ 29 ] = METHOD_109 ( VAR_325 [ 13 ] , VAR_326 [ 29 ] ) ; VAR_327 [ 30 ] = METHOD_110 ( VAR_328 [ 14 ] , VAR_329 [ 30 ] ) ; VAR_330 [ 31 ] = METHOD_111 ( VAR_331 [ 15 ] , VAR_332 [ 31 ] ) ; VAR_333 [ 0 ] = METHOD_112 ( VAR_334 [ 0 ] , VAR_335 ) ; VAR_336 [ 1 ] = METHOD_113 ( VAR_337 [ 1 ] , VAR_338 ) ; VAR_339 [ 2 ] = METHOD_114 ( VAR_340 [ 2 ] , VAR_341 ) ; VAR_342 [ 3 ] = METHOD_115 ( VAR_343 [ 3 ] , VAR_344 ) ; VAR_345 [ 4 ] = METHOD_116 ( VAR_346 [ 4 ] , VAR_347 ) ; VAR_348 [ 5 ] = METHOD_117 ( VAR_349 [ 5 ] , VAR_350 ) ; VAR_351 [ 6 ] = METHOD_118 ( VAR_352 [ 6 ] , VAR_353 ) ; VAR_354 [ 7 ] = METHOD_119 ( VAR_355 [ 7 ] , VAR_356 ) ; VAR_357 [ 8 ] = METHOD_120 ( VAR_358 [ 8 ] , VAR_359 ) ; VAR_360 [ 9 ] = METHOD_121 ( VAR_361 [ 9 ] , VAR_362 ) ; VAR_363 [ 10 ] = METHOD_122 ( VAR_364 [ 10 ] , VAR_365 ) ; VAR_366 [ 11 ] = METHOD_123 ( VAR_367 [ 11 ] , VAR_368 ) ; VAR_369 [ 12 ] = METHOD_124 ( VAR_370 [ 12 ] , VAR_371 ) ; VAR_372 [ 13 ] = METHOD_125 ( VAR_373 [ 13 ] , VAR_374 ) ; VAR_375 [ 14 ] = METHOD_126 ( VAR_376 [ 14 ] , VAR_377 ) ; VAR_378 [ 15 ] = METHOD_127 ( VAR_379 [ 15 ] , VAR_380 ) ; VAR_381 [ 16 ] = METHOD_128 ( VAR_382 [ 16 ] , VAR_383 ) ; VAR_384 [ 17 ] = METHOD_129 ( VAR_385 [ 17 ] , VAR_386 ) ; VAR_387 [ 18 ] = METHOD_130 ( VAR_388 [ 18 ] , VAR_389 ) ; VAR_390 [ 19 ] = METHOD_131 ( VAR_391 [ 19 ] , VAR_392 ) ; VAR_393 [ 20 ] = METHOD_132 ( VAR_394 [ 20 ] , VAR_395 ) ; VAR_396 [ 21 ] = METHOD_133 ( VAR_397 [ 21 ] , VAR_398 ) ; VAR_399 [ 22 ] = METHOD_134 ( VAR_400 [ 22 ] , VAR_401 ) ; VAR_402 [ 23 ] = METHOD_135 ( VAR_403 [ 23 ] , VAR_404 ) ; VAR_405 [ 24 ] = METHOD_136 ( VAR_406 [ 24 ] , VAR_407 ) ; VAR_408 [ 25 ] = METHOD_137 ( VAR_409 [ 25 ] , VAR_410 ) ; VAR_411 [ 26 ] = METHOD_138 ( VAR_412 [ 26 ] , VAR_413 ) ; VAR_414 [ 27 ] = METHOD_139 ( VAR_415 [ 27 ] , VAR_416 ) ; VAR_417 [ 28 ] = METHOD_140 ( VAR_418 [ 28 ] , VAR_419 ) ; VAR_420 [ 29 ] = METHOD_141 ( VAR_421 [ 29 ] , VAR_422 ) ; VAR_423 [ 30 ] = METHOD_142 ( VAR_424 [ 30 ] , VAR_425 ) ; VAR_426 [ 31 ] = METHOD_143 ( VAR_427 [ 31 ] , VAR_428 ) ; VAR_429 [ 0 ] = METHOD_144 ( VAR_430 [ 0 ] , VAR_431 ) ; VAR_432 [ 1 ] = METHOD_145 ( VAR_433 [ 1 ] , VAR_434 ) ; VAR_435 [ 2 ] = METHOD_146 ( VAR_436 [ 2 ] , VAR_437 ) ; VAR_438 [ 3 ] = METHOD_147 ( VAR_439 [ 3 ] , VAR_440 ) ; VAR_441 [ 4 ] = METHOD_148 ( VAR_442 [ 4 ] , VAR_443 ) ; VAR_444 [ 5 ] = METHOD_149 ( VAR_445 [ 5 ] , VAR_446 ) ; VAR_447 [ 6 ] = METHOD_150 ( VAR_448 [ 6 ] , VAR_449 ) ; VAR_450 [ 7 ] = METHOD_151 ( VAR_451 [ 7 ] , VAR_452 ) ; VAR_453 [ 8 ] = METHOD_152 ( VAR_454 [ 8 ] , VAR_455 ) ; VAR_456 [ 9 ] = METHOD_153 ( VAR_457 [ 9 ] , VAR_458 ) ; VAR_459 [ 10 ] = METHOD_154 ( VAR_460 [ 10 ] , VAR_461 ) ; VAR_462 [ 11 ] = METHOD_155 ( VAR_463 [ 11 ] , VAR_464 ) ; VAR_465 [ 12 ] = METHOD_156 ( VAR_466 [ 12 ] , VAR_467 ) ; VAR_468 [ 13 ] = METHOD_157 ( VAR_469 [ 13 ] , VAR_470 ) ; VAR_471 [ 14 ] = METHOD_158 ( VAR_472 [ 14 ] , VAR_473 ) ; VAR_474 [ 15 ] = METHOD_159 ( VAR_475 [ 15 ] , VAR_476 ) ; VAR_477 [ 16 ] = METHOD_160 ( VAR_478 [ 16 ] , VAR_479 ) ; VAR_480 [ 17 ] = METHOD_161 ( VAR_481 [ 17 ] , VAR_482 ) ; VAR_483 [ 18 ] = METHOD_162 ( VAR_484 [ 18 ] , VAR_485 ) ; VAR_486 [ 19 ] = METHOD_163 ( VAR_487 [ 19 ] , VAR_488 ) ; VAR_489 [ 20 ] = METHOD_164 ( VAR_490 [ 20 ] , VAR_491 ) ; VAR_492 [ 21 ] = METHOD_165 ( VAR_493 [ 21 ] , VAR_494 ) ; VAR_495 [ 22 ] = METHOD_166 ( VAR_496 [ 22 ] , VAR_497 ) ; VAR_498 [ 23 ] = METHOD_167 ( VAR_499 [ 23 ] , VAR_500 ) ; VAR_501 [ 24 ] = METHOD_168 ( VAR_502 [ 24 ] , VAR_503 ) ; VAR_504 [ 25 ] = METHOD_169 ( VAR_505 [ 25 ] , VAR_506 ) ; VAR_507 [ 26 ] = METHOD_170 ( VAR_508 [ 26 ] , VAR_509 ) ; VAR_510 [ 27 ] = METHOD_171 ( VAR_511 [ 27 ] , VAR_512 ) ; VAR_513 [ 28 ] = METHOD_172 ( VAR_514 [ 28 ] , VAR_515 ) ; VAR_516 [ 29 ] = METHOD_173 ( VAR_517 [ 29 ] , VAR_518 ) ; VAR_519 [ 30 ] = METHOD_174 ( VAR_520 [ 30 ] , VAR_521 ) ; VAR_522 [ 31 ] = METHOD_175 ( VAR_523 [ 31 ] , VAR_524 ) ; VAR_525 [ 0 ] = METHOD_176 ( VAR_526 [ 0 ] , VAR_527 [ 1 ] ) ; VAR_528 [ 1 ] = METHOD_177 ( VAR_529 [ 2 ] , VAR_530 [ 3 ] ) ; VAR_531 [ 2 ] = METHOD_178 ( VAR_532 [ 4 ] , VAR_533 [ 5 ] ) ; VAR_534 [ 3 ] = METHOD_179 ( VAR_535 [ 6 ] , VAR_536 [ 7 ] ) ; VAR_537 [ 4 ] = METHOD_180 ( VAR_538 [ 8 ] , VAR_539 [ 9 ] ) ; VAR_540 [ 5 ] = METHOD_181 ( VAR_541 [ 10 ] , VAR_542 [ 11 ] ) ; VAR_543 [ 6 ] = METHOD_182 ( VAR_544 [ 12 ] , VAR_545 [ 13 ] ) ; VAR_546 [ 7 ] = METHOD_183 ( VAR_547 [ 14 ] , VAR_548 [ 15 ] ) ; VAR_549 [ 8 ] = METHOD_184 ( VAR_550 [ 16 ] , VAR_551 [ 17 ] ) ; VAR_552 [ 9 ] = METHOD_185 ( VAR_553 [ 18 ] , VAR_554 [ 19 ] ) ; VAR_555 [ 10 ] = METHOD_186 ( VAR_556 [ 20 ] , VAR_557 [ 21 ] ) ; VAR_558 [ 11 ] = METHOD_187 ( VAR_559 [ 22 ] , VAR_560 [ 23 ] ) ; VAR_561 [ 12 ] = METHOD_188 ( VAR_562 [ 24 ] , VAR_563 [ 25 ] ) ; VAR_564 [ 13 ] = METHOD_189 ( VAR_565 [ 26 ] , VAR_566 [ 27 ] ) ; VAR_567 [ 14 ] = METHOD_190 ( VAR_568 [ 28 ] , VAR_569 [ 29 ] ) ; VAR_570 [ 15 ] = METHOD_191 ( VAR_571 [ 30 ] , VAR_572 [ 31 ] ) ; VAR_573 [ 0 ] = METHOD_192 ( VAR_574 [ 8 ] , VAR_575 [ 9 ] ) ; VAR_576 [ 1 ] = METHOD_193 ( VAR_577 [ 8 ] , VAR_578 [ 9 ] ) ; VAR_579 [ 2 ] = METHOD_194 ( VAR_580 [ 10 ] , VAR_581 [ 11 ] ) ; VAR_582 [ 3 ] = METHOD_195 ( VAR_583 [ 10 ] , VAR_584 [ 11 ] ) ; VAR_585 [ 4 ] = METHOD_196 ( VAR_586 [ 12 ] , VAR_587 [ 13 ] ) ; VAR_588 [ 5 ] = METHOD_197 ( VAR_589 [ 12 ] , VAR_590 [ 13 ] ) ; VAR_591 [ 6 ] = METHOD_198 ( VAR_592 [ 14 ] , VAR_593 [ 15 ] ) ; VAR_594 [ 7 ] = METHOD_199 ( VAR_595 [ 14 ] , VAR_596 [ 15 ] ) ; VAR_597 [ 0 ] = METHOD_200 ( VAR_598 [ 0 ] , VAR_599 ) ; VAR_600 [ 1 ] = METHOD_201 ( VAR_601 [ 1 ] , VAR_602 ) ; VAR_603 [ 2 ] = METHOD_202 ( VAR_604 [ 0 ] , VAR_605 ) ; VAR_606 [ 3 ] = METHOD_203 ( VAR_607 [ 1 ] , VAR_608 ) ; VAR_609 [ 4 ] = METHOD_204 ( VAR_610 [ 2 ] , VAR_611 ) ; VAR_612 [ 5 ] = METHOD_205 ( VAR_613 [ 3 ] , VAR_614 ) ; VAR_615 [ 6 ] = METHOD_206 ( VAR_616 [ 2 ] , VAR_617 ) ; VAR_618 [ 7 ] = METHOD_207 ( VAR_619 [ 3 ] , VAR_620 ) ; VAR_621 [ 8 ] = METHOD_208 ( VAR_622 [ 4 ] , VAR_623 ) ; VAR_624 [ 9 ] = METHOD_209 ( VAR_625 [ 5 ] , VAR_626 ) ; VAR_627 [ 10 ] = METHOD_210 ( VAR_628 [ 4 ] , VAR_629 ) ; VAR_630 [ 11 ] = METHOD_211 ( VAR_631 [ 5 ] , VAR_632 ) ; VAR_633 [ 12 ] = METHOD_212 ( VAR_634 [ 6 ] , VAR_635 ) ; VAR_636 [ 13 ] = METHOD_213 ( VAR_637 [ 7 ] , VAR_638 ) ; VAR_639 [ 14 ] = METHOD_214 ( VAR_640 [ 6 ] , VAR_641 ) ; VAR_642 [ 15 ] = METHOD_215 ( VAR_643 [ 7 ] , VAR_644 ) ; VAR_645 [ 0 ] = METHOD_216 ( VAR_646 [ 0 ] , VAR_647 [ 8 ] ) ; VAR_648 [ 1 ] = METHOD_217 ( VAR_649 [ 1 ] , VAR_650 [ 9 ] ) ; VAR_651 [ 2 ] = METHOD_218 ( VAR_652 [ 2 ] , VAR_653 [ 10 ] ) ; VAR_654 [ 3 ] = METHOD_219 ( VAR_655 [ 3 ] , VAR_656 [ 11 ] ) ; VAR_657 [ 4 ] = METHOD_220 ( VAR_658 [ 4 ] , VAR_659 [ 12 ] ) ; VAR_660 [ 5 ] = METHOD_221 ( VAR_661 [ 5 ] , VAR_662 [ 13 ] ) ; VAR_663 [ 6 ] = METHOD_222 ( VAR_664 [ 6 ] , VAR_665 [ 14 ] ) ; VAR_666 [ 7 ] = METHOD_223 ( VAR_667 [ 7 ] , VAR_668 [ 15 ] ) ; VAR_669 [ 8 ] = METHOD_224 ( VAR_670 [ 0 ] , VAR_671 [ 8 ] ) ; VAR_672 [ 9 ] = METHOD_225 ( VAR_673 [ 1 ] , VAR_674 [ 9 ] ) ; VAR_675 [ 10 ] = METHOD_226 ( VAR_676 [ 2 ] , VAR_677 [ 10 ] ) ; VAR_678 [ 11 ] = METHOD_227 ( VAR_679 [ 3 ] , VAR_680 [ 11 ] ) ; VAR_681 [ 12 ] = METHOD_228 ( VAR_682 [ 4 ] , VAR_683 [ 12 ] ) ; VAR_684 [ 13 ] = METHOD_229 ( VAR_685 [ 5 ] , VAR_686 [ 13 ] ) ; VAR_687 [ 14 ] = METHOD_230 ( VAR_688 [ 6 ] , VAR_689 [ 14 ] ) ; VAR_690 [ 15 ] = METHOD_231 ( VAR_691 [ 7 ] , VAR_692 [ 15 ] ) ; VAR_693 [ 0 ] = METHOD_232 ( VAR_694 [ 0 ] , VAR_695 ) ; VAR_696 [ 1 ] = METHOD_233 ( VAR_697 [ 1 ] , VAR_698 ) ; VAR_699 [ 2 ] = METHOD_234 ( VAR_700 [ 2 ] , VAR_701 ) ; VAR_702 [ 3 ] = METHOD_235 ( VAR_703 [ 3 ] , VAR_704 ) ; VAR_705 [ 4 ] = METHOD_236 ( VAR_706 [ 4 ] , VAR_707 ) ; VAR_708 [ 5 ] = METHOD_237 ( VAR_709 [ 5 ] , VAR_710 ) ; VAR_711 [ 6 ] = METHOD_238 ( VAR_712 [ 6 ] , VAR_713 ) ; VAR_714 [ 7 ] = METHOD_239 ( VAR_715 [ 7 ] , VAR_716 ) ; VAR_717 [ 8 ] = METHOD_240 ( VAR_718 [ 8 ] , VAR_719 ) ; VAR_720 [ 9 ] = METHOD_241 ( VAR_721 [ 9 ] , VAR_722 ) ; VAR_723 [ 10 ] = METHOD_242 ( VAR_724 [ 10 ] , VAR_725 ) ; VAR_726 [ 11 ] = METHOD_243 ( VAR_727 [ 11 ] , VAR_728 ) ; VAR_729 [ 12 ] = METHOD_244 ( VAR_730 [ 12 ] , VAR_731 ) ; VAR_732 [ 13 ] = METHOD_245 ( VAR_733 [ 13 ] , VAR_734 ) ; VAR_735 [ 14 ] = METHOD_246 ( VAR_736 [ 14 ] , VAR_737 ) ; VAR_738 [ 15 ] = METHOD_247 ( VAR_739 [ 15 ] , VAR_740 ) ; VAR_741 [ 0 ] = METHOD_248 ( VAR_742 [ 0 ] , VAR_743 ) ; VAR_744 [ 1 ] = METHOD_249 ( VAR_745 [ 1 ] , VAR_746 ) ; VAR_747 [ 2 ] = METHOD_250 ( VAR_748 [ 2 ] , VAR_749 ) ; VAR_750 [ 3 ] = METHOD_251 ( VAR_751 [ 3 ] , VAR_752 ) ; VAR_753 [ 4 ] = METHOD_252 ( VAR_754 [ 4 ] , VAR_755 ) ; VAR_756 [ 5 ] = METHOD_253 ( VAR_757 [ 5 ] , VAR_758 ) ; VAR_759 [ 6 ] = METHOD_254 ( VAR_760 [ 6 ] , VAR_761 ) ; VAR_762 [ 7 ] = METHOD_255 ( VAR_763 [ 7 ] , VAR_764 ) ; VAR_765 [ 8 ] = METHOD_256 ( VAR_766 [ 8 ] , VAR_767 ) ; VAR_768 [ 9 ] = METHOD_257 ( VAR_769 [ 9 ] , VAR_770 ) ; VAR_771 [ 10 ] = METHOD_258 ( VAR_772 [ 10 ] , VAR_773 ) ; VAR_774 [ 11 ] = METHOD_259 ( VAR_775 [ 11 ] , VAR_776 ) ; VAR_777 [ 12 ] = METHOD_260 ( VAR_778 [ 12 ] , VAR_779 ) ; VAR_780 [ 13 ] = METHOD_261 ( VAR_781 [ 13 ] , VAR_782 ) ; VAR_783 [ 14 ] = METHOD_262 ( VAR_784 [ 14 ] , VAR_785 ) ; VAR_786 [ 15 ] = METHOD_263 ( VAR_787 [ 15 ] , VAR_788 ) ; VAR_789 [ 0 ] = METHOD_264 ( VAR_790 [ 0 ] , VAR_791 [ 4 ] ) ; VAR_792 [ 1 ] = METHOD_265 ( VAR_793 [ 1 ] , VAR_794 [ 5 ] ) ; VAR_795 [ 2 ] = METHOD_266 ( VAR_796 [ 2 ] , VAR_797 [ 6 ] ) ; VAR_798 [ 3 ] = METHOD_267 ( VAR_799 [ 3 ] , VAR_800 [ 7 ] ) ; VAR_801 [ 4 ] = METHOD_268 ( VAR_802 [ 0 ] , VAR_803 [ 4 ] ) ; VAR_804 [ 5 ] = METHOD_269 ( VAR_805 [ 1 ] , VAR_806 [ 5 ] ) ; VAR_807 [ 6 ] = METHOD_270 ( VAR_808 [ 2 ] , VAR_809 [ 6 ] ) ; VAR_810 [ 7 ] = METHOD_271 ( VAR_811 [ 3 ] , VAR_812 [ 7 ] ) ; VAR_813 [ 8 ] = METHOD_272 ( VAR_814 [ 0 ] , VAR_815 [ 1 ] ) ; VAR_816 [ 9 ] = METHOD_273 ( VAR_817 [ 2 ] , VAR_818 [ 3 ] ) ; VAR_819 [ 10 ] = METHOD_274 ( VAR_820 [ 4 ] , VAR_821 [ 5 ] ) ; VAR_822 [ 11 ] = METHOD_275 ( VAR_823 [ 6 ] , VAR_824 [ 7 ] ) ; VAR_825 [ 12 ] = METHOD_276 ( VAR_826 [ 8 ] , VAR_827 [ 9 ] ) ; VAR_828 [ 13 ] = METHOD_277 ( VAR_829 [ 10 ] , VAR_830 [ 11 ] ) ; VAR_831 [ 14 ] = METHOD_278 ( VAR_832 [ 12 ] , VAR_833 [ 13 ] ) ; VAR_834 [ 15 ] = METHOD_279 ( VAR_835 [ 14 ] , VAR_836 [ 15 ] ) ; VAR_837 [ 0 ] = METHOD_280 ( VAR_838 [ 4 ] , VAR_839 [ 5 ] ) ; VAR_840 [ 1 ] = METHOD_281 ( VAR_841 [ 4 ] , VAR_842 [ 5 ] ) ; VAR_843 [ 2 ] = METHOD_282 ( VAR_844 [ 6 ] , VAR_845 [ 7 ] ) ; VAR_846 [ 3 ] = METHOD_283 ( VAR_847 [ 6 ] , VAR_848 [ 7 ] ) ; VAR_849 [ 4 ] = METHOD_284 ( VAR_850 [ 12 ] , VAR_851 [ 13 ] ) ; VAR_852 [ 5 ] = METHOD_285 ( VAR_853 [ 12 ] , VAR_854 [ 13 ] ) ; VAR_855 [ 6 ] = METHOD_286 ( VAR_856 [ 14 ] , VAR_857 [ 15 ] ) ; VAR_858 [ 7 ] = METHOD_287 ( VAR_859 [ 14 ] , VAR_860 [ 15 ] ) ; VAR_861 [ 0 ] = METHOD_288 ( VAR_862 [ 0 ] , VAR_863 ) ; VAR_864 [ 1 ] = METHOD_289 ( VAR_865 [ 1 ] , VAR_866 ) ; VAR_867 [ 2 ] = METHOD_290 ( VAR_868 [ 0 ] , VAR_869 ) ; VAR_870 [ 3 ] = METHOD_291 ( VAR_871 [ 1 ] , VAR_872 ) ; VAR_873 [ 4 ] = METHOD_292 ( VAR_874 [ 2 ] , VAR_875 ) ; VAR_876 [ 5 ] = METHOD_293 ( VAR_877 [ 3 ] , VAR_878 ) ; VAR_879 [ 6 ] = METHOD_294 ( VAR_880 [ 2 ] , VAR_881 ) ; VAR_882 [ 7 ] = METHOD_295 ( VAR_883 [ 3 ] , VAR_884 ) ; VAR_885 [ 8 ] = METHOD_296 ( VAR_886 [ 4 ] , VAR_887 ) ; VAR_888 [ 9 ] = METHOD_297 ( VAR_889 [ 5 ] , VAR_890 ) ; VAR_891 [ 10 ] = METHOD_298 ( VAR_892 [ 4 ] , VAR_893 ) ; VAR_894 [ 11 ] = METHOD_299 ( VAR_895 [ 5 ] , VAR_896 ) ; VAR_897 [ 12 ] = METHOD_300 ( VAR_898 [ 6 ] , VAR_899 ) ; VAR_900 [ 13 ] = METHOD_301 ( VAR_901 [ 7 ] , VAR_902 ) ; VAR_903 [ 14 ] = METHOD_302 ( VAR_904 [ 6 ] , VAR_905 ) ; VAR_906 [ 15 ] = METHOD_303 ( VAR_907 [ 7 ] , VAR_908 ) ; VAR_909 [ 0 ] = METHOD_304 ( VAR_910 [ 0 ] , VAR_911 [ 4 ] ) ; VAR_912 [ 1 ] = METHOD_305 ( VAR_913 [ 1 ] , VAR_914 [ 5 ] ) ; VAR_915 [ 2 ] = METHOD_306 ( VAR_916 [ 2 ] , VAR_917 [ 6 ] ) ; VAR_918 [ 3 ] = METHOD_307 ( VAR_919 [ 3 ] , VAR_920 [ 7 ] ) ; VAR_921 [ 4 ] = METHOD_308 ( VAR_922 [ 0 ] , VAR_923 [ 4 ] ) ; VAR_924 [ 5 ] = METHOD_309 ( VAR_925 [ 1 ] , VAR_926 [ 5 ] ) ; VAR_927 [ 6 ] = METHOD_310 ( VAR_928 [ 2 ] , VAR_929 [ 6 ] ) ; VAR_930 [ 7 ] = METHOD_311 ( VAR_931 [ 3 ] , VAR_932 [ 7 ] ) ; VAR_933 [ 8 ] = METHOD_312 ( VAR_934 [ 8 ] , VAR_935 [ 12 ] ) ; VAR_936 [ 9 ] = METHOD_313 ( VAR_937 [ 9 ] , VAR_938 [ 13 ] ) ; VAR_939 [ 10 ] = METHOD_314 ( VAR_940 [ 10 ] , VAR_941 [ 14 ] ) ; VAR_942 [ 11 ] = METHOD_315 ( VAR_943 [ 11 ] , VAR_944 [ 15 ] ) ; VAR_945 [ 12 ] = METHOD_316 ( VAR_946 [ 8 ] , VAR_947 [ 12 ] ) ; VAR_948 [ 13 ] = METHOD_317 ( VAR_949 [ 9 ] , VAR_950 [ 13 ] ) ; VAR_951 [ 14 ] = METHOD_318 ( VAR_952 [ 10 ] , VAR_953 [ 14 ] ) ; VAR_954 [ 15 ] = METHOD_319 ( VAR_955 [ 11 ] , VAR_956 [ 15 ] ) ; VAR_957 [ 0 ] = METHOD_320 ( VAR_958 [ 0 ] , VAR_959 ) ; VAR_960 [ 1 ] = METHOD_321 ( VAR_961 [ 1 ] , VAR_962 ) ; VAR_963 [ 2 ] = METHOD_322 ( VAR_964 [ 2 ] , VAR_965 ) ; VAR_966 [ 3 ] = METHOD_323 ( VAR_967 [ 3 ] , VAR_968 ) ; VAR_969 [ 4 ] = METHOD_324 ( VAR_970 [ 4 ] , VAR_971 ) ; VAR_972 [ 5 ] = METHOD_325 ( VAR_973 [ 5 ] , VAR_974 ) ; VAR_975 [ 6 ] = METHOD_326 ( VAR_976 [ 6 ] , VAR_977 ) ; VAR_978 [ 7 ] = METHOD_327 ( VAR_979 [ 7 ] , VAR_980 ) ; VAR_981 [ 8 ] = METHOD_328 ( VAR_982 [ 8 ] , VAR_983 ) ; VAR_984 [ 9 ] = METHOD_329 ( VAR_985 [ 9 ] , VAR_986 ) ; VAR_987 [ 10 ] = METHOD_330 ( VAR_988 [ 10 ] , VAR_989 ) ; VAR_990 [ 11 ] = METHOD_331 ( VAR_991 [ 11 ] , VAR_992 ) ; VAR_993 [ 12 ] = METHOD_332 ( VAR_994 [ 12 ] , VAR_995 ) ; VAR_996 [ 13 ] = METHOD_333 ( VAR_997 [ 13 ] , VAR_998 ) ; VAR_999 [ 14 ] = METHOD_334 ( VAR_1000 [ 14 ] , VAR_1001 ) ; VAR_1002 [ 15 ] = METHOD_335 ( VAR_1003 [ 15 ] , VAR_1004 ) ; VAR_1005 [ 0 ] = METHOD_336 ( VAR_1006 [ 0 ] , VAR_1007 ) ; VAR_1008 [ 1 ] = METHOD_337 ( VAR_1009 [ 1 ] , VAR_1010 ) ; VAR_1011 [ 2 ] = METHOD_338 ( VAR_1012 [ 2 ] , VAR_1013 ) ; VAR_1014 [ 3 ] = METHOD_339 ( VAR_1015 [ 3 ] , VAR_1016 ) ; VAR_1017 [ 4 ] = METHOD_340 ( VAR_1018 [ 4 ] , VAR_1019 ) ; VAR_1020 [ 5 ] = METHOD_341 ( VAR_1021 [ 5 ] , VAR_1022 ) ; VAR_1023 [ 6 ] = METHOD_342 ( VAR_1024 [ 6 ] , VAR_1025 ) ; VAR_1026 [ 7 ] = METHOD_343 ( VAR_1027 [ 7 ] , VAR_1028 ) ; VAR_1029 [ 8 ] = METHOD_344 ( VAR_1030 [ 8 ] , VAR_1031 ) ; VAR_1032 [ 9 ] = METHOD_345 ( VAR_1033 [ 9 ] , VAR_1034 ) ; VAR_1035 [ 10 ] = METHOD_346 ( VAR_1036 [ 10 ] , VAR_1037 ) ; VAR_1038 [ 11 ] = METHOD_347 ( VAR_1039 [ 11 ] , VAR_1040 ) ; VAR_1041 [ 12 ] = METHOD_348 ( VAR_1042 [ 12 ] , VAR_1043 ) ; VAR_1044 [ 13 ] = METHOD_349 ( VAR_1045 [ 13 ] , VAR_1046 ) ; VAR_1047 [ 14 ] = METHOD_350 ( VAR_1048 [ 14 ] , VAR_1049 ) ; VAR_1050 [ 15 ] = METHOD_351 ( VAR_1051 [ 15 ] , VAR_1052 ) ; VAR_1053 [ 0 ] = METHOD_352 ( VAR_1054 [ 0 ] , VAR_1055 [ 2 ] ) ; VAR_1056 [ 1 ] = METHOD_353 ( VAR_1057 [ 1 ] , VAR_1058 [ 3 ] ) ; VAR_1059 [ 2 ] = METHOD_354 ( VAR_1060 [ 0 ] , VAR_1061 [ 2 ] ) ; VAR_1062 [ 3 ] = METHOD_355 ( VAR_1063 [ 1 ] , VAR_1064 [ 3 ] ) ; VAR_1065 [ 4 ] = METHOD_356 ( VAR_1066 [ 0 ] , VAR_1067 [ 1 ] ) ; VAR_1068 [ 5 ] = METHOD_357 ( VAR_1069 [ 2 ] , VAR_1070 [ 3 ] ) ; VAR_1071 [ 6 ] = METHOD_358 ( VAR_1072 [ 4 ] , VAR_1073 [ 5 ] ) ; VAR_1074 [ 7 ] = METHOD_359 ( VAR_1075 [ 6 ] , VAR_1076 [ 7 ] ) ; VAR_1077 [ 8 ] = METHOD_360 ( VAR_1078 [ 8 ] , VAR_1079 [ 10 ] ) ; VAR_1080 [ 9 ] = METHOD_361 ( VAR_1081 [ 9 ] , VAR_1082 [ 11 ] ) ; VAR_1083 [ 10 ] = METHOD_362 ( VAR_1084 [ 8 ] , VAR_1085 [ 10 ] ) ; VAR_1086 [ 11 ] = METHOD_363 ( VAR_1087 [ 9 ] , VAR_1088 [ 11 ] ) ; VAR_1089 [ 12 ] = METHOD_364 ( VAR_1090 [ 8 ] , VAR_1091 [ 9 ] ) ; VAR_1092 [ 13 ] = METHOD_365 ( VAR_1093 [ 10 ] , VAR_1094 [ 11 ] ) ; VAR_1095 [ 14 ] = METHOD_366 ( VAR_1096 [ 12 ] , VAR_1097 [ 13 ] ) ; VAR_1098 [ 15 ] = METHOD_367 ( VAR_1099 [ 14 ] , VAR_1100 [ 15 ] ) ; VAR_1101 [ 0 ] = METHOD_368 ( VAR_1102 [ 2 ] , VAR_1103 [ 3 ] ) ; VAR_1104 [ 1 ] = METHOD_369 ( VAR_1105 [ 2 ] , VAR_1106 [ 3 ] ) ; VAR_1107 [ 2 ] = METHOD_370 ( VAR_1108 [ 6 ] , VAR_1109 [ 7 ] ) ; VAR_1110 [ 3 ] = METHOD_371 ( VAR_1111 [ 6 ] , VAR_1112 [ 7 ] ) ; VAR_1113 [ 4 ] = METHOD_372 ( VAR_1114 [ 10 ] , VAR_1115 [ 11 ] ) ; VAR_1116 [ 5 ] = METHOD_373 ( VAR_1117 [ 10 ] , VAR_1118 [ 11 ] ) ; VAR_1119 [ 6 ] = METHOD_374 ( VAR_1120 [ 14 ] , VAR_1121 [ 15 ] ) ; VAR_1122 [ 7 ] = METHOD_375 ( VAR_1123 [ 14 ] , VAR_1124 [ 15 ] ) ; VAR_1125 [ 0 ] = METHOD_376 ( VAR_1126 [ 0 ] , VAR_1127 ) ; VAR_1128 [ 1 ] = METHOD_377 ( VAR_1129 [ 1 ] , VAR_1130 ) ; VAR_1131 [ 2 ] = METHOD_378 ( VAR_1132 [ 0 ] , VAR_1133 ) ; VAR_1134 [ 3 ] = METHOD_379 ( VAR_1135 [ 1 ] , VAR_1136 ) ; VAR_1137 [ 4 ] = METHOD_380 ( VAR_1138 [ 2 ] , VAR_1139 ) ; VAR_1140 [ 5 ] = METHOD_381 ( VAR_1141 [ 3 ] , VAR_1142 ) ; VAR_1143 [ 6 ] = METHOD_382 ( VAR_1144 [ 2 ] , VAR_1145 ) ; VAR_1146 [ 7 ] = METHOD_383 ( VAR_1147 [ 3 ] , VAR_1148 ) ; VAR_1149 [ 8 ] = METHOD_384 ( VAR_1150 [ 4 ] , VAR_1151 ) ; VAR_1152 [ 9 ] = METHOD_385 ( VAR_1153 [ 5 ] , VAR_1154 ) ; VAR_1155 [ 10 ] = METHOD_386 ( VAR_1156 [ 4 ] , VAR_1157 ) ; VAR_1158 [ 11 ] = METHOD_387 ( VAR_1159 [ 5 ] , VAR_1160 ) ; VAR_1161 [ 12 ] = METHOD_388 ( VAR_1162 [ 6 ] , VAR_1163 ) ; VAR_1164 [ 13 ] = METHOD_389 ( VAR_1165 [ 7 ] , VAR_1166 ) ; VAR_1167 [ 14 ] = METHOD_390 ( VAR_1168 [ 6 ] , VAR_1169 ) ; VAR_1170 [ 15 ] = METHOD_391 ( VAR_1171 [ 7 ] , VAR_1172 ) ; VAR_1173 [ 0 ] = METHOD_392 ( VAR_1174 [ 0 ] , VAR_1175 ) ; VAR_1176 [ 1 ] = METHOD_393 ( VAR_1177 [ 1 ] , VAR_1178 ) ; VAR_1179 [ 2 ] = METHOD_394 ( VAR_1180 [ 2 ] , VAR_1181 ) ; VAR_1182 [ 3 ] = METHOD_395 ( VAR_1183 [ 3 ] , VAR_1184 ) ; VAR_1185 [ 4 ] = METHOD_396 ( VAR_1186 [ 4 ] , VAR_1187 ) ; VAR_1188 [ 5 ] = METHOD_397 ( VAR_1189 [ 5 ] , VAR_1190 ) ; VAR_1191 [ 6 ] = METHOD_398 ( VAR_1192 [ 6 ] , VAR_1193 ) ; VAR_1194 [ 7 ] = METHOD_399 ( VAR_1195 [ 7 ] , VAR_1196 ) ; VAR_1197 [ 8 ] = METHOD_400 ( VAR_1198 [ 8 ] , VAR_1199 ) ; VAR_1200 [ 9 ] = METHOD_401 ( VAR_1201 [ 9 ] , VAR_1202 ) ; VAR_1203 [ 10 ] = METHOD_402 ( VAR_1204 [ 10 ] , VAR_1205 ) ; VAR_1206 [ 11 ] = METHOD_403 ( VAR_1207 [ 11 ] , VAR_1208 ) ; VAR_1209 [ 12 ] = METHOD_404 ( VAR_1210 [ 12 ] , VAR_1211 ) ; VAR_1212 [ 13 ] = METHOD_405 ( VAR_1213 [ 13 ] , VAR_1214 ) ; VAR_1215 [ 14 ] = METHOD_406 ( VAR_1216 [ 14 ] , VAR_1217 ) ; VAR_1218 [ 15 ] = METHOD_407 ( VAR_1219 [ 15 ] , VAR_1220 ) ; VAR_1221 [ 0 ] = METHOD_408 ( VAR_1222 [ 0 ] , VAR_1223 ) ; VAR_1224 [ 1 ] = METHOD_409 ( VAR_1225 [ 1 ] , VAR_1226 ) ; VAR_1227 [ 2 ] = METHOD_410 ( VAR_1228 [ 2 ] , VAR_1229 ) ; VAR_1230 [ 3 ] = METHOD_411 ( VAR_1231 [ 3 ] , VAR_1232 ) ; VAR_1233 [ 4 ] = METHOD_412 ( VAR_1234 [ 4 ] , VAR_1235 ) ; VAR_1236 [ 5 ] = METHOD_413 ( VAR_1237 [ 5 ] , VAR_1238 ) ; VAR_1239 [ 6 ] = METHOD_414 ( VAR_1240 [ 6 ] , VAR_1241 ) ; VAR_1242 [ 7 ] = METHOD_415 ( VAR_1243 [ 7 ] , VAR_1244 ) ; VAR_1245 [ 8 ] = METHOD_416 ( VAR_1246 [ 8 ] , VAR_1247 ) ; VAR_1248 [ 9 ] = METHOD_417 ( VAR_1249 [ 9 ] , VAR_1250 ) ; VAR_1251 [ 10 ] = METHOD_418 ( VAR_1252 [ 10 ] , VAR_1253 ) ; VAR_1254 [ 11 ] = METHOD_419 ( VAR_1255 [ 11 ] , VAR_1256 ) ; VAR_1257 [ 12 ] = METHOD_420 ( VAR_1258 [ 12 ] , VAR_1259 ) ; VAR_1260 [ 13 ] = METHOD_421 ( VAR_1261 [ 13 ] , VAR_1262 ) ; VAR_1263 [ 14 ] = METHOD_422 ( VAR_1264 [ 14 ] , VAR_1265 ) ; VAR_1266 [ 15 ] = METHOD_423 ( VAR_1267 [ 15 ] , VAR_1268 ) ; VAR_1269 [ 0 ] = VAR_1270 [ 0 ] ; VAR_1271 [ 1 ] = METHOD_424 ( VAR_1272 , VAR_1273 [ 8 ] ) ; VAR_1274 [ 2 ] = VAR_1275 [ 12 ] ; VAR_1276 [ 3 ] = METHOD_425 ( VAR_1277 , VAR_1278 [ 4 ] ) ; VAR_1279 [ 4 ] = METHOD_426 ( VAR_1280 [ 4 ] , VAR_1281 [ 5 ] ) ; VAR_1282 [ 5 ] = METHOD_427 ( VAR_1283 [ 12 ] , VAR_1284 [ 13 ] ) ; VAR_1285 [ 6 ] = METHOD_428 ( VAR_1286 [ 8 ] , VAR_1287 [ 9 ] ) ; VAR_1288 [ 7 ] = METHOD_429 ( VAR_1289 [ 0 ] , VAR_1290 [ 1 ] ) ; VAR_1291 [ 8 ] = METHOD_430 ( VAR_1292 [ 2 ] , VAR_1293 [ 3 ] ) ; VAR_1294 [ 9 ] = METHOD_431 ( VAR_1295 [ 10 ] , VAR_1296 [ 11 ] ) ; VAR_1297 [ 10 ] = METHOD_432 ( VAR_1298 [ 14 ] , VAR_1299 [ 15 ] ) ; VAR_1300 [ 11 ] = METHOD_433 ( VAR_1301 [ 6 ] , VAR_1302 [ 7 ] ) ; VAR_1303 [ 12 ] = VAR_1304 [ 5 ] ; VAR_1305 [ 13 ] = METHOD_434 ( VAR_1306 , VAR_1307 [ 13 ] ) ; VAR_1308 [ 14 ] = VAR_1309 [ 9 ] ; VAR_1310 [ 15 ] = METHOD_435 ( VAR_1311 , VAR_1312 [ 1 ] ) ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) {   TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_3 -> VAR_4 *  ( TYPE_5 ) VAR_5 -> VAR_6 ) / 100 ; if ( VAR_7 < 0 ) VAR_8 = 0 ; else if ( VAR_9 > VAR_10 -> VAR_11 ) VAR_12 = VAR_13 -> VAR_14 ; return ( TYPE_6 ) VAR_15 ; }
static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 [ VAR_2 ] ;  TYPE_3 VAR_3 [ 4096 ] ; TYPE_4 * VAR_4 ; TYPE_5 VAR_5 ; VAR_6 * VAR_7 ; TYPE_6 VAR_8 ; VAR_9 = 0 ; VAR_10 = 0 ; if ( METHOD_1 ( VAR_11 , VAR_12 , VAR_13 ) != VAR_14 ) { goto VAR_15 ; } if ( VAR_16 [ 0 ] != ( VAR_17 >> 24 ) || VAR_18 [ 1 ] != ( ( VAR_19 >> 16 ) & 0xff ) || VAR_20 [ 2 ] != ( ( VAR_21 >> 8 ) & 0xff ) || VAR_22 [ 3 ] != ( VAR_23 & 0xff ) ) { METHOD_2 ( "error:badsignature\\n" ) ; goto VAR_24 ; } if ( ! ( VAR_25 = METHOD_3 ( 0 ) ) ) { goto VAR_26 ; } VAR_27 = VAR_28 ; do { if ( ! METHOD_4 ( VAR_29 , VAR_30 , sizeof ( VAR_31 ) ) ) { METHOD_5 ( "mif_getlinefailed\\n" ) ; goto VAR_32 ; } if ( VAR_33 [ 0 ] == '\\0' ) { continue ; } METHOD_6 ( 10 , ( "headerline:len=%d;%s\\n" , METHOD_7 ( VAR_34 ) , VAR_35 ) ) ; if ( ! ( VAR_36 = METHOD_8 ( VAR_37 ) ) ) { METHOD_9 ( "jas_tvparser_createfailed\\n" ) ; goto VAR_38 ; } if ( METHOD_10 ( VAR_39 ) ) { METHOD_11 ( "cannotgetrecordtype\\n" ) ; goto VAR_40 ; } VAR_41 = METHOD_12 ( METHOD_13 ( VAR_42 , METHOD_14 ( VAR_43 ) ) ) -> VAR_44 ; METHOD_15 ( VAR_45 ) ; VAR_46 = 0 ; switch ( VAR_47 ) { case VAR_48 : if ( METHOD_16 ( VAR_49 , VAR_50 ) ) { METHOD_17 ( "cannotgetcomponentinformation\\n" ) ; goto VAR_51 ; } break ; case VAR_52 : VAR_53 = 1 ; break ; default : METHOD_18 ( "invalidheaderinformation:%s\\n" , VAR_54 ) ; goto VAR_55 ; break ; } } while ( ! VAR_56 ) ; return VAR_57 ; VAR_58 : if ( VAR_59 ) { METHOD_19 ( VAR_60 ) ; } if ( VAR_61 ) { METHOD_20 ( VAR_62 ) ; } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) {  TYPE_4 VAR_3 ; if ( VAR_4 -> VAR_5 [ VAR_6 ] == VAR_7 ) {  METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ;  for ( VAR_11 = 7 ; VAR_12 >= 0 ; VAR_13 -- ) { METHOD_2 ( ( TYPE_5 ) ( ( VAR_14 >> VAR_15 ) & 0x1 ) , VAR_16 ) ; } } else {  METHOD_3 ( VAR_17 -> VAR_18 [ VAR_19 ] , VAR_20 , VAR_21 ) ;  } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 * VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 = & VAR_6 -> VAR_7 ; unsigned TYPE_4 * VAR_8 = VAR_9 ; TYPE_5 VAR_10 ; TYPE_6 VAR_11 , VAR_12 ; TYPE_7 VAR_13 , VAR_14 , VAR_15 ; struct STRUCT_OR_UNION_3 * VAR_16 ; unsigned TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; struct STRUCT_OR_UNION_4 * VAR_19 ; TYPE_10 VAR_20 , VAR_21 ; TYPE_11 VAR_22 [ VAR_23 ] , VAR_24 [ VAR_25 ] ; unsigned VAR_26 = 0 ; METHOD_1 ( & VAR_27 -> VAR_28 , VAR_29 , VAR_30 ) ; if ( VAR_31 -> VAR_32 . VAR_33 != VAR_34 || VAR_35 -> VAR_36 . VAR_37 < VAR_38 || VAR_39 -> VAR_40 . VAR_41 > VAR_42 ) { METHOD_2 ( VAR_43 , "invaliddescriptorforconfigindex%d:" "type=0x%X,length=%d\\n" , VAR_44 , VAR_45 -> VAR_46 . VAR_47 , VAR_48 -> VAR_49 . VAR_50 ) ; return - VAR_51 ; } VAR_52 = VAR_53 -> VAR_54 . VAR_55 ; VAR_56 += VAR_57 -> VAR_58 . VAR_59 ; VAR_60 -= VAR_61 -> VAR_62 . VAR_63 ; VAR_64 = VAR_65 = VAR_66 -> VAR_67 . VAR_68 ; if ( VAR_69 > VAR_70 ) { METHOD_3 ( VAR_71 , "config%dhastoomanyinterfaces:%d," "usingmaximumallowed:%d\\n" , VAR_72 , VAR_73 , VAR_74 ) ; VAR_75 = VAR_76 ; } VAR_77 = 0 ; for ( ( VAR_78 = VAR_79 , VAR_80 = VAR_81 ) ; VAR_82 > 0 ; ( VAR_83 += VAR_84 -> VAR_85 , VAR_86 -= VAR_87 -> VAR_88 ) ) { if ( VAR_89 < sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_4 ( VAR_90 , "config%ddescriptorhas%dexcess" "byte%s,ignoring\\n" , VAR_91 , VAR_92 , METHOD_5 ( VAR_93 ) ) ; break ; } VAR_94 = ( struct STRUCT_OR_UNION_6 * ) VAR_95 ; if ( ( VAR_96 -> VAR_97 > VAR_98 ) || ( VAR_99 -> VAR_100 < 2 ) ) { METHOD_6 ( VAR_101 , "config%dhasaninvaliddescriptor" "oflength%d,skippingremainderoftheconfig\\n" , VAR_102 , VAR_103 -> VAR_104 ) ; break ; } if ( VAR_105 -> VAR_106 == VAR_107 ) { struct STRUCT_OR_UNION_7 * VAR_108 ; TYPE_12 VAR_109 ; VAR_110 = ( struct STRUCT_OR_UNION_8 * ) VAR_111 ; if ( VAR_112 -> VAR_113 < VAR_114 ) { METHOD_7 ( VAR_115 , "config%dhasaninvalid" "interfacedescriptoroflength%d," "skipping\\n" , VAR_116 , VAR_117 -> VAR_118 ) ; continue ; } VAR_119 = VAR_120 -> VAR_121 ; if ( ( VAR_122 -> VAR_123 & VAR_124 ) && VAR_125 >= VAR_126 ) { METHOD_8 ( VAR_127 , "config%dhasmoreinterface" "descriptors,thanitdeclaresin" "bNumInterfaces,ignoringinterface" "number:%d\\n" , VAR_128 , VAR_129 ) ; continue ; } if ( VAR_130 >= VAR_131 ) METHOD_9 ( VAR_132 , "config%dhasaninvalid" "interfacenumber:%dbutmaxis%d\\n" , VAR_133 , VAR_134 , VAR_135 - 1 ) ; for ( VAR_136 = 0 ; VAR_137 < VAR_138 ; ++ VAR_139 ) { if ( VAR_140 [ VAR_141 ] == VAR_142 ) break ; } if ( VAR_143 < VAR_144 ) { if ( VAR_145 [ VAR_146 ] < 255 ) ++ VAR_147 [ VAR_148 ] ; } else if ( VAR_149 < VAR_150 ) { VAR_151 [ VAR_152 ] = VAR_153 ; VAR_154 [ VAR_155 ] = 1 ; ++ VAR_156 ; } } else if ( VAR_157 -> VAR_158 == VAR_159 ) {  if ( VAR_160 == VAR_161 ) {  METHOD_10 ( VAR_162 , "foundmoreInterface" "AssociationDescriptors" "thanallocatedforin" "configuration%d\\n" , VAR_163 ) ; } else { VAR_164 -> VAR_165 [ VAR_166 ] =  ( struct STRUCT_OR_UNION_9  * ) VAR_167 ; VAR_168 ++ ; } } else if ( VAR_169 -> VAR_170 == VAR_171 || VAR_172 -> VAR_173 == VAR_174 ) METHOD_11 ( VAR_175 , "config%dcontainsanunexpected" "descriptoroftype0x%X,skipping\\n" , VAR_176 , VAR_177 -> VAR_178 ) ; } VAR_179 = VAR_180 - VAR_181 ; VAR_182 -> VAR_183 . VAR_184 = METHOD_12 ( VAR_185 - VAR_186 ) ; if ( VAR_187 != VAR_188 ) METHOD_13 ( VAR_189 , "config%dhas%dinterface%s,differentfrom" "thedescriptor\'svalue:%d\\n" , VAR_190 , VAR_191 , METHOD_14 ( VAR_192 ) , VAR_193 ) ; else if ( VAR_194 == 0 ) METHOD_15 ( VAR_195 , "config%dhasnointerfaces?\\n" , VAR_196 ) ; VAR_197 -> VAR_198 . VAR_199 = VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < VAR_204 ; ++ VAR_205 ) { for ( VAR_206 = 0 ; VAR_207 < VAR_208 ; ++ VAR_209 ) { if ( VAR_210 [ VAR_211 ] == VAR_212 ) break ; } if ( VAR_213 >= VAR_214 ) METHOD_16 ( VAR_215 , "config%dhasnointerfacenumber" "%d\\n" , VAR_216 , VAR_217 ) ; } for ( VAR_218 = 0 ; VAR_219 < VAR_220 ; ++ VAR_221 ) { VAR_222 = VAR_223 [ VAR_224 ] ; if ( VAR_225 > VAR_226 ) { METHOD_17 ( VAR_227 , "toomanyalternatesettingsfor" "config%dinterface%d:%d," "usingmaximumallowed:%d\\n" , VAR_228 , VAR_229 [ VAR_230 ] , VAR_231 , VAR_232 ) ; VAR_233 [ VAR_234 ] = VAR_235 = VAR_236 ; } VAR_237 = sizeof ( * VAR_238 ) + sizeof ( struct STRUCT_OR_UNION_10 ) * VAR_239 ; VAR_240 -> VAR_241 [ VAR_242 ] = VAR_243 = METHOD_18 ( VAR_244 , VAR_245 ) ; if ( ! VAR_246 ) return - VAR_247 ; METHOD_19 ( & VAR_248 -> VAR_249 ) ; } VAR_250 -> VAR_251 = VAR_252 ; VAR_253 = METHOD_20 ( VAR_254 , VAR_255 , VAR_256 , VAR_257 , & VAR_258 ) ; VAR_259 -> VAR_260 = VAR_261 ; if ( VAR_262 > 0 ) METHOD_21 ( VAR_263 , "skipped%ddescriptor%safter%s\\n" , VAR_264 , METHOD_22 ( VAR_265 ) , "configuration" ) ; VAR_266 += VAR_267 ; VAR_268 -= VAR_269 ; while ( VAR_270 > 0 ) { VAR_271 = METHOD_23 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 , VAR_276 , VAR_277 , VAR_278 ) ; if ( VAR_279 < 0 ) return VAR_280 ; VAR_281 += VAR_282 ; VAR_283 -= VAR_284 ; } for ( VAR_285 = 0 ; VAR_286 < VAR_287 ; ++ VAR_288 ) { VAR_289 = VAR_290 -> VAR_291 [ VAR_292 ] ; for ( VAR_293 = 0 ; VAR_294 < VAR_295 -> VAR_296 ; ++ VAR_297 ) { for ( VAR_298 = 0 ; VAR_299 < VAR_300 -> VAR_301 ; ++ VAR_302 ) { if ( VAR_303 -> VAR_304 [ VAR_305 ] . VAR_306 . VAR_307 == VAR_308 ) break ; } if ( VAR_309 >= VAR_310 -> VAR_311 ) METHOD_24 ( VAR_312 , "config%dinterface%dhasno" "altsetting%d\\n" , VAR_313 , VAR_314 [ VAR_315 ] , VAR_316 ) ; } } return 0 ; }
static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) {  TYPE_4 VAR_3 ;  unsigned TYPE_5 VAR_4 [ 8 ] ;  struct STRUCT_OR_UNION_0 * VAR_5 ;  struct STRUCT_OR_UNION_1 VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ;  VAR_11 = METHOD_2 ( "ecb(des)" , 0 , VAR_12 ) ;  if ( METHOD_3 ( VAR_13 ) ) {  VAR_14 = METHOD_4 ( VAR_15 ) ;  METHOD_5 ( VAR_16 , "couldnotallocatedescryptoAPI\\n" ) ;  goto VAR_17 ;  } VAR_18 = METHOD_6 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) { VAR_22 = - VAR_23 ; METHOD_7 ( VAR_24 , "couldnotallocatedescryptoAPI\\n" ) ; goto VAR_25 ; } METHOD_8 ( VAR_26 , VAR_27 , 8 ) ;  METHOD_9 ( & VAR_28 , VAR_29 , 8 ) ;  METHOD_10 ( & VAR_30 , VAR_31 , 8 ) ; METHOD_11 ( VAR_32 , 0 , VAR_33 , VAR_34 ) ; METHOD_12 ( VAR_35 , & VAR_36 , & VAR_37 , 8 , VAR_38 ) ; VAR_39 = METHOD_13 ( VAR_40 ) ; if ( VAR_41 ) METHOD_14 ( VAR_42 , "couldnotencryptcryptkeyrc:%d\\n" , VAR_43 ) ; METHOD_15 ( VAR_44 ) ; VAR_45 : METHOD_16 ( VAR_46 ) ;  VAR_47 :  return VAR_48 ; }
static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 VAR_2 )  { if ( VAR_3 -> VAR_4 < METHOD_1 ( VAR_5 -> VAR_6 ) - 4 )   { VAR_7 -> VAR_8 [ VAR_9 -> VAR_10 ++ ] = ( VAR_11 >> 24 ) ;   VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = ( VAR_16 >> 16 ) ;   VAR_17 -> VAR_18 [ VAR_19 -> VAR_20 ++ ] = ( VAR_21 >> 8 ) ;   VAR_22 -> VAR_23 [ VAR_24 -> VAR_25 ++ ] = VAR_26 ;   } ;  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) {  TYPE_7 VAR_6 ;   TYPE_8 VAR_7 , VAR_8 , VAR_9 , VAR_10 ;  TYPE_9 VAR_11 [ 65 ] ; if ( VAR_12 -> VAR_13 ) VAR_14 = METHOD_1 ( VAR_15 ) ;  VAR_16 = VAR_17 = 0 ;  while ( 1 ) {  if ( METHOD_2 ( VAR_18 ) < VAR_19 + 1 ) {  METHOD_3 ( VAR_20 -> VAR_21 , VAR_22 , "Invaliduvlccodeat" "%s:bitstreamended.\\n" , VAR_23 ) ; return VAR_24 ; }  if ( METHOD_4 ( VAR_25 ) ) {  VAR_26 [ VAR_27 ++ ] = '1' ;  break ;  } else { VAR_28 [ VAR_29 ++ ] = '0' ; ++ VAR_30 ; } } if ( VAR_31 >= 32 ) { VAR_32 = METHOD_5 ( 32 ) ; } else { VAR_33 = METHOD_6 ( VAR_34 , VAR_35 ) ; for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ )  VAR_40 [ VAR_41 ++ ] = ( VAR_42 >> ( VAR_43 - VAR_44 - 1 ) & 1 ) ? '1' : '0' ;   VAR_45 += ( 1 << VAR_46 ) - 1 ;  } if ( VAR_47 -> VAR_48 ) { VAR_49 [ VAR_50 ] = 0 ; METHOD_7 ( VAR_51 , VAR_52 , VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; } if ( VAR_57 < VAR_58 || VAR_59 > VAR_60 ) { METHOD_8 ( VAR_61 -> VAR_62 , VAR_63 , "%soutofrange:" "%" PRIu32 ",butmustbein[%" PRIu32 ",%" PRIu32 "].\\n" , VAR_64 , VAR_65 , VAR_66 , VAR_67 ) ; return VAR_68 ; } * VAR_69 = VAR_70 ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; TYPE_3 VAR_6 = VAR_7 -> VAR_8 ; TYPE_4 VAR_9 ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 ; VAR_13 ++ , VAR_14 ++ ) { if ( METHOD_1 ( VAR_15 -> VAR_16 ) != VAR_17 || METHOD_2 ( VAR_18 -> VAR_19 ) == VAR_20 || METHOD_3 ( VAR_21 -> VAR_22 ) == VAR_23 ) continue ; if ( VAR_24 < VAR_25 && VAR_26 + VAR_27 -> VAR_28 + 1 > VAR_29 ) VAR_30 -> VAR_31 += VAR_32 ;  else if ( VAR_33 > VAR_34 && VAR_35 + VAR_36 -> VAR_37 + 1 < VAR_38 )  VAR_39 -> VAR_40 -= VAR_41 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_3 ( VAR_5 ) ; TYPE_2 VAR_6 = VAR_7 -> VAR_8 ; METHOD_4 ( METHOD_5 ( VAR_9 ) , VAR_10 , METHOD_6 ( VAR_11 ) , VAR_12 -> VAR_13 , VAR_14 , METHOD_7 ( VAR_15 ) , VAR_16 ) ; if ( VAR_17 -> VAR_18 . VAR_19 ) return 0 ; if ( METHOD_8 ( VAR_20 -> VAR_21 ) ) { METHOD_9 ( "%sfailedvmentry%x\\n" , VAR_22 , METHOD_10 ( VAR_23 ) ) ; return 1 ; } switch ( VAR_24 ) { case VAR_25 : if ( ! METHOD_11 ( VAR_26 ) ) return 0 ; else if ( METHOD_12 ( VAR_27 ) ) return VAR_28 ; else if ( METHOD_13 ( VAR_29 ) && ! ( STRUCT_OR_UNION_4 -> VAR_30 & VAR_31 ) ) return 0 ; return STRUCT_OR_UNION_5 -> VAR_32 & ( 1u << ( VAR_33 & VAR_34 ) ) ; case VAR_35 : return 0 ; case VAR_36 : return 1 ; case VAR_37 : return METHOD_14 ( STRUCT_OR_UNION_6 , VAR_38 ) ; case VAR_39 : return METHOD_15 ( STRUCT_OR_UNION_7 , VAR_40 ) ; case VAR_41 : return 1 ; case VAR_42 : if ( METHOD_16 ( VAR_43 , VAR_44 ) == 0xa ) return 0 ; return 1 ; case VAR_45 : return METHOD_17 ( STRUCT_OR_UNION_8 , VAR_46 ) ; case VAR_47 : return 1 ; case VAR_48 : return METHOD_18 ( STRUCT_OR_UNION_9 , VAR_49 ) ; case VAR_50 : return METHOD_19 ( STRUCT_OR_UNION_10 , VAR_51 ) ; case VAR_52 : return METHOD_20 ( STRUCT_OR_UNION_11 , VAR_53 ) ; case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : case VAR_59 : case VAR_60 : case VAR_61 : case VAR_62 : case VAR_63 :  case VAR_64 :  return 1 ; case VAR_65 : return METHOD_21 ( VAR_66 , STRUCT_OR_UNION_12 ) ; case VAR_67 : return METHOD_22 ( STRUCT_OR_UNION_13 , VAR_68 ) ; case VAR_69 : return METHOD_23 ( VAR_70 , STRUCT_OR_UNION_14 ) ; case VAR_71 : case VAR_72 : return METHOD_24 ( VAR_73 , STRUCT_OR_UNION_15 , VAR_74 ) ; case VAR_75 : return 1 ; case VAR_76 : return METHOD_25 ( STRUCT_OR_UNION_16 , VAR_77 ) ; case VAR_78 : return METHOD_26 ( STRUCT_OR_UNION_17 , VAR_79 ) ; case VAR_80 : return METHOD_27 ( STRUCT_OR_UNION_18 , VAR_81 ) || METHOD_28 ( STRUCT_OR_UNION_19 , VAR_82 ) ; case VAR_83 : return 0 ; case VAR_84 : return METHOD_29 ( STRUCT_OR_UNION_20 , VAR_85 ) ; case VAR_86 : return METHOD_30 ( STRUCT_OR_UNION_21 , VAR_87 ) ; case VAR_88 : return 0 ; case VAR_89 : return 0 ; case VAR_90 : return METHOD_31 ( STRUCT_OR_UNION_22 , VAR_91 ) ; case VAR_92 : return 1 ; default : return 1 ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 -> VAR_2 = 0 , VAR_3 -> VAR_4 = 0 , VAR_5 -> VAR_6 . VAR_7 = VAR_8 , VAR_9 -> VAR_10 . VAR_11 = 0 , VAR_12 -> VAR_13 . VAR_14 = VAR_15 , VAR_16 -> VAR_17 . VAR_18 = 0 , VAR_19 -> VAR_20 . VAR_21 = VAR_22 , VAR_23 -> VAR_24 . VAR_25 = 0 , VAR_26 -> VAR_27 . VAR_28 = VAR_29 , VAR_30 -> VAR_31 . VAR_32 = 0 , VAR_33 -> VAR_34 . VAR_35 = VAR_36 , VAR_37 -> VAR_38 . VAR_39 = 0 , VAR_40 -> VAR_41 . VAR_42 = VAR_43 , VAR_44 -> VAR_45 . VAR_46 = 0 , VAR_47 -> VAR_48 . VAR_49 = VAR_50 , VAR_51 -> VAR_52 . VAR_53 = 0 , VAR_54 -> VAR_55 . VAR_56 = VAR_57 , VAR_58 -> VAR_59 . VAR_60 = 0 ,  VAR_61 -> VAR_62 . VAR_63 = VAR_64 , VAR_65 -> VAR_66 . VAR_67 = 0 , VAR_68 -> VAR_69 . VAR_70 = VAR_71 ,  VAR_72 -> VAR_73 . VAR_74 = 0 , VAR_75 -> VAR_76 . VAR_77 = 0 , VAR_78 -> VAR_79 . VAR_80 = VAR_81 , VAR_82 -> VAR_83 . VAR_84 = VAR_85 , VAR_86 -> VAR_87 . VAR_88 = 0 , VAR_89 -> VAR_90 . VAR_91 = VAR_92 , VAR_93 -> VAR_94 . VAR_95 = 0 , VAR_96 -> VAR_97 . VAR_98 = VAR_99 , VAR_100 -> VAR_101 . VAR_102 = 0 , VAR_103 -> VAR_104 . VAR_105 = VAR_106 , VAR_107 -> VAR_108 . VAR_109 = 0 , VAR_110 -> VAR_111 = 0 ; }
static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = STRUCT_OR_UNION_5 -> VAR_1 ; TYPE_1 VAR_2 = - VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 ) ; if ( ! METHOD_2 ( STRUCT_OR_UNION_6 ) ) goto VAR_6 ; VAR_7 = METHOD_3 ( STRUCT_OR_UNION_7 ) -> VAR_8 . METHOD_4 ( STRUCT_OR_UNION_8 , & VAR_9 -> VAR_10 ) ;  VAR_11 -> VAR_12 = VAR_13 ;  VAR_14 : return METHOD_5 ( VAR_15 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = ( TYPE_4 ) METHOD_1 ( METHOD_2 ( ( TYPE_5 ) METHOD_3 ( ( TYPE_6 ) VAR_3 ) / VAR_4 ) ) ; if ( ( TYPE_7 ) METHOD_4 ( METHOD_5 ( ( TYPE_8 ) VAR_5 + 1 , VAR_6 ) ) <= VAR_7 ) ++ VAR_8 ;  METHOD_6 ( METHOD_7 ( ( TYPE_9 ) VAR_9 + 1 , VAR_10 ) > VAR_11 ) ;   METHOD_8 ( ( TYPE_10 ) METHOD_9 ( METHOD_10 ( ( TYPE_11 ) VAR_12 , VAR_13 ) ) <= VAR_14 ) ;  return VAR_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; register TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 , VAR_9 ; unsigned TYPE_9 VAR_10 ; unsigned TYPE_10 VAR_11 , VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < ( TYPE_11 ) VAR_15 -> VAR_16 ; VAR_17 += 4 ) { for ( VAR_18 = 0 ; VAR_19 < ( TYPE_12 ) VAR_20 -> VAR_21 ; VAR_22 += 4 ) {  VAR_23 = METHOD_1 ( VAR_24 , VAR_25 , VAR_26 , METHOD_2 ( 4 , VAR_27 -> VAR_28 - VAR_29 ) ,   METHOD_3 ( 4 , VAR_30 -> VAR_31 - VAR_32 ) , VAR_33 ) ;  if ( VAR_34 == ( TYPE_13 * ) VAR_35 ) return VAR_36 ; VAR_37 = METHOD_4 ( VAR_38 ) ; VAR_39 = METHOD_5 ( VAR_40 ) ; VAR_41 = METHOD_6 ( VAR_42 ) ; METHOD_7 ( VAR_43 , VAR_44 , & VAR_45 , VAR_46 ) ; for ( VAR_47 = 0 ; VAR_48 < 4 ; VAR_49 ++ ) { for ( VAR_50 = 0 ; VAR_51 < 4 ; VAR_52 ++ ) { if ( ( VAR_53 + VAR_54 ) < ( TYPE_14 ) VAR_55 -> VAR_56 && ( VAR_57 + VAR_58 ) < ( TYPE_15 ) VAR_59 -> VAR_60 ) { VAR_61 = ( unsigned TYPE_16 ) ( ( VAR_62 >> ( ( VAR_63 * 4 + VAR_64 ) * 2 ) ) & 0x3 ) ; METHOD_8 ( VAR_65 , METHOD_9 ( VAR_66 . VAR_67 [ VAR_68 ] ) ) ; METHOD_10 ( VAR_69 , METHOD_11 ( VAR_70 . VAR_71 [ VAR_72 ] ) ) ; METHOD_12 ( VAR_73 , METHOD_13 ( VAR_74 . VAR_75 [ VAR_76 ] ) ) ; METHOD_14 ( VAR_77 , METHOD_15 ( VAR_78 . VAR_79 [ VAR_80 ] ) ) ; if ( VAR_81 . VAR_82 [ VAR_83 ] && VAR_84 -> VAR_85 == VAR_86 ) VAR_87 -> VAR_88 = VAR_89 ; VAR_90 ++ ; } } } if ( METHOD_16 ( VAR_91 , VAR_92 ) == VAR_93 ) return VAR_94 ; } }  METHOD_17 ( VAR_95 , VAR_96 , 8 ) ;  return VAR_97 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * * VAR_2 , TYPE_4 * * * VAR_3 TSRMLS_DC ) { TYPE_5 * * VAR_4 , * * VAR_5 ; TYPE_6 VAR_6 = METHOD_1 ( 0 ) ; if 0 { TYPE_7 VAR_7 ; METHOD_2 ( & VAR_8 , VAR_9 ) ; METHOD_3 ( VAR_10 , "params=" ) ; zend_print_zval_r ( & VAR_11 , 1 TSRMLS_CC ) ; METHOD_4 ( VAR_12 , "\\n" ) ; } VAR_13 . VAR_14 = METHOD_5 ( METHOD_6 ( VAR_15 ) , & VAR_16 . VAR_17 , & VAR_18 . VAR_19 , & VAR_20 . VAR_21 , VAR_22 . VAR_23 , VAR_24 ) ; if ( ( VAR_25 . VAR_26 == VAR_27 && ! METHOD_7 ( VAR_28 , VAR_29 . VAR_30 , VAR_31 . VAR_32 ) ) || ( VAR_33 . VAR_34 == VAR_35 && ! METHOD_8 ( VAR_36 , VAR_37 . VAR_38 ) ) ) { TYPE_8 * VAR_39 , * VAR_40 , * * VAR_41 ; METHOD_9 ( METHOD_10 ( VAR_42 ) , ( TYPE_9 * ) & VAR_43 ) ; METHOD_11 ( VAR_44 ) ; METHOD_12 ( VAR_45 ) ; METHOD_13 ( VAR_46 ) ; METHOD_14 ( VAR_47 , METHOD_15 ( "value" ) , * VAR_48 ) ; METHOD_16 ( VAR_49 ) ; METHOD_17 ( VAR_50 ) ; METHOD_18 ( METHOD_19 ( VAR_51 ) , "arguments" , sizeof ( "arguments" ) , ( TYPE_10 * ) & VAR_52 , sizeof ( TYPE_11 * ) , ( TYPE_12 * ) & VAR_53 ) ; * VAR_54 = VAR_55 ; if ( VAR_56 . VAR_57 == VAR_58 ) { METHOD_20 ( VAR_59 , VAR_60 . VAR_61 , VAR_62 . VAR_63 , ( TYPE_13 * ) & VAR_64 , sizeof ( TYPE_14 * ) , ( TYPE_15 * ) & VAR_65 ) ; } else { METHOD_21 ( VAR_66 , VAR_67 . VAR_68 , ( TYPE_16 * ) & VAR_69 , sizeof ( TYPE_17 * ) , ( TYPE_18 * ) & VAR_70 ) ; } } else { if ( VAR_71 . VAR_72 == VAR_73 ) { METHOD_22 ( VAR_74 , VAR_75 . VAR_76 , VAR_77 . VAR_78 , ( TYPE_19 * ) & VAR_79 ) ; } else { METHOD_23 ( VAR_80 , VAR_81 . VAR_82 , ( TYPE_20 * ) & VAR_83 ) ; } VAR_84 = & VAR_85 ; if ( METHOD_24 ( VAR_86 ) == VAR_87 && VAR_88 == METHOD_25 ( METHOD_26 ( VAR_89 ) , "value" , sizeof ( "value" ) , ( TYPE_21 * ) & VAR_90 ) && VAR_91 == METHOD_27 ( METHOD_28 ( VAR_92 ) , ( TYPE_22 * ) & VAR_93 ) ) { TYPE_23 * * VAR_94 ; while ( METHOD_29 ( VAR_95 ) == VAR_96 && VAR_97 == METHOD_30 ( METHOD_31 ( VAR_98 ) , ( TYPE_24 * ) & VAR_99 ) ) {  if ( METHOD_32 ( VAR_100 ) == VAR_101 ) {  if ( VAR_102 == METHOD_33 ( METHOD_34 ( VAR_103 ) , & VAR_104 . VAR_105 , & VAR_106 . VAR_107 , & VAR_108 . VAR_109 , VAR_110 . VAR_111 , VAR_112 ) ) { if ( VAR_113 == METHOD_35 ( METHOD_36 ( VAR_114 ) , VAR_115 . VAR_116 , VAR_117 . VAR_118 , ( TYPE_25 * ) & VAR_119 ) ) { VAR_120 = VAR_121 ; } else { METHOD_37 ( VAR_122 ) ; METHOD_38 ( METHOD_39 ( VAR_123 ) , VAR_124 . VAR_125 , VAR_126 . VAR_127 , ( TYPE_26 * ) VAR_128 , sizeof ( TYPE_27 * ) , ( TYPE_28 * ) & VAR_129 ) ; break ; } } else { if ( VAR_130 == METHOD_40 ( METHOD_41 ( VAR_131 ) , VAR_132 . VAR_133 , ( TYPE_29 * ) & VAR_134 ) ) { VAR_135 = VAR_136 ; } else if ( VAR_137 . VAR_138 ) { METHOD_42 ( VAR_139 ) ; METHOD_43 ( METHOD_44 ( VAR_140 ) , VAR_141 . VAR_142 , ( TYPE_30 * ) VAR_143 , sizeof ( TYPE_31 * ) , ( TYPE_32 * ) & VAR_144 ) ; break ; } else { METHOD_45 ( VAR_145 ) ; METHOD_46 ( METHOD_47 ( VAR_146 ) , ( TYPE_33 * ) VAR_147 , sizeof ( TYPE_34 * ) , ( TYPE_35 * ) & VAR_148 ) ; break ; } } } else { METHOD_48 ( VAR_149 ) ; if ( METHOD_49 ( VAR_150 ) != VAR_151 ) { METHOD_50 ( * VAR_152 ) ; METHOD_51 ( * VAR_153 ) ; } if ( VAR_154 == METHOD_52 ( METHOD_53 ( VAR_155 ) , & VAR_156 . VAR_157 , & VAR_158 . VAR_159 , & VAR_160 . VAR_161 , VAR_162 . VAR_163 , VAR_164 ) ) { METHOD_54 ( METHOD_55 ( VAR_165 ) , VAR_166 . VAR_167 , VAR_168 . VAR_169 , ( TYPE_36 * ) VAR_170 , sizeof ( TYPE_37 * ) , ( TYPE_38 * ) & VAR_171 ) ; } else if ( VAR_172 . VAR_173 ) { METHOD_56 ( METHOD_57 ( VAR_174 ) , VAR_175 . VAR_176 , ( TYPE_39 * ) VAR_177 , sizeof ( TYPE_40 * ) , ( TYPE_41 * ) & VAR_178 ) ; } else { METHOD_58 ( METHOD_59 ( VAR_179 ) , ( TYPE_42 * ) VAR_180 , sizeof ( TYPE_43 * ) , ( TYPE_44 * ) & VAR_181 ) ; } break ; } } } } while ( METHOD_60 ( VAR_182 ) == VAR_183 && VAR_184 == METHOD_61 ( METHOD_62 ( VAR_185 ) , ( TYPE_45 * ) & VAR_186 ) ) ; * VAR_187 = VAR_188 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) {  TYPE_3 VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ;  if ( VAR_9 < 0 ) { METHOD_2 ( "ackfailed(%s)" , METHOD_3 ( VAR_10 ) ) ; if ( VAR_11 == VAR_12 ) {  VAR_13 = METHOD_4 ( VAR_14 -> VAR_15 , VAR_16 , VAR_17 , VAR_18 ) ;  if ( VAR_19 < 0 ) { METHOD_5 ( "ackfailed(%s)" , METHOD_6 ( VAR_20 ) ) ; METHOD_7 ( VAR_21 -> VAR_22 ) ; VAR_23 -> VAR_24 = VAR_25 ; return - 1 ; } } else { METHOD_8 ( VAR_26 -> VAR_27 ) ; VAR_28 -> VAR_29 = VAR_30 ; return - 1 ; } } return VAR_31 ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 )  {  VAR_3 += METHOD_1 ( VAR_4 , "%12.3f0m%12.3f%12.3f%12.3f%12.3f0%12.3fc\\n" , - VAR_5 , - VAR_6 , VAR_7 * VAR_8 , - VAR_9 * VAR_10 , VAR_11 , VAR_12 ) ; VAR_13 += METHOD_2 ( VAR_14 , "%12.3f%12.3f%12.3f%12.3f%12.3f0c\\n" , VAR_15 * VAR_16 , VAR_17 , VAR_18 , VAR_19 * VAR_20 , VAR_21 ) ; VAR_22 += METHOD_3 ( VAR_23 , "%12.3f%12.3f%12.3f%12.3f0%12.3fc\\n" , VAR_24 , - VAR_25 * VAR_26 , VAR_27 * VAR_28 , - VAR_29 , - VAR_30 ) ; VAR_31 += METHOD_4 ( VAR_32 , "%12.3f%12.3f%12.3f%12.3f%12.3f0c%s\\n" , - VAR_33 * VAR_34 , - VAR_35 , - VAR_36 , - VAR_37 * VAR_38 , - VAR_39 , VAR_40 ) ;  }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 ; TYPE_1 VAR_6 ; VAR_7 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_8 ) ; if ( ! VAR_9 ) return - VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = METHOD_4 ( VAR_16 -> VAR_17 ) ; VAR_18 -> VAR_19 = METHOD_5 ( VAR_20 -> VAR_21 ) ; VAR_22 -> VAR_23 = METHOD_6 ( VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_7 ( VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 = METHOD_8 ( VAR_32 -> VAR_33 ) ; VAR_34 -> VAR_35 = METHOD_9 ( VAR_36 -> VAR_37 ) ; VAR_38 -> VAR_39 = METHOD_10 ( VAR_40 -> VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 * VAR_46 / 100 ; if ( VAR_47 -> VAR_48 > VAR_49 ) VAR_50 -> VAR_51 = VAR_52 ; if ( ! METHOD_11 ( VAR_53 , VAR_54 ) ) VAR_55 -> VAR_56 = 1 << VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; VAR_67 -> VAR_68 = VAR_69 ; METHOD_12 ( & VAR_70 -> VAR_71 ) ;  if ( METHOD_13 ( VAR_72 , VAR_73 ) && ! METHOD_14 ( VAR_74 -> VAR_75 ) ) {  VAR_76 = METHOD_15 ( VAR_77 ) ; if ( VAR_78 ) return VAR_79 ; } VAR_80 = METHOD_16 ( VAR_81 ) ; if ( VAR_82 ) return VAR_83 ; VAR_84 = METHOD_17 ( VAR_85 ) ; if ( VAR_86 ) return VAR_87 ; VAR_88 = METHOD_18 ( VAR_89 ) ; if ( VAR_90 ) return VAR_91 ; VAR_92 = METHOD_19 ( VAR_93 ) ; if ( VAR_94 ) return VAR_95 ; METHOD_20 ( VAR_96 ) ; METHOD_21 ( VAR_97 ) ; VAR_98 = METHOD_22 ( VAR_99 ) ; if ( VAR_100 ) return VAR_101 ; METHOD_23 ( VAR_102 ) ; return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 ; TYPE_13 VAR_27 , VAR_28 ; TYPE_14 VAR_29 ; unsigned TYPE_15 * VAR_30 , * VAR_31 ; METHOD_1 ( VAR_32 != ( const TYPE_16 * ) VAR_33 ) ; METHOD_2 ( VAR_34 -> VAR_35 == VAR_36 ) ; if ( VAR_37 -> VAR_38 != VAR_39 ) ( TYPE_17 ) METHOD_3 ( VAR_40 , METHOD_4 ( ) , "%s" , VAR_41 -> VAR_42 ) ; METHOD_5 ( VAR_43 != ( TYPE_18 * ) VAR_44 ) ; METHOD_6 ( VAR_45 -> VAR_46 == VAR_47 ) ; VAR_48 = METHOD_7 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_9 ( VAR_59 ) ; return ( ( TYPE_19 * ) VAR_60 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_61 , 0 , sizeof ( VAR_62 ) ) ; VAR_63 . VAR_64 = METHOD_11 ( VAR_65 ) ; do { if ( VAR_66 . VAR_67 != 0x59a66a95 ) METHOD_12 ( VAR_68 , "ImproperImageHeader" ) ; VAR_69 . VAR_70 = METHOD_13 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_14 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_15 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_16 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_17 ( VAR_83 ) ; VAR_84 . VAR_85 = METHOD_18 ( VAR_86 ) ; VAR_87 . VAR_88 = METHOD_19 ( VAR_89 ) ; VAR_90 = VAR_91 . VAR_92 * VAR_93 . VAR_94 ; if ( ( VAR_95 . VAR_96 != 0 ) && ( VAR_97 . VAR_98 != VAR_99 / VAR_100 . VAR_101 ) ) METHOD_20 ( VAR_102 , "ImproperImageHeader" ) ; if ( ( VAR_103 . VAR_104 != VAR_105 ) && ( VAR_106 . VAR_107 != VAR_108 ) && ( VAR_109 . VAR_110 != VAR_111 ) ) METHOD_21 ( VAR_112 , "ImproperImageHeader" ) ; if ( ( VAR_113 . VAR_114 == VAR_115 ) && ( VAR_116 . VAR_117 != 0 ) ) METHOD_22 ( VAR_118 , "ImproperImageHeader" ) ; if ( ( VAR_119 . VAR_120 == 0 ) || ( VAR_121 . VAR_122 > 32 ) ) METHOD_23 ( VAR_123 , "ImproperImageHeader" ) ; if ( ( VAR_124 . VAR_125 != VAR_126 ) && ( VAR_127 . VAR_128 != VAR_129 ) && ( VAR_130 . VAR_131 != VAR_132 ) ) METHOD_24 ( VAR_133 , "ColormapTypeNotSupported" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = VAR_144 . VAR_145 <= 8 ? VAR_146 . VAR_147 : VAR_148 ; if ( VAR_149 . VAR_150 < 24 ) { TYPE_21 VAR_151 ; VAR_152 -> VAR_153 = VAR_154 . VAR_155 ; VAR_156 = 1 ; if ( VAR_157 . VAR_158 == VAR_159 ) VAR_160 -> VAR_161 = VAR_162 << VAR_163 . VAR_164 ; if ( VAR_165 . VAR_166 == VAR_167 ) VAR_168 -> VAR_169 = VAR_170 . VAR_171 / 3 ; if ( METHOD_25 ( VAR_172 , VAR_173 -> VAR_174 , VAR_175 ) == VAR_176 ) METHOD_26 ( VAR_177 , "MemoryAllocationFailed" ) ; } switch ( VAR_178 . VAR_179 ) { case VAR_180 : break ; case VAR_181 : { unsigned TYPE_22 * VAR_182 ; VAR_183 = ( unsigned TYPE_23 * ) METHOD_27 ( VAR_184 -> VAR_185 , sizeof ( * VAR_186 ) ) ; if ( VAR_187 == ( unsigned TYPE_24 * ) VAR_188 ) METHOD_28 ( VAR_189 , "MemoryAllocationFailed" ) ; VAR_190 = METHOD_29 ( VAR_191 , VAR_192 -> VAR_193 , VAR_194 ) ; if ( VAR_195 != ( TYPE_25 ) VAR_196 -> VAR_197 ) METHOD_30 ( VAR_198 , "UnexpectedEndOfFile" ) ; for ( VAR_199 = 0 ; VAR_200 < ( TYPE_26 ) VAR_201 -> VAR_202 ; VAR_203 ++ ) VAR_204 -> VAR_205 [ VAR_206 ] . VAR_207 = ( TYPE_27 ) METHOD_31 ( VAR_208 [ VAR_209 ] ) ; VAR_210 = METHOD_32 ( VAR_211 , VAR_212 -> VAR_213 , VAR_214 ) ; if ( VAR_215 != ( TYPE_28 ) VAR_216 -> VAR_217 ) METHOD_33 ( VAR_218 , "UnexpectedEndOfFile" ) ; for ( VAR_219 = 0 ; VAR_220 < ( TYPE_29 ) VAR_221 -> VAR_222 ; VAR_223 ++ ) VAR_224 -> VAR_225 [ VAR_226 ] . VAR_227 = ( TYPE_30 ) METHOD_34 ( VAR_228 [ VAR_229 ] ) ; VAR_230 = METHOD_35 ( VAR_231 , VAR_232 -> VAR_233 , VAR_234 ) ; if ( VAR_235 != ( TYPE_31 ) VAR_236 -> VAR_237 ) METHOD_36 ( VAR_238 , "UnexpectedEndOfFile" ) ; for ( VAR_239 = 0 ; VAR_240 < ( TYPE_32 ) VAR_241 -> VAR_242 ; VAR_243 ++ ) VAR_244 -> VAR_245 [ VAR_246 ] . VAR_247 = ( TYPE_33 ) METHOD_37 ( VAR_248 [ VAR_249 ] ) ; VAR_250 = ( unsigned TYPE_34 * ) METHOD_38 ( VAR_251 ) ; break ; } case VAR_252 : { unsigned TYPE_35 * VAR_253 ; VAR_254 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_255 . VAR_256 , sizeof ( * VAR_257 ) ) ; if ( VAR_258 == ( unsigned TYPE_37 * ) VAR_259 ) METHOD_40 ( VAR_260 , "MemoryAllocationFailed" ) ; VAR_261 = METHOD_41 ( VAR_262 , VAR_263 . VAR_264 , VAR_265 ) ; if ( VAR_266 != ( TYPE_38 ) VAR_267 . VAR_268 ) METHOD_42 ( VAR_269 , "UnexpectedEndOfFile" ) ; VAR_270 = ( unsigned TYPE_39 * ) METHOD_43 ( VAR_271 ) ; break ; } default : METHOD_44 ( VAR_272 , "ColormapTypeNotSupported" ) ; } VAR_273 -> VAR_274 = VAR_275 . VAR_276 == 32 ? VAR_277 : VAR_278 ; VAR_279 -> VAR_280 = VAR_281 . VAR_282 ; VAR_283 -> VAR_284 = VAR_285 . VAR_286 ; if ( VAR_287 -> VAR_288 != VAR_289 ) { ( TYPE_40 ) METHOD_45 ( VAR_290 ) ; return ( METHOD_46 ( VAR_291 ) ) ; } VAR_292 = METHOD_47 ( VAR_293 , VAR_294 -> VAR_295 , VAR_296 -> VAR_297 , VAR_298 ) ; if ( VAR_299 == VAR_300 ) return ( METHOD_48 ( VAR_301 ) ) ; if ( ( VAR_302 . VAR_303 * sizeof ( * VAR_304 ) ) / sizeof ( * VAR_305 ) != VAR_306 . VAR_307 || ! VAR_308 . VAR_309 ) METHOD_49 ( VAR_310 , "MemoryAllocationFailed" ) ; VAR_311 = ( TYPE_41 ) VAR_312 -> VAR_313 * VAR_314 -> VAR_315 ;  if ( ( VAR_316 . VAR_317 != VAR_318 ) && ( VAR_319 . VAR_320 >= 8 ) &&   ( ( VAR_321 * ( ( VAR_322 . VAR_323 + 7 ) / 8 ) ) > VAR_324 . VAR_325 ) )  METHOD_50 ( VAR_326 , "ImproperImageHeader" ) ; VAR_327 = VAR_328 . VAR_329 * VAR_330 . VAR_331 ; VAR_332 = ( unsigned TYPE_42 * ) METHOD_51 ( ( TYPE_43 ) METHOD_52 ( VAR_333 . VAR_334 , VAR_335 * VAR_336 . VAR_337 ) , sizeof ( * VAR_338 ) ) ; if ( VAR_339 == ( unsigned TYPE_44 * ) VAR_340 ) METHOD_53 ( VAR_341 , "MemoryAllocationFailed" ) ; VAR_342 = ( TYPE_45 ) METHOD_54 ( VAR_343 , VAR_344 . VAR_345 , VAR_346 ) ; if ( VAR_347 != ( TYPE_46 ) VAR_348 . VAR_349 ) METHOD_55 ( VAR_350 , "UnableToReadImageData" ) ; VAR_351 = VAR_352 ; VAR_353 = 0 ; if ( VAR_354 . VAR_355 == VAR_356 ) { TYPE_47 VAR_357 ; VAR_358 = VAR_359 . VAR_360 ; if ( ( VAR_361 == 0 ) || ( VAR_362 . VAR_363 == 0 ) || ( VAR_364 . VAR_365 == 0 ) || ( ( VAR_366 / VAR_367 . VAR_368 ) != VAR_369 . VAR_370 ) ) METHOD_56 ( VAR_371 , "MemoryAllocationFailed" ) ; VAR_372 += 15 ; VAR_373 <<= 1 ; if ( ( VAR_374 >> 1 ) != ( VAR_375 . VAR_376 * VAR_377 . VAR_378 + 15 ) ) METHOD_57 ( VAR_379 , "MemoryAllocationFailed" ) ; VAR_380 >>= 4 ; VAR_381 = ( unsigned TYPE_48 * ) METHOD_58 ( VAR_382 , VAR_383 * sizeof ( * VAR_384 ) ) ; if ( VAR_385 == ( unsigned TYPE_49 * ) VAR_386 ) METHOD_59 ( VAR_387 , "MemoryAllocationFailed" ) ; ( TYPE_50 ) METHOD_60 ( VAR_388 , VAR_389 . VAR_390 , VAR_391 , VAR_392 * VAR_393 ) ; VAR_394 = ( unsigned TYPE_51 * ) METHOD_61 ( VAR_395 ) ; } VAR_396 = VAR_397 ; if ( VAR_398 . VAR_399 == 1 ) for ( VAR_400 = 0 ; VAR_401 < ( TYPE_52 ) VAR_402 -> VAR_403 ; VAR_404 ++ ) { VAR_405 = METHOD_62 ( VAR_406 , 0 , VAR_407 , VAR_408 -> VAR_409 , 1 , VAR_410 ) ; if ( VAR_411 == ( TYPE_53 * ) VAR_412 ) break ; for ( VAR_413 = 0 ; VAR_414 < ( ( TYPE_54 ) VAR_415 -> VAR_416 - 7 ) ; VAR_417 += 8 ) { for ( VAR_418 = 7 ; VAR_419 >= 0 ; VAR_420 -- ) { METHOD_63 ( VAR_421 , ( TYPE_55 ) ( ( * VAR_422 ) & ( 0x01 << VAR_423 ) ? 0x00 : 0x01 ) , VAR_424 ) ; VAR_425 += METHOD_64 ( VAR_426 ) ; } VAR_427 ++ ; } if ( ( VAR_428 -> VAR_429 % 8 ) != 0 ) { for ( VAR_430 = 7 ; VAR_431 >= ( TYPE_56 ) ( 8 - ( VAR_432 -> VAR_433 % 8 ) ) ; VAR_434 -- ) { METHOD_65 ( VAR_435 , ( TYPE_57 ) ( ( * VAR_436 ) & ( 0x01 << VAR_437 ) ? 0x00 : 0x01 ) , VAR_438 ) ; VAR_439 += METHOD_66 ( VAR_440 ) ; } VAR_441 ++ ; } if ( ( ( ( VAR_442 -> VAR_443 / 8 ) + ( VAR_444 -> VAR_445 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_446 ++ ; if ( METHOD_67 ( VAR_447 , VAR_448 ) == VAR_449 ) break ; if ( VAR_450 -> VAR_451 == ( TYPE_58 * ) VAR_452 ) { VAR_453 = METHOD_68 ( VAR_454 , VAR_455 , ( TYPE_59 ) VAR_456 , VAR_457 -> VAR_458 ) ; if ( VAR_459 == VAR_460 ) break ; } } else if ( VAR_461 -> VAR_462 == VAR_463 ) { if ( VAR_464 == 0 ) VAR_465 = VAR_466 -> VAR_467 ; VAR_468 = VAR_469 -> VAR_470 * ( VAR_471 -> VAR_472 + VAR_473 -> VAR_474 % 2 ) ; if ( ( ( VAR_475 . VAR_476 == VAR_477 ) && ( VAR_478 > ( VAR_479 * VAR_480 -> VAR_481 ) ) ) || ( ( VAR_482 . VAR_483 != VAR_484 ) && ( VAR_485 > VAR_486 . VAR_487 ) ) ) METHOD_69 ( VAR_488 , "UnableToReadImageData" ) ; for ( VAR_489 = 0 ; VAR_490 < ( TYPE_60 ) VAR_491 -> VAR_492 ; VAR_493 ++ ) { VAR_494 = METHOD_70 ( VAR_495 , 0 , VAR_496 , VAR_497 -> VAR_498 , 1 , VAR_499 ) ; if ( VAR_500 == ( TYPE_61 * ) VAR_501 ) break ; for ( VAR_502 = 0 ; VAR_503 < ( TYPE_62 ) VAR_504 -> VAR_505 ; VAR_506 ++ ) { METHOD_71 ( VAR_507 , * VAR_508 ++ , VAR_509 ) ; VAR_510 += METHOD_72 ( VAR_511 ) ; } if ( ( VAR_512 -> VAR_513 % 2 ) != 0 ) VAR_514 ++ ; if ( METHOD_73 ( VAR_515 , VAR_516 ) == VAR_517 ) break ; if ( VAR_518 -> VAR_519 == ( TYPE_63 * ) VAR_520 ) { VAR_521 = METHOD_74 ( VAR_522 , VAR_523 , ( TYPE_64 ) VAR_524 , VAR_525 -> VAR_526 ) ; if ( VAR_527 == VAR_528 ) break ; } } } else { TYPE_65 VAR_529 ; VAR_530 = 3 ; if ( VAR_531 -> VAR_532 != VAR_533 ) VAR_534 ++ ; if ( VAR_535 == 0 ) VAR_536 = VAR_537 * VAR_538 -> VAR_539 ;  VAR_540 = VAR_541 -> VAR_542 * ( VAR_543 + VAR_544 -> VAR_545 % 2 ) ;  if ( ( ( VAR_546 . VAR_547 == VAR_548 ) && ( VAR_549 > ( VAR_550 * VAR_551 -> VAR_552 ) ) ) || ( ( VAR_553 . VAR_554 != VAR_555 ) && ( VAR_556 > VAR_557 . VAR_558 ) ) ) METHOD_75 ( VAR_559 , "UnableToReadImageData" ) ; for ( VAR_560 = 0 ; VAR_561 < ( TYPE_66 ) VAR_562 -> VAR_563 ; VAR_564 ++ ) { VAR_565 = METHOD_76 ( VAR_566 , 0 , VAR_567 , VAR_568 -> VAR_569 , 1 , VAR_570 ) ; if ( VAR_571 == ( TYPE_67 * ) VAR_572 ) break ; for ( VAR_573 = 0 ; VAR_574 < ( TYPE_68 ) VAR_575 -> VAR_576 ; VAR_577 ++ ) { if ( VAR_578 -> VAR_579 != VAR_580 ) METHOD_77 ( VAR_581 , METHOD_78 ( * VAR_582 ++ ) , VAR_583 ) ; if ( VAR_584 . VAR_585 == VAR_586 ) { METHOD_79 ( VAR_587 , METHOD_80 ( * VAR_588 ++ ) , VAR_589 ) ; METHOD_81 ( VAR_590 , METHOD_82 ( * VAR_591 ++ ) , VAR_592 ) ; METHOD_83 ( VAR_593 , METHOD_84 ( * VAR_594 ++ ) , VAR_595 ) ; } else { METHOD_85 ( VAR_596 , METHOD_86 ( * VAR_597 ++ ) , VAR_598 ) ; METHOD_87 ( VAR_599 , METHOD_88 ( * VAR_600 ++ ) , VAR_601 ) ; METHOD_89 ( VAR_602 , METHOD_90 ( * VAR_603 ++ ) , VAR_604 ) ; } if ( VAR_605 -> VAR_606 != 0 ) { METHOD_91 ( VAR_607 , METHOD_92 ( VAR_608 -> VAR_609 [ ( TYPE_69 ) METHOD_93 ( VAR_610 , VAR_611 ) ] . VAR_612 ) , VAR_613 ) ; METHOD_94 ( VAR_614 , METHOD_95 ( VAR_615 -> VAR_616 [ ( TYPE_70 ) METHOD_96 ( VAR_617 , VAR_618 ) ] . VAR_619 ) , VAR_620 ) ; METHOD_97 ( VAR_621 , METHOD_98 ( VAR_622 -> VAR_623 [ ( TYPE_71 ) METHOD_99 ( VAR_624 , VAR_625 ) ] . VAR_626 ) , VAR_627 ) ; } VAR_628 += METHOD_100 ( VAR_629 ) ; } if ( ( ( VAR_630 * VAR_631 -> VAR_632 ) % 2 ) != 0 ) VAR_633 ++ ; if ( METHOD_101 ( VAR_634 , VAR_635 ) == VAR_636 ) break ; if ( VAR_637 -> VAR_638 == ( TYPE_72 * ) VAR_639 ) { VAR_640 = METHOD_102 ( VAR_641 , VAR_642 , ( TYPE_73 ) VAR_643 , VAR_644 -> VAR_645 ) ; if ( VAR_646 == VAR_647 ) break ; } } } if ( VAR_648 -> VAR_649 == VAR_650 ) ( TYPE_74 ) METHOD_103 ( VAR_651 , VAR_652 ) ; VAR_653 = ( unsigned TYPE_75 * ) METHOD_104 ( VAR_654 ) ; if ( METHOD_105 ( VAR_655 ) != VAR_656 ) { METHOD_106 ( VAR_657 , VAR_658 , "UnexpectedEndOfFile" , VAR_659 -> VAR_660 ) ; break ; } if ( VAR_661 -> VAR_662 != 0 ) if ( VAR_663 -> VAR_664 >= ( VAR_665 -> VAR_666 + VAR_667 -> VAR_668 - 1 ) ) break ; VAR_669 . VAR_670 = METHOD_107 ( VAR_671 ) ; if ( VAR_672 . VAR_673 == 0x59a66a95 ) { METHOD_108 ( VAR_674 , VAR_675 , VAR_676 ) ; if ( METHOD_109 ( VAR_677 ) == ( TYPE_76 * ) VAR_678 ) { VAR_679 = METHOD_110 ( VAR_680 ) ; return ( ( TYPE_77 * ) VAR_681 ) ; } VAR_682 = METHOD_111 ( VAR_683 ) ; VAR_684 = METHOD_112 ( VAR_685 , VAR_686 , METHOD_113 ( VAR_687 ) , METHOD_114 ( VAR_688 ) ) ; if ( VAR_689 == VAR_690 ) break ; } } while ( VAR_691 . VAR_692 == 0x59a66a95 ) ; ( TYPE_78 ) METHOD_115 ( VAR_693 ) ; return ( METHOD_116 ( VAR_694 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { if ( ( METHOD_1 ( VAR_6 - 1. ) > 0.001 ) || ( METHOD_2 ( VAR_7 - 1. ) > 0.001 ) || ( METHOD_3 ( VAR_8 ) > 0.001 ) || ( METHOD_4 ( VAR_9 ) > 0.001 ) || ( METHOD_5 ( VAR_10 ) > 0.001 ) || ( METHOD_6 ( VAR_11 ) > 0.001 ) ) {  VAR_12 +=  METHOD_7 ( VAR_13 , "%12.3f%12.3f%12.3f%12.3f%12.3f%12.3fcm\\n" , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ;  }  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 = VAR_4 ; if ( VAR_5 -> VAR_6 != 0x0E ) return VAR_7 ;  METHOD_1 ( VAR_8 , "receivedBandwidthMeasureResultsPDU" ) ;  METHOD_2 ( VAR_9 , VAR_10 -> VAR_11 -> VAR_12 ) ; METHOD_3 ( VAR_13 , VAR_14 -> VAR_15 -> VAR_16 ) ; if ( VAR_17 -> VAR_18 -> VAR_19 > 0 ) VAR_20 -> VAR_21 -> VAR_22 = VAR_23 -> VAR_24 -> VAR_25 * 8 / VAR_26 -> VAR_27 -> VAR_28 ; else VAR_29 -> VAR_30 -> VAR_31 = 0 ; METHOD_4 ( VAR_32 -> VAR_33 -> VAR_34 , VAR_35 , VAR_36 -> VAR_37 , VAR_38 -> VAR_39 ) ; return VAR_40 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  METHOD_1 ( VAR_1 ) ;  METHOD_2 ( & VAR_2 -> VAR_3 ) ; METHOD_3 ( & VAR_4 -> VAR_5 , VAR_6 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * VAR_6 , TYPE_8 * VAR_7 ) { TYPE_9 VAR_8 , VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 = VAR_12 -> VAR_13 ; TYPE_12 VAR_14 = VAR_15 -> VAR_16 ; TYPE_13 VAR_17 = VAR_18 -> VAR_19 [ VAR_20 ] . VAR_21 ; TYPE_14 VAR_22 = VAR_23 -> VAR_24 [ VAR_25 ] . VAR_26 ; TYPE_15 VAR_27 = ( VAR_28 * VAR_29 -> VAR_30 . VAR_31 ) ; if ( VAR_32 & VAR_33 ) const TYPE_16 VAR_34 = ( 1 << VAR_35 -> VAR_36 ) ; TYPE_17 * VAR_37 = VAR_38 -> VAR_39 ; VAR_40 * VAR_41 ; if VAR_42 const TYPE_18 VAR_43 = VAR_44 -> VAR_45 ; const TYPE_19 VAR_46 = VAR_47 -> VAR_48 + VAR_49 ; volatile const TYPE_20 * VAR_50 ; volatile TYPE_21 * VAR_51 = & VAR_52 -> VAR_53 [ VAR_54 ] ; if ( ( VAR_55 -> VAR_56 != 0 ) && ( VAR_57 != 0 ) ) VAR_58 = & VAR_59 -> VAR_60 [ VAR_61 - 1 ] ; else VAR_62 = & VAR_63 ; if ( VAR_64 & VAR_65 ) if ( VAR_66 > 1 ) VAR_67 = & VAR_68 -> VAR_69 [ 1 + ( VAR_70 % VAR_71 ) ] ; else VAR_72 = & VAR_73 -> VAR_74 [ 1 ] ; VAR_75 -> VAR_76 = VAR_77 -> VAR_78 ; VAR_79 -> VAR_80 = ( VAR_81 != 0 ) ; VAR_82 = ( VAR_83 * VAR_84 * 16 ) ; VAR_85 = ( VAR_86 * VAR_87 * 8 ) ; VAR_88 -> VAR_89 [ VAR_90 ] . VAR_91 = * VAR_92 ; VAR_93 -> VAR_94 = - ( ( VAR_95 * 16 ) << 3 ) ; VAR_96 -> VAR_97 = ( ( VAR_98 -> VAR_99 - 1 - VAR_100 ) * 16 ) << 3 ; VAR_101 -> VAR_102 = - ( ( VAR_103 * 16 ) + ( VAR_104 - 16 ) ) ; VAR_105 -> VAR_106 = ( ( VAR_107 -> VAR_108 - 1 - VAR_109 ) * 16 ) + ( VAR_110 - 16 ) ; VAR_111 -> VAR_112 = & VAR_113 -> VAR_114 [ VAR_115 ] ; for ( VAR_116 = 0 ; VAR_117 < VAR_118 -> VAR_119 ; VAR_120 ++ ) { if ( VAR_121 & VAR_122 ) * VAR_123 = VAR_124 -> VAR_125 ; VAR_126 -> VAR_127 = - ( ( VAR_128 * 16 ) << 3 ) ; VAR_129 -> VAR_130 = ( ( VAR_131 -> VAR_132 - 1 - VAR_133 ) * 16 ) << 3 ; VAR_134 -> VAR_135 = - ( ( VAR_136 * 16 ) + ( VAR_137 - 16 ) ) ; VAR_138 -> VAR_139 = ( ( VAR_140 -> VAR_141 - 1 - VAR_142 ) * 16 ) + ( VAR_143 - 16 ) ; VAR_144 -> VAR_145 . VAR_146 = VAR_147 -> VAR_148 [ VAR_149 ] . VAR_150 + VAR_151 ; VAR_152 -> VAR_153 . VAR_154 = VAR_155 -> VAR_156 [ VAR_157 ] . VAR_158 + VAR_159 ; VAR_160 -> VAR_161 . VAR_162 = VAR_163 -> VAR_164 [ VAR_165 ] . VAR_166 + VAR_167 ; VAR_168 -> VAR_169 = ( VAR_170 != 0 ) ; VAR_171 -> VAR_172 = VAR_173 -> VAR_174 ; VAR_175 -> VAR_176 = VAR_177 -> VAR_178 ; METHOD_1 ( VAR_179 -> VAR_180 . VAR_181 , VAR_182 -> VAR_183 . VAR_184 , VAR_185 -> VAR_186 , 16 ) ; if VAR_187 if ( VAR_188 -> VAR_189 != 0 ) { * VAR_190 = VAR_191 - 1 ; if ( ( VAR_192 & ( VAR_193 - 1 ) ) == 0 ) { while ( VAR_194 > ( * VAR_195 - VAR_196 ) ) { METHOD_2 ( ) ; METHOD_3 ( 0 ) ; } } } if ( VAR_197 -> VAR_198 . VAR_199 == VAR_200 ) METHOD_4 ( VAR_201 , VAR_202 ) ; if ( VAR_203 -> VAR_204 ) { if ( VAR_205 -> VAR_206 [ VAR_207 + VAR_208 ] <= 3 ) VAR_209 -> VAR_210 -> VAR_211 . VAR_212 = VAR_213 -> VAR_214 [ VAR_215 + VAR_216 ] ; else VAR_217 -> VAR_218 -> VAR_219 . VAR_220 = 0 ; METHOD_5 ( VAR_221 , VAR_222 , 1 ) ; } else VAR_223 -> VAR_224 -> VAR_225 . VAR_226 = 0 ; VAR_227 -> VAR_228 = VAR_229 -> VAR_230 + VAR_231 + VAR_232 ; if ( VAR_233 -> VAR_234 == VAR_235 ) { * VAR_236 += METHOD_6 ( VAR_237 , VAR_238 , VAR_239 ) ; TYPE_22 TYPE_23 VAR_240 [ VAR_241 -> VAR_242 . VAR_243 ] ++ ; } else { * VAR_244 += METHOD_7 ( VAR_245 , VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , VAR_251 ) ; TYPE_24 TYPE_25 VAR_252 [ VAR_253 -> VAR_254 . VAR_255 ] ++ ; if ( VAR_256 -> VAR_257 . VAR_258 == VAR_259 ) { TYPE_26 VAR_260 ; for ( VAR_261 = 0 ; VAR_262 < VAR_263 -> VAR_264 . VAR_265 ; VAR_266 ++ ) { VAR_267 [ VAR_268 -> VAR_269 -> VAR_270 [ VAR_271 ] . VAR_272 ] ++ ; } }  if ( ( VAR_273 -> VAR_274 == 0 ) &&  ( VAR_275 -> VAR_276 && VAR_277 -> VAR_278 ) ) { VAR_279 -> VAR_280 [ VAR_281 + VAR_282 ] = VAR_283 -> VAR_284 -> VAR_285 . VAR_286 ; if ( VAR_287 -> VAR_288 -> VAR_289 . VAR_290 ) VAR_291 -> VAR_292 [ VAR_293 + VAR_294 ] = - 1 ;  else if ( ( VAR_295 -> VAR_296 -> VAR_297 . VAR_298 == VAR_299 ) && ( VAR_300 -> VAR_301 -> VAR_302 . VAR_303 == VAR_304 ) )  { if ( VAR_305 -> VAR_306 [ VAR_307 + VAR_308 ] == 1 ) VAR_309 -> VAR_310 [ VAR_311 + VAR_312 ] = 0 ; } else VAR_313 -> VAR_314 [ VAR_315 + VAR_316 ] = 1 ; } } VAR_317 -> VAR_318 [ VAR_319 ] . VAR_320 = * VAR_321 ; if VAR_322 & VAR_323 { TYPE_27 VAR_324 = * VAR_325 - VAR_326 ;  METHOD_8 ( VAR_327 , VAR_328 , VAR_329 ) ;  } VAR_330 -> VAR_331 ++ ; VAR_332 -> VAR_333 ++ ; VAR_334 -> VAR_335 . VAR_336 += 16 ; VAR_337 -> VAR_338 . VAR_339 += 8 ; VAR_340 -> VAR_341 . VAR_342 += 8 ; VAR_343 += 16 ; VAR_344 += 8 ; VAR_345 [ VAR_346 -> VAR_347 -> VAR_348 . VAR_349 ] ++ ; VAR_350 -> VAR_351 ++ ; VAR_352 -> VAR_353 ++ ; VAR_354 -> VAR_355 ++ ; } METHOD_9 ( & VAR_356 -> VAR_357 [ VAR_358 ] , VAR_359 -> VAR_360 . VAR_361 + 16 , VAR_362 -> VAR_363 . VAR_364 + 8 , VAR_365 -> VAR_366 . VAR_367 + 8 ) ; if VAR_368 if ( VAR_369 -> VAR_370 != 0 ) * VAR_371 = VAR_372 ; VAR_373 -> VAR_374 ++ ; VAR_375 -> VAR_376 ++ ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; VAR_5 * VAR_6 ; struct STRUCT_OR_UNION_1 * VAR_7 ; TYPE_4 VAR_8 ; if ( ( VAR_9 = METHOD_2 ( VAR_10 , VAR_11 ) ) == VAR_12 ) { METHOD_3 ( VAR_13 , "Memorysqueezeonfr_add_pvc()\\n" ) ; return - VAR_14 ; } if ( * METHOD_4 ( VAR_15 , VAR_16 ) ) return - VAR_17 ; VAR_18 = METHOD_5 ( VAR_19 ) ;  if ( VAR_20 == VAR_21 )  VAR_22 = METHOD_6 ( 0 , "pvceth%d" , VAR_23 ) ;  else  VAR_24 = METHOD_7 ( 0 , "pvc%d" , VAR_25 ) ; if ( ! VAR_26 ) { METHOD_8 ( VAR_27 , "Memorysqueezeonfr_pvc()\\n" ) ; METHOD_9 ( VAR_28 ) ; return - VAR_29 ; } if ( VAR_30 == VAR_31 ) METHOD_10 ( VAR_32 -> VAR_33 ) ; else { * ( TYPE_5 * ) VAR_34 -> VAR_35 = METHOD_11 ( VAR_36 ) ; METHOD_12 ( VAR_37 -> VAR_38 , VAR_39 ) ; } VAR_40 -> VAR_41 = & VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = 0 ; VAR_48 -> VAR_49 = VAR_50 ; if ( METHOD_13 ( VAR_51 ) != 0 ) { METHOD_14 ( VAR_52 ) ; METHOD_15 ( VAR_53 ) ; return - VAR_54 ; } VAR_55 -> VAR_56 = METHOD_16 ; * METHOD_17 ( VAR_57 , VAR_58 ) = VAR_59 ; if ( ! VAR_60 ) { METHOD_18 ( VAR_61 ) -> VAR_62 = 1 ; METHOD_19 ( VAR_63 ) -> VAR_64 ++ ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 , VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; VAR_5 * VAR_6 ;  METHOD_1 ( VAR_7 , VAR_8 ) ;  METHOD_2 ( VAR_9 , VAR_10 ) ; METHOD_3 ( VAR_11 , VAR_12 ) ; VAR_13 = VAR_14 -> VAR_15 ; METHOD_4 ( VAR_16 , VAR_17 , "cliprdr_process(),type=%d,status=%d,length=%d" , VAR_18 , VAR_19 , VAR_20 ) ;  if ( VAR_21 == VAR_22 )  { switch ( VAR_23 ) { case VAR_24 : METHOD_5 ( VAR_25 , VAR_26 ) ; break ; case VAR_27 : METHOD_6 ( ) ; break ; default : METHOD_7 ( VAR_28 , VAR_29 , "cliprdr_process(),unhandlederror(type=%d)" , VAR_30 ) ; } return ; } switch ( VAR_31 ) { case VAR_32 : METHOD_8 ( ) ; break ; case VAR_33 : METHOD_9 ( VAR_34 , VAR_35 ) ; METHOD_10 ( VAR_36 , VAR_37 , VAR_38 , 0 ) ; return ; case VAR_39 : break ; case VAR_40 : METHOD_11 ( VAR_41 , VAR_42 ) ; METHOD_12 ( VAR_43 ) ; break ; case VAR_44 : METHOD_13 ( VAR_45 , VAR_46 ) ; break ; case 7 : break ; default : METHOD_14 ( VAR_47 , VAR_48 , "cliprdr_process(),unhandledpackettype%d" , VAR_49 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 = 0 ; VAR_11 * VAR_12 ; METHOD_1 ( & VAR_13 , VAR_14 ) ; METHOD_2 ( VAR_15 , VAR_16 -> VAR_17 . VAR_18 ) ; switch ( VAR_19 -> VAR_20 ) { case VAR_21 : case VAR_22 : case VAR_23 : case VAR_24 : case VAR_25 : case VAR_26 : TYPE_7 TYPE_8 case VAR_27 : VAR_28 = VAR_29 -> VAR_30 . VAR_31 ; VAR_32 = VAR_33 -> VAR_34 . VAR_35 ; break ; default : VAR_36 = VAR_37 -> VAR_38 . VAR_39 + 1 ; VAR_40 = VAR_41 -> VAR_42 . VAR_43 - 1 ; } switch ( VAR_44 -> VAR_45 ) { case VAR_46 : case VAR_47 : if ( VAR_48 -> VAR_49 == VAR_50 || VAR_51 >= VAR_52 -> VAR_53 -> VAR_54 || VAR_55 < 0 ) break ; if ( VAR_56 -> VAR_57 ) VAR_58 -> VAR_59 -> VAR_60 [ VAR_61 ] = '*' ; else VAR_62 -> VAR_63 -> VAR_64 [ VAR_65 ] = '' ; break ; case VAR_66 : case VAR_67 : case VAR_68 : case VAR_69 : TYPE_9 TYPE_10 case VAR_70 : if ( VAR_71 -> VAR_72 == VAR_73 ) { VAR_74 = VAR_75 -> VAR_76 -> VAR_77 ; METHOD_3 ( VAR_78 , VAR_79 -> VAR_80 ) ; } else { if ( ! VAR_81 -> VAR_82 ) break ; VAR_83 = VAR_84 -> VAR_85 -> VAR_86 ; } VAR_87 = VAR_88 -> VAR_89 ; if ( ! VAR_90 ) break ; if ( VAR_91 -> VAR_92 == VAR_93 ) { TYPE_11 VAR_94 = VAR_95 -> VAR_96 - VAR_97 -> VAR_98 -> VAR_99 ; if ( VAR_100 > 0 ) for ( ; VAR_101 && VAR_102 ; VAR_103 = VAR_104 -> VAR_105 , VAR_106 -- ) ; else if ( VAR_107 < 0 ) for ( ; VAR_108 && VAR_109 ; VAR_110 = VAR_111 -> VAR_112 , VAR_113 ++ ) ; if ( ! VAR_114 ) break ; } VAR_115 = VAR_116 -> VAR_117 ? VAR_118 -> VAR_119 : 1 ; VAR_120 = METHOD_4 ( VAR_121 , VAR_122 -> VAR_123 . VAR_124 ) ; for ( VAR_125 = 0 ; VAR_126 < VAR_127 ; VAR_128 ++ , VAR_129 = VAR_130 -> VAR_131 ) {  if ( VAR_132 > 1 ) {  VAR_133 = METHOD_5 ( VAR_134 , VAR_135 ) ; VAR_136 = METHOD_6 ( VAR_137 -> VAR_138 , VAR_139 -> VAR_140 , VAR_141 ) ; if ( VAR_142 == VAR_143 ) break ; VAR_144 = VAR_145 -> VAR_146 . VAR_147 ; VAR_148 = VAR_149 -> VAR_150 . VAR_151 ; } if ( VAR_152 -> VAR_153 . VAR_154 != VAR_155 -> VAR_156 . VAR_157 || VAR_158 > VAR_159 || VAR_160 >= VAR_161 -> VAR_162 || VAR_163 < 0 || VAR_164 < 0 || METHOD_7 ( VAR_165 , VAR_166 ) < VAR_167 ) break ; VAR_168 = METHOD_8 ( VAR_169 , & VAR_170 , VAR_171 , VAR_172 , METHOD_9 ( VAR_173 , VAR_174 ) - VAR_175 , VAR_176 > 1 , VAR_177 -> VAR_178 == VAR_179 ) ; if ( VAR_180 != VAR_181 ) { METHOD_10 ( VAR_182 -> VAR_183 , VAR_184 -> VAR_185 , VAR_186 -> VAR_187 . VAR_188 , VAR_189 , VAR_190 - VAR_191 ) ; METHOD_11 ( VAR_192 -> VAR_193 , VAR_194 -> VAR_195 , VAR_196 -> VAR_197 . VAR_198 , VAR_199 , VAR_200 - VAR_201 ) ; METHOD_12 ( VAR_202 -> VAR_203 , VAR_204 -> VAR_205 , VAR_206 -> VAR_207 . VAR_208 , VAR_209 , VAR_210 - VAR_211 ) ; METHOD_13 ( VAR_212 -> VAR_213 , VAR_214 -> VAR_215 , VAR_216 -> VAR_217 . VAR_218 , VAR_219 , VAR_220 - VAR_221 ) ; } } break ; } METHOD_14 ( VAR_222 , & VAR_223 ) ; METHOD_15 ( VAR_224 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { if ( VAR_5 == VAR_6 ) { METHOD_1 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 ) ; } else { METHOD_2 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ; } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , VAR_9 , VAR_10 , VAR_11 , & VAR_12 ) ; if ( VAR_13 < 0 ) { return VAR_14 ; }  METHOD_2 ( VAR_15 , 1 , 0 , VAR_16 , VAR_17 ) ;  VAR_18 = ( VAR_19 >> 4 ) & 0x3f ; if ( METHOD_3 ( VAR_20 ) ) { TYPE_7 VAR_21 ; if ( ! METHOD_4 ( VAR_22 , ( unsigned TYPE_8 ) VAR_23 , 1UL << VAR_24 ) ) { return - 1 ; } switch ( VAR_25 ) { case 1 : * ( TYPE_9 * ) & VAR_26 = ( TYPE_10 ) VAR_27 -> VAR_28 [ VAR_29 ] ; break ; case 2 : * ( TYPE_11 * ) & VAR_30 = ( TYPE_12 ) VAR_31 -> VAR_32 [ VAR_33 ] ; break ; case 3 : VAR_34 = VAR_35 -> VAR_36 [ VAR_37 ] ; break ; default : METHOD_5 ( "Unexpectedwidth_shift%dinmisaligned_store,PC=%08lx\\n" , VAR_38 , ( unsigned TYPE_13 ) VAR_39 -> VAR_40 ) ; break ; } if ( METHOD_6 ( ( TYPE_14 * ) ( TYPE_15 ) VAR_41 , & VAR_42 , ( 1 << VAR_43 ) ) > 0 ) { return - 1 ; } } else { TYPE_16 VAR_44 = VAR_45 -> VAR_46 [ VAR_47 ] ; switch ( VAR_48 ) { case 1 : METHOD_7 ( VAR_49 , VAR_50 ) ; break ; case 2 : asm ( "stlo.l%1,0,%0" : : METHOD_8 ( VAR_51 ) , METHOD_9 ( VAR_52 ) ) ; asm ( "sthi.l%1,3,%0" : : METHOD_10 ( VAR_53 ) , METHOD_11 ( VAR_54 ) ) ; break ; case 3 : asm ( "stlo.q%1,0,%0" : : METHOD_12 ( VAR_55 ) , METHOD_13 ( VAR_56 ) ) ; asm ( "sthi.q%1,7,%0" : : METHOD_14 ( VAR_57 ) , METHOD_15 ( VAR_58 ) ) ; break ; default : METHOD_16 ( "Unexpectedwidth_shift%dinmisaligned_store,PC=%08lx\\n" , VAR_59 , ( unsigned TYPE_17 ) VAR_60 -> VAR_61 ) ; break ; } } return 0 ; }
static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 . VAR_9 / 8 ; TYPE_6 VAR_10 = VAR_11 / VAR_12 ; TYPE_7 VAR_13 ; TYPE_8 * VAR_14 = ( TYPE_9 * ) VAR_15 ; TYPE_10 * VAR_16 = ( TYPE_11 * ) METHOD_2 ( VAR_17 ) ;  METHOD_3 ( ( VAR_18 % ( VAR_19 * VAR_20 ) ) == 0 ) ;  if ( ! VAR_21 )  return ;  METHOD_4 ( VAR_22 , VAR_23 , VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { TYPE_12 VAR_29 ; for ( VAR_30 = 0 ; VAR_31 < VAR_32 ; VAR_33 ++ ) { if VAR_34 VAR_35 [ VAR_36 * VAR_37 + VAR_38 ] = VAR_39 [ VAR_40 * VAR_41 + VAR_42 ] ; else VAR_43 [ ( VAR_44 - VAR_45 - 1 ) * VAR_46 + VAR_47 ] = VAR_48 [ VAR_49 * VAR_50 + VAR_51 ] ; } } METHOD_5 ( VAR_52 ) ; VAR_53 = ( TYPE_13 * ) VAR_54 ; VAR_55 += VAR_56 - VAR_57 - 1 ; for ( VAR_58 = VAR_59 ; VAR_60 > VAR_61 ; VAR_62 -= VAR_63 ) REPEAT4 ( VAR_64 , VAR_65 [ VAR_66 ] = ( unsigned TYPE_14 ) ( ( VAR_67 [ VAR_68 ] - VAR_69 [ 0 ] ) & 0xff ) ; VAR_70 -- )  }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  TYPE_2 VAR_1 ;  TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ; TYPE_4 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_5 * VAR_15 , * VAR_16 ; TYPE_6 VAR_17 ;  METHOD_1 ( VAR_18 , VAR_19 , "%s()" , VAR_20 ) ;  METHOD_2 ( VAR_21 , VAR_22 ) ; for ( VAR_23 = 0 ; VAR_24 < VAR_25 ; VAR_26 ++ ) {  METHOD_3 ( VAR_27 , VAR_28 ) ;  METHOD_4 ( VAR_29 , VAR_30 ) ; METHOD_5 ( VAR_31 , VAR_32 ) ; METHOD_6 ( VAR_33 , VAR_34 ) ; METHOD_7 ( VAR_35 , VAR_36 ) ; METHOD_8 ( VAR_37 , VAR_38 ) ; METHOD_9 ( VAR_39 , VAR_40 ) ; VAR_41 = ( VAR_42 + 7 ) / 8 ; METHOD_10 ( VAR_43 , VAR_44 ) ; METHOD_11 ( VAR_45 , VAR_46 ) ; VAR_47 = VAR_48 - VAR_49 + 1 ; VAR_50 = VAR_51 - VAR_52 + 1 ; METHOD_12 ( VAR_53 , VAR_54 , "process_bitmap_updates(),[%d,%d,%d,%d],[%d,%d],bpp=%d,compression=%d" , VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; if ( ! VAR_63 ) { TYPE_7 VAR_64 ; VAR_65 = ( TYPE_8 * ) METHOD_13 ( VAR_66 * VAR_67 * VAR_68 ) ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; VAR_72 ++ ) { METHOD_14 ( VAR_73 , & VAR_74 [ ( VAR_75 - VAR_76 - 1 ) * ( VAR_77 * VAR_78 ) ] , VAR_79 * VAR_80 ) ; } METHOD_15 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) ; METHOD_16 ( VAR_88 ) ; continue ; } if ( VAR_89 & 0x400 ) { VAR_90 = VAR_91 ; } else { METHOD_17 ( VAR_92 , 2 ) ; METHOD_18 ( VAR_93 , VAR_94 ) ; METHOD_19 ( VAR_95 , 4 ) ; } METHOD_20 ( VAR_96 , VAR_97 , VAR_98 ) ; VAR_99 = ( TYPE_9 * ) METHOD_21 ( VAR_100 * VAR_101 * VAR_102 ) ; if ( METHOD_22 ( VAR_103 , VAR_104 , VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ) { METHOD_23 ( VAR_109 , VAR_110 , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 ) ; } else { METHOD_24 ( VAR_116 , VAR_117 , "process_bitmap_updates(),failedtodecompressbitmap" ) ; } METHOD_25 ( VAR_118 ) ; } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 * VAR_4 , * VAR_5 ; TYPE_2 * VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_4 VAR_15 ; METHOD_1 ( VAR_16 != VAR_17 ) ; VAR_18 = VAR_19 -> VAR_20 ; METHOD_2 ( VAR_21 != VAR_22 ) ; METHOD_3 ( VAR_23 -> VAR_24 != VAR_25 ) ; VAR_26 = ( TYPE_5 * ) VAR_27 -> VAR_28 -> VAR_29 . VAR_30 ; METHOD_4 ( VAR_31 != VAR_32 ) ; if ( ! VAR_33 -> VAR_34 . VAR_35 ) return 0 ; VAR_36 = VAR_37 -> VAR_38 ; METHOD_5 ( VAR_39 != VAR_40 ) ; METHOD_6 ( VAR_41 ) ; if ( VAR_42 -> VAR_43 == 0 || ( METHOD_7 ( VAR_44 ) && ( VAR_45 -> VAR_46 -> VAR_47 + VAR_48 -> VAR_49 . VAR_50 * 16 ) < VAR_51 -> VAR_52 ) ) { for ( VAR_53 = 0 , VAR_54 = & VAR_55 -> VAR_56 [ 0 ] ; VAR_57 < VAR_58 -> VAR_59 . VAR_60 ; VAR_61 ++ ) { VAR_62 = VAR_63 -> METHOD_8 ( VAR_64 , VAR_65 -> VAR_66 , VAR_67 -> VAR_68 , ( TYPE_6 ) VAR_69 -> VAR_70 , ( TYPE_7 ) VAR_71 -> VAR_72 , & VAR_73 -> VAR_74 [ VAR_75 -> VAR_76 ] ) ; if ( VAR_77 -> VAR_78 ) break ; if ( VAR_79 ) return VAR_80 ; VAR_81 = METHOD_9 ( VAR_82 ) ; } METHOD_10 ( VAR_83 ) ; return 0 ; } if ( VAR_84 -> VAR_85 == 0 ) return 0 ; VAR_86 = VAR_87 -> VAR_88 . VAR_89 * sizeof ( * VAR_90 ) ; VAR_91 = VAR_92 = METHOD_11 ( VAR_93 , VAR_94 | VAR_95 ) ; VAR_96 = 0 ; for ( VAR_97 = 0 , VAR_98 = & VAR_99 -> VAR_100 [ 0 ] ; VAR_101 < VAR_102 -> VAR_103 . VAR_104 ; VAR_105 ++ ) { if ( METHOD_12 ( ( ( TYPE_8 * ) VAR_106 < ( TYPE_9 * ) VAR_107 ) || ( ( TYPE_10 * ) VAR_108 >= ( ( TYPE_11 * ) VAR_109 + VAR_110 -> VAR_111 -> VAR_112 ) ) ) ) { METHOD_13 ( "xfs_attr_shortform_list" , VAR_113 , VAR_114 -> VAR_115 -> VAR_116 , VAR_117 ) ; METHOD_14 ( VAR_118 ) ; return - VAR_119 ; } VAR_120 -> VAR_121 = VAR_122 ; VAR_123 -> VAR_124 = METHOD_15 ( VAR_125 -> VAR_126 , VAR_127 -> VAR_128 ) ; VAR_129 -> VAR_130 = VAR_131 -> VAR_132 ; VAR_133 -> VAR_134 = VAR_135 -> VAR_136 ; VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; VAR_141 -> VAR_142 = VAR_143 -> VAR_144 ; VAR_145 = METHOD_16 ( VAR_146 ) ; VAR_147 ++ ; VAR_148 ++ ; } METHOD_17 ( VAR_149 , VAR_150 , sizeof ( * VAR_151 ) , VAR_152 ) ; VAR_153 = 0 ; VAR_154 -> VAR_155 = 1 ; VAR_156 -> VAR_157 = 0 ; for ( VAR_158 = VAR_159 , VAR_160 = 0 ; VAR_161 < VAR_162 ; VAR_163 ++ , VAR_164 ++ ) { if ( VAR_165 -> VAR_166 == VAR_167 -> VAR_168 ) { if ( VAR_169 -> VAR_170 == VAR_171 ) { break ; } VAR_172 ++ ; } else if ( VAR_173 -> VAR_174 > VAR_175 -> VAR_176 ) { break ; } } if ( VAR_177 == VAR_178 ) { METHOD_18 ( VAR_179 ) ; return 0 ; } for ( ; VAR_180 < VAR_181 ; VAR_182 ++ , VAR_183 ++ ) { if ( VAR_184 -> VAR_185 != VAR_186 -> VAR_187 ) { VAR_188 -> VAR_189 = VAR_190 -> VAR_191 ; VAR_192 -> VAR_193 = 0 ; } VAR_194 = VAR_195 -> METHOD_19 ( VAR_196 , VAR_197 -> VAR_198 , VAR_199 -> VAR_200 , VAR_201 -> VAR_202 , VAR_203 -> VAR_204 , & VAR_205 -> VAR_206 [ VAR_207 -> VAR_208 ] ) ;  if ( VAR_209 )  return VAR_210 ;  if ( VAR_211 -> VAR_212 )  break ; VAR_213 -> VAR_214 ++ ; } METHOD_20 ( VAR_215 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 , VAR_3 ;   TYPE_4 VAR_4 , VAR_5 ;  TYPE_5 VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_0 * VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( VAR_14 , VAR_15 ) ; METHOD_4 ( VAR_16 , VAR_17 ) ; if ( VAR_18 != ( TYPE_7 ) - 1 ) METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; else METHOD_6 ( VAR_22 , VAR_23 ) ; METHOD_7 ( VAR_24 , VAR_25 , & VAR_26 ) ; METHOD_8 ( VAR_27 , VAR_28 , & VAR_29 ) ; if ( VAR_30 == VAR_31 ) { METHOD_9 ( VAR_32 , VAR_33 , VAR_34 ) ; } else if ( VAR_35 == VAR_36 ) { TYPE_8 VAR_37 , VAR_38 ; METHOD_10 ( VAR_39 , VAR_40 , & VAR_41 , & VAR_42 ) ; if ( VAR_43 != 1 || VAR_44 != 1 ) { METHOD_11 ( VAR_45 , "tiffcp:%s:Can\'tcopy/convertsubsampledimage.\\n" , METHOD_12 ( VAR_46 ) ) ; return VAR_47 ; } } if ( VAR_48 == VAR_49 ) { if ( VAR_50 == VAR_51 && VAR_52 == VAR_53 ) METHOD_13 ( VAR_54 , VAR_55 , VAR_56 ) ; else METHOD_14 ( VAR_57 , VAR_58 , VAR_59 ) ; } else if ( VAR_60 == VAR_61 || VAR_62 == VAR_63 ) METHOD_15 ( VAR_64 , VAR_65 , VAR_66 == 1 ? VAR_67 : VAR_68 ) ; else if ( VAR_69 == VAR_70 && VAR_71 == 3 ) { METHOD_16 ( VAR_72 , VAR_73 , VAR_74 ) ; } else METHOD_17 ( VAR_75 , 1 , VAR_76 ) ; if ( VAR_77 != 0 ) METHOD_18 ( VAR_78 , VAR_79 , VAR_80 ) ; else METHOD_19 ( VAR_81 , 1 , VAR_82 ) ; METHOD_20 ( VAR_83 , VAR_84 , & VAR_85 ) ; switch ( VAR_86 ) { case VAR_87 : case VAR_88 : METHOD_21 ( METHOD_22 ( VAR_89 ) , "usingbottom-leftorientation" ) ; VAR_90 = VAR_91 ; case VAR_92 : case VAR_93 : break ; case VAR_94 : case VAR_95 : default : METHOD_23 ( METHOD_24 ( VAR_96 ) , "usingtop-leftorientation" ) ; VAR_97 = VAR_98 ; case VAR_99 : case VAR_100 : break ; } METHOD_25 ( VAR_101 , VAR_102 , VAR_103 ) ; if ( VAR_104 == - 1 ) VAR_105 = METHOD_26 ( VAR_106 ) ; if ( VAR_107 ) { if ( VAR_108 == ( TYPE_9 ) - 1 ) METHOD_27 ( VAR_109 , VAR_110 , & VAR_111 ) ; if ( VAR_112 == ( TYPE_10 ) - 1 ) METHOD_28 ( VAR_113 , VAR_114 , & VAR_115 ) ; METHOD_29 ( VAR_116 , & VAR_117 , & VAR_118 ) ; METHOD_30 ( VAR_119 , VAR_120 , VAR_121 ) ; METHOD_31 ( VAR_122 , VAR_123 , VAR_124 ) ; } else { if ( VAR_125 == ( TYPE_11 ) 0 ) { if ( ! METHOD_32 ( VAR_126 , VAR_127 , & VAR_128 ) ) { VAR_129 = METHOD_33 ( VAR_130 , VAR_131 ) ; } if ( VAR_132 > VAR_133 && VAR_134 != ( TYPE_12 ) - 1 ) VAR_135 = VAR_136 ; } else if ( VAR_137 == ( TYPE_13 ) - 1 ) VAR_138 = VAR_139 ; METHOD_34 ( VAR_140 , VAR_141 , VAR_142 ) ; } if ( VAR_143 != ( TYPE_14 ) - 1 ) METHOD_35 ( VAR_144 , VAR_145 , VAR_146 ) ; else METHOD_36 ( VAR_147 , VAR_148 ) ; if ( VAR_149 <= 4 ) METHOD_37 ( VAR_150 , 4 , VAR_151 ) ; METHOD_38 ( VAR_152 , 4 , VAR_153 ) ; switch ( VAR_154 ) { case VAR_155 : METHOD_39 ( VAR_156 , VAR_157 , VAR_158 ) ; METHOD_40 ( VAR_159 , VAR_160 , VAR_161 ) ; break ; case VAR_162 : METHOD_41 ( VAR_163 , 1 , VAR_164 ) ; METHOD_42 ( VAR_165 , 1 , VAR_166 ) ; METHOD_43 ( VAR_167 , 1 , VAR_168 ) ; METHOD_44 ( VAR_169 , 1 , VAR_170 ) ; break ; case VAR_171 : case VAR_172 : case VAR_173 : case VAR_174 : if ( VAR_175 != ( TYPE_15 ) - 1 ) METHOD_45 ( VAR_176 , VAR_177 , VAR_178 ) ; else METHOD_46 ( VAR_179 , VAR_180 ) ; if ( VAR_181 != - 1 ) { if ( VAR_182 == VAR_183 || VAR_184 == VAR_185 ) METHOD_47 ( VAR_186 , VAR_187 , VAR_188 ) ; else if ( VAR_189 == VAR_190 ) METHOD_48 ( VAR_191 , VAR_192 , VAR_193 ) ; } break ; case VAR_194 : case VAR_195 : if ( VAR_196 == VAR_197 ) { if ( VAR_198 != ( TYPE_16 ) - 1 ) METHOD_49 ( VAR_199 , VAR_200 , VAR_201 ) ; else METHOD_50 ( VAR_202 , VAR_203 ) ; } else METHOD_51 ( VAR_204 , 1 , VAR_205 ) ; METHOD_52 ( VAR_206 , 1 , VAR_207 ) ; METHOD_53 ( VAR_208 , 1 , VAR_209 ) ; METHOD_54 ( VAR_210 , 1 , VAR_211 ) ; METHOD_55 ( VAR_212 , 1 , VAR_213 ) ; METHOD_56 ( VAR_214 , 1 , VAR_215 ) ; METHOD_57 ( VAR_216 , 1 , VAR_217 ) ; break ; } { TYPE_17 VAR_218 ; TYPE_18 * * VAR_219 ; if ( METHOD_58 ( VAR_220 , VAR_221 , & VAR_222 , & VAR_223 ) ) METHOD_59 ( VAR_224 , VAR_225 , VAR_226 , VAR_227 ) ; } { TYPE_19 VAR_228 ; const TYPE_20 * VAR_229 ; if ( METHOD_60 ( VAR_230 , VAR_231 , & VAR_232 ) ) { METHOD_61 ( VAR_233 , VAR_234 , VAR_235 ) ; if ( METHOD_62 ( VAR_236 , VAR_237 , & VAR_238 ) ) { TYPE_21 VAR_239 = METHOD_63 ( VAR_240 ) + 1 ; const TYPE_22 * VAR_241 = VAR_242 ; while ( VAR_243 > 1 ) { VAR_244 = METHOD_64 ( VAR_245 , '\\0' ) ; VAR_246 ++ ; VAR_247 += ( METHOD_65 ( VAR_248 ) + 1 ) ; VAR_249 -- ; } METHOD_66 ( VAR_250 , VAR_251 , VAR_252 , VAR_253 ) ; } } } { unsigned TYPE_23 VAR_254 , VAR_255 ; if ( VAR_256 == 1 ) { if ( VAR_257 < 0 ) { if ( METHOD_67 ( VAR_258 , VAR_259 , & VAR_260 , & VAR_261 ) ) METHOD_68 ( VAR_262 , VAR_263 , VAR_264 , VAR_265 ) ; } else METHOD_69 ( VAR_266 , VAR_267 , VAR_268 ++ , 0 ) ; } else { if ( METHOD_70 ( VAR_269 , VAR_270 , & VAR_271 , & VAR_272 ) ) { if ( VAR_273 < 0 ) METHOD_71 ( VAR_274 , VAR_275 , VAR_276 , VAR_277 ) ; else METHOD_72 ( VAR_278 , VAR_279 , VAR_280 ++ , 0 ) ; } } } for ( VAR_281 = VAR_282 ; VAR_283 < & VAR_284 [ VAR_285 ] ; VAR_286 ++ ) METHOD_73 ( VAR_287 -> VAR_288 , VAR_289 -> VAR_290 , VAR_291 -> VAR_292 ) ; VAR_293 = METHOD_74 ( VAR_294 , VAR_295 , VAR_296 , VAR_297 ) ; return ( VAR_298 ? ( * VAR_299 ) ( VAR_300 , VAR_301 , VAR_302 , VAR_303 , VAR_304 ) : VAR_305 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 ; if ( METHOD_1 ( ) ) { METHOD_2 ( "infoappwebconfig" , 4 , "Alreadylogging.IgnoringErrorLogdirective" ) ; return 0 ; } VAR_12 = VAR_13 ; VAR_14 = 0 ; VAR_15 = 0 ; VAR_16 = 0 ; VAR_17 = 0 ; VAR_18 = 0 ; for ( VAR_19 = METHOD_3 ( METHOD_4 ( VAR_20 ) , & VAR_21 ) ; VAR_22 ; VAR_23 = METHOD_5 ( VAR_24 , & VAR_25 ) ) { if ( ! VAR_26 ) { VAR_27 = METHOD_6 ( METHOD_7 ( VAR_28 -> VAR_29 , "LOG_DIR" ) , METHOD_8 ( VAR_30 -> VAR_31 , VAR_32 ) ) ; } else {  VAR_33 = METHOD_9 ( VAR_34 , "=\\t," , & VAR_35 ) ;  VAR_36 = strim ( VAR_37 , "\\"\'" , MPR_TRIM_BOTH ) ; if ( smatch ( VAR_38 , "size" ) ) { VAR_39 = ( TYPE_8 ) getnum ( VAR_40 ) ; } else if ( smatch ( VAR_41 , "level" ) ) { VAR_42 = atoi ( VAR_43 ) ; } else if ( smatch ( VAR_44 , "backup" ) ) { VAR_45 = atoi ( VAR_46 ) ; } else if ( smatch ( VAR_47 , "anew" ) ) { VAR_48 |= MPR_LOG_ANEW ; } else if ( smatch ( VAR_49 , "stamp" ) ) { VAR_50 = httpGetTicks ( VAR_51 ) ; } else { METHOD_10 ( "errorappwebconfig" , 0 , "UnknownErrorLogoption%s" , VAR_52 ) ; } } } if ( VAR_53 < ( 10 * 1000 ) ) { METHOD_11 ( "errorappwebconfig" , 0 , "Sizeistoosmall.Mustbelargerthan10K" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( VAR_54 == 0 ) { METHOD_12 ( "errorappwebconfig" , 0 , "Missingfilename" ) ; return MPR_ERR_BAD_SYNTAX ; } mprSetLogBackup ( VAR_55 , VAR_56 , VAR_57 ) ; if ( ! smatch ( VAR_58 , "stdout" ) && ! smatch ( VAR_59 , "stderr" ) ) { VAR_60 = httpMakePath ( VAR_61 -> VAR_62 , VAR_63 -> configDir , VAR_64 ) ; } if ( mprStartLogging ( VAR_65 , MPR_LOG_DETAILED ) < 0 ) { METHOD_13 ( "errorappwebconfig" , 0 , "CannotwritetoErrorLog:%s" , VAR_66 ) ; return MPR_ERR_BAD_SYNTAX ; } mprSetLogLevel ( VAR_67 ) ; mprLogHeader ( ) ; if ( VAR_68 ) { httpSetTimestamp ( VAR_69 ) ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ,  TYPE_3 * VAR_2 ) {   TYPE_4 * VAR_3 = VAR_4 -> VAR_5 [ VAR_6 ] ;  TYPE_5 * VAR_7 = VAR_8 -> VAR_9 [ VAR_10 ] ; unsigned TYPE_6 ( * VAR_11 ) [ VAR_12 ] [ VAR_13 ] [ VAR_14 ] = VAR_15 -> VAR_16 . VAR_17 . VAR_18 [ VAR_19 ] ; TYPE_7 VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; ++ VAR_28 ) { for ( VAR_29 = 0 ; VAR_30 < VAR_31 ; ++ VAR_32 ) { for ( VAR_33 = 0 ; VAR_34 < VAR_35 ; ++ VAR_36 ) { for ( VAR_37 = 0 ; VAR_38 < METHOD_1 ( VAR_39 ) ; ++ VAR_40 ) { METHOD_2 ( VAR_41 , VAR_42 [ VAR_43 ] [ VAR_44 ] [ VAR_45 ] [ VAR_46 ] , VAR_47 [ VAR_48 ] [ VAR_49 ] [ VAR_50 ] [ VAR_51 ] ) ; VAR_52 [ VAR_53 ] [ VAR_54 ] [ VAR_55 ] [ VAR_56 ] [ 0 ] [ 1 ] = VAR_57 [ VAR_58 ] [ VAR_59 ] [ VAR_60 ] [ VAR_61 ] - VAR_62 [ VAR_63 ] [ VAR_64 ] [ VAR_65 ] [ VAR_66 ] [ 0 ] [ 0 ] ; for ( VAR_67 = 0 ; VAR_68 < VAR_69 ; ++ VAR_70 ) VAR_71 [ VAR_72 ] [ VAR_73 ] [ VAR_74 ] [ VAR_75 ] [ VAR_76 ] = METHOD_3 ( VAR_77 [ VAR_78 ] [ VAR_79 ] [ VAR_80 ] [ VAR_81 ] [ VAR_82 ] [ 0 ] , VAR_83 [ VAR_84 ] [ VAR_85 ] [ VAR_86 ] [ VAR_87 ] [ VAR_88 ] [ 1 ] ) ; } } } } }
static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; struct STRUCT_OR_UNION_0 VAR_4 = { } ;  METHOD_1 ( VAR_5 ) ;  VAR_6 = METHOD_2 ( VAR_7 , VAR_8 , VAR_9 ? VAR_10 : VAR_11 ) ; if ( VAR_12 < 0 ) return METHOD_3 ( VAR_13 , "Failedto%sUTF-8kbdmodeon%s:%m" , METHOD_4 ( VAR_14 ) , VAR_15 ) ; VAR_16 = METHOD_5 ( VAR_17 , VAR_18 ? "\\033%G" : "\\033%@" , 3 , VAR_19 ) ; if ( VAR_20 < 0 ) return METHOD_6 ( VAR_21 , "Failedto%sUTF-8termprocessingon%s:%m" , METHOD_7 ( VAR_22 ) , VAR_23 ) ; VAR_24 = METHOD_8 ( VAR_25 , & VAR_26 ) ; if ( VAR_27 >= 0 ) { METHOD_9 ( VAR_28 . VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 = METHOD_10 ( VAR_33 , VAR_34 , & VAR_35 ) ; } if ( VAR_36 < 0 ) return METHOD_11 ( VAR_37 , "Failedto%siutf8flagon%s:%m" , METHOD_12 ( VAR_38 ) , VAR_39 ) ; METHOD_13 ( "UTF-8kbdmode%sdon%s" , METHOD_14 ( VAR_40 ) , VAR_41 ) ; return 0 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  { TYPE_1 VAR_1 [ 3 ] = { 0xe , 0x80 , 0 } ; TYPE_2 VAR_2 [ ] = { 0 } ;  if ( METHOD_1 ( VAR_3 -> VAR_4 , VAR_5 , 3 , VAR_6 , 1 , 0 ) < 0 )  METHOD_2 ( "command0x0etransferfailed." ) ;  VAR_7 [ 0 ] = 0xe ;   VAR_8 [ 1 ] = 0x02 ;   VAR_9 [ 2 ] = 1 ;   if ( METHOD_3 ( VAR_10 -> VAR_11 , VAR_12 , 3 , VAR_13 , 1 , 0 ) < 0 )  METHOD_4 ( "command0x0etransferfailed." ) ;  METHOD_5 ( 300 ) ;  VAR_14 [ 0 ] = 0xe ;  VAR_15 [ 1 ] = 0x83 ;   VAR_16 [ 2 ] = 0 ;   if ( METHOD_6 ( VAR_17 -> VAR_18 , VAR_19 , 3 , VAR_20 , 1 , 0 ) < 0 )  METHOD_7 ( "command0x0etransferfailed." ) ;  VAR_21 [ 0 ] = 0xe ;  VAR_22 [ 1 ] = 0x83 ; VAR_23 [ 2 ] = 1 ;  if ( METHOD_8 ( VAR_24 -> VAR_25 , VAR_26 , 3 , VAR_27 , 1 , 0 ) < 0 )   METHOD_9 ( "command0x0etransferfailed." ) ;  VAR_28 [ 0 ] = 0x51 ; if ( METHOD_10 ( VAR_29 -> VAR_30 , VAR_31 , 1 , VAR_32 , 1 , 0 ) < 0 ) METHOD_11 ( "command0x51transferfailed." ) ;  VAR_33 -> VAR_34 [ 0 ] . VAR_35 = METHOD_12 ( VAR_36 , & VAR_37 ,   & VAR_38 -> VAR_39 -> VAR_40 ) ;   if ( VAR_41 -> VAR_42 [ 0 ] . VAR_43 == VAR_44 )  return - VAR_45 ;  if ( METHOD_13 ( VAR_46 , VAR_47 -> VAR_48 [ 0 ] . VAR_49 ,  & VAR_50 ,  & VAR_51 -> VAR_52 -> VAR_53 ) ) {  METHOD_14 ( "AttachedDS3000/TS2020!" ) ; return 0 ; } METHOD_15 ( "FailedtoattachDS3000/TS2020!" ) ; return - VAR_54 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  METHOD_1 ( METHOD_2 ( STRUCT_OR_UNION_3 ) ) ;  return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 * VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 ; if ( VAR_6 != VAR_7 ) VAR_8 = VAR_9 ; else if ( ! VAR_10 || ! VAR_11 || ! VAR_12 ) VAR_13 = VAR_14 ; else if ( VAR_15 -> VAR_16 != VAR_17 ) VAR_18 = VAR_19 ; else if ( ! ( VAR_20 -> VAR_21 & VAR_22 ) ) VAR_23 = VAR_24 ;  else if ( ( VAR_25 & VAR_26 ) && ! ( VAR_27 -> VAR_28 & VAR_29 ) )  VAR_30 = VAR_31 ; else if ( ( VAR_32 & VAR_33 ) && ! ( VAR_34 -> VAR_35 & VAR_36 ) ) VAR_37 = VAR_38 ; else if ( ( VAR_39 & VAR_40 ) && ! ( VAR_41 -> VAR_42 & VAR_43 ) ) VAR_44 = VAR_45 ; else { VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 ; VAR_53 -> VAR_54 = VAR_55 ; VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 ; VAR_63 = VAR_64 -> VAR_65 -> METHOD_1 ( VAR_66 , VAR_67 ) ; if ( VAR_68 ) { VAR_69 -> VAR_70 = VAR_71 -> VAR_72 ? VAR_73 -> VAR_74 -> VAR_75 : VAR_76 ; METHOD_2 ( VAR_77 ) ; }  if ( VAR_78 -> VAR_79 )  VAR_80 -> VAR_81 -> VAR_82 = VAR_83 -> VAR_84 ; } return METHOD_3 ( VAR_85 , VAR_86 ) ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 )  { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = 0 , * VAR_4 = 0 , * VAR_5 = METHOD_1 ( ) ;  for ( VAR_6 = 0 ; VAR_7 && VAR_8 < VAR_9 ; ++ VAR_10 ) {   VAR_11 = METHOD_2 ( VAR_12 [ VAR_13 ] ) ;   if ( ! VAR_14 )  VAR_15 -> VAR_16 = VAR_17 ; else METHOD_3 ( VAR_18 , VAR_19 ) ; VAR_20 = VAR_21 ; } return VAR_22 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 ; TYPE_2 VAR_4 = METHOD_1 ( VAR_5 -> VAR_6 . VAR_7 ) ; if ( METHOD_2 ( VAR_8 ) ) goto VAR_9 ; if ( VAR_10 -> VAR_11 < 0 ) { METHOD_3 ( "lockd:unlockfailed(err=%d)\\n" , - VAR_12 -> VAR_13 ) ;  goto VAR_14 ;  } if ( VAR_15 == VAR_16 ) { METHOD_4 ( VAR_17 , VAR_18 ) ; goto VAR_19 ; } if ( VAR_20 != VAR_21 ) printk ( KERN_WARNING "lockd:unexpectedunlockstatus:%d\\n" , VAR_22 ) ; VAR_23 : return ; VAR_24 : METHOD_5 ( VAR_25 -> VAR_26 ) ; VAR_27 : METHOD_6 ( VAR_28 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 ; if ( VAR_7 -> VAR_8 ) { TYPE_6 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ;  TYPE_7 * VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ;  for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; ++ VAR_25 ) VAR_26 -> VAR_27 [ VAR_28 ] [ VAR_29 + VAR_30 ] = VAR_31 -> VAR_32 [ VAR_33 ] [ VAR_34 + VAR_35 ] * VAR_36 [ VAR_37 ] + VAR_38 -> VAR_39 [ VAR_40 ] [ VAR_41 ] * VAR_42 [ VAR_43 - 1 - VAR_44 ] ; } } VAR_45 = VAR_46 -> VAR_47 ; VAR_48 -> VAR_49 = VAR_50 - VAR_51 ; for ( VAR_52 = 0 ; VAR_53 < VAR_54 -> VAR_55 ; ++ VAR_56 ) for ( VAR_57 = 0 ; VAR_58 + VAR_59 < VAR_60 ; ++ VAR_61 ) VAR_62 -> VAR_63 [ VAR_64 ] [ VAR_65 ] = VAR_66 -> VAR_67 [ VAR_68 ] [ VAR_69 + VAR_70 ] ; if ( ! VAR_71 ) return 0 ; if ( VAR_72 < VAR_73 ) VAR_74 = VAR_75 ; VAR_76 -> VAR_77 += VAR_78 - VAR_79 ; return VAR_80 - VAR_81 ; }
TYPE_0 * * METHOD_0 ( TYPE_1 VAR_0 , unsigned TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = 0 ; TYPE_4 VAR_3 , VAR_4 ; METHOD_1 ( VAR_5 > 4 ) ;  TYPE_5 VAR_6 = METHOD_2 ( VAR_7 + VAR_8 ) ;  TYPE_6 * * VAR_9 = METHOD_3 ( TYPE_7 * , ( VAR_10 + 1 ) ) ; VAR_11 += 4 ; if ( ! VAR_12 ) return VAR_13 ; for ( VAR_14 = 0 ; VAR_15 < VAR_16 ; VAR_17 ++ ) { TYPE_8 * VAR_18 = VAR_19 [ VAR_20 ] = METHOD_4 ( TYPE_9 , 1 ) ; TYPE_10 * VAR_21 = VAR_22 ; METHOD_5 ( VAR_23 , VAR_24 ) ; VAR_25 -> VAR_26 = METHOD_6 ( VAR_27 + VAR_28 ) ; VAR_29 += 2 ; METHOD_7 ( VAR_30 , VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_8 ( VAR_34 + VAR_35 ) ; VAR_36 += 2 ; if ( VAR_37 -> VAR_38 & VAR_39 ) { VAR_40 -> VAR_41 = METHOD_9 ( VAR_42 , 1 ) ; METHOD_10 ( VAR_43 -> VAR_44 , VAR_45 + VAR_46 , VAR_47 ) ; VAR_48 += sizeof ( VAR_49 ) ; METHOD_11 ( VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = METHOD_12 ( VAR_54 + VAR_55 ) ; VAR_56 += 4 ; if ( VAR_57 -> VAR_58 > 0 ) { TYPE_11 VAR_59 ; VAR_60 -> VAR_61 = METHOD_13 ( VAR_62 , VAR_63 -> VAR_64 ) ; for ( VAR_65 = 0 ; VAR_66 < VAR_67 -> VAR_68 ; VAR_69 ++ ) { TYPE_12 VAR_70 ; METHOD_14 ( VAR_71 , VAR_72 ) ; VAR_73 -> VAR_74 [ VAR_75 ] . VAR_76 = METHOD_15 ( VAR_77 + VAR_78 ) ; VAR_79 += 4 ; VAR_80 -> VAR_81 [ VAR_82 ] . VAR_83 = METHOD_16 ( unsigned TYPE_13 , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 ) ;  for ( VAR_88 = 0 ; VAR_89 < ( VAR_90 -> VAR_91 [ VAR_92 ] . VAR_93 >> 1 ) ; VAR_94 ++ )  VAR_95 -> VAR_96 [ VAR_97 ] . VAR_98 [ VAR_99 ] = ( VAR_100 + VAR_101 ) [ VAR_102 * 2 ] ; VAR_103 += METHOD_17 ( VAR_104 -> VAR_105 [ VAR_106 ] . VAR_107 ) ; } } else { METHOD_18 ( VAR_108 , VAR_109 ) ; VAR_110 -> VAR_111 = METHOD_19 ( VAR_112 + VAR_113 ) ; VAR_114 += 4 ; } } if ( VAR_115 -> VAR_116 & VAR_117 || VAR_118 -> VAR_119 == VAR_120 || VAR_121 -> VAR_122 == VAR_123 || VAR_124 -> VAR_125 == VAR_126 || VAR_127 -> VAR_128 == VAR_129 ) { METHOD_20 ( VAR_130 , VAR_131 ) ; VAR_132 -> VAR_133 = METHOD_21 ( VAR_134 + VAR_135 ) ; VAR_136 += 4 ; } else { VAR_137 -> VAR_138 = 1 ; } if ( VAR_139 -> VAR_140 & VAR_141 ) { VAR_142 -> VAR_143 -= VAR_144 ; } VAR_145 = METHOD_22 ( VAR_146 ) ; for ( VAR_147 = 0 ; VAR_148 < VAR_149 -> VAR_150 ; VAR_151 ++ ) { switch ( VAR_152 -> VAR_153 ) { case VAR_154 : VAR_155 -> VAR_156 = 2 ; METHOD_23 ( VAR_157 , VAR_158 ) ; VAR_159 -> VAR_160 . VAR_161 = METHOD_24 ( VAR_162 + VAR_163 ) ; VAR_164 += 4 ; break ; case VAR_165 : VAR_166 -> VAR_167 = 4 ; METHOD_25 ( VAR_168 , VAR_169 ) ; VAR_170 -> VAR_171 . VAR_172 = METHOD_26 ( VAR_173 + VAR_174 ) ; VAR_175 += 4 ; VAR_176 ++ ; break ; case VAR_177 : case VAR_178 : VAR_179 -> VAR_180 = 4 ; METHOD_27 ( VAR_181 , VAR_182 ) ; VAR_183 -> VAR_184 . VAR_185 = METHOD_28 ( VAR_186 + VAR_187 ) ; VAR_188 += VAR_189 -> VAR_190 ; break ; case VAR_191 : VAR_192 -> VAR_193 = 8 ; METHOD_29 ( VAR_194 , VAR_195 ) ; VAR_196 -> VAR_197 . VAR_198 [ 0 ] = METHOD_30 ( VAR_199 + VAR_200 ) ; METHOD_31 ( VAR_201 + 4 , VAR_202 ) ; VAR_203 -> VAR_204 . VAR_205 [ 1 ] = METHOD_32 ( VAR_206 + VAR_207 + 4 ) ; VAR_208 += 8 ; VAR_209 ++ ; break ; case VAR_210 : case VAR_211 : case VAR_212 : case VAR_213 : VAR_214 -> VAR_215 = 8 ; METHOD_33 ( VAR_216 , VAR_217 ) ; VAR_218 -> VAR_219 . VAR_220 [ 0 ] = METHOD_34 ( VAR_221 + VAR_222 ) ; METHOD_35 ( VAR_223 + 4 , VAR_224 ) ; VAR_225 -> VAR_226 . VAR_227 [ 1 ] = METHOD_36 ( VAR_228 + VAR_229 + 4 ) ; VAR_230 += VAR_231 -> VAR_232 ; break ; case VAR_233 : VAR_234 -> VAR_235 = sizeof ( VAR_236 ) ; METHOD_37 ( & VAR_237 -> VAR_238 . VAR_239 , VAR_240 + VAR_241 , VAR_242 ) ; VAR_243 += VAR_244 -> VAR_245 ; break ; case VAR_246 : case VAR_247 : case VAR_248 : case VAR_249 : METHOD_38 ( VAR_250 , VAR_251 ) ; VAR_252 -> VAR_253 = METHOD_39 ( VAR_254 + VAR_255 ) ; VAR_256 += 4 ;  if ( VAR_257 -> VAR_258 == VAR_259 )  {  VAR_260 -> VAR_261 . VAR_262 = ( unsigned TYPE_14 * ) METHOD_40 ( VAR_263 -> VAR_264 , VAR_265 + VAR_266 ) ;  } else { VAR_267 -> VAR_268 . VAR_269 = METHOD_41 ( unsigned TYPE_15 , VAR_270 -> VAR_271 ) ; METHOD_42 ( VAR_272 -> VAR_273 . VAR_274 , VAR_275 + VAR_276 , VAR_277 -> VAR_278 ) ; } VAR_279 += METHOD_43 ( VAR_280 -> VAR_281 ) ; VAR_282 ++ ; break ; case VAR_283 : case VAR_284 : case VAR_285 : METHOD_44 ( VAR_286 , "Invalidattribute,inputfilemaybecorrupted\\n" ) ; if ( ! VAR_287 ) METHOD_45 ( 1 ) ; return VAR_288 ; default : METHOD_46 ( VAR_289 , "Undefinedattribute,inputfilemaybecorrupted\\n" ) ; if ( ! VAR_290 ) METHOD_47 ( 1 ) ; return VAR_291 ; } if ( VAR_292 ) METHOD_48 ( VAR_293 [ VAR_294 ] ) ; } } VAR_295 [ VAR_296 ] = VAR_297 ; return VAR_298 ; }
static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) {  TYPE_4 * const VAR_3 = & VAR_4 -> VAR_5 ;  const TYPE_5 * VAR_6 = VAR_7 ; const TYPE_6 VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 ) ; const TYPE_7 VAR_11 = 1 << VAR_12 -> VAR_13 ; const TYPE_8 VAR_14 = 1 << VAR_15 -> VAR_16 ;  const TYPE_9 VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 & ~ 1 , VAR_21 ) ;   TYPE_10 VAR_22 [ 1 << 6 ] ;  TYPE_11 VAR_23 ; TYPE_12 VAR_24 = - 1 ; METHOD_3 ( VAR_25 <= ( 1 << 6 ) ) ; METHOD_4 ( VAR_26 == 1 ) ; ( TYPE_13 ) VAR_27 ; if ( VAR_28 -> VAR_29 == 0 ) {  const TYPE_14 VAR_30 = VAR_31 -> VAR_32 . VAR_33 & ~ 1 ;  TYPE_15 TYPE_16 ; METHOD_5 ( VAR_34 , VAR_35 -> VAR_36 ,  METHOD_6 ( VAR_37 * sizeof ( * VAR_38 -> VAR_39 ) ) ) ;  for ( TYPE_17 = 0 ; TYPE_18 < VAR_40 ; ++ TYPE_19 ) {  TYPE_20 * const VAR_41 = & VAR_42 -> VAR_43 [ TYPE_21 ] ;  ++ VAR_44 -> VAR_45 ;  METHOD_7 ( VAR_46 ) ;  METHOD_8 ( VAR_47 , VAR_48 -> VAR_49 , METHOD_9 ( 32 , sizeof ( TYPE_22 ) ) ) ; METHOD_10 ( VAR_50 , VAR_51 -> VAR_52 , METHOD_11 ( sizeof ( TYPE_23 ) ) ) ;  if ( TYPE_24 < VAR_53 - 1 && ! METHOD_12 ( VAR_54 ) ) {  METHOD_13 ( & VAR_55 -> VAR_56 , VAR_57 , "Tiledecoderthreadcreationfailed" ) ; } } } for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; ++ VAR_61 ) {  VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 = ( TYPE_25 ) VAR_66 ;   }  METHOD_14 ( VAR_67 -> VAR_68 , 0 , sizeof ( * VAR_69 -> VAR_70 ) * VAR_71 * 2 * VAR_72 ) ;  METHOD_15 ( VAR_73 -> VAR_74 , 0 ,  sizeof ( * VAR_75 -> VAR_76 ) * VAR_77 ) ;  for ( VAR_78 = 0 ; VAR_79 < VAR_80 ; ++ VAR_81 ) {  const TYPE_26 VAR_82 =  METHOD_16 ( VAR_83 , VAR_84 == VAR_85 - 1 , & VAR_86 -> VAR_87 , & VAR_88 ) ;  TYPE_27 * const VAR_89 = & VAR_90 [ VAR_91 ] ; VAR_92 -> VAR_93 = VAR_94 ; VAR_95 -> VAR_96 = VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 += VAR_102 ; } METHOD_17 ( VAR_103 , VAR_104 , sizeof ( VAR_105 [ 0 ] ) , VAR_106 ) ; { TYPE_28 VAR_107 = 0 ; while ( VAR_108 < VAR_109 ) { const TYPE_29 VAR_110 = VAR_111 [ VAR_112 ] ; const TYPE_30 VAR_113 = METHOD_18 ( VAR_114 + VAR_115 , VAR_116 ) - 1 ; METHOD_19 ( VAR_117 + VAR_118 , VAR_119 + VAR_120 + 1 , ( VAR_121 - VAR_122 ) * sizeof ( VAR_123 [ 0 ] ) ) ; VAR_124 [ VAR_125 ] = VAR_126 ; VAR_127 = VAR_128 + 1 ; } } VAR_129 = 0 ; while ( VAR_130 < VAR_131 ) { TYPE_31 TYPE_32 ; for ( TYPE_33 = 0 ; TYPE_34 < VAR_132 && VAR_133 < VAR_134 ; ++ TYPE_35 ) { TYPE_36 * const VAR_135 = & VAR_136 -> VAR_137 [ TYPE_37 ] ; TYPE_38 * const VAR_138 = ( TYPE_39 * ) VAR_139 -> VAR_140 ; TYPE_40 * const VAR_141 = ( TYPE_41 * ) VAR_142 -> VAR_143 ; TYPE_42 * const VAR_144 = & VAR_145 [ VAR_146 ] ; VAR_147 -> VAR_148 = VAR_149 ; VAR_150 -> VAR_151 = VAR_152 -> VAR_153 ; VAR_154 -> VAR_155 . VAR_156 = 0 ; METHOD_20 ( VAR_157 , VAR_158 -> VAR_159 , 0 , VAR_160 -> VAR_161 ) ; METHOD_21 ( VAR_162 -> VAR_163 , VAR_164 , VAR_165 -> VAR_166 , & VAR_167 -> VAR_168 , & VAR_169 -> VAR_170 ) ; METHOD_22 ( VAR_171 , & VAR_172 -> VAR_173 ) ; METHOD_23 ( VAR_174 -> VAR_175 . VAR_176 ) ; VAR_177 -> VAR_178 = 0 ; if ( TYPE_43 == VAR_179 - 1 || VAR_180 == VAR_181 - 1 ) { METHOD_24 ( VAR_182 ) ; } else {  METHOD_25 ( VAR_183 ) ;  } if ( VAR_184 -> VAR_185 == VAR_186 - 1 ) { VAR_187 = TYPE_44 ; } ++ VAR_188 ; } for ( ; TYPE_45 > 0 ; -- TYPE_46 ) {  TYPE_47 * const VAR_189 = & VAR_190 -> VAR_191 [ TYPE_48 - 1 ] ;   VAR_192 -> VAR_193 . VAR_194 |= ! METHOD_26 ( VAR_195 ) ;  } if ( VAR_196 > - 1 ) { TYPE_49 * const VAR_197 = ( TYPE_50 * ) VAR_198 -> VAR_199 [ VAR_200 ] . VAR_201 ;  VAR_202 = METHOD_27 ( & VAR_203 -> VAR_204 ) ;   VAR_205 = - 1 ;  } } return VAR_206 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_3 * VAR_7 , * VAR_8 ; TYPE_3 VAR_9 = VAR_10 & 0xff ; TYPE_4 VAR_11 = VAR_12 >> 8 ; TYPE_5 VAR_13 ; switch ( VAR_14 ) { case VAR_15 : if ( VAR_16 & VAR_17 ) return - VAR_18 ; case VAR_19 : case VAR_20 : case VAR_21 : case VAR_22 : case VAR_23 : case VAR_24 : case VAR_25 : break ; default : return - VAR_26 ; } METHOD_2 ( & VAR_27 ) ;  VAR_28 = - VAR_29 ;  if ( ! VAR_30 -> VAR_31 ) goto VAR_32 ; VAR_33 = - VAR_34 ; if ( VAR_35 -> VAR_36 ) goto VAR_37 ; if ( VAR_38 == VAR_39 || ( VAR_40 & VAR_41 ) ) { VAR_42 = - VAR_43 ; VAR_44 = METHOD_3 ( sizeof ( * VAR_45 ) , VAR_46 ) ; if ( ! VAR_47 ) goto VAR_48 ; METHOD_4 ( & VAR_49 -> VAR_50 , 0 ) ; METHOD_5 ( & VAR_51 -> VAR_52 , 0 ) ; METHOD_6 ( & VAR_53 -> VAR_54 , 0 ) ; VAR_55 -> VAR_56 = VAR_57 ; } if ( VAR_58 & VAR_59 ) { if ( VAR_60 != 0 ) { VAR_61 = - VAR_62 ; goto VAR_63 ; } if ( ! METHOD_7 ( VAR_64 , & VAR_65 ) ) { VAR_66 = - VAR_67 ; goto VAR_68 ; } VAR_69 &= ~ ( VAR_70 >> 8 ) ; } VAR_71 = VAR_72 ; METHOD_8 ( VAR_73 , & VAR_74 , VAR_75 ) { if ( VAR_76 -> VAR_77 == VAR_78 && METHOD_9 ( & VAR_79 -> VAR_80 ) == METHOD_10 ( VAR_81 ) ) { VAR_82 = VAR_83 ; break ; } } VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 -> VAR_88 != VAR_89 ) goto VAR_90 ; if ( ! VAR_91 ) { VAR_92 = - VAR_93 ; VAR_94 = METHOD_11 ( sizeof ( * VAR_95 ) , VAR_96 ) ; if ( ! VAR_97 ) goto VAR_98 ; METHOD_12 ( & VAR_99 -> VAR_100 , METHOD_13 ( VAR_101 ) ) ; VAR_102 -> VAR_103 = VAR_104 ; VAR_105 -> VAR_106 = VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; METHOD_14 ( & VAR_111 -> VAR_112 ) ; METHOD_15 ( & VAR_113 -> VAR_114 ) ; METHOD_16 ( & VAR_115 -> VAR_116 , 0 ) ; METHOD_17 ( VAR_117 ) ; VAR_118 -> VAR_119 . VAR_120 = VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 . VAR_126 = VAR_127 -> VAR_128 . VAR_129 ; VAR_130 -> VAR_131 . VAR_132 = VAR_133 ; VAR_134 -> VAR_135 . VAR_136 = VAR_137 ; VAR_138 -> VAR_139 . VAR_140 = VAR_141 ; METHOD_18 ( & VAR_142 -> VAR_143 , & VAR_144 ) ; } VAR_145 = - VAR_146 ;  if ( VAR_147 -> VAR_148 == VAR_149 &&  VAR_150 -> VAR_151 . VAR_152 == VAR_153 -> VAR_154 . VAR_155 && VAR_156 -> VAR_157 . VAR_158 == VAR_159 -> VAR_160 . VAR_161 ) { VAR_162 = - VAR_163 ; if ( METHOD_19 ( & VAR_164 -> VAR_165 ) < VAR_166 ) { METHOD_20 ( & VAR_167 -> VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_21 ( & VAR_172 -> VAR_173 , METHOD_22 ( & VAR_174 -> VAR_175 ) + 1 ) ; METHOD_23 ( VAR_176 , VAR_177 ) ; VAR_178 = 0 ; } }  VAR_179 :  if ( VAR_180 && VAR_181 ) { METHOD_24 ( VAR_182 ) ; VAR_183 -> VAR_184 = VAR_185 ; } METHOD_25 ( & VAR_186 ) ; return VAR_187 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ;  struct STRUCT_OR_UNION_0 * VAR_4 = & VAR_5 -> VAR_6 ;  const TYPE_3 VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 ) ; const TYPE_4 VAR_10 = METHOD_2 ( VAR_11 , VAR_12 -> VAR_13 + VAR_14 -> VAR_15 ) ; TYPE_5 VAR_16 ; if ( VAR_17 -> VAR_18 == VAR_19 || VAR_20 -> VAR_21 || ( VAR_22 -> VAR_23 && ! VAR_24 -> VAR_25 . VAR_26 ) ) { METHOD_3 ( VAR_27 ) ; METHOD_4 ( VAR_28 ) ; VAR_29 -> VAR_30 = VAR_31 ;  METHOD_5 ( ) ;   for ( VAR_32 = VAR_33 ; VAR_34 <= VAR_35 ; VAR_36 ++ ) {   TYPE_6 VAR_37 , VAR_38 ;   if ( METHOD_6 ( VAR_39 ) == 1 ) {  METHOD_7 ( VAR_40 ) = 1 ; continue ; }  VAR_41 = METHOD_8 ( & VAR_42 -> VAR_43 , VAR_44 , VAR_45 * METHOD_9 ( VAR_46 ) ) ;   METHOD_10 ( VAR_47 , METHOD_11 ( VAR_48 ) , VAR_49 , VAR_50 ) ;   METHOD_12 ( VAR_51 , METHOD_13 ( VAR_52 ) , VAR_53 ) ;   VAR_54 = METHOD_14 ( VAR_55 , VAR_56 -> VAR_57 + VAR_58 +  VAR_59 -> VAR_60 ) ; METHOD_15 ( VAR_61 ) = ( TYPE_7 ) VAR_62 / VAR_63 ; } } }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_4 * VAR_2 ; VAR_3 * VAR_4 ;  if ( ! METHOD_1 ( STRUCT_OR_UNION_5 , & VAR_5 ) )  return - VAR_6 ; switch ( STRUCT_OR_UNION_6 -> VAR_7 ) { case VAR_8 : if ( VAR_9 == 0 || VAR_10 == VAR_11 ) VAR_12 = VAR_13 ; break ; case VAR_14 : switch ( VAR_15 ) { case 0 : case VAR_16 : VAR_17 = VAR_18 ; break ; case VAR_19 : TYPE_3 TYPE_4 case VAR_20 : case VAR_21 : TYPE_5 TYPE_6 case VAR_22 : TYPE_7 TYPE_8 case VAR_23 : return - VAR_24 ; TYPE_9 TYPE_10 case VAR_25 : if ( METHOD_2 ( VAR_26 ) ) return - VAR_27 ; break ; TYPE_11 TYPE_12 case VAR_28 : if ( METHOD_3 ( VAR_29 ) ) return - VAR_30 ; default : break ; } break ; case VAR_31 : break ; default : return - VAR_32 ; } VAR_33 = METHOD_4 ( STRUCT_OR_UNION_7 , VAR_34 , VAR_35 , & VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) return - VAR_40 ; VAR_41 = METHOD_5 ( VAR_42 ) -> VAR_43 = METHOD_6 ( ) ; if ( ! VAR_44 ) { METHOD_7 ( VAR_45 ) ; return - VAR_46 ; } METHOD_8 ( STRUCT_OR_UNION_8 , VAR_47 ) ; VAR_48 -> VAR_49 = VAR_50 ; STRUCT_OR_UNION_9 -> VAR_51 = & VAR_52 ; VAR_53 -> VAR_54 = VAR_55 ; VAR_56 -> VAR_57 = VAR_58 ; return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 METHOD_1 { TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ;  ( TYPE_8 METHOD_2 METHOD_3 ( VAR_10 , VAR_11 , & VAR_12 METHOD_4 ;  if ( VAR_13 != VAR_14 && VAR_15 != 8 && VAR_16 > 1 METHOD_5 { METHOD_6 ( VAR_17 , "%s:Cannothandledifferentplanarconfigurationw/bits/sample!=8\\n" , METHOD_7 ( VAR_18 METHOD_8 METHOD_9 ; return ( VAR_19 METHOD_10 ; } METHOD_11 ( VAR_20 , VAR_21 , & VAR_22 METHOD_12 ; METHOD_13 ( VAR_23 , VAR_24 , & VAR_25 METHOD_14 ; if ( ! ( METHOD_15 ( VAR_26 METHOD_16 || METHOD_17 ( VAR_27 METHOD_18 METHOD_19 METHOD_20 { TYPE_9 VAR_28 = ( TYPE_10 METHOD_21 - 1L ; METHOD_22 ( VAR_29 , VAR_30 , & VAR_31 METHOD_23 ; VAR_32 = ! VAR_33 && ( VAR_34 == VAR_35 METHOD_24 ; } else { if ( VAR_36 METHOD_25 { METHOD_26 ( VAR_37 , "%s:Cannothandletiledconfigurationw/biasimage\\n" , METHOD_27 ( VAR_38 METHOD_28 METHOD_29 ; return ( VAR_39 METHOD_30 ; } if ( METHOD_31 ( VAR_40 METHOD_32 METHOD_33 { if ( ! METHOD_34 ( VAR_41 , VAR_42 , & VAR_43 METHOD_35 METHOD_36 VAR_44 = VAR_45 ; if ( ! METHOD_37 ( VAR_46 , VAR_47 , & VAR_48 METHOD_38 METHOD_39 VAR_49 = VAR_50 ; VAR_51 = ( VAR_52 == VAR_53 && VAR_54 == VAR_55 METHOD_40 ; } else { METHOD_41 ( VAR_56 , VAR_57 , & VAR_58 METHOD_42 ; METHOD_43 ( VAR_59 , VAR_60 , & VAR_61 METHOD_44 ; VAR_62 = ( VAR_63 == VAR_64 && VAR_65 == VAR_66 METHOD_45 ; } } TYPE_11 1 TYPE_12 0 TYPE_13 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 METHOD_46 ( ( TYPE_14 METHOD_47 ( ( ( VAR_72 METHOD_48 << 11 METHOD_49 | ( ( VAR_73 METHOD_50 << 3 METHOD_51 | ( ( VAR_74 METHOD_52 << 2 METHOD_53 | ( ( VAR_75 METHOD_54 << 1 METHOD_55 | ( VAR_76 METHOD_56 METHOD_57 METHOD_58 switch ( TYPE_15 ( VAR_77 , VAR_78 , METHOD_59 ( VAR_79 METHOD_60 , METHOD_61 ( VAR_80 METHOD_62 , VAR_81 METHOD_63 METHOD_64 { case TYPE_16 ( VAR_82 , VAR_83 , TYPE_17 , TYPE_18 , TYPE_19 METHOD_65 : case TYPE_20 ( VAR_84 , VAR_85 , TYPE_21 , TYPE_22 , TYPE_23 METHOD_66 : return VAR_86 ; case TYPE_24 ( VAR_87 , VAR_88 , TYPE_25 , TYPE_26 , TYPE_27 METHOD_67 : case TYPE_28 ( VAR_89 , VAR_90 , TYPE_29 , TYPE_30 , TYPE_31 METHOD_68 : return VAR_91 ; case TYPE_32 ( VAR_92 , VAR_93 , TYPE_33 , TYPE_34 , TYPE_35 METHOD_69 : case TYPE_36 ( VAR_94 , VAR_95 , TYPE_37 , TYPE_38 , TYPE_39 METHOD_70 : return VAR_96 ; case TYPE_40 ( VAR_97 , VAR_98 , TYPE_41 , TYPE_42 , TYPE_43 METHOD_71 : case TYPE_44 ( VAR_99 , VAR_100 , TYPE_45 , TYPE_46 , TYPE_47 METHOD_72 : return VAR_101 ; case TYPE_48 ( VAR_102 , VAR_103 , TYPE_49 , TYPE_50 , TYPE_51 METHOD_73 : case TYPE_52 ( VAR_104 , VAR_105 , TYPE_53 , TYPE_54 , TYPE_55 METHOD_74 : return VAR_106 ; case TYPE_56 ( VAR_107 , VAR_108 , TYPE_57 , TYPE_58 , TYPE_59 METHOD_75 : case TYPE_60 ( VAR_109 , VAR_110 , TYPE_61 , TYPE_62 , TYPE_63 METHOD_76 : return VAR_111 ; case TYPE_64 ( VAR_112 , VAR_113 , TYPE_65 , TYPE_66 , TYPE_67 METHOD_77 : case TYPE_68 ( VAR_114 , VAR_115 , TYPE_69 , TYPE_70 , TYPE_71 METHOD_78 : return VAR_116 ; case TYPE_72 ( VAR_117 , VAR_118 , TYPE_73 , TYPE_74 , TYPE_75 METHOD_79 : case TYPE_76 ( VAR_119 , VAR_120 , TYPE_77 , TYPE_78 , TYPE_79 METHOD_80 : return VAR_121 ; case TYPE_80 ( VAR_122 , VAR_123 , TYPE_81 , TYPE_82 , TYPE_83 METHOD_81 : case TYPE_84 ( VAR_124 , VAR_125 , TYPE_85 , TYPE_86 , TYPE_87 METHOD_82 : return VAR_126 ; case TYPE_88 ( VAR_127 , VAR_128 , TYPE_89 , TYPE_90 , TYPE_91 METHOD_83 : case TYPE_92 ( VAR_129 , VAR_130 , TYPE_93 , TYPE_94 , TYPE_95 METHOD_84 : return VAR_131 ; case TYPE_96 ( VAR_132 , VAR_133 , TYPE_97 , TYPE_98 , TYPE_99 METHOD_85 : case TYPE_100 ( VAR_134 , VAR_135 , TYPE_101 , TYPE_102 , TYPE_103 METHOD_86 : return VAR_136 ; case TYPE_104 ( VAR_137 , VAR_138 , TYPE_105 , TYPE_106 , TYPE_107 METHOD_87 : case TYPE_108 ( VAR_139 , VAR_140 , TYPE_109 , TYPE_110 , TYPE_111 METHOD_88 : return VAR_141 ; case TYPE_112 ( VAR_142 , VAR_143 , TYPE_113 , TYPE_114 , TYPE_115 METHOD_89 : return VAR_144 ? VAR_145 : VAR_146 ; case TYPE_116 ( VAR_147 , VAR_148 , TYPE_117 , TYPE_118 , TYPE_119 METHOD_90 : return VAR_149 ; case TYPE_120 ( VAR_150 , VAR_151 , TYPE_121 , TYPE_122 , TYPE_123 METHOD_91 : case TYPE_124 ( VAR_152 , VAR_153 , TYPE_125 , TYPE_126 , TYPE_127 METHOD_92 : return VAR_154 ; case TYPE_128 ( VAR_155 , VAR_156 , TYPE_129 , TYPE_130 , TYPE_131 METHOD_93 : case TYPE_132 ( VAR_157 , VAR_158 , TYPE_133 , TYPE_134 , TYPE_135 METHOD_94 : return VAR_159 ; case TYPE_136 ( VAR_160 , VAR_161 , TYPE_137 , TYPE_138 , TYPE_139 METHOD_95 : case TYPE_140 ( VAR_162 , VAR_163 , TYPE_141 , TYPE_142 , TYPE_143 METHOD_96 : return VAR_164 ; } TYPE_144 TYPE_145 TYPE_146 METHOD_97 ( VAR_165 , "tiffcp:%s:Don\'tknowhowtocopy/convertimage.\\n" , METHOD_98 ( VAR_166 METHOD_99 METHOD_100 ; return ( VAR_167 METHOD_101 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 ) { if ( VAR_2 -> VAR_3 )  VAR_4 -> VAR_5 . VAR_6 = VAR_7 -> VAR_8 ? VAR_9 -> VAR_10 : VAR_11 ;  return VAR_12 -> VAR_13 ; }
TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; TYPE_5 VAR_5 [ 128 METHOD_1 ; TYPE_6 VAR_6 = { . VAR_7 = VAR_8 } ;  for ( VAR_9 = VAR_10 = 0 ; VAR_11 < sizeof ( VAR_12 ) - 1 && VAR_13 [ VAR_14 METHOD_2 ; VAR_15 ++ , VAR_16 ++ ) {  if ( VAR_17 [ VAR_18 METHOD_3 == '' ) { VAR_19 -- ; continue ; } VAR_20 [ VAR_21 METHOD_4 = METHOD_5 ( ( const TYPE_7 ) VAR_22 [ VAR_23 METHOD_6 ) ; } VAR_24 [ VAR_25 METHOD_7 = 0 ; METHOD_8 ( & VAR_26 , VAR_27 ) ; VAR_28 . VAR_29 = VAR_30 ; if ( VAR_31 < 0 || VAR_32 > 1 ) { return - 1 ; } if ( ! VAR_33 [ VAR_34 METHOD_9 ( & VAR_35 , VAR_36 , VAR_37 ) ) { return - 1 ; } return VAR_38 . VAR_39 ; }
static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 [ 64 ] ; TYPE_3 VAR_1 ; VAR_2 * TYPE_4 ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; for ( VAR_5 = 1 ; VAR_6 <= 38 ; VAR_7 ++ ) { METHOD_1 ( VAR_8 , sizeof VAR_9 , "test%u.bson" , VAR_10 ) ; TYPE_7 = METHOD_2 ( VAR_11 ) ; METHOD_3 ( METHOD_4 ( TYPE_8 , VAR_12 , & VAR_13 ) ) ; METHOD_5 ( TYPE_9 ) ; } TYPE_10 = METHOD_6 ( "codewscope.bson" ) ; METHOD_7 ( METHOD_8 ( TYPE_11 , VAR_14 , & VAR_15 ) ) ; METHOD_9 ( TYPE_12 ) ; TYPE_13 = METHOD_10 ( "empty_key.bson" ) ; METHOD_11 ( METHOD_12 ( TYPE_14 , VAR_16 | VAR_17 | VAR_18 | VAR_19 , & VAR_20 ) ) ; METHOD_13 ( TYPE_15 ) ; METHOD_14 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 ) TYPE_16 = METHOD_15 ( VAR_26 ) ; METHOD_16 ( ! METHOD_17 ( TYPE_17 , VAR_27 , & VAR_28 ) ) ; ASSERT_CMPSIZE_T ( VAR_29 , == , ( TYPE_18 ) VAR_30 ) ; METHOD_18 ( ! METHOD_19 ( TYPE_19 , VAR_31 , & VAR_32 ) ) ; METHOD_20 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 ) ; METHOD_21 ( TYPE_20 ) METHOD_22 ( "overflow2.bson" , VAR_37 , 9 , VAR_38 , "corruptBSON" ) ; METHOD_23 ( "trailingnull.bson" , VAR_39 , 14 , VAR_40 , "corruptBSON" ) ; METHOD_24 ( "dollarquery.bson" , VAR_41 | VAR_42 , 4 , VAR_43 , "keyscannotbeginwith\\"$\\":\\"$query\\"" ) ; METHOD_25 ( "dotquery.bson" , VAR_44 | VAR_45 , 4 , VAR_46 , "keyscannotcontain\\".\\":\\"abc.def\\"" ) ; METHOD_26 ( "overflow3.bson" , VAR_47 , 9 , VAR_48 , "corruptBSON" ) ; METHOD_27 ( "overflow3.bson" , VAR_49 , 9 , VAR_50 , "corruptBSON" ) ; METHOD_28 ( "overflow4.bson" , VAR_51 , 9 , VAR_52 , "corruptBSON" ) ; METHOD_29 ( "empty_key.bson" , VAR_53 , 4 , VAR_54 , "emptykey" ) ; METHOD_30 ( "test40.bson" , VAR_55 , 6 , VAR_56 , "corruptBSON" ) ; METHOD_31 ( "test41.bson" , VAR_57 , 6 , VAR_58 , "corruptBSON" ) ; METHOD_32 ( "test42.bson" , VAR_59 , 6 , VAR_60 , "corruptBSON" ) ; METHOD_33 ( "test43.bson" , VAR_61 , 6 , VAR_62 , "corruptBSON" ) ; METHOD_34 ( "test44.bson" , VAR_63 , 6 , VAR_64 , "corruptBSON" ) ; METHOD_35 ( "test45.bson" , VAR_65 , 6 , VAR_66 , "corruptBSON" ) ; METHOD_36 ( "test46.bson" , VAR_67 , 6 , VAR_68 , "corruptBSON" ) ; METHOD_37 ( "test47.bson" , VAR_69 , 6 , VAR_70 , "corruptBSON" ) ; METHOD_38 ( "test48.bson" , VAR_71 , 6 , VAR_72 , "corruptBSON" ) ; METHOD_39 ( "test49.bson" , VAR_73 , 6 , VAR_74 , "corruptBSON" ) ; METHOD_40 ( "test50.bson" , VAR_75 , 10 , VAR_76 , "corruptcode-with-scope" ) ; METHOD_41 ( "test51.bson" , VAR_77 , 10 , VAR_78 , "corruptcode-with-scope" ) ; METHOD_42 ( "test52.bson" , VAR_79 , 9 , VAR_80 , "corruptBSON" ) ; METHOD_43 ( "test53.bson" , VAR_81 , 6 , VAR_82 , "corruptBSON" ) ; METHOD_44 ( "test54.bson" , VAR_83 , 12 , VAR_84 , "corruptBSON" ) ;  TYPE_21 = METHOD_45 ( "my_dbref" ,  "{" , "$ref" , METHOD_46 ( "collection" ) , "$id" , METHOD_47 ( 1 ) , "}" ) ; METHOD_48 ( METHOD_49 ( TYPE_22 , VAR_85 , & VAR_86 ) ) ; METHOD_50 ( METHOD_51 ( TYPE_23 , VAR_87 , & VAR_88 ) ) ; METHOD_52 ( TYPE_24 ) ; TYPE_25 = METHOD_53 ( "my_dbref" , "{" , "$id" , METHOD_54 ( 1 ) , "}" ) ; METHOD_55 ( METHOD_56 ( TYPE_26 , VAR_89 , & VAR_90 ) ) ; METHOD_57 ( ! METHOD_58 ( TYPE_27 , VAR_91 , & VAR_92 ) ) ; METHOD_59 ( VAR_93 , VAR_94 , VAR_95 , "keyscannotbeginwith\\"$\\":\\"$id\\"" ) ; METHOD_60 ( TYPE_28 ) ; TYPE_29 = METHOD_61 ( "my_dbref" , "{" , "$ref" , METHOD_62 ( "collection" ) , "$ref" , METHOD_63 ( "collection" ) , "}" ) ; METHOD_64 ( METHOD_65 ( TYPE_30 , VAR_96 , & VAR_97 ) ) ; METHOD_66 ( ! METHOD_67 ( TYPE_31 , VAR_98 , & VAR_99 ) ) ; METHOD_68 ( VAR_100 , VAR_101 , VAR_102 , "keyscannotbeginwith\\"$\\":\\"$ref\\"" ) ; METHOD_69 ( TYPE_32 ) ; TYPE_33 = METHOD_70 ( "my_dbref" , "{" , "$ref" , METHOD_71 ( "collection" ) , "extra" , METHOD_72 ( 2 ) , "$id" , METHOD_73 ( 1 ) , "}" ) ; METHOD_74 ( METHOD_75 ( TYPE_34 , VAR_103 , & VAR_104 ) ) ; METHOD_76 ( ! METHOD_77 ( TYPE_35 , VAR_105 , & VAR_106 ) ) ; METHOD_78 ( VAR_107 , VAR_108 , VAR_109 , "invalidkeywithinDBRefsubdocument:\\"extra\\"" ) ; METHOD_79 ( TYPE_36 ) ; METHOD_80 }
TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 ) { union STRUCT_OR_UNION_0 VAR_0 ; union STRUCT_OR_UNION_1 VAR_1 ; union STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; if ( ! METHOD_1 ( & VAR_6 , VAR_7 ) ) { switch ( VAR_8 . VAR_9 ) { case 0x6 : return METHOD_2 ( ) ; case 0xb : return METHOD_3 ( ) ; case 0xf : return METHOD_4 ( ) ; } return - VAR_10 ; } METHOD_5 ( 10 , & VAR_11 . VAR_12 , & VAR_13 . VAR_14 , & VAR_15 , & VAR_16 . VAR_17 ) ; if ( VAR_18 . VAR_19 . VAR_20 < VAR_21 ) return - VAR_22 ; VAR_23 = VAR_24 . VAR_25 . VAR_26 ; if ( VAR_27 < 2 ) VAR_28 = VAR_29 ; else VAR_30 = VAR_31 ; VAR_32 . VAR_33 = VAR_34 ; VAR_35 . VAR_36 = VAR_37 . VAR_38 . VAR_39 ; VAR_40 . VAR_41 = VAR_42 . VAR_43 . VAR_44 ; VAR_45 . VAR_46 = ( 1ULL << VAR_47 . VAR_48 . VAR_49 ) - 1 ; VAR_50 . VAR_51 = VAR_52 . VAR_53 ; VAR_54 . VAR_55 = VAR_56 . VAR_57 . VAR_58 ; VAR_59 . VAR_60 = min_t ( unsigned , VAR_61 , VAR_62 . VAR_63 ) ; if ( VAR_64 > 1 ) VAR_65 . VAR_66 = METHOD_6 ( ( TYPE_5 ) VAR_67 . VAR_68 . VAR_69 , 3 ) ; if ( VAR_70 > 1 ) { TYPE_6 VAR_71 ; METHOD_7 ( VAR_72 , VAR_73 ) ; VAR_74 . VAR_75 . VAR_76 = VAR_77 ; } METHOD_8 ( ) ; METHOD_9 ( VAR_78 ) ; switch ( VAR_79 . VAR_80 ) { case 14 : METHOD_10 ( "Coreevents," ) ; break ; case 15 : METHOD_11 ( VAR_81 ) ; case 22 : case 23 : case 29 : METHOD_12 ( VAR_82 , VAR_83 , sizeof ( VAR_84 ) ) ; METHOD_13 ( ) ; VAR_85 . VAR_86 = VAR_87 ; VAR_88 . VAR_89 = VAR_90 ; METHOD_14 ( "Core2events," ) ; break ; case 26 : case 30 : case 46 : METHOD_15 ( VAR_91 , VAR_92 , sizeof ( VAR_93 ) ) ; METHOD_16 ( VAR_94 , VAR_95 , sizeof ( VAR_96 ) ) ; METHOD_17 ( ) ; VAR_97 . VAR_98 = VAR_99 ; VAR_100 . VAR_101 = VAR_102 ; VAR_103 . VAR_104 = VAR_105 ; VAR_106 . VAR_107 = VAR_108 ; VAR_109 [ VAR_110 ] = X86_CONFIG ( . VAR_111 = 0x0e , . VAR_112 = 0x01 , . VAR_113 = 1 , . VAR_114 = 1 ) ; VAR_115 [ VAR_116 ] = X86_CONFIG ( . VAR_117 = 0xb1 , . VAR_118 = 0x3f , . VAR_119 = 1 , . VAR_120 = 1 ) ; METHOD_18 ( VAR_121 ) ; METHOD_19 ( "Nehalemevents," ) ; break ; case 28 : case 38 : case 39 : case 53 : case 54 : METHOD_20 ( VAR_122 , VAR_123 , sizeof ( VAR_124 ) ) ; METHOD_21 ( ) ; VAR_125 . VAR_126 = VAR_127 ; VAR_128 . VAR_129 = VAR_130 ; METHOD_22 ( "Atomevents," ) ; break ; case 37 : case 44 : case 47 : METHOD_23 ( VAR_131 , VAR_132 , sizeof ( VAR_133 ) ) ; METHOD_24 ( VAR_134 , VAR_135 , sizeof ( VAR_136 ) ) ; METHOD_25 ( ) ; VAR_137 . VAR_138 = VAR_139 ; VAR_140 . VAR_141 = VAR_142 ; VAR_143 . VAR_144 = VAR_145 ; VAR_146 . VAR_147 = VAR_148 ; VAR_149 . VAR_150 |= VAR_151 ; VAR_152 [ VAR_153 ] = X86_CONFIG ( . VAR_154 = 0x0e , . VAR_155 = 0x01 , . VAR_156 = 1 , . VAR_157 = 1 ) ; VAR_158 [ VAR_159 ] = X86_CONFIG ( . VAR_160 = 0xb1 , . VAR_161 = 0x3f , . VAR_162 = 1 , . VAR_163 = 1 ) ; METHOD_26 ( "Westmereevents," ) ; break ; case 42 : case 45 : METHOD_27 ( VAR_164 ) ; METHOD_28 ( VAR_165 , VAR_166 , sizeof ( VAR_167 ) ) ; METHOD_29 ( VAR_168 , VAR_169 , sizeof ( VAR_170 ) ) ; METHOD_30 ( ) ; VAR_171 . VAR_172 = VAR_173 ; VAR_174 . VAR_175 = VAR_176 ; VAR_177 . VAR_178 = VAR_179 ;  VAR_180 . VAR_181 = VAR_182 ;  VAR_183 . VAR_184 |= VAR_185 ; VAR_186 . VAR_187 |= VAR_188 ; VAR_189 [ VAR_190 ] = X86_CONFIG ( . VAR_191 = 0x0e , . VAR_192 = 0x01 , . VAR_193 = 1 , . VAR_194 = 1 ) ; VAR_195 [ VAR_196 ] = X86_CONFIG ( . VAR_197 = 0xb1 , . VAR_198 = 0x01 , . VAR_199 = 1 , . VAR_200 = 1 ) ; METHOD_31 ( "SandyBridgeevents," ) ; break ; case 58 : case 62 : METHOD_32 ( VAR_201 , VAR_202 , sizeof ( VAR_203 ) ) ; METHOD_33 ( VAR_204 , VAR_205 , sizeof ( VAR_206 ) ) ; METHOD_34 ( ) ; VAR_207 . VAR_208 = VAR_209 ; VAR_210 . VAR_211 = VAR_212 ;  VAR_213 . VAR_214 = VAR_215 ;  VAR_216 . VAR_217 = VAR_218 ; VAR_219 . VAR_220 |= VAR_221 ; VAR_222 . VAR_223 |= VAR_224 ; VAR_225 [ VAR_226 ] = X86_CONFIG ( . VAR_227 = 0x0e , . VAR_228 = 0x01 , . VAR_229 = 1 , . VAR_230 = 1 ) ; METHOD_35 ( "IvyBridgeevents," ) ; break ; default : switch ( VAR_231 . VAR_232 ) { case 1 : VAR_233 . VAR_234 = VAR_235 ; METHOD_36 ( "genericarchitectedperfmonv1," ) ; break ; default : VAR_236 . VAR_237 = VAR_238 ; METHOD_37 ( "genericarchitectedperfmon," ) ; break ; } } if ( VAR_239 . VAR_240 > VAR_241 ) { WARN ( 1 , VAR_242 "hwperfevents%d>max(%d),clipping!" , VAR_243 . VAR_244 , VAR_245 ) ; VAR_246 . VAR_247 = VAR_248 ; } VAR_249 . VAR_250 = ( 1 << VAR_251 . VAR_252 ) - 1 ; if ( VAR_253 . VAR_254 > VAR_255 ) { WARN ( 1 , VAR_256 "hwperfeventsfixed%d>max(%d),clipping!" , VAR_257 . VAR_258 , VAR_259 ) ; VAR_260 . VAR_261 = VAR_262 ; } VAR_263 . VAR_264 |= ( ( 1LL << VAR_265 . VAR_266 ) - 1 ) << VAR_267 ; if ( VAR_268 . VAR_269 ) { METHOD_38 ( VAR_270 , VAR_271 . VAR_272 ) { if ( VAR_273 -> VAR_274 != VAR_275 || VAR_276 -> VAR_277 == VAR_278 ) { continue ; } VAR_279 -> VAR_280 |= ( 1ULL << VAR_281 . VAR_282 ) - 1 ; VAR_283 -> VAR_284 += VAR_285 . VAR_286 ; } } return 0 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = ( TYPE_3 * ) VAR_2 ; VAR_3 * VAR_4 ;  VAR_5 * VAR_6 , * VAR_7 ;  METHOD_1 ( VAR_8 ) ; VAR_9 = VAR_10 -> VAR_11 ; VAR_12 -> VAR_13 = 0 ; VAR_14 -> VAR_15 = 1 ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = 0 ; VAR_29 -> VAR_30 = VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; METHOD_2 ( VAR_35 -> VAR_36 , 0 , ( ( sizeof ( VAR_37 ) ) * VAR_38 ) ) ; METHOD_3 ( VAR_39 -> VAR_40 , 0 , ( ( sizeof ( VAR_41 ) ) * VAR_42 ) ) ; VAR_43 -> VAR_44 [ 0 ] = VAR_45 ; VAR_46 -> VAR_47 [ 1 ] = VAR_48 ; VAR_49 -> VAR_50 . VAR_51 = VAR_52 ; VAR_53 -> VAR_54 = 0 ; VAR_55 -> VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 ; VAR_68 -> VAR_69 = 0 ; VAR_70 -> VAR_71 = 1 ; VAR_72 -> VAR_73 = 1 ; VAR_74 -> VAR_75 = 0 ; VAR_76 -> VAR_77 = 0 ; VAR_78 -> VAR_79 = 0 ; VAR_80 -> VAR_81 = 0 ; VAR_82 -> VAR_83 = 0 ; VAR_84 -> VAR_85 = - 1 ; VAR_86 -> VAR_87 -> VAR_88 = 0 ; VAR_89 -> VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 -> VAR_95 = VAR_96 ; VAR_97 -> VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 -> VAR_103 = VAR_104 ; VAR_105 -> VAR_106 -> VAR_107 = VAR_108 ; VAR_109 -> VAR_110 = 0xFF ; VAR_111 -> VAR_112 = 0xffff ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 = & VAR_118 -> VAR_119 ; VAR_120 = & VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = VAR_129 -> VAR_130 = 0 ; VAR_131 -> VAR_132 = VAR_133 -> VAR_134 = 0 ; VAR_135 -> VAR_136 [ 0 ] = VAR_137 -> VAR_138 [ 0 ] = 0 ; VAR_139 -> VAR_140 [ 1 ] = VAR_141 -> VAR_142 [ 1 ] = 0 ; VAR_143 -> VAR_144 = VAR_145 -> VAR_146 = 0 ; VAR_147 -> VAR_148 = VAR_149 -> VAR_150 = 0 ; VAR_151 -> VAR_152 = VAR_153 -> VAR_154 = 0 ; VAR_155 -> VAR_156 = VAR_157 -> VAR_158 = 0 ; VAR_159 -> VAR_160 = VAR_161 -> VAR_162 = 0 ; VAR_163 -> VAR_164 = VAR_165 -> VAR_166 = 0 ; VAR_167 -> VAR_168 = 0 ; VAR_169 -> VAR_170 = 0 ; VAR_171 -> VAR_172 = 0 ; VAR_173 -> VAR_174 = 0 ; VAR_175 -> VAR_176 = 4 ; VAR_177 -> VAR_178 = 0 ; VAR_179 -> VAR_180 . VAR_181 = 0 ; VAR_182 -> VAR_183 = 0 ; VAR_184 -> VAR_185 = 0 ; VAR_186 -> VAR_187 = - 1 ; VAR_188 -> VAR_189 = - 1 ; VAR_190 -> VAR_191 = - 1 ; VAR_192 -> VAR_193 = - 1 ; VAR_194 -> VAR_195 = 0 ; VAR_196 -> VAR_197 = 0 ; VAR_198 -> VAR_199 = VAR_200 ; VAR_201 -> VAR_202 [ 0 ] = VAR_203 ; VAR_204 -> VAR_205 [ 1 ] = VAR_206 ; VAR_207 -> VAR_208 [ 2 ] = VAR_209 ; VAR_210 -> VAR_211 [ 0 ] = VAR_212 ; VAR_213 -> VAR_214 [ 1 ] = VAR_215 ; VAR_216 -> VAR_217 [ 0 ] = VAR_218 ; VAR_219 -> VAR_220 [ 1 ] = VAR_221 ; VAR_222 -> VAR_223 [ 2 ] = VAR_224 ; VAR_225 -> VAR_226 [ 3 ] = VAR_227 ; VAR_228 -> VAR_229 [ 0 ] [ 0 ] = VAR_230 ; VAR_231 -> VAR_232 [ 0 ] [ 1 ] = VAR_233 ; VAR_234 -> VAR_235 [ 1 ] [ 0 ] = VAR_236 ; VAR_237 -> VAR_238 [ 1 ] [ 1 ] = VAR_239 ; VAR_240 -> VAR_241 [ 0 ] = VAR_242 ; VAR_243 -> VAR_244 [ 1 ] = VAR_245 ; METHOD_4 ( VAR_246 -> VAR_247 ) ; VAR_248 -> VAR_249 = 0 ; VAR_250 -> VAR_251 = 0 ; VAR_252 -> VAR_253 = 0 ; VAR_254 -> VAR_255 . VAR_256 = VAR_257 ; VAR_258 -> VAR_259 = VAR_260 -> VAR_261 [ 0 ] ; VAR_262 -> VAR_263 = & VAR_264 -> VAR_265 [ 0 ] [ 0 ] ; VAR_266 -> VAR_267 = & VAR_268 -> VAR_269 ; VAR_270 -> VAR_271 = 0 ; { VAR_272 -> VAR_273 . VAR_274 = ( TYPE_4 * ) VAR_275 ; VAR_276 -> VAR_277 -> VAR_278 = ( TYPE_5 * ) VAR_279 ; VAR_280 -> VAR_281 -> VAR_282 = ( TYPE_6 * ) VAR_283 ; VAR_284 -> VAR_285 -> VAR_286 = ( TYPE_7 * ) VAR_287 ; } METHOD_5 ( VAR_288 -> VAR_289 , 0 , ( TYPE_8 ) * sizeof ( VAR_290 ) ) ; METHOD_6 ( VAR_291 -> VAR_292 , 0 , ( TYPE_9 ) * sizeof ( VAR_293 ) ) ; METHOD_7 ( VAR_294 -> VAR_295 , 0 , ( TYPE_10 ) * sizeof ( VAR_296 ) ) ; METHOD_8 ( VAR_297 ) ; METHOD_9 ( VAR_298 ) ; VAR_299 -> VAR_300 = VAR_301 ; VAR_302 -> VAR_303 = 1 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_2 VAR_8 ; struct STRUCT_OR_UNION_3 STRUCT_OR_UNION_4 ; struct STRUCT_OR_UNION_5 TYPE_3 * VAR_9 ; unsigned TYPE_4 VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; unsigned TYPE_7 VAR_14 , VAR_15 , VAR_16 ; VAR_17 = ( struct STRUCT_OR_UNION_6 TYPE_8 * ) VAR_18 ; VAR_19 = - VAR_20 ; if ( METHOD_1 ( & STRUCT_OR_UNION_7 , VAR_21 , sizeof ( STRUCT_OR_UNION_8 ) - sizeof ( VAR_22 ) ) ) goto VAR_23 ; VAR_24 = - VAR_25 ; if ( ! STRUCT_OR_UNION_9 . VAR_26 ) goto VAR_27 ; if ( STRUCT_OR_UNION_10 . VAR_28 & ~ ( VAR_29 | VAR_30 ) ) goto VAR_31 ; VAR_32 = 0 ; if ( STRUCT_OR_UNION_11 . VAR_33 & VAR_34 ) VAR_35 |= VAR_36 ; if ( STRUCT_OR_UNION_12 . VAR_37 & VAR_38 ) { VAR_39 |= VAR_40 ; VAR_41 = - VAR_42 ; goto VAR_43 ; } VAR_44 = METHOD_2 ( VAR_45 , STRUCT_OR_UNION_13 . VAR_46 . VAR_47 , STRUCT_OR_UNION_14 . VAR_48 . VAR_49 ) ; if ( VAR_50 ) goto VAR_51 ; VAR_52 = STRUCT_OR_UNION_15 . VAR_53 . VAR_54 ; VAR_55 = VAR_56 + STRUCT_OR_UNION_16 . VAR_57 . VAR_58 ; VAR_59 = - VAR_60 ; if ( ! METHOD_3 ( VAR_61 ) ) goto VAR_62 ; METHOD_4 ( & VAR_63 -> VAR_64 ) ; VAR_65 = METHOD_5 ( VAR_66 , VAR_67 , & VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; VAR_71 = - VAR_72 ; if ( VAR_73 -> VAR_74 >= VAR_75 ) goto VAR_76 ; if ( METHOD_6 ( VAR_77 ) ) { unsigned TYPE_9 VAR_78 = METHOD_7 ( VAR_79 ) ; if ( VAR_80 & ( VAR_81 - 1 ) ) goto VAR_82 ; } VAR_83 = VAR_84 ; VAR_85 = VAR_86 ; for ( VAR_87 = VAR_88 ; VAR_89 && VAR_90 -> VAR_91 < VAR_92 ; VAR_93 = VAR_94 -> VAR_95 ) { METHOD_8 ( ) ; METHOD_9 ( ! ! VAR_96 -> STRUCT_OR_UNION_17 . VAR_97 ^ ! ! ( VAR_98 -> VAR_99 & ( VAR_100 | VAR_101 ) ) ) ; VAR_102 = - VAR_103 ; if ( ! METHOD_10 ( VAR_104 ) ) goto VAR_105 ;  if ( METHOD_11 ( VAR_106 ) && VAR_107 <= VAR_108 -> VAR_109 &&  VAR_110 > VAR_111 -> VAR_112 ) { unsigned TYPE_10 VAR_113 = METHOD_12 ( VAR_114 ) ; VAR_115 = - VAR_116 ; if ( VAR_117 & ( VAR_118 - 1 ) ) goto VAR_119 ; } VAR_120 = - VAR_121 ; if ( VAR_122 -> STRUCT_OR_UNION_18 . VAR_123 && VAR_124 -> STRUCT_OR_UNION_19 . VAR_125 != VAR_126 ) goto VAR_127 ; if ( METHOD_13 ( VAR_128 ) ) VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } METHOD_14 ( ! VAR_133 ) ; if ( VAR_134 -> VAR_135 < VAR_136 ) VAR_137 = VAR_138 ; VAR_139 = 0 ; do { METHOD_15 ( ) ; METHOD_16 ( ! METHOD_17 ( VAR_140 ) ) ; METHOD_18 ( VAR_141 -> STRUCT_OR_UNION_20 . VAR_142 &&  VAR_143 -> STRUCT_OR_UNION_21 . VAR_144 != VAR_145 ) ;  if ( VAR_146 -> STRUCT_OR_UNION_22 . VAR_147 == VAR_148 && ( VAR_149 -> VAR_150 & VAR_151 ) == VAR_152 ) goto VAR_153 ; if ( VAR_154 -> VAR_155 > VAR_156 ) VAR_157 = VAR_158 -> VAR_159 ; VAR_160 = METHOD_19 ( VAR_161 , VAR_162 -> VAR_163 ) ; VAR_164 = ( VAR_165 -> VAR_166 & ~ VAR_167 ) | VAR_168 ; VAR_169 = METHOD_20 ( VAR_170 , VAR_171 , VAR_172 , VAR_173 , VAR_174 , VAR_175 -> VAR_176 , VAR_177 -> VAR_178 , VAR_179 -> VAR_180 , METHOD_21 ( VAR_181 ) , ( ( struct STRUCT_OR_UNION_23 ) { VAR_182 } ) ) ; if ( VAR_183 ) { VAR_184 = VAR_185 ; goto VAR_186 ; } if ( VAR_187 -> VAR_188 < VAR_189 ) { VAR_190 = METHOD_22 ( VAR_191 , VAR_192 , VAR_193 , 1 ) ; if ( VAR_194 ) break ; } if ( VAR_195 -> VAR_196 > VAR_197 ) { VAR_198 = METHOD_23 ( VAR_199 , VAR_200 , VAR_201 , 0 ) ; if ( VAR_202 ) break ; } VAR_203 : VAR_204 -> VAR_205 = VAR_206 ; VAR_207 -> STRUCT_OR_UNION_24 . VAR_208 = VAR_209 ; VAR_210 : VAR_211 = VAR_212 ; VAR_213 = VAR_214 -> VAR_215 ; VAR_216 = VAR_217 -> VAR_218 ; } while ( VAR_219 && VAR_220 -> VAR_221 < VAR_222 ) ; VAR_223 : METHOD_24 ( & VAR_224 -> VAR_225 ) ; METHOD_25 ( VAR_226 ) ; if ( ! VAR_227 ) { if ( METHOD_26 ( VAR_228 ? VAR_229 : VAR_230 , & VAR_231 -> VAR_232 ) ) VAR_233 = - VAR_234 ; } VAR_235 : return VAR_236 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 ; TYPE_2 VAR_2 = ( TYPE_3 ) VAR_3 ; if ( VAR_4 == VAR_5 || VAR_6 != VAR_7 . VAR_8 ) return ; for ( TYPE_4 VAR_9 = 0 ; VAR_10 < VAR_11 && METHOD_1 ( ) && VAR_12 . VAR_13 ; VAR_14 ++ ) { TYPE_5 * VAR_15 = ( TYPE_6 * ) METHOD_2 ( VAR_16 ) ; if ( ! VAR_17 ) { METHOD_3 ( "%sunabletoallocatebufferforpacket." , VAR_18 ) ; break ; } VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = METHOD_4 ( VAR_24 ) - sizeof ( TYPE_7 ) - VAR_25 -> VAR_26 ; TYPE_8 * VAR_27 = ( TYPE_9 * ) VAR_28 + sizeof ( TYPE_10 ) + VAR_29 -> VAR_30 ; if ( ! VAR_31 . VAR_32 ) {  TYPE_11 VAR_33 = METHOD_5 ( VAR_34 , VAR_35 . VAR_36 , sizeof ( VAR_37 . VAR_38 ) ) ;  switch ( VAR_39 ) { case - 1 : METHOD_6 ( "%sunabletoreadfromdriver:%s" , VAR_40 , METHOD_7 ( VAR_41 ) ) ; METHOD_8 ( VAR_42 ) ; METHOD_9 ( VAR_43 , VAR_44 , 0 , VAR_45 , 0 ) ; return ; case 0 : METHOD_10 ( "%sendoffilereached." , VAR_46 ) ; METHOD_11 ( VAR_47 ) ; METHOD_12 ( VAR_48 , VAR_49 , 0 , VAR_50 , 0 ) ; return ; default : VAR_51 . VAR_52 = VAR_53 ; break ; } } METHOD_13 ( VAR_54 , VAR_55 . VAR_56 , METHOD_14 ( VAR_57 . VAR_58 , VAR_59 -> VAR_60 ) ) ; VAR_61 -> VAR_62 = METHOD_15 ( VAR_63 . VAR_64 , VAR_65 -> VAR_66 ) ; if ( VAR_67 -> VAR_68 > sizeof ( TYPE_12 ) && METHOD_16 ( ( TYPE_13 * ) VAR_69 ) ) { TYPE_14 VAR_70 ; METHOD_17 ( & VAR_71 , VAR_72 , sizeof ( TYPE_15 ) ) ; VAR_73 -> VAR_74 -= sizeof ( TYPE_16 ) ; VAR_75 -> VAR_76 += sizeof ( TYPE_17 ) ; if ( METHOD_18 ( & VAR_77 , VAR_78 ) != VAR_79 ) VAR_80 . VAR_81 = 0 ; } else { METHOD_19 ( "%sdroppingpacketoflength%d" , VAR_82 , VAR_83 -> VAR_84 ) ; VAR_85 . VAR_86 = 0 ; METHOD_20 ( VAR_87 ) ; } VAR_88 . VAR_89 = VAR_90 ; VAR_91 . VAR_92 = VAR_93 ; VAR_94 . VAR_95 = 0 ;  if ( METHOD_21 ( & VAR_96 , 1 , 0 ) <= 0 || METHOD_22 ( VAR_97 . VAR_98 ) )  break ; } METHOD_23 ( VAR_99 , VAR_100 , 0 , VAR_101 , 0 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) , * VAR_2 ; TYPE_2 VAR_3 = 0 ; if ( METHOD_2 ( VAR_4 , VAR_5 ) ) return 0 ; METHOD_3 ( ) ; VAR_6 = METHOD_4 ( VAR_7 ) ; if ( METHOD_5 ( STRUCT_OR_UNION_3 -> VAR_8 , VAR_9 -> VAR_10 ) && METHOD_6 ( STRUCT_OR_UNION_4 -> VAR_11 , VAR_12 -> VAR_13 ) && METHOD_7 ( STRUCT_OR_UNION_5 -> VAR_14 , VAR_15 -> VAR_16 ) && METHOD_8 ( STRUCT_OR_UNION_6 -> VAR_17 , VAR_18 -> VAR_19 ) && METHOD_9 ( STRUCT_OR_UNION_7 -> VAR_20 , VAR_21 -> VAR_22 ) && METHOD_10 ( STRUCT_OR_UNION_8 -> VAR_23 , VAR_24 -> VAR_25 ) ) goto VAR_26 ; if ( METHOD_11 ( VAR_27 -> VAR_28 , VAR_29 ) ) goto VAR_30 ; METHOD_12 ( ) ; return - VAR_31 ; VAR_32 : METHOD_13 ( ) ; METHOD_14 ( ) ; if ( VAR_33 -> VAR_34 ) VAR_35 = METHOD_15 ( VAR_36 -> VAR_37 ) ; METHOD_16 ( ) ;  if ( ! VAR_38 && ! METHOD_17 ( METHOD_18 ( VAR_39 ) -> VAR_40 , VAR_41 ) ) {  METHOD_19 ( ) ; return - VAR_42 ; } METHOD_20 ( ) ; return METHOD_21 ( VAR_43 , VAR_44 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  { TYPE_1 VAR_1 [ 3 ] = { 0xe , 0x80 , 0 } ; TYPE_2 VAR_2 [ ] = { 0 } ;  if ( METHOD_1 ( VAR_3 -> VAR_4 , VAR_5 , 3 , VAR_6 , 1 , 0 ) < 0 )  METHOD_2 ( "command0x0etransferfailed." ) ;  VAR_7 [ 0 ] = 0xe ;   VAR_8 [ 1 ] = 0x02 ;   VAR_9 [ 2 ] = 1 ;   if ( METHOD_3 ( VAR_10 -> VAR_11 , VAR_12 , 3 , VAR_13 , 1 , 0 ) < 0 )  METHOD_4 ( "command0x0etransferfailed." ) ;  METHOD_5 ( 300 ) ;  VAR_14 [ 0 ] = 0xe ;  VAR_15 [ 1 ] = 0x83 ;   VAR_16 [ 2 ] = 0 ;   if ( METHOD_6 ( VAR_17 -> VAR_18 , VAR_19 , 3 , VAR_20 , 1 , 0 ) < 0 )  METHOD_7 ( "command0x0etransferfailed." ) ;  VAR_21 [ 0 ] = 0xe ;  VAR_22 [ 1 ] = 0x83 ; VAR_23 [ 2 ] = 1 ;  if ( METHOD_8 ( VAR_24 -> VAR_25 , VAR_26 , 3 , VAR_27 , 1 , 0 ) < 0 )   METHOD_9 ( "command0x0etransferfailed." ) ;  VAR_28 [ 0 ] = 0x51 ; if ( METHOD_10 ( VAR_29 -> VAR_30 , VAR_31 , 1 , VAR_32 , 1 , 0 ) < 0 ) METHOD_11 ( "command0x51transferfailed." ) ;  VAR_33 -> VAR_34 [ 0 ] . VAR_35 = METHOD_12 ( VAR_36 , & VAR_37 ,   & VAR_38 -> VAR_39 -> VAR_40 ) ;   if ( VAR_41 -> VAR_42 [ 0 ] . VAR_43 == VAR_44 )  return - VAR_45 ;  if ( METHOD_13 ( VAR_46 , VAR_47 -> VAR_48 [ 0 ] . VAR_49 ,  & VAR_50 ,  & VAR_51 -> VAR_52 -> VAR_53 ) ) {  METHOD_14 ( "AttachedDS3000/TS2020!" ) ; return 0 ; } METHOD_15 ( "FailedtoattachDS3000/TS2020!" ) ; return - VAR_54 ; }
static TYPE_0 METHOD_0 ( const TYPE_1 * * VAR_0 , TYPE_2 VAR_1 ) {  if ( ! METHOD_1 ( * * VAR_2 ) ) return VAR_3 ; else { TYPE_3 VAR_4 = 0 ;  do {  VAR_5 = VAR_6 * 10 + * ( ( * VAR_7 ) ++ ) - '0' ; } while ( METHOD_2 ( * * VAR_8 ) ) ; return VAR_9 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * * VAR_3 ; METHOD_1 ( VAR_4 -> VAR_5 == VAR_6 ) ;  METHOD_2 ( VAR_7 , VAR_8 -> VAR_9 , VAR_10 -> VAR_11 ) ;  METHOD_3 ( VAR_12 , VAR_13 -> VAR_14 , VAR_15 -> VAR_16 ) ; METHOD_4 ( VAR_17 ) ; VAR_18 = METHOD_5 ( VAR_19 , VAR_20 , & VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ) ; METHOD_6 ( VAR_25 , VAR_26 , VAR_27 , VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 = * VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 = METHOD_7 ( VAR_42 , VAR_43 , & VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ; METHOD_8 ( VAR_48 , VAR_49 , VAR_50 , VAR_51 -> VAR_52 ) ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 = * VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_9 ( VAR_64 , VAR_65 , & VAR_66 -> VAR_67 , VAR_68 ) ; METHOD_10 ( VAR_69 , VAR_70 ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * * VAR_2 , TYPE_1 * VAR_3 ) { TYPE_2 VAR_4 ; TYPE_3 VAR_5 , * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 + 2 , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 = METHOD_2 ( VAR_13 , VAR_14 , & VAR_15 , VAR_16 , VAR_17 + 2 ) ; if ( VAR_18 ) goto VAR_19 ; METHOD_3 ( "resultofFW_CONFIGinidentifystate%d\\n" , VAR_20 ) ; if ( VAR_21 == 0x01 ) * VAR_22 = 1 ; else if ( VAR_23 == 0x02 ) * VAR_24 = 0 ; else  return - VAR_25 ;  METHOD_4 ( "Identifystatecold=%d\\n" , * VAR_26 ) ; VAR_27 : METHOD_5 ( VAR_28 ) ; return VAR_29 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 VAR_6 , * VAR_7 ; const TYPE_3 * VAR_8 ; TYPE_4 VAR_9 ;  VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , sizeof ( VAR_13 ) , & VAR_14 ) ;  METHOD_3 ( VAR_15 == VAR_16 ) ; VAR_17 = VAR_18 [ VAR_19 ] [ VAR_20 -> VAR_21 ] [ VAR_22 ] ; switch ( VAR_23 ) { default : VAR_24 = METHOD_4 ( STRUCT_OR_UNION_6 ) ; if ( VAR_25 -> VAR_26 == 0 ) { VAR_27 = "nf_ct_dccp:notpickingupexistingconnection" ; goto VAR_28 ; } case VAR_29 : break ; case VAR_30 : VAR_31 = "nf_ct_dccp:invalidstatetransition" ; goto VAR_32 ; } VAR_33 -> VAR_34 . VAR_35 . VAR_36 [ VAR_37 ] = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 . VAR_42 [ VAR_43 ] = VAR_44 ; VAR_45 -> VAR_46 . VAR_47 . VAR_48 = VAR_49 ; VAR_50 -> VAR_51 . VAR_52 . VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 . VAR_58 = VAR_59 ; VAR_60 -> VAR_61 . VAR_62 . VAR_63 = 0 ; return VAR_64 ; VAR_65 : if ( METHOD_5 ( STRUCT_OR_UNION_7 , VAR_66 ) ) METHOD_6 ( STRUCT_OR_UNION_8 , METHOD_7 ( VAR_67 ) , 0 , VAR_68 , VAR_69 , VAR_70 , VAR_71 , "%s" , VAR_72 ) ; return VAR_73 ; }
static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; unsigned TYPE_3 VAR_7 ; unsigned TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; if ( METHOD_1 ( VAR_10 ) ) return 0 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 -> VAR_15 ; VAR_16 = VAR_17 ; if ( METHOD_2 ( ! METHOD_3 ( VAR_18 ) || METHOD_4 ( ) || ! VAR_19 ) ) goto VAR_20 ; VAR_21 = VAR_22 & VAR_23 ;  METHOD_5 ( VAR_24 , 1 , 0 , VAR_25 , VAR_26 ) ;  VAR_27 = VAR_28 ; if ( VAR_29 == VAR_30 || ( VAR_31 & VAR_32 ) == 0x400 ) VAR_33 |= VAR_34 ; VAR_35 : METHOD_6 ( & VAR_36 -> VAR_37 ) ; VAR_38 = VAR_39 ; VAR_40 = METHOD_7 ( VAR_41 , VAR_42 ) ; if ( ! VAR_43 ) goto VAR_44 ; if ( METHOD_8 ( VAR_45 -> VAR_46 > VAR_47 ) ) { if ( ! ( VAR_48 -> VAR_49 & VAR_50 ) ) goto VAR_51 ; if ( METHOD_9 ( VAR_52 , VAR_53 ) ) goto VAR_54 ; } VAR_55 = VAR_56 ; if ( METHOD_10 ( ! ( VAR_57 -> VAR_58 & VAR_59 ) ) ) goto VAR_60 ; if ( METHOD_11 ( VAR_61 ) ) VAR_62 &= VAR_63 ; VAR_64 = METHOD_12 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 ) ; if ( METHOD_13 ( VAR_69 & VAR_70 ) ) goto VAR_71 ; if ( VAR_72 & VAR_73 ) { if ( VAR_74 & VAR_75 ) { VAR_76 -> VAR_77 ++ ;  METHOD_14 ( VAR_78 , 1 , 0 ,  VAR_79 , VAR_80 ) ; } else { VAR_81 -> VAR_82 ++ ;  METHOD_15 ( VAR_83 , 1 , 0 ,  VAR_84 , VAR_85 ) ; } if ( VAR_86 & VAR_87 ) { VAR_88 &= ~ VAR_89 ; goto VAR_90 ; } } METHOD_16 ( VAR_91 , VAR_92 ) ; VAR_93 = 0 ; VAR_94 : METHOD_17 ( & VAR_95 -> VAR_96 ) ; VAR_97 : return VAR_98 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const struct STRUCT_OR_UNION_0 * VAR_3 = ( const struct STRUCT_OR_UNION_1 * ) VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 , VAR_7 ; TYPE_6 VAR_8 ; register TYPE_7 VAR_9 ; if ( VAR_10 < 28 ) { METHOD_1 ( ( VAR_11 , "[invalidlen%d]" , VAR_12 ) ) ; return ; } METHOD_2 ( VAR_13 -> VAR_14 [ 0 ] ) ; VAR_15 = METHOD_3 ( & VAR_16 -> VAR_17 [ 0 ] ) ; if ( VAR_18 < 32768 ) { VAR_19 = VAR_20 ; } else { VAR_21 = ( ( VAR_22 & 0x0fff ) | 0x1000 ) << ( ( ( VAR_23 & 0x7000 ) >> 12 ) + 3 ) ; } if ( VAR_24 -> VAR_25 ) { METHOD_4 ( ( VAR_26 , "[maxrespdelay=%d]" , VAR_27 ) ) ; } METHOD_5 ( VAR_28 [ 8 ] , sizeof ( struct STRUCT_OR_UNION_2 ) ) ; METHOD_6 ( ( VAR_29 , "[gaddr%s" , METHOD_7 ( VAR_30 , & VAR_31 [ 8 ] ) ) ) ; if ( VAR_32 -> VAR_33 ) { METHOD_8 ( VAR_34 [ 25 ] ) ; if ( VAR_35 [ 24 ] & 0x08 ) { METHOD_9 ( ( VAR_36 , "sflag" ) ) ; } if ( VAR_37 [ 24 ] & 0x07 ) { METHOD_10 ( ( VAR_38 , "robustness=%d" , VAR_39 [ 24 ] & 0x07 ) ) ; } if ( VAR_40 [ 25 ] < 128 ) { VAR_41 = VAR_42 [ 25 ] ; } else { VAR_43 = ( ( VAR_44 [ 25 ] & 0x0f ) | 0x10 ) << ( ( ( VAR_45 [ 25 ] & 0x70 ) >> 4 ) + 3 ) ; } METHOD_11 ( ( VAR_46 , "qqi=%d" , VAR_47 ) ) ; } METHOD_12 ( VAR_48 [ 26 ] , 2 ) ; VAR_49 = METHOD_13 ( & VAR_50 [ 26 ] ) ; if ( VAR_51 > 0 ) { if ( VAR_52 < 28 + VAR_53 * sizeof ( struct STRUCT_OR_UNION_3 ) ) METHOD_14 ( ( VAR_54 , "[invalidnumberofsources]" ) ) ; else if ( VAR_55 -> VAR_56 > 1 ) { METHOD_15 ( ( VAR_57 , "{" ) ) ; for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; VAR_61 ++ ) { METHOD_16 ( VAR_62 [ 28 + VAR_63 * sizeof ( struct STRUCT_OR_UNION_4 ) ] , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; METHOD_17 ( ( VAR_64 , "%s" , METHOD_18 ( VAR_65 , & VAR_66 [ 28 + VAR_67 * sizeof ( struct STRUCT_OR_UNION_6 ) ] ) ) ) ; } METHOD_19 ( ( VAR_68 , "}" ) ) ; } else METHOD_20 ( ( VAR_69 , ",%dsource(s)" , VAR_70 ) ) ; } METHOD_21 ( ( VAR_71 , "]" ) ) ; return ; VAR_72 :  METHOD_22 ( ( VAR_73 , "[|icmp6]" ) ) ;  return ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 = VAR_4 ; const TYPE_4 * VAR_5 ; switch ( VAR_6 -> VAR_7 . VAR_8 ) { case VAR_9 : if ( VAR_10 -> VAR_11 . VAR_12 != VAR_13 ) { METHOD_1 ( VAR_14 , "Foundconstantoftype%swherebooleanwasexpected\\n" , METHOD_2 ( VAR_15 -> VAR_16 . VAR_17 ) ) ; return VAR_18 ; } * VAR_19 = VAR_20 -> VAR_21 . VAR_22 ; return VAR_23 ; case VAR_24 : VAR_25 = METHOD_3 ( VAR_26 , VAR_27 -> VAR_28 . VAR_29 ) ; if ( VAR_30 ) { if ( METHOD_4 ( VAR_31 , "true" ) || METHOD_5 ( VAR_32 , "yes" ) || METHOD_6 ( VAR_33 , "on" ) ) { * VAR_34 = VAR_35 ; return VAR_36 ; } else if ( METHOD_7 ( VAR_37 , "false" ) || METHOD_8 ( VAR_38 , "no" ) || METHOD_9 ( VAR_39 , "off" ) ) { * VAR_40 = VAR_41 ; return VAR_42 ; } } METHOD_10 ( VAR_43 , "Identifier\\"%s\\"oftypebooleanisunknown\\n" , VAR_44 ) ; return VAR_45 ; case VAR_46 : METHOD_11 ( VAR_47 , "Default\\"%s.%s\\"oftypebooleanisunknown\\n" , METHOD_12 ( VAR_48 , VAR_49 -> VAR_50 . VAR_51 ) , METHOD_13 ( VAR_52 , VAR_53 -> VAR_54 . VAR_55 ) ) ; return VAR_56 ; case VAR_57 : case VAR_58 :  VAR_59 = METHOD_14 ( VAR_60 , VAR_61 , VAR_62 ) ;  if ( VAR_63 ) * VAR_64 = ! * VAR_65 ; return VAR_66 ; case VAR_67 : case VAR_68 : case VAR_69 : case VAR_70 : case VAR_71 : case VAR_72 : case VAR_73 : METHOD_15 ( VAR_74 , "%sofbooleanvaluesnotpermitted\\n" , METHOD_16 ( VAR_75 -> VAR_76 . VAR_77 ) ) ; break ; default : METHOD_17 ( VAR_78 , "Unknownoperator%dinResolveBoolean\\n" , VAR_79 -> VAR_80 . VAR_81 ) ; break ; } return VAR_82 ; }
static TYPE_0  METHOD_0 ( unsigned TYPE_1 VAR_0 )  { struct STRUCT_OR_UNION_0 TYPE_2 * VAR_1 = ( TYPE_3 TYPE_4 * ) VAR_2 ;  struct STRUCT_OR_UNION_1 VAR_3 ;  TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( METHOD_1 ( & VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_2 ) ) ) { printk ( TYPE_8 TYPE_9 "%s@%d::mptctl_mpt_command-" "Unabletoreadinmpt_ioctl_commandstruct@%p\\n" , VAR_9 , VAR_10 , VAR_11 ) ; return - VAR_12 ; }  if ( ( ( VAR_13 = METHOD_2 ( VAR_14 . VAR_15 . VAR_16 , & VAR_17 ) ) < 0 ) ||  ( VAR_18 == VAR_19 ) ) { printk ( TYPE_10 TYPE_11 "%s::mptctl_mpt_command()@%d-ioc%dnotfound!\\n" , VAR_20 , VAR_21 , VAR_22 ) ; return - VAR_23 ; }  VAR_24 = METHOD_3 ( VAR_25 , & VAR_26 -> VAR_27 ) ;  return VAR_28 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ VAR_3 ] , VAR_4 [ VAR_5 ] ; TYPE_4  * VAR_6 ;  TYPE_5 VAR_7 ; register TYPE_6 * VAR_8 ; register TYPE_7 VAR_9 , VAR_10 ; register TYPE_8 * VAR_11 ; register unsigned TYPE_9 * VAR_12 ; TYPE_10 TYPE_11 VAR_13 [ 256 ] ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 ; unsigned TYPE_14 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ,  VAR_21 ,  VAR_22 , VAR_23 , VAR_24 ; METHOD_1 ( VAR_25 != ( const TYPE_15 * ) VAR_26 ) ; METHOD_2 ( VAR_27 -> VAR_28 == VAR_29 ) ; if ( VAR_30 -> VAR_31 != VAR_32 ) ( TYPE_16 ) METHOD_3 ( VAR_33 , METHOD_4 ( ) , "%s" , VAR_34 -> VAR_35 ) ; METHOD_5 ( VAR_36 != ( TYPE_17 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; VAR_41 = METHOD_7 ( VAR_42 ) ; VAR_43 = METHOD_8 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ; if ( VAR_48 == VAR_49 ) { VAR_50 = METHOD_9 ( VAR_51 ) ; return ( ( TYPE_18 * ) VAR_52 ) ; } VAR_53 = 0 ; VAR_54 = 0 ; while ( METHOD_10 ( VAR_55 , VAR_56 ) != ( TYPE_19 * ) VAR_57 ) if ( METHOD_11 ( VAR_58 , "%32s%u" , VAR_59 , & VAR_60 ) == 2 ) if ( ( METHOD_12 ( VAR_61 ) >= 6 ) && ( METHOD_13 ( VAR_62 + METHOD_14 ( VAR_63 ) - 6 , "_width" ) == 0 ) ) break ; while ( METHOD_15 ( VAR_64 , VAR_65 ) != ( TYPE_20 * ) VAR_66 ) if ( METHOD_16 ( VAR_67 , "%32s%u" , VAR_68 , & VAR_69 ) == 2 ) if ( ( METHOD_17 ( VAR_70 ) >= 7 ) && ( METHOD_18 ( VAR_71 + METHOD_19 ( VAR_72 ) - 7 , "_height" ) == 0 ) ) break ; VAR_73 -> VAR_74 = VAR_75 ; VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = 8 ; VAR_81 -> VAR_82 = VAR_83 ; VAR_84 -> VAR_85 = 2 ; VAR_86 = 11 ; while ( METHOD_20 ( VAR_87 , VAR_88 ) != ( TYPE_21 * ) VAR_89 ) { if ( METHOD_21 ( VAR_90 , "staticshort%32s={" , VAR_91 ) == 1 ) VAR_92 = 10 ; else if ( METHOD_22 ( VAR_93 , "staticunsignedchar%s={" , VAR_94 ) == 1 ) VAR_95 = 11 ; else if ( METHOD_23 ( VAR_96 , "staticchar%32s={" , VAR_97 ) == 1 ) VAR_98 = 11 ; else continue ; VAR_99 = ( unsigned TYPE_22 * ) METHOD_24 ( VAR_100 , '_' ) ; if ( VAR_101 == ( unsigned TYPE_23 * ) VAR_102 ) VAR_103 = ( unsigned TYPE_24 * ) VAR_104 ; else VAR_105 ++ ; if ( METHOD_25 ( "bits[]" , ( TYPE_25 * ) VAR_106 ) == 0 ) break ; } if ( ( VAR_107 -> VAR_108 == 0 ) || ( VAR_109 -> VAR_110 == 0 ) || ( METHOD_26 ( VAR_111 ) != VAR_112 ) ) METHOD_27 ( VAR_113 , "ImproperImageHeader" ) ; if ( METHOD_28 ( VAR_114 , VAR_115 -> VAR_116 ) == VAR_117 ) METHOD_29 ( VAR_118 , "MemoryAllocationFailed" ) ; VAR_119 -> VAR_120 [ 0 ] . VAR_121 = VAR_122 ; VAR_123 -> VAR_124 [ 0 ] . VAR_125 = VAR_126 ; VAR_127 -> VAR_128 [ 0 ] . VAR_129 = VAR_130 ; VAR_131 -> VAR_132 [ 1 ] . VAR_133 = ( TYPE_26 ) 0 ; VAR_134 -> VAR_135 [ 1 ] . VAR_136 = ( TYPE_27 ) 0 ; VAR_137 -> VAR_138 [ 1 ] . VAR_139 = ( TYPE_28 ) 0 ; if ( VAR_140 -> VAR_141 != VAR_142 ) { ( TYPE_29 ) METHOD_30 ( VAR_143 ) ; return ( METHOD_31 ( VAR_144 ) ) ; } VAR_145 = METHOD_32 ( VAR_146 , VAR_147 -> VAR_148 , VAR_149 -> VAR_150 ) ; if ( VAR_151 == VAR_152 ) { METHOD_33 ( VAR_153 , & VAR_154 -> VAR_155 ) ; return ( METHOD_34 ( VAR_156 ) ) ; } VAR_157 [ ( TYPE_30 ) '0' ] = 0 ; VAR_158 [ ( TYPE_31 ) '1' ] = 1 ; VAR_159 [ ( TYPE_32 ) '2' ] = 2 ; VAR_160 [ ( TYPE_33 ) '3' ] = 3 ; VAR_161 [ ( TYPE_34 ) '4' ] = 4 ; VAR_162 [ ( TYPE_35 ) '5' ] = 5 ; VAR_163 [ ( TYPE_36 ) '6' ] = 6 ; VAR_164 [ ( TYPE_37 ) '7' ] = 7 ; VAR_165 [ ( TYPE_38 ) '8' ] = 8 ; VAR_166 [ ( TYPE_39 ) '9' ] = 9 ; VAR_167 [ ( TYPE_40 ) 'A' ] = 10 ; VAR_168 [ ( TYPE_41 ) 'B' ] = 11 ; VAR_169 [ ( TYPE_42 ) 'C' ] = 12 ; VAR_170 [ ( TYPE_43 ) 'D' ] = 13 ; VAR_171 [ ( TYPE_44 ) 'E' ] = 14 ; VAR_172 [ ( TYPE_45 ) 'F' ] = 15 ; VAR_173 [ ( TYPE_46 ) 'a' ] = 10 ; VAR_174 [ ( TYPE_47 ) 'b' ] = 11 ; VAR_175 [ ( TYPE_48 ) 'c' ] = 12 ; VAR_176 [ ( TYPE_49 ) 'd' ] = 13 ; VAR_177 [ ( TYPE_50 ) 'e' ] = 14 ; VAR_178 [ ( TYPE_51 ) 'f' ] = 15 ; VAR_179 [ ( TYPE_52 ) 'x' ] = 0 ; VAR_180 [ ( TYPE_53 ) '' ] = ( - 1 ) ; VAR_181 [ ( TYPE_54 ) ',' ] = ( - 1 ) ; VAR_182 [ ( TYPE_55 ) '}' ] = ( - 1 ) ; VAR_183 [ ( TYPE_56 ) '\\n' ] = ( - 1 ) ; VAR_184 [ ( TYPE_57 ) '\\t' ] = ( - 1 ) ; VAR_185 = 0 ; if ( ( ( VAR_186 -> VAR_187 % 16 ) != 0 ) && ( ( VAR_188 -> VAR_189 % 16 ) < 9 ) && ( VAR_190 == 10 ) ) VAR_191 = 1 ; VAR_192 = ( unsigned TYPE_58 ) ( VAR_193 -> VAR_194 + 7 ) / 8 + VAR_195 ; VAR_196 = ( unsigned TYPE_59 ) VAR_197 -> VAR_198 ; VAR_199 = ( unsigned TYPE_60 * ) METHOD_35 ( VAR_200 , VAR_201 * sizeof ( * VAR_202 ) ) ; if ( VAR_203 == ( unsigned TYPE_61 * ) VAR_204 ) METHOD_36 ( VAR_205 , "MemoryAllocationFailed" ) ; VAR_206 = VAR_207 ; if ( VAR_208 == 10 ) for ( VAR_209 = 0 ; VAR_210 < ( TYPE_62 ) ( VAR_211 * VAR_212 -> VAR_213 ) ; ( VAR_214 += 2 ) ) {  VAR_215 = METHOD_37 ( VAR_216 , VAR_217 ) ;   * VAR_218 ++ = ( unsigned TYPE_63 ) VAR_219 ;  if ( ( VAR_220 == 0 ) || ( ( ( VAR_221 + 2 ) % VAR_222 ) != 0 ) )  * VAR_223 ++ = ( unsigned TYPE_64 ) ( VAR_224 >> 8 ) ;  } else for ( VAR_225 = 0 ; VAR_226 < ( TYPE_65 ) ( VAR_227 * VAR_228 -> VAR_229 ) ; VAR_230 ++ ) { VAR_231 = METHOD_38 ( VAR_232 , VAR_233 ) ;  * VAR_234 ++ = ( unsigned TYPE_66 ) VAR_235 ;  } VAR_236 = VAR_237 ; for ( VAR_238 = 0 ; VAR_239 < ( TYPE_67 ) VAR_240 -> VAR_241 ; VAR_242 ++ ) { VAR_243 = METHOD_39 ( VAR_244 , 0 , VAR_245 , VAR_246 -> VAR_247 , 1 , VAR_248 ) ; if ( VAR_249 == ( TYPE_68 * ) VAR_250 ) break ; VAR_251 = METHOD_40 ( VAR_252 ) ; VAR_253 = 0 ; VAR_254 = 0 ; for ( VAR_255 = 0 ; VAR_256 < ( TYPE_69 ) VAR_257 -> VAR_258 ; VAR_259 ++ ) { if ( VAR_260 == 0 )  VAR_261 = ( TYPE_70 ) ( * VAR_262 ++ ) ;  METHOD_41 ( VAR_263 + VAR_264 , ( VAR_265 & 0x01 ) != 0 ? 0x01 : 0x00 ) ; VAR_266 ++ ; VAR_267 >>= 1 ; if ( VAR_268 == 8 ) VAR_269 = 0 ; } if ( METHOD_42 ( VAR_270 , VAR_271 ) == VAR_272 ) break ; VAR_273 = METHOD_43 ( VAR_274 , VAR_275 , ( TYPE_71 ) VAR_276 , VAR_277 -> VAR_278 ) ; if ( VAR_279 == VAR_280 ) break ; } VAR_281 = ( unsigned TYPE_72 * ) METHOD_44 ( VAR_282 ) ; ( TYPE_73 ) METHOD_45 ( VAR_283 ) ; ( TYPE_74 ) METHOD_46 ( VAR_284 ) ; return ( METHOD_47 ( VAR_285 ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 * VAR_4 ; VAR_5 * VAR_6 ; TYPE_2 VAR_7 ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; VAR_14 * VAR_15 ; TYPE_5 VAR_16 ; TYPE_6 VAR_17 [ VAR_18 ] ; TYPE_7 VAR_19 ; VAR_20 * VAR_21 ; VAR_22 * VAR_23 ; TYPE_8 * VAR_24 ; TYPE_9 VAR_25 ; TYPE_10 VAR_26 ; TYPE_11 VAR_27 ; TYPE_12 VAR_28 ; TYPE_13 VAR_29 ; TYPE_14 VAR_30 [ 1024 ] ; VAR_31 * VAR_32 ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = METHOD_1 ( VAR_37 -> VAR_38 ) ; if ( ! ( VAR_39 -> VAR_40 = METHOD_2 ( VAR_41 ) ) ) { return - 1 ; } if ( METHOD_3 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ) { METHOD_4 ( "cannotwriteSOCmarker\\n" ) ; return - 1 ; } METHOD_5 ( VAR_48 -> VAR_49 ) ; VAR_50 -> VAR_51 = 0 ; if ( ! ( VAR_52 -> VAR_53 = METHOD_6 ( VAR_54 ) ) ) { return - 1 ; } VAR_55 = & VAR_56 -> VAR_57 -> VAR_58 . VAR_59 ; VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; VAR_70 -> VAR_71 = VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 -> VAR_81 ; VAR_82 -> VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 = VAR_88 -> VAR_89 ; VAR_90 -> VAR_91 = VAR_92 -> VAR_93 ; VAR_94 -> VAR_95 = VAR_96 -> VAR_97 ; VAR_98 -> VAR_99 = METHOD_7 ( VAR_100 -> VAR_101 , sizeof ( VAR_102 ) ) ; METHOD_8 ( VAR_103 -> VAR_104 ) ; for ( VAR_105 = 0 ; VAR_106 < METHOD_9 ( TYPE_15 , VAR_107 -> VAR_108 ) ; ++ VAR_109 ) { VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 = VAR_114 -> VAR_115 [ VAR_116 ] . VAR_117 ; VAR_118 -> VAR_119 [ VAR_120 ] . VAR_121 = VAR_122 -> VAR_123 [ VAR_124 ] . VAR_125 ; VAR_126 -> VAR_127 [ VAR_128 ] . VAR_129 = VAR_130 -> VAR_131 [ VAR_132 ] . VAR_133 ; VAR_134 -> VAR_135 [ VAR_136 ] . VAR_137 = VAR_138 -> VAR_139 [ VAR_140 ] . VAR_141 ; } if ( METHOD_10 ( VAR_142 -> VAR_143 , VAR_144 -> VAR_145 , VAR_146 -> VAR_147 ) ) { METHOD_11 ( "cannotwriteSIZmarker\\n" ) ; return - 1 ; } METHOD_12 ( VAR_148 -> VAR_149 ) ; VAR_150 -> VAR_151 = 0 ; if ( ! ( VAR_152 -> VAR_153 = METHOD_13 ( VAR_154 ) ) ) { return - 1 ; } METHOD_14 ( VAR_155 , "Creator:JasPerVersion%s" , METHOD_15 ( ) ) ; VAR_156 = & VAR_157 -> VAR_158 -> VAR_159 . VAR_160 ; VAR_161 -> VAR_162 = METHOD_16 ( TYPE_16 , METHOD_17 ( VAR_163 ) ) ; VAR_164 -> VAR_165 = VAR_166 ;  if ( ! ( VAR_167 -> VAR_168 = METHOD_18 ( uchar * , METHOD_19 ( VAR_169 ) ) ) ) {  METHOD_20 ( ) ; } if ( METHOD_21 ( VAR_170 -> VAR_171 , VAR_172 -> VAR_173 , VAR_174 -> VAR_175 ) ) { METHOD_22 ( "cannotwriteCOMmarker\\n" ) ; return - 1 ; } METHOD_23 ( VAR_176 -> VAR_177 ) ; VAR_178 -> VAR_179 = 0 ; if 0 if ( ! ( VAR_180 -> VAR_181 = METHOD_24 ( VAR_182 ) ) ) { return - 1 ; } VAR_183 = & VAR_184 -> VAR_185 -> VAR_186 . VAR_187 ; VAR_188 -> VAR_189 = METHOD_25 ( VAR_190 -> VAR_191 , sizeof ( VAR_192 ) ) ; if ( METHOD_26 ( VAR_193 -> VAR_194 , VAR_195 -> VAR_196 , VAR_197 -> VAR_198 ) ) { METHOD_27 ( "cannotwriteCRGmarker\\n" ) ; return - 1 ; } METHOD_28 ( VAR_199 -> VAR_200 ) ; VAR_201 -> VAR_202 = 0 ; VAR_203 = & VAR_204 -> VAR_205 ; VAR_206 = & VAR_207 -> VAR_208 ; for ( VAR_209 = 0 ; VAR_210 < VAR_211 -> VAR_212 ; ++ VAR_213 ) { VAR_214 = METHOD_29 ( VAR_215 -> VAR_216 , VAR_217 -> VAR_218 - 1 ) ; METHOD_30 ( VAR_219 , 0 , 0 , 1 << VAR_220 -> VAR_221 , 1 << VAR_222 -> VAR_223 , VAR_224 ) ; METHOD_31 ( VAR_225 ) ; VAR_226 = METHOD_32 ( VAR_227 -> VAR_228 , VAR_229 ) ; VAR_230 = 3 * VAR_231 -> VAR_232 - 2 ; for ( VAR_233 = 0 , VAR_234 = VAR_235 ; VAR_236 < VAR_237 ; ++ VAR_238 , ++ VAR_239 ) { VAR_240 = ( VAR_241 ) ? ( ( VAR_242 - 1 ) / 3 + 1 ) : 0 ; VAR_243 = METHOD_33 ( VAR_244 -> VAR_245 , VAR_246 -> VAR_247 , VAR_248 , VAR_249 -> VAR_250 ) ; if ( ! VAR_251 -> VAR_252 ) { VAR_253 = METHOD_34 ( METHOD_35 ( 1 << ( VAR_254 + 1 ) ) , VAR_255 -> VAR_256 ) ; } else { VAR_257 = METHOD_36 ( 1 ) ; } VAR_258 -> VAR_259 [ VAR_260 ] . VAR_261 [ VAR_262 ] = METHOD_37 ( VAR_263 , VAR_264 -> VAR_265 [ VAR_266 ] . VAR_267 + VAR_268 ) ; } VAR_269 -> VAR_270 [ VAR_271 ] . VAR_272 = VAR_273 ; } if ( ! ( VAR_274 -> VAR_275 = METHOD_38 ( VAR_276 ) ) ) { return - 1 ; } VAR_277 = & VAR_278 -> VAR_279 -> VAR_280 . VAR_281 ; VAR_282 -> VAR_283 = VAR_284 -> VAR_285 . VAR_286 | VAR_287 -> VAR_288 . VAR_289 ; VAR_290 -> VAR_291 . VAR_292 = VAR_293 -> VAR_294 . VAR_295 | VAR_296 -> VAR_297 . VAR_298 ; VAR_299 -> VAR_300 . VAR_301 = VAR_302 -> VAR_303 . VAR_304 - 1 ; VAR_305 -> VAR_306 . VAR_307 = VAR_308 -> VAR_309 . VAR_310 ; VAR_311 -> VAR_312 = VAR_313 -> VAR_314 . VAR_315 ; VAR_316 -> VAR_317 = VAR_318 -> VAR_319 . VAR_320 ; VAR_321 -> VAR_322 . VAR_323 = METHOD_39 ( VAR_324 -> VAR_325 . VAR_326 ) ; VAR_327 -> VAR_328 . VAR_329 = METHOD_40 ( VAR_330 -> VAR_331 . VAR_332 ) ; VAR_333 -> VAR_334 . VAR_335 = VAR_336 -> VAR_337 . VAR_338 ; VAR_339 -> VAR_340 . VAR_341 = VAR_342 -> VAR_343 . VAR_344 ; VAR_345 -> VAR_346 = ( VAR_347 -> VAR_348 . VAR_349 != VAR_350 ) ; if ( VAR_351 -> VAR_352 & VAR_353 ) { for ( VAR_354 = 0 ; VAR_355 < VAR_356 -> VAR_357 ; ++ VAR_358 ) { VAR_359 -> VAR_360 . VAR_361 [ VAR_362 ] . VAR_363 = VAR_364 -> VAR_365 [ VAR_366 ] ; VAR_367 -> VAR_368 . VAR_369 [ VAR_370 ] . VAR_371 = VAR_372 -> VAR_373 [ VAR_374 ] ; } } if ( METHOD_41 ( VAR_375 -> VAR_376 , VAR_377 -> VAR_378 , VAR_379 -> VAR_380 ) ) { METHOD_42 ( "cannotwriteCODmarker\\n" ) ; return - 1 ; } METHOD_43 ( VAR_381 -> VAR_382 ) ; VAR_383 -> VAR_384 = 0 ; if ( ! ( VAR_385 -> VAR_386 = METHOD_44 ( VAR_387 ) ) ) { return - 1 ; } VAR_388 = & VAR_389 -> VAR_390 -> VAR_391 . VAR_392 ; VAR_393 -> VAR_394 . VAR_395 = ( VAR_396 -> VAR_397 == VAR_398 ) ? VAR_399 : VAR_400 ; VAR_401 -> VAR_402 . VAR_403 = VAR_404 -> VAR_405 [ 0 ] . VAR_406 ; VAR_407 -> VAR_408 . VAR_409 = VAR_410 -> VAR_411 . VAR_412 ; VAR_413 -> VAR_414 . VAR_415 = VAR_416 -> VAR_417 [ 0 ] . VAR_418 ; if ( METHOD_45 ( VAR_419 -> VAR_420 , VAR_421 -> VAR_422 , VAR_423 -> VAR_424 ) ) { return - 1 ; } VAR_425 -> VAR_426 . VAR_427 = 0 ; METHOD_46 ( VAR_428 -> VAR_429 ) ; VAR_430 -> VAR_431 = 0 ; VAR_432 = & VAR_433 -> VAR_434 ; for ( VAR_435 = 1 ; VAR_436 < VAR_437 -> VAR_438 ; ++ VAR_439 ) { if ( ! ( VAR_440 -> VAR_441 = METHOD_47 ( VAR_442 ) ) ) { return - 1 ; } VAR_443 = & VAR_444 -> VAR_445 -> VAR_446 . VAR_447 ; VAR_448 -> VAR_449 = VAR_450 ; VAR_451 -> VAR_452 . VAR_453 = ( VAR_454 -> VAR_455 == VAR_456 ) ? VAR_457 : VAR_458 ; VAR_459 -> VAR_460 . VAR_461 = VAR_462 -> VAR_463 [ VAR_464 ] . VAR_465 ; VAR_466 -> VAR_467 . VAR_468 = VAR_469 -> VAR_470 . VAR_471 ; VAR_472 -> VAR_473 . VAR_474 = VAR_475 -> VAR_476 [ VAR_477 ] . VAR_478 ; if ( METHOD_48 ( VAR_479 -> VAR_480 , VAR_481 -> VAR_482 , VAR_483 -> VAR_484 ) ) { return - 1 ; } VAR_485 -> VAR_486 . VAR_487 = 0 ; METHOD_49 ( VAR_488 -> VAR_489 ) ; VAR_490 -> VAR_491 = 0 ; } VAR_492 2 VAR_493 = METHOD_50 ( VAR_494 -> VAR_495 ) - VAR_496 ; VAR_497 -> VAR_498 += VAR_499 ; if ( VAR_500 -> VAR_501 -> VAR_502 != VAR_503 ) { TYPE_17 VAR_504 ; VAR_505 = VAR_506 + VAR_507 ; VAR_508 -> VAR_509 = ( VAR_510 -> VAR_511 -> VAR_512 >= VAR_513 ) ? ( VAR_514 -> VAR_515 -> VAR_516 - VAR_517 ) : 0 ; } else { VAR_518 -> VAR_519 = VAR_520 ; } return 0 ; }
TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , const TYPE_3 * VAR_4 ) { TYPE_4 * VAR_5 , * VAR_6 , * * VAR_7 , * VAR_8 , * VAR_9 ; TYPE_5 * VAR_10 , * VAR_11 , VAR_12 [ 2 ] , * VAR_13 ; TYPE_6 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; if ( ! VAR_18 -> VAR_19 ) VAR_20 -> VAR_21 = METHOD_1 ( "+" ) ; if ( ! VAR_22 -> VAR_23 ) return ; VAR_24 = 0 ; VAR_25 = VAR_26 ; VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 , '' ) ; if ( VAR_30 ) { VAR_31 = METHOD_3 ( VAR_32 -> VAR_33 , VAR_34 - VAR_35 -> VAR_36 ) ; if ( ! VAR_37 ) return ; VAR_38 ++ ; while ( VAR_39 [ 0 ] == '' ) VAR_40 ++ ; VAR_41 = METHOD_4 ( VAR_42 , "" , VAR_43 , VAR_44 | VAR_45 | VAR_46 , 0 , & VAR_47 ) ; } else { VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; if ( ! VAR_51 ) return ; } VAR_52 = METHOD_6 ( METHOD_7 ( VAR_53 -> VAR_54 ) + 1 + 1 ) ; VAR_55 = METHOD_8 ( ( ( VAR_56 ) ? METHOD_9 ( VAR_57 ) : 0 ) + ( ( VAR_58 ) ? 1 + METHOD_10 ( VAR_59 ) : 0 ) + 1 ) ; if ( VAR_60 && VAR_61 ) { VAR_62 [ 0 ] = '\\0' ; VAR_63 [ 0 ] = '\\0' ; VAR_64 = 0 ; VAR_65 = 0 ; VAR_66 = VAR_67 ; while ( VAR_68 && VAR_69 [ 0 ] ) { if ( ( VAR_70 [ 0 ] == '+' ) || ( VAR_71 [ 0 ] == '-' ) ) { VAR_72 [ 0 ] = VAR_73 [ 0 ] ; VAR_74 [ 1 ] = '\\0' ; METHOD_11 ( VAR_75 , VAR_76 ) ; } else { VAR_77 = VAR_78 ; switch ( METHOD_12 ( VAR_79 , VAR_80 [ 0 ] ) ) { case 'A' : case 'B' : case 'C' : VAR_81 = ( VAR_82 < VAR_83 ) ? VAR_84 [ VAR_85 ] : VAR_86 ; break ; case 'D' : break ; } if ( VAR_87 ) VAR_88 ++ ; if ( VAR_89 [ 0 ] == VAR_90 ) {  VAR_91 = 1 ;  if ( VAR_92 == '+' ) { VAR_93 [ 0 ] = VAR_94 [ 0 ] ; VAR_95 [ 1 ] = '\\0' ; METHOD_13 ( VAR_96 , VAR_97 ) ; if ( VAR_98 ) { if ( VAR_99 [ 0 ] ) METHOD_14 ( VAR_100 , "" ) ; METHOD_15 ( VAR_101 , VAR_102 ) ; } } }  else  { VAR_103 [ 0 ] = VAR_104 [ 0 ] ; VAR_105 [ 1 ] = '\\0' ; METHOD_16 ( VAR_106 , VAR_107 ) ; if ( VAR_108 ) { if ( VAR_109 [ 0 ] ) METHOD_17 ( VAR_110 , "" ) ; METHOD_18 ( VAR_111 , VAR_112 ) ; } } } VAR_113 ++ ; } if ( ! VAR_114 ) { if ( VAR_115 == '+' ) { if ( VAR_116 ) { VAR_117 [ 0 ] = VAR_118 ; VAR_119 [ 1 ] = '\\0' ; METHOD_19 ( VAR_120 , VAR_121 ) ; if ( VAR_122 [ 0 ] ) METHOD_20 ( VAR_123 , "" ) ; METHOD_21 ( VAR_124 , VAR_125 ) ; } else { VAR_126 = VAR_127 ; while ( VAR_128 [ 0 ] == '+' ) VAR_129 ++ ; METHOD_22 ( VAR_130 + 1 , VAR_131 , METHOD_23 ( VAR_132 ) + 1 ) ; VAR_133 [ 0 ] = VAR_134 ; } } } if ( VAR_135 [ 0 ] ) { VAR_136 = METHOD_24 ( VAR_137 ) + 1 + METHOD_25 ( VAR_138 ) + 1 ; VAR_139 = METHOD_26 ( VAR_140 ) ; if ( VAR_141 ) { METHOD_27 ( VAR_142 , VAR_143 , "%s%s" , VAR_144 , VAR_145 ) ; if ( VAR_146 -> VAR_147 ) METHOD_28 ( VAR_148 -> VAR_149 ) ; VAR_150 -> VAR_151 = VAR_152 ; } } else { if ( VAR_153 -> VAR_154 ) METHOD_29 ( VAR_155 -> VAR_156 ) ; VAR_157 -> VAR_158 = METHOD_30 ( VAR_159 ) ; } } if ( VAR_160 ) METHOD_31 ( VAR_161 ) ; if ( VAR_162 ) METHOD_32 ( VAR_163 ) ; if ( VAR_164 ) METHOD_33 ( VAR_165 ) ; if ( VAR_166 ) METHOD_34 ( VAR_167 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  const TYPE_2 VAR_1 = 8 ; const TYPE_3 VAR_2 = ( 1 << VAR_3 ) - 191 ;  const TYPE_4 VAR_4 = METHOD_1 ( VAR_5 , VAR_6 - 1 ) ;   return VAR_7 < VAR_8 ? VAR_9 : ( VAR_10 << 1 ) - VAR_11 + METHOD_2 ( VAR_12 ) ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  METHOD_1 ( VAR_3 [ 0 ] <= 0 && VAR_4 [ 1 ] > 0 ) ; VAR_5 [ - VAR_6 [ 0 ] ] = METHOD_2 ( VAR_7 [ 0 ] , 0 ) ; METHOD_3 ( VAR_8 , VAR_9 , VAR_10 , 2 , 0 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ,  TYPE_3 * VAR_2 ) {  if ( VAR_3 -> VAR_4 == VAR_5 ) { const TYPE_4 VAR_6 = METHOD_1 ( VAR_7 , VAR_8 ) ; const TYPE_5 VAR_9 =  ( TYPE_6 ) METHOD_2 ( VAR_10 , VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] ) ;   if ( ! VAR_15 -> VAR_16 )  ++ VAR_17 -> VAR_18 . VAR_19 [ VAR_20 ] [ VAR_21 ] ; return VAR_22 ; } else { return VAR_23 -> VAR_24 ; } }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * METHOD_1 ) ( TYPE_3 * , const TYPE_4 * , TYPE_5 * , TYPE_6 ) , TYPE_7 * VAR_1 ) { TYPE_8 * VAR_2 = VAR_3 ; if ( METHOD_2 ( VAR_4 ) < 0 ) { return - 1 ; } VAR_5 -> VAR_6 [ VAR_7 -> VAR_8 ] = '\\0' ; if ( VAR_9 -> VAR_10 [ 5 ] == '?' ) { return METHOD_3 ( VAR_11 , "vCont;c;s" ) ; } if ( ! ( VAR_12 = METHOD_4 ( VAR_13 -> VAR_14 , ";" ) ) ) { return METHOD_5 ( VAR_15 , "E01" ) ; } while ( VAR_16 = METHOD_6 ( VAR_17 , ";" ) ) { METHOD_7 ( "action:%s\\n" , VAR_18 ) ; switch ( VAR_19 [ 0 ] ) { case 's' : if ( METHOD_8 ( VAR_20 , "ds" , VAR_21 , 0 ) < 0 ) { METHOD_9 ( VAR_22 , "E01" ) ; return - 1 ; } return METHOD_10 ( VAR_23 , "OK" ) ; case 'c' : if ( METHOD_11 ( VAR_24 , "dc" , VAR_25 , 0 ) < 0 ) { METHOD_12 ( VAR_26 , "E01" ) ; return - 1 ; } return METHOD_13 ( VAR_27 , "OK" ) ; default : return METHOD_14 ( VAR_28 , "E01" ) ; } }  }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const struct STRUCT_OR_UNION_0 * VAR_3 ; const struct STRUCT_OR_UNION_1 * VAR_4 ; const struct STRUCT_OR_UNION_2 * VAR_5 ; const struct STRUCT_OR_UNION_3 * VAR_6 ; const struct STRUCT_OR_UNION_4 * VAR_7 ; const struct STRUCT_OR_UNION_5 * VAR_8 ; const struct STRUCT_OR_UNION_6 * VAR_9 ; const struct STRUCT_OR_UNION_7 * VAR_10 ; const TYPE_4 * VAR_11 , * VAR_12 , * VAR_13 ; struct STRUCT_OR_UNION_8 VAR_14 ; const struct STRUCT_OR_UNION_9 * VAR_15 ; TYPE_5 VAR_16 ; TYPE_6 TYPE_7 ; METHOD_1 ( TYPE_8 ) if ( ( const TYPE_9 * ) & ( TYPE_10 ) > VAR_17 - sizeof ( TYPE_11 ) ) return VAR_18 = VAR_19 ; VAR_20 = VAR_21 -> VAR_22 ; while ( VAR_23 < VAR_24 ) { VAR_25 = ( const struct STRUCT_OR_UNION_10 * ) VAR_26 ; METHOD_2 ( VAR_27 -> VAR_28 ) ; if ( VAR_29 <= 0 ) return ; if ( VAR_30 -> VAR_31 == 0 ) goto VAR_32 ; if ( VAR_33 + ( VAR_34 -> VAR_35 << 3 ) > VAR_36 ) goto VAR_37 ; METHOD_3 ( ( VAR_38 , "\\n\\t%soption(%u),length%u(%u):" , METHOD_4 ( VAR_39 , "unknown" , VAR_40 -> VAR_41 ) , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 << 3 , VAR_46 -> VAR_47 ) ) ; switch ( VAR_48 -> VAR_49 ) { case VAR_50 : VAR_51 = ( VAR_52 -> VAR_53 << 3 ) - 2 ; METHOD_5 ( VAR_54 , VAR_55 + 2 , VAR_56 ) ; break ; case VAR_57 : VAR_58 = ( VAR_59 -> VAR_60 << 3 ) - 2 ; METHOD_6 ( VAR_61 , VAR_62 + 2 , VAR_63 ) ; break ; case VAR_64 : VAR_65 = ( const struct STRUCT_OR_UNION_11 * ) VAR_66 ; METHOD_7 ( VAR_67 -> VAR_68 ) ; METHOD_8 ( ( VAR_69 , "%s/%u%s,Flags[%s],validtime%s" , METHOD_9 ( VAR_70 , & VAR_71 -> VAR_72 ) , VAR_73 -> VAR_74 , ( VAR_75 -> VAR_76 != 4 ) ? "badlen" : "" , METHOD_10 ( VAR_77 , "none" , VAR_78 -> VAR_79 ) , METHOD_11 ( METHOD_12 ( & VAR_80 -> VAR_81 ) ) ) ) ; METHOD_13 ( ( VAR_82 , ",pref.time%s" , METHOD_14 ( METHOD_15 ( & VAR_83 -> VAR_84 ) ) ) ) ; break ; case VAR_85 : METHOD_16 ( VAR_86 , VAR_87 , "\\n\\t" , VAR_88 -> VAR_89 << 3 ) ; break ; case VAR_90 : VAR_91 = ( const struct STRUCT_OR_UNION_12 * ) VAR_92 ; METHOD_17 ( VAR_93 -> VAR_94 ) ; METHOD_18 ( ( VAR_95 , "%u%s" , METHOD_19 ( & VAR_96 -> VAR_97 ) , ( VAR_98 -> VAR_99 != 1 ) ? "badoptionlength" : "" ) ) ; break ; case VAR_100 : VAR_101 = ( const struct STRUCT_OR_UNION_13 * ) VAR_102 ; VAR_103 = ( VAR_104 -> VAR_105 - 1 ) / 2 ; METHOD_20 ( ( VAR_106 , "lifetime%us," , METHOD_21 ( & VAR_107 -> VAR_108 ) ) ) ; for ( TYPE_12 = 0 ; TYPE_13 < VAR_109 ; TYPE_14 ++ ) { METHOD_22 ( VAR_110 -> VAR_111 [ TYPE_15 ] ) ; METHOD_23 ( ( VAR_112 , "addr:%s" , METHOD_24 ( VAR_113 , & VAR_114 -> VAR_115 [ TYPE_16 ] ) ) ) ; } break ; case VAR_116 : VAR_117 = ( const struct STRUCT_OR_UNION_14 * ) VAR_118 ; METHOD_25 ( ( VAR_119 , "lifetime%us,domain(s):" , METHOD_26 ( & VAR_120 -> VAR_121 ) ) ) ; VAR_122 = VAR_123 + 8 ; while ( VAR_124 < VAR_125 + ( VAR_126 -> VAR_127 << 3 ) && * VAR_128 != '\\0' ) { METHOD_27 ( ( VAR_129 , "" ) ) ; if ( ( VAR_130 = METHOD_28 ( VAR_131 , VAR_132 , VAR_133 ) ) == VAR_134 ) goto VAR_135 ; } break ; case VAR_136 : VAR_137 = ( const struct STRUCT_OR_UNION_15 * ) VAR_138 ; METHOD_29 ( VAR_139 -> VAR_140 ) ; METHOD_30 ( ( VAR_141 , "%ums" , METHOD_31 ( & VAR_142 -> VAR_143 ) ) ) ; break ; case VAR_144 : VAR_145 = ( const struct STRUCT_OR_UNION_16 * ) VAR_146 ; METHOD_32 ( VAR_147 -> VAR_148 ) ; METHOD_33 ( ( VAR_149 , "preference%u,lifetime%u" , METHOD_34 ( & VAR_150 -> VAR_151 ) , METHOD_35 ( & VAR_152 -> VAR_153 ) ) ) ; break ; case VAR_154 : VAR_155 = ( const struct STRUCT_OR_UNION_17 * ) VAR_156 ; METHOD_36 ( VAR_157 -> VAR_158 ) ; METHOD_37 ( & VAR_159 , 0 , sizeof ( VAR_160 ) ) ; VAR_161 = ( const struct STRUCT_OR_UNION_18 * ) ( VAR_162 + 1 ) ; switch ( VAR_163 -> VAR_164 ) { case 1 : break ; case 2 : METHOD_38 ( * VAR_165 , 8 ) ; METHOD_39 ( & VAR_166 , VAR_167 + 1 , 8 ) ; break ; case 3 : METHOD_40 ( * VAR_168 ) ; METHOD_41 ( & VAR_169 , VAR_170 + 1 , sizeof ( VAR_171 ) ) ; break ; default : goto VAR_172 ; } METHOD_42 ( ( VAR_173 , "%s/%u" , METHOD_43 ( VAR_174 , & VAR_175 ) , VAR_176 -> VAR_177 ) ) ; METHOD_44 ( ( VAR_178 , ",pref=%s" , METHOD_45 ( VAR_179 -> VAR_180 ) ) ) ; METHOD_46 ( ( VAR_181 , ",lifetime=%s" , METHOD_47 ( METHOD_48 ( & VAR_182 -> VAR_183 ) ) ) ) ; break ; default : if ( VAR_184 -> VAR_185 <= 1 ) { METHOD_49 ( VAR_186 , VAR_187 + 2 , "\\n\\t" , ( VAR_188 -> VAR_189 << 3 ) - 2 ) ; return ; } break ; } if ( VAR_190 -> VAR_191 > 1 ) METHOD_50 ( VAR_192 , VAR_193 + 2 , "\\n\\t" , ( VAR_194 -> VAR_195 << 3 ) - 2 ) ; VAR_196 += VAR_197 -> VAR_198 << 3 ; VAR_199 -= VAR_200 -> VAR_201 << 3 ; } return ; VAR_202 :  METHOD_51 ( ( VAR_203 , "[ndpopt]" ) ) ;  return ; METHOD_52 }
TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 ) { * VAR_1 = ( TYPE_2 * ) METHOD_1 ( sizeof ( TYPE_3 ) ) ; if ( * VAR_2 == VAR_3 ) return VAR_4 ; ( * VAR_5 ) -> VAR_6 = 0 ;  ( * VAR_7 ) -> VAR_8 = VAR_9 ;  return VAR_10 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 * VAR_3 ; const TYPE_1 * VAR_4 ; TYPE_2 VAR_5 ; METHOD_1 ( & VAR_6 -> VAR_7 , VAR_8 ) ; VAR_9 = METHOD_2 ( 128 ) ; METHOD_3 ( VAR_10 , VAR_11 ) ; METHOD_4 ( & VAR_12 -> VAR_13 , VAR_14 ) { if ( ! VAR_15 -> VAR_16 ) continue ; METHOD_5 ( VAR_17 , METHOD_6 ( VAR_18 ) ) ;  VAR_19 = METHOD_7 ( VAR_20 , VAR_21 -> VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , & VAR_26 ) ;   if ( VAR_27 <= 0 ) {   METHOD_8 ( VAR_28 -> VAR_29 , VAR_30 ,   "Failedtoexpandkey%s:%s" , VAR_31 -> VAR_32 -> VAR_33 , VAR_34 ) ;  return - 1 ; }  VAR_35 = METHOD_9 ( VAR_36 -> VAR_37 -> VAR_38 , VAR_39 -> VAR_40 ,  METHOD_10 ( VAR_41 ) , & VAR_42 -> VAR_43 , & VAR_44 ) ; if ( VAR_45 > 0 ) { METHOD_11 ( VAR_46 -> VAR_47 , VAR_48 , "Lookup:%s=%s" , METHOD_12 ( VAR_49 ) , VAR_50 -> VAR_51 ) ; } else if ( VAR_52 < 0 ) { METHOD_13 ( VAR_53 -> VAR_54 , VAR_55 , "Failedtolookupkey%s:%s" , METHOD_14 ( VAR_56 ) , VAR_57 ) ; return - 1 ; } else if ( VAR_58 -> VAR_59 -> VAR_60 != VAR_61 ) { METHOD_15 ( VAR_62 -> VAR_63 , VAR_64 , "Lookup:%snotfound,usingdefaultvalue%s" , METHOD_16 ( VAR_65 ) , VAR_66 -> VAR_67 -> VAR_68 ) ; VAR_69 -> VAR_70 = VAR_71 -> VAR_72 -> VAR_73 ; } else { return 0 ; } } return 1 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { struct STRUCT_OR_UNION_0 * VAR_5 = ( struct STRUCT_OR_UNION_1 * ) ( TYPE_6 ) VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ; if ( METHOD_1 ( VAR_8 ) ) return 0 ;  if ( VAR_9 > VAR_10 -> VAR_11 - sizeof ( struct STRUCT_OR_UNION_3 ) )  return 0 ; VAR_12 = ( struct STRUCT_OR_UNION_4 * ) & VAR_13 -> VAR_14 [ VAR_15 ] ;  if ( VAR_16 -> VAR_17 > VAR_18 - VAR_19 -> VAR_20 )  return 0 ; VAR_21 = METHOD_2 ( VAR_22 , VAR_23 ) ; if ( VAR_24 ) return ( TYPE_7 * ) VAR_25 - ( TYPE_8 * ) VAR_26 -> VAR_27 ; return 0 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; register TYPE_7 VAR_6 , VAR_7 ; register TYPE_8 * VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 , TYPE_11 , VAR_11 , VAR_12 , VAR_13 ; TYPE_12 VAR_14 , VAR_15 , VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_13 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; ( TYPE_14 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , "%s" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_15 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; VAR_33 = METHOD_8 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = METHOD_9 ( VAR_41 ) ; return ( ( TYPE_16 * ) VAR_42 ) ; } VAR_43 . VAR_44 = ( TYPE_17 ) METHOD_10 ( VAR_45 ) ; VAR_46 . VAR_47 = ( TYPE_18 ) METHOD_11 ( VAR_48 ) ; VAR_49 . VAR_50 = ( TYPE_19 ) METHOD_12 ( VAR_51 ) ; if ( ( VAR_52 . VAR_53 != 0 ) || ( ( VAR_54 . VAR_55 != 1 ) && ( VAR_56 . VAR_57 != 2 ) ) || ( VAR_58 . VAR_59 > VAR_60 ) ) METHOD_13 ( VAR_61 , "ImproperImageHeader" ) ; for ( VAR_62 = 0 ; VAR_63 < VAR_64 . VAR_65 ; VAR_66 ++ ) { VAR_67 . VAR_68 [ VAR_69 ] . VAR_70 = ( unsigned TYPE_20 ) METHOD_14 ( VAR_71 ) ; VAR_72 . VAR_73 [ VAR_74 ] . VAR_75 = ( unsigned TYPE_21 ) METHOD_15 ( VAR_76 ) ; VAR_77 . VAR_78 [ VAR_79 ] . VAR_80 = ( unsigned TYPE_22 ) METHOD_16 ( VAR_81 ) ; VAR_82 . VAR_83 [ VAR_84 ] . VAR_85 = ( unsigned TYPE_23 ) METHOD_17 ( VAR_86 ) ; VAR_87 . VAR_88 [ VAR_89 ] . VAR_90 = ( unsigned TYPE_24 ) METHOD_18 ( VAR_91 ) ; VAR_92 . VAR_93 [ VAR_94 ] . VAR_95 = ( unsigned TYPE_25 ) METHOD_19 ( VAR_96 ) ; VAR_97 . VAR_98 [ VAR_99 ] . VAR_100 = METHOD_20 ( VAR_101 ) ; VAR_102 . VAR_103 [ VAR_104 ] . VAR_105 = METHOD_21 ( VAR_106 ) ; if ( METHOD_22 ( VAR_107 ) != VAR_108 ) { METHOD_23 ( VAR_109 , VAR_110 , "UnexpectedEndOfFile" , VAR_111 -> VAR_112 ) ; break ; } } VAR_113 = 1 ; for ( VAR_114 = 0 ; VAR_115 < VAR_116 . VAR_117 ; VAR_118 ++ ) { VAR_119 = ( TYPE_26 ) METHOD_24 ( VAR_120 , ( TYPE_27 ) VAR_121 . VAR_122 [ VAR_123 ] . VAR_124 , VAR_125 ) ; if ( VAR_126 < 0 ) METHOD_25 ( VAR_127 , "ImproperImageHeader" ) ; VAR_128 . VAR_129 = METHOD_26 ( VAR_130 ) ; VAR_131 . VAR_132 = ( unsigned TYPE_28 ) ( ( TYPE_29 ) METHOD_27 ( VAR_133 ) ) ; VAR_134 . VAR_135 = ( unsigned TYPE_30 ) ( ( TYPE_31 ) METHOD_28 ( VAR_136 ) / 2 ) ; VAR_137 . VAR_138 = METHOD_29 ( VAR_139 ) ; VAR_140 . VAR_141 = METHOD_30 ( VAR_142 ) ; if ( METHOD_31 ( VAR_143 ) != VAR_144 ) { METHOD_32 ( VAR_145 , VAR_146 , "UnexpectedEndOfFile" , VAR_147 -> VAR_148 ) ; break ; } if ( ( ( VAR_149 . VAR_150 == 18505 ) && ( VAR_151 . VAR_152 == 21060 ) ) || ( VAR_153 . VAR_154 == 0x474e5089 ) ) { TYPE_32 * VAR_155 ; TYPE_33 * VAR_156 ; TYPE_34 VAR_157 ; unsigned TYPE_35 * VAR_158 ;  VAR_159 = VAR_160 . VAR_161 [ VAR_162 ] . VAR_163 ;  VAR_164 = ( unsigned TYPE_36 * ) METHOD_33 ( VAR_165 + 16 , sizeof ( * VAR_166 ) ) ; if ( VAR_167 == ( unsigned TYPE_37 * ) VAR_168 ) METHOD_34 ( VAR_169 , "MemoryAllocationFailed" ) ; ( TYPE_38 ) METHOD_35 ( VAR_170 , "\\211PNG\\r\\n\\032\\n\\000\\000\\000\\015" , 12 ) ; VAR_171 [ 12 ] = ( unsigned TYPE_39 ) VAR_172 . VAR_173 ; VAR_174 [ 13 ] = ( unsigned TYPE_40 ) ( VAR_175 . VAR_176 >> 8 ) ; VAR_177 [ 14 ] = ( unsigned TYPE_41 ) VAR_178 . VAR_179 ; VAR_180 [ 15 ] = ( unsigned TYPE_42 ) ( VAR_181 . VAR_182 >> 8 ) ; VAR_183 = METHOD_36 ( VAR_184 , VAR_185 - 16 , VAR_186 + 16 ) ; VAR_187 = ( TYPE_43 * ) VAR_188 ; if ( VAR_189 > 0 ) { VAR_190 = METHOD_37 ( VAR_191 ) ; ( TYPE_44 ) METHOD_38 ( VAR_192 -> VAR_193 , "PNG" , VAR_194 ) ; VAR_195 = METHOD_39 ( VAR_196 , VAR_197 , VAR_198 + 16 , VAR_199 ) ; VAR_200 = METHOD_40 ( VAR_201 ) ; } VAR_202 = ( unsigned TYPE_45 * ) METHOD_41 ( VAR_203 ) ; if ( VAR_204 == ( TYPE_46 * ) VAR_205 ) { if ( VAR_206 != ( TYPE_47 ) ( VAR_207 - 16 ) ) METHOD_42 ( VAR_208 , "InsufficientImageDataInFile" ) ; VAR_209 = METHOD_43 ( VAR_210 ) ; return ( ( TYPE_48 * ) VAR_211 ) ; } METHOD_44 ( VAR_212 ) ; VAR_213 -> VAR_214 = METHOD_45 ( VAR_215 -> VAR_216 ) ; METHOD_46 ( & VAR_217 , VAR_218 ) ; } else { if ( VAR_219 . VAR_220 > 32 ) METHOD_47 ( VAR_221 , "ImproperImageHeader" ) ; VAR_222 . VAR_223 = METHOD_48 ( VAR_224 ) ; VAR_225 . VAR_226 = METHOD_49 ( VAR_227 ) ; VAR_228 . VAR_229 = METHOD_50 ( VAR_230 ) ; VAR_231 . VAR_232 = METHOD_51 ( VAR_233 ) ; VAR_234 . VAR_235 = METHOD_52 ( VAR_236 ) ; VAR_237 . VAR_238 = METHOD_53 ( VAR_239 ) ; VAR_240 -> VAR_241 = VAR_242 ; VAR_243 -> VAR_244 = ( TYPE_49 ) VAR_245 . VAR_246 [ VAR_247 ] . VAR_248 ; if ( ( TYPE_50 ) VAR_249 -> VAR_250 > VAR_251 . VAR_252 ) VAR_253 -> VAR_254 = ( TYPE_51 ) VAR_255 . VAR_256 ; if ( VAR_257 -> VAR_258 == 0 ) VAR_259 -> VAR_260 = 256 ; VAR_261 -> VAR_262 = ( TYPE_52 ) VAR_263 . VAR_264 [ VAR_265 ] . VAR_266 ; if ( ( TYPE_53 ) VAR_267 -> VAR_268 > VAR_269 . VAR_270 ) VAR_271 -> VAR_272 = ( TYPE_54 ) VAR_273 . VAR_274 ; if ( VAR_275 -> VAR_276 == 0 ) VAR_277 -> VAR_278 = 256 ; VAR_279 -> VAR_280 = VAR_281 . VAR_282 ; if ( VAR_283 -> VAR_284 != VAR_285 ) { ( TYPE_55 ) METHOD_54 ( VAR_286 , METHOD_55 ( ) , "scene=%.20g" , ( TYPE_56 ) VAR_287 ) ; ( TYPE_57 ) METHOD_56 ( VAR_288 , METHOD_57 ( ) , "size=%.20g" , ( TYPE_58 ) VAR_289 . VAR_290 ) ; ( TYPE_59 ) METHOD_58 ( VAR_291 , METHOD_59 ( ) , "width=%.20g" , ( TYPE_60 ) VAR_292 . VAR_293 [ VAR_294 ] . VAR_295 ) ; ( TYPE_61 ) METHOD_60 ( VAR_296 , METHOD_61 ( ) , "height=%.20g" , ( TYPE_62 ) VAR_297 . VAR_298 [ VAR_299 ] . VAR_300 ) ; ( TYPE_63 ) METHOD_62 ( VAR_301 , METHOD_63 ( ) , "colors=%.20g" , ( TYPE_64 ) VAR_302 . VAR_303 ) ; ( TYPE_65 ) METHOD_64 ( VAR_304 , METHOD_65 ( ) , "planes=%.20g" , ( TYPE_66 ) VAR_305 . VAR_306 ) ; ( TYPE_67 ) METHOD_66 ( VAR_307 , METHOD_67 ( ) , "bpp=%.20g" , ( TYPE_68 ) VAR_308 . VAR_309 ) ; } if ( ( VAR_310 . VAR_311 != 0 ) || ( VAR_312 . VAR_313 <= 16U ) ) { VAR_314 -> VAR_315 = VAR_316 ; VAR_317 -> VAR_318 = VAR_319 . VAR_320 ; if ( VAR_321 -> VAR_322 == 0 ) VAR_323 -> VAR_324 = VAR_325 << VAR_326 . VAR_327 ; } if ( VAR_328 -> VAR_329 == VAR_330 ) { register TYPE_69 VAR_331 ; unsigned TYPE_70 * VAR_332 ; if ( METHOD_68 ( VAR_333 , VAR_334 -> VAR_335 , VAR_336 ) == VAR_337 ) METHOD_69 ( VAR_338 , "MemoryAllocationFailed" ) ; VAR_339 = ( unsigned TYPE_71 * ) METHOD_70 ( ( TYPE_72 ) VAR_340 -> VAR_341 , 4UL * sizeof ( * VAR_342 ) ) ; if ( VAR_343 == ( unsigned TYPE_73 * ) VAR_344 ) METHOD_71 ( VAR_345 , "MemoryAllocationFailed" ) ; VAR_346 = METHOD_72 ( VAR_347 , ( TYPE_74 ) ( 4 * VAR_348 -> VAR_349 ) , VAR_350 ) ; if ( VAR_351 != ( TYPE_75 ) ( 4 * VAR_352 -> VAR_353 ) ) METHOD_73 ( VAR_354 , "InsufficientImageDataInFile" ) ; VAR_355 = VAR_356 ; for ( VAR_357 = 0 ; VAR_358 < ( TYPE_76 ) VAR_359 -> VAR_360 ; VAR_361 ++ ) { VAR_362 -> VAR_363 [ VAR_364 ] . VAR_365 = ( TYPE_77 ) METHOD_74 ( * VAR_366 ++ ) ; VAR_367 -> VAR_368 [ VAR_369 ] . VAR_370 = ( TYPE_78 ) METHOD_75 ( * VAR_371 ++ ) ; VAR_372 -> VAR_373 [ VAR_374 ] . VAR_375 = ( TYPE_79 ) METHOD_76 ( * VAR_376 ++ ) ; VAR_377 ++ ; } VAR_378 = ( unsigned TYPE_80 * ) METHOD_77 ( VAR_379 ) ; } if ( ( VAR_380 -> VAR_381 != VAR_382 ) && ( VAR_383 -> VAR_384 != 0 ) ) if ( VAR_385 -> VAR_386 >= ( VAR_387 -> VAR_388 + VAR_389 -> VAR_390 - 1 ) ) break ; VAR_391 = METHOD_78 ( VAR_392 , VAR_393 -> VAR_394 , VAR_395 -> VAR_396 , VAR_397 ) ; if ( VAR_398 == VAR_399 ) return ( METHOD_79 ( VAR_400 ) ) ; VAR_401 = ( ( ( VAR_402 -> VAR_403 * VAR_404 . VAR_405 ) + 31 ) & ~ 31 ) >> 3 ; ( TYPE_81 ) VAR_406 ; VAR_407 = ( ( ( ( VAR_408 -> VAR_409 * VAR_410 . VAR_411 ) + 31 ) & ~ 31 ) - ( VAR_412 -> VAR_413 * VAR_414 . VAR_415 ) ) >> 3 ; switch ( VAR_416 . VAR_417 ) { case 1 : { for ( VAR_418 = ( TYPE_82 ) VAR_419 -> VAR_420 - 1 ; VAR_421 >= 0 ; VAR_422 -- ) { VAR_423 = METHOD_80 ( VAR_424 , 0 , VAR_425 , VAR_426 -> VAR_427 , 1 , VAR_428 ) ; if ( VAR_429 == ( TYPE_83 * ) VAR_430 ) break ; for ( VAR_431 = 0 ; VAR_432 < ( TYPE_84 ) ( VAR_433 -> VAR_434 - 7 ) ; VAR_435 += 8 ) { TYPE_85 = ( TYPE_86 ) METHOD_81 ( VAR_436 ) ; for ( VAR_437 = 0 ; VAR_438 < 8 ; VAR_439 ++ ) { METHOD_82 ( VAR_440 , ( ( TYPE_87 & ( 0x80 >> VAR_441 ) ) != 0 ? 0x01 : 0x00 ) , VAR_442 ) ; VAR_443 += METHOD_83 ( VAR_444 ) ; } } if ( ( VAR_445 -> VAR_446 % 8 ) != 0 ) { TYPE_88 = ( TYPE_89 ) METHOD_84 ( VAR_447 ) ; for ( VAR_448 = 0 ; VAR_449 < ( VAR_450 -> VAR_451 % 8 ) ; VAR_452 ++ ) { METHOD_85 ( VAR_453 , ( ( TYPE_90 & ( 0x80 >> VAR_454 ) ) != 0 ? 0x01 : 0x00 ) , VAR_455 ) ; VAR_456 += METHOD_86 ( VAR_457 ) ; } } for ( VAR_458 = 0 ; VAR_459 < ( TYPE_91 ) VAR_460 ; VAR_461 ++ ) ( TYPE_92 ) METHOD_87 ( VAR_462 ) ; if ( METHOD_88 ( VAR_463 , VAR_464 ) == VAR_465 ) break ; if ( VAR_466 -> VAR_467 == ( TYPE_93 * ) VAR_468 ) { VAR_469 = METHOD_89 ( VAR_470 , VAR_471 , VAR_472 -> VAR_473 - VAR_474 - 1 , VAR_475 -> VAR_476 ) ; if ( VAR_477 == VAR_478 ) break ; } } break ; } case 4 : { for ( VAR_479 = ( TYPE_94 ) VAR_480 -> VAR_481 - 1 ; VAR_482 >= 0 ; VAR_483 -- ) { VAR_484 = METHOD_90 ( VAR_485 , 0 , VAR_486 , VAR_487 -> VAR_488 , 1 , VAR_489 ) ; if ( VAR_490 == ( TYPE_95 * ) VAR_491 ) break ; for ( VAR_492 = 0 ; VAR_493 < ( ( TYPE_96 ) VAR_494 -> VAR_495 - 1 ) ; VAR_496 += 2 ) { TYPE_97 = ( TYPE_98 ) METHOD_91 ( VAR_497 ) ; METHOD_92 ( VAR_498 , ( ( TYPE_99 >> 4 ) & 0xf ) , VAR_499 ) ; VAR_500 += METHOD_93 ( VAR_501 ) ; METHOD_94 ( VAR_502 , ( ( TYPE_100 ) & 0xf ) , VAR_503 ) ; VAR_504 += METHOD_95 ( VAR_505 ) ; } if ( ( VAR_506 -> VAR_507 % 2 ) != 0 ) { TYPE_101 = ( TYPE_102 ) METHOD_96 ( VAR_508 ) ; METHOD_97 ( VAR_509 , ( ( TYPE_103 >> 4 ) & 0xf ) , VAR_510 ) ; VAR_511 += METHOD_98 ( VAR_512 ) ; } for ( VAR_513 = 0 ; VAR_514 < ( TYPE_104 ) VAR_515 ; VAR_516 ++ ) ( TYPE_105 ) METHOD_99 ( VAR_517 ) ; if ( METHOD_100 ( VAR_518 , VAR_519 ) == VAR_520 ) break ; if ( VAR_521 -> VAR_522 == ( TYPE_106 * ) VAR_523 ) { VAR_524 = METHOD_101 ( VAR_525 , VAR_526 , VAR_527 -> VAR_528 - VAR_529 - 1 , VAR_530 -> VAR_531 ) ; if ( VAR_532 == VAR_533 ) break ; } } break ; } case 8 : { for ( VAR_534 = ( TYPE_107 ) VAR_535 -> VAR_536 - 1 ; VAR_537 >= 0 ; VAR_538 -- ) { VAR_539 = METHOD_102 ( VAR_540 , 0 , VAR_541 , VAR_542 -> VAR_543 , 1 , VAR_544 ) ; if ( VAR_545 == ( TYPE_108 * ) VAR_546 ) break ; for ( VAR_547 = 0 ; VAR_548 < ( TYPE_109 ) VAR_549 -> VAR_550 ; VAR_551 ++ ) { TYPE_110 = ( TYPE_111 ) METHOD_103 ( VAR_552 ) ; METHOD_104 ( VAR_553 , TYPE_112 , VAR_554 ) ; VAR_555 += METHOD_105 ( VAR_556 ) ; } for ( VAR_557 = 0 ; VAR_558 < ( TYPE_113 ) VAR_559 ; VAR_560 ++ ) ( TYPE_114 ) METHOD_106 ( VAR_561 ) ; if ( METHOD_107 ( VAR_562 , VAR_563 ) == VAR_564 ) break ; if ( VAR_565 -> VAR_566 == ( TYPE_115 * ) VAR_567 ) { VAR_568 = METHOD_108 ( VAR_569 , VAR_570 , VAR_571 -> VAR_572 - VAR_573 - 1 , VAR_574 -> VAR_575 ) ; if ( VAR_576 == VAR_577 ) break ; } } break ; } case 16 : { for ( VAR_578 = ( TYPE_116 ) VAR_579 -> VAR_580 - 1 ; VAR_581 >= 0 ; VAR_582 -- ) { VAR_583 = METHOD_109 ( VAR_584 , 0 , VAR_585 , VAR_586 -> VAR_587 , 1 , VAR_588 ) ; if ( VAR_589 == ( TYPE_117 * ) VAR_590 ) break ; for ( VAR_591 = 0 ; VAR_592 < ( TYPE_118 ) VAR_593 -> VAR_594 ; VAR_595 ++ ) { TYPE_119 = ( TYPE_120 ) METHOD_110 ( VAR_596 ) ; TYPE_121 |= ( TYPE_122 ) ( METHOD_111 ( VAR_597 ) << 8 ) ; METHOD_112 ( VAR_598 , TYPE_123 , VAR_599 ) ; VAR_600 += METHOD_113 ( VAR_601 ) ; } for ( VAR_602 = 0 ; VAR_603 < ( TYPE_124 ) VAR_604 ; VAR_605 ++ ) ( TYPE_125 ) METHOD_114 ( VAR_606 ) ; if ( METHOD_115 ( VAR_607 , VAR_608 ) == VAR_609 ) break ; if ( VAR_610 -> VAR_611 == ( TYPE_126 * ) VAR_612 ) { VAR_613 = METHOD_116 ( VAR_614 , VAR_615 , VAR_616 -> VAR_617 - VAR_618 - 1 , VAR_619 -> VAR_620 ) ; if ( VAR_621 == VAR_622 ) break ; } } break ; } case 24 : case 32 : { for ( VAR_623 = ( TYPE_127 ) VAR_624 -> VAR_625 - 1 ; VAR_626 >= 0 ; VAR_627 -- ) { VAR_628 = METHOD_117 ( VAR_629 , 0 , VAR_630 , VAR_631 -> VAR_632 , 1 , VAR_633 ) ; if ( VAR_634 == ( TYPE_128 * ) VAR_635 ) break ; for ( VAR_636 = 0 ; VAR_637 < ( TYPE_129 ) VAR_638 -> VAR_639 ; VAR_640 ++ ) { METHOD_118 ( VAR_641 , METHOD_119 ( ( unsigned TYPE_130 ) METHOD_120 ( VAR_642 ) ) , VAR_643 ) ; METHOD_121 ( VAR_644 , METHOD_122 ( ( unsigned TYPE_131 ) METHOD_123 ( VAR_645 ) ) , VAR_646 ) ; METHOD_124 ( VAR_647 , METHOD_125 ( ( unsigned TYPE_132 ) METHOD_126 ( VAR_648 ) ) , VAR_649 ) ; if ( VAR_650 . VAR_651 == 32 ) METHOD_127 ( VAR_652 , METHOD_128 ( ( unsigned TYPE_133 ) METHOD_129 ( VAR_653 ) ) , VAR_654 ) ; VAR_655 += METHOD_130 ( VAR_656 ) ; } if ( VAR_657 . VAR_658 == 24 ) for ( VAR_659 = 0 ; VAR_660 < ( TYPE_134 ) VAR_661 ; VAR_662 ++ ) ( TYPE_135 ) METHOD_131 ( VAR_663 ) ; if ( METHOD_132 ( VAR_664 , VAR_665 ) == VAR_666 ) break ; if ( VAR_667 -> VAR_668 == ( TYPE_136 * ) VAR_669 ) { VAR_670 = METHOD_133 ( VAR_671 , VAR_672 , VAR_673 -> VAR_674 - VAR_675 - 1 , VAR_676 -> VAR_677 ) ; if ( VAR_678 == VAR_679 ) break ; } } break ; } default : METHOD_134 ( VAR_680 , "ImproperImageHeader" ) ; } if ( VAR_681 -> VAR_682 == VAR_683 ) ( TYPE_137 ) METHOD_135 ( VAR_684 , VAR_685 ) ; if ( VAR_686 . VAR_687 != 32 ) { VAR_688 -> VAR_689 = VAR_690 ; for ( VAR_691 = ( TYPE_138 ) VAR_692 -> VAR_693 - 1 ; VAR_694 >= 0 ; VAR_695 -- ) { VAR_696 = METHOD_136 ( VAR_697 , 0 , VAR_698 , VAR_699 -> VAR_700 , 1 , VAR_701 ) ; if ( VAR_702 == ( TYPE_139 * ) VAR_703 ) break ; for ( VAR_704 = 0 ; VAR_705 < ( ( TYPE_140 ) VAR_706 -> VAR_707 - 7 ) ; VAR_708 += 8 ) { TYPE_141 = ( TYPE_142 ) METHOD_137 ( VAR_709 ) ; for ( VAR_710 = 0 ; VAR_711 < 8 ; VAR_712 ++ ) { METHOD_138 ( VAR_713 , ( ( ( TYPE_143 & ( 0x80 >> VAR_714 ) ) != 0 ) ? VAR_715 : VAR_716 ) , VAR_717 ) ; VAR_718 += METHOD_139 ( VAR_719 ) ; } } if ( ( VAR_720 -> VAR_721 % 8 ) != 0 ) { TYPE_144 = ( TYPE_145 ) METHOD_140 ( VAR_722 ) ; for ( VAR_723 = 0 ; VAR_724 < ( VAR_725 -> VAR_726 % 8 ) ; VAR_727 ++ ) { METHOD_141 ( VAR_728 , ( ( ( TYPE_146 & ( 0x80 >> VAR_729 ) ) != 0 ) ? VAR_730 : VAR_731 ) , VAR_732 ) ; VAR_733 += METHOD_142 ( VAR_734 ) ; } } if ( ( VAR_735 -> VAR_736 % 32 ) != 0 ) for ( VAR_737 = 0 ; VAR_738 < ( TYPE_147 ) ( ( 32 - ( VAR_739 -> VAR_740 % 32 ) ) / 8 ) ; VAR_741 ++ ) ( TYPE_148 ) METHOD_143 ( VAR_742 ) ; if ( METHOD_144 ( VAR_743 , VAR_744 ) == VAR_745 ) break ; } } if ( METHOD_145 ( VAR_746 ) != VAR_747 ) { METHOD_146 ( VAR_748 , VAR_749 , "UnexpectedEndOfFile" , VAR_750 -> VAR_751 ) ; break ; } } if ( VAR_752 -> VAR_753 != 0 ) if ( VAR_754 -> VAR_755 >= ( VAR_756 -> VAR_757 + VAR_758 -> VAR_759 - 1 ) ) break ; if ( VAR_760 < ( TYPE_149 ) ( VAR_761 . VAR_762 - 1 ) ) { METHOD_147 ( VAR_763 , VAR_764 , VAR_765 ) ; if ( METHOD_148 ( VAR_766 ) == ( TYPE_150 * ) VAR_767 ) { VAR_768 = METHOD_149 ( VAR_769 ) ; return ( ( TYPE_151 * ) VAR_770 ) ; } VAR_771 = METHOD_150 ( VAR_772 ) ; VAR_773 = METHOD_151 ( VAR_774 , VAR_775 , METHOD_152 ( VAR_776 ) , METHOD_153 ( VAR_777 ) ) ; if ( VAR_778 == VAR_779 ) break ; } } ( TYPE_152 ) METHOD_154 ( VAR_780 ) ; return ( METHOD_155 ( VAR_781 ) ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 ) { METHOD_1 ( "/carbonson" ) ; METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( "<iqid=\'*\'type=\'set\'><enablexmlns=\'urn:xmpp:carbons:2\'/></iq>" ) ) ; METHOD_5 ( "<presenceto=\'stabber@localhost\'from=\'buddy1@localhost/mobile\'>" "<priority>10</priority>" "<status>Onmymobile</status>" "</presence>" ) ; METHOD_6 ( METHOD_7 ( "Buddy1(mobile)isonline,\\"Onmymobile\\"" ) ) ; METHOD_8 ( "/msgBuddy1" ) ; METHOD_9 ( METHOD_10 ( "unencrypted" ) ) ; METHOD_11 (  "<messagetype=\'chat\'to=\'stabber@localhost/profanity\'from=\'buddy1@localhost\'>"  "<receivedxmlns=\'urn:xmpp:carbons:2\'>" "<forwardedxmlns=\'urn:xmpp:forward:0\'>" "<messageid=\'prof_msg_7\'xmlns=\'jabber:client\'type=\'chat\'lang=\'en\'to=\'stabber@localhost/profanity\'from=\'buddy1@localhost/mobile\'>" "<body>testcarbonfromrecipient</body>" "</message>" "</forwarded>" "</received>" "</message>" ) ; METHOD_12 ( METHOD_13 ( "Buddy1/mobile:.+testcarbonfromrecipient" ) ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( VAR_4 -> VAR_5 , VAR_6 ) ; if ( VAR_7 -> VAR_8 . VAR_9 ) { * VAR_10 = VAR_11 -> VAR_12 ; METHOD_3 ( VAR_13 -> VAR_14 , VAR_15 , VAR_16 ) ; } if ( VAR_17 -> VAR_18 ) { VAR_19 -> VAR_20 = METHOD_4 ( VAR_21 -> VAR_22 , VAR_23 ) ;  METHOD_5 ( VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 ) ;  METHOD_6 ( VAR_30 -> VAR_31 , VAR_32 , VAR_33 ) ; } METHOD_7 ( VAR_34 -> VAR_35 , VAR_36 , VAR_37 ) ; }
static struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 ) { struct STRUCT_OR_UNION_1 * TYPE_1 = ( struct STRUCT_OR_UNION_2 * ) METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_3 ) ) ; if ( TYPE_2 == VAR_0 ) return VAR_1 ; TYPE_3 -> VAR_2 = TYPE_4 -> VAR_3 = TYPE_5 -> VAR_4 = TYPE_6 -> VAR_5 = TYPE_7 -> VAR_6 = VAR_7 ; TYPE_8 -> VAR_8 = VAR_9 ; TYPE_9 -> VAR_10 = VAR_11 ; TYPE_10 -> VAR_12 = VAR_13 ; TYPE_11 -> VAR_14 = VAR_15 ; TYPE_12 -> VAR_16 = 0 ; TYPE_13 -> VAR_17 [ 0 ] = 0 ; TYPE_14 -> VAR_18 = 1 ; TYPE_15 -> VAR_19 = 0 ; TYPE_16 -> VAR_20 = TYPE_17 -> VAR_21 = VAR_22 ; TYPE_18 -> VAR_23 = 0 ;  TYPE_19 -> VAR_24 = 0 ;  TYPE_20 -> VAR_25 = 1 ; TYPE_21 -> VAR_26 = 1 ; TYPE_22 -> VAR_27 = 1 ; TYPE_23 -> VAR_28 [ 0 ] = 0 ; TYPE_24 -> VAR_29 = VAR_30 ; TYPE_25 -> VAR_31 = 0 ; TYPE_26 -> VAR_32 = 0 ; TYPE_27 -> VAR_33 = VAR_34 ; TYPE_28 -> VAR_35 = VAR_36 ; TYPE_29 -> VAR_37 = 0 ; TYPE_30 TYPE_31 TYPE_32 -> VAR_38 = VAR_39 ; TYPE_33 -> VAR_40 = VAR_41 ; TYPE_34 -> VAR_42 = VAR_43 ; TYPE_35 -> VAR_44 = 0 ; TYPE_36 -> VAR_45 = 0 ; TYPE_37 -> VAR_46 = 0 ;  return TYPE_38 ;  }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( ( TYPE_4 * ) VAR_3 , VAR_4 ) ; if ( VAR_5 -> VAR_6 ) METHOD_2 ( ( TYPE_5 * ) VAR_7 -> VAR_8 ) ; VAR_9 -> VAR_10 = METHOD_3 ( 2 ) ; VAR_11 -> VAR_12 -> VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 -> VAR_18 -> VAR_19 = VAR_20 ; if ( VAR_21 ) { VAR_22 -> VAR_23 -> VAR_24 -> VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 -> VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 -> VAR_36 -> VAR_37 = VAR_38 -> VAR_39 ; }  if ( VAR_40 -> VAR_41 ) {  TYPE_6 * VAR_42 = METHOD_4 ( VAR_43 -> VAR_44 -> VAR_45 ) ; if ( VAR_46 ) { METHOD_5 ( VAR_47 , & VAR_48 -> VAR_49 -> VAR_50 -> VAR_51 -> VAR_52 , & VAR_53 -> VAR_54 -> VAR_55 -> VAR_56 -> VAR_57 ) ; METHOD_6 ( VAR_58 ) ; } } }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = METHOD_1 ( VAR_3 , VAR_4 , VAR_5 ) ; if ( VAR_6 ) { return VAR_7 ; } if ( ! ( ( TYPE_4 * ) VAR_8 ) -> VAR_9 ) {  METHOD_2 ( VAR_10 , VAR_11 , ( "[isofile]Missingdrefboxindinf\\n" ) ) ;   ( ( TYPE_5 * ) VAR_12 ) -> VAR_13 = ( TYPE_6 * ) METHOD_3 ( VAR_14 ) ;  } return VAR_15 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; unsigned TYPE_3 VAR_4 [ 128 ] ; TYPE_4 VAR_5 , VAR_6 ; TYPE_5 VAR_7 = 0 , VAR_8 = 0 ; TYPE_6 VAR_9 ; METHOD_1 ( & VAR_10 -> VAR_11 -> VAR_12 , "ID-kaart" ) ; METHOD_2 ( & VAR_13 -> VAR_14 -> VAR_15 , "ASSertifitseerimiskeskus" ) ; METHOD_3 ( "3f00eeee5044" , & VAR_16 ) ; VAR_17 = METHOD_4 ( VAR_18 , & VAR_19 , VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 , VAR_23 , VAR_24 , "selectesteidPDfailed" ) ; VAR_25 = METHOD_6 ( VAR_26 , VAR_27 , VAR_28 , sizeof ( VAR_29 ) , VAR_30 ) ; METHOD_7 ( VAR_31 -> VAR_32 , VAR_33 , VAR_34 , "readdocumentnumberfailed" ) ;  VAR_35 [ VAR_36 ] = '\\0' ;  METHOD_8 ( & VAR_37 -> VAR_38 -> VAR_39 , ( const TYPE_7 * ) VAR_40 ) ; VAR_41 -> VAR_42 -> VAR_43 = VAR_44 | VAR_45 | VAR_46 ; for ( VAR_47 = 0 ; VAR_48 < 2 ; VAR_49 ++ ) { static const TYPE_8 * VAR_50 [ 2 ] = { "Isikutuvastus" , "Allkirjastamine" } ; static TYPE_9 const * VAR_51 [ 2 ] = { "3f00eeeeaace" , "3f00eeeeddce" } ; static TYPE_10 VAR_52 [ 2 ] = { 1 , 2 } ; struct STRUCT_OR_UNION_0 VAR_53 ; struct STRUCT_OR_UNION_1 VAR_54 ; METHOD_9 ( & VAR_55 , 0 , sizeof ( VAR_56 ) ) ; METHOD_10 ( & VAR_57 , 0 , sizeof ( VAR_58 ) ) ; VAR_59 . VAR_60 . VAR_61 [ 0 ] = VAR_62 [ VAR_63 ] ; VAR_64 . VAR_65 . VAR_66 = 1 ; METHOD_11 ( VAR_67 [ VAR_68 ] , & VAR_69 . VAR_70 ) ; METHOD_12 ( VAR_71 . VAR_72 , VAR_73 [ VAR_74 ] , sizeof ( VAR_75 . VAR_76 ) ) ; VAR_77 = METHOD_13 ( VAR_78 , & VAR_79 , & VAR_80 ) ; if ( VAR_81 < 0 ) return VAR_82 ; if ( VAR_83 == 0 ) { TYPE_11 * VAR_84 = VAR_85 ; VAR_86 = METHOD_14 ( VAR_87 , & VAR_88 , & VAR_89 ) ; if ( VAR_90 < 0 ) return VAR_91 ; if ( VAR_92 -> VAR_93 -> VAR_94 == VAR_95 ) VAR_96 = VAR_97 -> VAR_98 -> VAR_99 . VAR_100 . VAR_101 . VAR_102 ; else VAR_103 = VAR_104 -> VAR_105 -> VAR_106 . VAR_107 . VAR_108 . VAR_109 * 8 ; if ( VAR_110 == VAR_111 ) { static const struct STRUCT_OR_UNION_2 VAR_112 = { { 2 , 5 , 4 , 3 , - 1 } } ; TYPE_12 * VAR_113 = VAR_114 ; TYPE_13 VAR_115 = 0 ; METHOD_15 ( VAR_116 -> VAR_117 , VAR_118 -> VAR_119 , VAR_120 -> VAR_121 , & VAR_122 , & VAR_123 , & VAR_124 ) ; if ( VAR_125 > 0 ) { TYPE_14 * VAR_126 = METHOD_16 ( VAR_127 + 1 ) ; if ( VAR_128 ) { METHOD_17 ( VAR_129 , VAR_130 , VAR_131 ) ; VAR_132 [ VAR_133 ] = '\\0' ; METHOD_18 ( & VAR_134 -> VAR_135 -> VAR_136 , ( const TYPE_15 * ) VAR_137 ) ; METHOD_19 ( VAR_138 ) ; } } METHOD_20 ( VAR_139 ) ; METHOD_21 ( VAR_140 ) ; } } } METHOD_22 ( "3f000016" , & VAR_141 ) ; VAR_142 = METHOD_23 ( VAR_143 , & VAR_144 , VAR_145 ) ; if ( VAR_146 < 0 ) return VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < 3 ; VAR_150 ++ ) { unsigned TYPE_16 VAR_151 ; static const TYPE_17 * VAR_152 [ 3 ] = { "PIN1" , "PIN2" , "PUK" } ; static const TYPE_18 VAR_153 [ 3 ] = { 4 , 5 , 8 } ; static const TYPE_19 VAR_154 [ 3 ] = { 1 , 2 , 0 } ; static const TYPE_20 VAR_155 [ 3 ] = { 1 , 2 , 3 } ; static const TYPE_21 VAR_156 [ 3 ] = { 0 , 0 , VAR_157 } ; struct STRUCT_OR_UNION_3 VAR_158 ; struct STRUCT_OR_UNION_4 VAR_159 ; METHOD_24 ( & VAR_160 , 0 , sizeof ( VAR_161 ) ) ; METHOD_25 ( & VAR_162 , 0 , sizeof ( VAR_163 ) ) ; VAR_164 = METHOD_26 ( VAR_165 , VAR_166 + 1 , VAR_167 , sizeof ( VAR_168 ) , VAR_169 ) ; if ( VAR_170 < 0 ) return VAR_171 ; VAR_172 = VAR_173 [ 5 ] ; VAR_174 . VAR_175 . VAR_176 = 1 ; VAR_177 . VAR_178 . VAR_179 [ 0 ] = VAR_180 [ VAR_181 ] ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 . VAR_187 . VAR_188 = VAR_189 [ VAR_190 ] ; VAR_191 . VAR_192 . VAR_193 . VAR_194 = VAR_195 [ VAR_196 ] ; VAR_197 . VAR_198 . VAR_199 . VAR_200 = VAR_201 ; VAR_202 . VAR_203 . VAR_204 . VAR_205 = VAR_206 [ VAR_207 ] ; VAR_208 . VAR_209 . VAR_210 . VAR_211 = 12 ; VAR_212 . VAR_213 . VAR_214 . VAR_215 = 12 ; VAR_216 . VAR_217 . VAR_218 . VAR_219 = '\\0' ; VAR_220 . VAR_221 = ( TYPE_22 ) VAR_222 ; VAR_223 . VAR_224 = 3 ; METHOD_27 ( VAR_225 . VAR_226 , VAR_227 [ VAR_228 ] , sizeof ( VAR_229 . VAR_230 ) ) ; VAR_231 . VAR_232 = VAR_233 [ VAR_234 ] ; if ( VAR_235 < 2 ) { VAR_236 . VAR_237 . VAR_238 = 1 ; VAR_239 . VAR_240 . VAR_241 [ 0 ] = 3 ; } VAR_242 = METHOD_28 ( VAR_243 , & VAR_244 , & VAR_245 ) ; if ( VAR_246 < 0 ) return VAR_247 ; } for ( VAR_248 = 0 ; VAR_249 < 2 ; VAR_250 ++ ) { static TYPE_23 VAR_251 [ 2 ] = { 1 , 2 } ; static const TYPE_24 * VAR_252 [ 2 ] = { "Isikutuvastus" , "Allkirjastamine" } ; struct STRUCT_OR_UNION_5 VAR_253 ; struct STRUCT_OR_UNION_6 VAR_254 ; METHOD_29 ( & VAR_255 , 0 , sizeof ( VAR_256 ) ) ; METHOD_30 ( & VAR_257 , 0 , sizeof ( VAR_258 ) ) ; VAR_259 . VAR_260 . VAR_261 = 1 ; VAR_262 . VAR_263 . VAR_264 [ 0 ] = VAR_265 [ VAR_266 ] ; VAR_267 . VAR_268 = 1 ; VAR_269 . VAR_270 = VAR_271 + 1 ; VAR_272 . VAR_273 = VAR_274 ; VAR_275 . VAR_276 = VAR_277 ; if ( VAR_278 == 1 ) VAR_279 . VAR_280 = VAR_281 ; else if ( VAR_282 > 0 ) VAR_283 . VAR_284 = VAR_285 | VAR_286 ; else VAR_287 . VAR_288 = VAR_289 | VAR_290 | VAR_291 ; METHOD_31 ( VAR_292 . VAR_293 , VAR_294 [ VAR_295 ] , sizeof ( VAR_296 . VAR_297 ) ) ; VAR_298 . VAR_299 . VAR_300 = 1 ; VAR_301 . VAR_302 . VAR_303 [ 0 ] = VAR_304 [ VAR_305 ] ; VAR_306 . VAR_307 = 0 ; VAR_308 . VAR_309 = VAR_310 ; if ( VAR_311 > 0 ) VAR_312 = METHOD_32 ( VAR_313 , & VAR_314 , & VAR_315 ) ; else VAR_316 = METHOD_33 ( VAR_317 , & VAR_318 , & VAR_319 ) ; if ( VAR_320 < 0 ) return VAR_321 ; } return VAR_322 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; METHOD_1 ( VAR_7 ) ; METHOD_2 ( VAR_8 <= VAR_9 ) ; METHOD_3 ( VAR_10 <= VAR_11 ) ; METHOD_4 ( VAR_12 ) ;  METHOD_5 ( VAR_13 ) ;  VAR_14 -> VAR_15 = VAR_16 ; VAR_17 -> VAR_18 = METHOD_6 ( VAR_19 , 1 ) ; if ( VAR_20 ) VAR_21 -> VAR_22 = VAR_23 -> VAR_24 ; else VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = 0 ; VAR_36 -> VAR_37 = 0 ; VAR_38 -> VAR_39 = 0 ; METHOD_7 ( VAR_40 -> VAR_41 , VAR_42 + 1 , TYPE_8 ) ; if ( VAR_43 -> VAR_44 == VAR_45 ) return ( VAR_46 ) ; METHOD_8 ( VAR_47 -> VAR_48 , 0 , ( VAR_49 + 1 ) * sizeof ( TYPE_9 ) ) ; for ( VAR_50 = 0 ; VAR_51 < VAR_52 -> VAR_53 + 1 ; VAR_54 ++ ) { METHOD_9 ( VAR_55 -> VAR_56 [ VAR_57 ] . VAR_58 , ( VAR_59 * 384 + 32 + 15 ) , VAR_60 ) ; if ( VAR_61 -> VAR_62 [ VAR_63 ] . VAR_64 == VAR_65 ) return ( VAR_66 ) ; VAR_67 -> VAR_68 [ VAR_69 ] . VAR_70 = METHOD_10 ( VAR_71 -> VAR_72 [ VAR_73 ] . VAR_74 , 16 ) ; } METHOD_11 ( VAR_75 -> VAR_76 , VAR_77 + 1 , TYPE_10 * ) ; METHOD_12 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 + 1 , VAR_82 ) ; if ( VAR_83 -> VAR_84 == VAR_85 || VAR_86 -> VAR_87 == VAR_88 ) return ( VAR_89 ) ; METHOD_13 ( VAR_90 -> VAR_91 , 0 , ( ( VAR_92 + 1 ) * sizeof ( TYPE_11 * ) ) ) ; VAR_93 -> VAR_94 = VAR_95 -> VAR_96 = 0 ; return ( VAR_97 ) ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 = - 1 ; TYPE_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_5 VAR_6 = 0 ;  VAR_7 = 0 ;   if ( ! VAR_8 )  METHOD_2 ( VAR_9 ) ;  if ( VAR_10 )   VAR_11 = * VAR_12 ;  if ( METHOD_3 ( & VAR_13 , VAR_14 -> VAR_15 , ( struct STRUCT_OR_UNION_1 * ) VAR_16 , VAR_17 ,  VAR_18 ) != VAR_19 )  { METHOD_4 ( VAR_20 ) ; }  VAR_21 :  return VAR_22 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; if ( ! METHOD_1 ( VAR_5 , & VAR_6 ) ) return VAR_7 ; if ( ! METHOD_2 ( VAR_8 , & VAR_9 , VAR_10 ) ) return VAR_11 ; if ( VAR_12 != METHOD_3 ( VAR_13 ) + 6 ) { METHOD_4 ( VAR_14 , "IncorrectTPDUlengthindicator." ) ; return VAR_15 ; } if ( ! METHOD_5 ( VAR_16 , VAR_17 ) ) { METHOD_6 ( VAR_18 , "Failedtoparseroutingtokenorcookie." ) ; return VAR_19 ; } if ( METHOD_7 ( VAR_20 ) >= 8 ) { METHOD_8 ( VAR_21 , VAR_22 ) ; if ( VAR_23 != VAR_24 ) { METHOD_9 ( VAR_25 , "Incorrectnegotiationrequesttype%" PRIu8 "" , VAR_26 ) ; return VAR_27 ; }  METHOD_10 ( VAR_28 , VAR_29 ) ;  } return METHOD_11 ( VAR_30 , VAR_31 ) ; }
TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  METHOD_1 ( VAR_1 , 0x40 | VAR_2 ) ;   METHOD_2 ( VAR_3 , VAR_4 | VAR_5 ) ;   while ( ( METHOD_3 ( VAR_6 ) & VAR_7 ) != 0 )  { }  METHOD_4 ( VAR_8 , VAR_9 ) ;  METHOD_5 ( 5 ) ;  return ( METHOD_6 ( VAR_10 ) << 8 ) | METHOD_7 ( VAR_11 ) ;  }
TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; if ( VAR_4 & VAR_5 ) { TYPE_2 VAR_6 = METHOD_1 ( STRUCT_OR_UNION_3 , VAR_7 -> VAR_8 ) ; if ( VAR_9 ) return VAR_10 ; } if ( VAR_11 & VAR_12 ) return 0 ; if ( ( VAR_13 & VAR_14 ) && ( ! METHOD_2 ( METHOD_3 ( ) , STRUCT_OR_UNION_4 -> VAR_15 ) || ! METHOD_4 ( VAR_16 -> VAR_17 , STRUCT_OR_UNION_5 -> VAR_18 ) ) &&  ! METHOD_5 ( STRUCT_OR_UNION_6 , VAR_19 ) )  return - VAR_20 ; if ( ( VAR_21 & VAR_22 ) && ( ! METHOD_6 ( METHOD_7 ( ) , STRUCT_OR_UNION_7 -> VAR_23 ) || ( ! METHOD_8 ( VAR_24 -> VAR_25 ) && ! METHOD_9 ( VAR_26 -> VAR_27 , STRUCT_OR_UNION_8 -> VAR_28 ) ) ) &&  ! METHOD_10 ( STRUCT_OR_UNION_9 , VAR_29 ) )  return - VAR_30 ; if ( VAR_31 & VAR_32 ) { if ( ! METHOD_11 ( STRUCT_OR_UNION_10 ) ) return - VAR_33 ; if ( ! METHOD_12 ( ( VAR_34 & VAR_35 ) ? VAR_36 -> VAR_37 : STRUCT_OR_UNION_11 -> VAR_38 ) &&  ! METHOD_13 ( STRUCT_OR_UNION_12 , VAR_39 ) )  VAR_40 -> VAR_41 &= ~ VAR_42 ; } if ( VAR_43 & ( VAR_44 | VAR_45 | VAR_46 ) ) { if ( ! METHOD_14 ( STRUCT_OR_UNION_13 ) ) return - VAR_47 ; } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; const TYPE_8 * VAR_7 ; TYPE_9 * VAR_8 = VAR_9 ; TYPE_10 * VAR_10 = VAR_11 ; TYPE_11 * VAR_12 = VAR_13 ; TYPE_12 * VAR_14 = VAR_15 ; TYPE_13 VAR_16 ; TYPE_14 VAR_17 ; TYPE_15 VAR_18 ; TYPE_16 VAR_19 ;  TYPE_17 VAR_20 ;  VAR_21 = METHOD_1 ( VAR_22 -> VAR_23 , 8 ) ; VAR_24 = ( VAR_25 -> VAR_26 ? VAR_27 : VAR_28 -> VAR_29 ) ; VAR_30 = VAR_31 -> VAR_32 ;  for ( VAR_33 = 0 ; VAR_34 < VAR_35 -> VAR_36 ; VAR_37 ++ )  { VAR_38 = VAR_39 + ( VAR_40 -> VAR_41 - 1 - VAR_42 ) * VAR_43 ; VAR_44 = VAR_45 -> VAR_46 -> VAR_47 [ 0 ] + VAR_48 * VAR_49 ; VAR_50 = VAR_51 -> VAR_52 -> VAR_53 [ 1 ] + VAR_54 * VAR_55 ; VAR_56 = VAR_57 -> VAR_58 -> VAR_59 [ 2 ] + VAR_60 * VAR_61 ; VAR_62 = VAR_63 -> VAR_64 -> VAR_65 [ 3 ] + VAR_66 * VAR_67 -> VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 -> VAR_72 ; VAR_73 ++ ) { switch ( VAR_74 -> VAR_75 ) { case VAR_76 : VAR_77 = * VAR_78 ++ ; VAR_79 = * VAR_80 ++ ; VAR_81 = * VAR_82 ++ ; VAR_83 ++ ; VAR_84 = 0xFF ; break ; case VAR_85 : VAR_86 = * VAR_87 ++ ; VAR_88 = * VAR_89 ++ ; VAR_90 = * VAR_91 ++ ; VAR_92 = * VAR_93 ++ ; break ; case VAR_94 : VAR_95 = * VAR_96 ++ ; VAR_97 = * VAR_98 ++ ; VAR_99 = * VAR_100 ++ ; VAR_101 ++ ; VAR_102 = 0xFF ; break ; case VAR_103 : VAR_104 = * VAR_105 ++ ; VAR_106 = * VAR_107 ++ ; VAR_108 = * VAR_109 ++ ; VAR_110 = * VAR_111 ++ ; break ; case VAR_112 : VAR_113 = * VAR_114 ++ ; VAR_115 = * VAR_116 ++ ; VAR_117 = * VAR_118 ++ ; VAR_119 = 0xFF ; break ; case VAR_120 : VAR_121 = * VAR_122 ++ ; VAR_123 = * VAR_124 ++ ; VAR_125 = * VAR_126 ++ ; VAR_127 = 0xFF ; break ; case VAR_128 : VAR_129 = ( TYPE_18 ) ( ( ( * ( VAR_130 + 1 ) ) & 0xF8 ) | ( ( * ( VAR_131 + 1 ) ) >> 5 ) ) ; VAR_132 = ( TYPE_19 ) ( ( ( ( * ( VAR_133 + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * VAR_134 ) & 0xE0 ) >> 3 ) ) ; VAR_135 = ( TYPE_20 ) ( ( ( ( * VAR_136 ) & 0x1F ) << 3 ) | ( ( ( * VAR_137 ) >> 2 ) & 0x07 ) ) ; VAR_138 = 0xFF ; VAR_139 += 2 ; break ; case VAR_140 : VAR_141 = ( TYPE_21 ) ( ( ( * ( VAR_142 + 1 ) ) & 0xF8 ) | ( ( * ( VAR_143 + 1 ) ) >> 5 ) ) ; VAR_144 = ( TYPE_22 ) ( ( ( ( * ( VAR_145 + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * VAR_146 ) & 0xE0 ) >> 3 ) ) ; VAR_147 = ( TYPE_23 ) ( ( ( ( * VAR_148 ) & 0x1F ) << 3 ) | ( ( ( * VAR_149 ) >> 2 ) & 0x07 ) ) ; VAR_150 = 0xFF ; VAR_151 += 2 ; break ; case VAR_152 : { TYPE_24 VAR_153 ; TYPE_25 VAR_154 ; VAR_155 = ( 7 - ( VAR_156 % 8 ) ) ; VAR_157 = ( ( * VAR_158 ) >> VAR_159 ) & 1 ; VAR_160 |= ( ( ( * ( VAR_161 + 1 ) ) >> VAR_162 ) & 1 ) << 1 ; VAR_163 |= ( ( ( * ( VAR_164 + 2 ) ) >> VAR_165 ) & 1 ) << 2 ; VAR_166 |= ( ( ( * ( VAR_167 + 3 ) ) >> VAR_168 ) & 1 ) << 3 ; VAR_169 *= 3 ; VAR_170 = ( TYPE_26 ) VAR_171 -> VAR_172 [ VAR_173 ] ; VAR_174 = ( TYPE_27 ) VAR_175 -> VAR_176 [ VAR_177 + 1 ] ; VAR_178 = ( TYPE_28 ) VAR_179 -> VAR_180 [ VAR_181 + 2 ] ; if ( VAR_182 == 0 ) VAR_183 += 4 ; } VAR_184 = 0xFF ; break ; case VAR_185 : { TYPE_29 VAR_186 = ( * VAR_187 ) * 3 ; VAR_188 = ( TYPE_30 ) VAR_189 -> VAR_190 [ VAR_191 ] ; VAR_192 = ( TYPE_31 ) VAR_193 -> VAR_194 [ VAR_195 + 1 ] ; VAR_196 = ( TYPE_32 ) VAR_197 -> VAR_198 [ VAR_199 + 2 ] ; VAR_200 ++ ; } VAR_201 = 0xFF ; break ; default : VAR_202 = VAR_203 = VAR_204 = VAR_205 = 0 ; break ; } * VAR_206 ++ = ( TYPE_33 ) ( ( VAR_207 >> 2 ) + ( VAR_208 >> 1 ) + ( VAR_209 >> 2 ) ) ; * VAR_210 ++ = ( TYPE_34 ) ( ( VAR_211 - VAR_212 ) >> VAR_213 ) ; * VAR_214 ++ = ( TYPE_35 ) ( ( - ( VAR_215 >> 1 ) + VAR_216 - ( VAR_217 >> 1 ) ) >> VAR_218 ) ; * VAR_219 ++ = VAR_220 ; } if ( VAR_221 -> VAR_222 && ( VAR_223 % 2 ) == 1 ) { * VAR_224 = * ( VAR_225 - 1 ) ; * VAR_226 = * ( VAR_227 - 1 ) ; * VAR_228 = * ( VAR_229 - 1 ) ; } } if ( VAR_230 -> VAR_231 && ( VAR_232 % 2 ) == 1 ) { VAR_233 = VAR_234 -> VAR_235 -> VAR_236 [ 0 ] + VAR_237 * VAR_238 ; VAR_239 = VAR_240 -> VAR_241 -> VAR_242 [ 1 ] + VAR_243 * VAR_244 ; VAR_245 = VAR_246 -> VAR_247 -> VAR_248 [ 2 ] + VAR_249 * VAR_250 ; METHOD_2 ( VAR_251 , VAR_252 - VAR_253 , VAR_254 ) ; METHOD_3 ( VAR_255 , VAR_256 - VAR_257 , VAR_258 ) ; METHOD_4 ( VAR_259 , VAR_260 - VAR_261 , VAR_262 ) ; }  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )  { struct STRUCT_OR_UNION_2 * VAR_0 = STRUCT_OR_UNION_3 -> VAR_1 ; struct STRUCT_OR_UNION_4 * VAR_2 = METHOD_1 ( VAR_3 ) ; unsigned TYPE_1 VAR_4 = METHOD_2 ( STRUCT_OR_UNION_5 ) ; unsigned TYPE_2 VAR_5 ; TYPE_3 VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 ; struct STRUCT_OR_UNION_8 * VAR_12 = VAR_13 ; unsigned TYPE_4 VAR_14 ; unsigned TYPE_5 VAR_15 ; struct STRUCT_OR_UNION_9 * VAR_16 = METHOD_3 ( STRUCT_OR_UNION_10 ) ; TYPE_6 VAR_17 = - VAR_18 ; VAR_19 = VAR_20 -> VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_11 -> VAR_23 , VAR_24 ) ; if ( ! VAR_25 ) goto VAR_26 ; VAR_27 = VAR_28 -> VAR_29 ; VAR_30 = ( struct STRUCT_OR_UNION_12 * ) ( VAR_31 -> VAR_32 + VAR_33 ) ; VAR_34 = * ( unsigned TYPE_7 * ) VAR_35 ; if ( VAR_36 + VAR_37 > VAR_38 ) { TYPE_8 VAR_39 = VAR_40 - VAR_41 ; VAR_42 = METHOD_5 ( VAR_43 , VAR_44 ) ; if ( VAR_45 == VAR_46 ) { printk ( KERN_INFO "%s:outofmemory\\n" , VAR_47 ) ; VAR_48 = - VAR_49 ; goto VAR_50 ; } METHOD_6 ( VAR_51 , VAR_52 -> VAR_53 + VAR_54 , VAR_55 ) ; METHOD_7 ( VAR_56 ) ; VAR_57 = METHOD_8 ( STRUCT_OR_UNION_13 -> VAR_58 , ++ VAR_59 ) ; if ( ! VAR_60 ) goto VAR_61 ; METHOD_9 ( ( TYPE_9 * ) VAR_62 + VAR_63 , VAR_64 -> VAR_65 , VAR_66 - VAR_67 ) ; VAR_68 = VAR_69 ; } STRUCT_OR_UNION_14 -> VAR_70 = METHOD_10 ( VAR_71 -> VAR_72 , VAR_73 -> VAR_74 , METHOD_11 ( STRUCT_OR_UNION_15 ) ) ; VAR_75 -> VAR_76 = VAR_77 ; if ( VAR_78 -> VAR_79 [ - VAR_80 ] & 2 ) { if ( VAR_81 -> VAR_82 != VAR_83 ) STRUCT_OR_UNION_16 -> VAR_84 = VAR_85 | VAR_86 -> VAR_87 ; else STRUCT_OR_UNION_17 -> VAR_88 = VAR_89 | VAR_90 | VAR_91 ; METHOD_12 ( STRUCT_OR_UNION_18 , 1 ) ; } else { if ( VAR_92 -> VAR_93 != VAR_94 ) { STRUCT_OR_UNION_19 -> VAR_95 = VAR_96 | VAR_97 -> VAR_98 ; } else { STRUCT_OR_UNION_20 -> VAR_99 = VAR_100 | VAR_101 | VAR_102 ; } METHOD_13 ( STRUCT_OR_UNION_21 , 1 ) ; } STRUCT_OR_UNION_22 -> VAR_103 = VAR_104 -> VAR_105 ; STRUCT_OR_UNION_23 -> VAR_106 = VAR_107 -> VAR_108 ; STRUCT_OR_UNION_24 -> VAR_109 = 0 ; VAR_110 -> VAR_111 [ 0 ] = 0 ; VAR_112 -> VAR_113 [ 1 ] = 0 ; VAR_114 -> VAR_115 [ 2 ] = 0 ; VAR_116 -> VAR_117 = METHOD_14 ( VAR_118 -> VAR_119 ) ; if ( VAR_120 -> VAR_121 [ - VAR_122 ] & 0x80 ) { VAR_123 = METHOD_15 ( STRUCT_OR_UNION_25 ) ; if ( VAR_124 < 0 ) goto VAR_125 ; VAR_126 = - VAR_127 ; } else { VAR_128 -> VAR_129 = 0 ; VAR_130 -> VAR_131 = 0 ; STRUCT_OR_UNION_26 -> VAR_132 = METHOD_16 ( VAR_133 -> VAR_134 ) ; } if ( VAR_135 -> VAR_136 ) STRUCT_OR_UNION_27 -> VAR_137 &= 0x00ffffff ; if ( VAR_138 -> VAR_139 [ 0 ] ) { printk ( KERN_DEBUG "ISOFS:Interleavedfilesnot(yet)supported.\\n" ) ; STRUCT_OR_UNION_28 -> VAR_140 = 0 ; } if ( VAR_141 -> VAR_142 [ 0 ] != 0 ) { printk ( KERN_DEBUG "ISOFS:Fileunitsize!=0forISOfile(%ld).\\n" , STRUCT_OR_UNION_29 -> VAR_143 ) ; } TYPE_10 TYPE_11 if ( ( VAR_144 -> VAR_145 [ - VAR_146 ] & ~ 2 ) != 0 ) { printk ( KERN_DEBUG "ISOFS:UnusualflagsettingsforISOfile" "(%ld%x).\\n" , STRUCT_OR_UNION_30 -> VAR_147 , VAR_148 -> VAR_149 [ - VAR_150 ] ) ; } STRUCT_OR_UNION_31 -> VAR_151 . VAR_152 = STRUCT_OR_UNION_32 -> VAR_153 . VAR_154 = STRUCT_OR_UNION_33 -> VAR_155 . VAR_156 = METHOD_17 ( VAR_157 -> VAR_158 , VAR_159 ) ; STRUCT_OR_UNION_34 -> VAR_160 . VAR_161 = STRUCT_OR_UNION_35 -> VAR_162 . VAR_163 = STRUCT_OR_UNION_36 -> VAR_164 . VAR_165 = 0 ; VAR_166 -> VAR_167 = ( METHOD_18 ( VAR_168 -> VAR_169 ) + METHOD_19 ( VAR_170 -> VAR_171 ) ) ; STRUCT_OR_UNION_37 -> VAR_172 = ( STRUCT_OR_UNION_38 -> VAR_173 + 511 ) >> 9 ; if ( ! VAR_174 ) {  METHOD_20 ( VAR_175 , STRUCT_OR_UNION_39 ) ;  if ( VAR_176 -> VAR_177 ) STRUCT_OR_UNION_40 -> VAR_178 = VAR_179 -> VAR_180 ; if ( VAR_181 -> VAR_182 ) STRUCT_OR_UNION_41 -> VAR_183 = VAR_184 -> VAR_185 ; } if ( METHOD_21 ( STRUCT_OR_UNION_42 -> VAR_186 ) && VAR_187 -> VAR_188 && VAR_189 -> VAR_190 != VAR_191 ) STRUCT_OR_UNION_43 -> VAR_192 = VAR_193 | VAR_194 -> VAR_195 ; if ( METHOD_22 ( STRUCT_OR_UNION_44 -> VAR_196 ) && VAR_197 -> VAR_198 && VAR_199 -> VAR_200 != VAR_201 ) STRUCT_OR_UNION_45 -> VAR_202 = VAR_203 | VAR_204 -> VAR_205 ; if ( METHOD_23 ( STRUCT_OR_UNION_46 -> VAR_206 ) ) { STRUCT_OR_UNION_47 -> VAR_207 = & VAR_208 ; switch ( VAR_209 -> VAR_210 ) { TYPE_12 TYPE_13 case VAR_211 : STRUCT_OR_UNION_48 -> VAR_212 . VAR_213 = & VAR_214 ; break ; default : STRUCT_OR_UNION_49 -> VAR_215 . VAR_216 = & VAR_217 ; break ; } } else if ( METHOD_24 ( STRUCT_OR_UNION_50 -> VAR_218 ) ) { STRUCT_OR_UNION_51 -> VAR_219 = & VAR_220 ; STRUCT_OR_UNION_52 -> VAR_221 = & VAR_222 ; } else if ( METHOD_25 ( STRUCT_OR_UNION_53 -> VAR_223 ) ) { STRUCT_OR_UNION_54 -> VAR_224 = & VAR_225 ; STRUCT_OR_UNION_55 -> VAR_226 . VAR_227 = & VAR_228 ; } else METHOD_26 ( STRUCT_OR_UNION_56 , STRUCT_OR_UNION_57 -> VAR_229 , STRUCT_OR_UNION_58 -> VAR_230 ) ; VAR_231 = 0 ; VAR_232 : METHOD_27 ( VAR_233 ) ; if ( VAR_234 ) METHOD_28 ( VAR_235 ) ; return VAR_236 ; VAR_237 : printk ( KERN_WARNING "ISOFS:unabletoreadi-nodeblock\\n" ) ; VAR_238 : goto VAR_239 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  METHOD_1 ( ) ;   METHOD_2 ( VAR_2 , VAR_3 , METHOD_3 ( VAR_4 ) ) ;  METHOD_4 ( ) ; }
TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 ) { * VAR_1 = ( TYPE_2 * ) METHOD_1 ( sizeof ( TYPE_3 ) ) ; if ( * VAR_2 == VAR_3 ) return VAR_4 ; ( * VAR_5 ) -> VAR_6 = 0 ;  ( * VAR_7 ) -> VAR_8 = VAR_9 ;  return VAR_10 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , enum VAR_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 ; TYPE_4 * VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 -> VAR_10 == VAR_11 ) { struct STRUCT_OR_UNION_0 VAR_12 ; TYPE_5 VAR_13 ; VAR_14 = METHOD_1 ( 0 , & VAR_15 ) ; VAR_16 . VAR_17 &= ~ VAR_18 ; VAR_19 = METHOD_2 ( 0 , VAR_20 , & VAR_21 ) ; METHOD_3 ( VAR_22 , "Password:" ) ; VAR_23 -> VAR_24 = METHOD_4 ( 1 , 1024 ) ; VAR_25 = METHOD_5 ( "%s" , VAR_26 -> VAR_27 ) ; METHOD_6 ( VAR_28 , "\\n" ) ; if ( VAR_29 < 1 ) { VAR_30 -> VAR_31 = VAR_32 ; } VAR_33 . VAR_34 |= VAR_35 ; VAR_36 = METHOD_7 ( 0 , VAR_37 , & VAR_38 ) ; } if ( VAR_39 -> VAR_40 == VAR_41 || VAR_42 -> VAR_43 == VAR_44 ) { VAR_45 = - VAR_46 ; } if ( VAR_47 == VAR_48 ) {  VAR_49 = METHOD_8 ( VAR_50 , & ( VAR_51 -> VAR_52 ) ) ;  } if ( VAR_53 == VAR_54 ) {  VAR_55 = METHOD_9 ( VAR_56 , & ( VAR_57 -> VAR_58 ) ) ;  } if ( VAR_59 == VAR_60 ) { TYPE_6 * VAR_61 = METHOD_10 ( 0 , VAR_62 -> VAR_63 . VAR_64 , VAR_65 , VAR_66 , VAR_67 , VAR_68 , 0 , VAR_69 ) ; METHOD_11 ( VAR_70 , VAR_71 , VAR_72 ) ; METHOD_12 ( VAR_73 -> VAR_74 . VAR_75 , VAR_76 , VAR_77 -> VAR_78 . VAR_79 ) ; METHOD_13 ( VAR_80 ) ; } if ( VAR_81 == VAR_82 ) { METHOD_14 ( VAR_83 , "%s:Openedconnectionto%s:%d\\n" , VAR_84 , VAR_85 -> VAR_86 , VAR_87 -> VAR_88 ) ; VAR_89 -> VAR_90 = VAR_91 ; VAR_92 -> VAR_93 = VAR_94 ; } else { METHOD_15 ( VAR_95 , "%s:Connectionto%s:%dfailed:%s\\n" , VAR_96 , VAR_97 -> VAR_98 , VAR_99 -> VAR_100 , METHOD_16 ( VAR_101 ) ) ; } return VAR_102 ; }
METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , TYPE_6 , TYPE_7 , unsigned TYPE_8 , TYPE_9 , struct STRUCT_OR_UNION_0 TYPE_10 * , TYPE_11 , TYPE_12 TYPE_13 * , TYPE_14 ) { struct STRUCT_OR_UNION_1 * VAR_0 ; struct STRUCT_OR_UNION_2 VAR_1 ; struct STRUCT_OR_UNION_3 VAR_2 ; struct STRUCT_OR_UNION_4 VAR_3 ; TYPE_15 VAR_4 , VAR_5 ; TYPE_16 VAR_6 ; if ( TYPE_17 > VAR_7 ) TYPE_18 = VAR_8 ; VAR_9 = METHOD_1 ( TYPE_19 , & VAR_10 , & VAR_11 ) ; if ( ! VAR_12 ) goto VAR_13 ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = 0 ; VAR_19 . VAR_20 = 1 ; VAR_21 . VAR_22 = & VAR_23 ; VAR_24 . VAR_25 = TYPE_20 ; VAR_26 . VAR_27 = TYPE_21 ;  VAR_28 . VAR_29 = ( struct STRUCT_OR_UNION_5 * ) & VAR_30 ;   VAR_31 . VAR_32 = sizeof ( VAR_33 ) ;  if ( VAR_34 -> VAR_35 -> VAR_36 & VAR_37 ) TYPE_22 |= VAR_38 ; VAR_39 = METHOD_2 ( VAR_40 , & VAR_41 , TYPE_23 , TYPE_24 ) ; if ( VAR_42 >= 0 && TYPE_25 != VAR_43 ) { VAR_44 = METHOD_3 ( & VAR_45 , VAR_46 . VAR_47 , TYPE_26 , TYPE_27 ) ; if ( VAR_48 < 0 ) VAR_49 = VAR_50 ; } METHOD_4 ( VAR_51 -> VAR_52 , VAR_53 ) ; VAR_54 : return VAR_55 ; }
TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; TYPE_6 * VAR_5 = ( TYPE_7 * ) VAR_6 ; TYPE_8 * VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ; TYPE_9 TYPE_10 VAR_10 ( VAR_11 , VAR_12 | VAR_13 , 0 , VAR_14 , "Mergeparent%ppchild%ppRESULT%pp" , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 == VAR_19 ) return VAR_20 ; VAR_21 -> VAR_22 = ( VAR_23 -> VAR_24 == VAR_25 ? VAR_26 -> VAR_27 : VAR_28 -> VAR_29 ) ; VAR_30 -> VAR_31 = ( VAR_32 -> VAR_33 == VAR_34 ? VAR_35 -> VAR_36 : VAR_37 -> VAR_38 ) ; VAR_39 -> VAR_40 = ( VAR_41 -> VAR_42 == VAR_43 ? VAR_44 -> VAR_45 : VAR_46 -> VAR_47 ) ; VAR_48 -> VAR_49 = ( VAR_50 -> VAR_51 == VAR_52 ? VAR_53 -> VAR_54 : VAR_55 -> VAR_56 ) ; VAR_57 -> VAR_58 = ( VAR_59 -> VAR_60 == VAR_61 ? VAR_62 -> VAR_63 : VAR_64 -> VAR_65 ) ; VAR_66 -> VAR_67 = ( VAR_68 -> VAR_69 == VAR_70 ? VAR_71 -> VAR_72 : VAR_73 -> VAR_74 ) ; VAR_75 -> VAR_76 = ( VAR_77 -> VAR_78 == VAR_79 ? VAR_80 -> VAR_81 : VAR_82 -> VAR_83 ) ; VAR_84 -> VAR_85 = ( VAR_86 -> VAR_87 == VAR_88 ? VAR_89 -> VAR_90 : VAR_91 -> VAR_92 ) ; VAR_93 -> VAR_94 = ( VAR_95 -> VAR_96 == VAR_97 ? VAR_98 -> VAR_99 : VAR_100 -> VAR_101 ) ; VAR_102 -> VAR_103 = ( VAR_104 -> VAR_105 == VAR_106 ? VAR_107 -> VAR_108 : VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = ( VAR_113 -> VAR_114 == VAR_115 ? VAR_116 -> VAR_117 : VAR_118 -> VAR_119 ) ; if ( VAR_120 -> VAR_121 != VAR_122 ) { if ( VAR_123 -> VAR_124 == 1 ) { VAR_125 -> VAR_126 = VAR_127 -> VAR_128 ; VAR_129 -> VAR_130 = 1 ; } else { if ( VAR_131 -> VAR_132 == VAR_133 ) { VAR_134 -> VAR_135 = VAR_136 -> VAR_137 ; VAR_138 -> VAR_139 = VAR_140 ; } else { VAR_141 -> VAR_142 = METHOD_2 ( VAR_143 , VAR_144 -> VAR_145 , VAR_146 -> VAR_147 ) ; if ( VAR_148 -> VAR_149 == VAR_150 ) return VAR_151 ; } } } else { if ( VAR_152 -> VAR_153 == 1 ) { VAR_154 -> VAR_155 = 1 ; } else { VAR_156 -> VAR_157 = VAR_158 -> VAR_159 ; VAR_160 -> VAR_161 = VAR_162 -> VAR_163 ; } } if ( VAR_164 -> VAR_165 == VAR_166 ) { VAR_167 -> VAR_168 = VAR_169 -> VAR_170 ; VAR_171 -> VAR_172 = VAR_173 -> VAR_174 ; } else { VAR_175 -> VAR_176 = VAR_177 -> VAR_178 ; VAR_179 -> VAR_180 = VAR_181 -> VAR_182 ; } VAR_183 -> VAR_184 = ( VAR_185 -> VAR_186 == VAR_187 ? VAR_188 -> VAR_189 : VAR_190 -> VAR_191 ) ; VAR_192 -> VAR_193 = ( VAR_194 -> VAR_195 == VAR_196 ? VAR_197 -> VAR_198 : VAR_199 -> VAR_200 ) ; VAR_201 -> VAR_202 = ( VAR_203 -> VAR_204 == VAR_205 ? VAR_206 -> VAR_207 : VAR_208 -> VAR_209 ) ; VAR_210 -> VAR_211 = ( VAR_212 -> VAR_213 == VAR_214 ? VAR_215 -> VAR_216 : VAR_217 -> VAR_218 ) ; if ( ( VAR_219 -> VAR_220 == VAR_221 ) || ( VAR_222 -> VAR_223 == 1 ) ) { VAR_224 -> VAR_225 = VAR_226 -> VAR_227 ; if ( ( VAR_228 -> VAR_229 == VAR_230 ) && ( VAR_231 -> VAR_232 == VAR_233 ) ) { TYPE_11 TYPE_12 VAR_234 ( VAR_235 , VAR_236 | VAR_237 , 0 , VAR_238 , "Norulesinthiscontext." ) ; } else if ( VAR_239 -> VAR_240 == VAR_241 ) { TYPE_13 TYPE_14 VAR_242 ( VAR_243 , VAR_244 | VAR_245 , 0 , VAR_246 , "Usingparentrulesinthiscontext." ) ; VAR_247 -> VAR_248 = METHOD_3 ( VAR_249 -> VAR_250 -> VAR_251 , VAR_252 ) ; METHOD_4 ( VAR_253 , VAR_254 -> VAR_255 , VAR_256 -> VAR_257 , VAR_258 -> VAR_259 ) ; } else if ( VAR_260 -> VAR_261 == VAR_262 ) { TYPE_15 TYPE_16 VAR_263 ( VAR_264 , VAR_265 | VAR_266 , 0 , VAR_267 , "Usingchildrulesinthiscontext." ) ; VAR_268 -> VAR_269 = METHOD_5 ( VAR_270 -> VAR_271 -> VAR_272 , VAR_273 ) ; VAR_274 -> VAR_275 -> VAR_276 = METHOD_6 ( VAR_277 , VAR_278 -> VAR_279 -> VAR_280 ) ; VAR_281 -> VAR_282 -> VAR_283 = METHOD_7 ( VAR_284 , VAR_285 -> VAR_286 -> VAR_287 ) ; VAR_288 -> VAR_289 -> VAR_290 = METHOD_8 ( VAR_291 , VAR_292 -> VAR_293 -> VAR_294 ) ; VAR_295 -> VAR_296 -> VAR_297 = METHOD_9 ( VAR_298 , VAR_299 -> VAR_300 -> VAR_301 ) ; VAR_302 -> VAR_303 -> VAR_304 = METHOD_10 ( VAR_305 , VAR_306 -> VAR_307 -> VAR_308 ) ; } else { TYPE_17 TYPE_18 VAR_309 ( VAR_310 , VAR_311 | VAR_312 , 0 , VAR_313 , "Usingparentthenchildrulesinthiscontext." ) ; VAR_314 -> VAR_315 = METHOD_11 ( VAR_316 -> VAR_317 -> VAR_318 , VAR_319 ) ; METHOD_12 ( VAR_320 , VAR_321 -> VAR_322 , VAR_323 -> VAR_324 , VAR_325 -> VAR_326 ) ; METHOD_13 ( VAR_327 -> VAR_328 -> VAR_329 , VAR_330 -> VAR_331 -> VAR_332 ) ; METHOD_14 ( VAR_333 -> VAR_334 -> VAR_335 , VAR_336 -> VAR_337 -> VAR_338 ) ; METHOD_15 ( VAR_339 -> VAR_340 -> VAR_341 , VAR_342 -> VAR_343 -> VAR_344 ) ; METHOD_16 ( VAR_345 -> VAR_346 -> VAR_347 , VAR_348 -> VAR_349 -> VAR_350 ) ; METHOD_17 ( VAR_351 -> VAR_352 -> VAR_353 , VAR_354 -> VAR_355 -> VAR_356 ) ; } } else { VAR_357 -> VAR_358 = 0 ; if ( VAR_359 -> VAR_360 != VAR_361 ) { VAR_362 -> VAR_363 = METHOD_18 ( VAR_364 -> VAR_365 -> VAR_366 , VAR_367 ) ; VAR_368 -> VAR_369 -> VAR_370 = METHOD_19 ( VAR_371 , VAR_372 -> VAR_373 -> VAR_374 ) ; VAR_375 -> VAR_376 -> VAR_377 = METHOD_20 ( VAR_378 , VAR_379 -> VAR_380 -> VAR_381 ) ; VAR_382 -> VAR_383 -> VAR_384 = METHOD_21 ( VAR_385 , VAR_386 -> VAR_387 -> VAR_388 ) ; VAR_389 -> VAR_390 -> VAR_391 = METHOD_22 ( VAR_392 , VAR_393 -> VAR_394 -> VAR_395 ) ; VAR_396 -> VAR_397 -> VAR_398 = METHOD_23 ( VAR_399 , VAR_400 -> VAR_401 -> VAR_402 ) ; } } VAR_403 -> VAR_404 = METHOD_24 ( VAR_405 , VAR_406 -> VAR_407 , VAR_408 -> VAR_409 ) ; VAR_410 -> VAR_411 = METHOD_25 ( VAR_412 , VAR_413 -> VAR_414 , VAR_415 -> VAR_416 ) ; VAR_417 -> VAR_418 = ( VAR_419 -> VAR_420 == VAR_421 ? VAR_422 -> VAR_423 : VAR_424 -> VAR_425 ) ; VAR_426 -> VAR_427 = ( VAR_428 -> VAR_429 == VAR_430 ? VAR_431 -> VAR_432 : VAR_433 -> VAR_434 ) ; VAR_435 -> VAR_436 = ( VAR_437 -> VAR_438 == VAR_439 ? VAR_440 -> VAR_441 : VAR_442 -> VAR_443 ) ; VAR_444 -> VAR_445 = ( VAR_446 -> VAR_447 == VAR_448 ? VAR_449 -> VAR_450 : VAR_451 -> VAR_452 ) ; VAR_453 -> VAR_454 = ( VAR_455 -> VAR_456 == VAR_457 ? VAR_458 -> VAR_459 : VAR_460 -> VAR_461 ) ; if ( VAR_462 -> VAR_463 != VAR_464 ) { VAR_465 -> VAR_466 = VAR_467 -> VAR_468 ; VAR_469 -> VAR_470 = VAR_471 -> VAR_472 ; } else { VAR_473 -> VAR_474 = VAR_475 -> VAR_476 ; VAR_477 -> VAR_478 = VAR_479 -> VAR_480 ; } if ( VAR_481 -> VAR_482 != VAR_483 ) { VAR_484 -> VAR_485 = VAR_486 -> VAR_487 ; VAR_488 -> VAR_489 = VAR_490 -> VAR_491 ; } else { VAR_492 -> VAR_493 = VAR_494 -> VAR_495 ; VAR_496 -> VAR_497 = VAR_498 -> VAR_499 ; } VAR_500 -> VAR_501 = ( VAR_502 -> VAR_503 == VAR_504 ? VAR_505 -> VAR_506 : VAR_507 -> VAR_508 ) ; VAR_509 -> VAR_510 = ( VAR_511 -> VAR_512 == VAR_513 ? VAR_514 -> VAR_515 : VAR_516 -> VAR_517 ) ; VAR_518 -> VAR_519 = ( VAR_520 -> VAR_521 == VAR_522 ? VAR_523 -> VAR_524 : VAR_525 -> VAR_526 ) ; VAR_527 -> VAR_528 = ( VAR_529 -> VAR_530 == VAR_531 ? VAR_532 -> VAR_533 : VAR_534 -> VAR_535 ) ; VAR_536 -> VAR_537 = ( VAR_538 -> VAR_539 == VAR_540 ? VAR_541 -> VAR_542 : VAR_543 -> VAR_544 ) ; VAR_545 -> VAR_546 = ( VAR_547 -> VAR_548 == VAR_549 ? VAR_550 -> VAR_551 : VAR_552 -> VAR_553 ) ; VAR_554 -> VAR_555 = ( VAR_556 -> VAR_557 == VAR_558 ? VAR_559 -> VAR_560 : VAR_561 -> VAR_562 ) ; VAR_563 -> VAR_564 = ( VAR_565 -> VAR_566 == VAR_567 ? VAR_568 -> VAR_569 : VAR_570 -> VAR_571 ) ; VAR_572 -> VAR_573 = ( VAR_574 -> VAR_575 == VAR_576 ? VAR_577 -> VAR_578 : VAR_579 -> VAR_580 ) ; VAR_581 -> VAR_582 = ( VAR_583 -> VAR_584 == VAR_585 ? VAR_586 -> VAR_587 : VAR_588 -> VAR_589 ) ; VAR_590 -> VAR_591 = ( VAR_592 -> VAR_593 == VAR_594 ? VAR_595 -> VAR_596 : VAR_597 -> VAR_598 ) ; VAR_599 -> VAR_600 = ( VAR_601 -> VAR_602 == VAR_603 ? VAR_604 -> VAR_605 : VAR_606 -> VAR_607 ) ; VAR_608 -> VAR_609 = ( VAR_610 -> VAR_611 == VAR_612 ? VAR_613 -> VAR_614 : VAR_615 -> VAR_616 ) ; VAR_617 -> VAR_618 = ( VAR_619 -> VAR_620 == VAR_621 ? VAR_622 -> VAR_623 : VAR_624 -> VAR_625 ) ; VAR_626 -> VAR_627 = ( VAR_628 -> VAR_629 == VAR_630 ? VAR_631 -> VAR_632 : VAR_633 -> VAR_634 ) ; VAR_635 -> VAR_636 = ( VAR_637 -> VAR_638 == VAR_639 ? VAR_640 -> VAR_641 : VAR_642 -> VAR_643 ) ; VAR_644 -> VAR_645 = ( VAR_646 -> VAR_647 == VAR_648 ? VAR_649 -> VAR_650 : VAR_651 -> VAR_652 ) ; VAR_653 -> VAR_654 = ( VAR_655 -> VAR_656 == VAR_657 ? VAR_658 -> VAR_659 : VAR_660 -> VAR_661 ) ; VAR_662 -> VAR_663 = ( VAR_664 -> VAR_665 == VAR_666 ? VAR_667 -> VAR_668 : VAR_669 -> VAR_670 ) ; VAR_671 -> VAR_672 = ( VAR_673 -> VAR_674 == VAR_675 ? VAR_676 -> VAR_677 : VAR_678 -> VAR_679 ) ; VAR_680 -> VAR_681 = ( VAR_682 -> VAR_683 == VAR_684 ? VAR_685 -> VAR_686 : VAR_687 -> VAR_688 ) ; VAR_689 -> VAR_690 = ( VAR_691 -> VAR_692 == ( TYPE_19 ) VAR_693 ? VAR_694 -> VAR_695 : VAR_696 -> VAR_697 ) ; VAR_698 -> VAR_699 = ( VAR_700 -> VAR_701 == ( TYPE_20 ) VAR_702 ? VAR_703 -> VAR_704 : VAR_705 -> VAR_706 ) ; VAR_707 -> VAR_708 = ( VAR_709 -> VAR_710 == ( TYPE_21 ) VAR_711 ? VAR_712 -> VAR_713 : VAR_714 -> VAR_715 ) ; VAR_716 -> VAR_717 = METHOD_26 ( VAR_718 , VAR_719 -> VAR_720 , VAR_721 -> VAR_722 ) ; VAR_723 -> VAR_724 = ( VAR_725 -> VAR_726 == VAR_727 ? VAR_728 -> VAR_729 : VAR_730 -> VAR_731 ) ; VAR_732 -> VAR_733 = ( VAR_734 -> VAR_735 == VAR_736 ? VAR_737 -> VAR_738 : VAR_739 -> VAR_740 ) ; VAR_741 -> VAR_742 = ( VAR_743 -> VAR_744 == VAR_745 ? VAR_746 -> VAR_747 : VAR_748 -> VAR_749 ) ; VAR_750 -> VAR_751 = ( VAR_752 -> VAR_753 == VAR_754 ? VAR_755 -> VAR_756 : VAR_757 -> VAR_758 ) ; VAR_759 -> VAR_760 = ( VAR_761 -> VAR_762 == VAR_763 ? VAR_764 -> VAR_765 : VAR_766 -> VAR_767 ) ; VAR_768 -> VAR_769 = ( VAR_770 -> VAR_771 == VAR_772 ? VAR_773 -> VAR_774 : VAR_775 -> VAR_776 ) ; VAR_777 -> VAR_778 = ( VAR_779 -> VAR_780 == VAR_781 ? VAR_782 -> VAR_783 : VAR_784 -> VAR_785 ) ; VAR_786 -> VAR_787 = ( VAR_788 -> VAR_789 == VAR_790 ? VAR_791 -> VAR_792 : VAR_793 -> VAR_794 ) ; VAR_795 -> VAR_796 = ( VAR_797 -> VAR_798 == VAR_799 ? VAR_800 -> VAR_801 : VAR_802 -> VAR_803 ) ; VAR_804 -> VAR_805 = ( VAR_806 -> VAR_807 == VAR_808 ? VAR_809 -> VAR_810 : VAR_811 -> VAR_812 ) ; VAR_813 -> VAR_814 = ( VAR_815 -> VAR_816 == VAR_817 ? VAR_818 -> VAR_819 : VAR_820 -> VAR_821 ) ; VAR_822 -> VAR_823 = ( VAR_824 -> VAR_825 == VAR_826 ? VAR_827 -> VAR_828 : VAR_829 -> VAR_830 ) ; VAR_831 -> VAR_832 = ( VAR_833 -> VAR_834 == VAR_835 ? VAR_836 -> VAR_837 : VAR_838 -> VAR_839 ) ; VAR_840 -> VAR_841 = ( VAR_842 -> VAR_843 == VAR_844 ? VAR_845 -> VAR_846 : VAR_847 -> VAR_848 ) ; VAR_849 -> VAR_850 = ( VAR_851 -> VAR_852 == VAR_853 ? VAR_854 -> VAR_855 : VAR_856 -> VAR_857 ) ; VAR_858 -> VAR_859 = ( VAR_860 -> VAR_861 == VAR_862 ? VAR_863 -> VAR_864 : VAR_865 -> VAR_866 ) ; VAR_867 -> VAR_868 = ( VAR_869 -> VAR_870 == VAR_871 ? VAR_872 -> VAR_873 : VAR_874 -> VAR_875 ) ; VAR_876 -> VAR_877 = ( VAR_878 -> VAR_879 == VAR_880 ? VAR_881 -> VAR_882 : VAR_883 -> VAR_884 ) ; VAR_885 -> VAR_886 = ( VAR_887 -> VAR_888 == VAR_889 ? VAR_890 -> VAR_891 : VAR_892 -> VAR_893 ) ;  return VAR_894 ;  }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , unsigned VAR_3 , struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 ) { struct STRUCT_OR_UNION_5 TYPE_2 * VAR_4 = ( struct STRUCT_OR_UNION_6 TYPE_3 * ) VAR_5 ; struct STRUCT_OR_UNION_7 VAR_6 ; struct STRUCT_OR_UNION_8 VAR_7 [ VAR_8 ] , * VAR_9 = VAR_10 ; unsigned TYPE_4 VAR_11 [ sizeof ( struct STRUCT_OR_UNION_9 ) + 20 ] VAR_12 ( ( VAR_13 ( sizeof ( VAR_14 ) ) ) ) ; unsigned TYPE_5 * VAR_15 = VAR_16 ; TYPE_6 VAR_17 , VAR_18 , VAR_19 , VAR_20 ; VAR_21 = - VAR_22 ; if ( VAR_23 & VAR_24 ) { if ( METHOD_1 ( VAR_25 , VAR_26 ) ) return - VAR_27 ; } else if ( METHOD_2 ( VAR_28 , VAR_29 , sizeof ( struct STRUCT_OR_UNION_10 ) ) ) return - VAR_30 ; VAR_31 = - VAR_32 ; if ( VAR_33 -> VAR_34 > VAR_35 ) goto VAR_36 ; VAR_37 = - VAR_38 ; VAR_39 = VAR_40 -> VAR_41 * sizeof ( struct STRUCT_OR_UNION_11 ) ; if ( VAR_42 -> VAR_43 > VAR_44 ) { VAR_45 = METHOD_3 ( VAR_46 -> VAR_47 , VAR_48 , VAR_49 ) ; if ( ! VAR_50 ) goto VAR_51 ; } if ( VAR_52 & VAR_53 ) { VAR_54 = METHOD_4 ( VAR_55 , VAR_56 , ( struct STRUCT_OR_UNION_12 * ) & VAR_57 , VAR_58 ) ; } else VAR_59 = METHOD_5 ( VAR_60 , VAR_61 , ( struct STRUCT_OR_UNION_13 * ) & VAR_62 , VAR_63 ) ; if ( VAR_64 < 0 ) goto VAR_65 ; VAR_66 = VAR_67 ; VAR_68 = - VAR_69 ; if ( VAR_70 -> VAR_71 > VAR_72 ) goto VAR_73 ; VAR_74 = VAR_75 -> VAR_76 ; if ( ( VAR_77 & VAR_78 ) && VAR_79 ) { VAR_80 = METHOD_6 ( VAR_81 , VAR_82 -> VAR_83 , VAR_84 , sizeof ( VAR_85 ) ) ; if ( VAR_86 ) goto VAR_87 ; VAR_88 = VAR_89 -> VAR_90 ; VAR_91 = VAR_92 -> VAR_93 ; } else if ( VAR_94 ) { if ( VAR_95 > sizeof ( VAR_96 ) ) { VAR_97 = METHOD_7 ( VAR_98 -> VAR_99 , VAR_100 , VAR_101 ) ; if ( VAR_102 == VAR_103 ) goto VAR_104 ; } VAR_105 = - VAR_106 ; if ( METHOD_8 ( VAR_107 , ( TYPE_7 TYPE_8 TYPE_9 * ) VAR_108 -> VAR_109 , VAR_110 ) ) goto VAR_111 ; VAR_112 -> VAR_113 = VAR_114 ; } VAR_115 -> VAR_116 = VAR_117 ; if ( VAR_118 -> VAR_119 -> VAR_120 & VAR_121 ) VAR_122 -> VAR_123 |= VAR_124 ;  if ( STRUCT_OR_UNION_14 && STRUCT_OR_UNION_15 -> VAR_125 == VAR_126 -> VAR_127 &&   ! METHOD_9 ( & STRUCT_OR_UNION_16 -> VAR_128 , VAR_129 -> VAR_130 ,  STRUCT_OR_UNION_17 -> VAR_131 ) ) { VAR_132 = METHOD_10 ( VAR_133 , VAR_134 , VAR_135 ) ; goto VAR_136 ; } VAR_137 = METHOD_11 ( VAR_138 , VAR_139 , VAR_140 ) ; if ( STRUCT_OR_UNION_18 && VAR_141 >= 0 ) { STRUCT_OR_UNION_19 -> VAR_142 = VAR_143 -> VAR_144 ;  METHOD_12 ( & STRUCT_OR_UNION_20 -> VAR_145 , VAR_146 -> VAR_147 ,  STRUCT_OR_UNION_21 -> VAR_148 ) ; } VAR_149 : if ( VAR_150 != VAR_151 ) METHOD_13 ( VAR_152 -> VAR_153 , VAR_154 , VAR_155 ) ; VAR_156 : if ( VAR_157 != VAR_158 ) METHOD_14 ( VAR_159 -> VAR_160 , VAR_161 , VAR_162 ) ; VAR_163 : return VAR_164 ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; struct STRUCT_OR_UNION_8 * VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; unsigned TYPE_3 VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_4 VAR_18 = - VAR_19 ; TYPE_5 VAR_20 ; TYPE_6 VAR_21 = 0 ;  METHOD_4 ( VAR_22 ) ;  VAR_23 -> VAR_24 = 0 ; for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 -> VAR_30 ; VAR_31 > 0 ; VAR_32 -- , VAR_33 ++ ) { unsigned TYPE_7 VAR_34 = VAR_35 -> VAR_36 ; TYPE_8 TYPE_9 * VAR_37 = VAR_38 -> VAR_39 ; while ( VAR_40 ) { VAR_41 = list_first_entry ( & VAR_42 -> VAR_43 , struct STRUCT_OR_UNION_11 , VAR_44 ) ; VAR_45 = VAR_46 -> VAR_47 ; while ( ! VAR_48 -> VAR_49 ) VAR_50 ++ ; VAR_51 = VAR_52 -> VAR_53 ; if ( ! VAR_54 ) { VAR_55 = METHOD_5 ( VAR_56 , VAR_57 ) ; if ( VAR_58 ) goto VAR_59 ; } VAR_60 = min_t ( unsigned TYPE_10 , VAR_61 , VAR_62 ) ; VAR_63 = METHOD_6 ( & VAR_64 -> VAR_65 , VAR_66 , VAR_67 , 1 ) ; VAR_68 = VAR_69 ; if ( VAR_70 < 0 ) goto VAR_71 ; if ( VAR_72 -> VAR_73 || VAR_74 < VAR_75 -> VAR_76 ) VAR_77 -= VAR_78 % VAR_79 ; VAR_80 = - VAR_81 ; if ( ! VAR_82 ) goto VAR_83 ; METHOD_7 ( & VAR_84 -> VAR_85 , VAR_86 , VAR_87 -> VAR_88 . VAR_89 , VAR_90 , VAR_91 -> VAR_92 ) ; VAR_93 = METHOD_8 ( VAR_94 -> VAR_95 ? METHOD_9 ( & VAR_96 -> VAR_97 ) : METHOD_10 ( & VAR_98 -> VAR_99 ) , & VAR_100 -> VAR_101 ) ; VAR_102 : METHOD_11 ( & VAR_103 -> VAR_104 ) ; if ( VAR_105 ) goto VAR_106 ; VAR_107 += VAR_108 ; VAR_109 += VAR_110 ; VAR_111 -= VAR_112 ; METHOD_12 ( VAR_113 , VAR_114 ) ; } } VAR_115 = 0 ; VAR_116 : METHOD_13 ( VAR_117 ) ; METHOD_14 ( VAR_118 ) ; return VAR_119 ? : VAR_120 ; }
static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 0x01 VAR_3 0x02 VAR_4 0x03 VAR_5 0x05 VAR_6 0x06 VAR_7 0x07 TYPE_3 VAR_8 [ 12 ] ; TYPE_4 * VAR_9 ; TYPE_5 VAR_10 ; TYPE_6 VAR_11 , VAR_12 , VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 VAR_15 ; TYPE_9 * VAR_16 ; register TYPE_10 * VAR_17 ; register TYPE_11 VAR_18 ; register TYPE_12 * VAR_19 ; register TYPE_13 VAR_20 ; register unsigned TYPE_14 * VAR_21 ; TYPE_15 VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ,  VAR_28 ,  VAR_29 ; TYPE_16 VAR_30 , VAR_31 ; unsigned TYPE_17 VAR_32 [ 256 ] , * VAR_33 , VAR_34 , VAR_35 , * VAR_36 ; METHOD_1 ( VAR_37 != ( const TYPE_18 * ) VAR_38 ) ; METHOD_2 ( VAR_39 -> VAR_40 == VAR_41 ) ; if ( VAR_42 -> VAR_43 != VAR_44 ) ( TYPE_19 ) METHOD_3 ( VAR_45 , METHOD_4 ( ) , "%s" , VAR_46 -> VAR_47 ) ; METHOD_5 ( VAR_48 != ( TYPE_20 * ) VAR_49 ) ; METHOD_6 ( VAR_50 -> VAR_51 == VAR_52 ) ; VAR_53 = METHOD_7 ( VAR_54 ) ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ; if ( VAR_60 == VAR_61 ) return ( METHOD_9 ( VAR_62 ) ) ; VAR_63 = METHOD_10 ( VAR_64 , 2 , ( unsigned TYPE_21 * ) VAR_65 ) ; if ( ( VAR_66 != 2 ) || ( METHOD_11 ( VAR_67 , "\\122\\314" , 2 ) != 0 ) ) METHOD_12 ( VAR_68 , "ImproperImageHeader" ) ; do { VAR_69 -> VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 -> VAR_74 . VAR_75 = METHOD_14 ( VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_15 ( VAR_79 ) ; VAR_80 -> VAR_81 = METHOD_16 ( VAR_82 ) ; VAR_83 = ( TYPE_22 ) METHOD_17 ( VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 & 0x04 ? VAR_88 : VAR_89 ; VAR_90 = ( TYPE_23 ) METHOD_18 ( VAR_91 ) ; VAR_92 = ( TYPE_24 ) METHOD_19 ( VAR_93 ) ; VAR_94 = ( TYPE_25 ) METHOD_20 ( VAR_95 ) ; VAR_96 = ( unsigned TYPE_26 ) METHOD_21 ( VAR_97 ) ; if ( VAR_98 >= 32 ) METHOD_22 ( VAR_99 , "ImproperImageHeader" ) ; VAR_100 = 1 ; VAR_101 = VAR_102 << VAR_103 ; if ( ( VAR_104 == 0 ) || ( VAR_105 == 2 ) || ( ( VAR_106 & 0x04 ) && ( VAR_107 > 254 ) ) || ( VAR_108 != 8 ) || ( VAR_109 -> VAR_110 == 0 ) ) METHOD_23 ( VAR_111 , "ImproperImageHeader" ) ; if ( VAR_112 & 0x02 ) { for ( VAR_113 = 0 ; VAR_114 < ( TYPE_27 ) VAR_115 ; VAR_116 ++ ) VAR_117 [ VAR_118 ] = 0 ; ( TYPE_28 ) METHOD_24 ( VAR_119 ) ; } else { VAR_120 = VAR_121 ; for ( VAR_122 = 0 ; VAR_123 < ( TYPE_29 ) VAR_124 ; VAR_125 ++ ) * VAR_126 ++ = ( unsigned TYPE_30 ) METHOD_25 ( VAR_127 ) ; } if ( ( VAR_128 & 0x01 ) == 0 ) ( TYPE_31 ) METHOD_26 ( VAR_129 ) ; if ( METHOD_27 ( VAR_130 ) != VAR_131 ) { METHOD_28 ( VAR_132 , VAR_133 , "UnexpectedEndOfFile" , VAR_134 -> VAR_135 ) ; break ; } VAR_136 = ( unsigned TYPE_32 * ) VAR_137 ; if ( VAR_138 != 0 ) { VAR_139 = ( unsigned TYPE_33 * ) METHOD_29 ( VAR_140 , 3 * VAR_141 * sizeof ( * VAR_142 ) ) ; if ( VAR_143 == ( unsigned TYPE_34 * ) VAR_144 ) METHOD_30 ( VAR_145 , "MemoryAllocationFailed" ) ; VAR_146 = VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < ( TYPE_35 ) VAR_150 ; VAR_151 ++ ) for ( VAR_152 = 0 ; VAR_153 < ( TYPE_36 ) VAR_154 ; VAR_155 ++ ) * VAR_156 ++ = ( unsigned TYPE_37 ) METHOD_31 ( METHOD_32 ( VAR_157 ) ) ; } if ( ( VAR_158 & 0x08 ) != 0 ) { TYPE_38 * VAR_159 ; TYPE_39 VAR_160 ; VAR_161 = METHOD_33 ( VAR_162 ) ; if ( VAR_163 != 0 ) { VAR_164 = ( TYPE_40 * ) METHOD_34 ( VAR_165 , sizeof ( * VAR_166 ) ) ; if ( VAR_167 == ( TYPE_41 * ) VAR_168 ) METHOD_35 ( VAR_169 , "MemoryAllocationFailed" ) ; ( TYPE_42 ) METHOD_36 ( VAR_170 , VAR_171 - 1 , ( unsigned TYPE_43 * ) VAR_172 ) ; VAR_173 [ VAR_174 - 1 ] = '\\0' ; ( TYPE_44 ) METHOD_37 ( VAR_175 , "comment" , VAR_176 ) ; VAR_177 = METHOD_38 ( VAR_178 ) ; if ( ( VAR_179 & 0x01 ) == 0 ) ( TYPE_45 ) METHOD_39 ( VAR_180 ) ; } } if ( ( VAR_181 -> VAR_182 != VAR_183 ) && ( VAR_184 -> VAR_185 != 0 ) ) if ( VAR_186 -> VAR_187 >= ( VAR_188 -> VAR_189 + VAR_190 -> VAR_191 - 1 ) ) break ; VAR_192 = METHOD_40 ( VAR_193 , VAR_194 -> VAR_195 , VAR_196 -> VAR_197 ) ; if ( VAR_198 == VAR_199 ) { METHOD_41 ( VAR_200 , & VAR_201 -> VAR_202 ) ; return ( METHOD_42 ( VAR_203 ) ) ; } if ( VAR_204 -> VAR_205 != VAR_206 ) VAR_207 ++ ; VAR_208 = ( TYPE_46 ) VAR_209 -> VAR_210 * VAR_211 -> VAR_212 ; VAR_213 = ( VAR_214 % 2 == 0 ) ? VAR_215 : VAR_216 + 1 ; if ( ( VAR_217 * VAR_218 ) != ( TYPE_47 ) ( VAR_219 * VAR_220 ) ) METHOD_43 ( VAR_221 , "MemoryAllocationFailed" ) ; VAR_222 = METHOD_44 ( VAR_223 -> VAR_224 , VAR_225 -> VAR_226 * METHOD_45 ( VAR_227 , 4 ) * sizeof ( * VAR_228 ) ) ; if ( VAR_229 == ( TYPE_48 * ) VAR_230 ) METHOD_46 ( VAR_231 , "MemoryAllocationFailed" ) ; VAR_232 = VAR_233 -> VAR_234 * VAR_235 -> VAR_236 * METHOD_47 ( VAR_237 , 4 ) ; VAR_238 = ( unsigned TYPE_49 * ) METHOD_48 ( VAR_239 ) ; if ( ( VAR_240 & 0x01 ) && ! ( VAR_241 & 0x02 ) ) { TYPE_50 VAR_242 ; VAR_243 = VAR_244 ; for ( VAR_245 = 0 ; VAR_246 < ( TYPE_51 ) VAR_247 ; VAR_248 ++ ) { if ( VAR_249 -> VAR_250 == VAR_251 ) for ( VAR_252 = 0 ; VAR_253 < ( TYPE_52 ) VAR_254 ; VAR_255 ++ ) * VAR_256 ++ = VAR_257 [ VAR_258 ] ; else { for ( VAR_259 = 0 ; VAR_260 < ( TYPE_53 ) ( VAR_261 - 1 ) ; VAR_262 ++ ) * VAR_263 ++ = VAR_264 [ VAR_265 ] ; * VAR_266 ++ = 0 ; } } } VAR_267 = 0 ; VAR_268 = 0 ; VAR_269 = 0 ; VAR_270 = METHOD_49 ( VAR_271 ) ; do { switch ( VAR_272 & 0x3f ) { case VAR_273 : { VAR_274 = METHOD_50 ( VAR_275 ) ; if ( VAR_276 & 0x40 ) VAR_277 = METHOD_51 ( VAR_278 ) ; VAR_279 = 0 ; VAR_280 += VAR_281 ; break ; } case VAR_282 : { VAR_283 = METHOD_52 ( VAR_284 ) ; VAR_285 = ( unsigned TYPE_54 ) VAR_286 ; if ( VAR_287 == 255 ) VAR_288 = ( unsigned TYPE_55 ) ( VAR_289 - 1 ) ; VAR_290 = 0 ; break ; } case VAR_291 : { VAR_292 = METHOD_53 ( VAR_293 ) ; if ( VAR_294 & 0x40 ) VAR_295 = METHOD_54 ( VAR_296 ) ; VAR_297 += VAR_298 ; break ; } case VAR_299 : { VAR_300 = METHOD_55 ( VAR_301 ) ; if ( VAR_302 & 0x40 ) VAR_303 = METHOD_56 ( VAR_304 ) ; VAR_305 = ( ( VAR_306 -> VAR_307 - VAR_308 - 1 ) * VAR_309 -> VAR_310 * VAR_311 ) + VAR_312 * VAR_313 + VAR_314 ; VAR_315 ++ ;  if ( VAR_316 + ( ( TYPE_56 ) VAR_317 * VAR_318 ) > VAR_319 )  { if ( VAR_320 != 0 ) VAR_321 = ( unsigned TYPE_57 * ) METHOD_57 ( VAR_322 ) ; VAR_323 = METHOD_58 ( VAR_324 ) ; METHOD_59 ( VAR_325 , "UnableToReadImageData" ) ; } VAR_326 = VAR_327 + VAR_328 ; for ( VAR_329 = 0 ; VAR_330 < ( TYPE_58 ) VAR_331 ; VAR_332 ++ ) { VAR_333 = ( unsigned TYPE_59 ) METHOD_60 ( VAR_334 ) ; if ( ( VAR_335 < ( TYPE_60 ) VAR_336 -> VAR_337 ) && ( ( VAR_338 + VAR_339 ) < ( TYPE_61 ) VAR_340 -> VAR_341 ) ) * VAR_342 = VAR_343 ; VAR_344 += VAR_345 ; } if ( VAR_346 & 0x01 ) ( TYPE_62 ) METHOD_61 ( VAR_347 ) ; VAR_348 += VAR_349 ; break ; } case VAR_350 : { VAR_351 = METHOD_62 ( VAR_352 ) ; if ( VAR_353 & 0x40 ) VAR_354 = METHOD_63 ( VAR_355 ) ; VAR_356 = ( unsigned TYPE_63 ) METHOD_64 ( VAR_357 ) ; ( TYPE_64 ) METHOD_65 ( VAR_358 ) ; VAR_359 ++ ; VAR_360 = ( ( VAR_361 -> VAR_362 - VAR_363 - 1 ) * VAR_364 -> VAR_365 * VAR_366 ) + VAR_367 * VAR_368 + VAR_369 ;  VAR_370 = VAR_371 + VAR_372 ;   if ( VAR_373 + ( ( TYPE_65 ) VAR_374 * VAR_375 ) > VAR_376 )  { if ( VAR_377 != 0 ) VAR_378 = ( unsigned TYPE_66 * ) METHOD_66 ( VAR_379 ) ; VAR_380 = METHOD_67 ( VAR_381 ) ; METHOD_68 ( VAR_382 , "UnableToReadImageData" ) ; } for ( VAR_383 = 0 ; VAR_384 < ( TYPE_67 ) VAR_385 ; VAR_386 ++ ) { if ( ( VAR_387 < ( TYPE_68 ) VAR_388 -> VAR_389 ) && ( ( VAR_390 + VAR_391 ) < ( TYPE_69 ) VAR_392 -> VAR_393 ) ) * VAR_394 = VAR_395 ; VAR_396 += VAR_397 ; } VAR_398 += VAR_399 ; break ; } default : break ; } VAR_400 = METHOD_69 ( VAR_401 ) ; } while ( ( ( VAR_402 & 0x3f ) != VAR_403 ) && ( VAR_404 != VAR_405 ) ) ; if ( VAR_406 != 0 ) { TYPE_70 VAR_407 ; VAR_408 = ( TYPE_71 ) ( VAR_409 - 1 ) ; VAR_410 = VAR_411 ; VAR_412 = ( TYPE_72 ) VAR_413 ; if ( VAR_414 == 1 ) for ( VAR_415 = 0 ; VAR_416 < ( TYPE_73 ) VAR_417 ; VAR_418 ++ ) { if ( METHOD_70 ( VAR_419 , * VAR_420 & VAR_421 , & VAR_422 , VAR_423 ) == VAR_424 ) break ; * VAR_425 = VAR_426 [ ( TYPE_74 ) VAR_427 ] ; VAR_428 ++ ; } else if ( ( VAR_429 >= 3 ) && ( VAR_430 >= 3 ) ) for ( VAR_431 = 0 ; VAR_432 < ( TYPE_75 ) VAR_433 ; VAR_434 ++ ) for ( VAR_435 = 0 ; VAR_436 < ( TYPE_76 ) VAR_437 ; VAR_438 ++ ) { if ( METHOD_71 ( VAR_439 , ( TYPE_77 ) ( VAR_440 * VAR_441 + ( * VAR_442 & VAR_443 ) ) , & VAR_444 , VAR_445 ) == VAR_446 ) break ; * VAR_447 = VAR_448 [ ( TYPE_78 ) VAR_449 ] ; VAR_450 ++ ; } if ( ( VAR_451 < ( TYPE_79 ) VAR_452 ) || ( VAR_453 < ( TYPE_80 ) VAR_454 ) ) { VAR_455 = ( unsigned TYPE_81 * ) METHOD_72 ( VAR_456 ) ; VAR_457 = METHOD_73 ( VAR_458 ) ; METHOD_74 ( VAR_459 , "UnableToReadImageData" ) ; } } if ( VAR_460 >= 3 ) { VAR_461 = VAR_462 ; for ( VAR_463 = 0 ; VAR_464 < ( TYPE_82 ) VAR_465 -> VAR_466 ; VAR_467 ++ ) { VAR_468 = METHOD_75 ( VAR_469 , 0 , VAR_470 , VAR_471 -> VAR_472 , 1 , VAR_473 ) ; if ( VAR_474 == ( TYPE_83 * ) VAR_475 ) break ; for ( VAR_476 = 0 ; VAR_477 < ( TYPE_84 ) VAR_478 -> VAR_479 ; VAR_480 ++ ) { METHOD_76 ( VAR_481 , METHOD_77 ( * VAR_482 ++ ) ) ; METHOD_78 ( VAR_483 , METHOD_79 ( * VAR_484 ++ ) ) ; METHOD_80 ( VAR_485 , METHOD_81 ( * VAR_486 ++ ) ) ; if ( VAR_487 -> VAR_488 != VAR_489 ) METHOD_82 ( VAR_490 , METHOD_83 ( * VAR_491 ++ ) ) ; VAR_492 ++ ; } if ( METHOD_84 ( VAR_493 , VAR_494 ) == VAR_495 ) break ; if ( VAR_496 -> VAR_497 == ( TYPE_85 * ) VAR_498 ) { VAR_499 = METHOD_85 ( VAR_500 , VAR_501 , ( TYPE_86 ) VAR_502 , VAR_503 -> VAR_504 ) ; if ( VAR_505 == VAR_506 ) break ; } } } else { if ( VAR_507 == 0 ) VAR_508 = 256 ; if ( METHOD_86 ( VAR_509 , VAR_510 ) == VAR_511 ) METHOD_87 ( VAR_512 , "MemoryAllocationFailed" ) ; VAR_513 = VAR_514 ; if ( VAR_515 == 1 ) for ( VAR_516 = 0 ; VAR_517 < ( TYPE_87 ) VAR_518 -> VAR_519 ; VAR_520 ++ ) { VAR_521 -> VAR_522 [ VAR_523 ] . VAR_524 = METHOD_88 ( ( unsigned TYPE_88 ) VAR_525 ) ; VAR_526 -> VAR_527 [ VAR_528 ] . VAR_529 = METHOD_89 ( ( unsigned TYPE_89 ) VAR_530 ) ; VAR_531 -> VAR_532 [ VAR_533 ] . VAR_534 = METHOD_90 ( ( unsigned TYPE_90 ) VAR_535 ) ; } else if ( VAR_536 > 1 ) for ( VAR_537 = 0 ; VAR_538 < ( TYPE_91 ) VAR_539 -> VAR_540 ; VAR_541 ++ ) { VAR_542 -> VAR_543 [ VAR_544 ] . VAR_545 = METHOD_91 ( * VAR_546 ) ; VAR_547 -> VAR_548 [ VAR_549 ] . VAR_550 = METHOD_92 ( * ( VAR_551 + VAR_552 ) ) ; VAR_553 -> VAR_554 [ VAR_555 ] . VAR_556 = METHOD_93 ( * ( VAR_557 + VAR_558 * 2 ) ) ; VAR_559 ++ ; } VAR_560 = VAR_561 ; if ( VAR_562 -> VAR_563 == VAR_564 ) { for ( VAR_565 = 0 ; VAR_566 < ( TYPE_92 ) VAR_567 -> VAR_568 ; VAR_569 ++ ) { VAR_570 = METHOD_94 ( VAR_571 , 0 , VAR_572 , VAR_573 -> VAR_574 , 1 , VAR_575 ) ; if ( VAR_576 == ( TYPE_93 * ) VAR_577 ) break ; VAR_578 = METHOD_95 ( VAR_579 ) ; for ( VAR_580 = 0 ; VAR_581 < ( TYPE_94 ) VAR_582 -> VAR_583 ; VAR_584 ++ ) METHOD_96 ( VAR_585 + VAR_586 , * VAR_587 ++ ) ; if ( METHOD_97 ( VAR_588 , VAR_589 ) == VAR_590 ) break ; if ( VAR_591 -> VAR_592 == ( TYPE_95 * ) VAR_593 ) { VAR_594 = METHOD_98 ( VAR_595 , VAR_596 , ( TYPE_96 ) VAR_597 , VAR_598 -> VAR_599 ) ; if ( VAR_600 == VAR_601 ) break ; } } ( TYPE_97 ) METHOD_99 ( VAR_602 ) ; } else { for ( VAR_603 = 0 ; VAR_604 < ( TYPE_98 ) VAR_605 -> VAR_606 ; VAR_607 ++ ) { VAR_608 = METHOD_100 ( VAR_609 , 0 , VAR_610 , VAR_611 -> VAR_612 , 1 , VAR_613 ) ; if ( VAR_614 == ( TYPE_99 * ) VAR_615 ) break ; for ( VAR_616 = 0 ; VAR_617 < ( TYPE_100 ) VAR_618 -> VAR_619 ; VAR_620 ++ ) { if ( METHOD_101 ( VAR_621 , * VAR_622 ++ , & VAR_623 , VAR_624 ) == VAR_625 ) break ; METHOD_102 ( VAR_626 , VAR_627 -> VAR_628 [ ( TYPE_101 ) VAR_629 ] . VAR_630 ) ; if ( METHOD_103 ( VAR_631 , * VAR_632 ++ , & VAR_633 , VAR_634 ) == VAR_635 ) break ; METHOD_104 ( VAR_636 , VAR_637 -> VAR_638 [ ( TYPE_102 ) VAR_639 ] . VAR_640 ) ; if ( METHOD_105 ( VAR_641 , * VAR_642 ++ , & VAR_643 , VAR_644 ) == VAR_645 ) break ; METHOD_106 ( VAR_646 , VAR_647 -> VAR_648 [ ( TYPE_103 ) VAR_649 ] . VAR_650 ) ; METHOD_107 ( VAR_651 , METHOD_108 ( * VAR_652 ++ ) ) ; VAR_653 ++ ; } if ( VAR_654 < ( TYPE_104 ) VAR_655 -> VAR_656 ) break ; if ( METHOD_109 ( VAR_657 , VAR_658 ) == VAR_659 ) break ; if ( VAR_660 -> VAR_661 == ( TYPE_105 * ) VAR_662 ) { VAR_663 = METHOD_110 ( VAR_664 , VAR_665 , ( TYPE_106 ) VAR_666 , VAR_667 -> VAR_668 ) ; if ( VAR_669 == VAR_670 ) break ; } } VAR_671 -> VAR_672 = ( TYPE_107 * ) METHOD_111 ( VAR_673 -> VAR_674 ) ; VAR_675 -> VAR_676 = VAR_677 ; VAR_678 -> VAR_679 = 0 ; } } if ( VAR_680 != 0 ) VAR_681 = ( unsigned TYPE_108 * ) METHOD_112 ( VAR_682 ) ; VAR_683 = METHOD_113 ( VAR_684 ) ; if ( METHOD_114 ( VAR_685 ) != VAR_686 ) { METHOD_115 ( VAR_687 , VAR_688 , "UnexpectedEndOfFile" , VAR_689 -> VAR_690 ) ; break ; } if ( VAR_691 -> VAR_692 != 0 ) if ( VAR_693 -> VAR_694 >= ( VAR_695 -> VAR_696 + VAR_697 -> VAR_698 - 1 ) ) break ; ( TYPE_109 ) METHOD_116 ( VAR_699 ) ; VAR_700 = METHOD_117 ( VAR_701 , 2 , ( unsigned TYPE_110 * ) VAR_702 ) ; if ( ( VAR_703 != 0 ) && ( METHOD_118 ( VAR_704 , "\\122\\314" , 2 ) == 0 ) ) { METHOD_119 ( VAR_705 , VAR_706 ) ; if ( METHOD_120 ( VAR_707 ) == ( TYPE_111 * ) VAR_708 ) { VAR_709 = METHOD_121 ( VAR_710 ) ; return ( ( TYPE_112 * ) VAR_711 ) ; } VAR_712 = METHOD_122 ( VAR_713 ) ; VAR_714 = METHOD_123 ( VAR_715 , VAR_716 , METHOD_124 ( VAR_717 ) , METHOD_125 ( VAR_718 ) ) ; if ( VAR_719 == VAR_720 ) break ; } } while ( ( VAR_721 != 0 ) && ( METHOD_126 ( VAR_722 , "\\122\\314" , 2 ) == 0 ) ) ; ( TYPE_113 ) METHOD_127 ( VAR_723 ) ; return ( METHOD_128 ( VAR_724 ) ) ; }
static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 ; struct STRUCT_OR_UNION_6 * VAR_5 ; struct STRUCT_OR_UNION_7 * VAR_6 ; struct STRUCT_OR_UNION_8 * VAR_7 ; TYPE_2 VAR_8 ; if ( ( VAR_9 = STRUCT_OR_UNION_9 -> VAR_10 -> STRUCT_OR_UNION_10 [ VAR_11 ] ) == VAR_12 ) return VAR_13 ; VAR_14 = & VAR_15 -> VAR_16 ; VAR_17 = & VAR_18 -> VAR_19 ; VAR_20 = & VAR_21 -> VAR_22 ; VAR_23 = ( VAR_24 == VAR_25 ) ? STRUCT_OR_UNION_11 -> VAR_26 -> VAR_27 : STRUCT_OR_UNION_12 -> VAR_28 -> VAR_29 ; if ( ( VAR_30 = METHOD_1 ( VAR_31 , VAR_32 -> VAR_33 , VAR_34 -> VAR_35 ) ) != 0 ) return VAR_36 ; if ( ( VAR_37 = METHOD_2 ( ) ) == VAR_38 ) return VAR_39 ; if ( ( VAR_40 = METHOD_3 ( VAR_41 , VAR_42 -> VAR_43 ) ) != 0 || ( VAR_44 = METHOD_4 ( VAR_45 , & VAR_46 -> VAR_47 , sizeof ( VAR_48 -> VAR_49 ) ) ) != 0 || ( VAR_50 = METHOD_5 ( VAR_51 , VAR_52 -> VAR_53 ) ) != 0 || ( VAR_54 = METHOD_6 ( VAR_55 , VAR_56 -> VAR_57 ) ) != 0 || ( VAR_58 = METHOD_7 ( VAR_59 , VAR_60 -> VAR_61 , VAR_62 -> VAR_63 ) ) != 0 || ( VAR_64 = METHOD_8 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 ) ) != 0 ) goto VAR_70 ; if ( METHOD_9 ( VAR_71 -> VAR_72 ) == 0 ) { if ( ( VAR_73 = METHOD_10 ( VAR_74 , VAR_75 -> VAR_76 ) ) != 0 || ( VAR_77 = METHOD_11 ( VAR_78 , VAR_79 -> VAR_80 ) ) != 0 || ( VAR_81 = METHOD_12 ( VAR_82 , VAR_83 -> VAR_84 , VAR_85 -> VAR_86 ) ) != 0 ) goto VAR_87 ; } if ( ( VAR_88 = METHOD_13 ( VAR_89 , VAR_90 -> VAR_91 ) ) != 0 ||  ( VAR_92 = METHOD_14 ( VAR_93 , VAR_94 -> VAR_95 ) ) != 0 ||  ( VAR_96 = METHOD_15 ( VAR_97 , VAR_98 -> VAR_99 ) ) != 0 ) goto VAR_100 ; VAR_101 = METHOD_16 ( VAR_102 , VAR_103 ) ; VAR_104 : METHOD_17 ( VAR_105 ) ; return VAR_106 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 * VAR_5 , * VAR_6 , * VAR_7 ; VAR_8 = VAR_9 -> VAR_10 ; VAR_11 -> VAR_12 = METHOD_1 ( VAR_13 -> VAR_14 ) ; for ( VAR_15 = METHOD_2 ( METHOD_3 ( VAR_16 ) , "\\t" , & VAR_17 ) ; VAR_18 ; VAR_19 = METHOD_4 ( 0 , "\\t" , & VAR_20 ) ) {  VAR_21 = METHOD_5 ( VAR_22 , "=\\t," , & VAR_23 ) ;  VAR_24 = strim ( VAR_25 , "\\"\'" , MPR_TRIM_BOTH ) ; if ( smatch ( VAR_26 , "content" ) ) { httpSetTraceContentSize ( VAR_27 -> VAR_28 , ( ssize ) getnum ( VAR_29 ) ) ; } else { httpSetTraceEventLevel ( VAR_30 -> VAR_31 , VAR_32 , atoi ( VAR_33 ) ) ; } } return 0 ; }
static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 * * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 VAR_5 = 0 ; while ( ( VAR_6 = * VAR_7 ) != VAR_8 ) { VAR_9 ++ ; METHOD_1 ( ! METHOD_2 ( VAR_10 ) ) ; if ( METHOD_3 ( VAR_11 ) && VAR_12 -> VAR_13 != VAR_14 ) VAR_15 = & VAR_16 -> VAR_17 ; else { VAR_18 * VAR_19 ;  * VAR_20 = VAR_21 -> VAR_22 ;  VAR_23 -> VAR_24 = VAR_25 ; for ( VAR_26 = VAR_27 -> VAR_28 ; VAR_29 != VAR_30 ; VAR_31 = VAR_32 -> VAR_33 . VAR_34 . VAR_35 ) {  VAR_36 ++ ;  if ( ! METHOD_4 ( VAR_37 ) ) METHOD_5 ( VAR_38 , VAR_39 -> VAR_40 ) ; } } } return VAR_41 ; }
static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_0 * VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 ) ; struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 -> VAR_10 ; VAR_11 * VAR_12 ; const TYPE_5 * VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , VAR_17 -> VAR_18 ) ; VAR_19 = VAR_20 ? METHOD_3 ( VAR_21 ) : VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = METHOD_4 ( VAR_26 , ( TYPE_6 * ) VAR_27 , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ;  VAR_32 -> VAR_33 -> VAR_34 = VAR_35 ;  VAR_36 -> VAR_37 -> VAR_38 = VAR_39 ; VAR_40 -> VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 -> VAR_50 = VAR_51 ; return VAR_52 ; }
TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) return VAR_7 ; if ( ! METHOD_1 ( VAR_8 ) ) return VAR_9 ; if ( VAR_10 -> VAR_11 -> VAR_12 != VAR_13 ) return VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; VAR_18 = ( TYPE_3 * ) VAR_19 -> VAR_20 ; if ( VAR_21 -> VAR_22 == VAR_23 ) VAR_24 -> VAR_25 = METHOD_2 ( VAR_26 , VAR_27 , VAR_28 ) ; if ( METHOD_3 ( VAR_29 -> VAR_30 ) < 0 ) { if ( ! VAR_31 ) VAR_32 = VAR_33 ; METHOD_4 ( VAR_34 , "Authenticationfailure,checkcredentials.\\n" "Ifcredentialsarevalid,theNTLMSSPimplementationmaybetoblame.\\n" ) ; METHOD_5 ( VAR_35 -> VAR_36 ) ;  return VAR_37 ;  } METHOD_6 ( VAR_38 -> VAR_39 ) ; return VAR_40 ; }
