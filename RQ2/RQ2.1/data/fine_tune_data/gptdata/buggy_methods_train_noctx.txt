<S2SV_StartBug> r1 . event = SNDRV_TIMER_EVENT_RESOLUTION ; <S2SV_EndBug>
<S2SV_StartBug> ret = block_write_begin ( file , mapping , pos , len , flags , pagep , fsdata , <S2SV_EndBug> <S2SV_StartBug> ext4_get_block ) ; <S2SV_EndBug>
<S2SV_StartBug> int16_t vp9_ac_quant ( int qindex , int delta ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> add_mibfile ( const char * tmpstr , const char * d_name , FILE * ip ) <S2SV_EndBug> <S2SV_StartBug> if ( ip ) <S2SV_EndBug>
<S2SV_StartBug> if ( wp -> listening_socket != STDIN_FILENO ) { <S2SV_EndBug>
<S2SV_StartBug> int i , retval ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> assert ( c != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> rbytes >= c -> rsize ) { <S2SV_EndBug>
<S2SV_StartBug> Rd_WP_DWORD ( image , & Rec . RecordLength ) ; <S2SV_EndBug>
<S2SV_StartBug> int len , err = - ENOBUFS ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( nlk -> cb_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> module_put ( cb -> module ) ; <S2SV_EndBug> <S2SV_StartBug> consume_skb ( cb -> skb ) ; <S2SV_EndBug>
<S2SV_StartBug> s_alDriver = Cvar_Get ( "s_alDriver" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( "s_alDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( envs [ h_env -> envc ] . env == HTML_DL_COMPACT ) { <S2SV_EndBug>
<S2SV_StartBug> if ( * p ) { <S2SV_EndBug> <S2SV_StartBug> * q = 0 ; <S2SV_EndBug> <S2SV_StartBug> cmd = p + 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = \'"\' ; <S2SV_EndBug>
<S2SV_StartBug> return AUTH_FOUND ; <S2SV_EndBug>
<S2SV_StartBug> return parser_flags ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s]" , <S2SV_EndBug>
<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug>
<S2SV_StartBug> blockcnt = ( ( len + pos ) + blocksize - 1 ) >> <S2SV_EndBug>
<S2SV_StartBug> int expected_count = 1 + extra_count ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> radix_tree_replace_slot ( pslot , newpage ) ; <S2SV_EndBug> <S2SV_StartBug> __dec_zone_page_state ( page , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> __inc_zone_page_state ( newpage , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PageSwapCache ( page ) && PageSwapBacked ( page ) ) { <S2SV_EndBug>
<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT32 ( s , scopeCount ) ; <S2SV_EndBug>
<S2SV_StartBug> count = be32_to_cpu ( aclp -> acl_cnt ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef KEY_DEBUGGING <S2SV_EndBug>
<S2SV_StartBug> if ( ! send && ! SSL_USE_ETM ( ssl ) && <S2SV_EndBug> <S2SV_StartBug> if ( ! send && ! SSL_USE_ETM ( ssl ) && FIPS_mode ( ) ) <S2SV_EndBug>
<S2SV_StartBug> mark_files_ro ( sb ) ; <S2SV_EndBug>
<S2SV_StartBug> g_object_unref ( subdir ) ; <S2SV_EndBug> <S2SV_StartBug> dir = GSF_INFILE_TAR ( subdir ) ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> if ( lstat ( filename , & st ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> file = fopen ( filename , "a" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int buflen = bin -> buf -> length ; <S2SV_EndBug>
<S2SV_StartBug> gdFree ( tmp_im ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) <S2SV_EndBug> <S2SV_StartBug> ch = ( sctp_chunkhdr_t * ) ch_end ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> l2cap_send_cmd ( conn , cmd -> ident , L2CAP_CONF_RSP , len , rsp ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct inode * inode , int regard_xa ) <S2SV_EndBug> <S2SV_StartBug> int cnt , sig ; <S2SV_EndBug> <S2SV_StartBug> if ( regard_xa ) { <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent = <S2SV_EndBug> <S2SV_StartBug> isofs_iget ( inode -> i_sb , <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent , <S2SV_EndBug>
<S2SV_StartBug> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree" ) ; <S2SV_EndBug> <S2SV_StartBug> req = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( req != NULL ) <S2SV_EndBug>
<S2SV_StartBug> int res ; <S2SV_EndBug> <S2SV_StartBug> const void * data ; <S2SV_EndBug> <S2SV_StartBug> u_int32_t vendor ; <S2SV_EndBug> <S2SV_StartBug> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , "s" , & data , & len ) == FAILURE ) { <S2SV_EndBug> <S2SV_StartBug> res = rad_get_vendor_attr ( & vendor , & data , ( size_t * ) & len ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_long ( return_value , "attr" , res ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_stringl ( return_value , "data" , ( char * ) data , len , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! encoding && c -> palette_size && c -> bpp <= 8 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( ",<S2SV_blank>\\t" , param -> value [ i + n ] ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( par -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return num ; <S2SV_EndBug>
<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug>
<S2SV_StartBug> assert ( c != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> rbytes >= c -> rsize ) { <S2SV_EndBug>
<S2SV_StartBug> draw_info -> geometry = AcquireString ( geometry ) ; <S2SV_EndBug>
<S2SV_StartBug> __be32 * pdata = ( __be32 * ) data ; <S2SV_EndBug>
<S2SV_StartBug> if ( dctx -> bytes ) { <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t len ; <S2SV_EndBug> <S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> len = r -> sector_count * 512 ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( "Write<S2SV_blank>complete<S2SV_blank>tag=0x%x<S2SV_blank>more=%d\\n" , r -> req . tag , len ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_req_data ( & r -> req , len ) ; <S2SV_EndBug>
<S2SV_StartBug> static MagickPixelPacket * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( MagickPixelPacket * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> GetMagickPixelPacket ( image , & pixels [ i ] [ j ] ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( oci -> ref_frame_sign_bias , 0 , sizeof ( oci -> ref_frame_sign_bias ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ext_dp -> icmp_length ) { <S2SV_EndBug> <S2SV_StartBug> vec [ 0 ] . ptr = ( const uint8_t * ) ( const void * ) & ext_dp -> icmp_ext_version_res ; <S2SV_EndBug> <S2SV_StartBug> hlen -= 4 ; <S2SV_EndBug>
<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & value -> tv_nsec ) ; <S2SV_EndBug>
<S2SV_StartBug> duplexMode = enc624j600ReadReg ( interface , ENC624J600_REG_ESTAT ) & ESTAT_PHYDPX ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MACON2 , MACON2_DEFER | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MABBIPG , 0x15 ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MACON2 , MACON2_DEFER | <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MABBIPG , 0x12 ) ; <S2SV_EndBug>
<S2SV_StartBug> adts_dmx_check_pid ( filter , ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_rc_update_rate_correction_factors ( VP9_COMP * cpi , int damp_var ) { <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> rate_correction_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( projected_size_based_on_q > 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( isparam ( "value" ) && * getparam ( "value" ) ) <S2SV_EndBug> <S2SV_StartBug> rsputs ( loc ( getparam ( "value" ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( k = 0 ; k < bufsize - 1 ; k ++ ) <S2SV_EndBug> <S2SV_StartBug> { if ( psf -> headindex < psf -> headend ) <S2SV_EndBug> <S2SV_StartBug> { psf -> headend += psf_fread ( psf -> header + psf -> headend , 1 , 1 , psf ) ; <S2SV_EndBug> <S2SV_StartBug> ptr [ k ] = psf -> header [ psf -> headindex ] ; <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , delim ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug>
<S2SV_StartBug> int jas_matrix_resize ( jas_matrix_t * matrix , int numrows , int numcols ) <S2SV_EndBug> <S2SV_StartBug> int size ; <S2SV_EndBug>
<S2SV_StartBug> if ( info -> stagemasks [ ( int ) partword [ j ] [ i ] ] & ( 1 << s ) ) { <S2SV_EndBug>
<S2SV_StartBug> const struct oe_sockaddr * src_addr , <S2SV_EndBug>
<S2SV_StartBug> err = ops -> cee_peer_getpg ( netdev , & pg ) ; <S2SV_EndBug> <S2SV_StartBug> struct cee_pfc pfc ; <S2SV_EndBug>
<S2SV_StartBug> if ( vcpu -> mmio_cur_fragment == vcpu -> mmio_nr_fragments ) { <S2SV_EndBug>
<S2SV_StartBug> ret = get_tag ( * der , len , tag_out , & contents , & clen , & remainder , & rlen ) ; <S2SV_EndBug>
<S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug>
<S2SV_StartBug> unsigned char buffer [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> HANDLE Token ; <S2SV_EndBug> <S2SV_StartBug> if ( LogonUser ( username , "." , password , LOGON32_LOGON_NETWORK , LOGON32_PROVIDER_DEFAULT , & Token ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> pcap_fmt_errmsg_for_win32_err ( errbuf , PCAP_ERRBUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> GetLastError ( ) , "LogonUser()<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ImpersonateLoggedOnUser ( Token ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; <S2SV_EndBug> <S2SV_StartBug> crypt_password = crypt ( password , user_password ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; <S2SV_EndBug> <S2SV_StartBug> pcap_fmt_errmsg_for_errno ( errbuf , PCAP_ERRBUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> errno , "setuid" ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> _Unpickler_MemoGet ( UnpicklerObject * self , Py_ssize_t idx ) <S2SV_EndBug> <S2SV_StartBug> if ( idx < 0 || idx >= self -> memo_size ) <S2SV_EndBug>
<S2SV_StartBug> sas_port_delete ( port -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> ast_for_with_stmt ( struct compiling * c , const node * n , int is_async ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return AsyncWith ( items , body , type_comment , LINENO ( n ) , n -> n_col_offset , c -> c_arena ) ; <S2SV_EndBug>
<S2SV_StartBug> struct request * rq = tags -> rqs [ tag ] ; <S2SV_EndBug> <S2SV_StartBug> struct blk_flush_queue * fq = blk_get_flush_queue ( rq -> q , rq -> mq_ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( f -> map & ( 1 << rec ) ) { <S2SV_EndBug>
<S2SV_StartBug> goto retry_rebind ; <S2SV_EndBug>
<S2SV_StartBug> if ( request -> ssids [ i ] . ssid_len > <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( iter > CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> if ( iter < CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> doi_def -> tags [ iter ] = CIPSO_V4_TAG_INVALID ; <S2SV_EndBug>
<S2SV_StartBug> int is_async ; <S2SV_EndBug> <S2SV_StartBug> if ( TYPE ( CHILD ( n , 0 ) ) == ASYNC ) { <S2SV_EndBug> <S2SV_StartBug> if ( NCH ( n ) == ( 5 + is_async ) ) { <S2SV_EndBug> <S2SV_StartBug> n = CHILD ( n , 4 + is_async ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>n<S2SV_blank>len=%d" , ntohs ( e . len ) - 4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 2 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( 1 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , ( const u_char * ) ( const uint8_t * ) ( ext + 1 ) , ep ) ) <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + ntohs ( e . len ) ; <S2SV_EndBug>
<S2SV_StartBug> futex_wait_queue_me ( hb , & q , to ) ; <S2SV_EndBug>
<S2SV_StartBug> last_source = source_mnt ; <S2SV_EndBug>
<S2SV_StartBug> struct dw2102_state * state = d -> priv ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x51 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 * gb_cur , * version_tlv , version , version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += lto_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += wks_length ; <S2SV_EndBug> <S2SV_StartBug> & miux_length ) ; <S2SV_EndBug>
<S2SV_StartBug> * state = CCS_VALUE ; <S2SV_EndBug>
<S2SV_StartBug> int pkt_len , pktnum , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , "LEN=%9d" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> phdr -> rec_type = REC_TYPE_PACKET ; <S2SV_EndBug> <S2SV_StartBug> ws_buffer_assure_space ( buf , TOSHIBA_MAX_PACKET_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> void * p = au -> reply_buf ; <S2SV_EndBug> <S2SV_StartBug> ret = ceph_x_decrypt ( & th -> session_key , & p , end , & reply , sizeof ( reply ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( length > 0 ) <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p , length , length ) ; <S2SV_EndBug>
<S2SV_StartBug> atomic_inc ( & ( ( struct bpf_prog * ) raw ) -> aux -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( raw , true ) ; <S2SV_EndBug>
<S2SV_StartBug> static void predict_and_reconstruct_intra_block ( int plane , int block , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , void * arg ) { <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * const mi = xd -> mi [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE mode = ( plane == 0 ) ? get_y_mode ( mi , block ) <S2SV_EndBug> <S2SV_StartBug> txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & x , & y ) ; <S2SV_EndBug> <S2SV_StartBug> dst = & pd -> dst . buf [ 4 * y * pd -> dst . stride + 4 * x ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , block >> ( tx_size << 1 ) , <S2SV_EndBug> <S2SV_StartBug> if ( ! mi -> mbmi . skip ) { <S2SV_EndBug> <S2SV_StartBug> const int eob = vp9_decode_block_tokens ( cm , xd , plane , block , <S2SV_EndBug>
<S2SV_StartBug> impeg2d_next_code ( ps_dec , SEQUENCE_HEADER_CODE ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> cntsize ( in , & sumlen , & nnode ) ; <S2SV_EndBug>
<S2SV_StartBug> line = picture -> data [ plane ] + y * picture -> linesize [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> dst = line + x * pixelsize + compno * ! planar ; <S2SV_EndBug> <S2SV_StartBug> linel = ( uint16_t * ) picture -> data [ plane ] + y * ( picture -> linesize [ plane ] >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> dst = linel + ( x * pixelsize + compno * ! planar ) ; <S2SV_EndBug>
<S2SV_StartBug> void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , int status , const u8 * desc , <S2SV_EndBug> <S2SV_StartBug> int length , int offset , int total_size ) <S2SV_EndBug> <S2SV_StartBug> int copy_len ; <S2SV_EndBug> <S2SV_StartBug> int required_size = urb -> transfer_buffer_length ; <S2SV_EndBug>
<S2SV_StartBug> int len = OBJ_obj2txt ( obj_txt , sizeof ( obj_txt ) , obj , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> BIO_write ( bio , obj_txt , len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( idx >= ARRAY_SIZE ( hwsim_world_regdom_custom ) ) <S2SV_EndBug> <S2SV_StartBug> param . regd = hwsim_world_regdom_custom [ idx ] ; <S2SV_EndBug>
<S2SV_StartBug> BLOCK_SIZE bsize , int use_rd ) { <S2SV_EndBug> <S2SV_StartBug> ( mbmi -> mv [ 0 ] . as_int != 0 && <S2SV_EndBug> <S2SV_StartBug> cr -> projected_dist_sb > cr -> thresh_dist_sb ) || <S2SV_EndBug> <S2SV_StartBug> ! is_inter_block ( mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bsize < cr -> min_block_size || <S2SV_EndBug> <S2SV_StartBug> mbmi -> mv [ 0 ] . as_int != 0 || <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> int ntlm_read_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & sysex ) [ offs ] , & ( addr ) [ offs ] , hdr_size - offs ) ) <S2SV_EndBug> <S2SV_StartBug> if ( count < sysex . len ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret ) { <S2SV_EndBug> <S2SV_StartBug> uwq = list_first_entry ( & fork_event , <S2SV_EndBug> <S2SV_StartBug> userfaultfd_event_complete ( ctx , uwq ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug>
<S2SV_StartBug> static int decode_coefs ( VP9_COMMON * cm , const MACROBLOCKD * xd , PLANE_TYPE type , <S2SV_EndBug> <S2SV_StartBug> int16_t * dqcoeff , TX_SIZE tx_size , const int16_t * dq , <S2SV_EndBug> <S2SV_StartBug> vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob ( * coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * prob ; <S2SV_EndBug> <S2SV_StartBug> unsigned int ( * coef_counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES + 1 ] = <S2SV_EndBug> <S2SV_StartBug> unsigned int ( * eob_branch_count ) [ COEFF_CONTEXTS ] = <S2SV_EndBug> <S2SV_StartBug> uint8_t token_cache [ 32 * 32 ] ; <S2SV_EndBug> <S2SV_StartBug> int val ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read ( r , prob [ EOB_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ! vp9_read ( r , prob [ ZERO_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read ( r , prob [ ONE_CONTEXT_NODE ] ) ) { <S2SV_EndBug> <S2SV_StartBug> WRITE_COEF_CONTINUE ( 1 , ONE_TOKEN ) ; <S2SV_EndBug> <S2SV_StartBug> prob = vp9_pareto8_full [ prob [ PIVOT_NODE ] - 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void vp9_fht4x4_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct4x4_sse2 ( input , output , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> error_t mqttSnClientDisconnect ( MqttSnClientContext * context ) <S2SV_EndBug> <S2SV_StartBug> error = mqttSnClientSendDisconnect ( context , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> error = mqttSnClientSendDisconnect ( context , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug> <S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug>
<S2SV_StartBug> SET_NETDEV_DEV ( dev , dmdev ) ; <S2SV_EndBug>
<S2SV_StartBug> sd -> gspca_dev . usb_err = - EIO ; <S2SV_EndBug>
<S2SV_StartBug> num = port >= 0 ? port : 0 ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_irqrestore ( & client -> ports_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & client -> ports_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug>
<S2SV_StartBug> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> char aacFileName [ 255 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( audioFileName , optarg ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( adtsFileName , optarg ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> strcpy ( audioFileName , aacFileName ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> key_put ( ci -> ci_keyring_key ) ; <S2SV_EndBug>
<S2SV_StartBug> rv = zsocket_connect ( * sock , info -> description ) ; <S2SV_EndBug> <S2SV_StartBug> rv = zsocket_bind ( * sock , info -> description ) ; <S2SV_EndBug>
<S2SV_StartBug> fptr = ( struct frag_hdr * ) ( ( u8 * ) ipv6h + unfrag_ip6hlen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( fhdr -> frag_off & htons ( 0xFFF9 ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> client -> auth_end_offset = AUTH_END_INIT_OFFSET ; <S2SV_EndBug>
<S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug>
<S2SV_StartBug> key_pairs = palloc ( sizeof ( Pairs ) * key_count ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt = NULL ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len -= inet -> opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len += opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> opt = xchg ( & inet -> opt , opt ) ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_framing_cap_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( ! av_strcasecmp ( tag , "Content-Length" ) && s -> filesize == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; <S2SV_EndBug> <S2SV_StartBug> s -> icy_metaint = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> out_dqrele : <S2SV_EndBug>
<S2SV_StartBug> case 'c' : return getnum ( fmt , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int sz = getnum ( fmt , sizeof ( int ) ) ; <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> qcoeff , 0 , sizeof ( xd -> qcoeff ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 16 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>Config<S2SV_blank>Rev<S2SV_blank>%x" , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tptr < ( pptr + length ) ) { <S2SV_EndBug>
<S2SV_StartBug> ssize_t count ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "seq<S2SV_blank>0x%03x,<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>length<S2SV_blank>%u" , <S2SV_EndBug>
<S2SV_StartBug> if ( ! __archive_ppmd7_functions . Ppmd7_Alloc ( & rar -> ppmd7_context , <S2SV_EndBug>
<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & ins ) [ offs ] , addr + offs , sizeof ( ins ) - offs ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( dctx -> bytes ) { <S2SV_EndBug>
<S2SV_StartBug> if ( cgroup && ! fc_may_access ( fc , controller , cgroup , NULL , O_RDONLY ) ) { <S2SV_EndBug>
<S2SV_StartBug> len = INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> throttle_event . header . size , 1 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( svm_set_msr ( & svm -> vcpu , & msr ) ) { <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT16 ( licenseStream , os_minor ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbCompanyName ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbProductId ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT32 ( licenseStream , cbLicenseInfo ) ; <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> gossip_err ( "%s:<S2SV_blank>posix_acl_equiv_mode<S2SV_blank>err:<S2SV_blank>%d\\n" , <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug>
<S2SV_StartBug> return SECURE_ELEMENT_ERROR_NPE ; <S2SV_EndBug>
<S2SV_StartBug> if ( skb -> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug>
<S2SV_StartBug> while ( f != upto ) ; <S2SV_EndBug>
<S2SV_StartBug> pfd . events = POLLIN ; <S2SV_EndBug> <S2SV_StartBug> len = recv ( fd , kvp_recv_buffer , sizeof ( kvp_recv_buffer ) , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> syslog ( LOG_ERR , "recv<S2SV_blank>failed;<S2SV_blank>error:%d" , len ) ; <S2SV_EndBug>
<S2SV_StartBug> inode_init_once ( & ei -> vfs_inode ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pbi -> common . frame_to_show ) <S2SV_EndBug>
<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( max_packets , <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ReflectionMethodBuilder rmb ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> mb -> mhandle = reflection_methodbuilder_to_mono_method ( klass , & rmb , sig ) ; <S2SV_EndBug>
<S2SV_StartBug> double correction_factor ) { <S2SV_EndBug> <S2SV_StartBug> const double q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> int enumerator = frame_type == KEY_FRAME ? 3300000 : 2250000 ; <S2SV_EndBug> <S2SV_StartBug> return ( int ) ( 0.5 + ( enumerator * correction_factor / q ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "(ni:<S2SV_blank>ho=0x%04x<S2SV_blank>co=0x%04x)" , <S2SV_EndBug>
<S2SV_StartBug> mark_files_ro ( sb ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( s = mcs_recv ( & channel , is_fastpath , & fastpath_hdr ) ) != NULL ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> in_uint8s ( s , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> uint8 swapbyte ; <S2SV_EndBug>
<S2SV_StartBug> static void ip6_append_data_mtu ( int * mtu , <S2SV_EndBug> <S2SV_StartBug> struct rt6_info * rt ) <S2SV_EndBug> <S2SV_StartBug> * mtu = dst_mtu ( rt -> dst . path ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( & lfm -> lfl_y [ index ] , filter_level , w ) ; <S2SV_EndBug> <S2SV_StartBug> * int_4x4_y |= ( size_mask [ block_size ] & 0xffffffffffffffff ) << shift_y ; <S2SV_EndBug>
<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! vct_iscrlf ( hp -> rxbuf [ l ] ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! vct_iscrlf ( hp -> rxbuf [ l + 1 ] ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( trk -> vos_len == 0 && par -> extradata_size > 0 && <S2SV_EndBug>

<S2SV_StartBug> if ( strcmp ( ( const char * ) ( data1 + 2 ) , "\\\\MAILSLOT\\\\BROWSE" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( ( const char * ) ( data1 + 2 ) , "\\\\PIPE\\\\LANMAN" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( paramlen ) <S2SV_EndBug>
<S2SV_StartBug> void open_input_file ( struct VpxInputContext * input ) { <S2SV_EndBug> <S2SV_StartBug> input -> detect . buf_read = fread ( input -> detect . buf , 1 , 4 , input -> file ) ; <S2SV_EndBug> <S2SV_StartBug> input -> framerate . numerator = input -> y4m . fps_n ; <S2SV_EndBug> <S2SV_StartBug> input -> use_i420 = 0 ; <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> err = ops -> ieee_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_getmaxrate ( netdev , & maxrate ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_peer_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> case CFM_CHASSIS_ID_MAC_ADDRESS : <S2SV_EndBug> <S2SV_StartBug> hexdump |= cfm_network_addr_print ( ndo , tptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> tptr += cfm_tlv_len ; <S2SV_EndBug>
<S2SV_StartBug> void fadst4_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__sinpi_p03_p03 = _mm_set1_epi16 ( sinpi_3_9 ) ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> rc = target_xcopy_locate_se_dev_e4 ( xop -> dst_tid_wwn , <S2SV_EndBug> <S2SV_StartBug> & xop -> dst_dev ) ; <S2SV_EndBug> <S2SV_StartBug> rc = target_xcopy_locate_se_dev_e4 ( xop -> src_tid_wwn , <S2SV_EndBug> <S2SV_StartBug> & xop -> src_dev ) ; <S2SV_EndBug>
<S2SV_StartBug> void ipc_rcu_getref ( void * ptr ) <S2SV_EndBug> <S2SV_StartBug> container_of ( ptr , struct ipc_rcu_hdr , data ) -> refcount ++ ; <S2SV_EndBug>
<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug>
<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( max_packets , <S2SV_EndBug>
<S2SV_StartBug> size_t size ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 10 , ( "jpeg_start_decompress(%p)\\n" , & cinfo ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opts . max_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! jas_safe_size_mul ( cinfo . output_width , cinfo . output_height , <S2SV_EndBug> <S2SV_StartBug> if ( size > opts . max_size ) { <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( "image<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mutex_lock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> tread_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( IS_NOT_NULL ( Else ) ) { <S2SV_EndBug> <S2SV_StartBug> len += SIZE_OP_JUMP ; <S2SV_EndBug>
<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> int i , protocol ; <S2SV_EndBug> <S2SV_StartBug> switch ( protocol ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! h1 -> bInCollection ) { <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev -> dev , "skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_info ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , nfunc , line , & vaf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sock_owned_by_user ( sk ) ) { <S2SV_EndBug>
<S2SV_StartBug> Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct r_bin_dyldcache_obj_t * bin ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( bin = malloc ( sizeof ( struct r_bin_dyldcache_obj_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( bin , 0 , sizeof ( struct r_bin_dyldcache_obj_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_buf_set_bytes ( bin -> b , buf , size ) ) { <S2SV_EndBug>
<S2SV_StartBug> static unsigned short len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> static int shash_no_setkey ( struct crypto_shash * tfm , const u8 * key , <S2SV_EndBug>
<S2SV_StartBug> tile -> mi_row_start = get_tile_offset ( row , cm -> mi_rows , cm -> log2_tile_rows ) ; <S2SV_EndBug>
<S2SV_StartBug> static double get_rate_correction_factor ( const VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> return cpi -> rc . key_frame_rate_correction_factor ; <S2SV_EndBug> <S2SV_StartBug> ! cpi -> rc . is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) ) <S2SV_EndBug>
<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( tag == 0xFFFEE0DD ) <S2SV_EndBug>
<S2SV_StartBug> int val = 1 ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char query [ 255 ] , rows [ NAME_LEN ] , fields [ 16 ] ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( query , "SELECT<S2SV_blank>COUNT(*)<S2SV_blank>FROM<S2SV_blank>`%s`" , row [ 0 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> mlock_vma_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> if ( page == check_page ) <S2SV_EndBug> <S2SV_StartBug> ret = SWAP_MLOCK ; <S2SV_EndBug>
<S2SV_StartBug> if ( rs -> rs_bound_addr == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> int n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug>
<S2SV_StartBug> data = malloc ( blk_sz * n_blks ) ; <S2SV_EndBug>
<S2SV_StartBug> int vp8_denoiser_filter_sse2 ( YV12_BUFFER_CONFIG * mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> unsigned char * sig = signal -> thismb ; <S2SV_EndBug> <S2SV_StartBug> unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; <S2SV_EndBug> <S2SV_StartBug> __m128i acc_diff = _mm_setzero_si128 ( ) ; <S2SV_EndBug> <S2SV_StartBug> ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 7 : 6 ) ; <S2SV_EndBug> <S2SV_StartBug> union sum_union s ; <S2SV_EndBug> <S2SV_StartBug> s . v = acc_diff ; <S2SV_EndBug> <S2SV_StartBug> sum_diff = s . e [ 0 ] + s . e [ 1 ] + s . e [ 2 ] + s . e [ 3 ] + s . e [ 4 ] + s . e [ 5 ] <S2SV_EndBug> <S2SV_StartBug> if ( abs ( sum_diff ) > SUM_DIFF_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> signal -> thismb , sig_stride ) ; <S2SV_EndBug>
<S2SV_StartBug> r = vapic_enter ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vapic_exit ( vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned char type , void * * ptr ) <S2SV_EndBug> <S2SV_StartBug> if ( header -> bLength < 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( header -> bDescriptorType == type ) { <S2SV_EndBug>
<S2SV_StartBug> case DH6OPT_RECONF_MSG : <S2SV_EndBug>
<S2SV_StartBug> wait_event_interruptible_timeout ( sunkbd -> wait , sunkbd -> reset >= 0 , HZ ) ; <S2SV_EndBug> <S2SV_StartBug> serio_write ( sunkbd -> serio , SUNKBD_CMD_SETLED ) ; <S2SV_EndBug>
<S2SV_StartBug> MATLAB_KO : ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; <S2SV_EndBug>
<S2SV_StartBug> buffer_copy_buffer ( con -> physical . basedir , ds -> value ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int len ; <S2SV_EndBug> <S2SV_StartBug> fbdev = to_au1100fb_device ( fbi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( "none" , path , "tmpfs" , 0 , "size=100000,mode=755" ) ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( pMatch -> iCursor == pExpr -> iTable ) ; <S2SV_EndBug>
<S2SV_StartBug> const vp9_tree_index * tree ) { <S2SV_EndBug>
<S2SV_StartBug> # ifdef _WITH_VRRP_ <S2SV_EndBug>
<S2SV_StartBug> if ( conf . strip ) { <S2SV_EndBug>
<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = ff_dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug>
<S2SV_StartBug> slave -> master = master ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug>
<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & ins ) [ offs ] , addr + offs , sizeof ( ins ) - offs ) ) <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> int hours , minutes , seconds ; <S2SV_EndBug>
<S2SV_StartBug> # ifndef PGEN <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 74 && <S2SV_EndBug> <S2SV_StartBug> rdesc [ 61 ] == 0x05 && rdesc [ 62 ] == 0x08 && <S2SV_EndBug>
<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , mp4 -> metaoffsets [ index ] , SEEK_SET ) ; <S2SV_EndBug> <S2SV_StartBug> return MP4buffer ; <S2SV_EndBug>
<S2SV_StartBug> RefBuffer * ref_buf = NULL ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_bufs [ free_fb ] . ref_count -- ; <S2SV_EndBug> <S2SV_StartBug> ref_cnt_fb ( cm -> frame_bufs , ref_fb_ptr , free_fb ) ; <S2SV_EndBug> <S2SV_StartBug> ref_buf -> buf = & cm -> frame_bufs [ * ref_fb_ptr ] . buf ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static int write_skip ( const VP9_COMP * cpi , int segment_id , const MODE_INFO * mi , <S2SV_EndBug> <S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , skip , vp9_get_skip_prob ( & cpi -> common , xd ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ip_printts ( ndo , cp , option_len ) ; <S2SV_EndBug> <S2SV_StartBug> case IPOPT_RA : <S2SV_EndBug>
<S2SV_StartBug> pr_err ( "Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>" <S2SV_EndBug>
<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug>
<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ , 1 , 0 , <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN , 1 , 0 , <S2SV_EndBug>
<S2SV_StartBug> if ( env -> allow_ptr_leaks || BPF_SRC ( insn -> code ) == BPF_K ) <S2SV_EndBug> <S2SV_StartBug> if ( aux -> alu_state && <S2SV_EndBug> <S2SV_StartBug> return - EACCES ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( tmp , & name , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> offset += q -> buf_offset ; <S2SV_EndBug> <S2SV_StartBug> skb_add_rx_frag ( skb , skb_shinfo ( skb ) -> nr_frags , page , offset , len , <S2SV_EndBug> <S2SV_StartBug> q -> buf_size ) ; <S2SV_EndBug>
<S2SV_StartBug> int mutt_b64_decode ( char * out , const char * in ) <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | base64val ( digit4 ) ; <S2SV_EndBug>
<S2SV_StartBug> err = security_sb_remount ( sb , data ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> device = btrfs_find_device ( fs_info -> fs_devices , devid , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < planes ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( * name != '\\0' ) && ( * name != '#' ) ) <S2SV_EndBug>
<S2SV_StartBug> port -> exists = false ; <S2SV_EndBug> <S2SV_StartBug> port -> serio = NULL ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( opened & FILE_OPENED ) ) { <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( begin && isspace ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( isalpha ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( end && isalnum ( ( ut8 ) str [ * end ] ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( isdigit ( ( ut8 ) str [ * begin ] ) ) { <S2SV_EndBug>
<S2SV_StartBug> int contentlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> contentlen = atoi ( sb ) ; <S2SV_EndBug> <S2SV_StartBug> printstr ( & pp , "<form<S2SV_blank>method=\\"POST\\"<S2SV_blank>action=\\"/U\\"><textarea<S2SV_blank>cols=\\"80\\"<S2SV_blank>rows=\\"30\\"<S2SV_blank>name=\\"conffile\\">" ) ; <S2SV_EndBug> <S2SV_StartBug> int l = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! writable || fseek ( writable , 0 , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '+' , conf . timeouts [ STRING_S ] ) ) > 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf [ i ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! error ) { <S2SV_EndBug> <S2SV_StartBug> l += i ; <S2SV_EndBug>
<S2SV_StartBug> struct mlx5_ib_create_qp_resp resp ; <S2SV_EndBug>
<S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const nmv_context * nmvc = & cm -> fc . nmvc ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE mode = mbmi -> mode ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob pred_prob = vp9_get_pred_prob_seg_id ( seg , xd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , pred_flag , pred_prob ) ; <S2SV_EndBug> <S2SV_StartBug> skip = write_skip ( cpi , segment_id , mi , w ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , is_inter , vp9_get_intra_inter_prob ( cm , xd ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( skip || vp9_segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> write_selected_tx_size ( cpi , mbmi -> tx_size , bsize , w ) ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , mode , cm -> fc . y_mode_prob [ size_group_lookup [ bsize ] ] ) ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE b_mode = mi -> bmi [ idy * 2 + idx ] . as_mode ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , b_mode , cm -> fc . y_mode_prob [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> write_intra_mode ( w , mbmi -> uv_mode , cm -> fc . uv_mode_prob [ mode ] ) ; <S2SV_EndBug> <S2SV_StartBug> const int mode_ctx = mbmi -> mode_context [ mbmi -> ref_frame [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * const inter_probs = cm -> fc . inter_mode_probs [ mode_ctx ] ; <S2SV_EndBug> <S2SV_StartBug> write_ref_frames ( cpi , w ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ) { <S2SV_EndBug> <S2SV_StartBug> ++ cm -> counts . inter_mode [ mode_ctx ] [ INTER_OFFSET ( mode ) ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> fc . switchable_interp_prob [ ctx ] , <S2SV_EndBug> <S2SV_StartBug> & switchable_interp_encodings [ mbmi -> interp_filter ] ) ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE b_mode = mi -> bmi [ j ] . as_mode ; <S2SV_EndBug> <S2SV_StartBug> write_inter_mode ( w , b_mode , inter_probs ) ; <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ mbmi -> ref_frame [ ref ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ mbmi -> ref_frame [ ref ] ] [ 0 ] . as_mv , nmvc , <S2SV_EndBug>
<S2SV_StartBug> unsigned int len = sizeof ( * ctx ) + crypto_skcipher_reqsize ( private ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> iv = sock_kmalloc ( sk , crypto_skcipher_ivsize ( private ) , <S2SV_EndBug> <S2SV_StartBug> memset ( ctx -> iv , 0 , crypto_skcipher_ivsize ( private ) ) ; <S2SV_EndBug> <S2SV_StartBug> skcipher_request_set_tfm ( & ctx -> req , private ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( c != '\\n' ) && ( c != '\\0' ) ) <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , "%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g<S2SV_blank>%g" , <S2SV_EndBug> <S2SV_StartBug> & white_point [ 0 ] , & white_point [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ( void ) sscanf ( value , "%d<S2SV_blank>+X<S2SV_blank>%d" , & height , & width ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) height ; <S2SV_EndBug>
<S2SV_StartBug> return mutt_bcache_del ( bcache , id ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug> <S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug>
<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug>
<S2SV_StartBug> NOEXPORT char * parse_global_option ( CMD cmd , char * opt , char * arg ) { <S2SV_EndBug> <S2SV_StartBug> new_global_options . chroot_dir = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . chroot_dir ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . chroot_dir = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_NONE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_DEFLATE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . compression = COMP_ZLIB ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = EGD_SOCKET ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . egd_sock ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . egd_sock = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . fips = 0 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! strcasecmp ( arg , "yes" ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( arg , "no" ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . fips = 0 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> case CMD_PRINT_DEFAULTS : <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_NOTICE , "%-22s<S2SV_blank>=<S2SV_blank>yes|no<S2SV_blank>FIPS<S2SV_blank>140-2<S2SV_blank>mode" , <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . foreground = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_stderr = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_ACTIVE ] = load_icon_default ( ICON_ACTIVE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_ACTIVE ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_ERROR ] = load_icon_default ( ICON_ERROR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_ERROR ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . icon [ ICON_IDLE ] = load_icon_default ( ICON_IDLE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( new_global_options . icon [ ICON_IDLE ] = load_icon_file ( arg ) ) ) <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_APPEND ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_APPEND ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . log_file_mode = FILE_MODE_OVERWRITE ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . output_file ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_global_options . option . foreground && <S2SV_EndBug> <S2SV_StartBug> new_global_options . output_file && <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . pidfile ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_global_options . option . foreground && <S2SV_EndBug> <S2SV_StartBug> new_global_options . pidfile && <S2SV_EndBug> <S2SV_StartBug> new_global_options . random_bytes = RANDOM_BYTES ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . random_bytes = ( long ) strtol ( arg , & tmp_str , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = str_dup ( RANDOM_FILE ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = global_options . rand_file ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . rand_file = str_dup ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . rand_write = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . log_syslog = 0 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 1 ; <S2SV_EndBug> <S2SV_StartBug> new_global_options . option . taskbar = 0 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ssl_configure ( & new_global_options ) ) <S2SV_EndBug>
<S2SV_StartBug> len = strlen ( "/lock/lxc/" ) + strlen ( n ) + strlen ( p ) + 3 ; <S2SV_EndBug> <S2SV_StartBug> ret = snprintf ( dest , len , "%s/lock/lxc/%s" , rundir , p ) ; <S2SV_EndBug> <S2SV_StartBug> int l2 = 22 + strlen ( n ) + strlen ( p ) ; <S2SV_EndBug> <S2SV_StartBug> free ( rundir ) ; <S2SV_EndBug>
<S2SV_StartBug> void * data ) <S2SV_EndBug> <S2SV_StartBug> if ( ! se_dev -> dev_attrib . emulate_3pc ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> rc = memcmp ( & tmp_dev_wwn [ 0 ] , info -> dev_wwn , XCOPY_NAA_IEEE_REGEX_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc != 0 ) <S2SV_EndBug> <S2SV_StartBug> info -> found_dev = se_dev ; <S2SV_EndBug> <S2SV_StartBug> rc = target_depend_item ( & se_dev -> dev_group . cg_item ) ; <S2SV_EndBug>
<S2SV_StartBug> struct i2s_platform_data * i2s_pdata ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> adev -> acp . acp_res = kcalloc ( 5 , sizeof ( struct resource ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( adev -> acp . acp_cell ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> kfree ( adev -> acp . acp_res ) ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug> <S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> <S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int old_bin_num , bin_num ; <S2SV_EndBug> <S2SV_StartBug> bin_num = ZEND_MM_SMALL_SIZE_TO_BIN ( size ) ; <S2SV_EndBug> <S2SV_StartBug> return ptr ; <S2SV_EndBug>
<S2SV_StartBug> coerce_reg_to_32 ( dst_reg ) ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_32 ( & src_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> free ( p ) ; <S2SV_EndBug>
<S2SV_StartBug> struct oabi_flock64 user ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & user , ( struct oabi_flock64 __user * ) arg , <S2SV_EndBug> <S2SV_StartBug> ret = sys_fcntl64 ( fd , cmd , local_arg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> state -> frame [ 0 ] = kzalloc ( sizeof ( struct bpf_func_state ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>safe\\n" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> input = xmlNewEntityInputStream ( ctxt , entity ) ; <S2SV_EndBug>
<S2SV_StartBug> static void dist_block ( int plane , int block , TX_SIZE tx_size , <S2SV_EndBug> <S2SV_StartBug> struct rdcost_block_args * args ) { <S2SV_EndBug> <S2SV_StartBug> const int ss_txfrm_size = tx_size << 1 ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const coeff = BLOCK_OFFSET ( p -> coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> args -> dist = vp9_block_error ( coeff , dqcoeff , 16 << ss_txfrm_size , <S2SV_EndBug> <S2SV_StartBug> & this_sse ) >> shift ; <S2SV_EndBug> <S2SV_StartBug> ( 1 << ss_txfrm_size ) ) >> ( shift + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> args -> sse += p ; <S2SV_EndBug>
<S2SV_StartBug> "The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request:<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u4_cur_bs_mb_num = 0 ; <S2SV_EndBug>
<S2SV_StartBug> unix_inflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static int cipso_v4_delopt ( struct ip_options * * opt_ptr ) <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = * opt_ptr ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> srr || opt -> rr || opt -> ts || opt -> router_alert ) { <S2SV_EndBug> <S2SV_StartBug> cipso_off = opt -> cipso - sizeof ( struct iphdr ) ; <S2SV_EndBug> <S2SV_StartBug> cipso_ptr = & opt -> __data [ cipso_off ] ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> srr > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> rr > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> ts > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> if ( opt -> router_alert > opt -> cipso ) <S2SV_EndBug> <S2SV_StartBug> opt -> cipso = 0 ; <S2SV_EndBug> <S2SV_StartBug> opt -> optlen - cipso_off - cipso_len ) ; <S2SV_EndBug> <S2SV_StartBug> while ( iter < opt -> optlen ) <S2SV_EndBug> <S2SV_StartBug> iter += opt -> __data [ iter + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta = opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta -= opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> hdr_delta = opt -> optlen ; <S2SV_EndBug>
<S2SV_StartBug> char * command , * args = value ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( size == PAGE_SIZE ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> args [ size ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( name , "current" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( command , "permhat" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( name , "exec" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> aad . error = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> long timeo ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_write_prob_diff_update ( vp9_writer * w , vp9_prob newp , vp9_prob oldp ) { <S2SV_EndBug>
<S2SV_StartBug> static int getnum ( lua_State * L , const char * * fmt , int df ) { <S2SV_EndBug> <S2SV_StartBug> if ( a > ( INT_MAX / 10 ) || a * 10 > ( INT_MAX - ( * * fmt - '0' ) ) ) <S2SV_EndBug>
<S2SV_StartBug> usb_kill_urb ( mixer -> urb ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_err ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , nfunc , line , & vaf ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( ie -> ie_buffer + le16_to_cpu ( ie -> ie_length ) , <S2SV_EndBug>
<S2SV_StartBug> ssize_t ret = write ( uart_fd , data + transmitted_length , length ) ; <S2SV_EndBug>
<S2SV_StartBug> evtchn_to_irq [ row ] [ col ] = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> CALL_AND_WAIT ( error = bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "\\nStream<S2SV_blank>timebase<S2SV_blank>(--timebase):\\n" <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < get_vpx_encoder_count ( ) ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s\\n" , <S2SV_EndBug> <S2SV_StartBug> encoder -> name , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ( void ) memmove ( cp , cp + 2 , strlen ( file ) - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( buf = g_try_malloc ( size ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> read_lock ( & evtchn_rwlock ) ; <S2SV_EndBug> <S2SV_StartBug> xen_evtchn_handle_events ( cpu ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> length = 1 ; <S2SV_EndBug> <S2SV_StartBug> else if ( header -> flags & TCP_FLAG_FIN ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> struct user_struct * user = group -> inotify_data . user ; <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & user -> inotify_devs ) ; <S2SV_EndBug>
<S2SV_StartBug> atomic_set ( & new -> count , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! atomic_add_unless ( & ucounts -> count , 1 , INT_MAX ) ) <S2SV_EndBug>
<S2SV_StartBug> mark_desktop_file_trusted ( job , <S2SV_EndBug>
<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> case 0 : <S2SV_EndBug> <S2SV_StartBug> ( intmax_t ) rsrc -> uncompressed_size ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( mp , p , bytes_avail ) ; <S2SV_EndBug>
<S2SV_StartBug> jas_eprintf ( "warning:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( "warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(IHDR)\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> dec -> image ) ) ) { <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( "warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch<S2SV_blank>(BPCC)\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> char lowstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( event -> sigev_notify & SIGEV_THREAD_ID ) && <S2SV_EndBug> <S2SV_StartBug> ( ! ( rtn = find_task_by_vpid ( event -> sigev_notify_thread_id ) ) || <S2SV_EndBug> <S2SV_StartBug> ! same_thread_group ( rtn , current ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( ( event -> sigev_notify & ~ SIGEV_THREAD_ID ) != SIGEV_NONE ) && <S2SV_EndBug> <S2SV_StartBug> ( ( event -> sigev_signo <= 0 ) || ( event -> sigev_signo > SIGRTMAX ) ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( path ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> local_vec = ( struct rds_iovec __user * ) ( unsigned long ) args -> local_vec_addr ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( ybf , 0 , sizeof ( YV12_BUFFER_CONFIG ) ) ; <S2SV_EndBug>
<S2SV_StartBug> headerMergeLegacySigs ( h , sigh ) ; <S2SV_EndBug>
<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! head -> dev ) <S2SV_EndBug> <S2SV_StartBug> if ( qp -> user == IP_DEFRAG_CONNTRACK_IN && ! skb_dst ( head ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_size ( & src_reg , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( ac = 0 ; ac < IEEE80211_NUM_ACS ; ac ++ ) { <S2SV_EndBug> <S2SV_StartBug> ieee80211_add_pending_skbs_fn ( local , & pending , clear_sta_ps_flags , sta ) ; <S2SV_EndBug>
<S2SV_StartBug> cJSON_AddIntToObject ( test -> json_start , "tcp_mss" , test -> settings -> mss ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( test -> json_start , "tcp_mss_default" , opt ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = fscrypt_get_crypt_info ( dir ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( nh . nh_type == 1 && i == 0 ) <S2SV_EndBug>
<S2SV_StartBug> static void send ( node_t * node , node_t * child , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> send ( node -> parent , node , fout ) ; <S2SV_EndBug> <S2SV_StartBug> if ( child ) { <S2SV_EndBug>
<S2SV_StartBug> BT_DBG ( "sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p" , sock , sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , text , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! file || ( iovcnt && ! iov ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( iov , iovcnt , buf , buf_size ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> JSObjectRef globalobject ; <S2SV_EndBug> <S2SV_StartBug> globalobject = JSContextGetGlobalObject ( context ) ; <S2SV_EndBug> <S2SV_StartBug> JSObjectDeleteProperty ( context , globalobject , var_name , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 * directory_base ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( int ) obj -> hdr -> number_of_streams ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> entry = ( struct minidump_directory * ) ( directory_base + ( i * sizeof ( struct minidump_directory ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> r_bin_mdmp_init_directory_entry ( obj , entry ) ; <S2SV_EndBug>
<S2SV_StartBug> intra_pred_var = vp8_get_mb_ss ( x -> src_diff ) ; <S2SV_EndBug>
<S2SV_StartBug> ih264d_init_arch ( ps_dec ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pin_code == NULL ) <S2SV_EndBug>
<S2SV_StartBug> pathlen = get_node_path_locked ( node -> parent , buf , bufsize - namelen - 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> ! DoReadFile ( infile , & ds64_chunk , chunk_header . ckSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> bcount != chunk_header . ckSize ) { <S2SV_EndBug> <S2SV_StartBug> ! WavpackAddWrapper ( wpc , & ds64_chunk , chunk_header . ckSize ) ) { <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> unsigned long kflags = key -> flags ; <S2SV_EndBug> <S2SV_StartBug> if ( kflags & ( 1 << KEY_FLAG_NEGATIVE ) ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> result = ERR_PTR ( key -> reject_error ) ; <S2SV_EndBug>
<S2SV_StartBug> char b64 [ len + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> i_data = vlc_b64_decode_binary ( & p_orig , b64 ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p - 1 , length + 1 , ndo -> ndo_snapend - p + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> record = addStyleRecord ( shape ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sock * sk = sock -> sk ; <S2SV_EndBug> <S2SV_StartBug> if ( ! err ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> umount_tree ( mnt , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cpi -> common . frame_to_show ) <S2SV_EndBug>
<S2SV_StartBug> rq = blk_mq_tag_to_rq ( hctx -> tags , off + bit ) ; <S2SV_EndBug>
<S2SV_StartBug> MODE new_qc = MODE_BESTQUALITY ; <S2SV_EndBug> <S2SV_StartBug> if ( deadline ) { <S2SV_EndBug> <S2SV_StartBug> ( uint64_t ) ctx -> cfg . g_timebase . num / <S2SV_EndBug> <S2SV_StartBug> ( uint64_t ) ctx -> cfg . g_timebase . den ; <S2SV_EndBug> <S2SV_StartBug> new_qc = ( deadline > duration_us ) ? MODE_GOODQUALITY : MODE_REALTIME ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> oxcf . mode != new_qc ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> oxcf . mode = new_qc ; <S2SV_EndBug>
<S2SV_StartBug> static int get_minq_index ( double maxq , double x3 , double x2 , double x1 ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < QINDEX_RANGE ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( minqtarget <= vp9_convert_qindex_to_q ( i ) ) <S2SV_EndBug> <S2SV_StartBug> return i ; <S2SV_EndBug>
<S2SV_StartBug> bmp_info . number_colors = ReadBlobLSBLong ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * component , <S2SV_EndBug> <S2SV_StartBug> finish_object ( obj , path , component , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> show_object_with_name ( stdout , obj , path , component ) ; <S2SV_EndBug>
<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) <S2SV_EndBug> <S2SV_StartBug> ch = ( sctp_chunkhdr_t * ) ch_end ; <S2SV_EndBug>
<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_TLV , & kctl -> id ) ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%u<S2SV_blank>sectors)\\n" , fs -> fat_size , <S2SV_EndBug> <S2SV_StartBug> fs -> fat_size / lss ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( & u_ent . id , & uent -> id , sizeof ( u_ent . id ) ) ) <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxw , maxh , max , i ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug>
<S2SV_StartBug> sync . clock_rate = FST_RDL ( card , portConfig [ i ] . lineSpeed ) ; <S2SV_EndBug>
<S2SV_StartBug> int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_EndBug> <S2SV_StartBug> f -> colorspace = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( f -> version > 0 ) <S2SV_EndBug> <S2SV_StartBug> f -> avctx -> bits_per_raw_sample = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chroma_planes != f -> chroma_planes <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct fscrypt_info * ci = inode -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ci || <S2SV_EndBug>
<S2SV_StartBug> static void update_skip_probs ( VP9_COMMON * cm , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> vp9_cond_prob_diff_update ( w , & cm -> fc . skip_probs [ k ] , cm -> counts . skip [ k ] ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug>
<S2SV_StartBug> touch_atime ( & path ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! state ) <S2SV_EndBug> <S2SV_StartBug> screen = vterm_allocator_malloc ( vt , sizeof ( VTermScreen ) ) ; <S2SV_EndBug> <S2SV_StartBug> vterm_state_set_callbacks ( screen -> state , & state_cbs , screen ) ; <S2SV_EndBug>
<S2SV_StartBug> list_add ( & mnt -> mnt_list , & new_ns -> list ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & payload [ j ] , msg -> buf , msg -> len ) ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = sizeof ( * sipx ) ; <S2SV_EndBug>
<S2SV_StartBug> vhost_net_ubuf_put_and_wait ( oldubufs ) ; <S2SV_EndBug> <S2SV_StartBug> vhost_net_ubuf_put_and_wait ( ubufs ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( iov , iovcnt , buf , buf_size ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> str_free ( b64 ) ; <S2SV_EndBug>
<S2SV_StartBug> JAS_DBGLOG ( 101 , ( "jas_malloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%zu\\n" , size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> len = INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> err = ops -> ieee_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_getmaxrate ( netdev , & maxrate ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug> <S2SV_StartBug> err = ops -> ieee_peer_getets ( netdev , & ets ) ; <S2SV_EndBug> <S2SV_StartBug> struct ieee_pfc pfc ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> c -> req -> res = NULL ; <S2SV_EndBug>
<S2SV_StartBug> WORD32 ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> state == BODY_CHUNK_END ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> state = BODY_CHUNK ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits = sizeof ( long ) * 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( c == ';' || c == CR ) { <S2SV_EndBug> <S2SV_StartBug> else if ( c == LF ) { <S2SV_EndBug> <S2SV_StartBug> int xvalue = 0 ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits -= 4 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int net ; <S2SV_EndBug> <S2SV_StartBug> CLIENT * client ; <S2SV_EndBug> <S2SV_StartBug> if ( ( net = accept ( sock , ( struct sockaddr * ) & addrin , & addrinlen ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> client = negotiate ( net , NULL , servers , NEG_INIT | NEG_MODERN ) ; <S2SV_EndBug>
<S2SV_StartBug> ! CU_add_test ( pSuite , "session_removed_closed_stream" , <S2SV_EndBug>
<S2SV_StartBug> WORD32 slice_address ; <S2SV_EndBug> <S2SV_StartBug> slice_header_t * ps_slice_hdr_next ; <S2SV_EndBug> <S2SV_StartBug> ps_codec -> i4_slice_error = 1 ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> eprintf ( "Can\'t<S2SV_blank>find<S2SV_blank>debug<S2SV_blank>filename\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( msg -> msg_name && msg -> msg_namelen > 0 ) <S2SV_EndBug>
<S2SV_StartBug> virCheckDomainReturn ( dom , - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mount * n , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( p == dest_master || IS_MNT_MARKED ( p ) ) { <S2SV_EndBug>
<S2SV_StartBug> disconnect = ! IS_MNT_LOCKED_AND_LAZY ( p ) ; <S2SV_EndBug>
<S2SV_StartBug> pr_err ( "Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>" <S2SV_EndBug>
<S2SV_StartBug> static inline void jmp_rel ( struct x86_emulate_ctxt * ctxt , int rel ) <S2SV_EndBug> <S2SV_StartBug> assign_eip_near ( ctxt , ctxt -> _eip + rel ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ext4_extent * ex , newex , orig_ex ; <S2SV_EndBug> <S2SV_StartBug> struct ext4_extent * ex1 = NULL ; <S2SV_EndBug> <S2SV_StartBug> ext4_fsblk_t newblock ; <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> eh = path [ depth ] . p_hdr ; <S2SV_EndBug> <S2SV_StartBug> newblock = map -> m_lblk - ee_block + ext4_ext_pblock ( ex ) ; <S2SV_EndBug> <S2SV_StartBug> may_zeroout = ee_block + ee_len <= eof_block ; <S2SV_EndBug> <S2SV_StartBug> if ( ee_len <= 2 * EXT4_EXT_ZERO_LEN && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> <S2SV_StartBug> goto fix_extent_len ; <S2SV_EndBug> <S2SV_StartBug> return allocated ; <S2SV_EndBug> <S2SV_StartBug> if ( allocated <= EXT4_EXT_ZERO_LEN && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> ex -> ee_len = cpu_to_le16 ( ee_len - allocated ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_ext_store_pblock ( ex , ext4_ext_pblock ( & orig_ex ) ) ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug> <S2SV_StartBug> goto fix_extent_len ; <S2SV_EndBug> <S2SV_StartBug> } else if ( err ) <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , ex3 ) ; <S2SV_EndBug> <S2SV_StartBug> eh = path [ depth ] . p_hdr ; <S2SV_EndBug> <S2SV_StartBug> if ( err == - ENOSPC && may_zeroout ) { <S2SV_EndBug> <S2SV_StartBug> ext4_ext_show_leaf ( inode , path ) ; <S2SV_EndBug> <S2SV_StartBug> return err ? err : allocated ; <S2SV_EndBug>
<S2SV_StartBug> return parsetok ( tok , g , start , err_ret , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! prev_pkt [ channel_id ] . read ) { <S2SV_EndBug>
<S2SV_StartBug> static VALUE read_memory ( VALUE klass , VALUE content ) <S2SV_EndBug> <S2SV_StartBug> ) ; <S2SV_EndBug> <S2SV_StartBug> VALUE errors = rb_ary_new ( ) ; <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug>
<S2SV_StartBug> case '+' : <S2SV_EndBug> <S2SV_StartBug> else if ( * string == 0 ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( bss_cfg -> rates , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_ie ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( bss_cfg -> rates + rate_len , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug>
<S2SV_StartBug> pfkey_broadcast ( skb , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug>
<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIREGADR , MIREGADR_R8 | address ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MICMD , MICMD_MIIRD ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc624j600ReadReg ( interface , ENC624J600_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MICMD , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> return enc624j600ReadReg ( interface , ENC624J600_REG_MIRD ) ; <S2SV_EndBug>
<S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> static u32 ip6_proxy_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip6_proxy_idents_hashrnd , <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_proxy_idents_hashrnd , <S2SV_EndBug>
<S2SV_StartBug> int64_t time , offset ; <S2SV_EndBug>
<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOD , <S2SV_EndBug>
<S2SV_StartBug> perror ( "malloc<S2SV_blank>(ret)" ) ; <S2SV_EndBug> <S2SV_StartBug> image_infos = ( struct dyld_cache_image_info * ) ( bin -> b -> buf + bin -> hdr . startaddr ) ; <S2SV_EndBug> <S2SV_StartBug> dyld_vmbase = * ( ut64 * ) ( bin -> b -> buf + bin -> hdr . baseaddroff ) ; <S2SV_EndBug> <S2SV_StartBug> if ( image_infos [ idx ] . pathFileOffset > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> eprintf ( "corrupted<S2SV_blank>file\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> libname = ( char * ) ( bin -> b -> buf + image_infos [ idx ] . pathFileOffset ) ; <S2SV_EndBug>
<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug>
<S2SV_StartBug> int length ; <S2SV_EndBug> <S2SV_StartBug> STREAM s ; <S2SV_EndBug> <S2SV_StartBug> ber_parse_header ( s , MCS_CONNECT_RESPONSE , & length ) ; <S2SV_EndBug> <S2SV_StartBug> mcs_parse_domain_params ( s ) ; <S2SV_EndBug>
<S2SV_StartBug> e . ifindex = port -> dev -> ifindex ; <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned short ) ( buffer [ 0 ] << 8 ) ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug>
<S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT0 , hashTable [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT1 , hashTable [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT2 , hashTable [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT3 , hashTable [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT4 , hashTable [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT5 , hashTable [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT6 , hashTable [ 6 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_EHT7 , hashTable [ 7 ] ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT0<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT1<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT2<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT3<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT0<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT1<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT5 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT2<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT6 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>EHT3<S2SV_blank>=<S2SV_blank>%02" PRIX8 "\\r\\n" , enc28j60ReadReg ( interface , ENC28J60_REG_EHT7 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * sockaddr_url , * stratum_port , * tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_disable_client_reconnect ) { <S2SV_EndBug> <S2SV_StartBug> url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( address , "%s:%s" , url , port ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> subobj_len = EXTRACT_16BITS ( obj_tptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( subobj_len == 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug>
<S2SV_StartBug> if ( disk != NULL ) { <S2SV_EndBug> <S2SV_StartBug> const int blocksize = 512 ; <S2SV_EndBug> <S2SV_StartBug> if ( bio ) iob = bio ; <S2SV_EndBug> <S2SV_StartBug> ret = iob -> read_at ( iob -> io , delta + ( blocksize * sector ) , <S2SV_EndBug> <S2SV_StartBug> ( ut8 * ) buf , size * blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == - 1 ) <S2SV_EndBug> <S2SV_StartBug> } else eprintf ( "oops.<S2SV_blank>no<S2SV_blank>disk\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> sas_unregister_dev ( port , dev ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug>
<S2SV_StartBug> buffer = malloc ( ( uint64_t ) msg . sct . length + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res != 0 ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INCAPABLE ; <S2SV_EndBug>
<S2SV_StartBug> ACPI_FUNCTION_TRACE ( NsTerminate ) ; <S2SV_EndBug> <S2SV_StartBug> ACPI_OPERAND_OBJECT * Next ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uint_t i ; <S2SV_EndBug> <S2SV_StartBug> if ( ( segment -> dataOffset * 4 + length ) > TCP_MAX_HEADER_LENGTH ) <S2SV_EndBug> <S2SV_StartBug> i = segment -> dataOffset * 4 - sizeof ( TcpHeader ) ; <S2SV_EndBug> <S2SV_StartBug> segment -> options [ i ++ ] = TCP_OPTION_NOP ; <S2SV_EndBug> <S2SV_StartBug> option = ( TcpOption * ) ( segment -> options + i ) ; <S2SV_EndBug> <S2SV_StartBug> return NO_ERROR ; <S2SV_EndBug>
<S2SV_StartBug> return crypto_skcipher_setkey ( private , key , keylen ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( bt_terminal ( wp -> w_buffer ) ) <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> struct twopass_rc * const twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * start_position = twopass -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> double decay_accumulator = 1.0 ; <S2SV_EndBug> <S2SV_StartBug> rc -> this_key_frame_forced = rc -> next_key_frame_forced ; <S2SV_EndBug> <S2SV_StartBug> rc -> frames_till_gf_update_due = 0 ; <S2SV_EndBug> <S2SV_StartBug> kf_mod_err = calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> while ( twopass -> stats_in < twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> lookup_next_frame_stats ( twopass , & next_frame ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> if ( test_candidate_kf ( twopass , & last_frame , this_frame , & next_frame ) ) <S2SV_EndBug> <S2SV_StartBug> loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , & next_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( detect_transition_to_still ( twopass , i , cpi -> key_frame_frequency - i , <S2SV_EndBug> <S2SV_StartBug> if ( rc -> frames_to_key >= 2 * ( int ) cpi -> key_frame_frequency ) <S2SV_EndBug> <S2SV_StartBug> rc -> frames_to_key > ( int ) cpi -> key_frame_frequency ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err = 0 ; <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , & tmp_frame ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( twopass -> stats_in == twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> if ( twopass -> stats_in >= twopass -> stats_in_end ) { <S2SV_EndBug> <S2SV_StartBug> kf_group_err += calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> reset_fpf_position ( twopass , start_position ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rc -> frames_to_key ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( next_frame . pcnt_inter - next_frame . pcnt_motion ) < <S2SV_EndBug> <S2SV_StartBug> if ( i <= ( rc -> max_gf_interval * 2 ) ) { <S2SV_EndBug> <S2SV_StartBug> const double loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * r ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rc -> frames_to_key ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> twopass -> section_intra_rating = ( int ) ( sectionstats . intra_error / <S2SV_EndBug> <S2SV_StartBug> kf_boost = ( rc -> frames_to_key * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> allocation_chunks = ( ( rc -> frames_to_key - 1 ) * 10 ) + kf_boost ; <S2SV_EndBug> <S2SV_StartBug> allocation_chunks = ( ( rc -> frames_to_key - 1 ) * 100 ) + kf_boost ; <S2SV_EndBug> <S2SV_StartBug> twopass -> kf_group_bits -= twopass -> kf_bits ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct ip6t_ip6 * ipv6 ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ipv6 , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( i > ( sizeof ( outbuff ) - 20 ) ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( pow ( ( float ) r + 1 , dim ) > entries ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ( int ) floor ( pow ( ( float ) r , dim ) ) <= entries ) ; <S2SV_EndBug>
<S2SV_StartBug> sctp_add_cmd_sf ( commands , SCTP_CMD_NEW_ASOC , SCTP_ASOC ( new_asoc ) ) ; <S2SV_EndBug>
<S2SV_StartBug> nego_process_negotiation_response ( nego , s ) ; <S2SV_EndBug> <S2SV_StartBug> nego_process_negotiation_failure ( nego , s ) ; <S2SV_EndBug>
<S2SV_StartBug> int max_plane ) { <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * const p = x -> plane ; <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * const pd = x -> e_mbd . plane ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . coeff = ctx -> coeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . qcoeff = ctx -> qcoeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> pd [ i ] . dqcoeff = ctx -> dqcoeff_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> p [ i ] . eobs = ctx -> eobs_pbuf [ i ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> ctx -> qcoeff_pbuf [ i ] [ 0 ] = p [ i ] . qcoeff ; <S2SV_EndBug> <S2SV_StartBug> ctx -> dqcoeff_pbuf [ i ] [ 0 ] = pd [ i ] . dqcoeff ; <S2SV_EndBug> <S2SV_StartBug> ctx -> eobs_pbuf [ i ] [ 0 ] = p [ i ] . eobs ; <S2SV_EndBug>
<S2SV_StartBug> memset ( mp4 , 0 , sizeof ( mp4object ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len == 8 ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , lastsize - 8 - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> fread ( & qtsize , 1 , 8 , mp4 -> mediafp ) ; <S2SV_EndBug> <S2SV_StartBug> qttag == MAKEID ( 'u' , 'd' , 't' , 'a' ) ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 'a' , 'l' , 'i' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 'a' , 'l' , 'i' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 'b' , 'l' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 't' , 's' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 's' , 'c' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 's' , 'z' ) && <S2SV_EndBug> <S2SV_StartBug> qttag != MAKEID ( 's' , 't' , 'c' , 'o' ) && <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( temp != MAKEID ( 'a' , 'l' , 'i' , 's' ) ) <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metastsc = ( SampleToChunk * ) malloc ( num * 12 ) ; <S2SV_EndBug> <S2SV_StartBug> uint32_t total_stsc = num ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metastsc_count == 1 && mp4 -> metastsc [ 0 ] . samples == 1 ) <S2SV_EndBug> <S2SV_StartBug> mp4 -> metastsc_count = 0 ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metasizes = ( uint32_t * ) malloc ( num * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metastsc_count > 0 && num != mp4 -> metasize_count ) <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = mp4 -> metasize_count ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> metaoffsets = ( uint64_t * ) malloc ( mp4 -> metasize_count * 8 ) ; <S2SV_EndBug> <S2SV_StartBug> while ( num < mp4 -> metasize_count ) <S2SV_EndBug> <S2SV_StartBug> stco_pos ++ ; <S2SV_EndBug> <S2SV_StartBug> repeat = 1 ; <S2SV_EndBug> <S2SV_StartBug> repeat ++ ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = num ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( num * 8 <= qtsize - 8 - len ) <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> metaoffsets ) free ( mp4 -> metaoffsets ) ; <S2SV_EndBug> <S2SV_StartBug> mp4 -> indexcount = num ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 - len , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> LONGSEEK ( mp4 -> mediafp , qtsize - 8 , SEEK_CUR ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> line = picture -> data [ plane ] + y * picture -> linesize [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> dst = line + x * pixelsize + compno * ! planar ; <S2SV_EndBug> <S2SV_StartBug> linel = ( uint16_t * ) picture -> data [ plane ] + y * ( picture -> linesize [ plane ] >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> dst = linel + ( x * pixelsize + compno * ! planar ) ; <S2SV_EndBug>
<S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> <S2SV_StartBug> err = ext4_split_extent_at ( handle , inode , path , <S2SV_EndBug> <S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug>
<S2SV_StartBug> err = bnep_add_connection ( & ca , nsock ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( buf , mode ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> ps_parse_cur_slice ++ ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_cur_slice_num ++ ; <S2SV_EndBug>
<S2SV_StartBug> sqlite3VdbeChangeP5 ( v , OPFLAG_TYPEOFARG ) ; <S2SV_EndBug>
<S2SV_StartBug> ( Rec2 . RecordLength - 2 - 2 ) / 3 ) <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , source , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , source , & m , REG_NOTBOL ) ) <S2SV_EndBug>
<S2SV_StartBug> while ( 0xff == u4_bits ) <S2SV_EndBug> <S2SV_StartBug> while ( 0xff == u4_bits ) <S2SV_EndBug> <S2SV_StartBug> while ( 0 == ih264d_check_byte_aligned ( ps_bitstrm ) ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> while ( header_buf [ i ] == '\\r' || header_buf [ i ] == '\\n' ) <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! static_key_enabled ( work -> key ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( topicName , '#' ) == NULL && strchr ( topicName , '+' ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> pipe -> bufs = kzalloc ( sizeof ( struct pipe_buffer ) * PIPE_DEF_BUFFERS , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pipe -> buffers = PIPE_DEF_BUFFERS ; <S2SV_EndBug> <S2SV_StartBug> kfree ( pipe ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( trk -> vos_len == 0 && par -> extradata_size > 0 && <S2SV_EndBug>
<S2SV_StartBug> xmlNodePtr cur = NULL ; <S2SV_EndBug> <S2SV_StartBug> xmlXPathObjectPtr obj ; <S2SV_EndBug> <S2SV_StartBug> xmlXPathFreeObject ( obj ) ; <S2SV_EndBug> <S2SV_StartBug> val = ( long ) ( ( char * ) cur - ( char * ) doc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> walk -> private += __mincore_unmapped_range ( addr , end , <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int rc ; <S2SV_EndBug> <S2SV_StartBug> rc = ecryptfs_parse_options ( sbi , raw_data ) ; <S2SV_EndBug> <S2SV_StartBug> ecryptfs_set_superblock_lower ( s , path . dentry -> d_sb ) ; <S2SV_EndBug>
<S2SV_StartBug> return AUTH_FOUND ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> random_ether_addr ( dev -> dev_addr ) ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) <S2SV_EndBug>
<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , optlen + 4 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( ypred_ptr , expected_dc , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ypred_ptr , yleft_col [ r ] , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! asoc -> temp ) { <S2SV_EndBug>
<S2SV_StartBug> default : <S2SV_EndBug>
<S2SV_StartBug> if ( noblock ) <S2SV_EndBug>
<S2SV_StartBug> TX_SIZE max_tx_size , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const int ctx = vp9_get_tx_size_context ( xd ) ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * tx_probs = get_tx_probs ( max_tx_size , ctx , & cm -> fc . tx_probs ) ; <S2SV_EndBug> <S2SV_StartBug> int tx_size = vp9_read ( r , tx_probs [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> tx_size += vp9_read ( r , tx_probs [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> tx_size += vp9_read ( r , tx_probs [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> ++ get_tx_counts ( max_tx_size , ctx , & cm -> counts . tx ) [ tx_size ] ; <S2SV_EndBug>
<S2SV_StartBug> evt -> event . lun [ 1 ] = tpg -> tport_tpgt & 0xFF ; <S2SV_EndBug>
<S2SV_StartBug> int64_t cur_offset = avio_tell ( pb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sk -> sk_state != TCP_CLOSE ) <S2SV_EndBug>
<S2SV_StartBug> strncpy ( result , "undefined" , 10 ) ; <S2SV_EndBug>
<S2SV_StartBug> GsmXSMPClient * client ; <S2SV_EndBug> <S2SV_StartBug> client = ice_conn -> context ; <S2SV_EndBug> <S2SV_StartBug> g_return_val_if_fail ( client != NULL , TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> gsm_xsmp_client_connect ( client , sms_conn , mask_ret , callbacks_ret ) ; <S2SV_EndBug>
<S2SV_StartBug> udf_pc_to_char ( inode -> i_sb , symlink , inode -> i_size , p ) ; <S2SV_EndBug> <S2SV_StartBug> brelse ( bh ) ; <S2SV_EndBug>
<S2SV_StartBug> static char * print_array ( cJSON * item , int depth , int fmt ) <S2SV_EndBug> <S2SV_StartBug> while ( child ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) <S2SV_EndBug> <S2SV_StartBug> while ( child && ! fail ) { <S2SV_EndBug> <S2SV_StartBug> ret = print_value ( child , depth + 1 , fmt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fail ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < numentries ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> ptr += strlen ( entries [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( i != numentries - 1 ) { <S2SV_EndBug> <S2SV_StartBug> cJSON_free ( entries [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> * ptr ++ = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! vma -> vm_userfaultfd_ctx . ctx ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , path2 , fi -> flags ) ) { <S2SV_EndBug>
<S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug>
<S2SV_StartBug> if ( serial -> port [ 0 ] == usbcons_info . port ) { <S2SV_EndBug>
<S2SV_StartBug> static int ion_handle_put ( struct ion_handle * handle ) <S2SV_EndBug> <S2SV_StartBug> ret = kref_put ( & handle -> ref , ion_handle_destroy ) ; <S2SV_EndBug>
<S2SV_StartBug> DEFINE_WAKE_Q ( wake_q ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , el ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 + el , src_ptr1 , w ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 , src_ptr1 , linesize ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , linesize ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( my_copystat ( org_name , tmp_name , MyFlags ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> static inline int <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( console -> name , lxcpath , "none" , MS_BIND , 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( m , name ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_eventenable ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_eventenable karg ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCKD * const xd = args -> xd ; <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * p = & args -> cpi -> mb . plane [ plane ] ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u2_frame_rate_code = impeg2d_bit_stream_get ( ps_stream , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> return print_value ( item , 0 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_args ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> arg_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_arg ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( args , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_vararg ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_vararg ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> arg_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_arg ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( kwonlyargs , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_kw_defaults ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( kw_defaults , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_kwarg ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_kwarg ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( defaults , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> * out = arguments ( args , vararg , kwonlyargs , kw_defaults , kwarg , defaults , <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ifa1 -> ifa_flags & IFA_F_SECONDARY ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> dst = __inet6_csk_dst_check ( sk , np -> dst_cookie ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> number_planes , <S2SV_EndBug> <S2SV_StartBug> if ( ( number_pixels * number_planes ) != ( size_t ) ( number_pixels * number_planes ) ) <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * MagickMax ( number_planes , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> fl6 -> saddr = ireq -> ir_v6_loc_addr ; <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ape -> totalframes > UINT_MAX / sizeof ( APEFrame ) ) { <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> static void update_state_rt ( VP9_COMP * cpi , PICK_MODE_CONTEXT * ctx , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> * ( xd -> mi [ 0 ] ) = ctx -> mic ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) && seg -> enabled ) { <S2SV_EndBug> <S2SV_StartBug> vp9_cyclic_refresh_update_segment ( cpi , & xd -> mi [ 0 ] -> mbmi , <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , bsize , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_update_mv_count ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> ++ cm -> counts . switchable_interp [ pred_ctx ] [ mbmi -> interp_filter ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char filename [ dirent . namelen + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> enum grub_fshelp_filetype type = GRUB_FSHELP_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( hook ( filename , type , fdiro , closure ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( o == NULL ) return ; <S2SV_EndBug>
<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ip6t_entry ) >= limit ) { <S2SV_EndBug>
<S2SV_StartBug> rad_get_vendor_attr ( u_int32_t * vendor , const void * * data , size_t * len ) <S2SV_EndBug> <S2SV_StartBug> attr = ( struct vendor_attribute * ) * data ; <S2SV_EndBug> <S2SV_StartBug> * vendor = ntohl ( attr -> vendor_value ) ; <S2SV_EndBug> <S2SV_StartBug> return ( attr -> attrib_type ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( clone_info ) <S2SV_EndBug> <S2SV_StartBug> DeleteImageFromList ( & tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> buffer = malloc ( ( uint64_t ) msg . sct . length + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mode != inode -> i_mode ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int64_t target_end = s -> end_off ? s -> end_off : s -> filesize ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> if ( ! len && ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRId64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRId64 "\\n" , <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( length > 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! bin ) <S2SV_EndBug> <S2SV_StartBug> ret = v3d_job_init ( v3d , file_priv , & bin -> base , <S2SV_EndBug> <S2SV_StartBug> v3d_job_put ( & render -> base ) ; <S2SV_EndBug>
<S2SV_StartBug> With ( asdl_seq * items , asdl_seq * body , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> lineno = lineno ; <S2SV_EndBug>
<S2SV_StartBug> bool compat ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct tpacket_req * req = & req_u -> req ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pg_vec ) <S2SV_EndBug>
<S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_16 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 32 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_32 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 64 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_64 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 128 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_128 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 256 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_256 ; <S2SV_EndBug> <S2SV_StartBug> else if ( blockSize == 512 ) <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_512 ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = COAP_BLOCK_SIZE_1024 ; <S2SV_EndBug> <S2SV_StartBug> request -> txBlockSzx = coapClientGetMaxBlockSize ( ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sas_task * task = TO_SAS_TASK ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_eh_finish_cmd ( cmd , & sas_ha -> eh_done_q ) ; <S2SV_EndBug>
<S2SV_StartBug> char * * values = NULL , * strval [ 10 ] = { NULL } , errbuf [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> krb5_boolean krb_identity_exists = FALSE , establish_links = FALSE ; <S2SV_EndBug> <S2SV_StartBug> int dnlen = 0 , subtreelen = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug>
<S2SV_StartBug> ! ( e -> ip . flags & IPT_F_GOTO ) ) <S2SV_EndBug> <S2SV_StartBug> e = get_entry ( table_base , v ) ; <S2SV_EndBug>
<S2SV_StartBug> copy_flags |= CL_SHARED_TO_SLAVE ; <S2SV_EndBug>
<S2SV_StartBug> num_pages = get_user_pages_fast ( base , size , 0 , & page [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( num_pages != size ) || <S2SV_EndBug>
<S2SV_StartBug> for ( y = 0 ; y < s -> height ; ++ y ) { <S2SV_EndBug>
<S2SV_StartBug> static void utee_param_to_param ( struct tee_ta_param * p , struct utee_params * up ) <S2SV_EndBug> <S2SV_StartBug> switch ( TEE_PARAM_TYPE_GET ( types , n ) ) { <S2SV_EndBug> <S2SV_StartBug> case TEE_PARAM_TYPE_MEMREF_INPUT : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( sk != asoc -> base . sk ) <S2SV_EndBug>
<S2SV_StartBug> gchar * filename ; <S2SV_EndBug> <S2SV_StartBug> filename = g_build_filename ( g_get_tmp_dir ( ) , "gimp-test.xcf" , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> stride = ( ( Info_h . biWidth * Info_h . biBitCount + 31U ) / 32U ) * 4U ; <S2SV_EndBug> <S2SV_StartBug> if ( Info_h . biBitCount == 4 && Info_h . biCompression == 2 ) { <S2SV_EndBug> <S2SV_StartBug> pData = ( OPJ_UINT8 * ) calloc ( 1 , stride * Info_h . biHeight * sizeof ( OPJ_UINT8 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> pte_unmap ( page_table ) ; <S2SV_EndBug>
<S2SV_StartBug> struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , int mode ) <S2SV_EndBug>
<S2SV_StartBug> } else if ( event -> type == et_char ) { <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < numcmpts ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( jas_image_height ( image ) , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> nz -= 8 ; <S2SV_EndBug>
<S2SV_StartBug> quit ( 1 , "Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin<S2SV_blank>in<S2SV_blank>parse_notify" ) ; <S2SV_EndBug>
<S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( box , 0 , sizeof ( jp2_box_t ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int align ; <S2SV_EndBug> <S2SV_StartBug> default : <S2SV_EndBug> <S2SV_StartBug> xcs = 1 ; <S2SV_EndBug> <S2SV_StartBug> case VPX_IMG_FMT_YV12 : <S2SV_EndBug> <S2SV_StartBug> case VPX_IMG_FMT_VPXYV12 : <S2SV_EndBug> <S2SV_StartBug> if ( ! img ) { <S2SV_EndBug> <S2SV_StartBug> img -> img_data = img_buf_memalign ( buf_align , ( ( fmt & VPX_IMG_FMT_PLANAR ) ? <S2SV_EndBug> <S2SV_StartBug> h * s * bps / 8 : h * s ) ) ; <S2SV_EndBug> <S2SV_StartBug> img -> fmt = fmt ; <S2SV_EndBug> <S2SV_StartBug> img -> stride [ VPX_PLANE_Y ] = img -> stride [ VPX_PLANE_ALPHA ] = s ; <S2SV_EndBug> <S2SV_StartBug> img -> stride [ VPX_PLANE_U ] = img -> stride [ VPX_PLANE_V ] = s >> xcs ; <S2SV_EndBug>
<S2SV_StartBug> static int match ( Reinst * pc , const char * sp , const char * bol , int flags , Resub * out ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! match ( pc -> x , sp , bol , flags , out ) ) <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> unix_state_double_unlock ( sk , other ) ; <S2SV_EndBug>
<S2SV_StartBug> return luaL_argerror ( L , 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; <S2SV_EndBug>
<S2SV_StartBug> # undef _ <S2SV_EndBug>
<S2SV_StartBug> tilebuf = _TIFFmalloc ( tile_buffsize ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( cnt = 0 , i = 0 ; cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; ++ cnt ) { <S2SV_EndBug> <S2SV_StartBug> i += verdef -> vd_next ; <S2SV_EndBug>
<S2SV_StartBug> ( * sp -> decodepfunc ) ( tif , op0 , occ0 ) ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; mechbuf [ i ] ; i ++ ) mechbuf [ i ] = tolower ( mechbuf [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static int jas_iccputsint ( jas_stream_t * out , int n , longlong val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug>
<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( msg -> msg_iov , ( int ) msg -> msg_iovlen , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> & msg -> msg_namelen , <S2SV_EndBug> <S2SV_StartBug> & msg -> msg_controllen , <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_sync ( msg -> msg_iov , ( int ) msg -> msg_iovlen , buf , buf_size ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> struct usb_serial * serial = port -> serial ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! handle -> h_transaction ) { <S2SV_EndBug> <S2SV_StartBug> err = jbd2_journal_stop ( handle ) ; <S2SV_EndBug> <S2SV_StartBug> return handle -> h_err ? handle -> h_err : err ; <S2SV_EndBug> <S2SV_StartBug> sb = handle -> h_transaction -> t_journal -> j_private ; <S2SV_EndBug>
<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct arpt_entry ) >= limit ) { <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "gnuplot<S2SV_blank>%s" , cmdname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "wgnuplot<S2SV_blank>%s" , cmdname ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> char * * values = NULL , * strval [ 10 ] = { NULL } , errbuf [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> krb5_boolean krb_identity_exists = FALSE , establish_links = FALSE ; <S2SV_EndBug> <S2SV_StartBug> int dnlen = 0 , subtreelen = 0 ; <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error < 0 ) <S2SV_EndBug>
<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static LAYER_CONTEXT * get_layer_context ( SVC * svc ) { <S2SV_EndBug> <S2SV_StartBug> return svc -> number_temporal_layers > 1 ? <S2SV_EndBug> <S2SV_StartBug> & svc -> layer_context [ svc -> spatial_layer_id ] ; <S2SV_EndBug>
<S2SV_StartBug> void unix_inflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_EndBug>
<S2SV_StartBug> SCV_NB10_HEADER nb10_hdr ; <S2SV_EndBug> <S2SV_StartBug> "%x%x" , nb10_hdr . timestamp , nb10_hdr . age ) ; <S2SV_EndBug> <S2SV_StartBug> nb10_hdr . file_name , sizeof ( res -> file_name ) - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> num ++ ; <S2SV_EndBug>
<S2SV_StartBug> case MFR_CTRL_IE_MAGIC_NUM : <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> port -> exists = true ; <S2SV_EndBug> <S2SV_StartBug> mb ( ) ; <S2SV_EndBug>
<S2SV_StartBug> nl_parse ( pipenum , & config ) ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , regs -> cp0_badvaddr ) ; <S2SV_EndBug>
<S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> <S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug>
<S2SV_StartBug> rsrc . type_count = read_rsrc_short ( & rsrc , rsrc . map_offset + 28 ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> { marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 ) ; <S2SV_EndBug>
<S2SV_StartBug> return HTTP_FORBIDDEN ; <S2SV_EndBug>
<S2SV_StartBug> vpx_codec_ctx_t codec = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_enc_cfg_t cfg = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vpx_image_t raw = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> VpxVideoInfo info = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> encoder = get_vpx_encoder_by_name ( argv [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! encoder ) <S2SV_EndBug> <S2SV_StartBug> die ( "Unsupported<S2SV_blank>codec." ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> encode_frame ( & codec , NULL , - 1 , writer ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( vcpu -> arch . time_page ) { <S2SV_EndBug>
<S2SV_StartBug> void close_connection ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> avio_skip ( pb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sscanf ( val , "%" SCNu32 "%" SCNu32 "%" SCNu32 "%" SCNu32 , <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < 4 ; idx ++ ) { <S2SV_EndBug>
<S2SV_StartBug> struct vp9_read_bit_buffer * rb ) { <S2SV_EndBug> <S2SV_StartBug> size_t sz ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_rb_read_literal ( rb , 2 ) != VP9_FRAME_MARKER ) <S2SV_EndBug> <S2SV_StartBug> cm -> profile = read_profile ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> show_existing_frame = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> const int frame_to_show = cm -> ref_frame_map [ vp9_rb_read_literal ( rb , 3 ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_bufs [ frame_to_show ] . ref_count < 1 ) <S2SV_EndBug> <S2SV_StartBug> ref_cnt_fb ( cm -> frame_bufs , & cm -> new_fb_idx , frame_to_show ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_type = ( FRAME_TYPE ) vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> show_frame = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> error_resilient_mode = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> check_sync_code ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> "RGB<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank>0" ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . idx = cm -> new_fb_idx ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . buf = get_frame_new_buffer ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> setup_frame_size ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> intra_only = cm -> show_frame ? 0 : vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> 0 : vp9_rb_read_literal ( rb , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> check_sync_code ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> pbi -> refresh_frame_flags = vp9_rb_read_literal ( rb , REF_FRAMES ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> pbi -> refresh_frame_flags = vp9_rb_read_literal ( rb , REF_FRAMES ) ; <S2SV_EndBug> <S2SV_StartBug> const int ref = vp9_rb_read_literal ( rb , REF_FRAMES_LOG2 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . idx = idx ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ i ] . buf = & cm -> frame_bufs [ idx ] . buf ; <S2SV_EndBug> <S2SV_StartBug> cm -> ref_frame_sign_bias [ LAST_FRAME + i ] = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> allow_high_precision_mv = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_scale_factors_for_frame ( & ref_buf -> sf , <S2SV_EndBug> <S2SV_StartBug> cm -> width , cm -> height ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_is_scaled ( & ref_buf -> sf ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_extend_frame_borders ( ref_buf -> buf ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> coding_use_prev_mi = 1 ; <S2SV_EndBug> <S2SV_StartBug> cm -> refresh_frame_context = vp9_rb_read_bit ( rb ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> coding_use_prev_mi = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> setup_tile_info ( cm , rb ) ; <S2SV_EndBug> <S2SV_StartBug> sz = vp9_rb_read_literal ( rb , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> if ( tu -> timeri ) <S2SV_EndBug> <S2SV_StartBug> snd_timer_close ( tu -> timeri ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( tf = fopen ( tfile -> file_path , "w" ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> kfree ( user ) ; <S2SV_EndBug>
<S2SV_StartBug> int blockstodecode ; <S2SV_EndBug> <S2SV_StartBug> if ( ! nblocks || nblocks > INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> av_fast_malloc ( & s -> decoded_buffer , & s -> decoded_size , <S2SV_EndBug> <S2SV_StartBug> 2 * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) <S2SV_EndBug>
<S2SV_StartBug> signed long personality ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_attach_to_ns ( init_pid , options -> namespaces ) ; <S2SV_EndBug> <S2SV_StartBug> . exec_payload = exec_payload <S2SV_EndBug>
<S2SV_StartBug> static void fdct4 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int16_t step [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int temp1 , temp2 ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = fdct_round_shift ( temp1 ) ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.cmd" , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.png" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.ps" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.eps" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.tex" , newroot ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tlen < oid_len ) { <S2SV_EndBug>
<S2SV_StartBug> client -> auth_end_offset = AUTH_END_INIT_OFFSET ; <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug> <S2SV_StartBug> decoder -> name , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( read = recv ( fd , p , len , MSG_NOSIGNAL ) ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> YV12_BUFFER_CONFIG * lst_yv12 = <S2SV_EndBug> <S2SV_StartBug> lst_yv12 -> y_width * lst_yv12 -> y_height ; <S2SV_EndBug> <S2SV_StartBug> lst_yv12 -> y_width * lst_yv12 -> y_height ; <S2SV_EndBug> <S2SV_StartBug> vp8_remove_common ( & cpi -> common ) ; <S2SV_EndBug> <S2SV_StartBug> # if 0 <S2SV_EndBug>
<S2SV_StartBug> static void init_decoder ( vpx_codec_alg_priv_t * ctx ) { <S2SV_EndBug> <S2SV_StartBug> VP9D_CONFIG oxcf ; <S2SV_EndBug> <S2SV_StartBug> oxcf . max_threads = ctx -> cfg . threads ; <S2SV_EndBug> <S2SV_StartBug> ctx -> pbi = vp9_decoder_create ( & oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mptctl_eventreport ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> r = - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> if ( node -> v == & node -> sorted ) <S2SV_EndBug> <S2SV_StartBug> tr_free ( node -> sorted . val . l . vals ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( fscanf ( fp , "<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%s\\n" , & n , typestr ) != 2 ) <S2SV_EndBug>
<S2SV_StartBug> switch ( * arg ) { <S2SV_EndBug> <S2SV_StartBug> case '\\n' : <S2SV_EndBug> <S2SV_StartBug> * b ++ = * arg ; <S2SV_EndBug>
<S2SV_StartBug> ThrowReaderException ( CorruptImageError , "UnableToReadImageData" ) ; <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> if ( setpwnam ( pw ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> diff = ndpi_min ( packet -> payload_packet_len - a1 , sizeof ( flow -> initial_binary_bytes ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( diff > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> string -> space = 1 ; <S2SV_EndBug> <S2SV_StartBug> string -> space *= 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( string -> space < 0 ) <S2SV_EndBug> <S2SV_StartBug> new_len = string -> space = G_MAXINT - 8 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ufs -> upper_mnt = clone_private_mount ( & upperpath ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! kvm_read_cr4_bits ( vcpu , X86_CR4_VMXE ) ) { <S2SV_EndBug>
<S2SV_StartBug> r = verify_vc_kbmode ( fd ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ptr = cp [ 2 ] - 1 ; <S2SV_EndBug> <S2SV_StartBug> switch ( cp [ 3 ] & 0xF ) { <S2SV_EndBug> <S2SV_StartBug> type = "<S2SV_blank>^<S2SV_blank>" ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> local_bh_disable ( ) ; <S2SV_EndBug> <S2SV_StartBug> local_bh_enable ( ) ; <S2SV_EndBug>
<S2SV_StartBug> hlist_add_head ( & mp -> mglist , & br -> mglist ) ; <S2SV_EndBug>
<S2SV_StartBug> vt -> allocator = funcs ; <S2SV_EndBug> <S2SV_StartBug> vt -> outbuffer_len = 200 ; <S2SV_EndBug> <S2SV_StartBug> vt -> outbuffer = vterm_allocator_malloc ( vt , vt -> outbuffer_len ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ext4_extent * ex , newex , orig_ex ; <S2SV_EndBug> <S2SV_StartBug> unsigned int allocated , ee_len , depth ; <S2SV_EndBug> <S2SV_StartBug> allocated = ee_len - ( map -> m_lblk - ee_block ) ; <S2SV_EndBug> <S2SV_StartBug> may_zeroout = ee_block + ee_len <= eof_block ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_get_access ( handle , inode , path + depth ) ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_insert_extent ( handle , inode , path , ex3 , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> encT ) ; <S2SV_EndBug> <S2SV_StartBug> return _gcry_aes_arm_encrypt_block ( ctx -> keyschenc , bx , ax , ctx -> rounds , encT ) ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * component , <S2SV_EndBug> <S2SV_StartBug> finish_object ( obj , path , component , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> show_object_with_name ( stdout , obj , path , component ) ; <S2SV_EndBug>
<S2SV_StartBug> r -> rtm_flags |= RTM_F_NOTIFY ; <S2SV_EndBug>
<S2SV_StartBug> if ( X509_check_host ( cert , common_name , FIELD_SIZE , 0 , NULL ) ) <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct ipt_ip * ip ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ip , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & tv_usec ) ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_usec = tv_usec ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> init_thread : <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> int error = 0 ; <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , "refcount<S2SV_blank>now=0;<S2SV_blank>freeing" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug>
<S2SV_StartBug> p -> y . pTab = pItem -> pTab ; <S2SV_EndBug> <S2SV_StartBug> testcase ( iCol == BMS ) ; <S2SV_EndBug> <S2SV_StartBug> return p ; <S2SV_EndBug>
<S2SV_StartBug> pStorage -> mbLayer = ( macroblockLayer_t * ) H264SwDecMalloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( mbd -> segment_feature_data , xd -> segment_feature_data , sizeof ( xd -> segment_feature_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> ref_lf_deltas , xd -> ref_lf_deltas , sizeof ( xd -> ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> mode_lf_deltas , xd -> mode_lf_deltas , sizeof ( xd -> mode_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y1_dc , xd -> dequant_y1_dc , sizeof ( xd -> dequant_y1_dc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y1 , xd -> dequant_y1 , sizeof ( xd -> dequant_y1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_y2 , xd -> dequant_y2 , sizeof ( xd -> dequant_y2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( mbd -> dequant_uv , xd -> dequant_uv , sizeof ( xd -> dequant_uv ) ) ; <S2SV_EndBug>
<S2SV_StartBug> raw_ptr = ( unsigned char * ) ( raw_buffer -> y_buffer + recon_yoffset <S2SV_EndBug> <S2SV_StartBug> vp8_mse16x16 ( src_ptr , src_stride , raw_ptr , raw_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_mse16x16 ( src_ptr , src_stride , ref_ptr , ref_stride , <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_set_roi_map ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> int cflags = REG_EXTENDED | REG_NOSUB ; <S2SV_EndBug> <S2SV_StartBug> if ( regexec ( & preg , string , 0 , NULL , 0 ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( SSL_USE_ETM ( s ) && s -> read_hash ) { <S2SV_EndBug> <S2SV_StartBug> ( EVP_MD_CTX_md ( s -> read_hash ) != NULL ) && ! SSL_USE_ETM ( s ) ) { <S2SV_EndBug>
<S2SV_StartBug> static unsigned int XBMInteger ( Image * image , short int * hex_digits ) <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> struct completion * vfork_done = tsk -> vfork_done ; <S2SV_EndBug>
<S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> len = min_t ( unsigned int , len , sizeof ( sec ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ MAX_PKT_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> len = recvfrom ( sd , buf , sizeof ( buf ) , MSG_DONTWAIT , & sa , & salen ) ; <S2SV_EndBug> <S2SV_StartBug> buf [ len ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> * prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vma -> vm_file || ! vma -> vm_file -> f_mapping <S2SV_EndBug> <S2SV_StartBug> || ! vma -> vm_file -> f_mapping -> host ) { <S2SV_EndBug> <S2SV_StartBug> up_read ( & current -> mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> error = do_fallocate ( vma -> vm_file , <S2SV_EndBug> <S2SV_StartBug> offset , end - start ) ; <S2SV_EndBug>
<S2SV_StartBug> err = - EMSGSIZE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug> <S2SV_StartBug> inet -> hdrincl ? IPPROTO_RAW : sk -> sk_protocol , <S2SV_EndBug> <S2SV_StartBug> ( inet -> hdrincl ? FLOWI_FLAG_KNOWN_NH : 0 ) , <S2SV_EndBug> <S2SV_StartBug> if ( ! inet -> hdrincl ) { <S2SV_EndBug> <S2SV_StartBug> if ( inet -> hdrincl ) <S2SV_EndBug>
<S2SV_StartBug> size_t count , const uint64_t clsid [ 2 ] ) <S2SV_EndBug> <S2SV_StartBug> if ( ! NOTMIME ( ms ) ) <S2SV_EndBug> <S2SV_StartBug> str = cdf_clsid_to_mime ( clsid , clsid2mime ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mount * parent = ACCESS_ONCE ( mnt -> mnt_parent ) ; <S2SV_EndBug>
<S2SV_StartBug> return ( mhlen ) ; <S2SV_EndBug>
<S2SV_StartBug> static bool tailmatch ( const char * little , const char * bigone ) <S2SV_EndBug> <S2SV_StartBug> size_t littlelen = strlen ( little ) ; <S2SV_EndBug> <S2SV_StartBug> size_t biglen = strlen ( bigone ) ; <S2SV_EndBug> <S2SV_StartBug> if ( littlelen > biglen ) <S2SV_EndBug> <S2SV_StartBug> return Curl_raw_equal ( little , bigone + biglen - littlelen ) ? TRUE : FALSE ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! values [ k ] . name ) <S2SV_EndBug>
<S2SV_StartBug> siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; <S2SV_EndBug>
<S2SV_StartBug> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug>
<S2SV_StartBug> int cond_len , then_len , jump_len ; <S2SV_EndBug> <S2SV_StartBug> jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END ; <S2SV_EndBug> <S2SV_StartBug> int else_len = compile_length_tree ( Else , reg ) ; <S2SV_EndBug> <S2SV_StartBug> COP ( reg ) -> jump . addr = else_len + SIZE_INC_OP ; <S2SV_EndBug> <S2SV_StartBug> r = compile_tree ( Else , reg , env ) ; <S2SV_EndBug>
<S2SV_StartBug> int valuelen = args -> valuelen ; <S2SV_EndBug> <S2SV_StartBug> ASSERT ( ! ( args -> flags & ATTR_KERNOVAL ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( -- container_of ( ptr , struct ipc_rcu_hdr , data ) -> refcount > 0 ) <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug>
<S2SV_StartBug> static int expandRegular ( rpmfi fi , const char * dest , rpmpsm psm , int nodigest , int nocontent ) <S2SV_EndBug> <S2SV_StartBug> wfd = Fopen ( dest , "w.ufdio" ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( old_umask ) ; <S2SV_EndBug>
<S2SV_StartBug> image -> inmem_ = true ; <S2SV_EndBug>
<S2SV_StartBug> if ( prefixlen < len ) { <S2SV_EndBug>
<S2SV_StartBug> if ( label_exec ( opt_exec_label ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> chip -> data_buffer = kmalloc ( TPM_BUFSIZE * sizeof ( u8 ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> set_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> clear_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug>
<S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( AcquireImageColormap ( image , image -> colors ) == MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows ) ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * sopt ; <S2SV_EndBug> <S2SV_StartBug> if ( sopt -> optlen == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> unsigned long size ) <S2SV_EndBug> <S2SV_StartBug> end_gfn = gfn + ( size >> PAGE_SHIFT ) ; <S2SV_EndBug>
<S2SV_StartBug> res = ctx -> iface -> enc . cfg_set ( ctx -> priv -> alg_priv , cfg ) ; <S2SV_EndBug>
<S2SV_StartBug> status = sctp_v4_protosw_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> status = register_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> err_protosw_init : <S2SV_EndBug>
<S2SV_StartBug> bpm = nlmsg_data ( nlh ) ; <S2SV_EndBug>
<S2SV_StartBug> * flags &= ~ FOLL_WRITE ; <S2SV_EndBug>
<S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_idct8x8_add ( const int16_t * input , uint8_t * dest , int stride , int eob ) { <S2SV_EndBug> <S2SV_StartBug> vp9_idct8x8_1_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( eob <= 10 ) <S2SV_EndBug> <S2SV_StartBug> vp9_idct8x8_64_add ( input , dest , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( the_url , evt -> navigate . to_url ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> keymap -> num_key_aliases = num_key_aliases ; <S2SV_EndBug>
<S2SV_StartBug> static inline struct enamemem * <S2SV_EndBug> <S2SV_StartBug> struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> while ( tp -> e_nxt ) <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr1 == j && <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr2 == k && <S2SV_EndBug> <S2SV_StartBug> memcmp ( ( const char * ) bs , ( const char * ) ( tp -> e_bs ) , nlen ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> tp = tp -> e_nxt ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_bs == NULL ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( tp -> e_bs , bs , nlen ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_nxt == NULL ) <S2SV_EndBug>
<S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> encode_frame ( & codec , NULL , - 1 , 0 , writer ) ; <S2SV_EndBug>
<S2SV_StartBug> avail = vec -> iov_len - ( old - ( char * ) vec -> iov_base ) ; <S2SV_EndBug>
<S2SV_StartBug> recv ( signal_fds [ 0 ] , & sig_recv , sizeof ( sig_recv ) , MSG_WAITALL ) ; <S2SV_EndBug>
<S2SV_StartBug> void Huff_offsetTransmit ( huff_t * huff , int ch , byte * fout , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> send ( huff -> loc [ ch ] , NULL , fout ) ; <S2SV_EndBug>
<S2SV_StartBug> box -> info = boxinfo ; <S2SV_EndBug> <S2SV_StartBug> box -> ops = & jp2_boxinfo_unk . ops ; <S2SV_EndBug> <S2SV_StartBug> jas_stream_rewind ( tmpstream ) ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) && <S2SV_EndBug>
<S2SV_StartBug> int res , bytes , i , indexes , index_bytes , ids ; <S2SV_EndBug> <S2SV_StartBug> if ( flag ) { <S2SV_EndBug> <S2SV_StartBug> return id_table . xattr_ids ; <S2SV_EndBug> <S2SV_StartBug> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) , <S2SV_EndBug> <S2SV_StartBug> bytes = SQUASHFS_XATTR_BYTES ( ids ) ; <S2SV_EndBug> <S2SV_StartBug> ( i * SQUASHFS_METADATA_SIZE ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int result = RLC_OK ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( t ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> pad |= h1 [ i ] - h2 [ i ] ; <S2SV_EndBug> <S2SV_StartBug> if ( result == RLC_OK ) { <S2SV_EndBug> <S2SV_StartBug> bn_mod_2b ( m , m , 8 * m_len ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( bn_cmp_dig ( t , RSA_PSS ) != RLC_EQ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( m ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug>
<S2SV_StartBug> MODE_INFO * * mi_8x8 , const int mode_info_stride , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mip = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mip2 = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( * lfm ) ; <S2SV_EndBug> <S2SV_StartBug> const uint64_t mask_y = ( ( ( 1 << columns ) - 1 ) ) * 0x0101010101010101 ; <S2SV_EndBug> <S2SV_StartBug> lfm -> left_y [ i ] &= 0xfefefefefefefefe ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> redisAssert ( ! server . vm_enabled || obj -> storage == REDIS_VM_MEMORY ) ; <S2SV_EndBug>
<S2SV_StartBug> location = ngx_list_push ( & r -> headers_out . headers ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! unconditional ( & e -> ipv6 ) ) <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> transhdrlen , mtu , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , text , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < table_entries_used ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> nsv -> nsvs_file_offset [ i ] = avio_rl32 ( pb ) + size ; <S2SV_EndBug>
<S2SV_StartBug> static bool do_write_pids ( pid_t tpid , const char * contrl , const char * cg , const char * file , const char * buf ) <S2SV_EndBug> <S2SV_StartBug> if ( fprintf ( pids_file , "%d" , ( int ) cred . pid ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> u64 t = ca -> sum_rtt ; <S2SV_EndBug> <S2SV_StartBug> do_div ( t , ca -> cnt_rtt ) ; <S2SV_EndBug> <S2SV_StartBug> info . tcpv_rtt = t ; <S2SV_EndBug>
<S2SV_StartBug> put_cmsg ( msg , SOL_PACKET , PACKET_AUXDATA , sizeof ( aux ) , & aux ) ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( sk != asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> # undef _ <S2SV_EndBug>
<S2SV_StartBug> alarm_set ( alarm_timer , CONFIG_SETTLE_PERIOD_MS , timer_config_save , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( c && cJSON_strcasecmp ( c -> string , string ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( pt [ 6 ] & AX25_HBIT ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ facilities -> source_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> hdrlen = sizeof ( * h . h2 ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> list_for_each_entry_safe ( chain , nc , & ctx -> table -> chains , list ) { <S2SV_EndBug> <S2SV_StartBug> err = nft_delchain ( ctx ) ; <S2SV_EndBug> <S2SV_StartBug> list_for_each_entry_safe ( set , ns , & ctx -> table -> sets , list ) { <S2SV_EndBug> <S2SV_StartBug> if ( set -> flags & NFT_SET_ANONYMOUS && <S2SV_EndBug>
<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( ubridge_config = iniparser_load ( filename ) ) == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( skb_headroom ( skb ) < frag_hdr_sz ) && <S2SV_EndBug>
<S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( context -> curY >= p -> height ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> bitlen = slen * 4 ; <S2SV_EndBug>
<S2SV_StartBug> int udf_get_filename ( struct super_block * sb , uint8_t * sname , uint8_t * dname , <S2SV_EndBug> <S2SV_StartBug> int flen ) <S2SV_EndBug> <S2SV_StartBug> if ( udf_build_ustr_exact ( unifilename , sname , flen ) ) <S2SV_EndBug> <S2SV_StartBug> len = udf_translate_to_linux ( dname , filename -> u_name , filename -> u_len , <S2SV_EndBug>
<S2SV_StartBug> if ( Stream_GetRemainingLength ( irp -> input ) < PathLength ) <S2SV_EndBug> <S2SV_StartBug> return ERROR_INVALID_DATA ; <S2SV_EndBug>
<S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "0x%08x" , EXTRACT_32BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "v%d" , * bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>?0x%04x?" , EXTRACT_16BITS ( bp + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! strlen ( text ) ) return "empty<S2SV_blank>string" ; <S2SV_EndBug>
<S2SV_StartBug> arg = arg ( argname , annotation , LINENO ( ch ) , ch -> n_col_offset , <S2SV_EndBug> <S2SV_StartBug> i += 2 ; <S2SV_EndBug>
<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> BImgBuff = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) ( ldblk ) , sizeof ( unsigned char ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , "mode" ) == 0 && ntokens >= 3 && <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , "temp_ttl" ) == 0 && ntokens >= 3 && <S2SV_EndBug>
<S2SV_StartBug> for ( i = rows ; i < rows + 17 ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( name && memchr ( name , '\\0' , namelen ) ) <S2SV_EndBug>
<S2SV_StartBug> ( void ) mch_setperm ( curbuf -> b_ml . ml_mfp -> mf_fname , ( long ) swap_mode ) ; <S2SV_EndBug>
<S2SV_StartBug> bpm = nlmsg_data ( nlh ) ; <S2SV_EndBug>
<S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> int temporal_layer = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( temporal_layer = current_temporal_layer + 1 ; <S2SV_EndBug> <S2SV_StartBug> temporal_layer < svc -> number_temporal_layers ; ++ temporal_layer ) { <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * lc = & svc -> layer_context [ temporal_layer ] ; <S2SV_EndBug> <S2SV_StartBug> lrc -> bits_off_target = MIN ( lrc -> bits_off_target , lc -> maximum_buffer_size ) ; <S2SV_EndBug>
<S2SV_StartBug> get_net ( peer ) ; <S2SV_EndBug>
<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> speakup_tty = tty ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ldisc_data ) <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( val > sysctl_wmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_SNDBUF ) <S2SV_EndBug> <S2SV_StartBug> if ( val > sysctl_rmem_max ) <S2SV_EndBug> <S2SV_StartBug> if ( ( val * 2 ) < SOCK_MIN_RCVBUF ) <S2SV_EndBug>
<S2SV_StartBug> uchar buf [ 2 ] ; <S2SV_EndBug>
<S2SV_StartBug> newtok = PyMem_MALLOC ( buflen + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> first_block_offset = round_up ( offset , sb -> s_blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( last_block_offset > first_block_offset ) <S2SV_EndBug> <S2SV_StartBug> ext4_inode_resume_unlocked_dio ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> kiocb -> ki_nr_segs = kiocb -> ki_nbytes ; <S2SV_EndBug>
<S2SV_StartBug> YV12_BUFFER_CONFIG sd = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> const vpx_codec_err_t res = <S2SV_EndBug> <S2SV_StartBug> ctx -> base . iface -> dec . peek_si ( * data , data_sz , & ctx -> si ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! ctx -> decoder_init ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi == NULL ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> CAFChannelLayout * caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; <S2SV_EndBug> <S2SV_StartBug> ! DoReadFile ( infile , caf_channel_layout , ( uint32_t ) caf_chunk_header . mChunkSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> int bytes_to_copy = ( uint32_t ) caf_chunk_header . mChunkSize ; <S2SV_EndBug> <S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> usleep ( 200000 ) ; <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> err = vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . pre [ 0 ] . buf , xd -> plane [ 0 ] . pre [ 0 ] . stride , <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_returns ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_returns ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_returns ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_returns ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_name ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_name ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( bases , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> keyword_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_keyword ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keywords , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( decorator_list , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_targets ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( targets , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_targets ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( targets , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , "required<S2SV_blank>field<S2SV_blank>\\"target\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>AnnAssign" ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_annotation ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_iter ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_target ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_target ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & target , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_iter ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_items ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> withitem_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_withitem ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( items , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_items ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> withitem_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_withitem ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( items , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_type_comment ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_exc ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_exc ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & exc , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_body ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> excepthandler_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_excepthandler ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( handlers , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( orelse , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( finalbody , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & test , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> alias_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_alias ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_module ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_module ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> alias_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_alias ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_level ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> identifier value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_names ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> identifier value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( names , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , xcp , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug>

<S2SV_StartBug> cifs_small_buf_release ( req ) ; <S2SV_EndBug> <S2SV_StartBug> free_rsp_buf ( resp_buftype , rsp ) ; <S2SV_EndBug>
<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug>
<S2SV_StartBug> bmp_info . number_colors = ReadBlobLSBLong ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> ufs -> upper_mnt = clone_private_mount ( & upperpath ) ; <S2SV_EndBug>
<S2SV_StartBug> static const int16_t * filter = vp9_down2_symodd_half_filter ; <S2SV_EndBug>
<S2SV_StartBug> mutt_error ( "%s" , s + 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> bin -> dyld_info = malloc ( sizeof ( struct dyld_info_command ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( off + sizeof ( struct dyld_info_command ) > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> free ( bin -> dyld_info ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> long newbufsize ; <S2SV_EndBug> <S2SV_StartBug> newbufsize <<= 1 ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%z\\n" , m -> bufsize_ , <S2SV_EndBug> <S2SV_StartBug> if ( m -> pos_ > m -> len_ ) { <S2SV_EndBug>
<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug>
<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug>
<S2SV_StartBug> d0u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> d1u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 1 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> char sbuf [ 128 ] ; <S2SV_EndBug> <S2SV_StartBug> err = __video_do_ioctl ( file , cmd , parg ) ; <S2SV_EndBug>
<S2SV_StartBug> return tok ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> static void read_inter_mode_probs ( FRAME_CONTEXT * fc , vp9_reader * r ) { <S2SV_EndBug>
<S2SV_StartBug> static void get_sb_partition_size_range ( VP9_COMP * cpi , MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE * max_block_size ) { <S2SV_EndBug> <S2SV_StartBug> * min_block_size = MIN ( * min_block_size , sb_type ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int len = sizeof ( * ctx ) + crypto_skcipher_reqsize ( private ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> iv = sock_kmalloc ( sk , crypto_skcipher_ivsize ( private ) , <S2SV_EndBug> <S2SV_StartBug> memset ( ctx -> iv , 0 , crypto_skcipher_ivsize ( private ) ) ; <S2SV_EndBug> <S2SV_StartBug> skcipher_request_set_tfm ( & ctx -> req , private ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t tag = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( tcm_tmr < 0 ) { <S2SV_EndBug> <S2SV_StartBug> rc = srpt_rx_mgmt_fn_tag ( send_ioctx , srp_tsk -> task_tag ) ; <S2SV_EndBug>
<S2SV_StartBug> char * command , * args = value ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( size == PAGE_SIZE ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> args [ size ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( name , "current" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( command , "permhat" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( name , "exec" ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> aad . error = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> ret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> <S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug>
<S2SV_StartBug> int ret = select ( ( max_curr_s + 1 ) , & curr_set , NULL , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> ssize_t sent = send ( fd , p_buf -> data + p_buf -> offset , p_buf -> len , MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> spin_lock ( & inode -> i_lock ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , ( chg - freed ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug>
<S2SV_StartBug> struct in6_addr * saddr = NULL , * final_p , final ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len = ( np -> opt -> opt_flen + <S2SV_EndBug> <S2SV_StartBug> np -> opt -> opt_nflen ) ; <S2SV_EndBug>
<S2SV_StartBug> dwc3_gadget_giveback ( dep , req , ret ) ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( border < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> state -> indent = strdup ( RSTRING_PTR ( indent ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strcmp ( ptr , "get<S2SV_blank>" ) && strcmp ( ptr , "gets<S2SV_blank>" ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct futex_hash_bucket * hb ; <S2SV_EndBug>
<S2SV_StartBug> addModuleArgument ( db , pTable , sqlite3NameFromToken ( db , pModuleName ) ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTable , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTable , sqlite3DbStrDup ( db , pTable -> zName ) ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( type ) <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , ( ( ( unsigned char ) pixel ) & <S2SV_EndBug> <S2SV_StartBug> ( 0x01 << ( 7 - bit ) ) ) != 0 ? 0 : 255 , q ) ; <S2SV_EndBug> <S2SV_StartBug> x -- ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug>
<S2SV_StartBug> int sec ; <S2SV_EndBug> <S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> guint offset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , "%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9u:%12s->%12s/" , <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_frame ( <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < MAX_REF_FRAMES - 1 ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> & cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < numcmpts ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( jas_image_height ( image ) , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> nz -= 8 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( skb -> dev -> flags & IFF_LOOPBACK ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( out ) { <S2SV_EndBug> <S2SV_StartBug> container_of ( out , struct ipc_rcu_hdr , data ) -> refcount = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( out ) { <S2SV_EndBug> <S2SV_StartBug> container_of ( out , struct ipc_rcu_hdr , data ) -> refcount = 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( last_sec > 0 && last_usec > 0 ) { <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> uchar buf [ MIF_MAGICLEN ] ; <S2SV_EndBug>
<S2SV_StartBug> static void write_selected_tx_size ( const VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> & cpi -> common . fc . tx_probs ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_4X4 , tx_probs [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_8X8 , tx_probs [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , tx_size != TX_16X16 , tx_probs [ 2 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> int row8x8_remaining = tile -> mi_row_end - mi_row ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> int r , c ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * mi_upper_left = cm -> mi + mi_row * mis + mi_col ; <S2SV_EndBug> <S2SV_StartBug> const int src_stride = x -> plane [ 0 ] . src . stride ; <S2SV_EndBug> <S2SV_StartBug> const int pre_stride = cpi -> Last_Source -> y_stride ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t * pre_src = cpi -> Last_Source -> y_buffer + pre_offset ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> diff d16 [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> pre_stride , & d16 [ j ] . sse , & d16 [ j ] . sum ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( ( uint32_t ) d16 [ j ] . sum * d16 [ j ] . sum ) >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ( cm -> current_video_frame - 1 ) % <S2SV_EndBug> <S2SV_StartBug> use16x16 = 1 ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug>
<S2SV_StartBug> static void parse_input ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> close_connection ( conn ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> IBITS_NXT ( u4_buf , u4_buf_nxt , u4_offset , u4_bits , u4_sym_len ) <S2SV_EndBug> <S2SV_StartBug> DecodedValue = gau2_impeg2d_tab_zero_1_9 [ u4_bits >> 8 ] ; <S2SV_EndBug>
<S2SV_StartBug> security_decrypt ( s -> p , length , rdp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ioctl ( sock -> our_fd , FIONREAD , & size ) <S2SV_EndBug> <S2SV_StartBug> int count = recv ( fd , buffer , L2CAP_MAX_SDU_LENGTH , <S2SV_EndBug> <S2SV_StartBug> MSG_NOSIGNAL | MSG_DONTWAIT ) ; <S2SV_EndBug> <S2SV_StartBug> if ( drop_it || ioctl ( sock -> our_fd , FIONREAD , & size ) != 0 || size == 0 ) <S2SV_EndBug>
<S2SV_StartBug> bool disconnect ; <S2SV_EndBug> <S2SV_StartBug> __touch_mnt_namespace ( p -> mnt_ns ) ; <S2SV_EndBug>
<S2SV_StartBug> static int renameColumnSelectCb ( Walker * pWalker , Select * p ) { <S2SV_EndBug>
<S2SV_StartBug> dtls1_record_bitmap_update ( s , & ( s -> d1 -> bitmap ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( "parse_wbxml_tag_defined<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n" , * level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( sk_acceptq_is_full ( sk ) ) <S2SV_EndBug> <S2SV_StartBug> newinet -> opt = ireq -> opt ; <S2SV_EndBug>
<S2SV_StartBug> USB_DT_SECURITY , ( void * * ) & secd ) ; <S2SV_EndBug>
<S2SV_StartBug> static void set_rt_speed_feature ( VP9_COMMON * cm , SPEED_FEATURES * sf , <S2SV_EndBug> <S2SV_StartBug> int speed ) { <S2SV_EndBug> <S2SV_StartBug> sf -> encode_breakout_thresh = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( speed == 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( MIN ( cm -> width , cm -> height ) >= 720 ) <S2SV_EndBug> <S2SV_StartBug> sf -> auto_mv_step_size = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_rd_breakout = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> auto_mv_step_size = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_LOW_MOTION ; <S2SV_EndBug> <S2SV_StartBug> sf -> adaptive_rd_thresh = 2 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_ALL ; <S2SV_EndBug> <S2SV_StartBug> sf -> subpel_iters_per_step = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; <S2SV_EndBug> <S2SV_StartBug> sf -> lpf_pick = LPF_PICK_FROM_Q ; <S2SV_EndBug> <S2SV_StartBug> ( cm -> current_video_frame + 1 ) % sf -> last_partitioning_redo_frequency ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> subpel_force_stop = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_uv_mode_mask [ i ] = INTRA_DC_ONLY ; <S2SV_EndBug> <S2SV_StartBug> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_ONLY ; <S2SV_EndBug> <S2SV_StartBug> sf -> encode_breakout_thresh = 1000 ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_32X32 ] = 1 << INTER_OFFSET ( ZEROMV ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_32X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_64X32 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> disable_inter_mode_mask [ BLOCK_64X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; <S2SV_EndBug> <S2SV_StartBug> sf -> max_partition_size = BLOCK_32X32 ; <S2SV_EndBug> <S2SV_StartBug> sf -> min_partition_size = BLOCK_8X8 ; <S2SV_EndBug> <S2SV_StartBug> sf -> partition_check = <S2SV_EndBug> <S2SV_StartBug> sf -> max_delta_qindex = ( cm -> frame_type == KEY_FRAME ) ? 20 : 15 ; <S2SV_EndBug> <S2SV_StartBug> sf -> search_method = FAST_DIAMOND ; <S2SV_EndBug> <S2SV_StartBug> sf -> allow_skip_recode = 0 ; <S2SV_EndBug> <S2SV_StartBug> sf -> partition_search_type = SOURCE_VAR_BASED_PARTITION ; <S2SV_EndBug> <S2SV_StartBug> sf -> search_method = FAST_DIAMOND ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> zend_throw_error ( exception_ce , message ) ; <S2SV_EndBug>
<S2SV_StartBug> box -> len = len ; <S2SV_EndBug> <S2SV_StartBug> jas_eprintf ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug>
<S2SV_StartBug> newnp -> ipv6_ac_list = NULL ; <S2SV_EndBug> <S2SV_StartBug> newinet -> inet_opt = NULL ; <S2SV_EndBug>
<S2SV_StartBug> unix_notinflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> int recon_uvoffset ) <S2SV_EndBug> <S2SV_StartBug> unsigned int motion_magnitude2 ; <S2SV_EndBug> <S2SV_StartBug> if ( zero_frame ) <S2SV_EndBug> <S2SV_StartBug> int sse_diff = zero_mv_sse - best_sse ; <S2SV_EndBug> <S2SV_StartBug> if ( frame == INTRA_FRAME || <S2SV_EndBug> <S2SV_StartBug> ( ( unsigned int ) ( mv_row * mv_row + mv_col * mv_col ) <S2SV_EndBug> <S2SV_StartBug> if ( best_sse > SSE_THRESHOLD || motion_magnitude2 <S2SV_EndBug> <S2SV_StartBug> > 8 * NOISE_MOTION_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> decision = vp8_denoiser_filter ( & denoiser -> yv12_mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> vp8_copy_mem16x16 ( <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return mutt_bcache_del ( bcache , id ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! unconditional ( & e -> ip ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ipv6_addr_type ( & lsa -> l2tp_addr ) & IPV6_ADDR_LINKLOCAL ) <S2SV_EndBug>
<S2SV_StartBug> kvm_async_pf_hash_reset ( vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> tcon -> bad_network_name = true ; <S2SV_EndBug>
<S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , SCM_TSTAMP_SND ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( xWantedSize > 0 ) <S2SV_EndBug> <S2SV_StartBug> xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_EndBug> <S2SV_StartBug> mtCOVERAGE_TEST_MARKER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( realms == NULL || realms [ 0 ] == '\\0' || <S2SV_EndBug>
<S2SV_StartBug> static int read_mv_component ( vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> const int sign = vp9_read ( r , mvcomp -> sign ) ; <S2SV_EndBug> <S2SV_StartBug> const int mv_class = vp9_read_tree ( r , vp9_mv_class_tree , mvcomp -> classes ) ; <S2SV_EndBug> <S2SV_StartBug> d = vp9_read_tree ( r , vp9_mv_class0_tree , mvcomp -> class0 ) ; <S2SV_EndBug> <S2SV_StartBug> d |= vp9_read ( r , mvcomp -> bits [ i ] ) << i ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> fr = vp9_read_tree ( r , vp9_mv_fp_tree , class0 ? mvcomp -> class0_fp [ d ] <S2SV_EndBug> <S2SV_StartBug> hp = usehp ? vp9_read ( r , class0 ? mvcomp -> class0_hp : mvcomp -> hp ) <S2SV_EndBug> <S2SV_StartBug> mag = vp9_get_mv_mag ( mv_class , ( d << 3 ) | ( fr << 1 ) | hp ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_EndBug> <S2SV_StartBug> if ( ses -> server -> sign ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( info . si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug>
<S2SV_StartBug> lxc_attach_options_t * options = payload -> options ; <S2SV_EndBug> <S2SV_StartBug> if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) ) { <S2SV_EndBug> <S2SV_StartBug> int proc_mounted ; <S2SV_EndBug> <S2SV_StartBug> proc_mounted = mount_proc_if_needed ( "/" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = lsm_process_label_set ( init_ctx -> lsm_label , <S2SV_EndBug> <S2SV_StartBug> rexit ( payload -> exec_function ( payload -> exec_payload ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static void evtchn_2l_handle_events ( unsigned cpu ) <S2SV_EndBug> <S2SV_StartBug> irq = get_evtchn_to_irq ( port ) ; <S2SV_EndBug>
<S2SV_StartBug> state -> space = strdup ( RSTRING_PTR ( space ) ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( name , fp + n , name_len ) ; n += name_len ; <S2SV_EndBug> <S2SV_StartBug> attr_len = fp [ n ++ ] ; <S2SV_EndBug>
<S2SV_StartBug> assert ( n >= 0 && n < 32 ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int active_best_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> int qindex = rc -> last_boosted_qindex ; <S2SV_EndBug> <S2SV_StartBug> double last_boosted_q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> last_boosted_q * 0.75 ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = MAX ( qindex + delta_qindex , rc -> best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( active_worst_quality , <S2SV_EndBug> <S2SV_StartBug> q_val = vp9_convert_qindex_to_q ( active_best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> q_val * q_adj_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( q < cpi -> cq_target_quality ) <S2SV_EndBug> <S2SV_StartBug> } else if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = cpi -> cq_target_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) && <S2SV_EndBug> <S2SV_StartBug> ( active_best_quality < cpi -> cq_target_quality ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME && ! rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = ( active_worst_quality + active_best_quality * 3 ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> q = rc -> last_boosted_qindex ; <S2SV_EndBug> <S2SV_StartBug> if ( q > * top_index ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = q ; <S2SV_EndBug> <S2SV_StartBug> * bottom_index = q ; <S2SV_EndBug>
<S2SV_StartBug> static void rate_block ( int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> args -> rate = cost_coeffs ( args -> x , plane , block , args -> t_above + x_idx , <S2SV_EndBug>
<S2SV_StartBug> int is_udplite = IS_UDPLITE ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( udp_lib_checksum_complete ( skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_csum_unnecessary ( skb ) ) <S2SV_EndBug>
<S2SV_StartBug> static void udf_pc_to_char ( struct super_block * sb , unsigned char * from , <S2SV_EndBug> <S2SV_StartBug> int fromlen , unsigned char * to ) <S2SV_EndBug> <S2SV_StartBug> unsigned char * p = to ; <S2SV_EndBug> <S2SV_StartBug> p = to ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( p , "./" , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> p += udf_get_filename ( sb , pc -> componentIdent , p , <S2SV_EndBug> <S2SV_StartBug> * p ++ = '/' ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> memset ( sax , 0 , sizeof ( sax ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( is_authenticated ( req , res ) ) { <S2SV_EndBug>
<S2SV_StartBug> xref -> entries = calloc ( 1 , xref -> n_entries * sizeof ( struct _xref_entry ) ) ; <S2SV_EndBug>
<S2SV_StartBug> memory_length += extra_length - available_length + BLOCK_QUEUE ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , qp -> d_memory , memory_length ) ; <S2SV_EndBug>
<S2SV_StartBug> || no_port_forwarding_flag || options . disable_forwarding ) { <S2SV_EndBug>
<S2SV_StartBug> baswap ( ( void * ) dst , & l2cap_pi ( sock -> sk ) -> chan -> dst ) ; <S2SV_EndBug>
<S2SV_StartBug> kret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( dst_group && ! netlink_capable ( sock , NL_NONROOT_SEND ) ) <S2SV_EndBug>
<S2SV_StartBug> MB_PREDICTION_MODE vp9_above_block_mode ( const MODE_INFO * cur_mi , <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return IMPEG2D_MB_TEX_DECODE_ERR ; <S2SV_EndBug>
<S2SV_StartBug> enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ; <S2SV_EndBug> <S2SV_StartBug> rs -> respond = respond ; <S2SV_EndBug>
<S2SV_StartBug> image -> colorspace = RGBColorspace ; <S2SV_EndBug>
<S2SV_StartBug> const int w = vpx_img_plane_width ( img , plane ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> u64 irq_time ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void ntlm_write_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> skb = sock_alloc_send_skb ( sk , <S2SV_EndBug> <S2SV_StartBug> skb -> csum = 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( length + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> inode_init_once ( & ei -> vfs_inode ) ; <S2SV_EndBug>
<S2SV_StartBug> return __load_segment_descriptor ( ctxt , selector , seg , cpl , false ) ; <S2SV_EndBug>
<S2SV_StartBug> char * out = mutt_mem_malloc ( 3 * len / 4 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int dlen = mutt_b64_decode ( out , it ) ; <S2SV_EndBug>
<S2SV_StartBug> struct VpxEncoderConfig * global ) { <S2SV_EndBug> <S2SV_StartBug> global -> codec -> fourcc ) ; <S2SV_EndBug>
<S2SV_StartBug> free_ep_req ( midi -> out_ep , req ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> list_del_rcu ( & ctx -> clist ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vmcs_write32 ( TPR_THRESHOLD , vmcs12 -> tpr_threshold ) ; <S2SV_EndBug>
<S2SV_StartBug> static void prob_diff_update ( const vp9_tree_index * tree , <S2SV_EndBug> <S2SV_StartBug> vp9_prob probs [ ] , <S2SV_EndBug> <S2SV_StartBug> int n , vp9_writer * w ) { <S2SV_EndBug>
<S2SV_StartBug> list_del ( & ti -> active_list ) ; <S2SV_EndBug>
<S2SV_StartBug> char * message = NULL ; <S2SV_EndBug> <S2SV_StartBug> char * language = NULL ; <S2SV_EndBug> <S2SV_StartBug> size_t reason = _libssh2_ntohu32 ( data + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> message = ( char * ) data + 9 ; <S2SV_EndBug> <S2SV_StartBug> language = ( char * ) data + 9 + message_len + 4 ; <S2SV_EndBug> <S2SV_StartBug> message_len = _libssh2_ntohu32 ( data + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> message = ( char * ) data + 6 ; <S2SV_EndBug> <S2SV_StartBug> language = ( char * ) data + 10 + message_len ; <S2SV_EndBug> <S2SV_StartBug> if ( datalen >= ( 6 + len ) ) { <S2SV_EndBug>
<S2SV_StartBug> SvcInternal * const si = ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug>
<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> static struct btrfs_dir_item * btrfs_match_dir_item_name ( struct btrfs_root * root , <S2SV_EndBug>
<S2SV_StartBug> return ms ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> png_structp p = ( png_structp ) png_ptr ; <S2SV_EndBug> <S2SV_StartBug> png_uint_32 save_flags = p -> flags ; <S2SV_EndBug>
<S2SV_StartBug> pkt . kind = VPX_CODEC_STATS_PKT ; <S2SV_EndBug>
<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> grub_memcpy ( buf , data + pos + real_offset , len ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = sizeof ( struct sockaddr_x25 ) ; <S2SV_EndBug>
<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( WARN ( irq >= nr_irqs , "Invalid<S2SV_blank>irq<S2SV_blank>%d!\\n" , irq ) ) <S2SV_EndBug> <S2SV_StartBug> return info_for_irq ( irq ) -> evtchn ; <S2SV_EndBug>
<S2SV_StartBug> bufp += bytes_read ; <S2SV_EndBug>
<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug>
<S2SV_StartBug> args -> rmtblkno = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = args -> rmtblkcnt2 ; <S2SV_EndBug>
<S2SV_StartBug> union sctp_addr_param * addr_param ; <S2SV_EndBug> <S2SV_StartBug> addr_param = ( union sctp_addr_param * ) hdr -> params ; <S2SV_EndBug> <S2SV_StartBug> ( sctp_paramhdr_t * ) ( ( void * ) addr_param + length ) , <S2SV_EndBug>
<S2SV_StartBug> vp9_writer * w , TOKENEXTRA * * tok , TOKENEXTRA * tok_end ) { <S2SV_EndBug> <S2SV_StartBug> int mi_row , mi_col ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> mb . e_mbd . left_seg_context ) ; <S2SV_EndBug>
<S2SV_StartBug> bucket = apr_bucket_eos_create ( r -> connection -> bucket_alloc ) ; <S2SV_EndBug>
<S2SV_StartBug> checkstackGC ( L , p -> maxstacksize + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> const char * sender ; <S2SV_EndBug> <S2SV_StartBug> sd_bus_message_handler_t callback ; <S2SV_EndBug> <S2SV_StartBug> assert ( registry ) ; <S2SV_EndBug>
<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( * ++ ptr == \'"\' ) && ( strchr ( & ptr [ 1 ] , \'"\' ) != NULL ) ) { <S2SV_EndBug>
<S2SV_StartBug> goto err_reprs_clean ; <S2SV_EndBug> <S2SV_StartBug> nfp_repr_free ( repr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug> <S2SV_StartBug> nfp_port_free ( port ) ; <S2SV_EndBug>
<S2SV_StartBug> proc = rqstp -> rq_procinfo ; <S2SV_EndBug>
<S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> GSTD_GSS_ERROR ( maj , min , NULL , "gss_accept_sec_context" ) ; <S2SV_EndBug>
<S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> ( * respond ) ( arg , 0 , NULL , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> struct twopass_rc * const twopass = & svc -> layer_context [ i ] . twopass ; <S2SV_EndBug>
<S2SV_StartBug> while ( peek ( s ) != '>' && ! eol ( s ) ) <S2SV_EndBug>
<S2SV_StartBug> avio_skip ( pb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sscanf ( val , "%" SCNu32 "%" SCNu32 "%" SCNu32 "%" SCNu32 , <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < 4 ; idx ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( drop_privileges ( nagios_user , nagios_group ) == ERROR ) { <S2SV_EndBug> <S2SV_StartBug> exit ( EXIT_FAILURE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> vma = find_vma_prev ( mm , start , & prev ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; <S2SV_EndBug>
<S2SV_StartBug> struct dentry * dir = nd -> path . dentry ; <S2SV_EndBug> <S2SV_StartBug> error = may_create_in_sticky ( dir , <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_set_previewpp ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> <S2SV_StartBug> vp8_postproc_cfg_t * data = va_arg ( args , vp8_postproc_cfg_t * ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ctr_id ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> args -> skippable [ 0 ] &= ( ! args -> x -> plane [ plane ] . eobs [ block ] ) ; <S2SV_EndBug>
<S2SV_StartBug> int nAlloc = ( pIn ? pIn [ 0 ] * 2 : 10 ) + nInt ; <S2SV_EndBug>
<S2SV_StartBug> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%u" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> <S2SV_StartBug> l_row -- ; <S2SV_EndBug>
<S2SV_StartBug> if ( * s == '#' ) { <S2SV_EndBug> <S2SV_StartBug> if ( * s == 'x' || * s == 'X' ) { <S2SV_EndBug> <S2SV_StartBug> while ( * s ) { <S2SV_EndBug> <S2SV_StartBug> while ( isDIGIT ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( isALNUM ( * s ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * s == ';' ) <S2SV_EndBug>
<S2SV_StartBug> node * n = Ta3Parser_ParseStringObject ( s , filename , <S2SV_EndBug>
<S2SV_StartBug> int openasuser ; <S2SV_EndBug> <S2SV_StartBug> int should_free_authpending_file = 0 ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , authfile_dir_len , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cfg -> auth_file = buf ; <S2SV_EndBug> <S2SV_StartBug> openasuser = geteuid ( ) == 0 && cfg -> openasuser ; <S2SV_EndBug> <S2SV_StartBug> if ( openasuser ) { <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( pw_s . pw_uid ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( "Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>user<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> DBG ( "Switched<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( "Switched<S2SV_blank>back<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>0" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( item_num > 65536 ) { <S2SV_EndBug>
<S2SV_StartBug> for ( ( pad = w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) <S2SV_EndBug>
<S2SV_StartBug> OPJ_UINT32 x , y ; <S2SV_EndBug> <S2SV_StartBug> x = y = 0U ; <S2SV_EndBug> <S2SV_StartBug> * pix = c1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return OPJ_TRUE ; <S2SV_EndBug>
<S2SV_StartBug> id = ipc_addid ( & msg_ids ( ns ) , & msq -> q_perm , ns -> msg_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> msq -> q_stime = msq -> q_rtime = 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , filter == SWITCHABLE ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , filter_to_literal [ filter ] , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void read_switchable_interp_probs ( FRAME_CONTEXT * fc , vp9_reader * r ) { <S2SV_EndBug>
<S2SV_StartBug> JAS_DBGLOG ( 101 , ( "jas_malloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%zu\\n" , size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret <= 0 ? ret : - EIO ; <S2SV_EndBug>
<S2SV_StartBug> data [ l ++ ] = SEG_REG_PREFIXES [ op -> operands [ 1 ] . regs [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x8b ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = offset ; <S2SV_EndBug> <S2SV_StartBug> return l ; <S2SV_EndBug> <S2SV_StartBug> if ( a -> bits == 64 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x25 ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x5 ; <S2SV_EndBug> <S2SV_StartBug> if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( console -> name , path , "none" , MS_BIND , 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> static int fsmVerify ( const char * path , rpmfi fi ) <S2SV_EndBug> <S2SV_StartBug> rc = fsmStat ( path , 0 , & dsb ) ; <S2SV_EndBug> <S2SV_StartBug> if ( S_ISDIR ( dsb . st_mode ) ) return 0 ; <S2SV_EndBug>
<S2SV_StartBug> int r = ( int ) recv ( p_scb -> socket_id [ 1 ] , p_dcb -> p_tx_pkt , <S2SV_EndBug> <S2SV_StartBug> p_dcb -> mtu , MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> dentry -> d_fsdata = ( void * ) ns -> ops ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t * buf = mempool_alloc ( buf_pool ) ; <S2SV_EndBug> <S2SV_StartBug> uint8_t * ptr ; <S2SV_EndBug> <S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> ptr = buf + sizeof ( pack -> hdr ) ; <S2SV_EndBug> <S2SV_StartBug> avp -> M = attr -> M ; <S2SV_EndBug> <S2SV_StartBug> avp -> length = sizeof ( * avp ) + attr -> length ; <S2SV_EndBug> <S2SV_StartBug> n = sendto ( sock , buf , ntohs ( pack -> hdr . length ) , 0 , <S2SV_EndBug> <S2SV_StartBug> if ( n != ntohs ( pack -> hdr . length ) ) { <S2SV_EndBug> <S2SV_StartBug> log_warn ( "l2tp:<S2SV_blank>short<S2SV_blank>write<S2SV_blank>(%i/%i)\\n" , n , ntohs ( pack -> hdr . length ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || <S2SV_EndBug>
<S2SV_StartBug> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { <S2SV_EndBug>
<S2SV_StartBug> "zlib@openssh.com,zlib,none" : "none,zlib@openssh.com,zlib" ; <S2SV_EndBug>
<S2SV_StartBug> len = ( ms -> c . len += 20 ) * sizeof ( * ms -> c . li ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sk -> sk_state != TCP_CLOSE ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> void close_connection ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> while ( res == 0 && dev ) { <S2SV_EndBug> <S2SV_StartBug> dev = NULL ; <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> case CFM_CHASSIS_ID_MAC_ADDRESS : <S2SV_EndBug> <S2SV_StartBug> hexdump |= cfm_network_addr_print ( ndo , tptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mgmt_addr_length ) { <S2SV_EndBug> <S2SV_StartBug> cfm_tlv_len -= mgmt_addr_length ; <S2SV_EndBug> <S2SV_StartBug> tptr += cfm_tlv_len ; <S2SV_EndBug>
<S2SV_StartBug> jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> jpc_iict ( tile -> tcomps [ 0 ] . data , tile -> tcomps [ 1 ] . data , <S2SV_EndBug>
<S2SV_StartBug> if ( ret ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> ptr -> kernel_data = NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ISOFS_SB ( inode -> i_sb ) -> s_rock ) <S2SV_EndBug> <S2SV_StartBug> if ( ( strlen ( retname ) + rr -> len - 5 ) >= 254 ) { <S2SV_EndBug> <S2SV_StartBug> strncat ( retname , rr -> u . NM . name , rr -> len - 5 ) ; <S2SV_EndBug> <S2SV_StartBug> retnamlen += rr -> len - 5 ; <S2SV_EndBug>
<S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( inbuffer = ReadInput ( inname ) ) == 0 ) return ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , delim ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( term , sizeof ( term ) , pat -> p . str ) ; <S2SV_EndBug>
<S2SV_StartBug> static INLINE void right_shift_8x8 ( __m128i * res , int const bit ) { <S2SV_EndBug> <S2SV_StartBug> if ( bit_m02 >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , bit ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ext4_handle_valid ( handle ) ) <S2SV_EndBug>
<S2SV_StartBug> newsk -> sk_mark = inet_rsk ( req ) -> ir_mark ; <S2SV_EndBug>
<S2SV_StartBug> status = nfsd4_encode_bitmap ( xdr , NFSD_SUPPATTR_EXCLCREAT_WORD0 , <S2SV_EndBug>
<S2SV_StartBug> if ( wsctx && wsctx -> readbuflen ) <S2SV_EndBug>
<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug>
<S2SV_StartBug> prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> pExpr -> iTable = pX -> iIdxCur ; <S2SV_EndBug>
<S2SV_StartBug> char * path = server . diskstore_path ; <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT32 ( s , scopeCount ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_idct4x4_add ( const int16_t * input , uint8_t * dest , int stride , int eob ) { <S2SV_EndBug> <S2SV_StartBug> vp9_idct4x4_16_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct4x4_1_add ( input , dest , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> INST_HANDLER ( sts ) { <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxw , maxh , max ; <S2SV_EndBug> <S2SV_StartBug> unsigned int i , j ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0U ; i < maxh ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> if ( j < maxw ) { <S2SV_EndBug> <S2SV_StartBug> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> <S2SV_StartBug> if ( g ) free ( g ) ; <S2SV_EndBug> <S2SV_StartBug> if ( b ) free ( b ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , j , offset ; <S2SV_EndBug> <S2SV_StartBug> uint32_t loc ; <S2SV_EndBug> <S2SV_StartBug> struct sparablePartitionMap * spm = <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( ret != 0 ) <S2SV_EndBug> <S2SV_StartBug> DATA_SYNC ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = x * size + b ; <S2SV_EndBug> <S2SV_StartBug> if ( y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = ( ( x * sy + y ) * size ) + b ; <S2SV_EndBug> <S2SV_StartBug> if ( z < sz && y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> ( ( char * ) data -> data ) [ j ] = output [ i ] ; <S2SV_EndBug>
<S2SV_StartBug> ExprList_Init ( & state -> expr_list ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! awaiting_character ) { <S2SV_EndBug>
<S2SV_StartBug> int sent = send ( sock -> our_fd , buf , len , MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_type ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ExceptHandler" ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 reset ; <S2SV_EndBug> <S2SV_StartBug> hx = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ret = usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) ) != 1 ) <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug> <S2SV_StartBug> reset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret || usb_cypress_writemem ( udev , cypress [ type ] . cpu_cs_register , & reset , 1 ) != 1 ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( hx ) ; <S2SV_EndBug>
<S2SV_StartBug> void set_header ( HttpResponse res , const char * name , const char * value ) { <S2SV_EndBug> <S2SV_StartBug> h -> value = Str_dup ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> char * mask2 , * mask_decoded , * mask_decoded2 , * mask_decoded3 , * mask_decoded4 ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded = NULL ; <S2SV_EndBug> <S2SV_StartBug> mask2 = weechat_string_replace ( mask , dir_separator , "\\01" ) ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 = malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! mask_decoded5 ) <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> strftime ( mask_decoded5 , length - 1 , mask_decoded4 , date_tmp ) ; <S2SV_EndBug> <S2SV_StartBug> weechat_string_tolower ( mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> mask , mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mask_decoded ) <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded2 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded3 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded4 ) ; <S2SV_EndBug> <S2SV_StartBug> return mask_decoded5 ; <S2SV_EndBug>
<S2SV_StartBug> xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) && <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , rel ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( transfer_encoding != NULL ) && ( strstr ( transfer_encoding , "chunked" ) != NULL ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> return get_desc_base ( desc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( read != entry . uncompressed_filesize ) { <S2SV_EndBug>
<S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret ) { <S2SV_EndBug> <S2SV_StartBug> uwq = list_first_entry ( & fork_event , <S2SV_EndBug> <S2SV_StartBug> userfaultfd_event_complete ( ctx , uwq ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & ctx -> event_wqh . lock ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_subtract_block ( bh , bw , p -> src_diff , bw , p -> src . buf , p -> src . stride , <S2SV_EndBug>
<S2SV_StartBug> static unsigned short len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> return g_NPN_GetValue_real ( instance , variable , value ) ; <S2SV_EndBug>
<S2SV_StartBug> ( IN_DEV_SHARED_MEDIA ( out_dev ) || <S2SV_EndBug> <S2SV_StartBug> inet_addr_onlink ( out_dev , saddr , FIB_RES_GW ( * res ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> cifs_find_smb_ses ( struct TCP_Server_Info * server , char * username ) <S2SV_EndBug> <S2SV_StartBug> list_for_each ( tmp , & server -> smb_ses_list ) { <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( ses -> userName , username , MAX_USERNAME_SIZE ) ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 4 ) <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 2 ) <S2SV_EndBug>
<S2SV_StartBug> skb = sock_alloc_send_skb ( sk , <S2SV_EndBug> <S2SV_StartBug> skb -> csum = 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> PIXA * pixa ; <S2SV_EndBug> <S2SV_StartBug> pix1 = pixaDisplayTiledAndScaled ( pixa , 32 , 400 , 4 , 0 , 20 , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> pixDisplayWithTitle ( pix1 , 100 , 0 , NULL , rp -> display ) ; <S2SV_EndBug> <S2SV_StartBug> pixDestroy ( & pix1 ) ; <S2SV_EndBug>
<S2SV_StartBug> strncpy ( str , "?[" , len ) ; <S2SV_EndBug>
<S2SV_StartBug> static void count_segs ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi = mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> const BLOCK_SIZE bsize = mi_8x8 [ 0 ] -> mbmi . sb_type ; <S2SV_EndBug> <S2SV_StartBug> const int pred_segment_id = vp9_get_segment_id ( cm , cm -> last_frame_seg_map , <S2SV_EndBug>
<S2SV_StartBug> if ( dst == NULL || src == NULL ) return ERROR ; <S2SV_EndBug>

<S2SV_StartBug> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen ( 0 , size ) : <S2SV_EndBug>
<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> malloc_called += 1 ; <S2SV_EndBug>
<S2SV_StartBug> StringBuffer_append ( res -> outputbuffer , "%s" , buf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 60 && rdesc [ 39 ] == 0x2a && rdesc [ 40 ] == 0xf5 && <S2SV_EndBug>
<S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING ) <S2SV_EndBug> <S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING_V1_2 ) <S2SV_EndBug>
<S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( t + 15 ) && HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 1 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_OP ( t + 15 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( HAVE_IP ( 6 ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug> <S2SV_StartBug> if ( likely ( HAVE_IP ( 6 ) && HAVE_OP ( 4 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> NEED_IP ( t + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> NEED_OP ( t ) ; <S2SV_EndBug>
<S2SV_StartBug> boolean_t owner = B_FALSE ; <S2SV_EndBug> <S2SV_StartBug> mutex_enter ( & zdp -> z_acl_lock ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( o2 + 10 < o2 ) || ( o2 + 10 < 10 ) || ( o2 + 10 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 4 < o2 ) || ( o2 + 4 < 4 ) || ( o2 + 4 > buf_size ) ) return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 12 < o2 ) || ( o2 + 12 < 12 ) || ( o2 + 12 > buf_size ) ) return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( o2 + 2 < o2 ) || ( o2 + 2 < 2 ) || ( o2 + 2 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> "ExifMnoteOlympus" , "Short<S2SV_blank>MakerNote" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dataofs + s > buf_size && n -> version == sanyoV1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < dataofs ) || ( dataofs + s < s ) || <S2SV_EndBug>
<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( stringset == ETH_SS_STATS ) <S2SV_EndBug>
<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char sbuf [ 128 ] ; <S2SV_EndBug> <S2SV_StartBug> err = __video_do_ioctl ( file , cmd , parg ) ; <S2SV_EndBug>
<S2SV_StartBug> 0xD5 , 0x75 , 0xF1 , 0x23 , 0xC1 , 0x81 , 0x4B , 0x44 , 0x23 , 0xBE , <S2SV_EndBug> <S2SV_StartBug> 0xC5 , 0x5F , 0x86 , 0x42 , 0x7F , 0x38 , 0xA3 , 0x95 , 0xEE , 0xA0 , <S2SV_EndBug>
<S2SV_StartBug> static char * print_string_ptr ( const char * str ) <S2SV_EndBug> <S2SV_StartBug> char * ptr2 , * out ; <S2SV_EndBug> <S2SV_StartBug> int len = 0 ; <S2SV_EndBug> <S2SV_StartBug> return cJSON_strdup ( "" ) ; <S2SV_EndBug> <S2SV_StartBug> ++ len ; <S2SV_EndBug> <S2SV_StartBug> ++ ptr ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( out = ( char * ) cJSON_malloc ( len + 3 ) ) ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , MB_STUFFING_CODE_LEN ) == MB_STUFFING_CODE ) <S2SV_EndBug>
<S2SV_StartBug> alloc_limit_assert ( "checked_xcalloc" , ( num * size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * out = mutt_mem_malloc ( 3 * len / 4 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int dlen = mutt_b64_decode ( out , it ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock || ( count && ! buf ) ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( errstr , sizeof ( errstr ) , list . name ) ; <S2SV_EndBug>
<S2SV_StartBug> mmu_notifier_mm_init ( mm ) ; <S2SV_EndBug>
<S2SV_StartBug> const int qzbin_factor = q == 0 ? 64 : ( vp9_dc_quant ( q , 0 ) < 148 ? 84 : 80 ) ; <S2SV_EndBug> <S2SV_StartBug> quant = i == 0 ? vp9_dc_quant ( q , cm -> y_dc_delta_q ) <S2SV_EndBug> <S2SV_StartBug> : vp9_ac_quant ( q , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> y_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quant = i == 0 ? vp9_dc_quant ( q , cm -> uv_dc_delta_q ) <S2SV_EndBug> <S2SV_StartBug> : vp9_ac_quant ( q , cm -> uv_ac_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> quants -> uv_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> uv_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quants -> a_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; <S2SV_EndBug> <S2SV_StartBug> cm -> a_dequant [ q ] [ i ] = quant ; <S2SV_EndBug> <S2SV_StartBug> quants -> y_quant_shift [ q ] [ i ] = quants -> y_quant_shift [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> y_dequant [ q ] [ i ] = cm -> y_dequant [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> quants -> uv_quant_shift [ q ] [ i ] = quants -> uv_quant_shift [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> uv_dequant [ q ] [ i ] = cm -> uv_dequant [ q ] [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug>
<S2SV_StartBug> static inline int <S2SV_EndBug>
<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug>
<S2SV_StartBug> msg -> fp = mutt_bcache_get ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> fp = mutt_bcache_put ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> mutt_bcache_commit ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len=%d<S2SV_blank>method=%s" , len - 4 , <S2SV_EndBug> <S2SV_StartBug> if ( 1 < ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + len ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( doff + s < doff ) || ( doff + s < s ) || ( doff + s > size ) ) { <S2SV_EndBug> <S2SV_StartBug> "Tag<S2SV_blank>data<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)" , doff + s , size ) ; <S2SV_EndBug>
<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug> <S2SV_StartBug> p = strchr ( p + 1 , '<S2SV_blank>' ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( svc ) ; <S2SV_EndBug> <S2SV_StartBug> const int layer = svc -> temporal_layer_id ; <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = oxcf -> framerate / oxcf -> ts_rate_decimator [ layer ] ; <S2SV_EndBug> <S2SV_StartBug> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; <S2SV_EndBug> <S2SV_StartBug> if ( layer == 0 ) { <S2SV_EndBug> <S2SV_StartBug> lc -> avg_frame_size = lrc -> av_per_frame_bandwidth ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> framerate / oxcf -> ts_rate_decimator [ layer - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> ts_target_bitrate [ layer - 1 ] * 1000 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ses -> server -> sign && ses -> server -> ops -> generate_signingkey ) { <S2SV_EndBug> <S2SV_StartBug> rc = ses -> server -> ops -> generate_signingkey ( ses ) ; <S2SV_EndBug> <S2SV_StartBug> goto keygen_exit ; <S2SV_EndBug> <S2SV_StartBug> keygen_exit : <S2SV_EndBug>
<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> f = po -> fanout ; <S2SV_EndBug> <S2SV_StartBug> if ( ! f ) <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> memcpy ( own_dir , "." , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t id ; <S2SV_EndBug>
<S2SV_StartBug> dbuf_copy ( c -> infile , pos + 4 , data_len , d -> iccprofile_file ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> int size_chk , err ; <S2SV_EndBug> <S2SV_StartBug> size_chk = chunk_size - headroom - XDP_PACKET_HEADROOM ; <S2SV_EndBug>
<S2SV_StartBug> int rec ; <S2SV_EndBug> <S2SV_StartBug> int rec_len = file -> record_length ; <S2SV_EndBug> <S2SV_StartBug> for ( rec = 1 ; ; rec ++ ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( a_ctx , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( l_ctx , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> static const char * parse_value ( cJSON * item , const char * value ) <S2SV_EndBug> <S2SV_StartBug> return parse_string ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_number ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_array ( item , value ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_object ( item , value ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_to_user ( uaddr , ( ( u32 * ) regs ) + off , KVM_REG_SIZE ( reg -> id ) ) ) <S2SV_EndBug>
<S2SV_StartBug> get_page ( * page ) ; <S2SV_EndBug>
<S2SV_StartBug> ses = cifs_find_smb_ses ( server , volume_info -> username ) ; <S2SV_EndBug>
<S2SV_StartBug> dbg_hid ( "%s,<S2SV_blank>size:%d\\n" , __func__ , size ) ; <S2SV_EndBug>
<S2SV_StartBug> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n" <S2SV_EndBug>
<S2SV_StartBug> int xml_init ( modsec_rec * msr , char * * error_msg ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.data.%d" , gplot -> rootname , gplot -> nplots ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%f<S2SV_blank>%f\\n" , valx , valy ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , caplen - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> dev_data = pci_get_drvdata ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return pci_write_config_word ( dev , offset , value ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC ) && * rsize >= 90 && rdesc [ 83 ] == 0x26 && <S2SV_EndBug> <S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC_REL_ABS ) && * rsize >= 50 && <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux <S2SV_EndBug>
<S2SV_StartBug> if ( strcmp ( im -> mode , "1" ) == 0 && state -> xsize > state -> bytes * 8 ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( im -> mode , "P" ) == 0 && state -> xsize > state -> bytes ) { <S2SV_EndBug> <S2SV_StartBug> ptr = buf ; <S2SV_EndBug>
<S2SV_StartBug> dname = malloc ( strlen ( name ) + 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> __mark_reg_known ( regs + insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug>
<S2SV_StartBug> strncat ( params , gtk_entry_get_text ( GTK_ENTRY ( entry1 ) ) , PARAMS_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( params , "/" , PARAMS_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( params , gtk_entry_get_text ( GTK_ENTRY ( entry2 ) ) , PARAMS_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( poll ( & pfd , 1 , 500 ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( sent = send ( fd , p , len , MSG_NOSIGNAL ) ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> bufobj = PyObject_CallObject ( tok -> decoding_readline , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> gdImagePtr im ; <S2SV_EndBug>
<S2SV_StartBug> # if PY_MINOR_VERSION >= 4 <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> u32 i = 0 , j , page_offset = 0 , sg_per_table , sg_tables , total_sg_needed ; <S2SV_EndBug> <S2SV_StartBug> struct rd_dev_sg_table * sg_table ; <S2SV_EndBug> <S2SV_StartBug> while ( total_sg_needed ) { <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , gplot -> title ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , gplot -> xlabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , gplot -> ylabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>logscale<S2SV_blank>x" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>logscale<S2SV_blank>y" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> skb_free_datagram ( sk , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> follow_dotdot ( nd ) ; <S2SV_EndBug>
<S2SV_StartBug> list = lptr = ( nodeitem * ) palloc ( sizeof ( nodeitem ) * ( num + 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ld -> bytes_left = ld -> buffer_size - words * 4 ; <S2SV_EndBug>
<S2SV_StartBug> profile = BlobToStringInfo ( ( const void * ) NULL , length ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> sync . clock_rate = FST_RDL ( card , portConfig [ i ] . lineSpeed ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pos >= GDT_ENTRY_TLS_ENTRIES * sizeof ( struct user_desc ) || <S2SV_EndBug> <S2SV_StartBug> set_tls_desc ( target , <S2SV_EndBug>
<S2SV_StartBug> char buf [ 32 ] , * e ; <S2SV_EndBug>
<S2SV_StartBug> ISOFS_SB ( inode -> i_sb ) -> s_rock = 1 ; <S2SV_EndBug>
<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> disk -> queue = NULL ; <S2SV_EndBug>
<S2SV_StartBug> static int getnum ( lua_State * L , const char * * fmt , int df ) { <S2SV_EndBug> <S2SV_StartBug> if ( a > ( INT_MAX / 10 ) || a * 10 > ( INT_MAX - ( * * fmt - '0' ) ) ) <S2SV_EndBug>
<S2SV_StartBug> void vp9_choose_segmap_coding_method ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> vp9_prob no_pred_tree [ SEG_TREE_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob t_pred_tree [ SEG_TREE_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob t_nopred_prob [ PREDICTION_PROBS ] ; <S2SV_EndBug> <S2SV_StartBug> const int mis = cm -> mi_stride ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( seg -> pred_probs , 255 , sizeof ( seg -> pred_probs ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_tile_init ( & tile , cm , 0 , tile_col ) ; <S2SV_EndBug> <S2SV_StartBug> mi_row += 8 , mi_ptr += 8 * mis ) { <S2SV_EndBug> <S2SV_StartBug> count_segs_sb ( cpi , & tile , mi , no_pred_segcounts , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> tree_probs , t_pred_tree , sizeof ( t_pred_tree ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> pred_probs , t_nopred_prob , sizeof ( t_nopred_prob ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( seg -> tree_probs , no_pred_tree , sizeof ( no_pred_tree ) ) ; <S2SV_EndBug>
<S2SV_StartBug> g_return_if_fail ( RS_IS_FILTER ( filter ) ) ; <S2SV_EndBug> <S2SV_StartBug> g_file_set_contents ( "/tmp/rs-filter-graph" , str -> str , str -> len , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( "dot<S2SV_blank>-Tpng<S2SV_blank>>/tmp/rs-filter-graph.png<S2SV_blank></tmp/rs-filter-graph" ) ) <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( "gnome-open<S2SV_blank>/tmp/rs-filter-graph.png" ) ) <S2SV_EndBug> <S2SV_StartBug> g_warning ( "Calling<S2SV_blank>gnome-open<S2SV_blank>failed." ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( fd = open ( clonedev , O_RDWR ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( err = ioctl ( fd , TUNSETIFF , ( void * ) & ifr ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> int flags = fcntl ( fd , F_GETFL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> fcntl ( fd , F_SETFL , flags | O_NONBLOCK ) ; <S2SV_EndBug>
<S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> multi_arf_enabled ) { <S2SV_EndBug> <S2SV_StartBug> arf_idx = ( cpi -> frame_coding_order [ sn ] < 0 ) ? <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug>
<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> id = ipc_addid ( & shm_ids ( ns ) , & shp -> shm_perm , ns -> shm_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> shp -> shm_cprid = task_tgid_vnr ( current ) ; <S2SV_EndBug>
<S2SV_StartBug> . daddr = ( param -> replyopts . srr ? <S2SV_EndBug> <S2SV_StartBug> param -> replyopts . faddr : iph -> saddr ) , <S2SV_EndBug>
<S2SV_StartBug> bprm -> interp = interp ; <S2SV_EndBug> <S2SV_StartBug> return search_binary_handler ( bprm ) ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( addr , "%d.%d.%d.%d" , a , b , c , d ) ; <S2SV_EndBug>
<S2SV_StartBug> int ntlm_read_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug>
<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> hash_param . data = 0 ; <S2SV_EndBug> <S2SV_StartBug> hash_param . len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> unix_insert_socket ( unix_sockets_unbound ( sk ) , sk ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( address ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_EndBug> <S2SV_StartBug> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_EndBug>
<S2SV_StartBug> static struct ip_options * ip_options_get_alloc ( const int optlen ) <S2SV_EndBug> <S2SV_StartBug> return kzalloc ( sizeof ( struct ip_options ) + ( ( optlen + 3 ) & ~ 3 ) , <S2SV_EndBug>
<S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! ptr ) ; <S2SV_EndBug>
<S2SV_StartBug> local_vec = ( struct rds_iovec __user * ) ( unsigned long ) args -> local_vec_addr ; <S2SV_EndBug>
<S2SV_StartBug> assert ( plen <= * len ) ; <S2SV_EndBug>
<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , cmd_send , size_send , 0 ) == size_send ; <S2SV_EndBug>
<S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ldt , VCPU_SREG_LDTR , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( arg , user , get_arglen [ GET_CMDID ( cmd ) ] ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( tgt_clobbers & ~ site_clobbers ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug>
<S2SV_StartBug> if ( o == NULL ) return ; <S2SV_EndBug>
<S2SV_StartBug> CHECK_TLV_SIZE ( 1 + addr_str_length , "Management<S2SV_blank>address" ) ; <S2SV_EndBug> <S2SV_StartBug> CHECK_TLV_SIZE ( 4 , "Organisational" ) ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug>
<S2SV_StartBug> goto read_error ; <S2SV_EndBug>
<S2SV_StartBug> cred = rpc_lookup_cred ( ) ; <S2SV_EndBug> <S2SV_StartBug> state = nfs4_do_open ( dir , & path , openflags , NULL , cred ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_intent_set_file ( nd , & path , state ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_sync ( & path , state , openflags ) ; <S2SV_EndBug>
<S2SV_StartBug> int target = rc -> av_per_frame_bandwidth * kf_ratio ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( DMF_FREEING , & md -> flags ) || <S2SV_EndBug> <S2SV_StartBug> dm_deleting_md ( md ) ) <S2SV_EndBug> <S2SV_StartBug> dm_get ( md ) ; <S2SV_EndBug>
<S2SV_StartBug> return luaL_argerror ( L , 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( group_leader -> ctx -> type != ctx -> type ) <S2SV_EndBug>
<S2SV_StartBug> down_read ( & BTRFS_I ( dir ) -> root -> fs_info -> subvol_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const YV12_BUFFER_CONFIG * yv12 = get_ref_frame_buffer ( cpi , LAST_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> int offset = ( mi_row * MI_SIZE ) * yv12 -> y_stride + ( mi_col * MI_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , <S2SV_EndBug>
<S2SV_StartBug> checked_xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> alloc_limit_assert ( "checked_xmalloc" , size ) ; <S2SV_EndBug> <S2SV_StartBug> return xmalloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> int m ; <S2SV_EndBug>
<S2SV_StartBug> if ( p ++ != pages [ i + j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( p ++ != pages [ i + j ] ) <S2SV_EndBug>
<S2SV_StartBug> hdl -> client_state = HSM_COM_C_STATE_IN ; <S2SV_EndBug>
<S2SV_StartBug> ( * sp -> encodepfunc ) ( tif , bp , cc ) ; <S2SV_EndBug>
<S2SV_StartBug> new -> cid_mask = new -> lid_mask = 0xffff ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ifa1 -> ifa_flags & IFA_F_SECONDARY ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> SvcInternal * si ; <S2SV_EndBug> <S2SV_StartBug> si = ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug> <S2SV_StartBug> free ( si -> buffer ) ; <S2SV_EndBug>
<S2SV_StartBug> strncpy ( extra_response -> key , key , strlen ( key ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strlen ( NOTUNDERSTOOD ) + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> u32 i = 0 , j , page_offset = 0 , sg_per_table , sg_tables , total_sg_needed ; <S2SV_EndBug> <S2SV_StartBug> struct rd_dev_sg_table * sg_table ; <S2SV_EndBug> <S2SV_StartBug> while ( total_sg_needed ) { <S2SV_EndBug>
<S2SV_StartBug> return ( ( Image * ) NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> buf = malloc ( sz + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> ref ) { <S2SV_EndBug>
<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> int rv = copy_file ( src , dest ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( dest , getuid ( ) , getgid ( ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( chmod ( dest , S_IRUSR | S_IWUSR ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> static inline long decode_twos_comp ( ulong c , int prec ) <S2SV_EndBug>
<S2SV_StartBug> x -> quantize_b_pair = vp8_fast_quantize_b_pair ; <S2SV_EndBug> <S2SV_StartBug> & distortion , & intra_error ) ; <S2SV_EndBug> <S2SV_StartBug> x -> quantize_b = vp8_regular_quantize_b ; <S2SV_EndBug>
<S2SV_StartBug> ascii = malloc ( strlen ( str ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ascii = malloc ( str_len ) ; <S2SV_EndBug>
<S2SV_StartBug> char lowstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug>
<S2SV_StartBug> free_uid ( group -> inotify_data . user ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> i = ctm -> length ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i < 11 ) || ( i > 17 ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( i < 13 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> * ( p ++ ) = * ( str ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( * str >= '0' ) && ( * str <= '9' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * str == 'Z' ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> if ( ( * str != '+' ) && ( * str != '-' ) ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( flags | RT6_LOOKUP_F_DST_NOREF ) ) <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> pu1_buf = ( UWORD8 * ) ps_codec -> pv_mv_bank_buf_base ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>[|truncated]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static int nfs4_open_recover_helper ( struct nfs4_opendata * opendata , mode_t openflags , struct nfs4_state * * res ) <S2SV_EndBug> <S2SV_StartBug> opendata -> o_arg . open_flags = openflags ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_state ( & opendata -> path , newstate , openflags ) ; <S2SV_EndBug>
<S2SV_StartBug> # if ( ETH_SUPPORT == ENABLED ) <S2SV_EndBug>
<S2SV_StartBug> while ( 1 ) { <S2SV_EndBug> <S2SV_StartBug> assert ( ! state -> last_str || <S2SV_EndBug>
<S2SV_StartBug> if ( pos > CDF_SEC_SIZE ( h ) * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , CDF_SEC_SIZE ( h ) * sst -> sst_len ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vstart += verdef -> vd_aux ; <S2SV_EndBug>
<S2SV_StartBug> int sec ; <S2SV_EndBug> <S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> guint offset = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , "%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9u:%12s->%12s/" , <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( new , ours , sizeof ( * new ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! PPEEK_IS ( ')' ) ) return ONIGERR_INVALID_GROUP_NAME ; <S2SV_EndBug>
<S2SV_StartBug> FRAME_CONTEXT * fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> fc -> intra_inter_prob [ i ] = adapt_prob ( pre_fc -> intra_inter_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> comp_inter_prob [ i ] = adapt_prob ( pre_fc -> comp_inter_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> comp_ref_prob [ i ] = adapt_prob ( pre_fc -> comp_ref_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> single_ref_prob [ i ] [ j ] = adapt_prob ( pre_fc -> single_ref_prob [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_inter_mode_tree , pre_fc -> inter_mode_probs [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_intra_mode_tree , pre_fc -> y_mode_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_intra_mode_tree , pre_fc -> uv_mode_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_partition_tree , pre_fc -> partition_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> adapt_probs ( vp9_switchable_interp_tree , pre_fc -> switchable_interp_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p8x8 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p8x8 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p16x16 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p16x16 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> tx_probs . p32x32 [ i ] [ j ] = adapt_prob ( pre_fc -> tx_probs . p32x32 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> fc -> skip_probs [ i ] = adapt_prob ( pre_fc -> skip_probs [ i ] , counts -> skip [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> struct snd_kcontrol * kctl ; <S2SV_EndBug>
<S2SV_StartBug> void * shared_kaddr ; <S2SV_EndBug> <S2SV_StartBug> struct pvclock_vcpu_time_info * guest_hv_clock ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vcpu -> time_page ) <S2SV_EndBug> <S2SV_StartBug> shared_kaddr = kmap_atomic ( vcpu -> time_page ) ; <S2SV_EndBug> <S2SV_StartBug> pvclock_flags = ( guest_hv_clock -> flags & PVCLOCK_GUEST_STOPPED ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( shared_kaddr + vcpu -> time_offset , & vcpu -> hv_clock , <S2SV_EndBug> <S2SV_StartBug> kunmap_atomic ( shared_kaddr ) ; <S2SV_EndBug>
<S2SV_StartBug> int64_t vp9_block_error_c ( const int16_t * coeff , const int16_t * dqcoeff , <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug>
<S2SV_StartBug> void Huff_offsetReceive ( node_t * node , int * ch , byte * fin , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> while ( node && node -> symbol == INTERNAL_NODE ) { <S2SV_EndBug>
<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug>
<S2SV_StartBug> next_byte : <S2SV_EndBug>
<S2SV_StartBug> return true ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( segment -> temporal_offset_entries = av_calloc ( segment -> nb_index_entries , sizeof ( * segment -> temporal_offset_entries ) ) ) || <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < segment -> nb_index_entries ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> const float factor = 0.5 ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> av_per_frame_bandwidth < factor * number_blocks || <S2SV_EndBug>
<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( MagickPixelPacket * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> char * pathname = RUNTIME_PATH "/lock/lxc/var/lib/lxc/" ; <S2SV_EndBug>
<S2SV_StartBug> result = send ( signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t off = offset , tmp , finish ; <S2SV_EndBug> <S2SV_StartBug> finish = fru -> size ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> memcpy ( frubuf , rsp -> data + 1 , tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp == 0 && off < finish ) { <S2SV_EndBug>
<S2SV_StartBug> if ( buffer ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static uid_t uid_server = 0 ; <S2SV_EndBug> <S2SV_StartBug> uid_server = getuid ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( gid_cluster != 0 && gid_client != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( client -> type == USER_CLIENT ) <S2SV_EndBug>
<S2SV_StartBug> stmt_ty s ; <S2SV_EndBug> <S2SV_StartBug> mod_ty res = NULL ; <S2SV_EndBug> <S2SV_StartBug> res = Module ( stmts , arena ) ; <S2SV_EndBug> <S2SV_StartBug> default : <S2SV_EndBug>
<S2SV_StartBug> uint8_t chipRevision ; <S2SV_EndBug> <S2SV_StartBug> vendorId = ( dm9000ReadReg ( DM9000_REG_VIDH ) << 8 ) | dm9000ReadReg ( DM9000_REG_VIDL ) ; <S2SV_EndBug> <S2SV_StartBug> productId = ( dm9000ReadReg ( DM9000_REG_PIDH ) << 8 ) | dm9000ReadReg ( DM9000_REG_PIDL ) ; <S2SV_EndBug> <S2SV_StartBug> chipRevision = dm9000ReadReg ( DM9000_REG_CHIPR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chipRevision != DM9000A_CHIP_REV && chipRevision != DM9000B_CHIP_REV ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_GPR , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_NCR , NCR_RST ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadReg ( DM9000_REG_NCR ) & NCR_RST ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WritePhyReg ( DM9000_PHY_REG_BMCR , BMCR_RST ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadPhyReg ( DM9000_PHY_REG_BMCR ) & BMCR_RST ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( "<S2SV_blank><S2SV_blank>CHIPR<S2SV_blank>=<S2SV_blank>0x%02" PRIX8 "\\r\\n" , chipRevision ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( "<S2SV_blank><S2SV_blank>PHYIDR1<S2SV_blank>=<S2SV_blank>0x%04" PRIX16 "\\r\\n" , dm9000ReadPhyReg ( DM9000_PHY_REG_PHYIDR1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_INFO ( "<S2SV_blank><S2SV_blank>PHYIDR2<S2SV_blank>=<S2SV_blank>0x%04" PRIX16 "\\r\\n" , dm9000ReadPhyReg ( DM9000_PHY_REG_PHYIDR2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_NCR , DM9000_LBK_PHY ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WritePhyReg ( DM9000_PHY_REG_BMCR , BMCR_LOOPBACK | BMCR_SPEED_SEL | BMCR_AN_EN | BMCR_DUPLEX_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_PAR0 + i , interface -> macAddr . b [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MAR0 + i , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MAR7 , 0x80 ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_IMR , IMR_PAR ) ; <S2SV_EndBug>
<S2SV_StartBug> int64_t old_off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( s -> filesize == - 1 && whence == SEEK_END ) ) <S2SV_EndBug>
<S2SV_StartBug> vp9_coeff_probs_model * const probs = cm -> fc . coef_probs [ tx_size ] ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff32 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void nfs_set_open_stateid_locked ( struct nfs4_state * state , nfs4_stateid * stateid , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> switch ( open_flags ) { <S2SV_EndBug>
<S2SV_StartBug> cf . can_id = 0 ; <S2SV_EndBug> <S2SV_StartBug> * ( u64 * ) ( & cf . data ) = 0 ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sock -> sk -> sk_uid = iattr -> ia_uid ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char * buffer = ( char * ) dlmalloc ( bytes + CHK_OVERHEAD_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! __archive_ppmd7_functions . Ppmd7_Alloc ( & rar -> ppmd7_context , <S2SV_EndBug>
<S2SV_StartBug> return code ; <S2SV_EndBug>
<S2SV_StartBug> # line 585 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> case 'O' : goto yy13 ; <S2SV_EndBug> <S2SV_StartBug> case 'R' : goto yy2 ; <S2SV_EndBug> <S2SV_StartBug> case 'S' : goto yy10 ; <S2SV_EndBug> <S2SV_StartBug> case 'a' : goto yy11 ; <S2SV_EndBug> <S2SV_StartBug> case 'b' : goto yy6 ; <S2SV_EndBug> <S2SV_StartBug> case 'd' : goto yy8 ; <S2SV_EndBug> <S2SV_StartBug> case 'i' : goto yy7 ; <S2SV_EndBug> <S2SV_StartBug> case 'r' : goto yy4 ; <S2SV_EndBug> <S2SV_StartBug> case 's' : goto yy9 ; <S2SV_EndBug> <S2SV_StartBug> case '}' : goto yy14 ; <S2SV_EndBug> <S2SV_StartBug> default : goto yy16 ; <S2SV_EndBug> <S2SV_StartBug> # line 962 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 646 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy89 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ';' ) goto yy87 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy83 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy77 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy53 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy46 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy39 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy32 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy25 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == ':' ) goto yy17 ; <S2SV_EndBug> <S2SV_StartBug> yy14 : <S2SV_EndBug> <S2SV_StartBug> # line 956 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 695 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych == '+' ) goto yy19 ; <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> goto yy20 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych >= ';' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych != \'"\' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> # line 804 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> if ( * start == 'C' ) { <S2SV_EndBug> <S2SV_StartBug> len2 = len = parse_uiv ( start + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * p = start + 2 ; <S2SV_EndBug> <S2SV_StartBug> # line 878 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> if ( ( YYLIMIT - YYCURSOR ) < 2 ) YYFILL ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( yych <= '9' ) goto yy27 ; <S2SV_EndBug> <S2SV_StartBug> # line 793 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> zend_long elements = parse_iv ( start + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> # line 959 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> if ( yych == '+' ) goto yy40 ; <S2SV_EndBug> <S2SV_StartBug> if ( yych <= '9' ) goto yy41 ; <S2SV_EndBug> <S2SV_StartBug> # line 735 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1292 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 646 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> ZVAL_BOOL ( rval , parse_iv ( start + 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1306 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 640 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> id = parse_iv ( start + 2 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = YYCURSOR ; <S2SV_EndBug> <S2SV_StartBug> id = parse_iv ( start + 2 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> zval_ptr_dtor ( rval ) ; <S2SV_EndBug> <S2SV_StartBug> if ( Z_ISREF_P ( rval_ref ) ) { <S2SV_EndBug> <S2SV_StartBug> ZVAL_COPY ( rval , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> ZVAL_NEW_REF ( rval_ref , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> ZVAL_COPY ( rval , rval_ref ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1412 "ext/standard/var_unserializer.c" <S2SV_EndBug>
<S2SV_StartBug> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> gossip_err ( "%s:<S2SV_blank>posix_acl_equiv_mode<S2SV_blank>err:<S2SV_blank>%d\\n" , <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug>
<S2SV_StartBug> FILE * file = fopen ( dump_file , "w" ) ; <S2SV_EndBug>
<S2SV_StartBug> uid_eq ( root_uid , current_uid ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( gid_eq ( root_gid , current_gid ( ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> # ifdef KEY_DEBUGGING <S2SV_EndBug>
<S2SV_StartBug> int64_t vp9_rd_pick_inter_mode_sub8x8 ( VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int * returnrate , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * xd = & x -> e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const struct segmentation * seg = & cm -> seg ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_tx_rd [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO best_mbmode = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob comp_mode_p ; <S2SV_EndBug> <S2SV_StartBug> int rate_uv_intra [ TX_SIZES ] , rate_uv_tokenonly [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int skip_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int intra_cost_penalty = 20 * vp9_dc_quant ( cm -> base_qindex , cm -> y_dc_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> int ref_frame_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> x -> skip_encode = cpi -> sf . skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> zcoeff_blk [ TX_4X4 ] , 0 , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> estimate_ref_frame_costs ( cpi , segment_id , ref_costs_single , ref_costs_comp , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> best_tx_rd [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_buffer_inter ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> frame_mv [ NEWMV ] [ ref_frame ] . as_int = INVALID_MV ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> for ( mode_index = 0 ; mode_index < MAX_REFS ; ++ mode_index ) { <S2SV_EndBug> <S2SV_StartBug> int64_t tx_cache [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> ref_frame = vp9_ref_order [ mode_index ] . ref_frame [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> second_ref_frame = vp9_ref_order [ mode_index ] . ref_frame [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mode_index > 2 && cpi -> sf . mode_skip_start < MAX_MODES ) { <S2SV_EndBug> <S2SV_StartBug> if ( mode_index == 3 ) { <S2SV_EndBug> <S2SV_StartBug> switch ( vp9_ref_order [ best_mode_index ] . ref_frame [ 0 ] ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0010 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0008 ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask = 0x0000 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mode_skip_mask & ( 1 << mode_index ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ( ( int64_t ) cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ mode_index ] * <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_freq_sub8x8 [ bsize ] [ mode_index ] >> 5 ) ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( second_ref_frame > INTRA_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> mbmi -> ref_frame [ 0 ] = ref_frame ; <S2SV_EndBug> <S2SV_StartBug> comp_pred = second_ref_frame > INTRA_FRAME ; <S2SV_EndBug> <S2SV_StartBug> set_ref_ptrs ( cm , xd , ref_frame , second_ref_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( comp_pred ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> mbmi -> tx_size = TX_4X4 ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_uv_intra [ TX_4X4 ] == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> choose_intra_uv_mode ( cpi , ctx , bsize , TX_4X4 , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_intra [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_tokenonly [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & dist_uv [ TX_4X4 ] , & skip_uv [ TX_4X4 ] , <S2SV_EndBug> <S2SV_StartBug> & mode_uv [ TX_4X4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> rate2 += rate_uv_intra [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> rate_uv = rate_uv_tokenonly [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> distortion2 += dist_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> distortion_uv = dist_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> uv_mode = mode_uv [ TX_4X4 ] ; <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ second_ref_frame ] [ 0 ] : NULL ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_LAST ] : <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_ALTR ] ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_thresh_sub8x8 [ segment_id ] [ bsize ] [ THR_GOLD ] : this_rd_thresh ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . tx_size = TX_4X4 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> cpi -> sf . disable_filter_search_var_thresh ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . adaptive_pred_interp_filter == 1 && <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . adaptive_pred_interp_filter == 2 ) { <S2SV_EndBug> <S2SV_StartBug> mbmi -> interp_filter = switchable_filter_index ; <S2SV_EndBug> <S2SV_StartBug> tmp_rd = rd_pick_best_mbsegmentation ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> rs = vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ switchable_filter_index ] = tmp_rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , tmp_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> sf . use_rd_breakout && <S2SV_EndBug> <S2SV_StartBug> tmp_rd = rd_pick_best_mbsegmentation ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> rate2 += vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> super_block_uvrd ( cpi , x , & rate_uv , & distortion_uv , & uv_skippable , <S2SV_EndBug> <S2SV_StartBug> & uv_sse , BLOCK_8X8 , tmp_best_rdu ) ; <S2SV_EndBug> <S2SV_StartBug> tx_cache [ ONLY_4X4 ] = RDCOST ( x -> rdmult , x -> rddiv , rate2 , distortion2 ) ; <S2SV_EndBug> <S2SV_StartBug> const int mb_skip_allowed = ! vp9_segfeature_active ( seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed ) { <S2SV_EndBug> <S2SV_StartBug> this_rd = RDCOST ( x -> rdmult , x -> rddiv , rate2 , distortion2 ) ; <S2SV_EndBug> <S2SV_StartBug> best_mode_index = mode_index ; <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate2 ; <S2SV_EndBug> <S2SV_StartBug> * returndistortion = distortion2 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> select_txfm_size ) <S2SV_EndBug> <S2SV_StartBug> swap_block_ptr ( x , ctx , max_plane ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ctx -> zcoeff_blk , x -> zcoeff_blk [ mbmi -> tx_size ] , <S2SV_EndBug> <S2SV_StartBug> sizeof ( uint8_t ) * ctx -> num_4x4_blk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> sf . mode_search_skip_flags & FLAG_EARLY_TERMINATE ) && <S2SV_EndBug> <S2SV_StartBug> ( mode_index > MIN_EARLY_TERM_INDEX ) ) { <S2SV_EndBug> <S2SV_StartBug> const int qstep = xd -> plane [ 0 ] . dequant [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int scale = 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( second_ref_frame <= INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> single_rd < best_pred_rd [ SINGLE_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( second_ref_frame > INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> single_rd < best_pred_rd [ COMPOUND_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int64_t ref = cpi -> rd_filter_cache [ cm -> interp_filter == SWITCHABLE ? <S2SV_EndBug> <S2SV_StartBug> else if ( cpi -> rd_filter_cache [ i ] == INT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> mask_filter_rd - ref + 10 ; <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> rd_filter_cache [ i ] - ref ; <S2SV_EndBug> <S2SV_StartBug> best_filter_rd [ i ] = MIN ( best_filter_rd [ i ] , adj_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rd >= best_rd_so_far ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_ref_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> TX_SIZE uv_tx_size ; <S2SV_EndBug> <S2SV_StartBug> uv_tx_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_intra_sbuv_mode ( cpi , x , ctx , & rate_uv_intra [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & rate_uv_tokenonly [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & dist_uv [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> & skip_uv [ uv_tx_size ] , <S2SV_EndBug> <S2SV_StartBug> BLOCK_8X8 , uv_tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rd == INT64_MAX && bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> * returndistortion = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> return best_rd ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_rd_thresh ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & xd -> mi [ 0 ] -> bmi [ i ] , & best_bmodes [ i ] , sizeof ( b_mode_info ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip ) { <S2SV_EndBug> <S2SV_StartBug> store_coding_context ( x , ctx , best_mode_index , <S2SV_EndBug> <S2SV_StartBug> best_pred_diff , best_tx_diff , best_filter_diff ) ; <S2SV_EndBug>
<S2SV_StartBug> the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( vma ) { <S2SV_EndBug>
<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> x = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> y = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> L -> oldpc = pc + 1 ; <S2SV_EndBug>
<S2SV_StartBug> int64_t off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> "Range:<S2SV_blank>bytes=%" PRId64 "-" , s -> off ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> uint_fast32_t rawsize ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_create0 ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> image -> inmem_ = true ; <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( cmptno = 0 , cmptparm = cmptparms ; cmptno < numcmpts ; ++ cmptno , <S2SV_EndBug> <S2SV_StartBug> ++ cmptparm ) { <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> ++ image -> numcmpts_ ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int i ; <S2SV_EndBug>
<S2SV_StartBug> if ( client -> priv -> protocol_timeout > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> VP9_COMMON * const cm = & ctx -> pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> cm -> new_fb_idx = - 1 ; <S2SV_EndBug> <S2SV_StartBug> cm -> get_fb_cb = ctx -> get_ext_fb_cb ; <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb = ctx -> release_ext_fb_cb ; <S2SV_EndBug> <S2SV_StartBug> cm -> cb_priv = ctx -> ext_priv ; <S2SV_EndBug> <S2SV_StartBug> cm -> get_fb_cb = vp9_get_frame_buffer ; <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb = vp9_release_frame_buffer ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_alloc_internal_frame_buffers ( & cm -> int_frame_buffers ) ) <S2SV_EndBug> <S2SV_StartBug> cm -> cb_priv = & cm -> int_frame_buffers ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static int udf_translate_to_linux ( uint8_t * newName , uint8_t * udfName , <S2SV_EndBug> <S2SV_StartBug> int udfLen , uint8_t * fidName , <S2SV_EndBug> <S2SV_StartBug> if ( newIndex < 256 ) <S2SV_EndBug> <S2SV_StartBug> maxFilenameLen = 250 - localExtIndex ; <S2SV_EndBug> <S2SV_StartBug> } else if ( newIndex > 250 ) <S2SV_EndBug>
<S2SV_StartBug> hw_init ( LOW_FREQUENCY ) ; <S2SV_EndBug> <S2SV_StartBug> # if BOOT_TO_DFU <S2SV_EndBug>
<S2SV_StartBug> status = ocfs2_rw_lock ( inode , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> goto bail_unlock ; <S2SV_EndBug>
<S2SV_StartBug> static void sas_destruct_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug>
<S2SV_StartBug> while ( ! EOFBlob ( image ) ) <S2SV_EndBug> <S2SV_StartBug> if ( filepos != ( unsigned int ) filepos ) <S2SV_EndBug> <S2SV_StartBug> if ( ( MagickSizeType ) ( MATLAB_HDR . ObjectSize + filepos ) > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>cannot<S2SV_blank>read<S2SV_blank>scanrow<S2SV_blank>%u<S2SV_blank>from<S2SV_blank>a<S2SV_blank>file." , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * fmtname ; <S2SV_EndBug> <S2SV_StartBug> while ( ( id = jas_getopt ( argc , argv , opts ) ) >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> case OPT_INFILE : <S2SV_EndBug> <S2SV_StartBug> if ( infile ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_decode ( instream , fmtid , 0 ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> ps_codec -> pu1_inp_bitsbuf += ( nal_ofst + nal_len ) ; <S2SV_EndBug>
<S2SV_StartBug> nfca_poll -> rats_res_len = * data ++ ; <S2SV_EndBug> <S2SV_StartBug> nfcb_poll -> attrib_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> p = find_eoq ( cmd + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct hns_roce_ib_alloc_ucontext_resp resp ; <S2SV_EndBug>
<S2SV_StartBug> int retval = 0 ; <S2SV_EndBug> <S2SV_StartBug> retval = - ENODEV ; <S2SV_EndBug> <S2SV_StartBug> bytes_read = snprintf ( in_buffer , 20 , "%lld\\n" , dev -> bbu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ppos < bytes_read ) { <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>[|truncated]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int16_t vp9_dc_quant ( int qindex , int delta ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> err = aead_register_instance ( tmpl , inst ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( shmflg & SHM_RND ) <S2SV_EndBug>
<S2SV_StartBug> ( void ) ReadBlob ( image , sizeof ( iris_info . name ) , ( unsigned char * ) <S2SV_EndBug> <S2SV_StartBug> iris_info . name ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) count ; <S2SV_EndBug> <S2SV_StartBug> if ( EOFBlob ( image ) != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> STREAM out ; <S2SV_EndBug>
<S2SV_StartBug> dprintk ( "%s:<S2SV_blank>write<S2SV_blank>%Zd<S2SV_blank>bytes\\n" , bd -> name , count ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int64_t critical_level = oxcf -> optimal_buffer_level >> 2 ; <S2SV_EndBug> <S2SV_StartBug> int active_worst_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> current_video_frame > 1 ) <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ INTER_FRAME ] * 5 / 4 ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ KEY_FRAME ] * 3 / 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ( int ) ( ( rc -> worst_quality - rc -> avg_frame_qindex [ INTER_FRAME ] ) * <S2SV_EndBug> <S2SV_StartBug> ( oxcf -> optimal_buffer_level - rc -> buffer_level ) / <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( buf = g_try_malloc ( size ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> alt = pcu -> ctrl_intf -> cur_altsetting ; <S2SV_EndBug> <S2SV_StartBug> alt = pcu -> data_intf -> cur_altsetting ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bp [ hlen ] & 0xf0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "K" ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mh -> ip6m_data8 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * mh , hlen + 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> Convert_art ( & dls , & defaultArt , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> dls . artCount = 1 ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>n<S2SV_blank>len=%d" , ntohs ( e . len ) - 4 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 2 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( 1 < ndo -> ndo_vflag && 4 < ntohs ( e . len ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , ( const u_char * ) ( const uint8_t * ) ( ext + 1 ) , ep ) ) <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + ntohs ( e . len ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( plugin_name , argv [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug>
<S2SV_StartBug> void f2fs_wait_discard_bios ( struct f2fs_sb_info * sbi ) <S2SV_EndBug> <S2SV_StartBug> __wait_discard_cmd ( sbi , false ) ; <S2SV_EndBug>
<S2SV_StartBug> attrs = malloc ( sizeof ( TEE_Attribute ) * attr_count ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_MOD_NAME ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & ~ ALL_PRINC_MASK ) ) <S2SV_EndBug> <S2SV_StartBug> return KADM5_BAD_MASK ; <S2SV_EndBug>
<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_err ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , nfunc , line , & vaf ) ; <S2SV_EndBug>
<S2SV_StartBug> static void read_tx_mode_probs ( struct tx_probs * tx_probs , vp9_reader * r ) { <S2SV_EndBug>
<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> width - 1 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> height - 1 , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( length == SIZE_MAX ) { <S2SV_EndBug>
<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug>
<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( exit_intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR && <S2SV_EndBug>
<S2SV_StartBug> tok -> err = json_tokener_success ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> hwc -> event_base = MSR_ARCH_PERFMON_FIXED_CTR0 ; <S2SV_EndBug>
<S2SV_StartBug> static off_t ivf_header_pos = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! stream -> ebml . debug ) <S2SV_EndBug> <S2SV_StartBug> off_t currpos = ftello ( stream -> file ) ; <S2SV_EndBug> <S2SV_StartBug> case VPX_CODEC_PSNR_PKT : <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> struct snd_ctl_elem_id id ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug>
<S2SV_StartBug> Proto * p = clLvalue ( s2v ( ci -> func ) ) -> p ; <S2SV_EndBug> <S2SV_StartBug> if ( isLua ( ci -> previous ) ) <S2SV_EndBug> <S2SV_StartBug> L -> oldpc = ci -> previous -> u . l . savedpc ; <S2SV_EndBug>
<S2SV_StartBug> if ( total_length < sizeof ( * bhdrp ) + sizeof ( * shbp ) + sizeof ( struct block_trailer ) ) { <S2SV_EndBug> <S2SV_StartBug> "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>a<S2SV_blank>length<S2SV_blank>of<S2SV_blank>%u<S2SV_blank><<S2SV_blank>%" PRIsize , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * bhdrp ) + sizeof ( * shbp ) + sizeof ( struct block_trailer ) ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug>
<S2SV_StartBug> CRM_LOG_ASSERT ( client_obj -> request_id ) ; <S2SV_EndBug> <S2SV_StartBug> rid , client_obj -> name , from_peer ? "(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)" : "" ) ; <S2SV_EndBug>
<S2SV_StartBug> checked_xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> alloc_limit_assert ( "checked_xmalloc" , size ) ; <S2SV_EndBug> <S2SV_StartBug> return xmalloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t ctrl_set_svc ( vpx_codec_alg_priv_t * ctx , int ctr_id , <S2SV_EndBug> <S2SV_StartBug> ( cfg -> rc_end_usage == VPX_CBR || <S2SV_EndBug>
<S2SV_StartBug> if ( size_bmp > BMP_HEADER_SIZE ) { <S2SV_EndBug>
<S2SV_StartBug> dev = btrfs_find_device ( fs_info -> fs_devices , devid , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n" , <S2SV_EndBug> <S2SV_StartBug> if ( box -> len == 1 ) { <S2SV_EndBug>
<S2SV_StartBug> state -> array_nl = strdup ( RSTRING_PTR ( array_nl ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( HCI_UP , & hdev -> flags ) ) <S2SV_EndBug> <S2SV_StartBug> return - ENETDOWN ; <S2SV_EndBug> <S2SV_StartBug> hci_req_sync_unlock ( hdev ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_codec_err_t res = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_crop_width = img -> d_w ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> uv_height = yv12 -> y_height / 2 ; <S2SV_EndBug>
<S2SV_StartBug> void * buffer ; <S2SV_EndBug>
<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug>

<S2SV_StartBug> state = vterm_state_new ( vt ) ; <S2SV_EndBug>
<S2SV_StartBug> mpeg4_decode_profile_level ( s , gb ) ; <S2SV_EndBug> <S2SV_StartBug> ( s -> avctx -> level > 0 && s -> avctx -> level < 9 ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! s -> avctx -> bits_per_raw_sample ) { <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * end , * ptr = avpkt -> data ; <S2SV_EndBug> <S2SV_StartBug> end = avpkt -> data + avpkt -> size ; <S2SV_EndBug> <S2SV_StartBug> while ( memcmp ( ptr , "/*<S2SV_blank>XPM<S2SV_blank>*/" , 9 ) && ptr < end - 9 ) <S2SV_EndBug> <S2SV_StartBug> size *= 94 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ncolors ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ptr += mod_strcspn ( ptr , "\\"" ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < avctx -> width ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug>
<S2SV_StartBug> static struct nfs4_state * nfs4_do_open ( struct inode * dir , struct path * path , int flags , struct iattr * sattr , struct rpc_cred * cred ) <S2SV_EndBug> <S2SV_StartBug> status = _nfs4_do_open ( dir , path , flags , sattr , cred , & res ) ; <S2SV_EndBug>
<S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug> <S2SV_StartBug> CALL_AND_WAIT ( bt_interface -> enable ( ) , adapter_state_changed ) ; <S2SV_EndBug>
<S2SV_StartBug> iris_info . dimension = ReadBlobMSBShort ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> bprm -> interp = interp ; <S2SV_EndBug> <S2SV_StartBug> return search_binary_handler ( bprm ) ; <S2SV_EndBug>
<S2SV_StartBug> INIT_LIST_HEAD ( & f -> f_u . fu_list ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 2 ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) strncpy ( clone_info -> magick , magic_info -> name , MaxTextExtent ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pkt == NULL ) <S2SV_EndBug>
<S2SV_StartBug> kgctx . have_acceptor_subkey = 1 ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> port -> exists = true ; <S2SV_EndBug> <S2SV_StartBug> mb ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( new -> euid != old -> uid || <S2SV_EndBug>
<S2SV_StartBug> if ( ! rc -> source_alt_ref_pending ) <S2SV_EndBug> <S2SV_StartBug> rc -> source_alt_ref_active = 0 ; <S2SV_EndBug>
<S2SV_StartBug> static void kiocb_batch_free ( struct kiocb_batch * batch ) <S2SV_EndBug> <S2SV_StartBug> struct kiocb * req , * n ; <S2SV_EndBug> <S2SV_StartBug> kmem_cache_free ( kiocb_cachep , req ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sax -> sax25_family = AF_NETROM ; <S2SV_EndBug>
<S2SV_StartBug> size = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> uchar * dp ; <S2SV_EndBug>
<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> int event_id = event -> attr . config ; <S2SV_EndBug>
<S2SV_StartBug> char * buf ; <S2SV_EndBug>
<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug>
<S2SV_StartBug> static PixelChannels * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( PixelChannels * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug>
<S2SV_StartBug> int vp9_decode_frame ( VP9Decoder * pbi , <S2SV_EndBug> <S2SV_StartBug> const size_t first_partition_size = read_uncompressed_header ( pbi , & rb ) ; <S2SV_EndBug> <S2SV_StartBug> * p_data_end = data + 1 ; <S2SV_EndBug> <S2SV_StartBug> pbi -> do_loopfilter_inline = <S2SV_EndBug> <S2SV_StartBug> ( cm -> log2_tile_rows | cm -> log2_tile_cols ) == 0 && cm -> lf . filter_level ; <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> oxcf . max_threads > 1 && ! vp9_worker_reset ( & pbi -> lf_worker ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> oxcf . max_threads > 1 && tile_rows == 1 && tile_cols > 1 && <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> new_fb -> corrupted |= xd -> corrupted ; <S2SV_EndBug> <S2SV_StartBug> "A<S2SV_blank>stream<S2SV_blank>must<S2SV_blank>start<S2SV_blank>with<S2SV_blank>a<S2SV_blank>complete<S2SV_blank>key<S2SV_blank>frame" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> refresh_frame_context ) <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ cm -> frame_context_idx ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> sock_put ( skpair ) ; <S2SV_EndBug>
<S2SV_StartBug> ioctl ( sk , SIOCSIFFLAGS , ( caddr_t ) & ifr ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( vma -> vm_flags & ( VM_DONTEXPAND | VM_PFNMAP ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( dashsize ) outpos += sprintf ( outpos , "<S2SV_blank>[%12.3f]<S2SV_blank>%12.3f<S2SV_blank>d" , dashsize , phase ) ; <S2SV_EndBug> <S2SV_StartBug> else outpos += sprintf ( outpos , "<S2SV_blank>[]<S2SV_blank>0<S2SV_blank>d" ) ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_msgtype_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proto_ver_print ( ndo , ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_framing_cap_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_bearer_cap_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> print_octets ( ndo , ( const u_char * ) ptr , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> print_16bits_val ( ndo , ptr ) ; <S2SV_EndBug> <S2SV_StartBug> print_octets ( ndo , ( const u_char * ) ptr , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> print_32bits_val ( ndo , ( const uint32_t * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_bearer_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_framing_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proxy_auth_type_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_proxy_auth_id_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_call_errors_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug> <S2SV_StartBug> l2tp_accm_print ( ndo , ( const u_char * ) ptr ) ; <S2SV_EndBug>
<S2SV_StartBug> o4 = o * sizeof ( uint32_t ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! spec || ! value || ! hdr || ! obuf || obuf_len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> case DW_FORM_data2 : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; <S2SV_EndBug>
<S2SV_StartBug> netdev -> dcbnl_ops -> getpermhwaddr ( netdev , perm_addr ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( box = jas_malloc ( sizeof ( jp2_box_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( box , 0 , sizeof ( jp2_box_t ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * name ; <S2SV_EndBug> <S2SV_StartBug> if ( EVP_CipherInit_ex ( ctx , cipher , NULL , dummy_key , NULL , - 1 ) != 1 ) <S2SV_EndBug>
<S2SV_StartBug> av_bprint_get_buffer ( bp , 1 , & buf , & buf_size ) ; <S2SV_EndBug> <S2SV_StartBug> zstream . avail_out = buf_size ; <S2SV_EndBug>
<S2SV_StartBug> unsigned v = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_v_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> transparency = get_rac ( c , state ) ; <S2SV_EndBug>
<S2SV_StartBug> r = verify_vc_kbmode ( fd ) ; <S2SV_EndBug>
<S2SV_StartBug> nfcf_poll -> sensf_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> queueItem -> srcPort = 0 ; <S2SV_EndBug>
<S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 0 ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> kvm_pit_load_count ( kvm , 0 , ps -> channels [ 0 ] . count , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( malloc_called != 20 || free_called != 20 ) <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> int numrows ; <S2SV_EndBug> <S2SV_StartBug> if ( fscanf ( in , "%d<S2SV_blank>%d" , & xoff , & yoff ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( fscanf ( in , "%d<S2SV_blank>%d" , & numcols , & numrows ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> else if ( Ustrcmp ( argrest , "Mr" ) == 0 ) received_protocol = argv [ ++ i ] ; <S2SV_EndBug> <S2SV_StartBug> uschar * hn = Ustrchr ( argrest , ':' ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = MIN ( r -> sector_count * 512 , SCSI_DMA_BUF_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_sb_rt ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> switch ( partition ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled && bsize >= BLOCK_8X8 ) <S2SV_EndBug> <S2SV_StartBug> encode_b_rt ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + hbs < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + hbs < cm -> mi_rows ) { <S2SV_EndBug> <S2SV_StartBug> if ( output_enabled ) <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row , mi_col + hbs , output_enabled , <S2SV_EndBug> <S2SV_StartBug> encode_sb_rt ( cpi , tile , tp , mi_row + hbs , mi_col , output_enabled , <S2SV_EndBug> <S2SV_StartBug> assert ( "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> field [ nf ] = lp ; <S2SV_EndBug> <S2SV_StartBug> if ( nf > MAXDATEFIELDS ) <S2SV_EndBug>
<S2SV_StartBug> u_int16_t port ; <S2SV_EndBug> <S2SV_StartBug> unsigned int ret ; <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , "all<S2SV_blank>ports<S2SV_blank>in<S2SV_blank>use" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = nf_nat_mangle_tcp_packet ( skb , exp -> master , ctinfo , <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , "cannot<S2SV_blank>mangle<S2SV_blank>packet" ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ipc_lock_object ( & shp -> shm_perm ) ; <S2SV_EndBug>
<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> x = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> y = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_tsk_need_resched ( rq -> curr ) ) <S2SV_EndBug>
<S2SV_StartBug> rc = fsmVerify ( fpath , fi ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( dc_size > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( dc_count > ( 6LL * td -> xsize * td -> ysize + 63 ) / 64 ) <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug>
<S2SV_StartBug> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> <S2SV_StartBug> pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > <S2SV_EndBug>
<S2SV_StartBug> if ( name_len == 0 ) goto chunk_end ; <S2SV_EndBug> <S2SV_StartBug> READ_ENCINT ( length ) ; <S2SV_EndBug>
<S2SV_StartBug> path -> mnt = mntget ( nd -> path . mnt ) ; <S2SV_EndBug> <S2SV_StartBug> follow_mount ( path ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( impeg2d_bit_stream_nxt ( ps_stream , START_CODE_LEN ) != u4_start_code_val ) <S2SV_EndBug> <S2SV_StartBug> && ( ps_dec -> s_bit_stream . u4_offset <= ps_dec -> s_bit_stream . u4_max_offset ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( msg -> maxsize - msg -> cursize < 4 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bits == 8 ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetTransmit ( & msgHuff . compressor , ( value & 0xff ) , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> kgctx . have_acceptor_subkey = 1 ; <S2SV_EndBug>
<S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( rsvp_obj_ctype ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Hop-limit:<S2SV_blank>%u,<S2SV_blank>Bandwidth:<S2SV_blank>%.10g<S2SV_blank>Mbps" , <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> image -> storage_class = PseudoClass ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> case RMT_NONE : <S2SV_EndBug> <S2SV_StartBug> * sun_colormap ; <S2SV_EndBug>
<S2SV_StartBug> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || <S2SV_EndBug> <S2SV_StartBug> ( cpi -> oxcf . auto_key && test_for_kf_one_pass ( cpi ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> rc -> frames_to_key = cpi -> key_frame_frequency ; <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = DEFAULT_GF_INTERVAL ; <S2SV_EndBug> <S2SV_StartBug> rc -> frames_till_gf_update_due = rc -> frames_to_key ; <S2SV_EndBug>
<S2SV_StartBug> opendata = nfs4_opendata_alloc ( & ctx -> path , state -> owner , 0 , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> ERR ( "callocing<S2SV_blank>this<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> this -> sd = socket ( AF_INET6 , SOCK_STREAM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ERR ( "sockect<S2SV_blank>open<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_addr = in6addr_any ; <S2SV_EndBug> <S2SV_StartBug> ERR ( "Bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>" <S2SV_EndBug> <S2SV_StartBug> ERR ( "listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket" ) ; <S2SV_EndBug>
<S2SV_StartBug> col_set_str ( pinfo -> cinfo , COL_PROTOCOL , "PKTAP" ) ; <S2SV_EndBug> <S2SV_StartBug> dissector_try_uint ( wtap_encap_dissector_table , <S2SV_EndBug> <S2SV_StartBug> wtap_pcap_encap_to_wtap_encap ( dlt ) , next_tvb , pinfo , tree ) ; <S2SV_EndBug>
<S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> cm -> last_frame_type = cm -> frame_type ; <S2SV_EndBug> <S2SV_StartBug> cpi , ( cpi -> sf . recode_loop >= ALLOW_RECODE_KFARFGF || <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ KEY_FRAME ] = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> 3 * rc -> avg_frame_qindex [ KEY_FRAME ] + cm -> base_qindex , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! rc -> is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) ) { <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ 2 ] = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 2 ] = ROUND_POWER_OF_TWO ( <S2SV_EndBug> <S2SV_StartBug> 3 * rc -> avg_frame_qindex [ 2 ] + cm -> base_qindex , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> tot_q += vp9_convert_qindex_to_q ( cm -> base_qindex ) ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_q = rc -> tot_q / ( double ) rc -> ni_frames ; <S2SV_EndBug> <S2SV_StartBug> rc -> ni_tot_qi += cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cm -> base_qindex < rc -> last_boosted_qindex ) || <S2SV_EndBug> <S2SV_StartBug> ( ( cpi -> static_mb_pct < 100 ) && <S2SV_EndBug> <S2SV_StartBug> ( ( cm -> frame_type == KEY_FRAME ) || cpi -> refresh_alt_ref_frame || <S2SV_EndBug> <S2SV_StartBug> rc -> last_boosted_qindex = cm -> base_qindex ; <S2SV_EndBug> <S2SV_StartBug> rc -> total_target_bits += ( cm -> show_frame ? rc -> av_per_frame_bandwidth : 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> play_alternate && cpi -> refresh_alt_ref_frame && <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int delegation_type = 0 ; <S2SV_EndBug>
<S2SV_StartBug> rrd_set_error ( "bad<S2SV_blank>format<S2SV_blank>for<S2SV_blank>imginfo" ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> pr_err ( "Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>" <S2SV_EndBug>
<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> dst . val , ctxt -> op_bytes ) ; <S2SV_EndBug>
<S2SV_StartBug> r = parse_gid ( e + 1 , & gid ) ; <S2SV_EndBug>
<S2SV_StartBug> static void reconstruct_inter_block ( int plane , int block , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = args -> xd ; <S2SV_EndBug> <S2SV_StartBug> int x , y , eob ; <S2SV_EndBug> <S2SV_StartBug> eob = vp9_decode_block_tokens ( cm , xd , plane , block , plane_bsize , x , y , <S2SV_EndBug> <S2SV_StartBug> inverse_transform_block ( xd , plane , block , tx_size , <S2SV_EndBug> <S2SV_StartBug> & pd -> dst . buf [ 4 * y * pd -> dst . stride + 4 * x ] , <S2SV_EndBug> <S2SV_StartBug> * args -> eobtotal += eob ; <S2SV_EndBug>
<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug>
<S2SV_StartBug> length += len ; <S2SV_EndBug>
<S2SV_StartBug> mask |= FS_EVENT_ON_CHILD ; <S2SV_EndBug> <S2SV_StartBug> if ( path ) <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) , i , j ; <S2SV_EndBug>
<S2SV_StartBug> tcon -> bad_network_name = true ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( bss_cfg -> rates , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rate_ie ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( bss_cfg -> rates + rate_len , rate_ie + 1 , rate_ie -> len ) ; <S2SV_EndBug>
<S2SV_StartBug> agoo_log_cat ( & agoo_con_cat , "Server<S2SV_blank>with<S2SV_blank>pid<S2SV_blank>%d<S2SV_blank>accepted<S2SV_blank>connection<S2SV_blank>%llu<S2SV_blank>on<S2SV_blank>%s<S2SV_blank>[%d]" , <S2SV_EndBug> <S2SV_StartBug> getpid ( ) , ( unsigned long long ) cnt , b -> id , con -> sock ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = strdup_if_nonnull ( & target -> cr_principal , source -> cr_principal ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug>
<S2SV_StartBug> assert ( offset >= capoff ) ; <S2SV_EndBug>
<S2SV_StartBug> r = mount ( "cgroup_root" , path , "tmpfs" , MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_RELATIME , "size=10240k,mode=755" ) ; <S2SV_EndBug>
<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int block_size , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 , k = 0 ; i < block_size ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < block_size ; j ++ , k ++ ) { <S2SV_EndBug> <S2SV_StartBug> modifier += 1 << ( strength - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> byte += stride - block_size ; <S2SV_EndBug>
<S2SV_StartBug> assert ( idx >= 1 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> return check_mac_perms_from_lookup ( spid , uid , perm , str8 ( name , name_len ) ) ? 1 : 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( Offset < ( SizeOfHeader + 8 ) ) goto Error ; <S2SV_EndBug>
<S2SV_StartBug> void ext4_xattr_destroy_cache ( struct mb_cache * cache ) <S2SV_EndBug> <S2SV_StartBug> mb_cache_destroy ( cache ) ; <S2SV_EndBug>
<S2SV_StartBug> mu_run_test ( test_r_str_unescape ) ; <S2SV_EndBug>
<S2SV_StartBug> sbinfo -> max_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> sbinfo -> free_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> if ( ! inode ) <S2SV_EndBug> <S2SV_StartBug> root = d_alloc_root ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( sbinfo ) ; <S2SV_EndBug>
<S2SV_StartBug> U2FHID_INIT_RESP initresp ; <S2SV_EndBug> <S2SV_StartBug> if ( resplen > sizeof ( initresp ) ) <S2SV_EndBug> <S2SV_StartBug> dev -> cid = initresp . cid ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionInterface = initresp . versionInterface ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMajor = initresp . versionMajor ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMinor = initresp . versionMinor ; <S2SV_EndBug> <S2SV_StartBug> dev -> capFlags = initresp . capFlags ; <S2SV_EndBug>
<S2SV_StartBug> return MS_FALSE ; <S2SV_EndBug>
<S2SV_StartBug> return recv ( socket -> fd , buf , count , MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , CAP_SYS_ADMIN ) ) && <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_get_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( pptr [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> plen -= 32 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & route_target , & pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_32BITS ( pptr + 1 ) ) , <S2SV_EndBug>
<S2SV_StartBug> cork -> length += length ; <S2SV_EndBug> <S2SV_StartBug> if ( length > mtu ) { <S2SV_EndBug> <S2SV_StartBug> if ( dontfrag && ( proto == IPPROTO_UDP || proto == IPPROTO_RAW ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( proto == IPPROTO_UDP && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vstart += verdef -> vd_aux ; <S2SV_EndBug>
<S2SV_StartBug> mapping = ( struct address_space * ) page_private ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> zap = key -> payload . data [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rcu_assign_keypointer ( key , upayload ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_fht8x8_c ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct8x8_c ( input , output , stride ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 64 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = & out [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 8 ] , temp_out [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> outptr [ j * 8 + i ] = temp_out [ j ] ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , xcp , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( s -> chunksize >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> s -> chunksize = strtoll ( line , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( NULL , AV_LOG_TRACE , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRId64 "\'\\n" , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t target = h -> is_streamed ? 0 : s -> off ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_INFO , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 "<S2SV_blank>error=%s.\\n" , s -> off , av_err2str ( read_ret ) ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_ERROR , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 ".\\n" , target ) ; <S2SV_EndBug>
<S2SV_StartBug> int iSrc ; <S2SV_EndBug> <S2SV_StartBug> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { <S2SV_EndBug> <S2SV_StartBug> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> else if ( ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ALOGE ( "b/26366256" ) ; <S2SV_EndBug>
<S2SV_StartBug> void unix_inflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight ++ ; <S2SV_EndBug>
<S2SV_StartBug> const u_char * bp , enum pimv2_addrtype at , int silent ) <S2SV_EndBug> <S2SV_StartBug> int len , hdrlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> len = sizeof ( struct in_addr ) ; <S2SV_EndBug> <S2SV_StartBug> len = sizeof ( struct in6_addr ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( pimv2_addr_len ) { <S2SV_EndBug> <S2SV_StartBug> len = pimv2_addr_len ; <S2SV_EndBug> <S2SV_StartBug> switch ( at ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> return hdrlen + len ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , len + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> return hdrlen + 2 + len ; <S2SV_EndBug>
<S2SV_StartBug> n = r -> sector_count ; <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = n * 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , & r -> qiov , n , <S2SV_EndBug>
<S2SV_StartBug> match_length += callback_args -> forward_matches ; <S2SV_EndBug>
<S2SV_StartBug> string -> space = 1 ; <S2SV_EndBug> <S2SV_StartBug> string -> space *= 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( string -> space < 0 ) <S2SV_EndBug> <S2SV_StartBug> new_len = string -> space = G_MAXINT - 8 ; <S2SV_EndBug>
<S2SV_StartBug> newnp -> mcast_oif = inet6_iif ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> newnp -> pktoptions = NULL ; <S2SV_EndBug>
<S2SV_StartBug> szLineConv [ i ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ret = ih264d_start_of_pic ( ps_dec , poc , ps_cur_poc , <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> ps_cur_slice -> u1_field_pic_flag ) <S2SV_EndBug>
<S2SV_StartBug> cmdline_status = options_cmdline ( arg1 , arg2 ) ; <S2SV_EndBug> <S2SV_StartBug> return cmdline_status ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> len = get_line_size ( * b , * avail , nl ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static INLINE int cost_coeffs ( MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const int16_t * const qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int c , cost ; <S2SV_EndBug> <S2SV_StartBug> : get_uv_tx_size ( mbmi ) == tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> int prev_t = vp9_dct_value_tokens_ptr [ v ] . token ; <S2SV_EndBug> <S2SV_StartBug> cost = ( * token_costs ) [ 0 ] [ pt ] [ prev_t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug> <S2SV_StartBug> int t ; <S2SV_EndBug> <S2SV_StartBug> t = vp9_dct_value_tokens_ptr [ v ] . token ; <S2SV_EndBug> <S2SV_StartBug> cost += ( * token_costs ) [ ! prev_t ] [ ! prev_t ] [ t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug> <S2SV_StartBug> cost += ( * token_costs ) [ ! prev_t ] [ pt ] [ t ] + vp9_dct_value_cost_ptr [ v ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( net != c_net || ! tc -> t_sock ) <S2SV_EndBug>
<S2SV_StartBug> CU_add_test ( parserTestSuite , "Parse<S2SV_blank>Exchange" , test_parserComplete ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return NF_ACCEPT ; <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( line , ':' ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> msg -> fp = mutt_bcache_get ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> fp = mutt_bcache_put ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug> <S2SV_StartBug> mutt_bcache_commit ( pop_data -> bcache , h -> data ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0xc0 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x40 ) <S2SV_EndBug>
<S2SV_StartBug> struct serial_icounter_struct icount ; <S2SV_EndBug>
<S2SV_StartBug> r = mount ( "cgroup_root" , path , "tmpfs" , MS_NOSUID | MS_NODEV | MS_NOEXEC | MS_RELATIME , "size=10240k,mode=755" ) ; <S2SV_EndBug>
<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( len + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( CorruptImageError , <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( rcomp . type , "compression" , sizeof ( rcomp . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug>
<S2SV_StartBug> return ( ( f != NULL && <S2SV_EndBug> <S2SV_StartBug> f -> addressFamily != NULL && f -> addressFamily -> data != NULL ) <S2SV_EndBug> <S2SV_StartBug> ? ( ( f -> addressFamily -> data [ 0 ] << 8 ) | ( f -> addressFamily -> data [ 1 ] ) ) <S2SV_EndBug>
<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <S2SV_EndBug> <S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( stat ( "/etc/skel/.zshrc" , & s ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( is_link ( "/etc/skel/.zshrc" ) ) { <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>/etc/skel/.zshrc<S2SV_blank>file\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_file ( "/etc/skel/.zshrc" , fname ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> errExit ( "chown" ) ; <S2SV_EndBug> <S2SV_StartBug> fs_logger ( "clone<S2SV_blank>/etc/skel/.zshrc" ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( arg_csh ) { <S2SV_EndBug>
<S2SV_StartBug> s_alDriver = Cvar_Get ( "s_alDriver" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( "s_alDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = scsi_disk_emulate_command ( r , r -> iov . iov_base ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> type , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , length - 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_64BITS ( tptr + 3 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , tptr + 3 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , length - 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> state -> object_nl = strdup ( RSTRING_PTR ( object_nl ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( y = 0 ; y < s -> ymin ; y ++ ) { <S2SV_EndBug>
<S2SV_StartBug> for ( ac = 0 ; ac < IEEE80211_NUM_ACS ; ac ++ ) { <S2SV_EndBug> <S2SV_StartBug> ieee80211_add_pending_skbs_fn ( local , & pending , clear_sta_ps_flags , sta ) ; <S2SV_EndBug>
<S2SV_StartBug> prefetch_table ( ( const void * ) encT , sizeof ( encT ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ssh * ssh = active_state ; <S2SV_EndBug> <S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug>
<S2SV_StartBug> if ( l >= ( len - o ) ) { <S2SV_EndBug>
<S2SV_StartBug> ap_log_cerror ( APLOG_MARK , APLOG_ERR , 0 , session -> c , <S2SV_EndBug> <S2SV_StartBug> if ( status != APR_SUCCESS && ! h2_stream_is_ready ( stream ) ) { <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> CAFChannelLayout * caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; <S2SV_EndBug> <S2SV_StartBug> ! DoReadFile ( infile , caf_channel_layout , ( uint32_t ) caf_chunk_header . mChunkSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> int bytes_to_copy = ( uint32_t ) caf_chunk_header . mChunkSize ; <S2SV_EndBug> <S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> char linebuf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fgets ( linebuf , L_BUF_SIZE , fp ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> sscanf ( linebuf , "<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%s<S2SV_blank><S2SV_blank>------" , selname ) ; <S2SV_EndBug>
<S2SV_StartBug> char build [ ATUSB_BUILD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( isspace ( * s ) ) <S2SV_EndBug>
<S2SV_StartBug> uzbl . net . useragent = "Test<S2SV_blank>useragent" ; <S2SV_EndBug>
<S2SV_StartBug> zval * options = NULL , * classes = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! php_var_unserialize_ex ( return_value , & p , p + buf_len , & var_hash , class_hash ) ) { <S2SV_EndBug> <S2SV_StartBug> zval_ptr_dtor ( return_value ) ; <S2SV_EndBug> <S2SV_StartBug> var_push_dtor ( & var_hash , return_value ) ; <S2SV_EndBug>
<S2SV_StartBug> int cond_len , then_len , jump_len ; <S2SV_EndBug> <S2SV_StartBug> jump_len = cond_len + then_len + SIZE_OP_ATOMIC_END ; <S2SV_EndBug> <S2SV_StartBug> int else_len = compile_length_tree ( Else , reg ) ; <S2SV_EndBug> <S2SV_StartBug> COP ( reg ) -> jump . addr = else_len + SIZE_INC_OP ; <S2SV_EndBug> <S2SV_StartBug> r = compile_tree ( Else , reg , env ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pt [ 6 ] & AX25_HBIT ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ facilities -> source_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t * outbuf ; <S2SV_EndBug> <S2SV_StartBug> command = buf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rc = scsi_disk_emulate_command ( r , outbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> assertEqualInt ( ARCHIVE_OK , archive_write_free ( a ) ) ; <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * p , u_int length , u_int caplen ) <S2SV_EndBug> <S2SV_StartBug> if ( caplen <= 1 ) { <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen > 1 ) <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug>
<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_name = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> mb_height > 68 || <S2SV_EndBug> <S2SV_StartBug> ctx -> data_offset = 0x280 ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> opt = np -> opt ; <S2SV_EndBug> <S2SV_StartBug> return err < 0 ? err : len ; <S2SV_EndBug>
<S2SV_StartBug> mutex_lock ( & vdev -> vdev_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( count < sizeof ( cmd ) ) { <S2SV_EndBug>
<S2SV_StartBug> filename [ filename_size ++ ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc == 0 ) <S2SV_EndBug>
<S2SV_StartBug> spin_lock_init ( & port -> phy_list_lock ) ; <S2SV_EndBug>
<S2SV_StartBug> hmp_data = hmp_chunk [ i ] + chunk_length [ i ] ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmp_mdi , hmp_chunk [ i ] , 0 ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_end [ i ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( * hmp_chunk [ i ] < 0x80 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmp_chunk [ i ] < 0x80 ) ; <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> hmp_chunk [ i ] ++ ; <S2SV_EndBug>
<S2SV_StartBug> mem_free ( gr . gr_ctx . value , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & min_stat , & gd -> checksum ) ; <S2SV_EndBug>
<S2SV_StartBug> ns_capable ( current -> nsproxy -> pid_ns -> user_ns , CAP_SYS_ADMIN ) ) && <S2SV_EndBug>
<S2SV_StartBug> mntput ( ns -> proc_mnt ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return ! inode_capable ( inode , CAP_FOWNER ) ; <S2SV_EndBug>
<S2SV_StartBug> struct LayerData * cx_layer_list = NULL ; <S2SV_EndBug> <S2SV_StartBug> memset ( & superframe , 0 , sizeof ( superframe ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VPX_CODEC_CX_FRAME_PKT : { <S2SV_EndBug> <S2SV_StartBug> si -> bytes_sum [ si -> layer ] += frame_pkt_size ; <S2SV_EndBug> <S2SV_StartBug> ld_list_add ( & cx_layer_list , layer_data ) ; <S2SV_EndBug>
<S2SV_StartBug> void * parg = NULL ; <S2SV_EndBug> <S2SV_StartBug> int is_ext_ctrl ; <S2SV_EndBug> <S2SV_StartBug> case _IOC_NONE : <S2SV_EndBug> <S2SV_StartBug> case _IOC_WRITE : <S2SV_EndBug> <S2SV_StartBug> if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { <S2SV_EndBug>
<S2SV_StartBug> char fstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> pi -> xstep = pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> xstep = JAS_MIN ( pi -> xstep , pi -> picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = JAS_MIN ( pi -> ystep , pi -> picomp -> vsamp * ( 1 << <S2SV_EndBug>
<S2SV_StartBug> sraSpanInsertAfter ( sraSpan * newspan , sraSpan * after ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> while ( c && which > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = c -> next ; <S2SV_EndBug>
<S2SV_StartBug> if ( noblock ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & payload [ j ] , msg -> buf , msg -> len ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , bp , len , ndo -> ndo_snapend - bp ) ; <S2SV_EndBug>
<S2SV_StartBug> skcipher -> setkey = alg -> setkey ; <S2SV_EndBug>
<S2SV_StartBug> c . c_normalize_args = NULL ; <S2SV_EndBug> <S2SV_StartBug> PyTuple_SET_ITEM ( c . c_normalize_args , 1 , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_encode_block_intra ( MACROBLOCK * x , int plane , int block , <S2SV_EndBug> <S2SV_StartBug> unsigned char * skip ) { <S2SV_EndBug> <S2SV_StartBug> struct encode_b_args arg = { x , NULL , skip } ; <S2SV_EndBug>
<S2SV_StartBug> UnpackRaster : <S2SV_EndBug> <S2SV_StartBug> image -> rows = Bitmap2Header1 . Height ; <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) <S2SV_EndBug>
<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_ECDSA_SIG ( & s , & sigbuf , sig_len ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> ECDSA_SIG_free ( s ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( af ) { <S2SV_EndBug> <S2SV_StartBug> strncpy ( addr_text , <S2SV_EndBug> <S2SV_StartBug> ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , <S2SV_EndBug>
<S2SV_StartBug> struct tpacket_req * req = & req_u -> req ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pg_vec ) <S2SV_EndBug>
<S2SV_StartBug> ! no_port_forwarding_flag && ! options . disable_forwarding ) { <S2SV_EndBug>
<S2SV_StartBug> RANGE_CHECK_HI ( cfg , rc_undershoot_pct , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK_HI ( cfg , rc_overshoot_pct , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( cfg , ss_number_layers , 1 , VPX_SS_MAX_LAYERS ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ts_number_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> unsigned int i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 1 ; i < cfg -> ts_number_layers ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( "ts_target_bitrate<S2SV_blank>entries<S2SV_blank>are<S2SV_blank>not<S2SV_blank>increasing" ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = cfg -> ts_number_layers - 2 ; i > 0 ; -- i ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ts_rate_decimator [ i - 1 ] != 2 * cfg -> ts_rate_decimator [ i ] ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( "ts_rate_decimator<S2SV_blank>factors<S2SV_blank>are<S2SV_blank>not<S2SV_blank>powers<S2SV_blank>of<S2SV_blank>2" ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK_BOOL ( extra_cfg , enable_auto_alt_ref ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , cpu_used , - 16 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , arnr_type , 1 , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> RANGE_CHECK ( extra_cfg , cq_level , 0 , 63 ) ; <S2SV_EndBug> <S2SV_StartBug> size_t packet_sz = sizeof ( FIRSTPASS_STATS ) ; <S2SV_EndBug> <S2SV_StartBug> int n_packets = ( int ) ( cfg -> rc_twopass_stats_in . sz / packet_sz ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> ss_number_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> || ( int ) ( stats -> count + 0.5 ) != n_packets_per_layer [ layer_id ] - 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> g_profile <= ( unsigned int ) PROFILE_1 && <S2SV_EndBug> <S2SV_StartBug> extra_cfg -> bit_depth > BITS_8 ) <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 && <S2SV_EndBug> <S2SV_StartBug> extra_cfg -> bit_depth == BITS_8 ) <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8_get_last_ref_frame ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug>
<S2SV_StartBug> blk_cleanup_queue ( cd -> disk -> queue ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sum_calculated != headersum ) { <S2SV_EndBug>
<S2SV_StartBug> int fd = accept ( s , ( struct sockaddr * ) & client_address , & clen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( net != & init_net ) <S2SV_EndBug>
<S2SV_StartBug> rb_define_method ( req_class , "rack_version" , rack_version , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> rack_version_val = rb_str_new_cstr ( "rack.version" ) ; rb_gc_register_address ( & rack_version_val ) ; <S2SV_EndBug>
<S2SV_StartBug> static void calc_segtree_probs ( int * segcounts , vp9_prob * segment_tree_probs ) { <S2SV_EndBug>
<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt = ipv6_renew_options ( sk , np -> opt , optname , <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> tot_len = sizeof ( * opt ) + optlen ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug>
<S2SV_StartBug> JSObjectRef globalobject ; <S2SV_EndBug> <S2SV_StartBug> globalobject = JSContextGetGlobalObject ( context ) ; <S2SV_EndBug> <S2SV_StartBug> JSObjectDeleteProperty ( context , globalobject , var_name , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> const int zbin = cpi -> zbin_mode_boost + x -> act_zbin_adj ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ 0 ] . quant_shift = quants -> y_quant_shift [ qindex ] ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ 0 ] . zbin_extra = ( int16_t ) ( ( cm -> y_dequant [ qindex ] [ 1 ] * zbin ) >> 7 ) ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ i ] . quant_shift = quants -> uv_quant_shift [ qindex ] ; <S2SV_EndBug> <S2SV_StartBug> x -> plane [ i ] . zbin_extra = ( int16_t ) ( ( cm -> uv_dequant [ qindex ] [ 1 ] * zbin ) >> 7 ) ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> <S2SV_StartBug> x -> skip_block = vp9_segfeature_active ( & cm -> seg , segment_id , SEG_LVL_SKIP ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_initialize_me_consts ( cpi , x -> q_index ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( label_exec ( opt_exec_label ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> same_page : <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> oxcf -> tuning = vp8_cfg . tuning ; <S2SV_EndBug>
<S2SV_StartBug> usleep ( us_delay ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> pbi ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> pbi = NULL ; <S2SV_EndBug>
<S2SV_StartBug> c_t = tvb_get_bits8 ( tvb , tb_bit_off , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> macinf -> lchid [ j + chan ] = c_t + 1 ; <S2SV_EndBug> <S2SV_StartBug> macinf -> content [ j + chan ] = lchId_type_table [ c_t + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> rlcinf -> mode [ j + chan ] = lchId_rlc_map [ c_t + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( setuid ( current_user . uid ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( setgid ( current_user . gid ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug>
<S2SV_StartBug> int copy = output_size - count ; <S2SV_EndBug> <S2SV_StartBug> if ( avail < copy ) copy = avail ; <S2SV_EndBug>
<S2SV_StartBug> pi -> xstep = pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> pi -> xstep = JAS_MIN ( pi -> xstep , pi -> picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> pi -> ystep = JAS_MIN ( pi -> ystep , pi -> picomp -> vsamp * ( 1 << <S2SV_EndBug>
<S2SV_StartBug> struct keydata * keyptr ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = half_md4_transform ( hash , keyptr -> secret ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( using_compacted_format ( ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> err = __copy_from_user ( & fpu -> state . xsave , buf_fx , state_size ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc32 ( tif , cp0 , cc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( c -> chunk_size == 0 ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug>
<S2SV_StartBug> u16 source_node_id ; <S2SV_EndBug> <S2SV_StartBug> specifier_id = ( be32_to_cpu ( buf_ptr [ 0 ] ) & 0xffff ) << 8 <S2SV_EndBug> <S2SV_StartBug> ( ver == RFC2734_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> || ver == RFC3146_SW_VERSION <S2SV_EndBug> <S2SV_StartBug> ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sc = create_spnego_ctx ( ) ; <S2SV_EndBug>
<S2SV_StartBug> len -= EVP_GCM_TLS_EXPLICIT_IV_LEN ; <S2SV_EndBug> <S2SV_StartBug> if ( ! EVP_CIPHER_CTX_encrypting ( c ) ) <S2SV_EndBug> <S2SV_StartBug> len -= EVP_GCM_TLS_TAG_LEN ; <S2SV_EndBug>
<S2SV_StartBug> int r , len , group = 0 ; <S2SV_EndBug> <S2SV_StartBug> Node * * tp ; <S2SV_EndBug> <S2SV_StartBug> goto end_of_token ; <S2SV_EndBug> <S2SV_StartBug> qn = node_new_quantifier ( tok -> u . repeat . lower , tok -> u . repeat . upper , <S2SV_EndBug>
<S2SV_StartBug> const int length , const char check_utf8 , const char check_dot , <S2SV_EndBug> <S2SV_StartBug> int position = 0 ; <S2SV_EndBug>
<S2SV_StartBug> q = QueueAuthenticPixels ( image , x , y , Min ( 4 , dds_info -> width - x ) , <S2SV_EndBug> <S2SV_StartBug> Min ( 4 , dds_info -> height - y ) , exception ) ; <S2SV_EndBug> <S2SV_StartBug> SkipDXTMipmaps ( image , dds_info , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( getCcalls ( L ) <= CSTACKERR ) <S2SV_EndBug> <S2SV_StartBug> luaE_freeCI ( L ) ; <S2SV_EndBug>
<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_DESTRUCT ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "who-has<S2SV_blank>%s" , ipaddr_string ( ndo , ATMTPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "tell<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>is-at<S2SV_blank>" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "at<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "for<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> h -> emptyStreamBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug> <S2SV_StartBug> h -> emptyFileBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> h -> antiBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> if ( ( ll & 1 ) || ll < zip -> numFiles * 4 ) <S2SV_EndBug> <S2SV_StartBug> h -> attrBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> av_assert1 ( avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug>
<S2SV_StartBug> len = file ? file -> size : 4096 ; <S2SV_EndBug>
<S2SV_StartBug> if ( data_sz <= 8 ) <S2SV_EndBug> <S2SV_StartBug> struct vp9_read_bit_buffer rb = { data , data + data_sz , 0 , NULL , NULL } ; <S2SV_EndBug>
<S2SV_StartBug> vstart += entry -> vn_aux ; <S2SV_EndBug>
<S2SV_StartBug> return code ; <S2SV_EndBug>
<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pSubSrc -> nSrc > 1 || isAgg || IsVirtual ( pSubSrc -> a [ 0 ] . pTab ) ) { <S2SV_EndBug>
<S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned char , best_predictor , 16 * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , short , best_dqcoeff , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( best_dqcoeff , b -> dqcoeff , 32 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct pipe_buffer * buf ; <S2SV_EndBug> <S2SV_StartBug> orig_sz = size ; <S2SV_EndBug> <S2SV_StartBug> if ( off ) <S2SV_EndBug> <S2SV_StartBug> size += off - pipe -> bufs [ idx ] . offset ; <S2SV_EndBug> <S2SV_StartBug> if ( size <= buf -> len ) <S2SV_EndBug> <S2SV_StartBug> size -= buf -> len ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = size ; <S2SV_EndBug> <S2SV_StartBug> off = i -> iov_offset = buf -> offset + size ; <S2SV_EndBug> <S2SV_StartBug> i -> count -= orig_sz ; <S2SV_EndBug>
<S2SV_StartBug> PyObject * logical = NULL ; <S2SV_EndBug> <S2SV_StartBug> FriBidiParType base = FRIBIDI_TYPE_RTL ; <S2SV_EndBug> <S2SV_StartBug> { "logical" , "base_direction" , "encoding" , "clean" , "reordernsm" , NULL } ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PyArg_ParseTupleAndKeywords ( args , kw , "O|isii" , kwargs , <S2SV_EndBug> <S2SV_StartBug> & logical , & base , & encoding , & clean , & reordernsm ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON ) ) <S2SV_EndBug> <S2SV_StartBug> if ( PyUnicode_Check ( logical ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( PyString_Check ( logical ) ) <S2SV_EndBug>
<S2SV_StartBug> wp -> socket_mode = 0666 ; <S2SV_EndBug>
<S2SV_StartBug> i1_is_end_of_poc = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( g -> sect <= 0 || <S2SV_EndBug> <S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug>
<S2SV_StartBug> u64 base_addr , size ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! IS_POSIXACL ( inode ) || ! inode -> i_op -> set_acl ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_access , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_default , <S2SV_EndBug> <S2SV_StartBug> out_drop_write : <S2SV_EndBug>
<S2SV_StartBug> dev -> netdev_ops = & bnep_netdev_ops ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t authResult = 0 , reasonLen = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ReadFromRFBServer ( client , ( char * ) & reasonLen , 4 ) ) return FALSE ; <S2SV_EndBug>
<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> cJSON * cJSON_CreateIntArray ( int64_t * numbers , int count ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; a && i < count ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> n = cJSON_CreateInt ( numbers [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! i ) <S2SV_EndBug>
<S2SV_StartBug> f2fs_wait_discard_bios ( sbi ) ; <S2SV_EndBug>
<S2SV_StartBug> bitmap -> compressed = FALSE ; <S2SV_EndBug> <S2SV_StartBug> bitmap -> length = DstWidth * DstHeight * GetBytesPerPixel ( bitmap -> format ) ; <S2SV_EndBug>
<S2SV_StartBug> devc -> voc [ voice ] . panning = value ; <S2SV_EndBug>
<S2SV_StartBug> if ( server . vm_enabled && listLength ( server . io_ready_clients ) ) { <S2SV_EndBug> <S2SV_StartBug> server . vm_blocked_clients -- ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , sfar ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( entries -- ) <S2SV_EndBug>
<S2SV_StartBug> int Q = cpi -> active_worst_quality ; <S2SV_EndBug>
<S2SV_StartBug> f = po -> fanout ; <S2SV_EndBug> <S2SV_StartBug> if ( ! f ) <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void vp9_predict_intra_block ( const MACROBLOCKD * xd , int block_idx , int bwl_in , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> const int bwl = bwl_in - tx_size ; <S2SV_EndBug> <S2SV_StartBug> const int wmask = ( 1 << bwl ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> const int have_top = ( block_idx >> bwl ) || xd -> up_available ; <S2SV_EndBug> <S2SV_StartBug> const int have_left = ( block_idx & wmask ) || xd -> left_available ; <S2SV_EndBug>
<S2SV_StartBug> z . kind = 0 ; <S2SV_EndBug> <S2SV_StartBug> # define PARSE_STRING s = parse_field ( ndo , & parse , & parselen ) ; if ( ! s ) lose = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( lose ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( CheckMemoryOverflow ( count , quantum ) != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> ( void ) CopyMagickMemory ( clone_info -> magick , magic_info -> name , MagickPathExtent ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < len ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = 0xc0 | ( ( szLine [ i ] >> 6 ) & 0x3 ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( szLine [ i ] & 0xe0 ) == 0xc0 ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug>
<S2SV_StartBug> void rdp_read_flow_control_pdu ( wStream * s , UINT16 * type ) <S2SV_EndBug> <S2SV_StartBug> UINT8 pduType ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ikev1_attr_print ( netdissect_options * ndo , const u_char * p , const u_char * ep ) <S2SV_EndBug> <S2SV_StartBug> if ( p [ 0 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( ep < p + totlen ) { <S2SV_EndBug> <S2SV_StartBug> return ep + 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 2 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "len=%d<S2SV_blank>value=" , EXTRACT_16BITS ( & p [ 2 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 4 ] , EXTRACT_16BITS ( & p [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return p + totlen ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uchar buf [ 2 ] ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( bin ) <S2SV_EndBug> <S2SV_StartBug> numones -= 1 ; <S2SV_EndBug>
<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , ".txt" ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "0x%08x" , EXTRACT_32BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "v%d" , * bp ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>?0x%04x?" , EXTRACT_16BITS ( bp + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return to_o2nm_cluster ( node -> nd_item . ci_parent -> ci_parent ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int64_t cur_offset = avio_tell ( pb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( count >= 4 ) { <S2SV_EndBug>
<S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> ep = ( const u_char * ) ndo -> ndo_snapend ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( pim -> pim_rsv ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>RFC2117-encoding" ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( PIM_TYPE ( pim -> pim_typever ) ) { <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 4 + olen ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ptr < ( bp + olen ) ) { <S2SV_EndBug> <S2SV_StartBug> advance = pimv2_addr_print ( ndo , ptr , pimv2_unicast , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> bp += olen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( bp + 4 ) , PIMV2_REGISTER_FLAG_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_32BITS ( bp + 4 ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 8 ; len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> switch ( IP_V ( ip ) ) { <S2SV_EndBug> <S2SV_StartBug> case 0 : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; len -= 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 4 > ep ) <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 4 > ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> jp_done : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>FRPcnt=%d" , frpcnt = bp [ 1 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp + 2 >= ep ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ",prio=%d" , bp [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> bs_done : <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; len -= 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) <S2SV_EndBug> <S2SV_StartBug> bp += 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( bp + 1 >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>prio=%d" , bp [ 1 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bp >= ep ) break ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>grp=" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>forwarder=" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( p -> selFlags & SF_UsesEphemeral ) { <S2SV_EndBug>
<S2SV_StartBug> struct fscrypt_info * ci = inode -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ci || <S2SV_EndBug>
<S2SV_StartBug> vp9_quantize_b ( BLOCK_OFFSET ( p -> coeff , block ) , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , & p -> eobs [ block ] , scan , iscan ) ; <S2SV_EndBug>
<S2SV_StartBug> jumpstack [ stackidx ++ ] = e ; <S2SV_EndBug>
<S2SV_StartBug> CRM_LOG_ASSERT ( client_obj -> request_id ) ; <S2SV_EndBug> <S2SV_StartBug> rid , client_obj -> name , from_peer ? "(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)" : "" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug>
<S2SV_StartBug> if ( NFCT_FRAG6_CB ( fp ) -> orig == NULL ) <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> "vm_enabled:%d\\r\\n" <S2SV_EndBug> <S2SV_StartBug> server . vm_enabled != 0 , <S2SV_EndBug> <S2SV_StartBug> if ( server . vm_enabled ) { <S2SV_EndBug> <S2SV_StartBug> "vm_conf_max_memory:%llu\\r\\n" <S2SV_EndBug> <S2SV_StartBug> , ( unsigned long long ) server . vm_max_memory , <S2SV_EndBug> <S2SV_StartBug> ( unsigned long long ) server . vm_page_size , <S2SV_EndBug>
<S2SV_StartBug> p = strchr ( context -> buffer , \'\\"\' ) ; <S2SV_EndBug>
<S2SV_StartBug> void imap_quote_string ( char * dest , size_t dlen , const char * src ) <S2SV_EndBug>
<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 2 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug>
<S2SV_StartBug> img -> bps = 12 ; <S2SV_EndBug>
<S2SV_StartBug> s = & pit_state -> channels [ addr ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( kern_path ( dev_name , LOOKUP_FOLLOW , & path ) ) { <S2SV_EndBug>
<S2SV_StartBug> int i , n_items , end_lineno , end_col_offset ; <S2SV_EndBug> <S2SV_StartBug> REQ ( n , with_stmt ) ; <S2SV_EndBug> <S2SV_StartBug> n_items = ( NCH ( n ) - 2 ) / 2 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 1 ; i < NCH ( n ) - 2 ; i += 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( is_async ) <S2SV_EndBug> <S2SV_StartBug> return AsyncWith ( items , body , LINENO ( n0 ) , n0 -> n_col_offset , <S2SV_EndBug> <S2SV_StartBug> return With ( items , body , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug>
<S2SV_StartBug> while ( * s && * s != \'\\"\' ) <S2SV_EndBug> <S2SV_StartBug> while ( isdigit ( ( unsigned char ) * s ) ) <S2SV_EndBug>
<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , optlen + 4 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( gr -> gr_ctx . value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( gr -> gr_ctx . value , gd -> ctx , sizeof ( gss_union_ctx_id_desc ) ) ; <S2SV_EndBug>
<S2SV_StartBug> s -> off = strtoll ( p , NULL , 10 ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = strtoll ( slash + 1 , NULL , 10 ) ; <S2SV_EndBug>
<S2SV_StartBug> ThrowReaderException ( CorruptImageError , "UnableToReadImageData" ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> optimal_buffer_level / 100 ) ; <S2SV_EndBug>
<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_name = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug>
<S2SV_StartBug> static int can_open_cached ( struct nfs4_state * state , int mode ) <S2SV_EndBug> <S2SV_StartBug> switch ( mode & ( FMODE_READ | FMODE_WRITE | O_EXCL ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( src < ( uint8_t * ) buf || src > ( uint8_t * ) buf + buf_size ) <S2SV_EndBug>
<S2SV_StartBug> if ( * p == FAC_CCITT_DEST_NSAP ) { <S2SV_EndBug>
<S2SV_StartBug> int nByte = sizeof ( * pWith ) + ( sizeof ( pWith -> a [ 1 ] ) * pWith -> nCte ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( len > count ) <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>packet<S2SV_blank>exceeded<S2SV_blank>snapshot" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> cookie = dentry -> d_inode -> i_op -> follow_link ( dentry , nd ) ; <S2SV_EndBug>
<S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ptr = cp [ 2 ] - 1 ; <S2SV_EndBug> <S2SV_StartBug> switch ( cp [ 3 ] & 0xF ) { <S2SV_EndBug> <S2SV_StartBug> type = "<S2SV_blank>^<S2SV_blank>" ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void impeg2d_dec_pnb_mb_params ( dec_state_t * ps_dec ) <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug>
<S2SV_StartBug> static u32 ip6_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_idents_hashrnd , daddr , saddr ) ; <S2SV_EndBug>
<S2SV_StartBug> int mi_index = 0 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; <S2SV_EndBug> <S2SV_StartBug> print_mi_data ( cm , mvs , "Skips:" , offsetof ( MB_MODE_INFO , skip ) ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( mvs , "V<S2SV_blank>" ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( mvs , "%4d:%4d<S2SV_blank>" , mi_8x8 [ mi_index ] -> mbmi . mv [ 0 ] . as_mv . row , <S2SV_EndBug> <S2SV_StartBug> mi_index += 8 ; <S2SV_EndBug> <S2SV_StartBug> fclose ( mvs ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( caught_signal ) <S2SV_EndBug> <S2SV_StartBug> sleep ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , _ ( "<S2SV_blank>...killed.\\n" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return le16_to_cpu ( alt -> endpoint [ 0 ] . desc . wMaxPacketSize ) ; <S2SV_EndBug>
<S2SV_StartBug> return udp_prot . setsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug>
<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> found = cm -> width == cfg -> y_crop_width && <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> use_svc ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> width - 1 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , cm -> height - 1 , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> BUG_IF ( tree_root == NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug>
<S2SV_StartBug> VTermState * state = vterm_allocator_malloc ( vt , sizeof ( VTermState ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static int _nfs4_do_open ( struct inode * dir , struct path * path , int flags , struct iattr * sattr , struct rpc_cred * cred , struct nfs4_state * * res ) <S2SV_EndBug> <S2SV_StartBug> nfs4_return_incompatible_delegation ( path -> dentry -> d_inode , flags & ( FMODE_READ | FMODE_WRITE ) ) ; <S2SV_EndBug> <S2SV_StartBug> opendata = nfs4_opendata_alloc ( path , sp , flags , sattr ) ; <S2SV_EndBug>
<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( tmp && alen < tmp ) { <S2SV_EndBug>
<S2SV_StartBug> libettercap_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( write_output ( ) != E_SUCCESS ) <S2SV_EndBug>
<S2SV_StartBug> printf ( "%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%u<S2SV_blank>sectors)\\n" , fs -> fat_size , <S2SV_EndBug> <S2SV_StartBug> fs -> fat_size / lss ) ; <S2SV_EndBug>
<S2SV_StartBug> static void update_stats ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> const int seg_ref_active = vp9_segfeature_active ( & cm -> seg , mbmi -> segment_id , <S2SV_EndBug> <S2SV_StartBug> FRAME_COUNTS * const counts = & cm -> counts ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> attach_shadowed ( mnt , parent , shadows ) ; <S2SV_EndBug>
<S2SV_StartBug> const char * errstr ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> SkipRGBMipmaps ( image , dds_info , 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_fht8x8_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct8x8_sse2 ( input , output , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> c16 -> Curves [ i ] = _cmsCalloc ( ContextID , nElements , sizeof ( cmsUInt16Number ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( osStrlen ( topicName ) == 2 && strchr ( topicName , '#' ) == NULL && <S2SV_EndBug> <S2SV_StartBug> strchr ( topicName , '+' ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> len = min_t ( unsigned int , len , sizeof ( sec ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! data ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * component ) <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> int max_bytes_matched = input_size ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_rc_init ( const VP9_CONFIG * oxcf , int pass , RATE_CONTROL * rc ) { <S2SV_EndBug> <S2SV_StartBug> if ( pass == 0 && oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) { <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 0 ] = oxcf -> worst_allowed_q ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 1 ] = oxcf -> worst_allowed_q ; <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 0 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 1 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> avg_frame_qindex [ 2 ] = ( oxcf -> worst_allowed_q + <S2SV_EndBug> <S2SV_StartBug> rc -> last_q [ 0 ] = oxcf -> best_allowed_q ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int array_index_stack [ ARRAY_INDEX_STACK_SIZE ] ; <S2SV_EndBug>
<S2SV_StartBug> "session<S2SV_blank>authenticated" , NULL , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug> <S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static MB_PREDICTION_MODE read_inter_mode ( VP9_COMMON * cm , vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> const int mode = vp9_read_tree ( r , vp9_inter_mode_tree , <S2SV_EndBug> <S2SV_StartBug> cm -> fc . inter_mode_probs [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! replace && card -> user_ctl_count >= MAX_USER_CONTROLS ) <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> static void optimize_b ( int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE tx_size , MACROBLOCK * mb , <S2SV_EndBug> <S2SV_StartBug> struct macroblock_plane * p = & mb -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * pd = & xd -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * coeff = BLOCK_OFFSET ( mb -> plane [ plane ] . coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int eob = p -> eobs [ block ] , final_eob , sz = 0 ; <S2SV_EndBug> <S2SV_StartBug> PLANE_TYPE type = pd -> plane_type ; <S2SV_EndBug> <S2SV_StartBug> uint8_t token_cache [ 1024 ] ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * dequant_ptr = pd -> dequant ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * scan = so -> scan ; <S2SV_EndBug> <S2SV_StartBug> rdmult = mb -> rdmult * err_mult ; <S2SV_EndBug> <S2SV_StartBug> if ( ! is_inter_block ( & mb -> e_mbd . mi [ 0 ] -> mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> rddiv = mb -> rddiv ; <S2SV_EndBug> <S2SV_StartBug> * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; <S2SV_EndBug> <S2SV_StartBug> token_cache [ scan [ i ] ] = vp9_pt_energy_class [ vp9_dct_value_tokens_ptr [ <S2SV_EndBug> <S2SV_StartBug> qcoeff [ scan [ i ] ] ] . token ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = eob ; i -- > i0 ; ) { <S2SV_EndBug> <S2SV_StartBug> rc = scan [ i ] ; <S2SV_EndBug> <S2SV_StartBug> x = qcoeff [ rc ] ; <S2SV_EndBug> <S2SV_StartBug> t0 = ( vp9_dct_value_tokens_ptr + x ) -> token ; <S2SV_EndBug> <S2SV_StartBug> base_bits = * ( vp9_dct_value_cost_ptr + x ) ; <S2SV_EndBug> <S2SV_StartBug> dx = mul * ( dqcoeff [ rc ] - coeff [ rc ] ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> t0 = t1 = ( vp9_dct_value_tokens_ptr + x ) -> token ; <S2SV_EndBug> <S2SV_StartBug> base_bits = * ( vp9_dct_value_cost_ptr + x ) ; <S2SV_EndBug> <S2SV_StartBug> if ( shortcut ) { <S2SV_EndBug> <S2SV_StartBug> dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; <S2SV_EndBug> <S2SV_StartBug> pt = combine_entropy_contexts ( * a , * l ) ; <S2SV_EndBug> <S2SV_StartBug> rate0 += mb -> token_costs [ tx_size ] [ type ] [ ref ] [ band ] [ 0 ] [ pt ] [ t0 ] ; <S2SV_EndBug> <S2SV_StartBug> rate1 += mb -> token_costs [ tx_size ] [ type ] [ ref ] [ band ] [ 0 ] [ pt ] [ t1 ] ; <S2SV_EndBug> <S2SV_StartBug> final_eob = i0 - 1 ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( qcoeff , 0 , sizeof ( * qcoeff ) * ( 16 << ( tx_size * 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dqcoeff , 0 , sizeof ( * dqcoeff ) * ( 16 << ( tx_size * 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> x = tokens [ i ] [ best ] . qc ; <S2SV_EndBug> <S2SV_StartBug> if ( x ) { <S2SV_EndBug> <S2SV_StartBug> rc = scan [ i ] ; <S2SV_EndBug> <S2SV_StartBug> * a = * l = ( final_eob > 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> int vp9_decode_block_tokens ( VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> int plane , int block , BLOCK_SIZE plane_bsize , <S2SV_EndBug> <S2SV_StartBug> int x , int y , TX_SIZE tx_size , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; <S2SV_EndBug> <S2SV_StartBug> const scan_order * so = get_scan ( xd , tx_size , pd -> plane_type , block ) ; <S2SV_EndBug> <S2SV_StartBug> const int eob = decode_coefs ( cm , xd , pd -> plane_type , <S2SV_EndBug> <S2SV_StartBug> BLOCK_OFFSET ( pd -> dqcoeff , block ) , tx_size , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , ctx , so -> scan , so -> neighbors , r ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_set_contexts ( xd , pd , plane_bsize , tx_size , eob > 0 , x , y ) ; <S2SV_EndBug>

<S2SV_StartBug> free_called += 1 ; <S2SV_EndBug>
<S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug>
<S2SV_StartBug> goto err_unregister_v4l2_dev ; <S2SV_EndBug> <S2SV_StartBug> err_unregister_v4l2_dev : <S2SV_EndBug>
<S2SV_StartBug> max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; <S2SV_EndBug> <S2SV_StartBug> max_packets = ( size_t ) ( number_pixels * viff_info . number_data_bands ) ; <S2SV_EndBug>
<S2SV_StartBug> # if HAVA_LZMA_H && HAVE_LIBLZMA <S2SV_EndBug>
<S2SV_StartBug> mcryptd_check_internal ( tb , & type , & mask ) ; <S2SV_EndBug>
<S2SV_StartBug> static void utee_param_to_param ( struct tee_ta_param * p , struct utee_params * up ) <S2SV_EndBug> <S2SV_StartBug> switch ( TEE_PARAM_TYPE_GET ( types , n ) ) { <S2SV_EndBug> <S2SV_StartBug> case TEE_PARAM_TYPE_MEMREF_INPUT : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mcryptd_check_internal ( tb , & type , & mask ) ; <S2SV_EndBug>
<S2SV_StartBug> void fdct8_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( output ) <S2SV_EndBug> <S2SV_StartBug> strcpy ( output , ( const char * ) output_u8 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! unconditional ( & e -> ip ) ) <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( keyring ) ) { <S2SV_EndBug>
<S2SV_StartBug> int isopen ; <S2SV_EndBug> <S2SV_StartBug> size = offsetof ( POLYGON , p [ 0 ] ) + sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_EndBug>
<S2SV_StartBug> void nsc_encode ( NSC_CONTEXT * context , const BYTE * bmpdata , UINT32 rowstride ) <S2SV_EndBug> <S2SV_StartBug> nsc_encode_argb_to_aycocg ( context , bmpdata , rowstride ) ; <S2SV_EndBug> <S2SV_StartBug> nsc_encode_subsampling ( context ) ; <S2SV_EndBug>
<S2SV_StartBug> * ( * fill ) ++ = suffix [ code ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! from_buffer ) { <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( context -> buffer , ':' ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( memcmp ( & name [ 2 ] , & content_name [ 2 ] , 31L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( & name [ 33 ] , & content_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . content = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & control_name [ 33 ] , 11L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . control = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & spaninfo_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . spaninfo = fi ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void generate_filename ( const char * pattern , char * out , size_t q_len , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( args -> skip ) <S2SV_EndBug> <S2SV_StartBug> if ( ! is_inter_block ( mbmi ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_encode_block_intra ( x , plane , block , plane_bsize , tx_size , & mbmi -> skip ) ; <S2SV_EndBug> <S2SV_StartBug> dist_block ( plane , block , tx_size , args ) ; <S2SV_EndBug> <S2SV_StartBug> rd1 = RDCOST ( x -> rdmult , x -> rddiv , args -> rate , args -> dist ) ; <S2SV_EndBug> <S2SV_StartBug> rd2 = RDCOST ( x -> rdmult , x -> rddiv , 0 , args -> sse ) ; <S2SV_EndBug> <S2SV_StartBug> args -> this_rate += args -> rate ; <S2SV_EndBug> <S2SV_StartBug> args -> this_dist += args -> dist ; <S2SV_EndBug> <S2SV_StartBug> args -> this_sse += args -> sse ; <S2SV_EndBug> <S2SV_StartBug> args -> skip = 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) length ; j += 8 ) <S2SV_EndBug> <S2SV_StartBug> "InsufficientImageDataInFile" , image -> filename ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 * gb_cur , * version_tlv , version , version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += version_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += lto_length ; <S2SV_EndBug> <S2SV_StartBug> gb_len += wks_length ; <S2SV_EndBug> <S2SV_StartBug> & miux_length ) ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> mrb_value value ; <S2SV_EndBug> <S2SV_StartBug> fiber_check_cfunc ( mrb , c ) ; <S2SV_EndBug> <S2SV_StartBug> if ( resume && c -> status == MRB_FIBER_TRANSFERRED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_RUNNING || c -> status == MRB_FIBER_RESUMED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_TERMINATED ) { <S2SV_EndBug> <S2SV_StartBug> mrb -> c -> status = resume ? MRB_FIBER_RESUMED : MRB_FIBER_TRANSFERRED ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_CREATED ) { <S2SV_EndBug> <S2SV_StartBug> if ( len >= c -> stend - c -> stack ) { <S2SV_EndBug> <S2SV_StartBug> fiber_switch_context ( mrb , c ) ; <S2SV_EndBug>
<S2SV_StartBug> uint_t i ; <S2SV_EndBug> <S2SV_StartBug> if ( length < sizeof ( DhcpMessage ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> if ( option -> code == DHCP_OPT_END ) <S2SV_EndBug> <S2SV_StartBug> if ( ( i + 1 ) >= length || ( i + 1 + option -> length ) >= length ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug>
<S2SV_StartBug> ipv6_select_ident ( fptr ) ; <S2SV_EndBug>
<S2SV_StartBug> rb_define_singleton_method ( klass , "read_memory" , read_memory , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rb_define_singleton_method ( klass , "from_document" , from_document , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> image = DestroyImageList ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> struct iovec * iovec ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( clone_flags & CLONE_THREAD ) && ! ( clone_flags & CLONE_SIGHAND ) ) <S2SV_EndBug>
<S2SV_StartBug> void ntlm_print_negotiate_flags ( UINT32 flags ) <S2SV_EndBug>
<S2SV_StartBug> new_fname = malloc ( strlen ( fname ) + strlen ( dirname ) + 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 496 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 861 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 558 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 855 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 607 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 708 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> if ( incomplete_class ) { <S2SV_EndBug> <S2SV_StartBug> # line 785 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 699 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> return object_common2 ( UNSERIALIZE_PASSTHRU , <S2SV_EndBug> <S2SV_StartBug> object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 819 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 678 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 861 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 643 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 917 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 610 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 971 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 600 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1069 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 585 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1143 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 558 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1197 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 551 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1212 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 544 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1222 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 521 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1268 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 500 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1312 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 863 "ext/standard/var_unserializer.re" <S2SV_EndBug>
<S2SV_StartBug> if ( send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ) <S2SV_EndBug>
<S2SV_StartBug> * ( * fill ) ++ = suffix [ code ] ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> p -> exit_signal = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( clone_flags & CLONE_PARENT ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const u_char * ep , uint32_t phase , uint32_t doi0 _U_ , <S2SV_EndBug> <S2SV_StartBug> uint32_t proto0 _U_ , int depth ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>orig=(" ) ) ; <S2SV_EndBug> <S2SV_StartBug> size_t nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case IPSECDOI_NTYPE_REPLAY_STATUS : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> isakmp_print ( ndo , cp , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ")" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> iframe -> iv = nghttp2_mem_malloc ( mem , sizeof ( nghttp2_settings_entry ) * <S2SV_EndBug>
<S2SV_StartBug> ! inode_capable ( VFS_I ( ip ) , CAP_FSETID ) ) <S2SV_EndBug>
<S2SV_StartBug> data -> o_arg . open_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> # define EXIFMultipleValues ( size , format , arg ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , arg ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> # define EXIFMultipleFractions ( size , format , arg1 , arg2 ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , ( arg1 ) , ( arg2 ) ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( GetValueFromSplayTree ( exif_resources , q ) == q ) <S2SV_EndBug> <S2SV_StartBug> components = ( ssize_t ) ReadPropertySignedLong ( endian , q + 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! static_key_enabled ( work -> key ) ) <S2SV_EndBug>
<S2SV_StartBug> goto errout_locked ; <S2SV_EndBug> <S2SV_StartBug> kfree ( family -> attrbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & bss_cfg -> wmm_info , wmm_ie + <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( connection -> buffer , '=' ) ; <S2SV_EndBug>
<S2SV_StartBug> * ( buf + insertpos ) = x2c ( & buf [ editpos + 3 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> ext4_set_inode_state ( inode , EXT4_STATE_DIO_UNWRITTEN ) ; <S2SV_EndBug> <S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_CONVERT ) { <S2SV_EndBug>
<S2SV_StartBug> ret = usbip_recv ( ud -> tcp_socket , urb -> transfer_buffer , size ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> net -> dev_base_seq = 1 ; <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( rl . type , "larval" , sizeof ( rl . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> cJSON * c ; <S2SV_EndBug>
<S2SV_StartBug> unpack_streams += ( size_t ) f [ i ] . numUnpackStreams ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( direction != ITER_PIPE ) ; <S2SV_EndBug>
<S2SV_StartBug> mnt_flags |= mnt -> mnt . mnt_flags & MNT_PROPAGATION_MASK ; <S2SV_EndBug>
<S2SV_StartBug> static int fsmVerify ( const char * path , rpmfi fi ) <S2SV_EndBug> <S2SV_StartBug> rc = fsmStat ( path , 0 , & dsb ) ; <S2SV_EndBug> <S2SV_StartBug> if ( S_ISDIR ( dsb . st_mode ) ) return 0 ; <S2SV_EndBug>
<S2SV_StartBug> snd_pcm_stream_unlock_irqrestore ( substream , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug>
<S2SV_StartBug> bool valid_handle ; <S2SV_EndBug> <S2SV_StartBug> valid_handle = ion_handle_validate ( client , handle ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> WORD16 i2_level_arr [ 16 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( frame -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! s -> cdx [ i ] || ! s -> cdy [ i ] ) { <S2SV_EndBug>
<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> follow_dotdot ( nd ) ; <S2SV_EndBug>
<S2SV_StartBug> dname = malloc ( strlen ( name ) + 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( type = gettoken_query ( state , & val , & lenval , & strval , & flag ) ) != END ) <S2SV_EndBug>
<S2SV_StartBug> struct sock * sk ; <S2SV_EndBug>
<S2SV_StartBug> static void usage ( char * progname ) { <S2SV_EndBug> <S2SV_StartBug> progname ) ; <S2SV_EndBug>
<S2SV_StartBug> int watchdog = 0 ; <S2SV_EndBug> <S2SV_StartBug> num = SSL_shutdown ( c -> ssl ) ; <S2SV_EndBug> <S2SV_StartBug> err = SSL_get_error ( c -> ssl , ( int ) num ) ; <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SYSCALL : <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_ZERO_RETURN : <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_WANT_WRITE : <S2SV_EndBug> <S2SV_StartBug> num = writesocket ( c -> sock_wfd -> fd , c -> ssl_buff , c -> ssl_ptr ) ; <S2SV_EndBug> <S2SV_StartBug> num = readsocket ( c -> sock_rfd -> fd , <S2SV_EndBug> <S2SV_StartBug> write_wants_read = 0 ; <S2SV_EndBug> <S2SV_StartBug> num = SSL_write ( c -> ssl , c -> sock_buff , ( int ) ( c -> sock_ptr ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( err = SSL_get_error ( c -> ssl , ( int ) num ) ) { <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SYSCALL : <S2SV_EndBug> <S2SV_StartBug> if ( num && parse_socket_error ( c , "SSL_write" ) ) <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_ZERO_RETURN : <S2SV_EndBug> <S2SV_StartBug> s_log ( LOG_INFO , "TLS<S2SV_blank>closed<S2SV_blank>(SSL_write)" ) ; <S2SV_EndBug> <S2SV_StartBug> case SSL_ERROR_SSL : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> evas_object_resize ( app_data -> window , DEFAULT_WIDTH , DEFAULT_HEIGHT ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( refill_pi_state_cache ( ) ) <S2SV_EndBug> <S2SV_StartBug> goto out_put_key1 ; <S2SV_EndBug>
<S2SV_StartBug> sctp_addiphdr_t * hdr ; <S2SV_EndBug> <S2SV_StartBug> int all_param_pass = 1 ; <S2SV_EndBug> <S2SV_StartBug> while ( chunk_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> asconf_param ) ; <S2SV_EndBug> <S2SV_StartBug> all_param_pass = 0 ; <S2SV_EndBug> <S2SV_StartBug> asconf_param -> crr_id , err_code , <S2SV_EndBug> <S2SV_StartBug> length = ntohs ( asconf_param -> param_hdr . length ) ; <S2SV_EndBug>
<S2SV_StartBug> cpio -> extract_flags |= ARCHIVE_EXTRACT_PERM ; <S2SV_EndBug> <S2SV_StartBug> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; <S2SV_EndBug>
<S2SV_StartBug> while ( c != EOF && c != '\\n' ) { <S2SV_EndBug> <S2SV_StartBug> c = tok_nextc ( tok ) ; <S2SV_EndBug>
<S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> oxcf . starting_buffer_level = lc -> starting_buffer_level ; <S2SV_EndBug>
<S2SV_StartBug> status = ksz8851ReadReg ( interface , KSZ8851_REG_ISR ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_ISR , ISR_LCIS ) ; <S2SV_EndBug> <S2SV_StartBug> status = ksz8851ReadReg ( interface , KSZ8851_REG_P1SR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & P1SR_OPERATION_DUPLEX ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ISR_RXIS ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_ISR , ISR_RXIS ) ; <S2SV_EndBug> <S2SV_StartBug> frameCount = MSB ( ksz8851ReadReg ( interface , KSZ8851_REG_RXFCTR ) ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851SetBit ( interface , KSZ8851_REG_IER , IER_LCIE | IER_RXIE ) ; <S2SV_EndBug>
<S2SV_StartBug> convert_to_double_ex ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> convert_to_long_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_free_context_buffers ( cm ) ; <S2SV_EndBug>
<S2SV_StartBug> __mincore_unmapped_range ( addr , end , vma , vec ) ; <S2SV_EndBug> <S2SV_StartBug> __mincore_unmapped_range ( addr , addr + PAGE_SIZE , <S2SV_EndBug> <S2SV_StartBug> if ( non_swap_entry ( entry ) ) { <S2SV_EndBug>
<S2SV_StartBug> buffer = zend_string_alloc ( len , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) <S2SV_EndBug>
<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & value -> tv_nsec ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = convert_ctx_accesses ( env ) ; <S2SV_EndBug>
<S2SV_StartBug> # if CONFIG_MEM_MANAGER <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug>
<S2SV_StartBug> if ( errcode != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( CheckMemoryOverflow ( ( image -> columns + 7UL ) >> 3UL , image -> rows ) != MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( r = sshbuf_get_u32 ( b , & comp -> type ) ) != 0 || <S2SV_EndBug>
<S2SV_StartBug> if ( clone_info ) <S2SV_EndBug> <S2SV_StartBug> DeleteImageFromList ( & tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> int open_mode = opendata -> o_arg . open_flags & ( FMODE_READ | FMODE_WRITE | O_EXCL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( can_open_cached ( state , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( can_open_cached ( state , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> update_open_stateflags ( state , open_mode ) ; <S2SV_EndBug> <S2SV_StartBug> ! can_open_delegated ( delegation , open_mode ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( update_open_stateid ( state , NULL , & stateid , open_mode ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( vma ) { <S2SV_EndBug>
<S2SV_StartBug> bitmap -> compressed = FALSE ; <S2SV_EndBug> <S2SV_StartBug> bitmap -> length = DstWidth * DstHeight * GetBytesPerPixel ( bitmap -> format ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int active_best_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = rc -> best_quality ; <S2SV_EndBug> <S2SV_StartBug> double last_boosted_q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> last_boosted_q * 0.75 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cm -> current_video_frame > 0 ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( rc -> avg_frame_qindex [ KEY_FRAME ] , <S2SV_EndBug> <S2SV_StartBug> rc -> kf_boost , <S2SV_EndBug> <S2SV_StartBug> q_val = vp9_convert_qindex_to_q ( active_best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> q_val * q_adj_factor ) ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( q < cpi -> cq_target_quality ) <S2SV_EndBug> <S2SV_StartBug> } else if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> active_best_quality = cpi -> cq_target_quality ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( oxcf -> end_usage == USAGE_CONSTRAINED_QUALITY ) && <S2SV_EndBug> <S2SV_StartBug> ( active_best_quality < cpi -> cq_target_quality ) ) { <S2SV_EndBug> <S2SV_StartBug> # if LIMIT_QRANGE_FOR_ALTREF_AND_KEY <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME && ! rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = ( active_worst_quality + active_best_quality * 3 ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTIPLE_ARF <S2SV_EndBug>
<S2SV_StartBug> for ( j = 1 ; j <= len ; j ++ ) { <S2SV_EndBug>
<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( "parse_wbxml_tag<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n" , * level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( id ) ; <S2SV_EndBug> <S2SV_StartBug> PyDict_DelItemString ( value , "$id" ) ; <S2SV_EndBug>
<S2SV_StartBug> case BGP_CAPCODE_RESTART : <S2SV_EndBug>
<S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> } else if ( group == 21 ) { <S2SV_EndBug>
<S2SV_StartBug> static void extend_to_full_distribution ( vp9_prob * probs , vp9_prob p ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( probs , vp9_pareto8_full [ p = 0 ? 0 : p - 1 ] , <S2SV_EndBug> <S2SV_StartBug> MODEL_NODES * sizeof ( vp9_prob ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return ( ( png_charp ) PNG_STRING_NEWLINE "libpng<S2SV_blank>version<S2SV_blank>1.2.52<S2SV_blank>-<S2SV_blank>November<S2SV_blank>20,<S2SV_blank>2014" PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1998-2014<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson" PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger" PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc." PNG_STRING_NEWLINE ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( png_charp ) "libpng<S2SV_blank>version<S2SV_blank>1.2.52<S2SV_blank>-<S2SV_blank>November<S2SV_blank>20,<S2SV_blank>2014\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1998-2014<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc." ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cf_auth_type <= AUTH_TRUST ) { <S2SV_EndBug>
<S2SV_StartBug> rc = cmd_start ( adata , cmdstr , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( rc == IMAP_RES_CONTINUE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mainprog_ptr -> width > INT_MAX / mainprog_ptr -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( mainprog_ptr -> rgba_data = malloc ( rowbytes * mainprog_ptr -> height ) ) == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> ar2 -> intf [ 0 ] = interface ; <S2SV_EndBug> <S2SV_StartBug> r = usb_driver_claim_interface ( & ati_remote2_driver , ar2 -> intf [ 1 ] , ar2 ) ; <S2SV_EndBug> <S2SV_StartBug> ar2 -> ep [ 1 ] = & alt -> endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> <S2SV_StartBug> fail3 : <S2SV_EndBug> <S2SV_StartBug> ati_remote2_urb_cleanup ( ar2 ) ; <S2SV_EndBug>
<S2SV_StartBug> pv_buf = ps_dec -> pf_aligned_alloc ( pv_mem_ctxt , 128 , size ) ; <S2SV_EndBug>
<S2SV_StartBug> same_page : <S2SV_EndBug>
<S2SV_StartBug> u8 odata [ 16 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( status ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) { <S2SV_EndBug> <S2SV_StartBug> urb -> actual_length - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * * pce ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> again : <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_first ( ext4_mb_cache , inode -> i_sb -> s_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( ce ) ) { <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_next ( ce , inode -> i_sb -> s_bdev , hash ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( vm_flags & VM_NORESERVE ) <S2SV_EndBug> <S2SV_StartBug> if ( hugetlb_get_quota ( inode -> i_mapping , chg ) ) <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , chg ) ; <S2SV_EndBug>
<S2SV_StartBug> lua_pushvalue ( L , i ) ; <S2SV_EndBug>
<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug>
<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , ".txt" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_hashed ( sk ) ) { <S2SV_EndBug> <S2SV_StartBug> write_lock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> msc -> ntouches = 0 ; <S2SV_EndBug> <S2SV_StartBug> npoints = ( size - 6 ) / 8 ; <S2SV_EndBug>
<S2SV_StartBug> int hdrlen ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen < 3 ) { <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 10 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<<S2SV_blank>" ) ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( ( fc >> 14 ) & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> case 0x00 : <S2SV_EndBug> <S2SV_StartBug> case 0x01 : <S2SV_EndBug> <S2SV_StartBug> case 0x02 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case 0x03 : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fc & ( 1 << 6 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> caplen -= hdrlen ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct pmu * leader_pmu = event -> group_leader -> pmu ; <S2SV_EndBug>
<S2SV_StartBug> id = ipc_addid ( & msg_ids ( ns ) , & msq -> q_perm , ns -> msg_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> msq -> q_stime = msq -> q_rtime = 0 ; <S2SV_EndBug>
<S2SV_StartBug> VipsForeignLoadClass * class = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; <S2SV_EndBug> <S2SV_StartBug> vips_image_pio_input ( load -> real ) ) <S2SV_EndBug> <S2SV_StartBug> return ( NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( x -> above_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> above_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( x -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strcmp ( arg , TKTPOLICY_ARG ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug>
<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug>
<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( image -> columns , 4 * <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( & sas , optval , len ) ) <S2SV_EndBug> <S2SV_StartBug> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug>
<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( exit_intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR && <S2SV_EndBug>
<S2SV_StartBug> vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> return vp9_read_bit ( r ) ? ( vp9_read_bit ( r ) ? REFERENCE_MODE_SELECT <S2SV_EndBug>
<S2SV_StartBug> return vp9_filteredinterp_filters1000 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters875 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters750 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters625 ; <S2SV_EndBug> <S2SV_StartBug> return vp9_filteredinterp_filters500 ; <S2SV_EndBug>
<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( * p == FAC_NATIONAL_RAND ) <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> dest_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_call , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_addr , p + 3 , ROSE_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( * p == FAC_NATIONAL_DIGIS ) { <S2SV_EndBug>
<S2SV_StartBug> static void update_coef_probs_common ( vp9_writer * const bc , VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> vp9_coeff_stats * frame_branch_ct ) { <S2SV_EndBug> <S2SV_StartBug> cpi -> common . fc . coef_probs [ tx_size ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob oldp = old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> const vp9_prob upd = DIFF_UPDATE_PROB ; <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , u , upd ) ; <S2SV_EndBug> <S2SV_StartBug> case ONE_LOOP : <S2SV_EndBug> <S2SV_StartBug> const int prev_coef_contexts_to_update = <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = new_frame_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; <S2SV_EndBug> <S2SV_StartBug> if ( l >= prev_coef_contexts_to_update || <S2SV_EndBug> <S2SV_StartBug> if ( t == PIVOT_NODE ) <S2SV_EndBug> <S2SV_StartBug> old_frame_coef_probs [ i ] [ j ] [ k ] [ l ] , & newp , upd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( s > 0 && newp != * oldp ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , 0 , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( bc , u , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( bc , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! retval ) { <S2SV_EndBug>
<S2SV_StartBug> void vp9_fht16x16_sse2 ( const int16_t * input , int16_t * output , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct16x16_sse2 ( input , output , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( avctx -> codec_id == AV_CODEC_ID_MPEG4 && avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) <S2SV_EndBug>
<S2SV_StartBug> int c_sz ; <S2SV_EndBug>
<S2SV_StartBug> rc = expandRegular ( fi , fn , psm , nodigest , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pos > ss * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , ss * sst -> sst_len ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct fb_vblank vblank ; <S2SV_EndBug>
<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> ext4_free_io_end ( io ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug>
<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> BOOL ret = FALSE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> data = NULL ; <S2SV_EndBug> <S2SV_StartBug> ret = TRUE ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> in_uint16_le ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint8 ( s , type ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cpi -> common . frame_type == KEY_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> cpi -> rc . key_frame_rate_correction_factor = factor ; <S2SV_EndBug> <S2SV_StartBug> ! cpi -> rc . is_src_frame_alt_ref && <S2SV_EndBug> <S2SV_StartBug> ! ( cpi -> use_svc && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) ) <S2SV_EndBug> <S2SV_StartBug> cpi -> rc . rate_correction_factor = factor ; <S2SV_EndBug>
<S2SV_StartBug> mutex_init ( & tu -> tread_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ 32 ] ; <S2SV_EndBug> <S2SV_StartBug> char buf [ 100 ] ; <S2SV_EndBug>
<S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug> <S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug>
<S2SV_StartBug> "The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request:<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> n = s -> method -> ssl_get_message ( s , <S2SV_EndBug> <S2SV_StartBug> if ( ! ok ) return ( ( int ) n ) ; <S2SV_EndBug> <S2SV_StartBug> # ifndef OPENSSL_NO_PSK <S2SV_EndBug> <S2SV_StartBug> if ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kPSK ) <S2SV_EndBug>
<S2SV_StartBug> OPJ_UINT32 x , y ; <S2SV_EndBug> <S2SV_StartBug> x = y = 0U ; <S2SV_EndBug> <S2SV_StartBug> * pix = c1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return OPJ_TRUE ; <S2SV_EndBug>
<S2SV_StartBug> int fd = open ( optarg , O_WRONLY | O_APPEND | O_CREAT , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_proto_ver_print ( netdissect_options * ndo , const uint16_t * dat ) <S2SV_EndBug>
<S2SV_StartBug> kvmclock_reset ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vcpu -> arch . time_offset & <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_page = <S2SV_EndBug> <S2SV_StartBug> gfn_to_page ( vcpu -> kvm , data >> PAGE_SHIFT ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC ) && * rsize >= 90 && rdesc [ 83 ] == 0x26 && <S2SV_EndBug> <S2SV_StartBug> if ( ( drv_data -> quirks & LG_RDESC_REL_ABS ) && * rsize >= 50 && <S2SV_EndBug>
<S2SV_StartBug> static int enable ( void ) { <S2SV_EndBug> <S2SV_StartBug> LOG_INFO ( "%s" , __func__ ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! file || ( ! iov && iovcnt ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> return 1000000 - count ; <S2SV_EndBug>
<S2SV_StartBug> while ( * s && * s != '}' ) { <S2SV_EndBug> <S2SV_StartBug> if ( * s == '\\n' ) * s = '<S2SV_blank>' ; <S2SV_EndBug> <S2SV_StartBug> if ( ( * s == '<S2SV_blank>' || * s == '\\n' ) && ( s [ 1 ] == '<S2SV_blank>' || s [ 1 ] == '\\n' ) ) s ++ ; <S2SV_EndBug>
<S2SV_StartBug> int res , ret ; <S2SV_EndBug>
<S2SV_StartBug> static void iwl_sta_ucode_activate ( struct iwl_priv * priv , u8 sta_id ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int remaining = s -> icy_metaint - s -> icy_data_read ; <S2SV_EndBug>
<S2SV_StartBug> end = dup ; <S2SV_EndBug>
<S2SV_StartBug> netdev -> hw_features = NETIF_F_SG | NETIF_F_HW_VLAN_CTAG_RX ; <S2SV_EndBug>
<S2SV_StartBug> if ( split_flag ) { <S2SV_EndBug>
<S2SV_StartBug> if ( count < sizeof ( cmd ) ) { <S2SV_EndBug>
<S2SV_StartBug> sprintf ( descriptor -> msg , "\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug>
<S2SV_StartBug> mark_desktop_file_trusted ( job , <S2SV_EndBug>
<S2SV_StartBug> return 1000000 - count ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = sizeof ( * sipx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( gfs ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! addr || addr -> sa_family != AF_BLUETOOTH ) <S2SV_EndBug>
<S2SV_StartBug> down_write ( & card -> controls_rwsem ) ; <S2SV_EndBug>
<S2SV_StartBug> Browser_Window * window ; <S2SV_EndBug> <S2SV_StartBug> ECORE_GETOPT_VALUE_BOOL ( quitOption ) , <S2SV_EndBug> <S2SV_StartBug> if ( args < argc ) { <S2SV_EndBug>
<S2SV_StartBug> int nmi , int sample ) <S2SV_EndBug> <S2SV_StartBug> handle -> nmi = nmi ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> line = data + npy * wpl ; <S2SV_EndBug>
<S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( metrics . ascent - metrics . descent + <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug>
<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> event_data -> snk_config = <S2SV_EndBug>
<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> if ( * p == FAC_NATIONAL_RAND ) <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> source_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> dest_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_call , p + 2 , AX25_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & facilities -> fail_addr , p + 3 , ROSE_ADDR_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( * p == FAC_NATIONAL_DIGIS ) { <S2SV_EndBug>
<S2SV_StartBug> DevInfo . MaxRDMBufferSize = BUFFER_4K ; <S2SV_EndBug>
<S2SV_StartBug> if ( s -> s3 -> flags & TLS1_FLAGS_ENCRYPT_THEN_MAC ) { <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; <S2SV_EndBug>
<S2SV_StartBug> variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; <S2SV_EndBug> <S2SV_StartBug> var = sse - ( ( ( int64_t ) avg * avg ) / ( bw * bh ) ) ; <S2SV_EndBug> <S2SV_StartBug> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , <S2SV_EndBug> <S2SV_StartBug> vp9_64_zeros , 0 , & sse ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( image -> numcomps < 4 ) return ; <S2SV_EndBug>
<S2SV_StartBug> goto discard ; <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) length ; j += 8 ) <S2SV_EndBug> <S2SV_StartBug> "InsufficientImageDataInFile" , image -> filename ) ; <S2SV_EndBug>
<S2SV_StartBug> static PixelChannels * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( PixelChannels * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug>

<S2SV_StartBug> int * out_rate_sum , int64_t * out_dist_sum ) { <S2SV_EndBug> <S2SV_StartBug> int var = cpi -> fn_ptr [ bsize ] . vf ( p -> src . buf , p -> src . stride , <S2SV_EndBug> <S2SV_StartBug> vp9_model_rd_from_var_lapndz ( sse + var , 1 << num_pels_log2_lookup [ bsize ] , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( buf [ len - 1 ] == 0x20 ) len -- ; <S2SV_EndBug>
<S2SV_StartBug> * prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vma -> vm_file || ! vma -> vm_file -> f_mapping <S2SV_EndBug> <S2SV_StartBug> || ! vma -> vm_file -> f_mapping -> host ) { <S2SV_EndBug> <S2SV_StartBug> up_read ( & current -> mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> error = do_fallocate ( vma -> vm_file , <S2SV_EndBug> <S2SV_StartBug> offset , end - start ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( ch = getopt ( ac , av , "cDdksE:a:t:" ) ) != - 1 ) { <S2SV_EndBug> <S2SV_StartBug> k_flag ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ac == 0 && ! c_flag && ! s_flag ) { <S2SV_EndBug> <S2SV_StartBug> if ( pledge ( "stdio<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec" , NULL ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug>
<S2SV_StartBug> truncate_pagecache ( inode , ioffset ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_dio ; <S2SV_EndBug> <S2SV_StartBug> out_dio : <S2SV_EndBug>
<S2SV_StartBug> uint8_t buf [ 64 ] ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( sbi ) ; <S2SV_EndBug>
<S2SV_StartBug> return key ; <S2SV_EndBug>
<S2SV_StartBug> if ( NAPI_GRO_CB ( skb ) -> udp_mark || <S2SV_EndBug> <S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! bitstream_read_bit ( bc ) ) { <S2SV_EndBug>
<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int h = 0 ; <S2SV_EndBug> <S2SV_StartBug> const char * data = ( const char * ) k ; <S2SV_EndBug>
<S2SV_StartBug> uid_t uid = getuid ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chown ( "/tmp/" , uid , gid ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> exit_io_context ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( connect ( sock , ( const struct sockaddr * ) & addr , sizeof ( addr ) ) == - 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , & type , 1 , 0 ) != 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , & length , 2 , 0 ) != 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( send ( sock , packet , length , 0 ) != ( ssize_t ) length ) <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Rootname:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Commandfile<S2SV_blank>name:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) <S2SV_EndBug>
<S2SV_StartBug> gdImagePtr pim = 0 , tim = im ; <S2SV_EndBug> <S2SV_StartBug> pim = gdImageCreatePaletteFromTrueColor ( im , 1 , 256 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> rc = fsmVerify ( fpath , fi ) ; <S2SV_EndBug>
<S2SV_StartBug> n2l ( p , s -> session -> tlsext_tick_lifetime_hint ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , addr ) ; <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> error = 0 ; <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( q_user , sizeof ( q_user ) , idata -> conn -> account . user ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( q_pass , sizeof ( q_pass ) , idata -> conn -> account . pass ) ; <S2SV_EndBug>
<S2SV_StartBug> netdev_dbg ( vif -> dev , "Missing<S2SV_blank>extra<S2SV_blank>info\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> "Invalid<S2SV_blank>extra<S2SV_blank>type:<S2SV_blank>%d\\n" , extra . type ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug> <S2SV_StartBug> if ( bad_format ( im -> gdes [ i ] . format ) ) { <S2SV_EndBug> <S2SV_StartBug> rrd_set_error <S2SV_EndBug>
<S2SV_StartBug> umount_tree ( mnt , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> c -> sock = sock ; <S2SV_EndBug>
<S2SV_StartBug> MB_PREDICTION_MODE * pbest_mode ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE best_mode = - 1 , mode ; <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , 0 , 2 , TX_16X16 , mode , <S2SV_EndBug> <S2SV_StartBug> err = vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug>
<S2SV_StartBug> printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( isupper ( * s ) || isdigit ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( islower ( * s ) ) { <S2SV_EndBug>
<S2SV_StartBug> transhdrlen , mtu , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_set_scalemode ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> memcpy ( ie -> ie_buffer + le16_to_cpu ( ie -> ie_length ) , <S2SV_EndBug>
<S2SV_StartBug> if ( serial -> port [ 0 ] == usbcons_info . port ) { <S2SV_EndBug>
<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> zval * * tmp ; <S2SV_EndBug> <S2SV_StartBug> efree ( name ) ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug>
<S2SV_StartBug> char * decoded = url_decode ( url ) ; <S2SV_EndBug> <S2SV_StartBug> int has_nl = ! ! strchr ( decoded , '\\n' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( has_nl ) <S2SV_EndBug>
<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int64_t txfm_cache [ ] , <S2SV_EndBug> <S2SV_StartBug> int * rate2 , int64_t * distortion , <S2SV_EndBug> <S2SV_StartBug> int * skippable , <S2SV_EndBug> <S2SV_StartBug> int * rate_uv , int64_t * distortion_uv , <S2SV_EndBug> <S2SV_StartBug> int_mv single_newmv [ MAX_REF_FRAMES ] , <S2SV_EndBug> <S2SV_StartBug> const int64_t ref_best_rd ) { <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const int num_refs = is_comp_pred ? 2 : 1 ; <S2SV_EndBug> <S2SV_StartBug> int64_t this_rd = 0 ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint8_t , tmp_buf , MAX_MB_PLANE * 64 * 64 ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t rd , best_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> int rs = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ refs [ 0 ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ refs [ 1 ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> single_motion_search ( cpi , x , tile , bsize , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> * rate2 += rate_mv ; <S2SV_EndBug> <S2SV_StartBug> frame_mv [ refs [ 0 ] ] . as_int = <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < num_refs ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> * rate2 += cost_mv_ref ( cpi , this_mode , mbmi -> mode_context [ refs [ 0 ] ] ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = EIGHTTAP ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = EIGHTTAP ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> mbmi -> interp_filter = i ; <S2SV_EndBug> <S2SV_StartBug> rs = vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , rd + rs_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , rd ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_sum = 0 ; <S2SV_EndBug> <S2SV_StartBug> model_rd_for_sb ( cpi , bsize , x , xd , & rate_sum , & dist_sum ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ i ] = rd ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] = <S2SV_EndBug> <S2SV_StartBug> MIN ( cpi -> rd_filter_cache [ SWITCHABLE_FILTERS ] , rd + rs_rd ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mask_filter_rd = MAX ( cpi -> mask_filter_rd , rd ) ; <S2SV_EndBug> <S2SV_StartBug> * best_filter = mbmi -> interp_filter ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cm -> interp_filter : * best_filter ; <S2SV_EndBug> <S2SV_StartBug> rs = cm -> interp_filter == SWITCHABLE ? vp9_get_switchable_rate ( x ) : 0 ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictors_sb ( xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int tmp_rate ; <S2SV_EndBug> <S2SV_StartBug> * rate2 += vp9_get_switchable_rate ( x ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! is_comp_pred ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map ) { <S2SV_EndBug> <S2SV_StartBug> * distortion = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> allow_encode_breakout && x -> encode_breakout ) { <S2SV_EndBug> <S2SV_StartBug> * distortion_uv = ( sse_u + sse_v ) << 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> skip ) { <S2SV_EndBug> <S2SV_StartBug> return INT64_MAX ; <S2SV_EndBug>
<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> return ( tsfb -> numlvls > 0 ) ? jpc_tsfb_synthesize2 ( tsfb , <S2SV_EndBug>
<S2SV_StartBug> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y += ( ssize_t ) level ) <S2SV_EndBug>
<S2SV_StartBug> void vp9_entropy_mv_init ( ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ipv6_addr_type ( & lsa -> l2tp_addr ) & IPV6_ADDR_LINKLOCAL ) <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.cmd" , rootname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.png" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.ps" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.eps" , newroot ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.tex" , newroot ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sbinfo -> max_blocks >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> buf -> f_blocks = sbinfo -> max_blocks ; <S2SV_EndBug> <S2SV_StartBug> buf -> f_bavail = buf -> f_bfree = sbinfo -> free_blocks ; <S2SV_EndBug>
<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 4 ) <S2SV_EndBug> <S2SV_StartBug> { psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 16 ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = ( x >> 24 ) ; <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug>
<S2SV_StartBug> & r -> client_princ -> name , <S2SV_EndBug> <S2SV_StartBug> & r -> client_princ -> realm , <S2SV_EndBug>
<S2SV_StartBug> while ( bytes ) { <S2SV_EndBug>
<S2SV_StartBug> reordered [ len + 1 ] = Mymr_C_VIRAMA ; <S2SV_EndBug>
<S2SV_StartBug> struct gs_host_config hconf = { <S2SV_EndBug> <S2SV_StartBug> struct gs_device_config dconf ; <S2SV_EndBug> <S2SV_StartBug> & hconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( hconf ) , <S2SV_EndBug> <S2SV_StartBug> if ( rc < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> & dconf , <S2SV_EndBug> <S2SV_StartBug> sizeof ( dconf ) , <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev ) <S2SV_EndBug> <S2SV_StartBug> init_usb_anchor ( & dev -> rx_submitted ) ; <S2SV_EndBug> <S2SV_StartBug> dev -> canch [ i ] = gs_make_candev ( i , intf , & dconf ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> mlock_vma_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> if ( page == check_page ) <S2SV_EndBug> <S2SV_StartBug> ret = SWAP_MLOCK ; <S2SV_EndBug>
<S2SV_StartBug> run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( "/a%2fb" ) , CONST_STR_LEN ( "/a/b" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * ext , szName [ 1000 ] , szExt [ 20 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szName , url ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ext && strlen ( ext ) > 1 ) { <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> l2tp_msgtype_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint16_t * ptr = ( const uint16_t * ) dat ; <S2SV_EndBug>
<S2SV_StartBug> while ( isspace ( * p ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ext4_test_inode_state ( inode , EXT4_STATE_ORDERED_MODE ) ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static struct ip_options * tcp_v4_save_options ( struct sock * sk , <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = & ( IPCB ( skb ) -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> struct ip_options * dopt = NULL ; <S2SV_EndBug> <S2SV_StartBug> int opt_size = optlength ( opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ip_options_echo ( dopt , skb ) ) { <S2SV_EndBug>
<S2SV_StartBug> env -> used_maps [ env -> used_map_cnt ++ ] = map ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( map , false ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned fat_length ; <S2SV_EndBug> <S2SV_StartBug> fs -> fat_start = ( off_t ) le16toh ( b . reserved ) * logical_sector_size ; <S2SV_EndBug> <S2SV_StartBug> data_size = ( off_t ) total_sectors * logical_sector_size - fs -> data_start ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! rta ) <S2SV_EndBug> <S2SV_StartBug> p = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pp = kmemdup ( up , xfrm_replay_state_esn_len ( up ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> * replay_esn = p ; <S2SV_EndBug>
<S2SV_StartBug> u64 nsec = ( u64 ) jiffies * TICK_NSEC ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & tv_usec ) ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_usec = tv_usec ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 1 ; i <= SYSTEM_ID_LEN ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> opt = sk_inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( opt == NULL || opt -> cipso == 0 ) <S2SV_EndBug> <S2SV_StartBug> hdr_delta = cipso_v4_delopt ( & sk_inet -> opt ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( p -> question -> n_keys != 1 ) <S2SV_EndBug>
<S2SV_StartBug> if ( tu -> timeri ) <S2SV_EndBug> <S2SV_StartBug> snd_timer_close ( tu -> timeri ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( si -> h | si -> w ) ) <S2SV_EndBug> <S2SV_StartBug> res = VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> int xmkstemp ( char * * tmpname , char * dir ) <S2SV_EndBug> <S2SV_StartBug> char * tmpenv ; <S2SV_EndBug> <S2SV_StartBug> if ( dir != NULL ) <S2SV_EndBug> <S2SV_StartBug> tmpenv = dir ; <S2SV_EndBug> <S2SV_StartBug> if ( tmpenv ) <S2SV_EndBug> <S2SV_StartBug> program_invocation_short_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( left > 0 && n > left ) <S2SV_EndBug>
<S2SV_StartBug> struct usmStateReference * retval = ( struct usmStateReference * ) <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug>
<S2SV_StartBug> return v % 2 ? m - ( v + 1 ) / 2 : m + v / 2 ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> decorator_list , expr_ty returns , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> v . FunctionDef . returns = returns ; <S2SV_EndBug>
<S2SV_StartBug> struct request * rq = tags -> rqs [ tag ] ; <S2SV_EndBug> <S2SV_StartBug> struct blk_flush_queue * fq = blk_get_flush_queue ( rq -> q , rq -> mq_ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_reader * r , <S2SV_EndBug> <S2SV_StartBug> FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> ref_frame [ 0 ] = ( MV_REFERENCE_FRAME ) vp9_get_segdata ( & cm -> seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> const int bit = vp9_read ( r , fc -> comp_ref_prob [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> const int bit0 = vp9_read ( r , fc -> single_ref_prob [ ctx0 ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug> <S2SV_StartBug> const int bit1 = vp9_read ( r , fc -> single_ref_prob [ ctx1 ] [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( error_code >> 16 ) != 0x8009 ) <S2SV_EndBug> <S2SV_StartBug> return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; <S2SV_EndBug>
<S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug> <S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug>
<S2SV_StartBug> if ( namelen > 32 ) <S2SV_EndBug>
<S2SV_StartBug> if ( bytecnt ) { <S2SV_EndBug> <S2SV_StartBug> bytecnt -- ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( isupper ( * s ) || isdigit ( * s ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( islower ( * s ) ) { <S2SV_EndBug>
<S2SV_StartBug> uint16 nstrips = 0 , ntiles = 0 , planar = 0 ; <S2SV_EndBug> <S2SV_StartBug> read_buff = ( unsigned char * ) _TIFFmalloc ( buffsize + 3 ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> if ( using_compacted_format ( ) ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> err = __copy_from_user ( & fpu -> state . xsave , buf_fx , state_size ) ; <S2SV_EndBug>
<S2SV_StartBug> qemu_vfree ( r -> iov . iov_base ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR0 , hashTable [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR2 , hashTable [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ksz8851WriteReg ( interface , KSZ8851_REG_MAHTR3 , hashTable [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>MAHTR0<S2SV_blank>=<S2SV_blank>%04" PRIX16 "\\r\\n" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>MAHTR1<S2SV_blank>=<S2SV_blank>%04" PRIX16 "\\r\\n" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>MAHTR2<S2SV_blank>=<S2SV_blank>%04" PRIX16 "\\r\\n" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> TRACE_DEBUG ( "<S2SV_blank><S2SV_blank>MAHTR3<S2SV_blank>=<S2SV_blank>%04" PRIX16 "\\r\\n" , ksz8851ReadReg ( interface , KSZ8851_REG_MAHTR3 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( current_entry + n > ( int ) c -> entries ) { return error ( f , VORBIS_invalid_setup ) ; } <S2SV_EndBug> <S2SV_StartBug> c -> lookup_values = lookup1_values ( c -> entries , c -> dimensions ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < g -> values ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> m -> coupling_steps = get_bits ( f , 8 ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> sas_eh_defer_cmd ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) { <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vpx_ref_frame_t * const data = va_arg ( args , vpx_ref_frame_t * ) ; <S2SV_EndBug> <S2SV_StartBug> image2yuvconfig ( & frame -> img , & sd ) ; <S2SV_EndBug> <S2SV_StartBug> return vp9_set_reference_dec ( & ctx -> pbi -> common , <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT32 ( irp -> input , Length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( printer_dev -> printer ) <S2SV_EndBug> <S2SV_StartBug> error = printjob -> Write ( printjob , Stream_Pointer ( irp -> input ) , Length ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) * sig_len < wc_SignatureGetSize ( sig_type , key , key_len ) ) { <S2SV_EndBug> <S2SV_StartBug> } while ( ret == WC_PENDING_E ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> struct frag_hdr fhdr ; <S2SV_EndBug> <S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> key_user_put ( key -> user ) ; <S2SV_EndBug>
<S2SV_StartBug> handle = ion_handle_get_by_id ( client , data . handle . handle ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( handle ) ) <S2SV_EndBug> <S2SV_StartBug> ion_free ( client , handle ) ; <S2SV_EndBug>
<S2SV_StartBug> int rv ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( jas_stream_copy ( out , tmpstream , box -> len - JP2_BOX_HDRLEN ( false ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> mnt_flags |= MNT_NODEV ; <S2SV_EndBug>
<S2SV_StartBug> bond_dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( strstr ( url , "/" ) != url ) { <S2SV_EndBug>
<S2SV_StartBug> r = copy_from_user ( data , ( void __user * ) addr + offset , len ) ; <S2SV_EndBug>
<S2SV_StartBug> mutex_lock ( & owner -> perf_event_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> pr_err ( "Underflows<S2SV_blank>must<S2SV_blank>be<S2SV_blank>unconditional<S2SV_blank>and<S2SV_blank>" <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> bpm -> family = AF_BRIDGE ; <S2SV_EndBug>
<S2SV_StartBug> if ( new_inode && S_ISREG ( old_inode -> i_mode ) && new_inode -> i_size && <S2SV_EndBug>
<S2SV_StartBug> return result ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . mr_encoder_id ) <S2SV_EndBug> <S2SV_StartBug> = ( LOWER_RES_FRAME_INFO * ) cpi -> oxcf . mr_low_res_mode_info ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> ref_frame_flags & VP8_ALTR_FRAME ) <S2SV_EndBug> <S2SV_StartBug> cpi -> mr_low_res_mv_avail &= ( cpi -> current_ref_frames [ ALTREF_FRAME ] <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> current_layer == 0 ) <S2SV_EndBug> <S2SV_StartBug> scale_and_extend_source ( cpi -> un_scaled_source , cpi ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_write_yuv_frame ( cpi -> Source ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_set_quantizer ( cpi , Q ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cm -> lfc , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_encode_frame ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp -> mbmi . mode == ZEROMV ) <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTITHREAD <S2SV_EndBug> <S2SV_StartBug> sem_post ( & cpi -> h_event_start_lpf ) ; <S2SV_EndBug> <S2SV_StartBug> update_reference_frames ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug>
<S2SV_StartBug> ! strcmp ( & s -> name [ strlen ( s -> name ) - 5 ] , "plain" ) ) && s -> enabled ) <S2SV_EndBug>
<S2SV_StartBug> if ( ret < 0 ) <S2SV_EndBug>
<S2SV_StartBug> unsigned int i , j ; <S2SV_EndBug>
<S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_clear_pd ( oldsk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( new_inode && S_ISREG ( old_inode -> i_mode ) && new_inode -> i_size && <S2SV_EndBug>
<S2SV_StartBug> p = find_eoq ( cmd + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> int insn_idx , int prev_insn_idx ) <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug>
<S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> copy_file ( source_filename , dest_filename , DEFAULT_DUMP_DIR_MODE ) ; <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dump_fd_info ( dest_filename , source_filename , source_base_ofs ) ) <S2SV_EndBug> <S2SV_StartBug> IGNORE_RESULT ( chown ( dest_filename , dd -> dd_uid , dd -> dd_gid ) ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sidx = sizeof ( t_chunk_info ) * nc ; <S2SV_EndBug> <S2SV_StartBug> cidx = gdCalloc ( sidx , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( result == L2CAP_CONF_SUCCESS ) { <S2SV_EndBug> <S2SV_StartBug> if ( rfc . mode == L2CAP_MODE_BASIC ) { <S2SV_EndBug> <S2SV_StartBug> if ( mtu < pi -> omtu ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static int inv_map_table [ MAX_PROB - 1 ] = { <S2SV_EndBug> <S2SV_StartBug> 6 , 19 , 32 , 45 , 58 , 71 , 84 , 97 , 110 , 123 , 136 , 149 , 162 , 175 , 188 , <S2SV_EndBug> <S2SV_StartBug> return 1 + inv_recenter_nonneg ( v + 1 , m ) ; <S2SV_EndBug> <S2SV_StartBug> return MAX_PROB - inv_recenter_nonneg ( v + 1 , MAX_PROB - 1 - m ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( icsk -> icsk_af_ops -> conn_request ( sk , skb ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> ret = key_validate ( key ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( key -> type -> read ) { <S2SV_EndBug> <S2SV_StartBug> ret = key -> type -> read ( key , buffer , buflen ) ; <S2SV_EndBug>
<S2SV_StartBug> long timeo ; <S2SV_EndBug>
<S2SV_StartBug> int count , i ; <S2SV_EndBug>
<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_POSTPROC_VISUALIZER && CONFIG_POSTPROC <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> ar2 -> intf [ 0 ] = interface ; <S2SV_EndBug> <S2SV_StartBug> r = usb_driver_claim_interface ( & ati_remote2_driver , ar2 -> intf [ 1 ] , ar2 ) ; <S2SV_EndBug> <S2SV_StartBug> ar2 -> ep [ 1 ] = & alt -> endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail2 ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug> <S2SV_StartBug> fail3 : <S2SV_EndBug> <S2SV_StartBug> ati_remote2_urb_cleanup ( ar2 ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , service_name ; <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> struct usbdevfs_connectinfo ci = { <S2SV_EndBug> <S2SV_StartBug> . devnum = ps -> dev -> devnum , <S2SV_EndBug> <S2SV_StartBug> } ; <S2SV_EndBug>
<S2SV_StartBug> save_text_from_text_view ( g_tv_comment , FILENAME_COMMENT ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( url [ x ] = url [ y ] ) == '+' ) <S2SV_EndBug> <S2SV_StartBug> else if ( url [ x ] == '%' ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( url [ x + 1 ] && url [ x + 2 ] ) ) <S2SV_EndBug> <S2SV_StartBug> url [ x ] = x2c ( url + y + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> y += 2 ; <S2SV_EndBug>
<S2SV_StartBug> & r -> client_princ -> name , <S2SV_EndBug> <S2SV_StartBug> & r -> client_princ -> realm , <S2SV_EndBug>
<S2SV_StartBug> usb_kill_urb ( mixer -> urb ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> call = ast_for_call ( c , CHILD ( n , 3 ) , dummy ) ; <S2SV_EndBug>
<S2SV_StartBug> struct iovec iov ; <S2SV_EndBug> <S2SV_StartBug> if ( ret < local_nr_pages ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nr_pages ; j ++ ) { <S2SV_EndBug>
<S2SV_StartBug> while ( ret < nr ) { <S2SV_EndBug>
<S2SV_StartBug> strcpy ( algo -> alg_name , auth -> alg_name ) ; <S2SV_EndBug>
<S2SV_StartBug> BT_HDR * p_buf = GKI_getbuf ( ( UINT16 ) ( len + BTA_HH_MIN_OFFSET + sizeof ( BT_HDR ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_EndBug>
<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug>
<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( poll ( & pfd , 1 , 0 ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( fd = accept ( sfd , ( struct sockaddr * ) & remote , & len ) ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> if ( code == 0 || code == KRB5_PREAUTH_FAILED ) { <S2SV_EndBug>
<S2SV_StartBug> char * driver_override , * old = pdev -> driver_override , * cp ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( driver_override ) ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( old ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! is_guest_mode ( vcpu ) ) { <S2SV_EndBug>
<S2SV_StartBug> int res , bytes , i , indexes , index_bytes , ids ; <S2SV_EndBug> <S2SV_StartBug> if ( flag ) { <S2SV_EndBug> <S2SV_StartBug> return id_table . xattr_ids ; <S2SV_EndBug> <S2SV_StartBug> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) , <S2SV_EndBug> <S2SV_StartBug> bytes = SQUASHFS_XATTR_BYTES ( ids ) ; <S2SV_EndBug> <S2SV_StartBug> ( i * SQUASHFS_METADATA_SIZE ) ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( skb = skb_dequeue ( & loopback_queue ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> dest = ( rose_address * ) ( skb -> data + 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * p != IAC ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( tp -> fw_ver , & vpd_data [ j ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( tp -> fw_ver , "<S2SV_blank>bc<S2SV_blank>" , vpdlen - len - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug>
<S2SV_StartBug> static struct btrfs_dir_item * btrfs_match_dir_item_name ( struct btrfs_root * root , <S2SV_EndBug>
<S2SV_StartBug> static void ip6_append_data_mtu ( int * mtu , <S2SV_EndBug> <S2SV_StartBug> struct rt6_info * rt ) <S2SV_EndBug> <S2SV_StartBug> * mtu = dst_mtu ( rt -> dst . path ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( perf_event_overflow ( event , 1 , & data , regs ) ) { <S2SV_EndBug>
<S2SV_StartBug> bitlen = slen * 4 ; <S2SV_EndBug>
<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug>

<S2SV_StartBug> static int udp_push_pending_frames ( struct sock * sk ) <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( "none" , path , "tmpfs" , 0 , "size=100000,mode=755" ) ) { <S2SV_EndBug>
<S2SV_StartBug> # line 495 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 860 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 557 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 854 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 606 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 707 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 784 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 698 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 818 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 677 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 860 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 642 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 916 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 609 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 970 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 599 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1068 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 584 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1142 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 557 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1196 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 550 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1211 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 543 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1221 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 520 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1267 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 499 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1311 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 862 "ext/standard/var_unserializer.re" <S2SV_EndBug>
<S2SV_StartBug> put_io_context ( p -> io_context ) ; <S2SV_EndBug>
<S2SV_StartBug> void kvm_lapic_set_vapic_addr ( struct kvm_vcpu * vcpu , gpa_t vapic_addr ) <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . apic -> vapic_addr = vapic_addr ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> touch_file ( t -> stamp_path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> skb -> sk = sk ; <S2SV_EndBug>
<S2SV_StartBug> return res ; <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( cm -> above_context , 0 , <S2SV_EndBug>
<S2SV_StartBug> if ( tpgt > TL_TPGS_PER_HBA ) { <S2SV_EndBug>
<S2SV_StartBug> int insn_idx , int prev_insn_idx ) <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( ybf -> y_buffer - 1 - ybf -> y_stride , 127 , ybf -> y_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> u_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> v_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug>
<S2SV_StartBug> SAS_DPRINTK ( "DONE<S2SV_blank>DISCOVERY<S2SV_blank>on<S2SV_blank>port<S2SV_blank>%d,<S2SV_blank>pid:%d,<S2SV_blank>result:%d\\n" , port -> id , <S2SV_EndBug>
<S2SV_StartBug> if ( key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof ( EAPOL_RSN_KEY ) ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug>
<S2SV_StartBug> av_bprint_get_buffer ( bp , 1 , & buf , & buf_size ) ; <S2SV_EndBug> <S2SV_StartBug> zstream . avail_out = buf_size ; <S2SV_EndBug>
<S2SV_StartBug> pid_t my_pid = getpid ( ) ; <S2SV_EndBug>
<S2SV_StartBug> FILE * file ; <S2SV_EndBug> <S2SV_StartBug> file = fopen ( stats_file , "w" ) ; <S2SV_EndBug> <S2SV_StartBug> for ( e = LIST_HEAD ( l ) ; e ; ELEMENT_NEXT ( e ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( vdaux < 1 || ( char * ) UINTPTR_MAX - vstart < vdaux ) { <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( pptr [ 0 ] , BGP_VPN_RD_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> pptr += BGP_VPN_RD_LEN ; <S2SV_EndBug>
<S2SV_StartBug> prefix = report [ i ] ; <S2SV_EndBug> <S2SV_StartBug> case 3 : <S2SV_EndBug>
<S2SV_StartBug> const char * bufptr ; <S2SV_EndBug>
<S2SV_StartBug> if ( ALWAYS ( p -> pEList ) ) { <S2SV_EndBug>
<S2SV_StartBug> ssize_t ret = write ( fd , ev , sizeof ( * ev ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! LookupString ( symInterpretMatchMaskNames , pred_txt , pred_rtrn ) ) { <S2SV_EndBug>
<S2SV_StartBug> keylen = utf8s_to_utf16s ( key_name , strlen ( key_name ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . key ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen = utf8s_to_utf16s ( value , strlen ( value ) , <S2SV_EndBug> <S2SV_StartBug> ( wchar_t * ) kvp_data -> data . value ) ; <S2SV_EndBug>
<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> snd_usbmidi_free ( umidi ) ; <S2SV_EndBug>
<S2SV_StartBug> struct bpf_insn_aux_data * new_data , * old_data = env -> insn_aux_data ; <S2SV_EndBug> <S2SV_StartBug> env -> insn_aux_data = new_data ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( path ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> return try_then_request_module ( __crypto_lookup_template ( name ) , "%s" , <S2SV_EndBug>
<S2SV_StartBug> SET_NETDEV_DEV ( dev , dmdev ) ; <S2SV_EndBug>
<S2SV_StartBug> int var_index ; <S2SV_EndBug> <S2SV_StartBug> # line 2619 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 63 : <S2SV_EndBug> <S2SV_StartBug> # line 2658 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 64 : <S2SV_EndBug> <S2SV_StartBug> # line 2741 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 65 : <S2SV_EndBug> <S2SV_StartBug> # line 2775 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 66 : <S2SV_EndBug> <S2SV_StartBug> # line 2828 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1248 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> yr_parser_emit ( yyscanner , OP_NOT , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> # line 2848 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1254 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 2878 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 70 : <S2SV_EndBug> <S2SV_StartBug> # line 2918 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 71 : <S2SV_EndBug> <S2SV_StartBug> # line 2947 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 72 : <S2SV_EndBug> <S2SV_StartBug> # line 2987 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 73 : <S2SV_EndBug> <S2SV_StartBug> # line 3000 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 74 : <S2SV_EndBug> <S2SV_StartBug> # line 3013 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 75 : <S2SV_EndBug> <S2SV_StartBug> # line 3026 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 76 : <S2SV_EndBug> <S2SV_StartBug> # line 3039 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 77 : <S2SV_EndBug> <S2SV_StartBug> # line 3052 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 78 : <S2SV_EndBug> <S2SV_StartBug> # line 3065 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1435 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 3081 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1443 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> { ( yyval . integer ) = INTEGER_SET_RANGE ; } <S2SV_EndBug> <S2SV_StartBug> # line 1449 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 3115 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 84 : <S2SV_EndBug> <S2SV_StartBug> # line 3131 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 85 : <S2SV_EndBug> <S2SV_StartBug> # line 3146 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 88 : <S2SV_EndBug> <S2SV_StartBug> # line 3166 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 91 : <S2SV_EndBug> <S2SV_StartBug> # line 3177 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 92 : <S2SV_EndBug> <S2SV_StartBug> # line 3188 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1544 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> yr_parser_emit_with_arg ( yyscanner , OP_PUSH , 1 , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1552 "grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 3212 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 97 : <S2SV_EndBug> <S2SV_StartBug> # line 3226 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 98 : <S2SV_EndBug> <S2SV_StartBug> # line 3244 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 99 : <S2SV_EndBug> <S2SV_StartBug> # line 3264 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 100 : <S2SV_EndBug> <S2SV_StartBug> # line 3278 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 101 : <S2SV_EndBug> <S2SV_StartBug> # line 3291 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 102 : <S2SV_EndBug> <S2SV_StartBug> # line 3320 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 103 : <S2SV_EndBug> <S2SV_StartBug> # line 3336 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 104 : <S2SV_EndBug> <S2SV_StartBug> # line 3352 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 105 : <S2SV_EndBug> <S2SV_StartBug> # line 3372 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 106 : <S2SV_EndBug> <S2SV_StartBug> # line 3388 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 107 : <S2SV_EndBug> <S2SV_StartBug> # line 3408 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 108 : <S2SV_EndBug> <S2SV_StartBug> # line 3457 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 109 : <S2SV_EndBug> <S2SV_StartBug> # line 3480 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 110 : <S2SV_EndBug> <S2SV_StartBug> # line 3502 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 111 : <S2SV_EndBug> <S2SV_StartBug> # line 3524 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 112 : <S2SV_EndBug> <S2SV_StartBug> # line 3546 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 113 : <S2SV_EndBug> <S2SV_StartBug> # line 3576 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 114 : <S2SV_EndBug> <S2SV_StartBug> # line 3598 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 115 : <S2SV_EndBug> <S2SV_StartBug> # line 3612 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 116 : <S2SV_EndBug> <S2SV_StartBug> # line 3626 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 117 : <S2SV_EndBug> <S2SV_StartBug> # line 3640 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 118 : <S2SV_EndBug> <S2SV_StartBug> # line 3654 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 119 : <S2SV_EndBug> <S2SV_StartBug> # line 3668 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 120 : <S2SV_EndBug> <S2SV_StartBug> # line 3682 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> case 121 : <S2SV_EndBug> <S2SV_StartBug> # line 3690 "grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 3694 "grammar.c" <S2SV_EndBug>
<S2SV_StartBug> rpc_delay ( task , 3 * HZ ) ; <S2SV_EndBug>
<S2SV_StartBug> gboolean devel ; <S2SV_EndBug> <S2SV_StartBug> child_setup_data . instance_id_fd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> g_ptr_array_add ( flatpak_argv , g_strdup ( extra_args [ i ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> tty_encode_baud_rate ( tty , baud , baud ) ; <S2SV_EndBug>
<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev && capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> request_module ( "%s" , name ) ; <S2SV_EndBug>
<S2SV_StartBug> InitializeCriticalSection ( & finalizer_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> StringValue ( data ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & local_next_frame , next_frame , sizeof ( * next_frame ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! file || ( iovcnt && ! iov ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> VPX_MEMSET_L ( x , 0 , num * size ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug>
<S2SV_StartBug> char * authn_header = oidc_cfg_dir_authn_header ( r ) ; <S2SV_EndBug>
<S2SV_StartBug> int points ; <S2SV_EndBug>
<S2SV_StartBug> struct dlist * kl = sync_parseline ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> struct dlist * kl = sync_parseline ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcmp ( cmd . s , "Syncrestore" ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( & u_ent . id , & uent -> id , sizeof ( u_ent . id ) ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( keyring_key -> type != & key_type_logon ) { <S2SV_EndBug> <S2SV_StartBug> down_read ( & keyring_key -> sem ) ; <S2SV_EndBug> <S2SV_StartBug> ukp = user_key_payload ( keyring_key ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 495 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 860 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 557 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 854 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 606 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 707 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 784 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 698 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 818 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 677 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 860 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 642 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 916 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 609 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 970 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 599 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1068 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 584 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1142 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 557 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1196 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 550 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1211 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 543 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1221 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 520 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1267 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 499 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1311 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 862 "ext/standard/var_unserializer.re" <S2SV_EndBug>
<S2SV_StartBug> unsigned fat_length ; <S2SV_EndBug> <S2SV_StartBug> fs -> fat_start = ( off_t ) le16toh ( b . reserved ) * logical_sector_size ; <S2SV_EndBug> <S2SV_StartBug> data_size = ( off_t ) total_sectors * logical_sector_size - fs -> data_start ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug>
<S2SV_StartBug> while ( lp -> s != NULL ) { <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> return ep ; <S2SV_EndBug>
<S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INV_SPS_PPS_T ; <S2SV_EndBug>
<S2SV_StartBug> if ( ixheaacd_real_synth_fft != NULL ) <S2SV_EndBug> <S2SV_StartBug> ( * ixheaacd_real_synth_fft ) ( synth_buf_r , synth_out , synth_size * 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( kvm_apic_get_reg ( apic , APIC_TMICT ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( peekonly ) { <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( * msg ) - space_rem ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy_fromio ( buf , bus -> m_pdwGetRing + sizeof ( * msg ) - <S2SV_EndBug> <S2SV_StartBug> } else if ( space_rem == sizeof ( * msg ) ) { <S2SV_EndBug>
<S2SV_StartBug> stream -> bufbase_ = JAS_CAST ( uchar * , buf ) ; <S2SV_EndBug>
<S2SV_StartBug> pipe -> bufs = kzalloc ( sizeof ( struct pipe_buffer ) * PIPE_DEF_BUFFERS , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> pipe -> buffers = PIPE_DEF_BUFFERS ; <S2SV_EndBug> <S2SV_StartBug> kfree ( pipe ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( devinfo . driver_name , dev -> driver -> driver_name , COMEDI_NAMELEN ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( devinfo . board_name , dev -> board_name , COMEDI_NAMELEN ) ; <S2SV_EndBug>
<S2SV_StartBug> blk_cleanup_queue ( cd -> disk -> queue ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! memcmp ( buf + 5 , "include" , 7 ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ! memcmp ( buf + 5 , "exec" , 4 ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( <S2SV_EndBug>
<S2SV_StartBug> if ( klass && ! is_entity ) <S2SV_EndBug> <S2SV_StartBug> error = dwg_encode_UNKNOWN_OBJ ( dat , obj ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( klass ) <S2SV_EndBug>
<S2SV_StartBug> r_buf_set_bytes ( tbuf , buf , sz ) ; <S2SV_EndBug>
<S2SV_StartBug> guint32 off = offset ; <S2SV_EndBug> <S2SV_StartBug> DebugLog ( ( "parse_wbxml_attr<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n" , level , offset ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> u_char showspi , showdata , showsomedata ; <S2SV_EndBug> <S2SV_StartBug> showdata = 0 ; <S2SV_EndBug> <S2SV_StartBug> showsomedata = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( 3 < ndo -> ndo_vflag ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( showdata || ( showsomedata && ep - cp < 30 ) ) && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( showsomedata && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; <S2SV_EndBug>
<S2SV_StartBug> if ( gf -> file && gf -> file -> device ) <S2SV_EndBug> <S2SV_StartBug> free ( gf -> file -> device -> disk ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifndef OPENSSL_NO_COMP <S2SV_EndBug>
<S2SV_StartBug> unregister_savevm ( DEVICE ( s ) , "stellaris_enet" , s ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( nla_len ( rp ) < ulen || xfrm_replay_state_esn_len ( replay_esn ) != ulen ) <S2SV_EndBug>
<S2SV_StartBug> if ( packet -> size + length > MT_PACKET_LEN ) { <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> lc -> starting_buffer_level = oxcf -> starting_buffer_level ; <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = cpi -> output_framerate ; <S2SV_EndBug>
<S2SV_StartBug> struct br_mdb_entry entry ; <S2SV_EndBug>
<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug>
<S2SV_StartBug> if ( enable_ertm ) <S2SV_EndBug>
<S2SV_StartBug> if ( vp9_segfeature_active ( & cpi -> common . seg , 1 , SEG_LVL_REF_FRAME ) ) { <S2SV_EndBug>
<S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INAPPROPRIATE_AUTH , NULL , <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 2 ; <S2SV_EndBug>
<S2SV_StartBug> # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) <S2SV_EndBug> <S2SV_StartBug> "<S2SV_blank>HDRI" <S2SV_EndBug> <S2SV_StartBug> ; <S2SV_EndBug>
<S2SV_StartBug> if ( len == 1 ) <S2SV_EndBug> <S2SV_StartBug> return 8 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t dlen = read_u32 ( data , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dlen > 0 ) <S2SV_EndBug> <S2SV_StartBug> return 8 + dlen ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> case EGRESS_VLAN_NAME : <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; * data && i < length ; i ++ , data ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( s -> options & SSL_OP_EPHEMERAL_RSA ) <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> tmp . use_rsa_tmp = 1 ; <S2SV_EndBug>
<S2SV_StartBug> int tlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * vqp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> vqp_obj_type = EXTRACT_32BITS ( vqp_obj_tlv -> obj_type ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( vqp_obj_type ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>(0x%08x)" , ipaddr_string ( ndo , tptr ) , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VQP_OBJ_MAC_NULL : <S2SV_EndBug>
<S2SV_StartBug> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context , TPMI_ALG_HASH hashAlg , <S2SV_EndBug> <S2SV_StartBug> TPM2B_DIGEST tmpResult ; <S2SV_EndBug> <S2SV_StartBug> TPM_RC rval ; <S2SV_EndBug> <S2SV_StartBug> while ( resultKey -> t . size < bytes ) <S2SV_EndBug> <S2SV_StartBug> i_Swizzled = string_bytes_endian_convert_32 ( i ) ; <S2SV_EndBug> <S2SV_StartBug> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) 0 ; <S2SV_EndBug> <S2SV_StartBug> rval = tpm_hmac ( sapi_context , hashAlg , key , ( TPM2B * * ) & ( bufferList [ 0 ] ) , & tmpResult ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rval != TPM_RC_SUCCESS ) <S2SV_EndBug> <S2SV_StartBug> return TSS2_SYS_RC_BAD_VALUE ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( * ext ) ; <S2SV_EndBug>
<S2SV_StartBug> fid -> udf . generation = inode -> i_generation ; <S2SV_EndBug>
<S2SV_StartBug> BT_DBG ( "sock<S2SV_blank>%p,<S2SV_blank>sk<S2SV_blank>%p" , sock , sk ) ; <S2SV_EndBug>
<S2SV_StartBug> client -> auth_user = client -> db -> auth_user ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( 1 != ps_dec_state -> u2_decode_header ) && ( ( bytes_remaining > 0 ) || ps_dec_state -> u1_flushfrm ) ) <S2SV_EndBug>
<S2SV_StartBug> nfs4_close_state ( & data -> path , state , data -> o_arg . open_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> static void duplicate_mode_info_in_sb ( VP9_COMMON * const cm , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd , <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> list_del_rcu ( & ctx -> clist ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & cancel_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int xt_check_entry_offsets ( const void * base , <S2SV_EndBug> <S2SV_StartBug> const struct xt_entry_target * t ; <S2SV_EndBug> <S2SV_StartBug> const char * e = base ; <S2SV_EndBug>
<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> <S2SV_StartBug> * uaddrlen = sizeof ( sllc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( arg_seccomp_block_secondary ) <S2SV_EndBug>
<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> error = security_mmap_addr ( address ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "(alt-CoA:<S2SV_blank>%s)" , ip6addr_string ( ndo , & bp [ i + 2 ] ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> static u32 ip6_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_idents_hashrnd , daddr , saddr ) ; <S2SV_EndBug>
<S2SV_StartBug> rxent -> serviceId = EXTRACT_32BITS ( & rxh -> serviceId ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_model_to_full_probs ( const vp9_prob * model , vp9_prob * full ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( full , model , sizeof ( vp9_prob ) * UNCONSTRAINED_NODES ) ; <S2SV_EndBug>

<S2SV_StartBug> struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) & cb -> args [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! old || ( old -> c_lflag ^ tty -> termios . c_lflag ) & ICANON ) { <S2SV_EndBug>
<S2SV_StartBug> pipe_write ( struct kiocb * iocb , const struct iovec * _iov , <S2SV_EndBug> <S2SV_StartBug> ssize_t ret ; <S2SV_EndBug> <S2SV_StartBug> int do_wakeup ; <S2SV_EndBug> <S2SV_StartBug> size_t total_len ; <S2SV_EndBug> <S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic = 1 ; <S2SV_EndBug> <S2SV_StartBug> iov_fault_in_pages_read ( iov , chars ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> <S2SV_StartBug> char * src ; <S2SV_EndBug> <S2SV_StartBug> chars = PAGE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( error ) ) { <S2SV_EndBug> <S2SV_StartBug> ret += chars ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = chars ; <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug>
<S2SV_StartBug> u32 i , j , page_count = 0 , sg_per_table ; <S2SV_EndBug> <S2SV_StartBug> sg_table = rd_dev -> sg_table_array ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rd_dev -> sg_table_count ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( sg_table ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16 bitspersample , samplesperpixel = 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( pbi -> b_multithreaded_rd ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux__ <S2SV_EndBug> <S2SV_StartBug> sun . sun_path [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( address ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> snprintf ( rcipher . type , CRYPTO_MAX_ALG_NAME , "%s" , "cipher" ) ; <S2SV_EndBug>
<S2SV_StartBug> case DH6OPT_RECONF_MSG : <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> read_config_file ( ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( opt_len == 12 && flags & TH_SYN ) && <S2SV_EndBug>
<S2SV_StartBug> static void encode_unsigned_max ( struct vp9_write_bit_buffer * wb , <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , data , get_unsigned_bits ( max ) ) ; <S2SV_EndBug>
<S2SV_StartBug> hfs_bnode_read ( src_fd . bnode , & entry , src_fd . entryoffset , <S2SV_EndBug>
<S2SV_StartBug> if ( xmlPushInput ( ctxt , input ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> stlv_type = * ( tptr ++ ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - 2 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_MCID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> tptr = tptr + sizeof ( struct isis_subtlv_spb_mcid ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , stlv_len ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_BVID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int i , protocol ; <S2SV_EndBug> <S2SV_StartBug> switch ( protocol ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! h1 -> bInCollection ) { <S2SV_EndBug> <S2SV_StartBug> dev_info ( & dev -> dev , "skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ERR_PTR ( - ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> goto couldnt_alloc_key ; <S2SV_EndBug> <S2SV_StartBug> couldnt_alloc_key : <S2SV_EndBug> <S2SV_StartBug> key_put ( dest_keyring ) ; <S2SV_EndBug>
<S2SV_StartBug> int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = xd -> mi ; <S2SV_EndBug> <S2SV_StartBug> const int left_in_image = xd -> left_available && mi_8x8 [ - 1 ] ; <S2SV_EndBug> <S2SV_StartBug> mi_8x8 [ - xd -> mi_stride ] ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * above_sb64_mi_8x8 ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE max_size = BLOCK_64X64 ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * const prev_mi = <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , prev_mi , & min_size , & max_size ) ; <S2SV_EndBug> <S2SV_StartBug> left_sb64_mi_8x8 = & mi_8x8 [ - MI_BLOCK_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , left_sb64_mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> above_sb64_mi_8x8 = & mi_8x8 [ - xd -> mi_stride * MI_BLOCK_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> get_sb_partition_size_range ( cpi , above_sb64_mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> min_size = MIN ( min_size , max_size ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> while ( ret < nr ) { <S2SV_EndBug>
<S2SV_StartBug> nfs4_close_state ( & data -> path , state , data -> o_arg . open_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> "ExifMnoteCanon" , "Short<S2SV_blank>MakerNote" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . format = exif_get_short ( buf + o + 2 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . components = exif_get_long ( buf + o + 4 , n -> order ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < s ) || ( dataofs + s < dataofs ) || ( dataofs + s > buf_size ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( CPUCLOCK_WHICH ( which_clock ) == CPUCLOCK_SCHED ) { <S2SV_EndBug> <S2SV_StartBug> tp -> tv_sec = div_long_long_rem ( cpu . sched , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mnt_flags |= MNT_NODEV ; <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_diff_update_prob ( vp9_reader * r , vp9_prob * p ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_read ( r , DIFF_UPDATE_PROB ) ) { <S2SV_EndBug> <S2SV_StartBug> * p = ( vp9_prob ) inv_remap_prob ( delp , * p ) ; <S2SV_EndBug>
<S2SV_StartBug> struct nfs_open_context * nfs_find_open_context ( struct inode * inode , struct rpc_cred * cred , int mode ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! port -> interrupt_in_urb ) { <S2SV_EndBug>
<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t len , next_len ; <S2SV_EndBug> <S2SV_StartBug> next_len = MIN ( left , 100 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ; left > 0 ; left -= len , out_ptr += len ) { <S2SV_EndBug> <S2SV_StartBug> next_len = MIN ( left , apdu . sw2 ) ; <S2SV_EndBug>
<S2SV_StartBug> case FRAME_TYPE_JOIN_ACCEPT : <S2SV_EndBug> <S2SV_StartBug> if ( MAX ( 0 , ( int16_t ) ( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t ) phyParam . Value ) <S2SV_EndBug>
<S2SV_StartBug> lxc_attach_options_t * options = payload -> options ; <S2SV_EndBug> <S2SV_StartBug> if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) ) { <S2SV_EndBug> <S2SV_StartBug> int proc_mounted ; <S2SV_EndBug> <S2SV_StartBug> proc_mounted = mount_proc_if_needed ( "/" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = lsm_process_label_set ( init_ctx -> lsm_label , <S2SV_EndBug> <S2SV_StartBug> rexit ( payload -> exec_function ( payload -> exec_payload ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct fsnotify_group * group ; <S2SV_EndBug> <S2SV_StartBug> user = get_current_user ( ) ; <S2SV_EndBug> <S2SV_StartBug> group = inotify_new_group ( user , inotify_max_queued_events ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( group ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = PTR_ERR ( group ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) <S2SV_EndBug> <S2SV_StartBug> fsnotify_put_group ( group ) ; <S2SV_EndBug>
<S2SV_StartBug> i += 1 ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_use_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug> <S2SV_StartBug> for_each_possible_cpu ( i ) <S2SV_EndBug> <S2SV_StartBug> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_dentry_lru ) ) <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_inode_lru ) ) <S2SV_EndBug>
<S2SV_StartBug> struct page * pages [ NFS4ACL_MAXPAGES ] ; <S2SV_EndBug> <S2SV_StartBug> struct page * localpage = NULL ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > args . acl_len ) <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , NULL , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > buflen ) <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( buf , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> __free_page ( localpage ) ; <S2SV_EndBug>
<S2SV_StartBug> size += miux_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += rw_tlv_length ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> separator = * src ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR ) <S2SV_EndBug>
<S2SV_StartBug> if ( skb -> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug>
<S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < self -> mt_allocated ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> trace_kvm_emulate_insn_failed ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_queue_exception ( vcpu , UD_VECTOR ) ; <S2SV_EndBug> <S2SV_StartBug> return EMULATE_FAIL ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int doffset = head_skb -> data - skb_mac_header ( head_skb ) ; <S2SV_EndBug> <S2SV_StartBug> pos += skb_headlen ( list_skb ) ; <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! nfrags ) ; <S2SV_EndBug> <S2SV_StartBug> * nskb_frag = * frag ; <S2SV_EndBug>
<S2SV_StartBug> next_byte : <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( i4_continue_decode ) <S2SV_EndBug>
<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug>
<S2SV_StartBug> static void xen_netbk_idx_release ( struct xen_netbk * netbk , u16 pending_idx ) <S2SV_EndBug> <S2SV_StartBug> make_tx_response ( vif , & pending_tx_info -> req , XEN_NETIF_RSP_OKAY ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! cfg . shell ) <S2SV_EndBug> <S2SV_StartBug> arg [ 0 ] = cfg . shell ; <S2SV_EndBug>
<S2SV_StartBug> int64_t vp9_rd_pick_inter_mode_sb ( VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int * returnrate , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & x -> e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE this_mode ; <S2SV_EndBug> <S2SV_StartBug> int comp_pred , i ; <S2SV_EndBug> <S2SV_StartBug> int_mv single_newmv [ MAX_REF_FRAMES ] = { { 0 } } ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_tx_rd [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO best_mbmode = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int mode_index , best_mode_index = 0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob comp_mode_p ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_inter_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE best_intra_mode = DC_PRED ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE mode_uv [ TX_SIZES ] ; <S2SV_EndBug> <S2SV_StartBug> int64_t mode_distortions [ MB_MODE_COUNT ] = { - 1 } ; <S2SV_EndBug> <S2SV_StartBug> int intra_cost_penalty = 20 * vp9_dc_quant ( cm -> base_qindex , cm -> y_dc_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> int mode_skip_mask = 0 ; <S2SV_EndBug> <S2SV_StartBug> int mode_skip_start = cpi -> sf . mode_skip_start + 1 ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_threshes = cpi -> rd_threshes [ segment_id ] [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_thresh_freq_fact = cpi -> rd_thresh_freq_fact [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> const int mode_search_skip_flags = cpi -> sf . mode_search_skip_flags ; <S2SV_EndBug> <S2SV_StartBug> estimate_ref_frame_costs ( cpi , segment_id , ref_costs_single , ref_costs_comp , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_buffer_inter ( cpi , x , tile , <S2SV_EndBug> <S2SV_StartBug> static const int ref_frame_mask_all [ ] = { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_all [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> } else if ( cpi -> sf . reference_masking ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_fixedmv [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && <S2SV_EndBug> <S2SV_StartBug> vp9_get_segdata ( seg , segment_id , SEG_LVL_REF_FRAME ) != ( int ) ref_frame ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ref_frame_mask_all [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) { <S2SV_EndBug> <S2SV_StartBug> const int altref_zero_mask = <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ( 1 << THR_NEARA ) ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ( 1 << THR_NEARESTA ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize > cpi -> sf . max_intra_bsize ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= 0xFF30808 ; <S2SV_EndBug> <S2SV_StartBug> int mode_index ; <S2SV_EndBug> <S2SV_StartBug> int64_t tx_cache [ TX_MODES ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mode_index == mode_skip_start ) { <S2SV_EndBug> <S2SV_StartBug> switch ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] ) { <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= LAST_FRAME_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= GOLDEN_FRAME_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> mode_skip_mask |= ALT_REF_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mode_skip_mask & ( 1 << mode_index ) ) <S2SV_EndBug> <S2SV_StartBug> if ( best_rd < ( ( int64_t ) rd_threshes [ mode_index ] * <S2SV_EndBug> <S2SV_StartBug> this_mode = vp9_mode_order [ mode_index ] . mode ; <S2SV_EndBug> <S2SV_StartBug> if ( ( mode_search_skip_flags & FLAG_SKIP_COMP_BESTINTRA ) && <S2SV_EndBug> <S2SV_StartBug> vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( intra_y_mode_mask & ( 1 << this_mode ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] > INTRA_FRAME ) <S2SV_EndBug> <S2SV_StartBug> if ( x -> in_active_map && <S2SV_EndBug> <S2SV_StartBug> if ( ! check_best_zero_mv ( cpi , mbmi -> mode_context , frame_mv , <S2SV_EndBug> <S2SV_StartBug> x -> skip = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> intra_super_block_yrd ( cpi , x , & rate_y , & distortion_y , & skippable , NULL , <S2SV_EndBug> <S2SV_StartBug> bsize , tx_cache , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> uv_tx = get_uv_tx_size_impl ( mbmi -> tx_size , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> choose_intra_uv_mode ( cpi , ctx , bsize , uv_tx , <S2SV_EndBug> <S2SV_StartBug> rate2 = rate_y + x -> mbmode_cost [ mbmi -> mode ] + rate_uv_intra [ uv_tx ] ; <S2SV_EndBug> <S2SV_StartBug> this_rd = handle_inter_mode ( cpi , x , tile , bsize , <S2SV_EndBug> <S2SV_StartBug> & rate_y , & distortion_y , <S2SV_EndBug> <S2SV_StartBug> & tmp_best_filter , frame_mv , <S2SV_EndBug> <S2SV_StartBug> single_newmv , & total_sse , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> const int mb_skip_allowed = ! vp9_segfeature_active ( seg , segment_id , <S2SV_EndBug> <S2SV_StartBug> rate_uv = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed && ref_frame != INTRA_FRAME && ! xd -> lossless ) { <S2SV_EndBug> <S2SV_StartBug> rate_y = 0 ; <S2SV_EndBug> <S2SV_StartBug> } else if ( mb_skip_allowed ) { <S2SV_EndBug> <S2SV_StartBug> if ( ref_frame == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> best_filter_rd [ i ] = MIN ( best_filter_rd [ i ] , this_rd ) ; <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate2 ; <S2SV_EndBug> <S2SV_StartBug> * returndistortion = distortion2 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> select_txfm_size ) <S2SV_EndBug> <S2SV_StartBug> swap_block_ptr ( x , ctx , max_plane ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ctx -> zcoeff_blk , x -> zcoeff_blk [ mbmi -> tx_size ] , <S2SV_EndBug> <S2SV_StartBug> sizeof ( uint8_t ) * ctx -> num_4x4_blk ) ; <S2SV_EndBug> <S2SV_StartBug> const int qstep = xd -> plane [ 0 ] . dequant [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int scale = 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( single_rd < best_pred_rd [ SINGLE_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( single_rd < best_pred_rd [ COMPOUND_REFERENCE ] ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int64_t ref = cpi -> rd_filter_cache [ cm -> interp_filter == SWITCHABLE ? <S2SV_EndBug> <S2SV_StartBug> else if ( cpi -> rd_filter_cache [ i ] == INT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> mask_filter_rd - ref + 10 ; <S2SV_EndBug> <S2SV_StartBug> adj_rd = cpi -> rd_filter_cache [ i ] - ref ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( best_rd >= best_rd_so_far ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_mode_order [ best_mode_index ] . ref_frame [ 0 ] == INTRA_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> uv_tx_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . adaptive_rd_thresh ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < TX_MODES ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> g_object_unref ( subdir ) ; <S2SV_EndBug> <S2SV_StartBug> dir = GSF_INFILE_TAR ( subdir ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , attr_id = 0 , nattr ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( task_stack_end_corrupted ( prev ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( containsForbiddenChars ( p , l ) ) { <S2SV_EndBug>
<S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( rh . command == RELAY_COMMAND_BEGIN_DIR ) { <S2SV_EndBug>
<S2SV_StartBug> return PyBytes_DecodeEscape ( s , len , NULL , 0 , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> free ( szSepLine ) ; <S2SV_EndBug>
<S2SV_StartBug> state -> space_before = strdup ( RSTRING_PTR ( space_before ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct user_element * ue = kcontrol -> private_data ; <S2SV_EndBug> <S2SV_StartBug> return change ; <S2SV_EndBug>
<S2SV_StartBug> stat ( options -> in_file , & filestats ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long off ; <S2SV_EndBug> <S2SV_StartBug> if ( vma -> vm_pgoff > ( ~ 0UL >> PAGE_SHIFT ) ) <S2SV_EndBug> <S2SV_StartBug> off = vma -> vm_pgoff << PAGE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> if ( fb -> fb_mmap ) { <S2SV_EndBug> <S2SV_StartBug> fb_pgprotect ( file , vma , off ) ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case Suite_kind : <S2SV_EndBug>
<S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) <S2SV_EndBug> <S2SV_StartBug> if ( addr -> l2tp_family != AF_INET ) <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>Config<S2SV_blank>Rev<S2SV_blank>%x" , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tptr < ( pptr + length ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( op -> op > 0xbf ) return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n < buf_len ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( table = calloc ( count , sizeof ( ut32 ) ) ) ) goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( op -> len + n <= buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> op -> len += n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( n > 0 && n + op -> len < buf_len ) ) goto beach ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < count && strlen ( op -> txt ) < R_ASM_BUFSIZE ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> snprintf ( op -> txt + strlen ( op -> txt ) , R_ASM_BUFSIZE , "%d<S2SV_blank>" , table [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> dst [ dst_byte_offset ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> nPath ++ ; <S2SV_EndBug>
<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , data , size , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> guint uint_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug> <S2SV_StartBug> gboolean bool_val = GST_READ_UINT32_LE ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t auxsize ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , vsize ) ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , asize ) ; <S2SV_EndBug>
<S2SV_StartBug> op = queue_remove_if ( att -> req_queue , match_op_id , UINT_TO_PTR ( id ) ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxw , maxh , max , i ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug>
<S2SV_StartBug> && obj [ 0 ] == 0x00 && objlen > 1 ) { <S2SV_EndBug>
<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> mntput ( ns -> proc_mnt ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( bps / 8 ) <S2SV_EndBug>
<S2SV_StartBug> if ( img && ( img -> d_w != cfg -> g_w || img -> d_h != cfg -> g_h ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! stream -> img ) <S2SV_EndBug> <S2SV_StartBug> stream -> img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 , <S2SV_EndBug> <S2SV_StartBug> img = stream -> img ; <S2SV_EndBug>
<S2SV_StartBug> params -> buffer . fragments > SIZE_MAX / params -> buffer . fragment_size ) <S2SV_EndBug>
<S2SV_StartBug> dev -> netdev_ops = & l2tp_eth_netdev_ops ; <S2SV_EndBug>
<S2SV_StartBug> int ret , wo ; <S2SV_EndBug> <S2SV_StartBug> wo = ( rbuf == NULL || rlen == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wo ) <S2SV_EndBug> <S2SV_StartBug> rbuf , rlen , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> return r ? : __blkdev_driver_ioctl ( bdev , mode , cmd , arg ) ; <S2SV_EndBug>
<S2SV_StartBug> cli_dbgmsg ( "Possible<S2SV_blank>data<S2SV_blank>corruption<S2SV_blank>fixed\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * p ) <S2SV_EndBug>
<S2SV_StartBug> if ( dst_group && ! netlink_capable ( sock , NL_NONROOT_SEND ) ) <S2SV_EndBug>
<S2SV_StartBug> err = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug>
<S2SV_StartBug> * ( int * ) pReplyData = Downmix_setParameter ( pDownmixer , * ( int32_t * ) cmd -> data , <S2SV_EndBug>
<S2SV_StartBug> static void choose_intra_uv_mode ( VP9_COMP * cpi , PICK_MODE_CONTEXT * ctx , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE * mode_uv ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug>
<S2SV_StartBug> void nfs4_close_state ( struct path * path , struct nfs4_state * state , mode_t mode ) <S2SV_EndBug> <S2SV_StartBug> __nfs4_close ( path , state , mode , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> return mount_pseudo ( fs_type , "aio:" , NULL , & ops , AIO_RING_MAGIC ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uint32 rows , uint32 cols , int outskew , int inskew ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( outbuffer , s -> str , XMLRPC_BUFSIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( request -> ssids [ i ] . ssid_len > <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> o4 = o * sizeof ( uint32_t ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 3 ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> const int w = ( plane ? ( 1 + yuv_frame -> d_w ) / 2 : yuv_frame -> d_w ) ; <S2SV_EndBug> <S2SV_StartBug> const int h = ( plane ? ( 1 + yuv_frame -> d_h ) / 2 : yuv_frame -> d_h ) ; <S2SV_EndBug> <S2SV_StartBug> size_t needed = w ; <S2SV_EndBug>
<S2SV_StartBug> struct keydata * keyptr ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = half_md4_transform ( hash , keyptr -> secret ) ; <S2SV_EndBug>
<S2SV_StartBug> CallInfo * ci = next_ci ( L ) ; <S2SV_EndBug> <S2SV_StartBug> ci -> func = func ; <S2SV_EndBug> <S2SV_StartBug> CallInfo * ci = next_ci ( L ) ; <S2SV_EndBug> <S2SV_StartBug> checkstackp ( L , fsize , func ) ; <S2SV_EndBug> <S2SV_StartBug> checkstackp ( L , 1 , func ) ; <S2SV_EndBug>
<S2SV_StartBug> ns_to_timespec ( cur_setting -> it_interval , timr -> it . mmtimer . incr * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> ns_to_timespec ( cur_setting -> it_value , ( timr -> it . mmtimer . expires - rtc_time ( ) ) * sgi_clock_period ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> snd_usbmidi_free ( umidi ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> clear_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ; <S2SV_EndBug>
<S2SV_StartBug> sigev_none = ( timr -> it_sigev_notify & ~ SIGEV_THREAD_ID ) == SIGEV_NONE ; <S2SV_EndBug>
<S2SV_StartBug> if ( server . vm_enabled ) <S2SV_EndBug> <S2SV_StartBug> if ( server . vm_enabled ) vmInit ( ) ; <S2SV_EndBug>
<S2SV_StartBug> assert_regexp_syntax_error ( ")" ) ; <S2SV_EndBug> <S2SV_StartBug> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}" , <S2SV_EndBug>
<S2SV_StartBug> struct tcp_sock_t * tcp_socket ; <S2SV_EndBug> <S2SV_StartBug> while ( ( tcp_socket = tcp_open ( desired_port ) ) == NULL && <S2SV_EndBug> <S2SV_StartBug> g_options . only_desired_port == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> uint16_t real_port = tcp_port_number_get ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> uint16_t pid ; <S2SV_EndBug> <S2SV_StartBug> args -> tcp = tcp_conn_accept ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_usb : <S2SV_EndBug>
<S2SV_StartBug> file_sb_list_add ( f , inode -> i_sb ) ; <S2SV_EndBug> <S2SV_StartBug> file_sb_list_del ( f ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * off >= skb -> len ) { <S2SV_EndBug>
<S2SV_StartBug> if ( len < 1 ) <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> page -> index , <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( atomic_read ( & current -> mm -> mm_users ) > 1 ) <S2SV_EndBug>
<S2SV_StartBug> if ( fibsize > ( dev -> max_fib_size - sizeof ( struct aac_fibhdr ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> mpz_t numer , denom , lambda ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( cpi -> gf_active_flags , 1 , ( cm -> mb_rows * cm -> mb_cols ) ) ; <S2SV_EndBug>
<S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) <S2SV_EndBug> <S2SV_StartBug> numBytes += size ; <S2SV_EndBug> <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> bufp += bytes_read ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( creds -> pid == task_tgid_vnr ( current ) || nsown_capable ( CAP_SYS_ADMIN ) ) && <S2SV_EndBug>
<S2SV_StartBug> coerce_reg_to_32 ( dst_reg ) ; <S2SV_EndBug> <S2SV_StartBug> coerce_reg_to_32 ( & src_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug>
<S2SV_StartBug> kfree ( tu -> queue ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( unlikely ( path [ depth ] . p_ext > EXT_MAX_EXTENT ( path [ depth ] . p_hdr ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_extent_block_csum_set ( inode , neh ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ret ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! prph_info ) <S2SV_EndBug> <S2SV_StartBug> ctxt_info_gen3 = dma_alloc_coherent ( trans -> dev , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! s -> cdx [ i ] || ! s -> cdy [ i ] ) { <S2SV_EndBug>
<S2SV_StartBug> & msg -> addrto , & msg -> ifindex ) ; <S2SV_EndBug> <S2SV_StartBug> dbg ( ndp , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> str_in6_addr ( & msg -> addrto ) , msg -> ifindex ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> iw_set_error ( rctx -> ctx , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_4X4 ] , default_coef_probs_4x4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_8X8 ] , default_coef_probs_8x8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_16X16 ] , default_coef_probs_16x16 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( cm -> fc . coef_probs [ TX_32X32 ] , default_coef_probs_32x32 ) ; <S2SV_EndBug>
<S2SV_StartBug> xmlNode * op_msg = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( sync_timer == NULL ) { <S2SV_EndBug> <S2SV_StartBug> crm_send_remote_msg ( private -> command . session , op_msg , private -> command . encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cib -> call_timeout > 0 ) { <S2SV_EndBug> <S2SV_StartBug> op_reply = crm_recv_remote_msg ( private -> command . session , private -> command . encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> crm_element_value_int ( op_reply , F_CIB_CALLID , & reply_id ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> pr_debug ( "%p<S2SV_blank>%zu\\n" , sk , len ) ; <S2SV_EndBug> <S2SV_StartBug> sockaddr -> sa_family = AF_NFC ; <S2SV_EndBug>
<S2SV_StartBug> ghash_flush ( ctx , dctx ) ; <S2SV_EndBug>
<S2SV_StartBug> LPSTR tmp = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( NULL == tmp ) <S2SV_EndBug>
<S2SV_StartBug> int number_bidders , i , bid , best_bid ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( newlen < SDS_MAX_PREALLOC ) <S2SV_EndBug> <S2SV_StartBug> hdrlen = sdsHdrSize ( type ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ip_options_echo ( & icmp_param -> replyopts , skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( icmp_param -> replyopts . optlen ) { <S2SV_EndBug> <S2SV_StartBug> ipc . opt = & icmp_param -> replyopts ; <S2SV_EndBug> <S2SV_StartBug> daddr = icmp_param -> replyopts . faddr ; <S2SV_EndBug>
<S2SV_StartBug> if ( bmp_info . number_colors > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> * magick = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> if ( bmp_info . ba_offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( offset < 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> u_int tlen , pdu_type , pdu_len ; <S2SV_EndBug> <S2SV_StartBug> while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( rpki_rtr_pdu_print ( ndo , tptr , 8 ) ) <S2SV_EndBug> <S2SV_StartBug> tptr += pdu_len ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%sBandwidth<S2SV_blank>Constraints<S2SV_blank>Model<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(%u)" , <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> settings . udpport = 11211 ; <S2SV_EndBug>
<S2SV_StartBug> CU_add_test ( parserTestSuite , "Parse<S2SV_blank>Exchange" , test_parserComplete ) ; <S2SV_EndBug>
<S2SV_StartBug> bprm -> interp = iname ; <S2SV_EndBug>
<S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int sse = INT_MAX , best_rd_sse = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> unsigned int zero_mv_sse = INT_MAX , best_sse = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> int sf_improved_mv_pred = cpi -> sf . improved_mv_pred ; <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_MULTI_RES_ENCODING <S2SV_EndBug> <S2SV_StartBug> int parent_ref_valid = cpi -> oxcf . mr_encoder_id && cpi -> mr_low_res_mv_avail ; <S2SV_EndBug> <S2SV_StartBug> parent_ref_flag = ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mode_mv = mode_mv_sb [ sign_bias ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( mode_mv_sb , 0 , sizeof ( mode_mv_sb ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( & best_mbmode , 0 , sizeof ( best_mbmode ) ) ; <S2SV_EndBug> <S2SV_StartBug> get_predictor_pointers ( cpi , plane , recon_yoffset , recon_uvoffset ) ; <S2SV_EndBug> <S2SV_StartBug> calculate_zeromv_rd_adjustment ( cpi , x , & rd_adjustment ) ; <S2SV_EndBug> <S2SV_StartBug> distortion2 = vp8_variance16x16 ( <S2SV_EndBug> <S2SV_StartBug> distortion2 = vp8_variance16x16 <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . mr_encoder_id && ! parent_ref_valid ) <S2SV_EndBug> <S2SV_StartBug> if ( parent_ref_valid && parent_ref_frame ) <S2SV_EndBug> <S2SV_StartBug> if ( parent_ref_valid && parent_ref_frame && dissim <= 2 && <S2SV_EndBug> <S2SV_StartBug> if ( ! parent_ref_valid ) <S2SV_EndBug> <S2SV_StartBug> rate2 += vp8_mv_bit_cost ( & mode_mv [ NEWMV ] , & best_ref_mv , <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( this_mode == ZEROMV && sse < zero_mv_sse ) <S2SV_EndBug> <S2SV_StartBug> sse < best_sse ) <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mbmode , & x -> e_mbd . mode_info_context -> mbmi , <S2SV_EndBug> <S2SV_StartBug> if ( x -> best_sse_inter_mode == DC_PRED ) <S2SV_EndBug> <S2SV_StartBug> vp8_denoiser_denoise_mb ( & cpi -> denoiser , x , best_sse , zero_mv_sse , <S2SV_EndBug> <S2SV_StartBug> recon_yoffset , recon_uvoffset ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_mbmode . ref_frame == INTRA_FRAME && <S2SV_EndBug> <S2SV_StartBug> rate2 = x -> ref_frame_cost [ this_ref_frame ] + <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mbmode , & x -> e_mbd . mode_info_context -> mbmi , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & x -> e_mbd . mode_info_context -> mbmi , & best_mbmode , <S2SV_EndBug>
<S2SV_StartBug> if ( err ) <S2SV_EndBug>
<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> int this_frame_target , <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . end_usage == USAGE_CONSTANT_QUALITY ) { <S2SV_EndBug> <S2SV_StartBug> int recode_tolerance = <S2SV_EndBug> <S2SV_StartBug> ( cpi -> sf . recode_tolerance * this_frame_target ) / 100 ; <S2SV_EndBug> <S2SV_StartBug> * frame_over_shoot_limit = this_frame_target + recode_tolerance ; <S2SV_EndBug> <S2SV_StartBug> * frame_over_shoot_limit += 200 ; <S2SV_EndBug> <S2SV_StartBug> if ( * frame_over_shoot_limit > cpi -> rc . max_frame_bandwidth ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( asn1_com_prkey_attr -> flags & SC_ASN1_PRESENT && <S2SV_EndBug>
<S2SV_StartBug> down_write ( & card -> controls_rwsem ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> ret = arg ( name , annotation , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug>
<S2SV_StartBug> else if ( strcmp ( arg , "@@" ) == 0 || strcmp ( arg , "@@u" ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = get_layer_context ( & cpi -> svc ) ; <S2SV_EndBug> <S2SV_StartBug> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; <S2SV_EndBug> <S2SV_StartBug> lrc -> min_frame_bandwidth = ( int ) ( lrc -> av_per_frame_bandwidth * <S2SV_EndBug> <S2SV_StartBug> lrc -> max_frame_bandwidth = ( int ) ( ( ( int64_t ) lrc -> av_per_frame_bandwidth * <S2SV_EndBug> <S2SV_StartBug> lrc -> max_gf_interval = 16 ; <S2SV_EndBug>
<S2SV_StartBug> register int i ; <S2SV_EndBug> <S2SV_StartBug> raw_printf ( "No<S2SV_blank>window<S2SV_blank>types?" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( windowprocs . win_raw_print == def_raw_print <S2SV_EndBug>
<S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ihevcd_cabac_init ( & ps_codec -> s_parse . s_cabac , <S2SV_EndBug> <S2SV_StartBug> ( const UWORD8 * ) & ps_codec -> s_parse . s_cabac . au1_ctxt_models_sync ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 0 == end_of_pic ) <S2SV_EndBug>
<S2SV_StartBug> if ( NGX_DECLINED == ngx_http_auth_spnego_basic ( r , ctx , alcf ) ) { <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "(ni:<S2SV_blank>ho=0x%04x<S2SV_blank>co=0x%04x)" , <S2SV_EndBug>
<S2SV_StartBug> return sizeof ( vpx_codec_alg_priv_t ) ; <S2SV_EndBug>
<S2SV_StartBug> dtls1_record_bitmap_update ( s , & ( s -> d1 -> bitmap ) ) ; <S2SV_EndBug>
<S2SV_StartBug> pixels = ( unsigned char * ) AcquireQuantumMemory ( packets + 256UL , image -> rows * <S2SV_EndBug>
<S2SV_StartBug> struct pipe_buffer * buf ; <S2SV_EndBug> <S2SV_StartBug> orig_sz = size ; <S2SV_EndBug> <S2SV_StartBug> if ( off ) <S2SV_EndBug> <S2SV_StartBug> size += off - pipe -> bufs [ idx ] . offset ; <S2SV_EndBug> <S2SV_StartBug> if ( size <= buf -> len ) <S2SV_EndBug> <S2SV_StartBug> size -= buf -> len ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = size ; <S2SV_EndBug> <S2SV_StartBug> off = i -> iov_offset = buf -> offset + size ; <S2SV_EndBug> <S2SV_StartBug> i -> count -= orig_sz ; <S2SV_EndBug>
<S2SV_StartBug> if ( cs > CQSPI_MAX_CHIPSELECT ) { <S2SV_EndBug>
<S2SV_StartBug> goto unmap_pages ; <S2SV_EndBug> <S2SV_StartBug> kvm_iommu_put_pages ( kvm , slot -> base_gfn , gfn ) ; <S2SV_EndBug>
<S2SV_StartBug> struct key * find_keyring_by_name ( const char * name , bool skip_perm_check ) <S2SV_EndBug> <S2SV_StartBug> if ( ! skip_perm_check && <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> char * identifier ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INSUFFICIENT_MEMORY ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r1 . o = function -> return_obj ; <S2SV_EndBug> <S2SV_StartBug> yr_modules_unload_all ( context ) ; <S2SV_EndBug>
<S2SV_StartBug> res = ctx -> iface -> dec . get_si ( ctx -> priv -> alg_priv , si ) ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_encode_subsampling ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> BYTE * co_dst ; <S2SV_EndBug> <S2SV_StartBug> UINT32 tempHeight ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < tempHeight >> 1 ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> co_dst = context -> priv -> PlaneBuffers [ 1 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> cg_dst = context -> priv -> PlaneBuffers [ 2 ] + y * ( tempWidth >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> co_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 1 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> co_src1 = co_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src0 = ( INT8 * ) context -> priv -> PlaneBuffers [ 2 ] + ( y << 1 ) * tempWidth ; <S2SV_EndBug> <S2SV_StartBug> cg_src1 = cg_src0 + tempWidth ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ngx_http_lua_copy_request_headers ( ngx_http_request_t * sr , ngx_http_request_t * r ) <S2SV_EndBug> <S2SV_StartBug> ngx_table_elt_t * header ; <S2SV_EndBug> <S2SV_StartBug> ngx_uint_t i ; <S2SV_EndBug> <S2SV_StartBug> dd ( "before:<S2SV_blank>parent<S2SV_blank>req<S2SV_blank>headers<S2SV_blank>count:<S2SV_blank>%d" , <S2SV_EndBug> <S2SV_StartBug> ( int ) r -> headers_in . headers . part . nelts ) ; <S2SV_EndBug> <S2SV_StartBug> if ( part -> next == NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ( int ) r -> headers_in . headers . part . nelts ) ; <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ BLOCK_16X16 ] ; <S2SV_EndBug> <S2SV_StartBug> int step_param = cpi -> sf . reduce_first_step_size + <S2SV_EndBug> <S2SV_StartBug> step_param = MIN ( step_param , ( cpi -> sf . max_step_search_steps - 2 ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_hex_search ( x , & ref_full , step_param , x -> errorperbit , 0 , & v_fn_ptr , 0 , <S2SV_EndBug> <S2SV_StartBug> & v_fn_ptr , 0 , cpi -> sf . subpel_iters_per_step , NULL , NULL , & distortion , <S2SV_EndBug> <S2SV_StartBug> & sse ) ; <S2SV_EndBug> <S2SV_StartBug> return vp9_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . dst . buf , xd -> plane [ 0 ] . dst . stride , <S2SV_EndBug>
<S2SV_StartBug> int secure_decrypt ( void * data , unsigned int data_length , int is_signed ) <S2SV_EndBug> <S2SV_StartBug> at91_aes_key_size_t key_size ; <S2SV_EndBug> <S2SV_StartBug> init_keys ( & key_size , cipher_key , cmac_key , iv ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( cmac_key , 0 , sizeof ( cmac_key ) ) ; <S2SV_EndBug>
<S2SV_StartBug> o = 2 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nelements ; j ++ , i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( image_info -> ping != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! adis -> buffer ) <S2SV_EndBug> <S2SV_StartBug> tx = adis -> buffer + burst_length ; <S2SV_EndBug>
<S2SV_StartBug> dst_reg -> id = ptr_reg -> id ; <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( dst_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> usleep ( 250000 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void update_mv_probs ( vp9_prob * p , int n , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_read ( r , MV_UPDATE_PROB ) ) <S2SV_EndBug> <S2SV_StartBug> p [ i ] = ( vp9_read_literal ( r , 7 ) << 1 ) | 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_to_user ( uaddr , ( ( u32 * ) regs ) + off , KVM_REG_SIZE ( reg -> id ) ) ) <S2SV_EndBug>
<S2SV_StartBug> mk_vhost_close ( sr ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ( tmpName [ i ] != 0 ) && ( i < to_read ) ) { <S2SV_EndBug>
<S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> err = ext4_ext_zeroout ( inode , & orig_ex ) ; <S2SV_EndBug>
<S2SV_StartBug> long rem ; <S2SV_EndBug> <S2SV_StartBug> value -> tv_sec = div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug>
<S2SV_StartBug> hndl = sock_diag_lock_handler ( req -> sdiag_family ) ; <S2SV_EndBug>
<S2SV_StartBug> goto end ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_bearer_type_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug>
<S2SV_StartBug> # line 94 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 95 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 96 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 97 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 100 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 99 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 98 "hex_grammar.y" <S2SV_EndBug>
<S2SV_StartBug> if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ) , index_key ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( memcmp ( & name [ 2 ] , & content_name [ 2 ] , 31L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( & name [ 33 ] , & content_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . content = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & control_name [ 33 ] , 11L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . control = fi ; <S2SV_EndBug> <S2SV_StartBug> else if ( memcmp ( & name [ 33 ] , & spaninfo_name [ 33 ] , 8L ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chm -> sec1 . spaninfo = fi ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const char * args [ 11 ] ; <S2SV_EndBug> <S2SV_StartBug> args [ i ++ ] = "--" ; <S2SV_EndBug> <S2SV_StartBug> execvp ( EXECUTABLE , ( char * * ) args ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> newinet -> opt = ireq -> opt ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p - 1 , length + 1 , ndo -> ndo_snapend - p + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> struct perf_event_context * ctx = event -> ctx ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> validate_event ( struct pmu_hw_events * hw_events , <S2SV_EndBug> <S2SV_StartBug> struct arm_pmu * armpmu = to_arm_pmu ( event -> pmu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( event -> pmu != leader_pmu || event -> state < PERF_EVENT_STATE_OFF ) <S2SV_EndBug> <S2SV_StartBug> return armpmu -> get_event_idx ( hw_events , & fake_event ) >= 0 ; <S2SV_EndBug>
<S2SV_StartBug> BOOL ret = FALSE ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> data = NULL ; <S2SV_EndBug> <S2SV_StartBug> ret = TRUE ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> u8 opcode = BPF_OP ( insn -> code ) ; <S2SV_EndBug> <S2SV_StartBug> if ( known && ( ptr_reg -> off + smin_val == <S2SV_EndBug> <S2SV_StartBug> if ( dst_reg == off_reg ) { <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_get ( ext4_mb_cache , bs -> bh -> b_bdev , <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> if ( ce ) { <S2SV_EndBug> <S2SV_StartBug> le32_add_cpu ( & BHDR ( new_bh ) -> h_refcount , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug>

<S2SV_StartBug> struct in6_addr * addr , uint32_t * ifindex ) <S2SV_EndBug> <S2SV_StartBug> unsigned char cbuf [ CMSG_SPACE ( sizeof ( struct in6_pktinfo ) ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cmsghdr -> cmsg_level == IPPROTO_IPV6 && <S2SV_EndBug> <S2SV_StartBug> cmsghdr -> cmsg_type == IPV6_PKTINFO && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( mode > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> struct address_space * mapping = inode -> i_mapping ; <S2SV_EndBug> <S2SV_StartBug> if ( mapping -> nrpages && mapping_tagged ( mapping , PAGECACHE_TAG_DIRTY ) ) { <S2SV_EndBug> <S2SV_StartBug> truncate_pagecache_range ( inode , start , end - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> flags , mode ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( tp -> fw_ver , & vpd_data [ j ] , len ) ; <S2SV_EndBug> <S2SV_StartBug> strncat ( tp -> fw_ver , "<S2SV_blank>bc<S2SV_blank>" , vpdlen - len - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> path -> mnt = mntget ( nd -> path . mnt ) ; <S2SV_EndBug> <S2SV_StartBug> follow_mount ( path ) ; <S2SV_EndBug>
<S2SV_StartBug> i ++ ; <S2SV_EndBug>
<S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MIREGADR , address & REG_ADDR_MASK ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MICMD , MICMD_MIIRD ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc28j60ReadReg ( interface , ENC28J60_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MICMD , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> data = enc28j60ReadReg ( interface , ENC28J60_REG_MIRDL ) ; <S2SV_EndBug> <S2SV_StartBug> data |= enc28j60ReadReg ( interface , ENC28J60_REG_MIRDH ) << 8 ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mptctl_readtest ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug>
<S2SV_StartBug> static void choose_partitioning ( VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> int mi_row , int mi_col ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> int i , j , k ; <S2SV_EndBug> <S2SV_StartBug> v64x64 vt ; <S2SV_EndBug> <S2SV_StartBug> int_mv nearest_mv , near_mv ; <S2SV_EndBug> <S2SV_StartBug> const struct scale_factors * const sf = & cm -> frame_refs [ LAST_FRAME - 1 ] . sf ; <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( xd -> mb_to_right_edge < 0 ) <S2SV_EndBug> <S2SV_StartBug> vp9_setup_pre_planes ( xd , 0 , yv12 , mi_row , mi_col , sf ) ; <S2SV_EndBug> <S2SV_StartBug> dp = xd -> plane [ 0 ] . dst . stride ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> const int y16_idx = y32_idx + ( ( j >> 1 ) << 4 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( k = 0 ; k < 4 ; k ++ ) { <S2SV_EndBug> <S2SV_StartBug> int x_idx = x16_idx + ( ( k & 1 ) << 3 ) ; <S2SV_EndBug> <S2SV_StartBug> int y_idx = y16_idx + ( ( k >> 1 ) << 3 ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned int sse = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt . split [ i ] . split [ j ] , BLOCK_16X16 ) ; <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt . split [ i ] , BLOCK_32X32 ) ; <S2SV_EndBug> <S2SV_StartBug> fill_variance_tree ( & vt , BLOCK_64X64 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt , tile , BLOCK_64X64 , <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , 8 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt . split [ i ] , tile , BLOCK_32X32 , <S2SV_EndBug> <S2SV_StartBug> ( mi_row + y32_idx ) , ( mi_col + x32_idx ) , 4 ) ) { <S2SV_EndBug> <S2SV_StartBug> # define DISABLE_8X8_VAR_BASED_PARTITION <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + y32_idx + y16_idx + 1 < cm -> mi_rows && <S2SV_EndBug> <S2SV_StartBug> mi_row + x32_idx + x16_idx + 1 < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , <S2SV_EndBug> <S2SV_StartBug> if ( ! set_vt_partitioning ( cpi , & vt . split [ i ] . split [ j ] , tile , <S2SV_EndBug> <S2SV_StartBug> ( mi_row + y32_idx + y16_idx ) , <S2SV_EndBug> <S2SV_StartBug> ( mi_col + x32_idx + x16_idx ) , 2 ) ) { <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> struct inode * inode , int regard_xa ) <S2SV_EndBug> <S2SV_StartBug> int cnt , sig ; <S2SV_EndBug> <S2SV_StartBug> if ( regard_xa ) { <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent = <S2SV_EndBug> <S2SV_StartBug> isofs_iget ( inode -> i_sb , <S2SV_EndBug> <S2SV_StartBug> ISOFS_I ( inode ) -> i_first_extent , <S2SV_EndBug>
<S2SV_StartBug> if ( perf_event_overflow ( event , 0 , & data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> struct pstore * ps = get_info ( store ) ; <S2SV_EndBug> <S2SV_StartBug> stride = ( ps -> exceptions_per_area + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ps -> next_free ++ ; <S2SV_EndBug>
<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> * decorator_list , expr_ty returns , int lineno , int col_offset , <S2SV_EndBug> <S2SV_StartBug> p -> v . AsyncFunctionDef . returns = returns ; <S2SV_EndBug>
<S2SV_StartBug> frag = ( hm_fragment * ) item -> data ; <S2SV_EndBug>
<S2SV_StartBug> && obj [ 0 ] == 0x00 && objlen > 1 ) { <S2SV_EndBug>
<S2SV_StartBug> err |= get_user ( length , & up -> length ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( map_data ) <S2SV_EndBug> <S2SV_StartBug> rq -> bio = NULL ; <S2SV_EndBug>
<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt = ipv6_renew_options ( sk , np -> opt , optname , <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> tot_len = sizeof ( * opt ) + optlen ; <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t auxsize ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , vsize ) ; <S2SV_EndBug> <S2SV_StartBug> av_get_packet ( pb , pkt , asize ) ; <S2SV_EndBug>
<S2SV_StartBug> int buflen = bin -> buf -> length ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! last_pic_droppable && h0 -> cur_pic_ptr -> tf . owner == h0 -> avctx ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug>
<S2SV_StartBug> const int v = ( int ) ( .5 + 256 * vp8_gaussian ( sigma , 0 , i ) ) ; <S2SV_EndBug>
<S2SV_StartBug> uint64 nstrips64 ; <S2SV_EndBug> <S2SV_StartBug> nstrips64 = TIFFhowmany_64 ( bytecount , stripbytes ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( nstrips64 == 0 ) || ( nstrips64 > 0xFFFFFFFF ) ) <S2SV_EndBug> <S2SV_StartBug> newcounts = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> newoffsets = ( uint64 * ) _TIFFCheckMalloc ( tif , nstrips32 , sizeof ( uint64 ) , <S2SV_EndBug> <S2SV_StartBug> for ( strip = 0 ; strip < nstrips32 ; strip ++ ) { <S2SV_EndBug> <S2SV_StartBug> newoffsets [ strip ] = offset ; <S2SV_EndBug> <S2SV_StartBug> td -> td_stripsperimage = td -> td_nstrips = nstrips32 ; <S2SV_EndBug>
<S2SV_StartBug> assert ( addrsize <= LLDPD_MGMT_MAXADDRSIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> int result ; <S2SV_EndBug> <S2SV_StartBug> Newz ( 908 , imp_dbh -> pmysql , 1 , MYSQL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! result ) <S2SV_EndBug> <S2SV_StartBug> Safefree ( imp_dbh -> pmysql ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( cat_enum . szPath , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad1 , '*' ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad2 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad2 , '%' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sep ) { <S2SV_EndBug>
<S2SV_StartBug> "<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost\'>" <S2SV_EndBug>
<S2SV_StartBug> int n ; <S2SV_EndBug>
<S2SV_StartBug> # define EXIFMultipleValues ( size , format , arg ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , arg ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> # define EXIFMultipleFractions ( size , format , arg1 , arg2 ) { ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , ( arg1 ) , ( arg2 ) ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( GetValueFromSplayTree ( exif_resources , q ) == q ) <S2SV_EndBug> <S2SV_StartBug> components = ( ssize_t ) ReadPropertySignedLong ( endian , q + 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( fuji_width ) <S2SV_EndBug>
<S2SV_StartBug> if ( daddr == 0 || rs -> rs_bound_addr == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ret = - ENOTCONN ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> fptr = ( struct frag_hdr * ) ( ( u8 * ) ipv6h + unfrag_ip6hlen ) ; <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> qcoeff , 0 , sizeof ( xd -> qcoeff ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> eobs , 0 , 25 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 16 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( b -> qcoeff , 0 , 2 * sizeof ( b -> qcoeff [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug> <S2SV_StartBug> if ( bitmap_pos < 0 ) { <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> s_alDriver = Cvar_Get ( "s_alDriver" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( "s_alDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( g_file_test ( filename , G_FILE_TEST_EXISTS ) || g_path_is_absolute ( filename ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug>
<S2SV_StartBug> slave -> master = master ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irq ( & slave_active_lock ) ; <S2SV_EndBug>
<S2SV_StartBug> static char * print_number ( cJSON * item ) <S2SV_EndBug> <S2SV_StartBug> f = item -> valuefloat ; <S2SV_EndBug> <S2SV_StartBug> if ( f2 == f && item -> valueint >= LLONG_MIN && item -> valueint <= LLONG_MAX ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = MIN ( r -> sector_count * 512 , SCSI_DMA_BUF_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> return headcount ; <S2SV_EndBug>
<S2SV_StartBug> ps_cur_slice -> u1_field_pic_flag = 0 ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & priv -> ctrl , p , sizeof ( priv -> ctrl ) ) ; <S2SV_EndBug> <S2SV_StartBug> rc = - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> if ( c == 0 ) { <S2SV_EndBug> <S2SV_StartBug> xmlFatalErr ( ctxt , XML_ERR_NAME_TOO_LONG , "Name" ) ; <S2SV_EndBug>
<S2SV_StartBug> return ( ( image -> columns + 7 ) / 8 ) ; <S2SV_EndBug>
<S2SV_StartBug> p = gf_filter_pid_get_property ( ctx -> ipid , GF_PROP_PID_AUDIO_FORMAT ) ; <S2SV_EndBug>
<S2SV_StartBug> bit_set_position ( dat , restartpos ) ; <S2SV_EndBug> <S2SV_StartBug> obj -> supertype = DWG_SUPERTYPE_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> if ( klass && ! is_entity ) <S2SV_EndBug> <S2SV_StartBug> if ( err >= DWG_ERR_CRITICAL ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug>
<S2SV_StartBug> libettercap_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( write_output ( ) != E_SUCCESS ) <S2SV_EndBug>
<S2SV_StartBug> down_write ( & mm -> mmap_sem ) ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> kref_put ( & reservations -> refs , resv_map_release ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL && inet -> opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> nexthop = inet -> opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt == NULL || ! inet -> opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL ) <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> au2_f_code [ 0 ] [ 0 ] = ps_dec -> au2_f_code [ 0 ] [ 1 ] = ps_dec -> u2_forw_f_code ; <S2SV_EndBug>
<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ReadDDSInfo ( image , & dds_info ) != MagickTrue ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < num_images ; n ++ ) <S2SV_EndBug>
<S2SV_StartBug> sin -> sin_family = AF_INET ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 -> sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> * addr_len = sizeof ( * sin6 ) ; <S2SV_EndBug>
<S2SV_StartBug> pvc . sap_family = AF_ATMPVC ; <S2SV_EndBug>
<S2SV_StartBug> char * bufptr ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! retval ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( task -> task_state_flags & SAS_TASK_STATE_DONE ) ) <S2SV_EndBug> <S2SV_StartBug> task -> task_state_flags |= SAS_TASK_STATE_ABORTED ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> assert ( ( size_t ) CDF_SHORT_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( const char * ) sst -> sst_tab ) + CDF_SHORT_SEC_POS ( h , id ) , len ) ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_proxy_auth_type_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint16_t * ptr = ( const uint16_t * ) dat ; <S2SV_EndBug>
<S2SV_StartBug> oe_errno = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock ) <S2SV_EndBug> <S2SV_StartBug> if ( optlen ) <S2SV_EndBug> <S2SV_StartBug> & ret , sock -> host_fd , level , optname , optval , optlen_in , optlen ) != <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> return crypto_skcipher_setkey ( private , key , keylen ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( l_strnstart ( "MSG" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "RPY<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "ERR<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "ANS<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "NUL<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "SEQ<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "END" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size * 2 > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug> <S2SV_StartBug> if ( * object + size > bplist -> offset_table ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! inode -> i_op -> set_acl || ! IS_POSIXACL ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , pacl , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_release ; <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , dpacl , <S2SV_EndBug> <S2SV_StartBug> out_release : <S2SV_EndBug>
<S2SV_StartBug> sprintf ( descriptor -> msg , "\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug>
<S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIREGADR , MIREGADR_R8 | address ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600WriteReg ( interface , ENC624J600_REG_MIWR , data ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( enc624j600ReadReg ( interface , ENC624J600_REG_MISTAT ) & MISTAT_BUSY ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> wStream * s ; <S2SV_EndBug> <S2SV_StartBug> UINT32 flags ; <S2SV_EndBug> <S2SV_StartBug> NTLM_AV_PAIR * AvFlags ; <S2SV_EndBug> <S2SV_StartBug> flags = 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return SEC_E_INTERNAL_ERROR ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( caught_signal ) <S2SV_EndBug> <S2SV_StartBug> sleep ( 2 ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , _ ( "<S2SV_blank>...killed.\\n" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> saddr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug>
<S2SV_StartBug> xfs_daddr_t blkno = map [ 0 ] . bm_bn ; <S2SV_EndBug> <S2SV_StartBug> pag = xfs_perag_get ( btp -> bt_mount , <S2SV_EndBug>
<S2SV_StartBug> int ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( d2i_DSA_SIG ( & s , & sigbuf , siglen ) == NULL ) goto err ; <S2SV_EndBug> <S2SV_StartBug> DSA_SIG_free ( s ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( res == 0 && dev ) { <S2SV_EndBug> <S2SV_StartBug> dev = NULL ; <S2SV_EndBug>
<S2SV_StartBug> netdev -> hw_features = NETIF_F_SG | NETIF_F_HW_VLAN_CTAG_RX ; <S2SV_EndBug>
<S2SV_StartBug> goto next_desc ; <S2SV_EndBug>
<S2SV_StartBug> f = fopen ( filepath , "rb" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ex && ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug> <S2SV_StartBug> if ( flag != EXT4_GET_BLOCKS_PRE_IO ) <S2SV_EndBug>
<S2SV_StartBug> evt -> event . lun [ 1 ] = tpg -> tport_tpgt & 0xFF ; <S2SV_EndBug>
<S2SV_StartBug> struct btrfs_dir_item * di ; <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_REPLACE ) { <S2SV_EndBug> <S2SV_StartBug> di = btrfs_lookup_xattr ( trans , root , path , btrfs_ino ( inode ) , name , <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> ret = btrfs_delete_one_dir_name ( trans , root , path , di ) ; <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( flags & XATTR_CREATE ) <S2SV_EndBug> <S2SV_StartBug> btrfs_release_path ( path ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! di ) { <S2SV_EndBug> <S2SV_StartBug> if ( value ) { <S2SV_EndBug>
<S2SV_StartBug> newlen = x -> length * 6 / 5 ; <S2SV_EndBug> <S2SV_StartBug> if ( newlen == x -> length ) <S2SV_EndBug>
<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { <S2SV_EndBug>
<S2SV_StartBug> res = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug>
<S2SV_StartBug> skb_dst_drop ( skb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( CUR == '/' ) && ( NXT ( 1 ) == '/' ) ) { <S2SV_EndBug>
<S2SV_StartBug> u32 offset ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( r = ssh_packet_get_compress_state ( m , ssh ) ) != 0 || <S2SV_EndBug>
<S2SV_StartBug> bi -> pdwidth = ( bi -> rowbytes * 8 ) / bi -> pixelsize ; <S2SV_EndBug> <S2SV_StartBug> if ( bi -> pdwidth < bi -> npwidth ) { <S2SV_EndBug>
<S2SV_StartBug> sas_port_delete ( phy -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> static u32 __ipv6_select_ident ( struct net * net , u32 hashrnd , <S2SV_EndBug> <S2SV_StartBug> u32 hash , id ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( dst , hashrnd ) ; <S2SV_EndBug> <S2SV_StartBug> hash = __ipv6_addr_jhash ( src , hash ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( unlikely ( ! access_ok ( ! rw , buf , kiocb -> ki_nbytes ) ) ) <S2SV_EndBug> <S2SV_StartBug> iovec -> iov_len = kiocb -> ki_nbytes ; <S2SV_EndBug>
<S2SV_StartBug> ( * sp -> encodepfunc ) ( tif , bp , cc ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( & next_frame , 0 , sizeof ( next_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( this_frame , & next_frame , sizeof ( * this_frame ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * outname = create_output_name ( ( unsigned char * ) f [ i ] -> filename , NULL , 0 , 1 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t numChannels , chansSpecified , chanMask = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( numChannels < chansSpecified || numChannels < 1 ) { <S2SV_EndBug> <S2SV_StartBug> total_samples = dff_chunk_header . ckDataSize / config -> num_channels ; <S2SV_EndBug>
<S2SV_StartBug> return PTR_ERR ( tty ) ; <S2SV_EndBug>
<S2SV_StartBug> ( sctp_paramhdr_t * ) addip_hdr -> params , <S2SV_EndBug>
<S2SV_StartBug> memory_length += extra_length - available_length + BLOCK_QUEUE ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , qp -> d_memory , memory_length ) ; <S2SV_EndBug>
<S2SV_StartBug> res . acl_len ) ; <S2SV_EndBug>
<S2SV_StartBug> q = QueueAuthenticPixels ( image , x , y , Min ( 4 , dds_info -> width - x ) , <S2SV_EndBug> <S2SV_StartBug> Min ( 4 , dds_info -> height - y ) , exception ) ; <S2SV_EndBug> <S2SV_StartBug> SkipDXTMipmaps ( image , dds_info , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> id = idr_alloc ( & ids -> ipcs_idr , new , <S2SV_EndBug> <S2SV_StartBug> current_euid_egid ( & euid , & egid ) ; <S2SV_EndBug>
<S2SV_StartBug> __be32 * pdata = ( __be32 * ) data ; <S2SV_EndBug>
<S2SV_StartBug> if ( unlikely ( len > ring -> rx_buffersize ) ) { <S2SV_EndBug>
<S2SV_StartBug> set_string ( "foo" , module_object , "string_array[%i]" , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> WARN_ON_ONCE ( ctx -> parent_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & ctx -> mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_warn ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , nfunc , line , & vaf ) ; <S2SV_EndBug>
<S2SV_StartBug> xcfdata = ( XCFPixelInfo * ) AcquireQuantumMemory ( data_length , sizeof ( * xcfdata ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sshbuf * b ; <S2SV_EndBug> <S2SV_StartBug> char * pkalg , * userstyle = NULL , * key_s = NULL , * ca_s = NULL ; <S2SV_EndBug> <S2SV_StartBug> u_char * pkblob , * sig , have_sig ; <S2SV_EndBug> <S2SV_StartBug> if ( ! authctxt -> valid ) { <S2SV_EndBug> <S2SV_StartBug> __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> free ( sig ) ; <S2SV_EndBug> <S2SV_StartBug> fatal ( "%s:<S2SV_blank>%s" , __func__ , ssh_err ( r ) ) ; <S2SV_EndBug> <S2SV_StartBug> return authenticated ; <S2SV_EndBug>
<S2SV_StartBug> NameContext sNC ; <S2SV_EndBug> <S2SV_StartBug> sNC . pParse = & sParse ; <S2SV_EndBug>
<S2SV_StartBug> args -> rmtblkno = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> args -> rmtblkcnt = args -> rmtblkcnt2 ; <S2SV_EndBug>
<S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> i = ctm -> length ; <S2SV_EndBug> <S2SV_StartBug> if ( ( i < 11 ) || ( i > 17 ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( i < 13 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> * ( p ++ ) = * ( str ++ ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( * str >= '0' ) && ( * str <= '9' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * str == 'Z' ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> if ( ( * str != '+' ) && ( * str != '-' ) ) <S2SV_EndBug>
<S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decompress_data ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_ENTER ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug> <S2SV_StartBug> context -> decode ( context ) ; <S2SV_EndBug> <S2SV_StartBug> PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = hns_nic_net_xmit_hw ( ndev , skb , <S2SV_EndBug> <S2SV_StartBug> if ( ret == NETDEV_TX_OK ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> title , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> style_block , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> script , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> object , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> textarea , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> option , s ) ; <S2SV_EndBug> <S2SV_StartBug> HTChunkPuts ( & me -> math , s ) ; <S2SV_EndBug> <S2SV_StartBug> # ifdef USE_PRETTYSRC <S2SV_EndBug>
<S2SV_StartBug> return error ; <S2SV_EndBug>
<S2SV_StartBug> kiocb -> ki_nr_segs = kiocb -> ki_nbytes ; <S2SV_EndBug>
<S2SV_StartBug> sas_discover_event ( dev -> port , DISCE_PROBE ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> if ( ext2_xattr_cache_insert ( bh ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( client -> type == USER_CLIENT ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! index_key . type -> match || ! index_key . type -> instantiate || <S2SV_EndBug>
<S2SV_StartBug> file = fopen ( "/tmp/keepalived.json" , "w" ) ; <S2SV_EndBug>
<S2SV_StartBug> pdf -> xrefs = calloc ( 1 , sizeof ( xref_t ) * pdf -> n_xrefs ) ; <S2SV_EndBug>
<S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> int delta_munlocked ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> delta_munlocked = - nr + pagevec_count ( & pvec_putback ) ; <S2SV_EndBug>
<S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> <S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug>
<S2SV_StartBug> int val = 1 ; <S2SV_EndBug>
<S2SV_StartBug> const int eb_y = MAX ( ALIGN_POWER_OF_TWO ( src -> y_width , 6 ) - src -> y_width , <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_ALPHA <S2SV_EndBug> <S2SV_StartBug> src -> y_width , src -> y_height , <S2SV_EndBug> <S2SV_StartBug> src -> uv_width , src -> uv_height , <S2SV_EndBug> <S2SV_StartBug> src -> uv_width , src -> uv_height , <S2SV_EndBug>
<S2SV_StartBug> void * base = dlmalloc ( bytes + sizeof ( AllocationEntry ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u1_mb_idx = 0 ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> type , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , length - 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( tptr [ 3 ] , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_64BITS ( tptr + 3 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , tptr + 3 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , length - 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 106 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1330 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 115 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1338 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 119 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1351 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 128 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> RE_NODE * leftmost_node = ( yyvsp [ - 1 ] . re_node ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1413 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 190 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1421 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 194 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1434 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 207 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1442 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 211 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1451 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 220 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1468 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 233 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1476 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 237 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1485 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 246 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1512 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 269 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1548 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 301 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1574 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 323 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1594 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 343 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1602 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 347 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> ( yyval . re_node ) = yr_re_node_create ( RE_NODE_ALT , ( yyvsp [ - 2 ] . re_node ) , ( yyvsp [ 0 ] . re_node ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1617 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 361 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1629 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 369 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1653 "hex_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1657 "hex_grammar.c" <S2SV_EndBug>
<S2SV_StartBug> char group [ LONG_STRING ] ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , "%s<S2SV_blank>" ANUM "<S2SV_blank>" ANUM "<S2SV_blank>%c<S2SV_blank>%[^\\n]" , group , & last , & first , & mod , desc ) < 4 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> pStorage -> picSizeInMbs = <S2SV_EndBug> <S2SV_StartBug> pStorage -> activeSps -> picHeightInMbs ; <S2SV_EndBug>
<S2SV_StartBug> if ( BPF_CLASS ( insn -> code ) != BPF_ALU64 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> __reg_deduce_bounds ( dst_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> int iskew = imagew - tilew ; <S2SV_EndBug> <S2SV_StartBug> if ( colb + tilew > imagew ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( dev -> flags & IFF_UP ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb -> len > ( dev -> mtu + dev -> hard_header_len ) ) <S2SV_EndBug> <S2SV_StartBug> return NET_RX_DROP ; <S2SV_EndBug>
<S2SV_StartBug> else if ( ! strcasecmp ( target , "LIST" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , "CLEAR" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! strcasecmp ( target , "MODIFY" ) && myentity_find_ext ( target ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ERR_PTR ( - ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> goto couldnt_alloc_key ; <S2SV_EndBug> <S2SV_StartBug> couldnt_alloc_key : <S2SV_EndBug> <S2SV_StartBug> key_put ( dest_keyring ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( s -> chunksize >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> s -> chunksize = strtoll ( line , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( NULL , AV_LOG_TRACE , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRId64 "\'\\n" , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t target = h -> is_streamed ? 0 : s -> off ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_INFO , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 "<S2SV_blank>error=%s.\\n" , s -> off , av_err2str ( read_ret ) ) ; <S2SV_EndBug> <S2SV_StartBug> av_log ( h , AV_LOG_ERROR , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 ".\\n" , target ) ; <S2SV_EndBug>
<S2SV_StartBug> long tmp = * old ; <S2SV_EndBug> <S2SV_StartBug> return * old == tmp ; <S2SV_EndBug>
<S2SV_StartBug> static void write_sync_code ( struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_0 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_1 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , VP9_SYNC_CODE_2 , 8 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_encode_sse2 ( NSC_CONTEXT * context , const BYTE * data , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> other_branch = push_stack ( env , * insn_idx + insn -> off + 1 , * insn_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( fseek ( stats -> file , 0 , SEEK_END ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( name && memchr ( name , '\\0' , namelen ) ) <S2SV_EndBug>
<S2SV_StartBug> static int mem_resize ( jas_stream_memobj_t * m , int bufsize ) <S2SV_EndBug> <S2SV_StartBug> assert ( bufsize >= 0 ) ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( "mem_resize(%p,<S2SV_blank>%d)\\n" , m , bufsize ) ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int i ; <S2SV_EndBug>
<S2SV_StartBug> BITSET_SET_BIT ( cc -> bs , ( int ) ( * vs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 opcode = * ( p4 ++ ) & 0xff ; <S2SV_EndBug>
<S2SV_StartBug> h = __archive_read_ahead ( a , <S2SV_EndBug>
<S2SV_StartBug> . match_data . cmp = user_match , <S2SV_EndBug>
<S2SV_StartBug> if ( pos + 8 > len ) { <S2SV_EndBug> <S2SV_StartBug> int min_val = ( ut32 ) ( UINT ( data , pos + 4 ) ) , <S2SV_EndBug>
<S2SV_StartBug> ber_parse_header ( STREAM s , int tagval , int * length ) <S2SV_EndBug>
<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = ff_dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug>
<S2SV_StartBug> first_block_offset = round_up ( offset , sb -> s_blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( last_block_offset > first_block_offset ) <S2SV_EndBug> <S2SV_StartBug> ext4_inode_resume_unlocked_dio ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_dec_init ( & codec , decoder -> interface ( ) , NULL , <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || <S2SV_EndBug>
<S2SV_StartBug> Huff_transmit ( & huff , ch , seq ) ; <S2SV_EndBug>
<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_ATOMIC ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i <= SERDES_MAX ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( ( size_t ) CDF_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> return cdf_read ( info , ( off_t ) CDF_SEC_POS ( h , id ) , <S2SV_EndBug>
<S2SV_StartBug> int client_socket = accept ( listen_socket_ , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> send ( client_socket_ , "btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea" , 16 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> struct buffer_head * page_bufs ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < height ; ++ i ) <S2SV_EndBug>
<S2SV_StartBug> schedule_work ( & sunkbd -> tq ) ; <S2SV_EndBug>
<S2SV_StartBug> # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image , ( unsigned char ) length ) ; ( void ) WriteBlob ( image , length , packet ) ; length = 0 ; } datum >>= 8 ; bits -= 8 ; } if ( free_code > max_code ) { number_bits ++ ; if ( number_bits == MaxGIFBits ) max_code = MaxGIFTable ; else max_code = MaxCode ( number_bits ) ; } } <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( size_t ) GetPixelIndex ( image , p ) & 0xff ) ; <S2SV_EndBug> <S2SV_StartBug> next_pixel = MagickFalse ; <S2SV_EndBug>
<S2SV_StartBug> else umount_tree ( mnt , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( ulen > SIZE_T_MAX / 2 ) || ( plen > ( SIZE_T_MAX / 2 - 2 ) ) ) <S2SV_EndBug>
<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> char * buf = buffer , * buf2 = buffer2 , * d , * d_url ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug>
<S2SV_StartBug> int q ) { <S2SV_EndBug> <S2SV_StartBug> const double power_term = MIN ( vp9_convert_qindex_to_q ( q ) * 0.0125 + pt_low , <S2SV_EndBug>
<S2SV_StartBug> tcp_init_send_head ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> return true ; <S2SV_EndBug>
<S2SV_StartBug> parse_input ( conn ) ; <S2SV_EndBug>
<S2SV_StartBug> MATLAB_KO : <S2SV_EndBug>
<S2SV_StartBug> if ( ! bgp_attr_print ( ndo , atype , p , alen ) ) <S2SV_EndBug>
<S2SV_StartBug> ext2_xattr_put_super ( sb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug>
<S2SV_StartBug> sf -> RD = 1 ; <S2SV_EndBug> <S2SV_StartBug> sf -> thresh_mult [ THR_SPLIT3 ] = speed_map ( Speed , thresh_mult_map_split2 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . error_bins , 0 , sizeof ( cpi -> mb . error_bins ) ) ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . quantize_b_pair = vp8_regular_quantize_b_pair ; <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . quantize_b = vp8_fast_quantize_b ; <S2SV_EndBug>
<S2SV_StartBug> char * bufptr ; <S2SV_EndBug>
<S2SV_StartBug> struct r_bin_dyldcache_obj_t * bin ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( bin = malloc ( sizeof ( struct r_bin_dyldcache_obj_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> memset ( bin , 0 , sizeof ( struct r_bin_dyldcache_obj_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_buf_set_bytes ( bin -> b , buf , size ) ) { <S2SV_EndBug>
<S2SV_StartBug> img = ctx -> iface -> dec . get_frame ( ctx -> priv -> alg_priv , iter ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( Offset < ( SizeOfHeader + 8 ) ) goto Error ; <S2SV_EndBug>
<S2SV_StartBug> static u32 ip_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip_idents_hashrnd , sizeof ( ip_idents_hashrnd ) ) ; <S2SV_EndBug> <S2SV_StartBug> hash = jhash_3words ( ( __force u32 ) iph -> daddr , <S2SV_EndBug> <S2SV_StartBug> iph -> protocol ^ net_hash_mix ( net ) , <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> touch_file ( t -> stamp_path , true , t -> last_trigger . realtime , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> skb_dst_force ( skb ) ; <S2SV_EndBug>
<S2SV_StartBug> lua_authz_provider_spec * spec ; <S2SV_EndBug> <S2SV_StartBug> if ( require_line && * require_line ) { <S2SV_EndBug> <S2SV_StartBug> spec -> args = apr_array_make ( cmd -> pool , 2 , sizeof ( const char * ) ) ; <S2SV_EndBug> <S2SV_StartBug> APR_ARRAY_PUSH ( spec -> args , const char * ) = arg ; <S2SV_EndBug> <S2SV_StartBug> * parsed_require_line = spec ; <S2SV_EndBug>
<S2SV_StartBug> len -= cut ; <S2SV_EndBug>
<S2SV_StartBug> authpending_file_descriptor = open ( cfg -> authpending_file , O_RDONLY | O_CREAT , 0664 ) ; <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . lim , block_inside_limit , SIMD_WIDTH ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . mblim , ( 2 * ( lvl + 2 ) + block_inside_limit ) , <S2SV_EndBug>
<S2SV_StartBug> recv ( uipc_main . signal_fds [ 0 ] , & sig_recv , sizeof ( sig_recv ) , MSG_WAITALL ) ; <S2SV_EndBug>
<S2SV_StartBug> ASSERT ( redir_index < IOAPIC_NUM_PINS ) ; <S2SV_EndBug> <S2SV_StartBug> redir_content = ioapic -> redirtbl [ redir_index ] . bits ; <S2SV_EndBug>
<S2SV_StartBug> void <S2SV_EndBug> <S2SV_StartBug> if ( encrypted ) { <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> cib_send_plaintext ( GPOINTER_TO_INT ( session ) , msg ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ps_dec_op = ( ivd_video_decode_op_t * ) pv_api_op ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( int ) val < 0 ) <S2SV_EndBug>
<S2SV_StartBug> } else if ( rsp -> DialectRevision == cpu_to_le16 ( SMB311_PROT_ID ) ) <S2SV_EndBug> <S2SV_StartBug> ses -> server -> ops = & smb311_operations ; <S2SV_EndBug>
<S2SV_StartBug> err = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( report -> id == REPORT_KEY_STATE ) { <S2SV_EndBug>
<S2SV_StartBug> struct rt6_info * rt = ( struct rt6_info * ) dst ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> done : <S2SV_EndBug> <S2SV_StartBug> ctxt -> memopp -> addr . mem . ea += ctxt -> _eip ; <S2SV_EndBug>
<S2SV_StartBug> json_t * object , * foo , * bar , * baz ; <S2SV_EndBug> <S2SV_StartBug> void * iter ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( json_object_iter_key ( iter ) , "a" ) ) <S2SV_EndBug> <S2SV_StartBug> fail ( "iterating<S2SV_blank>failed:<S2SV_blank>wrong<S2SV_blank>value" ) ; <S2SV_EndBug> <S2SV_StartBug> iter = json_object_iter_next ( object , iter ) ; <S2SV_EndBug> <S2SV_StartBug> fail ( "iterating<S2SV_blank>failed:<S2SV_blank>wrong<S2SV_blank>key" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( json_object_iter_value ( iter ) != bar ) <S2SV_EndBug> <S2SV_StartBug> if ( json_object_iter_value ( iter ) != baz ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( serial -> value , priv -> cac_id , priv -> cac_id_len ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < 4 && out -> data [ i ] ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( intr_info & INTR_INFO_INTR_TYPE_MASK ) == INTR_TYPE_NMI_INTR ) <S2SV_EndBug>
<S2SV_StartBug> unsigned char * data ; <S2SV_EndBug> <S2SV_StartBug> data32 = ( uint32_t * ) data ; <S2SV_EndBug> <S2SV_StartBug> data32 [ i ] ^= wsctx -> header . mask . u ; <S2SV_EndBug>
<S2SV_StartBug> return mount_pseudo ( fs_type , "aio:" , NULL , & ops , AIO_RING_MAGIC ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> * dptr ++ = 0xAA ; <S2SV_EndBug>
<S2SV_StartBug> xmep -> proc = EXTRACT_32BITS ( & rp -> rm_call . cb_proc ) ; <S2SV_EndBug>
<S2SV_StartBug> vmcs_write32 ( TPR_THRESHOLD , vmcs12 -> tpr_threshold ) ; <S2SV_EndBug>
<S2SV_StartBug> ! ( e -> ip . flags & IPT_F_GOTO ) ) <S2SV_EndBug> <S2SV_StartBug> e = get_entry ( table_base , v ) ; <S2SV_EndBug>
<S2SV_StartBug> int nNew = pSorter -> nMemory * 2 ; <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> switch ( EXTRACT_16BITS ( bp ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return TEE_SUCCESS ; <S2SV_EndBug>
<S2SV_StartBug> int ret = proc_dointvec ( table , write , buffer , lenp , ppos ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret <= 0 ? ret : - EIO ; <S2SV_EndBug>
<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug>
<S2SV_StartBug> char * identifier ; <S2SV_EndBug> <S2SV_StartBug> return ERROR_INSUFFICIENT_MEMORY ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> r1 . o = function -> return_obj ; <S2SV_EndBug> <S2SV_StartBug> yr_modules_unload_all ( context ) ; <S2SV_EndBug>
<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> ds = salg -> digestsize ; <S2SV_EndBug> <S2SV_StartBug> ss = salg -> statesize ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug>
<S2SV_StartBug> _pam_log ( LOG_DEBUG , "server[%lu]<S2SV_blank>{<S2SV_blank>addr=%s,<S2SV_blank>key=\'%s\'<S2SV_blank>}" , n , tac_ntop ( tac_srv [ n ] . addr -> ai_addr ) , <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( p , vp8_bmode_prob , sizeof ( vp8_bmode_prob ) ) ; <S2SV_EndBug>
<S2SV_StartBug> client -> connectTimeout = DEFAULT_CONNECT_TIMEOUT ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; inpic -> data [ plane ] && plane < 4 ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> map = q -> bufs [ first ] -> map = kmalloc ( sizeof ( struct videobuf_mapping ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> sock -> sk -> sk_uid = iattr -> ia_uid ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct sk_buff * skb ; <S2SV_EndBug> <S2SV_StartBug> ipc . opt = inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt && ipc . opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> faddr = ipc . opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> ( ipc . opt && ipc . opt -> is_strictroute ) ) { <S2SV_EndBug>
<S2SV_StartBug> for ( vma = mm -> mmap ; vma ; vma = vma -> vm_next ) <S2SV_EndBug>
<S2SV_StartBug> ret = ext4_convert_unwritten_extents_endio ( handle , inode , <S2SV_EndBug>
<S2SV_StartBug> if ( mi < 0 ) <S2SV_EndBug> <S2SV_StartBug> idev -> info -> mem [ mi ] . addr >> PAGE_SHIFT , <S2SV_EndBug>
<S2SV_StartBug> mpz_t xdiff , ydiff , lambda ; <S2SV_EndBug> <S2SV_StartBug> mpz_clears ( xdiff , ydiff , lambda , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> char * ext , szName [ 1000 ] , szExt [ 20 ] ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szName , url ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ext && strlen ( ext ) > 1 ) { <S2SV_EndBug>
<S2SV_StartBug> vdev -> ctx = kzalloc ( nvec * sizeof ( struct vfio_pci_irq_ctx ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> int rc = 0 ; <S2SV_EndBug> <S2SV_StartBug> * uaddrlen = sizeof ( sllc ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> if ( atomic_dec_and_test ( & ucounts -> count ) ) { <S2SV_EndBug> <S2SV_StartBug> hlist_del_init ( & ucounts -> node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> data = img -> img_data ; <S2SV_EndBug> <S2SV_StartBug> data + x + y * img -> stride [ VPX_PLANE_ALPHA ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_Y ] = data + x + y * img -> stride [ VPX_PLANE_Y ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_U ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_U ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_V ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_V ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_V ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_V ] ; <S2SV_EndBug> <S2SV_StartBug> img -> planes [ VPX_PLANE_U ] = data <S2SV_EndBug> <S2SV_StartBug> + ( y >> img -> y_chroma_shift ) * img -> stride [ VPX_PLANE_U ] ; <S2SV_EndBug>
<S2SV_StartBug> JAS_DBGLOG ( 101 , ( "jas_realloc<S2SV_blank>called<S2SV_blank>with<S2SV_blank>%x,%zu\\n" , ptr , size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( cm -> fc . mvc , vp8_default_mv_context , sizeof ( vp8_default_mv_context ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int mapping_address = address - mb_mapping -> start_bits ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_BITS < nb ) { <S2SV_EndBug> <S2SV_StartBug> int nb = ( req [ offset + 3 ] << 8 ) + req [ offset + 4 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb ) { <S2SV_EndBug>
<S2SV_StartBug> int ret = 0 , found = 0 ; <S2SV_EndBug> <S2SV_StartBug> repo_config = perf_pathdup ( "config" ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 4 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> bestsad = fn_ptr -> sdf ( what , what_stride , in_what , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( A > skb -> len - sizeof ( struct nlattr ) ) <S2SV_EndBug> <S2SV_StartBug> if ( nla -> nla_len > A - skb -> len ) <S2SV_EndBug>
<S2SV_StartBug> total = le32_to_cpu ( raw_super -> segment_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( f2fs_cp_error ( sbi ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> REQ ( n , suite ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( NCH ( n ) - 1 ) ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> int status = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ALOGV ( "%s<S2SV_blank>context<S2SV_blank>%p" , __func__ , handle ) ; <S2SV_EndBug> <S2SV_StartBug> pthread_mutex_lock ( & vol_listner_init_lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( memcmp ( & ( context -> desc -> uuid ) , & ( recv_contex -> desc -> uuid ) , sizeof ( effect_uuid_t ) ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> && ( context -> session_id == recv_contex -> session_id ) <S2SV_EndBug> <S2SV_StartBug> && ( context -> stream_type == recv_contex -> stream_type ) ) { <S2SV_EndBug> <S2SV_StartBug> list_remove ( & context -> effect_list_node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> w -> linebreak = 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( state -> expr_list . size == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( seq -> size == 1 ) <S2SV_EndBug>
<S2SV_StartBug> if ( vma -> vm_flags & ( VM_DONTEXPAND | VM_PFNMAP ) ) { <S2SV_EndBug>
<S2SV_StartBug> kvm_async_pf_hash_reset ( vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> tfrc . tfrctx_x = hc -> tx_x ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! is_exception ( intr_info ) ) <S2SV_EndBug>
<S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> n ++ ; <S2SV_EndBug>
<S2SV_StartBug> void ext4_xattr_destroy_cache ( struct mb_cache * cache ) <S2SV_EndBug> <S2SV_StartBug> mb_cache_destroy ( cache ) ; <S2SV_EndBug>
<S2SV_StartBug> static bool dump_fd_info ( const char * dest_filename , char * source_filename , int source_base_ofs ) <S2SV_EndBug> <S2SV_StartBug> fclose ( fp ) ; <S2SV_EndBug>
<S2SV_StartBug> u1_nal_unit_type = NAL_UNIT_TYPE ( u1_first_byte ) ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> zval * * tmp ; <S2SV_EndBug> <S2SV_StartBug> efree ( name ) ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mode > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug>
<S2SV_StartBug> uint32_t bcount ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug>
<S2SV_StartBug> static int get_max_filter_level ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( ifa1 = in_dev -> ifa_list ; ifa1 ; ifa1 = ifa1 -> ifa_next ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> sysctl_head_finish ( head ) ; <S2SV_EndBug>
<S2SV_StartBug> char * tmp_str ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> int j = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( j ) { <S2SV_EndBug> <S2SV_StartBug> int j = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ j ] ) <S2SV_EndBug> <S2SV_StartBug> if ( j ) { <S2SV_EndBug> <S2SV_StartBug> while ( tmp_strsize ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> if ( i ) { <S2SV_EndBug> <S2SV_StartBug> while ( tmp_strsize ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp_str [ i ] ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( s = 0 ; s < ns ; s ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( len < 0 || addr . nl_pid ) { <S2SV_EndBug> <S2SV_StartBug> incoming_msg = ( struct nlmsghdr * ) kvp_recv_buffer ; <S2SV_EndBug>
<S2SV_StartBug> int ntlm_read_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> av_assert1 ( avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug>
<S2SV_StartBug> struct in6_addr * saddr = NULL , * final_p , final ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len = ( np -> opt -> opt_flen + <S2SV_EndBug> <S2SV_StartBug> np -> opt -> opt_nflen ) ; <S2SV_EndBug>
<S2SV_StartBug> cpi -> ref_frame_flags = VP8_ALTR_FRAME | VP8_GOLD_FRAME | VP8_LAST_FRAME ; <S2SV_EndBug> <S2SV_StartBug> cpi -> temporal_pattern_counter = 0 ; <S2SV_EndBug> <S2SV_StartBug> cm -> Width = cpi -> oxcf . Width ; <S2SV_EndBug> <S2SV_StartBug> cm -> Height = cpi -> oxcf . Height ; <S2SV_EndBug> <S2SV_StartBug> vp8_denoiser_allocate ( & cpi -> denoiser , width , height ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_SOP ) { <S2SV_EndBug> <S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_EPH ) { <S2SV_EndBug>
<S2SV_StartBug> if ( sum_calculated != headersum ) { <S2SV_EndBug>
<S2SV_StartBug> ( * size ) ++ ; <S2SV_EndBug>
<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_update_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & bss_cfg -> wmm_info , wmm_ie + <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> FILE * file = fopen ( dump_file , "w" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( d_mountpoint ( dentry ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( exp -> ex_flags & NFSEXP_V4ROOT ) ) <S2SV_EndBug> <S2SV_StartBug> return d_inode ( dentry ) != NULL ; <S2SV_EndBug>
<S2SV_StartBug> StringValue ( data ) ; <S2SV_EndBug>
<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug>
<S2SV_StartBug> int pkt_len , pktnum , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , "LEN=%9d" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> phdr -> rec_type = REC_TYPE_PACKET ; <S2SV_EndBug> <S2SV_StartBug> ws_buffer_assure_space ( buf , TOSHIBA_MAX_PACKET_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> long timeo ; <S2SV_EndBug>
<S2SV_StartBug> int nNew = MAX ( 128 , p -> nAlloc * 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_iht16x16_add ( TX_TYPE tx_type , const int16_t * input , uint8_t * dest , <S2SV_EndBug>
<S2SV_StartBug> xfs_daddr_t blkno = map [ 0 ] . bm_bn ; <S2SV_EndBug> <S2SV_StartBug> pag = xfs_perag_get ( btp -> bt_mount , <S2SV_EndBug>
<S2SV_StartBug> fptr_copy = ( struct mrb_io * ) DATA_PTR ( copy ) ; <S2SV_EndBug> <S2SV_StartBug> fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = poll ( pfds , 1 , 50 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct flowi6 * fl6 = & inet -> cork . fl . u . ip6 ; <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug>
<S2SV_StartBug> while ( c && cJSON_strcasecmp ( c -> string , string ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> upperdentry = ovl_dentry_upper ( dentry ) ; <S2SV_EndBug> <S2SV_StartBug> if ( upperdentry ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> if ( rc == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> fdc = FDC ( drive ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fdc != 1 && fdc != 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> # if ! ( CONFIG_FAST_UNALIGNED ) <S2SV_EndBug>
<S2SV_StartBug> spin_lock ( & desc -> iuspin ) ; <S2SV_EndBug> <S2SV_StartBug> desc -> reslength = urb -> actual_length ; <S2SV_EndBug> <S2SV_StartBug> memmove ( desc -> ubuf + desc -> length , desc -> inbuf , desc -> reslength ) ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( int ) kc -> timer_forward ( timr , now ) ; <S2SV_EndBug>
<S2SV_StartBug> av_log ( avctx , AV_LOG_DEBUG , <S2SV_EndBug>
<S2SV_StartBug> struct sshcomp * comp ; <S2SV_EndBug> <S2SV_StartBug> for ( mode = 0 ; mode < MODE_MAX ; mode ++ ) { <S2SV_EndBug> <S2SV_StartBug> ( r = ssh_packet_init_compression ( ssh ) ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> logger ( Protocol , Debug , "rdpdr_process()" ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint32_le ( s , g_client_id ) ; <S2SV_EndBug>
<S2SV_StartBug> static void filter_selectively_vert_row2 ( PLANE_TYPE plane_type , <S2SV_EndBug> <S2SV_StartBug> const int mask_shift = plane_type ? 4 : 8 ; <S2SV_EndBug> <S2SV_StartBug> const int mask_cutoff = plane_type ? 0xf : 0xff ; <S2SV_EndBug> <S2SV_StartBug> const int lfl_forward = plane_type ? 4 : 8 ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_16 ( s + 8 * pitch , pitch , lfi1 -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_8 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4_dual ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_vertical_4 ( s + 8 * pitch + 4 , pitch , lfi1 -> mblim , lfi1 -> lim , <S2SV_EndBug>
<S2SV_StartBug> struct mii_data * miidata = ( struct mii_data * ) & rq -> ifr_ifru ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE : <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 1 : <S2SV_EndBug> <S2SV_StartBug> miidata -> out_value = mii_read ( dev , phy_addr , miidata -> reg_num ) ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 2 : <S2SV_EndBug> <S2SV_StartBug> mii_write ( dev , phy_addr , miidata -> reg_num , miidata -> in_value ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( fread ( buf , 1 , 4 , reader -> fhd ) != 4 || strncmp ( buf , "FHDB" , 4 ) ) { <S2SV_EndBug> <S2SV_StartBug> log ( "%08" PRIX64 "<S2SV_blank>%.4s\\n" , ( uint64_t ) ftell ( reader -> fhd ) - 4 , buf ) ; <S2SV_EndBug> <S2SV_StartBug> return MYSOFA_OK ; <S2SV_EndBug>
<S2SV_StartBug> rhost_old [ 0 ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> _PyMemoTable_ResizeTable ( PyMemoTable * self , Py_ssize_t min_size ) <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t new_size = MT_MINSIZE ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t to_process ; <S2SV_EndBug> <S2SV_StartBug> while ( new_size < min_size && new_size > 0 ) <S2SV_EndBug>
<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache ( ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s" , path , <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> gdImageWBMPCtx ( im , fg , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug>
<S2SV_StartBug> parameters -> res_spec = parameters -> numresolution - 1 ; <S2SV_EndBug> <S2SV_StartBug> parameters -> prch_init [ i ] = 256 ; <S2SV_EndBug>
<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> status = usb_ep_queue ( hidg -> in_ep , req , GFP_ATOMIC ) ; <S2SV_EndBug> <S2SV_StartBug> goto release_write_pending_unlocked ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & hidg -> write_spinlock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> release_write_pending_unlocked : <S2SV_EndBug>
<S2SV_StartBug> struct usmStateReference * old_ref = ( struct usmStateReference * ) old ; <S2SV_EndBug> <S2SV_StartBug> if ( old_ref ) { <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_engine_id_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_auth_protocol_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_priv_protocol_length ) <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_auth_key_length && old_ref -> usr_auth_key ) { <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref -> usr_auth_key , old_ref -> usr_auth_key_length ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_FREE ( old_ref -> usr_auth_key ) ; <S2SV_EndBug> <S2SV_StartBug> if ( old_ref -> usr_priv_key_length && old_ref -> usr_priv_key ) { <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref -> usr_priv_key , old_ref -> usr_priv_key_length ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_FREE ( old_ref -> usr_priv_key ) ; <S2SV_EndBug> <S2SV_StartBug> SNMP_ZERO ( old_ref , sizeof ( * old_ref ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( status ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) { <S2SV_EndBug> <S2SV_StartBug> urb -> actual_length - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> void ptrace_triggered ( struct perf_event * bp , int nmi , <S2SV_EndBug>
<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug>
<S2SV_StartBug> static void save_context ( VP9_COMP * cpi , int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> const MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( sa , xd -> above_seg_context + mi_col , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( sl , xd -> left_seg_context + ( mi_row & MI_MASK ) , <S2SV_EndBug>
<S2SV_StartBug> int blockstodecode ; <S2SV_EndBug> <S2SV_StartBug> if ( ! nblocks || nblocks > INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> av_fast_malloc ( & s -> decoded_buffer , & s -> decoded_size , <S2SV_EndBug> <S2SV_StartBug> 2 * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_EndBug> <S2SV_StartBug> f -> colorspace = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( f -> version > 0 ) <S2SV_EndBug> <S2SV_StartBug> f -> avctx -> bits_per_raw_sample = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chroma_planes != f -> chroma_planes <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> frame_end : <S2SV_EndBug>
<S2SV_StartBug> sas_port_delete ( port -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> ( ( YR_OBJECT_INTEGER * ) copy ) -> value = UNDEFINED ; <S2SV_EndBug> <S2SV_StartBug> ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! vct_iscrlf ( * r ) ) { <S2SV_EndBug>
<S2SV_StartBug> unsigned int random_variable = 0 ; <S2SV_EndBug> <S2SV_StartBug> random_variable = get_random_int ( ) & STACK_RND_MASK ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> spin_lock ( & inode -> i_lock ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( inode -> i_mapping , ( chg - freed ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( keyring_key -> type != & key_type_logon ) { <S2SV_EndBug> <S2SV_StartBug> down_read ( & keyring_key -> sem ) ; <S2SV_EndBug> <S2SV_StartBug> ukp = user_key_payload ( keyring_key ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( res , dbg_data , nb10sz ) ; <S2SV_EndBug>
<S2SV_StartBug> int need_error_free = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( inbuf . data , sendauth_version ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( appl_version && strcmp ( inbuf . data , appl_version ) ) { <S2SV_EndBug>
<S2SV_StartBug> list = lptr = ( nodeitem * ) palloc ( sizeof ( nodeitem ) * ( num + 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> hwc -> event_base = MSR_ARCH_PERFMON_FIXED_CTR0 ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug>
<S2SV_StartBug> if ( msg -> maxsize - msg -> cursize < 4 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bits == 8 ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetTransmit ( & msgHuff . compressor , ( value & 0xff ) , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> && ( NULL != ptr -> line ) <S2SV_EndBug> <S2SV_StartBug> && ( ( '+' != ptr -> line [ 0 ] ) <S2SV_EndBug> <S2SV_StartBug> && ( '-' != ptr -> line [ 0 ] ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( NULL != ptr ) && ( NULL != ptr -> line ) ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( temp_area + i * dest_pitch , temp_area + ( i - 1 ) * dest_pitch , dest_pitch ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_pitch ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ack -> subh . addip_hdr -> serial == serial ) { <S2SV_EndBug>
<S2SV_StartBug> if ( IS_ERR ( blkg ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mptctl_do_fw_download ( int ioc , char __user * ufwbuf , size_t fwlen ) <S2SV_EndBug> <S2SV_StartBug> MPT_FRAME_HDR * mf ; <S2SV_EndBug> <S2SV_StartBug> if ( mpt_verify_adapter ( ioc , & iocp ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> iocp -> name , ( int ) fwlen ) ) ; <S2SV_EndBug>
<S2SV_StartBug> skb -> sk = sk ; <S2SV_EndBug>
<S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_CORRUPT_FRAME ; <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . number_of_layers > 1 ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < cpi -> oxcf . number_of_layers ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> layer = cpi -> oxcf . layer_id [ <S2SV_EndBug> <S2SV_StartBug> cpi -> temporal_pattern_counter % cpi -> oxcf . periodicity ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cm -> fc , & cm -> lfc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_a , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_g , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & cpi -> lfc_n , & cm -> fc , sizeof ( cm -> fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> int y_samples = orig -> y_height * orig -> y_width ; <S2SV_EndBug> <S2SV_StartBug> int uv_samples = orig -> uv_height * orig -> uv_width ; <S2SV_EndBug> <S2SV_StartBug> double sq_error , sq_error2 ; <S2SV_EndBug> <S2SV_StartBug> recon -> y_buffer , recon -> y_stride , orig -> y_width , orig -> y_height ) ; <S2SV_EndBug> <S2SV_StartBug> ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , <S2SV_EndBug> <S2SV_StartBug> recon -> u_buffer , recon -> uv_stride , orig -> uv_width , orig -> uv_height ) ; <S2SV_EndBug> <S2SV_StartBug> double frame_psnr2 , frame_ssim2 = 0 ; <S2SV_EndBug> <S2SV_StartBug> pp -> y_buffer , pp -> y_stride , orig -> y_width , orig -> y_height ) ; <S2SV_EndBug> <S2SV_StartBug> ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , <S2SV_EndBug> <S2SV_StartBug> pp -> u_buffer , pp -> uv_stride , orig -> uv_width , orig -> uv_height ) ; <S2SV_EndBug> <S2SV_StartBug> frame_ssim2 = vp8_calc_ssim ( cpi -> Source , <S2SV_EndBug> <S2SV_StartBug> & cm -> post_proc_buffer , 1 , & weight ) ; <S2SV_EndBug> <S2SV_StartBug> frame_all = vp8_calc_ssimg ( cpi -> Source , cm -> frame_to_show , <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug>
<S2SV_StartBug> "InvalidGeometry" , "`%s\'" , option ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! memcmp ( data -> schemadata + data -> schemata [ cid ] , schema , len * sizeof ( Id ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! memcmp ( data -> schemadata + data -> schemata [ cid ] , schema , len * sizeof ( Id ) ) ) <S2SV_EndBug>
<S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct efx_nic * efx = netdev_priv ( net_dev ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ring -> rx_pending < EFX_MIN_RING_SIZE || <S2SV_EndBug> <S2SV_StartBug> "TX<S2SV_blank>and<S2SV_blank>RX<S2SV_blank>queues<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>smaller<S2SV_blank>than<S2SV_blank>%ld\\n" , <S2SV_EndBug> <S2SV_StartBug> return efx_realloc_channels ( efx , ring -> rx_pending , ring -> tx_pending ) ; <S2SV_EndBug>
<S2SV_StartBug> bitmap_zero ( ioapic -> rtc_status . dest_map . map , KVM_MAX_VCPUS ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( header_len > LEVEL_3_MAX_HEADER_LEN ) { <S2SV_EndBug>
<S2SV_StartBug> image -> columns = image -> rows = 0 ; <S2SV_EndBug> <S2SV_StartBug> BImgBuff = ( unsigned char * ) RelinquishMagickMemory ( BImgBuff ) ; ; <S2SV_EndBug>
<S2SV_StartBug> void f2fs_wait_discard_bios ( struct f2fs_sb_info * sbi ) <S2SV_EndBug> <S2SV_StartBug> __wait_discard_cmd ( sbi , false ) ; <S2SV_EndBug>
<S2SV_StartBug> dprintk ( "%s:<S2SV_blank>write<S2SV_blank>%Zd<S2SV_blank>bytes\\n" , bd -> name , count ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( check_stack_guard_page ( vma , address ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! mm ) <S2SV_EndBug>
<S2SV_StartBug> static void buffer_pipe_buf_get ( struct pipe_inode_info * pipe , <S2SV_EndBug> <S2SV_StartBug> ref -> ref ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> cork -> length += length ; <S2SV_EndBug> <S2SV_StartBug> if ( length > mtu ) { <S2SV_EndBug> <S2SV_StartBug> if ( dontfrag && ( proto == IPPROTO_UDP || proto == IPPROTO_RAW ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( proto == IPPROTO_UDP && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> INST_HANDLER ( sts ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( image_info -> ping != MagickFalse ) && ( image_info -> number_scenes != 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> return kvm_x86_ops -> set_msr ( vcpu , msr ) ; <S2SV_EndBug>
<S2SV_StartBug> char file [ PATH_MAX ] ; <S2SV_EndBug> <S2SV_StartBug> while ( fscanf ( maps , "%*x-%*x<S2SV_blank>%*s<S2SV_blank>%zx<S2SV_blank>%s<S2SV_blank>%ld<S2SV_blank>%s\\n" , & offset , device , & inode , <S2SV_EndBug>
<S2SV_StartBug> int is_pdf ; <S2SV_EndBug> <S2SV_StartBug> header = get_header ( fp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( header && strstr ( header , "%PDF-" ) ) <S2SV_EndBug>
<S2SV_StartBug> uint dblocks = XFS_B_TO_FSB ( mp , valuelen ) ; <S2SV_EndBug>
<S2SV_StartBug> archive_check_magic ( & a -> archive , ARCHIVE_WRITE_MAGIC , <S2SV_EndBug> <S2SV_StartBug> ARCHIVE_STATE_DATA , "archive_write_data" ) ; <S2SV_EndBug>
<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug>
<S2SV_StartBug> if ( PyArena_AddPyObject ( c -> c_arena , str ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( error_code >> 16 ) != 0x8009 ) <S2SV_EndBug> <S2SV_StartBug> return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; <S2SV_EndBug>
<S2SV_StartBug> if ( perf_event_overflow ( event , 1 , & data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> int_fb_list -> int_fb [ i ] . size = min_size ; <S2SV_EndBug>
<S2SV_StartBug> box -> info = boxinfo ; <S2SV_EndBug> <S2SV_StartBug> box -> ops = & jp2_boxinfo_unk . ops ; <S2SV_EndBug> <S2SV_StartBug> jas_stream_rewind ( tmpstream ) ; <S2SV_EndBug>
<S2SV_StartBug> __evtchn_fifo_handle_events ( cpu , true ) ; <S2SV_EndBug>
<S2SV_StartBug> ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; <S2SV_EndBug>
<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if <S2SV_EndBug>
<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> set_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ; <S2SV_EndBug>
<S2SV_StartBug> const int sb_cols = mi_cols_aligned_to_sb ( mi_cols ) >> MI_BLOCK_SIZE_LOG2 ; <S2SV_EndBug> <S2SV_StartBug> int min_log2 = 0 , max_log2 = 0 ; <S2SV_EndBug> <S2SV_StartBug> * min_log2_tile_cols = min_log2 ; <S2SV_EndBug> <S2SV_StartBug> * max_log2_tile_cols = max_log2 ; <S2SV_EndBug>
<S2SV_StartBug> if ( vp9_segfeature_active ( seg , seg_id , SEG_LVL_ALT_LF ) ) { <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_get_segdata ( seg , seg_id , SEG_LVL_ALT_LF ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( lfi -> lvl [ seg_id ] , lvl_seg , sizeof ( lfi -> lvl [ seg_id ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> dev_net_set ( dev , net ) ; <S2SV_EndBug>
<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> dst . val , ctxt -> op_bytes ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> size = INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> if ( attr >= 0 ) { <S2SV_EndBug>
<S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> src_devid , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( rsa = RSA_new ( ) ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> if ( header_len > LEVEL_3_MAX_HEADER_LEN ) { <S2SV_EndBug>
<S2SV_StartBug> crypto_free_skcipher ( private ) ; <S2SV_EndBug>
<S2SV_StartBug> static void restore_context ( VP9_COMP * cpi , int mi_row , int mi_col , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( xd -> above_seg_context + mi_col , sa , <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( xd -> left_seg_context + ( mi_row & MI_MASK ) , sl , <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( dp [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> dp += 3 ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( name == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> pfkey_broadcast ( skb_out , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( dev -> lintr . pin > 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> "InvalidGeometry" , "`%s\'" , option ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "who-has<S2SV_blank>%s" , ipaddr_string ( ndo , ATMTPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "tell<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>is-at<S2SV_blank>" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "at<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "for<S2SV_blank>%s" , ipaddr_string ( ndo , ATMSPA ( ap ) ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ext_dp -> icmp_length ) { <S2SV_EndBug> <S2SV_StartBug> vec [ 0 ] . ptr = ( const uint8_t * ) ( const void * ) & ext_dp -> icmp_ext_version_res ; <S2SV_EndBug> <S2SV_StartBug> hlen -= 4 ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * component ) <S2SV_EndBug> <S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> usleep ( us_delay ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> struct frag_hdr fhdr ; <S2SV_EndBug> <S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( & sk -> sk_write_queue , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0xc0 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> if ( dp -> icmp6_data16 [ 1 ] & 0x40 ) <S2SV_EndBug>
<S2SV_StartBug> PureFileInfo * r ; <S2SV_EndBug> <S2SV_StartBug> while ( opt_R && r != s ) { <S2SV_EndBug> <S2SV_StartBug> char * alloca_subdir ; <S2SV_EndBug> <S2SV_StartBug> ALLOCA_FREE ( alloca_subdir ) ; <S2SV_EndBug> <S2SV_StartBug> free ( names ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( getenv_int ( "STRIP" ) ) { <S2SV_EndBug>
<S2SV_StartBug> oe_errno = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! sock ) <S2SV_EndBug> <S2SV_StartBug> if ( addrlen ) <S2SV_EndBug> <S2SV_StartBug> ( struct oe_sockaddr * ) addr , <S2SV_EndBug> <S2SV_StartBug> addrlen ) != OE_OK ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> u32 mode = ( * ( u32 * ) valp ) & PSR_AA32_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> case PSR_AA32_MODE_FIQ : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL0t : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL1h : <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = scm -> fp -> count - 1 ; i >= 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_sock_count ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> register const u_char * ep ; <S2SV_EndBug> <S2SV_StartBug> ep = ( const u_char * ) ndo -> ndo_snapend ; <S2SV_EndBug> <S2SV_StartBug> if ( ndo -> ndo_vflag ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( offset != 0 ) <S2SV_EndBug> <S2SV_StartBug> csum_partial ( skb_transport_header ( skb ) + tlen , <S2SV_EndBug> <S2SV_StartBug> offset , 0 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> int max_bytes_matched = input_size ; <S2SV_EndBug>
<S2SV_StartBug> set_string ( "foo" , module_object , "string_array[%i]" , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> file = kmalloc ( sizeof ( * file ) , GFP_NOIO ) ; <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> if ( strcmp ( user_password , ( char * ) crypt ( password , user_password ) ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( atomic_dec_and_test ( & ucounts -> count ) ) { <S2SV_EndBug> <S2SV_StartBug> hlist_del_init ( & ucounts -> node ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> length += len ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( flags & 0x01 ) && ! ( flags & 0x02 ) ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> free ( mem ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> size_t pos = luaL_optinteger ( L , 3 , 1 ) - 1 ; <S2SV_EndBug> <S2SV_StartBug> luaL_argcheck ( L , pos + size <= ld , 2 , "data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( send ( common -> ctrl_fd , & cmd , 1 , MSG_NOSIGNAL ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> bin -> dyld_info = malloc ( sizeof ( struct dyld_info_command ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( off + sizeof ( struct dyld_info_command ) > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> free ( bin -> dyld_info ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , ".txt" ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> unix_state_double_unlock ( sk , other ) ; <S2SV_EndBug>
<S2SV_StartBug> void Huff_offsetReceive ( node_t * node , int * ch , byte * fin , int * offset ) { <S2SV_EndBug> <S2SV_StartBug> while ( node && node -> symbol == INTERNAL_NODE ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! ctx -> established ) { <S2SV_EndBug>
<S2SV_StartBug> if ( enable_apicv ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> state -> frame [ 0 ] = kzalloc ( sizeof ( struct bpf_func_state ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>safe\\n" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug> <S2SV_StartBug> verbose ( env , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d:" , <S2SV_EndBug> <S2SV_StartBug> env -> prev_insn_idx , env -> insn_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( in ) { <S2SV_EndBug> <S2SV_StartBug> dev -> out_pipe = usb_sndbulkpipe ( udev , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug> <S2SV_StartBug> VM_SHARED | VM_MAYSHARE | <S2SV_EndBug>
<S2SV_StartBug> ops -> destroy ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! flatpak_bwrap_bundle_args ( bwrap , 1 , - 1 , FALSE , error ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! g_spawn_async ( NULL , <S2SV_EndBug> <S2SV_StartBug> if ( execvpe ( flatpak_get_bwrap ( ) , ( char * * ) bwrap -> argv -> pdata , bwrap -> envp ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> record_and_restart ( event , val , regs , nmi ) ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8_get_last_ref_updates ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! new_buffer ) <S2SV_EndBug> <S2SV_StartBug> return AVERROR ( ENOMEM ) ; <S2SV_EndBug>
<S2SV_StartBug> struct fsnotify_group * group ; <S2SV_EndBug> <S2SV_StartBug> user = get_current_user ( ) ; <S2SV_EndBug> <S2SV_StartBug> group = inotify_new_group ( user , inotify_max_queued_events ) ; <S2SV_EndBug> <S2SV_StartBug> if ( IS_ERR ( group ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = PTR_ERR ( group ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret >= 0 ) <S2SV_EndBug> <S2SV_StartBug> fsnotify_put_group ( group ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_writer * w , TOKENEXTRA * * tok , TOKENEXTRA * tok_end , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> set_mi_row_col ( xd , tile , <S2SV_EndBug> <S2SV_StartBug> write_mb_modes_kf ( cpi , xd -> mi , w ) ; <S2SV_EndBug> <S2SV_StartBug> pack_mb_tokens ( w , tok , tok_end ) ; <S2SV_EndBug>
<S2SV_StartBug> mlx4_dbg ( dev , "Free<S2SV_blank>MAC<S2SV_blank>index<S2SV_blank>is<S2SV_blank>%d\\n" , free ) ; <S2SV_EndBug>
<S2SV_StartBug> aof_fsync ( server . appendfd ) ; <S2SV_EndBug>
<S2SV_StartBug> byte readBuffer [ TC_SECTOR_SIZE_BIOS ] ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> offset . QuadPart = 0 ; <S2SV_EndBug> <S2SV_StartBug> sizeof ( readBuffer ) , <S2SV_EndBug> <S2SV_StartBug> if ( NT_SUCCESS ( ntStatus ) ) <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Status = ntStatus ; <S2SV_EndBug> <S2SV_StartBug> Irp -> IoStatus . Information = 0 ; <S2SV_EndBug>
<S2SV_StartBug> fh32 [ 2 ] = inode -> i_generation ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> daddr = inet -> inet_daddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) <S2SV_EndBug>
<S2SV_StartBug> static inline void mcryptd_check_internal ( struct rtattr * * tb , u32 * type , <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> type & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> mask & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug>
<S2SV_StartBug> priv = kzalloc ( sizeof ( struct cypress_private ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> int yy , mm , dd , hr , min , sec , csec ; <S2SV_EndBug> <S2SV_StartBug> "%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]" , <S2SV_EndBug> <S2SV_StartBug> "%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9u,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]" , <S2SV_EndBug> <S2SV_StartBug> yy = mm = dd = hr = min = sec = csec = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( dp -> ip6f_offlg ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "seq<S2SV_blank>0x%03x,<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>length<S2SV_blank>%u" , <S2SV_EndBug>
<S2SV_StartBug> return vp8_get4x4sse_cs ( sptr , be -> src_stride , dptr , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug>
<S2SV_StartBug> if ( keyring ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug>
<S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug> <S2SV_StartBug> err = ext4_split_extent_at ( handle , inode , path , <S2SV_EndBug> <S2SV_StartBug> split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ? <S2SV_EndBug>
<S2SV_StartBug> user = key_user_lookup ( current_fsuid ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> BIO * cmsbio = NULL , * tmpin = NULL ; <S2SV_EndBug> <S2SV_StartBug> cmsbio = CMS_dataInit ( cms , tmpin ) ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( dcont && ( tmpin == dcont ) ) <S2SV_EndBug> <S2SV_StartBug> if ( cms_certs ) <S2SV_EndBug>
<S2SV_StartBug> __ip_vs_get_timeouts ( net , & t ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cfg -> g_w != ctx -> cfg . g_w || cfg -> g_h != ctx -> cfg . g_h ) <S2SV_EndBug> <S2SV_StartBug> ERROR ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_change_config ( ctx -> cpi , & ctx -> oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> fp -> protocol = altsd -> bInterfaceProtocol ; <S2SV_EndBug>
<S2SV_StartBug> if ( pkt == NULL ) <S2SV_EndBug>
<S2SV_StartBug> int err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug>
<S2SV_StartBug> while ( c ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> time_t then ; <S2SV_EndBug>
<S2SV_StartBug> xmlNode * <S2SV_EndBug> <S2SV_StartBug> crm_recv_remote_msg ( void * session , gboolean encrypted ) <S2SV_EndBug> <S2SV_StartBug> xmlNode * xml = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( encrypted ) { <S2SV_EndBug>
<S2SV_StartBug> int r , len , group = 0 ; <S2SV_EndBug> <S2SV_StartBug> Node * * tp ; <S2SV_EndBug> <S2SV_StartBug> goto end_of_token ; <S2SV_EndBug> <S2SV_StartBug> qn = node_new_quantifier ( tok -> u . repeat . lower , tok -> u . repeat . upper , <S2SV_EndBug>
<S2SV_StartBug> if ( ! ND_TTEST2 ( * ar_tpa ( ap ) , PROTO_LEN ( ap ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "who-has<S2SV_blank>%s" , ipaddr_string ( ndo , TPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>tell<S2SV_blank>%s" , ipaddr_string ( ndo , SPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>is-at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! EXT4_SB ( inode -> i_sb ) -> s_journal ) <S2SV_EndBug>
<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! proc_parse_options ( options , ns ) ) { <S2SV_EndBug>
<S2SV_StartBug> SSL_USE_ETM ( s ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug>
<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> static bool tailmatch ( const char * little , const char * bigone ) <S2SV_EndBug> <S2SV_StartBug> size_t littlelen = strlen ( little ) ; <S2SV_EndBug> <S2SV_StartBug> size_t biglen = strlen ( bigone ) ; <S2SV_EndBug> <S2SV_StartBug> if ( littlelen > biglen ) <S2SV_EndBug> <S2SV_StartBug> return Curl_raw_equal ( little , bigone + biglen - littlelen ) ? TRUE : FALSE ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( i = scm -> fp -> count - 1 ; i >= 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( unix_sock_count ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( user -> uid_keyring ) { <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; mechbuf [ i ] ; i ++ ) mechbuf [ i ] = tolower ( mechbuf [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static void __evtchn_fifo_handle_events ( unsigned cpu , bool drop ) <S2SV_EndBug> <S2SV_StartBug> consume_one_event ( cpu , control_block , q , & ready , drop ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( spwd && spwd -> sp_expire > 0 && <S2SV_EndBug> <S2SV_StartBug> ( request -> timestamp / 86400 ) > spwd -> sp_expire ) { <S2SV_EndBug> <S2SV_StartBug> radlog_request ( L_AUTH , 0 , request , "[%s]:<S2SV_blank>password<S2SV_blank>has<S2SV_blank>expired" , name ) ; <S2SV_EndBug>
<S2SV_StartBug> dev -> netdev_ops = & ieee80211_dataif_ops ; <S2SV_EndBug>
<S2SV_StartBug> case 'l' : RBININFO ( "libs" , R_CORE_BIN_ACC_LIBS , NULL , obj ? r_list_length ( obj -> libs ) : 0 ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case 'i' : RBININFO ( "imports" , R_CORE_BIN_ACC_IMPORTS , NULL , obj ? r_list_length ( obj -> imports ) : 0 ) ; break ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>Sel:<S2SV_blank>%d" , <S2SV_EndBug> <S2SV_StartBug> tval >> 5 , ( tval >> 3 ) & 0x03 , ( tval & 0x07 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> futex_wait_queue_me ( hb , & q , to ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( e -> target_offset == sizeof ( struct ipt_entry ) && <S2SV_EndBug> <S2SV_StartBug> t -> verdict < 0 && unconditional ( & e -> ip ) ) || <S2SV_EndBug>
<S2SV_StartBug> struct { <S2SV_EndBug> <S2SV_StartBug> if ( ip_options_echo ( & replyopts . opt , skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( replyopts . opt . optlen ) { <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> daddr = replyopts . opt . faddr ; <S2SV_EndBug>
<S2SV_StartBug> struct svc_rqst * rqstp = vrqstp ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> ( ep < ep2 ) ? ep : ep2 , map , nmap ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 94 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 95 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 96 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 97 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 100 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 99 "hex_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 98 "hex_grammar.y" <S2SV_EndBug>
<S2SV_StartBug> pch -> chan_net = net ; <S2SV_EndBug>
<S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( metrics . width + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> columns = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( metrics . ascent - metrics . descent + <S2SV_EndBug> <S2SV_StartBug> image -> rows = ( size_t ) ( draw_info -> pointsize + draw_info -> stroke_width + 0.5 ) ; <S2SV_EndBug>
<S2SV_StartBug> offset = saio -> offsets [ 0 ] + moof_offset ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < gf_list_count ( traf -> sai_sizes ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int target = rc -> av_per_frame_bandwidth ; <S2SV_EndBug> <S2SV_StartBug> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || <S2SV_EndBug> <S2SV_StartBug> cpi -> key_frame_frequency == 0 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> pass == 0 && cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) { <S2SV_EndBug>
<S2SV_StartBug> if ( used_address && used_address -> name_len == msg_sys -> msg_namelen && <S2SV_EndBug> <S2SV_StartBug> ! memcmp ( & used_address -> name , msg -> msg_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & used_address -> name , msg -> msg_name , <S2SV_EndBug>
<S2SV_StartBug> static void read_mv_probs ( nmv_context * ctx , int allow_hp , vp9_reader * r ) { <S2SV_EndBug>
<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num , state . sumlen ) ; <S2SV_EndBug>
<S2SV_StartBug> send ( uipc_main . signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> * ( buf + insertpos ) = x2c ( & buf [ editpos + 3 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> static void nonrd_pick_partition ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int mi_col , BLOCK_SIZE bsize , int * rate , <S2SV_EndBug> <S2SV_StartBug> int64_t * dist , int do_recon , int64_t best_rd ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> PICK_MODE_CONTEXT * ctx = get_block_context ( x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE subsize ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> x -> in_active_map = check_active_map ( cpi , x , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> partition_none_allowed &= ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize >= cpi -> sf . min_partition_size ) ; <S2SV_EndBug> <S2SV_StartBug> partition_horz_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize > cpi -> sf . min_partition_size ) || <S2SV_EndBug> <S2SV_StartBug> partition_vert_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> bsize > cpi -> sf . min_partition_size ) || <S2SV_EndBug> <S2SV_StartBug> do_split &= bsize > cpi -> sf . min_partition_size ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map && ( partition_horz_allowed || partition_vert_allowed ) ) <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate != INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_NONE ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , this_rate , this_dist ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t stop_thresh = 4096 ; <S2SV_EndBug> <S2SV_StartBug> stop_thresh_rd = RDCOST ( x -> rdmult , x -> rddiv , 0 , stop_thresh ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> e_mbd . lossless && best_rd < stop_thresh_rd ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map ) { <S2SV_EndBug> <S2SV_StartBug> sum_rate += x -> partition_cost [ pl ] [ PARTITION_SPLIT ] ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 && sum_rd < best_rd ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = i ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_partition ( cpi , tile , tp , mi_row + y_idx , mi_col + x_idx , <S2SV_EndBug> <S2SV_StartBug> subsize , & this_rate , & this_dist , 0 , <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . less_rectangular_check ) <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row + ms , mi_col , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_HORZ ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 1 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col + ms , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rate == INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_VERT ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rate == INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rate < INT_MAX && best_dist < INT64_MAX && do_recon ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == COMPLEXITY_AQ ) && cm -> seg . update_map ) { <S2SV_EndBug> <S2SV_StartBug> best_rate ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize == BLOCK_64X64 ) { <S2SV_EndBug> <S2SV_StartBug> assert ( best_rate < INT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( best_dist < INT64_MAX ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ND_TTEST2 ( * tptr , 1 ) ) <S2SV_EndBug>
<S2SV_StartBug> static int scsi_disk_emulate_command ( SCSIDiskReq * r , uint8_t * outbuf ) <S2SV_EndBug>
<S2SV_StartBug> __enable_irq ( ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t val_len ; <S2SV_EndBug>
<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug>
<S2SV_StartBug> addr -> sap_family = AF_ATMPVC ; <S2SV_EndBug>
<S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> long elements ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> token ++ ; <S2SV_EndBug>
<S2SV_StartBug> void impeg2d_dec_p_mb_params ( dec_state_t * ps_dec ) <S2SV_EndBug> <S2SV_StartBug> ps_dec_mb_params -> pf_func_mb_params ( ps_dec ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int row8x8_remaining = tile -> mi_row_end - mi_row ; <S2SV_EndBug> <S2SV_StartBug> int col8x8_remaining = tile -> mi_col_end - mi_col ; <S2SV_EndBug> <S2SV_StartBug> for ( block_row = 0 ; block_row < MI_BLOCK_SIZE ; block_row += bh ) { <S2SV_EndBug>
<S2SV_StartBug> if ( info . si_code >= 0 ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug>
<S2SV_StartBug> else if ( verify & GNUTLS_CERT_INVALID ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return ! inode_capable ( inode , CAP_FOWNER ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( opt_len != mp_dss_len ( mdss , 1 ) && <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_A ) { <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_a ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_m ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len<S2SV_blank>%u" , EXTRACT_16BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len == mp_dss_len ( mdss , 1 ) ) <S2SV_EndBug>
<S2SV_StartBug> fprintf ( fpfile , "%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.0f<S2SV_blank>%12.4f<S2SV_blank>%12.4f" <S2SV_EndBug> <S2SV_StartBug> stats -> intra_error , <S2SV_EndBug> <S2SV_StartBug> stats -> ssim_weighted_pred_err , <S2SV_EndBug> <S2SV_StartBug> stats -> pcnt_neutral , <S2SV_EndBug>
<S2SV_StartBug> int_fb -> in_use = 0 ; <S2SV_EndBug>
<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( skb_headlen ( chunk -> skb ) < sizeof ( sctp_chunkhdr_t ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( chunk -> chunk_end < skb_tail_pointer ( chunk -> skb ) ) { <S2SV_EndBug> <S2SV_StartBug> sctp_chunk_free ( chunk ) ; <S2SV_EndBug>
<S2SV_StartBug> err = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> ds = salg -> digestsize ; <S2SV_EndBug> <S2SV_StartBug> ss = salg -> statesize ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc32 ( tif , cp0 , cc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( atomic_read ( & kvm -> online_vcpus ) == KVM_MAX_VCPUS ) { <S2SV_EndBug>
<S2SV_StartBug> struct cred * cred ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cred ) <S2SV_EndBug> <S2SV_StartBug> return create_user_ns ( cred ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( peer ) { <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 60 && rdesc [ 39 ] == 0x2a && rdesc [ 40 ] == 0xf5 && <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> nexthop = inet -> opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( ! inet -> opt || ! inet -> opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt ) <S2SV_EndBug>
<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_tsk_need_resched ( rq -> curr ) ) <S2SV_EndBug>
<S2SV_StartBug> dh_clnt = EVP_PKEY_get0_DH ( ckey ) ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug>
<S2SV_StartBug> int offs , int count , int pmgr_flag ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & ( ( char * ) & sysex ) [ offs ] , & ( addr ) [ offs ] , hdr_size - offs ) ) <S2SV_EndBug> <S2SV_StartBug> if ( count < sysex . len ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> mk_vhost_close ( sr ) ; <S2SV_EndBug>
<S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> int chars_processed ; <S2SV_EndBug> <S2SV_StartBug> int data_size = ndo -> ndo_snapend - bp ; <S2SV_EndBug> <S2SV_StartBug> chars_processed = 1 ; <S2SV_EndBug> <S2SV_StartBug> cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug> <S2SV_StartBug> chars_processed += l ; <S2SV_EndBug> <S2SV_StartBug> chars_processed ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! valid_localpart ( maddr -> user ) || <S2SV_EndBug> <S2SV_StartBug> ! valid_domainpart ( maddr -> domain ) ) { <S2SV_EndBug>
<S2SV_StartBug> return send ( socket -> fd , buf , count , MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> static int input_stats ( struct twopass_rc * p , FIRSTPASS_STATS * fps ) { <S2SV_EndBug>
<S2SV_StartBug> # ifdef CONFIG_SWAP <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug> <S2SV_StartBug> * prev = vma ; <S2SV_EndBug>
<S2SV_StartBug> if ( image -> debug != MagickFalse ) <S2SV_EndBug>
<S2SV_StartBug> struct static_key * done_key ) <S2SV_EndBug> <S2SV_StartBug> __net_random_once_disable_jump ( done_key ) ; <S2SV_EndBug>

<S2SV_StartBug> unsigned int var = block_variance ( cpi , x , bs ) ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t ctrl_set_svc_layer_id ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> srose -> srose_family = AF_ROSE ; <S2SV_EndBug>
<S2SV_StartBug> static int ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options ) <S2SV_EndBug> <S2SV_StartBug> if ( ! options ) { <S2SV_EndBug> <S2SV_StartBug> case ecryptfs_opt_err : <S2SV_EndBug>
<S2SV_StartBug> cJSON_AddFloatToObject ( j , "cpu_util_total" , test -> cpu_util [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j , "cpu_util_user" , test -> cpu_util [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j , "cpu_util_system" , test -> cpu_util [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j , "sender_has_retransmits" , sender_has_retransmits ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , "id" , sp -> id ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , "bytes" , bytes_transferred ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , "retransmits" , retransmits ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddFloatToObject ( j_stream , "jitter" , sp -> jitter ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , "errors" , sp -> cnt_error ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j_stream , "packets" , sp -> packet_count ) ; <S2SV_EndBug>
<S2SV_StartBug> memset ( & rinfo [ val ] , 0 , SZ_SG_REQ_INFO ) ; <S2SV_EndBug>
<S2SV_StartBug> u32 mode = ( * ( u32 * ) valp ) & PSR_AA32_MODE_MASK ; <S2SV_EndBug> <S2SV_StartBug> case PSR_AA32_MODE_FIQ : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL0t : <S2SV_EndBug> <S2SV_StartBug> case PSR_MODE_EL1h : <S2SV_EndBug>
<S2SV_StartBug> int64_t tx_cache [ TX_MODES ] , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE mode ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> intra_super_block_yrd ( cpi , x , & this_rate_tokenonly , & this_distortion , <S2SV_EndBug> <S2SV_StartBug> & s , NULL , bsize , local_tx_cache , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . tx_size_search_method == USE_FULL_RD && this_rd < INT64_MAX ) { <S2SV_EndBug>
<S2SV_StartBug> CurrentColorSpace = ColorSpaceOut ; <S2SV_EndBug> <S2SV_StartBug> cmsPipelineFree ( Lut ) ; <S2SV_EndBug>
<S2SV_StartBug> len = curl_msnprintf ( fptr , left , "%ld" , width ) ; <S2SV_EndBug> <S2SV_StartBug> len = curl_msnprintf ( fptr , left , ".%ld" , prec ) ; <S2SV_EndBug> <S2SV_StartBug> for ( fptr = work ; * fptr ; fptr ++ ) <S2SV_EndBug>
<S2SV_StartBug> int vert_causal_ctx_csty_symbol = codsty -> cblk_style & JPEG2000_CBLK_VSC ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk -> sk_shutdown & RCV_SHUTDOWN ) { <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> CollSeq * p4 ; <S2SV_EndBug>
<S2SV_StartBug> mc -> id = idr_alloc ( & multicast_idr , mc , 0 , 0 , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , path2 , fi -> flags ) ) { <S2SV_EndBug>
<S2SV_StartBug> CYCLIC_REFRESH * vp9_cyclic_refresh_alloc ( int mi_rows , int mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> return cr ; <S2SV_EndBug>
<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MWCMDX , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> DM9000_INDEX_REG = DM9000_REG_MWCMD ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_TXPLL , LSB ( length ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_TXPLH , MSB ( length ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_ISR , ISR_PT ) ; <S2SV_EndBug>
<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! SSL_USE_ETM ( s ) && EVP_MD_CTX_md ( s -> read_hash ) != NULL ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> err = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> pynum = parsenumber ( c , s ) ; <S2SV_EndBug>
<S2SV_StartBug> udf_pc_to_char ( inode -> i_sb , symlink , inode -> i_size , p ) ; <S2SV_EndBug> <S2SV_StartBug> brelse ( bh ) ; <S2SV_EndBug>
<S2SV_StartBug> const MB_PREDICTION_MODE y_mode = mi -> mbmi . mode ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE uv_mode = mi -> mbmi . uv_mode ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % stride ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> env = g_environ_setenv ( env , var , val , TRUE ) ; <S2SV_EndBug>
<S2SV_StartBug> goto errout_locked ; <S2SV_EndBug> <S2SV_StartBug> kfree ( family -> attrbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_TLV , & kctl -> id ) ; <S2SV_EndBug>
<S2SV_StartBug> "InvalidGeometry" , "`%s\'" , option ) ; <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct arpt_arp * arp ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( arp , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( user_alloc && ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) ) <S2SV_EndBug>
<S2SV_StartBug> size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> err = - EMSGSIZE ; <S2SV_EndBug> <S2SV_StartBug> ipc . opt = inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( ipc . opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> daddr = ipc . opt -> faddr ; <S2SV_EndBug>
<S2SV_StartBug> img = ctx -> iface -> enc . get_preview ( ctx -> priv -> alg_priv ) ; <S2SV_EndBug>
<S2SV_StartBug> static void follow_dotdot ( struct nameidata * nd ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> else if ( rc == - ENODATA ) <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug>
<S2SV_StartBug> MP4_READBOX_ENTER ( MP4_Box_data_string_t ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 obuf [ 0x40 ] , ibuf [ 0x40 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mutex_lock_interruptible ( & d -> i2c_mutex ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> switch ( num ) { <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = msg [ 0 ] . buf [ 0 ] + 0x36 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 3 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 0 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x10 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 2 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 1 ] = ibuf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 0 ] = ibuf [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x08 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 3 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 3 , <S2SV_EndBug> <S2SV_StartBug> ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x09 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 3 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 4 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 4 , <S2SV_EndBug> <S2SV_StartBug> ibuf , msg [ 1 ] . len + 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg [ 1 ] . buf , & ibuf [ 1 ] , msg [ 1 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & d -> i2c_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( yych != ':' ) goto yy18 ; <S2SV_EndBug> <S2SV_StartBug> # line 804 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 836 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 881 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 936 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 989 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1086 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1161 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1214 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1228 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1237 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1285 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 1334 "ext/standard/var_unserializer.c" <S2SV_EndBug>
<S2SV_StartBug> if ( timeri -> master ) <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> int n = * pnEntry ; <S2SV_EndBug> <S2SV_StartBug> int sz = ( n == 0 ) ? 1 : 2 * n ; <S2SV_EndBug>
<S2SV_StartBug> if ( NFCT_FRAG6_CB ( fp ) -> orig == NULL ) <S2SV_EndBug>
<S2SV_StartBug> sbi -> s_mb_cache = ext4_xattr_create_cache ( sb -> s_id ) ; <S2SV_EndBug> <S2SV_StartBug> failed_mount_wq : <S2SV_EndBug>
<S2SV_StartBug> const InterpKernel * kernel = vp9_get_interp_kernel ( mi -> mbmi . interp_filter ) ; <S2SV_EndBug> <S2SV_StartBug> ? ( plane == 0 ? mi -> bmi [ block ] . as_mv [ ref ] . as_mv <S2SV_EndBug> <S2SV_StartBug> if ( vp9_is_scaled ( sf ) ) { <S2SV_EndBug> <S2SV_StartBug> inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , <S2SV_EndBug> <S2SV_StartBug> subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> assert ( caplen > 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> res . acl_len ) ; <S2SV_EndBug>
<S2SV_StartBug> mutex_unlock ( & file -> mut ) ; <S2SV_EndBug>
<S2SV_StartBug> timeri = list_entry ( timer -> open_list_head . next , <S2SV_EndBug> <S2SV_StartBug> if ( timeri -> flags & SNDRV_TIMER_IFLG_EXCLUSIVE ) { <S2SV_EndBug> <S2SV_StartBug> err = - EBUSY ; <S2SV_EndBug>
<S2SV_StartBug> d0u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> d1u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 1 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static void buffer_pipe_buf_get ( struct pipe_inode_info * pipe , <S2SV_EndBug> <S2SV_StartBug> ref -> ref ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int is_rf64 = ! strncmp ( fourcc , "RF64" , 4 ) , got_ds64 = 0 ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug>
<S2SV_StartBug> l2info -> proto = EXTRACT_16BITS ( p + l2info -> cookie_len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( JAS_CAST ( uint , jas_stream_read ( in , ppm -> data , ppm -> len ) ) != ppm -> len ) { <S2SV_EndBug>
<S2SV_StartBug> ( mutt_bcache_exists ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> int nNew = ( v -> nOpAlloc >= 512 ? v -> nOpAlloc * 2 : v -> nOpAlloc + nOp ) ; <S2SV_EndBug> <S2SV_StartBug> int nNew = ( v -> nOpAlloc ? v -> nOpAlloc * 2 : ( int ) ( 1024 / sizeof ( Op ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( key -> type -> destroy ) <S2SV_EndBug>
<S2SV_StartBug> int mi_row ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; <S2SV_EndBug> <S2SV_StartBug> log_frame_info ( cm , descriptor , file ) ; <S2SV_EndBug> <S2SV_StartBug> * ( ( int * ) ( ( char * ) ( & mi_8x8 [ mi_index ] -> mbmi ) + <S2SV_EndBug> <S2SV_StartBug> mi_index ++ ; <S2SV_EndBug> <S2SV_StartBug> mi_index += 8 ; <S2SV_EndBug>
<S2SV_StartBug> FIRSTPASS_STATS this_frame ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & this_frame , ( i + offset ) ) == EOF ) <S2SV_EndBug> <S2SV_StartBug> accumulate_frame_motion_stats ( & this_frame , <S2SV_EndBug> <S2SV_StartBug> decay_accumulator *= get_prediction_decay_rate ( & cpi -> common , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & this_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & this_frame , ( i + offset ) ) == EOF ) <S2SV_EndBug> <S2SV_StartBug> accumulate_frame_motion_stats ( & this_frame , <S2SV_EndBug> <S2SV_StartBug> decay_accumulator *= get_prediction_decay_rate ( & cpi -> common , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & this_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> arf_boost = ( ( b_frames + f_frames ) * 20 ) ; <S2SV_EndBug>
<S2SV_StartBug> emsg ( _ ( "E145:<S2SV_blank>Shell<S2SV_blank>commands<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>rvim" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> goto read_error ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( lfi -> lfthr [ lvl ] . hev_thr , ( lvl >> 4 ) , SIMD_WIDTH ) ; <S2SV_EndBug>
<S2SV_StartBug> static void print_bpf_insn ( struct bpf_insn * insn ) <S2SV_EndBug> <S2SV_StartBug> } else if ( BPF_MODE ( insn -> code ) == BPF_IMM ) { <S2SV_EndBug> <S2SV_StartBug> insn -> code , insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug>
<S2SV_StartBug> static INLINE void read_mv ( vp9_reader * r , MV * mv , const MV * ref , <S2SV_EndBug> <S2SV_StartBug> ( MV_JOINT_TYPE ) vp9_read_tree ( r , vp9_mv_joint_tree , ctx -> joints ) ; <S2SV_EndBug>
<S2SV_StartBug> virCheckDomainReturn ( dom , - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! data ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> const char * value = NULL ; <S2SV_EndBug> <S2SV_StartBug> cib_client_t * client = data ; <S2SV_EndBug> <S2SV_StartBug> command = crm_recv_remote_msg ( client -> session , client -> encrypted ) ; <S2SV_EndBug> <S2SV_StartBug> value = crm_element_name ( command ) ; <S2SV_EndBug> <S2SV_StartBug> crm_xml_add ( command , F_CIB_USER , client -> user ) ; <S2SV_EndBug> <S2SV_StartBug> crm_xml_add ( command , F_CIB_CALLID , call_uuid ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( self -> mt_used * 3 >= ( self -> mt_mask + 1 ) * 2 ) ) <S2SV_EndBug> <S2SV_StartBug> return _PyMemoTable_ResizeTable ( self , <S2SV_EndBug> <S2SV_StartBug> ( self -> mt_used > 50000 ? 2 : 4 ) * self -> mt_used ) ; <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * param_count ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( segment_counts , 0 , sizeof ( segment_counts ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( xd -> mb_segment_tree_probs , 255 , sizeof ( xd -> mb_segment_tree_probs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> const char command5 [ ] = { 0x05 , 0x00 } ; <S2SV_EndBug> <S2SV_StartBug> close ( s ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> return self ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> struct flowi4 fl4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! __sk_dst_get ( sk ) || __sk_dst_check ( sk , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! IS_ERR ( rt ) ) <S2SV_EndBug> <S2SV_StartBug> __sk_dst_set ( sk , & rt -> dst ) ; <S2SV_EndBug>
<S2SV_StartBug> c -> framebuf_stride = FFALIGN ( c -> width * 3 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> aligned_height = FFALIGN ( c -> height , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> bool tsonly ; <S2SV_EndBug> <S2SV_StartBug> sk -> sk_type == SOCK_STREAM ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , tstype ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 107 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8e_set_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> size_t ss = CDF_SEC_SIZE ( h ) , i , j ; <S2SV_EndBug>
<S2SV_StartBug> return send ( signal_fds [ 1 ] , & sig_on , sizeof ( sig_on ) , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> a = 1.0f / MaxF ( w . x , MaxF ( w . y , w . z ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static int jas_iccgetuint ( jas_stream_t * in , int n , ulonglong * val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong v ; <S2SV_EndBug>
<S2SV_StartBug> int n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug>
<S2SV_StartBug> uint32 nstrips ; <S2SV_EndBug>
<S2SV_StartBug> memccpy ( result , ptr , 0 , len ) ; <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( dest , dlen , buf ) ; <S2SV_EndBug>
<S2SV_StartBug> ifd ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( len > 2560000 || ! ( cbuf = ( char * ) malloc ( len ) ) ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> trace_kvm_emulate_insn_failed ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_queue_exception ( vcpu , UD_VECTOR ) ; <S2SV_EndBug> <S2SV_StartBug> return EMULATE_FAIL ; <S2SV_EndBug>
<S2SV_StartBug> # define COPY_PORT ( dest , src ) do { int i ; for ( i = 0 ; i < ARRAY_SIZE ( src -> read_urbs ) ; ++ i ) { dest -> read_urbs [ i ] = src -> read_urbs [ i ] ; dest -> read_urbs [ i ] -> context = dest ; dest -> bulk_in_buffers [ i ] = src -> bulk_in_buffers [ i ] ; } dest -> read_urb = src -> read_urb ; dest -> bulk_in_endpointAddress = src -> bulk_in_endpointAddress ; dest -> bulk_in_buffer = src -> bulk_in_buffer ; dest -> bulk_in_size = src -> bulk_in_size ; dest -> interrupt_in_urb = src -> interrupt_in_urb ; dest -> interrupt_in_urb -> context = dest ; dest -> interrupt_in_endpointAddress = src -> interrupt_in_endpointAddress ; dest -> interrupt_in_buffer = src -> interrupt_in_buffer ; } while ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> pixs = pixRead ( "cat.035.jpg" ) ; <S2SV_EndBug> <S2SV_StartBug> lept_stderr ( "pdf<S2SV_blank>file<S2SV_blank>made:<S2SV_blank>/tmp/lept/model/dewarptest1.pdf\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> endpoint = & intf -> altsetting [ 0 ] . endpoint [ 0 ] . desc ; <S2SV_EndBug> <S2SV_StartBug> goto fail3 ; <S2SV_EndBug>
<S2SV_StartBug> long newpos ; <S2SV_EndBug>
<S2SV_StartBug> set_header ( res , "Content-Type" , mime ) ; <S2SV_EndBug>
<S2SV_StartBug> int net ; <S2SV_EndBug> <S2SV_StartBug> CLIENT * client ; <S2SV_EndBug> <S2SV_StartBug> if ( ( net = accept ( sock , ( struct sockaddr * ) & addrin , & addrinlen ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> client = negotiate ( net , NULL , servers , NEG_INIT | NEG_MODERN ) ; <S2SV_EndBug>
<S2SV_StartBug> sc -> drefs = av_mallocz ( entries * sizeof ( * sc -> drefs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 6 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 6 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 8 ; <S2SV_EndBug> <S2SV_StartBug> len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 4 ] , sizeof ( struct in_addr ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( EXTRACT_32BITS ( & bp [ 4 ] ) != 0xffffffff ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "/%s" , ipaddr_string ( ndo , & bp [ 4 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 8 ] , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> njoin = EXTRACT_16BITS ( & bp [ 8 ] ) ; <S2SV_EndBug> <S2SV_StartBug> nprune = EXTRACT_16BITS ( & bp [ 10 ] ) ; <S2SV_EndBug> <S2SV_StartBug> bp += 12 ; <S2SV_EndBug> <S2SV_StartBug> len -= 12 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 6 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void sas_destruct_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug>
<S2SV_StartBug> int number_bidders , i , bid , best_bid ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> flush_dcache_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> iov_iter_advance ( ii , tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> numSamples = pWTIntFrame -> numSamples ; <S2SV_EndBug>
<S2SV_StartBug> netdev_dbg ( vif -> dev , "Need<S2SV_blank>more<S2SV_blank>frags\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "Too<S2SV_blank>many<S2SV_blank>frags\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "Frags<S2SV_blank>galore\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "txp->offset:<S2SV_blank>%x,<S2SV_blank>size:<S2SV_blank>%u\\n" , <S2SV_EndBug> <S2SV_StartBug> txp -> offset , txp -> size ) ; <S2SV_EndBug>
<S2SV_StartBug> qemu_vfree ( r -> iov . iov_base ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( dev -> flags & IFF_UP ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb -> len > ( dev -> mtu + dev -> hard_header_len ) ) <S2SV_EndBug> <S2SV_StartBug> return NET_RX_DROP ; <S2SV_EndBug>
<S2SV_StartBug> int ret , n ; <S2SV_EndBug> <S2SV_StartBug> hid -> version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_EndBug> <S2SV_StartBug> hid -> country = hdesc -> bCountryCode ; <S2SV_EndBug> <S2SV_StartBug> for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) <S2SV_EndBug>
<S2SV_StartBug> void vp9_iht16x16_256_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 16 * 16 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 16 ] , temp_out [ 16 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 16 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 6 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> memset ( sax , 0 , sizeof ( sax ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < book -> dim ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < book -> dim ; j ++ ) <S2SV_EndBug>
<S2SV_StartBug> zip_object_handlers . get_properties = php_zip_get_properties ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( pptr [ 0 ] , BGP_VPN_RD_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> pptr += BGP_VPN_RD_LEN ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ent != NULL ) { <S2SV_EndBug> <S2SV_StartBug> cleanup : <S2SV_EndBug>
<S2SV_StartBug> static void sas_probe_devices ( struct work_struct * work ) <S2SV_EndBug> <S2SV_StartBug> struct domain_device * dev , * n ; <S2SV_EndBug>
<S2SV_StartBug> if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > <S2SV_EndBug> <S2SV_StartBug> pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > <S2SV_EndBug>
<S2SV_StartBug> char * ext_name = NULL ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> if ( ( r = sshbuf_get_cstring ( m , & ext_name , NULL ) ) != 0 ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug>
<S2SV_StartBug> sprintf ( url_address , "%.*s" , url_len , url_begin ) ; <S2SV_EndBug>
<S2SV_StartBug> vp8_decrypt_cb * decrypt_cb , <S2SV_EndBug> <S2SV_StartBug> int n = data_sz > 10 ? 10 : data_sz ; <S2SV_EndBug> <S2SV_StartBug> res = VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_EndBug>
<S2SV_StartBug> addr . sun_family = AF_UNIX ; <S2SV_EndBug>
<S2SV_StartBug> prev = NULL ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & mm -> mmap_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> return IMPEG2D_MB_TEX_DECODE_ERR ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( a , has_eob , sizeof ( ENTROPY_CONTEXT ) * tx_size_in_blocks ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( l , has_eob , sizeof ( ENTROPY_CONTEXT ) * tx_size_in_blocks ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 16 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 32 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 48 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ENSURE_BITS ( 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_rle_decompress_data ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> rle = context -> Planes ; <S2SV_EndBug> <S2SV_StartBug> FillMemory ( context -> priv -> PlaneBuffers [ i ] , originalSize , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( planeSize < originalSize ) <S2SV_EndBug> <S2SV_StartBug> nsc_rle_decode ( rle , context -> priv -> PlaneBuffers [ i ] , originalSize ) ; <S2SV_EndBug> <S2SV_StartBug> rle += planeSize ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> local_bh_disable ( ) ; <S2SV_EndBug> <S2SV_StartBug> local_bh_enable ( ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 4 ) <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 4 ) >= 2 ) <S2SV_EndBug>
<S2SV_StartBug> const struct ipv6_pinfo * np = inet6_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt ) <S2SV_EndBug> <S2SV_StartBug> newnp -> opt = ipv6_dup_options ( newsk , np -> opt ) ; <S2SV_EndBug> <S2SV_StartBug> if ( newnp -> opt ) <S2SV_EndBug> <S2SV_StartBug> inet_csk ( newsk ) -> icsk_ext_hdr_len = ( newnp -> opt -> opt_nflen + <S2SV_EndBug> <S2SV_StartBug> newnp -> opt -> opt_flen ) ; <S2SV_EndBug>
<S2SV_StartBug> static int cost_mv_ref ( const VP9_COMP * cpi , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> int mode_context ) { <S2SV_EndBug> <S2SV_StartBug> return x -> inter_mode_cost [ mode_context ] [ INTER_OFFSET ( mode ) ] ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> register u_int amt ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>%d:" , j ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> j = length / sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> if ( j * sizeof ( * ni ) != length - 4 ) <S2SV_EndBug> <S2SV_StartBug> trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni ) != i ) ; <S2SV_EndBug> <S2SV_StartBug> for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; <S2SV_EndBug> <S2SV_StartBug> i -= sizeof ( * ni ) , ++ ni ) { <S2SV_EndBug> <S2SV_StartBug> if ( trunc ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! alt ) <S2SV_EndBug>
<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( ldblk > 9999 ) || ( ldblk < 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp ) <S2SV_EndBug>
<S2SV_StartBug> if ( cmd == TUNSETIFF || _IOC_TYPE ( cmd ) == 0x89 ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> char src [ PATH_MAX + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( src , dir , dir_len ) ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const int w = vpx_img_plane_width ( img , plane ) ; <S2SV_EndBug>
<S2SV_StartBug> put_device ( & bus -> dev ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( ctx -> pred_mv , x -> pred_mv , sizeof ( x -> pred_mv ) ) ; <S2SV_EndBug>
<S2SV_StartBug> OVS_NOT_REACHED ( ) ; <S2SV_EndBug> <S2SV_StartBug> OVS_NOT_REACHED ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ack -> subh . addip_hdr -> serial == serial ) { <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_first ( ext2_xattr_cache , inode -> i_sb -> s_bdev , <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> inode -> i_ino , ( unsigned long ) ce -> e_block ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_release ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_find_next ( ce , inode -> i_sb -> s_bdev , hash ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> const TX_SIZE tx_size = plane ? get_uv_tx_size ( mbmi ) : mbmi -> tx_size ; <S2SV_EndBug>
<S2SV_StartBug> memmove ( s + j , s + qs , blen - qs ) ; <S2SV_EndBug> <S2SV_StartBug> j += blen - qs ; <S2SV_EndBug>
<S2SV_StartBug> if ( sec_attr == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> U2FHID_INIT_RESP initresp ; <S2SV_EndBug> <S2SV_StartBug> if ( resplen > sizeof ( initresp ) ) <S2SV_EndBug> <S2SV_StartBug> dev -> cid = initresp . cid ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionInterface = initresp . versionInterface ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMajor = initresp . versionMajor ; <S2SV_EndBug> <S2SV_StartBug> dev -> versionMinor = initresp . versionMinor ; <S2SV_EndBug> <S2SV_StartBug> dev -> capFlags = initresp . capFlags ; <S2SV_EndBug>
<S2SV_StartBug> while ( f != upto ) ; <S2SV_EndBug>
<S2SV_StartBug> hash_param . data = 0 ; <S2SV_EndBug> <S2SV_StartBug> hash_param . len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ctxt -> dst . type = OP_REG ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> dst . bytes = ctxt -> op_bytes ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> key_user_put ( key -> user ) ; <S2SV_EndBug>
<S2SV_StartBug> static int expandRegular ( rpmfi fi , const char * dest , rpmpsm psm , int nodigest , int nocontent ) <S2SV_EndBug> <S2SV_StartBug> wfd = Fopen ( dest , "w.ufdio" ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( old_umask ) ; <S2SV_EndBug>
<S2SV_StartBug> int rose_parse_facilities ( unsigned char * p , <S2SV_EndBug> <S2SV_StartBug> if ( facilities_len == 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( facilities_len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> tcpSendSegment ( socket , TCP_FLAG_ACK , socket -> sndNxt , socket -> rcvNxt , 0 , FALSE ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_img_fmt_t fmt ) { <S2SV_EndBug> <S2SV_StartBug> const char * const color = fmt == VPX_IMG_FMT_444A ? "C444alpha\\n" : <S2SV_EndBug> <S2SV_StartBug> "C420jpeg\\n" ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> const int max_rate = rc -> av_per_frame_bandwidth * <S2SV_EndBug>
<S2SV_StartBug> if ( nad_find_attr ( nad , 0 , - 1 , "type" , "valid" ) >= 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( flags & __GFP_ZERO ) <S2SV_EndBug>
<S2SV_StartBug> static SvcInternal * get_svc_internal ( SvcContext * svc_ctx ) { <S2SV_EndBug> <S2SV_StartBug> SvcInternal * const si = ( SvcInternal * ) malloc ( sizeof ( * si ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ( SvcInternal * ) svc_ctx -> internal ; <S2SV_EndBug>
<S2SV_StartBug> baswap ( ( void * ) dst , & l2cap_pi ( sock -> sk ) -> chan -> dst ) ; <S2SV_EndBug>
<S2SV_StartBug> jsWarn ( "vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_prob oldp , vp9_prob * bestp , <S2SV_EndBug> <S2SV_StartBug> vp9_prob upd ) { <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp , bestnewp = oldp ; <S2SV_EndBug>
<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug>
<S2SV_StartBug> if ( secure_decrypt ( data , sizeof ( * header ) , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return secure_decrypt ( file , header -> file_size , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> if ( ! signal_pending ( current ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> out_put_key : <S2SV_EndBug>
<S2SV_StartBug> u16 offset = sizeof ( struct ipv6hdr ) ; <S2SV_EndBug> <S2SV_StartBug> while ( offset + 1 <= packet_len ) { <S2SV_EndBug> <S2SV_StartBug> switch ( * * nexthdr ) { <S2SV_EndBug> <S2SV_StartBug> offset += ipv6_optlen ( exthdr ) ; <S2SV_EndBug> <S2SV_StartBug> exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + <S2SV_EndBug>
<S2SV_StartBug> mm_segment_t old_fs ; <S2SV_EndBug> <S2SV_StartBug> ret = sys_wait4 ( pid , ustatus , options , ( struct rusage __user * ) & r ) ; <S2SV_EndBug> <S2SV_StartBug> err |= __put_user ( r . ru_utime . tv_sec , & ur -> ru_utime . tv_sec ) ; <S2SV_EndBug>
<S2SV_StartBug> int get_vp9_frame_buffer ( void * cb_priv , size_t min_size , <S2SV_EndBug> <S2SV_StartBug> ext_fb_list -> ext_fb [ i ] . data = ( uint8_t * ) malloc ( min_size ) ; <S2SV_EndBug>
<S2SV_StartBug> SkipRGBMipmaps ( image , dds_info , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug> <S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ret < 0 ) <S2SV_EndBug>
<S2SV_StartBug> Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( skb -> dev -> flags & IFF_LOOPBACK ) ) { <S2SV_EndBug>
<S2SV_StartBug> height , <S2SV_EndBug> <S2SV_StartBug> if ( bytes_per_line == 0 ) <S2SV_EndBug> <S2SV_StartBug> bytes_per_line = image -> columns ; <S2SV_EndBug> <S2SV_StartBug> length = image -> rows * ( image -> columns + image -> columns % 2 ) ; <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , * p ++ , q ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( image -> columns % 2 ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( L_ICANON ( tty ) ) <S2SV_EndBug>
<S2SV_StartBug> slapi_pblock_set ( pb , SLAPI_PB_RESULT_TEXT , "at<S2SV_blank>least<S2SV_blank>one<S2SV_blank>required<S2SV_blank>attribute<S2SV_blank>has<S2SV_blank>been<S2SV_blank>moved<S2SV_blank>to<S2SV_blank>the<S2SV_blank>BDB<S2SV_blank>scecific<S2SV_blank>configuration<S2SV_blank>entry" ) ; <S2SV_EndBug>
<S2SV_StartBug> ipc_lock_object ( & shp -> shm_perm ) ; <S2SV_EndBug>
<S2SV_StartBug> af -> from_addr_param ( & addr , addr_param , <S2SV_EndBug>
<S2SV_StartBug> ih264d_create_op_t * ps_create_op ; <S2SV_EndBug> <S2SV_StartBug> WORD32 ret ; <S2SV_EndBug> <S2SV_StartBug> ret = ih264d_allocate_static_bufs ( & dec_hdl , pv_api_ip , pv_api_op ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( IV_FAIL == ret ) && ( NULL != dec_hdl ) ) <S2SV_EndBug> <S2SV_StartBug> ih264d_free_static_bufs ( dec_hdl ) ; <S2SV_EndBug>
<S2SV_StartBug> ip6_rt_put ( rt ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( rm -> m_inc . i_hdr . h_flags & RDS_FLAG_CONG_BITMAP ) { <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; <S2SV_EndBug> <S2SV_StartBug> return sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; <S2SV_EndBug>
<S2SV_StartBug> arg_allow_debuggers = 1 ; <S2SV_EndBug>
<S2SV_StartBug> } else <S2SV_EndBug>
<S2SV_StartBug> if ( ( ! ( sfp = ( Sg_fd * ) filp -> private_data ) ) || ( ! ( sdp = sfp -> parentdp ) ) ) <S2SV_EndBug>
<S2SV_StartBug> long newpos ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t hmi_bpm = 0 ; <S2SV_EndBug> <S2SV_StartBug> } * note ; <S2SV_EndBug> <S2SV_StartBug> if ( hmi_data [ 0 ] == 0xfe ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( hmi_data [ 1 ] == 0x15 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmi_mdi , hmi_data , hmi_running_event [ i ] ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> note [ hmi_tmp ] . length = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( * hmi_data > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmi_data > 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_track_offset [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> hmi_delta [ i ] = ( hmi_delta [ i ] << 7 ) | ( * hmi_data & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> hmi_data ++ ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , gplot -> title ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , gplot -> xlabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , gplot -> ylabel ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>logscale<S2SV_blank>x" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "set<S2SV_blank>logscale<S2SV_blank>y" ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> struct rt6_info * rt = ( struct rt6_info * ) dst ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , "modifying<S2SV_blank>in-place" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> int offset ; <S2SV_EndBug>
<S2SV_StartBug> u8 ip_proto = 0 ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return true ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> if ( skb_flow_dissector_uses_key ( flow_dissector , <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> VP8Frame * av_uninit ( curframe ) , * prev_frame ; <S2SV_EndBug>
<S2SV_StartBug> show ( obj , base , name , cb_data ) ; <S2SV_EndBug>
<S2SV_StartBug> int64_t off = s -> off ; <S2SV_EndBug> <S2SV_StartBug> "Range:<S2SV_blank>bytes=%" PRId64 "-" , s -> off ) ; <S2SV_EndBug> <S2SV_StartBug> s -> filesize = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> number_planes , <S2SV_EndBug> <S2SV_StartBug> if ( ( number_pixels * number_planes ) != ( size_t ) ( number_pixels * number_planes ) ) <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * MagickMax ( number_planes , 4 ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32 rows , uint32 cols , int outskew , int inskew ) <S2SV_EndBug>
<S2SV_StartBug> if ( pos + 8 > len ) { <S2SV_EndBug> <S2SV_StartBug> int min_val = ( ut32 ) ( UINT ( data , pos + 4 ) ) , <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p + 2 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> interface = intf -> cur_altsetting ; <S2SV_EndBug>
<S2SV_StartBug> const char * bufptr ; <S2SV_EndBug>
<S2SV_StartBug> static void update_read_synchronize ( rdpUpdate * update , wStream * s ) <S2SV_EndBug> <S2SV_StartBug> Stream_Seek_UINT16 ( s ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> uchar buf [ JPG_MAGICLEN ] ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> pf_vld_inv_quant = impeg2d_vld_inv_quant_mpeg1 ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( vs_param_set -> ie , priv -> vs_ie [ id ] . ie , <S2SV_EndBug>
<S2SV_StartBug> static int match ( Reinst * pc , const char * sp , const char * bol , int flags , Resub * out ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! match ( pc -> x , sp , bol , flags , out ) ) <S2SV_EndBug> <S2SV_StartBug> if ( match ( pc -> x , sp , bol , flags , & scratch ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> m -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> _ ( "_Launch<S2SV_blank>Anyway" ) , RESPONSE_RUN ) ; <S2SV_EndBug> <S2SV_StartBug> _ ( "Mark<S2SV_blank>as<S2SV_blank>_Trusted" ) , RESPONSE_MARK_TRUSTED ) ; <S2SV_EndBug> <S2SV_StartBug> gtk_dialog_add_button ( GTK_DIALOG ( dialog ) , <S2SV_EndBug>
<S2SV_StartBug> size_t size = ( alignment - MALLOC_ALIGNMENT ) + bytes ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( queue , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> r = 0 ; <S2SV_EndBug>
<S2SV_StartBug> FIRSTPASS_STATS this_frame ; <S2SV_EndBug> <S2SV_StartBug> const int is_spatial_svc = ( svc -> number_spatial_layers > 1 ) && <S2SV_EndBug> <S2SV_StartBug> ( svc -> number_temporal_layers == 1 ) ; <S2SV_EndBug> <S2SV_StartBug> double frame_rate ; <S2SV_EndBug> <S2SV_StartBug> twopass = & svc -> layer_context [ svc -> spatial_layer_id ] . twopass ; <S2SV_EndBug> <S2SV_StartBug> twopass -> total_stats = * twopass -> stats_in_end ; <S2SV_EndBug> <S2SV_StartBug> twopass -> total_left_stats = twopass -> total_stats ; <S2SV_EndBug> <S2SV_StartBug> frame_rate = 10000000.0 * twopass -> total_stats . count / <S2SV_EndBug> <S2SV_StartBug> if ( is_spatial_svc ) { <S2SV_EndBug> <S2SV_StartBug> ( int64_t ) ( twopass -> total_stats . duration * <S2SV_EndBug> <S2SV_StartBug> twopass -> bits_left = ( int64_t ) ( twopass -> total_stats . duration * <S2SV_EndBug> <S2SV_StartBug> cpi -> output_framerate = oxcf -> framerate ; <S2SV_EndBug> <S2SV_StartBug> double sum_iiratio = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> start_pos = twopass -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> while ( input_stats ( twopass , & this_frame ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> calculate_modified_err ( cpi , & this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> twopass -> modified_error_left = twopass -> modified_error_total ; <S2SV_EndBug>
<S2SV_StartBug> int overflow_error = 0 ; <S2SV_EndBug> <S2SV_StartBug> res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( u = 0 ; u < line_length ; u ++ ) { <S2SV_EndBug> <S2SV_StartBug> res -> ContribRow [ u ] . Weights = ( double * ) gdMalloc ( windows_size * sizeof ( double ) ) ; <S2SV_EndBug> <S2SV_StartBug> u -- ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i <= u ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT16 ( s , <S2SV_EndBug>
<S2SV_StartBug> struct siginfo info ; <S2SV_EndBug>
<S2SV_StartBug> DRM_DEBUG ( "clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_lineno ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_lineno ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_int ( tmp , & lineno , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_op ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_op ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_left ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_left ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & left , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_op ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_op ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_args ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_args ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_test ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_test ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & test , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keys , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_key ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_key ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & key , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elt ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_elt ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> comprehension_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_comprehension ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( generators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( exists_not_none ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_left ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_left ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> cmpop_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_cmpop ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( ops , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( comparators , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_func ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_func ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( args , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> keyword_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_keyword ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( keywords , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_n ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_n ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_s ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_s ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( values , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_s ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_s ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_attr ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_slice ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_value ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_value ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_id ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_id ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elts ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> Py_CLEAR ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_elts ) ) { <S2SV_EndBug> <S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> expr_ty value ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( PyList_GET_ITEM ( tmp , i ) , & value , arena ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( elts , i , value ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , "required<S2SV_blank>field<S2SV_blank>\\"elts\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple" ) ; <S2SV_EndBug>
<S2SV_StartBug> parse_field ( netdissect_options * ndo , const char * * pptr , int * len ) <S2SV_EndBug> <S2SV_StartBug> if ( * len <= 0 || ! pptr || ! * pptr ) <S2SV_EndBug> <S2SV_StartBug> while ( * pptr <= ( const char * ) ndo -> ndo_snapend && * len >= 0 && * * pptr ) { <S2SV_EndBug> <S2SV_StartBug> if ( * len < 0 || * pptr > ( const char * ) ndo -> ndo_snapend ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( assigned_dev -> flags & KVM_DEV_ASSIGN_ENABLE_IOMMU ) ) <S2SV_EndBug> <S2SV_StartBug> if ( pci_enable_device ( dev ) ) { <S2SV_EndBug>
<S2SV_StartBug> flush_rq -> mq_ctx = first_rq -> mq_ctx ; <S2SV_EndBug> <S2SV_StartBug> flush_rq -> tag = first_rq -> tag ; <S2SV_EndBug>
<S2SV_StartBug> struct kvm_lapic * apic = vcpu -> arch . apic ; <S2SV_EndBug> <S2SV_StartBug> vapic = kmap_atomic ( vcpu -> arch . apic -> vapic_page ) ; <S2SV_EndBug>
<S2SV_StartBug> dtls1_process_buffered_records ( s ) ; <S2SV_EndBug> <S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> img_avail ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( * iter ) ) { <S2SV_EndBug>
<S2SV_StartBug> . match_data . cmp = type -> match , <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug>
<S2SV_StartBug> pairs = palloc ( count * sizeof ( Pairs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ptr = realloc ( priv -> EF_C_DevAut , len ) ; <S2SV_EndBug> <S2SV_StartBug> priv -> EF_C_DevAut_len = len ; <S2SV_EndBug>
<S2SV_StartBug> DBG_ENTER ( "php_mysqlnd_rowp_read_text_protocol_aux" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned long len = php_mysqlnd_net_field_length ( & p ) ; <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( rm -> atomic . op_notifier ) ; <S2SV_EndBug>
<S2SV_StartBug> idata -> status = IMAP_FATAL ; <S2SV_EndBug>
<S2SV_StartBug> l_current_data = p_j2k -> m_specific_param . m_encoder . m_header_tile_data ; <S2SV_EndBug> <S2SV_StartBug> opj_write_bytes ( l_current_data , J2K_MS_MCO , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> return true ; <S2SV_EndBug>
<S2SV_StartBug> int n = 0 , size = 0 , ret = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> struct perf_event_context * ctx = leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> ret = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> goto unlock ; <S2SV_EndBug> <S2SV_StartBug> unlock : <S2SV_EndBug>
<S2SV_StartBug> int setpwnam ( struct passwd * pwd ) <S2SV_EndBug> <S2SV_StartBug> char * atomic_dir = "/etc" ; <S2SV_EndBug> <S2SV_StartBug> if ( ( fp = xfmkstemp ( & tmpname , atomic_dir ) ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> PCI_DMA_FROMDEVICE ) ) <S2SV_EndBug> <S2SV_StartBug> buf_pa = MWIFIEX_SKB_DMA_ADDR ( skb ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( count < sizeof ( cmd . type ) ) { <S2SV_EndBug>
<S2SV_StartBug> done = EAS_TRUE ; <S2SV_EndBug>
<S2SV_StartBug> max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; <S2SV_EndBug> <S2SV_StartBug> max_packets = ( size_t ) ( number_pixels * viff_info . number_data_bands ) ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * last , <S2SV_EndBug> <S2SV_StartBug> char * name = path_name ( path , last ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ( char * ) name ) ; <S2SV_EndBug>
<S2SV_StartBug> cdf_secid_t maxsector = ( cdf_secid_t ) ( sat -> sat_len * size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sid > maxsector ) { <S2SV_EndBug>
<S2SV_StartBug> makewhite ( g , o ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( wp -> path = websNormalizeUriPath ( path ) ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> while ( ibuf [ ind ] == 0x01 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( src_end - src < zsize ) <S2SV_EndBug> <S2SV_StartBug> bitbuf = * src ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! prev_pkt [ channel_id ] . read ) { <S2SV_EndBug>
<S2SV_StartBug> int nAlloc = pSrc -> nSrc * 2 + nExtra ; <S2SV_EndBug>
<S2SV_StartBug> get_page ( * page ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> len = dp -> ip6r_len ; <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , source , & m , 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , source , & m , REG_NOTBOL ) ) <S2SV_EndBug>
<S2SV_StartBug> struct oabi_flock64 user ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & user , ( struct oabi_flock64 __user * ) arg , <S2SV_EndBug> <S2SV_StartBug> ret = sys_fcntl64 ( fd , cmd , local_arg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( err ) <S2SV_EndBug>
<S2SV_StartBug> if ( chm -> index_root != 0xFFFFFFFF && chm -> index_root > chm -> num_chunks ) { <S2SV_EndBug> <S2SV_StartBug> name = p ; p += name_len ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> memcpy ( res , dbg_data , nb10sz ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( istreq ( str , "all" ) ) { <S2SV_EndBug>
<S2SV_StartBug> conn -> c_trans = trans ; <S2SV_EndBug>
<S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( NCH ( n ) == 1 ) <S2SV_EndBug> <S2SV_StartBug> l = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( NCH ( n ) - 1 ) ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> struct reloc_struct_t * got_table = calloc ( 1 , n_got * sizeof ( ut32 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_loop_filter_rows ( const YV12_BUFFER_CONFIG * frame_buffer , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * cm , MACROBLOCKD * xd , <S2SV_EndBug> <S2SV_StartBug> int mi_row , mi_col ; <S2SV_EndBug> <S2SV_StartBug> int use_420 = y_only || ( xd -> plane [ 1 ] . subsampling_y == 1 && <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 1 ] . subsampling_x == 1 ) ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + mi_row * cm -> mi_stride ; <S2SV_EndBug> <S2SV_StartBug> vp9_setup_dst_planes ( xd , frame_buffer , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> if ( use_420 ) <S2SV_EndBug> <S2SV_StartBug> vp9_setup_mask ( cm , mi_row , mi_col , mi_8x8 + mi_col , cm -> mi_stride , <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; plane < num_planes ; ++ plane ) { <S2SV_EndBug> <S2SV_StartBug> if ( use_420 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) <S2SV_EndBug>
<S2SV_StartBug> config -> listeners [ config -> listener_count - 1 ] . security_options . password_file = config -> default_listener . security_options . password_file ; <S2SV_EndBug>
<S2SV_StartBug> EXT4_DESC_PER_BLOCK ( sb ) ; <S2SV_EndBug>
<S2SV_StartBug> int j , len = apdu . resp [ i + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( file -> name , d , len ) ; <S2SV_EndBug> <S2SV_StartBug> file -> namelen = len ; <S2SV_EndBug>
<S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> processed_rcds ) , <S2SV_EndBug> <S2SV_StartBug> s -> s3 -> rrec . seq_num ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( event -> sigev_notify & SIGEV_THREAD_ID ) && <S2SV_EndBug> <S2SV_StartBug> ( ! ( rtn = find_task_by_vpid ( event -> sigev_notify_thread_id ) ) || <S2SV_EndBug> <S2SV_StartBug> ! same_thread_group ( rtn , current ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( ( event -> sigev_notify & ~ SIGEV_THREAD_ID ) != SIGEV_NONE ) && <S2SV_EndBug> <S2SV_StartBug> ( ( event -> sigev_signo <= 0 ) || ( event -> sigev_signo > SIGRTMAX ) ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( vcpu -> mmio_cur_fragment == vcpu -> mmio_nr_fragments ) { <S2SV_EndBug>
<S2SV_StartBug> r = parse_gid ( e + 1 , & gid ) ; <S2SV_EndBug>
<S2SV_StartBug> pch -> file . dead = 1 ; <S2SV_EndBug>
<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPAR , 0x40 | address ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPDRL , LSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPDRH , MSB ( data ) ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS | EPCR_ERPRW ) ; <S2SV_EndBug> <S2SV_StartBug> while ( ( dm9000ReadReg ( DM9000_REG_EPCR ) & EPCR_ERRE ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_EPCR , EPCR_EPOS ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug>
<S2SV_StartBug> goto retry ; <S2SV_EndBug>
<S2SV_StartBug> if ( retval != 0 ) <S2SV_EndBug>
<S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> if ( pmd_none_or_clear_bad ( pmd ) ) <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> next = zap_pte_range ( tlb , vma , pmd , addr , next , details ) ; <S2SV_EndBug>
<S2SV_StartBug> REQ ( CHILD ( n , 0 ) , ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_funcdef_impl ( c , CHILD ( n , 1 ) , NULL , <S2SV_EndBug> <S2SV_StartBug> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_with_stmt ( c , CHILD ( n , 1 ) , <S2SV_EndBug> <S2SV_StartBug> return ast_for_for_stmt ( c , CHILD ( n , 1 ) , <S2SV_EndBug>
<S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> metadatalength = GetDuration ( mp4 ) ; <S2SV_EndBug> <S2SV_StartBug> float in = 0.0 , out = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t fourcc = GPMF_Key ( ms ) ; <S2SV_EndBug> <S2SV_StartBug> double rate = GetGPMFSampleRate ( mp4 , fourcc , GPMF_SAMPLE_RATE_PRECISE ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( "%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz\\n" , PRINTF_4CC ( fourcc ) , rate ) ; <S2SV_EndBug>
<S2SV_StartBug> For ( expr_ty target , expr_ty iter , asdl_seq * body , asdl_seq * orelse , int <S2SV_EndBug> <S2SV_StartBug> p -> v . For . orelse = orelse ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( the_url , evt -> navigate . to_url ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , attr_id = 0 , nattr ; <S2SV_EndBug>
<S2SV_StartBug> DWORD nbWritten = 0 ; <S2SV_EndBug> <S2SV_StartBug> Stream_Seek ( irp -> input , 20 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( CommWriteFile ( serial -> hComm , Stream_Pointer ( irp -> input ) , Length , & nbWritten , NULL ) ) <S2SV_EndBug>
<S2SV_StartBug> char * buf ; <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = hermes_enable_port ( hw , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> bool slow ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> count = Z_LVAL_P ( pcount ) ; <S2SV_EndBug> <S2SV_StartBug> if ( Z_TYPE ( entry ) != IS_OBJECT ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> uri -> port = port & INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> pch -> chan_net = net ; <S2SV_EndBug>
<S2SV_StartBug> RETVAL_STRINGL ( replaced , ( int ) new_len , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = hermes_enable_port ( hw , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> tunnel_type = * ( tptr + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> tlen = len ; <S2SV_EndBug>
<S2SV_StartBug> NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> GSTD_GSS_ERROR ( maj , min , NULL , "gss_accept_sec_context" ) ; <S2SV_EndBug>
<S2SV_StartBug> xref -> entries = calloc ( 1 , xref -> n_entries * sizeof ( struct _xref_entry ) ) ; <S2SV_EndBug>
<S2SV_StartBug> pairs = palloc ( ncolumns * sizeof ( Pairs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ( cc0 % rowsize ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> int procfd ; <S2SV_EndBug> <S2SV_StartBug> pid_t to_cleanup_pid = pid ; <S2SV_EndBug> <S2SV_StartBug> status = 0 ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & attached_pid , sizeof ( attached_pid ) , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( options -> stdin_fd == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(2)" ) ; <S2SV_EndBug> <S2SV_StartBug> shutdown ( ipc_sockets [ 0 ] , SHUT_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_error : <S2SV_EndBug> <S2SV_StartBug> procfd = open ( "/proc" , O_DIRECTORY | O_RDONLY ) ; <S2SV_EndBug> <S2SV_StartBug> . procfd = procfd <S2SV_EndBug>
<S2SV_StartBug> static int try_filter_frame ( const YV12_BUFFER_CONFIG * sd , VP9_COMP * const cpi , <S2SV_EndBug> <S2SV_StartBug> int filt_err ; <S2SV_EndBug> <S2SV_StartBug> vp9_loop_filter_frame ( cm , & cpi -> mb . e_mbd , filt_level , 1 , partial_frame ) ; <S2SV_EndBug> <S2SV_StartBug> filt_err = vp9_get_y_sse ( sd , cm -> frame_to_show ) ; <S2SV_EndBug>
<S2SV_StartBug> ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> void vp9_update_mv_count ( VP9_COMMON * cm , const MACROBLOCKD * xd ) { <S2SV_EndBug> <S2SV_StartBug> const MB_MODE_INFO * const mbmi = & mi -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> inc_mvs ( mbmi , mi -> bmi [ i ] . as_mv , & cm -> counts . mv ) ; <S2SV_EndBug> <S2SV_StartBug> inc_mvs ( mbmi , mbmi -> mv , & cm -> counts . mv ) ; <S2SV_EndBug>
<S2SV_StartBug> static bool <S2SV_EndBug> <S2SV_StartBug> bool success = NS_TRUE ; <S2SV_EndBug> <S2SV_StartBug> size_t chunk_length ; <S2SV_EndBug> <S2SV_StartBug> success = NS_FALSE ; <S2SV_EndBug> <S2SV_StartBug> chunk_length = ( size_t ) strtol ( chunkStart , NULL , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( p + 2 + chunk_length > end ) { <S2SV_EndBug> <S2SV_StartBug> success = NS_FALSE ; <S2SV_EndBug> <S2SV_StartBug> memmove ( writeBuffer , p + 2 , chunk_length ) ; <S2SV_EndBug> <S2SV_StartBug> reqPtr -> chunkWriteOff += chunk_length ; <S2SV_EndBug> <S2SV_StartBug> * ( writeBuffer + chunk_length ) = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> reqPtr -> chunkStartOff += ( size_t ) ( p - chunkStart ) + 4u + chunk_length ; <S2SV_EndBug> <S2SV_StartBug> return success ; <S2SV_EndBug>
<S2SV_StartBug> static int jas_iccgetuint ( jas_stream_t * in , int n , ulonglong * val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong v ; <S2SV_EndBug>
<S2SV_StartBug> char * buf ; <S2SV_EndBug>
<S2SV_StartBug> PyObject * bufobj = PyObject_CallObject ( readline , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> u16 selector , int seg , u8 cpl , bool in_task_switch ) <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug>
<S2SV_StartBug> data [ l ++ ] = SEG_REG_PREFIXES [ op -> operands [ 1 ] . regs [ 0 ] ] ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x8b ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = offset ; <S2SV_EndBug> <S2SV_StartBug> return l ; <S2SV_EndBug> <S2SV_StartBug> if ( a -> bits == 64 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = 0x25 ; <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x5 ; <S2SV_EndBug> <S2SV_StartBug> if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { <S2SV_EndBug> <S2SV_StartBug> data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long size ) <S2SV_EndBug> <S2SV_StartBug> end_gfn = gfn + ( size >> PAGE_SHIFT ) ; <S2SV_EndBug>
<S2SV_StartBug> int lpc = 0 ; <S2SV_EndBug> <S2SV_StartBug> unsigned laddr ; <S2SV_EndBug> <S2SV_StartBug> # ifdef HAVE_GNUTLS_GNUTLS_H <S2SV_EndBug> <S2SV_StartBug> xmlNode * login = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ssock == remote_tls_fd ) { <S2SV_EndBug> <S2SV_StartBug> session = create_tls_session ( csock , GNUTLS_SERVER ) ; <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> login = crm_recv_remote_msg ( session , TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> login = crm_recv_remote_msg ( GINT_TO_POINTER ( csock ) , FALSE ) ; <S2SV_EndBug> <S2SV_StartBug> bail : <S2SV_EndBug>
<S2SV_StartBug> if ( serial -> num_ports < 2 ) <S2SV_EndBug>
<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> if ( ! body -> unit_size ) <S2SV_EndBug> <S2SV_StartBug> n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) <S2SV_EndBug>
<S2SV_StartBug> "<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>" <S2SV_EndBug> <S2SV_StartBug> "<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>" <S2SV_EndBug> <S2SV_StartBug> "<td><form<S2SV_blank>method=POST<S2SV_blank>action=%s>" <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ! inode_capable ( inode , CAP_FSETID ) ) <S2SV_EndBug>
<S2SV_StartBug> void * * p , void * end , void * obuf , size_t olen ) <S2SV_EndBug> <S2SV_StartBug> ret = ceph_decrypt2 ( secret , & head , & head_len , obuf , & olen , <S2SV_EndBug>
<S2SV_StartBug> static void ptrace_triggered ( struct perf_event * bp , int nmi , <S2SV_EndBug>
<S2SV_StartBug> int mapping_address = address - mb_mapping -> start_bits ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_BITS < nb ) { <S2SV_EndBug> <S2SV_StartBug> int nb = ( req [ offset + 3 ] << 8 ) + req [ offset + 4 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( nb < 1 || MODBUS_MAX_WRITE_REGISTERS < nb ) { <S2SV_EndBug>
<S2SV_StartBug> if ( net != c_net || ! tc -> t_sock ) <S2SV_EndBug>
<S2SV_StartBug> struct resv_map * reservations = vma_resv_map ( vma ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( vma -> vm_file -> f_mapping , reserve ) ; <S2SV_EndBug>
<S2SV_StartBug> sc = create_spnego_ctx ( ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> rfcomm_dlc_accept ( d ) ; <S2SV_EndBug>
<S2SV_StartBug> case '\\r' : <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> int perf_event_overflow ( struct perf_event * event , int nmi , <S2SV_EndBug> <S2SV_StartBug> return __perf_event_overflow ( event , nmi , 1 , data , regs ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t i ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> err = crypto_ahash_export ( req , state ) ; <S2SV_EndBug> <S2SV_StartBug> ctx2 -> more = 1 ; <S2SV_EndBug>
<S2SV_StartBug> flags |= EXT4_GET_BLOCKS_PRE_IO ; <S2SV_EndBug>
<S2SV_StartBug> void ntlm_populate_message_header ( NTLM_MESSAGE_HEADER * header , UINT32 MessageType ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> const char * errstr ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> new_mnemonic [ strlen ( new_mnemonic ) - 1 ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> Fp = fopen ( filename , "wb" ) ; <S2SV_EndBug> <S2SV_StartBug> return HTTP_UNAUTHORIZED ; <S2SV_EndBug>
<S2SV_StartBug> inbuf = _TIFFmalloc ( scanlinesizein ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( iterator -> next ) rfbDecrClientRef ( iterator -> next ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( key -> type -> destroy ) <S2SV_EndBug>
<S2SV_StartBug> if ( pbi -> decoding_thread_count > num_token_partitions - 1 ) <S2SV_EndBug> <S2SV_StartBug> pbi -> decoding_thread_count = num_token_partitions - 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( fileblock < INDIRECT_BLOCKS ) <S2SV_EndBug> <S2SV_StartBug> else if ( fileblock < INDIRECT_BLOCKS + blksz / 4 ) <S2SV_EndBug>
<S2SV_StartBug> int32_t leftoverblock , int32_t ntbytes , int32_t maxbytes , <S2SV_EndBug> <S2SV_StartBug> _sw32 ( dest - 4 , - value ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ntbytes + maxout > maxbytes ) { <S2SV_EndBug> <S2SV_StartBug> maxout = ( int64_t ) maxbytes - ( int64_t ) ntbytes ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ntbytes + neblock ) > maxbytes ) { <S2SV_EndBug>
<S2SV_StartBug> zval_ptr_dtor ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> BIO * tmpout = NULL ; <S2SV_EndBug> <S2SV_StartBug> tmpout = BIO_new ( BIO_s_mem ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>

<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , ndo -> ndo_snapend - p - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> isoclns_print ( ndo , p , length , ndo -> ndo_snapend - p ) ; <S2SV_EndBug>
<S2SV_StartBug> int copylen ; <S2SV_EndBug> <S2SV_StartBug> if ( m && m -> msg_control && sock_flag ( & q -> sk , SOCK_ZEROCOPY ) ) <S2SV_EndBug> <S2SV_StartBug> copylen = vnet_hdr . hdr_len ; <S2SV_EndBug>
<S2SV_StartBug> problem_data_reload_from_dump_dir ( ) ; <S2SV_EndBug>
<S2SV_StartBug> return kvm_x86_ops -> set_msr ( vcpu , msr ) ; <S2SV_EndBug>
<S2SV_StartBug> struct perf_event_context * ctx ; <S2SV_EndBug> <S2SV_StartBug> struct perf_event_context * gctx = group_leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & gctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> perf_remove_from_context ( group_leader , false ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> return crypto_alloc_skcipher ( name , type , mask ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug>
<S2SV_StartBug> if ( attr >= 0 ) { <S2SV_EndBug>
<S2SV_StartBug> int req_len ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( connection -> buffer , '=' ) ; <S2SV_EndBug>
<S2SV_StartBug> const int min_frame_target = MAX ( rc -> min_frame_bandwidth , <S2SV_EndBug> <S2SV_StartBug> rc -> av_per_frame_bandwidth >> 5 ) ; <S2SV_EndBug> <S2SV_StartBug> return target ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( ( pi -> y % ( OPJ_INT32 ) ( comp -> dy << rpy ) == 0 ) || ( ( pi -> y == pi -> ty0 ) && <S2SV_EndBug>
<S2SV_StartBug> & key_datums , & key_nulls , & key_count ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> if ( ! signal_pending ( current ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_put_key ; <S2SV_EndBug> <S2SV_StartBug> out_put_key : <S2SV_EndBug>

<S2SV_StartBug> xstep = picomp -> hsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> ystep = picomp -> vsamp * ( 1 << <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug>
<S2SV_StartBug> static char * print_value ( cJSON * item , int depth , int fmt ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_NULL : out = cJSON_strdup ( "null" ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Number : out = print_number ( item ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_String : out = print_string ( item ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Array : out = print_array ( item , depth , fmt ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case cJSON_Object : out = print_object ( item , depth , fmt ) ; break ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> static void update_coef_probs ( VP9_COMP * cpi , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> vp9_coeff_stats frame_branch_ct [ TX_SIZES ] [ PLANE_TYPES ] ; <S2SV_EndBug> <S2SV_StartBug> for ( tx_size = TX_4X4 ; tx_size <= max_tx_size ; ++ tx_size ) <S2SV_EndBug> <S2SV_StartBug> update_coef_probs_common ( w , cpi , tx_size , frame_branch_ct [ tx_size ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ptr = strchr ( ptr + 1 , '/' ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ipt_entry ) >= limit ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const u_char * ep , uint32_t phase , uint32_t doi0 _U_ , <S2SV_EndBug> <S2SV_StartBug> uint32_t proto0 _U_ , int depth ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>orig=(" ) ) ; <S2SV_EndBug> <S2SV_StartBug> size_t nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case IPSECDOI_NTYPE_REPLAY_STATUS : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> isakmp_print ( ndo , cp , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ")" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( filter [ i ] . jf ) <S2SV_EndBug> <S2SV_StartBug> t_offset += is_near ( f_offset ) ? 2 : 6 ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_bit ( DMF_FREEING , & md -> flags ) || <S2SV_EndBug> <S2SV_StartBug> dm_deleting_md ( md ) ) <S2SV_EndBug> <S2SV_StartBug> dm_get ( md ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ps_dec -> u1_first_slice_in_stream && ( ps_dec -> u4_first_slice_in_pic == 2 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic != 2 ) <S2SV_EndBug> <S2SV_StartBug> else if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic ) <S2SV_EndBug> <S2SV_StartBug> num_mb_skipped = u2_first_mb_in_slice << u1_mbaff ; <S2SV_EndBug> <S2SV_StartBug> num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) <S2SV_EndBug> <S2SV_StartBug> if ( ( u2_first_mb_in_slice << u1_mbaff ) > ps_dec -> u2_total_mbs_coded ) <S2SV_EndBug> <S2SV_StartBug> - ps_dec -> u2_total_mbs_coded ; <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic == 2 ) <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> codec_id == AV_CODEC_ID_JV ) { <S2SV_EndBug>
<S2SV_StartBug> if ( L_ICANON ( tty ) ) <S2SV_EndBug>
<S2SV_StartBug> sun_data = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) sun_info . length , <S2SV_EndBug> <S2SV_StartBug> sizeof ( * sun_data ) ) ; <S2SV_EndBug> <S2SV_StartBug> height = sun_info . height ; <S2SV_EndBug>
<S2SV_StartBug> int release_vp9_frame_buffer ( void * cb_priv , <S2SV_EndBug>
<S2SV_StartBug> void vp9_cost_tokens ( int * costs , const vp9_prob * probs , vp9_tree tree ) { <S2SV_EndBug>
<S2SV_StartBug> vmcs_writel ( HOST_CR0 , read_cr0 ( ) & ~ X86_CR0_TS ) ; <S2SV_EndBug> <S2SV_StartBug> vmcs_writel ( HOST_CR4 , read_cr4 ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> ( ( unsigned char * ) buffer ) [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug>
<S2SV_StartBug> code = validate_as_request ( kdc_active_realm , request , * princ , <S2SV_EndBug>
<S2SV_StartBug> dprintk ( 2 , "vm_open<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n" , map , <S2SV_EndBug>
<S2SV_StartBug> u8 obuf [ 0x40 ] , ibuf [ 0x40 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( mutex_lock_interruptible ( & d -> i2c_mutex ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> switch ( num ) { <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = msg [ 0 ] . buf [ 0 ] + 0x36 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 3 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 0 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x10 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 2 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 1 ] = ibuf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> msg [ 0 ] . buf [ 0 ] = ibuf [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x08 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 3 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 3 , <S2SV_EndBug> <S2SV_StartBug> ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x09 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = msg [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 3 ] = msg [ 0 ] . addr ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & obuf [ 4 ] , msg [ 0 ] . buf , msg [ 0 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , msg [ 0 ] . len + 4 , <S2SV_EndBug> <S2SV_StartBug> ibuf , msg [ 1 ] . len + 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg [ 1 ] . buf , & ibuf [ 1 ] , msg [ 1 ] . len ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & d -> i2c_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> blockcnt = ( ( len + pos ) + blocksize - 1 ) >> <S2SV_EndBug>
<S2SV_StartBug> struct cred * cred ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cred ) <S2SV_EndBug> <S2SV_StartBug> return create_user_ns ( cred ) ; <S2SV_EndBug>
<S2SV_StartBug> status = sctp_v4_protosw_init ( ) ; <S2SV_EndBug> <S2SV_StartBug> status = register_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> unregister_pernet_subsys ( & sctp_net_ops ) ; <S2SV_EndBug> <S2SV_StartBug> err_protosw_init : <S2SV_EndBug>
<S2SV_StartBug> if ( ! chip -> num_interfaces ) <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & chip -> active ) ; <S2SV_EndBug>
<S2SV_StartBug> cntsize ( in , & sumlen , & nnode ) ; <S2SV_EndBug>
<S2SV_StartBug> s -> decode_mb = mpeg4_decode_studio_mb ; <S2SV_EndBug>
<S2SV_StartBug> ret = read ( p_dev -> fd , & ev , sizeof ( ev ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int status = 0 ; <S2SV_EndBug> <S2SV_StartBug> state = nfs4_do_open ( dir , & path , flags , sattr , cred ) ; <S2SV_EndBug> <S2SV_StartBug> status = nfs4_intent_set_file ( nd , & path , state ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_close_sync ( & path , state , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> struct key * keyring ; <S2SV_EndBug>
<S2SV_StartBug> if ( index > glyphCache -> glyphCache [ id ] . number ) <S2SV_EndBug>
<S2SV_StartBug> end = strchr ( * value + 1 , \'"\' ) ; <S2SV_EndBug> <S2SV_StartBug> end ++ ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) hrtimer_forward ( timer , <S2SV_EndBug>
<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen ( 0 , size ) : <S2SV_EndBug>
<S2SV_StartBug> checkstackp ( L , 1 , ra ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_active_map_t map = { 0 } ; <S2SV_EndBug>
<S2SV_StartBug> nPath = ( int ) strlen ( zPath ) ; <S2SV_EndBug>
<S2SV_StartBug> union sctp_addr_param * addr_param ; <S2SV_EndBug> <S2SV_StartBug> addr_param = ( union sctp_addr_param * ) hdr -> params ; <S2SV_EndBug> <S2SV_StartBug> ( sctp_paramhdr_t * ) ( ( void * ) addr_param + length ) , <S2SV_EndBug>
<S2SV_StartBug> vstart += entry -> vn_aux ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && src -> data [ plane ] ; plane ++ ) <S2SV_EndBug>
<S2SV_StartBug> n = r -> sector_count ; <S2SV_EndBug> <S2SV_StartBug> r -> iov . iov_len = n * 512 ; <S2SV_EndBug> <S2SV_StartBug> qemu_iovec_init_external ( & r -> qiov , & r -> iov , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , & r -> qiov , n , <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( ybf -> y_buffer - 1 - ybf -> y_stride , 127 , ybf -> y_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> u_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ybf -> v_buffer - 1 - ybf -> uv_stride , 127 , ybf -> uv_width + 5 ) ; <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug> <S2SV_StartBug> pair -> added = 0 ; <S2SV_EndBug>
<S2SV_StartBug> int vm_shared = dst_vma -> vm_flags & VM_SHARED ; <S2SV_EndBug> <S2SV_StartBug> if ( vm_shared ) { <S2SV_EndBug> <S2SV_StartBug> struct address_space * mapping = dst_vma -> vm_file -> f_mapping ; <S2SV_EndBug> <S2SV_StartBug> spin_lock ( ptl ) ; <S2SV_EndBug>
<S2SV_StartBug> error = xfs_da_shrink_inode ( args , 0 , bp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! stream -> config . cfg . g_w || ! stream -> config . cfg . g_h ) <S2SV_EndBug> <S2SV_StartBug> if ( stream -> config . cfg . g_profile != 0 && ! global -> experimental_bitstream ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! streami -> config . out_fn ) <S2SV_EndBug> <S2SV_StartBug> const char * a = stream -> config . out_fn ; <S2SV_EndBug> <S2SV_StartBug> const char * a = stream -> config . stats_fn ; <S2SV_EndBug>
<S2SV_StartBug> ip_printroute ( ndo , cp , option_len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! kvm_read_cr4_bits ( vcpu , X86_CR4_VMXE ) ) { <S2SV_EndBug>
<S2SV_StartBug> bool issrc , isneg ; <S2SV_EndBug> <S2SV_StartBug> off_reg = issrc ? insn -> src_reg : insn -> dst_reg ; <S2SV_EndBug> <S2SV_StartBug> if ( isneg ) <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_MUL , off_reg , - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_MOV32_IMM ( BPF_REG_AX , aux -> alu_limit ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_SUB , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_NEG , BPF_REG_AX , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_IMM ( BPF_ARSH , BPF_REG_AX , 63 ) ; <S2SV_EndBug> <S2SV_StartBug> * patch ++ = BPF_ALU64_REG ( BPF_AND , BPF_REG_AX , off_reg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( issrc && isneg ) <S2SV_EndBug>
<S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> size_t i , maxcount ; <S2SV_EndBug> <S2SV_StartBug> ssi -> si_count = CDF_TOLE2 ( si -> si_count ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < CDF_TOLE4 ( si -> si_count ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> info , count , & maxcount ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < size ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( "%02x" , buf [ j + idx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . val != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( op . ptr != UT64_MAX ) <S2SV_EndBug> <S2SV_StartBug> printline ( "ptr" , "0x%08" PFMT64x "\\n" , op . ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( op . refptr != - 1 ) <S2SV_EndBug> <S2SV_StartBug> printline ( "refptr" , "%d\\n" , op . refptr ) ; <S2SV_EndBug>
<S2SV_StartBug> int pidfd = creat ( pid_file , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ret < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> REQ ( CHILD ( n , 0 ) , ASYNC ) ; <S2SV_EndBug> <S2SV_StartBug> return ast_for_funcdef_impl ( c , CHILD ( n , 1 ) , decorator_seq , <S2SV_EndBug> <S2SV_StartBug> 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( buf , "%s.conf" , set ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( "\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>\\n\\n" , <S2SV_EndBug>
<S2SV_StartBug> hdr = ( void * ) p - head -> iov_base ; <S2SV_EndBug>
<S2SV_StartBug> char * p , * q , * r ; <S2SV_EndBug> <S2SV_StartBug> printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( strncmp ( line , "currentfile<S2SV_blank>eexec" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( p = line + 18 ; isspace ( * p ) ; p ++ ) <S2SV_EndBug> <S2SV_StartBug> lenIV = atoi ( line + 6 ) ; <S2SV_EndBug> <S2SV_StartBug> && strstr ( line , "readstring" ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( p = strstr ( line , "/Subrs" ) ) && isdigit ( p [ 7 ] ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( p = strstr ( line , "/CharStrings" ) ) && isdigit ( p [ 13 ] ) ) <S2SV_EndBug> <S2SV_StartBug> for ( q = p ; isspace ( * q ) && * q != '\\n' ; q ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( * p ) { <S2SV_EndBug> <S2SV_StartBug> * q = 0 ; <S2SV_EndBug> <S2SV_StartBug> cmd = p + 1 ; <S2SV_EndBug> <S2SV_StartBug> * p = \'"\' ; <S2SV_EndBug>
<S2SV_StartBug> ( mysql -> options . extension && mysql -> options . extension -> ssl_crlpath ) ) <S2SV_EndBug> <S2SV_StartBug> mysql -> options . use_ssl = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( mysql -> client_flag & CLIENT_SSL ) <S2SV_EndBug> <S2SV_StartBug> unsigned long ssl_error ; <S2SV_EndBug>
<S2SV_StartBug> if ( header -> biSize >= 40U ) { <S2SV_EndBug>
<S2SV_StartBug> int abrt_core_fd = xopen3 ( path , O_WRONLY | O_CREAT | O_TRUNC , 0600 ) ; <S2SV_EndBug>
<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug>
<S2SV_StartBug> vp8_clear_system_state ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> set_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ; <S2SV_EndBug>
<S2SV_StartBug> ldblk , sizeof ( * BImgBuff ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cmd == TUNSETIFF || _IOC_TYPE ( cmd ) == 0x89 ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> if ( gfs ) <S2SV_EndBug>
<S2SV_StartBug> void bpf_map_inc ( struct bpf_map * map , bool uref ) <S2SV_EndBug> <S2SV_StartBug> atomic_inc ( & map -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> usb_conv_info -> class_data = u3v_conv_info ; <S2SV_EndBug>
<S2SV_StartBug> if ( plen == 0 ) { <S2SV_EndBug> <S2SV_StartBug> phdr = sctp_get_next_param ( m , offset , <S2SV_EndBug>
<S2SV_StartBug> else if ( verify & GNUTLS_CERT_INVALID ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> str = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) count , sizeof ( * str ) ) ; <S2SV_EndBug>
<S2SV_StartBug> PyObject * logical = NULL ; <S2SV_EndBug> <S2SV_StartBug> FriBidiParType base = FRIBIDI_TYPE_RTL ; <S2SV_EndBug> <S2SV_StartBug> { "logical" , "base_direction" , "encoding" , "clean" , "reordernsm" , NULL } ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PyArg_ParseTupleAndKeywords ( args , kw , "O|isii" , kwargs , <S2SV_EndBug> <S2SV_StartBug> & logical , & base , & encoding , & clean , & reordernsm ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON ) ) <S2SV_EndBug> <S2SV_StartBug> if ( PyUnicode_Check ( logical ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( PyString_Check ( logical ) ) <S2SV_EndBug>
<S2SV_StartBug> nfca_poll -> nfcid1_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> int zero_bits = * in & 0x07 ; <S2SV_EndBug> <S2SV_StartBug> size_t octets_left = inlen - 1 ; <S2SV_EndBug> <S2SV_StartBug> int i , count = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( uid >= AID_APP ) { <S2SV_EndBug>
<S2SV_StartBug> ret = get_tag ( asn1 , len , & inner_tag , & asn1 , & len , & rem , & rlen ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ( ret = av_image_check_size ( s -> width , s -> height , 0 , avctx ) ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> pipe_write ( struct kiocb * iocb , const struct iovec * _iov , <S2SV_EndBug> <S2SV_StartBug> ssize_t ret ; <S2SV_EndBug> <S2SV_StartBug> int do_wakeup ; <S2SV_EndBug> <S2SV_StartBug> size_t total_len ; <S2SV_EndBug> <S2SV_StartBug> total_len = iov_length ( iov , nr_segs ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> int error , atomic = 1 ; <S2SV_EndBug> <S2SV_StartBug> iov_fault_in_pages_read ( iov , chars ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug> <S2SV_StartBug> char * src ; <S2SV_EndBug> <S2SV_StartBug> chars = PAGE_SIZE ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( error ) ) { <S2SV_EndBug> <S2SV_StartBug> ret += chars ; <S2SV_EndBug> <S2SV_StartBug> buf -> len = chars ; <S2SV_EndBug> <S2SV_StartBug> total_len -= chars ; <S2SV_EndBug>
<S2SV_StartBug> u64 insn_bitness = ( BPF_CLASS ( insn -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_EndBug> <S2SV_StartBug> if ( signed_add_overflows ( dst_reg -> smin_value , smin_val ) || <S2SV_EndBug> <S2SV_StartBug> if ( signed_sub_overflows ( dst_reg -> smin_value , smax_val ) || <S2SV_EndBug>
<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , optlen + 2 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( shdr -> sh_size < 1 ) { <S2SV_EndBug>
<S2SV_StartBug> const gchar * to = xmpp_stanza_get_to ( message ) ; <S2SV_EndBug> <S2SV_StartBug> Jid * jid_to = jid_create ( to ) ; <S2SV_EndBug>
<S2SV_StartBug> buff [ r ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> return error ; <S2SV_EndBug>
<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug>
<S2SV_StartBug> register const u_char * tptr ) <S2SV_EndBug> <S2SV_StartBug> u_int hexdump = FALSE ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ipaddr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ip6addr_string ( ndo , tptr + 1 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> decoder_info -> log2_sb_size = get_flc ( 3 , stream ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_write_nmv_probs ( VP9_COMMON * cm , int usehp , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> nmv_context * const mvc = & cm -> fc . nmvc ; <S2SV_EndBug>
<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( PixelChannels * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> int frame_count , <S2SV_EndBug> <S2SV_StartBug> int mb_cols = cpi -> common . mb_cols ; <S2SV_EndBug> <S2SV_StartBug> int mb_rows = cpi -> common . mb_rows ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned int , accumulator , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint16_t , count , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * mbd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> YV12_BUFFER_CONFIG * f = cpi -> frames [ alt_ref_index ] ; <S2SV_EndBug> <S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , uint8_t , predictor , 16 * 16 * 3 ) ; <S2SV_EndBug> <S2SV_StartBug> uint8_t * input_buffer [ MAX_MB_PLANE ] ; <S2SV_EndBug> <S2SV_StartBug> assert ( mbd -> plane [ 1 ] . subsampling_x == mbd -> plane [ 1 ] . subsampling_y ) ; <S2SV_EndBug> <S2SV_StartBug> # if ALT_REF_MC_ENABLED <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . mv_row_max = ( ( cpi -> common . mb_rows - 1 - mb_row ) * 16 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( accumulator , 0 , 16 * 16 * 3 * sizeof ( accumulator [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( count , 0 , 16 * 16 * 3 * sizeof ( count [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> # if ALT_REF_MC_ENABLED <S2SV_EndBug> <S2SV_StartBug> cpi -> mb . mv_col_max = ( ( cpi -> common . mb_cols - 1 - mb_col ) * 16 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> frames [ frame ] == NULL ) <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ alt_ref_index ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_stride ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> filter_weight = err < THRESH_LOW <S2SV_EndBug> <S2SV_StartBug> ? 2 : err < THRESH_HIGH ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> cpi -> frames [ frame ] -> y_buffer + mb_y_offset , <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ k ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst1 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> stride = cpi -> alt_ref_buffer . uv_stride ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < mb_uv_height ; j ++ , k ++ ) { <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ k ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst1 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> pval *= cpi -> fixed_divide [ count [ m ] ] ; <S2SV_EndBug> <S2SV_StartBug> dst2 [ byte ] = ( uint8_t ) pval ; <S2SV_EndBug> <S2SV_StartBug> byte += stride - mb_uv_height ; <S2SV_EndBug> <S2SV_StartBug> mb_y_offset += 16 ; <S2SV_EndBug> <S2SV_StartBug> mb_uv_offset += mb_uv_height ; <S2SV_EndBug> <S2SV_StartBug> mb_uv_offset += mb_uv_height * ( f -> uv_stride - mb_cols ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( l >= ( len - o ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! rtlpriv -> usb_data ) <S2SV_EndBug> <S2SV_StartBug> spin_lock_init ( & rtlpriv -> locks . usb_lock ) ; <S2SV_EndBug> <S2SV_StartBug> complete ( & rtlpriv -> firmware_loading_complete ) ; <S2SV_EndBug>
<S2SV_StartBug> ihevcd_ref_list ( ps_codec , ps_pps , ps_sps , ps_slice_hdr ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( g -> sect <= 0 || <S2SV_EndBug> <S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug>
<S2SV_StartBug> int retval = 0 ; <S2SV_EndBug> <S2SV_StartBug> retval = - ENODEV ; <S2SV_EndBug> <S2SV_StartBug> bytes_read = snprintf ( in_buffer , 20 , "%lld\\n" , dev -> bbu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ppos < bytes_read ) { <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug>
<S2SV_StartBug> draw_info -> geometry = AcquireString ( geometry ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p , length , caplen ) ; <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int layer ; <S2SV_EndBug> <S2SV_StartBug> if ( svc -> number_temporal_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; <S2SV_EndBug>
<S2SV_StartBug> struct inode * inode = page -> mapping -> host ; <S2SV_EndBug> <S2SV_StartBug> ret = f2fs_mpage_readpages ( page -> mapping , NULL , page , 1 , false ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ddi . dinfo_nboards = dgnc_NumBoards ; <S2SV_EndBug>
<S2SV_StartBug> if ( po -> fanout ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug>
<S2SV_StartBug> if ( list_empty ( & EXT4_I ( inode ) -> i_completed_io_list ) ) { <S2SV_EndBug> <S2SV_StartBug> ext4_debug ( "Dump<S2SV_blank>inode<S2SV_blank>%lu<S2SV_blank>completed_io<S2SV_blank>list<S2SV_blank>\\n" , inode -> i_ino ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> static int __perf_event_overflow ( struct perf_event * event , int nmi , <S2SV_EndBug> <S2SV_StartBug> if ( nmi ) { <S2SV_EndBug> <S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> perf_event_output ( event , nmi , data , regs ) ; <S2SV_EndBug> <S2SV_StartBug> if ( nmi ) { <S2SV_EndBug> <S2SV_StartBug> irq_work_queue ( & event -> pending ) ; <S2SV_EndBug>
<S2SV_StartBug> assert_regexp_syntax_error ( ")" ) ; <S2SV_EndBug> <S2SV_StartBug> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}" , <S2SV_EndBug>
<S2SV_StartBug> static int jas_iccputsint ( jas_stream_t * out , int n , longlong val ) <S2SV_EndBug> <S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug>
<S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug>
<S2SV_StartBug> pirlvl = pi -> picomp -> pirlvls ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || <S2SV_EndBug>
<S2SV_StartBug> static int changedline ( const Proto * p , int oldpc , int newpc ) { <S2SV_EndBug>
<S2SV_StartBug> p = list_first_entry ( & tmp_list , struct mount , mnt_list ) ; <S2SV_EndBug> <S2SV_StartBug> pin_insert_group ( & p -> mnt_umount , & p -> mnt_parent -> mnt , & unmounted ) ; <S2SV_EndBug> <S2SV_StartBug> umount_mnt ( p ) ; <S2SV_EndBug> <S2SV_StartBug> change_mnt_propagation ( p , MS_PRIVATE ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_frame ( vpx_codec_ctx_t * codec , <S2SV_EndBug> <S2SV_StartBug> VpxVideoWriter * writer ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( pkt = vpx_codec_get_cx_data ( codec , & iter ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> for ( x = 0 ; x < ( ssize_t ) number_pixels ; x += 2 ) <S2SV_EndBug>
<S2SV_StartBug> static VALUE from_document ( VALUE klass , VALUE document ) <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug>
<S2SV_StartBug> ops -> get_msr ( ctxt , MSR_EFER , & efer ) ; <S2SV_EndBug> <S2SV_StartBug> setup_syscalls_segments ( ctxt , & cs , & ss ) ; <S2SV_EndBug>
<S2SV_StartBug> static void send ( node_t * node , node_t * child , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> send ( node -> parent , node , fout ) ; <S2SV_EndBug> <S2SV_StartBug> if ( child ) { <S2SV_EndBug>
<S2SV_StartBug> int bytes_read = read ( reader -> inbound_fd , buffer -> data , reader -> buffer_size ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! revs -> blob_objects ) <S2SV_EndBug> <S2SV_StartBug> show ( obj , path , name , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug> <S2SV_StartBug> yyerror ( yyscanner , lex_env , "unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; <S2SV_EndBug>
<S2SV_StartBug> static bool new_idmap_permitted ( struct user_namespace * ns , int cap_setid , <S2SV_EndBug> <S2SV_StartBug> if ( ns_capable ( ns -> parent , cap_setid ) ) <S2SV_EndBug>
<S2SV_StartBug> unsigned long cs ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> _eip , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , ( u16 ) cs , VCPU_SREG_CS ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return body ; <S2SV_EndBug>
<S2SV_StartBug> sc_debug ( card -> ctx , SC_LOG_DEBUG_NORMAL , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> rval = tpm_kdfa ( sapi_context , session -> authHash , & ( key . b ) , label , & ( session -> nonceNewer . b ) , <S2SV_EndBug>
<S2SV_StartBug> ( mutt_bcache_exists ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct iovec iov ; <S2SV_EndBug> <S2SV_StartBug> if ( ret < local_nr_pages ) { <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nr_pages ; j ++ ) { <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , regs -> ARM_pc ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 * buf = calloc ( to - from , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r_buf_read_at ( bf -> buf , from , buf , to - from ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( to - needle ) > 5 ) { <S2SV_EndBug> <S2SV_StartBug> bool is_wide32 = needle + rc + 2 < to && ! w [ 0 ] && ! w [ 1 ] && ! w [ 2 ] && w [ 3 ] && ! w [ 4 ] ; <S2SV_EndBug>

<S2SV_StartBug> rd_create_ui ( ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint16_le ( s , len_combined_caps ) ; <S2SV_EndBug>
<S2SV_StartBug> block_length = data [ i ] * 256 + data [ i + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> switch ( type ) <S2SV_EndBug> <S2SV_StartBug> SetPixelIndex ( image , ( ( ( unsigned char ) pixel ) & <S2SV_EndBug> <S2SV_StartBug> ( 0x01 << ( 7 - bit ) ) ) != 0 ? 0 : 255 , q ) ; <S2SV_EndBug> <S2SV_StartBug> x -- ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( sock -> type == SOCK_RAW ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> sock -> ops = & rawsock_ops ; <S2SV_EndBug>
<S2SV_StartBug> set_caps ( ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( temp_buffer & 0xffffff00 ) != 0x100 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x120 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x130 ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! curbuf -> b_p_ma && ( ea . argt & MODIFY ) ) <S2SV_EndBug>
<S2SV_StartBug> chip -> data_buffer = kmalloc ( TPM_BUFSIZE * sizeof ( u8 ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int channo ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> guchar * match ; <S2SV_EndBug> <S2SV_StartBug> gsize to_match = MIN ( left , buffer -> pos ) ; <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( buffer -> data , & AUTH_END_STRING [ client -> auth_end_offset ] , to_match ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return match - buffer -> data + strlen ( AUTH_END_STRING ) ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> # if ! ( CONFIG_FAST_UNALIGNED ) <S2SV_EndBug>
<S2SV_StartBug> size_t i ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; <S2SV_EndBug>
<S2SV_StartBug> ( Rec2 . RecordLength - 2 - 2 ) / 3 ) <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> # define PAM_END ( msg ) do { syslog ( LOG_ERR , "%s:<S2SV_blank>%s" , msg , pam_strerror ( pamh , pam_err ) ) ; warnx ( "%s:<S2SV_blank>%s" , msg , pam_strerror ( pamh , pam_err ) ) ; pam_end ( pamh , pam_err ) ; exit ( EXIT_FAILURE ) ; } while ( 0 ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # ifndef HAVE_LOGIN_CAP_H <S2SV_EndBug>
<S2SV_StartBug> be32_to_cpu ( agf -> agf_flcount ) <= xfs_agfl_size ( mp ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bp -> b_pag && be32_to_cpu ( agf -> agf_seqno ) != bp -> b_pag -> pag_agno ) <S2SV_EndBug> <S2SV_StartBug> be32_to_cpu ( agf -> agf_btreeblks ) > be32_to_cpu ( agf -> agf_length ) ) <S2SV_EndBug>
<S2SV_StartBug> skb -> ip_summed = CHECKSUM_PARTIAL ; <S2SV_EndBug> <S2SV_StartBug> __skb_queue_tail ( queue , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> int byte_count = 0 , count ; <S2SV_EndBug> <S2SV_StartBug> { switch ( c ) <S2SV_EndBug> <S2SV_StartBug> ucptr = ( unsigned char * ) intptr ; <S2SV_EndBug> <S2SV_StartBug> intptr = va_arg ( argptr , unsigned int * ) ; <S2SV_EndBug> <S2SV_StartBug> if ( count > 0 ) <S2SV_EndBug> <S2SV_StartBug> case 'G' : <S2SV_EndBug> <S2SV_StartBug> if ( count > 0 ) <S2SV_EndBug> <S2SV_StartBug> header_seek ( psf , count , SEEK_SET ) ; <S2SV_EndBug> <S2SV_StartBug> byte_count += count ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( info = bmp_getinfo ( in ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } else if ( ACTION ( RUN ) ) { <S2SV_EndBug> <S2SV_StartBug> handle_run ( req , res ) ; <S2SV_EndBug> <S2SV_StartBug> is_monit_running ( res ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ACTION ( STATUS ) ) { <S2SV_EndBug>
<S2SV_StartBug> btrfs_file_extent_compression ( leaf , fi ) == 0 && <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( BTRFS_ROOT_REF_COWS , & root -> state ) ) <S2SV_EndBug> <S2SV_StartBug> new_size ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache ( ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s" , path , <S2SV_EndBug>
<S2SV_StartBug> if ( length == 1 && bp [ 0 ] == 0xff ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> DECLARE_ALIGNED_ARRAY ( 16 , unsigned short , sad_array8 , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> bestaddress , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> hlist_del ( & pin -> m_list ) ; <S2SV_EndBug> <S2SV_StartBug> hlist_del ( & pin -> s_list ) ; <S2SV_EndBug>
<S2SV_StartBug> static bool do_write_pids ( pid_t tpid , const char * contrl , const char * cg , const char * file , const char * buf ) <S2SV_EndBug> <S2SV_StartBug> if ( fprintf ( pids_file , "%d" , ( int ) cred . pid ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> u_char * b , * s , * t , c ; <S2SV_EndBug> <S2SV_StartBug> b = ( uint8_t * ) malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> for ( s = ( u_char * ) p , t = b , i = length ; i > 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( i > 1 ) { <S2SV_EndBug> <S2SV_StartBug> c = * s ++ ^ 0x20 ; <S2SV_EndBug>
<S2SV_StartBug> assert ( dev -> lintr . pin > 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( ret == - EEXIST ) ; <S2SV_EndBug>
<S2SV_StartBug> int opts ; <S2SV_EndBug> <S2SV_StartBug> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> int ntlm_read_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! ctx -> priv ) { <S2SV_EndBug> <S2SV_StartBug> vpx_codec_alg_priv_t * alg_priv = vpx_memalign ( 32 , sizeof ( * alg_priv ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( alg_priv == NULL ) <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_MEM_ERROR ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv = ( vpx_codec_priv_t * ) alg_priv ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> config . dec ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> cfg = * ctx -> config . dec ; <S2SV_EndBug> <S2SV_StartBug> ctx -> config . dec = & ctx -> priv -> alg_priv -> cfg ; <S2SV_EndBug>
<S2SV_StartBug> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug> <S2SV_StartBug> if ( args -> valuelen < valuelen ) { <S2SV_EndBug> <S2SV_StartBug> args -> valuelen = valuelen ; <S2SV_EndBug>
<S2SV_StartBug> char * sockaddr_url , * stratum_port , * tmp ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_disable_client_reconnect ) { <S2SV_EndBug> <S2SV_StartBug> url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( address , "%s:%s" , url , port ) ; <S2SV_EndBug>
<S2SV_StartBug> input ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! r_fs_mount ( core -> fs , ptr , input , off ) ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ptr = r_fs_name ( core -> fs , core -> offset ) ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( ! r_fs_mount ( core -> fs , ptr , input , core -> offset ) ) <S2SV_EndBug> <S2SV_StartBug> eprintf ( "Cannot<S2SV_blank>mount<S2SV_blank>%s\\n" , input ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( -- n >= 0 && ! ND_TTEST ( * ps ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( ie = io + ps -> nid ; io < ie && ! ND_TTEST ( * io ) ; ++ io ) { <S2SV_EndBug>
<S2SV_StartBug> if ( sbi -> s_inode_size > EXT4_GOOD_OLD_INODE_SIZE && <S2SV_EndBug> <S2SV_StartBug> sbi -> s_inode_size ) { <S2SV_EndBug>
<S2SV_StartBug> struct mii_data * miidata = ( struct mii_data * ) & rq -> ifr_ifru ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE : <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 1 : <S2SV_EndBug> <S2SV_StartBug> miidata -> out_value = mii_read ( dev , phy_addr , miidata -> reg_num ) ; <S2SV_EndBug> <S2SV_StartBug> case SIOCDEVPRIVATE + 2 : <S2SV_EndBug> <S2SV_StartBug> mii_write ( dev , phy_addr , miidata -> reg_num , miidata -> in_value ) ; <S2SV_EndBug>
<S2SV_StartBug> int hns_nic_net_xmit_hw ( struct net_device * ndev , <S2SV_EndBug> <S2SV_StartBug> wmb ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_hashed ( sk ) ) { <S2SV_EndBug> <S2SV_StartBug> write_lock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_bh ( & ping_table . lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char query [ 1024 ] , * end ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( query , "select<S2SV_blank>count(*)<S2SV_blank>from<S2SV_blank>`%s`" , table ) ; <S2SV_EndBug> <S2SV_StartBug> end = strmov ( strmov ( strmov ( query , "show<S2SV_blank>/*!32332<S2SV_blank>FULL<S2SV_blank>*/<S2SV_blank>columns<S2SV_blank>from<S2SV_blank>`" ) , table ) , "`" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( wild && wild [ 0 ] ) <S2SV_EndBug> <S2SV_StartBug> end = strmov ( strmov ( strmov ( query , "show<S2SV_blank>keys<S2SV_blank>from<S2SV_blank>`" ) , table ) , "`" ) ; <S2SV_EndBug>
<S2SV_StartBug> VP8Frame * av_uninit ( curframe ) , * prev_frame ; <S2SV_EndBug>
<S2SV_StartBug> ssize_t result ; <S2SV_EndBug>
<S2SV_StartBug> img_buf_free ( img -> img_data ) ; <S2SV_EndBug>
<S2SV_StartBug> l_current_pi -> include = ( OPJ_INT16 * ) opj_calloc ( ( l_tcp -> numlayers + 1 ) * l_step_l , sizeof ( OPJ_INT16 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct stat st ; <S2SV_EndBug> <S2SV_StartBug> pr_fs_clear_cache2 ( path ) ; <S2SV_EndBug> <S2SV_StartBug> xerrno = errno ; <S2SV_EndBug> <S2SV_StartBug> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>check<S2SV_blank>%s:<S2SV_blank>%s" , path , <S2SV_EndBug>
<S2SV_StartBug> af -> from_addr_param ( & addr , addr_param , <S2SV_EndBug>
<S2SV_StartBug> imbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf , background_color_index , imsx * imsy ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ResetMagickMemory ( imbuf + imsx * y + posision_x , color_index , repeat_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ) == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "replay<S2SV_blank>detection<S2SV_blank>%sabled" , <S2SV_EndBug>
<S2SV_StartBug> ALOGE ( "b/26366256" ) ; <S2SV_EndBug>
<S2SV_StartBug> u64 base_addr , size ; <S2SV_EndBug>
<S2SV_StartBug> if ( client -> rcSource ) <S2SV_EndBug>
<S2SV_StartBug> if ( bee -> ui -> ft_in_start ) { <S2SV_EndBug>
<S2SV_StartBug> if ( vps_id >= 16 ) { <S2SV_EndBug>
<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> struct key * find_keyring_by_name ( const char * name , bool skip_perm_check ) <S2SV_EndBug> <S2SV_StartBug> if ( ! skip_perm_check && <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> while ( ! kthread_should_stop ( ) ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> q = p ; <S2SV_EndBug> <S2SV_StartBug> goto skip ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( child -> ptrace & PT_PTRACED ) && child -> parent == current ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & child -> sighand -> siglock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ignore_state || ( task_is_traced ( child ) && <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret && ! ignore_state ) <S2SV_EndBug> <S2SV_StartBug> ret = wait_task_inactive ( child , TASK_TRACED ) ? 0 : - ESRCH ; <S2SV_EndBug>
<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( display_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi ) { <S2SV_EndBug> <S2SV_StartBug> const VP9_COMMON * const cm = & ctx -> pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> altcol = ( altcol / tok -> alttabsize + 1 ) <S2SV_EndBug> <S2SV_StartBug> * tok -> alttabsize ; <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( indenterror ( tok ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( tok -> async_def ) { <S2SV_EndBug>
<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char filename [ dirent . namelen + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> enum grub_fshelp_filetype type = GRUB_FSHELP_UNKNOWN ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( hook ( filename , type , fdiro , closure ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( strncmp ( line , "currentfile<S2SV_blank>eexec" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( line += 18 ; isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( ; line < last && isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> else if ( last >= line + 4 && isxdigit ( line [ 0 ] ) && isxdigit ( line [ 1 ] ) <S2SV_EndBug> <S2SV_StartBug> && isxdigit ( line [ 2 ] ) && isxdigit ( line [ 3 ] ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( transhdrlen ) { <S2SV_EndBug> <S2SV_StartBug> copy = datalen - transhdrlen - fraggap ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! from_buffer ) { <S2SV_EndBug>
<S2SV_StartBug> if ( env -> allow_ptr_leaks || BPF_SRC ( insn -> code ) == BPF_K ) <S2SV_EndBug> <S2SV_StartBug> if ( aux -> alu_state && <S2SV_EndBug> <S2SV_StartBug> return - EACCES ; <S2SV_EndBug>
<S2SV_StartBug> pr_debug ( "%p<S2SV_blank>%zu\\n" , sk , len ) ; <S2SV_EndBug> <S2SV_StartBug> sockaddr -> sa_family = AF_NFC ; <S2SV_EndBug>
<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> unsigned char * buf ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( buf = jas_realloc2 ( m -> buf_ , bufsize , sizeof ( unsigned char ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> set_modeinfo_offsets ( & cpi -> common , xd , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> duplicate_mode_info_in_sb ( & cpi -> common , xd , mi_row , mi_col , bsize ) ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( address , "%s:%s" , url , port ) ; <S2SV_EndBug>
<S2SV_StartBug> memset ( global , 0 , sizeof ( * global ) ) ; <S2SV_EndBug> <S2SV_StartBug> global -> codec = get_vpx_encoder_by_index ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> global -> use_i420 = 0 ; <S2SV_EndBug> <S2SV_StartBug> else if ( arg_match ( & arg , & experimental_bitstream , argi ) ) <S2SV_EndBug> <S2SV_StartBug> # if CONFIG_VP9_ENCODER <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> get_page ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> sixel_buffer = ( char * ) RelinquishMagickMemory ( sixel_buffer ) ; <S2SV_EndBug>
<S2SV_StartBug> hndl = sock_diag_lock_handler ( req -> sdiag_family ) ; <S2SV_EndBug>
<S2SV_StartBug> static inline ulong encode_twos_comp ( long n , int prec ) <S2SV_EndBug> <S2SV_StartBug> ulong result ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_eventquery ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_eventquery karg ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> if ( source == target ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! vma -> vm_userfaultfd_ctx . ctx ) <S2SV_EndBug>
<S2SV_StartBug> static int ecryptfs_parse_options ( struct ecryptfs_sb_info * sbi , char * options ) <S2SV_EndBug> <S2SV_StartBug> if ( ! options ) { <S2SV_EndBug> <S2SV_StartBug> case ecryptfs_opt_err : <S2SV_EndBug>
<S2SV_StartBug> len = mutt_b64_decode ( obuf , idata -> buf + 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> int Downmix_Reset ( downmix_object_t * pDownmixer , bool init ) { <S2SV_EndBug>
<S2SV_StartBug> if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( retval ) { <S2SV_EndBug>
<S2SV_StartBug> block_length = data [ i ] * 256 + data [ i + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) <S2SV_EndBug>
<S2SV_StartBug> RATE_CONTROL * const rc = & cpi -> rc ; <S2SV_EndBug> <S2SV_StartBug> VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> struct twopass_rc * const twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> FIRSTPASS_STATS next_frame = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * start_pos ; <S2SV_EndBug> <S2SV_StartBug> double gf_first_frame_err = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> const int max_bits = frame_max_bits ( rc , oxcf ) ; <S2SV_EndBug> <S2SV_StartBug> mv_ratio_accumulator_thresh = ( cpi -> common . width + cpi -> common . height ) / 10.0 ; <S2SV_EndBug> <S2SV_StartBug> active_max_gf_interval = rc -> max_gf_interval ; <S2SV_EndBug> <S2SV_StartBug> mod_frame_err = calculate_modified_err ( cpi , this_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( EOF == input_stats ( twopass , & next_frame ) ) <S2SV_EndBug> <S2SV_StartBug> loop_decay_rate = get_prediction_decay_rate ( & cpi -> common , & next_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( next_frame . pcnt_inter - next_frame . pcnt_motion ) < <S2SV_EndBug> <S2SV_StartBug> if ( detect_transition_to_still ( twopass , i , 5 , loop_decay_rate , <S2SV_EndBug> <S2SV_StartBug> boost_score += ( decay_accumulator * <S2SV_EndBug> <S2SV_StartBug> calc_frame_boost ( cpi , & next_frame , this_frame_mv_in_out ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( i >= active_max_gf_interval && ( zero_motion_accumulator < 0.995 ) ) || <S2SV_EndBug> <S2SV_StartBug> ( i > MIN_GF_INTERVAL ) && <S2SV_EndBug> <S2SV_StartBug> ( ( boost_score - old_boost_score ) < IIFACTOR ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( rc -> frames_to_key - i ) < MIN_GF_INTERVAL ) { <S2SV_EndBug> <S2SV_StartBug> while ( i < ( rc -> frames_to_key + ! rc -> next_key_frame_forced ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( i < rc -> frames_to_key ) { <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = i - 1 ; <S2SV_EndBug> <S2SV_StartBug> rc -> baseline_gf_interval = i ; <S2SV_EndBug> <S2SV_StartBug> ( i < cpi -> oxcf . lag_in_frames ) && <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> multi_arf_enabled && ( cpi -> common . frame_type != KEY_FRAME ) ) { <S2SV_EndBug>
<S2SV_StartBug> goto err_reprs_clean ; <S2SV_EndBug> <S2SV_StartBug> nfp_repr_free ( repr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug>
<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sp -> sa_protocol != PX_PROTO_PPTP ) <S2SV_EndBug>
<S2SV_StartBug> RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx , work_to_do ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( work_to_do < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( ret < 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug> <S2SV_StartBug> netbk_tx_err ( vif , & txreq , idx ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = vfs_dedupe_file_range ( file , same ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char * to , * repl ; <S2SV_EndBug> <S2SV_StartBug> if ( g . decode && ( g . headis & 1 ) != 0 && g . hname != NULL ) { <S2SV_EndBug> <S2SV_StartBug> to = g . hname ; <S2SV_EndBug> <S2SV_StartBug> len = strlen ( g . hname ) ; <S2SV_EndBug> <S2SV_StartBug> repl = g . decode && strcmp ( to + len , ".tgz" ) ? "" : ".tar" ; <S2SV_EndBug> <S2SV_StartBug> g . outf = MALLOC ( len + ( g . decode ? strlen ( repl ) : strlen ( g . sufx ) ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( g . outf , to , len ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( g . outf + len , g . decode ? repl : g . sufx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mi < 0 ) <S2SV_EndBug> <S2SV_StartBug> idev -> info -> mem [ mi ] . addr >> PAGE_SHIFT , <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_do_mpt_command ( struct mpt_ioctl_command karg , void __user * mfPtr ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> int iocnum , flagsLength ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug>
<S2SV_StartBug> strcpy ( algo -> alg_name , auth -> alg_name ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 * output ; <S2SV_EndBug>
<S2SV_StartBug> if ( type == HUB_INIT2 ) <S2SV_EndBug> <S2SV_StartBug> if ( type == HUB_INIT3 ) <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> param ++ ; <S2SV_EndBug> <S2SV_StartBug> while ( * param == '<S2SV_blank>' ) <S2SV_EndBug> <S2SV_StartBug> param ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( code == gcode ) <S2SV_EndBug>
<S2SV_StartBug> char buffer [ 4096 ] ; <S2SV_EndBug> <S2SV_StartBug> char * buf = buffer , * buf2 = buffer2 , * d , * d_url ; <S2SV_EndBug> <S2SV_StartBug> if ( name_len > sizeof ( buffer ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( value ) <= sizeof ( buffer2 ) - 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( buf != buffer ) { <S2SV_EndBug>
<S2SV_StartBug> GetPixelIndex ( image , q ) , q ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cf_auth_type <= AUTH_TRUST ) { <S2SV_EndBug>
<S2SV_StartBug> BUFPUTSL ( ob , "<q>" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( cgroup && ! fc_may_access ( fc , controller , cgroup , NULL , O_RDONLY ) ) { <S2SV_EndBug>
<S2SV_StartBug> void validate_positive_rational ( const char * msg , <S2SV_EndBug>
<S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> fprintf ( out , "[URL:<S2SV_blank>%s[StatusCode:<S2SV_blank>%u]" , <S2SV_EndBug> <S2SV_StartBug> fprintf ( out , "[ContentType:<S2SV_blank>%s]" , flow -> http . content_type ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( out , "[UserAgent:<S2SV_blank>%s]" , flow -> http . user_agent ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , & data , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( p -> flags & XFRM_STATE_ESN ) && ! rt ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> static void mark_object ( struct object * obj , struct strbuf * path , <S2SV_EndBug>
<S2SV_StartBug> guchar * match ; <S2SV_EndBug> <S2SV_StartBug> gsize to_match = MIN ( left , buffer -> pos ) ; <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( buffer -> data , & AUTH_END_STRING [ client -> auth_end_offset ] , to_match ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> return match - buffer -> data + strlen ( AUTH_END_STRING ) ; <S2SV_EndBug>
<S2SV_StartBug> z . kind = 0 ; <S2SV_EndBug> <S2SV_StartBug> # define PARSE_STRING s = parse_field ( ndo , & parse , & parselen ) ; if ( ! s ) lose = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( lose ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug>
<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug>
<S2SV_StartBug> st = decrease_reservation ( nr_pages , GFP_USER ) ; <S2SV_EndBug>
<S2SV_StartBug> p += 2 ; <S2SV_EndBug> <S2SV_StartBug> p += 3 ; <S2SV_EndBug> <S2SV_StartBug> p += 4 ; <S2SV_EndBug> <S2SV_StartBug> l = p [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> skb_free_datagram ( sk , skb ) ; <S2SV_EndBug>
<S2SV_StartBug> p = strchr ( context -> buffer , '<S2SV_blank>' ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 1 ; i <= SYSTEM_ID_LEN ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> line += PKT_LEN_SIZE ; <S2SV_EndBug>
<S2SV_StartBug> DBG_ENTER ( "php_mysqlnd_rowp_read_text_protocol_aux" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned long len = php_mysqlnd_net_field_length ( & p ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 odata [ 16 ] ; <S2SV_EndBug>
<S2SV_StartBug> void * * p , void * end , void * obuf , size_t olen ) <S2SV_EndBug> <S2SV_StartBug> ret = ceph_decrypt2 ( secret , & head , & head_len , obuf , & olen , <S2SV_EndBug>
<S2SV_StartBug> if ( name_len == 0 ) goto chunk_end ; <S2SV_EndBug> <S2SV_StartBug> READ_ENCINT ( length ) ; <S2SV_EndBug>
<S2SV_StartBug> xim -> bytes_per_line * xim -> height , IPC_CREAT | 0777 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( event -> attr . inherit || ! is_sampling_event ( event ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> return udp_prot . setsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug>
<S2SV_StartBug> section -> frame = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> section -> sr_coded_error = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> section -> pcnt_neutral = 0.0 ; <S2SV_EndBug>
<S2SV_StartBug> bool off_is_neg = off_reg -> smin_value < 0 ; <S2SV_EndBug> <S2SV_StartBug> alu_state = off_is_neg ? BPF_ALU_NEG_VALUE : 0 ; <S2SV_EndBug>
<S2SV_StartBug> while ( * end_ptr != \'\\"\' && * end_ptr && ++ len ) if ( * end_ptr ++ == '\\\\' ) end_ptr ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( edge_port -> lsr_event ) { <S2SV_EndBug>
<S2SV_StartBug> Rd_WP_DWORD ( image , & Rec . RecordLength ) ; <S2SV_EndBug>
<S2SV_StartBug> return reply_msg ( c , MSG_JOB_TOO_BIG ) ; <S2SV_EndBug>
<S2SV_StartBug> * d ++ = from_hex ( s [ 1 ] ) << 4 | from_hex ( s [ 2 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( buf -> pts == AV_NOPTS_VALUE ) { <S2SV_EndBug>
<S2SV_StartBug> if ( fscanf ( f , "PG%[<S2SV_blank>\\t]%c%c%[<S2SV_blank>\\t+-]%d%[<S2SV_blank>\\t]%d%[<S2SV_blank>\\t]%d" , temp , & endian1 , <S2SV_EndBug>
<S2SV_StartBug> struct crypto_rng * rng = __crypto_rng_cast ( tfm ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( value [ strlen ( value ) - 1 ] == ',' ) { <S2SV_EndBug>
<S2SV_StartBug> if ( M_fs_perms_can_access ( path_new , M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { <S2SV_EndBug>
<S2SV_StartBug> strcat ( t1_buf_array , t1_line_array ) ; <S2SV_EndBug>
<S2SV_StartBug> return scsi_cmd_ioctl ( bd -> bd_disk -> queue , bd -> bd_disk , mode , cmd , arg ) ; <S2SV_EndBug>
<S2SV_StartBug> sc_debug ( card -> ctx , SC_LOG_DEBUG_NORMAL , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ptr = realloc ( priv -> EF_C_DevAut , len ) ; <S2SV_EndBug> <S2SV_StartBug> priv -> EF_C_DevAut_len = len ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horAcc16 ( tif , cp0 , cc ) ; <S2SV_EndBug>
<S2SV_StartBug> struct twopass_rc * const twopass = & cpi -> twopass ; <S2SV_EndBug> <S2SV_StartBug> FIRSTPASS_STATS this_frame_copy ; <S2SV_EndBug> <S2SV_StartBug> double this_frame_intra_error ; <S2SV_EndBug> <S2SV_StartBug> int is_spatial_svc = ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 ) ; <S2SV_EndBug> <S2SV_StartBug> lc = & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] ; <S2SV_EndBug> <S2SV_StartBug> cm -> current_video_frame ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> frames_till_gf_update_due == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> buf = g_malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image , ( unsigned char ) length ) ; ( void ) WriteBlob ( image , length , packet ) ; length = 0 ; } datum >>= 8 ; bits -= 8 ; } if ( free_code > max_code ) { number_bits ++ ; if ( number_bits == MaxGIFBits ) max_code = MaxGIFTable ; else max_code = MaxCode ( number_bits ) ; } } <S2SV_EndBug> <S2SV_StartBug> index = ( IndexPacket ) ( ( size_t ) GetPixelIndex ( indexes + x ) & 0xff ) ; <S2SV_EndBug> <S2SV_StartBug> next_pixel = MagickFalse ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( ctxt -> mode == X86EMUL_MODE_PROT32 ) && ( efer & EFER_LMA ) <S2SV_EndBug> <S2SV_StartBug> switch ( ctxt -> mode ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> cs_sel = ( u16 ) msr_data ; <S2SV_EndBug> <S2SV_StartBug> ss_sel &= ~ SELECTOR_RPL_MASK ; <S2SV_EndBug> <S2SV_StartBug> if ( ctxt -> mode == X86EMUL_MODE_PROT64 || ( efer & EFER_LMA ) ) { <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = msr_data ; <S2SV_EndBug> <S2SV_StartBug> * reg_write ( ctxt , VCPU_REGS_RSP ) = msr_data ; <S2SV_EndBug>
<S2SV_StartBug> if ( chm -> index_root != 0xFFFFFFFF && chm -> index_root > chm -> num_chunks ) { <S2SV_EndBug> <S2SV_StartBug> name = p ; p += name_len ; <S2SV_EndBug>
<S2SV_StartBug> return error ; <S2SV_EndBug>
<S2SV_StartBug> l2tp_bearer_cap_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> const uint32_t * ptr = ( const uint32_t * ) dat ; <S2SV_EndBug>
<S2SV_StartBug> int delta_munlocked ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> delta_munlocked = - nr + pagevec_count ( & pvec_putback ) ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> for ( x = 0 ; x < ( ssize_t ) number_pixels ; x += 2 ) <S2SV_EndBug>
<S2SV_StartBug> update_db_bp_intercept ( & svm -> vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( srp -> bio ) <S2SV_EndBug> <S2SV_StartBug> blk_end_request_all ( srp -> rq , - EIO ) ; <S2SV_EndBug>
<S2SV_StartBug> fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>.asoundrc<S2SV_blank>file\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Warning:<S2SV_blank>cannot<S2SV_blank>transfer<S2SV_blank>.asoundrc<S2SV_blank>in<S2SV_blank>private<S2SV_blank>home<S2SV_blank>directory\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( "clone" , dest ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( zend_symtable_find ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , ( void * * ) & old_data ) == SUCCESS ) { <S2SV_EndBug>
<S2SV_StartBug> rs . respond ( rs . arg , retval , NULL , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( PageDirty ( page ) ) { <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> mask -> matte = MagickFalse ; <S2SV_EndBug> <S2SV_StartBug> channel_image = mask ; <S2SV_EndBug>
<S2SV_StartBug> addresses = state -> endpoints ; <S2SV_EndBug> <S2SV_StartBug> while ( ( address = stok ( addresses , "<S2SV_blank>\\t," , & tok ) ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> align_get_bits ( gb ) ; <S2SV_EndBug>
<S2SV_StartBug> list_for_each_entry_safe ( chain , nc , & ctx -> table -> chains , list ) { <S2SV_EndBug> <S2SV_StartBug> err = nft_delchain ( ctx ) ; <S2SV_EndBug> <S2SV_StartBug> list_for_each_entry_safe ( set , ns , & ctx -> table -> sets , list ) { <S2SV_EndBug> <S2SV_StartBug> if ( set -> flags & NFT_SET_ANONYMOUS && <S2SV_EndBug>
<S2SV_StartBug> f2fs_wait_discard_bios ( sbi ) ; <S2SV_EndBug>
<S2SV_StartBug> free_uid ( group -> inotify_data . user ) ; <S2SV_EndBug>
<S2SV_StartBug> return ( ( Image * ) NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> length ; <S2SV_EndBug> <S2SV_StartBug> sun_pixels = sun_data ; <S2SV_EndBug> <S2SV_StartBug> ( void ) DecodeImage ( sun_data , sun_info . length , sun_pixels , bytes_per_line * <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ret = scsi_disk_emulate_command ( r , r -> iov . iov_base ) ; <S2SV_EndBug>
<S2SV_StartBug> u16 offset = sizeof ( struct ipv6hdr ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( * * nexthdr ) { <S2SV_EndBug> <S2SV_StartBug> offset += ipv6_optlen ( exthdr ) ; <S2SV_EndBug>
<S2SV_StartBug> mpeg4_decode_profile_level ( s , gb ) ; <S2SV_EndBug> <S2SV_StartBug> ( s -> avctx -> level > 0 && s -> avctx -> level < 9 ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ! s -> avctx -> bits_per_raw_sample ) { <S2SV_EndBug>
<S2SV_StartBug> char err_msg [ 64 ] ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( err_msg , <S2SV_EndBug> <S2SV_StartBug> param_num , neatsvpv ( value , 0 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( frame_end - frame < width + 3 ) <S2SV_EndBug>
<S2SV_StartBug> int check_fragments_for_errors ( VP8D_COMP * pbi ) <S2SV_EndBug>
<S2SV_StartBug> for ( mask = pbi -> refresh_frame_flags ; mask ; mask >>= 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( mask & 1 ) { <S2SV_EndBug> <S2SV_StartBug> ref_cnt_fb ( cm -> frame_bufs , & cm -> ref_frame_map [ ref_index ] , <S2SV_EndBug> <S2SV_StartBug> cm -> new_fb_idx ) ; <S2SV_EndBug> <S2SV_StartBug> if ( old_idx >= 0 && cm -> frame_bufs [ old_idx ] . ref_count == 0 ) <S2SV_EndBug> <S2SV_StartBug> cm -> frame_refs [ ref_index ] . idx = INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> for ( s = 0 ; s < ns ; s ++ ) { <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> mutt_error ( "%s" , s + 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( quantum_info -> depth ) <S2SV_EndBug>
<S2SV_StartBug> vp9_writer * w , TOKENEXTRA * * tok , TOKENEXTRA * tok_end , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * m = cm -> mi_grid_visible [ mi_row * cm -> mi_stride + mi_col ] ; <S2SV_EndBug>
<S2SV_StartBug> safe_print ( value , valsz , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> safe_print ( value , valsz , "\\"" ) ; <S2SV_EndBug>
<S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> j = scantable [ idx ++ ] ; <S2SV_EndBug> <S2SV_StartBug> } else if ( group == 21 ) { <S2SV_EndBug>
<S2SV_StartBug> int i , pktsz , ret ; <S2SV_EndBug> <S2SV_StartBug> dev_dbg ( dev , "Checking<S2SV_blank>memory<S2SV_blank>size\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> i = 0x12345678 ; <S2SV_EndBug> <S2SV_StartBug> catc_write_mem ( catc , 0x7a80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> i = 0x87654321 ; <S2SV_EndBug> <S2SV_StartBug> catc_write_mem ( catc , 0xfa80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> catc_read_mem ( catc , 0x7a80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( i ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const unsigned char * old_name ; <S2SV_EndBug> <S2SV_StartBug> if ( source == target ) <S2SV_EndBug> <S2SV_StartBug> old_name = fsnotify_oldname_init ( old_dentry -> d_name . name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( PageDirty ( page ) ) { <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> unix_insert_socket ( unix_sockets_unbound ( sk ) , sk ) ; <S2SV_EndBug>
<S2SV_StartBug> struct user_element * ue = kcontrol -> private_data ; <S2SV_EndBug> <S2SV_StartBug> return change ; <S2SV_EndBug>
<S2SV_StartBug> char * name ; <S2SV_EndBug> <S2SV_StartBug> if ( EVP_CipherInit_ex ( ctx , cipher , NULL , dummy_key , NULL , - 1 ) != 1 ) <S2SV_EndBug>
<S2SV_StartBug> NICK_REC * list ; <S2SV_EndBug> <S2SV_StartBug> if ( list == nick || list -> next == NULL ) { <S2SV_EndBug> <S2SV_StartBug> g_hash_table_insert ( channel -> nicks , nick -> next -> nick , <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> jas_matrix_t * jas_seq2d_create ( int xstart , int ystart , int xend , int yend ) <S2SV_EndBug>
<S2SV_StartBug> imap_quote_string ( q_user , sizeof ( q_user ) , idata -> conn -> account . user ) ; <S2SV_EndBug> <S2SV_StartBug> imap_quote_string ( q_pass , sizeof ( q_pass ) , idata -> conn -> account . pass ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 * buf = calloc ( to - from , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> r_buf_read_at ( bf -> buf , from , buf , to - from ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( to - needle ) > 5 ) { <S2SV_EndBug> <S2SV_StartBug> bool is_wide32 = needle + rc + 2 < to && ! w [ 0 ] && ! w [ 1 ] && ! w [ 2 ] && w [ 3 ] && ! w [ 4 ] ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ( int ) arg >= cdi -> capacity ) <S2SV_EndBug>
<S2SV_StartBug> int bytes_returned , name_len ; <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug>
<S2SV_StartBug> "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%" PRIsize "<S2SV_blank><<S2SV_blank>_%lu_<S2SV_blank><<S2SV_blank>%lu<S2SV_blank>(BT_SHB_INSANE_MAX)" , <S2SV_EndBug>
<S2SV_StartBug> if ( bee -> ui -> ft_in_start ) { <S2SV_EndBug>
<S2SV_StartBug> strcpy ( cat_enum . szPath , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , fileName ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad1 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad1 , '*' ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( cat_enum . szRad2 , sep + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> sep = strchr ( cat_enum . szRad2 , '%' ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sep ) { <S2SV_EndBug>
<S2SV_StartBug> TLV_TCHECK ( 8 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>packet<S2SV_blank>exceeded<S2SV_blank>snapshot" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> hrtimer_cancel ( & stime -> hrt ) ; <S2SV_EndBug>
<S2SV_StartBug> const unsigned char * old_name ; <S2SV_EndBug> <S2SV_StartBug> if ( source == target ) <S2SV_EndBug> <S2SV_StartBug> old_name = fsnotify_oldname_init ( old_dentry -> d_name . name ) ; <S2SV_EndBug>
<S2SV_StartBug> return __blkdev_driver_ioctl ( fc -> dev -> bdev , fc -> dev -> mode , cmd , arg ) ; <S2SV_EndBug>
<S2SV_StartBug> snd_pcm_stream_unlock_irqrestore ( substream , flags ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void bpf_map_inc ( struct bpf_map * map , bool uref ) <S2SV_EndBug> <S2SV_StartBug> atomic_inc ( & map -> refcnt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct pstore * ps = get_info ( store ) ; <S2SV_EndBug> <S2SV_StartBug> stride = ( ps -> exceptions_per_area + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ps -> next_free ++ ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( dest_ptr1 , src_ptr1 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 , src_ptr1 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr1 , src_ptr1 , plane_stride ) ; <S2SV_EndBug>
<S2SV_StartBug> return usb_control_msg ( dev -> udev , usb_rcvctrlpipe ( dev -> udev , 0 ) , <S2SV_EndBug> <S2SV_StartBug> indx , 0 , data , size , 500 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>

<S2SV_StartBug> static int decode_term_subexp ( vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read_bit ( r ) ) <S2SV_EndBug> <S2SV_StartBug> return vp9_read_literal ( r , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read_bit ( r ) ) <S2SV_EndBug> <S2SV_StartBug> return vp9_read_literal ( r , 4 ) + 16 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_read_bit ( r ) ) <S2SV_EndBug> <S2SV_StartBug> return vp9_read_literal ( r , 5 ) + 32 ; <S2SV_EndBug>
<S2SV_StartBug> int best_filt_val = cm -> filter_level ; <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_partial_frame ( saved_frame , cm -> frame_to_show ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_partial_frame ( saved_frame , cm -> frame_to_show ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_partial_frame ( saved_frame , cm -> frame_to_show ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( opened & FILE_OPENED ) ) { <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned short ) ( ( buffer [ 1 ] << 8 ) | buffer [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned short ) ( ( ( ( unsigned char * ) buffer ) [ 0 ] << 8 ) | <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned short ) ( value & 0xffff ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( M_fs_perms_can_access ( path_new , M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> alt = & gspca_dev -> dev -> actconfig -> intf_cache [ 0 ] -> altsetting [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! is_launcher ) <S2SV_EndBug> <S2SV_StartBug> if ( nautilus_file_can_execute ( file ) ) <S2SV_EndBug>
<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ThrowReaderException ( CorruptImageError , <S2SV_EndBug>
<S2SV_StartBug> if ( ! copy_from_iter_full ( kbuf , len , from ) ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> return ret < 0 ? ret : len ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> WaitForMessage ( client , 100000 ) ; <S2SV_EndBug> <S2SV_StartBug> WaitForMessage ( client , 100000 ) ; <S2SV_EndBug>
<S2SV_StartBug> subobj_len = EXTRACT_16BITS ( obj_tptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( subobj_len == 0 ) <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , ndo -> ndo_snapend - p - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> isoclns_print ( ndo , p , length , ndo -> ndo_snapend - p ) ; <S2SV_EndBug>
<S2SV_StartBug> xdr_free ( xdr_func , xdr_ptr ) ; <S2SV_EndBug>
<S2SV_StartBug> c -> framebuf_stride = FFALIGN ( c -> width * 3 , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> aligned_height = FFALIGN ( c -> height , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> && ( ps_dec -> s_bit_stream . u4_offset <= ps_dec -> s_bit_stream . u4_max_offset ) ) <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mode != inode -> i_mode ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> SDev = cd -> device ; <S2SV_EndBug> <S2SV_StartBug> ( unsigned char * ) cgc -> sense , & sshdr , <S2SV_EndBug>
<S2SV_StartBug> log_flush ( LOG_MODE_ERROR ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_cur_slice_num ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ps_dec -> u4_first_slice_in_pic != 0 ) <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! vct_iscrlf ( * p ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( ; ! vct_iscrlf ( * p ) ; p ++ ) <S2SV_EndBug>
<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> lua_newtable ( L ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_SOP ) { <S2SV_EndBug> <S2SV_StartBug> if ( tcp -> csty & J2K_CP_CSTY_EPH ) { <S2SV_EndBug>
<S2SV_StartBug> ( void ) data ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ctx -> priv ) <S2SV_EndBug> <S2SV_StartBug> vpx_codec_mmap_t mmap ; <S2SV_EndBug> <S2SV_StartBug> vp8_init_ctx ( ctx , & mmap ) ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> fragments . count = 0 ; <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> fragments . enabled = <S2SV_EndBug> <S2SV_StartBug> ( ctx -> priv -> alg_priv -> base . init_flags & <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> defer_alloc = 1 ; <S2SV_EndBug> <S2SV_StartBug> ( ctx -> priv -> alg_priv -> base . init_flags & <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> yv12_frame_buffers . use_frame_threads = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> priv -> alg_priv -> yv12_frame_buffers . use_frame_threads && <S2SV_EndBug> <S2SV_StartBug> ( ( ctx -> priv -> alg_priv -> base . init_flags & <S2SV_EndBug> <S2SV_StartBug> VPX_CODEC_USE_ERROR_CONCEALMENT ) <S2SV_EndBug> <S2SV_StartBug> || ( ctx -> priv -> alg_priv -> base . init_flags & <S2SV_EndBug>
<S2SV_StartBug> struct inode * inode = file_inode ( bprm -> file ) ; <S2SV_EndBug> <S2SV_StartBug> bprm -> cred -> euid = current_euid ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( peer != NULL ) && ( type & EVP_PKT_SIGN ) ) <S2SV_EndBug>
<S2SV_StartBug> VP9_CONFIG * oxcf , <S2SV_EndBug> <S2SV_StartBug> oxcf -> profile = cfg -> g_profile ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> width = cfg -> g_w ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> bit_depth = extra_cfg -> bit_depth ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> framerate > 180 ) <S2SV_EndBug> <S2SV_StartBug> oxcf -> framerate = 30 ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> mode = MODE_GOODQUALITY ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> mode = MODE_FIRSTPASS ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> mode = MODE_SECONDPASS_BEST ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> end_usage = USAGE_LOCAL_FILE_PLAYBACK ; <S2SV_EndBug> <S2SV_StartBug> if ( cfg -> rc_end_usage == VPX_CQ ) <S2SV_EndBug> <S2SV_StartBug> oxcf -> target_bandwidth = cfg -> rc_target_bitrate ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> best_allowed_q = q_trans [ cfg -> rc_min_quantizer ] ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> worst_allowed_q = q_trans [ cfg -> rc_max_quantizer ] ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> cq_level = q_trans [ extra_cfg -> cq_level ] ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> maximum_buffer_size = cfg -> rc_buf_sz ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> starting_buffer_level = cfg -> rc_buf_initial_sz ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> optimal_buffer_level = cfg -> rc_buf_optimal_sz ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> cpu_used = extra_cfg -> cpu_used ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> play_alternate = extra_cfg -> enable_auto_alt_ref ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> output_pkt_list = extra_cfg -> pkt_list ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> arnr_type = extra_cfg -> arnr_type ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> tile_columns = extra_cfg -> tile_columns ; <S2SV_EndBug> <S2SV_StartBug> oxcf -> lossless = extra_cfg -> lossless ; <S2SV_EndBug> <S2SV_StartBug> if ( oxcf -> ss_number_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> vp9_copy ( oxcf -> ss_target_bitrate , cfg -> ss_target_bitrate ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( oxcf -> ss_number_layers == 1 ) { <S2SV_EndBug> <S2SV_StartBug> oxcf -> ts_target_bitrate [ 0 ] = ( int ) oxcf -> target_bandwidth ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , data , size , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! saw_digit ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> if ( * bp != '\\r' ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> if ( * bp != '\\n' ) <S2SV_EndBug> <S2SV_StartBug> goto invalid ; <S2SV_EndBug> <S2SV_StartBug> return ( - 2 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( - 5 ) ; <S2SV_EndBug>
<S2SV_StartBug> len = dp -> ip6r_len ; <S2SV_EndBug>
<S2SV_StartBug> size_t cnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( ( ! __libc_enable_secure <S2SV_EndBug> <S2SV_StartBug> && strncmp ( & name [ 1 ] , "ORIGIN" , 6 ) == 0 && ( len = 7 ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> && strncmp ( & name [ 2 ] , "ORIGIN}" , 7 ) == 0 && ( len = 9 ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> retval = generic_gss_oid_decompose ( minor_status , <S2SV_EndBug>
<S2SV_StartBug> ( 1u << NM_VECTOR ) | ( 1u << DB_VECTOR ) ; <S2SV_EndBug>
<S2SV_StartBug> file = kmalloc ( sizeof ( * file ) , GFP_NOIO ) ; <S2SV_EndBug>
<S2SV_StartBug> tags = stok ( sclone ( tags ) , "<S2SV_blank>" , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! memcmp ( buf + 5 , "include" , 7 ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ! memcmp ( buf + 5 , "exec" , 4 ) ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> keymap -> num_key_aliases = num_key_aliases ; <S2SV_EndBug>
<S2SV_StartBug> int nalloca ; <S2SV_EndBug> <S2SV_StartBug> if ( skip == 0 && glob_pattern_p ( pat ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( * dp ++ != ( csum & 0xff ) || * dp ++ != ( ( csum >> 8 ) & 0xff ) || * dp ++ != ( ( csum >> 16 ) & 0xff ) || * dp ++ != ( ( csum >> 24 ) & 0xff ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * dp ++ != ( csum & 0xff ) || * dp ++ != ( ( csum >> 8 ) & 0xff ) ) <S2SV_EndBug>
<S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug> <S2SV_StartBug> & dec_tables ) ; <S2SV_EndBug>
<S2SV_StartBug> int32_t sessionId , <S2SV_EndBug> <S2SV_StartBug> int32_t ioId , <S2SV_EndBug>
<S2SV_StartBug> opt = xchg ( & np -> opt , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt ) <S2SV_EndBug> <S2SV_StartBug> sock_kfree_s ( sk , opt , opt -> tot_len ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> dec -> xstart = siz -> xoff ; <S2SV_EndBug> <S2SV_StartBug> dec -> numtiles = dec -> numhtiles * dec -> numvtiles ; <S2SV_EndBug> <S2SV_StartBug> for ( tileno = 0 , tile = dec -> tiles ; tileno < dec -> numtiles ; ++ tileno , <S2SV_EndBug>
<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> void ntlm_print_negotiate_flags ( UINT32 flags ) <S2SV_EndBug>
<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , 1 ) == 1 ) <S2SV_EndBug>
<S2SV_StartBug> struct is_skippable_args args = { x , & result } ; <S2SV_EndBug>
<S2SV_StartBug> dev_data = pci_get_drvdata ( dev ) ; <S2SV_EndBug> <S2SV_StartBug> return pci_write_config_word ( dev , offset , value ) ; <S2SV_EndBug>
<S2SV_StartBug> yi . cfg . mask = 0xffffffff ; <S2SV_EndBug>
<S2SV_StartBug> if ( last_sec > 0 && last_usec > 0 ) { <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> ptr -> server_entry_count = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> tmp_strsize = ( u32 ) ptr -> size - 8 ; <S2SV_EndBug> <S2SV_StartBug> tmp_str [ j ] = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> ptr -> quality_entry_count = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> tmp_strsize = ( u32 ) ptr -> size - 8 ; <S2SV_EndBug> <S2SV_StartBug> tmp_str [ j ] = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> tmp_strsize = ( u32 ) ptr -> size - 8 ; <S2SV_EndBug> <S2SV_StartBug> tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> tmp_strsize = ( u32 ) ptr -> size - 8 ; <S2SV_EndBug> <S2SV_StartBug> tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ptr -> fragment_run_table_count = gf_bs_read_u8 ( bs ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t sampleRate ; <S2SV_EndBug> <S2SV_StartBug> if ( ! config -> num_channels ) { <S2SV_EndBug>
<S2SV_StartBug> void ntlm_write_message_fields_buffer ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ( ldblk > 9999 ) || ( ldblk < 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> s32 smin_val = src_reg -> smin_value ; <S2SV_EndBug> <S2SV_StartBug> u32 umin_val = src_reg -> umin_value ; <S2SV_EndBug> <S2SV_StartBug> dst_reg -> s32_min_value = dst_reg -> umin_value ; <S2SV_EndBug> <S2SV_StartBug> dst_reg -> s32_max_value = dst_reg -> umax_value ; <S2SV_EndBug>
<S2SV_StartBug> if ( setpwnam ( ctl -> pw ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> for ( row = 0 ; row < 6 ; row ++ ) <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> homo = ( char ( * ) [ TS ] [ TS ] ) ( buffer + TS * TS * ( ndir * 10 + 6 ) ) ; <S2SV_EndBug> <S2SV_StartBug> allhex [ row ] [ col ] [ 0 ] [ c ^ ( g * 2 & d ) ] = h + v * width ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> row -- ; <S2SV_EndBug>
<S2SV_StartBug> dlen -= 2 ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug>
<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ii -> ii_ioapic_irq > 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ii -> ii_pirq_pin = pirq_alloc_pin ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug>
<S2SV_StartBug> write ( logfile_fd , data , length ) ; <S2SV_EndBug>
<S2SV_StartBug> s_cmd -> command += ec -> cmd_offset ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( arg , s_cmd , sizeof ( * s_cmd ) + u_cmd . insize ) ) <S2SV_EndBug>
<S2SV_StartBug> free ( ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( class == BPF_ALU || class == BPF_ALU64 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> u1_num_mbs ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug>
<S2SV_StartBug> return true ; <S2SV_EndBug> <S2SV_StartBug> return true ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! replay_esn || ! rp ) <S2SV_EndBug> <S2SV_StartBug> if ( xfrm_replay_state_esn_len ( replay_esn ) != <S2SV_EndBug> <S2SV_StartBug> xfrm_replay_state_esn_len ( up ) ) <S2SV_EndBug>
<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int do_recon ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) ; <S2SV_EndBug> <S2SV_StartBug> int last_part_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) <S2SV_EndBug> <S2SV_StartBug> partition = partition_lookup [ bsl ] [ bs_type ] ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bsize == BLOCK_16X16 ) { <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) = bsize ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row , mi_col , & none_rate , & none_dist , bsize , <S2SV_EndBug> <S2SV_StartBug> if ( none_rate < INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> none_rate += x -> partition_cost [ pl ] [ PARTITION_NONE ] ; <S2SV_EndBug> <S2SV_StartBug> none_rd = RDCOST ( x -> rdmult , x -> rddiv , none_rate , none_dist ) ; <S2SV_EndBug> <S2SV_StartBug> restore_context ( cpi , mi_row , mi_col , a , l , sa , sl , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) = subsize ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row , mi_col , & last_part_rate , <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( last_part_rate != INT_MAX && <S2SV_EndBug> <S2SV_StartBug> int rt = 0 ; <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , subsize ) , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row + ( mi_step >> 1 ) , mi_col , & rt , & dt , <S2SV_EndBug> <S2SV_StartBug> subsize , get_block_context ( x , subsize ) , INT64_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rt == INT_MAX || dt == INT64_MAX ) { <S2SV_EndBug> <S2SV_StartBug> last_part_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> last_part_rate += rt ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( last_part_rate != INT_MAX && <S2SV_EndBug> <S2SV_StartBug> int rt = 0 ; <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , subsize ) , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row , mi_col + ( mi_step >> 1 ) , & rt , & dt , <S2SV_EndBug> <S2SV_StartBug> subsize , get_block_context ( x , subsize ) , INT64_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rt == INT_MAX || dt == INT64_MAX ) { <S2SV_EndBug> <S2SV_StartBug> last_part_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> last_part_rate += rt ; <S2SV_EndBug> <S2SV_StartBug> last_part_rate = 0 ; <S2SV_EndBug> <S2SV_StartBug> int rt ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = i ; <S2SV_EndBug> <S2SV_StartBug> i != 3 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rt == INT_MAX || dt == INT64_MAX ) { <S2SV_EndBug> <S2SV_StartBug> last_part_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> last_part_rate += rt ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( last_part_rate < INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> last_part_rate += x -> partition_cost [ pl ] [ partition ] ; <S2SV_EndBug> <S2SV_StartBug> last_part_rd = RDCOST ( x -> rdmult , x -> rddiv , last_part_rate , last_part_dist ) ; <S2SV_EndBug> <S2SV_StartBug> chosen_rate = 0 ; <S2SV_EndBug> <S2SV_StartBug> restore_context ( cpi , mi_row , mi_col , a , l , sa , sl , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> int rt = 0 ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , split_subsize ) = i ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row + y_idx , mi_col + x_idx , & rt , & dt , <S2SV_EndBug> <S2SV_StartBug> if ( rt == INT_MAX || dt == INT64_MAX ) { <S2SV_EndBug> <S2SV_StartBug> chosen_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> chosen_rate += rt ; <S2SV_EndBug> <S2SV_StartBug> encode_sb ( cpi , tile , tp , mi_row + y_idx , mi_col + x_idx , 0 , <S2SV_EndBug> <S2SV_StartBug> split_subsize ) ; <S2SV_EndBug> <S2SV_StartBug> chosen_rate += x -> partition_cost [ pl ] [ PARTITION_NONE ] ; <S2SV_EndBug> <S2SV_StartBug> if ( chosen_rate < INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> chosen_rate += x -> partition_cost [ pl ] [ PARTITION_SPLIT ] ; <S2SV_EndBug> <S2SV_StartBug> chosen_rd = RDCOST ( x -> rdmult , x -> rddiv , chosen_rate , chosen_dist ) ; <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) = subsize ; <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) = bsize ; <S2SV_EndBug> <S2SV_StartBug> restore_context ( cpi , mi_row , mi_col , a , l , sa , sl , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( chosen_rate < INT_MAX && chosen_dist < INT64_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == COMPLEXITY_AQ ) && cm -> seg . update_map ) { <S2SV_EndBug> <S2SV_StartBug> * dist = chosen_dist ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len=%d<S2SV_blank>method=%s" , len - 4 , <S2SV_EndBug> <S2SV_StartBug> if ( 1 < ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( ndo -> ndo_vflag && 4 < len ) { <S2SV_EndBug> <S2SV_StartBug> return ( const u_char * ) ext + len ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxw , maxh , max ; <S2SV_EndBug> <S2SV_StartBug> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; <S2SV_EndBug> <S2SV_StartBug> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0U ; i < ( maxh & ~ ( unsigned int ) 1U ) ; i += 2U ) <S2SV_EndBug> <S2SV_StartBug> ny = y + maxw ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> if ( j < maxw ) <S2SV_EndBug> <S2SV_StartBug> if ( i < maxh ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) <S2SV_EndBug> <S2SV_StartBug> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 1 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 1 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; <S2SV_EndBug> <S2SV_StartBug> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; <S2SV_EndBug> <S2SV_StartBug> if ( r ) free ( r ) ; <S2SV_EndBug> <S2SV_StartBug> if ( g ) free ( g ) ; <S2SV_EndBug> <S2SV_StartBug> if ( b ) free ( b ) ; <S2SV_EndBug>
<S2SV_StartBug> static void prefetch_table ( const volatile byte * tab , size_t len ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < len ; i += 8 * 32 ) <S2SV_EndBug> <S2SV_StartBug> ( void ) tab [ len - 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> ! DoReadFile ( infile , & ds64_chunk , chunk_header . ckSize , & bcount ) || <S2SV_EndBug> <S2SV_StartBug> bcount != chunk_header . ckSize ) { <S2SV_EndBug> <S2SV_StartBug> ! WavpackAddWrapper ( wpc , & ds64_chunk , chunk_header . ckSize ) ) { <S2SV_EndBug>
<S2SV_StartBug> void * ptr = malloc ( num * size ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( ptr , '\\0' , ( num * size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } else if ( cpkt . cptype == MT_CPTYPE_PASSWORD ) { <S2SV_EndBug> <S2SV_StartBug> syslog ( LOG_WARNING , _ ( "(%d)<S2SV_blank>Unhandeled<S2SV_blank>control<S2SV_blank>packet<S2SV_blank>type:<S2SV_blank>%d" ) , curconn -> seskey , cpkt . cptype ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( BPF_CLASS ( insn -> code ) != BPF_ALU64 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> if ( umax_val > 63 ) { <S2SV_EndBug> <S2SV_StartBug> __reg_deduce_bounds ( dst_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) ReadBlobString ( image , text ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( AcquireImageColormap ( image , image -> colors , exception ) == MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; <S2SV_EndBug> <S2SV_StartBug> return ( DestroyImageList ( image ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = copy_to_user ( uattr , attr , usize ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( buf = jas_alloc2 ( bufsize , sizeof ( jpc_fix_t ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_sock_rfree ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_skb_set_owner_r ( skb , newsk ) ; <S2SV_EndBug> <S2SV_StartBug> sctp_clear_pd ( oldsk ) ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_decode ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> UINT16 rw = ROUND_UP_TO ( context -> width , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> BYTE shift = context -> ColorLossLevel - 1 ; <S2SV_EndBug> <S2SV_StartBug> BYTE * bmpdata = context -> BitmapData ; <S2SV_EndBug> <S2SV_StartBug> * bmpdata ++ = MINMAX ( b_val , 0 , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> dst [ y * linesize + x ] = clr ; <S2SV_EndBug>
<S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( psf = calloc ( 1 , sizeof ( SF_PRIVATE ) ) ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( task -> task_state_flags & SAS_TASK_STATE_DONE ) ) <S2SV_EndBug> <S2SV_StartBug> task -> task_state_flags |= SAS_TASK_STATE_ABORTED ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> devc -> voc [ voice ] . panning = value ; <S2SV_EndBug>
<S2SV_StartBug> cib_remote_opaque_t * private = cib -> variant_opaque ; <S2SV_EndBug> <S2SV_StartBug> gnutls_bye ( * ( private -> command . session ) , GNUTLS_SHUT_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> gnutls_bye ( * ( private -> callback . session ) , GNUTLS_SHUT_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> gnutls_anon_free_client_credentials ( anon_cred_c ) ; <S2SV_EndBug> <S2SV_StartBug> gnutls_global_deinit ( ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! is_exception ( intr_info ) ) <S2SV_EndBug>
<S2SV_StartBug> static int update_mv ( vp9_writer * w , const unsigned int ct [ 2 ] , vp9_prob * cur_p , <S2SV_EndBug> <S2SV_StartBug> vp9_prob upd_p ) { <S2SV_EndBug> <S2SV_StartBug> const vp9_prob new_p = get_binary_prob ( ct [ 0 ] , ct [ 1 ] ) | 1 ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , update , upd_p ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , new_p >> 1 , 7 ) ; <S2SV_EndBug>
<S2SV_StartBug> defaultoptions ( & h ) ; <S2SV_EndBug> <S2SV_StartBug> luaL_checkstack ( L , 1 , "too<S2SV_blank>many<S2SV_blank>results" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , res ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , f ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushnumber ( L , d ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! lua_isnumber ( L , - 1 ) ) <S2SV_EndBug> <S2SV_StartBug> luaL_error ( L , "format<S2SV_blank>`c0\'<S2SV_blank>needs<S2SV_blank>a<S2SV_blank>previous<S2SV_blank>size" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pop ( L , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> luaL_argcheck ( L , pos + size <= ld , 2 , "data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short" ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushlstring ( L , data + pos , size ) ; <S2SV_EndBug> <S2SV_StartBug> lua_pushlstring ( L , data + pos , size - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> return lua_gettop ( L ) - 2 ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < ctx -> msgcount ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> int overflow_error = 0 ; <S2SV_EndBug> <S2SV_StartBug> res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( u = 0 ; u < line_length ; u ++ ) { <S2SV_EndBug> <S2SV_StartBug> res -> ContribRow [ u ] . Weights = ( double * ) gdMalloc ( windows_size * sizeof ( double ) ) ; <S2SV_EndBug> <S2SV_StartBug> u -- ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i <= u ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> timer -> it_overrun += 1 << i ; <S2SV_EndBug>
<S2SV_StartBug> map = q -> bufs [ first ] -> map = kmalloc ( sizeof ( struct videobuf_mapping ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> net_connect_ip_ssl ( ip , port , own_ip , server -> connrec -> ssl_cert , server -> connrec -> ssl_pkey , <S2SV_EndBug>
<S2SV_StartBug> static void write_segment_id ( vp9_writer * w , const struct segmentation * seg , <S2SV_EndBug>
<S2SV_StartBug> FLACHeader hdr ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( last ) break ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( clone_flags & CLONE_THREAD ) && ! ( clone_flags & CLONE_SIGHAND ) ) <S2SV_EndBug>
<S2SV_StartBug> struct dentry * dir ; <S2SV_EndBug> <S2SV_StartBug> ci = d_inode ( dir ) -> i_crypt_info ; <S2SV_EndBug> <S2SV_StartBug> dir_has_key = ( ci != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> fp -> protocol = altsd -> bInterfaceProtocol ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( bad_format ( optarg ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( bad_format ( optarg ) ) { <S2SV_EndBug>
<S2SV_StartBug> kvmclock_reset ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_offset = data & ~ ( PAGE_MASK | 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vcpu -> arch . time_offset & <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . time_page = <S2SV_EndBug> <S2SV_StartBug> gfn_to_page ( vcpu -> kvm , data >> PAGE_SHIFT ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned v = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_planes = get_rac ( c , state ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_h_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> chroma_v_shift = get_symbol ( c , state , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> f -> transparency = get_rac ( c , state ) ; <S2SV_EndBug>
<S2SV_StartBug> usb_set_intfdata ( interface , dev ) ; <S2SV_EndBug> <S2SV_StartBug> exit : <S2SV_EndBug>
<S2SV_StartBug> int i , length_modes , length_chars ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> snd_seq_timer_stop ( q -> timer ) ; <S2SV_EndBug> <S2SV_StartBug> snd_seq_timer_close ( q ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _payload ) { <S2SV_EndBug>
<S2SV_StartBug> struct address_space * mapping ; <S2SV_EndBug> <S2SV_StartBug> if ( mapping ) <S2SV_EndBug>
<S2SV_StartBug> struct sk_buff * skb ; <S2SV_EndBug> <S2SV_StartBug> if ( dump_one_state ( x , 0 , & info ) ) { <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug>
<S2SV_StartBug> int n_read = r -> end - r -> begin ; <S2SV_EndBug>
<S2SV_StartBug> if ( length > 4 ) <S2SV_EndBug> <S2SV_StartBug> if ( length > 6 ) <S2SV_EndBug>
<S2SV_StartBug> uint32_t bcount ; <S2SV_EndBug>
<S2SV_StartBug> void unix_notinflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight -- ; <S2SV_EndBug>
<S2SV_StartBug> if ( argReg >= regsz ) { <S2SV_EndBug>
<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( MagickPixelPacket * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> EVP_MD_CTX_init ( & ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> build_config ( char * prefix , struct server * server ) <S2SV_EndBug> <S2SV_StartBug> fprintf ( f , "\\"password\\":\\"%s\\"" , server -> password ) ; <S2SV_EndBug> <S2SV_StartBug> if ( server -> method ) fprintf ( f , ",\\n\\"method\\":\\"%s\\"" , server -> method ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ses -> server -> sign && ses -> server -> ops -> generate_signingkey ) { <S2SV_EndBug> <S2SV_StartBug> rc = ses -> server -> ops -> generate_signingkey ( ses ) ; <S2SV_EndBug> <S2SV_StartBug> goto keygen_exit ; <S2SV_EndBug> <S2SV_StartBug> keygen_exit : <S2SV_EndBug>
<S2SV_StartBug> if ( type == HUB_INIT2 ) <S2SV_EndBug> <S2SV_StartBug> if ( type == HUB_INIT3 ) <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> unsigned char buffer [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> const char * base ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> fprintf ( file , "<S2SV_blank>%s=\\"%s\\"" , tag -> bit_name , tag -> bit_val ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( js_regexec ( re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) <S2SV_EndBug>
<S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ldt , VCPU_SREG_LDTR , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; <S2SV_EndBug>
<S2SV_StartBug> int qindex , double rate_target_ratio ) { <S2SV_EndBug> <S2SV_StartBug> const int base_bits_per_mb = vp9_rc_bits_per_mb ( frame_type , qindex , 1.0 ) ; <S2SV_EndBug> <S2SV_StartBug> target_index = i ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_rc_bits_per_mb ( frame_type , i , 1.0 ) <= target_bits_per_mb ) <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( racomp . type , "acomp" , sizeof ( racomp . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> s = strchr ( token , '?' ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( datao + 8 < datao ) || ( datao + 8 < 8 ) || ( datao + 8 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( o + 12 < o ) || ( o + 12 < 12 ) || ( o + 12 > buf_size ) ) { <S2SV_EndBug> <S2SV_StartBug> "ExifMnoteDataPentax" , "Short<S2SV_blank>MakerNote" ) ; <S2SV_EndBug> <S2SV_StartBug> n -> entries [ tcount ] . tag = exif_get_short ( buf + o + 0 , n -> order ) + base ; <S2SV_EndBug> <S2SV_StartBug> if ( ( dataofs + s < dataofs ) || ( dataofs + s < s ) || <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & ucontrol -> value , ue -> elem_data , ue -> elem_data_size ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> err = ops -> cee_peer_getpg ( netdev , & pg ) ; <S2SV_EndBug> <S2SV_StartBug> struct cee_pfc pfc ; <S2SV_EndBug>
<S2SV_StartBug> unsigned facility ; <S2SV_EndBug> <S2SV_StartBug> # ifdef _WITH_VRRP_ <S2SV_EndBug> <S2SV_StartBug> while ( longindex = - 1 , ( c = getopt_long ( argc , argv , ":vhlndDRS:f:p:i:mM::g::Gt::" <S2SV_EndBug> <S2SV_StartBug> case 't' : <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct address_space * mapping = inode -> i_mapping ; <S2SV_EndBug> <S2SV_StartBug> if ( mapping -> nrpages && mapping_tagged ( mapping , PAGECACHE_TAG_DIRTY ) ) { <S2SV_EndBug> <S2SV_StartBug> truncate_pagecache_range ( inode , start , end - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> flags , mode ) ; <S2SV_EndBug>
<S2SV_StartBug> ap_assert ( stream ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! stream -> has_response ) { <S2SV_EndBug> <S2SV_StartBug> return h2_stream_set_error ( stream , <S2SV_EndBug> <S2SV_StartBug> return h2_stream_set_error ( stream , <S2SV_EndBug> <S2SV_StartBug> HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( type == ARPHRD_ETHER ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug>
<S2SV_StartBug> pte_unmap ( page_table ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * p == FAC_CCITT_DEST_NSAP ) { <S2SV_EndBug>
<S2SV_StartBug> if ( cluster != fs -> clusters - 1 ) <S2SV_EndBug>
<S2SV_StartBug> GHashTableIter iter ; <S2SV_EndBug>
<S2SV_StartBug> if ( split_flag ) { <S2SV_EndBug>
<S2SV_StartBug> int size ; <S2SV_EndBug> <S2SV_StartBug> size = offsetof ( PATH , p [ 0 ] ) + sizeof ( path -> p [ 0 ] ) * npts ; <S2SV_EndBug>
<S2SV_StartBug> ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE == e_error ) <S2SV_EndBug>
<S2SV_StartBug> if ( optstr ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" <S2SV_EndBug> <S2SV_StartBug> "mincolors<S2SV_blank>%d\\n" , info -> len , info -> width , info -> height , info -> numplanes , <S2SV_EndBug> <S2SV_StartBug> info -> depth , info -> enctype , info -> siz , info -> hres , info -> vres , <S2SV_EndBug> <S2SV_StartBug> info -> numcolors , info -> mincolors ) ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug> <S2SV_StartBug> jas_image_destroy ( image ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> bmp_info_destroy ( info ) ; <S2SV_EndBug>
<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug>
<S2SV_StartBug> ssize_t ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( tag == 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( len <= 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) <S2SV_EndBug> <S2SV_StartBug> for ( len = 0 ; n > 0 ; n -- ) { <S2SV_EndBug> <S2SV_StartBug> dp += len ; <S2SV_EndBug>
<S2SV_StartBug> rinfo = kmalloc ( SZ_SG_REQ_INFO * SG_MAX_QUEUE , <S2SV_EndBug>
<S2SV_StartBug> if ( ! is_launcher ) <S2SV_EndBug> <S2SV_StartBug> if ( nautilus_file_can_execute ( file ) ) <S2SV_EndBug>
<S2SV_StartBug> commonlen = COMPUTESIZE ( state . num ) ; <S2SV_EndBug>
<S2SV_StartBug> r = do_write_pids ( fc -> pid , f -> controller , f -> cgroup , f -> file , localbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_idct16x16_add ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> vp9_idct16x16_1_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct16x16_10_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct16x16_256_add ( input , dest , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t mus_event [ ] = { 0 , 0 , 0 , 0 } ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mus_mdi , ( uint8_t * ) mus_event , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> gdImagePtr im ; <S2SV_EndBug>
<S2SV_StartBug> if ( rc < 0 ) <S2SV_EndBug> <S2SV_StartBug> dev_err ( & port -> dev , "Reading<S2SV_blank>line<S2SV_blank>status<S2SV_blank>failed<S2SV_blank>(error<S2SV_blank>=<S2SV_blank>%d)\\n" , <S2SV_EndBug>
<S2SV_StartBug> l_strnstart ( const char * tstr1 , u_int tl1 , const char * str2 , u_int l2 ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> queue_remove_all ( att -> req_queue , NULL , NULL , disc_att_send_op ) ; <S2SV_EndBug> <S2SV_StartBug> queue_foreach ( att -> disconn_list , disconn_handler , INT_TO_PTR ( err ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int segment_id , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_segfeature_active ( & cm -> seg , segment_id , SEG_LVL_SKIP ) ) { <S2SV_EndBug> <S2SV_StartBug> const int skip = vp9_read ( r , cm -> fc . skip_probs [ ctx ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cm -> frame_parallel_decoding_mode ) <S2SV_EndBug>
<S2SV_StartBug> return xfrm6_rcv_spi ( skb , spi ) ; <S2SV_EndBug>
<S2SV_StartBug> OPJ_UNUSED ( p_manager ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t mask = ( size_t ) self -> mt_mask ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ND_TTEST2 ( * tptr , 1 ) ) <S2SV_EndBug>
<S2SV_StartBug> ops -> destroy ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> char * pin , * pout ; <S2SV_EndBug>
<S2SV_StartBug> { size_t chanmap_size = psf -> sf . channels * sizeof ( psf -> channel_map [ 0 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( ! strncmp ( network_line , "GET_DN<S2SV_blank>" , strlen ( "GET_DN<S2SV_blank>" ) ) && msg_id != UINT32_MAX && network_client_get_version ( fd ) > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> vp9_ppflags_t flags = { 0 } ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! addr || addr -> sa_family != AF_BLUETOOTH ) <S2SV_EndBug>
<S2SV_StartBug> # ifdef CONFIG_FUTEX <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( tsk -> robust_list ) ) <S2SV_EndBug>
<S2SV_StartBug> in_uint16_le ( s , type ) ; <S2SV_EndBug> <S2SV_StartBug> if ( status == CLIPRDR_ERROR ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug>
<S2SV_StartBug> assert ( status != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> netdev_dbg ( vif -> dev , "GSO<S2SV_blank>size<S2SV_blank>must<S2SV_blank>not<S2SV_blank>be<S2SV_blank>zero.\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "Bad<S2SV_blank>GSO<S2SV_blank>type<S2SV_blank>%d.\\n" , gso -> u . gso . type ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache_entry * ce = NULL ; <S2SV_EndBug> <S2SV_StartBug> int error = 0 ; <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , "refcount<S2SV_blank>now=0;<S2SV_blank>freeing" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug> <S2SV_StartBug> if ( ce ) <S2SV_EndBug>
<S2SV_StartBug> ( sctp_paramhdr_t * ) addip_hdr -> params , <S2SV_EndBug>
<S2SV_StartBug> for ( vma = mm -> mmap ; vma ; vma = vma -> vm_next ) <S2SV_EndBug>
<S2SV_StartBug> ip_printroute ( ndo , cp , option_len ) ; <S2SV_EndBug>
<S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> unpack_streams += ( size_t ) f [ i ] . numUnpackStreams ; <S2SV_EndBug>
<S2SV_StartBug> char * tmpptr = key + strlen ( key ) ; <S2SV_EndBug>
<S2SV_StartBug> atomic_inc ( & sb -> s_active ) ; <S2SV_EndBug>
<S2SV_StartBug> sigev_none = ( timr -> it_sigev_notify & ~ SIGEV_THREAD_ID ) == SIGEV_NONE ; <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> encode_txfm_probs ( cm , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> update_skip_probs ( cm , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> prob_diff_update ( vp9_inter_mode_tree , cm -> fc . inter_mode_probs [ i ] , <S2SV_EndBug> <S2SV_StartBug> cm -> counts . inter_mode [ i ] , INTER_MODES , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> update_switchable_interp_probs ( cm , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . intra_inter [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> allow_comp_inter_inter ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( & header_bc , use_compound_pred ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( & header_bc , use_hybrid_pred ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . comp_inter [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . single_ref [ i ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . single_ref [ i ] [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . comp_ref [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> prob_diff_update ( vp9_intra_mode_tree , cm -> fc . y_mode_prob [ i ] , <S2SV_EndBug> <S2SV_StartBug> cm -> counts . y_mode [ i ] , INTRA_MODES , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . partition [ i ] , PARTITION_TYPES , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_nmv_probs ( cm , cm -> allow_high_precision_mv , & header_bc ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_stop_encode ( & header_bc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( packet -> payload_packet_len >= 40 ) { <S2SV_EndBug> <S2SV_StartBug> ovpn_payload += 2 ; <S2SV_EndBug> <S2SV_StartBug> htons ( packet -> udp -> source ) , htons ( packet -> udp -> dest ) , packet -> payload_packet_len ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( packet -> payload_packet_len == 112 ) <S2SV_EndBug> <S2SV_StartBug> || ( ( packet -> payload_packet_len == 80 ) <S2SV_EndBug> <S2SV_StartBug> alen = ovpn_payload [ P_PACKET_ID_ARRAY_LEN_OFFSET ( hmac_size ) ] ; <S2SV_EndBug> <S2SV_StartBug> session_remote = ovpn_payload + P_PACKET_ID_ARRAY_LEN_OFFSET ( hmac_size ) + 1 + alen * 4 ; <S2SV_EndBug> <S2SV_StartBug> if ( memcmp ( flow -> ovpn_session_id , session_remote , 8 ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> case 0x2f8 : <S2SV_EndBug>
<S2SV_StartBug> return TRUE ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( data & ~ mask ) != PSW_USER_BITS ) <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( & next_frame , 0 , sizeof ( next_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & first_frame , this_frame , sizeof ( * this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & last_frame , this_frame , sizeof ( * this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & tmp_frame , & first_frame , sizeof ( first_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> boost_score = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> int projected_buffer_level = ( int ) cpi -> buffer_level ; <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * end , * ptr = avpkt -> data ; <S2SV_EndBug> <S2SV_StartBug> end = avpkt -> data + avpkt -> size ; <S2SV_EndBug> <S2SV_StartBug> while ( memcmp ( ptr , "/*<S2SV_blank>XPM<S2SV_blank>*/" , 9 ) && ptr < end - 9 ) <S2SV_EndBug> <S2SV_StartBug> size *= 94 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ncolors ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ptr += mod_strcspn ( ptr , "\\"" ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < avctx -> width ; j ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( ptr + cpp > end ) <S2SV_EndBug>
<S2SV_StartBug> struct in6_addr * addr , uint32_t * ifindex ) <S2SV_EndBug> <S2SV_StartBug> unsigned char cbuf [ CMSG_SPACE ( sizeof ( struct in6_pktinfo ) ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cmsghdr -> cmsg_level == IPPROTO_IPV6 && <S2SV_EndBug> <S2SV_StartBug> cmsghdr -> cmsg_type == IPV6_PKTINFO && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ep_loop_check ( ep , tfile ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> goto error_tgt_fput ; <S2SV_EndBug>
<S2SV_StartBug> dprintk ( 2 , "vm_open<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n" , map , <S2SV_EndBug>
<S2SV_StartBug> mlx4_dbg ( dev , "Free<S2SV_blank>MAC<S2SV_blank>index<S2SV_blank>is<S2SV_blank>%d\\n" , free ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned facility ; <S2SV_EndBug> <S2SV_StartBug> # ifdef _WITH_VRRP_ <S2SV_EndBug> <S2SV_StartBug> while ( longindex = - 1 , ( c = getopt_long ( argc , argv , ":vhlndDRS:f:p:i:mM::g::Gt::" <S2SV_EndBug> <S2SV_StartBug> case 't' : <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( rakcipher . type , "akcipher" , sizeof ( rakcipher . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int x , y , pos ; <S2SV_EndBug> <S2SV_StartBug> if ( gdImageGetPixel ( image , x , y ) == fg ) { <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> int_mv arf_top_mv , gld_top_mv ; <S2SV_EndBug> <S2SV_StartBug> MODE_INFO mi_local = { { 0 } } ; <S2SV_EndBug> <S2SV_StartBug> int_mv arf_left_mv , gld_left_mv ; <S2SV_EndBug> <S2SV_StartBug> int gld_y_in_offset = gld_y_offset ; <S2SV_EndBug> <S2SV_StartBug> arf_left_mv . as_int = mb_stats -> ref [ ALTREF_FRAME ] . m . mv . as_int ; <S2SV_EndBug>
<S2SV_StartBug> dfa * d1 = PyGrammar_FindDFA ( <S2SV_EndBug> <S2SV_StartBug> D ( printf ( "<S2SV_blank>Push<S2SV_blank>...\\n" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char buffer [ 64 ] = { '\\0' } , rdnSeqBuf [ 1024 ] = { '\\0' } ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! php_var_unserialize ( & intern -> array , & p , s + buf_len , & var_hash TSRMLS_CC ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( jp2_getuint16 ( in , & pclr -> numlutents ) || <S2SV_EndBug>
<S2SV_StartBug> FIRSTPASS_STATS * this_frame , <S2SV_EndBug> <S2SV_StartBug> double * this_frame_mv_in_out , <S2SV_EndBug> <S2SV_StartBug> double motion_pct ; <S2SV_EndBug> <S2SV_StartBug> * this_frame_mv_in_out = this_frame -> mv_in_out_count * motion_pct ; <S2SV_EndBug> <S2SV_StartBug> * mv_in_out_accumulator += this_frame -> mv_in_out_count * motion_pct ; <S2SV_EndBug> <S2SV_StartBug> * abs_mv_in_out_accumulator += fabs ( this_frame -> mv_in_out_count * motion_pct ) ; <S2SV_EndBug> <S2SV_StartBug> if ( motion_pct > 0.05 ) { <S2SV_EndBug> <S2SV_StartBug> const double this_frame_mvr_ratio = fabs ( this_frame -> mvr_abs ) / <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( fabs ( this_frame -> MVr ) ) ; <S2SV_EndBug> <S2SV_StartBug> const double this_frame_mvc_ratio = fabs ( this_frame -> mvc_abs ) / <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( fabs ( this_frame -> MVc ) ) ; <S2SV_EndBug> <S2SV_StartBug> * mv_ratio_accumulator += ( this_frame_mvr_ratio < this_frame -> mvr_abs ) <S2SV_EndBug> <S2SV_StartBug> ? ( this_frame_mvr_ratio * motion_pct ) <S2SV_EndBug> <S2SV_StartBug> * mv_ratio_accumulator += ( this_frame_mvc_ratio < this_frame -> mvc_abs ) <S2SV_EndBug> <S2SV_StartBug> ? ( this_frame_mvc_ratio * motion_pct ) <S2SV_EndBug>
<S2SV_StartBug> ( ( flags & O_ACCMODE ) == O_WRONLY || <S2SV_EndBug> <S2SV_StartBug> ( flags & O_ACCMODE ) == O_RDWR ) ) { <S2SV_EndBug>
<S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug>
<S2SV_StartBug> char common_name [ FIELD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> SSL_set_verify ( tunnel -> ssl_handle , SSL_VERIFY_PEER , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> pipe -> curbuf = 0 ; <S2SV_EndBug>
<S2SV_StartBug> static char buf [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> buflen += snprintf ( buf + buflen , sizeof ( buf ) - buflen , "%s%s" , <S2SV_EndBug> <S2SV_StartBug> sepstr , lp -> s ) ; <S2SV_EndBug> <S2SV_StartBug> if ( buflen == 0 ) <S2SV_EndBug>
<S2SV_StartBug> cpi -> framerate = ( double ) ( oxcf -> timebase . den ) / <S2SV_EndBug> <S2SV_StartBug> ( double ) ( oxcf -> timebase . num ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_change_config ( cpi , oxcf ) ; <S2SV_EndBug>
<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp ) <S2SV_EndBug>
<S2SV_StartBug> static void rd_pick_sb_modes ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int * totalrate , int64_t * totaldist , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> double rdmult_ratio ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> x -> skip_recode = 0 ; <S2SV_EndBug> <S2SV_StartBug> x -> source_variance = get_sby_perpixel_variance ( cpi , x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> segment_id = vp9_get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> rdmult_ratio = vp9_vaq_rdmult_ratio ( energy ) ; <S2SV_EndBug> <S2SV_StartBug> orig_rdmult = x -> rdmult ; <S2SV_EndBug> <S2SV_StartBug> const int mi_offset = mi_row * cm -> mi_cols + mi_col ; <S2SV_EndBug> <S2SV_StartBug> x -> rdmult += ( ( x -> rdmult * ( complexity - 128 ) ) / 256 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_get_segment_id ( cm , map , bsize , mi_row , mi_col ) ) <S2SV_EndBug> <S2SV_StartBug> vp9_rd_pick_intra_mode_sb ( cpi , x , totalrate , totaldist , bsize , ctx , <S2SV_EndBug> <S2SV_StartBug> if ( bsize >= BLOCK_8X8 ) <S2SV_EndBug> <S2SV_StartBug> vp9_rd_pick_inter_mode_sb ( cpi , x , tile , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> totalrate , totaldist , bsize , ctx , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> vp9_rd_pick_inter_mode_sub8x8 ( cpi , x , tile , mi_row , mi_col , totalrate , <S2SV_EndBug> <S2SV_StartBug> if ( aq_mode == VARIANCE_AQ ) { <S2SV_EndBug> <S2SV_StartBug> if ( * totalrate != INT_MAX ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( aq_mode == COMPLEXITY_AQ || aq_mode == CYCLIC_REFRESH_AQ ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> gboolean use_box_blur ; <S2SV_EndBug> <S2SV_StartBug> sy = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> if ( use_box_blur ) { <S2SV_EndBug> <S2SV_StartBug> col_buffer = g_new0 ( guchar , height * bpp * 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> data -> l_head = NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ssl_derive ( s , ckey , skey ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> int transhdrlen , int mtu , unsigned int flags ) <S2SV_EndBug> <S2SV_StartBug> ipv6_select_ident ( & fhdr ) ; <S2SV_EndBug>
<S2SV_StartBug> static int ion_handle_put ( struct ion_handle * handle ) <S2SV_EndBug> <S2SV_StartBug> ret = kref_put ( & handle -> ref , ion_handle_destroy ) ; <S2SV_EndBug>
<S2SV_StartBug> WORD32 pu_skip_wd , pu_skip_ht ; <S2SV_EndBug> <S2SV_StartBug> ps_codec -> s_parse . i4_pic_pu_idx = i4_pic_pu_idx ; <S2SV_EndBug> <S2SV_StartBug> ps_codec -> s_parse . ps_tu ++ ; <S2SV_EndBug> <S2SV_StartBug> tu_t * ps_tu = ps_codec -> s_parse . ps_tu ; <S2SV_EndBug>
<S2SV_StartBug> usleep ( 250000 ) ; <S2SV_EndBug> <S2SV_StartBug> usleep ( 250000 ) ; <S2SV_EndBug>
<S2SV_StartBug> int nmi , struct perf_sample_data * data , <S2SV_EndBug> <S2SV_StartBug> return perf_swevent_overflow ( event , 1 , nmi , data , regs ) ; <S2SV_EndBug> <S2SV_StartBug> perf_swevent_overflow ( event , 0 , nmi , data , regs ) ; <S2SV_EndBug>
<S2SV_StartBug> return PTR_ERR ( tty ) ; <S2SV_EndBug>
<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> m1 [ i ] = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> m2 [ i ] = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> int len ; <S2SV_EndBug> <S2SV_StartBug> len = ( int ) ( cp - ( ip_as_string + 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len > ( int ) sizeof ( buf ) - 1 ) { <S2SV_EndBug>
<S2SV_StartBug> strcat ( line , buf ) ; <S2SV_EndBug> <S2SV_StartBug> strcat ( line , "<S2SV_blank>" ) ; <S2SV_EndBug> <S2SV_StartBug> line [ strlen ( line ) - 1 ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> drop_futex_key_refs ( & q -> key ) ; <S2SV_EndBug>
<S2SV_StartBug> tread . event = SNDRV_TIMER_EVENT_EARLY ; <S2SV_EndBug>
<S2SV_StartBug> j = cJSON_CreateInt ( va_arg ( argp , int64_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> j = cJSON_CreateFloat ( va_arg ( argp , double ) ) ; <S2SV_EndBug>
<S2SV_StartBug> void options_free ( ) { <S2SV_EndBug> <S2SV_StartBug> parse_global_option ( CMD_FREE , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ast_for_call ( struct compiling * c , const node * n , expr_ty func ) <S2SV_EndBug> <S2SV_StartBug> int i , nargs , nkeywords , ngens ; <S2SV_EndBug> <S2SV_StartBug> ngens = 0 ; <S2SV_EndBug> <S2SV_StartBug> ngens ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ngens > 1 || ( ngens && ( nargs || nkeywords ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> for ( k = passIC + 2 ; k < passIC + 2 + passInstructions [ passIC + 1 ] ; k ++ ) <S2SV_EndBug>
<S2SV_StartBug> char combname [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( combname , L_BUF_SIZE , "sel_comb_%dh" , size ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( combname , L_BUF_SIZE , "sel_comb_%dv" , size ) ; <S2SV_EndBug>
<S2SV_StartBug> idata -> state = IMAP_AUTHENTICATED ; <S2SV_EndBug>
<S2SV_StartBug> return sprintf ( buf , "%s\\n" , pdev -> driver_override ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> cJSON * ref ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ref = cJSON_New_Item ( ) ) ) <S2SV_EndBug>
<S2SV_StartBug> ext3_msg ( sb , "error:<S2SV_blank>invalid<S2SV_blank>sb<S2SV_blank>specification:<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> fc . messages = mutt_mem_calloc ( last - first + 1 , sizeof ( unsigned char ) ) ; <S2SV_EndBug>
<S2SV_StartBug> block_in_file = ( sector_t ) page -> index ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PageUptodate ( page ) && ! cleancache_get_page ( page ) ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( cpi -> segment_feature_data , feature_data , sizeof ( cpi -> segment_feature_data ) ) ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( opt_len != mp_dss_len ( mdss , 1 ) && <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_A ) { <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_a ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( mdss -> flags & MP_DSS_m ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len<S2SV_blank>%u" , EXTRACT_16BITS ( opt ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len == mp_dss_len ( mdss , 1 ) ) <S2SV_EndBug>
<S2SV_StartBug> int hours , minutes , seconds ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) & line ; <S2SV_EndBug> <S2SV_StartBug> if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) <S2SV_EndBug> <S2SV_StartBug> CDF_SEC_SIZE ( h ) * sst -> sst_len , CDF_SEC_SIZE ( h ) , sst -> sst_len ) ) ; <S2SV_EndBug>
<S2SV_StartBug> void fdct4_sse2 ( __m128i * in ) { <S2SV_EndBug> <S2SV_StartBug> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; <S2SV_EndBug>
<S2SV_StartBug> sbinfo -> max_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> sbinfo -> free_blocks = config . nr_blocks ; <S2SV_EndBug> <S2SV_StartBug> if ( ! inode ) <S2SV_EndBug> <S2SV_StartBug> root = d_alloc_root ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> kfree ( sbinfo ) ; <S2SV_EndBug>

<S2SV_StartBug> status = enc624j600ReadReg ( interface , ENC624J600_REG_EIR ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIR , EIR_LINKIF ) ; <S2SV_EndBug> <S2SV_StartBug> value = enc624j600ReadReg ( interface , ENC624J600_REG_ESTAT ) ; <S2SV_EndBug> <S2SV_StartBug> value = enc624j600ReadPhyReg ( interface , ENC624J600_PHY_REG_PHSTAT3 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( value & PHSTAT3_SPDDPX2 ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_PKTIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIR , EIR_PKTIF ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_EIE , EIE_LINKIE | EIE_PKTIE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! esil ) <S2SV_EndBug>
<S2SV_StartBug> int a = getnum ( L , fmt , MAXALIGN ) ; <S2SV_EndBug>
<S2SV_StartBug> int len ; <S2SV_EndBug> <S2SV_StartBug> len = ( int ) ( cp - ( ip_as_string + 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len > ( int ) sizeof ( buf ) - 1 ) { <S2SV_EndBug>
<S2SV_StartBug> addr -> addrtype = TIPC_ADDR_ID ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> assert_se ( touch_file ( path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> INST_HANDLER ( lds ) { <S2SV_EndBug>
<S2SV_StartBug> struct inet_sock * inet = inet_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> srr ) <S2SV_EndBug>
<S2SV_StartBug> cifs_small_buf_release ( req ) ; <S2SV_EndBug> <S2SV_StartBug> * nbytes = le32_to_cpu ( rsp -> DataLength ) ; <S2SV_EndBug>
<S2SV_StartBug> sdb_set ( s , "DW_AT_comp_dir" , name , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char lbase [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char strbase [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char ltest [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> char strtest [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> int nbase = sscanf ( lbase , "%255[^\\r\\n]" , strbase ) ; <S2SV_EndBug> <S2SV_StartBug> int ntest = sscanf ( ltest , "%255[^\\r\\n]" , strtest ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( nbase != 255 && ntest != 255 ) ; <S2SV_EndBug>
<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , <S2SV_EndBug>
<S2SV_StartBug> if ( ( data & ~ mask ) != PSW_USER_BITS ) <S2SV_EndBug>
<S2SV_StartBug> struct net_device * dev = vif -> dev ; <S2SV_EndBug> <S2SV_StartBug> if ( netif_carrier_ok ( dev ) ) { <S2SV_EndBug> <S2SV_StartBug> xenvif_down ( vif ) ; <S2SV_EndBug> <S2SV_StartBug> rtnl_unlock ( ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct IGDdatas * datas = ( struct IGDdatas * ) d ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( filter [ i ] . jf ) <S2SV_EndBug> <S2SV_StartBug> t_offset += is_near ( f_offset ) ? 2 : 6 ; <S2SV_EndBug>
<S2SV_StartBug> int err = - EIO ; <S2SV_EndBug> <S2SV_StartBug> uint32_t pos ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bh ) <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug> <S2SV_StartBug> kunmap ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> io -> io_cleanup = port_cleanup ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ( size_t ) CDF_SHORT_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> ( ( const char * ) sst -> sst_tab ) + CDF_SHORT_SEC_POS ( h , id ) , len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! io_end || ! size ) <S2SV_EndBug> <S2SV_StartBug> wq = EXT4_SB ( io_end -> inode -> i_sb ) -> dio_unwritten_wq ; <S2SV_EndBug> <S2SV_StartBug> list_add_tail ( & io_end -> list , <S2SV_EndBug> <S2SV_StartBug> & EXT4_I ( io_end -> inode ) -> i_completed_io_list ) ; <S2SV_EndBug>
<S2SV_StartBug> err = aead_register_instance ( tmpl , inst ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( srp -> bio ) <S2SV_EndBug> <S2SV_StartBug> blk_end_request_all ( srp -> rq , - EIO ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! rc && cifs_sb -> prepathlen && tcon ) { <S2SV_EndBug>
<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> authpending_file_descriptor = open ( cfg -> authpending_file , O_RDONLY | O_CREAT , 0664 ) ; <S2SV_EndBug> <S2SV_StartBug> return retval ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_rle_decode ( BYTE * in , BYTE * out , UINT32 originalSize ) <S2SV_EndBug> <S2SV_StartBug> * out ++ = value ; <S2SV_EndBug> <S2SV_StartBug> FillMemory ( out , len , value ) ; <S2SV_EndBug> <S2SV_StartBug> * out ++ = value ; <S2SV_EndBug>
<S2SV_StartBug> static void InsertRow ( Image * image , ssize_t depth , unsigned char * p , ssize_t y , <S2SV_EndBug> <S2SV_StartBug> size_t bit ; ssize_t x ; <S2SV_EndBug> <S2SV_StartBug> register Quantum * q ; <S2SV_EndBug> <S2SV_StartBug> switch ( depth ) <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) != 0 ) ? 0x01 : 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> for ( bit = 0 ; bit < ( image -> columns % 8 ) ; bit ++ ) <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) ) != 0 ) ? 0x01 : 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) SyncAuthenticPixels ( image , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> if ( q == ( Quantum * ) NULL ) <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0xf , exception ) ; <S2SV_EndBug> <S2SV_StartBug> q += GetPixelChannels ( image ) ; <S2SV_EndBug> <S2SV_StartBug> p ++ ; <S2SV_EndBug> <S2SV_StartBug> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; <S2SV_EndBug> <S2SV_StartBug> if ( q == ( Quantum * ) NULL ) <S2SV_EndBug> <S2SV_StartBug> index = ConstrainColormapIndex ( image , * p , exception ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( arg , & ifr , sizeof ( ifr ) ) ) <S2SV_EndBug> <S2SV_StartBug> ipxitf_put ( ipxif ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i <= SERDES_MAX ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> struct dentry * upper = ovl_dentry_upper ( dentry ) ; <S2SV_EndBug> <S2SV_StartBug> err = - ESTALE ; <S2SV_EndBug> <S2SV_StartBug> if ( upper -> d_parent == upperdir ) { <S2SV_EndBug> <S2SV_StartBug> dput ( upper ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> inode_unlock ( dir ) ; <S2SV_EndBug>
<S2SV_StartBug> ctx = d -> log_ctx ; <S2SV_EndBug>
<S2SV_StartBug> int udf_get_filename ( struct super_block * sb , uint8_t * sname , uint8_t * dname , <S2SV_EndBug> <S2SV_StartBug> int flen ) <S2SV_EndBug> <S2SV_StartBug> if ( udf_build_ustr_exact ( unifilename , sname , flen ) ) <S2SV_EndBug> <S2SV_StartBug> len = udf_translate_to_linux ( dname , filename -> u_name , filename -> u_len , <S2SV_EndBug>
<S2SV_StartBug> if ( transhdrlen ) { <S2SV_EndBug> <S2SV_StartBug> copy = datalen - transhdrlen - fraggap ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int doffset = head_skb -> data - skb_mac_header ( head_skb ) ; <S2SV_EndBug> <S2SV_StartBug> pos += skb_headlen ( list_skb ) ; <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( ! nfrags ) ; <S2SV_EndBug> <S2SV_StartBug> * nskb_frag = * frag ; <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> if ( new_fs ) { <S2SV_EndBug>
<S2SV_StartBug> gdFree ( tmp_im ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( opt_len == 12 && flags & TH_SYN ) && <S2SV_EndBug> <S2SV_StartBug> ! ( opt_len == 24 && flags & TH_ACK ) ) <S2SV_EndBug>
<S2SV_StartBug> ngx_int_t rc ; <S2SV_EndBug> <S2SV_StartBug> size_t size ; <S2SV_EndBug> <S2SV_StartBug> rc = ngx_http_lua_set_content_length_header ( sr , <S2SV_EndBug> <S2SV_StartBug> rc = ngx_http_lua_set_content_length_header ( sr , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> # if 1 <S2SV_EndBug> <S2SV_StartBug> if ( ngx_http_lua_copy_request_headers ( sr , r ) != NGX_OK ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ( void ) SetImageColorspace ( image , GRAYColorspace ) ; <S2SV_EndBug>
<S2SV_StartBug> tcp_init_send_head ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < count && strlen ( op -> txt ) + 10 < R_ASM_BUFSIZE ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> int optxtlen = strlen ( op -> txt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> snprintf ( op -> txt + strlen ( op -> txt ) , R_ASM_BUFSIZE , "%d" , def ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p + 1 , length - 1 , caplen - 1 ) ; <S2SV_EndBug>

<S2SV_StartBug> int64_t i = 0 ; <S2SV_EndBug> <S2SV_StartBug> int isint = 1 ; <S2SV_EndBug> <S2SV_StartBug> f = ( f * 10.0 ) + ( * num - '0' ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * num >= '0' && * num <= '9' ) ; <S2SV_EndBug> <S2SV_StartBug> isint = 0 ; <S2SV_EndBug> <S2SV_StartBug> ++ num ; <S2SV_EndBug> <S2SV_StartBug> else if ( * num == '-' ) { <S2SV_EndBug> <S2SV_StartBug> signsubscale = - 1 ; <S2SV_EndBug> <S2SV_StartBug> i = sign * i ; <S2SV_EndBug> <S2SV_StartBug> item -> valueint = i ; <S2SV_EndBug>
<S2SV_StartBug> mutex_init ( & tu -> tread_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & cpi -> common . lfc , & cpi -> common . fc , sizeof ( cpi -> common . fc ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memmove ( dp , cpi -> partition_d [ i + 1 ] , cpi -> partition_sz [ i + 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> pack_tokens ( & cpi -> bc [ 1 ] , cpi -> tok , cpi -> tok_count ) ; <S2SV_EndBug>
<S2SV_StartBug> * d ++ = from_hex ( s [ 1 ] ) << 4 | from_hex ( s [ 2 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 3 ] << 24 ) | ( buffer [ 2 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned int ) ( value & 0xffffffff ) ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 0 ] << 24 ) | ( buffer [ 1 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 2 ] << 8 ) | buffer [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ( unsigned int ) ( value & 0xffffffff ) ) ; <S2SV_EndBug>
<S2SV_StartBug> i ++ ; <S2SV_EndBug>
<S2SV_StartBug> int n , length ; <S2SV_EndBug> <S2SV_StartBug> struct l2tp_dict_attr_t * da ; <S2SV_EndBug> <S2SV_StartBug> struct l2tp_attr_t * attr , * RV = NULL ; <S2SV_EndBug> <S2SV_StartBug> socklen_t len = sizeof ( addr ) ; <S2SV_EndBug> <S2SV_StartBug> struct msghdr msg ; <S2SV_EndBug> <S2SV_StartBug> struct cmsghdr * cmsg ; <S2SV_EndBug> <S2SV_StartBug> msg . msg_controllen = 128 ; <S2SV_EndBug> <S2SV_StartBug> n = recvfrom ( fd , buf , L2TP_MAX_PACKET_SIZE , 0 , & addr , & len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( n < 6 ) { <S2SV_EndBug> <S2SV_StartBug> if ( hdr -> T == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( n < ntohs ( hdr -> length ) ) { <S2SV_EndBug> <S2SV_StartBug> log_warn ( "l2tp:<S2SV_blank>short<S2SV_blank>packet<S2SV_blank>received<S2SV_blank>(%i/%i)\\n" , n , ntohs ( hdr -> length ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( hdr -> ver == 2 ) { <S2SV_EndBug> <S2SV_StartBug> log_warn ( "l2tp:<S2SV_blank>incorrect<S2SV_blank>message<S2SV_blank>received<S2SV_blank>(L=0)\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( avp -> length > length ) { <S2SV_EndBug> <S2SV_StartBug> if ( conf_verbose ) <S2SV_EndBug> <S2SV_StartBug> log_warn ( "l2tp:<S2SV_blank>unknown<S2SV_blank>avp<S2SV_blank>received<S2SV_blank>(type=%i,<S2SV_blank>M=%u)\\n" , ntohs ( avp -> type ) , avp -> M ) ; <S2SV_EndBug> <S2SV_StartBug> if ( da -> M != - 1 && da -> M != avp -> M ) { <S2SV_EndBug> <S2SV_StartBug> if ( da -> H != - 1 && da -> H != avp -> H ) { <S2SV_EndBug> <S2SV_StartBug> if ( avp -> H ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> orig_avp_len = avp -> length ; <S2SV_EndBug> <S2SV_StartBug> attr -> attr = da ; <S2SV_EndBug> <S2SV_StartBug> attr -> M = avp -> M ; <S2SV_EndBug> <S2SV_StartBug> attr -> length = orig_avp_len - sizeof ( * avp ) ; <S2SV_EndBug> <S2SV_StartBug> ptr += avp -> length ; <S2SV_EndBug> <S2SV_StartBug> length -= avp -> length ; <S2SV_EndBug>
<S2SV_StartBug> port -> exists = false ; <S2SV_EndBug> <S2SV_StartBug> port -> serio = NULL ; <S2SV_EndBug>
<S2SV_StartBug> ret = security_file_permission ( file , MAY_READ ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_WRITE ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_READ ) ; <S2SV_EndBug> <S2SV_StartBug> ret = security_file_permission ( file , MAY_WRITE ) ; <S2SV_EndBug>
<S2SV_StartBug> register const u_char * ep ; <S2SV_EndBug> <S2SV_StartBug> register const struct pim * pim = ( const struct pim * ) bp ; <S2SV_EndBug> <S2SV_StartBug> switch ( PIM_VER ( pim -> pim_typever ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static int shash_no_setkey ( struct crypto_shash * tfm , const u8 * key , <S2SV_EndBug>
<S2SV_StartBug> char * p ; <S2SV_EndBug> <S2SV_StartBug> p = memchr ( str + 1 , ']' , str_len - 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * portno = atoi ( p + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> * portno = atoi ( colon + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return host ; <S2SV_EndBug>
<S2SV_StartBug> "truncated<S2SV_blank>dump<S2SV_blank>file;<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>read<S2SV_blank>%" PRIsize "<S2SV_blank>bytes,<S2SV_blank>only<S2SV_blank>got<S2SV_blank>%" PRIsize , <S2SV_EndBug>
<S2SV_StartBug> if ( count < sizeof hdr ) <S2SV_EndBug>
<S2SV_StartBug> file = fopen ( "/tmp/keepalived.json" , "w" ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = perf_output_begin ( & handle , event , read_event . header . size , 0 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> iocb -> private = ext4_init_io_end ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> gdImagePtr pim = 0 , tim = im ; <S2SV_EndBug> <S2SV_StartBug> pim = gdImageCreatePaletteFromTrueColor ( im , 1 , 256 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( map_data ) <S2SV_EndBug> <S2SV_StartBug> rq -> bio = NULL ; <S2SV_EndBug>
<S2SV_StartBug> is_kvmppc_hv_enabled ( kvm ) ; <S2SV_EndBug>
<S2SV_StartBug> char group [ LONG_STRING ] ; <S2SV_EndBug> <S2SV_StartBug> if ( sscanf ( line , "%s<S2SV_blank>" ANUM "<S2SV_blank>" ANUM "<S2SV_blank>%c<S2SV_blank>%[^\\n]" , group , & last , & first , & mod , desc ) < 4 ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> AcquireNextImage ( image_info , image ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING ) <S2SV_EndBug> <S2SV_StartBug> if ( index > MAX_SUPPORTED_TV_TIMING_V1_2 ) <S2SV_EndBug>
<S2SV_StartBug> actd = ( vp8_variance16x16 ( yd , yd_stride , VP8_ZEROS , 0 , & sse ) + 128 ) >> 8 ; <S2SV_EndBug> <S2SV_StartBug> act = ( vp8_variance16x16 ( y , y_stride , VP8_ZEROS , 0 , & sse ) + 128 ) >> 8 ; <S2SV_EndBug> <S2SV_StartBug> sad = ( vp8_variance16x16 ( y , y_stride , yd , yd_stride , & sse ) ) ; <S2SV_EndBug> <S2SV_StartBug> vsad = ( vp8_variance8x8 ( v , uv_stride , vd , uvd_stride , & sse ) ) ; <S2SV_EndBug> <S2SV_StartBug> act = ( vp8_variance8x8 ( y , y_stride , VP8_ZEROS , 0 , & sse ) + 32 ) >> 6 ; <S2SV_EndBug> <S2SV_StartBug> sad = ( vp8_variance8x8 ( y , y_stride , yd , yd_stride , & sse ) ) ; <S2SV_EndBug> <S2SV_StartBug> usad = ( vp8_variance4x4 ( u , uv_stride , ud , uvd_stride , & sse ) ) ; <S2SV_EndBug> <S2SV_StartBug> vsad = ( vp8_variance4x4 ( v , uv_stride , vd , uvd_stride , & sse ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( udp , up , uvblksize ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( vdp , vp , uvblksize ) ; <S2SV_EndBug>
<S2SV_StartBug> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo -> orderType ] ) ; <S2SV_EndBug>
<S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> char temp [ 500 ] ; <S2SV_EndBug> <S2SV_StartBug> temp [ i ] = fgetc ( fp ) ; <S2SV_EndBug>
<S2SV_StartBug> encode_share_access ( xdr , arg -> open_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> av_freep ( & h -> DPB ) ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) <S2SV_EndBug>
<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug>
<S2SV_StartBug> sctp_auth_key_put ( asoc -> asoc_shared_key ) ; <S2SV_EndBug>
<S2SV_StartBug> return dcfg ; <S2SV_EndBug>
<S2SV_StartBug> pdf = calloc ( 1 , sizeof ( pdf_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( n ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( "Unknown" ) + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * off >= skb -> len ) { <S2SV_EndBug>
<S2SV_StartBug> size2 , mime ) ; <S2SV_EndBug>
<S2SV_StartBug> r -> rtm_flags |= RTM_F_NOTIFY ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( indev != NULL ) { <S2SV_EndBug>
<S2SV_StartBug> truncate_pagecache ( inode , inode -> i_size ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_truncate ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> int procfd ; <S2SV_EndBug> <S2SV_StartBug> pid_t to_cleanup_pid = pid ; <S2SV_EndBug> <S2SV_StartBug> status = 0 ; <S2SV_EndBug> <S2SV_StartBug> ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & attached_pid , sizeof ( attached_pid ) , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( options -> stdin_fd == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(2)" ) ; <S2SV_EndBug> <S2SV_StartBug> shutdown ( ipc_sockets [ 0 ] , SHUT_RDWR ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_error : <S2SV_EndBug> <S2SV_StartBug> procfd = open ( "/proc" , O_DIRECTORY | O_RDONLY ) ; <S2SV_EndBug> <S2SV_StartBug> . procfd = procfd <S2SV_EndBug>
<S2SV_StartBug> rp [ 0 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> res -> nlimbs = ( msize == 1 && mod -> d [ 0 ] == 1 ) ? 0 : 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( s -> s3 -> tmp . new_cipher -> algorithm2 & TLS1_STREAM_MAC ) <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> args -> count = min_t ( u32 , args -> count , PAGE_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> int valuelen = args -> valuelen ; <S2SV_EndBug> <S2SV_StartBug> ASSERT ( ! ( args -> flags & ATTR_KERNOVAL ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int openasuser ; <S2SV_EndBug> <S2SV_StartBug> int should_free_authpending_file = 0 ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , authfile_dir_len , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cfg -> auth_file = buf ; <S2SV_EndBug> <S2SV_StartBug> openasuser = geteuid ( ) == 0 && cfg -> openasuser ; <S2SV_EndBug> <S2SV_StartBug> if ( openasuser ) { <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( pw_s . pw_uid ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( "Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>user<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> DBG ( "Switched<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( seteuid ( 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> DBG ( "Switched<S2SV_blank>back<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>0" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( is_vm_hugetlb_page ( cur ) && end <= cur -> vm_end && <S2SV_EndBug> <S2SV_StartBug> vma -> vm_userfaultfd_ctx . ctx != ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug>
<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> data -> l_head = NULL ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) ReadBlobString ( image , text ) ; <S2SV_EndBug>
<S2SV_StartBug> struct user_struct * user = group -> inotify_data . user ; <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & user -> inotify_devs ) ; <S2SV_EndBug>
<S2SV_StartBug> * lastrow , <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) NULL ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) AcquireQuantumMemory ( MagickMax ( bytes_per_row , <S2SV_EndBug> <S2SV_StartBug> 2 * image -> columns ) , sizeof ( * lastrow ) ) ; <S2SV_EndBug> <S2SV_StartBug> one_row [ i + bit ] = lastrow [ i + bit ] ; <S2SV_EndBug> <S2SV_StartBug> ( void ) CopyMagickMemory ( lastrow , one_row , bytes_per_row ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( retval ) { <S2SV_EndBug>
<S2SV_StartBug> static void mark_object ( struct object * obj , struct strbuf * path , <S2SV_EndBug>
<S2SV_StartBug> void kvm_lapic_set_vapic_addr ( struct kvm_vcpu * vcpu , gpa_t vapic_addr ) <S2SV_EndBug> <S2SV_StartBug> vcpu -> arch . apic -> vapic_addr = vapic_addr ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( update_info ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi ) <S2SV_EndBug> <S2SV_StartBug> * update_info = ctx -> pbi -> refresh_frame_flags ; <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INVALID_PARAM ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) <S2SV_EndBug>
<S2SV_StartBug> * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ) , ( OPJ_INT32 ) p_image -> x0 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_tx1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx ) , ( OPJ_INT32 ) p_image -> x1 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ) , ( OPJ_INT32 ) p_image -> y0 ) ; <S2SV_EndBug> <S2SV_StartBug> * p_ty1 = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> ty0 + ( q + 1 ) * p_cp -> tdy ) , ( OPJ_INT32 ) p_image -> y1 ) ; <S2SV_EndBug>
<S2SV_StartBug> mm -> mmap_legacy_base = mmap_legacy_base ( random_factor ) ; <S2SV_EndBug>
<S2SV_StartBug> const int16_t * src , int16_t * dst , int src_stride ) { <S2SV_EndBug> <S2SV_StartBug> vp9_fdct32x32_rd ( src , dst , src_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_fdct32x32 ( src , dst , src_stride ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strncmp ( line , "currentfile<S2SV_blank>eexec" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( line += 18 ; isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( ; line < last && isspace ( * line ) ; line ++ ) <S2SV_EndBug> <S2SV_StartBug> else if ( last >= line + 4 && isxdigit ( line [ 0 ] ) && isxdigit ( line [ 1 ] ) <S2SV_EndBug> <S2SV_StartBug> && isxdigit ( line [ 2 ] ) && isxdigit ( line [ 3 ] ) ) <S2SV_EndBug>
<S2SV_StartBug> gfp_mask = sk -> sk_allocation ; <S2SV_EndBug> <S2SV_StartBug> int npages ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ND_TTEST2 ( * ar_tpa ( ap ) , PROTO_LEN ( ap ) ) ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "who-has<S2SV_blank>%s" , ipaddr_string ( ndo , TPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>tell<S2SV_blank>%s" , ipaddr_string ( ndo , SPA ( ap ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>is-at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> int layer ; <S2SV_EndBug> <S2SV_StartBug> if ( svc -> number_temporal_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> RATE_CONTROL * const lrc = & lc -> rc ; <S2SV_EndBug> <S2SV_StartBug> if ( svc -> number_temporal_layers > 1 ) { <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = oxcf -> framerate / oxcf -> ts_rate_decimator [ layer ] ; <S2SV_EndBug> <S2SV_StartBug> lc -> framerate = oxcf -> framerate ; <S2SV_EndBug> <S2SV_StartBug> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> psf_binheader_readf ( psf , "p" , psf -> fileoffset ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> dst_reg -> id = ptr_reg -> id ; <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( dst_reg ) ; <S2SV_EndBug>
<S2SV_StartBug> return ast_for_call ( c , CHILD ( n , 1 ) , left_expr ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ep_loop_check ( ep , tfile ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> goto error_tgt_fput ; <S2SV_EndBug>
<S2SV_StartBug> else if ( vcpu -> arch . apic_base & X2APIC_ENABLE ) { <S2SV_EndBug>
<S2SV_StartBug> print_bpf_insn ( insn ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> stlv_type = * ( tptr ++ ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - 2 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> while ( tmp ) <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sidx = sizeof ( t_chunk_info ) * nc ; <S2SV_EndBug> <S2SV_StartBug> cidx = gdCalloc ( sidx , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ( occ0 % rowsize ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ( * sp -> decodepfunc ) ( tif , op0 , rowsize ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> return ( xdr_opaque ( xdrs , * objp , size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> u_char showspi , showdata , showsomedata ; <S2SV_EndBug> <S2SV_StartBug> showdata = 0 ; <S2SV_EndBug> <S2SV_StartBug> showsomedata = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( 3 < ndo -> ndo_vflag ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( showdata || ( showsomedata && ep - cp < 30 ) ) && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( showsomedata && cp < ep ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; <S2SV_EndBug>
<S2SV_StartBug> status = dm9000ReadReg ( DM9000_REG_ISR ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_IMR , mask & ~ IMR_LNKCHGI ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ISR_PT ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_ISR , ISR_PT ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_IMR , mask & ~ IMR_PRI ) ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> codec_id == AV_CODEC_ID_JV ) { <S2SV_EndBug>
<S2SV_StartBug> ext4_show_quota_options ( seq , sb ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug> <S2SV_StartBug> comics_document -> selected_command = <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> int i , pktsz , ret ; <S2SV_EndBug> <S2SV_StartBug> dev_dbg ( dev , "Checking<S2SV_blank>memory<S2SV_blank>size\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> i = 0x12345678 ; <S2SV_EndBug> <S2SV_StartBug> catc_write_mem ( catc , 0x7a80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> i = 0x87654321 ; <S2SV_EndBug> <S2SV_StartBug> catc_write_mem ( catc , 0xfa80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> catc_read_mem ( catc , 0x7a80 , & i , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( i ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void * p = au -> reply_buf ; <S2SV_EndBug> <S2SV_StartBug> ret = ceph_x_decrypt ( & th -> session_key , & p , end , & reply , sizeof ( reply ) ) ; <S2SV_EndBug>
<S2SV_StartBug> cp += advance ; <S2SV_EndBug> <S2SV_StartBug> nh = * cp ; <S2SV_EndBug> <S2SV_StartBug> advance = rt6_print ( ndo , cp , ( const u_char * ) ip6 ) ; <S2SV_EndBug> <S2SV_StartBug> nh = * cp ; <S2SV_EndBug> <S2SV_StartBug> advance = ah_print ( ndo , cp ) ; <S2SV_EndBug> <S2SV_StartBug> nh = enh & 0xff ; <S2SV_EndBug>
<S2SV_StartBug> if ( p == q || size < 16 || size > 256 ) <S2SV_EndBug>
<S2SV_StartBug> "?" , tptr [ 0 ] ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> jpc_tsfb_band_t bnds [ 64 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( KVM_REG_SIZE ( reg -> id ) > sizeof ( tmp ) ) <S2SV_EndBug>
<S2SV_StartBug> list_del ( & ti -> active_list ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> g_return_if_fail ( RS_IS_FILTER ( filter ) ) ; <S2SV_EndBug> <S2SV_StartBug> g_file_set_contents ( "/tmp/rs-filter-graph" , str -> str , str -> len , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( "dot<S2SV_blank>-Tpng<S2SV_blank>>/tmp/rs-filter-graph.png<S2SV_blank></tmp/rs-filter-graph" ) ) <S2SV_EndBug> <S2SV_StartBug> if ( 0 != system ( "gnome-open<S2SV_blank>/tmp/rs-filter-graph.png" ) ) <S2SV_EndBug> <S2SV_StartBug> g_warning ( "Calling<S2SV_blank>gnome-open<S2SV_blank>failed." ) ; <S2SV_EndBug>
<S2SV_StartBug> return res ; <S2SV_EndBug>
<S2SV_StartBug> sb -> s_op = & ext2_sops ; <S2SV_EndBug> <S2SV_StartBug> percpu_counter_destroy ( & sbi -> s_freeblocks_counter ) ; <S2SV_EndBug>
<S2SV_StartBug> ( IN_DEV_SHARED_MEDIA ( out_dev ) || <S2SV_EndBug> <S2SV_StartBug> inet_addr_onlink ( out_dev , saddr , FIB_RES_GW ( * res ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> unsigned long kflags = key -> flags ; <S2SV_EndBug> <S2SV_StartBug> if ( kflags & ( 1 << KEY_FLAG_NEGATIVE ) ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> result = ERR_PTR ( key -> reject_error ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( avctx -> codec_id == AV_CODEC_ID_MPEG4 && avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) <S2SV_EndBug>
<S2SV_StartBug> subsampling_dx = parameters -> subsampling_dx ; <S2SV_EndBug>
<S2SV_StartBug> dev -> product_id = le16_to_cpu ( udev -> descriptor . idProduct ) ; <S2SV_EndBug>
<S2SV_StartBug> mask |= FS_EVENT_ON_CHILD ; <S2SV_EndBug> <S2SV_StartBug> if ( path ) <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> dentry -> d_name . name , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> return udp_prot . getsockopt ( sk , level , optname , optval , optlen ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( data -> strval , * bnode , size ) ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_hp_targetinfo ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> hp_target_info_t karg ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug> <S2SV_StartBug> ( ioc == NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ++ v ; <S2SV_EndBug> <S2SV_StartBug> ( void ) __writev ( STDERR_FILENO , iov , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( xWantedSize > 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( * t ++ != * q ++ ) return 0 ; <S2SV_EndBug>
<S2SV_StartBug> static void nsc_encode_sse2 ( NSC_CONTEXT * context , const BYTE * data , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static char temp [ NFSX_V3FHMAX + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( temp , sfsname , NFSX_V3FHMAX ) ; <S2SV_EndBug> <S2SV_StartBug> temp [ sizeof ( temp ) - 1 ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> if ( recv ( fd , & cmd , sizeof ( cmd ) , MSG_WAITALL ) != sizeof ( cmd ) ) <S2SV_EndBug>
<S2SV_StartBug> bh -> b_bdev = NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( JAS_CAST ( uint , jas_stream_write ( out , ( char * ) ppm -> data , ppm -> len ) ) != ppm -> len ) { <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( tm2interval ( tm , fsec , result ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> AsyncWith ( asdl_seq * items , asdl_seq * body , int lineno , int col_offset , int <S2SV_EndBug> <S2SV_StartBug> p -> lineno = lineno ; <S2SV_EndBug>
<S2SV_StartBug> struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) & cb -> args [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> struct xfrm_dump_info info ; <S2SV_EndBug> <S2SV_StartBug> if ( ! cb -> args [ 0 ] ) { <S2SV_EndBug>
<S2SV_StartBug> case 'h' : <S2SV_EndBug>
<S2SV_StartBug> assert ( ( size_t ) CDF_SEC_SIZE ( h ) == len ) ; <S2SV_EndBug> <S2SV_StartBug> return cdf_read ( info , ( off_t ) CDF_SEC_POS ( h , id ) , <S2SV_EndBug>
<S2SV_StartBug> next = ( next + 1 ) << sdp -> sd_sb . sb_bsize_shift ; <S2SV_EndBug> <S2SV_StartBug> calc_max_reserv ( ip , len , & max_bytes , & data_blocks , & ind_blocks ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned char signature [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> unsigned int siglen = sizeof signature ; <S2SV_EndBug> <S2SV_StartBug> if ( 1 != randomize ( pamh , challenge , sizeof challenge ) ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug>
<S2SV_StartBug> atomic_dec ( & user -> inotify_devs ) ; <S2SV_EndBug>
<S2SV_StartBug> put_device ( & dev -> dev ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t tag = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( tcm_tmr < 0 ) { <S2SV_EndBug> <S2SV_StartBug> rc = srpt_rx_mgmt_fn_tag ( send_ioctx , srp_tsk -> task_tag ) ; <S2SV_EndBug>
<S2SV_StartBug> case '\\r' : <S2SV_EndBug>
<S2SV_StartBug> exit ( i ) ; <S2SV_EndBug>
<S2SV_StartBug> vdev -> ctx = kzalloc ( nvec * sizeof ( struct vfio_pci_irq_ctx ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> OPCODE_DESC * opcode_desc ; <S2SV_EndBug>
<S2SV_StartBug> int n_read = r -> end - r -> begin ; <S2SV_EndBug>
<S2SV_StartBug> if ( flags & __GFP_ZERO ) <S2SV_EndBug>
<S2SV_StartBug> goto out_nofree ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_name != NULL ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( msg -> msg_name , & sa , sizeof ( struct sockaddr_pn ) ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t * result ; <S2SV_EndBug>
<S2SV_StartBug> for ( ; offset < ( MagickOffsetType ) cin . file . image_offset ; offset ++ ) <S2SV_EndBug>
<S2SV_StartBug> case 0x2f8 : <S2SV_EndBug>
<S2SV_StartBug> struct pending_tx_info * pending_tx_info = netbk -> pending_tx_info ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( err ) ) { <S2SV_EndBug> <S2SV_StartBug> netbk -> pending_ring [ index ] = pending_idx ; <S2SV_EndBug> <S2SV_StartBug> pending_ring_idx_t index ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> <S2SV_StartBug> txp = & netbk -> pending_tx_info [ pending_idx ] . req ; <S2SV_EndBug> <S2SV_StartBug> index = pending_index ( netbk -> pending_prod ++ ) ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug> <S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> args . value = kmem_alloc ( valuelen , KM_SLEEP | KM_NOFS ) ; <S2SV_EndBug>
<S2SV_StartBug> hdr . w0 = be32_to_cpu ( buf [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> hdr . w1 = ntohl ( buf [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> s = & pit_state -> channels [ addr ] ; <S2SV_EndBug>
<S2SV_StartBug> fd = open ( authfile , O_RDONLY , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> else if ( fd >= 0 ) <S2SV_EndBug>
<S2SV_StartBug> buf = malloc ( sz + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> static mongo_message * mongo_message_create ( int len , int id , int responseTo , int op ) { <S2SV_EndBug> <S2SV_StartBug> mm -> head . len = len ; <S2SV_EndBug>
<S2SV_StartBug> for ( depth = 1 ; ( GetQuantumRange ( depth ) + 1 ) < max_value ; depth ++ ) ; <S2SV_EndBug>
<S2SV_StartBug> register struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name ) <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_name == NULL ) <S2SV_EndBug> <S2SV_StartBug> return ( tp -> e_name ) ; <S2SV_EndBug>
<S2SV_StartBug> i += 1 ; <S2SV_EndBug>
<S2SV_StartBug> sk -> sk_sndbuf = max_t ( u32 , val * 2 , SOCK_MIN_SNDBUF ) ; <S2SV_EndBug> <S2SV_StartBug> sk -> sk_rcvbuf = max_t ( u32 , val * 2 , SOCK_MIN_RCVBUF ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( data -> strval , * bnode , size ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>CT:<S2SV_blank>%u" , <S2SV_EndBug>
<S2SV_StartBug> bool slow ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> smb_ofile_t * of = NULL ; <S2SV_EndBug> <S2SV_StartBug> of = sr -> fid_ofile ; <S2SV_EndBug>
<S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> int ntlm_read_message_fields_buffer ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug> <S2SV_StartBug> if ( ( fields -> BufferOffset + fields -> Len ) > Stream_Length ( s ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( rv < 0 ) <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> declen = mutt_b64_decode ( out2 , out1 ) ; <S2SV_EndBug> <S2SV_StartBug> declen = mutt_b64_decode ( out2 , out1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( poll ( & pfd , 1 , uipc_main . ch [ ch_id ] . read_poll_tmo_ms ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> n = recv ( fd , p_buf + n_read , len - n_read , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; <S2SV_EndBug> <S2SV_StartBug> q = p ; <S2SV_EndBug> <S2SV_StartBug> goto skip ; <S2SV_EndBug> <S2SV_StartBug> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; <S2SV_EndBug> <S2SV_StartBug> PS_ADD_VARL ( name , namelen ) ; <S2SV_EndBug>
<S2SV_StartBug> status = enc28j60ReadReg ( interface , ENC28J60_REG_EIR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_LINKIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ReadPhyReg ( interface , ENC28J60_PHY_REG_PHIR ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIR , EIR_LINKIF ) ; <S2SV_EndBug> <S2SV_StartBug> value = enc28j60ReadPhyReg ( interface , ENC28J60_PHY_REG_PHSTAT2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( value & PHSTAT2_LSTAT ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_PKTIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIR , EIR_PKTIF ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_EIE , EIE_LINKIE | EIE_PKTIE ) ; <S2SV_EndBug>
<S2SV_StartBug> linkname = archive_entry_hardlink ( a -> entry ) ; <S2SV_EndBug> <S2SV_StartBug> # else <S2SV_EndBug>
<S2SV_StartBug> snprintf ( rcipher . type , CRYPTO_MAX_ALG_NAME , "%s" , "cipher" ) ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( bprm ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_iwht4x4_add ( const int16_t * input , uint8_t * dest , int stride , int eob ) { <S2SV_EndBug> <S2SV_StartBug> vp9_iwht4x4_16_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_iwht4x4_1_add ( input , dest , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> BITSET_SET_BIT ( cc -> bs , ( int ) ( * vs ) ) ; <S2SV_EndBug>

<S2SV_StartBug> struct ip_options * opt = inet -> opt ; <S2SV_EndBug> <S2SV_StartBug> rt = skb_rtable ( skb ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> daddr = opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> is_strictroute && rt -> rt_dst != rt -> rt_gateway ) <S2SV_EndBug> <S2SV_StartBug> skb_push ( skb , sizeof ( struct iphdr ) + ( opt ? opt -> optlen : 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> optlen ) { <S2SV_EndBug> <S2SV_StartBug> iph -> ihl += opt -> optlen >> 2 ; <S2SV_EndBug> <S2SV_StartBug> ip_options_build ( skb , opt , inet -> inet_daddr , rt , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun = - 1 ; <S2SV_EndBug> <S2SV_StartBug> info -> si_overrun += timr -> it_overrun_last ; <S2SV_EndBug>
<S2SV_StartBug> Py_ssize_t i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < memo -> mt_allocated ; ++ i ) { <S2SV_EndBug>
<S2SV_StartBug> if ( sk -> sk_protocol == IPPROTO_TCP ) <S2SV_EndBug>
<S2SV_StartBug> ret = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug>
<S2SV_StartBug> StreamTcpSetEvent ( p , STREAM_PKT_BROKEN_ACK ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 obuf [ ] = { 0xde , 0 } ; <S2SV_EndBug> <S2SV_StartBug> state -> initialized = 1 ; <S2SV_EndBug> <S2SV_StartBug> return dvb_usb_generic_rw ( d , obuf , 2 , NULL , 0 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void unix_notinflight ( struct file * fp ) <S2SV_EndBug> <S2SV_StartBug> fp -> f_cred -> user -> unix_inflight -- ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef AUTOKEY <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> int expected_count = 1 + extra_count ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> radix_tree_replace_slot ( pslot , newpage ) ; <S2SV_EndBug> <S2SV_StartBug> __dec_zone_page_state ( page , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> __inc_zone_page_state ( newpage , NR_FILE_PAGES ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! PageSwapCache ( page ) && PageSwapBacked ( page ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct futex_hash_bucket * hb ; <S2SV_EndBug>
<S2SV_StartBug> static char buf [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> buflen += snprintf ( buf + buflen , sizeof ( buf ) - buflen , "%s%s" , <S2SV_EndBug> <S2SV_StartBug> sepstr , lp -> s ) ; <S2SV_EndBug> <S2SV_StartBug> if ( buflen == 0 ) <S2SV_EndBug>
<S2SV_StartBug> length = extent ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( r = ssh_packet_set_compress_state ( ssh , m ) ) != 0 || <S2SV_EndBug>
<S2SV_StartBug> put_device ( & bus -> dev ) ; <S2SV_EndBug>
<S2SV_StartBug> case RESPONSE_RUN : <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> fatal ( "Failed<S2SV_blank>to<S2SV_blank>output<S2SV_blank>file<S2SV_blank>%s" , name ) ; <S2SV_EndBug>
<S2SV_StartBug> int n = 0 ; <S2SV_EndBug> <S2SV_StartBug> sock = ap_get_conn_socket ( r -> connection ) ; <S2SV_EndBug> <S2SV_StartBug> lua_websocket_read ( L ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) MagickMin ( length , MagickPathExtent - 1 ) ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) ( GetQuantumRange ( depth ) + 1 ) ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixel . red = scale [ pixel . red ] ; <S2SV_EndBug> <S2SV_StartBug> pixel . green = scale [ pixel . green ] ; <S2SV_EndBug> <S2SV_StartBug> pixel . blue = scale [ pixel . blue ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( send ( client_socket_ , data , length , 0 ) == - 1 && errno == ECONNRESET ) { <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( p -> tokenpos == p -> tokenlen ) { <S2SV_EndBug>
<S2SV_StartBug> char fstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> p = parse_tags ( render_priv , p , args [ cnt ] . end , k ) ; <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug>
<S2SV_StartBug> size_t len = 0 ; <S2SV_EndBug>
<S2SV_StartBug> xcfdata = ( XCFPixelInfo * ) AcquireQuantumMemory ( data_length , sizeof ( * xcfdata ) ) ; <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 ) { <S2SV_EndBug>
<S2SV_StartBug> fc . messages = mutt_mem_calloc ( last - first + 1 , sizeof ( unsigned char ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( byte [ i ] & 0x40 ) <S2SV_EndBug>
<S2SV_StartBug> return xfrm6_rcv_spi ( skb , spi ) ; <S2SV_EndBug>
<S2SV_StartBug> unix_notinflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> u8 smac [ ETH_ALEN ] ; <S2SV_EndBug> <S2SV_StartBug> if ( is_iboe ) { <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & lock ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 ip_proto = 0 ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return true ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug> <S2SV_StartBug> key_basic -> n_proto = proto ; <S2SV_EndBug> <S2SV_StartBug> if ( skb_flow_dissector_uses_key ( flow_dissector , <S2SV_EndBug>
<S2SV_StartBug> * lastrow , <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) NULL ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) AcquireQuantumMemory ( MagickMax ( bytes_per_row , <S2SV_EndBug> <S2SV_StartBug> 2 * image -> columns ) , sizeof ( * lastrow ) ) ; <S2SV_EndBug> <S2SV_StartBug> one_row [ i + bit ] = lastrow [ i + bit ] ; <S2SV_EndBug> <S2SV_StartBug> ( void ) CopyMagickMemory ( lastrow , one_row , bytes_per_row ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug> <S2SV_StartBug> lastrow = ( unsigned char * ) RelinquishMagickMemory ( lastrow ) ; <S2SV_EndBug>
<S2SV_StartBug> dbg_hid ( "%s,<S2SV_blank>size:%d\\n" , __func__ , size ) ; <S2SV_EndBug>
<S2SV_StartBug> int len ; <S2SV_EndBug> <S2SV_StartBug> imapc -> mailbox = curl_easy_unescape ( data , path , 0 , & len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! imapc -> mailbox ) <S2SV_EndBug>
<S2SV_StartBug> bh -> b_bdev = NULL ; <S2SV_EndBug>
<S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> int parse_rock_ridge_inode ( struct iso_directory_record * de , struct inode * inode ) <S2SV_EndBug> <S2SV_StartBug> int result = parse_rock_ridge_inode_internal ( de , inode , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> result = parse_rock_ridge_inode_internal ( de , inode , 14 ) ; <S2SV_EndBug>
<S2SV_StartBug> perror ( "malloc<S2SV_blank>(ret)" ) ; <S2SV_EndBug> <S2SV_StartBug> image_infos = ( struct dyld_cache_image_info * ) ( bin -> b -> buf + bin -> hdr . startaddr ) ; <S2SV_EndBug> <S2SV_StartBug> dyld_vmbase = * ( ut64 * ) ( bin -> b -> buf + bin -> hdr . baseaddroff ) ; <S2SV_EndBug> <S2SV_StartBug> if ( image_infos [ idx ] . pathFileOffset > bin -> size ) { <S2SV_EndBug> <S2SV_StartBug> eprintf ( "corrupted<S2SV_blank>file\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> libname = ( char * ) ( bin -> b -> buf + image_infos [ idx ] . pathFileOffset ) ; <S2SV_EndBug>
<S2SV_StartBug> static ssize_t aio_setup_single_vector ( struct kiocb * kiocb ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> kiocb -> ki_iovec -> iov_len = kiocb -> ki_left ; <S2SV_EndBug>
<S2SV_StartBug> struct snd_kcontrol * kctl ; <S2SV_EndBug>
<S2SV_StartBug> struct crypto_rng * rng = __crypto_rng_cast ( tfm ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mount * m , * child ; <S2SV_EndBug> <S2SV_StartBug> source = get_source ( m , prev_dest_mnt , prev_src_mnt , & type ) ; <S2SV_EndBug>
<S2SV_StartBug> p -> src . buf = & p -> src . buf [ raster_block_offset ( BLOCK_8X8 , i , p -> src . stride ) ] ; <S2SV_EndBug> <S2SV_StartBug> pd -> pre [ 0 ] . buf = & pd -> pre [ 0 ] . buf [ raster_block_offset ( BLOCK_8X8 , i , <S2SV_EndBug> <S2SV_StartBug> pd -> pre [ 1 ] . buf = & pd -> pre [ 1 ] . buf [ raster_block_offset ( BLOCK_8X8 , i , <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( * pptr ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( "clone" , dest ) ; <S2SV_EndBug>
<S2SV_StartBug> gctx = group_leader -> ctx ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & gctx -> mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> void * * p , void * end , <S2SV_EndBug> <S2SV_StartBug> void * dp , * dend ; <S2SV_EndBug> <S2SV_StartBug> struct ceph_crypto_key old_key ; <S2SV_EndBug> <S2SV_StartBug> dlen = ceph_x_decrypt ( secret , p , end , dbuf , <S2SV_EndBug> <S2SV_StartBug> tp = ticket_buf ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ceph_decode_need ( p , end , dlen , bad ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> stlv_type = * ( tptr ++ ) ; <S2SV_EndBug> <S2SV_StartBug> len = len - 2 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_MCID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> tptr = tptr + sizeof ( struct isis_subtlv_spb_mcid ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , stlv_len ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * ( tptr ) , ISIS_SUBTLV_SPB_BVID_MIN_LEN ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ctxt -> _eip = ctxt -> src . val ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = ctxt -> src . val ; <S2SV_EndBug>
<S2SV_StartBug> file_sb_list_add ( f , inode -> i_sb ) ; <S2SV_EndBug> <S2SV_StartBug> file_sb_list_del ( f ) ; <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL && inet -> opt -> srr ) { <S2SV_EndBug> <S2SV_StartBug> nexthop = inet -> opt -> faddr ; <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt == NULL || ! inet -> opt -> srr ) <S2SV_EndBug> <S2SV_StartBug> if ( inet -> opt != NULL ) <S2SV_EndBug>
<S2SV_StartBug> strcat ( line , buf ) ; <S2SV_EndBug> <S2SV_StartBug> strcat ( line , "<S2SV_blank>" ) ; <S2SV_EndBug> <S2SV_StartBug> line [ strlen ( line ) - 1 ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> int iskew = imagew - tilew ; <S2SV_EndBug> <S2SV_StartBug> if ( colb + tilew > imagew ) { <S2SV_EndBug>
<S2SV_StartBug> if ( isLua ( L -> ci ) ) <S2SV_EndBug>
<S2SV_StartBug> int remaining = s -> icy_metaint - s -> icy_data_read ; <S2SV_EndBug>
<S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug> <S2SV_StartBug> return len ; <S2SV_EndBug>
<S2SV_StartBug> ret = mount ( path , destpath , "none" , MS_BIND , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> const FRAME_TYPE frame_type = cm -> frame_type ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . auto_filter == 0 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> vp8cx_pick_filter_level ( cpi -> Source , cpi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> filter_level > 0 ) <S2SV_EndBug>
<S2SV_StartBug> int vp8_denoiser_filter_neon ( YV12_BUFFER_CONFIG * mc_running_avg , <S2SV_EndBug> <S2SV_StartBug> unsigned char * sig = signal -> thismb ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 16 ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> int8x16_t v_sum_diff = vdupq_n_s8 ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( abs ( sum_diff ) > SUM_DIFF_THRESHOLD ) <S2SV_EndBug> <S2SV_StartBug> vp8_copy_mem16x16 ( running_avg -> y_buffer + y_offset , running_avg_y_stride , <S2SV_EndBug> <S2SV_StartBug> signal -> thismb , sig_stride ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( unlikely ( copied == 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> iov_iter_advance ( i , copied ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return TEE_SUCCESS ; <S2SV_EndBug>
<S2SV_StartBug> gchar * filename ; <S2SV_EndBug> <S2SV_StartBug> filename = g_build_filename ( g_get_tmp_dir ( ) , "gimp-test.xcf" , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> xdr_free ( xdr_func , xdr_ptr ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pos > CDF_SEC_SIZE ( h ) * sst -> sst_len ) { <S2SV_EndBug> <S2SV_StartBug> pos , CDF_SEC_SIZE ( h ) * sst -> sst_len ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = num_excl_chan ; i < num_excl_chan + 7 ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> int ctrl_id , <S2SV_EndBug> <S2SV_StartBug> vp8_decrypt_init * init = va_arg ( args , vp8_decrypt_init * ) ; <S2SV_EndBug>
<S2SV_StartBug> zval_ptr_dtor ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( can_open_cached ( data -> state , data -> o_arg . open_flags & ( FMODE_READ | FMODE_WRITE | O_EXCL ) ) ) <S2SV_EndBug>
<S2SV_StartBug> struct hci_filter * f = & hci_pi ( sk ) -> filter ; <S2SV_EndBug>

<S2SV_StartBug> struct scatterlist sg [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> sg_init_one ( sg , buf , count ) ; <S2SV_EndBug> <S2SV_StartBug> return __send_to_port ( port , sg , 1 , count , ( void * ) buf , false ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> metadatalength = GetDuration ( mp4 ) ; <S2SV_EndBug> <S2SV_StartBug> float in = 0.0 , out = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t fourcc = GPMF_Key ( ms ) ; <S2SV_EndBug> <S2SV_StartBug> double rate = GetGPMFSampleRate ( mp4 , fourcc , GPMF_SAMPLE_RATE_PRECISE ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( "%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz\\n" , PRINTF_4CC ( fourcc ) , rate ) ; <S2SV_EndBug>
<S2SV_StartBug> cur_logical ++ ; <S2SV_EndBug>
<S2SV_StartBug> return put_user ( tty -> ldisc -> ops -> num , ( int __user * ) p ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t track_size ; <S2SV_EndBug> <S2SV_StartBug> track_delta = malloc ( sizeof ( uint32_t ) * no_tracks ) ; <S2SV_EndBug> <S2SV_StartBug> track_size = * midi_data ++ << 24 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ << 16 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ << 8 ; <S2SV_EndBug> <S2SV_StartBug> track_size |= * midi_data ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( midi_size < track_size ) { <S2SV_EndBug> <S2SV_StartBug> if ( track_size < 3 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( midi_data [ track_size - 3 ] != 0xFF ) <S2SV_EndBug> <S2SV_StartBug> || ( midi_data [ track_size - 2 ] != 0x2F ) <S2SV_EndBug> <S2SV_StartBug> || ( midi_data [ track_size - 1 ] != 0x00 ) ) { <S2SV_EndBug> <S2SV_StartBug> midi_data += track_size ; <S2SV_EndBug> <S2SV_StartBug> midi_size -= track_size ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , running_event [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> goto NEXT_TRACK ; <S2SV_EndBug> <S2SV_StartBug> if ( * tracks [ i ] > 0x7f ) { <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * tracks [ i ] > 0x7f ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , running_event [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * tracks [ i ] > 0x7f ) ; <S2SV_EndBug> <S2SV_StartBug> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; <S2SV_EndBug> <S2SV_StartBug> tracks [ i ] ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( mdi -> reverb ) return ( mdi ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( group_leader -> ctx -> type != ctx -> type ) <S2SV_EndBug>
<S2SV_StartBug> ps_codec -> s_parse . i4_cur_slice_idx = MAX ( 0 , ( ps_codec -> s_parse . i4_cur_slice_idx - 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct br_mdb_entry entry ; <S2SV_EndBug>
<S2SV_StartBug> free ( p ) ; <S2SV_EndBug>
<S2SV_StartBug> char * dbuf ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = process_one_ticket ( ac , secret , & p , end , <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> ret = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> int fit_config_verify_required_sigs ( const void * fit , int conf_noffset , <S2SV_EndBug> <S2SV_StartBug> int noffset ; <S2SV_EndBug> <S2SV_StartBug> const char * reqd_mode ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_rc_init_minq_luts ( ) { <S2SV_EndBug>
<S2SV_StartBug> if ( log_mode != LOG_MODE_CONFIGURED || new_mode != LOG_MODE_ERROR ) <S2SV_EndBug>
<S2SV_StartBug> s_alDriver = Cvar_Get ( "s_alDriver" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug> <S2SV_StartBug> s_alDevice = Cvar_Get ( "s_alDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( args -> buffer_count < 1 ) { <S2SV_EndBug>
<S2SV_StartBug> p = list_first_entry ( & tmp_list , struct mount , mnt_list ) ; <S2SV_EndBug> <S2SV_StartBug> pin_insert_group ( & p -> mnt_umount , & p -> mnt_parent -> mnt , & unmounted ) ; <S2SV_EndBug> <S2SV_StartBug> umount_mnt ( p ) ; <S2SV_EndBug> <S2SV_StartBug> change_mnt_propagation ( p , MS_PRIVATE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tmp_line [ tmp_line_len - 1 ] == '\\n' ) { <S2SV_EndBug> <S2SV_StartBug> if ( tmp_line [ tmp_line_len - 1 ] == '\\r' ) { <S2SV_EndBug> <S2SV_StartBug> # define CHECK_FOR_CNTRL_CHARS ( val ) { if ( val ) { unsigned char * s , * e ; int l ; l = php_url_decode ( val , strlen ( val ) ) ; s = ( unsigned char * ) val ; e = s + l ; while ( s < e ) { if ( iscntrl ( * s ) ) { php_stream_wrapper_log_error ( wrapper , options TSRMLS_CC , "Invalid<S2SV_blank>redirect<S2SV_blank>URL!<S2SV_blank>%s" , new_path ) ; goto out ; } s ++ ; } } } <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug>
<S2SV_StartBug> if ( disk != NULL ) { <S2SV_EndBug> <S2SV_StartBug> const int blocksize = 512 ; <S2SV_EndBug> <S2SV_StartBug> if ( bio ) iob = bio ; <S2SV_EndBug> <S2SV_StartBug> ret = iob -> read_at ( iob -> io , delta + ( blocksize * sector ) , <S2SV_EndBug> <S2SV_StartBug> ( ut8 * ) buf , size * blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == - 1 ) <S2SV_EndBug> <S2SV_StartBug> } else eprintf ( "oops.<S2SV_blank>no<S2SV_blank>disk\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> return put_user ( tty -> ldisc -> ops -> num , ( int __user * ) p ) ; <S2SV_EndBug>
<S2SV_StartBug> start = vma -> vm_start ; <S2SV_EndBug>
<S2SV_StartBug> error = ERROR_END_OF_STREAM ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> error = ERROR_FAILURE ; <S2SV_EndBug>
<S2SV_StartBug> vp9_writer residual_bc ; <S2SV_EndBug> <S2SV_StartBug> TOKENEXTRA * tok [ 4 ] [ 1 << 6 ] , * tok_end ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> above_seg_context , 0 , sizeof ( * cm -> above_seg_context ) * <S2SV_EndBug> <S2SV_StartBug> tok [ 0 ] [ 0 ] = cpi -> tok ; <S2SV_EndBug> <S2SV_StartBug> tok_end = tok [ tile_row ] [ tile_col ] + cpi -> tok_count [ tile_row ] [ tile_col ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_start_encode ( & residual_bc , data_ptr + total_size + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_start_encode ( & residual_bc , data_ptr + total_size ) ; <S2SV_EndBug> <S2SV_StartBug> write_modes ( cpi , & tile , & residual_bc , & tok [ tile_row ] [ tile_col ] , tok_end ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( tok [ tile_row ] [ tile_col ] == tok_end ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_stop_encode ( & residual_bc ) ; <S2SV_EndBug>
<S2SV_StartBug> struct channel_info * info = <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < HPAGE_PMD_NR ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < HPAGE_PMD_NR ; ++ j ) <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void reset_fpf_position ( struct twopass_rc * p , <S2SV_EndBug>
<S2SV_StartBug> if ( offset > ds || offset + 6 > ds ) { <S2SV_EndBug>
<S2SV_StartBug> opt2 -> tot_len = tot_len ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( packetLength > INT_MAX ) || ! Stream_EnsureCapacity ( s , packetLength ) ) <S2SV_EndBug>
<S2SV_StartBug> static struct fsnotify_group * inotify_new_group ( struct user_struct * user , unsigned int max_events ) <S2SV_EndBug> <S2SV_StartBug> group -> inotify_data . user = user ; <S2SV_EndBug> <S2SV_StartBug> group -> inotify_data . fa = NULL ; <S2SV_EndBug>
<S2SV_StartBug> asoc -> peer . i = new -> peer . i ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( length > 3 ) { <S2SV_EndBug> <S2SV_StartBug> print_string ( ndo , dat + 3 , length - 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> cur_token = * indx ; <S2SV_EndBug> <S2SV_StartBug> res = r ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( ubufs ) ; <S2SV_EndBug>
<S2SV_StartBug> void fdct16_sse2 ( __m128i * in0 , __m128i * in1 ) { <S2SV_EndBug>
<S2SV_StartBug> ACPI_FUNCTION_TRACE ( ns_terminate ) ; <S2SV_EndBug> <S2SV_StartBug> union acpi_operand_object * next ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> free ( ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> bool is_drop_n_account = false ; <S2SV_EndBug> <S2SV_StartBug> if ( po -> has_vnet_hdr ) <S2SV_EndBug> <S2SV_StartBug> macoff = netoff - maclen ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) snaplen < 0 ) <S2SV_EndBug> <S2SV_StartBug> snaplen = 0 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( po -> has_vnet_hdr ) { <S2SV_EndBug>
<S2SV_StartBug> memcpy ( own_dir , "." , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> static int can_open_delegated ( struct nfs_delegation * delegation , mode_t open_flags ) <S2SV_EndBug> <S2SV_StartBug> if ( ( delegation -> type & open_flags ) != open_flags ) <S2SV_EndBug>
<S2SV_StartBug> unsigned short sel ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , sel , VCPU_SREG_CS ) ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = 0 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ctxt -> _eip , ctxt -> src . valptr , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8_get_frame_corrupted ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug> <S2SV_StartBug> * corrupted = pbi -> common . frame_to_show -> corrupted ; <S2SV_EndBug>
<S2SV_StartBug> char src [ PATH_MAX + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( src , dir , dir_len ) ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int index , count , i ; <S2SV_EndBug> <S2SV_StartBug> int index , count , i ; <S2SV_EndBug>
<S2SV_StartBug> return mptctl_getiocinfo ( arg , _IOC_SIZE ( cmd ) ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_gettargetinfo ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_readtest ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_eventquery ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_eventenable ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_eventreport ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> return mptctl_replace_fw ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> ret = mptctl_fw_download ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> ret = mptctl_mpt_command ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> ret = mptctl_do_reset ( arg ) ; <S2SV_EndBug> <S2SV_StartBug> ret = mptctl_hp_hostinfo ( arg , _IOC_SIZE ( cmd ) ) ; <S2SV_EndBug> <S2SV_StartBug> ret = mptctl_hp_targetinfo ( arg ) ; <S2SV_EndBug>
<S2SV_StartBug> int xt_check_entry_offsets ( const void * base , <S2SV_EndBug> <S2SV_StartBug> const struct xt_entry_target * t ; <S2SV_EndBug> <S2SV_StartBug> const char * e = base ; <S2SV_EndBug>
<S2SV_StartBug> goto end ; <S2SV_EndBug>
<S2SV_StartBug> assert ( bidx <= PCI_BARMAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( pdi -> bar [ bidx ] . type == PCIBAR_MEM32 || <S2SV_EndBug> <S2SV_StartBug> pdi -> bar [ bidx ] . type == PCIBAR_MEM64 ) ; <S2SV_EndBug>
<S2SV_StartBug> void jas_seq2d_bindsub ( jas_matrix_t * s , jas_matrix_t * s1 , int xstart , <S2SV_EndBug>
<S2SV_StartBug> INIT_LIST_HEAD ( & card -> controls ) ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . ref_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . mode_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . mode_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . last_ref_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . ref_lf_deltas ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cpi -> mb . e_mbd . last_mode_lf_deltas , 0 , sizeof ( cpi -> mb . e_mbd . mode_lf_deltas ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct usb_serial * serial = port -> serial ; <S2SV_EndBug>
<S2SV_StartBug> UINT16 count ; <S2SV_EndBug> <S2SV_StartBug> newdata = ( BITMAP_DATA * ) realloc ( bitmapUpdate -> rectangles , <S2SV_EndBug>
<S2SV_StartBug> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! tmp ) <S2SV_EndBug>
<S2SV_StartBug> if ( ext_depth ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> memmove ( bh -> b_data , EXT4_I ( inode ) -> i_data , <S2SV_EndBug> <S2SV_StartBug> sizeof ( EXT4_I ( inode ) -> i_data ) ) ; <S2SV_EndBug>
<S2SV_StartBug> newinet -> opt = NULL ; <S2SV_EndBug>
<S2SV_StartBug> return touch_file ( path , false , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> error = scsi_nonblockable_ioctl ( sdp , cmd , p , <S2SV_EndBug>
<S2SV_StartBug> size += service_name_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += miux_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += rw_tlv_length ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & p -> id , & x -> id , sizeof ( p -> id ) ) ; <S2SV_EndBug>
<S2SV_StartBug> frame_end : <S2SV_EndBug>
<S2SV_StartBug> RAnalOp next_op ; <S2SV_EndBug>
<S2SV_StartBug> int vp9_compute_qdelta ( const RATE_CONTROL * rc , double qstart , double qtarget ) { <S2SV_EndBug> <S2SV_StartBug> if ( vp9_convert_qindex_to_q ( i ) >= qstart ) <S2SV_EndBug> <S2SV_StartBug> if ( vp9_convert_qindex_to_q ( i ) >= qtarget ) <S2SV_EndBug>
<S2SV_StartBug> const char * old_name ; <S2SV_EndBug> <S2SV_StartBug> old_name = fsnotify_oldname_init ( old_dentry -> d_name . name ) ; <S2SV_EndBug> <S2SV_StartBug> fsnotify_oldname_free ( old_name ) ; <S2SV_EndBug>
<S2SV_StartBug> static unsigned int XBMInteger ( Image * image , short int * hex_digits ) <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ( value ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug> <S2SV_StartBug> uint16_t keylen ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( uniforms_offset < shader_rec_offset || <S2SV_EndBug>
<S2SV_StartBug> if ( s ) { <S2SV_EndBug> <S2SV_StartBug> struct unix_sock * u = unix_sk ( s ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock ( & unix_gc_lock ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> newinet -> opt = NULL ; <S2SV_EndBug>
<S2SV_StartBug> dtls1_process_buffered_records ( s ) ; <S2SV_EndBug> <S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> key_pairs = palloc ( sizeof ( Pairs ) * key_count ) ; <S2SV_EndBug>
<S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MODE_INFO * * mi_8x8 , <S2SV_EndBug> <S2SV_StartBug> int * totrate , int64_t * totdist ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; <S2SV_EndBug> <S2SV_StartBug> int rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> subsize = ( bsize >= BLOCK_8X8 ) ? mi_8x8 [ 0 ] -> mbmi . sb_type : BLOCK_4X4 ; <S2SV_EndBug> <S2SV_StartBug> switch ( partition ) { <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col , totrate , totdist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> mic . mbmi = xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col , totrate , totdist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> mic . mbmi = xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + hbs < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col + hbs , <S2SV_EndBug> <S2SV_StartBug> if ( rate != INT_MAX && dist != INT64_MAX && <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row , mi_col , totrate , totdist , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> mic . mbmi = xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> if ( mi_row + hbs < cm -> mi_rows ) { <S2SV_EndBug> <S2SV_StartBug> nonrd_pick_sb_modes ( cpi , tile , mi_row + hbs , mi_col , <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> mic . mbmi = mi_8x8 [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> if ( rate != INT_MAX && dist != INT64_MAX && <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = 0 ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 , tp , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> subsize , output_enabled , totrate , totdist ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 + hbs , tp , <S2SV_EndBug> <S2SV_StartBug> & rate , & dist ) ; <S2SV_EndBug> <S2SV_StartBug> nonrd_use_partition ( cpi , tile , mi_8x8 + hbs * mis , tp , <S2SV_EndBug> <S2SV_StartBug> mi_row + hbs , mi_col , subsize , output_enabled , <S2SV_EndBug> <S2SV_StartBug> & rate , & dist ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( bsize == BLOCK_64X64 && output_enabled ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> * state = CCS_VALUE ; <S2SV_EndBug>
<S2SV_StartBug> assert ( n >= 0 && n < 32 ) ; <S2SV_EndBug>
<S2SV_StartBug> nfcb_poll -> sensb_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> GsmXSMPClient * client ; <S2SV_EndBug> <S2SV_StartBug> client = ice_conn -> context ; <S2SV_EndBug> <S2SV_StartBug> g_return_val_if_fail ( client != NULL , TRUE ) ; <S2SV_EndBug> <S2SV_StartBug> gsm_xsmp_client_connect ( client , sms_conn , mask_ret , callbacks_ret ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( * name != '\\0' ) && ( * name != '#' ) ) <S2SV_EndBug>
<S2SV_StartBug> static void fadst4 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int x0 , x1 , x2 , x3 ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = fdct_round_shift ( s0 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = fdct_round_shift ( s1 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 2 ] = fdct_round_shift ( s2 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 3 ] = fdct_round_shift ( s3 ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return true ; <S2SV_EndBug>
<S2SV_StartBug> NetTxAncillary ancillary ; <S2SV_EndBug> <S2SV_StartBug> error = udpSendBuffer ( socket -> interface , & message -> srcIpAddr , <S2SV_EndBug>
<S2SV_StartBug> nexthdr = * prevhdr ; <S2SV_EndBug>
<S2SV_StartBug> len = args -> count = min ( args -> count , max_blocksize ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> set_exception_intercept ( svm , MC_VECTOR ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! av_strstart ( proto_name , "http" , NULL ) && ! av_strstart ( proto_name , "file" , NULL ) ) <S2SV_EndBug>
<S2SV_StartBug> list_add ( & mnt -> mnt_list , & new_ns -> list ) ; <S2SV_EndBug>
<S2SV_StartBug> case VPX_IMG_FMT_I422 : <S2SV_EndBug> <S2SV_StartBug> case VPX_IMG_FMT_I444 : <S2SV_EndBug> <S2SV_StartBug> "supported." ) ; <S2SV_EndBug>
<S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxfraglen , fragheaderlen ; <S2SV_EndBug> <S2SV_StartBug> int hh_len ; <S2SV_EndBug> <S2SV_StartBug> fragheaderlen , skb , rt ) ; <S2SV_EndBug>
<S2SV_StartBug> return - ENOBUFS ; <S2SV_EndBug>
<S2SV_StartBug> assert ( errno == ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> "for<S2SV_blank>management<S2SV_blank>address" ) ; <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug> <S2SV_StartBug> pair -> added = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> _copy_from_pages ( buf , pages , res . acl_data_offset , res . acl_len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( * p == '#' ) { <S2SV_EndBug>
<S2SV_StartBug> void nfs4_close_sync ( struct path * path , struct nfs4_state * state , mode_t mode ) <S2SV_EndBug> <S2SV_StartBug> __nfs4_close ( path , state , mode , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_codec_err_t res = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_crop_width = img -> d_w ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_crop_height = img -> d_h ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_width = img -> d_w ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> y_height = img -> d_h ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> uv_width = ( 1 + yv12 -> y_width ) / 2 ; <S2SV_EndBug> <S2SV_StartBug> yv12 -> uv_height = ( 1 + yv12 -> y_height ) / 2 ; <S2SV_EndBug>
<S2SV_StartBug> create_option_search_table ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tlen < oid_len ) { <S2SV_EndBug>
<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug>
<S2SV_StartBug> dpb_commands_t * ps_dpb_cmds = ps_dec -> ps_dpb_cmds ; <S2SV_EndBug>
<S2SV_StartBug> static void iwl_sta_ucode_activate ( struct iwl_priv * priv , u8 sta_id ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> err = fib_dump_info ( skb , NETLINK_CB ( in_skb ) . portid , <S2SV_EndBug> <S2SV_StartBug> rcu_read_unlock ( ) ; <S2SV_EndBug>
<S2SV_StartBug> r = send ( p_dcb -> p_scb -> socket_id [ 1 ] , p_dcb -> p_rx_pkt , data_size , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk_filter ( sk , skb ) ) <S2SV_EndBug> <S2SV_StartBug> goto discard_and_relse ; <S2SV_EndBug>
<S2SV_StartBug> replen = hdr . replen + op_decode_hdr_maxsz + nfs4_fattr_bitmap_maxsz + 1 ; <S2SV_EndBug> <S2SV_StartBug> encode_nops ( & hdr ) ; <S2SV_EndBug>
<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> __ptrace_link ( child , new_parent , __task_cred ( new_parent ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = sendmsg ( sock_fd , & msg , MSG_NOSIGNAL ) ; <S2SV_EndBug>
<S2SV_StartBug> args -> buffer = page_address ( * ( rqstp -> rq_next_page ++ ) ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> vcpu = kvm_arch_vcpu_create ( kvm , id ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! handle ) <S2SV_EndBug>
<S2SV_StartBug> hdl -> client_state = HSM_COM_C_STATE_IN ; <S2SV_EndBug>
<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> gint reported_length_remaining ; <S2SV_EndBug> <S2SV_StartBug> dissector_try_uint ( wtap_encap_dissector_table , linktype , new_tvb , pinfo , top_tree ) ; <S2SV_EndBug>
<S2SV_StartBug> int16_t * const coeff = BLOCK_OFFSET ( p -> coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( tx_size ) { <S2SV_EndBug> <S2SV_StartBug> fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , <S2SV_EndBug> <S2SV_StartBug> p -> quant , p -> quant_shift , qcoeff , dqcoeff , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , eob , scan_order -> scan , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct16x16 ( src_diff , coeff , diff_stride ) ; <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , eob , <S2SV_EndBug> <S2SV_StartBug> vp9_fdct8x8 ( src_diff , coeff , diff_stride ) ; <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , eob , <S2SV_EndBug> <S2SV_StartBug> vp9_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , <S2SV_EndBug> <S2SV_StartBug> pd -> dequant , p -> zbin_extra , eob , <S2SV_EndBug> <S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ( desc -> type & BIT ( 3 ) ) ) <S2SV_EndBug> <S2SV_StartBug> switch ( ( desc -> l << 1 ) | desc -> d ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! headcount ) { <S2SV_EndBug> <S2SV_StartBug> msg . msg_iovlen = in ; <S2SV_EndBug> <S2SV_StartBug> sock_len , MSG_DONTWAIT | MSG_TRUNC ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( err != sock_len ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( op -> operands [ operand ] . shift != ARM_NO_SHIFT ) { <S2SV_EndBug>
<S2SV_StartBug> size_t wcs_length = len ; <S2SV_EndBug> <S2SV_StartBug> if ( NULL == archive_wstring_ensure ( dest , dest -> length + wcs_length + 1 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( wcs_length == 0 ) { <S2SV_EndBug> <S2SV_StartBug> wcs_length = mbs_length ; <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( unsigned int ) hrtimer_forward ( timer , <S2SV_EndBug>
<S2SV_StartBug> newnp -> ipv6_ac_list = NULL ; <S2SV_EndBug> <S2SV_StartBug> newinet -> inet_opt = NULL ; <S2SV_EndBug>
<S2SV_StartBug> int alt ; <S2SV_EndBug> <S2SV_StartBug> if ( alt < 0 ) <S2SV_EndBug> <S2SV_StartBug> intf -> altsetting [ 0 ] . desc . bInterfaceNumber , alt ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 52 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 53 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 54 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 55 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 56 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 57 "dt_test2.pgc" <S2SV_EndBug>
<S2SV_StartBug> ret = epoll_wait ( reactor -> epoll_fd , events , MAX_EVENTS , - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ofpact_finish_BUNDLE ( ofpacts , & bundle ) ; <S2SV_EndBug>
<S2SV_StartBug> char prefix = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> char * type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( prefix != '+' && prefix != '-' && prefix != '=' ) { <S2SV_EndBug> <S2SV_StartBug> YYFREE ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ; <S2SV_EndBug> <S2SV_StartBug> { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_ival ( ( yyvsp [ ( 2 ) - ( 2 ) ] . Integer ) ) ) ; } <S2SV_EndBug> <S2SV_StartBug> { ( yyval . Queue ) = enqueue_in_new_queue ( create_ival ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ) ; } <S2SV_EndBug> <S2SV_StartBug> case 237 : <S2SV_EndBug> <S2SV_StartBug> # line 1082 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1090 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1091 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1095 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1106 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1120 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1124 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1125 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1129 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1130 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1134 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1135 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1140 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1144 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1148 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1152 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1153 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1158 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1162 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1163 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1168 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1170 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1172 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1174 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 1176 "ntp_parser.y" <S2SV_EndBug> <S2SV_StartBug> # line 3826 "ntp_parser.c" <S2SV_EndBug>
<S2SV_StartBug> blkif -> st_ds_req ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( err == - EOPNOTSUPP ) { <S2SV_EndBug>
<S2SV_StartBug> blkif -> st_ds_req ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( err == - EOPNOTSUPP ) { <S2SV_EndBug>
<S2SV_StartBug> int nNew = sizeof ( char * ) * ( iArg + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> char const * * aNew = ( const char * * ) sqlite3_realloc ( ( void * ) aArg , nNew ) ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( descriptor -> msg , "\\n\\t\\tEntry:\\\n<S2SV_blank>\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n<S2SV_blank>\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n<S2SV_blank>\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n<S2SV_blank>\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" , <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_COUNT && ( SQLINTEGER ) value < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && value != SQL_PARAM_INPUT <S2SV_EndBug> <S2SV_StartBug> && value != SQL_PARAM_OUTPUT && value != SQL_PARAM_INPUT_OUTPUT && <S2SV_EndBug> <S2SV_StartBug> value != SQL_PARAM_INPUT_OUTPUT_STREAM && value != SQL_PARAM_OUTPUT_STREAM ) <S2SV_EndBug>
<S2SV_StartBug> strncpy ( hid -> name , req -> name , 128 ) ; <S2SV_EndBug>
<S2SV_StartBug> handle_t * handle = NULL ; <S2SV_EndBug> <S2SV_StartBug> ext4_debug ( "ext4_get_block_write:<S2SV_blank>inode<S2SV_blank>%lu,<S2SV_blank>create<S2SV_blank>flag<S2SV_blank>%d\\n" , <S2SV_EndBug> <S2SV_StartBug> create = EXT4_GET_BLOCKS_IO_CREATE_EXT ; <S2SV_EndBug> <S2SV_StartBug> ret = ext4_get_blocks ( handle , inode , iblock , max_blocks , bh_result , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uint32_t backup_handle ; <S2SV_EndBug> <S2SV_StartBug> if ( ret == 0 && res -> backup -> base . num_pages * PAGE_SIZE < <S2SV_EndBug> <S2SV_StartBug> goto out_unlock ; <S2SV_EndBug>
<S2SV_StartBug> if ( frame -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug>
<S2SV_StartBug> ret = rtCborDecDynUTF8Str ( pCborCtxt , ub , ( char * * ) & utf8str ) ; <S2SV_EndBug>
<S2SV_StartBug> ret1 = ih264d_mark_err_slice_skip ( ps_dec , num_mb_skipped , ps_dec -> u1_nal_unit_type == IDR_SLICE_NAL , ps_dec -> ps_cur_slice -> u2_frame_num , <S2SV_EndBug>
<S2SV_StartBug> proto = EXTRACT_16BITS ( & p [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ( p + 1 ) == 0x81 || <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! esil ) <S2SV_EndBug>
<S2SV_StartBug> struct dentry * res ; <S2SV_EndBug> <S2SV_StartBug> state = nfs4_do_open ( dir , & path , nd -> intent . open . flags , & attr , cred ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_intent_set_file ( nd , & path , state ) ; <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct arpt_arp * arp ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( arp , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> thread -> tp_value = childregs -> ARM_r3 ; <S2SV_EndBug>
<S2SV_StartBug> if ( options_file ( configuration_file , type , & section ) ) <S2SV_EndBug> <S2SV_StartBug> if ( init_section ( 1 , & section ) ) <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> nName ++ ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! gsasl_server_support_p ( ctx -> gsasl_ctx , mech ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( is_file_hugepages ( shm_file ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( nad_find_attr ( nad , 0 , - 1 , "type" , "valid" ) >= 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! dump_dir_accessible_by_uid ( dirname , client_uid ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> return psf_fread ( ptr , 1 , bytes , psf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + bytes > SIGNED_SIZEOF ( psf -> header ) ) <S2SV_EndBug> <S2SV_StartBug> if ( psf -> headindex + bytes > psf -> headend ) <S2SV_EndBug> <S2SV_StartBug> { count = psf_fread ( psf -> header + psf -> headend , 1 , bytes - ( psf -> headend - psf -> headindex ) , psf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( count != bytes - ( int ) ( psf -> headend - psf -> headindex ) ) <S2SV_EndBug> <S2SV_StartBug> psf -> headend += count ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( ptr , psf -> header + psf -> headindex , bytes ) ; <S2SV_EndBug> <S2SV_StartBug> psf -> headindex += bytes ; <S2SV_EndBug>
<S2SV_StartBug> or_circuit_t * or_circ = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! CIRCUIT_IS_ORIGIN ( circ ) ) <S2SV_EndBug> <S2SV_StartBug> or_circ = TO_OR_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> relay_send_end_cell_from_edge ( rh . stream_id , circ , end_reason , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_NOTDIRECTORY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_INTERNAL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_EXITPOLICY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circuit_t * origin_circ = TO_ORIGIN_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circ -> cpath -> prev ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> data [ i ] = jas_matrix_create ( 1 , jas_image_width ( image ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> z = ( z << 8 ) | c ; <S2SV_EndBug>
<S2SV_StartBug> option = stok ( option , "<S2SV_blank>=\\t," , & ovalue ) ; <S2SV_EndBug>
<S2SV_StartBug> struct cpuinfo_x86 * c ; <S2SV_EndBug>
<S2SV_StartBug> ZeroMemory ( & credssp -> authInfo , sizeof ( SecBuffer ) ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = fuse_dev_release ( inode , file ) ; <S2SV_EndBug>
<S2SV_StartBug> return sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; <S2SV_EndBug>
<S2SV_StartBug> static int svc_log ( SvcContext * svc_ctx , int level , const char * fmt , ... ) { <S2SV_EndBug> <S2SV_StartBug> SvcInternal * const si = get_svc_internal ( svc_ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> new_timer -> it_overrun = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> int <S2SV_EndBug> <S2SV_StartBug> for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( ( char ) c , output ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) fclose ( input ) ; <S2SV_EndBug> <S2SV_StartBug> return ( MagickTrue ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> priv -> base = devm_ioremap ( & pdev -> dev , r -> start , resource_size ( r ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = poll ( & pfd , 1 , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> read ( pfd . fd , & buf , UIPC_FLUSH_BUFFER_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> void ntlm_write_message_fields_buffer ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> if ( report -> id == REPORT_KEY_STATE ) { <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & this_frame_copy , & this_frame , sizeof ( this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & this_frame_copy , & this_frame , sizeof ( this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & this_frame_copy , & this_frame , sizeof ( this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & this_frame_copy , & this_frame , sizeof ( this_frame ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & this_frame_copy , & this_frame , sizeof ( this_frame ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( Stream_GetRemainingLength ( s ) < iconInfo -> cbBitsMask + iconInfo -> cbBitsColor ) <S2SV_EndBug> <S2SV_StartBug> Stream_Read ( s , iconInfo -> colorTable , iconInfo -> cbColorTable ) ; <S2SV_EndBug> <S2SV_StartBug> newBitMask = ( BYTE * ) realloc ( iconInfo -> bitsColor , iconInfo -> cbBitsColor ) ; <S2SV_EndBug> <S2SV_StartBug> Stream_Read ( s , iconInfo -> bitsColor , iconInfo -> cbBitsColor ) ; <S2SV_EndBug>
<S2SV_StartBug> meshdrlen = extract_mesh_header_length ( p + hdrlen ) ; <S2SV_EndBug>
<S2SV_StartBug> regs [ insn -> dst_reg ] . var_off = tnum_cast ( <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( & regs [ insn -> dst_reg ] ) ; <S2SV_EndBug>
<S2SV_StartBug> skcipher -> setkey = alg -> setkey ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_fwht4x4_c ( const int16_t * input , int16_t * output , int stride ) { <S2SV_EndBug> <S2SV_StartBug> int a1 , b1 , c1 , d1 , e1 ; <S2SV_EndBug> <S2SV_StartBug> const int16_t * ip = input ; <S2SV_EndBug> <S2SV_StartBug> int16_t * op = output ; <S2SV_EndBug> <S2SV_StartBug> a1 = ip [ 0 * stride ] ; <S2SV_EndBug> <S2SV_StartBug> d1 = ip [ 3 * stride ] ; <S2SV_EndBug> <S2SV_StartBug> op [ 0 ] = a1 ; <S2SV_EndBug> <S2SV_StartBug> op [ 8 ] = d1 ; <S2SV_EndBug> <S2SV_StartBug> op [ 12 ] = b1 ; <S2SV_EndBug> <S2SV_StartBug> op [ 0 ] = a1 * UNIT_QUANT_FACTOR ; <S2SV_EndBug> <S2SV_StartBug> op [ 1 ] = c1 * UNIT_QUANT_FACTOR ; <S2SV_EndBug> <S2SV_StartBug> op [ 2 ] = d1 * UNIT_QUANT_FACTOR ; <S2SV_EndBug> <S2SV_StartBug> op [ 3 ] = b1 * UNIT_QUANT_FACTOR ; <S2SV_EndBug>
<S2SV_StartBug> struct sock * sk ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> key -> reject_error = - error ; <S2SV_EndBug>
<S2SV_StartBug> if ( current_entry + n > ( int ) c -> entries ) { return error ( f , VORBIS_invalid_setup ) ; } <S2SV_EndBug> <S2SV_StartBug> c -> lookup_values = lookup1_values ( c -> entries , c -> dimensions ) ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < g -> values ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> m -> coupling_steps = get_bits ( f , 8 ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < st -> duration ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> int kb ; <S2SV_EndBug> <S2SV_StartBug> kb = vt_default_utf8 ( ) != 0 ? K_UNICODE : K_XLATE ; <S2SV_EndBug>
<S2SV_StartBug> ret = copy_to_user ( param , ptr , sizeof ( * ptr ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! info -> attrs [ NFC_ATTR_DEVICE_INDEX ] ) <S2SV_EndBug>
<S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_OVERRIDE ) ) <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_DAC_READ_SEARCH ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( strstr ( token , "PM" ) != NULL ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( strchr ( token , 'd' ) != NULL ) <S2SV_EndBug> <S2SV_StartBug> if ( strchr ( token , 'w' ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> token = osStrtok_r ( NULL , "<S2SV_blank>" , & p ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( tmp && alen < tmp ) { <S2SV_EndBug>
<S2SV_StartBug> char * mask2 , * mask_decoded , * mask_decoded2 , * mask_decoded3 , * mask_decoded4 ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded = NULL ; <S2SV_EndBug> <S2SV_StartBug> mask2 = weechat_string_replace ( mask , dir_separator , "\\01" ) ; <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 = malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! mask_decoded5 ) <S2SV_EndBug> <S2SV_StartBug> mask_decoded5 [ 0 ] = '\\0' ; <S2SV_EndBug> <S2SV_StartBug> strftime ( mask_decoded5 , length - 1 , mask_decoded4 , date_tmp ) ; <S2SV_EndBug> <S2SV_StartBug> weechat_string_tolower ( mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> mask , mask_decoded5 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mask_decoded ) <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded2 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded3 ) ; <S2SV_EndBug> <S2SV_StartBug> free ( mask_decoded4 ) ; <S2SV_EndBug> <S2SV_StartBug> return mask_decoded5 ; <S2SV_EndBug>
<S2SV_StartBug> r_set_size ( op , size ) ; <S2SV_EndBug> <S2SV_StartBug> r_set_size ( op - 1 , ptr - op [ - 1 ] . value . bytes ) ; <S2SV_EndBug> <S2SV_StartBug> r_set_size ( op1 , count + ( ! forward ? ( size - 1 ) : 0 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> char * method = manager -> method ; <S2SV_EndBug> <S2SV_StartBug> build_config ( working_dir , server ) ; <S2SV_EndBug> <S2SV_StartBug> "%s<S2SV_blank>-m<S2SV_blank>%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%s.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%s.conf" , <S2SV_EndBug> <S2SV_StartBug> executable , method , manager -> manager_address , <S2SV_EndBug> <S2SV_StartBug> working_dir , server -> port , working_dir , server -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sockaddr_rc * sa = ( struct sockaddr_rc * ) addr ; <S2SV_EndBug> <S2SV_StartBug> int chan = sa -> rc_channel ; <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chan && __rfcomm_get_listen_sock_by_addr ( chan , & sa -> rc_bdaddr ) ) { <S2SV_EndBug> <S2SV_StartBug> bacpy ( & rfcomm_pi ( sk ) -> src , & sa -> rc_bdaddr ) ; <S2SV_EndBug> <S2SV_StartBug> rfcomm_pi ( sk ) -> channel = chan ; <S2SV_EndBug>
<S2SV_StartBug> int open_debug_log ( void ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( debug_file_fp = fopen ( debug_file , "a+" ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> ( void ) fcntl ( fileno ( debug_file_fp ) , F_SETFD , FD_CLOEXEC ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( gf -> file && gf -> file -> device ) <S2SV_EndBug> <S2SV_StartBug> free ( gf -> file -> device -> disk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( packet -> size + 4 + data_len > MT_PACKET_LEN ) { <S2SV_EndBug>
<S2SV_StartBug> drop_cloexec ( data -> instance_id_fd ) ; <S2SV_EndBug>
<S2SV_StartBug> cifs_small_buf_release ( req ) ; <S2SV_EndBug> <S2SV_StartBug> free_rsp_buf ( resp_buftype , rsp ) ; <S2SV_EndBug>
<S2SV_StartBug> return ms ; <S2SV_EndBug>
<S2SV_StartBug> if ( g_file_test ( filename , G_FILE_TEST_EXISTS ) || g_path_is_absolute ( filename ) ) { <S2SV_EndBug>
<S2SV_StartBug> return error ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( rsp -> DialectRevision == cpu_to_le16 ( SMB311_PROT_ID ) ) <S2SV_EndBug> <S2SV_StartBug> ses -> server -> ops = & smb311_operations ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> int is_udplite = IS_UDPLITE ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( udp_lib_checksum_complete ( skb ) ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_csum_unnecessary ( skb ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( strchr ( cp , '/' ) != NULL ) || ( strcmp ( cp , ".." ) == 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> uint32_t len ; <S2SV_EndBug> <S2SV_StartBug> n = r -> iov . iov_len / 512 ; <S2SV_EndBug> <S2SV_StartBug> len = r -> sector_count * 512 ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( "Write<S2SV_blank>complete<S2SV_blank>tag=0x%x<S2SV_blank>more=%d\\n" , r -> req . tag , len ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_req_data ( & r -> req , len ) ; <S2SV_EndBug>
<S2SV_StartBug> data = malloc ( blk_sz * n_blks ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( current -> mm ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> leave_mm ( smp_processor_id ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! drive || ! irp || ! irp -> input || ! irp -> output || ! irp -> Complete ) <S2SV_EndBug> <S2SV_StartBug> file = drive_get_file_by_id ( drive , irp -> FileId ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ! drive_file_write ( file , Stream_Pointer ( irp -> input ) , Length ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( border < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> uint8_t * result ; <S2SV_EndBug>
<S2SV_StartBug> return __blkdev_driver_ioctl ( lc -> dev -> bdev , lc -> dev -> mode , cmd , arg ) ; <S2SV_EndBug>
<S2SV_StartBug> return vp9_segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ? 0 : eob_max ; <S2SV_EndBug>
<S2SV_StartBug> savesegment ( es , prev -> es ) ; <S2SV_EndBug> <S2SV_StartBug> loadsegment ( ds , next -> ds ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( ! ( sfp = ( Sg_fd * ) filp -> private_data ) ) || ( ! ( sdp = sfp -> parentdp ) ) ) <S2SV_EndBug>
<S2SV_StartBug> goto fail ; <S2SV_EndBug>
<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sas_task * task = TO_SAS_TASK ( cmd ) ; <S2SV_EndBug> <S2SV_StartBug> scsi_eh_finish_cmd ( cmd , & sas_ha -> eh_done_q ) ; <S2SV_EndBug>
<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_cosine_rec_hdr ( phdr , line , err , err_info ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_cosine_hex_dump ( wth -> random_fh , phdr , pkt_len , buf , err , <S2SV_EndBug>
<S2SV_StartBug> args -> buffer = page_address ( * ( rqstp -> rq_next_page ++ ) ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> kfree_skb ( skb ) ; <S2SV_EndBug>
<S2SV_StartBug> int lineno ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & annotation , arena ) ; <S2SV_EndBug> <S2SV_StartBug> * out = arg ( arg , annotation , lineno , col_offset , end_lineno , end_col_offset , <S2SV_EndBug>
<S2SV_StartBug> cinfo . hci_handle = sco_pi ( sk ) -> conn -> hcon -> handle ; <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * data_end = data + data_sz ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_err_t res = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> int frames_this_pts , frame_count = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( data == NULL || data_sz == 0 ) <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INVALID_PARAM ; <S2SV_EndBug> <S2SV_StartBug> parse_superframe_index ( data , data_sz , sizes , & frames_this_pts ) ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t marker = * data_start ; <S2SV_EndBug>
<S2SV_StartBug> opts = fcntl ( s , F_GETFL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fcntl ( s , F_SETFL , opts ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> ( Rec2 . RecordLength - 2 - 2 ) / 3 ) <S2SV_EndBug>
<S2SV_StartBug> unsigned int i ; <S2SV_EndBug>
<S2SV_StartBug> assertEqualInt ( ARCHIVE_OK , archive_write_free ( a ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct resv_map * reservations = vma_resv_map ( vma ) ; <S2SV_EndBug> <S2SV_StartBug> hugetlb_put_quota ( vma -> vm_file -> f_mapping , reserve ) ; <S2SV_EndBug>
<S2SV_StartBug> szLineConv [ i ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( rt -> rt_flags & RTCF_DOREDIRECT && ! opt -> srr && ! skb_sec_path ( skb ) ) <S2SV_EndBug>
<S2SV_StartBug> long length , offset , size , at ; <S2SV_EndBug> <S2SV_StartBug> goto exit_toc ; <S2SV_EndBug> <S2SV_StartBug> cli_dbgmsg ( "cli_scanxar:<S2SV_blank>decompress<S2SV_blank>into<S2SV_blank>temp<S2SV_blank>file:\\n%s,<S2SV_blank>size<S2SV_blank>%li,\\n" <S2SV_EndBug> <S2SV_StartBug> unsigned long in_remaining = length ; <S2SV_EndBug> <S2SV_StartBug> int lret ; <S2SV_EndBug> <S2SV_StartBug> cli_dbgmsg ( "cli_scanxar:<S2SV_blank>Can\'t<S2SV_blank>read<S2SV_blank>%li<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li,<S2SV_blank>errno:%s.\\n" , <S2SV_EndBug> <S2SV_StartBug> length , at , errbuff ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned long write_len ; <S2SV_EndBug> <S2SV_StartBug> write_len = MIN ( ( size_t ) ( ctx -> engine -> maxfilesize ) , ( size_t ) length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( blockp = ( void * ) fmap_need_off_once ( map , at , length ) ) ) { <S2SV_EndBug> <S2SV_StartBug> cli_dbgmsg ( "cli_scanxar:<S2SV_blank>Can\'t<S2SV_blank>read<S2SV_blank>%li<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li,<S2SV_blank>errno:%s.\\n" , <S2SV_EndBug> <S2SV_StartBug> xar_hash_update ( a_hash_ctx , blockp , length , a_hash ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cli_writen ( fd , blockp , write_len ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> cli_dbgmsg ( "cli_scanxar:<S2SV_blank>cli_writen<S2SV_blank>error<S2SV_blank>%li<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li.\\n" , length , at ) ; <S2SV_EndBug> <S2SV_StartBug> cli_warnmsg ( "cli_scanxar:<S2SV_blank>%u<S2SV_blank>checksum<S2SV_blank>errors<S2SV_blank>and<S2SV_blank>%u<S2SV_blank>extraction<S2SV_blank>errors,<S2SV_blank>use<S2SV_blank>--debug<S2SV_blank>for<S2SV_blank>more<S2SV_blank>info.\\n" , <S2SV_EndBug>
<S2SV_StartBug> opt_type = * bp ++ ; <S2SV_EndBug>
<S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> uchar buf [ PGX_MAGICLEN ] ; <S2SV_EndBug>
<S2SV_StartBug> for ( depth = 1 ; ( GetQuantumRange ( depth ) + 1 ) < max_value ; depth ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( depth >= 64 ) <S2SV_EndBug>
<S2SV_StartBug> void * data , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int mi_size ) { <S2SV_EndBug> <S2SV_StartBug> const int64_t threshold_multiplier = 25 ; <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + block_width / 2 < cm -> mi_cols && <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> vt . part_variances -> vert [ 0 ] . variance < threshold && <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , mi_row , mi_col , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , mi_row , mi_col + block_width / 2 , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mi_col + block_width / 2 < cm -> mi_cols && <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , mi_row , mi_col , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> set_block_size ( cpi , tile , mi_row + block_height / 2 , mi_col , subsize ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> static void perf_event_output ( struct perf_event * event , int nmi , <S2SV_EndBug> <S2SV_StartBug> if ( perf_output_begin ( & handle , event , header . size , nmi , 1 ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( sanity_check_area_boundary ( sbi , bh ) ) <S2SV_EndBug>
<S2SV_StartBug> ret = fscrypt_get_crypt_info ( dir ) ; <S2SV_EndBug>
<S2SV_StartBug> opts -> max_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> opts -> max_size = atoi ( jas_tvparser_getval ( tvp ) ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef _WITH_VRRP_ <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const VP9_CONFIG * oxcf = & cpi -> oxcf ; <S2SV_EndBug> <S2SV_StartBug> const int64_t diff = oxcf -> optimal_buffer_level - rc -> buffer_level ; <S2SV_EndBug> <S2SV_StartBug> const int64_t one_pct_bits = 1 + oxcf -> optimal_buffer_level / 100 ; <S2SV_EndBug> <S2SV_StartBug> int min_frame_target = MAX ( rc -> av_per_frame_bandwidth >> 4 , <S2SV_EndBug> <S2SV_StartBug> int target = rc -> av_per_frame_bandwidth ; <S2SV_EndBug> <S2SV_StartBug> if ( svc -> number_temporal_layers > 1 && <S2SV_EndBug> <S2SV_StartBug> const LAYER_CONTEXT * lc = & svc -> layer_context [ current_temporal_layer ] ; <S2SV_EndBug> <S2SV_StartBug> return MAX ( min_frame_target , target ) ; <S2SV_EndBug>
<S2SV_StartBug> . dump = link -> dump , <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( mask & KADM5_ATTRIBUTES ) || <S2SV_EndBug>
<S2SV_StartBug> struct address_space * mapping = page -> mapping ; <S2SV_EndBug>
<S2SV_StartBug> OPENSSL_free ( rdata ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> OPENSSL_free ( rdata ) ; <S2SV_EndBug> <S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = expandRegular ( fi , fn , psm , nodigest , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> __mark_reg_known ( regs + insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! * ptrptr && ! ( nmemb && size ) ) <S2SV_EndBug>
<S2SV_StartBug> rdsdebug ( "size<S2SV_blank>%zu<S2SV_blank>flags<S2SV_blank>0x%x<S2SV_blank>timeo<S2SV_blank>%ld\\n" , size , msg_flags , timeo ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> opt = flowlabel ? flowlabel -> opt : np -> opt ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , opt , & final ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 obuf [ ] = { 0xde , 0 } ; <S2SV_EndBug> <S2SV_StartBug> state -> initialized = 1 ; <S2SV_EndBug> <S2SV_StartBug> return dvb_usb_generic_rw ( d , obuf , 2 , NULL , 0 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> const char * arch = info -> arch ; <S2SV_EndBug> <S2SV_StartBug> if ( info -> cpu && * info -> cpu ) { <S2SV_EndBug> <S2SV_StartBug> r_config_set ( r -> config , "anal.cpu" , info -> cpu ) ; <S2SV_EndBug> <S2SV_StartBug> r_core_bin_set_cur ( r , binfile ) ; <S2SV_EndBug>
<S2SV_StartBug> int ip_options_get ( struct net * net , struct ip_options * * optp , <S2SV_EndBug> <S2SV_StartBug> struct ip_options * opt = ip_options_get_alloc ( optlen ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( opt -> __data , data , optlen ) ; <S2SV_EndBug>
<S2SV_StartBug> change = ue -> tlv_data_size != size ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return - ENXIO ; <S2SV_EndBug> <S2SV_StartBug> if ( size < ue -> tlv_data_size ) <S2SV_EndBug> <S2SV_StartBug> return - ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( tlv , ue -> tlv_data , ue -> tlv_data_size ) ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> cifs_small_buf_release ( req ) ; <S2SV_EndBug> <S2SV_StartBug> * nbytes = le32_to_cpu ( rsp -> DataLength ) ; <S2SV_EndBug>
<S2SV_StartBug> struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev -> dev ; <S2SV_EndBug> <S2SV_StartBug> netdev_notifier_info_init ( & info , dev ) ; <S2SV_EndBug>
<S2SV_StartBug> v |= ( c << 24 ) ; <S2SV_EndBug>
<S2SV_StartBug> sctp_add_cmd_sf ( commands , SCTP_CMD_NEW_ASOC , SCTP_ASOC ( new_asoc ) ) ; <S2SV_EndBug>
<S2SV_StartBug> FILE * file ; <S2SV_EndBug> <S2SV_StartBug> file = fopen ( stats_file , "w" ) ; <S2SV_EndBug> <S2SV_StartBug> for ( e = LIST_HEAD ( l ) ; e ; ELEMENT_NEXT ( e ) ) { <S2SV_EndBug>
<S2SV_StartBug> run_cmd ( int fd , ... ) <S2SV_EndBug> <S2SV_StartBug> char cmd [ 512 ] ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> strcpy ( cmd , EXEC ) ; <S2SV_EndBug> <S2SV_StartBug> fd_printf ( STDERR_FILENO , "%s\\n" , & cmd [ sizeof ( EXEC ) - 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( 42 ) ; <S2SV_EndBug>
<S2SV_StartBug> build_config ( char * prefix , struct server * server ) <S2SV_EndBug> <S2SV_StartBug> fprintf ( f , "\\"password\\":\\"%s\\"" , server -> password ) ; <S2SV_EndBug> <S2SV_StartBug> if ( server -> method ) fprintf ( f , ",\\n\\"method\\":\\"%s\\"" , server -> method ) ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> sysctl_head_finish ( head ) ; <S2SV_EndBug>
<S2SV_StartBug> char * dest , * src ; <S2SV_EndBug> <S2SV_StartBug> dest = src = a -> name ; <S2SV_EndBug> <S2SV_StartBug> if ( * src == '\\0' ) { <S2SV_EndBug> <S2SV_StartBug> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , <S2SV_EndBug> <S2SV_StartBug> # if defined ( __CYGWIN__ ) <S2SV_EndBug> <S2SV_StartBug> return ( ARCHIVE_FAILED ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> s_high_profile . u1_scaling_present = 0 ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_cur_slice_num = 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache * <S2SV_EndBug> <S2SV_StartBug> ext4_xattr_create_cache ( char * name ) <S2SV_EndBug> <S2SV_StartBug> return mb_cache_create ( name , HASH_BUCKET_BITS ) ; <S2SV_EndBug>
<S2SV_StartBug> DEFiRet ; <S2SV_EndBug> <S2SV_StartBug> while ( 1 ) { <S2SV_EndBug>
<S2SV_StartBug> h -> emptyStreamBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug> <S2SV_StartBug> h -> emptyFileBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> h -> antiBools = calloc ( empty_streams , <S2SV_EndBug> <S2SV_StartBug> if ( ( ll & 1 ) || ll < zip -> numFiles * 4 ) <S2SV_EndBug> <S2SV_StartBug> h -> attrBools = calloc ( ( size_t ) zip -> numFiles , <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Rootname:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignores = fgets ( buf , L_BUF_SIZE , fp ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Commandfile<S2SV_blank>name:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> ignore = fscanf ( fp , "Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%s\\n" , buf ) ; <S2SV_EndBug>
<S2SV_StartBug> ngx_uint_t n , sec , min , hour , mday , mon , year , wday , days , leap ; <S2SV_EndBug> <S2SV_StartBug> n = ( ngx_uint_t ) t ; <S2SV_EndBug> <S2SV_StartBug> wday = ( 4 + days ) % 7 ; <S2SV_EndBug> <S2SV_StartBug> n %= 86400 ; <S2SV_EndBug> <S2SV_StartBug> n %= 3600 ; <S2SV_EndBug> <S2SV_StartBug> min = n / 60 ; <S2SV_EndBug> <S2SV_StartBug> sec = n % 60 ; <S2SV_EndBug>
<S2SV_StartBug> if ( tpgt > TL_TPGS_PER_HBA ) { <S2SV_EndBug>
<S2SV_StartBug> int len ; <S2SV_EndBug> <S2SV_StartBug> if ( config . hostsocket != NULL ) <S2SV_EndBug> <S2SV_StartBug> len = snprintf ( config . prompt , sizeof ( config . prompt ) , "redis<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> total = le32_to_cpu ( raw_super -> segment_count ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( f2fs_cp_error ( sbi ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> __be16 type ; <S2SV_EndBug>
<S2SV_StartBug> . dump = link -> dump , <S2SV_EndBug>
<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! dev && capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> request_module ( "%s" , name ) ; <S2SV_EndBug>
<S2SV_StartBug> cpio -> extract_flags |= ARCHIVE_EXTRACT_PERM ; <S2SV_EndBug> <S2SV_StartBug> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; <S2SV_EndBug>
<S2SV_StartBug> if ( setting_MakeCompatCore && ulimit_c != 0 ) <S2SV_EndBug> <S2SV_StartBug> dd = dd_create_skeleton ( path , fsuid , DEFAULT_DUMP_DIR_MODE , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> logging = LogMagickEvent ( CoderEvent , GetMagickModule ( ) , "enter" ) ; <S2SV_EndBug> <S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug>
<S2SV_StartBug> static void update_open_stateflags ( struct nfs4_state * state , mode_t open_flags ) <S2SV_EndBug> <S2SV_StartBug> switch ( open_flags ) { <S2SV_EndBug> <S2SV_StartBug> nfs4_state_set_mode_locked ( state , state -> state | open_flags ) ; <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * * remainder_out , size_t * rlen_out ) <S2SV_EndBug> <S2SV_StartBug> p = asn1 ; <S2SV_EndBug> <S2SV_StartBug> ret = get_tag ( p , len , & t , & c , & clen , & p , & len ) ; <S2SV_EndBug>
<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( code == gcode ) <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug>
<S2SV_StartBug> int copied , err ; <S2SV_EndBug> <S2SV_StartBug> sll = & PACKET_SKB_CB ( skb ) -> sa . ll ; <S2SV_EndBug> <S2SV_StartBug> if ( sock -> type == SOCK_PACKET ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> copied = skb -> len ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_name ) <S2SV_EndBug> <S2SV_StartBug> msg -> msg_namelen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( uid_eq ( uid , current_fsuid ( ) ) ) <S2SV_EndBug> <S2SV_StartBug> if ( gid_eq ( gid , current_fsgid ( ) ) ) <S2SV_EndBug>
<S2SV_StartBug> char * ret ; <S2SV_EndBug> <S2SV_StartBug> if ( ptr [ strlen ( ptr ) - 1 ] == '\\n' ) <S2SV_EndBug> <S2SV_StartBug> ptr [ strlen ( ptr ) - 1 ] = '\\0' ; <S2SV_EndBug>
<S2SV_StartBug> fid -> udf . generation = inode -> i_generation ; <S2SV_EndBug>
<S2SV_StartBug> # define GIFOutputCode ( code ) { if ( bits > 0 ) datum |= ( size_t ) ( code ) << bits ; else datum = ( size_t ) ( code ) ; bits += number_bits ; while ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image , ( unsigned char ) length ) ; ( void ) WriteBlob ( image , length , packet ) ; length = 0 ; } datum >>= 8 ; bits -= 8 ; } if ( free_code > max_code ) { number_bits ++ ; if ( number_bits == MaxGIFBits ) max_code = MaxGIFTable ; else max_code = MaxCode ( number_bits ) ; } } <S2SV_EndBug> <S2SV_StartBug> index = ( Quantum ) ( ( size_t ) GetPixelIndex ( image , p ) & 0xff ) ; <S2SV_EndBug> <S2SV_StartBug> next_pixel = MagickFalse ; <S2SV_EndBug>
<S2SV_StartBug> SEPARATE_ZVAL ( ( var ) ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long ( * var ) ; <S2SV_EndBug> <S2SV_StartBug> points [ i ] . x = Z_LVAL_PP ( var ) ; <S2SV_EndBug> <S2SV_StartBug> SEPARATE_ZVAL ( var ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_long ( * var ) ; <S2SV_EndBug> <S2SV_StartBug> points [ i ] . y = Z_LVAL_PP ( var ) ; <S2SV_EndBug> <S2SV_StartBug> if ( filled ) { <S2SV_EndBug>
<S2SV_StartBug> gdImageGifCtx ( im , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct ipt_ip * ip ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ip , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> err = bnep_add_connection ( & ca , nsock ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( overlaps , 0 , sizeof ( MB_OVERLAP ) * mb_rows * mb_cols ) ; <S2SV_EndBug>
<S2SV_StartBug> const char need_to_append_dot = base_name [ base_len - 1 ] == '.' ? 0 : 1 ; <S2SV_EndBug> <S2SV_StartBug> struct search_domain * dom ; <S2SV_EndBug>
<S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug> <S2SV_StartBug> goto chpwfail ; <S2SV_EndBug>
<S2SV_StartBug> if ( iter > CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> if ( iter < CIPSO_V4_TAG_MAXCNT ) <S2SV_EndBug> <S2SV_StartBug> doi_def -> tags [ iter ] = CIPSO_V4_TAG_INVALID ; <S2SV_EndBug>
<S2SV_StartBug> ftpClientFormatCommand ( context , "LIST" , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> ftpClientFormatCommand ( context , "LIST" , path ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( S_ISDIR ( fmode ) && S_ISLNK ( sb . st_mode ) && stat ( fn , & sb ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> req -> started = false ; <S2SV_EndBug> <S2SV_StartBug> if ( dep -> number > 1 ) <S2SV_EndBug>
<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug>
<S2SV_StartBug> return - E_NOTHANDLED ; <S2SV_EndBug>
<S2SV_StartBug> return new_ns ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug>
<S2SV_StartBug> struct f2fs_sb_info * sbi = F2FS_I_SB ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! i_ext || ! i_ext -> len ) <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug>
<S2SV_StartBug> size_t buf_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( msg -> msg_iov , ( int ) msg -> msg_iovlen , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> ast_for_for_stmt ( struct compiling * c , const node * n , int is_async ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> type_comment , LINENO ( n ) , n -> n_col_offset , <S2SV_EndBug>
<S2SV_StartBug> ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE == e_error ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! mx_is_imap ( path ) || imap_parse_path ( path , & mx ) || ! mx . mbox ) <S2SV_EndBug> <S2SV_StartBug> snprintf ( mbox , sizeof ( mbox ) , "%smailboxes<S2SV_blank>\\"%s\\"" , subscribe ? "" : "un" , path ) ; <S2SV_EndBug>
<S2SV_StartBug> dsize += svbranch . len ; <S2SV_EndBug>
<S2SV_StartBug> length = icon_file . directory [ i ] . size ; <S2SV_EndBug>
<S2SV_StartBug> if ( old -> curframe != cur -> curframe ) <S2SV_EndBug>
<S2SV_StartBug> * image ; <S2SV_EndBug> <S2SV_StartBug> value , <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 0 ] . red = QuantumRange ; <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 0 ] . green = QuantumRange ; <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 0 ] . blue = QuantumRange ; <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 1 ] . red = ( Quantum ) 0 ; <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 1 ] . green = ( Quantum ) 0 ; <S2SV_EndBug> <S2SV_StartBug> image -> colormap [ 1 ] . blue = ( Quantum ) 0 ; <S2SV_EndBug> <S2SV_StartBug> value = XBMInteger ( image , hex_digits ) ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) value ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) ( value >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> value = XBMInteger ( image , hex_digits ) ; <S2SV_EndBug> <S2SV_StartBug> * p ++ = ( unsigned char ) value ; <S2SV_EndBug> <S2SV_StartBug> byte = ( size_t ) ( * p ++ ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> rc = expandRegular ( fi , dest , psm , nodigest , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> int rv ; <S2SV_EndBug>
<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int len ; <S2SV_EndBug> <S2SV_StartBug> fbdev = to_au1100fb_device ( fbi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( * ( p + 2 ) , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIE , EIE_INTIE ) ; <S2SV_EndBug> <S2SV_StartBug> status = enc28j60ReadReg ( interface , ENC28J60_REG_EIR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_LINKIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIE , EIE_LINKIE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_PKTIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIE , EIE_PKTIE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ( EIR_TXIF | EIE_TXERIE ) ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_EIR , EIR_TXIF | EIE_TXERIE ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_EIE , EIE_INTIE ) ; <S2SV_EndBug>
<S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug> <S2SV_StartBug> temp = ( struct sackhole * ) <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MAJ , 1 , 0 , <S2SV_EndBug> <S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN , 1 , 0 , <S2SV_EndBug>
<S2SV_StartBug> static int t220_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x86 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x80 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msleep ( 50 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( cxd2820r_attach , & cxd2820r_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe != NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( tda18271_attach , d -> fe_adap [ 0 ] . fe , 0x60 , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , & tda18271_config ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! validate_event ( & fake_pmu , leader ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! validate_event ( & fake_pmu , sibling ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! validate_event ( & fake_pmu , event ) ) <S2SV_EndBug>
<S2SV_StartBug> fd = open ( authfile , O_RDONLY , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> goto err ; <S2SV_EndBug> <S2SV_StartBug> else if ( fd >= 0 ) <S2SV_EndBug>
<S2SV_StartBug> ether_setup ( dev ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ACTION ( RUN ) ) <S2SV_EndBug> <S2SV_StartBug> handle_do_action ( req , res ) ; <S2SV_EndBug> <S2SV_StartBug> handle_action ( req , res ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = anon_inode_getfd ( ops -> name , & kvm_device_fops , dev , O_RDWR | O_CLOEXEC ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & kvm -> lock ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_get_kvm ( kvm ) ; <S2SV_EndBug>
<S2SV_StartBug> Z_STRVAL_P ( return_value ) = emalloc ( len + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < count && strlen ( op -> txt ) + 10 < R_ASM_BUFSIZE ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> int optxtlen = strlen ( op -> txt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> snprintf ( op -> txt + strlen ( op -> txt ) , R_ASM_BUFSIZE , "%d" , def ) ; <S2SV_EndBug>
<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( ! EOFBlob ( image ) ) <S2SV_EndBug> <S2SV_StartBug> if ( filepos != ( unsigned int ) filepos ) <S2SV_EndBug> <S2SV_StartBug> if ( ( MagickSizeType ) ( MATLAB_HDR . ObjectSize + filepos ) > GetBlobSize ( image ) ) <S2SV_EndBug> <S2SV_StartBug> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>cannot<S2SV_blank>read<S2SV_blank>scanrow<S2SV_blank>%u<S2SV_blank>from<S2SV_blank>a<S2SV_blank>file." , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static UINT32 nsc_rle_encode ( BYTE * in , BYTE * out , UINT32 originalSize ) <S2SV_EndBug>
<S2SV_StartBug> static void vp8_init_ctx ( vpx_codec_ctx_t * ctx , const vpx_codec_mmap_t * mmap ) <S2SV_EndBug> <S2SV_StartBug> ctx -> priv = mmap -> base ; <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> config . dec ) <S2SV_EndBug> <S2SV_StartBug> ctx -> priv -> alg_priv -> cfg = * ctx -> config . dec ; <S2SV_EndBug> <S2SV_StartBug> ctx -> config . dec = & ctx -> priv -> alg_priv -> cfg ; <S2SV_EndBug>
<S2SV_StartBug> int i , j , bytes_per_sample , bytes_per_pixel , shift_width , result = 1 ; <S2SV_EndBug> <S2SV_StartBug> uint16 bps , nstrips , planar , strips_per_sample ; <S2SV_EndBug>
<S2SV_StartBug> static int override_release ( char __user * release , int len ) <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> char * rest = UTS_RELEASE ; <S2SV_EndBug> <S2SV_StartBug> unsigned v ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , len , "2.6.%u%s" , v , rest ) ; <S2SV_EndBug> <S2SV_StartBug> ret = copy_to_user ( release , buf , len ) ; <S2SV_EndBug>
<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = foreach_nfs_shareopt ( shareopts , get_linux_shareopts_cb , <S2SV_EndBug>
<S2SV_StartBug> ncomponents = bytestream2_get_be16u ( & s -> g ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p , length , length ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = num_excl_chan ; i < num_excl_chan + 7 ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( esd ) { <S2SV_EndBug>
<S2SV_StartBug> mutt_bcache_del ( pop_data -> bcache , ctx -> hdrs [ i ] -> data ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( val == 0 && sp -> do_auto_asconf ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> char * authn_header = oidc_cfg_dir_authn_header ( r ) ; <S2SV_EndBug>
<S2SV_StartBug> char fnam [ PROCLEN ] ; <S2SV_EndBug> <S2SV_StartBug> char * line = NULL ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( nextcg ) <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( fd = open ( path_name , ( O_CREAT | O_APPEND | O_WRONLY ) , 0644 ) ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> error ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>%s" , path_name , <S2SV_EndBug>
<S2SV_StartBug> params = malloc ( sizeof ( TEE_Attribute ) * num_params ) ; <S2SV_EndBug>
<S2SV_StartBug> static char * <S2SV_EndBug> <S2SV_StartBug> if ( enc == NULL ) <S2SV_EndBug> <S2SV_StartBug> char * dec = g_strdup ( enc ) ; <S2SV_EndBug> <S2SV_StartBug> g_base64_decode_inplace ( dec , & len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( socket -> interface != NULL ) <S2SV_EndBug>
<S2SV_StartBug> stripsperplane = ( ( td -> td_imagelength + rowsperstrip - 1 ) / rowsperstrip ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( KVM_REG_SIZE ( reg -> id ) > sizeof ( tmp ) ) <S2SV_EndBug>
<S2SV_StartBug> safe_print ( value , valsz , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> safe_print ( value , valsz , "\\"" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! SSL_USE_ETM ( s ) && mac_size != 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( SSL_USE_ETM ( s ) && mac_size != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> static int read_frame_stats ( const struct twopass_rc * p , <S2SV_EndBug> <S2SV_StartBug> const FIRSTPASS_STATS * fps_ptr = p -> stats_in ; <S2SV_EndBug> <S2SV_StartBug> if ( offset >= 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( & fps_ptr [ offset ] >= p -> stats_in_end ) <S2SV_EndBug> <S2SV_StartBug> } else if ( offset < 0 ) { <S2SV_EndBug> <S2SV_StartBug> if ( & fps_ptr [ offset ] < p -> stats_in_start ) <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> goto err_unregister_v4l2_dev ; <S2SV_EndBug> <S2SV_StartBug> err_unregister_v4l2_dev : <S2SV_EndBug>
<S2SV_StartBug> static vpx_codec_err_t vp8_set_reference ( vpx_codec_alg_priv_t * ctx , <S2SV_EndBug>
<S2SV_StartBug> if ( noblock ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < len ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> av_log ( s , AV_LOG_DEBUG , "%X" , avio_r8 ( pb ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( daddr == 0 || rs -> rs_bound_addr == 0 ) { <S2SV_EndBug> <S2SV_StartBug> ret = - ENOTCONN ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> m1 [ i ] = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double_ex ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> m2 [ i ] = Z_DVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> jas_stream_t * stream ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( stream = jas_stream_create ( ) ) ) { <S2SV_EndBug> <S2SV_StartBug> obj -> bufsize_ = 1024 ; <S2SV_EndBug> <S2SV_StartBug> obj -> bufsize_ = bufsize ; <S2SV_EndBug> <S2SV_StartBug> obj -> growable_ = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk -> sk_protocol == IPPROTO_TCP ) <S2SV_EndBug>
<S2SV_StartBug> net -> dev_base_seq = 1 ; <S2SV_EndBug>
<S2SV_StartBug> overrun = timr -> it_overrun_last ; <S2SV_EndBug>
<S2SV_StartBug> if ( map && nmap ) { <S2SV_EndBug> <S2SV_StartBug> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , <S2SV_EndBug>
<S2SV_StartBug> int length ; <S2SV_EndBug> <S2SV_StartBug> ber_parse_header ( s , MCS_TAG_DOMAIN_PARAMS , & length ) ; <S2SV_EndBug>
<S2SV_StartBug> int fd = - 1 , ofd = - 1 , ret , ifindex = - 1 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , getpid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , pid ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( setns ( fd , 0 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; fd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ifindex = if_nametoindex ( oldname ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( ret = lxc_netdev_rename_by_name ( oldname , * newnamep ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> char ifname [ IFNAMSIZ ] , * namep = ifname ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_err ; <S2SV_EndBug> <S2SV_StartBug> if ( setns ( ofd , 0 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < pbi -> allocated_decoding_thread_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < pbi -> allocated_decoding_thread_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( parv [ 1 ] ) > 400 ) <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( topicName , '#' ) == NULL && strchr ( topicName , '+' ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> struct dentry * dentry = path -> dentry ; <S2SV_EndBug> <S2SV_StartBug> struct inode * inode = dentry -> d_inode ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char data [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> return - EIO ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error < 0 ) <S2SV_EndBug>
<S2SV_StartBug> ASSERT ( retval == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> status = SetImageExtent ( screen , screen -> columns , screen -> rows , exception ) ; <S2SV_EndBug> <S2SV_StartBug> if ( image == ( Image * ) NULL ) <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> int i , table_size ; <S2SV_EndBug> <S2SV_StartBug> assert ( dev -> msix . table != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> err = crypto_ahash_export ( req , state ) ; <S2SV_EndBug> <S2SV_StartBug> ctx2 -> more = 1 ; <S2SV_EndBug>
<S2SV_StartBug> case DB_VECTOR : <S2SV_EndBug>
<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug>
<S2SV_StartBug> if ( q > e ) { <S2SV_EndBug>
<S2SV_StartBug> struct completion * vfork_done = tsk -> vfork_done ; <S2SV_EndBug>
<S2SV_StartBug> rrd_set_error ( "bad<S2SV_blank>format<S2SV_blank>for<S2SV_blank>imginfo" ) ; <S2SV_EndBug>
<S2SV_StartBug> void * zmalloc ( size_t size ) { <S2SV_EndBug>
<S2SV_StartBug> ret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> pWTIntFrame -> numSamples = 0 ; <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> switch ( EXTRACT_16BITS ( bp ) ) { <S2SV_EndBug>
<S2SV_StartBug> int fourcc_is_ivf ( const char detect [ 4 ] ) { <S2SV_EndBug>
<S2SV_StartBug> OPJ_UNUSED ( p_manager ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> continue ; <S2SV_EndBug>
<S2SV_StartBug> while ( len -- ) <S2SV_EndBug> <S2SV_StartBug> while ( len -- ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , ssid . length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , challenge . length ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ND_TTEST2 ( * ( p + offset ) , rates . length ) ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( tim . bitmap , p + offset + 3 , tim . length - 3 ) ; <S2SV_EndBug>
<S2SV_StartBug> type = * ( tptr ) ; <S2SV_EndBug> <S2SV_StartBug> subtype = * ( tptr + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> tok2str ( eap_type_values , "unknown" , * ( tptr + 4 ) ) , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>(%u)," , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>TTLSv%u" , <S2SV_EndBug> <S2SV_StartBug> case EAP_TYPE_TLS : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len<S2SV_blank>%u" , EXTRACT_32BITS ( tptr + 6 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>FASTv%u" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>len<S2SV_blank>%u" , EXTRACT_32BITS ( tptr + 6 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>subtype<S2SV_blank>[%s]<S2SV_blank>0x%02x," , <S2SV_EndBug>
<S2SV_StartBug> int lsm_set_label_at ( int procfd , int on_exec , char * lsm_label ) { <S2SV_EndBug> <S2SV_StartBug> int labelfd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( on_exec ) { <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( write ( labelfd , command , size + 1 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> SYSERROR ( "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> ret = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( labelfd != - 1 ) <S2SV_EndBug> <S2SV_StartBug> close ( labelfd ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> void ntlm_write_message_fields ( wStream * s , NTLM_MESSAGE_FIELDS * fields ) <S2SV_EndBug>
<S2SV_StartBug> if ( kvm_apic_get_reg ( apic , APIC_TMICT ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> __clear_bit ( * old_keycode , dev -> keybit ) ; <S2SV_EndBug> <S2SV_StartBug> __set_bit ( ke -> keycode , dev -> keybit ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < dev -> keycodemax ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> l2tp_accm_print ( netdissect_options * ndo , const u_char * dat ) <S2SV_EndBug> <S2SV_StartBug> ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; <S2SV_EndBug>
<S2SV_StartBug> if ( handle && ! ext4_handle_valid ( handle ) ) <S2SV_EndBug> <S2SV_StartBug> if ( sbi -> s_journal && ! handle ) <S2SV_EndBug>
<S2SV_StartBug> if ( ++ l2cap_pi ( sk ) -> conf_retry < L2CAP_CONF_MAX_RETRIES ) { <S2SV_EndBug> <S2SV_StartBug> l2cap_send_cmd ( conn , l2cap_get_ident ( conn ) , L2CAP_CONF_REQ , <S2SV_EndBug> <S2SV_StartBug> goto done ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> Stream_Read_UINT32 ( s , message -> NegotiateFlags ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! old || ( old -> c_lflag ^ tty -> termios . c_lflag ) & ICANON ) { <S2SV_EndBug>
<S2SV_StartBug> f = fopen ( filepath , "rb" ) ; <S2SV_EndBug>
<S2SV_StartBug> len = b - a ; <S2SV_EndBug> <S2SV_StartBug> err_ret -> text = "with<S2SV_blank>Barry<S2SV_blank>as<S2SV_blank>BDFL,<S2SV_blank>use<S2SV_blank>\'<>\'<S2SV_blank>" <S2SV_EndBug> <S2SV_StartBug> if ( a >= tok -> line_start ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> col_offset = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> snapend_save = ndo -> ndo_snapend ; <S2SV_EndBug>
<S2SV_StartBug> pid_t pid ; <S2SV_EndBug> <S2SV_StartBug> memset ( c_path , 0 , sizeof ( c_path ) ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( c_path , "%s%s%d_C_%lu" , HSM_FM_SCK_PREFIX , mgr_prefix , <S2SV_EndBug> <S2SV_StartBug> hdl -> instance , ( long unsigned ) pid ) ; <S2SV_EndBug>
<S2SV_StartBug> const u_char * p , const u_char * ep , <S2SV_EndBug> <S2SV_StartBug> if ( p [ 0 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( ep < p + totlen ) { <S2SV_EndBug> <S2SV_StartBug> return ep + 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "value=" ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 2 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "len=%d<S2SV_blank>value=" , EXTRACT_16BITS ( & p [ 2 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 4 ] , EXTRACT_16BITS ( & p [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return p + totlen ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( cid <= 0 ) <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> dctx -> remaining = dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dctx -> remaining <= 0 ) <S2SV_EndBug> <S2SV_StartBug> return dctx -> remaining ; <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( "proc" , path , "proc" , 0 , NULL ) ) <S2SV_EndBug>
<S2SV_StartBug> ( ( flags & O_ACCMODE ) == O_WRONLY || <S2SV_EndBug> <S2SV_StartBug> ( flags & O_ACCMODE ) == O_RDWR ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( cmd & 0x01 ) off = * delta ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x02 ) off |= * delta ++ << 8UL ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x04 ) off |= * delta ++ << 16UL ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x08 ) off |= ( ( unsigned ) * delta ++ << 24UL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x10 ) len = * delta ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x20 ) len |= * delta ++ << 8UL ; <S2SV_EndBug> <S2SV_StartBug> if ( cmd & 0x40 ) len |= * delta ++ << 16UL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! len ) len = 0x10000 ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "%u" , EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( length > 2 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( length > 4 ) { <S2SV_EndBug> <S2SV_StartBug> print_string ( ndo , ( const u_char * ) ptr , length - 4 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug> <S2SV_StartBug> KEY_ALLOC_IN_QUOTA , <S2SV_EndBug>
<S2SV_StartBug> outpos += sprintf ( outpos , "<S2SV_blank>%12.3f<S2SV_blank>G" , grayscale ) ; <S2SV_EndBug> <S2SV_StartBug> outpos += sprintf ( outpos , "<S2SV_blank>%12.3f<S2SV_blank>g" , grayscale ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( par == STROKING ) { outpos += sprintf ( outpos , "<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>K" ) ; } <S2SV_EndBug> <S2SV_StartBug> else { outpos += sprintf ( outpos , "<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>k" ) ; } <S2SV_EndBug>
<S2SV_StartBug> if ( inet -> opt && inet -> opt -> srr ) <S2SV_EndBug>
<S2SV_StartBug> sprintf ( op -> buf_asm , "packed-switch-payload<S2SV_blank>%d,<S2SV_blank>%d" , array_size , first_key ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( op -> buf_asm , "sparse-switch-payload<S2SV_blank>%d" , array_size ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i" , vA ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>%#04hx" , vA , sB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i:v%i,<S2SV_blank>0x%" PFMT64x , vA , vA + 1 , lB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{}" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>[%04x]" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i..v%i},<S2SV_blank>[%04x]" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{}" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>[%04x]" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[obj+%04x]" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[0x%" PFMT64x "]" , vA , vB , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>thing+%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA , vB , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA , vB , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA , vB , vC ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC , vC + vA - 1 , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i..v%i},<S2SV_blank>class+%i" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC , vC + vA - 1 , flag_str ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i..v%i},<S2SV_blank>method+%i" , vC , vC + vA - 1 , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , "<S2SV_blank>{}" ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>class+%i" , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str , vB ) ; <S2SV_EndBug> <S2SV_StartBug> sprintf ( str , ",<S2SV_blank>method+%i" , vB ) ; <S2SV_EndBug>
<S2SV_StartBug> skb_dst_force ( skb ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( x -> pred_mv , ctx -> pred_mv , sizeof ( x -> pred_mv ) ) ; <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> rc = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc == 0 ) <S2SV_EndBug>
<S2SV_StartBug> u32 data ; <S2SV_EndBug> <S2SV_StartBug> vapic = kmap_atomic ( vcpu -> arch . apic -> vapic_page ) ; <S2SV_EndBug>
<S2SV_StartBug> cpuctx -> ctx . type = cpu_context ; <S2SV_EndBug>
<S2SV_StartBug> args -> buffer = page_address ( * ( rqstp -> rq_next_page ++ ) ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> sun_pixels = ( unsigned char * ) AcquireQuantumMemory ( pixels_length , <S2SV_EndBug>
<S2SV_StartBug> status = dm9000ReadReg ( DM9000_REG_ISR ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_ISR , ISR_LNKCHG ) ; <S2SV_EndBug> <S2SV_StartBug> status = dm9000ReadReg ( DM9000_REG_NSR ) ; <S2SV_EndBug> <S2SV_StartBug> status = dm9000ReadReg ( DM9000_REG_NCR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ISR_PR ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_ISR , ISR_PR ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000WriteReg ( DM9000_REG_IMR , IMR_PAR | IMR_LNKCHGI | IMR_PTI | IMR_PRI ) ; <S2SV_EndBug>
<S2SV_StartBug> int index , count , i ; <S2SV_EndBug> <S2SV_StartBug> int index , count , i ; <S2SV_EndBug>
<S2SV_StartBug> u32 hash , id ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip6_idents_hashrnd , sizeof ( ip6_idents_hashrnd ) ) ; <S2SV_EndBug> <S2SV_StartBug> id = ip_idents_reserve ( hash , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( p -> question -> n_keys != 1 ) <S2SV_EndBug>
<S2SV_StartBug> ASSERT ( retval == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_b_rt ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_state_rt ( cpi , get_block_context ( x , bsize ) , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> encode_superblock ( cpi , tp , output_enabled , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_stats ( cpi ) ; <S2SV_EndBug>
<S2SV_StartBug> u32 i , j , page_count = 0 , sg_per_table ; <S2SV_EndBug> <S2SV_StartBug> sg_table = rd_dev -> sg_table_array ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < rd_dev -> sg_table_count ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( sg_table ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strcmp ( arg , TKTPOLICY_ARG ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> auth . skb = chunk -> auth_chunk ; <S2SV_EndBug>
<S2SV_StartBug> static int64_t rd_pick_intra4x4block ( VP9_COMP * cpi , MACROBLOCK * x , int ib , <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE mode ; <S2SV_EndBug> <S2SV_StartBug> const uint8_t * src_init = & p -> src . buf [ raster_block_offset ( BLOCK_8X8 , ib , <S2SV_EndBug> <S2SV_StartBug> uint8_t * dst_init = & pd -> dst . buf [ raster_block_offset ( BLOCK_8X8 , ib , <S2SV_EndBug> <S2SV_StartBug> assert ( ib < 4 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( tl , l , sizeof ( tl ) ) ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . tx_size = TX_4X4 ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( tempa , ta , sizeof ( ta ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( templ , tl , sizeof ( tl ) ) ; <S2SV_EndBug> <S2SV_StartBug> const int block = ib + idy * 2 + idx ; <S2SV_EndBug> <S2SV_StartBug> int16_t * const src_diff = raster_block_offset_int16 ( BLOCK_8X8 , block , <S2SV_EndBug> <S2SV_StartBug> int16_t * const coeff = BLOCK_OFFSET ( x -> plane [ 0 ] . coeff , block ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , block , 1 , <S2SV_EndBug> <S2SV_StartBug> dst , dst_stride , idx , idy , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_subtract_block ( 4 , 4 , src_diff , 8 , src , src_stride , dst , dst_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_fwht4x4 ( src_diff , coeff , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> goto next ; <S2SV_EndBug> <S2SV_StartBug> p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_fht4x4 ( src_diff , coeff , 8 , tx_type ) ; <S2SV_EndBug> <S2SV_StartBug> distortion += vp9_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , block ) , <S2SV_EndBug> <S2SV_StartBug> 16 , & unused ) >> 2 ; <S2SV_EndBug> <S2SV_StartBug> goto next ; <S2SV_EndBug> <S2SV_StartBug> dst , dst_stride , p -> eobs [ block ] ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( a , tempa , sizeof ( tempa ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( l , templ , sizeof ( templ ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( best_dst + idy * 8 , dst_init + idy * dst_stride , <S2SV_EndBug> <S2SV_StartBug> num_4x4_blocks_wide * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> next : <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_init + idy * dst_stride , best_dst + idy * 8 , <S2SV_EndBug> <S2SV_StartBug> num_4x4_blocks_wide * 4 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void read_quant_matrix_ext ( MpegEncContext * s , GetBitContext * gb ) <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vp9_free_frame_buffers ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_free_internal_frame_buffers ( & cm -> int_frame_buffers ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( po -> fanout ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int read_frame ( struct VpxInputContext * input_ctx , vpx_image_t * img ) { <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( ! io ) ; <S2SV_EndBug>
<S2SV_StartBug> void * shared_kaddr ; <S2SV_EndBug> <S2SV_StartBug> struct pvclock_vcpu_time_info * guest_hv_clock ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vcpu -> time_page ) <S2SV_EndBug> <S2SV_StartBug> shared_kaddr = kmap_atomic ( vcpu -> time_page ) ; <S2SV_EndBug> <S2SV_StartBug> pvclock_flags = ( guest_hv_clock -> flags & PVCLOCK_GUEST_STOPPED ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( shared_kaddr + vcpu -> time_offset , & vcpu -> hv_clock , <S2SV_EndBug> <S2SV_StartBug> kunmap_atomic ( shared_kaddr ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 105 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1340 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 114 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1348 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 118 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> ( yyval . re_node ) = yr_re_node_create ( RE_NODE_ALT , ( yyvsp [ - 2 ] . re_node ) , ( yyvsp [ 0 ] . re_node ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1363 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 129 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> node = yr_re_node_create ( RE_NODE_EMPTY , NULL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> # line 1382 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 147 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1390 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 151 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1402 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 162 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1420 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 176 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1440 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 192 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1458 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 206 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1478 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 222 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1505 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 245 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1533 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 269 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1559 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 291 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1586 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 314 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1594 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 318 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1604 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 324 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1614 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 330 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1624 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 336 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1634 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 345 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1642 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 349 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1652 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 355 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1664 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 363 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1674 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 369 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1684 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 375 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1694 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 381 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1704 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 387 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1714 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 393 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1724 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 399 "re_grammar.y" <S2SV_EndBug> <S2SV_StartBug> # line 1736 "re_grammar.c" <S2SV_EndBug> <S2SV_StartBug> # line 1740 "re_grammar.c" <S2SV_EndBug>
<S2SV_StartBug> u32 now ; <S2SV_EndBug> <S2SV_StartBug> challenge_timestamp = now ; <S2SV_EndBug> <S2SV_StartBug> challenge_count = 0 ; <S2SV_EndBug>
<S2SV_StartBug> err = tfm -> seed ( tfm , seed , slen ) ; <S2SV_EndBug>
<S2SV_StartBug> update_db_bp_intercept ( & svm -> vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> int tstype ) <S2SV_EndBug> <S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> serr -> ee . ee_info = tstype ; <S2SV_EndBug>
<S2SV_StartBug> switch ( c = ( * dis_getc ) ( stream ) ) <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void vp9_first_pass ( VP9_COMP * cpi ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const PICK_MODE_CONTEXT * ctx = & x -> sb64_context ; <S2SV_EndBug> <S2SV_StartBug> YV12_BUFFER_CONFIG * const lst_yv12 = get_ref_frame_buffer ( cpi , LAST_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> int intrapenalty = 256 ; <S2SV_EndBug> <S2SV_StartBug> uint32_t lastmv_as_int = 0 ; <S2SV_EndBug> <S2SV_StartBug> const YV12_BUFFER_CONFIG * first_ref_buf = lst_yv12 ; <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( scaled_ref_buf != NULL ) { <S2SV_EndBug> <S2SV_StartBug> first_ref_buf = scaled_ref_buf ; <S2SV_EndBug> <S2SV_StartBug> for ( mb_row = 0 ; mb_row < cm -> mb_rows ; ++ mb_row ) { <S2SV_EndBug> <S2SV_StartBug> int_mv best_ref_mv ; <S2SV_EndBug> <S2SV_StartBug> double error_weight = 1.0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . aq_mode == VARIANCE_AQ ) { <S2SV_EndBug> <S2SV_StartBug> intra_error += ( int64_t ) this_error ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> current_video_frame > 0 ) { <S2SV_EndBug> <S2SV_StartBug> int tmp_err , motion_error ; <S2SV_EndBug> <S2SV_StartBug> motion_error = zz_motion_search ( x ) ; <S2SV_EndBug> <S2SV_StartBug> mv . as_int = tmp_mv . as_int ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> current_video_frame > 1 && gld_yv12 != NULL ) { <S2SV_EndBug> <S2SV_StartBug> gf_motion_error = zz_motion_search ( x ) ; <S2SV_EndBug> <S2SV_StartBug> first_pass_motion_search ( cpi , x , & zero_mv , & tmp_mv . as_mv , <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . aq_mode == VARIANCE_AQ ) { <S2SV_EndBug> <S2SV_StartBug> best_ref_mv . as_int = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( this_error - intrapenalty ) * 9 <= motion_error * 10 ) && <S2SV_EndBug> <S2SV_StartBug> this_error < 2 * intrapenalty ) <S2SV_EndBug> <S2SV_StartBug> ++ neutral_count ; <S2SV_EndBug> <S2SV_StartBug> mv . as_mv . col *= 8 ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi [ 0 ] -> mbmi . mv [ 0 ] = mv ; <S2SV_EndBug> <S2SV_StartBug> sum_mvr += mv . as_mv . row ; <S2SV_EndBug> <S2SV_StartBug> sum_mvr_abs += abs ( mv . as_mv . row ) ; <S2SV_EndBug> <S2SV_StartBug> sum_mvc += mv . as_mv . col ; <S2SV_EndBug> <S2SV_StartBug> sum_mvc_abs += abs ( mv . as_mv . col ) ; <S2SV_EndBug> <S2SV_StartBug> sum_mvrs += mv . as_mv . row * mv . as_mv . row ; <S2SV_EndBug> <S2SV_StartBug> sum_mvcs += mv . as_mv . col * mv . as_mv . col ; <S2SV_EndBug> <S2SV_StartBug> best_ref_mv . as_int = mv . as_int ; <S2SV_EndBug> <S2SV_StartBug> if ( mv . as_int != lastmv_as_int ) <S2SV_EndBug> <S2SV_StartBug> lastmv_as_int = mv . as_int ; <S2SV_EndBug> <S2SV_StartBug> if ( mv . as_mv . row > 0 ) <S2SV_EndBug> <S2SV_StartBug> else if ( mv . as_mv . row < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( mv . as_mv . row > 0 ) <S2SV_EndBug> <S2SV_StartBug> else if ( mv . as_mv . row < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( mv . as_mv . col > 0 ) <S2SV_EndBug> <S2SV_StartBug> else if ( mv . as_mv . col < 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( mv . as_mv . col > 0 ) <S2SV_EndBug> <S2SV_StartBug> else if ( mv . as_mv . col < 0 ) <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug> <S2SV_StartBug> fps . frame = cm -> current_video_frame ; <S2SV_EndBug> <S2SV_StartBug> fps . spatial_layer_id = cpi -> svc . spatial_layer_id ; <S2SV_EndBug> <S2SV_StartBug> fps . intra_error = ( double ) ( intra_error >> 8 ) ; <S2SV_EndBug> <S2SV_StartBug> fps . pcnt_inter = ( double ) intercount / cm -> MBs ; <S2SV_EndBug> <S2SV_StartBug> fps . pcnt_second_ref = ( double ) second_ref_count / cm -> MBs ; <S2SV_EndBug> <S2SV_StartBug> fps . pcnt_neutral = ( double ) neutral_count / cm -> MBs ; <S2SV_EndBug> <S2SV_StartBug> fps . MVrv = ( ( double ) sum_mvrs - ( fps . MVr * fps . MVr / mvcount ) ) / mvcount ; <S2SV_EndBug> <S2SV_StartBug> fps . MVcv = ( ( double ) sum_mvcs - ( fps . MVc * fps . MVc / mvcount ) ) / mvcount ; <S2SV_EndBug> <S2SV_StartBug> fps . pcnt_motion = ( double ) mvcount / cm -> MBs ; <S2SV_EndBug> <S2SV_StartBug> fps . duration = ( double ) ( cpi -> source -> ts_end - cpi -> source -> ts_start ) ; <S2SV_EndBug> <S2SV_StartBug> accumulate_stats ( & twopass -> total_stats , & fps ) ; <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_frame ( lst_yv12 , gld_yv12 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 ) { <S2SV_EndBug> <S2SV_StartBug> swap_yv12 ( lst_yv12 , new_yv12 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> current_video_frame == 0 && gld_yv12 != NULL ) { <S2SV_EndBug> <S2SV_StartBug> vp8_yv12_copy_frame ( lst_yv12 , gld_yv12 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static const int16_t * filter = vp9_down2_symeven_half_filter ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( user -> uid_keyring ) { <S2SV_EndBug>
<S2SV_StartBug> const int length ) { <S2SV_EndBug>
<S2SV_StartBug> efx -> mac_op -> update_stats ( efx ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_frame ( vpx_codec_ctx_t * codec , <S2SV_EndBug> <S2SV_StartBug> VpxVideoWriter * writer ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( pkt = vpx_codec_get_cx_data ( codec , & iter ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! seig_entry -> key_info [ 0 ] ) <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> for ( cnt = 0 , i = 0 ; cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; ++ cnt ) { <S2SV_EndBug> <S2SV_StartBug> i += verdef -> vd_next ; <S2SV_EndBug>
<S2SV_StartBug> int size ; <S2SV_EndBug> <S2SV_StartBug> size = offsetof ( PATH , p [ 0 ] ) + sizeof ( path -> p [ 0 ] ) * npts ; <S2SV_EndBug>
<S2SV_StartBug> size = INT_MAX ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_gettargetinfo ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> int * pdata ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> if ( arg_seccomp_block_secondary ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> hfs_bnode_read ( src_fd . bnode , & entry , src_fd . entryoffset , <S2SV_EndBug>
<S2SV_StartBug> flags = AV_RL16 ( p + sizeof ( ff_asf_guid ) * 3 + 24 ) ; <S2SV_EndBug> <S2SV_StartBug> } else if ( ! memcmp ( p , ff_asf_ext_stream_header , sizeof ( ff_asf_guid ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! authctxt -> valid ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( b = sshbuf_new ( ) ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> SEPARATE_ZVAL ( var2 ) ; <S2SV_EndBug> <S2SV_StartBug> convert_to_double ( * var2 ) ; <S2SV_EndBug> <S2SV_StartBug> matrix [ i ] [ j ] = ( float ) Z_DVAL_PP ( var2 ) ; <S2SV_EndBug> <S2SV_StartBug> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>a<S2SV_blank>3x3<S2SV_blank>matrix" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static inline void mcryptd_check_internal ( struct rtattr * * tb , u32 * type , <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> type & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( algt -> mask & CRYPTO_ALG_INTERNAL ) ) <S2SV_EndBug>
<S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> xd -> mi = cm -> mi_grid_visible ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cm -> counts ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> coef_counts ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> tx_stepdown_count ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( cpi -> rd_comp_pred_diff ) ; <S2SV_EndBug> <S2SV_StartBug> switch_lossless_mode ( cpi , cpi -> mb . e_mbd . lossless ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_initialize_me_consts ( cpi , cm -> base_qindex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> oxcf . tuning == VP8_TUNE_SSIM ) <S2SV_EndBug> <S2SV_StartBug> cm -> prev_mi = get_prev_mi ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> PICK_MODE_CONTEXT * ctx = & cpi -> mb . sb64_context ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . partition_search_type == SOURCE_VAR_BASED_PARTITION && <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> const int tile_cols = 1 << cm -> log2_tile_cols ; <S2SV_EndBug> <S2SV_StartBug> encode_rd_sb_row ( cpi , & tile , mi_row , & tp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sf -> skip_encode_sb ) { <S2SV_EndBug>
<S2SV_StartBug> size_t input_size , <S2SV_EndBug> <S2SV_StartBug> # define prolog if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL ; break ; } <S2SV_EndBug> <S2SV_StartBug> # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } <S2SV_EndBug> <S2SV_StartBug> input -= character_size ; <S2SV_EndBug> <S2SV_StartBug> max_bytes_matched = ( int ) yr_min ( input_size , RE_SCAN_LIMIT ) ; <S2SV_EndBug> <S2SV_StartBug> match = IS_WORD_CHAR ( * input ) ; <S2SV_EndBug> <S2SV_StartBug> match = ! IS_WORD_CHAR ( * input ) ; <S2SV_EndBug> <S2SV_StartBug> ! ( flags & RE_FLAGS_NOT_AT_START ) && <S2SV_EndBug> <S2SV_StartBug> match = TRUE ; <S2SV_EndBug> <S2SV_StartBug> match = TRUE ; <S2SV_EndBug> <S2SV_StartBug> else if ( IS_WORD_CHAR ( * ( input - input_incr ) ) != IS_WORD_CHAR ( * input ) ) <S2SV_EndBug> <S2SV_StartBug> kill = input_size > ( size_t ) bytes_matched ; <S2SV_EndBug> <S2SV_StartBug> kill = ( flags & RE_FLAGS_NOT_AT_START ) || ( bytes_matched != 0 ) ; <S2SV_EndBug> <S2SV_StartBug> input_size > ( size_t ) bytes_matched ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ALOGE ( "b/26366256" ) ; <S2SV_EndBug>
<S2SV_StartBug> r = 0 ; <S2SV_EndBug>
<S2SV_StartBug> __be32 saddr , __be32 daddr , struct ip_options * opt ) <S2SV_EndBug> <S2SV_StartBug> skb_push ( skb , sizeof ( struct iphdr ) + ( opt ? opt -> optlen : 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> optlen ) { <S2SV_EndBug> <S2SV_StartBug> iph -> ihl += opt -> optlen >> 2 ; <S2SV_EndBug> <S2SV_StartBug> ip_options_build ( skb , opt , daddr , rt , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( direction != ITER_PIPE ) ; <S2SV_EndBug>
<S2SV_StartBug> log_err ( ctx , "Cannot<S2SV_blank>define<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>a<S2SV_blank>keymap<S2SV_blank>file\\n" , <S2SV_EndBug> <S2SV_StartBug> xkb_file_type_to_string ( file -> file_type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> # define ThrowPICTException ( exception , message ) { if ( tile_image != ( Image * ) NULL ) tile_image = DestroyImage ( tile_image ) ; if ( read_info != ( ImageInfo * ) NULL ) read_info = DestroyImageInfo ( read_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> if ( length != 0x000a ) <S2SV_EndBug> <S2SV_StartBug> if ( ReadRectangle ( image , & frame ) == MagickFalse ) <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> length = ReadBlobMSBShort ( image ) ; <S2SV_EndBug> <S2SV_StartBug> if ( length == 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( length > 154 ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) length ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) length ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug>
<S2SV_StartBug> get_page ( * page ) ; <S2SV_EndBug>
<S2SV_StartBug> ret = get_tag ( asn1 , len , & t , & contents , & clen , & asn1 , & len ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( nr > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = tty -> ops -> write ( tty , b , nr ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | <S2SV_EndBug> <S2SV_StartBug> if ( mode & FALLOC_FL_KEEP_SIZE ) <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & inode -> i_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( max_blocks > 0 ) { <S2SV_EndBug>
<S2SV_StartBug> prefetch_table ( ( const void * ) encT , sizeof ( encT ) ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( buf + x , data , state -> xsize ) ; <S2SV_EndBug>
<S2SV_StartBug> gfp_mask = sk -> sk_allocation ; <S2SV_EndBug> <S2SV_StartBug> int npages ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( tcp_specified && settings . port != 0 && ! udp_specified ) { <S2SV_EndBug>
<S2SV_StartBug> char * prime_arg1 , <S2SV_EndBug> <S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> free ( prime_arg1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( param2 >= NUM_EQ_BANDS ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( param2 >= NUM_EQ_BANDS ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( param2 >= NUM_EQ_BANDS ) { <S2SV_EndBug> <S2SV_StartBug> p -> status = - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! nonce1 ) { <S2SV_EndBug> <S2SV_StartBug> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>nonce1<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug> <S2SV_StartBug> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>n2size<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( fd = open ( path_name , ( O_CREAT | O_APPEND | O_WRONLY ) , 0644 ) ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> error ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>%s" , path_name , <S2SV_EndBug>
<S2SV_StartBug> walk -> private += __mincore_unmapped_range ( addr , end , <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( segment -> temporal_offset_entries = av_calloc ( segment -> nb_index_entries , sizeof ( * segment -> temporal_offset_entries ) ) ) || <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < segment -> nb_index_entries ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> void * zrealloc ( void * ptr , size_t size ) { <S2SV_EndBug>
<S2SV_StartBug> FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_reader_init ( & r , data , partition_size ) ) <S2SV_EndBug> <S2SV_StartBug> return vp9_reader_has_error ( & r ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( numrows < 0 || numcols < 0 ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> matrix -> datasize_ = numrows * numcols ; <S2SV_EndBug> <S2SV_StartBug> jas_matrix_destroy ( matrix ) ; <S2SV_EndBug> <S2SV_StartBug> jas_matrix_destroy ( matrix ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> * dst = * src ; <S2SV_EndBug>
<S2SV_StartBug> int flags = fcntl ( semaphore -> fd , F_GETFL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( fcntl ( semaphore -> fd , F_SETFL , flags | O_NONBLOCK ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( fcntl ( semaphore -> fd , F_SETFL , flags ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s]" , <S2SV_EndBug>
<S2SV_StartBug> int idx , ret = - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> BUG_ON ( guest_irq >= irq_rt -> nr_rt_entries ) ; <S2SV_EndBug> <S2SV_StartBug> hlist_for_each_entry ( e , & irq_rt -> map [ guest_irq ] , link ) { <S2SV_EndBug>
<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( unsigned int ) arg >= cdi -> capacity ) <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct mount * parent = ACCESS_ONCE ( mnt -> mnt_parent ) ; <S2SV_EndBug>
<S2SV_StartBug> vcpu = kvm_arch_vcpu_create ( kvm , id ) ; <S2SV_EndBug>
<S2SV_StartBug> void usage_exit ( ) { <S2SV_EndBug>
<S2SV_StartBug> ld -> bytes_left = ld -> buffer_size - words * 4 ; <S2SV_EndBug>
<S2SV_StartBug> SetImageColorspace ( image , GRAYColorspace ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( str , ':' ) ) <S2SV_EndBug> <S2SV_StartBug> if ( strchr ( str , '.' ) ) <S2SV_EndBug>
<S2SV_StartBug> pfn = kvm_pin_pages ( slot , gfn , page_size ) ; <S2SV_EndBug> <S2SV_StartBug> kvm_unpin_pages ( kvm , pfn , page_size ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( bank ) <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL1 | ECON1_BSEL0 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL0 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL1 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ClearBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL0 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL1 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_BSEL1 | ECON1_BSEL0 ) ; <S2SV_EndBug>
<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> c -> c_normalize_args = Py_BuildValue ( "(sN)" , "NFKC" , Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( upid == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> buffered_app_data ) , rr -> seq_num ) ; <S2SV_EndBug>
<S2SV_StartBug> pfkey_broadcast ( skb , GFP_ATOMIC , BROADCAST_ALL , NULL , c -> net ) ; <S2SV_EndBug>
<S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , ctxt -> src . val ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( current -> mm ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> leave_mm ( smp_processor_id ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static int conditional_skipintra ( MB_PREDICTION_MODE mode , <S2SV_EndBug>
<S2SV_StartBug> struct channel_info * info = <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> size_t copied , len , cur_len ; <S2SV_EndBug> <S2SV_StartBug> copied = min_t ( const size_t , cur_len , PAGE_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> 0 , copied ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cur_len = save_len - cur_len ; <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> static void write_inter_mode ( vp9_writer * w , MB_PREDICTION_MODE mode , <S2SV_EndBug> <S2SV_StartBug> const vp9_prob * probs ) { <S2SV_EndBug>
<S2SV_StartBug> struct va_format vaf ; <S2SV_EndBug> <S2SV_StartBug> nfunc , line , qedi -> host_no , & vaf ) ; <S2SV_EndBug> <S2SV_StartBug> pr_info ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , nfunc , line , & vaf ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , j , bytes_per_sample , bytes_per_pixel , shift_width , result = 1 ; <S2SV_EndBug> <S2SV_StartBug> uint16 bps , nstrips , planar , strips_per_sample ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> size_t count , const uint64_t clsid [ 2 ] ) <S2SV_EndBug> <S2SV_StartBug> if ( ! NOTMIME ( ms ) ) <S2SV_EndBug> <S2SV_StartBug> str = cdf_clsid_to_mime ( clsid , clsid2mime ) ; <S2SV_EndBug>
<S2SV_StartBug> numbers [ argc ++ ] = ( unsigned long ) mtree_atol ( & p ) ; <S2SV_EndBug> <S2SV_StartBug> if ( argc > MAX_PACK_ARGS ) { <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( msr -> msc_reqbody_spilltodisk ) <S2SV_EndBug>
<S2SV_StartBug> dtls1_buffer_record ( s , & ( s -> d1 -> buffered_app_data ) , rr -> seq_num ) ; <S2SV_EndBug>
<S2SV_StartBug> parse_global_option ( CMD_SET_DEFAULTS , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> char fnam [ PROCLEN ] ; <S2SV_EndBug> <S2SV_StartBug> char * line = NULL ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> if ( nextcg ) <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> if ( x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = x * size + b ; <S2SV_EndBug> <S2SV_StartBug> if ( y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> j = ( ( x * sy + y ) * size ) + b ; <S2SV_EndBug> <S2SV_StartBug> if ( z < sz && y < sy && x < sx ) { <S2SV_EndBug> <S2SV_StartBug> ( ( char * ) data -> data ) [ j ] = output [ i ] ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t off = offset , tmp , finish ; <S2SV_EndBug> <S2SV_StartBug> finish = fru -> size ; <S2SV_EndBug> <S2SV_StartBug> offset + length , finish - offset ) ; <S2SV_EndBug> <S2SV_StartBug> do { <S2SV_EndBug> <S2SV_StartBug> memcpy ( ( frubuf + off ) - offset , rsp -> data + 1 , tmp ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tmp == 0 && off < finish ) <S2SV_EndBug>
<S2SV_StartBug> g -> head <= 0 || <S2SV_EndBug>
<S2SV_StartBug> if ( ret ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> ptr -> kernel_data = NULL ; <S2SV_EndBug>
<S2SV_StartBug> int64_t target_end = s -> end_off ? s -> end_off : s -> filesize ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> if ( ! len && ( ! s -> willclose || s -> chunksize < 0 ) && <S2SV_EndBug> <S2SV_StartBug> "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRId64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRId64 "\\n" , <S2SV_EndBug>
<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug>
<S2SV_StartBug> bh = sb_bread ( rs -> inode -> i_sb , rs -> cont_extent ) ; <S2SV_EndBug>
<S2SV_StartBug> vp8_mse16x16 ( orig + col , orig_stride , <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 74 && <S2SV_EndBug> <S2SV_StartBug> rdesc [ 61 ] == 0x05 && rdesc [ 62 ] == 0x08 && <S2SV_EndBug>
<S2SV_StartBug> attrs = malloc ( sizeof ( TEE_Attribute ) * attr_count ) ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ sz_rfbSetEncodingsMsg + MAX_ENCODINGS * 4 ] ; <S2SV_EndBug> <S2SV_StartBug> rfbSetEncodingsMsg * se = ( rfbSetEncodingsMsg * ) buf ; <S2SV_EndBug> <S2SV_StartBug> uint32_t * encs = ( uint32_t * ) ( & buf [ sz_rfbSetEncodingsMsg ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! WriteToRFBServer ( client , buf , len ) ) return FALSE ; <S2SV_EndBug>
<S2SV_StartBug> off_t pos = sys -> tell ( fh ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fn ) return MSPACK_ERR_NOMEMORY ; <S2SV_EndBug> <S2SV_StartBug> hdr -> filename = fn ; <S2SV_EndBug> <S2SV_StartBug> if ( sys -> read ( fh , & buf [ 0 ] , 9 ) != 9 ) return MSPACK_ERR_READ ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 9 ; i ++ , fn ++ ) if ( ! ( * fn = buf [ i ] ) ) break ; <S2SV_EndBug> <S2SV_StartBug> pos += ( i < 9 ) ? i + 1 : 9 ; <S2SV_EndBug> <S2SV_StartBug> return MSPACK_ERR_SEEK ; <S2SV_EndBug> <S2SV_StartBug> if ( sys -> read ( fh , & buf [ 0 ] , 4 ) != 4 ) return MSPACK_ERR_READ ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 ; i ++ , fn ++ ) if ( ! ( * fn = buf [ i ] ) ) break ; <S2SV_EndBug> <S2SV_StartBug> pos += ( i < 4 ) ? i + 1 : 4 ; <S2SV_EndBug> <S2SV_StartBug> return MSPACK_ERR_SEEK ; <S2SV_EndBug>
<S2SV_StartBug> case NPPVformValue : <S2SV_EndBug> <S2SV_StartBug> type = RPC_TYPE_BOOLEAN ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int i ; <S2SV_EndBug>
<S2SV_StartBug> return print_value ( item , 0 , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , ubits = BN_num_bits ( u ) , vbits = BN_num_bits ( v ) , <S2SV_EndBug> <S2SV_StartBug> if ( ubits <= BN_BITS2 && udp [ 0 ] == 1 ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( setpwnam ( pw ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> int namelen = strlen ( name ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) <S2SV_EndBug> <S2SV_StartBug> data ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! size ) <S2SV_EndBug> <S2SV_StartBug> if ( size == namelen && ! memcmp ( data - size , name , namelen ) ) { <S2SV_EndBug> <S2SV_StartBug> snprintf ( dst , dst_size , "%g" , av_int2double ( AV_RB64 ( data ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> size += miux_tlv_length ; <S2SV_EndBug> <S2SV_StartBug> size += rw_tlv_length ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> int pidfd = creat ( pid_file , S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH ) ; <S2SV_EndBug>
<S2SV_StartBug> { LXC_AUTO_PROC_MASK , LXC_AUTO_PROC_MIXED , "%r/proc/sys/net" , "%r/proc/net" , NULL , MS_BIND , NULL } , <S2SV_EndBug> <S2SV_StartBug> { LXC_AUTO_PROC_MASK , LXC_AUTO_PROC_MIXED , "%r/proc/net" , "%r/proc/sys/net" , NULL , MS_MOVE , NULL } , <S2SV_EndBug> <S2SV_StartBug> r = mount ( source , destination , default_mounts [ i ] . fstype , mflags , default_mounts [ i ] . options ) ; <S2SV_EndBug>
<S2SV_StartBug> PyDict_SetItemString ( d , "_fields" , empty_tuple ) < 0 || <S2SV_EndBug> <S2SV_StartBug> PyDict_SetItemString ( d , "_attributes" , empty_tuple ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned short ) ( buffer [ 0 ] << 8 ) ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffff ) ; <S2SV_EndBug>
<S2SV_StartBug> dsize += svbranch . len ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! chip -> num_interfaces ) <S2SV_EndBug> <S2SV_StartBug> atomic_dec ( & chip -> active ) ; <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( line , ':' ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & up -> id , & kp -> id , sizeof ( up -> id ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_share_access ( struct xdr_stream * xdr , int open_flags ) <S2SV_EndBug> <S2SV_StartBug> switch ( open_flags & ( FMODE_READ | FMODE_WRITE ) ) { <S2SV_EndBug> <S2SV_StartBug> BUG ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! headcount ) { <S2SV_EndBug> <S2SV_StartBug> msg . msg_iovlen = in ; <S2SV_EndBug> <S2SV_StartBug> sock_len , MSG_DONTWAIT | MSG_TRUNC ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( err != sock_len ) ) { <S2SV_EndBug>
<S2SV_StartBug> name . name = buf ; <S2SV_EndBug> <S2SV_StartBug> err = fuse_copy_one ( cs , buf , outarg . namelen + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> trust_data . dwUIChoice = WTD_UI_ALL ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug>
<S2SV_StartBug> len = ( ms -> c . len += 20 ) * sizeof ( * ms -> c . li ) ; <S2SV_EndBug>
<S2SV_StartBug> pid_t child ; <S2SV_EndBug> <S2SV_StartBug> tmpdir = mkdtemp ( template ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mount ( "/proc/self/fd" , tmpdir , NULL , MS_BIND , NULL ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> fuse_log ( FUSE_LOG_ERR , "mount(/proc/self/fd,<S2SV_blank>%s,<S2SV_blank>MS_BIND):<S2SV_blank>%m\\n" , <S2SV_EndBug> <S2SV_StartBug> lo -> proc_self_fd = open ( tmpdir , O_PATH ) ; <S2SV_EndBug> <S2SV_StartBug> fuse_log ( FUSE_LOG_ERR , "open(%s,<S2SV_blank>O_PATH):<S2SV_blank>%m\\n" , tmpdir ) ; <S2SV_EndBug>
<S2SV_StartBug> int c_sz ; <S2SV_EndBug> <S2SV_StartBug> _img -> bps = _y4m -> vpx_bps ; <S2SV_EndBug> <S2SV_StartBug> pic_sz = _y4m -> pic_w * _y4m -> pic_h ; <S2SV_EndBug> <S2SV_StartBug> c_h = ( _y4m -> pic_h + _y4m -> dst_c_dec_v - 1 ) / _y4m -> dst_c_dec_v ; <S2SV_EndBug> <S2SV_StartBug> _img -> stride [ PLANE_Y ] = _img -> stride [ PLANE_ALPHA ] = _y4m -> pic_w ; <S2SV_EndBug> <S2SV_StartBug> _img -> stride [ PLANE_U ] = _img -> stride [ PLANE_V ] = c_w ; <S2SV_EndBug> <S2SV_StartBug> _img -> planes [ PLANE_Y ] = _y4m -> dst_buf ; <S2SV_EndBug> <S2SV_StartBug> _img -> planes [ PLANE_U ] = _y4m -> dst_buf + pic_sz ; <S2SV_EndBug> <S2SV_StartBug> _img -> planes [ PLANE_V ] = _y4m -> dst_buf + pic_sz + c_sz ; <S2SV_EndBug> <S2SV_StartBug> _img -> planes [ PLANE_ALPHA ] = _y4m -> dst_buf + pic_sz + 2 * c_sz ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) CopyMagickMemory ( clone_info -> magick , magic_info -> name , MaxTextExtent ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> WORD32 i ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < BUF_MGR_MAX_CNT ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> ihevc_buf_mgr_release ( ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr , i , BUF_MGR_REF ) ; <S2SV_EndBug>
<S2SV_StartBug> sraSpanRemove ( sraSpan * span ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> prog [ N ] . pred = NULL ; <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> ref ) { <S2SV_EndBug>
<S2SV_StartBug> nla_for_each_nested ( attr , info -> attrs [ NL80211_ATTR_SCAN_SSIDS ] , tmp ) { <S2SV_EndBug> <S2SV_StartBug> request -> ssids [ i ] . ssid_len = nla_len ( attr ) ; <S2SV_EndBug>
<S2SV_StartBug> static inline __u32 dccp_v6_init_sequence ( struct sk_buff * skb ) <S2SV_EndBug>
<S2SV_StartBug> task -> tk_priority = task_setup_data -> priority - RPC_PRIORITY_LOW ; <S2SV_EndBug>
<S2SV_StartBug> expr_ty returns ; <S2SV_EndBug> <S2SV_StartBug> * out = FunctionDef ( name , args , body , decorator_list , returns , lineno , <S2SV_EndBug> <S2SV_StartBug> expr_ty returns ; <S2SV_EndBug> <S2SV_StartBug> * out = AsyncFunctionDef ( name , args , body , decorator_list , returns , <S2SV_EndBug> <S2SV_StartBug> lineno , col_offset , end_lineno , end_col_offset , <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_LookupAttrId ( obj , & PyId_targets , & tmp ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> * out = Assign ( targets , value , lineno , col_offset , end_lineno , <S2SV_EndBug> <S2SV_StartBug> asdl_seq * orelse ; <S2SV_EndBug> <S2SV_StartBug> * out = For ( target , iter , body , orelse , lineno , col_offset , end_lineno , <S2SV_EndBug> <S2SV_StartBug> asdl_seq * orelse ; <S2SV_EndBug> <S2SV_StartBug> * out = AsyncFor ( target , iter , body , orelse , lineno , col_offset , <S2SV_EndBug> <S2SV_StartBug> if ( _PyObject_LookupAttrId ( obj , & PyId_items , & tmp ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> * out = With ( items , body , lineno , col_offset , end_lineno , <S2SV_EndBug> <S2SV_StartBug> asdl_seq * body ; <S2SV_EndBug> <S2SV_StartBug> * out = AsyncWith ( items , body , lineno , col_offset , end_lineno , <S2SV_EndBug>
<S2SV_StartBug> if ( s -> width != avctx -> width && s -> height != avctx -> height ) { <S2SV_EndBug>
<S2SV_StartBug> struct list_head tmplist ; <S2SV_EndBug> <S2SV_StartBug> if ( oldsp -> do_auto_asconf ) { <S2SV_EndBug>
<S2SV_StartBug> struct snd_ctl_elem_id id ; <S2SV_EndBug> <S2SV_StartBug> up_write ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> for ( idx = 0 ; idx < kcontrol -> count ; idx ++ , id . index ++ , id . numid ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( nelements == 0 ) { <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( ( "CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>0\\n" ) ) ; <S2SV_EndBug> <S2SV_StartBug> DPRINTF ( ( "nelements<S2SV_blank>=<S2SV_blank>%" SIZE_T_FORMAT "u\\n" , <S2SV_EndBug>
<S2SV_StartBug> disconnect = ! IS_MNT_LOCKED_AND_LAZY ( p ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t numChannels , chansSpecified , chanMask = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( numChannels < chansSpecified || numChannels < 1 ) { <S2SV_EndBug> <S2SV_StartBug> total_samples = dff_chunk_header . ckDataSize / config -> num_channels ; <S2SV_EndBug>
<S2SV_StartBug> BIGNUM a , c , d , e ; <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> BN_bntest_rand ( & a , 40 + i * 10 , 0 , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> a . neg = rand_neg ( ) ; <S2SV_EndBug> <S2SV_StartBug> BN_sqr ( & c , & a , ctx ) ; <S2SV_EndBug> <S2SV_StartBug> BN_print ( bp , & a ) ; <S2SV_EndBug> <S2SV_StartBug> BN_print ( bp , & a ) ; <S2SV_EndBug> <S2SV_StartBug> BN_print ( bp , & c ) ; <S2SV_EndBug> <S2SV_StartBug> BN_div ( & d , & e , & c , & a , ctx ) ; <S2SV_EndBug> <S2SV_StartBug> BN_sub ( & d , & d , & a ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! BN_is_zero ( & d ) || ! BN_is_zero ( & e ) ) <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Square<S2SV_blank>test<S2SV_blank>failed!\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> ptime -> day % 32 , short_months [ ( ptime -> month - 1 ) % 12 ] , <S2SV_EndBug> <S2SV_StartBug> ptime -> day % 32 , short_months [ ( ptime -> month - 1 ) % 12 ] , <S2SV_EndBug> <S2SV_StartBug> ptime -> day % 32 , short_months [ ( ptime -> month - 1 ) % 12 ] , <S2SV_EndBug>
<S2SV_StartBug> if ( verify_vc_kbmode ( fd_d ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug>
<S2SV_StartBug> fpm_globals . max_requests = wp -> config -> pm_max_requests ; <S2SV_EndBug>
<S2SV_StartBug> goto retry ; <S2SV_EndBug>
<S2SV_StartBug> fprintf ( file , "<S2SV_blank>%s=\\"%s\\"" , tag -> bit_name , tag -> bit_val ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( cnt = 0 , i = 0 ; i >= 0 && cnt < shdr -> sh_info && ( ( char * ) defs + i < end ) ; ++ cnt ) { <S2SV_EndBug> <S2SV_StartBug> if ( vdaux < 1 ) { <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug>
<S2SV_StartBug> next_input = input + i * input_incr ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ip = next_opcode ; <S2SV_EndBug>
<S2SV_StartBug> random_ether_addr ( dev -> dev_addr ) ; <S2SV_EndBug>
<S2SV_StartBug> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 2 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 - 16 , xd -> dst . y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 4 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer - pre_y_stride * 16 , pre_y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 5 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer - 16 , pre_y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 3 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer , pre_y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 6 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer + 16 , pre_y_stride , UINT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> near_sad [ 7 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer + pre_y_stride * 16 , pre_y_stride , UINT_MAX ) ; <S2SV_EndBug>
<S2SV_StartBug> out_dqrele : <S2SV_EndBug>
<S2SV_StartBug> static void parse_input ( h2o_http2_conn_t * conn ) <S2SV_EndBug> <S2SV_StartBug> close_connection ( conn ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags , <S2SV_EndBug> <S2SV_StartBug> offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags , <S2SV_EndBug> <S2SV_StartBug> data + offset , <S2SV_EndBug>
<S2SV_StartBug> if ( ! av_strstart ( proto_name , "http" , NULL ) && ! av_strstart ( proto_name , "file" , NULL ) ) <S2SV_EndBug>
<S2SV_StartBug> while ( buflen > 0 ) { <S2SV_EndBug> <S2SV_StartBug> return union_desc ; <S2SV_EndBug>
<S2SV_StartBug> i += 2 ; <S2SV_EndBug> <S2SV_StartBug> ( i + 2 == NCH ( n ) && TYPE ( CHILD ( n , i + 1 ) ) == COMMA ) ) { <S2SV_EndBug> <S2SV_StartBug> res = handle_keywordonly_args ( c , n , i , <S2SV_EndBug> <S2SV_StartBug> i += 3 ; <S2SV_EndBug> <S2SV_StartBug> i += 3 ; <S2SV_EndBug>
<S2SV_StartBug> return ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ASSERT ( redir_index < IOAPIC_NUM_PINS ) ; <S2SV_EndBug> <S2SV_StartBug> redir_content = ioapic -> redirtbl [ redir_index ] . bits ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( cpi -> gf_active_flags , 1 , ( cm -> mb_rows * cm -> mb_cols ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! IS_POSIXACL ( inode ) || ! inode -> i_op -> set_acl ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> goto out_errno ; <S2SV_EndBug> <S2SV_StartBug> error = inode -> i_op -> set_acl ( inode , argp -> acl_default , <S2SV_EndBug>
<S2SV_StartBug> pvc . sap_family = AF_ATMPVC ; <S2SV_EndBug>
<S2SV_StartBug> cancel_delayed_work_sync ( & ln -> grace_period_end ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( resp ) ; <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error <= 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> netdev_dbg ( vif -> dev , "Need<S2SV_blank>more<S2SV_blank>frags\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "Too<S2SV_blank>many<S2SV_blank>frags\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "Frags<S2SV_blank>galore\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> netdev_dbg ( vif -> dev , "txp->offset:<S2SV_blank>%x,<S2SV_blank>size:<S2SV_blank>%u\\n" , <S2SV_EndBug> <S2SV_StartBug> txp -> offset , txp -> size ) ; <S2SV_EndBug>
<S2SV_StartBug> const struct aodv_hello * ah ; <S2SV_EndBug> <S2SV_StartBug> goto trunc ; <S2SV_EndBug>
<S2SV_StartBug> down_write ( & mm -> mmap_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> strncpy ( szSec , opt_string , sepIdx ) ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( szKey , sep , sepIdx ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szVal , sep2 + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> out_put : <S2SV_EndBug> <S2SV_StartBug> return datagrams ; <S2SV_EndBug> <S2SV_StartBug> return datagrams ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> message -> srcIpAddr = queueItem -> srcIpAddr ; <S2SV_EndBug>
<S2SV_StartBug> int hns_nic_net_xmit_hw ( struct net_device * ndev , <S2SV_EndBug> <S2SV_StartBug> wmb ( ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % stride ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vma_stop ( priv , vma ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! sock || ( ! iov && iovcnt ) || iovcnt < 0 || iovcnt > OE_IOV_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( oe_iov_pack ( iov , iovcnt , & buf , & buf_size ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> OE_RAISE_ERRNO ( OE_ENOMEM ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret > 0 ) <S2SV_EndBug>
<S2SV_StartBug> slapi_pblock_get ( pb , SLAPI_PB_RESULT_TEXT , & pbtext ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( jas_init ( ) ) { <S2SV_EndBug> <S2SV_StartBug> infile = 0 ; <S2SV_EndBug> <S2SV_StartBug> case OPT_MAXMEM : <S2SV_EndBug> <S2SV_StartBug> if ( ! ( image = jas_image_decode ( instream , fmtid , 0 ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( numcmpts = jas_image_numcmpts ( image ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( fmtname = jas_image_fmttostr ( fmtid ) ) ) { <S2SV_EndBug> <S2SV_StartBug> printf ( "%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n" , fmtname , numcmpts , width , height , depth , ( long ) jas_image_rawsize ( image ) ) ; <S2SV_EndBug>
<S2SV_StartBug> static void update_state ( VP9_COMP * cpi , PICK_MODE_CONTEXT * ctx , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> const struct segmentation * const seg = & cm -> seg ; <S2SV_EndBug> <S2SV_StartBug> if ( seg -> enabled && output_enabled ) { <S2SV_EndBug> <S2SV_StartBug> vp9_get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) { <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , bsize , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_32X32 ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( x -> zcoeff_blk [ mbmi -> tx_size ] , ctx -> zcoeff_blk , <S2SV_EndBug> <S2SV_StartBug> sizeof ( uint8_t ) * ctx -> num_4x4_blk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! vp9_segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) { <S2SV_EndBug> <S2SV_StartBug> vp9_update_mv_count ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> ++ cm -> counts . switchable_interp [ ctx ] [ mbmi -> interp_filter ] ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_comp_pred_diff [ SINGLE_REFERENCE ] += ctx -> single_pred_diff ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_comp_pred_diff [ COMPOUND_REFERENCE ] += ctx -> comp_pred_diff ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_comp_pred_diff [ REFERENCE_MODE_SELECT ] += ctx -> hybrid_pred_diff ; <S2SV_EndBug> <S2SV_StartBug> cpi -> rd_filter_diff [ i ] += ctx -> best_filter_diff [ i ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int x , y , pos ; <S2SV_EndBug> <S2SV_StartBug> if ( gdImageGetPixel ( image , x , y ) == fg ) { <S2SV_EndBug>
<S2SV_StartBug> oidc_util_get_request_parameter ( r , OIDC_REDIRECT_URI_REQUEST_LOGOUT , & url ) ; <S2SV_EndBug> <S2SV_StartBug> const char * error_description = NULL ; <S2SV_EndBug> <S2SV_StartBug> "Malformed<S2SV_blank>URL" , error_description , <S2SV_EndBug>
<S2SV_StartBug> uint16 bitspersample , samplesperpixel = 1 ; <S2SV_EndBug>
<S2SV_StartBug> int error ; <S2SV_EndBug> <S2SV_StartBug> error = pci_emul_add_msicap ( dev , PCI_EMUL_MSI_MSGS ) ; <S2SV_EndBug> <S2SV_StartBug> error = pci_emul_alloc_bar ( dev , 0 , PCIBAR_IO , DIOSZ ) ; <S2SV_EndBug> <S2SV_StartBug> error = pci_emul_alloc_bar ( dev , 1 , PCIBAR_MEM32 , DMEMSZ ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( error == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } else if ( ctx -> might_cancel ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> case EGRESS_VLAN_NAME : <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; * data && i < length ; i ++ , data ++ ) <S2SV_EndBug>
<S2SV_StartBug> as -> length + len * 2 + 1 ) == NULL ) <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( str ) >= sizeof ( lowstr ) ) <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( tm2interval ( tm , fsec , result ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> sas_port_delete ( phy -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> log_err ( ctx , "Cannot<S2SV_blank>define<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>a<S2SV_blank>keymap<S2SV_blank>file\\n" , <S2SV_EndBug> <S2SV_StartBug> xkb_file_type_to_string ( file -> file_type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_scale_rtcd ( ) ; <S2SV_EndBug>
<S2SV_StartBug> static VALUE from_document ( VALUE klass , VALUE document ) <S2SV_EndBug> <S2SV_StartBug> Data_Get_Struct ( document , xmlDoc , doc ) ; <S2SV_EndBug> <S2SV_StartBug> doc = doc -> doc ; <S2SV_EndBug> <S2SV_StartBug> return rb_schema ; <S2SV_EndBug>
<S2SV_StartBug> usb_unanchor_urb ( urb ) ; <S2SV_EndBug>
<S2SV_StartBug> int fd = accept ( socket -> fd , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> list_for_each_entry ( event , & current -> perf_event_list , owner_entry ) <S2SV_EndBug> <S2SV_StartBug> perf_event_for_each_child ( event , perf_event_enable ) ; <S2SV_EndBug>
<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> return get_desc_base ( desc ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( strchr ( cp , '/' ) != NULL ) || ( strcmp ( cp , ".." ) == 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> pfd . events = POLLIN ; <S2SV_EndBug> <S2SV_StartBug> len = recv ( fd , kvp_recv_buffer , sizeof ( kvp_recv_buffer ) , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( len < 0 ) { <S2SV_EndBug> <S2SV_StartBug> syslog ( LOG_ERR , "recv<S2SV_blank>failed;<S2SV_blank>error:%d" , len ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , service_name ; <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> int data_len = elt -> length - <S2SV_EndBug> <S2SV_StartBug> sizeof ( struct oz_get_desc_rsp ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> struct nfs4_state_owner * sp , int flags , <S2SV_EndBug> <S2SV_StartBug> p -> o_arg . open_flags = flags , <S2SV_EndBug>
<S2SV_StartBug> int err = 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct page * pages [ NFS4ACL_MAXPAGES ] ; <S2SV_EndBug> <S2SV_StartBug> struct page * localpage = NULL ; <S2SV_EndBug> <S2SV_StartBug> return - ENOMEM ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > args . acl_len ) <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , NULL , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> nfs4_write_cached_acl ( inode , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( res . acl_len > buflen ) <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( buf , resp_buf , res . acl_len ) ; <S2SV_EndBug> <S2SV_StartBug> if ( localpage ) <S2SV_EndBug> <S2SV_StartBug> __free_page ( localpage ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> opt = inet_sk ( sk ) -> opt ; <S2SV_EndBug> <S2SV_StartBug> if ( opt == NULL || opt -> cipso == 0 ) <S2SV_EndBug> <S2SV_StartBug> return cipso_v4_getattr ( opt -> __data + opt -> cipso - sizeof ( struct iphdr ) , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> replen = hdr . replen + op_decode_hdr_maxsz + nfs4_fattr_bitmap_maxsz + 1 ; <S2SV_EndBug> <S2SV_StartBug> encode_nops ( & hdr ) ; <S2SV_EndBug>
<S2SV_StartBug> char common_name [ FIELD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> FIELD_SIZE ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> task -> tk_priority = task_setup_data -> priority - RPC_PRIORITY_LOW ; <S2SV_EndBug>
<S2SV_StartBug> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_EndBug> <S2SV_StartBug> if ( ses -> server -> sign ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( & bsi , 0 , sizeof ( bsi ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug> <S2SV_StartBug> if ( p + l > buf + n ) { <S2SV_EndBug>
<S2SV_StartBug> vhost_net_ubuf_put_and_wait ( oldubufs ) ; <S2SV_EndBug> <S2SV_StartBug> vhost_net_ubuf_put_and_wait ( ubufs ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( cpi -> active_map , 1 , ( cm -> mb_rows * cm -> mb_cols ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> jpc_iict ( tile -> tcomps [ 0 ] . data , tile -> tcomps [ 1 ] . data , <S2SV_EndBug>
<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( class == - 1 ) { <S2SV_EndBug>
<S2SV_StartBug> while ( * end_ptr != \'\\"\' && * end_ptr && ++ len ) if ( * end_ptr ++ == '\\\\' ) end_ptr ++ ; <S2SV_EndBug>
<S2SV_StartBug> sk_wait_data ( sk , & timeo , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( inode_capable ( inode , CAP_FOWNER ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! fs_searchpaths ) <S2SV_EndBug> <S2SV_StartBug> for ( search = fs_searchpaths ; search ; search = search -> next ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> assert ( profile < MAX_PROFILES ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , profile & 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , profile >> 1 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! unconditional ( & e -> arp ) ) <S2SV_EndBug>
<S2SV_StartBug> struct IGDdatas * datas = ( struct IGDdatas * ) d ; <S2SV_EndBug>
<S2SV_StartBug> if ( PyDict_SetItemString ( d , "mod" , ( PyObject * ) mod_type ) < 0 ) return NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( PyDict_SetItemString ( d , "Suite" , ( PyObject * ) Suite_type ) < 0 ) return <S2SV_EndBug> <S2SV_StartBug> if ( PyDict_SetItemString ( d , "withitem" , ( PyObject * ) withitem_type ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> l_current_data = p_j2k -> m_specific_param . m_encoder . m_header_tile_data ; <S2SV_EndBug> <S2SV_StartBug> opj_write_bytes ( l_current_data , J2K_MS_MCO , 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> L3 = emitjump ( J , F , OP_JUMP ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int depth ) { <S2SV_EndBug> <S2SV_StartBug> unsigned int i ; <S2SV_EndBug> <S2SV_StartBug> if ( vp9_alloc_frame_buffer ( & ctx -> buf [ i ] . img , <S2SV_EndBug> <S2SV_StartBug> VP9_ENC_BORDER_IN_PIXELS ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( err ) <S2SV_EndBug> <S2SV_StartBug> goto err_cqwq ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! mp -> ports && ! mp -> mglist && <S2SV_EndBug>
<S2SV_StartBug> static ext4_io_end_t * ext4_init_io_end ( struct inode * inode ) <S2SV_EndBug> <S2SV_StartBug> io = kmalloc ( sizeof ( * io ) , GFP_NOFS ) ; <S2SV_EndBug> <S2SV_StartBug> io -> error = 0 ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> if ( _TIFFReadEncodedStripAndAllocBuffer ( tif , <S2SV_EndBug> <S2SV_StartBug> ( ( row + img -> row_offset ) % rowsperstrip + nrowsub ) * scanline ) == ( tmsize_t ) ( - 1 ) <S2SV_EndBug>
<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int copied , error = - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> if ( count >= 4 ) { <S2SV_EndBug>
<S2SV_StartBug> const int pw = 4 * num_4x4_blocks_wide_lookup [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> uint8_t * second_pred = vpx_memalign ( 16 , pw * ph * sizeof ( uint8_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> const InterpKernel * kernel = vp9_get_interp_kernel ( mbmi -> interp_filter ) ; <S2SV_EndBug> <S2SV_StartBug> struct buf_2d scaled_first_yv12 = xd -> plane [ 0 ] . pre [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( ref = 0 ; ref < 2 ; ++ ref ) { <S2SV_EndBug> <S2SV_StartBug> ref_mv [ ref ] = mbmi -> ref_mvs [ refs [ ref ] ] [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( ite = 0 ; ite < 4 ; ite ++ ) { <S2SV_EndBug> <S2SV_StartBug> int_mv tmp_mv ; <S2SV_EndBug> <S2SV_StartBug> vp9_build_inter_predictor ( ref_yv12 [ ! id ] . buf , <S2SV_EndBug> <S2SV_StartBug> & xd -> block_refs [ ! id ] -> sf , <S2SV_EndBug> <S2SV_StartBug> tmp_mv . as_int = frame_mv [ refs [ id ] ] . as_int ; <S2SV_EndBug> <S2SV_StartBug> tmp_mv . as_mv . row >>= 3 ; <S2SV_EndBug> <S2SV_StartBug> bestsme = vp9_refining_search_8p_c ( x , & tmp_mv . as_mv , sadpb , <S2SV_EndBug> <S2SV_StartBug> bestsme = vp9_get_mvpred_av_var ( x , & tmp_mv . as_mv , & ref_mv [ id ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> bestsme = cpi -> find_fractional_mv_step_comp ( <S2SV_EndBug> <S2SV_StartBug> x , & tmp_mv . as_mv , <S2SV_EndBug> <S2SV_StartBug> & ref_mv [ id ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> 0 , cpi -> sf . subpel_iters_per_step , <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . pre [ 0 ] = scaled_first_yv12 ; <S2SV_EndBug> <S2SV_StartBug> frame_mv [ refs [ id ] ] . as_int = tmp_mv . as_int ; <S2SV_EndBug> <S2SV_StartBug> & mbmi -> ref_mvs [ refs [ ref ] ] [ 0 ] . as_mv , <S2SV_EndBug> <S2SV_StartBug> vpx_free ( second_pred ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( tot_len - offset - 4 ) < bodyLength ) { <S2SV_EndBug>
<S2SV_StartBug> v -> count = c ; <S2SV_EndBug> <S2SV_StartBug> if ( c > 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug> <S2SV_StartBug> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , <S2SV_EndBug>
<S2SV_StartBug> void ntlm_print_message_fields ( NTLM_MESSAGE_FIELDS * fields , const char * name ) <S2SV_EndBug>
<S2SV_StartBug> dst [ dst_byte_offset ] = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ret = copy_to_user ( uattr , attr , usize ) ; <S2SV_EndBug>
<S2SV_StartBug> ulong tmp ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ops != NULL ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( error == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( error == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( error == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ops != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> BN_ULONG t1 , t2 ; <S2SV_EndBug>
<S2SV_StartBug> for ( j = 0 ; j < len ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> av_log ( s , AV_LOG_DEBUG , "%X" , avio_r8 ( pb ) ) ; <S2SV_EndBug>

<S2SV_StartBug> if ( ! ( ast -> sub_ctx = avformat_alloc_context ( ) ) ) <S2SV_EndBug>
<S2SV_StartBug> unsigned char * const seg_map = cpi -> segmentation_map ; <S2SV_EndBug> <S2SV_StartBug> const int apply_cyclic_refresh = apply_cyclic_refresh_bitrate ( cm , rc ) ; <S2SV_EndBug> <S2SV_StartBug> ( cpi -> svc . temporal_layer_id > 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME ) <S2SV_EndBug> <S2SV_StartBug> cr -> sb_index = 0 ; <S2SV_EndBug> <S2SV_StartBug> int i , block_count , bl_index , sb_rows , sb_cols , sbs_in_frame ; <S2SV_EndBug> <S2SV_StartBug> const float rate_ratio_qdelta = 2.0 ; <S2SV_EndBug> <S2SV_StartBug> vp9_set_segdata ( seg , 1 , SEG_LVL_ALT_Q , qindex_delta ) ; <S2SV_EndBug> <S2SV_StartBug> sb_cols = ( cm -> mi_cols + MI_BLOCK_SIZE - 1 ) / MI_BLOCK_SIZE ; <S2SV_EndBug>
<S2SV_StartBug> bitmap_zero ( ioapic -> rtc_status . dest_map . map , KVM_MAX_VCPUS ) ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) SeekBlob ( image , 0 , SEEK_SET ) ; <S2SV_EndBug> <S2SV_StartBug> quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_EndBug>
<S2SV_StartBug> interface = intf -> cur_altsetting ; <S2SV_EndBug>
<S2SV_StartBug> register u_int length = h -> len ; <S2SV_EndBug> <S2SV_StartBug> return ( chdlc_print ( ndo , p , length ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( block ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug> <S2SV_StartBug> hfs_bnode_read ( fd . bnode , & entry , fd . entryoffset , <S2SV_EndBug>
<S2SV_StartBug> dec -> xstart = siz -> xoff ; <S2SV_EndBug> <S2SV_StartBug> dec -> numtiles = dec -> numhtiles * dec -> numvtiles ; <S2SV_EndBug> <S2SV_StartBug> for ( tileno = 0 , tile = dec -> tiles ; tileno < dec -> numtiles ; ++ tileno , <S2SV_EndBug>
<S2SV_StartBug> tfrc . tfrctx_x = hc -> tx_x ; <S2SV_EndBug>
<S2SV_StartBug> assert ( addrsize <= LLDPD_MGMT_MAXADDRSIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( jp2_getuint16 ( in , & pclr -> numlutents ) || <S2SV_EndBug>
<S2SV_StartBug> if ( item_num > 65536 ) { <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "gnuplot<S2SV_blank>%s" , cmdname ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "wgnuplot<S2SV_blank>%s" , cmdname ) ; <S2SV_EndBug>
<S2SV_StartBug> dprintk ( 2 , "vm_close<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n" , map , <S2SV_EndBug>
<S2SV_StartBug> run_cmd ( int fd , ... ) <S2SV_EndBug> <S2SV_StartBug> char cmd [ 512 ] ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> strcpy ( cmd , EXEC ) ; <S2SV_EndBug> <S2SV_StartBug> fd_printf ( STDERR_FILENO , "%s\\n" , & cmd [ sizeof ( EXEC ) - 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> exit ( 42 ) ; <S2SV_EndBug>
<S2SV_StartBug> aio_free_ring ( ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( siz -> comps = jas_alloc2 ( siz -> numcomps , sizeof ( jpc_sizcomp_t ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> char * driver_override , * old = pdev -> driver_override , * cp ; <S2SV_EndBug> <S2SV_StartBug> if ( strlen ( driver_override ) ) { <S2SV_EndBug> <S2SV_StartBug> kfree ( old ) ; <S2SV_EndBug>
<S2SV_StartBug> save_text_from_text_view ( GTK_TEXT_VIEW ( textview ) , item_name ) ; <S2SV_EndBug>
<S2SV_StartBug> root_storage -> d_storage_uuid ) ) < 0 ) <S2SV_EndBug>
<S2SV_StartBug> & msg -> addrto , & msg -> ifindex ) ; <S2SV_EndBug> <S2SV_StartBug> dbg ( ndp , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> str_in6_addr ( & msg -> addrto ) , msg -> ifindex ) ; <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug> <S2SV_StartBug> ret = xen_pcibk_read_config_word ( dev , offset , value , data ) ; <S2SV_EndBug> <S2SV_StartBug> * value |= PCI_COMMAND_IO ; <S2SV_EndBug>
<S2SV_StartBug> static MB_PREDICTION_MODE read_intra_mode ( vp9_reader * r , const vp9_prob * p ) { <S2SV_EndBug> <S2SV_StartBug> return ( MB_PREDICTION_MODE ) vp9_read_tree ( r , vp9_intra_mode_tree , p ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mlx5_ib_create_qp_resp resp ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( x -> fc . ymode_prob , vp8_ymode_prob , sizeof ( vp8_ymode_prob ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( x -> fc . uv_mode_prob , vp8_uv_mode_prob , sizeof ( vp8_uv_mode_prob ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( x -> fc . sub_mv_ref_prob , sub_mv_ref_prob , sizeof ( sub_mv_ref_prob ) ) ; <S2SV_EndBug>
<S2SV_StartBug> hlist_add_head ( & mp -> mglist , & br -> mglist ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( ret = av_image_check_size ( s -> width , s -> height , 0 , avctx ) ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> DPRINTF ( 4 , ( "enabling<S2SV_blank>filegen<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>statistics<S2SV_blank>\'%s%s\'\\n" , <S2SV_EndBug> <S2SV_StartBug> filegen_flag = filegen -> flag ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( flags & FOLL_WRITE ) && ! pte_write ( pte ) ) { <S2SV_EndBug>
<S2SV_StartBug> kfree ( ubufs ) ; <S2SV_EndBug>
<S2SV_StartBug> static int read_intra_segment_id ( VP9_COMMON * const cm , MACROBLOCKD * const xd , <S2SV_EndBug> <S2SV_StartBug> struct segmentation * const seg = & cm -> seg ; <S2SV_EndBug> <S2SV_StartBug> if ( ! seg -> update_map ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> set_segment_id ( cm , bsize , mi_row , mi_col , segment_id ) ; <S2SV_EndBug>
<S2SV_StartBug> ext2_xattr_cache_insert ( struct buffer_head * bh ) <S2SV_EndBug> <S2SV_StartBug> struct mb_cache_entry * ce ; <S2SV_EndBug> <S2SV_StartBug> ce = mb_cache_entry_alloc ( ext2_xattr_cache , GFP_NOFS ) ; <S2SV_EndBug> <S2SV_StartBug> error = mb_cache_entry_insert ( ce , bh -> b_bdev , bh -> b_blocknr , hash ) ; <S2SV_EndBug> <S2SV_StartBug> mb_cache_entry_free ( ce ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> ea_bdebug ( bh , "inserting<S2SV_blank>[%x]<S2SV_blank>(%d<S2SV_blank>cache<S2SV_blank>entries)" , ( int ) hash , <S2SV_EndBug>
<S2SV_StartBug> # define COPY_PORT ( dest , src ) do { int i ; for ( i = 0 ; i < ARRAY_SIZE ( src -> read_urbs ) ; ++ i ) { dest -> read_urbs [ i ] = src -> read_urbs [ i ] ; dest -> read_urbs [ i ] -> context = dest ; dest -> bulk_in_buffers [ i ] = src -> bulk_in_buffers [ i ] ; } dest -> read_urb = src -> read_urb ; dest -> bulk_in_endpointAddress = src -> bulk_in_endpointAddress ; dest -> bulk_in_buffer = src -> bulk_in_buffer ; dest -> bulk_in_size = src -> bulk_in_size ; dest -> interrupt_in_urb = src -> interrupt_in_urb ; dest -> interrupt_in_urb -> context = dest ; dest -> interrupt_in_endpointAddress = src -> interrupt_in_endpointAddress ; dest -> interrupt_in_buffer = src -> interrupt_in_buffer ; } while ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> VP9_COMMON * const cm = & pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> vp9_remove_common ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_free ( pbi -> lf_worker . data1 ) ; <S2SV_EndBug> <S2SV_StartBug> VP9Worker * const worker = & pbi -> tile_workers [ i ] ; <S2SV_EndBug> <S2SV_StartBug> vp9_worker_end ( worker ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_free ( worker -> data1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_free ( worker -> data2 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( pbi -> num_tile_workers ) { <S2SV_EndBug> <S2SV_StartBug> vp9_loop_filter_dealloc ( & pbi -> lf_row_sync , sb_rows ) ; <S2SV_EndBug>
<S2SV_StartBug> char * fpath = NULL , * cgdir = NULL , * controller ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "rmdir:<S2SV_blank>verifying<S2SV_blank>access<S2SV_blank>to<S2SV_blank>%s:%s<S2SV_blank>(req<S2SV_blank>path<S2SV_blank>%s)\\n" , <S2SV_EndBug> <S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! cgfs_remove ( controller , cgroup ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( dec -> ihdr -> data . ihdr . numcmpts != JAS_CAST ( uint , <S2SV_EndBug> <S2SV_StartBug> for ( i = 1 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> if ( dec -> bpcc -> data . bpcc . numcmpts != JAS_CAST ( uint , jas_image_numcmpts ( <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; <S2SV_EndBug> <S2SV_StartBug> JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dec -> cmap -> data . cmap . ents [ i ] . cmptno >= JAS_CAST ( uint , <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; ++ i ) { <S2SV_EndBug>
<S2SV_StartBug> return ( tsfb -> numlvls > 0 ) ? jpc_tsfb_synthesize2 ( tsfb , <S2SV_EndBug>
<S2SV_StartBug> spin_lock_init ( & port -> phy_list_lock ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ret || cm_id -> device -> node_type != RDMA_NODE_IB_CA ) <S2SV_EndBug>
<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug>
<S2SV_StartBug> lua_pushvalue ( L , i ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pmd_none_or_clear_bad ( pmd ) ) <S2SV_EndBug>
<S2SV_StartBug> r = vapic_enter ( vcpu ) ; <S2SV_EndBug> <S2SV_StartBug> vapic_exit ( vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> guint pkt_len ; <S2SV_EndBug> <S2SV_StartBug> num_items_scanned = sscanf ( line + 64 , "LEN=%9u" , & pkt_len ) ; <S2SV_EndBug> <S2SV_StartBug> * err_info = g_strdup ( "toshiba:<S2SV_blank>OFFSET<S2SV_blank>line<S2SV_blank>doesn\'t<S2SV_blank>have<S2SV_blank>valid<S2SV_blank>LEN<S2SV_blank>item" ) ; <S2SV_EndBug>
<S2SV_StartBug> struct llc_pktinfo info ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int len ; <S2SV_EndBug> <S2SV_StartBug> struct au1200fb_device * fbdev = info -> par ; <S2SV_EndBug> <S2SV_StartBug> return io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , <S2SV_EndBug>
<S2SV_StartBug> rpc_delay ( task , 3 * HZ ) ; <S2SV_EndBug>
<S2SV_StartBug> __mincore_unmapped_range ( addr , end , vma , vec ) ; <S2SV_EndBug> <S2SV_StartBug> __mincore_unmapped_range ( addr , addr + PAGE_SIZE , <S2SV_EndBug> <S2SV_StartBug> if ( non_swap_entry ( entry ) ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> exfat_error ( "exFAT<S2SV_blank>file<S2SV_blank>system<S2SV_blank>is<S2SV_blank>not<S2SV_blank>found" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) ef -> sb -> sector_bits + ( int ) ef -> sb -> spc_bits > 25 ) <S2SV_EndBug>
<S2SV_StartBug> exo_job_info_message ( EXO_JOB ( job ) , g_file_info_get_display_name ( info ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( is_file_hugepages ( shm_file ) ) <S2SV_EndBug>
<S2SV_StartBug> dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( opt_len == 12 && flags & TH_SYN ) && <S2SV_EndBug> <S2SV_StartBug> ! ( opt_len == 24 && flags & TH_ACK ) ) <S2SV_EndBug>
<S2SV_StartBug> && ( ( ( packet -> payload [ 0 ] == 0x07 ) && ( packet -> payload [ 1 ] == 0xff ) && ( packet -> payload [ 2 ] == 0x00 ) ) <S2SV_EndBug>
<S2SV_StartBug> strcpy ( the_url , url_arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! e ) strcpy ( the_url , gf_dm_sess_get_cache_name ( sess ) ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( the_url , "MP4Client<S2SV_blank>" GPAC_FULL_VERSION ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> int res ; <S2SV_EndBug> <S2SV_StartBug> const void * data ; <S2SV_EndBug> <S2SV_StartBug> u_int32_t vendor ; <S2SV_EndBug> <S2SV_StartBug> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , "s" , & data , & len ) == FAILURE ) { <S2SV_EndBug> <S2SV_StartBug> res = rad_get_vendor_attr ( & vendor , & data , ( size_t * ) & len ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_long ( return_value , "attr" , res ) ; <S2SV_EndBug> <S2SV_StartBug> add_assoc_stringl ( return_value , "data" , ( char * ) data , len , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> sas_unregister_dev ( port , dev ) ; <S2SV_EndBug>
<S2SV_StartBug> clear_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ; <S2SV_EndBug>
<S2SV_StartBug> static void rd_pick_partition ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int mi_col , BLOCK_SIZE bsize , int * rate , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> PICK_MODE_CONTEXT * ctx = get_block_context ( x , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> int this_rate , sum_rate = 0 , best_rate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> int partition_none_allowed = ! force_horz_split && ! force_vert_split ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> num_8x8_blocks_high_lookup [ bsize ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize == BLOCK_16X16 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> partition_none_allowed &= ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> partition_horz_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> partition_vert_allowed &= ( ( bsize <= cpi -> sf . max_partition_size && <S2SV_EndBug> <S2SV_StartBug> do_split &= bsize > cpi -> sf . min_partition_size ; <S2SV_EndBug> <S2SV_StartBug> save_context ( cpi , mi_row , mi_col , a , l , sa , sl , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( cpi -> sf . disable_split_var_thresh && partition_none_allowed ) { <S2SV_EndBug> <S2SV_StartBug> if ( source_variancey < cpi -> sf . disable_split_var_thresh / 2 ) <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row , mi_col , & this_rate , & this_dist , bsize , <S2SV_EndBug> <S2SV_StartBug> this_rate += x -> partition_cost [ pl ] [ PARTITION_NONE ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , this_rate , this_dist ) ; <S2SV_EndBug> <S2SV_StartBug> int64_t stop_thresh = 4096 ; <S2SV_EndBug> <S2SV_StartBug> * ( get_sb_partitioning ( x , bsize ) ) = bsize ; <S2SV_EndBug> <S2SV_StartBug> stop_thresh_rd = RDCOST ( x -> rdmult , x -> rddiv , 0 , stop_thresh ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> e_mbd . lossless && best_rd < stop_thresh_rd ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> in_active_map ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 4 && sum_rd < best_rd ; ++ i ) { <S2SV_EndBug> <S2SV_StartBug> * get_sb_index ( x , subsize ) = i ; <S2SV_EndBug> <S2SV_StartBug> rd_pick_partition ( cpi , tile , tp , mi_row + y_idx , mi_col + x_idx , subsize , <S2SV_EndBug> <S2SV_StartBug> & this_rate , & this_dist , i != 3 , best_rd - sum_rd ) ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += x -> partition_cost [ pl ] [ PARTITION_SPLIT ] ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> restore_context ( cpi , mi_row , mi_col , a , l , sa , sl , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> if ( partition_horz_allowed && do_rect ) { <S2SV_EndBug> <S2SV_StartBug> subsize = get_subsize ( bsize , PARTITION_HORZ ) ; <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> pred_interp_filter = <S2SV_EndBug> <S2SV_StartBug> if ( sum_rd < best_rd && mi_row + mi_step < cm -> mi_rows ) { <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , subsize ) , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> pred_interp_filter = <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row + mi_step , mi_col , & this_rate , <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> subsize = get_subsize ( bsize , PARTITION_VERT ) ; <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> pred_interp_filter = <S2SV_EndBug> <S2SV_StartBug> if ( sum_rd < best_rd && mi_col + mi_step < cm -> mi_cols ) { <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , subsize ) , mi_row , mi_col , <S2SV_EndBug> <S2SV_StartBug> get_block_context ( x , subsize ) -> pred_interp_filter = <S2SV_EndBug> <S2SV_StartBug> rd_pick_sb_modes ( cpi , tile , mi_row , mi_col + mi_step , & this_rate , <S2SV_EndBug> <S2SV_StartBug> sum_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> sum_rate += this_rate ; <S2SV_EndBug> <S2SV_StartBug> sum_rd = RDCOST ( x -> rdmult , x -> rddiv , sum_rate , sum_dist ) ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rate < INT_MAX && best_dist < INT64_MAX && do_recon ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( cpi -> oxcf . aq_mode == COMPLEXITY_AQ ) && cm -> seg . update_map ) { <S2SV_EndBug> <S2SV_StartBug> best_rate ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( best_rate < INT_MAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( best_dist < INT64_MAX ) ; <S2SV_EndBug>
<S2SV_StartBug> event_data -> snk_config = <S2SV_EndBug>
<S2SV_StartBug> daddy = malloc ( sizeof ( creator_template ) ) ; <S2SV_EndBug>
<S2SV_StartBug> # ifndef _MSC_VER <S2SV_EndBug> <S2SV_StartBug> char fpath [ grub_strlen ( currpath ) + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> * currfound = currnode ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_BAD_FILE_TYPE , "not<S2SV_blank>a<S2SV_blank>directory" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( grub_errno ) <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_SYMLINK_LOOP , <S2SV_EndBug> <S2SV_StartBug> free_node ( oldnode , c ) ; <S2SV_EndBug> <S2SV_StartBug> return grub_errno ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return grub_error ( GRUB_ERR_FILE_NOT_FOUND , "file<S2SV_blank>not<S2SV_blank>found" ) ; <S2SV_EndBug>
<S2SV_StartBug> int error ; <S2SV_EndBug>
<S2SV_StartBug> if ( track -> timescale > UINT16_MAX ) { <S2SV_EndBug>
<S2SV_StartBug> const struct oe_sockaddr * dest_add = <S2SV_EndBug> <S2SV_StartBug> ( const struct oe_sockaddr * ) arg5 ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> passert ( GLOBALS_ARE_RESET ( ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ext3_msg ( sb , "error:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>journal<S2SV_blank>device<S2SV_blank>%s:<S2SV_blank>%ld" , <S2SV_EndBug>
<S2SV_StartBug> sr -> bytes_to_send = finfo . size ; <S2SV_EndBug>
<S2SV_StartBug> hdr -> sadb_msg_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> u64 rem ; <S2SV_EndBug> <S2SV_StartBug> sgi_clock_offset . tv_sec = tp -> tv_sec - div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug>
<S2SV_StartBug> int disable_inter_mode_mask , int this_mode , int ref_frame , <S2SV_EndBug> <S2SV_StartBug> frame_mv [ this_mode ] [ second_ref_frame ] . as_int == 0 ) ) { <S2SV_EndBug> <S2SV_StartBug> int rfc = mode_context [ ref_frame ] ; <S2SV_EndBug> <S2SV_StartBug> if ( second_ref_frame == NONE ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( c3 >= c2 && frame_mv [ NEARESTMV ] [ ref_frame ] . as_int == 0 ) || <S2SV_EndBug> <S2SV_StartBug> ( c3 >= c1 && frame_mv [ NEARMV ] [ ref_frame ] . as_int == 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( c3 >= c2 && frame_mv [ NEARESTMV ] [ ref_frame ] . as_int == 0 && <S2SV_EndBug> <S2SV_StartBug> ( c3 >= c1 && frame_mv [ NEARMV ] [ ref_frame ] . as_int == 0 && <S2SV_EndBug>
<S2SV_StartBug> value = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> oob ) { <S2SV_EndBug> <S2SV_StartBug> nbits = bits & 7 ; <S2SV_EndBug> <S2SV_StartBug> Huff_offsetReceive ( msgHuff . decompressor . tree , & get , msg -> data , & msg -> bit ) ; <S2SV_EndBug> <S2SV_StartBug> value |= ( get << ( i + nbits ) ) ; <S2SV_EndBug>
<S2SV_StartBug> dictionary * iniparser_load ( const char * ininame ) <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "iniparser:<S2SV_blank>syntax<S2SV_blank>error<S2SV_blank>in<S2SV_blank>%s<S2SV_blank>(%d):\\n" , <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "-><S2SV_blank>%s\\n" , line ) ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , const char * name , <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "(alt-CoA:<S2SV_blank>%s)" , ip6addr_string ( ndo , & bp [ i + 2 ] ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & up -> id , & kp -> id , sizeof ( up -> id ) ) ; <S2SV_EndBug>
<S2SV_StartBug> fprintf ( fp , "%s=%s\\n" , key , value ) ; <S2SV_EndBug>
<S2SV_StartBug> end = strchr ( * value + 1 , \'"\' ) ; <S2SV_EndBug> <S2SV_StartBug> end ++ ; <S2SV_EndBug>
<S2SV_StartBug> static const char * parse_string ( cJSON * item , const char * str ) <S2SV_EndBug> <S2SV_StartBug> const char * ptr = str + 1 ; <S2SV_EndBug> <S2SV_StartBug> ep = str ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> while ( * ptr != \'\\"\' && * ptr && ++ len ) <S2SV_EndBug> <S2SV_StartBug> if ( * ptr ++ == '\\\\' ) <S2SV_EndBug> <S2SV_StartBug> ptr ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( out = ( char * ) cJSON_malloc ( len + 1 ) ) ) <S2SV_EndBug> <S2SV_StartBug> while ( * ptr != \'\\"\' && * ptr ) { <S2SV_EndBug> <S2SV_StartBug> sscanf ( ptr + 1 , "%4x" , & uc ) ; <S2SV_EndBug> <S2SV_StartBug> ptr += 4 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( uc >= 0xD800 && uc <= 0xDBFF ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> sscanf ( ptr + 3 , "%4x" , & uc2 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> uc = 0x10000 | ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF ) ; <S2SV_EndBug> <S2SV_StartBug> len = 1 ; <S2SV_EndBug> <S2SV_StartBug> ++ ptr ; <S2SV_EndBug> <S2SV_StartBug> ++ ptr ; <S2SV_EndBug>
<S2SV_StartBug> bestsad = fn_ptr -> sdf ( what , what_stride , in_what , in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> u8 opcode = BPF_OP ( insn -> code ) ; <S2SV_EndBug> <S2SV_StartBug> if ( known && ( ptr_reg -> off + smin_val == <S2SV_EndBug> <S2SV_StartBug> if ( dst_reg == off_reg ) { <S2SV_EndBug>
<S2SV_StartBug> psurvival = sweepgen ( L , g , & g -> allgc , g -> survival ) ; <S2SV_EndBug>
<S2SV_StartBug> static unsigned int stack_maxrandom_size ( void ) <S2SV_EndBug> <S2SV_StartBug> unsigned int max = 0 ; <S2SV_EndBug> <S2SV_StartBug> max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; <S2SV_EndBug>
<S2SV_StartBug> for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst , src , src_ybc -> y_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst , src , src_ybc -> uv_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst , src , src_ybc -> uv_width ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> s -> chunksize = - 1 ; <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug>
<S2SV_StartBug> while ( lp -> s != NULL ) { <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> l2info -> bundle = l2info -> cookie [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! last_pic_droppable && h0 -> cur_pic_ptr -> tf . owner == h0 -> avctx ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! last_pic_droppable && last_pic_structure != PICT_FRAME ) { <S2SV_EndBug>
<S2SV_StartBug> case 'l' : RBININFO ( "libs" , R_CORE_BIN_ACC_LIBS , NULL , obj ? r_list_length ( obj -> libs ) : 0 ) ; break ; <S2SV_EndBug> <S2SV_StartBug> case 'i' : RBININFO ( "imports" , R_CORE_BIN_ACC_IMPORTS , NULL , obj ? r_list_length ( obj -> imports ) : 0 ) ; break ; <S2SV_EndBug>
<S2SV_StartBug> int mi_row , int mi_col , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const BLOCK_SIZE bsize = mbmi -> sb_type ; <S2SV_EndBug> <S2SV_StartBug> predicted_segment_id = vp9_get_segment_id ( cm , cm -> last_frame_seg_map , <S2SV_EndBug> <S2SV_StartBug> if ( ! seg -> update_map ) <S2SV_EndBug> <S2SV_StartBug> if ( seg -> temporal_update ) { <S2SV_EndBug> <S2SV_StartBug> const vp9_prob pred_prob = vp9_get_pred_prob_seg_id ( seg , xd ) ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> seg_id_predicted = vp9_read ( r , pred_prob ) ; <S2SV_EndBug> <S2SV_StartBug> set_segment_id ( cm , bsize , mi_row , mi_col , segment_id ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , len ; <S2SV_EndBug> <S2SV_StartBug> const char __user * p ; <S2SV_EndBug> <S2SV_StartBug> audit_log_format ( * ab , "argc=%d" , context -> execve . argc ) ; <S2SV_EndBug> <S2SV_StartBug> buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1 , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! buf ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < context -> execve . argc ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( JAS_CAST ( ulong , jas_stream_tell ( tmpstream ) ) != ms -> len ) { <S2SV_EndBug>
<S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> dd_create_basic_files ( dd , fsuid , ( rootdir && strcmp ( rootdir , "/" ) != 0 ) ? rootdir : NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> double GetGPMFSampleRate ( size_t handle , uint32_t fourcc , uint32_t flags ) <S2SV_EndBug> <S2SV_StartBug> double rate = 0.0 ; <S2SV_EndBug> <S2SV_StartBug> if ( mp4 -> indexcount > 3 ) <S2SV_EndBug> <S2SV_StartBug> testend -- ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> uint32_t * payload = GetPayload ( handle , NULL , teststart ) ; <S2SV_EndBug> <S2SV_StartBug> uint32_t payloadsize = GetPayloadSize ( handle , teststart ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret != GPMF_OK ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> payload = GetPayload ( handle , payload , teststart ) ; <S2SV_EndBug> <S2SV_StartBug> payloadsize = GetPayloadSize ( handle , teststart ) ; <S2SV_EndBug> <S2SV_StartBug> ret = GPMF_Init ( ms , payload , payloadsize ) ; <S2SV_EndBug> <S2SV_StartBug> uint32_t samples = GPMF_Repeat ( ms ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( flags & GPMF_SAMPLE_RATE_PRECISE ) && GPMF_OK == GPMF_FindPrev ( & find_stream , GPMF_KEY_TOTAL_SAMPLES , GPMF_CURRENT_LEVEL ) ) <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> uint32_t * repeatarray = malloc ( mp4 -> indexcount * 4 + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( payloadpos = teststart ; payloadpos < testend ; payloadcount ++ , payloadpos ++ ) <S2SV_EndBug> <S2SV_StartBug> if ( GPMF_OK == GPMF_FindNext ( ms , fourcc , GPMF_RECURSE_LEVELS ) ) <S2SV_EndBug> <S2SV_StartBug> float in , out ; <S2SV_EndBug> <S2SV_StartBug> GetPayloadTime ( handle , payloadpos , & in , & out ) ; <S2SV_EndBug> <S2SV_StartBug> uint32_t repeat = GPMF_Repeat ( ms ) ; <S2SV_EndBug> <S2SV_StartBug> float in , out ; <S2SV_EndBug> <S2SV_StartBug> GetPayloadTime ( handle , payloadpos , & in , & out ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> top += ( ( double ) out - meanX ) * ( ( double ) repeatarray [ payloadpos ] - meanY ) ; <S2SV_EndBug> <S2SV_StartBug> bot += ( ( double ) out - meanX ) * ( ( double ) out - meanX ) ; <S2SV_EndBug> <S2SV_StartBug> # if 0 <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> printf ( "%c%c%c%c<S2SV_blank>start<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>(%.3fms)\\n" , PRINTF_4CC ( fourcc ) , intercept , 1000.0 * intercept / slope ) ; <S2SV_EndBug> <S2SV_StartBug> goto cleanup ; <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> r1 . event = event ; <S2SV_EndBug>
<S2SV_StartBug> ( unsigned char * ) e + sizeof ( struct ip6t_entry ) >= limit ) { <S2SV_EndBug>
<S2SV_StartBug> int old_bin_num , bin_num ; <S2SV_EndBug> <S2SV_StartBug> bin_num = ZEND_MM_SMALL_SIZE_TO_BIN ( size ) ; <S2SV_EndBug> <S2SV_StartBug> return ptr ; <S2SV_EndBug>
<S2SV_StartBug> int hstartcol ; <S2SV_EndBug> <S2SV_StartBug> hstartcol = ( numrows + 1 - parity ) >> 1 ; <S2SV_EndBug> <S2SV_StartBug> m = numrows - hstartcol ; <S2SV_EndBug> <S2SV_StartBug> dstptr = & a [ hstartcol * stride ] ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long cs ; <S2SV_EndBug> <S2SV_StartBug> rc = emulate_pop ( ctxt , & ctxt -> _eip , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , ( u16 ) cs , VCPU_SREG_CS ) ; <S2SV_EndBug>
<S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug> <S2SV_StartBug> exit_func : <S2SV_EndBug>
<S2SV_StartBug> psf_close_rsrc ( psf ) ; <S2SV_EndBug>
<S2SV_StartBug> int is_valid ; <S2SV_EndBug> <S2SV_StartBug> giterr_clear ( ) ; <S2SV_EndBug>
<S2SV_StartBug> hmp_data = hmp_chunk [ i ] + chunk_length [ i ] ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( hmp_mdi , hmp_chunk [ i ] , 0 ) ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_end [ i ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( * hmp_chunk [ i ] < 0x80 ) { <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> } while ( * hmp_chunk [ i ] < 0x80 ) ; <S2SV_EndBug> <S2SV_StartBug> chunk_delta [ i ] = chunk_delta [ i ] + ( ( * hmp_chunk [ i ] & 0x7F ) << var_len_shift ) ; <S2SV_EndBug> <S2SV_StartBug> hmp_chunk [ i ] ++ ; <S2SV_EndBug>
<S2SV_StartBug> c_t = tvb_get_bits8 ( tvb , tb_bit_off , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> macinf -> lchid [ j + chan ] = c_t + 1 ; <S2SV_EndBug> <S2SV_StartBug> macinf -> content [ j + chan ] = lchId_type_table [ c_t + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> rlcinf -> mode [ j + chan ] = lchId_rlc_map [ c_t + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> struct sctp_sockaddr_entry * laddr ; <S2SV_EndBug> <S2SV_StartBug> __u8 matchlen = 0 ; <S2SV_EndBug> <S2SV_StartBug> dst = ip6_dst_lookup_flow ( sk , fl6 , NULL , false ) ; <S2SV_EndBug> <S2SV_StartBug> dst = ip6_dst_lookup_flow ( sk , fl6 , NULL , false ) ; <S2SV_EndBug>
<S2SV_StartBug> r = conv_encoding ( ci -> pattern_enc , ci -> target_enc , pattern , pattern_end , <S2SV_EndBug>
<S2SV_StartBug> long start ; <S2SV_EndBug> <S2SV_StartBug> char * header ; <S2SV_EndBug> <S2SV_StartBug> start = ftell ( fp ) ; <S2SV_EndBug>
<S2SV_StartBug> number_planes_filled * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * number_planes_filled ; <S2SV_EndBug>
<S2SV_StartBug> if ( len < 20 ) <S2SV_EndBug>
<S2SV_StartBug> if ( data -> multi_easy ) <S2SV_EndBug> <S2SV_StartBug> curl_multi_cleanup ( data -> multi_easy ) ; <S2SV_EndBug>

<S2SV_StartBug> res = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; <S2SV_EndBug>
<S2SV_StartBug> BREAK_TO_DEBUGGER ( ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( upred_ptr , expected_udc , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( vpred_ptr , expected_vdc , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( upred_ptr , uabove_row , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( vpred_ptr , vabove_row , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( upred_ptr , uleft_col [ i ] , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( vpred_ptr , vleft_col [ i ] , 8 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctxt -> rip_relative ) <S2SV_EndBug>
<S2SV_StartBug> security_decrypt ( s -> p , length , rdp ) ; <S2SV_EndBug>
<S2SV_StartBug> control_interface = usb_ifnum_to_if ( usb_dev , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> o = 2 ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < nelements ; j ++ , i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> static int <S2SV_EndBug> <S2SV_StartBug> rpki_rtr_pdu_print ( netdissect_options * ndo , const u_char * tptr , u_int indent ) <S2SV_EndBug> <S2SV_StartBug> pdu_header = ( const rpki_rtr_pdu * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_EndBug> <S2SV_StartBug> pdu_type , pdu_len ) ) ; <S2SV_EndBug> <S2SV_StartBug> case RPKI_RTR_END_OF_DATA_PDU : <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case RPKI_RTR_CACHE_RESPONSE_PDU : <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_ipv4_prefix * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_ipv6_prefix * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> pdu = ( const rpki_rtr_pdu_error_report * ) tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , encapsulated_pdu_length ) ; <S2SV_EndBug> <S2SV_StartBug> tptr += sizeof ( * pdu ) ; <S2SV_EndBug> <S2SV_StartBug> if ( encapsulated_pdu_length && <S2SV_EndBug> <S2SV_StartBug> if ( rpki_rtr_pdu_print ( ndo , tptr , indent + 2 ) ) <S2SV_EndBug> <S2SV_StartBug> tlen -= encapsulated_pdu_length ; <S2SV_EndBug> <S2SV_StartBug> text_length = 0 ; <S2SV_EndBug> <S2SV_StartBug> text_length = EXTRACT_32BITS ( tptr ) ; <S2SV_EndBug> <S2SV_StartBug> tlen -= 4 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * tptr , text_length ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> xstep = picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> ystep = picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) <S2SV_EndBug> <S2SV_StartBug> || ! ( pi -> x % ( 1 << rpx ) ) ) && <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) <S2SV_EndBug> <S2SV_StartBug> || ! ( pi -> y % ( 1 << rpy ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( pack -> hdr . ver == 2 ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> log_ppp_debug ( "<S2SV_blank>Ns=%u<S2SV_blank>Nr=%u" , ntohs ( pack -> hdr . Ns ) , ntohs ( pack -> hdr . Nr ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( st = krb5_add_ber_mem_ldap_mod ( & mods , "krbprincipalkey" , <S2SV_EndBug> <S2SV_StartBug> LDAP_MOD_REPLACE | LDAP_MOD_BVALUES , bersecretkey ) ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> puts ( "Copyright<S2SV_blank>(c)<S2SV_blank>2011,<S2SV_blank>Oracle<S2SV_blank>and/or<S2SV_blank>its<S2SV_blank>affiliates.<S2SV_blank>" <S2SV_EndBug>
<S2SV_StartBug> char * r = pool_alloc ( strlen ( s ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( r , s ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( size_left && size_left < 4 ) { <S2SV_EndBug>
<S2SV_StartBug> OPJ_UINT32 * p_data_written , <S2SV_EndBug> <S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOT , <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> kvm_pit_load_count ( kvm , 0 , ps -> channels [ 0 ] . count , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( utimes ( vect [ 0 ] , tv ) == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> timeout = sock_rcvtimeo ( sk , flags & MSG_DONTWAIT ) ; <S2SV_EndBug>
<S2SV_StartBug> inode = ecryptfs_get_inode ( path . dentry -> d_inode , s ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( options . compression == COMP_DELAYED ) { <S2SV_EndBug>
<S2SV_StartBug> struct flowi4 fl4 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! __sk_dst_get ( sk ) || __sk_dst_check ( sk , 0 ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! IS_ERR ( rt ) ) <S2SV_EndBug> <S2SV_StartBug> __sk_dst_set ( sk , & rt -> dst ) ; <S2SV_EndBug>
<S2SV_StartBug> num = port >= 0 ? port : 0 ; <S2SV_EndBug> <S2SV_StartBug> write_unlock_irqrestore ( & client -> ports_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & client -> ports_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> return usb_control_msg ( dev -> udev , usb_rcvctrlpipe ( dev -> udev , 0 ) , <S2SV_EndBug> <S2SV_StartBug> indx , 0 , data , size , 500 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%u" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug> <S2SV_StartBug> l_row -- ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt = NULL ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( opt -> __data , buf , buf_len ) ; <S2SV_EndBug> <S2SV_StartBug> opt -> optlen = opt_len ; <S2SV_EndBug> <S2SV_StartBug> opt -> cipso = sizeof ( struct iphdr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sk_inet -> is_icsk ) { <S2SV_EndBug> <S2SV_StartBug> if ( sk_inet -> opt ) <S2SV_EndBug> <S2SV_StartBug> sk_conn -> icsk_ext_hdr_len -= sk_inet -> opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> sk_conn -> icsk_ext_hdr_len += opt -> optlen ; <S2SV_EndBug> <S2SV_StartBug> opt = xchg ( & sk_inet -> opt , opt ) ; <S2SV_EndBug>
<S2SV_StartBug> int zero_bits = * in & 0x07 ; <S2SV_EndBug> <S2SV_StartBug> size_t octets_left = inlen - 1 ; <S2SV_EndBug> <S2SV_StartBug> int i , count = 0 ; <S2SV_EndBug>
<S2SV_StartBug> & len , & iovec , compat ) ; <S2SV_EndBug> <S2SV_StartBug> len , iovec ) ; <S2SV_EndBug> <S2SV_StartBug> iov_iter_init ( & iter , rw , iovec , nr_segs , len ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned char signature [ 256 ] ; <S2SV_EndBug> <S2SV_StartBug> unsigned int siglen = sizeof signature ; <S2SV_EndBug> <S2SV_StartBug> if ( 1 != randomize ( pamh , challenge , sizeof challenge ) ) { <S2SV_EndBug> <S2SV_StartBug> err : <S2SV_EndBug>
<S2SV_StartBug> kfree ( init_name ) ; <S2SV_EndBug>
<S2SV_StartBug> struct vp9_write_bit_buffer * wb ) { <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , lf -> filter_level , 6 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , lf -> sharpness_level , 3 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , lf -> mode_ref_delta_enabled ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , lf -> mode_ref_delta_update ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , changed ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , abs ( delta ) & 0x3F , 6 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , delta < 0 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , changed ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_literal ( wb , abs ( delta ) & 0x3F , 6 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , delta < 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> char * header , * c ; <S2SV_EndBug> <S2SV_StartBug> header = get_header ( fp ) ; <S2SV_EndBug> <S2SV_StartBug> ( c + strlen ( "%PDF-M.m" ) + 2 ) ) <S2SV_EndBug>
<S2SV_StartBug> struct in6_addr * saddr = NULL , * final_p , final ; <S2SV_EndBug> <S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> if ( np -> opt != NULL ) <S2SV_EndBug> <S2SV_StartBug> icsk -> icsk_ext_hdr_len = ( np -> opt -> opt_flen + <S2SV_EndBug> <S2SV_StartBug> np -> opt -> opt_nflen ) ; <S2SV_EndBug>
<S2SV_StartBug> isoclns_print ( ndo , p , length , length ) ; <S2SV_EndBug>
<S2SV_StartBug> strncpy ( szFileName , sizeof ( szFileName ) - 5 , pszFileName ) ; <S2SV_EndBug>
<S2SV_StartBug> option = stok ( option , "<S2SV_blank>=\\t," , & ovalue ) ; <S2SV_EndBug>
<S2SV_StartBug> u_char * b , * s , * t , c ; <S2SV_EndBug> <S2SV_StartBug> b = ( uint8_t * ) malloc ( length ) ; <S2SV_EndBug> <S2SV_StartBug> for ( s = ( u_char * ) p , t = b , i = length ; i > 0 ; i -- ) { <S2SV_EndBug> <S2SV_StartBug> if ( i > 1 ) { <S2SV_EndBug> <S2SV_StartBug> c = * s ++ ^ 0x20 ; <S2SV_EndBug>
<S2SV_StartBug> WORD16 i2_level_arr [ 4 ] ; <S2SV_EndBug>
<S2SV_StartBug> mutex_lock ( & src_ctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & src_ctx -> mutex ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> atomic_inc ( & prog -> aux -> refcnt ) ; <S2SV_EndBug>
<S2SV_StartBug> static INLINE void write_buffer_8x8 ( int16_t * output , __m128i * res , int stride ) { <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 0 * stride ) , res [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 1 * stride ) , res [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 2 * stride ) , res [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 3 * stride ) , res [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 4 * stride ) , res [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 5 * stride ) , res [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 6 * stride ) , res [ 6 ] ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 7 * stride ) , res [ 7 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> same_page : <S2SV_EndBug>
<S2SV_StartBug> if ( bin -> methods [ i ] . class_id > bin -> header . types_size - 1 ) { <S2SV_EndBug>
<S2SV_StartBug> uint32_t pkg_size = RPC_PKG_HEAD_SIZE + pkg -> ext_size + pkg -> body_size ; <S2SV_EndBug> <S2SV_StartBug> assert ( send_buf != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> update_read_synchronize ( update , s ) ; <S2SV_EndBug>
<S2SV_StartBug> * p == SSL3_MT_CLIENT_HELLO ) && <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( pptr [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> plen -= 32 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & route_target , & pptr [ 1 ] , ( plen + 7 ) / 8 ) ; <S2SV_EndBug> <S2SV_StartBug> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_32BITS ( pptr + 1 ) ) , <S2SV_EndBug>
<S2SV_StartBug> static void consume_one_event ( unsigned cpu , <S2SV_EndBug> <S2SV_StartBug> unsigned priority , unsigned long * ready , <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( drop ) ) <S2SV_EndBug> <S2SV_StartBug> handle_irq_for_port ( port ) ; <S2SV_EndBug>
<S2SV_StartBug> cstate = 0 ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! siz -> width || ! siz -> height || ! siz -> tilewidth || <S2SV_EndBug>
<S2SV_StartBug> if ( skb_headlen ( chunk -> skb ) < sizeof ( sctp_chunkhdr_t ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( chunk -> chunk_end < skb_tail_pointer ( chunk -> skb ) ) { <S2SV_EndBug> <S2SV_StartBug> sctp_chunk_free ( chunk ) ; <S2SV_EndBug>
<S2SV_StartBug> last_id = ntohs ( * pid ) ; <S2SV_EndBug>
<S2SV_StartBug> ci_debug_printf ( 2 , "DEBUG<S2SV_blank>squidclamav_check_preview_handler:<S2SV_blank>Sending<S2SV_blank>request<S2SV_blank>to<S2SV_blank>chained<S2SV_blank>program:<S2SV_blank>%s\\n" , squidguard ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( sgfpw , "%s<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>%s\\n" , httpinf . url , clientip , username , httpinf . method ) ; <S2SV_EndBug> <S2SV_StartBug> fflush ( sgfpw ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! values [ k ] . name ) <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> encT ) ; <S2SV_EndBug> <S2SV_StartBug> return _gcry_aes_arm_encrypt_block ( ctx -> keyschenc , bx , ax , ctx -> rounds , encT ) ; <S2SV_EndBug>
<S2SV_StartBug> rect . x = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . y = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . width = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug> <S2SV_StartBug> rect . height = Z_LVAL_PP ( tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( s -> width != avctx -> width && s -> height != avctx -> height ) { <S2SV_EndBug>
<S2SV_StartBug> if ( length == 1 && bp [ 0 ] == 0xff ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( sizeof ( content_type ) - 1 == klen && 0 == strncasecmp ( key , content_type , sizeof ( content_type ) - 1 ) ) { <S2SV_EndBug> <S2SV_StartBug> rb_hash_aset ( hh , content_type_val , rb_str_new ( val , vlen ) ) ; <S2SV_EndBug> <S2SV_StartBug> rb_hash_aset ( hh , content_length_val , rb_str_new ( val , vlen ) ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( hkey , "HTTP_" ) ; <S2SV_EndBug> <S2SV_StartBug> rb_hash_aset ( hh , rb_str_new ( hkey , klen + 5 ) , sval ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # define ThrowCUTReaderException ( severity , tag ) { if ( palette != NULL ) palette = DestroyImage ( palette ) ; if ( clone_info != NULL ) clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( severity , tag ) ; } <S2SV_EndBug> <S2SV_StartBug> offset = SeekBlob ( image , 6 , SEEK_SET ) ; <S2SV_EndBug>
<S2SV_StartBug> archive_check_magic ( & a -> archive , ARCHIVE_WRITE_MAGIC , <S2SV_EndBug> <S2SV_StartBug> ARCHIVE_STATE_DATA , "archive_write_data" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( 0 == ps_dec -> u4_frm_buf_stride ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( u2_width > ps_dec -> u2_create_max_width ) <S2SV_EndBug> <S2SV_StartBug> || ( u2_height > ps_dec -> u2_create_max_height ) ) <S2SV_EndBug> <S2SV_StartBug> return e_error ; <S2SV_EndBug>
<S2SV_StartBug> xstep = picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + <S2SV_EndBug> <S2SV_StartBug> ystep = picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + <S2SV_EndBug> <S2SV_StartBug> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) <S2SV_EndBug> <S2SV_StartBug> || ! ( pi -> x % ( 1 << rpx ) ) ) && <S2SV_EndBug> <S2SV_StartBug> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) <S2SV_EndBug> <S2SV_StartBug> || ! ( pi -> y % ( 1 << rpy ) ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( p -> tcph -> th_flags & TH_RST ) { <S2SV_EndBug>
<S2SV_StartBug> int result = RLC_OK ; <S2SV_EndBug> <S2SV_StartBug> if ( ! bn_is_zero ( t ) ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> if ( pad != RSA_PAD ) { <S2SV_EndBug> <S2SV_StartBug> result = RLC_ERR ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! unconditional ( & e -> arp ) ) <S2SV_EndBug>
<S2SV_StartBug> char buf [ sz_rfbSetColourMapEntriesMsg + 256 * 3 * 2 ] ; <S2SV_EndBug> <S2SV_StartBug> rfbSetColourMapEntriesMsg * scme = ( rfbSetColourMapEntriesMsg * ) buf ; <S2SV_EndBug> <S2SV_StartBug> uint16_t * rgb = ( uint16_t * ) ( & buf [ sz_rfbSetColourMapEntriesMsg ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rfbWriteExact ( cl , buf , len ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> char key [ 32 ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( vdaux < 1 || vstart + vdaux < vstart ) { <S2SV_EndBug> <S2SV_StartBug> vstart += vdaux ; <S2SV_EndBug> <S2SV_StartBug> if ( vstart > end || vstart + sizeof ( Elf_ ( Verdaux ) ) > end ) { <S2SV_EndBug>
<S2SV_StartBug> if ( current -> active_mm != mm ) <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug> <S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> spin_lock_bh ( & g_cdev . lock ) ; <S2SV_EndBug>
<S2SV_StartBug> free_ep_req ( midi -> out_ep , req ) ; <S2SV_EndBug>
<S2SV_StartBug> net_connect_ip_ssl ( ip , port , own_ip , server -> connrec -> ssl_cert , server -> connrec -> ssl_pkey , <S2SV_EndBug>
<S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) { <S2SV_EndBug> <S2SV_StartBug> double last_boosted_q = vp9_convert_qindex_to_q ( qindex ) ; <S2SV_EndBug> <S2SV_StartBug> ( last_boosted_q * 0.75 ) ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( rc -> avg_frame_qindex [ KEY_FRAME ] , <S2SV_EndBug> <S2SV_StartBug> rc -> kf_boost , <S2SV_EndBug> <S2SV_StartBug> q_val = vp9_convert_qindex_to_q ( active_best_quality ) ; <S2SV_EndBug> <S2SV_StartBug> q_val * q_adj_factor ) ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = get_active_quality ( <S2SV_EndBug> <S2SV_StartBug> active_best_quality = inter_minq [ rc -> avg_frame_qindex [ INTER_FRAME ] ] ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = inter_minq [ active_worst_quality ] ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = inter_minq [ rc -> avg_frame_qindex [ KEY_FRAME ] ] ; <S2SV_EndBug> <S2SV_StartBug> active_best_quality = inter_minq [ active_worst_quality ] ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_type == KEY_FRAME && ! rc -> this_key_frame_forced ) { <S2SV_EndBug> <S2SV_StartBug> * top_index = ( active_worst_quality + active_best_quality * 3 ) / 4 ; <S2SV_EndBug>
<S2SV_StartBug> size_t addr_incr = MIN ( CORE_MMU_USER_CODE_SIZE , <S2SV_EndBug> <S2SV_StartBug> if ( ADD_OVERFLOW ( uaddr , len , & a ) ) <S2SV_EndBug> <S2SV_StartBug> for ( a = uaddr ; a < ( uaddr + len ) ; a += addr_incr ) { <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> old_cs = get_segment_selector ( ctxt , VCPU_SREG_CS ) ; <S2SV_EndBug> <S2SV_StartBug> if ( load_segment_descriptor ( ctxt , sel , VCPU_SREG_CS ) ) <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = 0 ; <S2SV_EndBug>
<S2SV_StartBug> UINT16 count ; <S2SV_EndBug> <S2SV_StartBug> newdata = ( BITMAP_DATA * ) realloc ( bitmapUpdate -> rectangles , <S2SV_EndBug>
<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> grub_memcpy ( buf , data + pos + real_offset , len ) ; <S2SV_EndBug>
<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug>
<S2SV_StartBug> if ( chunk_num > chm -> num_chunks ) return NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! el ) <S2SV_EndBug>
<S2SV_StartBug> rc -> uwbd . task = kthread_run ( uwbd , rc , "uwbd" ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rc -> uwbd . task == NULL ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> start = vma -> vm_start ; <S2SV_EndBug>
<S2SV_StartBug> unix_inflight ( scm -> fp -> fp [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( _PyObject_HasAttrId ( obj , & PyId_arg ) ) { <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( tmp , & arg , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_expr ( tmp , & annotation , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_string ( tmp , & type_comment , arena ) ; <S2SV_EndBug>
<S2SV_StartBug> int count , i ; <S2SV_EndBug>
<S2SV_StartBug> err = xt_check_entry_offsets ( e , e -> target_offset , e -> next_offset ) ; <S2SV_EndBug>
<S2SV_StartBug> stat ( options -> in_file , & filestats ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( client -> priv -> protocol_timeout ) { <S2SV_EndBug>
<S2SV_StartBug> checkstackp ( L , nextra , where ) ; <S2SV_EndBug>
<S2SV_StartBug> const MODE_INFO * above_mi = xd -> mi [ - xd -> mi_stride ] ; <S2SV_EndBug> <S2SV_StartBug> const MODE_INFO * left_mi = xd -> left_available ? xd -> mi [ - 1 ] : NULL ; <S2SV_EndBug> <S2SV_StartBug> const int * bmode_costs = mb -> mbmode_cost ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( t_above , xd -> plane [ 0 ] . above_context , sizeof ( t_above ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( t_left , xd -> plane [ 0 ] . left_context , sizeof ( t_left ) ) ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE best_mode = DC_PRED ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE A = vp9_above_block_mode ( mic , above_mi , i ) ; <S2SV_EndBug> <S2SV_StartBug> const MB_PREDICTION_MODE L = vp9_left_block_mode ( mic , left_mi , i ) ; <S2SV_EndBug> <S2SV_StartBug> bmode_costs = mb -> y_mode_costs [ A ] [ L ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( strcmp ( ptr , "get<S2SV_blank>" ) && strcmp ( ptr , "gets<S2SV_blank>" ) ) { <S2SV_EndBug>
<S2SV_StartBug> int64_t index_pts = FFMAX ( av_rescale ( itime , i , 10000 ) - asf -> hdr . preroll , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> static int udp_push_pending_frames ( struct sock * sk ) <S2SV_EndBug>
<S2SV_StartBug> for ( pass = 0 ; pass < 10 ; pass ++ ) { <S2SV_EndBug>
<S2SV_StartBug> if ( source == target ) <S2SV_EndBug>
<S2SV_StartBug> bool tsonly ; <S2SV_EndBug> <S2SV_StartBug> sk -> sk_type == SOCK_STREAM ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> __skb_complete_tx_timestamp ( skb , sk , tstype ) ; <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct loop_device * lo = disk -> private_data ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & lo -> lo_ctl_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> # if ENABLE_BGP_VNC <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; inpic -> data [ plane ] && plane < 4 ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug>
<S2SV_StartBug> ikev1_attr_print ( netdissect_options * ndo , const u_char * p , const u_char * ep ) <S2SV_EndBug> <S2SV_StartBug> if ( p [ 0 ] & 0x80 ) <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> if ( ep < p + totlen ) { <S2SV_EndBug> <S2SV_StartBug> return ep + 1 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 2 ] , 2 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "len=%d<S2SV_blank>value=" , EXTRACT_16BITS ( & p [ 2 ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> rawprint ( ndo , ( const uint8_t * ) & p [ 4 ] , EXTRACT_16BITS ( & p [ 2 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> return p + totlen ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ( * sp -> decodepfunc ) ( tif , op0 , occ0 ) ; <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> inl = i2d ( data , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> . match_data . cmp = type -> match , <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( insn -> code != ( BPF_JMP | BPF_CALL ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! bpf_map_ptr_unpriv ( aux ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bpf_map_ptr_poisoned ( aux ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( prog -> jit_requested && BITS_PER_LONG == 64 && <S2SV_EndBug> <S2SV_StartBug> if ( bpf_map_ptr_poisoned ( aux ) ) <S2SV_EndBug> <S2SV_StartBug> goto patch_call_imm ; <S2SV_EndBug> <S2SV_StartBug> ops = map_ptr -> ops ; <S2SV_EndBug> <S2SV_StartBug> cnt = ops -> map_gen_lookup ( map_ptr , insn_buf ) ; <S2SV_EndBug> <S2SV_StartBug> BUILD_BUG_ON ( ! __same_type ( ops -> map_lookup_elem , <S2SV_EndBug>
<S2SV_StartBug> iterator = rfbGetClientIterator ( rfbScreen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( Stream_GetRemainingLength ( s ) < 2 ) <S2SV_EndBug> <S2SV_StartBug> Stream_Read_UINT16 ( s , * length ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * length == 0x8000 ) <S2SV_EndBug> <S2SV_StartBug> rdp_read_flow_control_pdu ( s , type ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( size_t ) * length - 2 ) > Stream_GetRemainingLength ( s ) ) <S2SV_EndBug> <S2SV_StartBug> if ( * length > 4 ) <S2SV_EndBug>
<S2SV_StartBug> err = ioctl ( sk , SIOCGIFHWADDR , & ifr ) ; <S2SV_EndBug> <S2SV_StartBug> err = ioctl ( sk , SIOCSIFHWADDR , ( caddr_t ) & ifr ) ; <S2SV_EndBug> <S2SV_StartBug> err = ioctl ( sk , SIOCSIFFLAGS , ( caddr_t ) & ifr ) ; <S2SV_EndBug>
<S2SV_StartBug> int get_down2_steps ( int in_length , int out_length ) { <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 17 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { <S2SV_EndBug>
<S2SV_StartBug> prefix = report [ i ] ; <S2SV_EndBug> <S2SV_StartBug> case 3 : <S2SV_EndBug>
<S2SV_StartBug> # ifndef PGEN <S2SV_EndBug>
<S2SV_StartBug> static void set_segment_id ( VP9_COMMON * cm , BLOCK_SIZE bsize , <S2SV_EndBug> <S2SV_StartBug> const int mi_offset = mi_row * cm -> mi_cols + mi_col ; <S2SV_EndBug> <S2SV_StartBug> for ( y = 0 ; y < ymis ; y ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( x = 0 ; x < xmis ; x ++ ) <S2SV_EndBug> <S2SV_StartBug> cm -> last_frame_seg_map [ mi_offset + y * cm -> mi_cols + x ] = segment_id ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) { <S2SV_EndBug> <S2SV_StartBug> key -> reject_error = - error ; <S2SV_EndBug>
<S2SV_StartBug> size_t i , maxcount ; <S2SV_EndBug> <S2SV_StartBug> ssi -> si_count = CDF_TOLE2 ( si -> si_count ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < CDF_TOLE4 ( si -> si_count ) ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> info , count , & maxcount ) == - 1 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { if ( psf -> headindex < SIGNED_SIZEOF ( psf -> header ) - 1 ) <S2SV_EndBug> <S2SV_StartBug> psf -> header [ psf -> headindex ++ ] = x ; <S2SV_EndBug>

<S2SV_StartBug> Total += vp8_mse16x16 ( src + j , source -> y_stride , <S2SV_EndBug>
<S2SV_StartBug> calldata -> arg . open_flags = 0 ; <S2SV_EndBug>
<S2SV_StartBug> ext4_io_end_t * io ; <S2SV_EndBug> <S2SV_StartBug> if ( list_empty ( & EXT4_I ( inode ) -> i_completed_io_list ) ) <S2SV_EndBug> <S2SV_StartBug> while ( ! list_empty ( & EXT4_I ( inode ) -> i_completed_io_list ) ) { <S2SV_EndBug> <S2SV_StartBug> io = list_entry ( EXT4_I ( inode ) -> i_completed_io_list . next , <S2SV_EndBug> <S2SV_StartBug> ret = ext4_end_io_nolock ( io ) ; <S2SV_EndBug> <S2SV_StartBug> return ( ret2 < 0 ) ? ret2 : 0 ; <S2SV_EndBug>
<S2SV_StartBug> unsigned char type , void * * ptr ) <S2SV_EndBug> <S2SV_StartBug> if ( header -> bLength < 2 ) { <S2SV_EndBug> <S2SV_StartBug> if ( header -> bDescriptorType == type ) { <S2SV_EndBug>
<S2SV_StartBug> sprintf ( outfilename , "%s_%05d.j2k" , argv [ 2 ] , snum ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing\\n" , outfilename ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( j >= length ) return - 1 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cp , packet + j , label_len ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( l_strnstart ( "MSG" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "RPY<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "ERR<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "ANS<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "NUL<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "SEQ<S2SV_blank>" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( l_strnstart ( "END" , 4 , ( const char * ) bp , length ) ) <S2SV_EndBug>
<S2SV_StartBug> subsampling_dx = parameters -> subsampling_dx ; <S2SV_EndBug>
<S2SV_StartBug> snprintf ( rcomp . type , CRYPTO_MAX_ALG_NAME , "%s" , "compression" ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long flags ; <S2SV_EndBug> <S2SV_StartBug> spin_lock_irqsave ( & dev -> lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & dev -> lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> var = vp8_variance16x16 <S2SV_EndBug>
<S2SV_StartBug> int mongo_env_read_socket ( mongo * conn , void * buf , int len ) { <S2SV_EndBug> <S2SV_StartBug> int sent = recv ( conn -> sock , cbuf , len , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug> <S2SV_StartBug> pair -> added = 0 ; <S2SV_EndBug>
<S2SV_StartBug> vpx_free ( cr ) ; <S2SV_EndBug>
<S2SV_StartBug> return in ; <S2SV_EndBug>
<S2SV_StartBug> value [ n ] >= min && value [ n ] <= max && <S2SV_EndBug> <S2SV_StartBug> && field -> usage [ field -> value [ n ] - min ] . hid <S2SV_EndBug> <S2SV_StartBug> && field -> usage [ value [ n ] - min ] . hid <S2SV_EndBug>
<S2SV_StartBug> for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 1 ) ; x += 2 ) <S2SV_EndBug>
<S2SV_StartBug> if ( nbytes < sizeof ( * hwrpb ) ) <S2SV_EndBug>
<S2SV_StartBug> list_del ( & key -> graveyard_link ) ; <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) && <S2SV_EndBug> <S2SV_StartBug> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> PCI_DMA_FROMDEVICE ) ) <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( console -> name , path , "none" , MS_BIND , 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( wp -> listening_socket != STDIN_FILENO ) { <S2SV_EndBug>
<S2SV_StartBug> scratch = newscratch = malloc ( 2 * data -> set . buffer_size ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct vp9_ref_frame ref ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_control ( & stream -> encoder , VP9_GET_REFERENCE , & ref ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_control ( & stream -> decoder , VP9_GET_REFERENCE , & ref ) ; <S2SV_EndBug> <S2SV_StartBug> find_mismatch ( & enc_img , & dec_img , y , u , v ) ; <S2SV_EndBug>
<S2SV_StartBug> static MagickPixelPacket * * AcquirePixelThreadSet ( const Image * image ) <S2SV_EndBug> <S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> pixels [ i ] = ( MagickPixelPacket * ) AcquireQuantumMemory ( image -> columns , <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < ( ssize_t ) image -> columns ; j ++ ) <S2SV_EndBug> <S2SV_StartBug> GetMagickPixelPacket ( image , & pixels [ i ] [ j ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff16 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( f -> map & ( 1 << rec ) ) { <S2SV_EndBug>
<S2SV_StartBug> static void estimate_ref_frame_costs ( VP9_COMP * cpi , int segment_id , <S2SV_EndBug> <S2SV_StartBug> vp9_prob * comp_mode_p ) { <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & cpi -> common ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( ref_costs_comp , 0 , MAX_REF_FRAMES * sizeof ( * ref_costs_comp ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob intra_inter_p = vp9_get_intra_inter_prob ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob comp_inter_p = 128 ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob ref_single_p1 = vp9_get_pred_prob_single_ref_p1 ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob ref_single_p2 = vp9_get_pred_prob_single_ref_p2 ( cm , xd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob ref_comp_p = vp9_get_pred_prob_comp_ref_p ( cm , xd ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , j ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( c -> chunk_size == 0 ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>c<S2SV_blank>%04x" , EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct f2fs_sb_info * sbi = F2FS_I_SB ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! i_ext || ! i_ext -> len ) <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug>
<S2SV_StartBug> # define PCDGetBits ( n ) { sum = ( sum << n ) & 0xffffffff ; bits -= n ; while ( bits <= 24 ) { if ( p >= ( buffer + 0x800 ) ) { count = ReadBlob ( image , 0x800 , buffer ) ; p = buffer ; } sum |= ( ( unsigned int ) ( * p ) << ( 24 - bits ) ) ; bits += 8 ; p ++ ; } } <S2SV_EndBug> <S2SV_StartBug> ThrowBinaryException ( ResourceLimitError , "MemoryAllocationFailed" , <S2SV_EndBug> <S2SV_StartBug> buffer = ( unsigned char * ) RelinquishMagickMemory ( buffer ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , y ; <S2SV_EndBug> <S2SV_StartBug> fwrite ( buf , 1 , w , file ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t clear_buffer [ 9 ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( ( profile >= 2 && data_sz <= 1 ) || data_sz < 1 ) <S2SV_EndBug> <S2SV_StartBug> if ( data_sz <= 8 ) <S2SV_EndBug>
<S2SV_StartBug> # endif <S2SV_EndBug> <S2SV_StartBug> read_config_file ( ) ; <S2SV_EndBug> <S2SV_StartBug> umask ( 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 * directory_base ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( int ) obj -> hdr -> number_of_streams ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> entry = ( struct minidump_directory * ) ( directory_base + ( i * sizeof ( struct minidump_directory ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> r_bin_mdmp_init_directory_entry ( obj , entry ) ; <S2SV_EndBug>
<S2SV_StartBug> Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> return MS_FALSE ; <S2SV_EndBug>
<S2SV_StartBug> struct kvm_lapic * apic = vcpu -> arch . apic ; <S2SV_EndBug> <S2SV_StartBug> vapic = kmap_atomic ( vcpu -> arch . apic -> vapic_page ) ; <S2SV_EndBug>
<S2SV_StartBug> gint * ac ; <S2SV_EndBug>
<S2SV_StartBug> struct tcp_sock_t * tcp_socket ; <S2SV_EndBug> <S2SV_StartBug> while ( ( tcp_socket = tcp_open ( desired_port ) ) == NULL && <S2SV_EndBug> <S2SV_StartBug> g_options . only_desired_port == 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> uint16_t real_port = tcp_port_number_get ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> uint16_t pid ; <S2SV_EndBug> <S2SV_StartBug> args -> tcp = tcp_conn_accept ( tcp_socket ) ; <S2SV_EndBug> <S2SV_StartBug> cleanup_usb : <S2SV_EndBug>
<S2SV_StartBug> static int done ; <S2SV_EndBug> <S2SV_StartBug> for ( c = 'a' ; c <= 'z' ; c ++ ) <S2SV_EndBug>
<S2SV_StartBug> YV12_BUFFER_CONFIG * golden_ref = get_ref_frame_buffer ( cpi , GOLDEN_FRAME ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( frame_stats -> mb_stats , 0 , <S2SV_EndBug> <S2SV_StartBug> vp9_clear_system_state ( ) ; <S2SV_EndBug>
<S2SV_StartBug> dev -> product_id = le16_to_cpu ( udev -> descriptor . idProduct ) ; <S2SV_EndBug>
<S2SV_StartBug> exit_client ( client_p , client_p , client_p , "Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol" ) ; <S2SV_EndBug>
<S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( rsvp_obj_ctype ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Hop-limit:<S2SV_blank>%u,<S2SV_blank>Bandwidth:<S2SV_blank>%.10g<S2SV_blank>Mbps" , <S2SV_EndBug>
<S2SV_StartBug> struct sock * sk = sock -> sk ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_namelen >= sizeof ( struct sockaddr_mISDN ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_namelen ) <S2SV_EndBug>
<S2SV_StartBug> clear_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ; <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug>
<S2SV_StartBug> struct sock * sk = sock -> sk ; <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_namelen >= sizeof ( struct sockaddr_mISDN ) ) { <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> if ( msg -> msg_namelen ) <S2SV_EndBug>
<S2SV_StartBug> bool slow ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> register const struct hello6 * hellop = ( const struct hello6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; <S2SV_EndBug>
<S2SV_StartBug> case 0 : <S2SV_EndBug> <S2SV_StartBug> ( intmax_t ) rsrc -> uncompressed_size ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( mp , p , bytes_avail ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < oxcf -> number_of_layers ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> return aa_audit ( AUDIT_APPARMOR_DENIED , NULL , GFP_KERNEL , <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>MTU<S2SV_blank>size<S2SV_blank>%u" , EXTRACT_16BITS ( tptr + 4 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> res = ctx -> iface -> dec . set_fb_fn ( ctx -> priv -> alg_priv , cb_get , cb_release , <S2SV_EndBug>
<S2SV_StartBug> int res , ret ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( n <= 0 ) return ( n ) ; <S2SV_EndBug>
<S2SV_StartBug> newsk -> sk_mark = inet_rsk ( req ) -> ir_mark ; <S2SV_EndBug>
<S2SV_StartBug> BUG_ON ( sk != asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> dlen -= 2 ; <S2SV_EndBug>
<S2SV_StartBug> ( ep < ep2 ) ? ep : ep2 , map , nmap ) ; <S2SV_EndBug>
<S2SV_StartBug> static void fdct8 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; <S2SV_EndBug> <S2SV_StartBug> int t0 , t1 , t2 , t3 ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = fdct_round_shift ( t0 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 2 ] = fdct_round_shift ( t2 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 4 ] = fdct_round_shift ( t1 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 6 ] = fdct_round_shift ( t3 ) ; <S2SV_EndBug> <S2SV_StartBug> t2 = fdct_round_shift ( t0 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = fdct_round_shift ( t0 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 3 ] = fdct_round_shift ( t2 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 5 ] = fdct_round_shift ( t1 ) ; <S2SV_EndBug> <S2SV_StartBug> output [ 7 ] = fdct_round_shift ( t3 ) ; <S2SV_EndBug>
<S2SV_StartBug> size2 , mime ) ; <S2SV_EndBug>
<S2SV_StartBug> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; <S2SV_EndBug>
<S2SV_StartBug> int mi_row , int mi_col , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> const MODE_INFO * above_mi = xd -> mi [ - cm -> mi_stride ] ; <S2SV_EndBug> <S2SV_StartBug> const MODE_INFO * left_mi = xd -> left_available ? xd -> mi [ - 1 ] : NULL ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> segment_id = read_intra_segment_id ( cm , xd , mi_row , mi_col , r ) ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> tx_size = read_tx_size ( cm , xd , cm -> tx_mode , bsize , 1 , r ) ; <S2SV_EndBug>

<S2SV_StartBug> if ( len <= 0 ) <S2SV_EndBug> <S2SV_StartBug> len -= bytes ; <S2SV_EndBug>
<S2SV_StartBug> length ; <S2SV_EndBug> <S2SV_StartBug> sun_pixels = sun_data ; <S2SV_EndBug> <S2SV_StartBug> ( void ) DecodeImage ( sun_data , sun_info . length , sun_pixels , bytes_per_line * <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( pos >= GDT_ENTRY_TLS_ENTRIES * sizeof ( struct user_desc ) || <S2SV_EndBug> <S2SV_StartBug> set_tls_desc ( target , <S2SV_EndBug>
<S2SV_StartBug> blkcnt = xfs_attr3_rmt_blocks ( mp , args -> valuelen ) ; <S2SV_EndBug> <S2SV_StartBug> valuelen = args -> valuelen ; <S2SV_EndBug>
<S2SV_StartBug> set_exception_intercept ( svm , AC_VECTOR ) ; <S2SV_EndBug>
<S2SV_StartBug> H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; <S2SV_EndBug>
<S2SV_StartBug> COM_DefaultExtension ( filename , sizeof ( filename ) , ".txt" ) ; <S2SV_EndBug>
<S2SV_StartBug> int strindex = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( old -> curframe != cur -> curframe ) <S2SV_EndBug>
<S2SV_StartBug> set_exception_intercept ( svm , AC_VECTOR ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( insn -> code != ( BPF_JMP | BPF_CALL ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ! bpf_map_ptr_unpriv ( aux ) ) <S2SV_EndBug> <S2SV_StartBug> if ( bpf_map_ptr_poisoned ( aux ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( prog -> jit_requested && BITS_PER_LONG == 64 && <S2SV_EndBug> <S2SV_StartBug> if ( bpf_map_ptr_poisoned ( aux ) ) <S2SV_EndBug> <S2SV_StartBug> goto patch_call_imm ; <S2SV_EndBug> <S2SV_StartBug> ops = map_ptr -> ops ; <S2SV_EndBug> <S2SV_StartBug> cnt = ops -> map_gen_lookup ( map_ptr , insn_buf ) ; <S2SV_EndBug> <S2SV_StartBug> BUILD_BUG_ON ( ! __same_type ( ops -> map_lookup_elem , <S2SV_EndBug>
<S2SV_StartBug> context . Xtogo = i -> width ; <S2SV_EndBug>
<S2SV_StartBug> # if CONFIG_MEM_MANAGER <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> if ( ( job = cupsdAddJob ( priority , printer -> name ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> apply_printer_defaults ( printer , job ) ; <S2SV_EndBug>
<S2SV_StartBug> client -> desktopName = malloc ( ( uint64_t ) client -> si . nameLength + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t <S2SV_EndBug> <S2SV_StartBug> value = ( size_t ) ( buffer [ 0 ] << 24 ) ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 1 ] << 16 ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 2 ] << 8 ; <S2SV_EndBug> <S2SV_StartBug> value |= buffer [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "(refresh:<S2SV_blank>%u)" , <S2SV_EndBug>
<S2SV_StartBug> char added ; <S2SV_EndBug> <S2SV_StartBug> pair -> added = 0 ; <S2SV_EndBug>
<S2SV_StartBug> flush_dcache_page ( page ) ; <S2SV_EndBug> <S2SV_StartBug> iov_iter_advance ( ii , tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( namelen > 32 ) <S2SV_EndBug>
<S2SV_StartBug> return mount_entry_on_generic ( mntent , path ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { <S2SV_EndBug> <S2SV_StartBug> || pReplyData == NULL || * replySize != sizeof ( int ) ) { <S2SV_EndBug> <S2SV_StartBug> pReplyData == NULL || <S2SV_EndBug> <S2SV_StartBug> || pReplyData == NULL || * replySize != ( int ) sizeof ( int32_t ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( debug ) { <S2SV_EndBug> <S2SV_StartBug> if ( d -> msg_len > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) <S2SV_EndBug>
<S2SV_StartBug> tlen = len - sizeof ( struct eigrp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> tlv_tptr = tptr + sizeof ( struct eigrp_tlv_header ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>holdtime:<S2SV_blank>%us,<S2SV_blank>k1<S2SV_blank>%u,<S2SV_blank>k2<S2SV_blank>%u,<S2SV_blank>k3<S2SV_blank>%u,<S2SV_blank>k4<S2SV_blank>%u,<S2SV_blank>k5<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IOS<S2SV_blank>version:<S2SV_blank>%u.%u,<S2SV_blank>EIGRP<S2SV_blank>version<S2SV_blank>%u.%u" , <S2SV_EndBug> <S2SV_StartBug> bit_length = tlv_ptr . eigrp_tlv_ip_int -> plen ; <S2SV_EndBug> <S2SV_StartBug> bit_length = tlv_ptr . eigrp_tlv_ip_ext -> plen ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Cable-range:<S2SV_blank>%u-%u,<S2SV_blank>Router-ID<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> tlv_ptr . eigrp_tlv_at_int = ( const struct eigrp_tlv_at_int_t * ) tlv_tptr ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Cable-Range:<S2SV_blank>%u-%u,<S2SV_blank>nexthop:<S2SV_blank>" , <S2SV_EndBug>
<S2SV_StartBug> strncpy ( szSec , opt_string , sepIdx ) ; <S2SV_EndBug> <S2SV_StartBug> strncpy ( szKey , sep , sepIdx ) ; <S2SV_EndBug> <S2SV_StartBug> strcpy ( szVal , sep2 + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( size_bmp > BMP_HEADER_SIZE ) { <S2SV_EndBug>
<S2SV_StartBug> switch ( pc -> componentType ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case 5 : <S2SV_EndBug> <S2SV_StartBug> elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_EndBug>
<S2SV_StartBug> if ( refill_pi_state_cache ( ) ) <S2SV_EndBug> <S2SV_StartBug> goto out_put_key1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( keyring ) ) { <S2SV_EndBug>
<S2SV_StartBug> pairs = palloc ( ncolumns * sizeof ( Pairs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> uint16_t n ; <S2SV_EndBug> <S2SV_StartBug> Enc28j60Context * context ; <S2SV_EndBug> <S2SV_StartBug> if ( enc28j60ReadReg ( interface , ENC28J60_REG_EPKTCNT ) ) <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERDPTH , MSB ( context -> nextPacket ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ReadBuffer ( interface , ( uint8_t * ) & context -> nextPacket , sizeof ( uint16_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & RSV_RECEIVED_OK ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> n = MIN ( n , ETH_MAX_FRAME_SIZE ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60ReadBuffer ( interface , context -> rxBuffer , n ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTL , LSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTH , MSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTL , LSB ( context -> nextPacket - 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTH , MSB ( context -> nextPacket - 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON2 , ECON2_PKTDEC ) ; <S2SV_EndBug> <S2SV_StartBug> nicProcessPacket ( interface , context -> rxBuffer , n , & ancillary ) ; <S2SV_EndBug>
<S2SV_StartBug> cleanup_free char * base_path = NULL ; <S2SV_EndBug> <S2SV_StartBug> base_path = xasprintf ( "/run/user/%d/.bubblewrap" , real_uid ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( rh . command == RELAY_COMMAND_BEGIN_DIR ) { <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < name_len ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> int name_len ; <S2SV_EndBug>
<S2SV_StartBug> * head = NULL ; <S2SV_EndBug>
<S2SV_StartBug> int xmkstemp ( char * * tmpname , char * dir ) <S2SV_EndBug> <S2SV_StartBug> char * tmpenv ; <S2SV_EndBug> <S2SV_StartBug> if ( dir != NULL ) <S2SV_EndBug> <S2SV_StartBug> tmpenv = dir ; <S2SV_EndBug> <S2SV_StartBug> if ( tmpenv ) <S2SV_EndBug> <S2SV_StartBug> program_invocation_short_name ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( length < sizeof ( DhcpMessage ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! revs -> blob_objects ) <S2SV_EndBug> <S2SV_StartBug> show ( obj , path , name , cb_data ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( len > BUFSIZE + sizeof ( struct nbd_reply ) ) <S2SV_EndBug>
<S2SV_StartBug> static void __nfs4_close ( struct path * path , struct nfs4_state * state , mode_t mode , int wait ) <S2SV_EndBug> <S2SV_StartBug> int newstate ; <S2SV_EndBug> <S2SV_StartBug> switch ( mode & ( FMODE_READ | FMODE_WRITE ) ) { <S2SV_EndBug>
<S2SV_StartBug> tread . event = SNDRV_TIMER_EVENT_EARLY ; <S2SV_EndBug>
<S2SV_StartBug> if ( sock_owned_by_user ( sk ) ) { <S2SV_EndBug>
<S2SV_StartBug> "?" , tptr [ 0 ] ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return chg ; <S2SV_EndBug> <S2SV_StartBug> return - ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> ret = hugetlb_acct_memory ( h , chg ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> CLEANUP_FREE char * * lines = NULL ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> perf_paranoid_kernel ( ) && ! capable ( CAP_SYS_ADMIN ) ) <S2SV_EndBug>
<S2SV_StartBug> case 'c' : return getnum ( L , fmt , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> int sz = getnum ( L , fmt , sizeof ( int ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return evtchn_to_irq [ EVTCHN_ROW ( evtchn ) ] [ EVTCHN_COL ( evtchn ) ] ; <S2SV_EndBug>
<S2SV_StartBug> static int do_16x16_motion_search ( VP9_COMP * cpi , const int_mv * ref_mv , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> int_mv tmp_mv ; <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . pre [ 0 ] . buf , xd -> plane [ 0 ] . pre [ 0 ] . stride , <S2SV_EndBug> <S2SV_StartBug> tmp_err = do_16x16_motion_iteration ( cpi , & ref_mv -> as_mv , & tmp_mv . as_mv , <S2SV_EndBug>
<S2SV_StartBug> ackNum ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( segment -> flags & TCP_FLAG_FIN ) <S2SV_EndBug> <S2SV_StartBug> ackNum ++ ; <S2SV_EndBug>
<S2SV_StartBug> struct snd_timer_user * tu ; <S2SV_EndBug> <S2SV_StartBug> switch ( cmd ) { <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( options . compression ) { <S2SV_EndBug>
<S2SV_StartBug> in6_dev -> cnf . hop_limit = ra_msg -> icmph . icmp6_hop_limit ; <S2SV_EndBug>
<S2SV_StartBug> v . val = test_bit ( SOCK_PASSCRED , & sock -> flags ) ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> v . val = test_bit ( SOCK_PASSSEC , & sock -> flags ) ? 1 : 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! info -> attrs [ NFC_ATTR_DEVICE_INDEX ] ) <S2SV_EndBug>
<S2SV_StartBug> struct net * net = sock_net ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> bh_lock_sock ( asoc -> base . sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_owned_by_user ( asoc -> base . sk ) ) { <S2SV_EndBug> <S2SV_StartBug> asoc -> base . sk -> sk_err = - error ; <S2SV_EndBug> <S2SV_StartBug> bh_unlock_sock ( asoc -> base . sk ) ; <S2SV_EndBug>
<S2SV_StartBug> xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> void * ptr = malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> sys -> free ( lzx -> inbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( NAPI_GRO_CB ( skb ) -> udp_mark || <S2SV_EndBug> <S2SV_StartBug> NAPI_GRO_CB ( skb ) -> udp_mark = 1 ; <S2SV_EndBug>
<S2SV_StartBug> MB_PREDICTION_MODE mode ; <S2SV_EndBug> <S2SV_StartBug> int64_t this_distortion , this_sse ; <S2SV_EndBug> <S2SV_StartBug> super_block_uvrd ( cpi , x , & this_rate_tokenonly , <S2SV_EndBug> <S2SV_StartBug> & this_distortion , & s , & this_sse , bsize , best_rd ) ; <S2SV_EndBug> <S2SV_StartBug> x -> intra_uv_mode_cost [ cpi -> common . frame_type ] [ mode ] ; <S2SV_EndBug> <S2SV_StartBug> if ( ! x -> select_txfm_size ) { <S2SV_EndBug>
<S2SV_StartBug> if ( exists_not_none ( obj , & PyId_arg ) ) { <S2SV_EndBug> <S2SV_StartBug> tmp = _PyObject_GetAttrId ( obj , & PyId_arg ) ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_identifier ( tmp , & arg , arena ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> dh = skb_header_pointer ( skb , dataoff , sizeof ( _dh ) , & dh ) ; <S2SV_EndBug>
<S2SV_StartBug> static int read_fragment_table ( long long * directory_table_end ) <S2SV_EndBug> <S2SV_StartBug> int bytes = SQUASHFS_FRAGMENT_BYTES ( sBlk . s . fragments ) ; <S2SV_EndBug> <S2SV_StartBug> int indexes = SQUASHFS_FRAGMENT_INDEXES ( sBlk . s . fragments ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sBlk . s . fragments == 0 ) { <S2SV_EndBug> <S2SV_StartBug> SQUASHFS_FRAGMENT_INDEX_BYTES ( sBlk . s . fragments ) , <S2SV_EndBug> <S2SV_StartBug> * directory_table_end = fragment_table_index [ 0 ] ; <S2SV_EndBug>
<S2SV_StartBug> assert ( numcolors <= RAS_CMAP_MAXSIZ ) ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( efbuf , "REG_%s" , name ) ; <S2SV_EndBug>
<S2SV_StartBug> dlen -= 2 ; <S2SV_EndBug>
<S2SV_StartBug> nfcb_poll -> sensb_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int maxfraglen , fragheaderlen ; <S2SV_EndBug> <S2SV_StartBug> int hh_len ; <S2SV_EndBug> <S2SV_StartBug> fragheaderlen , skb , rt ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t chan_chunk = 0 , channel_layout = 0 , bcount ; <S2SV_EndBug> <S2SV_StartBug> WavpackBigEndianToNative ( & caf_audio_format , CAFAudioFormatFormat ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! DoReadFile ( infile , & mEditCount , sizeof ( mEditCount ) , & bcount ) || <S2SV_EndBug>
<S2SV_StartBug> static int cost_segmap ( int * segcounts , vp9_prob * probs ) { <S2SV_EndBug>
<S2SV_StartBug> motion_pct = this_frame -> pcnt_motion ; <S2SV_EndBug>
<S2SV_StartBug> char extbuf [ sizeof ( c -> binary_header ) + BIN_MAX_EXTLEN ] ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( extbuf + sizeof ( c -> binary_header ) , c -> rcurr + sizeof ( c -> binary_header ) , extlen ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { <S2SV_EndBug>
<S2SV_StartBug> void * H264SwDecMalloc ( u32 size ) <S2SV_EndBug> <S2SV_StartBug> return malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> offset = tbl -> indent ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ut32 len = sec -> payload_len ; <S2SV_EndBug> <S2SV_StartBug> while ( i < len && r < count ) { <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> free ( ptr ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> default : <S2SV_EndBug>
<S2SV_StartBug> tr_variantInitDict ( & node -> sorted , n ) ; <S2SV_EndBug> <S2SV_StartBug> node -> sorted . val . l . vals [ i ] = * tmp [ i ] . val ; <S2SV_EndBug> <S2SV_StartBug> node -> sorted . val . l . count = n ; <S2SV_EndBug> <S2SV_StartBug> node -> v = & node -> sorted ; <S2SV_EndBug> <S2SV_StartBug> node -> v = v ; <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <S2SV_EndBug>
<S2SV_StartBug> dl = kmalloc ( size , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ; <S2SV_EndBug> <S2SV_StartBug> rs -> respond = respond ; <S2SV_EndBug>
<S2SV_StartBug> void <S2SV_EndBug>
<S2SV_StartBug> if ( msg -> has_data_length && len > 0 ) { <S2SV_EndBug> <S2SV_StartBug> return len < 256 ? ( uint8_t ) len : 0 ; <S2SV_EndBug>
<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug>
<S2SV_StartBug> int ffmax , parent_len ; <S2SV_EndBug> <S2SV_StartBug> r = idr_start ( a , idr , isoent -> children . cnt , ffmax , 6 , 2 , & rb_ops ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) ( l = np -> file -> basename_utf16 . length ) > ffmax ) <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) np -> file -> basename_utf16 . length > ffmax ) { <S2SV_EndBug> <S2SV_StartBug> if ( parent_len + np -> mb_len > 240 ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( int ) l == ffmax ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( int ) l == ffmax - 2 ) <S2SV_EndBug> <S2SV_StartBug> else if ( ( int ) l == ffmax - 4 ) <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( cpi -> active_map , map , rows * cols ) ; <S2SV_EndBug>
<S2SV_StartBug> bool disconnect ; <S2SV_EndBug> <S2SV_StartBug> __touch_mnt_namespace ( p -> mnt_ns ) ; <S2SV_EndBug>
<S2SV_StartBug> static void show_object ( struct object * object , struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , void * data ) <S2SV_EndBug>
<S2SV_StartBug> switch ( bsize ) { <S2SV_EndBug> <S2SV_StartBug> node -> split [ i ] = & vt -> split [ i ] ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> case NPNVSupportsWindowless : <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( dst_ptr1 , src_ptr1 [ 0 ] , extend_left ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_ptr1 + extend_left , src_ptr1 , w ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_ptr1 , src_ptr1 , linesize ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst_ptr2 , src_ptr2 , linesize ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! object || object -> list . length != 2 || ! object -> list . objects [ 0 ] || object -> list . objects [ 1 ] -> list . length != 1 ) { <S2SV_EndBug>
<S2SV_StartBug> return - EOPNOTSUPP ; <S2SV_EndBug> <S2SV_StartBug> IP6CB ( skb ) -> iif ) ; <S2SV_EndBug>
<S2SV_StartBug> data = dm9000ReadReg ( DM9000_REG_MRCMDX ) ; <S2SV_EndBug> <S2SV_StartBug> DM9000_INDEX_REG = DM9000_REG_MRCMDX1 ; <S2SV_EndBug> <S2SV_StartBug> DM9000_INDEX_REG = DM9000_REG_MRCMD ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ( RSR_LCS | RSR_RWTO | RSR_PLE | RSR_AE | RSR_CE | RSR_FOE ) ) == 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( nposargs + nkwonlyargs > 255 ) { <S2SV_EndBug> <S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> <S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == TYPE_COMMENT ) { <S2SV_EndBug> <S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug> <S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == TYPE_COMMENT ) { <S2SV_EndBug> <S2SV_StartBug> if ( i < NCH ( n ) && TYPE ( CHILD ( n , i ) ) == COMMA ) <S2SV_EndBug>
<S2SV_StartBug> return SECURE_ELEMENT_ERROR_NPE ; <S2SV_EndBug>
<S2SV_StartBug> if ( nlmsg_len ( nlh ) < sizeof ( struct nfgenmsg ) || <S2SV_EndBug>
<S2SV_StartBug> length = cap -> bLength ; <S2SV_EndBug>
<S2SV_StartBug> if ( ape -> totalframes > UINT_MAX / sizeof ( APEFrame ) ) { <S2SV_EndBug>
<S2SV_StartBug> static int prob_diff_update_cost ( vp9_prob newp , vp9_prob oldp ) { <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> chunk_size [ i ] = avio_rl32 ( pb ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> chunk_offset [ i ] = avio_rl32 ( pb ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < frame_count ; i ++ ) { <S2SV_EndBug>
<S2SV_StartBug> key = getDirective ( line , & value ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( ctx -> pbi == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> env -> used_maps [ env -> used_map_cnt ++ ] = map ; <S2SV_EndBug> <S2SV_StartBug> bpf_map_inc ( map , false ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! index_key . type -> match || ! index_key . type -> instantiate || <S2SV_EndBug>
<S2SV_StartBug> if ( * p != IAC ) <S2SV_EndBug>
<S2SV_StartBug> daddy = malloc ( sizeof ( creator_template ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int start [ ] = { Py_file_input , Py_eval_input , Py_single_input } ; <S2SV_EndBug> <S2SV_StartBug> ~ ( PyCF_MASK | PyCF_MASK_OBSOLETE | PyCF_DONT_IMPLY_DEDENT | PyCF_ONLY_AST ) ) <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> "compile()<S2SV_blank>mode<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'exec\',<S2SV_blank>\'eval\'<S2SV_blank>or<S2SV_blank>\'single\'" ) ; <S2SV_EndBug>
<S2SV_StartBug> char * outname = create_output_name ( ( unsigned char * ) f [ i ] -> filename , NULL , 0 , 1 , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( size < 6 ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char combname [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( combname , L_BUF_SIZE , "sel_comb_%dh" , size ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( combname , L_BUF_SIZE , "sel_comb_%dv" , size ) ; <S2SV_EndBug>
<S2SV_StartBug> static void update_switchable_interp_probs ( VP9_COMMON * cm , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> cm -> fc . switchable_interp_prob [ j ] , <S2SV_EndBug> <S2SV_StartBug> cm -> counts . switchable_interp [ j ] , SWITCHABLE_FILTERS , w ) ; <S2SV_EndBug>
<S2SV_StartBug> err = nla_parse_nested ( sock , TIPC_NLA_SOCK_MAX , <S2SV_EndBug> <S2SV_StartBug> attrs [ TIPC_NLA_SOCK ] , <S2SV_EndBug> <S2SV_StartBug> tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( & tsk -> sk ) ; <S2SV_EndBug>
<S2SV_StartBug> truncate_pagecache ( inode , ioffset ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_dio ; <S2SV_EndBug> <S2SV_StartBug> out_dio : <S2SV_EndBug>
<S2SV_StartBug> name . name = buf ; <S2SV_EndBug> <S2SV_StartBug> err = fuse_copy_one ( cs , buf , outarg . namelen + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( int ) arg >= cdi -> capacity ) <S2SV_EndBug>
<S2SV_StartBug> nfca_poll -> rats_res_len = * data ++ ; <S2SV_EndBug> <S2SV_StartBug> nfcb_poll -> attrib_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> r1 . event = SNDRV_TIMER_EVENT_RESOLUTION ; <S2SV_EndBug>
<S2SV_StartBug> set_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> clear_bit ( HCI_UART_PROTO_READY , & hu -> flags ) ; <S2SV_EndBug> <S2SV_StartBug> return err ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( xd -> left_context , 0 , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ( pbi -> mt_yabove_row [ mb_row + 1 ] + 32 + mb_col * 16 ) , ( xd -> dst . y_buffer + 15 * recon_y_stride ) , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ( pbi -> mt_uabove_row [ mb_row + 1 ] + 16 + mb_col * 8 ) , ( xd -> dst . u_buffer + 7 * recon_uv_stride ) , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ( pbi -> mt_vabove_row [ mb_row + 1 ] + 16 + mb_col * 8 ) , ( xd -> dst . v_buffer + 7 * recon_uv_stride ) , 8 ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> result = PyObject_CallFunction ( ( PyObject * ) & PyType_Type , "s(O){sOss}" , <S2SV_EndBug> <S2SV_StartBug> type , base , "_fields" , fnames , "__module__" , "_ast3" ) ; <S2SV_EndBug>
<S2SV_StartBug> count = be32_to_cpu ( aclp -> acl_cnt ) ; <S2SV_EndBug>
<S2SV_StartBug> sh -> first_slice_in_pic_flag = get_bits1 ( gb ) ; <S2SV_EndBug>
<S2SV_StartBug> * outlen = utf8s_to_utf16s ( name , len , ( wchar_t * ) outname ) ; <S2SV_EndBug>
<S2SV_StartBug> else if ( rc == - ENODATA ) <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug>
<S2SV_StartBug> const char * path ) <S2SV_EndBug> <S2SV_StartBug> mntflags , mntdata , optional ) ; <S2SV_EndBug>
<S2SV_StartBug> static int tile_worker_hook ( void * arg1 , void * arg2 ) { <S2SV_EndBug> <S2SV_StartBug> TileWorkerData * const tile_data = ( TileWorkerData * ) arg1 ; <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile = ( TileInfo * ) arg2 ; <S2SV_EndBug> <S2SV_StartBug> int mi_row , mi_col ; <S2SV_EndBug> <S2SV_StartBug> decode_partition ( tile_data -> cm , & tile_data -> xd , tile , <S2SV_EndBug> <S2SV_StartBug> mi_row , mi_col , & tile_data -> bit_reader , BLOCK_64X64 ) ; <S2SV_EndBug>
<S2SV_StartBug> section -> intra_error -= frame -> intra_error ; <S2SV_EndBug> <S2SV_StartBug> section -> ssim_weighted_pred_err -= frame -> ssim_weighted_pred_err ; <S2SV_EndBug> <S2SV_StartBug> section -> pcnt_neutral -= frame -> pcnt_neutral ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( hostpath , path , 0 , MS_BIND , NULL ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> id = ipc_addid ( & shm_ids ( ns ) , & shp -> shm_perm , ns -> shm_ctlmni ) ; <S2SV_EndBug> <S2SV_StartBug> shp -> shm_cprid = task_tgid_vnr ( current ) ; <S2SV_EndBug>
<S2SV_StartBug> uint32_t vsize = avio_rb32 ( pb ) ; <S2SV_EndBug>
<S2SV_StartBug> status = decode_getacl ( xdr , rqstp , & res -> acl_len ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( bus >= 0 && bus < MAXBUSES ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( plen == 0 ) || ( offset + plen > length ) ) <S2SV_EndBug>
<S2SV_StartBug> mem_free ( gr . gr_ctx . value , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & min_stat , & gd -> checksum ) ; <S2SV_EndBug>
<S2SV_StartBug> int v , i ; <S2SV_EndBug> <S2SV_StartBug> ( s -> color_type == PNG_COLOR_TYPE_RGB && length != 6 ) ) <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache * <S2SV_EndBug> <S2SV_StartBug> ext4_xattr_create_cache ( char * name ) <S2SV_EndBug> <S2SV_StartBug> return mb_cache_create ( name , HASH_BUCKET_BITS ) ; <S2SV_EndBug>
<S2SV_StartBug> u64 rem ; <S2SV_EndBug> <S2SV_StartBug> sgi_clock_offset . tv_sec = tp -> tv_sec - div_long_long_rem ( nsec , NSEC_PER_SEC , & rem ) ; <S2SV_EndBug>
<S2SV_StartBug> p_fm_config_conx_hdlt hdl ; <S2SV_EndBug> <S2SV_StartBug> goto die_clean ; <S2SV_EndBug> <S2SV_StartBug> goto die_clean ; <S2SV_EndBug> <S2SV_StartBug> return commandList [ i ] . cmdPtr ( hdl , commandList [ i ] . mgr , ( argc - optind ) , & argv [ optind ] ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> die_clean : <S2SV_EndBug> <S2SV_StartBug> return res ; <S2SV_EndBug>
<S2SV_StartBug> next = ( next + 1 ) << sdp -> sd_sb . sb_bsize_shift ; <S2SV_EndBug> <S2SV_StartBug> calc_max_reserv ( ip , len , & max_bytes , & data_blocks , & ind_blocks ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( optlen == 4 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>optlen<S2SV_blank>!=<S2SV_blank>4" ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( optlen == 4 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>optlen<S2SV_blank>!=<S2SV_blank>4" ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( opt_len != 4 ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>OPTS<S2SV_blank>LEN<S2SV_blank>(extra?)<S2SV_blank>%d" , EXTRACT_16BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 16 ) { <S2SV_EndBug> <S2SV_StartBug> bp += sizeof ( uint32_t ) ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 16 ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len < sizeof ( uint32_t ) ) { <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( * bp , sizeof ( uint32_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( bp ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= sizeof ( uint32_t ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 8 ) { <S2SV_EndBug> <S2SV_StartBug> seq = EXTRACT_32BITS ( bp ) ; <S2SV_EndBug> <S2SV_StartBug> bp += sizeof ( uint32_t ) ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 12 ) { <S2SV_EndBug> <S2SV_StartBug> bp += 2 ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 12 ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 12 ) { <S2SV_EndBug> <S2SV_StartBug> bp += 2 ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 12 ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 4 + sizeof ( struct in_addr ) ) { <S2SV_EndBug> <S2SV_StartBug> opts_len -= 4 + sizeof ( struct in_addr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 4 + sizeof ( struct in6_addr ) ) { <S2SV_EndBug> <S2SV_StartBug> opts_len -= 4 + sizeof ( struct in6_addr ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>REDIRECT<S2SV_blank>%s" , nla_buf ) ) ; <S2SV_EndBug> <S2SV_StartBug> case PGM_OPT_PARITY_PRM : <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 8 ) { <S2SV_EndBug> <S2SV_StartBug> bp += 2 ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( opt_len != 8 ) { <S2SV_EndBug> <S2SV_StartBug> bp += 2 ; <S2SV_EndBug> <S2SV_StartBug> opts_len -= 8 ; <S2SV_EndBug>
<S2SV_StartBug> static void cancel_att_send_op ( struct att_send_op * op ) <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < sec -> size ; i += 4 ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < sec -> size ; i += 8 ) { <S2SV_EndBug>
<S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> jpc_tsfb_band_t bnds [ 64 ] ; <S2SV_EndBug>
<S2SV_StartBug> xen_netbk_idx_release ( netbk , pending_idx ) ; <S2SV_EndBug>
<S2SV_StartBug> g_clear_object ( & client -> proxy ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%u" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( jas_stream_copy ( out , tmpstream , box -> len - JP2_BOX_HDRLEN ( false ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> pbi -> common . error . error_code = VPX_CODEC_OK ; <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> # if HAVE_NEON <S2SV_EndBug> <S2SV_StartBug> return retcode ; <S2SV_EndBug>
<S2SV_StartBug> truncate_pagecache ( inode , ioffset ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_inode_block_unlocked_dio ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_dio ; <S2SV_EndBug> <S2SV_StartBug> out_dio : <S2SV_EndBug>
<S2SV_StartBug> ACPI_FUNCTION_TRACE ( NsTerminate ) ; <S2SV_EndBug> <S2SV_StartBug> ACPI_OPERAND_OBJECT * Next ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> outpos += <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> dm9000WriteReg ( DM9000_REG_MAR0 + i , hashTable [ i ] ) ; <S2SV_EndBug> <S2SV_StartBug> dm9000ReadReg ( DM9000_REG_MAR0 ) , dm9000ReadReg ( DM9000_REG_MAR1 ) , <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( args -> rmtblkno ) { <S2SV_EndBug>
<S2SV_StartBug> parse_field ( netdissect_options * ndo , const char * * pptr , int * len ) <S2SV_EndBug> <S2SV_StartBug> if ( * len <= 0 || ! pptr || ! * pptr ) <S2SV_EndBug> <S2SV_StartBug> while ( * pptr <= ( const char * ) ndo -> ndo_snapend && * len >= 0 && * * pptr ) { <S2SV_EndBug> <S2SV_StartBug> if ( * len < 0 || * pptr > ( const char * ) ndo -> ndo_snapend ) <S2SV_EndBug>
<S2SV_StartBug> size_t addr_incr = MIN ( CORE_MMU_USER_CODE_SIZE , <S2SV_EndBug> <S2SV_StartBug> if ( ADD_OVERFLOW ( uaddr , len , & a ) ) <S2SV_EndBug> <S2SV_StartBug> for ( a = uaddr ; a < ( uaddr + len ) ; a += addr_incr ) { <S2SV_EndBug>
<S2SV_StartBug> size_t data_size = <S2SV_EndBug> <S2SV_StartBug> entry . count ) ; <S2SV_EndBug>
<S2SV_StartBug> temp = EXTRACT_32BITS ( bp ) ; <S2SV_EndBug>
<S2SV_StartBug> static char * mongo_data_append ( char * start , const void * data , int len ) { <S2SV_EndBug>
<S2SV_StartBug> mmu_notifier_mm_init ( mm ) ; <S2SV_EndBug>
<S2SV_StartBug> * outlen = utf8s_to_utf16s ( name , len , ( wchar_t * ) outname ) ; <S2SV_EndBug>
<S2SV_StartBug> int max_intra_size_pct ; <S2SV_EndBug> <S2SV_StartBug> SvcInternal * const si = get_svc_internal ( svc_ctx ) ; <S2SV_EndBug> <S2SV_StartBug> res = parse_quantizer_values ( svc_ctx , si -> quantizers , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> res = parse_quantizer_values ( svc_ctx , si -> quantizers_keyframe , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( si -> quantizer_keyframe , si -> quantizer , sizeof ( si -> quantizer ) ) ; <S2SV_EndBug> <S2SV_StartBug> res = parse_options ( svc_ctx , si -> options ) ; <S2SV_EndBug> <S2SV_StartBug> res = vpx_codec_enc_init ( codec_ctx , iface , enc_cfg , VPX_CODEC_USE_PSNR ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_control ( codec_ctx , VP9E_SET_SVC , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> ldblk , sizeof ( * BImgBuff ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mk_security_check_url ( sr -> uri ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> char * ksep , * vsep , * val ; <S2SV_EndBug> <S2SV_StartBug> vsep = memchr ( var -> ptr , '&' , var -> end - var -> ptr ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( page , '/' ) ) <S2SV_EndBug>
<S2SV_StartBug> entries = kmalloc ( sizeof ( * entries ) * cmap -> len , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> const SvcInternal * const si = get_const_svc_internal ( svc_ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> int procfd = payload -> procfd ; <S2SV_EndBug> <S2SV_StartBug> uid_t new_uid ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0)" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1)" ) ; <S2SV_EndBug> <S2SV_StartBug> ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>final<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(2)" ) ; <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> "gainable<S2SV_blank>privileges." ) ; <S2SV_EndBug> <S2SV_StartBug> on_exec = options -> attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( lsm_set_label_at ( procfd , on_exec , init_ctx -> lsm_label ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> rexit ( - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> close ( procfd ) ; <S2SV_EndBug>
<S2SV_StartBug> int64_t vp9_pick_inter_mode ( VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> MB_PREDICTION_MODE this_mode , best_mode = ZEROMV ; <S2SV_EndBug> <S2SV_StartBug> MV_REFERENCE_FRAME ref_frame , best_ref_frame = LAST_FRAME ; <S2SV_EndBug> <S2SV_StartBug> int64_t best_rd = INT64_MAX ; <S2SV_EndBug> <S2SV_StartBug> int intra_cost_penalty = 20 * vp9_dc_quant ( cm -> base_qindex , cm -> y_dc_delta_q ) ; <S2SV_EndBug> <S2SV_StartBug> intra_cost_penalty , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_threshes = cpi -> rd_threshes [ segment_id ] [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> const int * const rd_thresh_freq_fact = cpi -> rd_thresh_freq_fact [ bsize ] ; <S2SV_EndBug> <S2SV_StartBug> INTERP_FILTER filter_ref = SWITCHABLE ; <S2SV_EndBug> <S2SV_StartBug> EIGHTTAP : cpi -> common . interp_filter ; <S2SV_EndBug> <S2SV_StartBug> mbmi -> segment_id = segment_id ; <S2SV_EndBug> <S2SV_StartBug> for ( ref_frame = LAST_FRAME ; ref_frame <= LAST_FRAME ; ++ ref_frame ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! ( cpi -> ref_frame_flags & flag_list [ ref_frame ] ) ) <S2SV_EndBug> <S2SV_StartBug> xd -> plane [ 0 ] . pre [ 0 ] = yv12_mb [ ref_frame ] [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> if ( ref_frame == LAST_FRAME ) { <S2SV_EndBug> <S2SV_StartBug> ( 1 << INTER_OFFSET ( this_mode ) ) ) <S2SV_EndBug> <S2SV_StartBug> int rate_mode = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rd < ( int64_t ) ( 1 << num_pels_log2_lookup [ bsize ] ) ) <S2SV_EndBug> <S2SV_StartBug> & frame_mv [ NEWMV ] [ ref_frame ] , & rate_mv ) ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_mv [ NEWMV ] [ ref_frame ] . as_int == INVALID_MV ) <S2SV_EndBug> <S2SV_StartBug> if ( this_mode != NEARESTMV ) <S2SV_EndBug> <S2SV_StartBug> mbmi -> mv [ 0 ] . as_int = frame_mv [ this_mode ] [ ref_frame ] . as_int ; <S2SV_EndBug> <S2SV_StartBug> ( ( mbmi -> mv [ 0 ] . as_mv . row & 0x07 ) != 0 || <S2SV_EndBug> <S2SV_StartBug> mbmi -> interp_filter = EIGHTTAP ; <S2SV_EndBug> <S2SV_StartBug> model_rd_for_sb_y ( cpi , bsize , x , xd , & pf_rate [ EIGHTTAP ] , <S2SV_EndBug> <S2SV_StartBug> & pf_dist [ EIGHTTAP ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_get_switchable_rate ( x ) + pf_rate [ EIGHTTAP ] , <S2SV_EndBug> <S2SV_StartBug> model_rd_for_sb_y ( cpi , bsize , x , xd , & rate , & dist ) ; <S2SV_EndBug> <S2SV_StartBug> rate += x -> inter_mode_cost [ mbmi -> mode_context [ ref_frame ] ] <S2SV_EndBug> <S2SV_StartBug> best_ref_frame = ref_frame ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mbmi -> ref_frame [ 0 ] = best_ref_frame ; <S2SV_EndBug> <S2SV_StartBug> if ( best_rd > inter_mode_thresh ) { <S2SV_EndBug> <S2SV_StartBug> vp9_predict_intra_block ( xd , 0 , b_width_log2 ( bsize ) , <S2SV_EndBug> <S2SV_StartBug> rate += intra_cost_penalty ; <S2SV_EndBug> <S2SV_StartBug> this_rd = RDCOST ( x -> rdmult , x -> rddiv , rate , dist ) ; <S2SV_EndBug> <S2SV_StartBug> if ( this_rd + intra_mode_cost < best_rd ) { <S2SV_EndBug>
<S2SV_StartBug> int r ; <S2SV_EndBug> <S2SV_StartBug> for ( ; ; ) { <S2SV_EndBug>
<S2SV_StartBug> timr -> it_overrun += ( int ) kc -> timer_forward ( timr , now ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( u4_start_code == EXTENSION_START_CODE || u4_start_code == USER_DATA_START_CODE ) <S2SV_EndBug> <S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , START_CODE_PREFIX_LEN ) != START_CODE_PREFIX ) <S2SV_EndBug>
<S2SV_StartBug> return rold -> umin_value == 0 && <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & p -> id , & x -> id , sizeof ( p -> id ) ) ; <S2SV_EndBug>
<S2SV_StartBug> ipv6_select_ident ( fh ) ; <S2SV_EndBug> <S2SV_StartBug> ipv6_select_ident ( fh ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strlen ( parv [ 1 ] ) > 400 ) <S2SV_EndBug>
<S2SV_StartBug> void ptrace_triggered ( struct perf_event * bp , int nmi , <S2SV_EndBug>
<S2SV_StartBug> if ( g_environ_getenv ( bwrap -> envp , "LD_LIBRARY_PATH" ) != NULL ) <S2SV_EndBug>
<S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> code = validate_as_request ( kdc_active_realm , request , * princ , <S2SV_EndBug>
<S2SV_StartBug> static void read_frame_reference_mode_probs ( VP9_COMMON * cm , vp9_reader * r ) { <S2SV_EndBug> <S2SV_StartBug> FRAME_CONTEXT * const fc = & cm -> fc ; <S2SV_EndBug>
<S2SV_StartBug> struct sockaddr_rc * sa = ( struct sockaddr_rc * ) addr ; <S2SV_EndBug> <S2SV_StartBug> int chan = sa -> rc_channel ; <S2SV_EndBug> <S2SV_StartBug> int err = 0 ; <S2SV_EndBug> <S2SV_StartBug> lock_sock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( chan && __rfcomm_get_listen_sock_by_addr ( chan , & sa -> rc_bdaddr ) ) { <S2SV_EndBug> <S2SV_StartBug> bacpy ( & rfcomm_pi ( sk ) -> src , & sa -> rc_bdaddr ) ; <S2SV_EndBug> <S2SV_StartBug> rfcomm_pi ( sk ) -> channel = chan ; <S2SV_EndBug>
<S2SV_StartBug> switch ( quantum_info -> depth ) <S2SV_EndBug>
<S2SV_StartBug> ! test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) <S2SV_EndBug>
<S2SV_StartBug> Py_INCREF ( Py_None ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( update_fragments ( ctx , data , data_sz , & res ) <= 0 ) <S2SV_EndBug> <S2SV_StartBug> if ( ! res && ctx -> defer_alloc ) <S2SV_EndBug> <S2SV_StartBug> if ( ! res && ! ctx -> decoder_init ) <S2SV_EndBug> <S2SV_StartBug> ctx -> yv12_frame_buffers . pbi [ 0 ] -> decrypt_cb = ctx -> decrypt_cb ; <S2SV_EndBug> <S2SV_StartBug> ctx -> yv12_frame_buffers . pbi [ 0 ] -> decrypt_state = ctx -> decrypt_state ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> client -> auth_user = client -> db -> auth_user ; <S2SV_EndBug>
<S2SV_StartBug> in_what_stride , UINT_MAX ) <S2SV_EndBug> <S2SV_StartBug> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; <S2SV_EndBug>
<S2SV_StartBug> revisionId = enc28j60ReadReg ( interface , ENC28J60_REG_EREVID ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ECOCON , 0x00 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAADR2 , interface -> macAddr . b [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAADR3 , interface -> macAddr . b [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAADR4 , interface -> macAddr . b [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAADR5 , interface -> macAddr . b [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAADR6 , interface -> macAddr . b [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXSTL , LSB ( ENC28J60_RX_BUFFER_START ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXSTH , MSB ( ENC28J60_RX_BUFFER_START ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXNDL , LSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXNDH , MSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTL , LSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXRDPTH , MSB ( ENC28J60_RX_BUFFER_STOP ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_ERXFCON , ERXFCON_UCEN | <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MACON3 , MACON3_PADCFG ( 1 ) | <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MACON3 , MACON3_PADCFG ( 1 ) | <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MACON4 , MACON4_DEFER ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAMXFLH , MSB ( ETH_MAX_FRAME_SIZE ) ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MABBIPG , 0x15 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MABBIPG , 0x12 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WriteReg ( interface , ENC28J60_REG_MAIPGL , 0x12 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WritePhyReg ( interface , ENC28J60_PHY_REG_PHCON1 , PHCON1_PDPXMD ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WritePhyReg ( interface , ENC28J60_PHY_REG_PHCON1 , 0x0000 ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WritePhyReg ( interface , ENC28J60_PHY_REG_PHCON2 , PHCON2_HDLDIS ) ; <S2SV_EndBug> <S2SV_StartBug> enc28j60WritePhyReg ( interface , ENC28J60_PHY_REG_PHLCON , <S2SV_EndBug> <S2SV_StartBug> enc28j60WritePhyReg ( interface , ENC28J60_PHY_REG_PHIE , <S2SV_EndBug> <S2SV_StartBug> enc28j60SetBit ( interface , ENC28J60_REG_ECON1 , ECON1_RXEN ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sum != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( * ( unsigned char * ) data > 1 ) <S2SV_EndBug>
<S2SV_StartBug> kvm_arch_flush_shadow_memslot ( kvm , slot ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_free ; <S2SV_EndBug> <S2SV_StartBug> if ( ! npages ) { <S2SV_EndBug> <S2SV_StartBug> out_free : <S2SV_EndBug>
<S2SV_StartBug> if ( ! asoc -> temp ) { <S2SV_EndBug>
<S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ldt_selector , VCPU_SREG_LDTR , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> fs , VCPU_SREG_FS , cpl , true ) ; <S2SV_EndBug> <S2SV_StartBug> ret = __load_segment_descriptor ( ctxt , tss -> gs , VCPU_SREG_GS , cpl , true ) ; <S2SV_EndBug>
<S2SV_StartBug> tlv = cp + i ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , optlen + 2 ) ) ; <S2SV_EndBug>
<S2SV_StartBug> av_assert0 ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 3 ] << 24 ) | ( buffer [ 2 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 0 ] << 24 ) | ( buffer [ 1 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 2 ] << 8 ) | buffer [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( bps * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> _Py_IDENTIFIER ( _fields ) ; <S2SV_EndBug> <S2SV_StartBug> fields = _PyObject_GetAttrId ( ( PyObject * ) Py_TYPE ( self ) , & PyId__fields ) ; <S2SV_EndBug> <S2SV_StartBug> if ( PyTuple_GET_SIZE ( args ) > 0 ) { <S2SV_EndBug> <S2SV_StartBug> PyErr_Format ( PyExc_TypeError , "%.400s<S2SV_blank>constructor<S2SV_blank>takes<S2SV_blank>%s" <S2SV_EndBug> <S2SV_StartBug> Py_TYPE ( self ) -> tp_name , <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void encode_frame ( vpx_codec_ctx_t * codec , <S2SV_EndBug> <S2SV_StartBug> VpxVideoWriter * writer ) { <S2SV_EndBug> <S2SV_StartBug> while ( ( pkt = vpx_codec_get_cx_data ( codec , & iter ) ) != NULL ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 3 ] << 24 ) | ( buffer [ 2 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 1 ] << 8 ) | ( buffer [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug> <S2SV_StartBug> value = ( unsigned int ) ( ( buffer [ 0 ] << 24 ) | ( buffer [ 1 ] << 16 ) | <S2SV_EndBug> <S2SV_StartBug> ( buffer [ 2 ] << 8 ) | buffer [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> quantum . unsigned_value = ( value & 0xffffffff ) ; <S2SV_EndBug>
<S2SV_StartBug> rp [ 0 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> res -> nlimbs = ( msize == 1 && mod -> d [ 0 ] == 1 ) ? 0 : 1 ; <S2SV_EndBug>
<S2SV_StartBug> free ( name ) ; <S2SV_EndBug>
<S2SV_StartBug> sizeof ( * pList ) + ( 2 * pList -> nExpr - 1 ) * sizeof ( pList -> a [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> mc -> id = idr_alloc ( & multicast_idr , mc , 0 , 0 , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_cond_prob_diff_update ( vp9_writer * w , vp9_prob * oldp , <S2SV_EndBug> <S2SV_StartBug> const vp9_prob upd = DIFF_UPDATE_PROB ; <S2SV_EndBug> <S2SV_StartBug> vp9_prob newp = get_binary_prob ( ct [ 0 ] , ct [ 1 ] ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , 1 , upd ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write ( w , 0 , upd ) ; <S2SV_EndBug>
<S2SV_StartBug> static u32 ip6_proxy_idents_hashrnd __read_mostly ; <S2SV_EndBug> <S2SV_StartBug> net_get_random_once ( & ip6_proxy_idents_hashrnd , <S2SV_EndBug> <S2SV_StartBug> id = __ipv6_select_ident ( net , ip6_proxy_idents_hashrnd , <S2SV_EndBug>
<S2SV_StartBug> static int mpeg4_decode_profile_level ( MpegEncContext * s , GetBitContext * gb ) <S2SV_EndBug> <S2SV_StartBug> s -> avctx -> level = get_bits ( gb , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { <S2SV_EndBug> <S2SV_StartBug> s -> avctx -> level = 0 ; <S2SV_EndBug>
<S2SV_StartBug> # undef _ <S2SV_EndBug>
<S2SV_StartBug> return LAST_FRAME ; <S2SV_EndBug> <S2SV_StartBug> return GOLDEN_FRAME ; <S2SV_EndBug>
<S2SV_StartBug> zend_throw_error ( exception_ce , message ) ; <S2SV_EndBug>
<S2SV_StartBug> ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) <S2SV_EndBug>
<S2SV_StartBug> # line 496 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 861 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 558 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 855 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 607 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 708 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> if ( incomplete_class ) { <S2SV_EndBug> <S2SV_StartBug> # line 785 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 699 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> return object_common2 ( UNSERIALIZE_PASSTHRU , <S2SV_EndBug> <S2SV_StartBug> object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ) ; <S2SV_EndBug> <S2SV_StartBug> # line 819 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 678 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 861 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 643 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 917 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 610 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 971 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 600 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1069 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 585 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1143 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 558 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1197 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 551 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1212 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 544 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1222 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 521 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1268 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 500 "ext/standard/var_unserializer.re" <S2SV_EndBug> <S2SV_StartBug> # line 1312 "ext/standard/var_unserializer.c" <S2SV_EndBug> <S2SV_StartBug> # line 863 "ext/standard/var_unserializer.re" <S2SV_EndBug>
<S2SV_StartBug> char buf [ 32 ] ; <S2SV_EndBug> <S2SV_StartBug> char buf [ 100 ] ; <S2SV_EndBug>
<S2SV_StartBug> ENSURE_BITS ( 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strchr ( "!#$%&\'*+-.^_`|~" , c ) ) <S2SV_EndBug>
<S2SV_StartBug> bh -> b_size = map . m_len << inode -> i_blkbits ; <S2SV_EndBug>
<S2SV_StartBug> gint64 offset ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_cosine_rec_hdr ( & wth -> phdr , line , err , err_info ) ; <S2SV_EndBug> <S2SV_StartBug> return parse_cosine_hex_dump ( wth -> fh , & wth -> phdr , pkt_len , <S2SV_EndBug> <S2SV_StartBug> wth -> frame_buffer , err , err_info ) ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ DN_BUF_LEN ] ; <S2SV_EndBug> <S2SV_StartBug> X509_NAME_oneline_ex ( X509_get_subject_name ( cert ) , buf , & bufsize , <S2SV_EndBug> <S2SV_StartBug> md -> subject_dn = strdup ( buf ) ; <S2SV_EndBug> <S2SV_StartBug> X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ) , buf , & bufsize , <S2SV_EndBug> <S2SV_StartBug> md -> issuer_dn = strdup ( buf ) ; <S2SV_EndBug>
<S2SV_StartBug> align_get_bits ( gb ) ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> ret = cdc_ncm_bind_common ( dev , intf , CDC_NCM_DATA_ALTSETTING_NCM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> usbnet_link_change ( dev , 0 , 0 ) ; <S2SV_EndBug>

<S2SV_StartBug> Total += vp8_mse16x16 ( src + j , source -> y_stride , dst + j , dest -> y_stride , & sse ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( event -> type == et_char ) { <S2SV_EndBug>
<S2SV_StartBug> buflen = MIN ( buflen , buf_size ) ; <S2SV_EndBug>
<S2SV_StartBug> option = stok ( option , "<S2SV_blank>=\\t," , & ovalue ) ; <S2SV_EndBug>
<S2SV_StartBug> stripsperplane = ( ( td -> td_imagelength + rowsperstrip - 1 ) / rowsperstrip ) ; <S2SV_EndBug>
<S2SV_StartBug> int hstartcol ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( buf = jas_alloc2 ( bufsize , sizeof ( jpc_fix_t ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> hstartcol = ( numrows + 1 - parity ) >> 1 ; <S2SV_EndBug> <S2SV_StartBug> m = numrows - hstartcol ; <S2SV_EndBug> <S2SV_StartBug> dstptr = & a [ hstartcol * stride ] ; <S2SV_EndBug>
<S2SV_StartBug> int x , y , i ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ) ) <S2SV_EndBug>
<S2SV_StartBug> u_int16_t port ; <S2SV_EndBug> <S2SV_StartBug> unsigned int ret ; <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , "all<S2SV_blank>ports<S2SV_blank>in<S2SV_blank>use" ) ; <S2SV_EndBug> <S2SV_StartBug> ret = nf_nat_mangle_tcp_packet ( skb , exp -> master , ctinfo , <S2SV_EndBug> <S2SV_StartBug> nf_ct_helper_log ( skb , exp -> master , "cannot<S2SV_blank>mangle<S2SV_blank>packet" ) ; <S2SV_EndBug>
<S2SV_StartBug> args -> count = ntohl ( * p ++ ) ; <S2SV_EndBug> <S2SV_StartBug> return xdr_argsize_check ( rqstp , p ) ; <S2SV_EndBug>
<S2SV_StartBug> int nmi , struct perf_sample_data * data , <S2SV_EndBug> <S2SV_StartBug> if ( __perf_event_overflow ( event , nmi , throttle , <S2SV_EndBug>
<S2SV_StartBug> static INLINE void write_buffer_4x4 ( int16_t * output , __m128i * res ) { <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 0 * 8 ) , out01 ) ; <S2SV_EndBug> <S2SV_StartBug> _mm_store_si128 ( ( __m128i * ) ( output + 1 * 8 ) , out23 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( image -> numcomps < 4 ) return ; <S2SV_EndBug>
<S2SV_StartBug> trust_data . dwUIChoice = WTD_UI_ALL ; <S2SV_EndBug> <S2SV_StartBug> return r ; <S2SV_EndBug>
<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug>
<S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> sc -> drefs = av_mallocz ( entries * sizeof ( * sc -> drefs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ( void ) ReadBlobString ( image , text ) ; <S2SV_EndBug>
<S2SV_StartBug> struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; <S2SV_EndBug> <S2SV_StartBug> write_lock ( & cluster -> cl_nodes_lock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ret ) <S2SV_EndBug>
<S2SV_StartBug> cm -> fc . nmvc = default_nmv_context ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! * passwd || ! * user -> passwd ) <S2SV_EndBug>
<S2SV_StartBug> quit ( 1 , "Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin<S2SV_blank>in<S2SV_blank>parse_notify" ) ; <S2SV_EndBug>
<S2SV_StartBug> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_EndBug> <S2SV_StartBug> if ( ses -> server -> sign ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> uint8_t mus_event [ ] = { 0 , 0 , 0 , 0 } ; <S2SV_EndBug> <S2SV_StartBug> setup_ret = _WM_SetupMidiEvent ( mus_mdi , ( uint8_t * ) mus_event , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug>
<S2SV_StartBug> struct address_space * mapping = page -> mapping ; <S2SV_EndBug> <S2SV_StartBug> struct inode * inode = mapping -> host ; <S2SV_EndBug> <S2SV_StartBug> SetPageUptodate ( page ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( count < DJREPORT_SHORT_LENGTH - 2 ) <S2SV_EndBug>
<S2SV_StartBug> if ( len != set_arglen [ SET_CMDID ( cmd ) ] ) { <S2SV_EndBug>
<S2SV_StartBug> while ( ( type = gettoken_query ( state , & val , & lenval , & strval , & flag ) ) != END ) <S2SV_EndBug>
<S2SV_StartBug> char * tmp ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! php_var_unserialize ( & intern -> array , & p , s + buf_len , & var_hash TSRMLS_CC ) ) { <S2SV_EndBug>
<S2SV_StartBug> assert ( idx >= 0 && idx <= PCI_BARMAX ) ; <S2SV_EndBug> <S2SV_StartBug> case PCIBAR_MEM64 : <S2SV_EndBug> <S2SV_StartBug> printf ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n" , __func__ , type ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( 0 ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( idx + 1 <= PCI_BARMAX ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( t -> pool -> shutdown ) { <S2SV_EndBug>
<S2SV_StartBug> ret = usbip_recv ( ud -> tcp_socket , urb -> transfer_buffer , size ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> ret = ext4_convert_unwritten_extents_endio ( handle , inode , <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> if ( perf_event_overflow ( event , 0 , data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( ! eof ) { <S2SV_EndBug>
<S2SV_StartBug> retval = generic_gss_oid_decompose ( minor_status , <S2SV_EndBug>
<S2SV_StartBug> cur_token = * indx ; <S2SV_EndBug> <S2SV_StartBug> res = r ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> av_freep ( & h -> DPB ) ; <S2SV_EndBug>
<S2SV_StartBug> return __load_segment_descriptor ( ctxt , selector , seg , cpl , false ) ; <S2SV_EndBug>
<S2SV_StartBug> mark_object ( & c -> object , NULL , NULL , data ) ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( fl6 , np -> opt , & final ) ; <S2SV_EndBug> <S2SV_StartBug> dst = __inet6_csk_dst_check ( sk , np -> dst_cookie ) ; <S2SV_EndBug>
<S2SV_StartBug> static struct desc_struct * get_desc ( unsigned short sel ) <S2SV_EndBug> <S2SV_StartBug> struct desc_struct * desc = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ldt && sel < ldt -> nr_entries ) <S2SV_EndBug> <S2SV_StartBug> desc = & ldt -> entries [ sel ] ; <S2SV_EndBug> <S2SV_StartBug> return desc ; <S2SV_EndBug> <S2SV_StartBug> return NULL ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> else if ( i > pos && i + insn -> off + 1 < pos ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> return 1 ; <S2SV_EndBug>
<S2SV_StartBug> err = scm_send ( sock , msg , siocb -> scm ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( peer != NULL ) && ( type & EVP_PKT_SIGN ) ) <S2SV_EndBug>
<S2SV_StartBug> bucket = apr_bucket_eos_create ( r -> connection -> bucket_alloc ) ; <S2SV_EndBug>
<S2SV_StartBug> case RAPTOR_OPTION_RELATIVE_URIS : <S2SV_EndBug>
<S2SV_StartBug> if ( nlmsg_len ( nlh ) < sizeof ( struct nfgenmsg ) || <S2SV_EndBug>
<S2SV_StartBug> separator = strchr ( connection -> buffer , '=' ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( c -> nreslevels < s -> reduction_factor ) <S2SV_EndBug> <S2SV_StartBug> c -> nreslevels2decode = 1 ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_segmentation ( VP9_COMP * cpi , <S2SV_EndBug> <S2SV_StartBug> struct segmentation * seg = & cpi -> common . seg ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , seg -> update_map ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_choose_segmap_coding_method ( cpi ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , update ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , seg -> temporal_update ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , update ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , seg -> update_data ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , seg -> abs_delta ) ; <S2SV_EndBug> <S2SV_StartBug> const int active = vp9_segfeature_active ( seg , i , j ) ; <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_get_segdata ( seg , i , j ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_wb_write_bit ( wb , data < 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> void exit_io_context ( void ) <S2SV_EndBug> <S2SV_StartBug> task_lock ( current ) ; <S2SV_EndBug> <S2SV_StartBug> ioc = current -> io_context ; <S2SV_EndBug> <S2SV_StartBug> current -> io_context = NULL ; <S2SV_EndBug> <S2SV_StartBug> task_unlock ( current ) ; <S2SV_EndBug>
<S2SV_StartBug> run_cmd ( tty_fd , xfr_cmd , fname , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & t_above , x -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left , x -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_above_s , & t_above , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & t_left_s , & t_left , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ta_b , ta_s , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( tl_b , tl_s , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( ta , ta_b , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( tl , tl_b , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( ctxt -> mode == X86EMUL_MODE_PROT32 ) && ( efer & EFER_LMA ) <S2SV_EndBug> <S2SV_StartBug> switch ( ctxt -> mode ) { <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> cs_sel = ( u16 ) msr_data ; <S2SV_EndBug> <S2SV_StartBug> ss_sel &= ~ SELECTOR_RPL_MASK ; <S2SV_EndBug> <S2SV_StartBug> if ( ctxt -> mode == X86EMUL_MODE_PROT64 || ( efer & EFER_LMA ) ) { <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = msr_data ; <S2SV_EndBug> <S2SV_StartBug> * reg_write ( ctxt , VCPU_REGS_RSP ) = msr_data ; <S2SV_EndBug>
<S2SV_StartBug> return NULL ; <S2SV_EndBug>
<S2SV_StartBug> sr -> bytes_to_send = finfo . size ; <S2SV_EndBug>
<S2SV_StartBug> struct strbuf * path , <S2SV_EndBug> <S2SV_StartBug> const char * last , <S2SV_EndBug>
<S2SV_StartBug> release_sock ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> flen = udf_get_filename ( dir -> i_sb , nameptr , fname , lfi ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 16 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( q + 16 , 0 , 2 * sizeof ( q [ 0 ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%u" , o_row_count , o_column_count , o_element_count ) == 3 ) { <S2SV_EndBug>
<S2SV_StartBug> const char command5 [ ] = { 0x05 , 0x00 } ; <S2SV_EndBug> <S2SV_StartBug> close ( s ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> buf = g_malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> show_object ( obj , NULL , name , data ) ; <S2SV_EndBug> <S2SV_StartBug> NULL , path , data ) ; <S2SV_EndBug>
<S2SV_StartBug> tf = ( ( c == LUA_SIGNATURE [ 0 ] ) ? luaU_undump : luaY_parser ) ( L , p -> z , <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ( void ) mvcost ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t * outbuf ; <S2SV_EndBug> <S2SV_StartBug> command = buf [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rc = scsi_disk_emulate_command ( r , outbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( a -> name == MAPI_BODY_HTML ) <S2SV_EndBug> <S2SV_StartBug> else if ( a -> name == MAPI_RTF_COMPRESSED ) <S2SV_EndBug>
<S2SV_StartBug> int tlen , lmp_obj_len , lmp_obj_ctype , obj_tlen ; <S2SV_EndBug> <S2SV_StartBug> int offset , subobj_type , subobj_len , total_subobj_len ; <S2SV_EndBug> <S2SV_StartBug> tptr += sizeof ( const struct lmp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> if ( lmp_obj_len % 4 || lmp_obj_len < 4 ) <S2SV_EndBug> <S2SV_StartBug> lmp_obj_len ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Control<S2SV_blank>Channel<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Link<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Link<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_UNMD_RMT : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Message<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_2 : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Node<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hello<S2SV_blank>Interval:<S2SV_blank>%u\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hello<S2SV_blank>Dead<S2SV_blank>Interval:<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Tx<S2SV_blank>Seq:<S2SV_blank>%u,<S2SV_blank>Rx<S2SV_blank>Seq:<S2SV_blank>%u" , <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , <S2SV_EndBug> <S2SV_StartBug> EXTRACT_16BITS ( obj_tptr ) >> 8 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> ipaddr_string ( ndo , obj_tptr + 4 ) , <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_IPV6 : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , <S2SV_EndBug> <S2SV_StartBug> EXTRACT_16BITS ( obj_tptr ) >> 8 ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> subobj_type = EXTRACT_16BITS ( obj_tptr + offset ) >> 8 ; <S2SV_EndBug> <S2SV_StartBug> subobj_len = EXTRACT_16BITS ( obj_tptr + offset ) & 0x00FF ; <S2SV_EndBug> <S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 4 ) ; <S2SV_EndBug> <S2SV_StartBug> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 8 ) ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> case LMP_OBJ_VERIFY_BEGIN : <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>%s" , <S2SV_EndBug> <S2SV_StartBug> case LMP_OBJ_VERIFY_BEGIN_ACK : <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_1 : <S2SV_EndBug> <S2SV_StartBug> case LMP_OBJ_VERIFY_ID : <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_1 : <S2SV_EndBug> <S2SV_StartBug> case LMP_OBJ_CHANNEL_STATUS : <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_IPV4 : <S2SV_EndBug> <S2SV_StartBug> case LMP_OBJ_CHANNEL_STATUS_REQ : <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_IPV4 : <S2SV_EndBug> <S2SV_StartBug> bittok2str ( lmp_obj_begin_verify_error_values , <S2SV_EndBug> <S2SV_StartBug> EXTRACT_32BITS ( obj_tptr ) ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> EXTRACT_16BITS ( obj_tptr ) & 0x00FF ) ) ; <S2SV_EndBug> <S2SV_StartBug> case LMP_CTYPE_SERVICE_CONFIG_CPSA : <S2SV_EndBug> <S2SV_StartBug> link_type = EXTRACT_16BITS ( obj_tptr ) >> 8 ; <S2SV_EndBug> <S2SV_StartBug> bittok2str ( lmp_obj_service_config_cpsa_tp_flag_values , <S2SV_EndBug> <S2SV_StartBug> EXTRACT_16BITS ( obj_tptr + 2 ) >> 8 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> PHP_SHA512Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_SHA256Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_SHA1Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> PHP_MD5Init ( & context ) ; <S2SV_EndBug> <S2SV_StartBug> * signature_len = phar_hex_str ( ( const char * ) digest , sizeof ( digest ) , signature ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mct_u232_private * priv ; <S2SV_EndBug> <S2SV_StartBug> priv -> read_urb = port -> serial -> port [ 1 ] -> interrupt_in_urb ; <S2SV_EndBug>
<S2SV_StartBug> int is_rf64 = ! strncmp ( fourcc , "RF64" , 4 ) , got_ds64 = 0 ; <S2SV_EndBug> <S2SV_StartBug> int supported = TRUE , format ; <S2SV_EndBug>
<S2SV_StartBug> rq = blk_mq_tag_to_rq ( tags , off + bit ) ; <S2SV_EndBug>
<S2SV_StartBug> pStart = sqlite3Malloc ( sz * cnt ) ; <S2SV_EndBug>
<S2SV_StartBug> rc = - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( arg , & ifr , sizeof ( ifr ) ) ) <S2SV_EndBug> <S2SV_StartBug> ipxitf_put ( ipxif ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( dst_reg -> smin_value < 0 ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>MTU<S2SV_blank>size<S2SV_blank>%u" , EXTRACT_16BITS ( tptr + 4 ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> int vert_causal_ctx_csty_symbol = codsty -> cblk_style & JPEG2000_CBLK_VSC ; <S2SV_EndBug>
<S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug> <S2SV_StartBug> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( mobj ) <S2SV_EndBug> <S2SV_StartBug> memset ( mobj_get_va ( mobj , 0 ) , 0 , size ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( text [ 1 ] == EOF ) <S2SV_EndBug> <S2SV_StartBug> if ( text [ 2 ] == EOF ) <S2SV_EndBug> <S2SV_StartBug> if ( text [ 3 ] == EOF ) <S2SV_EndBug>
<S2SV_StartBug> * low = p - reg -> dmax ; <S2SV_EndBug> <S2SV_StartBug> ( pprev ? pprev : str ) , * low ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! new_idmap_permitted ( ns , cap_setid , & new_map ) ) <S2SV_EndBug>
<S2SV_StartBug> channel = amqp_d16 ( amqp_offset ( raw_frame , 1 ) ) ; <S2SV_EndBug> <S2SV_StartBug> state -> target_size = <S2SV_EndBug> <S2SV_StartBug> amqp_d32 ( amqp_offset ( raw_frame , 3 ) ) + HEADER_SIZE + FOOTER_SIZE ; <S2SV_EndBug>
<S2SV_StartBug> if ( file -> name ) XFREE ( file -> name ) ; <S2SV_EndBug> <S2SV_StartBug> file -> len = a -> values [ 0 ] . len ; <S2SV_EndBug> <S2SV_StartBug> if ( file -> mime_type ) XFREE ( file -> mime_type ) ; <S2SV_EndBug> <S2SV_StartBug> if ( file -> content_id ) XFREE ( file -> content_id ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( istreq ( str , "all" ) ) { <S2SV_EndBug>
<S2SV_StartBug> ihevcd_cxa_create_op_t * ps_create_op ; <S2SV_EndBug> <S2SV_StartBug> ps_create_op = ( ihevcd_cxa_create_op_t * ) pv_api_op ; <S2SV_EndBug> <S2SV_StartBug> ret = ihevcd_allocate_static_bufs ( & ps_codec_obj , pv_api_ip , pv_api_op ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( IV_FAIL == ret ) && ( NULL != ps_codec_obj ) ) <S2SV_EndBug> <S2SV_StartBug> ihevcd_free_static_bufs ( ps_codec_obj ) ; <S2SV_EndBug>
<S2SV_StartBug> int pkt_len ; <S2SV_EndBug> <S2SV_StartBug> char line [ NETSCREEN_LINE_LENGTH ] ; <S2SV_EndBug> <S2SV_StartBug> pkt_len = parse_netscreen_rec_hdr ( phdr , line , cap_int , & cap_dir , <S2SV_EndBug> <S2SV_StartBug> if ( pkt_len == - 1 ) <S2SV_EndBug>
<S2SV_StartBug> alloc_limit_assert ( "checked_xcalloc" , ( num * size ) ) ; <S2SV_EndBug>
<S2SV_StartBug> bufsize = file -> size ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> 1 , 0 , regs , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! new_idmap_permitted ( file , ns , cap_setid , & new_map ) ) <S2SV_EndBug> <S2SV_StartBug> if ( new_map . nr_extents <= UID_GID_MAP_MAX_BASE_EXTENTS ) { <S2SV_EndBug>
<S2SV_StartBug> int pixel_ptr = 0 ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug> <S2SV_StartBug> block_ptr = row_ptr + pixel_ptr ; <S2SV_EndBug> <S2SV_StartBug> ADVANCE_BLOCK ( ) ; <S2SV_EndBug>
<S2SV_StartBug> * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> iw_set_error ( rctx -> ctx , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; <S2SV_EndBug>
<S2SV_StartBug> int err = 0 ; <S2SV_EndBug>
<S2SV_StartBug> put_io_context ( ioc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) <S2SV_EndBug> <S2SV_StartBug> if ( ! ps_dec -> u1_first_slice_in_stream ) <S2SV_EndBug>
<S2SV_StartBug> static inline struct enamemem * <S2SV_EndBug> <S2SV_StartBug> struct enamemem * tp ; <S2SV_EndBug> <S2SV_StartBug> while ( tp -> e_nxt ) <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr1 == j && <S2SV_EndBug> <S2SV_StartBug> tp -> e_addr2 == k && <S2SV_EndBug> <S2SV_StartBug> memcmp ( ( const char * ) bs , ( const char * ) ( tp -> e_bs ) , nlen ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> tp = tp -> e_nxt ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_bs == NULL ) <S2SV_EndBug> <S2SV_StartBug> memcpy ( tp -> e_bs , bs , nlen ) ; <S2SV_EndBug> <S2SV_StartBug> tp -> e_nxt = ( struct enamemem * ) calloc ( 1 , sizeof ( * tp ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( tp -> e_nxt == NULL ) <S2SV_EndBug>
<S2SV_StartBug> void vp9_iht4x4_add ( TX_TYPE tx_type , const int16_t * input , uint8_t * dest , <S2SV_EndBug>
<S2SV_StartBug> if ( length > 0 ) { <S2SV_EndBug> <S2SV_StartBug> buffer = malloc ( ( uint64_t ) length + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> static int mptctl_do_reset ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> struct mpt_ioctl_diag_reset krinfo ; <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> size_t off = 0 , len = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( base_len < off + len || res_sz < len ) <S2SV_EndBug>
<S2SV_StartBug> char * method = manager -> method ; <S2SV_EndBug> <S2SV_StartBug> build_config ( working_dir , server ) ; <S2SV_EndBug> <S2SV_StartBug> "%s<S2SV_blank>-m<S2SV_blank>%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%s.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%s.conf" , <S2SV_EndBug> <S2SV_StartBug> executable , method , manager -> manager_address , <S2SV_EndBug> <S2SV_StartBug> working_dir , server -> port , working_dir , server -> port ) ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( io_data -> read && ret > 0 ) { <S2SV_EndBug> <S2SV_StartBug> ! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) <S2SV_EndBug> <S2SV_StartBug> usb_ep_free_request ( io_data -> ep , io_data -> req ) ; <S2SV_EndBug>
<S2SV_StartBug> dev -> hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; <S2SV_EndBug> <S2SV_StartBug> dev -> features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; <S2SV_EndBug>
<S2SV_StartBug> ctx -> clockid = clockid ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) <S2SV_EndBug> <S2SV_StartBug> if ( entry == ( kadm5_principal_ent_t ) NULL ) <S2SV_EndBug>
<S2SV_StartBug> COAP_SET_BLOCK_M ( value , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> else <S2SV_EndBug> <S2SV_StartBug> COAP_SET_BLOCK_M ( value , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( '%' == * ptr ) { <S2SV_EndBug>
<S2SV_StartBug> unlock_mount_hash ( ) ; <S2SV_EndBug>
<S2SV_StartBug> zap = key -> payload . data [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> rcu_assign_keypointer ( key , upayload ) ; <S2SV_EndBug>
<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> if ( code == 0 || code == KRB5_PREAUTH_FAILED ) { <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & ucontrol -> value , ue -> elem_data , ue -> elem_data_size ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> return touch_file ( path , false , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> return SET_IVD_FATAL_ERROR ( e_error ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! offset ) { <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , service_name ; <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> buffer = zend_string_alloc ( len , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> sbi -> s_mb_cache = ext4_xattr_create_cache ( sb -> s_id ) ; <S2SV_EndBug> <S2SV_StartBug> failed_mount_wq : <S2SV_EndBug>
<S2SV_StartBug> pack -> hdr . ver = ver ; <S2SV_EndBug>
<S2SV_StartBug> error = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_MOD_NAME ) || <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) <S2SV_EndBug> <S2SV_StartBug> if ( ( mask & ~ ALL_PRINC_MASK ) ) <S2SV_EndBug> <S2SV_StartBug> return KADM5_BAD_MASK ; <S2SV_EndBug>
<S2SV_StartBug> namespace_lock ( ) ; <S2SV_EndBug>
<S2SV_StartBug> return - EINVAL ; <S2SV_EndBug>
<S2SV_StartBug> status = HuffmanDecodeImage ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> mptctl_hp_hostinfo ( unsigned long arg , unsigned int data_size ) <S2SV_EndBug> <S2SV_StartBug> MPT_ADAPTER * ioc ; <S2SV_EndBug> <S2SV_StartBug> ConfigPageHeader_t hdr ; <S2SV_EndBug> <S2SV_StartBug> if ( ( ( iocnum = mpt_verify_adapter ( karg . hdr . iocnum , & ioc ) ) < 0 ) || <S2SV_EndBug>
<S2SV_StartBug> if ( COMPAT_USE_64BIT_TIME ) <S2SV_EndBug> <S2SV_StartBug> if ( get_compat_timespec ( & ktspec , timeout ) ) <S2SV_EndBug> <S2SV_StartBug> if ( datagrams > 0 && put_compat_timespec ( & ktspec , timeout ) ) <S2SV_EndBug>
<S2SV_StartBug> SCV_NB10_HEADER nb10_hdr ; <S2SV_EndBug> <S2SV_StartBug> "%x%x" , nb10_hdr . timestamp , nb10_hdr . age ) ; <S2SV_EndBug> <S2SV_StartBug> nb10_hdr . file_name , sizeof ( res -> file_name ) - 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> bpm -> family = AF_BRIDGE ; <S2SV_EndBug>
<S2SV_StartBug> 1 , 0 , regs , regs -> cp0_badvaddr ) ; <S2SV_EndBug>
<S2SV_StartBug> b = BCON_NEW ( "my_dbref" , <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( pbi , 0 , sizeof ( VP8D_COMP ) ) ; <S2SV_EndBug> <S2SV_StartBug> pbi -> ec_enabled = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( stat ( "/etc/skel/.zshrc" , & s ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> copy_file ( "/etc/skel/.zshrc" , fname , u , g , 0644 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( stat ( "/etc/skel/.cshrc" , & s ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> copy_file ( "/etc/skel/.cshrc" , fname , u , g , 0644 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( stat ( "/etc/skel/.bashrc" , & s ) == 0 ) { <S2SV_EndBug> <S2SV_StartBug> copy_file ( "/etc/skel/.bashrc" , fname , u , g , 0644 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( S_ISDIR ( fmode ) && S_ISLNK ( sb . st_mode ) && stat ( fn , & sb ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> asdl_seq * body ; <S2SV_EndBug> <S2SV_StartBug> * out = Module ( body , arena ) ; <S2SV_EndBug> <S2SV_StartBug> isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Interactive_type ) ; <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Interactive" ) ; <S2SV_EndBug> <S2SV_StartBug> PyErr_Format ( PyExc_TypeError , "Interactive<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" , tmp -> ob_type -> tp_name ) ; <S2SV_EndBug> <S2SV_StartBug> body = _Py_asdl_seq_new ( len , arena ) ; <S2SV_EndBug> <S2SV_StartBug> if ( body == NULL ) goto failed ; <S2SV_EndBug> <S2SV_StartBug> stmt_ty val ; <S2SV_EndBug> <S2SV_StartBug> res = obj2ast_stmt ( PyList_GET_ITEM ( tmp , i ) , & val , arena ) ; <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_RuntimeError , "Interactive<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>changed<S2SV_blank>size<S2SV_blank>during<S2SV_blank>iteration" ) ; <S2SV_EndBug> <S2SV_StartBug> asdl_seq_SET ( body , i , val ) ; <S2SV_EndBug> <S2SV_StartBug> * out = Interactive ( body , arena ) ; <S2SV_EndBug> <S2SV_StartBug> isinstance = PyObject_IsInstance ( obj , ( PyObject * ) Expression_type ) ; <S2SV_EndBug> <S2SV_StartBug> expr_ty body ; <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_TypeError , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Expression" ) ; <S2SV_EndBug> <S2SV_StartBug> PyErr_Format ( PyExc_TypeError , "Suite<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" , tmp -> ob_type -> tp_name ) ; <S2SV_EndBug> <S2SV_StartBug> PyErr_SetString ( PyExc_RuntimeError , "Suite<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>changed<S2SV_blank>size<S2SV_blank>during<S2SV_blank>iteration" ) ; <S2SV_EndBug>
<S2SV_StartBug> [ DISCE_PROBE ] = sas_probe_devices , <S2SV_EndBug> <S2SV_StartBug> [ DISCE_RESUME ] = sas_resume_devices , <S2SV_EndBug>
<S2SV_StartBug> it = item_get ( key , nkey , c , DO_UPDATE ) ; <S2SV_EndBug>
<S2SV_StartBug> s_cmd -> command += ec -> cmd_offset ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( arg , s_cmd , sizeof ( * s_cmd ) + u_cmd . insize ) ) <S2SV_EndBug>
<S2SV_StartBug> proto = EXTRACT_16BITS ( & p [ 2 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( * ( p + 1 ) == 0x81 || <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( atomic_read ( & current -> mm -> mm_users ) > 1 ) <S2SV_EndBug>
<S2SV_StartBug> dev = btrfs_find_device ( fs_info -> fs_devices , devid , NULL , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( i = 0 ; i < len ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = 0xc0 | ( ( szLine [ i ] >> 6 ) & 0x3 ) ; <S2SV_EndBug> <S2SV_StartBug> else if ( ( szLine [ i ] & 0xe0 ) == 0xc0 ) { <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug> <S2SV_StartBug> szLineConv [ j ] = szLine [ i ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( nla_len ( rp ) < ulen || xfrm_replay_state_esn_len ( replay_esn ) != ulen ) <S2SV_EndBug>
<S2SV_StartBug> char fstr [ MAXDATELEN + 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> int sctp_verify_asconf ( const struct sctp_association * asoc , <S2SV_EndBug> <S2SV_StartBug> struct sctp_paramhdr * param_hdr , void * chunk_end , <S2SV_EndBug> <S2SV_StartBug> sctp_addip_param_t * asconf_param ; <S2SV_EndBug> <S2SV_StartBug> int length , plen ; <S2SV_EndBug> <S2SV_StartBug> param . v = ( sctp_paramhdr_t * ) param_hdr ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( fd = socket ( AF_UNIX , SOCK_STREAM , 0 ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> return HSM_COM_SEND_ERR ; <S2SV_EndBug>
<S2SV_StartBug> int counthook ; <S2SV_EndBug> <S2SV_StartBug> const Proto * p = ci_func ( ci ) -> p ; <S2SV_EndBug> <S2SV_StartBug> pc <= L -> oldpc || <S2SV_EndBug> <S2SV_StartBug> changedline ( p , pcRel ( L -> oldpc , p ) , npci ) ) { <S2SV_EndBug> <S2SV_StartBug> L -> oldpc = pc ; <S2SV_EndBug>
<S2SV_StartBug> static void sample_hbp_handler ( struct perf_event * bp , int nmi , <S2SV_EndBug>
<S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , address ) ; <S2SV_EndBug>
<S2SV_StartBug> u64 start = offset >> PAGE_CACHE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> u64 end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> ! ( mode & FALLOC_FL_KEEP_SIZE ) ) { <S2SV_EndBug> <S2SV_StartBug> i_size_write ( inode , offset + to ) ; <S2SV_EndBug> <S2SV_StartBug> mark_inode_dirty ( inode ) ; <S2SV_EndBug> <S2SV_StartBug> return error ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( tim . bitmap , p + ( tim . length - 3 ) , <S2SV_EndBug> <S2SV_StartBug> ( tim . length - 3 ) ) ; <S2SV_EndBug> <S2SV_StartBug> length -= tim . length - 3 ; <S2SV_EndBug>
<S2SV_StartBug> char * buff = malloc ( bytes_to_copy ) ; <S2SV_EndBug>
<S2SV_StartBug> namespace_lock ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct desc_struct * desc ; <S2SV_EndBug> <S2SV_StartBug> desc = get_desc ( sel ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! desc ) <S2SV_EndBug> <S2SV_StartBug> limit = get_desc_limit ( desc ) ; <S2SV_EndBug> <S2SV_StartBug> if ( desc -> g ) <S2SV_EndBug>
<S2SV_StartBug> struct mb_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> & bufferoffset , <S2SV_EndBug>
<S2SV_StartBug> if ( rows > 1 ) { <S2SV_EndBug>
<S2SV_StartBug> static void encode_txfm_probs ( VP9_COMMON * cm , vp9_writer * w ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_bit ( w , cm -> tx_mode == TX_MODE_SELECT ) ; <S2SV_EndBug> <S2SV_StartBug> tx_counts_to_branch_counts_8x8 ( cm -> counts . tx . p8x8 [ i ] , ct_8x8p ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_cond_prob_diff_update ( w , & cm -> fc . tx_probs . p8x8 [ i ] [ j ] , ct_8x8p [ j ] ) ; <S2SV_EndBug> <S2SV_StartBug> tx_counts_to_branch_counts_16x16 ( cm -> counts . tx . p16x16 [ i ] , ct_16x16p ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_cond_prob_diff_update ( w , & cm -> fc . tx_probs . p16x16 [ i ] [ j ] , <S2SV_EndBug> <S2SV_StartBug> tx_counts_to_branch_counts_32x32 ( cm -> counts . tx . p32x32 [ i ] , ct_32x32p ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_cond_prob_diff_update ( w , & cm -> fc . tx_probs . p32x32 [ i ] [ j ] , <S2SV_EndBug>
<S2SV_StartBug> int len , err = - ENOBUFS ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( nlk -> cb_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> module_put ( cb -> module ) ; <S2SV_EndBug> <S2SV_StartBug> consume_skb ( cb -> skb ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( n >= 0 && n < 32 ) ; <S2SV_EndBug>
<S2SV_StartBug> gss_buffer_desc client_name , <S2SV_EndBug> <S2SV_StartBug> gss_release_buffer ( & minor_stat , & client_name ) ; <S2SV_EndBug>
<S2SV_StartBug> DEFINE_WAKE_Q ( wake_q ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( n <= 0 ) return ( n ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! n2size ) { <S2SV_EndBug>
<S2SV_StartBug> next_character ( ) ; <S2SV_EndBug>
<S2SV_StartBug> kvm_iommu_put_pages ( kvm , memslot -> base_gfn , memslot -> npages ) ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> for ( p = 0 ; p < 4 && in -> data [ p ] ; p ++ ) { <S2SV_EndBug>
<S2SV_StartBug> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n" <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( rcomp . type , "compression" , sizeof ( rcomp . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> u_int16_t offset = 22 , buf_out_len = 0 ; <S2SV_EndBug> <S2SV_StartBug> offset += 4 + len ; <S2SV_EndBug> <S2SV_StartBug> if ( client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug> <S2SV_StartBug> if ( ! client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug> <S2SV_StartBug> if ( client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug> <S2SV_StartBug> if ( ! client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug> <S2SV_StartBug> if ( client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug> <S2SV_StartBug> if ( ! client_hash ) { <S2SV_EndBug> <S2SV_StartBug> offset += 4 ; <S2SV_EndBug> <S2SV_StartBug> offset += len ; <S2SV_EndBug>
<S2SV_StartBug> pipe_buf_get ( ipipe , ibuf ) ; <S2SV_EndBug>
<S2SV_StartBug> struct snd_timer_user * tu ; <S2SV_EndBug> <S2SV_StartBug> switch ( cmd ) { <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> tread_sem ) ; <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( p -> io_context ) <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> uint32x2_t d28u32 , d29u32 , d30u32 ; <S2SV_EndBug> <S2SV_StartBug> d0u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> d1u8 = vdup_n_u8 ( ( uint8_t ) bifilter4_coeff [ xoffset ] [ 1 ] ) ; <S2SV_EndBug>

<S2SV_StartBug> } else <S2SV_EndBug> <S2SV_StartBug> tty_encode_baud_rate ( tty , baud , baud ) ; <S2SV_EndBug>
<S2SV_StartBug> struct timespec ts ; <S2SV_EndBug> <S2SV_StartBug> ts . tv_sec = div_long_long_rem_signed ( nsec , NSEC_PER_SEC , & ts . tv_nsec ) ; <S2SV_EndBug> <S2SV_StartBug> if ( unlikely ( nsec < 0 ) ) <S2SV_EndBug> <S2SV_StartBug> set_normalized_timespec ( & ts , ts . tv_sec , ts . tv_nsec ) ; <S2SV_EndBug>
<S2SV_StartBug> void Huff_transmit ( huff_t * huff , int ch , byte * fout ) { <S2SV_EndBug> <S2SV_StartBug> Huff_transmit ( huff , NYT , fout ) ; <S2SV_EndBug> <S2SV_StartBug> send ( huff -> loc [ ch ] , NULL , fout ) ; <S2SV_EndBug>
<S2SV_StartBug> long timeo ; <S2SV_EndBug>
<S2SV_StartBug> int bytes_returned , name_len ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int32_t nestsize = ( int32_t ) ms -> nest_size [ ms -> nest_level ] ; <S2SV_EndBug>
<S2SV_StartBug> return res ; <S2SV_EndBug>
<S2SV_StartBug> static TX_SIZE read_tx_size ( VP9_COMMON * cm , MACROBLOCKD * xd , TX_MODE tx_mode , <S2SV_EndBug> <S2SV_StartBug> BLOCK_SIZE bsize , int allow_select , vp9_reader * r ) { <S2SV_EndBug>
<S2SV_StartBug> atomic_inc ( & sb -> s_active ) ; <S2SV_EndBug>
<S2SV_StartBug> FILE * ip ; <S2SV_EndBug> <S2SV_StartBug> # if ! ( defined ( WIN32 ) || defined ( cygwin ) ) <S2SV_EndBug> <S2SV_StartBug> # if ! ( defined ( WIN32 ) || defined ( cygwin ) ) <S2SV_EndBug> <S2SV_StartBug> ip = netsnmp_mibindex_new ( dirname ) ; <S2SV_EndBug> <S2SV_StartBug> if ( add_mibfile ( filenames [ i ] , strrchr ( filenames [ i ] , '/' ) , ip ) == 0 ) <S2SV_EndBug> <S2SV_StartBug> File = oldFile ; <S2SV_EndBug>
<S2SV_StartBug> int just_opened = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! v -> finished && <S2SV_EndBug>
<S2SV_StartBug> int fd = - 1 , ofd = - 1 , ret , ifindex = - 1 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , getpid ( ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , pid ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( setns ( fd , 0 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; fd = - 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( ifindex = if_nametoindex ( oldname ) ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( ret = lxc_netdev_rename_by_name ( oldname , * newnamep ) ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> char ifname [ IFNAMSIZ ] , * namep = ifname ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_err ; <S2SV_EndBug> <S2SV_StartBug> if ( setns ( ofd , 0 ) < 0 ) { <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug>
<S2SV_StartBug> NLSF_Q15 [ i ] = silk_max_int ( NLSF_Q15 [ i ] , NLSF_Q15 [ i - 1 ] + NDeltaMin_Q15 [ i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( input , 0 , 32 ) ; <S2SV_EndBug>
<S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIE , EIE_INTIE ) ; <S2SV_EndBug> <S2SV_StartBug> status = enc624j600ReadReg ( interface , ENC624J600_REG_EIR ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_LINKIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIE , EIE_LINKIE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & EIR_PKTIF ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIE , EIE_PKTIE ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( status & ( EIR_TXIF | EIR_TXABTIF ) ) != 0 ) <S2SV_EndBug> <S2SV_StartBug> enc624j600ClearBit ( interface , ENC624J600_REG_EIR , EIR_TXIF | EIR_TXABTIF ) ; <S2SV_EndBug> <S2SV_StartBug> enc624j600SetBit ( interface , ENC624J600_REG_EIE , EIE_INTIE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( fd = socket ( AF_UNIX , SOCK_STREAM , 0 ) ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> close ( fd ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> unlink ( hdl -> c_path ) ; <S2SV_EndBug> <S2SV_StartBug> return HSM_COM_SEND_ERR ; <S2SV_EndBug>
<S2SV_StartBug> opt = xchg ( & inet6_sk ( sk ) -> opt , opt ) ; <S2SV_EndBug>
<S2SV_StartBug> s -> cur_pic . field_picture || <S2SV_EndBug>
<S2SV_StartBug> char build [ ATUSB_BUILD_SIZE + 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( flags & FOLL_WRITE ) && ! pte_write ( pte ) ) { <S2SV_EndBug>
<S2SV_StartBug> xmalloc ( size_t size ) <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> void * ptr = malloc ( size ) ; <S2SV_EndBug>
<S2SV_StartBug> long mtemp , save_adjust , rem ; <S2SV_EndBug> <S2SV_StartBug> time_offset = div_long_long_rem_signed ( time_offset , <S2SV_EndBug> <S2SV_StartBug> NTP_INTERVAL_FREQ , <S2SV_EndBug>
<S2SV_StartBug> # ifdef CONFIG_SMP <S2SV_EndBug> <S2SV_StartBug> for_each_possible_cpu ( i ) <S2SV_EndBug> <S2SV_StartBug> lockdep_init_map ( & s -> s_writers . lock_map [ i ] , sb_writers_name [ i ] , <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_dentry_lru ) ) <S2SV_EndBug> <S2SV_StartBug> if ( list_lru_init ( & s -> s_inode_lru ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( log_fp ) <S2SV_EndBug> <S2SV_StartBug> if ( daemon_mode == FALSE ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> r = do_write_pids ( fc -> pid , f -> controller , f -> cgroup , f -> file , localbuf ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sec_attr == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> pop3c -> mailbox = curl_easy_unescape ( data , path , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! pop3c -> mailbox ) <S2SV_EndBug>
<S2SV_StartBug> sock_put ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( par -> color_primaries != AVCOL_PRI_UNSPECIFIED ) <S2SV_EndBug>
<S2SV_StartBug> if ( p -> io_context ) <S2SV_EndBug> <S2SV_StartBug> out : <S2SV_EndBug>
<S2SV_StartBug> monitor_sync ( pmonitor ) ; <S2SV_EndBug>
<S2SV_StartBug> void generic_pipe_buf_get ( struct pipe_inode_info * pipe , struct pipe_buffer * buf ) <S2SV_EndBug> <S2SV_StartBug> get_page ( buf -> page ) ; <S2SV_EndBug>
<S2SV_StartBug> r_cons_printf ( "k<S2SV_blank>bin/pe/%s/%d=%s.%s\\n" , <S2SV_EndBug> <S2SV_StartBug> r_cons_printf ( "k<S2SV_blank>bin/pe/%s/%d=%s\\n" , <S2SV_EndBug>
<S2SV_StartBug> ALOGE ( "b/26366256" ) ; <S2SV_EndBug>
<S2SV_StartBug> cdf_secid_t maxsector = ( cdf_secid_t ) ( sat -> sat_len * size ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sid > maxsector ) { <S2SV_EndBug>
<S2SV_StartBug> aio_free_ring ( ctx ) ; <S2SV_EndBug>
<S2SV_StartBug> bool compat ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( IS_NOT_NULL ( Else ) ) { <S2SV_EndBug> <S2SV_StartBug> len += SIZE_OP_JUMP ; <S2SV_EndBug>
<S2SV_StartBug> if ( vmx_set_msr ( vcpu , & msr ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> rc = smtp_get_resp ( conn ) ; <S2SV_EndBug>
<S2SV_StartBug> signal_remove ( "message<S2SV_blank>quit" , ( SIGNAL_FUNC ) msg_quit ) ; <S2SV_EndBug>
<S2SV_StartBug> static int may_create_in_sticky ( struct dentry * const dir , <S2SV_EndBug> <S2SV_StartBug> likely ( ! ( dir -> d_inode -> i_mode & S_ISVTX ) ) || <S2SV_EndBug> <S2SV_StartBug> uid_eq ( inode -> i_uid , dir -> d_inode -> i_uid ) || <S2SV_EndBug> <S2SV_StartBug> if ( likely ( dir -> d_inode -> i_mode & 0002 ) || <S2SV_EndBug> <S2SV_StartBug> ( dir -> d_inode -> i_mode & 0020 && <S2SV_EndBug>
<S2SV_StartBug> mptctl_fw_download ( unsigned long arg ) <S2SV_EndBug> <S2SV_StartBug> return mptctl_do_fw_download ( kfwdl . iocnum , kfwdl . bufp , kfwdl . fwlen ) ; <S2SV_EndBug>
<S2SV_StartBug> dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; <S2SV_EndBug>
<S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( collen > 0 ) <S2SV_EndBug> <S2SV_StartBug> while ( replen > 0 ) <S2SV_EndBug>
<S2SV_StartBug> void <S2SV_EndBug> <S2SV_StartBug> assert ( ( msgnum & ( msgnum - 1 ) ) == 0 && msgnum >= 1 && msgnum <= 32 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & priv -> ctrl , p , sizeof ( priv -> ctrl ) ) ; <S2SV_EndBug> <S2SV_StartBug> rc = - ENOMEM ; <S2SV_EndBug>
<S2SV_StartBug> ret = ca8210_get_platform_data ( priv -> spi , pdata ) ; <S2SV_EndBug> <S2SV_StartBug> ret = ca8210_dev_com_init ( priv ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( offset < end_offset ) <S2SV_EndBug> <S2SV_StartBug> return offset ; <S2SV_EndBug>
<S2SV_StartBug> if ( libfvalue_value_type_initialize ( <S2SV_EndBug> <S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> # if defined ( HAVE_DEBUG_OUTPUT ) <S2SV_EndBug> <S2SV_StartBug> & ( record_data [ data_offset ] ) , <S2SV_EndBug>
<S2SV_StartBug> int received = recv ( slot -> fd , buf , size , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( strncmp ( handle -> params . realm , realm -> data , realm -> length ) == 0 <S2SV_EndBug>
<S2SV_StartBug> struct scatterlist sg [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> sg_init_one ( sg , buf , count ) ; <S2SV_EndBug> <S2SV_StartBug> return __send_to_port ( port , sg , 1 , count , ( void * ) buf , false ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! encoding && c -> palette_size && c -> bpp <= 8 ) { <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> struct free_nid * i ; <S2SV_EndBug> <S2SV_StartBug> int err ; <S2SV_EndBug> <S2SV_StartBug> if ( build ) { <S2SV_EndBug> <S2SV_StartBug> return false ; <S2SV_EndBug>
<S2SV_StartBug> file_sb_list_del ( file ) ; <S2SV_EndBug>
<S2SV_StartBug> gdImageWBMPCtx ( im , fg , out ) ; <S2SV_EndBug> <S2SV_StartBug> rv = gdDPExtractData ( out , size ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( image_info -> ping ) <S2SV_EndBug> <S2SV_StartBug> return ( image ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t l = 0 ; <S2SV_EndBug> <S2SV_StartBug> ptr += strspn ( ptr , "\\r\\n\\t<S2SV_blank>" ) ; <S2SV_EndBug> <S2SV_StartBug> l = strcspn ( ptr , "\\r\\n\\t<S2SV_blank>" ) ; <S2SV_EndBug>
<S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return tmp ; <S2SV_EndBug> <S2SV_StartBug> return state -> ptr = tmp ; <S2SV_EndBug>
<S2SV_StartBug> "Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;" <S2SV_EndBug> <S2SV_StartBug> return APR_ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( rv != APR_SUCCESS ) { <S2SV_EndBug> <S2SV_StartBug> case BODY_CHUNK_END : { <S2SV_EndBug> <S2SV_StartBug> int merge_trailers = <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>

<S2SV_StartBug> memcpy ( name , fp + n , name_len ) ; n += name_len ; <S2SV_EndBug> <S2SV_StartBug> attr_len = fp [ n ++ ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( errcode != 0 ) <S2SV_EndBug>
<S2SV_StartBug> if ( ret == - EEXIST ) <S2SV_EndBug>
<S2SV_StartBug> static void fadst8 ( const int16_t * input , int16_t * output ) { <S2SV_EndBug> <S2SV_StartBug> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; <S2SV_EndBug> <S2SV_StartBug> int x1 = input [ 0 ] ; <S2SV_EndBug> <S2SV_StartBug> int x2 = input [ 5 ] ; <S2SV_EndBug> <S2SV_StartBug> int x3 = input [ 2 ] ; <S2SV_EndBug> <S2SV_StartBug> int x4 = input [ 3 ] ; <S2SV_EndBug> <S2SV_StartBug> int x5 = input [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int x6 = input [ 1 ] ; <S2SV_EndBug> <S2SV_StartBug> int x7 = input [ 6 ] ; <S2SV_EndBug> <S2SV_StartBug> output [ 0 ] = x0 ; <S2SV_EndBug> <S2SV_StartBug> output [ 1 ] = - x4 ; <S2SV_EndBug> <S2SV_StartBug> output [ 2 ] = x6 ; <S2SV_EndBug> <S2SV_StartBug> output [ 3 ] = - x2 ; <S2SV_EndBug> <S2SV_StartBug> output [ 4 ] = x3 ; <S2SV_EndBug> <S2SV_StartBug> output [ 5 ] = - x7 ; <S2SV_EndBug> <S2SV_StartBug> output [ 6 ] = x5 ; <S2SV_EndBug> <S2SV_StartBug> output [ 7 ] = - x1 ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( bps * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( dataSize > MAX_DLS_WAVE_SIZE ) <S2SV_EndBug>
<S2SV_StartBug> char * bufp , * commentp , * altp ; <S2SV_EndBug>
<S2SV_StartBug> int ctrl_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> if ( ctx -> pbi ) <S2SV_EndBug> <S2SV_StartBug> * corrupted = ctx -> pbi -> common . frame_to_show -> corrupted ; <S2SV_EndBug> <S2SV_StartBug> return VPX_CODEC_INVALID_PARAM ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char * name , int rep_quick ) <S2SV_EndBug> <S2SV_StartBug> mysql_file_close ( new_file , MYF ( 0 ) ) ; <S2SV_EndBug> <S2SV_StartBug> ( param -> testflag & T_BACKUP_DATA ? <S2SV_EndBug>
<S2SV_StartBug> # ifdef HAVE_OPENSSL <S2SV_EndBug>
<S2SV_StartBug> av_log ( mxf , AV_LOG_TRACE , "could<S2SV_blank>not<S2SV_blank>resolve<S2SV_blank>essence<S2SV_blank>container<S2SV_blank>data<S2SV_blank>strong<S2SV_blank>ref\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ops != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> ut8 opcode = * ( p4 ++ ) & 0xff ; <S2SV_EndBug>
<S2SV_StartBug> change = ue -> tlv_data_size != size ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> return - ENXIO ; <S2SV_EndBug> <S2SV_StartBug> if ( size < ue -> tlv_data_size ) <S2SV_EndBug> <S2SV_StartBug> return - ENOSPC ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_to_user ( tlv , ue -> tlv_data , ue -> tlv_data_size ) ) <S2SV_EndBug> <S2SV_StartBug> return - EFAULT ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK2 ( dp [ 0 ] , 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_b ( VP9_COMP * cpi , const TileInfo * const tile , <S2SV_EndBug> <S2SV_StartBug> int output_enabled , BLOCK_SIZE bsize ) { <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize < BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> set_offsets ( cpi , tile , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_state ( cpi , get_block_context ( x , bsize ) , mi_row , mi_col , bsize , <S2SV_EndBug> <S2SV_StartBug> encode_superblock ( cpi , tp , output_enabled , mi_row , mi_col , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> update_stats ( cpi ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( CHECKOVERFLOW ( o , buf_size , 12 ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ! object || object -> list . length != 2 || ! object -> list . objects [ 0 ] || object -> list . objects [ 1 ] -> list . length != 1 ) { <S2SV_EndBug>
<S2SV_StartBug> struct task_struct * task = current ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int ds , unsigned int offset , unsigned int recursion_depth ) <S2SV_EndBug> <S2SV_StartBug> if ( recursion_depth > 12 ) { <S2SV_EndBug> <S2SV_StartBug> "Deep<S2SV_blank>recursion<S2SV_blank>detected!" ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_EXIF , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_GPS , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> exif_data_load_data_content ( data , EXIF_IFD_INTEROPERABILITY , d , ds , o , recursion_depth + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> int n ; <S2SV_EndBug> <S2SV_StartBug> long newbufsize ; <S2SV_EndBug> <S2SV_StartBug> newbufsize <<= 1 ; <S2SV_EndBug> <S2SV_StartBug> JAS_DBGLOG ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%z\\n" , m -> bufsize_ , <S2SV_EndBug> <S2SV_StartBug> if ( m -> pos_ > m -> len_ ) { <S2SV_EndBug>
<S2SV_StartBug> down_read ( & BTRFS_I ( dir ) -> root -> fs_info -> subvol_sem ) ; <S2SV_EndBug>
<S2SV_StartBug> dst [ y * linesize + x ] = clr ; <S2SV_EndBug>
<S2SV_StartBug> int bind_ports ( void ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> const int kBufferFrameCount = 65536 ; <S2SV_EndBug> <S2SV_StartBug> void * buffer = malloc ( kBufferFrameCount * frameSize ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( dst -> y_buffer + i * dst -> y_stride + dw - 1 , dst -> y_buffer [ i * dst -> y_stride + dw - 2 ] , dst -> y_width - dw + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> y_buffer + i * dst -> y_stride , dst -> y_buffer + ( dh - 2 ) * dst -> y_stride , dst -> y_width + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dst -> u_buffer + i * dst -> uv_stride + dw / 2 - 1 , dst -> u_buffer [ i * dst -> uv_stride + dw / 2 - 2 ] , dst -> uv_width - dw / 2 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> u_buffer + i * dst -> uv_stride , dst -> u_buffer + ( dh / 2 - 2 ) * dst -> uv_stride , dst -> uv_width ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( dst -> v_buffer + i * dst -> uv_stride + dw / 2 - 1 , dst -> v_buffer [ i * dst -> uv_stride + dw / 2 - 2 ] , dst -> uv_width - dw / 2 + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dst -> v_buffer + i * dst -> uv_stride , dst -> v_buffer + ( dh / 2 - 2 ) * dst -> uv_stride , dst -> uv_width ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( job = cupsdAddJob ( priority , printer -> name ) ) == NULL ) <S2SV_EndBug> <S2SV_StartBug> apply_printer_defaults ( printer , job ) ; <S2SV_EndBug>
<S2SV_StartBug> struct dentry * dentry = path -> dentry ; <S2SV_EndBug> <S2SV_StartBug> struct inode * inode = dentry -> d_inode ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static inline bool unconditional ( const struct ip6t_ip6 * ipv6 ) <S2SV_EndBug> <S2SV_StartBug> return memcmp ( ipv6 , & uncond , sizeof ( uncond ) ) == 0 ; <S2SV_EndBug>
<S2SV_StartBug> return - ETIMEDOUT ; <S2SV_EndBug>
<S2SV_StartBug> int ret ; <S2SV_EndBug> <S2SV_StartBug> indx , & data , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> static gboolean <S2SV_EndBug> <S2SV_StartBug> ice_conn -> context = client ; <S2SV_EndBug>
<S2SV_StartBug> tp -> prr_delivered += newly_acked_sacked ; <S2SV_EndBug>
<S2SV_StartBug> ND_TCHECK ( bp [ 0 ] ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 4 ] ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( bp [ 4 ] & 0x3 ) { <S2SV_EndBug> <S2SV_StartBug> if ( bp [ 4 ] & 0xfc ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>[rsvd=0x%02x]" , bp [ 4 ] & 0xfc ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( bp [ 5 ] ) ; <S2SV_EndBug> <S2SV_StartBug> nentries = bp [ 5 ] ; <S2SV_EndBug> <S2SV_StartBug> bp += 6 ; len -= 6 ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK2 ( bp [ 0 ] , 6 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> jmp_rel ( ctxt , rel ) ; <S2SV_EndBug>
<S2SV_StartBug> calldata -> arg . open_flags = FMODE_READ ; <S2SV_EndBug> <S2SV_StartBug> calldata -> arg . open_flags = FMODE_WRITE ; <S2SV_EndBug>
<S2SV_StartBug> int nBytes = sizeof ( sqlite3_vtab * ) * ( db -> nVTrans + ARRAY_INCR ) ; <S2SV_EndBug>
<S2SV_StartBug> static void follow_dotdot ( struct nameidata * nd ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> update_db_bp_intercept ( vcpu ) ; <S2SV_EndBug>
<S2SV_StartBug> nd -> last_type = LAST_BIND ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> tcp_rcv_space_adjust ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ) , index_key ) ) { <S2SV_EndBug>
<S2SV_StartBug> if ( fv -> b . nextsame != NULL || fv -> b . sf -> fv != & fv -> b ) { <S2SV_EndBug>
<S2SV_StartBug> conn -> sasl_username = ircnet -> sasl_username ; <S2SV_EndBug>
<S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug> <S2SV_StartBug> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> void * dllhandle ; <S2SV_EndBug>
<S2SV_StartBug> int ret = 0 ; <S2SV_EndBug>
<S2SV_StartBug> char * prop_chunk = malloc ( ( size_t ) dff_chunk_header . ckDataSize ) ; <S2SV_EndBug>
<S2SV_StartBug> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_8_dual ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s , pitch , lfi -> mblim , lfi -> lim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , <S2SV_EndBug> <S2SV_StartBug> vp9_lpf_horizontal_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> return perf_read_hw ( event , buf , count ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return SQLITE_NOMEM ; <S2SV_EndBug> <S2SV_StartBug> return rc ; <S2SV_EndBug>
<S2SV_StartBug> vpx_codec_ctx_t codec [ NUM_ENCODERS ] ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_pts_t frame_cnt = 0 ; <S2SV_EndBug> <S2SV_StartBug> int frame_avail ; <S2SV_EndBug> <S2SV_StartBug> int arg_deadline = VPX_DL_REALTIME ; <S2SV_EndBug> <S2SV_StartBug> uint64_t psnr_sse_total [ NUM_ENCODERS ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int psnr_count [ NUM_ENCODERS ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( argc != ( 5 + NUM_ENCODERS ) ) <S2SV_EndBug> <S2SV_StartBug> die ( "Usage:<S2SV_blank>%s<S2SV_blank><width><S2SV_blank><height><S2SV_blank><infile><S2SV_blank><outfile(s)><S2SV_blank><output<S2SV_blank>psnr?>\\n" , <S2SV_EndBug> <S2SV_StartBug> height = strtol ( argv [ 2 ] , NULL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( infile = fopen ( argv [ 3 ] , "rb" ) ) ) <S2SV_EndBug> <S2SV_StartBug> die ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading" , argv [ 3 ] ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ( outfile [ i ] = fopen ( argv [ i + 4 ] , "wb" ) ) ) <S2SV_EndBug> <S2SV_StartBug> show_psnr = strtol ( argv [ NUM_ENCODERS + 4 ] , NULL , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> res [ i ] = vpx_codec_enc_config_default ( interface , & cfg [ i ] , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . g_threads = 1 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_min_quantizer = 4 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_undershoot_pct = 98 ; <S2SV_EndBug> <S2SV_StartBug> cfg [ 0 ] . rc_overshoot_pct = 100 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & cfg [ i ] , & cfg [ 0 ] , sizeof ( vpx_codec_enc_cfg_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) <S2SV_EndBug> <S2SV_StartBug> write_ivf_file_header ( outfile [ i ] , & cfg [ i ] , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_CPUUSED , speed ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>cpu_used" ) ; <S2SV_EndBug> <S2SV_StartBug> unsigned int static_thresh = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_STATIC_THRESHOLD , static_thresh ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> frame_cnt , 1 , flags , arg_deadline ) ) <S2SV_EndBug> <S2SV_StartBug> die_codec ( & codec [ 0 ] , "Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame" ) ; <S2SV_EndBug> <S2SV_StartBug> && ( pkt [ i ] -> data . frame . flags & VPX_FRAME_IS_KEY ) ? "K" : "." ) ; <S2SV_EndBug> <S2SV_StartBug> printf ( "\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> int i , retval ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug>
<S2SV_StartBug> in_uint16_le ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> in_uint8 ( s , type ) ; <S2SV_EndBug>
<S2SV_StartBug> number_threads ; <S2SV_EndBug> <S2SV_StartBug> number_threads = ( size_t ) GetMagickResourceLimit ( ThreadResource ) ; <S2SV_EndBug> <S2SV_StartBug> pixels = ( PixelChannels * * ) AcquireQuantumMemory ( number_threads , <S2SV_EndBug> <S2SV_StartBug> ( void ) memset ( pixels , 0 , number_threads * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < ( ssize_t ) number_threads ; i ++ ) <S2SV_EndBug>
<S2SV_StartBug> conn -> c_trans = trans ; <S2SV_EndBug>
<S2SV_StartBug> ni6 = ( const struct icmp6_nodeinfo * ) dp ; <S2SV_EndBug> <S2SV_StartBug> cp = ( const u_char * ) ( ni6 + 1 ) + 4 ; <S2SV_EndBug>
<S2SV_StartBug> Py_ssize_t new_memo_size = 0 ; <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < new_memo_size ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> i = new_memo_size ; <S2SV_EndBug>
<S2SV_StartBug> cJSON_AddIntToObject ( j , "omit" , test -> omit ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddIntToObject ( j , "server_affinity" , test -> server_affinity ) ; <S2SV_EndBug> <S2SV_StartBug> cJSON_AddStringToObject ( j , "title" , test -> title ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( timeri -> master ) <S2SV_EndBug> <S2SV_StartBug> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> spin_lock_irq ( & tu -> qlock ) ; <S2SV_EndBug> <S2SV_StartBug> schedule ( ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & tu -> ioctl_lock ) ; <S2SV_EndBug> <S2SV_StartBug> return result > 0 ? result : err ; <S2SV_EndBug>
<S2SV_StartBug> ( target -> doc -> dict == ctxt -> dict ) ) { <S2SV_EndBug>
<S2SV_StartBug> return send ( ts [ thread_handle ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sock -> ops ) { <S2SV_EndBug> <S2SV_StartBug> if ( rcu_dereference_protected ( sock -> wq , 1 ) -> fasync_list ) <S2SV_EndBug>
<S2SV_StartBug> return g_NPN_GetValue_real ( instance , variable , value ) ; <S2SV_EndBug>
<S2SV_StartBug> ps_dec -> u2_total_mbs_coded ++ ; <S2SV_EndBug> <S2SV_StartBug> if ( u1_tfr_n_mb ) <S2SV_EndBug>
<S2SV_StartBug> memcpy ( new , ours , sizeof ( * new ) ) ; <S2SV_EndBug>
<S2SV_StartBug> c -> tile_stride = FFALIGN ( c -> tile_width * 3 , 16 ) ; <S2SV_EndBug>
<S2SV_StartBug> ) { <S2SV_EndBug>
<S2SV_StartBug> c -> cblk_style = bytestream2_get_byteu ( & s -> g ) ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( fpl ) ; <S2SV_EndBug>
<S2SV_StartBug> BLOCK_SIZE bsize , int use_rd ) { <S2SV_EndBug> <S2SV_StartBug> const int refresh_this_block = candidate_refresh_aq ( cr , mbmi , bsize , use_rd ) ; <S2SV_EndBug> <S2SV_StartBug> if ( mbmi -> segment_id > 0 && ! refresh_this_block ) <S2SV_EndBug> <S2SV_StartBug> if ( mbmi -> segment_id == 1 ) { <S2SV_EndBug> <S2SV_StartBug> cr -> map [ block_index + y * cm -> mi_cols + x ] = new_map_value ; <S2SV_EndBug> <S2SV_StartBug> cpi -> segmentation_map [ block_index + y * cm -> mi_cols + x ] = <S2SV_EndBug>
<S2SV_StartBug> static char * create_output_name ( unsigned char * fname , unsigned char * dir , <S2SV_EndBug> <S2SV_StartBug> if ( utf8 ) x *= 3 ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "out<S2SV_blank>of<S2SV_blank>memory!\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> while ( * fname == sep ) fname ++ ; <S2SV_EndBug> <S2SV_StartBug> p = & name [ strlen ( ( char * ) name ) ] ; <S2SV_EndBug> <S2SV_StartBug> if ( fname >= fe ) { <S2SV_EndBug> <S2SV_StartBug> x = ( c & 0x1F ) << 6 ; <S2SV_EndBug> <S2SV_StartBug> } while ( x ) ; <S2SV_EndBug>
<S2SV_StartBug> ERR ( "callocing<S2SV_blank>this<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> this -> sd = socket ( AF_INET6 , SOCK_STREAM , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> ERR ( "sockect<S2SV_blank>open<S2SV_blank>failed" ) ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_family = AF_INET6 ; <S2SV_EndBug> <S2SV_StartBug> addr . sin6_addr = in6addr_any ; <S2SV_EndBug> <S2SV_StartBug> ERR ( "Bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>" <S2SV_EndBug> <S2SV_StartBug> ERR ( "listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket" ) ; <S2SV_EndBug>
<S2SV_StartBug> redisAssert ( server . vm_enabled ) ; <S2SV_EndBug> <S2SV_StartBug> server . vm_blocked_clients -- ; <S2SV_EndBug>
<S2SV_StartBug> void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , int status , const u8 * desc , <S2SV_EndBug> <S2SV_StartBug> int length , int offset , int total_size ) <S2SV_EndBug> <S2SV_StartBug> int copy_len ; <S2SV_EndBug> <S2SV_StartBug> int required_size = urb -> transfer_buffer_length ; <S2SV_EndBug>
<S2SV_StartBug> u8 * data = NULL ; <S2SV_EndBug> <S2SV_StartBug> int ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> hdr . flags & ~ ( VFIO_IRQ_SET_DATA_TYPE_MASK | <S2SV_EndBug> <S2SV_StartBug> if ( ! ( hdr . flags & VFIO_IRQ_SET_DATA_NONE ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( hdr . flags & VFIO_IRQ_SET_DATA_BOOL ) <S2SV_EndBug> <S2SV_StartBug> hdr . start >= max || hdr . start + hdr . count > max ) <S2SV_EndBug>
<S2SV_StartBug> if ( envs [ h_env -> envc ] . env == HTML_DL_COMPACT ) { <S2SV_EndBug>
<S2SV_StartBug> while ( buflen > 0 ) { <S2SV_EndBug> <S2SV_StartBug> return union_desc ; <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug> <S2SV_StartBug> alt = & gspca_dev -> dev -> actconfig -> intf_cache [ 0 ] -> altsetting [ 1 ] ; <S2SV_EndBug>
<S2SV_StartBug> head_shift = ( F_SECT_PER_TRACK + 5 ) / 6 ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( & sas , optval , len ) ) <S2SV_EndBug> <S2SV_StartBug> len = min_t ( size_t , len , sizeof ( sas ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( buf ) <S2SV_EndBug> <S2SV_StartBug> _copy_from_pages ( buf , pages , res . acl_data_offset , res . acl_len ) ; <S2SV_EndBug>
<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( "clone" , dest ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( buf , ( void * ) arg , hdr . size_in ) ) { <S2SV_EndBug>
<S2SV_StartBug> static int bson_string_is_db_ref ( const unsigned char * string , const int length ) { <S2SV_EndBug>
<S2SV_StartBug> # define ThrowDCMException ( exception , message ) { if ( info . scale != ( Quantum * ) NULL ) info . scale = ( Quantum * ) RelinquishMagickMemory ( info . scale ) ; if ( data != ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap != ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( bluemap != ( int * ) NULL ) bluemap = ( int * ) RelinquishMagickMemory ( bluemap ) ; if ( greenmap != ( int * ) NULL ) greenmap = ( int * ) RelinquishMagickMemory ( greenmap ) ; if ( redmap != ( int * ) NULL ) redmap = ( int * ) RelinquishMagickMemory ( redmap ) ; if ( stream_info -> offsets != ( ssize_t * ) NULL ) stream_info -> offsets = ( ssize_t * ) RelinquishMagickMemory ( stream_info -> offsets ) ; if ( stream_info != ( DCMStreamInfo * ) NULL ) stream_info = ( DCMStreamInfo * ) RelinquishMagickMemory ( stream_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; } <S2SV_EndBug> <S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> static int detect_flash ( const struct twopass_rc * twopass , int offset ) { <S2SV_EndBug> <S2SV_StartBug> FIRSTPASS_STATS next_frame ; <S2SV_EndBug> <S2SV_StartBug> if ( read_frame_stats ( twopass , & next_frame , offset ) != EOF ) { <S2SV_EndBug> <S2SV_StartBug> if ( next_frame . pcnt_second_ref > next_frame . pcnt_inter && <S2SV_EndBug> <S2SV_StartBug> next_frame . pcnt_second_ref >= 0.5 ) <S2SV_EndBug>
<S2SV_StartBug> } else <S2SV_EndBug>
<S2SV_StartBug> cl -> wsctx = ( wsCtx * ) wsctx ; <S2SV_EndBug>
<S2SV_StartBug> out_release_nounlock : <S2SV_EndBug>
<S2SV_StartBug> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree" ) ; <S2SV_EndBug> <S2SV_StartBug> req = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( req != NULL ) <S2SV_EndBug>
<S2SV_StartBug> int m ; <S2SV_EndBug>
<S2SV_StartBug> if ( section -> cipher_list ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! section -> option . client ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>[bad<S2SV_blank>length<S2SV_blank>%u]" , length ) ) ; <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ipaddr_string ( ndo , & cp [ len ] ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> cpi -> this_frame_target += ( ( cpi -> current_gf_interval - 1 ) * Adjustment ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( check_anon ( kdc_active_realm , request -> client , request -> server ) != 0 ) { <S2SV_EndBug>
<S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug> <S2SV_StartBug> facilities_len -= len + 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! capable ( CAP_NET_ADMIN ) ) <S2SV_EndBug> <S2SV_StartBug> return - EPERM ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( arg , user , get_arglen [ GET_CMDID ( cmd ) ] ) != 0 ) <S2SV_EndBug>
<S2SV_StartBug> opt_type = * bp ++ ; <S2SV_EndBug>
<S2SV_StartBug> int * returnrate , int64_t * returndist , <S2SV_EndBug> <S2SV_StartBug> int rate_y = 0 , rate_uv = 0 , rate_y_tokenonly = 0 , rate_uv_tokenonly = 0 ; <S2SV_EndBug> <S2SV_StartBug> int64_t dist_y = 0 , dist_uv = 0 , tx_cache [ TX_MODES ] = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> if ( bsize >= BLOCK_8X8 ) { <S2SV_EndBug> <S2SV_StartBug> & dist_y , & y_skip , bsize , tx_cache , <S2SV_EndBug> <S2SV_StartBug> * returnrate = INT_MAX ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug> <S2SV_StartBug> max_uv_tx_size = get_uv_tx_size_impl ( xd -> mi [ 0 ] -> mbmi . tx_size , bsize ) ; <S2SV_EndBug> <S2SV_StartBug> & dist_uv , & uv_skip , bsize , max_uv_tx_size ) ; <S2SV_EndBug> <S2SV_StartBug> } else { <S2SV_EndBug> <S2SV_StartBug> * returnrate = rate_y + rate_uv - rate_y_tokenonly - rate_uv_tokenonly + <S2SV_EndBug> <S2SV_StartBug> * returndist = dist_y + dist_uv ; <S2SV_EndBug> <S2SV_StartBug> vp9_zero ( ctx -> tx_rd_diff ) ; <S2SV_EndBug>
<S2SV_StartBug> kern_msg -> msg_name = kern_address ; <S2SV_EndBug>
<S2SV_StartBug> ( void ) fputc ( c , file ) ; <S2SV_EndBug>
<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( bidx <= PCI_BARMAX ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( pdi -> bar [ bidx ] . type == PCIBAR_MEM32 || <S2SV_EndBug> <S2SV_StartBug> pdi -> bar [ bidx ] . type == PCIBAR_MEM64 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( sk != asoc -> base . sk ) <S2SV_EndBug>
<S2SV_StartBug> if ( image_info -> ping ) goto Finish ; <S2SV_EndBug>
<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug>
<S2SV_StartBug> number_planes_filled * sizeof ( * pixels ) ) ; <S2SV_EndBug> <S2SV_StartBug> pixel_info_length = image -> columns * image -> rows * number_planes_filled ; <S2SV_EndBug>
<S2SV_StartBug> m -> msg_name = address ; <S2SV_EndBug>
<S2SV_StartBug> * sent = 0 ; <S2SV_EndBug>

<S2SV_StartBug> u8 smac [ ETH_ALEN ] ; <S2SV_EndBug> <S2SV_StartBug> if ( is_iboe ) { <S2SV_EndBug> <S2SV_StartBug> mutex_lock ( & lock ) ; <S2SV_EndBug>
<S2SV_StartBug> static int t220_frontend_attach ( struct dvb_usb_adapter * d ) <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x86 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x80 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> msleep ( 50 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d -> dev , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_EndBug> <S2SV_StartBug> d -> fe_adap [ 0 ] . fe = dvb_attach ( cxd2820r_attach , & cxd2820r_config , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( d -> fe_adap [ 0 ] . fe != NULL ) { <S2SV_EndBug> <S2SV_StartBug> if ( dvb_attach ( tda18271_attach , d -> fe_adap [ 0 ] . fe , 0x60 , <S2SV_EndBug> <S2SV_StartBug> & d -> dev -> i2c_adap , & tda18271_config ) ) { <S2SV_EndBug>
<S2SV_StartBug> size = DIV_ROUND_UP ( size , BUF_PAGE_SIZE ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> assert ( ( cc % ( 2 * stride ) ) == 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( ! * passwd || ! * user -> passwd ) <S2SV_EndBug>
<S2SV_StartBug> char * buf ; <S2SV_EndBug>
<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug>
<S2SV_StartBug> write_webm_file_footer ( & stream -> ebml , stream -> hash ) ; <S2SV_EndBug>
<S2SV_StartBug> static void encode_uniform ( vp9_writer * w , int v ) { <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , v , l - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , m + ( ( v - m ) >> 1 ) , l - 1 ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_write_literal ( w , ( v - m ) & 1 , 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> k -> get_config ( vdev , vdev -> config ) ; <S2SV_EndBug>
<S2SV_StartBug> strcpy ( link_info . str , nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ; <S2SV_EndBug>
<S2SV_StartBug> gpio_dev -> pctrl = pinctrl_register ( & amd_pinctrl_desc , <S2SV_EndBug> <S2SV_StartBug> & pdev -> dev , gpio_dev ) ; <S2SV_EndBug> <S2SV_StartBug> goto out1 ; <S2SV_EndBug> <S2SV_StartBug> out1 : <S2SV_EndBug>
<S2SV_StartBug> if ( mount ( console -> name , lxcpath , "none" , MS_BIND , 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> static void nsc_decode ( NSC_CONTEXT * context ) <S2SV_EndBug> <S2SV_StartBug> UINT16 rw = ROUND_UP_TO ( context -> width , 8 ) ; <S2SV_EndBug> <S2SV_StartBug> BYTE shift = context -> ColorLossLevel - 1 ; <S2SV_EndBug> <S2SV_StartBug> BYTE * bmpdata = context -> BitmapData ; <S2SV_EndBug> <S2SV_StartBug> * bmpdata ++ = MINMAX ( b_val , 0 , 0xFF ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> static void atomic2gen ( lua_State * L , global_State * g ) { <S2SV_EndBug>
<S2SV_StartBug> vp8_decrypt_cb * decrypt_cb , <S2SV_EndBug>
<S2SV_StartBug> if ( REMAIN > INT_MAX ) <S2SV_EndBug>
<S2SV_StartBug> regs [ insn -> dst_reg ] . var_off = tnum_cast ( <S2SV_EndBug> <S2SV_StartBug> __update_reg_bounds ( & regs [ insn -> dst_reg ] ) ; <S2SV_EndBug>
<S2SV_StartBug> WORD32 ih264d_end_of_pic ( dec_struct_t * ps_dec , <S2SV_EndBug> <S2SV_StartBug> WORD32 ret ; <S2SV_EndBug> <S2SV_StartBug> ps_dec -> u2_total_mbs_coded = 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! file ) <S2SV_EndBug> <S2SV_StartBug> done : <S2SV_EndBug>
<S2SV_StartBug> DRM_DEBUG ( "clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n" ) ; <S2SV_EndBug>
<S2SV_StartBug> long tmp = * old ; <S2SV_EndBug> <S2SV_StartBug> return * old == tmp ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ 32 ] , * e ; <S2SV_EndBug>
<S2SV_StartBug> nfcf_poll -> sensf_res_len = * data ++ ; <S2SV_EndBug>
<S2SV_StartBug> mutex_unlock ( & file -> mut ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( db -> mallocFailed || sqliteProcessJoin ( pParse , p ) ) { <S2SV_EndBug>
<S2SV_StartBug> u64 msr_data ; <S2SV_EndBug> <S2SV_StartBug> cs . dpl = 3 ; <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = reg_read ( ctxt , VCPU_REGS_RDX ) ; <S2SV_EndBug> <S2SV_StartBug> * reg_write ( ctxt , VCPU_REGS_RSP ) = reg_read ( ctxt , VCPU_REGS_RCX ) ; <S2SV_EndBug>
<S2SV_StartBug> struct packet_sock * po = pkt_sk ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> running ) <S2SV_EndBug> <S2SV_StartBug> return - EINVAL ; <S2SV_EndBug> <S2SV_StartBug> return - EALREADY ; <S2SV_EndBug> <S2SV_StartBug> po -> rollover = kzalloc ( sizeof ( * po -> rollover ) , GFP_KERNEL ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! po -> rollover ) <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_huge , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> atomic_long_set ( & po -> rollover -> num_failed , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> mutex_unlock ( & fanout_mutex ) ; <S2SV_EndBug> <S2SV_StartBug> if ( err ) { <S2SV_EndBug>
<S2SV_StartBug> return fd ; <S2SV_EndBug>
<S2SV_StartBug> int vp8_denoiser_allocate ( VP8_DENOISER * denoiser , int width , int height ) <S2SV_EndBug> <S2SV_StartBug> assert ( denoiser ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( denoiser -> yv12_running_avg [ i ] . buffer_alloc , 0 , <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( denoiser -> yv12_mc_running_avg . buffer_alloc , 0 , <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> struct mct_u232_private * priv ; <S2SV_EndBug> <S2SV_StartBug> priv -> read_urb = port -> serial -> port [ 1 ] -> interrupt_in_urb ; <S2SV_EndBug>
<S2SV_StartBug> ptr = sshpkt_ptr ( ssh , & dlen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( temp_buffer & 0xffffff00 ) != 0x100 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x120 ) <S2SV_EndBug> <S2SV_StartBug> else if ( temp_buffer < 0x130 ) <S2SV_EndBug>
<S2SV_StartBug> unsigned short sel ; <S2SV_EndBug> <S2SV_StartBug> rc = load_segment_descriptor ( ctxt , sel , VCPU_SREG_CS ) ; <S2SV_EndBug> <S2SV_StartBug> ctxt -> _eip = 0 ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ctxt -> _eip , ctxt -> src . valptr , ctxt -> op_bytes ) ; <S2SV_EndBug> <S2SV_StartBug> return X86EMUL_CONTINUE ; <S2SV_EndBug>
<S2SV_StartBug> if ( x & ( 1 << i ) ) return i ; <S2SV_EndBug>
<S2SV_StartBug> or_circuit_t * or_circ = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! CIRCUIT_IS_ORIGIN ( circ ) ) <S2SV_EndBug> <S2SV_StartBug> or_circ = TO_OR_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> relay_send_end_cell_from_edge ( rh . stream_id , circ , end_reason , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_NOTDIRECTORY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_INTERNAL , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> END_STREAM_REASON_EXITPOLICY , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circuit_t * origin_circ = TO_ORIGIN_CIRCUIT ( circ ) ; <S2SV_EndBug> <S2SV_StartBug> origin_circ -> cpath -> prev ) ; <S2SV_EndBug>
<S2SV_StartBug> struct unix_sock * u = unix_sk ( sk ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> umode_t mode = inode -> i_mode ; <S2SV_EndBug> <S2SV_StartBug> else { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> # ifdef __linux <S2SV_EndBug>
<S2SV_StartBug> if ( num < 0 ) return ONIGERR_TOO_BIG_NUMBER ; <S2SV_EndBug>
<S2SV_StartBug> INST_HANDLER ( lds ) { <S2SV_EndBug>
<S2SV_StartBug> for ( col = 0 ; col < imagewidth ; col += tw ) { <S2SV_EndBug>
<S2SV_StartBug> } else <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> goto out ; <S2SV_EndBug>
<S2SV_StartBug> atomic_inc ( & prog -> aux -> refcnt ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( len < tcp_hdrlen ) <S2SV_EndBug> <S2SV_StartBug> if ( skb_tailroom ( skb ) < TCPOLEN_MSS ) { <S2SV_EndBug>
<S2SV_StartBug> up_read ( & card -> controls_rwsem ) ; <S2SV_EndBug> <S2SV_StartBug> & control -> id ) ; <S2SV_EndBug>
<S2SV_StartBug> memmove ( s + j , s + qs , blen - qs ) ; <S2SV_EndBug> <S2SV_StartBug> j += blen - qs ; <S2SV_EndBug>
<S2SV_StartBug> ok = ExprResolveBoolean ( ctx , expr , set_rtrn ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( UNEXPECTED ( Z_ISUNDEF_P ( data ) ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> return - EEXIST ; <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & b [ 4 ] , cmd -> msg , cmd -> msg_len ) ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_idct32x32_add ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_1_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_34_add ( input , dest , stride ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_idct32x32_1024_add ( input , dest , stride ) ; <S2SV_EndBug>
<S2SV_StartBug> static inline void assign_eip_near ( struct x86_emulate_ctxt * ctxt , ulong dst ) <S2SV_EndBug> <S2SV_StartBug> switch ( ctxt -> op_bytes ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> smb_flush_file ( sr , sr -> fid_ofile ) ; <S2SV_EndBug> <S2SV_StartBug> smb_flush_file ( sr , file ) ; <S2SV_EndBug>
<S2SV_StartBug> static void print_bpf_insn ( struct bpf_insn * insn ) <S2SV_EndBug> <S2SV_StartBug> } else if ( BPF_MODE ( insn -> code ) == BPF_IMM ) { <S2SV_EndBug> <S2SV_StartBug> insn -> code , insn -> dst_reg , insn -> imm ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( net != & init_net ) <S2SV_EndBug>
<S2SV_StartBug> uint16 strip , nstrips = TIFFNumberOfStrips ( in ) ; <S2SV_EndBug>
<S2SV_StartBug> s = tcp_recv ( NULL , 4 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ber_in_header ( s , & tagval , & length ) || <S2SV_EndBug> <S2SV_StartBug> in_uint8s ( s , length ) ; <S2SV_EndBug> <S2SV_StartBug> token -> end = token -> p = token -> data ; <S2SV_EndBug>
<S2SV_StartBug> addr . sin_addr . s_addr = htonl ( INADDR_ANY ) ; <S2SV_EndBug>
<S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> char * fpath = NULL , * path1 , * cgdir = NULL , * controller ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { <S2SV_EndBug> <S2SV_StartBug> ret = - EACCES ; <S2SV_EndBug> <S2SV_StartBug> if ( ! caller_is_in_ancestor ( fc -> pid , controller , path1 , NULL ) ) { <S2SV_EndBug> <S2SV_StartBug> return ret ; <S2SV_EndBug>
<S2SV_StartBug> bool_t status ; <S2SV_EndBug> <S2SV_StartBug> # if ( TRACE_LEVEL >= TRACE_LEVEL_DEBUG ) <S2SV_EndBug>
<S2SV_StartBug> if ( ( ( int ) arg >= cdi -> capacity ) ) <S2SV_EndBug>
<S2SV_StartBug> unsigned int random_variable = 0 ; <S2SV_EndBug> <S2SV_StartBug> random_variable = get_random_int ( ) & STACK_RND_MASK ; <S2SV_EndBug>
<S2SV_StartBug> SCSIDiskReq * r ; <S2SV_EndBug> <S2SV_StartBug> r = DO_UPCAST ( SCSIDiskReq , req , req ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( getClientTypeByName ( v [ j ] ) == - 1 ) { <S2SV_EndBug>
<S2SV_StartBug> return send ( ts [ h ] . cmd_fdw , & cmd , sizeof ( cmd ) , 0 ) == sizeof ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> const metadata_uptrdiff_t entries_end = <S2SV_EndBug>
<S2SV_StartBug> dprintk ( 2 , "vm_close<S2SV_blank>%p<S2SV_blank>[count=%d,vma=%08lx-%08lx]\\n" , map , <S2SV_EndBug>
<S2SV_StartBug> const uint32_t c_w = <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < img1 -> d_h ; ++ i ) <S2SV_EndBug> <S2SV_StartBug> img1 -> d_w ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned int blocks ; <S2SV_EndBug> <S2SV_StartBug> blocks = ( ( size - 1 ) / blksize ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> pMap -> range_count = range_count ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges = malloc ( range_count * sizeof ( MappedRange ) ) ; <S2SV_EndBug> <S2SV_StartBug> memset ( pMap -> ranges , 0 , range_count * sizeof ( MappedRange ) ) ; <S2SV_EndBug> <S2SV_StartBug> return - 1 ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges [ range_count - 1 ] . addr = reserve ; <S2SV_EndBug> <S2SV_StartBug> pMap -> ranges [ range_count - 1 ] . length = blocks * blksize ; <S2SV_EndBug> <S2SV_StartBug> next += pMap -> ranges [ i ] . length ; <S2SV_EndBug>
<S2SV_StartBug> sprintf ( url_address , "%.*s" , url_len , url_begin ) ; <S2SV_EndBug>
<S2SV_StartBug> pid_t child = fork ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( rv ) <S2SV_EndBug> <S2SV_StartBug> fs_logger2 ( "clone" , dest ) ; <S2SV_EndBug>
<S2SV_StartBug> re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug>
<S2SV_StartBug> void vp9_tokenize_sb ( VP9_COMP * cpi , TOKENEXTRA * * t , int dry_run , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCKD * const xd = & cpi -> mb . e_mbd ; <S2SV_EndBug> <S2SV_StartBug> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; <S2SV_EndBug> <S2SV_StartBug> const int skip_inc = ! vp9_segfeature_active ( & cm -> seg , mbmi -> segment_id , <S2SV_EndBug> <S2SV_StartBug> struct tokenize_b_args arg = { cpi , xd , t } ; <S2SV_EndBug> <S2SV_StartBug> cm -> counts . skip [ ctx ] [ 1 ] += skip_inc ; <S2SV_EndBug> <S2SV_StartBug> if ( dry_run ) <S2SV_EndBug> <S2SV_StartBug> cm -> counts . skip [ ctx ] [ 0 ] += skip_inc ; <S2SV_EndBug> <S2SV_StartBug> * t = t_backup ; <S2SV_EndBug>
<S2SV_StartBug> if ( cmd & 0x08 ) off |= * delta ++ << 24UL ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( setup_ret = _WM_SetupMidiEvent ( xmi_mdi , xmi_data , 0 ) ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> return KRB5KDC_ERR_BADOPTION ; <S2SV_EndBug> <S2SV_StartBug> server_princ ) ) { <S2SV_EndBug>
<S2SV_StartBug> struct pt_regs * regs , int nmi ) <S2SV_EndBug> <S2SV_StartBug> if ( perf_event_overflow ( event , nmi , & data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> av_log ( avctx , AV_LOG_DEBUG , <S2SV_EndBug>
<S2SV_StartBug> ret = vfs_dedupe_file_range ( file , same ) ; <S2SV_EndBug>
<S2SV_StartBug> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , <S2SV_EndBug>
<S2SV_StartBug> struct cpuinfo_x86 * c ; <S2SV_EndBug>
<S2SV_StartBug> bond_dev -> priv_flags &= ~ IFF_XMIT_DST_RELEASE ; <S2SV_EndBug>
<S2SV_StartBug> size_t size , const uint8_t * * psource , <S2SV_EndBug> <S2SV_StartBug> VP9_COMMON * const cm = & pbi -> common ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> if ( cm -> new_fb_idx >= 0 && cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count == 0 ) <S2SV_EndBug> <S2SV_StartBug> cm -> release_fb_cb ( cm -> cb_priv , <S2SV_EndBug> <S2SV_StartBug> & cm -> frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( setjmp ( cm -> error . jmp ) ) { <S2SV_EndBug> <S2SV_StartBug> cm -> error . setjmp = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) <S2SV_EndBug> <S2SV_StartBug> retcode = vp9_decode_frame ( pbi , source , source + size , psource ) ; <S2SV_EndBug> <S2SV_StartBug> if ( retcode < 0 ) { <S2SV_EndBug> <S2SV_StartBug> cm -> error . error_code = VPX_CODEC_ERROR ; <S2SV_EndBug> <S2SV_StartBug> cm -> error . setjmp = 0 ; <S2SV_EndBug> <S2SV_StartBug> swap_frame_buffers ( pbi ) ; <S2SV_EndBug>
<S2SV_StartBug> r2 . re -> flags | RE_FLAGS_SCAN , <S2SV_EndBug>
<S2SV_StartBug> int_mv * prev_golden_ref_mv , <S2SV_EndBug> <S2SV_StartBug> MACROBLOCK * const x = & cpi -> mb ; <S2SV_EndBug>
<S2SV_StartBug> return - EFAULT ; <S2SV_EndBug>
<S2SV_StartBug> void ntlm_write_message_header ( wStream * s , NTLM_MESSAGE_HEADER * header ) <S2SV_EndBug>
<S2SV_StartBug> return TRUE ; <S2SV_EndBug>
<S2SV_StartBug> for ( ( pad = w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) <S2SV_EndBug>
<S2SV_StartBug> while ( c && which > 0 ) { <S2SV_EndBug> <S2SV_StartBug> c = c -> next ; <S2SV_EndBug>
<S2SV_StartBug> set_caps ( ) ; <S2SV_EndBug> <S2SV_StartBug> # endif <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> opj_write_bytes ( p_data , J2K_MS_SOD , <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> memcpy ( ( u8 * ) & priv -> curr_bss_params . bss_descriptor . <S2SV_EndBug>
<S2SV_StartBug> usleep ( 200000 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! del_timer ( & task -> slow_task -> timer ) ) <S2SV_EndBug>
<S2SV_StartBug> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; <S2SV_EndBug>
<S2SV_StartBug> ue -> info = * info ; <S2SV_EndBug>
<S2SV_StartBug> truncate_pagecache ( inode , inode -> i_size ) ; <S2SV_EndBug> <S2SV_StartBug> ext4_truncate ( inode ) ; <S2SV_EndBug>
<S2SV_StartBug> pid_t my_pid = getpid ( ) ; <S2SV_EndBug>
<S2SV_StartBug> UEV_PARSE ( "num_reorder_pics" , value , ps_bitstrm ) ; <S2SV_EndBug> <S2SV_StartBug> UEV_PARSE ( "max_latency_increase" , value , ps_bitstrm ) ; <S2SV_EndBug>
<S2SV_StartBug> key_put ( ci -> ci_keyring_key ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! mx_is_imap ( path ) || imap_parse_path ( path , & mx ) || ! mx . mbox ) <S2SV_EndBug> <S2SV_StartBug> snprintf ( mbox , sizeof ( mbox ) , "%smailboxes<S2SV_blank>\\"%s\\"" , subscribe ? "" : "un" , path ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) ) <S2SV_EndBug>
<S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> if ( nsops < 1 ) <S2SV_EndBug>
<S2SV_StartBug> vp8_sub_pixel_variance8x8 ( uptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_sub_pixel_variance8x8 ( vptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_variance8x8 ( uptr , pre_stride , <S2SV_EndBug> <S2SV_StartBug> vp8_variance8x8 ( vptr , pre_stride , <S2SV_EndBug>
<S2SV_StartBug> static void super_block_uvrd ( const VP9_COMP * cpi , MACROBLOCK * x , <S2SV_EndBug> <S2SV_StartBug> TX_SIZE uv_txfm_size = get_uv_tx_size ( mbmi ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ref_best_rd < 0 ) <S2SV_EndBug> <S2SV_StartBug> goto term ; <S2SV_EndBug> <S2SV_StartBug> if ( is_inter_block ( mbmi ) ) { <S2SV_EndBug> <S2SV_StartBug> ref_best_rd , plane , bsize , uv_txfm_size , <S2SV_EndBug> <S2SV_StartBug> goto term ; <S2SV_EndBug> <S2SV_StartBug> return ; <S2SV_EndBug>
<S2SV_StartBug> int sctp_verify_asconf ( const struct sctp_association * asoc , <S2SV_EndBug> <S2SV_StartBug> struct sctp_paramhdr * param_hdr , void * chunk_end , <S2SV_EndBug> <S2SV_StartBug> sctp_addip_param_t * asconf_param ; <S2SV_EndBug> <S2SV_StartBug> int length , plen ; <S2SV_EndBug> <S2SV_StartBug> param . v = ( sctp_paramhdr_t * ) param_hdr ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ! vct_iscrlf ( * p ) ) ; <S2SV_EndBug> <S2SV_StartBug> assert ( ! vct_iscrlf ( * p ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vct_iscrlf ( * p ) ) { <S2SV_EndBug> <S2SV_StartBug> while ( ! vct_iscrlf ( * p ) ) <S2SV_EndBug> <S2SV_StartBug> if ( vct_iscrlf ( * p ) ) <S2SV_EndBug> <S2SV_StartBug> while ( * p != '\\0' && ! vct_iscrlf ( * p ) ) <S2SV_EndBug>
<S2SV_StartBug> spin_lock_irqsave ( & mpu -> input_lock , flags ) ; <S2SV_EndBug> <S2SV_StartBug> while ( readw ( mpu -> dev -> MIDQ + JQS_wTail ) != <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( mpu -> dev -> MIDQ + JQS_wHead ) + 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( vma -> vm_ops ) { <S2SV_EndBug> <S2SV_StartBug> pmd , flags , entry ) ; <S2SV_EndBug> <S2SV_StartBug> pte , pmd , flags ) ; <S2SV_EndBug>
<S2SV_StartBug> switch ( dip -> di_format ) { <S2SV_EndBug>
<S2SV_StartBug> it = item_get ( key , nkey , c , DO_UPDATE ) ; <S2SV_EndBug>
<S2SV_StartBug> strncpy ( hid -> name , req -> name , 128 ) ; <S2SV_EndBug>
<S2SV_StartBug> jas_matrix_t * jas_matrix_create ( int numrows , int numcols ) <S2SV_EndBug> <S2SV_StartBug> int i ; <S2SV_EndBug>
<S2SV_StartBug> struct ext4_ext_path * path ) <S2SV_EndBug> <S2SV_StartBug> struct ext4_extent * ex ; <S2SV_EndBug> <S2SV_StartBug> ext_debug ( "ext4_convert_unwritten_extents_endio:<S2SV_blank>inode<S2SV_blank>%lu,<S2SV_blank>logical" <S2SV_EndBug> <S2SV_StartBug> ( unsigned long long ) le32_to_cpu ( ex -> ee_block ) , <S2SV_EndBug>
<S2SV_StartBug> char * prop_chunk = malloc ( ( size_t ) dff_chunk_header . ckDataSize ) ; <S2SV_EndBug>
<S2SV_StartBug> int family = sk -> sk_family ; <S2SV_EndBug> <S2SV_StartBug> if ( addr_len ) { <S2SV_EndBug> <S2SV_StartBug> sin = ( struct sockaddr_in * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> if ( isk -> cmsg_flags ) <S2SV_EndBug> <S2SV_StartBug> sin6 = ( struct sockaddr_in6 * ) msg -> msg_name ; <S2SV_EndBug> <S2SV_StartBug> IP6CB ( skb ) -> iif ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! port -> interrupt_in_urb ) { <S2SV_EndBug>
<S2SV_StartBug> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTab , 0 ) ; <S2SV_EndBug> <S2SV_StartBug> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; <S2SV_EndBug>
<S2SV_StartBug> return write ( fd , & event , sizeof ( event ) ) ; <S2SV_EndBug>
<S2SV_StartBug> str = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) count , sizeof ( * str ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt = inet_rsk ( req ) -> opt ; <S2SV_EndBug> <S2SV_StartBug> ( opt && opt -> srr ) ? opt -> faddr : ireq -> rmt_addr , <S2SV_EndBug> <S2SV_StartBug> if ( opt && opt -> is_strictroute && rt -> rt_dst != rt -> rt_gateway ) <S2SV_EndBug>
<S2SV_StartBug> field [ nf ] = lp ; <S2SV_EndBug> <S2SV_StartBug> if ( nf > MAXDATEFIELDS ) <S2SV_EndBug>
<S2SV_StartBug> int a = getnum ( L , fmt , MAXALIGN ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug> <S2SV_StartBug> for ( plane = 1 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) <S2SV_EndBug>
<S2SV_StartBug> if ( i > ( sizeof ( outbuff ) - 20 ) ) { <S2SV_EndBug>
<S2SV_StartBug> static int test_candidate_kf ( struct twopass_rc * twopass , <S2SV_EndBug> <S2SV_StartBug> if ( ( this_frame -> pcnt_second_ref < 0.10 ) && <S2SV_EndBug> <S2SV_StartBug> ( next_frame -> pcnt_second_ref < 0.10 ) && <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) ) < 2.5 ) && <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) > 0.40 ) || <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( this_frame -> intra_error ) > 0.40 ) || <S2SV_EndBug> <S2SV_StartBug> DOUBLE_DIVIDE_CHECK ( next_frame -> coded_error ) ) > 3.5 ) ) ) ) ) { <S2SV_EndBug> <S2SV_StartBug> double next_iiratio = ( IIKFACTOR1 * local_next_frame . intra_error / <S2SV_EndBug> <S2SV_StartBug> if ( next_iiratio > RMAX ) <S2SV_EndBug>
<S2SV_StartBug> for ( j = 1 ; j <= len ; j ++ ) { <S2SV_EndBug>
<S2SV_StartBug> size_t maxlen = 3 * len ; <S2SV_EndBug>
<S2SV_StartBug> if ( data -> multi_easy ) <S2SV_EndBug> <S2SV_StartBug> curl_multi_cleanup ( data -> multi_easy ) ; <S2SV_EndBug>
<S2SV_StartBug> while ( readw ( chip -> DSPQ + JQS_wTail ) != readw ( chip -> DSPQ + JQS_wHead ) ) { <S2SV_EndBug> <S2SV_StartBug> wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> m = PyModule_Create ( & _astmodule3 ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ( child -> ptrace & PT_PTRACED ) && child -> parent == current ) { <S2SV_EndBug> <S2SV_StartBug> spin_lock_irq ( & child -> sighand -> siglock ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ignore_state || ( task_is_traced ( child ) && <S2SV_EndBug> <S2SV_StartBug> ret = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( ! ret && ! ignore_state ) <S2SV_EndBug> <S2SV_StartBug> ret = wait_task_inactive ( child , TASK_TRACED ) ? 0 : - ESRCH ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( user ) ; <S2SV_EndBug>
<S2SV_StartBug> error = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; <S2SV_EndBug> <S2SV_StartBug> if ( error == 0 ) <S2SV_EndBug>
<S2SV_StartBug> char * curl_cmd = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( ! checkCurl ( ) ) { <S2SV_EndBug> <S2SV_StartBug> symbol_store_path = r_str_escape ( opt -> symbol_store_path ) ; <S2SV_EndBug> <S2SV_StartBug> abspath_to_archive = r_str_newf ( "%s%s%s%s%s%s%s" , <S2SV_EndBug> <S2SV_StartBug> const char * cabextractor = "cabextract" ; <S2SV_EndBug> <S2SV_StartBug> extractor_cmd = r_str_newf ( format , cabextractor , abspath_to_dir , abspath_to_archive ) ; <S2SV_EndBug> <S2SV_StartBug> eprintf ( "Attempting<S2SV_blank>to<S2SV_blank>download<S2SV_blank>compressed<S2SV_blank>pdb<S2SV_blank>in<S2SV_blank>%s\\n" , abspath_to_archive ) ; <S2SV_EndBug> <S2SV_StartBug> if ( opt -> extract > 0 ) { <S2SV_EndBug> <S2SV_StartBug> R_FREE ( curl_cmd ) ; <S2SV_EndBug> <S2SV_StartBug> res = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( ( cmd_ret = r_sys_cmd ( curl_cmd ) != 0 ) ) { <S2SV_EndBug>
<S2SV_StartBug> spl_handler_ArrayObject . get_debug_info = spl_array_get_debug_info ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( cmd ) ; <S2SV_EndBug>
<S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , "mode" ) == 0 && ntokens >= 3 && <S2SV_EndBug> <S2SV_StartBug> } else if ( strcmp ( tokens [ 1 ] . value , "temp_ttl" ) == 0 && ntokens >= 3 && <S2SV_EndBug>
<S2SV_StartBug> ZeroMemory ( & credssp -> authInfo , sizeof ( SecBuffer ) ) ; <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && src -> data [ plane ] ; plane ++ ) <S2SV_EndBug>
<S2SV_StartBug> int aff = sqlite3TableColumnAffinity ( pExpr -> y . pTab , pExpr -> iColumn ) ; <S2SV_EndBug>
<S2SV_StartBug> kfree ( inet -> opt ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! c -> c_normalize && ! init_normalization ( c ) ) { <S2SV_EndBug> <S2SV_StartBug> PyTuple_SET_ITEM ( c -> c_normalize_args , 1 , id ) ; <S2SV_EndBug> <S2SV_StartBug> id2 = PyObject_Call ( c -> c_normalize , c -> c_normalize_args , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( pdu -> securityStateRef && <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> while ( impeg2d_bit_stream_nxt ( ps_stream , MB_ESCAPE_CODE_LEN ) == MB_ESCAPE_CODE ) <S2SV_EndBug>
<S2SV_StartBug> struct dw2102_state * state = d -> priv ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x02 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 0 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0xe ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 1 ] = 0x83 ; <S2SV_EndBug> <S2SV_StartBug> obuf [ 2 ] = 1 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> obuf [ 0 ] = 0x51 ; <S2SV_EndBug> <S2SV_StartBug> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 1 , 0 ) < 0 ) <S2SV_EndBug> <S2SV_StartBug> err ( "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_EndBug>
<S2SV_StartBug> ulonglong tmp ; <S2SV_EndBug> <S2SV_StartBug> * val = ( tmp & 0x80000000 ) ? ( - JAS_CAST ( longlong , ( ( ( ~ tmp ) & <S2SV_EndBug> <S2SV_StartBug> 0x7fffffff ) + 1 ) ) ) : JAS_CAST ( longlong , tmp ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( perf_event_overflow ( event , 0 , data , regs ) ) <S2SV_EndBug>
<S2SV_StartBug> mrb_value value ; <S2SV_EndBug> <S2SV_StartBug> fiber_check_cfunc ( mrb , c ) ; <S2SV_EndBug> <S2SV_StartBug> if ( resume && c -> status == MRB_FIBER_TRANSFERRED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_RUNNING || c -> status == MRB_FIBER_RESUMED ) { <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_TERMINATED ) { <S2SV_EndBug> <S2SV_StartBug> mrb -> c -> status = resume ? MRB_FIBER_RESUMED : MRB_FIBER_TRANSFERRED ; <S2SV_EndBug> <S2SV_StartBug> if ( c -> status == MRB_FIBER_CREATED ) { <S2SV_EndBug> <S2SV_StartBug> if ( len >= c -> stend - c -> stack ) { <S2SV_EndBug> <S2SV_StartBug> fiber_switch_context ( mrb , c ) ; <S2SV_EndBug>
<S2SV_StartBug> n = s -> method -> ssl_get_message ( s , <S2SV_EndBug> <S2SV_StartBug> if ( ! ok ) return ( ( int ) n ) ; <S2SV_EndBug> <S2SV_StartBug> # ifndef OPENSSL_NO_PSK <S2SV_EndBug> <S2SV_StartBug> if ( s -> s3 -> tmp . new_cipher -> algorithm_mkey & SSL_kPSK ) <S2SV_EndBug>
<S2SV_StartBug> static void write_mv_update ( const vp9_tree_index * tree , <S2SV_EndBug> <S2SV_StartBug> vp9_prob probs [ ] , <S2SV_EndBug> <S2SV_StartBug> int n , vp9_writer * w ) { <S2SV_EndBug>
<S2SV_StartBug> if ( val == 0 && sp -> do_auto_asconf ) { <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> int len = mutt_b64_decode ( buffer , encoded ) ; <S2SV_EndBug>
<S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> void vp9_iht4x4_16_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> { idct4 , idct4 } , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 4 * 4 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 4 ] , temp_out [ 4 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 4 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 4 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! chrooted && strncmp ( dir , home , strlen ( home ) ) ) { <S2SV_EndBug>
<S2SV_StartBug> pinctrl_unregister ( gpio_dev -> pctrl ) ; <S2SV_EndBug>
<S2SV_StartBug> size_t l = 0 ; <S2SV_EndBug> <S2SV_StartBug> ptr += strspn ( ptr , "\\r\\n\\t<S2SV_blank>" ) ; <S2SV_EndBug> <S2SV_StartBug> l = strcspn ( ptr , "\\r\\n\\t<S2SV_blank>" ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( likely ( walk . nbytes == nbytes ) ) <S2SV_EndBug>
<S2SV_StartBug> rctx -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 6 ] ) ; <S2SV_EndBug>
<S2SV_StartBug> int tlen ; <S2SV_EndBug> <S2SV_StartBug> ND_TCHECK ( * vqp_common_header ) ; <S2SV_EndBug> <S2SV_StartBug> vqp_obj_type = EXTRACT_32BITS ( vqp_obj_tlv -> obj_type ) ; <S2SV_EndBug> <S2SV_StartBug> switch ( vqp_obj_type ) { <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "%s<S2SV_blank>(0x%08x)" , ipaddr_string ( ndo , tptr ) , EXTRACT_32BITS ( tptr ) ) ) ; <S2SV_EndBug> <S2SV_StartBug> case VQP_OBJ_MAC_NULL : <S2SV_EndBug>
<S2SV_StartBug> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { <S2SV_EndBug>
<S2SV_StartBug> exit_io_context ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) ) { <S2SV_EndBug>
<S2SV_StartBug> static void pcrypt_free ( struct crypto_instance * inst ) <S2SV_EndBug> <S2SV_StartBug> struct pcrypt_instance_ctx * ctx = crypto_instance_ctx ( inst ) ; <S2SV_EndBug>
<S2SV_StartBug> uint8_t value ; <S2SV_EndBug> <S2SV_StartBug> 0 , reg , & value , 1 , 1000 ) ; <S2SV_EndBug> <S2SV_StartBug> return ret >= 0 ? value : ret ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> int main_loop ( int argc , const char * * argv_ ) { <S2SV_EndBug> <S2SV_StartBug> int do_md5 = 0 , progress = 0 ; <S2SV_EndBug> <S2SV_StartBug> int ec_enabled = 0 ; <S2SV_EndBug> <S2SV_StartBug> vpx_codec_dec_cfg_t cfg = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> int frame_avail , got_data ; <S2SV_EndBug> <S2SV_StartBug> struct ExternalFrameBufferList ext_fb_list = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct VpxDecInputContext input = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct VpxInputContext vpx_input_ctx = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> struct WebmInputContext webm_ctx = { 0 } ; <S2SV_EndBug> <S2SV_StartBug> input . vpx_input_ctx = & vpx_input_ctx ; <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & use_i420 , argi ) ) { <S2SV_EndBug> <S2SV_StartBug> } else if ( arg_match ( & arg , & flipuvarg , argi ) ) <S2SV_EndBug> <S2SV_StartBug> else if ( arg_match ( & arg , & verbosearg , argi ) ) <S2SV_EndBug> <S2SV_StartBug> num_external_frame_buffers = arg_parse_uint ( & arg ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! fn ) <S2SV_EndBug> <S2SV_StartBug> usage_exit ( ) ; <S2SV_EndBug> <S2SV_StartBug> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>\'%s\'" , strcmp ( fn , "-" ) ? fn : "stdin" ) ; <S2SV_EndBug> <S2SV_StartBug> "<S2SV_blank>try<S2SV_blank>--i420<S2SV_blank>or<S2SV_blank>--yv12.\\n" ) ; <S2SV_EndBug> <S2SV_StartBug> ( ec_enabled ? VPX_CODEC_USE_ERROR_CONCEALMENT : 0 ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_dec_init ( & decoder , interface -> interface ( ) , & cfg , dec_flags ) ) { <S2SV_EndBug> <S2SV_StartBug> int corrupted ; <S2SV_EndBug> <S2SV_StartBug> goto fail ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> vpx_usec_timer_start ( & timer ) ; <S2SV_EndBug> <S2SV_StartBug> if ( vpx_codec_control ( & decoder , VP8D_GET_FRAME_CORRUPTED , & corrupted ) ) { <S2SV_EndBug> <S2SV_StartBug> warn ( "Failed<S2SV_blank>VP8_GET_FRAME_CORRUPTED:<S2SV_blank>%s" , vpx_codec_error ( & decoder ) ) ; <S2SV_EndBug> <S2SV_StartBug> scaled_img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 , display_width , <S2SV_EndBug> <S2SV_StartBug> display_height , 16 ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_image_scale ( img , scaled_img , kFilterBox ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( frame_out == 1 ) { <S2SV_EndBug> <S2SV_StartBug> & vpx_input_ctx . framerate , img -> fmt ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug> <S2SV_StartBug> if ( stop_after && frame_in >= stop_after ) <S2SV_EndBug> <S2SV_StartBug> if ( scaled_img ) vpx_img_free ( scaled_img ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( copy_from_user ( & tx32 , utp , sizeof ( struct compat_timex ) ) ) <S2SV_EndBug>
<S2SV_StartBug> if ( key_is_instantiated ( key ) ) { <S2SV_EndBug>
<S2SV_StartBug> return __blkdev_driver_ioctl ( fc -> dev -> bdev , fc -> dev -> mode , cmd , arg ) ; <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , "prestring=%s" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ( len = strlen ( buf ) ) > L_BUF_SIZE - 3 ) { <S2SV_EndBug> <S2SV_StartBug> ret = sscanf ( argv [ i ] + 1 , "protos=%s" , buf ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s" , <S2SV_EndBug>
<S2SV_StartBug> char buf [ L_BUF_SIZE ] ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%s.data.%d" , gplot -> rootname , gplot -> nplots ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( buf , L_BUF_SIZE , "%f<S2SV_blank>%f\\n" , valx , valy ) ; <S2SV_EndBug>
<S2SV_StartBug> struct mount * n , * p ; <S2SV_EndBug> <S2SV_StartBug> if ( p == dest_master || IS_MNT_MARKED ( p ) ) { <S2SV_EndBug>
<S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_NO_SUCH_OBJECT , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INAPPROPRIATE_AUTH , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug> <S2SV_StartBug> slapi_send_ldap_result ( pb , LDAP_INVALID_CREDENTIALS , NULL , NULL , 0 , NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> vpn_packet_t outpkt ; <S2SV_EndBug>
<S2SV_StartBug> last_source = source_mnt ; <S2SV_EndBug>
<S2SV_StartBug> if ( ! inode -> i_op -> set_acl || ! IS_POSIXACL ( inode ) ) <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , pacl , ACL_TYPE_ACCESS ) ; <S2SV_EndBug> <S2SV_StartBug> goto out_release ; <S2SV_EndBug> <S2SV_StartBug> host_error = inode -> i_op -> set_acl ( inode , dpacl , <S2SV_EndBug> <S2SV_StartBug> out_release : <S2SV_EndBug>
<S2SV_StartBug> assert ( bi != NULL ) ; <S2SV_EndBug>
<S2SV_StartBug> unsigned long off ; <S2SV_EndBug> <S2SV_StartBug> if ( vma -> vm_pgoff > ( ~ 0UL >> PAGE_SHIFT ) ) <S2SV_EndBug> <S2SV_StartBug> off = vma -> vm_pgoff << PAGE_SHIFT ; <S2SV_EndBug> <S2SV_StartBug> if ( fb -> fb_mmap ) { <S2SV_EndBug> <S2SV_StartBug> fb_pgprotect ( file , vma , off ) ; <S2SV_EndBug>
<S2SV_StartBug> spl_handler_ArrayObject . get_debug_info = spl_array_get_debug_info ; <S2SV_EndBug>
<S2SV_StartBug> if ( mainprog_ptr -> width > INT_MAX / mainprog_ptr -> height ) { <S2SV_EndBug> <S2SV_StartBug> if ( ( mainprog_ptr -> rgba_data = malloc ( rowbytes * mainprog_ptr -> height ) ) == NULL ) { <S2SV_EndBug>
<S2SV_StartBug> const uint8_t * p , u_int length , u_int caplen ) <S2SV_EndBug> <S2SV_StartBug> if ( caplen <= 1 ) { <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug> <S2SV_StartBug> if ( caplen > 1 ) <S2SV_EndBug> <S2SV_StartBug> print_unknown_data ( ndo , p , "\\n\\t" , caplen ) ; <S2SV_EndBug>
<S2SV_StartBug> xmep -> proc = EXTRACT_32BITS ( & rp -> rm_call . cb_proc ) ; <S2SV_EndBug>
<S2SV_StartBug> flush_rq -> mq_ctx = first_rq -> mq_ctx ; <S2SV_EndBug> <S2SV_StartBug> flush_rq -> tag = first_rq -> tag ; <S2SV_EndBug>
<S2SV_StartBug> overrun = timr -> it_overrun_last ; <S2SV_EndBug>
<S2SV_StartBug> msg -> msg_namelen = 0 ; <S2SV_EndBug>
<S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug> <S2SV_StartBug> skipsize = LOGICAL_BLOCK_SIZE * vd -> location ; <S2SV_EndBug>
<S2SV_StartBug> if ( key_bytes_len < GROUP_KEY_MIN_LEN || key_bytes_len > eapol_len - sizeof ( EAPOL_RSN_KEY ) ) { <S2SV_EndBug>
<S2SV_StartBug> memcpy ( & ualg -> cru_name , & alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_driver_name , & alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> memcpy ( & ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> CRYPTO_MAX_ALG_NAME ) ; <S2SV_EndBug> <S2SV_StartBug> snprintf ( rl . type , CRYPTO_MAX_ALG_NAME , "%s" , "larval" ) ; <S2SV_EndBug>
<S2SV_StartBug> entries = kmalloc ( sizeof ( * entries ) * cmap -> len , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> case LZX_BLOCKTYPE_UNCOMPRESSED : <S2SV_EndBug>
<S2SV_StartBug> int ctr_id , va_list args ) { <S2SV_EndBug> <S2SV_StartBug> vp8_postproc_cfg_t * config = va_arg ( args , vp8_postproc_cfg_t * ) ; <S2SV_EndBug> <S2SV_StartBug> ( void ) ctr_id ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memset ( seg -> tree_probs , 255 , sizeof ( seg -> tree_probs ) ) ; <S2SV_EndBug>
<S2SV_StartBug> jas_eprintf ( "box<S2SV_blank>type<S2SV_blank>%s\\n" , box -> info -> name ) ; <S2SV_EndBug>
<S2SV_StartBug> pgprot_t prot = __get_dma_pgprot ( attrs , pgprot_kernel ) ; <S2SV_EndBug>
<S2SV_StartBug> wait_for_unix_gc ( ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( other ) ; <S2SV_EndBug> <S2SV_StartBug> if ( sock_flag ( other , SOCK_DEAD ) ) { <S2SV_EndBug> <S2SV_StartBug> err = 0 ; <S2SV_EndBug> <S2SV_StartBug> unix_state_lock ( sk ) ; <S2SV_EndBug> <S2SV_StartBug> unix_peer ( sk ) = NULL ; <S2SV_EndBug> <S2SV_StartBug> if ( unix_peer ( other ) != sk && unix_recvq_full ( other ) ) { <S2SV_EndBug> <S2SV_StartBug> if ( ! timeo ) { <S2SV_EndBug> <S2SV_StartBug> goto out_unlock ; <S2SV_EndBug> <S2SV_StartBug> timeo = unix_wait_for_peer ( other , timeo ) ; <S2SV_EndBug> <S2SV_StartBug> unix_state_unlock ( other ) ; <S2SV_EndBug>
<S2SV_StartBug> alarm_timer = alarm_new ( ) ; <S2SV_EndBug>
<S2SV_StartBug> # line 52 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 53 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 54 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 55 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 56 "dt_test2.pgc" <S2SV_EndBug> <S2SV_StartBug> # line 57 "dt_test2.pgc" <S2SV_EndBug>
<S2SV_StartBug> if ( netal == 0 ) <S2SV_EndBug> <S2SV_StartBug> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s" , etheraddr_string ( ndo , snpa ) ) ) ; <S2SV_EndBug>
<S2SV_StartBug> lua_newtable ( L ) ; <S2SV_EndBug>
<S2SV_StartBug> struct hns_roce_ib_alloc_ucontext_resp resp ; <S2SV_EndBug>
<S2SV_StartBug> EXT4_DESC_PER_BLOCK ( sb ) ; <S2SV_EndBug>
<S2SV_StartBug> packet_size = le16_to_cpu ( alt -> endpoint [ 0 ] . desc . wMaxPacketSize ) ; <S2SV_EndBug>
<S2SV_StartBug> fd = open ( path , O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY , mode > 0 ? mode : 0644 ) ; <S2SV_EndBug>
<S2SV_StartBug> dev -> header_ops = NULL ; <S2SV_EndBug>
<S2SV_StartBug> if ( rdf_parser -> uri_filter ) <S2SV_EndBug>
<S2SV_StartBug> if ( fd == - 1 ) ABRT ( EBADF , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>graphics<S2SV_blank>transmission<S2SV_blank>with<S2SV_blank>error:<S2SV_blank>[%d]<S2SV_blank>%s" , fname , errno , strerror ( errno ) ) ; <S2SV_EndBug>
<S2SV_StartBug> rds_info_copy ( iter , & minfo , sizeof ( minfo ) ) ; <S2SV_EndBug>
<S2SV_StartBug> struct ip_options * opt ; <S2SV_EndBug> <S2SV_StartBug> memcpy ( cork -> opt , opt , sizeof ( struct ip_options ) + opt -> optlen ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( snprintf ( spath , sizeof ( spath ) , var , iface ) >= sizeof ( spath ) ) <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> assert_se ( touch_file ( path , true , USEC_INFINITY , UID_INVALID , GID_INVALID , 0 ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> const vp9_prob * context_tree , <S2SV_EndBug>
<S2SV_StartBug> strlcpy ( ualg -> cru_name , alg -> cra_name , sizeof ( ualg -> cru_name ) ) ; <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_driver_name , alg -> cra_driver_name , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( ualg -> cru_module_name , module_name ( alg -> cra_module ) , <S2SV_EndBug> <S2SV_StartBug> strlcpy ( rl . type , "larval" , sizeof ( rl . type ) ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) <S2SV_EndBug> <S2SV_StartBug> return - EBUSY ; <S2SV_EndBug> <S2SV_StartBug> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) <S2SV_EndBug> <S2SV_StartBug> return 0 ; <S2SV_EndBug>
<S2SV_StartBug> usb_conv_info -> class_data = u3v_conv_info ; <S2SV_EndBug>
<S2SV_StartBug> len -= cut ; <S2SV_EndBug>
<S2SV_StartBug> void vp9_iht8x8_64_add_c ( const int16_t * input , uint8_t * dest , int stride , <S2SV_EndBug> <S2SV_StartBug> int16_t out [ 8 * 8 ] ; <S2SV_EndBug> <S2SV_StartBug> int16_t * outptr = out ; <S2SV_EndBug> <S2SV_StartBug> int16_t temp_in [ 8 ] , temp_out [ 8 ] ; <S2SV_EndBug> <S2SV_StartBug> for ( j = 0 ; j < 8 ; ++ j ) <S2SV_EndBug> <S2SV_StartBug> dest [ j * stride + i ] = clip_pixel ( ROUND_POWER_OF_TWO ( temp_out [ j ] , 5 ) <S2SV_EndBug> <S2SV_StartBug> + dest [ j * stride + i ] ) ; <S2SV_EndBug>
<S2SV_StartBug> static size_t scanned ; <S2SV_EndBug>
<S2SV_StartBug> if ( test_opt ( sbi , FLUSH_MERGE ) && ! f2fs_readonly ( sbi -> sb ) ) { <S2SV_EndBug>
<S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug> <S2SV_StartBug> "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , <S2SV_EndBug>
<S2SV_StartBug> len = file ? file -> size : 4096 ; <S2SV_EndBug>
<S2SV_StartBug> skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , <S2SV_EndBug>
<S2SV_StartBug> static int set_registers ( rtl8150_t * dev , u16 indx , u16 size , void * data ) <S2SV_EndBug> <S2SV_StartBug> return usb_control_msg ( dev -> udev , usb_sndctrlpipe ( dev -> udev , 0 ) , <S2SV_EndBug> <S2SV_StartBug> indx , 0 , data , size , 500 ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( * rsize >= 30 && rdesc [ 29 ] == 0x05 && rdesc [ 30 ] == 0x09 ) { <S2SV_EndBug>
<S2SV_StartBug> scratch = newscratch = malloc ( 2 * data -> set . buffer_size ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> char * req_name [ ] = { "Module" , "Expression" , "Interactive" } ; <S2SV_EndBug> <S2SV_StartBug> assert ( 0 <= mode && mode <= 2 ) ; <S2SV_EndBug>
<S2SV_StartBug> int n , len ; <S2SV_EndBug> <S2SV_StartBug> memset ( & facilities , 0x00 , sizeof ( struct rose_facilities_struct ) ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! rose_parse_facilities ( skb -> data + len + 4 , & facilities ) ) { <S2SV_EndBug>
<S2SV_StartBug> case BGP_CAPCODE_MP : <S2SV_EndBug>
<S2SV_StartBug> iPinCount = iACLen - 1 ; <S2SV_EndBug>
<S2SV_StartBug> if ( ctx -> state == BODY_CHUNK_END ) { <S2SV_EndBug> <S2SV_StartBug> ctx -> state = BODY_CHUNK ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits = sizeof ( long ) * 8 ; <S2SV_EndBug> <S2SV_StartBug> if ( c == ';' || c == CR ) { <S2SV_EndBug> <S2SV_StartBug> else if ( c == LF ) { <S2SV_EndBug> <S2SV_StartBug> int xvalue = 0 ; <S2SV_EndBug> <S2SV_StartBug> continue ; <S2SV_EndBug> <S2SV_StartBug> return APR_EGENERAL ; <S2SV_EndBug> <S2SV_StartBug> ctx -> chunkbits -= 4 ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> pdf = calloc ( 1 , sizeof ( pdf_t ) ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( n ) + 1 ) ; <S2SV_EndBug> <S2SV_StartBug> pdf -> name = malloc ( strlen ( "Unknown" ) + 1 ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ( size & ( size - 1 ) ) == 0 ) ; <S2SV_EndBug>
<S2SV_StartBug> krb5_data rspac ; <S2SV_EndBug> <S2SV_StartBug> krbtgt_out , <S2SV_EndBug>
<S2SV_StartBug> int is_valid ; <S2SV_EndBug> <S2SV_StartBug> giterr_clear ( ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( ioctl ( slot -> fd , FIONREAD , size ) == 0 ) { <S2SV_EndBug>
<S2SV_StartBug> if ( ret != ARCHIVE_OK && ret != ARCHIVE_WARN ) <S2SV_EndBug> <S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , sfar ) ; <S2SV_EndBug>
<S2SV_StartBug> pkt = ctx -> iface -> enc . get_cx_data ( ctx -> priv -> alg_priv , iter ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( vp9_segfeature_active ( seg , segment_id , SEG_LVL_ALT_Q ) ) { <S2SV_EndBug> <S2SV_StartBug> const int data = vp9_get_segdata ( seg , segment_id , SEG_LVL_ALT_Q ) ; <S2SV_EndBug>
<S2SV_StartBug> config -> listeners [ config -> listener_count - 1 ] . security_options . password_file = config -> default_listener . security_options . password_file ; <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( dest_ptr2 , src_ptr2 , plane_stride ) ; <S2SV_EndBug>
<S2SV_StartBug> static void <S2SV_EndBug> <S2SV_StartBug> horDiff32 ( tif , cp0 , cc ) ; <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> void vp9_encode_mv ( VP9_COMP * cpi , vp9_writer * w , <S2SV_EndBug> <S2SV_StartBug> if ( ! cpi -> dummy_packing && cpi -> sf . auto_mv_step_size ) { <S2SV_EndBug>
<S2SV_StartBug> for ( out = escaped , len = 0 ; * text ; ++ len , ++ out , ++ text ) { <S2SV_EndBug>
<S2SV_StartBug> if ( cm -> last_frame_seg_map ) <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> last_frame_seg_map , 0 , ( cm -> mi_rows * cm -> mi_cols ) ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_mode_probs ( & cm -> fc ) ; <S2SV_EndBug> <S2SV_StartBug> vp9_init_mv_probs ( cm ) ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ i ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> cm -> frame_contexts [ cm -> frame_context_idx ] = cm -> fc ; <S2SV_EndBug> <S2SV_StartBug> if ( frame_is_intra_only ( cm ) ) <S2SV_EndBug> <S2SV_StartBug> vpx_memset ( cm -> prev_mip , 0 , cm -> mi_stride * ( cm -> mi_rows + 1 ) * <S2SV_EndBug> <S2SV_StartBug> sizeof ( * cm -> prev_mip ) ) ; <S2SV_EndBug>
<S2SV_StartBug> rcu_read_lock ( ) ; <S2SV_EndBug> <S2SV_StartBug> if ( ! head -> dev ) <S2SV_EndBug> <S2SV_StartBug> if ( qp -> user == IP_DEFRAG_CONNTRACK_IN && ! skb_dst ( head ) ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( track -> timescale > UINT16_MAX ) { <S2SV_EndBug>
<S2SV_StartBug> break ; <S2SV_EndBug>
<S2SV_StartBug> timag = ixheaacd_add32 ( i1 , r1 ) ; <S2SV_EndBug> <S2SV_StartBug> treal = ixheaacd_sub32 ( i2 , r2 ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( ybf -> y_height - ybf -> y_crop_height < 16 ) ; <S2SV_EndBug> <S2SV_StartBug> extend_plane ( ybf -> y_buffer , ybf -> y_stride , <S2SV_EndBug> <S2SV_StartBug> ( ybf -> y_crop_width + 1 ) / 2 , ( ybf -> y_crop_height + 1 ) / 2 , <S2SV_EndBug> <S2SV_StartBug> ( ybf -> y_crop_width + 1 ) / 2 , ( ybf -> y_crop_height + 1 ) / 2 , <S2SV_EndBug>
<S2SV_StartBug> usb_autopm_put_interface ( serial -> interface ) ; <S2SV_EndBug>
<S2SV_StartBug> "Key<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>the<S2SV_blank>null<S2SV_blank>string" ) ; <S2SV_EndBug>
<S2SV_StartBug> cmd = kmalloc ( sizeof ( * cmd ) , GFP_KERNEL ) ; <S2SV_EndBug>
<S2SV_StartBug> assert ( proto != LLDP_MGMT_ADDR_NONE ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( tgt_clobbers & ~ site_clobbers ) <S2SV_EndBug> <S2SV_StartBug> if ( len < 5 ) <S2SV_EndBug>
<S2SV_StartBug> put_io_context ( p -> io_context ) ; <S2SV_EndBug>
<S2SV_StartBug> if ( frame_end - frame < width + 3 ) <S2SV_EndBug>
<S2SV_StartBug> if ( mk_security_check_url ( sr -> uri ) < 0 ) { <S2SV_EndBug>
<S2SV_StartBug> { <S2SV_EndBug>
<S2SV_StartBug> static void read_quant_matrix_ext ( MpegEncContext * s , GetBitContext * gb ) <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> if ( get_bits1 ( gb ) ) { <S2SV_EndBug> <S2SV_StartBug> for ( i = 0 ; i < 64 ; i ++ ) { <S2SV_EndBug> <S2SV_StartBug> } <S2SV_EndBug>
<S2SV_StartBug> if ( peer ) { <S2SV_EndBug>
<S2SV_StartBug> super_block_uvrd ( cpi , x , rate_tokenonly , distortion , <S2SV_EndBug> <S2SV_StartBug> * rate = * rate_tokenonly + x -> intra_uv_mode_cost [ cm -> frame_type ] [ DC_PRED ] ; <S2SV_EndBug>
<S2SV_StartBug> if ( isspace ( * s ) ) <S2SV_EndBug>
<S2SV_StartBug> vpx_memcpy ( & best_mode -> mbmode , & x -> e_mbd . mode_info_context -> mbmi , sizeof ( MB_MODE_INFO ) ) ; <S2SV_EndBug> <S2SV_StartBug> vpx_memcpy ( & best_mode -> partition , x -> partition_info , sizeof ( PARTITION_INFO ) ) ; <S2SV_EndBug>
<S2SV_StartBug> im = ( gdImage * ) gdCalloc ( 1 , sizeof ( gdImage ) ) ; <S2SV_EndBug>
<S2SV_StartBug> # if 0 <S2SV_EndBug> <S2SV_StartBug> p ++ ; s ++ ; <S2SV_EndBug>
