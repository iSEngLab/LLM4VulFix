,source,target,group
0,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; TYPE_2 VAR_6 ; METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_8 ) ; METHOD_4 ( VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; STRUCT_OR_UNION_6 = VAR_13 -> STRUCT_OR_UNION_7 ; VAR_14 -> STRUCT_OR_UNION_8 . VAR_15 = VAR_16 ; VAR_17 -> STRUCT_OR_UNION_9 . VAR_18 = VAR_19 ; VAR_20 = VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 = VAR_25 ; METHOD_5 ( VAR_26 ) ; METHOD_6 ( & VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_7 ( VAR_30 ) ; if ( VAR_31 != VAR_32 ) { if ( VAR_33 -> VAR_34 == VAR_35 || VAR_36 -> VAR_37 == VAR_38 ) { METHOD_8 ( VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 ; if ( ! METHOD_9 ( & VAR_43 -> VAR_44 ) || VAR_45 ) VAR_46 -> VAR_47 = VAR_48 ; METHOD_10 ( VAR_49 ) ; VAR_50 -> METHOD_11 ( VAR_51 ) ; METHOD_12 ( VAR_52 , VAR_53 , VAR_54 ) ; }  METHOD_13 ( VAR_55 ) ;  METHOD_14 ( VAR_56 ) = VAR_57 ; } while ( ( VAR_58 = METHOD_15 ( & VAR_59 -> VAR_60 ) ) != VAR_61 ) { if ( VAR_62 == VAR_63 ) METHOD_16 ( VAR_64 -> VAR_65 , 1 ) ; METHOD_17 ( VAR_66 ) . VAR_67 = VAR_68 -> VAR_69 ; METHOD_18 ( VAR_70 ) ; } if ( STRUCT_OR_UNION_10 . VAR_71 ) METHOD_19 ( & STRUCT_OR_UNION_11 ) ; METHOD_20 ( VAR_72 ) ; if ( VAR_73 ) METHOD_21 ( ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; TYPE_2 VAR_6 ; METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_8 ) ; METHOD_4 ( VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; STRUCT_OR_UNION_6 = VAR_13 -> STRUCT_OR_UNION_7 ; VAR_14 -> STRUCT_OR_UNION_8 . VAR_15 = VAR_16 ; VAR_17 -> STRUCT_OR_UNION_9 . VAR_18 = VAR_19 ; VAR_20 = VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 = VAR_25 ; METHOD_5 ( VAR_26 ) ; METHOD_6 ( & VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_7 ( VAR_30 ) ; if ( VAR_31 != VAR_32 ) { if ( VAR_33 -> VAR_34 == VAR_35 || VAR_36 -> VAR_37 == VAR_38 ) { METHOD_8 ( VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 ; if ( ! METHOD_9 ( & VAR_43 -> VAR_44 ) || VAR_45 ) VAR_46 -> VAR_47 = VAR_48 ; METHOD_10 ( VAR_49 ) ; VAR_50 -> METHOD_11 ( VAR_51 ) ; METHOD_12 ( VAR_52 , VAR_53 , VAR_54 ) ; } METHOD_22 ( VAR_72 , VAR_55 ) ; METHOD_13 ( VAR_55 ) ; METHOD_14 ( VAR_56 ) = VAR_57 ; } while ( ( VAR_58 = METHOD_15 ( & VAR_59 -> VAR_60 ) ) != VAR_61 ) { if ( VAR_62 == VAR_63 ) METHOD_16 ( VAR_64 -> VAR_65 , 1 ) ; METHOD_17 ( VAR_66 ) . VAR_67 = VAR_68 -> VAR_69 ; METHOD_18 ( VAR_70 ) ; } if ( STRUCT_OR_UNION_10 . VAR_71 ) METHOD_19 ( & STRUCT_OR_UNION_11 ) ; METHOD_20 ( VAR_72 ) ; if ( VAR_73 ) METHOD_21 ( ) ; }",0
1,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ,  TYPE_4 * VAR_3 ,  TYPE_5 * VAR_4 , TYPE_6 VAR_5 [ VAR_6 ] ,  TYPE_7 VAR_7 [ VAR_8 ] ,   TYPE_8 VAR_9 [ VAR_10 ] ) {  TYPE_9 * const VAR_11 = & VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ;  VAR_18 -> VAR_19 = VAR_20 ;  VAR_21 -> VAR_22 = * VAR_23 -> VAR_24 [ 0 ] ;  VAR_25 -> VAR_26 [ 0 ] . VAR_27 = VAR_28 -> VAR_29 ;  VAR_30 -> VAR_31 [ 1 ] . VAR_32 = VAR_33 -> VAR_34 ; VAR_35 -> VAR_36 = ( TYPE_10 ) VAR_37 [ VAR_38 ] ; VAR_39 -> VAR_40 = ( TYPE_11 ) VAR_41 [ VAR_42 ] ; VAR_43 -> VAR_44 = ( TYPE_12 ) VAR_45 [ VAR_46 ] ;  METHOD_1 ( VAR_47 -> VAR_48 , VAR_49 , sizeof ( VAR_50 -> VAR_51 ) ) ;  METHOD_2 ( VAR_52 -> VAR_53 , VAR_54 , sizeof ( * VAR_55 ) * VAR_56 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 [ VAR_6 ] , TYPE_7 VAR_7 [ VAR_8 ] , TYPE_8 VAR_9 [ VAR_10 ] ) { TYPE_9 * const VAR_11 = & VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 = * VAR_23 -> VAR_24 [ 0 ] ; VAR_25 -> VAR_26 [ 0 ] . VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 [ 1 ] . VAR_32 = VAR_33 -> VAR_34 ; VAR_35 -> VAR_36 = ( TYPE_10 ) VAR_37 [ VAR_38 ] ; VAR_39 -> VAR_40 = ( TYPE_11 ) VAR_41 [ VAR_42 ] ; VAR_43 -> VAR_44 = ( TYPE_12 ) VAR_45 [ VAR_46 ] ; METHOD_3 ( VAR_52 -> VAR_53 , VAR_54 , sizeof ( * VAR_55 ) * VAR_56 ) ; }",1
2,"static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 TYPE_7 VAR_5 , TYPE_8 TYPE_9 VAR_6 , TYPE_10 TYPE_11 VAR_7 , TYPE_12 TYPE_13 VAR_8 ) { struct STRUCT_OR_UNION_1 VAR_9 ; const TYPE_14 * VAR_10 [ ] = { ""invalid"" , ""rsasig"" , ""shared-secret"" , ""dsssig"" } ; const TYPE_15 * VAR_11 = ( const TYPE_16 * ) VAR_12 + sizeof ( VAR_13 ) ; unsigned TYPE_17 VAR_14 ;  METHOD_1 ( * VAR_15 ) ;  METHOD_2 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ; METHOD_3 ( VAR_19 , METHOD_4 ( VAR_20 ) , VAR_21 . VAR_22 . VAR_23 ) ; VAR_24 = METHOD_5 ( VAR_25 . VAR_26 . VAR_27 ) ; METHOD_6 ( ( VAR_28 , ""len=%umethod=%s"" , VAR_29 - 4 , METHOD_7 ( VAR_30 . VAR_31 , VAR_32 ) ) ) ; if ( VAR_33 > 4 ) { if ( VAR_34 -> VAR_35 > 1 ) { METHOD_8 ( ( VAR_36 , ""authdata=("" ) ) ; if ( ! METHOD_9 ( VAR_37 , ( const TYPE_18 * ) VAR_38 , VAR_39 - sizeof ( VAR_40 ) ) ) goto VAR_41 ; METHOD_10 ( ( VAR_42 , "")"" ) ) ; } else if ( VAR_43 -> VAR_44 ) { if ( ! METHOD_11 ( VAR_45 , VAR_46 , VAR_47 ) ) goto VAR_48 ; } } return ( const TYPE_19 * ) VAR_49 + VAR_50 ; VAR_51 : METHOD_12 ( ( VAR_52 , ""[|%s]"" , METHOD_13 ( VAR_53 ) ) ) ; return VAR_54 ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 TYPE_7 VAR_5 , TYPE_8 TYPE_9 VAR_6 , TYPE_10 TYPE_11 VAR_7 , TYPE_12 TYPE_13 VAR_8 ) { struct STRUCT_OR_UNION_1 VAR_9 ; const TYPE_14 * VAR_10 [ ] = { ""invalid"" , ""rsasig"" , ""shared-secret"" , ""dsssig"" } ; const TYPE_15 * VAR_11 = ( const TYPE_16 * ) VAR_12 + sizeof ( VAR_13 ) ; unsigned TYPE_17 VAR_14 ; METHOD_1 ( * VAR_15 ) ; METHOD_2 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ; METHOD_3 ( VAR_19 , METHOD_4 ( VAR_20 ) , VAR_21 . VAR_22 . VAR_23 ) ; VAR_24 = METHOD_5 ( VAR_25 . VAR_26 . VAR_27 ) ; METHOD_6 ( ( VAR_28 , ""len=%umethod=%s"" , VAR_29 - 4 , METHOD_7 ( VAR_30 . VAR_31 , VAR_32 ) ) ) ; if ( VAR_33 > 4 ) { if ( VAR_34 -> VAR_35 > 1 ) { METHOD_8 ( ( VAR_36 , ""authdata=("" ) ) ; if ( ! METHOD_9 ( VAR_37 , ( const TYPE_18 * ) VAR_38 , VAR_39 - sizeof ( VAR_40 ) ) ) goto VAR_41 ; METHOD_10 ( ( VAR_42 , "")"" ) ) ; } else if ( VAR_43 -> VAR_44 ) { if ( ! METHOD_11 ( VAR_45 , VAR_46 , VAR_47 ) ) goto VAR_48 ; } } return ( const TYPE_19 * ) VAR_49 + VAR_50 ; VAR_51 : METHOD_12 ( ( VAR_52 , ""[|%s]"" , METHOD_13 ( VAR_53 ) ) ) ; return VAR_54 ; }",2
3,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_4 VAR_9 ; TYPE_5 VAR_10 = - VAR_11 ; TYPE_6 VAR_12 ; if ( VAR_13 & ~ ( VAR_14 | VAR_15 | VAR_16 | VAR_17 | VAR_18 ) )  goto VAR_19 ;  if ( VAR_20 ) * VAR_21 = sizeof ( VAR_22 ) ; VAR_23 = METHOD_1 ( VAR_24 , VAR_25 , VAR_26 , & VAR_27 ) ; if ( VAR_28 == VAR_29 ) goto VAR_30 ; METHOD_2 ( VAR_31 , & VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 ; if ( VAR_36 < VAR_37 ) { VAR_38 -> VAR_39 |= VAR_40 ; VAR_41 = VAR_42 ; } VAR_43 = METHOD_3 ( VAR_44 , 0 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 ) { VAR_49 = - VAR_50 ; goto VAR_51 ; } VAR_52 = ( VAR_53 & VAR_54 ) ? VAR_55 -> VAR_56 : VAR_57 ;  if ( VAR_58 -> VAR_59 != VAR_60 )   METHOD_4 ( VAR_61 -> VAR_62 , & VAR_63 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ;  VAR_64 : METHOD_5 ( VAR_65 , VAR_66 ) ; VAR_67 : return VAR_68 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_4 VAR_9 ; TYPE_5 VAR_10 = - VAR_11 ; TYPE_6 VAR_12 ; if ( VAR_13 & ~ ( VAR_14 | VAR_15 | VAR_16 | VAR_17 | VAR_18 ) ) goto VAR_19 ; if ( VAR_20 ) * VAR_21 = sizeof ( VAR_22 ) ; VAR_23 = METHOD_1 ( VAR_24 , VAR_25 , VAR_26 , & VAR_27 ) ; if ( VAR_28 == VAR_29 ) goto VAR_30 ; METHOD_2 ( VAR_31 , & VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 ; if ( VAR_36 < VAR_37 ) { VAR_38 -> VAR_39 |= VAR_40 ; VAR_41 = VAR_42 ; } VAR_43 = METHOD_3 ( VAR_44 , 0 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 ) { VAR_49 = - VAR_50 ; goto VAR_51 ; } VAR_52 = ( VAR_53 & VAR_54 ) ? VAR_55 -> VAR_56 : VAR_57 ; if ( VAR_58 -> VAR_59 != VAR_60 ) { METHOD_4 ( VAR_61 -> VAR_62 , & VAR_63 , sizeof ( VAR_63 ) ) ; * VAR_21 = sizeof ( VAR_63 ) ; } VAR_64 : METHOD_5 ( VAR_65 , VAR_66 ) ; VAR_67 : return VAR_68 ; }",3
4,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 * VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; * VAR_10 = 0 ; * VAR_11 = VAR_12 ; VAR_13 = METHOD_1 ( VAR_14 ) ; VAR_15 = METHOD_2 ( VAR_16 ) ;  if ( ( VAR_17 > VAR_18 / 2 ) || ( VAR_19 > ( VAR_20 / 2 - 2 ) ) )  return VAR_21 ; VAR_22 = 2 * VAR_23 + VAR_24 + 2 ; VAR_25 = METHOD_3 ( VAR_26 ) ; if ( ! VAR_27 ) return VAR_28 ; METHOD_4 ( VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 [ VAR_33 ] = '\\0' ; METHOD_5 ( VAR_34 + VAR_35 + 1 , VAR_36 , VAR_37 ) ; VAR_38 [ 2 * VAR_39 + 1 ] = '\\0' ; METHOD_6 ( VAR_40 + 2 * VAR_41 + 2 , VAR_42 , VAR_43 ) ; VAR_44 = METHOD_7 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; METHOD_8 ( VAR_50 ) ; return VAR_51 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 * VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; * VAR_10 = 0 ; * VAR_11 = VAR_12 ; VAR_13 = METHOD_1 ( VAR_14 ) ; VAR_15 = METHOD_2 ( VAR_16 ) ; if ( ( VAR_17 > VAR_18 / 2 ) || ( VAR_19 > ( VAR_20 / 2 - 2 ) ) ) return VAR_21 ; VAR_22 = 2 * VAR_23 + VAR_24 + 2 ; VAR_25 = METHOD_3 ( VAR_26 ) ; if ( ! VAR_27 ) return VAR_28 ; METHOD_4 ( VAR_29 , VAR_30 , VAR_31 ) ; VAR_32 [ VAR_33 ] = '\\0' ; METHOD_5 ( VAR_34 + VAR_35 + 1 , VAR_36 , VAR_37 ) ; VAR_38 [ 2 * VAR_39 + 1 ] = '\\0' ; METHOD_6 ( VAR_40 + 2 * VAR_41 + 2 , VAR_42 , VAR_43 ) ; VAR_44 = METHOD_7 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; METHOD_8 ( VAR_50 ) ; return VAR_51 ; }",4
5,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * VAR_1 ) ( TYPE_3 * ) , const TYPE_4 * VAR_2 ) { TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; if ( VAR_5 -> VAR_6 ) { VAR_7 = 0 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 | VAR_12 | VAR_13 | VAR_14 ) ) ) VAR_15 -> VAR_16 = VAR_17 ; else { VAR_18 = VAR_19 ; if ( VAR_20 != VAR_21 ) METHOD_2 ( VAR_22 , ""Unabletocreate%snotifyfifo%s"" , VAR_23 , VAR_24 -> VAR_25 ) ; } if ( ! VAR_26 || VAR_27 == VAR_28 ) { if ( VAR_29 -> VAR_30 ) METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 -> VAR_35 ) ;  if ( ( VAR_36 -> VAR_37 = METHOD_4 ( VAR_38 -> VAR_39 , VAR_40 | VAR_41 | VAR_42 ) ) == - 1 ) {  METHOD_5 ( VAR_43 , ""Unabletoopen%snotifyfifo%s-errno%d"" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 -> VAR_49 ) { METHOD_6 ( VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; } } } if ( VAR_55 -> VAR_56 == - 1 ) { METHOD_7 ( VAR_57 -> VAR_58 ) ; VAR_59 -> VAR_60 = VAR_61 ; } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * VAR_1 ) ( TYPE_3 * ) , const TYPE_4 * VAR_2 ) { TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; if ( VAR_5 -> VAR_6 ) { VAR_7 = 0 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 | VAR_12 | VAR_13 | VAR_14 ) ) ) VAR_15 -> VAR_16 = VAR_17 ; else { VAR_18 = VAR_19 ; if ( VAR_20 != VAR_21 ) METHOD_2 ( VAR_22 , ""Unabletocreate%snotifyfifo%s"" , VAR_23 , VAR_24 -> VAR_25 ) ; } if ( ! VAR_26 || VAR_27 == VAR_28 ) { if ( VAR_29 -> VAR_30 ) METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 -> VAR_35 ) ; if ( ( VAR_36 -> VAR_37 = METHOD_4 ( VAR_38 -> VAR_39 , VAR_40 | VAR_41 | VAR_42 | VAR_62 ) ) == - 1 ) { METHOD_5 ( VAR_43 , ""Unabletoopen%snotifyfifo%s-errno%d"" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 -> VAR_49 ) { METHOD_6 ( VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; } } } if ( VAR_55 -> VAR_56 == - 1 ) { METHOD_7 ( VAR_57 -> VAR_58 ) ; VAR_59 -> VAR_60 = VAR_61 ; } } }",5
6,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = - 1 ; TYPE_3 VAR_2 = 1 ; TYPE_4 TYPE_5 TYPE_6 VAR_3 ; if ( ! VAR_4 ) { if ( METHOD_1 ( METHOD_2 ( 2 , 2 ) , & VAR_5 ) != VAR_6 ) { METHOD_3 ( VAR_7 , ""WSAStartupfailed!\\n"" ) ; METHOD_4 ( - 1 ) ; } VAR_8 = 1 ; } struct STRUCT_OR_UNION_0 VAR_9 ; if ( 0 > ( VAR_10 = METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ) ) { METHOD_6 ( ""socket()"" ) ; return - 1 ; } if ( METHOD_7 ( VAR_14 , VAR_15 , VAR_16 , ( TYPE_7 * ) & VAR_17 , sizeof ( TYPE_8 ) ) == - 1 ) { METHOD_8 ( ""setsockopt()"" ) ; METHOD_9 ( VAR_18 ) ; return - 1 ; } TYPE_9 TYPE_10 if ( METHOD_10 ( VAR_19 , VAR_20 , TYPE_11 , ( TYPE_12 * ) & VAR_21 , sizeof ( TYPE_13 ) ) == - 1 ) { METHOD_11 ( ""setsockopt()"" ) ; METHOD_12 ( VAR_22 ) ; return - 1 ; } METHOD_13 ( ( TYPE_14 * ) & VAR_23 , 0 , sizeof ( VAR_24 ) ) ; VAR_25 . VAR_26 = VAR_27 ;  VAR_28 . VAR_29 . VAR_30 = METHOD_14 ( VAR_31 ) ;  VAR_32 . VAR_33 = METHOD_15 ( VAR_34 ) ; if ( 0 > METHOD_16 ( VAR_35 , ( struct STRUCT_OR_UNION_1 * ) & VAR_36 , sizeof ( VAR_37 ) ) ) { METHOD_17 ( ""bind()"" ) ; METHOD_18 ( VAR_38 ) ; return - 1 ; } if ( METHOD_19 ( VAR_39 , 1 ) == - 1 ) { METHOD_20 ( ""listen()"" ) ; METHOD_21 ( VAR_40 ) ; return - 1 ; } return VAR_41 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = - 1 ; TYPE_3 VAR_2 = 1 ; TYPE_4 TYPE_5 TYPE_6 VAR_3 ; if ( ! VAR_4 ) { if ( METHOD_1 ( METHOD_2 ( 2 , 2 ) , & VAR_5 ) != VAR_6 ) { METHOD_3 ( VAR_7 , ""WSAStartupfailed!\\n"" ) ; METHOD_4 ( - 1 ) ; } VAR_8 = 1 ; } struct STRUCT_OR_UNION_0 VAR_9 ; if ( 0 > ( VAR_10 = METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ) ) { METHOD_6 ( ""socket()"" ) ; return - 1 ; } if ( METHOD_7 ( VAR_14 , VAR_15 , VAR_16 , ( TYPE_7 * ) & VAR_17 , sizeof ( TYPE_8 ) ) == - 1 ) { METHOD_8 ( ""setsockopt()"" ) ; METHOD_9 ( VAR_18 ) ; return - 1 ; } TYPE_9 TYPE_10 if ( METHOD_10 ( VAR_19 , VAR_20 , TYPE_11 , ( TYPE_12 * ) & VAR_21 , sizeof ( TYPE_13 ) ) == - 1 ) { METHOD_11 ( ""setsockopt()"" ) ; METHOD_12 ( VAR_22 ) ; return - 1 ; } METHOD_13 ( ( TYPE_14 * ) & VAR_23 , 0 , sizeof ( VAR_24 ) ) ; VAR_25 . VAR_26 = VAR_27 ; VAR_28 . VAR_29 . VAR_30 = METHOD_14 ( VAR_31 ) ; VAR_32 . VAR_33 = METHOD_15 ( VAR_34 ) ; if ( 0 > METHOD_16 ( VAR_35 , ( struct STRUCT_OR_UNION_1 * ) & VAR_36 , sizeof ( VAR_37 ) ) ) { METHOD_17 ( ""bind()"" ) ; METHOD_18 ( VAR_38 ) ; return - 1 ; } if ( METHOD_19 ( VAR_39 , 1 ) == - 1 ) { METHOD_20 ( ""listen()"" ) ; METHOD_21 ( VAR_40 ) ; return - 1 ; } return VAR_41 ; }",6
7,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  TYPE_6 * VAR_5 = METHOD_1 ( VAR_6 , ""w"" ) ;  if ( ! VAR_7 ) return VAR_8 ; unsigned VAR_9 = 0 ; while ( VAR_10 <= 99999 ) { METHOD_2 ( VAR_11 + VAR_12 , ""fd/%u"" , VAR_13 ) ; TYPE_7 * VAR_14 = METHOD_3 ( VAR_15 ) ; if ( ! VAR_16 ) break ; METHOD_4 ( VAR_17 , ""%u:%s\\n"" , VAR_18 , VAR_19 ) ; METHOD_5 ( VAR_20 ) ; METHOD_6 ( VAR_21 + VAR_22 , ""fdinfo/%u"" , VAR_23 ) ; VAR_24 ++ ; TYPE_8 * VAR_25 = METHOD_7 ( VAR_26 , ""r"" ) ; if ( ! VAR_27 ) continue ; TYPE_9 VAR_28 [ 128 ] ; while ( METHOD_8 ( VAR_29 , sizeof ( VAR_30 ) - 1 , VAR_31 ) ) { TYPE_10 * VAR_32 = METHOD_9 ( VAR_33 , '\\n' ) ; VAR_34 [ 0 ] = '\\n' ; VAR_35 [ 1 ] = '\\0' ; METHOD_10 ( VAR_36 , VAR_37 ) ; } METHOD_11 ( VAR_38 ) ; } const TYPE_11 VAR_39 = METHOD_12 ( VAR_40 ) ; if ( METHOD_13 ( VAR_41 , VAR_42 , VAR_43 ) < 0 ) { METHOD_14 ( ""Can\'tchange\'%s\'ownershipto%lu:%lu"" , VAR_44 , ( TYPE_12 ) VAR_45 , ( TYPE_13 ) VAR_46 ) ; METHOD_15 ( VAR_47 ) ; METHOD_16 ( VAR_48 ) ; return VAR_49 ; } METHOD_17 ( VAR_50 ) ; return VAR_51 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 = METHOD_1 ( VAR_6 , ""w"" ) ; if ( ! VAR_7 ) return VAR_8 ; unsigned VAR_9 = 0 ; while ( VAR_10 <= 99999 ) { METHOD_2 ( VAR_11 + VAR_12 , ""fd/%u"" , VAR_13 ) ; TYPE_7 * VAR_14 = METHOD_3 ( VAR_15 ) ; if ( ! VAR_16 ) break ; METHOD_4 ( VAR_17 , ""%u:%s\\n"" , VAR_18 , VAR_19 ) ; METHOD_5 ( VAR_20 ) ; METHOD_6 ( VAR_21 + VAR_22 , ""fdinfo/%u"" , VAR_23 ) ; VAR_24 ++ ; TYPE_8 * VAR_25 = METHOD_7 ( VAR_26 , ""r"" ) ; if ( ! VAR_27 ) continue ; TYPE_9 VAR_28 [ 128 ] ; while ( METHOD_8 ( VAR_29 , sizeof ( VAR_30 ) - 1 , VAR_31 ) ) { TYPE_10 * VAR_32 = METHOD_9 ( VAR_33 , '\\n' ) ; VAR_34 [ 0 ] = '\\n' ; VAR_35 [ 1 ] = '\\0' ; METHOD_10 ( VAR_36 , VAR_37 ) ; } METHOD_11 ( VAR_38 ) ; } const TYPE_11 VAR_39 = METHOD_12 ( VAR_40 ) ; if ( METHOD_13 ( VAR_41 , VAR_42 , VAR_43 ) < 0 ) { METHOD_14 ( ""Can\'tchange\'%s\'ownershipto%lu:%lu"" , VAR_44 , ( TYPE_12 ) VAR_45 , ( TYPE_13 ) VAR_46 ) ; METHOD_15 ( VAR_47 ) ; METHOD_16 ( VAR_48 ) ; return VAR_49 ; } METHOD_17 ( VAR_50 ) ; return VAR_51 ; }",7
8,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 , TYPE_8 * * VAR_7 ) { TYPE_9 * VAR_8 , * VAR_9 = ( TYPE_10 * ) VAR_10 ; TYPE_11 TYPE_12 VAR_11 ( VAR_12 , ""forward_search_range:str:%d,end:%d,s:%d,range:%d\\n"" , ( TYPE_13 ) VAR_13 , ( TYPE_14 ) VAR_14 , ( TYPE_15 ) VAR_15 , ( TYPE_16 ) VAR_16 ) ; VAR_17 = VAR_18 ; if ( VAR_19 -> VAR_20 > 0 ) { if ( METHOD_1 ( VAR_21 -> VAR_22 ) ) { VAR_23 += VAR_24 -> VAR_25 ; } else { TYPE_17 * VAR_26 = VAR_27 + VAR_28 -> VAR_29 ; if ( VAR_30 >= VAR_31 ) return 0 ; while ( VAR_32 < VAR_33 ) VAR_34 += METHOD_2 ( VAR_35 -> VAR_36 , VAR_37 ) ; } } VAR_38 : switch ( VAR_39 -> VAR_40 ) { case VAR_41 : VAR_42 = METHOD_3 ( VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 : VAR_53 = METHOD_4 ( VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 , VAR_60 -> VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; break ; case VAR_65 : VAR_66 = METHOD_5 ( VAR_67 , VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ; break ; case VAR_75 : VAR_76 = METHOD_6 ( VAR_77 , VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , VAR_82 , VAR_83 , VAR_84 ) ; break ; case VAR_85 : VAR_86 = METHOD_7 ( VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , VAR_91 , VAR_92 ) ; break ; } if ( VAR_93 && VAR_94 < VAR_95 ) { if ( VAR_96 - VAR_97 -> VAR_98 < VAR_99 ) { VAR_100 : VAR_101 = VAR_102 ; VAR_103 += METHOD_8 ( VAR_104 -> VAR_105 , VAR_106 ) ; goto VAR_107 ; } if ( VAR_108 -> VAR_109 ) { TYPE_18 * VAR_110 ; switch ( VAR_111 -> VAR_112 ) { case VAR_113 : if ( ! METHOD_9 ( VAR_114 ) ) { VAR_115 = METHOD_10 ( VAR_116 -> VAR_117 , ( VAR_118 ? VAR_119 : VAR_120 ) , VAR_121 ) ; if ( ! METHOD_11 ( VAR_122 -> VAR_123 , VAR_124 , VAR_125 ) ) goto VAR_126 ; } break ; case VAR_127 : if ( METHOD_12 ( VAR_128 ) ) { TYPE_19 TYPE_20 VAR_129 = ( TYPE_21 * ) METHOD_13 ( VAR_130 -> VAR_131 , ( VAR_132 ? VAR_133 : VAR_134 ) , VAR_135 ) ; if ( VAR_136 && METHOD_14 ( VAR_137 -> VAR_138 , VAR_139 , VAR_140 ) ) goto VAR_141 ; } else if ( ! METHOD_15 ( VAR_142 -> VAR_143 , VAR_144 , VAR_145 ) TYPE_22 TYPE_23 && ! METHOD_16 ( VAR_146 -> VAR_147 , VAR_148 , VAR_149 ) ) goto VAR_150 ; break ; } } if ( VAR_151 -> VAR_152 == 0 ) { * VAR_153 = VAR_154 ; if ( VAR_155 ) { if ( * VAR_156 > VAR_157 ) * VAR_158 = METHOD_17 ( VAR_159 -> VAR_160 , VAR_161 , VAR_162 ) ; else * VAR_163 = METHOD_18 ( VAR_164 -> VAR_165 , ( VAR_166 ? VAR_167 : VAR_168 ) , VAR_169 ) ; } } else { if ( VAR_170 -> VAR_171 != VAR_172 ) {  * VAR_173 = VAR_174 - VAR_175 -> VAR_176 ;  if ( * VAR_177 > VAR_178 ) { * VAR_179 = METHOD_19 ( VAR_180 -> VAR_181 , VAR_182 , * VAR_183 , ( const TYPE_24 * * ) VAR_184 ) ; if ( VAR_185 && METHOD_20 ( * VAR_186 ) ) * VAR_187 = METHOD_21 ( VAR_188 -> VAR_189 , ( VAR_190 ? VAR_191 : VAR_192 ) , * VAR_193 ) ; } else { if ( VAR_194 ) * VAR_195 = METHOD_22 ( VAR_196 -> VAR_197 ,  ( VAR_198 ? VAR_199 : VAR_200 ) , * VAR_201 ) ;  } } } * VAR_202 = VAR_203 - VAR_204 -> VAR_205 ; TYPE_25 TYPE_26 VAR_206 ( VAR_207 , ""forward_search_rangesuccess:low:%d,high:%d,dmin:%d,dmax:%d\\n"" , ( TYPE_27 ) ( * VAR_208 - VAR_209 ) , ( TYPE_28 ) ( * VAR_210 - VAR_211 ) , VAR_212 -> VAR_213 , VAR_214 -> VAR_215 ) ; return 1 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 , TYPE_8 * * VAR_7 ) { TYPE_9 * VAR_8 , * VAR_9 = ( TYPE_10 * ) VAR_10 ; TYPE_11 TYPE_12 VAR_11 ( VAR_12 , ""forward_search_range:str:%d,end:%d,s:%d,range:%d\\n"" , ( TYPE_13 ) VAR_13 , ( TYPE_14 ) VAR_14 , ( TYPE_15 ) VAR_15 , ( TYPE_16 ) VAR_16 ) ; VAR_17 = VAR_18 ; if ( VAR_19 -> VAR_20 > 0 ) { if ( METHOD_1 ( VAR_21 -> VAR_22 ) ) { VAR_23 += VAR_24 -> VAR_25 ; } else { TYPE_17 * VAR_26 = VAR_27 + VAR_28 -> VAR_29 ; if ( VAR_30 >= VAR_31 ) return 0 ; while ( VAR_32 < VAR_33 ) VAR_34 += METHOD_2 ( VAR_35 -> VAR_36 , VAR_37 ) ; } } VAR_38 : switch ( VAR_39 -> VAR_40 ) { case VAR_41 : VAR_42 = METHOD_3 ( VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 : VAR_53 = METHOD_4 ( VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 , VAR_60 -> VAR_61 , VAR_62 , VAR_63 , VAR_64 ) ; break ; case VAR_65 : VAR_66 = METHOD_5 ( VAR_67 , VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ; break ; case VAR_75 : VAR_76 = METHOD_6 ( VAR_77 , VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , VAR_82 , VAR_83 , VAR_84 ) ; break ; case VAR_85 : VAR_86 = METHOD_7 ( VAR_87 -> VAR_88 , VAR_89 -> VAR_90 , VAR_91 , VAR_92 ) ; break ; } if ( VAR_93 && VAR_94 < VAR_95 ) { if ( VAR_96 - VAR_97 -> VAR_98 < VAR_99 ) { VAR_100 : VAR_101 = VAR_102 ; VAR_103 += METHOD_8 ( VAR_104 -> VAR_105 , VAR_106 ) ; goto VAR_107 ; } if ( VAR_108 -> VAR_109 ) { TYPE_18 * VAR_110 ; switch ( VAR_111 -> VAR_112 ) { case VAR_113 : if ( ! METHOD_9 ( VAR_114 ) ) { VAR_115 = METHOD_10 ( VAR_116 -> VAR_117 , ( VAR_118 ? VAR_119 : VAR_120 ) , VAR_121 ) ; if ( ! METHOD_11 ( VAR_122 -> VAR_123 , VAR_124 , VAR_125 ) ) goto VAR_126 ; } break ; case VAR_127 : if ( METHOD_12 ( VAR_128 ) ) { TYPE_19 TYPE_20 VAR_129 = ( TYPE_21 * ) METHOD_13 ( VAR_130 -> VAR_131 , ( VAR_132 ? VAR_133 : VAR_134 ) , VAR_135 ) ; if ( VAR_136 && METHOD_14 ( VAR_137 -> VAR_138 , VAR_139 , VAR_140 ) ) goto VAR_141 ; } else if ( ! METHOD_15 ( VAR_142 -> VAR_143 , VAR_144 , VAR_145 ) TYPE_22 TYPE_23 && ! METHOD_16 ( VAR_146 -> VAR_147 , VAR_148 , VAR_149 ) ) goto VAR_150 ; break ; } } if ( VAR_151 -> VAR_152 == 0 ) { * VAR_153 = VAR_154 ; if ( VAR_155 ) { if ( * VAR_156 > VAR_157 ) * VAR_158 = METHOD_17 ( VAR_159 -> VAR_160 , VAR_161 , VAR_162 ) ; else * VAR_163 = METHOD_18 ( VAR_164 -> VAR_165 , ( VAR_166 ? VAR_167 : VAR_168 ) , VAR_169 ) ; } } else { if ( VAR_170 -> VAR_171 != VAR_172 ) { if ( VAR_203 - VAR_211 < VAR_214 -> VAR_215 ) { * VAR_208 = ( TYPE_24 * ) VAR_211 ; if ( VAR_195 ) * VAR_195 = METHOD_22 ( VAR_214 -> VAR_197 , VAR_211 , * VAR_208 ) ; } } else { * VAR_173 = VAR_174 - VAR_175 -> VAR_176 ; if ( * VAR_177 > VAR_178 ) { * VAR_179 = METHOD_19 ( VAR_180 -> VAR_181 , VAR_182 , * VAR_183 , ( const TYPE_24 * * ) VAR_184 ) ; if ( VAR_185 && METHOD_20 ( * VAR_186 ) ) * VAR_187 = METHOD_21 ( VAR_188 -> VAR_189 , ( VAR_190 ? VAR_191 : VAR_192 ) , * VAR_193 ) ; } else { if ( VAR_194 ) * VAR_195 = METHOD_22 ( VAR_196 -> VAR_197 , ( VAR_198 ? VAR_199 : VAR_200 ) , * VAR_201 ) ; } } } * VAR_202 = VAR_203 - VAR_204 -> VAR_205 ; TYPE_25 TYPE_26 VAR_206 ( VAR_207 , ""forward_search_rangesuccess:low:%d,high:%d,dmin:%d,dmax:%d\\n"" , ( TYPE_27 ) ( * VAR_208 - VAR_209 ) , ( TYPE_28 ) ( * VAR_210 - VAR_211 ) , VAR_212 -> VAR_213 , VAR_214 -> VAR_215 ) ; return 1 ; } return 0 ; }",8
9,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 . VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; if ( ! METHOD_1 ( VAR_7 ) || ! VAR_8 ) return ; VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ;  if ( METHOD_2 ( VAR_13 ) )  METHOD_3 ( VAR_14 , VAR_15 ) ;  } ","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 . VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; if ( ! METHOD_1 ( VAR_7 ) || ! VAR_8 ) return ; VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; if ( METHOD_2 ( VAR_13 ) ) METHOD_3 ( VAR_14 , VAR_15 ) ; METHOD_5 ( & VAR_10 -> VAR_11 . VAR_16 ) ; }",9
10,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned TYPE_3 VAR_2 ;  TYPE_4 VAR_3 = { 0 } ;  VAR_4 . VAR_5 = ( VAR_6 -> VAR_7 + 15 ) / 16 ; VAR_8 . VAR_9 = ( VAR_10 -> VAR_11 + 15 ) / 16 ; VAR_12 . VAR_13 [ 0 ] = 0 ; VAR_14 . VAR_15 [ 1 ] = - 2 ; VAR_16 . VAR_17 [ 2 ] = - 4 ; VAR_18 . VAR_19 [ 3 ] = - 6 ; VAR_20 . VAR_21 [ 0 ] = 0 ; VAR_22 . VAR_23 [ 1 ] = 1 ; VAR_24 . VAR_25 [ 2 ] = 2 ; VAR_26 . VAR_27 [ 3 ] = 3 ; VAR_28 . VAR_29 [ 0 ] = 1500 ; VAR_30 . VAR_31 [ 1 ] = 1000 ; VAR_32 . VAR_33 [ 2 ] = 500 ; VAR_34 . VAR_35 [ 3 ] = 0 ; VAR_36 . VAR_37 = ( TYPE_5 * ) METHOD_1 ( VAR_38 . VAR_39 * VAR_40 . VAR_41 ) ; for ( VAR_42 = 0 ; VAR_43 < VAR_44 . VAR_45 * VAR_46 . VAR_47 ; ++ VAR_48 ) VAR_49 . VAR_50 [ VAR_51 ] = VAR_52 % 4 ; if ( METHOD_2 ( VAR_53 , VAR_54 , & VAR_55 ) ) METHOD_3 ( VAR_56 , ""FailedtosetROImap"" ) ; METHOD_4 ( VAR_57 . VAR_58 ) ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned TYPE_3 VAR_2 ; TYPE_4 VAR_3 = { 0 } ; VAR_4 . VAR_5 = ( VAR_6 -> VAR_7 + 15 ) / 16 ; VAR_8 . VAR_9 = ( VAR_10 -> VAR_11 + 15 ) / 16 ; VAR_12 . VAR_13 [ 0 ] = 0 ; VAR_14 . VAR_15 [ 1 ] = - 2 ; VAR_16 . VAR_17 [ 2 ] = - 4 ; VAR_18 . VAR_19 [ 3 ] = - 6 ; VAR_20 . VAR_21 [ 0 ] = 0 ; VAR_22 . VAR_23 [ 1 ] = 1 ; VAR_24 . VAR_25 [ 2 ] = 2 ; VAR_26 . VAR_27 [ 3 ] = 3 ; VAR_28 . VAR_29 [ 0 ] = 1500 ; VAR_30 . VAR_31 [ 1 ] = 1000 ; VAR_32 . VAR_33 [ 2 ] = 500 ; VAR_34 . VAR_35 [ 3 ] = 0 ; VAR_36 . VAR_37 = ( TYPE_5 * ) METHOD_1 ( VAR_38 . VAR_39 * VAR_40 . VAR_41 ) ; for ( VAR_42 = 0 ; VAR_43 < VAR_44 . VAR_45 * VAR_46 . VAR_47 ; ++ VAR_48 ) VAR_49 . VAR_50 [ VAR_51 ] = VAR_52 % 4 ; if ( METHOD_2 ( VAR_53 , VAR_54 , & VAR_55 ) ) METHOD_3 ( VAR_56 , ""FailedtosetROImap"" ) ; METHOD_4 ( VAR_57 . VAR_58 ) ; }",10
11," static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  { TYPE_3 * VAR_2 ; if ( * VAR_3 != '{' ) {  VAR_4 = VAR_5 ;  return 0 ; } VAR_6 -> VAR_7 = VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 + 1 ) ; if ( * VAR_11 == '}' )  return VAR_12 + 1 ;   if ( ! ( VAR_13 -> VAR_14 = VAR_15 = METHOD_2 ( ) ) )  return 0 ;  if ( ! ( VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 , METHOD_5 ( VAR_18 ) ) ) ) )  return 0 ; VAR_19 -> VAR_20 = VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 = 0 ; if ( * VAR_25 != ':' ) {  VAR_26 = VAR_27 ;  return 0 ; }  if ( ! ( VAR_28 = METHOD_6 ( METHOD_7 ( VAR_29 , METHOD_8 ( VAR_30 + 1 ) ) ) ) )  return 0 ; while ( * VAR_31 == ',' ) { TYPE_4 * VAR_32 ; if ( ! ( VAR_33 = METHOD_9 ( ) ) ) return 0 ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 = VAR_39 ;  VAR_40 = VAR_41 ;   if ( ! ( VAR_42 = METHOD_10 ( METHOD_11 ( VAR_43 , METHOD_12 ( VAR_44 + 1 ) ) ) ) )  return 0 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 ; VAR_49 -> VAR_50 = 0 ; if ( * VAR_51 != ':' ) {  VAR_52 = VAR_53 ;  return 0 ; }  if ( ! ( VAR_54 = METHOD_13 ( METHOD_14 ( VAR_55 , METHOD_15 ( VAR_56 + 1 ) ) ) ) )  return 0 ; } if ( * VAR_57 == '}' )  return VAR_58 + 1 ;  VAR_59 = VAR_60 ; return 0 ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; if ( * VAR_3 != '{' ) { VAR_4 = VAR_5 ; return 0 ; } VAR_6 -> VAR_7 = VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 + 1 ) , VAR_59 ) ) ; if ( ! VAR_60 ) return 0 ; if ( ! ( VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 , METHOD_5 ( VAR_18 ) ) ) ) ) return 0 ; VAR_19 -> VAR_20 = VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 = 0 ; if ( * VAR_25 != ':' ) { VAR_26 = VAR_27 ; return 0 ; } if ( ! ( VAR_28 = METHOD_6 ( METHOD_7 ( VAR_29 , METHOD_8 ( VAR_30 + 1 ) , VAR_59 ) ) ; if ( ! VAR_60 ) return 0 ; while ( * VAR_31 == ',' ) { TYPE_4 * VAR_32 ; if ( ! ( VAR_33 = METHOD_9 ( ) ) ) return 0 ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 = VAR_39 ; VAR_40 = VAR_41 ; if ( ! ( VAR_42 = METHOD_10 ( METHOD_11 ( VAR_43 , METHOD_12 ( VAR_44 + 1 ) , VAR_59 ) ) ; if ( ! VAR_60 ) return 0 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 ; VAR_49 -> VAR_50 = 0 ; if ( * VAR_51 != ':' ) { VAR_52 = VAR_53 ; return 0 ; } if ( ! ( VAR_54 = METHOD_13 ( METHOD_14 ( VAR_55 , METHOD_15 ( VAR_56 + 1 ) ) ) ) ) return 0 ; } if ( * VAR_57 == '}' ) return VAR_60 + 1 ; * VAR_59 = VAR_60 ; return 0 ; }",11
12,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 = 0 ; const enum VAR_4 * VAR_5 = VAR_6 ; TYPE_5 VAR_7 = 0 ; if ( METHOD_1 ( & VAR_8 -> VAR_9 ) < 36 ) return VAR_10 ; VAR_11 -> VAR_12 -> VAR_13 = METHOD_2 ( & VAR_14 -> VAR_15 ) ; VAR_16 -> VAR_17 = METHOD_3 ( & VAR_18 -> VAR_19 ) ; VAR_20 -> VAR_21 = METHOD_4 ( & VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 ) ; VAR_28 -> VAR_29 = METHOD_6 ( & VAR_30 -> VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_7 ( & VAR_34 -> VAR_35 ) ; VAR_36 -> VAR_37 = METHOD_8 ( & VAR_38 -> VAR_39 ) ; VAR_40 -> VAR_41 = METHOD_9 ( & VAR_42 -> VAR_43 ) ; VAR_44 -> VAR_45 = METHOD_10 ( & VAR_46 -> VAR_47 ) ;  VAR_48 = METHOD_11 ( & VAR_49 -> VAR_50 ) ;  if ( VAR_51 <= 0 ) { METHOD_12 ( VAR_52 -> VAR_53 , VAR_54 , ""Invalidnumberofcomponents:%d\\n"" , VAR_55 -> VAR_56 ) ; return VAR_57 ; } if ( VAR_58 > 4 ) { METHOD_13 ( VAR_59 -> VAR_60 , ""Supportfor%dcomponents"" , VAR_61 -> VAR_62 ) ; return VAR_63 ; } VAR_64 -> VAR_65 = VAR_66 ; if ( VAR_67 -> VAR_68 <= 0 || VAR_69 -> VAR_70 <= 0 ) { METHOD_14 ( VAR_71 -> VAR_72 , VAR_73 , ""Invalidtiledimension%dx%d.\\n"" , VAR_74 -> VAR_75 , VAR_76 -> VAR_77 ) ; return VAR_78 ; } if ( METHOD_15 ( & VAR_79 -> VAR_80 ) < 3 * VAR_81 -> VAR_82 ) return VAR_83 ; for ( VAR_84 = 0 ; VAR_85 < VAR_86 -> VAR_87 ; VAR_88 ++ ) { TYPE_6 VAR_89 = METHOD_16 ( & VAR_90 -> VAR_91 ) ; VAR_92 -> VAR_93 [ VAR_94 ] = ( VAR_95 & 0x7f ) + 1 ; VAR_96 -> VAR_97 = METHOD_17 ( VAR_98 -> VAR_99 [ VAR_100 ] , VAR_101 -> VAR_102 ) ; VAR_103 -> VAR_104 [ VAR_105 ] = ! ! ( VAR_106 & 0x80 ) ; VAR_107 -> VAR_108 [ VAR_109 ] = METHOD_18 ( & VAR_110 -> VAR_111 ) ; VAR_112 -> VAR_113 [ VAR_114 ] = METHOD_19 ( & VAR_115 -> VAR_116 ) ; if ( ! VAR_117 -> VAR_118 [ VAR_119 ] || VAR_120 -> VAR_121 [ VAR_122 ] == 3 || VAR_123 -> VAR_124 [ VAR_125 ] > 4 || ! VAR_126 -> VAR_127 [ VAR_128 ] || VAR_129 -> VAR_130 [ VAR_131 ] == 3 || VAR_132 -> VAR_133 [ VAR_134 ] > 4 ) { METHOD_20 ( VAR_135 -> VAR_136 , VAR_137 , ""Invalidsampleseparation%d/%d\\n"" , VAR_138 -> VAR_139 [ VAR_140 ] , VAR_141 -> VAR_142 [ VAR_143 ] ) ; return VAR_144 ; } VAR_145 |= VAR_146 -> VAR_147 [ VAR_148 ] >> 1 << VAR_149 * 4 | VAR_150 -> VAR_151 [ VAR_152 ] >> 1 << VAR_153 * 4 + 2 ; } VAR_154 -> VAR_155 = METHOD_21 ( VAR_156 -> VAR_157 - VAR_158 -> VAR_159 , VAR_160 -> VAR_161 ) ; VAR_162 -> VAR_163 = METHOD_22 ( VAR_164 -> VAR_165 - VAR_166 -> VAR_167 , VAR_168 -> VAR_169 ) ; if ( VAR_170 -> VAR_171 * ( TYPE_7 ) VAR_172 -> VAR_173 > VAR_174 / sizeof ( * VAR_175 -> VAR_176 ) ) { VAR_177 -> VAR_178 = VAR_179 -> VAR_180 = 0 ; return METHOD_23 ( VAR_181 ) ; } VAR_182 -> VAR_183 = METHOD_24 ( VAR_184 -> VAR_185 * VAR_186 -> VAR_187 , sizeof ( * VAR_188 -> VAR_189 ) ) ; if ( ! VAR_190 -> VAR_191 ) { VAR_192 -> VAR_193 = VAR_194 -> VAR_195 = 0 ; return METHOD_25 ( VAR_196 ) ; } for ( VAR_197 = 0 ; VAR_198 < VAR_199 -> VAR_200 * VAR_201 -> VAR_202 ; VAR_203 ++ ) { TYPE_8 * VAR_204 = VAR_205 -> VAR_206 + VAR_207 ; VAR_208 -> VAR_209 = METHOD_26 ( VAR_210 -> VAR_211 * sizeof ( * VAR_212 -> VAR_213 ) ) ; if ( ! VAR_214 -> VAR_215 ) return METHOD_27 ( VAR_216 ) ; } VAR_217 -> VAR_218 -> VAR_219 = METHOD_28 ( VAR_220 -> VAR_221 - VAR_222 -> VAR_223 , VAR_224 -> VAR_225 ) ; VAR_226 -> VAR_227 -> VAR_228 = METHOD_29 ( VAR_229 -> VAR_230 - VAR_231 -> VAR_232 , VAR_233 -> VAR_234 ) ; if ( VAR_235 -> VAR_236 -> VAR_237 == VAR_238 || VAR_239 -> VAR_240 -> VAR_241 == VAR_242 ) { VAR_243 = VAR_244 ; VAR_245 = METHOD_30 ( VAR_246 ) ; } else { switch ( VAR_247 -> VAR_248 ) { case 16 : VAR_249 = VAR_250 ; VAR_251 = METHOD_31 ( VAR_252 ) ; break ; case 17 : VAR_253 = VAR_254 ; VAR_255 = METHOD_32 ( VAR_256 ) ; break ; case 18 : VAR_257 = VAR_258 ; VAR_259 = METHOD_33 ( VAR_260 ) ; break ; default : VAR_261 = VAR_262 ; VAR_263 = METHOD_34 ( VAR_264 ) ; break ; } } for ( VAR_265 = 0 ; VAR_266 < VAR_267 ; ++ VAR_268 ) { if ( METHOD_35 ( VAR_269 [ VAR_270 ] , VAR_271 , VAR_272 -> VAR_273 , VAR_274 , VAR_275 -> VAR_276 ) ) { VAR_277 -> VAR_278 -> VAR_279 = VAR_280 [ VAR_281 ] ; break ; } } if ( VAR_282 -> VAR_283 -> VAR_284 == VAR_285 ) { METHOD_36 ( VAR_286 -> VAR_287 , VAR_288 , ""Unknownpix_fmt,profile:%d,colour_space:%d,"" ""components:%d,precision:%d,"" ""cdx[1]:%d,cdy[1]:%d,cdx[2]:%d,cdy[2]:%d\\n"" , VAR_289 -> VAR_290 -> VAR_291 , VAR_292 -> VAR_293 , VAR_294 , VAR_295 -> VAR_296 , VAR_297 > 2 ? VAR_298 -> VAR_299 [ 1 ] : 0 , VAR_300 > 2 ? VAR_301 -> VAR_302 [ 1 ] : 0 , VAR_303 > 2 ? VAR_304 -> VAR_305 [ 2 ] : 0 , VAR_306 > 2 ? VAR_307 -> VAR_308 [ 2 ] : 0 ) ; } VAR_309 -> VAR_310 -> VAR_311 = VAR_312 -> VAR_313 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 = 0 ; const enum VAR_4 * VAR_5 = VAR_6 ; TYPE_5 VAR_7 = 0 ; if ( METHOD_1 ( & VAR_8 -> VAR_9 ) < 36 ) return VAR_10 ; VAR_11 -> VAR_12 -> VAR_13 = METHOD_2 ( & VAR_14 -> VAR_15 ) ; VAR_16 -> VAR_17 = METHOD_3 ( & VAR_18 -> VAR_19 ) ; VAR_20 -> VAR_21 = METHOD_4 ( & VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 ) ; VAR_28 -> VAR_29 = METHOD_6 ( & VAR_30 -> VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_7 ( & VAR_34 -> VAR_35 ) ; VAR_36 -> VAR_37 = METHOD_8 ( & VAR_38 -> VAR_39 ) ; VAR_40 -> VAR_41 = METHOD_9 ( & VAR_42 -> VAR_43 ) ; VAR_44 -> VAR_45 = METHOD_10 ( & VAR_46 -> VAR_47 ) ; VAR_48 = METHOD_11 ( & VAR_49 -> VAR_50 ) ; if ( VAR_51 <= 0 ) { METHOD_12 ( VAR_52 -> VAR_53 , VAR_54 , ""Invalidnumberofcomponents:%d\\n"" , VAR_55 -> VAR_56 ) ; return VAR_57 ; } if ( VAR_58 > 4 ) { METHOD_13 ( VAR_59 -> VAR_60 , ""Supportfor%dcomponents"" , VAR_61 -> VAR_62 ) ; return VAR_63 ; } VAR_64 -> VAR_65 = VAR_66 ; if ( VAR_67 -> VAR_68 <= 0 || VAR_69 -> VAR_70 <= 0 ) { METHOD_14 ( VAR_71 -> VAR_72 , VAR_73 , ""Invalidtiledimension%dx%d.\\n"" , VAR_74 -> VAR_75 , VAR_76 -> VAR_77 ) ; return VAR_78 ; } if ( METHOD_15 ( & VAR_79 -> VAR_80 ) < 3 * VAR_81 -> VAR_82 ) return VAR_83 ; for ( VAR_84 = 0 ; VAR_85 < VAR_86 -> VAR_87 ; VAR_88 ++ ) { TYPE_6 VAR_89 = METHOD_16 ( & VAR_90 -> VAR_91 ) ; VAR_92 -> VAR_93 [ VAR_94 ] = ( VAR_95 & 0x7f ) + 1 ; VAR_96 -> VAR_97 = METHOD_17 ( VAR_98 -> VAR_99 [ VAR_100 ] , VAR_101 -> VAR_102 ) ; VAR_103 -> VAR_104 [ VAR_105 ] = ! ! ( VAR_106 & 0x80 ) ; VAR_107 -> VAR_108 [ VAR_109 ] = METHOD_18 ( & VAR_110 -> VAR_111 ) ; VAR_112 -> VAR_113 [ VAR_114 ] = METHOD_19 ( & VAR_115 -> VAR_116 ) ; if ( VAR_312 -> VAR_223 || VAR_312 -> VAR_232 ) { METHOD_13 ( VAR_312 -> VAR_310 , ""Supportforimageoffsets"" ) ; return VAR_63 ; } if ( ! VAR_117 -> VAR_118 [ VAR_119 ] || VAR_120 -> VAR_121 [ VAR_122 ] == 3 || VAR_123 -> VAR_124 [ VAR_125 ] > 4 || ! VAR_126 -> VAR_127 [ VAR_128 ] || VAR_129 -> VAR_130 [ VAR_131 ] == 3 || VAR_132 -> VAR_133 [ VAR_134 ] > 4 ) { METHOD_20 ( VAR_135 -> VAR_136 , VAR_137 , ""Invalidsampleseparation%d/%d\\n"" , VAR_138 -> VAR_139 [ VAR_140 ] , VAR_141 -> VAR_142 [ VAR_143 ] ) ; return VAR_144 ; } VAR_145 |= VAR_146 -> VAR_147 [ VAR_148 ] >> 1 << VAR_149 * 4 | VAR_150 -> VAR_151 [ VAR_152 ] >> 1 << VAR_153 * 4 + 2 ; } VAR_154 -> VAR_155 = METHOD_21 ( VAR_156 -> VAR_157 - VAR_158 -> VAR_159 , VAR_160 -> VAR_161 ) ; VAR_162 -> VAR_163 = METHOD_22 ( VAR_164 -> VAR_165 - VAR_166 -> VAR_167 , VAR_168 -> VAR_169 ) ; if ( VAR_170 -> VAR_171 * ( TYPE_7 ) VAR_172 -> VAR_173 > VAR_174 / sizeof ( * VAR_175 -> VAR_176 ) ) { VAR_177 -> VAR_178 = VAR_179 -> VAR_180 = 0 ; return METHOD_23 ( VAR_181 ) ; } VAR_182 -> VAR_183 = METHOD_24 ( VAR_184 -> VAR_185 * VAR_186 -> VAR_187 , sizeof ( * VAR_188 -> VAR_189 ) ) ; if ( ! VAR_190 -> VAR_191 ) { VAR_192 -> VAR_193 = VAR_194 -> VAR_195 = 0 ; return METHOD_25 ( VAR_196 ) ; } for ( VAR_197 = 0 ; VAR_198 < VAR_199 -> VAR_200 * VAR_201 -> VAR_202 ; VAR_203 ++ ) { TYPE_8 * VAR_204 = VAR_205 -> VAR_206 + VAR_207 ; VAR_208 -> VAR_209 = METHOD_26 ( VAR_210 -> VAR_211 * sizeof ( * VAR_212 -> VAR_213 ) ) ; if ( ! VAR_214 -> VAR_215 ) return METHOD_27 ( VAR_216 ) ; } VAR_217 -> VAR_218 -> VAR_219 = METHOD_28 ( VAR_220 -> VAR_221 - VAR_222 -> VAR_223 , VAR_224 -> VAR_225 ) ; VAR_226 -> VAR_227 -> VAR_228 = METHOD_29 ( VAR_229 -> VAR_230 - VAR_231 -> VAR_232 , VAR_233 -> VAR_234 ) ; if ( VAR_235 -> VAR_236 -> VAR_237 == VAR_238 || VAR_239 -> VAR_240 -> VAR_241 == VAR_242 ) { VAR_243 = VAR_244 ; VAR_245 = METHOD_30 ( VAR_246 ) ; } else { switch ( VAR_247 -> VAR_248 ) { case 16 : VAR_249 = VAR_250 ; VAR_251 = METHOD_31 ( VAR_252 ) ; break ; case 17 : VAR_253 = VAR_254 ; VAR_255 = METHOD_32 ( VAR_256 ) ; break ; case 18 : VAR_257 = VAR_258 ; VAR_259 = METHOD_33 ( VAR_260 ) ; break ; default : VAR_261 = VAR_262 ; VAR_263 = METHOD_34 ( VAR_264 ) ; break ; } } for ( VAR_265 = 0 ; VAR_266 < VAR_267 ; ++ VAR_268 ) { if ( METHOD_35 ( VAR_269 [ VAR_270 ] , VAR_271 , VAR_272 -> VAR_273 , VAR_274 , VAR_275 -> VAR_276 ) ) { VAR_277 -> VAR_278 -> VAR_279 = VAR_280 [ VAR_281 ] ; break ; } } if ( VAR_282 -> VAR_283 -> VAR_284 == VAR_285 ) { METHOD_36 ( VAR_286 -> VAR_287 , VAR_288 , ""Unknownpix_fmt,profile:%d,colour_space:%d,"" ""components:%d,precision:%d,"" ""cdx[1]:%d,cdy[1]:%d,cdx[2]:%d,cdy[2]:%d\\n"" , VAR_289 -> VAR_290 -> VAR_291 , VAR_292 -> VAR_293 , VAR_294 , VAR_295 -> VAR_296 , VAR_297 > 2 ? VAR_298 -> VAR_299 [ 1 ] : 0 , VAR_300 > 2 ? VAR_301 -> VAR_302 [ 1 ] : 0 , VAR_303 > 2 ? VAR_304 -> VAR_305 [ 2 ] : 0 , VAR_306 > 2 ? VAR_307 -> VAR_308 [ 2 ] : 0 ) ; } VAR_309 -> VAR_310 -> VAR_311 = VAR_312 -> VAR_313 ; return 0 ; }",12
13,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 && VAR_4 -> VAR_5 ) { const TYPE_2 * VAR_6 = ( const TYPE_3 * ) VAR_7 -> VAR_8 . VAR_9 ; TYPE_4 VAR_10 = VAR_11 -> VAR_12 . VAR_13 ; TYPE_5 * VAR_14 = VAR_15 -> VAR_16 ;  METHOD_1 ( VAR_17 , VAR_18 -> VAR_19 , METHOD_2 ( VAR_20 , VAR_21 , VAR_22 ) ) ;  } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 && VAR_4 -> VAR_5 ) { const TYPE_2 * VAR_6 = ( const TYPE_3 * ) VAR_7 -> VAR_8 . VAR_9 ; TYPE_4 VAR_10 = VAR_11 -> VAR_12 . VAR_13 ; TYPE_5 * VAR_14 = VAR_15 -> VAR_16 ; METHOD_1 ( VAR_18 , VAR_18 -> VAR_19 , METHOD_2 ( VAR_20 , VAR_21 , VAR_22 ) ) ; } }",13
14,static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { TYPE_3 * VAR_1 = VAR_2 -> VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 ) ;  return 0 ;  },static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 ) { TYPE_3 * VAR_1 = VAR_2 -> VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 ) ; METHOD_1 ( & VAR_4 -> VAR_6 ) ; VAR_4 -> VAR_7 = 0 ; return 0 ; },14
15,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 * VAR_5 , * VAR_6 , VAR_7 ; TYPE_7 * VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 ) ; if ( ( VAR_11 = METHOD_2 ( VAR_12 , "".pdf"" ) ) ) * VAR_13 = '\\0' ;  VAR_14 = METHOD_3 ( METHOD_4 ( VAR_15 ) + METHOD_5 ( VAR_16 ) + 16 ) ;  METHOD_6 ( VAR_17 , METHOD_7 ( VAR_18 ) + METHOD_8 ( VAR_19 ) + 16 , ""%s/%s-version-%d.pdf"" , VAR_20 , VAR_21 , VAR_22 -> VAR_23 ) ; if ( ! ( VAR_24 = METHOD_9 ( VAR_25 , ""w"" ) ) ) { METHOD_10 ( ""Couldnotcreatefile\'%s\'\\n"" , VAR_26 ) ; METHOD_11 ( VAR_27 , VAR_28 , VAR_29 ) ; METHOD_12 ( VAR_30 ) ; return ; } METHOD_13 ( VAR_31 , 0 , VAR_32 ) ; while ( METHOD_14 ( & VAR_33 , 1 , 1 , VAR_34 ) ) METHOD_15 ( & VAR_35 , 1 , 1 , VAR_36 ) ; METHOD_16 ( VAR_37 , ""\\r\\nstartxref\\r\\n%ld\\r\\n%%%%EOF"" , VAR_38 -> VAR_39 ) ; METHOD_17 ( VAR_40 ) ; METHOD_18 ( VAR_41 ) ; METHOD_19 ( VAR_42 , VAR_43 , VAR_44 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 * VAR_5 , * VAR_6 , VAR_7 ; TYPE_7 * VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 ) ; if ( ( VAR_11 = METHOD_2 ( VAR_12 , "".pdf"" ) ) ) * VAR_13 = '\\0' ; VAR_14 = METHOD_3 ( METHOD_4 ( VAR_15 ) + METHOD_5 ( VAR_16 ) + 16 ) ; METHOD_6 ( VAR_17 , METHOD_7 ( VAR_18 ) + METHOD_8 ( VAR_19 ) + 16 , ""%s/%s-version-%d.pdf"" , VAR_20 , VAR_21 , VAR_22 -> VAR_23 ) ; if ( ! ( VAR_24 = METHOD_9 ( VAR_25 , ""w"" ) ) ) { METHOD_10 ( ""Couldnotcreatefile\'%s\'\\n"" , VAR_26 ) ; METHOD_11 ( VAR_27 , VAR_28 , VAR_29 ) ; METHOD_12 ( VAR_30 ) ; return ; } METHOD_13 ( VAR_31 , 0 , VAR_32 ) ; while ( METHOD_14 ( & VAR_33 , 1 , 1 , VAR_34 ) ) METHOD_15 ( & VAR_35 , 1 , 1 , VAR_36 ) ; METHOD_16 ( VAR_37 , ""\\r\\nstartxref\\r\\n%ld\\r\\n%%%%EOF"" , VAR_38 -> VAR_39 ) ; METHOD_17 ( VAR_40 ) ; METHOD_18 ( VAR_41 ) ; METHOD_19 ( VAR_42 , VAR_43 , VAR_44 ) ; }",15
16,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_1 -> STRUCT_OR_UNION_3 ; if ( ! VAR_2 -> VAR_3 . VAR_4 ) METHOD_1 ( VAR_5 ) ; while ( 1 ) { if ( METHOD_2 ( & VAR_6 -> VAR_7 , & VAR_8 -> VAR_9 ) ) break ; if ( VAR_10 -> VAR_11 . STRUCT_OR_UNION_4 != VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) { struct STRUCT_OR_UNION_5 * VAR_16 = VAR_17 -> VAR_18 . STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * VAR_19 = VAR_20 -> VAR_21 ; unsigned VAR_22 ; STRUCT_OR_UNION_8 = VAR_23 -> VAR_24 ; VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_4 ( METHOD_5 ( & VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ) ) return - VAR_32 ; VAR_33 -> VAR_34 . STRUCT_OR_UNION_9 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ;  break ;  } else { struct STRUCT_OR_UNION_10 * VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 . VAR_42 ) ; struct STRUCT_OR_UNION_11 * VAR_43 = VAR_44 -> VAR_45 ; struct STRUCT_OR_UNION_12 * VAR_46 = VAR_47 -> VAR_48 ; struct STRUCT_OR_UNION_13 * VAR_49 = VAR_50 -> VAR_51 ; unsigned VAR_52 = METHOD_7 ( & VAR_53 -> VAR_54 ) ; if ( METHOD_8 ( METHOD_9 ( & VAR_55 , VAR_56 -> VAR_57 ) ) ) return - VAR_58 ; if ( & VAR_59 -> VAR_60 == VAR_61 -> VAR_62 . VAR_63 ) break ; VAR_64 -> VAR_65 . STRUCT_OR_UNION_14 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = & VAR_70 -> VAR_71 ; STRUCT_OR_UNION_15 = VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ; } } while ( METHOD_10 ( METHOD_11 ( VAR_76 -> VAR_77 . STRUCT_OR_UNION_16 ) ) ) { struct STRUCT_OR_UNION_17 * VAR_78 ; VAR_79 = METHOD_12 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 -> VAR_84 . STRUCT_OR_UNION_18 ) ; if ( METHOD_13 ( METHOD_14 ( & VAR_85 , VAR_86 -> VAR_87 ) ) ) return - VAR_88 ; if ( ! VAR_89 ) break ; VAR_90 -> VAR_91 . VAR_92 = & VAR_93 -> VAR_94 ; VAR_95 -> VAR_96 . STRUCT_OR_UNION_19 = VAR_97 -> VAR_98 . VAR_99 ; STRUCT_OR_UNION_20 = VAR_100 -> VAR_101 . STRUCT_OR_UNION_21 -> VAR_102 ; VAR_103 -> VAR_104 = METHOD_15 ( & VAR_105 -> VAR_106 . STRUCT_OR_UNION_22 -> VAR_107 ) ; } VAR_108 -> STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_1 -> STRUCT_OR_UNION_3 ; if ( ! VAR_2 -> VAR_3 . VAR_4 ) METHOD_1 ( VAR_5 ) ; while ( 1 ) { if ( METHOD_2 ( & VAR_6 -> VAR_7 , & VAR_8 -> VAR_9 ) ) break ; if ( VAR_10 -> VAR_11 . STRUCT_OR_UNION_4 != VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) { struct STRUCT_OR_UNION_5 * VAR_16 = VAR_17 -> VAR_18 . STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * VAR_19 = VAR_20 -> VAR_21 ; unsigned VAR_22 ; STRUCT_OR_UNION_8 = VAR_23 -> VAR_24 ; VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_4 ( METHOD_5 ( & VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ) ) return - VAR_32 ; VAR_33 -> VAR_34 . STRUCT_OR_UNION_9 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; break ; } else { struct STRUCT_OR_UNION_10 * VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 . VAR_42 ) ; struct STRUCT_OR_UNION_11 * VAR_43 = VAR_44 -> VAR_45 ; struct STRUCT_OR_UNION_12 * VAR_46 = VAR_47 -> VAR_48 ; struct STRUCT_OR_UNION_13 * VAR_49 = VAR_50 -> VAR_51 ; unsigned VAR_52 = METHOD_7 ( & VAR_53 -> VAR_54 ) ; if ( METHOD_8 ( METHOD_9 ( & VAR_55 , VAR_56 -> VAR_57 ) ) ) return - VAR_58 ; if ( & VAR_59 -> VAR_60 == VAR_61 -> VAR_62 . VAR_63 ) break ; VAR_64 -> VAR_65 . STRUCT_OR_UNION_14 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = & VAR_70 -> VAR_71 ; STRUCT_OR_UNION_15 = VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ; } } while ( METHOD_10 ( METHOD_11 ( VAR_76 -> VAR_77 . STRUCT_OR_UNION_16 ) ) ) { struct STRUCT_OR_UNION_17 * VAR_78 ; VAR_79 = METHOD_12 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 -> VAR_84 . STRUCT_OR_UNION_18 ) ; if ( METHOD_13 ( METHOD_14 ( & VAR_85 , VAR_86 -> VAR_87 ) ) ) return - VAR_88 ; if ( ! VAR_89 ) break ; VAR_90 -> VAR_91 . VAR_92 = & VAR_93 -> VAR_94 ; VAR_95 -> VAR_96 . STRUCT_OR_UNION_19 = VAR_97 -> VAR_98 . VAR_99 ; STRUCT_OR_UNION_20 = VAR_100 -> VAR_101 . STRUCT_OR_UNION_21 -> VAR_102 ; VAR_103 -> VAR_104 = METHOD_15 ( & VAR_105 -> VAR_106 . STRUCT_OR_UNION_22 -> VAR_107 ) ; } VAR_108 -> STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 ; return 0 ; }",16
17,"static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , ""akcipher"" , sizeof ( VAR_5 . VAR_6 ) ) ;  if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }","static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ; METHOD_0 ( VAR_3 . VAR_4 , ""akcipher"" , sizeof ( VAR_5 . VAR_6 ) ) ; if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }",17
18," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 )  { static const TYPE_4 VAR_3 [ ] = ""\\""\\\\"" ; TYPE_5 * VAR_4 = VAR_5 ; const TYPE_6 * VAR_6 = VAR_7 ; * VAR_8 ++ = \'""\' ; VAR_9 -= 2 ; for ( ; * VAR_10 && VAR_11 ; VAR_12 ++ ) { if ( METHOD_1 ( VAR_13 , * VAR_14 ) ) { VAR_15 -= 2 ; if ( VAR_16 == 0 ) break ; * VAR_17 ++ = '\\\\' ; * VAR_18 ++ = * VAR_19 ; } else { * VAR_20 ++ = * VAR_21 ; VAR_22 -- ; } } * VAR_23 ++ = \'""\' ; * VAR_24 = '\\0' ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 ) { static const TYPE_4 VAR_3 [ ] = ""\\""\\\\"" ; TYPE_5 * VAR_4 = VAR_5 ; const TYPE_6 * VAR_6 = VAR_7 ; * VAR_8 ++ = \'""\' ; VAR_9 -= 2 ; for ( ; * VAR_10 && VAR_11 ; VAR_12 ++ ) { if ( METHOD_1 ( VAR_13 , * VAR_14 ) ) { VAR_15 -= 2 ; if ( VAR_16 == 0 ) break ; * VAR_17 ++ = '\\\\' ; * VAR_18 ++ = * VAR_19 ; } else { * VAR_20 ++ = * VAR_21 ; VAR_22 -- ; } } * VAR_23 ++ = \'""\' ; * VAR_24 = '\\0' ; }",18
19,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 [ 1024 ] ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ;  TYPE_4 VAR_5 ;  if ( METHOD_1 ( VAR_6 , & VAR_7 ) < 0 ) return VAR_8 ; if ( ( VAR_9 . VAR_10 & ( VAR_11 | VAR_12 | VAR_13 ) ) == 0 && VAR_14 . VAR_15 > VAR_16 ) return VAR_17 ;  for ( ; ; ) {  if ( ( VAR_18 = METHOD_2 ( VAR_19 , VAR_20 , VAR_21 , sizeof ( VAR_22 ) ) ) == 0 ) { if ( VAR_23 == VAR_24 ) break ; VAR_25 = VAR_26 ; goto VAR_27 ; } if ( ( VAR_28 = METHOD_3 ( VAR_29 , VAR_30 , VAR_31 ) ) != 0 ) goto VAR_32 ; if ( METHOD_4 ( VAR_33 ) > VAR_34 ) { VAR_35 = VAR_36 ; goto VAR_37 ; } } if ( ( VAR_38 . VAR_39 & ( VAR_40 | VAR_41 | VAR_42 ) ) == 0 && VAR_43 . VAR_44 != ( TYPE_5 ) METHOD_5 ( VAR_45 ) ) { VAR_46 = VAR_47 ; goto VAR_48 ; } VAR_49 = 0 ; VAR_50 : METHOD_6 ( VAR_51 , sizeof ( VAR_52 ) ) ; if ( VAR_53 != 0 ) METHOD_7 ( VAR_54 ) ; return VAR_55 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 [ 1024 ] ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ; TYPE_4 VAR_5 ; if ( METHOD_1 ( VAR_6 , & VAR_7 ) < 0 ) return VAR_8 ; if ( ( VAR_9 . VAR_10 & ( VAR_11 | VAR_12 | VAR_13 ) ) == 0 && VAR_14 . VAR_15 > VAR_16 ) return VAR_17 ; for ( ; ; ) { if ( ( VAR_18 = METHOD_2 ( VAR_19 , VAR_20 , VAR_21 , sizeof ( VAR_22 ) ) ) == 0 ) { if ( VAR_23 == VAR_24 ) break ; VAR_25 = VAR_26 ; goto VAR_27 ; } if ( ( VAR_28 = METHOD_3 ( VAR_29 , VAR_30 , VAR_31 ) ) != 0 ) goto VAR_32 ; if ( METHOD_4 ( VAR_33 ) > VAR_34 ) { VAR_35 = VAR_36 ; goto VAR_37 ; } } if ( ( VAR_38 . VAR_39 & ( VAR_40 | VAR_41 | VAR_42 ) ) == 0 && VAR_43 . VAR_44 != ( TYPE_5 ) METHOD_5 ( VAR_45 ) ) { VAR_46 = VAR_47 ; goto VAR_48 ; } VAR_49 = 0 ; VAR_50 : METHOD_6 ( VAR_51 , sizeof ( VAR_52 ) ) ; if ( VAR_53 != 0 ) METHOD_7 ( VAR_54 ) ; return VAR_55 ; }",19
20,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 == 0 ||  VAR_4 -> VAR_5 . VAR_6 > VAR_7 / VAR_8 -> VAR_9 . VAR_10 )  return - VAR_11 ; if ( VAR_12 -> VAR_13 . VAR_14 == 0 || VAR_15 -> VAR_16 . VAR_17 > VAR_18 ) return - VAR_19 ; if ( VAR_20 -> VAR_21 . VAR_22 == 0 || VAR_23 -> VAR_24 . VAR_25 == 0 ) return - VAR_26 ; return 0 ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 == 0 || VAR_4 -> VAR_5 . VAR_6 > VAR_7 / VAR_8 -> VAR_9 . VAR_10 ) return - VAR_11 ; if ( VAR_12 -> VAR_13 . VAR_14 == 0 || VAR_15 -> VAR_16 . VAR_17 > VAR_18 ) return - VAR_19 ; if ( VAR_20 -> VAR_21 . VAR_22 == 0 || VAR_23 -> VAR_24 . VAR_25 == 0 ) return - VAR_26 ; return 0 ; },20
21,"static TYPE_0 METHOD_0 ( const TYPE_1 * const VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; if ( VAR_6 == VAR_7 ) {  METHOD_1 ( VAR_8 , VAR_9 , sizeof ( TYPE_7 ) * VAR_10 ) ;  return ; } VAR_11 = METHOD_2 ( VAR_12 , VAR_13 ) ; if ( VAR_14 > 0 ) { TYPE_8 VAR_15 ; TYPE_9 * VAR_16 = VAR_17 ; TYPE_10 * VAR_18 = VAR_19 ; TYPE_11 * VAR_20 , * VAR_21 ; TYPE_12 VAR_22 = VAR_23 ; if ( ! VAR_24 ) { VAR_25 = ( TYPE_13 * ) METHOD_3 ( sizeof ( TYPE_14 ) * VAR_26 ) ; VAR_27 = VAR_28 ; } else { VAR_29 = VAR_30 ; } VAR_31 = VAR_32 + METHOD_4 ( VAR_33 , 1 ) ; for ( VAR_34 = 0 ; VAR_35 < VAR_36 ; ++ VAR_37 ) { const TYPE_15 VAR_38 = METHOD_5 ( VAR_39 , 1 ) ; const TYPE_16 * const VAR_40 = ( VAR_41 == 0 ? VAR_42 : VAR_43 ) ; if ( VAR_44 == VAR_45 - 1 && VAR_46 == VAR_47 ) VAR_48 = VAR_49 ; else VAR_50 = ( VAR_51 & 1 ? VAR_52 : VAR_53 ) ; if ( VAR_54 & 1 ) METHOD_6 ( VAR_55 , VAR_56 , VAR_57 ) ; else METHOD_7 ( VAR_58 , VAR_59 , VAR_60 ) ; VAR_61 = VAR_62 ; } if ( VAR_63 != VAR_64 ) { METHOD_8 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 ) ; } if ( VAR_69 ) METHOD_9 ( VAR_70 ) ; } else { METHOD_10 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ; } }","static TYPE_0 METHOD_0 ( const TYPE_1 * const VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; if ( VAR_6 == VAR_7 ) { METHOD_1 ( VAR_8 , VAR_9 , sizeof ( TYPE_7 ) * VAR_10 ) ; return ; } VAR_11 = METHOD_2 ( VAR_12 , VAR_13 ) ; if ( VAR_14 > 0 ) { TYPE_8 VAR_15 ; TYPE_9 * VAR_16 = VAR_17 ; TYPE_10 * VAR_18 = VAR_19 ; TYPE_11 * VAR_20 , * VAR_21 ; TYPE_12 VAR_22 = VAR_23 ; if ( ! VAR_24 ) { VAR_25 = ( TYPE_13 * ) METHOD_3 ( sizeof ( TYPE_14 ) * VAR_26 ) ; VAR_27 = VAR_28 ; } else { VAR_29 = VAR_30 ; } VAR_31 = VAR_32 + METHOD_4 ( VAR_33 , 1 ) ; for ( VAR_34 = 0 ; VAR_35 < VAR_36 ; ++ VAR_37 ) { const TYPE_15 VAR_38 = METHOD_5 ( VAR_39 , 1 ) ; const TYPE_16 * const VAR_40 = ( VAR_41 == 0 ? VAR_42 : VAR_43 ) ; if ( VAR_44 == VAR_45 - 1 && VAR_46 == VAR_47 ) VAR_48 = VAR_49 ; else VAR_50 = ( VAR_51 & 1 ? VAR_52 : VAR_53 ) ; if ( VAR_54 & 1 ) METHOD_6 ( VAR_55 , VAR_56 , VAR_57 ) ; else METHOD_7 ( VAR_58 , VAR_59 , VAR_60 ) ; VAR_61 = VAR_62 ; } if ( VAR_63 != VAR_64 ) { METHOD_8 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 ) ; } if ( VAR_69 ) METHOD_9 ( VAR_70 ) ; } else { METHOD_10 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 ) ; } }",21
22,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  if ( VAR_1 -> VAR_2 . VAR_3 ) {  METHOD_1 ( VAR_4 -> VAR_5 . VAR_6 ) ; VAR_7 -> VAR_8 . VAR_9 = VAR_10 ; } },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 . VAR_3 ) { METHOD_1 ( VAR_4 -> VAR_5 . VAR_6 ) ; VAR_7 -> VAR_8 . VAR_11 = VAR_12 ; },22
23,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 = VAR_10 ; TYPE_3 VAR_11 = 0 ; unsigned TYPE_4 VAR_12 ; union { struct STRUCT_OR_UNION_4 VAR_13 ; struct STRUCT_OR_UNION_5 VAR_14 ; struct STRUCT_OR_UNION_6 VAR_15 ; struct STRUCT_OR_UNION_7 VAR_16 ; } VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 ) ; if ( METHOD_2 ( VAR_20 ) > sizeof ( VAR_21 ) ) return - VAR_22 ; if ( VAR_23 & VAR_24 ) if ( METHOD_3 ( & VAR_25 , ( TYPE_5 TYPE_6 * ) VAR_26 , METHOD_4 ( VAR_27 ) ) ) return - VAR_28 ; switch ( VAR_29 ) { case VAR_30 : { struct STRUCT_OR_UNION_8 * VAR_31 ; VAR_32 = METHOD_5 ( VAR_33 , VAR_34 . VAR_35 . VAR_36 , VAR_37 . VAR_38 . VAR_39 , VAR_40 . VAR_41 . VAR_42 , VAR_43 . VAR_44 . VAR_45 ) ; if ( METHOD_6 ( VAR_46 ) ) return METHOD_7 ( VAR_47 ) ; VAR_48 . VAR_49 . VAR_50 = VAR_51 -> VAR_52 ; VAR_53 = VAR_54 ; break ; } case VAR_55 : { struct STRUCT_OR_UNION_9 * VAR_56 ;  VAR_57 = METHOD_8 ( VAR_58 , VAR_59 . VAR_60 . VAR_61 ) ;   if ( METHOD_9 ( VAR_62 ) )  return METHOD_10 ( VAR_63 ) ;  METHOD_11 ( VAR_64 , VAR_65 ) ;  METHOD_12 ( VAR_66 ) ; break ; } case VAR_67 : case VAR_68 : { struct STRUCT_OR_UNION_10 * VAR_69 ; VAR_70 = METHOD_13 ( VAR_71 , VAR_72 . VAR_73 . VAR_74 ) ; if ( METHOD_14 ( VAR_75 ) ) return METHOD_15 ( VAR_76 ) ; VAR_77 . VAR_78 . VAR_79 = METHOD_16 ( VAR_80 , VAR_81 ) ; METHOD_17 ( VAR_82 ) ; if ( VAR_83 . VAR_84 . VAR_85 < 0 ) VAR_86 = VAR_87 . VAR_88 . VAR_89 ; break ; } case VAR_90 : { struct STRUCT_OR_UNION_11 * VAR_91 ; VAR_92 = METHOD_18 ( VAR_93 , VAR_94 . VAR_95 . VAR_96 ) ; if ( METHOD_19 ( VAR_97 ) ) VAR_98 = METHOD_20 ( VAR_99 ) ; else VAR_100 . VAR_101 . VAR_102 = VAR_103 -> VAR_104 ; break ; } case VAR_105 : { VAR_106 = METHOD_21 ( VAR_107 , VAR_108 . VAR_109 . VAR_110 ) ; break ; } case VAR_111 : { if ( ! VAR_112 -> METHOD_22 ) return - VAR_113 ; VAR_114 = VAR_115 -> METHOD_23 ( VAR_116 , VAR_117 . VAR_118 . VAR_119 , VAR_120 . VAR_121 . VAR_122 ) ; break ; } default : return - VAR_123 ; } if ( VAR_124 & VAR_125 ) { if ( METHOD_24 ( ( TYPE_7 TYPE_8 * ) VAR_126 , & VAR_127 , METHOD_25 ( VAR_128 ) ) ) { if ( VAR_129 ) METHOD_26 ( VAR_130 , VAR_131 ) ; return - VAR_132 ; } } return VAR_133 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 = VAR_10 ; TYPE_3 VAR_11 = 0 ; unsigned TYPE_4 VAR_12 ; union { struct STRUCT_OR_UNION_4 VAR_13 ; struct STRUCT_OR_UNION_5 VAR_14 ; struct STRUCT_OR_UNION_6 VAR_15 ; struct STRUCT_OR_UNION_7 VAR_16 ; } VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 ) ; if ( METHOD_2 ( VAR_20 ) > sizeof ( VAR_21 ) ) return - VAR_22 ; if ( VAR_23 & VAR_24 ) if ( METHOD_3 ( & VAR_25 , ( TYPE_5 TYPE_6 * ) VAR_26 , METHOD_4 ( VAR_27 ) ) ) return - VAR_28 ; switch ( VAR_29 ) { case VAR_30 : { struct STRUCT_OR_UNION_8 * VAR_31 ; VAR_32 = METHOD_5 ( VAR_33 , VAR_34 . VAR_35 . VAR_36 , VAR_37 . VAR_38 . VAR_39 , VAR_40 . VAR_41 . VAR_42 , VAR_43 . VAR_44 . VAR_45 ) ; if ( METHOD_6 ( VAR_46 ) ) return METHOD_7 ( VAR_47 ) ; VAR_48 . VAR_49 . VAR_50 = VAR_51 -> VAR_52 ; VAR_53 = VAR_54 ; break ; } case VAR_55 : { struct STRUCT_OR_UNION_9 * VAR_56 ; VAR_57 = METHOD_8 ( VAR_58 , VAR_59 . VAR_60 . VAR_61 ) ; if ( METHOD_9 ( VAR_62 ) ) return METHOD_10 ( VAR_63 ) ; METHOD_11 ( VAR_64 , VAR_65 ) ; METHOD_12 ( VAR_66 ) ; break ; } case VAR_67 : case VAR_68 : { struct STRUCT_OR_UNION_10 * VAR_69 ; VAR_70 = METHOD_13 ( VAR_71 , VAR_72 . VAR_73 . VAR_74 ) ; if ( METHOD_14 ( VAR_75 ) ) return METHOD_15 ( VAR_76 ) ; VAR_77 . VAR_78 . VAR_79 = METHOD_16 ( VAR_80 , VAR_81 ) ; METHOD_17 ( VAR_82 ) ; if ( VAR_83 . VAR_84 . VAR_85 < 0 ) VAR_86 = VAR_87 . VAR_88 . VAR_89 ; break ; } case VAR_90 : { struct STRUCT_OR_UNION_11 * VAR_91 ; VAR_92 = METHOD_18 ( VAR_93 , VAR_94 . VAR_95 . VAR_96 ) ; if ( METHOD_19 ( VAR_97 ) ) VAR_98 = METHOD_20 ( VAR_99 ) ; else VAR_100 . VAR_101 . VAR_102 = VAR_103 -> VAR_104 ; break ; } case VAR_105 : { VAR_106 = METHOD_21 ( VAR_107 , VAR_108 . VAR_109 . VAR_110 ) ; break ; } case VAR_111 : { if ( ! VAR_112 -> METHOD_22 ) return - VAR_113 ; VAR_114 = VAR_115 -> METHOD_23 ( VAR_116 , VAR_117 . VAR_118 . VAR_119 , VAR_120 . VAR_121 . VAR_122 ) ; break ; } default : return - VAR_123 ; } if ( VAR_124 & VAR_125 ) { if ( METHOD_24 ( ( TYPE_7 TYPE_8 * ) VAR_126 , & VAR_127 , METHOD_25 ( VAR_128 ) ) ) { if ( VAR_129 ) METHOD_26 ( VAR_130 , VAR_131 ) ; return - VAR_132 ; } } return VAR_133 ; }",23
24,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) ( VAR_3 + 1 ) ; struct STRUCT_OR_UNION_4 * VAR_4 ; METHOD_1 ( & VAR_5 -> VAR_6 [ VAR_7 ] ) ; VAR_8 = ( struct STRUCT_OR_UNION_5 * ) VAR_9 -> VAR_10 [ VAR_11 ] ; if ( VAR_12 ) METHOD_2 ( VAR_13 ) ; METHOD_3 ( & VAR_14 -> VAR_15 [ VAR_16 ] ) ; if ( VAR_17 == VAR_18 ) return ; if ( VAR_19 -> VAR_20 ) goto VAR_21 ; if ( VAR_22 -> VAR_23 != 0 ) { if ( ( ( VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ) & 0x80 ) == 0 ) goto VAR_28 ; } VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; switch ( VAR_33 -> VAR_34 ) { case VAR_35 : { struct STRUCT_OR_UNION_6 * VAR_36 = ( struct STRUCT_OR_UNION_7 * ) VAR_37 ;  TYPE_1 VAR_38 = VAR_39 -> VAR_40 -   sizeof ( struct STRUCT_OR_UNION_8 ) + 1 ;  TYPE_2 VAR_41 = METHOD_4 ( METHOD_5 ( & VAR_42 -> VAR_43 ) ) ; TYPE_3 VAR_44 = METHOD_6 ( METHOD_7 ( & VAR_45 -> VAR_46 ) ) ; METHOD_8 ( VAR_47 , ""USB_REQ_GET_DESCRIPTOR-cnf\\n"" ) ; METHOD_9 ( VAR_48 -> VAR_49 , VAR_50 -> VAR_51 , VAR_52 -> VAR_53 , VAR_54 -> VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; } break ; case VAR_59 : { struct STRUCT_OR_UNION_9 * VAR_60 = ( struct STRUCT_OR_UNION_10 * ) VAR_61 ; METHOD_10 ( VAR_62 -> VAR_63 , VAR_64 -> VAR_65 , VAR_66 -> VAR_67 , VAR_68 , 0 ) ; } break ; case VAR_69 : { struct STRUCT_OR_UNION_11 * VAR_70 = ( struct STRUCT_OR_UNION_12 * ) VAR_71 ; METHOD_11 ( VAR_72 -> VAR_73 , VAR_74 -> VAR_75 , VAR_76 -> VAR_77 , VAR_78 , 0 ) ; } break ; case VAR_79 : { struct STRUCT_OR_UNION_13 * VAR_80 = ( struct STRUCT_OR_UNION_14 * ) VAR_81 ; METHOD_12 ( VAR_82 -> VAR_83 , VAR_84 -> VAR_85 , VAR_86 -> VAR_87 , VAR_88 -> VAR_89 , VAR_90 -> VAR_91 - sizeof ( struct STRUCT_OR_UNION_15 ) + 1 ) ; } break ; case VAR_92 : METHOD_13 ( VAR_93 , VAR_94 , VAR_95 -> VAR_96 ) ; break ; } VAR_97 : METHOD_14 ( VAR_98 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = ( struct STRUCT_OR_UNION_3 * ) ( VAR_3 + 1 ) ; struct STRUCT_OR_UNION_4 * VAR_4 ; METHOD_1 ( & VAR_5 -> VAR_6 [ VAR_7 ] ) ; VAR_8 = ( struct STRUCT_OR_UNION_5 * ) VAR_9 -> VAR_10 [ VAR_11 ] ; if ( VAR_12 ) METHOD_2 ( VAR_13 ) ; METHOD_3 ( & VAR_14 -> VAR_15 [ VAR_16 ] ) ; if ( VAR_17 == VAR_18 ) return ; if ( VAR_19 -> VAR_20 ) goto VAR_21 ; if ( VAR_22 -> VAR_23 != 0 ) { if ( ( ( VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ) & 0x80 ) == 0 ) goto VAR_28 ; } VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; switch ( VAR_33 -> VAR_34 ) { case VAR_35 : { struct STRUCT_OR_UNION_6 * VAR_36 = ( struct STRUCT_OR_UNION_7 * ) VAR_37 ; TYPE_1 VAR_38 = VAR_39 -> VAR_40 - sizeof ( struct STRUCT_OR_UNION_8 ) - 1 ) ; VAR_57 = METHOD_6 ( METHOD_7 ( & VAR_88 -> VAR_43 ) ) ; VAR_58 = METHOD_6 ( METHOD_7 ( & VAR_88 -> VAR_58 ) ) ; METHOD_8 ( VAR_47 , ""USB_REQ_GET_DESCRIPTOR-cnf\\n"" ) ; METHOD_9 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_88 -> VAR_89 , VAR_56 , VAR_57 , VAR_58 ) ; } break ; case VAR_59 : { struct STRUCT_OR_UNION_10 * VAR_88 = ( struct STRUCT_OR_UNION_10 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_78 , 0 ) ; } break ; case VAR_69 : { struct STRUCT_OR_UNION_12 * VAR_88 = ( struct STRUCT_OR_UNION_12 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_78 , 0 ) ; } break ; case VAR_79 : { struct STRUCT_OR_UNION_15 * VAR_88 = ( struct STRUCT_OR_UNION_15 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_88 -> VAR_89 , VAR_95 -> VAR_96 - sizeof ( struct STRUCT_OR_UNION_15 ) + 1 ) ; } break ; case VAR_59 : { struct STRUCT_OR_UNION_9 * VAR_60 = ( struct STRUCT_OR_UNION_10 * ) VAR_61 ; METHOD_10 ( VAR_62 -> VAR_63 , VAR_64 -> VAR_65 , VAR_66 -> VAR_67 , VAR_68 , 0 ) ; } break ; case VAR_69 : { struct STRUCT_OR_UNION_11 * VAR_70 = ( struct STRUCT_OR_UNION_12 * ) VAR_71 ; METHOD_11 ( VAR_72 -> VAR_73 , VAR_74 -> VAR_75 , VAR_76 -> VAR_77 , VAR_78 , 0 ) ; } break ; case VAR_79 : { struct STRUCT_OR_UNION_13 * VAR_80 = ( struct STRUCT_OR_UNION_14 * ) VAR_81 ; METHOD_12 ( VAR_82 -> VAR_83 , VAR_84 -> VAR_85 , VAR_86 -> VAR_87 , VAR_88 -> VAR_89 , VAR_90 -> VAR_91 - sizeof ( struct STRUCT_OR_UNION_15 ) + 1 ) ; } break ; case VAR_92 : METHOD_13 ( VAR_93 , VAR_94 , VAR_95 -> VAR_96 ) ; break ; } VAR_97 : METHOD_14 ( VAR_98 ) ; }",24
25,"TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * VAR_7 = VAR_8 ; TYPE_9 VAR_9 = 0 ; TYPE_10 * VAR_10 = VAR_11 ; TYPE_11 * VAR_12 = VAR_13 ; const TYPE_12 * VAR_14 ; TYPE_13 VAR_15 ; TYPE_14 VAR_16 , VAR_17 ; TYPE_15 VAR_18 = 0 ; if ( ( VAR_19 == VAR_20 ) || ( VAR_21 == VAR_22 ) || ( VAR_23 < 0 ) ) return ( VAR_24 ) ; VAR_25 = VAR_26 + VAR_27 ; if ( ( ( VAR_28 -> VAR_29 > 40 ) && ( ( VAR_30 -> VAR_31 & VAR_32 ) == 0 ) ) || ( VAR_33 -> VAR_34 > 1024 ) ) { METHOD_1 ( VAR_35 , VAR_36 , VAR_37 ) ; return ( VAR_38 ) ; } VAR_39 = VAR_40 ; VAR_41 = ( TYPE_16 * ) METHOD_2 ( VAR_42 * sizeof ( TYPE_17 ) ) ; if ( VAR_43 == VAR_44 ) goto VAR_45 ; if ( VAR_46 < VAR_47 ) VAR_48 = METHOD_3 ( VAR_49 , VAR_50 ) ; else VAR_51 = 0 ; while ( ( VAR_52 != 0 ) && ( VAR_53 != VAR_54 ) && ( VAR_55 != VAR_56 ) && ( VAR_57 != VAR_58 ) ) { if ( VAR_59 == 0 ) break ; if ( ( VAR_60 == '&' ) && ( VAR_61 [ 1 ] == '' ) ) { TYPE_18 VAR_62 = METHOD_4 ( VAR_63 , & VAR_64 ) ; if ( VAR_65 != 0 ) { METHOD_5 ( 0 , VAR_66 , VAR_67 , VAR_68 ) ; } if ( VAR_69 > VAR_70 - VAR_71 ) { METHOD_6 ( VAR_72 , VAR_73 ) ; } } else if ( ( VAR_74 == '&' ) && ( VAR_75 & VAR_76 ) ) { if ( VAR_77 ) METHOD_7 ( VAR_78 , ""StringdecodingEntityReference:%.30s\\n"" , VAR_79 ) ; VAR_80 = METHOD_8 ( VAR_81 , & VAR_82 ) ; if ( ( VAR_83 -> VAR_84 . VAR_85 == VAR_86 ) || ( VAR_87 -> VAR_88 . VAR_89 == VAR_90 ) ) goto VAR_91 ; if ( VAR_92 != VAR_93 ) VAR_94 -> VAR_95 += VAR_96 -> VAR_97 ; if ( ( VAR_98 != VAR_99 ) && ( VAR_100 -> VAR_101 == VAR_102 ) ) { if ( VAR_103 -> VAR_104 != VAR_105 ) { METHOD_9 ( 0 , VAR_106 , VAR_107 , VAR_108 -> VAR_109 [ 0 ] ) ; if ( VAR_110 > VAR_111 - VAR_112 ) { METHOD_10 ( VAR_113 , VAR_114 ) ; } } else { METHOD_11 ( VAR_115 , VAR_116 , ""predentityhasnocontent\\n"" ) ; } } else if ( ( VAR_117 != VAR_118 ) && ( VAR_119 -> VAR_120 != VAR_121 ) ) { VAR_122 -> VAR_123 ++ ; VAR_124 = METHOD_12 ( VAR_125 , VAR_126 -> VAR_127 , VAR_128 , 0 , 0 , 0 ) ; VAR_129 -> VAR_130 -- ; if ( VAR_131 != VAR_132 ) { VAR_133 = VAR_134 ; while ( * VAR_135 != 0 ) { VAR_136 [ VAR_137 ++ ] = * VAR_138 ++ ; if ( VAR_139 > VAR_140 - VAR_141 ) { if ( METHOD_13 ( VAR_142 , VAR_143 , VAR_144 ) ) goto VAR_145 ; METHOD_14 ( VAR_146 , VAR_147 ) ; } } METHOD_15 ( VAR_148 ) ; VAR_149 = VAR_150 ; } } else if ( VAR_151 != VAR_152 ) { TYPE_19 VAR_153 = METHOD_16 ( VAR_154 -> VAR_155 ) ; const TYPE_20 * VAR_156 = VAR_157 -> VAR_158 ; VAR_159 [ VAR_160 ++ ] = '&' ; if ( VAR_161 > VAR_162 - VAR_163 - VAR_164 ) {  METHOD_17 ( VAR_165 , VAR_166 ) ;  } for ( ; VAR_167 > 0 ; VAR_168 -- ) VAR_169 [ VAR_170 ++ ] = * VAR_171 ++ ; VAR_172 [ VAR_173 ++ ] = ';' ; } } else if ( VAR_174 == '%' && ( VAR_175 & VAR_176 ) ) { if ( VAR_177 ) METHOD_18 ( VAR_178 , ""StringdecodingPEReference:%.30s\\n"" , VAR_179 ) ; VAR_180 = METHOD_19 ( VAR_181 , & VAR_182 ) ; if ( VAR_183 -> VAR_184 . VAR_185 == VAR_186 ) goto VAR_187 ; if ( VAR_188 != VAR_189 ) VAR_190 -> VAR_191 += VAR_192 -> VAR_193 ; if ( VAR_194 != VAR_195 ) { if ( VAR_196 -> VAR_197 == VAR_198 ) { METHOD_20 ( VAR_199 , VAR_200 ) ; } VAR_201 -> VAR_202 ++ ; VAR_203 = METHOD_21 ( VAR_204 , VAR_205 -> VAR_206 , VAR_207 , 0 , 0 , 0 ) ; VAR_208 -> VAR_209 -- ; if ( VAR_210 != VAR_211 ) { VAR_212 = VAR_213 ; while ( * VAR_214 != 0 ) { VAR_215 [ VAR_216 ++ ] = * VAR_217 ++ ; if ( VAR_218 > VAR_219 - VAR_220 ) { if ( METHOD_22 ( VAR_221 , VAR_222 , VAR_223 ) ) goto VAR_224 ; METHOD_23 ( VAR_225 , VAR_226 ) ; } } METHOD_24 ( VAR_227 ) ; VAR_228 = VAR_229 ; } } } else { METHOD_25 ( VAR_230 , VAR_231 , VAR_232 , VAR_233 ) ; VAR_234 += VAR_235 ; if ( VAR_236 > VAR_237 - VAR_238 ) { METHOD_26 ( VAR_239 , VAR_240 ) ; } } if ( VAR_241 < VAR_242 ) VAR_243 = METHOD_27 ( VAR_244 , VAR_245 ) ; else VAR_246 = 0 ; } VAR_247 [ VAR_248 ] = 0 ; return ( VAR_249 ) ; VAR_250 : METHOD_28 ( VAR_251 , VAR_252 ) ; VAR_253 : if ( VAR_254 != VAR_255 ) METHOD_29 ( VAR_256 ) ; if ( VAR_257 != VAR_258 ) METHOD_30 ( VAR_259 ) ; return ( VAR_260 ) ; }","TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * VAR_7 = VAR_8 ; TYPE_9 VAR_9 = 0 ; TYPE_10 * VAR_10 = VAR_11 ; TYPE_11 * VAR_12 = VAR_13 ; const TYPE_12 * VAR_14 ; TYPE_13 VAR_15 ; TYPE_14 VAR_16 , VAR_17 ; TYPE_15 VAR_18 = 0 ; if ( ( VAR_19 == VAR_20 ) || ( VAR_21 == VAR_22 ) || ( VAR_23 < 0 ) ) return ( VAR_24 ) ; VAR_25 = VAR_26 + VAR_27 ; if ( ( ( VAR_28 -> VAR_29 > 40 ) && ( ( VAR_30 -> VAR_31 & VAR_32 ) == 0 ) ) || ( VAR_33 -> VAR_34 > 1024 ) ) { METHOD_1 ( VAR_35 , VAR_36 , VAR_37 ) ; return ( VAR_38 ) ; } VAR_39 = VAR_40 ; VAR_41 = ( TYPE_16 * ) METHOD_2 ( VAR_42 * sizeof ( TYPE_17 ) ) ; if ( VAR_43 == VAR_44 ) goto VAR_45 ; if ( VAR_46 < VAR_47 ) VAR_48 = METHOD_3 ( VAR_49 , VAR_50 ) ; else VAR_51 = 0 ; while ( ( VAR_52 != 0 ) && ( VAR_53 != VAR_54 ) && ( VAR_55 != VAR_56 ) && ( VAR_57 != VAR_58 ) ) { if ( VAR_59 == 0 ) break ; if ( ( VAR_60 == '&' ) && ( VAR_61 [ 1 ] == '' ) ) { TYPE_18 VAR_62 = METHOD_4 ( VAR_63 , & VAR_64 ) ; if ( VAR_65 != 0 ) { METHOD_5 ( 0 , VAR_66 , VAR_67 , VAR_68 ) ; } if ( VAR_69 > VAR_70 - VAR_71 ) { METHOD_6 ( VAR_72 , VAR_73 ) ; } } else if ( ( VAR_74 == '&' ) && ( VAR_75 & VAR_76 ) ) { if ( VAR_77 ) METHOD_7 ( VAR_78 , ""StringdecodingEntityReference:%.30s\\n"" , VAR_79 ) ; VAR_80 = METHOD_8 ( VAR_81 , & VAR_82 ) ; if ( ( VAR_83 -> VAR_84 . VAR_85 == VAR_86 ) || ( VAR_87 -> VAR_88 . VAR_89 == VAR_90 ) ) goto VAR_91 ; if ( VAR_92 != VAR_93 ) VAR_94 -> VAR_95 += VAR_96 -> VAR_97 ; if ( ( VAR_98 != VAR_99 ) && ( VAR_100 -> VAR_101 == VAR_102 ) ) { if ( VAR_103 -> VAR_104 != VAR_105 ) { METHOD_9 ( 0 , VAR_106 , VAR_107 , VAR_108 -> VAR_109 [ 0 ] ) ; if ( VAR_110 > VAR_111 - VAR_112 ) { METHOD_10 ( VAR_113 , VAR_114 ) ; } } else { METHOD_11 ( VAR_115 , VAR_116 , ""predentityhasnocontent\\n"" ) ; } } else if ( ( VAR_117 != VAR_118 ) && ( VAR_119 -> VAR_120 != VAR_121 ) ) { VAR_122 -> VAR_123 ++ ; VAR_124 = METHOD_12 ( VAR_125 , VAR_126 -> VAR_127 , VAR_128 , 0 , 0 , 0 ) ; VAR_129 -> VAR_130 -- ; if ( VAR_131 != VAR_132 ) { VAR_133 = VAR_134 ; while ( * VAR_135 != 0 ) { VAR_136 [ VAR_137 ++ ] = * VAR_138 ++ ; if ( VAR_139 > VAR_140 - VAR_141 ) { if ( METHOD_13 ( VAR_142 , VAR_143 , VAR_144 ) ) goto VAR_145 ; METHOD_14 ( VAR_146 , VAR_147 ) ; } } METHOD_15 ( VAR_148 ) ; VAR_149 = VAR_150 ; } } else if ( VAR_151 != VAR_152 ) { TYPE_19 VAR_153 = METHOD_16 ( VAR_154 -> VAR_155 ) ; const TYPE_20 * VAR_156 = VAR_157 -> VAR_158 ; VAR_159 [ VAR_160 ++ ] = '&' ; if ( VAR_161 > VAR_162 - VAR_163 - VAR_164 ) { METHOD_17 ( VAR_165 , VAR_166 ) ; } for ( ; VAR_167 > 0 ; VAR_168 -- ) VAR_169 [ VAR_170 ++ ] = * VAR_171 ++ ; VAR_172 [ VAR_173 ++ ] = ';' ; } } else if ( VAR_174 == '%' && ( VAR_175 & VAR_176 ) ) { if ( VAR_177 ) METHOD_18 ( VAR_178 , ""StringdecodingPEReference:%.30s\\n"" , VAR_179 ) ; VAR_180 = METHOD_19 ( VAR_181 , & VAR_182 ) ; if ( VAR_183 -> VAR_184 . VAR_185 == VAR_186 ) goto VAR_187 ; if ( VAR_188 != VAR_189 ) VAR_190 -> VAR_191 += VAR_192 -> VAR_193 ; if ( VAR_194 != VAR_195 ) { if ( VAR_196 -> VAR_197 == VAR_198 ) { METHOD_20 ( VAR_199 , VAR_200 ) ; } VAR_201 -> VAR_202 ++ ; VAR_203 = METHOD_21 ( VAR_204 , VAR_205 -> VAR_206 , VAR_207 , 0 , 0 , 0 ) ; VAR_208 -> VAR_209 -- ; if ( VAR_210 != VAR_211 ) { VAR_212 = VAR_213 ; while ( * VAR_214 != 0 ) { VAR_215 [ VAR_216 ++ ] = * VAR_217 ++ ; if ( VAR_218 > VAR_219 - VAR_220 ) { if ( METHOD_22 ( VAR_221 , VAR_222 , VAR_223 ) ) goto VAR_224 ; METHOD_23 ( VAR_225 , VAR_226 ) ; } } METHOD_24 ( VAR_227 ) ; VAR_228 = VAR_229 ; } } } else { METHOD_25 ( VAR_230 , VAR_231 , VAR_232 , VAR_233 ) ; VAR_234 += VAR_235 ; if ( VAR_236 > VAR_237 - VAR_238 ) { METHOD_26 ( VAR_239 , VAR_240 ) ; } } if ( VAR_241 < VAR_242 ) VAR_243 = METHOD_27 ( VAR_244 , VAR_245 ) ; else VAR_246 = 0 ; } VAR_247 [ VAR_248 ] = 0 ; return ( VAR_249 ) ; VAR_250 : METHOD_28 ( VAR_251 , VAR_252 ) ; VAR_253 : if ( VAR_254 != VAR_255 ) METHOD_29 ( VAR_256 ) ; if ( VAR_257 != VAR_258 ) METHOD_30 ( VAR_259 ) ; return ( VAR_260 ) ; }",25
26,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 = VAR_7 ; TYPE_8 VAR_8 ; if VAR_9 TYPE_9 VAR_10 = ( VAR_11 & VAR_12 ) ; TYPE_10 VAR_13 = ( VAR_14 & VAR_15 ) ; TYPE_11 VAR_16 = 0 ; METHOD_1 ( & VAR_17 , '\\0' , sizeof ( VAR_18 ) ) ; METHOD_2 ( & VAR_19 , '\\0' , sizeof ( VAR_20 ) ) ; VAR_21 = 0 ; while ( ( VAR_22 == 0 ) && ( 0 < VAR_23 ) && ( ( unsigned TYPE_12 ) VAR_24 > sizeof ( VAR_25 ) ) ) { TYPE_13 VAR_26 ; TYPE_14 VAR_27 ; METHOD_3 ( ( TYPE_15 * ) & VAR_28 , ( TYPE_16 * ) VAR_29 , sizeof ( VAR_30 ) ) ; METHOD_4 ( ( TYPE_17 * ) & VAR_31 , ( TYPE_18 * ) ( VAR_32 + sizeof ( VAR_33 ) ) , sizeof ( VAR_34 ) ) ; VAR_35 = METHOD_5 ( VAR_36 ) ; VAR_37 = METHOD_6 ( VAR_38 ) ; if ( VAR_39 > VAR_40 ) break ; if ( VAR_41 < ( 2 * sizeof ( TYPE_19 ) ) ) break ; if ( VAR_42 == VAR_43 ) { VAR_44 = METHOD_7 ( VAR_45 , & VAR_46 , & VAR_47 , VAR_48 ) ; if ( VAR_49 != 0 ) { METHOD_8 ( ""networkplugin:DecryptingAES256"" ""partfailed"" ""withstatus%i."" , VAR_50 ) ; break ; } } if VAR_51 else if ( ( VAR_52 -> VAR_53 . VAR_54 . VAR_55 == VAR_56 ) && ( VAR_57 == 0 ) ) { if ( VAR_58 == 0 ) { METHOD_9 ( ""networkplugin:Unencryptedpacketor"" ""parthasbeenignored."" ) ; VAR_59 = 1 ; } VAR_60 = ( ( TYPE_20 * ) VAR_61 ) + VAR_62 ;  continue ;  } else if ( VAR_63 == VAR_64 ) { VAR_65 = METHOD_10 ( VAR_66 , & VAR_67 , & VAR_68 , VAR_69 ) ; if ( VAR_70 != 0 ) { METHOD_11 ( ""networkplugin:VerifyingHMAC-SHA-256"" ""signaturefailed"" ""withstatus%i."" , VAR_71 ) ; break ; } } if VAR_72 else if ( ( VAR_73 -> VAR_74 . VAR_75 . VAR_76 == VAR_77 ) && ( VAR_78 == 0 ) && ( VAR_79 == 0 ) ) { if ( VAR_80 == 0 ) { METHOD_12 ( ""networkplugin:Unsignedpacketor"" ""parthasbeenignored."" ) ; VAR_81 = 1 ; } VAR_82 = ( ( TYPE_21 * ) VAR_83 ) + VAR_84 ;  continue ;  } else if ( VAR_85 == VAR_86 ) { VAR_87 = METHOD_13 ( & VAR_88 , & VAR_89 , & VAR_90 . VAR_91 , & VAR_92 . VAR_93 ) ; if ( VAR_94 != 0 ) break ; METHOD_14 ( & VAR_95 , VAR_96 ) ; METHOD_15 ( VAR_97 . VAR_98 ) ; } else if ( VAR_99 == VAR_100 ) { TYPE_22 VAR_101 = 0 ; VAR_102 = METHOD_16 ( & VAR_103 , & VAR_104 , & VAR_105 ) ; if ( VAR_106 == 0 ) { VAR_107 . VAR_108 = METHOD_17 ( VAR_109 ) ; VAR_110 . VAR_111 = METHOD_18 ( VAR_112 ) ; } } else if ( VAR_113 == VAR_114 ) { TYPE_23 VAR_115 = 0 ; VAR_116 = METHOD_19 ( & VAR_117 , & VAR_118 , & VAR_119 ) ; if ( VAR_120 == 0 ) { VAR_121 . VAR_122 = ( TYPE_24 ) VAR_123 ; VAR_124 . VAR_125 = ( TYPE_25 ) VAR_126 ; } } else if ( VAR_127 == VAR_128 ) { TYPE_26 VAR_129 = 0 ; VAR_130 = METHOD_20 ( & VAR_131 , & VAR_132 , & VAR_133 ) ; if ( VAR_134 == 0 ) VAR_135 . VAR_136 = METHOD_21 ( VAR_137 ) ; } else if ( VAR_138 == VAR_139 ) { TYPE_27 VAR_140 = 0 ; VAR_141 = METHOD_22 ( & VAR_142 , & VAR_143 , & VAR_144 ) ; if ( VAR_145 == 0 ) VAR_146 . VAR_147 = ( TYPE_28 ) VAR_148 ; } else if ( VAR_149 == VAR_150 ) { VAR_151 = METHOD_23 ( & VAR_152 , & VAR_153 , VAR_154 . VAR_155 , sizeof ( VAR_156 . VAR_157 ) ) ; if ( VAR_158 == 0 ) METHOD_24 ( VAR_159 . VAR_160 , VAR_161 . VAR_162 , sizeof ( VAR_163 . VAR_164 ) ) ; } else if ( VAR_165 == VAR_166 ) { VAR_167 = METHOD_25 ( & VAR_168 , & VAR_169 , VAR_170 . VAR_171 , sizeof ( VAR_172 . VAR_173 ) ) ; if ( VAR_174 == 0 ) METHOD_26 ( VAR_175 . VAR_176 , VAR_177 . VAR_178 , sizeof ( VAR_179 . VAR_180 ) ) ; } else if ( VAR_181 == VAR_182 ) { VAR_183 = METHOD_27 ( & VAR_184 , & VAR_185 , VAR_186 . VAR_187 , sizeof ( VAR_188 . VAR_189 ) ) ; if ( VAR_190 == 0 ) METHOD_28 ( VAR_191 . VAR_192 , VAR_193 . VAR_194 , sizeof ( VAR_195 . VAR_196 ) ) ; } else if ( VAR_197 == VAR_198 ) { VAR_199 = METHOD_29 ( & VAR_200 , & VAR_201 , VAR_202 . VAR_203 , sizeof ( VAR_204 . VAR_205 ) ) ; if ( VAR_206 == 0 ) METHOD_30 ( VAR_207 . VAR_208 , VAR_209 . VAR_210 , sizeof ( VAR_211 . VAR_212 ) ) ; } else if ( VAR_213 == VAR_214 ) { VAR_215 = METHOD_31 ( & VAR_216 , & VAR_217 , VAR_218 . VAR_219 , sizeof ( VAR_220 . VAR_221 ) ) ; if ( VAR_222 == 0 ) METHOD_32 ( VAR_223 . VAR_224 , VAR_225 . VAR_226 , sizeof ( VAR_227 . VAR_228 ) ) ; } else if ( VAR_229 == VAR_230 ) { VAR_231 = METHOD_33 ( & VAR_232 , & VAR_233 , VAR_234 . VAR_235 , sizeof ( VAR_236 . VAR_237 ) ) ; if ( VAR_238 != 0 ) { } else if ( ( VAR_239 . VAR_240 != VAR_241 ) && ( VAR_242 . VAR_243 != VAR_244 ) && ( VAR_245 . VAR_246 != VAR_247 ) ) { METHOD_34 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""unknownseverity%i."" , VAR_248 . VAR_249 ) ; } else if ( VAR_250 . VAR_251 <= 0 ) { METHOD_35 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""time==0."" ) ; } else if ( METHOD_36 ( VAR_252 . VAR_253 ) <= 0 ) { METHOD_37 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""anemptymessage."" ) ; } else { METHOD_38 ( & VAR_254 ) ; } } else if ( VAR_255 == VAR_256 ) { TYPE_29 VAR_257 = 0 ; VAR_258 = METHOD_39 ( & VAR_259 , & VAR_260 , & VAR_261 ) ; if ( VAR_262 == 0 ) VAR_263 . VAR_264 = ( TYPE_30 ) VAR_265 ; } else { METHOD_40 ( ""networkplugin:parse_packet:Unknownpart"" ""type:0x%04hx"" , VAR_266 ) ; VAR_267 = ( ( TYPE_31 * ) VAR_268 ) + VAR_269 ;  }  } if ( VAR_270 == 0 && VAR_271 > 0 ) METHOD_41 ( ""networkplugin:parse_packet:Receivedtruncated"" ""packet,tryincreasing`MaxPacketSize\'"" ) ; return ( VAR_272 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 = VAR_7 ; TYPE_8 VAR_8 ; if VAR_9 TYPE_9 VAR_10 = ( VAR_11 & VAR_12 ) ; TYPE_10 VAR_13 = ( VAR_14 & VAR_15 ) ; TYPE_11 VAR_16 = 0 ; METHOD_1 ( & VAR_17 , '\\0' , sizeof ( VAR_18 ) ) ; METHOD_2 ( & VAR_19 , '\\0' , sizeof ( VAR_20 ) ) ; VAR_21 = 0 ; while ( ( VAR_22 == 0 ) && ( 0 < VAR_23 ) && ( ( unsigned TYPE_12 ) VAR_24 > sizeof ( VAR_25 ) ) ) { TYPE_13 VAR_26 ; TYPE_14 VAR_27 ; METHOD_3 ( ( TYPE_15 * ) & VAR_28 , ( TYPE_16 * ) VAR_29 , sizeof ( VAR_30 ) ) ; METHOD_4 ( ( TYPE_17 * ) & VAR_31 , ( TYPE_18 * ) ( VAR_32 + sizeof ( VAR_33 ) ) , sizeof ( VAR_34 ) ) ; VAR_35 = METHOD_5 ( VAR_36 ) ; VAR_37 = METHOD_6 ( VAR_38 ) ; if ( VAR_39 > VAR_40 ) break ; if ( VAR_41 < ( 2 * sizeof ( TYPE_19 ) ) ) break ; if ( VAR_42 == VAR_43 ) { VAR_44 = METHOD_7 ( VAR_45 , & VAR_46 , & VAR_47 , VAR_48 ) ; if ( VAR_49 != 0 ) { METHOD_8 ( ""networkplugin:DecryptingAES256"" ""partfailed"" ""withstatus%i."" , VAR_50 ) ; break ; } } if VAR_51 else if ( ( VAR_52 -> VAR_53 . VAR_54 . VAR_55 == VAR_56 ) && ( VAR_57 == 0 ) ) { if ( VAR_58 == 0 ) { METHOD_9 ( ""networkplugin:Unencryptedpacketor"" ""parthasbeenignored."" ) ; VAR_59 = 1 ; } VAR_60 = ( ( TYPE_20 * ) VAR_61 ) + VAR_62 ; continue ; } else if ( VAR_63 == VAR_64 ) { VAR_65 = METHOD_10 ( VAR_66 , & VAR_67 , & VAR_68 , VAR_69 ) ; if ( VAR_70 != 0 ) { METHOD_11 ( ""networkplugin:VerifyingHMAC-SHA-256"" ""signaturefailed"" ""withstatus%i."" , VAR_71 ) ; break ; } } if VAR_72 else if ( ( VAR_73 -> VAR_74 . VAR_75 . VAR_76 == VAR_77 ) && ( VAR_78 == 0 ) && ( VAR_79 == 0 ) ) { if ( VAR_80 == 0 ) { METHOD_12 ( ""networkplugin:Unsignedpacketor"" ""parthasbeenignored."" ) ; VAR_81 = 1 ; } VAR_82 = ( ( TYPE_21 * ) VAR_83 ) + VAR_84 ; continue ; } else if ( VAR_85 == VAR_86 ) { VAR_87 = METHOD_13 ( & VAR_88 , & VAR_89 , & VAR_90 . VAR_91 , & VAR_92 . VAR_93 ) ; if ( VAR_94 != 0 ) break ; METHOD_14 ( & VAR_95 , VAR_96 ) ; METHOD_15 ( VAR_97 . VAR_98 ) ; } else if ( VAR_99 == VAR_100 ) { TYPE_22 VAR_101 = 0 ; VAR_102 = METHOD_16 ( & VAR_103 , & VAR_104 , & VAR_105 ) ; if ( VAR_106 == 0 ) { VAR_107 . VAR_108 = METHOD_17 ( VAR_109 ) ; VAR_110 . VAR_111 = METHOD_18 ( VAR_112 ) ; } } else if ( VAR_113 == VAR_114 ) { TYPE_23 VAR_115 = 0 ; VAR_116 = METHOD_19 ( & VAR_117 , & VAR_118 , & VAR_119 ) ; if ( VAR_120 == 0 ) { VAR_121 . VAR_122 = ( TYPE_24 ) VAR_123 ; VAR_124 . VAR_125 = ( TYPE_25 ) VAR_126 ; } } else if ( VAR_127 == VAR_128 ) { TYPE_26 VAR_129 = 0 ; VAR_130 = METHOD_20 ( & VAR_131 , & VAR_132 , & VAR_133 ) ; if ( VAR_134 == 0 ) VAR_135 . VAR_136 = METHOD_21 ( VAR_137 ) ; } else if ( VAR_138 == VAR_139 ) { TYPE_27 VAR_140 = 0 ; VAR_141 = METHOD_22 ( & VAR_142 , & VAR_143 , & VAR_144 ) ; if ( VAR_145 == 0 ) VAR_146 . VAR_147 = ( TYPE_28 ) VAR_148 ; } else if ( VAR_149 == VAR_150 ) { VAR_151 = METHOD_23 ( & VAR_152 , & VAR_153 , VAR_154 . VAR_155 , sizeof ( VAR_156 . VAR_157 ) ) ; if ( VAR_158 == 0 ) METHOD_24 ( VAR_159 . VAR_160 , VAR_161 . VAR_162 , sizeof ( VAR_163 . VAR_164 ) ) ; } else if ( VAR_165 == VAR_166 ) { VAR_167 = METHOD_25 ( & VAR_168 , & VAR_169 , VAR_170 . VAR_171 , sizeof ( VAR_172 . VAR_173 ) ) ; if ( VAR_174 == 0 ) METHOD_26 ( VAR_175 . VAR_176 , VAR_177 . VAR_178 , sizeof ( VAR_179 . VAR_180 ) ) ; } else if ( VAR_181 == VAR_182 ) { VAR_183 = METHOD_27 ( & VAR_184 , & VAR_185 , VAR_186 . VAR_187 , sizeof ( VAR_188 . VAR_189 ) ) ; if ( VAR_190 == 0 ) METHOD_28 ( VAR_191 . VAR_192 , VAR_193 . VAR_194 , sizeof ( VAR_195 . VAR_196 ) ) ; } else if ( VAR_197 == VAR_198 ) { VAR_199 = METHOD_29 ( & VAR_200 , & VAR_201 , VAR_202 . VAR_203 , sizeof ( VAR_204 . VAR_205 ) ) ; if ( VAR_206 == 0 ) METHOD_30 ( VAR_207 . VAR_208 , VAR_209 . VAR_210 , sizeof ( VAR_211 . VAR_212 ) ) ; } else if ( VAR_213 == VAR_214 ) { VAR_215 = METHOD_31 ( & VAR_216 , & VAR_217 , VAR_218 . VAR_219 , sizeof ( VAR_220 . VAR_221 ) ) ; if ( VAR_222 == 0 ) METHOD_32 ( VAR_223 . VAR_224 , VAR_225 . VAR_226 , sizeof ( VAR_227 . VAR_228 ) ) ; } else if ( VAR_229 == VAR_230 ) { VAR_231 = METHOD_33 ( & VAR_232 , & VAR_233 , VAR_234 . VAR_235 , sizeof ( VAR_236 . VAR_237 ) ) ; if ( VAR_238 != 0 ) { } else if ( ( VAR_239 . VAR_240 != VAR_241 ) && ( VAR_242 . VAR_243 != VAR_244 ) && ( VAR_245 . VAR_246 != VAR_247 ) ) { METHOD_34 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""unknownseverity%i."" , VAR_248 . VAR_249 ) ; } else if ( VAR_250 . VAR_251 <= 0 ) { METHOD_35 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""time==0."" ) ; } else if ( METHOD_36 ( VAR_252 . VAR_253 ) <= 0 ) { METHOD_37 ( ""networkplugin:"" ""Ignoringnotificationwith"" ""anemptymessage."" ) ; } else { METHOD_38 ( & VAR_254 ) ; } } else if ( VAR_255 == VAR_256 ) { TYPE_29 VAR_257 = 0 ; VAR_258 = METHOD_39 ( & VAR_259 , & VAR_260 , & VAR_261 ) ; if ( VAR_262 == 0 ) VAR_263 . VAR_264 = ( TYPE_30 ) VAR_265 ; } else { METHOD_40 ( ""networkplugin:parse_packet:Unknownpart"" ""type:0x%04hx"" , VAR_266 ) ; VAR_267 = ( ( TYPE_31 * ) VAR_268 ) + VAR_269 ; VAR_271 -= ( TYPE_3 ) VAR_269 ; } } if ( VAR_270 == 0 && VAR_271 > 0 ) METHOD_41 ( ""networkplugin:parse_packet:Receivedtruncated"" ""packet,tryincreasing`MaxPacketSize\'"" ) ; return ( VAR_272 ) ; }",26
27,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , unsigned TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_4 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 VAR_7 ; TYPE_2 VAR_8 ; VAR_9 = VAR_10 & METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( VAR_13 , VAR_14 , VAR_15 ) ;  VAR_16 = ( struct STRUCT_OR_UNION_8 * ) METHOD_4 ( STRUCT_OR_UNION_9 ) ;  METHOD_5 ( & VAR_17 -> VAR_18 ) ; METHOD_6 ( VAR_19 , & VAR_20 , & VAR_21 -> VAR_22 , VAR_23 , VAR_24 ) { if ( VAR_25 == VAR_26 ) continue ; if ( ! METHOD_7 ( VAR_27 , VAR_28 ) ) METHOD_8 ( VAR_29 , VAR_30 , VAR_31 + METHOD_9 ( VAR_32 ) , STRUCT_OR_UNION_10 ) ; } METHOD_10 ( & VAR_33 -> VAR_34 ) ; return 1 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , unsigned TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_4 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 VAR_7 ; TYPE_2 VAR_8 ; VAR_9 = VAR_10 & METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( VAR_13 , VAR_14 , VAR_15 ) ; VAR_16 = ( struct STRUCT_OR_UNION_8 * ) METHOD_4 ( STRUCT_OR_UNION_9 ) ; METHOD_5 ( & VAR_17 -> VAR_18 ) ; METHOD_6 ( VAR_19 , & VAR_20 , & VAR_21 -> VAR_22 , VAR_23 , VAR_24 ) { if ( VAR_25 == VAR_26 ) continue ; if ( ! METHOD_7 ( VAR_27 , VAR_28 ) ) METHOD_8 ( VAR_29 , VAR_30 , VAR_31 + METHOD_9 ( VAR_32 ) , STRUCT_OR_UNION_10 ) ; } METHOD_10 ( & VAR_33 -> VAR_34 ) ; return 1 ; }",27
28," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 [ 8 ] , VAR_2 [ 8 ] , VAR_3 [ 8 ] , VAR_4 [ 8 ] , VAR_5 [ 16 ] , VAR_6 [ 16 ] ;  const TYPE_3 VAR_7 = METHOD_1 ( VAR_8 ) ;  const TYPE_4 VAR_9 = METHOD_2 ( VAR_10 , - VAR_11 ) ; const TYPE_5 VAR_12 = METHOD_3 ( - VAR_13 , VAR_14 ) ; const TYPE_6 VAR_15 = METHOD_4 ( VAR_16 , VAR_17 ) ;  const TYPE_7 VAR_18 = METHOD_5 ( - VAR_19 , - VAR_20 ) ;  const TYPE_8 VAR_21 = METHOD_6 ( - VAR_22 , VAR_23 ) ; const TYPE_9 VAR_24 = METHOD_7 ( VAR_25 , VAR_26 ) ; const TYPE_10 VAR_27 = METHOD_8 ( - VAR_28 , VAR_29 ) ; const TYPE_11 VAR_30 = METHOD_9 ( VAR_31 , VAR_32 ) ; const TYPE_12 VAR_33 = METHOD_10 ( - VAR_34 , VAR_35 ) ; const TYPE_13 VAR_36 = METHOD_11 ( VAR_37 , VAR_38 ) ; const TYPE_14 VAR_39 = METHOD_12 ( VAR_40 , VAR_41 ) ; const TYPE_15 VAR_42 = METHOD_13 ( - VAR_43 , VAR_44 ) ; const TYPE_16 VAR_45 = METHOD_14 ( - VAR_46 , VAR_47 ) ; const TYPE_17 VAR_48 = METHOD_15 ( VAR_49 , VAR_50 ) ; const TYPE_18 VAR_51 = METHOD_16 ( VAR_52 , VAR_53 ) ; const TYPE_19 VAR_54 = METHOD_17 ( - VAR_55 , VAR_56 ) ; const TYPE_20 VAR_57 = METHOD_18 ( - VAR_58 , VAR_59 ) ; const TYPE_21 VAR_60 = METHOD_19 ( VAR_61 ) ; VAR_62 [ 0 ] = METHOD_20 ( VAR_63 [ 0 ] , VAR_64 [ 15 ] ) ; VAR_65 [ 1 ] = METHOD_21 ( VAR_66 [ 1 ] , VAR_67 [ 14 ] ) ; VAR_68 [ 2 ] = METHOD_22 ( VAR_69 [ 2 ] , VAR_70 [ 13 ] ) ; VAR_71 [ 3 ] = METHOD_23 ( VAR_72 [ 3 ] , VAR_73 [ 12 ] ) ; VAR_74 [ 4 ] = METHOD_24 ( VAR_75 [ 4 ] , VAR_76 [ 11 ] ) ; VAR_77 [ 5 ] = METHOD_25 ( VAR_78 [ 5 ] , VAR_79 [ 10 ] ) ; VAR_80 [ 6 ] = METHOD_26 ( VAR_81 [ 6 ] , VAR_82 [ 9 ] ) ; VAR_83 [ 7 ] = METHOD_27 ( VAR_84 [ 7 ] , VAR_85 [ 8 ] ) ; VAR_86 [ 0 ] = METHOD_28 ( VAR_87 [ 7 ] , VAR_88 [ 8 ] ) ; VAR_89 [ 1 ] = METHOD_29 ( VAR_90 [ 6 ] , VAR_91 [ 9 ] ) ; VAR_92 [ 2 ] = METHOD_30 ( VAR_93 [ 5 ] , VAR_94 [ 10 ] ) ; VAR_95 [ 3 ] = METHOD_31 ( VAR_96 [ 4 ] , VAR_97 [ 11 ] ) ; VAR_98 [ 4 ] = METHOD_32 ( VAR_99 [ 3 ] , VAR_100 [ 12 ] ) ; VAR_101 [ 5 ] = METHOD_33 ( VAR_102 [ 2 ] , VAR_103 [ 13 ] ) ; VAR_104 [ 6 ] = METHOD_34 ( VAR_105 [ 1 ] , VAR_106 [ 14 ] ) ; VAR_107 [ 7 ] = METHOD_35 ( VAR_108 [ 0 ] , VAR_109 [ 15 ] ) ; VAR_110 [ 0 ] = METHOD_36 ( VAR_111 [ 0 ] , VAR_112 [ 7 ] ) ; VAR_113 [ 1 ] = METHOD_37 ( VAR_114 [ 1 ] , VAR_115 [ 6 ] ) ; VAR_116 [ 2 ] = METHOD_38 ( VAR_117 [ 2 ] , VAR_118 [ 5 ] ) ; VAR_119 [ 3 ] = METHOD_39 ( VAR_120 [ 3 ] , VAR_121 [ 4 ] ) ; VAR_122 [ 4 ] = METHOD_40 ( VAR_123 [ 3 ] , VAR_124 [ 4 ] ) ; VAR_125 [ 5 ] = METHOD_41 ( VAR_126 [ 2 ] , VAR_127 [ 5 ] ) ; VAR_128 [ 6 ] = METHOD_42 ( VAR_129 [ 1 ] , VAR_130 [ 6 ] ) ; VAR_131 [ 7 ] = METHOD_43 ( VAR_132 [ 0 ] , VAR_133 [ 7 ] ) ; VAR_134 [ 0 ] = METHOD_44 ( VAR_135 [ 0 ] , VAR_136 [ 3 ] ) ; VAR_137 [ 1 ] = METHOD_45 ( VAR_138 [ 1 ] , VAR_139 [ 2 ] ) ; VAR_140 [ 2 ] = METHOD_46 ( VAR_141 [ 1 ] , VAR_142 [ 2 ] ) ; VAR_143 [ 3 ] = METHOD_47 ( VAR_144 [ 0 ] , VAR_145 [ 3 ] ) ; VAR_146 [ 0 ] = METHOD_48 ( VAR_147 [ 0 ] , VAR_148 [ 1 ] ) ; VAR_149 [ 1 ] = METHOD_49 ( VAR_150 [ 0 ] , VAR_151 [ 1 ] ) ; VAR_152 [ 2 ] = METHOD_50 ( VAR_153 [ 2 ] , VAR_154 [ 3 ] ) ; VAR_155 [ 3 ] = METHOD_51 ( VAR_156 [ 2 ] , VAR_157 [ 3 ] ) ; VAR_158 [ 0 ] = METHOD_52 ( VAR_159 [ 0 ] , VAR_160 ) ; VAR_161 [ 1 ] = METHOD_53 ( VAR_162 [ 1 ] , VAR_163 ) ; VAR_164 [ 2 ] = METHOD_54 ( VAR_165 [ 0 ] , VAR_166 ) ; VAR_167 [ 3 ] = METHOD_55 ( VAR_168 [ 1 ] , VAR_169 ) ; VAR_170 [ 4 ] = METHOD_56 ( VAR_171 [ 2 ] , VAR_172 ) ; VAR_173 [ 5 ] = METHOD_57 ( VAR_174 [ 3 ] , VAR_175 ) ; VAR_176 [ 6 ] = METHOD_58 ( VAR_177 [ 2 ] , VAR_178 ) ; VAR_179 [ 7 ] = METHOD_59 ( VAR_180 [ 3 ] , VAR_181 ) ; VAR_182 [ 0 ] = METHOD_60 ( VAR_183 [ 0 ] , VAR_184 ) ; VAR_185 [ 1 ] = METHOD_61 ( VAR_186 [ 1 ] , VAR_187 ) ; VAR_188 [ 2 ] = METHOD_62 ( VAR_189 [ 2 ] , VAR_190 ) ; VAR_191 [ 3 ] = METHOD_63 ( VAR_192 [ 3 ] , VAR_193 ) ; VAR_194 [ 4 ] = METHOD_64 ( VAR_195 [ 4 ] , VAR_196 ) ; VAR_197 [ 5 ] = METHOD_65 ( VAR_198 [ 5 ] , VAR_199 ) ; VAR_200 [ 6 ] = METHOD_66 ( VAR_201 [ 6 ] , VAR_202 ) ; VAR_203 [ 7 ] = METHOD_67 ( VAR_204 [ 7 ] , VAR_205 ) ; VAR_206 [ 0 ] = METHOD_68 ( VAR_207 [ 0 ] , VAR_208 ) ; VAR_209 [ 1 ] = METHOD_69 ( VAR_210 [ 1 ] , VAR_211 ) ; VAR_212 [ 2 ] = METHOD_70 ( VAR_213 [ 2 ] , VAR_214 ) ; VAR_215 [ 3 ] = METHOD_71 ( VAR_216 [ 3 ] , VAR_217 ) ; VAR_218 [ 4 ] = METHOD_72 ( VAR_219 [ 4 ] , VAR_220 ) ; VAR_221 [ 5 ] = METHOD_73 ( VAR_222 [ 5 ] , VAR_223 ) ; VAR_224 [ 6 ] = METHOD_74 ( VAR_225 [ 6 ] , VAR_226 ) ; VAR_227 [ 7 ] = METHOD_75 ( VAR_228 [ 7 ] , VAR_229 ) ; VAR_230 [ 0 ] = METHOD_76 ( VAR_231 [ 0 ] , VAR_232 [ 1 ] ) ; VAR_233 [ 4 ] = METHOD_77 ( VAR_234 [ 4 ] , VAR_235 [ 5 ] ) ; VAR_236 [ 8 ] = METHOD_78 ( VAR_237 [ 2 ] , VAR_238 [ 3 ] ) ; VAR_239 [ 12 ] = METHOD_79 ( VAR_240 [ 6 ] , VAR_241 [ 7 ] ) ; VAR_242 [ 0 ] = METHOD_80 ( VAR_243 [ 5 ] , VAR_244 [ 6 ] ) ; VAR_245 [ 1 ] = METHOD_81 ( VAR_246 [ 5 ] , VAR_247 [ 6 ] ) ; VAR_248 [ 0 ] = METHOD_82 ( VAR_249 [ 0 ] , VAR_250 ) ; VAR_251 [ 1 ] = METHOD_83 ( VAR_252 [ 1 ] , VAR_253 ) ; VAR_254 [ 2 ] = METHOD_84 ( VAR_255 [ 0 ] , VAR_256 ) ; VAR_257 [ 3 ] = METHOD_85 ( VAR_258 [ 1 ] , VAR_259 ) ; VAR_260 [ 0 ] = METHOD_86 ( VAR_261 [ 0 ] , VAR_262 ) ; VAR_263 [ 1 ] = METHOD_87 ( VAR_264 [ 1 ] , VAR_265 ) ; VAR_266 [ 2 ] = METHOD_88 ( VAR_267 [ 2 ] , VAR_268 ) ; VAR_269 [ 3 ] = METHOD_89 ( VAR_270 [ 3 ] , VAR_271 ) ; VAR_272 [ 0 ] = METHOD_90 ( VAR_273 [ 0 ] , VAR_274 ) ; VAR_275 [ 1 ] = METHOD_91 ( VAR_276 [ 1 ] , VAR_277 ) ; VAR_278 [ 2 ] = METHOD_92 ( VAR_279 [ 2 ] , VAR_280 ) ; VAR_281 [ 3 ] = METHOD_93 ( VAR_282 [ 3 ] , VAR_283 ) ; VAR_284 [ 0 ] = METHOD_94 ( VAR_285 [ 0 ] , VAR_286 [ 1 ] ) ; VAR_287 [ 1 ] = METHOD_95 ( VAR_288 [ 2 ] , VAR_289 [ 3 ] ) ; VAR_290 [ 0 ] = METHOD_96 ( VAR_291 [ 4 ] , VAR_292 [ 0 ] ) ; VAR_293 [ 1 ] = METHOD_97 ( VAR_294 [ 4 ] , VAR_295 [ 0 ] ) ; VAR_296 [ 2 ] = METHOD_98 ( VAR_297 [ 7 ] , VAR_298 [ 1 ] ) ; VAR_299 [ 3 ] = METHOD_99 ( VAR_300 [ 7 ] , VAR_301 [ 1 ] ) ; VAR_302 [ 0 ] = METHOD_100 ( VAR_303 [ 0 ] , VAR_304 [ 3 ] ) ; VAR_305 [ 1 ] = METHOD_101 ( VAR_306 [ 0 ] , VAR_307 [ 3 ] ) ; VAR_308 [ 2 ] = METHOD_102 ( VAR_309 [ 1 ] , VAR_310 [ 2 ] ) ; VAR_311 [ 3 ] = METHOD_103 ( VAR_312 [ 1 ] , VAR_313 [ 2 ] ) ; VAR_314 [ 0 ] = METHOD_104 ( VAR_315 [ 0 ] , VAR_316 ) ; VAR_317 [ 1 ] = METHOD_105 ( VAR_318 [ 1 ] , VAR_319 ) ; VAR_320 [ 2 ] = METHOD_106 ( VAR_321 [ 2 ] , VAR_322 ) ; VAR_323 [ 3 ] = METHOD_107 ( VAR_324 [ 3 ] , VAR_325 ) ; VAR_326 [ 4 ] = METHOD_108 ( VAR_327 [ 2 ] , VAR_328 ) ; VAR_329 [ 5 ] = METHOD_109 ( VAR_330 [ 3 ] , VAR_331 ) ; VAR_332 [ 6 ] = METHOD_110 ( VAR_333 [ 0 ] , VAR_334 ) ; VAR_335 [ 7 ] = METHOD_111 ( VAR_336 [ 1 ] , VAR_337 ) ; VAR_338 [ 0 ] = METHOD_112 ( VAR_339 [ 0 ] , VAR_340 ) ; VAR_341 [ 1 ] = METHOD_113 ( VAR_342 [ 1 ] , VAR_343 ) ; VAR_344 [ 2 ] = METHOD_114 ( VAR_345 [ 2 ] , VAR_346 ) ; VAR_347 [ 3 ] = METHOD_115 ( VAR_348 [ 3 ] , VAR_349 ) ; VAR_350 [ 4 ] = METHOD_116 ( VAR_351 [ 4 ] , VAR_352 ) ; VAR_353 [ 5 ] = METHOD_117 ( VAR_354 [ 5 ] , VAR_355 ) ; VAR_356 [ 6 ] = METHOD_118 ( VAR_357 [ 6 ] , VAR_358 ) ; VAR_359 [ 7 ] = METHOD_119 ( VAR_360 [ 7 ] , VAR_361 ) ; VAR_362 [ 0 ] = METHOD_120 ( VAR_363 [ 0 ] , VAR_364 ) ; VAR_365 [ 1 ] = METHOD_121 ( VAR_366 [ 1 ] , VAR_367 ) ; VAR_368 [ 2 ] = METHOD_122 ( VAR_369 [ 2 ] , VAR_370 ) ; VAR_371 [ 3 ] = METHOD_123 ( VAR_372 [ 3 ] , VAR_373 ) ; VAR_374 [ 4 ] = METHOD_124 ( VAR_375 [ 4 ] , VAR_376 ) ; VAR_377 [ 5 ] = METHOD_125 ( VAR_378 [ 5 ] , VAR_379 ) ; VAR_380 [ 6 ] = METHOD_126 ( VAR_381 [ 6 ] , VAR_382 ) ; VAR_383 [ 7 ] = METHOD_127 ( VAR_384 [ 7 ] , VAR_385 ) ; VAR_386 [ 2 ] = METHOD_128 ( VAR_387 [ 0 ] , VAR_388 [ 1 ] ) ; VAR_389 [ 6 ] = METHOD_129 ( VAR_390 [ 4 ] , VAR_391 [ 5 ] ) ; VAR_392 [ 10 ] = METHOD_130 ( VAR_393 [ 2 ] , VAR_394 [ 3 ] ) ; VAR_395 [ 14 ] = METHOD_131 ( VAR_396 [ 6 ] , VAR_397 [ 7 ] ) ; VAR_398 [ 0 ] = METHOD_132 ( VAR_399 [ 2 ] , VAR_400 [ 5 ] ) ; VAR_401 [ 1 ] = METHOD_133 ( VAR_402 [ 2 ] , VAR_403 [ 5 ] ) ; VAR_404 [ 2 ] = METHOD_134 ( VAR_405 [ 3 ] , VAR_406 [ 4 ] ) ; VAR_407 [ 3 ] = METHOD_135 ( VAR_408 [ 3 ] , VAR_409 [ 4 ] ) ; VAR_410 [ 0 ] = METHOD_136 ( VAR_411 [ 0 ] , VAR_412 ) ; VAR_413 [ 1 ] = METHOD_137 ( VAR_414 [ 1 ] , VAR_415 ) ; VAR_416 [ 2 ] = METHOD_138 ( VAR_417 [ 2 ] , VAR_418 ) ; VAR_419 [ 3 ] = METHOD_139 ( VAR_420 [ 3 ] , VAR_421 ) ; VAR_422 [ 4 ] = METHOD_140 ( VAR_423 [ 2 ] , VAR_424 ) ; VAR_425 [ 5 ] = METHOD_141 ( VAR_426 [ 3 ] , VAR_427 ) ; VAR_428 [ 6 ] = METHOD_142 ( VAR_429 [ 0 ] , VAR_430 ) ; VAR_431 [ 7 ] = METHOD_143 ( VAR_432 [ 1 ] , VAR_433 ) ; VAR_434 [ 0 ] = METHOD_144 ( VAR_435 [ 0 ] , VAR_436 ) ; VAR_437 [ 1 ] = METHOD_145 ( VAR_438 [ 1 ] , VAR_439 ) ; VAR_440 [ 2 ] = METHOD_146 ( VAR_441 [ 2 ] , VAR_442 ) ; VAR_443 [ 3 ] = METHOD_147 ( VAR_444 [ 3 ] , VAR_445 ) ; VAR_446 [ 4 ] = METHOD_148 ( VAR_447 [ 4 ] , VAR_448 ) ; VAR_449 [ 5 ] = METHOD_149 ( VAR_450 [ 5 ] , VAR_451 ) ; VAR_452 [ 6 ] = METHOD_150 ( VAR_453 [ 6 ] , VAR_454 ) ; VAR_455 [ 7 ] = METHOD_151 ( VAR_456 [ 7 ] , VAR_457 ) ; VAR_458 [ 0 ] = METHOD_152 ( VAR_459 [ 0 ] , VAR_460 ) ; VAR_461 [ 1 ] = METHOD_153 ( VAR_462 [ 1 ] , VAR_463 ) ; VAR_464 [ 2 ] = METHOD_154 ( VAR_465 [ 2 ] , VAR_466 ) ; VAR_467 [ 3 ] = METHOD_155 ( VAR_468 [ 3 ] , VAR_469 ) ; VAR_470 [ 4 ] = METHOD_156 ( VAR_471 [ 4 ] , VAR_472 ) ; VAR_473 [ 5 ] = METHOD_157 ( VAR_474 [ 5 ] , VAR_475 ) ; VAR_476 [ 6 ] = METHOD_158 ( VAR_477 [ 6 ] , VAR_478 ) ; VAR_479 [ 7 ] = METHOD_159 ( VAR_480 [ 7 ] , VAR_481 ) ; VAR_482 [ 2 ] = METHOD_160 ( VAR_483 [ 0 ] , VAR_484 [ 1 ] ) ; VAR_485 [ 3 ] = METHOD_161 ( VAR_486 [ 2 ] , VAR_487 [ 3 ] ) ; VAR_488 [ 4 ] = METHOD_162 ( VAR_489 [ 4 ] , VAR_490 [ 5 ] ) ; VAR_491 [ 5 ] = METHOD_163 ( VAR_492 [ 6 ] , VAR_493 [ 7 ] ) ; VAR_494 [ 0 ] = METHOD_164 ( VAR_495 [ 0 ] , VAR_496 [ 3 ] ) ; VAR_497 [ 1 ] = METHOD_165 ( VAR_498 [ 1 ] , VAR_499 [ 2 ] ) ; VAR_500 [ 2 ] = METHOD_166 ( VAR_501 [ 1 ] , VAR_502 [ 2 ] ) ; VAR_503 [ 3 ] = METHOD_167 ( VAR_504 [ 0 ] , VAR_505 [ 3 ] ) ; VAR_506 [ 4 ] = METHOD_168 ( VAR_507 [ 7 ] , VAR_508 [ 4 ] ) ; VAR_509 [ 5 ] = METHOD_169 ( VAR_510 [ 6 ] , VAR_511 [ 5 ] ) ; VAR_512 [ 6 ] = METHOD_170 ( VAR_513 [ 6 ] , VAR_514 [ 5 ] ) ; VAR_515 [ 7 ] = METHOD_171 ( VAR_516 [ 7 ] , VAR_517 [ 4 ] ) ; VAR_518 [ 0 ] = METHOD_172 ( VAR_519 [ 1 ] , VAR_520 [ 6 ] ) ; VAR_521 [ 1 ] = METHOD_173 ( VAR_522 [ 1 ] , VAR_523 [ 6 ] ) ; VAR_524 [ 2 ] = METHOD_174 ( VAR_525 [ 2 ] , VAR_526 [ 5 ] ) ; VAR_527 [ 3 ] = METHOD_175 ( VAR_528 [ 2 ] , VAR_529 [ 5 ] ) ; VAR_530 [ 0 ] = METHOD_176 ( VAR_531 [ 0 ] , VAR_532 ) ; VAR_533 [ 1 ] = METHOD_177 ( VAR_534 [ 1 ] , VAR_535 ) ;  VAR_536 [ 2 ] = METHOD_178 ( VAR_537 [ 2 ] , VAR_538 ) ;  VAR_539 [ 3 ] = METHOD_179 ( VAR_540 [ 3 ] , VAR_541 ) ; VAR_542 [ 4 ] = METHOD_180 ( VAR_543 [ 2 ] , VAR_544 ) ; VAR_545 [ 5 ] = METHOD_181 ( VAR_546 [ 3 ] , VAR_547 ) ; VAR_548 [ 6 ] = METHOD_182 ( VAR_549 [ 0 ] , VAR_550 ) ;  VAR_551 [ 7 ] = METHOD_183 ( VAR_552 [ 1 ] , VAR_553 ) ;   VAR_554 [ 0 ] = METHOD_184 ( VAR_555 [ 0 ] , VAR_556 ) ;  VAR_557 [ 1 ] = METHOD_185 ( VAR_558 [ 1 ] , VAR_559 ) ; VAR_560 [ 2 ] = METHOD_186 ( VAR_561 [ 2 ] , VAR_562 ) ; VAR_563 [ 3 ] = METHOD_187 ( VAR_564 [ 3 ] , VAR_565 ) ; VAR_566 [ 4 ] = METHOD_188 ( VAR_567 [ 4 ] , VAR_568 ) ; VAR_569 [ 5 ] = METHOD_189 ( VAR_570 [ 5 ] , VAR_571 ) ; VAR_572 [ 6 ] = METHOD_190 ( VAR_573 [ 6 ] , VAR_574 ) ; VAR_575 [ 7 ] = METHOD_191 ( VAR_576 [ 7 ] , VAR_577 ) ; VAR_578 [ 0 ] = METHOD_192 ( VAR_579 [ 0 ] , VAR_580 ) ; VAR_581 [ 1 ] = METHOD_193 ( VAR_582 [ 1 ] , VAR_583 ) ; VAR_584 [ 2 ] = METHOD_194 ( VAR_585 [ 2 ] , VAR_586 ) ; VAR_587 [ 3 ] = METHOD_195 ( VAR_588 [ 3 ] , VAR_589 ) ; VAR_590 [ 4 ] = METHOD_196 ( VAR_591 [ 4 ] , VAR_592 ) ; VAR_593 [ 5 ] = METHOD_197 ( VAR_594 [ 5 ] , VAR_595 ) ; VAR_596 [ 6 ] = METHOD_198 ( VAR_597 [ 6 ] , VAR_598 ) ; VAR_599 [ 7 ] = METHOD_199 ( VAR_600 [ 7 ] , VAR_601 ) ; VAR_602 [ 1 ] = METHOD_200 ( VAR_603 [ 0 ] , VAR_604 [ 1 ] ) ; VAR_605 [ 2 ] = METHOD_201 ( VAR_606 [ 2 ] , VAR_607 [ 3 ] ) ; VAR_608 [ 5 ] = METHOD_202 ( VAR_609 [ 4 ] , VAR_610 [ 5 ] ) ; VAR_611 [ 6 ] = METHOD_203 ( VAR_612 [ 6 ] , VAR_613 [ 7 ] ) ; VAR_614 [ 0 ] = METHOD_204 ( VAR_615 [ 0 ] , VAR_616 [ 1 ] ) ; VAR_617 [ 1 ] = METHOD_205 ( VAR_618 [ 0 ] , VAR_619 [ 1 ] ) ;  VAR_620 [ 2 ] = METHOD_206 ( VAR_621 [ 3 ] , VAR_622 [ 2 ] ) ;   VAR_623 [ 3 ] = METHOD_207 ( VAR_624 [ 3 ] , VAR_625 [ 2 ] ) ;  VAR_626 [ 4 ] = METHOD_208 ( VAR_627 [ 4 ] , VAR_628 [ 5 ] ) ; VAR_629 [ 5 ] = METHOD_209 ( VAR_630 [ 4 ] , VAR_631 [ 5 ] ) ; VAR_632 [ 6 ] = METHOD_210 ( VAR_633 [ 7 ] , VAR_634 [ 6 ] ) ; VAR_635 [ 7 ] = METHOD_211 ( VAR_636 [ 7 ] , VAR_637 [ 6 ] ) ; VAR_638 [ 0 ] = METHOD_212 ( VAR_639 [ 0 ] , VAR_640 [ 7 ] ) ; VAR_641 [ 1 ] = METHOD_213 ( VAR_642 [ 0 ] , VAR_643 [ 7 ] ) ; VAR_644 [ 2 ] = METHOD_214 ( VAR_645 [ 1 ] , VAR_646 [ 6 ] ) ; VAR_647 [ 3 ] = METHOD_215 ( VAR_648 [ 1 ] , VAR_649 [ 6 ] ) ; VAR_650 [ 4 ] = METHOD_216 ( VAR_651 [ 2 ] , VAR_652 [ 5 ] ) ; VAR_653 [ 5 ] = METHOD_217 ( VAR_654 [ 2 ] , VAR_655 [ 5 ] ) ; VAR_656 [ 6 ] = METHOD_218 ( VAR_657 [ 3 ] , VAR_658 [ 4 ] ) ; VAR_659 [ 7 ] = METHOD_219 ( VAR_660 [ 3 ] , VAR_661 [ 4 ] ) ; VAR_662 [ 0 ] = METHOD_220 ( VAR_663 [ 0 ] , VAR_664 ) ; VAR_665 [ 1 ] = METHOD_221 ( VAR_666 [ 1 ] , VAR_667 ) ; VAR_668 [ 2 ] = METHOD_222 ( VAR_669 [ 2 ] , VAR_670 ) ; VAR_671 [ 3 ] = METHOD_223 ( VAR_672 [ 3 ] , VAR_673 ) ; VAR_674 [ 4 ] = METHOD_224 ( VAR_675 [ 4 ] , VAR_676 ) ; VAR_677 [ 5 ] = METHOD_225 ( VAR_678 [ 5 ] , VAR_679 ) ; VAR_680 [ 6 ] = METHOD_226 ( VAR_681 [ 6 ] , VAR_682 ) ; VAR_683 [ 7 ] = METHOD_227 ( VAR_684 [ 7 ] , VAR_685 ) ; VAR_686 [ 8 ] = METHOD_228 ( VAR_687 [ 6 ] , VAR_688 ) ; VAR_689 [ 9 ] = METHOD_229 ( VAR_690 [ 7 ] , VAR_691 ) ; VAR_692 [ 10 ] = METHOD_230 ( VAR_693 [ 4 ] , VAR_694 ) ; VAR_695 [ 11 ] = METHOD_231 ( VAR_696 [ 5 ] , VAR_697 ) ; VAR_698 [ 12 ] = METHOD_232 ( VAR_699 [ 2 ] , VAR_700 ) ; VAR_701 [ 13 ] = METHOD_233 ( VAR_702 [ 3 ] , VAR_703 ) ; VAR_704 [ 14 ] = METHOD_234 ( VAR_705 [ 0 ] , VAR_706 ) ; VAR_707 [ 15 ] = METHOD_235 ( VAR_708 [ 1 ] , VAR_709 ) ; VAR_710 [ 0 ] = METHOD_236 ( VAR_711 [ 0 ] , VAR_712 ) ; VAR_713 [ 1 ] = METHOD_237 ( VAR_714 [ 1 ] , VAR_715 ) ; VAR_716 [ 2 ] = METHOD_238 ( VAR_717 [ 2 ] , VAR_718 ) ; VAR_719 [ 3 ] = METHOD_239 ( VAR_720 [ 3 ] , VAR_721 ) ; VAR_722 [ 4 ] = METHOD_240 ( VAR_723 [ 4 ] , VAR_724 ) ; VAR_725 [ 5 ] = METHOD_241 ( VAR_726 [ 5 ] , VAR_727 ) ; VAR_728 [ 6 ] = METHOD_242 ( VAR_729 [ 6 ] , VAR_730 ) ; VAR_731 [ 7 ] = METHOD_243 ( VAR_732 [ 7 ] , VAR_733 ) ; VAR_734 [ 8 ] = METHOD_244 ( VAR_735 [ 8 ] , VAR_736 ) ; VAR_737 [ 9 ] = METHOD_245 ( VAR_738 [ 9 ] , VAR_739 ) ; VAR_740 [ 10 ] = METHOD_246 ( VAR_741 [ 10 ] , VAR_742 ) ; VAR_743 [ 11 ] = METHOD_247 ( VAR_744 [ 11 ] , VAR_745 ) ; VAR_746 [ 12 ] = METHOD_248 ( VAR_747 [ 12 ] , VAR_748 ) ; VAR_749 [ 13 ] = METHOD_249 ( VAR_750 [ 13 ] , VAR_751 ) ; VAR_752 [ 14 ] = METHOD_250 ( VAR_753 [ 14 ] , VAR_754 ) ; VAR_755 [ 15 ] = METHOD_251 ( VAR_756 [ 15 ] , VAR_757 ) ; VAR_758 [ 0 ] = METHOD_252 ( VAR_759 [ 0 ] , VAR_760 ) ; VAR_761 [ 1 ] = METHOD_253 ( VAR_762 [ 1 ] , VAR_763 ) ; VAR_764 [ 2 ] = METHOD_254 ( VAR_765 [ 2 ] , VAR_766 ) ; VAR_767 [ 3 ] = METHOD_255 ( VAR_768 [ 3 ] , VAR_769 ) ; VAR_770 [ 4 ] = METHOD_256 ( VAR_771 [ 4 ] , VAR_772 ) ; VAR_773 [ 5 ] = METHOD_257 ( VAR_774 [ 5 ] , VAR_775 ) ; VAR_776 [ 6 ] = METHOD_258 ( VAR_777 [ 6 ] , VAR_778 ) ; VAR_779 [ 7 ] = METHOD_259 ( VAR_780 [ 7 ] , VAR_781 ) ; VAR_782 [ 8 ] = METHOD_260 ( VAR_783 [ 8 ] , VAR_784 ) ; VAR_785 [ 9 ] = METHOD_261 ( VAR_786 [ 9 ] , VAR_787 ) ; VAR_788 [ 10 ] = METHOD_262 ( VAR_789 [ 10 ] , VAR_790 ) ; VAR_791 [ 11 ] = METHOD_263 ( VAR_792 [ 11 ] , VAR_793 ) ; VAR_794 [ 12 ] = METHOD_264 ( VAR_795 [ 12 ] , VAR_796 ) ; VAR_797 [ 13 ] = METHOD_265 ( VAR_798 [ 13 ] , VAR_799 ) ; VAR_800 [ 14 ] = METHOD_266 ( VAR_801 [ 14 ] , VAR_802 ) ; VAR_803 [ 15 ] = METHOD_267 ( VAR_804 [ 15 ] , VAR_805 ) ; VAR_806 [ 1 ] = METHOD_268 ( VAR_807 [ 0 ] , VAR_808 [ 1 ] ) ; VAR_809 [ 9 ] = METHOD_269 ( VAR_810 [ 2 ] , VAR_811 [ 3 ] ) ; VAR_812 [ 5 ] = METHOD_270 ( VAR_813 [ 4 ] , VAR_814 [ 5 ] ) ; VAR_815 [ 13 ] = METHOD_271 ( VAR_816 [ 6 ] , VAR_817 [ 7 ] ) ; VAR_818 [ 3 ] = METHOD_272 ( VAR_819 [ 8 ] , VAR_820 [ 9 ] ) ; VAR_821 [ 11 ] = METHOD_273 ( VAR_822 [ 10 ] , VAR_823 [ 11 ] ) ; VAR_824 [ 7 ] = METHOD_274 ( VAR_825 [ 12 ] , VAR_826 [ 13 ] ) ; VAR_827 [ 15 ] = METHOD_275 ( VAR_828 [ 14 ] , VAR_829 [ 15 ] ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ 8 ] , VAR_2 [ 8 ] , VAR_3 [ 8 ] , VAR_4 [ 8 ] , VAR_5 [ 16 ] , VAR_6 [ 16 ] ; const TYPE_3 VAR_7 = METHOD_1 ( ( int16_t ) VAR_8 ) ; const TYPE_4 VAR_9 = METHOD_2 ( VAR_10 , - VAR_11 ) ; const TYPE_5 VAR_12 = METHOD_3 ( - VAR_13 , VAR_14 ) ; const TYPE_6 VAR_15 = METHOD_4 ( VAR_16 , VAR_17 ) ; const TYPE_7 VAR_18 = METHOD_5 ( - VAR_19 , - VAR_20 ) ; const TYPE_8 VAR_21 = METHOD_6 ( - VAR_22 , VAR_23 ) ; const TYPE_9 VAR_24 = METHOD_7 ( VAR_25 , VAR_26 ) ; const TYPE_10 VAR_27 = METHOD_8 ( - VAR_28 , VAR_29 ) ; const TYPE_11 VAR_30 = METHOD_9 ( VAR_31 , VAR_32 ) ; const TYPE_12 VAR_33 = METHOD_10 ( - VAR_34 , VAR_35 ) ; const TYPE_13 VAR_36 = METHOD_11 ( VAR_37 , VAR_38 ) ; const TYPE_14 VAR_39 = METHOD_12 ( VAR_40 , VAR_41 ) ; const TYPE_15 VAR_42 = METHOD_13 ( - VAR_43 , VAR_44 ) ; const TYPE_16 VAR_45 = METHOD_14 ( - VAR_46 , VAR_47 ) ; const TYPE_17 VAR_48 = METHOD_15 ( VAR_49 , VAR_50 ) ; const TYPE_18 VAR_51 = METHOD_16 ( VAR_52 , VAR_53 ) ; const TYPE_19 VAR_54 = METHOD_17 ( - VAR_55 , VAR_56 ) ; const TYPE_20 VAR_57 = METHOD_18 ( VAR_22 , - VAR_23 ) ; const TYPE_21 VAR_60 = METHOD_19 ( VAR_61 ) ; VAR_62 [ 0 ] = METHOD_20 ( VAR_63 [ 0 ] , VAR_64 [ 15 ] ) ; VAR_65 [ 1 ] = METHOD_21 ( VAR_66 [ 1 ] , VAR_67 [ 14 ] ) ; VAR_68 [ 2 ] = METHOD_22 ( VAR_69 [ 2 ] , VAR_553 ) ; VAR_829 [ 4 ] = METHOD_235 ( VAR_804 [ 2 ] , VAR_830 ) ; VAR_829 [ 5 ] = METHOD_235 ( VAR_804 [ 3 ] , VAR_830 ) ; VAR_829 [ 6 ] = METHOD_235 ( VAR_804 [ 0 ] , VAR_553 ) ; VAR_829 [ 7 ] = METHOD_235 ( VAR_804 [ 1 ] , VAR_553 ) ; VAR_554 [ 0 ] = METHOD_184 ( VAR_555 [ 0 ] , VAR_556 ) ; VAR_557 [ 1 ] = METHOD_185 ( VAR_558 [ 1 ] , VAR_559 ) ; VAR_560 [ 2 ] = METHOD_211 ( VAR_636 [ 3 ] , VAR_637 [ 2 ] ) ; VAR_661 [ 3 ] = METHOD_186 ( VAR_561 [ 2 ] , VAR_562 ) ; VAR_563 [ 3 ] = METHOD_187 ( VAR_564 [ 3 ] , VAR_565 ) ; VAR_566 [ 4 ] = METHOD_188 ( VAR_567 [ 4 ] , VAR_568 ) ; VAR_569 [ 5 ] = METHOD_189 ( VAR_570 [ 5 ] , VAR_571 ) ; VAR_572 [ 6 ] = METHOD_190 ( VAR_573 [ 6 ] , VAR_574 ) ; VAR_575 [ 7 ] = METHOD_191 ( VAR_576 [ 7 ] , VAR_577 ) ; VAR_578 [ 0 ] = METHOD_192 ( VAR_579 [ 0 ] , VAR_580 ) ; VAR_581 [ 1 ] = METHOD_193 ( VAR_582 [ 1 ] , VAR_583 ) ; VAR_584 [ 2 ] = METHOD_194 ( VAR_585 [ 2 ] , VAR_586 ) ; VAR_587 [ 3 ] = METHOD_195 ( VAR_588 [ 3 ] , VAR_589 ) ; VAR_590 [ 4 ] = METHOD_196 ( VAR_591 [ 4 ] , VAR_592 ) ; VAR_593 [ 5 ] = METHOD_197 ( VAR_594 [ 5 ] , VAR_595 ) ; VAR_596 [ 6 ] = METHOD_198 ( VAR_597 [ 6 ] , VAR_598 ) ; VAR_599 [ 7 ] = METHOD_199 ( VAR_600 [ 7 ] , VAR_601 ) ; VAR_602 [ 1 ] = METHOD_200 ( VAR_603 [ 0 ] , VAR_604 [ 1 ] ) ; VAR_605 [ 2 ] = METHOD_201 ( VAR_606 [ 2 ] , VAR_607 [ 3 ] ) ; VAR_608 [ 5 ] = METHOD_202 ( VAR_609 [ 4 ] , VAR_610 [ 5 ] ) ; VAR_611 [ 6 ] = METHOD_203 ( VAR_612 [ 6 ] , VAR_613 [ 7 ] ) ; VAR_614 [ 0 ] = METHOD_204 ( VAR_615 [ 0 ] , VAR_616 [ 1 ] ) ; VAR_617 [ 1 ] = METHOD_205 ( VAR_618 [ 0 ] , VAR_619 [ 1 ] ) ; VAR_620 [ 2 ] = METHOD_206 ( VAR_621 [ 3 ] , VAR_622 [ 2 ] ) ; VAR_623 [ 3 ] = METHOD_207 ( VAR_624 [ 3 ] , VAR_625 [ 2 ] ) ; VAR_626 [ 4 ] = METHOD_208 ( VAR_627 [ 4 ] , VAR_628 [ 5 ] ) ; VAR_629 [ 5 ] = METHOD_209 ( VAR_630 [ 4 ] , VAR_631 [ 5 ] ) ; VAR_632 [ 6 ] = METHOD_210 ( VAR_633 [ 7 ] , VAR_634 [ 6 ] ) ; VAR_635 [ 7 ] = METHOD_211 ( VAR_636 [ 7 ] , VAR_637 [ 6 ] ) ; VAR_638 [ 0 ] = METHOD_212 ( VAR_639 [ 0 ] , VAR_640 [ 7 ] ) ; VAR_641 [ 1 ] = METHOD_213 ( VAR_642 [ 0 ] , VAR_643 [ 7 ] ) ; VAR_644 [ 2 ] = METHOD_214 ( VAR_645 [ 1 ] , VAR_646 [ 6 ] ) ; VAR_647 [ 3 ] = METHOD_215 ( VAR_648 [ 1 ] , VAR_649 [ 6 ] ) ; VAR_650 [ 4 ] = METHOD_216 ( VAR_651 [ 2 ] , VAR_652 [ 5 ] ) ; VAR_653 [ 5 ] = METHOD_217 ( VAR_654 [ 2 ] , VAR_655 [ 5 ] ) ; VAR_656 [ 6 ] = METHOD_218 ( VAR_657 [ 3 ] , VAR_658 [ 4 ] ) ; VAR_659 [ 7 ] = METHOD_219 ( VAR_660 [ 3 ] , VAR_661 [ 4 ] ) ; VAR_662 [ 0 ] = METHOD_220 ( VAR_663 [ 0 ] , VAR_664 ) ; VAR_665 [ 1 ] = METHOD_221 ( VAR_666 [ 1 ] , VAR_667 ) ; VAR_668 [ 2 ] = METHOD_222 ( VAR_669 [ 2 ] , VAR_670 ) ; VAR_671 [ 3 ] = METHOD_223 ( VAR_672 [ 3 ] , VAR_673 ) ; VAR_674 [ 4 ] = METHOD_224 ( VAR_675 [ 4 ] , VAR_676 ) ; VAR_677 [ 5 ] = METHOD_225 ( VAR_678 [ 5 ] , VAR_679 ) ; VAR_680 [ 6 ] = METHOD_226 ( VAR_681 [ 6 ] , VAR_682 ) ; VAR_683 [ 7 ] = METHOD_227 ( VAR_684 [ 7 ] , VAR_685 ) ; VAR_686 [ 8 ] = METHOD_228 ( VAR_687 [ 6 ] , VAR_688 ) ; VAR_689 [ 9 ] = METHOD_229 ( VAR_690 [ 7 ] , VAR_691 ) ; VAR_692 [ 10 ] = METHOD_230 ( VAR_693 [ 4 ] , VAR_694 ) ; VAR_695 [ 11 ] = METHOD_231 ( VAR_696 [ 5 ] , VAR_697 ) ; VAR_698 [ 12 ] = METHOD_232 ( VAR_699 [ 2 ] , VAR_700 ) ; VAR_701 [ 13 ] = METHOD_233 ( VAR_702 [ 3 ] , VAR_703 ) ; VAR_704 [ 14 ] = METHOD_234 ( VAR_705 [ 0 ] , VAR_706 ) ; VAR_707 [ 15 ] = METHOD_235 ( VAR_708 [ 1 ] , VAR_709 ) ; VAR_710 [ 0 ] = METHOD_236 ( VAR_711 [ 0 ] , VAR_712 ) ; VAR_713 [ 1 ] = METHOD_237 ( VAR_714 [ 1 ] , VAR_715 ) ; VAR_716 [ 2 ] = METHOD_238 ( VAR_717 [ 2 ] , VAR_718 ) ; VAR_719 [ 3 ] = METHOD_239 ( VAR_720 [ 3 ] , VAR_721 ) ; VAR_722 [ 4 ] = METHOD_240 ( VAR_723 [ 4 ] , VAR_724 ) ; VAR_725 [ 5 ] = METHOD_241 ( VAR_726 [ 5 ] , VAR_727 ) ; VAR_728 [ 6 ] = METHOD_242 ( VAR_729 [ 6 ] , VAR_730 ) ; VAR_731 [ 7 ] = METHOD_243 ( VAR_732 [ 7 ] , VAR_733 ) ; VAR_734 [ 8 ] = METHOD_244 ( VAR_735 [ 8 ] , VAR_736 ) ; VAR_737 [ 9 ] = METHOD_245 ( VAR_738 [ 9 ] , VAR_739 ) ; VAR_740 [ 10 ] = METHOD_246 ( VAR_741 [ 10 ] , VAR_742 ) ; VAR_743 [ 11 ] = METHOD_247 ( VAR_744 [ 11 ] , VAR_745 ) ; VAR_746 [ 12 ] = METHOD_248 ( VAR_747 [ 12 ] , VAR_748 ) ; VAR_749 [ 13 ] = METHOD_249 ( VAR_750 [ 13 ] , VAR_751 ) ; VAR_752 [ 14 ] = METHOD_250 ( VAR_753 [ 14 ] , VAR_754 ) ; VAR_755 [ 15 ] = METHOD_251 ( VAR_756 [ 15 ] , VAR_757 ) ; VAR_758 [ 0 ] = METHOD_252 ( VAR_759 [ 0 ] , VAR_760 ) ; VAR_761 [ 1 ] = METHOD_253 ( VAR_762 [ 1 ] , VAR_763 ) ; VAR_764 [ 2 ] = METHOD_254 ( VAR_765 [ 2 ] , VAR_766 ) ; VAR_767 [ 3 ] = METHOD_255 ( VAR_768 [ 3 ] , VAR_769 ) ; VAR_770 [ 4 ] = METHOD_256 ( VAR_771 [ 4 ] , VAR_772 ) ; VAR_773 [ 5 ] = METHOD_257 ( VAR_774 [ 5 ] , VAR_775 ) ; VAR_776 [ 6 ] = METHOD_258 ( VAR_777 [ 6 ] , VAR_778 ) ; VAR_779 [ 7 ] = METHOD_259 ( VAR_780 [ 7 ] , VAR_781 ) ; VAR_782 [ 8 ] = METHOD_260 ( VAR_783 [ 8 ] , VAR_784 ) ; VAR_785 [ 9 ] = METHOD_261 ( VAR_786 [ 9 ] , VAR_787 ) ; VAR_788 [ 10 ] = METHOD_262 ( VAR_789 [ 10 ] , VAR_790 ) ; VAR_791 [ 11 ] = METHOD_263 ( VAR_792 [ 11 ] , VAR_793 ) ; VAR_794 [ 12 ] = METHOD_264 ( VAR_795 [ 12 ] , VAR_796 ) ; VAR_797 [ 13 ] = METHOD_265 ( VAR_798 [ 13 ] , VAR_799 ) ; VAR_800 [ 14 ] = METHOD_266 ( VAR_801 [ 14 ] , VAR_802 ) ; VAR_803 [ 15 ] = METHOD_267 ( VAR_804 [ 15 ] , VAR_805 ) ; VAR_806 [ 1 ] = METHOD_268 ( VAR_807 [ 0 ] , VAR_808 [ 1 ] ) ; VAR_809 [ 9 ] = METHOD_269 ( VAR_810 [ 2 ] , VAR_811 [ 3 ] ) ; VAR_812 [ 5 ] = METHOD_270 ( VAR_813 [ 4 ] , VAR_814 [ 5 ] ) ; VAR_815 [ 13 ] = METHOD_271 ( VAR_816 [ 6 ] , VAR_817 [ 7 ] ) ; VAR_818 [ 3 ] = METHOD_272 ( VAR_819 [ 8 ] , VAR_820 [ 9 ] ) ; VAR_821 [ 11 ] = METHOD_273 ( VAR_822 [ 10 ] , VAR_823 [ 11 ] ) ; VAR_824 [ 7 ] = METHOD_274 ( VAR_825 [ 12 ] , VAR_826 [ 13 ] ) ; VAR_827 [ 15 ] = METHOD_275 ( VAR_828 [ 14 ] , VAR_829 [ 15 ] ) ; }",28
29,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_7 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_9 VAR_17 = VAR_18 , VAR_19 ; TYPE_10 VAR_20 ; VAR_21 : VAR_22 = METHOD_1 ( VAR_23 ) ; VAR_24 = METHOD_2 ( VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; METHOD_4 ( VAR_28 ) ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = VAR_36 & 0x10 ; if ( VAR_37 != VAR_38 ) { METHOD_8 ( VAR_39 , VAR_40 , ""invalidsyncword\\n"" ) ; return METHOD_9 ( VAR_41 ) ; } if ( VAR_42 != VAR_43 && VAR_44 != VAR_45 ) { METHOD_10 ( VAR_46 , VAR_47 , ""invalidstreamid\\n"" ) ; return METHOD_11 ( VAR_48 ) ; } if ( VAR_49 != 0x55 ) { METHOD_12 ( VAR_50 , VAR_51 , ""expectedreservedbytetobe0x55\\n"" ) ; } if ( VAR_52 > VAR_53 ) { METHOD_13 ( VAR_54 , VAR_55 , ""invalidpayloadlength%u\\n"" , VAR_56 ) ; return METHOD_14 ( VAR_57 ) ; } if ( VAR_58 == VAR_59 && VAR_60 ) { VAR_61 = METHOD_15 ( VAR_62 ) ; VAR_63 -= 4 ; } else if ( VAR_64 == VAR_65 ) { if ( ! VAR_66 -> VAR_67 ) { TYPE_11 VAR_68 , VAR_69 , VAR_70 , VAR_71 ; unsigned TYPE_12 VAR_72 [ 256 ] ; VAR_73 = METHOD_16 ( VAR_74 ) ; METHOD_17 ( VAR_75 ) ; VAR_76 = METHOD_18 ( VAR_77 ) ; VAR_78 = METHOD_19 ( VAR_79 ) ; VAR_80 = METHOD_20 ( VAR_81 ) ;  if ( VAR_82 != 1 || VAR_83 == 0 ) {  METHOD_21 ( VAR_84 , VAR_85 , ""expectednonemptysignaledPESpacket,"" ""tryingtorecover\\n"" ) ; METHOD_22 ( VAR_86 , VAR_87 - 9 ) ; if ( ! VAR_88 ) return METHOD_23 ( VAR_89 ) ; goto VAR_90 ; } VAR_91 = METHOD_24 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 != VAR_96 ) return VAR_97 < 0 ? VAR_98 : VAR_99 ; VAR_100 -= 9 + VAR_101 ; VAR_102 -= 3 + VAR_103 ; VAR_104 -> VAR_105 = VAR_106 ; if ( VAR_107 & 0x80 && ( VAR_108 [ 0 ] & 0xf0 ) == 0x20 ) { if ( VAR_109 < 5 ) { METHOD_25 ( VAR_110 , VAR_111 , ""headertooshort\\n"" ) ; METHOD_26 ( VAR_112 , VAR_113 ) ; return VAR_114 ; } VAR_115 = METHOD_27 ( VAR_116 ) ; } } VAR_117 -> VAR_118 -= VAR_119 ; if ( VAR_120 -> VAR_121 < 0 ) { METHOD_28 ( VAR_122 , VAR_123 , ""audiodatacorruption\\n"" ) ; VAR_124 -> VAR_125 = 0 ; } } if ( VAR_126 != VAR_127 ) METHOD_29 ( VAR_128 -> VAR_129 [ VAR_130 - 1 ] , VAR_131 , VAR_132 , 0 , 0 , VAR_133 ) ; * VAR_134 = VAR_135 ; * VAR_136 = VAR_137 ; * VAR_138 = VAR_139 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_7 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_9 VAR_17 = VAR_18 , VAR_19 ; TYPE_10 VAR_20 ; VAR_21 : VAR_22 = METHOD_1 ( VAR_23 ) ; VAR_24 = METHOD_2 ( VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; METHOD_4 ( VAR_28 ) ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = VAR_36 & 0x10 ; if ( METHOD_30 ( VAR_112 ) ) { return VAR_140 ; } if ( VAR_37 != VAR_38 ) { METHOD_8 ( VAR_39 , VAR_40 , ""invalidsyncword\\n"" ) ; return METHOD_9 ( VAR_41 ) ; } if ( VAR_42 != VAR_43 && VAR_44 != VAR_45 ) { METHOD_10 ( VAR_46 , VAR_47 , ""invalidstreamid\\n"" ) ; return METHOD_11 ( VAR_48 ) ; } if ( VAR_49 != 0x55 ) { METHOD_12 ( VAR_50 , VAR_51 , ""expectedreservedbytetobe0x55\\n"" ) ; } if ( VAR_52 > VAR_53 ) { METHOD_13 ( VAR_54 , VAR_55 , ""invalidpayloadlength%u\\n"" , VAR_56 ) ; return METHOD_14 ( VAR_57 ) ; } if ( VAR_58 == VAR_59 && VAR_60 ) { VAR_61 = METHOD_15 ( VAR_62 ) ; VAR_63 -= 4 ; } else if ( VAR_64 == VAR_65 ) { if ( ! VAR_66 -> VAR_67 ) { TYPE_11 VAR_68 , VAR_69 , VAR_70 , VAR_71 ; unsigned TYPE_12 VAR_72 [ 256 ] ; VAR_73 = METHOD_16 ( VAR_74 ) ; METHOD_17 ( VAR_75 ) ; VAR_76 = METHOD_18 ( VAR_77 ) ; VAR_78 = METHOD_19 ( VAR_79 ) ; VAR_80 = METHOD_20 ( VAR_81 ) ; if ( VAR_82 != 1 || VAR_83 == 0 ) { METHOD_21 ( VAR_84 , VAR_85 , ""expectednonemptysignaledPESpacket,"" ""tryingtorecover\\n"" ) ; METHOD_22 ( VAR_86 , VAR_87 - 9 ) ; if ( ! VAR_88 ) return METHOD_23 ( VAR_89 ) ; goto VAR_90 ; } VAR_91 = METHOD_24 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 != VAR_96 ) return VAR_97 < 0 ? VAR_98 : VAR_99 ; VAR_100 -= 9 + VAR_101 ; VAR_102 -= 3 + VAR_103 ; VAR_104 -> VAR_105 = VAR_106 ; if ( VAR_107 & 0x80 && ( VAR_108 [ 0 ] & 0xf0 ) == 0x20 ) { if ( VAR_109 < 5 ) { METHOD_25 ( VAR_110 , VAR_111 , ""headertooshort\\n"" ) ; METHOD_26 ( VAR_112 , VAR_113 ) ; return VAR_114 ; } VAR_115 = METHOD_27 ( VAR_116 ) ; } } VAR_117 -> VAR_118 -= VAR_119 ; if ( VAR_120 -> VAR_121 < 0 ) { METHOD_28 ( VAR_122 , VAR_123 , ""audiodatacorruption\\n"" ) ; VAR_124 -> VAR_125 = 0 ; } } if ( VAR_126 != VAR_127 ) METHOD_29 ( VAR_128 -> VAR_129 [ VAR_130 - 1 ] , VAR_131 , VAR_132 , 0 , 0 , VAR_133 ) ; * VAR_134 = VAR_135 ; * VAR_136 = VAR_137 ; * VAR_138 = VAR_139 ; return 0 ; }",29
30,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 , struct STRUCT_OR_UNION_5 * VAR_4 , TYPE_0 * VAR_5 ) { struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 ; const struct STRUCT_OR_UNION_8 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_9 * VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 ; struct STRUCT_OR_UNION_11 * VAR_13 ; struct STRUCT_OR_UNION_12 * VAR_14 ; if ( VAR_15 -> VAR_16 == METHOD_3 ( VAR_17 ) ) { VAR_18 = METHOD_4 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) return VAR_27 ; VAR_28 = ( struct STRUCT_OR_UNION_13 * ) VAR_29 ; VAR_30 = METHOD_5 ( VAR_31 ) ; VAR_32 -> VAR_33 = & VAR_34 -> VAR_35 ; VAR_36 = METHOD_6 ( VAR_37 ) ; METHOD_7 ( VAR_38 , VAR_39 , sizeof ( struct STRUCT_OR_UNION_14 ) ) ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 ; METHOD_8 ( VAR_44 ) -> VAR_45 = & VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> VAR_54 = VAR_55 ;  VAR_56 -> VAR_57 = METHOD_9 ( VAR_58 ) ;  VAR_59 -> VAR_60 = METHOD_10 ( VAR_61 ) -> VAR_62 ; METHOD_11 ( VAR_63 , METHOD_12 ( VAR_64 ) -> VAR_65 ) ; return VAR_66 ; } if ( METHOD_13 ( VAR_67 ) ) goto VAR_68 ; if ( ! VAR_69 ) { struct STRUCT_OR_UNION_15 VAR_70 ; VAR_71 = METHOD_14 ( VAR_72 , & VAR_73 , VAR_74 , VAR_75 ) ; if ( ! VAR_76 ) goto VAR_77 ; } VAR_78 = METHOD_15 ( VAR_79 , VAR_80 , VAR_81 ) ; if ( VAR_82 == VAR_83 ) goto VAR_84 ; METHOD_16 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 ) ; VAR_89 -> VAR_90 = VAR_91 -> VAR_92 -> VAR_93 & ~ ( VAR_94 | VAR_95 ) ; VAR_96 = ( struct STRUCT_OR_UNION_16 * ) VAR_97 ; VAR_98 = METHOD_17 ( VAR_99 ) ; VAR_100 -> VAR_101 = & VAR_102 -> VAR_103 ; VAR_104 = METHOD_18 ( VAR_105 ) ; METHOD_19 ( VAR_106 , VAR_107 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; VAR_108 -> VAR_109 = VAR_110 -> VAR_111 ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 ; VAR_116 -> VAR_117 = VAR_118 -> VAR_119 ; VAR_120 -> VAR_121 = VAR_122 -> VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 -> VAR_131 . VAR_132 ;  VAR_133 -> VAR_134 = VAR_135 ;  VAR_136 -> VAR_137 = VAR_138 ; VAR_139 -> VAR_140 = METHOD_20 ( VAR_141 ) ; VAR_142 -> VAR_143 = METHOD_21 ( VAR_144 ) -> VAR_145 ; VAR_146 = VAR_147 -> VAR_148 ; if ( ! VAR_149 ) VAR_150 = METHOD_22 ( VAR_151 -> VAR_152 ) ; if ( VAR_153 ) { VAR_154 = METHOD_23 ( VAR_155 , VAR_156 ) ; METHOD_24 ( VAR_157 -> VAR_158 , VAR_159 ) ; } METHOD_25 ( VAR_160 ) -> VAR_161 = 0 ; if ( VAR_162 ) METHOD_26 ( VAR_163 ) -> VAR_164 = VAR_165 -> VAR_166 + VAR_167 -> VAR_168 ; METHOD_27 ( VAR_169 , METHOD_28 ( VAR_170 ) ) ; VAR_171 -> VAR_172 = VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; if ( METHOD_29 ( VAR_179 , VAR_180 ) < 0 ) { METHOD_30 ( VAR_181 ) ; METHOD_31 ( VAR_182 ) ; goto VAR_183 ; } * VAR_184 = METHOD_32 ( VAR_185 , METHOD_33 ( VAR_186 ) ) ; if ( * VAR_187 && VAR_188 -> VAR_189 ) { VAR_190 -> VAR_191 = METHOD_34 ( VAR_192 -> VAR_193 , VAR_194 ) ; METHOD_35 ( VAR_195 -> VAR_196 ) ; VAR_197 -> VAR_198 = VAR_199 ; if ( VAR_200 -> VAR_201 ) METHOD_36 ( VAR_202 -> VAR_203 , VAR_204 ) ; } return VAR_205 ; VAR_206 : METHOD_37 ( METHOD_38 ( VAR_207 ) , VAR_208 ) ; VAR_209 : METHOD_39 ( VAR_210 ) ; VAR_211 : METHOD_40 ( METHOD_41 ( VAR_212 ) , VAR_213 ) ; return VAR_214 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 , struct STRUCT_OR_UNION_5 * VAR_4 , TYPE_0 * VAR_5 ) { struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 ; const struct STRUCT_OR_UNION_8 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_9 * VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 ; struct STRUCT_OR_UNION_11 * VAR_13 ; struct STRUCT_OR_UNION_12 * VAR_14 ; if ( VAR_15 -> VAR_16 == METHOD_3 ( VAR_17 ) ) { VAR_18 = METHOD_4 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) return VAR_27 ; VAR_28 = ( struct STRUCT_OR_UNION_13 * ) VAR_29 ; VAR_30 = METHOD_5 ( VAR_31 ) ; VAR_32 -> VAR_33 = & VAR_34 -> VAR_35 ; VAR_36 = METHOD_6 ( VAR_37 ) ; METHOD_7 ( VAR_38 , VAR_39 , sizeof ( struct STRUCT_OR_UNION_14 ) ) ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 ; METHOD_8 ( VAR_44 ) -> VAR_45 = & VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> VAR_54 = VAR_55 ; VAR_56 -> VAR_57 = METHOD_9 ( VAR_58 ) ; VAR_59 -> VAR_60 = METHOD_10 ( VAR_61 ) -> VAR_62 ; METHOD_11 ( VAR_63 , METHOD_12 ( VAR_64 ) -> VAR_65 ) ; return VAR_66 ; } if ( METHOD_13 ( VAR_67 ) ) goto VAR_68 ; if ( ! VAR_69 ) { struct STRUCT_OR_UNION_15 VAR_70 ; VAR_71 = METHOD_14 ( VAR_72 , & VAR_73 , VAR_74 , VAR_75 ) ; if ( ! VAR_76 ) goto VAR_77 ; } VAR_78 = METHOD_15 ( VAR_79 , VAR_80 , VAR_81 ) ; if ( VAR_82 == VAR_83 ) goto VAR_84 ; METHOD_16 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 ) ; VAR_89 -> VAR_90 = VAR_91 -> VAR_92 -> VAR_93 & ~ ( VAR_94 | VAR_95 ) ; VAR_96 = ( struct STRUCT_OR_UNION_16 * ) VAR_97 ; VAR_98 = METHOD_17 ( VAR_99 ) ; VAR_100 -> VAR_101 = & VAR_102 -> VAR_103 ; VAR_104 = METHOD_18 ( VAR_105 ) ; METHOD_19 ( VAR_106 , VAR_107 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; VAR_108 -> VAR_109 = VAR_110 -> VAR_111 ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 ; VAR_116 -> VAR_117 = VAR_118 -> VAR_119 ; VAR_120 -> VAR_121 = VAR_122 -> VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 -> VAR_131 . VAR_132 ; VAR_133 -> VAR_134 = VAR_135 ; VAR_136 -> VAR_137 = VAR_138 ; VAR_139 -> VAR_140 = METHOD_20 ( VAR_141 ) ; VAR_142 -> VAR_143 = METHOD_21 ( VAR_144 ) -> VAR_145 ; VAR_146 = VAR_147 -> VAR_148 ; if ( ! VAR_149 ) VAR_150 = METHOD_22 ( VAR_151 -> VAR_152 ) ; if ( VAR_153 ) { VAR_154 = METHOD_23 ( VAR_155 , VAR_156 ) ; METHOD_24 ( VAR_157 -> VAR_158 , VAR_159 ) ; } METHOD_25 ( VAR_160 ) -> VAR_161 = 0 ; if ( VAR_162 ) METHOD_26 ( VAR_163 ) -> VAR_164 = VAR_165 -> VAR_166 + VAR_167 -> VAR_168 ; METHOD_27 ( VAR_169 , METHOD_28 ( VAR_170 ) ) ; VAR_171 -> VAR_172 = VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; if ( METHOD_29 ( VAR_179 , VAR_180 ) < 0 ) { METHOD_30 ( VAR_181 ) ; METHOD_31 ( VAR_182 ) ; goto VAR_183 ; } * VAR_184 = METHOD_32 ( VAR_185 , METHOD_33 ( VAR_186 ) ) ; if ( * VAR_187 && VAR_188 -> VAR_189 ) { VAR_190 -> VAR_191 = METHOD_34 ( VAR_192 -> VAR_193 , VAR_194 ) ; METHOD_35 ( VAR_195 -> VAR_196 ) ; VAR_197 -> VAR_198 = VAR_199 ; if ( VAR_200 -> VAR_201 ) METHOD_36 ( VAR_202 -> VAR_203 , VAR_204 ) ; } return VAR_205 ; VAR_206 : METHOD_37 ( METHOD_38 ( VAR_207 ) , VAR_208 ) ; VAR_209 : METHOD_39 ( VAR_210 ) ; VAR_211 : METHOD_40 ( METHOD_41 ( VAR_212 ) , VAR_213 ) ; return VAR_214 ; }",30
31,"static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  VAR_3 = METHOD_1 ( ( * VAR_4 ) + 2 , VAR_5 ) ; ( * VAR_6 ) += 2 ; if ( VAR_7 -> VAR_8 == VAR_9 ) { METHOD_2 ( * VAR_10 , VAR_11 ) ; } else { METHOD_3 ( VAR_12 , ""Erroneousdataformatforunserializing\'%s\'"" , VAR_13 -> VAR_14 ) ;  return 0 ;  } return VAR_15 ; }","static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; VAR_3 = METHOD_1 ( ( * VAR_4 ) + 2 , VAR_5 ) ; ( * VAR_6 ) += 2 ; if ( VAR_7 -> VAR_8 == VAR_9 ) { METHOD_2 ( * VAR_10 , VAR_11 ) ; } else { METHOD_3 ( VAR_12 , ""Erroneousdataformatforunserializing\'%s\'"" , VAR_13 -> VAR_14 ) ; return - 1 ; } return VAR_15 ; }",31
32,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 ; ++ VAR_3 -> VAR_4 . VAR_5 ; METHOD_1 ( VAR_6 ) ;  if ( ! METHOD_2 ( VAR_7 ) ) {  VAR_8 -> VAR_9 -> VAR_10 = VAR_11 ; VAR_12 -> VAR_13 -> VAR_14 . VAR_15 = VAR_16 ; VAR_17 -> VAR_18 -> VAR_19 . VAR_20 = 0 ; VAR_21 = VAR_22 ; } METHOD_3 ( VAR_23 , VAR_24 ) ; return VAR_25 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 ; ++ VAR_3 -> VAR_4 . VAR_5 ; METHOD_1 ( VAR_6 ) ; if ( ! METHOD_2 ( VAR_7 ) ) { VAR_8 -> VAR_9 -> VAR_10 = VAR_11 ; VAR_12 -> VAR_13 -> VAR_14 . VAR_15 = VAR_16 ; VAR_17 -> VAR_18 -> VAR_19 . VAR_20 = 0 ; VAR_21 = VAR_22 ; } METHOD_3 ( VAR_23 , VAR_24 ) ; return VAR_25 ; }",32
33,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const struct STRUCT_OR_UNION_2 * VAR_0 , const struct STRUCT_OR_UNION_3 * VAR_1 , const TYPE_1 VAR_2 , TYPE_2 * VAR_3 , TYPE_3 * VAR_4 ) { struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; VAR_8 * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 , * VAR_12 = VAR_13 ; TYPE_4 VAR_14 = 0 ; struct STRUCT_OR_UNION_8 * VAR_15 ; struct STRUCT_OR_UNION_9 * VAR_16 ; if ( VAR_17 == METHOD_1 ( STRUCT_OR_UNION_10 -> VAR_18 . VAR_19 ) -> VAR_20 ) { METHOD_2 ( STRUCT_OR_UNION_11 , VAR_21 ) ; return METHOD_3 ( STRUCT_OR_UNION_12 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; } if ( ! METHOD_4 ( VAR_27 , sizeof ( TYPE_5 ) ) ) return METHOD_5 ( STRUCT_OR_UNION_13 , VAR_28 , VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 . VAR_36 ; if ( ! METHOD_6 ( VAR_37 , VAR_38 ) || ( METHOD_7 ( VAR_39 , VAR_40 ) && METHOD_8 ( VAR_41 ) ) ) return METHOD_9 ( STRUCT_OR_UNION_14 , VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ) ; VAR_47 -> VAR_48 . VAR_49 = ( struct STRUCT_OR_UNION_15 * ) VAR_50 -> VAR_51 -> VAR_52 ; if ( ! METHOD_10 ( VAR_53 -> VAR_54 , METHOD_11 ( VAR_55 -> VAR_56 -> VAR_57 ) - sizeof ( TYPE_6 ) ) ) goto VAR_58 ; VAR_59 = METHOD_12 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 , & VAR_64 , & VAR_65 ) ; if ( ! VAR_66 ) { switch ( VAR_67 ) { case - VAR_68 : goto VAR_69 ; case - VAR_70 : METHOD_13 ( STRUCT_OR_UNION_16 , VAR_71 , VAR_72 , VAR_73 , VAR_74 , VAR_75 ) ; return METHOD_14 ( STRUCT_OR_UNION_17 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , VAR_80 ) ; case - VAR_81 : default : return METHOD_15 ( STRUCT_OR_UNION_18 , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 ) ; } } VAR_87 = & VAR_88 -> VAR_89 . VAR_90 -> VAR_91 . VAR_92 [ 0 ] ; if ( ! METHOD_16 ( VAR_93 , VAR_94 , & VAR_95 -> VAR_96 . VAR_97 -> VAR_98 . VAR_99 , VAR_100 , VAR_101 ) ) goto VAR_102 ; VAR_103 = METHOD_17 ( VAR_104 , VAR_105 ) ; if ( VAR_106 ) goto VAR_107 ; if ( VAR_108 -> VAR_109 ) { struct STRUCT_OR_UNION_19 VAR_110 ; TYPE_7 VAR_111 ;  VAR_112 . VAR_113 = VAR_114 -> VAR_115 ;  VAR_116 . VAR_117 = VAR_118 -> VAR_119 ; VAR_120 . VAR_121 = VAR_122 -> VAR_123 ; VAR_124 . VAR_125 = ( TYPE_8 * ) METHOD_18 ( VAR_126 -> VAR_127 , sizeof ( TYPE_9 ) ) ; METHOD_19 ( VAR_128 -> VAR_129 , sizeof ( TYPE_10 ) ) ; VAR_130 . VAR_131 = VAR_132 -> VAR_133 ; VAR_134 = METHOD_20 ( STRUCT_OR_UNION_20 , VAR_135 , VAR_136 , VAR_137 , & VAR_138 ) ; METHOD_21 ( VAR_139 -> VAR_140 ) ; if ( VAR_141 != VAR_142 ) { METHOD_22 ( VAR_143 ) ; return METHOD_23 ( STRUCT_OR_UNION_21 , VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ; } } VAR_149 = METHOD_24 ( VAR_150 , VAR_151 ) ; if ( ! VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_25 ( VAR_155 , 0 , VAR_156 , 0 , VAR_157 -> VAR_158 . VAR_159 , VAR_160 -> VAR_161 . VAR_162 , VAR_163 , VAR_164 ) ; if ( ! VAR_165 ) goto VAR_166 ; if ( VAR_167 -> VAR_168 . VAR_169 ) { VAR_170 = METHOD_26 ( VAR_171 , VAR_172 ) ; if ( ! VAR_173 ) goto VAR_174 ; } METHOD_27 ( VAR_175 , VAR_176 , METHOD_28 ( VAR_177 ) ) ; METHOD_29 ( VAR_178 , VAR_179 , METHOD_30 ( VAR_180 ) ) ; METHOD_31 ( STRUCT_OR_UNION_22 , VAR_181 ) ; METHOD_32 ( STRUCT_OR_UNION_23 , VAR_182 ) ; METHOD_33 ( VAR_183 , VAR_184 , METHOD_34 ( ) ) ; if ( VAR_185 -> VAR_186 [ VAR_187 ] ) METHOD_35 ( VAR_188 , VAR_189 , METHOD_36 ( VAR_190 ) ) ; METHOD_37 ( VAR_191 , VAR_192 , METHOD_38 ( VAR_193 ) ) ; METHOD_39 ( VAR_194 , VAR_195 , METHOD_40 ( VAR_196 ) ) ; if ( VAR_197 ) METHOD_41 ( VAR_198 , VAR_199 , METHOD_42 ( VAR_200 ) ) ; return VAR_201 ; VAR_202 : METHOD_43 ( VAR_203 ) ; VAR_204 : METHOD_44 ( VAR_205 ) ; VAR_206 : METHOD_45 ( VAR_207 ) ; VAR_208 : return VAR_209 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const struct STRUCT_OR_UNION_2 * VAR_0 , const struct STRUCT_OR_UNION_3 * VAR_1 , const TYPE_1 VAR_2 , TYPE_2 * VAR_3 , TYPE_3 * VAR_4 ) { struct STRUCT_OR_UNION_4 * VAR_5 = VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; VAR_8 * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; struct STRUCT_OR_UNION_7 * VAR_11 , * VAR_12 = VAR_13 ; TYPE_4 VAR_14 = 0 ; struct STRUCT_OR_UNION_8 * VAR_15 ; struct STRUCT_OR_UNION_9 * VAR_16 ; if ( VAR_17 == METHOD_1 ( STRUCT_OR_UNION_10 -> VAR_18 . VAR_19 ) -> VAR_20 ) { METHOD_2 ( STRUCT_OR_UNION_11 , VAR_21 ) ; return METHOD_3 ( STRUCT_OR_UNION_12 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; } if ( ! METHOD_4 ( VAR_27 , sizeof ( TYPE_5 ) ) ) return METHOD_5 ( STRUCT_OR_UNION_13 , VAR_28 , VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 . VAR_36 ; if ( ! METHOD_6 ( VAR_37 , VAR_38 ) || ( METHOD_7 ( VAR_39 , VAR_40 ) && METHOD_8 ( VAR_41 ) ) ) return METHOD_9 ( STRUCT_OR_UNION_14 , VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ) ; VAR_47 -> VAR_48 . VAR_49 = ( struct STRUCT_OR_UNION_15 * ) VAR_50 -> VAR_51 -> VAR_52 ; if ( ! METHOD_10 ( VAR_53 -> VAR_54 , METHOD_11 ( VAR_55 -> VAR_56 -> VAR_57 ) - sizeof ( TYPE_6 ) ) ) goto VAR_58 ; VAR_59 = METHOD_12 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 , & VAR_64 , & VAR_65 ) ; if ( ! VAR_66 ) { switch ( VAR_67 ) { case - VAR_68 : goto VAR_69 ; case - VAR_70 : METHOD_13 ( STRUCT_OR_UNION_16 , VAR_71 , VAR_72 , VAR_73 , VAR_74 , VAR_75 ) ; return METHOD_14 ( STRUCT_OR_UNION_17 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , VAR_80 ) ; case - VAR_81 : default : return METHOD_15 ( STRUCT_OR_UNION_18 , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 ) ; } } VAR_87 = & VAR_88 -> VAR_89 . VAR_90 -> VAR_91 . VAR_92 [ 0 ] ; if ( ! METHOD_16 ( VAR_93 , VAR_94 , & VAR_95 -> VAR_96 . VAR_97 -> VAR_98 . VAR_99 , VAR_100 , VAR_101 ) ) goto VAR_102 ; VAR_103 = METHOD_17 ( VAR_104 , VAR_105 ) ; if ( VAR_106 ) goto VAR_107 ; if ( VAR_108 -> VAR_109 ) { struct STRUCT_OR_UNION_19 VAR_110 ; TYPE_7 VAR_111 ; VAR_112 . VAR_113 = VAR_114 -> VAR_115 ; VAR_116 . VAR_117 = VAR_118 -> VAR_119 ; VAR_120 . VAR_121 = VAR_122 -> VAR_123 ; VAR_124 . VAR_125 = ( TYPE_8 * ) METHOD_18 ( VAR_126 -> VAR_127 , sizeof ( TYPE_9 ) ) ; METHOD_19 ( VAR_128 -> VAR_129 , sizeof ( TYPE_10 ) ) ; VAR_130 . VAR_131 = VAR_132 -> VAR_133 ; VAR_134 = METHOD_20 ( STRUCT_OR_UNION_20 , VAR_135 , VAR_136 , VAR_137 , & VAR_138 ) ; METHOD_21 ( VAR_139 -> VAR_140 ) ; if ( VAR_141 != VAR_142 ) { METHOD_22 ( VAR_143 ) ; return METHOD_23 ( STRUCT_OR_UNION_21 , VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ; } } VAR_149 = METHOD_24 ( VAR_150 , VAR_151 ) ; if ( ! VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_25 ( VAR_155 , 0 , VAR_156 , 0 , VAR_157 -> VAR_158 . VAR_159 , VAR_160 -> VAR_161 . VAR_162 , VAR_163 , VAR_164 ) ; if ( ! VAR_165 ) goto VAR_166 ; if ( VAR_167 -> VAR_168 . VAR_169 ) { VAR_170 = METHOD_26 ( VAR_171 , VAR_172 ) ; if ( ! VAR_173 ) goto VAR_174 ; } METHOD_27 ( VAR_175 , VAR_176 , METHOD_28 ( VAR_177 ) ) ; METHOD_29 ( VAR_178 , VAR_179 , METHOD_30 ( VAR_180 ) ) ; METHOD_31 ( STRUCT_OR_UNION_22 , VAR_181 ) ; METHOD_32 ( STRUCT_OR_UNION_23 , VAR_182 ) ; METHOD_33 ( VAR_183 , VAR_184 , METHOD_34 ( ) ) ; if ( VAR_185 -> VAR_186 [ VAR_187 ] ) METHOD_35 ( VAR_188 , VAR_189 , METHOD_36 ( VAR_190 ) ) ; METHOD_37 ( VAR_191 , VAR_192 , METHOD_38 ( VAR_193 ) ) ; METHOD_39 ( VAR_194 , VAR_195 , METHOD_40 ( VAR_196 ) ) ; if ( VAR_197 ) METHOD_41 ( VAR_198 , VAR_199 , METHOD_42 ( VAR_200 ) ) ; return VAR_201 ; VAR_202 : METHOD_43 ( VAR_203 ) ; VAR_204 : METHOD_44 ( VAR_205 ) ; VAR_206 : METHOD_45 ( VAR_207 ) ; VAR_208 : return VAR_209 ; }",33
34,"TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , unsigned TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; struct STRUCT_OR_UNION_1 * VAR_5 ; const struct STRUCT_OR_UNION_2 * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 * VAR_10 = VAR_11 ; VAR_12 = METHOD_1 ( & VAR_13 ) ; if ( VAR_14 != VAR_15 ) return VAR_16 ; VAR_17 = METHOD_2 ( METHOD_3 ( VAR_18 -> VAR_19 ) , METHOD_4 ( VAR_20 ) , & VAR_21 ) ; if ( VAR_22 != VAR_23 ) return VAR_24 ; if ( ( VAR_25 -> VAR_26 . VAR_27 & VAR_28 ) != 0 ) return VAR_29 ; if ( ( VAR_30 -> VAR_31 . VAR_32 & VAR_33 ) != 0 ) return VAR_34 ; VAR_35 = METHOD_5 ( VAR_36 -> VAR_37 . VAR_38 ) ; if ( ! VAR_39 ) return VAR_40 ; if ( VAR_41 % VAR_42 -> VAR_43 != 0 ) return VAR_44 ; if ( VAR_45 < VAR_46 -> VAR_47 ) return VAR_48 ; if ( VAR_49 > VAR_50 -> VAR_51 ) return VAR_52 ;  VAR_53 = METHOD_6 ( sizeof ( TYPE_7 ) * VAR_54 ) ;  if ( ! VAR_55 ) return VAR_56 ; VAR_57 = METHOD_7 ( METHOD_8 ( VAR_58 -> VAR_59 ) , VAR_60 , VAR_61 , VAR_62 ) ; if ( VAR_63 != VAR_64 ) goto VAR_65 ; VAR_66 = METHOD_9 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; if ( VAR_71 != VAR_72 ) goto VAR_73 ; switch ( VAR_74 -> VAR_75 . VAR_76 ) { case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : case VAR_83 : case VAR_84 : case VAR_85 : case VAR_86 : VAR_87 = VAR_88 / 8 ; if ( VAR_89 -> VAR_90 . VAR_91 == VAR_92 || VAR_93 -> VAR_94 . VAR_95 == VAR_96 ) { VAR_97 = ( VAR_98 + VAR_99 / 7 ) / 8 ; } VAR_100 = ( struct STRUCT_OR_UNION_5 * ) VAR_101 -> VAR_102 ; if ( VAR_103 > VAR_104 -> VAR_105 ) { VAR_106 = VAR_107 ; goto VAR_108 ; } VAR_109 = METHOD_10 ( ( TYPE_8 * ) ( VAR_110 + 1 ) , VAR_111 ) ; if ( VAR_112 != VAR_113 ) goto VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = ( 1 << VAR_120 -> VAR_121 ) - 1 ; break ; case VAR_122 : VAR_123 = METHOD_11 ( VAR_124 , VAR_125 , VAR_126 , VAR_127 , VAR_128 ) ; if ( VAR_129 != VAR_130 ) goto VAR_131 ; break ; case VAR_132 : VAR_133 = METHOD_12 ( VAR_134 , VAR_135 , VAR_136 ) ; if ( VAR_137 != VAR_138 ) goto VAR_139 ; break ; case VAR_140 : VAR_141 = METHOD_13 ( VAR_142 , VAR_143 , VAR_144 , VAR_145 , VAR_146 ) ; if ( VAR_147 != VAR_148 ) goto VAR_149 ; break ; case VAR_150 : case VAR_151 : VAR_152 = METHOD_14 ( VAR_153 , VAR_154 , VAR_155 , VAR_156 , VAR_157 ) ; if ( VAR_158 != VAR_159 ) goto VAR_160 ; break ; default : VAR_161 = VAR_162 ; } VAR_163 : METHOD_15 ( VAR_164 ) ; if ( VAR_165 == VAR_166 ) { VAR_167 -> VAR_168 . VAR_169 = VAR_170 ; VAR_171 -> VAR_172 . VAR_173 |= VAR_174 ; } return VAR_175 ; }","TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , unsigned TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; struct STRUCT_OR_UNION_1 * VAR_5 ; const struct STRUCT_OR_UNION_2 * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 * VAR_10 = VAR_11 ; VAR_12 = METHOD_1 ( & VAR_13 ) ; if ( VAR_14 != VAR_15 ) return VAR_16 ; VAR_17 = METHOD_2 ( METHOD_3 ( VAR_18 -> VAR_19 ) , METHOD_4 ( VAR_20 ) , & VAR_21 ) ; if ( VAR_22 != VAR_23 ) return VAR_24 ; if ( ( VAR_25 -> VAR_26 . VAR_27 & VAR_28 ) != 0 ) return VAR_29 ; if ( ( VAR_30 -> VAR_31 . VAR_32 & VAR_33 ) != 0 ) return VAR_34 ; VAR_35 = METHOD_5 ( VAR_36 -> VAR_37 . VAR_38 ) ; if ( ! VAR_39 ) return VAR_40 ; if ( VAR_41 % VAR_42 -> VAR_43 != 0 ) return VAR_44 ; if ( VAR_45 < VAR_46 -> VAR_47 ) return VAR_48 ; if ( VAR_49 > VAR_50 -> VAR_51 ) return VAR_52 ; TYPE_5 VAR_105 = 0 ; if ( METHOD_16 ( sizeof ( TYPE_7 ) , VAR_157 , & VAR_105 ) ) return VAR_176 ; VAR_53 = METHOD_6 ( VAR_105 ) ; if ( ! VAR_55 ) return VAR_56 ; VAR_57 = METHOD_7 ( METHOD_8 ( VAR_58 -> VAR_59 ) , VAR_60 , VAR_61 , VAR_62 ) ; if ( VAR_63 != VAR_64 ) goto VAR_65 ; VAR_66 = METHOD_9 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; if ( VAR_71 != VAR_72 ) goto VAR_73 ; switch ( VAR_74 -> VAR_75 . VAR_76 ) { case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : case VAR_83 : case VAR_84 : case VAR_85 : case VAR_86 : VAR_87 = VAR_88 / 8 ; if ( VAR_89 -> VAR_90 . VAR_91 == VAR_92 || VAR_93 -> VAR_94 . VAR_95 == VAR_96 ) { VAR_97 = ( VAR_98 + VAR_99 / 7 ) / 8 ; } VAR_100 = ( struct STRUCT_OR_UNION_5 * ) VAR_101 -> VAR_102 ; if ( VAR_103 > VAR_104 -> VAR_105 ) { VAR_106 = VAR_107 ; goto VAR_108 ; } VAR_109 = METHOD_10 ( ( TYPE_8 * ) ( VAR_110 + 1 ) , VAR_111 ) ; if ( VAR_112 != VAR_113 ) goto VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = ( 1 << VAR_120 -> VAR_121 ) - 1 ; break ; case VAR_122 : VAR_123 = METHOD_11 ( VAR_124 , VAR_125 , VAR_126 , VAR_127 , VAR_128 ) ; if ( VAR_129 != VAR_130 ) goto VAR_131 ; break ; case VAR_132 : VAR_133 = METHOD_12 ( VAR_134 , VAR_135 , VAR_136 ) ; if ( VAR_137 != VAR_138 ) goto VAR_139 ; break ; case VAR_140 : VAR_141 = METHOD_13 ( VAR_142 , VAR_143 , VAR_144 , VAR_145 , VAR_146 ) ; if ( VAR_147 != VAR_148 ) goto VAR_149 ; break ; case VAR_150 : case VAR_151 : VAR_152 = METHOD_14 ( VAR_153 , VAR_154 , VAR_155 , VAR_156 , VAR_157 ) ; if ( VAR_158 != VAR_159 ) goto VAR_160 ; break ; default : VAR_161 = VAR_162 ; } VAR_163 : METHOD_15 ( VAR_164 ) ; if ( VAR_165 == VAR_166 ) { VAR_167 -> VAR_168 . VAR_169 = VAR_170 ; VAR_171 -> VAR_172 . VAR_173 |= VAR_174 ; } return VAR_175 ; }",34
35,"TYPE_0 METHOD_0 ( TYPE_1 ) { const TYPE_2 * VAR_0 = ""FuseMuse"" ; TYPE_3 VAR_1 [ 32 ] ; TYPE_4 VAR_2 [ 32 ] ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , 0 , 32 ) ; if ( ! METHOD_2 ( VAR_8 == 0 ) ) { METHOD_3 ( ""Expected:%zu"" , 0 ) ; METHOD_4 ( ""Actual:%zu"" , VAR_9 ) ; } VAR_10 [ 0 ] = '\\0' ;  VAR_11 = METHOD_5 ( VAR_12 , VAR_13 ) ;  if ( ! METHOD_6 ( VAR_14 == - 1 ) ) { METHOD_7 ( ""Expected:%zu"" , - 1 ) ; METHOD_8 ( ""Actual:%zu"" , VAR_15 ) ; } for ( TYPE_7 VAR_16 = 1 ; VAR_17 <= 8 ; ++ VAR_18 ) { VAR_19 = METHOD_9 ( VAR_20 , VAR_21 , VAR_22 , 32 ) ; TYPE_8 VAR_23 = ( ( VAR_24 + 2 ) / 3 ) << 2 ; if ( ! METHOD_10 ( VAR_25 == VAR_26 ) ) { METHOD_11 ( ""Expected:%zu"" , VAR_27 ) ; METHOD_12 ( ""Actual:%zu"" , VAR_28 ) ; }  VAR_29 = METHOD_13 ( VAR_30 , VAR_31 ) ;  if ( ! METHOD_14 ( VAR_32 == VAR_33 ) ) { METHOD_15 ( ""Expected:%zu"" , VAR_34 ) ; METHOD_16 ( ""Actual:%zu"" , VAR_35 ) ; } VAR_36 [ VAR_37 ] = '\\0' ; if ( ! METHOD_17 ( METHOD_18 ( VAR_38 , VAR_39 , VAR_40 ) == 0 ) ) { METHOD_19 ( ""Expected:%s"" , VAR_41 ) ; METHOD_20 ( ""Actual:%s"" , VAR_42 ) ; } } }","TYPE_0 METHOD_0 ( TYPE_1 ) { const TYPE_2 * VAR_0 = ""FuseMuse"" ; TYPE_3 VAR_1 [ 32 ] ; TYPE_4 VAR_2 [ 32 ] ; TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , 0 , 32 ) ; if ( ! METHOD_2 ( VAR_8 == 0 ) ) { METHOD_3 ( ""Expected:%zu"" , 0 ) ; METHOD_4 ( ""Actual:%zu"" , VAR_9 ) ; } VAR_10 [ 0 ] = '\\0' ; VAR_11 = METHOD_5 ( VAR_12 , VAR_13 ) ; if ( ! METHOD_6 ( VAR_14 == - 1 ) ) { METHOD_7 ( ""Expected:%zu"" , - 1 ) ; METHOD_8 ( ""Actual:%zu"" , VAR_15 ) ; } for ( TYPE_7 VAR_16 = 1 ; VAR_17 <= 8 ; ++ VAR_18 ) { VAR_19 = METHOD_9 ( VAR_20 , VAR_21 , VAR_22 , 32 ) ; TYPE_8 VAR_23 = ( ( VAR_24 + 2 ) / 3 ) << 2 ; if ( ! METHOD_10 ( VAR_25 == VAR_26 ) ) { METHOD_11 ( ""Expected:%zu"" , VAR_27 ) ; METHOD_12 ( ""Actual:%zu"" , VAR_28 ) ; } VAR_29 = METHOD_13 ( VAR_30 , VAR_31 ) ; if ( ! METHOD_14 ( VAR_32 == VAR_33 ) ) { METHOD_15 ( ""Expected:%zu"" , VAR_34 ) ; METHOD_16 ( ""Actual:%zu"" , VAR_35 ) ; } VAR_36 [ VAR_37 ] = '\\0' ; if ( ! METHOD_17 ( METHOD_18 ( VAR_38 , VAR_39 , VAR_40 ) == 0 ) ) { METHOD_19 ( ""Expected:%s"" , VAR_41 ) ; METHOD_20 ( ""Actual:%s"" , VAR_42 ) ; } } }",35
36,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 , VAR_5 , 1 , 16383 ) ; METHOD_2 ( VAR_6 , VAR_7 , 1 , 16383 ) ; METHOD_3 ( VAR_8 , VAR_9 . VAR_10 , 1 , 1000000000 ) ;  METHOD_4 ( VAR_11 , VAR_12 . VAR_13 , 1 , VAR_14 -> VAR_15 . VAR_16 ) ;  METHOD_5 ( VAR_17 , VAR_18 , 3 ) ; METHOD_6 ( VAR_19 , VAR_20 , 63 ) ; METHOD_7 ( VAR_21 , VAR_22 , VAR_23 -> VAR_24 ) ; METHOD_8 ( VAR_25 , VAR_26 , 64 ) ; if VAR_27 METHOD_9 ( VAR_28 , VAR_29 , 0 ) ; else if VAR_30 if ( VAR_31 -> VAR_32 . VAR_33 . VAR_34 > 1 ) METHOD_10 ( VAR_35 , VAR_36 , 0 ) ; else METHOD_11 ( VAR_37 , VAR_38 , 25 ) ; METHOD_12 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; METHOD_13 ( VAR_43 , VAR_44 , 1000 ) ; METHOD_14 ( VAR_45 , VAR_46 , 1000 ) ; METHOD_15 ( VAR_47 , VAR_48 , 100 ) ; METHOD_16 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; if VAR_53 if ( VAR_54 -> VAR_55 . VAR_56 . VAR_57 > 1 ) METHOD_17 ( VAR_58 , VAR_59 , 0 ) ; else METHOD_18 ( VAR_60 , VAR_61 ) ; METHOD_19 ( VAR_62 , VAR_63 , 100 ) ; METHOD_20 ( VAR_64 , VAR_65 , 100 ) ; METHOD_21 ( VAR_66 , VAR_67 , 100 ) ; if VAR_68 METHOD_22 ( VAR_69 , VAR_70 , VAR_71 , VAR_72 ) ; else if VAR_73 if ( VAR_74 -> VAR_75 . VAR_76 . VAR_77 > 1 ) METHOD_23 ( VAR_78 , VAR_79 , VAR_80 , VAR_81 ) ; else METHOD_24 ( VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ; if ( VAR_86 -> VAR_87 != VAR_88 && VAR_89 -> VAR_90 != VAR_91 -> VAR_92 && VAR_93 -> VAR_94 > 0 ) METHOD_25 ( ""kf_min_distnotsupportedinautomode,use0"" ""orkf_max_distinstead."" ) ; METHOD_26 ( VAR_95 , VAR_96 ) ; METHOD_27 ( VAR_97 , VAR_98 , - 16 , 16 ) ; if VAR_99 && ! VAR_100 METHOD_28 ( VAR_101 , VAR_102 , 0 , 0 ) ; else METHOD_29 ( VAR_103 , VAR_104 , 6 ) ; METHOD_30 ( VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ; METHOD_31 ( VAR_109 , VAR_110 , 7 ) ; METHOD_32 ( VAR_111 , VAR_112 , 0 , 15 ) ; METHOD_33 ( VAR_113 , VAR_114 , 6 ) ; METHOD_34 ( VAR_115 , VAR_116 , 1 , 3 ) ;  METHOD_35 ( VAR_117 , VAR_118 , 0 , 63 ) ;  if ( VAR_119 && ( VAR_120 -> VAR_121 == VAR_122 || VAR_123 -> VAR_124 == VAR_125 ) ) METHOD_36 ( VAR_126 , VAR_127 , VAR_128 -> VAR_129 , VAR_130 -> VAR_131 ) ; if ! ( VAR_132 ) if ( VAR_133 -> VAR_134 == VAR_135 ) { TYPE_4 VAR_136 = sizeof ( VAR_137 ) ; TYPE_5 VAR_138 = ( TYPE_6 ) ( VAR_139 -> VAR_140 . VAR_141 / VAR_142 ) ; VAR_143 * VAR_144 ; if ( ! VAR_145 -> VAR_146 . VAR_147 ) METHOD_37 ( ""rc_twopass_stats_in.bufnotset."" ) ; if ( VAR_148 -> VAR_149 . VAR_150 % VAR_151 ) METHOD_38 ( ""rc_twopass_stats_in.szindicatestruncatedpacket."" ) ; if ( VAR_152 -> VAR_153 . VAR_154 < 2 * VAR_155 ) METHOD_39 ( ""rc_twopass_stats_inrequiresatleasttwopackets."" ) ; VAR_156 = ( TYPE_7 * ) ( ( TYPE_8 * ) VAR_157 -> VAR_158 . VAR_159 + ( VAR_160 - 1 ) * VAR_161 ) ; if ( ( TYPE_9 ) ( VAR_162 -> VAR_163 + 0.5 ) != VAR_164 - 1 ) METHOD_40 ( ""rc_twopass_stats_inmissingEOSstatspacket"" ) ; } METHOD_41 ( VAR_165 , VAR_166 , 1 , 5 ) ; if ( VAR_167 -> VAR_168 > 1 ) { unsigned TYPE_10 VAR_169 ; METHOD_42 ( VAR_170 , VAR_171 , 16 ) ; for ( VAR_172 = 1 ; VAR_173 < VAR_174 -> VAR_175 ; VAR_176 ++ )  if ( VAR_177 -> VAR_178 [ VAR_179 ] <= VAR_180 -> VAR_181 [ VAR_182 - 1 ] )  METHOD_43 ( ""ts_target_bitrateentriesarenotstrictlyincreasing"" ) ; METHOD_44 ( VAR_183 , VAR_184 [ VAR_185 -> VAR_186 - 1 ] , 1 , 1 ) ; for ( VAR_187 = VAR_188 -> VAR_189 - 2 ; VAR_190 > 0 ; VAR_191 -- ) if ( VAR_192 -> VAR_193 [ VAR_194 - 1 ] != 2 * VAR_195 -> VAR_196 [ VAR_197 ] ) METHOD_45 ( ""ts_rate_decimatorfactorsarenotpowersof2"" ) ; METHOD_46 ( VAR_198 , VAR_199 [ VAR_200 ] , VAR_201 -> VAR_202 - 1 ) ; } if ( VAR_203 & VAR_204 ) if ( VAR_205 -> VAR_206 > ( 1 << VAR_207 -> VAR_208 ) ) METHOD_47 ( ""g_threadscannotbebiggerthannumberoftokenpartitions"" ) ; return VAR_209 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( VAR_4 , VAR_5 , 1 , 1000000000 ) ; METHOD_46 ( VAR_198 , VAR_199 [ VAR_200 ] , VAR_201 -> VAR_202 - 1 ) ; } if ( VAR_203 & VAR_204 ) if ( VAR_205 -> VAR_206 > ( 1 << VAR_207 -> VAR_208 ) ) METHOD_47 ( ""g_threadscannotbebiggerthannumberoftokenpartitions"" ) ; return VAR_209 ; }",36
37,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  TYPE_1 VAR_1 , VAR_2 , VAR_3 ;  TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; if ( VAR_6 -> VAR_7 && ! METHOD_1 ( VAR_8 ) ) return - VAR_9 ; if ( ( VAR_10 -> VAR_11 & VAR_12 ) == VAR_13 ) { if ( VAR_14 -> VAR_15 != VAR_16 && VAR_17 -> VAR_18 != VAR_19 ) return - VAR_20 ; } if ( VAR_21 -> VAR_22 != VAR_23 && ( VAR_24 -> VAR_25 & VAR_26 ) ) if ( VAR_27 -> VAR_28 <= - VAR_29 || VAR_30 -> VAR_31 >= VAR_32 ) return - VAR_33 ; if ( VAR_34 -> VAR_35 & VAR_36 ) if ( VAR_37 -> VAR_38 < 900000 / VAR_39 || VAR_40 -> VAR_41 > 1100000 / VAR_42 ) return - VAR_43 ; METHOD_2 ( & VAR_44 ) ; VAR_45 = VAR_46 ; VAR_47 = VAR_48 ; if 0 VAR_49 &= ~ VAR_50 ; if ( VAR_51 -> VAR_52 ) { if ( VAR_53 -> VAR_54 & VAR_55 ) VAR_56 = ( VAR_57 -> VAR_58 & ~ VAR_59 ) | ( VAR_60 & VAR_61 ) ; if ( VAR_62 -> VAR_63 & VAR_64 ) { if ( VAR_65 -> VAR_66 > VAR_67 || VAR_68 -> VAR_69 < - VAR_70 ) { VAR_71 = - VAR_72 ; goto VAR_73 ; } VAR_74 = ( ( TYPE_4 ) VAR_75 -> VAR_76 * VAR_77 ) >> ( VAR_78 - VAR_79 ) ; } if ( VAR_80 -> VAR_81 & VAR_82 ) { if ( VAR_83 -> VAR_84 < 0 || VAR_85 -> VAR_86 >= VAR_87 ) { VAR_88 = - VAR_89 ; goto VAR_90 ; } VAR_91 = VAR_92 -> VAR_93 ; } if ( VAR_94 -> VAR_95 & VAR_96 ) { if ( VAR_97 -> VAR_98 < 0 || VAR_99 -> VAR_100 >= VAR_101 ) { VAR_102 = - VAR_103 ; goto VAR_104 ; } VAR_105 = VAR_106 -> VAR_107 ; } if ( VAR_108 -> VAR_109 & VAR_110 ) { if ( VAR_111 -> VAR_112 < 0 ) { VAR_113 = - VAR_114 ; goto VAR_115 ; } VAR_116 = METHOD_3 ( VAR_117 -> VAR_118 + 4 , ( TYPE_5 ) VAR_119 ) ; } if ( VAR_120 -> VAR_121 & VAR_122 ) { if ( VAR_123 -> VAR_124 == VAR_125 ) { VAR_126 = VAR_127 -> VAR_128 ; } else if ( VAR_129 & VAR_130 ) { VAR_131 = VAR_132 -> VAR_133 * VAR_134 ; VAR_135 = METHOD_4 ( VAR_136 , ( TYPE_6 ) VAR_137 * VAR_138 ) ; VAR_139 = METHOD_5 ( VAR_140 , ( TYPE_7 ) - VAR_141 * VAR_142 ) ; if ( VAR_143 & VAR_144 || VAR_145 == 0 ) VAR_146 = VAR_147 . VAR_148 ; VAR_149 = VAR_150 . VAR_151 - VAR_152 ; VAR_153 = VAR_154 . VAR_155 ; VAR_156 = VAR_157 * VAR_158 ; VAR_159 = METHOD_6 ( VAR_160 , VAR_161 * 2 + ( VAR_162 + 2 ) * 2 - VAR_163 ) ; if ( VAR_164 >= VAR_165 && ( VAR_166 & VAR_167 || VAR_168 > VAR_169 ) ) VAR_170 += METHOD_7 ( VAR_171 << ( VAR_172 - VAR_173 ) , VAR_174 ) ; VAR_175 += VAR_176 ; VAR_177 = METHOD_8 ( VAR_178 , ( TYPE_8 ) VAR_179 ) ; VAR_180 = METHOD_9 ( VAR_181 , ( TYPE_9 ) - VAR_182 ) ;  VAR_183 = METHOD_10 ( VAR_184 ,   VAR_185 ,  & VAR_186 ) ; VAR_187 <<= VAR_188 ; } } if ( VAR_189 -> VAR_190 & VAR_191 ) VAR_192 = VAR_193 -> VAR_194 ; if ( VAR_195 -> VAR_196 & ( VAR_197 | VAR_198 | VAR_199 ) ) METHOD_11 ( ) ; } VAR_200 : if ( ( VAR_201 & ( VAR_202 | VAR_203 ) ) != 0 ) VAR_204 = VAR_205 ; if ( ( VAR_206 -> VAR_207 == VAR_208 ) || ( VAR_209 -> VAR_210 == VAR_211 ) ) VAR_212 -> VAR_213 = VAR_214 ; else VAR_215 -> VAR_216 = ( ( TYPE_10 ) METHOD_12 ( VAR_217 , VAR_218 ) ) * VAR_219 / 1000 ; VAR_220 -> VAR_221 = ( VAR_222 / VAR_223 ) << ( VAR_224 - VAR_225 ) ; VAR_226 -> VAR_227 = VAR_228 ; VAR_229 -> VAR_230 = VAR_231 ; VAR_232 -> VAR_233 = VAR_234 ; VAR_235 -> VAR_236 = VAR_237 ; VAR_238 -> VAR_239 = 1 ; VAR_240 -> VAR_241 = VAR_242 ; VAR_243 -> VAR_244 = VAR_245 ; VAR_246 -> VAR_247 = 0 ; VAR_248 -> VAR_249 = 0 ; VAR_250 -> VAR_251 = 0 ; VAR_252 -> VAR_253 = 0 ; VAR_254 -> VAR_255 = 0 ; VAR_256 -> VAR_257 = 0 ; VAR_258 -> VAR_259 = 0 ; VAR_260 -> VAR_261 = 0 ; METHOD_13 ( & VAR_262 ) ; METHOD_14 ( & VAR_263 -> VAR_264 ) ; METHOD_15 ( ) ; return ( VAR_265 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 , VAR_3 ; TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; if ( VAR_6 -> VAR_7 && ! METHOD_1 ( VAR_8 ) ) return - VAR_9 ; if ( ( VAR_10 -> VAR_11 & VAR_12 ) == VAR_13 ) { if ( VAR_14 -> VAR_15 != VAR_16 && VAR_17 -> VAR_18 != VAR_19 ) return - VAR_20 ; } if ( VAR_21 -> VAR_22 != VAR_23 && ( VAR_24 -> VAR_25 & VAR_26 ) ) if ( VAR_27 -> VAR_28 <= - VAR_29 || VAR_30 -> VAR_31 >= VAR_32 ) return - VAR_33 ; if ( VAR_34 -> VAR_35 & VAR_36 ) if ( VAR_37 -> VAR_38 < 900000 / VAR_39 || VAR_40 -> VAR_41 > 1100000 / VAR_42 ) return - VAR_43 ; METHOD_2 ( & VAR_44 ) ; VAR_45 = VAR_46 ; VAR_47 = VAR_48 ; if 0 VAR_49 &= ~ VAR_50 ; if ( VAR_51 -> VAR_52 ) { if ( VAR_53 -> VAR_54 & VAR_55 ) VAR_56 = ( VAR_57 -> VAR_58 & ~ VAR_59 ) | ( VAR_60 & VAR_61 ) ; if ( VAR_62 -> VAR_63 & VAR_64 ) { if ( VAR_65 -> VAR_66 > VAR_67 || VAR_68 -> VAR_69 < - VAR_70 ) { VAR_71 = - VAR_72 ; goto VAR_73 ; } VAR_74 = ( ( TYPE_4 ) VAR_75 -> VAR_76 * VAR_77 ) >> ( VAR_78 - VAR_79 ) ; } if ( VAR_80 -> VAR_81 & VAR_82 ) { if ( VAR_83 -> VAR_84 < 0 || VAR_85 -> VAR_86 >= VAR_87 ) { VAR_88 = - VAR_89 ; goto VAR_90 ; } VAR_91 = VAR_92 -> VAR_93 ; } if ( VAR_94 -> VAR_95 & VAR_96 ) { if ( VAR_97 -> VAR_98 < 0 || VAR_99 -> VAR_100 >= VAR_101 ) { VAR_102 = - VAR_103 ; goto VAR_104 ; } VAR_105 = VAR_106 -> VAR_107 ; } if ( VAR_108 -> VAR_109 & VAR_110 ) { if ( VAR_111 -> VAR_112 < 0 ) { VAR_113 = - VAR_114 ; goto VAR_115 ; } VAR_116 = METHOD_3 ( VAR_117 -> VAR_118 + 4 , ( TYPE_5 ) VAR_119 ) ; } if ( VAR_120 -> VAR_121 & VAR_122 ) { if ( VAR_123 -> VAR_124 == VAR_125 ) { VAR_126 = VAR_127 -> VAR_128 ; } else if ( VAR_129 & VAR_130 ) { VAR_131 = VAR_132 -> VAR_133 * VAR_134 ; VAR_135 = METHOD_4 ( VAR_136 , ( TYPE_6 ) VAR_137 * VAR_138 ) ; VAR_139 = METHOD_5 ( VAR_140 , ( TYPE_7 ) - VAR_141 * VAR_142 ) ; if ( VAR_143 & VAR_144 || VAR_145 == 0 ) VAR_146 = VAR_147 . VAR_148 ; VAR_149 = VAR_150 . VAR_151 - VAR_152 ; VAR_153 = VAR_154 . VAR_155 ; VAR_156 = VAR_157 * VAR_158 ; VAR_159 = METHOD_6 ( VAR_160 , VAR_161 * 2 + ( VAR_162 + 2 ) * 2 - VAR_163 ) ; if ( VAR_164 >= VAR_165 && ( VAR_166 & VAR_167 || VAR_168 > VAR_169 ) ) VAR_170 += METHOD_7 ( VAR_171 << ( VAR_172 - VAR_173 ) , VAR_174 ) ; VAR_175 += VAR_176 ; VAR_177 = METHOD_8 ( VAR_178 , ( TYPE_8 ) VAR_179 ) ; VAR_180 = METHOD_9 ( VAR_181 , ( TYPE_9 ) - VAR_182 ) ; VAR_183 = METHOD_10 ( VAR_184 , VAR_185 , & VAR_186 ) ; VAR_187 <<= VAR_188 ; } } if ( VAR_189 -> VAR_190 & VAR_191 ) VAR_192 = VAR_193 -> VAR_194 ; if ( VAR_195 -> VAR_196 & ( VAR_197 | VAR_198 | VAR_199 ) ) METHOD_11 ( ) ; } VAR_200 : if ( ( VAR_201 & ( VAR_202 | VAR_203 ) ) != 0 ) VAR_204 = VAR_205 ; if ( ( VAR_206 -> VAR_207 == VAR_208 ) || ( VAR_209 -> VAR_210 == VAR_211 ) ) VAR_212 -> VAR_213 = VAR_214 ; else VAR_215 -> VAR_216 = ( ( TYPE_10 ) METHOD_12 ( VAR_217 , VAR_218 ) ) * VAR_219 / 1000 ; VAR_220 -> VAR_221 = ( VAR_222 / VAR_223 ) << ( VAR_224 - VAR_225 ) ; VAR_226 -> VAR_227 = VAR_228 ; VAR_229 -> VAR_230 = VAR_231 ; VAR_232 -> VAR_233 = VAR_234 ; VAR_235 -> VAR_236 = VAR_237 ; VAR_238 -> VAR_239 = 1 ; VAR_240 -> VAR_241 = VAR_242 ; VAR_243 -> VAR_244 = VAR_245 ; VAR_246 -> VAR_247 = 0 ; VAR_248 -> VAR_249 = 0 ; VAR_250 -> VAR_251 = 0 ; VAR_252 -> VAR_253 = 0 ; VAR_254 -> VAR_255 = 0 ; VAR_256 -> VAR_257 = 0 ; VAR_258 -> VAR_259 = 0 ; VAR_260 -> VAR_261 = 0 ; METHOD_13 ( & VAR_262 ) ; METHOD_14 ( & VAR_263 -> VAR_264 ) ; METHOD_15 ( ) ; return ( VAR_265 ) ; }",37
38,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 + sizeof ( struct STRUCT_OR_UNION_0 ) ) ; METHOD_2 ( ( VAR_6 , ""ubikcall%s"" , METHOD_3 ( VAR_7 , ""op%d"" , VAR_8 ) ) ) ; VAR_9 += sizeof ( struct STRUCT_OR_UNION_1 ) + 4 ; switch ( VAR_10 ) { case 10000 : METHOD_4 ( VAR_11 [ 0 ] , 4 ) ; VAR_12 = METHOD_5 ( VAR_13 ) ; VAR_14 += sizeof ( TYPE_5 ) ; METHOD_6 ( ( VAR_15 , ""syncsite%s"" , VAR_16 ? ""yes"" : ""no"" ) ) ; METHOD_7 ( ( VAR_17 , ""votestart"" ) ) ; METHOD_8 ( ) ; METHOD_9 ( ( VAR_18 , ""dbversion"" ) ) ; METHOD_10 ( ) ; METHOD_11 ( ( VAR_19 , ""tid"" ) ) ; METHOD_12 ( ) ; break ; case 10003 : METHOD_13 ( ( VAR_20 , ""site"" ) ) ; METHOD_14 ( ) ; break ; case 20000 : case 20001 : case 20007 : case 20008 : case 20010 : METHOD_15 ( ( VAR_21 , ""tid"" ) ) ; METHOD_16 ( ) ; break ; case 20002 : METHOD_17 ( ( VAR_22 , ""tid"" ) ) ; METHOD_18 ( ) ; METHOD_19 ( ( VAR_23 , ""file"" ) ) ; METHOD_20 ( ) ; METHOD_21 ( ( VAR_24 , ""pos"" ) ) ; METHOD_22 ( ) ; METHOD_23 ( ( VAR_25 , ""length"" ) ) ; METHOD_24 ( ) ;  VAR_26 = METHOD_25 ( VAR_27 ) ;  VAR_28 += sizeof ( TYPE_6 ) ; METHOD_26 ( VAR_29 , ""type%d"" , VAR_30 ) ; break ; case 20003 : METHOD_27 ( ( VAR_31 , ""tid"" ) ) ; METHOD_28 ( ) ; METHOD_29 ( ( VAR_32 , ""file"" ) ) ; METHOD_30 ( ) ; METHOD_31 ( ( VAR_33 , ""pos"" ) ) ; METHOD_32 ( ) ; break ; case 20005 : METHOD_33 ( ( VAR_34 , ""file"" ) ) ; METHOD_34 ( ) ; break ; case 20006 : METHOD_35 ( ( VAR_35 , ""file"" ) ) ; METHOD_36 ( ) ; METHOD_37 ( ( VAR_36 , ""length"" ) ) ; METHOD_38 ( ) ; METHOD_39 ( ( VAR_37 , ""dbversion"" ) ) ; METHOD_40 ( ) ; break ; case 20009 : METHOD_41 ( ( VAR_38 , ""tid"" ) ) ; METHOD_42 ( ) ; METHOD_43 ( ( VAR_39 , ""file"" ) ) ; METHOD_44 ( ) ; METHOD_45 ( ( VAR_40 , ""length"" ) ) ; METHOD_46 ( ) ; break ; case 20012 : METHOD_47 ( ( VAR_41 , ""tid"" ) ) ; METHOD_48 ( ) ; METHOD_49 ( ( VAR_42 , ""oldversion"" ) ) ; METHOD_50 ( ) ; METHOD_51 ( ( VAR_43 , ""newversion"" ) ) ; METHOD_52 ( ) ; break ; default : ; } return ; VAR_44 : METHOD_53 ( ( VAR_45 , ""[|ubik]"" ) ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 + sizeof ( struct STRUCT_OR_UNION_0 ) ) ; METHOD_2 ( ( VAR_6 , ""ubikcall%s"" , METHOD_3 ( VAR_7 , ""op%d"" , VAR_8 ) ) ) ; VAR_9 += sizeof ( struct STRUCT_OR_UNION_1 ) + 4 ; switch ( VAR_10 ) { case 10000 : METHOD_4 ( VAR_11 [ 0 ] , 4 ) ; VAR_12 = METHOD_5 ( VAR_13 ) ; VAR_14 += sizeof ( TYPE_5 ) ; METHOD_6 ( ( VAR_15 , ""syncsite%s"" , VAR_16 ? ""yes"" : ""no"" ) ) ; METHOD_7 ( ( VAR_17 , ""votestart"" ) ) ; METHOD_8 ( ) ; METHOD_54 ( VAR_28 ) ; METHOD_9 ( ( VAR_18 , ""dbversion"" ) ) ; METHOD_10 ( ) ; METHOD_11 ( ( VAR_19 , ""tid"" ) ) ; METHOD_12 ( ) ; break ; case 10003 : METHOD_13 ( ( VAR_20 , ""site"" ) ) ; METHOD_14 ( ) ; break ; case 20000 : case 20001 : case 20007 : case 20008 : case 20010 : METHOD_15 ( ( VAR_21 , ""tid"" ) ) ; METHOD_16 ( ) ; break ; case 20002 : METHOD_17 ( ( VAR_22 , ""tid"" ) ) ; METHOD_18 ( ) ; METHOD_19 ( ( VAR_23 , ""file"" ) ) ; METHOD_20 ( ) ; METHOD_21 ( ( VAR_24 , ""pos"" ) ) ; METHOD_22 ( ) ; METHOD_23 ( ( VAR_25 , ""length"" ) ) ; METHOD_24 ( ) ; VAR_26 = METHOD_25 ( VAR_27 ) ; VAR_28 += sizeof ( TYPE_6 ) ; METHOD_26 ( VAR_29 , ""type%d"" , VAR_30 ) ; break ; case 20003 : METHOD_27 ( ( VAR_31 , ""tid"" ) ) ; METHOD_28 ( ) ; METHOD_29 ( ( VAR_32 , ""file"" ) ) ; METHOD_30 ( ) ; METHOD_31 ( ( VAR_33 , ""pos"" ) ) ; METHOD_32 ( ) ; break ; case 20005 : METHOD_33 ( ( VAR_34 , ""file"" ) ) ; METHOD_34 ( ) ; break ; case 20006 : METHOD_35 ( ( VAR_35 , ""file"" ) ) ; METHOD_36 ( ) ; METHOD_37 ( ( VAR_36 , ""length"" ) ) ; METHOD_38 ( ) ; METHOD_39 ( ( VAR_37 , ""dbversion"" ) ) ; METHOD_40 ( ) ; break ; case 20009 : METHOD_41 ( ( VAR_38 , ""tid"" ) ) ; METHOD_42 ( ) ; METHOD_43 ( ( VAR_39 , ""file"" ) ) ; METHOD_44 ( ) ; METHOD_45 ( ( VAR_40 , ""length"" ) ) ; METHOD_46 ( ) ; break ; case 20012 : METHOD_47 ( ( VAR_41 , ""tid"" ) ) ; METHOD_48 ( ) ; METHOD_49 ( ( VAR_42 , ""oldversion"" ) ) ; METHOD_50 ( ) ; METHOD_51 ( ( VAR_43 , ""newversion"" ) ) ; METHOD_52 ( ) ; break ; default : ; } return ; VAR_44 : METHOD_53 ( ( VAR_45 , ""[|ubik]"" ) ) ; }",38
39,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 VAR_5 ) { TYPE_6 VAR_6 = ( VAR_7 ? VAR_8 : METHOD_1 ( VAR_9 ) ) + 1 ; TYPE_7 * VAR_10 = METHOD_2 ( VAR_11 ) ; unsigned TYPE_8 VAR_12 ; TYPE_9 VAR_13 = 0 ; unsigned TYPE_10 VAR_14 ; TYPE_11 VAR_15 ; if ( ! VAR_16 ) return VAR_17 ; while ( -- VAR_18 > 0 ) { VAR_19 = * VAR_20 ;  if ( ( '%' == VAR_21 ) && METHOD_3 ( VAR_22 [ 1 ] ) && METHOD_4 ( VAR_23 [ 2 ] ) ) {  TYPE_12 VAR_24 [ 3 ] ; TYPE_13 * VAR_25 ; VAR_26 [ 0 ] = VAR_27 [ 1 ] ; VAR_28 [ 1 ] = VAR_29 [ 2 ] ; VAR_30 [ 2 ] = 0 ; VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 , 16 ) ; VAR_34 = METHOD_6 ( VAR_35 ) ; VAR_36 = METHOD_7 ( VAR_37 , & VAR_38 , 1 ) ; if ( VAR_39 ) { METHOD_8 ( VAR_40 ) ; return VAR_41 ; } VAR_42 += 2 ; VAR_43 -= 2 ; } if ( VAR_44 && ( VAR_45 < 0x20 ) ) { METHOD_9 ( VAR_46 ) ; return VAR_47 ; } VAR_48 [ VAR_49 ++ ] = VAR_50 ; VAR_51 ++ ; } VAR_52 [ VAR_53 ] = 0 ; if ( VAR_54 ) * VAR_55 = VAR_56 ; if ( VAR_57 ) * VAR_58 = VAR_59 ; return VAR_60 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 VAR_5 ) { TYPE_6 VAR_6 = ( VAR_7 ? VAR_8 : METHOD_1 ( VAR_9 ) ) + 1 ; TYPE_7 * VAR_10 = METHOD_2 ( VAR_11 ) ; unsigned TYPE_8 VAR_12 ; TYPE_9 VAR_13 = 0 ; unsigned TYPE_10 VAR_14 ; TYPE_11 VAR_15 ; if ( ! VAR_16 ) return VAR_17 ; while ( -- VAR_18 > 0 ) { VAR_19 = * VAR_20 ; if ( ( '%' == VAR_21 ) && METHOD_3 ( VAR_22 [ 1 ] ) && METHOD_4 ( VAR_23 [ 2 ] ) ) { TYPE_12 VAR_24 [ 3 ] ; TYPE_13 * VAR_25 ; VAR_26 [ 0 ] = VAR_27 [ 1 ] ; VAR_28 [ 1 ] = VAR_29 [ 2 ] ; VAR_30 [ 2 ] = 0 ; VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 , 16 ) ; VAR_34 = METHOD_6 ( VAR_35 ) ; VAR_36 = METHOD_7 ( VAR_37 , & VAR_38 , 1 ) ; if ( VAR_39 ) { METHOD_8 ( VAR_40 ) ; return VAR_41 ; } VAR_42 += 2 ; VAR_43 -= 2 ; } if ( VAR_44 && ( VAR_45 < 0x20 ) ) { METHOD_9 ( VAR_46 ) ; return VAR_47 ; } VAR_48 [ VAR_49 ++ ] = VAR_50 ; VAR_51 ++ ; } VAR_52 [ VAR_53 ] = 0 ; if ( VAR_54 ) * VAR_55 = VAR_56 ; if ( VAR_57 ) * VAR_58 = VAR_59 ; return VAR_60 ; }",39
40,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ;  if ( VAR_5 -> VAR_6 < 5 )  return VAR_7 ;  VAR_8 = VAR_9 -> VAR_10 * 4 - sizeof ( TYPE_6 ) ;  VAR_11 = 0 ; while ( VAR_12 < VAR_13 ) { VAR_14 = ( TYPE_7 * ) ( VAR_15 -> VAR_16 + VAR_17 ) ;  if ( VAR_18 -> VAR_19 == VAR_20 )  { VAR_21 ++ ;  continue ;  } if ( VAR_22 -> VAR_23 == VAR_24 ) break ;  if ( ( VAR_25 + 1 ) >= VAR_26 || ( VAR_27 + VAR_28 -> VAR_29 ) > VAR_30 )  break ; if ( VAR_31 -> VAR_32 == VAR_33 ) return VAR_34 ; VAR_35 += VAR_36 -> VAR_37 ; }  return VAR_38 ;  }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; if ( VAR_5 -> VAR_6 < 5 ) return VAR_7 ; VAR_8 = VAR_9 -> VAR_10 * 4 ) - sizeof ( TYPE_6 ) ; VAR_11 = 0 ; while ( VAR_12 < VAR_13 ) { VAR_14 = ( TYPE_7 * ) ( VAR_15 -> VAR_16 + VAR_17 ) ; if ( VAR_18 -> VAR_19 == VAR_20 ) { VAR_21 ++ ; continue ; } if ( VAR_22 -> VAR_23 == VAR_24 ) break ; if ( ( VAR_25 + 1 ) >= VAR_26 || ( VAR_27 + VAR_28 -> VAR_29 ) > VAR_30 ) break ; if ( VAR_31 -> VAR_32 == VAR_33 ) return VAR_34 ; VAR_35 += VAR_36 -> VAR_37 ; } } } return VAR_38 ; }",40
41,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; TYPE_4 VAR_4 = 0 ; unsigned TYPE_5 VAR_5 [ 5 ] ; TYPE_6 VAR_6 = 0x0000007f ; TYPE_7 VAR_7 = ( TYPE_8 ) VAR_8 ; if ( VAR_9 < 0 ) { VAR_10 = 1 ; VAR_11 = ( TYPE_9 ) - VAR_12 ; } for ( VAR_13 = 4 , VAR_14 = 0 ; VAR_15 >= 0 ; VAR_16 -- , VAR_17 += 7 ) { VAR_18 [ VAR_19 ] = ( unsigned TYPE_10 ) ( ( VAR_20 & VAR_21 ) >> VAR_22 ) ; VAR_23 [ VAR_24 ] |= 0x80 ; VAR_25 = VAR_26 << 7 ; } for ( VAR_27 = 0 ; VAR_28 < 4 ; VAR_29 ++ ) if ( VAR_30 [ VAR_31 ] & 0x7f ) break ;  if ( VAR_32 [ VAR_33 ] & 0x40 )  VAR_34 -- ; VAR_35 [ VAR_36 ] &= 0x7f ; if ( VAR_37 ) VAR_38 [ VAR_39 ] |= 0x40 ; for ( VAR_40 = 4 ; VAR_41 >= VAR_42 ; VAR_43 -- ) METHOD_1 ( VAR_44 , VAR_45 [ VAR_46 ] ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; TYPE_4 VAR_4 = 0 ; unsigned TYPE_5 VAR_5 [ 5 ] ; TYPE_6 VAR_6 = 0x0000007f ; TYPE_7 VAR_7 = ( TYPE_8 ) VAR_8 ; if ( VAR_9 < 0 ) { VAR_10 = 1 ; VAR_11 = ( TYPE_9 ) - VAR_12 ; } for ( VAR_13 = 4 , VAR_14 = 0 ; VAR_15 >= 0 ; VAR_16 -- , VAR_17 += 7 ) { VAR_18 [ VAR_19 ] = ( unsigned TYPE_10 ) ( ( VAR_20 & VAR_21 ) >> VAR_22 ) ; VAR_23 [ VAR_24 ] |= 0x80 ; VAR_25 = VAR_26 << 7 ; } for ( VAR_27 = 0 ; VAR_28 < 4 ; VAR_29 ++ ) if ( VAR_30 [ VAR_31 ] & 0x7f ) break ; if ( VAR_32 [ VAR_33 ] & 0x40 && VAR_42 > 0 ) VAR_34 -- ; VAR_35 [ VAR_36 ] &= 0x7f ; if ( VAR_37 ) VAR_38 [ VAR_39 ] |= 0x40 ; for ( VAR_40 = 4 ; VAR_41 >= VAR_42 ; VAR_43 -- ) METHOD_1 ( VAR_44 , VAR_45 [ VAR_46 ] ) ; }",41
42,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 VAR_11 ; TYPE_7 VAR_12 , VAR_13 ; VAR_14 -> VAR_15 ++ ; if ( VAR_16 -> VAR_17 == VAR_18 ) { if ( VAR_19 -> VAR_20 != VAR_21 ) { VAR_22 = METHOD_1 ( VAR_23 -> VAR_24 , VAR_25 ) ; if ( VAR_26 < 0 ) return VAR_27 ; if ( VAR_28 -> VAR_29 != VAR_30 && VAR_31 -> VAR_32 != VAR_33 ) { TYPE_8 VAR_34 = VAR_35 -> VAR_36 * VAR_37 ; VAR_38 = METHOD_2 ( METHOD_3 ( VAR_39 , VAR_40 ) , VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 = METHOD_4 ( VAR_46 , VAR_47 , VAR_48 -> VAR_49 ) ; METHOD_5 ( VAR_50 , VAR_51 , ""Setfirstptsto(in:%"" PRId64 ""out:%"" PRId64 "")\\n"" , VAR_52 -> VAR_53 , METHOD_6 ( VAR_54 , VAR_55 , VAR_56 -> VAR_57 ) ) ; } else { VAR_58 -> VAR_59 = VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; } } else { METHOD_7 ( VAR_64 , VAR_65 , ""Discardinginitialframe(s)withno"" ""timestamp.\\n"" ) ; METHOD_8 ( & VAR_66 ) ; VAR_67 -> VAR_68 ++ ; } return 0 ; }  if ( VAR_69 -> VAR_70 == VAR_71 ) {  return METHOD_9 ( VAR_72 -> VAR_73 , VAR_74 ) ; } VAR_75 = METHOD_10 ( VAR_76 -> VAR_77 - VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , VAR_82 -> VAR_83 , VAR_84 -> VAR_85 ) ; if ( VAR_86 < 1 ) { TYPE_9 * VAR_87 ; TYPE_10 VAR_88 = METHOD_11 ( VAR_89 -> VAR_90 ) / sizeof ( TYPE_11 * ) ; METHOD_12 ( VAR_91 , VAR_92 , ""Dropping%dframe(s).\\n"" , VAR_93 ) ; VAR_94 -> VAR_95 += VAR_96 ; METHOD_13 ( VAR_97 -> VAR_98 , & VAR_99 , sizeof ( VAR_100 ) , VAR_101 ) ; METHOD_14 ( VAR_102 -> VAR_103 ) ; VAR_104 = METHOD_15 ( VAR_105 -> VAR_106 , VAR_107 ) ; METHOD_16 ( & VAR_108 ) ; return VAR_109 ; } for ( VAR_110 = 0 ; VAR_111 < VAR_112 ; VAR_113 ++ ) { TYPE_12 * VAR_114 ; METHOD_17 ( VAR_115 -> VAR_116 , & VAR_117 , sizeof ( VAR_118 ) , VAR_119 ) ; if ( ! METHOD_18 ( VAR_120 -> VAR_121 ) && VAR_122 < VAR_123 - 1 ) { TYPE_13 * VAR_124 = METHOD_19 ( VAR_125 ) ; METHOD_20 ( VAR_126 , VAR_127 , ""Duplicatingframe.\\n"" ) ; if ( VAR_128 ) VAR_129 = METHOD_21 ( VAR_130 -> VAR_131 , VAR_132 ) ; else VAR_133 = METHOD_22 ( VAR_134 ) ; if ( VAR_135 < 0 ) { METHOD_23 ( & VAR_136 ) ; METHOD_24 ( & VAR_137 ) ; return VAR_138 ; } VAR_139 -> VAR_140 ++ ; } VAR_141 -> VAR_142 = METHOD_25 ( VAR_143 -> VAR_144 , VAR_145 -> VAR_146 , VAR_147 -> VAR_148 ) + VAR_149 -> VAR_150 ; if ( ( VAR_151 = METHOD_26 ( VAR_152 , VAR_153 ) ) < 0 ) { METHOD_27 ( & VAR_154 ) ; return VAR_155 ; } VAR_156 -> VAR_157 ++ ; } METHOD_28 ( VAR_158 -> VAR_159 ) ; VAR_160 = METHOD_29 ( VAR_161 -> VAR_162 , VAR_163 ) ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 + METHOD_30 ( VAR_168 -> VAR_169 , VAR_170 -> VAR_171 , VAR_172 -> VAR_173 ) ; return VAR_174 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 VAR_11 ; TYPE_7 VAR_12 , VAR_13 ; VAR_14 -> VAR_15 ++ ; if ( VAR_16 -> VAR_17 == VAR_18 ) { if ( VAR_19 -> VAR_20 != VAR_21 ) { VAR_22 = METHOD_1 ( VAR_23 -> VAR_24 , VAR_25 ) ; if ( VAR_26 < 0 ) return VAR_27 ; if ( VAR_28 -> VAR_29 != VAR_30 && VAR_31 -> VAR_32 != VAR_33 ) { TYPE_8 VAR_34 = VAR_35 -> VAR_36 * VAR_37 ; VAR_38 = METHOD_2 ( METHOD_3 ( VAR_39 , VAR_40 ) , VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 = METHOD_4 ( VAR_46 , VAR_47 , VAR_48 -> VAR_49 ) ; METHOD_5 ( VAR_50 , VAR_51 , ""Setfirstptsto(in:%"" PRId64 ""out:%"" PRId64 "")\\n"" , VAR_52 -> VAR_53 , METHOD_6 ( VAR_54 , VAR_55 , VAR_56 -> VAR_57 ) ) ; } else { VAR_58 -> VAR_59 = VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; } } else { METHOD_7 ( VAR_64 , VAR_65 , ""Discardinginitialframe(s)withno"" ""timestamp.\\n"" ) ; METHOD_8 ( & VAR_66 ) ; VAR_67 -> VAR_68 ++ ; } return 0 ; } if ( VAR_69 -> VAR_70 == VAR_71 ) { return METHOD_9 ( VAR_72 -> VAR_73 , VAR_74 ) ; } VAR_75 = METHOD_10 ( VAR_76 -> VAR_77 - VAR_78 -> VAR_79 , VAR_80 -> VAR_81 , VAR_82 -> VAR_83 , VAR_84 -> VAR_85 ) ; if ( VAR_86 < 1 ) { TYPE_9 * VAR_87 ; TYPE_10 VAR_88 = METHOD_11 ( VAR_89 -> VAR_90 ) / sizeof ( TYPE_11 * ) ; METHOD_12 ( VAR_91 , VAR_92 , ""Dropping%dframe(s).\\n"" , VAR_93 ) ; VAR_94 -> VAR_95 += VAR_96 ; METHOD_13 ( VAR_97 -> VAR_98 , & VAR_99 , sizeof ( VAR_100 ) , VAR_101 ) ; METHOD_14 ( VAR_102 -> VAR_103 ) ; VAR_104 = METHOD_15 ( VAR_105 -> VAR_106 , VAR_107 ) ; METHOD_16 ( & VAR_108 ) ; return VAR_109 ; } for ( VAR_110 = 0 ; VAR_111 < VAR_112 ; VAR_113 ++ ) { TYPE_12 * VAR_114 ; METHOD_17 ( VAR_115 -> VAR_116 , & VAR_117 , sizeof ( VAR_118 ) , VAR_119 ) ; if ( ! METHOD_18 ( VAR_120 -> VAR_121 ) && VAR_122 < VAR_123 - 1 ) { TYPE_13 * VAR_124 = METHOD_19 ( VAR_125 ) ; METHOD_20 ( VAR_126 , VAR_127 , ""Duplicatingframe.\\n"" ) ; if ( VAR_128 ) VAR_129 = METHOD_21 ( VAR_130 -> VAR_131 , VAR_132 ) ; else VAR_133 = METHOD_22 ( VAR_134 ) ; if ( VAR_135 < 0 ) { METHOD_23 ( & VAR_136 ) ; METHOD_24 ( & VAR_137 ) ; return VAR_138 ; } VAR_139 -> VAR_140 ++ ; } VAR_141 -> VAR_142 = METHOD_25 ( VAR_143 -> VAR_144 , VAR_145 -> VAR_146 , VAR_147 -> VAR_148 ) + VAR_149 -> VAR_150 ; if ( ( VAR_151 = METHOD_26 ( VAR_152 , VAR_153 ) ) < 0 ) { METHOD_27 ( & VAR_154 ) ; return VAR_155 ; } VAR_156 -> VAR_157 ++ ; } METHOD_28 ( VAR_158 -> VAR_159 ) ; VAR_160 = METHOD_29 ( VAR_161 -> VAR_162 , VAR_163 ) ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 + METHOD_30 ( VAR_168 -> VAR_169 , VAR_170 -> VAR_171 , VAR_172 -> VAR_173 ) ; return VAR_174 ; }",42
43,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; VAR_4 -> VAR_5 = VAR_6 ; VAR_7 -> VAR_8 = 1 ; VAR_9 -> VAR_10 = 1 ; VAR_11 -> VAR_12 = 'C' ; VAR_13 -> VAR_14 = 1 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0 ; VAR_19 -> VAR_20 = 0 ; VAR_21 -> VAR_22 = 0 ; VAR_23 -> VAR_24 = 32 ; VAR_25 -> VAR_26 = 32 ; VAR_27 -> VAR_28 = 0 ; VAR_29 -> VAR_30 = - 1 ; VAR_31 -> VAR_32 = 1 ; VAR_33 -> VAR_34 = 1 ; VAR_35 -> VAR_36 = 1 ; if ( VAR_37 -> VAR_38 > 1 ) { METHOD_1 ( VAR_39 , VAR_40 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""1singlequalitylayer"" ""->Numberoflayersforcedto1(ratherthan%d)\\n"" ""->Rateofthelastlayer(%3.1f)willbeused"" , VAR_41 -> VAR_42 , VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 - 1 ] ) ; VAR_47 -> VAR_48 [ 0 ] = VAR_49 -> VAR_50 [ VAR_51 -> VAR_52 - 1 ] ; VAR_53 -> VAR_54 = 1 ; } switch ( VAR_55 -> VAR_56 ) { case VAR_57 : if ( VAR_58 -> VAR_59 > 6 ) { METHOD_2 ( VAR_60 , VAR_61 , ""JPEG2000Profile-3(2kdcprofile)requires:\\n"" ""Numberofdecompositionlevels<=5\\n"" ""->Numberofdecompositionlevelsforcedto5(ratherthan%d)\\n"" , VAR_62 -> VAR_63 + 1 ) ; VAR_64 -> VAR_65 = 6 ; } break ; case VAR_66 : if ( VAR_67 -> VAR_68 < 2 ) { METHOD_3 ( VAR_69 , VAR_70 , ""JPEG2000Profile-4(4kdcprofile)requires:\\n"" ""Numberofdecompositionlevels>=1&&<=6\\n"" ""->Numberofdecompositionlevelsforcedto1(ratherthan%d)\\n"" , VAR_71 -> VAR_72 + 1 ) ; VAR_73 -> VAR_74 = 1 ; } else if ( VAR_75 -> VAR_76 > 7 ) { METHOD_4 ( VAR_77 , VAR_78 , ""JPEG2000Profile-4(4kdcprofile)requires:\\n"" ""Numberofdecompositionlevels>=1&&<=6\\n"" ""->Numberofdecompositionlevelsforcedto6(ratherthan%d)\\n"" , VAR_79 -> VAR_80 + 1 ) ; VAR_81 -> VAR_82 = 7 ; } break ; default : break ; } VAR_83 -> VAR_84 |= 0x01 ;  VAR_85 -> VAR_86 = VAR_87 -> VAR_88 - 1 ;  for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 ; VAR_93 ++ ) { VAR_94 -> VAR_95 [ VAR_96 ] = 256 ;  VAR_97 -> VAR_98 [ VAR_99 ] = 256 ;  } VAR_100 -> VAR_101 = VAR_102 ; if ( VAR_103 -> VAR_104 == VAR_105 ) { VAR_106 -> VAR_107 = ( TYPE_5 ) METHOD_5 ( VAR_108 -> VAR_109 , VAR_110 -> VAR_111 ) ; } else { VAR_112 -> VAR_113 = 0 ; } VAR_114 -> VAR_115 = 1 ; if ( VAR_116 -> VAR_117 <= 0 ) { VAR_118 -> VAR_119 = VAR_120 ; METHOD_6 ( VAR_121 , VAR_122 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1302083compressedbytes@24fps\\n"" ""Asnoratehasbeengiven,thislimitwillbeused.\\n"" ) ; } else if ( VAR_123 -> VAR_124 > VAR_125 ) { METHOD_7 ( VAR_126 , VAR_127 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1302083compressedbytes@24fps\\n"" ""->Specifiedrateexceedsthislimit.Ratewillbeforcedto1302083bytes.\\n"" ) ; VAR_128 -> VAR_129 = VAR_130 ; } if ( VAR_131 -> VAR_132 <= 0 ) { VAR_133 -> VAR_134 = VAR_135 ; METHOD_8 ( VAR_136 , VAR_137 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1041666compressedbytes@24fps\\n"" ""Asnoratehasbeengiven,thislimitwillbeused.\\n"" ) ; } else if ( VAR_138 -> VAR_139 > VAR_140 ) { METHOD_9 ( VAR_141 , VAR_142 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1041666compressedbytes@24fps\\n"" ""->Specifiedrateexceedsthislimit.Ratewillbeforcedto1041666bytes.\\n"" ) ; VAR_143 -> VAR_144 = VAR_145 ; } VAR_146 -> VAR_147 [ 0 ] = ( TYPE_6 ) ( VAR_148 -> VAR_149 * VAR_150 -> VAR_151 [ 0 ] . VAR_152 * VAR_153 -> VAR_154 [ 0 ] . VAR_155 * VAR_156 -> VAR_157 [ 0 ] . VAR_158 ) / ( TYPE_7 ) ( ( ( TYPE_8 ) VAR_159 -> VAR_160 ) * 8 * VAR_161 -> VAR_162 [ 0 ] . VAR_163 * VAR_164 -> VAR_165 [ 0 ] . VAR_166 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; VAR_4 -> VAR_5 = VAR_6 ; VAR_7 -> VAR_8 = 1 ; VAR_9 -> VAR_10 = 1 ; VAR_11 -> VAR_12 = 'C' ; VAR_13 -> VAR_14 = 1 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0 ; VAR_19 -> VAR_20 = 0 ; VAR_21 -> VAR_22 = 0 ; VAR_23 -> VAR_24 = 32 ; VAR_25 -> VAR_26 = 32 ; VAR_27 -> VAR_28 = 0 ; VAR_29 -> VAR_30 = - 1 ; VAR_31 -> VAR_32 = 1 ; VAR_33 -> VAR_34 = 1 ; VAR_35 -> VAR_36 = 1 ; if ( VAR_37 -> VAR_38 > 1 ) { METHOD_1 ( VAR_39 , VAR_40 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""1singlequalitylayer"" ""->Numberoflayersforcedto1(ratherthan%d)\\n"" ""->Rateofthelastlayer(%3.1f)willbeused"" , VAR_41 -> VAR_42 , VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 - 1 ] ) ; VAR_47 -> VAR_48 [ 0 ] = VAR_49 -> VAR_50 [ VAR_51 -> VAR_52 - 1 ] ; VAR_53 -> VAR_54 = 1 ; } switch ( VAR_55 -> VAR_56 ) { case VAR_57 : if ( VAR_58 -> VAR_59 > 6 ) { METHOD_2 ( VAR_60 , VAR_61 , ""JPEG2000Profile-3(2kdcprofile)requires:\\n"" ""Numberofdecompositionlevels<=5\\n"" ""->Numberofdecompositionlevelsforcedto5(ratherthan%d)\\n"" , VAR_62 -> VAR_63 + 1 ) ; VAR_64 -> VAR_65 = 6 ; } break ; case VAR_66 : if ( VAR_67 -> VAR_68 < 2 ) { METHOD_3 ( VAR_69 , VAR_70 , ""JPEG2000Profile-4(4kdcprofile)requires:\\n"" ""Numberofdecompositionlevels>=1&&<=6\\n"" ""->Numberofdecompositionlevelsforcedto1(ratherthan%d)\\n"" , VAR_71 -> VAR_72 + 1 ) ; VAR_73 -> VAR_74 = 1 ; } else if ( VAR_75 -> VAR_76 > 7 ) { METHOD_4 ( VAR_77 , VAR_78 , ""JPEG2000Profile-4(4kdcprofile)requires:\\n"" ""Numberofdecompositionlevels>=1&&<=6\\n"" ""->Numberofdecompositionlevelsforcedto6(ratherthan%d)\\n"" , VAR_79 -> VAR_80 + 1 ) ; VAR_81 -> VAR_82 = 7 ; } break ; default : break ; } VAR_83 -> VAR_84 |= 0x01 ; if ( VAR_159 -> VAR_111 == 1 ) { VAR_159 -> VAR_92 = 1 ; VAR_159 -> VAR_95 [ 0 ] = 128 ; VAR_159 -> VAR_98 [ 0 ] = 128 ; } else { VAR_85 -> VAR_86 = VAR_87 -> VAR_88 - 1 ; for ( VAR_89 = 0 ; VAR_90 < VAR_91 -> VAR_92 ; VAR_93 ++ ) { VAR_94 -> VAR_95 [ VAR_96 ] = 256 ; } VAR_97 -> VAR_98 [ VAR_99 ] = 256 ; } VAR_100 -> VAR_101 = VAR_102 ; if ( VAR_103 -> VAR_104 == VAR_105 ) { VAR_106 -> VAR_107 = ( TYPE_5 ) METHOD_5 ( VAR_108 -> VAR_109 , VAR_110 -> VAR_111 ) ; } else { VAR_112 -> VAR_113 = 0 ; } VAR_114 -> VAR_115 = 1 ; if ( VAR_116 -> VAR_117 <= 0 ) { VAR_118 -> VAR_119 = VAR_120 ; METHOD_6 ( VAR_121 , VAR_122 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1302083compressedbytes@24fps\\n"" ""Asnoratehasbeengiven,thislimitwillbeused.\\n"" ) ; } else if ( VAR_123 -> VAR_124 > VAR_125 ) { METHOD_7 ( VAR_126 , VAR_127 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1302083compressedbytes@24fps\\n"" ""->Specifiedrateexceedsthislimit.Ratewillbeforcedto1302083bytes.\\n"" ) ; VAR_128 -> VAR_129 = VAR_130 ; } if ( VAR_131 -> VAR_132 <= 0 ) { VAR_133 -> VAR_134 = VAR_135 ; METHOD_8 ( VAR_136 , VAR_137 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1041666compressedbytes@24fps\\n"" ""Asnoratehasbeengiven,thislimitwillbeused.\\n"" ) ; } else if ( VAR_138 -> VAR_139 > VAR_140 ) { METHOD_9 ( VAR_141 , VAR_142 , ""JPEG2000Profile-3and4(2k/4kdcprofile)requires:\\n"" ""Maximum1041666compressedbytes@24fps\\n"" ""->Specifiedrateexceedsthislimit.Ratewillbeforcedto1041666bytes.\\n"" ) ; VAR_143 -> VAR_144 = VAR_145 ; } VAR_146 -> VAR_147 [ 0 ] = ( TYPE_6 ) ( VAR_148 -> VAR_149 * VAR_150 -> VAR_151 [ 0 ] . VAR_152 * VAR_153 -> VAR_154 [ 0 ] . VAR_155 * VAR_156 -> VAR_157 [ 0 ] . VAR_158 ) / ( TYPE_7 ) ( ( ( TYPE_8 ) VAR_159 -> VAR_160 ) * 8 * VAR_161 -> VAR_162 [ 0 ] . VAR_163 * VAR_164 -> VAR_165 [ 0 ] . VAR_166 ) ; }",43
44,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 = VAR_10 -> VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 , VAR_14 ; const TYPE_12 VAR_15 = VAR_16 -> VAR_17 ; TYPE_13 VAR_18 ; TYPE_14 VAR_19 ; TYPE_15 VAR_20 ; TYPE_16 * const VAR_21 = VAR_22 -> VAR_23 ; TYPE_17 * VAR_24 = VAR_25 -> VAR_26 ; TYPE_18 * VAR_27 = VAR_28 -> VAR_29 ; TYPE_19 * VAR_30 = & VAR_31 -> VAR_32 ; VAR_33 * VAR_34 ; VAR_35 * VAR_36 ; VAR_37 * VAR_38 ; TYPE_20 VAR_39 ; TYPE_21 VAR_40 ; TYPE_22 VAR_41 ; TYPE_23 VAR_42 = VAR_43 -> VAR_44 ; VAR_45 * VAR_46 ; TYPE_24 VAR_47 ; if ( VAR_48 -> VAR_49 -> VAR_50 & VAR_51 ) { METHOD_1 ( VAR_52 ) ; return 0 ; } if ( VAR_53 -> VAR_54 -> VAR_55 && ( VAR_56 & 1 ) ) { VAR_57 ++ ; } VAR_58 -> VAR_59 -> VAR_60 = 0 ; if ( VAR_61 == 1 ) { VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; if ( ! VAR_66 -> VAR_67 ) { METHOD_2 ( VAR_68 , VAR_69 , VAR_70 -> VAR_71 -> VAR_72 ) ; VAR_73 -> VAR_74 . VAR_75 = VAR_76 -> VAR_77 -> VAR_78 ; } { TYPE_25 VAR_79 , VAR_80 , VAR_81 = 0 ; VAR_82 -> VAR_83 -> VAR_84 = 0 ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; if ( VAR_94 -> VAR_95 != VAR_96 ) VAR_97 = VAR_98 -> VAR_99 -> VAR_100 + 2 ; VAR_101 = - 1 ; for ( VAR_102 = 0 ; VAR_103 < VAR_104 ; VAR_105 ++ ) { if ( VAR_106 -> VAR_107 [ VAR_108 ] . VAR_109 == VAR_110 ) { if ( VAR_111 -> VAR_112 [ VAR_113 ] . VAR_114 -> VAR_115 == VAR_116 ) { VAR_117 = VAR_118 ; break ; } } } if ( VAR_119 == - 1 ) {  return VAR_120 ;  } if ( VAR_121 -> VAR_122 == 0 ) { VAR_123 -> VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = 1 ; VAR_130 -> VAR_131 -> VAR_132 = 1 ; VAR_133 = METHOD_3 ( VAR_134 , VAR_135 , VAR_136 , VAR_137 -> VAR_138 -> VAR_139 , & VAR_140 -> VAR_141 [ VAR_142 ] ) ; if ( VAR_143 != VAR_144 ) { return VAR_145 ; } } VAR_146 -> VAR_147 [ 0 ] [ 0 ] -> VAR_148 = 0 ; VAR_149 -> VAR_150 = 0 ; { METHOD_4 ( VAR_151 , VAR_152 -> VAR_153 , & ( VAR_154 -> VAR_155 ) ) ; if ( 0 != VAR_156 -> VAR_157 . VAR_158 ) { VAR_159 -> VAR_160 = VAR_161 -> VAR_162 . VAR_163 ; } else VAR_164 -> VAR_165 = 1 ; } if ( VAR_166 -> VAR_167 == 1 ) { if ( VAR_168 -> VAR_169 == 0 ) { METHOD_5 ( VAR_170 -> VAR_171 , VAR_172 , ( TYPE_26 * ) VAR_173 , ( TYPE_27 * ) VAR_174 ) ; VAR_175 -> VAR_176 = 1 ; } if ( ( VAR_177 -> VAR_178 == 3 ) && ( ( VAR_179 -> VAR_180 == 0 ) || VAR_181 -> VAR_182 ) && ( VAR_183 -> VAR_184 == 0 ) ) { VAR_185 -> VAR_186 = 0 ; METHOD_6 ( VAR_187 -> VAR_188 , VAR_189 , ( TYPE_28 * ) VAR_190 , ( TYPE_29 * ) VAR_191 ) ; VAR_192 -> VAR_193 = 1 ; } } } VAR_194 -> VAR_195 = 0 ; } else { VAR_196 * VAR_197 ; VAR_198 = VAR_199 -> VAR_200 + VAR_201 -> VAR_202 ; if ( VAR_203 -> VAR_204 && VAR_205 == VAR_206 -> VAR_207 ) { if ( ( VAR_208 ) && ( VAR_209 -> VAR_210 & 1 ) ) { VAR_211 -> VAR_212 = VAR_213 -> VAR_214 - 1 ; VAR_215 -> VAR_216 -- ; } VAR_217 = VAR_218 -> VAR_219 ; if ( VAR_220 ) { VAR_221 = VAR_222 -> VAR_223 + VAR_224 - 1 ; } else { if ( VAR_225 -> VAR_226 ) { VAR_227 = VAR_228 -> VAR_229 ; } else { VAR_230 = VAR_231 -> VAR_232 + VAR_233 -> VAR_234 - 1 ; } } VAR_235 -> VAR_236 = VAR_237 -> VAR_238 ; VAR_239 -> VAR_240 = VAR_241 -> VAR_242 ; VAR_243 -> VAR_244 = VAR_245 -> VAR_246 ; if ( VAR_247 ) { VAR_248 -> VAR_249 = VAR_250 -> VAR_251 ; VAR_252 -> VAR_253 -- ; VAR_254 -> VAR_255 -= VAR_256 ; if ( VAR_257 -> VAR_258 == VAR_259 || VAR_260 -> VAR_261 == VAR_262 ) { VAR_263 -> METHOD_7 ( VAR_264 , VAR_265 , VAR_266 ) ; VAR_267 -> VAR_268 = VAR_269 -> VAR_270 ; } VAR_271 = VAR_272 - VAR_273 -> VAR_274 - 1 ; VAR_275 = ( ! VAR_276 ) && ( ! ( VAR_277 && ( VAR_278 & 0x01 ) ) ) ; VAR_279 = 1 ; VAR_280 = 1 ; VAR_281 -> VAR_282 = VAR_283 ; if ( VAR_284 -> VAR_285 ) { METHOD_8 ( VAR_286 , VAR_287 , VAR_288 , VAR_289 , VAR_290 , VAR_291 ) ; VAR_292 -> VAR_293 += VAR_294 ; } else { METHOD_9 ( VAR_295 , VAR_296 , VAR_297 , VAR_298 , VAR_299 , VAR_300 ) ; } VAR_301 -> VAR_302 += VAR_303 ; VAR_304 -> VAR_305 = 0 ; VAR_306 -> VAR_307 = 0 ; } if ( VAR_308 -> VAR_309 >= VAR_310 -> VAR_311 * VAR_312 -> VAR_313 ) { VAR_314 -> VAR_315 = 1 ; return 0 ; } if ( VAR_316 -> VAR_317 -> VAR_318 < ( TYPE_30 ) ( VAR_319 -> VAR_320 >> VAR_321 -> VAR_322 ) ) { VAR_323 -> VAR_324 = VAR_325 -> VAR_326 ; VAR_327 -> VAR_328 = VAR_329 -> VAR_330 ; VAR_331 -> VAR_332 ++ ; VAR_333 -> VAR_334 ++ ; } } else { VAR_335 -> VAR_336 = VAR_337 -> VAR_338 + VAR_339 -> VAR_340 ; } } { TYPE_31 VAR_341 ; TYPE_32 VAR_342 ; TYPE_33 * VAR_343 ; VAR_344 = METHOD_10 ( VAR_345 , VAR_346 -> VAR_347 ) ; VAR_348 = 2 * ( ( 2 * VAR_349 ) + 1 ) ; VAR_350 = VAR_351 * sizeof ( TYPE_34 * ) ; VAR_352 += VAR_353 * sizeof ( TYPE_35 * ) ; VAR_354 = ( TYPE_36 * ) VAR_355 -> VAR_356 ; VAR_357 += VAR_358 * VAR_359 -> VAR_360 ; VAR_361 -> VAR_362 -> VAR_363 = ( volatile TYPE_37 * * ) VAR_364 ; } VAR_365 -> VAR_366 -> VAR_367 = VAR_368 -> VAR_369 >> VAR_370 ; VAR_371 -> VAR_372 -> VAR_373 = 0 ; VAR_374 -> VAR_375 -> VAR_376 = 0 ; if ( VAR_377 -> VAR_378 -> VAR_379 ) VAR_380 -> VAR_381 = VAR_382 -> VAR_383 -> VAR_384 ; VAR_385 -> VAR_386 -> VAR_387 = VAR_388 -> VAR_389 >> VAR_390 ; VAR_391 -> VAR_392 -> VAR_393 = VAR_394 -> VAR_395 -> VAR_396 ; if ( VAR_397 -> VAR_398 ) { VAR_399 -> VAR_400 -> VAR_401 = VAR_402 -> VAR_403 ; } else { VAR_404 -> VAR_405 = VAR_406 -> VAR_407 ; } VAR_408 = VAR_409 ; VAR_410 = VAR_411 ; VAR_412 -> VAR_413 -> VAR_414 = VAR_415 ; VAR_416 -> VAR_417 -> VAR_418 = VAR_419 ; VAR_420 -> METHOD_11 = VAR_421 ; VAR_422 -> VAR_423 = VAR_424 -> VAR_425 ; VAR_426 -> VAR_427 = ( METHOD_12 ( VAR_428 -> VAR_429 -> VAR_430 - 1 , VAR_431 -> VAR_432 ) ) ; VAR_433 -> VAR_434 = ( METHOD_13 ( VAR_435 -> VAR_436 -> VAR_437 - 1 , VAR_438 -> VAR_439 ) ) ; VAR_440 -> VAR_441 <<= VAR_442 ; VAR_443 -> VAR_444 = 2 ; VAR_445 -> VAR_446 = VAR_447 -> VAR_448 ; METHOD_14 ( VAR_449 , 0 ) ; VAR_450 = VAR_451 -> VAR_452 ; VAR_453 = VAR_454 -> VAR_455 ; VAR_456 = VAR_457 ; VAR_458 = 0 ; VAR_459 = 0 ; VAR_460 = 0 ; VAR_461 = 0 ; VAR_462 = VAR_463 -> VAR_464 ; VAR_465 = VAR_466 ; while ( ! VAR_467 ) { TYPE_38 VAR_468 ; if ( VAR_469 > VAR_470 -> VAR_471 -> VAR_472 ) break ; VAR_473 = VAR_474 -> VAR_475 + VAR_476 ; VAR_477 -> VAR_478 = VAR_479 ; VAR_480 -> VAR_481 = 0 ; VAR_482 -> VAR_483 = ( VAR_484 >> VAR_485 ) ; VAR_486 = VAR_487 -> VAR_488 + VAR_489 ; VAR_490 -> VAR_491 = 0 ; VAR_492 -> VAR_493 = 1 ; VAR_494 -> VAR_495 = 0 ; if ( VAR_496 ) METHOD_15 ( VAR_497 , VAR_498 , VAR_499 , VAR_500 ) ; else METHOD_16 ( VAR_501 , VAR_502 , VAR_503 , VAR_504 ) ; if ( VAR_505 -> VAR_506 == 0 ) { METHOD_17 ( VAR_507 , VAR_508 , VAR_509 -> VAR_510 , VAR_511 -> VAR_512 ) ; } VAR_513 -> VAR_514 = 0 ; VAR_515 -> VAR_516 = 0 ; VAR_517 -> VAR_518 = VAR_519 ; VAR_520 -> VAR_521 = VAR_522 ; VAR_523 -> VAR_524 = 0 ; VAR_525 = VAR_526 -> VAR_527 ; VAR_528 -> VAR_529 = VAR_530 ; VAR_531 -> VAR_532 = 0 ; VAR_533 -> VAR_534 ++ ; METHOD_18 ( VAR_535 , VAR_536 , VAR_537 ) ; VAR_538 -> VAR_539 -> VAR_540 = VAR_541 ; VAR_542 -> VAR_543 |= VAR_544 ; VAR_545 -- ; VAR_546 -> VAR_547 = VAR_548 -> VAR_549 ; if ( VAR_550 ) { METHOD_19 ( VAR_551 , VAR_552 ) ; } VAR_553 ++ ; VAR_554 ++ ; VAR_555 ++ ; VAR_556 ++ ; VAR_557 = VAR_558 - VAR_559 -> VAR_560 - 1 ; VAR_561 = ( ! VAR_562 ) && ( ! ( VAR_563 && ( VAR_564 & 0x01 ) ) ) ; VAR_565 = ! VAR_566 ; VAR_567 = ( VAR_568 == VAR_569 -> VAR_570 ) || VAR_571 || VAR_572 ; VAR_573 = VAR_574 || VAR_575 ; VAR_576 -> VAR_577 = VAR_578 ; if ( VAR_579 ) { VAR_580 -> METHOD_20 ( VAR_581 , VAR_582 , VAR_583 ) ; VAR_584 = 0 ; VAR_585 = VAR_586 -> VAR_587 ; VAR_588 -> VAR_589 = VAR_590 -> VAR_591 ; if ( VAR_592 -> VAR_593 ) { METHOD_21 ( VAR_594 , VAR_595 , VAR_596 , VAR_597 , VAR_598 , VAR_599 ) ; VAR_600 -> VAR_601 += VAR_602 ; } else { METHOD_22 ( VAR_603 , VAR_604 , VAR_605 , VAR_606 , VAR_607 , VAR_608 ) ; } VAR_609 -> VAR_610 += VAR_611 ; if ( VAR_612 ) VAR_613 = 0 ; VAR_614 = VAR_615 ; VAR_616 -> VAR_617 = VAR_618 ; } } VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 -> VAR_623 = VAR_624 - VAR_625 -> VAR_626 -> VAR_627 ; METHOD_23 ( ""Mbsinslice:%d\\n"" , VAR_628 -> VAR_629 -> VAR_630 ) ; if ( VAR_631 -> VAR_632 != 0 ) { VAR_633 -> VAR_634 ++ ; VAR_635 -> VAR_636 ++ ; } VAR_637 -> VAR_638 = VAR_639 -> VAR_640 ; VAR_641 -> VAR_642 = VAR_643 -> VAR_644 ; if ( VAR_645 -> VAR_646 >= VAR_647 -> VAR_648 * VAR_649 -> VAR_650 ) { VAR_651 -> VAR_652 = 1 ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 = VAR_10 -> VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 , VAR_14 ; const TYPE_12 VAR_15 = VAR_16 -> VAR_17 ; TYPE_13 VAR_18 ; TYPE_14 VAR_19 ; TYPE_15 VAR_20 ; TYPE_16 * const VAR_21 = VAR_22 -> VAR_23 ; TYPE_17 * VAR_24 = VAR_25 -> VAR_26 ; TYPE_18 * VAR_27 = VAR_28 -> VAR_29 ; TYPE_19 * VAR_30 = & VAR_31 -> VAR_32 ; VAR_33 * VAR_34 ; VAR_35 * VAR_36 ; VAR_37 * VAR_38 ; TYPE_20 VAR_39 ; TYPE_21 VAR_40 ; TYPE_22 VAR_41 ; TYPE_23 VAR_42 = VAR_43 -> VAR_44 ; VAR_45 * VAR_46 ; TYPE_24 VAR_47 ; if ( VAR_48 -> VAR_49 -> VAR_50 & VAR_51 ) { METHOD_1 ( VAR_52 ) ; return 0 ; } if ( VAR_53 -> VAR_54 -> VAR_55 && ( VAR_56 & 1 ) ) { VAR_57 ++ ; } VAR_58 -> VAR_59 -> VAR_60 = 0 ; if ( VAR_61 == 1 ) { VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; if ( ! VAR_66 -> VAR_67 ) { METHOD_2 ( VAR_68 , VAR_69 , VAR_70 -> VAR_71 -> VAR_72 ) ; VAR_73 -> VAR_74 . VAR_75 = VAR_76 -> VAR_77 -> VAR_78 ; } { TYPE_25 VAR_79 , VAR_80 , VAR_81 = 0 ; VAR_82 -> VAR_83 -> VAR_84 = 0 ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; if ( VAR_94 -> VAR_95 != VAR_96 ) VAR_97 = VAR_98 -> VAR_99 -> VAR_100 + 2 ; VAR_101 = - 1 ; for ( VAR_102 = 0 ; VAR_103 < VAR_104 ; VAR_105 ++ ) { if ( VAR_106 -> VAR_107 [ VAR_108 ] . VAR_109 == VAR_110 ) { if ( VAR_111 -> VAR_112 [ VAR_113 ] . VAR_114 -> VAR_115 == VAR_116 ) { VAR_117 = VAR_118 ; break ; } } } if ( VAR_119 == - 1 ) { return VAR_653 ; } if ( VAR_121 -> VAR_122 == 0 ) { VAR_123 -> VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = 1 ; VAR_130 -> VAR_131 -> VAR_132 = 1 ; VAR_133 = METHOD_3 ( VAR_134 , VAR_135 , VAR_136 , VAR_137 -> VAR_138 -> VAR_139 , & VAR_140 -> VAR_141 [ VAR_142 ] ) ; if ( VAR_143 != VAR_144 ) { return VAR_145 ; } } VAR_146 -> VAR_147 [ 0 ] [ 0 ] -> VAR_148 = 0 ; VAR_149 -> VAR_150 = 0 ; { METHOD_4 ( VAR_151 , VAR_152 -> VAR_153 , & ( VAR_154 -> VAR_155 ) ) ; if ( 0 != VAR_156 -> VAR_157 . VAR_158 ) { VAR_159 -> VAR_160 = VAR_161 -> VAR_162 . VAR_163 ; } else VAR_164 -> VAR_165 = 1 ; } if ( VAR_166 -> VAR_167 == 1 ) { if ( VAR_168 -> VAR_169 == 0 ) { METHOD_5 ( VAR_170 -> VAR_171 , VAR_172 , ( TYPE_26 * ) VAR_173 , ( TYPE_27 * ) VAR_174 ) ; VAR_175 -> VAR_176 = 1 ; } if ( ( VAR_177 -> VAR_178 == 3 ) && ( ( VAR_179 -> VAR_180 == 0 ) || VAR_181 -> VAR_182 ) && ( VAR_183 -> VAR_184 == 0 ) ) { VAR_185 -> VAR_186 = 0 ; METHOD_6 ( VAR_187 -> VAR_188 , VAR_189 , ( TYPE_28 * ) VAR_190 , ( TYPE_29 * ) VAR_191 ) ; VAR_192 -> VAR_193 = 1 ; } } } VAR_194 -> VAR_195 = 0 ; } else { VAR_196 * VAR_197 ; VAR_198 = VAR_199 -> VAR_200 + VAR_201 -> VAR_202 ; if ( VAR_203 -> VAR_204 && VAR_205 == VAR_206 -> VAR_207 ) { if ( ( VAR_208 ) && ( VAR_209 -> VAR_210 & 1 ) ) { VAR_211 -> VAR_212 = VAR_213 -> VAR_214 - 1 ; VAR_215 -> VAR_216 -- ; } VAR_217 = VAR_218 -> VAR_219 ; if ( VAR_220 ) { VAR_221 = VAR_222 -> VAR_223 + VAR_224 - 1 ; } else { if ( VAR_225 -> VAR_226 ) { VAR_227 = VAR_228 -> VAR_229 ; } else { VAR_230 = VAR_231 -> VAR_232 + VAR_233 -> VAR_234 - 1 ; } } VAR_235 -> VAR_236 = VAR_237 -> VAR_238 ; VAR_239 -> VAR_240 = VAR_241 -> VAR_242 ; VAR_243 -> VAR_244 = VAR_245 -> VAR_246 ; if ( VAR_247 ) { VAR_248 -> VAR_249 = VAR_250 -> VAR_251 ; VAR_252 -> VAR_253 -- ; VAR_254 -> VAR_255 -= VAR_256 ; if ( VAR_257 -> VAR_258 == VAR_259 || VAR_260 -> VAR_261 == VAR_262 ) { VAR_263 -> METHOD_7 ( VAR_264 , VAR_265 , VAR_266 ) ; VAR_267 -> VAR_268 = VAR_269 -> VAR_270 ; } VAR_271 = VAR_272 - VAR_273 -> VAR_274 - 1 ; VAR_275 = ( ! VAR_276 ) && ( ! ( VAR_277 && ( VAR_278 & 0x01 ) ) ) ; VAR_279 = 1 ; VAR_280 = 1 ; VAR_281 -> VAR_282 = VAR_283 ; if ( VAR_284 -> VAR_285 ) { METHOD_8 ( VAR_286 , VAR_287 , VAR_288 , VAR_289 , VAR_290 , VAR_291 ) ; VAR_292 -> VAR_293 += VAR_294 ; } else { METHOD_9 ( VAR_295 , VAR_296 , VAR_297 , VAR_298 , VAR_299 , VAR_300 ) ; } VAR_301 -> VAR_302 += VAR_303 ; VAR_304 -> VAR_305 = 0 ; VAR_306 -> VAR_307 = 0 ; } if ( VAR_308 -> VAR_309 >= VAR_310 -> VAR_311 * VAR_312 -> VAR_313 ) { VAR_314 -> VAR_315 = 1 ; return 0 ; } if ( VAR_316 -> VAR_317 -> VAR_318 < ( TYPE_30 ) ( VAR_319 -> VAR_320 >> VAR_321 -> VAR_322 ) ) { VAR_323 -> VAR_324 = VAR_325 -> VAR_326 ; VAR_327 -> VAR_328 = VAR_329 -> VAR_330 ; VAR_331 -> VAR_332 ++ ; VAR_333 -> VAR_334 ++ ; } } else { VAR_335 -> VAR_336 = VAR_337 -> VAR_338 + VAR_339 -> VAR_340 ; } } { TYPE_31 VAR_341 ; TYPE_32 VAR_342 ; TYPE_33 * VAR_343 ; VAR_344 = METHOD_10 ( VAR_345 , VAR_346 -> VAR_347 ) ; VAR_348 = 2 * ( ( 2 * VAR_349 ) + 1 ) ; VAR_350 = VAR_351 * sizeof ( TYPE_34 * ) ; VAR_352 += VAR_353 * sizeof ( TYPE_35 * ) ; VAR_354 = ( TYPE_36 * ) VAR_355 -> VAR_356 ; VAR_357 += VAR_358 * VAR_359 -> VAR_360 ; VAR_361 -> VAR_362 -> VAR_363 = ( volatile TYPE_37 * * ) VAR_364 ; } VAR_365 -> VAR_366 -> VAR_367 = VAR_368 -> VAR_369 >> VAR_370 ; VAR_371 -> VAR_372 -> VAR_373 = 0 ; VAR_374 -> VAR_375 -> VAR_376 = 0 ; if ( VAR_377 -> VAR_378 -> VAR_379 ) VAR_380 -> VAR_381 = VAR_382 -> VAR_383 -> VAR_384 ; VAR_385 -> VAR_386 -> VAR_387 = VAR_388 -> VAR_389 >> VAR_390 ; VAR_391 -> VAR_392 -> VAR_393 = VAR_394 -> VAR_395 -> VAR_396 ; if ( VAR_397 -> VAR_398 ) { VAR_399 -> VAR_400 -> VAR_401 = VAR_402 -> VAR_403 ; } else { VAR_404 -> VAR_405 = VAR_406 -> VAR_407 ; } VAR_408 = VAR_409 ; VAR_410 = VAR_411 ; VAR_412 -> VAR_413 -> VAR_414 = VAR_415 ; VAR_416 -> VAR_417 -> VAR_418 = VAR_419 ; VAR_420 -> METHOD_11 = VAR_421 ; VAR_422 -> VAR_423 = VAR_424 -> VAR_425 ; VAR_426 -> VAR_427 = ( METHOD_12 ( VAR_428 -> VAR_429 -> VAR_430 - 1 , VAR_431 -> VAR_432 ) ) ; VAR_433 -> VAR_434 = ( METHOD_13 ( VAR_435 -> VAR_436 -> VAR_437 - 1 , VAR_438 -> VAR_439 ) ) ; VAR_440 -> VAR_441 <<= VAR_442 ; VAR_443 -> VAR_444 = 2 ; VAR_445 -> VAR_446 = VAR_447 -> VAR_448 ; METHOD_14 ( VAR_449 , 0 ) ; VAR_450 = VAR_451 -> VAR_452 ; VAR_453 = VAR_454 -> VAR_455 ; VAR_456 = VAR_457 ; VAR_458 = 0 ; VAR_459 = 0 ; VAR_460 = 0 ; VAR_461 = 0 ; VAR_462 = VAR_463 -> VAR_464 ; VAR_465 = VAR_466 ; while ( ! VAR_467 ) { TYPE_38 VAR_468 ; if ( VAR_469 > VAR_470 -> VAR_471 -> VAR_472 ) break ; VAR_473 = VAR_474 -> VAR_475 + VAR_476 ; VAR_477 -> VAR_478 = VAR_479 ; VAR_480 -> VAR_481 = 0 ; VAR_482 -> VAR_483 = ( VAR_484 >> VAR_485 ) ; VAR_486 = VAR_487 -> VAR_488 + VAR_489 ; VAR_490 -> VAR_491 = 0 ; VAR_492 -> VAR_493 = 1 ; VAR_494 -> VAR_495 = 0 ; if ( VAR_496 ) METHOD_15 ( VAR_497 , VAR_498 , VAR_499 , VAR_500 ) ; else METHOD_16 ( VAR_501 , VAR_502 , VAR_503 , VAR_504 ) ; if ( VAR_505 -> VAR_506 == 0 ) { METHOD_17 ( VAR_507 , VAR_508 , VAR_509 -> VAR_510 , VAR_511 -> VAR_512 ) ; } VAR_513 -> VAR_514 = 0 ; VAR_515 -> VAR_516 = 0 ; VAR_517 -> VAR_518 = VAR_519 ; VAR_520 -> VAR_521 = VAR_522 ; VAR_523 -> VAR_524 = 0 ; VAR_525 = VAR_526 -> VAR_527 ; VAR_528 -> VAR_529 = VAR_530 ; VAR_531 -> VAR_532 = 0 ; VAR_533 -> VAR_534 ++ ; METHOD_18 ( VAR_535 , VAR_536 , VAR_537 ) ; VAR_538 -> VAR_539 -> VAR_540 = VAR_541 ; VAR_542 -> VAR_543 |= VAR_544 ; VAR_545 -- ; VAR_546 -> VAR_547 = VAR_548 -> VAR_549 ; if ( VAR_550 ) { METHOD_19 ( VAR_551 , VAR_552 ) ; } VAR_553 ++ ; VAR_554 ++ ; VAR_555 ++ ; VAR_556 ++ ; VAR_557 = VAR_558 - VAR_559 -> VAR_560 - 1 ; VAR_561 = ( ! VAR_562 ) && ( ! ( VAR_563 && ( VAR_564 & 0x01 ) ) ) ; VAR_565 = ! VAR_566 ; VAR_567 = ( VAR_568 == VAR_569 -> VAR_570 ) || VAR_571 || VAR_572 ; VAR_573 = VAR_574 || VAR_575 ; VAR_576 -> VAR_577 = VAR_578 ; if ( VAR_579 ) { VAR_580 -> METHOD_20 ( VAR_581 , VAR_582 , VAR_583 ) ; VAR_584 = 0 ; VAR_585 = VAR_586 -> VAR_587 ; VAR_588 -> VAR_589 = VAR_590 -> VAR_591 ; if ( VAR_592 -> VAR_593 ) { METHOD_21 ( VAR_594 , VAR_595 , VAR_596 , VAR_597 , VAR_598 , VAR_599 ) ; VAR_600 -> VAR_601 += VAR_602 ; } else { METHOD_22 ( VAR_603 , VAR_604 , VAR_605 , VAR_606 , VAR_607 , VAR_608 ) ; } VAR_609 -> VAR_610 += VAR_611 ; if ( VAR_612 ) VAR_613 = 0 ; VAR_614 = VAR_615 ; VAR_616 -> VAR_617 = VAR_618 ; } } VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 -> VAR_623 = VAR_624 - VAR_625 -> VAR_626 -> VAR_627 ; METHOD_23 ( ""Mbsinslice:%d\\n"" , VAR_628 -> VAR_629 -> VAR_630 ) ; if ( VAR_631 -> VAR_632 != 0 ) { VAR_633 -> VAR_634 ++ ; VAR_635 -> VAR_636 ++ ; } VAR_637 -> VAR_638 = VAR_639 -> VAR_640 ; VAR_641 -> VAR_642 = VAR_643 -> VAR_644 ; if ( VAR_645 -> VAR_646 >= VAR_647 -> VAR_648 * VAR_649 -> VAR_650 ) { VAR_651 -> VAR_652 = 1 ; } return 0 ; }",44
45,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 = VAR_5 -> VAR_6 ; unsigned TYPE_4 TYPE_5 VAR_7 ; unsigned TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 ) ; if ( VAR_18 < 28 ) return - 1 ; VAR_19 -> VAR_20 = VAR_21 ; VAR_22 = ( TYPE_11 ) METHOD_2 ( VAR_23 ) ; METHOD_3 ( VAR_24 , VAR_25 , ""NSVNSVfchunk_size%u\\n"" , VAR_26 ) ; METHOD_4 ( VAR_27 , VAR_28 , ""NSVNSVffile_size%u\\n"" , VAR_29 ) ; VAR_30 -> VAR_31 = VAR_32 = METHOD_5 ( VAR_33 ) ; METHOD_6 ( VAR_34 , VAR_35 , ""NSVNSVfduration%"" PRId64 ""ms\\n"" , VAR_36 ) ; VAR_37 = METHOD_7 ( VAR_38 ) ; VAR_39 = METHOD_8 ( VAR_40 ) ; VAR_41 = METHOD_9 ( VAR_42 ) ; METHOD_10 ( VAR_43 , VAR_44 , ""NSVNSVfinfo-stringssize:%d,tableentries:%d,bis%d\\n"" , VAR_45 , VAR_46 , VAR_47 ) ; if ( METHOD_11 ( VAR_48 ) ) return - 1 ; METHOD_12 ( VAR_49 , VAR_50 , ""NSVgotheader;filepos%"" PRId64 ""\\n"" , METHOD_13 ( VAR_51 ) ) ; if ( VAR_52 > 0 ) { TYPE_12 * VAR_53 ; TYPE_13 * VAR_54 , * VAR_55 ; TYPE_14 * VAR_56 , * VAR_57 ; TYPE_15 VAR_58 ; VAR_59 = VAR_60 = METHOD_14 ( ( TYPE_16 ) VAR_61 + 1 ) ; if ( ! VAR_62 ) return METHOD_15 ( VAR_63 ) ; VAR_64 = VAR_65 + VAR_66 ; METHOD_16 ( VAR_67 , VAR_68 , VAR_69 ) ; while ( VAR_70 < VAR_71 ) { while ( * VAR_72 == '' ) VAR_73 ++ ; if ( VAR_74 >= VAR_75 - 2 ) break ; VAR_76 = VAR_77 ; VAR_78 = METHOD_17 ( VAR_79 , '=' ) ; if ( ! VAR_80 || VAR_81 >= VAR_82 - 2 ) break ; * VAR_83 ++ = '\\0' ; VAR_84 = * VAR_85 ++ ; VAR_86 = VAR_87 ; VAR_88 = METHOD_18 ( VAR_89 , VAR_90 ) ; if ( ! VAR_91 || VAR_92 >= VAR_93 ) break ; * VAR_94 ++ = '\\0' ; METHOD_19 ( VAR_95 , VAR_96 , ""NSVNSVfINFO:%s=\'%s\'\\n"" , VAR_97 , VAR_98 ) ; METHOD_20 ( & VAR_99 -> VAR_100 , VAR_101 , VAR_102 , 0 ) ; } METHOD_21 ( VAR_103 ) ; } if ( METHOD_22 ( VAR_104 ) ) return - 1 ; METHOD_23 ( VAR_105 , VAR_106 , ""NSVgotinfos;filepos%"" PRId64 ""\\n"" , METHOD_24 ( VAR_107 ) ) ; if ( VAR_108 > 0 ) { TYPE_17 VAR_109 ; VAR_110 -> VAR_111 = VAR_112 ; if ( ( unsigned ) VAR_113 >= VAR_114 / sizeof ( TYPE_18 ) ) return - 1 ; VAR_115 -> VAR_116 = METHOD_25 ( ( unsigned ) VAR_117 , sizeof ( TYPE_19 ) ) ; if ( ! VAR_118 -> VAR_119 ) return METHOD_26 ( VAR_120 ) ;  for ( VAR_121 = 0 ; VAR_122 < VAR_123 ; VAR_124 ++ )   VAR_125 -> VAR_126 [ VAR_127 ] = METHOD_27 ( VAR_128 ) + VAR_129 ;  if ( VAR_130 > VAR_131 && METHOD_28 ( VAR_132 ) == METHOD_29 ( 'T' , 'O' , 'C' , '2' ) ) { VAR_133 -> VAR_134 = METHOD_30 ( ( unsigned ) VAR_135 , sizeof ( TYPE_20 ) ) ; if ( ! VAR_136 -> VAR_137 ) return METHOD_31 ( VAR_138 ) ; for ( VAR_139 = 0 ; VAR_140 < VAR_141 ; VAR_142 ++ ) { VAR_143 -> VAR_144 [ VAR_145 ] = METHOD_32 ( VAR_146 ) ; } } } METHOD_33 ( VAR_147 , VAR_148 , ""NSVgotindex;filepos%"" PRId64 ""\\n"" , METHOD_34 ( VAR_149 ) ) ; METHOD_35 ( VAR_150 , VAR_151 -> VAR_152 + VAR_153 , VAR_154 ) ; if ( METHOD_36 ( VAR_155 ) ) return - 1 ; VAR_156 -> VAR_157 = VAR_158 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 = VAR_5 -> VAR_6 ; unsigned TYPE_4 TYPE_5 VAR_7 ; unsigned TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 ) ; if ( VAR_18 < 28 ) return - 1 ; VAR_19 -> VAR_20 = VAR_21 ; VAR_22 = ( TYPE_11 ) METHOD_2 ( VAR_23 ) ; METHOD_3 ( VAR_24 , VAR_25 , ""NSVNSVfchunk_size%u\\n"" , VAR_26 ) ; METHOD_4 ( VAR_27 , VAR_28 , ""NSVNSVffile_size%u\\n"" , VAR_29 ) ; VAR_30 -> VAR_31 = VAR_32 = METHOD_5 ( VAR_33 ) ; METHOD_6 ( VAR_34 , VAR_35 , ""NSVNSVfduration%"" PRId64 ""ms\\n"" , VAR_36 ) ; VAR_37 = METHOD_7 ( VAR_38 ) ; VAR_39 = METHOD_8 ( VAR_40 ) ; VAR_41 = METHOD_9 ( VAR_42 ) ; METHOD_10 ( VAR_43 , VAR_44 , ""NSVNSVfinfo-stringssize:%d,tableentries:%d,bis%d\\n"" , VAR_45 , VAR_46 , VAR_47 ) ; if ( METHOD_11 ( VAR_48 ) ) return - 1 ; METHOD_12 ( VAR_49 , VAR_50 , ""NSVgotheader;filepos%"" PRId64 ""\\n"" , METHOD_13 ( VAR_51 ) ) ; if ( VAR_52 > 0 ) { TYPE_12 * VAR_53 ; TYPE_13 * VAR_54 , * VAR_55 ; TYPE_14 * VAR_56 , * VAR_57 ; TYPE_15 VAR_58 ; VAR_59 = VAR_60 = METHOD_14 ( ( TYPE_16 ) VAR_61 + 1 ) ; if ( ! VAR_62 ) return METHOD_15 ( VAR_63 ) ; VAR_64 = VAR_65 + VAR_66 ; METHOD_16 ( VAR_67 , VAR_68 , VAR_69 ) ; while ( VAR_70 < VAR_71 ) { while ( * VAR_72 == '' ) VAR_73 ++ ; if ( VAR_74 >= VAR_75 - 2 ) break ; VAR_76 = VAR_77 ; VAR_78 = METHOD_17 ( VAR_79 , '=' ) ; if ( ! VAR_80 || VAR_81 >= VAR_82 - 2 ) break ; * VAR_83 ++ = '\\0' ; VAR_84 = * VAR_85 ++ ; VAR_86 = VAR_87 ; VAR_88 = METHOD_18 ( VAR_89 , VAR_90 ) ; if ( ! VAR_91 || VAR_92 >= VAR_93 ) break ; * VAR_94 ++ = '\\0' ; METHOD_19 ( VAR_95 , VAR_96 , ""NSVNSVfINFO:%s=\'%s\'\\n"" , VAR_97 , VAR_98 ) ; METHOD_20 ( & VAR_99 -> VAR_100 , VAR_101 , VAR_102 , 0 ) ; } METHOD_21 ( VAR_103 ) ; } if ( METHOD_22 ( VAR_104 ) ) return - 1 ; METHOD_23 ( VAR_105 , VAR_106 , ""NSVgotinfos;filepos%"" PRId64 ""\\n"" , METHOD_24 ( VAR_107 ) ) ; if ( VAR_108 > 0 ) { TYPE_17 VAR_109 ; VAR_110 -> VAR_111 = VAR_112 ; if ( ( unsigned ) VAR_113 >= VAR_114 / sizeof ( TYPE_18 ) ) return - 1 ; VAR_115 -> VAR_116 = METHOD_25 ( ( unsigned ) VAR_117 , sizeof ( TYPE_19 ) ) ; if ( ! VAR_118 -> VAR_119 ) return METHOD_26 ( VAR_120 ) ; for ( VAR_121 = 0 ; VAR_122 < VAR_123 ; VAR_124 ++ ) VAR_125 -> VAR_126 [ VAR_127 ] = METHOD_27 ( VAR_128 ) + VAR_129 ; if ( VAR_130 > VAR_131 && METHOD_28 ( VAR_132 ) == METHOD_29 ( 'T' , 'O' , 'C' , '2' ) ) { VAR_133 -> VAR_134 = METHOD_30 ( ( unsigned ) VAR_135 , sizeof ( TYPE_20 ) ) ; if ( ! VAR_136 -> VAR_137 ) return METHOD_31 ( VAR_138 ) ; for ( VAR_139 = 0 ; VAR_140 < VAR_141 ; VAR_142 ++ ) { VAR_143 -> VAR_144 [ VAR_145 ] = METHOD_32 ( VAR_146 ) ; } } } METHOD_33 ( VAR_147 , VAR_148 , ""NSVgotindex;filepos%"" PRId64 ""\\n"" , METHOD_34 ( VAR_149 ) ) ; METHOD_35 ( VAR_150 , VAR_151 -> VAR_152 + VAR_153 , VAR_154 ) ; if ( METHOD_36 ( VAR_155 ) ) return - 1 ; VAR_156 -> VAR_157 = VAR_158 ; return 0 ; }",45
46,"const TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { const TYPE_2 * VAR_1 ; switch ( VAR_2 ) { METHOD_1 ( VAR_3 ) case VAR_4 : VAR_5 = VAR_6 ; break ; METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_8 ) ; METHOD_4 ( VAR_9 ) ; METHOD_5 ( VAR_10 ) ; METHOD_6 ( VAR_11 ) ; METHOD_7 ( VAR_12 ) ; METHOD_8 ( VAR_13 ) ; METHOD_9 ( VAR_14 ) ; METHOD_10 ( VAR_15 ) ; METHOD_11 ( VAR_16 ) ; METHOD_12 ( VAR_17 ) ; METHOD_13 ( VAR_18 ) ; METHOD_14 ( VAR_19 ) ; METHOD_15 ( VAR_20 ) ;  METHOD_16  default : switch ( VAR_21 & 0xff ) { METHOD_17 ( VAR_22 , VAR_23 ) case VAR_24 : VAR_25 = VAR_26 ; break METHOD_18 ( 10 , VAR_27 ) ; METHOD_19 default : VAR_28 = ""<unknownvariable>"" ; break ; } break ; } return VAR_29 ; }","const TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { const TYPE_2 * VAR_1 ; switch ( VAR_2 ) { METHOD_1 ( VAR_3 ) case VAR_4 : VAR_5 = VAR_6 ; break ; METHOD_2 ( VAR_7 ) ; METHOD_3 ( VAR_8 ) ; METHOD_4 ( VAR_9 ) ; METHOD_5 ( VAR_10 ) ; METHOD_6 ( VAR_11 ) ; METHOD_7 ( VAR_12 ) ; METHOD_8 ( VAR_13 ) ; METHOD_9 ( VAR_14 ) ; METHOD_10 ( VAR_15 ) ; METHOD_11 ( VAR_16 ) ; METHOD_12 ( VAR_17 ) ; METHOD_13 ( VAR_18 ) ; METHOD_14 ( VAR_19 ) ; METHOD_15 ( VAR_20 ) ; METHOD_19 ( VAR_30 ) ; METHOD_19 ( VAR_31 ) ; METHOD_19 ( VAR_32 ) ; METHOD_19 ( VAR_33 ) ; METHOD_19 ( VAR_34 ) ; METHOD_16 default : switch ( VAR_21 & 0xff ) { METHOD_17 ( VAR_22 , VAR_23 ) case VAR_24 : VAR_25 = VAR_26 ; break METHOD_18 ( 10 , VAR_27 ) ; METHOD_19 default : VAR_28 = ""<unknownvariable>"" ; break ; } break ; } return VAR_29 ; }",46
47,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , TYPE_5 TYPE_6 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; TYPE_7 VAR_8 , VAR_9 ; TYPE_8 VAR_10 ; struct STRUCT_OR_UNION_6 * VAR_11 ; if ( VAR_12 != VAR_13 )  return VAR_14 . METHOD_1 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ;  if ( METHOD_2 ( VAR_20 , VAR_21 ) ) return - VAR_22 ; VAR_23 = min_t ( unsigned TYPE_9 , VAR_24 , sizeof ( TYPE_10 ) ) ; if ( VAR_25 < 0 ) return - VAR_26 ; VAR_27 = - VAR_28 ; if ( VAR_29 -> VAR_30 == VAR_31 ) goto VAR_32 ; VAR_33 = - VAR_34 ; VAR_35 = METHOD_3 ( VAR_36 ) ; if ( VAR_37 == VAR_38 ) goto VAR_39 ; VAR_40 = METHOD_4 ( VAR_41 ) ; if ( ( VAR_42 -> VAR_43 == 0 ) && ( VAR_44 -> VAR_45 == 0 ) ) { VAR_46 = - VAR_47 ; VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; if ( VAR_51 == VAR_52 ) goto VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 , VAR_56 , VAR_57 , & VAR_58 ) ; METHOD_7 ( VAR_59 -> VAR_60 ) ; } else VAR_61 = METHOD_8 ( VAR_62 , VAR_63 , VAR_64 , & VAR_65 ) ; VAR_66 = - VAR_67 ; if ( METHOD_9 ( VAR_68 , VAR_69 ) ) goto VAR_70 ; if ( METHOD_10 ( ( TYPE_11 TYPE_12 * ) VAR_71 , & VAR_72 , VAR_73 ) ) goto VAR_74 ; VAR_75 = 0 ; VAR_76 : METHOD_11 ( VAR_77 ) ; VAR_78 : return VAR_79 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , TYPE_5 TYPE_6 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; TYPE_7 VAR_8 , VAR_9 ; TYPE_8 VAR_10 ; struct STRUCT_OR_UNION_6 * VAR_11 ; if ( VAR_12 != VAR_13 ) return - VAR_26 ; if ( METHOD_2 ( VAR_20 , VAR_21 ) ) return - VAR_22 ; VAR_23 = min_t ( unsigned TYPE_9 , VAR_24 , sizeof ( TYPE_10 ) ) ; if ( VAR_25 < 0 ) return - VAR_26 ; VAR_27 = - VAR_28 ; if ( VAR_29 -> VAR_30 == VAR_31 ) goto VAR_32 ; VAR_33 = - VAR_34 ; VAR_35 = METHOD_3 ( VAR_36 ) ; if ( VAR_37 == VAR_38 ) goto VAR_39 ; VAR_40 = METHOD_4 ( VAR_41 ) ; if ( ( VAR_42 -> VAR_43 == 0 ) && ( VAR_44 -> VAR_45 == 0 ) ) { VAR_46 = - VAR_47 ; VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; if ( VAR_51 == VAR_52 ) goto VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 , VAR_56 , VAR_57 , & VAR_58 ) ; METHOD_7 ( VAR_59 -> VAR_60 ) ; } else VAR_61 = METHOD_8 ( VAR_62 , VAR_63 , VAR_64 , & VAR_65 ) ; VAR_66 = - VAR_67 ; if ( METHOD_9 ( VAR_68 , VAR_69 ) ) goto VAR_70 ; if ( METHOD_10 ( ( TYPE_11 TYPE_12 * ) VAR_71 , & VAR_72 , VAR_73 ) ) goto VAR_74 ; VAR_75 = 0 ; VAR_76 : METHOD_11 ( VAR_77 ) ; VAR_78 : return VAR_79 ; }",47
48,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 = 0 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; METHOD_1 ( VAR_6 [ 0 ] ) ; VAR_7 = VAR_8 ; if ( METHOD_2 ( ""my"" , VAR_9 , & VAR_10 , & VAR_11 ) ) METHOD_3 ( 1 ) ; VAR_12 = VAR_13 ; METHOD_4 ( & VAR_14 , & VAR_15 ) ; VAR_16 = 0 ; if ( VAR_17 ) { TYPE_7 * VAR_18 = VAR_19 [ VAR_20 - 1 ] , * VAR_21 ; for ( VAR_22 = VAR_23 ; * VAR_24 ; VAR_25 ++ , VAR_26 ++ ) { switch ( * VAR_27 ) { case '*' : * VAR_28 = '%' ; VAR_29 = 1 ; break ; case '?' : * VAR_30 = '_' ; VAR_31 = 1 ; break ; case '%' : case '_' : VAR_32 = 1 ; break ; case '\\\\' : VAR_33 ++ ; default : break ; } * VAR_34 = * VAR_35 ; } * VAR_36 = * VAR_37 ; } if ( VAR_38 ) VAR_39 = VAR_40 [ -- VAR_41 ] ; else if ( VAR_42 == 3 ) VAR_43 = VAR_44 [ -- VAR_45 ] ; if ( VAR_46 > 2 ) { METHOD_5 ( VAR_47 , ""%s:Toomanyarguments\\n"" , VAR_48 ) ; METHOD_6 ( 1 ) ; } METHOD_7 ( & VAR_49 ) ; if ( VAR_50 ) METHOD_8 ( & VAR_51 , VAR_52 , VAR_53 ) ;  TYPE_8 TYPE_9  if ( VAR_54 ) { METHOD_9 ( & VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 ) ; METHOD_10 ( & VAR_61 , VAR_62 , VAR_63 ) ; METHOD_11 ( & VAR_64 , VAR_65 , VAR_66 ) ; } METHOD_12 ( & VAR_67 , VAR_68 , ( TYPE_10 * ) & VAR_69 ) ; if ( VAR_70 ) METHOD_13 ( & VAR_71 , VAR_72 , ( TYPE_11 * ) & VAR_73 ) ; if ( VAR_74 ) METHOD_14 ( & VAR_75 , VAR_76 , VAR_77 ) ; if METHOD_15 ( VAR_78 ) && ! METHOD_16 ( VAR_79 ) if ( VAR_80 ) METHOD_17 ( & VAR_81 , VAR_82 , VAR_83 ) ; METHOD_18 ( & VAR_84 , VAR_85 , VAR_86 ) ; if ( VAR_87 && * VAR_88 ) METHOD_19 ( & VAR_89 , VAR_90 , VAR_91 ) ; if ( VAR_92 && * VAR_93 ) METHOD_20 ( & VAR_94 , VAR_95 , VAR_96 ) ; METHOD_21 ( & VAR_97 , VAR_98 , 0 ) ; METHOD_22 ( & VAR_99 , VAR_100 , ""program_name"" , ""mysqlshow"" ) ; if ( ! ( METHOD_23 ( & VAR_101 , VAR_102 , VAR_103 , VAR_104 , ( VAR_105 ) ? """" : VAR_106 [ 0 ] , VAR_107 , VAR_108 , 0 ) ) ) { METHOD_24 ( VAR_109 , ""%s:%s\\n"" , VAR_110 , METHOD_25 ( & VAR_111 ) ) ; METHOD_26 ( 1 ) ; } VAR_112 . VAR_113 = 1 ; switch ( VAR_114 ) { case 0 : VAR_115 = METHOD_27 ( & VAR_116 , VAR_117 ) ; break ; case 1 : if ( VAR_118 ) VAR_119 = METHOD_28 ( & VAR_120 , VAR_121 [ 0 ] , VAR_122 ) ; else VAR_123 = METHOD_29 ( & VAR_124 , VAR_125 [ 0 ] , VAR_126 ) ; break ; default : if ( VAR_127 && ! VAR_128 ) VAR_129 = METHOD_30 ( & VAR_130 , VAR_131 [ 0 ] , VAR_132 [ 1 ] ) ; else VAR_133 = METHOD_31 ( & VAR_134 , VAR_135 [ 0 ] , VAR_136 [ 1 ] , VAR_137 ) ; break ; } METHOD_32 ( & VAR_138 ) ; METHOD_33 ( VAR_139 ) ; if METHOD_34 ( VAR_140 ) && ! METHOD_35 ( VAR_141 ) METHOD_36 ( VAR_142 ) ; METHOD_37 ( VAR_143 ) ; METHOD_38 ( VAR_144 ? 1 : 0 ) ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 = 0 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; METHOD_1 ( VAR_6 [ 0 ] ) ; VAR_7 = VAR_8 ; if ( METHOD_2 ( ""my"" , VAR_9 , & VAR_10 , & VAR_11 ) ) METHOD_3 ( 1 ) ; VAR_12 = VAR_13 ; METHOD_4 ( & VAR_14 , & VAR_15 ) ; VAR_16 = 0 ; if ( VAR_17 ) { TYPE_7 * VAR_18 = VAR_19 [ VAR_20 - 1 ] , * VAR_21 ; for ( VAR_22 = VAR_23 ; * VAR_24 ; VAR_25 ++ , VAR_26 ++ ) { switch ( * VAR_27 ) { case '*' : * VAR_28 = '%' ; VAR_29 = 1 ; break ; case '?' : * VAR_30 = '_' ; VAR_31 = 1 ; break ; case '%' : case '_' : VAR_32 = 1 ; break ; case '\\\\' : VAR_33 ++ ; default : break ; } * VAR_34 = * VAR_35 ; } * VAR_36 = * VAR_37 ; } if ( VAR_38 ) VAR_39 = VAR_40 [ -- VAR_41 ] ; else if ( VAR_42 == 3 ) VAR_43 = VAR_44 [ -- VAR_45 ] ; if ( VAR_46 > 2 ) { METHOD_5 ( VAR_47 , ""%s:Toomanyarguments\\n"" , VAR_48 ) ; METHOD_6 ( 1 ) ; } METHOD_7 ( & VAR_49 ) ; if ( VAR_50 ) METHOD_8 ( & VAR_51 , VAR_52 , VAR_53 ) ; TYPE_8 TYPE_9 if ( VAR_54 ) { METHOD_9 ( & VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 ) ; METHOD_10 ( & VAR_61 , VAR_62 , VAR_63 ) ; METHOD_11 ( & VAR_64 , VAR_65 , VAR_66 ) ; } METHOD_12 ( & VAR_67 , VAR_68 , ( TYPE_10 * ) & VAR_69 ) ; if ( VAR_70 ) METHOD_13 ( & VAR_71 , VAR_72 , ( TYPE_11 * ) & VAR_73 ) ; if ( VAR_74 ) METHOD_14 ( & VAR_75 , VAR_76 , VAR_77 ) ; if METHOD_15 ( VAR_78 ) && ! METHOD_16 ( VAR_79 ) if ( VAR_80 ) METHOD_17 ( & VAR_81 , VAR_82 , VAR_83 ) ; METHOD_18 ( & VAR_84 , VAR_85 , VAR_86 ) ; if ( VAR_87 && * VAR_88 ) METHOD_19 ( & VAR_89 , VAR_90 , VAR_91 ) ; if ( VAR_92 && * VAR_93 ) METHOD_20 ( & VAR_94 , VAR_95 , VAR_96 ) ; METHOD_21 ( & VAR_97 , VAR_98 , 0 ) ; METHOD_22 ( & VAR_99 , VAR_100 , ""program_name"" , ""mysqlshow"" ) ; if ( ! ( METHOD_23 ( & VAR_101 , VAR_102 , VAR_103 , VAR_104 , ( VAR_105 ) ? """" : VAR_106 [ 0 ] , VAR_107 , VAR_108 , 0 ) ) ) { METHOD_24 ( VAR_109 , ""%s:%s\\n"" , VAR_110 , METHOD_25 ( & VAR_111 ) ) ; METHOD_26 ( 1 ) ; } VAR_112 . VAR_113 = 1 ; switch ( VAR_114 ) { case 0 : VAR_115 = METHOD_27 ( & VAR_116 , VAR_117 ) ; break ; case 1 : if ( VAR_118 ) VAR_119 = METHOD_28 ( & VAR_120 , VAR_121 [ 0 ] , VAR_122 ) ; else VAR_123 = METHOD_29 ( & VAR_124 , VAR_125 [ 0 ] , VAR_126 ) ; break ; default : if ( VAR_127 && ! VAR_128 ) VAR_129 = METHOD_30 ( & VAR_130 , VAR_131 [ 0 ] , VAR_132 [ 1 ] ) ; else VAR_133 = METHOD_31 ( & VAR_134 , VAR_135 [ 0 ] , VAR_136 [ 1 ] , VAR_137 ) ; break ; } METHOD_32 ( & VAR_138 ) ; METHOD_33 ( VAR_139 ) ; if METHOD_34 ( VAR_140 ) && ! METHOD_35 ( VAR_141 ) METHOD_36 ( VAR_142 ) ; METHOD_37 ( VAR_143 ) ; METHOD_38 ( VAR_144 ? 1 : 0 ) ; return 0 ; }",48
49,"struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; TYPE_1 VAR_9 , VAR_10 ; TYPE_2 VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 = VAR_13 ; if ( METHOD_1 ( VAR_14 ) -> VAR_15 == 0 ) { METHOD_2 ( ""payloadlen=0\\n"" ) ; return VAR_16 ; } if ( METHOD_3 ( VAR_17 , & VAR_18 , & VAR_19 , & VAR_20 ) < 0 ) return VAR_21 ; VAR_22 = METHOD_4 ( VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) { METHOD_5 ( ""Can\'tcloneskb\\n"" ) ; return VAR_27 ; } METHOD_6 ( VAR_28 ) -> VAR_29 = VAR_30 ; if ( ! METHOD_7 ( VAR_31 , VAR_32 + sizeof ( * VAR_33 ) ) ) { METHOD_8 ( ""messageistooshort.\\n"" ) ; goto VAR_34 ; } METHOD_9 ( VAR_35 , VAR_36 ) ; VAR_37 = METHOD_10 ( VAR_38 ) ; VAR_39 = ( struct STRUCT_OR_UNION_8 * ) METHOD_11 ( VAR_40 ) ;  if ( ! ( VAR_41 -> VAR_42 & METHOD_12 ( 0xFFF9 ) ) ) {  METHOD_13 ( ""Invalidfragmentoffset\\n"" ) ; goto VAR_43 ; } if ( METHOD_14 ( & VAR_44 . VAR_45 ) > VAR_46 . VAR_47 ) METHOD_15 ( ) ; VAR_48 = METHOD_16 ( VAR_49 -> VAR_50 , VAR_51 , & VAR_52 -> VAR_53 , & VAR_54 -> VAR_55 ) ; if ( VAR_56 == VAR_57 ) { METHOD_17 ( ""Can\'tfindandcan\'tcreatenewqueue\\n"" ) ; goto VAR_58 ; } METHOD_18 ( & VAR_59 -> VAR_60 . VAR_61 ) ; if ( STRUCT_OR_UNION_9 ( VAR_62 , VAR_63 , VAR_64 , VAR_65 ) < 0 ) { METHOD_19 ( & VAR_66 -> VAR_67 . VAR_68 ) ; METHOD_20 ( ""Can\'tinsertskbtoqueue\\n"" ) ; METHOD_21 ( VAR_69 ) ; goto VAR_70 ; } if ( VAR_71 -> VAR_72 . VAR_73 == ( VAR_74 | VAR_75 ) && VAR_76 -> VAR_77 . VAR_78 == VAR_79 -> VAR_80 . VAR_81 ) { VAR_82 = METHOD_22 ( VAR_83 , VAR_84 ) ; if ( VAR_85 == VAR_86 ) METHOD_23 ( ""Can\'treassemblefragmentedpackets\\n"" ) ; } METHOD_24 ( & VAR_87 -> VAR_88 . VAR_89 ) ; METHOD_25 ( VAR_90 ) ; return VAR_91 ; VAR_92 : METHOD_26 ( VAR_93 ) ; return VAR_94 ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; TYPE_1 VAR_9 , VAR_10 ; TYPE_2 VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 = VAR_13 ; if ( METHOD_14 ( & VAR_44 . VAR_45 ) > VAR_46 . VAR_47 ) METHOD_15 ( ) ; VAR_48 = METHOD_16 ( VAR_49 -> VAR_50 , VAR_51 , & VAR_52 -> VAR_53 , & VAR_54 -> VAR_55 ) ; if ( VAR_56 == VAR_57 ) { METHOD_17 ( ""Can\'tfindandcan\'tcreatenewqueue\\n"" ) ; goto VAR_58 ; } METHOD_18 ( & VAR_59 -> VAR_60 . VAR_61 ) ; if ( STRUCT_OR_UNION_9 ( VAR_62 , VAR_63 , VAR_64 , VAR_65 ) < 0 ) { METHOD_19 ( & VAR_66 -> VAR_67 . VAR_68 ) ; METHOD_20 ( ""Can\'tinsertskbtoqueue\\n"" ) ; METHOD_21 ( VAR_69 ) ; goto VAR_70 ; } if ( VAR_71 -> VAR_72 . VAR_73 == ( VAR_74 | VAR_75 ) && VAR_76 -> VAR_77 . VAR_78 == VAR_79 -> VAR_80 . VAR_81 ) { VAR_82 = METHOD_22 ( VAR_83 , VAR_84 ) ; if ( VAR_85 == VAR_86 ) METHOD_23 ( ""Can\'treassemblefragmentedpackets\\n"" ) ; } METHOD_24 ( & VAR_87 -> VAR_88 . VAR_89 ) ; METHOD_25 ( VAR_90 ) ; return VAR_91 ; VAR_92 : METHOD_26 ( VAR_93 ) ; return VAR_94 ; }",49
50,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 ) - VAR_7 ; if ( VAR_8 > 1536 ) { METHOD_2 ( & VAR_9 -> VAR_10 ) ; return VAR_11 ; } if ( ! VAR_12 -> VAR_13 ) { METHOD_3 ( & VAR_14 -> VAR_15 ) ; return VAR_16 ; }  if ( METHOD_4 ( VAR_17 , VAR_18 ) & VAR_19 )  { return VAR_20 ; }  METHOD_5 ( VAR_21 , VAR_22 , VAR_23 ) ;  METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ;  METHOD_7 ( VAR_28 , VAR_29 , VAR_30 ) ;   METHOD_8 ( VAR_31 , VAR_32 , VAR_33 ) ;   METHOD_9 ( VAR_34 , VAR_35 , VAR_36 | VAR_37 ) ;   METHOD_10 ( VAR_38 , VAR_39 , VAR_40 ) ;  return VAR_41 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 ) - VAR_7 ; if ( VAR_8 > 1536 ) { METHOD_2 ( & VAR_9 -> VAR_10 ) ; return VAR_11 ; } if ( ! VAR_12 -> VAR_13 ) { METHOD_3 ( & VAR_14 -> VAR_15 ) ; return VAR_16 ; } if ( METHOD_4 ( VAR_17 , VAR_18 ) & VAR_19 ) { return VAR_20 ; } METHOD_5 ( VAR_21 , VAR_22 , VAR_23 ) ; METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ; METHOD_7 ( VAR_28 , VAR_29 , VAR_30 ) ; METHOD_8 ( VAR_31 , VAR_32 , VAR_33 ) ; METHOD_9 ( VAR_34 , VAR_35 , VAR_36 | VAR_37 ) ; METHOD_10 ( VAR_38 , VAR_42 , VAR_43 ) ; return VAR_41 ; }",50
51,"TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 * VAR_2 = METHOD_1 (   sizeof ( TYPE_4 ) + sizeof ( TYPE_5 ) * ( VAR_3 + VAR_4 ) ) ;  if ( VAR_5 ) { VAR_6 -> VAR_7 = sizeof ( TYPE_6 ) ; VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; } return VAR_14 ; }","TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( sizeof ( TYPE_4 ) + sizeof ( TYPE_5 ) * ( VAR_3 + VAR_4 ) ) ; if ( VAR_5 ) { VAR_6 -> VAR_7 = sizeof ( TYPE_6 ) ; VAR_8 -> VAR_9 = VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; } return VAR_14 ; }",51
52,"static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 VAR_2 )  { if ( VAR_3 -> VAR_4 < METHOD_1 ( VAR_5 -> VAR_6 ) - 3 )   { VAR_7 -> VAR_8 [ VAR_9 -> VAR_10 ++ ] = ( VAR_11 >> 16 ) ;   VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = ( VAR_16 >> 8 ) ;   VAR_17 -> VAR_18 [ VAR_19 -> VAR_20 ++ ] = VAR_21 ;   } ;  }","static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 -> VAR_4 < METHOD_1 ( VAR_5 -> VAR_6 ) - 3 ) { VAR_7 -> VAR_8 [ VAR_9 -> VAR_10 ++ ] = ( VAR_11 >> 16 ) ; VAR_12 -> VAR_13 [ VAR_14 -> VAR_15 ++ ] = ( VAR_16 >> 8 ) ; VAR_17 -> VAR_18 [ VAR_19 -> VAR_18 . indx ++ ] = VAR_21 ; }",52
53,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { VAR_4 * VAR_5 ; unsigned TYPE_4 VAR_6 ; TYPE_5 VAR_7 = 0 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; do { VAR_11 : VAR_12 = METHOD_2 ( VAR_13 , VAR_14 ) ; if ( METHOD_3 ( * VAR_15 ) ) { if ( VAR_16 -> METHOD_4 ) VAR_17 = VAR_18 -> METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; if ( VAR_22 ) break ; continue ; } if ( VAR_23 -> METHOD_6 ) VAR_24 = VAR_25 -> METHOD_7 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; if ( VAR_30 ) break ; if ( ! VAR_31 -> VAR_32 ) continue ; METHOD_8 ( VAR_33 -> VAR_34 , VAR_35 ) ;  if ( METHOD_9 ( VAR_36 ) )  goto VAR_37 ; VAR_38 = METHOD_10 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; if ( VAR_43 ) break ; } while ( VAR_44 ++ , VAR_45 = VAR_46 , VAR_47 != VAR_48 ) ; return VAR_49 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , unsigned TYPE_3 VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 ) { VAR_4 * VAR_5 ; unsigned TYPE_4 VAR_6 ; TYPE_5 VAR_7 = 0 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; do { VAR_11 : VAR_12 = METHOD_2 ( VAR_13 , VAR_14 ) ; if ( METHOD_3 ( * VAR_15 ) ) { if ( VAR_16 -> METHOD_4 ) VAR_17 = VAR_18 -> METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; if ( VAR_22 ) break ; continue ; } if ( VAR_23 -> METHOD_6 ) VAR_24 = VAR_25 -> METHOD_7 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; if ( VAR_30 ) break ; if ( ! VAR_31 -> VAR_32 ) continue ; METHOD_8 ( VAR_33 -> VAR_34 , VAR_35 ) ; if ( METHOD_9 ( VAR_36 ) ) goto VAR_37 ; VAR_38 = METHOD_10 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; if ( VAR_43 ) break ; } while ( VAR_44 ++ , VAR_45 = VAR_46 , VAR_47 != VAR_48 ) ; return VAR_49 ; }",53
54,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 = & VAR_4 -> VAR_5 ; METHOD_1 ( VAR_6 , VAR_7 ) ; METHOD_2 ( VAR_8 , 10 ) ; VAR_9 -> VAR_10 = ( TYPE_2 ) METHOD_3 ( VAR_11 , 3 ) ; if ( ( VAR_12 -> VAR_13 < VAR_14 ) || ( VAR_15 -> VAR_16 > VAR_17 ) ) { METHOD_4 ( VAR_18 , VAR_19 ) ; return VAR_20 ; } METHOD_5 ( VAR_21 , 16 ) ; if ( VAR_22 -> VAR_23 == VAR_24 || VAR_25 -> VAR_26 == VAR_27 ) { VAR_28 -> VAR_29 = METHOD_6 ( VAR_30 ) ; VAR_31 -> VAR_32 = METHOD_7 ( VAR_33 , 3 ) ; } if ( VAR_34 -> VAR_35 == VAR_36 ) { VAR_37 -> VAR_38 = METHOD_8 ( VAR_39 ) ; VAR_40 -> VAR_41 = METHOD_9 ( VAR_42 , 3 ) ; } if ( VAR_43 -> VAR_44 == 0 ) { VAR_45 -> VAR_46 [ 0 ] [ 0 ] = VAR_47 -> VAR_48 [ 0 ] [ 1 ] = VAR_49 -> VAR_50 ; VAR_51 -> VAR_52 [ 1 ] [ 0 ] = VAR_53 -> VAR_54 [ 1 ] [ 1 ] = VAR_55 -> VAR_56 ; }  while ( METHOD_10 ( VAR_57 , 1 ) == 1 )  { METHOD_11 ( VAR_58 , 9 ) ; } METHOD_12 ( VAR_59 ) ; METHOD_13 ( VAR_60 ) ; return ( TYPE_3 ) VAR_61 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; VAR_3 = & VAR_4 -> VAR_5 ; METHOD_1 ( VAR_6 , VAR_7 ) ; METHOD_2 ( VAR_8 , 10 ) ; VAR_9 -> VAR_10 = ( TYPE_2 ) METHOD_3 ( VAR_11 , 3 ) ; if ( ( VAR_12 -> VAR_13 < VAR_14 ) || ( VAR_15 -> VAR_16 > VAR_17 ) ) { METHOD_4 ( VAR_18 , VAR_19 ) ; return VAR_20 ; } METHOD_5 ( VAR_21 , 16 ) ; if ( VAR_22 -> VAR_23 == VAR_24 || VAR_25 -> VAR_26 == VAR_27 ) { VAR_28 -> VAR_29 = METHOD_6 ( VAR_30 ) ; VAR_31 -> VAR_32 = METHOD_7 ( VAR_33 , 3 ) ; } if ( VAR_34 -> VAR_35 == VAR_36 ) { VAR_37 -> VAR_38 = METHOD_8 ( VAR_39 ) ; VAR_40 -> VAR_41 = METHOD_9 ( VAR_42 , 3 ) ; } if ( VAR_43 -> VAR_44 == 0 ) { VAR_45 -> VAR_46 [ 0 ] [ 0 ] = VAR_47 -> VAR_48 [ 0 ] [ 1 ] = VAR_49 -> VAR_50 ; VAR_51 -> VAR_52 [ 1 ] [ 0 ] = VAR_53 -> VAR_54 [ 1 ] [ 1 ] = VAR_55 -> VAR_56 ; } while ( METHOD_10 ( VAR_57 , 1 ) == 1 && VAR_59 -> VAR_62 < VAR_59 -> VAR_63 ) { METHOD_11 ( VAR_58 , 9 ) ; } METHOD_12 ( VAR_59 ) ; METHOD_13 ( VAR_60 ) ; return ( TYPE_3 ) VAR_61 ; }",54
55,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const struct STRUCT_OR_UNION_0 * VAR_4 , const struct STRUCT_OR_UNION_1 * VAR_5 ) { TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 ; TYPE_7 VAR_11 ; TYPE_8 VAR_12 ; if ( VAR_13 < 3 ) { METHOD_1 ( ( VAR_14 , ""[|llc]"" ) ) ; METHOD_2 ( ( const TYPE_9 * ) VAR_15 , VAR_16 ) ; return ( VAR_17 ) ; } if ( VAR_18 < 3 ) { METHOD_3 ( ( VAR_19 , ""[|llc]"" ) ) ; METHOD_4 ( ( const TYPE_10 * ) VAR_20 , VAR_21 ) ; return ( VAR_22 ) ; } VAR_23 = * VAR_24 ; VAR_25 = * ( VAR_26 + 1 ) ; VAR_27 = * ( VAR_28 + 2 ) ; if ( ( VAR_29 & VAR_30 ) == VAR_31 ) { VAR_32 = 1 ; VAR_33 = 3 ; } else { if ( VAR_34 < 4 ) { METHOD_5 ( ( VAR_35 , ""[|llc]"" ) ) ; METHOD_6 ( ( const TYPE_11 * ) VAR_36 , VAR_37 ) ; return ( VAR_38 ) ; } if ( VAR_39 < 4 ) { METHOD_7 ( ( VAR_40 , ""[|llc]"" ) ) ; METHOD_8 ( ( const TYPE_12 * ) VAR_41 , VAR_42 ) ; return ( VAR_43 ) ; } VAR_44 = METHOD_9 ( VAR_45 + 2 ) ; VAR_46 = 0 ; VAR_47 = 4 ; } if ( VAR_48 == VAR_49 && VAR_50 == VAR_51 ) { if ( VAR_52 -> VAR_53 ) METHOD_10 ( ( VAR_54 , ""IPX802.3:"" ) ) ; METHOD_11 ( VAR_55 , VAR_56 , VAR_57 ) ; return ( 0 ) ; } VAR_58 = VAR_59 & ~ VAR_60 ; VAR_61 = VAR_62 & ~ VAR_63 ; if ( VAR_64 -> VAR_65 ) { METHOD_12 ( ( VAR_66 , ""LLC,dsap%s(0x%02x)%s,ssap%s(0x%02x)%s"" , METHOD_13 ( VAR_67 , ""Unknown"" , VAR_68 ) , VAR_69 , METHOD_14 ( VAR_70 , ""Unknown"" , VAR_71 & VAR_72 ) , METHOD_15 ( VAR_73 , ""Unknown"" , VAR_74 ) , VAR_75 , METHOD_16 ( VAR_76 , ""Unknown"" , VAR_77 & VAR_78 ) ) ) ; if ( VAR_79 ) { METHOD_17 ( ( VAR_80 , "",ctrl0x%02x:"" , VAR_81 ) ) ; } else { METHOD_18 ( ( VAR_82 , "",ctrl0x%04x:"" , VAR_83 ) ) ; } } VAR_84 += VAR_85 ; VAR_86 -= VAR_87 ; VAR_88 -= VAR_89 ; if ( VAR_90 == VAR_91 && VAR_92 == VAR_93 && VAR_94 == VAR_95 ) { if ( ! METHOD_19 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 , VAR_101 , 2 ) ) { return ( - ( VAR_102 + 5 ) ) ; } else return ( VAR_103 + 5 ) ; } if ( VAR_104 == VAR_105 && VAR_106 == VAR_107 && VAR_108 == VAR_109 ) { METHOD_20 ( VAR_110 , VAR_111 , VAR_112 ) ; return ( VAR_113 ) ; } if ( VAR_114 == VAR_115 && VAR_116 == VAR_117 && VAR_118 == VAR_119 ) { METHOD_21 ( VAR_120 , VAR_121 , VAR_122 ) ; return ( VAR_123 ) ; } if ( VAR_124 == VAR_125 && VAR_126 == VAR_127 && VAR_128 == VAR_129 ) { if ( VAR_130 -> VAR_131 ) METHOD_22 ( ( VAR_132 , ""IPX802.2:"" ) ) ; METHOD_23 ( VAR_133 , VAR_134 , VAR_135 ) ; return ( VAR_136 ) ; } TYPE_13 TYPE_14 if ( VAR_137 == VAR_138 && VAR_139 == VAR_140 && ( ! ( VAR_141 & VAR_142 ) || VAR_143 == VAR_144 ) ) { METHOD_24 ( VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ; return ( VAR_149 ) ; } if ( VAR_150 == VAR_151 && VAR_152 == VAR_153 && VAR_154 == VAR_155 ) {  METHOD_25 ( VAR_156 , VAR_157 , VAR_158 , VAR_159 ) ;  return ( VAR_160 ) ; } if ( ! VAR_161 -> VAR_162 ) { if ( VAR_163 == VAR_164 ) { if ( VAR_165 == VAR_166 || VAR_167 == VAR_168 ) METHOD_26 ( ( VAR_169 , ""%s"" , METHOD_27 ( VAR_170 , ""UnknownDSAP0x%02x"" , VAR_171 ) ) ) ; else METHOD_28 ( ( VAR_172 , ""%s>%s%s"" , ( VAR_173 -> VAR_174 ) ( VAR_175 , VAR_176 -> VAR_177 ) , ( VAR_178 -> VAR_179 ) ( VAR_180 , VAR_181 -> VAR_182 ) , METHOD_29 ( VAR_183 , ""UnknownDSAP0x%02x"" , VAR_184 ) ) ) ; } else { if ( VAR_185 == VAR_186 || VAR_187 == VAR_188 ) METHOD_30 ( ( VAR_189 , ""%s>%s"" , METHOD_31 ( VAR_190 , ""UnknownSSAP0x%02x"" , VAR_191 ) , METHOD_32 ( VAR_192 , ""UnknownDSAP0x%02x"" , VAR_193 ) ) ) ; else METHOD_33 ( ( VAR_194 , ""%s%s>%s%s"" , ( VAR_195 -> VAR_196 ) ( VAR_197 , VAR_198 -> VAR_199 ) , METHOD_34 ( VAR_200 , ""UnknownSSAP0x%02x"" , VAR_201 ) , ( VAR_202 -> VAR_203 ) ( VAR_204 , VAR_205 -> VAR_206 ) , METHOD_35 ( VAR_207 , ""UnknownDSAP0x%02x"" , VAR_208 ) ) ) ; } } if ( VAR_209 ) { METHOD_36 ( ( VAR_210 , ""Unnumbered,%s,Flags[%s],length%u"" , METHOD_37 ( VAR_211 , ""%02x"" , METHOD_38 ( VAR_212 ) ) , METHOD_39 ( VAR_213 , ""?"" , ( VAR_214 & VAR_215 ) | ( VAR_216 & VAR_217 ) ) , VAR_218 + VAR_219 ) ) ; if ( ( VAR_220 & ~ VAR_221 ) == VAR_222 ) { if ( VAR_223 == 0 ) { return ( VAR_224 ) ; } if ( VAR_225 < 1 ) { METHOD_40 ( ( VAR_226 , ""[|llc]"" ) ) ; if ( VAR_227 > 0 ) METHOD_41 ( ( const TYPE_15 * ) VAR_228 , VAR_229 ) ; return ( VAR_230 ) ; } if ( * VAR_231 == VAR_232 ) { if ( VAR_233 < 3 || VAR_234 < 3 ) { METHOD_42 ( ( VAR_235 , ""[|llc]"" ) ) ; if ( VAR_236 > 0 ) METHOD_43 ( ( const TYPE_16 * ) VAR_237 , VAR_238 ) ; } else METHOD_44 ( ( VAR_239 , "":%02x%02x"" , VAR_240 [ 1 ] , VAR_241 [ 2 ] ) ) ; return ( VAR_242 ) ; } } } else { if ( ( VAR_243 & VAR_244 ) == VAR_245 ) { METHOD_45 ( ( VAR_246 , ""Supervisory,%s,rcvseq%u,Flags[%s],length%u"" , METHOD_46 ( VAR_247 , ""?"" , METHOD_47 ( VAR_248 ) ) , METHOD_48 ( VAR_249 ) , METHOD_49 ( VAR_250 , ""?"" , ( VAR_251 & VAR_252 ) | ( VAR_253 & VAR_254 ) ) , VAR_255 + VAR_256 ) ) ; return ( VAR_257 ) ; } else { METHOD_50 ( ( VAR_258 , ""Information,sendseq%u,rcvseq%u,Flags[%s],length%u"" , METHOD_51 ( VAR_259 ) , METHOD_52 ( VAR_260 ) , METHOD_53 ( VAR_261 , ""?"" , ( VAR_262 & VAR_263 ) | ( VAR_264 & VAR_265 ) ) , VAR_266 + VAR_267 ) ) ; } } return ( - VAR_268 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const struct STRUCT_OR_UNION_0 * VAR_4 , const struct STRUCT_OR_UNION_1 * VAR_5 ) { TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 ; TYPE_7 VAR_11 ; TYPE_8 VAR_12 ; if ( VAR_13 < 3 ) { METHOD_1 ( ( VAR_14 , ""[|llc]"" ) ) ; METHOD_2 ( ( const TYPE_9 * ) VAR_15 , VAR_16 ) ; return ( VAR_17 ) ; } if ( VAR_18 < 3 ) { METHOD_3 ( ( VAR_19 , ""[|llc]"" ) ) ; METHOD_4 ( ( const TYPE_10 * ) VAR_20 , VAR_21 ) ; return ( VAR_22 ) ; } VAR_23 = * VAR_24 ; VAR_25 = * ( VAR_26 + 1 ) ; VAR_27 = * ( VAR_28 + 2 ) ; if ( ( VAR_29 & VAR_30 ) == VAR_31 ) { VAR_32 = 1 ; VAR_33 = 3 ; } else { if ( VAR_34 < 4 ) { METHOD_5 ( ( VAR_35 , ""[|llc]"" ) ) ; METHOD_6 ( ( const TYPE_11 * ) VAR_36 , VAR_37 ) ; return ( VAR_38 ) ; } if ( VAR_39 < 4 ) { METHOD_7 ( ( VAR_40 , ""[|llc]"" ) ) ; METHOD_8 ( ( const TYPE_12 * ) VAR_41 , VAR_42 ) ; return ( VAR_43 ) ; } VAR_44 = METHOD_9 ( VAR_45 + 2 ) ; VAR_46 = 0 ; VAR_47 = 4 ; } if ( VAR_48 == VAR_49 && VAR_50 == VAR_51 ) { if ( VAR_52 -> VAR_53 ) METHOD_10 ( ( VAR_54 , ""IPX802.3:"" ) ) ; METHOD_11 ( VAR_55 , VAR_56 , VAR_57 ) ; return ( 0 ) ; } VAR_58 = VAR_59 & ~ VAR_60 ; VAR_61 = VAR_62 & ~ VAR_63 ; if ( VAR_64 -> VAR_65 ) { METHOD_12 ( ( VAR_66 , ""LLC,dsap%s(0x%02x)%s,ssap%s(0x%02x)%s"" , METHOD_13 ( VAR_67 , ""Unknown"" , VAR_68 ) , VAR_69 , METHOD_14 ( VAR_70 , ""Unknown"" , VAR_71 & VAR_72 ) , METHOD_15 ( VAR_73 , ""Unknown"" , VAR_74 ) , VAR_75 , METHOD_16 ( VAR_76 , ""Unknown"" , VAR_77 & VAR_78 ) ) ) ; if ( VAR_79 ) { METHOD_17 ( ( VAR_80 , "",ctrl0x%02x:"" , VAR_81 ) ) ; } else { METHOD_18 ( ( VAR_82 , "",ctrl0x%04x:"" , VAR_83 ) ) ; } } VAR_84 += VAR_85 ; VAR_86 -= VAR_87 ; VAR_88 -= VAR_89 ; if ( VAR_90 == VAR_91 && VAR_92 == VAR_93 && VAR_94 == VAR_95 ) { if ( ! METHOD_19 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 , VAR_101 , 2 ) ) { return ( - ( VAR_102 + 5 ) ) ; } else return ( VAR_103 + 5 ) ; } if ( VAR_104 == VAR_105 && VAR_106 == VAR_107 && VAR_108 == VAR_109 ) { METHOD_20 ( VAR_110 , VAR_111 , VAR_112 ) ; return ( VAR_113 ) ; } if ( VAR_114 == VAR_115 && VAR_116 == VAR_117 && VAR_118 == VAR_119 ) { METHOD_21 ( VAR_120 , VAR_121 , VAR_122 ) ; return ( VAR_123 ) ; } if ( VAR_124 == VAR_125 && VAR_126 == VAR_127 && VAR_128 == VAR_129 ) { if ( VAR_130 -> VAR_131 ) METHOD_22 ( ( VAR_132 , ""IPX802.2:"" ) ) ; METHOD_23 ( VAR_133 , VAR_134 , VAR_135 ) ; return ( VAR_136 ) ; } TYPE_13 TYPE_14 if ( VAR_137 == VAR_138 && VAR_139 == VAR_140 && ( ! ( VAR_141 & VAR_142 ) || VAR_143 == VAR_144 ) ) { METHOD_24 ( VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ; return ( VAR_149 ) ; } if ( VAR_150 == VAR_151 && VAR_152 == VAR_153 && VAR_154 == VAR_155 ) { METHOD_25 ( VAR_156 , VAR_157 , VAR_158 , VAR_159 ) ; return ( VAR_160 ) ; } if ( ! VAR_161 -> VAR_162 ) { if ( VAR_163 == VAR_164 ) { if ( VAR_165 == VAR_166 || VAR_167 == VAR_168 ) METHOD_26 ( ( VAR_169 , ""%s"" , METHOD_27 ( VAR_170 , ""UnknownDSAP0x%02x"" , VAR_171 ) ) ) ; else METHOD_28 ( ( VAR_172 , ""%s>%s%s"" , ( VAR_173 -> VAR_174 ) ( VAR_175 , VAR_176 -> VAR_177 ) , ( VAR_178 -> VAR_179 ) ( VAR_180 , VAR_181 -> VAR_182 ) , METHOD_29 ( VAR_183 , ""UnknownDSAP0x%02x"" , VAR_184 ) ) ) ; } else { if ( VAR_185 == VAR_186 || VAR_187 == VAR_188 ) METHOD_30 ( ( VAR_189 , ""%s>%s"" , METHOD_31 ( VAR_190 , ""UnknownSSAP0x%02x"" , VAR_191 ) , METHOD_32 ( VAR_192 , ""UnknownDSAP0x%02x"" , VAR_193 ) ) ) ; else METHOD_33 ( ( VAR_194 , ""%s%s>%s%s"" , ( VAR_195 -> VAR_196 ) ( VAR_197 , VAR_198 -> VAR_199 ) , METHOD_34 ( VAR_200 , ""UnknownSSAP0x%02x"" , VAR_201 ) , ( VAR_202 -> VAR_203 ) ( VAR_204 , VAR_205 -> VAR_206 ) , METHOD_35 ( VAR_207 , ""UnknownDSAP0x%02x"" , VAR_208 ) ) ) ; } } if ( VAR_209 ) { METHOD_36 ( ( VAR_210 , ""Unnumbered,%s,Flags[%s],length%u"" , METHOD_37 ( VAR_211 , ""%02x"" , METHOD_38 ( VAR_212 ) ) , METHOD_39 ( VAR_213 , ""?"" , ( VAR_214 & VAR_215 ) | ( VAR_216 & VAR_217 ) ) , VAR_218 + VAR_219 ) ) ; if ( ( VAR_220 & ~ VAR_221 ) == VAR_222 ) { if ( VAR_223 == 0 ) { return ( VAR_224 ) ; } if ( VAR_225 < 1 ) { METHOD_40 ( ( VAR_226 , ""[|llc]"" ) ) ; if ( VAR_227 > 0 ) METHOD_41 ( ( const TYPE_15 * ) VAR_228 , VAR_229 ) ; return ( VAR_230 ) ; } if ( * VAR_231 == VAR_232 ) { if ( VAR_233 < 3 || VAR_234 < 3 ) { METHOD_42 ( ( VAR_235 , ""[|llc]"" ) ) ; if ( VAR_236 > 0 ) METHOD_43 ( ( const TYPE_16 * ) VAR_237 , VAR_238 ) ; } else METHOD_44 ( ( VAR_239 , "":%02x%02x"" , VAR_240 [ 1 ] , VAR_241 [ 2 ] ) ) ; return ( VAR_242 ) ; } } } else { if ( ( VAR_243 & VAR_244 ) == VAR_245 ) { METHOD_45 ( ( VAR_246 , ""Supervisory,%s,rcvseq%u,Flags[%s],length%u"" , METHOD_46 ( VAR_247 , ""?"" , METHOD_47 ( VAR_248 ) ) , METHOD_48 ( VAR_249 ) , METHOD_49 ( VAR_250 , ""?"" , ( VAR_251 & VAR_252 ) | ( VAR_253 & VAR_254 ) ) , VAR_255 + VAR_256 ) ) ; return ( VAR_257 ) ; } else { METHOD_50 ( ( VAR_258 , ""Information,sendseq%u,rcvseq%u,Flags[%s],length%u"" , METHOD_51 ( VAR_259 ) , METHOD_52 ( VAR_260 ) , METHOD_53 ( VAR_261 , ""?"" , ( VAR_262 & VAR_263 ) | ( VAR_264 & VAR_265 ) ) , VAR_266 + VAR_267 ) ) ; } } return ( - VAR_268 ) ; }",55
56,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 , VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; VAR_5 * VAR_6 ; unsigned TYPE_4 * VAR_7 = VAR_8 ; unsigned TYPE_5 VAR_9 ; VAR_10 * VAR_11 ; unsigned TYPE_6 VAR_12 ; VAR_13 = & ( VAR_14 -> VAR_15 -> VAR_16 ) ; METHOD_1 ( VAR_17 ) ; if ( METHOD_2 ( VAR_18 ) ) return 1 ; VAR_19 : if ( ( VAR_20 -> VAR_21 != VAR_22 ) || ( VAR_23 -> VAR_24 < VAR_25 ) ) { VAR_26 = METHOD_3 ( VAR_27 , VAR_28 , VAR_29 -> VAR_30 -> VAR_31 . VAR_32 , 0 ) ; if ( VAR_33 <= 0 ) return ( VAR_34 ) ; if ( VAR_35 -> VAR_36 != VAR_37 ) { VAR_38 -> VAR_39 = 0 ; goto VAR_40 ; } VAR_41 -> VAR_42 = VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; if ( VAR_47 -> METHOD_4 ) VAR_48 -> METHOD_5 ( 0 , 0 , VAR_49 , VAR_50 , VAR_51 , VAR_52 , VAR_53 -> VAR_54 ) ; VAR_55 -> VAR_56 = * ( VAR_57 ++ ) ; VAR_58 = * ( VAR_59 ++ ) ; VAR_60 = * ( VAR_61 ++ ) ; VAR_62 = ( VAR_63 << 8 ) | VAR_64 ; METHOD_6 ( VAR_65 , VAR_66 -> VAR_67 ) ; METHOD_7 ( & ( VAR_68 -> VAR_69 -> VAR_70 [ 2 ] ) , VAR_71 , 6 ) ; VAR_72 += 6 ; METHOD_8 ( VAR_73 , VAR_74 -> VAR_75 ) ; if ( ! VAR_76 -> VAR_77 ) { if ( VAR_78 != VAR_79 -> VAR_80 ) { VAR_81 -> VAR_82 = 0 ; VAR_83 -> VAR_84 = 0 ; goto VAR_85 ; } } if ( ( VAR_86 & 0xff00 ) != ( VAR_87 -> VAR_88 & 0xff00 ) ) { VAR_89 -> VAR_90 = 0 ; VAR_91 -> VAR_92 = 0 ; goto VAR_93 ; } if ( VAR_94 -> VAR_95 > VAR_96 ) { VAR_97 -> VAR_98 = 0 ; VAR_99 -> VAR_100 = 0 ; goto VAR_101 ; } } if ( VAR_102 -> VAR_103 > VAR_104 -> VAR_105 - VAR_106 ) { VAR_107 = VAR_108 -> VAR_109 ; VAR_110 = METHOD_9 ( VAR_111 , VAR_112 , VAR_113 , 1 ) ; if ( VAR_114 != VAR_115 ) { VAR_116 -> VAR_117 = 0 ; VAR_118 -> VAR_119 = 0 ; goto VAR_120 ; } } VAR_121 -> VAR_122 = VAR_123 ; VAR_124 = METHOD_10 ( VAR_125 , VAR_126 , & VAR_127 ) ; if ( VAR_128 == VAR_129 ) { VAR_130 -> VAR_131 = 0 ; VAR_132 -> VAR_133 = 0 ; goto VAR_134 ; } TYPE_7 TYPE_8 if ( ! METHOD_11 ( METHOD_12 ( VAR_135 ) ) ) { if ( ! ( VAR_136 -> VAR_137 -> VAR_138 && VAR_139 -> VAR_140 == VAR_141 &&  * VAR_142 == VAR_143 ) &&  ! METHOD_13 ( VAR_144 , VAR_145 ) ) { VAR_146 -> VAR_147 = 0 ; VAR_148 -> VAR_149 = 0 ; goto VAR_150 ; } TYPE_9 TYPE_10 } if ( VAR_151 -> VAR_152 == 0 ) goto VAR_153 ; if ( VAR_154 ) { if ( ( METHOD_14 ( VAR_155 ) || VAR_156 -> VAR_157 ) && ! VAR_158 -> VAR_159 -> VAR_160 ) { METHOD_15 ( VAR_161 , & ( VAR_162 -> VAR_163 -> VAR_164 ) , VAR_165 -> VAR_166 ) ; } VAR_167 -> VAR_168 = 0 ; VAR_169 -> VAR_170 = 0 ; goto VAR_171 ; } if ( ! METHOD_16 ( VAR_172 ) ) { VAR_173 -> VAR_174 = 0 ; VAR_175 -> VAR_176 = 0 ; goto VAR_177 ; } return ( 1 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 , VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; VAR_5 * VAR_6 ; unsigned TYPE_4 * VAR_7 = VAR_8 ; unsigned TYPE_5 VAR_9 ; VAR_10 * VAR_11 ; unsigned TYPE_6 VAR_12 ; VAR_13 = & ( VAR_14 -> VAR_15 -> VAR_16 ) ; METHOD_1 ( VAR_17 ) ; if ( METHOD_2 ( VAR_18 ) ) return 1 ; VAR_19 : if ( ( VAR_20 -> VAR_21 != VAR_22 ) || ( VAR_23 -> VAR_24 < VAR_25 ) ) { VAR_26 = METHOD_3 ( VAR_27 , VAR_28 , VAR_29 -> VAR_30 -> VAR_31 . VAR_32 , 0 ) ; if ( VAR_33 <= 0 ) return ( VAR_34 ) ; if ( VAR_35 -> VAR_36 != VAR_37 ) { VAR_38 -> VAR_39 = 0 ; goto VAR_40 ; } VAR_41 -> VAR_42 = VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; if ( VAR_47 -> METHOD_4 ) VAR_48 -> METHOD_5 ( 0 , 0 , VAR_49 , VAR_50 , VAR_51 , VAR_52 , VAR_53 -> VAR_54 ) ; VAR_55 -> VAR_56 = * ( VAR_57 ++ ) ; VAR_58 = * ( VAR_59 ++ ) ; VAR_60 = * ( VAR_61 ++ ) ; VAR_62 = ( VAR_63 << 8 ) | VAR_64 ; METHOD_6 ( VAR_65 , VAR_66 -> VAR_67 ) ; METHOD_7 ( & ( VAR_68 -> VAR_69 -> VAR_70 [ 2 ] ) , VAR_71 , 6 ) ; VAR_72 += 6 ; METHOD_8 ( VAR_73 , VAR_74 -> VAR_75 ) ; if ( ! VAR_76 -> VAR_77 ) { if ( VAR_78 != VAR_79 -> VAR_80 ) { VAR_81 -> VAR_82 = 0 ; VAR_83 -> VAR_84 = 0 ; goto VAR_85 ; } } if ( ( VAR_86 & 0xff00 ) != ( VAR_87 -> VAR_88 & 0xff00 ) ) { VAR_89 -> VAR_90 = 0 ; VAR_91 -> VAR_92 = 0 ; goto VAR_93 ; } if ( VAR_94 -> VAR_95 > VAR_96 ) { VAR_97 -> VAR_98 = 0 ; VAR_99 -> VAR_100 = 0 ; goto VAR_101 ; } } if ( VAR_102 -> VAR_103 > VAR_104 -> VAR_105 - VAR_106 ) { VAR_107 = VAR_108 -> VAR_109 ; VAR_110 = METHOD_9 ( VAR_111 , VAR_112 , VAR_113 , 1 ) ; if ( VAR_114 != VAR_115 ) { VAR_116 -> VAR_117 = 0 ; VAR_118 -> VAR_119 = 0 ; goto VAR_120 ; } } VAR_121 -> VAR_122 = VAR_123 ; VAR_124 = METHOD_10 ( VAR_125 , VAR_126 , & VAR_127 ) ; if ( VAR_128 == VAR_129 ) { VAR_130 -> VAR_131 = 0 ; VAR_132 -> VAR_133 = 0 ; goto VAR_134 ; } TYPE_7 TYPE_8 if ( ! METHOD_11 ( METHOD_12 ( VAR_135 ) ) ) { if ( ! ( VAR_136 -> VAR_137 -> VAR_138 && VAR_139 -> VAR_140 == VAR_141 && VAR_175 -> VAR_176 > VAR_106 && VAR_175 -> VAR_46 [ VAR_106 ] == VAR_143 ) && ! METHOD_13 ( VAR_144 , VAR_145 ) ) { VAR_146 -> VAR_147 = 0 ; VAR_148 -> VAR_149 = 0 ; goto VAR_150 ; } TYPE_9 TYPE_10 } if ( VAR_151 -> VAR_152 == 0 ) goto VAR_153 ; if ( VAR_154 ) { if ( ( METHOD_14 ( VAR_155 ) || VAR_156 -> VAR_157 ) && ! VAR_158 -> VAR_159 -> VAR_160 ) { METHOD_15 ( VAR_161 , & ( VAR_162 -> VAR_163 -> VAR_164 ) , VAR_165 -> VAR_166 ) ; } VAR_167 -> VAR_168 = 0 ; VAR_169 -> VAR_170 = 0 ; goto VAR_171 ; } if ( ! METHOD_16 ( VAR_172 ) ) { VAR_173 -> VAR_174 = 0 ; VAR_175 -> VAR_176 = 0 ; goto VAR_177 ; } return ( 1 ) ; }",56
57,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; TYPE_3 VAR_4 ; METHOD_1 ( VAR_5 , VAR_6 ) ; METHOD_2 ( METHOD_3 ( VAR_7 , 0 ) , VAR_8 ) ; METHOD_4 ( METHOD_5 ( VAR_9 , - 1 ) , VAR_10 ) ; VAR_11 = METHOD_6 ( VAR_12 , METHOD_7 ( VAR_13 , 1 ) ) ; if ( ! VAR_14 ) return VAR_15 ; if ( METHOD_8 ( VAR_16 ) == 3 ) { VAR_17 = VAR_18 ; VAR_19 = VAR_20 ; } else if ( METHOD_9 ( VAR_21 ) == 5 ) { VAR_22 = METHOD_10 ( VAR_23 , VAR_24 , VAR_25 , METHOD_11 ( VAR_26 ) , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ; if ( ! VAR_31 ) return VAR_32 ; VAR_33 = VAR_34 ; } else {  VAR_35 = METHOD_12 ( VAR_36 , METHOD_13 ( VAR_37 , 3 ) , VAR_38 ) ;  if ( ! VAR_39 ) return VAR_40 ; VAR_41 = VAR_42 ; } return VAR_43 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 = VAR_3 ; TYPE_3 VAR_4 ; METHOD_1 ( VAR_5 , VAR_6 ) ; METHOD_2 ( METHOD_3 ( VAR_7 , 0 ) , VAR_8 ) ; METHOD_4 ( METHOD_5 ( VAR_9 , - 1 ) , VAR_10 ) ; VAR_11 = METHOD_6 ( VAR_12 , METHOD_7 ( VAR_13 , 1 ) ) ; if ( ! VAR_14 ) return VAR_15 ; if ( METHOD_8 ( VAR_16 ) == 3 ) { VAR_17 = VAR_18 ; VAR_19 = VAR_20 ; } else if ( METHOD_9 ( VAR_21 ) == 5 ) { VAR_22 = METHOD_10 ( VAR_23 , VAR_24 , VAR_25 , METHOD_11 ( VAR_26 ) , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ; if ( ! VAR_31 ) return VAR_32 ; VAR_33 = VAR_34 ; } else { VAR_35 = METHOD_12 ( VAR_36 , METHOD_13 ( VAR_37 , 3 ) , VAR_38 ) ; if ( ! VAR_39 ) return VAR_40 ; VAR_41 = VAR_42 ; } return VAR_43 ; }",57
58,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 , * VAR_7 ; unsigned TYPE_2 VAR_8 ; TYPE_3 VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 , VAR_12 ; if ( ! VAR_13 && VAR_14 -> VAR_15 >= VAR_16 ) return - VAR_17 ; if ( VAR_18 -> VAR_19 < 1 ) return - VAR_20 ; VAR_21 = VAR_22 -> VAR_23 == 0 ? VAR_24 : ( VAR_25 -> VAR_26 & ( VAR_27 | VAR_28 | VAR_29 ) ) ; VAR_30 -> VAR_31 . VAR_32 = 0 ; METHOD_1 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_2 ( & VAR_35 -> VAR_36 ) ; VAR_37 = METHOD_3 ( VAR_38 , & VAR_39 -> VAR_40 ) ; VAR_41 = 0 ; if ( VAR_42 ) { if ( VAR_43 ) VAR_44 = METHOD_4 ( VAR_45 , VAR_46 ) ; else VAR_47 = - VAR_48 ; } else { if ( VAR_49 ) VAR_50 = - VAR_51 ; } METHOD_5 ( & VAR_52 -> VAR_53 ) ; if ( VAR_54 < 0 ) return VAR_55 ; METHOD_6 ( & VAR_56 . VAR_57 , & VAR_58 -> VAR_59 , sizeof ( VAR_60 -> VAR_61 ) ) ; VAR_62 . VAR_63 = VAR_64 -> VAR_65 ? VAR_66 -> VAR_67 : 1 ; VAR_68 |= VAR_69 ; if ( VAR_70 -> VAR_71 == VAR_72 ) VAR_73 . VAR_74 = VAR_75 ; else VAR_76 . VAR_77 = VAR_78 ; if ( VAR_79 & VAR_80 ) VAR_81 . VAR_82 = VAR_83 ; if ( VAR_84 & VAR_85 ) VAR_86 . VAR_87 = VAR_88 ; if ( VAR_89 & VAR_90 ) { VAR_91 . VAR_92 . VAR_93 = VAR_94 ; VAR_95 |= VAR_96 ; } switch ( VAR_97 -> VAR_98 ) { case VAR_99 : case VAR_100 : VAR_101 = sizeof ( TYPE_5 ) ; if ( VAR_102 -> VAR_103 > 128 ) return - VAR_104 ; break ; case VAR_105 : VAR_106 = sizeof ( TYPE_6 TYPE_7 ) ; if ( VAR_107 -> VAR_108 > 64 ) return - VAR_109 ; break ; case VAR_110 : VAR_111 = sizeof ( unsigned TYPE_8 ) ; if ( VAR_112 -> VAR_113 > 128 || VAR_114 -> VAR_115 . VAR_116 . VAR_117 == 0 ) return - VAR_118 ; break ; case VAR_119 : VAR_120 = sizeof ( unsigned TYPE_9 ) ; if ( VAR_121 -> VAR_122 > 512 ) return - VAR_123 ; break ; case VAR_124 : VAR_125 = sizeof ( struct STRUCT_OR_UNION_5 ) ; if ( VAR_126 -> VAR_127 != 1 ) return - VAR_128 ; break ; default : return - VAR_129 ; } VAR_130 *= VAR_131 -> VAR_132 ; VAR_133 = METHOD_7 ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_134 , VAR_135 ) ; if ( VAR_136 == VAR_137 ) return - VAR_138 ;  VAR_139 -> VAR_140 = * VAR_141 ;  VAR_142 -> VAR_143 . VAR_144 = 0 ; VAR_145 -> VAR_146 = ( TYPE_10 * ) VAR_147 + sizeof ( * VAR_148 ) ; VAR_149 -> VAR_150 = VAR_151 ; if ( VAR_152 -> VAR_153 . VAR_154 == VAR_155 ) { VAR_156 = METHOD_8 ( VAR_157 ) ; if ( VAR_158 < 0 ) { METHOD_9 ( VAR_159 ) ; return VAR_160 ; } } VAR_161 . VAR_162 = VAR_163 ; VAR_164 = METHOD_10 ( & VAR_165 , VAR_166 ) ; if ( VAR_167 == VAR_168 ) { METHOD_11 ( VAR_169 -> VAR_170 ) ; METHOD_12 ( VAR_171 ) ; return - VAR_172 ; } VAR_173 -> VAR_174 = VAR_175 ; for ( VAR_176 = 0 ; VAR_177 < VAR_178 -> VAR_179 ; VAR_180 ++ ) VAR_181 -> VAR_182 [ VAR_183 ] . VAR_184 = VAR_185 ; VAR_186 = METHOD_13 ( VAR_187 , VAR_188 ) ; if ( VAR_189 < 0 ) return VAR_190 ; METHOD_14 ( & VAR_191 -> VAR_192 ) ; VAR_193 -> VAR_194 ++ ; METHOD_15 ( & VAR_195 -> VAR_196 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 , * VAR_7 ; unsigned TYPE_2 VAR_8 ; TYPE_3 VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 , VAR_12 ; if ( ! VAR_13 && VAR_14 -> VAR_15 >= VAR_16 ) return - VAR_17 ; if ( VAR_18 -> VAR_19 < 1 ) return - VAR_20 ; VAR_21 = VAR_22 -> VAR_23 == 0 ? VAR_24 : ( VAR_25 -> VAR_26 & ( VAR_27 | VAR_28 | VAR_29 ) ) ; VAR_30 -> VAR_31 . VAR_32 = 0 ; METHOD_1 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_2 ( & VAR_35 -> VAR_36 ) ; VAR_37 = METHOD_3 ( VAR_38 , & VAR_39 -> VAR_40 ) ; VAR_41 = 0 ; if ( VAR_42 ) { if ( VAR_43 ) VAR_44 = METHOD_4 ( VAR_45 , VAR_46 ) ; else VAR_47 = - VAR_48 ; } else { if ( VAR_49 ) VAR_50 = - VAR_51 ; } METHOD_5 ( & VAR_52 -> VAR_53 ) ; if ( VAR_54 < 0 ) return VAR_55 ; METHOD_6 ( & VAR_56 . VAR_57 , & VAR_58 -> VAR_59 , sizeof ( VAR_60 -> VAR_61 ) ) ; VAR_62 . VAR_63 = VAR_64 -> VAR_65 ? VAR_66 -> VAR_67 : 1 ; VAR_68 |= VAR_69 ; if ( VAR_70 -> VAR_71 == VAR_72 ) VAR_73 . VAR_74 = VAR_75 ; else VAR_76 . VAR_77 = VAR_78 ; if ( VAR_79 & VAR_80 ) VAR_81 . VAR_82 = VAR_83 ; if ( VAR_84 & VAR_85 ) VAR_86 . VAR_87 = VAR_88 ; if ( VAR_89 & VAR_90 ) { VAR_91 . VAR_92 . VAR_93 = VAR_94 ; VAR_95 |= VAR_96 ; } switch ( VAR_97 -> VAR_98 ) { case VAR_99 : case VAR_100 : VAR_101 = sizeof ( TYPE_5 ) ; if ( VAR_102 -> VAR_103 > 128 ) return - VAR_104 ; break ; case VAR_105 : VAR_106 = sizeof ( TYPE_6 TYPE_7 ) ; if ( VAR_107 -> VAR_108 > 64 ) return - VAR_109 ; break ; case VAR_110 : VAR_111 = sizeof ( unsigned TYPE_8 ) ; if ( VAR_112 -> VAR_113 > 128 || VAR_114 -> VAR_115 . VAR_116 . VAR_117 == 0 ) return - VAR_118 ; break ; case VAR_119 : VAR_120 = sizeof ( unsigned TYPE_9 ) ; if ( VAR_121 -> VAR_122 > 512 ) return - VAR_123 ; break ; case VAR_124 : VAR_125 = sizeof ( struct STRUCT_OR_UNION_5 ) ; if ( VAR_126 -> VAR_127 != 1 ) return - VAR_128 ; break ; default : return - VAR_129 ; } VAR_130 *= VAR_131 -> VAR_132 ; VAR_133 = METHOD_7 ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_134 , VAR_135 ) ; if ( VAR_136 == VAR_137 ) return - VAR_138 ; VAR_139 -> VAR_140 = * VAR_141 ; VAR_142 -> VAR_143 . VAR_144 = 0 ; VAR_145 -> VAR_146 = ( TYPE_10 * ) VAR_147 + sizeof ( * VAR_148 ) ; VAR_149 -> VAR_150 = VAR_151 ; if ( VAR_152 -> VAR_153 . VAR_154 == VAR_155 ) { VAR_156 = METHOD_8 ( VAR_157 ) ; if ( VAR_158 < 0 ) { METHOD_9 ( VAR_159 ) ; return VAR_160 ; } } VAR_161 . VAR_162 = VAR_163 ; VAR_164 = METHOD_10 ( & VAR_165 , VAR_166 ) ; if ( VAR_167 == VAR_168 ) { METHOD_11 ( VAR_169 -> VAR_170 ) ; METHOD_12 ( VAR_171 ) ; return - VAR_172 ; } VAR_173 -> VAR_174 = VAR_175 ; for ( VAR_176 = 0 ; VAR_177 < VAR_178 -> VAR_179 ; VAR_180 ++ ) VAR_181 -> VAR_182 [ VAR_183 ] . VAR_184 = VAR_185 ; VAR_186 = METHOD_13 ( VAR_187 , VAR_188 ) ; if ( VAR_189 < 0 ) return VAR_190 ; METHOD_14 ( & VAR_191 -> VAR_192 ) ; VAR_193 -> VAR_194 ++ ; METHOD_15 ( & VAR_195 -> VAR_196 ) ; return 0 ; }",58
59,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 ) { TYPE_1 * VAR_2 = ( TYPE_2 * ) METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = * VAR_5 ; struct STRUCT_OR_UNION_3 * * VAR_6 ; TYPE_3 VAR_7 , VAR_8 ; VAR_9 = ( VAR_10 -> VAR_11 - METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ) / sizeof ( TYPE_4 ) ; if ( VAR_12 <= 0 ) return 0 ; if ( VAR_13 > VAR_14 ) return - VAR_15 ; if ( ! VAR_16 ) { VAR_17 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_18 ) ; if ( ! VAR_19 ) return - VAR_20 ; * VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = VAR_27 ;  }  VAR_28 = & VAR_29 -> VAR_30 [ VAR_31 -> VAR_32 ] ; if ( VAR_33 -> VAR_34 + VAR_35 > VAR_36 -> VAR_37 ) return - VAR_38 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { TYPE_5 VAR_43 = VAR_44 [ VAR_45 ] ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; if ( VAR_46 < 0 || ! ( STRUCT_OR_UNION_8 = METHOD_4 ( VAR_47 ) ) ) return - VAR_48 ; * VAR_49 ++ = STRUCT_OR_UNION_9 ; VAR_50 -> VAR_51 ++ ; }  return VAR_52 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 ) { TYPE_1 * VAR_2 = ( TYPE_2 * ) METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_2 * VAR_4 = * VAR_5 ; struct STRUCT_OR_UNION_3 * * VAR_6 ; TYPE_3 VAR_7 , VAR_8 ; VAR_9 = ( VAR_10 -> VAR_11 - METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ) / sizeof ( TYPE_4 ) ; if ( VAR_12 <= 0 ) return 0 ; if ( VAR_13 > VAR_14 ) return - VAR_15 ; if ( ! VAR_16 ) { VAR_17 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_18 ) ; if ( ! VAR_19 ) return - VAR_20 ; * VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = 0 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_50 -> VAR_53 = VAR_54 ; } VAR_28 = & VAR_29 -> VAR_30 [ VAR_31 -> VAR_32 ] ; if ( VAR_33 -> VAR_34 + VAR_35 > VAR_36 -> VAR_37 ) return - VAR_38 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { TYPE_5 VAR_43 = VAR_44 [ VAR_45 ] ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; if ( VAR_46 < 0 || ! ( STRUCT_OR_UNION_8 = METHOD_4 ( VAR_47 ) ) ) return - VAR_48 ; * VAR_49 ++ = STRUCT_OR_UNION_9 ; VAR_50 -> VAR_51 ++ ; } if ( ! VAR_50 -> VAR_53 ) VAR_50 -> VAR_53 = METHOD_6 ( METHOD_5 ( ) ) ; return VAR_52 ; }",59
60,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ;  TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ;  VAR_19 = VAR_20 . VAR_21 ; VAR_22 = VAR_23 . VAR_24 ; VAR_25 = VAR_26 . VAR_27 ; VAR_28 = VAR_29 . VAR_30 ; VAR_31 = METHOD_4 ( VAR_32 . VAR_33 ) ; VAR_34 = METHOD_5 ( VAR_35 -> VAR_36 ) ; if ( ( VAR_37 && ( VAR_38 != VAR_39 || VAR_40 != VAR_41 ) ) || VAR_42 > VAR_43 || VAR_44 > VAR_45 ) { METHOD_6 ( VAR_46 ) ; return 0 ; } if ( ! VAR_47 && VAR_48 != VAR_49 && VAR_50 != VAR_51 && VAR_52 != VAR_53 ) { METHOD_7 ( VAR_54 ) ; return 0 ; } switch ( VAR_55 ) { case VAR_56 : if ( METHOD_8 ( VAR_57 -> VAR_58 , VAR_59 ) || METHOD_9 ( VAR_60 -> VAR_61 , VAR_62 ) ) { VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 = VAR_68 ; } else { VAR_69 -> VAR_70 += VAR_71 ; VAR_72 -> VAR_73 += VAR_74 ; } if ( VAR_75 -> VAR_76 + VAR_77 < VAR_78 || VAR_79 -> VAR_80 + VAR_81 < VAR_82 ) { VAR_83 -> VAR_84 = 0 ; VAR_85 -> VAR_86 = VAR_87 ; } else { VAR_88 -> VAR_89 += VAR_90 ; VAR_91 -> VAR_92 += VAR_93 ; } VAR_94 -> VAR_95 = METHOD_10 ( VAR_96 -> VAR_97 , VAR_98 . VAR_99 ) ; break ; case VAR_100 : if ( METHOD_11 ( VAR_101 -> VAR_102 , VAR_103 ) || METHOD_12 ( VAR_104 -> VAR_105 , VAR_106 ) ) { VAR_107 -> VAR_108 = VAR_109 ; VAR_110 -> VAR_111 = VAR_112 ; } else { VAR_113 -> VAR_114 -= VAR_115 ; VAR_116 -> VAR_117 -= VAR_118 ; } if ( VAR_119 -> VAR_120 < VAR_121 ) { VAR_122 -> VAR_123 = 0 ; VAR_124 -> VAR_125 = VAR_126 ; } else { VAR_127 -> VAR_128 -= VAR_129 ; VAR_130 -> VAR_131 -= VAR_132 ; } VAR_133 -> VAR_134 = METHOD_13 ( VAR_135 -> VAR_136 , VAR_137 . VAR_138 ) ; break ; case VAR_139 : VAR_140 -> VAR_141 = METHOD_14 ( VAR_142 -> VAR_143 , VAR_144 . VAR_145 ) ; if ( VAR_146 < 0 || VAR_147 -> VAR_148 < 0 ) { METHOD_15 ( VAR_149 ) ; METHOD_16 ( VAR_150 ) ; break ; } if ( VAR_151 > VAR_152 || VAR_153 -> VAR_154 > VAR_155 ) { METHOD_17 ( VAR_156 ) ; METHOD_18 ( VAR_157 ) ; break ; } VAR_158 -> VAR_159 *= VAR_160 ; VAR_161 -> VAR_162 *= VAR_163 ; if ( VAR_164 -> VAR_165 > VAR_166 ) { VAR_167 -> VAR_168 = VAR_169 ; VAR_170 -> VAR_171 = VAR_172 ; } else { VAR_173 -> VAR_174 = VAR_175 -> VAR_176 ; VAR_177 -> VAR_178 = VAR_179 -> VAR_180 ; } break ; case VAR_181 : if ( VAR_182 && VAR_183 ) { METHOD_19 ( VAR_184 , VAR_185 -> VAR_186 . VAR_187 & VAR_188 . VAR_189 . VAR_190 ) ; break ; } VAR_191 -> VAR_192 = METHOD_20 ( VAR_193 -> VAR_194 , VAR_195 . VAR_196 ) ; VAR_197 -> VAR_198 = VAR_199 -> VAR_200 . VAR_201 ; VAR_202 -> VAR_203 = METHOD_21 ( VAR_204 -> VAR_205 , VAR_206 ) ; if ( VAR_207 -> VAR_208 < 0 || VAR_209 < 0 ) { VAR_210 -> VAR_211 = VAR_212 ; VAR_213 -> VAR_214 = VAR_215 ; } else { VAR_216 -> VAR_217 = VAR_218 -> VAR_219 ; VAR_220 -> VAR_221 = VAR_222 -> VAR_223 ; } METHOD_22 ( VAR_224 ) ; break ; case VAR_225 : if ( VAR_226 && VAR_227 ) { METHOD_23 ( VAR_228 , VAR_229 -> VAR_230 . VAR_231 | VAR_232 . VAR_233 . VAR_234 ) ; break ; } VAR_235 -> VAR_236 = METHOD_24 ( VAR_237 -> VAR_238 , VAR_239 . VAR_240 ) ; VAR_241 -> VAR_242 = METHOD_25 ( VAR_243 -> VAR_244 , VAR_245 ) ; VAR_246 -> VAR_247 = VAR_248 -> VAR_249 . VAR_250 | VAR_251 -> VAR_252 . VAR_253 ; if ( VAR_254 -> VAR_255 < 0 || VAR_256 < 0 ) { VAR_257 -> VAR_258 = VAR_259 ; VAR_260 -> VAR_261 = VAR_262 ; } else { VAR_263 -> VAR_264 = VAR_265 -> VAR_266 ; VAR_267 -> VAR_268 = VAR_269 -> VAR_270 ; } METHOD_26 ( VAR_271 ) ; break ; case VAR_272 : if ( VAR_273 >= VAR_274 ) { METHOD_27 ( VAR_275 , VAR_276 , VAR_277 -> VAR_278 ) ; break ; } VAR_279 -> VAR_280 = VAR_281 ; VAR_282 -> VAR_283 = VAR_284 ; if ( VAR_285 -> VAR_286 > 1ULL << ( 63 - VAR_287 ) ) { VAR_288 -> VAR_289 = 0 ; VAR_290 -> VAR_291 = VAR_292 ; } else { VAR_293 -> VAR_294 <<= VAR_295 ; VAR_296 -> VAR_297 <<= VAR_298 ; } VAR_299 -> VAR_300 = METHOD_28 ( VAR_301 -> VAR_302 , VAR_303 ) ; METHOD_29 ( VAR_304 ) ; break ; case VAR_305 : if ( VAR_306 >= VAR_307 ) { METHOD_30 ( VAR_308 , VAR_309 , VAR_310 -> VAR_311 ) ; break ; } VAR_312 -> VAR_313 = VAR_314 ; VAR_315 -> VAR_316 = VAR_317 ; VAR_318 -> VAR_319 = METHOD_31 ( VAR_320 -> VAR_321 , VAR_322 ) ; VAR_323 -> VAR_324 >>= VAR_325 ; VAR_326 -> VAR_327 >>= VAR_328 ; METHOD_32 ( VAR_329 ) ; break ; case VAR_330 : if ( VAR_331 >= VAR_332 ) { METHOD_33 ( VAR_333 , VAR_334 , VAR_335 -> VAR_336 ) ; break ; } VAR_337 -> VAR_338 >>= VAR_339 ; VAR_340 -> VAR_341 >>= VAR_342 ; VAR_343 -> VAR_344 = METHOD_34 ( VAR_345 -> VAR_346 , VAR_347 ) ; VAR_348 -> VAR_349 = 0 ; VAR_350 -> VAR_351 = VAR_352 ; METHOD_35 ( VAR_353 ) ; break ; default : METHOD_36 ( VAR_354 , VAR_355 , VAR_356 -> VAR_357 ) ; break ; } if ( METHOD_37 ( VAR_358 -> VAR_359 ) != VAR_360 ) { METHOD_38 ( VAR_361 , 4 ) ;  METHOD_39 ( & VAR_362 , 4 ) ;  } METHOD_40 ( VAR_363 ) ; METHOD_41 ( VAR_364 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ; TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ; if ( VAR_332 == 32 ) { METHOD_39 ( VAR_364 , 4 ) ; } METHOD_40 ( VAR_363 ) ; METHOD_41 ( VAR_364 ) ; return 0 ; }",60
61,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_3 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ( STRUCT_OR_UNION_7 -> VAR_6 & VAR_7 ) && ( STRUCT_OR_UNION_8 -> VAR_8 == 0 ) ) return - VAR_9 ; if ( ( ! VAR_10 ) || ( VAR_11 < sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_12 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_2 ( STRUCT_OR_UNION_10 -> VAR_18 , STRUCT_OR_UNION_11 -> VAR_19 ) ; if ( VAR_20 ) return VAR_21 ; METHOD_3 ( & STRUCT_OR_UNION_12 -> VAR_22 ) ; STRUCT_OR_UNION_13 = list_first_entry ( & STRUCT_OR_UNION_14 -> VAR_23 , struct STRUCT_OR_UNION_15 , VAR_24 ) ; METHOD_4 ( & STRUCT_OR_UNION_16 -> VAR_25 ) ; STRUCT_OR_UNION_17 -> VAR_26 -- ; METHOD_5 ( & STRUCT_OR_UNION_18 -> VAR_27 ) ;  VAR_28 = METHOD_6 ( VAR_29 , & STRUCT_OR_UNION_19 -> STRUCT_OR_UNION_20 ,   STRUCT_OR_UNION_21 -> VAR_30 ) ;  VAR_31 = STRUCT_OR_UNION_22 -> VAR_32 ; METHOD_7 ( STRUCT_OR_UNION_23 ) ; if ( VAR_33 ) return - VAR_34 ; return VAR_35 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_3 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ( STRUCT_OR_UNION_7 -> VAR_6 & VAR_7 ) && ( STRUCT_OR_UNION_8 -> VAR_8 == 0 ) ) return - VAR_9 ; if ( ( ! VAR_10 ) || ( VAR_11 < sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_12 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_2 ( STRUCT_OR_UNION_10 -> VAR_18 , STRUCT_OR_UNION_11 -> VAR_19 ) ; if ( VAR_20 ) return VAR_21 ; METHOD_3 ( & STRUCT_OR_UNION_12 -> VAR_22 ) ; STRUCT_OR_UNION_13 = list_first_entry ( & STRUCT_OR_UNION_14 -> VAR_23 , struct STRUCT_OR_UNION_15 , VAR_24 ) ; METHOD_4 ( & STRUCT_OR_UNION_16 -> VAR_25 ) ; STRUCT_OR_UNION_17 -> VAR_26 -- ; METHOD_5 ( & STRUCT_OR_UNION_18 -> VAR_27 ) ; VAR_35 = METHOD_8 ( VAR_15 , STRUCT_OR_UNION_23 -> VAR_32 ) ; VAR_28 = METHOD_6 ( VAR_29 , & STRUCT_OR_UNION_19 -> STRUCT_OR_UNION_20 , VAR_35 ) ; METHOD_7 ( STRUCT_OR_UNION_23 ) ; if ( VAR_33 ) return - VAR_34 ; return VAR_35 ; }",61
62,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; METHOD_1 ( ( TYPE_5 * ) & VAR_4 , 1 ) switch ( VAR_5 . VAR_6 ) { case VAR_7 : METHOD_2 ( ( ( TYPE_6 * ) & VAR_8 ) + 1 , VAR_9 - 1 ) VAR_10 -> VAR_11 . VAR_12 = VAR_13 . VAR_14 . VAR_15 . VAR_16 ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 . VAR_21 . VAR_22 . VAR_23 ; VAR_24 -> VAR_25 . VAR_26 = ( VAR_27 . VAR_28 . VAR_29 . VAR_30 ? 1 : 0 ) ; VAR_31 -> VAR_32 . VAR_33 = ( VAR_34 . VAR_35 . VAR_36 . VAR_37 ? 1 : 0 ) ; VAR_38 -> VAR_39 . VAR_40 = METHOD_3 ( VAR_41 . VAR_42 . VAR_43 . VAR_44 ) ; VAR_45 -> VAR_46 . VAR_47 = METHOD_4 ( VAR_48 . VAR_49 . VAR_50 . VAR_51 ) ; VAR_52 -> VAR_53 . VAR_54 = METHOD_5 ( VAR_55 . VAR_56 . VAR_57 . VAR_58 ) ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 . VAR_63 . VAR_64 . VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = VAR_69 . VAR_70 . VAR_71 . VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = VAR_76 . VAR_77 . VAR_78 . VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; METHOD_6 ( VAR_83 ) ; return ; case VAR_84 : METHOD_7 ( ( ( TYPE_7 * ) & VAR_85 ) + 1 , VAR_86 - 1 ) TYPE_8 ( ""rfbProcessClientNormalMessage:FixColourMapEntriesunsupported\\n"" ) ; METHOD_8 ( VAR_87 ) ; return ; case VAR_88 : { TYPE_9 VAR_89 ; TYPE_10 VAR_90 ; TYPE_11 VAR_91 = ! VAR_92 -> VAR_93 ; TYPE_12 VAR_94 = ! VAR_95 -> VAR_96 ; TYPE_13 VAR_97 = ! VAR_98 -> VAR_99 ; TYPE_14 VAR_100 = VAR_101 ; METHOD_9 ( ( ( TYPE_15 * ) & VAR_102 ) + 1 , VAR_103 - 1 ) VAR_104 . VAR_105 . VAR_106 = METHOD_10 ( VAR_107 . VAR_108 . VAR_109 ) ; VAR_110 -> VAR_111 = - 1 ; VAR_112 -> VAR_113 = VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 = VAR_129 ; VAR_130 -> VAR_131 = - 1 ; VAR_132 -> VAR_133 = - 1 ; for ( VAR_134 = 0 ; VAR_135 < VAR_136 . VAR_137 . VAR_138 ; VAR_139 ++ ) { METHOD_11 ( ( TYPE_16 * ) & VAR_140 , 4 ) VAR_141 = METHOD_12 ( VAR_142 ) ; switch ( VAR_143 ) { case VAR_144 : VAR_145 -> VAR_146 = VAR_147 ; break ; case VAR_148 : if ( VAR_149 -> VAR_150 == - 1 ) { VAR_151 -> VAR_152 = VAR_153 ; TYPE_17 ( ""Usingrawencodingforclient%s\\n"" , VAR_154 -> VAR_155 ) ; } break ; case VAR_156 : if ( VAR_157 -> VAR_158 == - 1 ) { VAR_159 -> VAR_160 = VAR_161 ; TYPE_18 ( ""Usingrreencodingforclient%s\\n"" , VAR_162 -> VAR_163 ) ; } break ; case VAR_164 : if ( VAR_165 -> VAR_166 == - 1 ) { VAR_167 -> VAR_168 = VAR_169 ; TYPE_19 ( ""UsingCoRREencodingforclient%s\\n"" , VAR_170 -> VAR_171 ) ; } break ; case VAR_172 : if ( VAR_173 -> VAR_174 == - 1 ) { VAR_175 -> VAR_176 = VAR_177 ; TYPE_20 ( ""Usinghextileencodingforclient%s\\n"" , VAR_178 -> VAR_179 ) ; } break ; case VAR_180 : if ( VAR_181 -> VAR_182 == - 1 ) { VAR_183 -> VAR_184 = VAR_185 ; TYPE_21 ( ""Usingzlibencodingforclient%s\\n"" , VAR_186 -> VAR_187 ) ; } break ; case VAR_188 : if ( VAR_189 -> VAR_190 == - 1 ) { VAR_191 -> VAR_192 = VAR_193 ; TYPE_22 ( ""UsingZRLEencodingforclient%s\\n"" , VAR_194 -> VAR_195 ) ; } break ; case VAR_196 : if ( VAR_197 -> VAR_198 == - 1 ) { VAR_199 -> VAR_200 = VAR_201 ; TYPE_23 ( ""UsingZYWRLEencodingforclient%s\\n"" , VAR_202 -> VAR_203 ) ; } break ; case VAR_204 : if ( VAR_205 -> VAR_206 == - 1 ) { VAR_207 -> VAR_208 = VAR_209 ; TYPE_24 ( ""Usingtightencodingforclient%s\\n"" , VAR_210 -> VAR_211 ) ; } break ; case VAR_212 : if ( ! VAR_213 -> VAR_214 ) { TYPE_25 ( ""EnablingX-stylecursorupdatesforclient%s\\n"" , VAR_215 -> VAR_216 ) ; VAR_217 -> VAR_218 = VAR_219 ; VAR_220 -> VAR_221 = VAR_222 ; VAR_223 -> VAR_224 = VAR_225 ; } break ; case VAR_226 : if ( ! VAR_227 -> VAR_228 ) { TYPE_26 ( ""Enablingfull-colorcursorupdatesforclient%s\\n"" , VAR_229 -> VAR_230 ) ; VAR_231 -> VAR_232 = VAR_233 ; VAR_234 -> VAR_235 = VAR_236 ; VAR_237 -> VAR_238 = VAR_239 ; } break ; case VAR_240 : if ( ! VAR_241 -> VAR_242 ) { TYPE_27 ( ""Enablingcursorpositionupdatesforclient%s\\n"" , VAR_243 -> VAR_244 ) ; VAR_245 -> VAR_246 = VAR_247 ; VAR_248 -> VAR_249 = VAR_250 ; VAR_251 -> VAR_252 = - 1 ; VAR_253 -> VAR_254 = - 1 ; } break ; case VAR_255 : if ( ! VAR_256 -> VAR_257 ) { TYPE_28 ( ""EnablingLastRectprotocolextensionforclient%s\\n"" , VAR_258 -> VAR_259 ) ; VAR_260 -> VAR_261 = VAR_262 ; } break ; case VAR_263 : if ( ! VAR_264 -> VAR_265 ) { TYPE_29 ( ""EnablingFenceprotocolextensionforclient%s\\n"" , VAR_266 -> VAR_267 ) ; VAR_268 -> VAR_269 = VAR_270 ; } break ; case VAR_271 : if ( ! VAR_272 -> VAR_273 ) { TYPE_30 ( ""EnablingContinuousUpdatesprotocolextensionforclient%s\\n"" , VAR_274 -> VAR_275 ) ; VAR_276 -> VAR_277 = VAR_278 ; } break ; case VAR_279 : if ( ! VAR_280 -> VAR_281 ) { if ( ! VAR_282 ) { TYPE_31 ( ""EnablingDesktopSizeprotocolextensionforclient%s\\n"" , VAR_283 -> VAR_284 ) ; VAR_285 -> VAR_286 = VAR_287 ; } else TYPE_32 ( ""WARNING:Remotedesktopresizingdisabledpersystempolicy.\\n"" ) ; } break ; case VAR_288 : if ( ! VAR_289 -> VAR_290 ) { if ( ! VAR_291 ) { TYPE_33 ( ""EnablingExtendedDesktopSizeprotocolextensionforclient%s\\n"" , VAR_292 -> VAR_293 ) ; VAR_294 -> VAR_295 = VAR_296 ; } else TYPE_34 ( ""WARNING:Remotedesktopresizingdisabledpersystempolicy.\\n"" ) ; } break ; case VAR_297 : if ( ! VAR_298 -> VAR_299 ) { TYPE_35 ( ""EnablingGIIextensionforclient%s\\n"" , VAR_300 -> VAR_301 ) ; VAR_302 -> VAR_303 = VAR_304 ; } break ; default : if ( VAR_305 >= ( TYPE_36 ) VAR_306 && VAR_307 <= ( TYPE_37 ) VAR_308 ) { VAR_309 -> VAR_310 = VAR_311 & 0x0F ; VAR_312 -> VAR_313 = VAR_314 & 0x0F ; if ( VAR_315 -> VAR_316 == VAR_317 ) VAR_318 = VAR_319 ; else TYPE_38 ( ""Usingcompressionlevel%dforclient%s\\n"" , VAR_320 -> VAR_321 , VAR_322 -> VAR_323 ) ; if ( VAR_324 == - 1 ) { if ( VAR_325 -> VAR_326 >= 5 ) { if ( ! METHOD_13 ( VAR_327 ) ) { METHOD_14 ( VAR_328 ) ; return ; } } else METHOD_15 ( VAR_329 ) ; } } else if ( VAR_330 >= ( TYPE_39 ) VAR_331 && VAR_332 <= ( TYPE_40 ) VAR_333 ) { VAR_334 -> VAR_335 = VAR_336 & 0xFF ; TYPE_41 ( ""UsingJPEGsubsampling%dforclient%s\\n"" , VAR_337 -> VAR_338 , VAR_339 -> VAR_340 ) ; } else if ( VAR_341 >= ( TYPE_42 ) VAR_342 && VAR_343 <= ( TYPE_43 ) VAR_344 ) { VAR_345 -> VAR_346 = VAR_347 [ VAR_348 & 0x0F ] ; VAR_349 -> VAR_350 = VAR_351 [ VAR_352 & 0x0F ] ; VAR_353 -> VAR_354 = VAR_355 & 0x0F ; if ( VAR_356 -> VAR_357 == VAR_358 ) TYPE_44 ( ""UsingJPEGsubsampling%d,Q%dforclient%s\\n"" , VAR_359 -> VAR_360 , VAR_361 -> VAR_362 , VAR_363 -> VAR_364 ) ; else TYPE_45 ( ""Usingimagequalitylevel%dforclient%s\\n"" , VAR_365 -> VAR_366 , VAR_367 -> VAR_368 ) ; } else if ( VAR_369 >= ( TYPE_46 ) VAR_370 + 1 && VAR_371 <= ( TYPE_47 ) VAR_372 ) { VAR_373 -> VAR_374 = VAR_375 & 0xFF ; TYPE_48 ( ""UsingJPEGquality%dforclient%s\\n"" , VAR_376 -> VAR_377 , VAR_378 -> VAR_379 ) ; } else { TYPE_49 ( ""rfbProcessClientNormalMessage:ignoringunknownencoding%d(%x)\\n"" , ( TYPE_50 ) VAR_380 , ( TYPE_51 ) VAR_381 ) ; } } } if ( VAR_382 -> VAR_383 == - 1 ) VAR_384 -> VAR_385 = VAR_386 ; if ( VAR_387 -> VAR_388 == VAR_389 && VAR_390 ) TYPE_52 ( ""UsingTightcompressionlevel%dforclient%s\\n"" , METHOD_16 ( VAR_391 ) , VAR_392 -> VAR_393 ) ; if ( VAR_394 -> VAR_395 && ! VAR_396 -> VAR_397 ) { TYPE_53 ( ""Disablingcursorpositionupdatesforclient%s\\n"" , VAR_398 -> VAR_399 ) ; VAR_400 -> VAR_401 = VAR_402 ; } if ( VAR_403 -> VAR_404 && VAR_405 ) { if ( ! METHOD_17 ( VAR_406 , VAR_407 , 0 , VAR_408 ) ) return ; } if ( VAR_409 -> VAR_410 && VAR_411 -> VAR_412 && VAR_413 ) { if ( ! METHOD_18 ( VAR_414 ) ) return ; } if ( VAR_415 -> VAR_416 && VAR_417 ) { TYPE_54 VAR_418 ; VAR_419 . VAR_420 = VAR_421 ; VAR_422 . VAR_423 = VAR_424 | VAR_425 ; VAR_426 . VAR_427 = METHOD_19 ( VAR_428 - 4 ) ; VAR_429 . VAR_430 = VAR_431 . VAR_432 = METHOD_20 ( 1 ) ; if ( METHOD_21 ( VAR_433 , ( TYPE_55 * ) & VAR_434 , VAR_435 ) < 0 ) { METHOD_22 ( ""rfbProcessClientNormalMessage:write"" ) ; METHOD_23 ( VAR_436 ) ; return ; } } return ; } case VAR_437 : { TYPE_56 VAR_438 ; TYPE_57 TYPE_58 ; METHOD_24 ( ( ( TYPE_59 * ) & VAR_439 ) + 1 , VAR_440 - 1 ) TYPE_60 . VAR_441 = METHOD_25 ( VAR_442 . VAR_443 . VAR_444 ) ; TYPE_61 . VAR_445 = METHOD_26 ( VAR_446 . VAR_447 . VAR_448 ) ; TYPE_62 . VAR_449 = TYPE_63 . VAR_450 + METHOD_27 ( VAR_451 . VAR_452 . VAR_453 ) ; TYPE_64 . VAR_454 = TYPE_65 . VAR_455 + METHOD_28 ( VAR_456 . VAR_457 . VAR_458 ) ; METHOD_29 ( VAR_459 , & VAR_460 , & TYPE_66 , 0 ) ; if ( ! VAR_461 . VAR_462 . VAR_463 || ! VAR_464 -> VAR_465 ) METHOD_30 ( VAR_466 , & VAR_467 -> VAR_468 , & VAR_469 -> VAR_470 , & VAR_471 ) ; if ( ! VAR_472 -> VAR_473 ) { VAR_474 -> VAR_475 = VAR_476 ; if ( ! VAR_477 -> VAR_478 . VAR_479 ) { if ( ! METHOD_31 ( VAR_480 , 0 , 0 ) ) { METHOD_32 ( VAR_481 , & VAR_482 ) ; return ; } } } if ( ! VAR_483 . VAR_484 . VAR_485 ) { METHOD_33 ( VAR_486 , & VAR_487 -> VAR_488 , & VAR_489 -> VAR_490 , & VAR_491 ) ; METHOD_34 ( VAR_492 , & VAR_493 -> VAR_494 , & VAR_495 -> VAR_496 , & VAR_497 ) ; METHOD_35 ( VAR_498 , & VAR_499 -> VAR_500 , & VAR_501 -> VAR_502 , & VAR_503 ) ; VAR_504 -> VAR_505 = VAR_506 ; } if ( METHOD_36 ( VAR_507 ) && ( ! VAR_508 -> VAR_509 || VAR_510 == 0 || METHOD_37 ( ) - VAR_511 -> VAR_512 >= ( TYPE_67 ) VAR_513 ) ) { if ( METHOD_38 ( VAR_514 ) ) VAR_515 -> VAR_516 = VAR_517 ; } METHOD_39 ( VAR_518 , & VAR_519 ) ; return ; } case VAR_520 : VAR_521 -> VAR_522 ++ ; METHOD_40 ( ( ( TYPE_68 * ) & VAR_523 ) + 1 , VAR_524 - 1 ) if ( ! VAR_525 && ! VAR_526 -> VAR_527 ) METHOD_41 ( ( TYPE_69 ) METHOD_42 ( VAR_528 . VAR_529 . VAR_530 ) , VAR_531 . VAR_532 . VAR_533 ) ; return ; case VAR_534 : VAR_535 -> VAR_536 ++ ; METHOD_43 ( ( ( TYPE_70 * ) & VAR_537 ) + 1 , VAR_538 - 1 ) if ( VAR_539 && ( VAR_540 != VAR_541 ) ) return ; if ( VAR_542 . VAR_543 . VAR_544 == 0 ) VAR_545 = VAR_546 ; else VAR_547 = VAR_548 ; if ( ! VAR_549 && ! VAR_550 -> VAR_551 ) { VAR_552 -> VAR_553 = ( TYPE_71 ) METHOD_44 ( VAR_554 . VAR_555 . VAR_556 ) ; VAR_557 -> VAR_558 = ( TYPE_72 ) METHOD_45 ( VAR_559 . VAR_560 . VAR_561 ) ; METHOD_46 ( VAR_562 . VAR_563 . VAR_564 , VAR_565 -> VAR_566 , VAR_567 -> VAR_568 , VAR_569 ) ; } return ; case VAR_570 : { TYPE_73 VAR_571 = 0 ; METHOD_47 ( ( ( TYPE_74 * ) & VAR_572 ) + 1 , VAR_573 - 1 ) VAR_574 . VAR_575 . VAR_576 = METHOD_48 ( VAR_577 . VAR_578 . VAR_579 ) ; if ( VAR_580 . VAR_581 . VAR_582 > VAR_583 ) { TYPE_75 ( ""Truncating%d-byteclipboardupdateto%dbytes.\\n"" , VAR_584 . VAR_585 . VAR_586 , VAR_587 ) ; VAR_588 = VAR_589 . VAR_590 . VAR_591 - VAR_592 ; VAR_593 . VAR_594 . VAR_595 = VAR_596 ; } if ( VAR_597 . VAR_598 . VAR_599 <= 0 ) return ; VAR_600 = ( TYPE_76 * ) METHOD_49 ( VAR_601 . VAR_602 . VAR_603 ) ; if ( VAR_604 == VAR_605 ) { METHOD_50 ( ""rfbProcessClientNormalMessage:rfbClientCutTextoutofmemory"" ) ; METHOD_51 ( VAR_606 ) ; return ; } if ( ( VAR_607 = METHOD_52 ( VAR_608 , VAR_609 , VAR_610 . VAR_611 . VAR_612 ) ) <= 0 ) { if ( VAR_613 != 0 ) METHOD_53 ( ""rfbProcessClientNormalMessage:read"" ) ; METHOD_54 ( VAR_614 ) ; METHOD_55 ( VAR_615 ) ; return ; } if ( VAR_616 > 0 ) { if ( ( VAR_617 = METHOD_56 ( VAR_618 , VAR_619 ) ) <= 0 ) { if ( VAR_620 != 0 ) METHOD_57 ( ""rfbProcessClientNormalMessage:read"" ) ; METHOD_58 ( VAR_621 ) ; METHOD_59 ( VAR_622 ) ; return ; } } if ( ! VAR_623 && ! VAR_624 -> VAR_625 && ! VAR_626 ) { METHOD_60 ( VAR_627 , VAR_628 . VAR_629 . VAR_630 ) ; if ( VAR_631 ) METHOD_61 ( VAR_632 , VAR_633 . VAR_634 . VAR_635 ) ; } METHOD_62 ( VAR_636 ) ; return ; } case VAR_637 : { TYPE_77 TYPE_78 ; METHOD_63 ( ( ( TYPE_79 * ) & VAR_638 ) + 1 , VAR_639 - 1 ) if ( ! VAR_640 -> VAR_641 || ! VAR_642 -> VAR_643 ) { TYPE_80 ( ""Ignoringrequesttoenablecontinuousupdatesbecausetheclientdoesnot\\n"" ) ; TYPE_81 ( ""supporttheflowcontrolextensions.\\n"" ) ; return ; } TYPE_82 . VAR_644 = METHOD_64 ( VAR_645 . VAR_646 . VAR_647 ) ; TYPE_83 . VAR_648 = METHOD_65 ( VAR_649 . VAR_650 . VAR_651 ) ; TYPE_84 . VAR_652 = TYPE_85 . VAR_653 + METHOD_66 ( VAR_654 . VAR_655 . VAR_656 ) ; TYPE_86 . VAR_657 = TYPE_87 . VAR_658 + METHOD_67 ( VAR_659 . VAR_660 . VAR_661 ) ; METHOD_68 ( VAR_662 , & VAR_663 -> VAR_664 , & TYPE_88 , 0 ) ; VAR_665 -> VAR_666 = VAR_667 . VAR_668 . VAR_669 ; if ( VAR_670 -> VAR_671 ) { METHOD_69 ( VAR_672 , & VAR_673 -> VAR_674 ) ; if ( ! METHOD_70 ( VAR_675 ) ) return ; } else { if ( ! METHOD_71 ( VAR_676 ) ) return ; } TYPE_89 ( ""Continuousupdates%s\\n"" , VAR_677 -> VAR_678 ? ""enabled"" : ""disabled"" ) ; return ; } case VAR_679 : { TYPE_90 VAR_680 ; TYPE_91 VAR_681 [ 64 ] ; METHOD_72 ( ( ( TYPE_92 * ) & VAR_682 ) + 1 , VAR_683 - 1 ) VAR_684 = METHOD_73 ( VAR_685 . VAR_686 . VAR_687 ) ;  METHOD_74 ( VAR_688 , VAR_689 . VAR_690 . VAR_691 )   if ( VAR_692 . VAR_693 . VAR_694 > sizeof ( VAR_695 ) )  TYPE_93 ( ""Ignoringfence.Payloadof%dbytesistoolarge.\\n"" , VAR_696 . VAR_697 . VAR_698 ) ;  else   METHOD_75 ( VAR_699 , VAR_700 , VAR_701 . VAR_702 . VAR_703 , VAR_704 ) ;  return ; } METHOD_76 ( VAR_705 , VAR_706 ... ) { if ( ! METHOD_77 ( VAR_707 ) ) snprintf ( VAR_708 , 256 , ""DesktopresizeERROR:"" VAR_709 ""\\n"" , VAR_710 ) ; VAR_711 = VAR_712 ; } case VAR_713 : { TYPE_94 VAR_714 ; struct STRUCT_OR_UNION_0 VAR_715 ; TYPE_95 VAR_716 ; TYPE_96 VAR_717 = VAR_718 ; TYPE_97 VAR_719 [ 256 ] = ""\\0"" ; TYPE_98 VAR_720 = VAR_721 . VAR_722 [ 0 ] ; METHOD_78 ( ( ( TYPE_99 * ) & VAR_723 ) + 1 , VAR_724 - 1 ) if ( VAR_725 . VAR_726 . VAR_727 < 1 ) METHOD_79 ( ""Requestednumberofscreens%disinvalid"" , VAR_728 . VAR_729 . VAR_730 ) ; VAR_731 . VAR_732 . VAR_733 = METHOD_80 ( VAR_734 . VAR_735 . VAR_736 ) ; VAR_737 . VAR_738 . VAR_739 = METHOD_81 ( VAR_740 . VAR_741 . VAR_742 ) ; if ( VAR_743 . VAR_744 . VAR_745 < 1 || VAR_746 . VAR_747 . VAR_748 < 1 ) METHOD_82 ( ""Requestedframebufferdimensions%dx%dareinvalid"" , VAR_749 . VAR_750 . VAR_751 , VAR_752 . VAR_753 . VAR_754 ) ; METHOD_83 ( & VAR_755 ) ; for ( VAR_756 = 0 ; VAR_757 < VAR_758 . VAR_759 . VAR_760 ; VAR_761 ++ ) { TYPE_100 * VAR_762 = METHOD_84 ( 0 , 0 , 0 , 0 , 0 , 0 ) ; METHOD_85 ( ( TYPE_101 * ) & VAR_763 -> VAR_764 , sizeof ( VAR_765 ) ) VAR_766 -> VAR_767 . VAR_768 = METHOD_86 ( VAR_769 -> VAR_770 . VAR_771 ) ; VAR_772 -> VAR_773 . VAR_774 = METHOD_87 ( VAR_775 -> VAR_776 . VAR_777 ) ; VAR_778 -> VAR_779 . VAR_780 = METHOD_88 ( VAR_781 -> VAR_782 . VAR_783 ) ; VAR_784 -> VAR_785 . VAR_786 = METHOD_89 ( VAR_787 -> VAR_788 . VAR_789 ) ; VAR_790 -> VAR_791 . VAR_792 = METHOD_90 ( VAR_793 -> VAR_794 . VAR_795 ) ; VAR_796 -> VAR_797 . VAR_798 = METHOD_91 ( VAR_799 -> VAR_800 . VAR_801 ) ; if ( VAR_802 -> VAR_803 . VAR_804 < 1 || VAR_805 -> VAR_806 . VAR_807 < 1 ) METHOD_92 ( ""Screen0x%.8xrequesteddimensions%dx%dareinvalid"" , ( unsigned TYPE_102 ) VAR_808 -> VAR_809 . VAR_810 , VAR_811 -> VAR_812 . VAR_813 , VAR_814 -> VAR_815 . VAR_816 ) ; if ( VAR_817 -> VAR_818 . VAR_819 >= VAR_820 . VAR_821 . VAR_822 || VAR_823 -> VAR_824 . VAR_825 >= VAR_826 . VAR_827 . VAR_828 || VAR_829 -> VAR_830 . VAR_831 + VAR_832 -> VAR_833 . VAR_834 > VAR_835 . VAR_836 . VAR_837 || VAR_838 -> VAR_839 . VAR_840 + VAR_841 -> VAR_842 . VAR_843 > VAR_844 . VAR_845 . VAR_846 ) METHOD_93 ( ""Screen0x%.8xrequestedgeometry%dx%d+%d+%dexceedsrequestedframebufferdimensions"" , ( unsigned TYPE_103 ) VAR_847 -> VAR_848 . VAR_849 , VAR_850 -> VAR_851 . VAR_852 , VAR_853 -> VAR_854 . VAR_855 , VAR_856 -> VAR_857 . VAR_858 , VAR_859 -> VAR_860 . VAR_861 ) ; if ( METHOD_94 ( & VAR_862 , VAR_863 -> VAR_864 . VAR_865 ) ) { METHOD_95 ( ""Screen0x%.8xduplicateID"" , ( unsigned TYPE_104 ) VAR_866 -> VAR_867 . VAR_868 ) ; METHOD_96 ( VAR_869 ) ; } else METHOD_97 ( & VAR_870 , VAR_871 ) ; } if ( VAR_872 -> VAR_873 ) { TYPE_105 ( ""NOTICE:Ignoringremotedesktopresizerequestfromaview-onlyclient.\\n"" ) ; VAR_874 = VAR_875 ; } else if ( VAR_876 == VAR_877 ) { VAR_878 = METHOD_98 ( VAR_879 , VAR_880 , VAR_881 . VAR_882 . VAR_883 , VAR_884 . VAR_885 . VAR_886 , & VAR_887 ) ; if ( VAR_888 == VAR_889 ) return ; } else TYPE_106 ( VAR_890 ) ; METHOD_99 ( & VAR_891 ) ; for ( VAR_892 = VAR_893 ; VAR_894 ; VAR_895 = VAR_896 -> VAR_897 ) { if ( VAR_898 == VAR_899 ) { VAR_900 -> VAR_901 = VAR_902 ; VAR_903 -> VAR_904 = VAR_905 ; VAR_906 -> VAR_907 = VAR_908 ; METHOD_100 ( VAR_909 ) ; break ; } } return ; } case VAR_910 : { TYPE_107 VAR_911 , VAR_912 , VAR_913 ; METHOD_101 ( ( TYPE_108 * ) & VAR_914 , 1 ) ; VAR_915 = ( VAR_916 & VAR_917 ) ? 0 : 1 ; VAR_918 = VAR_919 & ~ VAR_920 ; switch ( VAR_921 ) { case VAR_922 : METHOD_102 ( ( TYPE_109 * ) & VAR_923 . VAR_924 . VAR_925 , VAR_926 - 2 ) ; if ( VAR_927 != * ( const TYPE_110 * ) & VAR_928 ) { VAR_929 . VAR_930 . VAR_931 = METHOD_103 ( VAR_932 . VAR_933 . VAR_934 ) ; VAR_935 . VAR_936 . VAR_937 = METHOD_104 ( VAR_938 . VAR_939 . VAR_940 ) ; } if ( VAR_941 . VAR_942 . VAR_943 != VAR_944 - 4 || VAR_945 . VAR_946 . VAR_947 < 1 ) { TYPE_111 ( ""ERROR:MalformedGIIclientversionmessage\\n"" ) ; METHOD_105 ( VAR_948 ) ; return ; } TYPE_112 ( ""ClientsupportsGIIversion%d\\n"" , VAR_949 . VAR_950 . VAR_951 ) ; break ; case VAR_952 : { TYPE_113 VAR_953 ; TYPE_114 VAR_954 ; TYPE_115 VAR_955 ; METHOD_106 ( & VAR_956 , 0 , sizeof ( VAR_957 ) ) ; VAR_958 . VAR_959 = 0 ; METHOD_107 ( ( TYPE_116 * ) & VAR_960 . VAR_961 . VAR_962 , VAR_963 - 2 ) ; if ( VAR_964 != * ( const TYPE_117 * ) & VAR_965 ) { VAR_966 . VAR_967 . VAR_968 = METHOD_108 ( VAR_969 . VAR_970 . VAR_971 ) ; VAR_972 . VAR_973 . VAR_974 = METHOD_109 ( VAR_975 . VAR_976 . VAR_977 ) ; VAR_978 . VAR_979 . VAR_980 = METHOD_110 ( VAR_981 . VAR_982 . VAR_983 ) ; VAR_984 . VAR_985 . VAR_986 = METHOD_111 ( VAR_987 . VAR_988 . VAR_989 ) ; VAR_990 . VAR_991 . VAR_992 = METHOD_112 ( VAR_993 . VAR_994 . VAR_995 ) ; VAR_996 . VAR_997 . VAR_998 = METHOD_113 ( VAR_999 . VAR_1000 . VAR_1001 ) ; VAR_1002 . VAR_1003 . VAR_1004 = METHOD_114 ( VAR_1005 . VAR_1006 . VAR_1007 ) ; } TYPE_118 ( ""GIIDeviceCreate:%s\\n"" , VAR_1008 . VAR_1009 . VAR_1010 ) ; TYPE_119 TYPE_120 TYPE_121 ( ""VendorID:%d\\n"" , VAR_1011 . VAR_1012 . VAR_1013 ) ; TYPE_122 ( ""ProductID:%d\\n"" , VAR_1014 . VAR_1015 . VAR_1016 ) ; TYPE_123 ( ""Eventmask:%.8x\\n"" , VAR_1017 . VAR_1018 . VAR_1019 ) ; TYPE_124 ( ""Registers:%d\\n"" , VAR_1020 . VAR_1021 . VAR_1022 ) ; TYPE_125 ( ""Valuators:%d\\n"" , VAR_1023 . VAR_1024 . VAR_1025 ) ; TYPE_126 ( ""Buttons:%d\\n"" , VAR_1026 . VAR_1027 . VAR_1028 ) ; if ( VAR_1029 . VAR_1030 . VAR_1031 != VAR_1032 - 4 + VAR_1033 . VAR_1034 . VAR_1035 * VAR_1036 ) { TYPE_127 ( ""ERROR:MalformedGIIdevicecreatemessage\\n"" ) ; METHOD_115 ( VAR_1037 ) ; return ; } if ( VAR_1038 . VAR_1039 . VAR_1040 > VAR_1041 ) { TYPE_128 ( ""GIIdevicecreateERROR:%dbuttonsexceedsmaxof%d\\n"" , VAR_1042 . VAR_1043 . VAR_1044 , VAR_1045 ) ; METHOD_116 ( VAR_1046 . VAR_1047 . VAR_1048 * VAR_1049 ) ; goto VAR_1050 ; } if ( VAR_1051 . VAR_1052 . VAR_1053 > VAR_1054 ) { TYPE_129 ( ""GIIdevicecreateERROR:%dvaluatorsexceedsmaxof%d\\n"" , VAR_1055 . VAR_1056 . VAR_1057 , VAR_1058 ) ; METHOD_117 ( VAR_1059 . VAR_1060 . VAR_1061 * VAR_1062 ) ; goto VAR_1063 ; } METHOD_118 ( & VAR_1064 . VAR_1065 , VAR_1066 . VAR_1067 . VAR_1068 , 32 ) ; VAR_1069 . VAR_1070 = VAR_1071 . VAR_1072 . VAR_1073 ; VAR_1074 . VAR_1075 = VAR_1076 . VAR_1077 . VAR_1078 ; VAR_1079 . VAR_1080 = VAR_1081 . VAR_1082 . VAR_1083 ; VAR_1084 . VAR_1085 = ( VAR_1086 . VAR_1087 & VAR_1088 ) ? VAR_1089 : VAR_1090 ; VAR_1091 . VAR_1092 = VAR_1093 . VAR_1094 . VAR_1095 ; if ( VAR_1096 . VAR_1097 == VAR_1098 ) { TYPE_130 ( ""GIIdevicecreateERROR:relativevaluatorsnotsupported(yet)\\n"" ) ; METHOD_119 ( VAR_1099 . VAR_1100 . VAR_1101 * VAR_1102 ) ; goto VAR_1103 ; } for ( VAR_1104 = 0 ; VAR_1105 < VAR_1106 . VAR_1107 ; VAR_1108 ++ ) { TYPE_131 * VAR_1109 = & VAR_1110 . VAR_1111 [ VAR_1112 ] ; METHOD_120 ( ( TYPE_132 * ) VAR_1113 , VAR_1114 ) ; if ( VAR_1115 != * ( const TYPE_133 * ) & VAR_1116 ) { VAR_1117 -> VAR_1118 = METHOD_121 ( VAR_1119 -> VAR_1120 ) ; VAR_1121 -> VAR_1122 = METHOD_122 ( ( TYPE_134 ) VAR_1123 -> VAR_1124 ) ; VAR_1125 -> VAR_1126 = METHOD_123 ( ( TYPE_135 ) VAR_1127 -> VAR_1128 ) ; VAR_1129 -> VAR_1130 = METHOD_124 ( ( TYPE_136 ) VAR_1131 -> VAR_1132 ) ; VAR_1133 -> VAR_1134 = METHOD_125 ( VAR_1135 -> VAR_1136 ) ; VAR_1137 -> VAR_1138 = METHOD_126 ( ( TYPE_137 ) VAR_1139 -> VAR_1140 ) ; VAR_1141 -> VAR_1142 = METHOD_127 ( ( TYPE_138 ) VAR_1143 -> VAR_1144 ) ; VAR_1145 -> VAR_1146 = METHOD_128 ( ( TYPE_139 ) VAR_1147 -> VAR_1148 ) ; VAR_1149 -> VAR_1150 = METHOD_129 ( ( TYPE_140 ) VAR_1151 -> VAR_1152 ) ; } TYPE_141 TYPE_142 TYPE_143 ( ""Valuator:%s(%s)\\n"" , VAR_1153 -> VAR_1154 , VAR_1155 -> VAR_1156 ) ; TYPE_144 ( ""Index:%d\\n"" , VAR_1157 -> VAR_1158 ) ; TYPE_145 ( ""Range:min=%d,center=%d,max=%d\\n"" , VAR_1159 -> VAR_1160 , VAR_1161 -> VAR_1162 , VAR_1163 -> VAR_1164 ) ; TYPE_146 ( ""SIunit:%d\\n"" , VAR_1165 -> VAR_1166 ) ; TYPE_147 ( ""SIadd:%d\\n"" , VAR_1167 -> VAR_1168 ) ; TYPE_148 ( ""SImultiply:%d\\n"" , VAR_1169 -> VAR_1170 ) ; TYPE_149 ( ""SIdivide:%d\\n"" , VAR_1171 -> VAR_1172 ) ; TYPE_150 ( ""SIshift:%d\\n"" , VAR_1173 -> VAR_1174 ) ; } for ( VAR_1175 = 0 ; VAR_1176 < VAR_1177 -> VAR_1178 ; VAR_1179 ++ ) { if ( ! METHOD_130 ( VAR_1180 . VAR_1181 , VAR_1182 -> VAR_1183 [ VAR_1184 ] . VAR_1185 ) ) { TYPE_151 ( ""Device\\\'%s\\\'alreadyexistswithGIIdeviceID%d\\n"" , VAR_1186 . VAR_1187 , VAR_1188 + 1 ) ; VAR_1189 . VAR_1190 = METHOD_131 ( VAR_1191 + 1 ) ; goto VAR_1192 ; } } if ( VAR_1193 || METHOD_132 ( & VAR_1194 ) ) { METHOD_133 ( & VAR_1195 -> VAR_1196 [ VAR_1197 -> VAR_1198 ] , & VAR_1199 , sizeof ( VAR_1200 ) ) ; VAR_1201 -> VAR_1202 ++ ; VAR_1203 . VAR_1204 = METHOD_134 ( VAR_1205 -> VAR_1206 ) ; } TYPE_152 ( ""GIIdeviceID=%d\\n"" , VAR_1207 -> VAR_1208 ) ; VAR_1209 : VAR_1210 . VAR_1211 = VAR_1212 ; VAR_1213 . VAR_1214 = VAR_1215 | VAR_1216 ; VAR_1217 . VAR_1218 = METHOD_135 ( VAR_1219 - 4 ) ; if ( METHOD_136 ( VAR_1220 , ( TYPE_153 * ) & VAR_1221 , VAR_1222 ) < 0 ) { METHOD_137 ( ""rfbProcessClientNormalMessage:write"" ) ; METHOD_138 ( VAR_1223 ) ; return ; } break ; } case VAR_1224 : METHOD_139 ( ( TYPE_154 * ) & VAR_1225 . VAR_1226 . VAR_1227 , VAR_1228 - 2 ) ; if ( VAR_1229 != * ( const TYPE_155 * ) & VAR_1230 ) { VAR_1231 . VAR_1232 . VAR_1233 = METHOD_140 ( VAR_1234 . VAR_1235 . VAR_1236 ) ; VAR_1237 . VAR_1238 . VAR_1239 = METHOD_141 ( VAR_1240 . VAR_1241 . VAR_1242 ) ; } if ( VAR_1243 . VAR_1244 . VAR_1245 != VAR_1246 - 4 ) { TYPE_156 ( ""ERROR:MalformedGIIdevicecreatemessage\\n"" ) ; METHOD_142 ( VAR_1247 ) ; return ; } METHOD_143 ( VAR_1248 , VAR_1249 . VAR_1250 . VAR_1251 - 1 ) ; break ; case VAR_1252 : { TYPE_157 VAR_1253 ; METHOD_144 ( ( TYPE_158 * ) & VAR_1254 , sizeof ( TYPE_159 ) ) ; if ( VAR_1255 != * ( const TYPE_160 * ) & VAR_1256 ) VAR_1257 = METHOD_145 ( VAR_1258 ) ; while ( VAR_1259 > 0 ) { TYPE_161 VAR_1260 , VAR_1261 ; METHOD_146 ( ( TYPE_162 * ) & VAR_1262 , 1 ) ; METHOD_147 ( ( TYPE_163 * ) & VAR_1263 , 1 ) ; switch ( VAR_1264 ) { case VAR_1265 : case VAR_1266 : { TYPE_164 VAR_1267 ; TYPE_165 * VAR_1268 ; METHOD_148 ( ( TYPE_166 * ) & VAR_1269 . VAR_1270 , VAR_1271 - 2 ) ; if ( VAR_1272 != * ( const TYPE_167 * ) & VAR_1273 ) { VAR_1274 . VAR_1275 = METHOD_149 ( VAR_1276 . VAR_1277 ) ; VAR_1278 . VAR_1279 = METHOD_150 ( VAR_1280 . VAR_1281 ) ; } if ( VAR_1282 != VAR_1283 || VAR_1284 . VAR_1285 <= 0 || VAR_1286 . VAR_1287 < 1 ) { TYPE_168 ( ""ERROR:MalformedGIIbuttonevent\\n"" ) ; METHOD_151 ( VAR_1288 ) ; return ; } if ( VAR_1289 > VAR_1290 ) { TYPE_169 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_152 ( VAR_1291 ) ; return ; } VAR_1292 -= VAR_1293 ; if ( VAR_1294 . VAR_1295 < 1 || VAR_1296 . VAR_1297 > VAR_1298 -> VAR_1299 ) { TYPE_170 ( ""ERROR:GIIbuttoneventfromnon-existentdevice%d\\n"" , VAR_1300 . VAR_1301 ) ; METHOD_153 ( VAR_1302 ) ; return ; } VAR_1303 = & VAR_1304 -> VAR_1305 [ VAR_1306 . VAR_1307 - 1 ] ; if ( ( VAR_1308 == VAR_1309 && ( VAR_1310 -> VAR_1311 & VAR_1312 ) == 0 ) || ( VAR_1313 == VAR_1314 && ( VAR_1315 -> VAR_1316 & VAR_1317 ) == 0 ) ) { TYPE_171 ( ""ERROR:Device%dcan\'tgenerateGIIbuttonevents\\n"" , VAR_1318 . VAR_1319 ) ; METHOD_154 ( VAR_1320 ) ; return ; } if ( VAR_1321 . VAR_1322 > VAR_1323 -> VAR_1324 ) { TYPE_172 ( ""ERROR:GIIbutton%deventfordevice%dexceedsbuttoncount(%d)\\n"" , VAR_1325 . VAR_1326 , VAR_1327 . VAR_1328 , VAR_1329 -> VAR_1330 ) ; METHOD_155 ( VAR_1331 ) ; return ; } TYPE_173 TYPE_174 TYPE_175 ( ""Device%dbutton%d%s\\n"" , VAR_1332 . VAR_1333 , VAR_1334 . VAR_1335 , VAR_1336 == VAR_1337 ? ""PRESS"" : ""release"" ) ; METHOD_156 ( VAR_1338 ) ; METHOD_157 ( VAR_1339 , VAR_1340 == VAR_1341 ? VAR_1342 : VAR_1343 , VAR_1344 . VAR_1345 ) ; break ; } case VAR_1346 : case VAR_1347 : { TYPE_176 VAR_1348 ; TYPE_177 VAR_1349 ; TYPE_178 * VAR_1350 ; METHOD_158 ( ( TYPE_179 * ) & VAR_1351 . VAR_1352 , VAR_1353 - 2 ) ; if ( VAR_1354 != * ( const TYPE_180 * ) & VAR_1355 ) { VAR_1356 . VAR_1357 = METHOD_159 ( VAR_1358 . VAR_1359 ) ; VAR_1360 . VAR_1361 = METHOD_160 ( VAR_1362 . VAR_1363 ) ; VAR_1364 . VAR_1365 = METHOD_161 ( VAR_1366 . VAR_1367 ) ; } if ( VAR_1368 != VAR_1369 + sizeof ( TYPE_181 ) * VAR_1370 . VAR_1371 ) { TYPE_182 ( ""ERROR:MalformedGIIvaluatorevent\\n"" ) ; METHOD_162 ( VAR_1372 ) ; return ; } if ( VAR_1373 > VAR_1374 ) { TYPE_183 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_163 ( VAR_1375 ) ; return ; } VAR_1376 -= VAR_1377 ; if ( VAR_1378 . VAR_1379 < 1 || VAR_1380 . VAR_1381 > VAR_1382 -> VAR_1383 ) { TYPE_184 ( ""ERROR:GIIvaluatoreventfromnon-existentdevice%d\\n"" , VAR_1384 . VAR_1385 ) ; METHOD_164 ( VAR_1386 ) ; return ; } VAR_1387 = & VAR_1388 -> VAR_1389 [ VAR_1390 . VAR_1391 - 1 ] ; if ( ( VAR_1392 == VAR_1393 && ( VAR_1394 -> VAR_1395 & VAR_1396 ) == 0 ) || ( VAR_1397 == VAR_1398 && ( VAR_1399 -> VAR_1400 & VAR_1401 ) == 0 ) ) { TYPE_185 ( ""ERROR:Device%dcannotgenerateGIIvaluatorevents\\n"" , VAR_1402 . VAR_1403 ) ; METHOD_165 ( VAR_1404 ) ; return ; } if ( VAR_1405 . VAR_1406 + VAR_1407 . VAR_1408 > VAR_1409 -> VAR_1410 ) { TYPE_186 ( ""ERROR:GIIvaluatoreventfordevice%dexceedsvaluatorcount(%d)\\n"" , VAR_1411 . VAR_1412 , VAR_1413 -> VAR_1414 ) ; METHOD_166 ( VAR_1415 ) ; return ; } TYPE_187 TYPE_188 TYPE_189 ( ""Device%dValuator%sfirst=%dcount=%d:\\n"" , VAR_1416 . VAR_1417 , VAR_1418 == VAR_1419 ? ""rel"" : ""ABS"" , VAR_1420 . VAR_1421 , VAR_1422 . VAR_1423 ) ; for ( VAR_1424 = VAR_1425 . VAR_1426 ; VAR_1427 < VAR_1428 . VAR_1429 + VAR_1430 . VAR_1431 ; VAR_1432 ++ ) { METHOD_167 ( ( TYPE_190 * ) & VAR_1433 -> VAR_1434 [ VAR_1435 ] , sizeof ( TYPE_191 ) ) ; if ( VAR_1436 != * ( const TYPE_192 * ) & VAR_1437 ) VAR_1438 -> VAR_1439 [ VAR_1440 ] = METHOD_168 ( ( TYPE_193 ) VAR_1441 -> VAR_1442 [ VAR_1443 ] ) ; TYPE_194 TYPE_195 VAR_1444 ( VAR_1445 , ""v[%d]=%d"" , VAR_1446 , VAR_1447 -> VAR_1448 [ VAR_1449 ] ) ; } TYPE_196 TYPE_197 VAR_1450 ( VAR_1451 , ""\\n"" ) ; if ( VAR_1452 . VAR_1453 > 0 ) { VAR_1454 -> VAR_1455 = VAR_1456 . VAR_1457 ; VAR_1458 -> VAR_1459 = VAR_1460 . VAR_1461 ; VAR_1462 -> VAR_1463 = VAR_1464 == VAR_1465 ? VAR_1466 : VAR_1467 ; METHOD_169 ( VAR_1468 , VAR_1469 , 0 ) ; } break ; } default : TYPE_198 ( ""ERROR:ThisservercannothandleGIIeventtype%d\\n"" , VAR_1470 ) ; METHOD_170 ( VAR_1471 ) ; return ; } } if ( VAR_1472 != 0 ) { TYPE_199 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_171 ( VAR_1473 ) ; return ; } break ; } } return ; } default : TYPE_200 ( ""rfbProcessClientNormalMessage:unknownmessagetype%d\\n"" , VAR_1474 . VAR_1475 ) ; TYPE_201 ( ""...closingconnection\\n"" ) ; METHOD_172 ( VAR_1476 ) ; return ; } }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; METHOD_1 ( ( TYPE_5 * ) & VAR_4 , 1 ) switch ( VAR_5 . VAR_6 ) { case VAR_7 : METHOD_2 ( ( ( TYPE_6 * ) & VAR_8 ) + 1 , VAR_9 - 1 ) VAR_10 -> VAR_11 . VAR_12 = VAR_13 . VAR_14 . VAR_15 . VAR_16 ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 . VAR_21 . VAR_22 . VAR_23 ; VAR_24 -> VAR_25 . VAR_26 = ( VAR_27 . VAR_28 . VAR_29 . VAR_30 ? 1 : 0 ) ; VAR_31 -> VAR_32 . VAR_33 = ( VAR_34 . VAR_35 . VAR_36 . VAR_37 ? 1 : 0 ) ; VAR_38 -> VAR_39 . VAR_40 = METHOD_3 ( VAR_41 . VAR_42 . VAR_43 . VAR_44 ) ; VAR_45 -> VAR_46 . VAR_47 = METHOD_4 ( VAR_48 . VAR_49 . VAR_50 . VAR_51 ) ; VAR_52 -> VAR_53 . VAR_54 = METHOD_5 ( VAR_55 . VAR_56 . VAR_57 . VAR_58 ) ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 . VAR_63 . VAR_64 . VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = VAR_69 . VAR_70 . VAR_71 . VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = VAR_76 . VAR_77 . VAR_78 . VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; METHOD_6 ( VAR_83 ) ; return ; case VAR_84 : METHOD_7 ( ( ( TYPE_7 * ) & VAR_85 ) + 1 , VAR_86 - 1 ) TYPE_8 ( ""rfbProcessClientNormalMessage:FixColourMapEntriesunsupported\\n"" ) ; METHOD_8 ( VAR_87 ) ; return ; case VAR_88 : { TYPE_9 VAR_89 ; TYPE_10 VAR_90 ; TYPE_11 VAR_91 = ! VAR_92 -> VAR_93 ; TYPE_12 VAR_94 = ! VAR_95 -> VAR_96 ; TYPE_13 VAR_97 = ! VAR_98 -> VAR_99 ; TYPE_14 VAR_100 = VAR_101 ; METHOD_9 ( ( ( TYPE_15 * ) & VAR_102 ) + 1 , VAR_103 - 1 ) VAR_104 . VAR_105 . VAR_106 = METHOD_10 ( VAR_107 . VAR_108 . VAR_109 ) ; VAR_110 -> VAR_111 = - 1 ; VAR_112 -> VAR_113 = VAR_114 ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = VAR_126 ; VAR_127 -> VAR_128 = VAR_129 ; VAR_130 -> VAR_131 = - 1 ; VAR_132 -> VAR_133 = - 1 ; for ( VAR_134 = 0 ; VAR_135 < VAR_136 . VAR_137 . VAR_138 ; VAR_139 ++ ) { METHOD_11 ( ( TYPE_16 * ) & VAR_140 , 4 ) VAR_141 = METHOD_12 ( VAR_142 ) ; switch ( VAR_143 ) { case VAR_144 : VAR_145 -> VAR_146 = VAR_147 ; break ; case VAR_148 : if ( VAR_149 -> VAR_150 == - 1 ) { VAR_151 -> VAR_152 = VAR_153 ; TYPE_17 ( ""Usingrawencodingforclient%s\\n"" , VAR_154 -> VAR_155 ) ; } break ; case VAR_156 : if ( VAR_157 -> VAR_158 == - 1 ) { VAR_159 -> VAR_160 = VAR_161 ; TYPE_18 ( ""Usingrreencodingforclient%s\\n"" , VAR_162 -> VAR_163 ) ; } break ; case VAR_164 : if ( VAR_165 -> VAR_166 == - 1 ) { VAR_167 -> VAR_168 = VAR_169 ; TYPE_19 ( ""UsingCoRREencodingforclient%s\\n"" , VAR_170 -> VAR_171 ) ; } break ; case VAR_172 : if ( VAR_173 -> VAR_174 == - 1 ) { VAR_175 -> VAR_176 = VAR_177 ; TYPE_20 ( ""Usinghextileencodingforclient%s\\n"" , VAR_178 -> VAR_179 ) ; } break ; case VAR_180 : if ( VAR_181 -> VAR_182 == - 1 ) { VAR_183 -> VAR_184 = VAR_185 ; TYPE_21 ( ""Usingzlibencodingforclient%s\\n"" , VAR_186 -> VAR_187 ) ; } break ; case VAR_188 : if ( VAR_189 -> VAR_190 == - 1 ) { VAR_191 -> VAR_192 = VAR_193 ; TYPE_22 ( ""UsingZRLEencodingforclient%s\\n"" , VAR_194 -> VAR_195 ) ; } break ; case VAR_196 : if ( VAR_197 -> VAR_198 == - 1 ) { VAR_199 -> VAR_200 = VAR_201 ; TYPE_23 ( ""UsingZYWRLEencodingforclient%s\\n"" , VAR_202 -> VAR_203 ) ; } break ; case VAR_204 : if ( VAR_205 -> VAR_206 == - 1 ) { VAR_207 -> VAR_208 = VAR_209 ; TYPE_24 ( ""Usingtightencodingforclient%s\\n"" , VAR_210 -> VAR_211 ) ; } break ; case VAR_212 : if ( ! VAR_213 -> VAR_214 ) { TYPE_25 ( ""EnablingX-stylecursorupdatesforclient%s\\n"" , VAR_215 -> VAR_216 ) ; VAR_217 -> VAR_218 = VAR_219 ; VAR_220 -> VAR_221 = VAR_222 ; VAR_223 -> VAR_224 = VAR_225 ; } break ; case VAR_226 : if ( ! VAR_227 -> VAR_228 ) { TYPE_26 ( ""Enablingfull-colorcursorupdatesforclient%s\\n"" , VAR_229 -> VAR_230 ) ; VAR_231 -> VAR_232 = VAR_233 ; VAR_234 -> VAR_235 = VAR_236 ; VAR_237 -> VAR_238 = VAR_239 ; } break ; case VAR_240 : if ( ! VAR_241 -> VAR_242 ) { TYPE_27 ( ""Enablingcursorpositionupdatesforclient%s\\n"" , VAR_243 -> VAR_244 ) ; VAR_245 -> VAR_246 = VAR_247 ; VAR_248 -> VAR_249 = VAR_250 ; VAR_251 -> VAR_252 = - 1 ; VAR_253 -> VAR_254 = - 1 ; } break ; case VAR_255 : if ( ! VAR_256 -> VAR_257 ) { TYPE_28 ( ""EnablingLastRectprotocolextensionforclient%s\\n"" , VAR_258 -> VAR_259 ) ; VAR_260 -> VAR_261 = VAR_262 ; } break ; case VAR_263 : if ( ! VAR_264 -> VAR_265 ) { TYPE_29 ( ""EnablingFenceprotocolextensionforclient%s\\n"" , VAR_266 -> VAR_267 ) ; VAR_268 -> VAR_269 = VAR_270 ; } break ; case VAR_271 : if ( ! VAR_272 -> VAR_273 ) { TYPE_30 ( ""EnablingContinuousUpdatesprotocolextensionforclient%s\\n"" , VAR_274 -> VAR_275 ) ; VAR_276 -> VAR_277 = VAR_278 ; } break ; case VAR_279 : if ( ! VAR_280 -> VAR_281 ) { if ( ! VAR_282 ) { TYPE_31 ( ""EnablingDesktopSizeprotocolextensionforclient%s\\n"" , VAR_283 -> VAR_284 ) ; VAR_285 -> VAR_286 = VAR_287 ; } else TYPE_32 ( ""WARNING:Remotedesktopresizingdisabledpersystempolicy.\\n"" ) ; } break ; case VAR_288 : if ( ! VAR_289 -> VAR_290 ) { if ( ! VAR_291 ) { TYPE_33 ( ""EnablingExtendedDesktopSizeprotocolextensionforclient%s\\n"" , VAR_292 -> VAR_293 ) ; VAR_294 -> VAR_295 = VAR_296 ; } else TYPE_34 ( ""WARNING:Remotedesktopresizingdisabledpersystempolicy.\\n"" ) ; } break ; case VAR_297 : if ( ! VAR_298 -> VAR_299 ) { TYPE_35 ( ""EnablingGIIextensionforclient%s\\n"" , VAR_300 -> VAR_301 ) ; VAR_302 -> VAR_303 = VAR_304 ; } break ; default : if ( VAR_305 >= ( TYPE_36 ) VAR_306 && VAR_307 <= ( TYPE_37 ) VAR_308 ) { VAR_309 -> VAR_310 = VAR_311 & 0x0F ; VAR_312 -> VAR_313 = VAR_314 & 0x0F ; if ( VAR_315 -> VAR_316 == VAR_317 ) VAR_318 = VAR_319 ; else TYPE_38 ( ""Usingcompressionlevel%dforclient%s\\n"" , VAR_320 -> VAR_321 , VAR_322 -> VAR_323 ) ; if ( VAR_324 == - 1 ) { if ( VAR_325 -> VAR_326 >= 5 ) { if ( ! METHOD_13 ( VAR_327 ) ) { METHOD_14 ( VAR_328 ) ; return ; } } else METHOD_15 ( VAR_329 ) ; } } else if ( VAR_330 >= ( TYPE_39 ) VAR_331 && VAR_332 <= ( TYPE_40 ) VAR_333 ) { VAR_334 -> VAR_335 = VAR_336 & 0xFF ; TYPE_41 ( ""UsingJPEGsubsampling%dforclient%s\\n"" , VAR_337 -> VAR_338 , VAR_339 -> VAR_340 ) ; } else if ( VAR_341 >= ( TYPE_42 ) VAR_342 && VAR_343 <= ( TYPE_43 ) VAR_344 ) { VAR_345 -> VAR_346 = VAR_347 [ VAR_348 & 0x0F ] ; VAR_349 -> VAR_350 = VAR_351 [ VAR_352 & 0x0F ] ; VAR_353 -> VAR_354 = VAR_355 & 0x0F ; if ( VAR_356 -> VAR_357 == VAR_358 ) TYPE_44 ( ""UsingJPEGsubsampling%d,Q%dforclient%s\\n"" , VAR_359 -> VAR_360 , VAR_361 -> VAR_362 , VAR_363 -> VAR_364 ) ; else TYPE_45 ( ""Usingimagequalitylevel%dforclient%s\\n"" , VAR_365 -> VAR_366 , VAR_367 -> VAR_368 ) ; } else if ( VAR_369 >= ( TYPE_46 ) VAR_370 + 1 && VAR_371 <= ( TYPE_47 ) VAR_372 ) { VAR_373 -> VAR_374 = VAR_375 & 0xFF ; TYPE_48 ( ""UsingJPEGquality%dforclient%s\\n"" , VAR_376 -> VAR_377 , VAR_378 -> VAR_379 ) ; } else { TYPE_49 ( ""rfbProcessClientNormalMessage:ignoringunknownencoding%d(%x)\\n"" , ( TYPE_50 ) VAR_380 , ( TYPE_51 ) VAR_381 ) ; } } } if ( VAR_382 -> VAR_383 == - 1 ) VAR_384 -> VAR_385 = VAR_386 ; if ( VAR_387 -> VAR_388 == VAR_389 && VAR_390 ) TYPE_52 ( ""UsingTightcompressionlevel%dforclient%s\\n"" , METHOD_16 ( VAR_391 ) , VAR_392 -> VAR_393 ) ; if ( VAR_394 -> VAR_395 && ! VAR_396 -> VAR_397 ) { TYPE_53 ( ""Disablingcursorpositionupdatesforclient%s\\n"" , VAR_398 -> VAR_399 ) ; VAR_400 -> VAR_401 = VAR_402 ; } if ( VAR_403 -> VAR_404 && VAR_405 ) { if ( ! METHOD_17 ( VAR_406 , VAR_407 , 0 , VAR_408 ) ) return ; } if ( VAR_409 -> VAR_410 && VAR_411 -> VAR_412 && VAR_413 ) { if ( ! METHOD_18 ( VAR_414 ) ) return ; } if ( VAR_415 -> VAR_416 && VAR_417 ) { TYPE_54 VAR_418 ; VAR_419 . VAR_420 = VAR_421 ; VAR_422 . VAR_423 = VAR_424 | VAR_425 ; VAR_426 . VAR_427 = METHOD_19 ( VAR_428 - 4 ) ; VAR_429 . VAR_430 = VAR_431 . VAR_432 = METHOD_20 ( 1 ) ; if ( METHOD_21 ( VAR_433 , ( TYPE_55 * ) & VAR_434 , VAR_435 ) < 0 ) { METHOD_22 ( ""rfbProcessClientNormalMessage:write"" ) ; METHOD_23 ( VAR_436 ) ; return ; } } return ; } case VAR_437 : { TYPE_56 VAR_438 ; TYPE_57 TYPE_58 ; METHOD_24 ( ( ( TYPE_59 * ) & VAR_439 ) + 1 , VAR_440 - 1 ) TYPE_60 . VAR_441 = METHOD_25 ( VAR_442 . VAR_443 . VAR_444 ) ; TYPE_61 . VAR_445 = METHOD_26 ( VAR_446 . VAR_447 . VAR_448 ) ; TYPE_62 . VAR_449 = TYPE_63 . VAR_450 + METHOD_27 ( VAR_451 . VAR_452 . VAR_453 ) ; TYPE_64 . VAR_454 = TYPE_65 . VAR_455 + METHOD_28 ( VAR_456 . VAR_457 . VAR_458 ) ; METHOD_29 ( VAR_459 , & VAR_460 , & TYPE_66 , 0 ) ; if ( ! VAR_461 . VAR_462 . VAR_463 || ! VAR_464 -> VAR_465 ) METHOD_30 ( VAR_466 , & VAR_467 -> VAR_468 , & VAR_469 -> VAR_470 , & VAR_471 ) ; if ( ! VAR_472 -> VAR_473 ) { VAR_474 -> VAR_475 = VAR_476 ; if ( ! VAR_477 -> VAR_478 . VAR_479 ) { if ( ! METHOD_31 ( VAR_480 , 0 , 0 ) ) { METHOD_32 ( VAR_481 , & VAR_482 ) ; return ; } } } if ( ! VAR_483 . VAR_484 . VAR_485 ) { METHOD_33 ( VAR_486 , & VAR_487 -> VAR_488 , & VAR_489 -> VAR_490 , & VAR_491 ) ; METHOD_34 ( VAR_492 , & VAR_493 -> VAR_494 , & VAR_495 -> VAR_496 , & VAR_497 ) ; METHOD_35 ( VAR_498 , & VAR_499 -> VAR_500 , & VAR_501 -> VAR_502 , & VAR_503 ) ; VAR_504 -> VAR_505 = VAR_506 ; } if ( METHOD_36 ( VAR_507 ) && ( ! VAR_508 -> VAR_509 || VAR_510 == 0 || METHOD_37 ( ) - VAR_511 -> VAR_512 >= ( TYPE_67 ) VAR_513 ) ) { if ( METHOD_38 ( VAR_514 ) ) VAR_515 -> VAR_516 = VAR_517 ; } METHOD_39 ( VAR_518 , & VAR_519 ) ; return ; } case VAR_520 : VAR_521 -> VAR_522 ++ ; METHOD_40 ( ( ( TYPE_68 * ) & VAR_523 ) + 1 , VAR_524 - 1 ) if ( ! VAR_525 && ! VAR_526 -> VAR_527 ) METHOD_41 ( ( TYPE_69 ) METHOD_42 ( VAR_528 . VAR_529 . VAR_530 ) , VAR_531 . VAR_532 . VAR_533 ) ; return ; case VAR_534 : VAR_535 -> VAR_536 ++ ; METHOD_43 ( ( ( TYPE_70 * ) & VAR_537 ) + 1 , VAR_538 - 1 ) if ( VAR_539 && ( VAR_540 != VAR_541 ) ) return ; if ( VAR_542 . VAR_543 . VAR_544 == 0 ) VAR_545 = VAR_546 ; else VAR_547 = VAR_548 ; if ( ! VAR_549 && ! VAR_550 -> VAR_551 ) { VAR_552 -> VAR_553 = ( TYPE_71 ) METHOD_44 ( VAR_554 . VAR_555 . VAR_556 ) ; VAR_557 -> VAR_558 = ( TYPE_72 ) METHOD_45 ( VAR_559 . VAR_560 . VAR_561 ) ; METHOD_46 ( VAR_562 . VAR_563 . VAR_564 , VAR_565 -> VAR_566 , VAR_567 -> VAR_568 , VAR_569 ) ; } return ; case VAR_570 : { TYPE_73 VAR_571 = 0 ; METHOD_47 ( ( ( TYPE_74 * ) & VAR_572 ) + 1 , VAR_573 - 1 ) VAR_574 . VAR_575 . VAR_576 = METHOD_48 ( VAR_577 . VAR_578 . VAR_579 ) ; if ( VAR_580 . VAR_581 . VAR_582 > VAR_583 ) { TYPE_75 ( ""Truncating%d-byteclipboardupdateto%dbytes.\\n"" , VAR_584 . VAR_585 . VAR_586 , VAR_587 ) ; VAR_588 = VAR_589 . VAR_590 . VAR_591 - VAR_592 ; VAR_593 . VAR_594 . VAR_595 = VAR_596 ; } if ( VAR_597 . VAR_598 . VAR_599 <= 0 ) return ; VAR_600 = ( TYPE_76 * ) METHOD_49 ( VAR_601 . VAR_602 . VAR_603 ) ; if ( VAR_604 == VAR_605 ) { METHOD_50 ( ""rfbProcessClientNormalMessage:rfbClientCutTextoutofmemory"" ) ; METHOD_51 ( VAR_606 ) ; return ; } if ( ( VAR_607 = METHOD_52 ( VAR_608 , VAR_609 , VAR_610 . VAR_611 . VAR_612 ) ) <= 0 ) { if ( VAR_613 != 0 ) METHOD_53 ( ""rfbProcessClientNormalMessage:read"" ) ; METHOD_54 ( VAR_614 ) ; METHOD_55 ( VAR_615 ) ; return ; } if ( VAR_616 > 0 ) { if ( ( VAR_617 = METHOD_56 ( VAR_618 , VAR_619 ) ) <= 0 ) { if ( VAR_620 != 0 ) METHOD_57 ( ""rfbProcessClientNormalMessage:read"" ) ; METHOD_58 ( VAR_621 ) ; METHOD_59 ( VAR_622 ) ; return ; } } if ( ! VAR_623 && ! VAR_624 -> VAR_625 && ! VAR_626 ) { METHOD_60 ( VAR_627 , VAR_628 . VAR_629 . VAR_630 ) ; if ( VAR_631 ) METHOD_61 ( VAR_632 , VAR_633 . VAR_634 . VAR_635 ) ; } METHOD_62 ( VAR_636 ) ; return ; } case VAR_637 : { TYPE_77 TYPE_78 ; METHOD_63 ( ( ( TYPE_79 * ) & VAR_638 ) + 1 , VAR_639 - 1 ) if ( ! VAR_640 -> VAR_641 || ! VAR_642 -> VAR_643 ) { TYPE_80 ( ""Ignoringrequesttoenablecontinuousupdatesbecausetheclientdoesnot\\n"" ) ; TYPE_81 ( ""supporttheflowcontrolextensions.\\n"" ) ; return ; } TYPE_82 . VAR_644 = METHOD_64 ( VAR_645 . VAR_646 . VAR_647 ) ; TYPE_83 . VAR_648 = METHOD_65 ( VAR_649 . VAR_650 . VAR_651 ) ; TYPE_84 . VAR_652 = TYPE_85 . VAR_653 + METHOD_66 ( VAR_654 . VAR_655 . VAR_656 ) ; TYPE_86 . VAR_657 = TYPE_87 . VAR_658 + METHOD_67 ( VAR_659 . VAR_660 . VAR_661 ) ; METHOD_68 ( VAR_662 , & VAR_663 -> VAR_664 , & TYPE_88 , 0 ) ; VAR_665 -> VAR_666 = VAR_667 . VAR_668 . VAR_669 ; if ( VAR_670 -> VAR_671 ) { METHOD_69 ( VAR_672 , & VAR_673 -> VAR_674 ) ; if ( ! METHOD_70 ( VAR_675 ) ) return ; } else { if ( ! METHOD_71 ( VAR_676 ) ) return ; } TYPE_89 ( ""Continuousupdates%s\\n"" , VAR_677 -> VAR_678 ? ""enabled"" : ""disabled"" ) ; return ; } case VAR_679 : { TYPE_90 VAR_680 ; TYPE_91 VAR_681 [ 64 ] ; METHOD_72 ( ( ( TYPE_92 * ) & VAR_682 ) + 1 , VAR_683 - 1 ) VAR_684 = METHOD_73 ( VAR_685 . VAR_686 . VAR_687 ) ; METHOD_74 ( VAR_688 , VAR_689 . VAR_690 . VAR_691 ) if ( VAR_692 . VAR_693 . VAR_694 > sizeof ( VAR_695 ) ) TYPE_93 ( ""Ignoringfence.Payloadof%dbytesistoolarge.\\n"" , VAR_696 . VAR_697 . VAR_698 ) ; else METHOD_75 ( VAR_699 , VAR_700 , VAR_701 . VAR_702 . VAR_703 , VAR_704 ) ; return ; } METHOD_76 ( VAR_705 , VAR_706 ... ) { if ( ! METHOD_77 ( VAR_707 ) ) snprintf ( VAR_708 , 256 , ""DesktopresizeERROR:"" VAR_709 ""\\n"" , VAR_710 ) ; VAR_711 = VAR_712 ; } case VAR_713 : { TYPE_94 VAR_714 ; struct STRUCT_OR_UNION_0 VAR_715 ; TYPE_95 VAR_716 ; TYPE_96 VAR_717 = VAR_718 ; TYPE_97 VAR_719 [ 256 ] = ""\\0"" ; TYPE_98 VAR_720 = VAR_721 . VAR_722 [ 0 ] ; METHOD_78 ( ( ( TYPE_99 * ) & VAR_723 ) + 1 , VAR_724 - 1 ) if ( VAR_725 . VAR_726 . VAR_727 < 1 ) METHOD_79 ( ""Requestednumberofscreens%disinvalid"" , VAR_728 . VAR_729 . VAR_730 ) ; VAR_731 . VAR_732 . VAR_733 = METHOD_80 ( VAR_734 . VAR_735 . VAR_736 ) ; VAR_737 . VAR_738 . VAR_739 = METHOD_81 ( VAR_740 . VAR_741 . VAR_742 ) ; if ( VAR_743 . VAR_744 . VAR_745 < 1 || VAR_746 . VAR_747 . VAR_748 < 1 ) METHOD_82 ( ""Requestedframebufferdimensions%dx%dareinvalid"" , VAR_749 . VAR_750 . VAR_751 , VAR_752 . VAR_753 . VAR_754 ) ; METHOD_83 ( & VAR_755 ) ; for ( VAR_756 = 0 ; VAR_757 < VAR_758 . VAR_759 . VAR_760 ; VAR_761 ++ ) { TYPE_100 * VAR_762 = METHOD_84 ( 0 , 0 , 0 , 0 , 0 , 0 ) ; METHOD_85 ( ( TYPE_101 * ) & VAR_763 -> VAR_764 , sizeof ( VAR_765 ) ) VAR_766 -> VAR_767 . VAR_768 = METHOD_86 ( VAR_769 -> VAR_770 . VAR_771 ) ; VAR_772 -> VAR_773 . VAR_774 = METHOD_87 ( VAR_775 -> VAR_776 . VAR_777 ) ; VAR_778 -> VAR_779 . VAR_780 = METHOD_88 ( VAR_781 -> VAR_782 . VAR_783 ) ; VAR_784 -> VAR_785 . VAR_786 = METHOD_89 ( VAR_787 -> VAR_788 . VAR_789 ) ; VAR_790 -> VAR_791 . VAR_792 = METHOD_90 ( VAR_793 -> VAR_794 . VAR_795 ) ; VAR_796 -> VAR_797 . VAR_798 = METHOD_91 ( VAR_799 -> VAR_800 . VAR_801 ) ; if ( VAR_802 -> VAR_803 . VAR_804 < 1 || VAR_805 -> VAR_806 . VAR_807 < 1 ) METHOD_92 ( ""Screen0x%.8xrequesteddimensions%dx%dareinvalid"" , ( unsigned TYPE_102 ) VAR_808 -> VAR_809 . VAR_810 , VAR_811 -> VAR_812 . VAR_813 , VAR_814 -> VAR_815 . VAR_816 ) ; if ( VAR_817 -> VAR_818 . VAR_819 >= VAR_820 . VAR_821 . VAR_822 || VAR_823 -> VAR_824 . VAR_825 >= VAR_826 . VAR_827 . VAR_828 || VAR_829 -> VAR_830 . VAR_831 + VAR_832 -> VAR_833 . VAR_834 > VAR_835 . VAR_836 . VAR_837 || VAR_838 -> VAR_839 . VAR_840 + VAR_841 -> VAR_842 . VAR_843 > VAR_844 . VAR_845 . VAR_846 ) METHOD_93 ( ""Screen0x%.8xrequestedgeometry%dx%d+%d+%dexceedsrequestedframebufferdimensions"" , ( unsigned TYPE_103 ) VAR_847 -> VAR_848 . VAR_849 , VAR_850 -> VAR_851 . VAR_852 , VAR_853 -> VAR_854 . VAR_855 , VAR_856 -> VAR_857 . VAR_858 , VAR_859 -> VAR_860 . VAR_861 ) ; if ( METHOD_94 ( & VAR_862 , VAR_863 -> VAR_864 . VAR_865 ) ) { METHOD_95 ( ""Screen0x%.8xduplicateID"" , ( unsigned TYPE_104 ) VAR_866 -> VAR_867 . VAR_868 ) ; METHOD_96 ( VAR_869 ) ; } else METHOD_97 ( & VAR_870 , VAR_871 ) ; } if ( VAR_872 -> VAR_873 ) { TYPE_105 ( ""NOTICE:Ignoringremotedesktopresizerequestfromaview-onlyclient.\\n"" ) ; VAR_874 = VAR_875 ; } else if ( VAR_876 == VAR_877 ) { VAR_878 = METHOD_98 ( VAR_879 , VAR_880 , VAR_881 . VAR_882 . VAR_883 , VAR_884 . VAR_885 . VAR_886 , & VAR_887 ) ; if ( VAR_888 == VAR_889 ) return ; } else TYPE_106 ( VAR_890 ) ; METHOD_99 ( & VAR_891 ) ; for ( VAR_892 = VAR_893 ; VAR_894 ; VAR_895 = VAR_896 -> VAR_897 ) { if ( VAR_898 == VAR_899 ) { VAR_900 -> VAR_901 = VAR_902 ; VAR_903 -> VAR_904 = VAR_905 ; VAR_906 -> VAR_907 = VAR_908 ; METHOD_100 ( VAR_909 ) ; break ; } } return ; } case VAR_910 : { TYPE_107 VAR_911 , VAR_912 , VAR_913 ; METHOD_101 ( ( TYPE_108 * ) & VAR_914 , 1 ) ; VAR_915 = ( VAR_916 & VAR_917 ) ? 0 : 1 ; VAR_918 = VAR_919 & ~ VAR_920 ; switch ( VAR_921 ) { case VAR_922 : METHOD_102 ( ( TYPE_109 * ) & VAR_923 . VAR_924 . VAR_925 , VAR_926 - 2 ) ; if ( VAR_927 != * ( const TYPE_110 * ) & VAR_928 ) { VAR_929 . VAR_930 . VAR_931 = METHOD_103 ( VAR_932 . VAR_933 . VAR_934 ) ; VAR_935 . VAR_936 . VAR_937 = METHOD_104 ( VAR_938 . VAR_939 . VAR_940 ) ; } if ( VAR_941 . VAR_942 . VAR_943 != VAR_944 - 4 || VAR_945 . VAR_946 . VAR_947 < 1 ) { TYPE_111 ( ""ERROR:MalformedGIIclientversionmessage\\n"" ) ; METHOD_105 ( VAR_948 ) ; return ; } TYPE_112 ( ""ClientsupportsGIIversion%d\\n"" , VAR_949 . VAR_950 . VAR_951 ) ; break ; case VAR_952 : { TYPE_113 VAR_953 ; TYPE_114 VAR_954 ; TYPE_115 VAR_955 ; METHOD_106 ( & VAR_956 , 0 , sizeof ( VAR_957 ) ) ; VAR_958 . VAR_959 = 0 ; METHOD_107 ( ( TYPE_116 * ) & VAR_960 . VAR_961 . VAR_962 , VAR_963 - 2 ) ; if ( VAR_964 != * ( const TYPE_117 * ) & VAR_965 ) { VAR_966 . VAR_967 . VAR_968 = METHOD_108 ( VAR_969 . VAR_970 . VAR_971 ) ; VAR_972 . VAR_973 . VAR_974 = METHOD_109 ( VAR_975 . VAR_976 . VAR_977 ) ; VAR_978 . VAR_979 . VAR_980 = METHOD_110 ( VAR_981 . VAR_982 . VAR_983 ) ; VAR_984 . VAR_985 . VAR_986 = METHOD_111 ( VAR_987 . VAR_988 . VAR_989 ) ; VAR_990 . VAR_991 . VAR_992 = METHOD_112 ( VAR_993 . VAR_994 . VAR_995 ) ; VAR_996 . VAR_997 . VAR_998 = METHOD_113 ( VAR_999 . VAR_1000 . VAR_1001 ) ; VAR_1002 . VAR_1003 . VAR_1004 = METHOD_114 ( VAR_1005 . VAR_1006 . VAR_1007 ) ; } TYPE_118 ( ""GIIDeviceCreate:%s\\n"" , VAR_1008 . VAR_1009 . VAR_1010 ) ; TYPE_119 TYPE_120 TYPE_121 ( ""VendorID:%d\\n"" , VAR_1011 . VAR_1012 . VAR_1013 ) ; TYPE_122 ( ""ProductID:%d\\n"" , VAR_1014 . VAR_1015 . VAR_1016 ) ; TYPE_123 ( ""Eventmask:%.8x\\n"" , VAR_1017 . VAR_1018 . VAR_1019 ) ; TYPE_124 ( ""Registers:%d\\n"" , VAR_1020 . VAR_1021 . VAR_1022 ) ; TYPE_125 ( ""Valuators:%d\\n"" , VAR_1023 . VAR_1024 . VAR_1025 ) ; TYPE_126 ( ""Buttons:%d\\n"" , VAR_1026 . VAR_1027 . VAR_1028 ) ; if ( VAR_1029 . VAR_1030 . VAR_1031 != VAR_1032 - 4 + VAR_1033 . VAR_1034 . VAR_1035 * VAR_1036 ) { TYPE_127 ( ""ERROR:MalformedGIIdevicecreatemessage\\n"" ) ; METHOD_115 ( VAR_1037 ) ; return ; } if ( VAR_1038 . VAR_1039 . VAR_1040 > VAR_1041 ) { TYPE_128 ( ""GIIdevicecreateERROR:%dbuttonsexceedsmaxof%d\\n"" , VAR_1042 . VAR_1043 . VAR_1044 , VAR_1045 ) ; METHOD_116 ( VAR_1046 . VAR_1047 . VAR_1048 * VAR_1049 ) ; goto VAR_1050 ; } if ( VAR_1051 . VAR_1052 . VAR_1053 > VAR_1054 ) { TYPE_129 ( ""GIIdevicecreateERROR:%dvaluatorsexceedsmaxof%d\\n"" , VAR_1055 . VAR_1056 . VAR_1057 , VAR_1058 ) ; METHOD_117 ( VAR_1059 . VAR_1060 . VAR_1061 * VAR_1062 ) ; goto VAR_1063 ; } METHOD_118 ( & VAR_1064 . VAR_1065 , VAR_1066 . VAR_1067 . VAR_1068 , 32 ) ; VAR_1069 . VAR_1070 = VAR_1071 . VAR_1072 . VAR_1073 ; VAR_1074 . VAR_1075 = VAR_1076 . VAR_1077 . VAR_1078 ; VAR_1079 . VAR_1080 = VAR_1081 . VAR_1082 . VAR_1083 ; VAR_1084 . VAR_1085 = ( VAR_1086 . VAR_1087 & VAR_1088 ) ? VAR_1089 : VAR_1090 ; VAR_1091 . VAR_1092 = VAR_1093 . VAR_1094 . VAR_1095 ; if ( VAR_1096 . VAR_1097 == VAR_1098 ) { TYPE_130 ( ""GIIdevicecreateERROR:relativevaluatorsnotsupported(yet)\\n"" ) ; METHOD_119 ( VAR_1099 . VAR_1100 . VAR_1101 * VAR_1102 ) ; goto VAR_1103 ; } for ( VAR_1104 = 0 ; VAR_1105 < VAR_1106 . VAR_1107 ; VAR_1108 ++ ) { TYPE_131 * VAR_1109 = & VAR_1110 . VAR_1111 [ VAR_1112 ] ; METHOD_120 ( ( TYPE_132 * ) VAR_1113 , VAR_1114 ) ; if ( VAR_1115 != * ( const TYPE_133 * ) & VAR_1116 ) { VAR_1117 -> VAR_1118 = METHOD_121 ( VAR_1119 -> VAR_1120 ) ; VAR_1121 -> VAR_1122 = METHOD_122 ( ( TYPE_134 ) VAR_1123 -> VAR_1124 ) ; VAR_1125 -> VAR_1126 = METHOD_123 ( ( TYPE_135 ) VAR_1127 -> VAR_1128 ) ; VAR_1129 -> VAR_1130 = METHOD_124 ( ( TYPE_136 ) VAR_1131 -> VAR_1132 ) ; VAR_1133 -> VAR_1134 = METHOD_125 ( VAR_1135 -> VAR_1136 ) ; VAR_1137 -> VAR_1138 = METHOD_126 ( ( TYPE_137 ) VAR_1139 -> VAR_1140 ) ; VAR_1141 -> VAR_1142 = METHOD_127 ( ( TYPE_138 ) VAR_1143 -> VAR_1144 ) ; VAR_1145 -> VAR_1146 = METHOD_128 ( ( TYPE_139 ) VAR_1147 -> VAR_1148 ) ; VAR_1149 -> VAR_1150 = METHOD_129 ( ( TYPE_140 ) VAR_1151 -> VAR_1152 ) ; } TYPE_141 TYPE_142 TYPE_143 ( ""Valuator:%s(%s)\\n"" , VAR_1153 -> VAR_1154 , VAR_1155 -> VAR_1156 ) ; TYPE_144 ( ""Index:%d\\n"" , VAR_1157 -> VAR_1158 ) ; TYPE_145 ( ""Range:min=%d,center=%d,max=%d\\n"" , VAR_1159 -> VAR_1160 , VAR_1161 -> VAR_1162 , VAR_1163 -> VAR_1164 ) ; TYPE_146 ( ""SIunit:%d\\n"" , VAR_1165 -> VAR_1166 ) ; TYPE_147 ( ""SIadd:%d\\n"" , VAR_1167 -> VAR_1168 ) ; TYPE_148 ( ""SImultiply:%d\\n"" , VAR_1169 -> VAR_1170 ) ; TYPE_149 ( ""SIdivide:%d\\n"" , VAR_1171 -> VAR_1172 ) ; TYPE_150 ( ""SIshift:%d\\n"" , VAR_1173 -> VAR_1174 ) ; } for ( VAR_1175 = 0 ; VAR_1176 < VAR_1177 -> VAR_1178 ; VAR_1179 ++ ) { if ( ! METHOD_130 ( VAR_1180 . VAR_1181 , VAR_1182 -> VAR_1183 [ VAR_1184 ] . VAR_1185 ) ) { TYPE_151 ( ""Device\\\'%s\\\'alreadyexistswithGIIdeviceID%d\\n"" , VAR_1186 . VAR_1187 , VAR_1188 + 1 ) ; VAR_1189 . VAR_1190 = METHOD_131 ( VAR_1191 + 1 ) ; goto VAR_1192 ; } } if ( VAR_1193 || METHOD_132 ( & VAR_1194 ) ) { METHOD_133 ( & VAR_1195 -> VAR_1196 [ VAR_1197 -> VAR_1198 ] , & VAR_1199 , sizeof ( VAR_1200 ) ) ; VAR_1201 -> VAR_1202 ++ ; VAR_1203 . VAR_1204 = METHOD_134 ( VAR_1205 -> VAR_1206 ) ; } TYPE_152 ( ""GIIdeviceID=%d\\n"" , VAR_1207 -> VAR_1208 ) ; VAR_1209 : VAR_1210 . VAR_1211 = VAR_1212 ; VAR_1213 . VAR_1214 = VAR_1215 | VAR_1216 ; VAR_1217 . VAR_1218 = METHOD_135 ( VAR_1219 - 4 ) ; if ( METHOD_136 ( VAR_1220 , ( TYPE_153 * ) & VAR_1221 , VAR_1222 ) < 0 ) { METHOD_137 ( ""rfbProcessClientNormalMessage:write"" ) ; METHOD_138 ( VAR_1223 ) ; return ; } break ; } case VAR_1224 : METHOD_139 ( ( TYPE_154 * ) & VAR_1225 . VAR_1226 . VAR_1227 , VAR_1228 - 2 ) ; if ( VAR_1229 != * ( const TYPE_155 * ) & VAR_1230 ) { VAR_1231 . VAR_1232 . VAR_1233 = METHOD_140 ( VAR_1234 . VAR_1235 . VAR_1236 ) ; VAR_1237 . VAR_1238 . VAR_1239 = METHOD_141 ( VAR_1240 . VAR_1241 . VAR_1242 ) ; } if ( VAR_1243 . VAR_1244 . VAR_1245 != VAR_1246 - 4 ) { TYPE_156 ( ""ERROR:MalformedGIIdevicecreatemessage\\n"" ) ; METHOD_142 ( VAR_1247 ) ; return ; } METHOD_143 ( VAR_1248 , VAR_1249 . VAR_1250 . VAR_1251 - 1 ) ; break ; case VAR_1252 : { TYPE_157 VAR_1253 ; METHOD_144 ( ( TYPE_158 * ) & VAR_1254 , sizeof ( TYPE_159 ) ) ; if ( VAR_1255 != * ( const TYPE_160 * ) & VAR_1256 ) VAR_1257 = METHOD_145 ( VAR_1258 ) ; while ( VAR_1259 > 0 ) { TYPE_161 VAR_1260 , VAR_1261 ; METHOD_146 ( ( TYPE_162 * ) & VAR_1262 , 1 ) ; METHOD_147 ( ( TYPE_163 * ) & VAR_1263 , 1 ) ; switch ( VAR_1264 ) { case VAR_1265 : case VAR_1266 : { TYPE_164 VAR_1267 ; TYPE_165 * VAR_1268 ; METHOD_148 ( ( TYPE_166 * ) & VAR_1269 . VAR_1270 , VAR_1271 - 2 ) ; if ( VAR_1272 != * ( const TYPE_167 * ) & VAR_1273 ) { VAR_1274 . VAR_1275 = METHOD_149 ( VAR_1276 . VAR_1277 ) ; VAR_1278 . VAR_1279 = METHOD_150 ( VAR_1280 . VAR_1281 ) ; } if ( VAR_1282 != VAR_1283 || VAR_1284 . VAR_1285 <= 0 || VAR_1286 . VAR_1287 < 1 ) { TYPE_168 ( ""ERROR:MalformedGIIbuttonevent\\n"" ) ; METHOD_151 ( VAR_1288 ) ; return ; } if ( VAR_1289 > VAR_1290 ) { TYPE_169 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_152 ( VAR_1291 ) ; return ; } VAR_1292 -= VAR_1293 ; if ( VAR_1294 . VAR_1295 < 1 || VAR_1296 . VAR_1297 > VAR_1298 -> VAR_1299 ) { TYPE_170 ( ""ERROR:GIIbuttoneventfromnon-existentdevice%d\\n"" , VAR_1300 . VAR_1301 ) ; METHOD_153 ( VAR_1302 ) ; return ; } VAR_1303 = & VAR_1304 -> VAR_1305 [ VAR_1306 . VAR_1307 - 1 ] ; if ( ( VAR_1308 == VAR_1309 && ( VAR_1310 -> VAR_1311 & VAR_1312 ) == 0 ) || ( VAR_1313 == VAR_1314 && ( VAR_1315 -> VAR_1316 & VAR_1317 ) == 0 ) ) { TYPE_171 ( ""ERROR:Device%dcan\'tgenerateGIIbuttonevents\\n"" , VAR_1318 . VAR_1319 ) ; METHOD_154 ( VAR_1320 ) ; return ; } if ( VAR_1321 . VAR_1322 > VAR_1323 -> VAR_1324 ) { TYPE_172 ( ""ERROR:GIIbutton%deventfordevice%dexceedsbuttoncount(%d)\\n"" , VAR_1325 . VAR_1326 , VAR_1327 . VAR_1328 , VAR_1329 -> VAR_1330 ) ; METHOD_155 ( VAR_1331 ) ; return ; } TYPE_173 TYPE_174 TYPE_175 ( ""Device%dbutton%d%s\\n"" , VAR_1332 . VAR_1333 , VAR_1334 . VAR_1335 , VAR_1336 == VAR_1337 ? ""PRESS"" : ""release"" ) ; METHOD_156 ( VAR_1338 ) ; METHOD_157 ( VAR_1339 , VAR_1340 == VAR_1341 ? VAR_1342 : VAR_1343 , VAR_1344 . VAR_1345 ) ; break ; } case VAR_1346 : case VAR_1347 : { TYPE_176 VAR_1348 ; TYPE_177 VAR_1349 ; TYPE_178 * VAR_1350 ; METHOD_158 ( ( TYPE_179 * ) & VAR_1351 . VAR_1352 , VAR_1353 - 2 ) ; if ( VAR_1354 != * ( const TYPE_180 * ) & VAR_1355 ) { VAR_1356 . VAR_1357 = METHOD_159 ( VAR_1358 . VAR_1359 ) ; VAR_1360 . VAR_1361 = METHOD_160 ( VAR_1362 . VAR_1363 ) ; VAR_1364 . VAR_1365 = METHOD_161 ( VAR_1366 . VAR_1367 ) ; } if ( VAR_1368 != VAR_1369 + sizeof ( TYPE_181 ) * VAR_1370 . VAR_1371 ) { TYPE_182 ( ""ERROR:MalformedGIIvaluatorevent\\n"" ) ; METHOD_162 ( VAR_1372 ) ; return ; } if ( VAR_1373 > VAR_1374 ) { TYPE_183 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_163 ( VAR_1375 ) ; return ; } VAR_1376 -= VAR_1377 ; if ( VAR_1378 . VAR_1379 < 1 || VAR_1380 . VAR_1381 > VAR_1382 -> VAR_1383 ) { TYPE_184 ( ""ERROR:GIIvaluatoreventfromnon-existentdevice%d\\n"" , VAR_1384 . VAR_1385 ) ; METHOD_164 ( VAR_1386 ) ; return ; } VAR_1387 = & VAR_1388 -> VAR_1389 [ VAR_1390 . VAR_1391 - 1 ] ; if ( ( VAR_1392 == VAR_1393 && ( VAR_1394 -> VAR_1395 & VAR_1396 ) == 0 ) || ( VAR_1397 == VAR_1398 && ( VAR_1399 -> VAR_1400 & VAR_1401 ) == 0 ) ) { TYPE_185 ( ""ERROR:Device%dcannotgenerateGIIvaluatorevents\\n"" , VAR_1402 . VAR_1403 ) ; METHOD_165 ( VAR_1404 ) ; return ; } if ( VAR_1405 . VAR_1406 + VAR_1407 . VAR_1408 > VAR_1409 -> VAR_1410 ) { TYPE_186 ( ""ERROR:GIIvaluatoreventfordevice%dexceedsvaluatorcount(%d)\\n"" , VAR_1411 . VAR_1412 , VAR_1413 -> VAR_1414 ) ; METHOD_166 ( VAR_1415 ) ; return ; } TYPE_187 TYPE_188 TYPE_189 ( ""Device%dValuator%sfirst=%dcount=%d:\\n"" , VAR_1416 . VAR_1417 , VAR_1418 == VAR_1419 ? ""rel"" : ""ABS"" , VAR_1420 . VAR_1421 , VAR_1422 . VAR_1423 ) ; for ( VAR_1424 = VAR_1425 . VAR_1426 ; VAR_1427 < VAR_1428 . VAR_1429 + VAR_1430 . VAR_1431 ; VAR_1432 ++ ) { METHOD_167 ( ( TYPE_190 * ) & VAR_1433 -> VAR_1434 [ VAR_1435 ] , sizeof ( TYPE_191 ) ) ; if ( VAR_1436 != * ( const TYPE_192 * ) & VAR_1437 ) VAR_1438 -> VAR_1439 [ VAR_1440 ] = METHOD_168 ( ( TYPE_193 ) VAR_1441 -> VAR_1442 [ VAR_1443 ] ) ; TYPE_194 TYPE_195 VAR_1444 ( VAR_1445 , ""v[%d]=%d"" , VAR_1446 , VAR_1447 -> VAR_1448 [ VAR_1449 ] ) ; } TYPE_196 TYPE_197 VAR_1450 ( VAR_1451 , ""\\n"" ) ; if ( VAR_1452 . VAR_1453 > 0 ) { VAR_1454 -> VAR_1455 = VAR_1456 . VAR_1457 ; VAR_1458 -> VAR_1459 = VAR_1460 . VAR_1461 ; VAR_1462 -> VAR_1463 = VAR_1464 == VAR_1465 ? VAR_1466 : VAR_1467 ; METHOD_169 ( VAR_1468 , VAR_1469 , 0 ) ; } break ; } default : TYPE_198 ( ""ERROR:ThisservercannothandleGIIeventtype%d\\n"" , VAR_1470 ) ; METHOD_170 ( VAR_1471 ) ; return ; } } if ( VAR_1472 != 0 ) { TYPE_199 ( ""ERROR:MalformedGIIeventmessage\\n"" ) ; METHOD_171 ( VAR_1473 ) ; return ; } break ; } } return ; } default : TYPE_200 ( ""rfbProcessClientNormalMessage:unknownmessagetype%d\\n"" , VAR_1474 . VAR_1475 ) ; TYPE_201 ( ""...closingconnection\\n"" ) ; METHOD_172 ( VAR_1476 ) ; return ; } }",62
63,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 . VAR_9 / 8 ; TYPE_6 VAR_10 = VAR_11 / VAR_12 ; TYPE_7 VAR_13 ; TYPE_8 * VAR_14 = ( TYPE_9 * ) VAR_15 ;  TYPE_10 * VAR_16 = ( TYPE_11 * ) METHOD_2 ( VAR_17 ) ;  if ( ( VAR_18 % ( VAR_19 * VAR_20 ) ) != 0 ) { METHOD_3 ( VAR_21 -> VAR_22 , ""fpDiff"" , ""%s"" , ""(cc%(bps*stride))!=0"" ) ; return 0 ; }  if ( ! VAR_23 )  return 0 ; METHOD_4 ( VAR_24 , VAR_25 , VAR_26 ) ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 ; VAR_30 ++ ) { TYPE_12 VAR_31 ; for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; VAR_35 ++ ) { if VAR_36 VAR_37 [ VAR_38 * VAR_39 + VAR_40 ] = VAR_41 [ VAR_42 * VAR_43 + VAR_44 ] ; else VAR_45 [ ( VAR_46 - VAR_47 - 1 ) * VAR_48 + VAR_49 ] = VAR_50 [ VAR_51 * VAR_52 + VAR_53 ] ; } } METHOD_5 ( VAR_54 ) ; VAR_55 = ( TYPE_13 * ) VAR_56 ; VAR_57 += VAR_58 - VAR_59 - 1 ; for ( VAR_60 = VAR_61 ; VAR_62 > VAR_63 ; VAR_64 -= VAR_65 ) REPEAT4 ( VAR_66 , VAR_67 [ VAR_68 ] = ( unsigned TYPE_14 ) ( ( VAR_69 [ VAR_70 ] - VAR_71 [ 0 ] ) & 0xff ) ; VAR_72 -- ) return 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 . VAR_9 / 8 ; TYPE_6 VAR_10 = VAR_11 / VAR_12 ; TYPE_7 VAR_13 ; TYPE_8 * VAR_14 = ( TYPE_9 * ) VAR_15 ; TYPE_10 * VAR_16 = ( TYPE_11 * ) METHOD_2 ( VAR_17 ) ; if ( ( VAR_18 % ( VAR_19 * VAR_20 ) ) != 0 ) { METHOD_3 ( VAR_21 -> VAR_22 , ""fpDiff"" , ""%s"" , ""(cc%(bps*stride))!=0"" ) ; return 0 ; } VAR_54 = ( TYPE_13 * ) METHOD_2 ( VAR_61 ) ; if ( ! VAR_23 ) return 0 ; METHOD_4 ( VAR_24 , VAR_25 , VAR_26 ) ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 ; VAR_30 ++ ) { TYPE_12 VAR_31 ; for ( VAR_32 = 0 ; VAR_33 < VAR_34 ; VAR_35 ++ ) { if VAR_36 VAR_37 [ VAR_38 * VAR_39 + VAR_40 ] = VAR_41 [ VAR_42 * VAR_43 + VAR_44 ] ; else VAR_45 [ ( VAR_46 - VAR_47 - 1 ) * VAR_48 + VAR_49 ] = VAR_50 [ VAR_51 * VAR_52 + VAR_53 ] ; } } METHOD_5 ( VAR_54 ) ; VAR_55 = ( TYPE_13 * ) VAR_56 ; VAR_57 += VAR_58 - VAR_59 - 1 ; for ( VAR_60 = VAR_61 ; VAR_62 > VAR_63 ; VAR_64 -= VAR_65 ) REPEAT4 ( VAR_66 , VAR_67 [ VAR_68 ] = ( unsigned TYPE_14 ) ( ( VAR_69 [ VAR_70 ] - VAR_71 [ 0 ] ) & 0xff ) ; VAR_72 -- ) return 1 ; }",63
64,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 ; TYPE_3 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 , & VAR_10 -> VAR_11 ) ) || ! ( VAR_12 = METHOD_2 ( VAR_13 , & VAR_14 -> VAR_15 , & VAR_16 -> VAR_17 ) ) ) return 0 ; VAR_18 = METHOD_3 ( VAR_19 , & VAR_20 -> VAR_21 ) ; VAR_22 = METHOD_4 ( * VAR_23 ++ ) ; if ( VAR_24 == 0 || VAR_25 > VAR_26 || VAR_27 >= VAR_28 ) return 0 ; VAR_29 -> VAR_30 = VAR_31 = METHOD_5 ( * ( VAR_32 -> VAR_33 ++ ) ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 = ( TYPE_4 * ) VAR_38 ; VAR_39 = & VAR_40 -> VAR_41 . VAR_42 [ 0 ] ;  VAR_43 = VAR_44 -> VAR_45 - ( VAR_46 - ( TYPE_5 * ) VAR_47 -> VAR_48 ) ;  while ( VAR_49 && VAR_50 && * VAR_51 ) { * VAR_52 ++ = * VAR_53 ++ ; VAR_54 -- ; VAR_55 -- ; } if ( VAR_56 && ! VAR_57 && VAR_58 -> VAR_59 . VAR_60 ) { VAR_61 = min_t ( unsigned TYPE_6 , VAR_62 -> VAR_63 . VAR_64 , VAR_65 ) ; VAR_66 = METHOD_6 ( VAR_67 -> VAR_68 . VAR_69 [ 0 ] ) ; } while ( VAR_70 && VAR_71 && * VAR_72 ) { * VAR_73 ++ = * VAR_74 ++ ; VAR_75 -- ; VAR_76 -- ; } * VAR_77 = '\\0' ; if ( VAR_78 ) return 0 ; return 1 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 ; TYPE_3 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 , & VAR_10 -> VAR_11 ) ) || ! ( VAR_12 = METHOD_2 ( VAR_13 , & VAR_14 -> VAR_15 , & VAR_16 -> VAR_17 ) ) ) return 0 ; VAR_18 = METHOD_3 ( VAR_19 , & VAR_20 -> VAR_21 ) ; VAR_22 = METHOD_4 ( * VAR_23 ++ ) ; if ( VAR_24 == 0 || VAR_25 > VAR_26 || VAR_27 >= VAR_28 ) return 0 ; VAR_29 -> VAR_30 = VAR_31 = METHOD_5 ( * ( VAR_32 -> VAR_33 ++ ) ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 = ( TYPE_4 * ) VAR_38 ; VAR_39 = & VAR_40 -> VAR_41 . VAR_42 [ 0 ] ; if ( ( TYPE_7 * ) VAR_74 > VAR_47 -> VAR_48 + VAR_47 -> VAR_45 ) return 0 ; VAR_43 = VAR_44 -> VAR_45 - ( VAR_46 - ( TYPE_5 * ) VAR_47 -> VAR_48 ) ; while ( VAR_49 && VAR_50 && * VAR_51 ) { * VAR_52 ++ = * VAR_53 ++ ; VAR_54 -- ; VAR_55 -- ; } if ( VAR_56 && ! VAR_57 && VAR_58 -> VAR_59 . VAR_60 ) { VAR_61 = min_t ( unsigned TYPE_6 , VAR_62 -> VAR_63 . VAR_64 , VAR_65 ) ; VAR_66 = METHOD_6 ( VAR_67 -> VAR_68 . VAR_69 [ 0 ] ) ; } while ( VAR_70 && VAR_71 && * VAR_72 ) { * VAR_73 ++ = * VAR_74 ++ ; VAR_75 -- ; VAR_76 -- ; } * VAR_77 = '\\0' ; if ( VAR_78 ) return 0 ; return 1 ; }",64
65,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { struct STRUCT_OR_UNION_3 VAR_3 ;  struct STRUCT_OR_UNION_4 * VAR_4 ;  VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; if ( ! VAR_8 ) return METHOD_2 ( - VAR_9 ) ; VAR_10 . VAR_11 = VAR_12 ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = 0 ;  if ( METHOD_3 ( VAR_21 , 0 , & VAR_22 ) ) {  METHOD_4 ( VAR_23 ) ;  return VAR_24 ;  } return VAR_25 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; if ( ! VAR_8 ) return METHOD_2 ( - VAR_9 ) ; VAR_10 . VAR_11 = VAR_12 ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = 0 ; VAR_26 = METHOD_3 ( VAR_21 , 0 , & VAR_22 ) ; if ( VAR_26 ) { METHOD_4 ( VAR_23 ) ; return METHOD_2 ( VAR_26 ) ; } return VAR_25 ; }",65
66,"enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_0 * VAR_2 ) { TYPE_1 VAR_3 [ VAR_4 * 2 ] , VAR_5 [ VAR_6 ] ; unsigned TYPE_2 VAR_7 [ VAR_8 ] ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 ; if ( ! METHOD_1 ( VAR_11 -> VAR_12 , VAR_13 ) ) return VAR_14 ; METHOD_2 ( METHOD_3 ( ""Authenticating(CRAM-MD5)..."" ) ) ; if ( METHOD_4 ( & VAR_15 -> VAR_16 -> VAR_17 ) < 0 ) return VAR_18 ; if ( METHOD_5 ( & VAR_19 -> VAR_20 -> VAR_21 ) < 0 ) return VAR_22 ; METHOD_6 ( VAR_23 , ""AUTHENTICATECRAM-MD5"" ) ; do VAR_24 = METHOD_7 ( VAR_25 ) ; while ( VAR_26 == VAR_27 ) ; if ( VAR_28 != VAR_29 ) { METHOD_8 ( 1 , ""Invalidresponsefromserver:%s\\n"" , VAR_30 ) ; goto VAR_31 ; }  VAR_32 = METHOD_9 ( VAR_33 , VAR_34 -> VAR_35 + 2 ) ;  if ( VAR_36 == - 1 ) { METHOD_10 ( 1 , ""Errordecodingbase64response.\\n"" ) ; goto VAR_37 ; } VAR_38 [ VAR_39 ] = '\\0' ; METHOD_11 ( 2 , ""CRAMchallenge:%s\\n"" , VAR_40 ) ; METHOD_12 ( VAR_41 -> VAR_42 -> VAR_43 . VAR_44 , VAR_45 , VAR_46 ) ; TYPE_5 VAR_47 = METHOD_13 ( VAR_48 , sizeof ( VAR_49 ) , ""%s"" , VAR_50 -> VAR_51 -> VAR_52 . VAR_53 ) ; METHOD_14 ( VAR_54 , VAR_55 + VAR_56 ) ; METHOD_15 ( 2 , ""CRAMresponse:%s\\n"" , VAR_57 ) ; METHOD_16 ( VAR_58 , VAR_59 , METHOD_17 ( VAR_60 ) , sizeof ( VAR_61 ) - 2 ) ; METHOD_18 ( VAR_62 , sizeof ( VAR_63 ) , ""\\r\\n"" ) ; METHOD_19 ( VAR_64 -> VAR_65 , VAR_66 ) ; do VAR_67 = METHOD_20 ( VAR_68 ) ; while ( VAR_69 == VAR_70 ) ; if ( VAR_71 != VAR_72 ) { METHOD_21 ( 1 , ""Errorreceivingserverresponse.\\n"" ) ; goto VAR_73 ; } if ( METHOD_22 ( VAR_74 -> VAR_75 ) ) return VAR_76 ; VAR_77 : METHOD_23 ( METHOD_24 ( ""CRAM-MD5authenticationfailed."" ) ) ; return VAR_78 ; }","enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , const TYPE_0 * VAR_2 ) { TYPE_1 VAR_3 [ VAR_4 * 2 ] , VAR_5 [ VAR_6 ] ; unsigned TYPE_2 VAR_7 [ VAR_8 ] ; TYPE_3 VAR_9 ; TYPE_4 VAR_10 ; if ( ! METHOD_1 ( VAR_11 -> VAR_12 , VAR_13 ) ) return VAR_14 ; METHOD_2 ( METHOD_3 ( ""Authenticating(CRAM-MD5)..."" ) ) ; if ( METHOD_4 ( & VAR_15 -> VAR_16 -> VAR_17 ) < 0 ) return VAR_18 ; if ( METHOD_5 ( & VAR_19 -> VAR_20 -> VAR_21 ) < 0 ) return VAR_22 ; METHOD_6 ( VAR_23 , ""AUTHENTICATECRAM-MD5"" ) ; do VAR_24 = METHOD_7 ( VAR_25 ) ; while ( VAR_26 == VAR_27 ) ; if ( VAR_28 != VAR_29 ) { METHOD_8 ( 1 , ""Invalidresponsefromserver:%s\\n"" , VAR_30 ) ; goto VAR_31 ; } VAR_32 = METHOD_9 ( VAR_33 , VAR_34 -> VAR_35 + 2 ) ; if ( VAR_36 == - 1 ) { METHOD_10 ( 1 , ""Errordecodingbase64response.\\n"" ) ; goto VAR_37 ; } VAR_38 [ VAR_39 ] = '\\0' ; METHOD_11 ( 2 , ""CRAMchallenge:%s\\n"" , VAR_40 ) ; METHOD_12 ( VAR_41 -> VAR_42 -> VAR_43 . VAR_44 , VAR_45 , VAR_46 ) ; TYPE_5 VAR_47 = METHOD_13 ( VAR_48 , sizeof ( VAR_49 ) , ""%s"" , VAR_50 -> VAR_51 -> VAR_52 . VAR_53 ) ; METHOD_14 ( VAR_54 , VAR_55 + VAR_56 ) ; METHOD_15 ( 2 , ""CRAMresponse:%s\\n"" , VAR_57 ) ; METHOD_16 ( VAR_58 , VAR_59 , METHOD_17 ( VAR_60 ) , sizeof ( VAR_61 ) - 2 ) ; METHOD_18 ( VAR_62 , sizeof ( VAR_63 ) , ""\\r\\n"" ) ; METHOD_19 ( VAR_64 -> VAR_65 , VAR_66 ) ; do VAR_67 = METHOD_20 ( VAR_68 ) ; while ( VAR_69 == VAR_70 ) ; if ( VAR_71 != VAR_72 ) { METHOD_21 ( 1 , ""Errorreceivingserverresponse.\\n"" ) ; goto VAR_73 ; } if ( METHOD_22 ( VAR_74 -> VAR_75 ) ) return VAR_76 ; VAR_77 : METHOD_23 ( METHOD_24 ( ""CRAM-MD5authenticationfailed."" ) ) ; return VAR_78 ; }",66
67,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 , struct STRUCT_OR_UNION_2 * * VAR_5 ) {  TYPE_4 VAR_6 = VAR_7 -> VAR_8 & VAR_9 ;  struct STRUCT_OR_UNION_3 * VAR_10 = METHOD_1 ( VAR_11 ) ; TYPE_5 VAR_12 ; VAR_13 * VAR_14 ; TYPE_6 VAR_15 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; if ( ! * VAR_16 ) { VAR_17 = - VAR_18 ; STRUCT_OR_UNION_6 = METHOD_2 ( VAR_19 , VAR_20 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 ) ) goto VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_8 , ( const TYPE_7 TYPE_8 * ) VAR_23 , METHOD_5 ( VAR_24 ) , VAR_25 ) ; if ( METHOD_6 ( VAR_26 ) ) { VAR_27 = - VAR_28 ; * VAR_29 = STRUCT_OR_UNION_9 ; goto VAR_30 ; } } else { STRUCT_OR_UNION_10 = * VAR_31 ; * VAR_32 = VAR_33 ; } METHOD_7 ( STRUCT_OR_UNION_11 ) ; METHOD_8 ( STRUCT_OR_UNION_12 ) ;  if ( VAR_34 ) {   struct STRUCT_OR_UNION_13 * VAR_35 = VAR_36 -> VAR_37 -> VAR_38 ;  TYPE_9 VAR_39 = METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = METHOD_10 ( STRUCT_OR_UNION_14 , VAR_44 , VAR_45 ) ; if ( VAR_46 ) goto VAR_47 ; } VAR_48 = METHOD_11 ( VAR_49 , VAR_50 , VAR_51 ) ;  METHOD_12 ( VAR_52 ) ;  VAR_53 = - VAR_54 ; if ( ! METHOD_13 ( METHOD_14 ( VAR_55 ) ) ) goto VAR_56 ; if ( VAR_57 ) { METHOD_15 ( STRUCT_OR_UNION_15 , VAR_58 ) ; } else { METHOD_16 ( STRUCT_OR_UNION_16 ) ; METHOD_17 ( STRUCT_OR_UNION_17 , VAR_59 , VAR_60 ) ; } VAR_61 = METHOD_18 ( VAR_62 , STRUCT_OR_UNION_18 , VAR_63 -> VAR_64 & VAR_65 ) ; if ( VAR_66 -> VAR_67 & VAR_68 ) VAR_69 = METHOD_19 ( VAR_70 ) ; VAR_71 = METHOD_20 ( VAR_72 ) ; METHOD_21 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; ( TYPE_10 ) METHOD_22 ( VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 -> VAR_82 & VAR_83 ) ; METHOD_23 ( METHOD_24 ( VAR_84 ) , VAR_85 ) ; METHOD_25 ( VAR_86 , VAR_87 , VAR_88 ) ; METHOD_26 ( VAR_89 ) ; if ( VAR_90 ) METHOD_27 ( STRUCT_OR_UNION_19 ) ; VAR_91 = 0 ; VAR_92 : return VAR_93 ; VAR_94 : METHOD_28 ( VAR_95 ) ; if ( VAR_96 ) METHOD_29 ( STRUCT_OR_UNION_20 ) ; VAR_97 : METHOD_30 ( STRUCT_OR_UNION_21 ) ; goto VAR_98 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 , struct STRUCT_OR_UNION_2 * * VAR_5 ) { TYPE_4 VAR_6 = VAR_7 -> VAR_8 & VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = METHOD_1 ( VAR_11 ) ; TYPE_5 VAR_12 ; VAR_13 * VAR_14 ; TYPE_6 VAR_15 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; if ( ! * VAR_16 ) { VAR_17 = - VAR_18 ; STRUCT_OR_UNION_6 = METHOD_2 ( VAR_19 , VAR_20 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 ) ) goto VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_8 , ( const TYPE_7 TYPE_8 * ) VAR_23 , METHOD_5 ( VAR_24 ) , VAR_25 ) ; if ( METHOD_6 ( VAR_26 ) ) { VAR_27 = - VAR_28 ; * VAR_29 = STRUCT_OR_UNION_9 ; goto VAR_30 ; } } else { STRUCT_OR_UNION_10 = * VAR_31 ; * VAR_32 = VAR_33 ; } METHOD_7 ( STRUCT_OR_UNION_11 ) ; METHOD_8 ( STRUCT_OR_UNION_12 ) ; if ( VAR_34 ) { struct STRUCT_OR_UNION_13 * VAR_35 = VAR_36 -> VAR_37 -> VAR_38 ; TYPE_9 VAR_39 = METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = METHOD_10 ( STRUCT_OR_UNION_14 , VAR_44 , VAR_45 ) ; if ( VAR_46 ) goto VAR_47 ; } VAR_48 = METHOD_11 ( VAR_49 , VAR_50 , VAR_51 ) ; METHOD_12 ( VAR_52 ) ; VAR_53 = - VAR_54 ; if ( ! METHOD_13 ( METHOD_14 ( VAR_55 ) ) ) goto VAR_56 ; if ( VAR_57 ) { METHOD_15 ( STRUCT_OR_UNION_15 , VAR_58 ) ; } else { METHOD_16 ( STRUCT_OR_UNION_16 ) ; METHOD_17 ( STRUCT_OR_UNION_17 , VAR_59 , VAR_60 ) ; } VAR_61 = METHOD_18 ( VAR_62 , STRUCT_OR_UNION_18 , VAR_63 -> VAR_64 & VAR_65 ) ; if ( VAR_66 -> VAR_67 & VAR_68 ) VAR_69 = METHOD_19 ( VAR_70 ) ; VAR_71 = METHOD_20 ( VAR_72 ) ; METHOD_21 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; ( TYPE_10 ) METHOD_22 ( VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 -> VAR_82 & VAR_83 ) ; METHOD_23 ( METHOD_24 ( VAR_84 ) , VAR_85 ) ; METHOD_25 ( VAR_86 , VAR_87 , VAR_88 ) ; METHOD_26 ( VAR_89 ) ; if ( VAR_90 ) METHOD_27 ( STRUCT_OR_UNION_19 ) ; VAR_91 = 0 ; VAR_92 : return VAR_93 ; VAR_94 : METHOD_28 ( VAR_95 ) ; if ( VAR_96 ) METHOD_29 ( STRUCT_OR_UNION_20 ) ; VAR_97 : METHOD_30 ( STRUCT_OR_UNION_21 ) ; VAR_44 = VAR_86 -> VAR_37 -> VAR_38 ; VAR_45 = METHOD_9 ( VAR_84 , VAR_86 , VAR_87 ) ; goto VAR_98 ; }",67
68,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) {  TYPE_4 VAR_3 [ 1024 ] , * VAR_4 ;  VAR_5 * VAR_6 ; TYPE_5 VAR_7 ;  VAR_8 = METHOD_1 ( VAR_9 , ""showtablestatusfrom`"" , VAR_10 , ""`"" , VAR_11 ) ;   if ( VAR_12 && VAR_13 [ 0 ] )  METHOD_2 ( VAR_14 , ""like\'"" , VAR_15 , ""\'"" , VAR_16 ) ; if ( METHOD_3 ( VAR_17 , VAR_18 ) || ! ( VAR_19 = METHOD_4 ( VAR_20 ) ) ) { METHOD_5 ( VAR_21 , ""%s:Cannotgetstatusfordb:%s,table:%s:%s\\n"" , VAR_22 , VAR_23 , VAR_24 ? VAR_25 : """" , METHOD_6 ( VAR_26 ) ) ; if ( METHOD_7 ( VAR_27 ) == VAR_28 ) METHOD_8 ( VAR_29 , ""ThiserrorprobablymeansthatyourMySQLserverdoesn\'tsupportthe\\n\\\'showtablestatus\'command.\\n"" ) ; return 1 ; } METHOD_9 ( ""Database:%s"" , VAR_30 ) ; if ( VAR_31 ) METHOD_10 ( ""Wildcard:%s"" , VAR_32 ) ; METHOD_11 ( '\\n' ) ; METHOD_12 ( VAR_33 ) ; while ( ( VAR_34 = METHOD_13 ( VAR_35 ) ) ) METHOD_14 ( VAR_36 , VAR_37 ) ; METHOD_15 ( VAR_38 ) ; METHOD_16 ( VAR_39 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 [ 1024 ] , * VAR_4 ; VAR_5 * VAR_6 ; TYPE_5 VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , ""showtablestatusfrom`"" , VAR_10 , ""`"" , VAR_11 ) ; if ( VAR_12 && VAR_13 [ 0 ] && VAR_41 ) METHOD_19 ( VAR_18 + METHOD_18 ( VAR_18 ) , VAR_41 , ""like\'"" , VAR_15 , ""\'"" , VAR_16 ) ; if ( METHOD_3 ( VAR_17 , VAR_18 ) || ! ( VAR_19 = METHOD_4 ( VAR_20 ) ) ) { METHOD_5 ( VAR_21 , ""%s:Cannotgetstatusfordb:%s,table:%s:%s\\n"" , VAR_22 , VAR_23 , VAR_24 ? VAR_25 : """" , METHOD_6 ( VAR_26 ) ) ; if ( METHOD_7 ( VAR_27 ) == VAR_28 ) METHOD_8 ( VAR_29 , ""ThiserrorprobablymeansthatyourMySQLserverdoesn\'tsupportthe\\n\\\'showtablestatus\'command.\\n"" ) ; return 1 ; } METHOD_9 ( ""Database:%s"" , VAR_30 ) ; if ( VAR_31 ) METHOD_10 ( ""Wildcard:%s"" , VAR_32 ) ; METHOD_11 ( '\\n' ) ; METHOD_12 ( VAR_33 ) ; while ( ( VAR_34 = METHOD_13 ( VAR_35 ) ) ) METHOD_14 ( VAR_36 , VAR_37 ) ; METHOD_15 ( VAR_38 ) ; METHOD_16 ( VAR_39 ) ; return 0 ; }",68
69,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { static TYPE_2 VAR_2 ; TYPE_3 * VAR_3 ;  TYPE_4 VAR_4 ,  VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; const TYPE_7 * VAR_8 = VAR_9 ; METHOD_1 ( VAR_10 , & VAR_11 ) ; if ( ( VAR_12 . VAR_13 = METHOD_2 ( VAR_14 -> VAR_15 , VAR_16 , & VAR_17 ) ) ) goto VAR_18 ; if ( ( VAR_19 . VAR_20 = METHOD_3 ( ( TYPE_8 * ) VAR_21 ) ) ) goto VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 ; if ( METHOD_4 ( VAR_27 , & VAR_28 , & VAR_29 ) < 0 ) { VAR_30 . VAR_31 = VAR_32 ; goto VAR_33 ; } if ( METHOD_5 ( VAR_34 -> VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) { VAR_39 . VAR_40 = VAR_41 ; goto VAR_42 ; } if ( METHOD_6 ( VAR_43 ) || ! METHOD_7 ( VAR_44 -> VAR_45 , METHOD_8 ( VAR_46 ) , VAR_47 , VAR_48 -> VAR_49 , VAR_50 ) ) { VAR_51 . VAR_52 = VAR_53 ; METHOD_9 ( ""kadm5_delete_principal"" , VAR_54 , & VAR_55 , & VAR_56 , VAR_57 ) ; } else { VAR_58 . VAR_59 = METHOD_10 ( ( TYPE_9 * ) VAR_60 , VAR_61 -> VAR_62 ) ; if ( VAR_63 . VAR_64 != 0 ) VAR_65 = METHOD_11 ( VAR_66 -> VAR_67 , VAR_68 . VAR_69 ) ; METHOD_12 ( ""kadm5_delete_principal"" , VAR_70 , VAR_71 , & VAR_72 , & VAR_73 , VAR_74 ) ; if ( VAR_75 != VAR_76 ) METHOD_13 ( VAR_77 -> VAR_78 , VAR_79 ) ; } METHOD_14 ( VAR_80 ) ;  METHOD_15 ( & VAR_81 , & VAR_82 ) ;  METHOD_16 ( & VAR_83 , & VAR_84 ) ;  VAR_85 :  METHOD_17 ( VAR_86 ) ; return & VAR_87 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { static TYPE_2 VAR_2 ; TYPE_3 * VAR_3 ; TYPE_4 VAR_4 , VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; const TYPE_7 * VAR_8 = VAR_9 ; METHOD_1 ( VAR_10 , & VAR_11 ) ; if ( ( VAR_12 . VAR_13 = METHOD_2 ( VAR_14 -> VAR_15 , VAR_16 , & VAR_17 ) ) ) goto VAR_18 ; if ( ( VAR_19 . VAR_20 = METHOD_3 ( ( TYPE_8 * ) VAR_21 ) ) ) goto VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 ; if ( METHOD_4 ( VAR_27 , & VAR_28 , & VAR_29 ) < 0 ) { VAR_30 . VAR_31 = VAR_32 ; goto VAR_33 ; } if ( METHOD_5 ( VAR_34 -> VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) { VAR_39 . VAR_40 = VAR_41 ; goto VAR_42 ; } if ( METHOD_6 ( VAR_43 ) || ! METHOD_7 ( VAR_44 -> VAR_45 , METHOD_8 ( VAR_46 ) , VAR_47 , VAR_48 -> VAR_49 , VAR_50 ) ) { VAR_51 . VAR_52 = VAR_53 ; METHOD_9 ( ""kadm5_delete_principal"" , VAR_54 , & VAR_55 , & VAR_56 , VAR_57 ) ; } else { VAR_58 . VAR_59 = METHOD_10 ( ( TYPE_9 * ) VAR_60 , VAR_61 -> VAR_62 ) ; if ( VAR_63 . VAR_64 != 0 ) VAR_65 = METHOD_11 ( VAR_66 -> VAR_67 , VAR_68 . VAR_69 ) ; METHOD_12 ( ""kadm5_delete_principal"" , VAR_70 , VAR_71 , & VAR_72 , & VAR_73 , VAR_74 ) ; if ( VAR_75 != VAR_76 ) METHOD_13 ( VAR_77 -> VAR_78 , VAR_79 ) ; } METHOD_14 ( VAR_80 ) ; VAR_85 : METHOD_15 ( & VAR_81 , & VAR_82 ) ; METHOD_16 ( & VAR_83 , & VAR_84 ) ; METHOD_17 ( VAR_86 ) ; return & VAR_87 ; }",69
70,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = STRUCT_OR_UNION_3 ( VAR_8 ) ; struct STRUCT_OR_UNION_4 * VAR_9 = VAR_10 -> VAR_11 ; TYPE_4 TYPE_5 * VAR_12 = ( TYPE_6 TYPE_7 * ) VAR_13 ; TYPE_8 VAR_14 ; METHOD_1 ( 1 , METHOD_2 ( VAR_15 , VAR_16 , ""sd_ioctl:disk=%s,"" ""cmd=0x%x\\n"" , VAR_17 -> VAR_18 , VAR_19 ) ) ;  VAR_20 = METHOD_3 ( VAR_21 , VAR_22 , VAR_23 ,  ( VAR_24 & VAR_25 ) != 0 ) ; if ( ! METHOD_4 ( VAR_26 ) || ! VAR_27 ) goto VAR_28 ; switch ( VAR_29 ) { case VAR_30 : case VAR_31 : VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , VAR_35 ) ; break ; default : VAR_36 = METHOD_6 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 != - VAR_42 ) break ; VAR_43 = METHOD_7 ( VAR_44 , VAR_45 , VAR_46 ) ; break ; } VAR_47 : return VAR_48 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = STRUCT_OR_UNION_3 ( VAR_8 ) ; struct STRUCT_OR_UNION_4 * VAR_9 = VAR_10 -> VAR_11 ; TYPE_4 TYPE_5 * VAR_12 = ( TYPE_6 TYPE_7 * ) VAR_13 ; TYPE_8 VAR_14 ; METHOD_1 ( 1 , METHOD_2 ( VAR_15 , VAR_16 , ""sd_ioctl:disk=%s,"" ""cmd=0x%x\\n"" , VAR_17 -> VAR_18 , VAR_19 ) ) ; VAR_20 = METHOD_3 ( VAR_21 , VAR_22 , VAR_23 , ( VAR_24 & VAR_25 ) != 0 ) ; if ( ! METHOD_4 ( VAR_26 ) || ! VAR_27 ) goto VAR_28 ; switch ( VAR_29 ) { case VAR_30 : case VAR_31 : VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , VAR_35 ) ; break ; default : VAR_36 = METHOD_6 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 != - VAR_42 ) break ; VAR_43 = METHOD_7 ( VAR_44 , VAR_45 , VAR_46 ) ; break ; } VAR_47 : return VAR_48 ; }",70
71,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ) { struct STRUCT_OR_UNION_3 VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 = 0 ;  if ( ! METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_8 ) -> VAR_9 )  return 0 ; * VAR_10 = 0 ; METHOD_2 ( & VAR_11 , STRUCT_OR_UNION_6 ) ; METHOD_3 ( VAR_12 , STRUCT_OR_UNION_7 , & VAR_13 ) ; VAR_14 : while ( VAR_15 . VAR_16 > 2 ) { VAR_17 = ( struct STRUCT_OR_UNION_8 * ) VAR_18 . VAR_19 ; if ( VAR_20 -> VAR_21 < 3 ) goto VAR_22 ; VAR_23 = METHOD_4 ( VAR_24 . VAR_25 ) ; if ( METHOD_5 ( & VAR_26 , VAR_27 ) ) goto VAR_28 ; VAR_29 . VAR_30 += VAR_31 -> VAR_32 ; VAR_33 . VAR_34 -= VAR_35 -> VAR_36 ; if ( VAR_37 . VAR_38 < 0 ) goto VAR_39 ; switch ( VAR_40 ) { case METHOD_6 ( 'R' , 'R' ) : if ( ( VAR_41 -> VAR_42 . VAR_43 . VAR_44 [ 0 ] & VAR_45 ) == 0 ) goto VAR_46 ; break ; case METHOD_7 ( 'S' , 'P' ) : if ( METHOD_8 ( VAR_47 , STRUCT_OR_UNION_9 ) ) goto VAR_48 ; break ; case METHOD_9 ( 'C' , 'E' ) : VAR_49 . VAR_50 = METHOD_10 ( VAR_51 -> VAR_52 . VAR_53 . VAR_54 ) ; VAR_55 . VAR_56 = METHOD_11 ( VAR_57 -> VAR_58 . VAR_59 . VAR_60 ) ; VAR_61 . VAR_62 = METHOD_12 ( VAR_63 -> VAR_64 . VAR_65 . VAR_66 ) ; break ; case METHOD_13 ( 'N' , 'M' ) : if ( VAR_67 ) break ; if ( VAR_68 -> VAR_69 < 5 ) break ; if ( VAR_70 -> VAR_71 . VAR_72 . VAR_73 & 6 ) break ; if ( VAR_74 -> VAR_75 . VAR_76 . VAR_77 & ~ 1 ) { METHOD_14 ( ""UnsupportedNMflagsettings(%d)\\n"" , VAR_78 -> VAR_79 . VAR_80 . VAR_81 ) ; break ; }  if ( ( METHOD_15 ( VAR_82 ) + VAR_83 -> VAR_84 - 5 ) >= 254 ) {  VAR_85 = 1 ; break ; }  METHOD_16 ( VAR_86 , VAR_87 -> VAR_88 . VAR_89 . VAR_90 , VAR_91 -> VAR_92 - 5 ) ;   VAR_93 += VAR_94 -> VAR_95 - 5 ;  break ; case METHOD_17 ( 'R' , 'E' ) : METHOD_18 ( VAR_96 . VAR_97 ) ; return - 1 ; default : break ; } } VAR_98 = METHOD_19 ( & VAR_99 ) ; if ( VAR_100 == 0 ) goto VAR_101 ; if ( VAR_102 == 1 ) return VAR_103 ; VAR_104 : METHOD_20 ( VAR_105 . VAR_106 ) ; return VAR_107 ; VAR_108 : VAR_109 = - VAR_110 ; goto VAR_111 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ) { struct STRUCT_OR_UNION_3 VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_1 * VAR_112 ; TYPE_5 VAR_95 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 = 0 ; if ( ! METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_8 ) -> VAR_9 ) return 0 ; * VAR_10 = 0 ; METHOD_2 ( & VAR_11 , STRUCT_OR_UNION_6 ) ; METHOD_3 ( VAR_12 , STRUCT_OR_UNION_7 , & VAR_13 ) ; VAR_14 : while ( VAR_15 . VAR_16 > 2 ) { VAR_17 = ( struct STRUCT_OR_UNION_8 * ) VAR_18 . VAR_19 ; if ( VAR_20 -> VAR_21 < 3 ) goto VAR_22 ; VAR_23 = METHOD_4 ( VAR_24 . VAR_25 ) ; if ( METHOD_5 ( & VAR_26 , VAR_27 ) ) goto VAR_28 ; VAR_29 . VAR_30 += VAR_31 -> VAR_32 ; VAR_33 . VAR_34 -= VAR_35 -> VAR_36 ; if ( VAR_37 . VAR_38 < 0 ) goto VAR_39 ; switch ( VAR_40 ) { case METHOD_6 ( 'R' , 'R' ) : if ( ( VAR_41 -> VAR_42 . VAR_43 . VAR_44 [ 0 ] & VAR_45 ) == 0 ) goto VAR_46 ; break ; case METHOD_7 ( 'S' , 'P' ) : if ( METHOD_8 ( VAR_47 , STRUCT_OR_UNION_9 ) ) goto VAR_48 ; break ; case METHOD_9 ( 'C' , 'E' ) : VAR_49 . VAR_50 = METHOD_10 ( VAR_51 -> VAR_52 . VAR_53 . VAR_54 ) ; VAR_55 . VAR_56 = METHOD_11 ( VAR_57 -> VAR_58 . VAR_59 . VAR_60 ) ; VAR_61 . VAR_62 = METHOD_12 ( VAR_63 -> VAR_64 . VAR_65 . VAR_66 ) ; break ; case METHOD_13 ( 'N' , 'M' ) : if ( VAR_67 ) break ; if ( VAR_68 -> VAR_69 < 5 ) break ; if ( VAR_70 -> VAR_71 . VAR_72 . VAR_73 & 6 ) break ; if ( VAR_74 -> VAR_75 . VAR_76 . VAR_77 & ~ 1 ) { METHOD_14 ( ""UnsupportedNMflagsettings(%d)\\n"" , VAR_78 -> VAR_79 . VAR_80 . VAR_81 ) ; break ; } VAR_95 = VAR_94 -> VAR_95 - 5 ; break ; case METHOD_17 ( 'R' , 'E' ) : METHOD_18 ( VAR_96 . VAR_97 ) ; return - 1 ; default : break ; } } VAR_98 = METHOD_19 ( & VAR_99 ) ; if ( VAR_100 == 0 ) goto VAR_101 ; if ( VAR_102 == 1 ) return VAR_103 ; VAR_104 : METHOD_20 ( VAR_105 . VAR_106 ) ; return VAR_107 ; VAR_108 : VAR_109 = - VAR_110 ; goto VAR_111 ; }",71
72,TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; while ( VAR_2 ) { VAR_3 = VAR_4 -> VAR_5 ; if ( ! ( VAR_6 -> VAR_7 & VAR_8 ) && VAR_9 -> VAR_10 ) METHOD_1 ( VAR_11 -> VAR_12 ) ; if ( ! ( VAR_13 -> VAR_14 & VAR_15 ) && VAR_16 -> VAR_17 ) METHOD_2 ( VAR_18 -> VAR_19 ) ;  if ( VAR_20 -> VAR_21 )  METHOD_3 ( VAR_22 -> VAR_23 ) ; METHOD_4 ( VAR_24 ) ; VAR_25 = VAR_26 ; } },TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; while ( VAR_2 ) { VAR_3 = VAR_4 -> VAR_5 ; if ( ! ( VAR_25 -> VAR_14 & VAR_27 ) && ! ( VAR_6 -> VAR_7 & VAR_8 ) && VAR_9 -> VAR_10 ) METHOD_1 ( VAR_11 -> VAR_12 ) ; if ( ! ( VAR_13 -> VAR_14 & VAR_15 ) && VAR_16 -> VAR_17 ) METHOD_2 ( VAR_18 -> VAR_19 ) ; if ( VAR_20 -> VAR_21 ) METHOD_3 ( VAR_22 -> VAR_23 ) ; METHOD_4 ( VAR_24 ) ; VAR_25 = VAR_26 ; } },72
73, TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {   TYPE_2 * const VAR_1 = ( VAR_2 -> VAR_3 > 1 )  ? & VAR_4 -> VAR_5 [ VAR_6 -> VAR_7 ] : & VAR_8 -> VAR_9 [ VAR_10 -> VAR_11 ] ; ++ VAR_12 -> VAR_13 ;  } ,TYPE_0 METHOD_0 ( TYPE_3 * const VAR_14 ) { TYPE_2 * const VAR_1 = ( VAR_2 -> VAR_3 > 1 ) ? & VAR_4 -> VAR_5 [ VAR_6 -> VAR_7 ] : & VAR_8 -> VAR_9 [ VAR_10 -> VAR_11 ] ; ++ VAR_12 -> VAR_13 ; ++ VAR_12 -> VAR_15 ; },73
74,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ;  if ( ! VAR_6 )  METHOD_1 ( VAR_7 , ""Filesystemcallmadewithoutinitialization"" ) ;  for ( VAR_8 = VAR_9 ; VAR_10 ; VAR_11 = VAR_12 -> VAR_13 )   {  VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ; if ( VAR_20 == VAR_21 ) { if ( VAR_22 > 0 ) return VAR_23 ; } else { if ( VAR_24 >= 0 && * VAR_25 ) return VAR_26 ; } } TYPE_5 TYPE_6 if ( VAR_27 ) METHOD_3 ( VAR_28 , ""%s\\n"" , VAR_29 ) ; if ( VAR_30 ) { * VAR_31 = 0 ; return - 1 ; } else { return 0 ; } }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; if ( ! VAR_6 ) METHOD_1 ( VAR_7 , ""Filesystemcallmadewithoutinitialization"" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , ""autoexec.cfg"" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; for ( VAR_8 = VAR_9 ; VAR_10 ; VAR_11 = VAR_12 -> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ; VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ; if ( VAR_20 == VAR_21 ) { if ( VAR_22 > 0 ) return VAR_23 ; } else { if ( VAR_24 >= 0 && * VAR_25 ) return VAR_26 ; } } TYPE_5 TYPE_6 if ( VAR_27 ) METHOD_3 ( VAR_28 , ""%s\\n"" , VAR_29 ) ; if ( VAR_30 ) { * VAR_31 = 0 ; return - 1 ; } else { return 0 ; } }",74
75,"static VAR_0 TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_2 VAR_3 = ( TYPE_3 ) VAR_4 * VAR_5 ;  TYPE_4 VAR_6 ;   VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 ) ;  VAR_12 -> VAR_13 = VAR_14 / VAR_15 ; }","static VAR_0 TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_2 VAR_3 = ( TYPE_3 ) VAR_4 * VAR_5 ; TYPE_4 VAR_6 ; VAR_7 -> VAR_8 = METHOD_2 ( VAR_9 , VAR_10 , & VAR_11 ) ; VAR_12 -> VAR_13 = VAR_14 / VAR_15 ; }",75
76,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , ""enter"" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , ""ImproperImageHeader"" ) ; VAR_67 . VAR_68 = METHOD_17 ( VAR_69 ) ; if ( METHOD_18 ( VAR_70 , 2 , ( unsigned TYPE_35 * ) & VAR_71 . VAR_72 ) != 2 ) METHOD_19 ( VAR_73 , ""ImproperImageHeader"" ) ; if ( VAR_74 ) ( TYPE_36 ) METHOD_20 ( VAR_75 , METHOD_21 ( ) , ""Endian%c%c"" , VAR_76 . VAR_77 [ 0 ] , VAR_78 . VAR_79 [ 1 ] ) ; if ( ! METHOD_22 ( VAR_80 . VAR_81 , ""IM"" , 2 ) ) { METHOD_23 = VAR_82 ; METHOD_24 = METHOD_25 ; METHOD_26 = VAR_83 ; METHOD_27 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; } else if ( ! METHOD_28 ( VAR_88 . VAR_89 , ""MI"" , 2 ) ) { METHOD_29 = VAR_90 ; METHOD_30 = VAR_91 ; METHOD_31 = VAR_92 ; METHOD_32 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; } else goto VAR_97 ; if ( METHOD_33 ( VAR_98 . VAR_99 , ""MATLAB"" , 6 ) ) VAR_100 : METHOD_34 ( VAR_101 , ""ImproperImageHeader"" ) ; VAR_102 = METHOD_35 ( VAR_103 ) ; while ( ! METHOD_36 ( VAR_104 ) ) { VAR_105 = 1 ; ( TYPE_37 ) METHOD_37 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 . VAR_110 = METHOD_38 ( VAR_111 ) ; if ( METHOD_39 ( VAR_112 ) ) break ; VAR_113 . VAR_114 = METHOD_40 ( VAR_115 ) ; if ( METHOD_41 ( VAR_116 ) ) break ; VAR_117 += VAR_118 . VAR_119 + 4 + 4 ; VAR_120 = VAR_121 ; if d ( VAR_122 ) if ( VAR_123 . VAR_124 == VAR_125 ) { VAR_126 = METHOD_42 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 , VAR_131 ) ; if ( VAR_132 == VAR_133 ) continue ; VAR_134 . VAR_135 = METHOD_43 ( VAR_136 ) ; } if ( VAR_137 . VAR_138 != VAR_139 ) continue ; VAR_140 . VAR_141 = METHOD_44 ( VAR_142 ) ; VAR_143 . VAR_144 = METHOD_45 ( VAR_145 ) ; VAR_146 . VAR_147 = METHOD_46 ( VAR_148 ) ; VAR_149 . VAR_150 = VAR_151 . VAR_152 & 0xFF ; VAR_153 . VAR_154 = ( VAR_155 . VAR_156 >> 8 ) & 0xFF ; VAR_157 . VAR_158 = METHOD_47 ( VAR_159 ) ; if ( VAR_160 != VAR_161 ) VAR_162 . VAR_163 = METHOD_48 ( VAR_164 ) ; VAR_165 . VAR_166 = METHOD_49 ( VAR_167 ) ; VAR_168 . VAR_169 = METHOD_50 ( VAR_170 ) ; VAR_171 . VAR_172 = METHOD_51 ( VAR_173 ) ; VAR_174 . VAR_175 = METHOD_52 ( VAR_176 ) ; switch ( VAR_177 . VAR_178 ) { case 8 : VAR_179 = VAR_180 = 1 ; break ; case 12 : VAR_181 = VAR_182 = METHOD_53 ( VAR_183 ) ; ( TYPE_38 ) METHOD_54 ( VAR_184 ) ; if ( VAR_185 != 3 ) METHOD_55 ( VAR_186 , ""MultidimensionalMatricesAreNotSupported"" ) ; break ; case 16 : VAR_187 = VAR_188 = METHOD_56 ( VAR_189 ) ; if ( VAR_190 != 3 && VAR_191 != 1 ) METHOD_57 ( VAR_192 , ""MultidimensionalMatricesAreNotSupported"" ) ; VAR_193 = METHOD_58 ( VAR_194 ) ; break ; default : METHOD_59 ( VAR_195 , ""MultidimensionalMatricesAreNotSupported"" ) ; } VAR_196 . VAR_197 = METHOD_60 ( VAR_198 ) ; VAR_199 . VAR_200 = METHOD_61 ( VAR_201 ) ; if ( VAR_202 ) ( TYPE_39 ) METHOD_62 ( VAR_203 , METHOD_63 ( ) , ""MATLAB_HDR.StructureClass%d"" , VAR_204 . VAR_205 ) ; if ( VAR_206 . VAR_207 != VAR_208 && VAR_209 . VAR_210 != VAR_211 && VAR_212 . VAR_213 != VAR_214 && VAR_215 . VAR_216 != VAR_217 && VAR_218 . VAR_219 != VAR_220 && VAR_221 . VAR_222 != VAR_223 && VAR_224 . VAR_225 != VAR_226 && VAR_227 . VAR_228 != VAR_229 && VAR_230 . VAR_231 != VAR_232 && VAR_233 . VAR_234 != VAR_235 && VAR_236 . VAR_237 != VAR_238 ) METHOD_64 ( VAR_239 , ""UnsupportedCellTypeInTheMatrix"" ) ; switch ( VAR_240 . VAR_241 ) { case 0 : VAR_242 = METHOD_65 ( VAR_243 ) ; VAR_244 = 4 * ( TYPE_40 ) ( ( VAR_245 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_66 ( VAR_246 , VAR_247 , VAR_248 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_67 ( VAR_249 , 4 , ( unsigned TYPE_43 * ) & VAR_250 ) ; break ; default : goto VAR_251 ; } VAR_252 = METHOD_68 ( VAR_253 ) ; if ( VAR_254 ) ( TYPE_44 ) METHOD_69 ( VAR_255 , METHOD_70 ( ) , ""MATLAB_HDR.CellType:%.20g"" , ( TYPE_45 ) VAR_256 ) ; ( TYPE_46 ) METHOD_71 ( VAR_257 , 4 , ( unsigned TYPE_47 * ) & VAR_258 ) ; VAR_259 : switch ( VAR_260 ) { case VAR_261 : case VAR_262 : VAR_263 = 8 ; if ( VAR_264 . VAR_265 & VAR_266 ) VAR_267 -> VAR_268 = 1 ; else VAR_269 -> VAR_270 = 8 ; VAR_271 = ( TYPE_48 ) VAR_272 . VAR_273 ; break ; case VAR_274 : case VAR_275 : VAR_276 = 16 ; VAR_277 -> VAR_278 = 16 ; VAR_279 = ( TYPE_49 ) ( 2 * VAR_280 . VAR_281 ) ; break ; case VAR_282 : case VAR_283 : VAR_284 = 32 ; VAR_285 -> VAR_286 = 32 ; VAR_287 = ( TYPE_50 ) ( 4 * VAR_288 . VAR_289 ) ; break ; case VAR_290 : case VAR_291 : VAR_292 = 64 ; VAR_293 -> VAR_294 = 64 ; VAR_295 = ( TYPE_51 ) ( 8 * VAR_296 . VAR_297 ) ; break ; case VAR_298 : VAR_299 = 32 ; VAR_300 -> VAR_301 = 32 ; ( TYPE_52 ) METHOD_72 ( VAR_302 , ""quantum:format"" , ""floating-point"" ) ; if ( VAR_303 . VAR_304 & VAR_305 ) { } VAR_306 = ( TYPE_53 ) ( 4 * VAR_307 . VAR_308 ) ; break ; case VAR_309 : VAR_310 = 64 ; VAR_311 -> VAR_312 = 64 ; ( TYPE_54 ) METHOD_73 ( VAR_313 , ""quantum:format"" , ""floating-point"" ) ; METHOD_74 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_75 ( VAR_314 , ""IncompatibleSizeOfDouble"" ) ; if ( VAR_315 . VAR_316 & VAR_317 ) { } VAR_318 = ( TYPE_57 ) ( 8 * VAR_319 . VAR_320 ) ; break ; default : METHOD_76 ( VAR_321 , ""UnsupportedCellTypeInTheMatrix"" ) ; } ( TYPE_58 ) VAR_322 ; VAR_323 -> VAR_324 = VAR_325 . VAR_326 ; VAR_327 -> VAR_328 = VAR_329 . VAR_330 ; VAR_331 = METHOD_77 ( VAR_332 , VAR_333 ) ; if ( VAR_334 == ( TYPE_59 * ) VAR_335 ) METHOD_78 ( VAR_336 , ""MemoryAllocationFailed"" ) ; VAR_337 = 1 ; VAR_338 -> VAR_339 = VAR_340 << VAR_341 -> VAR_342 ; if ( VAR_343 -> VAR_344 == 0 || VAR_345 -> VAR_346 == 0 ) goto VAR_347 ; if ( ( VAR_348 . VAR_349 == 8 ) && ( ( VAR_350 . VAR_351 & VAR_352 ) == 0 ) ) { VAR_353 -> VAR_354 = VAR_355 ; METHOD_79 ( VAR_356 , VAR_357 , VAR_358 ) ; } if ( VAR_359 -> VAR_360 ) { TYPE_60 VAR_361 = VAR_362 -> VAR_363 ; VAR_364 -> VAR_365 = VAR_366 -> VAR_367 ; VAR_368 -> VAR_369 = VAR_370 ; goto VAR_371 ; } VAR_372 = METHOD_80 ( VAR_373 , VAR_374 -> VAR_375 , VAR_376 -> VAR_377 , VAR_378 ) ; if ( VAR_379 == VAR_380 ) return ( METHOD_81 ( VAR_381 ) ) ; VAR_382 = ( unsigned TYPE_61 * ) METHOD_82 ( ( TYPE_62 ) ( VAR_383 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_384 == VAR_385 ) METHOD_83 ( VAR_386 , ""MemoryAllocationFailed"" ) ; VAR_387 = 0 ; VAR_388 = 0 ; if ( VAR_389 == VAR_390 || VAR_391 == VAR_392 ) { METHOD_84 ( VAR_393 , VAR_394 -> VAR_395 , VAR_396 . VAR_397 , VAR_398 . VAR_399 , VAR_400 , VAR_401 , VAR_402 , & VAR_403 -> VAR_404 , & VAR_405 -> VAR_406 ) ; } if ( VAR_407 == 1 ) VAR_408 = 0 ; do { for ( VAR_409 = 0 ; VAR_410 < ( TYPE_64 ) VAR_411 . VAR_412 ; VAR_413 ++ ) { VAR_414 = METHOD_85 ( VAR_415 , 0 , VAR_416 . VAR_417 - VAR_418 - 1 , VAR_419 -> VAR_420 , 1 , VAR_421 ) ; if ( VAR_422 == ( TYPE_65 * ) VAR_423 ) { if ( VAR_424 ) ( TYPE_66 ) METHOD_86 ( VAR_425 , METHOD_87 ( ) , ""MATsetimagepixelsreturnsunexpectedNULLonarow%u."" , ( unsigned ) ( VAR_426 . VAR_427 - VAR_428 - 1 ) ) ; goto VAR_429 ; } if ( METHOD_88 ( VAR_430 , VAR_431 , ( unsigned TYPE_67 * ) VAR_432 ) != ( TYPE_68 ) VAR_433 ) { if ( VAR_434 ) ( TYPE_69 ) METHOD_89 ( VAR_435 , METHOD_90 ( ) , ""MATcannotreadscanrow%ufromafile."" , ( unsigned ) ( VAR_436 . VAR_437 - VAR_438 - 1 ) ) ; goto VAR_439 ; } if ( ( VAR_440 == VAR_441 || VAR_442 == VAR_443 ) && ( VAR_444 . VAR_445 & VAR_446 ) ) { METHOD_91 ( ( unsigned TYPE_70 * ) VAR_447 , VAR_448 ) ; if ( METHOD_92 ( VAR_449 , ( TYPE_71 * ) VAR_450 , VAR_451 , VAR_452 [ VAR_453 ] , VAR_454 , VAR_455 ) <= 0 ) { VAR_456 : if ( VAR_457 ) ( TYPE_72 ) METHOD_93 ( VAR_458 , METHOD_94 ( ) , ""MATfailedtoImportQuantumPixelsforarow%u"" , ( unsigned ) ( VAR_459 . VAR_460 - VAR_461 - 1 ) ) ; break ; } } else { if ( METHOD_95 ( VAR_462 , ( TYPE_73 * ) VAR_463 , VAR_464 , VAR_465 [ VAR_466 ] , VAR_467 , VAR_468 ) <= 0 ) goto VAR_469 ; if ( VAR_470 <= 1 && ( VAR_471 == VAR_472 || VAR_473 == VAR_474 || VAR_475 == VAR_476 || VAR_477 == VAR_478 ) ) METHOD_96 ( VAR_479 , VAR_480 , VAR_481 . VAR_482 ) ; } if ( ! METHOD_97 ( VAR_483 , VAR_484 ) ) { if ( VAR_485 ) ( TYPE_74 ) METHOD_98 ( VAR_486 , METHOD_99 ( ) , ""MATfailedtosyncimagepixelsforarow%u"" , ( unsigned ) ( VAR_487 . VAR_488 - VAR_489 - 1 ) ) ; goto VAR_490 ; } } } while ( VAR_491 -- >= 2 ) ;  VAR_492 :  if ( VAR_493 . VAR_494 & VAR_495 ) { VAR_496 = METHOD_100 ( VAR_497 ) ; VAR_498 = METHOD_101 ( VAR_499 ) ; if ( VAR_500 == VAR_501 || VAR_502 == VAR_503 ) { METHOD_102 ( VAR_504 , VAR_505 -> VAR_506 , VAR_507 . VAR_508 , VAR_509 . VAR_510 , VAR_511 , VAR_512 , VAR_513 , & VAR_514 , & VAR_515 ) ; } if ( VAR_516 == VAR_517 ) for ( VAR_518 = 0 ; VAR_519 < ( TYPE_75 ) VAR_520 . VAR_521 ; VAR_522 ++ ) { METHOD_103 ( VAR_523 , VAR_524 , ( TYPE_76 * ) VAR_525 ) ; METHOD_104 ( VAR_526 , ( TYPE_77 * ) VAR_527 , VAR_528 , VAR_529 , VAR_530 , VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_78 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_105 ( VAR_539 , VAR_540 , ( TYPE_79 * ) VAR_541 ) ; METHOD_106 ( VAR_542 , ( TYPE_80 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } } if ( ( VAR_548 . VAR_549 == 8 ) && ( ( VAR_550 . VAR_551 & VAR_552 ) == 0 ) ) VAR_553 -> VAR_554 = VAR_555 ; if ( VAR_556 -> VAR_557 == 1 ) VAR_558 -> VAR_559 = VAR_560 ; if ( VAR_561 == VAR_562 ) VAR_563 = VAR_564 ; VAR_565 = METHOD_107 ( VAR_566 , 90.0 , VAR_567 ) ; if ( VAR_568 != ( TYPE_81 * ) VAR_569 ) { VAR_570 -> VAR_571 . VAR_572 = 0 ; VAR_573 -> VAR_574 . VAR_575 = 0 ; VAR_576 = VAR_577 -> VAR_578 ; VAR_579 -> VAR_580 = VAR_581 -> VAR_582 ; VAR_583 -> VAR_584 = VAR_585 -> VAR_586 ; VAR_587 -> VAR_588 = VAR_589 ; METHOD_108 ( & VAR_590 , VAR_591 ) ; METHOD_109 ( & VAR_592 ) ; } VAR_593 : if ( VAR_594 != VAR_595 ) if ( VAR_596 != VAR_597 ) { METHOD_110 ( & VAR_598 ) ; if ( VAR_599 ) { if ( VAR_600 -> VAR_601 ) { METHOD_111 ( VAR_602 -> VAR_603 ) ; VAR_604 -> VAR_605 = VAR_606 ; ( TYPE_82 ) METHOD_112 ( VAR_607 -> VAR_608 ) ; } } } METHOD_113 ( VAR_609 , VAR_610 , VAR_611 ) ; if ( VAR_612 -> VAR_613 == ( TYPE_83 * ) VAR_614 ) break ; VAR_615 = METHOD_114 ( VAR_616 ) ; VAR_617 -> VAR_618 = VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 = 0 ; METHOD_115 ( VAR_623 ) ; VAR_624 = VAR_625 ; if ( -- VAR_626 > 0 ) { VAR_627 = VAR_628 ; if ( VAR_629 == VAR_630 ) VAR_631 = VAR_632 ; goto VAR_633 ; } if ( ( VAR_634 != VAR_635 ) && ( VAR_636 != VAR_637 ) ) { METHOD_116 ( & VAR_638 ) ; if ( VAR_639 ) { if ( VAR_640 -> VAR_641 ) { METHOD_117 ( VAR_642 -> VAR_643 ) ; VAR_644 -> VAR_645 = VAR_646 ; ( TYPE_84 ) METHOD_118 ( VAR_647 -> VAR_648 ) ; } } } } VAR_649 = METHOD_119 ( VAR_650 ) ; METHOD_120 ( VAR_651 ) ; METHOD_121 ( VAR_652 ) ; { TYPE_85 * VAR_653 ; TYPE_86 VAR_654 = 0 ; VAR_655 = VAR_656 ; VAR_657 = VAR_658 ; while ( VAR_659 != ( TYPE_87 * ) VAR_660 ) { TYPE_88 * VAR_661 = VAR_662 ; if ( ( VAR_663 -> VAR_664 == 0 ) || ( VAR_665 -> VAR_666 == 0 ) ) { VAR_667 = VAR_668 -> VAR_669 ; METHOD_122 ( & VAR_670 ) ; } else { VAR_671 = VAR_672 ; VAR_673 = VAR_674 -> VAR_675 ; } } for ( VAR_676 = VAR_677 ; VAR_678 != ( TYPE_89 * ) VAR_679 ; VAR_680 = VAR_681 -> VAR_682 ) VAR_683 -> VAR_684 = VAR_685 ++ ; } if ( VAR_686 != VAR_687 ) { if ( VAR_688 -> VAR_689 ) { METHOD_123 ( VAR_690 -> VAR_691 ) ; VAR_692 -> VAR_693 = VAR_694 ; ( TYPE_90 ) METHOD_124 ( VAR_695 -> VAR_696 ) ; } METHOD_125 ( VAR_697 ) ; VAR_698 = VAR_699 ; } if ( VAR_700 ) ( TYPE_91 ) METHOD_126 ( VAR_701 , METHOD_127 ( ) , ""return"" ) ; if ( VAR_702 == VAR_703 ) METHOD_128 ( VAR_704 , ""ImproperImageHeader"" ) ; return ( VAR_705 ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , ""enter"" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , ""ImproperImageHeader"" ) ; VAR_67 . VAR_68 = METHOD_17 ( VAR_69 ) ; if ( METHOD_18 ( VAR_70 , 2 , ( unsigned TYPE_35 * ) & VAR_71 . VAR_72 ) != 2 ) METHOD_19 ( VAR_73 , ""ImproperImageHeader"" ) ; if ( VAR_74 ) ( TYPE_36 ) METHOD_20 ( VAR_75 , METHOD_21 ( ) , ""Endian%c%c"" , VAR_76 . VAR_77 [ 0 ] , VAR_78 . VAR_79 [ 1 ] ) ; if ( ! METHOD_22 ( VAR_80 . VAR_81 , ""IM"" , 2 ) ) { METHOD_23 = VAR_82 ; METHOD_24 = METHOD_25 ; METHOD_26 = VAR_83 ; METHOD_27 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; } else if ( ! METHOD_28 ( VAR_88 . VAR_89 , ""MI"" , 2 ) ) { METHOD_29 = VAR_90 ; METHOD_30 = VAR_91 ; METHOD_31 = VAR_92 ; METHOD_32 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; } else goto VAR_97 ; if ( METHOD_33 ( VAR_98 . VAR_99 , ""MATLAB"" , 6 ) ) VAR_100 : METHOD_34 ( VAR_101 , ""ImproperImageHeader"" ) ; VAR_102 = METHOD_35 ( VAR_103 ) ; while ( ! METHOD_36 ( VAR_104 ) ) { VAR_105 = 1 ; ( TYPE_37 ) METHOD_37 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 . VAR_110 = METHOD_38 ( VAR_111 ) ; if ( METHOD_39 ( VAR_112 ) ) break ; VAR_113 . VAR_114 = METHOD_40 ( VAR_115 ) ; if ( METHOD_41 ( VAR_116 ) ) break ; VAR_117 += VAR_118 . VAR_119 + 4 + 4 ; VAR_120 = VAR_121 ; if d ( VAR_122 ) if ( VAR_123 . VAR_124 == VAR_125 ) { VAR_126 = METHOD_42 ( VAR_127 , VAR_128 . VAR_129 , VAR_130 , VAR_131 ) ; if ( VAR_132 == VAR_133 ) continue ; VAR_134 . VAR_135 = METHOD_43 ( VAR_136 ) ; } if ( VAR_137 . VAR_138 != VAR_139 ) continue ; VAR_140 . VAR_141 = METHOD_44 ( VAR_142 ) ; VAR_143 . VAR_144 = METHOD_45 ( VAR_145 ) ; VAR_146 . VAR_147 = METHOD_46 ( VAR_148 ) ; VAR_149 . VAR_150 = VAR_151 . VAR_152 & 0xFF ; VAR_153 . VAR_154 = ( VAR_155 . VAR_156 >> 8 ) & 0xFF ; VAR_157 . VAR_158 = METHOD_47 ( VAR_159 ) ; if ( VAR_160 != VAR_161 ) VAR_162 . VAR_163 = METHOD_48 ( VAR_164 ) ; VAR_165 . VAR_166 = METHOD_49 ( VAR_167 ) ; VAR_168 . VAR_169 = METHOD_50 ( VAR_170 ) ; VAR_171 . VAR_172 = METHOD_51 ( VAR_173 ) ; VAR_174 . VAR_175 = METHOD_52 ( VAR_176 ) ; switch ( VAR_177 . VAR_178 ) { case 8 : VAR_179 = VAR_180 = 1 ; break ; case 12 : VAR_181 = VAR_182 = METHOD_53 ( VAR_183 ) ; ( TYPE_38 ) METHOD_54 ( VAR_184 ) ; if ( VAR_185 != 3 ) METHOD_55 ( VAR_186 , ""MultidimensionalMatricesAreNotSupported"" ) ; break ; case 16 : VAR_187 = VAR_188 = METHOD_56 ( VAR_189 ) ; if ( VAR_190 != 3 && VAR_191 != 1 ) METHOD_57 ( VAR_192 , ""MultidimensionalMatricesAreNotSupported"" ) ; VAR_193 = METHOD_58 ( VAR_194 ) ; break ; default : METHOD_59 ( VAR_195 , ""MultidimensionalMatricesAreNotSupported"" ) ; } VAR_196 . VAR_197 = METHOD_60 ( VAR_198 ) ; VAR_199 . VAR_200 = METHOD_61 ( VAR_201 ) ; if ( VAR_202 ) ( TYPE_39 ) METHOD_62 ( VAR_203 , METHOD_63 ( ) , ""MATLAB_HDR.StructureClass%d"" , VAR_204 . VAR_205 ) ; if ( VAR_206 . VAR_207 != VAR_208 && VAR_209 . VAR_210 != VAR_211 && VAR_212 . VAR_213 != VAR_214 && VAR_215 . VAR_216 != VAR_217 && VAR_218 . VAR_219 != VAR_220 && VAR_221 . VAR_222 != VAR_223 && VAR_224 . VAR_225 != VAR_226 && VAR_227 . VAR_228 != VAR_229 && VAR_230 . VAR_231 != VAR_232 && VAR_233 . VAR_234 != VAR_235 && VAR_236 . VAR_237 != VAR_238 ) METHOD_64 ( VAR_239 , ""UnsupportedCellTypeInTheMatrix"" ) ; switch ( VAR_240 . VAR_241 ) { case 0 : VAR_242 = METHOD_65 ( VAR_243 ) ; VAR_244 = 4 * ( TYPE_40 ) ( ( VAR_245 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_66 ( VAR_246 , VAR_247 , VAR_248 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_67 ( VAR_249 , 4 , ( unsigned TYPE_43 * ) & VAR_250 ) ; break ; default : goto VAR_251 ; } VAR_252 = METHOD_68 ( VAR_253 ) ; if ( VAR_254 ) ( TYPE_44 ) METHOD_69 ( VAR_255 , METHOD_70 ( ) , ""MATLAB_HDR.CellType:%.20g"" , ( TYPE_45 ) VAR_256 ) ; ( TYPE_46 ) METHOD_71 ( VAR_257 , 4 , ( unsigned TYPE_47 * ) & VAR_258 ) ; VAR_259 : switch ( VAR_260 ) { case VAR_261 : case VAR_262 : VAR_263 = 8 ; if ( VAR_264 . VAR_265 & VAR_266 ) VAR_267 -> VAR_268 = 1 ; else VAR_269 -> VAR_270 = 8 ; VAR_271 = ( TYPE_48 ) VAR_272 . VAR_273 ; break ; case VAR_274 : case VAR_275 : VAR_276 = 16 ; VAR_277 -> VAR_278 = 16 ; VAR_279 = ( TYPE_49 ) ( 2 * VAR_280 . VAR_281 ) ; break ; case VAR_282 : case VAR_283 : VAR_284 = 32 ; VAR_285 -> VAR_286 = 32 ; VAR_287 = ( TYPE_50 ) ( 4 * VAR_288 . VAR_289 ) ; break ; case VAR_290 : case VAR_291 : VAR_292 = 64 ; VAR_293 -> VAR_294 = 64 ; VAR_295 = ( TYPE_51 ) ( 8 * VAR_296 . VAR_297 ) ; break ; case VAR_298 : VAR_299 = 32 ; VAR_300 -> VAR_301 = 32 ; ( TYPE_52 ) METHOD_72 ( VAR_302 , ""quantum:format"" , ""floating-point"" ) ; if ( VAR_303 . VAR_304 & VAR_305 ) { } VAR_306 = ( TYPE_53 ) ( 4 * VAR_307 . VAR_308 ) ; break ; case VAR_309 : VAR_310 = 64 ; VAR_311 -> VAR_312 = 64 ; ( TYPE_54 ) METHOD_73 ( VAR_313 , ""quantum:format"" , ""floating-point"" ) ; METHOD_74 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_75 ( VAR_314 , ""IncompatibleSizeOfDouble"" ) ; if ( VAR_315 . VAR_316 & VAR_317 ) { } VAR_318 = ( TYPE_57 ) ( 8 * VAR_319 . VAR_320 ) ; break ; default : METHOD_76 ( VAR_321 , ""UnsupportedCellTypeInTheMatrix"" ) ; } ( TYPE_58 ) VAR_322 ; VAR_323 -> VAR_324 = VAR_325 . VAR_326 ; VAR_327 -> VAR_328 = VAR_329 . VAR_330 ; VAR_331 = METHOD_77 ( VAR_332 , VAR_333 ) ; if ( VAR_334 == ( TYPE_59 * ) VAR_335 ) METHOD_78 ( VAR_336 , ""MemoryAllocationFailed"" ) ; VAR_337 = 1 ; VAR_338 -> VAR_339 = VAR_340 << VAR_341 -> VAR_342 ; if ( VAR_343 -> VAR_344 == 0 || VAR_345 -> VAR_346 == 0 ) goto VAR_347 ; if ( ( VAR_348 . VAR_349 == 8 ) && ( ( VAR_350 . VAR_351 & VAR_352 ) == 0 ) ) { VAR_353 -> VAR_354 = VAR_355 ; METHOD_79 ( VAR_356 , VAR_357 , VAR_358 ) ; } if ( VAR_359 -> VAR_360 ) { TYPE_60 VAR_361 = VAR_362 -> VAR_363 ; VAR_364 -> VAR_365 = VAR_366 -> VAR_367 ; VAR_368 -> VAR_369 = VAR_370 ; goto VAR_371 ; } VAR_372 = METHOD_80 ( VAR_373 , VAR_374 -> VAR_375 , VAR_376 -> VAR_377 , VAR_378 ) ; if ( VAR_379 == VAR_380 ) return ( METHOD_81 ( VAR_381 ) ) ; VAR_382 = ( unsigned TYPE_61 * ) METHOD_82 ( ( TYPE_62 ) ( VAR_383 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_384 == VAR_385 ) METHOD_83 ( VAR_386 , ""MemoryAllocationFailed"" ) ; VAR_387 = 0 ; VAR_388 = 0 ; if ( VAR_389 == VAR_390 || VAR_391 == VAR_392 ) { METHOD_84 ( VAR_393 , VAR_394 -> VAR_395 , VAR_396 . VAR_397 , VAR_398 . VAR_399 , VAR_400 , VAR_401 , VAR_402 , & VAR_403 -> VAR_404 , & VAR_405 -> VAR_406 ) ; } if ( VAR_407 == 1 ) VAR_408 = 0 ; do { for ( VAR_409 = 0 ; VAR_410 < ( TYPE_64 ) VAR_411 . VAR_412 ; VAR_413 ++ ) { VAR_414 = METHOD_85 ( VAR_415 , 0 , VAR_416 . VAR_417 - VAR_418 - 1 , VAR_419 -> VAR_420 , 1 , VAR_421 ) ; if ( VAR_422 == ( TYPE_65 * ) VAR_423 ) { if ( VAR_424 ) ( TYPE_66 ) METHOD_86 ( VAR_425 , METHOD_87 ( ) , ""MATsetimagepixelsreturnsunexpectedNULLonarow%u."" , ( unsigned ) ( VAR_426 . VAR_427 - VAR_428 - 1 ) ) ; goto VAR_429 ; } if ( METHOD_88 ( VAR_430 , VAR_431 , ( unsigned TYPE_67 * ) VAR_432 ) != ( TYPE_68 ) VAR_433 ) { if ( VAR_434 ) ( TYPE_69 ) METHOD_89 ( VAR_435 , METHOD_90 ( ) , ""MATcannotreadscanrow%ufromafile."" , ( unsigned ) ( VAR_436 . VAR_437 - VAR_438 - 1 ) ) ; goto VAR_439 ; } if ( ( VAR_440 == VAR_441 || VAR_442 == VAR_443 ) && ( VAR_444 . VAR_445 & VAR_446 ) ) { METHOD_91 ( ( unsigned TYPE_70 * ) VAR_447 , VAR_448 ) ; if ( METHOD_92 ( VAR_449 , ( TYPE_71 * ) VAR_450 , VAR_451 , VAR_452 [ VAR_453 ] , VAR_454 , VAR_455 ) <= 0 ) { VAR_456 : if ( VAR_457 ) ( TYPE_72 ) METHOD_93 ( VAR_458 , METHOD_94 ( ) , ""MATfailedtoImportQuantumPixelsforarow%u"" , ( unsigned ) ( VAR_459 . VAR_460 - VAR_461 - 1 ) ) ; break ; } } else { if ( METHOD_95 ( VAR_462 , ( TYPE_73 * ) VAR_463 , VAR_464 , VAR_465 [ VAR_466 ] , VAR_467 , VAR_468 ) <= 0 ) goto VAR_469 ; if ( VAR_470 <= 1 && ( VAR_471 == VAR_472 || VAR_473 == VAR_474 || VAR_475 == VAR_476 || VAR_477 == VAR_478 ) ) METHOD_96 ( VAR_479 , VAR_480 , VAR_481 . VAR_482 ) ; } if ( ! METHOD_97 ( VAR_483 , VAR_484 ) ) { if ( VAR_485 ) ( TYPE_74 ) METHOD_98 ( VAR_486 , METHOD_99 ( ) , ""MATfailedtosyncimagepixelsforarow%u"" , ( unsigned ) ( VAR_487 . VAR_488 - VAR_489 - 1 ) ) ; goto VAR_490 ; } } } while ( VAR_491 -- >= 2 ) ; VAR_464 = METHOD_129 ( VAR_464 ) ; VAR_492 : if ( VAR_493 . VAR_494 & VAR_495 ) { VAR_496 = METHOD_100 ( VAR_497 ) ; VAR_498 = METHOD_101 ( VAR_499 ) ; if ( VAR_500 == VAR_501 || VAR_502 == VAR_503 ) { METHOD_102 ( VAR_504 , VAR_505 -> VAR_506 , VAR_507 . VAR_508 , VAR_509 . VAR_510 , VAR_511 , VAR_512 , VAR_513 , & VAR_514 , & VAR_515 ) ; } if ( VAR_516 == VAR_517 ) for ( VAR_518 = 0 ; VAR_519 < ( TYPE_75 ) VAR_520 . VAR_521 ; VAR_522 ++ ) { METHOD_103 ( VAR_523 , VAR_524 , ( TYPE_76 * ) VAR_525 ) ; METHOD_104 ( VAR_526 , ( TYPE_77 * ) VAR_527 , VAR_528 , VAR_529 , VAR_530 , VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_78 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_105 ( VAR_539 , VAR_540 , ( TYPE_79 * ) VAR_541 ) ; METHOD_106 ( VAR_542 , ( TYPE_80 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } } if ( ( VAR_548 . VAR_549 == 8 ) && ( ( VAR_550 . VAR_551 & VAR_552 ) == 0 ) ) VAR_553 -> VAR_554 = VAR_555 ; if ( VAR_556 -> VAR_557 == 1 ) VAR_558 -> VAR_559 = VAR_560 ; if ( VAR_561 == VAR_562 ) VAR_563 = VAR_564 ; VAR_565 = METHOD_107 ( VAR_566 , 90.0 , VAR_567 ) ; if ( VAR_568 != ( TYPE_81 * ) VAR_569 ) { VAR_570 -> VAR_571 . VAR_572 = 0 ; VAR_573 -> VAR_574 . VAR_575 = 0 ; VAR_576 = VAR_577 -> VAR_578 ; VAR_579 -> VAR_580 = VAR_581 -> VAR_582 ; VAR_583 -> VAR_584 = VAR_585 -> VAR_586 ; VAR_587 -> VAR_588 = VAR_589 ; METHOD_108 ( & VAR_590 , VAR_591 ) ; METHOD_109 ( & VAR_592 ) ; } VAR_593 : if ( VAR_594 != VAR_595 ) if ( VAR_596 != VAR_597 ) { METHOD_110 ( & VAR_598 ) ; if ( VAR_599 ) { if ( VAR_600 -> VAR_601 ) { METHOD_111 ( VAR_602 -> VAR_603 ) ; VAR_604 -> VAR_605 = VAR_606 ; ( TYPE_82 ) METHOD_112 ( VAR_607 -> VAR_608 ) ; } } } METHOD_113 ( VAR_609 , VAR_610 , VAR_611 ) ; if ( VAR_612 -> VAR_613 == ( TYPE_83 * ) VAR_614 ) break ; VAR_615 = METHOD_114 ( VAR_616 ) ; VAR_617 -> VAR_618 = VAR_619 -> VAR_620 = 0 ; VAR_621 -> VAR_622 = 0 ; METHOD_115 ( VAR_623 ) ; VAR_624 = VAR_625 ; if ( -- VAR_626 > 0 ) { VAR_627 = VAR_628 ; if ( VAR_629 == VAR_630 ) VAR_631 = VAR_632 ; goto VAR_633 ; } if ( ( VAR_634 != VAR_635 ) && ( VAR_636 != VAR_637 ) ) { METHOD_116 ( & VAR_638 ) ; if ( VAR_639 ) { if ( VAR_640 -> VAR_641 ) { METHOD_117 ( VAR_642 -> VAR_643 ) ; VAR_644 -> VAR_645 = VAR_646 ; ( TYPE_84 ) METHOD_118 ( VAR_647 -> VAR_648 ) ; } } } } VAR_649 = METHOD_119 ( VAR_650 ) ; METHOD_120 ( VAR_651 ) ; METHOD_121 ( VAR_652 ) ; { TYPE_85 * VAR_653 ; TYPE_86 VAR_654 = 0 ; VAR_655 = VAR_656 ; VAR_657 = VAR_658 ; while ( VAR_659 != ( TYPE_87 * ) VAR_660 ) { TYPE_88 * VAR_661 = VAR_662 ; if ( ( VAR_663 -> VAR_664 == 0 ) || ( VAR_665 -> VAR_666 == 0 ) ) { VAR_667 = VAR_668 -> VAR_669 ; METHOD_122 ( & VAR_670 ) ; } else { VAR_671 = VAR_672 ; VAR_673 = VAR_674 -> VAR_675 ; } } for ( VAR_676 = VAR_677 ; VAR_678 != ( TYPE_89 * ) VAR_679 ; VAR_680 = VAR_681 -> VAR_682 ) VAR_683 -> VAR_684 = VAR_685 ++ ; } if ( VAR_686 != VAR_687 ) { if ( VAR_688 -> VAR_689 ) { METHOD_123 ( VAR_690 -> VAR_691 ) ; VAR_692 -> VAR_693 = VAR_694 ; ( TYPE_90 ) METHOD_124 ( VAR_695 -> VAR_696 ) ; } METHOD_125 ( VAR_697 ) ; VAR_698 = VAR_699 ; } if ( VAR_700 ) ( TYPE_91 ) METHOD_126 ( VAR_701 , METHOD_127 ( ) , ""return"" ) ; if ( VAR_702 == VAR_703 ) METHOD_128 ( VAR_704 , ""ImproperImageHeader"" ) ; return ( VAR_705 ) ; }",76
77,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { do {  METHOD_1 ( VAR_1 , VAR_2 , 0x1234 ) ;   } while ( METHOD_2 ( VAR_3 , VAR_4 ) != 0x1234 ) ;   while ( ( METHOD_3 ( VAR_5 , VAR_6 ) & VAR_7 ) == 0 )  { }  METHOD_4 ( VAR_8 , VAR_9 , VAR_10 ) ;  METHOD_5 ( 1 ) ;  if ( METHOD_6 ( VAR_11 , VAR_12 ) != 0x0000 )  { return VAR_13 ; } METHOD_7 ( 1 ) ; return VAR_14 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { do { METHOD_1 ( VAR_1 , VAR_2 , 0x1234 ) ; } while ( METHOD_2 ( VAR_3 , VAR_4 ) != 0x1234 ) ; while ( ( METHOD_3 ( VAR_5 , VAR_6 ) & VAR_7 ) == 0 ) { } METHOD_4 ( VAR_8 , VAR_9 , VAR_10 ) ; METHOD_5 ( 1 ) ; if ( METHOD_6 ( VAR_11 , VAR_15 ) != 0x0000 ) { return VAR_13 ; } METHOD_7 ( 1 ) ; return VAR_14 ; }",77
78,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 ;  TYPE_3 VAR_3 ;  if ( VAR_4 -> VAR_5 == VAR_6 ) return ; VAR_7 = VAR_8 -> VAR_9 - VAR_10 -> VAR_11 ; if ( VAR_12 -> VAR_13 ) VAR_14 += VAR_15 -> VAR_16 -> VAR_17 ; if ( VAR_18 -> VAR_19 + VAR_20 > VAR_21 -> VAR_22 ) VAR_23 = VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) { TYPE_4 VAR_32 = VAR_33 -> VAR_34 [ VAR_35 ] ; if ( ! METHOD_1 ( VAR_36 ) ) {  if ( METHOD_2 ( VAR_37 ) -> VAR_38 == VAR_39 ) {  VAR_40 -> VAR_41 [ VAR_42 ] = METHOD_3 ( ) ; } else { METHOD_4 ( VAR_43 , METHOD_5 ( VAR_44 ) ) ; } }  }  }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) return ; VAR_7 = VAR_8 -> VAR_9 - VAR_10 -> VAR_11 ; if ( VAR_12 -> VAR_13 ) VAR_14 += VAR_15 -> VAR_16 -> VAR_17 ; if ( VAR_18 -> VAR_19 + VAR_20 > VAR_21 -> VAR_22 ) VAR_23 = VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) { TYPE_4 VAR_32 = VAR_33 -> VAR_34 [ VAR_35 ] ; if ( ! METHOD_1 ( VAR_36 ) ) { METHOD_4 ( VAR_43 , METHOD_5 ( VAR_44 ) ) ; } } VAR_30 = VAR_40 -> VAR_25 - VAR_40 -> VAR_41 ; VAR_45 = METHOD_3 ( ) ; for ( ; VAR_42 < VAR_30 ; VAR_42 ++ ) { VAR_40 -> VAR_41 [ VAR_42 ] = VAR_45 ; } }",78
79,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; TYPE_6 * VAR_7 = VAR_8 ; TYPE_7 * VAR_9 = VAR_10 ; CRM_CHECK ( VAR_11 != VAR_12 , return VAR_13 ) ; CRM_CHECK ( VAR_14 != VAR_15 , return VAR_16 ) ;  if ( VAR_17 -> VAR_18 == VAR_19 ) {  METHOD_1 ( ""SkippingclientwithNULLchannel"" ) ; return VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 , VAR_23 ) ; METHOD_3 ( VAR_24 != VAR_25 ) ; if ( VAR_26 -> VAR_27 && METHOD_4 ( VAR_28 , VAR_29 ) ) { VAR_30 = VAR_31 ; } else if ( VAR_32 -> VAR_33 && METHOD_5 ( VAR_34 , VAR_35 ) ) { VAR_36 = VAR_37 ; } else if ( VAR_38 -> VAR_39 && METHOD_6 ( VAR_40 , VAR_41 ) ) { VAR_42 = VAR_43 ; } else if ( VAR_44 -> VAR_45 && METHOD_7 ( VAR_46 , VAR_47 ) ) { VAR_48 = VAR_49 ; } else if ( VAR_50 -> VAR_51 && METHOD_8 ( VAR_52 , VAR_53 ) ) { VAR_54 = VAR_55 ; } if ( VAR_56 ) { if ( VAR_57 -> VAR_58 ) { if ( METHOD_9 ( VAR_59 -> VAR_60 , 0 , VAR_61 , VAR_62 ) == VAR_63 ) { METHOD_10 ( ""Notificationofclient%s/%sfailed"" , VAR_64 -> VAR_65 , VAR_66 -> VAR_67 ) ; } TYPE_8 TYPE_9 } else if ( VAR_68 -> VAR_69 ) { METHOD_11 ( ""Sent%snotificationtoclient%s/%s"" , VAR_70 , VAR_71 -> VAR_72 , VAR_73 -> VAR_74 ) ; METHOD_12 ( VAR_75 -> VAR_76 , VAR_77 , VAR_78 -> VAR_79 ) ; } else { METHOD_13 ( ""Unknowntransportfor%s"" , VAR_80 -> VAR_81 ) ; } } return VAR_82 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; TYPE_6 * VAR_7 = VAR_8 ; TYPE_7 * VAR_9 = VAR_10 ; CRM_CHECK ( VAR_11 != VAR_12 , return VAR_13 ) ; CRM_CHECK ( VAR_14 != VAR_15 , return VAR_16 ) ; if ( VAR_17 -> VAR_18 == VAR_19 ) { METHOD_1 ( ""SkippingclientwithNULLchannel"" ) ; return VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 , VAR_23 ) ; METHOD_3 ( VAR_24 != VAR_25 ) ; if ( VAR_26 -> VAR_27 && METHOD_4 ( VAR_28 , VAR_29 ) ) { VAR_30 = VAR_31 ; } else if ( VAR_32 -> VAR_33 && METHOD_5 ( VAR_34 , VAR_35 ) ) { VAR_36 = VAR_37 ; } else if ( VAR_38 -> VAR_39 && METHOD_6 ( VAR_40 , VAR_41 ) ) { VAR_42 = VAR_43 ; } else if ( VAR_44 -> VAR_45 && METHOD_7 ( VAR_46 , VAR_47 ) ) { VAR_48 = VAR_49 ; } else if ( VAR_50 -> VAR_51 && METHOD_8 ( VAR_52 , VAR_53 ) ) { VAR_54 = VAR_55 ; } if ( VAR_56 ) { if ( VAR_57 -> VAR_58 ) { if ( METHOD_9 ( VAR_59 -> VAR_60 , 0 , VAR_61 , VAR_62 ) == VAR_63 ) { METHOD_10 ( ""Notificationofclient%s/%sfailed"" , VAR_64 -> VAR_65 , VAR_66 -> VAR_67 ) ; } TYPE_8 TYPE_9 } else if ( VAR_68 -> VAR_69 ) { METHOD_11 ( ""Sent%snotificationtoclient%s/%s"" , VAR_70 , VAR_71 -> VAR_72 , VAR_73 -> VAR_74 ) ; METHOD_12 ( VAR_75 -> VAR_76 , VAR_77 , VAR_78 -> VAR_79 ) ; } else { METHOD_13 ( ""Unknowntransportfor%s"" , VAR_80 -> VAR_81 ) ; } } return VAR_82 ; }",79
80,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = STRUCT_OR_UNION_4 -> VAR_5 ; struct STRUCT_OR_UNION_5 VAR_6 = { . VAR_7 = VAR_8 , . VAR_9 = VAR_10 , . VAR_11 = VAR_12 , } ; TYPE_4 VAR_13 ; TYPE_5 VAR_14 ; TYPE_6 VAR_15 ; METHOD_1 ( VAR_16 ) ; if ( METHOD_2 ( * VAR_17 ) ) return - VAR_18 ; VAR_19 = VAR_20 = 0 ; METHOD_3 ( VAR_21 ) ; VAR_22 = METHOD_4 ( VAR_23 , STRUCT_OR_UNION_6 -> VAR_24 -> VAR_25 & VAR_26 ) ; while ( VAR_27 . VAR_28 ) { VAR_29 = METHOD_5 ( VAR_30 , & VAR_31 ) ; if ( VAR_32 < 0 ) break ; else if ( ! VAR_33 ) { if ( VAR_34 ) break ; if ( METHOD_6 ( VAR_35 , VAR_36 ) ) break ; if ( VAR_37 -> VAR_38 ) { VAR_39 = METHOD_7 ( VAR_40 ) ; break ; } if ( VAR_41 -> VAR_42 & VAR_43 ) break ; if ( VAR_44 -> VAR_45 == VAR_46 ) { if ( ! METHOD_8 ( VAR_47 , VAR_48 ) ) VAR_49 = - VAR_50 ; break ; } if ( ! VAR_51 ) { VAR_52 = - VAR_53 ; break ; }  METHOD_9 ( VAR_54 , & VAR_55 , VAR_56 ) ;  if ( METHOD_10 ( VAR_57 ) ) { VAR_58 = METHOD_11 ( VAR_59 ) ; break ; } continue ; } VAR_60 . VAR_61 -= VAR_62 ; VAR_63 += VAR_64 ; if ( ! VAR_65 ) break ; METHOD_12 ( VAR_66 ) ; METHOD_13 ( VAR_67 ) ; if ( VAR_68 -> VAR_69 || VAR_70 -> VAR_71 == VAR_72 || ( VAR_73 -> VAR_74 & VAR_75 ) || METHOD_14 ( VAR_76 ) ) break ; } METHOD_15 ( VAR_77 ) ; if ( VAR_78 ) return VAR_79 ; return VAR_80 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = STRUCT_OR_UNION_4 -> VAR_5 ; struct STRUCT_OR_UNION_5 VAR_6 = { . VAR_7 = VAR_8 , . VAR_9 = VAR_10 , . VAR_11 = VAR_12 , } ; TYPE_4 VAR_13 ; TYPE_5 VAR_14 ; TYPE_6 VAR_15 ; METHOD_1 ( VAR_16 ) ; if ( METHOD_2 ( * VAR_17 ) ) return - VAR_18 ; VAR_19 = VAR_20 = 0 ; METHOD_3 ( VAR_21 ) ; VAR_22 = METHOD_4 ( VAR_23 , STRUCT_OR_UNION_6 -> VAR_24 -> VAR_25 & VAR_26 ) ; while ( VAR_27 . VAR_28 ) { VAR_29 = METHOD_5 ( VAR_30 , & VAR_31 ) ; if ( VAR_32 < 0 ) break ; else if ( ! VAR_33 ) { if ( VAR_34 ) break ; if ( METHOD_6 ( VAR_35 , VAR_36 ) ) break ; if ( VAR_37 -> VAR_38 ) { VAR_39 = METHOD_7 ( VAR_40 ) ; break ; } if ( ! METHOD_16 ( & VAR_77 -> VAR_81 ) ) break ; if ( VAR_41 -> VAR_42 & VAR_43 ) break ; if ( VAR_44 -> VAR_45 == VAR_46 ) { if ( ! METHOD_8 ( VAR_47 , VAR_48 ) ) VAR_49 = - VAR_50 ; break ; } if ( ! VAR_51 ) { VAR_52 = - VAR_53 ; break ; } METHOD_9 ( VAR_54 , & VAR_55 , VAR_56 ) ; if ( METHOD_10 ( VAR_57 ) ) { VAR_58 = METHOD_11 ( VAR_59 ) ; break ; } continue ; } VAR_60 . VAR_61 -= VAR_62 ; VAR_63 += VAR_64 ; if ( ! VAR_65 ) break ; METHOD_12 ( VAR_66 ) ; METHOD_13 ( VAR_67 ) ; if ( VAR_68 -> VAR_69 || VAR_70 -> VAR_71 == VAR_72 || ( VAR_73 -> VAR_74 & VAR_75 ) || METHOD_14 ( VAR_76 ) ) break ; } METHOD_15 ( VAR_77 ) ; if ( VAR_78 ) return VAR_79 ; return VAR_80 ; }",80
81,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 ; VAR_6 * VAR_7 ; TYPE_7 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; VAR_14 = ( TYPE_11 * ) METHOD_1 ( VAR_15 -> VAR_16 -> VAR_17 -> VAR_18 , & VAR_19 ) ; if ( VAR_20 != VAR_21 && VAR_22 != VAR_23 ) { return METHOD_2 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; } if ( ! VAR_30 ) { const TYPE_12 * VAR_31 , * VAR_32 ; VAR_33 -> VAR_34 = VAR_35 = METHOD_3 ( VAR_36 -> VAR_37 -> VAR_38 , sizeof ( * VAR_39 ) ) ; VAR_40 -> VAR_41 = VAR_42 ; if ( ! VAR_43 -> VAR_44 -> VAR_45 ) { VAR_46 -> VAR_47 = METHOD_4 ( VAR_48 -> VAR_49 ) ; } else { VAR_50 -> VAR_51 = 0 ; } VAR_52 = METHOD_5 ( VAR_53 -> VAR_54 -> VAR_55 , ""Transfer-Encoding"" ) ; VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 -> VAR_59 , ""Content-Length"" ) ; if ( VAR_60 ) { if ( METHOD_7 ( VAR_61 , ""chunked"" ) == 0 || METHOD_8 ( VAR_62 -> VAR_63 -> VAR_64 , VAR_65 , ""chunked"" ) ) { VAR_66 -> VAR_67 = VAR_68 ; } else if ( VAR_69 -> VAR_70 -> VAR_71 == VAR_72 ) { ap_log_rerror ( VAR_73 , VAR_74 , 0 , VAR_75 -> VAR_76 , METHOD_9 ( 02555 )  ""UnknownTransfer-Encoding:%s;""  ""usingread-until-close"" , VAR_77 ) ; VAR_78 = VAR_79 ; } else { ap_log_rerror ( VAR_80 , VAR_81 , 0 , VAR_82 -> VAR_83 , METHOD_10 ( 01585 ) ""UnknownTransfer-Encoding:%s"" , VAR_84 ) ; return VAR_85 ; } VAR_86 = VAR_87 ; } if ( VAR_88 ) { TYPE_13 * VAR_89 ; VAR_90 -> VAR_91 = VAR_92 ; if ( METHOD_11 ( & VAR_93 -> VAR_94 , VAR_95 , & VAR_96 , 10 ) || VAR_97 == VAR_98 || * VAR_99 || VAR_100 -> VAR_101 < 0 ) { VAR_102 -> VAR_103 = 0 ; ap_log_rerror ( VAR_104 , VAR_105 , 0 , VAR_106 -> VAR_107 , METHOD_12 ( 01587 ) ""InvalidContent-Length"" ) ;  return VAR_108 ;  } if ( VAR_109 -> VAR_110 && VAR_111 -> VAR_112 < VAR_113 -> VAR_114 ) { ap_log_rerror ( VAR_115 , VAR_116 , 0 , VAR_117 -> VAR_118 , METHOD_13 ( 01588 ) ""Requestedcontent-lengthof%"" VAR_119 ""islargerthantheconfiguredlimit"" ""of%"" VAR_120 , VAR_121 -> VAR_122 , VAR_123 -> VAR_124 ) ; return VAR_125 ; } } if ( VAR_126 -> VAR_127 == VAR_128 && VAR_129 -> VAR_130 -> VAR_131 != VAR_132 ) { VAR_133 = METHOD_14 ( VAR_134 -> VAR_135 -> VAR_136 ) ; METHOD_15 ( VAR_137 , VAR_138 ) ; VAR_139 -> VAR_140 = 1 ; return VAR_141 ; } if ( ( VAR_142 -> VAR_143 == VAR_144 || ( VAR_145 -> VAR_146 == VAR_147 && VAR_148 -> VAR_149 > 0 ) ) && VAR_150 -> VAR_151 -> VAR_152 && VAR_153 -> VAR_154 -> VAR_155 >= METHOD_16 ( 1 , 1 ) && ! ( VAR_156 -> VAR_157 -> VAR_158 || VAR_159 -> VAR_160 -> VAR_161 ) ) { if ( ! METHOD_17 ( VAR_162 -> VAR_163 -> VAR_164 ) ) { VAR_165 -> VAR_166 = VAR_167 ; VAR_168 -> VAR_169 = 1 ; } else { TYPE_14 * VAR_170 ; TYPE_15 VAR_171 ; TYPE_16 * VAR_172 ; VAR_173 = METHOD_18 ( VAR_174 -> VAR_175 -> VAR_176 , VAR_177 -> VAR_178 -> VAR_179 ) ; VAR_180 -> VAR_181 -> VAR_182 = 0 ; VAR_183 = apr_pstrcat ( VAR_184 -> VAR_185 -> VAR_186 , VAR_187 """" , METHOD_19 ( VAR_188 ) , VAR_189 VAR_190 , VAR_191 ) ; VAR_192 = METHOD_20 ( VAR_193 ) ; METHOD_21 ( VAR_194 , VAR_195 ) ; VAR_196 = METHOD_22 ( VAR_197 , VAR_198 , VAR_199 -> VAR_200 -> VAR_201 , VAR_202 -> VAR_203 -> VAR_204 ) ; METHOD_23 ( VAR_205 , VAR_206 ) ; VAR_207 = METHOD_24 ( VAR_208 -> VAR_209 -> VAR_210 ) ; METHOD_25 ( VAR_211 , VAR_212 ) ; VAR_213 = METHOD_26 ( VAR_214 -> VAR_215 -> VAR_216 , VAR_217 ) ;  if ( VAR_218 != VAR_219 ) {  return VAR_220 ; } } } } if ( VAR_221 -> VAR_222 ) { VAR_223 = METHOD_27 ( VAR_224 -> VAR_225 -> VAR_226 ) ; METHOD_28 ( VAR_227 , VAR_228 ) ; return VAR_229 ; } do { METHOD_29 ( VAR_230 ) ; VAR_231 = 0 ; switch ( VAR_232 -> VAR_233 ) { case VAR_234 : case VAR_235 : case VAR_236 :  case VAR_237 : {  VAR_238 = METHOD_30 ( VAR_239 -> VAR_240 , VAR_241 , VAR_242 , VAR_243 , 0 ) ; if ( VAR_244 == VAR_245 && ( ( VAR_246 == VAR_247 && METHOD_31 ( VAR_248 ) ) || ( METHOD_32 ( VAR_249 ) ) ) ) { return VAR_250 ; } if ( VAR_251 == VAR_252 ) { return VAR_253 ; } if ( VAR_254 != VAR_255 ) { return VAR_256 ; } VAR_257 = METHOD_33 ( VAR_258 ) ; while ( VAR_259 != METHOD_34 ( VAR_260 ) ) { const TYPE_17 * VAR_261 ; TYPE_18 VAR_262 ; if ( ! METHOD_35 ( VAR_263 ) ) { VAR_264 = METHOD_36 ( VAR_265 , & VAR_266 , & VAR_267 , VAR_268 ) ; if ( VAR_269 == VAR_270 ) { VAR_271 = METHOD_37 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 -> VAR_276 -> VAR_277 -> VAR_278 ) ; } if ( VAR_279 != VAR_280 ) { ap_log_rerror ( VAR_281 , VAR_282 , VAR_283 , VAR_284 -> VAR_285 , METHOD_38 ( 01590 ) ""Errorreadingchunk%s"" , ( VAR_286 == VAR_287 ) ? ""(overflow)"" : """" ) ; return VAR_288 ; } } METHOD_39 ( VAR_289 ) ; VAR_290 = METHOD_40 ( VAR_291 ) ; } VAR_292 = 1 ; if ( VAR_293 -> VAR_294 == VAR_295 ) {  TYPE_19 VAR_296 =  VAR_297 -> VAR_298 == VAR_299 ; return METHOD_41 ( VAR_300 , VAR_301 , VAR_302 , VAR_303 ) ; } break ; } case VAR_304 : case VAR_305 : case VAR_306 : { if ( VAR_307 -> VAR_308 != VAR_309 && VAR_310 -> VAR_311 < VAR_312 ) { VAR_313 = VAR_314 -> VAR_315 ; } if ( VAR_316 > 0 ) { VAR_317 = METHOD_42 ( VAR_318 -> VAR_319 , VAR_320 , VAR_321 , VAR_322 , VAR_323 ) ; if ( VAR_324 == VAR_325 && ( ( VAR_326 == VAR_327 && METHOD_43 ( VAR_328 ) ) || ( METHOD_44 ( VAR_329 ) ) ) ) { return VAR_330 ; } if ( VAR_331 == VAR_332 && VAR_333 -> VAR_334 != VAR_335 && VAR_336 -> VAR_337 > 0 ) { return VAR_338 ; } if ( VAR_339 != VAR_340 ) { return VAR_341 ; } METHOD_45 ( VAR_342 , 0 , & VAR_343 ) ; METHOD_46 ( VAR_344 >= 0 ) ; if ( VAR_345 -> VAR_346 != VAR_347 ) { VAR_348 -> VAR_349 -= VAR_350 ; if ( VAR_351 -> VAR_352 > 0 ) { VAR_353 = METHOD_47 ( VAR_354 ) ; if ( METHOD_48 ( VAR_355 ) ) { METHOD_49 ( VAR_356 ) ; return VAR_357 ; } } else if ( VAR_358 -> VAR_359 == VAR_360 ) { VAR_361 -> VAR_362 = VAR_363 ; VAR_364 -> VAR_365 = 0 ; } } } if ( VAR_366 -> VAR_367 == VAR_368 && VAR_369 -> VAR_370 == 0 ) { VAR_371 = METHOD_50 ( VAR_372 -> VAR_373 -> VAR_374 ) ; METHOD_51 ( VAR_375 , VAR_376 ) ; VAR_377 -> VAR_378 = 1 ; } if ( VAR_379 -> VAR_380 ) { VAR_381 -> VAR_382 += VAR_383 ; if ( VAR_384 -> VAR_385 < VAR_386 -> VAR_387 ) { ap_log_rerror ( VAR_388 , VAR_389 , 0 , VAR_390 -> VAR_391 , METHOD_52 ( 01591 ) ""Readcontent-lengthof%"" VAR_392 ""islargerthantheconfiguredlimit"" ""of%"" VAR_393 , VAR_394 -> VAR_395 , VAR_396 -> VAR_397 ) ; return VAR_398 ; } } break ; } case VAR_399 : { VAR_400 = METHOD_53 ( VAR_401 -> VAR_402 , VAR_403 , VAR_404 , VAR_405 , VAR_406 ) ; if ( VAR_407 == VAR_408 && ( ( VAR_409 == VAR_410 && METHOD_54 ( VAR_411 ) ) || ( METHOD_55 ( VAR_412 ) ) ) ) { return VAR_413 ; } if ( VAR_414 != VAR_415 ) { return VAR_416 ; } break ; } default : {  break ;  } } } while ( VAR_417 ) ; return VAR_418 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * VAR_5 ; VAR_6 * VAR_7 ; TYPE_7 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; VAR_14 = ( TYPE_11 * ) METHOD_1 ( VAR_15 -> VAR_16 -> VAR_17 -> VAR_18 , & VAR_19 ) ; if ( VAR_20 != VAR_21 && VAR_22 != VAR_23 ) { return METHOD_2 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; } if ( ! VAR_30 ) { const TYPE_12 * VAR_31 , * VAR_32 ; VAR_33 -> VAR_34 = VAR_35 = METHOD_3 ( VAR_36 -> VAR_37 -> VAR_38 , sizeof ( * VAR_39 ) ) ; VAR_40 -> VAR_41 = VAR_42 ; if ( ! VAR_43 -> VAR_44 -> VAR_45 ) { VAR_46 -> VAR_47 = METHOD_4 ( VAR_48 -> VAR_49 ) ; } else { VAR_50 -> VAR_51 = 0 ; } VAR_52 = METHOD_5 ( VAR_53 -> VAR_54 -> VAR_55 , ""Transfer-Encoding"" ) ; VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 -> VAR_59 , ""Content-Length"" ) ; if ( VAR_60 ) { if ( METHOD_7 ( VAR_61 , ""chunked"" ) == 0 || METHOD_8 ( VAR_62 -> VAR_63 -> VAR_64 , VAR_65 , ""chunked"" ) ) { VAR_66 -> VAR_67 = VAR_68 ; } else if ( VAR_69 -> VAR_70 -> VAR_71 == VAR_72 ) { ap_log_rerror ( VAR_73 , VAR_74 , 0 , VAR_75 -> VAR_76 , METHOD_9 ( 02555 ) ""UnknownTransfer-Encoding:%s;"" ""usingread-until-close"" , VAR_84 ) ; return VAR_85 ; } VAR_86 = VAR_87 ; } if ( VAR_88 ) { TYPE_13 * VAR_89 ; VAR_90 -> VAR_91 = VAR_92 ; if ( METHOD_11 ( & VAR_93 -> VAR_94 , VAR_95 , & VAR_96 , 10 ) || VAR_97 == VAR_98 || * VAR_99 || VAR_100 -> VAR_101 < 0 ) { VAR_102 -> VAR_103 = 0 ; ap_log_rerror ( VAR_104 , VAR_105 , 0 , VAR_106 -> VAR_107 , METHOD_12 ( 01587 ) ""InvalidContent-Length"" ) ; return VAR_419 ; } if ( VAR_109 -> VAR_110 && VAR_111 -> VAR_112 < VAR_113 -> VAR_114 ) { ap_log_rerror ( VAR_115 , VAR_116 , 0 , VAR_117 -> VAR_118 , METHOD_13 ( 01588 ) ""Requestedcontent-lengthof%"" VAR_119 ""islargerthantheconfiguredlimit"" ""of%"" VAR_120 , VAR_121 -> VAR_122 , VAR_123 -> VAR_124 ) ; return VAR_125 ; } } if ( VAR_126 -> VAR_127 == VAR_128 && VAR_129 -> VAR_130 -> VAR_131 != VAR_132 ) { VAR_133 = METHOD_14 ( VAR_134 -> VAR_135 -> VAR_136 ) ; METHOD_15 ( VAR_137 , VAR_138 ) ; VAR_139 -> VAR_140 = 1 ; return VAR_141 ; } if ( ( VAR_142 -> VAR_143 == VAR_144 || ( VAR_145 -> VAR_146 == VAR_147 && VAR_148 -> VAR_149 > 0 ) ) && VAR_150 -> VAR_151 -> VAR_152 && VAR_153 -> VAR_154 -> VAR_155 >= METHOD_16 ( 1 , 1 ) && ! ( VAR_156 -> VAR_157 -> VAR_158 || VAR_159 -> VAR_160 -> VAR_161 ) ) { if ( ! METHOD_17 ( VAR_162 -> VAR_163 -> VAR_164 ) ) { VAR_165 -> VAR_166 = VAR_167 ; VAR_168 -> VAR_169 = 1 ; } else { TYPE_14 * VAR_170 ; TYPE_15 VAR_171 ; TYPE_16 * VAR_172 ; VAR_173 = METHOD_18 ( VAR_174 -> VAR_175 -> VAR_176 , VAR_177 -> VAR_178 -> VAR_179 ) ; VAR_180 -> VAR_181 -> VAR_182 = 0 ; VAR_183 = apr_pstrcat ( VAR_184 -> VAR_185 -> VAR_186 , VAR_187 """" , METHOD_19 ( VAR_188 ) , VAR_189 VAR_190 , VAR_191 ) ; VAR_192 = METHOD_20 ( VAR_193 ) ; METHOD_21 ( VAR_194 , VAR_195 ) ; VAR_196 = METHOD_22 ( VAR_197 , VAR_198 , VAR_199 -> VAR_200 -> VAR_201 , VAR_202 -> VAR_203 -> VAR_204 ) ; METHOD_23 ( VAR_205 , VAR_206 ) ; VAR_207 = METHOD_24 ( VAR_208 -> VAR_209 -> VAR_210 ) ; METHOD_25 ( VAR_211 , VAR_212 ) ; VAR_213 = METHOD_26 ( VAR_214 -> VAR_215 -> VAR_216 , VAR_217 ) ; METHOD_29 ( VAR_217 ) ; if ( VAR_218 != VAR_219 ) { return VAR_220 ; } } } } if ( VAR_221 -> VAR_222 ) { VAR_223 = METHOD_27 ( VAR_224 -> VAR_225 -> VAR_226 ) ; METHOD_28 ( VAR_227 , VAR_228 ) ; return VAR_229 ; } do { METHOD_29 ( VAR_230 ) ; VAR_231 = 0 ; switch ( VAR_232 -> VAR_233 ) { case VAR_234 : case VAR_235 : case VAR_236 : case VAR_237 : { VAR_238 = METHOD_30 ( VAR_239 -> VAR_240 , VAR_241 , VAR_242 , VAR_243 , 0 ) ; if ( VAR_244 == VAR_245 && ( ( VAR_246 == VAR_247 && METHOD_31 ( VAR_248 ) ) || ( METHOD_32 ( VAR_249 ) ) ) ) { return VAR_250 ; } if ( VAR_251 == VAR_252 ) { return VAR_253 ; } if ( VAR_254 != VAR_255 ) { return VAR_256 ; } VAR_257 = METHOD_33 ( VAR_258 ) ; while ( VAR_259 != METHOD_34 ( VAR_260 ) ) { const TYPE_17 * VAR_261 ; TYPE_18 VAR_262 ; if ( ! METHOD_35 ( VAR_263 ) ) { VAR_264 = METHOD_36 ( VAR_265 , & VAR_266 , & VAR_267 , VAR_268 ) ; if ( VAR_269 == VAR_270 ) { VAR_271 = METHOD_37 ( VAR_272 , VAR_273 , VAR_274 , VAR_275 -> VAR_276 -> VAR_277 -> VAR_278 ) ; } if ( VAR_279 != VAR_280 ) { ap_log_rerror ( VAR_281 , VAR_282 , VAR_283 , VAR_284 -> VAR_285 , METHOD_38 ( 01590 ) ""Errorreadingchunk%s"" , ( VAR_286 == VAR_287 ) ? ""(overflow)"" : """" ) ; return VAR_288 ; } } METHOD_39 ( VAR_289 ) ; VAR_290 = METHOD_40 ( VAR_291 ) ; } VAR_292 = 1 ; if ( VAR_293 -> VAR_294 == VAR_295 ) { TYPE_19 VAR_296 = VAR_297 -> VAR_298 == VAR_299 ; return METHOD_41 ( VAR_300 , VAR_301 , VAR_302 , VAR_303 ) ; } break ; } case VAR_304 : case VAR_305 : case VAR_306 : { if ( VAR_307 -> VAR_308 != VAR_309 && VAR_310 -> VAR_311 < VAR_312 ) { VAR_313 = VAR_314 -> VAR_315 ; } if ( VAR_316 > 0 ) { VAR_317 = METHOD_42 ( VAR_318 -> VAR_319 , VAR_320 , VAR_321 , VAR_322 , VAR_323 ) ; if ( VAR_324 == VAR_325 && ( ( VAR_326 == VAR_327 && METHOD_43 ( VAR_328 ) ) || ( METHOD_44 ( VAR_329 ) ) ) ) { return VAR_330 ; } if ( VAR_331 == VAR_332 && VAR_333 -> VAR_334 != VAR_335 && VAR_336 -> VAR_337 > 0 ) { return VAR_338 ; } if ( VAR_339 != VAR_340 ) { return VAR_341 ; } METHOD_45 ( VAR_342 , 0 , & VAR_343 ) ; METHOD_46 ( VAR_344 >= 0 ) ; if ( VAR_345 -> VAR_346 != VAR_347 ) { VAR_348 -> VAR_349 -= VAR_350 ; if ( VAR_351 -> VAR_352 > 0 ) { VAR_353 = METHOD_47 ( VAR_354 ) ; if ( METHOD_48 ( VAR_355 ) ) { METHOD_49 ( VAR_356 ) ; return VAR_357 ; } } else if ( VAR_358 -> VAR_359 == VAR_360 ) { VAR_361 -> VAR_362 = VAR_363 ; VAR_364 -> VAR_365 = 0 ; } } } if ( VAR_366 -> VAR_367 == VAR_368 && VAR_369 -> VAR_370 == 0 ) { VAR_371 = METHOD_50 ( VAR_372 -> VAR_373 -> VAR_374 ) ; METHOD_51 ( VAR_375 , VAR_376 ) ; VAR_377 -> VAR_378 = 1 ; } if ( VAR_379 -> VAR_380 ) { VAR_381 -> VAR_382 += VAR_383 ; if ( VAR_384 -> VAR_385 < VAR_386 -> VAR_387 ) { ap_log_rerror ( VAR_388 , VAR_389 , 0 , VAR_390 -> VAR_391 , METHOD_52 ( 01591 ) ""Readcontent-lengthof%"" VAR_392 ""islargerthantheconfiguredlimit"" ""of%"" VAR_393 , VAR_394 -> VAR_395 , VAR_396 -> VAR_397 ) ; return VAR_398 ; } } break ; } case VAR_399 : { VAR_400 = METHOD_53 ( VAR_401 -> VAR_402 , VAR_403 , VAR_404 , VAR_405 , VAR_406 ) ; if ( VAR_407 == VAR_408 && ( ( VAR_409 == VAR_410 && METHOD_54 ( VAR_411 ) ) || ( METHOD_55 ( VAR_412 ) ) ) ) { return VAR_413 ; } if ( VAR_414 != VAR_415 ) { return VAR_416 ; } break ; } default : { ap_log_rerror ( VAR_388 , VAR_422 , 0 , VAR_401 -> VAR_391 , METHOD_52 ( 02901 ) ""Unexpectedbodystate(%i)"" , ( TYPE_19 ) VAR_396 -> VAR_367 ) ; return VAR_85 ; } } } while ( VAR_417 ) ; return VAR_418 ; }",81
82,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const TYPE_4 * VAR_4 ; const struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; METHOD_1 ( ( VAR_8 , ""wb-id:"" ) ) ; if ( VAR_9 < sizeof ( * VAR_10 ) || ! METHOD_2 ( * VAR_11 ) ) return ( - 1 ) ; VAR_12 -= sizeof ( * VAR_13 ) ; METHOD_3 ( ( VAR_14 , ""%u/%s:%u(max%u/%s:%u)"" , METHOD_4 ( & VAR_15 -> VAR_16 . VAR_17 ) , METHOD_5 ( VAR_18 , & VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) , METHOD_6 ( & VAR_23 -> VAR_24 . VAR_25 . VAR_26 ) , METHOD_7 ( & VAR_27 -> VAR_28 ) , METHOD_8 ( VAR_29 , & VAR_30 -> VAR_31 . VAR_32 ) , METHOD_9 ( & VAR_33 -> VAR_34 . VAR_35 ) ) ) ; VAR_36 = METHOD_10 ( & VAR_37 -> VAR_38 . VAR_39 ) ; VAR_40 -= sizeof ( * VAR_41 ) * VAR_42 ; VAR_43 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_44 + 1 ) ; VAR_45 = ( TYPE_7 * ) ( VAR_46 + VAR_47 ) ;  if ( ! METHOD_11 ( VAR_48 , VAR_49 ) ) {  METHOD_12 ( ( VAR_50 , ""\\"""" ) ) ; fn_print ( VAR_51 , ( u_char * ) VAR_52 , ( u_char * ) VAR_53 + VAR_54 ) ; METHOD_13 ( ( VAR_55 , ""\\"""" ) ) ; } VAR_56 = '<' ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 && METHOD_14 ( * VAR_60 ) ; ++ VAR_61 , ++ VAR_62 ) { METHOD_15 ( ( VAR_63 , ""%c%s:%u"" , VAR_64 , METHOD_16 ( VAR_65 , & VAR_66 -> VAR_67 ) , METHOD_17 ( & VAR_68 -> VAR_69 ) ) ) ; VAR_70 = ',' ; } if ( VAR_71 >= VAR_72 ) { METHOD_18 ( ( VAR_73 , "">"" ) ) ; return ( 0 ) ; } return ( - 1 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const TYPE_4 * VAR_4 ; const struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; METHOD_1 ( ( VAR_8 , ""wb-id:"" ) ) ; if ( VAR_9 < sizeof ( * VAR_10 ) || ! METHOD_2 ( * VAR_11 ) ) return ( - 1 ) ; VAR_12 -= sizeof ( * VAR_13 ) ; METHOD_3 ( ( VAR_14 , ""%u/%s:%u(max%u/%s:%u)"" , METHOD_4 ( & VAR_15 -> VAR_16 . VAR_17 ) , METHOD_5 ( VAR_18 , & VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) , METHOD_6 ( & VAR_23 -> VAR_24 . VAR_25 . VAR_26 ) , METHOD_7 ( & VAR_27 -> VAR_28 ) , METHOD_8 ( VAR_29 , & VAR_30 -> VAR_31 . VAR_32 ) , METHOD_9 ( & VAR_33 -> VAR_34 . VAR_35 ) ) ) ; VAR_36 = METHOD_10 ( & VAR_37 -> VAR_38 . VAR_39 ) ; VAR_40 -= sizeof ( * VAR_41 ) * VAR_42 ; VAR_43 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_44 + 1 ) ; VAR_45 = ( TYPE_7 * ) ( VAR_46 + VAR_47 ) ; if ( ! METHOD_11 ( VAR_48 , VAR_49 ) ) { METHOD_12 ( ( VAR_50 , ""\\"""" ) ) ; fn_print ( VAR_51 , ( u_char * ) VAR_52 , ( u_char * ) VAR_53 + VAR_54 ) ; METHOD_13 ( ( VAR_55 , ""\\"""" ) ) ; } VAR_56 = '<' ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 && METHOD_14 ( * VAR_60 ) ; ++ VAR_61 , ++ VAR_62 ) { METHOD_15 ( ( VAR_63 , ""%c%s:%u"" , VAR_64 , METHOD_16 ( VAR_65 , & VAR_66 -> VAR_67 ) , METHOD_17 ( & VAR_68 -> VAR_69 ) ) ) ; VAR_70 = ',' ; } if ( VAR_71 >= VAR_72 ) { METHOD_18 ( ( VAR_73 , "">"" ) ) ; return ( 0 ) ; } return ( - 1 ) ; }",82
83,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_3 ( VAR_9 ) ; DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_6 * , VAR_10 , VAR_11 -> VAR_12 ) ; struct STRUCT_OR_UNION_7 * VAR_13 , * VAR_14 , VAR_15 ;  struct STRUCT_OR_UNION_8 * VAR_16 = VAR_17 ;  struct STRUCT_OR_UNION_9 * VAR_18 = VAR_19 ; struct STRUCT_OR_UNION_10 VAR_20 ; struct STRUCT_OR_UNION_11 * VAR_21 ; TYPE_2 VAR_22 = VAR_23 -> VAR_24 ; TYPE_3 VAR_25 = VAR_26 ; TYPE_4 VAR_27 = - 1 ; TYPE_5 VAR_28 = - 1 ; TYPE_6 VAR_29 = - 1 ; TYPE_7 VAR_30 = VAR_31 -> VAR_32 || VAR_33 -> VAR_34 & VAR_35 ; TYPE_8 VAR_36 ; TYPE_9 VAR_37 = 0 ; TYPE_10 VAR_38 = METHOD_4 ( VAR_39 ) ; TYPE_11 ( * VAR_40 ) ( TYPE_12 * , TYPE_13 * , TYPE_14 , TYPE_15 , TYPE_16 , struct STRUCT_OR_UNION_12 * ) ; if ( VAR_41 ) { if ( VAR_42 < VAR_43 ( struct VAR_44 , VAR_45 ) ) return - VAR_46 ; switch ( VAR_47 -> VAR_48 ) { case VAR_49 : if ( VAR_50 < VAR_51 ) return - VAR_52 ; VAR_53 = & VAR_54 -> VAR_55 ; break ; case VAR_56 : goto VAR_57 ; case VAR_58 : VAR_59 -> VAR_60 = VAR_61 = VAR_62 ; VAR_63 -> VAR_64 = VAR_65 = 0 ; VAR_66 = VAR_67 ; break ; default : return - VAR_68 ; } } else if ( ! VAR_69 -> VAR_70 ) { if ( VAR_71 -> VAR_72 != VAR_73 ) return - VAR_74 ; VAR_75 = & VAR_76 -> VAR_77 ; } else VAR_78 = VAR_79 ; if ( VAR_80 ) { if ( METHOD_5 ( VAR_81 ) ) { struct STRUCT_OR_UNION_13 VAR_82 ; VAR_83 . VAR_84 = VAR_85 ; VAR_86 . VAR_87 = VAR_88 ? VAR_89 -> VAR_90 : VAR_91 -> VAR_92 ; VAR_93 . VAR_94 . VAR_95 = VAR_96 -> VAR_97 [ 3 ] ; VAR_98 -> VAR_99 = & VAR_100 ; VAR_101 -> VAR_102 = sizeof ( VAR_103 ) ; VAR_104 : if ( METHOD_6 ( VAR_105 ) ) return - VAR_106 ; return METHOD_7 ( VAR_107 , VAR_108 , VAR_109 ) ; } } if ( VAR_110 -> VAR_111 == VAR_112 ) return METHOD_8 ( VAR_113 , VAR_114 , VAR_115 ) ; if ( VAR_116 > VAR_117 - sizeof ( struct STRUCT_OR_UNION_14 ) ) return - VAR_118 ; VAR_119 = VAR_120 ? VAR_121 : VAR_122 ; if ( VAR_123 -> VAR_124 ) { METHOD_9 ( VAR_125 ) ; if ( METHOD_10 ( VAR_126 -> VAR_127 ) ) { if ( METHOD_11 ( VAR_128 -> VAR_129 != VAR_130 ) ) { METHOD_12 ( VAR_131 ) ; return - VAR_132 ; } VAR_133 = VAR_134 ; goto VAR_135 ; } METHOD_13 ( VAR_136 ) ; } VAR_137 += sizeof ( struct STRUCT_OR_UNION_15 ) ; METHOD_14 ( & VAR_138 , 0 , sizeof ( VAR_139 ) ) ; if ( VAR_140 ) { if ( VAR_141 -> VAR_142 == 0 ) return - VAR_143 ; VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; VAR_148 = & VAR_149 -> VAR_150 ; if ( VAR_151 -> VAR_152 ) { VAR_153 . VAR_154 = VAR_155 -> VAR_156 & VAR_157 ; if ( VAR_158 . VAR_159 & VAR_160 ) { VAR_161 = METHOD_15 ( VAR_162 , VAR_163 . VAR_164 ) ; if ( ! VAR_165 ) return - VAR_166 ; } } if ( VAR_167 -> VAR_168 == VAR_169 && TYPE_17 ( VAR_170 , & VAR_171 -> VAR_172 ) ) VAR_173 = & VAR_174 -> VAR_175 ; if ( VAR_176 >= sizeof ( struct STRUCT_OR_UNION_16 ) && VAR_177 -> VAR_178 && METHOD_16 ( METHOD_17 ( VAR_179 ) ) ) VAR_180 . VAR_181 = VAR_182 -> VAR_183 ; } else { if ( VAR_184 -> VAR_185 != VAR_186 ) return - VAR_187 ; VAR_188 . VAR_189 = VAR_190 -> VAR_191 ; VAR_192 = & VAR_193 -> VAR_194 ; VAR_195 . VAR_196 = VAR_197 -> VAR_198 ; VAR_199 = 1 ; } if ( ! VAR_200 . VAR_201 ) VAR_202 . VAR_203 = VAR_204 -> VAR_205 ; if ( ! VAR_206 . VAR_207 ) VAR_208 . VAR_209 = VAR_210 -> VAR_211 . VAR_212 ; VAR_213 . VAR_214 = VAR_215 -> VAR_216 ; if ( VAR_217 -> VAR_218 ) { VAR_219 = & VAR_220 ; METHOD_18 ( VAR_221 , 0 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; VAR_222 -> VAR_223 = sizeof ( * VAR_224 ) ; VAR_225 = METHOD_19 ( METHOD_20 ( VAR_226 ) , VAR_227 , VAR_228 , & VAR_229 , VAR_230 , & VAR_231 , & VAR_232 , & VAR_233 ) ; if ( VAR_234 < 0 ) { METHOD_21 ( VAR_235 ) ; return VAR_236 ; } if ( ( VAR_237 . VAR_238 & VAR_239 ) && ! VAR_240 ) { VAR_241 = METHOD_22 ( VAR_242 , VAR_243 . VAR_244 ) ; if ( ! VAR_245 ) return - VAR_246 ; } if ( ! ( VAR_247 -> VAR_248 | VAR_249 -> VAR_250 ) ) VAR_251 = VAR_252 ; VAR_253 = 0 ; }  if ( ! VAR_254 )  VAR_255 = VAR_256 -> VAR_257 ; if ( VAR_258 ) VAR_259 = METHOD_23 ( & VAR_260 , VAR_261 , VAR_262 ) ; VAR_263 = METHOD_24 ( & VAR_264 , VAR_265 ) ; VAR_266 . VAR_267 = VAR_268 -> VAR_269 ; if ( ! METHOD_25 ( VAR_270 ) ) VAR_271 . VAR_272 = * VAR_273 ; else VAR_274 . VAR_275 . VAR_276 [ 15 ] = 0x1 ; if ( METHOD_26 ( & VAR_277 . VAR_278 ) && ! METHOD_27 ( & VAR_279 -> VAR_280 ) ) VAR_281 . VAR_282 = VAR_283 -> VAR_284 ; VAR_285 . VAR_286 = VAR_287 -> VAR_288 ; VAR_289 = METHOD_28 ( & VAR_290 , VAR_291 , & VAR_292 ) ; if ( VAR_293 ) VAR_294 = 0 ; if ( ! VAR_295 . VAR_296 && METHOD_29 ( & VAR_297 . VAR_298 ) ) { VAR_299 . VAR_300 = VAR_301 -> VAR_302 ; VAR_303 = 0 ; } else if ( ! VAR_304 . VAR_305 ) VAR_306 . VAR_307 = VAR_308 -> VAR_309 ; METHOD_30 ( VAR_310 , METHOD_31 ( & VAR_311 ) ) ; VAR_312 = METHOD_32 ( VAR_313 , & VAR_314 , VAR_315 ) ; if ( METHOD_33 ( VAR_316 ) ) { VAR_317 = METHOD_34 ( VAR_318 ) ; VAR_319 = VAR_320 ; goto VAR_321 ; } if ( VAR_322 < 0 ) VAR_323 = METHOD_35 ( VAR_324 , & VAR_325 , VAR_326 ) ; if ( VAR_327 < 0 ) VAR_328 = VAR_329 -> VAR_330 ; if ( VAR_331 -> VAR_332 & VAR_333 ) goto VAR_334 ; VAR_335 : if ( ! VAR_336 ) { struct STRUCT_OR_UNION_18 * VAR_337 ; VAR_338 = METHOD_36 ( VAR_339 , VAR_340 , VAR_341 , VAR_342 , sizeof ( struct STRUCT_OR_UNION_19 ) , VAR_343 , VAR_344 , VAR_345 , & VAR_346 , ( struct STRUCT_OR_UNION_20 * ) VAR_347 , VAR_348 -> VAR_349 , VAR_350 ) ; VAR_351 = METHOD_37 ( VAR_352 ) ; if ( ! METHOD_38 ( VAR_353 ) ) VAR_354 = METHOD_39 ( VAR_355 , & VAR_356 ) ; goto VAR_357 ; } METHOD_40 ( VAR_358 ) ; if ( METHOD_41 ( VAR_359 -> VAR_360 ) ) { METHOD_42 ( VAR_361 ) ; METHOD_43 ( ""udpcorkappbug2\\n"" ) ; VAR_362 = - VAR_363 ; goto VAR_364 ; } VAR_365 -> VAR_366 = VAR_367 ; VAR_368 : if ( VAR_369 < 0 ) VAR_370 = VAR_371 -> VAR_372 ; VAR_373 -> VAR_374 += VAR_375 ; VAR_376 = METHOD_44 ( VAR_377 , VAR_378 , VAR_379 , VAR_380 , sizeof ( struct STRUCT_OR_UNION_21 ) , VAR_381 , VAR_382 , VAR_383 , & VAR_384 , ( struct STRUCT_OR_UNION_22 * ) VAR_385 , VAR_386 ? VAR_387 -> VAR_388 | VAR_389 : VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 ) METHOD_45 ( VAR_394 ) ; else if ( ! VAR_395 ) VAR_396 = METHOD_46 ( VAR_397 ) ; else if ( METHOD_47 ( METHOD_48 ( & VAR_398 -> VAR_399 ) ) ) VAR_400 -> VAR_401 = 0 ; if ( VAR_402 > 0 ) VAR_403 = VAR_404 -> VAR_405 ? METHOD_49 ( VAR_406 ) : 0 ; METHOD_50 ( VAR_407 ) ; VAR_408 : if ( VAR_409 ) { if ( VAR_410 ) { ip6_dst_store ( VAR_411 , VAR_412 , TYPE_18 ( & VAR_413 . VAR_414 , & VAR_415 -> VAR_416 ) ? & VAR_417 -> VAR_418 : VAR_419 , VAR_420 TYPE_19 TYPE_20 ( & VAR_421 . VAR_422 , & VAR_423 -> VAR_424 ) ? & VAR_425 -> VAR_426 : VAR_427 ) ; } else { METHOD_51 ( VAR_428 ) ; } VAR_429 = VAR_430 ; } VAR_431 : METHOD_52 ( VAR_432 ) ;  METHOD_53 ( VAR_433 ) ;  if ( ! VAR_434 ) return VAR_435 ; if ( VAR_436 == - VAR_437 || METHOD_54 ( VAR_438 , & VAR_439 -> VAR_440 -> VAR_441 ) ) { METHOD_55 ( METHOD_56 ( VAR_442 ) , VAR_443 , VAR_444 ) ; } return VAR_445 ; VAR_446 : METHOD_57 ( VAR_447 ) ; if ( ! ( VAR_448 -> VAR_449 & VAR_450 ) || VAR_451 ) goto VAR_452 ; VAR_453 = 0 ; goto VAR_454 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_3 ( VAR_9 ) ; DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_6 * , VAR_10 , VAR_11 -> VAR_12 ) ; struct STRUCT_OR_UNION_7 * VAR_13 , * VAR_14 , VAR_15 ; struct STRUCT_OR_UNION_8 * VAR_16 = VAR_17 ; struct STRUCT_OR_UNION_9 * VAR_18 = VAR_19 ; struct STRUCT_OR_UNION_10 VAR_20 ; struct STRUCT_OR_UNION_11 * VAR_21 ; TYPE_2 VAR_22 = VAR_23 -> VAR_24 ; TYPE_3 VAR_25 = VAR_26 ; TYPE_4 VAR_27 = - 1 ; TYPE_5 VAR_28 = - 1 ; TYPE_6 VAR_29 = - 1 ; TYPE_7 VAR_30 = VAR_31 -> VAR_32 || VAR_33 -> VAR_34 & VAR_35 ; TYPE_8 VAR_36 ; TYPE_9 VAR_37 = 0 ; TYPE_10 VAR_38 = METHOD_4 ( VAR_39 ) ; TYPE_11 ( * VAR_40 ) ( TYPE_12 * , TYPE_13 * , TYPE_14 , TYPE_15 , TYPE_16 , struct STRUCT_OR_UNION_12 * ) ; if ( VAR_41 ) { if ( VAR_42 < VAR_43 ( struct VAR_44 , VAR_45 ) ) return - VAR_46 ; switch ( VAR_47 -> VAR_48 ) { case VAR_49 : if ( VAR_50 < VAR_51 ) return - VAR_52 ; VAR_53 = & VAR_54 -> VAR_55 ; break ; case VAR_56 : goto VAR_57 ; case VAR_58 : VAR_59 -> VAR_60 = VAR_61 = VAR_62 ; VAR_63 -> VAR_64 = VAR_65 = 0 ; VAR_66 = VAR_67 ; break ; default : return - VAR_68 ; } } else if ( ! VAR_69 -> VAR_70 ) { if ( VAR_71 -> VAR_72 != VAR_73 ) return - VAR_74 ; VAR_75 = & VAR_76 -> VAR_77 ; } else VAR_78 = VAR_79 ; if ( VAR_80 ) { if ( METHOD_5 ( VAR_81 ) ) { struct STRUCT_OR_UNION_13 VAR_82 ; VAR_83 . VAR_84 = VAR_85 ; VAR_86 . VAR_87 = VAR_88 ? VAR_89 -> VAR_90 : VAR_91 -> VAR_92 ; VAR_93 . VAR_94 . VAR_95 = VAR_96 -> VAR_97 [ 3 ] ; VAR_98 -> VAR_99 = & VAR_100 ; VAR_101 -> VAR_102 = sizeof ( VAR_103 ) ; VAR_104 : if ( METHOD_6 ( VAR_105 ) ) return - VAR_106 ; return METHOD_7 ( VAR_107 , VAR_108 , VAR_109 ) ; } } if ( VAR_110 -> VAR_111 == VAR_112 ) return METHOD_8 ( VAR_113 , VAR_114 , VAR_115 ) ; if ( VAR_116 > VAR_117 - sizeof ( struct STRUCT_OR_UNION_14 ) ) return - VAR_118 ; VAR_119 = VAR_120 ? VAR_121 : VAR_122 ; if ( VAR_123 -> VAR_124 ) { METHOD_9 ( VAR_125 ) ; if ( METHOD_10 ( VAR_126 -> VAR_127 ) ) { if ( METHOD_11 ( VAR_128 -> VAR_129 != VAR_130 ) ) { METHOD_12 ( VAR_131 ) ; return - VAR_132 ; } VAR_133 = VAR_134 ; goto VAR_135 ; } METHOD_13 ( VAR_136 ) ; } VAR_137 += sizeof ( struct STRUCT_OR_UNION_15 ) ; METHOD_14 ( & VAR_138 , 0 , sizeof ( VAR_139 ) ) ; if ( VAR_140 ) { if ( VAR_141 -> VAR_142 == 0 ) return - VAR_143 ; VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; VAR_148 = & VAR_149 -> VAR_150 ; if ( VAR_151 -> VAR_152 ) { VAR_153 . VAR_154 = VAR_155 -> VAR_156 & VAR_157 ; if ( VAR_158 . VAR_159 & VAR_160 ) { VAR_161 = METHOD_15 ( VAR_162 , VAR_163 . VAR_164 ) ; if ( ! VAR_165 ) return - VAR_166 ; } } if ( VAR_167 -> VAR_168 == VAR_169 && TYPE_17 ( VAR_170 , & VAR_171 -> VAR_172 ) ) VAR_173 = & VAR_174 -> VAR_175 ; if ( VAR_176 >= sizeof ( struct STRUCT_OR_UNION_16 ) && VAR_177 -> VAR_178 && METHOD_16 ( METHOD_17 ( VAR_179 ) ) ) VAR_180 . VAR_181 = VAR_182 -> VAR_183 ; } else { if ( VAR_184 -> VAR_185 != VAR_186 ) return - VAR_187 ; VAR_188 . VAR_189 = VAR_190 -> VAR_191 ; VAR_192 = & VAR_193 -> VAR_194 ; VAR_195 . VAR_196 = VAR_197 -> VAR_198 ; VAR_199 = 1 ; } if ( ! VAR_200 . VAR_201 ) VAR_202 . VAR_203 = VAR_204 -> VAR_205 ; if ( ! VAR_206 . VAR_207 ) VAR_208 . VAR_209 = VAR_210 -> VAR_211 . VAR_212 ; VAR_213 . VAR_214 = VAR_215 -> VAR_216 ; if ( VAR_217 -> VAR_218 ) { VAR_219 = & VAR_220 ; METHOD_18 ( VAR_221 , 0 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; VAR_222 -> VAR_223 = sizeof ( * VAR_224 ) ; VAR_225 = METHOD_19 ( METHOD_20 ( VAR_226 ) , VAR_227 , VAR_228 , & VAR_229 , VAR_230 , & VAR_231 , & VAR_232 , & VAR_233 ) ; if ( VAR_234 < 0 ) { METHOD_21 ( VAR_235 ) ; return VAR_236 ; } if ( ( VAR_237 . VAR_238 & VAR_239 ) && ! VAR_240 ) { VAR_241 = METHOD_22 ( VAR_242 , VAR_243 . VAR_244 ) ; if ( ! VAR_245 ) return - VAR_246 ; } if ( ! ( VAR_247 -> VAR_248 | VAR_249 -> VAR_250 ) ) VAR_251 = VAR_252 ; VAR_253 = 0 ; } if ( ! VAR_254 ) VAR_255 = VAR_256 -> VAR_257 ; if ( VAR_258 ) VAR_259 = METHOD_23 ( & VAR_260 , VAR_261 , VAR_262 ) ; VAR_263 = METHOD_24 ( & VAR_264 , VAR_265 ) ; VAR_266 . VAR_267 = VAR_268 -> VAR_269 ; if ( ! METHOD_25 ( VAR_270 ) ) VAR_271 . VAR_272 = * VAR_273 ; else VAR_274 . VAR_275 . VAR_276 [ 15 ] = 0x1 ; if ( METHOD_26 ( & VAR_277 . VAR_278 ) && ! METHOD_27 ( & VAR_279 -> VAR_280 ) ) VAR_281 . VAR_282 = VAR_283 -> VAR_284 ; VAR_285 . VAR_286 = VAR_287 -> VAR_288 ; VAR_289 = METHOD_28 ( & VAR_290 , VAR_291 , & VAR_292 ) ; if ( VAR_293 ) VAR_294 = 0 ; if ( ! VAR_295 . VAR_296 && METHOD_29 ( & VAR_297 . VAR_298 ) ) { VAR_299 . VAR_300 = VAR_301 -> VAR_302 ; VAR_303 = 0 ; } else if ( ! VAR_304 . VAR_305 ) VAR_306 . VAR_307 = VAR_308 -> VAR_309 ; METHOD_30 ( VAR_310 , METHOD_31 ( & VAR_311 ) ) ; VAR_312 = METHOD_32 ( VAR_313 , & VAR_314 , VAR_315 ) ; if ( METHOD_33 ( VAR_316 ) ) { VAR_317 = METHOD_34 ( VAR_318 ) ; VAR_319 = VAR_320 ; goto VAR_321 ; } if ( VAR_322 < 0 ) VAR_323 = METHOD_35 ( VAR_324 , & VAR_325 , VAR_326 ) ; if ( VAR_327 < 0 ) VAR_328 = VAR_329 -> VAR_330 ; if ( VAR_331 -> VAR_332 & VAR_333 ) goto VAR_334 ; VAR_335 : if ( ! VAR_336 ) { struct STRUCT_OR_UNION_18 * VAR_337 ; VAR_338 = METHOD_36 ( VAR_339 , VAR_340 , VAR_341 , VAR_342 , sizeof ( struct STRUCT_OR_UNION_19 ) , VAR_343 , VAR_344 , VAR_345 , & VAR_346 , ( struct STRUCT_OR_UNION_20 * ) VAR_347 , VAR_348 -> VAR_349 , VAR_350 ) ; VAR_351 = METHOD_37 ( VAR_352 ) ; if ( ! METHOD_38 ( VAR_353 ) ) VAR_354 = METHOD_39 ( VAR_355 , & VAR_356 ) ; goto VAR_357 ; } METHOD_40 ( VAR_358 ) ; if ( METHOD_41 ( VAR_359 -> VAR_360 ) ) { METHOD_42 ( VAR_361 ) ; METHOD_43 ( ""udpcorkappbug2\\n"" ) ; VAR_362 = - VAR_363 ; goto VAR_364 ; } VAR_365 -> VAR_366 = VAR_367 ; VAR_368 : if ( VAR_369 < 0 ) VAR_370 = VAR_371 -> VAR_372 ; VAR_373 -> VAR_374 += VAR_375 ; VAR_376 = METHOD_44 ( VAR_377 , VAR_378 , VAR_379 , VAR_380 , sizeof ( struct STRUCT_OR_UNION_21 ) , VAR_381 , VAR_382 , VAR_383 , & VAR_384 , ( struct STRUCT_OR_UNION_22 * ) VAR_385 , VAR_386 ? VAR_387 -> VAR_388 | VAR_389 : VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 ) METHOD_45 ( VAR_394 ) ; else if ( ! VAR_395 ) VAR_396 = METHOD_46 ( VAR_397 ) ; else if ( METHOD_47 ( METHOD_48 ( & VAR_398 -> VAR_399 ) ) ) VAR_400 -> VAR_401 = 0 ; if ( VAR_402 > 0 ) VAR_403 = VAR_404 -> VAR_405 ? METHOD_49 ( VAR_406 ) : 0 ; METHOD_50 ( VAR_407 ) ; VAR_408 : if ( VAR_409 ) { if ( VAR_410 ) { ip6_dst_store ( VAR_411 , VAR_412 , TYPE_18 ( & VAR_413 . VAR_414 , & VAR_415 -> VAR_416 ) ? & VAR_417 -> VAR_418 : VAR_419 , VAR_420 TYPE_19 TYPE_20 ( & VAR_421 . VAR_422 , & VAR_423 -> VAR_424 ) ? & VAR_425 -> VAR_426 : VAR_427 ) ; } else { METHOD_51 ( VAR_428 ) ; } VAR_429 = VAR_430 ; } VAR_431 : METHOD_52 ( VAR_432 ) ; METHOD_53 ( VAR_433 ) ; METHOD_59 ( VAR_455 ) ; if ( ! VAR_434 ) return VAR_435 ; if ( VAR_436 == - VAR_437 || METHOD_54 ( VAR_438 , & VAR_439 -> VAR_440 -> VAR_441 ) ) { METHOD_55 ( METHOD_56 ( VAR_442 ) , VAR_443 , VAR_444 ) ; } return VAR_445 ; VAR_446 : METHOD_57 ( VAR_447 ) ; if ( ! ( VAR_448 -> VAR_449 & VAR_450 ) || VAR_451 ) goto VAR_452 ; VAR_453 = 0 ; goto VAR_454 ; }",83
84,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , struct STRUCT_OR_UNION_4 * VAR_4 , struct STRUCT_OR_UNION_5 * VAR_5 ) { TYPE_3 VAR_6 ; TYPE_4 * VAR_7 = VAR_8 ; TYPE_5 VAR_9 = 0 ; TYPE_6 VAR_10 ; if ( METHOD_1 ( STRUCT_OR_UNION_6 -> VAR_11 ) ) return - VAR_12 ; switch ( VAR_13 ) { case VAR_14 : VAR_15 = VAR_16 ; if ( VAR_17 ) {  TYPE_7 VAR_18 = STRUCT_OR_UNION_7 -> VAR_19 ;   VAR_20 = METHOD_2 ( VAR_21 , & VAR_22 ) ;  if ( VAR_23 < 0 ) return VAR_24 ; if ( VAR_25 == 0 ) VAR_26 = VAR_27 ; VAR_28 = METHOD_3 ( STRUCT_OR_UNION_8 , VAR_29 , VAR_30 , VAR_31 ) ; if ( VAR_32 ) return VAR_33 ; } break ; case VAR_34 : VAR_35 = VAR_36 ; if ( ! METHOD_4 ( STRUCT_OR_UNION_9 -> VAR_37 ) ) return VAR_38 ? - VAR_39 : 0 ; break ; default : return - VAR_40 ; } if ( VAR_41 ) { VAR_42 = METHOD_5 ( VAR_43 , & VAR_44 ) ; if ( METHOD_6 ( VAR_45 ) ) return ( TYPE_8 ) METHOD_7 ( VAR_46 ) ; } if ( VAR_47 ) VAR_48 = METHOD_8 ( VAR_49 , STRUCT_OR_UNION_10 , VAR_50 , VAR_51 , """" , VAR_52 , VAR_53 , 0 , VAR_54 , VAR_55 ) ; else VAR_56 = METHOD_9 ( STRUCT_OR_UNION_11 , VAR_57 , """" , VAR_58 , VAR_59 , 0 ) ; METHOD_10 ( VAR_60 ) ; return VAR_61 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , struct STRUCT_OR_UNION_4 * VAR_4 , struct STRUCT_OR_UNION_5 * VAR_5 ) { TYPE_3 VAR_6 ; TYPE_4 * VAR_7 = VAR_8 ; TYPE_5 VAR_9 = 0 ; TYPE_6 VAR_10 ; if ( METHOD_1 ( STRUCT_OR_UNION_6 -> VAR_11 ) ) return - VAR_12 ; switch ( VAR_13 ) { case VAR_14 : VAR_15 = VAR_16 ; if ( VAR_17 ) { TYPE_7 VAR_18 = STRUCT_OR_UNION_7 -> VAR_19 ; VAR_20 = METHOD_2 ( VAR_21 , & VAR_22 ) ; if ( VAR_23 < 0 ) return VAR_24 ; if ( VAR_25 == 0 ) VAR_26 = VAR_27 ; VAR_28 = METHOD_3 ( STRUCT_OR_UNION_8 , VAR_29 , VAR_30 , VAR_31 ) ; if ( VAR_32 ) return VAR_33 ; } break ; case VAR_34 : VAR_35 = VAR_36 ; if ( ! METHOD_4 ( STRUCT_OR_UNION_9 -> VAR_37 ) ) return VAR_38 ? - VAR_39 : 0 ; break ; default : return - VAR_40 ; } if ( VAR_41 ) { VAR_42 = METHOD_5 ( VAR_43 , & VAR_44 ) ; if ( METHOD_6 ( VAR_45 ) ) return ( TYPE_8 ) METHOD_7 ( VAR_46 ) ; } if ( VAR_47 ) VAR_48 = METHOD_8 ( VAR_49 , STRUCT_OR_UNION_10 , VAR_50 , VAR_51 , """" , VAR_52 , VAR_53 , 0 , VAR_54 , VAR_55 ) ; else VAR_56 = METHOD_9 ( STRUCT_OR_UNION_11 , VAR_57 , """" , VAR_58 , VAR_59 , 0 ) ; METHOD_10 ( VAR_60 ) ; return VAR_61 ; }",84
85,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_6 VAR_14 , VAR_15 ;  VAR_16 * VAR_17 ;  TYPE_7 * VAR_18 ; METHOD_1 ( ""pixFillMapHoles"" ) ; if ( ! VAR_19 || METHOD_2 ( VAR_20 ) != 8 ) return METHOD_3 ( ""pixnotdefinedornot8bpp"" , VAR_21 , 1 ) ; if ( METHOD_4 ( VAR_22 ) ) return METHOD_5 ( ""pixiscolormapped"" , VAR_23 , 1 ) ; METHOD_6 ( VAR_24 , & VAR_25 , & VAR_26 , VAR_27 ) ; VAR_28 = METHOD_7 ( 0 ) ; VAR_29 = 0 ; VAR_30 = ( VAR_31 == VAR_32 ) ? 255 : 0 ; for ( VAR_33 = 0 ; VAR_34 < VAR_35 ; VAR_36 ++ ) { VAR_37 = VAR_38 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { METHOD_8 ( VAR_43 , VAR_44 , VAR_45 , & VAR_46 ) ; if ( VAR_47 != VAR_48 ) { VAR_49 = VAR_50 ; VAR_51 = VAR_52 ; break ; } } if ( VAR_53 == VAR_54 ) { METHOD_9 ( VAR_55 , 0 ) ; VAR_56 ++ ; } else { METHOD_10 ( VAR_57 , 1 ) ; for ( VAR_58 = VAR_59 - 1 ; VAR_60 >= 0 ; VAR_61 -- ) METHOD_11 ( VAR_62 , VAR_63 , VAR_64 , VAR_65 ) ; METHOD_12 ( VAR_66 , VAR_67 , 0 , & VAR_68 ) ; for ( VAR_69 = 1 ; VAR_70 < VAR_71 ; VAR_72 ++ ) { METHOD_13 ( VAR_73 , VAR_74 , VAR_75 , & VAR_76 ) ; if ( VAR_77 == VAR_78 ) METHOD_14 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 ) ; else VAR_83 = VAR_84 ; } } } METHOD_15 ( VAR_85 , 0 ) ; if ( VAR_86 == VAR_87 ) { METHOD_16 ( & VAR_88 ) ; METHOD_17 ( ""nobgfound;nodatainanycolumn\\n"" , VAR_89 ) ; return 1 ; } if ( VAR_90 > 0 ) {  VAR_91 = METHOD_18 ( VAR_92 , VAR_93 ) ;  VAR_94 = 0 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; VAR_98 ++ ) { METHOD_19 ( VAR_99 , VAR_100 , & VAR_101 ) ; if ( VAR_102 == 1 ) { VAR_103 = VAR_104 ; break ; } } if ( VAR_105 > 0 ) {  for ( VAR_106 = VAR_107 - 1 ; VAR_108 >= 0 ; VAR_109 -- ) {   METHOD_20 ( VAR_110 , VAR_111 , 0 , 1 , VAR_112 , VAR_113 , VAR_114 , VAR_115 + 1 , 0 ) ;   METHOD_21 ( VAR_116 , VAR_117 , 0 , 1 , VAR_118 , VAR_119 , VAR_120 , VAR_121 , 0 ) ;  } } for ( VAR_122 = VAR_123 + 1 ; VAR_124 < VAR_125 ; VAR_126 ++ ) { METHOD_22 ( VAR_127 , VAR_128 , & VAR_129 ) ; if ( VAR_130 == 0 ) {  METHOD_23 ( VAR_131 , VAR_132 , 0 , 1 , VAR_133 , VAR_134 , VAR_135 , VAR_136 - 1 , 0 ) ;   METHOD_24 ( VAR_137 , VAR_138 , 0 , 1 , VAR_139 , VAR_140 , VAR_141 , VAR_142 , 0 ) ;  } } METHOD_25 ( & VAR_143 ) ; } if ( VAR_144 > VAR_145 ) { for ( VAR_146 = 0 ; VAR_147 < VAR_148 ; VAR_149 ++ ) { METHOD_26 ( VAR_150 , VAR_151 - 2 , VAR_152 , & VAR_153 ) ; METHOD_27 ( VAR_154 , VAR_155 - 1 , VAR_156 , VAR_157 ) ; } } METHOD_28 ( & VAR_158 ) ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ; TYPE_6 VAR_14 , VAR_15 ; VAR_16 * VAR_17 ; TYPE_7 * VAR_18 ; METHOD_1 ( ""pixFillMapHoles"" ) ; if ( ! VAR_19 || METHOD_2 ( VAR_20 ) != 8 ) return METHOD_3 ( ""pixnotdefinedornot8bpp"" , VAR_21 , 1 ) ; if ( METHOD_4 ( VAR_22 ) ) return METHOD_5 ( ""pixiscolormapped"" , VAR_23 , 1 ) ; METHOD_6 ( VAR_24 , & VAR_25 , & VAR_26 , VAR_27 ) ; VAR_28 = METHOD_7 ( 0 ) ; } for ( VAR_122 = VAR_123 + 1 ; VAR_124 < VAR_125 ; VAR_126 ++ ) { METHOD_22 ( VAR_127 , VAR_128 , & VAR_129 ) ; if ( VAR_130 == 0 ) { METHOD_23 ( VAR_131 , VAR_132 , 0 , 1 , VAR_133 , VAR_134 , VAR_135 , VAR_136 - 1 , 0 ) ; METHOD_24 ( VAR_137 , VAR_138 , 0 , 1 , VAR_139 , VAR_140 , VAR_141 , VAR_142 , 0 ) ; } } METHOD_25 ( & VAR_143 ) ; } if ( VAR_144 > VAR_145 ) { for ( VAR_146 = 0 ; VAR_147 < VAR_148 ; VAR_149 ++ ) { METHOD_26 ( VAR_150 , VAR_151 - 2 , VAR_152 , & VAR_153 ) ; METHOD_27 ( VAR_154 , VAR_155 - 1 , VAR_156 , VAR_157 ) ; } } METHOD_28 ( & VAR_158 ) ; return 0 ; }",85
86,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 ) ; TYPE_5 VAR_9 = VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 ; TYPE_6 VAR_13 , VAR_14 ; METHOD_2 ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"" , VAR_15 , VAR_16 -> VAR_17 ) ; VAR_18 = - VAR_19 ; if ( VAR_20 & VAR_21 ) goto VAR_22 ; if ( VAR_23 & VAR_24 ) { if ( VAR_25 == VAR_26 ) { return METHOD_3 ( VAR_27 , VAR_28 , VAR_29 ) ; if IS_ENABLED ( VAR_30 ) } else if ( VAR_31 == VAR_32 ) { return VAR_33 . METHOD_4 ( VAR_34 , VAR_35 , VAR_36 ) ; } } VAR_37 = METHOD_5 ( VAR_38 , VAR_39 , VAR_40 , & VAR_41 ) ; if ( ! VAR_42 ) goto VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; if ( VAR_47 > VAR_48 ) { VAR_49 -> VAR_50 |= VAR_51 ; VAR_52 = VAR_53 ; } VAR_54 = METHOD_6 ( VAR_55 , 0 , VAR_56 -> VAR_57 , VAR_58 ) ; if ( VAR_59 ) goto VAR_60 ; METHOD_7 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 == VAR_65 ) { struct STRUCT_OR_UNION_5 * VAR_66 = ( struct STRUCT_OR_UNION_6 * ) VAR_67 -> VAR_68 ;  VAR_69 -> VAR_70 = VAR_71 ;  VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 . VAR_76 = METHOD_8 ( VAR_77 ) -> VAR_78 ; METHOD_9 ( VAR_79 -> VAR_80 , 0 , sizeof ( VAR_81 -> VAR_82 ) ) ; * VAR_83 = sizeof ( * VAR_84 ) ;  if ( VAR_85 -> VAR_86 )  METHOD_10 ( VAR_87 , VAR_88 ) ; if IS_ENABLED ( VAR_89 ) } else if ( VAR_90 == VAR_91 ) { struct STRUCT_OR_UNION_7 * VAR_92 = METHOD_11 ( VAR_93 ) ; struct STRUCT_OR_UNION_8 * VAR_94 = METHOD_12 ( VAR_95 ) ; struct STRUCT_OR_UNION_9 * VAR_96 = ( struct STRUCT_OR_UNION_10 * ) VAR_97 -> VAR_98 ;  VAR_99 -> VAR_100 = VAR_101 ;  VAR_102 -> VAR_103 = 0 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 = 0 ; if ( VAR_110 -> VAR_111 ) VAR_112 -> VAR_113 = METHOD_13 ( VAR_114 ) ; VAR_115 -> VAR_116 = METHOD_14 ( & VAR_117 -> VAR_118 , METHOD_15 ( VAR_119 ) -> VAR_120 ) ;  * VAR_121 = sizeof ( * VAR_122 ) ;  if ( METHOD_16 ( VAR_123 ) -> VAR_124 . VAR_125 ) VAR_126 . METHOD_17 ( VAR_127 , VAR_128 , VAR_129 ) ; } else { METHOD_18 ( ) ; } VAR_130 = VAR_131 ; VAR_132 : METHOD_19 ( VAR_133 , VAR_134 ) ; VAR_135 : METHOD_20 ( ""ping_recvmsg->%d\\n"" , VAR_136 ) ; return VAR_137 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 ) ; TYPE_5 VAR_9 = VAR_10 -> VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 ; TYPE_6 VAR_13 , VAR_14 ; METHOD_2 ( ""ping_recvmsg(sk=%p,sk->num=%u)\\n"" , VAR_15 , VAR_16 -> VAR_17 ) ; VAR_18 = - VAR_19 ; if ( VAR_20 & VAR_21 ) goto VAR_22 ; if ( VAR_23 & VAR_24 ) { if ( VAR_25 == VAR_26 ) { return METHOD_3 ( VAR_27 , VAR_28 , VAR_29 ) ; if IS_ENABLED ( VAR_30 ) } else if ( VAR_31 == VAR_32 ) { return VAR_33 . METHOD_4 ( VAR_34 , VAR_35 , VAR_36 ) ; } } VAR_37 = METHOD_5 ( VAR_38 , VAR_39 , VAR_40 , & VAR_41 ) ; if ( ! VAR_42 ) goto VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; if ( VAR_47 > VAR_48 ) { VAR_49 -> VAR_50 |= VAR_51 ; VAR_52 = VAR_53 ; } VAR_54 = METHOD_6 ( VAR_55 , 0 , VAR_56 -> VAR_57 , VAR_58 ) ; if ( VAR_59 ) goto VAR_60 ; METHOD_7 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 == VAR_65 ) { struct STRUCT_OR_UNION_5 * VAR_66 = ( struct STRUCT_OR_UNION_6 * ) VAR_67 -> VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 . VAR_76 = METHOD_8 ( VAR_77 ) -> VAR_78 ; METHOD_9 ( VAR_79 -> VAR_80 , 0 , sizeof ( VAR_81 -> VAR_82 ) ) ; * VAR_83 = sizeof ( * VAR_84 ) ; if ( VAR_85 -> VAR_86 ) METHOD_10 ( VAR_87 , VAR_88 ) ; if IS_ENABLED ( VAR_89 ) } else if ( VAR_90 == VAR_91 ) { struct STRUCT_OR_UNION_7 * VAR_92 = METHOD_11 ( VAR_93 ) ; struct STRUCT_OR_UNION_8 * VAR_94 = METHOD_12 ( VAR_95 ) ; struct STRUCT_OR_UNION_9 * VAR_96 = ( struct STRUCT_OR_UNION_10 * ) VAR_97 -> VAR_98 ; if ( VAR_84 ) { VAR_99 -> VAR_100 = VAR_101 ; VAR_102 -> VAR_103 = 0 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 = 0 ; if ( VAR_110 -> VAR_111 ) VAR_112 -> VAR_113 = METHOD_13 ( VAR_114 ) ; VAR_115 -> VAR_116 = METHOD_14 ( & VAR_117 -> VAR_118 , METHOD_15 ( VAR_119 ) -> VAR_120 ) ; * VAR_121 = sizeof ( * VAR_122 ) ; } if ( METHOD_16 ( VAR_123 ) -> VAR_124 . VAR_125 ) VAR_126 . METHOD_17 ( VAR_127 , VAR_128 , VAR_129 ) ; } else { METHOD_18 ( ) ; } VAR_130 = VAR_131 ; VAR_132 : METHOD_19 ( VAR_133 , VAR_134 ) ; VAR_135 : METHOD_20 ( ""ping_recvmsg->%d\\n"" , VAR_136 ) ; return VAR_137 ; }",86
87,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 , * VAR_2 ; METHOD_1 ( & VAR_3 -> VAR_4 ) ; while ( 1 ) { struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 ; METHOD_2 ( & VAR_7 -> VAR_8 ) ; while ( ! METHOD_3 ( & VAR_9 -> VAR_10 ) ) { TYPE_1 TYPE_2 ; VAR_11 = list_first_entry ( & VAR_12 -> VAR_13 , struct STRUCT_OR_UNION_3 , VAR_14 ) ; VAR_15 = VAR_16 -> VAR_17 -> VAR_18 ; TYPE_3 = METHOD_4 ( VAR_19 ) ; if ( ! TYPE_4 ) { METHOD_5 ( & VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 ; continue ; } break ; } METHOD_6 ( & VAR_24 -> VAR_25 ) ; if ( ! VAR_26 ) return ;  METHOD_7 ( & VAR_27 -> VAR_28 ) ;  METHOD_8 ( & VAR_29 -> VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 , VAR_35 ) { struct STRUCT_OR_UNION_4 * VAR_36 = VAR_37 -> VAR_38 ; if ( VAR_39 -> VAR_40 != VAR_41 ) continue ; METHOD_10 ( & VAR_42 -> VAR_43 ) ; METHOD_11 ( VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 - VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 &= ~ ( VAR_53 | VAR_54 ) ; } METHOD_12 ( & VAR_55 -> VAR_56 ) ;  METHOD_13 ( & VAR_57 -> VAR_58 ) ;  METHOD_14 ( VAR_59 ) ; } }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 , * VAR_2 ; METHOD_1 ( & VAR_3 -> VAR_4 ) ; while ( 1 ) { struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 ; METHOD_2 ( & VAR_7 -> VAR_8 ) ; while ( ! METHOD_3 ( & VAR_9 -> VAR_10 ) ) { TYPE_1 TYPE_2 ; VAR_11 = list_first_entry ( & VAR_12 -> VAR_13 , struct STRUCT_OR_UNION_3 , VAR_14 ) ; VAR_15 = VAR_16 -> VAR_17 -> VAR_18 ; TYPE_3 = METHOD_4 ( VAR_19 ) ; if ( ! TYPE_4 ) { METHOD_5 ( & VAR_20 -> VAR_21 ) ; VAR_22 = VAR_23 ; continue ; } break ; } METHOD_6 ( & VAR_24 -> VAR_25 ) ; if ( ! VAR_26 ) return ; METHOD_7 ( & VAR_27 -> VAR_28 ) ; METHOD_8 ( & VAR_29 -> VAR_30 ) ; METHOD_9 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 , VAR_35 ) { struct STRUCT_OR_UNION_4 * VAR_36 = VAR_37 -> VAR_38 ; if ( VAR_39 -> VAR_40 != VAR_41 ) continue ; METHOD_10 ( & VAR_42 -> VAR_43 ) ; METHOD_11 ( VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 - VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 &= ~ ( VAR_53 | VAR_54 ) ; } METHOD_12 ( & VAR_55 -> VAR_56 ) ; METHOD_13 ( & VAR_57 -> VAR_58 ) ; if ( ! METHOD_15 ( VAR_59 ) ) goto VAR_60 ; METHOD_14 ( VAR_59 ) ; } }",87
88,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 , VAR_6 ; TYPE_5 VAR_7 = VAR_8 ; struct { const TYPE_6 * VAR_9 ; TYPE_7 VAR_10 ; } VAR_11 [ ] = { { ""SideBySideRF"" , VAR_12 } , { ""SideBySideLF"" , VAR_13 } , { ""OverUnderRT"" , VAR_14 } , { ""OverUnderLT"" , VAR_15 } , { ""DualStream"" , VAR_16 } } ; METHOD_1 ( VAR_17 , ""objectisanextendedcontentdescription"" ) ; VAR_18 = METHOD_2 ( ) ; if ( VAR_19 < 2 ) goto VAR_20 ; VAR_21 = METHOD_3 ( & VAR_22 , & VAR_23 ) ; for ( VAR_24 = 1 ; VAR_25 <= VAR_26 ; ++ VAR_27 ) { const TYPE_8 * VAR_28 ; TYPE_9 VAR_29 ; TYPE_10 VAR_30 ; TYPE_11 VAR_31 ; TYPE_12 VAR_32 = { 0 , } ; TYPE_13 VAR_33 , VAR_34 ; TYPE_14 * VAR_35 ; TYPE_15 * VAR_36 = VAR_37 ; TYPE_16 * VAR_38 ; if ( ! METHOD_4 ( & VAR_39 , & VAR_40 , & VAR_41 , & VAR_42 ) ) goto VAR_43 ; if ( VAR_44 < 2 ) { METHOD_5 ( VAR_45 ) ; goto VAR_46 ; } VAR_47 = METHOD_6 ( & VAR_48 , & VAR_49 ) ; if ( ! METHOD_7 ( & VAR_50 , & VAR_51 , & VAR_52 , & VAR_53 ) ) { METHOD_8 ( VAR_54 ) ; goto VAR_55 ; } VAR_56 = METHOD_9 ( VAR_57 , VAR_58 , ""UTF-8"" , ""UTF-16LE"" , & VAR_59 , & VAR_60 , VAR_61 ) ; if ( VAR_62 != VAR_63 ) { METHOD_10 ( ""Foundtag/metadata%s"" , VAR_64 ) ; VAR_65 = METHOD_11 ( VAR_66 ) ; METHOD_12 ( ""gst_tag_name%s"" , METHOD_13 ( VAR_67 ) ) ; switch ( VAR_68 ) { case VAR_69 : { TYPE_17 * VAR_70 ; VAR_71 = METHOD_14 ( VAR_72 , VAR_73 , ""UTF-8"" , ""UTF-16LE"" , & VAR_74 , & VAR_75 , VAR_76 ) ; if ( VAR_77 != VAR_78 && * VAR_79 != '\\0' ) { METHOD_15 ( ""stringvalue%s"" , VAR_80 ) ; VAR_81 [ VAR_82 ] = '\\0' ; if ( VAR_83 != VAR_84 ) { if ( METHOD_16 ( VAR_85 , VAR_86 ) == 0 ) { TYPE_18 VAR_87 = METHOD_17 ( VAR_88 ) ; if ( VAR_89 > 0 ) { METHOD_18 ( & VAR_90 , VAR_91 ) ; METHOD_19 ( & VAR_92 , METHOD_20 ( VAR_93 ) ) ; } } else if ( METHOD_21 ( VAR_94 , VAR_95 ) == 0 ) { TYPE_19 VAR_96 ; const TYPE_20 * VAR_97 ; if ( METHOD_22 ( VAR_98 , ""(%u)"" , & VAR_99 ) == 1 && ( ( VAR_100 = METHOD_23 ( VAR_101 ) ) ) ) { METHOD_24 ( ""Genre:%s->%s"" , VAR_102 , VAR_103 ) ; METHOD_25 ( VAR_104 ) ; VAR_105 = METHOD_26 ( VAR_106 ) ; } } else { TYPE_21 VAR_107 ; VAR_108 = METHOD_27 ( VAR_109 ) ; METHOD_28 ( & VAR_110 , VAR_111 ) ; if ( ! METHOD_29 ( & VAR_112 , VAR_113 ) ) { TYPE_22 VAR_114 = { 0 , } ; METHOD_30 ( & VAR_115 , VAR_116 ) ; METHOD_31 ( & VAR_117 , VAR_118 ) ; if ( ! METHOD_32 ( & VAR_119 , & VAR_120 ) ) { METHOD_33 ( VAR_121 , ""Couldnottransformstringtagto"" ""%stagtype%s"" , VAR_122 , METHOD_34 ( VAR_123 ) ) ; METHOD_35 ( & VAR_124 ) ; } METHOD_36 ( & VAR_125 ) ; } } } else { METHOD_37 ( ""Settingmetadata"" ) ; METHOD_38 ( & VAR_126 , VAR_127 ) ; METHOD_39 ( & VAR_128 , VAR_129 ) ; if ( VAR_130 ) { TYPE_23 VAR_131 ; if ( METHOD_40 ( ""StereoscopicLayout"" , VAR_132 , METHOD_41 ( VAR_133 ) ) == 0 ) { for ( VAR_134 = 0 ; VAR_135 < METHOD_42 ( VAR_136 ) ; VAR_137 ++ ) { if ( METHOD_43 ( VAR_138 [ VAR_139 ] . VAR_140 , VAR_141 ) ) { VAR_142 -> VAR_143 = VAR_144 [ VAR_145 ] . VAR_146 ; METHOD_44 ( ""findinterleavetype%u"" , VAR_147 -> VAR_148 ) ; } } } METHOD_45 ( VAR_149 , ""3dtypeis%u"" , VAR_150 -> VAR_151 ) ; } else { VAR_152 -> VAR_153 = VAR_154 ; METHOD_46 ( VAR_155 , ""None3dtype"" ) ; } } } else if ( VAR_156 == VAR_157 ) { METHOD_47 ( ""FailedtoconvertstringvaluetoUTF8,skipping"" ) ; } else { METHOD_48 ( ""Skippingemptystringvaluefor%s"" , METHOD_49 ( VAR_158 ) ) ; } METHOD_50 ( VAR_159 ) ; break ; } case VAR_160 : { if ( VAR_161 ) { if ( ! METHOD_51 ( VAR_162 , VAR_163 ) ) { METHOD_52 ( ""Unhandledbytearraytag%s"" , METHOD_53 ( VAR_164 ) ) ; break ; } else { METHOD_54 ( VAR_165 , ( TYPE_24 * ) VAR_166 , VAR_167 ) ; } } break ; } case VAR_168 : {  TYPE_25 VAR_169 = METHOD_55 ( VAR_170 ) ;  METHOD_56 ( & VAR_171 , VAR_172 ) ; if ( ! METHOD_57 ( VAR_173 , ""WM/Track"" ) ) ++ VAR_174 ; METHOD_58 ( & VAR_175 , VAR_176 ) ; break ; } case VAR_177 : {  TYPE_26 VAR_178 = METHOD_59 ( VAR_179 ) ;  if ( METHOD_60 ( ""Stereoscopic"" , VAR_180 , METHOD_61 ( VAR_181 ) ) == 0 ) { if ( VAR_182 ) { METHOD_62 ( VAR_183 , ""Thisis3Dcontents"" ) ; VAR_184 = VAR_185 ; } else { METHOD_63 ( VAR_186 , ""Thisisnot3Dcontenst"" ) ; VAR_187 = VAR_188 ; } } break ; } default : { METHOD_64 ( ""Skippingtag%softype%d"" , VAR_189 , VAR_190 ) ; break ; } } if ( METHOD_65 ( & VAR_191 ) ) { if ( VAR_192 ) { TYPE_27 VAR_193 = VAR_194 ; if ( METHOD_66 ( VAR_195 , ""WM/TrackNumber"" ) == 0 ) VAR_196 = VAR_197 ; METHOD_67 ( VAR_198 , VAR_199 , VAR_200 , & VAR_201 , VAR_202 ) ; } else { METHOD_68 ( ""Settingglobalmetadata%s"" , VAR_203 ) ; METHOD_69 ( VAR_204 -> VAR_205 , VAR_206 , & VAR_207 ) ; } METHOD_70 ( & VAR_208 ) ; } } METHOD_71 ( VAR_209 ) ; METHOD_72 ( VAR_210 ) ; METHOD_73 ( VAR_211 ) ; } METHOD_74 ( VAR_212 , VAR_213 ) ; return VAR_214 ; VAR_215 : { METHOD_75 ( ""Unexpectedendofdataparsingextcontentdescobject"" ) ; METHOD_76 ( VAR_216 ) ; return VAR_217 ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 , VAR_6 ; TYPE_5 VAR_7 = VAR_8 ; struct { const TYPE_6 * VAR_9 ; TYPE_7 VAR_10 ; } VAR_11 [ ] = { { ""SideBySideRF"" , VAR_12 } , { ""SideBySideLF"" , VAR_13 } , { ""OverUnderRT"" , VAR_14 } , { ""OverUnderLT"" , VAR_15 } , { ""DualStream"" , VAR_16 } } ; METHOD_1 ( VAR_17 , ""objectisanextendedcontentdescription"" ) ; VAR_18 = METHOD_2 ( ) ; if ( VAR_19 < 2 ) goto VAR_20 ; VAR_21 = METHOD_3 ( & VAR_22 , & VAR_23 ) ; for ( VAR_24 = 1 ; VAR_25 <= VAR_26 ; ++ VAR_27 ) { const TYPE_8 * VAR_28 ; TYPE_9 VAR_29 ; TYPE_10 VAR_30 ; TYPE_11 VAR_31 ; TYPE_12 VAR_32 = { 0 , } ; TYPE_13 VAR_33 , VAR_34 ; TYPE_14 * VAR_35 ; TYPE_15 * VAR_36 = VAR_37 ; TYPE_16 * VAR_38 ; if ( ! METHOD_4 ( & VAR_39 , & VAR_40 , & VAR_41 , & VAR_42 ) ) goto VAR_43 ; if ( VAR_44 < 2 ) { METHOD_5 ( VAR_45 ) ; goto VAR_46 ; } VAR_47 = METHOD_6 ( & VAR_48 , & VAR_49 ) ; if ( ! METHOD_7 ( & VAR_50 , & VAR_51 , & VAR_52 , & VAR_53 ) ) { METHOD_8 ( VAR_54 ) ; goto VAR_55 ; } VAR_56 = METHOD_9 ( VAR_57 , VAR_58 , ""UTF-8"" , ""UTF-16LE"" , & VAR_59 , & VAR_60 , VAR_61 ) ; if ( VAR_62 != VAR_63 ) { METHOD_10 ( ""Foundtag/metadata%s"" , VAR_64 ) ; VAR_65 = METHOD_11 ( VAR_66 ) ; METHOD_12 ( ""gst_tag_name%s"" , METHOD_13 ( VAR_67 ) ) ; switch ( VAR_68 ) { case VAR_69 : { TYPE_17 * VAR_70 ; VAR_71 = METHOD_14 ( VAR_72 , VAR_73 , ""UTF-8"" , ""UTF-16LE"" , & VAR_74 , & VAR_75 , VAR_76 ) ; if ( VAR_77 != VAR_78 && * VAR_79 != '\\0' ) { METHOD_15 ( ""stringvalue%s"" , VAR_80 ) ; VAR_81 [ VAR_82 ] = '\\0' ; if ( VAR_83 != VAR_84 ) { if ( METHOD_16 ( VAR_85 , VAR_86 ) == 0 ) { TYPE_18 VAR_87 = METHOD_17 ( VAR_88 ) ; if ( VAR_89 > 0 ) { METHOD_18 ( & VAR_90 , VAR_91 ) ; METHOD_19 ( & VAR_92 , METHOD_20 ( VAR_93 ) ) ; } } else if ( METHOD_21 ( VAR_94 , VAR_95 ) == 0 ) { TYPE_19 VAR_96 ; const TYPE_20 * VAR_97 ; if ( METHOD_22 ( VAR_98 , ""(%u)"" , & VAR_99 ) == 1 && ( ( VAR_100 = METHOD_23 ( VAR_101 ) ) ) ) { METHOD_24 ( ""Genre:%s->%s"" , VAR_102 , VAR_103 ) ; METHOD_25 ( VAR_104 ) ; VAR_105 = METHOD_26 ( VAR_106 ) ; } } else { TYPE_21 VAR_107 ; VAR_108 = METHOD_27 ( VAR_109 ) ; METHOD_28 ( & VAR_110 , VAR_111 ) ; if ( ! METHOD_29 ( & VAR_112 , VAR_113 ) ) { TYPE_22 VAR_114 = { 0 , } ; METHOD_30 ( & VAR_115 , VAR_116 ) ; METHOD_31 ( & VAR_117 , VAR_118 ) ; if ( ! METHOD_32 ( & VAR_119 , & VAR_120 ) ) { METHOD_33 ( VAR_121 , ""Couldnottransformstringtagto"" ""%stagtype%s"" , VAR_122 , METHOD_34 ( VAR_123 ) ) ; METHOD_35 ( & VAR_124 ) ; } METHOD_36 ( & VAR_125 ) ; } } } else { METHOD_37 ( ""Settingmetadata"" ) ; METHOD_38 ( & VAR_126 , VAR_127 ) ; METHOD_39 ( & VAR_128 , VAR_129 ) ; if ( VAR_130 ) { TYPE_23 VAR_131 ; if ( METHOD_40 ( ""StereoscopicLayout"" , VAR_132 , METHOD_41 ( VAR_133 ) ) == 0 ) { for ( VAR_134 = 0 ; VAR_135 < METHOD_42 ( VAR_136 ) ; VAR_137 ++ ) { if ( METHOD_43 ( VAR_138 [ VAR_139 ] . VAR_140 , VAR_141 ) ) { VAR_142 -> VAR_143 = VAR_144 [ VAR_145 ] . VAR_146 ; METHOD_44 ( ""findinterleavetype%u"" , VAR_147 -> VAR_148 ) ; } } } METHOD_45 ( VAR_149 , ""3dtypeis%u"" , VAR_150 -> VAR_151 ) ; } else { VAR_152 -> VAR_153 = VAR_154 ; METHOD_46 ( VAR_155 , ""None3dtype"" ) ; } } } else if ( VAR_156 == VAR_157 ) { METHOD_47 ( ""FailedtoconvertstringvaluetoUTF8,skipping"" ) ; } else { METHOD_48 ( ""Skippingemptystringvaluefor%s"" , METHOD_49 ( VAR_158 ) ) ; } METHOD_50 ( VAR_159 ) ; break ; } case VAR_160 : { if ( VAR_161 ) { if ( ! METHOD_51 ( VAR_162 , VAR_163 ) ) { METHOD_52 ( ""Unhandledbytearraytag%s"" , METHOD_53 ( VAR_164 ) ) ; break ; } else { METHOD_54 ( VAR_165 , ( TYPE_24 * ) VAR_166 , VAR_167 ) ; } } break ; } case VAR_168 : { TYPE_25 VAR_169 = METHOD_55 ( VAR_170 ) ; METHOD_56 ( & VAR_171 , VAR_172 ) ; if ( ! METHOD_57 ( VAR_173 , ""WM/Track"" ) ) ++ VAR_174 ; METHOD_58 ( & VAR_175 , VAR_176 ) ; break ; } case VAR_177 : { TYPE_26 VAR_178 = METHOD_59 ( VAR_179 ) ; if ( METHOD_60 ( ""Stereoscopic"" , VAR_180 , METHOD_61 ( VAR_181 ) ) == 0 ) { if ( VAR_182 ) { METHOD_62 ( VAR_183 , ""Thisis3Dcontents"" ) ; VAR_184 = VAR_185 ; } else { METHOD_63 ( VAR_186 , ""Thisisnot3Dcontenst"" ) ; VAR_187 = VAR_188 ; } } break ; } default : { METHOD_64 ( ""Skippingtag%softype%d"" , VAR_189 , VAR_190 ) ; break ; } } if ( METHOD_65 ( & VAR_191 ) ) { if ( VAR_192 ) { TYPE_27 VAR_193 = VAR_194 ; if ( METHOD_66 ( VAR_195 , ""WM/TrackNumber"" ) == 0 ) VAR_196 = VAR_197 ; METHOD_67 ( VAR_198 , VAR_199 , VAR_200 , & VAR_201 , VAR_202 ) ; } else { METHOD_68 ( ""Settingglobalmetadata%s"" , VAR_203 ) ; METHOD_69 ( VAR_204 -> VAR_205 , VAR_206 , & VAR_207 ) ; } METHOD_70 ( & VAR_208 ) ; } } METHOD_71 ( VAR_209 ) ; METHOD_72 ( VAR_210 ) ; METHOD_73 ( VAR_211 ) ; } METHOD_74 ( VAR_212 , VAR_213 ) ; return VAR_214 ; VAR_215 : { METHOD_75 ( ""Unexpectedendofdataparsingextcontentdescobject"" ) ; METHOD_76 ( VAR_216 ) ; return VAR_217 ; } }",88
89,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 STRUCT_OR_UNION_0 ) { TYPE_4 VAR_2 ; TYPE_5 VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 ; TYPE_7 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_8 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; TYPE_9 * VAR_21 ; TYPE_10 * VAR_22 , * VAR_23 ; switch ( STRUCT_OR_UNION_2 ) { case VAR_24 : VAR_25 = & VAR_26 ; break ; case VAR_27 : VAR_28 = & VAR_29 ; break ; case VAR_30 : VAR_31 = & VAR_32 ; break ; default : return ( TYPE_11 ) METHOD_1 ( ""unsupportedresamplingfilter"" ) ; } VAR_33 = VAR_34 = ( TYPE_12 ) VAR_35 -> VAR_36 / VAR_37 ; VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 < 1.0 ) { VAR_42 = 1.0 ; } VAR_43 = VAR_44 * VAR_45 ; VAR_46 = ( TYPE_13 ) METHOD_2 ( VAR_47 ) * 2 + 1 ;  VAR_48 = METHOD_3 ( VAR_49 * VAR_50 * sizeof ( TYPE_14 ) ) ;   if ( ! VAR_51 )  return ( TYPE_15 ) METHOD_4 ( ) ; VAR_52 = METHOD_5 ( VAR_53 * 2 * sizeof ( TYPE_16 ) ) ; if ( ! VAR_54 ) { METHOD_6 ( VAR_55 ) ; return ( TYPE_17 ) METHOD_7 ( ) ; } for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { VAR_60 = & VAR_61 [ VAR_62 * VAR_63 ] ; VAR_64 = ( VAR_65 + 0.5 ) * VAR_66 ; VAR_67 = 0.0 ; VAR_68 = 1.0 / VAR_69 ; VAR_70 = ( TYPE_18 ) METHOD_8 ( VAR_71 - VAR_72 ) ; if ( VAR_73 < 0 ) VAR_74 = 0 ; VAR_75 = ( TYPE_19 ) METHOD_9 ( VAR_76 + VAR_77 ) ; if ( VAR_78 > VAR_79 -> VAR_80 ) VAR_81 = VAR_82 -> VAR_83 ; for ( VAR_84 = VAR_85 ; VAR_86 < VAR_87 ; VAR_88 ++ ) { TYPE_20 VAR_89 = VAR_90 -> STRUCT_OR_UNION_3 ( ( VAR_91 - VAR_92 + 0.5 ) * VAR_93 ) * VAR_94 ; VAR_95 [ VAR_96 - VAR_97 ] = VAR_98 ; VAR_99 += VAR_100 ; } for ( VAR_101 = 0 ; VAR_102 < VAR_103 - VAR_104 ; VAR_105 ++ ) { if ( VAR_106 != 0.0 ) VAR_107 [ VAR_108 ] /= VAR_109 ; } VAR_110 [ VAR_111 * 2 + 0 ] = VAR_112 ; VAR_113 [ VAR_114 * 2 + 1 ] = VAR_115 ; } VAR_116 = METHOD_10 ( VAR_117 -> VAR_118 , VAR_119 , VAR_120 -> VAR_121 ) ; if ( ! VAR_122 ) { METHOD_11 ( VAR_123 ) ; METHOD_12 ( VAR_124 ) ; return VAR_125 ; } METHOD_13 ( & VAR_126 ) ; for ( VAR_127 = 0 ; VAR_128 < VAR_129 -> VAR_130 ; VAR_131 ++ ) { if ( VAR_132 -> VAR_133 ) { for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) { VAR_138 = VAR_139 [ VAR_140 * 2 + 0 ] ; VAR_141 = VAR_142 [ VAR_143 * 2 + 1 ] ; VAR_144 = & VAR_145 [ VAR_146 * VAR_147 ] ; VAR_148 = 0.5 ; for ( VAR_149 = VAR_150 ; VAR_151 < VAR_152 ; VAR_153 ++ ) VAR_154 += METHOD_14 ( VAR_155 -> VAR_156 [ VAR_157 ] [ VAR_158 ] ) * VAR_159 [ VAR_160 - VAR_161 ] ; VAR_162 -> VAR_163 [ VAR_164 ] [ VAR_165 ] = METHOD_15 ( VAR_166 ) ; } } else { switch ( VAR_167 -> VAR_168 ) { case VAR_169 : if ( VAR_170 -> VAR_171 == 2 ) { for ( VAR_172 = 0 ; VAR_173 < VAR_174 ; VAR_175 ++ ) { VAR_176 = VAR_177 [ VAR_178 * 2 + 0 ] ; VAR_179 = VAR_180 [ VAR_181 * 2 + 1 ] ; VAR_182 = & VAR_183 [ VAR_184 * VAR_185 ] ; VAR_186 = VAR_187 = 0.5 ; for ( VAR_188 = VAR_189 ; VAR_190 < VAR_191 ; VAR_192 ++ ) { VAR_193 += METHOD_16 ( ( TYPE_21 ) VAR_194 -> VAR_195 [ VAR_196 ] [ VAR_197 * 4 + 0 ] ) * VAR_198 [ VAR_199 - VAR_200 ] ; VAR_201 += METHOD_17 ( ( TYPE_22 ) VAR_202 -> VAR_203 [ VAR_204 ] [ VAR_205 * 4 + 3 ] ) * VAR_206 [ VAR_207 - VAR_208 ] ; } VAR_209 -> VAR_210 [ VAR_211 ] [ VAR_212 * 4 + 0 ] = METHOD_18 ( VAR_213 ) ; VAR_214 -> VAR_215 [ VAR_216 ] [ VAR_217 * 4 + 3 ] = METHOD_19 ( VAR_218 ) ; } } else if ( VAR_219 -> VAR_220 == 3 ) { for ( VAR_221 = 0 ; VAR_222 < VAR_223 ; VAR_224 ++ ) { VAR_225 = VAR_226 [ VAR_227 * 2 + 0 ] ; VAR_228 = VAR_229 [ VAR_230 * 2 + 1 ] ; VAR_231 = & VAR_232 [ VAR_233 * VAR_234 ] ; VAR_235 = VAR_236 = VAR_237 = 0.5 ; for ( VAR_238 = VAR_239 ; VAR_240 < VAR_241 ; VAR_242 ++ ) { VAR_243 += METHOD_20 ( ( TYPE_23 ) VAR_244 -> VAR_245 [ VAR_246 ] [ VAR_247 * 4 + 0 ] ) * VAR_248 [ VAR_249 - VAR_250 ] ; VAR_251 += METHOD_21 ( ( TYPE_24 ) VAR_252 -> VAR_253 [ VAR_254 ] [ VAR_255 * 4 + 1 ] ) * VAR_256 [ VAR_257 - VAR_258 ] ; VAR_259 += METHOD_22 ( ( TYPE_25 ) VAR_260 -> VAR_261 [ VAR_262 ] [ VAR_263 * 4 + 2 ] ) * VAR_264 [ VAR_265 - VAR_266 ] ; } VAR_267 -> VAR_268 [ VAR_269 ] [ VAR_270 * 4 + 0 ] = METHOD_23 ( VAR_271 ) ; VAR_272 -> VAR_273 [ VAR_274 ] [ VAR_275 * 4 + 1 ] = METHOD_24 ( VAR_276 ) ; VAR_277 -> VAR_278 [ VAR_279 ] [ VAR_280 * 4 + 2 ] = METHOD_25 ( VAR_281 ) ; } } else { for ( VAR_282 = 0 ; VAR_283 < VAR_284 ; VAR_285 ++ ) { VAR_286 = VAR_287 [ VAR_288 * 2 + 0 ] ; VAR_289 = VAR_290 [ VAR_291 * 2 + 1 ] ; VAR_292 = & VAR_293 [ VAR_294 * VAR_295 ] ; VAR_296 = VAR_297 = VAR_298 = VAR_299 = 0.5 ; for ( VAR_300 = VAR_301 ; VAR_302 < VAR_303 ; VAR_304 ++ ) { VAR_305 += METHOD_26 ( ( TYPE_26 ) VAR_306 -> VAR_307 [ VAR_308 ] [ VAR_309 * 4 + 0 ] ) * VAR_310 [ VAR_311 - VAR_312 ] ; VAR_313 += METHOD_27 ( ( TYPE_27 ) VAR_314 -> VAR_315 [ VAR_316 ] [ VAR_317 * 4 + 1 ] ) * VAR_318 [ VAR_319 - VAR_320 ] ; VAR_321 += METHOD_28 ( ( TYPE_28 ) VAR_322 -> VAR_323 [ VAR_324 ] [ VAR_325 * 4 + 2 ] ) * VAR_326 [ VAR_327 - VAR_328 ] ; VAR_329 += METHOD_29 ( ( TYPE_29 ) VAR_330 -> VAR_331 [ VAR_332 ] [ VAR_333 * 4 + 3 ] ) * VAR_334 [ VAR_335 - VAR_336 ] ; } VAR_337 -> VAR_338 [ VAR_339 ] [ VAR_340 * 4 + 0 ] = METHOD_30 ( VAR_341 ) ; VAR_342 -> VAR_343 [ VAR_344 ] [ VAR_345 * 4 + 1 ] = METHOD_31 ( VAR_346 ) ; VAR_347 -> VAR_348 [ VAR_349 ] [ VAR_350 * 4 + 2 ] = METHOD_32 ( VAR_351 ) ; VAR_352 -> VAR_353 [ VAR_354 ] [ VAR_355 * 4 + 3 ] = METHOD_33 ( VAR_356 ) ; } } break ; case VAR_357 : for ( VAR_358 = 0 ; VAR_359 < VAR_360 ; VAR_361 ++ ) { VAR_362 = VAR_363 [ VAR_364 * 2 + 0 ] ; VAR_365 = VAR_366 [ VAR_367 * 2 + 1 ] ; VAR_368 = & VAR_369 [ VAR_370 * VAR_371 ] ; VAR_372 = 0.0 ; for ( VAR_373 = VAR_374 ; VAR_375 < VAR_376 ; VAR_377 ++ ) VAR_378 += METHOD_34 ( METHOD_35 ( VAR_379 , VAR_380 , VAR_381 ) ) * VAR_382 [ VAR_383 - VAR_384 ] ; METHOD_36 ( VAR_385 , VAR_386 , VAR_387 ) = ( TYPE_30 ) VAR_388 ; } break ; case VAR_389 : for ( VAR_390 = 0 ; VAR_391 < VAR_392 ; VAR_393 ++ ) { VAR_394 = VAR_395 [ VAR_396 * 2 + 0 ] ; VAR_397 = VAR_398 [ VAR_399 * 2 + 1 ] ; VAR_400 = & VAR_401 [ VAR_402 * VAR_403 ] ; VAR_404 = 0.0 ; for ( VAR_405 = VAR_406 ; VAR_407 < VAR_408 ; VAR_409 ++ ) VAR_410 += METHOD_37 ( VAR_411 , VAR_412 , VAR_413 ) * VAR_414 [ VAR_415 - VAR_416 ] ; METHOD_38 ( VAR_417 , VAR_418 , VAR_419 ) = VAR_420 ; } break ; } } } METHOD_39 ( & VAR_421 ) ; METHOD_40 ( VAR_422 ) ; METHOD_41 ( VAR_423 ) ; return VAR_424 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 STRUCT_OR_UNION_0 ) { TYPE_4 VAR_2 ; TYPE_5 VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 ; TYPE_7 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 ; TYPE_8 VAR_15 , VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; TYPE_9 * VAR_21 ; TYPE_10 * VAR_22 , * VAR_23 ; switch ( STRUCT_OR_UNION_2 ) { case VAR_24 : VAR_25 = & VAR_26 ; break ; case VAR_27 : VAR_28 = & VAR_29 ; break ; case VAR_30 : VAR_31 = & VAR_32 ; break ; default : return ( TYPE_11 ) METHOD_1 ( ""unsupportedresamplingfilter"" ) ; } VAR_33 = VAR_34 = ( TYPE_12 ) VAR_35 -> VAR_36 / VAR_37 ; VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 < 1.0 ) { VAR_42 = 1.0 ; } VAR_43 = VAR_44 * VAR_45 ; VAR_46 = ( TYPE_13 ) METHOD_2 ( VAR_47 ) * 2 + 1 ; if ( VAR_403 > 0 && VAR_392 > VAR_425 / VAR_403 ) return ( TYPE_17 ) METHOD_7 ( ) ; if ( VAR_392 * VAR_403 > VAR_425 / sizeof ( TYPE_20 ) ) return ( TYPE_17 ) METHOD_7 ( ) ; VAR_48 = METHOD_3 ( VAR_49 * VAR_50 * sizeof ( TYPE_14 ) ) ; if ( ! VAR_51 ) return ( TYPE_15 ) METHOD_4 ( ) ; VAR_52 = METHOD_5 ( VAR_53 * 2 * sizeof ( TYPE_16 ) ) ; if ( ! VAR_54 ) { METHOD_6 ( VAR_55 ) ; return ( TYPE_17 ) METHOD_7 ( ) ; } for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { VAR_60 = & VAR_61 [ VAR_62 * VAR_63 ] ; VAR_64 = ( VAR_65 + 0.5 ) * VAR_66 ; VAR_67 = 0.0 ; VAR_68 = 1.0 / VAR_69 ; VAR_70 = ( TYPE_18 ) METHOD_8 ( VAR_71 - VAR_72 ) ; if ( VAR_73 < 0 ) VAR_74 = 0 ; VAR_75 = ( TYPE_19 ) METHOD_9 ( VAR_76 + VAR_77 ) ; if ( VAR_78 > VAR_79 -> VAR_80 ) VAR_81 = VAR_82 -> VAR_83 ; for ( VAR_84 = VAR_85 ; VAR_86 < VAR_87 ; VAR_88 ++ ) { TYPE_20 VAR_89 = VAR_90 -> STRUCT_OR_UNION_3 ( ( VAR_91 - VAR_92 + 0.5 ) * VAR_93 ) * VAR_94 ; VAR_95 [ VAR_96 - VAR_97 ] = VAR_98 ; VAR_99 += VAR_100 ; } for ( VAR_101 = 0 ; VAR_102 < VAR_103 - VAR_104 ; VAR_105 ++ ) { if ( VAR_106 != 0.0 ) VAR_107 [ VAR_108 ] /= VAR_109 ; } VAR_110 [ VAR_111 * 2 + 0 ] = VAR_112 ; VAR_113 [ VAR_114 * 2 + 1 ] = VAR_115 ; } VAR_116 = METHOD_10 ( VAR_117 -> VAR_118 , VAR_119 , VAR_120 -> VAR_121 ) ; if ( ! VAR_122 ) { METHOD_11 ( VAR_123 ) ; METHOD_12 ( VAR_124 ) ; return VAR_125 ; } METHOD_13 ( & VAR_126 ) ; for ( VAR_127 = 0 ; VAR_128 < VAR_129 -> VAR_130 ; VAR_131 ++ ) { if ( VAR_132 -> VAR_133 ) { for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) { VAR_138 = VAR_139 [ VAR_140 * 2 + 0 ] ; VAR_141 = VAR_142 [ VAR_143 * 2 + 1 ] ; VAR_144 = & VAR_145 [ VAR_146 * VAR_147 ] ; VAR_148 = 0.5 ; for ( VAR_149 = VAR_150 ; VAR_151 < VAR_152 ; VAR_153 ++ ) VAR_154 += METHOD_14 ( VAR_155 -> VAR_156 [ VAR_157 ] [ VAR_158 ] ) * VAR_159 [ VAR_160 - VAR_161 ] ; VAR_162 -> VAR_163 [ VAR_164 ] [ VAR_165 ] = METHOD_15 ( VAR_166 ) ; } } else { switch ( VAR_167 -> VAR_168 ) { case VAR_169 : if ( VAR_170 -> VAR_171 == 2 ) { for ( VAR_172 = 0 ; VAR_173 < VAR_174 ; VAR_175 ++ ) { VAR_176 = VAR_177 [ VAR_178 * 2 + 0 ] ; VAR_179 = VAR_180 [ VAR_181 * 2 + 1 ] ; VAR_182 = & VAR_183 [ VAR_184 * VAR_185 ] ; VAR_186 = VAR_187 = 0.5 ; for ( VAR_188 = VAR_189 ; VAR_190 < VAR_191 ; VAR_192 ++ ) { VAR_193 += METHOD_16 ( ( TYPE_21 ) VAR_194 -> VAR_195 [ VAR_196 ] [ VAR_197 * 4 + 0 ] ) * VAR_198 [ VAR_199 - VAR_200 ] ; VAR_201 += METHOD_17 ( ( TYPE_22 ) VAR_202 -> VAR_203 [ VAR_204 ] [ VAR_205 * 4 + 3 ] ) * VAR_206 [ VAR_207 - VAR_208 ] ; } VAR_209 -> VAR_210 [ VAR_211 ] [ VAR_212 * 4 + 0 ] = METHOD_18 ( VAR_213 ) ; VAR_214 -> VAR_215 [ VAR_216 ] [ VAR_217 * 4 + 3 ] = METHOD_19 ( VAR_218 ) ; } } else if ( VAR_219 -> VAR_220 == 3 ) { for ( VAR_221 = 0 ; VAR_222 < VAR_223 ; VAR_224 ++ ) { VAR_225 = VAR_226 [ VAR_227 * 2 + 0 ] ; VAR_228 = VAR_229 [ VAR_230 * 2 + 1 ] ; VAR_231 = & VAR_232 [ VAR_233 * VAR_234 ] ; VAR_235 = VAR_236 = VAR_237 = 0.5 ; for ( VAR_238 = VAR_239 ; VAR_240 < VAR_241 ; VAR_242 ++ ) { VAR_243 += METHOD_20 ( ( TYPE_23 ) VAR_244 -> VAR_245 [ VAR_246 ] [ VAR_247 * 4 + 0 ] ) * VAR_248 [ VAR_249 - VAR_250 ] ; VAR_251 += METHOD_21 ( ( TYPE_24 ) VAR_252 -> VAR_253 [ VAR_254 ] [ VAR_255 * 4 + 1 ] ) * VAR_256 [ VAR_257 - VAR_258 ] ; VAR_259 += METHOD_22 ( ( TYPE_25 ) VAR_260 -> VAR_261 [ VAR_262 ] [ VAR_263 * 4 + 2 ] ) * VAR_264 [ VAR_265 - VAR_266 ] ; } VAR_267 -> VAR_268 [ VAR_269 ] [ VAR_270 * 4 + 0 ] = METHOD_23 ( VAR_271 ) ; VAR_272 -> VAR_273 [ VAR_274 ] [ VAR_275 * 4 + 1 ] = METHOD_24 ( VAR_276 ) ; VAR_277 -> VAR_278 [ VAR_279 ] [ VAR_280 * 4 + 2 ] = METHOD_25 ( VAR_281 ) ; } } else { for ( VAR_282 = 0 ; VAR_283 < VAR_284 ; VAR_285 ++ ) { VAR_286 = VAR_287 [ VAR_288 * 2 + 0 ] ; VAR_289 = VAR_290 [ VAR_291 * 2 + 1 ] ; VAR_292 = & VAR_293 [ VAR_294 * VAR_295 ] ; VAR_296 = VAR_297 = VAR_298 = VAR_299 = 0.5 ; for ( VAR_300 = VAR_301 ; VAR_302 < VAR_303 ; VAR_304 ++ ) { VAR_305 += METHOD_26 ( ( TYPE_26 ) VAR_306 -> VAR_307 [ VAR_308 ] [ VAR_309 * 4 + 0 ] ) * VAR_310 [ VAR_311 - VAR_312 ] ; VAR_313 += METHOD_27 ( ( TYPE_27 ) VAR_314 -> VAR_315 [ VAR_316 ] [ VAR_317 * 4 + 1 ] ) * VAR_318 [ VAR_319 - VAR_320 ] ; VAR_321 += METHOD_28 ( ( TYPE_28 ) VAR_322 -> VAR_323 [ VAR_324 ] [ VAR_325 * 4 + 2 ] ) * VAR_326 [ VAR_327 - VAR_328 ] ; VAR_329 += METHOD_29 ( ( TYPE_29 ) VAR_330 -> VAR_331 [ VAR_332 ] [ VAR_333 * 4 + 3 ] ) * VAR_334 [ VAR_335 - VAR_336 ] ; } VAR_337 -> VAR_338 [ VAR_339 ] [ VAR_340 * 4 + 0 ] = METHOD_30 ( VAR_341 ) ; VAR_342 -> VAR_343 [ VAR_344 ] [ VAR_345 * 4 + 1 ] = METHOD_31 ( VAR_346 ) ; VAR_347 -> VAR_348 [ VAR_349 ] [ VAR_350 * 4 + 2 ] = METHOD_32 ( VAR_351 ) ; VAR_352 -> VAR_353 [ VAR_354 ] [ VAR_355 * 4 + 3 ] = METHOD_33 ( VAR_356 ) ; } } break ; case VAR_357 : for ( VAR_358 = 0 ; VAR_359 < VAR_360 ; VAR_361 ++ ) { VAR_362 = VAR_363 [ VAR_364 * 2 + 0 ] ; VAR_365 = VAR_366 [ VAR_367 * 2 + 1 ] ; VAR_368 = & VAR_369 [ VAR_370 * VAR_371 ] ; VAR_372 = 0.0 ; for ( VAR_373 = VAR_374 ; VAR_375 < VAR_376 ; VAR_377 ++ ) VAR_378 += METHOD_34 ( METHOD_35 ( VAR_379 , VAR_380 , VAR_381 ) ) * VAR_382 [ VAR_383 - VAR_384 ] ; METHOD_36 ( VAR_385 , VAR_386 , VAR_387 ) = ( TYPE_30 ) VAR_388 ; } break ; case VAR_389 : for ( VAR_390 = 0 ; VAR_391 < VAR_392 ; VAR_393 ++ ) { VAR_394 = VAR_395 [ VAR_396 * 2 + 0 ] ; VAR_397 = VAR_398 [ VAR_399 * 2 + 1 ] ; VAR_400 = & VAR_401 [ VAR_402 * VAR_403 ] ; VAR_404 = 0.0 ; for ( VAR_405 = VAR_406 ; VAR_407 < VAR_408 ; VAR_409 ++ ) VAR_410 += METHOD_37 ( VAR_411 , VAR_412 , VAR_413 ) * VAR_414 [ VAR_415 - VAR_416 ] ; METHOD_38 ( VAR_417 , VAR_418 , VAR_419 ) = VAR_420 ; } break ; } } } METHOD_39 ( & VAR_421 ) ; METHOD_40 ( VAR_422 ) ; METHOD_41 ( VAR_423 ) ; return VAR_424 ; }",89
90,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , unsigned TYPE_3 VAR_1 ) { TYPE_4 VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; if ( METHOD_1 ( & VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) != 0 ) return - VAR_9 ; if ( VAR_10 != sizeof ( VAR_11 ) + VAR_12 . VAR_13 ) { METHOD_2 ( ""Wronglenargument\\n"" ) ; return - VAR_14 ; } if ( VAR_15 . VAR_16 == 0 ) { METHOD_3 ( ""Entries_sizeneverzero\\n"" ) ; return - VAR_17 ; } if ( VAR_18 . VAR_19 >= ( ( VAR_20 - sizeof ( struct STRUCT_OR_UNION_4 ) ) / VAR_21 - VAR_22 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) return - VAR_23 ; if ( VAR_24 . VAR_25 >= VAR_26 / sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_27 ;  VAR_28 = METHOD_4 ( VAR_29 . VAR_30 ) * VAR_31 ;  VAR_32 = METHOD_5 ( sizeof ( * VAR_33 ) + VAR_34 ) ; if ( ! VAR_35 ) return - VAR_36 ; if ( VAR_37 ) METHOD_6 ( VAR_38 -> VAR_39 , 0 , VAR_40 ) ; VAR_41 -> VAR_42 = METHOD_7 ( VAR_43 . VAR_44 ) ; if ( ! VAR_45 -> VAR_46 ) { VAR_47 = - VAR_48 ; goto VAR_49 ; } if ( METHOD_8 ( VAR_50 -> VAR_51 , VAR_52 . VAR_53 , VAR_54 . VAR_55 ) != 0 ) { METHOD_9 ( ""Couldn\'tcopyentriesfromuserspace\\n"" ) ; VAR_56 = - VAR_57 ; goto VAR_58 ; } VAR_59 = METHOD_10 ( STRUCT_OR_UNION_7 , & VAR_60 , VAR_61 ) ; if ( VAR_62 == 0 ) return VAR_63 ; VAR_64 : METHOD_11 ( VAR_65 -> VAR_66 ) ; VAR_67 : METHOD_12 ( VAR_68 ) ; return VAR_69 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , unsigned TYPE_3 VAR_1 ) { TYPE_4 VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; if ( METHOD_1 ( & VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) != 0 ) return - VAR_9 ; if ( VAR_10 != sizeof ( VAR_11 ) + VAR_12 . VAR_13 ) { METHOD_2 ( ""Wronglenargument\\n"" ) ; return - VAR_14 ; } if ( VAR_15 . VAR_16 == 0 ) { METHOD_3 ( ""Entries_sizeneverzero\\n"" ) ; return - VAR_17 ; } if ( VAR_18 . VAR_19 >= ( ( VAR_20 - sizeof ( struct STRUCT_OR_UNION_4 ) ) / VAR_21 - VAR_22 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) return - VAR_23 ; if ( VAR_24 . VAR_25 >= VAR_26 / sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_27 ; VAR_28 = METHOD_4 ( VAR_29 . VAR_30 ) * VAR_31 ; VAR_32 = METHOD_5 ( sizeof ( * VAR_33 ) + VAR_34 ) ; if ( ! VAR_35 ) return - VAR_36 ; if ( VAR_37 ) METHOD_6 ( VAR_38 -> VAR_39 , 0 , VAR_40 ) ; VAR_41 -> VAR_42 = METHOD_7 ( VAR_43 . VAR_44 ) ; if ( ! VAR_45 -> VAR_46 ) { VAR_47 = - VAR_48 ; VAR_60 . VAR_70 [ sizeof ( VAR_60 . VAR_70 ) - 1 ] = 0 ; goto VAR_49 ; } if ( METHOD_8 ( VAR_50 -> VAR_51 , VAR_52 . VAR_53 , VAR_54 . VAR_55 ) != 0 ) { METHOD_9 ( ""Couldn\'tcopyentriesfromuserspace\\n"" ) ; VAR_56 = - VAR_57 ; goto VAR_58 ; } VAR_59 = METHOD_10 ( STRUCT_OR_UNION_7 , & VAR_60 , VAR_61 ) ; if ( VAR_62 == 0 ) return VAR_63 ; VAR_64 : METHOD_11 ( VAR_65 -> VAR_66 ) ; VAR_67 : METHOD_12 ( VAR_68 ) ; return VAR_69 ; }",90
91,"struct STRUCT_OR_UNION_0 METHOD_0 ( const TYPE_0 VAR_0 ) {  struct STRUCT_OR_UNION_1 VAR_1 ;  if ( ! VAR_2 ) return ( struct STRUCT_OR_UNION_2 ) { 0 , 0 } ;  VAR_3 . VAR_4 = METHOD_1 ( VAR_5 , VAR_6 , & VAR_7 . VAR_8 ) ;   if ( METHOD_2 ( VAR_9 < 0 ) )   METHOD_3 ( & VAR_10 , VAR_11 . VAR_12 , VAR_13 . VAR_14 ) ;  return VAR_15 ; }","struct STRUCT_OR_UNION_0 METHOD_0 ( const TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; if ( ! VAR_2 ) return ( struct STRUCT_OR_UNION_2 ) { 0 , 0 } ; VAR_3 . VAR_4 = METHOD_1 ( VAR_5 , VAR_6 , & VAR_16 ) ; if ( METHOD_2 ( VAR_9 < 0 ) ) METHOD_3 ( & VAR_10 , VAR_11 . VAR_12 , VAR_13 . VAR_14 ) ; return VAR_15 ; }",91
92,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; if ( VAR_2 -> VAR_3 == - 1 ) VAR_4 -> VAR_5 -> VAR_6 = VAR_7 ; if ( ! METHOD_1 ( VAR_8 , ( TYPE_3 * ) & VAR_9 , 1 ) ) return VAR_10 ; switch ( VAR_11 . VAR_12 ) { case VAR_13 : { break ; } case VAR_14 : { TYPE_4 VAR_15 ; TYPE_5 VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; if ( ! METHOD_2 ( VAR_19 , ( ( TYPE_8 * ) & VAR_20 . VAR_21 ) + 1 , VAR_22 - 1 ) ) return VAR_23 ; VAR_24 . VAR_25 . VAR_26 = METHOD_3 ( VAR_27 . VAR_28 . VAR_29 ) ; for ( VAR_30 = 0 ; VAR_31 < VAR_32 . VAR_33 . VAR_34 ; VAR_35 ++ ) { if ( ! METHOD_4 ( VAR_36 , ( TYPE_9 * ) & VAR_37 , VAR_38 ) ) return VAR_39 ; VAR_40 . VAR_41 = METHOD_5 ( VAR_42 . VAR_43 ) ; if ( VAR_44 . VAR_45 == VAR_46 ) break ; VAR_47 . VAR_48 . VAR_49 = METHOD_6 ( VAR_50 . VAR_51 . VAR_52 ) ; VAR_53 . VAR_54 . VAR_55 = METHOD_7 ( VAR_56 . VAR_57 . VAR_58 ) ; VAR_59 . VAR_60 . VAR_61 = METHOD_8 ( VAR_62 . VAR_63 . VAR_64 ) ; VAR_65 . VAR_66 . VAR_67 = METHOD_9 ( VAR_68 . VAR_69 . VAR_70 ) ; if ( VAR_71 . VAR_72 == VAR_73 || VAR_74 . VAR_75 == VAR_76 ) { if ( ! METHOD_10 ( VAR_77 , VAR_78 . VAR_79 . VAR_80 , VAR_81 . VAR_82 . VAR_83 , VAR_84 . VAR_85 . VAR_86 , VAR_87 . VAR_88 . VAR_89 , VAR_90 . VAR_91 ) ) { return VAR_92 ; } continue ; } if ( VAR_93 . VAR_94 == VAR_95 ) { if ( ! VAR_96 -> METHOD_11 ( VAR_97 , VAR_98 . VAR_99 . VAR_100 , VAR_101 . VAR_102 . VAR_103 ) ) { return VAR_104 ; } continue ; } if ( VAR_105 . VAR_106 == VAR_107 ) { VAR_108 -> VAR_109 = 1 ; if ( VAR_110 -> METHOD_12 != VAR_111 ) VAR_112 -> METHOD_13 ( VAR_113 , VAR_114 . VAR_115 . VAR_116 , 0 ) ; VAR_117 -> VAR_118 = VAR_119 . VAR_120 . VAR_121 ; continue ; } if ( VAR_122 . VAR_123 == VAR_124 ) { VAR_125 -> VAR_126 = VAR_127 . VAR_128 . VAR_129 ; VAR_130 -> VAR_131 = VAR_132 . VAR_133 . VAR_134 ; VAR_135 -> VAR_136 . VAR_137 = VAR_138 -> VAR_139 . VAR_140 = 0 ; VAR_141 -> VAR_142 . VAR_143 = VAR_144 -> VAR_145 ; VAR_146 -> VAR_147 . VAR_148 = VAR_149 -> VAR_150 ; if ( ! VAR_151 -> METHOD_14 ( VAR_152 ) ) return VAR_153 ; METHOD_15 ( VAR_154 , 0 , 0 , VAR_155 . VAR_156 . VAR_157 , VAR_158 . VAR_159 . VAR_160 , VAR_161 ) ; METHOD_16 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_162 . VAR_163 . VAR_164 , VAR_165 . VAR_166 . VAR_167 ) ; continue ; } if ( VAR_168 . VAR_169 == VAR_170 ) { TYPE_10 VAR_171 ; if ( ! METHOD_17 ( VAR_172 , ( TYPE_11 * ) & VAR_173 -> VAR_174 , VAR_175 ) ) return VAR_176 ; METHOD_18 ( ""client2serversupportedmessages(bitflags)\\n"" ) ; for ( VAR_177 = 0 ; VAR_178 < 32 ; VAR_179 += 8 ) METHOD_19 ( ""%02X:%04x%04x%04x%04x-%04x%04x%04x%04x\\n"" , VAR_180 , VAR_181 -> VAR_182 . VAR_183 [ VAR_184 ] , VAR_185 -> VAR_186 . VAR_187 [ VAR_188 + 1 ] , VAR_189 -> VAR_190 . VAR_191 [ VAR_192 + 2 ] , VAR_193 -> VAR_194 . VAR_195 [ VAR_196 + 3 ] , VAR_197 -> VAR_198 . VAR_199 [ VAR_200 + 4 ] , VAR_201 -> VAR_202 . VAR_203 [ VAR_204 + 5 ] , VAR_205 -> VAR_206 . VAR_207 [ VAR_208 + 6 ] , VAR_209 -> VAR_210 . VAR_211 [ VAR_212 + 7 ] ) ; METHOD_20 ( ""server2clientsupportedmessages(bitflags)\\n"" ) ; for ( VAR_213 = 0 ; VAR_214 < 32 ; VAR_215 += 8 ) METHOD_21 ( ""%02X:%04x%04x%04x%04x-%04x%04x%04x%04x\\n"" , VAR_216 , VAR_217 -> VAR_218 . VAR_219 [ VAR_220 ] , VAR_221 -> VAR_222 . VAR_223 [ VAR_224 + 1 ] , VAR_225 -> VAR_226 . VAR_227 [ VAR_228 + 2 ] , VAR_229 -> VAR_230 . VAR_231 [ VAR_232 + 3 ] , VAR_233 -> VAR_234 . VAR_235 [ VAR_236 + 4 ] , VAR_237 -> VAR_238 . VAR_239 [ VAR_240 + 5 ] , VAR_241 -> VAR_242 . VAR_243 [ VAR_244 + 6 ] , VAR_245 -> VAR_246 . VAR_247 [ VAR_248 + 7 ] ) ; continue ; } if ( VAR_249 . VAR_250 == VAR_251 ) { TYPE_12 * VAR_252 ; VAR_253 = METHOD_22 ( VAR_254 . VAR_255 . VAR_256 ) ; if ( ! METHOD_23 ( VAR_257 , VAR_258 , VAR_259 . VAR_260 . VAR_261 ) ) { METHOD_24 ( VAR_262 ) ; return VAR_263 ; } METHOD_25 ( VAR_264 ) ; continue ; } if ( VAR_265 . VAR_266 == VAR_267 ) { TYPE_13 * VAR_268 ; VAR_269 = METHOD_26 ( VAR_270 . VAR_271 . VAR_272 + 1 ) ; if ( ! METHOD_27 ( VAR_273 , VAR_274 , VAR_275 . VAR_276 . VAR_277 ) ) { METHOD_28 ( VAR_278 ) ; return VAR_279 ; } VAR_280 [ VAR_281 . VAR_282 . VAR_283 ] = 0 ; METHOD_29 ( ""ConnectedtoServer\\""%s\\""\\n"" , VAR_284 ) ; METHOD_30 ( VAR_285 ) ; continue ; } if ( VAR_286 . VAR_287 != VAR_288 ) { if ( ( VAR_289 . VAR_290 . VAR_291 + VAR_292 . VAR_293 . VAR_294 > VAR_295 -> VAR_296 ) || ( VAR_297 . VAR_298 . VAR_299 + VAR_300 . VAR_301 . VAR_302 > VAR_303 -> VAR_304 ) ) { METHOD_31 ( ""Recttoolarge:%dx%dat(%d,%d)\\n"" , VAR_305 . VAR_306 . VAR_307 , VAR_308 . VAR_309 . VAR_310 , VAR_311 . VAR_312 . VAR_313 , VAR_314 . VAR_315 . VAR_316 ) ; return VAR_317 ; } VAR_318 -> METHOD_32 ( VAR_319 , VAR_320 . VAR_321 . VAR_322 , VAR_323 . VAR_324 . VAR_325 , VAR_326 . VAR_327 . VAR_328 , VAR_329 . VAR_330 . VAR_331 ) ; } switch ( VAR_332 . VAR_333 ) { case VAR_334 : { TYPE_14 VAR_335 = VAR_336 . VAR_337 . VAR_338 , VAR_339 = VAR_340 . VAR_341 . VAR_342 ; VAR_343 = VAR_344 . VAR_345 . VAR_346 * VAR_347 -> VAR_348 . VAR_349 / 8 ; VAR_350 = VAR_351 ? ( VAR_352 / VAR_353 ) : 0 ; while ( VAR_354 && VAR_355 > 0 ) { if ( VAR_356 > VAR_357 ) VAR_358 = VAR_359 ; if ( ! METHOD_33 ( VAR_360 , VAR_361 -> VAR_362 , VAR_363 * VAR_364 ) ) return VAR_365 ; VAR_366 -> METHOD_34 ( VAR_367 , ( TYPE_15 * ) VAR_368 -> VAR_369 , VAR_370 . VAR_371 . VAR_372 , VAR_373 , VAR_374 . VAR_375 . VAR_376 , VAR_377 ) ; VAR_378 -= VAR_379 ; VAR_380 += VAR_381 ; } break ; } case VAR_382 : { TYPE_16 VAR_383 ; if ( ! METHOD_35 ( VAR_384 , ( TYPE_17 * ) & VAR_385 , VAR_386 ) ) return VAR_387 ; VAR_388 . VAR_389 = METHOD_36 ( VAR_390 . VAR_391 ) ; VAR_392 . VAR_393 = METHOD_37 ( VAR_394 . VAR_395 ) ; VAR_396 -> METHOD_38 ( VAR_397 , VAR_398 . VAR_399 , VAR_400 . VAR_401 , VAR_402 . VAR_403 . VAR_404 , VAR_405 . VAR_406 . VAR_407 ) ; VAR_408 -> METHOD_39 ( VAR_409 , VAR_410 . VAR_411 , VAR_412 . VAR_413 , VAR_414 . VAR_415 . VAR_416 , VAR_417 . VAR_418 . VAR_419 , VAR_420 . VAR_421 . VAR_422 , VAR_423 . VAR_424 . VAR_425 ) ; break ; } case VAR_426 : { switch ( VAR_427 -> VAR_428 . VAR_429 ) { case 8 : if ( ! METHOD_40 ( VAR_430 , VAR_431 . VAR_432 . VAR_433 , VAR_434 . VAR_435 . VAR_436 , VAR_437 . VAR_438 . VAR_439 , VAR_440 . VAR_441 . VAR_442 ) ) return VAR_443 ; break ; case 16 : if ( ! METHOD_41 ( VAR_444 , VAR_445 . VAR_446 . VAR_447 , VAR_448 . VAR_449 . VAR_450 , VAR_451 . VAR_452 . VAR_453 , VAR_454 . VAR_455 . VAR_456 ) ) return VAR_457 ; break ; case 32 : if ( ! METHOD_42 ( VAR_458 , VAR_459 . VAR_460 . VAR_461 , VAR_462 . VAR_463 . VAR_464 , VAR_465 . VAR_466 . VAR_467 , VAR_468 . VAR_469 . VAR_470 ) ) return VAR_471 ; break ; } break ; } case VAR_472 : { switch ( VAR_473 -> VAR_474 . VAR_475 ) { case 8 : if ( ! METHOD_43 ( VAR_476 , VAR_477 . VAR_478 . VAR_479 , VAR_480 . VAR_481 . VAR_482 , VAR_483 . VAR_484 . VAR_485 , VAR_486 . VAR_487 . VAR_488 ) ) return VAR_489 ; break ; case 16 : if ( ! METHOD_44 ( VAR_490 , VAR_491 . VAR_492 . VAR_493 , VAR_494 . VAR_495 . VAR_496 , VAR_497 . VAR_498 . VAR_499 , VAR_500 . VAR_501 . VAR_502 ) ) return VAR_503 ; break ; case 32 : if ( ! METHOD_45 ( VAR_504 , VAR_505 . VAR_506 . VAR_507 , VAR_508 . VAR_509 . VAR_510 , VAR_511 . VAR_512 . VAR_513 , VAR_514 . VAR_515 . VAR_516 ) ) return VAR_517 ; break ; } break ; } case VAR_518 : { switch ( VAR_519 -> VAR_520 . VAR_521 ) { case 8 : if ( ! METHOD_46 ( VAR_522 , VAR_523 . VAR_524 . VAR_525 , VAR_526 . VAR_527 . VAR_528 , VAR_529 . VAR_530 . VAR_531 , VAR_532 . VAR_533 . VAR_534 ) ) return VAR_535 ; break ; case 16 : if ( ! METHOD_47 ( VAR_536 , VAR_537 . VAR_538 . VAR_539 , VAR_540 . VAR_541 . VAR_542 , VAR_543 . VAR_544 . VAR_545 , VAR_546 . VAR_547 . VAR_548 ) ) return VAR_549 ; break ; case 32 : if ( ! METHOD_48 ( VAR_550 , VAR_551 . VAR_552 . VAR_553 , VAR_554 . VAR_555 . VAR_556 , VAR_557 . VAR_558 . VAR_559 , VAR_560 . VAR_561 . VAR_562 ) ) return VAR_563 ; break ; } break ; } case VAR_564 : { switch ( VAR_565 -> VAR_566 . VAR_567 ) { case 8 : if ( ! METHOD_49 ( VAR_568 , VAR_569 . VAR_570 . VAR_571 , VAR_572 . VAR_573 . VAR_574 , VAR_575 . VAR_576 . VAR_577 , VAR_578 . VAR_579 . VAR_580 ) ) return VAR_581 ; break ; case 16 : if ( ! METHOD_50 ( VAR_582 , VAR_583 . VAR_584 . VAR_585 , VAR_586 . VAR_587 . VAR_588 , VAR_589 . VAR_590 . VAR_591 , VAR_592 . VAR_593 . VAR_594 ) ) return VAR_595 ; break ; case 32 : if ( ! METHOD_51 ( VAR_596 , VAR_597 . VAR_598 . VAR_599 , VAR_600 . VAR_601 . VAR_602 , VAR_603 . VAR_604 . VAR_605 , VAR_606 . VAR_607 . VAR_608 ) ) return VAR_609 ; break ; } break ; } case VAR_610 : { switch ( VAR_611 -> VAR_612 . VAR_613 ) { case 8 : if ( ! METHOD_52 ( VAR_614 , VAR_615 . VAR_616 . VAR_617 , VAR_618 . VAR_619 . VAR_620 , VAR_621 . VAR_622 . VAR_623 , VAR_624 . VAR_625 . VAR_626 ) ) return VAR_627 ; break ; case 16 : if ( ! METHOD_53 ( VAR_628 , VAR_629 . VAR_630 . VAR_631 , VAR_632 . VAR_633 . VAR_634 , VAR_635 . VAR_636 . VAR_637 , VAR_638 . VAR_639 . VAR_640 ) ) return VAR_641 ; break ; case 32 : if ( ! METHOD_54 ( VAR_642 , VAR_643 . VAR_644 . VAR_645 , VAR_646 . VAR_647 . VAR_648 , VAR_649 . VAR_650 . VAR_651 , VAR_652 . VAR_653 . VAR_654 ) ) return VAR_655 ; break ; } break ; } case VAR_656 : { switch ( VAR_657 -> VAR_658 . VAR_659 ) { case 8 : if ( ! METHOD_55 ( VAR_660 , VAR_661 . VAR_662 . VAR_663 , VAR_664 . VAR_665 . VAR_666 , VAR_667 . VAR_668 . VAR_669 , VAR_670 . VAR_671 . VAR_672 ) ) return VAR_673 ; break ; case 16 : if ( VAR_674 -> VAR_675 . VAR_676 . VAR_677 > 0x1F ) { if ( ! METHOD_56 ( VAR_678 , VAR_679 . VAR_680 . VAR_681 , VAR_682 . VAR_683 . VAR_684 , VAR_685 . VAR_686 . VAR_687 , VAR_688 . VAR_689 . VAR_690 ) ) return VAR_691 ; } else { if ( ! METHOD_57 ( VAR_692 , VAR_693 . VAR_694 . VAR_695 , VAR_696 . VAR_697 . VAR_698 , VAR_699 . VAR_700 . VAR_701 , VAR_702 . VAR_703 . VAR_704 ) ) return VAR_705 ; } break ; case 32 : { TYPE_18 VAR_706 = ( VAR_707 -> VAR_708 . VAR_709 << VAR_710 -> VAR_711 . VAR_712 ) | ( VAR_713 -> VAR_714 . VAR_715 << VAR_716 -> VAR_717 . VAR_718 ) | ( VAR_719 -> VAR_720 . VAR_721 << VAR_722 -> VAR_723 . VAR_724 ) ; if ( ( VAR_725 -> VAR_726 . VAR_727 && ( VAR_728 & 0xff ) == 0 ) || ( ! VAR_729 -> VAR_730 . VAR_731 && ( VAR_732 & 0xff000000 ) == 0 ) ) { if ( ! METHOD_58 ( VAR_733 , VAR_734 . VAR_735 . VAR_736 , VAR_737 . VAR_738 . VAR_739 , VAR_740 . VAR_741 . VAR_742 , VAR_743 . VAR_744 . VAR_745 ) ) return VAR_746 ; } else if ( ! VAR_747 -> VAR_748 . VAR_749 && ( VAR_750 & 0xff ) == 0 ) { if ( ! METHOD_59 ( VAR_751 , VAR_752 . VAR_753 . VAR_754 , VAR_755 . VAR_756 . VAR_757 , VAR_758 . VAR_759 . VAR_760 , VAR_761 . VAR_762 . VAR_763 ) ) return VAR_764 ; } else if ( VAR_765 -> VAR_766 . VAR_767 && ( VAR_768 & 0xff000000 ) == 0 ) { if ( ! METHOD_60 ( VAR_769 , VAR_770 . VAR_771 . VAR_772 , VAR_773 . VAR_774 . VAR_775 , VAR_776 . VAR_777 . VAR_778 , VAR_779 . VAR_780 . VAR_781 ) ) return VAR_782 ; } else if ( ! METHOD_61 ( VAR_783 , VAR_784 . VAR_785 . VAR_786 , VAR_787 . VAR_788 . VAR_789 , VAR_790 . VAR_791 . VAR_792 , VAR_793 . VAR_794 . VAR_795 ) ) return VAR_796 ; break ; } } break ; } TYPE_19 TYPE_20 case VAR_797 : { switch ( VAR_798 -> VAR_799 . VAR_800 ) { case 8 : if ( ! METHOD_62 ( VAR_801 , VAR_802 . VAR_803 . VAR_804 , VAR_805 . VAR_806 . VAR_807 , VAR_808 . VAR_809 . VAR_810 , VAR_811 . VAR_812 . VAR_813 ) ) return VAR_814 ; break ; case 16 : if ( ! METHOD_63 ( VAR_815 , VAR_816 . VAR_817 . VAR_818 , VAR_819 . VAR_820 . VAR_821 , VAR_822 . VAR_823 . VAR_824 , VAR_825 . VAR_826 . VAR_827 ) ) return VAR_828 ; break ; case 32 : if ( ! METHOD_64 ( VAR_829 , VAR_830 . VAR_831 . VAR_832 , VAR_833 . VAR_834 . VAR_835 , VAR_836 . VAR_837 . VAR_838 , VAR_839 . VAR_840 . VAR_841 ) ) return VAR_842 ; break ; } break ; } TYPE_21 TYPE_22 case VAR_843 : { switch ( VAR_844 -> VAR_845 . VAR_846 ) { case 8 : if ( ! METHOD_65 ( VAR_847 , VAR_848 . VAR_849 . VAR_850 , VAR_851 . VAR_852 . VAR_853 , VAR_854 . VAR_855 . VAR_856 , VAR_857 . VAR_858 . VAR_859 ) ) return VAR_860 ; break ; case 16 : if ( ! METHOD_66 ( VAR_861 , VAR_862 . VAR_863 . VAR_864 , VAR_865 . VAR_866 . VAR_867 , VAR_868 . VAR_869 . VAR_870 , VAR_871 . VAR_872 . VAR_873 ) ) return VAR_874 ; break ; case 32 : if ( ! METHOD_67 ( VAR_875 , VAR_876 . VAR_877 . VAR_878 , VAR_879 . VAR_880 . VAR_881 , VAR_882 . VAR_883 . VAR_884 , VAR_885 . VAR_886 . VAR_887 ) ) return VAR_888 ; break ; } break ; } case VAR_889 : VAR_890 -> VAR_891 . VAR_892 = 9 ; case VAR_893 : { switch ( VAR_894 -> VAR_895 . VAR_896 ) { case 8 : if ( ! METHOD_68 ( VAR_897 , VAR_898 . VAR_899 . VAR_900 , VAR_901 . VAR_902 . VAR_903 , VAR_904 . VAR_905 . VAR_906 , VAR_907 . VAR_908 . VAR_909 ) ) return VAR_910 ; break ; case 16 : if ( VAR_911 -> VAR_912 . VAR_913 . VAR_914 > 0x1F ) { if ( ! METHOD_69 ( VAR_915 , VAR_916 . VAR_917 . VAR_918 , VAR_919 . VAR_920 . VAR_921 , VAR_922 . VAR_923 . VAR_924 , VAR_925 . VAR_926 . VAR_927 ) ) return VAR_928 ; } else { if ( ! METHOD_70 ( VAR_929 , VAR_930 . VAR_931 . VAR_932 , VAR_933 . VAR_934 . VAR_935 , VAR_936 . VAR_937 . VAR_938 , VAR_939 . VAR_940 . VAR_941 ) ) return VAR_942 ; } break ; case 32 : { TYPE_23 VAR_943 = ( VAR_944 -> VAR_945 . VAR_946 << VAR_947 -> VAR_948 . VAR_949 ) | ( VAR_950 -> VAR_951 . VAR_952 << VAR_953 -> VAR_954 . VAR_955 ) | ( VAR_956 -> VAR_957 . VAR_958 << VAR_959 -> VAR_960 . VAR_961 ) ; if ( ( VAR_962 -> VAR_963 . VAR_964 && ( VAR_965 & 0xff ) == 0 ) || ( ! VAR_966 -> VAR_967 . VAR_968 && ( VAR_969 & 0xff000000 ) == 0 ) ) { if ( ! METHOD_71 ( VAR_970 , VAR_971 . VAR_972 . VAR_973 , VAR_974 . VAR_975 . VAR_976 , VAR_977 . VAR_978 . VAR_979 , VAR_980 . VAR_981 . VAR_982 ) ) return VAR_983 ; } else if ( ! VAR_984 -> VAR_985 . VAR_986 && ( VAR_987 & 0xff ) == 0 ) { if ( ! METHOD_72 ( VAR_988 , VAR_989 . VAR_990 . VAR_991 , VAR_992 . VAR_993 . VAR_994 , VAR_995 . VAR_996 . VAR_997 , VAR_998 . VAR_999 . VAR_1000 ) ) return VAR_1001 ; } else if ( VAR_1002 -> VAR_1003 . VAR_1004 && ( VAR_1005 & 0xff000000 ) == 0 ) { if ( ! METHOD_73 ( VAR_1006 , VAR_1007 . VAR_1008 . VAR_1009 , VAR_1010 . VAR_1011 . VAR_1012 , VAR_1013 . VAR_1014 . VAR_1015 , VAR_1016 . VAR_1017 . VAR_1018 ) ) return VAR_1019 ; } else if ( ! METHOD_74 ( VAR_1020 , VAR_1021 . VAR_1022 . VAR_1023 , VAR_1024 . VAR_1025 . VAR_1026 , VAR_1027 . VAR_1028 . VAR_1029 , VAR_1030 . VAR_1031 . VAR_1032 ) ) return VAR_1033 ; break ; } } break ; } default : { TYPE_24 VAR_1034 = VAR_1035 ; VAR_1036 * VAR_1037 ; for ( VAR_1038 = VAR_1039 ; ! VAR_1040 && VAR_1041 ; VAR_1042 = VAR_1043 -> VAR_1044 ) if ( VAR_1045 -> METHOD_75 && VAR_1046 -> METHOD_76 ( VAR_1047 , & VAR_1048 ) ) VAR_1049 = VAR_1050 ; if ( ! VAR_1051 ) { METHOD_77 ( ""Unknownrectencoding%d\\n"" , ( TYPE_25 ) VAR_1052 . VAR_1053 ) ; return VAR_1054 ; } } } VAR_1055 -> METHOD_78 ( VAR_1056 ) ; VAR_1057 -> METHOD_79 ( VAR_1058 , VAR_1059 . VAR_1060 . VAR_1061 , VAR_1062 . VAR_1063 . VAR_1064 , VAR_1065 . VAR_1066 . VAR_1067 , VAR_1068 . VAR_1069 . VAR_1070 ) ; } if ( ! METHOD_80 ( VAR_1071 ) ) return VAR_1072 ; if ( VAR_1073 -> METHOD_81 ) VAR_1074 -> METHOD_82 ( VAR_1075 ) ; break ; } case VAR_1076 : { VAR_1077 -> METHOD_83 ( VAR_1078 ) ; break ; } case VAR_1079 : { TYPE_26 * VAR_1080 ; if ( ! METHOD_84 ( VAR_1081 , ( ( TYPE_27 * ) & VAR_1082 ) + 1 , VAR_1083 - 1 ) ) return VAR_1084 ; VAR_1085 . VAR_1086 . VAR_1087 = METHOD_85 ( VAR_1088 . VAR_1089 . VAR_1090 ) ; if ( VAR_1091 . VAR_1092 . VAR_1093 > 1 << 20 ) { METHOD_86 ( ""Ignoringtoobigcuttextlengthsentbyserver:%uB>1MB\\n"" , ( unsigned TYPE_28 ) VAR_1094 . VAR_1095 . VAR_1096 ) ; return VAR_1097 ; } VAR_1098 = METHOD_87 ( VAR_1099 . VAR_1100 . VAR_1101 + 1 ) ; if ( ! METHOD_88 ( VAR_1102 , VAR_1103 , VAR_1104 . VAR_1105 . VAR_1106 ) ) { METHOD_89 ( VAR_1107 ) ; return VAR_1108 ; } VAR_1109 [ VAR_1110 . VAR_1111 . VAR_1112 ] = 0 ; if ( VAR_1113 -> METHOD_90 ) VAR_1114 -> METHOD_91 ( VAR_1115 , VAR_1116 , VAR_1117 . VAR_1118 . VAR_1119 ) ; METHOD_92 ( VAR_1120 ) ; break ; } case VAR_1121 : { TYPE_29 * VAR_1122 = VAR_1123 ; if ( ! METHOD_93 ( VAR_1124 , ( ( TYPE_30 * ) & VAR_1125 ) + 1 , VAR_1126 - 1 ) ) return VAR_1127 ; VAR_1128 . VAR_1129 . VAR_1130 = METHOD_94 ( VAR_1131 . VAR_1132 . VAR_1133 ) ; switch ( VAR_1134 . VAR_1135 . VAR_1136 ) { case VAR_1137 : METHOD_95 ( ""ReceivedTextChatOpen\\n"" ) ; if ( VAR_1138 -> METHOD_96 != VAR_1139 ) VAR_1140 -> METHOD_97 ( VAR_1141 , ( TYPE_31 ) VAR_1142 , VAR_1143 ) ; break ; case VAR_1144 : METHOD_98 ( ""ReceivedTextChatClose\\n"" ) ; if ( VAR_1145 -> METHOD_99 != VAR_1146 ) VAR_1147 -> METHOD_100 ( VAR_1148 , ( TYPE_32 ) VAR_1149 , VAR_1150 ) ; break ; case VAR_1151 : METHOD_101 ( ""ReceivedTextChatFinished\\n"" ) ; if ( VAR_1152 -> METHOD_102 != VAR_1153 ) VAR_1154 -> METHOD_103 ( VAR_1155 , ( TYPE_33 ) VAR_1156 , VAR_1157 ) ; break ; default :  VAR_1158 = METHOD_104 ( VAR_1159 . VAR_1160 . VAR_1161 + 1 ) ;  if ( ! METHOD_105 ( VAR_1162 , VAR_1163 , VAR_1164 . VAR_1165 . VAR_1166 ) ) { METHOD_106 ( VAR_1167 ) ; return VAR_1168 ; } VAR_1169 [ VAR_1170 . VAR_1171 . VAR_1172 ] = 0 ; METHOD_107 ( ""ReceivedTextChat\\""%s\\""\\n"" , VAR_1173 ) ; if ( VAR_1174 -> METHOD_108 != VAR_1175 ) VAR_1176 -> METHOD_109 ( VAR_1177 , ( TYPE_34 ) VAR_1178 . VAR_1179 . VAR_1180 , VAR_1181 ) ; METHOD_110 ( VAR_1182 ) ; break ; } break ; } case VAR_1183 : { if ( ! METHOD_111 ( VAR_1184 , ( ( TYPE_35 * ) & VAR_1185 ) + 1 , VAR_1186 - 1 ) ) return VAR_1187 ; METHOD_112 ( VAR_1188 , VAR_1189 ) ; METHOD_113 ( VAR_1190 , VAR_1191 ) ; if ( VAR_1192 -> METHOD_114 ) VAR_1193 -> METHOD_115 ( VAR_1194 , VAR_1195 . VAR_1196 . VAR_1197 , VAR_1198 . VAR_1199 . VAR_1200 ) ; break ; } case VAR_1201 : { if ( ! METHOD_116 ( VAR_1202 , ( ( TYPE_36 * ) & VAR_1203 ) + 1 , VAR_1204 - 1 ) ) return VAR_1205 ; VAR_1206 -> VAR_1207 = METHOD_117 ( VAR_1208 . VAR_1209 . VAR_1210 ) ; VAR_1211 -> VAR_1212 = METHOD_118 ( VAR_1213 . VAR_1214 . VAR_1215 ) ; VAR_1216 -> VAR_1217 . VAR_1218 = VAR_1219 -> VAR_1220 . VAR_1221 = 0 ; VAR_1222 -> VAR_1223 . VAR_1224 = VAR_1225 -> VAR_1226 ; VAR_1227 -> VAR_1228 . VAR_1229 = VAR_1230 -> VAR_1231 ; if ( ! VAR_1232 -> METHOD_119 ( VAR_1233 ) ) return VAR_1234 ; METHOD_120 ( VAR_1235 , 0 , 0 , VAR_1236 -> VAR_1237 , VAR_1238 -> VAR_1239 , VAR_1240 ) ; METHOD_121 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_1241 -> VAR_1242 , VAR_1243 -> VAR_1244 ) ; break ; } case VAR_1245 : { if ( ! METHOD_122 ( VAR_1246 , ( ( TYPE_37 * ) & VAR_1247 ) + 1 , VAR_1248 - 1 ) ) return VAR_1249 ; VAR_1250 -> VAR_1251 = METHOD_123 ( VAR_1252 . VAR_1253 . VAR_1254 ) ; VAR_1255 -> VAR_1256 = METHOD_124 ( VAR_1257 . VAR_1258 . VAR_1259 ) ; VAR_1260 -> VAR_1261 . VAR_1262 = VAR_1263 -> VAR_1264 . VAR_1265 = 0 ; VAR_1266 -> VAR_1267 . VAR_1268 = VAR_1269 -> VAR_1270 ; VAR_1271 -> VAR_1272 . VAR_1273 = VAR_1274 -> VAR_1275 ; if ( ! VAR_1276 -> METHOD_125 ( VAR_1277 ) ) return VAR_1278 ; METHOD_126 ( VAR_1279 , 0 , 0 , VAR_1280 -> VAR_1281 , VAR_1282 -> VAR_1283 , VAR_1284 ) ; METHOD_127 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_1285 -> VAR_1286 , VAR_1287 -> VAR_1288 ) ; break ; } default : { TYPE_38 VAR_1289 = VAR_1290 ; VAR_1291 * VAR_1292 ; for ( VAR_1293 = VAR_1294 ; ! VAR_1295 && VAR_1296 ; VAR_1297 = VAR_1298 -> VAR_1299 ) if ( VAR_1300 -> METHOD_128 && VAR_1301 -> METHOD_129 ( VAR_1302 , & VAR_1303 ) ) VAR_1304 = VAR_1305 ; if ( ! VAR_1306 ) { TYPE_39 VAR_1307 [ 256 ] ; METHOD_130 ( ""Unknownmessagetype%dfromVNCserver\\n"" , VAR_1308 . VAR_1309 ) ; METHOD_131 ( VAR_1310 , VAR_1311 , 256 ) ; return VAR_1312 ; } } } return VAR_1313 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; if ( VAR_2 -> VAR_3 == - 1 ) VAR_4 -> VAR_5 -> VAR_6 = VAR_7 ; if ( ! METHOD_1 ( VAR_8 , ( TYPE_3 * ) & VAR_9 , 1 ) ) return VAR_10 ; switch ( VAR_11 . VAR_12 ) { case VAR_13 : { break ; } case VAR_14 : { TYPE_4 VAR_15 ; TYPE_5 VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; if ( ! METHOD_2 ( VAR_19 , ( ( TYPE_8 * ) & VAR_20 . VAR_21 ) + 1 , VAR_22 - 1 ) ) return VAR_23 ; VAR_24 . VAR_25 . VAR_26 = METHOD_3 ( VAR_27 . VAR_28 . VAR_29 ) ; for ( VAR_30 = 0 ; VAR_31 < VAR_32 . VAR_33 . VAR_34 ; VAR_35 ++ ) { if ( ! METHOD_4 ( VAR_36 , ( TYPE_9 * ) & VAR_37 , VAR_38 ) ) return VAR_39 ; VAR_40 . VAR_41 = METHOD_5 ( VAR_42 . VAR_43 ) ; if ( VAR_44 . VAR_45 == VAR_46 ) break ; VAR_47 . VAR_48 . VAR_49 = METHOD_6 ( VAR_50 . VAR_51 . VAR_52 ) ; VAR_53 . VAR_54 . VAR_55 = METHOD_7 ( VAR_56 . VAR_57 . VAR_58 ) ; VAR_59 . VAR_60 . VAR_61 = METHOD_8 ( VAR_62 . VAR_63 . VAR_64 ) ; VAR_65 . VAR_66 . VAR_67 = METHOD_9 ( VAR_68 . VAR_69 . VAR_70 ) ; if ( VAR_71 . VAR_72 == VAR_73 || VAR_74 . VAR_75 == VAR_76 ) { if ( ! METHOD_10 ( VAR_77 , VAR_78 . VAR_79 . VAR_80 , VAR_81 . VAR_82 . VAR_83 , VAR_84 . VAR_85 . VAR_86 , VAR_87 . VAR_88 . VAR_89 , VAR_90 . VAR_91 ) ) { return VAR_92 ; } continue ; } if ( VAR_93 . VAR_94 == VAR_95 ) { if ( ! VAR_96 -> METHOD_11 ( VAR_97 , VAR_98 . VAR_99 . VAR_100 , VAR_101 . VAR_102 . VAR_103 ) ) { return VAR_104 ; } continue ; } if ( VAR_105 . VAR_106 == VAR_107 ) { VAR_108 -> VAR_109 = 1 ; if ( VAR_110 -> METHOD_12 != VAR_111 ) VAR_112 -> METHOD_13 ( VAR_113 , VAR_114 . VAR_115 . VAR_116 , 0 ) ; VAR_117 -> VAR_118 = VAR_119 . VAR_120 . VAR_121 ; continue ; } if ( VAR_122 . VAR_123 == VAR_124 ) { VAR_125 -> VAR_126 = VAR_127 . VAR_128 . VAR_129 ; VAR_130 -> VAR_131 = VAR_132 . VAR_133 . VAR_134 ; VAR_135 -> VAR_136 . VAR_137 = VAR_138 -> VAR_139 . VAR_140 = 0 ; VAR_141 -> VAR_142 . VAR_143 = VAR_144 -> VAR_145 ; VAR_146 -> VAR_147 . VAR_148 = VAR_149 -> VAR_150 ; if ( ! VAR_151 -> METHOD_14 ( VAR_152 ) ) return VAR_153 ; METHOD_15 ( VAR_154 , 0 , 0 , VAR_155 . VAR_156 . VAR_157 , VAR_158 . VAR_159 . VAR_160 , VAR_161 ) ; METHOD_16 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_162 . VAR_163 . VAR_164 , VAR_165 . VAR_166 . VAR_167 ) ; continue ; } if ( VAR_168 . VAR_169 == VAR_170 ) { TYPE_10 VAR_171 ; if ( ! METHOD_17 ( VAR_172 , ( TYPE_11 * ) & VAR_173 -> VAR_174 , VAR_175 ) ) return VAR_176 ; METHOD_18 ( ""client2serversupportedmessages(bitflags)\\n"" ) ; for ( VAR_177 = 0 ; VAR_178 < 32 ; VAR_179 += 8 ) METHOD_19 ( ""%02X:%04x%04x%04x%04x-%04x%04x%04x%04x\\n"" , VAR_180 , VAR_181 -> VAR_182 . VAR_183 [ VAR_184 ] , VAR_185 -> VAR_186 . VAR_187 [ VAR_188 + 1 ] , VAR_189 -> VAR_190 . VAR_191 [ VAR_192 + 2 ] , VAR_193 -> VAR_194 . VAR_195 [ VAR_196 + 3 ] , VAR_197 -> VAR_198 . VAR_199 [ VAR_200 + 4 ] , VAR_201 -> VAR_202 . VAR_203 [ VAR_204 + 5 ] , VAR_205 -> VAR_206 . VAR_207 [ VAR_208 + 6 ] , VAR_209 -> VAR_210 . VAR_211 [ VAR_212 + 7 ] ) ; METHOD_20 ( ""server2clientsupportedmessages(bitflags)\\n"" ) ; for ( VAR_213 = 0 ; VAR_214 < 32 ; VAR_215 += 8 ) METHOD_21 ( ""%02X:%04x%04x%04x%04x-%04x%04x%04x%04x\\n"" , VAR_216 , VAR_217 -> VAR_218 . VAR_219 [ VAR_220 ] , VAR_221 -> VAR_222 . VAR_223 [ VAR_224 + 1 ] , VAR_225 -> VAR_226 . VAR_227 [ VAR_228 + 2 ] , VAR_229 -> VAR_230 . VAR_231 [ VAR_232 + 3 ] , VAR_233 -> VAR_234 . VAR_235 [ VAR_236 + 4 ] , VAR_237 -> VAR_238 . VAR_239 [ VAR_240 + 5 ] , VAR_241 -> VAR_242 . VAR_243 [ VAR_244 + 6 ] , VAR_245 -> VAR_246 . VAR_247 [ VAR_248 + 7 ] ) ; continue ; } if ( VAR_249 . VAR_250 == VAR_251 ) { TYPE_12 * VAR_252 ; VAR_253 = METHOD_22 ( VAR_254 . VAR_255 . VAR_256 ) ; if ( ! METHOD_23 ( VAR_257 , VAR_258 , VAR_259 . VAR_260 . VAR_261 ) ) { METHOD_24 ( VAR_262 ) ; return VAR_263 ; } METHOD_25 ( VAR_264 ) ; continue ; } if ( VAR_265 . VAR_266 == VAR_267 ) { TYPE_13 * VAR_268 ; VAR_269 = METHOD_26 ( VAR_270 . VAR_271 . VAR_272 + 1 ) ; if ( ! METHOD_27 ( VAR_273 , VAR_274 , VAR_275 . VAR_276 . VAR_277 ) ) { METHOD_28 ( VAR_278 ) ; return VAR_279 ; } VAR_280 [ VAR_281 . VAR_282 . VAR_283 ] = 0 ; METHOD_29 ( ""ConnectedtoServer\\""%s\\""\\n"" , VAR_284 ) ; METHOD_30 ( VAR_285 ) ; continue ; } if ( VAR_286 . VAR_287 != VAR_288 ) { if ( ( VAR_289 . VAR_290 . VAR_291 + VAR_292 . VAR_293 . VAR_294 > VAR_295 -> VAR_296 ) || ( VAR_297 . VAR_298 . VAR_299 + VAR_300 . VAR_301 . VAR_302 > VAR_303 -> VAR_304 ) ) { METHOD_31 ( ""Recttoolarge:%dx%dat(%d,%d)\\n"" , VAR_305 . VAR_306 . VAR_307 , VAR_308 . VAR_309 . VAR_310 , VAR_311 . VAR_312 . VAR_313 , VAR_314 . VAR_315 . VAR_316 ) ; return VAR_317 ; } VAR_318 -> METHOD_32 ( VAR_319 , VAR_320 . VAR_321 . VAR_322 , VAR_323 . VAR_324 . VAR_325 , VAR_326 . VAR_327 . VAR_328 , VAR_329 . VAR_330 . VAR_331 ) ; } switch ( VAR_332 . VAR_333 ) { case VAR_334 : { TYPE_14 VAR_335 = VAR_336 . VAR_337 . VAR_338 , VAR_339 = VAR_340 . VAR_341 . VAR_342 ; VAR_343 = VAR_344 . VAR_345 . VAR_346 * VAR_347 -> VAR_348 . VAR_349 / 8 ; VAR_350 = VAR_351 ? ( VAR_352 / VAR_353 ) : 0 ; while ( VAR_354 && VAR_355 > 0 ) { if ( VAR_356 > VAR_357 ) VAR_358 = VAR_359 ; if ( ! METHOD_33 ( VAR_360 , VAR_361 -> VAR_362 , VAR_363 * VAR_364 ) ) return VAR_365 ; VAR_366 -> METHOD_34 ( VAR_367 , ( TYPE_15 * ) VAR_368 -> VAR_369 , VAR_370 . VAR_371 . VAR_372 , VAR_373 , VAR_374 . VAR_375 . VAR_376 , VAR_377 ) ; VAR_378 -= VAR_379 ; VAR_380 += VAR_381 ; } break ; } case VAR_382 : { TYPE_16 VAR_383 ; if ( ! METHOD_35 ( VAR_384 , ( TYPE_17 * ) & VAR_385 , VAR_386 ) ) return VAR_387 ; VAR_388 . VAR_389 = METHOD_36 ( VAR_390 . VAR_391 ) ; VAR_392 . VAR_393 = METHOD_37 ( VAR_394 . VAR_395 ) ; VAR_396 -> METHOD_38 ( VAR_397 , VAR_398 . VAR_399 , VAR_400 . VAR_401 , VAR_402 . VAR_403 . VAR_404 , VAR_405 . VAR_406 . VAR_407 ) ; VAR_408 -> METHOD_39 ( VAR_409 , VAR_410 . VAR_411 , VAR_412 . VAR_413 , VAR_414 . VAR_415 . VAR_416 , VAR_417 . VAR_418 . VAR_419 , VAR_420 . VAR_421 . VAR_422 , VAR_423 . VAR_424 . VAR_425 ) ; break ; } case VAR_426 : { switch ( VAR_427 -> VAR_428 . VAR_429 ) { case 8 : if ( ! METHOD_40 ( VAR_430 , VAR_431 . VAR_432 . VAR_433 , VAR_434 . VAR_435 . VAR_436 , VAR_437 . VAR_438 . VAR_439 , VAR_440 . VAR_441 . VAR_442 ) ) return VAR_443 ; break ; case 16 : if ( ! METHOD_41 ( VAR_444 , VAR_445 . VAR_446 . VAR_447 , VAR_448 . VAR_449 . VAR_450 , VAR_451 . VAR_452 . VAR_453 , VAR_454 . VAR_455 . VAR_456 ) ) return VAR_457 ; break ; case 32 : if ( ! METHOD_42 ( VAR_458 , VAR_459 . VAR_460 . VAR_461 , VAR_462 . VAR_463 . VAR_464 , VAR_465 . VAR_466 . VAR_467 , VAR_468 . VAR_469 . VAR_470 ) ) return VAR_471 ; break ; } break ; } case VAR_472 : { switch ( VAR_473 -> VAR_474 . VAR_475 ) { case 8 : if ( ! METHOD_43 ( VAR_476 , VAR_477 . VAR_478 . VAR_479 , VAR_480 . VAR_481 . VAR_482 , VAR_483 . VAR_484 . VAR_485 , VAR_486 . VAR_487 . VAR_488 ) ) return VAR_489 ; break ; case 16 : if ( ! METHOD_44 ( VAR_490 , VAR_491 . VAR_492 . VAR_493 , VAR_494 . VAR_495 . VAR_496 , VAR_497 . VAR_498 . VAR_499 , VAR_500 . VAR_501 . VAR_502 ) ) return VAR_503 ; break ; case 32 : if ( ! METHOD_45 ( VAR_504 , VAR_505 . VAR_506 . VAR_507 , VAR_508 . VAR_509 . VAR_510 , VAR_511 . VAR_512 . VAR_513 , VAR_514 . VAR_515 . VAR_516 ) ) return VAR_517 ; break ; } break ; } case VAR_518 : { switch ( VAR_519 -> VAR_520 . VAR_521 ) { case 8 : if ( ! METHOD_46 ( VAR_522 , VAR_523 . VAR_524 . VAR_525 , VAR_526 . VAR_527 . VAR_528 , VAR_529 . VAR_530 . VAR_531 , VAR_532 . VAR_533 . VAR_534 ) ) return VAR_535 ; break ; case 16 : if ( ! METHOD_47 ( VAR_536 , VAR_537 . VAR_538 . VAR_539 , VAR_540 . VAR_541 . VAR_542 , VAR_543 . VAR_544 . VAR_545 , VAR_546 . VAR_547 . VAR_548 ) ) return VAR_549 ; break ; case 32 : if ( ! METHOD_48 ( VAR_550 , VAR_551 . VAR_552 . VAR_553 , VAR_554 . VAR_555 . VAR_556 , VAR_557 . VAR_558 . VAR_559 , VAR_560 . VAR_561 . VAR_562 ) ) return VAR_563 ; break ; } break ; } case VAR_564 : { switch ( VAR_565 -> VAR_566 . VAR_567 ) { case 8 : if ( ! METHOD_49 ( VAR_568 , VAR_569 . VAR_570 . VAR_571 , VAR_572 . VAR_573 . VAR_574 , VAR_575 . VAR_576 . VAR_577 , VAR_578 . VAR_579 . VAR_580 ) ) return VAR_581 ; break ; case 16 : if ( ! METHOD_50 ( VAR_582 , VAR_583 . VAR_584 . VAR_585 , VAR_586 . VAR_587 . VAR_588 , VAR_589 . VAR_590 . VAR_591 , VAR_592 . VAR_593 . VAR_594 ) ) return VAR_595 ; break ; case 32 : if ( ! METHOD_51 ( VAR_596 , VAR_597 . VAR_598 . VAR_599 , VAR_600 . VAR_601 . VAR_602 , VAR_603 . VAR_604 . VAR_605 , VAR_606 . VAR_607 . VAR_608 ) ) return VAR_609 ; break ; } break ; } case VAR_610 : { switch ( VAR_611 -> VAR_612 . VAR_613 ) { case 8 : if ( ! METHOD_52 ( VAR_614 , VAR_615 . VAR_616 . VAR_617 , VAR_618 . VAR_619 . VAR_620 , VAR_621 . VAR_622 . VAR_623 , VAR_624 . VAR_625 . VAR_626 ) ) return VAR_627 ; break ; case 16 : if ( ! METHOD_53 ( VAR_628 , VAR_629 . VAR_630 . VAR_631 , VAR_632 . VAR_633 . VAR_634 , VAR_635 . VAR_636 . VAR_637 , VAR_638 . VAR_639 . VAR_640 ) ) return VAR_641 ; break ; case 32 : if ( ! METHOD_54 ( VAR_642 , VAR_643 . VAR_644 . VAR_645 , VAR_646 . VAR_647 . VAR_648 , VAR_649 . VAR_650 . VAR_651 , VAR_652 . VAR_653 . VAR_654 ) ) return VAR_655 ; break ; } break ; } case VAR_656 : { switch ( VAR_657 -> VAR_658 . VAR_659 ) { case 8 : if ( ! METHOD_55 ( VAR_660 , VAR_661 . VAR_662 . VAR_663 , VAR_664 . VAR_665 . VAR_666 , VAR_667 . VAR_668 . VAR_669 , VAR_670 . VAR_671 . VAR_672 ) ) return VAR_673 ; break ; case 16 : if ( VAR_674 -> VAR_675 . VAR_676 . VAR_677 > 0x1F ) { if ( ! METHOD_56 ( VAR_678 , VAR_679 . VAR_680 . VAR_681 , VAR_682 . VAR_683 . VAR_684 , VAR_685 . VAR_686 . VAR_687 , VAR_688 . VAR_689 . VAR_690 ) ) return VAR_691 ; } else { if ( ! METHOD_57 ( VAR_692 , VAR_693 . VAR_694 . VAR_695 , VAR_696 . VAR_697 . VAR_698 , VAR_699 . VAR_700 . VAR_701 , VAR_702 . VAR_703 . VAR_704 ) ) return VAR_705 ; } break ; case 32 : { TYPE_18 VAR_706 = ( VAR_707 -> VAR_708 . VAR_709 << VAR_710 -> VAR_711 . VAR_712 ) | ( VAR_713 -> VAR_714 . VAR_715 << VAR_716 -> VAR_717 . VAR_718 ) | ( VAR_719 -> VAR_720 . VAR_721 << VAR_722 -> VAR_723 . VAR_724 ) ; if ( ( VAR_725 -> VAR_726 . VAR_727 && ( VAR_728 & 0xff ) == 0 ) || ( ! VAR_729 -> VAR_730 . VAR_731 && ( VAR_732 & 0xff000000 ) == 0 ) ) { if ( ! METHOD_58 ( VAR_733 , VAR_734 . VAR_735 . VAR_736 , VAR_737 . VAR_738 . VAR_739 , VAR_740 . VAR_741 . VAR_742 , VAR_743 . VAR_744 . VAR_745 ) ) return VAR_746 ; } else if ( ! VAR_747 -> VAR_748 . VAR_749 && ( VAR_750 & 0xff ) == 0 ) { if ( ! METHOD_59 ( VAR_751 , VAR_752 . VAR_753 . VAR_754 , VAR_755 . VAR_756 . VAR_757 , VAR_758 . VAR_759 . VAR_760 , VAR_761 . VAR_762 . VAR_763 ) ) return VAR_764 ; } else if ( VAR_765 -> VAR_766 . VAR_767 && ( VAR_768 & 0xff000000 ) == 0 ) { if ( ! METHOD_60 ( VAR_769 , VAR_770 . VAR_771 . VAR_772 , VAR_773 . VAR_774 . VAR_775 , VAR_776 . VAR_777 . VAR_778 , VAR_779 . VAR_780 . VAR_781 ) ) return VAR_782 ; } else if ( ! METHOD_61 ( VAR_783 , VAR_784 . VAR_785 . VAR_786 , VAR_787 . VAR_788 . VAR_789 , VAR_790 . VAR_791 . VAR_792 , VAR_793 . VAR_794 . VAR_795 ) ) return VAR_796 ; break ; } } break ; } TYPE_19 TYPE_20 case VAR_797 : { switch ( VAR_798 -> VAR_799 . VAR_800 ) { case 8 : if ( ! METHOD_62 ( VAR_801 , VAR_802 . VAR_803 . VAR_804 , VAR_805 . VAR_806 . VAR_807 , VAR_808 . VAR_809 . VAR_810 , VAR_811 . VAR_812 . VAR_813 ) ) return VAR_814 ; break ; case 16 : if ( ! METHOD_63 ( VAR_815 , VAR_816 . VAR_817 . VAR_818 , VAR_819 . VAR_820 . VAR_821 , VAR_822 . VAR_823 . VAR_824 , VAR_825 . VAR_826 . VAR_827 ) ) return VAR_828 ; break ; case 32 : if ( ! METHOD_64 ( VAR_829 , VAR_830 . VAR_831 . VAR_832 , VAR_833 . VAR_834 . VAR_835 , VAR_836 . VAR_837 . VAR_838 , VAR_839 . VAR_840 . VAR_841 ) ) return VAR_842 ; break ; } break ; } TYPE_21 TYPE_22 case VAR_843 : { switch ( VAR_844 -> VAR_845 . VAR_846 ) { case 8 : if ( ! METHOD_65 ( VAR_847 , VAR_848 . VAR_849 . VAR_850 , VAR_851 . VAR_852 . VAR_853 , VAR_854 . VAR_855 . VAR_856 , VAR_857 . VAR_858 . VAR_859 ) ) return VAR_860 ; break ; case 16 : if ( ! METHOD_66 ( VAR_861 , VAR_862 . VAR_863 . VAR_864 , VAR_865 . VAR_866 . VAR_867 , VAR_868 . VAR_869 . VAR_870 , VAR_871 . VAR_872 . VAR_873 ) ) return VAR_874 ; break ; case 32 : if ( ! METHOD_67 ( VAR_875 , VAR_876 . VAR_877 . VAR_878 , VAR_879 . VAR_880 . VAR_881 , VAR_882 . VAR_883 . VAR_884 , VAR_885 . VAR_886 . VAR_887 ) ) return VAR_888 ; break ; } break ; } case VAR_889 : VAR_890 -> VAR_891 . VAR_892 = 9 ; case VAR_893 : { switch ( VAR_894 -> VAR_895 . VAR_896 ) { case 8 : if ( ! METHOD_68 ( VAR_897 , VAR_898 . VAR_899 . VAR_900 , VAR_901 . VAR_902 . VAR_903 , VAR_904 . VAR_905 . VAR_906 , VAR_907 . VAR_908 . VAR_909 ) ) return VAR_910 ; break ; case 16 : if ( VAR_911 -> VAR_912 . VAR_913 . VAR_914 > 0x1F ) { if ( ! METHOD_69 ( VAR_915 , VAR_916 . VAR_917 . VAR_918 , VAR_919 . VAR_920 . VAR_921 , VAR_922 . VAR_923 . VAR_924 , VAR_925 . VAR_926 . VAR_927 ) ) return VAR_928 ; } else { if ( ! METHOD_70 ( VAR_929 , VAR_930 . VAR_931 . VAR_932 , VAR_933 . VAR_934 . VAR_935 , VAR_936 . VAR_937 . VAR_938 , VAR_939 . VAR_940 . VAR_941 ) ) return VAR_942 ; } break ; case 32 : { TYPE_23 VAR_943 = ( VAR_944 -> VAR_945 . VAR_946 << VAR_947 -> VAR_948 . VAR_949 ) | ( VAR_950 -> VAR_951 . VAR_952 << VAR_953 -> VAR_954 . VAR_955 ) | ( VAR_956 -> VAR_957 . VAR_958 << VAR_959 -> VAR_960 . VAR_961 ) ; if ( ( VAR_962 -> VAR_963 . VAR_964 && ( VAR_965 & 0xff ) == 0 ) || ( ! VAR_966 -> VAR_967 . VAR_968 && ( VAR_969 & 0xff000000 ) == 0 ) ) { if ( ! METHOD_71 ( VAR_970 , VAR_971 . VAR_972 . VAR_973 , VAR_974 . VAR_975 . VAR_976 , VAR_977 . VAR_978 . VAR_979 , VAR_980 . VAR_981 . VAR_982 ) ) return VAR_983 ; } else if ( ! VAR_984 -> VAR_985 . VAR_986 && ( VAR_987 & 0xff ) == 0 ) { if ( ! METHOD_72 ( VAR_988 , VAR_989 . VAR_990 . VAR_991 , VAR_992 . VAR_993 . VAR_994 , VAR_995 . VAR_996 . VAR_997 , VAR_998 . VAR_999 . VAR_1000 ) ) return VAR_1001 ; } else if ( VAR_1002 -> VAR_1003 . VAR_1004 && ( VAR_1005 & 0xff000000 ) == 0 ) { if ( ! METHOD_73 ( VAR_1006 , VAR_1007 . VAR_1008 . VAR_1009 , VAR_1010 . VAR_1011 . VAR_1012 , VAR_1013 . VAR_1014 . VAR_1015 , VAR_1016 . VAR_1017 . VAR_1018 ) ) return VAR_1019 ; } else if ( ! METHOD_74 ( VAR_1020 , VAR_1021 . VAR_1022 . VAR_1023 , VAR_1024 . VAR_1025 . VAR_1026 , VAR_1027 . VAR_1028 . VAR_1029 , VAR_1030 . VAR_1031 . VAR_1032 ) ) return VAR_1033 ; break ; } } break ; } default : { TYPE_24 VAR_1034 = VAR_1035 ; VAR_1036 * VAR_1037 ; for ( VAR_1038 = VAR_1039 ; ! VAR_1040 && VAR_1041 ; VAR_1042 = VAR_1043 -> VAR_1044 ) if ( VAR_1045 -> METHOD_75 && VAR_1046 -> METHOD_76 ( VAR_1047 , & VAR_1048 ) ) VAR_1049 = VAR_1050 ; if ( ! VAR_1051 ) { METHOD_77 ( ""Unknownrectencoding%d\\n"" , ( TYPE_25 ) VAR_1052 . VAR_1053 ) ; return VAR_1054 ; } } } VAR_1055 -> METHOD_78 ( VAR_1056 ) ; VAR_1057 -> METHOD_79 ( VAR_1058 , VAR_1059 . VAR_1060 . VAR_1061 , VAR_1062 . VAR_1063 . VAR_1064 , VAR_1065 . VAR_1066 . VAR_1067 , VAR_1068 . VAR_1069 . VAR_1070 ) ; } if ( ! METHOD_80 ( VAR_1071 ) ) return VAR_1072 ; if ( VAR_1073 -> METHOD_81 ) VAR_1074 -> METHOD_82 ( VAR_1075 ) ; break ; } case VAR_1076 : { VAR_1077 -> METHOD_83 ( VAR_1078 ) ; break ; } case VAR_1079 : { TYPE_26 * VAR_1080 ; if ( ! METHOD_84 ( VAR_1081 , ( ( TYPE_27 * ) & VAR_1082 ) + 1 , VAR_1083 - 1 ) ) return VAR_1084 ; VAR_1085 . VAR_1086 . VAR_1087 = METHOD_85 ( VAR_1088 . VAR_1089 . VAR_1090 ) ; if ( VAR_1091 . VAR_1092 . VAR_1093 > 1 << 20 ) { METHOD_86 ( ""Ignoringtoobigcuttextlengthsentbyserver:%uB>1MB\\n"" , ( unsigned TYPE_28 ) VAR_1094 . VAR_1095 . VAR_1096 ) ; return VAR_1097 ; } VAR_1098 = METHOD_87 ( VAR_1099 . VAR_1100 . VAR_1101 + 1 ) ; if ( ! METHOD_88 ( VAR_1102 , VAR_1103 , VAR_1104 . VAR_1105 . VAR_1106 ) ) { METHOD_89 ( VAR_1107 ) ; return VAR_1108 ; } VAR_1109 [ VAR_1110 . VAR_1111 . VAR_1112 ] = 0 ; if ( VAR_1113 -> METHOD_90 ) VAR_1114 -> METHOD_91 ( VAR_1115 , VAR_1116 , VAR_1117 . VAR_1118 . VAR_1119 ) ; METHOD_92 ( VAR_1120 ) ; break ; } case VAR_1121 : { TYPE_29 * VAR_1122 = VAR_1123 ; if ( ! METHOD_93 ( VAR_1124 , ( ( TYPE_30 * ) & VAR_1125 ) + 1 , VAR_1126 - 1 ) ) return VAR_1127 ; VAR_1128 . VAR_1129 . VAR_1130 = METHOD_94 ( VAR_1131 . VAR_1132 . VAR_1133 ) ; switch ( VAR_1134 . VAR_1135 . VAR_1136 ) { case VAR_1137 : METHOD_95 ( ""ReceivedTextChatOpen\\n"" ) ; if ( VAR_1138 -> METHOD_96 != VAR_1139 ) VAR_1140 -> METHOD_97 ( VAR_1141 , ( TYPE_31 ) VAR_1142 , VAR_1143 ) ; break ; case VAR_1144 : METHOD_98 ( ""ReceivedTextChatClose\\n"" ) ; if ( VAR_1145 -> METHOD_99 != VAR_1146 ) VAR_1147 -> METHOD_100 ( VAR_1148 , ( TYPE_32 ) VAR_1149 , VAR_1150 ) ; break ; case VAR_1151 : METHOD_101 ( ""ReceivedTextChatFinished\\n"" ) ; if ( VAR_1152 -> METHOD_102 != VAR_1153 ) VAR_1154 -> METHOD_103 ( VAR_1155 , ( TYPE_33 ) VAR_1156 , VAR_1157 ) ; break ; default : if ( VAR_1308 . VAR_1179 . VAR_1180 > VAR_1315 ) return VAR_1312 ; VAR_1158 = METHOD_104 ( VAR_1159 . VAR_1160 . VAR_1161 + 1 ) ; if ( ! METHOD_105 ( VAR_1162 , VAR_1163 , VAR_1164 . VAR_1165 . VAR_1166 ) ) { METHOD_106 ( VAR_1167 ) ; return VAR_1168 ; } VAR_1169 [ VAR_1170 . VAR_1171 . VAR_1172 ] = 0 ; METHOD_107 ( ""ReceivedTextChat\\""%s\\""\\n"" , VAR_1173 ) ; if ( VAR_1174 -> METHOD_108 != VAR_1175 ) VAR_1176 -> METHOD_109 ( VAR_1177 , ( TYPE_34 ) VAR_1178 . VAR_1179 . VAR_1180 , VAR_1181 ) ; METHOD_110 ( VAR_1182 ) ; break ; } break ; } case VAR_1183 : { if ( ! METHOD_111 ( VAR_1184 , ( ( TYPE_35 * ) & VAR_1185 ) + 1 , VAR_1186 - 1 ) ) return VAR_1187 ; METHOD_112 ( VAR_1188 , VAR_1189 ) ; METHOD_113 ( VAR_1190 , VAR_1191 ) ; if ( VAR_1192 -> METHOD_114 ) VAR_1193 -> METHOD_115 ( VAR_1194 , VAR_1195 . VAR_1196 . VAR_1197 , VAR_1198 . VAR_1199 . VAR_1200 ) ; break ; } case VAR_1201 : { if ( ! METHOD_116 ( VAR_1202 , ( ( TYPE_36 * ) & VAR_1203 ) + 1 , VAR_1204 - 1 ) ) return VAR_1205 ; VAR_1206 -> VAR_1207 = METHOD_117 ( VAR_1208 . VAR_1209 . VAR_1210 ) ; VAR_1211 -> VAR_1212 = METHOD_118 ( VAR_1213 . VAR_1214 . VAR_1215 ) ; VAR_1216 -> VAR_1217 . VAR_1218 = VAR_1219 -> VAR_1220 . VAR_1221 = 0 ; VAR_1222 -> VAR_1223 . VAR_1224 = VAR_1225 -> VAR_1226 ; VAR_1227 -> VAR_1228 . VAR_1229 = VAR_1230 -> VAR_1231 ; if ( ! VAR_1232 -> METHOD_119 ( VAR_1233 ) ) return VAR_1234 ; METHOD_120 ( VAR_1235 , 0 , 0 , VAR_1236 -> VAR_1237 , VAR_1238 -> VAR_1239 , VAR_1240 ) ; METHOD_121 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_1241 -> VAR_1242 , VAR_1243 -> VAR_1244 ) ; break ; } case VAR_1245 : { if ( ! METHOD_122 ( VAR_1246 , ( ( TYPE_37 * ) & VAR_1247 ) + 1 , VAR_1248 - 1 ) ) return VAR_1249 ; VAR_1250 -> VAR_1251 = METHOD_123 ( VAR_1252 . VAR_1253 . VAR_1254 ) ; VAR_1255 -> VAR_1256 = METHOD_124 ( VAR_1257 . VAR_1258 . VAR_1259 ) ; VAR_1260 -> VAR_1261 . VAR_1262 = VAR_1263 -> VAR_1264 . VAR_1265 = 0 ; VAR_1266 -> VAR_1267 . VAR_1268 = VAR_1269 -> VAR_1270 ; VAR_1271 -> VAR_1272 . VAR_1273 = VAR_1274 -> VAR_1275 ; if ( ! VAR_1276 -> METHOD_125 ( VAR_1277 ) ) return VAR_1278 ; METHOD_126 ( VAR_1279 , 0 , 0 , VAR_1280 -> VAR_1281 , VAR_1282 -> VAR_1283 , VAR_1284 ) ; METHOD_127 ( ""Gotnewframebuffersize:%dx%d\\n"" , VAR_1285 -> VAR_1286 , VAR_1287 -> VAR_1288 ) ; break ; } default : { TYPE_38 VAR_1289 = VAR_1290 ; VAR_1291 * VAR_1292 ; for ( VAR_1293 = VAR_1294 ; ! VAR_1295 && VAR_1296 ; VAR_1297 = VAR_1298 -> VAR_1299 ) if ( VAR_1300 -> METHOD_128 && VAR_1301 -> METHOD_129 ( VAR_1302 , & VAR_1303 ) ) VAR_1304 = VAR_1305 ; if ( ! VAR_1306 ) { TYPE_39 VAR_1307 [ 256 ] ; METHOD_130 ( ""Unknownmessagetype%dfromVNCserver\\n"" , VAR_1308 . VAR_1309 ) ; METHOD_131 ( VAR_1310 , VAR_1311 , 256 ) ; return VAR_1312 ; } } } return VAR_1313 ; }",92
93,"TYPE_0 METHOD_0 ( ) { TYPE_1 VAR_0 = METHOD_1 ( ""Nokogiri"" ) ; TYPE_2 VAR_1 = METHOD_2 ( VAR_2 , ""XML"" ) ; TYPE_3 VAR_3 = METHOD_3 ( VAR_4 , ""RelaxNG"" , VAR_5 ) ; VAR_6 = VAR_7 ;  METHOD_4 ( VAR_8 , ""read_memory"" , VAR_9 , 1 ) ;   METHOD_5 ( VAR_10 , ""from_document"" , VAR_11 , 1 ) ;  METHOD_6 ( VAR_12 , ""validate_document"" , VAR_13 , 1 ) ; }","TYPE_0 METHOD_0 ( ) { TYPE_1 VAR_0 = METHOD_1 ( ""Nokogiri"" ) ; TYPE_2 VAR_1 = METHOD_2 ( VAR_2 , ""XML"" ) ; TYPE_3 VAR_3 = METHOD_3 ( VAR_4 , ""RelaxNG"" , VAR_5 ) ; VAR_6 = VAR_7 ; METHOD_4 ( VAR_8 , ""read_memory"" , VAR_9 , - 1 ) ; METHOD_5 ( VAR_10 , ""from_document"" , VAR_11 , - 1 ) ; METHOD_6 ( VAR_12 , ""validate_document"" , VAR_13 , 1 ) ; }",93
94," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 )  { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ;  TYPE_4 * VAR_3 ;  TYPE_5 * VAR_4 ; TYPE_6 * VAR_5 ; TYPE_7 * VAR_6 ; TYPE_8 * VAR_7 ; TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ;  TYPE_11 VAR_10 ;  VAR_11 = METHOD_1 ( VAR_12 -> VAR_13 , 8 ) ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , 2 ) ;  for ( VAR_17 = 0 ; VAR_18 < VAR_19 >> 1 ; VAR_20 ++ )  {  VAR_21 = VAR_22 -> VAR_23 -> VAR_24 [ 1 ] + VAR_25 * ( VAR_26 >> 1 ) ;   VAR_27 = VAR_28 -> VAR_29 -> VAR_30 [ 2 ] + VAR_31 * ( VAR_32 >> 1 ) ;   VAR_33 = ( TYPE_12 * ) VAR_34 -> VAR_35 -> VAR_36 [ 1 ] + ( VAR_37 << 1 ) * VAR_38 ;   VAR_39 = VAR_40 + VAR_41 ;   VAR_42 = ( TYPE_13 * ) VAR_43 -> VAR_44 -> VAR_45 [ 2 ] + ( VAR_46 << 1 ) * VAR_47 ;   VAR_48 = VAR_49 + VAR_50 ;  for ( VAR_51 = 0 ; VAR_52 < VAR_53 >> 1 ; VAR_54 ++ ) { * VAR_55 ++ = ( TYPE_14 ) ( ( ( TYPE_15 ) * VAR_56 + ( TYPE_16 ) * ( VAR_57 + 1 ) + ( TYPE_17 ) * VAR_58 + ( TYPE_18 ) * ( VAR_59 + 1 ) ) >> 2 ) ; * VAR_60 ++ = ( TYPE_19 ) ( ( ( TYPE_20 ) * VAR_61 + ( TYPE_21 ) * ( VAR_62 + 1 ) + ( TYPE_22 ) * VAR_63 + ( TYPE_23 ) * ( VAR_64 + 1 ) ) >> 2 ) ; VAR_65 += 2 ; VAR_66 += 2 ; VAR_67 += 2 ; VAR_68 += 2 ; } }  } ","static TYPE_24 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 * VAR_5 ; TYPE_7 * VAR_6 ; TYPE_8 * VAR_7 ; TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 -> VAR_13 , 8 ) ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 , 2 ) ; if ( VAR_19 == 0 ) return VAR_69 ; if ( VAR_53 > VAR_43 -> VAR_44 -> VAR_70 / VAR_19 ) return VAR_69 ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 >> 1 ; VAR_20 ++ ) { TYPE_19 * VAR_21 = VAR_22 -> VAR_23 -> VAR_24 [ 1 ] + VAR_25 * ( VAR_26 >> 1 ) ; TYPE_19 * VAR_27 = VAR_28 -> VAR_29 -> VAR_30 [ 2 ] + VAR_31 * ( VAR_32 >> 1 ) ; const TYPE_13 * VAR_33 = ( TYPE_12 * ) VAR_34 -> VAR_35 -> VAR_36 [ 1 ] + ( VAR_37 << 1 ) * VAR_38 ; VAR_39 = VAR_40 + VAR_41 ; VAR_42 = ( TYPE_13 * ) VAR_43 -> VAR_44 -> VAR_45 [ 2 ] + ( VAR_46 << 1 ) * VAR_47 ; VAR_48 = VAR_49 + VAR_50 ; for ( VAR_51 = 0 ; VAR_52 < VAR_53 >> 1 ; VAR_54 ++ ) { * VAR_55 ++ = ( TYPE_14 ) ( ( ( TYPE_15 ) * VAR_56 + ( TYPE_16 ) * ( VAR_57 + 1 ) + ( TYPE_17 ) * VAR_58 + ( TYPE_18 ) * ( VAR_59 + 1 ) ) >> 2 ) ; * VAR_60 ++ = ( TYPE_19 ) ( ( ( TYPE_20 ) * VAR_61 + ( TYPE_21 ) * ( VAR_62 + 1 ) + ( TYPE_22 ) * VAR_63 + ( TYPE_23 ) * ( VAR_64 + 1 ) ) >> 2 ) ; VAR_65 += 2 ; VAR_66 += 2 ; VAR_67 += 2 ; VAR_68 += 2 ; } } return VAR_71 ; }",94
95,"static VAR_0 TYPE_0 * METHOD_0 ( unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 , const TYPE_4 VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 = 1.0 ; const TYPE_7 VAR_7 = VAR_8 ; TYPE_8 VAR_9 ; unsigned TYPE_9 VAR_10 ; TYPE_10 * VAR_11 ; if ( VAR_12 < 1.0 ) { VAR_13 = VAR_14 / VAR_15 ; VAR_16 = VAR_17 ; } else { VAR_18 = VAR_19 ; } VAR_20 = 2 * ( TYPE_11 ) METHOD_1 ( VAR_21 ) + 1 ; VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { const TYPE_12 VAR_29 = ( TYPE_13 ) VAR_30 / VAR_31 ; register TYPE_14 VAR_32 = METHOD_3 ( 0 , ( TYPE_15 ) METHOD_4 ( VAR_33 - VAR_34 ) ) ; TYPE_16 VAR_35 = METHOD_5 ( ( TYPE_17 ) METHOD_6 ( VAR_36 + VAR_37 ) , ( TYPE_18 ) VAR_38 - 1 ) ; TYPE_19 VAR_39 = 0.0 ;  TYPE_20 VAR_40 ;  VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 [ VAR_48 ] . VAR_49 = VAR_50 ; if ( VAR_51 - VAR_52 + 1 > VAR_53 ) { if ( VAR_54 < ( ( TYPE_21 ) VAR_55 - 1 / 2 ) ) { VAR_56 ++ ; } else { VAR_57 -- ; } }  for ( VAR_58 = VAR_59 ; VAR_60 <= VAR_61 ; VAR_62 ++ ) {   VAR_63 += ( VAR_64 -> VAR_65 [ VAR_66 ] . VAR_67 [ VAR_68 - VAR_69 ] = VAR_70 * ( * VAR_71 ) ( VAR_72 * ( VAR_73 - ( TYPE_22 ) VAR_74 ) ) ) ;  } if ( VAR_75 < 0.0 ) { METHOD_7 ( VAR_76 ) ; return VAR_77 ; } if ( VAR_78 > 0.0 ) { for ( VAR_79 = VAR_80 ; VAR_81 <= VAR_82 ; VAR_83 ++ ) { VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 [ VAR_88 - VAR_89 ] /= VAR_90 ; } } } return VAR_91 ; }","static VAR_0 TYPE_0 * METHOD_0 ( unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 , const TYPE_4 VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 = 1.0 ; const TYPE_7 VAR_7 = VAR_8 ; TYPE_8 VAR_9 ; unsigned TYPE_9 VAR_10 ; TYPE_10 * VAR_11 ; if ( VAR_12 < 1.0 ) { VAR_13 = VAR_14 / VAR_15 ; VAR_16 = VAR_17 ; } else { VAR_18 = VAR_19 ; } VAR_20 = 2 * ( TYPE_11 ) METHOD_1 ( VAR_21 ) + 1 ; VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { const TYPE_12 VAR_29 = ( TYPE_13 ) VAR_30 / VAR_31 ; register TYPE_14 VAR_32 = METHOD_3 ( 0 , ( TYPE_15 ) METHOD_4 ( VAR_33 - VAR_34 ) ) ; TYPE_16 VAR_35 = METHOD_5 ( ( TYPE_17 ) METHOD_6 ( VAR_36 + VAR_37 ) , ( TYPE_18 ) VAR_38 - 1 ) ; TYPE_19 VAR_39 = 0.0 ; TYPE_20 VAR_40 ; VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 [ VAR_48 ] . VAR_49 = VAR_50 ; if ( VAR_51 - VAR_52 + 1 > VAR_53 ) { if ( VAR_54 < ( ( TYPE_21 ) VAR_55 - 1 / 2 ) ) { VAR_56 ++ ; } else { VAR_57 -- ; } } for ( VAR_58 = VAR_59 ; VAR_60 <= VAR_61 ; VAR_62 ++ ) { VAR_63 += ( VAR_64 -> VAR_65 [ VAR_66 ] . VAR_67 [ VAR_68 - VAR_69 ] = VAR_70 * ( * VAR_71 ) ( VAR_72 * ( VAR_73 - ( TYPE_22 ) VAR_74 ) ) ) ; } if ( VAR_75 < 0.0 ) { METHOD_7 ( VAR_76 ) ; return VAR_77 ; } if ( VAR_78 > 0.0 ) { for ( VAR_79 = VAR_80 ; VAR_81 <= VAR_82 ; VAR_83 ++ ) { VAR_84 -> VAR_85 [ VAR_86 ] . VAR_44 = VAR_89 ; VAR_91 -> VAR_85 [ VAR_86 ] . VAR_49 = VAR_82 ; for ( VAR_88 = VAR_89 ; VAR_88 <= VAR_82 ; VAR_88 ++ ) { VAR_90 += ( VAR_91 -> VAR_85 [ VAR_86 ] . VAR_87 [ VAR_88 - VAR_89 ] /= VAR_90 ; } } } return VAR_91 ; }",95
96,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 . VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; if ( ! METHOD_1 ( VAR_7 ) || ! VAR_8 ) return ; VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ;  if ( METHOD_2 ( VAR_13 ) )  METHOD_3 ( VAR_14 , VAR_15 ) ;  } ","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 . VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; if ( ! METHOD_1 ( VAR_7 ) || ! VAR_8 ) return ; VAR_9 = & VAR_10 -> VAR_11 . VAR_12 ; if ( METHOD_2 ( VAR_13 ) ) METHOD_3 ( VAR_14 , VAR_15 ) ; METHOD_5 ( & VAR_10 -> VAR_11 . VAR_16 ) ; }",96
97,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 = VAR_2 ;  METHOD_1 ( VAR_3 ) ; if ( ! METHOD_2 ( VAR_4 ) ) {  TYPE_3 VAR_5 ;  TYPE_4 VAR_6 [ VAR_7 ] ; TYPE_5 VAR_8 ; VAR_9 = METHOD_3 ( VAR_10 , ""w"" ) ; if ( ! VAR_11 ) { METHOD_4 ( ""Erroropeningtheidfile\'%s\'--%s\\n"" , VAR_12 , VAR_13 ) ; return VAR_14 ; }  METHOD_5 ( VAR_15 , VAR_16 , ""%lu%d%lu"" , ( unsigned TYPE_6 ) METHOD_6 ( ) , METHOD_7 ( ) , METHOD_8 ( ) ) ;  METHOD_9 ( & VAR_17 ) ; METHOD_10 ( & VAR_18 , ( const TYPE_7 * ) VAR_19 , VAR_20 - 1 ) ; METHOD_11 ( & VAR_21 , ( TYPE_8 * ) VAR_22 ) ; METHOD_12 ( ( unsigned TYPE_9 * ) VAR_23 , 16 , VAR_24 . VAR_25 ) ;  METHOD_13 ( VAR_26 , ""%s"" , VAR_27 . VAR_28 ) ;  METHOD_14 ( ""NewMonitid:%s\\nStoredin\'%s\'\\n"" , VAR_29 . VAR_30 , VAR_31 ) ; } else { if ( ! METHOD_15 ( VAR_32 ) ) { METHOD_16 ( ""idfile\'%s\'isnotaregularfile\\n"" , VAR_33 ) ; return VAR_34 ; } if ( ( VAR_35 = METHOD_17 ( VAR_36 , ""r"" ) ) == ( TYPE_10 * ) VAR_37 ) { METHOD_18 ( ""Erroropeningtheidfile\'%s\'--%s\\n"" , VAR_38 , VAR_39 ) ; return VAR_40 ; } if ( METHOD_19 ( VAR_41 , ""%64s"" , VAR_42 . VAR_43 ) != 1 ) { METHOD_20 ( ""Errorreadingidfromfile\'%s\'\\n"" , VAR_44 ) ; if ( METHOD_21 ( VAR_45 ) ) METHOD_22 ( ""Errorclosingfile\'%s\'--%s\\n"" , VAR_46 , VAR_47 ) ; return VAR_48 ; } } if ( METHOD_23 ( VAR_49 ) ) METHOD_24 ( ""Errorclosingfile\'%s\'--%s\\n"" , VAR_50 , VAR_51 ) ; return VAR_52 . VAR_53 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; METHOD_1 ( VAR_3 ) ; if ( ! METHOD_2 ( VAR_4 ) ) { TYPE_3 VAR_5 ; TYPE_4 VAR_6 [ VAR_7 ] ; TYPE_5 VAR_8 ; VAR_9 = METHOD_3 ( VAR_10 , ""w"" ) ; if ( ! VAR_11 ) { METHOD_4 ( ""Erroropeningtheidfile\'%s\'--%s\\n"" , VAR_12 , VAR_13 ) ; return VAR_14 ; } METHOD_5 ( VAR_15 , VAR_16 , ""%lu%d%lu"" , ( unsigned TYPE_6 ) METHOD_6 ( ) , METHOD_7 ( ) , METHOD_8 ( ) ) ; METHOD_9 ( & VAR_17 ) ; METHOD_10 ( & VAR_18 , ( const TYPE_7 * ) VAR_19 , VAR_20 - 1 ) ; METHOD_11 ( & VAR_21 , ( TYPE_8 * ) VAR_22 ) ; METHOD_12 ( ( unsigned TYPE_9 * ) VAR_23 , 16 , VAR_24 . VAR_25 ) ; METHOD_13 ( VAR_26 , ""%s"" , Util_getToken ( VAR_52 . VAR_53 ) ) ; METHOD_14 ( ""NewMonitid:%s\\nStoredin\'%s\'\\n"" , VAR_29 . VAR_30 , VAR_31 ) ; } else { if ( ! METHOD_15 ( VAR_32 ) ) { METHOD_16 ( ""idfile\'%s\'isnotaregularfile\\n"" , VAR_33 ) ; return VAR_34 ; } if ( ( VAR_35 = METHOD_17 ( VAR_36 , ""r"" ) ) == ( TYPE_10 * ) VAR_37 ) { METHOD_18 ( ""Erroropeningtheidfile\'%s\'--%s\\n"" , VAR_38 , VAR_39 ) ; return VAR_40 ; } if ( METHOD_19 ( VAR_41 , ""%64s"" , VAR_42 . VAR_43 ) != 1 ) { METHOD_20 ( ""Errorreadingidfromfile\'%s\'\\n"" , VAR_44 ) ; if ( METHOD_21 ( VAR_45 ) ) METHOD_22 ( ""Errorclosingfile\'%s\'--%s\\n"" , VAR_46 , VAR_47 ) ; return VAR_48 ; } } if ( METHOD_23 ( VAR_49 ) ) METHOD_24 ( ""Errorclosingfile\'%s\'--%s\\n"" , VAR_50 , VAR_51 ) ; return VAR_52 . VAR_53 ; }",97
98,"TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * * VAR_2 ) { unsigned TYPE_3 VAR_3 , VAR_4 ; TYPE_4 VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_5 TYPE_6 VAR_11 ; TYPE_7 VAR_12 ; const unsigned TYPE_8 * VAR_13 ; TYPE_9 * VAR_14 , * VAR_15 , * VAR_16 , * * VAR_17 ; struct STRUCT_OR_UNION_1 * VAR_18 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; * VAR_19 = VAR_20 ; if ( VAR_21 < VAR_22 ) return VAR_23 ; VAR_24 = METHOD_1 ( VAR_25 ) ; VAR_26 = METHOD_2 ( VAR_27 ) ; if ( VAR_28 != 1 ) return VAR_29 ; VAR_30 = VAR_31 + VAR_32 ; VAR_33 = METHOD_3 ( VAR_34 , VAR_35 , VAR_36 , & VAR_37 , & VAR_38 ) ; if ( VAR_39 != VAR_40 ) return VAR_41 ; if ( VAR_42 + VAR_43 + VAR_44 > VAR_45 + VAR_46 ) { METHOD_4 ( VAR_47 ) ; return VAR_48 ; } VAR_49 += VAR_50 + VAR_51 ; VAR_52 = METHOD_5 ( VAR_53 * sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( ! VAR_54 ) { METHOD_6 ( VAR_55 ) ; return VAR_56 ; } VAR_57 = METHOD_7 ( ( VAR_58 + 1 ) * sizeof ( TYPE_10 * ) ) ; if ( ! VAR_59 ) { METHOD_8 ( VAR_60 ) ; METHOD_9 ( VAR_61 ) ; return VAR_62 ; } VAR_63 = 0 ; VAR_64 = 0 ; for ( VAR_65 = 0 ; VAR_66 < ( TYPE_11 ) VAR_67 ; VAR_68 ++ ) { VAR_69 = METHOD_10 ( VAR_70 , VAR_71 , VAR_72 , & VAR_73 , & VAR_74 ) ; if ( VAR_75 != VAR_76 ) break ; VAR_77 += VAR_78 ; if ( VAR_79 + VAR_80 > VAR_81 + VAR_82 ) { METHOD_11 ( VAR_83 ) ; VAR_84 = VAR_85 ; break ; } VAR_86 = METHOD_12 ( VAR_87 ) ; VAR_88 = METHOD_13 ( VAR_89 ) ; VAR_90 = METHOD_14 ( VAR_91 ) ;  VAR_92 += VAR_93 ;  if ( VAR_94 == VAR_95 && VAR_96 == VAR_97 && VAR_98 == sizeof ( struct STRUCT_OR_UNION_5 ) && METHOD_15 ( VAR_99 , VAR_100 ) == 0 ) { METHOD_16 ( & VAR_101 [ VAR_102 ] , VAR_103 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ; VAR_104 ++ ; VAR_105 = VAR_106 ; } if ( VAR_107 == VAR_108 && VAR_109 == VAR_110 ) { VAR_111 [ VAR_112 ] = VAR_113 ; VAR_114 ++ ; VAR_115 = METHOD_17 ( VAR_116 , VAR_117 , VAR_118 , & VAR_119 , & VAR_120 ) ; if ( VAR_121 != VAR_122 ) break ; METHOD_18 ( VAR_123 ) ; VAR_124 = VAR_125 ; } else METHOD_19 ( VAR_126 ) ; VAR_127 += VAR_128 ; if ( VAR_129 > VAR_130 + VAR_131 ) { VAR_132 = VAR_133 ; break ; } } if ( VAR_134 == VAR_135 && VAR_136 == 0 ) VAR_137 = VAR_138 ; if ( VAR_139 == VAR_140 ) { VAR_141 [ VAR_142 ] = VAR_143 ; STRUCT_OR_UNION_7 = METHOD_20 ( sizeof ( struct STRUCT_OR_UNION_8 ) ) ; if ( STRUCT_OR_UNION_9 ) { STRUCT_OR_UNION_10 -> VAR_144 = METHOD_21 ( ( VAR_145 + 1 ) * sizeof ( TYPE_12 * ) ) ; if ( STRUCT_OR_UNION_11 -> VAR_146 ) { STRUCT_OR_UNION_12 -> VAR_147 = VAR_148 ; STRUCT_OR_UNION_13 -> VAR_149 = VAR_150 ; STRUCT_OR_UNION_14 -> VAR_151 = VAR_152 ; STRUCT_OR_UNION_15 -> VAR_153 = sizeof ( struct STRUCT_OR_UNION_16 ) ; for ( VAR_154 = 0 ; VAR_155 < VAR_156 ; VAR_157 ++ ) STRUCT_OR_UNION_17 -> VAR_158 [ VAR_159 ] = ( TYPE_13 * ) & VAR_160 [ VAR_161 ] ; STRUCT_OR_UNION_18 -> VAR_162 [ VAR_163 ] = VAR_164 ; * VAR_165 = STRUCT_OR_UNION_19 ; return VAR_166 ; } METHOD_22 ( STRUCT_OR_UNION_20 ) ; } VAR_167 = VAR_168 ; } for ( VAR_169 = 0 ; VAR_170 < VAR_171 ; VAR_172 ++ ) METHOD_23 ( VAR_173 [ VAR_174 ] ) ; METHOD_24 ( VAR_175 ) ; METHOD_25 ( VAR_176 ) ; METHOD_26 ( VAR_177 ) ; return VAR_178 ; }","TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * * VAR_2 ) { unsigned TYPE_3 VAR_3 , VAR_4 ; TYPE_4 VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_5 TYPE_6 VAR_11 ; TYPE_7 VAR_12 ; const unsigned TYPE_8 * VAR_13 ; TYPE_9 * VAR_14 , * VAR_15 , * VAR_16 , * * VAR_17 ; struct STRUCT_OR_UNION_1 * VAR_18 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; * VAR_19 = VAR_20 ; if ( VAR_21 < VAR_22 ) return VAR_23 ; VAR_24 = METHOD_1 ( VAR_25 ) ; VAR_26 = METHOD_2 ( VAR_27 ) ; if ( VAR_28 != 1 ) return VAR_29 ; VAR_30 = VAR_31 + VAR_32 ; VAR_33 = METHOD_3 ( VAR_34 , VAR_35 , VAR_36 , & VAR_37 , & VAR_38 ) ; if ( VAR_39 != VAR_40 ) return VAR_41 ; if ( VAR_42 + VAR_43 + VAR_44 > VAR_45 + VAR_46 ) { METHOD_4 ( VAR_47 ) ; return VAR_48 ; } VAR_49 += VAR_50 + VAR_51 ; VAR_52 = METHOD_5 ( VAR_53 * sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( ! VAR_54 ) { METHOD_6 ( VAR_55 ) ; return VAR_56 ; } VAR_57 = METHOD_7 ( ( VAR_58 + 1 ) * sizeof ( TYPE_10 * ) ) ; if ( ! VAR_59 ) { METHOD_8 ( VAR_60 ) ; METHOD_9 ( VAR_61 ) ; return VAR_62 ; } VAR_63 = 0 ; VAR_64 = 0 ; for ( VAR_65 = 0 ; VAR_66 < ( TYPE_11 ) VAR_67 ; VAR_68 ++ ) { VAR_69 = METHOD_10 ( VAR_70 , VAR_71 , VAR_72 , & VAR_73 , & VAR_74 ) ; if ( VAR_75 != VAR_76 ) break ; VAR_77 += VAR_78 ; if ( VAR_79 + VAR_80 > VAR_81 + VAR_82 ) { METHOD_11 ( VAR_83 ) ; VAR_84 = VAR_85 ; break ; } VAR_86 = METHOD_12 ( VAR_87 ) ; VAR_88 = METHOD_13 ( VAR_89 ) ; VAR_90 = METHOD_14 ( VAR_91 ) ; VAR_92 += VAR_93 ; if ( VAR_129 + VAR_128 > VAR_130 + VAR_131 ) { METHOD_26 ( VAR_126 ) ; VAR_178 = VAR_133 ; break ; } if ( VAR_94 == VAR_95 && VAR_96 == VAR_97 && VAR_98 == sizeof ( struct STRUCT_OR_UNION_5 ) && METHOD_15 ( VAR_99 , VAR_100 ) == 0 ) { METHOD_16 ( & VAR_101 [ VAR_102 ] , VAR_103 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ; VAR_104 ++ ; VAR_105 = VAR_106 ; } if ( VAR_107 == VAR_108 && VAR_109 == VAR_110 ) { VAR_111 [ VAR_112 ] = VAR_113 ; VAR_114 ++ ; VAR_115 = METHOD_17 ( VAR_116 , VAR_117 , VAR_118 , & VAR_119 , & VAR_120 ) ; if ( VAR_121 != VAR_122 ) break ; METHOD_18 ( VAR_123 ) ; VAR_124 = VAR_125 ; } else METHOD_19 ( VAR_126 ) ; VAR_127 += VAR_128 ; if ( VAR_129 > VAR_130 + VAR_131 ) { VAR_132 = VAR_133 ; break ; } } if ( VAR_134 == VAR_135 && VAR_136 == 0 ) VAR_137 = VAR_138 ; if ( VAR_139 == VAR_140 ) { VAR_141 [ VAR_142 ] = VAR_143 ; STRUCT_OR_UNION_7 = METHOD_20 ( sizeof ( struct STRUCT_OR_UNION_8 ) ) ; if ( STRUCT_OR_UNION_9 ) { STRUCT_OR_UNION_10 -> VAR_144 = METHOD_21 ( ( VAR_145 + 1 ) * sizeof ( TYPE_12 * ) ) ; if ( STRUCT_OR_UNION_11 -> VAR_146 ) { STRUCT_OR_UNION_12 -> VAR_147 = VAR_148 ; STRUCT_OR_UNION_13 -> VAR_149 = VAR_150 ; STRUCT_OR_UNION_14 -> VAR_151 = VAR_152 ; STRUCT_OR_UNION_15 -> VAR_153 = sizeof ( struct STRUCT_OR_UNION_16 ) ; for ( VAR_154 = 0 ; VAR_155 < VAR_156 ; VAR_157 ++ ) STRUCT_OR_UNION_17 -> VAR_158 [ VAR_159 ] = ( TYPE_13 * ) & VAR_160 [ VAR_161 ] ; STRUCT_OR_UNION_18 -> VAR_162 [ VAR_163 ] = VAR_164 ; * VAR_165 = STRUCT_OR_UNION_19 ; return VAR_166 ; } METHOD_22 ( STRUCT_OR_UNION_20 ) ; } VAR_167 = VAR_168 ; } for ( VAR_169 = 0 ; VAR_170 < VAR_171 ; VAR_172 ++ ) METHOD_23 ( VAR_173 [ VAR_174 ] ) ; METHOD_24 ( VAR_175 ) ; METHOD_25 ( VAR_176 ) ; METHOD_26 ( VAR_177 ) ; return VAR_178 ; }",98
99,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) { struct STRUCT_OR_UNION_1 * VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 VAR_10 ; unsigned VAR_11 ; unsigned TYPE_6 VAR_12 ; struct STRUCT_OR_UNION_4 * VAR_13 ; struct STRUCT_OR_UNION_5 * VAR_14 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 ; TYPE_9 VAR_17 ; TYPE_10 VAR_18 ; TYPE_11 VAR_19 ;  VAR_20 . VAR_21 = METHOD_1 ( VAR_22 [ 0 ] ) ;  VAR_23 = METHOD_2 ( & VAR_24 ) ; if ( VAR_25 == VAR_26 ) { VAR_27 = METHOD_3 ( & VAR_28 ) ; VAR_29 ++ ; VAR_30 -= VAR_31 ; VAR_32 = METHOD_4 ( VAR_33 + METHOD_5 ( VAR_34 ) ) ; if ( METHOD_6 ( ! VAR_35 ) ) { VAR_36 -> VAR_37 . VAR_38 ++ ; return - VAR_39 ; } METHOD_7 ( VAR_40 , METHOD_8 ( VAR_41 ) ) ; METHOD_9 ( METHOD_10 ( VAR_42 , VAR_43 ) , VAR_44 , VAR_45 ) ; return METHOD_11 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 ) ; }  VAR_51 . VAR_52 = METHOD_12 ( VAR_53 [ 1 ] ) ;  VAR_54 += 2 ; VAR_55 -= VAR_56 ; if ( VAR_57 == VAR_58 ) { VAR_59 = METHOD_13 ( & VAR_60 ) ; VAR_61 = 0 ; } else { VAR_62 = 0 ; VAR_63 = METHOD_14 ( & VAR_64 ) ; } VAR_65 = METHOD_15 ( & VAR_66 ) ; VAR_67 = METHOD_16 ( & VAR_68 ) ;  METHOD_17 ( & VAR_69 -> VAR_70 , VAR_71 ) ;  VAR_72 = METHOD_18 ( VAR_73 , VAR_74 , VAR_75 ) ; if ( ! VAR_76 ) { VAR_77 = - VAR_78 ; goto VAR_79 ; } VAR_80 = METHOD_19 ( VAR_81 , VAR_82 ) ; if ( VAR_83 == VAR_84 ) { while ( VAR_85 -> VAR_86 >= VAR_87 ) { METHOD_20 ( list_first_entry ( & VAR_88 -> VAR_89 , struct STRUCT_OR_UNION_6 , VAR_90 ) ) ; VAR_91 -> VAR_92 -- ; } VAR_93 = METHOD_21 ( VAR_94 , VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; if ( VAR_101 == VAR_102 ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } VAR_106 -> VAR_107 ++ ; } else { if ( METHOD_22 ( VAR_108 , VAR_109 , VAR_110 ) || VAR_111 -> VAR_112 != VAR_113 ) { METHOD_23 ( VAR_114 ) ; VAR_115 = METHOD_24 ( VAR_116 , VAR_117 , VAR_118 , VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; if ( VAR_123 == VAR_124 ) { VAR_125 -> VAR_126 -- ; VAR_127 = - VAR_128 ; goto VAR_129 ; } } else { if ( ! METHOD_25 ( VAR_130 , VAR_131 , VAR_132 , VAR_133 , VAR_134 ) ) { METHOD_26 ( VAR_135 ) ; VAR_136 -> VAR_137 -- ; VAR_138 = - VAR_139 ; goto VAR_140 ; } } } if ( VAR_141 == VAR_142 ) VAR_143 -> VAR_144 = VAR_145 ; if ( METHOD_27 ( VAR_146 ) ) { VAR_147 = VAR_148 -> VAR_149 ; VAR_150 -> VAR_151 -- ; VAR_152 = METHOD_28 ( VAR_153 -> VAR_154 ) ; METHOD_29 ( VAR_155 ) ; METHOD_30 ( & VAR_156 -> VAR_157 , VAR_158 ) ; return METHOD_31 ( VAR_159 , VAR_160 , VAR_161 , VAR_162 , VAR_163 ) ; } VAR_164 = 0 ; VAR_165 : METHOD_32 ( & VAR_166 -> VAR_167 , VAR_168 ) ; return VAR_169 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 ) { struct STRUCT_OR_UNION_1 * VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 VAR_10 ; unsigned VAR_11 ; unsigned TYPE_6 VAR_12 ; struct STRUCT_OR_UNION_4 * VAR_13 ; struct STRUCT_OR_UNION_5 * VAR_14 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 ; TYPE_9 VAR_17 ; TYPE_10 VAR_18 ; TYPE_11 VAR_19 ; VAR_20 . VAR_21 = METHOD_1 ( VAR_22 [ 0 ] ) ; VAR_23 = METHOD_2 ( & VAR_24 ) ; if ( VAR_25 == VAR_26 ) { VAR_27 = METHOD_3 ( & VAR_28 ) ; VAR_29 ++ ; VAR_30 -= VAR_31 ; VAR_32 = METHOD_4 ( VAR_33 + METHOD_5 ( VAR_34 ) ) ; if ( METHOD_6 ( ! VAR_35 ) ) { VAR_36 -> VAR_37 . VAR_38 ++ ; return - VAR_39 ; } METHOD_7 ( VAR_40 , METHOD_8 ( VAR_41 ) ) ; METHOD_9 ( METHOD_10 ( VAR_42 , VAR_43 ) , VAR_44 , VAR_45 ) ; return METHOD_11 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 ) ; } if ( VAR_134 <= VAR_56 ) return 0 ; VAR_51 . VAR_52 = METHOD_12 ( VAR_53 [ 1 ] ) ; VAR_54 += 2 ; VAR_55 -= VAR_56 ; if ( VAR_57 == VAR_58 ) { VAR_59 = METHOD_13 ( & VAR_60 ) ; VAR_61 = 0 ; } else { VAR_62 = 0 ; VAR_63 = METHOD_14 ( & VAR_64 ) ; } VAR_65 = METHOD_15 ( & VAR_66 ) ; VAR_67 = METHOD_16 ( & VAR_68 ) ; if ( VAR_133 + VAR_134 > VAR_119 ) return 0 ; METHOD_17 ( & VAR_69 -> VAR_70 , VAR_71 ) ; VAR_72 = METHOD_18 ( VAR_73 , VAR_74 , VAR_75 ) ; if ( ! VAR_76 ) { VAR_77 = - VAR_78 ; goto VAR_79 ; } VAR_80 = METHOD_19 ( VAR_81 , VAR_82 ) ; if ( VAR_83 == VAR_84 ) { while ( VAR_85 -> VAR_86 >= VAR_87 ) { METHOD_20 ( list_first_entry ( & VAR_88 -> VAR_89 , struct STRUCT_OR_UNION_6 , VAR_90 ) ) ; VAR_91 -> VAR_92 -- ; } VAR_93 = METHOD_21 ( VAR_94 , VAR_95 , VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; if ( VAR_101 == VAR_102 ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } VAR_106 -> VAR_107 ++ ; } else { if ( METHOD_22 ( VAR_108 , VAR_109 , VAR_110 ) || VAR_111 -> VAR_112 != VAR_113 ) { METHOD_23 ( VAR_114 ) ; VAR_115 = METHOD_24 ( VAR_116 , VAR_117 , VAR_118 , VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; if ( VAR_123 == VAR_124 ) { VAR_125 -> VAR_126 -- ; VAR_127 = - VAR_128 ; goto VAR_129 ; } } else { if ( ! METHOD_25 ( VAR_130 , VAR_131 , VAR_132 , VAR_133 , VAR_134 ) ) { METHOD_26 ( VAR_135 ) ; VAR_136 -> VAR_137 -- ; VAR_138 = - VAR_139 ; goto VAR_140 ; } } } if ( VAR_141 == VAR_142 ) VAR_143 -> VAR_144 = VAR_145 ; if ( METHOD_27 ( VAR_146 ) ) { VAR_147 = VAR_148 -> VAR_149 ; VAR_150 -> VAR_151 -- ; VAR_152 = METHOD_28 ( VAR_153 -> VAR_154 ) ; METHOD_29 ( VAR_155 ) ; METHOD_30 ( & VAR_156 -> VAR_157 , VAR_158 ) ; return METHOD_31 ( VAR_159 , VAR_160 , VAR_161 , VAR_162 , VAR_163 ) ; } VAR_164 = 0 ; VAR_165 : METHOD_32 ( & VAR_166 -> VAR_167 , VAR_168 ) ; return VAR_169 ; }",99
100,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 = VAR_11 ; TYPE_10 VAR_12 ; VAR_13 * VAR_14 ; unsigned TYPE_11 VAR_15 ; TYPE_12 VAR_16 = VAR_17 ; VAR_18 * VAR_19 ; TYPE_13 VAR_20 ; TYPE_14 VAR_21 = 0 ; TYPE_15 * VAR_22 = VAR_23 ; METHOD_1 ( VAR_24 ) ; METHOD_2 ( VAR_25 -> VAR_26 ) ; METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , & VAR_31 ) ; if ( VAR_32 == VAR_33 ) return VAR_34 ; if ( ! ( VAR_35 & VAR_36 ) || ( VAR_37 & VAR_38 ) || ( VAR_39 & VAR_40 ) || ( VAR_41 & VAR_42 ) || ( VAR_43 & VAR_44 ) || ( VAR_45 & VAR_46 ) || ( VAR_47 & VAR_48 ) || ( VAR_49 & VAR_50 ) || ( VAR_51 & VAR_52 ) ) return VAR_53 ; if ( ( VAR_54 & VAR_55 ) && VAR_56 -> VAR_57 != 0 ) return VAR_58 ; if ( ( VAR_59 & VAR_60 ) && VAR_61 -> VAR_62 == VAR_63 ) return VAR_64 ; if ( ( VAR_65 & VAR_66 ) && ( VAR_67 & VAR_68 ) ) return VAR_69 ; if ( ( VAR_70 & ~ VAR_71 ) )  return VAR_72 ;  VAR_73 = METHOD_4 ( VAR_74 , VAR_75 -> VAR_76 , & VAR_77 , & VAR_78 ) ; switch ( VAR_79 ) { case VAR_80 : break ; case 0 : METHOD_5 ( VAR_81 , VAR_82 , & VAR_83 ) ; return VAR_84 ; default : return VAR_85 ; } VAR_86 = METHOD_6 ( 1 , sizeof ( * VAR_87 ) ) ; if ( VAR_88 == VAR_89 ) return VAR_90 ; METHOD_7 ( & VAR_91 , 0 , sizeof ( TYPE_16 ) ) ; if ( ( VAR_92 & VAR_93 ) ) { VAR_94 = METHOD_8 ( VAR_95 , VAR_96 -> VAR_97 , & VAR_98 , & VAR_99 ) ; if ( VAR_100 ) goto VAR_101 ; } if ( VAR_102 ) { VAR_103 = METHOD_9 ( VAR_104 , VAR_105 , VAR_106 ? & VAR_107 : VAR_108 , VAR_109 -> VAR_110 ) ; if ( VAR_111 ) goto VAR_112 ; } if ( ( VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , & VAR_116 ) ) ) goto VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; if ( ( VAR_124 & VAR_125 ) ) VAR_126 -> VAR_127 = VAR_128 -> VAR_129 ; else VAR_130 -> VAR_131 = VAR_132 -> VAR_133 . VAR_134 ; if ( ( VAR_135 & VAR_136 ) ) VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; else VAR_141 -> VAR_142 = VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 & VAR_147 ) VAR_148 -> VAR_149 = VAR_150 -> VAR_151 ; else VAR_152 -> VAR_153 = VAR_154 -> VAR_155 . VAR_156 ; if ( ( VAR_157 & VAR_158 ) ) VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 -> VAR_164 = VAR_165 -> VAR_166 . VAR_167 ; VAR_168 -> VAR_169 = 0 ; if ( VAR_170 ) { if ( VAR_171 . VAR_172 ) VAR_173 -> VAR_174 = METHOD_11 ( VAR_175 , VAR_176 . VAR_177 ) ; else VAR_178 -> VAR_179 = 0 ; } if ( ( VAR_180 & VAR_181 ) ) VAR_182 -> VAR_183 = VAR_184 -> VAR_185 ; VAR_186 -> VAR_187 = 0 ; VAR_188 -> VAR_189 = 0 ; VAR_190 -> VAR_191 = 0 ; VAR_192 = METHOD_12 ( VAR_193 -> VAR_194 , VAR_195 -> VAR_196 , & VAR_197 -> VAR_198 ) ; if ( VAR_199 ) goto VAR_200 ; if ( ( VAR_201 = METHOD_13 ( VAR_202 -> VAR_203 , VAR_204 , VAR_205 ) ) ) goto VAR_206 ; if ( VAR_207 & VAR_208 ) { for ( VAR_209 = VAR_210 -> VAR_211 ; VAR_212 ; VAR_213 = VAR_214 -> VAR_215 ) { VAR_216 = METHOD_14 ( VAR_217 -> VAR_218 , VAR_219 , VAR_220 ) ; if ( VAR_221 ) goto VAR_222 ; } } VAR_223 = METHOD_15 ( VAR_224 , VAR_225 -> VAR_226 , VAR_227 , VAR_228 , & VAR_229 , & VAR_230 ) ; if ( VAR_231 ) goto VAR_232 ; VAR_233 = METHOD_16 ( VAR_234 , & VAR_235 , & VAR_236 ) ; if ( VAR_237 ) goto VAR_238 ; if ( VAR_239 & VAR_240 ) { METHOD_17 ( VAR_241 -> VAR_242 == 0 ) ; } else if ( VAR_243 ) { VAR_244 = METHOD_18 ( VAR_245 -> VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , ( VAR_251 & VAR_252 ) ? VAR_253 -> VAR_254 : 1 , VAR_255 , VAR_256 ) ; } else { VAR_257 = METHOD_19 ( VAR_258 -> VAR_259 , & VAR_260 , VAR_261 , VAR_262 , VAR_263 , VAR_264 ) ; } if ( VAR_265 ) goto VAR_266 ; VAR_267 = METHOD_20 ( VAR_268 -> VAR_269 , VAR_270 , VAR_271 ) ; if ( VAR_272 ) goto VAR_273 ; VAR_274 = METHOD_21 ( VAR_275 -> VAR_276 , VAR_277 -> VAR_278 , VAR_279 , VAR_280 , VAR_281 , VAR_282 , VAR_283 , VAR_284 ) ; if ( VAR_285 ) goto VAR_286 ; VAR_287 . VAR_288 = VAR_289 ; if ( VAR_290 & VAR_291 ) { VAR_292 . VAR_293 = VAR_294 ; VAR_295 . VAR_296 = VAR_297 -> VAR_298 ; } VAR_299 -> VAR_300 = VAR_301 | VAR_302 | VAR_303 ; VAR_304 = METHOD_22 ( VAR_305 , VAR_306 , & VAR_307 ) ; ( TYPE_17 ) METHOD_23 ( VAR_308 -> VAR_309 , VAR_310 -> VAR_311 , VAR_312 , VAR_313 , VAR_314 , VAR_315 , VAR_316 , VAR_317 ) ; VAR_318 : METHOD_24 ( VAR_319 ) ; METHOD_25 ( VAR_320 -> VAR_321 , VAR_322 ) ; if ( VAR_323 ) ( TYPE_18 ) METHOD_26 ( VAR_324 -> VAR_325 , & VAR_326 ) ; return VAR_327 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 = VAR_11 ; TYPE_10 VAR_12 ; VAR_13 * VAR_14 ; unsigned TYPE_11 VAR_15 ; TYPE_12 VAR_16 = VAR_17 ; VAR_18 * VAR_19 ; TYPE_13 VAR_20 ; TYPE_14 VAR_21 = 0 ; TYPE_15 * VAR_22 = VAR_23 ; METHOD_1 ( VAR_24 ) ; METHOD_2 ( VAR_25 -> VAR_26 ) ; METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , & VAR_31 ) ; if ( VAR_32 == VAR_33 ) return VAR_34 ; if ( ! ( VAR_35 & VAR_36 ) || ( VAR_37 & VAR_38 ) || ( VAR_39 & VAR_40 ) || ( VAR_41 & VAR_42 ) || ( VAR_43 & VAR_44 ) || ( VAR_45 & VAR_46 ) || ( VAR_47 & VAR_48 ) || ( VAR_49 & VAR_50 ) || ( VAR_51 & VAR_52 ) ) return VAR_53 ; if ( ( VAR_54 & VAR_55 ) && VAR_56 -> VAR_57 != 0 ) return VAR_58 ; if ( ( VAR_59 & VAR_60 ) && VAR_61 -> VAR_62 == VAR_63 ) return VAR_64 ; if ( ( VAR_65 & VAR_66 ) && ( VAR_67 & VAR_68 ) ) return VAR_69 ; if ( ( VAR_70 & ~ VAR_71 ) ) return VAR_72 ; if ( VAR_314 & VAR_208 ) { for ( VAR_220 = VAR_313 -> VAR_211 ; VAR_220 != VAR_108 ; VAR_220 = VAR_220 -> VAR_215 ) { if ( VAR_220 -> VAR_328 < 256 ) return VAR_329 ; } } VAR_73 = METHOD_4 ( VAR_74 , VAR_75 -> VAR_76 , & VAR_77 , & VAR_78 ) ; switch ( VAR_79 ) { case VAR_80 : break ; case 0 : METHOD_5 ( VAR_81 , VAR_82 , & VAR_83 ) ; return VAR_84 ; default : return VAR_85 ; } VAR_86 = METHOD_6 ( 1 , sizeof ( * VAR_87 ) ) ; if ( VAR_88 == VAR_89 ) return VAR_90 ; METHOD_7 ( & VAR_91 , 0 , sizeof ( TYPE_16 ) ) ; if ( ( VAR_92 & VAR_93 ) ) { VAR_94 = METHOD_8 ( VAR_95 , VAR_96 -> VAR_97 , & VAR_98 , & VAR_99 ) ; if ( VAR_100 ) goto VAR_101 ; } if ( VAR_102 ) { VAR_103 = METHOD_9 ( VAR_104 , VAR_105 , VAR_106 ? & VAR_107 : VAR_108 , VAR_109 -> VAR_110 ) ; if ( VAR_111 ) goto VAR_112 ; } if ( ( VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , & VAR_116 ) ) ) goto VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; if ( ( VAR_124 & VAR_125 ) ) VAR_126 -> VAR_127 = VAR_128 -> VAR_129 ; else VAR_130 -> VAR_131 = VAR_132 -> VAR_133 . VAR_134 ; if ( ( VAR_135 & VAR_136 ) ) VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; else VAR_141 -> VAR_142 = VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 & VAR_147 ) VAR_148 -> VAR_149 = VAR_150 -> VAR_151 ; else VAR_152 -> VAR_153 = VAR_154 -> VAR_155 . VAR_156 ; if ( ( VAR_157 & VAR_158 ) ) VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 -> VAR_164 = VAR_165 -> VAR_166 . VAR_167 ; VAR_168 -> VAR_169 = 0 ; if ( VAR_170 ) { if ( VAR_171 . VAR_172 ) VAR_173 -> VAR_174 = METHOD_11 ( VAR_175 , VAR_176 . VAR_177 ) ; else VAR_178 -> VAR_179 = 0 ; } if ( ( VAR_180 & VAR_181 ) ) VAR_182 -> VAR_183 = VAR_184 -> VAR_185 ; VAR_186 -> VAR_187 = 0 ; VAR_188 -> VAR_189 = 0 ; VAR_190 -> VAR_191 = 0 ; VAR_192 = METHOD_12 ( VAR_193 -> VAR_194 , VAR_195 -> VAR_196 , & VAR_197 -> VAR_198 ) ; if ( VAR_199 ) goto VAR_200 ; if ( ( VAR_201 = METHOD_13 ( VAR_202 -> VAR_203 , VAR_204 , VAR_205 ) ) ) goto VAR_206 ; if ( VAR_207 & VAR_208 ) { for ( VAR_209 = VAR_210 -> VAR_211 ; VAR_212 ; VAR_213 = VAR_214 -> VAR_215 ) { VAR_216 = METHOD_14 ( VAR_217 -> VAR_218 , VAR_219 , VAR_220 ) ; if ( VAR_221 ) goto VAR_222 ; } } VAR_223 = METHOD_15 ( VAR_224 , VAR_225 -> VAR_226 , VAR_227 , VAR_228 , & VAR_229 , & VAR_230 ) ; if ( VAR_231 ) goto VAR_232 ; VAR_233 = METHOD_16 ( VAR_234 , & VAR_235 , & VAR_236 ) ; if ( VAR_237 ) goto VAR_238 ; if ( VAR_239 & VAR_240 ) { METHOD_17 ( VAR_241 -> VAR_242 == 0 ) ; } else if ( VAR_243 ) { VAR_244 = METHOD_18 ( VAR_245 -> VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , ( VAR_251 & VAR_252 ) ? VAR_253 -> VAR_254 : 1 , VAR_255 , VAR_256 ) ; } else { VAR_257 = METHOD_19 ( VAR_258 -> VAR_259 , & VAR_260 , VAR_261 , VAR_262 , VAR_263 , VAR_264 ) ; } if ( VAR_265 ) goto VAR_266 ; VAR_267 = METHOD_20 ( VAR_268 -> VAR_269 , VAR_270 , VAR_271 ) ; if ( VAR_272 ) goto VAR_273 ; VAR_274 = METHOD_21 ( VAR_275 -> VAR_276 , VAR_277 -> VAR_278 , VAR_279 , VAR_280 , VAR_281 , VAR_282 , VAR_283 , VAR_284 ) ; if ( VAR_285 ) goto VAR_286 ; VAR_287 . VAR_288 = VAR_289 ; if ( VAR_290 & VAR_291 ) { VAR_292 . VAR_293 = VAR_294 ; VAR_295 . VAR_296 = VAR_297 -> VAR_298 ; } VAR_299 -> VAR_300 = VAR_301 | VAR_302 | VAR_303 ; VAR_304 = METHOD_22 ( VAR_305 , VAR_306 , & VAR_307 ) ; ( TYPE_17 ) METHOD_23 ( VAR_308 -> VAR_309 , VAR_310 -> VAR_311 , VAR_312 , VAR_313 , VAR_314 , VAR_315 , VAR_316 , VAR_317 ) ; VAR_318 : METHOD_24 ( VAR_319 ) ; METHOD_25 ( VAR_320 -> VAR_321 , VAR_322 ) ; if ( VAR_323 ) ( TYPE_18 ) METHOD_26 ( VAR_324 -> VAR_325 , & VAR_326 ) ; return VAR_327 ; }",100
101,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  if ( METHOD_1 ( VAR_1 , METHOD_2 ( VAR_2 , VAR_3 ) ) == 0 )  METHOD_3 ( VAR_4 , VAR_5 -> VAR_6 . VAR_7 ) ;   return VAR_8 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( METHOD_1 ( VAR_1 , METHOD_2 ( VAR_2 , VAR_3 ) ) == 0 ) VAR_9 = METHOD_3 ( VAR_4 , VAR_5 -> VAR_6 . VAR_7 ) ; return VAR_9 ; }",101
102,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , ""w"" ) ; if ( ! VAR_7 ) { METHOD_2 ( ""open%s:"" , VAR_8 ) ; return - 1 ; } VAR_9 = 0 ;  if ( METHOD_3 ( VAR_10 -> VAR_11 , 1 , VAR_12 -> VAR_13 , VAR_14 ) != VAR_15 -> VAR_16 || METHOD_4 ( VAR_17 ) != 0 ) {  METHOD_5 ( ""write%s:"" , VAR_18 ) ; VAR_19 = - 1 ; } METHOD_6 ( VAR_20 ) ; return VAR_21 ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , ""w"" ) ; if ( VAR_15 && ( ! VAR_7 ) { METHOD_2 ( ""open%s:"" , VAR_8 ) ; return - 1 ; } VAR_9 = 0 ; if ( METHOD_3 ( VAR_10 -> VAR_11 , 1 , VAR_12 -> VAR_13 , VAR_14 ) != VAR_15 -> VAR_16 || METHOD_4 ( VAR_17 ) != 0 ) ) { METHOD_5 ( ""write%s:"" , VAR_18 ) ; VAR_19 = - 1 ; } METHOD_6 ( VAR_20 ) ; return VAR_21 ; }",102
103,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 * VAR_5 ; if ( VAR_6 -> VAR_7 == VAR_8 || VAR_9 -> VAR_10 == VAR_11 || VAR_12 -> VAR_13 == VAR_14 ) { VAR_15 = VAR_16 ; METHOD_1 ( VAR_17 , sizeof ( VAR_18 ) , ""Badvio_get_filelen/vio_seek/vio_tellinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_19 ; } ; if ( ( VAR_20 == VAR_21 || VAR_22 == VAR_23 ) && VAR_24 -> VAR_25 == VAR_26 ) { VAR_27 = VAR_28 ; METHOD_2 ( VAR_29 , sizeof ( VAR_30 ) , ""Badvio_readinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_31 ; } ; if ( ( VAR_32 == VAR_33 || VAR_34 == VAR_35 ) && VAR_36 -> VAR_37 == VAR_38 ) { VAR_39 = VAR_40 ; METHOD_3 ( VAR_41 , sizeof ( VAR_42 ) , ""Badvio_writeinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_43 ; } ;  if ( ( VAR_44 = METHOD_4 ( 1 , sizeof ( VAR_45 ) ) ) == VAR_46 )  { VAR_47 = VAR_48 ; return VAR_49 ; } ; METHOD_5 ( VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = * VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 . VAR_62 = VAR_63 ; return METHOD_6 ( VAR_64 , VAR_65 ) ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 * VAR_5 ; if ( VAR_6 -> VAR_7 == VAR_8 || VAR_9 -> VAR_10 == VAR_11 || VAR_12 -> VAR_13 == VAR_14 ) { VAR_15 = VAR_16 ; METHOD_1 ( VAR_17 , sizeof ( VAR_18 ) , ""Badvio_get_filelen/vio_seek/vio_tellinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_19 ; } ; if ( ( VAR_20 == VAR_21 || VAR_22 == VAR_23 ) && VAR_24 -> VAR_25 == VAR_26 ) { VAR_27 = VAR_28 ; METHOD_2 ( VAR_29 , sizeof ( VAR_30 ) , ""Badvio_readinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_31 ; } ; if ( ( VAR_32 == VAR_33 || VAR_34 == VAR_35 ) && VAR_36 -> VAR_37 == VAR_38 ) { VAR_39 = VAR_40 ; METHOD_3 ( VAR_41 , sizeof ( VAR_42 ) , ""Badvio_writeinSF_VIRTUAL_IOstruct.\\n"" ) ; return VAR_43 ; } ; if ( ( VAR_44 = METHOD_4 ( 1 , sizeof ( VAR_45 ) ) ) == VAR_46 ) { VAR_47 = VAR_48 ; return VAR_49 ; } ; METHOD_5 ( VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = * VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 . VAR_62 = VAR_63 ; return METHOD_6 ( VAR_64 , VAR_65 ) ; }",103
104,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; TYPE_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = 0 ; VAR_9 = 0 ; if ( ! ( VAR_10 = METHOD_1 ( sizeof ( TYPE_7 ) ) ) ) { goto VAR_11 ; } VAR_12 -> VAR_13 = & VAR_14 . VAR_15 ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) || METHOD_3 ( VAR_18 , & VAR_19 -> VAR_20 ) ) { goto VAR_21 ; } VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = & VAR_30 -> VAR_31 ;  VAR_32 -> VAR_33 = VAR_34 ;  if ( VAR_35 -> VAR_36 == 1 ) { if ( METHOD_5 ( VAR_37 , & VAR_38 ) ) { goto VAR_39 ; } if ( VAR_40 > 0xffffffffUL ) { METHOD_6 ( ""warning:cannothandlelarge64-bitboxlength\\n"" ) ; VAR_41 = 0xffffffffUL ; } VAR_42 -> VAR_43 = VAR_44 ; VAR_45 -> VAR_46 = VAR_47 - METHOD_7 ( VAR_48 ) ; } else { VAR_49 -> VAR_50 = VAR_51 -> VAR_52 - METHOD_8 ( VAR_53 ) ; } if ( VAR_54 -> VAR_55 != 0 && VAR_56 -> VAR_57 < 8 ) { goto VAR_58 ; } VAR_59 = ! ( VAR_60 -> VAR_61 -> VAR_62 & ( VAR_63 | VAR_64 ) ) ; if ( VAR_65 ) { if ( ! ( VAR_66 = METHOD_9 ( 0 , 0 ) ) ) { goto VAR_67 ; } if ( METHOD_10 ( VAR_68 , VAR_69 , VAR_70 -> VAR_71 ) ) {  METHOD_11 ( ""cannotcopyboxdata\\n"" ) ;  goto VAR_72 ; } METHOD_12 ( VAR_73 ) ; if ( VAR_74 -> VAR_75 -> VAR_76 ) { if ( ( * VAR_77 -> VAR_78 -> VAR_79 ) ( VAR_80 , VAR_81 ) ) { METHOD_13 ( ""cannotparseboxdata\\n"" ) ; goto VAR_82 ; } } METHOD_14 ( VAR_83 ) ; } if ( METHOD_15 ( ) >= 1 ) { METHOD_16 ( VAR_84 , VAR_85 ) ; } return VAR_86 ; VAR_87 : if ( VAR_88 ) { METHOD_17 ( VAR_89 ) ; } if ( VAR_90 ) { METHOD_18 ( VAR_91 ) ; } return 0 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; TYPE_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = 0 ; VAR_9 = 0 ; if ( ! ( VAR_10 = METHOD_1 ( sizeof ( TYPE_7 ) ) ) ) { VAR_89 -> VAR_78 = & VAR_14 . VAR_78 ; goto VAR_11 ; } VAR_12 -> VAR_13 = & VAR_14 . VAR_15 ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) || METHOD_3 ( VAR_18 , & VAR_19 -> VAR_20 ) ) { goto VAR_21 ; } VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = & VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; if ( VAR_35 -> VAR_36 == 1 ) { if ( METHOD_5 ( VAR_37 , & VAR_38 ) ) { goto VAR_39 ; } if ( VAR_40 > 0xffffffffUL ) { METHOD_6 ( ""warning:cannothandlelarge64-bitboxlength\\n"" ) ; VAR_41 = 0xffffffffUL ; } VAR_42 -> VAR_43 = VAR_44 ; VAR_45 -> VAR_46 = VAR_47 - METHOD_7 ( VAR_48 ) ; } else { VAR_49 -> VAR_50 = VAR_51 -> VAR_52 - METHOD_8 ( VAR_53 ) ; } if ( VAR_54 -> VAR_55 != 0 && VAR_56 -> VAR_57 < 8 ) { goto VAR_58 ; } VAR_59 = ! ( VAR_60 -> VAR_61 -> VAR_62 & ( VAR_63 | VAR_64 ) ) ; if ( VAR_65 ) { if ( ! ( VAR_66 = METHOD_9 ( 0 , 0 ) ) ) { goto VAR_67 ; } if ( METHOD_10 ( VAR_68 , VAR_69 , VAR_70 -> VAR_71 ) ) { METHOD_11 ( ""cannotcopyboxdata\\n"" ) ; goto VAR_72 ; } METHOD_12 ( VAR_73 ) ; if ( VAR_74 -> VAR_75 -> VAR_76 ) { if ( ( * VAR_77 -> VAR_78 -> VAR_79 ) ( VAR_80 , VAR_81 ) ) { METHOD_13 ( ""cannotparseboxdata\\n"" ) ; goto VAR_82 ; } } METHOD_14 ( VAR_83 ) ; } if ( METHOD_15 ( ) >= 1 ) { METHOD_16 ( VAR_84 , VAR_85 ) ; } return VAR_86 ; VAR_87 : if ( VAR_88 ) { METHOD_17 ( VAR_89 ) ; } if ( VAR_90 ) { METHOD_18 ( VAR_91 ) ; } return 0 ; }",104
105,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( VAR_7 >= 0 ) ; METHOD_2 ( VAR_8 -> VAR_9 == VAR_10 ) ; VAR_11 = METHOD_3 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 == VAR_15 ) {  VAR_16 = METHOD_4 ( 64 , ( VAR_17 + 1 ) * 2 ) ;  VAR_18 -> VAR_19 = ( TYPE_6 * ) METHOD_5 ( sizeof ( TYPE_7 ) + VAR_20 * sizeof ( TYPE_8 * ) ) ; if ( VAR_21 -> VAR_22 == VAR_23 ) return VAR_24 ; METHOD_6 ( VAR_25 -> VAR_26 -> VAR_27 , 0 , VAR_28 * sizeof ( TYPE_9 * ) ) ; VAR_29 -> VAR_30 -> VAR_31 = VAR_32 ; } else if ( VAR_33 >= VAR_34 -> VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 -> VAR_40 * 2 ;  VAR_41 -> VAR_42 = ( TYPE_10 * ) METHOD_7 (  VAR_43 -> VAR_44 , sizeof ( TYPE_11 ) + VAR_45 * sizeof ( TYPE_12 * ) ) ; if ( VAR_46 -> VAR_47 == VAR_48 ) return VAR_49 ; for ( VAR_50 = VAR_51 -> VAR_52 -> VAR_53 ; VAR_54 < VAR_55 ; VAR_56 ++ ) VAR_57 -> VAR_58 -> VAR_59 [ VAR_60 ] = VAR_61 ; VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 -> VAR_71 [ VAR_72 ] = VAR_73 ; return VAR_74 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( VAR_7 >= 0 ) ; METHOD_2 ( VAR_8 -> VAR_9 == VAR_10 ) ; VAR_11 = METHOD_3 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 == VAR_15 ) { VAR_16 = METHOD_4 ( 64 , ( VAR_17 + 1 ) * 2 ) ; VAR_18 -> VAR_19 = ( TYPE_6 * ) METHOD_5 ( sizeof ( TYPE_7 ) + VAR_20 * sizeof ( TYPE_8 * ) ) ; if ( VAR_21 -> VAR_22 == VAR_23 ) return VAR_24 ; METHOD_6 ( VAR_25 -> VAR_26 -> VAR_27 , 0 , VAR_28 * sizeof ( TYPE_9 * ) ) ; VAR_29 -> VAR_30 -> VAR_31 = VAR_32 ; } else if ( VAR_33 >= VAR_34 -> VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 -> VAR_40 * 2 ; while ( VAR_65 <= VAR_72 ) VAR_65 *= 2 ; VAR_41 -> VAR_42 = ( TYPE_10 * ) METHOD_7 ( VAR_43 -> VAR_44 , sizeof ( TYPE_11 ) + VAR_45 * sizeof ( TYPE_12 * ) ) ; if ( VAR_46 -> VAR_47 == VAR_48 ) return VAR_49 ; for ( VAR_50 = VAR_51 -> VAR_52 -> VAR_53 ; VAR_54 < VAR_55 ; VAR_56 ++ ) VAR_57 -> VAR_58 -> VAR_59 [ VAR_60 ] = VAR_61 ; VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 -> VAR_71 [ VAR_72 ] = VAR_73 ; return VAR_74 ; }",105
106,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 ; union { TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; } VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; const TYPE_12 * VAR_14 ; TYPE_13 VAR_15 [ VAR_16 + 100 ] ; TYPE_14 VAR_17 ; VAR_18 = VAR_19 ; VAR_20 = VAR_21 ; switch ( VAR_22 ) { case VAR_23 : if ( VAR_24 != 1 ) METHOD_1 ( ( VAR_25 , ""invalidlen"" ) ) ; else { METHOD_2 ( * VAR_26 ) ; METHOD_3 ( ( VAR_27 , ""%s"" , METHOD_4 ( VAR_28 , ""UnknownOriginTypecode"" , VAR_29 [ 0 ] ) ) ) ; } break ; case VAR_30 : case VAR_31 : if ( VAR_32 % 2 ) { METHOD_5 ( ( VAR_33 , ""invalidlen"" ) ) ; break ; } if ( ! VAR_34 ) { METHOD_6 ( ( VAR_35 , ""empty"" ) ) ; break ; } VAR_36 = METHOD_7 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; while ( VAR_41 < VAR_42 + VAR_43 ) { METHOD_8 ( VAR_44 [ 0 ] ) ; METHOD_9 ( ( VAR_45 , ""%s"" , METHOD_10 ( VAR_46 , ""?"" , VAR_47 [ 0 ] ) ) ) ; METHOD_11 ( VAR_48 [ 1 ] ) ; for ( VAR_49 = 0 ; VAR_50 < VAR_51 [ 1 ] * VAR_52 ; VAR_53 += VAR_54 ) { METHOD_12 ( VAR_55 [ 2 + VAR_56 ] , VAR_57 ) ; METHOD_13 ( ( VAR_58 , ""%s"" , METHOD_14 ( VAR_59 , VAR_60 , sizeof ( VAR_61 ) , VAR_62 == 2 ? METHOD_15 ( & VAR_63 [ 2 + VAR_64 ] ) : METHOD_16 ( & VAR_65 [ 2 + VAR_66 ] ) ) ) ) ; } METHOD_17 ( VAR_67 [ 0 ] ) ; METHOD_18 ( ( VAR_68 , ""%s"" , METHOD_19 ( VAR_69 , ""?"" , VAR_70 [ 0 ] ) ) ) ; METHOD_20 ( VAR_71 [ 1 ] ) ; VAR_72 += 2 + VAR_73 [ 1 ] * VAR_74 ; } break ; case VAR_75 : if ( VAR_76 != 4 ) METHOD_21 ( ( VAR_77 , ""invalidlen"" ) ) ; else { METHOD_22 ( VAR_78 [ 0 ] , 4 ) ; METHOD_23 ( ( VAR_79 , ""%s"" , METHOD_24 ( VAR_80 , VAR_81 ) ) ) ; } break ; case VAR_82 : case VAR_83 : if ( VAR_84 != 4 ) METHOD_25 ( ( VAR_85 , ""invalidlen"" ) ) ; else { METHOD_26 ( VAR_86 [ 0 ] , 4 ) ; METHOD_27 ( ( VAR_87 , ""%u"" , METHOD_28 ( VAR_88 ) ) ) ; } break ; case VAR_89 : if ( VAR_90 != 0 ) METHOD_29 ( ( VAR_91 , ""invalidlen"" ) ) ; break ; case VAR_92 : if ( VAR_93 != 6 && VAR_94 != 8 ) { METHOD_30 ( ( VAR_95 , ""invalidlen"" ) ) ; break ; } METHOD_31 ( VAR_96 [ 0 ] , VAR_97 ) ; if ( VAR_98 == 6 ) { METHOD_32 ( ( VAR_99 , ""AS%s,origin%s"" , METHOD_33 ( VAR_100 , VAR_101 , sizeof ( VAR_102 ) , METHOD_34 ( VAR_103 ) ) , METHOD_35 ( VAR_104 , VAR_105 + 2 ) ) ) ; } else { METHOD_36 ( ( VAR_106 , ""AS%s,origin%s"" , METHOD_37 ( VAR_107 , VAR_108 , sizeof ( VAR_109 ) , METHOD_38 ( VAR_110 ) ) , METHOD_39 ( VAR_111 , VAR_112 + 4 ) ) ) ; } break ; case VAR_113 : if ( VAR_114 != 8 ) { METHOD_40 ( ( VAR_115 , ""invalidlen"" ) ) ; break ; } METHOD_41 ( VAR_116 [ 0 ] , 8 ) ; METHOD_42 ( ( VAR_117 , ""AS%s,origin%s"" , METHOD_43 ( VAR_118 , VAR_119 , sizeof ( VAR_120 ) , METHOD_44 ( VAR_121 ) ) , METHOD_45 ( VAR_122 , VAR_123 + 4 ) ) ) ; break ; case VAR_124 : if ( VAR_125 % 4 ) { METHOD_46 ( ( VAR_126 , ""invalidlen"" ) ) ; break ; } while ( VAR_127 > 0 ) { TYPE_15 VAR_128 ; METHOD_47 ( VAR_129 [ 0 ] , 4 ) ; VAR_130 = METHOD_48 ( VAR_131 ) ; switch ( VAR_132 ) { case VAR_133 : METHOD_49 ( ( VAR_134 , ""NO_EXPORT"" ) ) ; break ; case VAR_135 : METHOD_50 ( ( VAR_136 , ""NO_ADVERTISE"" ) ) ; break ; case VAR_137 : METHOD_51 ( ( VAR_138 , ""NO_EXPORT_SUBCONFED"" ) ) ; break ; default : METHOD_52 ( ( VAR_139 , ""%u:%u%s"" , ( VAR_140 >> 16 ) & 0xffff , VAR_141 & 0xffff , ( VAR_142 > 4 ) ? "","" : """" ) ) ; break ; } VAR_143 -= 4 ; VAR_144 += 4 ; } break ; case VAR_145 : if ( VAR_146 != 4 ) { METHOD_53 ( ( VAR_147 , ""invalidlen"" ) ) ; break ; } METHOD_54 ( VAR_148 [ 0 ] , 4 ) ; METHOD_55 ( ( VAR_149 , ""%s"" , METHOD_56 ( VAR_150 , VAR_151 ) ) ) ; break ; case VAR_152 : if ( VAR_153 % 4 ) { METHOD_57 ( ( VAR_154 , ""invalidlen"" ) ) ; break ; } while ( VAR_155 > 0 ) { METHOD_58 ( VAR_156 [ 0 ] , 4 ) ; METHOD_59 ( ( VAR_157 , ""%s%s"" , METHOD_60 ( VAR_158 , VAR_159 ) , ( VAR_160 > 4 ) ? "","" : """" ) ) ; VAR_161 -= 4 ; VAR_162 += 4 ; } break ; case VAR_163 : METHOD_61 ( VAR_164 [ 0 ] , 3 ) ; VAR_165 = METHOD_62 ( VAR_166 ) ; VAR_167 = VAR_168 [ 2 ] ; METHOD_63 ( ( VAR_169 , ""\\n\\tAFI:%s(%u),%sSAFI:%s(%u)"" , METHOD_64 ( VAR_170 , ""UnknownAFI"" , VAR_171 ) , VAR_172 , ( VAR_173 > 128 ) ? ""vendorspecific"" : """" , METHOD_65 ( VAR_174 , ""UnknownSAFI"" , VAR_175 ) , VAR_176 ) ) ; switch ( VAR_177 << 8 | VAR_178 ) { case ( VAR_179 << 8 | VAR_180 ) : case ( VAR_181 << 8 | VAR_182 ) : case ( VAR_183 << 8 | VAR_184 ) : case ( VAR_185 << 8 | VAR_186 ) : case ( VAR_187 << 8 | VAR_188 ) : case ( VAR_189 << 8 | VAR_190 ) : case ( VAR_191 << 8 | VAR_192 ) : case ( VAR_193 << 8 | VAR_194 ) : case ( VAR_195 << 8 | VAR_196 ) : case ( VAR_197 << 8 | VAR_198 ) : case ( VAR_199 << 8 | VAR_200 ) : case ( VAR_201 << 8 | VAR_202 ) : case ( VAR_203 << 8 | VAR_204 ) : case ( VAR_205 << 8 | VAR_206 ) : case ( VAR_207 << 8 | VAR_208 ) : case ( VAR_209 << 8 | VAR_210 ) : case ( VAR_211 << 8 | VAR_212 ) : case ( VAR_213 << 8 | VAR_214 ) : case ( VAR_215 << 8 | VAR_216 ) : case ( VAR_217 << 8 | VAR_218 ) : case ( VAR_219 << 8 | VAR_220 ) : case ( VAR_221 << 8 | VAR_222 ) : case ( VAR_223 << 8 | VAR_224 ) : case ( VAR_225 << 8 | VAR_226 ) : case ( VAR_227 << 8 | VAR_228 ) : case ( VAR_229 << 8 | VAR_230 ) : case ( VAR_231 << 8 | VAR_232 ) : break ; default : METHOD_66 ( VAR_233 [ 0 ] , VAR_234 ) ; METHOD_67 ( ( VAR_235 , ""\\n\\tnoAFI%u/SAFI%udecoder"" , VAR_236 , VAR_237 ) ) ; if ( VAR_238 -> VAR_239 <= 1 ) METHOD_68 ( VAR_240 , VAR_241 , ""\\n\\t"" , VAR_242 ) ; goto VAR_243 ; break ; } VAR_244 += 3 ; METHOD_69 ( VAR_245 [ 0 ] ) ; VAR_246 = VAR_247 [ 0 ] ; VAR_248 = VAR_249 ; VAR_250 ++ ; if ( VAR_251 ) { TYPE_16 VAR_252 = 0 ; METHOD_70 ( ( VAR_253 , ""\\n\\tnexthop:"" ) ) ; while ( VAR_254 > 0 ) { if ( VAR_255 ++ > 0 ) { METHOD_71 ( ( VAR_256 , "","" ) ) ; } switch ( VAR_257 << 8 | VAR_258 ) { case ( VAR_259 << 8 | VAR_260 ) : case ( VAR_261 << 8 | VAR_262 ) : case ( VAR_263 << 8 | VAR_264 ) : case ( VAR_265 << 8 | VAR_266 ) : case ( VAR_267 << 8 | VAR_268 ) : case ( VAR_269 << 8 | VAR_270 ) : case ( VAR_271 << 8 | VAR_272 ) : if ( VAR_273 < ( TYPE_17 ) sizeof ( struct STRUCT_OR_UNION_0 ) ) { METHOD_72 ( ( VAR_274 , ""invalidlen"" ) ) ; VAR_275 = 0 ; } else { METHOD_73 ( VAR_276 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_1 ) ) ; METHOD_74 ( ( VAR_277 , ""%s"" , METHOD_75 ( VAR_278 , VAR_279 ) ) ) ; VAR_280 -= sizeof ( struct STRUCT_OR_UNION_2 ) ; VAR_281 += sizeof ( struct STRUCT_OR_UNION_3 ) ; } break ; case ( VAR_282 << 8 | VAR_283 ) : case ( VAR_284 << 8 | VAR_285 ) : case ( VAR_286 << 8 | VAR_287 ) : if ( VAR_288 < ( TYPE_18 ) ( sizeof ( struct STRUCT_OR_UNION_4 ) + VAR_289 ) ) { METHOD_76 ( ( VAR_290 , ""invalidlen"" ) ) ; VAR_291 = 0 ; } else { METHOD_77 ( VAR_292 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_5 ) + VAR_293 ) ; METHOD_78 ( ( VAR_294 , ""RD:%s,%s"" , METHOD_79 ( VAR_295 , VAR_296 ) , METHOD_80 ( VAR_297 , VAR_298 + VAR_299 ) ) ) ; VAR_300 -= ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_301 ) ; VAR_302 += ( sizeof ( struct STRUCT_OR_UNION_7 ) + VAR_303 ) ; } break ; case ( VAR_304 << 8 | VAR_305 ) : case ( VAR_306 << 8 | VAR_307 ) : case ( VAR_308 << 8 | VAR_309 ) : case ( VAR_310 << 8 | VAR_311 ) : if ( VAR_312 < ( TYPE_19 ) sizeof ( struct STRUCT_OR_UNION_8 ) ) { METHOD_81 ( ( VAR_313 , ""invalidlen"" ) ) ; VAR_314 = 0 ; } else { METHOD_82 ( VAR_315 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_9 ) ) ; METHOD_83 ( ( VAR_316 , ""%s"" , METHOD_84 ( VAR_317 , VAR_318 ) ) ) ; VAR_319 -= sizeof ( struct STRUCT_OR_UNION_10 ) ; VAR_320 += sizeof ( struct STRUCT_OR_UNION_11 ) ; } break ; case ( VAR_321 << 8 | VAR_322 ) : case ( VAR_323 << 8 | VAR_324 ) : case ( VAR_325 << 8 | VAR_326 ) : if ( VAR_327 < ( TYPE_20 ) ( sizeof ( struct STRUCT_OR_UNION_12 ) + VAR_328 ) ) { METHOD_85 ( ( VAR_329 , ""invalidlen"" ) ) ; VAR_330 = 0 ; } else { METHOD_86 ( VAR_331 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_13 ) + VAR_332 ) ; METHOD_87 ( ( VAR_333 , ""RD:%s,%s"" , METHOD_88 ( VAR_334 , VAR_335 ) , METHOD_89 ( VAR_336 , VAR_337 + VAR_338 ) ) ) ; VAR_339 -= ( sizeof ( struct STRUCT_OR_UNION_14 ) + VAR_340 ) ; VAR_341 += ( sizeof ( struct STRUCT_OR_UNION_15 ) + VAR_342 ) ; } break ; case ( VAR_343 << 8 | VAR_344 ) : case ( VAR_345 << 8 | VAR_346 ) : case ( VAR_347 << 8 | VAR_348 ) : case ( VAR_349 << 8 | VAR_350 ) : if ( VAR_351 < ( TYPE_21 ) sizeof ( struct STRUCT_OR_UNION_16 ) ) { METHOD_90 ( ( VAR_352 , ""invalidlen"" ) ) ; VAR_353 = 0 ; } else { METHOD_91 ( VAR_354 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; METHOD_92 ( ( VAR_355 , ""%s"" , METHOD_93 ( VAR_356 , VAR_357 ) ) ) ; VAR_358 -= ( sizeof ( struct STRUCT_OR_UNION_18 ) ) ; VAR_359 += ( sizeof ( struct STRUCT_OR_UNION_19 ) ) ; } break ; case ( VAR_360 << 8 | VAR_361 ) : case ( VAR_362 << 8 | VAR_363 ) : case ( VAR_364 << 8 | VAR_365 ) : METHOD_94 ( VAR_366 [ 0 ] , VAR_367 ) ; METHOD_95 ( ( VAR_368 , ""%s"" , METHOD_96 ( VAR_369 , VAR_370 , VAR_371 ) ) ) ; VAR_372 += VAR_373 ; VAR_374 = 0 ; break ; case ( VAR_375 << 8 | VAR_376 ) : case ( VAR_377 << 8 | VAR_378 ) : case ( VAR_379 << 8 | VAR_380 ) : if ( VAR_381 < VAR_382 + 1 ) { METHOD_97 ( ( VAR_383 , ""invalidlen"" ) ) ; VAR_384 = 0 ; } else { METHOD_98 ( VAR_385 [ 0 ] , VAR_386 ) ; METHOD_99 ( ( VAR_387 , ""RD:%s,%s"" , METHOD_100 ( VAR_388 , VAR_389 ) , METHOD_101 ( VAR_390 , VAR_391 + VAR_392 , VAR_393 - VAR_394 ) ) ) ;  if ( METHOD_102 ( VAR_395 + VAR_396 ) == 0x47000601 )  METHOD_103 ( ( VAR_397 , ""=%s"" , METHOD_104 ( VAR_398 , VAR_399 + VAR_400 + 4 ) ) ) ;  else if ( METHOD_105 ( VAR_401 + VAR_402 ) == 0x350000 )  METHOD_106 ( ( VAR_403 , ""=%s"" , METHOD_107 ( VAR_404 , VAR_405 + VAR_406 + 3 ) ) ) ; VAR_407 += VAR_408 ; VAR_409 = 0 ; } break ; default : METHOD_108 ( VAR_410 [ 0 ] , VAR_411 ) ; METHOD_109 ( ( VAR_412 , ""noAFI%u/SAFI%udecoder"" , VAR_413 , VAR_414 ) ) ; if ( VAR_415 -> VAR_416 <= 1 ) METHOD_110 ( VAR_417 , VAR_418 , ""\\n\\t"" , VAR_419 ) ; VAR_420 += VAR_421 ; VAR_422 = 0 ; goto VAR_423 ; break ; } } } METHOD_111 ( ( VAR_424 , "",nh-length:%u"" , VAR_425 ) ) ; VAR_426 += VAR_427 ; METHOD_112 ( VAR_428 [ 0 ] ) ; VAR_429 = VAR_430 [ 0 ] ; VAR_431 ++ ; if ( VAR_432 ) { METHOD_113 ( ( VAR_433 , ""\\n\\t%uSNPA"" , VAR_434 ) ) ; for ( ; VAR_435 > 0 ; VAR_436 -- ) { METHOD_114 ( VAR_437 [ 0 ] ) ; METHOD_115 ( ( VAR_438 , ""\\n\\t%dbytes"" , VAR_439 [ 0 ] ) ) ; VAR_440 += VAR_441 [ 0 ] + 1 ; } } else { METHOD_116 ( ( VAR_442 , "",noSNPA"" ) ) ; } while ( VAR_443 < VAR_444 + VAR_445 ) { switch ( VAR_446 << 8 | VAR_447 ) { case ( VAR_448 << 8 | VAR_449 ) : case ( VAR_450 << 8 | VAR_451 ) : case ( VAR_452 << 8 | VAR_453 ) : VAR_454 = METHOD_117 ( VAR_455 , VAR_456 , VAR_457 , VAR_458 , sizeof ( VAR_459 ) ) ; if ( VAR_460 == - 1 ) METHOD_118 ( ( VAR_461 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_462 == - 2 ) goto VAR_463 ; else if ( VAR_464 == - 3 ) break ; else METHOD_119 ( ( VAR_465 , ""\\n\\t%s"" , VAR_466 ) ) ; break ; case ( VAR_467 << 8 | VAR_468 ) : VAR_469 = METHOD_120 ( VAR_470 , VAR_471 , VAR_472 , VAR_473 , sizeof ( VAR_474 ) ) ; if ( VAR_475 == - 1 ) METHOD_121 ( ( VAR_476 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_477 == - 2 ) goto VAR_478 ; else if ( VAR_479 == - 3 ) break ; else METHOD_122 ( ( VAR_480 , ""\\n\\t%s"" , VAR_481 ) ) ; break ; case ( VAR_482 << 8 | VAR_483 ) : case ( VAR_484 << 8 | VAR_485 ) : case ( VAR_486 << 8 | VAR_487 ) : VAR_488 = METHOD_123 ( VAR_489 , VAR_490 , VAR_491 , sizeof ( VAR_492 ) ) ; if ( VAR_493 == - 1 ) METHOD_124 ( ( VAR_494 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_495 == - 2 ) goto VAR_496 ; else METHOD_125 ( ( VAR_497 , ""\\n\\t%s"" , VAR_498 ) ) ; break ; case ( VAR_499 << 8 | VAR_500 ) : VAR_501 = METHOD_126 ( VAR_502 , VAR_503 , VAR_504 , sizeof ( VAR_505 ) ) ; if ( VAR_506 == - 1 ) METHOD_127 ( ( VAR_507 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_508 == - 2 ) goto VAR_509 ; else METHOD_128 ( ( VAR_510 , ""\\n\\t%s"" , VAR_511 ) ) ; break ; case ( VAR_512 << 8 | VAR_513 ) : case ( VAR_514 << 8 | VAR_515 ) : VAR_516 = METHOD_129 ( VAR_517 , VAR_518 , VAR_519 , sizeof ( VAR_520 ) ) ; if ( VAR_521 == - 1 ) METHOD_130 ( ( VAR_522 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_523 == - 2 ) goto VAR_524 ; else METHOD_131 ( ( VAR_525 , ""\\n\\t%s"" , VAR_526 ) ) ; break ; case ( VAR_527 << 8 | VAR_528 ) : VAR_529 = METHOD_132 ( VAR_530 , VAR_531 , VAR_532 , sizeof ( VAR_533 ) ) ; if ( VAR_534 == - 1 ) METHOD_133 ( ( VAR_535 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_536 == - 2 ) goto VAR_537 ; else METHOD_134 ( ( VAR_538 , ""\\n\\t%s"" , VAR_539 ) ) ; break ; case ( VAR_540 << 8 | VAR_541 ) : case ( VAR_542 << 8 | VAR_543 ) : case ( VAR_544 << 8 | VAR_545 ) : VAR_546 = METHOD_135 ( VAR_547 , VAR_548 , VAR_549 , VAR_550 , sizeof ( VAR_551 ) ) ; if ( VAR_552 == - 1 ) METHOD_136 ( ( VAR_553 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_554 == - 2 ) goto VAR_555 ; else if ( VAR_556 == - 3 ) break ; else METHOD_137 ( ( VAR_557 , ""\\n\\t%s"" , VAR_558 ) ) ; break ; case ( VAR_559 << 8 | VAR_560 ) : VAR_561 = METHOD_138 ( VAR_562 , VAR_563 , VAR_564 , VAR_565 , sizeof ( VAR_566 ) ) ; if ( VAR_567 == - 1 ) METHOD_139 ( ( VAR_568 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_569 == - 2 ) goto VAR_570 ; else if ( VAR_571 == - 3 ) break ; else METHOD_140 ( ( VAR_572 , ""\\n\\t%s"" , VAR_573 ) ) ; break ; case ( VAR_574 << 8 | VAR_575 ) : case ( VAR_576 << 8 | VAR_577 ) : case ( VAR_578 << 8 | VAR_579 ) : VAR_580 = METHOD_141 ( VAR_581 , VAR_582 , VAR_583 , sizeof ( VAR_584 ) ) ; if ( VAR_585 == - 1 ) METHOD_142 ( ( VAR_586 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_587 == - 2 ) goto VAR_588 ; else METHOD_143 ( ( VAR_589 , ""\\n\\t%s"" , VAR_590 ) ) ; break ; case ( VAR_591 << 8 | VAR_592 ) : case ( VAR_593 << 8 | VAR_594 ) : case ( VAR_595 << 8 | VAR_596 ) : case ( VAR_597 << 8 | VAR_598 ) : VAR_599 = METHOD_144 ( VAR_600 , VAR_601 , VAR_602 , sizeof ( VAR_603 ) ) ; if ( VAR_604 == - 1 ) METHOD_145 ( ( VAR_605 , ""\\n\\t(illegallength)"" ) ) ; else if ( VAR_606 == - 2 ) goto VAR_607 ; else METHOD_146 ( ( VAR_608 , ""\\n\\t%s"" , VAR_609 ) ) ; break ; case ( VAR_610 << 8 | VAR_611 ) : case ( VAR_612 << 8 | VAR_613 ) : case ( VAR_614 << 8 | VAR_615 ) : VAR_616 = METHOD_147 ( VAR_617 , VAR_618 , VAR_619 , sizeof ( VAR_620 ) ) ; if ( VAR_621 == - 1 ) METHOD_148 ( ( VAR_622 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_623 == - 2 ) goto VAR_624 ; else METHOD_149 ( ( VAR_625 , ""\\n\\t%s"" , VAR_626 ) ) ; break ; case ( VAR_627 << 8 | VAR_628 ) : case ( VAR_629 << 8 | VAR_630 ) : case ( VAR_631 << 8 | VAR_632 ) : VAR_633 = METHOD_150 ( VAR_634 , VAR_635 , VAR_636 , sizeof ( VAR_637 ) ) ; if ( VAR_638 == - 1 ) METHOD_151 ( ( VAR_639 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_640 == - 2 ) goto VAR_641 ; else METHOD_152 ( ( VAR_642 , ""\\n\\t%s"" , VAR_643 ) ) ; break ; default : METHOD_153 ( * VAR_644 , VAR_645 ) ; METHOD_154 ( ( VAR_646 , ""\\n\\tnoAFI%u/SAFI%udecoder"" , VAR_647 , VAR_648 ) ) ; if ( VAR_649 -> VAR_650 <= 1 ) METHOD_155 ( VAR_651 , VAR_652 , ""\\n\\t"" , VAR_653 ) ; VAR_654 = 0 ; VAR_655 = VAR_656 + VAR_657 ; break ; } if ( VAR_658 < 0 ) break ; VAR_659 += VAR_660 ; } VAR_661 : break ; case VAR_662 : METHOD_156 ( VAR_663 [ 0 ] , VAR_664 ) ; VAR_665 = METHOD_157 ( VAR_666 ) ; VAR_667 = VAR_668 [ 2 ] ; METHOD_158 ( ( VAR_669 , ""\\n\\tAFI:%s(%u),%sSAFI:%s(%u)"" , METHOD_159 ( VAR_670 , ""UnknownAFI"" , VAR_671 ) , VAR_672 , ( VAR_673 > 128 ) ? ""vendorspecific"" : """" , METHOD_160 ( VAR_674 , ""UnknownSAFI"" , VAR_675 ) , VAR_676 ) ) ; if ( VAR_677 == VAR_678 ) METHOD_161 ( ( VAR_679 , ""\\n\\tEnd-of-RibMarker(emptyNLRI)"" ) ) ; VAR_680 += 3 ; while ( VAR_681 < VAR_682 + VAR_683 ) { switch ( VAR_684 << 8 | VAR_685 ) { case ( VAR_686 << 8 | VAR_687 ) : case ( VAR_688 << 8 | VAR_689 ) : case ( VAR_690 << 8 | VAR_691 ) : VAR_692 = METHOD_162 ( VAR_693 , VAR_694 , VAR_695 , VAR_696 , sizeof ( VAR_697 ) ) ; if ( VAR_698 == - 1 ) METHOD_163 ( ( VAR_699 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_700 == - 2 ) goto VAR_701 ; else if ( VAR_702 == - 3 ) break ; else METHOD_164 ( ( VAR_703 , ""\\n\\t%s"" , VAR_704 ) ) ; break ; case ( VAR_705 << 8 | VAR_706 ) : VAR_707 = METHOD_165 ( VAR_708 , VAR_709 , VAR_710 , VAR_711 , sizeof ( VAR_712 ) ) ; if ( VAR_713 == - 1 ) METHOD_166 ( ( VAR_714 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_715 == - 2 ) goto VAR_716 ; else if ( VAR_717 == - 3 ) break ; else METHOD_167 ( ( VAR_718 , ""\\n\\t%s"" , VAR_719 ) ) ; break ; case ( VAR_720 << 8 | VAR_721 ) : case ( VAR_722 << 8 | VAR_723 ) : case ( VAR_724 << 8 | VAR_725 ) : VAR_726 = METHOD_168 ( VAR_727 , VAR_728 , VAR_729 , sizeof ( VAR_730 ) ) ; if ( VAR_731 == - 1 ) METHOD_169 ( ( VAR_732 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_733 == - 2 ) goto VAR_734 ; else METHOD_170 ( ( VAR_735 , ""\\n\\t%s"" , VAR_736 ) ) ; break ; case ( VAR_737 << 8 | VAR_738 ) : case ( VAR_739 << 8 | VAR_740 ) : case ( VAR_741 << 8 | VAR_742 ) : VAR_743 = METHOD_171 ( VAR_744 , VAR_745 , VAR_746 , VAR_747 , sizeof ( VAR_748 ) ) ; if ( VAR_749 == - 1 ) METHOD_172 ( ( VAR_750 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_751 == - 2 ) goto VAR_752 ; else if ( VAR_753 == - 3 ) break ; else METHOD_173 ( ( VAR_754 , ""\\n\\t%s"" , VAR_755 ) ) ; break ; case ( VAR_756 << 8 | VAR_757 ) : VAR_758 = METHOD_174 ( VAR_759 , VAR_760 , VAR_761 , VAR_762 , sizeof ( VAR_763 ) ) ; if ( VAR_764 == - 1 ) METHOD_175 ( ( VAR_765 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_766 == - 2 ) goto VAR_767 ; else if ( VAR_768 == - 3 ) break ; else METHOD_176 ( ( VAR_769 , ""\\n\\t%s"" , VAR_770 ) ) ; break ; case ( VAR_771 << 8 | VAR_772 ) : case ( VAR_773 << 8 | VAR_774 ) : case ( VAR_775 << 8 | VAR_776 ) : VAR_777 = METHOD_177 ( VAR_778 , VAR_779 , VAR_780 , sizeof ( VAR_781 ) ) ; if ( VAR_782 == - 1 ) METHOD_178 ( ( VAR_783 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_784 == - 2 ) goto VAR_785 ; else METHOD_179 ( ( VAR_786 , ""\\n\\t%s"" , VAR_787 ) ) ; break ; case ( VAR_788 << 8 | VAR_789 ) : case ( VAR_790 << 8 | VAR_791 ) : case ( VAR_792 << 8 | VAR_793 ) : case ( VAR_794 << 8 | VAR_795 ) : VAR_796 = METHOD_180 ( VAR_797 , VAR_798 , VAR_799 , sizeof ( VAR_800 ) ) ; if ( VAR_801 == - 1 ) METHOD_181 ( ( VAR_802 , ""\\n\\t(illegallength)"" ) ) ; else if ( VAR_803 == - 2 ) goto VAR_804 ; else METHOD_182 ( ( VAR_805 , ""\\n\\t%s"" , VAR_806 ) ) ; break ; case ( VAR_807 << 8 | VAR_808 ) : case ( VAR_809 << 8 | VAR_810 ) : case ( VAR_811 << 8 | VAR_812 ) : VAR_813 = METHOD_183 ( VAR_814 , VAR_815 , VAR_816 , sizeof ( VAR_817 ) ) ; if ( VAR_818 == - 1 ) METHOD_184 ( ( VAR_819 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_820 == - 2 ) goto VAR_821 ; else METHOD_185 ( ( VAR_822 , ""\\n\\t%s"" , VAR_823 ) ) ; break ; case ( VAR_824 << 8 | VAR_825 ) : case ( VAR_826 << 8 | VAR_827 ) : case ( VAR_828 << 8 | VAR_829 ) : VAR_830 = METHOD_186 ( VAR_831 , VAR_832 , VAR_833 , sizeof ( VAR_834 ) ) ; if ( VAR_835 == - 1 ) METHOD_187 ( ( VAR_836 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_837 == - 2 ) goto VAR_838 ; else METHOD_188 ( ( VAR_839 , ""\\n\\t%s"" , VAR_840 ) ) ; break ; case ( VAR_841 << 8 | VAR_842 ) : VAR_843 = METHOD_189 ( VAR_844 , VAR_845 , VAR_846 , sizeof ( VAR_847 ) ) ; if ( VAR_848 == - 1 ) METHOD_190 ( ( VAR_849 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_850 == - 2 ) goto VAR_851 ; else METHOD_191 ( ( VAR_852 , ""\\n\\t%s"" , VAR_853 ) ) ; break ; case ( VAR_854 << 8 | VAR_855 ) : case ( VAR_856 << 8 | VAR_857 ) : VAR_858 = METHOD_192 ( VAR_859 , VAR_860 , VAR_861 , sizeof ( VAR_862 ) ) ; if ( VAR_863 == - 1 ) METHOD_193 ( ( VAR_864 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_865 == - 2 ) goto VAR_866 ; else METHOD_194 ( ( VAR_867 , ""\\n\\t%s"" , VAR_868 ) ) ; break ; default : METHOD_195 ( * ( VAR_869 - 3 ) , VAR_870 ) ; METHOD_196 ( ( VAR_871 , ""noAFI%u/SAFI%udecoder"" , VAR_872 , VAR_873 ) ) ; if ( VAR_874 -> VAR_875 <= 1 ) METHOD_197 ( VAR_876 , VAR_877 - 3 , ""\\n\\t"" , VAR_878 ) ; VAR_879 = 0 ; VAR_880 = VAR_881 + VAR_882 ; break ; } if ( VAR_883 < 0 ) break ; VAR_884 += VAR_885 ; } break ; case VAR_886 : if ( VAR_887 % 8 ) { METHOD_198 ( ( VAR_888 , ""invalidlen"" ) ) ; break ; } while ( VAR_889 > 0 ) { TYPE_22 VAR_890 ; METHOD_199 ( VAR_891 [ 0 ] , 2 ) ; VAR_892 = METHOD_200 ( VAR_893 ) ; METHOD_201 ( ( VAR_894 , ""\\n\\t%s(0x%04x),Flags[%s]"" , METHOD_202 ( VAR_895 , ""unknownextdcommunitytypecode"" , VAR_896 ) , VAR_897 , METHOD_203 ( VAR_898 , ""none"" , VAR_899 ) ) ) ; METHOD_204 ( * ( VAR_900 + 2 ) , 6 ) ; switch ( VAR_901 ) { case VAR_902 : case VAR_903 : case VAR_904 : METHOD_205 ( ( VAR_905 , "":%u:%u(=%s)"" , METHOD_206 ( VAR_906 + 2 ) , METHOD_207 ( VAR_907 + 4 ) , METHOD_208 ( VAR_908 , VAR_909 + 4 ) ) ) ; break ; case VAR_910 : case VAR_911 : case VAR_912 : case VAR_913 : METHOD_209 ( ( VAR_914 , "":%s:%u"" , METHOD_210 ( VAR_915 , VAR_916 + 2 ) , METHOD_211 ( VAR_917 + 6 ) ) ) ; break ; case VAR_918 : case VAR_919 : METHOD_212 ( ( VAR_920 , "":%s:%u"" , METHOD_213 ( VAR_921 , VAR_922 , sizeof ( VAR_923 ) , METHOD_214 ( VAR_924 + 2 ) ) , METHOD_215 ( VAR_925 + 6 ) ) ) ; break ; case VAR_926 : VAR_927 . VAR_928 = METHOD_216 ( VAR_929 + 2 ) ; METHOD_217 ( ( VAR_930 , "":bandwidth:%.3fMbps"" , VAR_931 . VAR_932 * 8 / 1000000 ) ) ; break ; case VAR_933 : case VAR_934 : case VAR_935 : case VAR_936 : case VAR_937 : case VAR_938 : METHOD_218 ( ( VAR_939 , ""%s"" , METHOD_219 ( VAR_940 , VAR_941 + 2 ) ) ) ; break ; case VAR_942 : case VAR_943 : METHOD_220 ( ( VAR_944 , "":area:%s,router-type:%s,metric-type:%s%s"" , METHOD_221 ( VAR_945 , VAR_946 + 2 ) , METHOD_222 ( VAR_947 , ""unknown(0x%02x)"" , * ( VAR_948 + 6 ) ) , ( * ( VAR_949 + 7 ) & VAR_950 ) ? ""E2"" : """" , ( ( * ( VAR_951 + 6 ) == VAR_952 ) || ( * ( VAR_953 + 6 ) == VAR_954 ) ) ? ""E1"" : """" ) ) ; break ; case VAR_955 : METHOD_223 ( ( VAR_956 , "":%sControlFlags[0x%02x]:MTU%u"" , METHOD_224 ( VAR_957 , ""unknownencaps"" , * ( VAR_958 + 2 ) ) , * ( VAR_959 + 3 ) , METHOD_225 ( VAR_960 + 4 ) ) ) ; break ; case VAR_961 : METHOD_226 ( ( VAR_962 , "":AS%u"" , METHOD_227 ( VAR_963 + 2 ) ) ) ; break ; default : METHOD_228 ( * VAR_964 , 8 ) ; METHOD_229 ( VAR_965 , VAR_966 , ""\\n\\t"" , 8 ) ; break ; } VAR_967 -= 8 ; VAR_968 += 8 ; } break ; case VAR_969 : { TYPE_23 VAR_970 , VAR_971 ; METHOD_230 ( VAR_972 [ 0 ] , 5 ) ; VAR_973 = * ( VAR_974 + 1 ) ; VAR_975 = * VAR_976 ; VAR_977 = VAR_978 ; METHOD_231 ( ( VAR_979 , ""\\n\\tTunnel-type%s(%u),Flags[%s],MPLSLabel%u"" , METHOD_232 ( VAR_980 , ""Unknown"" , VAR_981 ) , VAR_982 , METHOD_233 ( VAR_983 , ""none"" , VAR_984 ) , METHOD_234 ( VAR_985 + 2 ) >> 4 ) ) ; VAR_986 += 5 ; VAR_987 -= 5 ; switch ( VAR_988 ) { case VAR_989 : case VAR_990 : METHOD_235 ( VAR_991 [ 0 ] , 8 ) ; METHOD_236 ( ( VAR_992 , ""\\n\\tSender%s,P-Group%s"" , METHOD_237 ( VAR_993 , VAR_994 ) , METHOD_238 ( VAR_995 , VAR_996 + 4 ) ) ) ; break ; case VAR_997 : METHOD_239 ( VAR_998 [ 0 ] , 8 ) ; METHOD_240 ( ( VAR_999 , ""\\n\\tRoot-Node%s,P-Group%s"" , METHOD_241 ( VAR_1000 , VAR_1001 ) , METHOD_242 ( VAR_1002 , VAR_1003 + 4 ) ) ) ; break ; case VAR_1004 : METHOD_243 ( VAR_1005 [ 0 ] , 4 ) ; METHOD_244 ( ( VAR_1006 , ""\\n\\tTunnel-Endpoint%s"" , METHOD_245 ( VAR_1007 , VAR_1008 ) ) ) ; break ; case VAR_1009 : case VAR_1010 : METHOD_246 ( VAR_1011 [ 0 ] , 8 ) ; METHOD_247 ( ( VAR_1012 , ""\\n\\tRoot-Node%s,LSP-ID0x%08x"" , METHOD_248 ( VAR_1013 , VAR_1014 ) , METHOD_249 ( VAR_1015 + 4 ) ) ) ; break ; case VAR_1016 : METHOD_250 ( VAR_1017 [ 0 ] , 8 ) ; METHOD_251 ( ( VAR_1018 , ""\\n\\tExtended-Tunnel-ID%s,P2MP-ID0x%08x"" , METHOD_252 ( VAR_1019 , VAR_1020 ) , METHOD_253 ( VAR_1021 + 4 ) ) ) ; break ; default : if ( VAR_1022 -> VAR_1023 <= 1 ) { METHOD_254 ( VAR_1024 , VAR_1025 , ""\\n\\t"" , VAR_1026 ) ; } } break ; } case VAR_1027 : { TYPE_24 VAR_1028 ; TYPE_25 VAR_1029 ; VAR_1030 = VAR_1031 ; while ( VAR_1032 >= 3 ) { METHOD_255 ( VAR_1033 [ 0 ] , 3 ) ; VAR_1034 = * VAR_1035 ; VAR_1036 = METHOD_256 ( VAR_1037 + 1 ) ; VAR_1038 += 3 ; VAR_1039 -= 3 ; METHOD_257 ( ( VAR_1040 , ""\\n\\t%sTLV(%u),length%u"" , METHOD_258 ( VAR_1041 , ""Unknown"" , VAR_1042 ) , VAR_1043 , VAR_1044 ) ) ; if ( VAR_1045 < 3 ) goto VAR_1046 ; VAR_1047 -= 3 ; METHOD_259 ( VAR_1048 [ 3 ] , VAR_1049 ) ; switch ( VAR_1050 ) { case VAR_1051 : if ( VAR_1052 < 8 ) goto VAR_1053 ; METHOD_260 ( ( VAR_1054 , "",metric%"" VAR_1055 , METHOD_261 ( VAR_1056 ) ) ) ; break ; default : if ( VAR_1057 -> VAR_1058 <= 1 ) { METHOD_262 ( VAR_1059 , VAR_1060 , ""\\n\\t"" , VAR_1061 ) ; } } VAR_1062 += VAR_1063 ; VAR_1064 -= VAR_1065 ; } break ; } case VAR_1066 : METHOD_263 ( VAR_1067 [ 0 ] , 4 ) ; if ( VAR_1068 < 4 ) goto VAR_1069 ; METHOD_264 ( ( VAR_1070 , ""\\n\\tOriginAS:%s"" , METHOD_265 ( VAR_1071 , VAR_1072 , sizeof ( VAR_1073 ) , METHOD_266 ( VAR_1074 ) ) ) ) ; VAR_1075 += 4 ; VAR_1076 -= 4 ; while ( VAR_1077 ) { TYPE_26 VAR_1078 , VAR_1079 , VAR_1080 ; METHOD_267 ( VAR_1081 [ 0 ] , 2 ) ; if ( VAR_1082 < 2 ) goto VAR_1083 ; VAR_1084 = * VAR_1085 ; VAR_1086 = * ( VAR_1087 + 1 ) ; VAR_1088 += 2 ; VAR_1089 -= 2 ; VAR_1090 = METHOD_268 ( VAR_1091 , VAR_1092 ) ; METHOD_269 ( VAR_1093 [ 0 ] , VAR_1094 ) ; if ( VAR_1095 < VAR_1096 ) goto VAR_1097 ; VAR_1098 = METHOD_270 ( VAR_1099 , VAR_1100 ) ; VAR_1101 += VAR_1102 ; VAR_1103 -= VAR_1104 ; METHOD_271 ( ( VAR_1105 , ""\\n\\t%s(%u),length:%u"" , METHOD_272 ( VAR_1106 , ""UnknownAttribute"" , VAR_1107 ) , VAR_1108 , VAR_1109 ) ) ; if ( VAR_1110 ) { METHOD_273 ( ( VAR_1111 , "",Flags[%s%s%s%s"" , VAR_1112 & 0x80 ? ""O"" : """" , VAR_1113 & 0x40 ? ""T"" : """" , VAR_1114 & 0x20 ? ""P"" : """" , VAR_1115 & 0x10 ? ""E"" : """" ) ) ; if ( VAR_1116 & 0xf ) METHOD_274 ( ( VAR_1117 , ""+%x"" , VAR_1118 & 0xf ) ) ; METHOD_275 ( ( VAR_1119 , ""]:"" ) ) ; } if ( ! METHOD_276 ( VAR_1120 , VAR_1121 , VAR_1122 , VAR_1123 ) ) return 0 ; VAR_1124 += VAR_1125 ; VAR_1126 -= VAR_1127 ; } break ; case VAR_1128 : if ( VAR_1129 == 0 || VAR_1130 % 12 ) { METHOD_277 ( ( VAR_1131 , ""invalidlen"" ) ) ; break ; } METHOD_278 ( ( VAR_1132 , ""\\n\\t"" ) ) ; while ( VAR_1133 > 0 ) { METHOD_279 ( * VAR_1134 , 12 ) ; METHOD_280 ( ( VAR_1135 , ""%u:%u:%u%s"" , METHOD_281 ( VAR_1136 ) , METHOD_282 ( VAR_1137 + 4 ) , METHOD_283 ( VAR_1138 + 8 ) , ( VAR_1139 > 12 ) ? "","" : """" ) ) ; VAR_1140 += 12 ; VAR_1141 -= 12 ; } break ; default : METHOD_284 ( * VAR_1142 , VAR_1143 ) ; METHOD_285 ( ( VAR_1144 , ""\\n\\tnoAttribute%udecoder"" , VAR_1145 ) ) ; if ( VAR_1146 -> VAR_1147 <= 1 ) METHOD_286 ( VAR_1148 , VAR_1149 , ""\\n\\t"" , VAR_1150 ) ; break ; } if ( VAR_1151 -> VAR_1152 > 1 && VAR_1153 ) { METHOD_287 ( * VAR_1154 , VAR_1155 ) ; METHOD_288 ( VAR_1156 , VAR_1157 , ""\\n\\t"" , VAR_1158 ) ; } return 1 ; VAR_1159 : return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 ; union { TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; } VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; const TYPE_12 * VAR_14 ; TYPE_13 VAR_15 [ VAR_16 + 100 ] ; TYPE_14 VAR_17 ; VAR_18 = VAR_19 ; VAR_20 = VAR_21 ; switch ( VAR_22 ) { case VAR_23 : if ( VAR_24 != 1 ) METHOD_1 ( ( VAR_25 , ""invalidlen"" ) ) ; else { METHOD_2 ( * VAR_26 ) ; METHOD_3 ( ( VAR_27 , ""%s"" , METHOD_4 ( VAR_28 , ""UnknownOriginTypecode"" , VAR_29 [ 0 ] ) ) ) ; } break ; case VAR_30 : case VAR_31 : if ( VAR_32 % 2 ) { METHOD_5 ( ( VAR_33 , ""invalidlen"" ) ) ; break ; } if ( ! VAR_34 ) { METHOD_6 ( ( VAR_35 , ""empty"" ) ) ; break ; } VAR_36 = METHOD_7 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; while ( VAR_41 < VAR_42 + VAR_43 ) { METHOD_8 ( VAR_44 [ 0 ] ) ; METHOD_9 ( ( VAR_45 , ""%s"" , METHOD_10 ( VAR_46 , ""?"" , VAR_47 [ 0 ] ) ) ) ; METHOD_11 ( VAR_48 [ 1 ] ) ; for ( VAR_49 = 0 ; VAR_50 < VAR_51 [ 1 ] * VAR_52 ; VAR_53 += VAR_54 ) { METHOD_12 ( VAR_55 [ 2 + VAR_56 ] , VAR_57 ) ; METHOD_13 ( ( VAR_58 , ""%s"" , METHOD_14 ( VAR_59 , VAR_60 , sizeof ( VAR_61 ) , VAR_62 == 2 ? METHOD_15 ( & VAR_63 [ 2 + VAR_64 ] ) : METHOD_16 ( & VAR_65 [ 2 + VAR_66 ] ) ) ) ) ; } METHOD_17 ( VAR_67 [ 0 ] ) ; METHOD_18 ( ( VAR_68 , ""%s"" , METHOD_19 ( VAR_69 , ""?"" , VAR_70 [ 0 ] ) ) ) ; METHOD_20 ( VAR_71 [ 1 ] ) ; VAR_72 += 2 + VAR_73 [ 1 ] * VAR_74 ; } break ; case VAR_75 : if ( VAR_76 != 4 ) METHOD_21 ( ( VAR_77 , ""invalidlen"" ) ) ; else { METHOD_22 ( VAR_78 [ 0 ] , 4 ) ; METHOD_23 ( ( VAR_79 , ""%s"" , METHOD_24 ( VAR_80 , VAR_81 ) ) ) ; } break ; case VAR_82 : case VAR_83 : if ( VAR_84 != 4 ) METHOD_25 ( ( VAR_85 , ""invalidlen"" ) ) ; else { METHOD_26 ( VAR_86 [ 0 ] , 4 ) ; METHOD_27 ( ( VAR_87 , ""%u"" , METHOD_28 ( VAR_88 ) ) ) ; } break ; case VAR_89 : if ( VAR_90 != 0 ) METHOD_29 ( ( VAR_91 , ""invalidlen"" ) ) ; break ; case VAR_92 : if ( VAR_93 != 6 && VAR_94 != 8 ) { METHOD_30 ( ( VAR_95 , ""invalidlen"" ) ) ; break ; } METHOD_31 ( VAR_96 [ 0 ] , VAR_97 ) ; if ( VAR_1064 == VAR_406 + 4 + sizeof ( struct STRUCT_OR_UNION_19 ) && VAR_98 == 6 ) { METHOD_32 ( ( VAR_99 , ""AS%s,origin%s"" , METHOD_33 ( VAR_100 , VAR_101 , sizeof ( VAR_102 ) , METHOD_34 ( VAR_103 ) ) , METHOD_35 ( VAR_104 , VAR_105 + 2 ) ) ) ; } else { METHOD_36 ( ( VAR_106 , ""AS%s,origin%s"" , METHOD_37 ( VAR_107 , VAR_108 , sizeof ( VAR_109 ) , METHOD_38 ( VAR_110 ) ) , METHOD_39 ( VAR_111 , VAR_112 + 4 ) ) ) ; } break ; case VAR_113 : if ( VAR_114 != 8 ) { METHOD_40 ( ( VAR_115 , ""invalidlen"" ) ) ; break ; } METHOD_41 ( VAR_116 [ 0 ] , 8 ) ; METHOD_42 ( ( VAR_117 , ""AS%s,origin%s"" , METHOD_43 ( VAR_118 , VAR_119 , sizeof ( VAR_120 ) , METHOD_44 ( VAR_121 ) ) , METHOD_45 ( VAR_122 , VAR_123 + 4 ) ) ) ; break ; case VAR_124 : if ( VAR_125 % 4 ) { METHOD_46 ( ( VAR_126 , ""invalidlen"" ) ) ; break ; } while ( VAR_127 > 0 ) { TYPE_15 VAR_128 ; METHOD_47 ( VAR_129 [ 0 ] , 4 ) ; VAR_130 = METHOD_48 ( VAR_131 ) ; switch ( VAR_132 ) { case VAR_133 : METHOD_49 ( ( VAR_134 , ""NO_EXPORT"" ) ) ; break ; case VAR_135 : METHOD_50 ( ( VAR_136 , ""NO_ADVERTISE"" ) ) ; break ; case VAR_137 : METHOD_51 ( ( VAR_138 , ""NO_EXPORT_SUBCONFED"" ) ) ; break ; default : METHOD_52 ( ( VAR_139 , ""%u:%u%s"" , ( VAR_140 >> 16 ) & 0xffff , VAR_141 & 0xffff , ( VAR_142 > 4 ) ? "","" : """" ) ) ; break ; } VAR_143 -= 4 ; VAR_144 += 4 ; } break ; case VAR_145 : if ( VAR_146 != 4 ) { METHOD_53 ( ( VAR_147 , ""invalidlen"" ) ) ; break ; } METHOD_54 ( VAR_148 [ 0 ] , 4 ) ; METHOD_55 ( ( VAR_149 , ""%s"" , METHOD_56 ( VAR_150 , VAR_151 ) ) ) ; break ; case VAR_152 : if ( VAR_153 % 4 ) { METHOD_57 ( ( VAR_154 , ""invalidlen"" ) ) ; break ; } while ( VAR_155 > 0 ) { METHOD_58 ( VAR_156 [ 0 ] , 4 ) ; METHOD_59 ( ( VAR_157 , ""%s%s"" , METHOD_60 ( VAR_158 , VAR_159 ) , ( VAR_160 > 4 ) ? "","" : """" ) ) ; VAR_161 -= 4 ; VAR_162 += 4 ; } break ; case VAR_163 : METHOD_61 ( VAR_164 [ 0 ] , 3 ) ; VAR_165 = METHOD_62 ( VAR_166 ) ; VAR_167 = VAR_168 [ 2 ] ; METHOD_63 ( ( VAR_169 , ""\\n\\tAFI:%s(%u),%sSAFI:%s(%u)"" , METHOD_64 ( VAR_170 , ""UnknownAFI"" , VAR_171 ) , VAR_172 , ( VAR_173 > 128 ) ? ""vendorspecific"" : """" , METHOD_65 ( VAR_174 , ""UnknownSAFI"" , VAR_175 ) , VAR_176 ) ) ; switch ( VAR_177 << 8 | VAR_178 ) { case ( VAR_179 << 8 | VAR_180 ) : case ( VAR_181 << 8 | VAR_182 ) : case ( VAR_183 << 8 | VAR_184 ) : case ( VAR_185 << 8 | VAR_186 ) : case ( VAR_187 << 8 | VAR_188 ) : case ( VAR_189 << 8 | VAR_190 ) : case ( VAR_191 << 8 | VAR_192 ) : case ( VAR_193 << 8 | VAR_194 ) : case ( VAR_195 << 8 | VAR_196 ) : case ( VAR_197 << 8 | VAR_198 ) : case ( VAR_199 << 8 | VAR_200 ) : case ( VAR_201 << 8 | VAR_202 ) : case ( VAR_203 << 8 | VAR_204 ) : case ( VAR_205 << 8 | VAR_206 ) : case ( VAR_207 << 8 | VAR_208 ) : case ( VAR_209 << 8 | VAR_210 ) : case ( VAR_211 << 8 | VAR_212 ) : case ( VAR_213 << 8 | VAR_214 ) : case ( VAR_215 << 8 | VAR_216 ) : case ( VAR_217 << 8 | VAR_218 ) : case ( VAR_219 << 8 | VAR_220 ) : case ( VAR_221 << 8 | VAR_222 ) : case ( VAR_223 << 8 | VAR_224 ) : case ( VAR_225 << 8 | VAR_226 ) : case ( VAR_227 << 8 | VAR_228 ) : case ( VAR_229 << 8 | VAR_230 ) : case ( VAR_231 << 8 | VAR_232 ) : break ; default : METHOD_66 ( VAR_233 [ 0 ] , VAR_234 ) ; METHOD_67 ( ( VAR_235 , ""\\n\\tnoAFI%u/SAFI%udecoder"" , VAR_236 , VAR_237 ) ) ; if ( VAR_238 -> VAR_239 <= 1 ) METHOD_68 ( VAR_240 , VAR_241 , ""\\n\\t"" , VAR_242 ) ; goto VAR_243 ; break ; } VAR_244 += 3 ; METHOD_69 ( VAR_245 [ 0 ] ) ; VAR_246 = VAR_247 [ 0 ] ; VAR_248 = VAR_249 ; VAR_250 ++ ; if ( VAR_251 ) { TYPE_16 VAR_252 = 0 ; METHOD_70 ( ( VAR_253 , ""\\n\\tnexthop:"" ) ) ; while ( VAR_254 > 0 ) { if ( VAR_255 ++ > 0 ) { METHOD_71 ( ( VAR_256 , "","" ) ) ; } switch ( VAR_257 << 8 | VAR_258 ) { case ( VAR_259 << 8 | VAR_260 ) : case ( VAR_261 << 8 | VAR_262 ) : case ( VAR_263 << 8 | VAR_264 ) : case ( VAR_265 << 8 | VAR_266 ) : case ( VAR_267 << 8 | VAR_268 ) : case ( VAR_269 << 8 | VAR_270 ) : case ( VAR_271 << 8 | VAR_272 ) : if ( VAR_273 < ( TYPE_17 ) sizeof ( struct STRUCT_OR_UNION_0 ) ) { METHOD_72 ( ( VAR_274 , ""invalidlen"" ) ) ; VAR_275 = 0 ; } else { METHOD_73 ( VAR_276 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_1 ) ) ; METHOD_74 ( ( VAR_277 , ""%s"" , METHOD_75 ( VAR_278 , VAR_279 ) ) ) ; VAR_280 -= sizeof ( struct STRUCT_OR_UNION_2 ) ; VAR_281 += sizeof ( struct STRUCT_OR_UNION_3 ) ; } break ; case ( VAR_282 << 8 | VAR_283 ) : case ( VAR_284 << 8 | VAR_285 ) : case ( VAR_286 << 8 | VAR_287 ) : if ( VAR_288 < ( TYPE_18 ) ( sizeof ( struct STRUCT_OR_UNION_4 ) + VAR_289 ) ) { METHOD_76 ( ( VAR_290 , ""invalidlen"" ) ) ; VAR_291 = 0 ; } else { METHOD_77 ( VAR_292 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_5 ) + VAR_293 ) ; METHOD_78 ( ( VAR_294 , ""RD:%s,%s"" , METHOD_79 ( VAR_295 , VAR_296 ) , METHOD_80 ( VAR_297 , VAR_298 + VAR_299 ) ) ) ; VAR_300 -= ( sizeof ( struct STRUCT_OR_UNION_6 ) + VAR_301 ) ; VAR_302 += ( sizeof ( struct STRUCT_OR_UNION_7 ) + VAR_303 ) ; } break ; case ( VAR_304 << 8 | VAR_305 ) : case ( VAR_306 << 8 | VAR_307 ) : case ( VAR_308 << 8 | VAR_309 ) : case ( VAR_310 << 8 | VAR_311 ) : if ( VAR_312 < ( TYPE_19 ) sizeof ( struct STRUCT_OR_UNION_8 ) ) { METHOD_81 ( ( VAR_313 , ""invalidlen"" ) ) ; VAR_314 = 0 ; } else { METHOD_82 ( VAR_315 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_9 ) ) ; METHOD_83 ( ( VAR_316 , ""%s"" , METHOD_84 ( VAR_317 , VAR_318 ) ) ) ; VAR_319 -= sizeof ( struct STRUCT_OR_UNION_10 ) ; VAR_320 += sizeof ( struct STRUCT_OR_UNION_11 ) ; } break ; case ( VAR_321 << 8 | VAR_322 ) : case ( VAR_323 << 8 | VAR_324 ) : case ( VAR_325 << 8 | VAR_326 ) : if ( VAR_327 < ( TYPE_20 ) ( sizeof ( struct STRUCT_OR_UNION_12 ) + VAR_328 ) ) { METHOD_85 ( ( VAR_329 , ""invalidlen"" ) ) ; VAR_330 = 0 ; } else { METHOD_86 ( VAR_331 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_13 ) + VAR_332 ) ; METHOD_87 ( ( VAR_333 , ""RD:%s,%s"" , METHOD_88 ( VAR_334 , VAR_335 ) , METHOD_89 ( VAR_336 , VAR_337 + VAR_338 ) ) ) ; VAR_339 -= ( sizeof ( struct STRUCT_OR_UNION_14 ) + VAR_340 ) ; VAR_341 += ( sizeof ( struct STRUCT_OR_UNION_15 ) + VAR_342 ) ; } break ; case ( VAR_343 << 8 | VAR_344 ) : case ( VAR_345 << 8 | VAR_346 ) : case ( VAR_347 << 8 | VAR_348 ) : case ( VAR_349 << 8 | VAR_350 ) : if ( VAR_351 < ( TYPE_21 ) sizeof ( struct STRUCT_OR_UNION_16 ) ) { METHOD_90 ( ( VAR_352 , ""invalidlen"" ) ) ; VAR_353 = 0 ; } else { METHOD_91 ( VAR_354 [ 0 ] , sizeof ( struct STRUCT_OR_UNION_17 ) ) ; METHOD_92 ( ( VAR_355 , ""%s"" , METHOD_93 ( VAR_356 , VAR_357 ) ) ) ; VAR_358 -= ( sizeof ( struct STRUCT_OR_UNION_18 ) ) ; VAR_359 += ( sizeof ( struct STRUCT_OR_UNION_19 ) ) ; } break ; case ( VAR_360 << 8 | VAR_361 ) : case ( VAR_362 << 8 | VAR_363 ) : case ( VAR_364 << 8 | VAR_365 ) : METHOD_94 ( VAR_366 [ 0 ] , VAR_367 ) ; METHOD_95 ( ( VAR_368 , ""%s"" , METHOD_96 ( VAR_369 , VAR_370 , VAR_371 ) ) ) ; VAR_372 += VAR_373 ; VAR_374 = 0 ; break ; case ( VAR_375 << 8 | VAR_376 ) : case ( VAR_377 << 8 | VAR_378 ) : case ( VAR_379 << 8 | VAR_380 ) : if ( VAR_381 < VAR_382 + 1 ) { METHOD_97 ( ( VAR_383 , ""invalidlen"" ) ) ; VAR_384 = 0 ; } else { METHOD_98 ( VAR_385 [ 0 ] , VAR_386 ) ; METHOD_99 ( ( VAR_387 , ""RD:%s,%s"" , METHOD_100 ( VAR_388 , VAR_389 ) , METHOD_101 ( VAR_390 , VAR_391 + VAR_392 , VAR_393 - VAR_394 ) ) ) ; if ( METHOD_102 ( VAR_395 + VAR_396 ) == 0x47000601 ) METHOD_103 ( ( VAR_397 , ""=%s"" , METHOD_104 ( VAR_398 , VAR_399 + VAR_400 + 4 ) ) ) ; else if ( VAR_1064 == VAR_406 + 3 + sizeof ( struct STRUCT_OR_UNION_15 ) && METHOD_105 ( VAR_401 + VAR_402 ) == 0x350000 ) METHOD_106 ( ( VAR_403 , ""=%s"" , METHOD_107 ( VAR_404 , VAR_405 + VAR_406 + 3 ) ) ) ; VAR_407 += VAR_408 ; VAR_409 = 0 ; } break ; default : METHOD_108 ( VAR_410 [ 0 ] , VAR_411 ) ; METHOD_109 ( ( VAR_412 , ""noAFI%u/SAFI%udecoder"" , VAR_413 , VAR_414 ) ) ; if ( VAR_415 -> VAR_416 <= 1 ) METHOD_110 ( VAR_417 , VAR_418 , ""\\n\\t"" , VAR_419 ) ; VAR_420 += VAR_421 ; VAR_422 = 0 ; goto VAR_423 ; break ; } } } METHOD_111 ( ( VAR_424 , "",nh-length:%u"" , VAR_425 ) ) ; VAR_426 += VAR_427 ; METHOD_112 ( VAR_428 [ 0 ] ) ; VAR_429 = VAR_430 [ 0 ] ; VAR_431 ++ ; if ( VAR_432 ) { METHOD_113 ( ( VAR_433 , ""\\n\\t%uSNPA"" , VAR_434 ) ) ; for ( ; VAR_435 > 0 ; VAR_436 -- ) { METHOD_114 ( VAR_437 [ 0 ] ) ; METHOD_115 ( ( VAR_438 , ""\\n\\t%dbytes"" , VAR_439 [ 0 ] ) ) ; VAR_440 += VAR_441 [ 0 ] + 1 ; } } else { METHOD_116 ( ( VAR_442 , "",noSNPA"" ) ) ; } while ( VAR_443 < VAR_444 + VAR_445 ) { switch ( VAR_446 << 8 | VAR_447 ) { case ( VAR_448 << 8 | VAR_449 ) : case ( VAR_450 << 8 | VAR_451 ) : case ( VAR_452 << 8 | VAR_453 ) : VAR_454 = METHOD_117 ( VAR_455 , VAR_456 , VAR_457 , VAR_458 , sizeof ( VAR_459 ) ) ; if ( VAR_460 == - 1 ) METHOD_118 ( ( VAR_461 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_462 == - 2 ) goto VAR_463 ; else if ( VAR_464 == - 3 ) break ; else METHOD_119 ( ( VAR_465 , ""\\n\\t%s"" , VAR_466 ) ) ; break ; case ( VAR_467 << 8 | VAR_468 ) : VAR_469 = METHOD_120 ( VAR_470 , VAR_471 , VAR_472 , VAR_473 , sizeof ( VAR_474 ) ) ; if ( VAR_475 == - 1 ) METHOD_121 ( ( VAR_476 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_477 == - 2 ) goto VAR_478 ; else if ( VAR_479 == - 3 ) break ; else METHOD_122 ( ( VAR_480 , ""\\n\\t%s"" , VAR_481 ) ) ; break ; case ( VAR_482 << 8 | VAR_483 ) : case ( VAR_484 << 8 | VAR_485 ) : case ( VAR_486 << 8 | VAR_487 ) : VAR_488 = METHOD_123 ( VAR_489 , VAR_490 , VAR_491 , sizeof ( VAR_492 ) ) ; if ( VAR_493 == - 1 ) METHOD_124 ( ( VAR_494 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_495 == - 2 ) goto VAR_496 ; else METHOD_125 ( ( VAR_497 , ""\\n\\t%s"" , VAR_498 ) ) ; break ; case ( VAR_499 << 8 | VAR_500 ) : VAR_501 = METHOD_126 ( VAR_502 , VAR_503 , VAR_504 , sizeof ( VAR_505 ) ) ; if ( VAR_506 == - 1 ) METHOD_127 ( ( VAR_507 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_508 == - 2 ) goto VAR_509 ; else METHOD_128 ( ( VAR_510 , ""\\n\\t%s"" , VAR_511 ) ) ; break ; case ( VAR_512 << 8 | VAR_513 ) : case ( VAR_514 << 8 | VAR_515 ) : VAR_516 = METHOD_129 ( VAR_517 , VAR_518 , VAR_519 , sizeof ( VAR_520 ) ) ; if ( VAR_521 == - 1 ) METHOD_130 ( ( VAR_522 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_523 == - 2 ) goto VAR_524 ; else METHOD_131 ( ( VAR_525 , ""\\n\\t%s"" , VAR_526 ) ) ; break ; case ( VAR_527 << 8 | VAR_528 ) : VAR_529 = METHOD_132 ( VAR_530 , VAR_531 , VAR_532 , sizeof ( VAR_533 ) ) ; if ( VAR_534 == - 1 ) METHOD_133 ( ( VAR_535 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_536 == - 2 ) goto VAR_537 ; else METHOD_134 ( ( VAR_538 , ""\\n\\t%s"" , VAR_539 ) ) ; break ; case ( VAR_540 << 8 | VAR_541 ) : case ( VAR_542 << 8 | VAR_543 ) : case ( VAR_544 << 8 | VAR_545 ) : VAR_546 = METHOD_135 ( VAR_547 , VAR_548 , VAR_549 , VAR_550 , sizeof ( VAR_551 ) ) ; if ( VAR_552 == - 1 ) METHOD_136 ( ( VAR_553 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_554 == - 2 ) goto VAR_555 ; else if ( VAR_556 == - 3 ) break ; else METHOD_137 ( ( VAR_557 , ""\\n\\t%s"" , VAR_558 ) ) ; break ; case ( VAR_559 << 8 | VAR_560 ) : VAR_561 = METHOD_138 ( VAR_562 , VAR_563 , VAR_564 , VAR_565 , sizeof ( VAR_566 ) ) ; if ( VAR_567 == - 1 ) METHOD_139 ( ( VAR_568 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_569 == - 2 ) goto VAR_570 ; else if ( VAR_571 == - 3 ) break ; else METHOD_140 ( ( VAR_572 , ""\\n\\t%s"" , VAR_573 ) ) ; break ; case ( VAR_574 << 8 | VAR_575 ) : case ( VAR_576 << 8 | VAR_577 ) : case ( VAR_578 << 8 | VAR_579 ) : VAR_580 = METHOD_141 ( VAR_581 , VAR_582 , VAR_583 , sizeof ( VAR_584 ) ) ; if ( VAR_585 == - 1 ) METHOD_142 ( ( VAR_586 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_587 == - 2 ) goto VAR_588 ; else METHOD_143 ( ( VAR_589 , ""\\n\\t%s"" , VAR_590 ) ) ; break ; case ( VAR_591 << 8 | VAR_592 ) : case ( VAR_593 << 8 | VAR_594 ) : case ( VAR_595 << 8 | VAR_596 ) : case ( VAR_597 << 8 | VAR_598 ) : VAR_599 = METHOD_144 ( VAR_600 , VAR_601 , VAR_602 , sizeof ( VAR_603 ) ) ; if ( VAR_604 == - 1 ) METHOD_145 ( ( VAR_605 , ""\\n\\t(illegallength)"" ) ) ; else if ( VAR_606 == - 2 ) goto VAR_607 ; else METHOD_146 ( ( VAR_608 , ""\\n\\t%s"" , VAR_609 ) ) ; break ; case ( VAR_610 << 8 | VAR_611 ) : case ( VAR_612 << 8 | VAR_613 ) : case ( VAR_614 << 8 | VAR_615 ) : VAR_616 = METHOD_147 ( VAR_617 , VAR_618 , VAR_619 , sizeof ( VAR_620 ) ) ; if ( VAR_621 == - 1 ) METHOD_148 ( ( VAR_622 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_623 == - 2 ) goto VAR_624 ; else METHOD_149 ( ( VAR_625 , ""\\n\\t%s"" , VAR_626 ) ) ; break ; case ( VAR_627 << 8 | VAR_628 ) : case ( VAR_629 << 8 | VAR_630 ) : case ( VAR_631 << 8 | VAR_632 ) : VAR_633 = METHOD_150 ( VAR_634 , VAR_635 , VAR_636 , sizeof ( VAR_637 ) ) ; if ( VAR_638 == - 1 ) METHOD_151 ( ( VAR_639 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_640 == - 2 ) goto VAR_641 ; else METHOD_152 ( ( VAR_642 , ""\\n\\t%s"" , VAR_643 ) ) ; break ; default : METHOD_153 ( * VAR_644 , VAR_645 ) ; METHOD_154 ( ( VAR_646 , ""\\n\\tnoAFI%u/SAFI%udecoder"" , VAR_647 , VAR_648 ) ) ; if ( VAR_649 -> VAR_650 <= 1 ) METHOD_155 ( VAR_651 , VAR_652 , ""\\n\\t"" , VAR_653 ) ; VAR_654 = 0 ; VAR_655 = VAR_656 + VAR_657 ; break ; } if ( VAR_658 < 0 ) break ; VAR_659 += VAR_660 ; } VAR_661 : break ; case VAR_662 : METHOD_156 ( VAR_663 [ 0 ] , VAR_664 ) ; VAR_665 = METHOD_157 ( VAR_666 ) ; VAR_667 = VAR_668 [ 2 ] ; METHOD_158 ( ( VAR_669 , ""\\n\\tAFI:%s(%u),%sSAFI:%s(%u)"" , METHOD_159 ( VAR_670 , ""UnknownAFI"" , VAR_671 ) , VAR_672 , ( VAR_673 > 128 ) ? ""vendorspecific"" : """" , METHOD_160 ( VAR_674 , ""UnknownSAFI"" , VAR_675 ) , VAR_676 ) ) ; if ( VAR_677 == VAR_678 ) METHOD_161 ( ( VAR_679 , ""\\n\\tEnd-of-RibMarker(emptyNLRI)"" ) ) ; VAR_680 += 3 ; while ( VAR_681 < VAR_682 + VAR_683 ) { switch ( VAR_684 << 8 | VAR_685 ) { case ( VAR_686 << 8 | VAR_687 ) : case ( VAR_688 << 8 | VAR_689 ) : case ( VAR_690 << 8 | VAR_691 ) : VAR_692 = METHOD_162 ( VAR_693 , VAR_694 , VAR_695 , VAR_696 , sizeof ( VAR_697 ) ) ; if ( VAR_698 == - 1 ) METHOD_163 ( ( VAR_699 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_700 == - 2 ) goto VAR_701 ; else if ( VAR_702 == - 3 ) break ; else METHOD_164 ( ( VAR_703 , ""\\n\\t%s"" , VAR_704 ) ) ; break ; case ( VAR_705 << 8 | VAR_706 ) : VAR_707 = METHOD_165 ( VAR_708 , VAR_709 , VAR_710 , VAR_711 , sizeof ( VAR_712 ) ) ; if ( VAR_713 == - 1 ) METHOD_166 ( ( VAR_714 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_715 == - 2 ) goto VAR_716 ; else if ( VAR_717 == - 3 ) break ; else METHOD_167 ( ( VAR_718 , ""\\n\\t%s"" , VAR_719 ) ) ; break ; case ( VAR_720 << 8 | VAR_721 ) : case ( VAR_722 << 8 | VAR_723 ) : case ( VAR_724 << 8 | VAR_725 ) : VAR_726 = METHOD_168 ( VAR_727 , VAR_728 , VAR_729 , sizeof ( VAR_730 ) ) ; if ( VAR_731 == - 1 ) METHOD_169 ( ( VAR_732 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_733 == - 2 ) goto VAR_734 ; else METHOD_170 ( ( VAR_735 , ""\\n\\t%s"" , VAR_736 ) ) ; break ; case ( VAR_737 << 8 | VAR_738 ) : case ( VAR_739 << 8 | VAR_740 ) : case ( VAR_741 << 8 | VAR_742 ) : VAR_743 = METHOD_171 ( VAR_744 , VAR_745 , VAR_746 , VAR_747 , sizeof ( VAR_748 ) ) ; if ( VAR_749 == - 1 ) METHOD_172 ( ( VAR_750 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_751 == - 2 ) goto VAR_752 ; else if ( VAR_753 == - 3 ) break ; else METHOD_173 ( ( VAR_754 , ""\\n\\t%s"" , VAR_755 ) ) ; break ; case ( VAR_756 << 8 | VAR_757 ) : VAR_758 = METHOD_174 ( VAR_759 , VAR_760 , VAR_761 , VAR_762 , sizeof ( VAR_763 ) ) ; if ( VAR_764 == - 1 ) METHOD_175 ( ( VAR_765 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_766 == - 2 ) goto VAR_767 ; else if ( VAR_768 == - 3 ) break ; else METHOD_176 ( ( VAR_769 , ""\\n\\t%s"" , VAR_770 ) ) ; break ; case ( VAR_771 << 8 | VAR_772 ) : case ( VAR_773 << 8 | VAR_774 ) : case ( VAR_775 << 8 | VAR_776 ) : VAR_777 = METHOD_177 ( VAR_778 , VAR_779 , VAR_780 , sizeof ( VAR_781 ) ) ; if ( VAR_782 == - 1 ) METHOD_178 ( ( VAR_783 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_784 == - 2 ) goto VAR_785 ; else METHOD_179 ( ( VAR_786 , ""\\n\\t%s"" , VAR_787 ) ) ; break ; case ( VAR_788 << 8 | VAR_789 ) : case ( VAR_790 << 8 | VAR_791 ) : case ( VAR_792 << 8 | VAR_793 ) : case ( VAR_794 << 8 | VAR_795 ) : VAR_796 = METHOD_180 ( VAR_797 , VAR_798 , VAR_799 , sizeof ( VAR_800 ) ) ; if ( VAR_801 == - 1 ) METHOD_181 ( ( VAR_802 , ""\\n\\t(illegallength)"" ) ) ; else if ( VAR_803 == - 2 ) goto VAR_804 ; else METHOD_182 ( ( VAR_805 , ""\\n\\t%s"" , VAR_806 ) ) ; break ; case ( VAR_807 << 8 | VAR_808 ) : case ( VAR_809 << 8 | VAR_810 ) : case ( VAR_811 << 8 | VAR_812 ) : VAR_813 = METHOD_183 ( VAR_814 , VAR_815 , VAR_816 , sizeof ( VAR_817 ) ) ; if ( VAR_818 == - 1 ) METHOD_184 ( ( VAR_819 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_820 == - 2 ) goto VAR_821 ; else METHOD_185 ( ( VAR_822 , ""\\n\\t%s"" , VAR_823 ) ) ; break ; case ( VAR_824 << 8 | VAR_825 ) : case ( VAR_826 << 8 | VAR_827 ) : case ( VAR_828 << 8 | VAR_829 ) : VAR_830 = METHOD_186 ( VAR_831 , VAR_832 , VAR_833 , sizeof ( VAR_834 ) ) ; if ( VAR_835 == - 1 ) METHOD_187 ( ( VAR_836 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_837 == - 2 ) goto VAR_838 ; else METHOD_188 ( ( VAR_839 , ""\\n\\t%s"" , VAR_840 ) ) ; break ; case ( VAR_841 << 8 | VAR_842 ) : VAR_843 = METHOD_189 ( VAR_844 , VAR_845 , VAR_846 , sizeof ( VAR_847 ) ) ; if ( VAR_848 == - 1 ) METHOD_190 ( ( VAR_849 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_850 == - 2 ) goto VAR_851 ; else METHOD_191 ( ( VAR_852 , ""\\n\\t%s"" , VAR_853 ) ) ; break ; case ( VAR_854 << 8 | VAR_855 ) : case ( VAR_856 << 8 | VAR_857 ) : VAR_858 = METHOD_192 ( VAR_859 , VAR_860 , VAR_861 , sizeof ( VAR_862 ) ) ; if ( VAR_863 == - 1 ) METHOD_193 ( ( VAR_864 , ""\\n\\t(illegalprefixlength)"" ) ) ; else if ( VAR_865 == - 2 ) goto VAR_866 ; else METHOD_194 ( ( VAR_867 , ""\\n\\t%s"" , VAR_868 ) ) ; break ; default : METHOD_195 ( * ( VAR_869 - 3 ) , VAR_870 ) ; METHOD_196 ( ( VAR_871 , ""noAFI%u/SAFI%udecoder"" , VAR_872 , VAR_873 ) ) ; if ( VAR_874 -> VAR_875 <= 1 ) METHOD_197 ( VAR_876 , VAR_877 - 3 , ""\\n\\t"" , VAR_878 ) ; VAR_879 = 0 ; VAR_880 = VAR_881 + VAR_882 ; break ; } if ( VAR_883 < 0 ) break ; VAR_884 += VAR_885 ; } break ; case VAR_886 : if ( VAR_887 % 8 ) { METHOD_198 ( ( VAR_888 , ""invalidlen"" ) ) ; break ; } while ( VAR_889 > 0 ) { TYPE_22 VAR_890 ; METHOD_199 ( VAR_891 [ 0 ] , 2 ) ; VAR_892 = METHOD_200 ( VAR_893 ) ; METHOD_201 ( ( VAR_894 , ""\\n\\t%s(0x%04x),Flags[%s]"" , METHOD_202 ( VAR_895 , ""unknownextdcommunitytypecode"" , VAR_896 ) , VAR_897 , METHOD_203 ( VAR_898 , ""none"" , VAR_899 ) ) ) ; METHOD_204 ( * ( VAR_900 + 2 ) , 6 ) ; switch ( VAR_901 ) { case VAR_902 : case VAR_903 : case VAR_904 : METHOD_205 ( ( VAR_905 , "":%u:%u(=%s)"" , METHOD_206 ( VAR_906 + 2 ) , METHOD_207 ( VAR_907 + 4 ) , METHOD_208 ( VAR_908 , VAR_909 + 4 ) ) ) ; break ; case VAR_910 : case VAR_911 : case VAR_912 : case VAR_913 : METHOD_209 ( ( VAR_914 , "":%s:%u"" , METHOD_210 ( VAR_915 , VAR_916 + 2 ) , METHOD_211 ( VAR_917 + 6 ) ) ) ; break ; case VAR_918 : case VAR_919 : METHOD_212 ( ( VAR_920 , "":%s:%u"" , METHOD_213 ( VAR_921 , VAR_922 , sizeof ( VAR_923 ) , METHOD_214 ( VAR_924 + 2 ) ) , METHOD_215 ( VAR_925 + 6 ) ) ) ; break ; case VAR_926 : VAR_927 . VAR_928 = METHOD_216 ( VAR_929 + 2 ) ; METHOD_217 ( ( VAR_930 , "":bandwidth:%.3fMbps"" , VAR_931 . VAR_932 * 8 / 1000000 ) ) ; break ; case VAR_933 : case VAR_934 : case VAR_935 : case VAR_936 : case VAR_937 : case VAR_938 : METHOD_218 ( ( VAR_939 , ""%s"" , METHOD_219 ( VAR_940 , VAR_941 + 2 ) ) ) ; break ; case VAR_942 : case VAR_943 : METHOD_220 ( ( VAR_944 , "":area:%s,router-type:%s,metric-type:%s%s"" , METHOD_221 ( VAR_945 , VAR_946 + 2 ) , METHOD_222 ( VAR_947 , ""unknown(0x%02x)"" , * ( VAR_948 + 6 ) ) , ( * ( VAR_949 + 7 ) & VAR_950 ) ? ""E2"" : """" , ( ( * ( VAR_951 + 6 ) == VAR_952 ) || ( * ( VAR_953 + 6 ) == VAR_954 ) ) ? ""E1"" : """" ) ) ; break ; case VAR_955 : METHOD_223 ( ( VAR_956 , "":%sControlFlags[0x%02x]:MTU%u"" , METHOD_224 ( VAR_957 , ""unknownencaps"" , * ( VAR_958 + 2 ) ) , * ( VAR_959 + 3 ) , METHOD_225 ( VAR_960 + 4 ) ) ) ; break ; case VAR_961 : METHOD_226 ( ( VAR_962 , "":AS%u"" , METHOD_227 ( VAR_963 + 2 ) ) ) ; break ; default : METHOD_228 ( * VAR_964 , 8 ) ; METHOD_229 ( VAR_965 , VAR_966 , ""\\n\\t"" , 8 ) ; break ; } VAR_967 -= 8 ; VAR_968 += 8 ; } break ; case VAR_969 : { TYPE_23 VAR_970 , VAR_971 ; METHOD_230 ( VAR_972 [ 0 ] , 5 ) ; VAR_973 = * ( VAR_974 + 1 ) ; VAR_975 = * VAR_976 ; VAR_977 = VAR_978 ; METHOD_231 ( ( VAR_979 , ""\\n\\tTunnel-type%s(%u),Flags[%s],MPLSLabel%u"" , METHOD_232 ( VAR_980 , ""Unknown"" , VAR_981 ) , VAR_982 , METHOD_233 ( VAR_983 , ""none"" , VAR_984 ) , METHOD_234 ( VAR_985 + 2 ) >> 4 ) ) ; VAR_986 += 5 ; VAR_987 -= 5 ; switch ( VAR_988 ) { case VAR_989 : case VAR_990 : METHOD_235 ( VAR_991 [ 0 ] , 8 ) ; METHOD_236 ( ( VAR_992 , ""\\n\\tSender%s,P-Group%s"" , METHOD_237 ( VAR_993 , VAR_994 ) , METHOD_238 ( VAR_995 , VAR_996 + 4 ) ) ) ; break ; case VAR_997 : METHOD_239 ( VAR_998 [ 0 ] , 8 ) ; METHOD_240 ( ( VAR_999 , ""\\n\\tRoot-Node%s,P-Group%s"" , METHOD_241 ( VAR_1000 , VAR_1001 ) , METHOD_242 ( VAR_1002 , VAR_1003 + 4 ) ) ) ; break ; case VAR_1004 : METHOD_243 ( VAR_1005 [ 0 ] , 4 ) ; METHOD_244 ( ( VAR_1006 , ""\\n\\tTunnel-Endpoint%s"" , METHOD_245 ( VAR_1007 , VAR_1008 ) ) ) ; break ; case VAR_1009 : case VAR_1010 : METHOD_246 ( VAR_1011 [ 0 ] , 8 ) ; METHOD_247 ( ( VAR_1012 , ""\\n\\tRoot-Node%s,LSP-ID0x%08x"" , METHOD_248 ( VAR_1013 , VAR_1014 ) , METHOD_249 ( VAR_1015 + 4 ) ) ) ; break ; case VAR_1016 : METHOD_250 ( VAR_1017 [ 0 ] , 8 ) ; METHOD_251 ( ( VAR_1018 , ""\\n\\tExtended-Tunnel-ID%s,P2MP-ID0x%08x"" , METHOD_252 ( VAR_1019 , VAR_1020 ) , METHOD_253 ( VAR_1021 + 4 ) ) ) ; break ; default : if ( VAR_1022 -> VAR_1023 <= 1 ) { METHOD_254 ( VAR_1024 , VAR_1025 , ""\\n\\t"" , VAR_1026 ) ; } } break ; } case VAR_1027 : { TYPE_24 VAR_1028 ; TYPE_25 VAR_1029 ; VAR_1030 = VAR_1031 ; while ( VAR_1032 >= 3 ) { METHOD_255 ( VAR_1033 [ 0 ] , 3 ) ; VAR_1034 = * VAR_1035 ; VAR_1036 = METHOD_256 ( VAR_1037 + 1 ) ; VAR_1038 += 3 ; VAR_1039 -= 3 ; METHOD_257 ( ( VAR_1040 , ""\\n\\t%sTLV(%u),length%u"" , METHOD_258 ( VAR_1041 , ""Unknown"" , VAR_1042 ) , VAR_1043 , VAR_1044 ) ) ; if ( VAR_1045 < 3 ) goto VAR_1046 ; VAR_1047 -= 3 ; METHOD_259 ( VAR_1048 [ 3 ] , VAR_1049 ) ; switch ( VAR_1050 ) { case VAR_1051 : if ( VAR_1052 < 8 ) goto VAR_1053 ; METHOD_260 ( ( VAR_1054 , "",metric%"" VAR_1055 , METHOD_261 ( VAR_1056 ) ) ) ; break ; default : if ( VAR_1057 -> VAR_1058 <= 1 ) { METHOD_262 ( VAR_1059 , VAR_1060 , ""\\n\\t"" , VAR_1061 ) ; } } VAR_1062 += VAR_1063 ; VAR_1064 -= VAR_1065 ; } break ; } case VAR_1066 : METHOD_263 ( VAR_1067 [ 0 ] , 4 ) ; if ( VAR_1068 < 4 ) goto VAR_1069 ; METHOD_264 ( ( VAR_1070 , ""\\n\\tOriginAS:%s"" , METHOD_265 ( VAR_1071 , VAR_1072 , sizeof ( VAR_1073 ) , METHOD_266 ( VAR_1074 ) ) ) ) ; VAR_1075 += 4 ; VAR_1076 -= 4 ; while ( VAR_1077 ) { TYPE_26 VAR_1078 , VAR_1079 , VAR_1080 ; METHOD_267 ( VAR_1081 [ 0 ] , 2 ) ; if ( VAR_1082 < 2 ) goto VAR_1083 ; VAR_1084 = * VAR_1085 ; VAR_1086 = * ( VAR_1087 + 1 ) ; VAR_1088 += 2 ; VAR_1089 -= 2 ; VAR_1090 = METHOD_268 ( VAR_1091 , VAR_1092 ) ; METHOD_269 ( VAR_1093 [ 0 ] , VAR_1094 ) ; if ( VAR_1095 < VAR_1096 ) goto VAR_1097 ; VAR_1098 = METHOD_270 ( VAR_1099 , VAR_1100 ) ; VAR_1101 += VAR_1102 ; VAR_1103 -= VAR_1104 ; METHOD_271 ( ( VAR_1105 , ""\\n\\t%s(%u),length:%u"" , METHOD_272 ( VAR_1106 , ""UnknownAttribute"" , VAR_1107 ) , VAR_1108 , VAR_1109 ) ) ; if ( VAR_1110 ) { METHOD_273 ( ( VAR_1111 , "",Flags[%s%s%s%s"" , VAR_1112 & 0x80 ? ""O"" : """" , VAR_1113 & 0x40 ? ""T"" : """" , VAR_1114 & 0x20 ? ""P"" : """" , VAR_1115 & 0x10 ? ""E"" : """" ) ) ; if ( VAR_1116 & 0xf ) METHOD_274 ( ( VAR_1117 , ""+%x"" , VAR_1118 & 0xf ) ) ; METHOD_275 ( ( VAR_1119 , ""]:"" ) ) ; } if ( ! METHOD_276 ( VAR_1120 , VAR_1121 , VAR_1122 , VAR_1123 ) ) return 0 ; VAR_1124 += VAR_1125 ; VAR_1126 -= VAR_1127 ; } break ; case VAR_1128 : if ( VAR_1129 == 0 || VAR_1130 % 12 ) { METHOD_277 ( ( VAR_1131 , ""invalidlen"" ) ) ; break ; } METHOD_278 ( ( VAR_1132 , ""\\n\\t"" ) ) ; while ( VAR_1133 > 0 ) { METHOD_279 ( * VAR_1134 , 12 ) ; METHOD_280 ( ( VAR_1135 , ""%u:%u:%u%s"" , METHOD_281 ( VAR_1136 ) , METHOD_282 ( VAR_1137 + 4 ) , METHOD_283 ( VAR_1138 + 8 ) , ( VAR_1139 > 12 ) ? "","" : """" ) ) ; VAR_1140 += 12 ; VAR_1141 -= 12 ; } break ; default : METHOD_284 ( * VAR_1142 , VAR_1143 ) ; METHOD_285 ( ( VAR_1144 , ""\\n\\tnoAttribute%udecoder"" , VAR_1145 ) ) ; if ( VAR_1146 -> VAR_1147 <= 1 ) METHOD_286 ( VAR_1148 , VAR_1149 , ""\\n\\t"" , VAR_1150 ) ; break ; } if ( VAR_1151 -> VAR_1152 > 1 && VAR_1153 ) { METHOD_287 ( * VAR_1154 , VAR_1155 ) ; METHOD_288 ( VAR_1156 , VAR_1157 , ""\\n\\t"" , VAR_1158 ) ; } return 1 ; VAR_1159 : return 0 ; }",106
107,"static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , register const struct STRUCT_OR_UNION_0 * VAR_1 , register TYPE_2 VAR_2 ) { register const TYPE_3 * VAR_3 ; TYPE_4 VAR_4 ; enum VAR_5 VAR_6 ; VAR_7 = ( ( const TYPE_5 * ) & VAR_8 -> VAR_9 ) + 1 ; METHOD_1 ( VAR_10 [ 1 ] ) ; VAR_11 = METHOD_2 ( & VAR_12 [ 1 ] ) ; if ( VAR_13 >= VAR_14 ) return ( VAR_15 ) ; VAR_16 += ( VAR_17 + ( 2 * sizeof ( TYPE_6 ) + 3 ) ) / sizeof ( TYPE_7 ) ;  METHOD_3 ( VAR_18 [ 0 ] , 0 ) ;  VAR_19 = ( enum VAR_20 ) METHOD_4 ( VAR_21 ) ; if ( VAR_22 != VAR_23 ) { METHOD_5 ( ( VAR_24 , ""%s"" , METHOD_6 ( VAR_25 , ""ar_stat%d"" , VAR_26 ) ) ) ; VAR_27 = 1 ; return ( VAR_28 ) ; } METHOD_7 ( * VAR_29 , sizeof ( VAR_30 ) ) ; return ( ( const TYPE_8 * ) ( sizeof ( VAR_31 ) + ( ( const TYPE_9 * ) VAR_32 ) ) ) ; VAR_33 : return ( 0 ) ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , register const struct STRUCT_OR_UNION_0 * VAR_1 , register TYPE_2 VAR_2 ) { register const TYPE_3 * VAR_3 ; TYPE_4 VAR_4 ; enum VAR_5 VAR_6 ; VAR_7 = ( ( const TYPE_5 * ) & VAR_8 -> VAR_9 ) + 1 ; METHOD_1 ( VAR_10 [ 1 ] ) ; VAR_11 = METHOD_2 ( & VAR_12 [ 1 ] ) ; if ( VAR_13 >= VAR_14 ) return ( VAR_15 ) ; VAR_16 += ( VAR_17 + ( 2 * sizeof ( TYPE_6 ) + 3 ) ) / sizeof ( TYPE_7 ) ; METHOD_3 ( VAR_18 [ 0 ] , 0 ) ; VAR_19 = ( enum VAR_20 ) METHOD_4 ( VAR_21 ) ; if ( VAR_22 != VAR_23 ) { METHOD_5 ( ( VAR_24 , ""%s"" , METHOD_6 ( VAR_25 , ""ar_stat%d"" , VAR_26 ) ) ) ; VAR_27 = 1 ; return ( VAR_28 ) ; } METHOD_7 ( * VAR_29 , sizeof ( VAR_30 ) ) ; return ( ( const TYPE_8 * ) ( sizeof ( VAR_31 ) + ( ( const TYPE_9 * ) VAR_32 ) ) ) ; VAR_33 : return ( 0 ) ; }",107
108,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = METHOD_1 ( VAR_5 , VAR_6 ) - VAR_7 ; TYPE_4 VAR_8 = METHOD_2 ( VAR_9 ) ; TYPE_5 VAR_10 , VAR_11 = 0 ; TYPE_6 VAR_12 = 0 ; while ( VAR_13 && ( VAR_14 >= VAR_15 -> VAR_16 ) ) { VAR_17 -= VAR_18 -> VAR_19 ; ++ VAR_20 ; -- VAR_21 ; } while ( VAR_22 && ( VAR_23 > 0 ) ) { VAR_24 = min_t ( unsigned TYPE_7 , VAR_25 , VAR_26 -> VAR_27 - VAR_28 ) ; if ( METHOD_3 ( VAR_29 -> VAR_30 + VAR_31 , VAR_32 -> VAR_33 + VAR_34 , VAR_35 ) ) return - VAR_36 ; if ( VAR_37 > VAR_38 ) { ++ VAR_39 ; -- VAR_40 ; VAR_41 = 0 ; } else VAR_42 += VAR_43 ; VAR_44 -= VAR_45 ; VAR_46 += VAR_47 ; } if ( VAR_48 == VAR_49 ) return 0 ; while ( VAR_50 -- ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 [ VAR_51 ] ; TYPE_8 VAR_52 ; unsigned TYPE_9 VAR_53 ; unsigned TYPE_10 VAR_54 ; VAR_55 = VAR_56 -> VAR_57 - VAR_58 ; if ( ! VAR_59 ) { VAR_60 = 0 ; ++ VAR_61 ; continue ; } VAR_62 = ( unsigned TYPE_11 ) VAR_63 -> VAR_64 + VAR_65 ; VAR_66 = ( ( VAR_67 & ~ VAR_68 ) + VAR_69 + ~ VAR_70 ) >> VAR_71 ;  VAR_72 = METHOD_4 ( VAR_73 , VAR_74 , 0 , & STRUCT_OR_UNION_4 [ VAR_75 ] ) ;   if ( ( VAR_76 != VAR_77 ) ||  ( VAR_78 > VAR_79 - METHOD_5 ( VAR_80 ) -> VAR_81 ) ) { for ( VAR_82 = 0 ; VAR_83 < VAR_84 ; VAR_85 ++ ) METHOD_6 ( STRUCT_OR_UNION_5 [ VAR_86 ] ) ; return - VAR_87 ; } VAR_88 = VAR_89 * VAR_90 ; VAR_91 -> VAR_92 += VAR_93 ; VAR_94 -> VAR_95 += VAR_96 ; VAR_97 -> VAR_98 += VAR_99 ; METHOD_7 ( VAR_100 , & VAR_101 -> VAR_102 -> VAR_103 ) ; while ( VAR_104 ) { TYPE_12 VAR_105 = VAR_106 & ~ VAR_107 ; TYPE_13 VAR_108 = min_t ( TYPE_14 , VAR_109 , VAR_110 - VAR_111 ) ; METHOD_8 ( VAR_112 , VAR_113 , STRUCT_OR_UNION_6 [ VAR_114 ] , VAR_115 , VAR_116 ) ; METHOD_9 ( VAR_117 ) -> VAR_118 ++ ; VAR_119 += VAR_120 ; VAR_121 -= VAR_122 ; VAR_123 ++ ; } VAR_124 = 0 ; ++ VAR_125 ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = METHOD_1 ( VAR_5 , VAR_6 ) - VAR_7 ; TYPE_4 VAR_8 = METHOD_2 ( VAR_9 ) ; TYPE_5 VAR_10 , VAR_11 = 0 ; TYPE_6 VAR_12 = 0 ; while ( VAR_13 && ( VAR_14 >= VAR_15 -> VAR_16 ) ) { VAR_17 -= VAR_18 -> VAR_19 ; ++ VAR_20 ; -- VAR_21 ; } while ( VAR_22 && ( VAR_23 > 0 ) ) { VAR_24 = min_t ( unsigned TYPE_7 , VAR_25 , VAR_26 -> VAR_27 - VAR_28 ) ; if ( METHOD_3 ( VAR_29 -> VAR_30 + VAR_31 , VAR_32 -> VAR_33 + VAR_34 , VAR_35 ) ) return - VAR_36 ; if ( VAR_37 > VAR_38 ) { ++ VAR_39 ; -- VAR_40 ; VAR_41 = 0 ; } else VAR_42 += VAR_43 ; VAR_44 -= VAR_45 ; VAR_46 += VAR_47 ; } if ( VAR_48 == VAR_49 ) return 0 ; while ( VAR_50 -- ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 [ VAR_51 ] ; TYPE_8 VAR_52 ; unsigned TYPE_9 VAR_53 ; unsigned TYPE_10 VAR_54 ; VAR_55 = VAR_56 -> VAR_57 - VAR_58 ; if ( ! VAR_59 ) { VAR_60 = 0 ; ++ VAR_61 ; continue ; } VAR_62 = ( unsigned TYPE_11 ) VAR_63 -> VAR_64 + VAR_65 ; VAR_66 = ( ( VAR_67 & ~ VAR_68 ) + VAR_69 + ~ VAR_70 ) >> VAR_71 ; if ( VAR_123 + VAR_122 > VAR_79 ) return - EMSGSIZE ; VAR_72 = METHOD_4 ( VAR_73 , VAR_74 , 0 , & STRUCT_OR_UNION_4 [ VAR_75 ] ) ; if ( ( VAR_76 != VAR_77 ) || ( VAR_78 > VAR_79 - METHOD_5 ( VAR_80 ) -> VAR_81 ) ) { for ( VAR_82 = 0 ; VAR_83 < VAR_84 ; VAR_85 ++ ) METHOD_6 ( STRUCT_OR_UNION_5 [ VAR_86 ] ) ; return - VAR_87 ; } VAR_88 = VAR_89 * VAR_90 ; VAR_91 -> VAR_92 += VAR_93 ; VAR_94 -> VAR_95 += VAR_96 ; VAR_97 -> VAR_98 += VAR_99 ; METHOD_7 ( VAR_100 , & VAR_101 -> VAR_102 -> VAR_103 ) ; while ( VAR_104 ) { TYPE_12 VAR_105 = VAR_106 & ~ VAR_107 ; TYPE_13 VAR_108 = min_t ( TYPE_14 , VAR_109 , VAR_110 - VAR_111 ) ; METHOD_8 ( VAR_112 , VAR_113 , STRUCT_OR_UNION_6 [ VAR_114 ] , VAR_115 , VAR_116 ) ; METHOD_9 ( VAR_117 ) -> VAR_118 ++ ; VAR_119 += VAR_120 ; VAR_121 -= VAR_122 ; VAR_123 ++ ; } VAR_124 = 0 ; ++ VAR_125 ; } return 0 ; }",108
109,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = - 1 ; TYPE_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_5 * VAR_6 = VAR_7 ;  TYPE_6 VAR_8 = 0 ;  if ( ! VAR_9 || ! VAR_10 || VAR_11 < 0 || VAR_12 > VAR_13 ) METHOD_2 ( VAR_14 ) ;  if ( METHOD_3 ( VAR_15 , VAR_16 , & VAR_17 , & VAR_18 ) != 0 )   METHOD_4 ( VAR_19 ) ;  if ( METHOD_5 ( & VAR_20 , VAR_21 -> VAR_22 , VAR_23 , VAR_24 , VAR_25 ) != VAR_26 ) { METHOD_6 ( VAR_27 ) ; }  VAR_28 :  if ( VAR_29 ) METHOD_7 ( VAR_30 ) ; return VAR_31 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = - 1 ; TYPE_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_5 * VAR_6 = VAR_7 ; TYPE_6 VAR_8 = 0 ; if ( ! VAR_9 || ! VAR_10 || VAR_11 < 0 || VAR_12 > VAR_13 ) METHOD_2 ( VAR_14 ) ; if ( METHOD_3 ( VAR_15 , VAR_16 , & VAR_17 , & VAR_18 ) != 0 ) METHOD_4 ( VAR_19 ) ; if ( METHOD_5 ( & VAR_20 , VAR_21 -> VAR_22 , VAR_23 , VAR_24 , VAR_25 ) != VAR_26 ) { METHOD_6 ( VAR_27 ) ; } if ( VAR_31 > ( TYPE_3 ) VAR_32 ) { VAR_31 = - 1 ; METHOD_6 ( VAR_27 ) ; } VAR_28 : if ( VAR_29 ) METHOD_7 ( VAR_30 ) ; return VAR_31 ; }",109
110,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; METHOD_1 ( ""Trying%s-specified%sstatemachineat%saddress0x%lx,slaveaddress0x%x,irq%d\\n"" , METHOD_2 ( VAR_5 -> VAR_6 . VAR_7 ) , VAR_8 [ VAR_9 -> VAR_10 . VAR_11 ] , VAR_12 [ VAR_13 -> VAR_14 . VAR_15 ] , VAR_16 -> VAR_17 . VAR_18 , VAR_19 -> VAR_20 . VAR_21 , VAR_22 -> VAR_23 . VAR_24 ) ; switch ( VAR_25 -> VAR_26 . VAR_27 ) { case VAR_28 : VAR_29 -> VAR_30 = & VAR_31 ; break ; case VAR_32 : VAR_33 -> VAR_34 = & VAR_35 ; break ; case VAR_36 : VAR_37 -> VAR_38 = & VAR_39 ; break ; default : VAR_40 = - VAR_41 ; goto VAR_42 ; } VAR_43 -> VAR_44 = VAR_45 ; if ( ! VAR_46 -> VAR_47 . VAR_48 ) { VAR_49 = METHOD_3 ( VAR_50 , ""ipmi_si.%d"" , VAR_51 -> VAR_52 ) ; VAR_53 -> VAR_54 = METHOD_4 ( ""ipmi_si"" , VAR_55 -> VAR_56 ) ; if ( ! VAR_57 -> VAR_58 ) { METHOD_5 ( ""Unabletoallocateplatformdevice\\n"" ) ; VAR_59 = - VAR_60 ; goto VAR_61 ; } VAR_62 -> VAR_63 . VAR_64 = & VAR_65 -> VAR_66 -> VAR_67 ; VAR_68 -> VAR_69 . VAR_70 -> VAR_71 = & VAR_72 . VAR_73 ; VAR_74 -> VAR_75 . VAR_76 -> VAR_77 = VAR_78 ; } VAR_79 -> VAR_80 = METHOD_6 ( VAR_81 -> VAR_82 -> METHOD_7 ( ) , VAR_83 ) ; if ( ! VAR_84 -> VAR_85 ) { VAR_86 = - VAR_87 ; goto VAR_88 ; } VAR_89 -> VAR_90 . VAR_91 = VAR_92 -> VAR_93 -> METHOD_8 ( VAR_94 -> VAR_95 , & VAR_96 -> VAR_97 ) ; VAR_98 = VAR_99 -> VAR_100 . METHOD_9 ( & VAR_101 -> VAR_102 ) ; if ( VAR_103 ) { METHOD_10 ( VAR_104 -> VAR_105 . VAR_106 , ""CouldnotsetupI/Ospace\\n"" ) ; goto VAR_107 ; } if ( VAR_108 -> VAR_109 -> METHOD_11 ( VAR_110 -> VAR_111 ) ) { if ( VAR_112 -> VAR_113 . VAR_114 ) METHOD_12 ( VAR_115 -> VAR_116 . VAR_117 , ""Interfacedetectionfailed\\n"" ) ; VAR_118 = - VAR_119 ; goto VAR_120 ; } VAR_121 = METHOD_13 ( VAR_122 ) ; if ( VAR_123 ) { if ( VAR_124 -> VAR_125 . VAR_126 ) METHOD_14 ( VAR_127 -> VAR_128 . VAR_129 , ""ThereappearstobenoBMCatthislocation\\n"" ) ; goto VAR_130 ; } METHOD_15 ( VAR_131 ) ; METHOD_16 ( VAR_132 ) ; METHOD_17 ( VAR_133 ) ; VAR_134 -> VAR_135 = VAR_136 ; VAR_137 -> VAR_138 = VAR_139 ; METHOD_18 ( & VAR_140 -> VAR_141 , 0 ) ; VAR_142 -> VAR_143 = VAR_144 ; for ( VAR_145 = 0 ; VAR_146 < VAR_147 ; VAR_148 ++ ) METHOD_19 ( & VAR_149 -> VAR_150 [ VAR_151 ] , 0 ) ; VAR_152 -> VAR_153 = VAR_154 ; METHOD_20 ( & VAR_155 -> VAR_156 , 0 ) ; VAR_157 = METHOD_21 ( VAR_158 ) ; if ( VAR_159 == 0 ) VAR_160 -> VAR_161 = VAR_162 ; METHOD_22 ( VAR_163 ) ; if ( VAR_164 -> VAR_165 . VAR_166 ) { VAR_167 -> VAR_168 = VAR_169 ; METHOD_23 ( & VAR_170 -> VAR_171 , 1 ) ; } if ( VAR_172 -> VAR_173 && ! VAR_174 -> VAR_175 ) { VAR_176 = METHOD_24 ( VAR_177 -> VAR_178 ) ; if ( VAR_179 ) { METHOD_25 ( VAR_180 -> VAR_181 . VAR_182 , ""Unabletoregistersysteminterfacedevice:%d\\n"" , VAR_183 ) ; goto VAR_184 ; } VAR_185 -> VAR_186 = VAR_187 ; } METHOD_26 ( VAR_188 -> VAR_189 . VAR_190 , VAR_191 ) ; VAR_192 = METHOD_27 ( VAR_193 -> VAR_194 . VAR_195 , & VAR_196 ) ; if ( VAR_197 ) { METHOD_28 ( VAR_198 -> VAR_199 . VAR_200 , ""Unabletoadddeviceattributes:error%d\\n"" , VAR_201 ) ; goto VAR_202 ; } VAR_203 -> VAR_204 = VAR_205 ; VAR_206 = METHOD_29 ( & VAR_207 , VAR_208 , VAR_209 -> VAR_210 . VAR_211 , VAR_212 -> VAR_213 . VAR_214 ) ; if ( VAR_215 ) { METHOD_30 ( VAR_216 -> VAR_217 . VAR_218 , ""Unabletoregisterdevice:error%d\\n"" , VAR_219 ) ; goto VAR_220 ; } VAR_221 ++ ; METHOD_31 ( VAR_222 -> VAR_223 . VAR_224 , ""IPMI%sinterfaceinitialized\\n"" , VAR_225 [ VAR_226 -> VAR_227 . VAR_228 ] ) ; METHOD_32 ( VAR_229 -> VAR_230 . VAR_231 -> VAR_232 != VAR_233 ) ; VAR_234 :  METHOD_33 ( VAR_235 ) ;  return VAR_236 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; METHOD_1 ( ""Trying%s-specified%sstatemachineat%saddress0x%lx,slaveaddress0x%x,irq%d\\n"" , METHOD_2 ( VAR_5 -> VAR_6 . VAR_7 ) , VAR_8 [ VAR_9 -> VAR_10 . VAR_11 ] , VAR_12 [ VAR_13 -> VAR_14 . VAR_15 ] , VAR_16 -> VAR_17 . VAR_18 , VAR_19 -> VAR_20 . VAR_21 , VAR_22 -> VAR_23 . VAR_24 ) ; switch ( VAR_25 -> VAR_26 . VAR_27 ) { case VAR_28 : VAR_29 -> VAR_30 = & VAR_31 ; break ; case VAR_32 : VAR_33 -> VAR_34 = & VAR_35 ; break ; case VAR_36 : VAR_37 -> VAR_38 = & VAR_39 ; break ; default : VAR_40 = - VAR_41 ; goto VAR_42 ; } VAR_43 -> VAR_44 = VAR_45 ; if ( ! VAR_46 -> VAR_47 . VAR_48 ) { VAR_49 = METHOD_3 ( VAR_50 , ""ipmi_si.%d"" , VAR_51 -> VAR_52 ) ; VAR_53 -> VAR_54 = METHOD_4 ( ""ipmi_si"" , VAR_55 -> VAR_56 ) ; if ( ! VAR_57 -> VAR_58 ) { METHOD_5 ( ""Unabletoallocateplatformdevice\\n"" ) ; VAR_59 = - VAR_60 ; goto VAR_61 ; } VAR_62 -> VAR_63 . VAR_64 = & VAR_65 -> VAR_66 -> VAR_67 ; VAR_68 -> VAR_69 . VAR_70 -> VAR_71 = & VAR_72 . VAR_73 ; VAR_74 -> VAR_75 . VAR_76 -> VAR_77 = VAR_78 ; } VAR_79 -> VAR_80 = METHOD_6 ( VAR_81 -> VAR_82 -> METHOD_7 ( ) , VAR_83 ) ; if ( ! VAR_84 -> VAR_85 ) { VAR_86 = - VAR_87 ; goto VAR_88 ; } VAR_89 -> VAR_90 . VAR_91 = VAR_92 -> VAR_93 -> METHOD_8 ( VAR_94 -> VAR_95 , & VAR_96 -> VAR_97 ) ; VAR_98 = VAR_99 -> VAR_100 . METHOD_9 ( & VAR_101 -> VAR_102 ) ; if ( VAR_103 ) { METHOD_10 ( VAR_104 -> VAR_105 . VAR_106 , ""CouldnotsetupI/Ospace\\n"" ) ; goto VAR_107 ; } if ( VAR_108 -> VAR_109 -> METHOD_11 ( VAR_110 -> VAR_111 ) ) { if ( VAR_112 -> VAR_113 . VAR_114 ) METHOD_12 ( VAR_115 -> VAR_116 . VAR_117 , ""Interfacedetectionfailed\\n"" ) ; VAR_118 = - VAR_119 ; goto VAR_120 ; } VAR_121 = METHOD_13 ( VAR_122 ) ; if ( VAR_123 ) { if ( VAR_124 -> VAR_125 . VAR_126 ) METHOD_14 ( VAR_127 -> VAR_128 . VAR_129 , ""ThereappearstobenoBMCatthislocation\\n"" ) ; goto VAR_130 ; } METHOD_15 ( VAR_131 ) ; METHOD_16 ( VAR_132 ) ; METHOD_17 ( VAR_133 ) ; VAR_134 -> VAR_135 = VAR_136 ; VAR_137 -> VAR_138 = VAR_139 ; METHOD_18 ( & VAR_140 -> VAR_141 , 0 ) ; VAR_142 -> VAR_143 = VAR_144 ; for ( VAR_145 = 0 ; VAR_146 < VAR_147 ; VAR_148 ++ ) METHOD_19 ( & VAR_149 -> VAR_150 [ VAR_151 ] , 0 ) ; VAR_152 -> VAR_153 = VAR_154 ; METHOD_20 ( & VAR_155 -> VAR_156 , 0 ) ; VAR_157 = METHOD_21 ( VAR_158 ) ; if ( VAR_159 == 0 ) VAR_160 -> VAR_161 = VAR_162 ; METHOD_22 ( VAR_163 ) ; if ( VAR_164 -> VAR_165 . VAR_166 ) { VAR_167 -> VAR_168 = VAR_169 ; METHOD_23 ( & VAR_170 -> VAR_171 , 1 ) ; } if ( VAR_172 -> VAR_173 && ! VAR_174 -> VAR_175 ) { VAR_176 = METHOD_24 ( VAR_177 -> VAR_178 ) ; if ( VAR_179 ) { METHOD_25 ( VAR_180 -> VAR_181 . VAR_182 , ""Unabletoregistersysteminterfacedevice:%d\\n"" , VAR_183 ) ; goto VAR_184 ; } VAR_185 -> VAR_186 = VAR_187 ; } METHOD_26 ( VAR_188 -> VAR_189 . VAR_190 , VAR_191 ) ; VAR_192 = METHOD_27 ( VAR_193 -> VAR_194 . VAR_195 , & VAR_196 ) ; if ( VAR_197 ) { METHOD_28 ( VAR_198 -> VAR_199 . VAR_200 , ""Unabletoadddeviceattributes:error%d\\n"" , VAR_201 ) ; goto VAR_202 ; } VAR_203 -> VAR_204 = VAR_205 ; VAR_206 = METHOD_29 ( & VAR_207 , VAR_208 , VAR_209 -> VAR_210 . VAR_211 , VAR_212 -> VAR_213 . VAR_214 ) ; if ( VAR_215 ) { METHOD_30 ( VAR_216 -> VAR_217 . VAR_218 , ""Unabletoregisterdevice:error%d\\n"" , VAR_219 ) ; goto VAR_220 ; } VAR_221 ++ ; METHOD_31 ( VAR_222 -> VAR_223 . VAR_224 , ""IPMI%sinterfaceinitialized\\n"" , VAR_225 [ VAR_226 -> VAR_227 . VAR_228 ] ) ; METHOD_32 ( VAR_229 -> VAR_230 . VAR_231 -> VAR_232 != VAR_233 ) ; VAR_234 : if ( VAR_236 && VAR_229 -> VAR_230 . METHOD_34 ) { VAR_229 -> VAR_230 . METHOD_34 ( & VAR_229 -> VAR_230 ) ; VAR_229 -> VAR_230 . METHOD_34 = VAR_233 ; } METHOD_33 ( VAR_235 ) ; return VAR_236 ; }",110
111,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_2 * VAR_9 = VAR_10 -> VAR_11 . VAR_12 ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 -> VAR_15 . VAR_16 ; VAR_17 = METHOD_2 ( VAR_18 , & VAR_19 -> VAR_20 ) ; if ( ! VAR_21 ) return 0 ; VAR_22 = METHOD_3 ( VAR_23 , & VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_4 ( * VAR_28 ++ ) ; VAR_29 -> VAR_30 = METHOD_5 ( * VAR_31 ++ ) ;  VAR_32 = VAR_33 -> VAR_34 = METHOD_6 ( * VAR_35 ++ ) ;  if ( VAR_36 -> VAR_37 != VAR_38 -> VAR_39 ) return 0 ; VAR_40 = ( TYPE_4 * ) VAR_41 - VAR_42 -> VAR_43 ; VAR_44 = VAR_45 -> VAR_46 + VAR_47 -> VAR_48 . VAR_49 + VAR_50 -> VAR_51 - VAR_52 ; if ( VAR_53 < METHOD_7 ( VAR_54 ) * 4 ) return 0 ; if ( VAR_55 -> VAR_56 > VAR_57 ) { VAR_58 -> VAR_59 = VAR_60 ; VAR_61 = VAR_62 -> VAR_63 = VAR_64 ; } VAR_65 -> VAR_66 [ 0 ] . VAR_67 = ( TYPE_5 * ) VAR_68 ; VAR_69 -> VAR_70 [ 0 ] . VAR_71 = VAR_72 -> VAR_73 - VAR_74 ; VAR_75 = 0 ; while ( VAR_76 > VAR_77 -> VAR_78 [ VAR_79 ] . VAR_80 ) { VAR_81 -= VAR_82 -> VAR_83 [ VAR_84 ] . VAR_85 ; VAR_86 ++ ; VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = METHOD_8 ( VAR_91 -> VAR_92 [ VAR_93 ] ) ; VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 = VAR_98 ; } VAR_99 -> VAR_100 [ VAR_101 ] . VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 + 1 ; return 1 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { unsigned TYPE_2 VAR_3 , VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = METHOD_1 ( VAR_8 ) ; struct STRUCT_OR_UNION_2 * VAR_9 = VAR_10 -> VAR_11 . VAR_12 ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 -> VAR_15 . VAR_16 ; VAR_17 = METHOD_2 ( VAR_18 , & VAR_19 -> VAR_20 ) ; if ( ! VAR_21 ) return 0 ; VAR_22 = METHOD_3 ( VAR_23 , & VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_4 ( * VAR_28 ++ ) ; VAR_29 -> VAR_30 = METHOD_5 ( * VAR_31 ++ ) ; VAR_32 = VAR_33 -> VAR_34 = METHOD_6 ( * VAR_35 ++ ) ; if ( VAR_36 -> VAR_37 != VAR_38 -> VAR_39 ) return 0 ; VAR_40 = ( TYPE_4 * ) VAR_41 - VAR_42 -> VAR_43 ; VAR_44 = VAR_45 -> VAR_46 + VAR_47 -> VAR_48 . VAR_49 + VAR_50 -> VAR_51 - VAR_52 ; if ( VAR_53 < METHOD_7 ( VAR_54 ) * 4 ) return 0 ; if ( VAR_55 -> VAR_56 > VAR_57 ) { VAR_58 -> VAR_59 = VAR_60 ; VAR_61 = VAR_62 -> VAR_63 = VAR_64 ; } VAR_65 -> VAR_66 [ 0 ] . VAR_67 = ( TYPE_5 * ) VAR_68 ; VAR_69 -> VAR_70 [ 0 ] . VAR_71 = VAR_72 -> VAR_73 - VAR_74 ; VAR_75 = 0 ; while ( VAR_76 > VAR_77 -> VAR_78 [ VAR_79 ] . VAR_80 ) { VAR_81 -= VAR_82 -> VAR_83 [ VAR_84 ] . VAR_85 ; VAR_86 ++ ; VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = METHOD_8 ( VAR_91 -> VAR_92 [ VAR_93 ] ) ; VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 = VAR_98 ; } VAR_99 -> VAR_100 [ VAR_101 ] . VAR_102 = VAR_103 ; VAR_104 -> VAR_105 = VAR_106 + 1 ; return 1 ; }",111
112,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 [ 3 ] ; TYPE_7 * VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; if ( VAR_11 ) { METHOD_1 ( ""warning:ignoringBMPdecoderoptions\\n"" ) ; } METHOD_2 ( ""THEBMPFORMATISNOTFULLYSUPPORTED!\\n"" ""THATIS,THEJASPERSOFTWARECANNOTDECODEALLTYPESOFBMPDATA.\\n"" ""IFYOUHAVEANYPROBLEMS,PLEASETRYCONVERTINGYOURIMAGEDATA\\n"" ""TOTHEPNMFORMAT,ANDUSINGTHISFORMATINSTEAD.\\n"" ) ; if ( METHOD_3 ( VAR_12 , & VAR_13 ) ) { METHOD_4 ( ""cannotgetheader\\n"" ) ; return 0 ; }  if ( ! ( VAR_14 = METHOD_5 ( VAR_15 ) ) ) {  METHOD_6 ( ""cannotgetinfo\\n"" ) ; return 0 ;  }  if ( ! METHOD_7 ( & VAR_16 , VAR_17 ) ) { METHOD_8 ( ""error:unsupportedBMPencoding\\n"" ) ; METHOD_9 ( VAR_18 ) ; return 0 ; } if ( ( VAR_19 = VAR_20 . VAR_21 - ( VAR_22 + VAR_23 + METHOD_10 ( VAR_24 ) ) ) < 0 ) { METHOD_11 ( ""error:possiblybadbitmapoffset?\\n"" ) ; return 0 ; } if ( VAR_25 > 0 ) { METHOD_12 ( ""skippingunknowndatainBMPfile\\n"" ) ; if ( METHOD_13 ( VAR_26 , VAR_27 ) ) { METHOD_14 ( VAR_28 ) ; return 0 ; } } VAR_29 = METHOD_15 ( VAR_30 ) ; for ( VAR_31 = 0 , VAR_32 = VAR_33 ; VAR_34 < VAR_35 ; ++ VAR_36 , ++ VAR_37 ) { VAR_38 -> VAR_39 = 0 ; VAR_40 -> VAR_41 = 0 ; VAR_42 -> VAR_43 = 1 ; VAR_44 -> VAR_45 = 1 ; VAR_46 -> VAR_47 = VAR_48 -> VAR_49 ; VAR_50 -> VAR_51 = VAR_52 -> VAR_53 ; VAR_54 -> VAR_55 = 8 ; VAR_56 -> VAR_57 = VAR_58 ; } if ( ! ( VAR_59 = METHOD_16 ( VAR_60 , VAR_61 , VAR_62 ) ) ) { METHOD_17 ( VAR_63 ) ; return 0 ; } if ( VAR_64 == 3 ) { METHOD_18 ( VAR_65 , VAR_66 ) ; METHOD_19 ( VAR_67 , 0 , METHOD_20 ( VAR_68 ) ) ; METHOD_21 ( VAR_69 , 1 , METHOD_22 ( VAR_70 ) ) ; METHOD_23 ( VAR_71 , 2 , METHOD_24 ( VAR_72 ) ) ; } else { METHOD_25 ( VAR_73 , VAR_74 ) ; METHOD_26 ( VAR_75 , 0 , METHOD_27 ( VAR_76 ) ) ; } if ( METHOD_28 ( VAR_77 , VAR_78 , VAR_79 ) ) { METHOD_29 ( VAR_80 ) ; METHOD_30 ( VAR_81 ) ; return 0 ; } METHOD_31 ( VAR_82 ) ; return VAR_83 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 [ 3 ] ; TYPE_7 * VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; if ( VAR_11 ) { METHOD_1 ( ""warning:ignoringBMPdecoderoptions\\n"" ) ; } METHOD_2 ( ""THEBMPFORMATISNOTFULLYSUPPORTED!\\n"" ""THATIS,THEJASPERSOFTWARECANNOTDECODEALLTYPESOFBMPDATA.\\n"" ""IFYOUHAVEANYPROBLEMS,PLEASETRYCONVERTINGYOURIMAGEDATA\\n"" ""TOTHEPNMFORMAT,ANDUSINGTHISFORMATINSTEAD.\\n"" ) ; if ( METHOD_3 ( VAR_12 , & VAR_13 ) ) { METHOD_4 ( ""cannotgetheader\\n"" ) ; return 0 ; } METHOD_32 ( 1 , ( ""BMPheader:magic0x%x;siz%d;res1%d;res2%d;off%d\\n"" , VAR_20 . VAR_84 , VAR_20 . VAR_85 , VAR_20 . VAR_86 , VAR_20 . VAR_87 , VAR_20 . VAR_21 ) ) ; if ( ! ( VAR_14 = METHOD_5 ( VAR_15 ) ) ) { METHOD_6 ( ""cannotgetinfo\\n"" ) ; return 0 ; } METHOD_32 ( 1 , ( ""BMPinformation:len%d;width%d;height%d;numplanes%d;"" ""depth%d;enctype%d;siz%d;hres%d;vres%d;numcolors%d;"" ""mincolors%d\\n"" , VAR_82 -> VAR_88 , VAR_82 -> VAR_49 , VAR_82 -> VAR_53 , VAR_82 -> VAR_89 , VAR_82 -> VAR_90 , VAR_82 -> VAR_91 , VAR_82 -> VAR_85 , VAR_82 -> VAR_92 , VAR_82 -> VAR_93 , VAR_82 -> VAR_94 , VAR_82 -> VAR_95 ) ) ; if ( ! METHOD_7 ( & VAR_16 , VAR_17 ) ) { METHOD_8 ( ""error:unsupportedBMPencoding\\n"" ) ; METHOD_9 ( VAR_18 ) ; return 0 ; } if ( ( VAR_19 = VAR_20 . VAR_21 - ( VAR_22 + VAR_23 + METHOD_10 ( VAR_24 ) ) ) < 0 ) { METHOD_11 ( ""error:possiblybadbitmapoffset?\\n"" ) ; return 0 ; } if ( VAR_25 > 0 ) { METHOD_12 ( ""skippingunknowndatainBMPfile\\n"" ) ; if ( METHOD_13 ( VAR_26 , VAR_27 ) ) { METHOD_14 ( VAR_28 ) ; return 0 ; } } VAR_29 = METHOD_15 ( VAR_30 ) ; for ( VAR_31 = 0 , VAR_32 = VAR_33 ; VAR_34 < VAR_35 ; ++ VAR_36 , ++ VAR_37 ) { VAR_38 -> VAR_39 = 0 ; VAR_40 -> VAR_41 = 0 ; VAR_42 -> VAR_43 = 1 ; VAR_44 -> VAR_45 = 1 ; VAR_46 -> VAR_47 = VAR_48 -> VAR_49 ; VAR_50 -> VAR_51 = VAR_52 -> VAR_53 ; VAR_54 -> VAR_55 = 8 ; VAR_56 -> VAR_57 = VAR_58 ; } if ( ! ( VAR_59 = METHOD_16 ( VAR_60 , VAR_61 , VAR_62 ) ) ) { METHOD_17 ( VAR_63 ) ; return 0 ; } if ( VAR_64 == 3 ) { METHOD_18 ( VAR_65 , VAR_66 ) ; METHOD_19 ( VAR_67 , 0 , METHOD_20 ( VAR_68 ) ) ; METHOD_21 ( VAR_69 , 1 , METHOD_22 ( VAR_70 ) ) ; METHOD_23 ( VAR_71 , 2 , METHOD_24 ( VAR_72 ) ) ; } else { METHOD_25 ( VAR_73 , VAR_74 ) ; METHOD_26 ( VAR_75 , 0 , METHOD_27 ( VAR_76 ) ) ; } if ( METHOD_28 ( VAR_77 , VAR_78 , VAR_79 ) ) { METHOD_29 ( VAR_80 ) ; METHOD_30 ( VAR_81 ) ; return 0 ; } METHOD_31 ( VAR_82 ) ; return VAR_83 ; }",112
113,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { register TYPE_4 VAR_3 ; const TYPE_5 * VAR_4 = """" ; for ( ; VAR_5 > 0 ; VAR_6 += VAR_7 , VAR_8 -= VAR_9 ) { TYPE_6 VAR_10 ; METHOD_1 ( ( VAR_11 , ""%s"" , VAR_12 ) ) ; VAR_13 = "","" ; METHOD_2 ( * VAR_14 ) ; VAR_15 = * VAR_16 ; METHOD_3 ( ( VAR_17 , ""%s"" , METHOD_4 ( VAR_18 , ""unknown%u"" , VAR_19 ) ) ) ; if ( VAR_20 == VAR_21 || VAR_22 == VAR_23 ) VAR_24 = 1 ; else { METHOD_5 ( VAR_25 [ 1 ] ) ; VAR_26 = VAR_27 [ 1 ] ; if ( VAR_28 < 2 ) { METHOD_6 ( ( VAR_29 , ""[badlength%u]"" , VAR_30 ) ) ; return ; } } if ( VAR_31 > VAR_32 ) { METHOD_7 ( ( VAR_33 , ""[badlength%u]"" , VAR_34 ) ) ; return ; } METHOD_8 ( * VAR_35 , VAR_36 ) ; switch ( VAR_37 ) { case VAR_38 : return ; case VAR_39 :  METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ;  break ; case VAR_43 : case VAR_44 : case VAR_45 : if ( METHOD_10 ( VAR_46 , VAR_47 , VAR_48 ) == - 1 ) goto VAR_49 ; break ;  case VAR_50 :  if ( VAR_51 < 4 ) { METHOD_11 ( ( VAR_52 , ""[badlength%u]"" , VAR_53 ) ) ; break ; } METHOD_12 ( VAR_54 [ 3 ] ) ; if ( METHOD_13 ( & VAR_55 [ 2 ] ) != 0 ) METHOD_14 ( ( VAR_56 , ""value%u"" , METHOD_15 ( & VAR_57 [ 2 ] ) ) ) ; break ; case VAR_58 : case VAR_59 : default : break ; } } return ; VAR_60 : METHOD_16 ( ( VAR_61 , ""%s"" , VAR_62 ) ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { register TYPE_4 VAR_3 ; const TYPE_5 * VAR_4 = """" ; for ( ; VAR_5 > 0 ; VAR_6 += VAR_7 , VAR_8 -= VAR_9 ) { TYPE_6 VAR_10 ; METHOD_1 ( ( VAR_11 , ""%s"" , VAR_12 ) ) ; VAR_13 = "","" ; METHOD_2 ( * VAR_14 ) ; VAR_15 = * VAR_16 ; METHOD_3 ( ( VAR_17 , ""%s"" , METHOD_4 ( VAR_18 , ""unknown%u"" , VAR_19 ) ) ) ; if ( VAR_20 == VAR_21 || VAR_22 == VAR_23 ) VAR_24 = 1 ; else { METHOD_5 ( VAR_25 [ 1 ] ) ; VAR_26 = VAR_27 [ 1 ] ; if ( VAR_28 < 2 ) { METHOD_6 ( ( VAR_29 , ""[badlength%u]"" , VAR_30 ) ) ; return ; } } if ( VAR_31 > VAR_32 ) { METHOD_7 ( ( VAR_33 , ""[badlength%u]"" , VAR_34 ) ) ; return ; } METHOD_8 ( * VAR_35 , VAR_36 ) ; switch ( VAR_37 ) { case VAR_38 : return ; case VAR_39 : if ( METHOD_9 ( VAR_61 , ""%s"" , VAR_62 ) ) ; }",113
114,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ;  VAR_8 = VAR_9 -> VAR_10 ;  VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = VAR_15 -> VAR_16 . VAR_17 ; VAR_18 = ( TYPE_9 ) ( VAR_19 -> VAR_20 ) >> 18 ; VAR_21 = ( TYPE_10 ) ( VAR_22 -> VAR_23 ) >> 18 ; while ( VAR_24 -- ) { VAR_25 = METHOD_1 ( VAR_26 , ( VAR_27 - VAR_28 -> VAR_29 ) ) ; VAR_30 += METHOD_2 ( VAR_31 , VAR_32 -> VAR_33 ) ; * VAR_34 ++ = ( TYPE_11 ) VAR_35 ; VAR_36 -> VAR_37 += ( TYPE_12 ) VAR_38 ; if ( METHOD_3 ( VAR_39 -> VAR_40 ) ) { VAR_41 = VAR_42 ; VAR_43 -> VAR_44 = VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = ( 5 * VAR_49 -> VAR_50 + 1 ) ; VAR_51 = ( TYPE_13 ) ( VAR_52 -> VAR_53 ) >> 18 ; VAR_54 -> VAR_55 = METHOD_4 ( VAR_56 -> VAR_57 ) ; } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; VAR_8 = VAR_9 -> VAR_10 ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = VAR_15 -> VAR_16 . VAR_17 ; VAR_18 = ( TYPE_9 ) ( VAR_19 -> VAR_20 ) >> 18 ; VAR_21 = ( TYPE_10 ) ( VAR_22 -> VAR_23 ) >> 18 ; while ( VAR_24 -- ) { VAR_25 = METHOD_1 ( VAR_26 , ( VAR_27 - VAR_28 -> VAR_29 ) ) ; VAR_30 += METHOD_2 ( VAR_31 , VAR_32 -> VAR_33 ) ; * VAR_34 ++ = ( TYPE_11 ) VAR_35 ; VAR_36 -> VAR_37 += ( TYPE_12 ) VAR_38 ; if ( METHOD_3 ( VAR_39 -> VAR_40 ) ) { VAR_41 = VAR_42 ; VAR_43 -> VAR_44 = VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = ( 5 * VAR_49 -> VAR_50 + 1 ) ; VAR_51 = ( TYPE_13 ) ( VAR_52 -> VAR_53 ) >> 18 ; VAR_54 -> VAR_55 = METHOD_4 ( VAR_56 -> VAR_57 ) ; } } }",114
115,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { static TYPE_2 TYPE_3 VAR_2 ;  TYPE_4 VAR_3 , VAR_4 ;   METHOD_1 ( & TYPE_5 , sizeof ( TYPE_6 ) ) ;  VAR_5 = METHOD_2 ( ( TYPE_7 TYPE_8 ) VAR_6 -> VAR_7 , ( TYPE_9 TYPE_10 ) VAR_8 -> VAR_9 ,  VAR_10 -> VAR_11 ,  TYPE_11 ) ; VAR_12 = METHOD_3 ( VAR_13 , VAR_14 ) ; VAR_15 -> VAR_16 = METHOD_4 ( VAR_17 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { static TYPE_2 TYPE_3 VAR_2 ; TYPE_4 VAR_3 , VAR_4 ; METHOD_1 ( & TYPE_5 , sizeof ( TYPE_6 ) ) ; VAR_5 = METHOD_2 ( ( TYPE_7 TYPE_8 ) VAR_6 -> VAR_7 , ( TYPE_9 TYPE_10 ) VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , TYPE_11 ) ; VAR_12 = METHOD_3 ( VAR_13 , VAR_14 ) ; VAR_15 -> VAR_16 = METHOD_4 ( VAR_17 ) ; }",115
116,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 ; if ( METHOD_1 ( VAR_4 ) > VAR_5 ) { METHOD_2 ( ""Valuefornotunderstoodkey\\""%s\\""exceeds%d,"" ""protocolerror.\\n"" , VAR_6 , VAR_7 ) ; return - 1 ; } VAR_8 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_9 ) ; if ( ! VAR_10 ) { METHOD_4 ( ""Unabletoallocatememoryfor"" ""structiscsi_extra_response.\\n"" ) ; return - 1 ; } METHOD_5 ( & VAR_11 -> VAR_12 ) ;  METHOD_6 ( VAR_13 -> VAR_14 , VAR_15 , METHOD_7 ( VAR_16 ) + 1 ) ;  METHOD_8 ( VAR_17 -> VAR_18 , VAR_19 ,  METHOD_9 ( VAR_20 ) + 1 ) ;  METHOD_10 ( & VAR_21 -> VAR_22 , & VAR_23 -> VAR_24 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 ; if ( METHOD_1 ( VAR_4 ) > VAR_5 ) { METHOD_2 ( ""Valuefornotunderstoodkey\\""%s\\""exceeds%d,"" ""protocolerror.\\n"" , VAR_6 , VAR_7 ) ; return - 1 ; } VAR_8 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_9 ) ; if ( ! VAR_10 ) { METHOD_4 ( ""Unabletoallocatememoryfor"" ""structiscsi_extra_response.\\n"" ) ; return - 1 ; } METHOD_5 ( & VAR_11 -> VAR_12 ) ; METHOD_6 ( VAR_13 -> VAR_14 , VAR_15 , METHOD_7 ( VAR_16 ) + 1 ) ; METHOD_8 ( VAR_17 -> VAR_18 , VAR_19 , METHOD_9 ( VAR_20 ) + 1 ) ; METHOD_10 ( & VAR_21 -> VAR_22 , & VAR_23 -> VAR_24 ) ; return 0 ; }",116
117," static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 )  {  TYPE_4 VAR_2 = 0 ;  TYPE_5 VAR_3 [ 65 ] ; if ( VAR_4 -> VAR_5 & VAR_6 ) {  TYPE_6 * VAR_7 = VAR_8 ;  TYPE_7 VAR_9 = 0 ;  unsigned VAR_10 ;  while ( * VAR_11 ) { if ( * VAR_12 == '.' && ++ VAR_13 >= 3 ) break ; if ( ! METHOD_1 ( * VAR_14 ) && * VAR_15 != '.' ) break ; VAR_16 ++ ; } VAR_17 = ( ( VAR_18 >> 8 ) & 0xff ) + 40 ;  METHOD_2 ( VAR_19 , VAR_20 , ""2.6.%u%s"" , VAR_21 , VAR_22 ) ;   VAR_23 = METHOD_3 ( VAR_24 , VAR_25 , VAR_26 ) ;  } return VAR_27 ; }","static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = 0 ; TYPE_5 VAR_3 [ 65 ] ; if ( VAR_4 -> VAR_5 & VAR_6 ) { const TYPE_6 * VAR_7 = VAR_8 ; TYPE_7 VAR_9 = 0 ; unsigned VAR_10 ; while ( * VAR_11 ) { if ( * VAR_12 == '.' && ++ VAR_13 >= 3 ) break ; if ( ! METHOD_1 ( * VAR_14 ) && * VAR_15 != '.' ) break ; VAR_16 ++ ; } VAR_17 = ( ( VAR_18 >> 8 ) & 0xff ) + 40 ; METHOD_2 ( VAR_19 , VAR_20 , ""2.6.%u%s"" , VAR_21 , VAR_22 ) ; VAR_23 = METHOD_3 ( VAR_24 , VAR_25 , VAR_28 + 1 ) ; } return VAR_27 ; }",117
118,static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) {  if ( VAR_1 == VAR_2 )  return METHOD_1 ( VAR_3 ) ; return 0 ; },static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { if ( VAR_1 == VAR_2 || VAR_1 == VAR_4 ) return METHOD_1 ( VAR_3 ) ; return 0 ; },118
119,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 ) { TYPE_11 * const VAR_10 = & VAR_11 -> VAR_12 ; const struct STRUCT_OR_UNION_0 * const VAR_13 = & VAR_14 -> VAR_15 [ VAR_16 ] ;  struct STRUCT_OR_UNION_1 VAR_17 = { 0 } ;  VAR_18 . VAR_19 = VAR_20 ; VAR_21 . VAR_22 = VAR_23 ;  VAR_24 . VAR_25 = VAR_26 ;  if ( VAR_27 == 0 ) VAR_28 -> VAR_29 [ 0 ] -> VAR_30 . VAR_31 = VAR_32 ; METHOD_1 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 . VAR_37 , VAR_38 . VAR_39 ) ; VAR_40 . VAR_41 = METHOD_2 ( VAR_42 , VAR_43 , VAR_44 -> VAR_45 , 0 ) ; METHOD_3 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 , & VAR_50 ) ;  if ( VAR_51 . VAR_52 ) {  * VAR_53 = VAR_54 ; * VAR_55 = VAR_56 ; * VAR_57 = VAR_58 ; * VAR_59 = 0 ; } else { * VAR_60 = VAR_61 . VAR_62 ; * VAR_63 = VAR_64 . VAR_65 ; * VAR_66 = VAR_67 . VAR_68 ;  * VAR_69 = METHOD_4 ( VAR_70 , VAR_71 , VAR_72 ) ;  } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 , TYPE_10 VAR_9 ) { TYPE_11 * const VAR_10 = & VAR_11 -> VAR_12 ; const struct STRUCT_OR_UNION_0 * const VAR_13 = & VAR_14 -> VAR_15 [ VAR_16 ] ; struct STRUCT_OR_UNION_1 VAR_17 = { 0 } ; VAR_18 . VAR_19 = VAR_20 ; VAR_21 . VAR_22 = VAR_23 ; VAR_24 . VAR_25 = VAR_26 ; VAR_67 . VAR_69 = 1 ; if ( VAR_27 == 0 ) VAR_28 -> VAR_29 [ 0 ] -> VAR_30 . VAR_31 = VAR_32 ; METHOD_1 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 . VAR_37 , VAR_38 . VAR_39 ) ; VAR_40 . VAR_41 = METHOD_2 ( VAR_42 , VAR_43 , VAR_44 -> VAR_45 , 0 ) ; METHOD_3 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 , & VAR_50 ) ; if ( VAR_51 . VAR_52 ) { * VAR_53 = VAR_54 ; * VAR_55 = VAR_56 ; * VAR_57 = VAR_58 ; * VAR_59 = 0 ; } else { * VAR_60 = VAR_61 . VAR_62 ; * VAR_63 = VAR_64 . VAR_65 ; * VAR_66 = VAR_67 . VAR_68 ; * VAR_69 = VAR_67 . VAR_69 ; } }",119
120,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 = METHOD_2 ( VAR_6 ) ;  struct STRUCT_OR_UNION_5 * VAR_7 = & VAR_8 -> VAR_9 . VAR_10 . VAR_11 . VAR_12 ;   TYPE_1 VAR_13 = 0 ;  TYPE_2 VAR_14 = METHOD_3 ( VAR_15 ) ; TYPE_3 VAR_16 = 0 ; if ( ( VAR_17 = METHOD_4 ( & VAR_18 -> VAR_19 ) ) == VAR_20 ) goto VAR_21 ; VAR_22 = METHOD_5 ( VAR_23 ) ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 = METHOD_6 ( VAR_34 -> VAR_35 ) ; VAR_36 -> VAR_37 = 0 ; if ( VAR_38 ) VAR_39 = METHOD_7 ( VAR_40 , VAR_41 ) ; else if ( VAR_42 -> VAR_43 == VAR_44 ) { METHOD_8 ( VAR_45 , VAR_46 , & VAR_47 -> VAR_48 , & VAR_49 -> VAR_50 , VAR_51 -> VAR_52 ) ; goto VAR_53 ; } else VAR_54 = METHOD_9 ( VAR_55 , VAR_56 ) ; VAR_57 -> VAR_58 = METHOD_10 ( & VAR_59 -> VAR_60 , & VAR_61 -> VAR_62 , VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 ) ; if ( VAR_68 -> VAR_69 == 0 ) VAR_70 -> VAR_71 = VAR_72 ; VAR_73 : VAR_74 = METHOD_11 ( VAR_75 ) ; if ( VAR_76 ) { if ( VAR_77 == - VAR_78 && ! METHOD_12 ( VAR_79 ) -> VAR_80 ) { METHOD_13 ( METHOD_14 ( VAR_81 ) , VAR_82 , VAR_83 ) ; VAR_84 = 0 ; } } else METHOD_15 ( METHOD_16 ( VAR_85 ) , VAR_86 , VAR_87 ) ; VAR_88 : VAR_89 -> VAR_90 = 0 ; VAR_91 -> VAR_92 = 0 ; return VAR_93 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 = METHOD_2 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_65 ; TYPE_2 VAR_93 = 0 ; TYPE_2 VAR_87 = METHOD_3 ( VAR_85 ) ; TYPE_3 VAR_67 = 0 ; if ( VAR_91 -> VAR_92 == VAR_94 ) return METHOD_17 ( VAR_85 ) ; VAR_7 = & VAR_8 -> VAR_9 . VAR_10 . VAR_11 . VAR_12 ; if ( ( VAR_17 = METHOD_4 ( & VAR_18 -> VAR_19 ) ) == VAR_20 ) goto VAR_21 ; VAR_22 = METHOD_5 ( VAR_23 ) ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 = METHOD_6 ( VAR_34 -> VAR_35 ) ; VAR_36 -> VAR_37 = 0 ; if ( VAR_38 ) VAR_39 = METHOD_7 ( VAR_40 , VAR_41 ) ; else if ( VAR_42 -> VAR_43 == VAR_44 ) { METHOD_8 ( VAR_45 , VAR_46 , & VAR_47 -> VAR_48 , & VAR_49 -> VAR_50 , VAR_51 -> VAR_52 ) ; goto VAR_53 ; } else VAR_54 = METHOD_9 ( VAR_55 , VAR_56 ) ; VAR_57 -> VAR_58 = METHOD_10 ( & VAR_59 -> VAR_60 , & VAR_61 -> VAR_62 , VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 ) ; if ( VAR_68 -> VAR_69 == 0 ) VAR_70 -> VAR_71 = VAR_72 ; VAR_73 : VAR_74 = METHOD_11 ( VAR_75 ) ; if ( VAR_76 ) { if ( VAR_77 == - VAR_78 && ! METHOD_12 ( VAR_79 ) -> VAR_80 ) { METHOD_13 ( METHOD_14 ( VAR_81 ) , VAR_82 , VAR_83 ) ; VAR_84 = 0 ; } } else METHOD_15 ( METHOD_16 ( VAR_85 ) , VAR_86 , VAR_87 ) ; VAR_88 : VAR_89 -> VAR_90 = 0 ; VAR_91 -> VAR_92 = 0 ; return VAR_93 ; }",120
121,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_3 * VAR_4 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_5 ; TYPE_1 VAR_6 ; TYPE_2 VAR_7 [ ] = { 0 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 } ; TYPE_3 VAR_14 = - VAR_15 ; VAR_16 [ 0 ] = VAR_17 ; STRUCT_OR_UNION_7 = METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_8 ) , VAR_18 ) ; VAR_19 = METHOD_3 ( ) ; if ( ! STRUCT_OR_UNION_9 || ! VAR_20 ) { METHOD_4 ( & VAR_21 -> VAR_22 , ""cannotallocatememoryorinputdevice\\n"" ) ; goto VAR_23 ; } STRUCT_OR_UNION_10 -> VAR_24 = METHOD_5 ( VAR_25 , VAR_26 , VAR_27 , & STRUCT_OR_UNION_11 -> VAR_28 ) ; if ( ! STRUCT_OR_UNION_12 -> VAR_29 ) { METHOD_6 ( & VAR_30 -> VAR_31 , ""cannotallocateusbbuffer\\n"" ) ; goto VAR_32 ; } STRUCT_OR_UNION_13 -> VAR_33 = METHOD_7 ( 0 , VAR_34 ) ; if ( ! STRUCT_OR_UNION_14 -> VAR_35 ) { METHOD_8 ( & VAR_36 -> VAR_37 , ""cannotallocateurb\\n"" ) ; goto VAR_38 ; } STRUCT_OR_UNION_15 -> VAR_39 = VAR_40 ; STRUCT_OR_UNION_16 -> VAR_41 = VAR_42 ; STRUCT_OR_UNION_17 -> VAR_43 = VAR_44 ; STRUCT_OR_UNION_18 -> VAR_45 = VAR_46 -> VAR_47 [ 0 ] . VAR_48 . VAR_49 ; STRUCT_OR_UNION_19 -> VAR_50 = 0 ; STRUCT_OR_UNION_20 -> VAR_51 = 0 ; STRUCT_OR_UNION_21 -> VAR_52 = 0 ; STRUCT_OR_UNION_22 -> VAR_53 = - 1 ; STRUCT_OR_UNION_23 -> VAR_54 . VAR_55 = VAR_56 ; STRUCT_OR_UNION_24 -> VAR_57 . VAR_58 = VAR_59 ; STRUCT_OR_UNION_25 -> VAR_60 . VAR_61 = VAR_62 ; STRUCT_OR_UNION_26 -> VAR_63 . VAR_64 = VAR_65 ; STRUCT_OR_UNION_27 -> VAR_66 . VAR_67 = VAR_68 ; STRUCT_OR_UNION_28 -> VAR_69 . VAR_70 = VAR_71 ; STRUCT_OR_UNION_29 -> VAR_72 . VAR_73 = VAR_74 ; STRUCT_OR_UNION_30 -> VAR_75 . VAR_76 = VAR_77 ; STRUCT_OR_UNION_31 -> VAR_78 . VAR_79 = VAR_80 ; STRUCT_OR_UNION_32 -> VAR_81 . VAR_82 = VAR_83 ; STRUCT_OR_UNION_33 -> VAR_84 . VAR_85 = VAR_86 ; STRUCT_OR_UNION_34 -> VAR_87 . VAR_88 = VAR_89 ; STRUCT_OR_UNION_35 -> VAR_90 = STRUCT_OR_UNION_36 -> VAR_91 ; METHOD_9 ( VAR_92 , STRUCT_OR_UNION_37 -> VAR_93 . VAR_94 , sizeof ( STRUCT_OR_UNION_38 -> VAR_95 . VAR_96 ) ) ; METHOD_10 ( STRUCT_OR_UNION_39 -> VAR_97 . VAR_98 , ""/input0"" , sizeof ( STRUCT_OR_UNION_40 -> VAR_99 . VAR_100 ) ) ; VAR_101 -> VAR_102 = ""Aiptek"" ; VAR_103 -> VAR_104 = STRUCT_OR_UNION_41 -> VAR_105 . VAR_106 ; METHOD_11 ( VAR_107 , & VAR_108 -> VAR_109 ) ; VAR_110 -> VAR_111 . VAR_112 = & VAR_113 -> VAR_114 ; METHOD_12 ( VAR_115 , STRUCT_OR_UNION_42 ) ; VAR_116 -> VAR_117 = VAR_118 ; VAR_119 -> VAR_120 = VAR_121 ; for ( VAR_122 = 0 ; VAR_123 < METHOD_13 ( VAR_124 ) ; ++ VAR_125 ) METHOD_14 ( VAR_126 [ VAR_127 ] , VAR_128 -> VAR_129 ) ; for ( VAR_130 = 0 ; VAR_131 < METHOD_15 ( VAR_132 ) ; ++ VAR_133 ) METHOD_16 ( VAR_134 [ VAR_135 ] , VAR_136 -> VAR_137 ) ; for ( VAR_138 = 0 ; VAR_139 < METHOD_17 ( VAR_140 ) ; ++ VAR_141 ) METHOD_18 ( VAR_142 [ VAR_143 ] , VAR_144 -> VAR_145 ) ; METHOD_19 ( VAR_146 , VAR_147 -> VAR_148 ) ; for ( VAR_149 = 0 ; VAR_150 < METHOD_20 ( VAR_151 ) ; ++ VAR_152 ) METHOD_21 ( VAR_153 [ VAR_154 ] , VAR_155 -> VAR_156 ) ; for ( VAR_157 = 0 ; VAR_158 < METHOD_22 ( VAR_159 ) ; ++ VAR_160 ) METHOD_23 ( VAR_161 [ VAR_162 ] , VAR_163 -> VAR_164 ) ; METHOD_24 ( VAR_165 , VAR_166 , 0 , 2999 , 0 , 0 ) ; METHOD_25 ( VAR_167 , VAR_168 , 0 , 2249 , 0 , 0 ) ; METHOD_26 ( VAR_169 , VAR_170 , 0 , 511 , 0 , 0 ) ; METHOD_27 ( VAR_171 , VAR_172 , VAR_173 , VAR_174 , 0 , 0 ) ; METHOD_28 ( VAR_175 , VAR_176 , VAR_177 , VAR_178 , 0 , 0 ) ; METHOD_29 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 - 1 , 0 , 0 ) ;  VAR_183 = & VAR_184 -> VAR_185 [ 0 ] . VAR_186 [ 0 ] . VAR_187 ;  METHOD_30 ( STRUCT_OR_UNION_43 -> VAR_188 , STRUCT_OR_UNION_44 -> VAR_189 , METHOD_31 ( STRUCT_OR_UNION_45 -> VAR_190 , VAR_191 -> VAR_192 ) , STRUCT_OR_UNION_46 -> VAR_193 , 8 , VAR_194 , STRUCT_OR_UNION_47 , VAR_195 -> VAR_196 ) ; STRUCT_OR_UNION_48 -> VAR_197 -> VAR_198 = STRUCT_OR_UNION_49 -> VAR_199 ; STRUCT_OR_UNION_50 -> VAR_200 -> VAR_201 |= VAR_202 ; for ( VAR_203 = 0 ; VAR_204 < METHOD_32 ( VAR_205 ) ; ++ VAR_206 ) { STRUCT_OR_UNION_51 -> VAR_207 . VAR_208 = VAR_209 [ VAR_210 ] ; ( TYPE_4 ) METHOD_33 ( STRUCT_OR_UNION_52 ) ; if ( METHOD_34 ( STRUCT_OR_UNION_53 -> VAR_211 , VAR_212 ) > 0 ) { METHOD_35 ( & VAR_213 -> VAR_214 , ""Aiptekusing%dmsprogrammingspeed\\n"" , STRUCT_OR_UNION_54 -> VAR_215 . VAR_216 ) ; break ; } } if ( VAR_217 == METHOD_36 ( VAR_218 ) ) { METHOD_37 ( & VAR_219 -> VAR_220 , ""Aiptektriedallspeeds,nosaneresponse\\n"" ) ;  goto VAR_221 ;  } METHOD_38 ( VAR_222 , STRUCT_OR_UNION_55 ) ; VAR_223 = METHOD_39 ( & VAR_224 -> VAR_225 . VAR_226 , & VAR_227 ) ; if ( VAR_228 ) { METHOD_40 ( & VAR_229 -> VAR_230 , ""cannotcreatesysfsgrouperr:%d\\n"" , VAR_231 ) ; goto VAR_232 ; } VAR_233 = METHOD_41 ( STRUCT_OR_UNION_56 -> VAR_234 ) ; if ( VAR_235 ) { METHOD_42 ( & VAR_236 -> VAR_237 , ""input_register_devicereturnederr:%d\\n"" , VAR_238 ) ; goto VAR_239 ; } return 0 ; VAR_240 : METHOD_43 ( & VAR_241 -> VAR_242 . VAR_243 , & VAR_244 ) ; VAR_245 : METHOD_44 ( STRUCT_OR_UNION_57 -> VAR_246 ) ; VAR_247 : METHOD_45 ( VAR_248 , VAR_249 , STRUCT_OR_UNION_58 -> VAR_250 , STRUCT_OR_UNION_59 -> VAR_251 ) ; VAR_252 : METHOD_46 ( VAR_253 , VAR_254 ) ; METHOD_47 ( VAR_255 ) ; METHOD_48 ( STRUCT_OR_UNION_60 ) ; return VAR_256 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 ) ; struct STRUCT_OR_UNION_3 * VAR_4 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_5 ; TYPE_1 VAR_6 ; TYPE_2 VAR_7 [ ] = { 0 , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 } ; TYPE_3 VAR_14 = - VAR_15 ; VAR_16 [ 0 ] = VAR_17 ; STRUCT_OR_UNION_7 = METHOD_2 ( sizeof ( struct STRUCT_OR_UNION_8 ) , VAR_18 ) ; VAR_19 = METHOD_3 ( ) ; if ( ! STRUCT_OR_UNION_9 || ! VAR_20 ) { METHOD_4 ( & VAR_21 -> VAR_22 , ""cannotallocatememoryorinputdevice\\n"" ) ; goto VAR_23 ; } STRUCT_OR_UNION_10 -> VAR_24 = METHOD_5 ( VAR_25 , VAR_26 , VAR_27 , & STRUCT_OR_UNION_11 -> VAR_28 ) ; if ( ! STRUCT_OR_UNION_12 -> VAR_29 ) { METHOD_6 ( & VAR_30 -> VAR_31 , ""cannotallocateusbbuffer\\n"" ) ; goto VAR_32 ; } STRUCT_OR_UNION_13 -> VAR_33 = METHOD_7 ( 0 , VAR_34 ) ; if ( ! STRUCT_OR_UNION_14 -> VAR_35 ) { METHOD_8 ( & VAR_36 -> VAR_37 , ""cannotallocateurb\\n"" ) ; goto VAR_38 ; } STRUCT_OR_UNION_15 -> VAR_39 = VAR_40 ; STRUCT_OR_UNION_16 -> VAR_41 = VAR_42 ; STRUCT_OR_UNION_17 -> VAR_43 = VAR_44 ; STRUCT_OR_UNION_18 -> VAR_45 = VAR_46 -> VAR_47 [ 0 ] . VAR_48 . VAR_49 ; STRUCT_OR_UNION_19 -> VAR_50 = 0 ; STRUCT_OR_UNION_20 -> VAR_51 = 0 ; STRUCT_OR_UNION_21 -> VAR_52 = 0 ; STRUCT_OR_UNION_22 -> VAR_53 = - 1 ; STRUCT_OR_UNION_23 -> VAR_54 . VAR_55 = VAR_56 ; STRUCT_OR_UNION_24 -> VAR_57 . VAR_58 = VAR_59 ; STRUCT_OR_UNION_25 -> VAR_60 . VAR_61 = VAR_62 ; STRUCT_OR_UNION_26 -> VAR_63 . VAR_64 = VAR_65 ; STRUCT_OR_UNION_27 -> VAR_66 . VAR_67 = VAR_68 ; STRUCT_OR_UNION_28 -> VAR_69 . VAR_70 = VAR_71 ; STRUCT_OR_UNION_29 -> VAR_72 . VAR_73 = VAR_74 ; STRUCT_OR_UNION_30 -> VAR_75 . VAR_76 = VAR_77 ; STRUCT_OR_UNION_31 -> VAR_78 . VAR_79 = VAR_80 ; STRUCT_OR_UNION_32 -> VAR_81 . VAR_82 = VAR_83 ; STRUCT_OR_UNION_33 -> VAR_84 . VAR_85 = VAR_86 ; STRUCT_OR_UNION_34 -> VAR_87 . VAR_88 = VAR_89 ; STRUCT_OR_UNION_35 -> VAR_90 = STRUCT_OR_UNION_36 -> VAR_91 ; METHOD_9 ( VAR_92 , STRUCT_OR_UNION_37 -> VAR_93 . VAR_94 , sizeof ( STRUCT_OR_UNION_38 -> VAR_95 . VAR_96 ) ) ; METHOD_10 ( STRUCT_OR_UNION_39 -> VAR_97 . VAR_98 , ""/input0"" , sizeof ( STRUCT_OR_UNION_40 -> VAR_99 . VAR_100 ) ) ; VAR_101 -> VAR_102 = ""Aiptek"" ; VAR_103 -> VAR_104 = STRUCT_OR_UNION_41 -> VAR_105 . VAR_106 ; METHOD_11 ( VAR_107 , & VAR_108 -> VAR_109 ) ; VAR_110 -> VAR_111 . VAR_112 = & VAR_113 -> VAR_114 ; METHOD_12 ( VAR_115 , STRUCT_OR_UNION_42 ) ; VAR_116 -> VAR_117 = VAR_118 ; VAR_119 -> VAR_120 = VAR_121 ; for ( VAR_122 = 0 ; VAR_123 < METHOD_13 ( VAR_124 ) ; ++ VAR_125 ) METHOD_14 ( VAR_126 [ VAR_127 ] , VAR_128 -> VAR_129 ) ; for ( VAR_130 = 0 ; VAR_131 < METHOD_15 ( VAR_132 ) ; ++ VAR_133 ) METHOD_16 ( VAR_134 [ VAR_135 ] , VAR_136 -> VAR_137 ) ; for ( VAR_138 = 0 ; VAR_139 < METHOD_17 ( VAR_140 ) ; ++ VAR_141 ) METHOD_18 ( VAR_142 [ VAR_143 ] , VAR_144 -> VAR_145 ) ; METHOD_19 ( VAR_146 , VAR_147 -> VAR_148 ) ; for ( VAR_149 = 0 ; VAR_150 < METHOD_20 ( VAR_151 ) ; ++ VAR_152 ) METHOD_21 ( VAR_153 [ VAR_154 ] , VAR_155 -> VAR_156 ) ; for ( VAR_157 = 0 ; VAR_158 < METHOD_22 ( VAR_159 ) ; ++ VAR_160 ) METHOD_23 ( VAR_161 [ VAR_162 ] , VAR_163 -> VAR_164 ) ; METHOD_24 ( VAR_165 , VAR_166 , 0 , 2999 , 0 , 0 ) ; if ( VAR_253 -> VAR_185 [ 0 ] . VAR_187 . VAR_257 < 1 ) { METHOD_49 ( & VAR_253 -> VAR_242 , ""interfacehas%dendpoints,butmusthaveminimum1\\n"" , VAR_253 -> VAR_185 [ 0 ] . VAR_187 . VAR_257 ) ; VAR_256 = - VAR_258 ; goto VAR_245 ; } METHOD_25 ( VAR_167 , VAR_168 , 0 , 2249 , 0 , 0 ) ; METHOD_26 ( VAR_169 , VAR_170 , 0 , 511 , 0 , 0 ) ; METHOD_27 ( VAR_171 , VAR_172 , VAR_173 , VAR_174 , 0 , 0 ) ; METHOD_28 ( VAR_175 , VAR_176 , VAR_177 , VAR_178 , 0 , 0 ) ; METHOD_29 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 - 1 , 0 , 0 ) ; VAR_183 = & VAR_184 -> VAR_185 [ 0 ] . VAR_186 [ 0 ] . VAR_187 ; METHOD_30 ( STRUCT_OR_UNION_43 -> VAR_188 , STRUCT_OR_UNION_44 -> VAR_189 , METHOD_31 ( STRUCT_OR_UNION_45 -> VAR_190 , VAR_191 -> VAR_192 ) , STRUCT_OR_UNION_46 -> VAR_193 , 8 , VAR_194 , STRUCT_OR_UNION_47 , VAR_195 -> VAR_196 ) ; STRUCT_OR_UNION_48 -> VAR_197 -> VAR_198 = STRUCT_OR_UNION_49 -> VAR_199 ; STRUCT_OR_UNION_50 -> VAR_200 -> VAR_201 |= VAR_202 ; for ( VAR_203 = 0 ; VAR_204 < METHOD_32 ( VAR_205 ) ; ++ VAR_206 ) { STRUCT_OR_UNION_51 -> VAR_207 . VAR_208 = VAR_209 [ VAR_210 ] ; ( TYPE_4 ) METHOD_33 ( STRUCT_OR_UNION_52 ) ; if ( METHOD_34 ( STRUCT_OR_UNION_53 -> VAR_211 , VAR_212 ) > 0 ) { METHOD_35 ( & VAR_213 -> VAR_214 , ""Aiptekusing%dmsprogrammingspeed\\n"" , STRUCT_OR_UNION_54 -> VAR_215 . VAR_216 ) ; break ; } } if ( VAR_217 == METHOD_36 ( VAR_218 ) ) { METHOD_37 ( & VAR_219 -> VAR_220 , ""Aiptektriedallspeeds,nosaneresponse\\n"" ) ; VAR_256 = - VAR_258 ; goto VAR_221 ; } METHOD_38 ( VAR_222 , STRUCT_OR_UNION_55 ) ; VAR_223 = METHOD_39 ( & VAR_224 -> VAR_225 . VAR_226 , & VAR_227 ) ; if ( VAR_228 ) { METHOD_40 ( & VAR_229 -> VAR_230 , ""cannotcreatesysfsgrouperr:%d\\n"" , VAR_231 ) ; goto VAR_232 ; } VAR_233 = METHOD_41 ( STRUCT_OR_UNION_56 -> VAR_234 ) ; if ( VAR_235 ) { METHOD_42 ( & VAR_236 -> VAR_237 , ""input_register_devicereturnederr:%d\\n"" , VAR_238 ) ; goto VAR_239 ; } return 0 ; VAR_240 : METHOD_43 ( & VAR_241 -> VAR_242 . VAR_243 , & VAR_244 ) ; VAR_245 : METHOD_44 ( STRUCT_OR_UNION_57 -> VAR_246 ) ; VAR_247 : METHOD_45 ( VAR_248 , VAR_249 , STRUCT_OR_UNION_58 -> VAR_250 , STRUCT_OR_UNION_59 -> VAR_251 ) ; VAR_252 : METHOD_46 ( VAR_253 , VAR_254 ) ; METHOD_47 ( VAR_255 ) ; METHOD_48 ( STRUCT_OR_UNION_60 ) ; return VAR_256 ; }",121
122,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 ; TYPE_6 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_7 VAR_12 ; TYPE_8 VAR_13 , VAR_14 ; VAR_15 = ( TYPE_9 * ) VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 ) ; METHOD_2 ( VAR_19 , VAR_20 + 8 ) ; VAR_21 = METHOD_3 ( VAR_22 ) ; if ( VAR_23 ) VAR_24 -> VAR_25 = 1 ; if ( VAR_26 == 1 ) { METHOD_4 ( VAR_27 , VAR_28 + 8 + 20 + 4 ) ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = METHOD_8 ( VAR_36 ) ; VAR_37 = 0 ; if ( METHOD_9 ( VAR_38 ) ) VAR_39 ++ ; if ( METHOD_10 ( VAR_40 ) ) VAR_41 ++ ; if ( METHOD_11 ( VAR_42 ) ) VAR_43 ++ ; if ( METHOD_12 ( VAR_44 ) ) VAR_45 ++ ; if ( VAR_46 > 2 ) VAR_47 -> VAR_48 = 0 ; } METHOD_13 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_14 ( ( TYPE_10 * ) VAR_52 , VAR_53 ) ; if ( VAR_54 ) return VAR_55 ; VAR_56 = METHOD_15 ( VAR_57 ) ; VAR_58 = ( TYPE_11 ) VAR_59 -> VAR_60 ; if ( METHOD_16 ( VAR_61 ) ) { VAR_62 -> VAR_63 |= 1 << 16 ; } VAR_64 = METHOD_17 ( VAR_65 , VAR_66 , VAR_67 ) ; if ( ! VAR_68 ) return VAR_69 ; if ( VAR_70 < 8 ) return VAR_71 ; METHOD_18 ( VAR_72 , VAR_73 ) ; VAR_74 = ( TYPE_12 * ) METHOD_19 ( sizeof ( TYPE_13 ) * VAR_75 ) ; METHOD_20 ( VAR_76 , VAR_77 , VAR_78 ) ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 - 8 ; VAR_82 ++ ) { if ( METHOD_21 ( ( TYPE_14 ) VAR_83 [ VAR_84 + 4 ] , ( TYPE_15 ) VAR_85 [ VAR_86 + 5 ] , ( TYPE_16 ) VAR_87 [ VAR_88 + 6 ] , ( TYPE_17 ) VAR_89 [ VAR_90 + 7 ] ) == VAR_91 ) {  TYPE_18 * VAR_92 = METHOD_22 ( VAR_93 + VAR_94 , VAR_95 - VAR_96 , VAR_97 ) ;  if ( VAR_98 -> VAR_99 ) {  METHOD_23 ( ( TYPE_19 * ) VAR_100 -> VAR_101 ) ;  VAR_102 -> VAR_103 = VAR_104 ; } VAR_105 = METHOD_24 ( ( TYPE_20 * * ) & VAR_106 -> VAR_107 , VAR_108 ) ; if ( VAR_109 == VAR_110 ) { METHOD_25 ( ( TYPE_21 * ) VAR_111 , ( TYPE_22 * ) VAR_112 -> VAR_113 ) ; } else if ( VAR_114 -> VAR_115 ) { METHOD_26 ( ( TYPE_23 * ) VAR_116 -> VAR_117 ) ; VAR_118 -> VAR_119 = VAR_120 ; } METHOD_27 ( VAR_121 ) ; break ; } } METHOD_28 ( VAR_122 ) ; return VAR_123 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 ; TYPE_6 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_7 VAR_12 ; TYPE_8 VAR_13 , VAR_14 ; VAR_15 = ( TYPE_9 * ) VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 ) ; METHOD_2 ( VAR_19 , VAR_20 + 8 ) ; VAR_21 = METHOD_3 ( VAR_22 ) ; if ( VAR_23 ) VAR_24 -> VAR_25 = 1 ; if ( VAR_26 == 1 ) { METHOD_4 ( VAR_27 , VAR_28 + 8 + 20 + 4 ) ; VAR_29 = METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 ) ; VAR_35 = METHOD_8 ( VAR_36 ) ; VAR_37 = 0 ; if ( METHOD_9 ( VAR_38 ) ) VAR_39 ++ ; if ( METHOD_10 ( VAR_40 ) ) VAR_41 ++ ; if ( METHOD_11 ( VAR_42 ) ) VAR_43 ++ ; if ( METHOD_12 ( VAR_44 ) ) VAR_45 ++ ; if ( VAR_46 > 2 ) VAR_47 -> VAR_48 = 0 ; } METHOD_13 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_14 ( ( TYPE_10 * ) VAR_52 , VAR_53 ) ; if ( VAR_54 ) return VAR_55 ; VAR_56 = METHOD_15 ( VAR_57 ) ; VAR_58 = ( TYPE_11 ) VAR_59 -> VAR_60 ; if ( METHOD_16 ( VAR_61 ) ) { VAR_62 -> VAR_63 |= 1 << 16 ; } VAR_64 = METHOD_17 ( VAR_65 , VAR_66 , VAR_67 ) ; if ( ! VAR_68 ) return VAR_69 ; if ( VAR_70 < 8 ) return VAR_71 ; METHOD_18 ( VAR_72 , VAR_73 ) ; VAR_74 = ( TYPE_12 * ) METHOD_19 ( sizeof ( TYPE_13 ) * VAR_75 ) ; METHOD_20 ( VAR_76 , VAR_77 , VAR_78 ) ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 - 8 ; VAR_82 ++ ) { if ( METHOD_21 ( ( TYPE_14 ) VAR_83 [ VAR_84 + 4 ] , ( TYPE_15 ) VAR_85 [ VAR_86 + 5 ] , ( TYPE_16 ) VAR_87 [ VAR_88 + 6 ] , ( TYPE_17 ) VAR_89 [ VAR_90 + 7 ] ) == VAR_91 ) { extern TYPE_24 VAR_124 ; TYPE_18 * VAR_92 = METHOD_22 ( VAR_93 + VAR_94 , VAR_95 - VAR_96 , VAR_97 ) ; if ( VAR_98 -> VAR_99 ) { METHOD_23 ( ( TYPE_19 * ) VAR_100 -> VAR_101 ) ; VAR_102 -> VAR_103 = VAR_104 ; } VAR_105 = METHOD_24 ( ( TYPE_20 * * ) & VAR_106 -> VAR_107 , VAR_108 ) ; if ( VAR_109 == VAR_110 ) { METHOD_25 ( ( TYPE_21 * ) VAR_111 , ( TYPE_22 * ) VAR_112 -> VAR_113 ) ; } else if ( VAR_114 -> VAR_115 ) { METHOD_26 ( ( TYPE_23 * ) VAR_116 -> VAR_117 ) ; VAR_118 -> VAR_119 = VAR_120 ; } METHOD_27 ( VAR_121 ) ; break ; } } METHOD_28 ( VAR_122 ) ; return VAR_123 ; }",122
123,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  if ( * VAR_3 >= VAR_4 )   return VAR_5 ;  * VAR_6 = * VAR_7 + 1 ; VAR_8 [ * VAR_9 ] = VAR_10 ; return VAR_11 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( * VAR_3 >= VAR_4 ) return VAR_5 ; } * VAR_6 = * VAR_7 + 1 ; VAR_8 [ * VAR_9 ] = VAR_10 ; return VAR_11 ; }",123
124,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; while ( ( VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 ) ) != VAR_8 ) { struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_1 VAR_11 ; unsigned VAR_12 ; VAR_13 = * ( ( TYPE_2 * ) VAR_14 -> VAR_15 ) ; VAR_16 = VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 ; VAR_21 = & VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ; if ( METHOD_2 ( METHOD_3 ( VAR_26 , VAR_27 , & VAR_28 ) ) ) { METHOD_4 ( VAR_29 -> VAR_30 , ""netbackgrantfailed.\\n"" ) ; METHOD_5 ( VAR_31 ) -> VAR_32 = 0 ; METHOD_6 ( VAR_33 ) ; continue ; } VAR_34 = VAR_35 -> VAR_36 ; METHOD_7 ( VAR_37 -> VAR_38 , ( TYPE_3 * ) ( METHOD_8 ( VAR_39 , VAR_40 ) | VAR_41 -> VAR_42 ) , VAR_43 ) ; if ( VAR_44 < VAR_45 -> VAR_46 ) { VAR_47 -> VAR_48 += VAR_49 ; VAR_50 -> VAR_51 -= VAR_52 ; } else {  METHOD_9 ( VAR_53 , VAR_54 ) ;  } if ( VAR_55 -> VAR_56 & VAR_57 ) VAR_58 -> VAR_59 = VAR_60 ; else if ( VAR_61 -> VAR_62 & VAR_63 ) VAR_64 -> VAR_65 = VAR_66 ; METHOD_10 ( VAR_67 , VAR_68 ) ; if ( METHOD_11 ( VAR_69 ) < VAR_70 && METHOD_12 ( VAR_71 ) ) { TYPE_4 VAR_72 = min_t ( TYPE_5 , VAR_73 -> VAR_74 , VAR_75 ) ; METHOD_13 ( VAR_76 , VAR_77 - METHOD_14 ( VAR_78 ) ) ; } VAR_79 -> VAR_80 = VAR_81 -> VAR_82 ; VAR_83 -> VAR_84 = METHOD_15 ( VAR_85 , VAR_86 -> VAR_87 ) ; if ( METHOD_16 ( VAR_88 , VAR_89 ) ) { METHOD_17 ( VAR_90 -> VAR_91 , ""Can\'tsetupchecksuminnet_tx_action\\n"" ) ; METHOD_18 ( VAR_92 ) ; continue ; } VAR_93 -> VAR_94 -> VAR_95 . VAR_96 += VAR_97 -> VAR_98 ; VAR_99 -> VAR_100 -> VAR_101 . VAR_102 ++ ; METHOD_19 ( VAR_103 , VAR_104 ) ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; while ( ( VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 ) ) != VAR_8 ) { struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_1 VAR_11 ; unsigned VAR_12 ; VAR_13 = * ( ( TYPE_2 * ) VAR_14 -> VAR_15 ) ; VAR_16 = VAR_17 -> VAR_18 [ VAR_19 ] . VAR_20 ; VAR_21 = & VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ; if ( METHOD_2 ( METHOD_3 ( VAR_26 , VAR_27 , & VAR_28 ) ) ) { METHOD_4 ( VAR_29 -> VAR_30 , ""netbackgrantfailed.\\n"" ) ; METHOD_5 ( VAR_31 ) -> VAR_32 = 0 ; METHOD_6 ( VAR_33 ) ; continue ; } VAR_34 = VAR_35 -> VAR_36 ; METHOD_7 ( VAR_37 -> VAR_38 , ( TYPE_3 * ) ( METHOD_8 ( VAR_39 , VAR_40 ) | VAR_41 -> VAR_42 ) , VAR_43 ) ; if ( VAR_44 < VAR_45 -> VAR_46 ) { VAR_47 -> VAR_48 += VAR_49 ; VAR_50 -> VAR_51 -= VAR_52 ; } else { METHOD_9 ( VAR_53 , VAR_54 ) ; } if ( VAR_55 -> VAR_56 & VAR_57 ) VAR_58 -> VAR_59 = VAR_60 ; else if ( VAR_61 -> VAR_62 & VAR_63 ) VAR_64 -> VAR_65 = VAR_66 ; METHOD_10 ( VAR_67 , VAR_68 ) ; if ( METHOD_11 ( VAR_69 ) < VAR_70 && METHOD_12 ( VAR_71 ) ) { TYPE_4 VAR_72 = min_t ( TYPE_5 , VAR_73 -> VAR_74 , VAR_75 ) ; METHOD_13 ( VAR_76 , VAR_77 - METHOD_14 ( VAR_78 ) ) ; } VAR_79 -> VAR_80 = VAR_81 -> VAR_82 ; VAR_83 -> VAR_84 = METHOD_15 ( VAR_85 , VAR_86 -> VAR_87 ) ; if ( METHOD_16 ( VAR_88 , VAR_89 ) ) { METHOD_17 ( VAR_90 -> VAR_91 , ""Can\'tsetupchecksuminnet_tx_action\\n"" ) ; METHOD_18 ( VAR_92 ) ; continue ; } VAR_93 -> VAR_94 -> VAR_95 . VAR_96 += VAR_97 -> VAR_98 ; VAR_99 -> VAR_100 -> VAR_101 . VAR_102 ++ ; METHOD_19 ( VAR_103 , VAR_104 ) ; } }",124
125,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; const TYPE_6 * VAR_7 = VAR_8 -> VAR_9 & VAR_10 ? ""POST"" : ""GET"" ; TYPE_7 * VAR_11 , * VAR_12 , * VAR_13 , * VAR_14 , * VAR_15 , * VAR_16 ; TYPE_8 VAR_17 ; if ( VAR_18 [ 0 ] == '\\0' ) { VAR_19 -> VAR_20 = 1 ; return 0 ; } VAR_21 = VAR_22 ; if ( VAR_23 == 0 ) { if ( VAR_24 -> VAR_25 ) { VAR_26 = VAR_27 ; while ( * VAR_28 && ! METHOD_1 ( * VAR_29 ) ) VAR_30 ++ ; * ( VAR_31 ++ ) = '\\0' ; METHOD_2 ( VAR_32 , VAR_33 , ""Receivedmethod:%s\\n"" , VAR_34 ) ; if ( VAR_35 -> VAR_36 ) { if ( METHOD_3 ( VAR_37 -> VAR_38 , VAR_39 ) ) { METHOD_4 ( VAR_40 , VAR_41 , ""ReceivedandexpectedHTTPmethoddonotmatch.(%sexpected,%sreceived)\\n"" , VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_5 ( 400 , METHOD_6 ( VAR_45 ) ) ; } } else { METHOD_7 ( VAR_46 , VAR_47 , ""Autodetected%sHTTPmethod\\n"" , VAR_48 ) ; if ( METHOD_8 ( VAR_49 , VAR_50 ) ) { METHOD_9 ( VAR_51 , VAR_52 , ""ReceivedandautodetectedHTTPmethoddidnotmatch"" ""(%sautodetected%sreceived)\\n"" , VAR_53 , VAR_54 ) ; return METHOD_10 ( 400 , METHOD_11 ( VAR_55 ) ) ; } if ( ! ( VAR_56 -> VAR_57 = METHOD_12 ( VAR_58 ) ) ) return METHOD_13 ( VAR_59 ) ; } while ( METHOD_14 ( * VAR_60 ) ) VAR_61 ++ ; VAR_62 = VAR_63 ; while ( ! METHOD_15 ( * VAR_64 ) ) VAR_65 ++ ; * ( VAR_66 ++ ) = '\\0' ; METHOD_16 ( VAR_67 , VAR_68 , ""Requestedresource:%s\\n"" , VAR_69 ) ; if ( ! ( VAR_70 -> VAR_71 = METHOD_17 ( VAR_72 ) ) ) return METHOD_18 ( VAR_73 ) ; while ( METHOD_19 ( * VAR_74 ) ) VAR_75 ++ ; VAR_76 = VAR_77 ; while ( * VAR_78 && ! METHOD_20 ( * VAR_79 ) ) VAR_80 ++ ; * VAR_81 = '\\0' ; if ( METHOD_21 ( VAR_82 , ""HTTP/"" , 5 ) ) { METHOD_22 ( VAR_83 , VAR_84 , ""MalformedHTTPversionstring.\\n"" ) ; return METHOD_23 ( 400 , METHOD_24 ( VAR_85 ) ) ; } METHOD_25 ( VAR_86 , VAR_87 , ""HTTPversionstring:%s\\n"" , VAR_88 ) ; } else { while ( ! METHOD_26 ( * VAR_89 ) && * VAR_90 != '\\0' ) VAR_91 ++ ; while ( METHOD_27 ( * VAR_92 ) ) VAR_93 ++ ; VAR_94 -> VAR_95 = METHOD_28 ( VAR_96 , & VAR_97 , 10 ) ; METHOD_29 ( VAR_98 , VAR_99 , ""http_code=%d\\n"" , VAR_100 -> VAR_101 ) ; if ( ( VAR_102 = METHOD_30 ( VAR_103 , VAR_104 -> VAR_105 , VAR_106 ) ) < 0 ) return VAR_107 ; } } else { while ( * VAR_108 != '\\0' && * VAR_109 != ':' ) VAR_110 ++ ; if ( * VAR_111 != ':' ) return 1 ; * VAR_112 = '\\0' ; VAR_113 = VAR_114 ; VAR_115 ++ ; while ( METHOD_31 ( * VAR_116 ) ) VAR_117 ++ ; if ( ! METHOD_32 ( VAR_118 , ""Location"" ) ) { if ( ( VAR_119 = METHOD_33 ( VAR_120 , VAR_121 ) ) < 0 ) return VAR_122 ; * VAR_123 = 1 ;  } else if ( ! METHOD_34 ( VAR_124 , ""Content-Length"" ) && VAR_125 -> VAR_126 == - 1 ) {   VAR_127 -> VAR_128 = METHOD_35 ( VAR_129 , VAR_130 , 10 ) ;  } else if ( ! METHOD_36 ( VAR_131 , ""Content-Range"" ) ) { METHOD_37 ( VAR_132 , VAR_133 ) ; } else if ( ! METHOD_38 ( VAR_134 , ""Accept-Ranges"" ) && ! METHOD_39 ( VAR_135 , ""bytes"" , 5 ) && VAR_136 -> VAR_137 == - 1 ) { VAR_138 -> VAR_139 = 0 ; } else if ( ! METHOD_40 ( VAR_140 , ""Transfer-Encoding"" ) && ! METHOD_41 ( VAR_141 , ""chunked"" , 7 ) ) {  VAR_142 -> VAR_143 = - 1 ;  VAR_144 -> VAR_145 = 0 ; } else if ( ! METHOD_42 ( VAR_146 , ""WWW-Authenticate"" ) ) {  METHOD_43 ( & VAR_147 -> VAR_148 , VAR_149 , VAR_150 ) ;  } else if ( ! METHOD_44 ( VAR_151 , ""Authentication-Info"" ) ) { METHOD_45 ( & VAR_152 -> VAR_153 , VAR_154 , VAR_155 ) ; } else if ( ! METHOD_46 ( VAR_156 , ""Proxy-Authenticate"" ) ) { METHOD_47 ( & VAR_157 -> VAR_158 , VAR_159 , VAR_160 ) ; } else if ( ! METHOD_48 ( VAR_161 , ""Connection"" ) ) { if ( ! METHOD_49 ( VAR_162 , ""close"" ) ) VAR_163 -> VAR_164 = 1 ; } else if ( ! METHOD_50 ( VAR_165 , ""Server"" ) ) { if ( ! METHOD_51 ( VAR_166 , ""AkamaiGHost"" ) ) { VAR_167 -> VAR_168 = 1 ; } else if ( ! METHOD_52 ( VAR_169 , ""MediaGateway"" , 12 ) ) { VAR_170 -> VAR_171 = 1 ; } } else if ( ! METHOD_53 ( VAR_172 , ""Content-Type"" ) ) { METHOD_54 ( VAR_173 -> VAR_174 ) ; VAR_175 -> VAR_176 = METHOD_55 ( VAR_177 ) ; } else if ( ! METHOD_56 ( VAR_178 , ""Set-Cookie"" ) ) { if ( METHOD_57 ( VAR_179 , VAR_180 , & VAR_181 -> VAR_182 ) ) METHOD_58 ( VAR_183 , VAR_184 , ""Unabletoparse\'%s\'\\n"" , VAR_185 ) ; } else if ( ! METHOD_59 ( VAR_186 , ""Icy-MetaInt"" ) ) {  VAR_187 -> VAR_188 = METHOD_60 ( VAR_189 , VAR_190 , 10 ) ;  } else if ( ! METHOD_61 ( VAR_191 , ""Icy-"" , 4 ) ) { if ( ( VAR_192 = METHOD_62 ( VAR_193 , VAR_194 , VAR_195 ) ) < 0 ) return VAR_196 ; } else if ( ! METHOD_63 ( VAR_197 , ""Content-Encoding"" ) ) { if ( ( VAR_198 = METHOD_64 ( VAR_199 , VAR_200 ) ) < 0 ) return VAR_201 ; } } return 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; const TYPE_6 * VAR_7 = VAR_8 -> VAR_9 & VAR_10 ? ""POST"" : ""GET"" ; TYPE_7 * VAR_11 , * VAR_12 , * VAR_13 , * VAR_14 , * VAR_15 , * VAR_16 ; TYPE_8 VAR_17 ; if ( VAR_18 [ 0 ] == '\\0' ) { VAR_19 -> VAR_20 = 1 ; return 0 ; } VAR_21 = VAR_22 ; if ( VAR_23 == 0 ) { if ( VAR_24 -> VAR_25 ) { VAR_26 = VAR_27 ; while ( * VAR_28 && ! METHOD_1 ( * VAR_29 ) ) VAR_30 ++ ; * ( VAR_31 ++ ) = '\\0' ; METHOD_2 ( VAR_32 , VAR_33 , ""Receivedmethod:%s\\n"" , VAR_34 ) ; if ( VAR_35 -> VAR_36 ) { if ( METHOD_3 ( VAR_37 -> VAR_38 , VAR_39 ) ) { METHOD_4 ( VAR_40 , VAR_41 , ""ReceivedandexpectedHTTPmethoddonotmatch.(%sexpected,%sreceived)\\n"" , VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_5 ( 400 , METHOD_6 ( VAR_45 ) ) ; } } else { METHOD_7 ( VAR_46 , VAR_47 , ""Autodetected%sHTTPmethod\\n"" , VAR_48 ) ; if ( METHOD_8 ( VAR_49 , VAR_50 ) ) { METHOD_9 ( VAR_51 , VAR_52 , ""ReceivedandautodetectedHTTPmethoddidnotmatch"" ""(%sautodetected%sreceived)\\n"" , VAR_53 , VAR_54 ) ; return METHOD_10 ( 400 , METHOD_11 ( VAR_55 ) ) ; } if ( ! ( VAR_56 -> VAR_57 = METHOD_12 ( VAR_58 ) ) ) return METHOD_13 ( VAR_59 ) ; } while ( METHOD_14 ( * VAR_60 ) ) VAR_61 ++ ; VAR_62 = VAR_63 ; while ( ! METHOD_15 ( * VAR_64 ) ) VAR_65 ++ ; * ( VAR_66 ++ ) = '\\0' ; METHOD_16 ( VAR_67 , VAR_68 , ""Requestedresource:%s\\n"" , VAR_69 ) ; if ( ! ( VAR_70 -> VAR_71 = METHOD_17 ( VAR_72 ) ) ) return METHOD_18 ( VAR_73 ) ; while ( METHOD_19 ( * VAR_74 ) ) VAR_75 ++ ; VAR_76 = VAR_77 ; while ( * VAR_78 && ! METHOD_20 ( * VAR_79 ) ) VAR_80 ++ ; * VAR_81 = '\\0' ; if ( METHOD_21 ( VAR_82 , ""HTTP/"" , 5 ) ) { METHOD_22 ( VAR_83 , VAR_84 , ""MalformedHTTPversionstring.\\n"" ) ; return METHOD_23 ( 400 , METHOD_24 ( VAR_85 ) ) ; } METHOD_25 ( VAR_86 , VAR_87 , ""HTTPversionstring:%s\\n"" , VAR_88 ) ; } else { while ( ! METHOD_26 ( * VAR_89 ) && * VAR_90 != '\\0' ) VAR_91 ++ ; while ( METHOD_27 ( * VAR_92 ) ) VAR_93 ++ ; VAR_94 -> VAR_95 = METHOD_28 ( VAR_96 , & VAR_97 , 10 ) ; METHOD_29 ( VAR_98 , VAR_99 , ""http_code=%d\\n"" , VAR_100 -> VAR_101 ) ; if ( ( VAR_102 = METHOD_30 ( VAR_103 , VAR_104 -> VAR_105 , VAR_106 ) ) < 0 ) return VAR_107 ; } } else { while ( * VAR_108 != '\\0' && * VAR_109 != ':' ) VAR_110 ++ ; if ( * VAR_111 != ':' ) return 1 ; * VAR_112 = '\\0' ; VAR_113 = VAR_114 ; VAR_115 ++ ; while ( METHOD_31 ( * VAR_116 ) ) VAR_117 ++ ; if ( ! METHOD_32 ( VAR_118 , ""Location"" ) ) { if ( ( VAR_119 = METHOD_33 ( VAR_120 , VAR_121 ) ) < 0 ) return VAR_122 ; * VAR_123 = 1 ; } else if ( ! METHOD_34 ( VAR_124 , ""Content-Length"" ) && VAR_125 -> VAR_126 == - 1 ) { VAR_127 -> VAR_128 = METHOD_35 ( VAR_129 , VAR_130 , 10 ) ; } else if ( ! METHOD_36 ( VAR_131 , ""Content-Range"" ) ) { METHOD_37 ( VAR_132 , VAR_133 ) ; } else if ( ! METHOD_38 ( VAR_134 , ""Accept-Ranges"" ) && ! METHOD_39 ( VAR_135 , ""bytes"" , 5 ) && VAR_136 -> VAR_137 == - 1 ) { VAR_138 -> VAR_139 = 0 ; } else if ( ! METHOD_40 ( VAR_140 , ""Transfer-Encoding"" ) && ! METHOD_41 ( VAR_141 , ""chunked"" , 7 ) ) { VAR_142 -> VAR_143 = - 1 ; VAR_144 -> VAR_145 = 0 ; } else if ( ! METHOD_42 ( VAR_146 , ""WWW-Authenticate"" ) ) { METHOD_43 ( & VAR_147 -> VAR_148 , VAR_149 , VAR_150 ) ; } else if ( ! METHOD_44 ( VAR_151 , ""Authentication-Info"" ) ) { METHOD_45 ( & VAR_152 -> VAR_153 , VAR_154 , VAR_155 ) ; } else if ( ! METHOD_46 ( VAR_156 , ""Proxy-Authenticate"" ) ) { METHOD_47 ( & VAR_157 -> VAR_158 , VAR_159 , VAR_160 ) ; } else if ( ! METHOD_48 ( VAR_161 , ""Connection"" ) ) { if ( ! METHOD_49 ( VAR_162 , ""close"" ) ) VAR_163 -> VAR_164 = 1 ; } else if ( ! METHOD_50 ( VAR_165 , ""Server"" ) ) { if ( ! METHOD_51 ( VAR_166 , ""AkamaiGHost"" ) ) { VAR_167 -> VAR_168 = 1 ; } else if ( ! METHOD_52 ( VAR_169 , ""MediaGateway"" , 12 ) ) { VAR_170 -> VAR_171 = 1 ; } } else if ( ! METHOD_53 ( VAR_172 , ""Content-Type"" ) ) { METHOD_54 ( VAR_173 -> VAR_174 ) ; VAR_175 -> VAR_176 = METHOD_55 ( VAR_177 ) ; } else if ( ! METHOD_56 ( VAR_178 , ""Set-Cookie"" ) ) { if ( METHOD_57 ( VAR_179 , VAR_180 , & VAR_181 -> VAR_182 ) ) METHOD_58 ( VAR_183 , VAR_184 , ""Unabletoparse\'%s\'\\n"" , VAR_185 ) ; } else if ( ! METHOD_59 ( VAR_186 , ""Icy-MetaInt"" ) ) { VAR_187 -> VAR_188 = METHOD_60 ( VAR_189 , VAR_190 , 10 ) ; } else if ( ! METHOD_61 ( VAR_191 , ""Icy-"" , 4 ) ) { if ( ( VAR_192 = METHOD_62 ( VAR_193 , VAR_194 , VAR_195 ) ) < 0 ) return VAR_196 ; } else if ( ! METHOD_63 ( VAR_197 , ""Content-Encoding"" ) ) { if ( ( VAR_198 = METHOD_64 ( VAR_199 , VAR_200 ) ) < 0 ) return VAR_201 ; } } return 1 ; }",125
126,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_1 VAR_4 [ 256 ] ; TYPE_2 VAR_5 ; TYPE_3 VAR_6 = VAR_7 , VAR_8 = VAR_9 ; if ( VAR_10 -> VAR_11 == VAR_12 ) return 0 ; if ( VAR_13 -> VAR_14 == VAR_15 ) return - 1 ; VAR_16 -> VAR_17 = VAR_18 ; if ( METHOD_1 ( VAR_19 ) < 0 ) return - 1 ; if ( METHOD_2 ( VAR_20 , sizeof ( VAR_21 ) , VAR_22 ) < 0 ) return METHOD_3 ( VAR_23 ) ; if ( METHOD_4 ( VAR_24 , ""200"" , VAR_25 ) ) VAR_26 = VAR_27 ; else if ( ! METHOD_5 ( VAR_28 , ""201"" , VAR_29 ) ) { METHOD_6 ( VAR_30 ) ; METHOD_7 ( VAR_31 ) ; METHOD_8 ( ""%s"" , VAR_32 ) ; return - 1 ; } VAR_33 = METHOD_9 ( VAR_34 ) ; if ( VAR_35 < 0 ) return - 1 ; if ( VAR_36 > 0 ) { if ( ( METHOD_10 ( VAR_37 , ""MODEREADER\\r\\n"" ) < 0 ) || ( METHOD_11 ( VAR_38 , sizeof ( VAR_39 ) , VAR_40 ) < 0 ) ) { return METHOD_12 ( VAR_41 ) ; } if ( METHOD_13 ( VAR_42 , ""200"" , VAR_43 ) ) VAR_44 = VAR_45 ; else if ( METHOD_14 ( VAR_46 , ""201"" , VAR_47 ) ) VAR_48 = VAR_49 ; else if ( VAR_50 -> VAR_51 ) { METHOD_15 ( VAR_52 ) ; METHOD_16 ( METHOD_17 ( ""Couldnotswitchtoreadermode"" ) ) ; return - 1 ; } if ( VAR_53 -> VAR_54 ) { VAR_55 = METHOD_18 ( VAR_56 ) ; if ( VAR_57 < 0 ) return - 1 ; } } METHOD_19 ( METHOD_20 ( ""Connectedto%s.%s"" ) , VAR_58 -> VAR_59 . VAR_60 , VAR_61 ? METHOD_21 ( ""Postingisok"" ) : METHOD_22 ( ""PostingisNOTok"" ) ) ; METHOD_23 ( 1 ) ; TYPE_4 TYPE_5 if ( ( VAR_62 -> VAR_63 != 1 ) && ( VAR_64 -> VAR_65 || VAR_66 ) ) { if ( VAR_67 -> VAR_68 == 0 ) { VAR_69 -> VAR_70 = VAR_71 || METHOD_24 ( VAR_72 , METHOD_25 ( ""SecureconnectionwithTLS?"" ) ) == VAR_73 ? 2 : 1 ; } if ( VAR_74 -> VAR_75 == 2 ) { if ( ( METHOD_26 ( VAR_76 , ""STARTTLS\\r\\n"" ) < 0 ) || ( METHOD_27 ( VAR_77 , sizeof ( VAR_78 ) , VAR_79 ) < 0 ) ) { return METHOD_28 ( VAR_80 ) ;  }  if ( ! METHOD_29 ( VAR_81 , ""382"" , VAR_82 ) ) { VAR_83 -> VAR_84 = 0 ; METHOD_30 ( ""STARTTLS:%s"" , VAR_85 ) ; } else if ( METHOD_31 ( VAR_86 ) ) { VAR_87 -> VAR_88 = 0 ; VAR_89 -> VAR_90 = VAR_91 ; METHOD_32 ( VAR_92 -> VAR_93 ) ; METHOD_33 ( METHOD_34 ( ""CouldnotnegotiateTLSconnection"" ) ) ; return - 1 ; } else { VAR_94 = METHOD_35 ( VAR_95 ) ; if ( VAR_96 < 0 ) return - 1 ; } } } if ( VAR_97 -> VAR_98 . VAR_99 & VAR_100 ) { if ( ! VAR_101 -> VAR_102 . VAR_103 [ 0 ] ) VAR_104 = VAR_105 ; } else { if ( ( METHOD_36 ( VAR_106 , ""STAT\\r\\n"" ) < 0 ) || ( METHOD_37 ( VAR_107 , sizeof ( VAR_108 ) , VAR_109 ) < 0 ) ) { return METHOD_38 ( VAR_110 ) ; } if ( ! METHOD_39 ( VAR_111 , ""480"" , VAR_112 ) ) VAR_113 = VAR_114 ; } if ( VAR_115 && ( METHOD_40 ( VAR_116 ) < 0 ) ) return - 1 ; if ( VAR_117 -> VAR_118 && ( VAR_119 || ( VAR_120 > 0 ) ) ) { VAR_121 = METHOD_41 ( VAR_122 ) ; if ( VAR_123 < 0 ) return - 1 ; if ( VAR_124 > 0 ) { METHOD_42 ( VAR_125 ) ; METHOD_43 ( METHOD_44 ( ""Couldnotswitchtoreadermode"" ) ) ; return - 1 ; } } if ( METHOD_45 ( VAR_126 ) < 0 ) return - 1 ; VAR_127 -> VAR_128 = VAR_129 ; return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_1 VAR_4 [ 256 ] ; TYPE_2 VAR_5 ; TYPE_3 VAR_6 = VAR_7 , VAR_8 = VAR_9 ; if ( VAR_10 -> VAR_11 == VAR_12 ) return 0 ; if ( VAR_13 -> VAR_14 == VAR_15 ) return - 1 ; VAR_16 -> VAR_17 = VAR_18 ; if ( METHOD_1 ( VAR_19 ) < 0 ) return - 1 ; if ( METHOD_2 ( VAR_20 , sizeof ( VAR_21 ) , VAR_22 ) < 0 ) return METHOD_3 ( VAR_23 ) ; if ( METHOD_4 ( VAR_24 , ""200"" , VAR_25 ) ) VAR_26 = VAR_27 ; else if ( ! METHOD_5 ( VAR_28 , ""201"" , VAR_29 ) ) { METHOD_6 ( VAR_30 ) ; METHOD_7 ( VAR_31 ) ; METHOD_8 ( ""%s"" , VAR_32 ) ; return - 1 ; } VAR_33 = METHOD_9 ( VAR_34 ) ; if ( VAR_35 < 0 ) return - 1 ; if ( VAR_36 > 0 ) { if ( ( METHOD_10 ( VAR_37 , ""MODEREADER\\r\\n"" ) < 0 ) || ( METHOD_11 ( VAR_38 , sizeof ( VAR_39 ) , VAR_40 ) < 0 ) ) { return METHOD_12 ( VAR_41 ) ; } METHOD_46 ( VAR_125 ) ; if ( METHOD_13 ( VAR_42 , ""200"" , VAR_43 ) ) VAR_44 = VAR_45 ; else if ( METHOD_14 ( VAR_46 , ""201"" , VAR_47 ) ) VAR_48 = VAR_49 ; else if ( VAR_50 -> VAR_51 ) { METHOD_15 ( VAR_52 ) ; METHOD_16 ( METHOD_17 ( ""Couldnotswitchtoreadermode"" ) ) ; return - 1 ; } if ( VAR_53 -> VAR_54 ) { VAR_55 = METHOD_18 ( VAR_56 ) ; if ( VAR_57 < 0 ) return - 1 ; } } METHOD_19 ( METHOD_20 ( ""Connectedto%s.%s"" ) , VAR_58 -> VAR_59 . VAR_60 , VAR_61 ? METHOD_21 ( ""Postingisok"" ) : METHOD_22 ( ""PostingisNOTok"" ) ) ; METHOD_23 ( 1 ) ; TYPE_4 TYPE_5 if ( ( VAR_62 -> VAR_63 != 1 ) && ( VAR_64 -> VAR_65 || VAR_66 ) ) { if ( VAR_67 -> VAR_68 == 0 ) { VAR_69 -> VAR_70 = VAR_71 || METHOD_24 ( VAR_72 , METHOD_25 ( ""SecureconnectionwithTLS?"" ) ) == VAR_73 ? 2 : 1 ; } if ( VAR_74 -> VAR_75 == 2 ) { if ( ( METHOD_26 ( VAR_76 , ""STARTTLS\\r\\n"" ) < 0 ) || ( METHOD_27 ( VAR_77 , sizeof ( VAR_78 ) , VAR_79 ) < 0 ) ) { return METHOD_28 ( VAR_80 ) ; } if ( ! METHOD_29 ( VAR_81 , ""382"" , VAR_82 ) ) { VAR_83 -> VAR_84 = 0 ; METHOD_30 ( ""STARTTLS:%s"" , VAR_85 ) ; } else if ( METHOD_31 ( VAR_86 ) ) { VAR_87 -> VAR_88 = 0 ; VAR_89 -> VAR_90 = VAR_91 ; METHOD_32 ( VAR_92 -> VAR_93 ) ; METHOD_33 ( METHOD_34 ( ""CouldnotnegotiateTLSconnection"" ) ) ; return - 1 ; } else { VAR_94 = METHOD_35 ( VAR_95 ) ; if ( VAR_96 < 0 ) return - 1 ; } } } if ( VAR_97 -> VAR_98 . VAR_99 & VAR_100 ) { if ( ! VAR_101 -> VAR_102 . VAR_103 [ 0 ] ) VAR_104 = VAR_105 ; } else { if ( ( METHOD_36 ( VAR_106 , ""STAT\\r\\n"" ) < 0 ) || ( METHOD_37 ( VAR_107 , sizeof ( VAR_108 ) , VAR_109 ) < 0 ) ) { return METHOD_38 ( VAR_110 ) ; } if ( ! METHOD_39 ( VAR_111 , ""480"" , VAR_112 ) ) VAR_113 = VAR_114 ; } if ( VAR_115 && ( METHOD_40 ( VAR_116 ) < 0 ) ) return - 1 ; if ( VAR_117 -> VAR_118 && ( VAR_119 || ( VAR_120 > 0 ) ) ) { VAR_121 = METHOD_41 ( VAR_122 ) ; if ( VAR_123 < 0 ) return - 1 ; if ( VAR_124 > 0 ) { METHOD_42 ( VAR_125 ) ; METHOD_43 ( METHOD_44 ( ""Couldnotswitchtoreadermode"" ) ) ; return - 1 ; } } if ( METHOD_45 ( VAR_126 ) < 0 ) return - 1 ; VAR_127 -> VAR_128 = VAR_129 ; return 0 ; }",126
127,"TYPE_0 METHOD_0 ( ) { TYPE_1 VAR_0 ; TYPE_2 VAR_1 ; VAR_2 ; if ( VAR_3 ) VAR_4 = - VAR_5 . VAR_6 ; else VAR_7 = VAR_8 . VAR_9 ; METHOD_1 ( 0 , 0 ) ; if ( VAR_10 . VAR_11 ) { METHOD_2 ( VAR_12 . VAR_13 ) ; for ( VAR_14 = 1 ; VAR_15 <= 2 ; VAR_16 ++ ) { VAR_17 ; METHOD_3 ( VAR_18 * 0.5 , 0 ) ; METHOD_4 ( - VAR_19 * 0.5 , VAR_20 . VAR_21 ) ; METHOD_5 ( - VAR_22 * 0.5 + VAR_23 * VAR_24 . VAR_25 , 0 ) ; METHOD_6 ( - VAR_26 * 0.5 , - VAR_27 . VAR_28 ) ; if ( VAR_29 == 1 ) { METHOD_7 ( VAR_30 ) ;  VAR_31 += METHOD_8 ( VAR_32 , ""hf"" ) ;  } else {  VAR_33 += METHOD_9 ( VAR_34 , ""s"" ) ;  } VAR_35 ; } } else { METHOD_10 ( VAR_36 * 0.5 , 0 ) ; METHOD_11 ( - VAR_37 * 0.5 , VAR_38 . VAR_39 ) ; METHOD_12 ( - VAR_40 * 0.5 + VAR_41 * VAR_42 . VAR_43 , 0 ) ; METHOD_13 ( - VAR_44 * 0.5 , - VAR_45 . VAR_46 ) ;  VAR_47 += METHOD_14 ( VAR_48 , ""hf"" ) ;  } VAR_49 ; }","TYPE_0 METHOD_0 ( ) { TYPE_1 VAR_0 ; TYPE_2 VAR_1 ; VAR_2 ; if ( VAR_3 ) VAR_4 = - VAR_5 . VAR_6 ; else VAR_7 = VAR_8 . VAR_9 ; METHOD_1 ( 0 , 0 ) ; if ( VAR_10 . VAR_11 ) { METHOD_2 ( VAR_12 . VAR_13 ) ; for ( VAR_14 = 1 ; VAR_15 <= 2 ; VAR_16 ++ ) { VAR_17 ; METHOD_3 ( VAR_18 * 0.5 , 0 ) ; METHOD_4 ( - VAR_19 * 0.5 , VAR_20 . VAR_21 ) ; METHOD_5 ( - VAR_22 * 0.5 + VAR_23 * VAR_24 . VAR_25 , 0 ) ; METHOD_6 ( - VAR_26 * 0.5 , - VAR_27 . VAR_28 ) ; if ( VAR_29 == 1 ) { METHOD_7 ( VAR_30 ) ; METHOD_15 ( ""hf"" ) ; } else { VAR_33 += METHOD_9 ( VAR_34 , ""s"" ) ; } VAR_35 ; } } else { METHOD_10 ( VAR_36 * 0.5 , 0 ) ; METHOD_11 ( - VAR_37 * 0.5 , VAR_38 . VAR_39 ) ; METHOD_12 ( - VAR_40 * 0.5 + VAR_41 * VAR_42 . VAR_43 , 0 ) ; METHOD_13 ( - VAR_44 * 0.5 , - VAR_45 . VAR_46 ) ; METHOD_15 ( ""hf"" ) ; } VAR_49 ; }",127
128,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_0 { TYPE_4 * VAR_6 ; TYPE_5 * VAR_7 ;  TYPE_6 VAR_8 ;  } * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_1 ) ) ; VAR_12 -> VAR_13 = VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 = METHOD_2 ( ) ; METHOD_3 ( VAR_20 , VAR_21 , VAR_22 , & METHOD_4 ) ; METHOD_5 ( VAR_23 , VAR_24 , 0 ) ; while ( VAR_25 -> VAR_26 != VAR_27 ) { VAR_28 = VAR_29 -> VAR_30 ; METHOD_6 ( VAR_31 , VAR_32 -> VAR_33 ) ; VAR_34 = ( ( struct STRUCT_OR_UNION_2 * ) VAR_35 -> VAR_36 ) -> VAR_37 ; VAR_38 = ( struct STRUCT_OR_UNION_3 * ) VAR_39 -> VAR_40 ; METHOD_7 ( VAR_41 ) ; for ( VAR_42 = VAR_43 -> VAR_44 ; VAR_45 != VAR_46 ; VAR_47 = VAR_48 -> VAR_49 ) { VAR_50 = METHOD_8 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_51 -> VAR_52 = ( ( TYPE_7 * ) VAR_53 -> VAR_54 ) -> VAR_55 ; if ( VAR_56 -> VAR_57 != VAR_58 ) { VAR_59 -> VAR_60 = METHOD_9 ( sizeof ( TYPE_8 ) * ( METHOD_10 ( ( ( TYPE_9 * ) VAR_61 -> VAR_62 ) -> VAR_63 ) + METHOD_11 ( VAR_64 -> VAR_65 ) + 1 ) ) ; METHOD_12 ( VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , sizeof ( TYPE_10 ) * METHOD_13 ( VAR_70 -> VAR_71 ) ) ; METHOD_14 ( VAR_72 -> VAR_73 + METHOD_15 ( VAR_74 -> VAR_75 ) , ( ( TYPE_11 * ) VAR_76 -> VAR_77 ) -> VAR_78 , sizeof ( TYPE_12 ) * ( METHOD_16 ( ( ( TYPE_13 * ) VAR_79 -> VAR_80 ) -> VAR_81 ) + 1 ) ) ; } else { VAR_82 -> VAR_83 = METHOD_17 ( sizeof ( TYPE_14 ) * ( METHOD_18 ( ( ( TYPE_15 * ) VAR_84 -> VAR_85 ) -> VAR_86 ) + 1 ) ) ; METHOD_19 ( VAR_87 -> VAR_88 , ( ( TYPE_16 * ) VAR_89 -> VAR_90 ) -> VAR_91 , sizeof ( TYPE_17 ) * ( METHOD_20 ( ( ( TYPE_18 * ) VAR_92 -> VAR_93 ) -> VAR_94 ) + 1 ) ) ; } if ( ( ( TYPE_19 * ) VAR_95 -> VAR_96 ) -> VAR_97 != VAR_98 ) { METHOD_21 ( VAR_99 , VAR_100 -> VAR_101 , VAR_102 -> METHOD_22 ( ( ( TYPE_20 * ) VAR_103 -> VAR_104 ) -> VAR_105 ) ) ; } if ( ( ( TYPE_21 * ) VAR_106 -> VAR_107 ) -> VAR_108 -> VAR_109 ) { METHOD_23 ( VAR_110 , VAR_111 , 0 ) ; } else { METHOD_24 ( VAR_112 -> VAR_113 ) ; METHOD_25 ( VAR_114 ) ; } } METHOD_26 ( VAR_115 -> VAR_116 ) ; METHOD_27 ( VAR_117 ) ; } METHOD_28 ( & VAR_118 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_0 { TYPE_4 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 ; } * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_1 ) ) ; VAR_12 -> VAR_13 = VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 = METHOD_2 ( ) ; METHOD_3 ( VAR_20 , VAR_21 , VAR_22 , & METHOD_4 ) ; METHOD_5 ( VAR_23 , VAR_24 , 0 ) ; while ( VAR_25 -> VAR_26 != VAR_27 ) { VAR_28 = VAR_29 -> VAR_30 ; METHOD_6 ( VAR_31 , VAR_32 -> VAR_33 ) ; VAR_34 = ( ( struct STRUCT_OR_UNION_2 * ) VAR_35 -> VAR_36 ) -> VAR_37 ; VAR_38 = ( struct STRUCT_OR_UNION_3 * ) VAR_39 -> VAR_40 ; METHOD_7 ( VAR_41 ) ; for ( VAR_42 = VAR_43 -> VAR_44 ; VAR_45 != VAR_46 ; VAR_47 = VAR_48 -> VAR_49 ) { VAR_50 = METHOD_8 ( sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_51 -> VAR_52 = ( ( TYPE_7 * ) VAR_53 -> VAR_54 ) -> VAR_55 ; if ( VAR_56 -> VAR_57 != VAR_58 ) { VAR_59 -> VAR_60 = METHOD_9 ( sizeof ( TYPE_8 ) * ( METHOD_10 ( ( ( TYPE_9 * ) VAR_61 -> VAR_62 ) -> VAR_63 ) + METHOD_11 ( VAR_64 -> VAR_65 ) + 1 ) ) ; METHOD_12 ( VAR_66 -> VAR_67 , VAR_68 -> VAR_69 , sizeof ( TYPE_10 ) * METHOD_13 ( VAR_70 -> VAR_71 ) ) ; METHOD_14 ( VAR_72 -> VAR_73 + METHOD_15 ( VAR_74 -> VAR_75 ) , ( ( TYPE_11 * ) VAR_76 -> VAR_77 ) -> VAR_78 , sizeof ( TYPE_12 ) * ( METHOD_16 ( ( ( TYPE_13 * ) VAR_79 -> VAR_80 ) -> VAR_81 ) + 1 ) ) ; } else { VAR_82 -> VAR_83 = METHOD_17 ( sizeof ( TYPE_14 ) * ( METHOD_18 ( ( ( TYPE_15 * ) VAR_84 -> VAR_85 ) -> VAR_86 ) + 1 ) ) ; METHOD_19 ( VAR_87 -> VAR_88 , ( ( TYPE_16 * ) VAR_89 -> VAR_90 ) -> VAR_91 , sizeof ( TYPE_17 ) * ( METHOD_20 ( ( ( TYPE_18 * ) VAR_92 -> VAR_93 ) -> VAR_94 ) + 1 ) ) ; } if ( ( ( TYPE_19 * ) VAR_95 -> VAR_96 ) -> VAR_97 != VAR_98 ) { METHOD_21 ( VAR_99 , VAR_100 -> VAR_101 , VAR_102 -> METHOD_22 ( ( ( TYPE_20 * ) VAR_103 -> VAR_104 ) -> VAR_105 ) ) ; } if ( ( ( TYPE_21 * ) VAR_106 -> VAR_107 ) -> VAR_108 -> VAR_109 ) { METHOD_23 ( VAR_110 , VAR_111 , 0 ) ; } else { METHOD_24 ( VAR_112 -> VAR_113 ) ; METHOD_25 ( VAR_114 ) ; } } METHOD_26 ( VAR_115 -> VAR_116 ) ; METHOD_27 ( VAR_117 ) ; } METHOD_28 ( & VAR_118 ) ; }",128
129,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ;  const TYPE_1 * VAR_3 = VAR_4 -> VAR_5 ;   struct STRUCT_OR_UNION_2 VAR_6 = VAR_7 -> VAR_8 -> VAR_9 ;  METHOD_2 ( & VAR_10 -> VAR_11 -> VAR_12 , ""%s:bInterfaceNumber=%d\\n"" , VAR_13 , VAR_14 -> VAR_15 -> VAR_16 . VAR_17 ) ; if ( VAR_18 -> VAR_19 -> METHOD_3 ) VAR_20 -> VAR_21 -> METHOD_4 ( VAR_22 ) ; METHOD_5 ( VAR_23 ) ;  METHOD_6 ( & VAR_24 , ""%s:\'%s\'successfullydeinitializedanddisconnected\\n"" ,   VAR_25 , VAR_26 ) ;  }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; const TYPE_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 = VAR_7 -> VAR_8 -> VAR_9 ; METHOD_2 ( & VAR_10 -> VAR_11 -> VAR_12 , ""%s:bInterfaceNumber=%d\\n"" , VAR_13 , VAR_14 -> VAR_15 -> VAR_16 . VAR_17 ) ; if ( VAR_18 -> VAR_19 -> METHOD_3 ) VAR_20 -> VAR_21 -> METHOD_4 ( VAR_22 ) ; METHOD_5 ( VAR_23 ) ; METHOD_9 ( ""%s:\'%s:%s\'successfullydeinitializedanddisconnected\\n"" , VAR_25 , VAR_26 ) ; }",129
130,"static TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { while ( ! METHOD_1 ( VAR_1 ) ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = list_entry ( VAR_2 -> VAR_3 , struct STRUCT_OR_UNION_3 , VAR_4 ) ;  METHOD_2 ( & STRUCT_OR_UNION_4 -> VAR_5 ) ;  METHOD_3 ( ""-%u"" , STRUCT_OR_UNION_5 -> VAR_6 ) ; METHOD_4 ( STRUCT_OR_UNION_6 ) ;  if ( METHOD_5 ( VAR_7 , & STRUCT_OR_UNION_7 -> VAR_8 ) &&  ! METHOD_6 ( VAR_9 , & STRUCT_OR_UNION_8 -> VAR_10 ) && STRUCT_OR_UNION_9 -> VAR_11 -> METHOD_7 ) STRUCT_OR_UNION_10 -> VAR_12 -> METHOD_8 ( STRUCT_OR_UNION_11 ) ; METHOD_9 ( STRUCT_OR_UNION_12 ) ; if ( METHOD_10 ( VAR_13 , & STRUCT_OR_UNION_13 -> VAR_14 ) ) { METHOD_11 ( & STRUCT_OR_UNION_14 -> VAR_15 -> VAR_16 ) ; STRUCT_OR_UNION_15 -> VAR_17 -> VAR_18 -- ; STRUCT_OR_UNION_16 -> VAR_19 -> VAR_20 -= STRUCT_OR_UNION_17 -> VAR_21 ; METHOD_12 ( & STRUCT_OR_UNION_18 -> VAR_22 -> VAR_23 ) ; } METHOD_13 ( & STRUCT_OR_UNION_19 -> VAR_24 -> VAR_25 ) ;  if ( METHOD_14 ( VAR_26 , & STRUCT_OR_UNION_20 -> VAR_27 ) )  METHOD_15 ( & STRUCT_OR_UNION_21 -> VAR_28 -> VAR_29 ) ; METHOD_16 ( STRUCT_OR_UNION_22 -> VAR_30 ) ; METHOD_17 ( STRUCT_OR_UNION_23 -> VAR_31 ) ; METHOD_18 ( STRUCT_OR_UNION_24 , sizeof ( * STRUCT_OR_UNION_25 ) ) ; METHOD_19 ( VAR_32 , STRUCT_OR_UNION_26 ) ; } }","static TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { while ( ! METHOD_1 ( VAR_1 ) ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = list_entry ( VAR_2 -> VAR_3 , struct STRUCT_OR_UNION_3 , VAR_4 ) ; METHOD_2 ( & STRUCT_OR_UNION_4 -> VAR_5 ) ; TYPE_2 VAR_33 = STRUCT_OR_UNION_26 -> VAR_33 ; METHOD_3 ( ""-%u"" , STRUCT_OR_UNION_5 -> VAR_6 ) ; METHOD_4 ( STRUCT_OR_UNION_6 ) ; if ( VAR_33 != VAR_35 ) METHOD_15 ( & STRUCT_OR_UNION_21 -> VAR_28 -> VAR_29 ) ; METHOD_16 ( STRUCT_OR_UNION_22 -> VAR_30 ) ; METHOD_17 ( STRUCT_OR_UNION_23 -> VAR_31 ) ; METHOD_18 ( STRUCT_OR_UNION_24 , sizeof ( * STRUCT_OR_UNION_25 ) ) ; METHOD_19 ( VAR_32 , STRUCT_OR_UNION_26 ) ; } }",130
131,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { const TYPE_3 * const VAR_3 = VAR_4 ? METHOD_1 ( VAR_5 , 1 ) : VAR_6 ; VAR_7 * VAR_8 , * VAR_9 = VAR_10 , * VAR_11 ; TYPE_4 VAR_12 ; TYPE_5 VAR_13 , VAR_14 ; const TYPE_6 * VAR_15 ; TYPE_7 VAR_16 , VAR_17 ;  METHOD_2 ( VAR_18 , VAR_19 ) ;   if ( METHOD_3 ( VAR_20 ) == 9 ) {   VAR_21 = METHOD_4 ( VAR_22 , METHOD_5 ( VAR_23 , 8 ) ) ;  if ( ! VAR_24 ) return VAR_25 ; } VAR_26 = METHOD_6 ( VAR_27 , 1 ) ; VAR_28 = METHOD_7 ( VAR_29 , VAR_30 , VAR_31 ) ; if ( ! VAR_32 ) return VAR_33 ; VAR_34 = ( TYPE_8 ) METHOD_8 ( VAR_35 , 0 ) ; if ( METHOD_9 ( VAR_36 ) == 1 ) VAR_37 = VAR_38 ; else VAR_39 = METHOD_10 ( VAR_40 , VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 , VAR_48 -> VAR_49 , VAR_50 -> VAR_51 ) ; VAR_52 = METHOD_11 ( VAR_53 , METHOD_12 ( VAR_54 , 3 ) ) ; if ( ! VAR_55 ) return VAR_56 ;  VAR_57 = METHOD_13 ( VAR_58 , METHOD_14 ( VAR_59 , 5 ) ) ;  if ( ! VAR_60 ) return VAR_61 ; if ( VAR_62 != VAR_63 ) { METHOD_15 ( VAR_64 , & VAR_65 , & VAR_66 ) ; } else { METHOD_16 ( VAR_67 , & VAR_68 , & VAR_69 ) ; }  if ( VAR_70 )   return METHOD_17 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 ,  METHOD_18 ( VAR_75 ) , VAR_76 -> VAR_77 , VAR_78 , VAR_79 , VAR_80 -> VAR_81 ) ; else  return METHOD_19 ( VAR_82 , VAR_83 , VAR_84 , VAR_85 ,  METHOD_20 ( VAR_86 ) , VAR_87 -> VAR_88 , VAR_89 , VAR_90 , VAR_91 -> VAR_92 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { const TYPE_3 * const VAR_3 = VAR_4 ? METHOD_1 ( VAR_5 , 1 ) : VAR_6 ; VAR_7 * VAR_8 , * VAR_9 = VAR_10 , * VAR_11 ; TYPE_4 VAR_12 ; TYPE_5 VAR_13 , VAR_14 ; const TYPE_6 * VAR_15 ; TYPE_7 VAR_16 , VAR_17 ; METHOD_2 ( VAR_18 , VAR_19 ) ; VAR_93 = METHOD_21 ( METHOD_14 ( VAR_87 , 5 ) ) == VAR_95 ; if ( METHOD_3 ( VAR_20 ) == 9 + VAR_93 ) { VAR_21 = METHOD_4 ( VAR_22 , METHOD_5 ( VAR_23 , 8 ) ) ; if ( ! VAR_24 ) return VAR_25 ; } VAR_26 = METHOD_6 ( VAR_27 , 1 ) ; VAR_28 = METHOD_7 ( VAR_29 , VAR_30 , VAR_31 ) ; if ( ! VAR_32 ) return VAR_33 ; VAR_34 = ( TYPE_8 ) METHOD_8 ( VAR_35 , 0 ) ; if ( METHOD_9 ( VAR_36 ) == 1 ) VAR_37 = VAR_38 ; else VAR_39 = METHOD_10 ( VAR_40 , VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 , VAR_48 -> VAR_49 , VAR_50 -> VAR_51 ) ; VAR_52 = METHOD_11 ( VAR_53 , METHOD_12 ( VAR_54 , 3 ) ) ; if ( ! VAR_55 ) return VAR_56 ; VAR_57 = METHOD_13 ( VAR_58 , METHOD_14 ( VAR_59 , 5 ) ) ; if ( ! VAR_60 ) return VAR_61 ; if ( VAR_62 != VAR_63 ) { METHOD_15 ( VAR_64 , & VAR_65 , & VAR_66 ) ; } else { METHOD_16 ( VAR_67 , & VAR_68 , & VAR_69 ) ; } if ( VAR_93 ) { VAR_94 = METHOD_22 ( METHOD_14 ( VAR_87 , 5 ) ) ; if ( ! VAR_94 ) return VAR_63 ; } else VAR_94 = VAR_63 ; if ( VAR_70 ) return METHOD_17 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 , METHOD_18 ( VAR_75 ) , VAR_76 -> VAR_77 , VAR_78 , VAR_79 , VAR_80 -> VAR_81 ) ; else return METHOD_19 ( VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_94 , METHOD_20 ( VAR_86 ) , VAR_87 -> VAR_88 , VAR_89 , VAR_90 , VAR_91 -> VAR_92 ) ; }",131
132,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = container_of ( VAR_2 -> VAR_3 , struct STRUCT_OR_UNION_4 , VAR_4 ) ; TYPE_1 VAR_5 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_6 , 0 ) ; TYPE_2 VAR_7 = METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_8 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_9 , VAR_10 ) ||  METHOD_4 ( VAR_11 , METHOD_5 ( ) ) ) {  TYPE_3 VAR_12 = ( VAR_13 -> VAR_14 >> 6 ) & 7 ; return ( VAR_15 << 6 ) | ( VAR_16 << 3 ) | VAR_17 ; }  if ( METHOD_6 ( VAR_18 , METHOD_7 ( ) ) ) {  TYPE_4 VAR_19 = ( VAR_20 -> VAR_21 >> 3 ) & 7 ; return ( VAR_22 << 3 ) | VAR_23 ; } return VAR_24 -> VAR_25 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = container_of ( VAR_2 -> VAR_3 , struct STRUCT_OR_UNION_4 , VAR_4 ) ; TYPE_1 VAR_5 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_6 , 0 ) ; TYPE_2 VAR_7 = METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_8 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_9 , VAR_10 ) || METHOD_4 ( VAR_11 , METHOD_8 ( ) ) ) { TYPE_3 VAR_12 = ( VAR_13 -> VAR_14 >> 6 ) & 7 ; return ( VAR_15 << 6 ) | ( VAR_16 << 3 ) | VAR_17 ; } if ( METHOD_9 ( VAR_18 ) ) { TYPE_4 VAR_19 = ( VAR_20 -> VAR_21 >> 3 ) & 7 ; return ( VAR_22 << 3 ) | VAR_23 ; } return VAR_24 -> VAR_25 ; }",132
133,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , ""enter"" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , ""ImproperImageHeader"" ) ; if ( METHOD_17 ( VAR_67 . VAR_68 , ""MATLAB"" , 6 ) != 0 ) { VAR_69 = METHOD_18 ( VAR_70 , VAR_71 , VAR_72 ) ; if ( VAR_73 == VAR_74 ) goto VAR_75 ; VAR_76 = VAR_77 ; goto VAR_78 ; } VAR_79 . VAR_80 = METHOD_19 ( VAR_81 ) ; if ( METHOD_20 ( VAR_82 , 2 , ( unsigned TYPE_35 * ) & VAR_83 . VAR_84 ) != 2 ) METHOD_21 ( VAR_85 , ""ImproperImageHeader"" ) ; if ( VAR_86 ) ( TYPE_36 ) METHOD_22 ( VAR_87 , METHOD_23 ( ) , ""Endian%c%c"" , VAR_88 . VAR_89 [ 0 ] , VAR_90 . VAR_91 [ 1 ] ) ; if ( ! METHOD_24 ( VAR_92 . VAR_93 , ""IM"" , 2 ) ) { METHOD_25 = VAR_94 ; METHOD_26 = METHOD_27 ; METHOD_28 = VAR_95 ; METHOD_29 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; } else if ( ! METHOD_30 ( VAR_100 . VAR_101 , ""MI"" , 2 ) ) { METHOD_31 = VAR_102 ; METHOD_32 = VAR_103 ; METHOD_33 = VAR_104 ; METHOD_34 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } else goto VAR_109 ; if ( METHOD_35 ( VAR_110 . VAR_111 , ""MATLAB"" , 6 ) ) VAR_112 : METHOD_36 ( VAR_113 , ""ImproperImageHeader"" ) ; VAR_114 = METHOD_37 ( VAR_115 ) ; while ( ! METHOD_38 ( VAR_116 ) ) { VAR_117 = 1 ; ( TYPE_37 ) METHOD_39 ( VAR_118 , VAR_119 , VAR_120 ) ; VAR_121 . VAR_122 = METHOD_40 ( VAR_123 ) ; if ( METHOD_41 ( VAR_124 ) ) break ; VAR_125 . VAR_126 = METHOD_42 ( VAR_127 ) ; if ( METHOD_43 ( VAR_128 ) ) break ; VAR_129 += VAR_130 . VAR_131 + 4 + 4 ; VAR_132 = VAR_133 ; if d ( VAR_134 ) if ( VAR_135 . VAR_136 == VAR_137 ) { VAR_138 = METHOD_44 ( VAR_139 , VAR_140 . VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 == VAR_145 ) continue ; VAR_146 . VAR_147 = METHOD_45 ( VAR_148 ) ; } if ( VAR_149 . VAR_150 != VAR_151 ) continue ; VAR_152 . VAR_153 = METHOD_46 ( VAR_154 ) ; VAR_155 . VAR_156 = METHOD_47 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_48 ( VAR_160 ) ; VAR_161 . VAR_162 = VAR_163 . VAR_164 & 0xFF ; VAR_165 . VAR_166 = ( VAR_167 . VAR_168 >> 8 ) & 0xFF ; VAR_169 . VAR_170 = METHOD_49 ( VAR_171 ) ; if ( VAR_172 != VAR_173 ) VAR_174 . VAR_175 = METHOD_50 ( VAR_176 ) ; VAR_177 . VAR_178 = METHOD_51 ( VAR_179 ) ; VAR_180 . VAR_181 = METHOD_52 ( VAR_182 ) ; VAR_183 . VAR_184 = METHOD_53 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_54 ( VAR_188 ) ; switch ( VAR_189 . VAR_190 ) { case 8 : VAR_191 = VAR_192 = 1 ; break ; case 12 : VAR_193 = VAR_194 = METHOD_55 ( VAR_195 ) ; ( TYPE_38 ) METHOD_56 ( VAR_196 ) ; if ( VAR_197 != 3 ) METHOD_57 ( VAR_198 , ""MultidimensionalMatricesAreNotSupported"" ) ; break ; case 16 : VAR_199 = VAR_200 = METHOD_58 ( VAR_201 ) ; if ( VAR_202 != 3 && VAR_203 != 1 ) METHOD_59 ( VAR_204 , ""MultidimensionalMatricesAreNotSupported"" ) ; VAR_205 = METHOD_60 ( VAR_206 ) ; if ( VAR_207 == 0 ) METHOD_61 ( VAR_208 , ""ImproperImageHeader"" ) ; break ; default : METHOD_62 ( VAR_209 , ""MultidimensionalMatricesAreNotSupported"" ) ; } VAR_210 . VAR_211 = METHOD_63 ( VAR_212 ) ; VAR_213 . VAR_214 = METHOD_64 ( VAR_215 ) ; if ( VAR_216 ) ( TYPE_39 ) METHOD_65 ( VAR_217 , METHOD_66 ( ) , ""MATLAB_HDR.StructureClass%d"" , VAR_218 . VAR_219 ) ; if ( VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 && VAR_241 . VAR_242 != VAR_243 && VAR_244 . VAR_245 != VAR_246 && VAR_247 . VAR_248 != VAR_249 && VAR_250 . VAR_251 != VAR_252 ) METHOD_67 ( VAR_253 , ""UnsupportedCellTypeInTheMatrix"" ) ; switch ( VAR_254 . VAR_255 ) { case 0 : VAR_256 = METHOD_68 ( VAR_257 ) ; VAR_258 = 4 * ( TYPE_40 ) ( ( VAR_259 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_69 ( VAR_260 , VAR_261 , VAR_262 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_70 ( VAR_263 , 4 , ( unsigned TYPE_43 * ) & VAR_264 ) ; break ; default : goto VAR_265 ; } VAR_266 = METHOD_71 ( VAR_267 ) ; if ( VAR_268 ) ( TYPE_44 ) METHOD_72 ( VAR_269 , METHOD_73 ( ) , ""MATLAB_HDR.CellType:%.20g"" , ( TYPE_45 ) VAR_270 ) ; ( TYPE_46 ) METHOD_74 ( VAR_271 , 4 , ( unsigned TYPE_47 * ) & VAR_272 ) ; VAR_273 : switch ( VAR_274 ) { case VAR_275 : case VAR_276 : VAR_277 = 8 ; if ( VAR_278 . VAR_279 & VAR_280 ) VAR_281 -> VAR_282 = 1 ; else VAR_283 -> VAR_284 = 8 ; VAR_285 = ( TYPE_48 ) VAR_286 . VAR_287 ; break ; case VAR_288 : case VAR_289 : VAR_290 = 16 ; VAR_291 -> VAR_292 = 16 ; VAR_293 = ( TYPE_49 ) ( 2 * VAR_294 . VAR_295 ) ; break ; case VAR_296 : case VAR_297 : VAR_298 = 32 ; VAR_299 -> VAR_300 = 32 ; VAR_301 = ( TYPE_50 ) ( 4 * VAR_302 . VAR_303 ) ; break ; case VAR_304 : case VAR_305 : VAR_306 = 64 ; VAR_307 -> VAR_308 = 64 ; VAR_309 = ( TYPE_51 ) ( 8 * VAR_310 . VAR_311 ) ; break ; case VAR_312 : VAR_313 = 32 ; VAR_314 -> VAR_315 = 32 ; ( TYPE_52 ) METHOD_75 ( VAR_316 , ""quantum:format"" , ""floating-point"" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_53 ) ( 4 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 64 ; VAR_325 -> VAR_326 = 64 ; ( TYPE_54 ) METHOD_76 ( VAR_327 , ""quantum:format"" , ""floating-point"" ) ; METHOD_77 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_78 ( VAR_328 , ""IncompatibleSizeOfDouble"" ) ; if ( VAR_329 . VAR_330 & VAR_331 ) { } VAR_332 = ( TYPE_57 ) ( 8 * VAR_333 . VAR_334 ) ; break ; default : METHOD_79 ( VAR_335 , ""UnsupportedCellTypeInTheMatrix"" ) ; } ( TYPE_58 ) VAR_336 ; VAR_337 -> VAR_338 = VAR_339 . VAR_340 ; VAR_341 -> VAR_342 = VAR_343 . VAR_344 ; VAR_345 = METHOD_80 ( VAR_346 , VAR_347 ) ; if ( VAR_348 == ( TYPE_59 * ) VAR_349 ) METHOD_81 ( VAR_350 , ""MemoryAllocationFailed"" ) ; VAR_351 = 1 ; VAR_352 -> VAR_353 = VAR_354 << VAR_355 -> VAR_356 ; if ( VAR_357 -> VAR_358 == 0 || VAR_359 -> VAR_360 == 0 ) goto VAR_361 ; if ( ( VAR_362 . VAR_363 == 8 ) && ( ( VAR_364 . VAR_365 & VAR_366 ) == 0 ) ) { VAR_367 -> VAR_368 = VAR_369 ; METHOD_82 ( VAR_370 , VAR_371 , VAR_372 ) ; } if ( VAR_373 -> VAR_374 ) { TYPE_60 VAR_375 = VAR_376 -> VAR_377 ; VAR_378 -> VAR_379 = VAR_380 -> VAR_381 ; VAR_382 -> VAR_383 = VAR_384 ; goto VAR_385 ; } VAR_386 = METHOD_83 ( VAR_387 , VAR_388 -> VAR_389 , VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 == VAR_394 ) return ( METHOD_84 ( VAR_395 ) ) ; VAR_396 = ( unsigned TYPE_61 * ) METHOD_85 ( ( TYPE_62 ) ( VAR_397 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_398 == VAR_399 ) METHOD_86 ( VAR_400 , ""MemoryAllocationFailed"" ) ;  VAR_401 = 0 ;  VAR_402 = 0 ; if ( VAR_403 == VAR_404 || VAR_405 == VAR_406 ) { METHOD_87 ( VAR_407 , VAR_408 -> VAR_409 , VAR_410 . VAR_411 , VAR_412 . VAR_413 , VAR_414 , VAR_415 , VAR_416 , & VAR_417 -> VAR_418 , & VAR_419 -> VAR_420 ) ; } if ( VAR_421 == 1 ) VAR_422 = 0 ; do { for ( VAR_423 = 0 ; VAR_424 < ( TYPE_64 ) VAR_425 . VAR_426 ; VAR_427 ++ ) { VAR_428 = METHOD_88 ( VAR_429 , 0 , VAR_430 . VAR_431 - VAR_432 - 1 , VAR_433 -> VAR_434 , 1 , VAR_435 ) ; if ( VAR_436 == ( TYPE_65 * ) VAR_437 ) { if ( VAR_438 ) ( TYPE_66 ) METHOD_89 ( VAR_439 , METHOD_90 ( ) , ""MATsetimagepixelsreturnsunexpectedNULLonarow%u."" , ( unsigned ) ( VAR_440 . VAR_441 - VAR_442 - 1 ) ) ; goto VAR_443 ; } if ( METHOD_91 ( VAR_444 , VAR_445 , ( unsigned TYPE_67 * ) VAR_446 ) != ( TYPE_68 ) VAR_447 ) { if ( VAR_448 ) ( TYPE_69 ) METHOD_92 ( VAR_449 , METHOD_93 ( ) , ""MATcannotreadscanrow%ufromafile."" , ( unsigned ) ( VAR_450 . VAR_451 - VAR_452 - 1 ) ) ; goto VAR_453 ; } if ( ( VAR_454 == VAR_455 || VAR_456 == VAR_457 ) && ( VAR_458 . VAR_459 & VAR_460 ) ) { METHOD_94 ( ( unsigned TYPE_70 * ) VAR_461 , VAR_462 ) ; if ( METHOD_95 ( VAR_463 , ( TYPE_71 * ) VAR_464 , VAR_465 , VAR_466 [ VAR_467 ] , VAR_468 , VAR_469 ) <= 0 ) { VAR_470 : if ( VAR_471 ) ( TYPE_72 ) METHOD_96 ( VAR_472 , METHOD_97 ( ) , ""MATfailedtoImportQuantumPixelsforarow%u"" , ( unsigned ) ( VAR_473 . VAR_474 - VAR_475 - 1 ) ) ; break ; } } else { if ( METHOD_98 ( VAR_476 , ( TYPE_73 * ) VAR_477 , VAR_478 , VAR_479 [ VAR_480 ] , VAR_481 , VAR_482 ) <= 0 ) goto VAR_483 ; if ( VAR_484 <= 1 && ( VAR_485 == VAR_486 || VAR_487 == VAR_488 || VAR_489 == VAR_490 || VAR_491 == VAR_492 ) ) METHOD_99 ( VAR_493 , VAR_494 , VAR_495 . VAR_496 ) ; } if ( ! METHOD_100 ( VAR_497 , VAR_498 ) ) { if ( VAR_499 ) ( TYPE_74 ) METHOD_101 ( VAR_500 , METHOD_102 ( ) , ""MATfailedtosyncimagepixelsforarow%u"" , ( unsigned ) ( VAR_501 . VAR_502 - VAR_503 - 1 ) ) ; goto VAR_504 ; } } } while ( VAR_505 -- >= 2 ) ; VAR_506 = METHOD_103 ( VAR_507 ) ; VAR_508 : if ( VAR_509 . VAR_510 & VAR_511 ) { VAR_512 = METHOD_104 ( VAR_513 ) ; VAR_514 = METHOD_105 ( VAR_515 ) ; if ( VAR_516 == VAR_517 || VAR_518 == VAR_519 ) { METHOD_106 ( VAR_520 , VAR_521 -> VAR_522 , VAR_523 . VAR_524 , VAR_525 . VAR_526 , VAR_527 , VAR_528 , VAR_529 , & VAR_530 , & VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_75 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_107 ( VAR_539 , VAR_540 , ( TYPE_76 * ) VAR_541 ) ; METHOD_108 ( VAR_542 , ( TYPE_77 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } if ( VAR_548 == VAR_549 ) for ( VAR_550 = 0 ; VAR_551 < ( TYPE_78 ) VAR_552 . VAR_553 ; VAR_554 ++ ) { METHOD_109 ( VAR_555 , VAR_556 , ( TYPE_79 * ) VAR_557 ) ; METHOD_110 ( VAR_558 , ( TYPE_80 * ) VAR_559 , VAR_560 , VAR_561 , VAR_562 , VAR_563 ) ; } } if ( ( VAR_564 . VAR_565 == 8 ) && ( ( VAR_566 . VAR_567 & VAR_568 ) == 0 ) ) VAR_569 -> VAR_570 = VAR_571 ; if ( VAR_572 -> VAR_573 == 1 ) VAR_574 -> VAR_575 = VAR_576 ; if ( VAR_577 == VAR_578 ) VAR_579 = VAR_580 ; VAR_581 = METHOD_111 ( VAR_582 , 90.0 , VAR_583 ) ; if ( VAR_584 != ( TYPE_81 * ) VAR_585 ) { VAR_586 -> VAR_587 . VAR_588 = 0 ; VAR_589 -> VAR_590 . VAR_591 = 0 ; VAR_592 = VAR_593 -> VAR_594 ; VAR_595 -> VAR_596 = VAR_597 -> VAR_598 ; VAR_599 -> VAR_600 = VAR_601 -> VAR_602 ; VAR_603 -> VAR_604 = VAR_605 ; METHOD_112 ( & VAR_606 , VAR_607 ) ; METHOD_113 ( & VAR_608 ) ; } VAR_609 : if ( VAR_610 != VAR_611 ) if ( VAR_612 != VAR_613 ) { METHOD_114 ( & VAR_614 ) ; if ( VAR_615 ) { if ( VAR_616 -> VAR_617 ) { METHOD_115 ( VAR_618 -> VAR_619 ) ; VAR_620 -> VAR_621 = VAR_622 ; ( TYPE_82 ) METHOD_116 ( VAR_623 -> VAR_624 ) ; } } } METHOD_117 ( VAR_625 , VAR_626 , VAR_627 ) ; if ( VAR_628 -> VAR_629 == ( TYPE_83 * ) VAR_630 ) break ; VAR_631 = METHOD_118 ( VAR_632 ) ; VAR_633 -> VAR_634 = VAR_635 -> VAR_636 = 0 ; VAR_637 -> VAR_638 = 0 ; METHOD_119 ( VAR_639 ) ; VAR_640 = VAR_641 ; if ( -- VAR_642 > 0 ) { VAR_643 = VAR_644 ; if ( VAR_645 == VAR_646 ) VAR_647 = VAR_648 ; goto VAR_649 ; } if ( ( VAR_650 != VAR_651 ) && ( VAR_652 != VAR_653 ) ) { METHOD_120 ( & VAR_654 ) ; if ( VAR_655 ) { if ( VAR_656 -> VAR_657 ) { METHOD_121 ( VAR_658 -> VAR_659 ) ; VAR_660 -> VAR_661 = VAR_662 ; ( TYPE_84 ) METHOD_122 ( VAR_663 -> VAR_664 ) ; } } } } METHOD_123 ( VAR_665 ) ; VAR_666 : VAR_667 = METHOD_124 ( VAR_668 ) ; METHOD_125 ( VAR_669 ) ; { TYPE_85 * VAR_670 ; TYPE_86 VAR_671 = 0 ; VAR_672 = VAR_673 ; VAR_674 = VAR_675 ; while ( VAR_676 != ( TYPE_87 * ) VAR_677 ) { TYPE_88 * VAR_678 = VAR_679 ; if ( ( VAR_680 -> VAR_681 == 0 ) || ( VAR_682 -> VAR_683 == 0 ) ) { VAR_684 = VAR_685 -> VAR_686 ; METHOD_126 ( & VAR_687 ) ; } else { VAR_688 = VAR_689 ; VAR_690 = VAR_691 -> VAR_692 ; } } for ( VAR_693 = VAR_694 ; VAR_695 != ( TYPE_89 * ) VAR_696 ; VAR_697 = VAR_698 -> VAR_699 ) VAR_700 -> VAR_701 = VAR_702 ++ ; } if ( VAR_703 != VAR_704 ) { if ( VAR_705 -> VAR_706 ) { METHOD_127 ( VAR_707 -> VAR_708 ) ; VAR_709 -> VAR_710 = VAR_711 ; ( TYPE_90 ) METHOD_128 ( VAR_712 -> VAR_713 ) ; } METHOD_129 ( VAR_714 ) ; VAR_715 = VAR_716 ; } if ( VAR_717 ) ( TYPE_91 ) METHOD_130 ( VAR_718 , METHOD_131 ( ) , ""return"" ) ; if ( VAR_719 == VAR_720 ) METHOD_132 ( VAR_721 , ""ImproperImageHeader"" ) ; return ( VAR_722 ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; register TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; unsigned VAR_19 , VAR_20 ; unsigned VAR_21 ; TYPE_15 VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 = 0x80 ; VAR_25 * VAR_26 ; TYPE_18 VAR_27 ; unsigned TYPE_19 ( * METHOD_1 ) ( TYPE_20 * VAR_28 ) ; unsigned TYPE_21 ( * METHOD_2 ) ( TYPE_22 * VAR_29 ) ; TYPE_23 ( * METHOD_3 ) ( TYPE_24 * VAR_30 , TYPE_25 VAR_31 , TYPE_26 * VAR_32 ) ; TYPE_27 ( * METHOD_4 ) ( TYPE_28 * VAR_33 , TYPE_29 VAR_34 , TYPE_30 * VAR_35 ) ; METHOD_5 ( VAR_36 != ( const TYPE_31 * ) VAR_37 ) ; METHOD_6 ( VAR_38 -> VAR_39 == VAR_40 ) ; METHOD_7 ( VAR_41 != ( TYPE_32 * ) VAR_42 ) ; METHOD_8 ( VAR_43 -> VAR_44 == VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , METHOD_10 ( ) , ""enter"" ) ; VAR_48 = METHOD_11 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_12 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_13 ( VAR_59 ) ; return ( ( TYPE_33 * ) VAR_60 ) ; } VAR_61 = METHOD_14 ( VAR_62 ) ; if ( METHOD_15 ( VAR_63 , 124 , ( unsigned TYPE_34 * ) & VAR_64 . VAR_65 ) != 124 ) METHOD_16 ( VAR_66 , ""ImproperImageHeader"" ) ; if ( METHOD_17 ( VAR_67 . VAR_68 , ""MATLAB"" , 6 ) != 0 ) { VAR_69 = METHOD_18 ( VAR_70 , VAR_71 , VAR_72 ) ; if ( VAR_73 == VAR_74 ) goto VAR_75 ; VAR_76 = VAR_77 ; goto VAR_78 ; } VAR_79 . VAR_80 = METHOD_19 ( VAR_81 ) ; if ( METHOD_20 ( VAR_82 , 2 , ( unsigned TYPE_35 * ) & VAR_83 . VAR_84 ) != 2 ) METHOD_21 ( VAR_85 , ""ImproperImageHeader"" ) ; if ( VAR_86 ) ( TYPE_36 ) METHOD_22 ( VAR_87 , METHOD_23 ( ) , ""Endian%c%c"" , VAR_88 . VAR_89 [ 0 ] , VAR_90 . VAR_91 [ 1 ] ) ; if ( ! METHOD_24 ( VAR_92 . VAR_93 , ""IM"" , 2 ) ) { METHOD_25 = VAR_94 ; METHOD_26 = METHOD_27 ; METHOD_28 = VAR_95 ; METHOD_29 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 ; } else if ( ! METHOD_30 ( VAR_100 . VAR_101 , ""MI"" , 2 ) ) { METHOD_31 = VAR_102 ; METHOD_32 = VAR_103 ; METHOD_33 = VAR_104 ; METHOD_34 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } else goto VAR_109 ; if ( METHOD_35 ( VAR_110 . VAR_111 , ""MATLAB"" , 6 ) ) VAR_112 : METHOD_36 ( VAR_113 , ""ImproperImageHeader"" ) ; VAR_114 = METHOD_37 ( VAR_115 ) ; while ( ! METHOD_38 ( VAR_116 ) ) { VAR_117 = 1 ; ( TYPE_37 ) METHOD_39 ( VAR_118 , VAR_119 , VAR_120 ) ; VAR_121 . VAR_122 = METHOD_40 ( VAR_123 ) ; if ( METHOD_41 ( VAR_124 ) ) break ; VAR_125 . VAR_126 = METHOD_42 ( VAR_127 ) ; if ( METHOD_43 ( VAR_128 ) ) break ; VAR_129 += VAR_130 . VAR_131 + 4 + 4 ; VAR_132 = VAR_133 ; if d ( VAR_134 ) if ( VAR_135 . VAR_136 == VAR_137 ) { VAR_138 = METHOD_44 ( VAR_139 , VAR_140 . VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 == VAR_145 ) continue ; VAR_146 . VAR_147 = METHOD_45 ( VAR_148 ) ; } if ( VAR_149 . VAR_150 != VAR_151 ) continue ; VAR_152 . VAR_153 = METHOD_46 ( VAR_154 ) ; VAR_155 . VAR_156 = METHOD_47 ( VAR_157 ) ; VAR_158 . VAR_159 = METHOD_48 ( VAR_160 ) ; VAR_161 . VAR_162 = VAR_163 . VAR_164 & 0xFF ; VAR_165 . VAR_166 = ( VAR_167 . VAR_168 >> 8 ) & 0xFF ; VAR_169 . VAR_170 = METHOD_49 ( VAR_171 ) ; if ( VAR_172 != VAR_173 ) VAR_174 . VAR_175 = METHOD_50 ( VAR_176 ) ; VAR_177 . VAR_178 = METHOD_51 ( VAR_179 ) ; VAR_180 . VAR_181 = METHOD_52 ( VAR_182 ) ; VAR_183 . VAR_184 = METHOD_53 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_54 ( VAR_188 ) ; switch ( VAR_189 . VAR_190 ) { case 8 : VAR_191 = VAR_192 = 1 ; break ; case 12 : VAR_193 = VAR_194 = METHOD_55 ( VAR_195 ) ; ( TYPE_38 ) METHOD_56 ( VAR_196 ) ; if ( VAR_197 != 3 ) METHOD_57 ( VAR_198 , ""MultidimensionalMatricesAreNotSupported"" ) ; break ; case 16 : VAR_199 = VAR_200 = METHOD_58 ( VAR_201 ) ; if ( VAR_202 != 3 && VAR_203 != 1 ) METHOD_59 ( VAR_204 , ""MultidimensionalMatricesAreNotSupported"" ) ; VAR_205 = METHOD_60 ( VAR_206 ) ; if ( VAR_207 == 0 ) METHOD_61 ( VAR_208 , ""ImproperImageHeader"" ) ; break ; default : METHOD_62 ( VAR_209 , ""MultidimensionalMatricesAreNotSupported"" ) ; } VAR_210 . VAR_211 = METHOD_63 ( VAR_212 ) ; VAR_213 . VAR_214 = METHOD_64 ( VAR_215 ) ; if ( VAR_216 ) ( TYPE_39 ) METHOD_65 ( VAR_217 , METHOD_66 ( ) , ""MATLAB_HDR.StructureClass%d"" , VAR_218 . VAR_219 ) ; if ( VAR_220 . VAR_221 != VAR_222 && VAR_223 . VAR_224 != VAR_225 && VAR_226 . VAR_227 != VAR_228 && VAR_229 . VAR_230 != VAR_231 && VAR_232 . VAR_233 != VAR_234 && VAR_235 . VAR_236 != VAR_237 && VAR_238 . VAR_239 != VAR_240 && VAR_241 . VAR_242 != VAR_243 && VAR_244 . VAR_245 != VAR_246 && VAR_247 . VAR_248 != VAR_249 && VAR_250 . VAR_251 != VAR_252 ) METHOD_67 ( VAR_253 , ""UnsupportedCellTypeInTheMatrix"" ) ; switch ( VAR_254 . VAR_255 ) { case 0 : VAR_256 = METHOD_68 ( VAR_257 ) ; VAR_258 = 4 * ( TYPE_40 ) ( ( VAR_259 + 3 + 1 ) / 4 ) ; ( TYPE_41 ) METHOD_69 ( VAR_260 , VAR_261 , VAR_262 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_42 ) METHOD_70 ( VAR_263 , 4 , ( unsigned TYPE_43 * ) & VAR_264 ) ; break ; default : goto VAR_265 ; } VAR_266 = METHOD_71 ( VAR_267 ) ; if ( VAR_268 ) ( TYPE_44 ) METHOD_72 ( VAR_269 , METHOD_73 ( ) , ""MATLAB_HDR.CellType:%.20g"" , ( TYPE_45 ) VAR_270 ) ; ( TYPE_46 ) METHOD_74 ( VAR_271 , 4 , ( unsigned TYPE_47 * ) & VAR_272 ) ; VAR_273 : switch ( VAR_274 ) { case VAR_275 : case VAR_276 : VAR_277 = 8 ; if ( VAR_278 . VAR_279 & VAR_280 ) VAR_281 -> VAR_282 = 1 ; else VAR_283 -> VAR_284 = 8 ; VAR_285 = ( TYPE_48 ) VAR_286 . VAR_287 ; break ; case VAR_288 : case VAR_289 : VAR_290 = 16 ; VAR_291 -> VAR_292 = 16 ; VAR_293 = ( TYPE_49 ) ( 2 * VAR_294 . VAR_295 ) ; break ; case VAR_296 : case VAR_297 : VAR_298 = 32 ; VAR_299 -> VAR_300 = 32 ; VAR_301 = ( TYPE_50 ) ( 4 * VAR_302 . VAR_303 ) ; break ; case VAR_304 : case VAR_305 : VAR_306 = 64 ; VAR_307 -> VAR_308 = 64 ; VAR_309 = ( TYPE_51 ) ( 8 * VAR_310 . VAR_311 ) ; break ; case VAR_312 : VAR_313 = 32 ; VAR_314 -> VAR_315 = 32 ; ( TYPE_52 ) METHOD_75 ( VAR_316 , ""quantum:format"" , ""floating-point"" ) ; if ( VAR_317 . VAR_318 & VAR_319 ) { } VAR_320 = ( TYPE_53 ) ( 4 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 64 ; VAR_325 -> VAR_326 = 64 ; ( TYPE_54 ) METHOD_76 ( VAR_327 , ""quantum:format"" , ""floating-point"" ) ; METHOD_77 ( 4127 ) if ( sizeof ( TYPE_55 ) != 8 ) TYPE_56 METHOD_78 ( VAR_328 , ""IncompatibleSizeOfDouble"" ) ; if ( VAR_329 . VAR_330 & VAR_331 ) { } VAR_332 = ( TYPE_57 ) ( 8 * VAR_333 . VAR_334 ) ; break ; default : METHOD_79 ( VAR_335 , ""UnsupportedCellTypeInTheMatrix"" ) ; } ( TYPE_58 ) VAR_336 ; VAR_337 -> VAR_338 = VAR_339 . VAR_340 ; VAR_341 -> VAR_342 = VAR_343 . VAR_344 ; VAR_345 = METHOD_80 ( VAR_346 , VAR_347 ) ; if ( VAR_348 == ( TYPE_59 * ) VAR_349 ) METHOD_81 ( VAR_350 , ""MemoryAllocationFailed"" ) ; ( TYPE_91 ) METHOD_133 ( VAR_665 , 0 , VAR_556 * sizeof ( TYPE_77 ) ) ; VAR_351 = 1 ; VAR_352 -> VAR_353 = VAR_354 << VAR_355 -> VAR_356 ; if ( VAR_357 -> VAR_358 == 0 || VAR_359 -> VAR_360 == 0 ) goto VAR_361 ; if ( ( VAR_362 . VAR_363 == 8 ) && ( ( VAR_364 . VAR_365 & VAR_366 ) == 0 ) ) { VAR_367 -> VAR_368 = VAR_369 ; METHOD_82 ( VAR_370 , VAR_371 , VAR_372 ) ; } if ( VAR_373 -> VAR_374 ) { TYPE_60 VAR_375 = VAR_376 -> VAR_377 ; VAR_378 -> VAR_379 = VAR_380 -> VAR_381 ; VAR_382 -> VAR_383 = VAR_384 ; goto VAR_385 ; } VAR_386 = METHOD_83 ( VAR_387 , VAR_388 -> VAR_389 , VAR_390 -> VAR_391 , VAR_392 ) ; if ( VAR_393 == VAR_394 ) return ( METHOD_84 ( VAR_395 ) ) ; VAR_396 = ( unsigned TYPE_61 * ) METHOD_85 ( ( TYPE_62 ) ( VAR_397 ) , sizeof ( TYPE_63 ) ) ; if ( VAR_398 == VAR_399 ) METHOD_86 ( VAR_400 , ""MemoryAllocationFailed"" ) ; VAR_401 = 0 ; VAR_402 = 0 ; if ( VAR_403 == VAR_404 || VAR_405 == VAR_406 ) { METHOD_87 ( VAR_407 , VAR_408 -> VAR_409 , VAR_410 . VAR_411 , VAR_412 . VAR_413 , VAR_414 , VAR_415 , VAR_416 , & VAR_417 -> VAR_418 , & VAR_419 -> VAR_420 ) ; } if ( VAR_421 == 1 ) VAR_422 = 0 ; do { for ( VAR_423 = 0 ; VAR_424 < ( TYPE_64 ) VAR_425 . VAR_426 ; VAR_427 ++ ) { VAR_428 = METHOD_88 ( VAR_429 , 0 , VAR_430 . VAR_431 - VAR_432 - 1 , VAR_433 -> VAR_434 , 1 , VAR_435 ) ; if ( VAR_436 == ( TYPE_65 * ) VAR_437 ) { if ( VAR_438 ) ( TYPE_66 ) METHOD_89 ( VAR_439 , METHOD_90 ( ) , ""MATsetimagepixelsreturnsunexpectedNULLonarow%u."" , ( unsigned ) ( VAR_440 . VAR_441 - VAR_442 - 1 ) ) ; goto VAR_443 ; } if ( METHOD_91 ( VAR_444 , VAR_445 , ( unsigned TYPE_67 * ) VAR_446 ) != ( TYPE_68 ) VAR_447 ) { if ( VAR_448 ) ( TYPE_69 ) METHOD_92 ( VAR_449 , METHOD_93 ( ) , ""MATcannotreadscanrow%ufromafile."" , ( unsigned ) ( VAR_450 . VAR_451 - VAR_452 - 1 ) ) ; goto VAR_453 ; } if ( ( VAR_454 == VAR_455 || VAR_456 == VAR_457 ) && ( VAR_458 . VAR_459 & VAR_460 ) ) { METHOD_94 ( ( unsigned TYPE_70 * ) VAR_461 , VAR_462 ) ; if ( METHOD_95 ( VAR_463 , ( TYPE_71 * ) VAR_464 , VAR_465 , VAR_466 [ VAR_467 ] , VAR_468 , VAR_469 ) <= 0 ) { VAR_470 : if ( VAR_471 ) ( TYPE_72 ) METHOD_96 ( VAR_472 , METHOD_97 ( ) , ""MATfailedtoImportQuantumPixelsforarow%u"" , ( unsigned ) ( VAR_473 . VAR_474 - VAR_475 - 1 ) ) ; break ; } } else { if ( METHOD_98 ( VAR_476 , ( TYPE_73 * ) VAR_477 , VAR_478 , VAR_479 [ VAR_480 ] , VAR_481 , VAR_482 ) <= 0 ) goto VAR_483 ; if ( VAR_484 <= 1 && ( VAR_485 == VAR_486 || VAR_487 == VAR_488 || VAR_489 == VAR_490 || VAR_491 == VAR_492 ) ) METHOD_99 ( VAR_493 , VAR_494 , VAR_495 . VAR_496 ) ; } if ( ! METHOD_100 ( VAR_497 , VAR_498 ) ) { if ( VAR_499 ) ( TYPE_74 ) METHOD_101 ( VAR_500 , METHOD_102 ( ) , ""MATfailedtosyncimagepixelsforarow%u"" , ( unsigned ) ( VAR_501 . VAR_502 - VAR_503 - 1 ) ) ; goto VAR_504 ; } } } while ( VAR_505 -- >= 2 ) ; VAR_506 = METHOD_103 ( VAR_507 ) ; VAR_508 : if ( VAR_509 . VAR_510 & VAR_511 ) { VAR_512 = METHOD_104 ( VAR_513 ) ; VAR_514 = METHOD_105 ( VAR_515 ) ; if ( VAR_516 == VAR_517 || VAR_518 == VAR_519 ) { METHOD_106 ( VAR_520 , VAR_521 -> VAR_522 , VAR_523 . VAR_524 , VAR_525 . VAR_526 , VAR_527 , VAR_528 , VAR_529 , & VAR_530 , & VAR_531 ) ; } if ( VAR_532 == VAR_533 ) for ( VAR_534 = 0 ; VAR_535 < ( TYPE_75 ) VAR_536 . VAR_537 ; VAR_538 ++ ) { METHOD_107 ( VAR_539 , VAR_540 , ( TYPE_76 * ) VAR_541 ) ; METHOD_108 ( VAR_542 , ( TYPE_77 * ) VAR_543 , VAR_544 , VAR_545 , VAR_546 , VAR_547 ) ; } if ( VAR_548 == VAR_549 ) for ( VAR_550 = 0 ; VAR_551 < ( TYPE_78 ) VAR_552 . VAR_553 ; VAR_554 ++ ) { METHOD_109 ( VAR_555 , VAR_556 , ( TYPE_79 * ) VAR_557 ) ; METHOD_110 ( VAR_558 , ( TYPE_80 * ) VAR_559 , VAR_560 , VAR_561 , VAR_562 , VAR_563 ) ; } } if ( ( VAR_564 . VAR_565 == 8 ) && ( ( VAR_566 . VAR_567 & VAR_568 ) == 0 ) ) VAR_569 -> VAR_570 = VAR_571 ; if ( VAR_572 -> VAR_573 == 1 ) VAR_574 -> VAR_575 = VAR_576 ; if ( VAR_577 == VAR_578 ) VAR_579 = VAR_580 ; VAR_581 = METHOD_111 ( VAR_582 , 90.0 , VAR_583 ) ; if ( VAR_584 != ( TYPE_81 * ) VAR_585 ) { VAR_586 -> VAR_587 . VAR_588 = 0 ; VAR_589 -> VAR_590 . VAR_591 = 0 ; VAR_592 = VAR_593 -> VAR_594 ; VAR_595 -> VAR_596 = VAR_597 -> VAR_598 ; VAR_599 -> VAR_600 = VAR_601 -> VAR_602 ; VAR_603 -> VAR_604 = VAR_605 ; METHOD_112 ( & VAR_606 , VAR_607 ) ; METHOD_113 ( & VAR_608 ) ; } VAR_609 : if ( VAR_610 != VAR_611 ) if ( VAR_612 != VAR_613 ) { METHOD_114 ( & VAR_614 ) ; if ( VAR_615 ) { if ( VAR_616 -> VAR_617 ) { METHOD_115 ( VAR_618 -> VAR_619 ) ; VAR_620 -> VAR_621 = VAR_622 ; ( TYPE_82 ) METHOD_116 ( VAR_623 -> VAR_624 ) ; } } } METHOD_117 ( VAR_625 , VAR_626 , VAR_627 ) ; if ( VAR_628 -> VAR_629 == ( TYPE_83 * ) VAR_630 ) break ; VAR_631 = METHOD_118 ( VAR_632 ) ; VAR_633 -> VAR_634 = VAR_635 -> VAR_636 = 0 ; VAR_637 -> VAR_638 = 0 ; METHOD_119 ( VAR_639 ) ; VAR_640 = VAR_641 ; if ( -- VAR_642 > 0 ) { VAR_643 = VAR_644 ; if ( VAR_645 == VAR_646 ) VAR_647 = VAR_648 ; goto VAR_649 ; } if ( ( VAR_650 != VAR_651 ) && ( VAR_652 != VAR_653 ) ) { METHOD_120 ( & VAR_654 ) ; if ( VAR_655 ) { if ( VAR_656 -> VAR_657 ) { METHOD_121 ( VAR_658 -> VAR_659 ) ; VAR_660 -> VAR_661 = VAR_662 ; ( TYPE_84 ) METHOD_122 ( VAR_663 -> VAR_664 ) ; } } } } METHOD_123 ( VAR_665 ) ; VAR_666 : VAR_667 = METHOD_124 ( VAR_668 ) ; METHOD_125 ( VAR_669 ) ; { TYPE_85 * VAR_670 ; TYPE_86 VAR_671 = 0 ; VAR_672 = VAR_673 ; VAR_674 = VAR_675 ; while ( VAR_676 != ( TYPE_87 * ) VAR_677 ) { TYPE_88 * VAR_678 = VAR_679 ; if ( ( VAR_680 -> VAR_681 == 0 ) || ( VAR_682 -> VAR_683 == 0 ) ) { VAR_684 = VAR_685 -> VAR_686 ; METHOD_126 ( & VAR_687 ) ; } else { VAR_688 = VAR_689 ; VAR_690 = VAR_691 -> VAR_692 ; } } for ( VAR_693 = VAR_694 ; VAR_695 != ( TYPE_89 * ) VAR_696 ; VAR_697 = VAR_698 -> VAR_699 ) VAR_700 -> VAR_701 = VAR_702 ++ ; } if ( VAR_703 != VAR_704 ) { if ( VAR_705 -> VAR_706 ) { METHOD_127 ( VAR_707 -> VAR_708 ) ; VAR_709 -> VAR_710 = VAR_711 ; ( TYPE_90 ) METHOD_128 ( VAR_712 -> VAR_713 ) ; } METHOD_129 ( VAR_714 ) ; VAR_715 = VAR_716 ; } if ( VAR_717 ) ( TYPE_91 ) METHOD_130 ( VAR_718 , METHOD_131 ( ) , ""return"" ) ; if ( VAR_719 == VAR_720 ) METHOD_132 ( VAR_721 , ""ImproperImageHeader"" ) ; return ( VAR_722 ) ; }",133
134,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_3 TYPE_4 * VAR_9 = ( TYPE_5 TYPE_6 * ) VAR_10 ; TYPE_7 VAR_11 ; switch ( VAR_12 ) { case VAR_13 : { struct STRUCT_OR_UNION_3 VAR_14 , * VAR_15 ; if ( METHOD_1 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; if ( METHOD_2 ( & VAR_20 ) > VAR_21 || VAR_22 . VAR_23 > VAR_24 ) return - VAR_25 ; VAR_26 = METHOD_3 ( METHOD_4 ( & VAR_27 ) , VAR_28 ) ; if ( ! VAR_29 ) return - VAR_30 ; if ( METHOD_5 ( VAR_31 , VAR_32 , METHOD_6 ( & VAR_33 ) ) ) { VAR_34 = - VAR_35 ; goto VAR_36 ; }  METHOD_7 ( & VAR_37 -> VAR_38 ) ;  METHOD_8 ( & VAR_39 -> VAR_40 ) ; VAR_41 = METHOD_9 ( VAR_42 , VAR_43 ) ; if ( VAR_44 ) goto VAR_45 ; METHOD_10 ( & VAR_46 -> VAR_47 , & VAR_48 -> VAR_49 ) ; VAR_50 : METHOD_11 ( & VAR_51 -> VAR_52 ) ; METHOD_12 ( & VAR_53 -> VAR_54 ) ; VAR_55 : METHOD_13 ( VAR_56 ) ; return VAR_57 ; } case VAR_58 : { struct STRUCT_OR_UNION_4 VAR_59 ; METHOD_14 ( & VAR_60 -> VAR_61 ) ; VAR_62 = METHOD_15 ( VAR_63 ) ; if ( VAR_64 ) goto VAR_65 ; if ( METHOD_16 ( & VAR_66 , VAR_67 , sizeof ( VAR_68 ) ) ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 = METHOD_17 ( VAR_73 , & VAR_74 ) ; if ( VAR_75 < 0 ) goto VAR_76 ; if ( METHOD_18 ( & ( ( struct STRUCT_OR_UNION_5 TYPE_8 * ) VAR_77 ) -> VAR_78 , & VAR_79 . VAR_80 , sizeof ( VAR_81 . VAR_82 ) ) ) VAR_83 = - VAR_84 ; VAR_85 : METHOD_19 ( & VAR_86 -> VAR_87 ) ; return VAR_88 ; } case VAR_89 : { TYPE_9 * VAR_90 ; METHOD_20 ( & VAR_91 -> VAR_92 ) ; VAR_93 = METHOD_21 ( VAR_94 ) ; if ( VAR_95 ) goto VAR_96 ; VAR_97 = METHOD_22 ( VAR_98 -> VAR_99 -> VAR_100 , VAR_101 ) ; if ( ! VAR_102 ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } if ( METHOD_23 ( VAR_106 , VAR_107 , VAR_108 -> VAR_109 -> VAR_110 ) ) { VAR_111 = - VAR_112 ; goto VAR_113 ; } VAR_114 = METHOD_24 ( VAR_115 , VAR_116 ) ; VAR_117 : METHOD_25 ( VAR_118 ) ; VAR_119 : METHOD_26 ( & VAR_120 -> VAR_121 ) ; return VAR_122 ; } default : return - VAR_123 ; } ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_3 TYPE_4 * VAR_9 = ( TYPE_5 TYPE_6 * ) VAR_10 ; TYPE_7 VAR_11 ; switch ( VAR_12 ) { case VAR_13 : { struct STRUCT_OR_UNION_3 VAR_14 , * VAR_15 ; if ( METHOD_1 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; if ( METHOD_2 ( & VAR_20 ) > VAR_21 || VAR_22 . VAR_23 > VAR_24 ) return - VAR_25 ; VAR_26 = METHOD_3 ( METHOD_4 ( & VAR_27 ) , VAR_28 ) ; if ( ! VAR_29 ) return - VAR_30 ; if ( METHOD_5 ( VAR_31 , VAR_32 , METHOD_6 ( & VAR_33 ) ) ) { VAR_34 = - VAR_35 ; goto VAR_36 ; } METHOD_7 ( & VAR_37 -> VAR_38 ) ; METHOD_8 ( & VAR_39 -> VAR_40 ) ; VAR_41 = METHOD_9 ( VAR_42 , VAR_43 ) ; if ( VAR_44 ) goto VAR_45 ; METHOD_10 ( & VAR_46 -> VAR_47 , & VAR_48 -> VAR_49 ) ; VAR_50 : METHOD_11 ( & VAR_51 -> VAR_52 ) ; METHOD_12 ( & VAR_53 -> VAR_54 ) ; VAR_55 : METHOD_13 ( VAR_56 ) ; return VAR_57 ; } case VAR_58 : { struct STRUCT_OR_UNION_4 VAR_59 ; METHOD_14 ( & VAR_60 -> VAR_61 ) ; VAR_62 = METHOD_15 ( VAR_63 ) ; if ( VAR_64 ) goto VAR_65 ; if ( METHOD_16 ( & VAR_66 , VAR_67 , sizeof ( VAR_68 ) ) ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 = METHOD_17 ( VAR_73 , & VAR_74 ) ; if ( VAR_75 < 0 ) goto VAR_76 ; if ( METHOD_18 ( & ( ( struct STRUCT_OR_UNION_5 TYPE_8 * ) VAR_77 ) -> VAR_78 , & VAR_79 . VAR_80 , sizeof ( VAR_81 . VAR_82 ) ) ) VAR_83 = - VAR_84 ; VAR_85 : METHOD_19 ( & VAR_86 -> VAR_87 ) ; return VAR_88 ; } case VAR_89 : { TYPE_9 * VAR_90 ; METHOD_20 ( & VAR_91 -> VAR_92 ) ; VAR_93 = METHOD_21 ( VAR_94 ) ; if ( VAR_95 ) goto VAR_96 ; VAR_97 = METHOD_22 ( VAR_98 -> VAR_99 -> VAR_100 , VAR_101 ) ; if ( ! VAR_102 ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } if ( METHOD_23 ( VAR_106 , VAR_107 , VAR_108 -> VAR_109 -> VAR_110 ) ) { VAR_111 = - VAR_112 ; goto VAR_113 ; } VAR_114 = METHOD_24 ( VAR_115 , VAR_116 ) ; VAR_117 : METHOD_25 ( VAR_118 ) ; VAR_119 : METHOD_26 ( & VAR_120 -> VAR_121 ) ; return VAR_122 ; } default : return - VAR_123 ; } ; return 0 ; }",134
135,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = VAR_3 -> VAR_4 ; unsigned TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = 1 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 . VAR_14 = VAR_15 -> VAR_16 = 0 ; if ( VAR_17 -> VAR_18 ) { METHOD_1 ( VAR_19 -> VAR_20 ) ; VAR_21 -> VAR_22 = VAR_23 ; }  if ( VAR_24 ) {  VAR_25 -> VAR_26 = * VAR_27 ++ ; VAR_28 -> VAR_29 . VAR_30 = ( VAR_31 -> VAR_32 . VAR_33 & ~ 0xff ) | * VAR_34 ++ ; VAR_35 -= 2 ; if ( VAR_36 ) { TYPE_5 VAR_37 , VAR_38 ; VAR_39 -> VAR_40 = ( TYPE_6 ) * VAR_41 ++ << 16 ; VAR_42 -- ; if ( VAR_43 ) { VAR_44 -> VAR_45 += VAR_46 = * VAR_47 ++ ; VAR_48 -- ; if ( VAR_49 ) { if ( VAR_50 > VAR_51 ) return VAR_52 ; VAR_53 -> VAR_54 = METHOD_2 ( VAR_55 ) ; if ( VAR_56 -> VAR_57 ) { for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; ++ VAR_61 ) if ( VAR_62 ) { VAR_63 -> VAR_64 [ VAR_65 ] = * VAR_66 ++ ;  VAR_67 -- ;  } else VAR_68 -> VAR_69 [ VAR_70 ] = VAR_71 ; } } } else VAR_72 -> VAR_73 += VAR_74 -> VAR_75 . VAR_76 ; } } return VAR_77 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = VAR_3 -> VAR_4 ; unsigned TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = 1 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 . VAR_14 = VAR_15 -> VAR_16 = 0 ; if ( VAR_17 -> VAR_18 ) { METHOD_1 ( VAR_19 -> VAR_20 ) ; VAR_21 -> VAR_22 = VAR_23 ; } if ( VAR_24 ) { VAR_25 -> VAR_26 = * VAR_27 ++ ; VAR_28 -> VAR_29 . VAR_30 = ( VAR_31 -> VAR_32 . VAR_33 & ~ 0xff ) | * VAR_34 ++ ; VAR_35 -= 2 ; if ( VAR_36 ) { TYPE_5 VAR_37 , VAR_38 ; VAR_39 -> VAR_40 = ( TYPE_6 ) * VAR_41 ++ << 16 ; VAR_42 -- ; if ( VAR_43 ) { VAR_44 -> VAR_45 += VAR_46 = * VAR_47 ++ ; VAR_48 -- ; if ( VAR_49 ) { if ( VAR_50 > VAR_51 ) return VAR_52 ; VAR_53 -> VAR_54 = METHOD_2 ( VAR_55 ) ; if ( VAR_56 -> VAR_57 ) { for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; ++ VAR_61 ) if ( VAR_62 ) { VAR_63 -> VAR_64 [ VAR_65 ] = * VAR_66 ++ ; if ( VAR_74 -> VAR_69 [ VAR_71 ] >= VAR_60 ) VAR_74 -> VAR_69 [ VAR_71 ] = 0 ; VAR_67 -- ; } else VAR_68 -> VAR_69 [ VAR_70 ] = VAR_71 ; } } } else VAR_72 -> VAR_73 += VAR_74 -> VAR_75 . VAR_76 ; } } return VAR_77 ; }",135
136,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  if ( VAR_1 -> VAR_2 ) {  struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 -> VAR_6 ; VAR_7 -> VAR_8 -> METHOD_1 ( VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; METHOD_2 ( VAR_13 ) ; }  if ( METHOD_3 ( VAR_14 -> VAR_15 , 1 ) -> VAR_16 )  METHOD_4 ( ""%s:fasynclistnotempty!\\n"" , VAR_17 ) ; if ( ! VAR_18 -> VAR_19 ) { METHOD_5 ( METHOD_6 ( VAR_20 ) ) ; return ; } VAR_21 -> VAR_22 = VAR_23 ; }",TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 -> VAR_6 ; VAR_7 -> VAR_8 -> METHOD_1 ( VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; METHOD_2 ( VAR_13 ) ; },136
137,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; TYPE_3 VAR_14 ; if ( VAR_15 > VAR_16 ) VAR_17 = VAR_18 ; else if ( VAR_19 < VAR_20 ) VAR_21 -> VAR_22 |= VAR_23 ;  METHOD_4 ( VAR_24 ) ;  if ( VAR_25 -> VAR_26 ) { VAR_27 -> VAR_28 = 0 ; METHOD_5 ( & VAR_29 -> VAR_30 , VAR_31 , VAR_32 -> VAR_33 , 0 ) ; VAR_34 = METHOD_6 ( METHOD_7 ( & VAR_35 -> VAR_36 ) , & VAR_37 -> VAR_38 ) ; if ( VAR_39 ) goto VAR_40 ; } VAR_41 = METHOD_8 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; VAR_47 : METHOD_9 ( VAR_48 ) ; return VAR_49 ? : VAR_50 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; TYPE_3 VAR_14 ; if ( VAR_15 > VAR_16 ) VAR_17 = VAR_18 ; else if ( VAR_19 < VAR_20 ) VAR_21 -> VAR_22 |= VAR_23 ; VAR_42 -> VAR_51 = 0 ; METHOD_4 ( VAR_24 ) ; if ( VAR_25 -> VAR_26 ) { VAR_27 -> VAR_28 = 0 ; METHOD_5 ( & VAR_29 -> VAR_30 , VAR_31 , VAR_32 -> VAR_33 , 0 ) ; VAR_34 = METHOD_6 ( METHOD_7 ( & VAR_35 -> VAR_36 ) , & VAR_37 -> VAR_38 ) ; if ( VAR_39 ) goto VAR_40 ; } VAR_41 = METHOD_8 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; VAR_47 : METHOD_9 ( VAR_48 ) ; return VAR_49 ? : VAR_50 ; }",137
138,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { if ( VAR_2 -> VAR_3 . VAR_4 . VAR_5 == VAR_6 ) { VAR_7 -> VAR_8 . VAR_9 = 0 ; VAR_10 -> VAR_11 . VAR_12 = 0 ; VAR_13 -> VAR_14 . VAR_15 = 0 ; VAR_16 -> VAR_17 . VAR_18 = 0 ; return ; }  METHOD_1 ( VAR_19 -> VAR_20 , VAR_21 -> VAR_22 . VAR_23 . VAR_24 * VAR_25 ) ;   METHOD_2 ( VAR_26 -> VAR_27 , ( VAR_28 -> VAR_29 . VAR_30 . VAR_31 - METHOD_3 ( ) ) * VAR_32 ) ;   return ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { if ( VAR_2 -> VAR_3 . VAR_4 . VAR_5 == VAR_6 ) { VAR_7 -> VAR_8 . VAR_9 = 0 ; VAR_10 -> VAR_11 . VAR_12 = 0 ; VAR_13 -> VAR_14 . VAR_15 = 0 ; VAR_16 -> VAR_17 . VAR_18 = 0 ; return ; } METHOD_1 ( VAR_19 -> VAR_20 , VAR_21 -> VAR_22 . VAR_23 . VAR_24 * VAR_25 ) ; METHOD_2 ( VAR_26 -> VAR_27 = METHOD_2 ( ( VAR_28 -> VAR_29 . VAR_30 . VAR_31 - METHOD_3 ( ) ) * VAR_32 ) ; }",138
139,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; TYPE_2 VAR_12 ; VAR_13 * VAR_14 ; TYPE_3 VAR_15 , VAR_16 ; VAR_17 * VAR_18 ; VAR_19 * VAR_20 ; VAR_21 * VAR_22 ; VAR_23 * VAR_24 ; VAR_25 * VAR_26 ; VAR_27 * VAR_28 ; VAR_29 * VAR_30 ; VAR_31 * VAR_32 ; TYPE_4 VAR_33 , VAR_34 , VAR_35 ; TYPE_5 VAR_36 ; TYPE_6 VAR_37 ; TYPE_7 VAR_38 ; struct STRUCT_OR_UNION_1 * VAR_39 ; VAR_40 = METHOD_1 ( VAR_41 -> VAR_42 ) ; if ( VAR_43 == VAR_44 ) { VAR_45 = VAR_46 ; VAR_47 = - 1 ; } else { VAR_48 = METHOD_2 ( VAR_49 , ""cpu_util_total"" ) ; VAR_50 = METHOD_3 ( VAR_51 , ""cpu_util_user"" ) ; VAR_52 = METHOD_4 ( VAR_53 , ""cpu_util_system"" ) ; VAR_54 = METHOD_5 ( VAR_55 , ""sender_has_retransmits"" ) ; if ( VAR_56 == VAR_57 || VAR_58 == VAR_59 || VAR_60 == VAR_61 || VAR_62 == VAR_63 ) { VAR_64 = VAR_65 ; VAR_66 = - 1 ; } else { if ( VAR_67 -> VAR_68 ) { METHOD_6 ( ""get_results\\n%s\\n"" , METHOD_7 ( VAR_69 ) ) ; }  VAR_70 -> VAR_71 [ 0 ] = VAR_72 -> VAR_73 ;   VAR_74 -> VAR_75 [ 1 ] = VAR_76 -> VAR_77 ;   VAR_78 -> VAR_79 [ 2 ] = VAR_80 -> VAR_81 ;  VAR_82 = VAR_83 -> VAR_84 ; if ( ! VAR_85 -> VAR_86 ) VAR_87 -> VAR_88 = VAR_89 ; VAR_90 = METHOD_8 ( VAR_91 , ""streams"" ) ; if ( VAR_92 == VAR_93 ) { VAR_94 = VAR_95 ; VAR_96 = - 1 ; } else { VAR_97 = METHOD_9 ( VAR_98 ) ; for ( VAR_99 = 0 ; VAR_100 < VAR_101 ; ++ VAR_102 ) { VAR_103 = METHOD_10 ( VAR_104 , VAR_105 ) ; if ( VAR_106 == VAR_107 ) { VAR_108 = VAR_109 ; VAR_110 = - 1 ; } else { VAR_111 = METHOD_11 ( VAR_112 , ""id"" ) ; VAR_113 = METHOD_12 ( VAR_114 , ""bytes"" ) ; VAR_115 = METHOD_13 ( VAR_116 , ""retransmits"" ) ; VAR_117 = METHOD_14 ( VAR_118 , ""jitter"" ) ; VAR_119 = METHOD_15 ( VAR_120 , ""errors"" ) ; VAR_121 = METHOD_16 ( VAR_122 , ""packets"" ) ; if ( VAR_123 == VAR_124 || VAR_125 == VAR_126 || VAR_127 == VAR_128 || VAR_129 == VAR_130 || VAR_131 == VAR_132 || VAR_133 == VAR_134 ) { VAR_135 = VAR_136 ; VAR_137 = - 1 ; } else { VAR_138 = VAR_139 -> VAR_140 ; VAR_141 = VAR_142 -> VAR_143 ; VAR_144 = VAR_145 -> VAR_146 ;  VAR_147 = VAR_148 -> VAR_149 ;  VAR_150 = VAR_151 -> VAR_152 ; VAR_153 = VAR_154 -> VAR_155 ; METHOD_17 ( VAR_156 , & VAR_157 -> VAR_158 , VAR_159 ) if ( VAR_160 -> VAR_161 == VAR_162 ) break ; if ( VAR_163 == VAR_164 ) { VAR_165 = VAR_166 ; VAR_167 = - 1 ; } else { if ( VAR_168 -> VAR_169 ) { VAR_170 -> VAR_171 = VAR_172 ; VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; VAR_179 -> VAR_180 -> VAR_181 = VAR_182 ; } else { VAR_183 -> VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 -> VAR_189 = VAR_190 ; } } } } } if ( VAR_191 -> VAR_192 == 'c' && METHOD_18 ( VAR_193 ) ) { VAR_194 = METHOD_19 ( VAR_195 , ""server_output_json"" ) ; if ( VAR_196 != VAR_197 ) { VAR_198 -> VAR_199 = VAR_200 ; } else { VAR_201 = METHOD_20 ( VAR_202 , ""server_output_text"" ) ; if ( VAR_203 != VAR_204 ) { VAR_205 -> VAR_206 = METHOD_21 ( VAR_207 -> VAR_208 ) ; } } } } } METHOD_22 ( VAR_209 ) ; } return VAR_210 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; TYPE_2 VAR_12 ; VAR_13 * VAR_14 ; TYPE_3 VAR_15 , VAR_16 ; VAR_17 * VAR_18 ; VAR_19 * VAR_20 ; VAR_21 * VAR_22 ; VAR_23 * VAR_24 ; VAR_25 * VAR_26 ; VAR_27 * VAR_28 ; VAR_29 * VAR_30 ; VAR_31 * VAR_32 ; TYPE_4 VAR_33 , VAR_34 , VAR_35 ; TYPE_5 VAR_36 ; TYPE_6 VAR_37 ; TYPE_7 VAR_38 ; struct STRUCT_OR_UNION_1 * VAR_39 ; VAR_40 = METHOD_1 ( VAR_41 -> VAR_42 ) ; if ( VAR_43 == VAR_44 ) { VAR_45 = VAR_46 ; VAR_47 = - 1 ; } else { VAR_48 = METHOD_2 ( VAR_49 , ""cpu_util_total"" ) ; VAR_50 = METHOD_3 ( VAR_51 , ""cpu_util_user"" ) ; VAR_52 = METHOD_4 ( VAR_53 , ""cpu_util_system"" ) ; VAR_54 = METHOD_5 ( VAR_55 , ""sender_has_retransmits"" ) ; if ( VAR_56 == VAR_57 || VAR_58 == VAR_59 || VAR_60 == VAR_61 || VAR_62 == VAR_63 ) { VAR_64 = VAR_65 ; VAR_66 = - 1 ; } else { if ( VAR_67 -> VAR_68 ) { METHOD_6 ( ""get_results\\n%s\\n"" , METHOD_7 ( VAR_69 ) ) ; } VAR_70 -> VAR_71 [ 0 ] = VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 [ 1 ] = VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 [ 2 ] = VAR_80 -> VAR_81 ; VAR_82 = VAR_83 -> VAR_84 ; if ( ! VAR_85 -> VAR_86 ) VAR_87 -> VAR_88 = VAR_89 ; VAR_90 = METHOD_8 ( VAR_91 , ""streams"" ) ; if ( VAR_92 == VAR_93 ) { VAR_94 = VAR_95 ; VAR_96 = - 1 ; } else { VAR_97 = METHOD_9 ( VAR_98 ) ; for ( VAR_99 = 0 ; VAR_100 < VAR_101 ; ++ VAR_102 ) { VAR_103 = METHOD_10 ( VAR_104 , VAR_105 ) ; if ( VAR_106 == VAR_107 ) { VAR_108 = VAR_109 ; VAR_110 = - 1 ; } else { VAR_111 = METHOD_11 ( VAR_112 , ""id"" ) ; VAR_113 = METHOD_12 ( VAR_114 , ""bytes"" ) ; VAR_115 = METHOD_13 ( VAR_116 , ""retransmits"" ) ; VAR_117 = METHOD_14 ( VAR_118 , ""jitter"" ) ; VAR_119 = METHOD_15 ( VAR_120 , ""errors"" ) ; VAR_121 = METHOD_16 ( VAR_122 , ""packets"" ) ; if ( VAR_123 == VAR_124 || VAR_125 == VAR_126 || VAR_127 == VAR_128 || VAR_129 == VAR_130 || VAR_131 == VAR_132 || VAR_133 == VAR_134 ) { VAR_135 = VAR_136 ; VAR_137 = - 1 ; } else { VAR_138 = VAR_139 -> VAR_140 ; VAR_141 = VAR_142 -> VAR_143 ; VAR_144 = VAR_145 -> VAR_146 ; VAR_147 = VAR_148 -> VAR_149 ; VAR_150 = VAR_151 -> VAR_152 ; VAR_153 = VAR_154 -> VAR_155 ; METHOD_17 ( VAR_156 , & VAR_157 -> VAR_158 , VAR_159 ) if ( VAR_160 -> VAR_161 == VAR_162 ) break ; if ( VAR_163 == VAR_164 ) { VAR_165 = VAR_166 ; VAR_167 = - 1 ; } else { if ( VAR_168 -> VAR_169 ) { VAR_170 -> VAR_171 = VAR_172 ; VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; VAR_179 -> VAR_180 -> VAR_181 = VAR_182 ; } else { VAR_183 -> VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 -> VAR_189 = VAR_190 ; } } } } } if ( VAR_191 -> VAR_192 == 'c' && METHOD_18 ( VAR_193 ) ) { VAR_194 = METHOD_19 ( VAR_195 , ""server_output_json"" ) ; if ( VAR_196 != VAR_197 ) { VAR_198 -> VAR_199 = VAR_200 ; } else { VAR_201 = METHOD_20 ( VAR_202 , ""server_output_text"" ) ; if ( VAR_203 != VAR_204 ) { VAR_205 -> VAR_206 = METHOD_21 ( VAR_207 -> VAR_208 ) ; } } } } } METHOD_22 ( VAR_209 ) ; } return VAR_210 ; }",139
140,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ; VAR_9 = - VAR_10 ; if ( VAR_11 -> VAR_12 & VAR_13 ) goto VAR_14 ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , 0 , & VAR_18 ) ;  if ( ! VAR_19 ) goto VAR_20 ; VAR_21 = VAR_22 -> VAR_23 ; if ( VAR_24 < VAR_25 ) { VAR_26 -> VAR_27 |= VAR_28 ; VAR_29 = VAR_30 ; } VAR_31 = METHOD_2 ( VAR_32 , 0 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) goto VAR_37 ; VAR_38 = ( VAR_39 & VAR_40 ) ? VAR_41 -> VAR_42 : VAR_43 ; VAR_44 : METHOD_3 ( VAR_45 , VAR_46 ) ; METHOD_4 ( VAR_47 ) ; return VAR_48 ; VAR_49 : return VAR_50 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ; VAR_9 = - VAR_10 ; if ( VAR_11 -> VAR_12 & VAR_13 ) goto VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , 0 , & VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; VAR_21 = VAR_22 -> VAR_23 ; if ( VAR_24 < VAR_25 ) { VAR_26 -> VAR_27 |= VAR_28 ; VAR_29 = VAR_30 ; } VAR_31 = METHOD_2 ( VAR_32 , 0 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) goto VAR_37 ; VAR_38 = ( VAR_39 & VAR_40 ) ? VAR_41 -> VAR_42 : VAR_43 ; VAR_44 : METHOD_3 ( VAR_45 , VAR_46 ) ; METHOD_4 ( VAR_47 ) ; return VAR_48 ; VAR_49 : return VAR_50 ; }",140
141,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_5 VAR_11 ; TYPE_6 VAR_12 , VAR_13 , VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; VAR_18 = VAR_19 ; VAR_20 = 0 ; VAR_21 = 0 ; VAR_22 = 0 ; VAR_23 = VAR_24 ; VAR_25 = ""detail"" ; VAR_26 = 0 ; if ( VAR_27 -> VAR_28 -> VAR_29 & VAR_30 ) { METHOD_1 ( ""infoappwebconfig"" , 4 , ""Alreadytracing.IgnoringTraceLogdirective"" ) ; return 0 ; } for ( VAR_31 = METHOD_2 ( METHOD_3 ( VAR_32 ) , & VAR_33 ) ; VAR_34 ; VAR_35 = METHOD_4 ( VAR_36 , & VAR_37 ) ) { if ( ! VAR_38 ) { VAR_39 = METHOD_5 ( VAR_40 ) ; } else {  VAR_41 = METHOD_6 ( VAR_42 , ""=\\t,"" , & VAR_43 ) ;  VAR_44 = strim ( VAR_45 , ""\\""\'"" , MPR_TRIM_BOTH ) ; if ( smatch ( VAR_46 , ""anew"" ) ) { VAR_47 |= MPR_LOG_ANEW ; } else if ( smatch ( VAR_48 , ""backup"" ) ) { VAR_49 = atoi ( VAR_50 ) ; } else if ( smatch ( VAR_51 , ""format"" ) ) { VAR_52 = VAR_53 ; } else if ( smatch ( VAR_54 , ""level"" ) ) { VAR_55 = ( TYPE_7 ) stoi ( VAR_56 ) ; } else if ( smatch ( VAR_57 , ""size"" ) ) { VAR_58 = ( TYPE_8 ) getnum ( VAR_59 ) ; } else if ( smatch ( VAR_60 , ""formatter"" ) ) { VAR_61 = VAR_62 ; } else { METHOD_7 ( ""errorappwebconfig"" , 0 , ""UnknownTraceLogoption%s"" , VAR_63 ) ; } } } if ( VAR_64 < HTTP_TRACE_MIN_LOG_SIZE ) { VAR_65 = HTTP_TRACE_MIN_LOG_SIZE ; } if ( VAR_66 == 0 ) { METHOD_8 ( ""errorappwebconfig"" , 0 , ""MissingTraceLogfilename"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( VAR_67 ) { httpSetTraceFormatterName ( VAR_68 -> VAR_69 , VAR_70 ) ; } if ( ! smatch ( VAR_71 , ""stdout"" ) && ! smatch ( VAR_72 , ""stderr"" ) ) { VAR_73 = httpMakePath ( VAR_74 , VAR_75 -> configDir , VAR_76 ) ; } VAR_77 -> VAR_78 = httpCreateTrace ( VAR_79 -> VAR_80 ) ; if ( httpSetTraceLogFile ( VAR_81 -> VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) < 0 ) { return MPR_ERR_CANT_OPEN ; } httpSetTraceLevel ( VAR_88 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_5 VAR_11 ; TYPE_6 VAR_12 , VAR_13 , VAR_14 ; VAR_15 = VAR_16 -> VAR_17 ; VAR_18 = VAR_19 ; VAR_20 = 0 ; VAR_21 = 0 ; VAR_22 = 0 ; VAR_23 = VAR_24 ; VAR_25 = ""detail"" ; VAR_26 = 0 ; if ( VAR_27 -> VAR_28 -> VAR_29 & VAR_30 ) { METHOD_1 ( ""infoappwebconfig"" , 4 , ""Alreadytracing.IgnoringTraceLogdirective"" ) ; return 0 ; } for ( VAR_31 = METHOD_2 ( METHOD_3 ( VAR_32 ) , & VAR_33 ) ; VAR_34 ; VAR_35 = METHOD_4 ( VAR_36 , & VAR_37 ) ) { if ( ! VAR_38 ) { VAR_39 = METHOD_5 ( VAR_40 ) ; } else { VAR_41 = METHOD_6 ( VAR_42 , ""=\\t,"" , & VAR_43 ) ; VAR_44 = strim ( VAR_45 , ""\\""\'"" , MPR_TRIM_BOTH ) ; if ( smatch ( VAR_46 , ""anew"" ) ) { VAR_47 |= MPR_LOG_ANEW ; } else if ( smatch ( VAR_48 , ""backup"" ) ) { VAR_49 = atoi ( VAR_50 ) ; } else if ( smatch ( VAR_51 , ""format"" ) ) { VAR_52 = VAR_53 ; } else if ( smatch ( VAR_54 , ""level"" ) ) { VAR_55 = ( TYPE_7 ) stoi ( VAR_56 ) ; } else if ( smatch ( VAR_57 , ""size"" ) ) { VAR_58 = ( TYPE_8 ) getnum ( VAR_59 ) ; } else if ( smatch ( VAR_60 , ""formatter"" ) ) { VAR_61 = VAR_62 ; } else { METHOD_7 ( ""errorappwebconfig"" , 0 , ""UnknownTraceLogoption%s"" , VAR_63 ) ; } } } if ( VAR_64 < HTTP_TRACE_MIN_LOG_SIZE ) { VAR_65 = HTTP_TRACE_MIN_LOG_SIZE ; } if ( VAR_66 == 0 ) { METHOD_8 ( ""errorappwebconfig"" , 0 , ""MissingTraceLogfilename"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( VAR_67 ) { httpSetTraceFormatterName ( VAR_68 -> VAR_69 , VAR_70 ) ; } if ( ! smatch ( VAR_71 , ""stdout"" ) && ! smatch ( VAR_72 , ""stderr"" ) ) { VAR_73 = httpMakePath ( VAR_74 , VAR_75 -> configDir , VAR_76 ) ; } VAR_77 -> VAR_78 = httpCreateTrace ( VAR_79 -> VAR_80 ) ; if ( httpSetTraceLogFile ( VAR_81 -> VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) < 0 ) { return MPR_ERR_CANT_OPEN ; } httpSetTraceLevel ( VAR_88 ) ; return 0 ; }",141
142,"TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( """" ) ; METHOD_2 ( ""js(\'x\'+345).toUpperCase()"" , VAR_1 ) ; g_assert_cmpstr ( ""X345"" , == , VAR_2 -> VAR_3 ) ;  VAR_4 . VAR_5 . VAR_6 = ""Testuseragent"" ;  METHOD_3 ( ""jsUzbl.run(\'print@useragent\').toUpperCase();"" , VAR_7 ) ; g_assert_cmpstr ( ""TESTUSERAGENT"" , == , VAR_8 -> VAR_9 ) ; METHOD_4 ( VAR_10 , VAR_11 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( """" ) ; METHOD_2 ( ""js(\'x\'+345).toUpperCase()"" , VAR_1 ) ; g_assert_cmpstr ( ""X345"" , == , VAR_2 -> VAR_3 ) ; VAR_4 . VAR_5 . VAR_6 = ""Testuseragent"" ; METHOD_3 ( ""jsUzbl.run(\'print@useragent\').toUpperCase();"" , VAR_7 ) ; g_assert_cmpstr ( ""TESTUSERAGENT"" , == , VAR_8 -> VAR_9 ) ; METHOD_4 ( VAR_10 , VAR_11 ) ; }",142
143,"TYPE_0 STRUCT_OR_UNION_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_4 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 = 0 ; TYPE_5 TYPE_6 struct STRUCT_OR_UNION_5 VAR_6 ; METHOD_0 ( & VAR_7 , VAR_8 , sizeof ( * VAR_9 ) ) ; VAR_10 -> VAR_11 = 0 ; METHOD_1 ( ""ext4_map_blocks():inode%lu,flag%d,max_blocks%u,"" ""logicalblock%lu\\n"" , STRUCT_OR_UNION_6 -> VAR_12 , VAR_13 , VAR_14 -> VAR_15 , ( unsigned TYPE_7 ) VAR_16 -> VAR_17 ) ; if ( METHOD_2 ( VAR_18 -> VAR_19 > VAR_20 ) ) VAR_21 -> VAR_22 = VAR_23 ; if ( METHOD_3 ( VAR_24 -> VAR_25 >= VAR_26 ) ) return - VAR_27 ; if ( METHOD_4 ( STRUCT_OR_UNION_7 , VAR_28 -> VAR_29 , & VAR_30 ) ) { if ( METHOD_5 ( & VAR_31 ) || METHOD_6 ( & VAR_32 ) ) { VAR_33 -> VAR_34 = METHOD_7 ( & VAR_35 ) + VAR_36 -> VAR_37 - VAR_38 . VAR_39 ; VAR_40 -> VAR_41 |= METHOD_8 ( & VAR_42 ) ? VAR_43 : VAR_44 ; VAR_45 = VAR_46 . VAR_47 - ( VAR_48 -> VAR_49 - VAR_50 . VAR_51 ) ; if ( VAR_52 > VAR_53 -> VAR_54 ) VAR_55 = VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; } else if ( METHOD_9 ( & VAR_61 ) || METHOD_10 ( & VAR_62 ) ) { VAR_63 -> VAR_64 = 0 ; VAR_65 = VAR_66 . VAR_67 - ( VAR_68 -> VAR_69 - VAR_70 . VAR_71 ) ; if ( VAR_72 > VAR_73 -> VAR_74 ) VAR_75 = VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ; VAR_81 = 0 ; } else { METHOD_11 ( 1 ) ; } TYPE_8 TYPE_9 VAR_82 ( VAR_83 , STRUCT_OR_UNION_8 , VAR_84 , & VAR_85 , VAR_86 ) ; goto VAR_87 ; } METHOD_12 ( & METHOD_13 ( STRUCT_OR_UNION_9 ) -> VAR_88 ) ; if ( METHOD_14 ( STRUCT_OR_UNION_10 , VAR_89 ) ) { VAR_90 = METHOD_15 ( VAR_91 , STRUCT_OR_UNION_11 , VAR_92 , VAR_93 & VAR_94 ) ; } else { VAR_95 = METHOD_16 ( VAR_96 , STRUCT_OR_UNION_12 , VAR_97 , VAR_98 & VAR_99 ) ; } if ( VAR_100 > 0 ) { unsigned TYPE_10 VAR_101 ; if ( METHOD_17 ( VAR_102 != VAR_103 -> VAR_104 ) ) { METHOD_18 ( STRUCT_OR_UNION_13 -> VAR_105 , ""ESlenassertionfailedforinode"" ""%lu:retval%d!=map->m_len%d"" , STRUCT_OR_UNION_14 -> VAR_106 , VAR_107 , VAR_108 -> VAR_109 ) ; METHOD_19 ( 1 ) ; } VAR_110 = VAR_111 -> VAR_112 & VAR_113 ? VAR_114 : VAR_115 ; if ( ! ( VAR_116 & VAR_117 ) && ! ( VAR_118 & VAR_119 ) && METHOD_20 ( STRUCT_OR_UNION_15 , VAR_120 -> VAR_121 , VAR_122 -> VAR_123 + VAR_124 -> VAR_125 - 1 ) ) VAR_126 |= VAR_127 ; VAR_128 = METHOD_21 ( STRUCT_OR_UNION_16 , VAR_129 -> VAR_130 , VAR_131 -> VAR_132 , VAR_133 -> VAR_134 , VAR_135 ) ; if ( VAR_136 < 0 ) VAR_137 = VAR_138 ; } METHOD_22 ( ( & METHOD_23 ( STRUCT_OR_UNION_17 ) -> VAR_139 ) ) ; VAR_140 : if ( VAR_141 > 0 && VAR_142 -> VAR_143 & VAR_144 ) { VAR_145 = METHOD_24 ( STRUCT_OR_UNION_18 , VAR_146 ) ; if ( VAR_147 != 0 ) return VAR_148 ; } if ( ( VAR_149 & VAR_150 ) == 0 ) return VAR_151 ; if ( VAR_152 > 0 && VAR_153 -> VAR_154 & VAR_155 ) if ( ! ( VAR_156 & VAR_157 ) ) return VAR_158 ; VAR_159 -> VAR_160 &= ~ VAR_161 ; METHOD_25 ( & METHOD_26 ( STRUCT_OR_UNION_19 ) -> VAR_162 ) ; if ( METHOD_27 ( STRUCT_OR_UNION_20 , VAR_163 ) ) { VAR_164 = METHOD_28 ( VAR_165 , STRUCT_OR_UNION_21 , VAR_166 , VAR_167 ) ; } else { VAR_168 = METHOD_29 ( VAR_169 , STRUCT_OR_UNION_22 , VAR_170 , VAR_171 ) ; if ( VAR_172 > 0 && VAR_173 -> VAR_174 & VAR_175 ) { METHOD_30 ( STRUCT_OR_UNION_23 , VAR_176 ) ; } if ( ( VAR_177 > 0 ) && ( VAR_178 & VAR_179 ) ) METHOD_31 ( STRUCT_OR_UNION_24 , VAR_180 , 1 ) ; } if ( VAR_181 > 0 ) { unsigned TYPE_11 VAR_182 ; if ( METHOD_32 ( VAR_183 != VAR_184 -> VAR_185 ) ) { METHOD_33 ( STRUCT_OR_UNION_25 -> VAR_186 , ""ESlenassertionfailedforinode"" ""%lu:retval%d!=map->m_len%d"" , STRUCT_OR_UNION_26 -> VAR_187 , VAR_188 , VAR_189 -> VAR_190 ) ; METHOD_34 ( 1 ) ; } if ( VAR_191 & VAR_192 && VAR_193 -> VAR_194 & VAR_195 && VAR_196 -> VAR_197 & VAR_198 ) { VAR_199 = METHOD_35 ( STRUCT_OR_UNION_27 , VAR_200 -> VAR_201 , VAR_202 -> VAR_203 , VAR_204 -> VAR_205 ) ; if ( VAR_206 ) { VAR_207 = VAR_208 ; goto VAR_209 ; } } if ( ( VAR_210 & VAR_211 ) && METHOD_36 ( STRUCT_OR_UNION_28 , VAR_212 -> VAR_213 , & VAR_214 ) ) { if ( METHOD_37 ( & VAR_215 ) ) goto VAR_216 ; } VAR_217 = VAR_218 -> VAR_219 & VAR_220 ? VAR_221 : VAR_222 ; if ( ! ( VAR_223 & VAR_224 ) && ! ( VAR_225 & VAR_226 ) && METHOD_38 ( STRUCT_OR_UNION_29 , VAR_227 -> VAR_228 , VAR_229 -> VAR_230 + VAR_231 -> VAR_232 - 1 ) ) VAR_233 |= VAR_234 ; VAR_235 = METHOD_39 ( STRUCT_OR_UNION_30 , VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 -> VAR_241 , VAR_242 ) ; if ( VAR_243 < 0 ) { VAR_244 = VAR_245 ; goto VAR_246 ; } } VAR_247 : METHOD_40 ( ( & METHOD_41 ( STRUCT_OR_UNION_31 ) -> VAR_248 ) ) ; if ( VAR_249 > 0 && VAR_250 -> VAR_251 & VAR_252 ) { VAR_253 = METHOD_42 ( STRUCT_OR_UNION_32 , VAR_254 ) ; if ( VAR_255 != 0 ) return VAR_256 ;  }  return VAR_257 ; }","TYPE_0 STRUCT_OR_UNION_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_4 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 = 0 ; TYPE_5 TYPE_6 struct STRUCT_OR_UNION_5 VAR_6 ; METHOD_0 ( & VAR_7 , VAR_8 , sizeof ( * VAR_9 ) ) ; VAR_10 -> VAR_11 = 0 ; METHOD_1 ( ""ext4_map_blocks():inode%lu,flag%d,max_blocks%u,"" ""logicalblock%lu\\n"" , STRUCT_OR_UNION_6 -> VAR_12 , VAR_13 , VAR_14 -> VAR_15 , ( unsigned TYPE_7 ) VAR_16 -> VAR_17 ) ; if ( METHOD_2 ( VAR_18 -> VAR_19 > VAR_20 ) ) VAR_21 -> VAR_22 = VAR_23 ; if ( METHOD_3 ( VAR_24 -> VAR_25 >= VAR_26 ) ) return - VAR_27 ; if ( METHOD_4 ( STRUCT_OR_UNION_7 , VAR_28 -> VAR_29 , & VAR_30 ) ) { if ( METHOD_5 ( & VAR_31 ) || METHOD_6 ( & VAR_32 ) ) { VAR_33 -> VAR_34 = METHOD_7 ( & VAR_35 ) + VAR_36 -> VAR_37 - VAR_38 . VAR_39 ; VAR_40 -> VAR_41 |= METHOD_8 ( & VAR_42 ) ? VAR_43 : VAR_44 ; VAR_45 = VAR_46 . VAR_47 - ( VAR_48 -> VAR_49 - VAR_50 . VAR_51 ) ; if ( VAR_52 > VAR_53 -> VAR_54 ) VAR_55 = VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; } else if ( METHOD_9 ( & VAR_61 ) || METHOD_10 ( & VAR_62 ) ) { VAR_63 -> VAR_64 = 0 ; VAR_65 = VAR_66 . VAR_67 - ( VAR_68 -> VAR_69 - VAR_70 . VAR_71 ) ; if ( VAR_72 > VAR_73 -> VAR_74 ) VAR_75 = VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ; VAR_81 = 0 ; } else { METHOD_11 ( 1 ) ; } TYPE_8 TYPE_9 VAR_82 ( VAR_83 , STRUCT_OR_UNION_8 , VAR_84 , & VAR_85 , VAR_86 ) ; goto VAR_87 ; } METHOD_12 ( & METHOD_13 ( STRUCT_OR_UNION_9 ) -> VAR_88 ) ; if ( METHOD_14 ( STRUCT_OR_UNION_10 , VAR_89 ) ) { VAR_90 = METHOD_15 ( VAR_91 , STRUCT_OR_UNION_11 , VAR_92 , VAR_93 & VAR_94 ) ; } else { VAR_95 = METHOD_16 ( VAR_96 , STRUCT_OR_UNION_12 , VAR_97 , VAR_98 & VAR_99 ) ; } if ( VAR_100 > 0 ) { unsigned TYPE_10 VAR_101 ; if ( METHOD_17 ( VAR_102 != VAR_103 -> VAR_104 ) ) { METHOD_18 ( STRUCT_OR_UNION_13 -> VAR_105 , ""ESlenassertionfailedforinode"" ""%lu:retval%d!=map->m_len%d"" , STRUCT_OR_UNION_14 -> VAR_106 , VAR_107 , VAR_108 -> VAR_109 ) ; METHOD_19 ( 1 ) ; } VAR_110 = VAR_111 -> VAR_112 & VAR_113 ? VAR_114 : VAR_115 ; if ( ! ( VAR_116 & VAR_117 ) && ! ( VAR_118 & VAR_119 ) && METHOD_20 ( STRUCT_OR_UNION_15 , VAR_120 -> VAR_121 , VAR_122 -> VAR_123 + VAR_124 -> VAR_125 - 1 ) ) VAR_126 |= VAR_127 ; VAR_128 = METHOD_21 ( STRUCT_OR_UNION_16 , VAR_129 -> VAR_130 , VAR_131 -> VAR_132 , VAR_133 -> VAR_134 , VAR_135 ) ; if ( VAR_136 < 0 ) VAR_137 = VAR_138 ; } METHOD_22 ( ( & METHOD_23 ( STRUCT_OR_UNION_17 ) -> VAR_139 ) ) ; VAR_140 : if ( VAR_141 > 0 && VAR_142 -> VAR_143 & VAR_144 ) { VAR_145 = METHOD_24 ( STRUCT_OR_UNION_18 , VAR_146 ) ; if ( VAR_147 != 0 ) return VAR_148 ; } if ( ( VAR_149 & VAR_150 ) == 0 ) return VAR_151 ; if ( VAR_152 > 0 && VAR_153 -> VAR_154 & VAR_155 ) if ( ! ( VAR_156 & VAR_157 ) ) return VAR_158 ; VAR_159 -> VAR_160 &= ~ VAR_161 ; METHOD_25 ( & METHOD_26 ( STRUCT_OR_UNION_19 ) -> VAR_162 ) ; if ( METHOD_27 ( STRUCT_OR_UNION_20 , VAR_163 ) ) { VAR_164 = METHOD_28 ( VAR_165 , STRUCT_OR_UNION_21 , VAR_166 , VAR_167 ) ; } else { VAR_168 = METHOD_29 ( VAR_169 , STRUCT_OR_UNION_22 , VAR_170 , VAR_171 ) ; if ( VAR_172 > 0 && VAR_173 -> VAR_174 & VAR_175 ) { METHOD_30 ( STRUCT_OR_UNION_23 , VAR_176 ) ; } if ( ( VAR_177 > 0 ) && ( VAR_178 & VAR_179 ) ) METHOD_31 ( STRUCT_OR_UNION_24 , VAR_180 , 1 ) ; } if ( VAR_181 > 0 ) { unsigned TYPE_11 VAR_182 ; if ( METHOD_32 ( VAR_183 != VAR_184 -> VAR_185 ) ) { METHOD_33 ( STRUCT_OR_UNION_25 -> VAR_186 , ""ESlenassertionfailedforinode"" ""%lu:retval%d!=map->m_len%d"" , STRUCT_OR_UNION_26 -> VAR_187 , VAR_188 , VAR_189 -> VAR_190 ) ; METHOD_34 ( 1 ) ; } if ( VAR_191 & VAR_192 && VAR_193 -> VAR_194 & VAR_195 && VAR_196 -> VAR_197 & VAR_198 ) { VAR_199 = METHOD_35 ( STRUCT_OR_UNION_27 , VAR_200 -> VAR_201 , VAR_202 -> VAR_203 , VAR_204 -> VAR_205 ) ; if ( VAR_206 ) { VAR_207 = VAR_208 ; goto VAR_209 ; } } if ( ( VAR_210 & VAR_211 ) && METHOD_36 ( STRUCT_OR_UNION_28 , VAR_212 -> VAR_213 , & VAR_214 ) ) { if ( METHOD_37 ( & VAR_215 ) ) goto VAR_216 ; } VAR_217 = VAR_218 -> VAR_219 & VAR_220 ? VAR_221 : VAR_222 ; if ( ! ( VAR_223 & VAR_224 ) && ! ( VAR_225 & VAR_226 ) && METHOD_38 ( STRUCT_OR_UNION_29 , VAR_227 -> VAR_228 , VAR_229 -> VAR_230 + VAR_231 -> VAR_232 - 1 ) ) VAR_233 |= VAR_234 ; VAR_235 = METHOD_39 ( STRUCT_OR_UNION_30 , VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 -> VAR_241 , VAR_242 ) ; if ( VAR_243 < 0 ) { VAR_244 = VAR_245 ; goto VAR_246 ; } } VAR_247 : METHOD_40 ( ( & METHOD_41 ( STRUCT_OR_UNION_31 ) -> VAR_248 ) ) ; if ( VAR_249 > 0 && VAR_250 -> VAR_251 & VAR_252 ) { VAR_253 = METHOD_42 ( STRUCT_OR_UNION_32 , VAR_254 ) ; if ( VAR_255 != 0 ) return VAR_256 ; if ( VAR_254 -> VAR_251 & VAR_198 && ! ( VAR_254 -> VAR_251 & VAR_220 ) && ! ( VAR_223 & VAR_192 ) && ! METHOD_43 ( STRUCT_OR_UNION_32 ) && METHOD_44 ( STRUCT_OR_UNION_32 ) ) { VAR_256 = METHOD_45 ( VAR_169 , STRUCT_OR_UNION_32 ) ; if ( VAR_256 ) return VAR_256 ; } } return VAR_257 ; }",143
144,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; struct STRUCT_OR_UNION_0 { unsigned TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; } * VAR_10 = ( struct STRUCT_OR_UNION_1 * ) VAR_11 ; VAR_12 = & VAR_13 ; VAR_14 -> VAR_15 = VAR_16 ; VAR_17 -> VAR_18 = ( VAR_19 | VAR_20 | VAR_21 | VAR_22 | VAR_23 ) ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 & 0x43 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = METHOD_1 ( VAR_32 , VAR_33 ) ; VAR_34 = METHOD_2 ( VAR_35 ) + METHOD_3 ( VAR_36 , VAR_37 . VAR_38 ) ; VAR_39 = METHOD_4 ( VAR_40 ) ; VAR_41 = VAR_42 -> VAR_43 << 2 >> VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> VAR_54 = 4 * VAR_55 ;  VAR_56 = ( VAR_57 + 5 ) / 6 ;  VAR_58 = 2 * VAR_59 + 3 ; VAR_60 = ( VAR_61 * VAR_62 . VAR_63 + VAR_64 * VAR_65 . VAR_66 ) % VAR_67 ; VAR_68 = 1 ; if ( VAR_69 -> VAR_70 < 0x22 ) VAR_71 ++ ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 ; ++ VAR_75 ) { VAR_76 [ VAR_77 ] . VAR_78 = VAR_79 . VAR_80 ; VAR_81 [ VAR_82 ] . VAR_83 = VAR_84 . VAR_85 ; VAR_86 [ VAR_87 ] . VAR_88 = 0 ; VAR_89 [ VAR_90 ] . VAR_91 = VAR_92 ; } for ( VAR_93 = 1 ; VAR_94 <= VAR_95 ; ++ VAR_96 ) { VAR_97 [ VAR_98 ] . VAR_99 = VAR_100 ; VAR_101 = ( VAR_102 + VAR_103 ) % VAR_104 ; if ( VAR_105 [ VAR_106 ] . VAR_107 ) { ++ VAR_108 ; if ( VAR_109 >= VAR_110 ) { VAR_111 -= VAR_112 ; while ( VAR_113 [ VAR_114 ] . VAR_115 ) ++ VAR_116 ; } } } if ( VAR_117 -> VAR_118 & VAR_119 ) { for ( VAR_120 = 0 ; VAR_121 < VAR_122 ; VAR_123 ++ ) VAR_124 [ VAR_125 ] . VAR_126 += METHOD_5 ( VAR_127 ) - 1 ; } }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; struct STRUCT_OR_UNION_0 { unsigned TYPE_7 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; } * VAR_10 = ( struct STRUCT_OR_UNION_1 * ) VAR_11 ; VAR_12 = & VAR_13 ; VAR_14 -> VAR_15 = VAR_16 ; VAR_17 -> VAR_18 = ( VAR_19 | VAR_20 | VAR_21 | VAR_22 | VAR_23 ) ; VAR_24 -> VAR_25 = VAR_26 -> VAR_27 & 0x43 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = METHOD_1 ( VAR_32 , VAR_33 ) ; VAR_34 = METHOD_2 ( VAR_35 ) + METHOD_3 ( VAR_36 , VAR_37 . VAR_38 ) ; VAR_39 = METHOD_4 ( VAR_40 ) ; VAR_41 = VAR_42 -> VAR_43 << 2 >> VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> VAR_54 = 4 * VAR_55 ; VAR_56 = ( VAR_57 + 5 ) / 6 ; VAR_58 = 2 * VAR_59 + 3 ; VAR_60 = ( VAR_61 * VAR_62 . VAR_63 + VAR_64 * VAR_65 . VAR_66 ) % VAR_67 ; VAR_68 = 1 ; if ( VAR_69 -> VAR_70 < 0x22 ) VAR_71 ++ ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 ; ++ VAR_75 ) { VAR_76 [ VAR_77 ] . VAR_78 = VAR_79 . VAR_80 ; VAR_81 [ VAR_82 ] . VAR_83 = VAR_84 . VAR_85 ; VAR_86 [ VAR_87 ] . VAR_88 = 0 ; VAR_89 [ VAR_90 ] . VAR_91 = VAR_92 ; } for ( VAR_93 = 1 ; VAR_94 <= VAR_95 ; ++ VAR_96 ) { VAR_97 [ VAR_98 ] . VAR_99 = VAR_100 ; VAR_101 = ( VAR_102 + VAR_103 ) % VAR_104 ; if ( VAR_105 [ VAR_106 ] . VAR_107 ) { ++ VAR_108 ; if ( VAR_109 >= VAR_110 ) { VAR_111 -= VAR_112 ; while ( VAR_113 [ VAR_114 ] . VAR_115 ) ++ VAR_116 ; } } } if ( VAR_117 -> VAR_118 & VAR_119 ) { for ( VAR_120 = 0 ; VAR_121 < VAR_122 ; VAR_123 ++ ) VAR_124 [ VAR_125 ] . VAR_126 += METHOD_5 ( VAR_127 ) - 1 ; } }",144
145,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ;  if ( VAR_11 == 0 && VAR_12 == 0 ) {  return ; } VAR_13 = 1 << VAR_14 ; VAR_15 = VAR_16 ; for ( VAR_17 = 0 ; VAR_18 < METHOD_1 ( VAR_19 ) ; ++ VAR_20 ) { for ( VAR_21 = 0 ; VAR_22 < METHOD_2 ( VAR_23 ) ; ++ VAR_24 ) { VAR_25 = METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 >= VAR_32 ) { VAR_33 >>= VAR_34 ; VAR_35 = ( VAR_36 < 0 ) ? ( - VAR_37 ) : VAR_38 ; METHOD_5 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else { VAR_43 <<= VAR_44 ;  VAR_45 = ( 1 << VAR_46 ) - 1 ;  if ( VAR_47 & ( ~ VAR_48 ) ) { if ( ! VAR_49 ) { METHOD_6 ( ""warning:possiblycorruptcodestream\\n"" ) ; VAR_50 = VAR_51 ; } VAR_52 &= VAR_53 ; } VAR_54 = ( VAR_55 < 0 ) ? ( - VAR_56 ) : VAR_57 ; METHOD_7 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 ) ; } } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; if ( VAR_11 == 0 && VAR_12 == 0 ) { return ; } VAR_13 = 1 << VAR_14 ; VAR_15 = VAR_16 ; for ( VAR_17 = 0 ; VAR_18 < METHOD_1 ( VAR_19 ) ; ++ VAR_20 ) { for ( VAR_21 = 0 ; VAR_22 < METHOD_2 ( VAR_23 ) ; ++ VAR_24 ) { VAR_25 = METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 >= VAR_32 ) { VAR_33 >>= VAR_34 ; VAR_35 = ( VAR_36 < 0 ) ? ( - VAR_37 ) : VAR_38 ; METHOD_5 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else { VAR_43 <<= VAR_44 ; VAR_45 = ( 1 << VAR_46 ) - 1 ; if ( VAR_47 & ( ~ VAR_48 ) ) { if ( ! VAR_49 ) { METHOD_6 ( ""warning:possiblycorruptcodestream\\n"" ) ; VAR_50 = VAR_51 ; } VAR_52 &= VAR_53 ; } VAR_54 = ( VAR_55 < 0 ) ? ( - VAR_56 ) : VAR_57 ; METHOD_7 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 ) ; } } } }",145
146,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_3 ( VAR_5 ) ; TYPE_2 VAR_6 = VAR_7 -> VAR_8 ; METHOD_4 ( METHOD_5 ( VAR_9 ) , VAR_10 , METHOD_6 ( VAR_11 ) , VAR_12 -> VAR_13 , VAR_14 , METHOD_7 ( VAR_15 ) , VAR_16 ) ; if ( VAR_17 -> VAR_18 . VAR_19 ) return 0 ; if ( METHOD_8 ( VAR_20 -> VAR_21 ) ) { METHOD_9 ( ""%sfailedvmentry%x\\n"" , VAR_22 , METHOD_10 ( VAR_23 ) ) ; return 1 ; } switch ( VAR_24 ) { case VAR_25 : if ( ! METHOD_11 ( VAR_26 ) ) return 0 ; else if ( METHOD_12 ( VAR_27 ) ) return VAR_28 ; else if ( METHOD_13 ( VAR_29 ) && ! ( STRUCT_OR_UNION_4 -> VAR_30 & VAR_31 ) ) return 0 ; return STRUCT_OR_UNION_5 -> VAR_32 & ( 1u << ( VAR_33 & VAR_34 ) ) ; case VAR_35 : return 0 ; case VAR_36 : return 1 ; case VAR_37 : return METHOD_14 ( STRUCT_OR_UNION_6 , VAR_38 ) ; case VAR_39 : return METHOD_15 ( STRUCT_OR_UNION_7 , VAR_40 ) ; case VAR_41 : return 1 ; case VAR_42 : if ( METHOD_16 ( VAR_43 , VAR_44 ) == 0xa ) return 0 ; return 1 ; case VAR_45 : return METHOD_17 ( STRUCT_OR_UNION_8 , VAR_46 ) ; case VAR_47 : return 1 ; case VAR_48 : return METHOD_18 ( STRUCT_OR_UNION_9 , VAR_49 ) ; case VAR_50 : return METHOD_19 ( STRUCT_OR_UNION_10 , VAR_51 ) ; case VAR_52 : return METHOD_20 ( STRUCT_OR_UNION_11 , VAR_53 ) ; case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : case VAR_59 : case VAR_60 : case VAR_61 : case VAR_62 : case VAR_63 :  case VAR_64 :  return 1 ; case VAR_65 : return METHOD_21 ( VAR_66 , STRUCT_OR_UNION_12 ) ; case VAR_67 : return METHOD_22 ( STRUCT_OR_UNION_13 , VAR_68 ) ; case VAR_69 : return METHOD_23 ( VAR_70 , STRUCT_OR_UNION_14 ) ; case VAR_71 : case VAR_72 : return METHOD_24 ( VAR_73 , STRUCT_OR_UNION_15 , VAR_74 ) ; case VAR_75 : return 1 ; case VAR_76 : return METHOD_25 ( STRUCT_OR_UNION_16 , VAR_77 ) ; case VAR_78 : return METHOD_26 ( STRUCT_OR_UNION_17 , VAR_79 ) ; case VAR_80 : return METHOD_27 ( STRUCT_OR_UNION_18 , VAR_81 ) || METHOD_28 ( STRUCT_OR_UNION_19 , VAR_82 ) ; case VAR_83 : return 0 ; case VAR_84 : return METHOD_29 ( STRUCT_OR_UNION_20 , VAR_85 ) ; case VAR_86 : return METHOD_30 ( STRUCT_OR_UNION_21 , VAR_87 ) ; case VAR_88 : return 0 ; case VAR_89 : return 0 ; case VAR_90 : return METHOD_31 ( STRUCT_OR_UNION_22 , VAR_91 ) ; case VAR_92 : return 1 ; default : return 1 ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_3 ( VAR_5 ) ; TYPE_2 VAR_6 = VAR_7 -> VAR_8 ; METHOD_4 ( METHOD_5 ( VAR_9 ) , VAR_10 , METHOD_6 ( VAR_11 ) , VAR_12 -> VAR_13 , VAR_14 , METHOD_7 ( VAR_15 ) , VAR_16 ) ; if ( VAR_17 -> VAR_18 . VAR_19 ) return 0 ; if ( METHOD_8 ( VAR_20 -> VAR_21 ) ) { METHOD_9 ( ""%sfailedvmentry%x\\n"" , VAR_22 , METHOD_10 ( VAR_23 ) ) ; return 1 ; } switch ( VAR_24 ) { case VAR_25 : if ( ! METHOD_11 ( VAR_26 ) ) return 0 ; else if ( METHOD_12 ( VAR_27 ) ) return VAR_28 ; else if ( METHOD_13 ( VAR_29 ) && ! ( STRUCT_OR_UNION_4 -> VAR_30 & VAR_31 ) ) return 0 ; return STRUCT_OR_UNION_5 -> VAR_32 & ( 1u << ( VAR_33 & VAR_34 ) ) ; case VAR_35 : return 0 ; case VAR_36 : return 1 ; case VAR_37 : return METHOD_14 ( STRUCT_OR_UNION_6 , VAR_38 ) ; case VAR_39 : return METHOD_15 ( STRUCT_OR_UNION_7 , VAR_40 ) ; case VAR_41 : return 1 ; case VAR_42 : if ( METHOD_16 ( VAR_43 , VAR_44 ) == 0xa ) return 0 ; return 1 ; case VAR_45 : return METHOD_17 ( STRUCT_OR_UNION_8 , VAR_46 ) ; case VAR_47 : return 1 ; case VAR_48 : return METHOD_18 ( STRUCT_OR_UNION_9 , VAR_49 ) ; case VAR_50 : return METHOD_19 ( STRUCT_OR_UNION_10 , VAR_51 ) ; case VAR_52 : return METHOD_20 ( STRUCT_OR_UNION_11 , VAR_53 ) ; case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : case VAR_59 : case VAR_60 : case VAR_61 : case VAR_62 : case VAR_63 : case VAR_64 : case VAR_93 : return 1 ; case VAR_65 : return METHOD_21 ( VAR_66 , STRUCT_OR_UNION_12 ) ; case VAR_67 : return METHOD_22 ( STRUCT_OR_UNION_13 , VAR_68 ) ; case VAR_69 : return METHOD_23 ( VAR_70 , STRUCT_OR_UNION_14 ) ; case VAR_71 : case VAR_72 : return METHOD_24 ( VAR_73 , STRUCT_OR_UNION_15 , VAR_74 ) ; case VAR_75 : return 1 ; case VAR_76 : return METHOD_25 ( STRUCT_OR_UNION_16 , VAR_77 ) ; case VAR_78 : return METHOD_26 ( STRUCT_OR_UNION_17 , VAR_79 ) ; case VAR_80 : return METHOD_27 ( STRUCT_OR_UNION_18 , VAR_81 ) || METHOD_28 ( STRUCT_OR_UNION_19 , VAR_82 ) ; case VAR_83 : return 0 ; case VAR_84 : return METHOD_29 ( STRUCT_OR_UNION_20 , VAR_85 ) ; case VAR_86 : return METHOD_30 ( STRUCT_OR_UNION_21 , VAR_87 ) ; case VAR_88 : return 0 ; case VAR_89 : return 0 ; case VAR_90 : return METHOD_31 ( STRUCT_OR_UNION_22 , VAR_91 ) ; case VAR_92 : return 1 ; default : return 1 ; } }",146
147,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 -> STRUCT_OR_UNION_3 ) ;  struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 -> STRUCT_OR_UNION_5 ;  if ( VAR_7 -> STRUCT_OR_UNION_6 != VAR_8 || VAR_9 -> VAR_10 < VAR_11 ) return 1 ; if ( VAR_12 -> VAR_13 == VAR_14 && ! VAR_15 -> VAR_16 . VAR_17 ) return 1 ; return VAR_18 -> METHOD_2 ( VAR_19 , VAR_20 ) >= 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = METHOD_1 ( VAR_3 -> STRUCT_OR_UNION_3 ) ; struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 -> STRUCT_OR_UNION_5 ; if ( VAR_7 -> STRUCT_OR_UNION_6 != VAR_8 || VAR_9 -> VAR_10 < VAR_11 ) return 1 ; if ( VAR_12 -> VAR_13 == VAR_14 && ! VAR_15 -> VAR_16 . VAR_17 ) return 1 ; return VAR_18 -> METHOD_2 ( VAR_19 , VAR_20 ) >= 0 ; }",147
148,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; TYPE_2 VAR_3 ;  TYPE_3 VAR_4 = 0 ;  TYPE_4 VAR_5 = 1 ; TYPE_5 VAR_6 = 0 ; unsigned TYPE_6 VAR_7 = 0 ; TYPE_7 VAR_8 = 0 ; unsigned TYPE_8 * VAR_9 ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 * VAR_12 = METHOD_1 ( VAR_13 , 1 ) ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 ) ? 0 : 1 ; VAR_17 = METHOD_3 ( VAR_18 -> VAR_19 , 4 ) ;  VAR_20 = METHOD_4 ( VAR_21 -> VAR_22 ) ;  if ( VAR_23 ) { VAR_24 = METHOD_5 ( VAR_25 , & VAR_26 , & VAR_27 ) ; } else { VAR_28 = METHOD_6 ( VAR_29 -> VAR_30 , & VAR_31 , 1 ) ; } if ( VAR_32 == VAR_33 ) { unsigned TYPE_12 VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 ; VAR_39 = ( unsigned TYPE_13 ) VAR_40 ; VAR_41 = VAR_42 >> ( VAR_43 - 1 ) ; VAR_44 = VAR_45 & 0xf ; if ( VAR_46 ) { VAR_47 = METHOD_7 ( VAR_48 , & VAR_49 , & VAR_50 ) ; } else { VAR_51 = METHOD_8 ( VAR_52 -> VAR_53 , & VAR_54 , 1 ) ; } if ( VAR_55 == VAR_56 ) { VAR_57 = ( unsigned TYPE_14 ) VAR_58 ; VAR_59 = VAR_60 >> ( VAR_61 - 1 ) ; VAR_62 = VAR_63 & 0x7f ; VAR_64 = VAR_65 ; if ( VAR_66 == 126 ) { VAR_67 = 2 ; if ( VAR_68 ) { VAR_69 = METHOD_9 ( VAR_70 , ( TYPE_15 * ) & VAR_71 , & VAR_72 ) ; } else { VAR_73 = METHOD_10 ( VAR_74 -> VAR_75 , ( TYPE_16 * ) & VAR_76 , 2 ) ; } VAR_77 = METHOD_11 ( VAR_78 ) ; if ( VAR_79 == VAR_80 ) { VAR_81 = VAR_82 ; } else { return 0 ; } } if ( VAR_83 == 127 ) { VAR_84 = 8 ; if ( VAR_85 ) { VAR_86 = METHOD_12 ( VAR_87 , ( TYPE_17 * ) & VAR_88 , & VAR_89 ) ; } else { VAR_90 = METHOD_13 ( VAR_91 -> VAR_92 , ( TYPE_18 * ) & VAR_93 , 8 ) ; } if ( VAR_94 == VAR_95 ) { VAR_96 = METHOD_14 ( & VAR_97 ) ; } else { return 0 ; } } ap_log_rerror ( VAR_98 , VAR_99 , 0 , VAR_100 , ""Websocket:Reading%"" APR_SIZE_T_FMT ""(%s)bytes,maskingis%s.%s"" , VAR_101 , ( VAR_102 >= 126 ) ? ""extrapayload"" : ""noextrapayload"" , VAR_103 ? ""on"" : ""off"" , VAR_104 ? ""Thisisafinalframe"" : ""moretofollow"" ) ; if ( VAR_105 ) { VAR_106 = 4 ; if ( VAR_107 ) { VAR_108 = METHOD_15 ( VAR_109 , ( TYPE_19 * ) VAR_110 , & VAR_111 ) ; } else { VAR_112 = METHOD_16 ( VAR_113 -> VAR_114 , ( TYPE_20 * ) VAR_115 , 4 ) ; } if ( VAR_116 != VAR_117 ) { return 0 ; } } if ( VAR_118 < ( VAR_119 * 1024 ) && VAR_120 > 0 ) { TYPE_21 VAR_121 = VAR_122 ; TYPE_22 VAR_123 ; TYPE_23 VAR_124 = 0 ; TYPE_24 * VAR_125 = METHOD_17 ( VAR_126 -> VAR_127 , VAR_128 + 1 ) ; VAR_129 [ VAR_130 ] = 0 ; if ( VAR_131 ) { while ( VAR_132 > 0 ) { VAR_133 = VAR_134 ; VAR_135 = METHOD_18 ( VAR_136 , VAR_137 + VAR_138 , & VAR_139 ) ; if ( VAR_140 > 0 ) { VAR_141 -= VAR_142 ; VAR_143 += VAR_144 ; } } ap_log_rerror ( VAR_145 , VAR_146 , 0 , VAR_147 , ""Websocket:Framecontained%"" APR_OFF_T_FMT ""bytes,pushedtoLuastack"" , VAR_148 ) ; } else { VAR_149 = METHOD_19 ( VAR_150 -> VAR_151 , VAR_152 , VAR_153 ) ; ap_log_rerror ( VAR_154 , VAR_155 , 0 , VAR_156 , ""Websocket:SSLFramecontained%"" APR_SIZE_T_FMT ""bytes,"" ""pushedtoLuastack"" , VAR_157 ) ; } if ( VAR_158 ) { for ( VAR_159 = 0 ; VAR_160 < VAR_161 ; VAR_162 ++ ) { VAR_163 [ VAR_164 ] ^= VAR_165 [ VAR_166 % 4 ] ; } } METHOD_20 ( VAR_167 , VAR_168 , ( TYPE_25 ) VAR_169 ) ; METHOD_21 ( VAR_170 , VAR_171 ) ; return 2 ; } if ( VAR_172 == 0x09 ) { TYPE_26 VAR_173 [ 2 ] ; VAR_174 = 2 ; VAR_175 [ 0 ] = 0x8A ; VAR_176 [ 1 ] = 0 ; METHOD_22 ( VAR_177 , VAR_178 , & VAR_179 ) ;  METHOD_23 ( VAR_180 ) ;  } } } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; TYPE_4 VAR_5 = 1 ; TYPE_5 VAR_6 = 0 ; unsigned TYPE_6 VAR_7 = 0 ; TYPE_7 VAR_8 = 0 ; unsigned TYPE_8 * VAR_9 ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 * VAR_12 = METHOD_1 ( VAR_13 , 1 ) ; VAR_14 = METHOD_2 ( VAR_15 -> VAR_16 ) ? 0 : 1 ; VAR_17 = METHOD_3 ( VAR_18 -> VAR_19 , 4 ) ; VAR_20 = METHOD_4 ( VAR_21 -> VAR_22 ) ; if ( VAR_23 ) { VAR_24 = METHOD_5 ( VAR_25 , & VAR_26 , & VAR_27 ) ; } else { VAR_28 = METHOD_6 ( VAR_29 -> VAR_30 , & VAR_31 , 1 ) ; } if ( VAR_32 == VAR_33 ) { unsigned TYPE_12 VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 ; VAR_39 = ( unsigned TYPE_13 ) VAR_40 ; VAR_41 = VAR_42 >> ( VAR_43 - 1 ) ; VAR_44 = VAR_45 & 0xf ; if ( VAR_46 ) { VAR_47 = METHOD_7 ( VAR_48 , & VAR_49 , & VAR_50 ) ; } else { VAR_51 = METHOD_8 ( VAR_52 -> VAR_53 , & VAR_54 , 1 ) ; } if ( VAR_55 == VAR_56 ) { VAR_57 = ( unsigned TYPE_14 ) VAR_58 ; VAR_59 = VAR_60 >> ( VAR_61 - 1 ) ; VAR_62 = VAR_63 & 0x7f ; VAR_64 = VAR_65 ; if ( VAR_66 == 126 ) { VAR_67 = 2 ; if ( VAR_68 ) { VAR_69 = METHOD_9 ( VAR_70 , ( TYPE_15 * ) & VAR_71 , & VAR_72 ) ; } else { VAR_73 = METHOD_10 ( VAR_74 -> VAR_75 , ( TYPE_16 * ) & VAR_76 , 2 ) ; } VAR_77 = METHOD_11 ( VAR_78 ) ; if ( VAR_79 == VAR_80 ) { VAR_81 = VAR_82 ; } else { return 0 ; } } if ( VAR_83 == 127 ) { VAR_84 = 8 ; if ( VAR_85 ) { VAR_86 = METHOD_12 ( VAR_87 , ( TYPE_17 * ) & VAR_88 , & VAR_89 ) ; } else { VAR_90 = METHOD_13 ( VAR_91 -> VAR_92 , ( TYPE_18 * ) & VAR_93 , 8 ) ; } if ( VAR_94 == VAR_95 ) { VAR_96 = METHOD_14 ( & VAR_97 ) ; } else { return 0 ; } } ap_log_rerror ( VAR_98 , VAR_99 , 0 , VAR_100 , ""Websocket:Reading%"" APR_SIZE_T_FMT ""(%s)bytes,maskingis%s.%s"" , VAR_101 , ( VAR_102 >= 126 ) ? ""extrapayload"" : ""noextrapayload"" , VAR_103 ? ""on"" : ""off"" , VAR_104 ? ""Thisisafinalframe"" : ""moretofollow"" ) ; if ( VAR_105 ) { VAR_106 = 4 ; if ( VAR_107 ) { VAR_108 = METHOD_15 ( VAR_109 , ( TYPE_19 * ) VAR_110 , & VAR_111 ) ; } else { VAR_112 = METHOD_16 ( VAR_113 -> VAR_114 , ( TYPE_20 * ) VAR_115 , 4 ) ; } if ( VAR_116 != VAR_117 ) { return 0 ; } } if ( VAR_118 < ( VAR_119 * 1024 ) && VAR_120 > 0 ) { TYPE_21 VAR_121 = VAR_122 ; TYPE_22 VAR_123 ; TYPE_23 VAR_124 = 0 ; TYPE_24 * VAR_125 = METHOD_17 ( VAR_126 -> VAR_127 , VAR_128 + 1 ) ; VAR_129 [ VAR_130 ] = 0 ; if ( VAR_131 ) { while ( VAR_132 > 0 ) { VAR_133 = VAR_134 ; VAR_135 = METHOD_18 ( VAR_136 , VAR_137 + VAR_138 , & VAR_139 ) ; if ( VAR_140 > 0 ) { VAR_141 -= VAR_142 ; VAR_143 += VAR_144 ; } } ap_log_rerror ( VAR_145 , VAR_146 , 0 , VAR_147 , ""Websocket:Framecontained%"" APR_OFF_T_FMT ""bytes,pushedtoLuastack"" , VAR_148 ) ; } else { VAR_149 = METHOD_19 ( VAR_150 -> VAR_151 , VAR_152 , VAR_153 ) ; ap_log_rerror ( VAR_154 , VAR_155 , 0 , VAR_156 , ""Websocket:SSLFramecontained%"" APR_SIZE_T_FMT ""bytes,"" ""pushedtoLuastack"" , VAR_157 ) ; } if ( VAR_158 ) { for ( VAR_159 = 0 ; VAR_160 < VAR_161 ; VAR_162 ++ ) { VAR_163 [ VAR_164 ] ^= VAR_165 [ VAR_166 % 4 ] ; } } METHOD_20 ( VAR_167 , VAR_168 , ( TYPE_25 ) VAR_169 ) ; METHOD_21 ( VAR_170 , VAR_171 ) ; return 2 ; } if ( VAR_172 == 0x09 ) { TYPE_26 VAR_173 [ 2 ] ; VAR_174 = 2 ; VAR_175 [ 0 ] = 0x8A ; VAR_176 [ 1 ] = 0 ; METHOD_22 ( VAR_177 , VAR_178 , & VAR_179 ) ; VAR_181 = 1 ; } } } } return 0 ; }",148
149,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { struct STRUCT_OR_UNION_4 * VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 , * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_7 * VAR_10 = VAR_11 -> VAR_12 ; struct STRUCT_OR_UNION_8 * VAR_13 ; TYPE_0 VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 ) ; if ( METHOD_2 ( VAR_17 ) ) return VAR_18 ; METHOD_3 ( & VAR_19 ) ; VAR_20 = VAR_21 | VAR_22 ; if ( VAR_23 != VAR_24 -> VAR_25 )  VAR_26 |= VAR_27 ;  VAR_28 = METHOD_4 ( VAR_29 , VAR_30 -> VAR_31 . VAR_32 , VAR_33 ) ; if ( METHOD_5 ( VAR_34 ) ) { METHOD_6 ( & VAR_35 ) ; METHOD_7 ( VAR_36 ) ; return METHOD_8 ( VAR_37 ) ; } VAR_38 -> VAR_39 = VAR_40 ; METHOD_9 ( & VAR_41 ) ; METHOD_10 ( & VAR_42 -> VAR_43 , & VAR_44 -> VAR_45 ) ; METHOD_11 ( & VAR_46 ) ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 ; while ( VAR_51 ) { VAR_52 -> VAR_53 = VAR_54 ; if ( VAR_55 ) { if ( & VAR_56 -> VAR_57 == VAR_58 -> VAR_59 . VAR_60 ) { VAR_61 -> VAR_62 . VAR_63 = METHOD_12 ( & VAR_64 -> VAR_65 ) ; VAR_66 = & VAR_67 -> VAR_68 ; } if ( & VAR_69 -> VAR_70 == VAR_71 -> VAR_72 . VAR_73 ) { VAR_74 -> VAR_75 . VAR_76 = METHOD_13 ( & VAR_77 -> VAR_78 ) ; VAR_79 = & VAR_80 -> VAR_81 ; } } VAR_82 = METHOD_14 ( VAR_83 , VAR_84 ) ; VAR_85 = METHOD_15 ( VAR_86 , VAR_87 ) ; } METHOD_16 ( & VAR_88 ) ; if ( VAR_89 ) METHOD_17 ( VAR_90 ) ; if ( VAR_91 ) METHOD_18 ( VAR_92 ) ; return VAR_93 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { struct STRUCT_OR_UNION_4 * VAR_3 ; struct STRUCT_OR_UNION_5 * VAR_4 = VAR_5 , * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_7 * VAR_10 = VAR_11 -> VAR_12 ; struct STRUCT_OR_UNION_8 * VAR_13 ; TYPE_0 VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 ) ; if ( METHOD_2 ( VAR_17 ) ) return VAR_18 ; METHOD_3 ( & VAR_19 ) ; VAR_20 = VAR_21 | VAR_22 ; if ( VAR_23 != VAR_24 -> VAR_25 ) VAR_26 |= VAR_27 ; VAR_28 = METHOD_4 ( VAR_29 , VAR_30 -> VAR_31 . VAR_32 , VAR_33 ) ; if ( METHOD_5 ( VAR_34 ) ) { METHOD_6 ( & VAR_35 ) ; METHOD_7 ( VAR_36 ) ; return METHOD_8 ( VAR_37 ) ; } VAR_38 -> VAR_39 = VAR_40 ; METHOD_9 ( & VAR_41 ) ; METHOD_10 ( & VAR_42 -> VAR_43 , & VAR_44 -> VAR_45 ) ; METHOD_11 ( & VAR_46 ) ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 ; while ( VAR_51 ) { VAR_52 -> VAR_53 = VAR_54 ; if ( VAR_55 ) { if ( & VAR_56 -> VAR_57 == VAR_58 -> VAR_59 . VAR_60 ) { VAR_61 -> VAR_62 . VAR_63 = METHOD_12 ( & VAR_64 -> VAR_65 ) ; VAR_66 = & VAR_67 -> VAR_68 ; } if ( & VAR_69 -> VAR_70 == VAR_71 -> VAR_72 . VAR_73 ) { VAR_74 -> VAR_75 . VAR_76 = METHOD_13 ( & VAR_77 -> VAR_78 ) ; VAR_79 = & VAR_80 -> VAR_81 ; } } VAR_82 = METHOD_14 ( VAR_83 , VAR_84 ) ; VAR_85 = METHOD_15 ( VAR_86 , VAR_87 ) ; } METHOD_16 ( & VAR_88 ) ; if ( VAR_89 ) METHOD_17 ( VAR_90 ) ; if ( VAR_91 ) METHOD_18 ( VAR_92 ) ; return VAR_93 ; }",149
150,TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  {  METHOD_1 ( VAR_1 -> VAR_2 . VAR_3 ) ; METHOD_2 ( VAR_4 ) ; },TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 -> VAR_2 . VAR_3 ) ; METHOD_2 ( VAR_4 ) ; },150
151,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 = & METHOD_1 ( STRUCT_OR_UNION_2 ) ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 ; VAR_7 = METHOD_2 ( VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( ) ; else METHOD_4 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; ++ VAR_14 ) { VAR_15 = VAR_16 -> VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_5 ( VAR_20 ) ; if ( ( TYPE_5 ) VAR_21 < 0 ) { if ( VAR_22 ) { VAR_23 = 1 ;  METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ;  } else { METHOD_7 ( VAR_28 , 0 ) ; } } } METHOD_8 ( METHOD_9 ( ) | VAR_29 ) ; METHOD_10 ( VAR_30 , VAR_31 | VAR_32 ) ; METHOD_11 ( ) ; if ( VAR_33 ) METHOD_12 ( ) ; else METHOD_13 ( ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 = & METHOD_1 ( STRUCT_OR_UNION_2 ) ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 ; VAR_7 = METHOD_2 ( VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( ) ; else METHOD_4 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; ++ VAR_14 ) { VAR_15 = VAR_16 -> VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_5 ( VAR_20 ) ; if ( ( TYPE_5 ) VAR_21 < 0 ) { if ( VAR_22 ) { VAR_23 = 1 ; METHOD_6 ( VAR_24 , VAR_25 , VAR_26 ) ; } else { METHOD_7 ( VAR_28 , 0 ) ; } } } METHOD_8 ( METHOD_9 ( ) | VAR_29 ) ; METHOD_10 ( VAR_30 , VAR_31 | VAR_32 ) ; METHOD_11 ( ) ; if ( VAR_33 ) METHOD_12 ( ) ; else METHOD_13 ( ) ; }",151
152,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 , VAR_10 ; unsigned TYPE_10 * VAR_11 ; METHOD_1 ( VAR_12 != ( const TYPE_11 * ) VAR_13 ) ; METHOD_2 ( VAR_14 -> VAR_15 == VAR_16 ) ; if ( VAR_17 -> VAR_18 != VAR_19 ) ( TYPE_12 ) METHOD_3 ( VAR_20 , METHOD_4 ( ) , ""%s"" , VAR_21 -> VAR_22 ) ; METHOD_5 ( VAR_23 != ( TYPE_13 * ) VAR_24 ) ; METHOD_6 ( VAR_25 -> VAR_26 == VAR_27 ) ; VAR_28 = METHOD_7 ( VAR_29 ) ; if ( ( VAR_30 -> VAR_31 == 0 ) || ( VAR_32 -> VAR_33 == 0 ) ) METHOD_8 ( VAR_34 , ""MustSpecifyImageSize"" ) ; VAR_35 = METHOD_9 ( VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; if ( VAR_40 == VAR_41 ) { VAR_42 = METHOD_10 ( VAR_43 ) ; return ( ( TYPE_14 * ) VAR_44 ) ; } if ( METHOD_11 ( VAR_45 , ( TYPE_15 ) VAR_46 -> VAR_47 ) == VAR_48 ) METHOD_12 ( VAR_49 , VAR_50 , ""UnexpectedEndOfFile"" , VAR_51 -> VAR_52 ) ; METHOD_13 ( VAR_53 , VAR_54 ) ; VAR_55 = METHOD_14 ( VAR_56 , VAR_57 -> VAR_58 . VAR_59 , 1 , VAR_60 , VAR_61 ) ; ( TYPE_16 ) METHOD_15 ( VAR_62 , VAR_63 ) ; VAR_64 = VAR_65 ; VAR_66 = METHOD_16 ( VAR_67 , VAR_68 ) ; if ( VAR_69 == ( TYPE_17 * ) VAR_70 ) METHOD_17 ( VAR_71 , ""MemoryAllocationFailed"" ) ; VAR_72 = METHOD_18 ( VAR_73 ) ; if ( VAR_74 -> VAR_75 != 0 ) while ( VAR_76 -> VAR_77 < VAR_78 -> VAR_79 ) { VAR_80 -> VAR_81 ++ ; VAR_82 = METHOD_19 ( VAR_83 , VAR_84 , VAR_85 ) ; for ( VAR_86 = 0 ; VAR_87 < ( TYPE_18 ) VAR_88 -> VAR_89 ; VAR_90 ++ ) { VAR_91 = METHOD_20 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 != ( TYPE_19 ) VAR_96 ) break ; } } VAR_97 = 0 ; VAR_98 = 0 ; VAR_99 = 0 ; do { if ( ( VAR_100 -> VAR_101 != VAR_102 ) && ( VAR_103 -> VAR_104 != 0 ) ) if ( VAR_105 -> VAR_106 >= ( VAR_107 -> VAR_108 + VAR_109 -> VAR_110 - 1 ) ) break ;  METHOD_21 ( VAR_111 , VAR_112 ) ;  if ( VAR_113 == 0 ) { VAR_114 = METHOD_22 ( VAR_115 , VAR_116 , VAR_117 ) ; VAR_118 = METHOD_23 ( VAR_119 , VAR_120 , VAR_121 ) ; } for ( VAR_122 = 0 ; VAR_123 < ( TYPE_20 ) VAR_124 -> VAR_125 . VAR_126 ; VAR_127 ++ ) { register const TYPE_21 * VAR_128 VAR_129 ; register TYPE_22 VAR_130 ; register TYPE_23 * VAR_131 VAR_132 ; if ( VAR_133 != ( TYPE_24 ) VAR_134 ) { METHOD_24 ( VAR_135 , VAR_136 , ""UnexpectedEndOfFile"" , VAR_137 -> VAR_138 ) ; break ; } VAR_139 = METHOD_25 ( VAR_140 , 0 , 0 , VAR_141 -> VAR_142 , 1 , VAR_143 ) ; if ( VAR_144 == ( TYPE_25 * ) VAR_145 ) break ; VAR_146 = METHOD_26 ( VAR_147 , ( TYPE_26 * ) VAR_148 , VAR_149 , VAR_150 , VAR_151 , VAR_152 ) ; if ( METHOD_27 ( VAR_153 , VAR_154 ) == VAR_155 ) break ; if ( ( ( VAR_156 - VAR_157 -> VAR_158 . VAR_159 ) >= 0 ) && ( ( VAR_160 - VAR_161 -> VAR_162 . VAR_163 ) < ( TYPE_27 ) VAR_164 -> VAR_165 ) ) { VAR_166 = METHOD_28 ( VAR_167 , VAR_168 -> VAR_169 . VAR_170 , 0 , VAR_171 -> VAR_172 , 1 , VAR_173 ) ; VAR_174 = METHOD_29 ( VAR_175 , 0 , VAR_176 - VAR_177 -> VAR_178 . VAR_179 , VAR_180 -> VAR_181 , 1 , VAR_182 ) ; if ( ( VAR_183 == ( const TYPE_28 * ) VAR_184 ) || ( VAR_185 == ( TYPE_29 * ) VAR_186 ) ) break ; for ( VAR_187 = 0 ; VAR_188 < ( TYPE_30 ) VAR_189 -> VAR_190 ; VAR_191 ++ ) { METHOD_30 ( VAR_192 , METHOD_31 ( VAR_193 ) ) ; METHOD_32 ( VAR_194 , METHOD_33 ( VAR_195 ) ) ; METHOD_34 ( VAR_196 , METHOD_35 ( VAR_197 ) ) ; VAR_198 ++ ; VAR_199 ++ ; } if ( METHOD_36 ( VAR_200 , VAR_201 ) == VAR_202 ) break ; } if ( VAR_203 -> VAR_204 == ( TYPE_31 * ) VAR_205 ) { VAR_206 = METHOD_37 ( VAR_207 , VAR_208 , ( TYPE_32 ) VAR_209 , VAR_210 -> VAR_211 ) ; if ( VAR_212 == VAR_213 ) break ; } VAR_214 = METHOD_38 ( VAR_215 , VAR_216 , VAR_217 ) ; } METHOD_39 ( VAR_218 , VAR_219 ) ; if ( VAR_220 -> VAR_221 != 0 ) if ( VAR_222 -> VAR_223 >= ( VAR_224 -> VAR_225 + VAR_226 -> VAR_227 - 1 ) ) break ; if ( VAR_228 == ( TYPE_33 ) VAR_229 ) { METHOD_40 ( VAR_230 , VAR_231 ) ; if ( METHOD_41 ( VAR_232 ) == ( TYPE_34 * ) VAR_233 ) { VAR_234 = METHOD_42 ( VAR_235 ) ; return ( ( TYPE_35 * ) VAR_236 ) ; } VAR_237 = METHOD_43 ( VAR_238 ) ; VAR_239 = METHOD_44 ( VAR_240 , VAR_241 , METHOD_45 ( VAR_242 ) , METHOD_46 ( VAR_243 ) ) ; if ( VAR_244 == VAR_245 ) break ; } VAR_246 ++ ; } while ( VAR_247 == ( TYPE_36 ) VAR_248 ) ; VAR_249 = METHOD_47 ( VAR_250 ) ; METHOD_48 ( & VAR_251 -> VAR_252 , & VAR_253 -> VAR_254 ) ; VAR_255 = METHOD_49 ( VAR_256 ) ; ( TYPE_37 ) METHOD_50 ( VAR_257 ) ; return ( METHOD_51 ( VAR_258 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 * VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 , VAR_10 ; unsigned TYPE_10 * VAR_11 ; METHOD_1 ( VAR_12 != ( const TYPE_11 * ) VAR_13 ) ; METHOD_2 ( VAR_14 -> VAR_15 == VAR_16 ) ; if ( VAR_17 -> VAR_18 != VAR_19 ) ( TYPE_12 ) METHOD_3 ( VAR_20 , METHOD_4 ( ) , ""%s"" , VAR_21 -> VAR_22 ) ; METHOD_5 ( VAR_23 != ( TYPE_13 * ) VAR_24 ) ; METHOD_6 ( VAR_25 -> VAR_26 == VAR_27 ) ; VAR_28 = METHOD_7 ( VAR_29 ) ; if ( ( VAR_30 -> VAR_31 == 0 ) || ( VAR_32 -> VAR_33 == 0 ) ) METHOD_8 ( VAR_34 , ""MustSpecifyImageSize"" ) ; VAR_35 = METHOD_9 ( VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; if ( VAR_40 == VAR_41 ) { VAR_42 = METHOD_10 ( VAR_43 ) ; return ( ( TYPE_14 * ) VAR_44 ) ; } if ( METHOD_11 ( VAR_45 , ( TYPE_15 ) VAR_46 -> VAR_47 ) == VAR_48 ) METHOD_12 ( VAR_49 , VAR_50 , ""UnexpectedEndOfFile"" , VAR_51 -> VAR_52 ) ; METHOD_13 ( VAR_53 , VAR_54 ) ; VAR_55 = METHOD_14 ( VAR_56 , VAR_57 -> VAR_58 . VAR_59 , 1 , VAR_60 , VAR_61 ) ; ( TYPE_16 ) METHOD_15 ( VAR_62 , VAR_63 ) ; VAR_64 = VAR_65 ; VAR_66 = METHOD_16 ( VAR_67 , VAR_68 ) ; if ( VAR_69 == ( TYPE_17 * ) VAR_70 ) METHOD_17 ( VAR_71 , ""MemoryAllocationFailed"" ) ; VAR_72 = METHOD_18 ( VAR_73 ) ; if ( VAR_74 -> VAR_75 != 0 ) while ( VAR_76 -> VAR_77 < VAR_78 -> VAR_79 ) { VAR_80 -> VAR_81 ++ ; VAR_82 = METHOD_19 ( VAR_83 , VAR_84 , VAR_85 ) ; for ( VAR_86 = 0 ; VAR_87 < ( TYPE_18 ) VAR_88 -> VAR_89 ; VAR_90 ++ ) { VAR_91 = METHOD_20 ( VAR_92 , VAR_93 , VAR_94 ) ; if ( VAR_95 != ( TYPE_19 ) VAR_96 ) break ; VAR_244 = METHOD_52 ( VAR_258 , VAR_258 -> VAR_190 , VAR_258 -> VAR_211 ) ; if ( VAR_244 == VAR_245 ) { METHOD_48 ( VAR_254 , & VAR_258 -> VAR_254 ) ; return ( METHOD_42 ( VAR_258 ) ) ; } } } VAR_97 = 0 ; VAR_98 = 0 ; VAR_99 = 0 ; do { if ( ( VAR_100 -> VAR_101 != VAR_102 ) && ( VAR_103 -> VAR_104 != 0 ) ) if ( VAR_105 -> VAR_106 >= ( VAR_107 -> VAR_108 + VAR_109 -> VAR_110 - 1 ) ) break ; METHOD_21 ( VAR_111 , VAR_112 ) ; if ( VAR_113 == 0 ) { VAR_114 = METHOD_22 ( VAR_115 , VAR_116 , VAR_117 ) ; VAR_118 = METHOD_23 ( VAR_119 , VAR_120 , VAR_121 ) ; } for ( VAR_122 = 0 ; VAR_123 < ( TYPE_20 ) VAR_124 -> VAR_125 . VAR_126 ; VAR_127 ++ ) { register const TYPE_21 * VAR_128 VAR_129 ; register TYPE_22 VAR_130 ; register TYPE_23 * VAR_131 VAR_132 ; if ( VAR_133 != ( TYPE_24 ) VAR_134 ) { METHOD_24 ( VAR_135 , VAR_136 , ""UnexpectedEndOfFile"" , VAR_137 -> VAR_138 ) ; break ; } VAR_139 = METHOD_25 ( VAR_140 , 0 , 0 , VAR_141 -> VAR_142 , 1 , VAR_143 ) ; if ( VAR_144 == ( TYPE_25 * ) VAR_145 ) break ; VAR_146 = METHOD_26 ( VAR_147 , ( TYPE_26 * ) VAR_148 , VAR_149 , VAR_150 , VAR_151 , VAR_152 ) ; if ( METHOD_27 ( VAR_153 , VAR_154 ) == VAR_155 ) break ; if ( ( ( VAR_156 - VAR_157 -> VAR_158 . VAR_159 ) >= 0 ) && ( ( VAR_160 - VAR_161 -> VAR_162 . VAR_163 ) < ( TYPE_27 ) VAR_164 -> VAR_165 ) ) { VAR_166 = METHOD_28 ( VAR_167 , VAR_168 -> VAR_169 . VAR_170 , 0 , VAR_171 -> VAR_172 , 1 , VAR_173 ) ; VAR_174 = METHOD_29 ( VAR_175 , 0 , VAR_176 - VAR_177 -> VAR_178 . VAR_179 , VAR_180 -> VAR_181 , 1 , VAR_182 ) ; if ( ( VAR_183 == ( const TYPE_28 * ) VAR_184 ) || ( VAR_185 == ( TYPE_29 * ) VAR_186 ) ) break ; for ( VAR_187 = 0 ; VAR_188 < ( TYPE_30 ) VAR_189 -> VAR_190 ; VAR_191 ++ ) { METHOD_30 ( VAR_192 , METHOD_31 ( VAR_193 ) ) ; METHOD_32 ( VAR_194 , METHOD_33 ( VAR_195 ) ) ; METHOD_34 ( VAR_196 , METHOD_35 ( VAR_197 ) ) ; VAR_198 ++ ; VAR_199 ++ ; } if ( METHOD_36 ( VAR_200 , VAR_201 ) == VAR_202 ) break ; } if ( VAR_203 -> VAR_204 == ( TYPE_31 * ) VAR_205 ) { VAR_206 = METHOD_37 ( VAR_207 , VAR_208 , ( TYPE_32 ) VAR_209 , VAR_210 -> VAR_211 ) ; if ( VAR_212 == VAR_213 ) break ; } VAR_214 = METHOD_38 ( VAR_215 , VAR_216 , VAR_217 ) ; } METHOD_39 ( VAR_218 , VAR_219 ) ; if ( VAR_220 -> VAR_221 != 0 ) if ( VAR_222 -> VAR_223 >= ( VAR_224 -> VAR_225 + VAR_226 -> VAR_227 - 1 ) ) break ; if ( VAR_228 == ( TYPE_33 ) VAR_229 ) { METHOD_40 ( VAR_230 , VAR_231 ) ; if ( METHOD_41 ( VAR_232 ) == ( TYPE_34 * ) VAR_233 ) { VAR_234 = METHOD_42 ( VAR_235 ) ; return ( ( TYPE_35 * ) VAR_236 ) ; } VAR_237 = METHOD_43 ( VAR_238 ) ; VAR_239 = METHOD_44 ( VAR_240 , VAR_241 , METHOD_45 ( VAR_242 ) , METHOD_46 ( VAR_243 ) ) ; if ( VAR_244 == VAR_245 ) break ; } VAR_246 ++ ; } while ( VAR_247 == ( TYPE_36 ) VAR_248 ) ; VAR_249 = METHOD_47 ( VAR_250 ) ; METHOD_48 ( & VAR_251 -> VAR_252 , & VAR_253 -> VAR_254 ) ; VAR_255 = METHOD_49 ( VAR_256 ) ; ( TYPE_37 ) METHOD_50 ( VAR_257 ) ; return ( METHOD_51 ( VAR_258 ) ) ; }",152
153,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  const TYPE_3 * VAR_2 ;  TYPE_4 VAR_3 ;  TYPE_5 VAR_4 = 0 ;   TYPE_6 * VAR_5 = """" ;  if ( METHOD_1 ( VAR_6 , VAR_7 , & VAR_8 , & VAR_9 ) ) { VAR_10 = ""Can\'tgetimagedata/size"" ;  METHOD_2 ( ""error!\\n%sfor\'%s\'hashnodein\'%s\'imagenode\\n"" ,   VAR_11 , METHOD_3 ( VAR_12 , VAR_13 , VAR_14 ) ,  METHOD_4 ( VAR_15 , VAR_16 , VAR_17 ) ) ; return 0 ; }  return METHOD_5 ( VAR_18 , VAR_19 , VAR_20 , VAR_21 ) ;  }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { const TYPE_6 * VAR_22 = METHOD_4 ( VAR_18 , VAR_19 , VAR_17 ) ; const TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 = 0 ; TYPE_6 * VAR_5 = """" ; if ( METHOD_6 ( VAR_22 , '@' ) ) { VAR_11 = ""Nodenamecontains@"" ; goto VAR_23 ; } if ( METHOD_1 ( VAR_6 , VAR_7 , & VAR_8 , & VAR_9 ) ) { VAR_10 = ""Can\'tgetimagedata/size"" ; goto VAR_23 ; } return METHOD_5 ( VAR_18 , VAR_19 , VAR_20 , VAR_21 ) ; }",153
154,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 , TYPE_2 * VAR_2 ) { TYPE_3 * VAR_3 , * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = ( TYPE_7 * ) VAR_9 -> VAR_10 . VAR_11 . VAR_12 . VAR_13 ; VAR_14 = VAR_15 -> VAR_16 . VAR_17 . VAR_18 ; VAR_19 = VAR_20 -> VAR_21 != VAR_22 ; if ( VAR_23 > VAR_24 ) return - VAR_25 ; VAR_26 = METHOD_1 ( VAR_27 , VAR_28 ) ; if ( ! VAR_29 ) return - VAR_30 ;  if ( VAR_31 ) {  VAR_32 = METHOD_2 ( VAR_33 , ( TYPE_8 TYPE_9 * ) VAR_34 , VAR_35 ) ; if ( VAR_36 ) return - VAR_37 ; } else { METHOD_3 ( VAR_38 , 0 , VAR_39 ) ; }  * VAR_40 = VAR_41 ;  METHOD_4 ( VAR_42 , VAR_43 , VAR_44 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 , TYPE_2 * VAR_2 ) { TYPE_3 * VAR_3 , * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = ( TYPE_7 * ) VAR_9 -> VAR_10 . VAR_11 . VAR_12 . VAR_13 ; VAR_14 = VAR_15 -> VAR_16 . VAR_17 . VAR_18 ; VAR_19 = VAR_20 -> VAR_21 != VAR_22 ; if ( VAR_23 > VAR_24 ) return - VAR_25 ; VAR_26 = METHOD_1 ( VAR_27 , VAR_28 ) ; if ( ! VAR_29 ) return - VAR_30 ; * VAR_40 = VAR_42 ; if ( VAR_31 ) { VAR_32 = METHOD_2 ( VAR_33 , ( TYPE_8 TYPE_9 * ) VAR_34 , VAR_35 ) ; if ( VAR_36 ) return - VAR_37 ; } else { METHOD_3 ( VAR_38 , 0 , VAR_39 ) ; } METHOD_4 ( VAR_42 , VAR_43 , VAR_44 ) ; return 0 ; }",154
155,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 ) {   const struct STRUCT_OR_UNION_0 * VAR_2 = & VAR_3 -> VAR_4 ;  const TYPE_3 * const VAR_5 = & VAR_6 -> VAR_7 ; const TYPE_4 * VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 ; if ( VAR_11 -> VAR_12 > 1 && VAR_13 -> VAR_14 == 1 ) { VAR_15 = & VAR_16 -> VAR_17 [ VAR_18 -> VAR_19 ] . VAR_20 ; } VAR_21 = & VAR_22 -> VAR_23 ;  VAR_24 = VAR_25 -> VAR_26 / VAR_27 -> VAR_28 ;   VAR_29 = VAR_30 * METHOD_1 ( VAR_31 -> VAR_32 /  METHOD_2 ( VAR_33 ) ,  VAR_34 -> VAR_35 . VAR_36 / 100.0 ) ;  return METHOD_3 ( VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 ) ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { const struct STRUCT_OR_UNION_0 * VAR_2 = & VAR_3 -> VAR_4 ; const TYPE_3 * const VAR_5 = & VAR_6 -> VAR_7 ; const TYPE_4 * VAR_8 ; TYPE_5 VAR_9 ; TYPE_6 VAR_10 ; if ( VAR_11 -> VAR_12 > 1 && VAR_13 -> VAR_14 == 1 ) { VAR_15 = & VAR_16 -> VAR_17 [ VAR_18 -> VAR_19 ] . VAR_20 ; } VAR_21 = & VAR_22 -> VAR_23 ; VAR_24 = VAR_25 -> VAR_26 / VAR_27 -> VAR_28 ; const TYPE_6 VAR_33 = ( VAR_27 -> VAR_42 * VAR_43 ) / VAR_27 -> VAR_28 ; TYPE_6 VAR_29 = VAR_30 * METHOD_1 ( VAR_31 -> VAR_42 * VAR_31 -> weight / METHOD_2 ( VAR_33 ) , VAR_35 -> VAR_36 / 100.0 ) ; VAR_37 *= METHOD_1 ( METHOD_4 ( VAR_34 , VAR_31 ) , VAR_44 ) ; return METHOD_3 ( VAR_37 , VAR_38 -> VAR_39 , VAR_40 -> VAR_41 ) ; }",155
156,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { if ( METHOD_1 ( VAR_2 -> VAR_3 == 1 ) ) { VAR_4 -> VAR_5 += VAR_6 ; } else { const struct STRUCT_OR_UNION_1 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_2 VAR_10 = VAR_11 -> VAR_12 ;  while ( VAR_13 ) {  TYPE_3 VAR_14 = METHOD_2 ( VAR_15 , VAR_16 -> VAR_17 - VAR_18 ) ; VAR_19 -= VAR_20 ; VAR_21 += VAR_22 ; if ( VAR_23 -> VAR_24 == VAR_25 ) { VAR_26 ++ ; VAR_27 = 0 ; } } VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 = VAR_33 ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { if ( METHOD_1 ( VAR_2 -> VAR_3 == 1 ) ) { VAR_4 -> VAR_5 += VAR_6 ; } else { const struct STRUCT_OR_UNION_1 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_2 VAR_10 = VAR_11 -> VAR_12 ; while ( VAR_13 ) { TYPE_3 VAR_14 = METHOD_2 ( VAR_15 , VAR_16 -> VAR_17 - VAR_18 ) ; VAR_19 -= VAR_20 ; VAR_21 += VAR_22 ; if ( VAR_23 -> VAR_24 == VAR_25 ) { VAR_26 ++ ; VAR_27 = 0 ; } } VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 = VAR_33 ; } }",156
157,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 ) ; if ( VAR_11 -> VAR_12 == VAR_13 ) VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 -> VAR_26 ; if ( METHOD_2 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 -> VAR_31 , VAR_32 -> VAR_33 -> VAR_34 ) != VAR_35 ) return VAR_36 ; if ( VAR_37 -> VAR_38 -> VAR_39 != VAR_40 ) return VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = ( TYPE_3 * ) VAR_46 -> VAR_47 ; if ( VAR_48 -> VAR_49 == VAR_50 ) VAR_51 -> VAR_52 = METHOD_3 ( VAR_53 , VAR_54 , VAR_55 ) ; if ( METHOD_4 ( VAR_56 -> VAR_57 ) < 0 ) { METHOD_5 ( VAR_58 , ""clientauthenticationfailure\\n"" ) ; METHOD_6 ( VAR_59 -> VAR_60 ) ;  return VAR_61 ;  } return VAR_62 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 ) ; if ( VAR_11 -> VAR_12 == VAR_13 ) VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 -> VAR_26 ; if ( METHOD_2 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 -> VAR_31 , VAR_32 -> VAR_33 -> VAR_34 ) != VAR_35 ) return VAR_36 ; if ( VAR_37 -> VAR_38 -> VAR_39 != VAR_40 ) return VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = ( TYPE_3 * ) VAR_46 -> VAR_47 ; if ( VAR_48 -> VAR_49 == VAR_50 ) VAR_51 -> VAR_52 = METHOD_3 ( VAR_53 , VAR_54 , VAR_55 ) ; if ( METHOD_4 ( VAR_56 -> VAR_57 ) < 0 ) { METHOD_5 ( VAR_58 , ""clientauthenticationfailure\\n"" ) ; METHOD_6 ( VAR_59 -> VAR_60 ) ; VAR_59 -> VAR_60 = VAR_50 ; return VAR_61 ; } return VAR_62 ; }",157
158,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * * VAR_2 , const TYPE_3 * * VAR_3 , TYPE_4 * * VAR_4 ) { switch ( VAR_5 -> VAR_6 . VAR_7 ) { case VAR_8 : * VAR_9 = VAR_10 ; * VAR_11 = METHOD_1 ( VAR_12 , VAR_13 -> VAR_14 . VAR_15 ) ; * VAR_16 = VAR_17 ;  return VAR_18 ;  case VAR_19 : * VAR_20 = METHOD_2 ( VAR_21 , VAR_22 -> VAR_23 . VAR_24 ) ; * VAR_25 = METHOD_3 ( VAR_26 , VAR_27 -> VAR_28 . VAR_29 ) ; * VAR_30 = VAR_31 ; return VAR_32 ; case VAR_33 : * VAR_34 = METHOD_4 ( VAR_35 , VAR_36 -> VAR_37 . VAR_38 ) ; * VAR_39 = METHOD_5 ( VAR_40 , VAR_41 -> VAR_42 . VAR_43 ) ; * VAR_44 = VAR_45 -> VAR_46 . VAR_47 ; return VAR_48 ; default : break ; } METHOD_6 ( VAR_49 , ""Unexpectedoperator%dinResolveLhs\\n"" , VAR_50 -> VAR_51 . VAR_52 ) ; return VAR_53 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * * VAR_2 , const TYPE_3 * * VAR_3 , TYPE_4 * * VAR_4 ) { switch ( VAR_5 -> VAR_6 . VAR_7 ) { case VAR_8 : * VAR_9 = VAR_10 ; * VAR_11 = METHOD_1 ( VAR_12 , VAR_13 -> VAR_14 . VAR_15 ) ; * VAR_16 = VAR_17 ; return VAR_18 ; case VAR_19 : * VAR_20 = METHOD_2 ( VAR_21 , VAR_22 -> VAR_23 . VAR_24 ) ; * VAR_25 = METHOD_3 ( VAR_26 , VAR_27 -> VAR_28 . VAR_29 ) ; * VAR_30 = VAR_31 ; return VAR_32 ; case VAR_33 : * VAR_34 = METHOD_4 ( VAR_35 , VAR_36 -> VAR_37 . VAR_38 ) ; * VAR_39 = METHOD_5 ( VAR_40 , VAR_41 -> VAR_42 . VAR_43 ) ; * VAR_44 = VAR_45 -> VAR_46 . VAR_47 ; return VAR_48 ; default : break ; } METHOD_6 ( VAR_49 , ""Unexpectedoperator%dinResolveLhs\\n"" , VAR_50 -> VAR_51 . VAR_52 ) ; return VAR_53 ; }",158
159,"static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ;  TYPE_4 VAR_3 = sizeof ( VAR_4 ) * ( 2 * VAR_5 + 1 ) + sizeof ( TYPE_5 ) ;   TYPE_6 VAR_6 = ( TYPE_7 ) METHOD_1 ( VAR_7 ) ;   VAR_8 = METHOD_2 ( VAR_9 + VAR_10 + 1 ) ;  if ( VAR_11 ) { METHOD_3 ( VAR_12 , 0 , VAR_13 ) ; VAR_14 -> VAR_15 [ 0 ] = ( TYPE_8 * ) ( & VAR_16 -> VAR_17 [ 1 ] ) - ( TYPE_9 * ) VAR_18 ; VAR_19 -> VAR_20 [ 1 + VAR_21 ] = VAR_22 -> VAR_23 [ 0 ] + sizeof ( VAR_24 ) * ( VAR_25 + 1 ) ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = ( ( TYPE_10 * ) VAR_31 ) + VAR_32 ; METHOD_4 ( VAR_33 -> VAR_34 , VAR_35 , VAR_36 + 1 ) ; VAR_37 -> VAR_38 [ 0 ] = 1 ; } return VAR_39 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 = sizeof ( VAR_4 ) * ( 2 * ( TYPE_11 ) VAR_5 + 1 ) + sizeof ( TYPE_5 ) ; TYPE_6 VAR_6 = ( TYPE_7 ) METHOD_1 ( VAR_7 ) ; VAR_8 = METHOD_2 ( VAR_9 + VAR_10 + 1 ) ; if ( VAR_11 ) { METHOD_3 ( VAR_12 , 0 , VAR_13 ) ; VAR_14 -> VAR_15 [ 0 ] = ( TYPE_8 * ) ( & VAR_16 -> VAR_17 [ 1 ] ) - ( TYPE_9 * ) VAR_18 ; VAR_19 -> VAR_20 [ 1 + VAR_21 ] = VAR_22 -> VAR_23 [ 0 ] + sizeof ( VAR_24 ) * ( VAR_25 + 1 ) ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> VAR_30 = ( ( TYPE_10 * ) VAR_31 ) + VAR_32 ; METHOD_4 ( VAR_33 -> VAR_34 , VAR_35 , VAR_36 + 1 ) ; VAR_37 -> VAR_38 [ 0 ] = 1 ; } return VAR_39 ; }",159
160,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { unsigned TYPE_2 VAR_2 = METHOD_1 ( VAR_3 , VAR_4 , 0 ) ; TYPE_3 VAR_5 = ( ( VAR_6 >> 25 ) & 0x1e ) | ( ( VAR_7 >> 20 ) & 0x20 ) ; struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 ; TYPE_4 VAR_10 = METHOD_2 ( VAR_11 , VAR_12 ) ; TYPE_5 VAR_13 = ( VAR_14 < 32 ) ? VAR_15 : VAR_16 ;  METHOD_3 ( VAR_17 , 1 , 0 , VAR_18 , 0 ) ;  METHOD_4 ( ) ; METHOD_5 ( ) -> VAR_19 [ 0 ] &= ~ 0x1c000 ; if ( VAR_20 & 3 ) { METHOD_6 ( ) -> VAR_21 [ 0 ] |= ( 6 << 14 ) ; METHOD_7 ( VAR_22 ) ; return 0 ; } if ( VAR_23 & 0x200000 ) { TYPE_6 VAR_24 = 0 , VAR_25 = 0 ; if ( METHOD_8 ( ) -> VAR_26 [ 0 ] & VAR_27 ) { VAR_28 = * ( TYPE_7 * ) & VAR_29 -> VAR_30 [ VAR_31 ] ; VAR_32 = * ( TYPE_8 * ) & VAR_33 -> VAR_34 [ VAR_35 + 2 ] ; } if ( VAR_36 < 0x80 ) { METHOD_9 ( VAR_37 ) ; return 1 ; } switch ( VAR_38 ) { case VAR_39 : case VAR_40 : break ; case VAR_41 : case VAR_42 : { TYPE_9 VAR_43 = METHOD_10 ( & VAR_44 ) ; VAR_45 = METHOD_11 ( & VAR_46 ) ; VAR_47 = VAR_48 ; break ; } default : if ( VAR_49 == VAR_50 ) METHOD_12 ( VAR_51 , VAR_52 , 0 ) ; else METHOD_13 ( VAR_53 , 0 , VAR_54 ) ; return 1 ; } if ( METHOD_14 ( VAR_55 >> 32 , ( TYPE_10 TYPE_11 * ) VAR_56 ) || METHOD_15 ( ( TYPE_12 ) VAR_57 , ( TYPE_13 TYPE_14 * ) ( VAR_58 + 4 ) ) || METHOD_16 ( VAR_59 >> 32 , ( TYPE_15 TYPE_16 * ) ( VAR_60 + 8 ) ) || METHOD_17 ( ( TYPE_17 ) VAR_61 , ( TYPE_18 TYPE_19 * ) ( VAR_62 + 12 ) ) ) { if ( VAR_63 == VAR_64 ) METHOD_18 ( VAR_65 , VAR_66 , 0 ) ; else METHOD_19 ( VAR_67 , 0 , VAR_68 ) ; return 1 ; } } else { TYPE_20 VAR_69 [ 4 ] VAR_70 ( ( VAR_71 ( 8 ) ) ) ; TYPE_21 VAR_72 , VAR_73 ; TYPE_22 VAR_74 ; if ( VAR_75 < 0x80 ) { METHOD_20 ( VAR_76 ) ; return 1 ; } else if ( VAR_77 > VAR_78 ) { if ( VAR_79 == VAR_80 ) METHOD_21 ( VAR_81 , VAR_82 , 0 ) ; else METHOD_22 ( VAR_83 , 0 , VAR_84 ) ; return 1 ; } switch ( VAR_85 & 0x180000 ) { case 0x000000 : VAR_86 = 1 ; break ; case 0x100000 : VAR_87 = 4 ; break ; default : VAR_88 = 2 ; break ; } for ( VAR_89 = 0 ; VAR_90 < VAR_91 ; VAR_92 ++ ) VAR_93 [ VAR_94 ] = 0 ; VAR_95 = METHOD_23 ( VAR_96 [ 0 ] , ( TYPE_23 TYPE_24 * ) VAR_97 ) ; if ( ! VAR_98 ) { for ( VAR_99 = 1 ; VAR_100 < VAR_101 ; VAR_102 ++ ) VAR_103 |= METHOD_24 ( VAR_104 [ VAR_105 ] , ( TYPE_25 TYPE_26 * ) ( VAR_106 + 4 * VAR_107 ) ) ; } if ( VAR_108 && ! ( VAR_109 & 0x2 ) ) { if ( VAR_110 == VAR_111 ) METHOD_25 ( VAR_112 , VAR_113 , 0 ) ; else METHOD_26 ( VAR_114 , 0 , VAR_115 ) ; return 1 ; } if ( VAR_116 & 0x8 ) { TYPE_27 VAR_117 ; switch ( VAR_118 ) { case 1 : VAR_119 [ 0 ] = METHOD_27 ( VAR_120 + 0 ) ; break ; default : * ( TYPE_28 * ) ( VAR_121 + 0 ) = METHOD_28 ( ( TYPE_29 * ) ( VAR_122 + 0 ) ) ; break ; case 4 : VAR_123 = METHOD_29 ( ( TYPE_30 * ) ( VAR_124 + 0 ) ) ; * ( TYPE_31 * ) ( VAR_125 + 0 ) = METHOD_30 ( ( TYPE_32 * ) ( VAR_126 + 2 ) ) ; * ( TYPE_33 * ) ( VAR_127 + 2 ) = VAR_128 ; break ; } } if ( ! ( METHOD_31 ( ) -> VAR_129 [ 0 ] & VAR_130 ) ) { METHOD_32 ( ) -> VAR_131 [ 0 ] = VAR_132 ; METHOD_33 ( ) -> VAR_133 [ 0 ] = 0 ; } if ( ! ( METHOD_34 ( ) -> VAR_134 [ 0 ] & VAR_135 ) ) { if ( VAR_136 < 32 ) METHOD_35 ( VAR_137 -> VAR_138 , 0 , 32 * sizeof ( TYPE_34 ) ) ; else METHOD_36 ( VAR_139 -> VAR_140 + 32 , 0 , 32 * sizeof ( TYPE_35 ) ) ; } METHOD_37 ( VAR_141 -> VAR_142 + VAR_143 , VAR_144 , VAR_145 * 4 ) ; METHOD_38 ( ) -> VAR_146 [ 0 ] |= VAR_147 ; } METHOD_39 ( VAR_148 ) ; return 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { unsigned TYPE_2 VAR_2 = METHOD_1 ( VAR_3 , VAR_4 , 0 ) ; TYPE_3 VAR_5 = ( ( VAR_6 >> 25 ) & 0x1e ) | ( ( VAR_7 >> 20 ) & 0x20 ) ; struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 ; TYPE_4 VAR_10 = METHOD_2 ( VAR_11 , VAR_12 ) ; TYPE_5 VAR_13 = ( VAR_14 < 32 ) ? VAR_15 : VAR_16 ; METHOD_3 ( VAR_17 , 1 , 0 , VAR_18 , 0 ) ; METHOD_4 ( ) ; METHOD_5 ( ) -> VAR_19 [ 0 ] &= ~ 0x1c000 ; if ( VAR_20 & 3 ) { METHOD_6 ( ) -> VAR_21 [ 0 ] |= ( 6 << 14 ) ; METHOD_7 ( VAR_22 ) ; return 0 ; } if ( VAR_23 & 0x200000 ) { TYPE_6 VAR_24 = 0 , VAR_25 = 0 ; if ( METHOD_8 ( ) -> VAR_26 [ 0 ] & VAR_27 ) { VAR_28 = * ( TYPE_7 * ) & VAR_29 -> VAR_30 [ VAR_31 ] ; VAR_32 = * ( TYPE_8 * ) & VAR_33 -> VAR_34 [ VAR_35 + 2 ] ; } if ( VAR_36 < 0x80 ) { METHOD_9 ( VAR_37 ) ; return 1 ; } switch ( VAR_38 ) { case VAR_39 : case VAR_40 : break ; case VAR_41 : case VAR_42 : { TYPE_9 VAR_43 = METHOD_10 ( & VAR_44 ) ; VAR_45 = METHOD_11 ( & VAR_46 ) ; VAR_47 = VAR_48 ; break ; } default : if ( VAR_49 == VAR_50 ) METHOD_12 ( VAR_51 , VAR_52 , 0 ) ; else METHOD_13 ( VAR_53 , 0 , VAR_54 ) ; return 1 ; } if ( METHOD_14 ( VAR_55 >> 32 , ( TYPE_10 TYPE_11 * ) VAR_56 ) || METHOD_15 ( ( TYPE_12 ) VAR_57 , ( TYPE_13 TYPE_14 * ) ( VAR_58 + 4 ) ) || METHOD_16 ( VAR_59 >> 32 , ( TYPE_15 TYPE_16 * ) ( VAR_60 + 8 ) ) || METHOD_17 ( ( TYPE_17 ) VAR_61 , ( TYPE_18 TYPE_19 * ) ( VAR_62 + 12 ) ) ) { if ( VAR_63 == VAR_64 ) METHOD_18 ( VAR_65 , VAR_66 , 0 ) ; else METHOD_19 ( VAR_67 , 0 , VAR_68 ) ; return 1 ; } } else { TYPE_20 VAR_69 [ 4 ] VAR_70 ( ( VAR_71 ( 8 ) ) ) ; TYPE_21 VAR_72 , VAR_73 ; TYPE_22 VAR_74 ; if ( VAR_75 < 0x80 ) { METHOD_20 ( VAR_76 ) ; return 1 ; } else if ( VAR_77 > VAR_78 ) { if ( VAR_79 == VAR_80 ) METHOD_21 ( VAR_81 , VAR_82 , 0 ) ; else METHOD_22 ( VAR_83 , 0 , VAR_84 ) ; return 1 ; } switch ( VAR_85 & 0x180000 ) { case 0x000000 : VAR_86 = 1 ; break ; case 0x100000 : VAR_87 = 4 ; break ; default : VAR_88 = 2 ; break ; } for ( VAR_89 = 0 ; VAR_90 < VAR_91 ; VAR_92 ++ ) VAR_93 [ VAR_94 ] = 0 ; VAR_95 = METHOD_23 ( VAR_96 [ 0 ] , ( TYPE_23 TYPE_24 * ) VAR_97 ) ; if ( ! VAR_98 ) { for ( VAR_99 = 1 ; VAR_100 < VAR_101 ; VAR_102 ++ ) VAR_103 |= METHOD_24 ( VAR_104 [ VAR_105 ] , ( TYPE_25 TYPE_26 * ) ( VAR_106 + 4 * VAR_107 ) ) ; } if ( VAR_108 && ! ( VAR_109 & 0x2 ) ) { if ( VAR_110 == VAR_111 ) METHOD_25 ( VAR_112 , VAR_113 , 0 ) ; else METHOD_26 ( VAR_114 , 0 , VAR_115 ) ; return 1 ; } if ( VAR_116 & 0x8 ) { TYPE_27 VAR_117 ; switch ( VAR_118 ) { case 1 : VAR_119 [ 0 ] = METHOD_27 ( VAR_120 + 0 ) ; break ; default : * ( TYPE_28 * ) ( VAR_121 + 0 ) = METHOD_28 ( ( TYPE_29 * ) ( VAR_122 + 0 ) ) ; break ; case 4 : VAR_123 = METHOD_29 ( ( TYPE_30 * ) ( VAR_124 + 0 ) ) ; * ( TYPE_31 * ) ( VAR_125 + 0 ) = METHOD_30 ( ( TYPE_32 * ) ( VAR_126 + 2 ) ) ; * ( TYPE_33 * ) ( VAR_127 + 2 ) = VAR_128 ; break ; } } if ( ! ( METHOD_31 ( ) -> VAR_129 [ 0 ] & VAR_130 ) ) { METHOD_32 ( ) -> VAR_131 [ 0 ] = VAR_132 ; METHOD_33 ( ) -> VAR_133 [ 0 ] = 0 ; } if ( ! ( METHOD_34 ( ) -> VAR_134 [ 0 ] & VAR_135 ) ) { if ( VAR_136 < 32 ) METHOD_35 ( VAR_137 -> VAR_138 , 0 , 32 * sizeof ( TYPE_34 ) ) ; else METHOD_36 ( VAR_139 -> VAR_140 + 32 , 0 , 32 * sizeof ( TYPE_35 ) ) ; } METHOD_37 ( VAR_141 -> VAR_142 + VAR_143 , VAR_144 , VAR_145 * 4 ) ; METHOD_38 ( ) -> VAR_146 [ 0 ] |= VAR_147 ; } METHOD_39 ( VAR_148 ) ; return 1 ; }",160
161,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 [ 20 + VAR_4 ] ; METHOD_1 ( ""connect_to_db"" ) ; METHOD_2 ( ""--Connectingto%s...\\n"" , VAR_5 ? VAR_6 : ""localhost"" ) ; METHOD_3 ( & VAR_7 ) ; if ( VAR_8 ) METHOD_4 ( & VAR_9 , VAR_10 , VAR_11 ) ;  TYPE_5 TYPE_6  if ( VAR_12 ) { METHOD_5 ( & VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 ) ; METHOD_6 ( & VAR_19 , VAR_20 , VAR_21 ) ; METHOD_7 ( & VAR_22 , VAR_23 , VAR_24 ) ; } METHOD_8 ( & VAR_25 , VAR_26 , ( TYPE_7 * ) & VAR_27 ) ; if ( VAR_28 ) METHOD_9 ( & VAR_29 , VAR_30 , ( TYPE_8 * ) & VAR_31 ) ; if ( VAR_32 ) METHOD_10 ( & VAR_33 , VAR_34 , VAR_35 ) ; if METHOD_11 ( VAR_36 ) && ! METHOD_12 ( VAR_37 ) if ( VAR_38 ) METHOD_13 ( & VAR_39 , VAR_40 , VAR_41 ) ; METHOD_14 ( & VAR_42 , VAR_43 , VAR_44 ) ; if ( VAR_45 && * VAR_46 ) METHOD_15 ( & VAR_47 , VAR_48 , VAR_49 ) ; if ( VAR_50 && * VAR_51 ) METHOD_16 ( & VAR_52 , VAR_53 , VAR_54 ) ; METHOD_17 ( & VAR_55 , VAR_56 , 0 ) ; METHOD_18 ( & VAR_57 , VAR_58 , ""program_name"" , ""mysqldump"" ) ; if ( ! ( VAR_59 = METHOD_19 ( & VAR_60 , VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 , 0 ) ) ) { METHOD_20 ( & VAR_67 , ""whentryingtoconnect"" ) ; METHOD_21 ( 1 ) ; } if ( ( METHOD_22 ( & VAR_68 ) < 40100 ) || ( VAR_69 & 3 ) ) { VAR_70 = 0 ; VAR_71 = VAR_72 ; } VAR_73 -> VAR_74 = 0 ; METHOD_23 ( VAR_75 , sizeof ( VAR_76 ) , ""/*!40100SET@@SQL_MODE=\'%s\'*/"" , VAR_77 ) ; if ( METHOD_24 ( VAR_78 , 0 , VAR_79 ) ) METHOD_25 ( 1 ) ; if ( VAR_80 ) { METHOD_26 ( VAR_81 , sizeof ( VAR_82 ) , ""/*!40103SETTIME_ZONE=\'+00:00\'*/"" ) ; if ( METHOD_27 ( VAR_83 , 0 , VAR_84 ) ) METHOD_28 ( 1 ) ; } METHOD_29 ( 0 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 [ 20 + VAR_4 ] ; METHOD_1 ( ""connect_to_db"" ) ; METHOD_2 ( ""--Connectingto%s...\\n"" , VAR_5 ? VAR_6 : ""localhost"" ) ; METHOD_3 ( & VAR_7 ) ; if ( VAR_8 ) METHOD_4 ( & VAR_9 , VAR_10 , VAR_11 ) ; TYPE_5 TYPE_6 if ( VAR_12 ) { METHOD_5 ( & VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 ) ; METHOD_6 ( & VAR_19 , VAR_20 , VAR_21 ) ; METHOD_7 ( & VAR_22 , VAR_23 , VAR_24 ) ; } METHOD_8 ( & VAR_25 , VAR_26 , ( TYPE_7 * ) & VAR_27 ) ; if ( VAR_28 ) METHOD_9 ( & VAR_29 , VAR_30 , ( TYPE_8 * ) & VAR_31 ) ; if ( VAR_32 ) METHOD_10 ( & VAR_33 , VAR_34 , VAR_35 ) ; if METHOD_11 ( VAR_36 ) && ! METHOD_12 ( VAR_37 ) if ( VAR_38 ) METHOD_13 ( & VAR_39 , VAR_40 , VAR_41 ) ; METHOD_14 ( & VAR_42 , VAR_43 , VAR_44 ) ; if ( VAR_45 && * VAR_46 ) METHOD_15 ( & VAR_47 , VAR_48 , VAR_49 ) ; if ( VAR_50 && * VAR_51 ) METHOD_16 ( & VAR_52 , VAR_53 , VAR_54 ) ; METHOD_17 ( & VAR_55 , VAR_56 , 0 ) ; METHOD_18 ( & VAR_57 , VAR_58 , ""program_name"" , ""mysqldump"" ) ; if ( ! ( VAR_59 = METHOD_19 ( & VAR_60 , VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 , 0 ) ) ) { METHOD_20 ( & VAR_67 , ""whentryingtoconnect"" ) ; METHOD_21 ( 1 ) ; } if ( ( METHOD_22 ( & VAR_68 ) < 40100 ) || ( VAR_69 & 3 ) ) { VAR_70 = 0 ; VAR_71 = VAR_72 ; } VAR_73 -> VAR_74 = 0 ; METHOD_23 ( VAR_75 , sizeof ( VAR_76 ) , ""/*!40100SET@@SQL_MODE=\'%s\'*/"" , VAR_77 ) ; if ( METHOD_24 ( VAR_78 , 0 , VAR_79 ) ) METHOD_25 ( 1 ) ; if ( VAR_80 ) { METHOD_26 ( VAR_81 , sizeof ( VAR_82 ) , ""/*!40103SETTIME_ZONE=\'+00:00\'*/"" ) ; if ( METHOD_27 ( VAR_83 , 0 , VAR_84 ) ) METHOD_28 ( 1 ) ; } METHOD_29 ( 0 ) ; }",161
162,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ) { struct STRUCT_OR_UNION_4 VAR_2 ; const unsigned VAR_3 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_4 -> VAR_5 ) ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = METHOD_3 ( VAR_9 ) ; struct STRUCT_OR_UNION_8 * VAR_10 = METHOD_4 ( VAR_11 ) ; METHOD_5 ( & VAR_12 , 0 , sizeof ( VAR_13 ) ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = VAR_19 -> VAR_20 ;  METHOD_6 ( VAR_21 . VAR_22 , VAR_23 -> VAR_24 -> VAR_25 , VAR_26 ) ;   METHOD_7 ( VAR_27 . VAR_28 , VAR_29 -> VAR_30 , VAR_31 ) ;  if ( VAR_32 ) VAR_33 . VAR_34 = VAR_35 - VAR_36 -> VAR_37 ; else VAR_38 . VAR_39 = - 1 ; if ( VAR_40 ) VAR_41 . VAR_42 = VAR_43 - VAR_44 -> VAR_45 ; else VAR_46 . VAR_47 = - 1 ; if ( METHOD_8 ( VAR_48 , & VAR_49 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_50 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ) { struct STRUCT_OR_UNION_4 VAR_2 ; const unsigned VAR_3 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_4 -> VAR_5 ) ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = METHOD_3 ( VAR_9 ) ; struct STRUCT_OR_UNION_8 * VAR_10 = METHOD_4 ( VAR_11 ) ; METHOD_5 ( & VAR_12 , 0 , sizeof ( VAR_13 ) ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = VAR_19 -> VAR_20 ; METHOD_6 ( VAR_21 . VAR_22 , VAR_23 -> VAR_24 -> VAR_25 , VAR_26 ) ; METHOD_7 ( VAR_27 . VAR_28 , VAR_29 -> VAR_30 , VAR_31 ) ; if ( VAR_32 ) VAR_33 . VAR_34 = VAR_35 - VAR_36 -> VAR_37 ; else VAR_38 . VAR_39 = - 1 ; if ( VAR_40 ) VAR_41 . VAR_42 = VAR_43 - VAR_44 -> VAR_45 ; else VAR_46 . VAR_47 = - 1 ; if ( METHOD_8 ( VAR_48 , & VAR_49 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_50 ; return 0 ; }",162
163," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) {  TYPE_7 VAR_6 ;  if ( VAR_7 -> VAR_8 ) { if ( ! ( VAR_9 -> VAR_10 & VAR_11 ) ) { METHOD_1 ( VAR_12 -> VAR_13 ) ; } VAR_14 -> VAR_15 = 0 ; VAR_16 -> VAR_17 = 0 ; } if ( VAR_18 -> VAR_19 ) { METHOD_2 ( VAR_20 -> VAR_21 ) ; VAR_22 -> VAR_23 = 0 ; } VAR_24 -> VAR_25 |= VAR_26 ; VAR_27 -> VAR_28 = VAR_29 - VAR_30 + 1 ; VAR_31 -> VAR_32 = VAR_33 - VAR_34 + 1 ; VAR_35 -> VAR_36 = VAR_37 -> VAR_38 ; if ( ! ( VAR_39 -> VAR_40 = METHOD_3 ( VAR_41 -> VAR_42 , sizeof ( TYPE_8 * ) ) ) ) { METHOD_4 ( ) ; } for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; ++ VAR_47 ) { VAR_48 -> VAR_49 [ VAR_50 ] = VAR_51 -> VAR_52 [ VAR_53 + VAR_54 ] + VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 -> VAR_59 + VAR_60 ; VAR_61 -> VAR_62 = VAR_63 -> VAR_64 + VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 + VAR_70 -> VAR_71 ; VAR_72 -> VAR_73 = VAR_74 -> VAR_75 + VAR_76 -> VAR_77 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; if ( VAR_7 -> VAR_8 ) { if ( ! ( VAR_9 -> VAR_10 & VAR_11 ) ) { METHOD_1 ( VAR_12 -> VAR_13 ) ; } VAR_14 -> VAR_15 = 0 ; VAR_16 -> VAR_17 = 0 ; } if ( VAR_18 -> VAR_19 ) { METHOD_2 ( VAR_20 -> VAR_21 ) ; VAR_22 -> VAR_23 = 0 ; } VAR_24 -> VAR_25 |= VAR_26 ; VAR_27 -> VAR_28 = VAR_29 - VAR_30 + 1 ; VAR_31 -> VAR_32 = VAR_33 - VAR_34 + 1 ; VAR_35 -> VAR_36 = VAR_37 -> VAR_38 ; if ( ! ( VAR_39 -> VAR_40 = METHOD_3 ( VAR_41 -> VAR_42 , sizeof ( TYPE_8 * ) ) ) ) { METHOD_4 ( ) ; } for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; ++ VAR_47 ) { VAR_48 -> VAR_49 [ VAR_50 ] = VAR_51 -> VAR_52 [ VAR_53 + VAR_54 ] + VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 -> VAR_59 + VAR_60 ; VAR_61 -> VAR_62 = VAR_63 -> VAR_64 + VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 + VAR_70 -> VAR_71 ; VAR_72 -> VAR_73 = VAR_74 -> VAR_75 + VAR_76 -> VAR_77 ; }",163
164,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ;  struct STRUCT_OR_UNION_4 * VAR_9 = METHOD_1 ( STRUCT_OR_UNION_5 ) ;  METHOD_2 ( STRUCT_OR_UNION_6 , ""name=%d.%s,buffer=%p,buffer_size=%ld"" , VAR_10 , VAR_11 , VAR_12 , ( TYPE_7 ) VAR_13 ) ; VAR_14 = - VAR_15 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 ) -> VAR_16 ) goto VAR_17 ; METHOD_4 ( STRUCT_OR_UNION_8 , ""readingblock%llu"" , ( unsigned TYPE_8 TYPE_9 ) METHOD_5 ( STRUCT_OR_UNION_9 ) -> VAR_18 ) ; VAR_19 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_20 , METHOD_7 ( STRUCT_OR_UNION_11 ) -> VAR_21 ) ; if ( ! VAR_22 ) goto VAR_23 ; METHOD_8 ( VAR_24 , ""b_count=%d,refcount=%d"" , METHOD_9 ( & ( VAR_25 -> VAR_26 ) ) , METHOD_10 ( METHOD_11 ( VAR_27 ) -> VAR_28 ) ) ; if ( METHOD_12 ( STRUCT_OR_UNION_12 , VAR_29 ) ) { VAR_30 : METHOD_13 ( STRUCT_OR_UNION_13 , ""badblock%llu"" , METHOD_14 ( STRUCT_OR_UNION_14 ) -> VAR_31 ) ; VAR_32 = - VAR_33 ; goto VAR_34 ; } METHOD_15 ( VAR_35 , VAR_36 ) ; VAR_37 = METHOD_16 ( VAR_38 ) ; VAR_39 = METHOD_17 ( & VAR_40 , VAR_41 , VAR_42 , VAR_43 -> VAR_44 , 1 ) ; if ( VAR_45 == - VAR_46 ) goto VAR_47 ; if ( VAR_48 ) goto VAR_49 ; VAR_50 = METHOD_18 ( VAR_51 -> VAR_52 ) ; if ( VAR_53 ) { VAR_54 = - VAR_55 ; if ( VAR_56 > VAR_57 ) goto VAR_58 ; METHOD_19 ( VAR_59 , VAR_60 -> VAR_61 + METHOD_20 ( VAR_62 -> VAR_63 ) , VAR_64 ) ; } VAR_65 = VAR_66 ; VAR_67 : METHOD_21 ( VAR_68 ) ; return VAR_69 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; METHOD_2 ( STRUCT_OR_UNION_6 , ""name=%d.%s,buffer=%p,buffer_size=%ld"" , VAR_10 , VAR_11 , VAR_12 , ( TYPE_7 ) VAR_13 ) ; VAR_14 = - VAR_15 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 ) -> VAR_16 ) goto VAR_17 ; METHOD_4 ( STRUCT_OR_UNION_8 , ""readingblock%llu"" , ( unsigned TYPE_8 TYPE_9 ) METHOD_5 ( STRUCT_OR_UNION_9 ) -> VAR_18 ) ; VAR_19 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_20 , METHOD_7 ( STRUCT_OR_UNION_11 ) -> VAR_21 ) ; if ( ! VAR_22 ) goto VAR_23 ; METHOD_8 ( VAR_24 , ""b_count=%d,refcount=%d"" , METHOD_9 ( & ( VAR_25 -> VAR_26 ) ) , METHOD_10 ( METHOD_11 ( VAR_27 ) -> VAR_28 ) ) ; if ( METHOD_12 ( STRUCT_OR_UNION_12 , VAR_29 ) ) { VAR_30 : METHOD_13 ( STRUCT_OR_UNION_13 , ""badblock%llu"" , METHOD_14 ( STRUCT_OR_UNION_14 ) -> VAR_31 ) ; VAR_32 = - VAR_33 ; goto VAR_34 ; } METHOD_15 ( VAR_35 , VAR_36 ) ; VAR_37 = METHOD_16 ( VAR_38 ) ; VAR_39 = METHOD_17 ( & VAR_40 , VAR_41 , VAR_42 , VAR_43 -> VAR_44 , 1 ) ; if ( VAR_45 == - VAR_46 ) goto VAR_47 ; if ( VAR_48 ) goto VAR_49 ; VAR_50 = METHOD_18 ( VAR_51 -> VAR_52 ) ; if ( VAR_53 ) { VAR_54 = - VAR_55 ; if ( VAR_56 > VAR_57 ) goto VAR_58 ; METHOD_19 ( VAR_59 , VAR_60 -> VAR_61 + METHOD_20 ( VAR_62 -> VAR_63 ) , VAR_64 ) ; } VAR_65 = VAR_66 ; VAR_67 : METHOD_21 ( VAR_68 ) ; return VAR_69 ; }",164
165," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = va_arg ( VAR_4 , TYPE_5 ) ; METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 ) ; return VAR_8 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = va_arg ( VAR_4 , TYPE_5 ) ; METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 ) ; return VAR_8 ; }",165
166,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { unsigned TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = 0 ; TYPE_4 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; if ( VAR_11 ) METHOD_1 ( VAR_12 , VAR_13 ) ; METHOD_2 ( VAR_14 ) ;  VAR_15 = METHOD_3 ( VAR_16 -> VAR_17 ) ;   VAR_18 = METHOD_4 ( VAR_19 -> VAR_20 ) ;  if ( VAR_21 == 0 ) return 0 ; VAR_22 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_23 ) ; if ( VAR_24 == VAR_25 ) return - VAR_26 ; if ( VAR_27 & VAR_28 ) { struct STRUCT_OR_UNION_6 VAR_29 ; unsigned TYPE_5 VAR_30 ; METHOD_6 ( & VAR_31 ) ;  VAR_32 = METHOD_7 ( VAR_33 ) ;  if ( VAR_34 > VAR_35 ) VAR_36 -= VAR_37 ; else VAR_38 = 0 ; } VAR_39 = ( VAR_40 + VAR_41 - 1 ) / VAR_42 + METHOD_8 ( ) ; VAR_43 = ( VAR_44 + VAR_45 - 1 ) / VAR_46 ; METHOD_9 ( ) ; VAR_47 = METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( & VAR_48 [ VAR_49 ] . VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 = METHOD_13 ( ) ; VAR_57 -> VAR_58 . STRUCT_OR_UNION_7 . VAR_59 = VAR_60 ; VAR_61 -> VAR_62 . STRUCT_OR_UNION_8 . VAR_63 = VAR_64 ; VAR_65 -> VAR_66 . STRUCT_OR_UNION_9 . VAR_67 = VAR_68 ; VAR_69 -> VAR_70 . STRUCT_OR_UNION_10 . VAR_71 = VAR_72 ; VAR_73 = VAR_74 [ VAR_75 ] . VAR_76 ; METHOD_14 ( VAR_77 ) ; if ( VAR_78 [ VAR_79 ] . VAR_80 == VAR_81 ) { METHOD_15 ( & VAR_82 [ VAR_83 ] . VAR_84 , VAR_85 ) ; METHOD_16 ( ) ; return VAR_86 ; } if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 ) ; METHOD_19 ( VAR_90 ) ; METHOD_20 ( & VAR_91 [ VAR_92 ] . VAR_93 , VAR_94 ) ; METHOD_21 ( ) ; return VAR_95 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { unsigned TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 = 0 ; TYPE_4 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; if ( VAR_11 ) METHOD_1 ( VAR_12 , VAR_13 ) ; METHOD_2 ( VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 -> VAR_17 ) ; VAR_18 = METHOD_4 ( VAR_19 -> VAR_20 ) ; if ( VAR_21 == 0 ) return 0 ; VAR_22 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_5 ) , VAR_23 ) ; if ( VAR_24 == VAR_25 ) return - VAR_26 ; if ( VAR_27 & VAR_28 ) { struct STRUCT_OR_UNION_6 VAR_29 ; unsigned TYPE_5 VAR_30 ; METHOD_6 ( & VAR_31 ) ; VAR_32 = METHOD_7 ( & VAR_33 ) ; if ( VAR_34 > VAR_35 ) VAR_36 -= VAR_37 ; else VAR_38 = 0 ; } VAR_39 = ( VAR_40 + VAR_41 - 1 ) / VAR_42 + METHOD_8 ( ) ; VAR_43 = ( VAR_44 + VAR_45 - 1 ) / VAR_46 ; METHOD_9 ( ) ; VAR_47 = METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( & VAR_48 [ VAR_49 ] . VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 = METHOD_13 ( ) ; VAR_57 -> VAR_58 . STRUCT_OR_UNION_7 . VAR_59 = VAR_60 ; VAR_61 -> VAR_62 . STRUCT_OR_UNION_8 . VAR_63 = VAR_64 ; VAR_65 -> VAR_66 . STRUCT_OR_UNION_9 . VAR_67 = VAR_68 ; VAR_69 -> VAR_70 . STRUCT_OR_UNION_10 . VAR_71 = VAR_72 ; VAR_73 = VAR_74 [ VAR_75 ] . VAR_76 ; METHOD_14 ( VAR_77 ) ; if ( VAR_78 [ VAR_79 ] . VAR_80 == VAR_81 ) { METHOD_15 ( & VAR_82 [ VAR_83 ] . VAR_84 , VAR_85 ) ; METHOD_16 ( ) ; return VAR_86 ; } if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 ) ; METHOD_19 ( VAR_90 ) ; METHOD_20 ( & VAR_91 [ VAR_92 ] . VAR_93 , VAR_94 ) ; METHOD_21 ( ) ; return VAR_95 ; }",166
167,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_1 -> STRUCT_OR_UNION_3 ; if ( ! VAR_2 -> VAR_3 . VAR_4 ) METHOD_1 ( VAR_5 ) ; while ( 1 ) { if ( METHOD_2 ( & VAR_6 -> VAR_7 , & VAR_8 -> VAR_9 ) ) break ; if ( VAR_10 -> VAR_11 . STRUCT_OR_UNION_4 != VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) { struct STRUCT_OR_UNION_5 * VAR_16 = VAR_17 -> VAR_18 . STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * VAR_19 = VAR_20 -> VAR_21 ; unsigned VAR_22 ; STRUCT_OR_UNION_8 = VAR_23 -> VAR_24 ; VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_4 ( METHOD_5 ( & VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ) ) return - VAR_32 ; VAR_33 -> VAR_34 . STRUCT_OR_UNION_9 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ;  break ;  } else { struct STRUCT_OR_UNION_10 * VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 . VAR_42 ) ; struct STRUCT_OR_UNION_11 * VAR_43 = VAR_44 -> VAR_45 ; struct STRUCT_OR_UNION_12 * VAR_46 = VAR_47 -> VAR_48 ; struct STRUCT_OR_UNION_13 * VAR_49 = VAR_50 -> VAR_51 ; unsigned VAR_52 = METHOD_7 ( & VAR_53 -> VAR_54 ) ; if ( METHOD_8 ( METHOD_9 ( & VAR_55 , VAR_56 -> VAR_57 ) ) ) return - VAR_58 ; if ( & VAR_59 -> VAR_60 == VAR_61 -> VAR_62 . VAR_63 ) break ; VAR_64 -> VAR_65 . STRUCT_OR_UNION_14 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = & VAR_70 -> VAR_71 ; STRUCT_OR_UNION_15 = VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ; } } while ( METHOD_10 ( METHOD_11 ( VAR_76 -> VAR_77 . STRUCT_OR_UNION_16 ) ) ) { struct STRUCT_OR_UNION_17 * VAR_78 ; VAR_79 = METHOD_12 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 -> VAR_84 . STRUCT_OR_UNION_18 ) ; if ( METHOD_13 ( METHOD_14 ( & VAR_85 , VAR_86 -> VAR_87 ) ) ) return - VAR_88 ; if ( ! VAR_89 ) break ; VAR_90 -> VAR_91 . VAR_92 = & VAR_93 -> VAR_94 ; VAR_95 -> VAR_96 . STRUCT_OR_UNION_19 = VAR_97 -> VAR_98 . VAR_99 ; STRUCT_OR_UNION_20 = VAR_100 -> VAR_101 . STRUCT_OR_UNION_21 -> VAR_102 ; VAR_103 -> VAR_104 = METHOD_15 ( & VAR_105 -> VAR_106 . STRUCT_OR_UNION_22 -> VAR_107 ) ; } VAR_108 -> STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_1 -> STRUCT_OR_UNION_3 ; if ( ! VAR_2 -> VAR_3 . VAR_4 ) METHOD_1 ( VAR_5 ) ; while ( 1 ) { if ( METHOD_2 ( & VAR_6 -> VAR_7 , & VAR_8 -> VAR_9 ) ) break ; if ( VAR_10 -> VAR_11 . STRUCT_OR_UNION_4 != VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) { struct STRUCT_OR_UNION_5 * VAR_16 = VAR_17 -> VAR_18 . STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * VAR_19 = VAR_20 -> VAR_21 ; unsigned VAR_22 ; STRUCT_OR_UNION_8 = VAR_23 -> VAR_24 ; VAR_25 = METHOD_3 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_4 ( METHOD_5 ( & VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ) ) return - VAR_32 ; VAR_33 -> VAR_34 . STRUCT_OR_UNION_9 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; break ; } else { struct STRUCT_OR_UNION_10 * VAR_39 = METHOD_6 ( VAR_40 -> VAR_41 . VAR_42 ) ; struct STRUCT_OR_UNION_11 * VAR_43 = VAR_44 -> VAR_45 ; struct STRUCT_OR_UNION_12 * VAR_46 = VAR_47 -> VAR_48 ; struct STRUCT_OR_UNION_13 * VAR_49 = VAR_50 -> VAR_51 ; unsigned VAR_52 = METHOD_7 ( & VAR_53 -> VAR_54 ) ; if ( METHOD_8 ( METHOD_9 ( & VAR_55 , VAR_56 -> VAR_57 ) ) ) return - VAR_58 ; if ( & VAR_59 -> VAR_60 == VAR_61 -> VAR_62 . VAR_63 ) break ; VAR_64 -> VAR_65 . STRUCT_OR_UNION_14 = VAR_66 ; VAR_67 -> VAR_68 . VAR_69 = & VAR_70 -> VAR_71 ; STRUCT_OR_UNION_15 = VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ; } } while ( METHOD_10 ( METHOD_11 ( VAR_76 -> VAR_77 . STRUCT_OR_UNION_16 ) ) ) { struct STRUCT_OR_UNION_17 * VAR_78 ; VAR_79 = METHOD_12 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 -> VAR_84 . STRUCT_OR_UNION_18 ) ; if ( METHOD_13 ( METHOD_14 ( & VAR_85 , VAR_86 -> VAR_87 ) ) ) return - VAR_88 ; if ( ! VAR_89 ) break ; VAR_90 -> VAR_91 . VAR_92 = & VAR_93 -> VAR_94 ; VAR_95 -> VAR_96 . STRUCT_OR_UNION_19 = VAR_97 -> VAR_98 . VAR_99 ; STRUCT_OR_UNION_20 = VAR_100 -> VAR_101 . STRUCT_OR_UNION_21 -> VAR_102 ; VAR_103 -> VAR_104 = METHOD_15 ( & VAR_105 -> VAR_106 . STRUCT_OR_UNION_22 -> VAR_107 ) ; } VAR_108 -> STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 ; return 0 ; }",167
168,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 = ( TYPE_7 ) VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 [ 100 + VAR_9 ] ; TYPE_10 VAR_10 = 0 ; if ( ! METHOD_1 ( VAR_11 ) ) { METHOD_2 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , ""Error:SQL_INVALID_HANDLE"" ) ; return VAR_16 ; } METHOD_3 ( VAR_17 ) ; if ( VAR_18 . VAR_19 ) {  METHOD_4 ( VAR_20 -> VAR_21 , ""\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor=%p\\\n\\n\\t\\t\\tRecNumber=%d\\\n\\n\\t\\t\\tFieldIdent=%s\\\n\\n\\t\\t\\tValue=%p\\\n\\n\\t\\t\\tBufferLength=%d"" ,  VAR_22 , VAR_23 , METHOD_5 ( VAR_24 , VAR_25 ) , VAR_26 , ( TYPE_11 ) VAR_27 ) ; METHOD_6 ( VAR_28 , VAR_29 , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; } METHOD_7 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 -> VAR_38 < VAR_39 ) { METHOD_8 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 , ""Error:HY010"" ) ; METHOD_9 ( & VAR_44 -> VAR_45 , VAR_46 , VAR_47 , VAR_48 -> VAR_49 -> VAR_50 -> VAR_51 ) ; return METHOD_10 ( VAR_52 , VAR_53 , VAR_54 ) ; } if ( METHOD_11 ( VAR_55 , VAR_56 ) || METHOD_12 ( VAR_57 , VAR_58 ) || METHOD_13 ( VAR_59 , VAR_60 ) || METHOD_14 ( VAR_61 , VAR_62 ) || METHOD_15 ( VAR_63 , VAR_64 ) || METHOD_16 ( VAR_65 , VAR_66 ) || METHOD_17 ( VAR_67 , VAR_68 ) || METHOD_18 ( VAR_69 , VAR_70 ) ) { METHOD_19 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 , ""Error:HY010"" ) ; METHOD_20 ( & VAR_75 -> VAR_76 , VAR_77 , VAR_78 , VAR_79 -> VAR_80 -> VAR_81 -> VAR_82 ) ; return METHOD_21 ( VAR_83 , VAR_84 , VAR_85 ) ; } if ( VAR_86 < 0 ) { METHOD_22 ( & VAR_87 -> VAR_88 , VAR_89 , VAR_90 , VAR_91 -> VAR_92 -> VAR_93 -> VAR_94 ) ; return METHOD_23 ( VAR_95 , VAR_96 , VAR_97 ) ; } switch ( VAR_98 ) { case VAR_99 : case VAR_100 : case VAR_101 : case VAR_102 : case VAR_103 : case VAR_104 : case VAR_105 : case VAR_106 : case VAR_107 : case VAR_108 : case VAR_109 : case VAR_110 : case VAR_111 : case VAR_112 : case VAR_113 : case VAR_114 : case VAR_115 : case VAR_116 : case VAR_117 : case VAR_118 : case VAR_119 : case VAR_120 : case VAR_121 : case VAR_122 : case VAR_123 : case VAR_124 : case VAR_125 : case VAR_126 : case VAR_127 : case VAR_128 : VAR_129 = 0 ; break ; case VAR_130 : case VAR_131 : case VAR_132 : case VAR_133 : case VAR_134 : case VAR_135 : case VAR_136 : case VAR_137 : case VAR_138 : case VAR_139 : case VAR_140 : VAR_141 = 1 ; break ; default : VAR_142 = VAR_143 != VAR_144 && VAR_145 != VAR_146 && VAR_147 != VAR_148 && VAR_149 != VAR_150 && VAR_151 != VAR_152 ; } if ( VAR_153 && VAR_154 < 0 && VAR_155 != VAR_156 ) { METHOD_24 ( & VAR_157 -> VAR_158 , VAR_159 , VAR_160 , VAR_161 -> VAR_162 -> VAR_163 -> VAR_164 ) ; return METHOD_25 ( VAR_165 , VAR_166 , VAR_167 ) ; }  if ( VAR_168 == VAR_169 && ( TYPE_12 ) VAR_170 < 0 )  { METHOD_26 ( & VAR_171 -> VAR_172 , VAR_173 , VAR_174 , VAR_175 -> VAR_176 -> VAR_177 -> VAR_178 ) ; return METHOD_27 ( VAR_179 , VAR_180 , VAR_181 ) ; }  if ( VAR_182 == VAR_183 && VAR_184 != VAR_185   && VAR_186 != VAR_187 && VAR_188 != VAR_189 &&   VAR_190 != VAR_191 && VAR_192 != VAR_193 )  { METHOD_28 ( & VAR_194 -> VAR_195 , VAR_196 , VAR_197 , VAR_198 -> VAR_199 -> VAR_200 -> VAR_201 ) ; return METHOD_29 ( VAR_202 , VAR_203 , VAR_204 ) ; } if ( METHOD_30 ( VAR_205 -> VAR_206 ) ) { VAR_207 = METHOD_31 ( VAR_208 -> VAR_209 , VAR_210 -> VAR_211 , VAR_212 , VAR_213 , VAR_214 , VAR_215 ) ; } else if ( METHOD_32 ( VAR_216 -> VAR_217 ) ) { TYPE_13 * VAR_218 = VAR_219 ; if ( VAR_220 ) { VAR_221 = METHOD_33 ( VAR_222 , VAR_223 , VAR_224 -> VAR_225 , VAR_226 ) ; if ( VAR_227 != VAR_228 ) { VAR_229 *= sizeof ( TYPE_14 ) ; } } else { VAR_230 = VAR_231 ; } VAR_232 = METHOD_34 ( VAR_233 -> VAR_234 , VAR_235 -> VAR_236 , VAR_237 , VAR_238 , VAR_239 , VAR_240 ) ; if ( VAR_241 ) { if ( VAR_242 ) METHOD_35 ( VAR_243 ) ; } } else { METHOD_36 ( VAR_244 , VAR_245 , VAR_246 , VAR_247 , ""Error:IM001"" ) ; METHOD_37 ( & VAR_248 -> VAR_249 , VAR_250 , VAR_251 , VAR_252 -> VAR_253 -> VAR_254 -> VAR_255 ) ; return METHOD_38 ( VAR_256 , VAR_257 , VAR_258 ) ; } if ( VAR_259 . VAR_260 ) { METHOD_39 ( VAR_261 -> VAR_262 , ""\\n\\t\\tExit:[%s]"" , METHOD_40 ( VAR_263 , VAR_264 ) ) ; METHOD_41 ( VAR_265 , VAR_266 , VAR_267 , VAR_268 , VAR_269 -> VAR_270 ) ; } return METHOD_42 ( VAR_271 , VAR_272 , VAR_273 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 = ( TYPE_7 ) VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 [ 100 + VAR_9 ] ; TYPE_10 VAR_10 = 0 ; if ( ! METHOD_1 ( VAR_11 ) ) { METHOD_2 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , ""Error:SQL_INVALID_HANDLE"" ) ; return VAR_16 ; } METHOD_3 ( VAR_17 ) ; if ( VAR_18 . VAR_19 ) { METHOD_4 ( VAR_20 -> VAR_21 , ""\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor=%p\\\n\\n\\t\\t\\tRecNumber=%d\\\n\\n\\t\\t\\tFieldIdent=%s\\\n\\n\\t\\t\\tValue=%p\\\n\\n\\t\\t\\tBufferLength=%d"" , VAR_22 , VAR_23 , METHOD_5 ( VAR_24 , VAR_25 ) , VAR_26 , ( TYPE_11 ) VAR_27 ) ; METHOD_6 ( VAR_28 , VAR_29 , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; } METHOD_7 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 -> VAR_38 < VAR_39 ) { METHOD_8 ( VAR_40 , VAR_41 , VAR_42 , VAR_43 , ""Error:HY010"" ) ; METHOD_9 ( & VAR_44 -> VAR_45 , VAR_46 , VAR_47 , VAR_48 -> VAR_49 -> VAR_50 -> VAR_51 ) ; return METHOD_10 ( VAR_52 , VAR_53 , VAR_54 ) ; } if ( METHOD_11 ( VAR_55 , VAR_56 ) || METHOD_12 ( VAR_57 , VAR_58 ) || METHOD_13 ( VAR_59 , VAR_60 ) || METHOD_14 ( VAR_61 , VAR_62 ) || METHOD_15 ( VAR_63 , VAR_64 ) || METHOD_16 ( VAR_65 , VAR_66 ) || METHOD_17 ( VAR_67 , VAR_68 ) || METHOD_18 ( VAR_69 , VAR_70 ) ) { METHOD_19 ( VAR_71 , VAR_72 , VAR_73 , VAR_74 , ""Error:HY010"" ) ; METHOD_20 ( & VAR_75 -> VAR_76 , VAR_77 , VAR_78 , VAR_79 -> VAR_80 -> VAR_81 -> VAR_82 ) ; return METHOD_21 ( VAR_83 , VAR_84 , VAR_85 ) ; } if ( VAR_86 < 0 ) { METHOD_22 ( & VAR_87 -> VAR_88 , VAR_89 , VAR_90 , VAR_91 -> VAR_92 -> VAR_93 -> VAR_94 ) ; return METHOD_23 ( VAR_95 , VAR_96 , VAR_97 ) ; } switch ( VAR_98 ) { case VAR_99 : case VAR_100 : case VAR_101 : case VAR_102 : case VAR_103 : case VAR_104 : case VAR_105 : case VAR_106 : case VAR_107 : case VAR_108 : case VAR_109 : case VAR_110 : case VAR_111 : case VAR_112 : case VAR_113 : case VAR_114 : case VAR_115 : case VAR_116 : case VAR_117 : case VAR_118 : case VAR_119 : case VAR_120 : case VAR_121 : case VAR_122 : case VAR_123 : case VAR_124 : case VAR_125 : case VAR_126 : case VAR_127 : case VAR_128 : VAR_129 = 0 ; break ; case VAR_130 : case VAR_131 : case VAR_132 : case VAR_133 : case VAR_134 : case VAR_135 : case VAR_136 : case VAR_137 : case VAR_138 : case VAR_139 : case VAR_140 : VAR_141 = 1 ; break ; default : VAR_142 = VAR_143 != VAR_144 && VAR_145 != VAR_146 && VAR_147 != VAR_148 && VAR_149 != VAR_150 && VAR_151 != VAR_152 ; } if ( VAR_153 && VAR_154 < 0 && VAR_155 != VAR_156 ) { METHOD_24 ( & VAR_157 -> VAR_158 , VAR_159 , VAR_160 , VAR_161 -> VAR_162 -> VAR_163 -> VAR_164 ) ; return METHOD_25 ( VAR_165 , VAR_166 , VAR_167 ) ; } if ( VAR_168 == VAR_169 && ( TYPE_12 ) VAR_170 < 0 ) { METHOD_26 ( & VAR_171 -> VAR_172 , VAR_173 , VAR_174 , VAR_175 -> VAR_176 -> VAR_177 -> VAR_178 ) ; return METHOD_27 ( VAR_179 , VAR_180 , VAR_181 ) ; } if ( VAR_182 == VAR_183 && ( TYPE_15 ) VAR_184 != VAR_185 && ( TYPE_15 ) VAR_186 != VAR_187 && ( TYPE_15 ) VAR_188 != VAR_189 && ( TYPE_15 ) VAR_190 != VAR_191 && ( TYPE_15 ) VAR_192 != VAR_193 ) { METHOD_28 ( & VAR_194 -> VAR_195 , VAR_196 , VAR_197 , VAR_198 -> VAR_199 -> VAR_200 -> VAR_201 ) ; return METHOD_29 ( VAR_202 , VAR_203 , VAR_204 ) ; } if ( METHOD_30 ( VAR_205 -> VAR_206 ) ) { VAR_207 = METHOD_31 ( VAR_208 -> VAR_209 , VAR_210 -> VAR_211 , VAR_212 , VAR_213 , VAR_214 , VAR_215 ) ; } else if ( METHOD_32 ( VAR_216 -> VAR_217 ) ) { TYPE_13 * VAR_218 = VAR_219 ; if ( VAR_220 ) { VAR_221 = METHOD_33 ( VAR_222 , VAR_223 , VAR_224 -> VAR_225 , VAR_226 ) ; if ( VAR_227 != VAR_228 ) { VAR_229 *= sizeof ( TYPE_14 ) ; } } else { VAR_230 = VAR_231 ; } VAR_232 = METHOD_34 ( VAR_233 -> VAR_234 , VAR_235 -> VAR_236 , VAR_237 , VAR_238 , VAR_239 , VAR_240 ) ; if ( VAR_241 ) { if ( VAR_242 ) METHOD_35 ( VAR_243 ) ; } } else { METHOD_36 ( VAR_244 , VAR_245 , VAR_246 , VAR_247 , ""Error:IM001"" ) ; METHOD_37 ( & VAR_248 -> VAR_249 , VAR_250 , VAR_251 , VAR_252 -> VAR_253 -> VAR_254 -> VAR_255 ) ; return METHOD_38 ( VAR_256 , VAR_257 , VAR_258 ) ; } if ( VAR_259 . VAR_260 ) { METHOD_39 ( VAR_261 -> VAR_262 , ""\\n\\t\\tExit:[%s]"" , METHOD_40 ( VAR_263 , VAR_264 ) ) ; METHOD_41 ( VAR_265 , VAR_266 , VAR_267 , VAR_268 , VAR_269 -> VAR_270 ) ; } return METHOD_42 ( VAR_271 , VAR_272 , VAR_273 ) ; }",168
169,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_6 * VAR_7 ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 ; TYPE_3 VAR_10 , VAR_11 , VAR_12 ; TYPE_4 VAR_13 ; unsigned VAR_14 = 0 ; METHOD_1 ( METHOD_2 ( VAR_15 ) == 0 ) ; VAR_16 = METHOD_3 ( STRUCT_OR_UNION_8 ) ; VAR_17 = VAR_18 [ VAR_19 ] . VAR_20 ; METHOD_4 ( VAR_21 [ VAR_22 ] . VAR_23 == VAR_24 ) ;  if ( VAR_25 && ( VAR_26 != VAR_27 )  && METHOD_5 ( STRUCT_OR_UNION_9 , VAR_28 , VAR_29 ) ) { METHOD_6 ( ""append[%d]%dblockto%d:[%d]%d(from%llu)\\n"" , METHOD_7 ( VAR_30 ) , METHOD_8 ( VAR_31 ) , METHOD_9 ( VAR_32 -> VAR_33 ) , METHOD_10 ( VAR_34 ) , METHOD_11 ( VAR_35 ) , METHOD_12 ( VAR_36 ) ) ; VAR_37 = METHOD_13 ( VAR_38 , STRUCT_OR_UNION_10 , VAR_39 + VAR_40 ) ; if ( VAR_41 ) return VAR_42 ; if ( METHOD_14 ( VAR_43 ) ) VAR_44 = 1 ; VAR_45 -> VAR_46 = METHOD_15 ( METHOD_16 ( VAR_47 ) + METHOD_17 ( VAR_48 ) ) ; if ( VAR_49 ) METHOD_18 ( VAR_50 ) ; VAR_51 = VAR_52 [ VAR_53 ] . VAR_54 ; VAR_55 = VAR_56 ; goto VAR_57 ; } VAR_58 : VAR_59 = METHOD_19 ( STRUCT_OR_UNION_11 ) ; VAR_60 = VAR_61 [ VAR_62 ] . VAR_63 ; if ( METHOD_20 ( VAR_64 -> VAR_65 ) < METHOD_21 ( VAR_66 -> VAR_67 ) ) goto VAR_68 ; VAR_69 = METHOD_22 ( VAR_70 ) ; VAR_71 = METHOD_23 ( STRUCT_OR_UNION_12 , VAR_72 ) ; if ( METHOD_24 ( VAR_73 -> VAR_74 ) > METHOD_25 ( VAR_75 -> VAR_76 ) && VAR_77 != VAR_78 ) { METHOD_26 ( ""nextleafblock-%d\\n"" , VAR_79 ) ; METHOD_27 ( VAR_80 != VAR_81 ) ; VAR_82 = METHOD_28 ( STRUCT_OR_UNION_13 , VAR_83 , VAR_84 ) ; if ( METHOD_29 ( VAR_85 ) ) return METHOD_30 ( VAR_86 ) ; METHOD_31 ( VAR_87 -> VAR_88 != VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 [ VAR_93 ] . VAR_94 ; if ( METHOD_32 ( VAR_95 -> VAR_96 ) < METHOD_33 ( VAR_97 -> VAR_98 ) ) { METHOD_34 ( ""nextleafisntfull(%d)\\n"" , METHOD_35 ( VAR_99 -> VAR_100 ) ) ; VAR_101 = VAR_102 ; goto VAR_103 ; } METHOD_36 ( ""nextleafhasnofreespace(%d,%d)\\n"" , METHOD_37 ( VAR_104 -> VAR_105 ) , METHOD_38 ( VAR_106 -> VAR_107 ) ) ; } VAR_108 = METHOD_39 ( VAR_109 , STRUCT_OR_UNION_14 , VAR_110 , VAR_111 ) ; if ( VAR_112 ) goto VAR_113 ; VAR_114 = METHOD_40 ( STRUCT_OR_UNION_15 ) ; VAR_115 = VAR_116 [ VAR_117 ] . VAR_118 ; VAR_119 : VAR_120 = VAR_121 [ VAR_122 ] . VAR_123 ; VAR_124 = METHOD_41 ( VAR_125 , STRUCT_OR_UNION_16 , VAR_126 + VAR_127 ) ; if ( VAR_128 ) goto VAR_129 ; if ( ! VAR_130 ) { METHOD_42 ( ""firstextentintheleaf:%d:%llu:[%d]%d\\n"" , METHOD_43 ( VAR_131 -> VAR_132 ) , METHOD_44 ( VAR_133 ) , METHOD_45 ( VAR_134 ) , METHOD_46 ( VAR_135 ) ) ; VAR_136 [ VAR_137 ] . VAR_138 = METHOD_47 ( VAR_139 ) ; } else if ( METHOD_48 ( VAR_140 -> VAR_141 ) > METHOD_49 ( VAR_142 -> VAR_143 ) ) { if ( VAR_144 != METHOD_50 ( VAR_145 ) ) { VAR_146 = METHOD_51 ( VAR_147 ) - VAR_148 ; VAR_149 = ( VAR_150 - 1 ) * sizeof ( struct STRUCT_OR_UNION_17 ) ; VAR_151 = VAR_152 < 0 ? 0 : VAR_153 ; METHOD_52 ( ""insert%d:%llu:[%d]%dafter:nearest0x%p,"" ""move%dfrom0x%pto0x%p\\n"" , METHOD_53 ( VAR_154 -> VAR_155 ) , METHOD_54 ( VAR_156 ) , METHOD_55 ( VAR_157 ) , METHOD_56 ( VAR_158 ) , VAR_159 , VAR_160 , VAR_161 + 1 , VAR_162 + 2 ) ; METHOD_57 ( VAR_163 + 2 , VAR_164 + 1 , VAR_165 ) ; } VAR_166 [ VAR_167 ] . VAR_168 = VAR_169 + 1 ; } else { METHOD_58 ( VAR_170 -> VAR_171 == VAR_172 -> VAR_173 ) ; VAR_174 = ( METHOD_59 ( VAR_175 ) - VAR_176 ) * sizeof ( struct STRUCT_OR_UNION_18 ) ; VAR_177 = VAR_178 < 0 ? 0 : VAR_179 ; METHOD_60 ( ""insert%d:%llu:[%d]%dbefore:nearest0x%p,"" ""move%dfrom0x%pto0x%p\\n"" , METHOD_61 ( VAR_180 -> VAR_181 ) , METHOD_62 ( VAR_182 ) , METHOD_63 ( VAR_183 ) , METHOD_64 ( VAR_184 ) , VAR_185 , VAR_186 , VAR_187 + 1 , VAR_188 + 2 ) ; METHOD_65 ( VAR_189 + 1 , VAR_190 , VAR_191 ) ; VAR_192 [ VAR_193 ] . VAR_194 = VAR_195 ; } METHOD_66 ( & VAR_196 -> VAR_197 , 1 ) ; VAR_198 = VAR_199 [ VAR_200 ] . VAR_201 ; VAR_202 -> VAR_203 = VAR_204 -> VAR_205 ; METHOD_67 ( VAR_206 , METHOD_68 ( VAR_207 ) ) ; VAR_208 -> VAR_209 = VAR_210 -> VAR_211 ; VAR_212 :  if ( VAR_213 != VAR_214 )  METHOD_69 ( STRUCT_OR_UNION_19 , VAR_215 , VAR_216 ) ; VAR_217 = METHOD_70 ( VAR_218 , STRUCT_OR_UNION_20 , VAR_219 ) ; if ( VAR_220 ) goto VAR_221 ; VAR_222 = METHOD_71 ( VAR_223 , STRUCT_OR_UNION_21 , VAR_224 + VAR_225 ) ; VAR_226 : if ( VAR_227 ) { METHOD_72 ( VAR_228 ) ; METHOD_73 ( VAR_229 ) ; } METHOD_74 ( STRUCT_OR_UNION_22 ) ; return VAR_230 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_6 * VAR_7 ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 ; TYPE_3 VAR_10 , VAR_11 , VAR_12 ; TYPE_4 VAR_13 ; unsigned VAR_14 = 0 ; METHOD_1 ( METHOD_2 ( VAR_15 ) == 0 ) ; VAR_16 = METHOD_3 ( STRUCT_OR_UNION_8 ) ; VAR_17 = VAR_18 [ VAR_19 ] . VAR_20 ; METHOD_4 ( VAR_21 [ VAR_22 ] . VAR_23 == VAR_24 ) ; if ( VAR_25 && ( VAR_26 != VAR_27 ) && METHOD_5 ( STRUCT_OR_UNION_9 , VAR_28 , VAR_29 ) ) { METHOD_6 ( ""append[%d]%dblockto%d:[%d]%d(from%llu)\\n"" , METHOD_7 ( VAR_30 ) , METHOD_8 ( VAR_31 ) , METHOD_9 ( VAR_32 -> VAR_33 ) , METHOD_10 ( VAR_34 ) , METHOD_11 ( VAR_35 ) , METHOD_12 ( VAR_36 ) ) ; VAR_37 = METHOD_13 ( VAR_38 , STRUCT_OR_UNION_10 , VAR_39 + VAR_40 ) ; if ( VAR_41 ) return VAR_42 ; if ( METHOD_14 ( VAR_43 ) ) VAR_44 = 1 ; VAR_45 -> VAR_46 = METHOD_15 ( METHOD_16 ( VAR_47 ) + METHOD_17 ( VAR_48 ) ) ; if ( VAR_49 ) METHOD_18 ( VAR_50 ) ; VAR_51 = VAR_52 [ VAR_53 ] . VAR_54 ; VAR_55 = VAR_56 ; goto VAR_57 ; } VAR_58 : VAR_59 = METHOD_19 ( STRUCT_OR_UNION_11 ) ; VAR_60 = VAR_61 [ VAR_62 ] . VAR_63 ; if ( METHOD_20 ( VAR_64 -> VAR_65 ) < METHOD_21 ( VAR_66 -> VAR_67 ) ) goto VAR_68 ; VAR_69 = METHOD_22 ( VAR_70 ) ; VAR_71 = METHOD_23 ( STRUCT_OR_UNION_12 , VAR_72 ) ; if ( METHOD_24 ( VAR_73 -> VAR_74 ) > METHOD_25 ( VAR_75 -> VAR_76 ) && VAR_77 != VAR_78 ) { METHOD_26 ( ""nextleafblock-%d\\n"" , VAR_79 ) ; METHOD_27 ( VAR_80 != VAR_81 ) ; VAR_82 = METHOD_28 ( STRUCT_OR_UNION_13 , VAR_83 , VAR_84 ) ; if ( METHOD_29 ( VAR_85 ) ) return METHOD_30 ( VAR_86 ) ; METHOD_31 ( VAR_87 -> VAR_88 != VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 [ VAR_93 ] . VAR_94 ; if ( METHOD_32 ( VAR_95 -> VAR_96 ) < METHOD_33 ( VAR_97 -> VAR_98 ) ) { METHOD_34 ( ""nextleafisntfull(%d)\\n"" , METHOD_35 ( VAR_99 -> VAR_100 ) ) ; VAR_101 = VAR_102 ; goto VAR_103 ; } METHOD_36 ( ""nextleafhasnofreespace(%d,%d)\\n"" , METHOD_37 ( VAR_104 -> VAR_105 ) , METHOD_38 ( VAR_106 -> VAR_107 ) ) ; } VAR_108 = METHOD_39 ( VAR_109 , STRUCT_OR_UNION_14 , VAR_110 , VAR_111 ) ; if ( VAR_112 ) goto VAR_113 ; VAR_114 = METHOD_40 ( STRUCT_OR_UNION_15 ) ; VAR_115 = VAR_116 [ VAR_117 ] . VAR_118 ; VAR_119 : VAR_120 = VAR_121 [ VAR_122 ] . VAR_123 ; VAR_124 = METHOD_41 ( VAR_125 , STRUCT_OR_UNION_16 , VAR_126 + VAR_127 ) ; if ( VAR_128 ) goto VAR_129 ; if ( ! VAR_130 ) { METHOD_42 ( ""firstextentintheleaf:%d:%llu:[%d]%d\\n"" , METHOD_43 ( VAR_131 -> VAR_132 ) , METHOD_44 ( VAR_133 ) , METHOD_45 ( VAR_134 ) , METHOD_46 ( VAR_135 ) ) ; VAR_136 [ VAR_137 ] . VAR_138 = METHOD_47 ( VAR_139 ) ; } else if ( METHOD_48 ( VAR_140 -> VAR_141 ) > METHOD_49 ( VAR_142 -> VAR_143 ) ) { if ( VAR_144 != METHOD_50 ( VAR_145 ) ) { VAR_146 = METHOD_51 ( VAR_147 ) - VAR_148 ; VAR_149 = ( VAR_150 - 1 ) * sizeof ( struct STRUCT_OR_UNION_17 ) ; VAR_151 = VAR_152 < 0 ? 0 : VAR_153 ; METHOD_52 ( ""insert%d:%llu:[%d]%dafter:nearest0x%p,"" ""move%dfrom0x%pto0x%p\\n"" , METHOD_53 ( VAR_154 -> VAR_155 ) , METHOD_54 ( VAR_156 ) , METHOD_55 ( VAR_157 ) , METHOD_56 ( VAR_158 ) , VAR_159 , VAR_160 , VAR_161 + 1 , VAR_162 + 2 ) ; METHOD_57 ( VAR_163 + 2 , VAR_164 + 1 , VAR_165 ) ; } VAR_166 [ VAR_167 ] . VAR_168 = VAR_169 + 1 ; } else { METHOD_58 ( VAR_170 -> VAR_171 == VAR_172 -> VAR_173 ) ; VAR_174 = ( METHOD_59 ( VAR_175 ) - VAR_176 ) * sizeof ( struct STRUCT_OR_UNION_18 ) ; VAR_177 = VAR_178 < 0 ? 0 : VAR_179 ; METHOD_60 ( ""insert%d:%llu:[%d]%dbefore:nearest0x%p,"" ""move%dfrom0x%pto0x%p\\n"" , METHOD_61 ( VAR_180 -> VAR_181 ) , METHOD_62 ( VAR_182 ) , METHOD_63 ( VAR_183 ) , METHOD_64 ( VAR_184 ) , VAR_185 , VAR_186 , VAR_187 + 1 , VAR_188 + 2 ) ; METHOD_65 ( VAR_189 + 1 , VAR_190 , VAR_191 ) ; VAR_192 [ VAR_193 ] . VAR_194 = VAR_195 ; } METHOD_66 ( & VAR_196 -> VAR_197 , 1 ) ; VAR_198 = VAR_199 [ VAR_200 ] . VAR_201 ; VAR_202 -> VAR_203 = VAR_204 -> VAR_205 ; METHOD_67 ( VAR_206 , METHOD_68 ( VAR_207 ) ) ; VAR_208 -> VAR_209 = VAR_210 -> VAR_211 ; VAR_212 : if ( ! ( VAR_213 & VAR_214 ) ) METHOD_69 ( STRUCT_OR_UNION_19 , VAR_215 , VAR_216 ) ; VAR_217 = METHOD_70 ( VAR_218 , STRUCT_OR_UNION_20 , VAR_219 ) ; if ( VAR_220 ) goto VAR_221 ; VAR_222 = METHOD_71 ( VAR_223 , STRUCT_OR_UNION_21 , VAR_224 + VAR_225 ) ; VAR_226 : if ( VAR_227 ) { METHOD_72 ( VAR_228 ) ; METHOD_73 ( VAR_229 ) ; } METHOD_74 ( STRUCT_OR_UNION_22 ) ; return VAR_230 ; }",169
170,"static TYPE_0  METHOD_0 ( unsigned TYPE_1 VAR_0 )  { struct STRUCT_OR_UNION_0 TYPE_2 * VAR_1 = ( TYPE_3 TYPE_4 * ) VAR_2 ; struct STRUCT_OR_UNION_1 VAR_3 ;  TYPE_5 * VAR_4 ;  TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( METHOD_1 ( & VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_2 ) ) ) { printk ( TYPE_8 TYPE_9 ""%s@%d::mptctl_replace_fw-"" ""Unabletoreadinmpt_ioctl_replace_fwstruct@%p\\n"" , VAR_9 , VAR_10 , VAR_11 ) ;  return - VAR_12 ;  } if ( ( ( VAR_13 = METHOD_2 ( VAR_14 . VAR_15 . VAR_16 , & VAR_17 ) ) < 0 ) || ( VAR_18 == VAR_19 ) ) { printk ( TYPE_10 TYPE_11 ""%s::mptctl_replace_fw()@%d-ioc%dnotfound!\\n"" , VAR_20 , VAR_21 , VAR_22 ) ; return - VAR_23 ; } dctlprintk ( VAR_24 , printk ( MYIOC_s_DEBUG_FMT ""mptctl_replace_fwcalled.\\n"" , VAR_25 -> VAR_26 ) ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) return 0 ; METHOD_3 ( VAR_30 ) ; VAR_31 = METHOD_4 ( VAR_32 . VAR_33 , 4 ) ; METHOD_5 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 == VAR_38 ) return - VAR_39 ; if ( METHOD_6 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_replace_fw-"" ""Unabletoreadinmpt_ioctl_replace_fwimage"" ""@%p\\n"" , VAR_45 -> VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; METHOD_7 ( VAR_50 ) ; return - VAR_51 ; } VAR_52 -> VAR_53 . VAR_54 = VAR_55 ; return 0 ; }","static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_0 TYPE_2 * VAR_1 = ( TYPE_3 TYPE_4 * ) VAR_2 ; struct STRUCT_OR_UNION_1 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( METHOD_1 ( & VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_2 ) ) ) { printk ( TYPE_8 TYPE_9 ""%s@%d::mptctl_replace_fw-"" ""Unabletoreadinmpt_ioctl_replace_fwstruct@%p\\n"" , VAR_9 , VAR_10 , VAR_11 ) ; return - VAR_12 ; } if ( ( ( VAR_13 = METHOD_2 ( VAR_14 . VAR_15 . VAR_16 , & VAR_17 ) ) < 0 ) || ( VAR_18 == VAR_19 ) ) { printk ( TYPE_10 TYPE_11 ""%s::mptctl_replace_fw()@%d-ioc%dnotfound!\\n"" , VAR_20 , VAR_21 , VAR_22 ) ; return - VAR_23 ; } dctlprintk ( VAR_24 , printk ( MYIOC_s_DEBUG_FMT ""mptctl_replace_fwcalled.\\n"" , VAR_25 -> VAR_26 ) ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) return 0 ; METHOD_3 ( VAR_30 ) ; VAR_31 = METHOD_4 ( VAR_32 . VAR_33 , 4 ) ; METHOD_5 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 == VAR_38 ) return - VAR_39 ; if ( METHOD_6 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_replace_fw-"" ""Unabletoreadinmpt_ioctl_replace_fwimage"" ""@%p\\n"" , VAR_45 -> VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; METHOD_7 ( VAR_50 ) ; return - VAR_51 ; } VAR_52 -> VAR_53 . VAR_54 = VAR_55 ; return 0 ; }",170
171,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ VAR_2 ] = { 0 } ; TYPE_3 VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; const TYPE_5 VAR_6 [ VAR_7 ] = { 0 , 0 , 0 , 0 , 0 , 0 } ; if ( METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ) { TYPE_6 VAR_11 ; METHOD_2 ( ""%s,localbdaddrisstoredin%s"" , VAR_12 , VAR_13 ) ;  if ( ( VAR_14 = METHOD_3 ( VAR_15 , VAR_16 ) ) != - 1 )  { METHOD_4 ( VAR_17 , 0 , sizeof ( VAR_18 ) ) ;  METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ;  if ( ( METHOD_6 ( VAR_22 , VAR_23 ) ) && ( METHOD_7 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 ) != 0 ) ) { VAR_28 = VAR_29 ; METHOD_8 ( ""%s:GotFactoryBDA%s"" , VAR_30 , VAR_31 ) ; } METHOD_9 ( VAR_32 ) ; } } if ( ! VAR_33 ) { VAR_34 = sizeof ( VAR_35 ) ; if ( METHOD_10 ( ""Adapter"" , ""Address"" , VAR_36 , & VAR_37 ) ) { METHOD_11 ( VAR_38 , VAR_39 ) ; METHOD_12 ( ""localbdaddrfrombt_config.xmlis%s"" , VAR_40 ) ; return ; } } if ( ! VAR_41 ) { VAR_42 = METHOD_13 ( VAR_43 , VAR_44 ) ; } if ( ! VAR_45 ) { VAR_46 = METHOD_14 ( VAR_47 , VAR_48 ) ; } if ( ! VAR_49 ) { TYPE_7 VAR_50 ; METHOD_15 ( ( unsigned TYPE_8 ) ( METHOD_16 ( 0 ) ) ) ; VAR_51 -> VAR_52 [ 0 ] = 0x22 ; VAR_53 -> VAR_54 [ 1 ] = 0x22 ; VAR_55 -> VAR_56 [ 2 ] = ( TYPE_9 ) ( ( METHOD_17 ( ) >> 8 ) & 0xFF ) ; VAR_57 -> VAR_58 [ 3 ] = ( TYPE_10 ) ( ( METHOD_18 ( ) >> 8 ) & 0xFF ) ; VAR_59 -> VAR_60 [ 4 ] = ( TYPE_11 ) ( ( METHOD_19 ( ) >> 8 ) & 0xFF ) ; VAR_61 -> VAR_62 [ 5 ] = ( TYPE_12 ) ( ( METHOD_20 ( ) >> 8 ) & 0xFF ) ; METHOD_21 ( VAR_63 , VAR_64 , sizeof ( VAR_65 ) ) ; METHOD_22 ( ""NopresetBDA.GeneratingBDA:%sforprop%s"" , ( TYPE_13 * ) VAR_66 , VAR_67 ) ; if ( METHOD_23 ( VAR_68 , ( TYPE_14 * ) VAR_69 ) < 0 ) METHOD_24 ( ""FailedtosetrandomBDAinprop%s"" , VAR_70 ) ; } TYPE_15 VAR_71 ; METHOD_25 ( VAR_72 , VAR_73 , sizeof ( VAR_74 ) ) ; VAR_75 = sizeof ( VAR_76 ) ; if ( METHOD_26 ( ""Adapter"" , ""Address"" , VAR_77 , & VAR_78 ) ) { if ( METHOD_27 ( VAR_79 , VAR_80 ) == 0 ) { return ; } } METHOD_28 ( ""Adapter"" , ""Address"" , VAR_81 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 [ VAR_2 ] = { 0 } ; TYPE_3 VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; const TYPE_5 VAR_6 [ VAR_7 ] = { 0 , 0 , 0 , 0 , 0 , 0 } ; if ( METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ) { TYPE_6 VAR_11 ; METHOD_2 ( ""%s,localbdaddrisstoredin%s"" , VAR_12 , VAR_13 ) ; if ( ( VAR_14 = METHOD_3 ( VAR_15 , VAR_16 ) ) != - 1 ) { METHOD_4 ( VAR_17 , 0 , sizeof ( VAR_18 ) ) ; METHOD_29 ( METHOD_5 ( VAR_19 , VAR_20 , VAR_21 ) ; if ( ( METHOD_6 ( VAR_22 , VAR_23 ) ) && ( METHOD_7 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 ) != 0 ) ) { VAR_28 = VAR_29 ; METHOD_8 ( ""%s:GotFactoryBDA%s"" , VAR_30 , VAR_31 ) ; } METHOD_9 ( VAR_32 ) ; } } if ( ! VAR_33 ) { VAR_34 = sizeof ( VAR_35 ) ; if ( METHOD_10 ( ""Adapter"" , ""Address"" , VAR_36 , & VAR_37 ) ) { METHOD_11 ( VAR_38 , VAR_39 ) ; METHOD_12 ( ""localbdaddrfrombt_config.xmlis%s"" , VAR_40 ) ; return ; } } if ( ! VAR_41 ) { VAR_42 = METHOD_13 ( VAR_43 , VAR_44 ) ; } if ( ! VAR_45 ) { VAR_46 = METHOD_14 ( VAR_47 , VAR_48 ) ; } if ( ! VAR_49 ) { TYPE_7 VAR_50 ; METHOD_15 ( ( unsigned TYPE_8 ) ( METHOD_16 ( 0 ) ) ) ; VAR_51 -> VAR_52 [ 0 ] = 0x22 ; VAR_53 -> VAR_54 [ 1 ] = 0x22 ; VAR_55 -> VAR_56 [ 2 ] = ( TYPE_9 ) ( ( METHOD_17 ( ) >> 8 ) & 0xFF ) ; VAR_57 -> VAR_58 [ 3 ] = ( TYPE_10 ) ( ( METHOD_18 ( ) >> 8 ) & 0xFF ) ; VAR_59 -> VAR_60 [ 4 ] = ( TYPE_11 ) ( ( METHOD_19 ( ) >> 8 ) & 0xFF ) ; VAR_61 -> VAR_62 [ 5 ] = ( TYPE_12 ) ( ( METHOD_20 ( ) >> 8 ) & 0xFF ) ; METHOD_21 ( VAR_63 , VAR_64 , sizeof ( VAR_65 ) ) ; METHOD_22 ( ""NopresetBDA.GeneratingBDA:%sforprop%s"" , ( TYPE_13 * ) VAR_66 , VAR_67 ) ; if ( METHOD_23 ( VAR_68 , ( TYPE_14 * ) VAR_69 ) < 0 ) METHOD_24 ( ""FailedtosetrandomBDAinprop%s"" , VAR_70 ) ; } TYPE_15 VAR_71 ; METHOD_25 ( VAR_72 , VAR_73 , sizeof ( VAR_74 ) ) ; VAR_75 = sizeof ( VAR_76 ) ; if ( METHOD_26 ( ""Adapter"" , ""Address"" , VAR_77 , & VAR_78 ) ) { if ( METHOD_27 ( VAR_79 , VAR_80 ) == 0 ) { return ; } } METHOD_28 ( ""Adapter"" , ""Address"" , VAR_81 ) ; }",171
172,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 = 0 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 = 1 ; TYPE_8 VAR_8 = VAR_9 ; TYPE_9 VAR_10 = 0 ; VAR_11 -> VAR_12 = 0 ; while ( VAR_13 ) { VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 , & VAR_18 , & VAR_19 ) ; if ( ! METHOD_2 ( VAR_20 + VAR_21 , ""ptr"" , 3 ) ) { continue ; } else if ( ! METHOD_3 ( VAR_22 + VAR_23 , ""byte"" , 4 ) ) { VAR_24 -> VAR_25 |= VAR_26 | VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; } else if ( ! METHOD_4 ( VAR_33 + VAR_34 , ""word"" , 4 ) ) { VAR_35 -> VAR_36 |= VAR_37 | VAR_38 ; VAR_39 -> VAR_40 = VAR_41 ; VAR_42 = VAR_43 ; } else if ( ! METHOD_5 ( VAR_44 + VAR_45 , ""dword"" , 5 ) ) { VAR_46 -> VAR_47 |= VAR_48 | VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; } else if ( ! METHOD_6 ( VAR_55 + VAR_56 , ""qword"" , 5 ) ) { VAR_57 -> VAR_58 |= VAR_59 | VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } else if ( ! METHOD_7 ( VAR_66 + VAR_67 , ""oword"" , 5 ) ) { VAR_68 -> VAR_69 |= VAR_70 | VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } else if ( ! METHOD_8 ( VAR_77 + VAR_78 , ""tbyte"" , 5 ) ) { VAR_79 -> VAR_80 |= VAR_81 | VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 = VAR_87 ; } else { VAR_88 = 0 ; } } if ( VAR_89 [ VAR_90 ] == '[' ) { if ( ! VAR_91 -> VAR_92 ) { VAR_93 -> VAR_94 = VAR_95 ; } VAR_96 -> VAR_97 = VAR_98 -> VAR_99 [ 0 ] = VAR_100 -> VAR_101 [ 1 ] = 0 ; TYPE_10 VAR_102 = 1 ; TYPE_11 VAR_103 = VAR_104 ; TYPE_12 VAR_105 = VAR_106 ; while ( VAR_107 [ VAR_108 ] != ']' ) { if ( VAR_109 > VAR_110 ) { break ; } VAR_111 = VAR_112 ; if ( ! VAR_113 [ VAR_114 ] ) { break ; } VAR_115 = METHOD_9 ( VAR_116 , & VAR_117 , & VAR_118 ) ; if ( VAR_119 == VAR_120 ) { if ( VAR_121 [ VAR_122 ] == '+' || VAR_123 [ VAR_124 ] == '-' || VAR_125 [ VAR_126 ] == ']' ) { if ( VAR_127 != VAR_128 ) {  VAR_129 -> VAR_130 [ VAR_131 ] = VAR_132 ;  VAR_133 -> VAR_134 [ VAR_135 ] = VAR_136 ;  ++ VAR_137 ;  } else {  VAR_138 -> VAR_139 += VAR_140 ;   VAR_141 -> VAR_142 [ VAR_143 ] = VAR_144 ;  } VAR_145 = 1 ; VAR_146 = VAR_147 ; } else if ( VAR_148 [ VAR_149 ] == '*' ) { } } else if ( VAR_150 == VAR_151 ) { TYPE_13 VAR_152 = 0 ; if ( VAR_153 != VAR_154 ) { VAR_155 -> VAR_156 = 0 ; } VAR_157 = VAR_158 ; VAR_159 = METHOD_10 ( VAR_160 , VAR_161 , & VAR_162 , & VAR_163 ) ; if ( VAR_164 ) { VAR_165 -> VAR_166 = VAR_167 ; if ( VAR_168 > 8 ) { VAR_169 -> VAR_170 = VAR_171 ; VAR_172 -> VAR_173 = VAR_174 - 9 ; } VAR_175 = VAR_176 ; } else if ( VAR_177 > 8 ) { VAR_178 -> VAR_179 = VAR_180 - 9 ; } if ( VAR_181 & VAR_182 & VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 = VAR_189 ; METHOD_11 ( VAR_190 , VAR_191 , & VAR_192 , VAR_193 , VAR_194 ) ; return VAR_195 ; } if ( ! VAR_196 ) { VAR_197 -> VAR_198 |= VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 ; if ( ! ( VAR_206 & VAR_207 ) ) { VAR_208 -> VAR_209 = 0 ; } } else { TYPE_14 * VAR_210 = METHOD_12 ( VAR_211 , '+' ) ; VAR_212 -> VAR_213 = 1 ; if ( ! VAR_214 ) { VAR_215 = METHOD_13 ( VAR_216 , '-' ) ; if ( VAR_217 ) { VAR_218 -> VAR_219 = - 1 ; } } TYPE_15 * VAR_220 = METHOD_14 ( VAR_221 , '+' ) ; TYPE_16 * VAR_222 = METHOD_15 ( VAR_223 , '-' ) ; TYPE_17 * VAR_224 = METHOD_16 ( VAR_225 , ']' ) ; if ( VAR_226 && VAR_227 && VAR_228 < VAR_229 && VAR_230 < VAR_231 ) { VAR_232 -> VAR_233 = - 1 ; } TYPE_18 * VAR_234 ; VAR_235 = METHOD_17 ( METHOD_18 ( VAR_236 + VAR_237 ) + 1 ) ; METHOD_19 ( VAR_238 , VAR_239 + VAR_240 ) ; METHOD_20 ( VAR_241 , ""+-"" ) ; TYPE_19 VAR_242 = METHOD_21 ( VAR_243 , VAR_244 ) ; METHOD_22 ( VAR_245 ) ; VAR_246 *= VAR_247 ; } } } else if ( VAR_248 == VAR_249 ) { VAR_250 = VAR_251 ; VAR_252 * VAR_253 ; if ( VAR_254 ) { VAR_255 -> VAR_256 = VAR_257 ; METHOD_23 ( VAR_258 -> VAR_259 , VAR_260 , VAR_261 - 1 ) ; VAR_262 -> VAR_263 [ VAR_264 - 1 ] = '\\0' ; return VAR_265 ; } VAR_266 -> VAR_267 = METHOD_24 ( VAR_268 , VAR_269 , & VAR_270 , & VAR_271 -> VAR_272 ) ; VAR_273 -> VAR_274 = VAR_275 ; if ( VAR_276 -> VAR_277 > 8 ) { VAR_278 -> VAR_279 = VAR_280 ; VAR_281 -> VAR_282 -= 9 ; } if ( VAR_283 -> VAR_284 & VAR_285 & VAR_286 ) { METHOD_25 ( VAR_287 , VAR_288 , & VAR_289 , VAR_290 , VAR_291 ) ; return VAR_292 ; } if ( VAR_293 -> VAR_294 == VAR_295 ) { VAR_296 -> VAR_297 = VAR_298 ; if ( VAR_299 -> VAR_300 && VAR_301 -> VAR_302 -> VAR_303 == 0 ) { return VAR_304 ; } VAR_305 -> VAR_306 = VAR_307 ; TYPE_20 * VAR_308 = VAR_309 -> VAR_310 ? ( TYPE_21 * ) ( VAR_311 -> VAR_312 -> VAR_313 ) : VAR_314 ; if ( VAR_315 && ( VAR_316 = METHOD_26 ( VAR_317 -> VAR_318 , VAR_319 ) ) ) { VAR_320 -> VAR_321 = VAR_322 ; } TYPE_22 * VAR_323 = METHOD_27 ( VAR_324 , '-' ) ; if ( VAR_325 ) { VAR_326 -> VAR_327 = - 1 ; VAR_328 = ++ VAR_329 ; } VAR_330 -> VAR_331 = METHOD_28 ( VAR_332 , VAR_333 ) ; } else if ( VAR_334 -> VAR_335 < VAR_336 ) { METHOD_29 ( VAR_337 -> VAR_338 , VAR_339 , VAR_340 - 1 ) ; VAR_341 -> VAR_342 [ VAR_343 - 1 ] = '\\0' ; } } else { VAR_344 -> VAR_345 = VAR_346 ; VAR_347 -> VAR_348 = 1 ; TYPE_23 * VAR_349 = METHOD_30 ( VAR_350 , '-' ) ; if ( VAR_351 ) { VAR_352 -> VAR_353 = - 1 ; VAR_354 = ++ VAR_355 ; } VAR_356 -> VAR_357 = METHOD_31 ( VAR_358 , VAR_359 ) ; } return VAR_360 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 = 0 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 = 1 ; TYPE_8 VAR_8 = VAR_9 ; TYPE_9 VAR_10 = 0 ; VAR_11 -> VAR_12 = 0 ; while ( VAR_13 ) { VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 , & VAR_18 , & VAR_19 ) ; if ( ! METHOD_2 ( VAR_20 + VAR_21 , ""ptr"" , 3 ) ) { continue ; } else if ( ! METHOD_3 ( VAR_22 + VAR_23 , ""byte"" , 4 ) ) { VAR_24 -> VAR_25 |= VAR_26 | VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; } else if ( ! METHOD_4 ( VAR_33 + VAR_34 , ""word"" , 4 ) ) { VAR_35 -> VAR_36 |= VAR_37 | VAR_38 ; VAR_39 -> VAR_40 = VAR_41 ; VAR_42 = VAR_43 ; } else if ( ! METHOD_5 ( VAR_44 + VAR_45 , ""dword"" , 5 ) ) { VAR_46 -> VAR_47 |= VAR_48 | VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; } else if ( ! METHOD_6 ( VAR_55 + VAR_56 , ""qword"" , 5 ) ) { VAR_57 -> VAR_58 |= VAR_59 | VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } else if ( ! METHOD_7 ( VAR_66 + VAR_67 , ""oword"" , 5 ) ) { VAR_68 -> VAR_69 |= VAR_70 | VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } else if ( ! METHOD_8 ( VAR_77 + VAR_78 , ""tbyte"" , 5 ) ) { VAR_79 -> VAR_80 |= VAR_81 | VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 = VAR_87 ; } else { VAR_88 = 0 ; } } if ( VAR_89 [ VAR_90 ] == '[' ) { if ( ! VAR_91 -> VAR_92 ) { VAR_93 -> VAR_94 = VAR_95 ; } VAR_96 -> VAR_97 = VAR_98 -> VAR_99 [ 0 ] = VAR_100 -> VAR_101 [ 1 ] = 0 ; TYPE_10 VAR_102 = 1 ; TYPE_11 VAR_103 = VAR_104 ; TYPE_12 VAR_105 = VAR_106 ; while ( VAR_107 [ VAR_108 ] != ']' ) { if ( VAR_109 > VAR_110 ) { break ; } VAR_111 = VAR_112 ; if ( ! VAR_113 [ VAR_114 ] ) { break ; } VAR_115 = METHOD_9 ( VAR_116 , & VAR_117 , & VAR_118 ) ; if ( VAR_119 == VAR_120 ) { if ( VAR_121 [ VAR_122 ] == '+' || VAR_123 [ VAR_124 ] == '-' || VAR_125 [ VAR_126 ] == ']' ) { if ( VAR_127 != VAR_128 ) { VAR_129 -> VAR_130 [ VAR_131 ] = VAR_132 ; VAR_133 -> VAR_134 [ VAR_135 ] = VAR_136 ; ++ VAR_137 ; } else { VAR_138 -> VAR_139 += VAR_140 ; VAR_141 -> VAR_142 [ VAR_143 ] = VAR_144 ; } VAR_145 = 1 ; VAR_146 = VAR_147 ; } else if ( VAR_148 [ VAR_149 ] == '*' ) { } } else if ( VAR_150 == VAR_151 ) { TYPE_13 VAR_152 = 0 ; if ( VAR_153 != VAR_154 ) { VAR_155 -> VAR_156 = 0 ; } VAR_157 = VAR_158 ; VAR_159 = METHOD_10 ( VAR_160 , VAR_161 , & VAR_162 , & VAR_163 ) ; if ( VAR_164 ) { VAR_165 -> VAR_166 = VAR_167 ; if ( VAR_168 > 8 ) { VAR_169 -> VAR_170 = VAR_171 ; VAR_172 -> VAR_173 = VAR_174 - 9 ; } VAR_175 = VAR_176 ; } else if ( VAR_177 > 8 ) { VAR_178 -> VAR_179 = VAR_180 - 9 ; } if ( VAR_181 & VAR_182 & VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 = VAR_189 ; METHOD_11 ( VAR_190 , VAR_191 , & VAR_192 , VAR_193 , VAR_194 ) ; return VAR_195 ; } if ( ! VAR_196 ) { VAR_197 -> VAR_198 |= VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 ; if ( ! ( VAR_206 & VAR_207 ) ) { VAR_208 -> VAR_209 = 0 ; } } else { TYPE_14 * VAR_210 = METHOD_12 ( VAR_211 , '+' ) ; VAR_212 -> VAR_213 = 1 ; if ( ! VAR_214 ) { VAR_215 = METHOD_13 ( VAR_216 , '-' ) ; if ( VAR_217 ) { VAR_218 -> VAR_219 = - 1 ; } } TYPE_15 * VAR_220 = METHOD_14 ( VAR_221 , '+' ) ; TYPE_16 * VAR_222 = METHOD_15 ( VAR_223 , '-' ) ; TYPE_17 * VAR_224 = METHOD_16 ( VAR_225 , ']' ) ; if ( VAR_226 && VAR_227 && VAR_228 < VAR_229 && VAR_230 < VAR_231 ) { VAR_232 -> VAR_233 = - 1 ; } TYPE_18 * VAR_234 ; VAR_235 = METHOD_17 ( METHOD_18 ( VAR_236 + VAR_237 ) + 1 ) ; METHOD_19 ( VAR_238 , VAR_239 + VAR_240 ) ; METHOD_20 ( VAR_241 , ""+-"" ) ; TYPE_19 VAR_242 = METHOD_21 ( VAR_243 , VAR_244 ) ; METHOD_22 ( VAR_245 ) ; VAR_246 *= VAR_247 ; } } } else if ( VAR_248 == VAR_249 ) { VAR_250 = VAR_251 ; VAR_252 * VAR_253 ; if ( VAR_254 ) { VAR_255 -> VAR_256 = VAR_257 ; METHOD_23 ( VAR_258 -> VAR_259 , VAR_260 , VAR_261 - 1 ) ; VAR_262 -> VAR_263 [ VAR_264 - 1 ] = '\\0' ; return VAR_265 ; } VAR_266 -> VAR_267 = METHOD_24 ( VAR_268 , VAR_269 , & VAR_270 , & VAR_271 -> VAR_272 ) ; VAR_273 -> VAR_274 = VAR_275 ; if ( VAR_276 -> VAR_277 > 8 ) { VAR_278 -> VAR_279 = VAR_280 ; VAR_281 -> VAR_282 -= 9 ; } if ( VAR_283 -> VAR_284 & VAR_285 & VAR_286 ) { METHOD_25 ( VAR_287 , VAR_288 , & VAR_289 , VAR_290 , VAR_291 ) ; return VAR_292 ; } if ( VAR_293 -> VAR_294 == VAR_295 ) { VAR_296 -> VAR_297 = VAR_298 ; if ( VAR_299 -> VAR_300 && VAR_301 -> VAR_302 -> VAR_303 == 0 ) { return VAR_304 ; } VAR_305 -> VAR_306 = VAR_307 ; TYPE_20 * VAR_308 = VAR_309 -> VAR_310 ? ( TYPE_21 * ) ( VAR_311 -> VAR_312 -> VAR_313 ) : VAR_314 ; if ( VAR_315 && ( VAR_316 = METHOD_26 ( VAR_317 -> VAR_318 , VAR_319 ) ) ) { VAR_320 -> VAR_321 = VAR_322 ; } TYPE_22 * VAR_323 = METHOD_27 ( VAR_324 , '-' ) ; if ( VAR_325 ) { VAR_326 -> VAR_327 = - 1 ; VAR_328 = ++ VAR_329 ; } VAR_330 -> VAR_331 = METHOD_28 ( VAR_332 , VAR_333 ) ; } else if ( VAR_334 -> VAR_335 < VAR_336 ) { if ( VAR_291 < 2 ) { METHOD_29 ( VAR_337 -> VAR_338 , VAR_339 , VAR_340 - 1 ) ; VAR_341 -> VAR_342 [ VAR_343 - 1 ] = '\\0' ; } } else { VAR_344 -> VAR_345 = VAR_346 ; VAR_347 -> VAR_348 = 1 ; TYPE_23 * VAR_349 = METHOD_30 ( VAR_350 , '-' ) ; if ( VAR_351 ) { VAR_352 -> VAR_353 = - 1 ; VAR_354 = ++ VAR_355 ; } VAR_356 -> VAR_357 = METHOD_31 ( VAR_358 , VAR_359 ) ; } return VAR_360 ; }",172
173,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) { VAR_8 ; } switch ( VAR_9 -> VAR_10 ) { case VAR_11 : VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) goto VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) ; if ( ! VAR_23 ) goto VAR_24 ; if ( METHOD_3 ( VAR_25 , & VAR_26 , VAR_27 ) == - 1 ) goto VAR_28 ; METHOD_4 ( VAR_29 ) ; VAR_30 = METHOD_5 ( VAR_31 -> VAR_32 . VAR_33 . VAR_34 ) ; if ( ! VAR_35 ) goto VAR_36 ; if ( METHOD_6 ( VAR_37 , & VAR_38 , VAR_39 ) == - 1 ) goto VAR_40 ; METHOD_7 ( VAR_41 ) ; VAR_42 = METHOD_8 ( VAR_43 -> VAR_44 . VAR_45 . VAR_46 , METHOD_9 ) ; if ( ! VAR_47 ) goto VAR_48 ; if ( METHOD_10 ( VAR_49 , & VAR_50 , VAR_51 ) == - 1 ) goto VAR_52 ; METHOD_11 ( VAR_53 ) ; VAR_54 = METHOD_12 ( VAR_55 -> VAR_56 . VAR_57 . VAR_58 , METHOD_13 ) ; if ( ! VAR_59 ) goto VAR_60 ; if ( METHOD_14 ( VAR_61 , & VAR_62 , VAR_63 ) == - 1 ) goto VAR_64 ; METHOD_15 ( VAR_65 ) ; VAR_66 = METHOD_16 ( VAR_67 -> VAR_68 . VAR_69 . VAR_70 ) ; if ( ! VAR_71 ) goto VAR_72 ; if ( METHOD_17 ( VAR_73 , & VAR_74 , VAR_75 ) == - 1 ) goto VAR_76 ; METHOD_18 ( VAR_77 ) ;  break ;  case VAR_78 : VAR_79 = METHOD_19 ( VAR_80 , VAR_81 , VAR_82 ) ; if ( ! VAR_83 ) goto VAR_84 ; VAR_85 = METHOD_20 ( VAR_86 -> VAR_87 . VAR_88 . VAR_89 ) ; if ( ! VAR_90 ) goto VAR_91 ; if ( METHOD_21 ( VAR_92 , & VAR_93 , VAR_94 ) == - 1 ) goto VAR_95 ; METHOD_22 ( VAR_96 ) ; VAR_97 = METHOD_23 ( VAR_98 -> VAR_99 . VAR_100 . VAR_101 ) ; if ( ! VAR_102 ) goto VAR_103 ; if ( METHOD_24 ( VAR_104 , & VAR_105 , VAR_106 ) == - 1 ) goto VAR_107 ; METHOD_25 ( VAR_108 ) ; VAR_109 = METHOD_26 ( VAR_110 -> VAR_111 . VAR_112 . VAR_113 , METHOD_27 ) ; if ( ! VAR_114 ) goto VAR_115 ; if ( METHOD_28 ( VAR_116 , & VAR_117 , VAR_118 ) == - 1 ) goto VAR_119 ; METHOD_29 ( VAR_120 ) ; VAR_121 = METHOD_30 ( VAR_122 -> VAR_123 . VAR_124 . VAR_125 , METHOD_31 ) ; if ( ! VAR_126 ) goto VAR_127 ; if ( METHOD_32 ( VAR_128 , & VAR_129 , VAR_130 ) == - 1 ) goto VAR_131 ; METHOD_33 ( VAR_132 ) ; VAR_133 = METHOD_34 ( VAR_134 -> VAR_135 . VAR_136 . VAR_137 ) ; if ( ! VAR_138 ) goto VAR_139 ; if ( METHOD_35 ( VAR_140 , & VAR_141 , VAR_142 ) == - 1 ) goto VAR_143 ; METHOD_36 ( VAR_144 ) ;  break ;  case VAR_145 : VAR_146 = METHOD_37 ( VAR_147 , VAR_148 , VAR_149 ) ; if ( ! VAR_150 ) goto VAR_151 ; VAR_152 = METHOD_38 ( VAR_153 -> VAR_154 . VAR_155 . VAR_156 ) ; if ( ! VAR_157 ) goto VAR_158 ; if ( METHOD_39 ( VAR_159 , & VAR_160 , VAR_161 ) == - 1 ) goto VAR_162 ; METHOD_40 ( VAR_163 ) ; VAR_164 = METHOD_41 ( VAR_165 -> VAR_166 . VAR_167 . VAR_168 , METHOD_42 ) ; if ( ! VAR_169 ) goto VAR_170 ; if ( METHOD_43 ( VAR_171 , & VAR_172 , VAR_173 ) == - 1 ) goto VAR_174 ; METHOD_44 ( VAR_175 ) ; VAR_176 = METHOD_45 ( VAR_177 -> VAR_178 . VAR_179 . VAR_180 , VAR_181 ) ; if ( ! VAR_182 ) goto VAR_183 ; if ( METHOD_46 ( VAR_184 , & VAR_185 , VAR_186 ) == - 1 ) goto VAR_187 ; METHOD_47 ( VAR_188 ) ; VAR_189 = METHOD_48 ( VAR_190 -> VAR_191 . VAR_192 . VAR_193 , METHOD_49 ) ; if ( ! VAR_194 ) goto VAR_195 ; if ( METHOD_50 ( VAR_196 , & VAR_197 , VAR_198 ) == - 1 ) goto VAR_199 ; METHOD_51 ( VAR_200 ) ; VAR_201 = METHOD_52 ( VAR_202 -> VAR_203 . VAR_204 . VAR_205 , METHOD_53 ) ; if ( ! VAR_206 ) goto VAR_207 ; if ( METHOD_54 ( VAR_208 , & VAR_209 , VAR_210 ) == - 1 ) goto VAR_211 ; METHOD_55 ( VAR_212 ) ; break ; case VAR_213 : VAR_214 = METHOD_56 ( VAR_215 , VAR_216 , VAR_217 ) ; if ( ! VAR_218 ) goto VAR_219 ; VAR_220 = METHOD_57 ( VAR_221 -> VAR_222 . VAR_223 . VAR_224 ) ; if ( ! VAR_225 ) goto VAR_226 ; if ( METHOD_58 ( VAR_227 , & VAR_228 , VAR_229 ) == - 1 ) goto VAR_230 ; METHOD_59 ( VAR_231 ) ; break ; case VAR_232 : VAR_233 = METHOD_60 ( VAR_234 , VAR_235 , VAR_236 ) ; if ( ! VAR_237 ) goto VAR_238 ; VAR_239 = METHOD_61 ( VAR_240 -> VAR_241 . VAR_242 . VAR_243 , METHOD_62 ) ; if ( ! VAR_244 ) goto VAR_245 ; if ( METHOD_63 ( VAR_246 , & VAR_247 , VAR_248 ) == - 1 ) goto VAR_249 ; METHOD_64 ( VAR_250 ) ; break ; case VAR_251 : VAR_252 = METHOD_65 ( VAR_253 , VAR_254 , VAR_255 ) ; if ( ! VAR_256 ) goto VAR_257 ; VAR_258 = METHOD_66 ( VAR_259 -> VAR_260 . VAR_261 . VAR_262 , METHOD_67 ) ; if ( ! VAR_263 ) goto VAR_264 ; if ( METHOD_68 ( VAR_265 , & VAR_266 , VAR_267 ) == - 1 ) goto VAR_268 ; METHOD_69 ( VAR_269 ) ; VAR_270 = METHOD_70 ( VAR_271 -> VAR_272 . VAR_273 . VAR_274 ) ; if ( ! VAR_275 ) goto VAR_276 ; if ( METHOD_71 ( VAR_277 , & VAR_278 , VAR_279 ) == - 1 ) goto VAR_280 ; METHOD_72 ( VAR_281 ) ;  break ;  case VAR_282 : VAR_283 = METHOD_73 ( VAR_284 , VAR_285 , VAR_286 ) ; if ( ! VAR_287 ) goto VAR_288 ; VAR_289 = METHOD_74 ( VAR_290 -> VAR_291 . VAR_292 . VAR_293 ) ; if ( ! VAR_294 ) goto VAR_295 ; if ( METHOD_75 ( VAR_296 , & VAR_297 , VAR_298 ) == - 1 ) goto VAR_299 ; METHOD_76 ( VAR_300 ) ; VAR_301 = METHOD_77 ( VAR_302 -> VAR_303 . VAR_304 . VAR_305 ) ; if ( ! VAR_306 ) goto VAR_307 ; if ( METHOD_78 ( VAR_308 , & VAR_309 , VAR_310 ) == - 1 ) goto VAR_311 ; METHOD_79 ( VAR_312 ) ; VAR_313 = METHOD_80 ( VAR_314 -> VAR_315 . VAR_316 . VAR_317 ) ; if ( ! VAR_318 ) goto VAR_319 ; if ( METHOD_81 ( VAR_320 , & VAR_321 , VAR_322 ) == - 1 ) goto VAR_323 ; METHOD_82 ( VAR_324 ) ; break ; case VAR_325 : VAR_326 = METHOD_83 ( VAR_327 , VAR_328 , VAR_329 ) ; if ( ! VAR_330 ) goto VAR_331 ; VAR_332 = METHOD_84 ( VAR_333 -> VAR_334 . VAR_335 . VAR_336 ) ; if ( ! VAR_337 ) goto VAR_338 ; if ( METHOD_85 ( VAR_339 , & VAR_340 , VAR_341 ) == - 1 ) goto VAR_342 ; METHOD_86 ( VAR_343 ) ; VAR_344 = METHOD_87 ( VAR_345 -> VAR_346 . VAR_347 . VAR_348 ) ; if ( ! VAR_349 ) goto VAR_350 ; if ( METHOD_88 ( VAR_351 , & VAR_352 , VAR_353 ) == - 1 ) goto VAR_354 ; METHOD_89 ( VAR_355 ) ; VAR_356 = METHOD_90 ( VAR_357 -> VAR_358 . VAR_359 . VAR_360 ) ; if ( ! VAR_361 ) goto VAR_362 ; if ( METHOD_91 ( VAR_363 , & VAR_364 , VAR_365 ) == - 1 ) goto VAR_366 ; METHOD_92 ( VAR_367 ) ; VAR_368 = METHOD_93 ( VAR_369 -> VAR_370 . VAR_371 . VAR_372 ) ; if ( ! VAR_373 ) goto VAR_374 ; if ( METHOD_94 ( VAR_375 , & VAR_376 , VAR_377 ) == - 1 ) goto VAR_378 ; METHOD_95 ( VAR_379 ) ; break ; case VAR_380 : VAR_381 = METHOD_96 ( VAR_382 , VAR_383 , VAR_384 ) ; if ( ! VAR_385 ) goto VAR_386 ; VAR_387 = METHOD_97 ( VAR_388 -> VAR_389 . VAR_390 . VAR_391 ) ; if ( ! VAR_392 ) goto VAR_393 ; if ( METHOD_98 ( VAR_394 , & VAR_395 , VAR_396 ) == - 1 ) goto VAR_397 ; METHOD_99 ( VAR_398 ) ; VAR_399 = METHOD_100 ( VAR_400 -> VAR_401 . VAR_402 . VAR_403 ) ; if ( ! VAR_404 ) goto VAR_405 ; if ( METHOD_101 ( VAR_406 , & VAR_407 , VAR_408 ) == - 1 ) goto VAR_409 ; METHOD_102 ( VAR_410 ) ; VAR_411 = METHOD_103 ( VAR_412 -> VAR_413 . VAR_414 . VAR_415 , METHOD_104 ) ; if ( ! VAR_416 ) goto VAR_417 ; if ( METHOD_105 ( VAR_418 , & VAR_419 , VAR_420 ) == - 1 ) goto VAR_421 ; METHOD_106 ( VAR_422 ) ; VAR_423 = METHOD_107 ( VAR_424 -> VAR_425 . VAR_426 . VAR_427 , METHOD_108 ) ; if ( ! VAR_428 ) goto VAR_429 ; if ( METHOD_109 ( VAR_430 , & VAR_431 , VAR_432 ) == - 1 ) goto VAR_433 ; METHOD_110 ( VAR_434 ) ;  break ;  case VAR_435 : VAR_436 = METHOD_111 ( VAR_437 , VAR_438 , VAR_439 ) ; if ( ! VAR_440 ) goto VAR_441 ; VAR_442 = METHOD_112 ( VAR_443 -> VAR_444 . VAR_445 . VAR_446 ) ; if ( ! VAR_447 ) goto VAR_448 ; if ( METHOD_113 ( VAR_449 , & VAR_450 , VAR_451 ) == - 1 ) goto VAR_452 ; METHOD_114 ( VAR_453 ) ; VAR_454 = METHOD_115 ( VAR_455 -> VAR_456 . VAR_457 . VAR_458 ) ; if ( ! VAR_459 ) goto VAR_460 ; if ( METHOD_116 ( VAR_461 , & VAR_462 , VAR_463 ) == - 1 ) goto VAR_464 ; METHOD_117 ( VAR_465 ) ; VAR_466 = METHOD_118 ( VAR_467 -> VAR_468 . VAR_469 . VAR_470 , METHOD_119 ) ; if ( ! VAR_471 ) goto VAR_472 ; if ( METHOD_120 ( VAR_473 , & VAR_474 , VAR_475 ) == - 1 ) goto VAR_476 ; METHOD_121 ( VAR_477 ) ; VAR_478 = METHOD_122 ( VAR_479 -> VAR_480 . VAR_481 . VAR_482 , METHOD_123 ) ; if ( ! VAR_483 ) goto VAR_484 ; if ( METHOD_124 ( VAR_485 , & VAR_486 , VAR_487 ) == - 1 ) goto VAR_488 ; METHOD_125 ( VAR_489 ) ;  break ;  case VAR_490 : VAR_491 = METHOD_126 ( VAR_492 , VAR_493 , VAR_494 ) ; if ( ! VAR_495 ) goto VAR_496 ; VAR_497 = METHOD_127 ( VAR_498 -> VAR_499 . VAR_500 . VAR_501 ) ; if ( ! VAR_502 ) goto VAR_503 ; if ( METHOD_128 ( VAR_504 , & VAR_505 , VAR_506 ) == - 1 ) goto VAR_507 ; METHOD_129 ( VAR_508 ) ; VAR_509 = METHOD_130 ( VAR_510 -> VAR_511 . VAR_512 . VAR_513 , METHOD_131 ) ; if ( ! VAR_514 ) goto VAR_515 ; if ( METHOD_132 ( VAR_516 , & VAR_517 , VAR_518 ) == - 1 ) goto VAR_519 ; METHOD_133 ( VAR_520 ) ; VAR_521 = METHOD_134 ( VAR_522 -> VAR_523 . VAR_524 . VAR_525 , METHOD_135 ) ; if ( ! VAR_526 ) goto VAR_527 ; if ( METHOD_136 ( VAR_528 , & VAR_529 , VAR_530 ) == - 1 ) goto VAR_531 ; METHOD_137 ( VAR_532 ) ; break ; case VAR_533 : VAR_534 = METHOD_138 ( VAR_535 , VAR_536 , VAR_537 ) ; if ( ! VAR_538 ) goto VAR_539 ; VAR_540 = METHOD_139 ( VAR_541 -> VAR_542 . VAR_543 . VAR_544 ) ; if ( ! VAR_545 ) goto VAR_546 ; if ( METHOD_140 ( VAR_547 , & VAR_548 , VAR_549 ) == - 1 ) goto VAR_550 ; METHOD_141 ( VAR_551 ) ; VAR_552 = METHOD_142 ( VAR_553 -> VAR_554 . VAR_555 . VAR_556 , METHOD_143 ) ; if ( ! VAR_557 ) goto VAR_558 ; if ( METHOD_144 ( VAR_559 , & VAR_560 , VAR_561 ) == - 1 ) goto VAR_562 ; METHOD_145 ( VAR_563 ) ; VAR_564 = METHOD_146 ( VAR_565 -> VAR_566 . VAR_567 . VAR_568 , METHOD_147 ) ; if ( ! VAR_569 ) goto VAR_570 ; if ( METHOD_148 ( VAR_571 , & VAR_572 , VAR_573 ) == - 1 ) goto VAR_574 ; METHOD_149 ( VAR_575 ) ; break ; case VAR_576 : VAR_577 = METHOD_150 ( VAR_578 , VAR_579 , VAR_580 ) ; if ( ! VAR_581 ) goto VAR_582 ; VAR_583 = METHOD_151 ( VAR_584 -> VAR_585 . VAR_586 . VAR_587 , VAR_588 ) ; if ( ! VAR_589 ) goto VAR_590 ; if ( METHOD_152 ( VAR_591 , & VAR_592 , VAR_593 ) == - 1 ) goto VAR_594 ; METHOD_153 ( VAR_595 ) ; VAR_596 = METHOD_154 ( VAR_597 -> VAR_598 . VAR_599 . VAR_600 , METHOD_155 ) ; if ( ! VAR_601 ) goto VAR_602 ; if ( METHOD_156 ( VAR_603 , & VAR_604 , VAR_605 ) == - 1 ) goto VAR_606 ; METHOD_157 ( VAR_607 ) ;  break ;  case VAR_608 : VAR_609 = METHOD_158 ( VAR_610 , VAR_611 , VAR_612 ) ; if ( ! VAR_613 ) goto VAR_614 ; VAR_615 = METHOD_159 ( VAR_616 -> VAR_617 . VAR_618 . VAR_619 , VAR_620 ) ; if ( ! VAR_621 ) goto VAR_622 ; if ( METHOD_160 ( VAR_623 , & VAR_624 , VAR_625 ) == - 1 ) goto VAR_626 ; METHOD_161 ( VAR_627 ) ; VAR_628 = METHOD_162 ( VAR_629 -> VAR_630 . VAR_631 . VAR_632 , METHOD_163 ) ; if ( ! VAR_633 ) goto VAR_634 ; if ( METHOD_164 ( VAR_635 , & VAR_636 , VAR_637 ) == - 1 ) goto VAR_638 ; METHOD_165 ( VAR_639 ) ;  break ;  case VAR_640 : VAR_641 = METHOD_166 ( VAR_642 , VAR_643 , VAR_644 ) ; if ( ! VAR_645 ) goto VAR_646 ; VAR_647 = METHOD_167 ( VAR_648 -> VAR_649 . VAR_650 . VAR_651 ) ; if ( ! VAR_652 ) goto VAR_653 ; if ( METHOD_168 ( VAR_654 , & VAR_655 , VAR_656 ) == - 1 ) goto VAR_657 ; METHOD_169 ( VAR_658 ) ; VAR_659 = METHOD_170 ( VAR_660 -> VAR_661 . VAR_662 . VAR_663 ) ; if ( ! VAR_664 ) goto VAR_665 ; if ( METHOD_171 ( VAR_666 , & VAR_667 , VAR_668 ) == - 1 ) goto VAR_669 ; METHOD_172 ( VAR_670 ) ; break ; case VAR_671 : VAR_672 = METHOD_173 ( VAR_673 , VAR_674 , VAR_675 ) ; if ( ! VAR_676 ) goto VAR_677 ; VAR_678 = METHOD_174 ( VAR_679 -> VAR_680 . VAR_681 . VAR_682 , METHOD_175 ) ; if ( ! VAR_683 ) goto VAR_684 ; if ( METHOD_176 ( VAR_685 , & VAR_686 , VAR_687 ) == - 1 ) goto VAR_688 ; METHOD_177 ( VAR_689 ) ; VAR_690 = METHOD_178 ( VAR_691 -> VAR_692 . VAR_693 . VAR_694 , VAR_695 ) ; if ( ! VAR_696 ) goto VAR_697 ; if ( METHOD_179 ( VAR_698 , & VAR_699 , VAR_700 ) == - 1 ) goto VAR_701 ; METHOD_180 ( VAR_702 ) ; VAR_703 = METHOD_181 ( VAR_704 -> VAR_705 . VAR_706 . VAR_707 , METHOD_182 ) ; if ( ! VAR_708 ) goto VAR_709 ; if ( METHOD_183 ( VAR_710 , & VAR_711 , VAR_712 ) == - 1 ) goto VAR_713 ; METHOD_184 ( VAR_714 ) ; VAR_715 = METHOD_185 ( VAR_716 -> VAR_717 . VAR_718 . VAR_719 , METHOD_186 ) ; if ( ! VAR_720 ) goto VAR_721 ; if ( METHOD_187 ( VAR_722 , & VAR_723 , VAR_724 ) == - 1 ) goto VAR_725 ; METHOD_188 ( VAR_726 ) ; break ; case VAR_727 : VAR_728 = METHOD_189 ( VAR_729 , VAR_730 , VAR_731 ) ; if ( ! VAR_732 ) goto VAR_733 ; VAR_734 = METHOD_190 ( VAR_735 -> VAR_736 . VAR_737 . VAR_738 ) ; if ( ! VAR_739 ) goto VAR_740 ; if ( METHOD_191 ( VAR_741 , & VAR_742 , VAR_743 ) == - 1 ) goto VAR_744 ; METHOD_192 ( VAR_745 ) ; VAR_746 = METHOD_193 ( VAR_747 -> VAR_748 . VAR_749 . VAR_750 ) ; if ( ! VAR_751 ) goto VAR_752 ; if ( METHOD_194 ( VAR_753 , & VAR_754 , VAR_755 ) == - 1 ) goto VAR_756 ; METHOD_195 ( VAR_757 ) ; break ; case VAR_758 : VAR_759 = METHOD_196 ( VAR_760 , VAR_761 , VAR_762 ) ; if ( ! VAR_763 ) goto VAR_764 ; VAR_765 = METHOD_197 ( VAR_766 -> VAR_767 . VAR_768 . VAR_769 , VAR_770 ) ; if ( ! VAR_771 ) goto VAR_772 ; if ( METHOD_198 ( VAR_773 , & VAR_774 , VAR_775 ) == - 1 ) goto VAR_776 ; METHOD_199 ( VAR_777 ) ; break ; case VAR_778 : VAR_779 = METHOD_200 ( VAR_780 , VAR_781 , VAR_782 ) ; if ( ! VAR_783 ) goto VAR_784 ; VAR_785 = METHOD_201 ( VAR_786 -> VAR_787 . VAR_788 . VAR_789 ) ; if ( ! VAR_790 ) goto VAR_791 ; if ( METHOD_202 ( VAR_792 , & VAR_793 , VAR_794 ) == - 1 ) goto VAR_795 ; METHOD_203 ( VAR_796 ) ; VAR_797 = METHOD_204 ( VAR_798 -> VAR_799 . VAR_800 . VAR_801 , VAR_802 ) ; if ( ! VAR_803 ) goto VAR_804 ; if ( METHOD_205 ( VAR_805 , & VAR_806 , VAR_807 ) == - 1 ) goto VAR_808 ; METHOD_206 ( VAR_809 ) ; VAR_810 = METHOD_207 ( VAR_811 -> VAR_812 . VAR_813 . VAR_814 ) ; if ( ! VAR_815 ) goto VAR_816 ; if ( METHOD_208 ( VAR_817 , & VAR_818 , VAR_819 ) == - 1 ) goto VAR_820 ; METHOD_209 ( VAR_821 ) ; break ; case VAR_822 : VAR_823 = METHOD_210 ( VAR_824 , VAR_825 , VAR_826 ) ; if ( ! VAR_827 ) goto VAR_828 ; VAR_829 = METHOD_211 ( VAR_830 -> VAR_831 . VAR_832 . VAR_833 , METHOD_212 ) ; if ( ! VAR_834 ) goto VAR_835 ; if ( METHOD_213 ( VAR_836 , & VAR_837 , VAR_838 ) == - 1 ) goto VAR_839 ; METHOD_214 ( VAR_840 ) ; break ; case VAR_841 : VAR_842 = METHOD_215 ( VAR_843 , VAR_844 , VAR_845 ) ; if ( ! VAR_846 ) goto VAR_847 ; VAR_848 = METHOD_216 ( VAR_849 -> VAR_850 . VAR_851 . VAR_852 , METHOD_217 ) ; if ( ! VAR_853 ) goto VAR_854 ; if ( METHOD_218 ( VAR_855 , & VAR_856 , VAR_857 ) == - 1 ) goto VAR_858 ; METHOD_219 ( VAR_859 ) ; break ; case VAR_860 : VAR_861 = METHOD_220 ( VAR_862 , VAR_863 , VAR_864 ) ; if ( ! VAR_865 ) goto VAR_866 ; VAR_867 = METHOD_221 ( VAR_868 -> VAR_869 . VAR_870 . VAR_871 ) ; if ( ! VAR_872 ) goto VAR_873 ; if ( METHOD_222 ( VAR_874 , & VAR_875 , VAR_876 ) == - 1 ) goto VAR_877 ; METHOD_223 ( VAR_878 ) ; break ; case VAR_879 : VAR_880 = METHOD_224 ( VAR_881 , VAR_882 , VAR_883 ) ; if ( ! VAR_884 ) goto VAR_885 ; break ; case VAR_886 : VAR_887 = METHOD_225 ( VAR_888 , VAR_889 , VAR_890 ) ; if ( ! VAR_891 ) goto VAR_892 ; break ; case VAR_893 : VAR_894 = METHOD_226 ( VAR_895 , VAR_896 , VAR_897 ) ; if ( ! VAR_898 ) goto VAR_899 ; break ; } VAR_900 = METHOD_227 ( VAR_901 -> VAR_902 ) ; if ( ! VAR_903 ) goto VAR_904 ; if ( METHOD_228 ( VAR_905 , & VAR_906 , VAR_907 ) < 0 ) goto VAR_908 ; METHOD_229 ( VAR_909 ) ; VAR_910 = METHOD_230 ( VAR_911 -> VAR_912 ) ; if ( ! VAR_913 ) goto VAR_914 ; if ( METHOD_231 ( VAR_915 , & VAR_916 , VAR_917 ) < 0 ) goto VAR_918 ; METHOD_232 ( VAR_919 ) ; VAR_920 = METHOD_233 ( VAR_921 -> VAR_922 ) ; if ( ! VAR_923 ) goto VAR_924 ; if ( METHOD_234 ( VAR_925 , & VAR_926 , VAR_927 ) < 0 ) goto VAR_928 ; METHOD_235 ( VAR_929 ) ; VAR_930 = METHOD_236 ( VAR_931 -> VAR_932 ) ; if ( ! VAR_933 ) goto VAR_934 ; if ( METHOD_237 ( VAR_935 , & VAR_936 , VAR_937 ) < 0 ) goto VAR_938 ; METHOD_238 ( VAR_939 ) ; return VAR_940 ; VAR_941 : METHOD_239 ( VAR_942 ) ; METHOD_240 ( VAR_943 ) ; return VAR_944 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) { VAR_8 ; } switch ( VAR_9 -> VAR_10 ) { case VAR_11 : VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) goto VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) ; if ( ! VAR_23 ) goto VAR_24 ; if ( METHOD_3 ( VAR_25 , & VAR_26 , VAR_27 ) == - 1 ) goto VAR_28 ; METHOD_4 ( VAR_29 ) ; VAR_30 = METHOD_5 ( VAR_31 -> VAR_32 . VAR_33 . VAR_34 ) ; if ( ! VAR_35 ) goto VAR_36 ; if ( METHOD_6 ( VAR_37 , & VAR_38 , VAR_39 ) == - 1 ) goto VAR_40 ; METHOD_7 ( VAR_41 ) ; VAR_42 = METHOD_8 ( VAR_43 -> VAR_44 . VAR_45 . VAR_46 , METHOD_9 ) ; if ( ! VAR_47 ) goto VAR_48 ; if ( METHOD_10 ( VAR_49 , & VAR_50 , VAR_51 ) == - 1 ) goto VAR_52 ; METHOD_11 ( VAR_53 ) ; VAR_54 = METHOD_12 ( VAR_55 -> VAR_56 . VAR_57 . VAR_58 , METHOD_13 ) ; if ( ! VAR_59 ) goto VAR_60 ; if ( METHOD_14 ( VAR_61 , & VAR_62 , VAR_63 ) == - 1 ) goto VAR_64 ; METHOD_15 ( VAR_65 ) ; VAR_66 = METHOD_16 ( VAR_67 -> VAR_68 . VAR_69 . VAR_70 ) ; if ( ! VAR_71 ) goto VAR_72 ; if ( METHOD_17 ( VAR_73 , & VAR_74 , VAR_75 ) == - 1 ) goto VAR_76 ; METHOD_18 ( VAR_77 ) ; break ; case VAR_78 : VAR_79 = METHOD_19 ( VAR_80 , VAR_81 , VAR_82 ) ; if ( ! VAR_83 ) goto VAR_84 ; VAR_85 = METHOD_20 ( VAR_86 -> VAR_87 . VAR_88 . VAR_89 ) ; if ( ! VAR_90 ) goto VAR_91 ; if ( METHOD_21 ( VAR_92 , & VAR_93 , VAR_94 ) == - 1 ) goto VAR_95 ; METHOD_22 ( VAR_96 ) ; VAR_97 = METHOD_23 ( VAR_98 -> VAR_99 . VAR_100 . VAR_101 ) ; if ( ! VAR_102 ) goto VAR_103 ; if ( METHOD_24 ( VAR_104 , & VAR_105 , VAR_106 ) == - 1 ) goto VAR_107 ; METHOD_25 ( VAR_108 ) ; VAR_109 = METHOD_26 ( VAR_110 -> VAR_111 . VAR_112 . VAR_113 , METHOD_27 ) ; if ( ! VAR_114 ) goto VAR_115 ; if ( METHOD_28 ( VAR_116 , & VAR_117 , VAR_118 ) == - 1 ) goto VAR_119 ; METHOD_29 ( VAR_120 ) ; VAR_121 = METHOD_30 ( VAR_122 -> VAR_123 . VAR_124 . VAR_125 , METHOD_31 ) ; if ( ! VAR_126 ) goto VAR_127 ; if ( METHOD_32 ( VAR_128 , & VAR_129 , VAR_130 ) == - 1 ) goto VAR_131 ; METHOD_33 ( VAR_132 ) ; VAR_133 = METHOD_34 ( VAR_134 -> VAR_135 . VAR_136 . VAR_137 ) ; if ( ! VAR_138 ) goto VAR_139 ; if ( METHOD_35 ( VAR_140 , & VAR_141 , VAR_142 ) == - 1 ) goto VAR_143 ; METHOD_36 ( VAR_144 ) ; break ; case VAR_145 : VAR_146 = METHOD_37 ( VAR_147 , VAR_148 , VAR_149 ) ; if ( ! VAR_150 ) goto VAR_151 ; VAR_152 = METHOD_38 ( VAR_153 -> VAR_154 . VAR_155 . VAR_156 ) ; if ( ! VAR_157 ) goto VAR_158 ; if ( METHOD_39 ( VAR_159 , & VAR_160 , VAR_161 ) == - 1 ) goto VAR_162 ; METHOD_40 ( VAR_163 ) ; VAR_164 = METHOD_41 ( VAR_165 -> VAR_166 . VAR_167 . VAR_168 , METHOD_42 ) ; if ( ! VAR_169 ) goto VAR_170 ; if ( METHOD_43 ( VAR_171 , & VAR_172 , VAR_173 ) == - 1 ) goto VAR_174 ; METHOD_44 ( VAR_175 ) ; VAR_176 = METHOD_45 ( VAR_177 -> VAR_178 . VAR_179 . VAR_180 , VAR_181 ) ; if ( ! VAR_182 ) goto VAR_183 ; if ( METHOD_46 ( VAR_184 , & VAR_185 , VAR_186 ) == - 1 ) goto VAR_187 ; METHOD_47 ( VAR_188 ) ; VAR_189 = METHOD_48 ( VAR_190 -> VAR_191 . VAR_192 . VAR_193 , METHOD_49 ) ; if ( ! VAR_194 ) goto VAR_195 ; if ( METHOD_50 ( VAR_196 , & VAR_197 , VAR_198 ) == - 1 ) goto VAR_199 ; METHOD_51 ( VAR_200 ) ; VAR_201 = METHOD_52 ( VAR_202 -> VAR_203 . VAR_204 . VAR_205 , METHOD_53 ) ; if ( ! VAR_206 ) goto VAR_207 ; if ( METHOD_54 ( VAR_208 , & VAR_209 , VAR_210 ) == - 1 ) goto VAR_211 ; METHOD_55 ( VAR_212 ) ; break ; case VAR_213 : VAR_214 = METHOD_56 ( VAR_215 , VAR_216 , VAR_217 ) ; if ( ! VAR_218 ) goto VAR_219 ; VAR_220 = METHOD_57 ( VAR_221 -> VAR_222 . VAR_223 . VAR_224 ) ; if ( ! VAR_225 ) goto VAR_226 ; if ( METHOD_58 ( VAR_227 , & VAR_228 , VAR_229 ) == - 1 ) goto VAR_230 ; METHOD_59 ( VAR_231 ) ; break ; case VAR_232 : VAR_233 = METHOD_60 ( VAR_234 , VAR_235 , VAR_236 ) ; if ( ! VAR_237 ) goto VAR_238 ; VAR_239 = METHOD_61 ( VAR_240 -> VAR_241 . VAR_242 . VAR_243 , METHOD_62 ) ; if ( ! VAR_244 ) goto VAR_245 ; if ( METHOD_63 ( VAR_246 , & VAR_247 , VAR_248 ) == - 1 ) goto VAR_249 ; METHOD_64 ( VAR_250 ) ; break ; case VAR_251 : VAR_252 = METHOD_65 ( VAR_253 , VAR_254 , VAR_255 ) ; if ( ! VAR_256 ) goto VAR_257 ; VAR_258 = METHOD_66 ( VAR_259 -> VAR_260 . VAR_261 . VAR_262 , METHOD_67 ) ; if ( ! VAR_263 ) goto VAR_264 ; if ( METHOD_68 ( VAR_265 , & VAR_266 , VAR_267 ) == - 1 ) goto VAR_268 ; METHOD_69 ( VAR_269 ) ; VAR_270 = METHOD_70 ( VAR_271 -> VAR_272 . VAR_273 . VAR_274 ) ; if ( ! VAR_275 ) goto VAR_276 ; if ( METHOD_71 ( VAR_277 , & VAR_278 , VAR_279 ) == - 1 ) goto VAR_280 ; METHOD_72 ( VAR_281 ) ; break ; case VAR_282 : VAR_283 = METHOD_73 ( VAR_284 , VAR_285 , VAR_286 ) ; if ( ! VAR_287 ) goto VAR_288 ; VAR_289 = METHOD_74 ( VAR_290 -> VAR_291 . VAR_292 . VAR_293 ) ; if ( ! VAR_294 ) goto VAR_295 ; if ( METHOD_75 ( VAR_296 , & VAR_297 , VAR_298 ) == - 1 ) goto VAR_299 ; METHOD_76 ( VAR_300 ) ; VAR_301 = METHOD_77 ( VAR_302 -> VAR_303 . VAR_304 . VAR_305 ) ; if ( ! VAR_306 ) goto VAR_307 ; if ( METHOD_78 ( VAR_308 , & VAR_309 , VAR_310 ) == - 1 ) goto VAR_311 ; METHOD_79 ( VAR_312 ) ; VAR_313 = METHOD_80 ( VAR_314 -> VAR_315 . VAR_316 . VAR_317 ) ; if ( ! VAR_318 ) goto VAR_319 ; if ( METHOD_81 ( VAR_320 , & VAR_321 , VAR_322 ) == - 1 ) goto VAR_323 ; METHOD_82 ( VAR_324 ) ; break ; case VAR_325 : VAR_326 = METHOD_83 ( VAR_327 , VAR_328 , VAR_329 ) ; if ( ! VAR_330 ) goto VAR_331 ; VAR_332 = METHOD_84 ( VAR_333 -> VAR_334 . VAR_335 . VAR_336 ) ; if ( ! VAR_337 ) goto VAR_338 ; if ( METHOD_85 ( VAR_339 , & VAR_340 , VAR_341 ) == - 1 ) goto VAR_342 ; METHOD_86 ( VAR_343 ) ; VAR_344 = METHOD_87 ( VAR_345 -> VAR_346 . VAR_347 . VAR_348 ) ; if ( ! VAR_349 ) goto VAR_350 ; if ( METHOD_88 ( VAR_351 , & VAR_352 , VAR_353 ) == - 1 ) goto VAR_354 ; METHOD_89 ( VAR_355 ) ; VAR_356 = METHOD_90 ( VAR_357 -> VAR_358 . VAR_359 . VAR_360 ) ; if ( ! VAR_361 ) goto VAR_362 ; if ( METHOD_91 ( VAR_363 , & VAR_364 , VAR_365 ) == - 1 ) goto VAR_366 ; METHOD_92 ( VAR_367 ) ; VAR_368 = METHOD_93 ( VAR_369 -> VAR_370 . VAR_371 . VAR_372 ) ; if ( ! VAR_373 ) goto VAR_374 ; if ( METHOD_94 ( VAR_375 , & VAR_376 , VAR_377 ) == - 1 ) goto VAR_378 ; METHOD_95 ( VAR_379 ) ; break ; case VAR_380 : VAR_381 = METHOD_96 ( VAR_382 , VAR_383 , VAR_384 ) ; if ( ! VAR_385 ) goto VAR_386 ; VAR_387 = METHOD_97 ( VAR_388 -> VAR_389 . VAR_390 . VAR_391 ) ; if ( ! VAR_392 ) goto VAR_393 ; if ( METHOD_98 ( VAR_394 , & VAR_395 , VAR_396 ) == - 1 ) goto VAR_397 ; METHOD_99 ( VAR_398 ) ; VAR_399 = METHOD_100 ( VAR_400 -> VAR_401 . VAR_402 . VAR_403 ) ; if ( ! VAR_404 ) goto VAR_405 ; if ( METHOD_101 ( VAR_406 , & VAR_407 , VAR_408 ) == - 1 ) goto VAR_409 ; METHOD_102 ( VAR_410 ) ; VAR_411 = METHOD_103 ( VAR_412 -> VAR_413 . VAR_414 . VAR_415 , METHOD_104 ) ; if ( ! VAR_416 ) goto VAR_417 ; if ( METHOD_105 ( VAR_418 , & VAR_419 , VAR_420 ) == - 1 ) goto VAR_421 ; METHOD_106 ( VAR_422 ) ; VAR_423 = METHOD_107 ( VAR_424 -> VAR_425 . VAR_426 . VAR_427 , METHOD_108 ) ; if ( ! VAR_428 ) goto VAR_429 ; if ( METHOD_109 ( VAR_430 , & VAR_431 , VAR_432 ) == - 1 ) goto VAR_433 ; METHOD_110 ( VAR_434 ) ; break ; case VAR_435 : VAR_436 = METHOD_111 ( VAR_437 , VAR_438 , VAR_439 ) ; if ( ! VAR_440 ) goto VAR_441 ; VAR_442 = METHOD_112 ( VAR_443 -> VAR_444 . VAR_445 . VAR_446 ) ; if ( ! VAR_447 ) goto VAR_448 ; if ( METHOD_113 ( VAR_449 , & VAR_450 , VAR_451 ) == - 1 ) goto VAR_452 ; METHOD_114 ( VAR_453 ) ; VAR_454 = METHOD_115 ( VAR_455 -> VAR_456 . VAR_457 . VAR_458 ) ; if ( ! VAR_459 ) goto VAR_460 ; if ( METHOD_116 ( VAR_461 , & VAR_462 , VAR_463 ) == - 1 ) goto VAR_464 ; METHOD_117 ( VAR_465 ) ; VAR_466 = METHOD_118 ( VAR_467 -> VAR_468 . VAR_469 . VAR_470 , METHOD_119 ) ; if ( ! VAR_471 ) goto VAR_472 ; if ( METHOD_120 ( VAR_473 , & VAR_474 , VAR_475 ) == - 1 ) goto VAR_476 ; METHOD_121 ( VAR_477 ) ; VAR_478 = METHOD_122 ( VAR_479 -> VAR_480 . VAR_481 . VAR_482 , METHOD_123 ) ; if ( ! VAR_483 ) goto VAR_484 ; if ( METHOD_124 ( VAR_485 , & VAR_486 , VAR_487 ) == - 1 ) goto VAR_488 ; METHOD_125 ( VAR_489 ) ; break ; case VAR_490 : VAR_491 = METHOD_126 ( VAR_492 , VAR_493 , VAR_494 ) ; if ( ! VAR_495 ) goto VAR_496 ; VAR_497 = METHOD_127 ( VAR_498 -> VAR_499 . VAR_500 . VAR_501 ) ; if ( ! VAR_502 ) goto VAR_503 ; if ( METHOD_128 ( VAR_504 , & VAR_505 , VAR_506 ) == - 1 ) goto VAR_507 ; METHOD_129 ( VAR_508 ) ; VAR_509 = METHOD_130 ( VAR_510 -> VAR_511 . VAR_512 . VAR_513 , METHOD_131 ) ; if ( ! VAR_514 ) goto VAR_515 ; if ( METHOD_132 ( VAR_516 , & VAR_517 , VAR_518 ) == - 1 ) goto VAR_519 ; METHOD_133 ( VAR_520 ) ; VAR_521 = METHOD_134 ( VAR_522 -> VAR_523 . VAR_524 . VAR_525 , METHOD_135 ) ; if ( ! VAR_526 ) goto VAR_527 ; if ( METHOD_136 ( VAR_528 , & VAR_529 , VAR_530 ) == - 1 ) goto VAR_531 ; METHOD_137 ( VAR_532 ) ; break ; case VAR_533 : VAR_534 = METHOD_138 ( VAR_535 , VAR_536 , VAR_537 ) ; if ( ! VAR_538 ) goto VAR_539 ; VAR_540 = METHOD_139 ( VAR_541 -> VAR_542 . VAR_543 . VAR_544 ) ; if ( ! VAR_545 ) goto VAR_546 ; if ( METHOD_140 ( VAR_547 , & VAR_548 , VAR_549 ) == - 1 ) goto VAR_550 ; METHOD_141 ( VAR_551 ) ; VAR_552 = METHOD_142 ( VAR_553 -> VAR_554 . VAR_555 . VAR_556 , METHOD_143 ) ; if ( ! VAR_557 ) goto VAR_558 ; if ( METHOD_144 ( VAR_559 , & VAR_560 , VAR_561 ) == - 1 ) goto VAR_562 ; METHOD_145 ( VAR_563 ) ; VAR_564 = METHOD_146 ( VAR_565 -> VAR_566 . VAR_567 . VAR_568 , METHOD_147 ) ; if ( ! VAR_569 ) goto VAR_570 ; if ( METHOD_148 ( VAR_571 , & VAR_572 , VAR_573 ) == - 1 ) goto VAR_574 ; METHOD_149 ( VAR_575 ) ; break ; case VAR_576 : VAR_577 = METHOD_150 ( VAR_578 , VAR_579 , VAR_580 ) ; if ( ! VAR_581 ) goto VAR_582 ; VAR_583 = METHOD_151 ( VAR_584 -> VAR_585 . VAR_586 . VAR_587 , VAR_588 ) ; if ( ! VAR_589 ) goto VAR_590 ; if ( METHOD_152 ( VAR_591 , & VAR_592 , VAR_593 ) == - 1 ) goto VAR_594 ; METHOD_153 ( VAR_595 ) ; VAR_596 = METHOD_154 ( VAR_597 -> VAR_598 . VAR_599 . VAR_600 , METHOD_155 ) ; if ( ! VAR_601 ) goto VAR_602 ; if ( METHOD_156 ( VAR_603 , & VAR_604 , VAR_605 ) == - 1 ) goto VAR_606 ; METHOD_157 ( VAR_607 ) ; break ; case VAR_608 : VAR_609 = METHOD_158 ( VAR_610 , VAR_611 , VAR_612 ) ; if ( ! VAR_613 ) goto VAR_614 ; VAR_615 = METHOD_159 ( VAR_616 -> VAR_617 . VAR_618 . VAR_619 , VAR_620 ) ; if ( ! VAR_621 ) goto VAR_622 ; if ( METHOD_160 ( VAR_623 , & VAR_624 , VAR_625 ) == - 1 ) goto VAR_626 ; METHOD_161 ( VAR_627 ) ; VAR_628 = METHOD_162 ( VAR_629 -> VAR_630 . VAR_631 . VAR_632 , METHOD_163 ) ; if ( ! VAR_633 ) goto VAR_634 ; if ( METHOD_164 ( VAR_635 , & VAR_636 , VAR_637 ) == - 1 ) goto VAR_638 ; METHOD_165 ( VAR_639 ) ; break ; case VAR_640 : VAR_641 = METHOD_166 ( VAR_642 , VAR_643 , VAR_644 ) ; if ( ! VAR_645 ) goto VAR_646 ; VAR_647 = METHOD_167 ( VAR_648 -> VAR_649 . VAR_650 . VAR_651 ) ; if ( ! VAR_652 ) goto VAR_653 ; if ( METHOD_168 ( VAR_654 , & VAR_655 , VAR_656 ) == - 1 ) goto VAR_657 ; METHOD_169 ( VAR_658 ) ; VAR_659 = METHOD_170 ( VAR_660 -> VAR_661 . VAR_662 . VAR_663 ) ; if ( ! VAR_664 ) goto VAR_665 ; if ( METHOD_171 ( VAR_666 , & VAR_667 , VAR_668 ) == - 1 ) goto VAR_669 ; METHOD_172 ( VAR_670 ) ; break ; case VAR_671 : VAR_672 = METHOD_173 ( VAR_673 , VAR_674 , VAR_675 ) ; if ( ! VAR_676 ) goto VAR_677 ; VAR_678 = METHOD_174 ( VAR_679 -> VAR_680 . VAR_681 . VAR_682 , METHOD_175 ) ; if ( ! VAR_683 ) goto VAR_684 ; if ( METHOD_176 ( VAR_685 , & VAR_686 , VAR_687 ) == - 1 ) goto VAR_688 ; METHOD_177 ( VAR_689 ) ; VAR_690 = METHOD_178 ( VAR_691 -> VAR_692 . VAR_693 . VAR_694 , VAR_695 ) ; if ( ! VAR_696 ) goto VAR_697 ; if ( METHOD_179 ( VAR_698 , & VAR_699 , VAR_700 ) == - 1 ) goto VAR_701 ; METHOD_180 ( VAR_702 ) ; VAR_703 = METHOD_181 ( VAR_704 -> VAR_705 . VAR_706 . VAR_707 , METHOD_182 ) ; if ( ! VAR_708 ) goto VAR_709 ; if ( METHOD_183 ( VAR_710 , & VAR_711 , VAR_712 ) == - 1 ) goto VAR_713 ; METHOD_184 ( VAR_714 ) ; VAR_715 = METHOD_185 ( VAR_716 -> VAR_717 . VAR_718 . VAR_719 , METHOD_186 ) ; if ( ! VAR_720 ) goto VAR_721 ; if ( METHOD_187 ( VAR_722 , & VAR_723 , VAR_724 ) == - 1 ) goto VAR_725 ; METHOD_188 ( VAR_726 ) ; break ; case VAR_727 : VAR_728 = METHOD_189 ( VAR_729 , VAR_730 , VAR_731 ) ; if ( ! VAR_732 ) goto VAR_733 ; VAR_734 = METHOD_190 ( VAR_735 -> VAR_736 . VAR_737 . VAR_738 ) ; if ( ! VAR_739 ) goto VAR_740 ; if ( METHOD_191 ( VAR_741 , & VAR_742 , VAR_743 ) == - 1 ) goto VAR_744 ; METHOD_192 ( VAR_745 ) ; VAR_746 = METHOD_193 ( VAR_747 -> VAR_748 . VAR_749 . VAR_750 ) ; if ( ! VAR_751 ) goto VAR_752 ; if ( METHOD_194 ( VAR_753 , & VAR_754 , VAR_755 ) == - 1 ) goto VAR_756 ; METHOD_195 ( VAR_757 ) ; break ; case VAR_758 : VAR_759 = METHOD_196 ( VAR_760 , VAR_761 , VAR_762 ) ; if ( ! VAR_763 ) goto VAR_764 ; VAR_765 = METHOD_197 ( VAR_766 -> VAR_767 . VAR_768 . VAR_769 , VAR_770 ) ; if ( ! VAR_771 ) goto VAR_772 ; if ( METHOD_198 ( VAR_773 , & VAR_774 , VAR_775 ) == - 1 ) goto VAR_776 ; METHOD_199 ( VAR_777 ) ; break ; case VAR_778 : VAR_779 = METHOD_200 ( VAR_780 , VAR_781 , VAR_782 ) ; if ( ! VAR_783 ) goto VAR_784 ; VAR_785 = METHOD_201 ( VAR_786 -> VAR_787 . VAR_788 . VAR_789 ) ; if ( ! VAR_790 ) goto VAR_791 ; if ( METHOD_202 ( VAR_792 , & VAR_793 , VAR_794 ) == - 1 ) goto VAR_795 ; METHOD_203 ( VAR_796 ) ; VAR_797 = METHOD_204 ( VAR_798 -> VAR_799 . VAR_800 . VAR_801 , VAR_802 ) ; if ( ! VAR_803 ) goto VAR_804 ; if ( METHOD_205 ( VAR_805 , & VAR_806 , VAR_807 ) == - 1 ) goto VAR_808 ; METHOD_206 ( VAR_809 ) ; VAR_810 = METHOD_207 ( VAR_811 -> VAR_812 . VAR_813 . VAR_814 ) ; if ( ! VAR_815 ) goto VAR_816 ; if ( METHOD_208 ( VAR_817 , & VAR_818 , VAR_819 ) == - 1 ) goto VAR_820 ; METHOD_209 ( VAR_821 ) ; break ; case VAR_822 : VAR_823 = METHOD_210 ( VAR_824 , VAR_825 , VAR_826 ) ; if ( ! VAR_827 ) goto VAR_828 ; VAR_829 = METHOD_211 ( VAR_830 -> VAR_831 . VAR_832 . VAR_833 , METHOD_212 ) ; if ( ! VAR_834 ) goto VAR_835 ; if ( METHOD_213 ( VAR_836 , & VAR_837 , VAR_838 ) == - 1 ) goto VAR_839 ; METHOD_214 ( VAR_840 ) ; break ; case VAR_841 : VAR_842 = METHOD_215 ( VAR_843 , VAR_844 , VAR_845 ) ; if ( ! VAR_846 ) goto VAR_847 ; VAR_848 = METHOD_216 ( VAR_849 -> VAR_850 . VAR_851 . VAR_852 , METHOD_217 ) ; if ( ! VAR_853 ) goto VAR_854 ; if ( METHOD_218 ( VAR_855 , & VAR_856 , VAR_857 ) == - 1 ) goto VAR_858 ; METHOD_219 ( VAR_859 ) ; break ; case VAR_860 : VAR_861 = METHOD_220 ( VAR_862 , VAR_863 , VAR_864 ) ; if ( ! VAR_865 ) goto VAR_866 ; VAR_867 = METHOD_221 ( VAR_868 -> VAR_869 . VAR_870 . VAR_871 ) ; if ( ! VAR_872 ) goto VAR_873 ; if ( METHOD_222 ( VAR_874 , & VAR_875 , VAR_876 ) == - 1 ) goto VAR_877 ; METHOD_223 ( VAR_878 ) ; break ; case VAR_879 : VAR_880 = METHOD_224 ( VAR_881 , VAR_882 , VAR_883 ) ; if ( ! VAR_884 ) goto VAR_885 ; break ; case VAR_886 : VAR_887 = METHOD_225 ( VAR_888 , VAR_889 , VAR_890 ) ; if ( ! VAR_891 ) goto VAR_892 ; break ; case VAR_893 : VAR_894 = METHOD_226 ( VAR_895 , VAR_896 , VAR_897 ) ; if ( ! VAR_898 ) goto VAR_899 ; break ; } VAR_900 = METHOD_227 ( VAR_901 -> VAR_902 ) ; if ( ! VAR_903 ) goto VAR_904 ; if ( METHOD_228 ( VAR_905 , & VAR_906 , VAR_907 ) < 0 ) goto VAR_908 ; METHOD_229 ( VAR_909 ) ; VAR_910 = METHOD_230 ( VAR_911 -> VAR_912 ) ; if ( ! VAR_913 ) goto VAR_914 ; if ( METHOD_231 ( VAR_915 , & VAR_916 , VAR_917 ) < 0 ) goto VAR_918 ; METHOD_232 ( VAR_919 ) ; VAR_920 = METHOD_233 ( VAR_921 -> VAR_922 ) ; if ( ! VAR_923 ) goto VAR_924 ; if ( METHOD_234 ( VAR_925 , & VAR_926 , VAR_927 ) < 0 ) goto VAR_928 ; METHOD_235 ( VAR_929 ) ; VAR_930 = METHOD_236 ( VAR_931 -> VAR_932 ) ; if ( ! VAR_933 ) goto VAR_934 ; if ( METHOD_237 ( VAR_935 , & VAR_936 , VAR_937 ) < 0 ) goto VAR_938 ; METHOD_238 ( VAR_939 ) ; return VAR_940 ; VAR_941 : METHOD_239 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_69 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_136 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_273 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_426 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_481 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_599 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; VAR_942 = METHOD_241 ( VAR_931 -> VAR_869 . VAR_631 . VAR_945 ) ; if ( ! VAR_942 ) goto VAR_941 ; if ( METHOD_237 ( VAR_943 , & VAR_946 , VAR_942 ) == - 1 ) goto VAR_941 ; METHOD_238 ( VAR_942 ) ; METHOD_240 ( VAR_943 ) ; return VAR_944 ; }",173
174,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; if ( VAR_11 != 0 ) { * VAR_12 = ( TYPE_12 ) VAR_13 ; return VAR_14 ; } VAR_15 = ( TYPE_13 * ) VAR_16 ;  if ( ! VAR_17 -> VAR_18 ) {  * VAR_19 = VAR_20 ; return VAR_21 ; } if ( VAR_22 && METHOD_1 ( VAR_23 , VAR_24 ) ) { VAR_25 = VAR_26 ; } VAR_27 = VAR_28 -> VAR_29 ; switch ( VAR_30 -> VAR_31 ) { case 0 : VAR_32 = METHOD_2 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; break ; case 1 : VAR_40 = METHOD_3 ( VAR_41 , VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ; break ; default : VAR_48 = VAR_49 ; break ; } if ( VAR_50 != 0 ) { * VAR_51 = VAR_52 ; METHOD_4 ( * VAR_53 , VAR_54 ) ; return VAR_55 ; } * VAR_56 = 0 ; return VAR_57 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 ) { TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; if ( VAR_42 -> VAR_58 || VAR_11 != 0 ) { * VAR_12 = ( TYPE_12 ) VAR_13 ; return VAR_14 ; } VAR_15 = ( TYPE_13 * ) VAR_16 ; if ( ! VAR_17 -> VAR_18 ) { * VAR_19 = VAR_20 ; return VAR_21 ; } if ( VAR_22 && METHOD_1 ( VAR_23 , VAR_24 ) ) { VAR_25 = VAR_26 ; } VAR_27 = VAR_28 -> VAR_29 ; switch ( VAR_30 -> VAR_31 ) { case 0 : VAR_32 = METHOD_2 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 ) ; break ; case 1 : VAR_40 = METHOD_3 ( VAR_41 , VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 ) ; break ; default : VAR_48 = VAR_49 ; break ; } if ( VAR_50 != 0 ) { * VAR_51 = VAR_52 ; METHOD_4 ( * VAR_53 , VAR_54 ) ; return VAR_55 ; } * VAR_56 = 0 ; return VAR_57 ; }",174
175,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ;  if ( METHOD_1 ( VAR_7 , & VAR_8 ) ) {  TYPE_7 TYPE_8 ;  VAR_9 = METHOD_2 ( VAR_10 , & VAR_11 ) ;  if ( VAR_12 == VAR_13 ) goto VAR_14 ;  TYPE_9 = METHOD_3 ( VAR_15 , & VAR_16 , VAR_17 ) ;  if ( TYPE_10 != 0 ) goto VAR_18 ; METHOD_4 ( VAR_19 ) ;  } else {  PyErr_SetString ( VAR_20 , ""requiredfield\\""context_expr\\""missingfromwithitem"" ) ; return 1 ; } if ( METHOD_5 ( VAR_21 , & VAR_22 ) ) { TYPE_11 TYPE_12 ; VAR_23 = METHOD_6 ( VAR_24 , & VAR_25 ) ; if ( VAR_26 == VAR_27 ) goto VAR_28 ; TYPE_13 = METHOD_7 ( VAR_29 , & VAR_30 , VAR_31 ) ; if ( TYPE_14 != 0 ) goto VAR_32 ; METHOD_8 ( VAR_33 ) ; } else { VAR_34 = VAR_35 ; } * VAR_36 = METHOD_9 ( VAR_37 , VAR_38 , VAR_39 ) ; return 0 ; VAR_40 : METHOD_10 ( VAR_41 ) ; return 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; if ( METHOD_11 ( VAR_24 , & VAR_25 ) ; if ( VAR_26 == VAR_27 ) goto VAR_28 ; TYPE_13 = METHOD_7 ( VAR_29 , & VAR_30 , VAR_31 ) ; if ( TYPE_14 != 0 ) goto VAR_32 ; METHOD_8 ( VAR_33 ) ; } else { VAR_34 = VAR_35 ; } * VAR_36 = METHOD_9 ( VAR_37 , VAR_38 , VAR_39 ) ; return 0 ; VAR_40 : METHOD_10 ( VAR_41 ) ; return 1 ; }",175
176,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) {  METHOD_1 ( VAR_8 ) ;  return VAR_9 ; } VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , & VAR_22 , VAR_23 ) == - 1 ) goto VAR_24 ; METHOD_5 ( VAR_25 ) ; VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 ) ; if ( ! VAR_29 ) goto VAR_30 ; if ( METHOD_7 ( VAR_31 , & VAR_32 , VAR_33 ) == - 1 ) goto VAR_34 ; METHOD_8 ( VAR_35 ) ; return VAR_36 ; VAR_37 : METHOD_9 ( VAR_38 ) ; METHOD_10 ( VAR_39 ) ; return VAR_40 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) { METHOD_1 ( VAR_8 ) ; return VAR_9 ; } VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 = METHOD_3 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; if ( METHOD_4 ( VAR_21 , & VAR_22 , VAR_23 ) == - 1 ) goto VAR_24 ; METHOD_5 ( VAR_25 ) ; VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 ) ; if ( ! VAR_29 ) goto VAR_30 ; if ( METHOD_7 ( VAR_31 , & VAR_32 , VAR_33 ) == - 1 ) goto VAR_34 ; METHOD_8 ( VAR_35 ) ; return VAR_36 ; VAR_37 : METHOD_9 ( VAR_38 ) ; METHOD_10 ( VAR_39 ) ; return VAR_40 ; }",176
177," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ; if ( VAR_5 ) { TYPE_6 * VAR_6 = ( TYPE_7 * ) VAR_7 ; if ( ! METHOD_1 ( VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ) ) return VAR_16 ; else return VAR_17 ; } else return VAR_18 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = va_arg ( VAR_4 , TYPE_5 * ) ; if ( VAR_5 ) { TYPE_6 * VAR_6 = ( TYPE_7 * ) VAR_7 ; if ( ! METHOD_1 ( VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ) ) return VAR_16 ; else return VAR_17 ; } else return VAR_18 ; }",177
178,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( METHOD_1 ( VAR_1 -> VAR_2 ) < 0 ) return - 1 ; VAR_3 -> VAR_4 = VAR_5 ; if ( METHOD_2 ( VAR_6 ) != VAR_7 ) { METHOD_3 ( VAR_8 ) ; return - 1 ; } if ( METHOD_4 ( VAR_9 -> VAR_10 , ""*OK"" , VAR_11 ) ) { if ( ! METHOD_5 ( VAR_12 -> VAR_13 , ""*OK[CAPABILITY"" , VAR_14 ) && METHOD_6 ( VAR_15 ) ) { goto VAR_16 ; } TYPE_1 TYPE_2 if ( ! VAR_17 -> VAR_18 -> VAR_19 && ( VAR_20 || ( VAR_21 -> VAR_22 & VAR_23 ) ) ) { enum VAR_24 VAR_25 ; if ( VAR_26 ) VAR_27 = VAR_28 ; else if ( ( VAR_29 = METHOD_7 ( VAR_30 , METHOD_8 ( ""SecureconnectionwithTLS?"" ) ) ) == VAR_31 ) { goto VAR_32 ; } if ( VAR_33 == VAR_34 ) {  enum VAR_35 VAR_36 = METHOD_9 ( VAR_37 , ""STARTTLS"" , VAR_38 ) ;  if ( VAR_39 == VAR_40 ) goto VAR_41 ; if ( VAR_42 != VAR_43 ) { if ( METHOD_10 ( VAR_44 -> VAR_45 ) ) { METHOD_11 ( METHOD_12 ( ""CouldnotnegotiateTLSconnection"" ) ) ; goto VAR_46 ; } else { if ( METHOD_13 ( VAR_47 , ""CAPABILITY"" , VAR_48 ) ) goto VAR_49 ; } } } } if ( VAR_50 && ! VAR_51 -> VAR_52 -> VAR_53 ) { METHOD_14 ( METHOD_15 ( ""Encryptedconnectionunavailable"" ) ) ; goto VAR_54 ; } } else if ( METHOD_16 ( VAR_55 -> VAR_56 , ""*PREAUTH"" , VAR_57 ) ) { TYPE_3 TYPE_4 if ( VAR_58 -> VAR_59 -> VAR_60 == 0 ) { TYPE_5 VAR_61 = VAR_62 ; if ( VAR_63 ) { VAR_64 = VAR_65 ; } else if ( VAR_66 != VAR_67 ) { VAR_68 = METHOD_17 ( METHOD_18 ( ""AbortunencryptedPREAUTHconnection?"" ) , VAR_69 ) != VAR_70 ; } if ( ! VAR_71 ) { METHOD_19 ( METHOD_20 ( ""Encryptedconnectionunavailable"" ) ) ; goto VAR_72 ; } } VAR_73 -> VAR_74 = VAR_75 ; if ( METHOD_21 ( VAR_76 ) != 0 ) goto VAR_77 ; METHOD_22 ( & VAR_78 -> VAR_79 ) ; } else { METHOD_23 ( ""imap_open_connection()"" , VAR_80 -> VAR_81 ) ; goto VAR_82 ; } return 0 ; TYPE_6 TYPE_7 VAR_83 : METHOD_24 ( VAR_84 ) ; VAR_85 : METHOD_25 ( & VAR_86 -> VAR_87 ) ; return - 1 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( METHOD_1 ( VAR_1 -> VAR_2 ) < 0 ) return - 1 ; VAR_3 -> VAR_4 = VAR_5 ; if ( METHOD_2 ( VAR_6 ) != VAR_7 ) { METHOD_3 ( VAR_8 ) ; return - 1 ; } if ( METHOD_4 ( VAR_9 -> VAR_10 , ""*OK"" , VAR_11 ) ) { if ( ! METHOD_5 ( VAR_12 -> VAR_13 , ""*OK[CAPABILITY"" , VAR_14 ) && METHOD_6 ( VAR_15 ) ) { goto VAR_16 ; } TYPE_1 TYPE_2 if ( ! VAR_17 -> VAR_18 -> VAR_19 && ( VAR_20 || ( VAR_21 -> VAR_22 & VAR_23 ) ) ) { enum VAR_24 VAR_25 ; if ( VAR_26 ) VAR_27 = VAR_28 ; else if ( ( VAR_29 = METHOD_7 ( VAR_30 , METHOD_8 ( ""SecureconnectionwithTLS?"" ) ) ) == VAR_31 ) { goto VAR_32 ; } if ( VAR_33 == VAR_34 ) { enum VAR_35 VAR_36 = METHOD_9 ( VAR_37 , ""STARTTLS"" , VAR_88 ) ; METHOD_26 ( VAR_86 -> VAR_59 ) ; if ( VAR_39 == VAR_40 ) goto VAR_41 ; if ( VAR_42 != VAR_43 ) { if ( METHOD_10 ( VAR_44 -> VAR_45 ) ) { METHOD_11 ( METHOD_12 ( ""CouldnotnegotiateTLSconnection"" ) ) ; goto VAR_46 ; } else { if ( METHOD_13 ( VAR_47 , ""CAPABILITY"" , VAR_48 ) ) goto VAR_49 ; } } } } if ( VAR_50 && ! VAR_51 -> VAR_52 -> VAR_53 ) { METHOD_14 ( METHOD_15 ( ""Encryptedconnectionunavailable"" ) ) ; goto VAR_54 ; } } else if ( METHOD_16 ( VAR_55 -> VAR_56 , ""*PREAUTH"" , VAR_57 ) ) { TYPE_3 TYPE_4 if ( VAR_58 -> VAR_59 -> VAR_60 == 0 ) { TYPE_5 VAR_61 = VAR_62 ; if ( VAR_63 ) { VAR_64 = VAR_65 ; } else if ( VAR_66 != VAR_67 ) { VAR_68 = METHOD_17 ( METHOD_18 ( ""AbortunencryptedPREAUTHconnection?"" ) , VAR_69 ) != VAR_70 ; } if ( ! VAR_71 ) { METHOD_19 ( METHOD_20 ( ""Encryptedconnectionunavailable"" ) ) ; goto VAR_72 ; } } VAR_73 -> VAR_74 = VAR_75 ; if ( METHOD_21 ( VAR_76 ) != 0 ) goto VAR_77 ; METHOD_22 ( & VAR_78 -> VAR_79 ) ; } else { METHOD_23 ( ""imap_open_connection()"" , VAR_80 -> VAR_81 ) ; goto VAR_82 ; } return 0 ; TYPE_6 TYPE_7 VAR_83 : METHOD_24 ( VAR_84 ) ; VAR_85 : METHOD_25 ( & VAR_86 -> VAR_87 ) ; return - 1 ; }",178
179,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 ; if ( VAR_5 ) { METHOD_1 ( VAR_6 ) ; VAR_7 = VAR_8 ; } if ( ! VAR_9 ) return ; VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ;  VAR_15 = METHOD_3 ( VAR_16 , ""a"" ) ;  if ( VAR_17 ) { TYPE_6 VAR_18 = METHOD_4 ( VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 | METHOD_6 ( VAR_23 , VAR_24 ) ) ; METHOD_7 ( VAR_25 , VAR_26 , VAR_27 | METHOD_8 ( VAR_28 , VAR_29 ) ) ; } METHOD_9 ( VAR_30 ) ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 ; if ( VAR_5 ) { METHOD_1 ( VAR_6 ) ; VAR_7 = VAR_8 ; } if ( ! VAR_9 ) return ; VAR_10 = METHOD_2 ( VAR_11 , VAR_12 , VAR_13 , VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 , ""a"" ) ; if ( VAR_17 ) { TYPE_6 VAR_18 = METHOD_4 ( VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 | METHOD_6 ( VAR_23 , VAR_24 ) ) ; METHOD_7 ( VAR_25 , VAR_26 , VAR_27 | METHOD_8 ( VAR_28 , VAR_29 ) ) ; } METHOD_9 ( VAR_30 ) ; }",179
180,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 ) ; TYPE_2 VAR_5 = VAR_6 + METHOD_2 ( VAR_7 -> VAR_8 ) - 1 ; unsigned TYPE_3 VAR_9 , VAR_10 ; struct STRUCT_OR_UNION_2 VAR_11 ; TYPE_4 VAR_12 = 0 ; if ( VAR_13 >= METHOD_3 ( VAR_14 ) || VAR_15 -> VAR_16 < VAR_17 -> VAR_18 ) return - VAR_19 ; VAR_20 . VAR_21 = 0 ; if ( VAR_22 <= METHOD_4 ( VAR_23 ) ) goto VAR_24 ; if ( METHOD_5 ( VAR_25 , VAR_26 ) ) { METHOD_6 ( VAR_27 -> VAR_28 , VAR_29 , ""FoundFScorruption,runfscktofix."" ) ; goto VAR_30 ; } VAR_31 = ( VAR_32 <= METHOD_7 ( VAR_33 ) ) ? 0 : METHOD_8 ( VAR_34 , VAR_35 ) ; VAR_36 = ( VAR_37 >= METHOD_9 ( VAR_38 ) ) ? METHOD_10 ( VAR_39 ) - 1 : METHOD_11 ( VAR_40 , VAR_41 ) ; VAR_42 . VAR_43 = VAR_44 ; VAR_45 . VAR_46 = METHOD_12 ( TYPE_5 , 1 , METHOD_13 ( VAR_47 -> VAR_48 ) ) ; for ( ; VAR_49 <= VAR_50 ; VAR_51 = VAR_52 . VAR_53 + 1 ) { VAR_54 . VAR_55 = VAR_56 ; if ( VAR_57 -> VAR_58 == 0 ) break ; else if ( VAR_59 -> VAR_60 < METHOD_14 ( VAR_61 ) ) VAR_62 . VAR_63 = VAR_64 ; else VAR_65 . VAR_66 = min_t ( unsigned TYPE_6 , VAR_67 ( VAR_68 + METHOD_15 ( VAR_69 ) , VAR_70 -> VAR_71 ) - 1 , VAR_72 ) ; METHOD_16 ( & VAR_73 -> VAR_74 ) ; VAR_75 = METHOD_17 ( VAR_76 , & VAR_77 ) ; METHOD_18 ( & VAR_78 -> VAR_79 ) ; if ( VAR_80 ) break ; METHOD_19 ( ) ; } METHOD_20 ( VAR_81 ) ;  METHOD_21 ( VAR_82 ) ;  VAR_83 : VAR_84 -> VAR_85 = METHOD_22 ( VAR_86 . VAR_87 ) ; return VAR_88 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 ) ; TYPE_2 VAR_5 = VAR_6 + METHOD_2 ( VAR_7 -> VAR_8 ) - 1 ; unsigned TYPE_3 VAR_9 , VAR_10 ; struct STRUCT_OR_UNION_2 VAR_11 ; TYPE_4 VAR_12 = 0 ; if ( VAR_13 >= METHOD_3 ( VAR_14 ) || VAR_15 -> VAR_16 < VAR_17 -> VAR_18 ) return - VAR_19 ; VAR_20 . VAR_21 = 0 ; if ( VAR_22 <= METHOD_4 ( VAR_23 ) ) goto VAR_24 ; if ( METHOD_5 ( VAR_25 , VAR_26 ) ) { METHOD_6 ( VAR_27 -> VAR_28 , VAR_29 , ""FoundFScorruption,runfscktofix."" ) ; goto VAR_30 ; } VAR_31 = ( VAR_32 <= METHOD_7 ( VAR_33 ) ) ? 0 : METHOD_8 ( VAR_34 , VAR_35 ) ; VAR_36 = ( VAR_37 >= METHOD_9 ( VAR_38 ) ) ? METHOD_10 ( VAR_39 ) - 1 : METHOD_11 ( VAR_40 , VAR_41 ) ; VAR_42 . VAR_43 = VAR_44 ; VAR_45 . VAR_46 = METHOD_12 ( TYPE_5 , 1 , METHOD_13 ( VAR_47 -> VAR_48 ) ) ; for ( ; VAR_49 <= VAR_50 ; VAR_51 = VAR_52 . VAR_53 + 1 ) { VAR_54 . VAR_55 = VAR_56 ; if ( VAR_57 -> VAR_58 == 0 ) break ; else if ( VAR_59 -> VAR_60 < METHOD_14 ( VAR_61 ) ) VAR_62 . VAR_63 = VAR_64 ; else VAR_65 . VAR_66 = min_t ( unsigned TYPE_6 , VAR_67 ( VAR_68 + METHOD_15 ( VAR_69 ) , VAR_70 -> VAR_71 ) - 1 , VAR_72 ) ; METHOD_16 ( & VAR_73 -> VAR_74 ) ; VAR_75 = METHOD_17 ( VAR_76 , & VAR_77 ) ; METHOD_18 ( & VAR_78 -> VAR_79 ) ; if ( VAR_80 ) break ; METHOD_19 ( ) ; } METHOD_20 ( VAR_81 ) ; METHOD_21 ( VAR_82 , VAR_89 ) ; VAR_83 : VAR_84 -> VAR_85 = METHOD_22 ( VAR_86 . VAR_87 ) ; return VAR_88 ; }",180
181,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; const TYPE_2 * VAR_3 ;  TYPE_3 VAR_4 ;  TYPE_4 VAR_5 ; VAR_6 = METHOD_1 ( VAR_7 , 0 ) ; VAR_8 = METHOD_2 ( VAR_9 , 1 ) ; VAR_10 = 0 ; if ( VAR_11 -> VAR_12 & VAR_13 ) { if ( VAR_14 -> VAR_15 > METHOD_3 ( VAR_16 ) ) { VAR_17 -> VAR_18 = 0 ; METHOD_4 ( VAR_19 , 0 ) ; return ; } if ( VAR_20 -> VAR_21 > 0 ) { VAR_22 += VAR_23 -> VAR_24 ; VAR_25 |= VAR_26 ; } }  if ( ! METHOD_5 ( VAR_27 -> VAR_28 , VAR_29 , & VAR_30 , VAR_31 ) ) {  if ( VAR_32 -> VAR_33 & VAR_34 ) VAR_35 -> VAR_36 = VAR_37 -> VAR_38 + ( VAR_39 . VAR_40 [ 0 ] . VAR_41 - VAR_42 ) ; METHOD_6 ( VAR_43 , 1 ) ; return ; } if ( VAR_44 -> VAR_45 & VAR_46 ) VAR_47 -> VAR_48 = 0 ; METHOD_7 ( VAR_49 , 0 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 * VAR_2 ; const TYPE_2 * VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; VAR_6 = METHOD_1 ( VAR_7 , 0 ) ; VAR_8 = METHOD_2 ( VAR_9 , 1 ) ; VAR_10 = 0 ; if ( VAR_11 -> VAR_12 & VAR_13 ) { if ( VAR_14 -> VAR_15 > METHOD_3 ( VAR_16 ) ) { VAR_17 -> VAR_18 = 0 ; METHOD_4 ( VAR_19 , 0 ) ; return ; } if ( VAR_20 -> VAR_21 > 0 ) { VAR_22 += VAR_23 -> VAR_24 ; VAR_25 |= VAR_26 ; } } if ( ! METHOD_5 ( VAR_27 -> VAR_28 , VAR_29 , & VAR_30 , VAR_31 ) ; if ( VAR_50 < 0 ) METHOD_8 ( VAR_49 , ""regexecfailed"" ) ; if ( VAR_50 == 0 ) { if ( VAR_32 -> VAR_33 & VAR_34 ) VAR_35 -> VAR_36 = VAR_37 -> VAR_38 + ( VAR_39 . VAR_40 [ 0 ] . VAR_41 - VAR_42 ) ; METHOD_6 ( VAR_43 , 1 ) ; return ; } if ( VAR_44 -> VAR_45 & VAR_46 ) VAR_47 -> VAR_48 = 0 ; METHOD_7 ( VAR_49 , 0 ) ; }",181
182," TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 )  { TYPE_5 * VAR_4 = ( TYPE_6 * ) VAR_5 ;  if ( VAR_6 == VAR_7 ) return 0 ;   if ( VAR_8 -> VAR_9 == 0 || VAR_10 -> VAR_11 == 0 || VAR_12 -> VAR_13 == 0 || VAR_14 == VAR_15 || VAR_16 == VAR_17 ) return 1 ;   * VAR_18 = ( TYPE_7 ) ( ( TYPE_8 ) VAR_19 * ( TYPE_9 ) VAR_20 -> VAR_21 / ( TYPE_10 ) VAR_22 -> VAR_23 ) ;   * VAR_24 = ( TYPE_11 ) ( ( TYPE_12 ) ( VAR_25 + 1 ) * ( TYPE_13 ) VAR_26 -> VAR_27 / ( TYPE_14 ) VAR_28 -> VAR_29 ) ;   return 0 ;  }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = ( TYPE_6 * ) VAR_5 ; if ( VAR_6 == VAR_7 ) return 0 ; if ( VAR_8 -> VAR_9 == 0 || VAR_10 -> VAR_11 == 0 || VAR_12 -> VAR_13 == 0 || VAR_14 == VAR_15 || VAR_16 == VAR_17 ) return VAR_30 ; * VAR_18 = ( TYPE_7 ) ( ( TYPE_8 ) VAR_19 * ( TYPE_9 ) VAR_20 -> VAR_21 / ( TYPE_10 ) VAR_22 -> VAR_23 ) ; * VAR_24 = ( TYPE_11 ) ( ( TYPE_12 ) ( VAR_25 + 1 ) * ( TYPE_13 ) VAR_26 -> VAR_27 / ( TYPE_14 ) VAR_28 -> VAR_29 ) ; return VAR_31 ; }",182
183,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 ; while ( VAR_5 ) {  TYPE_6 VAR_6 ;  VAR_7 = ( TYPE_7 * ) VAR_8 ; VAR_9 -= 4 ; VAR_10 = METHOD_1 ( VAR_11 -> VAR_12 ) ; if ( VAR_13 == VAR_14 ) { METHOD_2 ( VAR_15 ) ; METHOD_3 ( VAR_16 ) ; } else { METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ; } VAR_20 = VAR_21 + 4 ; if ( VAR_22 < 4 ) { METHOD_5 ( ""Skip%ubytespadding\\n"" , VAR_23 ) ; VAR_24 = 0 ; } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 ; while ( VAR_5 ) { TYPE_6 VAR_6 ; VAR_7 = ( TYPE_7 * ) VAR_8 ; VAR_9 -= 4 ; VAR_10 = METHOD_1 ( VAR_11 -> VAR_12 ) ; if ( VAR_13 == VAR_14 ) { METHOD_2 ( VAR_15 ) ; METHOD_3 ( VAR_16 ) ; } else { METHOD_4 ( VAR_17 , VAR_18 , VAR_19 ) ; } VAR_20 = VAR_21 + 4 ; if ( VAR_22 < 4 ) { METHOD_5 ( ""Skip%ubytespadding\\n"" , VAR_23 ) ; VAR_24 = 0 ; } } }",183
184,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 , VAR_6 ) ; if ( VAR_7 ) return VAR_8 ; VAR_9 = METHOD_2 ( VAR_10 , VAR_11 -> VAR_12 , VAR_13 - 1 , & VAR_14 , VAR_15 ) ; if ( VAR_16 ) return VAR_17 ; VAR_18 = METHOD_3 ( VAR_19 -> VAR_20 , VAR_21 ) ; if ( VAR_22 ) return VAR_23 ; VAR_24 -> VAR_25 [ VAR_26 ] = '\\0' ; METHOD_4 ( ""%s"" , VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_5 ( VAR_30 , VAR_31 -> VAR_32 ) ; if ( VAR_33 ) return VAR_34 ; VAR_35 -> VAR_36 . VAR_37 = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 = 0 ; if ( VAR_42 == VAR_43 ) VAR_44 -> VAR_45 . VAR_46 = VAR_47 ; VAR_48 -> VAR_49 . VAR_50 = VAR_51 ; METHOD_6 ( VAR_52 -> VAR_53 . VAR_54 , """" ) ; if ( VAR_55 -> VAR_56 . VAR_57 >= VAR_58 ) { TYPE_4 VAR_59 ; TYPE_5 * VAR_60 ; TYPE_6 * VAR_61 ; TYPE_7 * VAR_62 ; VAR_63 = '\\0' ; while ( 1 ) { VAR_64 = METHOD_7 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 , & VAR_69 ) ; if ( VAR_70 ) return VAR_71 ; METHOD_8 ( ""%s"" , VAR_72 -> VAR_73 ) ; if ( ! METHOD_9 ( VAR_74 -> VAR_75 , ""\\r\\n"" ) ) break ;  VAR_76 = METHOD_10 ( VAR_77 -> VAR_78 , ':' ) ;  if ( VAR_79 != VAR_80 ) { * VAR_81 = '\\0' ; VAR_82 = METHOD_11 ( VAR_83 -> VAR_84 ) ; VAR_85 = METHOD_12 ( VAR_86 + 1 ) ; METHOD_13 ( VAR_87 , VAR_88 , VAR_89 ) ; } } } if ( VAR_90 -> VAR_91 . VAR_92 ) { VAR_93 -> VAR_94 . VAR_95 = 0 ; VAR_96 -> VAR_97 . VAR_98 = VAR_99 ; VAR_100 -> VAR_101 . VAR_102 = VAR_103 ; } else { VAR_104 -> VAR_105 . VAR_106 = VAR_107 -> VAR_108 . VAR_109 ; } return VAR_110 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 , VAR_6 ) ; if ( VAR_7 ) return VAR_8 ; VAR_9 = METHOD_2 ( VAR_10 , VAR_11 -> VAR_12 , VAR_13 - 1 , & VAR_14 , VAR_15 ) ; if ( VAR_16 ) return VAR_17 ; VAR_18 = METHOD_3 ( VAR_19 -> VAR_20 , VAR_21 ) ; if ( VAR_22 ) return VAR_23 ; VAR_24 -> VAR_25 [ VAR_26 ] = '\\0' ; METHOD_4 ( ""%s"" , VAR_27 -> VAR_28 ) ; VAR_29 = METHOD_5 ( VAR_30 , VAR_31 -> VAR_32 ) ; if ( VAR_33 ) return VAR_34 ; VAR_35 -> VAR_36 . VAR_37 = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 = 0 ; if ( VAR_42 == VAR_43 ) VAR_44 -> VAR_45 . VAR_46 = VAR_47 ; VAR_48 -> VAR_49 . VAR_50 = VAR_51 ; METHOD_6 ( VAR_52 -> VAR_53 . VAR_54 , """" ) ; if ( VAR_55 -> VAR_56 . VAR_57 >= VAR_58 ) { TYPE_4 VAR_59 ; TYPE_5 * VAR_60 ; TYPE_6 * VAR_61 ; TYPE_7 * VAR_62 ; VAR_63 = '\\0' ; while ( 1 ) { VAR_64 = METHOD_7 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 , & VAR_69 ) ; if ( VAR_70 ) return VAR_71 ; METHOD_8 ( ""%s"" , VAR_72 -> VAR_73 ) ; if ( ! METHOD_9 ( VAR_74 -> VAR_75 , ""\\r\\n"" ) ) break ; VAR_76 = METHOD_10 ( VAR_77 -> VAR_78 , ':' ) ; if ( VAR_79 != VAR_80 ) { * VAR_81 = '\\0' ; VAR_82 = METHOD_11 ( VAR_83 -> VAR_84 ) ; VAR_85 = METHOD_12 ( VAR_86 + 1 ) ; METHOD_13 ( VAR_87 , VAR_88 , VAR_89 ) ; } } } if ( VAR_90 -> VAR_91 . VAR_92 ) { VAR_93 -> VAR_94 . VAR_95 = 0 ; VAR_96 -> VAR_97 . VAR_98 = VAR_99 ; VAR_100 -> VAR_101 . VAR_102 = VAR_103 ; } else { VAR_104 -> VAR_105 . VAR_106 = VAR_107 -> VAR_108 . VAR_109 ; } return VAR_110 ; }",184
185,"static TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 = VAR_9 ; if ( VAR_10 == VAR_11 ) { VAR_12 = METHOD_1 ( ) ; } * VAR_13 = METHOD_2 ( VAR_14 , 1 , sizeof ( TYPE_10 ) ) ; if ( * VAR_15 == VAR_16 ) { VAR_17 = VAR_18 ; goto VAR_19 ; } ( * VAR_20 ) -> VAR_21 = * VAR_22 ; VAR_23 = & ( * VAR_24 ) -> VAR_25 ; METHOD_3 ( & ( * VAR_26 ) -> VAR_27 , 0 , VAR_28 , VAR_29 , VAR_30 , 0 , 0 , VAR_31 , VAR_32 ) ; ( * VAR_33 ) -> VAR_34 = VAR_35 ; ( * VAR_36 ) -> VAR_37 = 0 ; ( * VAR_38 ) -> VAR_39 = 0 ; ( * VAR_40 ) -> VAR_41 = 0 ; ( * VAR_42 ) -> VAR_43 = VAR_44 ; ( * VAR_45 ) -> VAR_46 = VAR_47 ; ( * VAR_48 ) -> VAR_49 = ( 1u << 31 ) - 1 ; ( * VAR_50 ) -> VAR_51 = ( 1u << 31 ) - 1 ; ( * VAR_52 ) -> VAR_53 = VAR_54 ; ( * VAR_55 ) -> VAR_56 = 1 ; if ( VAR_57 ) { ( * VAR_58 ) -> VAR_59 = 1 ; } METHOD_4 ( & ( * VAR_60 ) -> VAR_61 ) ; METHOD_5 ( & ( * VAR_62 ) -> VAR_63 ) ; ( * VAR_64 ) -> VAR_65 = VAR_66 ; ( * VAR_67 ) -> VAR_68 . VAR_69 = 100 ; ( * VAR_70 ) -> VAR_71 = VAR_72 ; ( * VAR_73 ) -> VAR_74 = VAR_75 ;  if ( VAR_76 ) {  if ( ( VAR_77 -> VAR_78 & VAR_79 ) && VAR_80 -> VAR_81 ) { ( * VAR_82 ) -> VAR_83 |= VAR_84 ; } if ( VAR_85 -> VAR_86 & VAR_87 ) { ( * VAR_88 ) -> VAR_89 . VAR_90 = VAR_91 -> VAR_92 ; } if ( VAR_93 -> VAR_94 & VAR_95 ) { ( * VAR_96 ) -> VAR_97 = VAR_98 -> VAR_99 ; } if ( ( VAR_100 -> VAR_101 & VAR_102 ) && VAR_103 -> VAR_104 ) { ( * VAR_105 ) -> VAR_106 |= VAR_107 ; } if ( ( VAR_108 -> VAR_109 & VAR_110 ) && VAR_111 -> VAR_112 ) { ( * VAR_113 ) -> VAR_114 |= VAR_115 ; } if ( VAR_116 -> VAR_117 & VAR_118 ) { METHOD_6 ( ( * VAR_119 ) -> VAR_120 , VAR_121 -> VAR_122 , sizeof ( ( * VAR_123 ) -> VAR_124 ) ) ; } if ( VAR_125 -> VAR_126 & VAR_127 ) { ( * VAR_128 ) -> VAR_129 = VAR_130 -> VAR_131 ; } if ( ( VAR_132 -> VAR_133 & VAR_134 ) && VAR_135 -> VAR_136 ) { ( * VAR_137 ) -> VAR_138 |= VAR_139 ; } if ( VAR_140 -> VAR_141 & VAR_142 ) { ( * VAR_143 ) -> VAR_144 = VAR_145 -> VAR_146 ; } if ( VAR_147 -> VAR_148 & VAR_149 ) { VAR_150 = VAR_151 -> VAR_152 ; } if ( ( VAR_153 -> VAR_154 & VAR_155 ) && VAR_156 -> VAR_157 ) { ( * VAR_158 ) -> VAR_159 |= VAR_160 ; } if ( VAR_161 -> VAR_162 & VAR_163 ) { ( * VAR_164 ) -> VAR_165 = VAR_166 -> VAR_167 ; }  }  VAR_168 = METHOD_7 ( & ( * VAR_169 ) -> VAR_170 , VAR_171 , VAR_172 ) ; if ( VAR_173 != 0 ) { goto VAR_174 ; } VAR_175 = METHOD_8 ( & ( * VAR_176 ) -> VAR_177 , VAR_178 ) ; if ( VAR_179 != 0 ) { goto VAR_180 ; } VAR_181 = METHOD_9 ( & ( * VAR_182 ) -> VAR_183 , VAR_184 ) ; if ( VAR_185 != 0 ) { goto VAR_186 ; } VAR_187 = ( ( * VAR_188 ) -> VAR_189 + VAR_190 - 1 ) / VAR_191 ; if ( VAR_192 == 0 ) { VAR_193 = 1 ; } VAR_194 = METHOD_10 ( & ( * VAR_195 ) -> VAR_196 . VAR_197 , VAR_198 , VAR_199 , 1 , VAR_200 + 1 , VAR_201 ) ; if ( VAR_202 != 0 ) { goto VAR_203 ; } METHOD_11 ( & ( * VAR_204 ) -> VAR_205 , VAR_206 ) ; ( * VAR_207 ) -> VAR_208 = * VAR_209 ; ( * VAR_210 ) -> VAR_211 = VAR_212 ; METHOD_12 ( * VAR_213 ) ; if ( VAR_214 ) { TYPE_11 * VAR_215 = & ( * VAR_216 ) -> VAR_217 ; if ( VAR_218 && ( ( * VAR_219 ) -> VAR_220 & VAR_221 ) == 0 ) { VAR_222 -> VAR_223 = VAR_224 ; VAR_225 -> VAR_226 = VAR_227 ; } else { VAR_228 -> VAR_229 = VAR_230 ; } if ( ! VAR_231 ) { ( * VAR_232 ) -> VAR_233 . VAR_234 = VAR_235 ; METHOD_13 ( & ( * VAR_236 ) -> VAR_237 . VAR_238 , VAR_239 , VAR_240 ) ; } } return 0 ; VAR_241 : METHOD_14 ( & ( * VAR_242 ) -> VAR_243 ) ; VAR_244 : METHOD_15 ( & ( * VAR_245 ) -> VAR_246 ) ; VAR_247 : METHOD_16 ( & ( * VAR_248 ) -> VAR_249 ) ; VAR_250 : METHOD_17 ( VAR_251 , * VAR_252 ) ; VAR_253 : return VAR_254 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 = VAR_9 ; if ( VAR_10 == VAR_11 ) { VAR_12 = METHOD_1 ( ) ; } * VAR_13 = METHOD_2 ( VAR_14 , 1 , sizeof ( TYPE_10 ) ) ; if ( * VAR_15 == VAR_16 ) { VAR_17 = VAR_18 ; goto VAR_19 ; } ( * VAR_20 ) -> VAR_21 = * VAR_22 ; VAR_23 = & ( * VAR_24 ) -> VAR_25 ; METHOD_3 ( & ( * VAR_26 ) -> VAR_27 , 0 , VAR_28 , VAR_29 , VAR_30 , 0 , 0 , VAR_31 , VAR_32 ) ; ( * VAR_33 ) -> VAR_34 = VAR_35 ; ( * VAR_36 ) -> VAR_37 = 0 ; ( * VAR_38 ) -> VAR_39 = 0 ; ( * VAR_40 ) -> VAR_41 = 0 ; ( * VAR_42 ) -> VAR_43 = VAR_44 ; ( * VAR_45 ) -> VAR_46 = VAR_47 ; ( * VAR_48 ) -> VAR_49 = ( 1u << 31 ) - 1 ; ( * VAR_50 ) -> VAR_51 = ( 1u << 31 ) - 1 ; ( * VAR_52 ) -> VAR_53 = VAR_54 ; ( * VAR_55 ) -> VAR_56 = 1 ; if ( VAR_57 ) { ( * VAR_58 ) -> VAR_59 = 1 ; } METHOD_4 ( & ( * VAR_60 ) -> VAR_61 ) ; METHOD_5 ( & ( * VAR_62 ) -> VAR_63 ) ; ( * VAR_64 ) -> VAR_65 = VAR_66 ; ( * VAR_67 ) -> VAR_68 . VAR_69 = 100 ; ( * VAR_70 ) -> VAR_71 = VAR_72 ; ( * VAR_73 ) -> VAR_74 = VAR_75 ; ( * VAR_252 ) -> VAR_255 = VAR_256 ; if ( VAR_76 ) { if ( ( VAR_77 -> VAR_78 & VAR_79 ) && VAR_80 -> VAR_81 ) { ( * VAR_82 ) -> VAR_83 |= VAR_84 ; } if ( VAR_85 -> VAR_86 & VAR_87 ) { ( * VAR_88 ) -> VAR_89 . VAR_90 = VAR_91 -> VAR_92 ; } if ( VAR_93 -> VAR_94 & VAR_95 ) { ( * VAR_96 ) -> VAR_97 = VAR_98 -> VAR_99 ; } if ( ( VAR_100 -> VAR_101 & VAR_102 ) && VAR_103 -> VAR_104 ) { ( * VAR_105 ) -> VAR_106 |= VAR_107 ; } if ( ( VAR_108 -> VAR_109 & VAR_110 ) && VAR_111 -> VAR_112 ) { ( * VAR_113 ) -> VAR_114 |= VAR_115 ; } if ( VAR_116 -> VAR_117 & VAR_118 ) { METHOD_6 ( ( * VAR_119 ) -> VAR_120 , VAR_121 -> VAR_122 , sizeof ( ( * VAR_123 ) -> VAR_124 ) ) ; } if ( VAR_125 -> VAR_126 & VAR_127 ) { ( * VAR_128 ) -> VAR_129 = VAR_130 -> VAR_131 ; } if ( ( VAR_132 -> VAR_133 & VAR_134 ) && VAR_135 -> VAR_136 ) { ( * VAR_137 ) -> VAR_138 |= VAR_139 ; } if ( VAR_140 -> VAR_141 & VAR_142 ) { ( * VAR_143 ) -> VAR_144 = VAR_145 -> VAR_146 ; } if ( VAR_147 -> VAR_148 & VAR_149 ) { VAR_150 = VAR_151 -> VAR_152 ; } if ( ( VAR_153 -> VAR_154 & VAR_155 ) && VAR_156 -> VAR_157 ) { ( * VAR_158 ) -> VAR_159 |= VAR_160 ; } if ( VAR_161 -> VAR_162 & VAR_163 ) { ( * VAR_164 ) -> VAR_165 = VAR_166 -> VAR_167 ; } if ( ( VAR_166 -> VAR_162 & VAR_257 ) && VAR_166 -> VAR_255 ) { ( * VAR_252 ) -> VAR_255 = VAR_166 -> VAR_255 ; } } VAR_168 = METHOD_7 ( & ( * VAR_169 ) -> VAR_170 , VAR_171 , VAR_172 ) ; if ( VAR_173 != 0 ) { goto VAR_174 ; } VAR_175 = METHOD_8 ( & ( * VAR_176 ) -> VAR_177 , VAR_178 ) ; if ( VAR_179 != 0 ) { goto VAR_180 ; } VAR_181 = METHOD_9 ( & ( * VAR_182 ) -> VAR_183 , VAR_184 ) ; if ( VAR_185 != 0 ) { goto VAR_186 ; } VAR_187 = ( ( * VAR_188 ) -> VAR_189 + VAR_190 - 1 ) / VAR_191 ; if ( VAR_192 == 0 ) { VAR_193 = 1 ; } VAR_194 = METHOD_10 ( & ( * VAR_195 ) -> VAR_196 . VAR_197 , VAR_198 , VAR_199 , 1 , VAR_200 + 1 , VAR_201 ) ; if ( VAR_202 != 0 ) { goto VAR_203 ; } METHOD_11 ( & ( * VAR_204 ) -> VAR_205 , VAR_206 ) ; ( * VAR_207 ) -> VAR_208 = * VAR_209 ; ( * VAR_210 ) -> VAR_211 = VAR_212 ; METHOD_12 ( * VAR_213 ) ; if ( VAR_214 ) { TYPE_11 * VAR_215 = & ( * VAR_216 ) -> VAR_217 ; if ( VAR_218 && ( ( * VAR_219 ) -> VAR_220 & VAR_221 ) == 0 ) { VAR_222 -> VAR_223 = VAR_224 ; VAR_225 -> VAR_226 = VAR_227 ; } else { VAR_228 -> VAR_229 = VAR_230 ; } if ( ! VAR_231 ) { ( * VAR_232 ) -> VAR_233 . VAR_234 = VAR_235 ; METHOD_13 ( & ( * VAR_236 ) -> VAR_237 . VAR_238 , VAR_239 , VAR_240 ) ; } } return 0 ; VAR_241 : METHOD_14 ( & ( * VAR_242 ) -> VAR_243 ) ; VAR_244 : METHOD_15 ( & ( * VAR_245 ) -> VAR_246 ) ; VAR_247 : METHOD_16 ( & ( * VAR_248 ) -> VAR_249 ) ; VAR_250 : METHOD_17 ( VAR_251 , * VAR_252 ) ; VAR_253 : return VAR_254 ; }",185
186,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 ; VAR_3 * VAR_4 ; TYPE_3 VAR_5 ; METHOD_1 ( & VAR_6 -> VAR_7 -> VAR_8 -> VAR_9 , ""sendingSIOPollrequest\\n"" ) ; VAR_10 = METHOD_2 ( VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) return - VAR_14 ; VAR_15 [ 0 ] = 0xff ; VAR_16 [ 1 ] = 0xff ; VAR_17 = METHOD_3 ( VAR_18 -> VAR_19 -> VAR_20 , METHOD_4 ( VAR_21 -> VAR_22 -> VAR_23 , 0 ) , VAR_24 , VAR_25 | VAR_26 , 0 , 0 , VAR_27 , VAR_28 , 10000 ) ;  if ( VAR_29 < 0 )   METHOD_5 ( & VAR_30 -> VAR_31 , ""Readinglinestatusfailed(error=%d)\\n"" ,  VAR_32 ) ; else { VAR_33 = METHOD_6 ( VAR_34 ) ; METHOD_7 ( & VAR_35 -> VAR_36 -> VAR_37 -> VAR_38 , ""readstatus%x%x\\n"" , VAR_39 [ 0 ] , VAR_40 [ 1 ] ) ; * VAR_41 = METHOD_8 ( VAR_42 ) ; } METHOD_9 ( VAR_43 ) ; return VAR_44 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 ; VAR_3 * VAR_4 ; TYPE_3 VAR_5 ; METHOD_1 ( & VAR_6 -> VAR_7 -> VAR_8 -> VAR_9 , ""sendingSIOPollrequest\\n"" ) ; VAR_10 = METHOD_2 ( VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) return - VAR_14 ; VAR_15 [ 0 ] = 0xff ; VAR_16 [ 1 ] = 0xff ; VAR_17 = METHOD_3 ( VAR_18 -> VAR_19 -> VAR_20 , METHOD_4 ( VAR_21 -> VAR_22 -> VAR_23 , 0 ) , VAR_24 , VAR_25 | VAR_26 , 0 , 0 , VAR_27 , VAR_28 , 10000 ) ; if ( VAR_29 < 0 ) METHOD_5 ( & VAR_30 -> VAR_31 , ""Readinglinestatusfailed(error=%d)\\n"" , VAR_32 ) ; else { VAR_33 = METHOD_6 ( VAR_34 ) ; METHOD_7 ( & VAR_35 -> VAR_36 -> VAR_37 -> VAR_38 , ""readstatus%x%x\\n"" , VAR_39 [ 0 ] , VAR_40 [ 1 ] ) ; * VAR_41 = METHOD_8 ( VAR_42 ) ; } METHOD_9 ( VAR_43 ) ; return VAR_44 ; }",186
187,"METHOD_0 ( TYPE_0 , unsigned TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , unsigned TYPE_6 , TYPE_7 , TYPE_8 TYPE_9 * , TYPE_10 , TYPE_11 TYPE_12 * , TYPE_13 ) { unsigned TYPE_14 VAR_0 ; struct STRUCT_OR_UNION_0 * VAR_1 ; switch ( TYPE_15 ) { case VAR_2 : VAR_3 = METHOD_1 ( ) -> VAR_4 & VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 , METHOD_3 ( ) ) ; if ( METHOD_4 ( VAR_8 , ( unsigned TYPE_16 TYPE_17 * ) TYPE_18 ) ) return - VAR_9 ; return 0 ; case VAR_10 : break ; case VAR_11 : if ( TYPE_19 < sizeof ( unsigned TYPE_20 ) ) return - VAR_12 ; VAR_13 = ( METHOD_5 ( ) -> VAR_14 >> VAR_15 ) & VAR_16 ; if ( METHOD_6 ( VAR_17 , ( unsigned TYPE_21 TYPE_22 * ) TYPE_23 ) ) return - VAR_18 ; return 1 ; case VAR_19 : if ( TYPE_24 < sizeof ( unsigned TYPE_25 ) ) return - VAR_20 ; VAR_21 = ( struct STRUCT_OR_UNION_1 * ) ( ( TYPE_26 * ) VAR_22 + VAR_23 -> VAR_24 ) ; VAR_25 = VAR_26 -> VAR_27 ; if ( METHOD_7 ( VAR_28 , ( unsigned TYPE_27 TYPE_28 * ) TYPE_29 ) ) return - VAR_29 ; return 1 ; case VAR_30 :  if ( TYPE_30 < sizeof ( * VAR_31 ) )  return - VAR_32 ; if ( METHOD_8 ( TYPE_31 , VAR_33 , TYPE_32 ) != 0 ) return - VAR_34 ; return 1 ; default : break ; } return - VAR_35 ; }","METHOD_0 ( TYPE_0 , unsigned TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , unsigned TYPE_6 , TYPE_7 , TYPE_8 TYPE_9 * , TYPE_10 , TYPE_11 TYPE_12 * , TYPE_13 ) { unsigned TYPE_14 VAR_0 ; struct STRUCT_OR_UNION_0 * VAR_1 ; switch ( TYPE_15 ) { case VAR_2 : VAR_3 = METHOD_1 ( ) -> VAR_4 & VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 , METHOD_3 ( ) ) ; if ( METHOD_4 ( VAR_8 , ( unsigned TYPE_16 TYPE_17 * ) TYPE_18 ) ) return - VAR_9 ; return 0 ; case VAR_10 : break ; case VAR_11 : if ( TYPE_19 < sizeof ( unsigned TYPE_20 ) ) return - VAR_12 ; VAR_13 = ( METHOD_5 ( ) -> VAR_14 >> VAR_15 ) & VAR_16 ; if ( METHOD_6 ( VAR_17 , ( unsigned TYPE_21 TYPE_22 * ) TYPE_23 ) ) return - VAR_18 ; return 1 ; case VAR_19 : if ( TYPE_24 < sizeof ( unsigned TYPE_25 ) ) return - VAR_20 ; VAR_21 = ( struct STRUCT_OR_UNION_1 * ) ( ( TYPE_26 * ) VAR_22 + VAR_23 -> VAR_24 ) ; VAR_25 = VAR_26 -> VAR_27 ; if ( METHOD_7 ( VAR_28 , ( unsigned TYPE_27 TYPE_28 * ) TYPE_29 ) ) return - VAR_29 ; return 1 ; case VAR_30 : if ( TYPE_30 < sizeof ( * VAR_31 ) ) return - VAR_32 ; if ( METHOD_8 ( TYPE_31 , VAR_33 , TYPE_32 ) != 0 ) return - VAR_34 ; return 1 ; default : break ; } return - VAR_35 ; }",187
188,"TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 <= 0 || VAR_5 <= 0 || VAR_6 > 32767 || VAR_7 > 32767 ) { METHOD_1 ( VAR_8 , ""InvalidSize"" ) ; return 0 ; } if ( ! METHOD_2 ( VAR_9 ) ) { METHOD_3 ( VAR_10 , ""InvalidBPP"" ) ; return 0 ; } TYPE_5 * VAR_11 = METHOD_4 ( 0 , ""Graphics"" ) ; if ( ! VAR_12 ) return 0 ; TYPE_6 VAR_13 ; METHOD_5 ( & VAR_14 ) ; VAR_15 . VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = VAR_25 ; VAR_26 . VAR_27 . VAR_28 = ( unsigned TYPE_7 ) VAR_29 ; VAR_30 . VAR_31 . VAR_32 = ( unsigned TYPE_8 ) VAR_33 ; VAR_34 . VAR_35 . VAR_36 = ( unsigned TYPE_9 ) VAR_37 ; if ( METHOD_6 ( VAR_38 ) ) { if ( METHOD_7 ( METHOD_8 ( VAR_39 , ""zigzag"" , 0 ) ) ) VAR_40 . VAR_41 . VAR_42 = ( TYPE_10 ) ( VAR_43 . VAR_44 . VAR_45 | VAR_46 ) ; if ( METHOD_9 ( METHOD_10 ( VAR_47 , ""msb"" , 0 ) ) ) VAR_48 . VAR_49 . VAR_50 = ( TYPE_11 ) ( VAR_51 . VAR_52 . VAR_53 | VAR_54 ) ; if ( METHOD_11 ( METHOD_12 ( VAR_55 , ""vertical_byte"" , 0 ) ) ) { if ( VAR_56 . VAR_57 . VAR_58 == 1 ) VAR_59 . VAR_60 . VAR_61 = ( TYPE_12 ) ( VAR_62 . VAR_63 . VAR_64 | VAR_65 ) ; else  METHOD_13 ( ""vertical_byteonlyworksfor1bppArrayBuffers\\n"" ) ;  } TYPE_13 * VAR_66 = METHOD_14 ( VAR_67 , ""color_order"" , 0 ) ; if ( VAR_68 ) { if ( METHOD_15 ( VAR_69 , ""rgb"" ) ) ; else if ( ! METHOD_16 ( VAR_70 , ""brg"" ) ) VAR_71 . VAR_72 . VAR_73 = ( TYPE_14 ) ( VAR_74 . VAR_75 . VAR_76 | VAR_77 ) ; else if ( ! METHOD_17 ( VAR_78 , ""bgr"" ) ) VAR_79 . VAR_80 . VAR_81 = ( TYPE_15 ) ( VAR_82 . VAR_83 . VAR_84 | VAR_85 ) ; else if ( ! METHOD_18 ( VAR_86 , ""gbr"" ) ) VAR_87 . VAR_88 . VAR_89 = ( TYPE_16 ) ( VAR_90 . VAR_91 . VAR_92 | VAR_93 ) ; else if ( ! METHOD_19 ( VAR_94 , ""grb"" ) ) VAR_95 . VAR_96 . VAR_97 = ( TYPE_17 ) ( VAR_98 . VAR_99 . VAR_100 | VAR_101 ) ; else if ( ! METHOD_20 ( VAR_102 , ""rbg"" ) ) VAR_103 . VAR_104 . VAR_105 = ( TYPE_18 ) ( VAR_106 . VAR_107 . VAR_108 | VAR_109 ) ; else METHOD_21 ( ""color_ordermustbe3characters"" ) ; METHOD_22 ( VAR_110 ) ; } } METHOD_23 ( & VAR_111 ) ; METHOD_24 ( & VAR_112 ) ; return VAR_113 ; }","TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 <= 0 || VAR_5 <= 0 || VAR_6 > 32767 || VAR_7 > 32767 ) { METHOD_1 ( VAR_8 , ""InvalidSize"" ) ; return 0 ; } if ( ! METHOD_2 ( VAR_9 ) ) { METHOD_3 ( VAR_10 , ""InvalidBPP"" ) ; return 0 ; } TYPE_5 * VAR_11 = METHOD_4 ( 0 , ""Graphics"" ) ; if ( ! VAR_12 ) return 0 ; TYPE_6 VAR_13 ; METHOD_5 ( & VAR_14 ) ; VAR_15 . VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = VAR_25 ; VAR_26 . VAR_27 . VAR_28 = ( unsigned TYPE_7 ) VAR_29 ; VAR_30 . VAR_31 . VAR_32 = ( unsigned TYPE_8 ) VAR_33 ; VAR_34 . VAR_35 . VAR_36 = ( unsigned TYPE_9 ) VAR_37 ; if ( METHOD_6 ( VAR_38 ) ) { if ( METHOD_7 ( METHOD_8 ( VAR_39 , ""zigzag"" , 0 ) ) ) VAR_40 . VAR_41 . VAR_42 = ( TYPE_10 ) ( VAR_43 . VAR_44 . VAR_45 | VAR_46 ) ; if ( METHOD_9 ( METHOD_10 ( VAR_47 , ""msb"" , 0 ) ) ) VAR_48 . VAR_49 . VAR_50 = ( TYPE_11 ) ( VAR_51 . VAR_52 . VAR_53 | VAR_54 ) ; if ( METHOD_11 ( METHOD_12 ( VAR_55 , ""vertical_byte"" , 0 ) ) ) { if ( VAR_56 . VAR_57 . VAR_58 == 1 ) VAR_59 . VAR_60 . VAR_61 = ( TYPE_12 ) ( VAR_62 . VAR_63 . VAR_64 | VAR_65 ) ; else { METHOD_3 ( VAR_10 , ""vertical_byteonlyworksfor1bppArrayBuffers\\n"" ) ; return 0 ; } if ( VAR_112 . VAR_107 . VAR_33 & 7 ) { METHOD_3 ( VAR_10 , ""heightmustbeamultipleof8whenusingvertical_byte\\n"" ) ; return 0 ; } } TYPE_13 * VAR_66 = METHOD_14 ( VAR_67 , ""color_order"" , 0 ) ; if ( VAR_68 ) { if ( METHOD_15 ( VAR_69 , ""rgb"" ) ) ; else if ( ! METHOD_16 ( VAR_70 , ""brg"" ) ) VAR_71 . VAR_72 . VAR_73 = ( TYPE_14 ) ( VAR_74 . VAR_75 . VAR_76 | VAR_77 ) ; else if ( ! METHOD_17 ( VAR_78 , ""bgr"" ) ) VAR_79 . VAR_80 . VAR_81 = ( TYPE_15 ) ( VAR_82 . VAR_83 . VAR_84 | VAR_85 ) ; else if ( ! METHOD_18 ( VAR_86 , ""gbr"" ) ) VAR_87 . VAR_88 . VAR_89 = ( TYPE_16 ) ( VAR_90 . VAR_91 . VAR_92 | VAR_93 ) ; else if ( ! METHOD_19 ( VAR_94 , ""grb"" ) ) VAR_95 . VAR_96 . VAR_97 = ( TYPE_17 ) ( VAR_98 . VAR_99 . VAR_100 | VAR_101 ) ; else if ( ! METHOD_20 ( VAR_102 , ""rbg"" ) ) VAR_103 . VAR_104 . VAR_105 = ( TYPE_18 ) ( VAR_106 . VAR_107 . VAR_108 | VAR_109 ) ; else METHOD_21 ( ""color_ordermustbe3characters"" ) ; METHOD_22 ( VAR_110 ) ; } } METHOD_23 ( & VAR_111 ) ; METHOD_24 ( & VAR_112 ) ; return VAR_113 ; }",188
189,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ) { if ( STRUCT_OR_UNION_6 -> VAR_0 & VAR_1 ) return 0 ;  if ( METHOD_1 ( STRUCT_OR_UNION_7 ) -> METHOD_2 ( STRUCT_OR_UNION_8 , VAR_2 ) )  return 1 ;  if ( METHOD_3 ( STRUCT_OR_UNION_9 , STRUCT_OR_UNION_10 ) && ( STRUCT_OR_UNION_11 -> VAR_3 == VAR_4 ||  ( STRUCT_OR_UNION_12 -> VAR_5 -> VAR_6 == 0 && STRUCT_OR_UNION_13 -> VAR_7 -> VAR_8 == VAR_9 &&  STRUCT_OR_UNION_14 -> VAR_10 -> VAR_11 != VAR_12 ) ) )  return 1 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ) { if ( STRUCT_OR_UNION_6 -> VAR_0 & VAR_1 ) return 0 ; if ( STRUCT_OR_UNION_14 -> VAR_10 -> VAR_11 != VAR_12 ) ) ) return 1 ; return 0 ; }",189
190,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ,  const struct STRUCT_OR_UNION_0 * VAR_4 ,  TYPE_5 * VAR_5 ) { TYPE_6 VAR_6 = - 1 ; TYPE_7 * VAR_7 = METHOD_1 ( VAR_8 ) ;  TYPE_8 VAR_9 = 0 ;  VAR_10 = 0 ;  if ( ! VAR_11 || ( VAR_12 && ! VAR_13 ) )  METHOD_2 ( VAR_14 ) ; if ( VAR_15 ) VAR_16 = * VAR_17 ; if ( METHOD_3 ( & VAR_18 , VAR_19 -> VAR_20 , VAR_21 , VAR_22 , VAR_23 ,  ( struct STRUCT_OR_UNION_1 * ) VAR_24 ,  VAR_25 ,  VAR_26 ) != VAR_27 )  { METHOD_4 ( VAR_28 ) ; }  VAR_29 :  return VAR_30 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const struct STRUCT_OR_UNION_0 * VAR_4 , TYPE_5 * VAR_5 ) { TYPE_6 VAR_6 = - 1 ; TYPE_7 * VAR_7 = METHOD_1 ( VAR_8 ) ; TYPE_8 VAR_9 = 0 ; VAR_10 = 0 ; if ( ! VAR_11 || ( VAR_12 && ! VAR_13 ) ) METHOD_2 ( VAR_14 ) ; if ( VAR_15 ) VAR_16 = * VAR_17 ; if ( METHOD_3 ( & VAR_18 , VAR_19 -> VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 , VAR_26 ) != VAR_27 ) { METHOD_4 ( VAR_28 ) ; } if ( VAR_24 && VAR_26 ) { if ( VAR_31 > sizeof ( struct STRUCT_OR_UNION_2 ) ) METHOD_4 ( VAR_28 ) ; * VAR_26 = VAR_31 ; } if ( VAR_30 > ( TYPE_6 ) VAR_22 ) { VAR_30 = - 1 ; METHOD_4 ( VAR_28 ) ; } VAR_29 : return VAR_30 ; }",190
191,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_6 * VAR_11 = VAR_12 -> VAR_13 ; TYPE_7 * VAR_14 = & VAR_15 -> VAR_16 ; TYPE_8 VAR_17 = VAR_18 -> VAR_19 -> VAR_20 ; TYPE_9 VAR_21 = VAR_22 -> VAR_23 ; TYPE_10 VAR_24 ; TYPE_11 VAR_25 ; TYPE_12 VAR_26 ; { TYPE_13 * VAR_27 ; TYPE_14 * VAR_28 = VAR_29 -> VAR_30 . VAR_31 ; TYPE_15 * VAR_32 = ( TYPE_16 * ) VAR_33 ; TYPE_17 * VAR_34 ; VAR_35 = VAR_36 -> VAR_37 . VAR_38 ; VAR_39 = ( TYPE_18 * ) VAR_40 ; * VAR_41 = 0 ; * ( VAR_42 + 1 ) = 0 ; * VAR_43 = VAR_44 ; VAR_45 -> VAR_46 . VAR_47 = ( TYPE_19 ) - 1 ; VAR_48 -> VAR_49 . VAR_50 = ( TYPE_20 ) - 1 ; } VAR_51 -> VAR_52 = METHOD_1 ( VAR_53 ) ; METHOD_2 ( ""SH:num_ref_idx_override_flag"" , VAR_54 -> VAR_55 ) ; VAR_56 = VAR_57 -> VAR_58 -> VAR_59 [ 0 ] ; if ( VAR_60 -> VAR_61 ) { VAR_62 = METHOD_3 ( VAR_63 , VAR_64 ) + 1 ; } { TYPE_21 VAR_65 = VAR_66 << VAR_67 ; if ( VAR_68 > VAR_69 ) { return VAR_70 ; } VAR_71 -> VAR_72 [ 0 ] = VAR_73 ; METHOD_4 ( ""SH:num_ref_idx_l0_active_minus1"" , VAR_74 -> VAR_75 [ 0 ] - 1 ) ; } { TYPE_22 VAR_76 = METHOD_5 ( VAR_77 ) ; METHOD_6 ( ""SH:ref_pic_list_reordering_flag_l0"" , VAR_78 ) ; { TYPE_23 VAR_79 = ( VAR_80 -> VAR_81 != VAR_82 -> VAR_83 -> VAR_84 ) ; if ( VAR_85 -> VAR_86 || ( VAR_87 & ! VAR_88 -> VAR_89 ) || VAR_90 -> VAR_91 != VAR_92 -> VAR_93 [ 0 ] ) { METHOD_7 ( VAR_94 ) ; } if ( VAR_95 -> VAR_96 & VAR_97 -> VAR_98 ) VAR_99 -> VAR_100 = 0 ; } VAR_101 -> VAR_102 = VAR_103 -> VAR_104 [ 0 ] ; if ( VAR_105 ) { TYPE_24 VAR_106 ; VAR_107 -> VAR_108 [ 0 ] = VAR_109 -> VAR_110 -> VAR_111 [ 0 ] ; VAR_112 = METHOD_8 ( VAR_113 , 0 ) ; if ( VAR_114 == - 1 ) return VAR_115 ; VAR_116 -> VAR_117 [ 0 ] = VAR_118 -> VAR_119 -> VAR_120 [ 0 ] ; } else VAR_121 -> VAR_122 [ 0 ] = VAR_123 -> VAR_124 -> VAR_125 [ 0 ] ; } { TYPE_25 * * VAR_126 , * * VAR_127 ; TYPE_26 VAR_128 ; struct STRUCT_OR_UNION_0 * VAR_129 ; VAR_130 = VAR_131 -> VAR_132 + VAR_133 ; VAR_134 [ 0 ] = 0 ; VAR_135 ++ ; for ( VAR_136 = 0 ; VAR_137 < VAR_138 -> VAR_139 [ 0 ] ; VAR_140 ++ ) { VAR_141 = VAR_142 -> VAR_143 [ 0 ] [ VAR_144 ] ; VAR_145 [ VAR_146 ] = ( VAR_147 -> VAR_148 ) ; } VAR_149 = VAR_150 -> VAR_151 + VAR_152 ; VAR_153 [ 0 ] = 0 ; if ( VAR_154 ) { TYPE_27 * * VAR_155 , * * VAR_156 ; TYPE_28 * * VAR_157 , * * VAR_158 ; VAR_159 = VAR_160 -> VAR_161 + VAR_162 ; VAR_163 = VAR_164 -> VAR_165 + VAR_166 ; VAR_167 [ 0 ] = 0 ; VAR_168 ++ ; VAR_169 [ 0 ] = 0 ; VAR_170 ++ ; VAR_171 = 0 ; for ( VAR_172 = 0 ; VAR_173 < VAR_174 -> VAR_175 [ 0 ] ; VAR_176 ++ ) { VAR_177 = VAR_178 -> VAR_179 [ 0 ] [ VAR_180 ] ; VAR_181 [ 0 ] = ( VAR_182 -> VAR_183 ) ; VAR_184 [ 1 ] = ( VAR_185 -> VAR_186 ) ; VAR_187 [ 0 ] = ( VAR_188 -> VAR_189 ) + 1 ; VAR_190 [ 1 ] = ( VAR_191 -> VAR_192 ) + 1 ; VAR_193 += 2 ; VAR_194 += 2 ; } VAR_195 = VAR_196 -> VAR_197 + VAR_198 ; VAR_199 [ 0 ] = 0 ; VAR_200 = VAR_201 -> VAR_202 + VAR_203 ; VAR_204 [ 0 ] = 0 ; } if ( VAR_205 -> VAR_206 >= 3 ) { TYPE_29 VAR_207 ; TYPE_30 VAR_208 ; VAR_209 = METHOD_9 ( VAR_210 , VAR_211 -> VAR_212 ) ; VAR_213 = 2 * ( ( 2 * VAR_214 ) + 1 ) ; VAR_215 = VAR_216 * sizeof ( TYPE_31 * ) ; VAR_217 += VAR_218 * sizeof ( TYPE_32 * ) ; METHOD_10 ( ( TYPE_33 * ) VAR_219 -> VAR_220 -> VAR_221 , VAR_222 -> VAR_223 , VAR_224 ) ; } } if ( VAR_225 -> VAR_226 ) { VAR_227 = METHOD_11 ( VAR_228 , VAR_229 ) ; if ( VAR_230 != VAR_231 ) return VAR_232 ; METHOD_12 ( VAR_233 ) ; VAR_234 -> VAR_235 = VAR_236 -> VAR_237 ; } else { VAR_238 -> VAR_239 -> VAR_240 = 0 ; VAR_241 -> VAR_242 = VAR_243 -> VAR_244 ; } VAR_245 -> VAR_246 -> VAR_247 = VAR_248 -> VAR_249 -> VAR_250 ; if ( VAR_251 && ( VAR_252 == 0 ) ) { METHOD_13 ( VAR_253 ) ; } if ( VAR_254 -> VAR_255 != 0 ) { if ( ! VAR_256 -> VAR_257 -> VAR_258 )  VAR_259 -> VAR_260 = METHOD_14 ( VAR_261 ) ;  else VAR_262 -> VAR_263 += VAR_264 -> VAR_265 ; } if ( VAR_266 -> VAR_267 == VAR_268 ) { VAR_269 = METHOD_15 ( VAR_270 , VAR_271 ) ; if ( VAR_272 > VAR_273 ) { return VAR_274 ; } VAR_275 -> VAR_276 = VAR_277 ; METHOD_16 ( ""SH:cabac_init_idc"" , VAR_278 -> VAR_279 ) ; } VAR_280 = VAR_281 -> VAR_282 + METHOD_17 ( VAR_283 , VAR_284 ) ; if ( ( VAR_285 < 0 ) || ( VAR_286 > 51 ) ) { return VAR_287 ; } VAR_288 -> VAR_289 = VAR_290 ; METHOD_18 ( ""SH:slice_qp_delta"" , ( TYPE_34 ) ( VAR_291 -> VAR_292 - VAR_293 -> VAR_294 ) ) ; if ( VAR_295 -> VAR_296 == 1 ) { VAR_297 = METHOD_19 ( VAR_298 , VAR_299 ) ; if ( VAR_300 > VAR_301 ) { return VAR_302 ; } METHOD_20 ( ""SH:disable_deblocking_filter_idc"" , VAR_303 ) ; VAR_304 -> VAR_305 = VAR_306 ; if ( VAR_307 != 1 ) { VAR_308 = METHOD_21 ( VAR_309 , VAR_310 ) << 1 ; if ( ( VAR_311 > VAR_312 ) || ( VAR_313 > VAR_314 ) ) { return VAR_315 ; } VAR_316 -> VAR_317 = VAR_318 ; METHOD_22 ( ""SH:slice_alpha_c0_offset_div2"" , VAR_319 -> VAR_320 >> 1 ) ; VAR_321 = METHOD_23 ( VAR_322 , VAR_323 ) << 1 ; if ( ( VAR_324 > VAR_325 ) || ( VAR_326 > VAR_327 ) ) { return VAR_328 ; } VAR_329 -> VAR_330 = VAR_331 ; METHOD_24 ( ""SH:slice_beta_offset_div2"" , VAR_332 -> VAR_333 >> 1 ) ; } else { VAR_334 -> VAR_335 = 0 ; VAR_336 -> VAR_337 = 0 ; } } else { VAR_338 -> VAR_339 = 0 ; VAR_340 -> VAR_341 = 0 ; VAR_342 -> VAR_343 = 0 ; } VAR_344 -> VAR_345 = 2 ; if ( VAR_346 -> VAR_347 ) { VAR_348 ; VAR_349 ; VAR_350 -> METHOD_25 = VAR_351 ; VAR_352 -> VAR_353 = VAR_354 ; METHOD_26 ( VAR_355 , VAR_356 ) ; if ( VAR_357 -> VAR_358 -> VAR_359 ) VAR_360 -> VAR_361 = VAR_362 ; else VAR_363 -> VAR_364 = VAR_365 ; } else { VAR_366 ; VAR_367 ; VAR_368 -> METHOD_27 = VAR_369 ; VAR_370 -> VAR_371 = VAR_372 ; if ( VAR_373 -> VAR_374 -> VAR_375 ) { VAR_376 -> VAR_377 = VAR_378 ; } else VAR_379 -> VAR_380 = VAR_381 ; } VAR_382 -> VAR_383 = 0 ; VAR_384 -> VAR_385 = VAR_386 ; VAR_387 = VAR_388 -> METHOD_28 ( VAR_389 , VAR_390 , VAR_391 ) ; if ( VAR_392 != VAR_393 ) return VAR_394 ; return VAR_395 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_6 * VAR_11 = VAR_12 -> VAR_13 ; TYPE_7 * VAR_14 = & VAR_15 -> VAR_16 ; TYPE_8 VAR_17 = VAR_18 -> VAR_19 -> VAR_20 ; TYPE_9 VAR_21 = VAR_22 -> VAR_23 ; TYPE_10 VAR_24 ; TYPE_11 VAR_25 ; TYPE_12 VAR_26 ; { TYPE_13 * VAR_27 ; TYPE_14 * VAR_28 = VAR_29 -> VAR_30 . VAR_31 ; TYPE_15 * VAR_32 = ( TYPE_16 * ) VAR_33 ; TYPE_17 * VAR_34 ; VAR_35 = VAR_36 -> VAR_37 . VAR_38 ; VAR_39 = ( TYPE_18 * ) VAR_40 ; * VAR_41 = 0 ; * ( VAR_42 + 1 ) = 0 ; * VAR_43 = VAR_44 ; VAR_45 -> VAR_46 . VAR_47 = ( TYPE_19 ) - 1 ; VAR_48 -> VAR_49 . VAR_50 = ( TYPE_20 ) - 1 ; } VAR_51 -> VAR_52 = METHOD_1 ( VAR_53 ) ; METHOD_2 ( ""SH:num_ref_idx_override_flag"" , VAR_54 -> VAR_55 ) ; VAR_56 = VAR_57 -> VAR_58 -> VAR_59 [ 0 ] ; if ( VAR_60 -> VAR_61 ) { VAR_62 = METHOD_3 ( VAR_63 , VAR_64 ) + 1 ; } { TYPE_21 VAR_65 = VAR_66 << VAR_67 ; if ( VAR_68 > VAR_69 ) { return VAR_70 ; } VAR_71 -> VAR_72 [ 0 ] = VAR_73 ; METHOD_4 ( ""SH:num_ref_idx_l0_active_minus1"" , VAR_74 -> VAR_75 [ 0 ] - 1 ) ; } { TYPE_22 VAR_76 = METHOD_5 ( VAR_77 ) ; METHOD_6 ( ""SH:ref_pic_list_reordering_flag_l0"" , VAR_78 ) ; { TYPE_23 VAR_79 = ( VAR_80 -> VAR_81 != VAR_82 -> VAR_83 -> VAR_84 ) ; if ( VAR_85 -> VAR_86 || ( VAR_87 & ! VAR_88 -> VAR_89 ) || VAR_90 -> VAR_91 != VAR_92 -> VAR_93 [ 0 ] ) { METHOD_7 ( VAR_94 ) ; } if ( VAR_95 -> VAR_96 & VAR_97 -> VAR_98 ) VAR_99 -> VAR_100 = 0 ; } VAR_101 -> VAR_102 = VAR_103 -> VAR_104 [ 0 ] ; if ( VAR_105 ) { TYPE_24 VAR_106 ; VAR_107 -> VAR_108 [ 0 ] = VAR_109 -> VAR_110 -> VAR_111 [ 0 ] ; VAR_112 = METHOD_8 ( VAR_113 , 0 ) ; if ( VAR_114 == - 1 ) return VAR_115 ; VAR_116 -> VAR_117 [ 0 ] = VAR_118 -> VAR_119 -> VAR_120 [ 0 ] ; } else VAR_121 -> VAR_122 [ 0 ] = VAR_123 -> VAR_124 -> VAR_125 [ 0 ] ; } { TYPE_25 * * VAR_126 , * * VAR_127 ; TYPE_26 VAR_128 ; struct STRUCT_OR_UNION_0 * VAR_129 ; VAR_130 = VAR_131 -> VAR_132 + VAR_133 ; VAR_134 [ 0 ] = 0 ; VAR_135 ++ ; for ( VAR_136 = 0 ; VAR_137 < VAR_138 -> VAR_139 [ 0 ] ; VAR_140 ++ ) { VAR_141 = VAR_142 -> VAR_143 [ 0 ] [ VAR_144 ] ; VAR_145 [ VAR_146 ] = ( VAR_147 -> VAR_148 ) ; } VAR_149 = VAR_150 -> VAR_151 + VAR_152 ; VAR_153 [ 0 ] = 0 ; if ( VAR_154 ) { TYPE_27 * * VAR_155 , * * VAR_156 ; TYPE_28 * * VAR_157 , * * VAR_158 ; VAR_159 = VAR_160 -> VAR_161 + VAR_162 ; VAR_163 = VAR_164 -> VAR_165 + VAR_166 ; VAR_167 [ 0 ] = 0 ; VAR_168 ++ ; VAR_169 [ 0 ] = 0 ; VAR_170 ++ ; VAR_171 = 0 ; for ( VAR_172 = 0 ; VAR_173 < VAR_174 -> VAR_175 [ 0 ] ; VAR_176 ++ ) { VAR_177 = VAR_178 -> VAR_179 [ 0 ] [ VAR_180 ] ; VAR_181 [ 0 ] = ( VAR_182 -> VAR_183 ) ; VAR_184 [ 1 ] = ( VAR_185 -> VAR_186 ) ; VAR_187 [ 0 ] = ( VAR_188 -> VAR_189 ) + 1 ; VAR_190 [ 1 ] = ( VAR_191 -> VAR_192 ) + 1 ; VAR_193 += 2 ; VAR_194 += 2 ; } VAR_195 = VAR_196 -> VAR_197 + VAR_198 ; VAR_199 [ 0 ] = 0 ; VAR_200 = VAR_201 -> VAR_202 + VAR_203 ; VAR_204 [ 0 ] = 0 ; } if ( VAR_205 -> VAR_206 >= 3 ) { TYPE_29 VAR_207 ; TYPE_30 VAR_208 ; VAR_209 = METHOD_9 ( VAR_210 , VAR_211 -> VAR_212 ) ; VAR_213 = 2 * ( ( 2 * VAR_214 ) + 1 ) ; VAR_215 = VAR_216 * sizeof ( TYPE_31 * ) ; VAR_217 += VAR_218 * sizeof ( TYPE_32 * ) ; METHOD_10 ( ( TYPE_33 * ) VAR_219 -> VAR_220 -> VAR_221 , VAR_222 -> VAR_223 , VAR_224 ) ; } } if ( VAR_225 -> VAR_226 ) { VAR_227 = METHOD_11 ( VAR_228 , VAR_229 ) ; if ( VAR_230 != VAR_231 ) return VAR_232 ; METHOD_12 ( VAR_233 ) ; VAR_234 -> VAR_235 = VAR_236 -> VAR_237 ; } else { VAR_238 -> VAR_239 -> VAR_240 = 0 ; VAR_241 -> VAR_242 = VAR_243 -> VAR_244 ; } VAR_245 -> VAR_246 -> VAR_247 = VAR_248 -> VAR_249 -> VAR_250 ; if ( VAR_251 && ( VAR_252 == 0 ) ) { METHOD_13 ( VAR_253 ) ; } if ( VAR_254 -> VAR_255 != 0 ) { if ( ! VAR_256 -> VAR_257 -> VAR_258 ) { VAR_331 = METHOD_14 ( VAR_389 ) ; if ( VAR_331 < 0 ) { return VAR_396 ; } VAR_259 -> VAR_260 = METHOD_14 ( VAR_261 ) ; else VAR_262 -> VAR_263 += VAR_264 -> VAR_265 ; } if ( VAR_266 -> VAR_267 == VAR_268 ) { VAR_269 = METHOD_15 ( VAR_270 , VAR_271 ) ; if ( VAR_272 > VAR_273 ) { return VAR_274 ; } VAR_275 -> VAR_276 = VAR_277 ; METHOD_16 ( ""SH:cabac_init_idc"" , VAR_278 -> VAR_279 ) ; } VAR_280 = VAR_281 -> VAR_282 + METHOD_17 ( VAR_283 , VAR_284 ) ; if ( ( VAR_285 < 0 ) || ( VAR_286 > 51 ) ) { return VAR_287 ; } VAR_288 -> VAR_289 = VAR_290 ; METHOD_18 ( ""SH:slice_qp_delta"" , ( TYPE_34 ) ( VAR_291 -> VAR_292 - VAR_293 -> VAR_294 ) ) ; if ( VAR_295 -> VAR_296 == 1 ) { VAR_297 = METHOD_19 ( VAR_298 , VAR_299 ) ; if ( VAR_300 > VAR_301 ) { return VAR_302 ; } METHOD_20 ( ""SH:disable_deblocking_filter_idc"" , VAR_303 ) ; VAR_304 -> VAR_305 = VAR_306 ; if ( VAR_307 != 1 ) { VAR_308 = METHOD_21 ( VAR_309 , VAR_310 ) << 1 ; if ( ( VAR_311 > VAR_312 ) || ( VAR_313 > VAR_314 ) ) { return VAR_315 ; } VAR_316 -> VAR_317 = VAR_318 ; METHOD_22 ( ""SH:slice_alpha_c0_offset_div2"" , VAR_319 -> VAR_320 >> 1 ) ; VAR_321 = METHOD_23 ( VAR_322 , VAR_323 ) << 1 ; if ( ( VAR_324 > VAR_325 ) || ( VAR_326 > VAR_327 ) ) { return VAR_328 ; } VAR_329 -> VAR_330 = VAR_331 ; METHOD_24 ( ""SH:slice_beta_offset_div2"" , VAR_332 -> VAR_333 >> 1 ) ; } else { VAR_334 -> VAR_335 = 0 ; VAR_336 -> VAR_337 = 0 ; } } else { VAR_338 -> VAR_339 = 0 ; VAR_340 -> VAR_341 = 0 ; VAR_342 -> VAR_343 = 0 ; } VAR_344 -> VAR_345 = 2 ; if ( VAR_346 -> VAR_347 ) { VAR_348 ; VAR_349 ; VAR_350 -> METHOD_25 = VAR_351 ; VAR_352 -> VAR_353 = VAR_354 ; METHOD_26 ( VAR_355 , VAR_356 ) ; if ( VAR_357 -> VAR_358 -> VAR_359 ) VAR_360 -> VAR_361 = VAR_362 ; else VAR_363 -> VAR_364 = VAR_365 ; } else { VAR_366 ; VAR_367 ; VAR_368 -> METHOD_27 = VAR_369 ; VAR_370 -> VAR_371 = VAR_372 ; if ( VAR_373 -> VAR_374 -> VAR_375 ) { VAR_376 -> VAR_377 = VAR_378 ; } else VAR_379 -> VAR_380 = VAR_381 ; } VAR_382 -> VAR_383 = 0 ; VAR_384 -> VAR_385 = VAR_386 ; VAR_387 = VAR_388 -> METHOD_28 ( VAR_389 , VAR_390 , VAR_391 ) ; if ( VAR_392 != VAR_393 ) return VAR_394 ; return VAR_395 ; }",191
192," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 ) {  const TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ,   VAR_5 -> VAR_6 . VAR_7 [ VAR_8 ] ) ;   if ( ! VAR_9 -> VAR_10 )  ++ VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] [ VAR_15 ] ; return VAR_16 ; }","static TYPE_5 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 VAR_3 = METHOD_1 ( VAR_4 , VAR_5 -> VAR_6 . VAR_7 [ VAR_8 ] ) ; if ( ! VAR_9 -> VAR_10 ) ++ VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] [ VAR_15 ] ; return VAR_16 ; }",192
193,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; for ( VAR_3 = 0 ; VAR_4 [ VAR_5 ] ; VAR_6 ++ ) { TYPE_4 * VAR_7 = VAR_8 [ VAR_9 ] ; if ( VAR_10 -> VAR_11 ) { switch ( VAR_12 -> VAR_13 ) { case VAR_14 :  if ( VAR_15 -> VAR_16 ) METHOD_1 ( VAR_17 -> VAR_18 ) ;  VAR_19 -> VAR_20 = METHOD_2 ( ( TYPE_5 * ) VAR_21 -> VAR_22 [ 0 ] . VAR_23 . VAR_24 ) ; break ; case VAR_25 :  VAR_26 -> VAR_27 = VAR_28 -> VAR_29 [ 0 ] . VAR_30 ;  if ( VAR_31 -> VAR_32 ) METHOD_3 ( VAR_33 -> VAR_34 ) ; VAR_35 -> VAR_36 = CHECKED_XMALLOC ( unsigned TYPE_6 , VAR_37 -> VAR_38 ) ; METHOD_4 ( VAR_39 -> VAR_40 , VAR_41 -> VAR_42 [ 0 ] . VAR_43 . VAR_44 , VAR_45 -> VAR_46 ) ; break ; case VAR_47 :  if ( VAR_48 -> VAR_49 ) METHOD_5 ( VAR_50 -> VAR_51 ) ;  VAR_52 -> VAR_53 = CHECKED_XMALLOC ( TYPE_7 , VAR_54 -> VAR_55 [ 0 ] . VAR_56 ) ; METHOD_6 ( VAR_57 -> VAR_58 , VAR_59 -> VAR_60 [ 0 ] . VAR_61 . VAR_62 , VAR_63 -> VAR_64 [ 0 ] . VAR_65 ) ; break ; case VAR_66 :  if ( VAR_67 -> VAR_68 ) METHOD_7 ( VAR_69 -> VAR_70 ) ;  VAR_71 -> VAR_72 = CHECKED_XMALLOC ( TYPE_8 , VAR_73 -> VAR_74 [ 0 ] . VAR_75 ) ; METHOD_8 ( VAR_76 -> VAR_77 , VAR_78 -> VAR_79 [ 0 ] . VAR_80 . VAR_81 , VAR_82 -> VAR_83 [ 0 ] . VAR_84 ) ; break ; default : break ; } } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; for ( VAR_3 = 0 ; VAR_4 [ VAR_5 ] ; VAR_6 ++ ) { TYPE_4 * VAR_7 = VAR_8 [ VAR_9 ] ; if ( VAR_10 -> VAR_11 ) { switch ( VAR_12 -> VAR_13 ) { case VAR_14 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ; if ( VAR_15 -> VAR_16 ) METHOD_1 ( VAR_17 -> VAR_18 ) ; VAR_19 -> VAR_20 = METHOD_2 ( ( TYPE_5 * ) VAR_21 -> VAR_22 [ 0 ] . VAR_23 . VAR_24 ) ; break ; case VAR_25 : METHOD_9 ( ( VAR_82 -> VAR_85 == VAR_87 ) || ( VAR_82 -> VAR_85 == VAR_88 ) ) ; VAR_26 -> VAR_27 = VAR_28 -> VAR_29 [ 0 ] . VAR_30 ; if ( VAR_31 -> VAR_32 ) METHOD_3 ( VAR_33 -> VAR_34 ) ; VAR_35 -> VAR_36 = CHECKED_XMALLOC ( unsigned TYPE_6 , VAR_37 -> VAR_38 ) ; METHOD_4 ( VAR_39 -> VAR_40 , VAR_41 -> VAR_42 [ 0 ] . VAR_43 . VAR_44 , VAR_45 -> VAR_46 ) ; break ; case VAR_47 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ; if ( VAR_48 -> VAR_49 ) METHOD_5 ( VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = CHECKED_XMALLOC ( TYPE_7 , VAR_54 -> VAR_55 [ 0 ] . VAR_56 ) ; METHOD_6 ( VAR_57 -> VAR_58 , VAR_59 -> VAR_60 [ 0 ] . VAR_61 . VAR_62 , VAR_63 -> VAR_64 [ 0 ] . VAR_65 ) ; break ; case VAR_66 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ; if ( VAR_67 -> VAR_68 ) METHOD_7 ( VAR_69 -> VAR_70 ) ; VAR_71 -> VAR_72 = CHECKED_XMALLOC ( TYPE_8 , VAR_73 -> VAR_74 [ 0 ] . VAR_75 ) ; METHOD_8 ( VAR_76 -> VAR_77 , VAR_78 -> VAR_79 [ 0 ] . VAR_80 . VAR_81 , VAR_82 -> VAR_83 [ 0 ] . VAR_84 ) ; break ; default : break ; } } } }",193
194,"struct STRUCT_OR_UNION_0 * METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , const struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_0 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; const struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_6 * VAR_8 , VAR_9 ; struct STRUCT_OR_UNION_7 * VAR_10 ; METHOD_3 ( VAR_11 , 0 , sizeof ( * VAR_12 ) ) ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 ;  VAR_20 = METHOD_4 ( VAR_21 , VAR_22 -> VAR_23 , & VAR_24 ) ;   VAR_25 -> VAR_26 = VAR_27 -> VAR_28 ;  VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = METHOD_5 ( VAR_43 -> VAR_44 ) ; METHOD_6 ( VAR_45 , METHOD_7 ( VAR_46 ) ) ; VAR_47 = METHOD_8 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( METHOD_9 ( VAR_51 ) ) return VAR_52 ; return VAR_53 ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , const struct STRUCT_OR_UNION_3 * VAR_2 , TYPE_0 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; const struct STRUCT_OR_UNION_5 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_6 * VAR_8 , VAR_9 ; struct STRUCT_OR_UNION_7 * VAR_10 ; METHOD_3 ( VAR_11 , 0 , sizeof ( * VAR_12 ) ) ; VAR_13 -> VAR_14 = VAR_15 ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 ; METHOD_10 ( ) ; VAR_20 = METHOD_4 ( VAR_21 , VAR_22 -> VAR_23 ) , & VAR_24 ) ; METHOD_12 ( ) ; VAR_25 -> VAR_26 = VAR_27 -> VAR_28 ; VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = METHOD_5 ( VAR_43 -> VAR_44 ) ; METHOD_6 ( VAR_45 , METHOD_7 ( VAR_46 ) ) ; VAR_47 = METHOD_8 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( METHOD_9 ( VAR_51 ) ) return VAR_52 ; return VAR_53 ; }",194
195,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 , * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; TYPE_1 VAR_4 ; VAR_5 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_6 ) ; METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_7 . VAR_8 ) ; if ( ! VAR_9 ) goto VAR_10 ; VAR_11 -> VAR_12 = 8 ; VAR_13 -> VAR_14 = 8 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0xff ; METHOD_3 ( VAR_19 , VAR_20 , STRUCT_OR_UNION_6 ) { struct STRUCT_OR_UNION_7 * VAR_21 = VAR_22 -> VAR_23 . VAR_24 ; TYPE_2 VAR_25 , VAR_26 ; TYPE_3 VAR_27 ; if ( ! METHOD_4 ( VAR_28 ) ) continue ; if ( METHOD_5 ( VAR_29 ) ) { VAR_30 -> VAR_31 = 32 ; VAR_32 -> VAR_33 = 16 ;  VAR_34 -> VAR_35 = VAR_36 -> VAR_37 = 0xffff ;  } else if ( METHOD_6 ( VAR_38 ) && ! VAR_39 -> VAR_40 && METHOD_7 ( VAR_41 , VAR_42 ) == VAR_43 ) { VAR_44 -> VAR_45 = 4 ; VAR_46 -> VAR_47 = 0xf ; VAR_48 -> VAR_49 = 0xf ; } VAR_50 -> VAR_51 [ METHOD_8 ( VAR_52 ) ] = VAR_53 ; VAR_54 = METHOD_9 ( VAR_55 , VAR_56 ) ; VAR_57 = METHOD_10 ( VAR_58 , VAR_59 ) ; VAR_60 = METHOD_11 ( VAR_61 , VAR_62 ) ; if ( VAR_63 ) VAR_64 -> VAR_65 [ VAR_66 ] [ METHOD_12 ( VAR_67 ) - 1 ] = VAR_68 ; } VAR_69 : VAR_70 = METHOD_13 ( STRUCT_OR_UNION_8 -> VAR_71 . VAR_72 , METHOD_14 ( & STRUCT_OR_UNION_9 -> VAR_73 . VAR_74 ) ) ; METHOD_15 ( STRUCT_OR_UNION_10 -> VAR_75 . VAR_76 , VAR_77 ) ; METHOD_16 ( & STRUCT_OR_UNION_11 -> VAR_78 . VAR_79 ) ; if ( VAR_80 ) METHOD_17 ( VAR_81 , VAR_82 ) ; METHOD_18 ( STRUCT_OR_UNION_12 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 , * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; TYPE_1 VAR_4 ; VAR_5 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_6 ) ; METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_7 . VAR_8 ) ; if ( ! VAR_9 ) goto VAR_10 ; VAR_11 -> VAR_12 = 8 ; VAR_13 -> VAR_14 = 8 ; VAR_15 -> VAR_16 = 0 ; VAR_17 -> VAR_18 = 0xff ; METHOD_3 ( VAR_19 , VAR_20 , STRUCT_OR_UNION_6 ) { struct STRUCT_OR_UNION_7 * VAR_21 = VAR_22 -> VAR_23 . VAR_24 ; TYPE_2 VAR_25 , VAR_26 ; TYPE_3 VAR_27 ; if ( ! METHOD_4 ( VAR_28 ) ) continue ; if ( METHOD_5 ( VAR_29 ) ) { VAR_30 -> VAR_31 = 32 ; VAR_32 -> VAR_33 = 16 ; VAR_34 -> VAR_35 = VAR_36 -> VAR_37 = 0xffff ; } else if ( METHOD_6 ( VAR_38 ) && ! VAR_39 -> VAR_40 && METHOD_7 ( VAR_41 , VAR_42 ) == VAR_43 ) { VAR_44 -> VAR_45 = 4 ; VAR_46 -> VAR_47 = ( 1 << VAR_83 ) - 1 ; 0xf ; VAR_48 -> VAR_49 = 0xf ; } VAR_50 -> VAR_51 [ METHOD_8 ( VAR_52 ) ] = VAR_53 ; VAR_54 = METHOD_9 ( VAR_55 , VAR_56 ) ; VAR_57 = METHOD_10 ( VAR_58 , VAR_59 ) ; VAR_60 = METHOD_11 ( VAR_61 , VAR_62 ) ; if ( VAR_63 ) VAR_64 -> VAR_65 [ VAR_66 ] [ METHOD_12 ( VAR_67 ) - 1 ] = VAR_68 ; } VAR_69 : VAR_70 = METHOD_13 ( STRUCT_OR_UNION_8 -> VAR_71 . VAR_72 , METHOD_14 ( & STRUCT_OR_UNION_9 -> VAR_73 . VAR_74 ) ) ; METHOD_15 ( STRUCT_OR_UNION_10 -> VAR_75 . VAR_76 , VAR_77 ) ; METHOD_16 ( & STRUCT_OR_UNION_11 -> VAR_78 . VAR_79 ) ; if ( VAR_80 ) METHOD_17 ( VAR_81 , VAR_82 ) ; METHOD_18 ( STRUCT_OR_UNION_12 ) ; }",195
196,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = 0 ; TYPE_3 VAR_3 , VAR_4 ; unsigned TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_5 VAR_8 ; struct STRUCT_OR_UNION_5 VAR_9 ; TYPE_6 VAR_10 = 0 ; if ( ! METHOD_1 ( STRUCT_OR_UNION_6 -> VAR_11 ) -> VAR_12 ) return 0 ; METHOD_2 ( & VAR_13 , STRUCT_OR_UNION_7 ) ; METHOD_3 ( VAR_14 , STRUCT_OR_UNION_8 , & VAR_15 ) ; if ( VAR_16 & VAR_17 ) { VAR_18 . VAR_19 += 14 ; VAR_20 . VAR_21 -= 14 ; if ( VAR_22 . VAR_23 < 0 ) VAR_24 . VAR_25 = 0 ; } VAR_26 : while ( VAR_27 . VAR_28 > 2 ) { VAR_29 = ( struct STRUCT_OR_UNION_9 * ) VAR_30 . VAR_31 ; if ( VAR_32 -> VAR_33 < 3 ) goto VAR_34 ; VAR_35 = METHOD_4 ( VAR_36 . VAR_37 ) ; if ( METHOD_5 ( & VAR_38 , VAR_39 ) ) goto VAR_40 ; VAR_41 . VAR_42 += VAR_43 -> VAR_44 ; VAR_45 . VAR_46 -= VAR_47 -> VAR_48 ; if ( VAR_49 . VAR_50 < 0 ) goto VAR_51 ; switch ( VAR_52 ) { TYPE_7 TYPE_8 case METHOD_6 ( 'R' , 'R' ) : if ( ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 [ 0 ] & ( VAR_57 | VAR_58 | VAR_59 | VAR_60 ) ) == 0 ) goto VAR_61 ; break ; case METHOD_7 ( 'S' , 'P' ) : if ( METHOD_8 ( VAR_62 , STRUCT_OR_UNION_10 ) ) goto VAR_63 ; break ; case METHOD_9 ( 'C' , 'E' ) : VAR_64 . VAR_65 = METHOD_10 ( VAR_66 -> VAR_67 . VAR_68 . VAR_69 ) ; VAR_70 . VAR_71 = METHOD_11 ( VAR_72 -> VAR_73 . VAR_74 . VAR_75 ) ; VAR_76 . VAR_77 = METHOD_12 ( VAR_78 -> VAR_79 . VAR_80 . VAR_81 ) ; break ; case METHOD_13 ( 'E' , 'R' ) :  METHOD_14 ( STRUCT_OR_UNION_11 -> VAR_82 ) -> VAR_83 = 1 ;  METHOD_15 ( KERN_DEBUG ""ISO9660Extensions:"" ) ; { TYPE_9 VAR_84 ; for ( VAR_85 = 0 ; VAR_86 < VAR_87 -> VAR_88 . VAR_89 . VAR_90 ; VAR_91 ++ ) METHOD_16 ( ""%c"" , VAR_92 -> VAR_93 . VAR_94 . VAR_95 [ VAR_96 ] ) ; } METHOD_17 ( ""\\n"" ) ; break ; case METHOD_18 ( 'P' , 'X' ) : STRUCT_OR_UNION_12 -> VAR_97 = METHOD_19 ( VAR_98 -> VAR_99 . VAR_100 . VAR_101 ) ; METHOD_20 ( STRUCT_OR_UNION_13 , METHOD_21 ( VAR_102 -> VAR_103 . VAR_104 . VAR_105 ) ) ; METHOD_22 ( STRUCT_OR_UNION_14 , METHOD_23 ( VAR_106 -> VAR_107 . VAR_108 . VAR_109 ) ) ; METHOD_24 ( STRUCT_OR_UNION_15 , METHOD_25 ( VAR_110 -> VAR_111 . VAR_112 . VAR_113 ) ) ; break ; case METHOD_26 ( 'P' , 'N' ) : { TYPE_10 VAR_114 , VAR_115 ; VAR_116 = METHOD_27 ( VAR_117 -> VAR_118 . VAR_119 . VAR_120 ) ; VAR_121 = METHOD_28 ( VAR_122 -> VAR_123 . VAR_124 . VAR_125 ) ; if ( ( VAR_126 & ~ 0xff ) && VAR_127 == 0 ) { STRUCT_OR_UNION_16 -> VAR_128 = METHOD_29 ( VAR_129 >> 8 , VAR_130 & 0xff ) ; } else { STRUCT_OR_UNION_17 -> VAR_131 = METHOD_30 ( VAR_132 , VAR_133 ) ; } } break ; case METHOD_31 ( 'T' , 'F' ) : VAR_134 = 0 ; if ( VAR_135 -> VAR_136 . VAR_137 . VAR_138 & VAR_139 ) { STRUCT_OR_UNION_18 -> VAR_140 . VAR_141 = METHOD_32 ( VAR_142 -> VAR_143 . VAR_144 . VAR_145 [ VAR_146 ++ ] . VAR_147 , 0 ) ; STRUCT_OR_UNION_19 -> VAR_148 . VAR_149 = 0 ; } if ( VAR_150 -> VAR_151 . VAR_152 . VAR_153 & VAR_154 ) { STRUCT_OR_UNION_20 -> VAR_155 . VAR_156 = METHOD_33 ( VAR_157 -> VAR_158 . VAR_159 . VAR_160 [ VAR_161 ++ ] . VAR_162 , 0 ) ; STRUCT_OR_UNION_21 -> VAR_163 . VAR_164 = 0 ; } if ( VAR_165 -> VAR_166 . VAR_167 . VAR_168 & VAR_169 ) { STRUCT_OR_UNION_22 -> VAR_170 . VAR_171 = METHOD_34 ( VAR_172 -> VAR_173 . VAR_174 . VAR_175 [ VAR_176 ++ ] . VAR_177 , 0 ) ; STRUCT_OR_UNION_23 -> VAR_178 . VAR_179 = 0 ; } if ( VAR_180 -> VAR_181 . VAR_182 . VAR_183 & VAR_184 ) { STRUCT_OR_UNION_24 -> VAR_185 . VAR_186 = METHOD_35 ( VAR_187 -> VAR_188 . VAR_189 . VAR_190 [ VAR_191 ++ ] . VAR_192 , 0 ) ; STRUCT_OR_UNION_25 -> VAR_193 . VAR_194 = 0 ; } break ; case METHOD_36 ( 'S' , 'L' ) : { TYPE_11 VAR_195 ; struct STRUCT_OR_UNION_26 * VAR_196 ; struct STRUCT_OR_UNION_27 * VAR_197 ; VAR_198 = VAR_199 -> VAR_200 - 5 ; VAR_201 = & VAR_202 -> VAR_203 . VAR_204 . VAR_205 ; STRUCT_OR_UNION_28 -> VAR_206 = VAR_207 ; while ( VAR_208 > 1 ) { VAR_209 = 0 ; switch ( VAR_210 -> VAR_211 & ~ 1 ) { case 0 : STRUCT_OR_UNION_29 -> VAR_212 += VAR_213 -> VAR_214 ; break ; case 2 : STRUCT_OR_UNION_30 -> VAR_215 += 1 ; break ; case 4 : STRUCT_OR_UNION_31 -> VAR_216 += 2 ; break ; case 8 : VAR_217 = 1 ; STRUCT_OR_UNION_32 -> VAR_218 += 1 ; break ; default : METHOD_37 ( ""Symlinkcomponentflag"" ""notimplemented\\n"" ) ; } VAR_219 -= VAR_220 -> VAR_221 + 2 ; VAR_222 = VAR_223 ; VAR_224 = ( struct STRUCT_OR_UNION_33 * ) ( ( ( TYPE_12 * ) VAR_225 ) + VAR_226 -> VAR_227 + 2 ) ; if ( VAR_228 < 2 ) { if ( ( ( VAR_229 -> VAR_230 . VAR_231 . VAR_232 & 1 ) != 0 ) && ( ( VAR_233 -> VAR_234 & 1 ) == 0 ) ) STRUCT_OR_UNION_34 -> VAR_235 += 1 ; break ; } if ( ! VAR_236 && ( VAR_237 -> VAR_238 & 1 ) == 0 ) STRUCT_OR_UNION_35 -> VAR_239 += 1 ; } } VAR_240 = STRUCT_OR_UNION_36 -> VAR_241 ; break ; case METHOD_38 ( 'R' , 'E' ) : METHOD_39 ( KERN_WARNING ""Attempttoreadinodefor"" ""relocateddirectory\\n"" ) ; goto VAR_242 ; case METHOD_40 ( 'C' , 'L' ) : if ( VAR_243 & VAR_244 ) { METHOD_41 ( KERN_ERR ""ISOFS:Recursivedirectoryrelocation"" ""isnotsupported\\n"" ) ; goto VAR_245 ; } VAR_246 = METHOD_42 ( VAR_247 -> VAR_248 . VAR_249 . VAR_250 ) ; if ( VAR_251 == METHOD_43 ( STRUCT_OR_UNION_37 ) -> VAR_252 && METHOD_44 ( STRUCT_OR_UNION_38 ) -> VAR_253 == 0 ) { METHOD_45 ( KERN_ERR ""ISOFS:Directoryrelocationpointsto"" ""itself\\n"" ) ; goto VAR_254 ; } METHOD_46 ( STRUCT_OR_UNION_39 ) -> VAR_255 = VAR_256 ; VAR_257 = METHOD_47 ( STRUCT_OR_UNION_40 -> VAR_258 , VAR_259 , 0 ) ; if ( METHOD_48 ( VAR_260 ) ) { VAR_261 = METHOD_49 ( VAR_262 ) ; goto VAR_263 ; } STRUCT_OR_UNION_41 -> VAR_264 = VAR_265 -> VAR_266 ; METHOD_50 ( STRUCT_OR_UNION_42 , VAR_267 -> VAR_268 ) ; STRUCT_OR_UNION_43 -> VAR_269 = VAR_270 -> VAR_271 ; STRUCT_OR_UNION_44 -> VAR_272 = VAR_273 -> VAR_274 ; STRUCT_OR_UNION_45 -> VAR_275 = VAR_276 -> VAR_277 ; STRUCT_OR_UNION_46 -> VAR_278 = VAR_279 -> VAR_280 ; STRUCT_OR_UNION_47 -> VAR_281 = VAR_282 -> VAR_283 ; STRUCT_OR_UNION_48 -> VAR_284 = VAR_285 -> VAR_286 ; STRUCT_OR_UNION_49 -> VAR_287 = VAR_288 -> VAR_289 ; STRUCT_OR_UNION_50 -> VAR_290 = VAR_291 -> VAR_292 ; METHOD_51 ( VAR_293 ) ; break ; TYPE_13 TYPE_14 case METHOD_52 ( 'Z' , 'F' ) : { TYPE_15 VAR_294 ; if ( METHOD_53 ( STRUCT_OR_UNION_51 -> VAR_295 ) -> VAR_296 ) break ; VAR_297 = METHOD_54 ( VAR_298 -> VAR_299 . VAR_300 . VAR_301 ) ; if ( VAR_302 == METHOD_55 ( 'p' , 'z' ) ) { TYPE_16 VAR_303 = METHOD_56 ( & VAR_304 -> VAR_305 . VAR_306 . VAR_307 [ 1 ] ) ; if ( VAR_308 > 17 ) { METHOD_57 ( KERN_WARNING ""isofs:"" ""Can\'thandleZFblock"" ""sizeof2^%d\\n"" , VAR_309 ) ; } else { METHOD_58 ( STRUCT_OR_UNION_52 ) -> VAR_310 = VAR_311 ; METHOD_59 ( STRUCT_OR_UNION_53 ) -> VAR_312 [ 0 ] = METHOD_60 ( & VAR_313 -> VAR_314 . VAR_315 . VAR_316 [ 0 ] ) ; METHOD_61 ( STRUCT_OR_UNION_54 ) -> VAR_317 [ 1 ] = METHOD_62 ( & VAR_318 -> VAR_319 . VAR_320 . VAR_321 [ 1 ] ) ; STRUCT_OR_UNION_55 -> VAR_322 = METHOD_63 ( VAR_323 -> VAR_324 . VAR_325 . VAR_326 ) ; } } else { METHOD_64 ( KERN_WARNING ""isofs:UnknownZFcompression"" ""algorithm:%c%c\\n"" , VAR_327 -> VAR_328 . VAR_329 . VAR_330 [ 0 ] , VAR_331 -> VAR_332 . VAR_333 . VAR_334 [ 1 ] ) ; } break ; } default : break ; } } VAR_335 = METHOD_65 ( & VAR_336 ) ; if ( VAR_337 == 0 ) goto VAR_338 ; if ( VAR_339 == 1 ) VAR_340 = 0 ; VAR_341 : METHOD_66 ( VAR_342 . VAR_343 ) ; return VAR_344 ; VAR_345 : VAR_346 = - VAR_347 ; goto VAR_348 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = 0 ; TYPE_3 VAR_3 , VAR_4 ; unsigned TYPE_4 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_5 VAR_8 ; struct STRUCT_OR_UNION_5 VAR_9 ; TYPE_6 VAR_10 = 0 ; if ( ! METHOD_1 ( STRUCT_OR_UNION_6 -> VAR_11 ) -> VAR_12 ) return 0 ; METHOD_2 ( & VAR_13 , STRUCT_OR_UNION_7 ) ; METHOD_3 ( VAR_14 , STRUCT_OR_UNION_8 , & VAR_15 ) ; if ( VAR_16 & VAR_17 ) { VAR_18 . VAR_19 += 14 ; VAR_20 . VAR_21 -= 14 ; if ( VAR_22 . VAR_23 < 0 ) VAR_24 . VAR_25 = 0 ; } VAR_26 : while ( VAR_27 . VAR_28 > 2 ) { VAR_29 = ( struct STRUCT_OR_UNION_9 * ) VAR_30 . VAR_31 ; if ( VAR_32 -> VAR_33 < 3 ) goto VAR_34 ; VAR_35 = METHOD_4 ( VAR_36 . VAR_37 ) ; if ( METHOD_5 ( & VAR_38 , VAR_39 ) ) goto VAR_40 ; VAR_41 . VAR_42 += VAR_43 -> VAR_44 ; VAR_45 . VAR_46 -= VAR_47 -> VAR_48 ; if ( VAR_49 . VAR_50 < 0 ) goto VAR_51 ; switch ( VAR_52 ) { TYPE_7 TYPE_8 case METHOD_6 ( 'R' , 'R' ) : if ( VAR_331 -> VAR_332 . VAR_94 . VAR_90 + VAR_349 ( struct STRUCT_OR_UNION_9 , VAR_332 . VAR_94 . VAR_95 ) > VAR_331 -> VAR_227 ) goto VAR_348 ; if ( ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 [ 0 ] & ( VAR_57 | VAR_58 | VAR_59 | VAR_60 ) ) == 0 ) goto VAR_61 ; break ; case METHOD_7 ( 'S' , 'P' ) : if ( METHOD_8 ( VAR_62 , STRUCT_OR_UNION_10 ) ) goto VAR_63 ; break ; case METHOD_9 ( 'C' , 'E' ) : VAR_64 . VAR_65 = METHOD_10 ( VAR_66 -> VAR_67 . VAR_68 . VAR_69 ) ; VAR_70 . VAR_71 = METHOD_11 ( VAR_72 -> VAR_73 . VAR_74 . VAR_75 ) ; VAR_76 . VAR_77 = METHOD_12 ( VAR_78 -> VAR_79 . VAR_80 . VAR_81 ) ; break ; case METHOD_13 ( 'E' , 'R' ) : METHOD_14 ( STRUCT_OR_UNION_11 -> VAR_82 ) -> VAR_83 = 1 ; METHOD_15 ( KERN_DEBUG ""ISO9660Extensions:"" ) ; { TYPE_9 VAR_84 ; for ( VAR_85 = 0 ; VAR_86 < VAR_87 -> VAR_88 . VAR_89 . VAR_90 ; VAR_91 ++ ) METHOD_16 ( ""%c"" , VAR_92 -> VAR_93 . VAR_94 . VAR_95 [ VAR_96 ] ) ; } METHOD_17 ( ""\\n"" ) ; break ; case METHOD_18 ( 'P' , 'X' ) : STRUCT_OR_UNION_12 -> VAR_97 = METHOD_19 ( VAR_98 -> VAR_99 . VAR_100 . VAR_101 ) ; METHOD_20 ( STRUCT_OR_UNION_13 , METHOD_21 ( VAR_102 -> VAR_103 . VAR_104 . VAR_105 ) ) ; METHOD_22 ( STRUCT_OR_UNION_14 , METHOD_23 ( VAR_106 -> VAR_107 . VAR_108 . VAR_109 ) ) ; METHOD_24 ( STRUCT_OR_UNION_15 , METHOD_25 ( VAR_110 -> VAR_111 . VAR_112 . VAR_113 ) ) ; break ; case METHOD_26 ( 'P' , 'N' ) : { TYPE_10 VAR_114 , VAR_115 ; VAR_116 = METHOD_27 ( VAR_117 -> VAR_118 . VAR_119 . VAR_120 ) ; VAR_121 = METHOD_28 ( VAR_122 -> VAR_123 . VAR_124 . VAR_125 ) ; if ( ( VAR_126 & ~ 0xff ) && VAR_127 == 0 ) { STRUCT_OR_UNION_16 -> VAR_128 = METHOD_29 ( VAR_129 >> 8 , VAR_130 & 0xff ) ; } else { STRUCT_OR_UNION_17 -> VAR_131 = METHOD_30 ( VAR_132 , VAR_133 ) ; } } break ; case METHOD_31 ( 'T' , 'F' ) : VAR_134 = 0 ; if ( VAR_135 -> VAR_136 . VAR_137 . VAR_138 & VAR_139 ) { STRUCT_OR_UNION_18 -> VAR_140 . VAR_141 = METHOD_32 ( VAR_142 -> VAR_143 . VAR_144 . VAR_145 [ VAR_146 ++ ] . VAR_147 , 0 ) ; STRUCT_OR_UNION_19 -> VAR_148 . VAR_149 = 0 ; } if ( VAR_150 -> VAR_151 . VAR_152 . VAR_153 & VAR_154 ) { STRUCT_OR_UNION_20 -> VAR_155 . VAR_156 = METHOD_33 ( VAR_157 -> VAR_158 . VAR_159 . VAR_160 [ VAR_161 ++ ] . VAR_162 , 0 ) ; STRUCT_OR_UNION_21 -> VAR_163 . VAR_164 = 0 ; } if ( VAR_165 -> VAR_166 . VAR_167 . VAR_168 & VAR_169 ) { STRUCT_OR_UNION_22 -> VAR_170 . VAR_171 = METHOD_34 ( VAR_172 -> VAR_173 . VAR_174 . VAR_175 [ VAR_176 ++ ] . VAR_177 , 0 ) ; STRUCT_OR_UNION_23 -> VAR_178 . VAR_179 = 0 ; } if ( VAR_180 -> VAR_181 . VAR_182 . VAR_183 & VAR_184 ) { STRUCT_OR_UNION_24 -> VAR_185 . VAR_186 = METHOD_35 ( VAR_187 -> VAR_188 . VAR_189 . VAR_190 [ VAR_191 ++ ] . VAR_192 , 0 ) ; STRUCT_OR_UNION_25 -> VAR_193 . VAR_194 = 0 ; } break ; case METHOD_36 ( 'S' , 'L' ) : { TYPE_11 VAR_195 ; struct STRUCT_OR_UNION_26 * VAR_196 ; struct STRUCT_OR_UNION_27 * VAR_197 ; VAR_198 = VAR_199 -> VAR_200 - 5 ; VAR_201 = & VAR_202 -> VAR_203 . VAR_204 . VAR_205 ; STRUCT_OR_UNION_28 -> VAR_206 = VAR_207 ; while ( VAR_208 > 1 ) { VAR_209 = 0 ; switch ( VAR_210 -> VAR_211 & ~ 1 ) { case 0 : STRUCT_OR_UNION_29 -> VAR_212 += VAR_213 -> VAR_214 ; break ; case 2 : STRUCT_OR_UNION_30 -> VAR_215 += 1 ; break ; case 4 : STRUCT_OR_UNION_31 -> VAR_216 += 2 ; break ; case 8 : VAR_217 = 1 ; STRUCT_OR_UNION_32 -> VAR_218 += 1 ; break ; default : METHOD_37 ( ""Symlinkcomponentflag"" ""notimplemented\\n"" ) ; } VAR_219 -= VAR_220 -> VAR_221 + 2 ; VAR_222 = VAR_223 ; VAR_224 = ( struct STRUCT_OR_UNION_33 * ) ( ( ( TYPE_12 * ) VAR_225 ) + VAR_226 -> VAR_227 + 2 ) ; if ( VAR_228 < 2 ) { if ( ( ( VAR_229 -> VAR_230 . VAR_231 . VAR_232 & 1 ) != 0 ) && ( ( VAR_233 -> VAR_234 & 1 ) == 0 ) ) STRUCT_OR_UNION_34 -> VAR_235 += 1 ; break ; } if ( ! VAR_236 && ( VAR_237 -> VAR_238 & 1 ) == 0 ) STRUCT_OR_UNION_35 -> VAR_239 += 1 ; } } VAR_240 = STRUCT_OR_UNION_36 -> VAR_241 ; break ; case METHOD_38 ( 'R' , 'E' ) : METHOD_39 ( KERN_WARNING ""Attempttoreadinodefor"" ""relocateddirectory\\n"" ) ; goto VAR_242 ; case METHOD_40 ( 'C' , 'L' ) : if ( VAR_243 & VAR_244 ) { METHOD_41 ( KERN_ERR ""ISOFS:Recursivedirectoryrelocation"" ""isnotsupported\\n"" ) ; goto VAR_245 ; } VAR_246 = METHOD_42 ( VAR_247 -> VAR_248 . VAR_249 . VAR_250 ) ; if ( VAR_251 == METHOD_43 ( STRUCT_OR_UNION_37 ) -> VAR_252 && METHOD_44 ( STRUCT_OR_UNION_38 ) -> VAR_253 == 0 ) { METHOD_45 ( KERN_ERR ""ISOFS:Directoryrelocationpointsto"" ""itself\\n"" ) ; goto VAR_254 ; } METHOD_46 ( STRUCT_OR_UNION_39 ) -> VAR_255 = VAR_256 ; VAR_257 = METHOD_47 ( STRUCT_OR_UNION_40 -> VAR_258 , VAR_259 , 0 ) ; if ( METHOD_48 ( VAR_260 ) ) { VAR_261 = METHOD_49 ( VAR_262 ) ; goto VAR_263 ; } STRUCT_OR_UNION_41 -> VAR_264 = VAR_265 -> VAR_266 ; METHOD_50 ( STRUCT_OR_UNION_42 , VAR_267 -> VAR_268 ) ; STRUCT_OR_UNION_43 -> VAR_269 = VAR_270 -> VAR_271 ; STRUCT_OR_UNION_44 -> VAR_272 = VAR_273 -> VAR_274 ; STRUCT_OR_UNION_45 -> VAR_275 = VAR_276 -> VAR_277 ; STRUCT_OR_UNION_46 -> VAR_278 = VAR_279 -> VAR_280 ; STRUCT_OR_UNION_47 -> VAR_281 = VAR_282 -> VAR_283 ; STRUCT_OR_UNION_48 -> VAR_284 = VAR_285 -> VAR_286 ; STRUCT_OR_UNION_49 -> VAR_287 = VAR_288 -> VAR_289 ; STRUCT_OR_UNION_50 -> VAR_290 = VAR_291 -> VAR_292 ; METHOD_51 ( VAR_293 ) ; break ; TYPE_13 TYPE_14 case METHOD_52 ( 'Z' , 'F' ) : { TYPE_15 VAR_294 ; if ( METHOD_53 ( STRUCT_OR_UNION_51 -> VAR_295 ) -> VAR_296 ) break ; VAR_297 = METHOD_54 ( VAR_298 -> VAR_299 . VAR_300 . VAR_301 ) ; if ( VAR_302 == METHOD_55 ( 'p' , 'z' ) ) { TYPE_16 VAR_303 = METHOD_56 ( & VAR_304 -> VAR_305 . VAR_306 . VAR_307 [ 1 ] ) ; if ( VAR_308 > 17 ) { METHOD_57 ( KERN_WARNING ""isofs:"" ""Can\'thandleZFblock"" ""sizeof2^%d\\n"" , VAR_309 ) ; } else { METHOD_58 ( STRUCT_OR_UNION_52 ) -> VAR_310 = VAR_311 ; METHOD_59 ( STRUCT_OR_UNION_53 ) -> VAR_312 [ 0 ] = METHOD_60 ( & VAR_313 -> VAR_314 . VAR_315 . VAR_316 [ 0 ] ) ; METHOD_61 ( STRUCT_OR_UNION_54 ) -> VAR_317 [ 1 ] = METHOD_62 ( & VAR_318 -> VAR_319 . VAR_320 . VAR_321 [ 1 ] ) ; STRUCT_OR_UNION_55 -> VAR_322 = METHOD_63 ( VAR_323 -> VAR_324 . VAR_325 . VAR_326 ) ; } } else { METHOD_64 ( KERN_WARNING ""isofs:UnknownZFcompression"" ""algorithm:%c%c\\n"" , VAR_327 -> VAR_328 . VAR_329 . VAR_330 [ 0 ] , VAR_331 -> VAR_332 . VAR_333 . VAR_334 [ 1 ] ) ; } break ; } default : break ; } } VAR_335 = METHOD_65 ( & VAR_336 ) ; if ( VAR_337 == 0 ) goto VAR_338 ; if ( VAR_339 == 1 ) VAR_340 = 0 ; VAR_341 : METHOD_66 ( VAR_342 . VAR_343 ) ; return VAR_344 ; VAR_345 : VAR_346 = - VAR_347 ; goto VAR_348 ; }",196
197,"int METHOD_0 ( TYPE_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 _U_ ) { const struct STRUCT_OR_UNION_0 * VAR_3 ; const TYPE_3 * VAR_4 ; unsigned VAR_5 , VAR_6 ; TYPE_4 VAR_7 ; VAR_8 = ( const struct STRUCT_OR_UNION_1 * ) VAR_9 ; VAR_10 = VAR_11 -> VAR_12 ; if ( ! METHOD_1 ( VAR_13 -> VAR_14 ) ) { VAR_15 = VAR_16 - VAR_17 ; goto VAR_18 ; } VAR_19 = ( VAR_20 -> VAR_21 + 1 ) << 3 ; METHOD_2 ( VAR_22 -> VAR_23 ) ; VAR_24 = VAR_25 -> VAR_26 ; if ( VAR_27 <= VAR_28 && VAR_29 < VAR_30 [ VAR_31 ] ) { METHOD_3 ( ( VAR_32 , ""(headerlength%uistoosmallfortype%u)"" , VAR_33 , VAR_34 ) ) ; goto VAR_35 ; } METHOD_4 ( ( VAR_36 , ""mobility:%s"" , METHOD_5 ( VAR_37 , ""type-%u"" , VAR_38 ) ) ) ; switch ( VAR_39 ) { case VAR_40 : VAR_41 = VAR_42 ; break ; case VAR_43 : case VAR_44 : VAR_45 = VAR_46 ; if ( VAR_47 -> VAR_48 ) { METHOD_6 ( * VAR_49 , VAR_50 + 8 ) ; METHOD_7 ( ( VAR_51 , ""%sInitCookie=%08x:%08x"" , VAR_52 == VAR_53 ? ""Home"" : ""Care-of"" , METHOD_8 ( & VAR_54 [ VAR_55 ] ) , METHOD_9 ( & VAR_56 [ VAR_57 + 4 ] ) ) ) ; } VAR_58 += 8 ; break ; case VAR_59 : case VAR_60 : METHOD_10 ( VAR_61 -> VAR_62 [ 0 ] ) ; METHOD_11 ( ( VAR_63 , ""nonceid=0x%x"" , METHOD_12 ( & VAR_64 -> VAR_65 [ 0 ] ) ) ) ; VAR_66 = VAR_67 ; if ( VAR_68 -> VAR_69 ) { METHOD_13 ( * VAR_70 , VAR_71 + 8 ) ; METHOD_14 ( ( VAR_72 , ""%sInitCookie=%08x:%08x"" , VAR_73 == VAR_74 ? ""Home"" : ""Care-of"" , METHOD_15 ( & VAR_75 [ VAR_76 ] ) , METHOD_16 ( & VAR_77 [ VAR_78 + 4 ] ) ) ) ; } VAR_79 += 8 ; if ( VAR_80 -> VAR_81 ) { METHOD_17 ( * VAR_82 , VAR_83 + 8 ) ; METHOD_18 ( ( VAR_84 , ""%sKeygenToken=%08x:%08x"" , VAR_85 == VAR_86 ? ""Home"" : ""Care-of"" , METHOD_19 ( & VAR_87 [ VAR_88 ] ) , METHOD_20 ( & VAR_89 [ VAR_90 + 4 ] ) ) ) ; } VAR_91 += 8 ; break ; case VAR_92 : METHOD_21 ( VAR_93 -> VAR_94 [ 0 ] ) ; METHOD_22 ( ( VAR_95 , ""seq=%u"" , METHOD_23 ( & VAR_96 -> VAR_97 [ 0 ] ) ) ) ; VAR_98 = VAR_99 ; METHOD_24 ( * VAR_100 , VAR_101 + 1 ) ; if ( VAR_102 [ VAR_103 ] & 0xf0 ) METHOD_25 ( ( VAR_104 , """" ) ) ; if ( VAR_105 [ VAR_106 ] & 0x80 ) METHOD_26 ( ( VAR_107 , ""A"" ) ) ; if ( VAR_108 [ VAR_109 ] & 0x40 ) METHOD_27 ( ( VAR_110 , ""H"" ) ) ; if ( VAR_111 [ VAR_112 ] & 0x20 ) METHOD_28 ( ( VAR_113 , ""L"" ) ) ; if ( VAR_114 [ VAR_115 ] & 0x10 ) METHOD_29 ( ( VAR_116 , ""K"" ) ) ; VAR_117 += 1 ; VAR_118 += 1 ; METHOD_30 ( * VAR_119 , VAR_120 + 2 ) ; METHOD_31 ( ( VAR_121 , ""lifetime=%u"" , METHOD_32 ( & VAR_122 [ VAR_123 ] ) << 2 ) ) ; VAR_124 += 2 ; break ; case VAR_125 : METHOD_33 ( VAR_126 -> VAR_127 [ 0 ] ) ; METHOD_34 ( ( VAR_128 , ""status=%u"" , VAR_129 -> VAR_130 [ 0 ] ) ) ; if ( VAR_131 -> VAR_132 [ 1 ] & 0x80 ) METHOD_35 ( ( VAR_133 , ""K"" ) ) ; VAR_134 = VAR_135 ; METHOD_36 ( * VAR_136 , VAR_137 + 2 ) ; METHOD_37 ( ( VAR_138 , ""seq=%u"" , METHOD_38 ( & VAR_139 [ VAR_140 ] ) ) ) ; VAR_141 += 2 ; METHOD_39 ( * VAR_142 , VAR_143 + 2 ) ; METHOD_40 ( ( VAR_144 , ""lifetime=%u"" , METHOD_41 ( & VAR_145 [ VAR_146 ] ) << 2 ) ) ; VAR_147 += 2 ; break ; case VAR_148 : METHOD_42 ( VAR_149 -> VAR_150 [ 0 ] ) ; METHOD_43 ( ( VAR_151 , ""status=%u"" , VAR_152 -> VAR_153 [ 0 ] ) ) ; VAR_154 = VAR_155 ; METHOD_44 ( * VAR_156 , VAR_157 + 16 ) ; METHOD_45 ( ( VAR_158 , ""homeaddr%s"" , METHOD_46 ( VAR_159 , & VAR_160 [ VAR_161 ] ) ) ) ; VAR_162 += 16 ; break ; default : METHOD_47 ( ( VAR_163 , ""len=%u"" , VAR_164 -> VAR_165 ) ) ; return ( VAR_166 ) ; break ; } if ( VAR_167 -> VAR_168 ) if ( METHOD_48 ( VAR_169 , & VAR_170 [ VAR_171 ] , VAR_172 - VAR_173 ) ) goto VAR_174 ; return ( VAR_175 ) ; VAR_176 : METHOD_49 ( ( VAR_177 , ""%s"" , VAR_178 ) ) ;  return ( VAR_179 ) ;  }","int METHOD_0 ( TYPE_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 _U_ ) { const struct STRUCT_OR_UNION_0 * VAR_3 ; const TYPE_3 * VAR_4 ; unsigned VAR_5 , VAR_6 ; TYPE_4 VAR_7 ; VAR_8 = ( const struct STRUCT_OR_UNION_1 * ) VAR_9 ; VAR_10 = VAR_11 -> VAR_12 ; if ( ! METHOD_1 ( VAR_13 -> VAR_14 ) ) { VAR_15 = VAR_16 - VAR_17 ; goto VAR_18 ; } VAR_19 = ( VAR_20 -> VAR_21 + 1 ) << 3 ; METHOD_2 ( VAR_22 -> VAR_23 ) ; VAR_24 = VAR_25 -> VAR_26 ; if ( VAR_27 <= VAR_28 && VAR_29 < VAR_30 [ VAR_31 ] ) { METHOD_3 ( ( VAR_32 , ""(headerlength%uistoosmallfortype%u)"" , VAR_33 , VAR_34 ) ) ; goto VAR_35 ; } METHOD_4 ( ( VAR_36 , ""mobility:%s"" , METHOD_5 ( VAR_37 , ""type-%u"" , VAR_38 ) ) ) ; switch ( VAR_39 ) { case VAR_40 : VAR_41 = VAR_42 ; break ; case VAR_43 : case VAR_44 : VAR_45 = VAR_46 ; if ( VAR_47 -> VAR_48 ) { METHOD_6 ( * VAR_49 , VAR_50 + 8 ) ; METHOD_7 ( ( VAR_51 , ""%sInitCookie=%08x:%08x"" , VAR_52 == VAR_53 ? ""Home"" : ""Care-of"" , METHOD_8 ( & VAR_54 [ VAR_55 ] ) , METHOD_9 ( & VAR_56 [ VAR_57 + 4 ] ) ) ) ; } VAR_58 += 8 ; break ; case VAR_59 : case VAR_60 : METHOD_10 ( VAR_61 -> VAR_62 [ 0 ] ) ; METHOD_11 ( ( VAR_63 , ""nonceid=0x%x"" , METHOD_12 ( & VAR_64 -> VAR_65 [ 0 ] ) ) ) ; VAR_66 = VAR_67 ; if ( VAR_68 -> VAR_69 ) { METHOD_13 ( * VAR_70 , VAR_71 + 8 ) ; METHOD_14 ( ( VAR_72 , ""%sInitCookie=%08x:%08x"" , VAR_73 == VAR_74 ? ""Home"" : ""Care-of"" , METHOD_15 ( & VAR_75 [ VAR_76 ] ) , METHOD_16 ( & VAR_77 [ VAR_78 + 4 ] ) ) ) ; } VAR_79 += 8 ; if ( VAR_80 -> VAR_81 ) { METHOD_17 ( * VAR_82 , VAR_83 + 8 ) ; METHOD_18 ( ( VAR_84 , ""%sKeygenToken=%08x:%08x"" , VAR_85 == VAR_86 ? ""Home"" : ""Care-of"" , METHOD_19 ( & VAR_87 [ VAR_88 ] ) , METHOD_20 ( & VAR_89 [ VAR_90 + 4 ] ) ) ) ; } VAR_91 += 8 ; break ; case VAR_92 : METHOD_21 ( VAR_93 -> VAR_94 [ 0 ] ) ; METHOD_22 ( ( VAR_95 , ""seq=%u"" , METHOD_23 ( & VAR_96 -> VAR_97 [ 0 ] ) ) ) ; VAR_98 = VAR_99 ; METHOD_24 ( * VAR_100 , VAR_101 + 1 ) ; if ( VAR_102 [ VAR_103 ] & 0xf0 ) METHOD_25 ( ( VAR_104 , """" ) ) ; if ( VAR_105 [ VAR_106 ] & 0x80 ) METHOD_26 ( ( VAR_107 , ""A"" ) ) ; if ( VAR_108 [ VAR_109 ] & 0x40 ) METHOD_27 ( ( VAR_110 , ""H"" ) ) ; if ( VAR_111 [ VAR_112 ] & 0x20 ) METHOD_28 ( ( VAR_113 , ""L"" ) ) ; if ( VAR_114 [ VAR_115 ] & 0x10 ) METHOD_29 ( ( VAR_116 , ""K"" ) ) ; VAR_117 += 1 ; VAR_118 += 1 ; METHOD_30 ( * VAR_119 , VAR_120 + 2 ) ; METHOD_31 ( ( VAR_121 , ""lifetime=%u"" , METHOD_32 ( & VAR_122 [ VAR_123 ] ) << 2 ) ) ; VAR_124 += 2 ; break ; case VAR_125 : METHOD_33 ( VAR_126 -> VAR_127 [ 0 ] ) ; METHOD_34 ( ( VAR_128 , ""status=%u"" , VAR_129 -> VAR_130 [ 0 ] ) ) ; if ( VAR_131 -> VAR_132 [ 1 ] & 0x80 ) METHOD_35 ( ( VAR_133 , ""K"" ) ) ; VAR_134 = VAR_135 ; METHOD_36 ( * VAR_136 , VAR_137 + 2 ) ; METHOD_37 ( ( VAR_138 , ""seq=%u"" , METHOD_38 ( & VAR_139 [ VAR_140 ] ) ) ) ; VAR_141 += 2 ; METHOD_39 ( * VAR_142 , VAR_143 + 2 ) ; METHOD_40 ( ( VAR_144 , ""lifetime=%u"" , METHOD_41 ( & VAR_145 [ VAR_146 ] ) << 2 ) ) ; VAR_147 += 2 ; break ; case VAR_148 : METHOD_42 ( VAR_149 -> VAR_150 [ 0 ] ) ; METHOD_43 ( ( VAR_151 , ""status=%u"" , VAR_152 -> VAR_153 [ 0 ] ) ) ; VAR_154 = VAR_155 ; METHOD_44 ( * VAR_156 , VAR_157 + 16 ) ; METHOD_45 ( ( VAR_158 , ""homeaddr%s"" , METHOD_46 ( VAR_159 , & VAR_160 [ VAR_161 ] ) ) ) ; VAR_162 += 16 ; break ; default : METHOD_47 ( ( VAR_163 , ""len=%u"" , VAR_164 -> VAR_165 ) ) ; return ( - 1 ) ; }",197
198,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 * VAR_6 , * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_0 STRUCT_OR_UNION_1 ;  TYPE_8 VAR_9 = 0 ;  if ( ! VAR_10 ) { TYPE_9 VAR_11 ; for ( VAR_12 = 1 ; VAR_13 < VAR_14 ; VAR_15 ++ ) { if ( ! METHOD_1 ( VAR_16 [ VAR_17 ] , VAR_18 ) ) { * VAR_19 = VAR_20 ; return 0 ; } } * VAR_21 = VAR_22 ; return 0 ; } * VAR_23 = VAR_24 ; VAR_25 = METHOD_2 ( VAR_26 + 1 , VAR_27 ) ; if ( ! VAR_28 ) return - VAR_29 ; METHOD_3 ( VAR_30 , VAR_31 , VAR_32 ) ; VAR_33 [ VAR_34 ] = 0 ; if ( VAR_35 ) { VAR_36 = - VAR_37 ; VAR_38 = METHOD_4 ( VAR_39 , VAR_40 ) ; if ( ! VAR_41 ) goto VAR_42 ; } METHOD_5 ( & VAR_43 ) ; VAR_44 = METHOD_6 ( & VAR_45 , & VAR_46 , VAR_47 , VAR_48 , & STRUCT_OR_UNION_2 , VAR_49 ) ; if ( VAR_50 == - VAR_51 && VAR_52 ) { STRUCT_OR_UNION_3 . VAR_53 = VAR_54 ; STRUCT_OR_UNION_4 . VAR_55 = VAR_56 ; VAR_57 = VAR_58 ; } else if ( VAR_59 ) goto VAR_60 ; VAR_61 = METHOD_7 ( & VAR_62 , & STRUCT_OR_UNION_5 , VAR_63 ) ; METHOD_8 ( & STRUCT_OR_UNION_6 ) ; VAR_64 : METHOD_9 ( & VAR_65 ) ; VAR_66 : METHOD_10 ( VAR_67 ) ; METHOD_11 ( VAR_68 ) ; return VAR_69 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 * VAR_6 , * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_0 STRUCT_OR_UNION_1 ; TYPE_8 VAR_9 = 0 ; if ( ! VAR_10 ) { TYPE_9 VAR_11 ; for ( VAR_12 = 1 ; VAR_13 < VAR_14 ; VAR_15 ++ ) { if ( ! METHOD_1 ( VAR_16 [ VAR_17 ] , VAR_18 ) ) { * VAR_19 = VAR_20 ; return 0 ; } } * VAR_21 = VAR_22 ; return 0 ; } * VAR_23 = VAR_24 ; VAR_25 = METHOD_2 ( VAR_26 + 1 , VAR_27 ) ; if ( ! VAR_28 ) return - VAR_29 ; METHOD_3 ( VAR_30 , VAR_31 , VAR_32 ) ; VAR_33 [ VAR_34 ] = 0 ; if ( VAR_35 ) { VAR_36 = - VAR_37 ; VAR_38 = METHOD_4 ( VAR_39 , VAR_40 ) ; if ( ! VAR_41 ) goto VAR_42 ; } METHOD_5 ( & VAR_43 ) ; VAR_44 = METHOD_6 ( & VAR_45 , & VAR_46 , VAR_47 , VAR_48 , & STRUCT_OR_UNION_2 , VAR_49 ) ; if ( VAR_50 == - VAR_51 && VAR_52 ) { STRUCT_OR_UNION_3 . VAR_53 = VAR_54 ; STRUCT_OR_UNION_4 . VAR_55 = VAR_56 ; VAR_57 = VAR_58 ; } else if ( VAR_59 ) goto VAR_60 ; VAR_61 = METHOD_7 ( & VAR_62 , & STRUCT_OR_UNION_5 , VAR_63 ) ; METHOD_8 ( & STRUCT_OR_UNION_6 ) ; VAR_64 : METHOD_9 ( & VAR_65 ) ; VAR_66 : METHOD_10 ( VAR_67 ) ; METHOD_11 ( VAR_68 ) ; return VAR_69 ; }",198
199,"TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , const TYPE_3 * VAR_1 , unsigned TYPE_4 * * VAR_2 , unsigned TYPE_5 * * VAR_3 , TYPE_6 * * VAR_4 , unsigned TYPE_7 * VAR_5 , unsigned TYPE_8 * VAR_6 , unsigned TYPE_9 * VAR_7 ) { VAR_8 * VAR_9 ; const unsigned TYPE_10 VAR_10 = 512 ; TYPE_11 VAR_11 [ 512 + 1 ] ; unsigned TYPE_12 VAR_12 = 0 ; unsigned TYPE_13 * VAR_13 = VAR_14 ; unsigned TYPE_14 VAR_15 = 0 ; VAR_16 = METHOD_1 ( VAR_17 , ""r"" ) ; if ( VAR_18 == VAR_19 ) { METHOD_2 ( VAR_20 , VAR_21 ) ; return ; } while ( METHOD_3 ( VAR_22 , VAR_23 , VAR_24 ) != VAR_25 ) { if ( METHOD_4 ( VAR_26 ) == VAR_27 ) { METHOD_5 ( * VAR_28 ) ; METHOD_6 ( * VAR_29 ) ; METHOD_7 ( * VAR_30 ) ; METHOD_8 ( VAR_31 ) ; * VAR_32 = 0 ; * VAR_33 = 0 ; * VAR_34 = 0 ; METHOD_9 ( VAR_35 ) ; METHOD_10 ( VAR_36 , VAR_37 ) ; return ; } if ( VAR_38 [ 0 ] == '%' ) { continue ; } else { if ( VAR_39 == 0 ) {  if ( METHOD_11 ( VAR_40 , ""%u%u%u"" , VAR_41 , VAR_42 , VAR_43 ) == 3 ) {  * VAR_44 = ( unsigned TYPE_15 * ) METHOD_12 ( sizeof ( unsigned TYPE_16 ) * ( * VAR_45 ) ) ; * VAR_46 = ( unsigned TYPE_17 * ) METHOD_13 ( sizeof ( unsigned TYPE_18 ) * ( ( TYPE_19 ) ( * VAR_47 ) + 1 ) ) ; * VAR_48 = ( TYPE_20 * ) METHOD_14 ( sizeof ( TYPE_21 ) * ( * VAR_49 ) ) ; VAR_50 = ( unsigned TYPE_22 * ) METHOD_15 ( sizeof ( unsigned TYPE_23 ) * ( * VAR_51 ) ) ; if ( ( * VAR_52 == VAR_53 ) || ( * VAR_54 == VAR_55 ) || ( * VAR_56 == VAR_57 ) || ( VAR_58 == VAR_59 ) ) { METHOD_16 ( * VAR_60 ) ; METHOD_17 ( * VAR_61 ) ; METHOD_18 ( * VAR_62 ) ; METHOD_19 ( VAR_63 ) ; * VAR_64 = 0 ; * VAR_65 = 0 ; * VAR_66 = 0 ; METHOD_20 ( VAR_67 ) ; METHOD_21 ( VAR_68 , VAR_69 ) ; return ; } METHOD_22 ( * VAR_70 , 0 , sizeof ( unsigned TYPE_24 ) * ( ( TYPE_25 ) ( * VAR_71 ) + 1 ) ) ; METHOD_23 ( * VAR_72 , 0 , sizeof ( unsigned TYPE_26 ) * ( * VAR_73 ) ) ; METHOD_24 ( * VAR_74 , 0 , sizeof ( TYPE_27 ) * ( * VAR_75 ) ) ; METHOD_25 ( VAR_76 , 0 , sizeof ( unsigned TYPE_28 ) * ( * VAR_77 ) ) ; for ( VAR_78 = 0 ; VAR_79 <= * VAR_80 ; ++ VAR_81 ) ( * VAR_82 ) [ VAR_83 ] = ( * VAR_84 ) ; ( * VAR_85 ) [ 0 ] = 0 ; VAR_86 = 0 ; VAR_87 = 1 ; } else { METHOD_26 ( VAR_88 , VAR_89 ) ; METHOD_27 ( VAR_90 ) ; return ; } } else { unsigned TYPE_29 VAR_91 = 0 , VAR_92 = 0 ; TYPE_30 VAR_93 = 0 ; if ( METHOD_28 ( VAR_94 , ""%u%u%lf"" , & VAR_95 , & VAR_96 , & VAR_97 ) != 3 ) { METHOD_29 ( * VAR_98 ) ; METHOD_30 ( * VAR_99 ) ; METHOD_31 ( * VAR_100 ) ; METHOD_32 ( VAR_101 ) ; * VAR_102 = 0 ; * VAR_103 = 0 ; * VAR_104 = 0 ; METHOD_33 ( VAR_105 ) ; METHOD_34 ( VAR_106 , VAR_107 ) ; return ; }  VAR_108 -- ;  VAR_109 -- ; ( * VAR_110 ) [ VAR_111 ] = VAR_112 ; ( * VAR_113 ) [ VAR_114 ] = VAR_115 ; VAR_116 ++ ; VAR_117 [ VAR_118 ] = 1 ; ( * VAR_119 ) [ VAR_120 + 1 ] = VAR_121 ; } } } METHOD_35 ( VAR_122 ) ; if ( VAR_123 != ( * VAR_124 ) ) { METHOD_36 ( * VAR_125 ) ; METHOD_37 ( * VAR_126 ) ; METHOD_38 ( * VAR_127 ) ; METHOD_39 ( VAR_128 ) ; * VAR_129 = 0 ; * VAR_130 = 0 ; * VAR_131 = 0 ; METHOD_40 ( VAR_132 , VAR_133 ) ; return ; } if ( VAR_134 != VAR_135 ) { for ( VAR_136 = 0 ; VAR_137 < ( * VAR_138 ) ; VAR_139 ++ ) { if ( VAR_140 [ VAR_141 ] == 0 ) { ( * VAR_142 ) [ VAR_143 + 1 ] = ( * VAR_144 ) [ VAR_145 ] ; } } METHOD_41 ( VAR_146 ) ; } }","TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , const TYPE_3 * VAR_1 , unsigned TYPE_4 * * VAR_2 , unsigned TYPE_5 * * VAR_3 , TYPE_6 * * VAR_4 , unsigned TYPE_7 * VAR_5 , unsigned TYPE_8 * VAR_6 , unsigned TYPE_9 * VAR_7 ) { VAR_8 * VAR_9 ; const unsigned TYPE_10 VAR_10 = 512 ; TYPE_11 VAR_11 [ 512 + 1 ] ; unsigned TYPE_12 VAR_12 = 0 ; unsigned TYPE_13 * VAR_13 = VAR_14 ; unsigned TYPE_14 VAR_15 = 0 ; VAR_16 = METHOD_1 ( VAR_17 , ""r"" ) ; if ( VAR_18 == VAR_19 ) { METHOD_2 ( VAR_20 , VAR_21 ) ; return ; } while ( METHOD_3 ( VAR_22 , VAR_23 , VAR_24 ) != VAR_25 ) { if ( 3 == METHOD_4 ( VAR_26 ) == VAR_27 ) { METHOD_5 ( * VAR_28 ) ; METHOD_6 ( * VAR_29 ) ; METHOD_7 ( * VAR_30 ) ; METHOD_8 ( VAR_31 ) ; * VAR_32 = 0 ; * VAR_33 = 0 ; * VAR_34 = 0 ; METHOD_9 ( VAR_35 ) ; METHOD_10 ( VAR_36 , VAR_37 ) ; return ; } METHOD_42 ( 0 != VAR_120 && 0 != VAR_112 ) ; if ( VAR_38 [ 0 ] == '%' ) { continue ; } else { if ( VAR_39 == 0 ) { if ( METHOD_11 ( VAR_40 , ""%u%u%u"" , VAR_41 , VAR_42 , VAR_43 ) == 3 ) { * VAR_44 = ( unsigned TYPE_15 * ) METHOD_12 ( sizeof ( unsigned TYPE_16 ) * ( * VAR_45 ) ) ; * VAR_46 = ( unsigned TYPE_17 * ) METHOD_13 ( sizeof ( unsigned TYPE_18 ) * ( ( TYPE_19 ) ( * VAR_47 ) + 1 ) ) ; * VAR_48 = ( TYPE_20 * ) METHOD_14 ( sizeof ( TYPE_21 ) * ( * VAR_49 ) ) ; VAR_50 = ( unsigned TYPE_22 * ) METHOD_15 ( sizeof ( unsigned TYPE_23 ) * ( * VAR_51 ) ) ; if ( ( * VAR_52 == VAR_53 ) || ( * VAR_54 == VAR_55 ) || ( * VAR_56 == VAR_57 ) || ( VAR_58 == VAR_59 ) ) { METHOD_16 ( * VAR_60 ) ; METHOD_17 ( * VAR_61 ) ; METHOD_18 ( * VAR_62 ) ; METHOD_19 ( VAR_63 ) ; * VAR_64 = 0 ; * VAR_65 = 0 ; * VAR_66 = 0 ; METHOD_20 ( VAR_67 ) ; METHOD_21 ( VAR_68 , VAR_69 ) ; return ; } METHOD_22 ( * VAR_70 , 0 , sizeof ( unsigned TYPE_24 ) * ( ( TYPE_25 ) ( * VAR_71 ) + 1 ) ) ; METHOD_23 ( * VAR_72 , 0 , sizeof ( unsigned TYPE_26 ) * ( * VAR_73 ) ) ; METHOD_24 ( * VAR_74 , 0 , sizeof ( TYPE_27 ) * ( * VAR_75 ) ) ; METHOD_25 ( VAR_76 , 0 , sizeof ( unsigned TYPE_28 ) * ( * VAR_77 ) ) ; for ( VAR_78 = 0 ; VAR_79 <= * VAR_80 ; ++ VAR_81 ) ( * VAR_82 ) [ VAR_83 ] = ( * VAR_84 ) ; ( * VAR_85 ) [ 0 ] = 0 ; VAR_86 = 0 ; VAR_87 = 1 ; } else { METHOD_26 ( VAR_88 , VAR_89 ) ; METHOD_27 ( VAR_90 ) ; return ; } } else { unsigned TYPE_29 VAR_91 = 0 , VAR_92 = 0 ; TYPE_30 VAR_93 = 0 ; if ( METHOD_28 ( VAR_94 , ""%u%u%lf"" , & VAR_95 , & VAR_96 , & VAR_97 ) != 3 ) { METHOD_29 ( * VAR_98 ) ; METHOD_30 ( * VAR_99 ) ; METHOD_31 ( * VAR_100 ) ; METHOD_32 ( VAR_101 ) ; * VAR_102 = 0 ; * VAR_103 = 0 ; * VAR_104 = 0 ; METHOD_33 ( VAR_105 ) ; METHOD_34 ( VAR_106 , VAR_107 ) ; return ; } VAR_108 -- ; VAR_109 -- ; ( * VAR_110 ) [ VAR_111 ] = VAR_112 ; ( * VAR_113 ) [ VAR_114 ] = VAR_115 ; VAR_116 ++ ; VAR_117 [ VAR_118 ] = 1 ; ( * VAR_119 ) [ VAR_120 + 1 ] = VAR_121 ; } } } METHOD_35 ( VAR_122 ) ; if ( VAR_123 != ( * VAR_124 ) ) { METHOD_36 ( * VAR_125 ) ; METHOD_37 ( * VAR_126 ) ; METHOD_38 ( * VAR_127 ) ; METHOD_39 ( VAR_128 ) ; * VAR_129 = 0 ; * VAR_130 = 0 ; * VAR_131 = 0 ; METHOD_40 ( VAR_132 , VAR_133 ) ; return ; } if ( VAR_134 != VAR_135 ) { for ( VAR_136 = 0 ; VAR_137 < ( * VAR_138 ) ; VAR_139 ++ ) { if ( VAR_140 [ VAR_141 ] == 0 ) { ( * VAR_142 ) [ VAR_143 + 1 ] = ( * VAR_144 ) [ VAR_145 ] ; } } METHOD_41 ( VAR_146 ) ; } }",199
200,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 ; if ( VAR_7 -> VAR_8 ) { TYPE_6 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ;  TYPE_7 * VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ;  for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; ++ VAR_25 ) VAR_26 -> VAR_27 [ VAR_28 ] [ VAR_29 + VAR_30 ] = VAR_31 -> VAR_32 [ VAR_33 ] [ VAR_34 + VAR_35 ] * VAR_36 [ VAR_37 ] + VAR_38 -> VAR_39 [ VAR_40 ] [ VAR_41 ] * VAR_42 [ VAR_43 - 1 - VAR_44 ] ; } } VAR_45 = VAR_46 -> VAR_47 ; VAR_48 -> VAR_49 = VAR_50 - VAR_51 ; for ( VAR_52 = 0 ; VAR_53 < VAR_54 -> VAR_55 ; ++ VAR_56 ) for ( VAR_57 = 0 ; VAR_58 + VAR_59 < VAR_60 ; ++ VAR_61 ) VAR_62 -> VAR_63 [ VAR_64 ] [ VAR_65 ] = VAR_66 -> VAR_67 [ VAR_68 ] [ VAR_69 + VAR_70 ] ; if ( ! VAR_71 ) return 0 ; if ( VAR_72 < VAR_73 ) VAR_74 = VAR_75 ; VAR_76 -> VAR_77 += VAR_78 - VAR_79 ; return VAR_80 - VAR_81 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 ; if ( VAR_7 -> VAR_8 ) { TYPE_6 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ; TYPE_7 * VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; ++ VAR_25 ) VAR_26 -> VAR_27 [ VAR_28 ] [ VAR_29 + VAR_30 ] = VAR_31 -> VAR_32 [ VAR_33 ] [ VAR_34 + VAR_35 ] * VAR_36 [ VAR_37 ] + VAR_38 -> VAR_39 [ VAR_40 ] [ VAR_41 ] * VAR_42 [ VAR_43 - 1 - VAR_44 ] ; } } VAR_45 = VAR_46 -> VAR_47 ; VAR_48 -> VAR_49 = VAR_50 - VAR_51 ; for ( VAR_52 = 0 ; VAR_53 < VAR_54 -> VAR_55 ; ++ VAR_56 ) for ( VAR_57 = 0 ; VAR_58 + VAR_59 < VAR_60 ; ++ VAR_61 ) VAR_62 -> VAR_63 [ VAR_64 ] [ VAR_65 ] = VAR_66 -> VAR_67 [ VAR_68 ] [ VAR_69 + VAR_70 ] ; if ( ! VAR_71 ) return 0 ; if ( VAR_72 < VAR_73 ) VAR_74 = VAR_75 ; VAR_76 -> VAR_77 += VAR_78 - VAR_79 ; return VAR_80 - VAR_81 ; }",200
201,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 , VAR_4 = VAR_5 , VAR_6 = VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; VAR_10 * TYPE_7 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 , VAR_13 ; METHOD_1 ( VAR_14 != ( const TYPE_10 * ) VAR_15 ) ; METHOD_2 ( VAR_16 -> VAR_17 == VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) ( TYPE_11 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , ""%s"" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_12 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; VAR_33 = METHOD_8 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = METHOD_9 ( VAR_41 ) ; return ( ( TYPE_13 * ) VAR_42 ) ; }  if ( METHOD_10 ( VAR_43 , & VAR_44 ) != VAR_45 ) {  METHOD_11 ( VAR_46 , ""ImproperImageHeader"" ) ;  }  if ( VAR_47 . VAR_48 & VAR_49 ) VAR_50 = VAR_51 ; if ( VAR_52 . VAR_53 & VAR_54 && VAR_55 . VAR_56 > 0 ) VAR_57 = VAR_58 ; ( TYPE_14 ) METHOD_12 ( VAR_59 , 128 , VAR_60 ) ; if ( VAR_61 . VAR_62 . VAR_63 & VAR_64 ) { VAR_65 = VAR_66 ; if ( VAR_67 . VAR_68 . VAR_69 & VAR_70 ) { VAR_71 = VAR_72 ; TYPE_15 = VAR_73 ; } else { VAR_74 = VAR_75 ; TYPE_16 = VAR_76 ; } } else if ( VAR_77 . VAR_78 . VAR_79 & VAR_80 ) { VAR_81 = VAR_82 ; if ( VAR_83 . VAR_84 . VAR_85 & VAR_86 ) { METHOD_13 ( VAR_87 , ""ImageTypeNotSupported"" ) ; } else { VAR_88 = VAR_89 ; TYPE_17 = VAR_90 ; } } else if ( VAR_91 . VAR_92 . VAR_93 & VAR_94 ) { switch ( VAR_95 . VAR_96 . VAR_97 ) { case VAR_98 : { VAR_99 = VAR_100 ; VAR_101 = VAR_102 ; TYPE_18 = VAR_103 ; break ; } case VAR_104 : { VAR_105 = VAR_106 ; VAR_107 = VAR_108 ; TYPE_19 = VAR_109 ; break ; } case VAR_110 : { VAR_111 = VAR_112 ; VAR_113 = VAR_114 ; TYPE_20 = VAR_115 ; break ; } default : { METHOD_14 ( VAR_116 , ""ImageTypeNotSupported"" ) ; } } } else { METHOD_15 ( VAR_117 , ""ImageTypeNotSupported"" ) ; } VAR_118 = 1 ; if ( VAR_119 ) { VAR_120 = 0 ; if ( VAR_121 . VAR_122 & VAR_123 ) VAR_124 ++ ; if ( VAR_125 . VAR_126 & VAR_127 ) VAR_128 ++ ; if ( VAR_129 . VAR_130 & VAR_131 ) VAR_132 ++ ; if ( VAR_133 . VAR_134 & VAR_135 ) VAR_136 ++ ; if ( VAR_137 . VAR_138 & VAR_139 ) VAR_140 ++ ; if ( VAR_141 . VAR_142 & VAR_143 ) VAR_144 ++ ; } if ( VAR_145 ) VAR_146 = VAR_147 . VAR_148 ;  for ( VAR_149 = 0 ; VAR_150 < VAR_151 ; VAR_152 ++ )  { if ( VAR_153 != 0 ) { METHOD_16 ( VAR_154 , VAR_155 , VAR_156 ) ; if ( METHOD_17 ( VAR_157 ) == ( TYPE_21 * ) VAR_158 ) return ( METHOD_18 ( VAR_159 ) ) ; VAR_160 = METHOD_19 ( VAR_161 ) ; } VAR_162 -> VAR_163 = VAR_164 ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 -> VAR_169 = VAR_170 . VAR_171 ; VAR_172 -> VAR_173 = VAR_174 . VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; VAR_179 -> VAR_180 = VAR_181 ; VAR_182 -> VAR_183 = 8 ; if ( VAR_184 -> VAR_185 != VAR_186 ) { ( TYPE_22 ) METHOD_20 ( VAR_187 ) ; return ( METHOD_21 ( VAR_188 ) ) ; } VAR_189 = METHOD_22 ( VAR_190 , VAR_191 -> VAR_192 , VAR_193 -> VAR_194 , VAR_195 ) ; if ( VAR_196 == VAR_197 ) return ( METHOD_23 ( VAR_198 ) ) ; if ( ( TYPE_23 ) ( VAR_199 , & VAR_200 , VAR_201 ) != VAR_202 ) { ( TYPE_24 ) METHOD_24 ( VAR_203 ) ; return ( METHOD_25 ( VAR_204 ) ) ; } } ( TYPE_25 ) METHOD_26 ( VAR_205 ) ; return ( METHOD_27 ( VAR_206 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 , VAR_4 = VAR_5 , VAR_6 = VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; VAR_10 * TYPE_7 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 , VAR_13 ; METHOD_1 ( VAR_14 != ( const TYPE_10 * ) VAR_15 ) ; METHOD_2 ( VAR_16 -> VAR_17 == VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) ( TYPE_11 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , ""%s"" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_12 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; VAR_33 = METHOD_8 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = METHOD_9 ( VAR_41 ) ; return ( ( TYPE_13 * ) VAR_42 ) ; } if ( METHOD_10 ( VAR_43 , & VAR_44 ) != VAR_45 ) { METHOD_11 ( VAR_46 , ""ImproperImageHeader"" ) ; } if ( VAR_47 . VAR_48 & VAR_49 ) VAR_50 = VAR_51 ; if ( VAR_52 . VAR_53 & VAR_54 && VAR_55 . VAR_56 > 0 ) VAR_57 = VAR_58 ; ( TYPE_14 ) METHOD_12 ( VAR_59 , 128 , VAR_60 ) ; if ( VAR_61 . VAR_62 . VAR_63 & VAR_64 ) { VAR_65 = VAR_66 ; if ( VAR_67 . VAR_68 . VAR_69 & VAR_70 ) { VAR_71 = VAR_72 ; TYPE_15 = VAR_73 ; } else { VAR_74 = VAR_75 ; TYPE_16 = VAR_76 ; } } else if ( VAR_77 . VAR_78 . VAR_79 & VAR_80 ) { VAR_81 = VAR_82 ; if ( VAR_83 . VAR_84 . VAR_85 & VAR_86 ) { METHOD_13 ( VAR_87 , ""ImageTypeNotSupported"" ) ; } else { VAR_88 = VAR_89 ; TYPE_17 = VAR_90 ; } } else if ( VAR_91 . VAR_92 . VAR_93 & VAR_94 ) { switch ( VAR_95 . VAR_96 . VAR_97 ) { case VAR_98 : { VAR_99 = VAR_100 ; VAR_101 = VAR_102 ; TYPE_18 = VAR_103 ; break ; } case VAR_104 : { VAR_105 = VAR_106 ; VAR_107 = VAR_108 ; TYPE_19 = VAR_109 ; break ; } case VAR_110 : { VAR_111 = VAR_112 ; VAR_113 = VAR_114 ; TYPE_20 = VAR_115 ; break ; } default : { METHOD_14 ( VAR_116 , ""ImageTypeNotSupported"" ) ; } } } else { METHOD_15 ( VAR_117 , ""ImageTypeNotSupported"" ) ; } VAR_118 = 1 ; if ( VAR_119 ) { VAR_120 = 0 ; if ( VAR_121 . VAR_122 & VAR_123 ) VAR_124 ++ ; if ( VAR_125 . VAR_126 & VAR_127 ) VAR_128 ++ ; if ( VAR_129 . VAR_130 & VAR_131 ) VAR_132 ++ ; if ( VAR_133 . VAR_134 & VAR_135 ) VAR_136 ++ ; if ( VAR_137 . VAR_138 & VAR_139 ) VAR_140 ++ ; if ( VAR_141 . VAR_142 & VAR_143 ) VAR_144 ++ ; } if ( VAR_145 ) VAR_146 = VAR_147 . VAR_148 ; for ( VAR_149 = 0 ; VAR_150 < VAR_151 ; VAR_152 ++ ) { if ( VAR_153 != 0 ) { METHOD_16 ( VAR_154 , VAR_155 , VAR_156 ) ; if ( METHOD_17 ( VAR_157 ) == ( TYPE_21 * ) VAR_158 ) return ( METHOD_18 ( VAR_159 ) ) ; VAR_160 = METHOD_19 ( VAR_161 ) ; } VAR_162 -> VAR_163 = VAR_164 ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 -> VAR_169 = VAR_170 . VAR_171 ; VAR_172 -> VAR_173 = VAR_174 . VAR_175 ; VAR_176 -> VAR_177 = VAR_178 ; VAR_179 -> VAR_180 = VAR_181 ; VAR_182 -> VAR_183 = 8 ; if ( VAR_184 -> VAR_185 != VAR_186 ) { ( TYPE_22 ) METHOD_20 ( VAR_187 ) ; return ( METHOD_21 ( VAR_188 ) ) ; } VAR_189 = METHOD_22 ( VAR_190 , VAR_191 -> VAR_192 , VAR_193 -> VAR_194 , VAR_195 ) ; if ( VAR_196 == VAR_197 ) return ( METHOD_23 ( VAR_198 ) ) ; if ( ( TYPE_23 ) ( VAR_199 , & VAR_200 , VAR_201 ) != VAR_202 ) { ( TYPE_24 ) METHOD_24 ( VAR_203 ) ; return ( METHOD_25 ( VAR_204 ) ) ; } } ( TYPE_25 ) METHOD_26 ( VAR_205 ) ; return ( METHOD_27 ( VAR_206 ) ) ; }",201
202,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 , VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_13 * VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_14 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_15 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_16 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_17 * ) VAR_45 ) ; } VAR_46 . VAR_47 = METHOD_10 ( VAR_48 ) ; do { if ( VAR_49 . VAR_50 != 0x01DA ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 . VAR_53 = ( unsigned TYPE_18 ) METHOD_12 ( VAR_54 ) ; switch ( VAR_55 . VAR_56 ) { case 0x00 : VAR_57 -> VAR_58 = VAR_59 ; break ; case 0x01 : VAR_60 -> VAR_61 = VAR_62 ; break ; default : METHOD_13 ( VAR_63 , ""ImproperImageHeader"" ) ; } VAR_64 . VAR_65 = ( unsigned TYPE_19 ) METHOD_14 ( VAR_66 ) ; if ( ( VAR_67 . VAR_68 == 0 ) || ( VAR_69 . VAR_70 > 2 ) ) METHOD_15 ( VAR_71 , ""ImproperImageHeader"" ) ;  VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ;  VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == 0 ) || ( VAR_86 . VAR_87 > 4 ) ) METHOD_20 ( VAR_88 , ""ImproperImageHeader"" ) ; VAR_89 . VAR_90 = METHOD_21 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_22 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_23 ( VAR_97 ) ; VAR_98 = METHOD_24 ( VAR_99 , sizeof ( VAR_100 . VAR_101 ) , ( unsigned TYPE_20 * ) VAR_102 . VAR_103 ) ; if ( ( TYPE_21 ) VAR_104 != sizeof ( VAR_105 . VAR_106 ) ) METHOD_25 ( VAR_107 , ""ImproperImageHeader"" ) ; VAR_108 . VAR_109 [ sizeof ( VAR_110 . VAR_111 ) - 1 ] = '\\0' ; if ( * VAR_112 . VAR_113 != '\\0' ) ( TYPE_22 ) METHOD_26 ( VAR_114 , ""label"" , VAR_115 . VAR_116 , VAR_117 ) ; VAR_118 . VAR_119 = METHOD_27 ( VAR_120 ) ; if ( VAR_121 . VAR_122 != 0 ) METHOD_28 ( VAR_123 , ""ImproperImageHeader"" ) ; VAR_124 = METHOD_29 ( VAR_125 , sizeof ( VAR_126 . VAR_127 ) , VAR_128 . VAR_129 ) ; if ( ( TYPE_23 ) VAR_130 != sizeof ( VAR_131 . VAR_132 ) ) METHOD_30 ( VAR_133 , ""ImproperImageHeader"" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = ( TYPE_24 ) METHOD_31 ( VAR_144 . VAR_145 , VAR_146 ) ; if ( VAR_147 . VAR_148 == 0 ) VAR_149 -> VAR_150 = ( TYPE_25 ) METHOD_32 ( ( TYPE_26 ) 8 * VAR_151 . VAR_152 , VAR_153 ) ; if ( VAR_154 . VAR_155 < 3 ) { VAR_156 -> VAR_157 = VAR_158 ; VAR_159 -> VAR_160 = ( TYPE_27 ) ( VAR_161 . VAR_162 > 1 ? 65535 : 256 ) ; } if ( ( VAR_163 -> VAR_164 != VAR_165 ) && ( VAR_166 -> VAR_167 != 0 ) ) if ( VAR_168 -> VAR_169 >= ( VAR_170 -> VAR_171 + VAR_172 -> VAR_173 - 1 ) ) break ; VAR_174 = METHOD_33 ( VAR_175 , VAR_176 -> VAR_177 , VAR_178 -> VAR_179 , VAR_180 ) ; if ( VAR_181 == VAR_182 ) return ( METHOD_34 ( VAR_183 ) ) ; VAR_184 = ( TYPE_28 ) VAR_185 . VAR_186 ; VAR_187 = ( TYPE_29 ) VAR_188 . VAR_189 * VAR_190 . VAR_191 ; if ( ( 4 * VAR_192 * VAR_193 ) != ( ( TYPE_30 ) ( TYPE_31 ) ( 4 * VAR_194 * VAR_195 ) ) ) METHOD_35 ( VAR_196 , ""MemoryAllocationFailed"" ) ; VAR_197 = METHOD_36 ( VAR_198 . VAR_199 , VAR_200 . VAR_201 * 4 * VAR_202 * sizeof ( * VAR_203 ) ) ; if ( VAR_204 == ( TYPE_32 * ) VAR_205 ) METHOD_37 ( VAR_206 , ""MemoryAllocationFailed"" ) ; VAR_207 = ( unsigned TYPE_33 * ) METHOD_38 ( VAR_208 ) ; if ( ( TYPE_34 ) VAR_209 . VAR_210 != 0x01 ) { unsigned TYPE_35 * VAR_211 ; VAR_212 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_213 . VAR_214 , VAR_215 * sizeof ( * VAR_216 ) ) ; if ( VAR_217 == ( unsigned TYPE_37 * ) VAR_218 ) METHOD_40 ( VAR_219 , ""MemoryAllocationFailed"" ) ; for ( VAR_220 = 0 ; VAR_221 < ( TYPE_38 ) VAR_222 . VAR_223 ; VAR_224 ++ ) { VAR_225 = VAR_226 + VAR_227 * VAR_228 ; for ( VAR_229 = 0 ; VAR_230 < ( TYPE_39 ) VAR_231 . VAR_232 ; VAR_233 ++ ) { VAR_234 = METHOD_41 ( VAR_235 , VAR_236 * VAR_237 . VAR_238 , VAR_239 ) ; if ( METHOD_42 ( VAR_240 ) != VAR_241 ) break ; if ( VAR_242 == 2 ) for ( VAR_243 = 0 ; VAR_244 < ( TYPE_40 ) VAR_245 . VAR_246 ; VAR_247 ++ ) { * VAR_248 = VAR_249 [ 2 * VAR_250 ] ; * ( VAR_251 + 1 ) = VAR_252 [ 2 * VAR_253 + 1 ] ; VAR_254 += 8 ; } else for ( VAR_255 = 0 ; VAR_256 < ( TYPE_41 ) VAR_257 . VAR_258 ; VAR_259 ++ ) { * VAR_260 = VAR_261 [ VAR_262 ] ; VAR_263 += 4 ; } } } VAR_264 = ( unsigned TYPE_42 * ) METHOD_43 ( VAR_265 ) ; } else { TYPE_43 * VAR_266 ; TYPE_44 * VAR_267 ; TYPE_45 VAR_268 , * VAR_269 ; unsigned TYPE_46 * VAR_270 ; unsigned TYPE_47 VAR_271 ; VAR_272 = ( TYPE_48 * ) METHOD_44 ( ( TYPE_49 ) VAR_273 . VAR_274 , VAR_275 . VAR_276 * sizeof ( * VAR_277 ) ) ; VAR_278 = ( TYPE_50 * ) METHOD_45 ( VAR_279 . VAR_280 , VAR_281 . VAR_282 * sizeof ( * VAR_283 ) ) ; VAR_284 = METHOD_46 ( ( TYPE_51 ) VAR_285 . VAR_286 + 10UL , 4UL * sizeof ( * VAR_287 ) ) ; if ( ( VAR_288 == ( TYPE_52 * ) VAR_289 ) || ( VAR_290 == ( TYPE_53 * ) VAR_291 ) || ( VAR_292 == ( TYPE_54 * ) VAR_293 ) ) { if ( VAR_294 == ( TYPE_55 * ) VAR_295 ) VAR_296 = ( TYPE_56 * ) METHOD_47 ( VAR_297 ) ; if ( VAR_298 == ( TYPE_57 * ) VAR_299 ) VAR_300 = ( TYPE_58 * ) METHOD_48 ( VAR_301 ) ; if ( VAR_302 == ( TYPE_59 * ) VAR_303 ) VAR_304 = METHOD_49 ( VAR_305 ) ; METHOD_50 ( VAR_306 , ""MemoryAllocationFailed"" ) ; } VAR_307 = ( unsigned TYPE_60 * ) METHOD_51 ( VAR_308 ) ; for ( VAR_309 = 0 ; VAR_310 < ( TYPE_61 ) ( VAR_311 . VAR_312 * VAR_313 . VAR_314 ) ; VAR_315 ++ ) VAR_316 [ VAR_317 ] = ( TYPE_62 ) METHOD_52 ( VAR_318 ) ; for ( VAR_319 = 0 ; VAR_320 < ( TYPE_63 ) ( VAR_321 . VAR_322 * VAR_323 . VAR_324 ) ; VAR_325 ++ ) { VAR_326 [ VAR_327 ] = METHOD_53 ( VAR_328 ) ; if ( VAR_329 [ VAR_330 ] > ( 4 * ( TYPE_64 ) VAR_331 . VAR_332 + 10 ) ) METHOD_54 ( VAR_333 , ""ImproperImageHeader"" ) ; } VAR_334 = 0 ; VAR_335 = 0 ; for ( VAR_336 = 0 ; ( ( VAR_337 < ( TYPE_65 ) VAR_338 . VAR_339 ) && ( VAR_340 == 0 ) ) ; VAR_341 ++ ) for ( VAR_342 = 0 ; ( ( VAR_343 < ( TYPE_66 ) VAR_344 . VAR_345 ) && ( VAR_346 == 0 ) ) ; VAR_347 ++ ) { if ( VAR_348 [ VAR_349 + VAR_350 * VAR_351 . VAR_352 ] < VAR_353 ) VAR_354 = 1 ; VAR_355 = VAR_356 [ VAR_357 + VAR_358 * VAR_359 . VAR_360 ] ; } VAR_361 = ( TYPE_67 ) METHOD_55 ( VAR_362 ) ; if ( VAR_363 == 1 ) { for ( VAR_364 = 0 ; VAR_365 < ( TYPE_68 ) VAR_366 . VAR_367 ; VAR_368 ++ ) { VAR_369 = VAR_370 ; for ( VAR_371 = 0 ; VAR_372 < ( TYPE_69 ) VAR_373 . VAR_374 ; VAR_375 ++ ) { if ( VAR_376 != VAR_377 [ VAR_378 + VAR_379 * VAR_380 . VAR_381 ] ) { VAR_382 = VAR_383 [ VAR_384 + VAR_385 * VAR_386 . VAR_387 ] ; VAR_388 = ( TYPE_70 ) METHOD_56 ( VAR_389 , ( TYPE_71 ) VAR_390 , VAR_391 ) ; } VAR_392 = METHOD_57 ( VAR_393 , ( TYPE_72 ) VAR_394 [ VAR_395 + VAR_396 * VAR_397 . VAR_398 ] , VAR_399 ) ; if ( METHOD_58 ( VAR_400 ) != VAR_401 ) break ; VAR_402 += ( TYPE_73 ) VAR_403 [ VAR_404 + VAR_405 * VAR_406 . VAR_407 ] ; VAR_408 = METHOD_59 ( VAR_409 , ( TYPE_74 ) ( VAR_410 [ VAR_411 + VAR_412 * VAR_413 . VAR_414 ] / VAR_415 ) , VAR_416 , ( TYPE_75 ) VAR_417 . VAR_418 , VAR_419 + VAR_420 * VAR_421 ) ; if ( VAR_422 == VAR_423 ) METHOD_60 ( VAR_424 , ""ImproperImageHeader"" ) ; VAR_425 += ( VAR_426 . VAR_427 * 4 * VAR_428 ) ; } } } else { TYPE_76 VAR_429 ; VAR_430 = METHOD_61 ( VAR_431 ) ; VAR_432 = VAR_433 ; for ( VAR_434 = 0 ; VAR_435 < ( TYPE_77 ) VAR_436 . VAR_437 ; VAR_438 ++ ) { for ( VAR_439 = 0 ; VAR_440 < ( TYPE_78 ) VAR_441 . VAR_442 ; VAR_443 ++ ) { if ( VAR_444 != VAR_445 [ VAR_446 + VAR_447 * VAR_448 . VAR_449 ] ) { VAR_450 = VAR_451 [ VAR_452 + VAR_453 * VAR_454 . VAR_455 ] ; VAR_456 = ( TYPE_79 ) METHOD_62 ( VAR_457 , ( TYPE_80 ) VAR_458 , VAR_459 ) ; } VAR_460 = METHOD_63 ( VAR_461 , ( TYPE_81 ) VAR_462 [ VAR_463 + VAR_464 * VAR_465 . VAR_466 ] , VAR_467 ) ; if ( METHOD_64 ( VAR_468 ) != VAR_469 ) break ; VAR_470 += ( TYPE_82 ) VAR_471 [ VAR_472 + VAR_473 * VAR_474 . VAR_475 ] ; VAR_476 = METHOD_65 ( VAR_477 , ( TYPE_83 ) ( VAR_478 [ VAR_479 + VAR_480 * VAR_481 . VAR_482 ] / VAR_483 ) , VAR_484 , ( TYPE_84 ) VAR_485 . VAR_486 , VAR_487 + VAR_488 * VAR_489 ) ; if ( VAR_490 == VAR_491 ) METHOD_66 ( VAR_492 , ""ImproperImageHeader"" ) ; } VAR_493 += ( VAR_494 . VAR_495 * 4 * VAR_496 ) ; } VAR_497 = ( TYPE_85 ) METHOD_67 ( VAR_498 , VAR_499 , VAR_500 ) ; } VAR_501 = METHOD_68 ( VAR_502 ) ; VAR_503 = ( TYPE_86 * ) METHOD_69 ( VAR_504 ) ; VAR_505 = ( TYPE_87 * ) METHOD_70 ( VAR_506 ) ; } VAR_507 -> VAR_508 = VAR_509 . VAR_510 == 4 ? VAR_511 : VAR_512 ; VAR_513 -> VAR_514 = VAR_515 . VAR_516 ; VAR_517 -> VAR_518 = VAR_519 . VAR_520 ; if ( VAR_521 -> VAR_522 == VAR_523 ) { if ( VAR_524 == 2 ) { for ( VAR_525 = 0 ; VAR_526 < ( TYPE_88 ) VAR_527 -> VAR_528 ; VAR_529 ++ ) { VAR_530 = VAR_531 + ( VAR_532 -> VAR_533 - VAR_534 - 1 ) * 8 * VAR_535 -> VAR_536 ; VAR_537 = METHOD_71 ( VAR_538 , 0 , VAR_539 , VAR_540 -> VAR_541 , 1 , VAR_542 ) ; if ( VAR_543 == ( TYPE_89 * ) VAR_544 ) break ; for ( VAR_545 = 0 ; VAR_546 < ( TYPE_90 ) VAR_547 -> VAR_548 ; VAR_549 ++ ) { METHOD_72 ( VAR_550 , METHOD_73 ( ( unsigned TYPE_91 ) ( ( * ( VAR_551 + 0 ) << 8 ) | ( * ( VAR_552 + 1 ) ) ) ) , VAR_553 ) ; METHOD_74 ( VAR_554 , METHOD_75 ( ( unsigned TYPE_92 ) ( ( * ( VAR_555 + 2 ) << 8 ) | ( * ( VAR_556 + 3 ) ) ) ) , VAR_557 ) ; METHOD_76 ( VAR_558 , METHOD_77 ( ( unsigned TYPE_93 ) ( ( * ( VAR_559 + 4 ) << 8 ) | ( * ( VAR_560 + 5 ) ) ) ) , VAR_561 ) ; METHOD_78 ( VAR_562 , VAR_563 , VAR_564 ) ; if ( VAR_565 -> VAR_566 != VAR_567 ) METHOD_79 ( VAR_568 , METHOD_80 ( ( unsigned TYPE_94 ) ( ( * ( VAR_569 + 6 ) << 8 ) | ( * ( VAR_570 + 7 ) ) ) ) , VAR_571 ) ; VAR_572 += 8 ; VAR_573 += METHOD_81 ( VAR_574 ) ; } if ( METHOD_82 ( VAR_575 , VAR_576 ) == VAR_577 ) break ; if ( VAR_578 -> VAR_579 == ( TYPE_95 * ) VAR_580 ) { VAR_581 = METHOD_83 ( VAR_582 , VAR_583 , ( TYPE_96 ) VAR_584 , VAR_585 -> VAR_586 ) ; if ( VAR_587 == VAR_588 ) break ; } } } else for ( VAR_589 = 0 ; VAR_590 < ( TYPE_97 ) VAR_591 -> VAR_592 ; VAR_593 ++ ) { VAR_594 = VAR_595 + ( VAR_596 -> VAR_597 - VAR_598 - 1 ) * 4 * VAR_599 -> VAR_600 ; VAR_601 = METHOD_84 ( VAR_602 , 0 , VAR_603 , VAR_604 -> VAR_605 , 1 , VAR_606 ) ; if ( VAR_607 == ( TYPE_98 * ) VAR_608 ) break ; for ( VAR_609 = 0 ; VAR_610 < ( TYPE_99 ) VAR_611 -> VAR_612 ; VAR_613 ++ ) { METHOD_85 ( VAR_614 , METHOD_86 ( * VAR_615 ) , VAR_616 ) ; METHOD_87 ( VAR_617 , METHOD_88 ( * ( VAR_618 + 1 ) ) , VAR_619 ) ; METHOD_89 ( VAR_620 , METHOD_90 ( * ( VAR_621 + 2 ) ) , VAR_622 ) ; METHOD_91 ( VAR_623 , VAR_624 , VAR_625 ) ; if ( VAR_626 -> VAR_627 != VAR_628 ) METHOD_92 ( VAR_629 , METHOD_93 ( * ( VAR_630 + 3 ) ) , VAR_631 ) ; VAR_632 += 4 ; VAR_633 += METHOD_94 ( VAR_634 ) ; } if ( METHOD_95 ( VAR_635 , VAR_636 ) == VAR_637 ) break ; if ( VAR_638 -> VAR_639 == ( TYPE_100 * ) VAR_640 ) { VAR_641 = METHOD_96 ( VAR_642 , VAR_643 , ( TYPE_101 ) VAR_644 , VAR_645 -> VAR_646 ) ; if ( VAR_647 == VAR_648 ) break ; } } } else { if ( METHOD_97 ( VAR_649 , VAR_650 -> VAR_651 , VAR_652 ) == VAR_653 ) METHOD_98 ( VAR_654 , ""MemoryAllocationFailed"" ) ; if ( VAR_655 == 2 ) { for ( VAR_656 = 0 ; VAR_657 < ( TYPE_102 ) VAR_658 -> VAR_659 ; VAR_660 ++ ) { VAR_661 = VAR_662 + ( VAR_663 -> VAR_664 - VAR_665 - 1 ) * 8 * VAR_666 -> VAR_667 ; VAR_668 = METHOD_99 ( VAR_669 , 0 , VAR_670 , VAR_671 -> VAR_672 , 1 , VAR_673 ) ; if ( VAR_674 == ( TYPE_103 * ) VAR_675 ) break ; for ( VAR_676 = 0 ; VAR_677 < ( TYPE_104 ) VAR_678 -> VAR_679 ; VAR_680 ++ ) { VAR_681 = ( * VAR_682 << 8 ) ; VAR_683 |= ( * ( VAR_684 + 1 ) ) ; METHOD_100 ( VAR_685 , ( TYPE_105 ) VAR_686 , VAR_687 ) ; VAR_688 += 8 ; VAR_689 += METHOD_101 ( VAR_690 ) ; } if ( METHOD_102 ( VAR_691 , VAR_692 ) == VAR_693 ) break ; if ( VAR_694 -> VAR_695 == ( TYPE_106 * ) VAR_696 ) { VAR_697 = METHOD_103 ( VAR_698 , VAR_699 , ( TYPE_107 ) VAR_700 , VAR_701 -> VAR_702 ) ; if ( VAR_703 == VAR_704 ) break ; } } } else for ( VAR_705 = 0 ; VAR_706 < ( TYPE_108 ) VAR_707 -> VAR_708 ; VAR_709 ++ ) { VAR_710 = VAR_711 + ( VAR_712 -> VAR_713 - VAR_714 - 1 ) * 4 * VAR_715 -> VAR_716 ; VAR_717 = METHOD_104 ( VAR_718 , 0 , VAR_719 , VAR_720 -> VAR_721 , 1 , VAR_722 ) ; if ( VAR_723 == ( TYPE_109 * ) VAR_724 ) break ; for ( VAR_725 = 0 ; VAR_726 < ( TYPE_110 ) VAR_727 -> VAR_728 ; VAR_729 ++ ) { METHOD_105 ( VAR_730 , * VAR_731 , VAR_732 ) ; VAR_733 += 4 ; VAR_734 += METHOD_106 ( VAR_735 ) ; } if ( METHOD_107 ( VAR_736 , VAR_737 ) == VAR_738 ) break ; if ( VAR_739 -> VAR_740 == ( TYPE_111 * ) VAR_741 ) { VAR_742 = METHOD_108 ( VAR_743 , VAR_744 , ( TYPE_112 ) VAR_745 , VAR_746 -> VAR_747 ) ; if ( VAR_748 == VAR_749 ) break ; } } ( TYPE_113 ) METHOD_109 ( VAR_750 , VAR_751 ) ; } VAR_752 = METHOD_110 ( VAR_753 ) ; if ( METHOD_111 ( VAR_754 ) != VAR_755 ) { METHOD_112 ( VAR_756 , VAR_757 , ""UnexpectedEndOfFile"" , VAR_758 -> VAR_759 ) ; break ; } if ( VAR_760 -> VAR_761 != 0 ) if ( VAR_762 -> VAR_763 >= ( VAR_764 -> VAR_765 + VAR_766 -> VAR_767 - 1 ) ) break ; VAR_768 . VAR_769 = METHOD_113 ( VAR_770 ) ; if ( VAR_771 . VAR_772 == 0x01DA ) { METHOD_114 ( VAR_773 , VAR_774 , VAR_775 ) ; if ( METHOD_115 ( VAR_776 ) == ( TYPE_114 * ) VAR_777 ) { VAR_778 = METHOD_116 ( VAR_779 ) ; return ( ( TYPE_115 * ) VAR_780 ) ; } VAR_781 = METHOD_117 ( VAR_782 ) ; VAR_783 = METHOD_118 ( VAR_784 , VAR_785 , METHOD_119 ( VAR_786 ) , METHOD_120 ( VAR_787 ) ) ; if ( VAR_788 == VAR_789 ) break ; } } while ( VAR_790 . VAR_791 == 0x01DA ) ; ( TYPE_116 ) METHOD_121 ( VAR_792 ) ; return ( METHOD_122 ( VAR_793 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 , VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_13 * VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_14 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_15 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_16 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_17 * ) VAR_45 ) ; } VAR_46 . VAR_47 = METHOD_10 ( VAR_48 ) ; do { if ( VAR_49 . VAR_50 != 0x01DA ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 . VAR_53 = ( unsigned TYPE_18 ) METHOD_12 ( VAR_54 ) ; switch ( VAR_55 . VAR_56 ) { case 0x00 : VAR_57 -> VAR_58 = VAR_59 ; break ; case 0x01 : VAR_60 -> VAR_61 = VAR_62 ; break ; default : METHOD_13 ( VAR_63 , ""ImproperImageHeader"" ) ; } VAR_64 . VAR_65 = ( unsigned TYPE_19 ) METHOD_14 ( VAR_66 ) ; if ( ( VAR_67 . VAR_68 == 0 ) || ( VAR_69 . VAR_70 > 2 ) ) METHOD_15 ( VAR_71 , ""ImproperImageHeader"" ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == 0 ) || ( VAR_86 . VAR_87 > 4 ) ) METHOD_20 ( VAR_88 , ""ImproperImageHeader"" ) ; VAR_89 . VAR_90 = METHOD_21 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_22 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_23 ( VAR_97 ) ; VAR_98 = METHOD_24 ( VAR_99 , sizeof ( VAR_100 . VAR_101 ) , ( unsigned TYPE_20 * ) VAR_102 . VAR_103 ) ; if ( ( TYPE_21 ) VAR_104 != sizeof ( VAR_105 . VAR_106 ) ) METHOD_25 ( VAR_107 , ""ImproperImageHeader"" ) ; VAR_108 . VAR_109 [ sizeof ( VAR_110 . VAR_111 ) - 1 ] = '\\0' ; if ( * VAR_112 . VAR_113 != '\\0' ) ( TYPE_22 ) METHOD_26 ( VAR_114 , ""label"" , VAR_115 . VAR_116 , VAR_117 ) ; VAR_118 . VAR_119 = METHOD_27 ( VAR_120 ) ; if ( VAR_121 . VAR_122 != 0 ) METHOD_28 ( VAR_123 , ""ImproperImageHeader"" ) ; VAR_124 = METHOD_29 ( VAR_125 , sizeof ( VAR_126 . VAR_127 ) , VAR_128 . VAR_129 ) ; if ( ( TYPE_23 ) VAR_130 != sizeof ( VAR_131 . VAR_132 ) ) METHOD_30 ( VAR_133 , ""ImproperImageHeader"" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = ( TYPE_24 ) METHOD_31 ( VAR_144 . VAR_145 , VAR_146 ) ; if ( VAR_147 . VAR_148 == 0 ) VAR_149 -> VAR_150 = ( TYPE_25 ) METHOD_32 ( ( TYPE_26 ) 8 * VAR_151 . VAR_152 , VAR_153 ) ; if ( VAR_154 . VAR_155 < 3 ) { VAR_156 -> VAR_157 = VAR_158 ; VAR_159 -> VAR_160 = ( TYPE_27 ) ( VAR_161 . VAR_162 > 1 ? 65535 : 256 ) ; } if ( ( VAR_163 -> VAR_164 != VAR_165 ) && ( VAR_166 -> VAR_167 != 0 ) ) if ( VAR_168 -> VAR_169 >= ( VAR_170 -> VAR_171 + VAR_172 -> VAR_173 - 1 ) ) break ; VAR_174 = METHOD_33 ( VAR_175 , VAR_176 -> VAR_177 , VAR_178 -> VAR_179 , VAR_180 ) ; if ( VAR_181 == VAR_182 ) return ( METHOD_34 ( VAR_183 ) ) ; VAR_184 = ( TYPE_28 ) VAR_185 . VAR_186 ; VAR_187 = ( TYPE_29 ) VAR_188 . VAR_189 * VAR_190 . VAR_191 ; if ( ( 4 * VAR_192 * VAR_193 ) != ( ( TYPE_30 ) ( TYPE_31 ) ( 4 * VAR_194 * VAR_195 ) ) ) METHOD_35 ( VAR_196 , ""MemoryAllocationFailed"" ) ; VAR_197 = METHOD_36 ( VAR_198 . VAR_199 , VAR_200 . VAR_201 * 4 * VAR_202 * sizeof ( * VAR_203 ) ) ; if ( VAR_204 == ( TYPE_32 * ) VAR_205 ) METHOD_37 ( VAR_206 , ""MemoryAllocationFailed"" ) ; VAR_207 = ( unsigned TYPE_33 * ) METHOD_38 ( VAR_208 ) ; if ( ( TYPE_34 ) VAR_209 . VAR_210 != 0x01 ) { unsigned TYPE_35 * VAR_211 ; VAR_212 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_213 . VAR_214 , VAR_215 * sizeof ( * VAR_216 ) ) ; if ( VAR_217 == ( unsigned TYPE_37 * ) VAR_218 ) METHOD_40 ( VAR_219 , ""MemoryAllocationFailed"" ) ; for ( VAR_220 = 0 ; VAR_221 < ( TYPE_38 ) VAR_222 . VAR_223 ; VAR_224 ++ ) { VAR_225 = VAR_226 + VAR_227 * VAR_228 ; for ( VAR_229 = 0 ; VAR_230 < ( TYPE_39 ) VAR_231 . VAR_232 ; VAR_233 ++ ) { VAR_234 = METHOD_41 ( VAR_235 , VAR_236 * VAR_237 . VAR_238 , VAR_239 ) ; if ( METHOD_42 ( VAR_240 ) != VAR_241 ) break ; if ( VAR_242 == 2 ) for ( VAR_243 = 0 ; VAR_244 < ( TYPE_40 ) VAR_245 . VAR_246 ; VAR_247 ++ ) { * VAR_248 = VAR_249 [ 2 * VAR_250 ] ; * ( VAR_251 + 1 ) = VAR_252 [ 2 * VAR_253 + 1 ] ; VAR_254 += 8 ; } else for ( VAR_255 = 0 ; VAR_256 < ( TYPE_41 ) VAR_257 . VAR_258 ; VAR_259 ++ ) { * VAR_260 = VAR_261 [ VAR_262 ] ; VAR_263 += 4 ; } } } VAR_264 = ( unsigned TYPE_42 * ) METHOD_43 ( VAR_265 ) ; } else { TYPE_43 * VAR_266 ; TYPE_44 * VAR_267 ; TYPE_45 VAR_268 , * VAR_269 ; unsigned TYPE_46 * VAR_270 ; unsigned TYPE_47 VAR_271 ; VAR_272 = ( TYPE_48 * ) METHOD_44 ( ( TYPE_49 ) VAR_273 . VAR_274 , VAR_275 . VAR_276 * sizeof ( * VAR_277 ) ) ; VAR_278 = ( TYPE_50 * ) METHOD_45 ( VAR_279 . VAR_280 , VAR_281 . VAR_282 * sizeof ( * VAR_283 ) ) ; VAR_284 = METHOD_46 ( ( TYPE_51 ) VAR_285 . VAR_286 + 10UL , 4UL * sizeof ( * VAR_287 ) ) ; if ( ( VAR_288 == ( TYPE_52 * ) VAR_289 ) || ( VAR_290 == ( TYPE_53 * ) VAR_291 ) || ( VAR_292 == ( TYPE_54 * ) VAR_293 ) ) { if ( VAR_294 == ( TYPE_55 * ) VAR_295 ) VAR_296 = ( TYPE_56 * ) METHOD_47 ( VAR_297 ) ; if ( VAR_298 == ( TYPE_57 * ) VAR_299 ) VAR_300 = ( TYPE_58 * ) METHOD_48 ( VAR_301 ) ; if ( VAR_302 == ( TYPE_59 * ) VAR_303 ) VAR_304 = METHOD_49 ( VAR_305 ) ; METHOD_50 ( VAR_306 , ""MemoryAllocationFailed"" ) ; } VAR_307 = ( unsigned TYPE_60 * ) METHOD_51 ( VAR_308 ) ; for ( VAR_309 = 0 ; VAR_310 < ( TYPE_61 ) ( VAR_311 . VAR_312 * VAR_313 . VAR_314 ) ; VAR_315 ++ ) VAR_316 [ VAR_317 ] = ( TYPE_62 ) METHOD_52 ( VAR_318 ) ; for ( VAR_319 = 0 ; VAR_320 < ( TYPE_63 ) ( VAR_321 . VAR_322 * VAR_323 . VAR_324 ) ; VAR_325 ++ ) { VAR_326 [ VAR_327 ] = METHOD_53 ( VAR_328 ) ; if ( VAR_329 [ VAR_330 ] > ( 4 * ( TYPE_64 ) VAR_331 . VAR_332 + 10 ) ) METHOD_54 ( VAR_333 , ""ImproperImageHeader"" ) ; } VAR_334 = 0 ; VAR_335 = 0 ; for ( VAR_336 = 0 ; ( ( VAR_337 < ( TYPE_65 ) VAR_338 . VAR_339 ) && ( VAR_340 == 0 ) ) ; VAR_341 ++ ) for ( VAR_342 = 0 ; ( ( VAR_343 < ( TYPE_66 ) VAR_344 . VAR_345 ) && ( VAR_346 == 0 ) ) ; VAR_347 ++ ) { if ( VAR_348 [ VAR_349 + VAR_350 * VAR_351 . VAR_352 ] < VAR_353 ) VAR_354 = 1 ; VAR_355 = VAR_356 [ VAR_357 + VAR_358 * VAR_359 . VAR_360 ] ; } VAR_361 = ( TYPE_67 ) METHOD_55 ( VAR_362 ) ; if ( VAR_363 == 1 ) { for ( VAR_364 = 0 ; VAR_365 < ( TYPE_68 ) VAR_366 . VAR_367 ; VAR_368 ++ ) { VAR_369 = VAR_370 ; for ( VAR_371 = 0 ; VAR_372 < ( TYPE_69 ) VAR_373 . VAR_374 ; VAR_375 ++ ) { if ( VAR_376 != VAR_377 [ VAR_378 + VAR_379 * VAR_380 . VAR_381 ] ) { VAR_382 = VAR_383 [ VAR_384 + VAR_385 * VAR_386 . VAR_387 ] ; VAR_388 = ( TYPE_70 ) METHOD_56 ( VAR_389 , ( TYPE_71 ) VAR_390 , VAR_391 ) ; } VAR_392 = METHOD_57 ( VAR_393 , ( TYPE_72 ) VAR_394 [ VAR_395 + VAR_396 * VAR_397 . VAR_398 ] , VAR_399 ) ; if ( METHOD_58 ( VAR_400 ) != VAR_401 ) break ; VAR_402 += ( TYPE_73 ) VAR_403 [ VAR_404 + VAR_405 * VAR_406 . VAR_407 ] ; VAR_408 = METHOD_59 ( VAR_409 , ( TYPE_74 ) ( VAR_410 [ VAR_411 + VAR_412 * VAR_413 . VAR_414 ] / VAR_415 ) , VAR_416 , ( TYPE_75 ) VAR_417 . VAR_418 , VAR_419 + VAR_420 * VAR_421 ) ; if ( VAR_422 == VAR_423 ) METHOD_60 ( VAR_424 , ""ImproperImageHeader"" ) ; VAR_425 += ( VAR_426 . VAR_427 * 4 * VAR_428 ) ; } } } else { TYPE_76 VAR_429 ; VAR_430 = METHOD_61 ( VAR_431 ) ; VAR_432 = VAR_433 ; for ( VAR_434 = 0 ; VAR_435 < ( TYPE_77 ) VAR_436 . VAR_437 ; VAR_438 ++ ) { for ( VAR_439 = 0 ; VAR_440 < ( TYPE_78 ) VAR_441 . VAR_442 ; VAR_443 ++ ) { if ( VAR_444 != VAR_445 [ VAR_446 + VAR_447 * VAR_448 . VAR_449 ] ) { VAR_450 = VAR_451 [ VAR_452 + VAR_453 * VAR_454 . VAR_455 ] ; VAR_456 = ( TYPE_79 ) METHOD_62 ( VAR_457 , ( TYPE_80 ) VAR_458 , VAR_459 ) ; } VAR_460 = METHOD_63 ( VAR_461 , ( TYPE_81 ) VAR_462 [ VAR_463 + VAR_464 * VAR_465 . VAR_466 ] , VAR_467 ) ; if ( METHOD_64 ( VAR_468 ) != VAR_469 ) break ; VAR_470 += ( TYPE_82 ) VAR_471 [ VAR_472 + VAR_473 * VAR_474 . VAR_475 ] ; VAR_476 = METHOD_65 ( VAR_477 , ( TYPE_83 ) ( VAR_478 [ VAR_479 + VAR_480 * VAR_481 . VAR_482 ] / VAR_483 ) , VAR_484 , ( TYPE_84 ) VAR_485 . VAR_486 , VAR_487 + VAR_488 * VAR_489 ) ; if ( VAR_490 == VAR_491 ) METHOD_66 ( VAR_492 , ""ImproperImageHeader"" ) ; } VAR_493 += ( VAR_494 . VAR_495 * 4 * VAR_496 ) ; } VAR_497 = ( TYPE_85 ) METHOD_67 ( VAR_498 , VAR_499 , VAR_500 ) ; } VAR_501 = METHOD_68 ( VAR_502 ) ; VAR_503 = ( TYPE_86 * ) METHOD_69 ( VAR_504 ) ; VAR_505 = ( TYPE_87 * ) METHOD_70 ( VAR_506 ) ; } VAR_507 -> VAR_508 = VAR_509 . VAR_510 == 4 ? VAR_511 : VAR_512 ; VAR_513 -> VAR_514 = VAR_515 . VAR_516 ; VAR_517 -> VAR_518 = VAR_519 . VAR_520 ; if ( VAR_521 -> VAR_522 == VAR_523 ) { if ( VAR_524 == 2 ) { for ( VAR_525 = 0 ; VAR_526 < ( TYPE_88 ) VAR_527 -> VAR_528 ; VAR_529 ++ ) { VAR_530 = VAR_531 + ( VAR_532 -> VAR_533 - VAR_534 - 1 ) * 8 * VAR_535 -> VAR_536 ; VAR_537 = METHOD_71 ( VAR_538 , 0 , VAR_539 , VAR_540 -> VAR_541 , 1 , VAR_542 ) ; if ( VAR_543 == ( TYPE_89 * ) VAR_544 ) break ; for ( VAR_545 = 0 ; VAR_546 < ( TYPE_90 ) VAR_547 -> VAR_548 ; VAR_549 ++ ) { METHOD_72 ( VAR_550 , METHOD_73 ( ( unsigned TYPE_91 ) ( ( * ( VAR_551 + 0 ) << 8 ) | ( * ( VAR_552 + 1 ) ) ) ) , VAR_553 ) ; METHOD_74 ( VAR_554 , METHOD_75 ( ( unsigned TYPE_92 ) ( ( * ( VAR_555 + 2 ) << 8 ) | ( * ( VAR_556 + 3 ) ) ) ) , VAR_557 ) ; METHOD_76 ( VAR_558 , METHOD_77 ( ( unsigned TYPE_93 ) ( ( * ( VAR_559 + 4 ) << 8 ) | ( * ( VAR_560 + 5 ) ) ) ) , VAR_561 ) ; METHOD_78 ( VAR_562 , VAR_563 , VAR_564 ) ; if ( VAR_565 -> VAR_566 != VAR_567 ) METHOD_79 ( VAR_568 , METHOD_80 ( ( unsigned TYPE_94 ) ( ( * ( VAR_569 + 6 ) << 8 ) | ( * ( VAR_570 + 7 ) ) ) ) , VAR_571 ) ; VAR_572 += 8 ; VAR_573 += METHOD_81 ( VAR_574 ) ; } if ( METHOD_82 ( VAR_575 , VAR_576 ) == VAR_577 ) break ; if ( VAR_578 -> VAR_579 == ( TYPE_95 * ) VAR_580 ) { VAR_581 = METHOD_83 ( VAR_582 , VAR_583 , ( TYPE_96 ) VAR_584 , VAR_585 -> VAR_586 ) ; if ( VAR_587 == VAR_588 ) break ; } } } else for ( VAR_589 = 0 ; VAR_590 < ( TYPE_97 ) VAR_591 -> VAR_592 ; VAR_593 ++ ) { VAR_594 = VAR_595 + ( VAR_596 -> VAR_597 - VAR_598 - 1 ) * 4 * VAR_599 -> VAR_600 ; VAR_601 = METHOD_84 ( VAR_602 , 0 , VAR_603 , VAR_604 -> VAR_605 , 1 , VAR_606 ) ; if ( VAR_607 == ( TYPE_98 * ) VAR_608 ) break ; for ( VAR_609 = 0 ; VAR_610 < ( TYPE_99 ) VAR_611 -> VAR_612 ; VAR_613 ++ ) { METHOD_85 ( VAR_614 , METHOD_86 ( * VAR_615 ) , VAR_616 ) ; METHOD_87 ( VAR_617 , METHOD_88 ( * ( VAR_618 + 1 ) ) , VAR_619 ) ; METHOD_89 ( VAR_620 , METHOD_90 ( * ( VAR_621 + 2 ) ) , VAR_622 ) ; METHOD_91 ( VAR_623 , VAR_624 , VAR_625 ) ; if ( VAR_626 -> VAR_627 != VAR_628 ) METHOD_92 ( VAR_629 , METHOD_93 ( * ( VAR_630 + 3 ) ) , VAR_631 ) ; VAR_632 += 4 ; VAR_633 += METHOD_94 ( VAR_634 ) ; } if ( METHOD_95 ( VAR_635 , VAR_636 ) == VAR_637 ) break ; if ( VAR_638 -> VAR_639 == ( TYPE_100 * ) VAR_640 ) { VAR_641 = METHOD_96 ( VAR_642 , VAR_643 , ( TYPE_101 ) VAR_644 , VAR_645 -> VAR_646 ) ; if ( VAR_647 == VAR_648 ) break ; } } } else { if ( METHOD_97 ( VAR_649 , VAR_650 -> VAR_651 , VAR_652 ) == VAR_653 ) METHOD_98 ( VAR_654 , ""MemoryAllocationFailed"" ) ; if ( VAR_655 == 2 ) { for ( VAR_656 = 0 ; VAR_657 < ( TYPE_102 ) VAR_658 -> VAR_659 ; VAR_660 ++ ) { VAR_661 = VAR_662 + ( VAR_663 -> VAR_664 - VAR_665 - 1 ) * 8 * VAR_666 -> VAR_667 ; VAR_668 = METHOD_99 ( VAR_669 , 0 , VAR_670 , VAR_671 -> VAR_672 , 1 , VAR_673 ) ; if ( VAR_674 == ( TYPE_103 * ) VAR_675 ) break ; for ( VAR_676 = 0 ; VAR_677 < ( TYPE_104 ) VAR_678 -> VAR_679 ; VAR_680 ++ ) { VAR_681 = ( * VAR_682 << 8 ) ; VAR_683 |= ( * ( VAR_684 + 1 ) ) ; METHOD_100 ( VAR_685 , ( TYPE_105 ) VAR_686 , VAR_687 ) ; VAR_688 += 8 ; VAR_689 += METHOD_101 ( VAR_690 ) ; } if ( METHOD_102 ( VAR_691 , VAR_692 ) == VAR_693 ) break ; if ( VAR_694 -> VAR_695 == ( TYPE_106 * ) VAR_696 ) { VAR_697 = METHOD_103 ( VAR_698 , VAR_699 , ( TYPE_107 ) VAR_700 , VAR_701 -> VAR_702 ) ; if ( VAR_703 == VAR_704 ) break ; } } } else for ( VAR_705 = 0 ; VAR_706 < ( TYPE_108 ) VAR_707 -> VAR_708 ; VAR_709 ++ ) { VAR_710 = VAR_711 + ( VAR_712 -> VAR_713 - VAR_714 - 1 ) * 4 * VAR_715 -> VAR_716 ; VAR_717 = METHOD_104 ( VAR_718 , 0 , VAR_719 , VAR_720 -> VAR_721 , 1 , VAR_722 ) ; if ( VAR_723 == ( TYPE_109 * ) VAR_724 ) break ; for ( VAR_725 = 0 ; VAR_726 < ( TYPE_110 ) VAR_727 -> VAR_728 ; VAR_729 ++ ) { METHOD_105 ( VAR_730 , * VAR_731 , VAR_732 ) ; VAR_733 += 4 ; VAR_734 += METHOD_106 ( VAR_735 ) ; } if ( METHOD_107 ( VAR_736 , VAR_737 ) == VAR_738 ) break ; if ( VAR_739 -> VAR_740 == ( TYPE_111 * ) VAR_741 ) { VAR_742 = METHOD_108 ( VAR_743 , VAR_744 , ( TYPE_112 ) VAR_745 , VAR_746 -> VAR_747 ) ; if ( VAR_748 == VAR_749 ) break ; } } ( TYPE_113 ) METHOD_109 ( VAR_750 , VAR_751 ) ; } VAR_752 = METHOD_110 ( VAR_753 ) ; if ( METHOD_111 ( VAR_754 ) != VAR_755 ) { METHOD_112 ( VAR_756 , VAR_757 , ""UnexpectedEndOfFile"" , VAR_758 -> VAR_759 ) ; break ; } if ( VAR_760 -> VAR_761 != 0 ) if ( VAR_762 -> VAR_763 >= ( VAR_764 -> VAR_765 + VAR_766 -> VAR_767 - 1 ) ) break ; VAR_768 . VAR_769 = METHOD_113 ( VAR_770 ) ; if ( VAR_771 . VAR_772 == 0x01DA ) { METHOD_114 ( VAR_773 , VAR_774 , VAR_775 ) ; if ( METHOD_115 ( VAR_776 ) == ( TYPE_114 * ) VAR_777 ) { VAR_778 = METHOD_116 ( VAR_779 ) ; return ( ( TYPE_115 * ) VAR_780 ) ; } VAR_781 = METHOD_117 ( VAR_782 ) ; VAR_783 = METHOD_118 ( VAR_784 , VAR_785 , METHOD_119 ( VAR_786 ) , METHOD_120 ( VAR_787 ) ) ; if ( VAR_788 == VAR_789 ) break ; } } while ( VAR_790 . VAR_791 == 0x01DA ) ; ( TYPE_116 ) METHOD_121 ( VAR_792 ) ; return ( METHOD_122 ( VAR_793 ) ) ; }",202
203,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; VAR_4 * VAR_5 ;  TYPE_5 VAR_6 ;  VAR_7 * VAR_8 ; if ( METHOD_1 ( VAR_9 ) > 0 && METHOD_2 ( VAR_10 ) > 0 ) { METHOD_3 ( VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_4 ( VAR_14 ) ; for ( VAR_15 = VAR_16 -> VAR_17 , VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; VAR_21 > 0 ; -- VAR_22 , VAR_23 += VAR_24 ) { for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 ; VAR_30 > 0 ; -- VAR_31 , ++ VAR_32 ) { * VAR_33 = METHOD_5 ( * VAR_34 , VAR_35 ) ; } } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 * VAR_8 ; if ( METHOD_1 ( VAR_9 ) > 0 && METHOD_2 ( VAR_10 ) > 0 ) { METHOD_3 ( VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_4 ( VAR_14 ) ; for ( VAR_15 = VAR_16 -> VAR_17 , VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; VAR_21 > 0 ; -- VAR_22 , VAR_23 += VAR_24 ) { for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 ; VAR_30 > 0 ; -- VAR_31 , ++ VAR_32 ) { * VAR_33 = METHOD_5 ( * VAR_34 , VAR_35 ) ; } } } }",203
204,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = VAR_10 , * VAR_11 = VAR_12 ; TYPE_1 VAR_13 = VAR_14 -> VAR_15 | ~ VAR_16 -> VAR_17 ; TYPE_2 VAR_18 = VAR_19 -> VAR_20 & VAR_21 -> VAR_22 ; TYPE_3 1 TYPE_4 2 TYPE_5 4 TYPE_6 8 unsigned TYPE_7 VAR_23 = 0 ; TYPE_8 VAR_24 = 0 ; TYPE_9 VAR_25 = 1 ; TYPE_10 VAR_26 = 0 ; if ( VAR_27 -> VAR_28 & VAR_29 ) { VAR_30 = METHOD_1 ( VAR_31 , VAR_32 , VAR_33 -> VAR_34 ) ; if ( ! VAR_35 ) { METHOD_2 ( ""%s:bug:prim==NULL\\n"" , VAR_36 ) ; return ; } if ( VAR_37 && VAR_38 != VAR_39 ) { METHOD_3 ( ""%s:bug:iprim!=prim\\n"" , VAR_40 ) ; return ; } } else if ( ! METHOD_4 ( VAR_41 ) && ( VAR_42 != VAR_43 -> VAR_44 || VAR_45 -> VAR_46 < 32 ) ) { if ( ! ( VAR_47 -> VAR_48 & VAR_49 ) ) METHOD_5 ( VAR_50 , VAR_51 -> VAR_52 & VAR_53 ? VAR_54 : VAR_55 , VAR_56 , VAR_57 -> VAR_58 , VAR_59 ) ; VAR_60 = 1 ; }  for ( VAR_61 = VAR_62 -> VAR_63 ; VAR_64 ; VAR_65 = VAR_66 -> VAR_67 ) {  if ( VAR_68 == VAR_69 ) { VAR_70 = 0 ; continue ; } if ( VAR_71 && VAR_72 -> VAR_73 == VAR_74 -> VAR_75 && METHOD_6 ( VAR_76 -> VAR_77 , VAR_78 ) ) continue ; if ( VAR_79 -> VAR_80 & VAR_81 ) { if ( VAR_82 -> VAR_83 == VAR_84 -> VAR_85 && METHOD_7 ( VAR_86 -> VAR_87 , VAR_88 ) ) VAR_89 = VAR_90 ; else { if ( ! VAR_91 ) continue ; if ( ! VAR_92 || VAR_93 -> VAR_94 != VAR_95 -> VAR_96 || ! METHOD_8 ( VAR_97 -> VAR_98 , VAR_99 ) ) VAR_100 = METHOD_9 ( VAR_101 , VAR_102 -> VAR_103 , VAR_104 -> VAR_105 ) ; if ( ! VAR_106 ) continue ; if ( VAR_107 -> VAR_108 != VAR_109 -> VAR_110 ) continue ; } } else { if ( VAR_111 -> VAR_112 != VAR_113 -> VAR_114 ) continue ; VAR_115 = VAR_116 ; if ( VAR_117 != VAR_118 ) VAR_119 = 1 ; } if ( VAR_120 -> VAR_121 == VAR_122 -> VAR_123 ) VAR_124 |= TYPE_11 ; if ( VAR_125 -> VAR_126 == VAR_127 -> VAR_128 ) VAR_129 |= TYPE_12 ; if ( VAR_130 == VAR_131 -> VAR_132 ) VAR_133 |= TYPE_13 ; if ( VAR_134 == VAR_135 -> VAR_136 ) VAR_137 |= TYPE_14 ; if ( VAR_138 == VAR_139 && VAR_140 -> VAR_141 < 31 ) { TYPE_15 VAR_142 = VAR_143 -> VAR_144 | ~ VAR_145 -> VAR_146 ; TYPE_16 VAR_147 = VAR_148 -> VAR_149 & VAR_150 -> VAR_151 ; if ( ! METHOD_10 ( VAR_152 ) ) { if ( VAR_153 -> VAR_154 == VAR_155 || VAR_156 -> VAR_157 == VAR_158 ) VAR_159 |= TYPE_17 ; if ( VAR_160 == VAR_161 || VAR_162 == VAR_163 ) VAR_164 |= TYPE_18 ; if ( VAR_165 == VAR_166 || VAR_167 == VAR_168 ) VAR_169 |= TYPE_19 ; } }  }  if ( ! ( VAR_170 & TYPE_20 ) ) METHOD_11 ( VAR_171 , VAR_172 , VAR_173 -> VAR_174 , 32 , VAR_175 ) ; if ( VAR_176 && VAR_177 -> VAR_178 < 31 ) { if ( ! ( VAR_179 & TYPE_21 ) ) METHOD_12 ( VAR_180 , VAR_181 , VAR_182 , 32 , VAR_183 ) ; if ( ! ( VAR_184 & TYPE_22 ) ) METHOD_13 ( VAR_185 , VAR_186 , VAR_187 , 32 , VAR_188 ) ; } if ( ! ( VAR_189 & TYPE_23 ) ) { unsigned TYPE_24 VAR_190 ; METHOD_14 ( VAR_191 , VAR_192 , VAR_193 -> VAR_194 , 32 , VAR_195 ) ; VAR_196 = METHOD_15 ( METHOD_16 ( VAR_197 ) , VAR_198 , VAR_199 -> VAR_200 ) ; if ( VAR_201 && VAR_202 != VAR_203 ) { if ( METHOD_17 ( METHOD_18 ( VAR_204 ) , VAR_205 -> VAR_206 ) ) METHOD_19 ( METHOD_20 ( VAR_207 ) ) ; } } TYPE_25 TYPE_26 TYPE_27 TYPE_28 }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = VAR_10 , * VAR_11 = VAR_12 ; TYPE_1 VAR_13 = VAR_14 -> VAR_15 | ~ VAR_16 -> VAR_17 ; TYPE_2 VAR_18 = VAR_19 -> VAR_20 & VAR_21 -> VAR_22 ; TYPE_3 1 TYPE_4 2 TYPE_5 4 TYPE_6 8 unsigned TYPE_7 VAR_23 = 0 ; TYPE_8 VAR_24 = 0 ; TYPE_9 VAR_25 = 1 ; TYPE_10 VAR_26 = 0 ; if ( VAR_27 -> VAR_28 & VAR_29 ) { VAR_30 = METHOD_1 ( VAR_31 , VAR_32 , VAR_33 -> VAR_34 ) ; if ( ! VAR_35 ) { METHOD_2 ( ""%s:bug:prim==NULL\\n"" , VAR_36 ) ; return ; } if ( VAR_37 && VAR_38 != VAR_39 ) { METHOD_3 ( ""%s:bug:iprim!=prim\\n"" , VAR_40 ) ; return ; } } else if ( ! METHOD_4 ( VAR_41 ) && ( VAR_42 != VAR_43 -> VAR_44 || VAR_45 -> VAR_46 < 32 ) ) { if ( ! ( VAR_47 -> VAR_48 & VAR_49 ) ) METHOD_5 ( VAR_50 , VAR_51 -> VAR_52 & VAR_53 ? VAR_54 : VAR_55 , VAR_56 , VAR_57 -> VAR_58 , VAR_59 ) ; VAR_60 = 1 ; } if ( VAR_101 -> VAR_208 ) goto VAR_209 ; for ( VAR_61 = VAR_62 -> VAR_63 ; VAR_64 ; VAR_65 = VAR_66 -> VAR_67 ) { if ( VAR_68 == VAR_69 ) { VAR_70 = 0 ; continue ; } if ( VAR_71 && VAR_72 -> VAR_73 == VAR_74 -> VAR_75 && METHOD_6 ( VAR_76 -> VAR_77 , VAR_78 ) ) continue ; if ( VAR_79 -> VAR_80 & VAR_81 ) { if ( VAR_82 -> VAR_83 == VAR_84 -> VAR_85 && METHOD_7 ( VAR_86 -> VAR_87 , VAR_88 ) ) VAR_89 = VAR_90 ; else { if ( ! VAR_91 ) continue ; if ( ! VAR_92 || VAR_93 -> VAR_94 != VAR_95 -> VAR_96 || ! METHOD_8 ( VAR_97 -> VAR_98 , VAR_99 ) ) VAR_100 = METHOD_9 ( VAR_101 , VAR_102 -> VAR_103 , VAR_104 -> VAR_105 ) ; if ( ! VAR_106 ) continue ; if ( VAR_107 -> VAR_108 != VAR_109 -> VAR_110 ) continue ; } } else { if ( VAR_111 -> VAR_112 != VAR_113 -> VAR_114 ) continue ; VAR_115 = VAR_116 ; if ( VAR_117 != VAR_118 ) VAR_119 = 1 ; } if ( VAR_120 -> VAR_121 == VAR_122 -> VAR_123 ) VAR_124 |= TYPE_11 ; if ( VAR_125 -> VAR_126 == VAR_127 -> VAR_128 ) VAR_129 |= TYPE_12 ; if ( VAR_130 == VAR_131 -> VAR_132 ) VAR_133 |= TYPE_13 ; if ( VAR_134 == VAR_135 -> VAR_136 ) VAR_137 |= TYPE_14 ; if ( VAR_138 == VAR_139 && VAR_140 -> VAR_141 < 31 ) { TYPE_15 VAR_142 = VAR_143 -> VAR_144 | ~ VAR_145 -> VAR_146 ; TYPE_16 VAR_147 = VAR_148 -> VAR_149 & VAR_150 -> VAR_151 ; if ( ! METHOD_10 ( VAR_152 ) ) { if ( VAR_153 -> VAR_154 == VAR_155 || VAR_156 -> VAR_157 == VAR_158 ) VAR_159 |= TYPE_17 ; if ( VAR_160 == VAR_161 || VAR_162 == VAR_163 ) VAR_164 |= TYPE_18 ; if ( VAR_165 == VAR_166 || VAR_167 == VAR_168 ) VAR_169 |= TYPE_19 ; } } } VAR_209 : if ( ! ( VAR_170 & TYPE_20 ) ) METHOD_11 ( VAR_171 , VAR_172 , VAR_173 -> VAR_174 , 32 , VAR_175 ) ; if ( VAR_176 && VAR_177 -> VAR_178 < 31 ) { if ( ! ( VAR_179 & TYPE_21 ) ) METHOD_12 ( VAR_180 , VAR_181 , VAR_182 , 32 , VAR_183 ) ; if ( ! ( VAR_184 & TYPE_22 ) ) METHOD_13 ( VAR_185 , VAR_186 , VAR_187 , 32 , VAR_188 ) ; } if ( ! ( VAR_189 & TYPE_23 ) ) { unsigned TYPE_24 VAR_190 ; METHOD_14 ( VAR_191 , VAR_192 , VAR_193 -> VAR_194 , 32 , VAR_195 ) ; VAR_196 = METHOD_15 ( METHOD_16 ( VAR_197 ) , VAR_198 , VAR_199 -> VAR_200 ) ; if ( VAR_201 && VAR_202 != VAR_203 ) { if ( METHOD_17 ( METHOD_18 ( VAR_204 ) , VAR_205 -> VAR_206 ) ) METHOD_19 ( METHOD_20 ( VAR_207 ) ) ; } } TYPE_25 TYPE_26 TYPE_27 TYPE_28 }",204
205,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) {  METHOD_1 ( VAR_8 ) ;  return VAR_9 ; } switch ( VAR_10 -> VAR_11 ) { case VAR_12 : VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ; if ( ! VAR_17 ) goto VAR_18 ; VAR_19 = METHOD_3 ( VAR_20 -> VAR_21 . VAR_22 . VAR_23 ) ; if ( ! VAR_24 ) goto VAR_25 ; if ( METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 ) == - 1 ) goto VAR_29 ; METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 -> VAR_33 . VAR_34 . VAR_35 ) ; if ( ! VAR_36 ) goto VAR_37 ; if ( METHOD_7 ( VAR_38 , & VAR_39 , VAR_40 ) == - 1 ) goto VAR_41 ; METHOD_8 ( VAR_42 ) ; VAR_43 = METHOD_9 ( VAR_44 -> VAR_45 . VAR_46 . VAR_47 , METHOD_10 ) ; if ( ! VAR_48 ) goto VAR_49 ; if ( METHOD_11 ( VAR_50 , & VAR_51 , VAR_52 ) == - 1 ) goto VAR_53 ; METHOD_12 ( VAR_54 ) ; VAR_55 = METHOD_13 ( VAR_56 -> VAR_57 . VAR_58 . VAR_59 , METHOD_14 ) ; if ( ! VAR_60 ) goto VAR_61 ; if ( METHOD_15 ( VAR_62 , & VAR_63 , VAR_64 ) == - 1 ) goto VAR_65 ; METHOD_16 ( VAR_66 ) ; VAR_67 = METHOD_17 ( VAR_68 -> VAR_69 . VAR_70 . VAR_71 ) ; if ( ! VAR_72 ) goto VAR_73 ; if ( METHOD_18 ( VAR_74 , & VAR_75 , VAR_76 ) == - 1 ) goto VAR_77 ; METHOD_19 ( VAR_78 ) ; VAR_79 = METHOD_20 ( VAR_80 -> VAR_81 . VAR_82 . VAR_83 ) ; if ( ! VAR_84 ) goto VAR_85 ; if ( METHOD_21 ( VAR_86 , & VAR_87 , VAR_88 ) == - 1 ) goto VAR_89 ; METHOD_22 ( VAR_90 ) ; break ; case VAR_91 : VAR_92 = METHOD_23 ( VAR_93 , VAR_94 , VAR_95 ) ; if ( ! VAR_96 ) goto VAR_97 ; VAR_98 = METHOD_24 ( VAR_99 -> VAR_100 . VAR_101 . VAR_102 ) ; if ( ! VAR_103 ) goto VAR_104 ; if ( METHOD_25 ( VAR_105 , & VAR_106 , VAR_107 ) == - 1 ) goto VAR_108 ; METHOD_26 ( VAR_109 ) ; VAR_110 = METHOD_27 ( VAR_111 -> VAR_112 . VAR_113 . VAR_114 ) ; if ( ! VAR_115 ) goto VAR_116 ; if ( METHOD_28 ( VAR_117 , & VAR_118 , VAR_119 ) == - 1 ) goto VAR_120 ; METHOD_29 ( VAR_121 ) ; VAR_122 = METHOD_30 ( VAR_123 -> VAR_124 . VAR_125 . VAR_126 , METHOD_31 ) ; if ( ! VAR_127 ) goto VAR_128 ; if ( METHOD_32 ( VAR_129 , & VAR_130 , VAR_131 ) == - 1 ) goto VAR_132 ; METHOD_33 ( VAR_133 ) ; VAR_134 = METHOD_34 ( VAR_135 -> VAR_136 . VAR_137 . VAR_138 , METHOD_35 ) ; if ( ! VAR_139 ) goto VAR_140 ; if ( METHOD_36 ( VAR_141 , & VAR_142 , VAR_143 ) == - 1 ) goto VAR_144 ; METHOD_37 ( VAR_145 ) ; VAR_146 = METHOD_38 ( VAR_147 -> VAR_148 . VAR_149 . VAR_150 ) ; if ( ! VAR_151 ) goto VAR_152 ; if ( METHOD_39 ( VAR_153 , & VAR_154 , VAR_155 ) == - 1 ) goto VAR_156 ; METHOD_40 ( VAR_157 ) ; VAR_158 = METHOD_41 ( VAR_159 -> VAR_160 . VAR_161 . VAR_162 ) ; if ( ! VAR_163 ) goto VAR_164 ; if ( METHOD_42 ( VAR_165 , & VAR_166 , VAR_167 ) == - 1 ) goto VAR_168 ; METHOD_43 ( VAR_169 ) ; break ; case VAR_170 : VAR_171 = METHOD_44 ( VAR_172 , VAR_173 , VAR_174 ) ; if ( ! VAR_175 ) goto VAR_176 ; VAR_177 = METHOD_45 ( VAR_178 -> VAR_179 . VAR_180 . VAR_181 ) ; if ( ! VAR_182 ) goto VAR_183 ; if ( METHOD_46 ( VAR_184 , & VAR_185 , VAR_186 ) == - 1 ) goto VAR_187 ; METHOD_47 ( VAR_188 ) ; VAR_189 = METHOD_48 ( VAR_190 -> VAR_191 . VAR_192 . VAR_193 , METHOD_49 ) ; if ( ! VAR_194 ) goto VAR_195 ; if ( METHOD_50 ( VAR_196 , & VAR_197 , VAR_198 ) == - 1 ) goto VAR_199 ; METHOD_51 ( VAR_200 ) ; VAR_201 = METHOD_52 ( VAR_202 -> VAR_203 . VAR_204 . VAR_205 , VAR_206 ) ; if ( ! VAR_207 ) goto VAR_208 ; if ( METHOD_53 ( VAR_209 , & VAR_210 , VAR_211 ) == - 1 ) goto VAR_212 ; METHOD_54 ( VAR_213 ) ; VAR_214 = METHOD_55 ( VAR_215 -> VAR_216 . VAR_217 . VAR_218 , METHOD_56 ) ; if ( ! VAR_219 ) goto VAR_220 ; if ( METHOD_57 ( VAR_221 , & VAR_222 , VAR_223 ) == - 1 ) goto VAR_224 ; METHOD_58 ( VAR_225 ) ; VAR_226 = METHOD_59 ( VAR_227 -> VAR_228 . VAR_229 . VAR_230 , METHOD_60 ) ; if ( ! VAR_231 ) goto VAR_232 ; if ( METHOD_61 ( VAR_233 , & VAR_234 , VAR_235 ) == - 1 ) goto VAR_236 ; METHOD_62 ( VAR_237 ) ; break ; case VAR_238 : VAR_239 = METHOD_63 ( VAR_240 , VAR_241 , VAR_242 ) ; if ( ! VAR_243 ) goto VAR_244 ; VAR_245 = METHOD_64 ( VAR_246 -> VAR_247 . VAR_248 . VAR_249 ) ; if ( ! VAR_250 ) goto VAR_251 ; if ( METHOD_65 ( VAR_252 , & VAR_253 , VAR_254 ) == - 1 ) goto VAR_255 ; METHOD_66 ( VAR_256 ) ; break ; case VAR_257 : VAR_258 = METHOD_67 ( VAR_259 , VAR_260 , VAR_261 ) ; if ( ! VAR_262 ) goto VAR_263 ; VAR_264 = METHOD_68 ( VAR_265 -> VAR_266 . VAR_267 . VAR_268 , METHOD_69 ) ; if ( ! VAR_269 ) goto VAR_270 ; if ( METHOD_70 ( VAR_271 , & VAR_272 , VAR_273 ) == - 1 ) goto VAR_274 ; METHOD_71 ( VAR_275 ) ; break ; case VAR_276 : VAR_277 = METHOD_72 ( VAR_278 , VAR_279 , VAR_280 ) ; if ( ! VAR_281 ) goto VAR_282 ; VAR_283 = METHOD_73 ( VAR_284 -> VAR_285 . VAR_286 . VAR_287 , METHOD_74 ) ; if ( ! VAR_288 ) goto VAR_289 ; if ( METHOD_75 ( VAR_290 , & VAR_291 , VAR_292 ) == - 1 ) goto VAR_293 ; METHOD_76 ( VAR_294 ) ; VAR_295 = METHOD_77 ( VAR_296 -> VAR_297 . VAR_298 . VAR_299 ) ; if ( ! VAR_300 ) goto VAR_301 ; if ( METHOD_78 ( VAR_302 , & VAR_303 , VAR_304 ) == - 1 ) goto VAR_305 ; METHOD_79 ( VAR_306 ) ; VAR_307 = METHOD_80 ( VAR_308 -> VAR_309 . VAR_310 . VAR_311 ) ; if ( ! VAR_312 ) goto VAR_313 ; if ( METHOD_81 ( VAR_314 , & VAR_315 , VAR_316 ) == - 1 ) goto VAR_317 ; METHOD_82 ( VAR_318 ) ; break ; case VAR_319 : VAR_320 = METHOD_83 ( VAR_321 , VAR_322 , VAR_323 ) ; if ( ! VAR_324 ) goto VAR_325 ; VAR_326 = METHOD_84 ( VAR_327 -> VAR_328 . VAR_329 . VAR_330 ) ; if ( ! VAR_331 ) goto VAR_332 ; if ( METHOD_85 ( VAR_333 , & VAR_334 , VAR_335 ) == - 1 ) goto VAR_336 ; METHOD_86 ( VAR_337 ) ; VAR_338 = METHOD_87 ( VAR_339 -> VAR_340 . VAR_341 . VAR_342 ) ; if ( ! VAR_343 ) goto VAR_344 ; if ( METHOD_88 ( VAR_345 , & VAR_346 , VAR_347 ) == - 1 ) goto VAR_348 ; METHOD_89 ( VAR_349 ) ; VAR_350 = METHOD_90 ( VAR_351 -> VAR_352 . VAR_353 . VAR_354 ) ; if ( ! VAR_355 ) goto VAR_356 ; if ( METHOD_91 ( VAR_357 , & VAR_358 , VAR_359 ) == - 1 ) goto VAR_360 ; METHOD_92 ( VAR_361 ) ; break ; case VAR_362 : VAR_363 = METHOD_93 ( VAR_364 , VAR_365 , VAR_366 ) ; if ( ! VAR_367 ) goto VAR_368 ; VAR_369 = METHOD_94 ( VAR_370 -> VAR_371 . VAR_372 . VAR_373 ) ; if ( ! VAR_374 ) goto VAR_375 ; if ( METHOD_95 ( VAR_376 , & VAR_377 , VAR_378 ) == - 1 ) goto VAR_379 ; METHOD_96 ( VAR_380 ) ; VAR_381 = METHOD_97 ( VAR_382 -> VAR_383 . VAR_384 . VAR_385 ) ; if ( ! VAR_386 ) goto VAR_387 ; if ( METHOD_98 ( VAR_388 , & VAR_389 , VAR_390 ) == - 1 ) goto VAR_391 ; METHOD_99 ( VAR_392 ) ; VAR_393 = METHOD_100 ( VAR_394 -> VAR_395 . VAR_396 . VAR_397 ) ; if ( ! VAR_398 ) goto VAR_399 ; if ( METHOD_101 ( VAR_400 , & VAR_401 , VAR_402 ) == - 1 ) goto VAR_403 ; METHOD_102 ( VAR_404 ) ; VAR_405 = METHOD_103 ( VAR_406 -> VAR_407 . VAR_408 . VAR_409 ) ; if ( ! VAR_410 ) goto VAR_411 ; if ( METHOD_104 ( VAR_412 , & VAR_413 , VAR_414 ) == - 1 ) goto VAR_415 ; METHOD_105 ( VAR_416 ) ; break ; case VAR_417 : VAR_418 = METHOD_106 ( VAR_419 , VAR_420 , VAR_421 ) ; if ( ! VAR_422 ) goto VAR_423 ; VAR_424 = METHOD_107 ( VAR_425 -> VAR_426 . VAR_427 . VAR_428 ) ; if ( ! VAR_429 ) goto VAR_430 ; if ( METHOD_108 ( VAR_431 , & VAR_432 , VAR_433 ) == - 1 ) goto VAR_434 ; METHOD_109 ( VAR_435 ) ; VAR_436 = METHOD_110 ( VAR_437 -> VAR_438 . VAR_439 . VAR_440 ) ; if ( ! VAR_441 ) goto VAR_442 ; if ( METHOD_111 ( VAR_443 , & VAR_444 , VAR_445 ) == - 1 ) goto VAR_446 ; METHOD_112 ( VAR_447 ) ; VAR_448 = METHOD_113 ( VAR_449 -> VAR_450 . VAR_451 . VAR_452 , METHOD_114 ) ; if ( ! VAR_453 ) goto VAR_454 ; if ( METHOD_115 ( VAR_455 , & VAR_456 , VAR_457 ) == - 1 ) goto VAR_458 ; METHOD_116 ( VAR_459 ) ; VAR_460 = METHOD_117 ( VAR_461 -> VAR_462 . VAR_463 . VAR_464 , METHOD_118 ) ; if ( ! VAR_465 ) goto VAR_466 ; if ( METHOD_119 ( VAR_467 , & VAR_468 , VAR_469 ) == - 1 ) goto VAR_470 ; METHOD_120 ( VAR_471 ) ; VAR_472 = METHOD_121 ( VAR_473 -> VAR_474 . VAR_475 . VAR_476 ) ; if ( ! VAR_477 ) goto VAR_478 ; if ( METHOD_122 ( VAR_479 , & VAR_480 , VAR_481 ) == - 1 ) goto VAR_482 ; METHOD_123 ( VAR_483 ) ; break ; case VAR_484 : VAR_485 = METHOD_124 ( VAR_486 , VAR_487 , VAR_488 ) ; if ( ! VAR_489 ) goto VAR_490 ; VAR_491 = METHOD_125 ( VAR_492 -> VAR_493 . VAR_494 . VAR_495 ) ; if ( ! VAR_496 ) goto VAR_497 ; if ( METHOD_126 ( VAR_498 , & VAR_499 , VAR_500 ) == - 1 ) goto VAR_501 ; METHOD_127 ( VAR_502 ) ; VAR_503 = METHOD_128 ( VAR_504 -> VAR_505 . VAR_506 . VAR_507 ) ; if ( ! VAR_508 ) goto VAR_509 ; if ( METHOD_129 ( VAR_510 , & VAR_511 , VAR_512 ) == - 1 ) goto VAR_513 ; METHOD_130 ( VAR_514 ) ; VAR_515 = METHOD_131 ( VAR_516 -> VAR_517 . VAR_518 . VAR_519 , METHOD_132 ) ; if ( ! VAR_520 ) goto VAR_521 ; if ( METHOD_133 ( VAR_522 , & VAR_523 , VAR_524 ) == - 1 ) goto VAR_525 ; METHOD_134 ( VAR_526 ) ; VAR_527 = METHOD_135 ( VAR_528 -> VAR_529 . VAR_530 . VAR_531 , METHOD_136 ) ; if ( ! VAR_532 ) goto VAR_533 ; if ( METHOD_137 ( VAR_534 , & VAR_535 , VAR_536 ) == - 1 ) goto VAR_537 ; METHOD_138 ( VAR_538 ) ; VAR_539 = METHOD_139 ( VAR_540 -> VAR_541 . VAR_542 . VAR_543 ) ; if ( ! VAR_544 ) goto VAR_545 ; if ( METHOD_140 ( VAR_546 , & VAR_547 , VAR_548 ) == - 1 ) goto VAR_549 ; METHOD_141 ( VAR_550 ) ; break ; case VAR_551 : VAR_552 = METHOD_142 ( VAR_553 , VAR_554 , VAR_555 ) ; if ( ! VAR_556 ) goto VAR_557 ; VAR_558 = METHOD_143 ( VAR_559 -> VAR_560 . VAR_561 . VAR_562 ) ; if ( ! VAR_563 ) goto VAR_564 ; if ( METHOD_144 ( VAR_565 , & VAR_566 , VAR_567 ) == - 1 ) goto VAR_568 ; METHOD_145 ( VAR_569 ) ; VAR_570 = METHOD_146 ( VAR_571 -> VAR_572 . VAR_573 . VAR_574 , METHOD_147 ) ; if ( ! VAR_575 ) goto VAR_576 ; if ( METHOD_148 ( VAR_577 , & VAR_578 , VAR_579 ) == - 1 ) goto VAR_580 ; METHOD_149 ( VAR_581 ) ; VAR_582 = METHOD_150 ( VAR_583 -> VAR_584 . VAR_585 . VAR_586 , METHOD_151 ) ; if ( ! VAR_587 ) goto VAR_588 ; if ( METHOD_152 ( VAR_589 , & VAR_590 , VAR_591 ) == - 1 ) goto VAR_592 ; METHOD_153 ( VAR_593 ) ; break ; case VAR_594 : VAR_595 = METHOD_154 ( VAR_596 , VAR_597 , VAR_598 ) ; if ( ! VAR_599 ) goto VAR_600 ; VAR_601 = METHOD_155 ( VAR_602 -> VAR_603 . VAR_604 . VAR_605 ) ; if ( ! VAR_606 ) goto VAR_607 ; if ( METHOD_156 ( VAR_608 , & VAR_609 , VAR_610 ) == - 1 ) goto VAR_611 ; METHOD_157 ( VAR_612 ) ; VAR_613 = METHOD_158 ( VAR_614 -> VAR_615 . VAR_616 . VAR_617 , METHOD_159 ) ; if ( ! VAR_618 ) goto VAR_619 ; if ( METHOD_160 ( VAR_620 , & VAR_621 , VAR_622 ) == - 1 ) goto VAR_623 ; METHOD_161 ( VAR_624 ) ; VAR_625 = METHOD_162 ( VAR_626 -> VAR_627 . VAR_628 . VAR_629 , METHOD_163 ) ; if ( ! VAR_630 ) goto VAR_631 ; if ( METHOD_164 ( VAR_632 , & VAR_633 , VAR_634 ) == - 1 ) goto VAR_635 ; METHOD_165 ( VAR_636 ) ; break ; case VAR_637 : VAR_638 = METHOD_166 ( VAR_639 , VAR_640 , VAR_641 ) ; if ( ! VAR_642 ) goto VAR_643 ; VAR_644 = METHOD_167 ( VAR_645 -> VAR_646 . VAR_647 . VAR_648 , VAR_649 ) ; if ( ! VAR_650 ) goto VAR_651 ; if ( METHOD_168 ( VAR_652 , & VAR_653 , VAR_654 ) == - 1 ) goto VAR_655 ; METHOD_169 ( VAR_656 ) ; VAR_657 = METHOD_170 ( VAR_658 -> VAR_659 . VAR_660 . VAR_661 , METHOD_171 ) ; if ( ! VAR_662 ) goto VAR_663 ; if ( METHOD_172 ( VAR_664 , & VAR_665 , VAR_666 ) == - 1 ) goto VAR_667 ; METHOD_173 ( VAR_668 ) ; VAR_669 = METHOD_174 ( VAR_670 -> VAR_671 . VAR_672 . VAR_673 ) ; if ( ! VAR_674 ) goto VAR_675 ; if ( METHOD_175 ( VAR_676 , & VAR_677 , VAR_678 ) == - 1 ) goto VAR_679 ; METHOD_176 ( VAR_680 ) ; break ; case VAR_681 : VAR_682 = METHOD_177 ( VAR_683 , VAR_684 , VAR_685 ) ; if ( ! VAR_686 ) goto VAR_687 ; VAR_688 = METHOD_178 ( VAR_689 -> VAR_690 . VAR_691 . VAR_692 , VAR_693 ) ; if ( ! VAR_694 ) goto VAR_695 ; if ( METHOD_179 ( VAR_696 , & VAR_697 , VAR_698 ) == - 1 ) goto VAR_699 ; METHOD_180 ( VAR_700 ) ; VAR_701 = METHOD_181 ( VAR_702 -> VAR_703 . VAR_704 . VAR_705 , METHOD_182 ) ; if ( ! VAR_706 ) goto VAR_707 ; if ( METHOD_183 ( VAR_708 , & VAR_709 , VAR_710 ) == - 1 ) goto VAR_711 ; METHOD_184 ( VAR_712 ) ; VAR_713 = METHOD_185 ( VAR_714 -> VAR_715 . VAR_716 . VAR_717 ) ; if ( ! VAR_718 ) goto VAR_719 ; if ( METHOD_186 ( VAR_720 , & VAR_721 , VAR_722 ) == - 1 ) goto VAR_723 ; METHOD_187 ( VAR_724 ) ; break ; case VAR_725 : VAR_726 = METHOD_188 ( VAR_727 , VAR_728 , VAR_729 ) ; if ( ! VAR_730 ) goto VAR_731 ; VAR_732 = METHOD_189 ( VAR_733 -> VAR_734 . VAR_735 . VAR_736 ) ; if ( ! VAR_737 ) goto VAR_738 ; if ( METHOD_190 ( VAR_739 , & VAR_740 , VAR_741 ) == - 1 ) goto VAR_742 ; METHOD_191 ( VAR_743 ) ; VAR_744 = METHOD_192 ( VAR_745 -> VAR_746 . VAR_747 . VAR_748 ) ; if ( ! VAR_749 ) goto VAR_750 ; if ( METHOD_193 ( VAR_751 , & VAR_752 , VAR_753 ) == - 1 ) goto VAR_754 ; METHOD_194 ( VAR_755 ) ; break ; case VAR_756 : VAR_757 = METHOD_195 ( VAR_758 , VAR_759 , VAR_760 ) ; if ( ! VAR_761 ) goto VAR_762 ; VAR_763 = METHOD_196 ( VAR_764 -> VAR_765 . VAR_766 . VAR_767 , METHOD_197 ) ; if ( ! VAR_768 ) goto VAR_769 ; if ( METHOD_198 ( VAR_770 , & VAR_771 , VAR_772 ) == - 1 ) goto VAR_773 ; METHOD_199 ( VAR_774 ) ; VAR_775 = METHOD_200 ( VAR_776 -> VAR_777 . VAR_778 . VAR_779 , VAR_780 ) ; if ( ! VAR_781 ) goto VAR_782 ; if ( METHOD_201 ( VAR_783 , & VAR_784 , VAR_785 ) == - 1 ) goto VAR_786 ; METHOD_202 ( VAR_787 ) ; VAR_788 = METHOD_203 ( VAR_789 -> VAR_790 . VAR_791 . VAR_792 , METHOD_204 ) ; if ( ! VAR_793 ) goto VAR_794 ; if ( METHOD_205 ( VAR_795 , & VAR_796 , VAR_797 ) == - 1 ) goto VAR_798 ; METHOD_206 ( VAR_799 ) ; VAR_800 = METHOD_207 ( VAR_801 -> VAR_802 . VAR_803 . VAR_804 , METHOD_208 ) ; if ( ! VAR_805 ) goto VAR_806 ; if ( METHOD_209 ( VAR_807 , & VAR_808 , VAR_809 ) == - 1 ) goto VAR_810 ; METHOD_210 ( VAR_811 ) ; break ; case VAR_812 : VAR_813 = METHOD_211 ( VAR_814 , VAR_815 , VAR_816 ) ; if ( ! VAR_817 ) goto VAR_818 ; VAR_819 = METHOD_212 ( VAR_820 -> VAR_821 . VAR_822 . VAR_823 ) ; if ( ! VAR_824 ) goto VAR_825 ; if ( METHOD_213 ( VAR_826 , & VAR_827 , VAR_828 ) == - 1 ) goto VAR_829 ; METHOD_214 ( VAR_830 ) ; VAR_831 = METHOD_215 ( VAR_832 -> VAR_833 . VAR_834 . VAR_835 ) ; if ( ! VAR_836 ) goto VAR_837 ; if ( METHOD_216 ( VAR_838 , & VAR_839 , VAR_840 ) == - 1 ) goto VAR_841 ; METHOD_217 ( VAR_842 ) ; break ; case VAR_843 : VAR_844 = METHOD_218 ( VAR_845 , VAR_846 , VAR_847 ) ; if ( ! VAR_848 ) goto VAR_849 ; VAR_850 = METHOD_219 ( VAR_851 -> VAR_852 . VAR_853 . VAR_854 , VAR_855 ) ; if ( ! VAR_856 ) goto VAR_857 ; if ( METHOD_220 ( VAR_858 , & VAR_859 , VAR_860 ) == - 1 ) goto VAR_861 ; METHOD_221 ( VAR_862 ) ; break ; case VAR_863 : VAR_864 = METHOD_222 ( VAR_865 , VAR_866 , VAR_867 ) ; if ( ! VAR_868 ) goto VAR_869 ; VAR_870 = METHOD_223 ( VAR_871 -> VAR_872 . VAR_873 . VAR_874 ) ; if ( ! VAR_875 ) goto VAR_876 ; if ( METHOD_224 ( VAR_877 , & VAR_878 , VAR_879 ) == - 1 ) goto VAR_880 ; METHOD_225 ( VAR_881 ) ; VAR_882 = METHOD_226 ( VAR_883 -> VAR_884 . VAR_885 . VAR_886 , VAR_887 ) ; if ( ! VAR_888 ) goto VAR_889 ; if ( METHOD_227 ( VAR_890 , & VAR_891 , VAR_892 ) == - 1 ) goto VAR_893 ; METHOD_228 ( VAR_894 ) ; VAR_895 = METHOD_229 ( VAR_896 -> VAR_897 . VAR_898 . VAR_899 ) ; if ( ! VAR_900 ) goto VAR_901 ; if ( METHOD_230 ( VAR_902 , & VAR_903 , VAR_904 ) == - 1 ) goto VAR_905 ; METHOD_231 ( VAR_906 ) ; break ; case VAR_907 : VAR_908 = METHOD_232 ( VAR_909 , VAR_910 , VAR_911 ) ; if ( ! VAR_912 ) goto VAR_913 ; VAR_914 = METHOD_233 ( VAR_915 -> VAR_916 . VAR_917 . VAR_918 , METHOD_234 ) ; if ( ! VAR_919 ) goto VAR_920 ; if ( METHOD_235 ( VAR_921 , & VAR_922 , VAR_923 ) == - 1 ) goto VAR_924 ; METHOD_236 ( VAR_925 ) ; break ; case VAR_926 : VAR_927 = METHOD_237 ( VAR_928 , VAR_929 , VAR_930 ) ; if ( ! VAR_931 ) goto VAR_932 ; VAR_933 = METHOD_238 ( VAR_934 -> VAR_935 . VAR_936 . VAR_937 , METHOD_239 ) ; if ( ! VAR_938 ) goto VAR_939 ; if ( METHOD_240 ( VAR_940 , & VAR_941 , VAR_942 ) == - 1 ) goto VAR_943 ; METHOD_241 ( VAR_944 ) ; break ; case VAR_945 : VAR_946 = METHOD_242 ( VAR_947 , VAR_948 , VAR_949 ) ; if ( ! VAR_950 ) goto VAR_951 ; VAR_952 = METHOD_243 ( VAR_953 -> VAR_954 . VAR_955 . VAR_956 ) ; if ( ! VAR_957 ) goto VAR_958 ; if ( METHOD_244 ( VAR_959 , & VAR_960 , VAR_961 ) == - 1 ) goto VAR_962 ; METHOD_245 ( VAR_963 ) ; break ; case VAR_964 : VAR_965 = METHOD_246 ( VAR_966 , VAR_967 , VAR_968 ) ; if ( ! VAR_969 ) goto VAR_970 ; break ; case VAR_971 : VAR_972 = METHOD_247 ( VAR_973 , VAR_974 , VAR_975 ) ; if ( ! VAR_976 ) goto VAR_977 ; break ; case VAR_978 : VAR_979 = METHOD_248 ( VAR_980 , VAR_981 , VAR_982 ) ; if ( ! VAR_983 ) goto VAR_984 ; break ; } VAR_985 = METHOD_249 ( VAR_986 -> VAR_987 ) ; if ( ! VAR_988 ) goto VAR_989 ; if ( METHOD_250 ( VAR_990 , & VAR_991 , VAR_992 ) < 0 ) goto VAR_993 ; METHOD_251 ( VAR_994 ) ; VAR_995 = METHOD_252 ( VAR_996 -> VAR_997 ) ; if ( ! VAR_998 ) goto VAR_999 ; if ( METHOD_253 ( VAR_1000 , & VAR_1001 , VAR_1002 ) < 0 ) goto VAR_1003 ; METHOD_254 ( VAR_1004 ) ; return VAR_1005 ; VAR_1006 : METHOD_255 ( VAR_1007 ) ; METHOD_256 ( VAR_1008 ) ; return VAR_1009 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = ( TYPE_3 ) VAR_2 ; TYPE_4 * VAR_3 = VAR_4 , * VAR_5 = VAR_6 ; if ( ! VAR_7 ) { METHOD_1 ( VAR_8 ) ; return VAR_9 ; } switch ( VAR_10 -> VAR_11 ) { case VAR_12 : VAR_13 = METHOD_2 ( VAR_14 , VAR_15 , VAR_16 ) ; if ( ! VAR_17 ) goto VAR_18 ; VAR_19 = METHOD_3 ( VAR_20 -> VAR_21 . VAR_22 . VAR_23 ) ; if ( ! VAR_24 ) goto VAR_25 ; if ( METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 ) == - 1 ) goto VAR_29 ; METHOD_5 ( VAR_30 ) ; VAR_31 = METHOD_6 ( VAR_32 -> VAR_33 . VAR_34 . VAR_35 ) ; if ( ! VAR_36 ) goto VAR_37 ; if ( METHOD_7 ( VAR_38 , & VAR_39 , VAR_40 ) == - 1 ) goto VAR_41 ; METHOD_8 ( VAR_42 ) ; VAR_43 = METHOD_9 ( VAR_44 -> VAR_45 . VAR_46 . VAR_47 , METHOD_10 ) ; if ( ! VAR_48 ) goto VAR_49 ; if ( METHOD_11 ( VAR_50 , & VAR_51 , VAR_52 ) == - 1 ) goto VAR_53 ; METHOD_12 ( VAR_54 ) ; VAR_55 = METHOD_13 ( VAR_56 -> VAR_57 . VAR_58 . VAR_59 , METHOD_14 ) ; if ( ! VAR_60 ) goto VAR_61 ; if ( METHOD_15 ( VAR_62 , & VAR_63 , VAR_64 ) == - 1 ) goto VAR_65 ; METHOD_16 ( VAR_66 ) ; VAR_67 = METHOD_17 ( VAR_68 -> VAR_69 . VAR_70 . VAR_71 ) ; if ( ! VAR_72 ) goto VAR_73 ; if ( METHOD_18 ( VAR_74 , & VAR_75 , VAR_76 ) == - 1 ) goto VAR_77 ; METHOD_19 ( VAR_78 ) ; VAR_79 = METHOD_20 ( VAR_80 -> VAR_81 . VAR_82 . VAR_83 ) ; if ( ! VAR_84 ) goto VAR_85 ; if ( METHOD_21 ( VAR_86 , & VAR_87 , VAR_88 ) == - 1 ) goto VAR_89 ; METHOD_22 ( VAR_90 ) ; break ; case VAR_91 : VAR_92 = METHOD_23 ( VAR_93 , VAR_94 , VAR_95 ) ; if ( ! VAR_96 ) goto VAR_97 ; VAR_98 = METHOD_24 ( VAR_99 -> VAR_100 . VAR_101 . VAR_102 ) ; if ( ! VAR_103 ) goto VAR_104 ; if ( METHOD_25 ( VAR_105 , & VAR_106 , VAR_107 ) == - 1 ) goto VAR_108 ; METHOD_26 ( VAR_109 ) ; VAR_110 = METHOD_27 ( VAR_111 -> VAR_112 . VAR_113 . VAR_114 ) ; if ( ! VAR_115 ) goto VAR_116 ; if ( METHOD_28 ( VAR_117 , & VAR_118 , VAR_119 ) == - 1 ) goto VAR_120 ; METHOD_29 ( VAR_121 ) ; VAR_122 = METHOD_30 ( VAR_123 -> VAR_124 . VAR_125 . VAR_126 , METHOD_31 ) ; if ( ! VAR_127 ) goto VAR_128 ; if ( METHOD_32 ( VAR_129 , & VAR_130 , VAR_131 ) == - 1 ) goto VAR_132 ; METHOD_33 ( VAR_133 ) ; VAR_134 = METHOD_34 ( VAR_135 -> VAR_136 . VAR_137 . VAR_138 , METHOD_35 ) ; if ( ! VAR_139 ) goto VAR_140 ; if ( METHOD_36 ( VAR_141 , & VAR_142 , VAR_143 ) == - 1 ) goto VAR_144 ; METHOD_37 ( VAR_145 ) ; VAR_146 = METHOD_38 ( VAR_147 -> VAR_148 . VAR_149 . VAR_150 ) ; if ( ! VAR_151 ) goto VAR_152 ; if ( METHOD_39 ( VAR_153 , & VAR_154 , VAR_155 ) == - 1 ) goto VAR_156 ; METHOD_40 ( VAR_157 ) ; VAR_158 = METHOD_41 ( VAR_159 -> VAR_160 . VAR_161 . VAR_162 ) ; if ( ! VAR_163 ) goto VAR_164 ; if ( METHOD_42 ( VAR_165 , & VAR_166 , VAR_167 ) == - 1 ) goto VAR_168 ; METHOD_43 ( VAR_169 ) ; break ; case VAR_170 : VAR_171 = METHOD_44 ( VAR_172 , VAR_173 , VAR_174 ) ; if ( ! VAR_175 ) goto VAR_176 ; VAR_177 = METHOD_45 ( VAR_178 -> VAR_179 . VAR_180 . VAR_181 ) ; if ( ! VAR_182 ) goto VAR_183 ; if ( METHOD_46 ( VAR_184 , & VAR_185 , VAR_186 ) == - 1 ) goto VAR_187 ; METHOD_47 ( VAR_188 ) ; VAR_189 = METHOD_48 ( VAR_190 -> VAR_191 . VAR_192 . VAR_193 , METHOD_49 ) ; if ( ! VAR_194 ) goto VAR_195 ; if ( METHOD_50 ( VAR_196 , & VAR_197 , VAR_198 ) == - 1 ) goto VAR_199 ; METHOD_51 ( VAR_200 ) ; VAR_201 = METHOD_52 ( VAR_202 -> VAR_203 . VAR_204 . VAR_205 , VAR_206 ) ; if ( ! VAR_207 ) goto VAR_208 ; if ( METHOD_53 ( VAR_209 , & VAR_210 , VAR_211 ) == - 1 ) goto VAR_212 ; METHOD_54 ( VAR_213 ) ; VAR_214 = METHOD_55 ( VAR_215 -> VAR_216 . VAR_217 . VAR_218 , METHOD_56 ) ; if ( ! VAR_219 ) goto VAR_220 ; if ( METHOD_57 ( VAR_221 , & VAR_222 , VAR_223 ) == - 1 ) goto VAR_224 ; METHOD_58 ( VAR_225 ) ; VAR_226 = METHOD_59 ( VAR_227 -> VAR_228 . VAR_229 . VAR_230 , METHOD_60 ) ; if ( ! VAR_231 ) goto VAR_232 ; if ( METHOD_61 ( VAR_233 , & VAR_234 , VAR_235 ) == - 1 ) goto VAR_236 ; METHOD_62 ( VAR_237 ) ; break ; case VAR_238 : VAR_239 = METHOD_63 ( VAR_240 , VAR_241 , VAR_242 ) ; if ( ! VAR_243 ) goto VAR_244 ; VAR_245 = METHOD_64 ( VAR_246 -> VAR_247 . VAR_248 . VAR_249 ) ; if ( ! VAR_250 ) goto VAR_251 ; if ( METHOD_65 ( VAR_252 , & VAR_253 , VAR_254 ) == - 1 ) goto VAR_255 ; METHOD_66 ( VAR_256 ) ; break ; case VAR_257 : VAR_258 = METHOD_67 ( VAR_259 , VAR_260 , VAR_261 ) ; if ( ! VAR_262 ) goto VAR_263 ; VAR_264 = METHOD_68 ( VAR_265 -> VAR_266 . VAR_267 . VAR_268 , METHOD_69 ) ; if ( ! VAR_269 ) goto VAR_270 ; if ( METHOD_70 ( VAR_271 , & VAR_272 , VAR_273 ) == - 1 ) goto VAR_274 ; METHOD_71 ( VAR_275 ) ; break ; case VAR_276 : VAR_277 = METHOD_72 ( VAR_278 , VAR_279 , VAR_280 ) ; if ( ! VAR_281 ) goto VAR_282 ; VAR_283 = METHOD_73 ( VAR_284 -> VAR_285 . VAR_286 . VAR_287 , METHOD_74 ) ; if ( ! VAR_288 ) goto VAR_289 ; if ( METHOD_75 ( VAR_290 , & VAR_291 , VAR_292 ) == - 1 ) goto VAR_293 ; METHOD_76 ( VAR_294 ) ; VAR_295 = METHOD_77 ( VAR_296 -> VAR_297 . VAR_298 . VAR_299 ) ; if ( ! VAR_300 ) goto VAR_301 ; if ( METHOD_78 ( VAR_302 , & VAR_303 , VAR_304 ) == - 1 ) goto VAR_305 ; METHOD_79 ( VAR_306 ) ; VAR_307 = METHOD_80 ( VAR_308 -> VAR_309 . VAR_310 . VAR_311 ) ; if ( ! VAR_312 ) goto VAR_313 ; if ( METHOD_81 ( VAR_314 , & VAR_315 , VAR_316 ) == - 1 ) goto VAR_317 ; METHOD_82 ( VAR_318 ) ; break ; case VAR_319 : VAR_320 = METHOD_83 ( VAR_321 , VAR_322 , VAR_323 ) ; if ( ! VAR_324 ) goto VAR_325 ; VAR_326 = METHOD_84 ( VAR_327 -> VAR_328 . VAR_329 . VAR_330 ) ; if ( ! VAR_331 ) goto VAR_332 ; if ( METHOD_85 ( VAR_333 , & VAR_334 , VAR_335 ) == - 1 ) goto VAR_336 ; METHOD_86 ( VAR_337 ) ; VAR_338 = METHOD_87 ( VAR_339 -> VAR_340 . VAR_341 . VAR_342 ) ; if ( ! VAR_343 ) goto VAR_344 ; if ( METHOD_88 ( VAR_345 , & VAR_346 , VAR_347 ) == - 1 ) goto VAR_348 ; METHOD_89 ( VAR_349 ) ; VAR_350 = METHOD_90 ( VAR_351 -> VAR_352 . VAR_353 . VAR_354 ) ; if ( ! VAR_355 ) goto VAR_356 ; if ( METHOD_91 ( VAR_357 , & VAR_358 , VAR_359 ) == - 1 ) goto VAR_360 ; METHOD_92 ( VAR_361 ) ; break ; case VAR_362 : VAR_363 = METHOD_93 ( VAR_364 , VAR_365 , VAR_366 ) ; if ( ! VAR_367 ) goto VAR_368 ; VAR_369 = METHOD_94 ( VAR_370 -> VAR_371 . VAR_372 . VAR_373 ) ; if ( ! VAR_374 ) goto VAR_375 ; if ( METHOD_95 ( VAR_376 , & VAR_377 , VAR_378 ) == - 1 ) goto VAR_379 ; METHOD_96 ( VAR_380 ) ; VAR_381 = METHOD_97 ( VAR_382 -> VAR_383 . VAR_384 . VAR_385 ) ; if ( ! VAR_386 ) goto VAR_387 ; if ( METHOD_98 ( VAR_388 , & VAR_389 , VAR_390 ) == - 1 ) goto VAR_391 ; METHOD_99 ( VAR_392 ) ; VAR_393 = METHOD_100 ( VAR_394 -> VAR_395 . VAR_396 . VAR_397 ) ; if ( ! VAR_398 ) goto VAR_399 ; if ( METHOD_101 ( VAR_400 , & VAR_401 , VAR_402 ) == - 1 ) goto VAR_403 ; METHOD_102 ( VAR_404 ) ; VAR_405 = METHOD_103 ( VAR_406 -> VAR_407 . VAR_408 . VAR_409 ) ; if ( ! VAR_410 ) goto VAR_411 ; if ( METHOD_104 ( VAR_412 , & VAR_413 , VAR_414 ) == - 1 ) goto VAR_415 ; METHOD_105 ( VAR_416 ) ; break ; case VAR_417 : VAR_418 = METHOD_106 ( VAR_419 , VAR_420 , VAR_421 ) ; if ( ! VAR_422 ) goto VAR_423 ; VAR_424 = METHOD_107 ( VAR_425 -> VAR_426 . VAR_427 . VAR_428 ) ; if ( ! VAR_429 ) goto VAR_430 ; if ( METHOD_108 ( VAR_431 , & VAR_432 , VAR_433 ) == - 1 ) goto VAR_434 ; METHOD_109 ( VAR_435 ) ; VAR_436 = METHOD_110 ( VAR_437 -> VAR_438 . VAR_439 . VAR_440 ) ; if ( ! VAR_441 ) goto VAR_442 ; if ( METHOD_111 ( VAR_443 , & VAR_444 , VAR_445 ) == - 1 ) goto VAR_446 ; METHOD_112 ( VAR_447 ) ; VAR_448 = METHOD_113 ( VAR_449 -> VAR_450 . VAR_451 . VAR_452 , METHOD_114 ) ; if ( ! VAR_453 ) goto VAR_454 ; if ( METHOD_115 ( VAR_455 , & VAR_456 , VAR_457 ) == - 1 ) goto VAR_458 ; METHOD_116 ( VAR_459 ) ; VAR_460 = METHOD_117 ( VAR_461 -> VAR_462 . VAR_463 . VAR_464 , METHOD_118 ) ; if ( ! VAR_465 ) goto VAR_466 ; if ( METHOD_119 ( VAR_467 , & VAR_468 , VAR_469 ) == - 1 ) goto VAR_470 ; METHOD_120 ( VAR_471 ) ; VAR_472 = METHOD_121 ( VAR_473 -> VAR_474 . VAR_475 . VAR_476 ) ; if ( ! VAR_477 ) goto VAR_478 ; if ( METHOD_122 ( VAR_479 , & VAR_480 , VAR_481 ) == - 1 ) goto VAR_482 ; METHOD_123 ( VAR_483 ) ; break ; case VAR_484 : VAR_485 = METHOD_124 ( VAR_486 , VAR_487 , VAR_488 ) ; if ( ! VAR_489 ) goto VAR_490 ; VAR_491 = METHOD_125 ( VAR_492 -> VAR_493 . VAR_494 . VAR_495 ) ; if ( ! VAR_496 ) goto VAR_497 ; if ( METHOD_126 ( VAR_498 , & VAR_499 , VAR_500 ) == - 1 ) goto VAR_501 ; METHOD_127 ( VAR_502 ) ; VAR_503 = METHOD_128 ( VAR_504 -> VAR_505 . VAR_506 . VAR_507 ) ; if ( ! VAR_508 ) goto VAR_509 ; if ( METHOD_129 ( VAR_510 , & VAR_511 , VAR_512 ) == - 1 ) goto VAR_513 ; METHOD_130 ( VAR_514 ) ; VAR_515 = METHOD_131 ( VAR_516 -> VAR_517 . VAR_518 . VAR_519 , METHOD_132 ) ; if ( ! VAR_520 ) goto VAR_521 ; if ( METHOD_133 ( VAR_522 , & VAR_523 , VAR_524 ) == - 1 ) goto VAR_525 ; METHOD_134 ( VAR_526 ) ; VAR_527 = METHOD_135 ( VAR_528 -> VAR_529 . VAR_530 . VAR_531 , METHOD_136 ) ; if ( ! VAR_532 ) goto VAR_533 ; if ( METHOD_137 ( VAR_534 , & VAR_535 , VAR_536 ) == - 1 ) goto VAR_537 ; METHOD_138 ( VAR_538 ) ; VAR_539 = METHOD_139 ( VAR_540 -> VAR_541 . VAR_542 . VAR_543 ) ; if ( ! VAR_544 ) goto VAR_545 ; if ( METHOD_140 ( VAR_546 , & VAR_547 , VAR_548 ) == - 1 ) goto VAR_549 ; METHOD_141 ( VAR_550 ) ; break ; case VAR_551 : VAR_552 = METHOD_142 ( VAR_553 , VAR_554 , VAR_555 ) ; if ( ! VAR_556 ) goto VAR_557 ; VAR_558 = METHOD_143 ( VAR_559 -> VAR_560 . VAR_561 . VAR_562 ) ; if ( ! VAR_563 ) goto VAR_564 ; if ( METHOD_144 ( VAR_565 , & VAR_566 , VAR_567 ) == - 1 ) goto VAR_568 ; METHOD_145 ( VAR_569 ) ; VAR_570 = METHOD_146 ( VAR_571 -> VAR_572 . VAR_573 . VAR_574 , METHOD_147 ) ; if ( ! VAR_575 ) goto VAR_576 ; if ( METHOD_148 ( VAR_577 , & VAR_578 , VAR_579 ) == - 1 ) goto VAR_580 ; METHOD_149 ( VAR_581 ) ; VAR_582 = METHOD_150 ( VAR_583 -> VAR_584 . VAR_585 . VAR_586 , METHOD_151 ) ; if ( ! VAR_587 ) goto VAR_588 ; if ( METHOD_152 ( VAR_589 , & VAR_590 , VAR_591 ) == - 1 ) goto VAR_592 ; METHOD_153 ( VAR_593 ) ; break ; case VAR_594 : VAR_595 = METHOD_154 ( VAR_596 , VAR_597 , VAR_598 ) ; if ( ! VAR_599 ) goto VAR_600 ; VAR_601 = METHOD_155 ( VAR_602 -> VAR_603 . VAR_604 . VAR_605 ) ; if ( ! VAR_606 ) goto VAR_607 ; if ( METHOD_156 ( VAR_608 , & VAR_609 , VAR_610 ) == - 1 ) goto VAR_611 ; METHOD_157 ( VAR_612 ) ; VAR_613 = METHOD_158 ( VAR_614 -> VAR_615 . VAR_616 . VAR_617 , METHOD_159 ) ; if ( ! VAR_618 ) goto VAR_619 ; if ( METHOD_160 ( VAR_620 , & VAR_621 , VAR_622 ) == - 1 ) goto VAR_623 ; METHOD_161 ( VAR_624 ) ; VAR_625 = METHOD_162 ( VAR_626 -> VAR_627 . VAR_628 . VAR_629 , METHOD_163 ) ; if ( ! VAR_630 ) goto VAR_631 ; if ( METHOD_164 ( VAR_632 , & VAR_633 , VAR_634 ) == - 1 ) goto VAR_635 ; METHOD_165 ( VAR_636 ) ; break ; case VAR_637 : VAR_638 = METHOD_166 ( VAR_639 , VAR_640 , VAR_641 ) ; if ( ! VAR_642 ) goto VAR_643 ; VAR_644 = METHOD_167 ( VAR_645 -> VAR_646 . VAR_647 . VAR_648 , VAR_649 ) ; if ( ! VAR_650 ) goto VAR_651 ; if ( METHOD_168 ( VAR_652 , & VAR_653 , VAR_654 ) == - 1 ) goto VAR_655 ; METHOD_169 ( VAR_656 ) ; VAR_657 = METHOD_170 ( VAR_658 -> VAR_659 . VAR_660 . VAR_661 , METHOD_171 ) ; if ( ! VAR_662 ) goto VAR_663 ; if ( METHOD_172 ( VAR_664 , & VAR_665 , VAR_666 ) == - 1 ) goto VAR_667 ; METHOD_173 ( VAR_668 ) ; VAR_669 = METHOD_174 ( VAR_670 -> VAR_671 . VAR_672 . VAR_673 ) ; if ( ! VAR_674 ) goto VAR_675 ; if ( METHOD_175 ( VAR_676 , & VAR_677 , VAR_678 ) == - 1 ) goto VAR_679 ; METHOD_176 ( VAR_680 ) ; break ; case VAR_681 : VAR_682 = METHOD_177 ( VAR_683 , VAR_684 , VAR_685 ) ; if ( ! VAR_686 ) goto VAR_687 ; VAR_688 = METHOD_178 ( VAR_689 -> VAR_690 . VAR_691 . VAR_692 , VAR_693 ) ; if ( ! VAR_694 ) goto VAR_695 ; if ( METHOD_179 ( VAR_696 , & VAR_697 , VAR_698 ) == - 1 ) goto VAR_699 ; METHOD_180 ( VAR_700 ) ; VAR_701 = METHOD_181 ( VAR_702 -> VAR_703 . VAR_704 . VAR_705 , METHOD_182 ) ; if ( ! VAR_706 ) goto VAR_707 ; if ( METHOD_183 ( VAR_708 , & VAR_709 , VAR_710 ) == - 1 ) goto VAR_711 ; METHOD_184 ( VAR_712 ) ; VAR_713 = METHOD_185 ( VAR_714 -> VAR_715 . VAR_716 . VAR_717 ) ; if ( ! VAR_718 ) goto VAR_719 ; if ( METHOD_186 ( VAR_720 , & VAR_721 , VAR_722 ) == - 1 ) goto VAR_723 ; METHOD_187 ( VAR_724 ) ; break ; case VAR_725 : VAR_726 = METHOD_188 ( VAR_727 , VAR_728 , VAR_729 ) ; if ( ! VAR_730 ) goto VAR_731 ; VAR_732 = METHOD_189 ( VAR_733 -> VAR_734 . VAR_735 . VAR_736 ) ; if ( ! VAR_737 ) goto VAR_738 ; if ( METHOD_190 ( VAR_739 , & VAR_740 , VAR_741 ) == - 1 ) goto VAR_742 ; METHOD_191 ( VAR_743 ) ; VAR_744 = METHOD_192 ( VAR_745 -> VAR_746 . VAR_747 . VAR_748 ) ; if ( ! VAR_749 ) goto VAR_750 ; if ( METHOD_193 ( VAR_751 , & VAR_752 , VAR_753 ) == - 1 ) goto VAR_754 ; METHOD_194 ( VAR_755 ) ; break ; case VAR_756 : VAR_757 = METHOD_195 ( VAR_758 , VAR_759 , VAR_760 ) ; if ( ! VAR_761 ) goto VAR_762 ; VAR_763 = METHOD_196 ( VAR_764 -> VAR_765 . VAR_766 . VAR_767 , METHOD_197 ) ; if ( ! VAR_768 ) goto VAR_769 ; if ( METHOD_198 ( VAR_770 , & VAR_771 , VAR_772 ) == - 1 ) goto VAR_773 ; METHOD_199 ( VAR_774 ) ; VAR_775 = METHOD_200 ( VAR_776 -> VAR_777 . VAR_778 . VAR_779 , VAR_780 ) ; if ( ! VAR_781 ) goto VAR_782 ; if ( METHOD_201 ( VAR_783 , & VAR_784 , VAR_785 ) == - 1 ) goto VAR_786 ; METHOD_202 ( VAR_787 ) ; VAR_788 = METHOD_203 ( VAR_789 -> VAR_790 . VAR_791 . VAR_792 , METHOD_204 ) ; if ( ! VAR_793 ) goto VAR_794 ; if ( METHOD_205 ( VAR_795 , & VAR_796 , VAR_797 ) == - 1 ) goto VAR_798 ; METHOD_206 ( VAR_799 ) ; VAR_800 = METHOD_207 ( VAR_801 -> VAR_802 . VAR_803 . VAR_804 , METHOD_208 ) ; if ( ! VAR_805 ) goto VAR_806 ; if ( METHOD_209 ( VAR_807 , & VAR_808 , VAR_809 ) == - 1 ) goto VAR_810 ; METHOD_210 ( VAR_811 ) ; break ; case VAR_812 : VAR_813 = METHOD_211 ( VAR_814 , VAR_815 , VAR_816 ) ; if ( ! VAR_817 ) goto VAR_818 ; VAR_819 = METHOD_212 ( VAR_820 -> VAR_821 . VAR_822 . VAR_823 ) ; if ( ! VAR_824 ) goto VAR_825 ; if ( METHOD_213 ( VAR_826 , & VAR_827 , VAR_828 ) == - 1 ) goto VAR_829 ; METHOD_214 ( VAR_830 ) ; VAR_831 = METHOD_215 ( VAR_832 -> VAR_833 . VAR_834 . VAR_835 ) ; if ( ! VAR_836 ) goto VAR_837 ; if ( METHOD_216 ( VAR_838 , & VAR_839 , VAR_840 ) == - 1 ) goto VAR_841 ; METHOD_217 ( VAR_842 ) ; break ; case VAR_843 : VAR_844 = METHOD_218 ( VAR_845 , VAR_846 , VAR_847 ) ; if ( ! VAR_848 ) goto VAR_849 ; VAR_850 = METHOD_219 ( VAR_851 -> VAR_852 . VAR_853 . VAR_854 , VAR_855 ) ; if ( ! VAR_856 ) goto VAR_857 ; if ( METHOD_220 ( VAR_858 , & VAR_859 , VAR_860 ) == - 1 ) goto VAR_861 ; METHOD_221 ( VAR_862 ) ; break ; case VAR_863 : VAR_864 = METHOD_222 ( VAR_865 , VAR_866 , VAR_867 ) ; if ( ! VAR_868 ) goto VAR_869 ; VAR_870 = METHOD_223 ( VAR_871 -> VAR_872 . VAR_873 . VAR_874 ) ; if ( ! VAR_875 ) goto VAR_876 ; if ( METHOD_224 ( VAR_877 , & VAR_878 , VAR_879 ) == - 1 ) goto VAR_880 ; METHOD_225 ( VAR_881 ) ; VAR_882 = METHOD_226 ( VAR_883 -> VAR_884 . VAR_885 . VAR_886 , VAR_887 ) ; if ( ! VAR_888 ) goto VAR_889 ; if ( METHOD_227 ( VAR_890 , & VAR_891 , VAR_892 ) == - 1 ) goto VAR_893 ; METHOD_228 ( VAR_894 ) ; VAR_895 = METHOD_229 ( VAR_896 -> VAR_897 . VAR_898 . VAR_899 ) ; if ( ! VAR_900 ) goto VAR_901 ; if ( METHOD_230 ( VAR_902 , & VAR_903 , VAR_904 ) == - 1 ) goto VAR_905 ; METHOD_231 ( VAR_906 ) ; break ; case VAR_907 : VAR_908 = METHOD_232 ( VAR_909 , VAR_910 , VAR_911 ) ; if ( ! VAR_912 ) goto VAR_913 ; VAR_914 = METHOD_233 ( VAR_915 -> VAR_916 . VAR_917 . VAR_918 , METHOD_234 ) ; if ( ! VAR_919 ) goto VAR_920 ; if ( METHOD_235 ( VAR_921 , & VAR_922 , VAR_923 ) == - 1 ) goto VAR_924 ; METHOD_236 ( VAR_925 ) ; break ; case VAR_926 : VAR_927 = METHOD_237 ( VAR_928 , VAR_929 , VAR_930 ) ; if ( ! VAR_931 ) goto VAR_932 ; VAR_933 = METHOD_238 ( VAR_934 -> VAR_935 . VAR_936 . VAR_937 , METHOD_239 ) ; if ( ! VAR_938 ) goto VAR_939 ; if ( METHOD_240 ( VAR_940 , & VAR_941 , VAR_942 ) == - 1 ) goto VAR_943 ; METHOD_241 ( VAR_944 ) ; break ; case VAR_945 : VAR_946 = METHOD_242 ( VAR_947 , VAR_948 , VAR_949 ) ; if ( ! VAR_950 ) goto VAR_951 ; VAR_952 = METHOD_243 ( VAR_953 -> VAR_954 . VAR_955 . VAR_956 ) ; if ( ! VAR_957 ) goto VAR_958 ; if ( METHOD_244 ( VAR_959 , & VAR_960 , VAR_961 ) == - 1 ) goto VAR_962 ; METHOD_245 ( VAR_963 ) ; break ; case VAR_964 : VAR_965 = METHOD_246 ( VAR_966 , VAR_967 , VAR_968 ) ; if ( ! VAR_969 ) goto VAR_970 ; break ; case VAR_971 : VAR_972 = METHOD_247 ( VAR_973 , VAR_974 , VAR_975 ) ; if ( ! VAR_976 ) goto VAR_977 ; break ; case VAR_978 : VAR_979 = METHOD_248 ( VAR_980 , VAR_981 , VAR_982 ) ; if ( ! VAR_983 ) goto VAR_984 ; break ; } VAR_985 = METHOD_249 ( VAR_986 -> VAR_987 ) ; if ( ! VAR_988 ) goto VAR_989 ; if ( METHOD_250 ( VAR_990 , & VAR_991 , VAR_992 ) < 0 ) goto VAR_993 ; METHOD_251 ( VAR_994 ) ; VAR_995 = METHOD_252 ( VAR_996 -> VAR_997 ) ; if ( ! VAR_998 ) goto VAR_999 ; if ( METHOD_253 ( VAR_1000 , & VAR_1001 , VAR_1002 ) < 0 ) goto VAR_1003 ; METHOD_254 ( VAR_1004 ) ; return VAR_1005 ; VAR_1006 : METHOD_255 ( VAR_1007 ) ; METHOD_256 ( VAR_1008 ) ; return VAR_1009 ; }",205
206,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 ; if ( ! METHOD_1 ( VAR_4 ) ) return METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_8 -> VAR_9 == 9 && VAR_10 -> VAR_11 == 13 ) { if ( VAR_12 -> VAR_13 == 2 ) { if ( METHOD_3 ( VAR_14 ) ) return VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 , VAR_18 ) & VAR_19 ; } else if ( VAR_20 -> VAR_21 == 0 ) { if ( METHOD_5 ( VAR_22 ) ) return VAR_23 ; VAR_24 = VAR_25 ; } else {  METHOD_6 ( ) ;  } } else if ( VAR_26 -> VAR_27 == 14 && ( VAR_28 -> VAR_29 & 12 ) == 8 ) { if ( METHOD_7 ( VAR_30 ) ) return VAR_31 ; VAR_32 = ( ( VAR_33 -> VAR_34 & 3 ) << 3 ) | ( VAR_35 -> VAR_36 & 7 ) ; } else {  METHOD_8 ( ) ;  } if ( ! METHOD_9 ( VAR_37 , VAR_38 ) ) return VAR_39 ; if ( VAR_40 -> VAR_41 ) { if ( METHOD_10 ( VAR_42 ) ) return VAR_43 ; METHOD_11 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 ) ; } else { VAR_48 -> VAR_49 = METHOD_12 ( VAR_50 , VAR_51 ) ; } return VAR_52 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 ; if ( ! METHOD_1 ( VAR_4 ) ) return METHOD_2 ( VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_8 -> VAR_9 == 9 && VAR_10 -> VAR_11 == 13 ) { if ( VAR_12 -> VAR_13 == 2 ) { if ( METHOD_3 ( VAR_14 ) ) return VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 , VAR_18 ) & VAR_19 ; } else if ( VAR_20 -> VAR_21 == 0 ) { if ( METHOD_5 ( VAR_22 ) ) return VAR_23 ; VAR_24 = VAR_25 ; } else { return VAR_43 ; } } else if ( VAR_35 -> VAR_27 == 0 && VAR_35 -> VAR_34 == 9 ) { if ( METHOD_7 ( VAR_50 ) ) return VAR_43 ; VAR_51 = VAR_25 ; } else if ( VAR_26 -> VAR_27 == 14 && ( VAR_28 -> VAR_29 & 12 ) == 8 ) { if ( METHOD_7 ( VAR_30 ) ) return VAR_31 ; VAR_32 = ( ( VAR_33 -> VAR_34 & 3 ) << 3 ) | ( VAR_35 -> VAR_36 & 7 ) ; } else { return VAR_43 ; } if ( ! METHOD_9 ( VAR_37 , VAR_38 ) ) return VAR_39 ; if ( VAR_40 -> VAR_41 ) { if ( METHOD_10 ( VAR_42 ) ) return VAR_43 ; METHOD_11 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 ) ; } else { VAR_48 -> VAR_49 = METHOD_12 ( VAR_50 , VAR_51 ) ; } return VAR_52 ; }",206
207," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 )  { struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; TYPE_2 VAR_3 ; if ( VAR_4 -> VAR_5 [ VAR_6 ] == VAR_7 ) return ; STRUCT_OR_UNION_4 = & VAR_8 -> STRUCT_OR_UNION_5 [ VAR_9 ] ; VAR_10 = STRUCT_OR_UNION_6 -> VAR_11 ;  METHOD_1 ( VAR_12 , & STRUCT_OR_UNION_7 -> VAR_13 , VAR_14 ) ;  VAR_15 = METHOD_2 ( VAR_16 -> VAR_17 ++ ) ; VAR_18 -> VAR_19 [ VAR_20 ] = VAR_21 ; METHOD_3 ( VAR_22 ) ; VAR_23 -> VAR_24 [ VAR_25 ] -> VAR_26 = 0 ; METHOD_4 ( VAR_27 -> VAR_28 [ VAR_29 ] ) ; VAR_30 -> VAR_31 [ VAR_32 ] = VAR_33 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; TYPE_2 VAR_3 ; if ( VAR_4 -> VAR_5 [ VAR_6 ] == VAR_7 ) return ; STRUCT_OR_UNION_4 = & VAR_8 -> STRUCT_OR_UNION_5 [ VAR_9 ] ; VAR_10 = STRUCT_OR_UNION_6 -> VAR_11 ; METHOD_1 ( VAR_12 , & STRUCT_OR_UNION_7 -> VAR_13 , VAR_14 ) ; VAR_15 = METHOD_2 ( VAR_16 -> VAR_17 ++ ) ; VAR_18 -> VAR_19 [ VAR_20 ] = VAR_21 ; METHOD_3 ( VAR_22 ) ; VAR_23 -> VAR_24 [ VAR_25 ] -> VAR_26 = 0 ; METHOD_4 ( VAR_27 -> VAR_28 [ VAR_29 ] ) ; VAR_30 -> VAR_31 [ VAR_32 ] = VAR_33 ; }",207
208,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = STRUCT_OR_UNION_3 -> VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 ; unsigned TYPE_5 VAR_6 ; TYPE_6 VAR_7 = - VAR_8 ; if ( ! METHOD_1 ( VAR_9 , VAR_10 ) ) return - VAR_11 ; METHOD_2 ( & VAR_12 -> VAR_13 , VAR_14 ) ; METHOD_3 ( ! VAR_15 -> VAR_16 ) VAR_17 : while ( ! METHOD_4 ) { METHOD_5 ( & VAR_18 -> VAR_19 , VAR_20 ) ; if ( STRUCT_OR_UNION_5 -> VAR_21 & VAR_22 ) return - VAR_23 ; if ( METHOD_6 ( VAR_24 -> VAR_25 , METHOD_7 ) ) return - VAR_26 ; METHOD_8 ( & VAR_27 -> VAR_28 , VAR_29 ) ; } VAR_30 -> VAR_31 = 1 ; VAR_32 = VAR_33 -> VAR_34 ; VAR_35 = min_t ( unsigned , VAR_36 , VAR_37 -> report_length ) ; METHOD_9 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_10 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 != 0 ) { METHOD_11 ( VAR_47 -> VAR_48 . VAR_49 -> VAR_50 , ""copy_from_usererror\\n"" ) ; VAR_51 = - VAR_52 ; goto VAR_53 ; } METHOD_12 ( & VAR_54 -> VAR_55 , VAR_56 ) ; if ( ! VAR_57 -> VAR_58 ) { METHOD_13 ( VAR_59 -> VAR_60 , VAR_61 ) ; goto VAR_62 ; } VAR_63 -> VAR_64 = 0 ; VAR_65 -> VAR_66 = 0 ; VAR_67 -> VAR_68 = VAR_69 ; VAR_70 -> VAR_71 = VAR_72 ; VAR_73 -> VAR_74 = VAR_75 ;  VAR_76 = METHOD_14 ( VAR_77 -> VAR_78 , VAR_79 , VAR_80 ) ;  if ( VAR_81 < 0 ) { METHOD_15 ( VAR_82 -> VAR_83 . VAR_84 -> VAR_85 , ""usb_ep_queueerroronintendpoint%zd\\n"" , VAR_86 ) ;  goto VAR_87 ;  } else { VAR_88 = VAR_89 ; }  METHOD_16 ( & VAR_90 -> VAR_91 , VAR_92 ) ;  return VAR_93 ; VAR_94 : METHOD_17 ( & VAR_95 -> VAR_96 , VAR_97 ) ;  VAR_98 :  VAR_99 -> VAR_100 = 0 ; METHOD_18 ( & VAR_101 -> VAR_102 , VAR_103 ) ; METHOD_19 ( & VAR_104 -> VAR_105 ) ; return VAR_106 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = STRUCT_OR_UNION_3 -> VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 ; unsigned TYPE_5 VAR_6 ; TYPE_6 VAR_7 = - VAR_8 ; if ( ! METHOD_1 ( VAR_9 , VAR_10 ) ) return - VAR_11 ; METHOD_2 ( & VAR_12 -> VAR_13 , VAR_14 ) ; METHOD_3 ( ! VAR_15 -> VAR_16 ) VAR_17 : while ( ! METHOD_4 ) { METHOD_5 ( & VAR_18 -> VAR_19 , VAR_20 ) ; if ( STRUCT_OR_UNION_5 -> VAR_21 & VAR_22 ) return - VAR_23 ; if ( METHOD_6 ( VAR_24 -> VAR_25 , METHOD_7 ) ) return - VAR_26 ; METHOD_8 ( & VAR_27 -> VAR_28 , VAR_29 ) ; } VAR_30 -> VAR_31 = 1 ; VAR_32 = VAR_33 -> VAR_34 ; VAR_35 = min_t ( unsigned , VAR_36 , VAR_37 -> report_length ) ; METHOD_9 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_10 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 != 0 ) { METHOD_11 ( VAR_47 -> VAR_48 . VAR_49 -> VAR_50 , ""copy_from_usererror\\n"" ) ; VAR_51 = - VAR_52 ; goto VAR_53 ; } METHOD_12 ( & VAR_54 -> VAR_55 , VAR_56 ) ; if ( ! VAR_57 -> VAR_58 ) { METHOD_13 ( VAR_59 -> VAR_60 , VAR_61 ) ; goto VAR_94 ; } else { VAR_88 = VAR_89 ; } METHOD_16 ( & VAR_90 -> VAR_91 , VAR_92 ) ; return VAR_93 ; VAR_94 : METHOD_17 ( & VAR_95 -> VAR_96 , VAR_97 ) ; VAR_98 : VAR_99 -> VAR_100 = 0 ; METHOD_18 ( & VAR_101 -> VAR_102 , VAR_103 ) ; METHOD_19 ( & VAR_104 -> VAR_105 ) ; return VAR_106 ; }",208
209,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 [ VAR_3 ] , VAR_4 [ VAR_5 ] , * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 . METHOD_2 ) ; if ( VAR_10 ) { METHOD_3 ( VAR_11 ) ; return ; } VAR_12 = METHOD_4 ( VAR_13 , VAR_14 , VAR_15 ""/init.lxc.static"" ) ; if ( VAR_16 < 0 || VAR_17 >= VAR_18 ) { METHOD_5 ( ""Pathnametoolongsearchingforlxc.init.static"" ) ; return ; } if ( ! METHOD_6 ( VAR_19 ) ) { METHOD_7 ( ""%sdoesnotexistonhost"" , VAR_20 ) ; return ; } VAR_21 = METHOD_8 ( VAR_22 , VAR_23 , ""%s%s"" , VAR_24 -> VAR_25 . METHOD_9 , ""/init.lxc.static"" ) ; if ( VAR_26 < 0 || VAR_27 >= VAR_28 ) { METHOD_10 ( ""Pathnametoolongforcontainer\'slxc.init.static"" ) ; return ; } if ( ! METHOD_11 ( VAR_29 ) ) { TYPE_3 * VAR_30 = METHOD_12 ( VAR_31 , ""wb"" ) ; if ( ! VAR_32 ) { METHOD_13 ( ""Failedtocreatemounttarget\'%s\'"" , VAR_33 ) ; return ; } METHOD_14 ( VAR_34 ) ; }  VAR_35 = METHOD_15 ( VAR_36 , VAR_37 , ""none"" , VAR_38 , VAR_39 ) ;  if ( VAR_40 < 0 ) METHOD_16 ( ""Failedtobindlxc.init.staticintocontainer"" ) ; METHOD_17 ( ""lxc.init.staticboundintocontainerat%s"" , VAR_41 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 [ VAR_3 ] , VAR_4 [ VAR_5 ] , * VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 . METHOD_2 ) ; if ( VAR_10 ) { METHOD_3 ( VAR_11 ) ; return ; } VAR_12 = METHOD_4 ( VAR_13 , VAR_14 , VAR_15 ""/init.lxc.static"" ) ; if ( VAR_16 < 0 || VAR_17 >= VAR_18 ) { METHOD_5 ( ""Pathnametoolongsearchingforlxc.init.static"" ) ; return ; } if ( ! METHOD_6 ( VAR_19 ) ) { METHOD_7 ( ""%sdoesnotexistonhost"" , VAR_20 ) ; return ; } VAR_21 = METHOD_8 ( VAR_22 , VAR_23 , ""%s%s"" , VAR_24 -> VAR_25 . METHOD_9 , ""/init.lxc.static"" ) ; if ( VAR_26 < 0 || VAR_27 >= VAR_28 ) { METHOD_10 ( ""Pathnametoolongforcontainer\'slxc.init.static"" ) ; return ; } if ( ! METHOD_11 ( VAR_29 ) ) { TYPE_3 * VAR_30 = METHOD_12 ( VAR_31 , ""wb"" ) ; if ( ! VAR_32 ) { METHOD_13 ( ""Failedtocreatemounttarget\'%s\'"" , VAR_33 ) ; return ; } METHOD_14 ( VAR_34 ) ; } VAR_35 = METHOD_15 ( VAR_36 , VAR_37 , ""none"" , VAR_38 , VAR_39 ) ; if ( VAR_40 < 0 ) METHOD_16 ( ""Failedtobindlxc.init.staticintocontainer"" ) ; METHOD_17 ( ""lxc.init.staticboundintocontainerat%s"" , VAR_41 ) ; }",209
210,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 = 0 , VAR_2 ; TYPE_2 VAR_3 = 0 ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; struct STRUCT_OR_UNION_6 * VAR_4 = STRUCT_OR_UNION_7 -> VAR_5 ; struct STRUCT_OR_UNION_8 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_9 * VAR_8 = VAR_9 ; TYPE_3 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 [ VAR_13 ] = { } ; TYPE_4 VAR_14 ; TYPE_5 VAR_15 ; struct STRUCT_OR_UNION_11 VAR_16 ; METHOD_3 ( STRUCT_OR_UNION_12 , STRUCT_OR_UNION_13 , ( unsigned TYPE_6 TYPE_7 ) METHOD_4 ( STRUCT_OR_UNION_14 ) -> VAR_17 , STRUCT_OR_UNION_15 -> VAR_18 . VAR_19 , STRUCT_OR_UNION_16 -> VAR_20 . VAR_21 , VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , METHOD_5 ( & VAR_26 , VAR_27 -> VAR_28 ) , METHOD_6 ( & VAR_29 , VAR_30 -> VAR_31 ) ) ; if ( METHOD_7 ( STRUCT_OR_UNION_17 -> VAR_32 ) ) VAR_33 -> VAR_34 &= ~ VAR_35 ; METHOD_8 ( VAR_36 | VAR_37 | VAR_38 | VAR_39 | VAR_40 | VAR_41 | VAR_42 ) if ( ! ( VAR_43 -> VAR_44 & METHOD_9 ) ) return 0 ; VAR_45 = METHOD_10 ( STRUCT_OR_UNION_18 , VAR_46 ) ; if ( VAR_47 ) return VAR_48 ; if ( METHOD_11 ( STRUCT_OR_UNION_19 , VAR_49 ) ) { VAR_50 = METHOD_12 ( STRUCT_OR_UNION_20 ) ; if ( VAR_51 ) return VAR_52 ; } VAR_53 = METHOD_13 ( STRUCT_OR_UNION_21 -> VAR_54 ) && VAR_55 -> VAR_56 & VAR_57 ; if ( VAR_58 ) {  VAR_59 = METHOD_14 ( STRUCT_OR_UNION_22 , 1 ) ;  if ( VAR_60 < 0 ) { METHOD_15 ( VAR_61 ) ; goto VAR_62 ; } } VAR_63 = METHOD_16 ( STRUCT_OR_UNION_23 , & VAR_64 , 1 , & VAR_65 ) ; if ( VAR_66 < 0 ) { VAR_67 = VAR_68 ; goto VAR_69 ; } else if ( VAR_70 ) { METHOD_17 ( VAR_71 , ""Anothercaseofrecursivelocking:\\n"" ) ; METHOD_18 ( ) ; } VAR_72 = 1 ; if ( VAR_73 ) { VAR_74 = METHOD_19 ( STRUCT_OR_UNION_24 , VAR_75 -> VAR_76 ) ; if ( VAR_77 )  goto VAR_78 ;  METHOD_20 ( STRUCT_OR_UNION_25 ) ; if ( METHOD_21 ( STRUCT_OR_UNION_26 ) >= VAR_79 -> VAR_80 ) { if ( METHOD_22 ( STRUCT_OR_UNION_27 ) ) { VAR_81 = METHOD_23 ( STRUCT_OR_UNION_28 , VAR_82 -> VAR_83 ) ; if ( VAR_84 ) goto VAR_85 ; } VAR_86 = METHOD_24 ( STRUCT_OR_UNION_29 , VAR_87 , VAR_88 -> VAR_89 ) ; } else VAR_90 = METHOD_25 ( STRUCT_OR_UNION_30 , VAR_91 , VAR_92 -> VAR_93 ) ; if ( VAR_94 < 0 ) { if ( VAR_95 != - VAR_96 ) METHOD_26 ( VAR_97 ) ; VAR_98 = - VAR_99 ; goto VAR_100 ; } } if ( ( VAR_101 -> VAR_102 & VAR_103 && ! METHOD_27 ( VAR_104 -> VAR_105 , STRUCT_OR_UNION_31 -> VAR_106 ) ) || ( VAR_107 -> VAR_108 & VAR_109 && ! METHOD_28 ( VAR_110 -> VAR_111 , STRUCT_OR_UNION_32 -> VAR_112 ) ) ) { if ( VAR_113 -> VAR_114 & VAR_115 && ! METHOD_29 ( VAR_116 -> VAR_117 , STRUCT_OR_UNION_33 -> VAR_118 ) && METHOD_30 ( VAR_119 , VAR_120 ) ) { VAR_121 [ VAR_122 ] = METHOD_31 ( VAR_123 , METHOD_32 ( VAR_124 -> VAR_125 ) ) ; if ( METHOD_33 ( VAR_126 [ VAR_127 ] ) ) { VAR_128 = METHOD_34 ( VAR_129 [ VAR_130 ] ) ; goto VAR_131 ; } } if ( VAR_132 -> VAR_133 & VAR_134 && ! METHOD_35 ( VAR_135 -> VAR_136 , STRUCT_OR_UNION_34 -> VAR_137 ) && METHOD_36 ( VAR_138 , VAR_139 ) ) { VAR_140 [ VAR_141 ] = METHOD_37 ( VAR_142 , METHOD_38 ( VAR_143 -> VAR_144 ) ) ; if ( METHOD_39 ( VAR_145 [ VAR_146 ] ) ) { VAR_147 = METHOD_40 ( VAR_148 [ VAR_149 ] ) ; goto VAR_150 ; } } VAR_151 = METHOD_41 ( VAR_152 , VAR_153 + 2 * METHOD_42 ( VAR_154 ) ) ; if ( METHOD_43 ( VAR_155 ) ) { VAR_156 = METHOD_44 ( VAR_157 ) ; METHOD_45 ( VAR_158 ) ; goto VAR_159 ; } VAR_160 = METHOD_46 ( STRUCT_OR_UNION_35 , VAR_161 ) ; if ( VAR_162 < 0 ) goto VAR_163 ; } else { VAR_164 = METHOD_47 ( VAR_165 , VAR_166 ) ; if ( METHOD_48 ( VAR_167 ) ) { VAR_168 = METHOD_49 ( VAR_169 ) ; METHOD_50 ( VAR_170 ) ; goto VAR_171 ; } } METHOD_51 ( STRUCT_OR_UNION_36 , VAR_172 ) ; METHOD_52 ( STRUCT_OR_UNION_37 ) ; VAR_173 = METHOD_53 ( VAR_174 , STRUCT_OR_UNION_38 , VAR_175 ) ; if ( VAR_176 < 0 ) METHOD_54 ( VAR_177 ) ; VAR_178 : METHOD_55 ( VAR_179 , VAR_180 ) ; VAR_181 : if ( VAR_182 && VAR_183 ) { METHOD_56 ( STRUCT_OR_UNION_39 , 1 , & VAR_184 , VAR_185 ) ; VAR_186 = 0 ; } VAR_187 : if ( VAR_188 ) METHOD_57 ( STRUCT_OR_UNION_40 , 1 ) ; VAR_189 : for ( VAR_190 = 0 ; VAR_191 < VAR_192 ; VAR_193 ++ ) METHOD_58 ( VAR_194 [ VAR_195 ] ) ; if ( ! VAR_196 && VAR_197 -> VAR_198 & VAR_199 ) { VAR_200 = METHOD_59 ( STRUCT_OR_UNION_41 , VAR_201 ) ; if ( VAR_202 < 0 ) METHOD_60 ( VAR_203 ) ; } if ( VAR_204 ) METHOD_61 ( STRUCT_OR_UNION_42 , 1 , & VAR_205 , VAR_206 ) ; METHOD_62 ( VAR_207 ) ; return VAR_208 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 = 0 , VAR_2 ; TYPE_2 VAR_3 = 0 ; struct STRUCT_OR_UNION_3 * STRUCT_OR_UNION_4 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; struct STRUCT_OR_UNION_6 * VAR_4 = STRUCT_OR_UNION_7 -> VAR_5 ; struct STRUCT_OR_UNION_8 * VAR_6 = METHOD_2 ( VAR_7 ) ; struct STRUCT_OR_UNION_9 * VAR_8 = VAR_9 ; TYPE_3 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 [ VAR_13 ] = { } ; TYPE_4 VAR_14 ; TYPE_5 VAR_15 ; struct STRUCT_OR_UNION_11 VAR_16 ; METHOD_3 ( STRUCT_OR_UNION_12 , STRUCT_OR_UNION_13 , ( unsigned TYPE_6 TYPE_7 ) METHOD_4 ( STRUCT_OR_UNION_14 ) -> VAR_17 , STRUCT_OR_UNION_15 -> VAR_18 . VAR_19 , STRUCT_OR_UNION_16 -> VAR_20 . VAR_21 , VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , METHOD_5 ( & VAR_26 , VAR_27 -> VAR_28 ) , METHOD_6 ( & VAR_29 , VAR_30 -> VAR_31 ) ) ; if ( METHOD_7 ( STRUCT_OR_UNION_17 -> VAR_32 ) ) VAR_33 -> VAR_34 &= ~ VAR_35 ; METHOD_8 ( VAR_36 | VAR_37 | VAR_38 | VAR_39 | VAR_40 | VAR_41 | VAR_42 ) if ( ! ( VAR_43 -> VAR_44 & METHOD_9 ) ) return 0 ; VAR_45 = METHOD_10 ( STRUCT_OR_UNION_18 , VAR_46 ) ; if ( VAR_47 ) return VAR_48 ; if ( METHOD_11 ( STRUCT_OR_UNION_19 , VAR_49 ) ) { VAR_50 = METHOD_12 ( STRUCT_OR_UNION_20 ) ; if ( VAR_51 ) return VAR_52 ; } VAR_53 = METHOD_13 ( STRUCT_OR_UNION_21 -> VAR_54 ) && VAR_55 -> VAR_56 & VAR_57 ; if ( VAR_58 ) { VAR_59 = METHOD_14 ( STRUCT_OR_UNION_22 , 1 ) ; if ( VAR_60 < 0 ) { METHOD_15 ( VAR_61 ) ; goto VAR_62 ; } } VAR_63 = METHOD_16 ( STRUCT_OR_UNION_23 , & VAR_64 , 1 , & VAR_65 ) ; if ( VAR_66 < 0 ) { VAR_67 = VAR_68 ; goto VAR_69 ; } else if ( VAR_70 ) { METHOD_17 ( VAR_71 , ""Anothercaseofrecursivelocking:\\n"" ) ; METHOD_18 ( ) ; } VAR_72 = 1 ; if ( VAR_73 ) { VAR_74 = METHOD_19 ( STRUCT_OR_UNION_24 , VAR_75 -> VAR_76 ) ; if ( VAR_77 ) goto VAR_78 ; METHOD_20 ( STRUCT_OR_UNION_25 ) ; if ( METHOD_21 ( STRUCT_OR_UNION_26 ) >= VAR_79 -> VAR_80 ) { if ( METHOD_22 ( STRUCT_OR_UNION_27 ) ) { VAR_81 = METHOD_23 ( STRUCT_OR_UNION_28 , VAR_82 -> VAR_83 ) ; if ( VAR_84 ) goto VAR_85 ; } VAR_86 = METHOD_24 ( STRUCT_OR_UNION_29 , VAR_87 , VAR_88 -> VAR_89 ) ; } else VAR_90 = METHOD_25 ( STRUCT_OR_UNION_30 , VAR_91 , VAR_92 -> VAR_93 ) ; if ( VAR_94 < 0 ) { if ( VAR_95 != - VAR_96 ) METHOD_26 ( VAR_97 ) ; VAR_98 = - VAR_99 ; goto VAR_100 ; } } if ( ( VAR_101 -> VAR_102 & VAR_103 && ! METHOD_27 ( VAR_104 -> VAR_105 , STRUCT_OR_UNION_31 -> VAR_106 ) ) || ( VAR_107 -> VAR_108 & VAR_109 && ! METHOD_28 ( VAR_110 -> VAR_111 , STRUCT_OR_UNION_32 -> VAR_112 ) ) ) { if ( VAR_113 -> VAR_114 & VAR_115 && ! METHOD_29 ( VAR_116 -> VAR_117 , STRUCT_OR_UNION_33 -> VAR_118 ) && METHOD_30 ( VAR_119 , VAR_120 ) ) { VAR_121 [ VAR_122 ] = METHOD_31 ( VAR_123 , METHOD_32 ( VAR_124 -> VAR_125 ) ) ; if ( METHOD_33 ( VAR_126 [ VAR_127 ] ) ) { VAR_128 = METHOD_34 ( VAR_129 [ VAR_130 ] ) ; goto VAR_131 ; } } if ( VAR_132 -> VAR_133 & VAR_134 && ! METHOD_35 ( VAR_135 -> VAR_136 , STRUCT_OR_UNION_34 -> VAR_137 ) && METHOD_36 ( VAR_138 , VAR_139 ) ) { VAR_140 [ VAR_141 ] = METHOD_37 ( VAR_142 , METHOD_38 ( VAR_143 -> VAR_144 ) ) ; if ( METHOD_39 ( VAR_145 [ VAR_146 ] ) ) { VAR_147 = METHOD_40 ( VAR_148 [ VAR_149 ] ) ; goto VAR_150 ; } } VAR_151 = METHOD_41 ( VAR_152 , VAR_153 + 2 * METHOD_42 ( VAR_154 ) ) ; if ( METHOD_43 ( VAR_155 ) ) { VAR_156 = METHOD_44 ( VAR_157 ) ; METHOD_45 ( VAR_158 ) ; goto VAR_159 ; } VAR_160 = METHOD_46 ( STRUCT_OR_UNION_35 , VAR_161 ) ; if ( VAR_162 < 0 ) goto VAR_163 ; } else { VAR_164 = METHOD_47 ( VAR_165 , VAR_166 ) ; if ( METHOD_48 ( VAR_167 ) ) { VAR_168 = METHOD_49 ( VAR_169 ) ; METHOD_50 ( VAR_170 ) ; goto VAR_171 ; } } METHOD_51 ( STRUCT_OR_UNION_36 , VAR_172 ) ; METHOD_52 ( STRUCT_OR_UNION_37 ) ; VAR_173 = METHOD_53 ( VAR_174 , STRUCT_OR_UNION_38 , VAR_175 ) ; if ( VAR_176 < 0 ) METHOD_54 ( VAR_177 ) ; VAR_178 : METHOD_55 ( VAR_179 , VAR_180 ) ; VAR_181 : if ( VAR_182 && VAR_183 ) { METHOD_56 ( STRUCT_OR_UNION_39 , 1 , & VAR_184 , VAR_185 ) ; VAR_186 = 0 ; } VAR_187 : if ( VAR_188 ) METHOD_57 ( STRUCT_OR_UNION_40 , 1 ) ; VAR_189 : for ( VAR_190 = 0 ; VAR_191 < VAR_192 ; VAR_193 ++ ) METHOD_58 ( VAR_194 [ VAR_195 ] ) ; if ( ! VAR_196 && VAR_197 -> VAR_198 & VAR_199 ) { VAR_200 = METHOD_59 ( STRUCT_OR_UNION_41 , VAR_201 ) ; if ( VAR_202 < 0 ) METHOD_60 ( VAR_203 ) ; } if ( VAR_204 ) METHOD_61 ( STRUCT_OR_UNION_42 , 1 , & VAR_205 , VAR_206 ) ; METHOD_62 ( VAR_207 ) ; return VAR_208 ; }",210
211,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( VAR_7 >= 0 ) ; METHOD_2 ( VAR_8 -> VAR_9 == VAR_10 ) ; VAR_11 = METHOD_3 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 == VAR_15 ) {  VAR_16 = METHOD_4 ( 64 , ( VAR_17 + 1 ) * 2 ) ;  VAR_18 -> VAR_19 = ( TYPE_6 * ) METHOD_5 ( sizeof ( TYPE_7 ) + VAR_20 * sizeof ( TYPE_8 * ) ) ; if ( VAR_21 -> VAR_22 == VAR_23 ) return VAR_24 ; METHOD_6 ( VAR_25 -> VAR_26 -> VAR_27 , 0 , VAR_28 * sizeof ( TYPE_9 * ) ) ; VAR_29 -> VAR_30 -> VAR_31 = VAR_32 ; } else if ( VAR_33 >= VAR_34 -> VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 -> VAR_40 * 2 ;  VAR_41 -> VAR_42 = ( TYPE_10 * ) METHOD_7 (  VAR_43 -> VAR_44 , sizeof ( TYPE_11 ) + VAR_45 * sizeof ( TYPE_12 * ) ) ; if ( VAR_46 -> VAR_47 == VAR_48 ) return VAR_49 ; for ( VAR_50 = VAR_51 -> VAR_52 -> VAR_53 ; VAR_54 < VAR_55 ; VAR_56 ++ ) VAR_57 -> VAR_58 -> VAR_59 [ VAR_60 ] = VAR_61 ; VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 -> VAR_71 [ VAR_72 ] = VAR_73 ; return VAR_74 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; METHOD_1 ( VAR_7 >= 0 ) ; METHOD_2 ( VAR_8 -> VAR_9 == VAR_10 ) ; VAR_11 = METHOD_3 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 == VAR_15 ) { VAR_16 = METHOD_4 ( 64 , ( VAR_17 + 1 ) * 2 ) ; VAR_18 -> VAR_19 = ( TYPE_6 * ) METHOD_5 ( sizeof ( TYPE_7 ) + VAR_20 * sizeof ( TYPE_8 * ) ) ; if ( VAR_21 -> VAR_22 == VAR_23 ) return VAR_24 ; METHOD_6 ( VAR_25 -> VAR_26 -> VAR_27 , 0 , VAR_28 * sizeof ( TYPE_9 * ) ) ; VAR_29 -> VAR_30 -> VAR_31 = VAR_32 ; } else if ( VAR_33 >= VAR_34 -> VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 -> VAR_40 * 2 ; while ( VAR_65 <= VAR_72 ) VAR_65 *= 2 ; VAR_41 -> VAR_42 = ( TYPE_10 * ) METHOD_7 ( VAR_43 -> VAR_44 , sizeof ( TYPE_11 ) + VAR_45 * sizeof ( TYPE_12 * ) ) ; if ( VAR_46 -> VAR_47 == VAR_48 ) return VAR_49 ; for ( VAR_50 = VAR_51 -> VAR_52 -> VAR_53 ; VAR_54 < VAR_55 ; VAR_56 ++ ) VAR_57 -> VAR_58 -> VAR_59 [ VAR_60 ] = VAR_61 ; VAR_62 -> VAR_63 -> VAR_64 = VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 -> VAR_71 [ VAR_72 ] = VAR_73 ; return VAR_74 ; }",211
212,"METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , TYPE_6 , TYPE_7 ) { const TYPE_8 * VAR_0 [ ] = { METHOD_1 ( ) -> VAR_1 , METHOD_2 ( ) -> VAR_2 , METHOD_3 ( ) -> VAR_3 , METHOD_4 ( ) -> VAR_4 , METHOD_5 ( ) -> VAR_5 , ""alpha"" , ""dummy"" , ""dummy"" , ""dummy"" , } ; unsigned TYPE_9 VAR_6 ; const TYPE_10 * VAR_7 ; TYPE_11 VAR_8 , VAR_9 = - VAR_10 ; VAR_11 = TYPE_12 - 1 ; if ( VAR_12 >= METHOD_6 ( VAR_13 ) ) { METHOD_7 ( ""sysinfo(%d)"" , TYPE_13 ) ; goto VAR_14 ; } METHOD_8 ( & VAR_15 ) ; VAR_16 = VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_9 ( VAR_20 ) + 1 ;  if ( VAR_21 > TYPE_14 )  VAR_22 = TYPE_15 ; if ( METHOD_10 ( TYPE_16 , VAR_23 , VAR_24 ) ) VAR_25 = - VAR_26 ; else VAR_27 = 0 ; METHOD_11 ( & VAR_28 ) ; VAR_29 : return VAR_30 ; }","METHOD_0 ( TYPE_0 , TYPE_1 , TYPE_2 , TYPE_3 TYPE_4 * , TYPE_5 , TYPE_6 , TYPE_7 ) { const TYPE_8 * VAR_0 [ ] = { METHOD_1 ( ) -> VAR_1 , METHOD_2 ( ) -> VAR_2 , METHOD_3 ( ) -> VAR_3 , METHOD_4 ( ) -> VAR_4 , METHOD_5 ( ) -> VAR_5 , ""alpha"" , ""dummy"" , ""dummy"" , ""dummy"" , } ; unsigned TYPE_9 VAR_6 ; const TYPE_10 * VAR_7 ; TYPE_11 VAR_8 , VAR_9 = - VAR_10 ; VAR_11 = TYPE_12 - 1 ; if ( VAR_12 >= METHOD_6 ( VAR_13 ) ) { METHOD_7 ( ""sysinfo(%d)"" , TYPE_13 ) ; goto VAR_14 ; } METHOD_8 ( & VAR_15 ) ; VAR_16 = VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_9 ( VAR_20 ) + 1 ; if ( VAR_21 > TYPE_14 ) VAR_22 = TYPE_15 ; if ( METHOD_10 ( TYPE_16 , VAR_23 , VAR_24 ) ) VAR_25 = - VAR_26 ; else VAR_27 = 0 ; METHOD_11 ( & VAR_28 ) ; VAR_29 : return VAR_30 ; }",212
213,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 = VAR_11 ; TYPE_10 VAR_12 ; VAR_13 * VAR_14 ; unsigned TYPE_11 VAR_15 ; TYPE_12 VAR_16 = VAR_17 ; VAR_18 * VAR_19 ; TYPE_13 VAR_20 ; TYPE_14 VAR_21 = 0 ; TYPE_15 * VAR_22 = VAR_23 ; METHOD_1 ( VAR_24 ) ; METHOD_2 ( VAR_25 -> VAR_26 ) ; METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , & VAR_31 ) ; if ( VAR_32 == VAR_33 ) return VAR_34 ; if ( ! ( VAR_35 & VAR_36 ) || ( VAR_37 & VAR_38 ) || ( VAR_39 & VAR_40 ) || ( VAR_41 & VAR_42 ) || ( VAR_43 & VAR_44 ) || ( VAR_45 & VAR_46 ) || ( VAR_47 & VAR_48 ) || ( VAR_49 & VAR_50 ) || ( VAR_51 & VAR_52 ) ) return VAR_53 ; if ( ( VAR_54 & VAR_55 ) && VAR_56 -> VAR_57 != 0 ) return VAR_58 ; if ( ( VAR_59 & VAR_60 ) && VAR_61 -> VAR_62 == VAR_63 ) return VAR_64 ; if ( ( VAR_65 & VAR_66 ) && ( VAR_67 & VAR_68 ) ) return VAR_69 ; if ( ( VAR_70 & ~ VAR_71 ) )  return VAR_72 ;  VAR_73 = METHOD_4 ( VAR_74 , VAR_75 -> VAR_76 , & VAR_77 , & VAR_78 ) ; switch ( VAR_79 ) { case VAR_80 : break ; case 0 : METHOD_5 ( VAR_81 , VAR_82 , & VAR_83 ) ; return VAR_84 ; default : return VAR_85 ; } VAR_86 = METHOD_6 ( 1 , sizeof ( * VAR_87 ) ) ; if ( VAR_88 == VAR_89 ) return VAR_90 ; METHOD_7 ( & VAR_91 , 0 , sizeof ( TYPE_16 ) ) ; if ( ( VAR_92 & VAR_93 ) ) { VAR_94 = METHOD_8 ( VAR_95 , VAR_96 -> VAR_97 , & VAR_98 , & VAR_99 ) ; if ( VAR_100 ) goto VAR_101 ; } if ( VAR_102 ) { VAR_103 = METHOD_9 ( VAR_104 , VAR_105 , VAR_106 ? & VAR_107 : VAR_108 , VAR_109 -> VAR_110 ) ; if ( VAR_111 ) goto VAR_112 ; } if ( ( VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , & VAR_116 ) ) ) goto VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; if ( ( VAR_124 & VAR_125 ) ) VAR_126 -> VAR_127 = VAR_128 -> VAR_129 ; else VAR_130 -> VAR_131 = VAR_132 -> VAR_133 . VAR_134 ; if ( ( VAR_135 & VAR_136 ) ) VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; else VAR_141 -> VAR_142 = VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 & VAR_147 ) VAR_148 -> VAR_149 = VAR_150 -> VAR_151 ; else VAR_152 -> VAR_153 = VAR_154 -> VAR_155 . VAR_156 ; if ( ( VAR_157 & VAR_158 ) ) VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 -> VAR_164 = VAR_165 -> VAR_166 . VAR_167 ; VAR_168 -> VAR_169 = 0 ; if ( VAR_170 ) { if ( VAR_171 . VAR_172 ) VAR_173 -> VAR_174 = METHOD_11 ( VAR_175 , VAR_176 . VAR_177 ) ; else VAR_178 -> VAR_179 = 0 ; } if ( ( VAR_180 & VAR_181 ) ) VAR_182 -> VAR_183 = VAR_184 -> VAR_185 ; VAR_186 -> VAR_187 = 0 ; VAR_188 -> VAR_189 = 0 ; VAR_190 -> VAR_191 = 0 ; VAR_192 = METHOD_12 ( VAR_193 -> VAR_194 , VAR_195 -> VAR_196 , & VAR_197 -> VAR_198 ) ; if ( VAR_199 ) goto VAR_200 ; if ( ( VAR_201 = METHOD_13 ( VAR_202 -> VAR_203 , VAR_204 , VAR_205 ) ) ) goto VAR_206 ; if ( VAR_207 & VAR_208 ) { for ( VAR_209 = VAR_210 -> VAR_211 ; VAR_212 ; VAR_213 = VAR_214 -> VAR_215 ) { VAR_216 = METHOD_14 ( VAR_217 -> VAR_218 , VAR_219 , VAR_220 ) ; if ( VAR_221 ) goto VAR_222 ; } } VAR_223 = METHOD_15 ( VAR_224 , VAR_225 -> VAR_226 , VAR_227 , VAR_228 , & VAR_229 , & VAR_230 ) ; if ( VAR_231 ) goto VAR_232 ; VAR_233 = METHOD_16 ( VAR_234 , & VAR_235 , & VAR_236 ) ; if ( VAR_237 ) goto VAR_238 ; if ( VAR_239 & VAR_240 ) { METHOD_17 ( VAR_241 -> VAR_242 == 0 ) ; } else if ( VAR_243 ) { VAR_244 = METHOD_18 ( VAR_245 -> VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , ( VAR_251 & VAR_252 ) ? VAR_253 -> VAR_254 : 1 , VAR_255 , VAR_256 ) ; } else { VAR_257 = METHOD_19 ( VAR_258 -> VAR_259 , & VAR_260 , VAR_261 , VAR_262 , VAR_263 , VAR_264 ) ; } if ( VAR_265 ) goto VAR_266 ; VAR_267 = METHOD_20 ( VAR_268 -> VAR_269 , VAR_270 , VAR_271 ) ; if ( VAR_272 ) goto VAR_273 ; VAR_274 = METHOD_21 ( VAR_275 -> VAR_276 , VAR_277 -> VAR_278 , VAR_279 , VAR_280 , VAR_281 , VAR_282 , VAR_283 , VAR_284 ) ; if ( VAR_285 ) goto VAR_286 ; VAR_287 . VAR_288 = VAR_289 ; if ( VAR_290 & VAR_291 ) { VAR_292 . VAR_293 = VAR_294 ; VAR_295 . VAR_296 = VAR_297 -> VAR_298 ; } VAR_299 -> VAR_300 = VAR_301 | VAR_302 | VAR_303 ; VAR_304 = METHOD_22 ( VAR_305 , VAR_306 , & VAR_307 ) ; ( TYPE_17 ) METHOD_23 ( VAR_308 -> VAR_309 , VAR_310 -> VAR_311 , VAR_312 , VAR_313 , VAR_314 , VAR_315 , VAR_316 , VAR_317 ) ; VAR_318 : METHOD_24 ( VAR_319 ) ; METHOD_25 ( VAR_320 -> VAR_321 , VAR_322 ) ; if ( VAR_323 ) ( TYPE_18 ) METHOD_26 ( VAR_324 -> VAR_325 , & VAR_326 ) ; return VAR_327 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 = VAR_11 ; TYPE_10 VAR_12 ; VAR_13 * VAR_14 ; unsigned TYPE_11 VAR_15 ; TYPE_12 VAR_16 = VAR_17 ; VAR_18 * VAR_19 ; TYPE_13 VAR_20 ; TYPE_14 VAR_21 = 0 ; TYPE_15 * VAR_22 = VAR_23 ; METHOD_1 ( VAR_24 ) ; METHOD_2 ( VAR_25 -> VAR_26 ) ; METHOD_3 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , & VAR_31 ) ; if ( VAR_32 == VAR_33 ) return VAR_34 ; if ( ! ( VAR_35 & VAR_36 ) || ( VAR_37 & VAR_38 ) || ( VAR_39 & VAR_40 ) || ( VAR_41 & VAR_42 ) || ( VAR_43 & VAR_44 ) || ( VAR_45 & VAR_46 ) || ( VAR_47 & VAR_48 ) || ( VAR_49 & VAR_50 ) || ( VAR_51 & VAR_52 ) ) return VAR_53 ; if ( ( VAR_54 & VAR_55 ) && VAR_56 -> VAR_57 != 0 ) return VAR_58 ; if ( ( VAR_59 & VAR_60 ) && VAR_61 -> VAR_62 == VAR_63 ) return VAR_64 ; if ( ( VAR_65 & VAR_66 ) && ( VAR_67 & VAR_68 ) ) return VAR_69 ; if ( ( VAR_70 & ~ VAR_71 ) ) return VAR_72 ; if ( VAR_314 & VAR_208 ) { for ( VAR_220 = VAR_313 -> VAR_211 ; VAR_220 != VAR_108 ; VAR_220 = VAR_220 -> VAR_215 ) { if ( VAR_220 -> VAR_328 < 256 ) return VAR_329 ; } } VAR_73 = METHOD_4 ( VAR_74 , VAR_75 -> VAR_76 , & VAR_77 , & VAR_78 ) ; switch ( VAR_79 ) { case VAR_80 : break ; case 0 : METHOD_5 ( VAR_81 , VAR_82 , & VAR_83 ) ; return VAR_84 ; default : return VAR_85 ; } VAR_86 = METHOD_6 ( 1 , sizeof ( * VAR_87 ) ) ; if ( VAR_88 == VAR_89 ) return VAR_90 ; METHOD_7 ( & VAR_91 , 0 , sizeof ( TYPE_16 ) ) ; if ( ( VAR_92 & VAR_93 ) ) { VAR_94 = METHOD_8 ( VAR_95 , VAR_96 -> VAR_97 , & VAR_98 , & VAR_99 ) ; if ( VAR_100 ) goto VAR_101 ; } if ( VAR_102 ) { VAR_103 = METHOD_9 ( VAR_104 , VAR_105 , VAR_106 ? & VAR_107 : VAR_108 , VAR_109 -> VAR_110 ) ; if ( VAR_111 ) goto VAR_112 ; } if ( ( VAR_113 = METHOD_10 ( VAR_114 -> VAR_115 , & VAR_116 ) ) ) goto VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; if ( ( VAR_124 & VAR_125 ) ) VAR_126 -> VAR_127 = VAR_128 -> VAR_129 ; else VAR_130 -> VAR_131 = VAR_132 -> VAR_133 . VAR_134 ; if ( ( VAR_135 & VAR_136 ) ) VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; else VAR_141 -> VAR_142 = VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 & VAR_147 ) VAR_148 -> VAR_149 = VAR_150 -> VAR_151 ; else VAR_152 -> VAR_153 = VAR_154 -> VAR_155 . VAR_156 ; if ( ( VAR_157 & VAR_158 ) ) VAR_159 -> VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 -> VAR_164 = VAR_165 -> VAR_166 . VAR_167 ; VAR_168 -> VAR_169 = 0 ; if ( VAR_170 ) { if ( VAR_171 . VAR_172 ) VAR_173 -> VAR_174 = METHOD_11 ( VAR_175 , VAR_176 . VAR_177 ) ; else VAR_178 -> VAR_179 = 0 ; } if ( ( VAR_180 & VAR_181 ) ) VAR_182 -> VAR_183 = VAR_184 -> VAR_185 ; VAR_186 -> VAR_187 = 0 ; VAR_188 -> VAR_189 = 0 ; VAR_190 -> VAR_191 = 0 ; VAR_192 = METHOD_12 ( VAR_193 -> VAR_194 , VAR_195 -> VAR_196 , & VAR_197 -> VAR_198 ) ; if ( VAR_199 ) goto VAR_200 ; if ( ( VAR_201 = METHOD_13 ( VAR_202 -> VAR_203 , VAR_204 , VAR_205 ) ) ) goto VAR_206 ; if ( VAR_207 & VAR_208 ) { for ( VAR_209 = VAR_210 -> VAR_211 ; VAR_212 ; VAR_213 = VAR_214 -> VAR_215 ) { VAR_216 = METHOD_14 ( VAR_217 -> VAR_218 , VAR_219 , VAR_220 ) ; if ( VAR_221 ) goto VAR_222 ; } } VAR_223 = METHOD_15 ( VAR_224 , VAR_225 -> VAR_226 , VAR_227 , VAR_228 , & VAR_229 , & VAR_230 ) ; if ( VAR_231 ) goto VAR_232 ; VAR_233 = METHOD_16 ( VAR_234 , & VAR_235 , & VAR_236 ) ; if ( VAR_237 ) goto VAR_238 ; if ( VAR_239 & VAR_240 ) { METHOD_17 ( VAR_241 -> VAR_242 == 0 ) ; } else if ( VAR_243 ) { VAR_244 = METHOD_18 ( VAR_245 -> VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , ( VAR_251 & VAR_252 ) ? VAR_253 -> VAR_254 : 1 , VAR_255 , VAR_256 ) ; } else { VAR_257 = METHOD_19 ( VAR_258 -> VAR_259 , & VAR_260 , VAR_261 , VAR_262 , VAR_263 , VAR_264 ) ; } if ( VAR_265 ) goto VAR_266 ; VAR_267 = METHOD_20 ( VAR_268 -> VAR_269 , VAR_270 , VAR_271 ) ; if ( VAR_272 ) goto VAR_273 ; VAR_274 = METHOD_21 ( VAR_275 -> VAR_276 , VAR_277 -> VAR_278 , VAR_279 , VAR_280 , VAR_281 , VAR_282 , VAR_283 , VAR_284 ) ; if ( VAR_285 ) goto VAR_286 ; VAR_287 . VAR_288 = VAR_289 ; if ( VAR_290 & VAR_291 ) { VAR_292 . VAR_293 = VAR_294 ; VAR_295 . VAR_296 = VAR_297 -> VAR_298 ; } VAR_299 -> VAR_300 = VAR_301 | VAR_302 | VAR_303 ; VAR_304 = METHOD_22 ( VAR_305 , VAR_306 , & VAR_307 ) ; ( TYPE_17 ) METHOD_23 ( VAR_308 -> VAR_309 , VAR_310 -> VAR_311 , VAR_312 , VAR_313 , VAR_314 , VAR_315 , VAR_316 , VAR_317 ) ; VAR_318 : METHOD_24 ( VAR_319 ) ; METHOD_25 ( VAR_320 -> VAR_321 , VAR_322 ) ; if ( VAR_323 ) ( TYPE_18 ) METHOD_26 ( VAR_324 -> VAR_325 , & VAR_326 ) ; return VAR_327 ; }",213
214," TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 ,  struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 ; VAR_4 = * VAR_5 ++ ;  if ( VAR_6 == 0 )  return 0 ;  while ( VAR_7 > 0 ) {  if ( * VAR_8 == 0x00 ) { VAR_9 -- ; VAR_10 ++ ; switch ( * VAR_11 ) { case VAR_12 : VAR_13 = METHOD_1 ( VAR_14 + 1 , VAR_15 , VAR_16 - 1 ) ;  if ( VAR_17 < 0 )  return 0 ; VAR_18 -= VAR_19 + 1 ; VAR_20 += VAR_21 + 1 ; break ; case VAR_22 : VAR_23 = METHOD_2 ( VAR_24 + 1 , VAR_25 , VAR_26 - 1 ) ;  if ( VAR_27 < 0 )  return 0 ; VAR_28 -= VAR_29 + 1 ; VAR_30 += VAR_31 + 1 ;  break ;  default : printk ( KERN_DEBUG ""ROSE:rose_parse_facilities-unknownfacilitiesfamily%02X\\n"" , * VAR_32 ) ; VAR_33 -- ; VAR_34 ++ ; break ; } } else break ; } return 1 ; }","TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 ; VAR_4 = * VAR_5 ++ ; if ( VAR_6 == 0 ) return 0 ; while ( VAR_7 > 0 ) { if ( * VAR_8 == 0x00 ) { VAR_9 -- ; VAR_10 ++ ; switch ( * VAR_11 ) { case VAR_12 : VAR_13 = METHOD_1 ( VAR_14 + 1 , VAR_15 , VAR_16 - 1 ) ; break ; case VAR_22 : VAR_23 = METHOD_2 ( VAR_24 + 1 , VAR_25 , VAR_26 - 1 ) ; break ; default : printk ( KERN_DEBUG ""ROSE:rose_parse_facilities-unknownfacilitiesfamily%02X\\n"" , * VAR_34 ) ; VAR_31 = 1 ; break ; } if ( VAR_27 < 0 ) return 0 ; VAR_28 -= VAR_29 + 1 ; } return VAR_33 == 0 ; }",214
215,"static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) ; TYPE_1 VAR_2 = METHOD_2 ( STRUCT_OR_UNION_3 -> VAR_3 , VAR_4 -> VAR_5 ) ; TYPE_2 VAR_6 = METHOD_3 ( STRUCT_OR_UNION_4 -> VAR_7 , VAR_8 -> VAR_9 ) ; if ( ! METHOD_4 ( VAR_10 ) || ! METHOD_5 ( VAR_11 ) ) return - VAR_12 ;  if ( ( VAR_13 -> VAR_14 == METHOD_6 ( VAR_15 ) || METHOD_7 ( VAR_16 ) ) &&  ( ( METHOD_8 ( VAR_17 , STRUCT_OR_UNION_5 -> VAR_18 ) || METHOD_9 ( VAR_19 , STRUCT_OR_UNION_6 -> VAR_20 ) || METHOD_10 ( VAR_21 , STRUCT_OR_UNION_7 -> VAR_22 ) ) || METHOD_11 ( VAR_23 ) ) && ( ( METHOD_12 ( VAR_24 , STRUCT_OR_UNION_8 -> VAR_25 ) || METHOD_13 ( VAR_26 , STRUCT_OR_UNION_9 -> VAR_27 ) || METHOD_14 ( VAR_28 , STRUCT_OR_UNION_10 -> VAR_29 ) ) || METHOD_15 ( VAR_30 ) ) ) { return 0 ; } return - VAR_31 ; }","static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) ; TYPE_1 VAR_2 = METHOD_2 ( STRUCT_OR_UNION_3 -> VAR_3 , VAR_4 -> VAR_5 ) ; TYPE_2 VAR_6 = METHOD_3 ( STRUCT_OR_UNION_4 -> VAR_7 , VAR_8 -> VAR_9 ) ; if ( ! METHOD_4 ( VAR_10 ) || ! METHOD_5 ( VAR_11 ) ) return - VAR_12 ; if ( ( VAR_13 -> VAR_14 == METHOD_6 ( VAR_15 ) || METHOD_16 ( VAR_15 -> VAR_32 -> VAR_33 -> VAR_7 , VAR_16 ) ) && ( ( METHOD_8 ( VAR_17 , STRUCT_OR_UNION_5 -> VAR_18 ) || METHOD_9 ( VAR_19 , STRUCT_OR_UNION_6 -> VAR_20 ) || METHOD_10 ( VAR_21 , STRUCT_OR_UNION_7 -> VAR_22 ) ) || METHOD_11 ( VAR_23 ) ) && ( ( METHOD_12 ( VAR_24 , STRUCT_OR_UNION_8 -> VAR_25 ) || METHOD_13 ( VAR_26 , STRUCT_OR_UNION_9 -> VAR_27 ) || METHOD_14 ( VAR_28 , STRUCT_OR_UNION_10 -> VAR_29 ) ) || METHOD_15 ( VAR_30 ) ) ) { return 0 ; } return - VAR_31 ; }",215
216,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) {  VAR_2 +=  METHOD_1 ( VAR_3 , ""\\n%12.3f%12.3fm"" , VAR_4 , VAR_5 ) ;  } ","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { VAR_2 += METHOD_1 ( VAR_3 , ""\\n%12.3f%12.3fm"" , VAR_4 , VAR_5 ) ; METHOD_2 ( VAR_6 ) ; }",216
217,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 , VAR_5 -> VAR_6 ) ; if ( VAR_7 == VAR_8 ) return - VAR_9 ; if ( VAR_10 -> VAR_11 ) { unsigned TYPE_1 VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 -> VAR_16 ; VAR_17 ++ ) { struct STRUCT_OR_UNION_3 VAR_18 ;  METHOD_2 ( & VAR_19 -> VAR_20 [ VAR_21 ] , & VAR_22 ) ;  if ( METHOD_3 ( & VAR_23 -> VAR_24 [ VAR_25 ] , & VAR_26 , sizeof ( VAR_27 ) ) ) return - VAR_28 ; } } if ( VAR_29 -> VAR_30 ) { struct STRUCT_OR_UNION_4 TYPE_2 * VAR_31 ; unsigned TYPE_3 VAR_32 ; for ( VAR_33 = 0 , VAR_34 = VAR_35 -> VAR_36 ; VAR_37 < VAR_38 -> VAR_39 ; VAR_40 ++ ) { struct STRUCT_OR_UNION_5 VAR_41 ; if ( VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 -> VAR_46 != VAR_47 ) continue ;  METHOD_4 ( VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 ,  & VAR_52 . VAR_53 ) ; METHOD_5 ( VAR_54 -> VAR_55 [ VAR_56 ] . VAR_57 , & VAR_58 . VAR_59 ) ; VAR_60 . VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 ; if ( METHOD_6 ( VAR_66 , & VAR_67 , sizeof ( * VAR_68 ) ) ) return - VAR_69 ; VAR_70 ++ ; } } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 , VAR_5 -> VAR_6 ) ; if ( VAR_7 == VAR_8 ) return - VAR_9 ; if ( VAR_10 -> VAR_11 ) { unsigned TYPE_1 VAR_12 ; for ( VAR_13 = 0 ; VAR_14 < VAR_15 -> VAR_16 ; VAR_17 ++ ) { struct STRUCT_OR_UNION_3 VAR_18 ; METHOD_2 ( & VAR_19 -> VAR_20 [ VAR_21 ] , & VAR_22 ) ; if ( METHOD_3 ( & VAR_23 -> VAR_24 [ VAR_25 ] , & VAR_26 , sizeof ( VAR_27 ) ) ) return - VAR_28 ; } } if ( VAR_29 -> VAR_30 ) { struct STRUCT_OR_UNION_4 TYPE_2 * VAR_31 ; unsigned TYPE_3 VAR_32 ; for ( VAR_33 = 0 , VAR_34 = VAR_35 -> VAR_36 ; VAR_37 < VAR_38 -> VAR_39 ; VAR_40 ++ ) { struct STRUCT_OR_UNION_5 VAR_41 ; if ( VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 -> VAR_46 != VAR_47 ) continue ; METHOD_7 ( & VAR_67 , 0 , sizeof ( VAR_67 ) ) ; METHOD_4 ( VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 , & VAR_52 . VAR_53 ) ; METHOD_5 ( VAR_54 -> VAR_55 [ VAR_56 ] . VAR_57 , & VAR_58 . VAR_59 ) ; VAR_60 . VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] . VAR_65 ; if ( METHOD_6 ( VAR_66 , & VAR_67 , sizeof ( * VAR_68 ) ) ) return - VAR_69 ; VAR_70 ++ ; } } return 0 ; }",217
218,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; if ( VAR_4 ) { METHOD_2 ( VAR_5 , VAR_6 , VAR_7 -> VAR_8 , ""failedtocreateNIC\\n"" ) ; goto VAR_9 ; } VAR_10 = METHOD_3 ( VAR_11 ) ; if ( VAR_12 ) { METHOD_4 ( VAR_13 , VAR_14 , VAR_15 -> VAR_16 , ""failedtocreateport\\n"" ) ; goto VAR_17 ; }  VAR_18 -> VAR_19 = VAR_20 -> VAR_21 = VAR_22 ;  VAR_23 = METHOD_5 ( VAR_24 ) ; if ( VAR_25 ) goto VAR_26 ; VAR_27 = METHOD_6 ( VAR_28 ) ; if ( VAR_29 ) { METHOD_7 ( VAR_30 , VAR_31 , VAR_32 -> VAR_33 , ""failedtocreatefiltertables\\n"" ) ; goto VAR_34 ; } return 0 ; VAR_35 : METHOD_8 ( VAR_36 ) ; VAR_37 : METHOD_9 ( VAR_38 ) ; VAR_39 : METHOD_10 ( VAR_40 ) ; VAR_41 : return VAR_42 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; if ( VAR_4 ) { METHOD_2 ( VAR_5 , VAR_6 , VAR_7 -> VAR_8 , ""failedtocreateNIC\\n"" ) ; goto VAR_9 ; } VAR_10 = METHOD_3 ( VAR_11 ) ; if ( VAR_12 ) { METHOD_4 ( VAR_13 , VAR_14 , VAR_15 -> VAR_16 , ""failedtocreateport\\n"" ) ; goto VAR_17 ; } VAR_18 -> VAR_19 = VAR_20 -> VAR_21 = VAR_22 ; VAR_23 = METHOD_5 ( VAR_24 ) ; if ( VAR_25 ) goto VAR_26 ; VAR_27 = METHOD_6 ( VAR_28 ) ; if ( VAR_29 ) { METHOD_7 ( VAR_30 , VAR_31 , VAR_32 -> VAR_33 , ""failedtocreatefiltertables\\n"" ) ; goto VAR_34 ; } return 0 ; VAR_35 : METHOD_8 ( VAR_36 ) ; VAR_37 : METHOD_9 ( VAR_38 ) ; VAR_39 : METHOD_10 ( VAR_40 ) ; VAR_41 : return VAR_42 ; }",218
219,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) {  struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ;  struct STRUCT_OR_UNION_6 * VAR_6 = ( struct STRUCT_OR_UNION_7 * ) VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_8 * VAR_9 ; TYPE_3 VAR_10 = 0 ; TYPE_4 VAR_11 = 0 ; TYPE_5 VAR_12 = 0 ; struct STRUCT_OR_UNION_9 * VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , VAR_16 & ~ VAR_17 , VAR_18 & VAR_19 , & VAR_20 ) ; METHOD_2 ( VAR_21 ) ; if ( ! VAR_22 ) goto VAR_23 ; VAR_24 = METHOD_3 ( VAR_25 ) ; VAR_26 = METHOD_4 ( VAR_27 -> VAR_28 ) & 1023 ; if ( VAR_29 -> VAR_30 != VAR_31 ) { VAR_32 = sizeof ( * VAR_33 ) ; VAR_34 -= VAR_35 ; } if ( VAR_36 > VAR_37 ) { VAR_38 = VAR_39 ; VAR_40 -> VAR_41 |= VAR_42 ; } VAR_43 = METHOD_5 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 , VAR_48 ) ;  if ( ! VAR_49 ) {  if ( VAR_50 ) { VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 . VAR_60 = VAR_61 -> VAR_62 ; VAR_63 -> VAR_64 . VAR_65 = VAR_66 -> VAR_67 ;  }  VAR_68 -> VAR_69 = sizeof ( * VAR_70 ) ; } METHOD_6 ( VAR_71 , VAR_72 ) ; VAR_73 : METHOD_7 ( VAR_74 ) ; return VAR_75 ? : VAR_76 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = ( struct STRUCT_OR_UNION_7 * ) VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_8 * VAR_9 ; TYPE_3 VAR_10 = 0 ; TYPE_4 VAR_11 = 0 ; TYPE_5 VAR_12 = 0 ; struct STRUCT_OR_UNION_9 * VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , VAR_16 & ~ VAR_17 , VAR_18 & VAR_19 , & VAR_20 ) ; METHOD_2 ( VAR_21 ) ; if ( ! VAR_22 ) goto VAR_23 ; VAR_24 = METHOD_3 ( VAR_25 ) ; VAR_26 = METHOD_4 ( VAR_27 -> VAR_28 ) & 1023 ; if ( VAR_29 -> VAR_30 != VAR_31 ) { VAR_32 = sizeof ( * VAR_33 ) ; VAR_34 -= VAR_35 ; } if ( VAR_36 > VAR_37 ) { VAR_38 = VAR_39 ; VAR_40 -> VAR_41 |= VAR_42 ; } VAR_43 = METHOD_5 ( VAR_44 , VAR_45 , VAR_46 -> VAR_47 , VAR_48 ) ; if ( ! VAR_49 ) { if ( VAR_50 ) { VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 . VAR_60 = VAR_61 -> VAR_62 ; VAR_63 -> VAR_64 . VAR_65 = VAR_66 -> VAR_67 ; VAR_68 -> VAR_69 = sizeof ( * VAR_70 ) ; } METHOD_6 ( VAR_71 , VAR_72 ) ; VAR_73 : METHOD_7 ( VAR_74 ) ; return VAR_75 ? : VAR_76 ; }",219
220,"static TYPE_0 METHOD_0 ( register TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; VAR_14 = VAR_15 -> VAR_16 ; if ( ! VAR_17 -> VAR_18 ) { goto VAR_19 ; } else { VAR_20 -> VAR_21 = 0 ; } for ( VAR_22 -> VAR_23 = VAR_24 -> VAR_25 , VAR_26 -> VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 -> VAR_31 ] ; VAR_32 -> VAR_33 < METHOD_1 ( TYPE_11 , VAR_34 -> compnoend ) && VAR_35 -> VAR_36 < VAR_37 -> VAR_38 ; ++ VAR_39 -> VAR_40 , ++ VAR_41 -> VAR_42 ) {  VAR_43 = VAR_44 -> VAR_45 -> VAR_46 ;  VAR_47 -> VAR_48 = VAR_49 -> VAR_50 -> VAR_51 * ( METHOD_2 ( TYPE_12 , 1 ) << ( VAR_52 -> VAR_53 + VAR_54 -> VAR_55 -> VAR_56 - 1 ) ) ; VAR_57 -> VAR_58 = VAR_59 -> VAR_60 -> VAR_61 * ( METHOD_3 ( TYPE_13 , 1 ) << ( VAR_62 -> VAR_63 + VAR_64 -> VAR_65 -> VAR_66 - 1 ) ) ; for ( VAR_67 = 1 , VAR_68 = & VAR_69 -> VAR_70 -> VAR_71 [ 1 ] ; VAR_72 < VAR_73 -> VAR_74 -> VAR_75 ; ++ VAR_76 , ++ VAR_77 ) { VAR_78 -> VAR_79 = METHOD_4 ( VAR_80 -> VAR_81 , VAR_82 -> VAR_83 -> VAR_84 * ( METHOD_5 ( TYPE_14 , 1 ) << ( VAR_85 -> VAR_86 + VAR_87 -> VAR_88 -> VAR_89 - VAR_90 - 1 ) ) ) ; VAR_91 -> VAR_92 = METHOD_6 ( VAR_93 -> VAR_94 , VAR_95 -> VAR_96 -> VAR_97 * ( METHOD_7 ( TYPE_15 , 1 ) << ( VAR_98 -> VAR_99 + VAR_100 -> VAR_101 -> VAR_102 - VAR_103 - 1 ) ) ) ; } for ( VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 < VAR_110 -> VAR_111 ; VAR_112 -> VAR_113 += VAR_114 -> VAR_115 - ( VAR_116 -> VAR_117 % VAR_118 -> VAR_119 ) ) { for ( VAR_120 -> VAR_121 = VAR_122 -> VAR_123 ; VAR_124 -> VAR_125 < VAR_126 -> VAR_127 ; VAR_128 -> VAR_129 += VAR_130 -> VAR_131 - ( VAR_132 -> VAR_133 % VAR_134 -> VAR_135 ) ) { for ( VAR_136 -> VAR_137 = VAR_138 -> VAR_139 , VAR_140 -> VAR_141 = & VAR_142 -> VAR_143 -> VAR_144 [ VAR_145 -> VAR_146 ] ; VAR_147 -> VAR_148 < VAR_149 -> VAR_150 -> VAR_151 && VAR_152 -> VAR_153 < VAR_154 -> VAR_155 ; ++ VAR_156 -> VAR_157 , ++ VAR_158 -> VAR_159 ) { if ( VAR_160 -> VAR_161 -> VAR_162 == 0 ) { continue ; } VAR_163 = VAR_164 -> VAR_165 -> VAR_166 - 1 - VAR_167 -> VAR_168 ; VAR_169 = METHOD_8 ( VAR_170 -> VAR_171 , VAR_172 -> VAR_173 -> VAR_174 << VAR_175 ) ; VAR_176 = METHOD_9 ( VAR_177 -> VAR_178 , VAR_179 -> VAR_180 -> VAR_181 << VAR_182 ) ; VAR_183 = VAR_184 + VAR_185 -> VAR_186 -> VAR_187 ; VAR_188 = VAR_189 + VAR_190 -> VAR_191 -> VAR_192 ;  if ( ( ( VAR_193 -> VAR_194 == VAR_195 -> VAR_196 && ( ( VAR_197 << VAR_198 ) % ( 1 << VAR_199 ) ) ) ||  ! ( VAR_200 -> VAR_201 % ( VAR_202 -> VAR_203 -> VAR_204 << VAR_205 ) ) ) &&  ( ( VAR_206 -> VAR_207 == VAR_208 -> VAR_209 && ( ( VAR_210 << VAR_211 ) % ( 1 << VAR_212 ) ) ) ||  ! ( VAR_213 -> VAR_214 % ( VAR_215 -> VAR_216 -> VAR_217 << VAR_218 ) ) ) ) { VAR_219 = METHOD_10 ( METHOD_11 ( VAR_220 -> VAR_221 , VAR_222 -> VAR_223 -> VAR_224 << VAR_225 ) , VAR_226 -> VAR_227 -> VAR_228 ) - METHOD_12 ( VAR_229 , VAR_230 -> VAR_231 -> VAR_232 ) ; VAR_233 = METHOD_13 ( METHOD_14 ( VAR_234 -> VAR_235 , VAR_236 -> VAR_237 -> VAR_238 << VAR_239 ) , VAR_240 -> VAR_241 -> VAR_242 ) - METHOD_15 ( VAR_243 , VAR_244 -> VAR_245 -> VAR_246 ) ; VAR_247 -> VAR_248 = VAR_249 * VAR_250 -> VAR_251 -> VAR_252 + VAR_253 ; METHOD_16 ( VAR_254 -> VAR_255 < VAR_256 -> VAR_257 -> VAR_258 ) ; for ( VAR_259 -> VAR_260 = 0 ; VAR_261 -> VAR_262 < VAR_263 -> VAR_264 && VAR_265 -> VAR_266 < METHOD_17 ( TYPE_16 , VAR_267 -> lyrnoend ) ; ++ VAR_268 -> VAR_269 ) { VAR_270 = & VAR_271 -> VAR_272 -> VAR_273 [ VAR_274 -> VAR_275 ] ; if ( VAR_276 -> VAR_277 >= * VAR_278 ) { ++ ( * VAR_279 ) ; return 0 ; } VAR_280 : ; } } } } } } return 1 ; }","static TYPE_0 METHOD_0 ( register TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; TYPE_4 VAR_7 ; TYPE_5 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; TYPE_9 VAR_12 ; TYPE_10 VAR_13 ; VAR_14 = VAR_15 -> VAR_16 ; if ( ! VAR_17 -> VAR_18 ) { goto VAR_19 ; } else { VAR_20 -> VAR_21 = 0 ; } for ( VAR_22 -> VAR_23 = VAR_24 -> VAR_25 , VAR_26 -> VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 -> VAR_31 ] ; VAR_32 -> VAR_33 < METHOD_1 ( TYPE_11 , VAR_34 -> compnoend ) && VAR_35 -> VAR_36 < VAR_37 -> VAR_38 ; ++ VAR_39 -> VAR_40 , ++ VAR_41 -> VAR_42 ) { VAR_43 = VAR_44 -> VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = VAR_49 -> VAR_50 -> VAR_51 * ( METHOD_2 ( TYPE_12 , 1 ) << ( VAR_52 -> VAR_53 + VAR_54 -> VAR_55 -> VAR_56 - 1 ) ) ; VAR_57 -> VAR_58 = VAR_59 -> VAR_60 -> VAR_61 * ( METHOD_3 ( TYPE_13 , 1 ) << ( VAR_62 -> VAR_63 + VAR_64 -> VAR_65 -> VAR_66 - 1 ) ) ; for ( VAR_67 = 1 , VAR_68 = & VAR_69 -> VAR_70 -> VAR_71 [ 1 ] ; VAR_72 < VAR_73 -> VAR_74 -> VAR_75 ; ++ VAR_76 , ++ VAR_77 ) { VAR_78 -> VAR_79 = METHOD_4 ( VAR_80 -> VAR_81 , VAR_82 -> VAR_83 -> VAR_84 * ( METHOD_5 ( TYPE_14 , 1 ) << ( VAR_85 -> VAR_86 + VAR_87 -> VAR_88 -> VAR_89 - VAR_90 - 1 ) ) ) ; VAR_91 -> VAR_92 = METHOD_6 ( VAR_93 -> VAR_94 , VAR_95 -> VAR_96 -> VAR_97 * ( METHOD_7 ( TYPE_15 , 1 ) << ( VAR_98 -> VAR_99 + VAR_100 -> VAR_101 -> VAR_102 - VAR_103 - 1 ) ) ) ; } for ( VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; VAR_108 -> VAR_109 < VAR_110 -> VAR_111 ; VAR_112 -> VAR_113 += VAR_114 -> VAR_115 - ( VAR_116 -> VAR_117 % VAR_118 -> VAR_119 ) ) { for ( VAR_120 -> VAR_121 = VAR_122 -> VAR_123 ; VAR_124 -> VAR_125 < VAR_126 -> VAR_127 ; VAR_128 -> VAR_129 += VAR_130 -> VAR_131 - ( VAR_132 -> VAR_133 % VAR_134 -> VAR_135 ) ) { for ( VAR_136 -> VAR_137 = VAR_138 -> VAR_139 , VAR_140 -> VAR_141 = & VAR_142 -> VAR_143 -> VAR_144 [ VAR_145 -> VAR_146 ] ; VAR_147 -> VAR_148 < VAR_149 -> VAR_150 -> VAR_151 && VAR_152 -> VAR_153 < VAR_154 -> VAR_155 ; ++ VAR_156 -> VAR_157 , ++ VAR_158 -> VAR_159 ) { if ( VAR_160 -> VAR_161 -> VAR_162 == 0 ) { continue ; } VAR_163 = VAR_164 -> VAR_165 -> VAR_166 - 1 - VAR_167 -> VAR_168 ; VAR_169 = METHOD_8 ( VAR_170 -> VAR_171 , VAR_172 -> VAR_173 -> VAR_174 << VAR_175 ) ; VAR_176 = METHOD_9 ( VAR_177 -> VAR_178 , VAR_179 -> VAR_180 -> VAR_181 << VAR_182 ) ; VAR_183 = VAR_184 + VAR_185 -> VAR_186 -> VAR_187 ; VAR_188 = VAR_189 + VAR_190 -> VAR_191 -> VAR_192 ; if ( ( ( VAR_193 -> VAR_194 == VAR_195 -> VAR_196 && ( ( VAR_197 << VAR_198 ) % ( METHOD_17 ( TYPE_15 , 1 ) << VAR_205 ) ) ) && ( ( VAR_206 -> VAR_207 == VAR_208 -> VAR_209 && ( ( VAR_210 << VAR_211 ) % ( METHOD_17 ( TYPE_15 , 1 ) << VAR_218 ) ) ) ) { VAR_219 = METHOD_10 ( METHOD_11 ( VAR_220 -> VAR_221 , VAR_222 -> VAR_223 -> VAR_224 << VAR_225 ) , VAR_226 -> VAR_227 -> VAR_228 ) - METHOD_12 ( VAR_229 , VAR_230 -> VAR_231 -> VAR_232 ) ; VAR_233 = METHOD_13 ( METHOD_14 ( VAR_234 -> VAR_235 , VAR_236 -> VAR_237 -> VAR_238 << VAR_239 ) , VAR_240 -> VAR_241 -> VAR_242 ) - METHOD_15 ( VAR_243 , VAR_244 -> VAR_245 -> VAR_246 ) ; VAR_247 -> VAR_248 = VAR_249 * VAR_250 -> VAR_251 -> VAR_252 + VAR_253 ; METHOD_16 ( VAR_254 -> VAR_255 < VAR_256 -> VAR_257 -> VAR_258 ) ; for ( VAR_259 -> VAR_260 = 0 ; VAR_261 -> VAR_262 < VAR_263 -> VAR_264 && VAR_265 -> VAR_266 < METHOD_17 ( TYPE_16 , VAR_267 -> lyrnoend ) ; ++ VAR_268 -> VAR_269 ) { VAR_270 = & VAR_271 -> VAR_272 -> VAR_273 [ VAR_274 -> VAR_275 ] ; if ( VAR_276 -> VAR_277 >= * VAR_278 ) { ++ ( * VAR_279 ) ; return 0 ; } VAR_280 : ; } } } } } } return 1 ; }",220
221,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 * VAR_4 ) { struct STRUCT_OR_UNION_3 VAR_5 ; TYPE_5 VAR_6 ; VAR_7 . VAR_8 = VAR_9 ; VAR_10 . VAR_11 = VAR_12 -> VAR_13 >> STRUCT_OR_UNION_4 -> VAR_14 ; VAR_15 . VAR_16 = VAR_17 ; VAR_18 = STRUCT_OR_UNION_5 ( STRUCT_OR_UNION_6 , & VAR_19 , VAR_20 , VAR_21 ) ; if ( ! VAR_22 ) { METHOD_1 ( VAR_23 , STRUCT_OR_UNION_7 -> VAR_24 , VAR_25 . VAR_26 ) ; VAR_27 -> VAR_28 = ( VAR_29 -> VAR_30 & ~ VAR_31 ) | VAR_32 . VAR_33 ;  VAR_34 -> VAR_35 = VAR_36 . VAR_37 << STRUCT_OR_UNION_8 -> VAR_38 ;  } return VAR_39 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 * VAR_4 ) { struct STRUCT_OR_UNION_3 VAR_5 ; TYPE_5 VAR_6 ; VAR_7 . VAR_8 = VAR_9 ; VAR_10 . VAR_11 = VAR_12 -> VAR_13 >> STRUCT_OR_UNION_4 -> VAR_14 ; VAR_15 . VAR_16 = VAR_17 ; VAR_18 = STRUCT_OR_UNION_5 ( STRUCT_OR_UNION_6 , & VAR_19 , VAR_20 , VAR_21 ) ; if ( ! VAR_22 ) { METHOD_1 ( VAR_23 , STRUCT_OR_UNION_7 -> VAR_24 , VAR_25 . VAR_26 ) ; VAR_27 -> VAR_28 = ( VAR_29 -> VAR_30 & ~ VAR_31 ) | VAR_32 . VAR_33 ; VAR_34 -> VAR_35 = ( TYPE_6 ) VAR_36 . VAR_37 << STRUCT_OR_UNION_8 -> VAR_38 ; } return VAR_39 ; }",221
222,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 -> VAR_5 -> VAR_6 ; TYPE_5 * VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 -> VAR_10 [ 0 ] , VAR_11 + ( VAR_12 -> VAR_13 - VAR_14 -> VAR_15 ) , VAR_16 + ( VAR_17 -> VAR_18 - VAR_19 -> VAR_20 ) ) ; TYPE_6 VAR_21 ; if ( ! VAR_22 ) return VAR_23 ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ;  for ( VAR_30 = 0 ; VAR_31 < 4 && VAR_32 -> VAR_33 [ VAR_34 ] ; VAR_35 ++ ) {  TYPE_7 VAR_36 = VAR_37 -> VAR_38 . VAR_39 [ VAR_40 ] ; TYPE_8 VAR_41 = VAR_42 -> VAR_43 . VAR_44 [ VAR_45 ] ; VAR_46 -> VAR_47 [ VAR_48 ] += ( VAR_49 -> VAR_50 >> VAR_51 ) * VAR_52 -> VAR_53 . VAR_54 [ VAR_55 ] + ( VAR_56 -> VAR_57 >> VAR_58 ) * VAR_59 -> VAR_60 [ VAR_61 ] ; } return VAR_62 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 -> VAR_5 -> VAR_6 ; TYPE_5 * VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 -> VAR_10 [ 0 ] , VAR_11 + ( VAR_12 -> VAR_13 - VAR_14 -> VAR_15 ) , VAR_16 + ( VAR_17 -> VAR_18 - VAR_19 -> VAR_20 ) ) ; TYPE_6 VAR_21 ; if ( ! VAR_22 ) return VAR_23 ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; for ( VAR_30 = 0 ; VAR_31 < 4 && VAR_32 -> VAR_33 [ VAR_34 ] ; VAR_35 ++ ) { TYPE_7 VAR_36 = VAR_37 -> VAR_38 . VAR_39 [ VAR_40 ] ; TYPE_8 VAR_41 = VAR_42 -> VAR_43 . VAR_44 [ VAR_45 ] ; VAR_46 -> VAR_47 [ VAR_48 ] += ( VAR_49 -> VAR_50 >> VAR_51 ) * VAR_52 -> VAR_53 . VAR_54 [ VAR_55 ] + ( VAR_56 -> VAR_57 >> VAR_58 ) * VAR_59 -> VAR_60 [ VAR_61 ] && VAR_62 -> VAR_60 [ VAR_61 ] ; } return VAR_62 ; }",222
223,"static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_0 VAR_3 , VAR_4 , VAR_5 ; TYPE_1 VAR_6 ; VAR_7 * VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 ) ; METHOD_4 ( VAR_17 -> VAR_18 -> VAR_19 & VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 == VAR_23 ) ; VAR_24 -> VAR_25 -> VAR_26 ++ ; VAR_27 = METHOD_6 ( VAR_28 ) ; METHOD_7 ( VAR_29 , ""Error"" , VAR_30 ) ; if ( VAR_31 -> VAR_32 -> VAR_33 -> VAR_34 != VAR_35 ) METHOD_8 ( VAR_36 -> VAR_37 , VAR_38 -> VAR_39 ) ; METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; METHOD_10 ( VAR_47 -> VAR_48 , ""HTTP/1.1"" , 503 , ""Backendfetchfailed"" ) ; METHOD_11 ( VAR_49 -> VAR_50 , ""Date:"" , VAR_51 ) ; METHOD_12 ( VAR_52 -> VAR_53 , ""Server:Varnish"" ) ; VAR_54 -> VAR_55 -> VAR_56 = VAR_57 ; if ( ! METHOD_13 ( & VAR_58 -> VAR_59 -> VAR_60 -> VAR_61 ) ) { VAR_62 -> VAR_63 -> VAR_64 = 1 ; VAR_65 -> VAR_66 -> VAR_67 = 5 ; VAR_68 -> VAR_69 -> VAR_70 = 5 ; } else { VAR_71 -> VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 -> VAR_79 = 0 ; } VAR_80 = METHOD_14 ( ) ; METHOD_15 ( VAR_81 ) ; METHOD_16 ( VAR_82 -> VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) ; METHOD_17 ( METHOD_18 ( VAR_88 ) ) ; if ( VAR_89 -> VAR_90 == VAR_91 || VAR_92 -> VAR_93 == VAR_94 ) { METHOD_19 ( & VAR_95 ) ; return ( VAR_96 ) ; } if ( VAR_97 -> VAR_98 == VAR_99 ) { METHOD_20 ( & VAR_100 ) ; if ( VAR_101 -> VAR_102 ++ < VAR_103 -> VAR_104 ) return ( VAR_105 ) ; METHOD_21 ( VAR_106 -> VAR_107 , VAR_108 , ""Toomanyretries,failing"" ) ; return ( VAR_109 ) ; } METHOD_22 ( VAR_110 -> VAR_111 == VAR_112 ) ; VAR_113 -> VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 -> VAR_119 = VAR_120 -> VAR_121 ; VAR_122 -> VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = VAR_130 -> VAR_131 ; VAR_132 -> VAR_133 -> VAR_134 = VAR_135 -> VAR_136 ; if ( METHOD_23 ( VAR_137 ) ) { ( TYPE_2 ) METHOD_24 ( VAR_138 -> VAR_139 , ""Couldnotgetstorage"" ) ; METHOD_25 ( & VAR_140 ) ; return ( VAR_141 ) ; } VAR_142 = METHOD_26 ( VAR_143 ) ; VAR_144 = 0 ; while ( VAR_145 > 0 ) { VAR_146 = VAR_147 ; if ( METHOD_27 ( VAR_148 -> VAR_149 , & VAR_150 , & VAR_151 ) != VAR_152 ) break ;  METHOD_28 ( VAR_153 , METHOD_29 ( VAR_154 ) + VAR_155 , VAR_156 ) ;  METHOD_30 ( VAR_157 -> VAR_158 , VAR_159 ) ; VAR_160 -= VAR_161 ; VAR_162 += VAR_163 ; } METHOD_31 ( METHOD_32 ( VAR_164 , VAR_165 -> VAR_166 , VAR_167 , VAR_168 ) ) ; METHOD_33 ( & VAR_169 ) ; METHOD_34 ( VAR_170 , VAR_171 -> VAR_172 ) ; METHOD_35 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) ; return ( VAR_177 ) ; }","static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { TYPE_0 VAR_3 , VAR_4 , VAR_5 ; TYPE_1 VAR_6 ; VAR_7 * VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 ; METHOD_1 ( VAR_10 , VAR_11 ) ; METHOD_2 ( VAR_12 , VAR_13 ) ; METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 ) ; METHOD_4 ( VAR_17 -> VAR_18 -> VAR_19 & VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 == VAR_23 ) ; VAR_24 -> VAR_25 -> VAR_26 ++ ; VAR_27 = METHOD_6 ( VAR_28 ) ; METHOD_7 ( VAR_29 , ""Error"" , VAR_30 ) ; if ( VAR_31 -> VAR_32 -> VAR_33 -> VAR_34 != VAR_35 ) METHOD_8 ( VAR_36 -> VAR_37 , VAR_38 -> VAR_39 ) ; METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) ; METHOD_10 ( VAR_47 -> VAR_48 , ""HTTP/1.1"" , 503 , ""Backendfetchfailed"" ) ; METHOD_11 ( VAR_49 -> VAR_50 , ""Date:"" , VAR_51 ) ; METHOD_12 ( VAR_52 -> VAR_53 , ""Server:Varnish"" ) ; VAR_54 -> VAR_55 -> VAR_56 = VAR_57 ; if ( ! METHOD_13 ( & VAR_58 -> VAR_59 -> VAR_60 -> VAR_61 ) ) { VAR_62 -> VAR_63 -> VAR_64 = 1 ; VAR_65 -> VAR_66 -> VAR_67 = 5 ; VAR_68 -> VAR_69 -> VAR_70 = 5 ; } else { VAR_71 -> VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 -> VAR_79 = 0 ; } VAR_80 = METHOD_14 ( ) ; METHOD_15 ( VAR_81 ) ; METHOD_16 ( VAR_82 -> VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 ) ; METHOD_17 ( METHOD_18 ( VAR_88 ) ) ; if ( VAR_89 -> VAR_90 == VAR_91 || VAR_92 -> VAR_93 == VAR_94 ) { METHOD_19 ( & VAR_95 ) ; return ( VAR_96 ) ; } if ( VAR_97 -> VAR_98 == VAR_99 ) { METHOD_20 ( & VAR_100 ) ; if ( VAR_101 -> VAR_102 ++ < VAR_103 -> VAR_104 ) return ( VAR_105 ) ; METHOD_21 ( VAR_106 -> VAR_107 , VAR_108 , ""Toomanyretries,failing"" ) ; return ( VAR_109 ) ; } METHOD_22 ( VAR_110 -> VAR_111 == VAR_112 ) ; VAR_113 -> VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 -> VAR_119 = VAR_120 -> VAR_121 ; VAR_122 -> VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ; VAR_127 -> VAR_128 -> VAR_129 = VAR_130 -> VAR_131 ; VAR_132 -> VAR_133 -> VAR_134 = VAR_135 -> VAR_136 ; if ( METHOD_23 ( VAR_137 ) ) { ( TYPE_2 ) METHOD_24 ( VAR_138 -> VAR_139 , ""Couldnotgetstorage"" ) ; METHOD_25 ( & VAR_140 ) ; return ( VAR_141 ) ; } VAR_142 = METHOD_26 ( VAR_143 ) ; VAR_144 = 0 ; while ( VAR_145 > 0 ) { VAR_146 = VAR_147 ; if ( METHOD_27 ( VAR_148 -> VAR_149 , & VAR_150 , & VAR_151 ) != VAR_152 ) break ; if ( VAR_163 > VAR_160 ) VAR_163 = VAR_160 ; METHOD_28 ( VAR_153 , METHOD_29 ( VAR_154 ) + VAR_155 , VAR_156 ) ; METHOD_30 ( VAR_157 -> VAR_158 , VAR_159 ) ; VAR_160 -= VAR_161 ; VAR_162 += VAR_163 ; } METHOD_31 ( METHOD_32 ( VAR_164 , VAR_165 -> VAR_166 , VAR_167 , VAR_168 ) ) ; METHOD_33 ( & VAR_169 ) ; METHOD_34 ( VAR_170 , VAR_171 -> VAR_172 ) ; METHOD_35 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) ; return ( VAR_177 ) ; }",223
224,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; if ( ! VAR_6 -> VAR_7 || ! METHOD_2 ( VAR_8 , & VAR_9 -> VAR_10 ) ) return - VAR_11 ; * VAR_12 = sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_13 = ( struct STRUCT_OR_UNION_6 * ) STRUCT_OR_UNION_7 ;  VAR_14 -> VAR_15 = VAR_16 ;  VAR_17 -> VAR_18 . VAR_19 = VAR_20 -> VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 . VAR_30 = VAR_31 -> VAR_32 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; if ( ! VAR_6 -> VAR_7 || ! METHOD_2 ( VAR_8 , & VAR_9 -> VAR_10 ) ) return - VAR_11 ; * VAR_12 = sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_13 = ( struct STRUCT_OR_UNION_6 * ) STRUCT_OR_UNION_7 ; METHOD_3 ( VAR_28 , 0 , sizeof ( * VAR_28 ) ) ; VAR_14 -> VAR_15 = VAR_16 ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 -> VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = VAR_26 -> VAR_27 ; VAR_28 -> VAR_29 . VAR_30 = VAR_31 -> VAR_32 ; return 0 ; }",224
225,TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ;  METHOD_2 ( STRUCT_OR_UNION_4 ) ;  METHOD_3 ( ! ( VAR_3 -> VAR_4 & VAR_5 ) ) ; METHOD_4 ( STRUCT_OR_UNION_5 ) ; } },TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; METHOD_3 ( ! ( VAR_3 -> VAR_4 & VAR_5 ) ) ; METHOD_4 ( STRUCT_OR_UNION_5 ) ; } },225
226,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ; TYPE_4 * VAR_6 ; TYPE_5 VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ; if ( VAR_10 ) { METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 , ""Directpaddingimpossibleallocatingnewframe\\n"" ) ; VAR_14 = METHOD_3 ( VAR_15 -> VAR_16 -> VAR_17 [ 0 ] , METHOD_4 ( VAR_18 -> VAR_19 , VAR_20 -> VAR_21 ) , METHOD_5 ( VAR_22 -> VAR_23 , VAR_24 -> VAR_25 ) ) ; if ( ! VAR_26 ) { METHOD_6 ( & VAR_27 ) ; return METHOD_7 ( VAR_28 ) ; } METHOD_8 ( VAR_29 , VAR_30 ) ; } else { TYPE_6 VAR_31 ; VAR_32 = VAR_33 ;  for ( VAR_34 = 0 ; VAR_35 < 4 && VAR_36 -> VAR_37 [ VAR_38 ] ; VAR_39 ++ ) {  TYPE_7 VAR_40 = VAR_41 -> VAR_42 . VAR_43 [ VAR_44 ] ; TYPE_8 VAR_45 = VAR_46 -> VAR_47 . VAR_48 [ VAR_49 ] ; VAR_50 -> VAR_51 [ VAR_52 ] -= ( VAR_53 -> VAR_54 >> VAR_55 ) * VAR_56 -> VAR_57 . VAR_58 [ VAR_59 ] + ( VAR_60 -> VAR_61 >> VAR_62 ) * VAR_63 -> VAR_64 [ VAR_65 ] ; } } if ( VAR_66 -> VAR_67 ) { METHOD_9 ( & VAR_68 -> VAR_69 , & VAR_70 -> VAR_71 , VAR_72 -> VAR_73 , VAR_74 -> VAR_75 , 0 , 0 , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 ) ; } if ( VAR_80 -> VAR_81 > VAR_82 -> VAR_83 + VAR_84 -> VAR_85 ) { METHOD_10 ( & VAR_86 -> VAR_87 , & VAR_88 -> VAR_89 , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 , 0 , VAR_94 -> VAR_95 + VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 - VAR_102 -> VAR_103 - VAR_104 -> VAR_105 ) ; } METHOD_11 ( & VAR_106 -> VAR_107 , & VAR_108 -> VAR_109 , VAR_110 -> VAR_111 , VAR_112 -> VAR_113 , 0 , VAR_114 -> VAR_115 , VAR_116 -> VAR_117 , VAR_118 -> VAR_119 ) ; if ( VAR_120 ) { METHOD_12 ( & VAR_121 -> VAR_122 , VAR_123 -> VAR_124 , VAR_125 -> VAR_126 , VAR_127 -> VAR_128 , VAR_129 -> VAR_130 , VAR_131 -> VAR_132 , VAR_133 -> VAR_134 , 0 , 0 , VAR_135 -> VAR_136 , VAR_137 -> VAR_138 ) ; } METHOD_13 ( & VAR_139 -> VAR_140 , & VAR_141 -> VAR_142 , VAR_143 -> VAR_144 , VAR_145 -> VAR_146 , VAR_147 -> VAR_148 + VAR_149 -> VAR_150 , VAR_151 -> VAR_152 , VAR_153 -> VAR_154 - VAR_155 -> VAR_156 - VAR_157 -> VAR_158 , VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 = VAR_163 -> VAR_164 ; VAR_165 -> VAR_166 = VAR_167 -> VAR_168 ; if ( VAR_169 != VAR_170 ) METHOD_14 ( & VAR_171 ) ; return METHOD_15 ( VAR_172 -> VAR_173 -> VAR_174 [ 0 ] , VAR_175 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ; TYPE_4 * VAR_6 ; TYPE_5 VAR_7 = METHOD_1 ( VAR_8 , VAR_9 ) ; if ( VAR_10 ) { METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 , ""Directpaddingimpossibleallocatingnewframe\\n"" ) ; VAR_14 = METHOD_3 ( VAR_15 -> VAR_16 -> VAR_17 [ 0 ] , METHOD_4 ( VAR_18 -> VAR_19 , VAR_20 -> VAR_21 ) , METHOD_5 ( VAR_22 -> VAR_23 , VAR_24 -> VAR_25 ) ) ; if ( ! VAR_26 ) { METHOD_6 ( & VAR_27 ) ; return METHOD_7 ( VAR_28 ) ; } METHOD_8 ( VAR_29 , VAR_30 ) ; } else { TYPE_6 VAR_31 ; VAR_32 = VAR_33 ; for ( VAR_34 = 0 ; VAR_35 < 4 && VAR_36 -> VAR_37 [ VAR_38 ] ; VAR_39 ++ ) { TYPE_7 VAR_40 = VAR_41 -> VAR_42 . VAR_43 [ VAR_44 ] ; TYPE_8 VAR_45 = VAR_46 -> VAR_47 . VAR_48 [ VAR_49 ] ; VAR_50 -> VAR_51 [ VAR_52 ] -= ( VAR_53 -> VAR_54 >> VAR_55 ) * VAR_56 -> VAR_57 . VAR_58 [ VAR_59 ] + ( VAR_60 -> VAR_61 >> VAR_62 ) * VAR_63 -> VAR_64 [ VAR_65 ] && VAR_175 -> VAR_146 [ VAR_65 ] ; } } if ( VAR_66 -> VAR_67 ) { METHOD_9 ( & VAR_68 -> VAR_69 , & VAR_70 -> VAR_71 , VAR_72 -> VAR_73 , VAR_74 -> VAR_75 , 0 , 0 , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 ) ; } if ( VAR_80 -> VAR_81 > VAR_82 -> VAR_83 + VAR_84 -> VAR_85 ) { METHOD_10 ( & VAR_86 -> VAR_87 , & VAR_88 -> VAR_89 , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 , 0 , VAR_94 -> VAR_95 + VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 - VAR_102 -> VAR_103 - VAR_104 -> VAR_105 ) ; } METHOD_11 ( & VAR_106 -> VAR_107 , & VAR_108 -> VAR_109 , VAR_110 -> VAR_111 , VAR_112 -> VAR_113 , 0 , VAR_114 -> VAR_115 , VAR_116 -> VAR_117 , VAR_118 -> VAR_119 ) ; if ( VAR_120 ) { METHOD_12 ( & VAR_121 -> VAR_122 , VAR_123 -> VAR_124 , VAR_125 -> VAR_126 , VAR_127 -> VAR_128 , VAR_129 -> VAR_130 , VAR_131 -> VAR_132 , VAR_133 -> VAR_134 , 0 , 0 , VAR_135 -> VAR_136 , VAR_137 -> VAR_138 ) ; } METHOD_13 ( & VAR_139 -> VAR_140 , & VAR_141 -> VAR_142 , VAR_143 -> VAR_144 , VAR_145 -> VAR_146 , VAR_147 -> VAR_148 + VAR_149 -> VAR_150 , VAR_151 -> VAR_152 , VAR_153 -> VAR_154 - VAR_155 -> VAR_156 - VAR_157 -> VAR_158 , VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 = VAR_163 -> VAR_164 ; VAR_165 -> VAR_166 = VAR_167 -> VAR_168 ; if ( VAR_169 != VAR_170 ) METHOD_14 ( & VAR_171 ) ; return METHOD_15 ( VAR_172 -> VAR_173 -> VAR_174 [ 0 ] , VAR_175 ) ; }",226
227,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_7 VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 = VAR_12 & 0xFFFF ; TYPE_9 VAR_13 = VAR_14 >> 16 ;  TYPE_10 VAR_15 [ 16 ] ;  TYPE_11 * VAR_16 ; TYPE_12 * VAR_17 ; TYPE_13 * VAR_18 = ( TYPE_14 * ) VAR_19 -> VAR_20 ; VAR_21 = ( TYPE_15 * ) VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = 0 ; VAR_26 = & VAR_27 -> VAR_28 [ 0 ] ; VAR_29 = VAR_30 - 1 ; if ( VAR_31 ) { TYPE_16 VAR_32 , VAR_33 = VAR_34 ; TYPE_17 ( * VAR_35 ) [ 3 ] = ( TYPE_18 ( * ) [ 3 ] ) VAR_36 ; TYPE_19 * VAR_37 ; METHOD_1 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = VAR_43 [ ( 1 << VAR_44 ) - 2 + VAR_45 ] ; while ( VAR_46 -- ) VAR_47 [ VAR_48 -- ] = * VAR_49 ++ ; } if ( VAR_50 >= 0 ) { TYPE_20 VAR_51 , VAR_52 , VAR_53 ; TYPE_21 VAR_54 , VAR_55 ; TYPE_22 VAR_56 ; if ( VAR_57 < 3 ) { METHOD_2 ( VAR_58 , VAR_59 , VAR_60 ) ; VAR_61 = ( 15 <= VAR_62 ) ? ( VAR_63 - 3 ) : 1 ; METHOD_3 ( VAR_64 , VAR_65 , VAR_66 , VAR_67 ) ; VAR_68 = 2 + ( METHOD_4 ( VAR_69 , 15 ) << 1 ) + VAR_70 ; if ( 16 <= VAR_71 ) { VAR_72 += ( ( 1 << ( VAR_73 - 3 ) ) - 4096 ) ; } } else { METHOD_5 ( VAR_74 , VAR_75 , VAR_76 ) ; VAR_77 = METHOD_6 ( 15 , VAR_78 ) ; VAR_79 += ( 3 == VAR_80 ) ? 0 : ( 2 ) ; if ( 14 == VAR_81 ) VAR_82 = 4 ; else if ( 15 <= VAR_83 ) { VAR_84 += 15 ; VAR_85 = ( VAR_86 - 3 ) ; } else VAR_87 = 0 ; if ( 16 <= VAR_88 ) { VAR_89 += ( ( 1 << ( VAR_90 - 3 ) ) - 4096 ) ; } if ( VAR_91 ) { METHOD_7 ( VAR_92 , VAR_93 , VAR_94 , VAR_95 ) ; VAR_96 += VAR_97 ; } } VAR_98 = ( VAR_99 + 2 ) >> 1 ; VAR_100 [ VAR_101 -- ] = ( VAR_102 & 1 ) ? - VAR_103 : VAR_104 ; VAR_105 = ( VAR_106 > 3 ) ? 2 : 1 ; while ( VAR_107 >= 0 ) { METHOD_8 ( VAR_108 , VAR_109 , VAR_110 ) ; VAR_111 = ( 15 <= VAR_112 ) ? ( VAR_113 - 3 ) : VAR_114 ; METHOD_9 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 ) ; VAR_119 = ( METHOD_10 ( 15 , VAR_120 ) << VAR_121 ) + VAR_122 ; if ( 16 <= VAR_123 ) { VAR_124 += ( ( 1 << ( VAR_125 - 3 ) ) - 4096 ) ; } VAR_126 = ( VAR_127 + 2 ) >> 1 ; VAR_128 [ VAR_129 -- ] = ( VAR_130 & 1 ) ? - VAR_131 : VAR_132 ; VAR_133 += ( VAR_134 < 6 ) ? ( VAR_135 > ( 3 << ( VAR_136 - 1 ) ) ) : 0 ; } } if ( VAR_137 < ( 16 - VAR_138 ) ) { TYPE_23 VAR_139 ; const TYPE_24 ( * VAR_140 ) [ 16 ] = ( const TYPE_25 ( * ) [ 16 ] ) VAR_141 ; METHOD_11 ( VAR_142 , VAR_143 , VAR_144 , 4 ) ; VAR_145 = VAR_146 [ VAR_147 - 11 ] [ VAR_148 ] ; METHOD_12 ( VAR_149 , ( VAR_150 >> 4 ) ) ; VAR_151 &= 0xf ; } else VAR_152 = 0 ; { const TYPE_26 * VAR_153 ; TYPE_27 VAR_154 ; TYPE_28 VAR_155 ; TYPE_29 VAR_156 = VAR_157 + VAR_158 - 1 + VAR_159 ; TYPE_30 VAR_160 = VAR_161 ; VAR_162 = VAR_163 - 1 ; VAR_164 = ( TYPE_31 * ) VAR_165 ; while ( ( VAR_166 > 0 ) && VAR_167 ) { TYPE_32 VAR_168 ; METHOD_13 ( VAR_169 , VAR_170 , VAR_171 , 3 ) ; VAR_172 = VAR_173 [ VAR_174 + ( VAR_175 << 3 ) ] ; VAR_176 = VAR_177 >> 2 ; METHOD_14 ( VAR_178 , ( VAR_179 & 0x03 ) ) ; METHOD_15 ( VAR_180 -> VAR_181 , VAR_182 ) ; * VAR_183 ++ = VAR_184 [ VAR_185 -- ] ; VAR_186 -= VAR_187 ; VAR_188 -= ( VAR_189 + 1 ) ; } if ( VAR_190 < 0 ) return - 1 ; while ( VAR_191 >= 0 ) { METHOD_16 ( VAR_192 -> VAR_193 , VAR_194 ) ; * VAR_195 ++ = VAR_196 [ VAR_197 -- ] ; VAR_198 -- ; } } { TYPE_33 VAR_199 ; VAR_200 = ( TYPE_34 * ) VAR_201 - ( TYPE_35 * ) VAR_202 ; VAR_203 = METHOD_17 ( VAR_204 ) ; VAR_205 -> VAR_206 = ( TYPE_36 * ) ( ( TYPE_37 * ) VAR_207 -> VAR_208 + VAR_209 ) ; } VAR_210 -> VAR_211 = VAR_212 ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_7 VAR_8 = VAR_9 -> VAR_10 ; TYPE_8 VAR_11 = VAR_12 & 0xFFFF ; TYPE_9 VAR_13 = VAR_14 >> 16 ; TYPE_10 VAR_15 [ 16 ] ; TYPE_11 * VAR_16 ; TYPE_12 * VAR_17 ; TYPE_13 * VAR_18 = ( TYPE_14 * ) VAR_19 -> VAR_20 ; VAR_21 = ( TYPE_15 * ) VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = 0 ; VAR_26 = & VAR_27 -> VAR_28 [ 0 ] ; VAR_29 = VAR_30 - 1 ; if ( VAR_31 ) { TYPE_16 VAR_32 , VAR_33 = VAR_34 ; TYPE_17 ( * VAR_35 ) [ 3 ] = ( TYPE_18 ( * ) [ 3 ] ) VAR_36 ; TYPE_19 * VAR_37 ; METHOD_1 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = VAR_43 [ ( 1 << VAR_44 ) - 2 + VAR_45 ] ; while ( VAR_46 -- ) VAR_47 [ VAR_48 -- ] = * VAR_49 ++ ; } if ( VAR_50 >= 0 ) { TYPE_20 VAR_51 , VAR_52 , VAR_53 ; TYPE_21 VAR_54 , VAR_55 ; TYPE_22 VAR_56 ; if ( VAR_57 < 3 ) { METHOD_2 ( VAR_58 , VAR_59 , VAR_60 ) ; VAR_61 = ( 15 <= VAR_62 ) ? ( VAR_63 - 3 ) : 1 ; METHOD_3 ( VAR_64 , VAR_65 , VAR_66 , VAR_67 ) ; VAR_68 = 2 + ( METHOD_4 ( VAR_69 , 15 ) << 1 ) + VAR_70 ; if ( 16 <= VAR_71 ) { VAR_72 += ( ( 1 << ( VAR_73 - 3 ) ) - 4096 ) ; } } else { METHOD_5 ( VAR_74 , VAR_75 , VAR_76 ) ; VAR_77 = METHOD_6 ( 15 , VAR_78 ) ; VAR_79 += ( 3 == VAR_80 ) ? 0 : ( 2 ) ; if ( 14 == VAR_81 ) VAR_82 = 4 ; else if ( 15 <= VAR_83 ) { VAR_84 += 15 ; VAR_85 = ( VAR_86 - 3 ) ; } else VAR_87 = 0 ; if ( 16 <= VAR_88 ) { VAR_89 += ( ( 1 << ( VAR_90 - 3 ) ) - 4096 ) ; } if ( VAR_91 ) { METHOD_7 ( VAR_92 , VAR_93 , VAR_94 , VAR_95 ) ; VAR_96 += VAR_97 ; } } VAR_98 = ( VAR_99 + 2 ) >> 1 ; VAR_100 [ VAR_101 -- ] = ( VAR_102 & 1 ) ? - VAR_103 : VAR_104 ; VAR_105 = ( VAR_106 > 3 ) ? 2 : 1 ; while ( VAR_107 >= 0 ) { METHOD_8 ( VAR_108 , VAR_109 , VAR_110 ) ; VAR_111 = ( 15 <= VAR_112 ) ? ( VAR_113 - 3 ) : VAR_114 ; METHOD_9 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 ) ; VAR_119 = ( METHOD_10 ( 15 , VAR_120 ) << VAR_121 ) + VAR_122 ; if ( 16 <= VAR_123 ) { VAR_124 += ( ( 1 << ( VAR_125 - 3 ) ) - 4096 ) ; } VAR_126 = ( VAR_127 + 2 ) >> 1 ; VAR_128 [ VAR_129 -- ] = ( VAR_130 & 1 ) ? - VAR_131 : VAR_132 ; VAR_133 += ( VAR_134 < 6 ) ? ( VAR_135 > ( 3 << ( VAR_136 - 1 ) ) ) : 0 ; } } if ( VAR_137 < ( 16 - VAR_138 ) ) { TYPE_23 VAR_139 ; const TYPE_24 ( * VAR_140 ) [ 16 ] = ( const TYPE_25 ( * ) [ 16 ] ) VAR_141 ; METHOD_11 ( VAR_142 , VAR_143 , VAR_144 , 4 ) ; VAR_145 = VAR_146 [ VAR_147 - 11 ] [ VAR_148 ] ; METHOD_12 ( VAR_149 , ( VAR_150 >> 4 ) ) ; VAR_151 &= 0xf ; } else VAR_152 = 0 ; { const TYPE_26 * VAR_153 ; TYPE_27 VAR_154 ; TYPE_28 VAR_155 ; TYPE_29 VAR_156 = VAR_157 + VAR_158 - 1 + VAR_159 ; TYPE_30 VAR_160 = VAR_161 ; VAR_162 = VAR_163 - 1 ; VAR_164 = ( TYPE_31 * ) VAR_165 ; while ( ( VAR_166 > 0 ) && VAR_167 ) { TYPE_32 VAR_168 ; METHOD_13 ( VAR_169 , VAR_170 , VAR_171 , 3 ) ; VAR_172 = VAR_173 [ VAR_174 + ( VAR_175 << 3 ) ] ; VAR_176 = VAR_177 >> 2 ; METHOD_14 ( VAR_178 , ( VAR_179 & 0x03 ) ) ; METHOD_15 ( VAR_180 -> VAR_181 , VAR_182 ) ; * VAR_183 ++ = VAR_184 [ VAR_185 -- ] ; VAR_186 -= VAR_187 ; VAR_188 -= ( VAR_189 + 1 ) ; } if ( VAR_190 < 0 ) return - 1 ; while ( VAR_191 >= 0 ) { METHOD_16 ( VAR_192 -> VAR_193 , VAR_194 ) ; * VAR_195 ++ = VAR_196 [ VAR_197 -- ] ; VAR_198 -- ; } } { TYPE_33 VAR_199 ; VAR_200 = ( TYPE_34 * ) VAR_201 - ( TYPE_35 * ) VAR_202 ; VAR_203 = METHOD_17 ( VAR_204 ) ; VAR_205 -> VAR_206 = ( TYPE_36 * ) ( ( TYPE_37 * ) VAR_207 -> VAR_208 + VAR_209 ) ; } VAR_210 -> VAR_211 = VAR_212 ; return 0 ; }",227
228,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 [ 3 ] ; TYPE_7 * VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ;  VAR_11 = 0 ;  VAR_12 = 0 ; if ( VAR_13 ) { METHOD_1 ( ""warning:ignoringBMPdecoderoptions\\n"" ) ; } METHOD_2 ( ""THEBMPFORMATISNOTFULLYSUPPORTED!\\n"" ""THATIS,THEJASPERSOFTWARECANNOTDECODEALLTYPESOFBMPDATA.\\n"" ""IFYOUHAVEANYPROBLEMS,PLEASETRYCONVERTINGYOURIMAGEDATA\\n"" ""TOTHEPNMFORMAT,ANDUSINGTHISFORMATINSTEAD.\\n"" ) ; if ( METHOD_3 ( VAR_14 , & VAR_15 ) ) { METHOD_4 ( ""cannotgetheader\\n"" ) ; goto VAR_16 ; } METHOD_5 ( 1 , ( ""BMPheader:magic0x%x;siz%d;res1%d;res2%d;off%d\\n"" , VAR_17 . VAR_18 , VAR_19 . VAR_20 , VAR_21 . VAR_22 , VAR_23 . VAR_24 , VAR_25 . VAR_26 ) ) ; if ( ! ( VAR_27 = METHOD_6 ( VAR_28 ) ) ) { METHOD_7 ( ""cannotgetinfo\\n"" ) ; goto VAR_29 ; } METHOD_8 ( 1 , ( ""BMPinformation:len%ld;width%ld;height%ld;numplanes%d;"" ""depth%d;enctype%ld;siz%ld;hres%ld;vres%ld;numcolors%ld;"" ""mincolors%ld\\n"" , JAS_CAST ( TYPE_10 , VAR_30 -> len ) , JAS_CAST ( TYPE_11 , VAR_31 -> VAR_32 ) , JAS_CAST ( TYPE_12 , VAR_33 -> VAR_34 ) , JAS_CAST ( TYPE_13 , VAR_35 -> VAR_36 ) , JAS_CAST ( TYPE_14 , VAR_37 -> VAR_38 ) , JAS_CAST ( TYPE_15 , VAR_39 -> enctype ) , JAS_CAST ( TYPE_16 , VAR_40 -> VAR_41 ) , JAS_CAST ( TYPE_17 , VAR_42 -> VAR_43 ) , JAS_CAST ( TYPE_18 , VAR_44 -> VAR_45 ) , JAS_CAST ( TYPE_19 , VAR_46 -> numcolors ) , JAS_CAST ( TYPE_20 , VAR_47 -> mincolors ) ) ) ; if ( VAR_48 -> VAR_49 < 0 || VAR_50 -> VAR_51 < 0 || VAR_52 -> VAR_53 < 0 || VAR_54 -> VAR_55 < 0 || VAR_56 -> VAR_57 < 0 || VAR_58 -> VAR_59 < 0 || VAR_60 -> VAR_61 < 0 ) {  METHOD_9 ( ""corruptbitstream\\n"" ) ;  goto VAR_62 ; } if ( ! METHOD_10 ( & VAR_63 , VAR_64 ) ) { METHOD_11 ( ""error:unsupportedBMPencoding\\n"" ) ; goto VAR_65 ; } if ( ( VAR_66 = VAR_67 . VAR_68 - ( VAR_69 + VAR_70 + METHOD_12 ( VAR_71 ) ) ) < 0 ) { METHOD_13 ( ""error:possiblybadbitmapoffset?\\n"" ) ; goto VAR_72 ; } if ( VAR_73 > 0 ) { METHOD_14 ( ""skippingunknowndatainBMPfile\\n"" ) ; if ( METHOD_15 ( VAR_74 , VAR_75 ) ) { goto VAR_76 ; } } VAR_77 = METHOD_16 ( VAR_78 ) ; for ( VAR_79 = 0 , VAR_80 = VAR_81 ; VAR_82 < VAR_83 ; ++ VAR_84 , ++ VAR_85 ) { VAR_86 -> VAR_87 = 0 ; VAR_88 -> VAR_89 = 0 ; VAR_90 -> VAR_91 = 1 ; VAR_92 -> VAR_93 = 1 ; VAR_94 -> VAR_95 = VAR_96 -> VAR_97 ; VAR_98 -> VAR_99 = VAR_100 -> VAR_101 ; VAR_102 -> VAR_103 = 8 ; VAR_104 -> VAR_105 = VAR_106 ; } if ( ! ( VAR_107 = METHOD_17 ( VAR_108 , VAR_109 , VAR_110 ) ) ) { goto VAR_111 ; } if ( VAR_112 == 3 ) { METHOD_18 ( VAR_113 , VAR_114 ) ; METHOD_19 ( VAR_115 , 0 , METHOD_20 ( VAR_116 ) ) ; METHOD_21 ( VAR_117 , 1 , METHOD_22 ( VAR_118 ) ) ; METHOD_23 ( VAR_119 , 2 , METHOD_24 ( VAR_120 ) ) ; } else { METHOD_25 ( VAR_121 , VAR_122 ) ; METHOD_26 ( VAR_123 , 0 , METHOD_27 ( VAR_124 ) ) ; } if ( METHOD_28 ( VAR_125 , VAR_126 , VAR_127 ) ) { goto VAR_128 ; } METHOD_29 ( VAR_129 ) ; return VAR_130 ; VAR_131 : if ( VAR_132 ) { METHOD_30 ( VAR_133 ) ; } if ( VAR_134 ) { METHOD_31 ( VAR_135 ) ; } return 0 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 [ 3 ] ; TYPE_7 * VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; VAR_11 = 0 ; VAR_12 = 0 ; if ( VAR_13 ) { METHOD_1 ( ""warning:ignoringBMPdecoderoptions\\n"" ) ; } METHOD_2 ( ""THEBMPFORMATISNOTFULLYSUPPORTED!\\n"" ""THATIS,THEJASPERSOFTWARECANNOTDECODEALLTYPESOFBMPDATA.\\n"" ""IFYOUHAVEANYPROBLEMS,PLEASETRYCONVERTINGYOURIMAGEDATA\\n"" ""TOTHEPNMFORMAT,ANDUSINGTHISFORMATINSTEAD.\\n"" ) ; if ( METHOD_3 ( VAR_14 , & VAR_15 ) ) { METHOD_4 ( ""cannotgetheader\\n"" ) ; goto VAR_16 ; } METHOD_5 ( 1 , ( ""BMPheader:magic0x%x;siz%d;res1%d;res2%d;off%d\\n"" , VAR_17 . VAR_18 , VAR_19 . VAR_20 , VAR_21 . VAR_22 , VAR_23 . VAR_24 , VAR_25 . VAR_26 ) ) ; if ( ! ( VAR_27 = METHOD_6 ( VAR_28 ) ) ) { METHOD_7 ( ""cannotgetinfo\\n"" ) ; goto VAR_29 ; } METHOD_8 ( 1 , ( ""BMPinformation:len%ld;width%ld;height%ld;numplanes%d;"" ""depth%d;enctype%ld;siz%ld;hres%ld;vres%ld;numcolors%ld;"" ""mincolors%ld\\n"" , JAS_CAST ( TYPE_10 , VAR_30 -> len ) , JAS_CAST ( TYPE_11 , VAR_31 -> VAR_32 ) , JAS_CAST ( TYPE_12 , VAR_33 -> VAR_34 ) , JAS_CAST ( TYPE_13 , VAR_35 -> VAR_36 ) , JAS_CAST ( TYPE_14 , VAR_37 -> VAR_38 ) , JAS_CAST ( TYPE_15 , VAR_39 -> enctype ) , JAS_CAST ( TYPE_16 , VAR_40 -> VAR_41 ) , JAS_CAST ( TYPE_17 , VAR_42 -> VAR_43 ) , JAS_CAST ( TYPE_18 , VAR_44 -> VAR_45 ) , JAS_CAST ( TYPE_19 , VAR_46 -> numcolors ) , JAS_CAST ( TYPE_20 , VAR_47 -> mincolors ) ) ) ; if ( VAR_48 -> VAR_49 < 0 || VAR_50 -> VAR_51 < 0 || VAR_52 -> VAR_53 < 0 || VAR_54 -> VAR_55 < 0 || VAR_56 -> VAR_57 < 0 || VAR_58 -> VAR_59 < 0 || VAR_60 -> VAR_61 < 0 ) { METHOD_9 ( ""corruptbitstream\\n"" ) ; goto VAR_62 ; } if ( ! METHOD_10 ( & VAR_63 , VAR_64 ) ) { METHOD_11 ( ""error:unsupportedBMPencoding\\n"" ) ; goto VAR_65 ; } if ( ( VAR_66 = VAR_67 . VAR_68 - ( VAR_69 + VAR_70 + METHOD_12 ( VAR_71 ) ) ) < 0 ) { METHOD_13 ( ""error:possiblybadbitmapoffset?\\n"" ) ; goto VAR_72 ; } if ( VAR_73 > 0 ) { METHOD_14 ( ""skippingunknowndatainBMPfile\\n"" ) ; if ( METHOD_15 ( VAR_74 , VAR_75 ) ) { goto VAR_76 ; } } VAR_77 = METHOD_16 ( VAR_78 ) ; for ( VAR_79 = 0 , VAR_80 = VAR_81 ; VAR_82 < VAR_83 ; ++ VAR_84 , ++ VAR_85 ) { VAR_86 -> VAR_87 = 0 ; VAR_88 -> VAR_89 = 0 ; VAR_90 -> VAR_91 = 1 ; VAR_92 -> VAR_93 = 1 ; VAR_94 -> VAR_95 = VAR_96 -> VAR_97 ; VAR_98 -> VAR_99 = VAR_100 -> VAR_101 ; VAR_102 -> VAR_103 = 8 ; VAR_104 -> VAR_105 = VAR_106 ; } if ( ! ( VAR_107 = METHOD_17 ( VAR_108 , VAR_109 , VAR_110 ) ) ) { goto VAR_111 ; } if ( VAR_112 == 3 ) { METHOD_18 ( VAR_113 , VAR_114 ) ; METHOD_19 ( VAR_115 , 0 , METHOD_20 ( VAR_116 ) ) ; METHOD_21 ( VAR_117 , 1 , METHOD_22 ( VAR_118 ) ) ; METHOD_23 ( VAR_119 , 2 , METHOD_24 ( VAR_120 ) ) ; } else { METHOD_25 ( VAR_121 , VAR_122 ) ; METHOD_26 ( VAR_123 , 0 , METHOD_27 ( VAR_124 ) ) ; } if ( METHOD_28 ( VAR_125 , VAR_126 , VAR_127 ) ) { goto VAR_128 ; } METHOD_29 ( VAR_129 ) ; return VAR_130 ; VAR_131 : if ( VAR_132 ) { METHOD_30 ( VAR_133 ) ; } if ( VAR_134 ) { METHOD_31 ( VAR_135 ) ; } return 0 ; }",228
229,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; VAR_3 * VAR_4 ; if ( VAR_5 -> VAR_6 < 2 || VAR_7 -> VAR_8 > VAR_9 ) return VAR_10 ; VAR_11 = & VAR_12 -> VAR_13 ; if ( VAR_14 == VAR_15 ) if ( VAR_16 -> VAR_17 == VAR_18 ) { TYPE_4 VAR_19 ; TYPE_5 VAR_20 ; VAR_21 = METHOD_1 ( VAR_22 -> VAR_23 ) + METHOD_2 ( VAR_24 -> VAR_25 ) ; if ( ( VAR_26 -> VAR_27 + VAR_28 + 22 ) > VAR_29 ) return VAR_30 ; VAR_31 = VAR_32 -> VAR_33 + VAR_34 -> VAR_35 - 2 ; VAR_36 = METHOD_3 ( VAR_37 , ""Authorization:Basic"" ) ; VAR_38 = METHOD_4 ( VAR_39 + VAR_40 , ""%s:%s"" , VAR_41 -> VAR_42 , VAR_43 -> VAR_44 ) ; METHOD_5 ( VAR_45 + VAR_46 , VAR_47 , VAR_48 , & VAR_49 ) ; if ( ( VAR_50 -> VAR_51 + VAR_52 + VAR_53 ) > VAR_54 ) return VAR_55 ; METHOD_6 ( VAR_56 + VAR_57 , VAR_58 , VAR_59 + VAR_60 , & VAR_61 ) ; VAR_62 += VAR_63 ; if ( ( VAR_64 -> VAR_65 + VAR_66 + 2 ) > VAR_67 ) return VAR_68 ; METHOD_7 ( VAR_69 + VAR_70 , ""\\r\\n\\r\\n"" ) ; VAR_71 -> VAR_72 = VAR_73 -> VAR_74 + VAR_75 + 2 ; } else if ( VAR_76 == VAR_77 ) if ( VAR_78 -> VAR_79 == VAR_80 ) { TYPE_6 VAR_81 ; const TYPE_7 * VAR_82 ; const TYPE_8 * VAR_83 ; TYPE_9 VAR_84 ; TYPE_10 VAR_85 [ VAR_86 + 1 ] ; VAR_87 -> VAR_88 [ VAR_89 -> VAR_90 ] = '\\0' ;  VAR_91 = METHOD_8 ( VAR_92 -> VAR_93 , '' ) ;  if ( VAR_94 == VAR_95 ) return VAR_96 ; VAR_97 = VAR_98 + 1 ;  VAR_99 = METHOD_9 ( VAR_100 , '' ) ;  if ( VAR_101 == VAR_102 ) return VAR_103 ; VAR_104 = VAR_105 - VAR_106 ; if ( VAR_107 -> VAR_108 == VAR_109 || VAR_110 -> VAR_111 == VAR_112 ) { if ( VAR_113 -> METHOD_10 == VAR_114 ) return VAR_115 ; VAR_116 = VAR_117 -> METHOD_11 ( VAR_118 -> VAR_119 , VAR_120 ) ; if ( VAR_121 ) return VAR_122 ; METHOD_12 ( VAR_123 -> VAR_124 , VAR_125 , VAR_126 -> VAR_127 ) ; VAR_128 -> VAR_129 ++ ; } VAR_130 = METHOD_13 ( VAR_131 , VAR_132 -> VAR_133 , METHOD_14 ( VAR_134 -> VAR_135 ) , VAR_136 , VAR_137 , VAR_138 ) ; if ( VAR_139 ) return VAR_140 ; VAR_141 = METHOD_15 ( VAR_142 -> VAR_143 ) + METHOD_16 ( VAR_144 -> VAR_145 ) + VAR_146 + METHOD_17 ( VAR_147 -> VAR_148 ) + METHOD_18 ( VAR_149 -> VAR_150 ) + METHOD_19 ( VAR_151 ) + METHOD_20 ( VAR_152 -> VAR_153 ) ; if ( ( VAR_154 -> VAR_155 + VAR_156 + 121 ) > VAR_157 ) return VAR_158 ; VAR_159 = VAR_160 -> VAR_161 + VAR_162 -> VAR_163 - 2 ; VAR_164 = METHOD_21 ( VAR_165 , ""Authorization:Digest"" ) ; VAR_166 += METHOD_22 ( VAR_167 + VAR_168 , ""username=\\""%s\\"","" , VAR_169 -> VAR_170 ) ; VAR_171 += METHOD_23 ( VAR_172 + VAR_173 , ""realm=\\""%s\\"","" , VAR_174 -> VAR_175 ) ; VAR_176 += METHOD_24 ( VAR_177 + VAR_178 , ""uri=\\"""" ) ; osStrncpy ( VAR_179 + VAR_180 , VAR_181 , VAR_182 ) ; VAR_183 += VAR_184 ; VAR_185 += METHOD_25 ( VAR_186 + VAR_187 , ""\\"","" ) ; VAR_188 += METHOD_26 ( VAR_189 + VAR_190 , ""nonce=\\""%s\\"","" , VAR_191 -> VAR_192 ) ; if ( VAR_193 -> VAR_194 == VAR_195 ) { VAR_196 += METHOD_27 ( VAR_197 + VAR_198 , ""qop=auth,"" ) ; VAR_199 += METHOD_28 ( VAR_200 + VAR_201 , ""nc=%08x,"" , VAR_202 -> VAR_203 ) ; VAR_204 += METHOD_29 ( VAR_205 + VAR_206 , ""cnonce=\\""%s\\"","" , VAR_207 -> VAR_208 ) ; } VAR_209 += METHOD_30 ( VAR_210 + VAR_211 , ""response=\\""%s\\"""" , VAR_212 ) ; if ( VAR_213 -> VAR_214 [ 0 ] != '\\0' ) { VAR_215 += METHOD_31 ( VAR_216 + VAR_217 , "",opaque=\\""%s\\"""" , VAR_218 -> VAR_219 ) ; } METHOD_32 ( VAR_220 + VAR_221 , ""\\r\\n\\r\\n"" ) ; VAR_222 -> VAR_223 = VAR_224 -> VAR_225 + VAR_226 + 2 ; } else { } return VAR_227 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; VAR_3 * VAR_4 ; if ( VAR_5 -> VAR_6 < 2 || VAR_7 -> VAR_8 > VAR_9 ) return VAR_10 ; VAR_11 = & VAR_12 -> VAR_13 ; if ( VAR_14 == VAR_15 ) if ( VAR_16 -> VAR_17 == VAR_18 ) { TYPE_4 VAR_19 ; TYPE_5 VAR_20 ; VAR_21 = METHOD_1 ( VAR_22 -> VAR_23 ) + METHOD_2 ( VAR_24 -> VAR_25 ) ; if ( ( VAR_26 -> VAR_27 + VAR_28 + 22 ) > VAR_29 ) return VAR_30 ; VAR_31 = VAR_32 -> VAR_33 + VAR_34 -> VAR_35 - 2 ; VAR_36 = METHOD_3 ( VAR_37 , ""Authorization:Basic"" ) ; VAR_38 = METHOD_4 ( VAR_39 + VAR_40 , ""%s:%s"" , VAR_41 -> VAR_42 , VAR_43 -> VAR_44 ) ; METHOD_5 ( VAR_45 + VAR_46 , VAR_47 , VAR_48 , & VAR_49 ) ; if ( ( VAR_50 -> VAR_51 + VAR_52 + VAR_53 ) > VAR_54 ) return VAR_55 ; METHOD_6 ( VAR_56 + VAR_57 , VAR_58 , VAR_59 + VAR_60 , & VAR_61 ) ; VAR_62 += VAR_63 ; if ( ( VAR_64 -> VAR_65 + VAR_66 + 2 ) > VAR_67 ) return VAR_68 ; METHOD_7 ( VAR_69 + VAR_70 , ""\\r\\n\\r\\n"" ) ; VAR_71 -> VAR_72 = VAR_73 -> VAR_74 + VAR_75 + 2 ; } else if ( VAR_76 == VAR_77 ) if ( VAR_78 -> VAR_79 == VAR_80 ) { TYPE_6 VAR_81 ; const TYPE_7 * VAR_82 ; const TYPE_8 * VAR_83 ; TYPE_9 VAR_84 ; TYPE_10 VAR_85 [ VAR_86 + 1 ] ; VAR_87 -> VAR_88 [ VAR_89 -> VAR_90 ] = '\\0' ; VAR_91 = METHOD_8 ( VAR_92 -> VAR_93 , '' ) ; if ( VAR_94 == VAR_95 ) return VAR_96 ; VAR_97 = VAR_98 + 1 ; VAR_99 = METHOD_9 ( VAR_100 , '' ) ; if ( VAR_101 == VAR_102 ) return VAR_103 ; VAR_104 = VAR_105 - VAR_106 ; if ( VAR_107 -> VAR_108 == VAR_109 || VAR_110 -> VAR_111 == VAR_112 ) { if ( VAR_113 -> METHOD_10 == VAR_114 ) return VAR_115 ; VAR_116 = VAR_117 -> METHOD_11 ( VAR_118 -> VAR_119 , VAR_120 ) ; if ( VAR_121 ) return VAR_122 ; METHOD_12 ( VAR_123 -> VAR_124 , VAR_125 , VAR_126 -> VAR_127 ) ; VAR_128 -> VAR_129 ++ ; } VAR_130 = METHOD_13 ( VAR_131 , VAR_132 -> VAR_133 , METHOD_14 ( VAR_134 -> VAR_135 ) , VAR_136 , VAR_137 , VAR_138 ) ; if ( VAR_139 ) return VAR_140 ; VAR_141 = METHOD_15 ( VAR_142 -> VAR_143 ) + METHOD_16 ( VAR_144 -> VAR_145 ) + VAR_146 + METHOD_17 ( VAR_147 -> VAR_148 ) + METHOD_18 ( VAR_149 -> VAR_150 ) + METHOD_19 ( VAR_151 ) + METHOD_20 ( VAR_152 -> VAR_153 ) ; if ( ( VAR_154 -> VAR_155 + VAR_156 + 121 ) > VAR_157 ) return VAR_158 ; VAR_159 = VAR_160 -> VAR_161 + VAR_162 -> VAR_163 - 2 ; VAR_164 = METHOD_21 ( VAR_165 , ""Authorization:Digest"" ) ; VAR_166 += METHOD_22 ( VAR_167 + VAR_168 , ""username=\\""%s\\"","" , VAR_169 -> VAR_170 ) ; VAR_171 += METHOD_23 ( VAR_172 + VAR_173 , ""realm=\\""%s\\"","" , VAR_174 -> VAR_175 ) ; VAR_176 += METHOD_24 ( VAR_177 + VAR_178 , ""uri=\\"""" ) ; osStrncpy ( VAR_179 + VAR_180 , VAR_181 , VAR_182 ) ; VAR_183 += VAR_184 ; VAR_185 += METHOD_25 ( VAR_186 + VAR_187 , ""\\"","" ) ; VAR_188 += METHOD_26 ( VAR_189 + VAR_190 , ""nonce=\\""%s\\"","" , VAR_191 -> VAR_192 ) ; if ( VAR_193 -> VAR_194 == VAR_195 ) { VAR_196 += METHOD_27 ( VAR_197 + VAR_198 , ""qop=auth,"" ) ; VAR_199 += METHOD_28 ( VAR_200 + VAR_201 , ""nc=%08x,"" , VAR_202 -> VAR_203 ) ; VAR_204 += METHOD_29 ( VAR_205 + VAR_206 , ""cnonce=\\""%s\\"","" , VAR_207 -> VAR_208 ) ; } VAR_209 += METHOD_30 ( VAR_210 + VAR_211 , ""response=\\""%s\\"""" , VAR_212 ) ; if ( VAR_213 -> VAR_214 [ 0 ] != '\\0' ) { VAR_215 += METHOD_31 ( VAR_216 + VAR_217 , "",opaque=\\""%s\\"""" , VAR_218 -> VAR_219 ) ; } METHOD_32 ( VAR_220 + VAR_221 , ""\\r\\n\\r\\n"" ) ; VAR_222 -> VAR_223 = VAR_224 -> VAR_225 + VAR_226 + 2 ; } else { } return VAR_227 ; }",229
230,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; TYPE_1 VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 ) ; TYPE_2 VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; METHOD_3 ( & VAR_14 -> VAR_15 ) ; if ( VAR_16 == VAR_17 ) VAR_18 = & VAR_19 -> VAR_20 ; else if ( VAR_21 == VAR_22 ) VAR_23 = & VAR_24 -> VAR_25 ; else METHOD_4 ( ) ;  METHOD_5 ( ! VAR_26 ) ;  VAR_27 = METHOD_6 ( VAR_28 , VAR_29 == VAR_30 ) ; METHOD_7 ( VAR_31 , VAR_32 == VAR_33 ) ; VAR_34 = 0 ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 -> VAR_39 ; VAR_40 ++ ) { if ( VAR_41 -> VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 != VAR_46 ) VAR_47 ++ ; } VAR_48 = VAR_49 -> VAR_50 ; if ( ! VAR_51 ) { METHOD_8 ( VAR_52 ) ; VAR_53 = VAR_54 ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = - 1 ; for ( VAR_61 = 0 , VAR_62 = 0 ; VAR_63 < VAR_64 -> VAR_65 -> VAR_66 ; VAR_67 ++ ) { if ( VAR_68 -> VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 == VAR_73 ) continue ; VAR_74 -> VAR_75 [ VAR_76 ] = VAR_77 -> VAR_78 -> VAR_79 [ VAR_80 ] ; if ( VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 < VAR_85 ) { ++ VAR_86 -> VAR_87 ; } VAR_88 ++ ; } VAR_89 : VAR_90 -> VAR_91 = VAR_92 -> VAR_93 ; METHOD_9 ( VAR_94 -> VAR_95 , VAR_96 ) ; METHOD_10 ( ) ;  METHOD_11 ( & VAR_97 -> VAR_98 ) ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 ; TYPE_1 VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 ) ; TYPE_2 VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; METHOD_3 ( & VAR_14 -> VAR_15 ) ; if ( VAR_16 == VAR_17 ) VAR_18 = & VAR_19 -> VAR_20 ; else if ( VAR_21 == VAR_22 ) VAR_23 = & VAR_24 -> VAR_25 ; else METHOD_4 ( ) ; VAR_99 : METHOD_5 ( ! VAR_26 ) ; VAR_27 = METHOD_6 ( VAR_28 , VAR_29 == VAR_30 ) ; METHOD_7 ( VAR_31 , VAR_32 == VAR_33 ) ; VAR_34 = 0 ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 -> VAR_39 ; VAR_40 ++ ) { if ( VAR_41 -> VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 != VAR_46 ) VAR_47 ++ ; } VAR_48 = VAR_49 -> VAR_50 ; if ( ! VAR_51 ) { METHOD_8 ( VAR_52 ) ; VAR_53 = VAR_54 ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = - 1 ; for ( VAR_61 = 0 , VAR_62 = 0 ; VAR_63 < VAR_64 -> VAR_65 -> VAR_66 ; VAR_67 ++ ) { if ( VAR_68 -> VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 == VAR_73 ) continue ; VAR_74 -> VAR_75 [ VAR_76 ] = VAR_77 -> VAR_78 -> VAR_79 [ VAR_80 ] ; if ( VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 < VAR_85 ) { ++ VAR_86 -> VAR_87 ; } VAR_88 ++ ; } VAR_89 : VAR_90 -> VAR_91 = VAR_92 -> VAR_93 ; METHOD_9 ( VAR_94 -> VAR_95 , VAR_96 ) ; METHOD_10 ( ) ; METHOD_11 ( & VAR_97 -> VAR_98 ) ; }",230
231,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; VAR_5 = VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = METHOD_1 ( VAR_10 , sizeof ( struct STRUCT_OR_UNION_2 * ) , VAR_11 ) ; if ( ! VAR_12 -> VAR_13 ) { METHOD_2 ( VAR_14 , & VAR_15 -> VAR_16 -> VAR_17 , ""outofmemory\\n"" ) ; return - VAR_18 ; } METHOD_3 ( VAR_19 -> VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_3 * ) * VAR_21 ) ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; VAR_25 ++ ) { VAR_26 -> VAR_27 [ VAR_28 ] = METHOD_4 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_29 ) ; if ( ! VAR_30 -> VAR_31 [ VAR_32 ] ) { for ( VAR_33 = 0 ; VAR_34 < VAR_35 ; VAR_36 ++ ) METHOD_5 ( VAR_37 -> VAR_38 [ VAR_39 ] ) ; METHOD_6 ( VAR_40 -> VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 ; return - VAR_45 ; } } for ( VAR_46 = 0 ; VAR_47 < VAR_48 ; VAR_49 ++ ) { VAR_50 = VAR_51 -> VAR_52 [ VAR_53 ] ; METHOD_7 ( VAR_54 , 0 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; METHOD_8 ( & VAR_64 -> VAR_65 , & VAR_66 -> VAR_67 ) ; } if ( METHOD_9 ( VAR_68 ) ) { METHOD_10 ( VAR_69 , & VAR_70 -> VAR_71 -> VAR_72 , ""ErrorcreatingframeDMApool\\n"" ) ; METHOD_11 ( VAR_73 ) ;  }  return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; struct STRUCT_OR_UNION_1 * VAR_4 ; VAR_5 = VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = METHOD_1 ( VAR_10 , sizeof ( struct STRUCT_OR_UNION_2 * ) , VAR_11 ) ; if ( ! VAR_12 -> VAR_13 ) { METHOD_2 ( VAR_14 , & VAR_15 -> VAR_16 -> VAR_17 , ""outofmemory\\n"" ) ; return - VAR_18 ; } METHOD_3 ( VAR_19 -> VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_3 * ) * VAR_21 ) ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; VAR_25 ++ ) { VAR_26 -> VAR_27 [ VAR_28 ] = METHOD_4 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_29 ) ; if ( ! VAR_30 -> VAR_31 [ VAR_32 ] ) { for ( VAR_33 = 0 ; VAR_34 < VAR_35 ; VAR_36 ++ ) METHOD_5 ( VAR_37 -> VAR_38 [ VAR_39 ] ) ; METHOD_6 ( VAR_40 -> VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 ; return - VAR_45 ; } } for ( VAR_46 = 0 ; VAR_47 < VAR_48 ; VAR_49 ++ ) { VAR_50 = VAR_51 -> VAR_52 [ VAR_53 ] ; METHOD_7 ( VAR_54 , 0 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; METHOD_8 ( & VAR_64 -> VAR_65 , & VAR_66 -> VAR_67 ) ; } if ( METHOD_9 ( VAR_68 ) ) { METHOD_10 ( VAR_69 , & VAR_70 -> VAR_71 -> VAR_72 , ""ErrorcreatingframeDMApool\\n"" ) ; METHOD_11 ( VAR_73 ) ; return - VAR_45 ; } return 0 ; }",231
232,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ; VAR_9 = - VAR_10 ; if ( VAR_11 -> VAR_12 & VAR_13 ) goto VAR_14 ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , 0 , & VAR_18 ) ;  if ( ! VAR_19 ) goto VAR_20 ; VAR_21 = VAR_22 -> VAR_23 ; if ( VAR_24 < VAR_25 ) { VAR_26 -> VAR_27 |= VAR_28 ; VAR_29 = VAR_30 ; } VAR_31 = METHOD_2 ( VAR_32 , 0 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) goto VAR_37 ; VAR_38 = ( VAR_39 & VAR_40 ) ? VAR_41 -> VAR_42 : VAR_43 ; VAR_44 : METHOD_3 ( VAR_45 , VAR_46 ) ; METHOD_4 ( VAR_47 ) ; return VAR_48 ; VAR_49 : return VAR_50 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ; VAR_9 = - VAR_10 ; if ( VAR_11 -> VAR_12 & VAR_13 ) goto VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , 0 , & VAR_18 ) ; if ( ! VAR_19 ) goto VAR_20 ; VAR_21 = VAR_22 -> VAR_23 ; if ( VAR_24 < VAR_25 ) { VAR_26 -> VAR_27 |= VAR_28 ; VAR_29 = VAR_30 ; } VAR_31 = METHOD_2 ( VAR_32 , 0 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) goto VAR_37 ; VAR_38 = ( VAR_39 & VAR_40 ) ? VAR_41 -> VAR_42 : VAR_43 ; VAR_44 : METHOD_3 ( VAR_45 , VAR_46 ) ; METHOD_4 ( VAR_47 ) ; return VAR_48 ; VAR_49 : return VAR_50 ; }",232
233,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 ; TYPE_4 * VAR_6 , VAR_7 [ 5 ] = { 0 } ; VAR_8 = VAR_9 = VAR_10 = VAR_11 = 0 ; if ( VAR_12 [ 0 ] == '(' ) {  VAR_13 = METHOD_1 ( METHOD_2 ( VAR_14 ) + 1 ) ;  METHOD_3 ( VAR_15 , VAR_16 , METHOD_4 ( VAR_17 ) + 1 ) ; return VAR_18 ; } else if ( VAR_19 [ 0 ] == '<' ) { VAR_20 = 1 ; ++ VAR_21 ; } if ( VAR_22 && ( VAR_23 > 5 ) && ( VAR_24 [ VAR_25 ] == 'F' ) && ( VAR_26 [ VAR_27 + 1 ] == 'E' ) && ( VAR_28 [ VAR_29 + 2 ] == 'F' ) && ( VAR_30 [ VAR_31 + 3 ] == 'F' ) ) { VAR_32 = 1 ; VAR_33 += 4 ; } else return VAR_34 ;  VAR_35 = METHOD_5 ( VAR_36 ) ;  for ( ; VAR_37 < VAR_38 ; ++ VAR_39 ) { VAR_40 [ 0 ] = VAR_41 [ VAR_42 ++ ] ; VAR_43 [ 1 ] = VAR_44 [ VAR_45 ++ ] ; VAR_46 [ 2 ] = VAR_47 [ VAR_48 ++ ] ; VAR_49 [ 3 ] = VAR_50 [ VAR_51 ] ; VAR_52 [ VAR_53 ++ ] = METHOD_6 ( VAR_54 , VAR_55 , 16 ) ; } return VAR_56 ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 , VAR_5 ; TYPE_4 * VAR_6 , VAR_7 [ 5 ] = { 0 } ; VAR_8 = VAR_9 = VAR_10 = VAR_11 = 0 ; if ( VAR_12 [ 0 ] == '(' ) { VAR_13 = METHOD_1 ( METHOD_2 ( VAR_14 ) + 1 ) ; METHOD_3 ( VAR_15 , VAR_16 , METHOD_4 ( VAR_17 ) + 1 ) ; return VAR_18 ; } else if ( VAR_19 [ 0 ] == '<' ) { VAR_20 = 1 ; ++ VAR_21 ; } if ( VAR_22 && ( VAR_23 > 5 ) && ( VAR_24 [ VAR_25 ] == 'F' ) && ( VAR_26 [ VAR_27 + 1 ] == 'E' ) && ( VAR_28 [ VAR_29 + 2 ] == 'F' ) && ( VAR_30 [ VAR_31 + 3 ] == 'F' ) ) { VAR_32 = 1 ; VAR_33 += 4 ; } else return VAR_34 ; VAR_35 = METHOD_5 ( VAR_36 ) ; for ( ; VAR_37 < VAR_38 ; ++ VAR_39 ) { VAR_40 [ 0 ] = VAR_41 [ VAR_42 ++ ] ; VAR_43 [ 1 ] = VAR_44 [ VAR_45 ++ ] ; VAR_46 [ 2 ] = VAR_47 [ VAR_48 ++ ] ; VAR_49 [ 3 ] = VAR_50 [ VAR_51 ] ; VAR_52 [ VAR_53 ++ ] = METHOD_6 ( VAR_54 , VAR_55 , 16 ) ; } return VAR_56 ; }",233
234,"TYPE_0 * *  METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )  { static const TYPE_1 * VAR_0 [ ] = { ""DISPLAY"" , ""HOME"" , ""LOGNAME"" , ""MAIL"" , ""PATH"" , ""TERM"" , ""USER"" , ""USERNAME"" , VAR_1 } ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ;  STRUCT_OR_UNION_4 = METHOD_1 ( STRUCT_OR_UNION_5 ) ;  if ( ! ( STRUCT_OR_UNION_6 -> VAR_2 & VAR_3 ) ) METHOD_2 ( STRUCT_OR_UNION_7 , VAR_4 ) ; if ( STRUCT_OR_UNION_8 -> VAR_5 ) METHOD_3 ( STRUCT_OR_UNION_9 , STRUCT_OR_UNION_10 -> VAR_6 ) ; return METHOD_4 ( STRUCT_OR_UNION_11 ) ; }","TYPE_0 * * METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { static const TYPE_1 * VAR_0 [ ] = { ""DISPLAY"" , ""HOME"" , ""LOGNAME"" , ""MAIL"" , ""PATH"" , ""TERM"" , ""USER"" , ""USERNAME"" , VAR_1 } ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; STRUCT_OR_UNION_4 = METHOD_1 ( STRUCT_OR_UNION_5 ) ; if ( ! ( STRUCT_OR_UNION_6 -> VAR_2 & VAR_3 ) ) METHOD_2 ( STRUCT_OR_UNION_7 , VAR_4 ) ; if ( STRUCT_OR_UNION_8 -> VAR_5 ) METHOD_3 ( STRUCT_OR_UNION_9 , STRUCT_OR_UNION_10 -> VAR_6 ) ; return METHOD_4 ( STRUCT_OR_UNION_11 ) ; }",234
235,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { VAR_2 -> VAR_3 += VAR_4 -> VAR_5 ;  VAR_6 -> VAR_7 = VAR_8 -> VAR_9 ;  VAR_10 -> VAR_11 += VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 += VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 += VAR_20 -> VAR_21 ;  VAR_22 -> VAR_23 += VAR_24 -> VAR_25 ;  VAR_26 -> VAR_27 += VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 += VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 += VAR_36 -> VAR_37 ;  VAR_38 -> VAR_39 += VAR_40 -> VAR_41 ;  VAR_42 -> VAR_43 += VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 += VAR_48 -> VAR_49 ; VAR_50 -> VAR_51 += VAR_52 -> VAR_53 ; VAR_54 -> VAR_55 += VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 += VAR_60 -> VAR_61 ; VAR_62 -> VAR_63 += VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 += VAR_68 -> VAR_69 ; VAR_70 -> VAR_71 += VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 += VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 += VAR_80 -> VAR_81 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { VAR_2 -> VAR_3 += VAR_4 -> VAR_5 ; VAR_6 -> VAR_7 = VAR_8 -> VAR_9 ; VAR_10 -> VAR_11 += VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 += VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 += VAR_20 -> VAR_21 ; VAR_22 -> VAR_23 += VAR_24 -> VAR_25 ; VAR_26 -> VAR_27 += VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 += VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 += VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 += VAR_40 -> VAR_41 ; VAR_42 -> VAR_43 += VAR_44 -> VAR_45 ; VAR_46 -> VAR_47 += VAR_48 -> VAR_49 ; VAR_50 -> VAR_51 += VAR_52 -> VAR_53 ; VAR_54 -> VAR_55 += VAR_56 -> VAR_57 ; VAR_58 -> VAR_59 += VAR_60 -> VAR_61 ; VAR_62 -> VAR_63 += VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 += VAR_68 -> VAR_69 ; VAR_70 -> VAR_71 += VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 += VAR_76 -> VAR_77 ; VAR_78 -> weight += VAR_80 -> weight ; VAR_78 -> VAR_79 += VAR_80 -> VAR_81 ; }",235
236,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) {  struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ;  TYPE_2 VAR_5 ; if ( METHOD_1 ( & VAR_6 -> VAR_7 ) ) return ; METHOD_2 ( & VAR_8 -> VAR_9 ) ; if ( VAR_10 -> VAR_11 & VAR_12 ) { VAR_13 = METHOD_3 ( VAR_14 ) ; if ( ! VAR_15 ) return ; } else if ( VAR_16 -> VAR_17 == VAR_18 ) { METHOD_4 ( VAR_19 -> VAR_20 ) ; METHOD_5 ( VAR_21 -> VAR_22 ) ; }  METHOD_6 ( & VAR_23 -> VAR_24 ) ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { METHOD_2 ( & VAR_25 ) ; METHOD_7 ( VAR_3 -> VAR_4 ) ; METHOD_6 ( & VAR_23 -> VAR_24 ) ; }",236
237,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { struct STRUCT_OR_UNION_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( ) ; TYPE_2 * VAR_4 = VAR_5 ; TYPE_3 * VAR_6 = VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_11 ; const TYPE_4 * VAR_12 ; const TYPE_5 * VAR_13 = VAR_14 ; TYPE_6 VAR_15 = - VAR_16 ; if ( ! VAR_17 ) return - VAR_18 ; METHOD_2 ( VAR_19 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( METHOD_3 ( VAR_20 , & VAR_21 ) < 0 ) return - VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = VAR_29 -> VAR_30 = VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = 0 ; if ( METHOD_4 ( VAR_36 , ""/cgroup"" ) == 0 ) { VAR_37 -> VAR_38 = VAR_39 | 00755 ; VAR_40 -> VAR_41 = 2 ; return 0 ; } VAR_42 = METHOD_5 ( VAR_43 , VAR_44 ) ; if ( ! VAR_45 ) return - VAR_46 ; VAR_47 = METHOD_6 ( VAR_48 ) ; if ( ! VAR_49 ) { VAR_50 -> VAR_51 = VAR_52 | 00755 ; VAR_53 -> VAR_54 = 2 ; return 0 ; } METHOD_7 ( VAR_55 , & VAR_56 , & VAR_57 ) ; if ( ! VAR_58 ) { VAR_59 = ""/"" ; VAR_60 = VAR_61 ; } else { VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } if ( METHOD_8 ( VAR_66 , VAR_67 , VAR_68 ) ) {  if ( ! METHOD_9 ( VAR_69 -> VAR_70 , VAR_71 , VAR_72 , VAR_73 ) ) {  VAR_74 -> VAR_75 = VAR_76 | 00555 ; VAR_77 -> VAR_78 = 2 ; VAR_79 = 0 ; goto VAR_80 ; } if ( ! METHOD_10 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ) { VAR_86 = - VAR_87 ; goto VAR_88 ; } VAR_89 -> VAR_90 = VAR_91 | 00755 ; VAR_92 = METHOD_11 ( VAR_93 , VAR_94 , ""tasks"" ) ; if ( ! VAR_95 ) { VAR_96 -> VAR_97 = VAR_98 -> VAR_99 = 0 ; } else { VAR_100 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; } METHOD_12 ( VAR_108 ) ; VAR_109 -> VAR_110 = 2 ; VAR_111 = 0 ; goto VAR_112 ; } if ( ( VAR_113 = METHOD_13 ( VAR_114 , VAR_115 , VAR_116 ) ) != VAR_117 ) { VAR_118 -> VAR_119 = VAR_120 | VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = 1 ; VAR_125 -> VAR_126 = VAR_127 -> VAR_128 ; VAR_129 -> VAR_130 = VAR_131 -> VAR_132 ; VAR_133 -> VAR_134 = 0 ; METHOD_14 ( VAR_135 ) ; if ( ! METHOD_15 ( VAR_136 -> VAR_137 , VAR_138 , VAR_139 , VAR_140 ) ) { VAR_141 = - VAR_142 ; goto VAR_143 ; } if ( ! METHOD_16 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ) { VAR_149 = - VAR_150 ; goto VAR_151 ; } VAR_152 = 0 ; } VAR_153 : METHOD_17 ( VAR_154 ) ; return VAR_155 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { struct STRUCT_OR_UNION_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( ) ; TYPE_2 * VAR_4 = VAR_5 ; TYPE_3 * VAR_6 = VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_11 ; const TYPE_4 * VAR_12 ; const TYPE_5 * VAR_13 = VAR_14 ; TYPE_6 VAR_15 = - VAR_16 ; if ( ! METHOD_18 ( VAR_144 -> VAR_137 , VAR_145 , VAR_94 ) ) { VAR_155 = - VAR_142 ; goto VAR_153 ; } if ( ! VAR_17 ) return - VAR_18 ; METHOD_2 ( VAR_19 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; if ( METHOD_3 ( VAR_20 , & VAR_21 ) < 0 ) return - VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 = 0 ; VAR_27 -> VAR_28 = VAR_29 -> VAR_30 = VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = 0 ; if ( METHOD_4 ( VAR_36 , ""/cgroup"" ) == 0 ) { VAR_37 -> VAR_38 = VAR_39 | 00755 ; VAR_40 -> VAR_41 = 2 ; return 0 ; } VAR_42 = METHOD_5 ( VAR_43 , VAR_44 ) ; if ( ! VAR_45 ) return - VAR_46 ; VAR_47 = METHOD_6 ( VAR_48 ) ; if ( ! VAR_49 ) { VAR_50 -> VAR_51 = VAR_52 | 00755 ; VAR_53 -> VAR_54 = 2 ; return 0 ; } METHOD_7 ( VAR_55 , & VAR_56 , & VAR_57 ) ; if ( ! VAR_58 ) { VAR_59 = ""/"" ; VAR_60 = VAR_61 ; } else { VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } if ( METHOD_8 ( VAR_66 , VAR_67 , VAR_68 ) ) { if ( ! METHOD_9 ( VAR_69 -> VAR_70 , VAR_71 , VAR_72 , VAR_73 ) ) { VAR_74 -> VAR_75 = VAR_76 | 00555 ; VAR_77 -> VAR_78 = 2 ; VAR_79 = 0 ; goto VAR_80 ; } if ( ! METHOD_10 ( VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ) { VAR_86 = - VAR_87 ; goto VAR_88 ; } VAR_89 -> VAR_90 = VAR_91 | 00755 ; VAR_92 = METHOD_11 ( VAR_93 , VAR_94 , ""tasks"" ) ; if ( ! VAR_95 ) { VAR_96 -> VAR_97 = VAR_98 -> VAR_99 = 0 ; } else { VAR_100 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; } METHOD_12 ( VAR_108 ) ; VAR_109 -> VAR_110 = 2 ; VAR_111 = 0 ; goto VAR_112 ; } if ( ( VAR_113 = METHOD_13 ( VAR_114 , VAR_115 , VAR_116 ) ) != VAR_117 ) { VAR_118 -> VAR_119 = VAR_120 | VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = 1 ; VAR_125 -> VAR_126 = VAR_127 -> VAR_128 ; VAR_129 -> VAR_130 = VAR_131 -> VAR_132 ; VAR_133 -> VAR_134 = 0 ; METHOD_14 ( VAR_135 ) ; if ( ! METHOD_15 ( VAR_136 -> VAR_137 , VAR_138 , VAR_139 , VAR_140 ) ) { VAR_141 = - VAR_142 ; goto VAR_143 ; } if ( ! METHOD_16 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 ) ) { VAR_149 = - VAR_150 ; goto VAR_151 ; } VAR_152 = 0 ; } VAR_153 : METHOD_17 ( VAR_154 ) ; return VAR_155 ; }",237
238,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; const TYPE_4 * VAR_4 = VAR_5 ; TYPE_5 * VAR_6 = & VAR_7 -> VAR_8 ; TYPE_6 VAR_9 , VAR_10 ; TYPE_7 VAR_11 = VAR_12 ; for ( ; ; ) { if ( VAR_13 -> VAR_14 > 0 ) VAR_15 = METHOD_1 ( & VAR_16 , VAR_17 -> VAR_18 , & VAR_19 , VAR_20 -> VAR_21 ) ; else VAR_22 = VAR_23 ; if ( VAR_24 < 0 && VAR_25 != VAR_26 ) { VAR_27 = - 1 ; goto VAR_28 ; } if ( VAR_29 == VAR_30 ) { if ( ( VAR_31 = METHOD_2 ( VAR_32 ) ) < 0 ) { VAR_33 = VAR_34 ; goto VAR_35 ; } if ( VAR_36 == 0 ) { METHOD_3 ( VAR_37 , ""earlyEOF"" ) ; VAR_38 = VAR_39 ; goto VAR_40 ; } continue ; } METHOD_4 ( VAR_41 , VAR_42 ) ;  VAR_43 = 0 ;  if ( VAR_44 == VAR_45 ) continue ; switch ( VAR_46 -> VAR_47 ) { case VAR_48 : VAR_49 = METHOD_5 ( VAR_50 , ( TYPE_8 * ) VAR_51 , & VAR_52 ) ; break ; case VAR_53 : METHOD_6 ( VAR_54 , ""report-status:Errorreported:%s"" , ( ( TYPE_9 * ) VAR_55 ) -> VAR_56 ) ; VAR_57 = - 1 ; break ; case VAR_58 : if ( VAR_59 -> METHOD_7 ) { TYPE_10 * VAR_60 = ( TYPE_11 * ) VAR_61 ; VAR_62 = VAR_63 -> METHOD_8 ( VAR_64 -> VAR_65 , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 ) ; } break ; default : VAR_70 = METHOD_9 ( VAR_71 , VAR_72 ) ; break ; } METHOD_10 ( VAR_73 ) ; if ( VAR_74 == VAR_75 ) { VAR_76 = 0 ; if ( VAR_77 . VAR_78 > 0 ) { METHOD_11 ( VAR_79 , ""Incompletepackdatapkt-line"" ) ; VAR_80 = VAR_81 ; } goto VAR_82 ; } if ( VAR_83 < 0 ) { goto VAR_84 ; } } VAR_85 : METHOD_12 ( & VAR_86 ) ; return VAR_87 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; const TYPE_4 * VAR_4 = VAR_5 ; TYPE_5 * VAR_6 = & VAR_7 -> VAR_8 ; TYPE_6 VAR_9 , VAR_10 ; TYPE_7 VAR_11 = VAR_12 ; for ( ; ; ) { if ( VAR_13 -> VAR_14 > 0 ) VAR_15 = METHOD_1 ( & VAR_16 , VAR_17 -> VAR_18 , & VAR_19 , VAR_20 -> VAR_21 ) ; else VAR_22 = VAR_23 ; if ( VAR_24 < 0 && VAR_25 != VAR_26 ) { VAR_27 = - 1 ; goto VAR_28 ; } if ( VAR_29 == VAR_30 ) { if ( ( VAR_31 = METHOD_2 ( VAR_32 ) ) < 0 ) { VAR_33 = VAR_34 ; goto VAR_35 ; } if ( VAR_36 == 0 ) { METHOD_3 ( VAR_37 , ""earlyEOF"" ) ; VAR_38 = VAR_39 ; goto VAR_40 ; } continue ; } METHOD_4 ( VAR_41 , VAR_42 ) ; VAR_43 = 0 ; if ( VAR_44 == VAR_45 ) continue ; switch ( VAR_46 -> VAR_47 ) { case VAR_48 : VAR_49 = METHOD_5 ( VAR_50 , ( TYPE_8 * ) VAR_51 , & VAR_52 ) ; break ; case VAR_53 : METHOD_6 ( VAR_54 , ""report-status:Errorreported:%s"" , ( ( TYPE_9 * ) VAR_55 ) -> VAR_56 ) ; VAR_57 = - 1 ; break ; case VAR_58 : if ( VAR_59 -> METHOD_7 ) { TYPE_10 * VAR_60 = ( TYPE_11 * ) VAR_61 ; VAR_62 = VAR_63 -> METHOD_8 ( VAR_64 -> VAR_65 , VAR_66 -> VAR_67 , VAR_68 -> VAR_69 ) ; } break ; default : VAR_70 = METHOD_9 ( VAR_71 , VAR_72 ) ; break ; } METHOD_10 ( VAR_73 ) ; if ( VAR_74 == VAR_75 ) { VAR_76 = 0 ; if ( VAR_77 . VAR_78 > 0 ) { METHOD_11 ( VAR_79 , ""Incompletepackdatapkt-line"" ) ; VAR_80 = VAR_81 ; } goto VAR_82 ; } if ( VAR_83 < 0 ) { goto VAR_84 ; } } VAR_85 : METHOD_12 ( & VAR_86 ) ; return VAR_87 ; }",238
239,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , unsigned TYPE_3 VAR_1 ) { TYPE_4 VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; if ( METHOD_1 ( & VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) != 0 ) return - VAR_9 ; if ( VAR_10 != sizeof ( VAR_11 ) + VAR_12 . VAR_13 ) { METHOD_2 ( ""Wronglenargument\\n"" ) ; return - VAR_14 ; } if ( VAR_15 . VAR_16 == 0 ) { METHOD_3 ( ""Entries_sizeneverzero\\n"" ) ; return - VAR_17 ; } if ( VAR_18 . VAR_19 >= ( ( VAR_20 - sizeof ( struct STRUCT_OR_UNION_4 ) ) / VAR_21 - VAR_22 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) return - VAR_23 ; if ( VAR_24 . VAR_25 >= VAR_26 / sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_27 ;  VAR_28 = METHOD_4 ( VAR_29 . VAR_30 ) * VAR_31 ;  VAR_32 = METHOD_5 ( sizeof ( * VAR_33 ) + VAR_34 ) ; if ( ! VAR_35 ) return - VAR_36 ; if ( VAR_37 ) METHOD_6 ( VAR_38 -> VAR_39 , 0 , VAR_40 ) ; VAR_41 -> VAR_42 = METHOD_7 ( VAR_43 . VAR_44 ) ; if ( ! VAR_45 -> VAR_46 ) { VAR_47 = - VAR_48 ; goto VAR_49 ; } if ( METHOD_8 ( VAR_50 -> VAR_51 , VAR_52 . VAR_53 , VAR_54 . VAR_55 ) != 0 ) { METHOD_9 ( ""Couldn\'tcopyentriesfromuserspace\\n"" ) ; VAR_56 = - VAR_57 ; goto VAR_58 ; } VAR_59 = METHOD_10 ( STRUCT_OR_UNION_7 , & VAR_60 , VAR_61 ) ; if ( VAR_62 == 0 ) return VAR_63 ; VAR_64 : METHOD_11 ( VAR_65 -> VAR_66 ) ; VAR_67 : METHOD_12 ( VAR_68 ) ; return VAR_69 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , const TYPE_1 TYPE_2 * VAR_0 , unsigned TYPE_3 VAR_1 ) { TYPE_4 VAR_2 , VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; if ( METHOD_1 ( & VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) != 0 ) return - VAR_9 ; if ( VAR_10 != sizeof ( VAR_11 ) + VAR_12 . VAR_13 ) { METHOD_2 ( ""Wronglenargument\\n"" ) ; return - VAR_14 ; } if ( VAR_15 . VAR_16 == 0 ) { METHOD_3 ( ""Entries_sizeneverzero\\n"" ) ; return - VAR_17 ; } if ( VAR_18 . VAR_19 >= ( ( VAR_20 - sizeof ( struct STRUCT_OR_UNION_4 ) ) / VAR_21 - VAR_22 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) return - VAR_23 ; if ( VAR_24 . VAR_25 >= VAR_26 / sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_27 ; VAR_28 = METHOD_4 ( VAR_29 . VAR_30 ) * VAR_31 ; VAR_32 = METHOD_5 ( sizeof ( * VAR_33 ) + VAR_34 ) ; if ( ! VAR_35 ) return - VAR_36 ; if ( VAR_37 ) METHOD_6 ( VAR_38 -> VAR_39 , 0 , VAR_40 ) ; VAR_41 -> VAR_42 = METHOD_7 ( VAR_43 . VAR_44 ) ; if ( ! VAR_45 -> VAR_46 ) { VAR_47 = - VAR_48 ; VAR_60 . VAR_70 [ sizeof ( VAR_60 . VAR_70 ) - 1 ] = 0 ; goto VAR_49 ; } if ( METHOD_8 ( VAR_50 -> VAR_51 , VAR_52 . VAR_53 , VAR_54 . VAR_55 ) != 0 ) { METHOD_9 ( ""Couldn\'tcopyentriesfromuserspace\\n"" ) ; VAR_56 = - VAR_57 ; goto VAR_58 ; } VAR_59 = METHOD_10 ( STRUCT_OR_UNION_7 , & VAR_60 , VAR_61 ) ; if ( VAR_62 == 0 ) return VAR_63 ; VAR_64 : METHOD_11 ( VAR_65 -> VAR_66 ) ; VAR_67 : METHOD_12 ( VAR_68 ) ; return VAR_69 ; }",239
240,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  unsigned TYPE_3 * VAR_2 ;  METHOD_1 ( VAR_3 -> VAR_4 ) ; METHOD_2 ( VAR_5 >= 0 ) ;  if ( ! ( VAR_6 = METHOD_3 ( VAR_7 -> VAR_8 , VAR_9 , sizeof ( unsigned TYPE_4 ) ) ) ) {  return - 1 ; } VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { unsigned TYPE_3 * VAR_2 ; METHOD_1 ( VAR_3 -> VAR_4 ) ; METHOD_2 ( VAR_5 >= 0 ) ; if ( ! ( VAR_6 = METHOD_3 ( VAR_7 -> VAR_8 , VAR_9 , sizeof ( unsigned TYPE_4 ) ) ) && VAR_15 ) { return - 1 ; } VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ; return 0 ; }",240
241,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , unsigned TYPE_5 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; struct STRUCT_OR_UNION_4 VAR_8 ; TYPE_8 VAR_9 = 0 ; if ( VAR_10 == VAR_11 ) return METHOD_1 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( VAR_15 < sizeof ( TYPE_9 ) ) return - VAR_16 ; if ( METHOD_2 ( VAR_17 , ( TYPE_10 TYPE_11 * ) VAR_18 ) ) return - VAR_19 ; VAR_20 = VAR_21 ? 1 : 0 ; METHOD_3 ( VAR_22 ) ; switch ( VAR_23 ) { case VAR_24 : if ( VAR_25 && ! METHOD_4 ( VAR_26 ) ) VAR_27 = - VAR_28 ; else METHOD_5 ( VAR_29 , VAR_30 , VAR_31 ) ; break ; case VAR_32 : VAR_33 -> VAR_34 = ( VAR_35 ? VAR_36 : VAR_37 ) ; break ; case VAR_38 : case VAR_39 : case VAR_40 : case VAR_41 : VAR_42 = - VAR_43 ; break ; case VAR_44 : METHOD_6 ( VAR_45 , VAR_46 , VAR_47 ) ; break ; case VAR_48 : METHOD_7 ( VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 :  if ( VAR_53 > VAR_54 )  VAR_55 = VAR_56 ; VAR_57 : VAR_58 -> VAR_59 |= VAR_60 ;  if ( ( VAR_61 * 2 ) < VAR_62 )  VAR_63 -> VAR_64 = VAR_65 ; else VAR_66 -> VAR_67 = VAR_68 * 2 ; VAR_69 -> METHOD_8 ( VAR_70 ) ; break ; case VAR_71 : if ( ! METHOD_9 ( VAR_72 ) ) { VAR_73 = - VAR_74 ; break ; } goto VAR_75 ; case VAR_76 :  if ( VAR_77 > VAR_78 )  VAR_79 = VAR_80 ; VAR_81 : VAR_82 -> VAR_83 |= VAR_84 ;  if ( ( VAR_85 * 2 ) < VAR_86 )  VAR_87 -> VAR_88 = VAR_89 ; else VAR_90 -> VAR_91 = VAR_92 * 2 ; break ; case VAR_93 : if ( ! METHOD_10 ( VAR_94 ) ) { VAR_95 = - VAR_96 ; break ; } goto VAR_97 ; case VAR_98 : TYPE_12 TYPE_13 if ( VAR_99 -> VAR_100 == VAR_101 ) METHOD_11 ( VAR_102 , VAR_103 ) ; METHOD_12 ( VAR_104 , VAR_105 , VAR_106 ) ; break ; case VAR_107 : METHOD_13 ( VAR_108 , VAR_109 , VAR_110 ) ; break ; case VAR_111 : VAR_112 -> VAR_113 = VAR_114 ; break ; case VAR_115 : if ( ( VAR_116 >= 0 && VAR_117 <= 6 ) || METHOD_14 ( VAR_118 ) ) VAR_119 -> VAR_120 = VAR_121 ; else VAR_122 = - VAR_123 ; break ; case VAR_124 : if ( VAR_125 < sizeof ( VAR_126 ) ) { VAR_127 = - VAR_128 ; break ; } if ( METHOD_15 ( & VAR_129 , VAR_130 , sizeof ( VAR_131 ) ) ) { VAR_132 = - VAR_133 ; break ; } if ( ! VAR_134 . VAR_135 ) METHOD_16 ( VAR_136 , VAR_137 ) ; else { if ( VAR_138 == 32 ) if ( ( unsigned TYPE_14 ) VAR_139 . VAR_140 >= VAR_141 / VAR_142 ) VAR_143 -> VAR_144 = VAR_145 ; else VAR_146 -> VAR_147 = ( unsigned TYPE_15 ) VAR_148 . VAR_149 * VAR_150 ; METHOD_17 ( VAR_151 , VAR_152 ) ; } break ; case VAR_153 : METHOD_18 ( ""setsockopt"" ) ; break ; case VAR_154 : if ( VAR_155 ) METHOD_19 ( VAR_156 , & STRUCT_OR_UNION_5 -> VAR_157 ) ; else METHOD_20 ( VAR_158 , & STRUCT_OR_UNION_6 -> VAR_159 ) ; break ; case VAR_160 : case VAR_161 : if ( VAR_162 ) { if ( VAR_163 == VAR_164 ) METHOD_21 ( VAR_165 , VAR_166 ) ; else METHOD_22 ( VAR_167 , VAR_168 ) ; METHOD_23 ( VAR_169 , VAR_170 ) ; METHOD_24 ( VAR_171 , VAR_172 ) ; } else { METHOD_25 ( VAR_173 , VAR_174 ) ; METHOD_26 ( VAR_175 , VAR_176 ) ; } break ; case VAR_177 : if ( VAR_178 & ~ VAR_179 ) { VAR_180 = - VAR_181 ; break ; } METHOD_27 ( VAR_182 , VAR_183 , VAR_184 & VAR_185 ) ; METHOD_28 ( VAR_186 , VAR_187 , VAR_188 & VAR_189 ) ; METHOD_29 ( VAR_190 , VAR_191 , VAR_192 & VAR_193 ) ; if ( VAR_194 & VAR_195 ) METHOD_30 ( VAR_196 , VAR_197 ) ; else METHOD_31 ( VAR_198 , ( 1UL << VAR_199 ) ) ; METHOD_32 ( VAR_200 , VAR_201 , VAR_202 & VAR_203 ) ; METHOD_33 ( VAR_204 , VAR_205 , VAR_206 & VAR_207 ) ; METHOD_34 ( VAR_208 , VAR_209 , VAR_210 & VAR_211 ) ; break ; case VAR_212 : if ( VAR_213 < 0 ) VAR_214 = VAR_215 ; VAR_216 -> VAR_217 = VAR_218 ? : 1 ; break ; case VAR_219 : VAR_220 = METHOD_35 ( & VAR_221 -> VAR_222 , VAR_223 , VAR_224 ) ; break ; case VAR_225 : VAR_226 = METHOD_36 ( & VAR_227 -> VAR_228 , VAR_229 , VAR_230 ) ; break ; case VAR_231 : VAR_232 = - VAR_233 ; if ( VAR_234 == sizeof ( struct STRUCT_OR_UNION_7 ) ) { struct STRUCT_OR_UNION_8 VAR_235 ; VAR_236 = - VAR_237 ; if ( METHOD_37 ( & VAR_238 , VAR_239 , sizeof ( VAR_240 ) ) ) break ; VAR_241 = METHOD_38 ( & VAR_242 , VAR_243 ) ; } break ; case VAR_244 : VAR_245 = METHOD_39 ( VAR_246 ) ; break ; case VAR_247 : if ( VAR_248 ) METHOD_40 ( VAR_249 , & STRUCT_OR_UNION_9 -> VAR_250 ) ; else METHOD_41 ( VAR_251 , & STRUCT_OR_UNION_10 -> VAR_252 ) ; break ; case VAR_253 : if ( ! METHOD_42 ( VAR_254 ) ) VAR_255 = - VAR_256 ; else VAR_257 -> VAR_258 = VAR_259 ; break ; case VAR_260 : METHOD_43 ( VAR_261 , VAR_262 , VAR_263 ) ; break ; case VAR_264 : METHOD_44 ( VAR_265 , VAR_266 , VAR_267 ) ; break ; case VAR_268 : if ( STRUCT_OR_UNION_11 -> VAR_269 -> METHOD_45 ) STRUCT_OR_UNION_12 -> VAR_270 -> METHOD_46 ( VAR_271 , VAR_272 ) ; else VAR_273 = - VAR_274 ; break ; case VAR_275 : METHOD_47 ( VAR_276 , VAR_277 , VAR_278 ) ; break ; default : VAR_279 = - VAR_280 ; break ; } METHOD_48 ( VAR_281 ) ; return VAR_282 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 TYPE_4 * VAR_2 , unsigned TYPE_5 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 ; struct STRUCT_OR_UNION_4 VAR_8 ; TYPE_8 VAR_9 = 0 ; if ( VAR_10 == VAR_11 ) return METHOD_1 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( VAR_15 < sizeof ( TYPE_9 ) ) return - VAR_16 ; if ( METHOD_2 ( VAR_17 , ( TYPE_10 TYPE_11 * ) VAR_18 ) ) return - VAR_19 ; VAR_20 = VAR_21 ? 1 : 0 ; METHOD_3 ( VAR_22 ) ; switch ( VAR_23 ) { case VAR_24 : if ( VAR_25 && ! METHOD_4 ( VAR_26 ) ) VAR_27 = - VAR_28 ; else METHOD_5 ( VAR_29 , VAR_30 , VAR_31 ) ; break ; case VAR_32 : VAR_33 -> VAR_34 = ( VAR_35 ? VAR_36 : VAR_37 ) ; break ; case VAR_38 : case VAR_39 : case VAR_40 : case VAR_41 : VAR_42 = - VAR_43 ; break ; case VAR_44 : METHOD_6 ( VAR_45 , VAR_46 , VAR_47 ) ; break ; case VAR_48 : METHOD_7 ( VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 : if ( VAR_53 > VAR_54 ) VAR_55 = VAR_56 ; VAR_57 : VAR_58 -> VAR_59 |= VAR_60 ; if ( ( VAR_61 * 2 ) < VAR_62 ) VAR_63 -> VAR_64 = VAR_65 ; else VAR_66 -> VAR_67 = VAR_68 * 2 ; VAR_69 -> METHOD_8 ( VAR_70 ) ; break ; case VAR_71 : if ( ! METHOD_9 ( VAR_72 ) ) { VAR_73 = - VAR_74 ; break ; } goto VAR_75 ; case VAR_76 : if ( VAR_77 > VAR_78 ) VAR_79 = VAR_80 ; VAR_81 : VAR_82 -> VAR_83 |= VAR_84 ; if ( ( VAR_85 * 2 ) < VAR_86 ) VAR_87 -> VAR_88 = VAR_89 ; else VAR_90 -> VAR_91 = VAR_92 * 2 ; break ; case VAR_93 : if ( ! METHOD_10 ( VAR_94 ) ) { VAR_95 = - VAR_96 ; break ; } goto VAR_97 ; case VAR_98 : TYPE_12 TYPE_13 if ( VAR_99 -> VAR_100 == VAR_101 ) METHOD_11 ( VAR_102 , VAR_103 ) ; METHOD_12 ( VAR_104 , VAR_105 , VAR_106 ) ; break ; case VAR_107 : METHOD_13 ( VAR_108 , VAR_109 , VAR_110 ) ; break ; case VAR_111 : VAR_112 -> VAR_113 = VAR_114 ; break ; case VAR_115 : if ( ( VAR_116 >= 0 && VAR_117 <= 6 ) || METHOD_14 ( VAR_118 ) ) VAR_119 -> VAR_120 = VAR_121 ; else VAR_122 = - VAR_123 ; break ; case VAR_124 : if ( VAR_125 < sizeof ( VAR_126 ) ) { VAR_127 = - VAR_128 ; break ; } if ( METHOD_15 ( & VAR_129 , VAR_130 , sizeof ( VAR_131 ) ) ) { VAR_132 = - VAR_133 ; break ; } if ( ! VAR_134 . VAR_135 ) METHOD_16 ( VAR_136 , VAR_137 ) ; else { if ( VAR_138 == 32 ) if ( ( unsigned TYPE_14 ) VAR_139 . VAR_140 >= VAR_141 / VAR_142 ) VAR_143 -> VAR_144 = VAR_145 ; else VAR_146 -> VAR_147 = ( unsigned TYPE_15 ) VAR_148 . VAR_149 * VAR_150 ; METHOD_17 ( VAR_151 , VAR_152 ) ; } break ; case VAR_153 : METHOD_18 ( ""setsockopt"" ) ; break ; case VAR_154 : if ( VAR_155 ) METHOD_19 ( VAR_156 , & STRUCT_OR_UNION_5 -> VAR_157 ) ; else METHOD_20 ( VAR_158 , & STRUCT_OR_UNION_6 -> VAR_159 ) ; break ; case VAR_160 : case VAR_161 : if ( VAR_162 ) { if ( VAR_163 == VAR_164 ) METHOD_21 ( VAR_165 , VAR_166 ) ; else METHOD_22 ( VAR_167 , VAR_168 ) ; METHOD_23 ( VAR_169 , VAR_170 ) ; METHOD_24 ( VAR_171 , VAR_172 ) ; } else { METHOD_25 ( VAR_173 , VAR_174 ) ; METHOD_26 ( VAR_175 , VAR_176 ) ; } break ; case VAR_177 : if ( VAR_178 & ~ VAR_179 ) { VAR_180 = - VAR_181 ; break ; } METHOD_27 ( VAR_182 , VAR_183 , VAR_184 & VAR_185 ) ; METHOD_28 ( VAR_186 , VAR_187 , VAR_188 & VAR_189 ) ; METHOD_29 ( VAR_190 , VAR_191 , VAR_192 & VAR_193 ) ; if ( VAR_194 & VAR_195 ) METHOD_30 ( VAR_196 , VAR_197 ) ; else METHOD_31 ( VAR_198 , ( 1UL << VAR_199 ) ) ; METHOD_32 ( VAR_200 , VAR_201 , VAR_202 & VAR_203 ) ; METHOD_33 ( VAR_204 , VAR_205 , VAR_206 & VAR_207 ) ; METHOD_34 ( VAR_208 , VAR_209 , VAR_210 & VAR_211 ) ; break ; case VAR_212 : if ( VAR_213 < 0 ) VAR_214 = VAR_215 ; VAR_216 -> VAR_217 = VAR_218 ? : 1 ; break ; case VAR_219 : VAR_220 = METHOD_35 ( & VAR_221 -> VAR_222 , VAR_223 , VAR_224 ) ; break ; case VAR_225 : VAR_226 = METHOD_36 ( & VAR_227 -> VAR_228 , VAR_229 , VAR_230 ) ; break ; case VAR_231 : VAR_232 = - VAR_233 ; if ( VAR_234 == sizeof ( struct STRUCT_OR_UNION_7 ) ) { struct STRUCT_OR_UNION_8 VAR_235 ; VAR_236 = - VAR_237 ; if ( METHOD_37 ( & VAR_238 , VAR_239 , sizeof ( VAR_240 ) ) ) break ; VAR_241 = METHOD_38 ( & VAR_242 , VAR_243 ) ; } break ; case VAR_244 : VAR_245 = METHOD_39 ( VAR_246 ) ; break ; case VAR_247 : if ( VAR_248 ) METHOD_40 ( VAR_249 , & STRUCT_OR_UNION_9 -> VAR_250 ) ; else METHOD_41 ( VAR_251 , & STRUCT_OR_UNION_10 -> VAR_252 ) ; break ; case VAR_253 : if ( ! METHOD_42 ( VAR_254 ) ) VAR_255 = - VAR_256 ; else VAR_257 -> VAR_258 = VAR_259 ; break ; case VAR_260 : METHOD_43 ( VAR_261 , VAR_262 , VAR_263 ) ; break ; case VAR_264 : METHOD_44 ( VAR_265 , VAR_266 , VAR_267 ) ; break ; case VAR_268 : if ( STRUCT_OR_UNION_11 -> VAR_269 -> METHOD_45 ) STRUCT_OR_UNION_12 -> VAR_270 -> METHOD_46 ( VAR_271 , VAR_272 ) ; else VAR_273 = - VAR_274 ; break ; case VAR_275 : METHOD_47 ( VAR_276 , VAR_277 , VAR_278 ) ; break ; default : VAR_279 = - VAR_280 ; break ; } METHOD_48 ( VAR_281 ) ; return VAR_282 ; }",241
242,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , const unsigned TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 ; register const unsigned TYPE_8 * VAR_7 ; register TYPE_9 * VAR_8 ; register TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; unsigned TYPE_12 VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , 0 , VAR_16 , VAR_17 -> VAR_18 , 1 , VAR_19 ) ; if ( VAR_20 == ( TYPE_13 * ) VAR_21 ) return VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < ( TYPE_14 ) VAR_27 -> VAR_28 ; VAR_29 ++ ) { if ( VAR_30 == 1 ) VAR_31 = METHOD_3 ( * VAR_32 ++ ) ; else { VAR_33 = METHOD_4 ( VAR_34 , VAR_35 , & VAR_36 ) ; VAR_37 = METHOD_5 ( VAR_38 ) ; } switch ( VAR_39 ) { case - 1 : { METHOD_6 ( VAR_40 , VAR_41 , VAR_42 ) ; break ; } case - 2 : case 0 : { METHOD_7 ( VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 == 1 || VAR_47 == - 2 ) METHOD_8 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( VAR_51 -> VAR_52 == VAR_53 ) { if ( VAR_54 == 1 ) METHOD_9 ( VAR_55 , METHOD_10 ( VAR_56 ) , VAR_57 ) ; else METHOD_11 ( VAR_58 , METHOD_12 ( VAR_59 ) , VAR_60 ) ; METHOD_13 ( VAR_61 , VAR_62 -> VAR_63 + ( TYPE_15 ) METHOD_14 ( VAR_64 , METHOD_15 ( VAR_65 , VAR_66 ) , VAR_67 ) , VAR_68 ) ; if ( VAR_69 -> VAR_70 == 1 ) { TYPE_16 VAR_71 , VAR_72 ; VAR_73 = VAR_74 -> VAR_75 - VAR_76 ; if ( VAR_77 > 8 ) VAR_78 = 8 ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 ; VAR_82 ++ ) { METHOD_16 ( VAR_83 , ( ( ( unsigned TYPE_17 ) VAR_84 ) & ( 0x01 << ( 7 - VAR_85 ) ) ) != 0 ? 0 : 255 , VAR_86 ) ; METHOD_17 ( VAR_87 , VAR_88 -> VAR_89 + ( TYPE_18 )  METHOD_18 ( VAR_90 , VAR_91 ) , VAR_92 ) ;  VAR_93 += METHOD_19 ( VAR_94 ) ; VAR_95 ++ ; } VAR_96 -- ; continue ; } } break ; } case 1 : { if ( VAR_97 -> VAR_98 == VAR_99 ) METHOD_20 ( VAR_100 , VAR_101 , VAR_102 ) ; else METHOD_21 ( VAR_103 , VAR_104 , VAR_105 ) ; break ; } case 2 : { if ( VAR_106 -> VAR_107 == VAR_108 ) METHOD_22 ( VAR_109 , VAR_110 , VAR_111 ) ; else METHOD_23 ( VAR_112 , VAR_113 , VAR_114 ) ; break ; } case 3 : { if ( VAR_115 -> VAR_116 == VAR_117 ) METHOD_24 ( VAR_118 , VAR_119 , VAR_120 ) ; else if ( VAR_121 -> VAR_122 != VAR_123 ) METHOD_25 ( VAR_124 , VAR_125 , VAR_126 ) ; break ; } case 4 : { if ( ( METHOD_26 ( VAR_127 -> VAR_128 ) != VAR_129 ) && ( VAR_130 > 3 ) ) break ; if ( VAR_131 -> VAR_132 != VAR_133 ) METHOD_27 ( VAR_134 , VAR_135 , VAR_136 ) ; break ; } default : break ; } VAR_137 += METHOD_28 ( VAR_138 ) ; } return ( METHOD_29 ( VAR_139 , VAR_140 ) ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 VAR_1 , const TYPE_3 VAR_2 , const TYPE_4 VAR_3 , const unsigned TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 ; register const unsigned TYPE_8 * VAR_7 ; register TYPE_9 * VAR_8 ; register TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; unsigned TYPE_12 VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , 0 , VAR_16 , VAR_17 -> VAR_18 , 1 , VAR_19 ) ; if ( VAR_20 == ( TYPE_13 * ) VAR_21 ) return VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < ( TYPE_14 ) VAR_27 -> VAR_28 ; VAR_29 ++ ) { if ( VAR_30 == 1 ) VAR_31 = METHOD_3 ( * VAR_32 ++ ) ; else { VAR_33 = METHOD_4 ( VAR_34 , VAR_35 , & VAR_36 ) ; VAR_37 = METHOD_5 ( VAR_38 ) ; } switch ( VAR_39 ) { case - 1 : { METHOD_6 ( VAR_40 , VAR_41 , VAR_42 ) ; break ; } case - 2 : case 0 : { METHOD_7 ( VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 == 1 || VAR_47 == - 2 ) METHOD_8 ( VAR_48 , VAR_49 , VAR_50 ) ; if ( VAR_51 -> VAR_52 == VAR_53 ) { if ( VAR_54 == 1 ) METHOD_9 ( VAR_55 , METHOD_10 ( VAR_56 ) , VAR_57 ) ; else METHOD_11 ( VAR_58 , METHOD_12 ( VAR_59 ) , VAR_60 ) ; METHOD_13 ( VAR_61 , VAR_62 -> VAR_63 + ( TYPE_15 ) METHOD_14 ( VAR_64 , METHOD_15 ( VAR_65 , VAR_66 ) , VAR_67 ) , VAR_68 ) ; if ( VAR_69 -> VAR_70 == 1 ) { TYPE_16 VAR_71 , VAR_72 ; VAR_73 = VAR_74 -> VAR_75 - VAR_76 ; if ( VAR_77 > 8 ) VAR_78 = 8 ; for ( VAR_79 = 0 ; VAR_80 < VAR_81 ; VAR_82 ++ ) { METHOD_16 ( VAR_83 , ( ( ( unsigned TYPE_17 ) VAR_84 ) & ( 0x01 << ( 7 - VAR_85 ) ) ) != 0 ? 0 : 255 , VAR_86 ) ; METHOD_17 ( VAR_87 , VAR_88 -> VAR_89 + ( TYPE_18 ) METHOD_14 ( VAR_139 , METHOD_18 ( VAR_90 , VAR_91 ) , VAR_92 ) ; VAR_93 += METHOD_19 ( VAR_94 ) ; VAR_95 ++ ; } VAR_96 -- ; continue ; } } break ; } case 1 : { if ( VAR_97 -> VAR_98 == VAR_99 ) METHOD_20 ( VAR_100 , VAR_101 , VAR_102 ) ; else METHOD_21 ( VAR_103 , VAR_104 , VAR_105 ) ; break ; } case 2 : { if ( VAR_106 -> VAR_107 == VAR_108 ) METHOD_22 ( VAR_109 , VAR_110 , VAR_111 ) ; else METHOD_23 ( VAR_112 , VAR_113 , VAR_114 ) ; break ; } case 3 : { if ( VAR_115 -> VAR_116 == VAR_117 ) METHOD_24 ( VAR_118 , VAR_119 , VAR_120 ) ; else if ( VAR_121 -> VAR_122 != VAR_123 ) METHOD_25 ( VAR_124 , VAR_125 , VAR_126 ) ; break ; } case 4 : { if ( ( METHOD_26 ( VAR_127 -> VAR_128 ) != VAR_129 ) && ( VAR_130 > 3 ) ) break ; if ( VAR_131 -> VAR_132 != VAR_133 ) METHOD_27 ( VAR_134 , VAR_135 , VAR_136 ) ; break ; } default : break ; } VAR_137 += METHOD_28 ( VAR_138 ) ; } return ( METHOD_29 ( VAR_139 , VAR_140 ) ) ; }",242
243,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 = 0 , VAR_3 = 0 , VAR_4 = 0 , VAR_5 = 0 , VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 * VAR_13 , * VAR_14 , * VAR_15 , * VAR_16 = VAR_17 ; TYPE_7 * VAR_18 = VAR_19 , * VAR_20 = VAR_21 ; struct STRUCT_OR_UNION_0 VAR_22 ; extern TYPE_8 VAR_23 ; extern TYPE_9 * VAR_24 ; TYPE_10 VAR_25 ; TYPE_11 VAR_26 [ 1 + 3 * sizeof VAR_27 ] ; struct STRUCT_OR_UNION_1 * VAR_28 = VAR_29 ; TYPE_12 VAR_30 ; TYPE_13 VAR_31 ; METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( METHOD_6 ( ) ) ; TYPE_14 TYPE_15 VAR_32 ( ) ;  while ( ( VAR_33 = METHOD_7 ( VAR_34 , VAR_35 , ""cDdksE:a:t:"" ) ) != - 1 ) {  switch ( VAR_36 ) { case 'E' : VAR_37 = METHOD_8 ( VAR_38 ) ; if ( VAR_39 == - 1 ) METHOD_9 ( ""Invalidhashalgorithm\\""%s\\"""" , VAR_40 ) ; break ; case 'c' : if ( VAR_41 ) METHOD_10 ( ) ; VAR_42 ++ ; break ; case 'k' :  VAR_43 ++ ;  break ; case 's' : if ( VAR_44 ) METHOD_11 ( ) ; VAR_45 ++ ; break ; case 'd' : if ( VAR_46 || VAR_47 ) METHOD_12 ( ) ; VAR_48 ++ ; break ; case 'D' : if ( VAR_49 || VAR_50 ) METHOD_13 ( ) ; VAR_51 ++ ; break ; case 'a' : VAR_52 = VAR_53 ; break ; case 't' : if ( ( VAR_54 = METHOD_14 ( VAR_55 ) ) == - 1 ) { METHOD_15 ( VAR_56 , ""Invalidlifetime\\n"" ) ; METHOD_16 ( ) ; } break ; default : METHOD_17 ( ) ; } } VAR_57 -= VAR_58 ; VAR_59 += VAR_60 ; if ( VAR_61 > 0 && ( VAR_62 || VAR_63 || VAR_64 || VAR_65 || VAR_66 ) ) METHOD_18 ( ) ;  if ( VAR_67 == 0 && ! VAR_68 && ! VAR_69 ) {  VAR_70 = METHOD_19 ( ""SHELL"" ) ; if ( VAR_71 != VAR_72 && ( VAR_73 = METHOD_20 ( VAR_74 ) ) > 2 && METHOD_21 ( VAR_75 + VAR_76 - 3 , ""csh"" , 3 ) == 0 ) VAR_77 = 1 ; } if ( VAR_78 ) { const TYPE_16 * VAR_79 = VAR_80 ; VAR_81 = METHOD_22 ( VAR_82 ) ; if ( VAR_83 == VAR_84 ) { METHOD_23 ( VAR_85 , ""%snotset,cannotkillagent\\n"" , VAR_86 ) ; METHOD_24 ( 1 ) ; } VAR_87 = ( TYPE_17 ) METHOD_25 ( VAR_88 , 2 , VAR_89 , & VAR_90 ) ; if ( VAR_91 ) { METHOD_26 ( VAR_92 , ""%s=\\""%s\\"",whichisnotagoodPID:%s\\n"" , VAR_93 , VAR_94 , VAR_95 ) ; METHOD_27 ( 1 ) ; } if ( METHOD_28 ( VAR_96 , VAR_97 ) == - 1 ) { METHOD_29 ( ""kill"" ) ; METHOD_30 ( 1 ) ; } VAR_98 = VAR_99 ? ""unsetenv%s;\\n"" : ""unset%s;\\n"" ; METHOD_31 ( VAR_100 , VAR_101 ) ; METHOD_32 ( VAR_102 , VAR_103 ) ; METHOD_33 ( ""echoAgentpid%ldkilled;\\n"" , ( TYPE_18 ) VAR_104 ) ; METHOD_34 ( 0 ) ; } VAR_105 = METHOD_35 ( ) ; if ( VAR_106 == VAR_107 ) { METHOD_36 ( VAR_108 , sizeof ( VAR_109 ) ) ; if ( METHOD_37 ( VAR_110 ) == VAR_111 ) { METHOD_38 ( ""mkdtemp:privatesocketdir"" ) ; METHOD_39 ( 1 ) ; } METHOD_40 ( VAR_112 , sizeof VAR_113 , ""%s/agent.%ld"" , VAR_114 , ( TYPE_19 ) VAR_115 ) ; } else { VAR_116 [ 0 ] = '\\0' ; METHOD_41 ( VAR_117 , VAR_118 , sizeof VAR_119 ) ; } VAR_120 = METHOD_42 ( 0177 ) ; VAR_121 = METHOD_43 ( VAR_122 , VAR_123 , 0 ) ; if ( VAR_124 < 0 ) { * VAR_125 = '\\0' ; METHOD_44 ( 1 ) ; } METHOD_45 ( VAR_126 ) ; if ( VAR_127 || VAR_128 ) { METHOD_46 ( VAR_129 , VAR_130 ? VAR_131 : VAR_132 , VAR_133 , 1 ) ; VAR_134 = VAR_135 ? ""setenv%s%s;\\n"" : ""%s=%s;export%s;\\n"" ; METHOD_47 ( VAR_136 , VAR_137 , VAR_138 , VAR_139 ) ; METHOD_48 ( ""echoAgentpid%ld;\\n"" , ( TYPE_20 ) VAR_140 ) ; METHOD_49 ( VAR_141 ) ; goto VAR_142 ; } VAR_143 = METHOD_50 ( ) ; if ( VAR_144 == - 1 ) { METHOD_51 ( ""fork"" ) ; METHOD_52 ( 1 ) ; } if ( VAR_145 != 0 ) { METHOD_53 ( VAR_146 ) ; METHOD_54 ( VAR_147 , sizeof VAR_148 , ""%ld"" , ( TYPE_21 ) VAR_149 ) ; if ( VAR_150 == 0 ) { VAR_151 = VAR_152 ? ""setenv%s%s;\\n"" : ""%s=%s;export%s;\\n"" ; METHOD_55 ( VAR_153 , VAR_154 , VAR_155 , VAR_156 ) ; METHOD_56 ( VAR_157 , VAR_158 , VAR_159 , VAR_160 ) ; METHOD_57 ( ""echoAgentpid%ld;\\n"" , ( TYPE_22 ) VAR_161 ) ; METHOD_58 ( 0 ) ; } if ( METHOD_59 ( VAR_162 , VAR_163 , 1 ) == - 1 || METHOD_60 ( VAR_164 , VAR_165 , 1 ) == - 1 ) { METHOD_61 ( ""setenv"" ) ; METHOD_62 ( 1 ) ; } METHOD_63 ( VAR_166 [ 0 ] , VAR_167 ) ; METHOD_64 ( VAR_168 [ 0 ] ) ; METHOD_65 ( 1 ) ; } METHOD_66 ( VAR_169 , VAR_170 , VAR_171 , 0 ) ; if ( METHOD_67 ( ) == - 1 ) { METHOD_68 ( ""setsid:%s"" , METHOD_69 ( VAR_172 ) ) ; METHOD_70 ( 1 ) ; } ( TYPE_23 ) METHOD_71 ( ""/"" ) ; if ( ( VAR_173 = METHOD_72 ( VAR_174 , VAR_175 , 0 ) ) != - 1 ) { ( TYPE_24 ) METHOD_73 ( VAR_176 , VAR_177 ) ; ( TYPE_25 ) METHOD_74 ( VAR_178 , VAR_179 ) ; ( TYPE_26 ) METHOD_75 ( VAR_180 , VAR_181 ) ; if ( VAR_182 > 2 ) METHOD_76 ( VAR_183 ) ; } VAR_184 . VAR_185 = VAR_186 . VAR_187 = 0 ; if ( METHOD_77 ( VAR_188 , & VAR_189 ) < 0 ) { METHOD_78 ( ""setrlimitRLIMIT_CORE:%s"" , METHOD_79 ( VAR_190 ) ) ; METHOD_80 ( 1 ) ; } VAR_191 : VAR_192 = METHOD_81 ( ) ; TYPE_27 TYPE_28 TYPE_29 ( 0 ) ; METHOD_82 ( VAR_193 , VAR_194 ) ; if ( VAR_195 > 0 ) VAR_196 = 10 ; METHOD_83 ( ) ; METHOD_84 ( VAR_197 , VAR_198 ) ; METHOD_85 ( VAR_199 , ( VAR_200 | VAR_201 ) ? VAR_202 : VAR_203 ) ; METHOD_86 ( VAR_204 , VAR_205 ) ; METHOD_87 ( VAR_206 , VAR_207 ) ; VAR_208 = 0 ;  if ( METHOD_88 ( ""stdiocpathunixidprocexec"" , VAR_209 ) == - 1 )  METHOD_89 ( ""%s:pledge:%s"" , VAR_210 , METHOD_90 ( VAR_211 ) ) ; while ( 1 ) { METHOD_91 ( & VAR_212 , & VAR_213 , & VAR_214 , & VAR_215 , & VAR_216 ) ; VAR_217 = METHOD_92 ( VAR_218 + 1 , VAR_219 , VAR_220 , VAR_221 , VAR_222 ) ; VAR_223 = VAR_224 ; if ( VAR_225 != 0 ) METHOD_93 ( ) ; ( TYPE_30 ) METHOD_94 ( ) ; if ( VAR_226 < 0 ) { if ( VAR_227 == VAR_228 ) continue ; METHOD_95 ( ""select:%s"" , METHOD_96 ( VAR_229 ) ) ; } else if ( VAR_230 > 0 ) METHOD_97 ( VAR_231 , VAR_232 ) ; } }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 = 0 , VAR_3 = 0 , VAR_4 = 0 , VAR_5 = 0 , VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 * VAR_13 , * VAR_14 , * VAR_15 , * VAR_16 = VAR_17 ; TYPE_7 * VAR_18 = VAR_19 , * VAR_20 = VAR_21 ; struct STRUCT_OR_UNION_0 VAR_22 ; extern TYPE_8 VAR_23 ; extern TYPE_9 * VAR_24 ; TYPE_10 VAR_25 ; TYPE_11 VAR_26 [ 1 + 3 * sizeof VAR_27 ] ; struct STRUCT_OR_UNION_1 * VAR_28 = VAR_29 ; TYPE_12 VAR_30 ; TYPE_13 VAR_31 ; METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( ) ) ; METHOD_5 ( METHOD_6 ( ) ) ; TYPE_14 TYPE_15 VAR_32 ( ) ; while ( ( VAR_33 = METHOD_7 ( VAR_34 , VAR_35 , ""cDdksE:a:t:"" ) ) != - 1 ) { switch ( VAR_36 ) { case 'E' : VAR_37 = METHOD_8 ( VAR_38 ) ; if ( VAR_234 == VAR_221 ) VAR_234 = METHOD_98 ( VAR_235 ) ; if ( VAR_39 == - 1 ) METHOD_9 ( ""Invalidhashalgorithm\\""%s\\"""" , VAR_40 ) ; break ; case 'c' : if ( VAR_41 ) METHOD_10 ( ) ; VAR_42 ++ ; break ; case 'k' : VAR_43 ++ ; break ; case 's' : if ( VAR_44 ) METHOD_11 ( ) ; VAR_45 ++ ; break ; case 'd' : if ( VAR_46 || VAR_47 ) METHOD_12 ( ) ; VAR_48 ++ ; break ; case 'D' : if ( VAR_49 || VAR_50 ) METHOD_13 ( ) ; VAR_51 ++ ; break ; case 'a' : VAR_52 = VAR_53 ; break ; case 't' : if ( ( VAR_54 = METHOD_14 ( VAR_55 ) ) == - 1 ) { METHOD_15 ( VAR_56 , ""Invalidlifetime\\n"" ) ; METHOD_16 ( ) ; } break ; default : METHOD_17 ( ) ; } } VAR_57 -= VAR_58 ; VAR_59 += VAR_60 ; if ( VAR_61 > 0 && ( VAR_62 || VAR_63 || VAR_64 || VAR_65 || VAR_66 ) ) METHOD_18 ( ) ; if ( VAR_67 == 0 && ! VAR_68 && ! VAR_69 ) { VAR_70 = METHOD_19 ( ""SHELL"" ) ; if ( VAR_71 != VAR_72 && ( VAR_73 = METHOD_20 ( VAR_74 ) ) > 2 && METHOD_21 ( VAR_75 + VAR_76 - 3 , ""csh"" , 3 ) == 0 ) VAR_77 = 1 ; } if ( VAR_78 ) { const TYPE_16 * VAR_79 = VAR_80 ; VAR_81 = METHOD_22 ( VAR_82 ) ; if ( VAR_83 == VAR_84 ) { METHOD_23 ( VAR_85 , ""%snotset,cannotkillagent\\n"" , VAR_86 ) ; METHOD_24 ( 1 ) ; } VAR_87 = ( TYPE_17 ) METHOD_25 ( VAR_88 , 2 , VAR_89 , & VAR_90 ) ; if ( VAR_91 ) { METHOD_26 ( VAR_92 , ""%s=\\""%s\\"",whichisnotagoodPID:%s\\n"" , VAR_93 , VAR_94 , VAR_95 ) ; METHOD_27 ( 1 ) ; } if ( METHOD_28 ( VAR_96 , VAR_97 ) == - 1 ) { METHOD_29 ( ""kill"" ) ; METHOD_30 ( 1 ) ; } VAR_98 = VAR_99 ? ""unsetenv%s;\\n"" : ""unset%s;\\n"" ; METHOD_31 ( VAR_100 , VAR_101 ) ; METHOD_32 ( VAR_102 , VAR_103 ) ; METHOD_33 ( ""echoAgentpid%ldkilled;\\n"" , ( TYPE_18 ) VAR_104 ) ; METHOD_34 ( 0 ) ; } VAR_105 = METHOD_35 ( ) ; if ( VAR_106 == VAR_107 ) { METHOD_36 ( VAR_108 , sizeof ( VAR_109 ) ) ; if ( METHOD_37 ( VAR_110 ) == VAR_111 ) { METHOD_38 ( ""mkdtemp:privatesocketdir"" ) ; METHOD_39 ( 1 ) ; } METHOD_40 ( VAR_112 , sizeof VAR_113 , ""%s/agent.%ld"" , VAR_114 , ( TYPE_19 ) VAR_115 ) ; } else { VAR_116 [ 0 ] = '\\0' ; METHOD_41 ( VAR_117 , VAR_118 , sizeof VAR_119 ) ; } VAR_120 = METHOD_42 ( 0177 ) ; VAR_121 = METHOD_43 ( VAR_122 , VAR_123 , 0 ) ; if ( VAR_124 < 0 ) { * VAR_125 = '\\0' ; METHOD_44 ( 1 ) ; } METHOD_45 ( VAR_126 ) ; if ( VAR_127 || VAR_128 ) { METHOD_46 ( VAR_129 , VAR_130 ? VAR_131 : VAR_132 , VAR_133 , 1 ) ; VAR_134 = VAR_135 ? ""setenv%s%s;\\n"" : ""%s=%s;export%s;\\n"" ; METHOD_47 ( VAR_136 , VAR_137 , VAR_138 , VAR_139 ) ; METHOD_48 ( ""echoAgentpid%ld;\\n"" , ( TYPE_20 ) VAR_140 ) ; METHOD_49 ( VAR_141 ) ; goto VAR_142 ; } VAR_143 = METHOD_50 ( ) ; if ( VAR_144 == - 1 ) { METHOD_51 ( ""fork"" ) ; METHOD_52 ( 1 ) ; } if ( VAR_145 != 0 ) { METHOD_53 ( VAR_146 ) ; METHOD_54 ( VAR_147 , sizeof VAR_148 , ""%ld"" , ( TYPE_21 ) VAR_149 ) ; if ( VAR_150 == 0 ) { VAR_151 = VAR_152 ? ""setenv%s%s;\\n"" : ""%s=%s;export%s;\\n"" ; METHOD_55 ( VAR_153 , VAR_154 , VAR_155 , VAR_156 ) ; METHOD_56 ( VAR_157 , VAR_158 , VAR_159 , VAR_160 ) ; METHOD_57 ( ""echoAgentpid%ld;\\n"" , ( TYPE_22 ) VAR_161 ) ; METHOD_58 ( 0 ) ; } if ( METHOD_59 ( VAR_162 , VAR_163 , 1 ) == - 1 || METHOD_60 ( VAR_164 , VAR_165 , 1 ) == - 1 ) { METHOD_61 ( ""setenv"" ) ; METHOD_62 ( 1 ) ; } METHOD_63 ( VAR_166 [ 0 ] , VAR_167 ) ; METHOD_64 ( VAR_168 [ 0 ] ) ; METHOD_65 ( 1 ) ; } METHOD_66 ( VAR_169 , VAR_170 , VAR_171 , 0 ) ; if ( METHOD_67 ( ) == - 1 ) { METHOD_68 ( ""setsid:%s"" , METHOD_69 ( VAR_172 ) ) ; METHOD_70 ( 1 ) ; } ( TYPE_23 ) METHOD_71 ( ""/"" ) ; if ( ( VAR_173 = METHOD_72 ( VAR_174 , VAR_175 , 0 ) ) != - 1 ) { ( TYPE_24 ) METHOD_73 ( VAR_176 , VAR_177 ) ; ( TYPE_25 ) METHOD_74 ( VAR_178 , VAR_179 ) ; ( TYPE_26 ) METHOD_75 ( VAR_180 , VAR_181 ) ; if ( VAR_182 > 2 ) METHOD_76 ( VAR_183 ) ; } VAR_184 . VAR_185 = VAR_186 . VAR_187 = 0 ; if ( METHOD_77 ( VAR_188 , & VAR_189 ) < 0 ) { METHOD_78 ( ""setrlimitRLIMIT_CORE:%s"" , METHOD_79 ( VAR_190 ) ) ; METHOD_80 ( 1 ) ; } VAR_191 : VAR_192 = METHOD_81 ( ) ; TYPE_27 TYPE_28 TYPE_29 ( 0 ) ; METHOD_82 ( VAR_193 , VAR_194 ) ; if ( VAR_195 > 0 ) VAR_196 = 10 ; METHOD_83 ( ) ; METHOD_84 ( VAR_197 , VAR_198 ) ; METHOD_85 ( VAR_199 , ( VAR_200 | VAR_201 ) ? VAR_202 : VAR_203 ) ; METHOD_86 ( VAR_204 , VAR_205 ) ; METHOD_87 ( VAR_206 , VAR_207 ) ; VAR_208 = 0 ; if ( METHOD_88 ( ""stdiocpathunixidprocexec"" , VAR_209 ) == - 1 ) METHOD_89 ( ""%s:pledge:%s"" , VAR_210 , METHOD_90 ( VAR_211 ) ) ; while ( 1 ) { METHOD_91 ( & VAR_212 , & VAR_213 , & VAR_214 , & VAR_215 , & VAR_216 ) ; VAR_217 = METHOD_92 ( VAR_218 + 1 , VAR_219 , VAR_220 , VAR_221 , VAR_222 ) ; VAR_223 = VAR_224 ; if ( VAR_225 != 0 ) METHOD_93 ( ) ; ( TYPE_30 ) METHOD_94 ( ) ; if ( VAR_226 < 0 ) { if ( VAR_227 == VAR_228 ) continue ; METHOD_95 ( ""select:%s"" , METHOD_96 ( VAR_229 ) ) ; } else if ( VAR_230 > 0 ) METHOD_97 ( VAR_231 , VAR_232 ) ; } }",243
244,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; if ( VAR_4 -> VAR_5 != VAR_6 -> VAR_7 || VAR_8 -> VAR_9 != VAR_10 -> VAR_11 ) { return 1 ; } for ( VAR_12 = 0 ; VAR_13 < VAR_14 -> VAR_15 ; VAR_16 ++ ) { for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; VAR_21 ++ ) { if ( METHOD_1 ( VAR_22 , VAR_23 , VAR_24 ) != METHOD_2 ( VAR_25 , VAR_26 , VAR_27 ) ) { return 1 ; } } } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; if ( VAR_4 -> VAR_5 != VAR_6 -> VAR_7 || VAR_8 -> VAR_9 != VAR_10 -> VAR_11 ) { return 1 ; } for ( VAR_12 = 0 ; VAR_13 < VAR_14 -> VAR_15 ; VAR_16 ++ ) { for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; VAR_21 ++ ) { if ( METHOD_1 ( VAR_22 , VAR_23 , VAR_24 ) != METHOD_2 ( VAR_25 , VAR_26 , VAR_27 ) ) { return 1 ; } } } return 0 ; }",244
245,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_1 VAR_5 = 0 , VAR_6 = 0 ; METHOD_1 ( VAR_7 , ""searchH323\\n"" ) ; if ( ( VAR_8 -> VAR_9 != VAR_10 ) && ( VAR_11 -> VAR_12 -> VAR_13 != METHOD_2 ( 102 ) ) ) { METHOD_3 ( VAR_14 , ""calculateddportovertcp\\n"" ) ; if ( VAR_15 -> VAR_16 >= 4 && ( VAR_17 -> VAR_18 [ 0 ] == 0x03 ) && ( VAR_19 -> VAR_20 [ 1 ] == 0x00 ) ) { struct STRUCT_OR_UNION_3 * VAR_21 = ( struct STRUCT_OR_UNION_4 * ) VAR_22 -> VAR_23 ; TYPE_2 VAR_24 = METHOD_4 ( VAR_25 -> VAR_26 ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) { if ( VAR_30 -> VAR_31 [ 4 ] == ( VAR_32 -> VAR_33 - sizeof ( struct STRUCT_OR_UNION_5 ) - 1 ) ) { if ( ( VAR_34 -> VAR_35 [ 5 ] == 0xE0 ) || ( VAR_36 -> VAR_37 [ 5 ] == 0xD0 ) ) { METHOD_5 ( VAR_38 , ""foundRDP\\n"" ) ; METHOD_6 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; return ; } } VAR_43 -> VAR_44 . VAR_45 . VAR_46 ++ ; if ( VAR_47 -> VAR_48 . VAR_49 . VAR_50 >= 2 ) { METHOD_7 ( VAR_51 , ""foundH323broadcast\\n"" ) ; METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; } } else { METHOD_9 ( VAR_56 , VAR_57 ) ; return ; } } } else if ( VAR_58 -> VAR_59 != VAR_60 ) { VAR_61 = METHOD_10 ( VAR_62 -> VAR_63 -> VAR_64 ) , VAR_65 = METHOD_11 ( VAR_66 -> VAR_67 -> VAR_68 ) ; METHOD_12 ( VAR_69 , ""calculateddportoverudp\\n"" ) ; if ( VAR_70 -> VAR_71 >= 6 && VAR_72 -> VAR_73 [ 0 ] == 0x80 && VAR_74 -> VAR_75 [ 1 ] == 0x08 && ( VAR_76 -> VAR_77 [ 2 ] == 0xe7 || VAR_78 -> VAR_79 [ 2 ] == 0x26 ) && VAR_80 -> VAR_81 [ 4 ] == 0x00 && VAR_82 -> VAR_83 [ 5 ] == 0x00 ) { METHOD_13 ( VAR_84 , ""foundH323broadcast\\n"" ) ; METHOD_14 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 ) ; return ; } if ( VAR_89 == 1719 || VAR_90 == 1719 )  {   if ( VAR_91 -> VAR_92 [ 0 ] == 0x16 && VAR_93 -> VAR_94 [ 1 ] == 0x80 && VAR_95 -> VAR_96 [ 4 ] == 0x06 && VAR_97 -> VAR_98 [ 5 ] == 0x00 )   {  METHOD_15 ( VAR_99 , ""foundH323broadcast\\n"" ) ; METHOD_16 ( VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; return ; } else if ( VAR_104 -> VAR_105 >= 20 && VAR_106 -> VAR_107 <= 117 ) { METHOD_17 ( VAR_108 , ""foundH323broadcast\\n"" ) ; METHOD_18 ( VAR_109 , VAR_110 , VAR_111 , VAR_112 ) ; return ; } else { METHOD_19 ( VAR_113 , VAR_114 ) ; return ; } } } }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_1 VAR_5 = 0 , VAR_6 = 0 ; METHOD_1 ( VAR_7 , ""searchH323\\n"" ) ; if ( ( VAR_8 -> VAR_9 != VAR_10 ) && ( VAR_11 -> VAR_12 -> VAR_13 != METHOD_2 ( 102 ) ) ) { METHOD_3 ( VAR_14 , ""calculateddportovertcp\\n"" ) ; if ( VAR_15 -> VAR_16 >= 4 && ( VAR_17 -> VAR_18 [ 0 ] == 0x03 ) && ( VAR_19 -> VAR_20 [ 1 ] == 0x00 ) ) { struct STRUCT_OR_UNION_3 * VAR_21 = ( struct STRUCT_OR_UNION_4 * ) VAR_22 -> VAR_23 ; TYPE_2 VAR_24 = METHOD_4 ( VAR_25 -> VAR_26 ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) { if ( VAR_30 -> VAR_31 [ 4 ] == ( VAR_32 -> VAR_33 - sizeof ( struct STRUCT_OR_UNION_5 ) - 1 ) ) { if ( ( VAR_34 -> VAR_35 [ 5 ] == 0xE0 ) || ( VAR_36 -> VAR_37 [ 5 ] == 0xD0 ) ) { METHOD_5 ( VAR_38 , ""foundRDP\\n"" ) ; METHOD_6 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; return ; } } VAR_43 -> VAR_44 . VAR_45 . VAR_46 ++ ; if ( VAR_47 -> VAR_48 . VAR_49 . VAR_50 >= 2 ) { METHOD_7 ( VAR_51 , ""foundH323broadcast\\n"" ) ; METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; } } else { METHOD_9 ( VAR_56 , VAR_57 ) ; return ; } } } else if ( VAR_58 -> VAR_59 != VAR_60 ) { VAR_61 = METHOD_10 ( VAR_62 -> VAR_63 -> VAR_64 ) , VAR_65 = METHOD_11 ( VAR_66 -> VAR_67 -> VAR_68 ) ; METHOD_12 ( VAR_69 , ""calculateddportoverudp\\n"" ) ; if ( VAR_70 -> VAR_71 >= 6 && VAR_72 -> VAR_73 [ 0 ] == 0x80 && VAR_74 -> VAR_75 [ 1 ] == 0x08 && ( VAR_76 -> VAR_77 [ 2 ] == 0xe7 || VAR_78 -> VAR_79 [ 2 ] == 0x26 ) && VAR_80 -> VAR_81 [ 4 ] == 0x00 && VAR_82 -> VAR_83 [ 5 ] == 0x00 ) { METHOD_13 ( VAR_84 , ""foundH323broadcast\\n"" ) ; METHOD_14 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 ) ; return ; } if ( VAR_89 == 1719 || VAR_90 == 1719 ) { if ( VAR_91 -> VAR_92 [ 0 ] == 0x16 && VAR_93 -> VAR_94 [ 1 ] == 0x80 && VAR_95 -> VAR_96 [ 4 ] == 0x06 && VAR_97 -> VAR_98 [ 5 ] == 0x00 ) ) { METHOD_15 ( VAR_99 , ""foundH323broadcast\\n"" ) ; METHOD_16 ( VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; return ; } else if ( VAR_104 -> VAR_105 >= 20 && VAR_106 -> VAR_107 <= 117 ) { METHOD_17 ( VAR_108 , ""foundH323broadcast\\n"" ) ; METHOD_18 ( VAR_109 , VAR_110 , VAR_111 , VAR_112 ) ; return ; } else { METHOD_19 ( VAR_113 , VAR_114 ) ; return ; } } } }",245
246,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_8 ) ; if ( ! METHOD_2 ( VAR_9 ) ) return - VAR_10 ; if ( STRUCT_OR_UNION_6 -> VAR_11 != STRUCT_OR_UNION_7 -> VAR_12 -> VAR_13 ) return - VAR_14 ; VAR_15 = METHOD_3 ( VAR_16 , VAR_17 ) ; if ( VAR_18 ) return VAR_19 ; METHOD_4 ( & VAR_20 -> VAR_21 ) ; if ( VAR_22 & VAR_23 ) VAR_24 = METHOD_5 ( STRUCT_OR_UNION_8 -> VAR_25 , VAR_26 ) ; else if ( ! METHOD_6 ( VAR_27 ) ) VAR_28 = - VAR_29 ; else VAR_30 = METHOD_7 ( VAR_31 , VAR_32 , VAR_33 , 0 ) ; if ( ! VAR_34 ) { METHOD_8 ( ) ;  VAR_35 |= VAR_36 -> VAR_37 . VAR_38 & VAR_39 ;  VAR_40 -> VAR_41 . VAR_42 = VAR_43 ; METHOD_9 ( VAR_44 -> VAR_45 ) ; METHOD_10 ( ) ; } METHOD_11 ( & VAR_46 -> VAR_47 ) ; return VAR_48 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = STRUCT_OR_UNION_3 -> VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = METHOD_1 ( STRUCT_OR_UNION_5 -> VAR_8 ) ; if ( ! METHOD_2 ( VAR_9 ) ) return - VAR_10 ; if ( STRUCT_OR_UNION_6 -> VAR_11 != STRUCT_OR_UNION_7 -> VAR_12 -> VAR_13 ) return - VAR_14 ; VAR_15 = METHOD_3 ( VAR_16 , VAR_17 ) ; if ( VAR_18 ) return VAR_19 ; METHOD_4 ( & VAR_20 -> VAR_21 ) ; if ( VAR_22 & VAR_23 ) VAR_24 = METHOD_5 ( STRUCT_OR_UNION_8 -> VAR_25 , VAR_26 ) ; else if ( ! METHOD_6 ( VAR_27 ) ) VAR_28 = - VAR_29 ; else VAR_30 = METHOD_7 ( VAR_31 , VAR_32 , VAR_33 , 0 ) ; if ( ! VAR_34 ) { METHOD_8 ( ) ; VAR_35 |= VAR_36 -> VAR_37 . VAR_38 & VAR_39 ; VAR_40 -> VAR_41 . VAR_42 = VAR_43 ; METHOD_9 ( VAR_44 -> VAR_45 ) ; METHOD_10 ( ) ; } METHOD_11 ( & VAR_46 -> VAR_47 ) ; return VAR_48 ; }",246
247,"TYPE_0 METHOD_0 ( TYPE_1 ) { VAR_0 * VAR_1 ; const TYPE_2 * VAR_2 ; TYPE_3 VAR_3 [ 100 ] , VAR_4 [ 30 ] ; TYPE_4 VAR_5 ; TYPE_5 TYPE_6 VAR_6 = METHOD_1 ( ) ; else  VAR_7 = METHOD_2 ( ) ;  TYPE_7 = VAR_8 ( VAR_9 , "".ettercap_gtk"" , VAR_10 ) ; METHOD_3 ( ""gtkui_conf_read:%s"" , TYPE_8 ) ; VAR_11 = METHOD_4 ( TYPE_9 , ""r"" ) ; if ( ! VAR_12 ) return ; while ( METHOD_5 ( VAR_13 , 100 , VAR_14 ) ) { METHOD_6 ( VAR_15 , ""%s=%hd"" , VAR_16 , & VAR_17 ) ; METHOD_7 ( VAR_18 , VAR_19 ) ; } METHOD_8 ( VAR_20 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 ) { VAR_0 * VAR_1 ; const TYPE_2 * VAR_2 ; TYPE_3 VAR_3 [ 100 ] , VAR_4 [ 30 ] ; TYPE_4 VAR_5 ; TYPE_5 TYPE_6 VAR_6 = METHOD_1 ( ) ; else VAR_7 = METHOD_2 ( ) ; TYPE_7 = VAR_8 ( VAR_9 , "".ettercap_gtk"" , VAR_10 ) ; METHOD_3 ( ""gtkui_conf_read:%s"" , TYPE_8 ) ; VAR_11 = METHOD_4 ( TYPE_9 , ""r"" ) ; if ( ! VAR_12 ) return ; while ( METHOD_5 ( VAR_13 , 100 , VAR_14 ) ) { METHOD_6 ( VAR_15 , ""%s=%hd"" , VAR_16 , & VAR_17 ) ; METHOD_7 ( VAR_18 , VAR_19 ) ; } METHOD_8 ( VAR_20 ) ; }",247
248,"struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) ; static TYPE_1 VAR_0 ; struct STRUCT_OR_UNION_3 * VAR_1 ; TYPE_2 VAR_2 ; if ( METHOD_2 ( ) >= VAR_3 . VAR_4 && ! METHOD_3 ( VAR_5 ) ) { if ( METHOD_4 ( & VAR_6 ) >= VAR_7 . VAR_8 ) goto VAR_9 ; } VAR_10 = METHOD_5 ( VAR_11 , VAR_12 ) ; if ( METHOD_6 ( ! VAR_13 ) ) return METHOD_7 ( - VAR_14 ) ; METHOD_8 ( & VAR_15 ) ; VAR_16 -> VAR_17 = METHOD_9 ( STRUCT_OR_UNION_4 ) ; VAR_18 = METHOD_10 ( VAR_19 ) ; if ( METHOD_11 ( VAR_20 ) ) { METHOD_12 ( VAR_21 ) ; return METHOD_13 ( VAR_22 ) ; }  METHOD_14 ( & VAR_23 -> VAR_24 . VAR_25 ) ;  METHOD_15 ( & VAR_26 -> VAR_27 , 1 ) ; METHOD_16 ( & VAR_28 -> VAR_29 . VAR_30 ) ; METHOD_17 ( & VAR_31 -> VAR_32 ) ; METHOD_18 ( VAR_33 ) ; return VAR_34 ; VAR_35 : if ( METHOD_19 ( ) > VAR_36 ) { METHOD_20 ( ""VFS:file-maxlimit%lureached\\n"" , METHOD_21 ( ) ) ; VAR_37 = METHOD_22 ( ) ; } return METHOD_23 ( - VAR_38 ) ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 ) { const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( ) ; static TYPE_1 VAR_0 ; struct STRUCT_OR_UNION_3 * VAR_1 ; TYPE_2 VAR_2 ; if ( METHOD_2 ( ) >= VAR_3 . VAR_4 && ! METHOD_3 ( VAR_5 ) ) { if ( METHOD_4 ( & VAR_6 ) >= VAR_7 . VAR_8 ) goto VAR_9 ; } VAR_10 = METHOD_5 ( VAR_11 , VAR_12 ) ; if ( METHOD_6 ( ! VAR_13 ) ) return METHOD_7 ( - VAR_14 ) ; METHOD_8 ( & VAR_15 ) ; VAR_16 -> VAR_17 = METHOD_9 ( STRUCT_OR_UNION_4 ) ; VAR_18 = METHOD_10 ( VAR_19 ) ; if ( METHOD_11 ( VAR_20 ) ) { METHOD_12 ( VAR_21 ) ; return METHOD_13 ( VAR_22 ) ; } METHOD_15 ( & VAR_26 -> VAR_27 , 1 ) ; METHOD_16 ( & VAR_28 -> VAR_29 . VAR_30 ) ; METHOD_17 ( & VAR_31 -> VAR_32 ) ; METHOD_18 ( VAR_33 ) ; return VAR_34 ; VAR_35 : if ( METHOD_19 ( ) > VAR_36 ) { METHOD_20 ( ""VFS:file-maxlimit%lureached\\n"" , METHOD_21 ( ) ) ; VAR_37 = METHOD_22 ( ) ; } return METHOD_23 ( - VAR_38 ) ; }",248
249,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = - 1 ; TYPE_3 VAR_2 = 1 ; TYPE_4 TYPE_5 TYPE_6 VAR_3 ; if ( ! VAR_4 ) { if ( METHOD_1 ( METHOD_2 ( 2 , 2 ) , & VAR_5 ) != VAR_6 ) { METHOD_3 ( VAR_7 , ""WSAStartupfailed!\\n"" ) ; METHOD_4 ( - 1 ) ; } VAR_8 = 1 ; } struct STRUCT_OR_UNION_0 VAR_9 ; if ( 0 > ( VAR_10 = METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ) ) { METHOD_6 ( ""socket()"" ) ; return - 1 ; } if ( METHOD_7 ( VAR_14 , VAR_15 , VAR_16 , ( TYPE_7 * ) & VAR_17 , sizeof ( TYPE_8 ) ) == - 1 ) { METHOD_8 ( ""setsockopt()"" ) ; METHOD_9 ( VAR_18 ) ; return - 1 ; } METHOD_10 ( ( TYPE_9 * ) & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; VAR_21 . VAR_22 = VAR_23 ;  VAR_24 . VAR_25 . VAR_26 = METHOD_11 ( VAR_27 ) ;  VAR_28 . VAR_29 = METHOD_12 ( VAR_30 ) ; if ( 0 > METHOD_13 ( VAR_31 , ( struct STRUCT_OR_UNION_1 * ) & VAR_32 , sizeof ( VAR_33 ) ) ) { METHOD_14 ( ""bind()"" ) ; METHOD_15 ( VAR_34 ) ; return - 1 ; } if ( METHOD_16 ( VAR_35 , 1 ) == - 1 ) { METHOD_17 ( ""listen()"" ) ; METHOD_18 ( VAR_36 ) ; return - 1 ; } return VAR_37 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 = - 1 ; TYPE_3 VAR_2 = 1 ; TYPE_4 TYPE_5 TYPE_6 VAR_3 ; if ( ! VAR_4 ) { if ( METHOD_1 ( METHOD_2 ( 2 , 2 ) , & VAR_5 ) != VAR_6 ) { METHOD_3 ( VAR_7 , ""WSAStartupfailed!\\n"" ) ; METHOD_4 ( - 1 ) ; } VAR_8 = 1 ; } struct STRUCT_OR_UNION_0 VAR_9 ; if ( 0 > ( VAR_10 = METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ) ) { METHOD_6 ( ""socket()"" ) ; return - 1 ; } if ( METHOD_7 ( VAR_14 , VAR_15 , VAR_16 , ( TYPE_7 * ) & VAR_17 , sizeof ( TYPE_8 ) ) == - 1 ) { METHOD_8 ( ""setsockopt()"" ) ; METHOD_9 ( VAR_18 ) ; return - 1 ; } METHOD_10 ( ( TYPE_9 * ) & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; VAR_21 . VAR_22 = VAR_23 ; VAR_24 . VAR_25 . VAR_26 = METHOD_11 ( VAR_27 ) ; VAR_28 . VAR_29 = METHOD_12 ( VAR_30 ) ; if ( 0 > METHOD_13 ( VAR_31 , ( struct STRUCT_OR_UNION_1 * ) & VAR_32 , sizeof ( VAR_33 ) ) ) { METHOD_14 ( ""bind()"" ) ; METHOD_15 ( VAR_34 ) ; return - 1 ; } if ( METHOD_16 ( VAR_35 , 1 ) == - 1 ) { METHOD_17 ( ""listen()"" ) ; METHOD_18 ( VAR_36 ) ; return - 1 ; } return VAR_37 ; }",249
250,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ;  if ( VAR_12 < sizeof VAR_13 )  return - VAR_14 ; if ( METHOD_1 ( & VAR_15 , VAR_16 , sizeof VAR_17 ) ) return - VAR_18 ; VAR_19 = METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_20 -> VAR_21 ) ; VAR_22 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_23 -> VAR_24 , & STRUCT_OR_UNION_7 -> VAR_25 -> VAR_26 ) ; if ( ! VAR_27 ) { VAR_28 = - VAR_29 ; goto VAR_30 ; } if ( VAR_31 . VAR_32 & ~ ( TYPE_9 ) ( VAR_33 | VAR_34 ) ) { VAR_35 = - VAR_36 ; goto VAR_37 ; } VAR_38 = VAR_39 . VAR_40 & VAR_41 ; if ( METHOD_4 ( VAR_42 , VAR_43 ) ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } if ( ! STRUCT_OR_UNION_8 -> VAR_47 && VAR_48 != VAR_49 ) { VAR_50 = - VAR_51 ; goto VAR_52 ; } VAR_53 = ( VAR_54 . VAR_55 & VAR_56 ) >> VAR_57 ; if ( ! VAR_58 ) { if ( VAR_59 >= METHOD_5 ( VAR_60 ) || ! VAR_61 [ VAR_62 METHOD_6 ) { VAR_63 = - VAR_64 ; goto VAR_65 ; } if ( VAR_66 . VAR_67 * 4 != VAR_68 ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 = VAR_73 [ VAR_74 METHOD_7 ( STRUCT_OR_UNION_9 , VAR_75 , VAR_76 + sizeof ( VAR_77 ) , VAR_78 . VAR_79 * 4 , VAR_80 . VAR_81 * 4 ) ; } else if ( VAR_82 == VAR_83 ) { struct STRUCT_OR_UNION_10 VAR_84 ; struct STRUCT_OR_UNION_11 VAR_85 ; struct STRUCT_OR_UNION_12 VAR_86 ; TYPE_10 VAR_87 = VAR_88 ; if ( VAR_89 >= METHOD_8 ( VAR_90 ) || ! VAR_91 [ VAR_92 METHOD_9 ) { VAR_93 = - VAR_94 ; goto VAR_95 ; } if ( ! STRUCT_OR_UNION_13 -> VAR_96 ) { VAR_97 = - VAR_98 ; goto VAR_99 ; } if ( VAR_100 < ( sizeof ( VAR_101 ) + sizeof ( VAR_102 ) ) ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } if ( METHOD_10 ( & VAR_106 , VAR_107 + sizeof ( VAR_108 ) , sizeof ( VAR_109 ) ) ) { VAR_110 = - VAR_111 ; goto VAR_112 ; } VAR_113 -= sizeof ( VAR_114 ) + sizeof ( VAR_115 ) ; VAR_116 += sizeof ( VAR_117 ) + sizeof ( VAR_118 ) ; if ( ( VAR_119 . VAR_120 + VAR_121 . VAR_122 ) * 8 != VAR_123 ) { VAR_124 = - VAR_125 ; goto VAR_126 ; } if ( VAR_127 . VAR_128 ) { VAR_129 = - VAR_130 ; goto VAR_131 ; } if ( VAR_132 . VAR_133 ) { if ( ! VAR_134 . VAR_135 && ! VAR_136 . VAR_137 ) { VAR_138 = - VAR_139 ; goto VAR_140 ; } if ( ! METHOD_11 ( VAR_141 , ( TYPE_11 TYPE_12 * ) ( unsigned TYPE_13 ) VAR_142 . VAR_143 , ( VAR_144 . VAR_145 + VAR_146 . VAR_147 ) * 8 ) ) { VAR_148 = - VAR_149 ; goto VAR_150 ; } } else { if ( VAR_151 . VAR_152 || VAR_153 . VAR_154 ) { VAR_155 = - VAR_156 ; goto VAR_157 ; } } METHOD_12 ( & VAR_158 , VAR_159 , ( unsigned TYPE_14 ) VAR_160 . VAR_161 , VAR_162 . VAR_163 * 8 , VAR_164 . VAR_165 * 8 ) ; METHOD_13 ( & VAR_166 , VAR_167 + VAR_168 . VAR_169 , ( unsigned TYPE_15 ) VAR_170 . VAR_171 + VAR_172 . VAR_173 , VAR_174 . VAR_175 * 8 , VAR_176 . VAR_177 * 8 ) ; VAR_178 = VAR_179 [ VAR_180 METHOD_14 ( STRUCT_OR_UNION_14 , VAR_181 , & VAR_182 , & VAR_183 ) ; if ( ! VAR_184 ) VAR_185 = VAR_186 ; } else { VAR_187 = - VAR_188 ; } VAR_189 : METHOD_15 ( & STRUCT_OR_UNION_15 -> VAR_190 -> VAR_191 , VAR_192 ) ; return VAR_193 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; if ( METHOD_17 ( ! METHOD_16 ( VAR_4 ) ) ) return - VAR_194 ; if ( VAR_12 < sizeof VAR_13 ) return - VAR_14 ; if ( METHOD_1 ( & VAR_15 , VAR_16 , sizeof VAR_17 ) ) return - VAR_18 ; VAR_19 = METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_20 -> VAR_21 ) ; VAR_22 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_23 -> VAR_24 , & STRUCT_OR_UNION_7 -> VAR_25 -> VAR_26 ) ; if ( ! VAR_27 ) { VAR_28 = - VAR_29 ; goto VAR_30 ; } if ( VAR_31 . VAR_32 & ~ ( TYPE_9 ) ( VAR_33 | VAR_34 ) ) { VAR_35 = - VAR_36 ; goto VAR_37 ; } VAR_38 = VAR_39 . VAR_40 & VAR_41 ; if ( METHOD_4 ( VAR_42 , VAR_43 ) ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } if ( ! STRUCT_OR_UNION_8 -> VAR_47 && VAR_48 != VAR_49 ) { VAR_50 = - VAR_51 ; goto VAR_52 ; } VAR_53 = ( VAR_54 . VAR_55 & VAR_56 ) >> VAR_57 ; if ( ! VAR_58 ) { if ( VAR_59 >= METHOD_5 ( VAR_60 ) || ! VAR_61 [ VAR_62 METHOD_6 ) { VAR_63 = - VAR_64 ; goto VAR_65 ; } if ( VAR_66 . VAR_67 * 4 != VAR_68 ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 = VAR_73 [ VAR_74 METHOD_7 ( STRUCT_OR_UNION_9 , VAR_75 , VAR_76 + sizeof ( VAR_77 ) , VAR_78 . VAR_79 * 4 , VAR_80 . VAR_81 * 4 ) ; } else if ( VAR_82 == VAR_83 ) { struct STRUCT_OR_UNION_10 VAR_84 ; struct STRUCT_OR_UNION_11 VAR_85 ; struct STRUCT_OR_UNION_12 VAR_86 ; TYPE_10 VAR_87 = VAR_88 ; if ( VAR_89 >= METHOD_8 ( VAR_90 ) || ! VAR_91 [ VAR_92 METHOD_9 ) { VAR_93 = - VAR_94 ; goto VAR_95 ; } if ( ! STRUCT_OR_UNION_13 -> VAR_96 ) { VAR_97 = - VAR_98 ; goto VAR_99 ; } if ( VAR_100 < ( sizeof ( VAR_101 ) + sizeof ( VAR_102 ) ) ) { VAR_103 = - VAR_104 ; goto VAR_105 ; } if ( METHOD_10 ( & VAR_106 , VAR_107 + sizeof ( VAR_108 ) , sizeof ( VAR_109 ) ) ) { VAR_110 = - VAR_111 ; goto VAR_112 ; } VAR_113 -= sizeof ( VAR_114 ) + sizeof ( VAR_115 ) ; VAR_116 += sizeof ( VAR_117 ) + sizeof ( VAR_118 ) ; if ( ( VAR_119 . VAR_120 + VAR_121 . VAR_122 ) * 8 != VAR_123 ) { VAR_124 = - VAR_125 ; goto VAR_126 ; } if ( VAR_127 . VAR_128 ) { VAR_129 = - VAR_130 ; goto VAR_131 ; } if ( VAR_132 . VAR_133 ) { if ( ! VAR_134 . VAR_135 && ! VAR_136 . VAR_137 ) { VAR_138 = - VAR_139 ; goto VAR_140 ; } if ( ! METHOD_11 ( VAR_141 , ( TYPE_11 TYPE_12 * ) ( unsigned TYPE_13 ) VAR_142 . VAR_143 , ( VAR_144 . VAR_145 + VAR_146 . VAR_147 ) * 8 ) ) { VAR_148 = - VAR_149 ; goto VAR_150 ; } } else { if ( VAR_151 . VAR_152 || VAR_153 . VAR_154 ) { VAR_155 = - VAR_156 ; goto VAR_157 ; } } METHOD_12 ( & VAR_158 , VAR_159 , ( unsigned TYPE_14 ) VAR_160 . VAR_161 , VAR_162 . VAR_163 * 8 , VAR_164 . VAR_165 * 8 ) ; METHOD_13 ( & VAR_166 , VAR_167 + VAR_168 . VAR_169 , ( unsigned TYPE_15 ) VAR_170 . VAR_171 + VAR_172 . VAR_173 , VAR_174 . VAR_175 * 8 , VAR_176 . VAR_177 * 8 ) ; VAR_178 = VAR_179 [ VAR_180 METHOD_14 ( STRUCT_OR_UNION_14 , VAR_181 , & VAR_182 , & VAR_183 ) ; if ( ! VAR_184 ) VAR_185 = VAR_186 ; } else { VAR_187 = - VAR_188 ; } VAR_189 : METHOD_15 ( & STRUCT_OR_UNION_15 -> VAR_190 -> VAR_191 , VAR_192 ) ; return VAR_193 ; }",250
251,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = 22 , VAR_4 = 0 ; if ( VAR_5 + sizeof ( TYPE_4 ) >= VAR_6 -> VAR_7 ) goto VAR_8 ; TYPE_5 VAR_9 = METHOD_1 ( * ( TYPE_6 * ) & VAR_10 -> VAR_11 [ VAR_12 ] ) ; VAR_13 += 4 ; if ( ( VAR_14 >= VAR_15 -> VAR_16 ) || ( VAR_17 >= VAR_18 -> VAR_19 - VAR_20 - 1 ) ) goto VAR_21 ; METHOD_2 ( VAR_22 , ( const TYPE_7 * ) & VAR_23 -> VAR_24 [ VAR_25 ] , VAR_26 = VAR_27 ) ; VAR_28 [ VAR_29 ++ ] = ';' ; VAR_30 += VAR_31 ;  VAR_32 = METHOD_3 ( * ( TYPE_8 * ) & VAR_33 -> VAR_34 [ VAR_35 ] ) ;   VAR_36 += 4 + VAR_37 ;  VAR_38 = METHOD_4 ( * ( TYPE_9 * ) & VAR_39 -> VAR_40 [ VAR_41 ] ) ; if ( VAR_42 ) { VAR_43 += 4 ; if ( ( VAR_44 >= VAR_45 -> VAR_46 ) || ( VAR_47 >= VAR_48 -> VAR_49 - VAR_50 - 1 ) ) goto VAR_51 ; METHOD_5 ( & VAR_52 [ VAR_53 ] , ( const TYPE_10 * ) & VAR_54 -> VAR_55 [ VAR_56 ] , VAR_57 ) ; VAR_58 += VAR_59 ; VAR_60 [ VAR_61 ++ ] = ';' ; VAR_62 += VAR_63 ; } else VAR_64 += 4 + VAR_65 ;  VAR_66 = METHOD_6 ( * ( TYPE_11 * ) & VAR_67 -> VAR_68 [ VAR_69 ] ) ;  if ( ! VAR_70 ) { VAR_71 += 4 ; if ( ( VAR_72 >= VAR_73 -> VAR_74 ) || ( VAR_75 >= VAR_76 -> VAR_77 - VAR_78 - 1 ) ) goto VAR_79 ; METHOD_7 ( & VAR_80 [ VAR_81 ] , ( const TYPE_12 * ) & VAR_82 -> VAR_83 [ VAR_84 ] , VAR_85 ) ; VAR_86 += VAR_87 ; VAR_88 [ VAR_89 ++ ] = ';' ; VAR_90 += VAR_91 ; } else VAR_92 += 4 + VAR_93 ;  VAR_94 = METHOD_8 ( * ( TYPE_13 * ) & VAR_95 -> VAR_96 [ VAR_97 ] ) ;  if ( VAR_98 ) { VAR_99 += 4 ; if ( ( VAR_100 >= VAR_101 -> VAR_102 ) || ( VAR_103 >= VAR_104 -> VAR_105 - VAR_106 - 1 ) ) goto VAR_107 ; METHOD_9 ( & VAR_108 [ VAR_109 ] , ( const TYPE_14 * ) & VAR_110 -> VAR_111 [ VAR_112 ] , VAR_113 ) ; VAR_114 += VAR_115 ; VAR_116 [ VAR_117 ++ ] = ';' ; VAR_118 += VAR_119 ; } else VAR_120 += 4 + VAR_121 ;  VAR_122 = METHOD_10 ( * ( TYPE_15 * ) & VAR_123 -> VAR_124 [ VAR_125 ] ) ;  if ( ! VAR_126 ) { VAR_127 += 4 ; if ( ( VAR_128 >= VAR_129 -> VAR_130 ) || ( VAR_131 >= VAR_132 -> VAR_133 - VAR_134 - 1 ) ) goto VAR_135 ; METHOD_11 ( & VAR_136 [ VAR_137 ] , ( const TYPE_16 * ) & VAR_138 -> VAR_139 [ VAR_140 ] , VAR_141 ) ; VAR_142 += VAR_143 ; VAR_144 [ VAR_145 ++ ] = ';' ; VAR_146 += VAR_147 ; } else VAR_148 += 4 + VAR_149 ; if ( VAR_150 + sizeof ( TYPE_17 ) >= VAR_151 -> VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_12 ( * ( TYPE_18 * ) & VAR_155 -> VAR_156 [ VAR_157 ] ) ; if ( VAR_158 ) { VAR_159 += 4 ; if ( ( VAR_160 >= VAR_161 -> VAR_162 ) || ( VAR_163 >= VAR_164 -> VAR_165 - VAR_166 - 1 ) ) goto VAR_167 ; METHOD_13 ( & VAR_168 [ VAR_169 ] , ( const TYPE_19 * ) & VAR_170 -> VAR_171 [ VAR_172 ] , VAR_173 ) ; VAR_174 += VAR_175 ; VAR_176 += VAR_177 ; } else  VAR_178 += 4 + VAR_179 ;  VAR_180 = METHOD_14 ( * ( TYPE_20 * ) & VAR_181 -> VAR_182 [ VAR_183 ] ) ; if ( ! VAR_184 ) { VAR_185 += 4 ; if ( ( VAR_186 >= VAR_187 -> VAR_188 ) || ( VAR_189 >= VAR_190 -> VAR_191 - VAR_192 - 1 ) ) goto VAR_193 ; METHOD_15 ( & VAR_194 [ VAR_195 ] , ( const TYPE_21 * ) & VAR_196 -> VAR_197 [ VAR_198 ] , VAR_199 ) ; VAR_200 += VAR_201 ; VAR_202 += VAR_203 ; } else VAR_204 += 4 + VAR_205 ; TYPE_22 TYPE_23 TYPE_24 ( ""[SSH]%s\\n"" , VAR_206 ) ; return ( VAR_207 ) ; VAR_208 : TYPE_25 TYPE_26 TYPE_27 ( ""[SSH]Invalidpacketpayload\\n"" ) ; return ( 0 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = 22 , VAR_4 = 0 ; if ( VAR_5 + sizeof ( TYPE_4 ) >= VAR_6 -> VAR_7 ) goto VAR_8 ; TYPE_5 VAR_9 = METHOD_1 ( * ( TYPE_6 * ) & VAR_10 -> VAR_11 [ VAR_12 ] ) ; VAR_13 += 4 ; if ( ( VAR_14 >= VAR_15 -> VAR_16 ) || ( VAR_17 >= VAR_18 -> VAR_19 - VAR_20 - 1 ) ) goto VAR_21 ; METHOD_2 ( VAR_22 , ( const TYPE_7 * ) & VAR_23 -> VAR_24 [ VAR_25 ] , VAR_26 = VAR_27 ) ; VAR_28 [ VAR_29 ++ ] = ';' ; VAR_30 += VAR_31 ; VAR_32 = METHOD_3 ( * ( TYPE_8 * ) & VAR_33 -> VAR_34 [ VAR_35 ] ) ; VAR_36 += 4 + VAR_37 ; VAR_38 = METHOD_4 ( * ( TYPE_9 * ) & VAR_39 -> VAR_40 [ VAR_41 ] ) ; if ( VAR_42 ) { VAR_43 += 4 ; if ( ( VAR_44 >= VAR_45 -> VAR_46 ) || ( VAR_47 >= VAR_48 -> VAR_49 - VAR_50 - 1 ) ) goto VAR_51 ; METHOD_5 ( & VAR_52 [ VAR_53 ] , ( const TYPE_10 * ) & VAR_54 -> VAR_55 [ VAR_56 ] , VAR_57 ) ; VAR_58 += VAR_59 ; VAR_60 [ VAR_61 ++ ] = ';' ; VAR_62 += VAR_63 ; } else VAR_64 += 4 + VAR_65 ; VAR_66 = METHOD_6 ( * ( TYPE_11 * ) & VAR_67 -> VAR_68 [ VAR_69 ] ) ; if ( ! VAR_70 ) { VAR_71 += 4 ; if ( ( VAR_72 >= VAR_73 -> VAR_74 ) || ( VAR_75 >= VAR_76 -> VAR_77 - VAR_78 - 1 ) ) goto VAR_79 ; METHOD_7 ( & VAR_80 [ VAR_81 ] , ( const TYPE_12 * ) & VAR_82 -> VAR_83 [ VAR_84 ] , VAR_85 ) ; VAR_86 += VAR_87 ; VAR_88 [ VAR_89 ++ ] = ';' ; VAR_90 += VAR_91 ; } else VAR_92 += 4 + VAR_93 ; VAR_94 = METHOD_8 ( * ( TYPE_13 * ) & VAR_95 -> VAR_96 [ VAR_97 ] ) ; if ( VAR_98 ) { VAR_99 += 4 ; if ( ( VAR_100 >= VAR_101 -> VAR_102 ) || ( VAR_103 >= VAR_104 -> VAR_105 - VAR_106 - 1 ) ) goto VAR_107 ; METHOD_9 ( & VAR_108 [ VAR_109 ] , ( const TYPE_14 * ) & VAR_110 -> VAR_111 [ VAR_112 ] , VAR_113 ) ; VAR_114 += VAR_115 ; VAR_116 [ VAR_117 ++ ] = ';' ; VAR_118 += VAR_119 ; } else VAR_120 += 4 + VAR_121 ; VAR_122 = METHOD_10 ( * ( TYPE_15 * ) & VAR_123 -> VAR_124 [ VAR_125 ] ) ; if ( ! VAR_126 ) { VAR_127 += 4 ; if ( ( VAR_128 >= VAR_129 -> VAR_130 ) || ( VAR_131 >= VAR_132 -> VAR_133 - VAR_134 - 1 ) ) goto VAR_135 ; METHOD_11 ( & VAR_136 [ VAR_137 ] , ( const TYPE_16 * ) & VAR_138 -> VAR_139 [ VAR_140 ] , VAR_141 ) ; VAR_142 += VAR_143 ; VAR_144 [ VAR_145 ++ ] = ';' ; VAR_146 += VAR_147 ; } else VAR_148 += 4 + VAR_149 ; if ( VAR_150 + sizeof ( TYPE_17 ) >= VAR_151 -> VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_12 ( * ( TYPE_18 * ) & VAR_155 -> VAR_156 [ VAR_157 ] ) ; if ( VAR_158 ) { VAR_159 += 4 ; if ( ( VAR_160 >= VAR_161 -> VAR_162 ) || ( VAR_163 >= VAR_164 -> VAR_165 - VAR_166 - 1 ) ) goto VAR_167 ; METHOD_13 ( & VAR_168 [ VAR_169 ] , ( const TYPE_19 * ) & VAR_170 -> VAR_171 [ VAR_172 ] , VAR_173 ) ; VAR_174 += VAR_175 ; VAR_176 += VAR_177 ; } else VAR_178 += 4 + VAR_179 ; VAR_180 = METHOD_14 ( * ( TYPE_20 * ) & VAR_181 -> VAR_182 [ VAR_183 ] ) ; if ( ! VAR_184 ) { VAR_185 += 4 ; if ( ( VAR_186 >= VAR_187 -> VAR_188 ) || ( VAR_189 >= VAR_190 -> VAR_191 - VAR_192 - 1 ) ) goto VAR_193 ; METHOD_15 ( & VAR_194 [ VAR_195 ] , ( const TYPE_21 * ) & VAR_196 -> VAR_197 [ VAR_198 ] , VAR_199 ) ; VAR_200 += VAR_201 ; VAR_202 += VAR_203 ; } else VAR_204 += 4 + VAR_205 ; if ( VAR_204 + sizeof ( TYPE_20 ) >= VAR_196 -> VAR_191 ) goto VAR_208 ; TYPE_22 TYPE_23 TYPE_24 ( ""[SSH]%s\\n"" , VAR_206 ) ; return ( VAR_207 ) ; VAR_208 : TYPE_25 TYPE_26 TYPE_27 ( ""[SSH]Invalidpacketpayload\\n"" ) ; return ( 0 ) ; }",251
252,"unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { unsigned TYPE_1 VAR_3 = VAR_4 -> VAR_5 ; static const TYPE_2 VAR_6 [ VAR_7 ] VAR_8 ( ( VAR_9 ( sizeof ( TYPE_3 ) ) ) ) ; unsigned TYPE_4 VAR_10 = VAR_11 ; const struct STRUCT_OR_UNION_3 * VAR_12 ; struct STRUCT_OR_UNION_4 * VAR_13 , * * VAR_14 ; const TYPE_5 * VAR_15 , * VAR_16 ; const TYPE_6 * VAR_17 ; unsigned TYPE_7 VAR_18 , VAR_19 = 0 ; const struct STRUCT_OR_UNION_5 * VAR_20 ; struct STRUCT_OR_UNION_6 VAR_21 ; unsigned TYPE_8 VAR_22 ; if ( ! METHOD_1 ( VAR_23 , METHOD_2 ( VAR_24 -> VAR_25 ) ) ) return VAR_26 ; VAR_27 = VAR_28 -> VAR_29 ? VAR_30 -> VAR_31 -> VAR_32 : VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ? VAR_37 -> VAR_38 -> VAR_39 : VAR_40 ; METHOD_3 ( ) ; VAR_41 = METHOD_4 ( ) ; VAR_42 = METHOD_5 ( VAR_43 -> VAR_44 ) ; VAR_45 = METHOD_6 ( ) ; VAR_46 = VAR_47 -> VAR_48 ; VAR_49 = ( struct STRUCT_OR_UNION_7 * * ) VAR_50 -> VAR_51 [ VAR_52 ] ; VAR_53 = METHOD_7 ( VAR_54 , VAR_55 -> VAR_56 [ VAR_57 ] ) ; VAR_58 . VAR_59 = VAR_60 ; VAR_61 . VAR_62 = VAR_63 ; VAR_64 = METHOD_8 ( VAR_65 ) ; do { const struct STRUCT_OR_UNION_8 * VAR_66 ; struct STRUCT_OR_UNION_9 * VAR_67 ; if ( ! METHOD_9 ( VAR_68 , VAR_69 -> VAR_70 , VAR_71 , VAR_72 , & VAR_73 -> VAR_74 ) ) { VAR_75 = METHOD_10 ( VAR_76 ) ; continue ; } VAR_77 = METHOD_11 ( & VAR_78 -> VAR_79 ) ; METHOD_12 ( * VAR_80 , METHOD_13 ( VAR_81 -> VAR_82 ) , 1 ) ; VAR_83 = METHOD_14 ( VAR_84 ) ; if ( ! VAR_85 -> VAR_86 . VAR_87 . METHOD_15 -> METHOD_16 ) { TYPE_9 VAR_88 ; VAR_89 = ( ( struct STRUCT_OR_UNION_10 * ) VAR_90 ) -> VAR_91 ; if ( VAR_92 < 0 ) { if ( VAR_93 != VAR_94 ) { VAR_95 = ( unsigned TYPE_10 ) ( - VAR_96 ) - 1 ; break ; } if ( VAR_97 == 0 ) { VAR_98 = METHOD_17 ( VAR_99 , VAR_100 -> VAR_101 [ VAR_102 ] ) ; } else { VAR_103 = VAR_104 [ -- VAR_105 ] ; VAR_106 = METHOD_18 ( VAR_107 ) ; } continue ; } if ( VAR_108 + VAR_109 != METHOD_19 ( VAR_110 ) ) {  VAR_111 [ VAR_112 ++ ] = VAR_113 ;  } VAR_114 = METHOD_20 ( VAR_115 , VAR_116 ) ; continue ; } VAR_117 . METHOD_21 = VAR_118 -> VAR_119 . VAR_120 . METHOD_22 ; VAR_121 . VAR_122 = VAR_123 -> VAR_124 ; VAR_125 = VAR_126 -> VAR_127 . VAR_128 . METHOD_23 -> METHOD_24 ( VAR_129 , & VAR_130 ) ; if ( VAR_131 == VAR_132 ) { VAR_133 = METHOD_25 ( VAR_134 ) ; VAR_135 = METHOD_26 ( VAR_136 ) ; } else { break ; } } while ( ! VAR_137 . VAR_138 ) ; METHOD_27 ( VAR_139 ) ; METHOD_28 ( ) ; if ( VAR_140 . VAR_141 ) return VAR_142 ; else return VAR_143 ; }","unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { unsigned TYPE_1 VAR_3 = VAR_4 -> VAR_5 ; static const TYPE_2 VAR_6 [ VAR_7 ] VAR_8 ( ( VAR_9 ( sizeof ( TYPE_3 ) ) ) ) ; unsigned TYPE_4 VAR_10 = VAR_11 ; const struct STRUCT_OR_UNION_3 * VAR_12 ; struct STRUCT_OR_UNION_4 * VAR_13 , * * VAR_14 ; const TYPE_5 * VAR_15 , * VAR_16 ; const TYPE_6 * VAR_17 ; unsigned TYPE_7 VAR_18 , VAR_19 = 0 ; const struct STRUCT_OR_UNION_5 * VAR_20 ; struct STRUCT_OR_UNION_6 VAR_21 ; unsigned TYPE_8 VAR_22 ; if ( ! METHOD_1 ( VAR_23 , METHOD_2 ( VAR_24 -> VAR_25 ) ) ) return VAR_26 ; VAR_27 = VAR_28 -> VAR_29 ? VAR_30 -> VAR_31 -> VAR_32 : VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ? VAR_37 -> VAR_38 -> VAR_39 : VAR_40 ; METHOD_3 ( ) ; VAR_41 = METHOD_4 ( ) ; VAR_42 = METHOD_5 ( VAR_43 -> VAR_44 ) ; VAR_45 = METHOD_6 ( ) ; VAR_46 = VAR_47 -> VAR_48 ; VAR_49 = ( struct STRUCT_OR_UNION_7 * * ) VAR_50 -> VAR_51 [ VAR_52 ] ; VAR_53 = METHOD_7 ( VAR_54 , VAR_55 -> VAR_56 [ VAR_57 ] ) ; VAR_58 . VAR_59 = VAR_60 ; VAR_61 . VAR_62 = VAR_63 ; VAR_64 = METHOD_8 ( VAR_65 ) ; do { const struct STRUCT_OR_UNION_8 * VAR_66 ; struct STRUCT_OR_UNION_9 * VAR_67 ; if ( ! METHOD_9 ( VAR_68 , VAR_69 -> VAR_70 , VAR_71 , VAR_72 , & VAR_73 -> VAR_74 ) ) { if ( METHOD_29 ( VAR_112 >= VAR_100 -> VAR_144 ) ) { VAR_143 = VAR_142 ; break ; } VAR_75 = METHOD_10 ( VAR_76 ) ; continue ; } VAR_77 = METHOD_11 ( & VAR_78 -> VAR_79 ) ; METHOD_12 ( * VAR_80 , METHOD_13 ( VAR_81 -> VAR_82 ) , 1 ) ; VAR_83 = METHOD_14 ( VAR_84 ) ; if ( ! VAR_85 -> VAR_86 . VAR_87 . METHOD_15 -> METHOD_16 ) { TYPE_9 VAR_88 ; VAR_89 = ( ( struct STRUCT_OR_UNION_10 * ) VAR_90 ) -> VAR_91 ; if ( VAR_92 < 0 ) { if ( VAR_93 != VAR_94 ) { VAR_95 = ( unsigned TYPE_10 ) ( - VAR_96 ) - 1 ; break ; } if ( VAR_97 == 0 ) { VAR_98 = METHOD_17 ( VAR_99 , VAR_100 -> VAR_101 [ VAR_102 ] ) ; } else { VAR_103 = VAR_104 [ -- VAR_105 ] ; VAR_106 = METHOD_18 ( VAR_107 ) ; } continue ; } if ( VAR_108 + VAR_109 != METHOD_19 ( VAR_110 ) ) { VAR_111 [ VAR_112 ++ ] = VAR_113 ; } VAR_114 = METHOD_20 ( VAR_115 , VAR_116 ) ; continue ; } VAR_117 . METHOD_21 = VAR_118 -> VAR_119 . VAR_120 . METHOD_22 ; VAR_121 . VAR_122 = VAR_123 -> VAR_124 ; VAR_125 = VAR_126 -> VAR_127 . VAR_128 . METHOD_23 -> METHOD_24 ( VAR_129 , & VAR_130 ) ; if ( VAR_131 == VAR_132 ) { VAR_133 = METHOD_25 ( VAR_134 ) ; VAR_135 = METHOD_26 ( VAR_136 ) ; } else { break ; } } while ( ! VAR_137 . VAR_138 ) ; METHOD_27 ( VAR_139 ) ; METHOD_28 ( ) ; if ( VAR_140 . VAR_141 ) return VAR_142 ; else return VAR_143 ; }",252
253,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ;  for ( VAR_5 = 0 ; VAR_6 <= VAR_7 - sizeof ( TYPE_6 ) ; VAR_8 += sizeof ( TYPE_7 ) ) {  TYPE_8 VAR_9 = * ( TYPE_9 * ) ( VAR_10 + VAR_11 ) ; TYPE_10 VAR_12 = * ( TYPE_11 * ) ( VAR_13 + VAR_14 ) ; * ( TYPE_12 * ) ( VAR_15 + VAR_16 ) = ( ( VAR_17 & VAR_18 ) + ( VAR_19 & VAR_20 ) ) ^ ( ( VAR_21 ^ VAR_22 ) & VAR_23 ) ; } for ( ; VAR_24 < VAR_25 ; VAR_26 ++ ) VAR_27 [ VAR_28 ] = VAR_29 [ VAR_30 ] + VAR_31 [ VAR_32 ] ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; for ( VAR_5 = 0 ; VAR_6 <= VAR_7 - sizeof ( TYPE_6 ) ; VAR_8 += sizeof ( TYPE_7 ) ) { TYPE_8 VAR_9 = * ( TYPE_9 * ) ( VAR_10 + VAR_11 ) ; TYPE_10 VAR_12 = * ( TYPE_11 * ) ( VAR_13 + VAR_14 ) ; * ( TYPE_12 * ) ( VAR_15 + VAR_16 ) = ( ( VAR_17 & VAR_18 ) + ( VAR_19 & VAR_20 ) ) ^ ( ( VAR_21 ^ VAR_22 ) & VAR_23 ) ; } for ( ; VAR_24 < VAR_25 ; VAR_26 ++ ) VAR_27 [ VAR_28 ] = VAR_29 [ VAR_30 ] + VAR_31 [ VAR_32 ] ; }",253
254,"static TYPE_0 METHOD_0 ( unsigned VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 ; TYPE_1 TYPE_2 VAR_2 ( TYPE_3 ( VAR_3 ) , METHOD_1 ( 0 ) ) ; VAR_4 = METHOD_2 ( sizeof ( * VAR_5 ) , VAR_6 ) ; if ( VAR_7 == VAR_8 ) METHOD_3 ( ""UnabletoallocatemetadataforIRQ%d\\n"" , VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = - 1 ; METHOD_4 ( VAR_15 , VAR_16 ) ;  METHOD_5 ( & VAR_17 -> VAR_18 , & VAR_19 ) ;  }","static TYPE_0 METHOD_0 ( unsigned VAR_0 ) { struct STRUCT_OR_UNION_0 * VAR_1 ; TYPE_1 TYPE_2 VAR_2 ( TYPE_3 ( VAR_3 ) , METHOD_1 ( 0 ) ) ; VAR_4 = METHOD_2 ( sizeof ( * VAR_5 ) , VAR_6 ) ; if ( VAR_7 == VAR_8 ) METHOD_3 ( ""UnabletoallocatemetadataforIRQ%d\\n"" , VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = - 1 ; METHOD_4 ( VAR_15 , VAR_16 ) ; METHOD_5 ( & VAR_17 -> VAR_18 , & VAR_19 ) ; }",254
255,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  const TYPE_3 * const VAR_2 = & VAR_3 -> VAR_4 ;  const TYPE_4 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_5 * const VAR_8 = & VAR_9 -> VAR_10 ; if ( ! VAR_11 -> VAR_12 ) { VAR_13 -> VAR_14 -= VAR_15 ; } else {  VAR_16 -> VAR_17 += VAR_18 -> VAR_19 - VAR_20 ;  }  VAR_21 -> VAR_22 = METHOD_1 ( VAR_23 -> VAR_24 , VAR_25 -> VAR_26 ) ;  VAR_27 -> VAR_28 = VAR_29 -> VAR_30 ;  if ( VAR_31 -> VAR_32 && VAR_33 -> VAR_34 . VAR_35 == VAR_36 ) {  METHOD_2 ( & VAR_37 -> VAR_38 , VAR_39 ) ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { const TYPE_3 * const VAR_2 = & VAR_3 -> VAR_4 ; const TYPE_4 * VAR_5 = & VAR_6 -> VAR_7 ; TYPE_5 * const VAR_8 = & VAR_9 -> VAR_10 ; if ( METHOD_3 ( VAR_37 ) ) { METHOD_2 ( & VAR_37 -> VAR_38 , VAR_39 ) ; } }",255
256,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 ; TYPE_13 VAR_27 , VAR_28 ; TYPE_14 VAR_29 ; unsigned TYPE_15 * VAR_30 , * VAR_31 ; METHOD_1 ( VAR_32 != ( const TYPE_16 * ) VAR_33 ) ; METHOD_2 ( VAR_34 -> VAR_35 == VAR_36 ) ; if ( VAR_37 -> VAR_38 != VAR_39 ) ( TYPE_17 ) METHOD_3 ( VAR_40 , METHOD_4 ( ) , ""%s"" , VAR_41 -> VAR_42 ) ; METHOD_5 ( VAR_43 != ( TYPE_18 * ) VAR_44 ) ; METHOD_6 ( VAR_45 -> VAR_46 == VAR_47 ) ; VAR_48 = METHOD_7 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_9 ( VAR_59 ) ; return ( ( TYPE_19 * ) VAR_60 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_61 , 0 , sizeof ( VAR_62 ) ) ; VAR_63 . VAR_64 = METHOD_11 ( VAR_65 ) ; do { if ( VAR_66 . VAR_67 != 0x59a66a95 ) METHOD_12 ( VAR_68 , ""ImproperImageHeader"" ) ; VAR_69 . VAR_70 = METHOD_13 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_14 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_15 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_16 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_17 ( VAR_83 ) ; VAR_84 . VAR_85 = METHOD_18 ( VAR_86 ) ; VAR_87 . VAR_88 = METHOD_19 ( VAR_89 ) ; VAR_90 = VAR_91 . VAR_92 * VAR_93 . VAR_94 ; if ( ( VAR_95 . VAR_96 != 0 ) && ( VAR_97 . VAR_98 != VAR_99 / VAR_100 . VAR_101 ) ) METHOD_20 ( VAR_102 , ""ImproperImageHeader"" ) ; if ( ( VAR_103 . VAR_104 != VAR_105 ) && ( VAR_106 . VAR_107 != VAR_108 ) && ( VAR_109 . VAR_110 != VAR_111 ) ) METHOD_21 ( VAR_112 , ""ImproperImageHeader"" ) ; if ( ( VAR_113 . VAR_114 == VAR_115 ) && ( VAR_116 . VAR_117 != 0 ) ) METHOD_22 ( VAR_118 , ""ImproperImageHeader"" ) ; if ( ( VAR_119 . VAR_120 == 0 ) || ( VAR_121 . VAR_122 > 32 ) ) METHOD_23 ( VAR_123 , ""ImproperImageHeader"" ) ; if ( ( VAR_124 . VAR_125 != VAR_126 ) && ( VAR_127 . VAR_128 != VAR_129 ) && ( VAR_130 . VAR_131 != VAR_132 ) ) METHOD_24 ( VAR_133 , ""ColormapTypeNotSupported"" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = VAR_144 . VAR_145 <= 8 ? VAR_146 . VAR_147 : VAR_148 ; if ( VAR_149 . VAR_150 < 24 ) { TYPE_21 VAR_151 ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = VAR_157 . VAR_158 ; VAR_159 = 1 ; if ( VAR_160 . VAR_161 == VAR_162 ) VAR_163 -> VAR_164 = VAR_165 << VAR_166 . VAR_167 ; if ( VAR_168 . VAR_169 == VAR_170 ) VAR_171 -> VAR_172 = VAR_173 . VAR_174 / 3 ; } switch ( VAR_175 . VAR_176 ) { case VAR_177 : { if ( VAR_178 . VAR_179 < 24 ) { if ( METHOD_25 ( VAR_180 , VAR_181 -> VAR_182 , VAR_183 ) == VAR_184 ) METHOD_26 ( VAR_185 , ""MemoryAllocationFailed"" ) ; } break ; } case VAR_186 : { unsigned TYPE_22 * VAR_187 ; if ( METHOD_27 ( VAR_188 , VAR_189 -> VAR_190 , VAR_191 ) == VAR_192 ) METHOD_28 ( VAR_193 , ""MemoryAllocationFailed"" ) ; VAR_194 = ( unsigned TYPE_23 * ) METHOD_29 ( VAR_195 -> VAR_196 , sizeof ( * VAR_197 ) ) ; if ( VAR_198 == ( unsigned TYPE_24 * ) VAR_199 ) METHOD_30 ( VAR_200 , ""MemoryAllocationFailed"" ) ; VAR_201 = METHOD_31 ( VAR_202 , VAR_203 -> VAR_204 , VAR_205 ) ; if ( VAR_206 != ( TYPE_25 ) VAR_207 -> VAR_208 ) METHOD_32 ( VAR_209 , ""UnexpectedEndOfFile"" ) ; for ( VAR_210 = 0 ; VAR_211 < ( TYPE_26 ) VAR_212 -> VAR_213 ; VAR_214 ++ ) VAR_215 -> VAR_216 [ VAR_217 ] . VAR_218 = ( TYPE_27 ) METHOD_33 ( VAR_219 [ VAR_220 ] ) ; VAR_221 = METHOD_34 ( VAR_222 , VAR_223 -> VAR_224 , VAR_225 ) ; if ( VAR_226 != ( TYPE_28 ) VAR_227 -> VAR_228 ) METHOD_35 ( VAR_229 , ""UnexpectedEndOfFile"" ) ; for ( VAR_230 = 0 ; VAR_231 < ( TYPE_29 ) VAR_232 -> VAR_233 ; VAR_234 ++ ) VAR_235 -> VAR_236 [ VAR_237 ] . VAR_238 = ( TYPE_30 ) METHOD_36 ( VAR_239 [ VAR_240 ] ) ; VAR_241 = METHOD_37 ( VAR_242 , VAR_243 -> VAR_244 , VAR_245 ) ; if ( VAR_246 != ( TYPE_31 ) VAR_247 -> VAR_248 ) METHOD_38 ( VAR_249 , ""UnexpectedEndOfFile"" ) ; for ( VAR_250 = 0 ; VAR_251 < ( TYPE_32 ) VAR_252 -> VAR_253 ; VAR_254 ++ ) VAR_255 -> VAR_256 [ VAR_257 ] . VAR_258 = ( TYPE_33 ) METHOD_39 ( VAR_259 [ VAR_260 ] ) ; VAR_261 = ( unsigned TYPE_34 * ) METHOD_40 ( VAR_262 ) ; break ; } case VAR_263 : { unsigned TYPE_35 * VAR_264 ; VAR_265 = ( unsigned TYPE_36 * ) METHOD_41 ( VAR_266 . VAR_267 , sizeof ( * VAR_268 ) ) ; if ( VAR_269 == ( unsigned TYPE_37 * ) VAR_270 ) METHOD_42 ( VAR_271 , ""MemoryAllocationFailed"" ) ; VAR_272 = METHOD_43 ( VAR_273 , VAR_274 . VAR_275 , VAR_276 ) ; if ( VAR_277 != ( TYPE_38 ) VAR_278 . VAR_279 ) METHOD_44 ( VAR_280 , ""UnexpectedEndOfFile"" ) ; VAR_281 = ( unsigned TYPE_39 * ) METHOD_45 ( VAR_282 ) ; break ; } default : METHOD_46 ( VAR_283 , ""ColormapTypeNotSupported"" ) ; } VAR_284 -> VAR_285 = VAR_286 . VAR_287 == 32 ? VAR_288 : VAR_289 ; VAR_290 -> VAR_291 = VAR_292 . VAR_293 ; VAR_294 -> VAR_295 = VAR_296 . VAR_297 ; if ( VAR_298 -> VAR_299 != VAR_300 ) { ( TYPE_40 ) METHOD_47 ( VAR_301 ) ; return ( METHOD_48 ( VAR_302 ) ) ; } VAR_303 = METHOD_49 ( VAR_304 , VAR_305 -> VAR_306 , VAR_307 -> VAR_308 , VAR_309 ) ; if ( VAR_310 == VAR_311 ) return ( METHOD_50 ( VAR_312 ) ) ; if ( ( VAR_313 . VAR_314 * sizeof ( * VAR_315 ) ) / sizeof ( * VAR_316 ) != VAR_317 . VAR_318 || ! VAR_319 . VAR_320 ) METHOD_51 ( VAR_321 , ""MemoryAllocationFailed"" ) ; VAR_322 = ( TYPE_41 ) VAR_323 -> VAR_324 * VAR_325 -> VAR_326 ; if ( ( VAR_327 . VAR_328 != VAR_329 ) && ( VAR_330 . VAR_331 >= 8 ) && ( ( VAR_332 * ( ( VAR_333 . VAR_334 + 7 ) / 8 ) ) > VAR_335 . VAR_336 ) ) METHOD_52 ( VAR_337 , ""ImproperImageHeader"" ) ;  VAR_338 = ( unsigned TYPE_42 * ) METHOD_53 ( ( TYPE_43 ) VAR_339 . VAR_340 ,   sizeof ( * VAR_341 ) ) ;  if ( VAR_342 == ( unsigned TYPE_44 * ) VAR_343 ) METHOD_54 ( VAR_344 , ""MemoryAllocationFailed"" ) ; VAR_345 = ( TYPE_45 ) METHOD_55 ( VAR_346 , VAR_347 . VAR_348 , VAR_349 ) ; if ( VAR_350 != ( TYPE_46 ) VAR_351 . VAR_352 ) METHOD_56 ( VAR_353 , ""UnableToReadImageData"" ) ; VAR_354 = VAR_355 ; VAR_356 = 0 ; if ( VAR_357 . VAR_358 == VAR_359 ) { TYPE_47 VAR_360 ;  VAR_361 = VAR_362 . VAR_363 ;  VAR_364 = VAR_365 . VAR_366 * VAR_367 . VAR_368 ; if ( ( VAR_369 == 0 ) || ( VAR_370 . VAR_371 == 0 ) || ( VAR_372 . VAR_373 == 0 ) || ( ( VAR_374 / VAR_375 . VAR_376 ) != VAR_377 . VAR_378 ) ) METHOD_57 ( VAR_379 , ""MemoryAllocationFailed"" ) ; VAR_380 += 15 ; VAR_381 <<= 1 ; if ( ( VAR_382 >> 1 ) != ( VAR_383 . VAR_384 * VAR_385 . VAR_386 + 15 ) ) METHOD_58 ( VAR_387 , ""MemoryAllocationFailed"" ) ; VAR_388 >>= 4 ; VAR_389 = ( unsigned TYPE_48 * ) METHOD_59 ( VAR_390 , VAR_391 * sizeof ( * VAR_392 ) ) ; if ( VAR_393 == ( unsigned TYPE_49 * ) VAR_394 ) METHOD_60 ( VAR_395 , ""MemoryAllocationFailed"" ) ; ( TYPE_50 ) METHOD_61 ( VAR_396 , VAR_397 . VAR_398 , VAR_399 , VAR_400 * VAR_401 ) ; VAR_402 = ( unsigned TYPE_51 * ) METHOD_62 ( VAR_403 ) ; } VAR_404 = VAR_405 ; if ( VAR_406 . VAR_407 == 1 ) for ( VAR_408 = 0 ; VAR_409 < ( TYPE_52 ) VAR_410 -> VAR_411 ; VAR_412 ++ ) { VAR_413 = METHOD_63 ( VAR_414 , 0 , VAR_415 , VAR_416 -> VAR_417 , 1 , VAR_418 ) ; if ( VAR_419 == ( TYPE_53 * ) VAR_420 ) break ; for ( VAR_421 = 0 ; VAR_422 < ( ( TYPE_54 ) VAR_423 -> VAR_424 - 7 ) ; VAR_425 += 8 ) { for ( VAR_426 = 7 ; VAR_427 >= 0 ; VAR_428 -- ) { METHOD_64 ( VAR_429 , ( TYPE_55 ) ( ( * VAR_430 ) & ( 0x01 << VAR_431 ) ? 0x00 : 0x01 ) , VAR_432 ) ; VAR_433 += METHOD_65 ( VAR_434 ) ; } VAR_435 ++ ; } if ( ( VAR_436 -> VAR_437 % 8 ) != 0 ) { for ( VAR_438 = 7 ; VAR_439 >= ( TYPE_56 ) ( 8 - ( VAR_440 -> VAR_441 % 8 ) ) ; VAR_442 -- ) { METHOD_66 ( VAR_443 , ( TYPE_57 ) ( ( * VAR_444 ) & ( 0x01 << VAR_445 ) ? 0x00 : 0x01 ) , VAR_446 ) ; VAR_447 += METHOD_67 ( VAR_448 ) ; } VAR_449 ++ ; } if ( ( ( ( VAR_450 -> VAR_451 / 8 ) + ( VAR_452 -> VAR_453 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_454 ++ ; if ( METHOD_68 ( VAR_455 , VAR_456 ) == VAR_457 ) break ; if ( VAR_458 -> VAR_459 == ( TYPE_58 * ) VAR_460 ) { VAR_461 = METHOD_69 ( VAR_462 , VAR_463 , ( TYPE_59 ) VAR_464 , VAR_465 -> VAR_466 ) ; if ( VAR_467 == VAR_468 ) break ; } } else if ( VAR_469 -> VAR_470 == VAR_471 ) { if ( VAR_472 == 0 ) VAR_473 = VAR_474 -> VAR_475 ; VAR_476 = VAR_477 -> VAR_478 * ( VAR_479 -> VAR_480 + VAR_481 -> VAR_482 % 2 ) ; if ( ( ( VAR_483 . VAR_484 == VAR_485 ) && ( VAR_486 > ( VAR_487 * VAR_488 -> VAR_489 ) ) ) || ( ( VAR_490 . VAR_491 != VAR_492 ) && ( VAR_493 > VAR_494 . VAR_495 ) ) ) METHOD_70 ( VAR_496 , ""UnableToReadImageData"" ) ; for ( VAR_497 = 0 ; VAR_498 < ( TYPE_60 ) VAR_499 -> VAR_500 ; VAR_501 ++ ) { VAR_502 = METHOD_71 ( VAR_503 , 0 , VAR_504 , VAR_505 -> VAR_506 , 1 , VAR_507 ) ; if ( VAR_508 == ( TYPE_61 * ) VAR_509 ) break ; for ( VAR_510 = 0 ; VAR_511 < ( TYPE_62 ) VAR_512 -> VAR_513 ; VAR_514 ++ ) { METHOD_72 ( VAR_515 , * VAR_516 ++ , VAR_517 ) ; VAR_518 += METHOD_73 ( VAR_519 ) ; } if ( ( VAR_520 -> VAR_521 % 2 ) != 0 ) VAR_522 ++ ; if ( METHOD_74 ( VAR_523 , VAR_524 ) == VAR_525 ) break ; if ( VAR_526 -> VAR_527 == ( TYPE_63 * ) VAR_528 ) { VAR_529 = METHOD_75 ( VAR_530 , VAR_531 , ( TYPE_64 ) VAR_532 , VAR_533 -> VAR_534 ) ; if ( VAR_535 == VAR_536 ) break ; } } } else { TYPE_65 VAR_537 ; VAR_538 = 3 ; if ( VAR_539 -> VAR_540 != VAR_541 ) VAR_542 ++ ; if ( VAR_543 == 0 ) VAR_544 = VAR_545 * VAR_546 -> VAR_547 ; VAR_548 = VAR_549 -> VAR_550 * ( VAR_551 + VAR_552 -> VAR_553 % 2 ) ; if ( ( ( VAR_554 . VAR_555 == VAR_556 ) && ( VAR_557 > ( VAR_558 * VAR_559 -> VAR_560 ) ) ) || ( ( VAR_561 . VAR_562 != VAR_563 ) && ( VAR_564 > VAR_565 . VAR_566 ) ) ) METHOD_76 ( VAR_567 , ""UnableToReadImageData"" ) ; for ( VAR_568 = 0 ; VAR_569 < ( TYPE_66 ) VAR_570 -> VAR_571 ; VAR_572 ++ ) { VAR_573 = METHOD_77 ( VAR_574 , 0 , VAR_575 , VAR_576 -> VAR_577 , 1 , VAR_578 ) ; if ( VAR_579 == ( TYPE_67 * ) VAR_580 ) break ; for ( VAR_581 = 0 ; VAR_582 < ( TYPE_68 ) VAR_583 -> VAR_584 ; VAR_585 ++ ) { if ( VAR_586 -> VAR_587 != VAR_588 ) METHOD_78 ( VAR_589 , METHOD_79 ( * VAR_590 ++ ) , VAR_591 ) ; if ( VAR_592 . VAR_593 == VAR_594 ) { METHOD_80 ( VAR_595 , METHOD_81 ( * VAR_596 ++ ) , VAR_597 ) ; METHOD_82 ( VAR_598 , METHOD_83 ( * VAR_599 ++ ) , VAR_600 ) ; METHOD_84 ( VAR_601 , METHOD_85 ( * VAR_602 ++ ) , VAR_603 ) ; } else { METHOD_86 ( VAR_604 , METHOD_87 ( * VAR_605 ++ ) , VAR_606 ) ; METHOD_88 ( VAR_607 , METHOD_89 ( * VAR_608 ++ ) , VAR_609 ) ; METHOD_90 ( VAR_610 , METHOD_91 ( * VAR_611 ++ ) , VAR_612 ) ; } if ( VAR_613 -> VAR_614 != 0 ) { METHOD_92 ( VAR_615 , METHOD_93 ( VAR_616 -> VAR_617 [ ( TYPE_69 ) METHOD_94 ( VAR_618 , VAR_619 ) ] . VAR_620 ) , VAR_621 ) ; METHOD_95 ( VAR_622 , METHOD_96 ( VAR_623 -> VAR_624 [ ( TYPE_70 ) METHOD_97 ( VAR_625 , VAR_626 ) ] . VAR_627 ) , VAR_628 ) ; METHOD_98 ( VAR_629 , METHOD_99 ( VAR_630 -> VAR_631 [ ( TYPE_71 ) METHOD_100 ( VAR_632 , VAR_633 ) ] . VAR_634 ) , VAR_635 ) ; } VAR_636 += METHOD_101 ( VAR_637 ) ; } if ( ( ( VAR_638 * VAR_639 -> VAR_640 ) % 2 ) != 0 ) VAR_641 ++ ; if ( METHOD_102 ( VAR_642 , VAR_643 ) == VAR_644 ) break ; if ( VAR_645 -> VAR_646 == ( TYPE_72 * ) VAR_647 ) { VAR_648 = METHOD_103 ( VAR_649 , VAR_650 , ( TYPE_73 ) VAR_651 , VAR_652 -> VAR_653 ) ; if ( VAR_654 == VAR_655 ) break ; } } } if ( VAR_656 -> VAR_657 == VAR_658 ) ( TYPE_74 ) METHOD_104 ( VAR_659 , VAR_660 ) ; VAR_661 = ( unsigned TYPE_75 * ) METHOD_105 ( VAR_662 ) ; if ( METHOD_106 ( VAR_663 ) != VAR_664 ) { METHOD_107 ( VAR_665 , VAR_666 , ""UnexpectedEndOfFile"" , VAR_667 -> VAR_668 ) ; break ; } if ( VAR_669 -> VAR_670 != 0 ) if ( VAR_671 -> VAR_672 >= ( VAR_673 -> VAR_674 + VAR_675 -> VAR_676 - 1 ) ) break ; VAR_677 . VAR_678 = METHOD_108 ( VAR_679 ) ; if ( VAR_680 . VAR_681 == 0x59a66a95 ) { METHOD_109 ( VAR_682 , VAR_683 , VAR_684 ) ; if ( METHOD_110 ( VAR_685 ) == ( TYPE_76 * ) VAR_686 ) { VAR_687 = METHOD_111 ( VAR_688 ) ; return ( ( TYPE_77 * ) VAR_689 ) ; } VAR_690 = METHOD_112 ( VAR_691 ) ; VAR_692 = METHOD_113 ( VAR_693 , VAR_694 , METHOD_114 ( VAR_695 ) , METHOD_115 ( VAR_696 ) ) ; if ( VAR_697 == VAR_698 ) break ; } } while ( VAR_699 . VAR_700 == 0x59a66a95 ) ; ( TYPE_78 ) METHOD_116 ( VAR_701 ) ; return ( METHOD_117 ( VAR_702 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 ; TYPE_13 VAR_27 , VAR_28 ; TYPE_14 VAR_29 ; unsigned TYPE_15 * VAR_30 , * VAR_31 ; METHOD_1 ( VAR_32 != ( const TYPE_16 * ) VAR_33 ) ; METHOD_2 ( VAR_34 -> VAR_35 == VAR_36 ) ; if ( VAR_37 -> VAR_38 != VAR_39 ) ( TYPE_17 ) METHOD_3 ( VAR_40 , METHOD_4 ( ) , ""%s"" , VAR_41 -> VAR_42 ) ; METHOD_5 ( VAR_43 != ( TYPE_18 * ) VAR_44 ) ; METHOD_6 ( VAR_45 -> VAR_46 == VAR_47 ) ; VAR_48 = METHOD_7 ( VAR_49 , VAR_50 ) ; VAR_51 = METHOD_8 ( VAR_52 , VAR_53 , VAR_54 , VAR_55 ) ; if ( VAR_56 == VAR_57 ) { VAR_58 = METHOD_9 ( VAR_59 ) ; return ( ( TYPE_19 * ) VAR_60 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_61 , 0 , sizeof ( VAR_62 ) ) ; VAR_63 . VAR_64 = METHOD_11 ( VAR_65 ) ; do { if ( VAR_66 . VAR_67 != 0x59a66a95 ) METHOD_12 ( VAR_68 , ""ImproperImageHeader"" ) ; VAR_558 = VAR_699 . VAR_384 * VAR_699 . VAR_407 ; VAR_69 . VAR_70 = METHOD_13 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_14 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_15 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_16 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_17 ( VAR_83 ) ; VAR_84 . VAR_85 = METHOD_18 ( VAR_86 ) ; VAR_87 . VAR_88 = METHOD_19 ( VAR_89 ) ; VAR_90 = VAR_91 . VAR_92 * VAR_93 . VAR_94 ; if ( ( VAR_95 . VAR_96 != 0 ) && ( VAR_97 . VAR_98 != VAR_99 / VAR_100 . VAR_101 ) ) METHOD_20 ( VAR_102 , ""ImproperImageHeader"" ) ; if ( ( VAR_103 . VAR_104 != VAR_105 ) && ( VAR_106 . VAR_107 != VAR_108 ) && ( VAR_109 . VAR_110 != VAR_111 ) ) METHOD_21 ( VAR_112 , ""ImproperImageHeader"" ) ; if ( ( VAR_113 . VAR_114 == VAR_115 ) && ( VAR_116 . VAR_117 != 0 ) ) METHOD_22 ( VAR_118 , ""ImproperImageHeader"" ) ; if ( ( VAR_119 . VAR_120 == 0 ) || ( VAR_121 . VAR_122 > 32 ) ) METHOD_23 ( VAR_123 , ""ImproperImageHeader"" ) ; if ( ( VAR_124 . VAR_125 != VAR_126 ) && ( VAR_127 . VAR_128 != VAR_129 ) && ( VAR_130 . VAR_131 != VAR_132 ) ) METHOD_24 ( VAR_133 , ""ColormapTypeNotSupported"" ) ; VAR_134 -> VAR_135 = VAR_136 . VAR_137 ; VAR_138 -> VAR_139 = VAR_140 . VAR_141 ; VAR_142 -> VAR_143 = VAR_144 . VAR_145 <= 8 ? VAR_146 . VAR_147 : VAR_148 ; if ( VAR_149 . VAR_150 < 24 ) { TYPE_21 VAR_151 ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = VAR_157 . VAR_158 ; VAR_159 = 1 ; if ( VAR_160 . VAR_161 == VAR_162 ) VAR_163 -> VAR_164 = VAR_165 << VAR_166 . VAR_167 ; if ( VAR_168 . VAR_169 == VAR_170 ) VAR_171 -> VAR_172 = VAR_173 . VAR_174 / 3 ; } switch ( VAR_175 . VAR_176 ) { case VAR_177 : { if ( VAR_178 . VAR_179 < 24 ) { if ( METHOD_25 ( VAR_180 , VAR_181 -> VAR_182 , VAR_183 ) == VAR_184 ) METHOD_26 ( VAR_185 , ""MemoryAllocationFailed"" ) ; } break ; } case VAR_186 : { unsigned TYPE_22 * VAR_187 ; if ( METHOD_27 ( VAR_188 , VAR_189 -> VAR_190 , VAR_191 ) == VAR_192 ) METHOD_28 ( VAR_193 , ""MemoryAllocationFailed"" ) ; VAR_194 = ( unsigned TYPE_23 * ) METHOD_29 ( VAR_195 -> VAR_196 , sizeof ( * VAR_197 ) ) ; if ( VAR_198 == ( unsigned TYPE_24 * ) VAR_199 ) METHOD_30 ( VAR_200 , ""MemoryAllocationFailed"" ) ; VAR_201 = METHOD_31 ( VAR_202 , VAR_203 -> VAR_204 , VAR_205 ) ; if ( VAR_206 != ( TYPE_25 ) VAR_207 -> VAR_208 ) METHOD_32 ( VAR_209 , ""UnexpectedEndOfFile"" ) ; for ( VAR_210 = 0 ; VAR_211 < ( TYPE_26 ) VAR_212 -> VAR_213 ; VAR_214 ++ ) VAR_215 -> VAR_216 [ VAR_217 ] . VAR_218 = ( TYPE_27 ) METHOD_33 ( VAR_219 [ VAR_220 ] ) ; VAR_221 = METHOD_34 ( VAR_222 , VAR_223 -> VAR_224 , VAR_225 ) ; if ( VAR_226 != ( TYPE_28 ) VAR_227 -> VAR_228 ) METHOD_35 ( VAR_229 , ""UnexpectedEndOfFile"" ) ; for ( VAR_230 = 0 ; VAR_231 < ( TYPE_29 ) VAR_232 -> VAR_233 ; VAR_234 ++ ) VAR_235 -> VAR_236 [ VAR_237 ] . VAR_238 = ( TYPE_30 ) METHOD_36 ( VAR_239 [ VAR_240 ] ) ; VAR_241 = METHOD_37 ( VAR_242 , VAR_243 -> VAR_244 , VAR_245 ) ; if ( VAR_246 != ( TYPE_31 ) VAR_247 -> VAR_248 ) METHOD_38 ( VAR_249 , ""UnexpectedEndOfFile"" ) ; for ( VAR_250 = 0 ; VAR_251 < ( TYPE_32 ) VAR_252 -> VAR_253 ; VAR_254 ++ ) VAR_255 -> VAR_256 [ VAR_257 ] . VAR_258 = ( TYPE_33 ) METHOD_39 ( VAR_259 [ VAR_260 ] ) ; VAR_261 = ( unsigned TYPE_34 * ) METHOD_40 ( VAR_262 ) ; break ; } case VAR_263 : { unsigned TYPE_35 * VAR_264 ; VAR_265 = ( unsigned TYPE_36 * ) METHOD_41 ( VAR_266 . VAR_267 , sizeof ( * VAR_268 ) ) ; if ( VAR_269 == ( unsigned TYPE_37 * ) VAR_270 ) METHOD_42 ( VAR_271 , ""MemoryAllocationFailed"" ) ; VAR_272 = METHOD_43 ( VAR_273 , VAR_274 . VAR_275 , VAR_276 ) ; if ( VAR_277 != ( TYPE_38 ) VAR_278 . VAR_279 ) METHOD_44 ( VAR_280 , ""UnexpectedEndOfFile"" ) ; VAR_281 = ( unsigned TYPE_39 * ) METHOD_45 ( VAR_282 ) ; break ; } default : METHOD_46 ( VAR_283 , ""ColormapTypeNotSupported"" ) ; } VAR_284 -> VAR_285 = VAR_286 . VAR_287 == 32 ? VAR_288 : VAR_289 ; VAR_290 -> VAR_291 = VAR_292 . VAR_293 ; VAR_294 -> VAR_295 = VAR_296 . VAR_297 ; if ( VAR_298 -> VAR_299 != VAR_300 ) { ( TYPE_40 ) METHOD_47 ( VAR_301 ) ; return ( METHOD_48 ( VAR_302 ) ) ; } VAR_303 = METHOD_49 ( VAR_304 , VAR_305 -> VAR_306 , VAR_307 -> VAR_308 , VAR_309 ) ; if ( VAR_310 == VAR_311 ) return ( METHOD_50 ( VAR_312 ) ) ; if ( ( VAR_313 . VAR_314 * sizeof ( * VAR_315 ) ) / sizeof ( * VAR_316 ) != VAR_317 . VAR_318 || ! VAR_319 . VAR_320 ) METHOD_51 ( VAR_321 , ""MemoryAllocationFailed"" ) ; VAR_322 = ( TYPE_41 ) VAR_323 -> VAR_324 * VAR_325 -> VAR_326 ; if ( ( VAR_327 . VAR_328 != VAR_329 ) && ( VAR_330 . VAR_331 >= 8 ) && ( ( VAR_332 * ( ( VAR_333 . VAR_334 + 7 ) / 8 ) ) > VAR_335 . VAR_336 ) ) METHOD_52 ( VAR_337 , ""ImproperImageHeader"" ) ; VAR_338 = ( unsigned TYPE_42 * ) METHOD_53 ( ( TYPE_43 ) VAR_339 . VAR_340 , sizeof ( * VAR_341 ) ) ; if ( VAR_342 == ( unsigned TYPE_44 * ) VAR_343 ) METHOD_54 ( VAR_344 , ""MemoryAllocationFailed"" ) ; VAR_345 = ( TYPE_45 ) METHOD_55 ( VAR_346 , VAR_347 . VAR_348 , VAR_349 ) ; if ( VAR_350 != ( TYPE_46 ) VAR_351 . VAR_352 ) METHOD_56 ( VAR_353 , ""UnableToReadImageData"" ) ; VAR_354 = VAR_355 ; VAR_356 = 0 ; if ( VAR_357 . VAR_358 == VAR_359 ) { TYPE_47 VAR_360 ; VAR_361 = VAR_362 . VAR_363 ; VAR_364 = VAR_365 . VAR_366 * VAR_367 . VAR_368 ; if ( ( VAR_369 == 0 ) || ( VAR_370 . VAR_371 == 0 ) || ( VAR_372 . VAR_373 == 0 ) || ( ( VAR_374 / VAR_375 . VAR_376 ) != VAR_377 . VAR_378 ) ) METHOD_57 ( VAR_379 , ""MemoryAllocationFailed"" ) ; VAR_380 += 15 ; VAR_381 <<= 1 ; if ( ( VAR_382 >> 1 ) != ( VAR_383 . VAR_384 * VAR_385 . VAR_386 + 15 ) ) METHOD_58 ( VAR_387 , ""MemoryAllocationFailed"" ) ; VAR_388 >>= 4 ; VAR_389 = ( unsigned TYPE_48 * ) METHOD_59 ( VAR_390 , VAR_391 * sizeof ( * VAR_392 ) ) ; if ( VAR_393 == ( unsigned TYPE_49 * ) VAR_394 ) METHOD_60 ( VAR_395 , ""MemoryAllocationFailed"" ) ; ( TYPE_50 ) METHOD_61 ( VAR_396 , VAR_397 . VAR_398 , VAR_399 , VAR_400 * VAR_401 ) ; VAR_402 = ( unsigned TYPE_51 * ) METHOD_62 ( VAR_403 ) ; } VAR_404 = VAR_405 ; if ( VAR_406 . VAR_407 == 1 ) for ( VAR_408 = 0 ; VAR_409 < ( TYPE_52 ) VAR_410 -> VAR_411 ; VAR_412 ++ ) { VAR_413 = METHOD_63 ( VAR_414 , 0 , VAR_415 , VAR_416 -> VAR_417 , 1 , VAR_418 ) ; if ( VAR_419 == ( TYPE_53 * ) VAR_420 ) break ; for ( VAR_421 = 0 ; VAR_422 < ( ( TYPE_54 ) VAR_423 -> VAR_424 - 7 ) ; VAR_425 += 8 ) { for ( VAR_426 = 7 ; VAR_427 >= 0 ; VAR_428 -- ) { METHOD_64 ( VAR_429 , ( TYPE_55 ) ( ( * VAR_430 ) & ( 0x01 << VAR_431 ) ? 0x00 : 0x01 ) , VAR_432 ) ; VAR_433 += METHOD_65 ( VAR_434 ) ; } VAR_435 ++ ; } if ( ( VAR_436 -> VAR_437 % 8 ) != 0 ) { for ( VAR_438 = 7 ; VAR_439 >= ( TYPE_56 ) ( 8 - ( VAR_440 -> VAR_441 % 8 ) ) ; VAR_442 -- ) { METHOD_66 ( VAR_443 , ( TYPE_57 ) ( ( * VAR_444 ) & ( 0x01 << VAR_445 ) ? 0x00 : 0x01 ) , VAR_446 ) ; VAR_447 += METHOD_67 ( VAR_448 ) ; } VAR_449 ++ ; } if ( ( ( ( VAR_450 -> VAR_451 / 8 ) + ( VAR_452 -> VAR_453 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_454 ++ ; if ( METHOD_68 ( VAR_455 , VAR_456 ) == VAR_457 ) break ; if ( VAR_458 -> VAR_459 == ( TYPE_58 * ) VAR_460 ) { VAR_461 = METHOD_69 ( VAR_462 , VAR_463 , ( TYPE_59 ) VAR_464 , VAR_465 -> VAR_466 ) ; if ( VAR_467 == VAR_468 ) break ; } } else if ( VAR_469 -> VAR_470 == VAR_471 ) { if ( VAR_472 == 0 ) VAR_473 = VAR_474 -> VAR_475 ; VAR_476 = VAR_477 -> VAR_478 * ( VAR_479 -> VAR_480 + VAR_481 -> VAR_482 % 2 ) ; if ( ( ( VAR_483 . VAR_484 == VAR_485 ) && ( VAR_486 > ( VAR_487 * VAR_488 -> VAR_489 ) ) ) || ( ( VAR_490 . VAR_491 != VAR_492 ) && ( VAR_493 > VAR_494 . VAR_495 ) ) ) METHOD_70 ( VAR_496 , ""UnableToReadImageData"" ) ; for ( VAR_497 = 0 ; VAR_498 < ( TYPE_60 ) VAR_499 -> VAR_500 ; VAR_501 ++ ) { VAR_502 = METHOD_71 ( VAR_503 , 0 , VAR_504 , VAR_505 -> VAR_506 , 1 , VAR_507 ) ; if ( VAR_508 == ( TYPE_61 * ) VAR_509 ) break ; for ( VAR_510 = 0 ; VAR_511 < ( TYPE_62 ) VAR_512 -> VAR_513 ; VAR_514 ++ ) { METHOD_72 ( VAR_515 , * VAR_516 ++ , VAR_517 ) ; VAR_518 += METHOD_73 ( VAR_519 ) ; } if ( ( VAR_520 -> VAR_521 % 2 ) != 0 ) VAR_522 ++ ; if ( METHOD_74 ( VAR_523 , VAR_524 ) == VAR_525 ) break ; if ( VAR_526 -> VAR_527 == ( TYPE_63 * ) VAR_528 ) { VAR_529 = METHOD_75 ( VAR_530 , VAR_531 , ( TYPE_64 ) VAR_532 , VAR_533 -> VAR_534 ) ; if ( VAR_535 == VAR_536 ) break ; } } } else { TYPE_65 VAR_537 ; VAR_538 = 3 ; if ( VAR_539 -> VAR_540 != VAR_541 ) VAR_542 ++ ; if ( VAR_543 == 0 ) VAR_544 = VAR_545 * VAR_546 -> VAR_547 ; VAR_548 = VAR_549 -> VAR_550 * ( VAR_551 + VAR_552 -> VAR_553 % 2 ) ; if ( ( ( VAR_554 . VAR_555 == VAR_556 ) && ( VAR_557 > ( VAR_558 * VAR_559 -> VAR_560 ) ) ) || ( ( VAR_561 . VAR_562 != VAR_563 ) && ( VAR_564 > VAR_565 . VAR_566 ) ) ) METHOD_76 ( VAR_567 , ""UnableToReadImageData"" ) ; for ( VAR_568 = 0 ; VAR_569 < ( TYPE_66 ) VAR_570 -> VAR_571 ; VAR_572 ++ ) { VAR_573 = METHOD_77 ( VAR_574 , 0 , VAR_575 , VAR_576 -> VAR_577 , 1 , VAR_578 ) ; if ( VAR_579 == ( TYPE_67 * ) VAR_580 ) break ; for ( VAR_581 = 0 ; VAR_582 < ( TYPE_68 ) VAR_583 -> VAR_584 ; VAR_585 ++ ) { if ( VAR_586 -> VAR_587 != VAR_588 ) METHOD_78 ( VAR_589 , METHOD_79 ( * VAR_590 ++ ) , VAR_591 ) ; if ( VAR_592 . VAR_593 == VAR_594 ) { METHOD_80 ( VAR_595 , METHOD_81 ( * VAR_596 ++ ) , VAR_597 ) ; METHOD_82 ( VAR_598 , METHOD_83 ( * VAR_599 ++ ) , VAR_600 ) ; METHOD_84 ( VAR_601 , METHOD_85 ( * VAR_602 ++ ) , VAR_603 ) ; } else { METHOD_86 ( VAR_604 , METHOD_87 ( * VAR_605 ++ ) , VAR_606 ) ; METHOD_88 ( VAR_607 , METHOD_89 ( * VAR_608 ++ ) , VAR_609 ) ; METHOD_90 ( VAR_610 , METHOD_91 ( * VAR_611 ++ ) , VAR_612 ) ; } if ( VAR_613 -> VAR_614 != 0 ) { METHOD_92 ( VAR_615 , METHOD_93 ( VAR_616 -> VAR_617 [ ( TYPE_69 ) METHOD_94 ( VAR_618 , VAR_619 ) ] . VAR_620 ) , VAR_621 ) ; METHOD_95 ( VAR_622 , METHOD_96 ( VAR_623 -> VAR_624 [ ( TYPE_70 ) METHOD_97 ( VAR_625 , VAR_626 ) ] . VAR_627 ) , VAR_628 ) ; METHOD_98 ( VAR_629 , METHOD_99 ( VAR_630 -> VAR_631 [ ( TYPE_71 ) METHOD_100 ( VAR_632 , VAR_633 ) ] . VAR_634 ) , VAR_635 ) ; } VAR_636 += METHOD_101 ( VAR_637 ) ; } if ( ( ( VAR_638 * VAR_639 -> VAR_640 ) % 2 ) != 0 ) VAR_641 ++ ; if ( METHOD_102 ( VAR_642 , VAR_643 ) == VAR_644 ) break ; if ( VAR_645 -> VAR_646 == ( TYPE_72 * ) VAR_647 ) { VAR_648 = METHOD_103 ( VAR_649 , VAR_650 , ( TYPE_73 ) VAR_651 , VAR_652 -> VAR_653 ) ; if ( VAR_654 == VAR_655 ) break ; } } } if ( VAR_656 -> VAR_657 == VAR_658 ) ( TYPE_74 ) METHOD_104 ( VAR_659 , VAR_660 ) ; VAR_661 = ( unsigned TYPE_75 * ) METHOD_105 ( VAR_662 ) ; if ( METHOD_106 ( VAR_663 ) != VAR_664 ) { METHOD_107 ( VAR_665 , VAR_666 , ""UnexpectedEndOfFile"" , VAR_667 -> VAR_668 ) ; break ; } if ( VAR_669 -> VAR_670 != 0 ) if ( VAR_671 -> VAR_672 >= ( VAR_673 -> VAR_674 + VAR_675 -> VAR_676 - 1 ) ) break ; VAR_677 . VAR_678 = METHOD_108 ( VAR_679 ) ; if ( VAR_680 . VAR_681 == 0x59a66a95 ) { METHOD_109 ( VAR_682 , VAR_683 , VAR_684 ) ; if ( METHOD_110 ( VAR_685 ) == ( TYPE_76 * ) VAR_686 ) { VAR_687 = METHOD_111 ( VAR_688 ) ; return ( ( TYPE_77 * ) VAR_689 ) ; } VAR_690 = METHOD_112 ( VAR_691 ) ; VAR_692 = METHOD_113 ( VAR_693 , VAR_694 , METHOD_114 ( VAR_695 ) , METHOD_115 ( VAR_696 ) ) ; if ( VAR_697 == VAR_698 ) break ; } } while ( VAR_699 . VAR_700 == 0x59a66a95 ) ; ( TYPE_78 ) METHOD_116 ( VAR_701 ) ; return ( METHOD_117 ( VAR_702 ) ) ; }",256
257,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 ( * VAR_1 ) ( TYPE_2 * VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) , TYPE_5 * VAR_5 ) { TYPE_6 VAR_6 , VAR_7 = 1 ; for ( VAR_8 -> VAR_9 = 0 ; VAR_10 ; VAR_11 -> VAR_12 ++ ) { VAR_13 = METHOD_1 ( VAR_14 , VAR_15 ) ; if ( VAR_16 ) return VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 , VAR_20 , VAR_21 , & VAR_22 ) ; if ( VAR_23 ) return VAR_24 ; } VAR_25 -> VAR_26 -- ;  return 0 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 ( * VAR_1 ) ( TYPE_2 * VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) , TYPE_5 * VAR_5 ) { TYPE_6 VAR_6 , VAR_7 = 1 ; for ( VAR_8 -> VAR_9 = 0 ; VAR_10 ; VAR_11 -> VAR_12 ++ ) { VAR_13 = METHOD_1 ( VAR_14 , VAR_15 ) ; if ( VAR_16 ) return VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 , VAR_20 , VAR_21 , & VAR_22 ) ; if ( VAR_23 ) return VAR_24 ; } VAR_25 -> VAR_26 -- ; METHOD_3 ( VAR_25 ) ; return 0 ; }",257
258,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_5 * VAR_3 ; struct STRUCT_OR_UNION_6 * VAR_4 ; TYPE_3 VAR_5 ; TYPE_4 VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; struct STRUCT_OR_UNION_7 VAR_9 ; METHOD_1 ( VAR_10 ) ; VAR_11 = STRUCT_OR_UNION_8 -> VAR_12 ; VAR_13 = METHOD_2 ( VAR_14 ) ; VAR_15 = 0 ;  VAR_16 -> VAR_17 = 0 ;  METHOD_3 ( VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) { if ( METHOD_4 ( VAR_22 , VAR_23 ) ) VAR_24 = 0 ; else VAR_25 = - VAR_26 ; goto VAR_27 ; } if ( VAR_28 & VAR_29 ) { VAR_30 = - VAR_31 ; goto VAR_32 ; } if ( VAR_33 -> VAR_34 & VAR_35 ) { VAR_36 = 0 ; goto VAR_37 ; } if ( ! VAR_38 ) { VAR_39 = 0 ; goto VAR_40 ; } VAR_41 = METHOD_5 ( VAR_42 , VAR_43 & VAR_44 , VAR_45 ) ; if ( VAR_46 >= VAR_47 -> METHOD_6 ( VAR_48 ) ) { VAR_49 = - VAR_50 ; goto VAR_51 ; } VAR_52 = METHOD_7 ( VAR_53 , VAR_54 & VAR_55 ) ; VAR_56 = 0 ; VAR_57 = VAR_58 -> METHOD_8 ( VAR_59 , VAR_60 , & VAR_61 ) ; if ( VAR_62 < 0 ) goto VAR_63 ; METHOD_9 ( METHOD_10 ( VAR_64 ) , & VAR_65 , VAR_66 ) ; while ( 1 ) { TYPE_7 VAR_67 = METHOD_11 ( VAR_68 ) ; if ( VAR_69 < 0 ) { VAR_70 = - VAR_71 ; goto VAR_72 ; } else if ( VAR_73 > 0 ) { TYPE_8 VAR_74 ; VAR_75 = VAR_76 -> METHOD_12 ( VAR_77 , VAR_78 , & VAR_79 ) ; if ( VAR_80 < 0 ) break ; VAR_81 = VAR_82 -> METHOD_13 ( VAR_83 , VAR_84 -> VAR_85 , VAR_86 - VAR_87 , VAR_88 ) ; if ( VAR_89 < 0 ) { VAR_90 = - VAR_91 ; break ; } VAR_92 += VAR_93 ; VAR_94 = VAR_95 -> METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , ! ( VAR_99 & VAR_100 ) , & VAR_101 ) ; if ( VAR_102 < 0 ) goto VAR_103 ; if ( VAR_104 >= VAR_105 || VAR_106 & VAR_107 ) break ; VAR_108 -= VAR_109 ; } else { if ( VAR_110 -> VAR_111 != 0 || ( VAR_112 -> VAR_113 & VAR_114 ) || ( VAR_115 -> VAR_116 & VAR_117 ) ) { break ; } if ( VAR_118 == 0 ) { VAR_119 = - VAR_120 ; break ; } VAR_121 = VAR_122 -> METHOD_15 ( VAR_123 , VAR_124 , & VAR_125 ) ; if ( VAR_126 < 0 ) break ; METHOD_16 ( VAR_127 ) ; VAR_128 = METHOD_17 ( VAR_129 ) ; METHOD_18 ( VAR_130 ) ; if ( METHOD_19 ( VAR_131 ) ) { VAR_132 = METHOD_20 ( VAR_133 ) ; break ; } else if ( VAR_134 == 0 ) { VAR_135 = - VAR_136 ; break ; } METHOD_21 ( METHOD_22 ( VAR_137 ) , & VAR_138 , VAR_139 ) ; } } if ( VAR_140 -> VAR_141 ) VAR_142 = - VAR_143 -> VAR_144 ; else if ( VAR_145 -> VAR_146 & VAR_147 ) VAR_148 = 0 ; if ( VAR_149 > 0 ) { if ( ! ( VAR_150 & VAR_151 ) ) { if ( VAR_152 -> VAR_153 & VAR_154 ) { if ( METHOD_23 ( VAR_155 ) <= 0 ) { VAR_156 -> VAR_157 = VAR_158 ; METHOD_24 ( VAR_159 , VAR_160 ) ; VAR_161 -> METHOD_25 ( VAR_162 ) ; } } } VAR_163 = VAR_164 ; } VAR_165 : METHOD_26 ( METHOD_27 ( VAR_166 ) , & VAR_167 ) ; VAR_168 : METHOD_28 ( VAR_169 ) ; return VAR_170 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_5 * VAR_3 ; struct STRUCT_OR_UNION_6 * VAR_4 ; TYPE_3 VAR_5 ; TYPE_4 VAR_6 ; TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; struct STRUCT_OR_UNION_7 VAR_9 ; METHOD_1 ( VAR_10 ) ; VAR_11 = STRUCT_OR_UNION_8 -> VAR_12 ; VAR_13 = METHOD_2 ( VAR_14 ) ; VAR_15 = 0 ; VAR_16 -> VAR_17 = 0 ; METHOD_3 ( VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) { if ( METHOD_4 ( VAR_22 , VAR_23 ) ) VAR_24 = 0 ; else VAR_25 = - VAR_26 ; goto VAR_27 ; } if ( VAR_28 & VAR_29 ) { VAR_30 = - VAR_31 ; goto VAR_32 ; } if ( VAR_33 -> VAR_34 & VAR_35 ) { VAR_36 = 0 ; goto VAR_37 ; } if ( ! VAR_38 ) { VAR_39 = 0 ; goto VAR_40 ; } VAR_41 = METHOD_5 ( VAR_42 , VAR_43 & VAR_44 , VAR_45 ) ; if ( VAR_46 >= VAR_47 -> METHOD_6 ( VAR_48 ) ) { VAR_49 = - VAR_50 ; goto VAR_51 ; } VAR_52 = METHOD_7 ( VAR_53 , VAR_54 & VAR_55 ) ; VAR_56 = 0 ; VAR_57 = VAR_58 -> METHOD_8 ( VAR_59 , VAR_60 , & VAR_61 ) ; if ( VAR_62 < 0 ) goto VAR_63 ; METHOD_9 ( METHOD_10 ( VAR_64 ) , & VAR_65 , VAR_66 ) ; while ( 1 ) { TYPE_7 VAR_67 = METHOD_11 ( VAR_68 ) ; if ( VAR_69 < 0 ) { VAR_70 = - VAR_71 ; goto VAR_72 ; } else if ( VAR_73 > 0 ) { TYPE_8 VAR_74 ; VAR_75 = VAR_76 -> METHOD_12 ( VAR_77 , VAR_78 , & VAR_79 ) ; if ( VAR_80 < 0 ) break ; VAR_81 = VAR_82 -> METHOD_13 ( VAR_83 , VAR_84 -> VAR_85 , VAR_86 - VAR_87 , VAR_88 ) ; if ( VAR_89 < 0 ) { VAR_90 = - VAR_91 ; break ; } VAR_92 += VAR_93 ; VAR_94 = VAR_95 -> METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , ! ( VAR_99 & VAR_100 ) , & VAR_101 ) ; if ( VAR_102 < 0 ) goto VAR_103 ; if ( VAR_104 >= VAR_105 || VAR_106 & VAR_107 ) break ; VAR_108 -= VAR_109 ; } else { if ( VAR_110 -> VAR_111 != 0 || ( VAR_112 -> VAR_113 & VAR_114 ) || ( VAR_115 -> VAR_116 & VAR_117 ) ) { break ; } if ( VAR_118 == 0 ) { VAR_119 = - VAR_120 ; break ; } VAR_121 = VAR_122 -> METHOD_15 ( VAR_123 , VAR_124 , & VAR_125 ) ; if ( VAR_126 < 0 ) break ; METHOD_16 ( VAR_127 ) ; VAR_128 = METHOD_17 ( VAR_129 ) ; METHOD_18 ( VAR_130 ) ; if ( METHOD_19 ( VAR_131 ) ) { VAR_132 = METHOD_20 ( VAR_133 ) ; break ; } else if ( VAR_134 == 0 ) { VAR_135 = - VAR_136 ; break ; } METHOD_21 ( METHOD_22 ( VAR_137 ) , & VAR_138 , VAR_139 ) ; } } if ( VAR_140 -> VAR_141 ) VAR_142 = - VAR_143 -> VAR_144 ; else if ( VAR_145 -> VAR_146 & VAR_147 ) VAR_148 = 0 ; if ( VAR_149 > 0 ) { if ( ! ( VAR_150 & VAR_151 ) ) { if ( VAR_152 -> VAR_153 & VAR_154 ) { if ( METHOD_23 ( VAR_155 ) <= 0 ) { VAR_156 -> VAR_157 = VAR_158 ; METHOD_24 ( VAR_159 , VAR_160 ) ; VAR_161 -> METHOD_25 ( VAR_162 ) ; } } } VAR_163 = VAR_164 ; } VAR_165 : METHOD_26 ( METHOD_27 ( VAR_166 ) , & VAR_167 ) ; VAR_168 : METHOD_28 ( VAR_169 ) ; return VAR_170 ; }",258
259,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_3 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ( STRUCT_OR_UNION_7 -> VAR_6 & VAR_7 ) && ( STRUCT_OR_UNION_8 -> VAR_8 == 0 ) ) return - VAR_9 ; if ( ( ! VAR_10 ) || ( VAR_11 < sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_12 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_2 ( STRUCT_OR_UNION_10 -> VAR_18 , STRUCT_OR_UNION_11 -> VAR_19 ) ; if ( VAR_20 ) return VAR_21 ; METHOD_3 ( & STRUCT_OR_UNION_12 -> VAR_22 ) ; STRUCT_OR_UNION_13 = list_first_entry ( & STRUCT_OR_UNION_14 -> VAR_23 , struct STRUCT_OR_UNION_15 , VAR_24 ) ; METHOD_4 ( & STRUCT_OR_UNION_16 -> VAR_25 ) ; STRUCT_OR_UNION_17 -> VAR_26 -- ; METHOD_5 ( & STRUCT_OR_UNION_18 -> VAR_27 ) ;  VAR_28 = METHOD_6 ( VAR_29 , & STRUCT_OR_UNION_19 -> STRUCT_OR_UNION_20 ,   STRUCT_OR_UNION_21 -> VAR_30 ) ;  VAR_31 = STRUCT_OR_UNION_22 -> VAR_32 ; METHOD_7 ( STRUCT_OR_UNION_23 ) ; if ( VAR_33 ) return - VAR_34 ; return VAR_35 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 TYPE_2 * VAR_0 , TYPE_3 VAR_1 , TYPE_4 * VAR_2 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_3 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; if ( ( STRUCT_OR_UNION_7 -> VAR_6 & VAR_7 ) && ( STRUCT_OR_UNION_8 -> VAR_8 == 0 ) ) return - VAR_9 ; if ( ( ! VAR_10 ) || ( VAR_11 < sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_12 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 , VAR_15 ) ) return - VAR_16 ; VAR_17 = METHOD_2 ( STRUCT_OR_UNION_10 -> VAR_18 , STRUCT_OR_UNION_11 -> VAR_19 ) ; if ( VAR_20 ) return VAR_21 ; METHOD_3 ( & STRUCT_OR_UNION_12 -> VAR_22 ) ; STRUCT_OR_UNION_13 = list_first_entry ( & STRUCT_OR_UNION_14 -> VAR_23 , struct STRUCT_OR_UNION_15 , VAR_24 ) ; METHOD_4 ( & STRUCT_OR_UNION_16 -> VAR_25 ) ; STRUCT_OR_UNION_17 -> VAR_26 -- ; METHOD_5 ( & STRUCT_OR_UNION_18 -> VAR_27 ) ; VAR_35 = METHOD_8 ( VAR_15 , STRUCT_OR_UNION_23 -> VAR_32 ) ; VAR_28 = METHOD_6 ( VAR_29 , & STRUCT_OR_UNION_19 -> STRUCT_OR_UNION_20 , VAR_35 ) ; METHOD_7 ( STRUCT_OR_UNION_23 ) ; if ( VAR_33 ) return - VAR_34 ; return VAR_35 ; }",259
260,"static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_1 VAR_4 ; if ( ! VAR_5 || ! VAR_6 ) return 0 ; VAR_7 = METHOD_1 ( VAR_8 ) ; VAR_9 = METHOD_2 ( VAR_10 ) ; if ( METHOD_3 ( VAR_11 ) < VAR_12 || METHOD_4 ( VAR_13 ) != VAR_14 ) return - VAR_15 ;  return 0 ;  }","static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_1 VAR_4 ; if ( ! VAR_5 || ! VAR_6 ) return 0 ; VAR_7 = METHOD_1 ( VAR_8 ) ; VAR_9 = METHOD_2 ( VAR_10 ) ; if ( METHOD_3 ( VAR_11 ) < VAR_12 || METHOD_4 ( VAR_13 ) != VAR_14 ) return - VAR_15 ; if ( VAR_10 -> VAR_16 > VAR_10 -> VAR_17 * sizeof ( VAR_18 ) * 8 ) return - VAR_15 ; return 0 ; }",260
261,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) {  TYPE_6 VAR_5 = 0 , VAR_6 = 0 , VAR_7 ;  unsigned TYPE_7 * VAR_8 = VAR_9 ; unsigned TYPE_8 * VAR_10 = VAR_11 ; TYPE_9 VAR_12 = 0 , VAR_13 ; TYPE_10 VAR_14 ; TYPE_11 VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 ) ; METHOD_2 ( & VAR_20 , VAR_21 , 4 ) ; if ( ( ! METHOD_3 ( VAR_22 , ( ( TYPE_14 * ) & VAR_23 ) + 4 , sizeof ( TYPE_15 ) - 4 , & VAR_24 ) || VAR_25 != sizeof ( TYPE_16 ) - 4 ) ) { METHOD_4 ( ""%sisnotavalid.CAFfile!"" , VAR_26 ) ; return VAR_27 ; } else if ( ! ( VAR_28 -> VAR_29 & VAR_30 ) && ! METHOD_5 ( VAR_31 , & VAR_32 , sizeof ( TYPE_17 ) ) ) { METHOD_6 ( ""%s"" , METHOD_7 ( VAR_33 ) ) ; return VAR_34 ; } METHOD_8 ( & VAR_35 , VAR_36 ) ; if ( VAR_37 . VAR_38 != 1 ) { METHOD_9 ( ""%s:can\'thandleversion%d.CAFfiles!"" , VAR_39 , VAR_40 . VAR_41 ) ; return VAR_42 ; } while ( 1 ) { if ( ! METHOD_10 ( VAR_43 , & VAR_44 , sizeof ( TYPE_18 ) , & VAR_45 ) || VAR_46 != sizeof ( TYPE_19 ) ) { METHOD_11 ( ""%sisnotavalid.CAFfile!"" , VAR_47 ) ; return VAR_48 ; } else if ( ! ( VAR_49 -> VAR_50 & VAR_51 ) && ! METHOD_12 ( VAR_52 , & VAR_53 , sizeof ( TYPE_20 ) ) ) { METHOD_13 ( ""%s"" , METHOD_14 ( VAR_54 ) ) ; return VAR_55 ; } METHOD_15 ( & VAR_56 , VAR_57 ) ; if ( ! METHOD_16 ( VAR_58 . VAR_59 , ""desc"" , 4 ) ) { TYPE_21 VAR_60 = VAR_61 ; if ( VAR_62 . VAR_63 != sizeof ( TYPE_22 ) || ! METHOD_17 ( VAR_64 , & VAR_65 , ( TYPE_23 ) VAR_66 . VAR_67 , & VAR_68 ) || VAR_69 != VAR_70 . VAR_71 ) { METHOD_18 ( ""%sisnotavalid.CAFfile!"" , VAR_72 ) ; return VAR_73 ; } else if ( ! ( VAR_74 -> VAR_75 & VAR_76 ) && ! METHOD_19 ( VAR_77 , & VAR_78 , ( TYPE_24 ) VAR_79 . VAR_80 ) ) { METHOD_20 ( ""%s"" , METHOD_21 ( VAR_81 ) ) ; return VAR_82 ; }  METHOD_22 ( & VAR_83 , VAR_84 ) ;  if ( VAR_85 ) { TYPE_25 VAR_86 [ 5 ] ; METHOD_23 ( VAR_87 , VAR_88 . VAR_89 , 4 ) ; VAR_90 [ 4 ] = 0 ; METHOD_24 ( ""format=%s,flags=%x,samplingrate=%g"" , VAR_91 , VAR_92 . VAR_93 , VAR_94 . VAR_95 ) ; METHOD_25 ( ""packet=%dbytesand%dframes"" , VAR_96 . VAR_97 , VAR_98 . VAR_99 ) ; METHOD_26 ( ""channelsperframe=%d,bitsperchannel=%d"" , VAR_100 . VAR_101 , VAR_102 . VAR_103 ) ; } if ( METHOD_27 ( VAR_104 . VAR_105 , ""lpcm"" , 4 ) || ( VAR_106 . VAR_107 & ~ 3 ) ) VAR_108 = VAR_109 ; else if ( VAR_110 . VAR_111 < 1.0 || VAR_112 . VAR_113 > 16777215.0 || VAR_114 . VAR_115 != METHOD_28 ( VAR_116 . VAR_117 ) ) VAR_118 = VAR_119 ; else if ( ! VAR_120 . VAR_121 || VAR_122 . VAR_123 > 256 ) VAR_124 = VAR_125 ; else if ( VAR_126 . VAR_127 < 1 || VAR_128 . VAR_129 > 32 || ( ( VAR_130 . VAR_131 & VAR_132 ) && VAR_133 . VAR_134 != 32 ) ) VAR_135 = VAR_136 ; else if ( VAR_137 . VAR_138 != 1 || VAR_139 . VAR_140 / VAR_141 . VAR_142 < ( VAR_143 . VAR_144 + 7 ) / 8 || VAR_145 . VAR_146 / VAR_147 . VAR_148 > 4 || VAR_149 . VAR_150 % VAR_151 . VAR_152 ) VAR_153 = VAR_154 ; if ( ! VAR_155 ) { METHOD_29 ( ""%sisanunsupported.CAFformat!"" , VAR_156 ) ; return VAR_157 ; } VAR_158 -> VAR_159 = VAR_160 . VAR_161 / VAR_162 . VAR_163 ; VAR_164 -> VAR_165 = ( VAR_166 . VAR_167 & VAR_168 ) ? 127 : 0 ; VAR_169 -> VAR_170 = VAR_171 . VAR_172 ; VAR_173 -> VAR_174 = VAR_175 . VAR_176 ; VAR_177 -> VAR_178 = ( TYPE_26 ) VAR_179 . VAR_180 ; if ( ! ( VAR_181 . VAR_182 & VAR_183 ) && VAR_184 -> VAR_185 > 1 ) VAR_186 -> VAR_187 |= VAR_188 ; if ( VAR_189 -> VAR_190 == 1 ) VAR_191 -> VAR_192 |= VAR_193 ; if ( VAR_194 ) { if ( VAR_195 -> VAR_196 == 127 ) METHOD_30 ( ""dataformat:32-bit%s-endianfloatingpoint"" , ( VAR_197 -> VAR_198 & VAR_199 ) ? ""big"" : ""little"" ) ; else METHOD_31 ( ""dataformat:%d-bit%s-endianintegersstoredin%dbyte(s)"" , VAR_200 -> VAR_201 , ( VAR_202 -> VAR_203 & VAR_204 ) ? ""big"" : ""little"" , VAR_205 -> VAR_206 ) ; } } else if ( ! METHOD_32 ( VAR_207 . VAR_208 , ""chan"" , 4 ) ) { VAR_209 * VAR_210 ; if ( VAR_211 . VAR_212 < 0 || VAR_213 . VAR_214 > 1024 || VAR_215 . VAR_216 < sizeof ( VAR_217 ) ) { METHOD_33 ( ""this.CAFfilehasaninvalid\'chan\'chunk!"" ) ; return VAR_218 ; } if ( VAR_219 ) METHOD_34 ( ""\'chan\'chunkis%dbytes"" , ( TYPE_27 ) VAR_220 . VAR_221 ) ; VAR_222 = METHOD_35 ( ( TYPE_28 ) VAR_223 . VAR_224 ) ; if ( ! METHOD_36 ( VAR_225 , VAR_226 , ( TYPE_29 ) VAR_227 . VAR_228 , & VAR_229 ) || VAR_230 != VAR_231 . VAR_232 ) { METHOD_37 ( ""%sisnotavalid.CAFfile!"" , VAR_233 ) ; METHOD_38 ( VAR_234 ) ; return VAR_235 ; } else if ( ! ( VAR_236 -> VAR_237 & VAR_238 ) && ! METHOD_39 ( VAR_239 , VAR_240 , ( TYPE_30 ) VAR_241 . VAR_242 ) ) { METHOD_40 ( ""%s"" , METHOD_41 ( VAR_243 ) ) ; METHOD_42 ( VAR_244 ) ; return VAR_245 ; } METHOD_43 ( VAR_246 , VAR_247 ) ; VAR_248 = 1 ; if ( VAR_249 -> VAR_250 || ( VAR_251 -> VAR_252 & VAR_253 ) ) { METHOD_44 ( ""thisCAFfilealreadyhaschannelorderinformation!"" ) ; METHOD_45 ( VAR_254 ) ; return VAR_255 ; } switch ( VAR_256 -> VAR_257 ) { case VAR_258 : { TYPE_31 * VAR_259 = ( TYPE_32 * ) ( VAR_260 + 1 ) ; TYPE_33 VAR_261 = VAR_262 -> VAR_263 ; TYPE_34 VAR_264 , VAR_265 = 0 , VAR_266 = 0 ; if ( VAR_267 . VAR_268 != sizeof ( VAR_269 ) + sizeof ( TYPE_35 ) * VAR_270 || VAR_271 != VAR_272 -> VAR_273 ) { METHOD_46 ( ""channeldescriptionsin\'chan\'chunkarethewrongsize!"" ) ; METHOD_47 ( VAR_274 ) ; return VAR_275 ; } if ( VAR_276 >= 256 ) { METHOD_48 ( ""%dchanneldescriptionsismorethanwecanhandle...ignoring!"" ) ; break ; } VAR_277 = METHOD_49 ( VAR_278 ) ; METHOD_50 ( VAR_279 , - 1 , VAR_280 ) ; VAR_281 = METHOD_51 ( VAR_282 + 1 ) ; for ( VAR_283 = 0 ; VAR_284 < VAR_285 ; ++ VAR_286 ) { METHOD_52 ( VAR_287 + VAR_288 , VAR_289 ) ; if ( VAR_290 ) METHOD_53 ( ""chan%d-->%d"" , VAR_291 + 1 , VAR_292 [ VAR_293 ] . VAR_294 ) ; } for ( VAR_295 = 1 ; VAR_296 <= 18 ; ++ VAR_297 ) for ( VAR_298 = 0 ; VAR_299 < VAR_300 ; ++ VAR_301 ) if ( VAR_302 [ VAR_303 ] . VAR_304 == VAR_305 ) { VAR_306 -> VAR_307 |= 1 << ( VAR_308 - 1 ) ; VAR_309 [ VAR_310 ] = VAR_311 ++ ; break ; } for ( VAR_312 = 0 ; VAR_313 < VAR_314 ; ++ VAR_315 ) if ( VAR_316 [ VAR_317 ] == ( unsigned TYPE_36 ) - 1 ) { TYPE_37 VAR_318 = VAR_319 [ VAR_320 ] . VAR_321 ; if ( VAR_322 == 0 || VAR_323 == 0xffffffff || VAR_324 == 100 ) VAR_325 [ VAR_326 ++ ] = 0xff ; else if ( ( VAR_327 >= 33 && VAR_328 <= 44 ) || ( VAR_329 >= 200 && VAR_330 <= 207 ) || ( VAR_331 >= 301 && VAR_332 <= 305 ) ) VAR_333 [ VAR_334 ++ ] = VAR_335 >= 301 ? VAR_336 - 80 : VAR_337 ; else { METHOD_54 ( ""warning:unknownchanneldescriptionslabel:%d"" , VAR_338 ) ; VAR_339 [ VAR_340 ++ ] = 0xff ; } VAR_341 [ VAR_342 ] = VAR_343 ++ ; } for ( VAR_344 = 0 ; VAR_345 < VAR_346 ; ++ VAR_347 ) if ( VAR_348 [ VAR_349 ] != VAR_350 ) break ; if ( VAR_351 == VAR_352 ) { METHOD_55 ( VAR_353 ) ; VAR_354 = VAR_355 ; } else { VAR_356 -> VAR_357 |= VAR_358 ; VAR_359 = VAR_360 ; } if ( ! VAR_361 ) { METHOD_56 ( VAR_362 ) ; VAR_363 = VAR_364 ; } else VAR_365 [ VAR_366 ] = 0 ; if ( VAR_367 ) { METHOD_57 ( ""layout_tag=0x%08x,sogeneratedbitmapof0x%08xfrom%ddescriptions,%dnon-MS"" , VAR_368 -> VAR_369 , VAR_370 -> VAR_371 , VAR_372 -> VAR_373 , VAR_374 ) ; if ( VAR_375 && VAR_376 <= 8 ) { TYPE_38 VAR_377 [ ] = ""12345678"" ; for ( VAR_378 = 0 ; VAR_379 < VAR_380 ; ++ VAR_381 ) VAR_382 [ VAR_383 ] = VAR_384 [ VAR_385 ] + '1' ; VAR_386 [ VAR_387 ] = 0 ; METHOD_58 ( ""reorderingstring=\\""%s\\""\\n"" , VAR_388 ) ; } } } break ; case VAR_389 : VAR_390 -> VAR_391 = VAR_392 -> VAR_393 ; if ( VAR_394 ) METHOD_59 ( ""layout_tag=0x%08x,sousingsuppliedbitmapof0x%08x"" , VAR_395 -> VAR_396 , VAR_397 -> VAR_398 ) ; break ; default : for ( VAR_399 = 0 ; VAR_400 < VAR_401 ; ++ VAR_402 ) if ( VAR_403 -> VAR_404 == VAR_405 [ VAR_406 ] . VAR_407 ) { VAR_408 -> VAR_409 = VAR_410 [ VAR_411 ] . VAR_412 ; VAR_413 = VAR_414 [ VAR_415 ] . VAR_416 ; if ( VAR_417 [ VAR_418 ] . VAR_419 ) { VAR_420 = ( unsigned TYPE_39 * ) METHOD_60 ( VAR_421 [ VAR_422 ] . VAR_423 ) ; VAR_424 -> VAR_425 |= VAR_426 ; } if ( VAR_427 [ VAR_428 ] . VAR_429 ) VAR_430 = ( unsigned TYPE_40 * ) METHOD_61 ( VAR_431 [ VAR_432 ] . VAR_433 ) ; if ( VAR_434 ) METHOD_62 ( ""layout_tag0x%08xfoundintable,bitmap=0x%08x,reorder=%s,identities=%s"" , VAR_435 , VAR_436 -> VAR_437 , VAR_438 ? ""yes"" : ""no"" , VAR_439 ? ""yes"" : ""no"" ) ; break ; } if ( VAR_440 == VAR_441 && VAR_442 ) METHOD_63 ( ""layout_tag0x%08xnotfoundintable...allchannelsunassigned"" , VAR_443 -> VAR_444 ) ; break ; } METHOD_64 ( VAR_445 ) ; } else if ( ! METHOD_65 ( VAR_446 . VAR_447 , ""data"" , 4 ) ) { TYPE_41 VAR_448 ;  if ( ! METHOD_66 ( VAR_449 , & VAR_450 , sizeof ( VAR_451 ) , & VAR_452 ) ||  VAR_453 != sizeof ( VAR_454 ) ) { METHOD_67 ( ""%sisnotavalid.CAFfile!"" , VAR_455 ) ; return VAR_456 ; } else if ( ! ( VAR_457 -> VAR_458 & VAR_459 ) && ! METHOD_68 ( VAR_460 , & VAR_461 , sizeof ( VAR_462 ) ) ) { METHOD_69 ( ""%s"" , METHOD_70 ( VAR_463 ) ) ; return VAR_464 ; } if ( ( VAR_465 -> VAR_466 & VAR_467 ) || VAR_468 . VAR_469 == - 1 ) { VAR_470 -> VAR_471 |= VAR_472 ; if ( VAR_473 && METHOD_71 ( VAR_474 ) != - 1 ) VAR_475 = ( VAR_476 - METHOD_72 ( VAR_477 ) ) / VAR_478 . VAR_479 ; else VAR_480 = - 1 ; } else { if ( VAR_481 && VAR_482 - VAR_483 . VAR_484 > 16777216 ) { METHOD_73 ( "".CAFfile%shasover16MBofextraCAFFdata,probablyiscorrupt!"" , VAR_485 ) ; return VAR_486 ; } if ( ( VAR_487 . VAR_488 - 4 ) % VAR_489 . VAR_490 ) { METHOD_74 ( "".CAFfile%shasaninvaliddatachunksize,probablyiscorrupt!"" , VAR_491 ) ; return VAR_492 ; } VAR_493 = ( VAR_494 . VAR_495 - 4 ) / VAR_496 . VAR_497 ; if ( ! VAR_498 ) { METHOD_75 ( ""this.CAFfilehasnoaudiosamples,probablyiscorrupt!"" ) ; return VAR_499 ; } if ( VAR_500 > VAR_501 ) { METHOD_76 ( ""%shastoomanysamplesforWavPack!"" , VAR_502 ) ; return VAR_503 ; } } break ; } else { TYPE_42 VAR_504 = ( TYPE_43 ) VAR_505 . VAR_506 ; TYPE_44 * VAR_507 ; if ( VAR_508 . VAR_509 < 0 || VAR_510 . VAR_511 > 1048576 ) { METHOD_77 ( ""%sisnotavalid.CAFfile!"" , VAR_512 ) ; return VAR_513 ; } VAR_514 = METHOD_78 ( VAR_515 ) ; if ( VAR_516 ) METHOD_79 ( ""extraunknownchunk\\""%c%c%c%c\\""of%dbytes"" , VAR_517 . VAR_518 [ 0 ] , VAR_519 . VAR_520 [ 1 ] , VAR_521 . VAR_522 [ 2 ] , VAR_523 . VAR_524 [ 3 ] , VAR_525 . VAR_526 ) ; if ( ! METHOD_80 ( VAR_527 , VAR_528 , VAR_529 , & VAR_530 ) || VAR_531 != VAR_532 || ( ! ( VAR_533 -> VAR_534 & VAR_535 ) && ! METHOD_81 ( VAR_536 , VAR_537 , VAR_538 ) ) ) { METHOD_82 ( ""%s"" , METHOD_83 ( VAR_539 ) ) ; METHOD_84 ( VAR_540 ) ; return VAR_541 ; } METHOD_85 ( VAR_542 ) ; } } if ( ! VAR_543 && ! VAR_544 -> VAR_545 && VAR_546 -> VAR_547 <= 2 && ! ( VAR_548 -> VAR_549 & VAR_550 ) ) VAR_551 -> VAR_552 = 0x5 - VAR_553 -> VAR_554 ; if ( ! METHOD_86 ( VAR_555 , VAR_556 , VAR_557 , VAR_558 ) ) { METHOD_87 ( ""%s"" , METHOD_88 ( VAR_559 ) ) ; return VAR_560 ; } if ( VAR_561 ) METHOD_89 ( VAR_562 ) ; if ( VAR_563 || VAR_564 ) { if ( ! METHOD_90 ( VAR_565 , VAR_566 , VAR_567 ) ) { METHOD_91 ( ""problemwithsettingchannellayout(shouldnothappen)"" ) ; return VAR_568 ; } if ( VAR_569 ) METHOD_92 ( VAR_570 ) ; } return VAR_571 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 = 0 , VAR_6 = 0 , VAR_7 ; unsigned TYPE_7 * VAR_8 = VAR_9 ; unsigned TYPE_8 * VAR_10 = VAR_11 ; TYPE_9 VAR_12 = 0 , VAR_13 ; TYPE_10 VAR_14 ; TYPE_11 VAR_15 ; TYPE_12 VAR_16 ; TYPE_13 VAR_17 ; VAR_18 = METHOD_1 ( VAR_19 ) ; METHOD_2 ( & VAR_20 , VAR_21 , 4 ) ; if ( ( ! METHOD_3 ( VAR_22 , ( ( TYPE_14 * ) & VAR_23 ) + 4 , sizeof ( TYPE_15 ) - 4 , & VAR_24 ) || VAR_25 != sizeof ( TYPE_16 ) - 4 ) ) { METHOD_4 ( ""%sisnotavalid.CAFfile!"" , VAR_26 ) ; return VAR_27 ; } else if ( ! ( VAR_28 -> VAR_29 & VAR_30 ) && ! METHOD_5 ( VAR_31 , & VAR_32 , sizeof ( TYPE_17 ) ) ) { METHOD_6 ( ""%s"" , METHOD_7 ( VAR_33 ) ) ; return VAR_34 ; } METHOD_8 ( & VAR_35 , VAR_36 ) ; if ( VAR_37 . VAR_38 != 1 ) { METHOD_9 ( ""%s:can\'thandleversion%d.CAFfiles!"" , VAR_39 , VAR_40 . VAR_41 ) ; return VAR_42 ; } while ( 1 ) { if ( ! METHOD_10 ( VAR_43 , & VAR_44 , sizeof ( TYPE_18 ) , & VAR_45 ) || VAR_46 != sizeof ( TYPE_19 ) ) { METHOD_11 ( ""%sisnotavalid.CAFfile!"" , VAR_47 ) ; return VAR_48 ; } else if ( ! ( VAR_49 -> VAR_50 & VAR_51 ) && ! METHOD_12 ( VAR_52 , & VAR_53 , sizeof ( TYPE_20 ) ) ) { METHOD_13 ( ""%s"" , METHOD_14 ( VAR_54 ) ) ; return VAR_55 ; } METHOD_15 ( & VAR_56 , VAR_57 ) ; if ( ! METHOD_16 ( VAR_58 . VAR_59 , ""desc"" , 4 ) ) { TYPE_21 VAR_60 = VAR_61 ; if ( VAR_62 . VAR_63 != sizeof ( TYPE_22 ) || ! METHOD_17 ( VAR_64 , & VAR_65 , ( TYPE_23 ) VAR_66 . VAR_67 , & VAR_68 ) || VAR_69 != VAR_70 . VAR_71 ) { METHOD_18 ( ""%sisnotavalid.CAFfile!"" , VAR_72 ) ; return VAR_73 ; } else if ( ! ( VAR_74 -> VAR_75 & VAR_76 ) && ! METHOD_19 ( VAR_77 , & VAR_78 , ( TYPE_24 ) VAR_79 . VAR_80 ) ) { METHOD_20 ( ""%s"" , METHOD_21 ( VAR_81 ) ) ; return VAR_82 ; } METHOD_22 ( & VAR_83 , VAR_84 ) ; VAR_574 = 1 ; if ( VAR_85 ) { TYPE_25 VAR_86 [ 5 ] ; METHOD_23 ( VAR_87 , VAR_88 . VAR_89 , 4 ) ; VAR_90 [ 4 ] = 0 ; METHOD_24 ( ""format=%s,flags=%x,samplingrate=%g"" , VAR_91 , VAR_92 . VAR_93 , VAR_94 . VAR_95 ) ; METHOD_25 ( ""packet=%dbytesand%dframes"" , VAR_96 . VAR_97 , VAR_98 . VAR_99 ) ; METHOD_26 ( ""channelsperframe=%d,bitsperchannel=%d"" , VAR_100 . VAR_101 , VAR_102 . VAR_103 ) ; } if ( METHOD_27 ( VAR_104 . VAR_105 , ""lpcm"" , 4 ) || ( VAR_106 . VAR_107 & ~ 3 ) ) VAR_108 = VAR_109 ; else if ( VAR_110 . VAR_111 < 1.0 || VAR_112 . VAR_113 > 16777215.0 || VAR_114 . VAR_115 != METHOD_28 ( VAR_116 . VAR_117 ) ) VAR_118 = VAR_119 ; else if ( ! VAR_574 || ! VAR_120 . VAR_121 || VAR_122 . VAR_123 > 256 ) VAR_124 = VAR_125 ; else if ( VAR_126 . VAR_127 < 1 || VAR_128 . VAR_129 > 32 || ( ( VAR_130 . VAR_131 & VAR_132 ) && VAR_133 . VAR_134 != 32 ) ) VAR_135 = VAR_136 ; else if ( VAR_137 . VAR_138 != 1 || VAR_139 . VAR_140 / VAR_141 . VAR_142 < ( VAR_143 . VAR_144 + 7 ) / 8 || VAR_145 . VAR_146 / VAR_147 . VAR_148 > 4 || VAR_149 . VAR_150 % VAR_151 . VAR_152 ) VAR_153 = VAR_154 ; if ( ! VAR_155 ) { METHOD_29 ( ""%sisanunsupported.CAFformat!"" , VAR_156 ) ; return VAR_157 ; } VAR_158 -> VAR_159 = VAR_160 . VAR_161 / VAR_162 . VAR_163 ; VAR_164 -> VAR_165 = ( VAR_166 . VAR_167 & VAR_168 ) ? 127 : 0 ; VAR_169 -> VAR_170 = VAR_171 . VAR_172 ; VAR_173 -> VAR_174 = VAR_175 . VAR_176 ; VAR_177 -> VAR_178 = ( TYPE_26 ) VAR_179 . VAR_180 ; if ( ! ( VAR_181 . VAR_182 & VAR_183 ) && VAR_184 -> VAR_185 > 1 ) VAR_186 -> VAR_187 |= VAR_188 ; if ( VAR_189 -> VAR_190 == 1 ) VAR_191 -> VAR_192 |= VAR_193 ; if ( VAR_194 ) { if ( VAR_195 -> VAR_196 == 127 ) METHOD_30 ( ""dataformat:32-bit%s-endianfloatingpoint"" , ( VAR_197 -> VAR_198 & VAR_199 ) ? ""big"" : ""little"" ) ; else METHOD_31 ( ""dataformat:%d-bit%s-endianintegersstoredin%dbyte(s)"" , VAR_200 -> VAR_201 , ( VAR_202 -> VAR_203 & VAR_204 ) ? ""big"" : ""little"" , VAR_205 -> VAR_206 ) ; } } else if ( ! METHOD_32 ( VAR_207 . VAR_208 , ""chan"" , 4 ) ) { VAR_209 * VAR_210 ; if ( VAR_211 . VAR_212 < 0 || VAR_213 . VAR_214 > 1024 || VAR_215 . VAR_216 < sizeof ( VAR_217 ) ) { METHOD_33 ( ""this.CAFfilehasaninvalid\'chan\'chunk!"" ) ; return VAR_218 ; } if ( VAR_219 ) METHOD_34 ( ""\'chan\'chunkis%dbytes"" , ( TYPE_27 ) VAR_220 . VAR_221 ) ; VAR_222 = METHOD_35 ( ( TYPE_28 ) VAR_223 . VAR_224 ) ; if ( ! METHOD_36 ( VAR_225 , VAR_226 , ( TYPE_29 ) VAR_227 . VAR_228 , & VAR_229 ) || VAR_230 != VAR_231 . VAR_232 ) { METHOD_37 ( ""%sisnotavalid.CAFfile!"" , VAR_233 ) ; METHOD_38 ( VAR_234 ) ; return VAR_235 ; } else if ( ! ( VAR_236 -> VAR_237 & VAR_238 ) && ! METHOD_39 ( VAR_239 , VAR_240 , ( TYPE_30 ) VAR_241 . VAR_242 ) ) { METHOD_40 ( ""%s"" , METHOD_41 ( VAR_243 ) ) ; METHOD_42 ( VAR_244 ) ; return VAR_245 ; } METHOD_43 ( VAR_246 , VAR_247 ) ; VAR_248 = 1 ; if ( VAR_249 -> VAR_250 || ( VAR_251 -> VAR_252 & VAR_253 ) ) { METHOD_44 ( ""thisCAFfilealreadyhaschannelorderinformation!"" ) ; METHOD_45 ( VAR_254 ) ; return VAR_255 ; } switch ( VAR_256 -> VAR_257 ) { case VAR_258 : { TYPE_31 * VAR_259 = ( TYPE_32 * ) ( VAR_260 + 1 ) ; TYPE_33 VAR_261 = VAR_262 -> VAR_263 ; TYPE_34 VAR_264 , VAR_265 = 0 , VAR_266 = 0 ; if ( VAR_267 . VAR_268 != sizeof ( VAR_269 ) + sizeof ( TYPE_35 ) * VAR_270 || VAR_271 != VAR_272 -> VAR_273 ) { METHOD_46 ( ""channeldescriptionsin\'chan\'chunkarethewrongsize!"" ) ; METHOD_47 ( VAR_274 ) ; return VAR_275 ; } if ( VAR_276 >= 256 ) { METHOD_48 ( ""%dchanneldescriptionsismorethanwecanhandle...ignoring!"" ) ; break ; } VAR_277 = METHOD_49 ( VAR_278 ) ; METHOD_50 ( VAR_279 , - 1 , VAR_280 ) ; VAR_281 = METHOD_51 ( VAR_282 + 1 ) ; for ( VAR_283 = 0 ; VAR_284 < VAR_285 ; ++ VAR_286 ) { METHOD_52 ( VAR_287 + VAR_288 , VAR_289 ) ; if ( VAR_290 ) METHOD_53 ( ""chan%d-->%d"" , VAR_291 + 1 , VAR_292 [ VAR_293 ] . VAR_294 ) ; } for ( VAR_295 = 1 ; VAR_296 <= 18 ; ++ VAR_297 ) for ( VAR_298 = 0 ; VAR_299 < VAR_300 ; ++ VAR_301 ) if ( VAR_302 [ VAR_303 ] . VAR_304 == VAR_305 ) { VAR_306 -> VAR_307 |= 1 << ( VAR_308 - 1 ) ; VAR_309 [ VAR_310 ] = VAR_311 ++ ; break ; } for ( VAR_312 = 0 ; VAR_313 < VAR_314 ; ++ VAR_315 ) if ( VAR_316 [ VAR_317 ] == ( unsigned TYPE_36 ) - 1 ) { TYPE_37 VAR_318 = VAR_319 [ VAR_320 ] . VAR_321 ; if ( VAR_322 == 0 || VAR_323 == 0xffffffff || VAR_324 == 100 ) VAR_325 [ VAR_326 ++ ] = 0xff ; else if ( ( VAR_327 >= 33 && VAR_328 <= 44 ) || ( VAR_329 >= 200 && VAR_330 <= 207 ) || ( VAR_331 >= 301 && VAR_332 <= 305 ) ) VAR_333 [ VAR_334 ++ ] = VAR_335 >= 301 ? VAR_336 - 80 : VAR_337 ; else { METHOD_54 ( ""warning:unknownchanneldescriptionslabel:%d"" , VAR_338 ) ; VAR_339 [ VAR_340 ++ ] = 0xff ; } VAR_341 [ VAR_342 ] = VAR_343 ++ ; } for ( VAR_344 = 0 ; VAR_345 < VAR_346 ; ++ VAR_347 ) if ( VAR_348 [ VAR_349 ] != VAR_350 ) break ; if ( VAR_351 == VAR_352 ) { METHOD_55 ( VAR_353 ) ; VAR_354 = VAR_355 ; } else { VAR_356 -> VAR_357 |= VAR_358 ; VAR_359 = VAR_360 ; } if ( ! VAR_361 ) { METHOD_56 ( VAR_362 ) ; VAR_363 = VAR_364 ; } else VAR_365 [ VAR_366 ] = 0 ; if ( VAR_367 ) { METHOD_57 ( ""layout_tag=0x%08x,sogeneratedbitmapof0x%08xfrom%ddescriptions,%dnon-MS"" , VAR_368 -> VAR_369 , VAR_370 -> VAR_371 , VAR_372 -> VAR_373 , VAR_374 ) ; if ( VAR_375 && VAR_376 <= 8 ) { TYPE_38 VAR_377 [ ] = ""12345678"" ; for ( VAR_378 = 0 ; VAR_379 < VAR_380 ; ++ VAR_381 ) VAR_382 [ VAR_383 ] = VAR_384 [ VAR_385 ] + '1' ; VAR_386 [ VAR_387 ] = 0 ; METHOD_58 ( ""reorderingstring=\\""%s\\""\\n"" , VAR_388 ) ; } } } break ; case VAR_389 : VAR_390 -> VAR_391 = VAR_392 -> VAR_393 ; if ( VAR_394 ) METHOD_59 ( ""layout_tag=0x%08x,sousingsuppliedbitmapof0x%08x"" , VAR_395 -> VAR_396 , VAR_397 -> VAR_398 ) ; break ; default : for ( VAR_399 = 0 ; VAR_400 < VAR_401 ; ++ VAR_402 ) if ( VAR_403 -> VAR_404 == VAR_405 [ VAR_406 ] . VAR_407 ) { VAR_408 -> VAR_409 = VAR_410 [ VAR_411 ] . VAR_412 ; VAR_413 = VAR_414 [ VAR_415 ] . VAR_416 ; if ( VAR_417 [ VAR_418 ] . VAR_419 ) { VAR_420 = ( unsigned TYPE_39 * ) METHOD_60 ( VAR_421 [ VAR_422 ] . VAR_423 ) ; VAR_424 -> VAR_425 |= VAR_426 ; } if ( VAR_427 [ VAR_428 ] . VAR_429 ) VAR_430 = ( unsigned TYPE_40 * ) METHOD_61 ( VAR_431 [ VAR_432 ] . VAR_433 ) ; if ( VAR_434 ) METHOD_62 ( ""layout_tag0x%08xfoundintable,bitmap=0x%08x,reorder=%s,identities=%s"" , VAR_435 , VAR_436 -> VAR_437 , VAR_438 ? ""yes"" : ""no"" , VAR_439 ? ""yes"" : ""no"" ) ; break ; } if ( VAR_440 == VAR_441 && VAR_442 ) METHOD_63 ( ""layout_tag0x%08xnotfoundintable...allchannelsunassigned"" , VAR_443 -> VAR_444 ) ; break ; } METHOD_64 ( VAR_445 ) ; } else if ( ! METHOD_65 ( VAR_446 . VAR_447 , ""data"" , 4 ) ) { TYPE_41 VAR_448 ; if ( ! METHOD_66 ( VAR_449 , & VAR_450 , sizeof ( VAR_451 ) , & VAR_452 ) || VAR_453 != sizeof ( VAR_454 ) ) { METHOD_67 ( ""%sisnotavalid.CAFfile!"" , VAR_455 ) ; return VAR_456 ; } else if ( ! ( VAR_457 -> VAR_458 & VAR_459 ) && ! METHOD_68 ( VAR_460 , & VAR_461 , sizeof ( VAR_462 ) ) ) { METHOD_69 ( ""%s"" , METHOD_70 ( VAR_463 ) ) ; return VAR_464 ; } if ( ( VAR_465 -> VAR_466 & VAR_467 ) || VAR_468 . VAR_469 == - 1 ) { VAR_470 -> VAR_471 |= VAR_472 ; if ( VAR_473 && METHOD_71 ( VAR_474 ) != - 1 ) VAR_475 = ( VAR_476 - METHOD_72 ( VAR_477 ) ) / VAR_478 . VAR_479 ; else VAR_480 = - 1 ; } else { if ( VAR_481 && VAR_482 - VAR_483 . VAR_484 > 16777216 ) { METHOD_73 ( "".CAFfile%shasover16MBofextraCAFFdata,probablyiscorrupt!"" , VAR_485 ) ; return VAR_486 ; } if ( ( VAR_487 . VAR_488 - 4 ) % VAR_489 . VAR_490 ) { METHOD_74 ( "".CAFfile%shasaninvaliddatachunksize,probablyiscorrupt!"" , VAR_491 ) ; return VAR_492 ; } VAR_493 = ( VAR_494 . VAR_495 - 4 ) / VAR_496 . VAR_497 ; if ( ! VAR_498 ) { METHOD_75 ( ""this.CAFfilehasnoaudiosamples,probablyiscorrupt!"" ) ; return VAR_499 ; } if ( VAR_500 > VAR_501 ) { METHOD_76 ( ""%shastoomanysamplesforWavPack!"" , VAR_502 ) ; return VAR_503 ; } } break ; } else { TYPE_42 VAR_504 = ( TYPE_43 ) VAR_505 . VAR_506 ; TYPE_44 * VAR_507 ; if ( VAR_508 . VAR_509 < 0 || VAR_510 . VAR_511 > 1048576 ) { METHOD_77 ( ""%sisnotavalid.CAFfile!"" , VAR_512 ) ; return VAR_513 ; } VAR_514 = METHOD_78 ( VAR_515 ) ; if ( VAR_516 ) METHOD_79 ( ""extraunknownchunk\\""%c%c%c%c\\""of%dbytes"" , VAR_517 . VAR_518 [ 0 ] , VAR_519 . VAR_520 [ 1 ] , VAR_521 . VAR_522 [ 2 ] , VAR_523 . VAR_524 [ 3 ] , VAR_525 . VAR_526 ) ; if ( ! METHOD_80 ( VAR_527 , VAR_528 , VAR_529 , & VAR_530 ) || VAR_531 != VAR_532 || ( ! ( VAR_533 -> VAR_534 & VAR_535 ) && ! METHOD_81 ( VAR_536 , VAR_537 , VAR_538 ) ) ) { METHOD_82 ( ""%s"" , METHOD_83 ( VAR_539 ) ) ; METHOD_84 ( VAR_540 ) ; return VAR_541 ; } METHOD_85 ( VAR_542 ) ; } } if ( ! VAR_543 && ! VAR_544 -> VAR_545 && VAR_546 -> VAR_547 <= 2 && ! ( VAR_548 -> VAR_549 & VAR_550 ) ) VAR_551 -> VAR_552 = 0x5 - VAR_553 -> VAR_554 ; if ( ! METHOD_86 ( VAR_555 , VAR_556 , VAR_557 , VAR_558 ) ) { METHOD_87 ( ""%s"" , METHOD_88 ( VAR_559 ) ) ; return VAR_560 ; } if ( VAR_561 ) METHOD_89 ( VAR_562 ) ; if ( VAR_563 || VAR_564 ) { if ( ! METHOD_90 ( VAR_565 , VAR_566 , VAR_567 ) ) { METHOD_91 ( ""problemwithsettingchannellayout(shouldnothappen)"" ) ; return VAR_568 ; } if ( VAR_569 ) METHOD_92 ( VAR_570 ) ; } return VAR_571 ; }",261
262,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) {  VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_4 -> VAR_15 ) ;  if ( VAR_16 < 0 ) return VAR_17 ;  METHOD_2 ( STRUCT_OR_UNION_5 , STRUCT_OR_UNION_6 -> VAR_18 ) ;  if ( VAR_19 == 0 ) VAR_20 = VAR_21 ; } break ; case VAR_22 : VAR_23 = VAR_24 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_25 ) ) return VAR_26 ? - VAR_27 : 0 ; break ; default : return - VAR_28 ; } if ( VAR_29 ) { VAR_30 = METHOD_4 ( VAR_31 , & VAR_32 ) ; if ( METHOD_5 ( VAR_33 ) ) { METHOD_6 ( STRUCT_OR_UNION_8 , VAR_34 ) ; return ( TYPE_6 ) METHOD_7 ( VAR_35 ) ; } } VAR_36 = METHOD_8 ( STRUCT_OR_UNION_9 , VAR_37 , """" , VAR_38 , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_10 , VAR_43 , VAR_44 ) ; METHOD_11 ( STRUCT_OR_UNION_11 , VAR_45 ) ; return VAR_46 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) { VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_4 -> VAR_15 ) ; if ( VAR_16 < 0 ) return VAR_17 ; METHOD_2 ( STRUCT_OR_UNION_5 , STRUCT_OR_UNION_6 -> VAR_18 ) ; if ( VAR_19 == 0 ) VAR_20 = VAR_21 ; } break ; case VAR_22 : VAR_23 = VAR_24 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_25 ) ) return VAR_26 ? - VAR_27 : 0 ; break ; default : return - VAR_28 ; } if ( VAR_29 ) { VAR_30 = METHOD_4 ( VAR_31 , & VAR_32 ) ; if ( METHOD_5 ( VAR_33 ) ) { METHOD_6 ( STRUCT_OR_UNION_8 , VAR_34 ) ; return ( TYPE_6 ) METHOD_7 ( VAR_35 ) ; } } VAR_36 = METHOD_8 ( STRUCT_OR_UNION_9 , VAR_37 , """" , VAR_38 , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_10 , VAR_43 , VAR_44 ) ; METHOD_11 ( STRUCT_OR_UNION_11 , VAR_45 ) ; return VAR_46 ; }",262
263,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 * VAR_6 = ( TYPE_8 * ) ( VAR_7 + VAR_8 + VAR_9 ) ; switch ( VAR_10 -> VAR_11 ) { case VAR_12 : { TYPE_9 * VAR_13 ; VAR_14 = ( TYPE_10 * ) METHOD_1 ( sizeof ( TYPE_11 ) ) ; METHOD_2 ( VAR_15 -> VAR_16 , VAR_17 , 4 ) ; VAR_18 += 4 ; METHOD_3 ( VAR_19 -> VAR_20 , VAR_21 , 16 ) ; VAR_22 += 16 ; METHOD_4 ( VAR_23 -> VAR_24 , VAR_25 , 32 ) ; VAR_26 += 32 ; METHOD_5 ( VAR_27 -> VAR_28 , VAR_29 , 12 ) ; VAR_30 += 12 ; VAR_31 -> VAR_32 = ( ( * VAR_33 ) >> 6 ) & 0x01 ; VAR_34 -> VAR_35 = ( ( * VAR_36 ) >> 5 ) & 0x01 ; VAR_37 -> VAR_38 = ( ( * VAR_39 ) >> 4 ) & 0x01 ; VAR_40 += 1 ; VAR_41 -> VAR_42 = METHOD_6 ( ( * VAR_43 ) & 0x0F , 7 ) ; VAR_44 += 1 ; VAR_45 -> VAR_46 = METHOD_7 ( ( ( * VAR_47 ) >> 4 ) & 0x0F , 7 ) ; VAR_48 -> VAR_49 = METHOD_8 ( ( * VAR_50 ) & 0x0F , 7 ) ; VAR_51 += 1 ; VAR_52 -> VAR_53 = METHOD_9 ( ( ( * VAR_54 ) >> 4 ) & 0x0F , 7 ) ; VAR_55 -> VAR_56 = METHOD_10 ( ( * VAR_57 ) & 0x0F , 7 ) ; VAR_58 += 1 ; if ( VAR_59 -> VAR_60 != VAR_61 + 4 * ( ( TYPE_12 ) ( VAR_62 -> VAR_63 ) + ( TYPE_13 ) ( VAR_64 -> VAR_65 ) + ( TYPE_14 ) ( VAR_66 -> VAR_67 ) + ( TYPE_15 ) ( VAR_68 -> VAR_69 ) + ( TYPE_16 ) ( VAR_70 -> VAR_71 ) ) ) { METHOD_11 ( VAR_72 ) ; return VAR_73 ; } for ( VAR_74 = 0 ; VAR_75 < VAR_76 -> VAR_77 ; VAR_78 ++ ) { VAR_79 -> VAR_80 [ VAR_81 ] = METHOD_12 ( VAR_82 , VAR_83 ) ; VAR_84 += 4 ; } for ( VAR_85 = 0 ; VAR_86 < VAR_87 -> VAR_88 ; VAR_89 ++ ) { VAR_90 -> VAR_91 [ VAR_92 ] = METHOD_13 ( VAR_93 , VAR_94 ) ; VAR_95 += 4 ; } for ( VAR_96 = 0 ; VAR_97 < VAR_98 -> VAR_99 ; VAR_100 ++ ) { VAR_101 -> VAR_102 [ VAR_103 ] = METHOD_14 ( VAR_104 , VAR_105 ) ; VAR_106 += 4 ; } for ( VAR_107 = 0 ; VAR_108 < VAR_109 -> VAR_110 ; VAR_111 ++ ) { VAR_112 -> VAR_113 [ VAR_114 ] = METHOD_15 ( VAR_115 , VAR_116 ) ; VAR_117 += 4 ; } for ( VAR_118 = 0 ; VAR_119 < VAR_120 -> VAR_121 ; VAR_122 ++ ) { VAR_123 -> VAR_124 [ VAR_125 ] = METHOD_16 ( VAR_126 , VAR_127 ) ; VAR_128 += 4 ; } METHOD_17 ( VAR_129 , VAR_130 -> VAR_131 , & VAR_132 -> VAR_133 ) ; METHOD_18 ( VAR_134 , VAR_135 -> VAR_136 , & VAR_137 -> VAR_138 ) ; METHOD_19 ( VAR_139 , VAR_140 -> VAR_141 , & VAR_142 -> VAR_143 ) ; METHOD_20 ( VAR_144 , VAR_145 -> VAR_146 , & VAR_147 -> VAR_148 ) ; METHOD_21 ( VAR_149 , VAR_150 -> VAR_151 , & VAR_152 -> VAR_153 ) ; METHOD_22 ( VAR_154 -> VAR_155 , VAR_156 , 8 ) ; VAR_157 -> VAR_158 = ( TYPE_17 * ) VAR_159 ; VAR_160 -> VAR_161 = ( TYPE_18 * ) METHOD_23 ( VAR_162 * sizeof ( TYPE_19 ) ) ; METHOD_24 ( VAR_163 -> VAR_164 , VAR_165 , VAR_166 ) ; } break ; case VAR_167 : { if ( VAR_168 -> VAR_169 != VAR_170 ) { return VAR_171 ; } } break ; case VAR_172 : { TYPE_20 VAR_173 [ 32 ] ; TYPE_21 VAR_174 [ 32 ] ; TYPE_22 * VAR_175 ; TYPE_23 VAR_176 = 0 ; TYPE_24 * VAR_177 ; VAR_178 = ( TYPE_25 * ) METHOD_25 ( sizeof ( TYPE_26 ) ) ; METHOD_26 ( VAR_179 -> VAR_180 , VAR_181 , 32 ) ; VAR_182 += 32 ; if ( VAR_183 -> VAR_184 [ VAR_185 ] == VAR_186 ) { METHOD_27 ( VAR_187 ) ; return VAR_188 ; } VAR_189 = ( TYPE_27 * ) VAR_190 -> VAR_191 [ VAR_192 ] -> VAR_193 ; METHOD_28 ( VAR_194 -> VAR_195 , 32 , 32 , VAR_196 ) ; if ( METHOD_29 ( VAR_197 , VAR_198 -> VAR_199 , 32 ) != 0 ) { METHOD_30 ( VAR_200 ) ; return VAR_201 ; } METHOD_31 ( VAR_202 -> VAR_203 , 32 , VAR_204 -> VAR_205 [ VAR_206 ] -> VAR_207 + VAR_208 , VAR_209 -> VAR_210 [ VAR_211 ] -> VAR_212 - 8 , 8 , VAR_213 ) ; if ( METHOD_32 ( VAR_214 , VAR_215 -> VAR_216 , 8 ) != 0 ) { METHOD_33 ( VAR_217 ) ; return VAR_218 ; } METHOD_34 ( VAR_219 -> VAR_220 , VAR_221 , 12 ) ; VAR_222 += 12 ; VAR_223 -> VAR_224 = METHOD_35 ( VAR_225 , VAR_226 ) ; VAR_227 += 4 ; VAR_228 -> VAR_229 = METHOD_36 ( VAR_230 , VAR_231 ) ; VAR_232 += 4 ; VAR_233 -> VAR_234 = METHOD_37 ( VAR_235 , VAR_236 ) ; VAR_237 += 4 ; VAR_238 -> VAR_239 = METHOD_38 ( VAR_240 , VAR_241 ) ; VAR_242 += 4 ; switch ( VAR_243 -> VAR_244 ) { case VAR_245 : case VAR_246 : case VAR_247 : case VAR_248 : case VAR_249 : VAR_250 = 32 ; break ; case VAR_251 : VAR_252 = 24 ; break ; case VAR_253 : VAR_254 = 16 ; break ; default : METHOD_39 ( VAR_255 ) ; return VAR_256 ; } if ( VAR_257 -> VAR_258 != VAR_259 + VAR_260 ) { METHOD_40 ( VAR_261 ) ; return VAR_262 ; } VAR_263 -> VAR_264 = METHOD_41 ( VAR_265 , VAR_266 ) ; VAR_267 += 4 ; if ( ( VAR_268 -> VAR_269 == VAR_270 ) || ( VAR_271 -> VAR_272 == VAR_273 ) ) { METHOD_42 ( VAR_274 -> VAR_275 , VAR_276 , 16 ) ; VAR_277 += 16 ; if ( VAR_278 -> VAR_279 == VAR_280 ) { METHOD_43 ( VAR_281 -> VAR_282 , VAR_283 , 8 ) ; VAR_284 += 8 ; } } else { METHOD_44 ( VAR_285 -> VAR_286 , VAR_287 , 32 ) ; VAR_288 += 32 ; } METHOD_45 ( VAR_289 -> VAR_290 , VAR_291 , 8 ) ; VAR_292 -> VAR_293 = ( TYPE_28 * ) VAR_294 ; VAR_295 -> VAR_296 = ( TYPE_29 * ) METHOD_46 ( VAR_297 * sizeof ( TYPE_30 ) ) ; METHOD_47 ( VAR_298 -> VAR_299 , VAR_300 , VAR_301 ) ; } break ; case VAR_302 : case VAR_303 : { TYPE_31 * VAR_304 ; TYPE_32 VAR_305 = METHOD_48 ( VAR_306 -> VAR_307 ) ; if ( VAR_308 == 0 ) { return VAR_309 ; } if ( VAR_310 -> VAR_311 != VAR_312 + VAR_313 ) { return VAR_314 ; } VAR_315 = ( TYPE_33 * ) METHOD_49 ( sizeof ( TYPE_34 ) ) ; VAR_316 -> VAR_317 = ( TYPE_35 * ) METHOD_50 ( VAR_318 * sizeof ( TYPE_36 ) ) ; METHOD_51 ( VAR_319 -> VAR_320 , VAR_321 , 32 ) ; VAR_322 += 32 ; if ( VAR_323 -> VAR_324 == VAR_325 ) { TYPE_37 VAR_326 [ 32 ] ; TYPE_38 VAR_327 [ 32 ] ; TYPE_39 * VAR_328 ; if ( VAR_329 -> VAR_330 [ VAR_331 ] == VAR_332 ) { METHOD_52 ( VAR_333 ) ; return VAR_334 ; } VAR_335 = ( TYPE_40 * ) VAR_336 -> VAR_337 [ VAR_338 ] -> VAR_339 ; METHOD_53 ( VAR_340 -> VAR_341 , 32 , 32 , VAR_342 ) ; if ( METHOD_54 ( VAR_343 , VAR_344 -> VAR_345 , 32 ) != 0 ) { METHOD_55 ( VAR_346 ) ; return VAR_347 ; } METHOD_56 ( VAR_348 -> VAR_349 , 32 , VAR_350 -> VAR_351 [ VAR_352 ] -> VAR_353 + VAR_354 , VAR_355 -> VAR_356 [ VAR_357 ] -> VAR_358 - 8 , 8 , VAR_359 ) ; if ( METHOD_57 ( VAR_360 , VAR_361 -> VAR_362 , 8 ) != 0 ) { METHOD_58 ( VAR_363 ) ; return VAR_364 ; }  } else {  TYPE_41 VAR_365 [ 32 ] ; TYPE_42 VAR_366 [ 32 ] ; TYPE_43 VAR_367 [ 32 ] ; TYPE_44 * VAR_368 ; if ( VAR_369 -> VAR_370 [ VAR_371 ] == VAR_372 ) { METHOD_59 ( VAR_373 ) ; return VAR_374 ; } VAR_375 = ( TYPE_45 * ) VAR_376 -> VAR_377 [ VAR_378 ] -> VAR_379 ; METHOD_60 ( VAR_380 -> VAR_381 , 32 , 32 , VAR_382 ) ; METHOD_61 ( VAR_383 , 32 , 32 , VAR_384 ) ; if ( METHOD_62 ( VAR_385 , VAR_386 -> VAR_387 , 32 ) != 0 ) { METHOD_63 ( VAR_388 ) ; return VAR_389 ; } METHOD_64 ( VAR_390 , 32 , VAR_391 -> VAR_392 [ VAR_393 ] -> VAR_394 + VAR_395 , VAR_396 -> VAR_397 [ VAR_398 ] -> VAR_399 - 8 , 8 , VAR_400 ) ; if ( METHOD_65 ( VAR_401 , VAR_402 -> VAR_403 , 8 ) != 0 ) { METHOD_66 ( VAR_404 ) ; return VAR_405 ; } } METHOD_67 ( VAR_406 -> VAR_407 , VAR_408 , 8 ) ; VAR_409 += 8 ; METHOD_68 ( VAR_410 -> VAR_411 , VAR_412 , 8 ) ; VAR_413 += 8 ; METHOD_69 ( VAR_414 -> VAR_415 , VAR_416 , 8 ) ; VAR_417 += 8 ; METHOD_70 ( VAR_418 -> VAR_419 , VAR_420 , 8 ) ; VAR_421 += 8 ; METHOD_71 ( VAR_422 -> VAR_423 , VAR_424 , VAR_425 ) ; VAR_426 += VAR_427 ; METHOD_72 ( VAR_428 -> VAR_429 , VAR_430 , 8 ) ; VAR_431 -> VAR_432 = ( TYPE_46 * ) VAR_433 ; VAR_434 -> VAR_435 = ( TYPE_47 * ) METHOD_73 ( VAR_436 * sizeof ( TYPE_48 ) ) ; METHOD_74 ( VAR_437 -> VAR_438 , VAR_439 , VAR_440 ) ; } break ; case VAR_441 : case VAR_442 : { TYPE_49 * VAR_443 = VAR_444 ; TYPE_50 * VAR_445 = VAR_446 ; TYPE_51 * VAR_447 ; TYPE_52 VAR_448 ; TYPE_53 VAR_449 [ 8 ] ; TYPE_54 * VAR_450 ; TYPE_55 * VAR_451 ; if ( VAR_452 -> VAR_453 == VAR_454 ) { if ( ( VAR_455 -> VAR_456 == VAR_457 ) || ( VAR_458 -> VAR_459 == VAR_460 ) ) { return VAR_461 ; } VAR_462 = VAR_463 -> VAR_464 ; VAR_465 = VAR_466 -> VAR_467 ; } if ( VAR_468 -> VAR_469 == VAR_470 ) { if ( ( VAR_471 -> VAR_472 == VAR_473 ) || ( VAR_474 -> VAR_475 == VAR_476 ) ) { return VAR_477 ; } VAR_478 = VAR_479 -> VAR_480 ; VAR_481 = VAR_482 -> VAR_483 ; } VAR_484 = ( TYPE_56 * ) METHOD_75 ( sizeof ( TYPE_57 ) ) ; METHOD_76 ( VAR_485 -> VAR_486 , VAR_487 , 8 ) ; VAR_488 += 8 ; METHOD_77 ( VAR_489 -> VAR_490 , VAR_491 , 16 ) ; VAR_492 += 16 ; VAR_493 = VAR_494 -> VAR_495 - VAR_496 - 24 ; VAR_497 -> METHOD_78 ( VAR_498 , VAR_499 -> VAR_500 , VAR_501 , VAR_502 , 8 , VAR_503 ) ; if ( METHOD_79 ( VAR_504 , VAR_505 -> VAR_506 , 8 ) != 0 ) { METHOD_80 ( VAR_507 ) ; return VAR_508 ; } VAR_509 = ( TYPE_58 * ) METHOD_81 ( VAR_510 * sizeof ( TYPE_59 ) ) ; VAR_511 -> METHOD_82 ( VAR_512 , VAR_513 -> VAR_514 , VAR_515 , VAR_516 , VAR_517 ) ; VAR_518 = VAR_519 ; METHOD_83 ( VAR_520 -> VAR_521 , VAR_522 , 32 ) ; VAR_523 += 33 ; if ( VAR_524 -> VAR_525 == VAR_526 || VAR_527 -> VAR_528 == VAR_529 ) { TYPE_60 VAR_530 [ 32 ] ; METHOD_84 ( VAR_531 -> VAR_532 , 32 , 32 , VAR_533 ) ; if ( VAR_534 -> VAR_535 == VAR_536 ) { TYPE_61 VAR_537 [ 32 ] ; TYPE_62 VAR_538 [ 32 ] ; TYPE_63 * VAR_539 ; if ( VAR_540 -> VAR_541 [ VAR_542 ] == VAR_543 ) { METHOD_85 ( VAR_544 ) ; return VAR_545 ; } VAR_546 = ( TYPE_64 * ) VAR_547 -> VAR_548 [ VAR_549 ] -> VAR_550 ; METHOD_86 ( VAR_551 , 32 , 32 , VAR_552 ) ; if ( METHOD_87 ( VAR_553 , VAR_554 -> VAR_555 , 32 ) != 0 ) { METHOD_88 ( VAR_556 ) ; return VAR_557 ; } METHOD_89 ( VAR_558 , 32 , VAR_559 -> VAR_560 [ VAR_561 ] -> VAR_562 + VAR_563 , VAR_564 -> VAR_565 [ VAR_566 ] -> VAR_567 - 8 , 8 , VAR_568 ) ; if ( METHOD_90 ( VAR_569 , VAR_570 -> VAR_571 , 8 ) != 0 ) { METHOD_91 ( VAR_572 ) ; return VAR_573 ; } } else { TYPE_65 VAR_574 [ 32 ] ; TYPE_66 VAR_575 [ 32 ] ; TYPE_67 VAR_576 [ 32 ] ; TYPE_68 * VAR_577 ; if ( VAR_578 -> VAR_579 [ VAR_580 ] == VAR_581 ) { METHOD_92 ( VAR_582 ) ; return VAR_583 ; } VAR_584 = ( TYPE_69 * ) VAR_585 -> VAR_586 [ VAR_587 ] -> VAR_588 ; METHOD_93 ( VAR_589 , 32 , 32 , VAR_590 ) ; METHOD_94 ( VAR_591 , 32 , 32 , VAR_592 ) ; if ( METHOD_95 ( VAR_593 , VAR_594 -> VAR_595 , 32 ) != 0 ) { METHOD_96 ( VAR_596 ) ; return VAR_597 ; } METHOD_97 ( VAR_598 , 32 , VAR_599 -> VAR_600 [ VAR_601 ] -> VAR_602 + VAR_603 , VAR_604 -> VAR_605 [ VAR_606 ] -> VAR_607 - 8 , 8 , VAR_608 ) ; if ( METHOD_98 ( VAR_609 , VAR_610 -> VAR_611 , 8 ) != 0 ) { METHOD_99 ( VAR_612 ) ; return VAR_613 ; } } } else { TYPE_70 VAR_614 [ 32 ] ; TYPE_71 VAR_615 [ 32 ] ; TYPE_72 * VAR_616 ; if ( VAR_617 -> VAR_618 [ VAR_619 ] == VAR_620 ) { METHOD_100 ( VAR_621 ) ; return VAR_622 ; } VAR_623 = ( TYPE_73 * ) VAR_624 -> VAR_625 [ VAR_626 ] -> VAR_627 ; METHOD_101 ( VAR_628 -> VAR_629 , 32 , 32 , VAR_630 ) ; if ( METHOD_102 ( VAR_631 , VAR_632 -> VAR_633 , 32 ) != 0 ) { METHOD_103 ( VAR_634 ) ; return VAR_635 ; } METHOD_104 ( VAR_636 -> VAR_637 , 32 , VAR_638 -> VAR_639 [ VAR_640 ] -> VAR_641 + VAR_642 , VAR_643 -> VAR_644 [ VAR_645 ] -> VAR_646 - 8 , 8 , VAR_647 ) ; if ( METHOD_105 ( VAR_648 , VAR_649 -> VAR_650 , 8 ) != 0 ) { METHOD_106 ( VAR_651 ) ; return VAR_652 ; } } VAR_653 -> VAR_654 = ( ( TYPE_74 ) ( VAR_655 [ 0 ] & 0x01 ) ) << 8 | ( ( ( TYPE_75 ) VAR_656 [ 1 ] ) & 0x00FF ) ; VAR_657 += 2 ; VAR_658 -> VAR_659 = ( ( * VAR_660 ) & 0x08 ) >> 3 ; VAR_661 -> VAR_662 = ( ( * VAR_663 ) & 0x04 ) >> 2 ; VAR_664 -> VAR_665 = ( ( * VAR_666 ) & 0x02 ) >> 1 ; VAR_667 -> VAR_668 = ( * VAR_669 ) & 0x01 ; VAR_670 += 1 ; VAR_671 -> VAR_672 = ( ( ( TYPE_76 ) VAR_673 [ 0 ] ) << 24 ) | ( ( ( TYPE_77 ) VAR_674 [ 1 ] ) << 16 ) | ( ( ( TYPE_78 ) VAR_675 [ 2 ] ) << 8 ) | ( ( TYPE_79 ) VAR_676 [ 3 ] ) ; VAR_677 += 4 ; if ( VAR_678 -> VAR_679 > 0 ) { METHOD_107 ( VAR_680 -> VAR_681 , VAR_682 , 4 ) ; VAR_683 += 4 ; VAR_684 -> VAR_685 = ( TYPE_80 * ) METHOD_108 ( 4 * ( VAR_686 -> VAR_687 - 1 ) * sizeof ( TYPE_81 ) ) ; METHOD_109 ( VAR_688 -> VAR_689 , VAR_690 , 4 * ( VAR_691 -> VAR_692 - 1 ) ) ; } else { VAR_693 -> VAR_694 = VAR_695 ; } METHOD_110 ( VAR_696 ) ; VAR_697 -> VAR_698 = ( TYPE_82 * ) METHOD_111 ( VAR_699 * sizeof ( TYPE_83 ) ) ; METHOD_112 ( VAR_700 -> VAR_701 , VAR_702 , VAR_703 ) ; VAR_704 -> VAR_705 = ( TYPE_84 * ) VAR_706 ; } break ; case VAR_707 : break ; case VAR_708 : { TYPE_85 * VAR_709 ; VAR_710 = ( TYPE_86 * ) METHOD_113 ( sizeof ( TYPE_87 ) ) ; METHOD_114 ( VAR_711 -> VAR_712 , VAR_713 , 4 ) ; VAR_714 += 4 ; METHOD_115 ( VAR_715 -> VAR_716 , VAR_717 , 8 ) ; VAR_718 -> VAR_719 = ( TYPE_88 * ) VAR_720 ; } break ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 * VAR_6 = ( TYPE_8 * ) ( VAR_7 + VAR_8 + VAR_9 ) ; switch ( VAR_10 -> VAR_11 ) { case VAR_12 : { TYPE_9 * VAR_13 ; VAR_14 = ( TYPE_10 * ) METHOD_1 ( sizeof ( TYPE_11 ) ) ; METHOD_2 ( VAR_15 -> VAR_16 , VAR_17 , 4 ) ; VAR_18 += 4 ; METHOD_3 ( VAR_19 -> VAR_20 , VAR_21 , 16 ) ; VAR_22 += 16 ; METHOD_4 ( VAR_23 -> VAR_24 , VAR_25 , 32 ) ; VAR_26 += 32 ; METHOD_5 ( VAR_27 -> VAR_28 , VAR_29 , 12 ) ; VAR_30 += 12 ; VAR_31 -> VAR_32 = ( ( * VAR_33 ) >> 6 ) & 0x01 ; VAR_34 -> VAR_35 = ( ( * VAR_36 ) >> 5 ) & 0x01 ; VAR_37 -> VAR_38 = ( ( * VAR_39 ) >> 4 ) & 0x01 ; VAR_40 += 1 ; VAR_41 -> VAR_42 = METHOD_6 ( ( * VAR_43 ) & 0x0F , 7 ) ; VAR_44 += 1 ; VAR_45 -> VAR_46 = METHOD_7 ( ( ( * VAR_47 ) >> 4 ) & 0x0F , 7 ) ; VAR_48 -> VAR_49 = METHOD_8 ( ( * VAR_50 ) & 0x0F , 7 ) ; VAR_51 += 1 ; VAR_52 -> VAR_53 = METHOD_9 ( ( ( * VAR_54 ) >> 4 ) & 0x0F , 7 ) ; VAR_55 -> VAR_56 = METHOD_10 ( ( * VAR_57 ) & 0x0F , 7 ) ; VAR_58 += 1 ; if ( VAR_59 -> VAR_60 != VAR_61 + 4 * ( ( TYPE_12 ) ( VAR_62 -> VAR_63 ) + ( TYPE_13 ) ( VAR_64 -> VAR_65 ) + ( TYPE_14 ) ( VAR_66 -> VAR_67 ) + ( TYPE_15 ) ( VAR_68 -> VAR_69 ) + ( TYPE_16 ) ( VAR_70 -> VAR_71 ) ) ) { METHOD_11 ( VAR_72 ) ; return VAR_73 ; } for ( VAR_74 = 0 ; VAR_75 < VAR_76 -> VAR_77 ; VAR_78 ++ ) { VAR_79 -> VAR_80 [ VAR_81 ] = METHOD_12 ( VAR_82 , VAR_83 ) ; VAR_84 += 4 ; } for ( VAR_85 = 0 ; VAR_86 < VAR_87 -> VAR_88 ; VAR_89 ++ ) { VAR_90 -> VAR_91 [ VAR_92 ] = METHOD_13 ( VAR_93 , VAR_94 ) ; VAR_95 += 4 ; } for ( VAR_96 = 0 ; VAR_97 < VAR_98 -> VAR_99 ; VAR_100 ++ ) { VAR_101 -> VAR_102 [ VAR_103 ] = METHOD_14 ( VAR_104 , VAR_105 ) ; VAR_106 += 4 ; } for ( VAR_107 = 0 ; VAR_108 < VAR_109 -> VAR_110 ; VAR_111 ++ ) { VAR_112 -> VAR_113 [ VAR_114 ] = METHOD_15 ( VAR_115 , VAR_116 ) ; VAR_117 += 4 ; } for ( VAR_118 = 0 ; VAR_119 < VAR_120 -> VAR_121 ; VAR_122 ++ ) { VAR_123 -> VAR_124 [ VAR_125 ] = METHOD_16 ( VAR_126 , VAR_127 ) ; VAR_128 += 4 ; } METHOD_17 ( VAR_129 , VAR_130 -> VAR_131 , & VAR_132 -> VAR_133 ) ; METHOD_18 ( VAR_134 , VAR_135 -> VAR_136 , & VAR_137 -> VAR_138 ) ; METHOD_19 ( VAR_139 , VAR_140 -> VAR_141 , & VAR_142 -> VAR_143 ) ; METHOD_20 ( VAR_144 , VAR_145 -> VAR_146 , & VAR_147 -> VAR_148 ) ; METHOD_21 ( VAR_149 , VAR_150 -> VAR_151 , & VAR_152 -> VAR_153 ) ; METHOD_22 ( VAR_154 -> VAR_155 , VAR_156 , 8 ) ; VAR_157 -> VAR_158 = ( TYPE_17 * ) VAR_159 ; VAR_160 -> VAR_161 = ( TYPE_18 * ) METHOD_23 ( VAR_162 * sizeof ( TYPE_19 ) ) ; METHOD_24 ( VAR_163 -> VAR_164 , VAR_165 , VAR_166 ) ; } break ; case VAR_167 : { if ( VAR_168 -> VAR_169 != VAR_170 ) { return VAR_171 ; } } break ; case VAR_172 : { TYPE_20 VAR_173 [ 32 ] ; TYPE_21 VAR_174 [ 32 ] ; TYPE_22 * VAR_175 ; TYPE_23 VAR_176 = 0 ; TYPE_24 * VAR_177 ; VAR_178 = ( TYPE_25 * ) METHOD_25 ( sizeof ( TYPE_26 ) ) ; METHOD_26 ( VAR_179 -> VAR_180 , VAR_181 , 32 ) ; VAR_182 += 32 ; if ( VAR_183 -> VAR_184 [ VAR_185 ] == VAR_186 ) { METHOD_27 ( VAR_187 ) ; return VAR_188 ; } VAR_189 = ( TYPE_27 * ) VAR_190 -> VAR_191 [ VAR_192 ] -> VAR_193 ; METHOD_28 ( VAR_194 -> VAR_195 , 32 , 32 , VAR_196 ) ; if ( METHOD_29 ( VAR_197 , VAR_198 -> VAR_199 , 32 ) != 0 ) { METHOD_30 ( VAR_200 ) ; return VAR_201 ; } METHOD_31 ( VAR_202 -> VAR_203 , 32 , VAR_204 -> VAR_205 [ VAR_206 ] -> VAR_207 + VAR_208 , VAR_209 -> VAR_210 [ VAR_211 ] -> VAR_212 - 8 , 8 , VAR_213 ) ; if ( METHOD_32 ( VAR_214 , VAR_215 -> VAR_216 , 8 ) != 0 ) { METHOD_33 ( VAR_217 ) ; return VAR_218 ; } METHOD_34 ( VAR_219 -> VAR_220 , VAR_221 , 12 ) ; VAR_222 += 12 ; VAR_223 -> VAR_224 = METHOD_35 ( VAR_225 , VAR_226 ) ; VAR_227 += 4 ; VAR_228 -> VAR_229 = METHOD_36 ( VAR_230 , VAR_231 ) ; VAR_232 += 4 ; VAR_233 -> VAR_234 = METHOD_37 ( VAR_235 , VAR_236 ) ; VAR_237 += 4 ; VAR_238 -> VAR_239 = METHOD_38 ( VAR_240 , VAR_241 ) ; VAR_242 += 4 ; switch ( VAR_243 -> VAR_244 ) { case VAR_245 : case VAR_246 : case VAR_247 : case VAR_248 : case VAR_249 : VAR_250 = 32 ; break ; case VAR_251 : VAR_252 = 24 ; break ; case VAR_253 : VAR_254 = 16 ; break ; default : METHOD_39 ( VAR_255 ) ; return VAR_256 ; } if ( VAR_257 -> VAR_258 != VAR_259 + VAR_260 ) { METHOD_40 ( VAR_261 ) ; return VAR_262 ; } VAR_263 -> VAR_264 = METHOD_41 ( VAR_265 , VAR_266 ) ; VAR_267 += 4 ; if ( ( VAR_268 -> VAR_269 == VAR_270 ) || ( VAR_271 -> VAR_272 == VAR_273 ) ) { METHOD_42 ( VAR_274 -> VAR_275 , VAR_276 , 16 ) ; VAR_277 += 16 ; if ( VAR_278 -> VAR_279 == VAR_280 ) { METHOD_43 ( VAR_281 -> VAR_282 , VAR_283 , 8 ) ; VAR_284 += 8 ; } } else { METHOD_44 ( VAR_285 -> VAR_286 , VAR_287 , 32 ) ; VAR_288 += 32 ; } METHOD_45 ( VAR_289 -> VAR_290 , VAR_291 , 8 ) ; VAR_292 -> VAR_293 = ( TYPE_28 * ) VAR_294 ; VAR_295 -> VAR_296 = ( TYPE_29 * ) METHOD_46 ( VAR_297 * sizeof ( TYPE_30 ) ) ; METHOD_47 ( VAR_298 -> VAR_299 , VAR_300 , VAR_301 ) ; } break ; case VAR_302 : case VAR_303 : { TYPE_31 * VAR_304 ; TYPE_32 VAR_305 = METHOD_48 ( VAR_306 -> VAR_307 ) ; if ( VAR_308 == 0 ) { return VAR_309 ; } if ( VAR_310 -> VAR_311 != VAR_312 + VAR_313 ) { return VAR_314 ; } VAR_315 = ( TYPE_33 * ) METHOD_49 ( sizeof ( TYPE_34 ) ) ; VAR_316 -> VAR_317 = ( TYPE_35 * ) METHOD_50 ( VAR_318 * sizeof ( TYPE_36 ) ) ; METHOD_51 ( VAR_319 -> VAR_320 , VAR_321 , 32 ) ; VAR_322 += 32 ; if ( VAR_323 -> VAR_324 == VAR_325 ) { TYPE_37 VAR_326 [ 32 ] ; TYPE_38 VAR_327 [ 32 ] ; TYPE_39 * VAR_328 ; if ( VAR_329 -> VAR_330 [ VAR_331 ] == VAR_332 ) { METHOD_52 ( VAR_333 ) ; return VAR_334 ; } VAR_335 = ( TYPE_40 * ) VAR_336 -> VAR_337 [ VAR_338 ] -> VAR_339 ; METHOD_53 ( VAR_340 -> VAR_341 , 32 , 32 , VAR_342 ) ; if ( METHOD_54 ( VAR_343 , VAR_344 -> VAR_345 , 32 ) != 0 ) { METHOD_55 ( VAR_346 ) ; return VAR_347 ; } METHOD_56 ( VAR_348 -> VAR_349 , 32 , VAR_350 -> VAR_351 [ VAR_352 ] -> VAR_353 + VAR_354 , VAR_355 -> VAR_356 [ VAR_357 ] -> VAR_358 - 8 , 8 , VAR_359 ) ; if ( METHOD_57 ( VAR_360 , VAR_361 -> VAR_362 , 8 ) != 0 ) { METHOD_58 ( VAR_363 ) ; return VAR_364 ; } } else { TYPE_41 VAR_365 [ 32 ] ; TYPE_42 VAR_366 [ 32 ] ; TYPE_43 VAR_367 [ 32 ] ; TYPE_44 * VAR_368 ; if ( VAR_369 -> VAR_370 [ VAR_371 ] == VAR_372 ) { METHOD_59 ( VAR_373 ) ; return VAR_374 ; } VAR_375 = ( TYPE_45 * ) VAR_376 -> VAR_377 [ VAR_378 ] -> VAR_379 ; METHOD_60 ( VAR_380 -> VAR_381 , 32 , 32 , VAR_382 ) ; METHOD_61 ( VAR_383 , 32 , 32 , VAR_384 ) ; if ( METHOD_62 ( VAR_385 , VAR_386 -> VAR_387 , 32 ) != 0 ) { METHOD_63 ( VAR_388 ) ; return VAR_389 ; } METHOD_64 ( VAR_390 , 32 , VAR_391 -> VAR_392 [ VAR_393 ] -> VAR_394 + VAR_395 , VAR_396 -> VAR_397 [ VAR_398 ] -> VAR_399 - 8 , 8 , VAR_400 ) ; if ( METHOD_65 ( VAR_401 , VAR_402 -> VAR_403 , 8 ) != 0 ) { METHOD_66 ( VAR_404 ) ; return VAR_405 ; } } METHOD_67 ( VAR_406 -> VAR_407 , VAR_408 , 8 ) ; VAR_409 += 8 ; METHOD_68 ( VAR_410 -> VAR_411 , VAR_412 , 8 ) ; VAR_413 += 8 ; METHOD_69 ( VAR_414 -> VAR_415 , VAR_416 , 8 ) ; VAR_417 += 8 ; METHOD_70 ( VAR_418 -> VAR_419 , VAR_420 , 8 ) ; VAR_421 += 8 ; METHOD_71 ( VAR_422 -> VAR_423 , VAR_424 , VAR_425 ) ; VAR_426 += VAR_427 ; METHOD_72 ( VAR_428 -> VAR_429 , VAR_430 , 8 ) ; VAR_431 -> VAR_432 = ( TYPE_46 * ) VAR_433 ; VAR_434 -> VAR_435 = ( TYPE_47 * ) METHOD_73 ( VAR_436 * sizeof ( TYPE_48 ) ) ; METHOD_74 ( VAR_437 -> VAR_438 , VAR_439 , VAR_440 ) ; } break ; case VAR_441 : case VAR_442 : { TYPE_49 * VAR_443 = VAR_444 ; TYPE_50 * VAR_445 = VAR_446 ; TYPE_51 * VAR_447 ; TYPE_52 VAR_448 ; TYPE_53 VAR_449 [ 8 ] ; TYPE_54 * VAR_450 ; TYPE_55 * VAR_451 ; if ( VAR_452 -> VAR_453 == VAR_454 ) { if ( ( VAR_455 -> VAR_456 == VAR_457 ) || ( VAR_458 -> VAR_459 == VAR_460 ) ) { return VAR_461 ; } VAR_462 = VAR_463 -> VAR_464 ; VAR_465 = VAR_466 -> VAR_467 ; } if ( VAR_468 -> VAR_469 == VAR_470 ) { if ( ( VAR_471 -> VAR_472 == VAR_473 ) || ( VAR_474 -> VAR_475 == VAR_476 ) ) { return VAR_477 ; } VAR_478 = VAR_479 -> VAR_480 ; VAR_481 = VAR_482 -> VAR_483 ; } VAR_484 = ( TYPE_56 * ) METHOD_75 ( sizeof ( TYPE_57 ) ) ; METHOD_76 ( VAR_485 -> VAR_486 , VAR_487 , 8 ) ; VAR_488 += 8 ; METHOD_77 ( VAR_489 -> VAR_490 , VAR_491 , 16 ) ; VAR_492 += 16 ; VAR_493 = VAR_494 -> VAR_495 - VAR_496 - 24 ; VAR_497 -> METHOD_78 ( VAR_498 , VAR_499 -> VAR_500 , VAR_501 , VAR_502 , 8 , VAR_503 ) ; if ( METHOD_79 ( VAR_504 , VAR_505 -> VAR_506 , 8 ) != 0 ) { METHOD_80 ( VAR_507 ) ; return VAR_508 ; } VAR_509 = ( TYPE_58 * ) METHOD_81 ( VAR_510 * sizeof ( TYPE_59 ) ) ; VAR_511 -> METHOD_82 ( VAR_512 , VAR_513 -> VAR_514 , VAR_515 , VAR_516 , VAR_517 ) ; VAR_518 = VAR_519 ; METHOD_83 ( VAR_520 -> VAR_521 , VAR_522 , 32 ) ; VAR_523 += 33 ; if ( VAR_524 -> VAR_525 == VAR_526 || VAR_527 -> VAR_528 == VAR_529 ) { TYPE_60 VAR_530 [ 32 ] ; METHOD_84 ( VAR_531 -> VAR_532 , 32 , 32 , VAR_533 ) ; if ( VAR_534 -> VAR_535 == VAR_536 ) { TYPE_61 VAR_537 [ 32 ] ; TYPE_62 VAR_538 [ 32 ] ; TYPE_63 * VAR_539 ; if ( VAR_540 -> VAR_541 [ VAR_542 ] == VAR_543 ) { METHOD_85 ( VAR_544 ) ; return VAR_545 ; } VAR_546 = ( TYPE_64 * ) VAR_547 -> VAR_548 [ VAR_549 ] -> VAR_550 ; METHOD_86 ( VAR_551 , 32 , 32 , VAR_552 ) ; if ( METHOD_87 ( VAR_553 , VAR_554 -> VAR_555 , 32 ) != 0 ) { METHOD_88 ( VAR_556 ) ; return VAR_557 ; } METHOD_89 ( VAR_558 , 32 , VAR_559 -> VAR_560 [ VAR_561 ] -> VAR_562 + VAR_563 , VAR_564 -> VAR_565 [ VAR_566 ] -> VAR_567 - 8 , 8 , VAR_568 ) ; if ( METHOD_90 ( VAR_569 , VAR_570 -> VAR_571 , 8 ) != 0 ) { METHOD_91 ( VAR_572 ) ; return VAR_573 ; } } else { TYPE_65 VAR_574 [ 32 ] ; TYPE_66 VAR_575 [ 32 ] ; TYPE_67 VAR_576 [ 32 ] ; TYPE_68 * VAR_577 ; if ( VAR_578 -> VAR_579 [ VAR_580 ] == VAR_581 ) { METHOD_92 ( VAR_582 ) ; return VAR_583 ; } VAR_584 = ( TYPE_69 * ) VAR_585 -> VAR_586 [ VAR_587 ] -> VAR_588 ; METHOD_93 ( VAR_589 , 32 , 32 , VAR_590 ) ; METHOD_94 ( VAR_591 , 32 , 32 , VAR_592 ) ; if ( METHOD_95 ( VAR_593 , VAR_594 -> VAR_595 , 32 ) != 0 ) { METHOD_96 ( VAR_596 ) ; return VAR_597 ; } METHOD_97 ( VAR_598 , 32 , VAR_599 -> VAR_600 [ VAR_601 ] -> VAR_602 + VAR_603 , VAR_604 -> VAR_605 [ VAR_606 ] -> VAR_607 - 8 , 8 , VAR_608 ) ; if ( METHOD_98 ( VAR_609 , VAR_610 -> VAR_611 , 8 ) != 0 ) { METHOD_99 ( VAR_612 ) ; return VAR_613 ; } } } else { TYPE_70 VAR_614 [ 32 ] ; TYPE_71 VAR_615 [ 32 ] ; TYPE_72 * VAR_616 ; if ( VAR_617 -> VAR_618 [ VAR_619 ] == VAR_620 ) { METHOD_100 ( VAR_621 ) ; return VAR_622 ; } VAR_623 = ( TYPE_73 * ) VAR_624 -> VAR_625 [ VAR_626 ] -> VAR_627 ; METHOD_101 ( VAR_628 -> VAR_629 , 32 , 32 , VAR_630 ) ; if ( METHOD_102 ( VAR_631 , VAR_632 -> VAR_633 , 32 ) != 0 ) { METHOD_103 ( VAR_634 ) ; return VAR_635 ; } METHOD_104 ( VAR_636 -> VAR_637 , 32 , VAR_638 -> VAR_639 [ VAR_640 ] -> VAR_641 + VAR_642 , VAR_643 -> VAR_644 [ VAR_645 ] -> VAR_646 - 8 , 8 , VAR_647 ) ; if ( METHOD_105 ( VAR_648 , VAR_649 -> VAR_650 , 8 ) != 0 ) { METHOD_106 ( VAR_651 ) ; return VAR_652 ; } { TYPE_83 VAR_721 [ 32 ] ; TYPE_75 VAR_722 = VAR_643 -> VAR_723 [ VAR_606 ] -> VAR_646 ; TYPE_75 VAR_724 = VAR_718 -> VAR_646 + VAR_722 ; TYPE_83 * VAR_725 = ( TYPE_83 * ) METHOD_113 ( VAR_724 * sizeof ( TYPE_83 ) ) ; METHOD_115 ( VAR_725 , VAR_702 + VAR_642 , VAR_718 -> VAR_646 ) ; METHOD_115 ( VAR_725 + VAR_718 -> VAR_646 , VAR_643 -> VAR_723 [ VAR_606 ] -> VAR_701 + VAR_642 , VAR_722 ) ; VAR_643 -> METHOD_116 ( VAR_725 , VAR_724 , 32 , VAR_721 ) ; METHOD_110 ( VAR_725 ) ; if ( METHOD_105 ( VAR_721 , VAR_570 -> VAR_286 , 32 ) != 0 ) { METHOD_110 ( VAR_720 ) ; return VAR_726 ; } } } VAR_653 -> VAR_654 = ( ( TYPE_74 ) ( VAR_655 [ 0 ] & 0x01 ) ) << 8 | ( ( ( TYPE_75 ) VAR_656 [ 1 ] ) & 0x00FF ) ; VAR_657 += 2 ; VAR_658 -> VAR_659 = ( ( * VAR_660 ) & 0x08 ) >> 3 ; VAR_661 -> VAR_662 = ( ( * VAR_663 ) & 0x04 ) >> 2 ; VAR_664 -> VAR_665 = ( ( * VAR_666 ) & 0x02 ) >> 1 ; VAR_667 -> VAR_668 = ( * VAR_669 ) & 0x01 ; VAR_670 += 1 ; VAR_671 -> VAR_672 = ( ( ( TYPE_76 ) VAR_673 [ 0 ] ) << 24 ) | ( ( ( TYPE_77 ) VAR_674 [ 1 ] ) << 16 ) | ( ( ( TYPE_78 ) VAR_675 [ 2 ] ) << 8 ) | ( ( TYPE_79 ) VAR_676 [ 3 ] ) ; VAR_677 += 4 ; if ( VAR_678 -> VAR_679 > 0 ) { METHOD_107 ( VAR_680 -> VAR_681 , VAR_682 , 4 ) ; VAR_683 += 4 ; VAR_684 -> VAR_685 = ( TYPE_80 * ) METHOD_108 ( 4 * ( VAR_686 -> VAR_687 - 1 ) * sizeof ( TYPE_81 ) ) ; METHOD_109 ( VAR_688 -> VAR_689 , VAR_690 , 4 * ( VAR_691 -> VAR_692 - 1 ) ) ; } else { VAR_693 -> VAR_694 = VAR_695 ; } METHOD_110 ( VAR_696 ) ; VAR_697 -> VAR_698 = ( TYPE_82 * ) METHOD_111 ( VAR_699 * sizeof ( TYPE_83 ) ) ; METHOD_112 ( VAR_700 -> VAR_701 , VAR_702 , VAR_703 ) ; VAR_704 -> VAR_705 = ( TYPE_84 * ) VAR_706 ; } break ; case VAR_707 : break ; case VAR_708 : { TYPE_85 * VAR_709 ; VAR_710 = ( TYPE_86 * ) METHOD_113 ( sizeof ( TYPE_87 ) ) ; METHOD_114 ( VAR_711 -> VAR_712 , VAR_713 , 4 ) ; VAR_714 += 4 ; METHOD_115 ( VAR_715 -> VAR_716 , VAR_717 , 8 ) ; VAR_718 -> VAR_719 = ( TYPE_88 * ) VAR_720 ; } break ; } return 0 ; }",263
264,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_1 VAR_3 ; struct STRUCT_OR_UNION_2 VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; struct STRUCT_OR_UNION_4 VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; TYPE_4 VAR_9 ; METHOD_1 ( ""cmd%xarg%p"" , VAR_10 , VAR_11 ) ; switch ( VAR_12 ) { case VAR_13 : if ( ! METHOD_2 ( VAR_14 ) ) return - VAR_15 ; if ( METHOD_3 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; VAR_20 = METHOD_4 ( VAR_21 . VAR_22 , & VAR_23 ) ; if ( ! VAR_24 ) return VAR_25 ; VAR_26 = METHOD_5 ( VAR_27 . VAR_28 , & VAR_29 ) ; if ( ! VAR_30 ) { METHOD_6 ( VAR_31 ) ; return VAR_32 ;  }  VAR_33 = METHOD_7 ( & VAR_34 , VAR_35 , VAR_36 ) ; if ( ! VAR_37 && METHOD_8 ( VAR_38 , & VAR_39 , sizeof ( VAR_40 ) ) ) VAR_41 = - VAR_42 ; METHOD_9 ( VAR_43 ) ; METHOD_10 ( VAR_44 ) ; return VAR_45 ; case VAR_46 : if ( ! METHOD_11 ( VAR_47 ) ) return - VAR_48 ; if ( METHOD_12 ( & VAR_49 , VAR_50 , sizeof ( VAR_51 ) ) ) return - VAR_52 ; return METHOD_13 ( & VAR_53 ) ; case VAR_54 : if ( METHOD_14 ( & VAR_55 , VAR_56 , sizeof ( VAR_57 ) ) ) return - VAR_58 ; if ( VAR_59 . VAR_60 <= 0 ) return - VAR_61 ; VAR_62 = METHOD_15 ( & VAR_63 ) ; if ( ! VAR_64 && METHOD_16 ( VAR_65 , & VAR_66 , sizeof ( VAR_67 ) ) ) return - VAR_68 ; return VAR_69 ; case VAR_70 : if ( METHOD_17 ( & VAR_71 , VAR_72 , sizeof ( VAR_73 ) ) ) return - VAR_74 ; VAR_75 = METHOD_18 ( & VAR_76 ) ; if ( ! VAR_77 && METHOD_19 ( VAR_78 , & VAR_79 , sizeof ( VAR_80 ) ) ) return - VAR_81 ; return VAR_82 ; } return - VAR_83 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_1 VAR_3 ; struct STRUCT_OR_UNION_2 VAR_4 ; struct STRUCT_OR_UNION_3 VAR_5 ; struct STRUCT_OR_UNION_4 VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; TYPE_4 VAR_9 ; METHOD_1 ( ""cmd%xarg%p"" , VAR_10 , VAR_11 ) ; switch ( VAR_12 ) { case VAR_13 : if ( ! METHOD_2 ( VAR_14 ) ) return - VAR_15 ; if ( METHOD_3 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; VAR_20 = METHOD_4 ( VAR_21 . VAR_22 , & VAR_23 ) ; if ( ! VAR_24 ) return VAR_25 ; VAR_26 = METHOD_5 ( VAR_27 . VAR_28 , & VAR_29 ) ; if ( ! VAR_30 ) { METHOD_6 ( VAR_31 ) ; return VAR_32 ; } VAR_33 = METHOD_7 ( & VAR_34 , VAR_35 , VAR_36 ) ; if ( ! VAR_37 && METHOD_8 ( VAR_38 , & VAR_39 , sizeof ( VAR_40 ) ) ) VAR_41 = - VAR_42 ; METHOD_9 ( VAR_43 ) ; METHOD_10 ( VAR_44 ) ; return VAR_45 ; case VAR_46 : if ( ! METHOD_11 ( VAR_47 ) ) return - VAR_48 ; if ( METHOD_12 ( & VAR_49 , VAR_50 , sizeof ( VAR_51 ) ) ) return - VAR_52 ; return METHOD_13 ( & VAR_53 ) ; case VAR_54 : if ( METHOD_14 ( & VAR_55 , VAR_56 , sizeof ( VAR_57 ) ) ) return - VAR_58 ; if ( VAR_59 . VAR_60 <= 0 ) return - VAR_61 ; VAR_62 = METHOD_15 ( & VAR_63 ) ; if ( ! VAR_64 && METHOD_16 ( VAR_65 , & VAR_66 , sizeof ( VAR_67 ) ) ) return - VAR_68 ; return VAR_69 ; case VAR_70 : if ( METHOD_17 ( & VAR_71 , VAR_72 , sizeof ( VAR_73 ) ) ) return - VAR_74 ; VAR_75 = METHOD_18 ( & VAR_76 ) ; if ( ! VAR_77 && METHOD_19 ( VAR_78 , & VAR_79 , sizeof ( VAR_80 ) ) ) return - VAR_81 ; return VAR_82 ; } VAR_40 . VAR_84 [ sizeof ( VAR_40 . VAR_84 ) - 1 ] = 0 ; return - VAR_83 ; }",264
265,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned VAR_0 , unsigned VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 VAR_5 ; TYPE_1 VAR_6 , VAR_7 , VAR_8 = 0 ; METHOD_1 ( STRUCT_OR_UNION_6 ) ; METHOD_2 ( VAR_9 ) ; VAR_10 = 0 ; VAR_11 = - VAR_12 ; if ( VAR_13 ) { if ( VAR_14 -> VAR_15 ) return - VAR_16 ; VAR_17 = METHOD_3 ( VAR_18 , & STRUCT_OR_UNION_7 -> VAR_19 , & VAR_20 ) ; } METHOD_4 ( & VAR_21 ) ; if ( ! METHOD_5 ( VAR_22 , & STRUCT_OR_UNION_8 -> VAR_23 ) ) { METHOD_6 ( & STRUCT_OR_UNION_9 -> VAR_24 -> VAR_25 ) ; STRUCT_OR_UNION_10 -> VAR_26 = - VAR_27 ; METHOD_7 ( ) ; METHOD_8 ( VAR_28 , & STRUCT_OR_UNION_11 -> VAR_29 ) ; METHOD_9 ( VAR_30 , & STRUCT_OR_UNION_12 -> VAR_31 ) ; VAR_32 = METHOD_10 ( ) ; STRUCT_OR_UNION_13 -> VAR_33 = VAR_34 . VAR_35 + VAR_36 ; METHOD_11 ( STRUCT_OR_UNION_14 -> VAR_37 + VAR_38 ) ; if ( METHOD_12 ( VAR_39 , & STRUCT_OR_UNION_15 -> VAR_40 ) ) VAR_41 = 1 ; VAR_42 = 0 ; if ( VAR_43 && VAR_44 == 0 ) METHOD_13 ( STRUCT_OR_UNION_16 , & VAR_45 ) ; if ( VAR_46 ) METHOD_14 ( VAR_47 ) ; } METHOD_15 ( & VAR_48 ) ;  if ( VAR_49 )  METHOD_16 ( VAR_50 , & STRUCT_OR_UNION_17 -> VAR_51 , VAR_52 ) ; if ( VAR_53 ) METHOD_17 ( & STRUCT_OR_UNION_18 -> VAR_54 , VAR_55 ) ; return VAR_56 == 0 ? VAR_57 : VAR_58 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned VAR_0 , unsigned VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 VAR_5 ; TYPE_1 VAR_6 , VAR_7 , VAR_8 = 0 ; METHOD_1 ( STRUCT_OR_UNION_6 ) ; METHOD_2 ( VAR_9 ) ; VAR_10 = 0 ; VAR_11 = - VAR_12 ; if ( VAR_13 ) { if ( VAR_14 -> VAR_15 ) return - VAR_16 ; VAR_17 = METHOD_3 ( VAR_18 , & STRUCT_OR_UNION_7 -> VAR_19 , & VAR_20 ) ; } METHOD_4 ( & VAR_21 ) ; if ( ! METHOD_5 ( VAR_22 , & STRUCT_OR_UNION_8 -> VAR_23 ) ) { METHOD_6 ( & STRUCT_OR_UNION_9 -> VAR_24 -> VAR_25 ) ; STRUCT_OR_UNION_10 -> VAR_26 = - VAR_27 ; METHOD_7 ( ) ; METHOD_8 ( VAR_28 , & STRUCT_OR_UNION_11 -> VAR_29 ) ; METHOD_9 ( VAR_30 , & STRUCT_OR_UNION_12 -> VAR_31 ) ; VAR_32 = METHOD_10 ( ) ; STRUCT_OR_UNION_13 -> VAR_33 = VAR_34 . VAR_35 + VAR_36 ; METHOD_11 ( STRUCT_OR_UNION_14 -> VAR_37 + VAR_38 ) ; if ( METHOD_12 ( VAR_39 , & STRUCT_OR_UNION_15 -> VAR_40 ) ) VAR_41 = 1 ; VAR_42 = 0 ; if ( VAR_43 && VAR_44 == 0 ) METHOD_13 ( STRUCT_OR_UNION_16 , & VAR_45 ) ; if ( VAR_46 ) METHOD_14 ( VAR_47 ) ; } METHOD_15 ( & VAR_48 ) ; if ( VAR_49 ) METHOD_16 ( VAR_50 , & STRUCT_OR_UNION_17 -> VAR_51 , VAR_52 ) ; if ( VAR_53 ) METHOD_17 ( & STRUCT_OR_UNION_18 -> VAR_54 , VAR_55 ) ; return VAR_56 == 0 ? VAR_57 : VAR_58 ; }",265
266,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; const TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 , 1 ) ; TYPE_4 VAR_4 ; const TYPE_5 * VAR_5 = METHOD_2 ( VAR_6 , 2 , & VAR_7 ) ;  TYPE_6 VAR_8 = METHOD_3 ( VAR_9 , 3 , 1 ) - 1 ;  TYPE_7 VAR_10 = 0 ; METHOD_4 ( & VAR_11 ) ; while ( * VAR_12 ) { TYPE_8 VAR_13 = * VAR_14 ++ ; TYPE_9 VAR_15 = METHOD_5 ( VAR_16 , VAR_17 , & VAR_18 ) ; VAR_19 += METHOD_6 ( VAR_20 , & VAR_21 , VAR_22 , VAR_23 ) ;  METHOD_7 ( VAR_24 , VAR_25 + VAR_26 <= VAR_27 , 2 , ""datastringtooshort"" ) ;  METHOD_8 ( VAR_28 , 2 , ""toomanyresults"" ) ; switch ( VAR_29 ) { case 'b' : case 'B' : case 'h' : case 'H' : case 'l' : case 'L' : case 'T' : case 'i' : case 'I' : { TYPE_10 VAR_30 = METHOD_9 ( VAR_31 ) ; TYPE_11 VAR_32 = METHOD_10 ( VAR_33 + VAR_34 , VAR_35 . VAR_36 , VAR_37 , VAR_38 ) ; METHOD_11 ( VAR_39 , VAR_40 ) ; VAR_41 ++ ; break ; } case 'x' : { break ; } case 'f' : { TYPE_12 VAR_42 ; METHOD_12 ( & VAR_43 , VAR_44 + VAR_45 , VAR_46 ) ; METHOD_13 ( ( TYPE_13 * ) & VAR_47 , sizeof ( VAR_48 ) , VAR_49 . VAR_50 ) ; METHOD_14 ( VAR_51 , VAR_52 ) ; VAR_53 ++ ; break ; } case 'd' : { TYPE_14 VAR_54 ; METHOD_15 ( & VAR_55 , VAR_56 + VAR_57 , VAR_58 ) ; METHOD_16 ( ( TYPE_15 * ) & VAR_59 , sizeof ( VAR_60 ) , VAR_61 . VAR_62 ) ; METHOD_17 ( VAR_63 , VAR_64 ) ; VAR_65 ++ ; break ; } case 'c' : { if ( VAR_66 == 0 ) { if ( VAR_67 == 0 || ! METHOD_18 ( VAR_68 , - 1 ) ) METHOD_19 ( VAR_69 , ""format\'c0\'needsaprevioussize"" ) ; VAR_70 = METHOD_20 ( VAR_71 , - 1 ) ; METHOD_21 ( VAR_72 , 1 ) ; VAR_73 -- ; METHOD_22 ( VAR_74 , VAR_75 <= VAR_76 && VAR_77 <= VAR_78 - VAR_79 , 2 , ""datastringtooshort"" ) ; } METHOD_23 ( VAR_80 , VAR_81 + VAR_82 , VAR_83 ) ; VAR_84 ++ ; break ; } case 's' : { const TYPE_16 * VAR_85 = ( const TYPE_17 * ) METHOD_24 ( VAR_86 + VAR_87 , '\\0' , VAR_88 - VAR_89 ) ; if ( VAR_90 == VAR_91 ) METHOD_25 ( VAR_92 , ""unfinishedstringindata"" ) ; VAR_93 = ( VAR_94 - ( VAR_95 + VAR_96 ) ) + 1 ; METHOD_26 ( VAR_97 , VAR_98 + VAR_99 , VAR_100 - 1 ) ; VAR_101 ++ ; break ; } default : METHOD_27 ( VAR_102 , VAR_103 , & VAR_104 , & VAR_105 ) ; } VAR_106 += VAR_107 ; } METHOD_28 ( VAR_108 , VAR_109 + 1 ) ; return VAR_110 + 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; const TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 , 1 ) ; TYPE_4 VAR_4 ; const TYPE_5 * VAR_5 = METHOD_2 ( VAR_6 , 2 , & VAR_7 ) ; TYPE_6 VAR_8 = METHOD_3 ( VAR_9 , 3 , 1 ) - 1 ; TYPE_7 VAR_10 = 0 ; METHOD_4 ( & VAR_11 ) ; while ( * VAR_12 ) { TYPE_8 VAR_13 = * VAR_14 ++ ; TYPE_9 VAR_15 = METHOD_5 ( VAR_16 , VAR_17 , & VAR_18 ) ; VAR_19 += METHOD_6 ( VAR_20 , & VAR_21 , VAR_22 , VAR_23 ) ; METHOD_7 ( VAR_24 , VAR_25 + VAR_26 <= VAR_27 , 2 , ""datastringtooshort"" ) ; METHOD_8 ( VAR_28 , 2 , ""toomanyresults"" ) ; switch ( VAR_29 ) { case 'b' : case 'B' : case 'h' : case 'H' : case 'l' : case 'L' : case 'T' : case 'i' : case 'I' : { TYPE_10 VAR_30 = METHOD_9 ( VAR_31 ) ; TYPE_11 VAR_32 = METHOD_10 ( VAR_33 + VAR_34 , VAR_35 . VAR_36 , VAR_37 , VAR_38 ) ; METHOD_11 ( VAR_39 , VAR_40 ) ; VAR_41 ++ ; break ; } case 'x' : { break ; } case 'f' : { TYPE_12 VAR_42 ; METHOD_12 ( & VAR_43 , VAR_44 + VAR_45 , VAR_46 ) ; METHOD_13 ( ( TYPE_13 * ) & VAR_47 , sizeof ( VAR_48 ) , VAR_49 . VAR_50 ) ; METHOD_14 ( VAR_51 , VAR_52 ) ; VAR_53 ++ ; break ; } case 'd' : { TYPE_14 VAR_54 ; METHOD_15 ( & VAR_55 , VAR_56 + VAR_57 , VAR_58 ) ; METHOD_16 ( ( TYPE_15 * ) & VAR_59 , sizeof ( VAR_60 ) , VAR_61 . VAR_62 ) ; METHOD_17 ( VAR_63 , VAR_64 ) ; VAR_65 ++ ; break ; } case 'c' : { if ( VAR_66 == 0 ) { if ( VAR_67 == 0 || ! METHOD_18 ( VAR_68 , - 1 ) ) METHOD_19 ( VAR_69 , ""format\'c0\'needsaprevioussize"" ) ; VAR_70 = METHOD_20 ( VAR_71 , - 1 ) ; METHOD_21 ( VAR_72 , 1 ) ; VAR_73 -- ; METHOD_22 ( VAR_74 , VAR_75 <= VAR_76 && VAR_77 <= VAR_78 - VAR_79 , 2 , ""datastringtooshort"" ) ; } METHOD_23 ( VAR_80 , VAR_81 + VAR_82 , VAR_83 ) ; VAR_84 ++ ; break ; } case 's' : { const TYPE_16 * VAR_85 = ( const TYPE_17 * ) METHOD_24 ( VAR_86 + VAR_87 , '\\0' , VAR_88 - VAR_89 ) ; if ( VAR_90 == VAR_91 ) METHOD_25 ( VAR_92 , ""unfinishedstringindata"" ) ; VAR_93 = ( VAR_94 - ( VAR_95 + VAR_96 ) ) + 1 ; METHOD_26 ( VAR_97 , VAR_98 + VAR_99 , VAR_100 - 1 ) ; VAR_101 ++ ; break ; } default : METHOD_27 ( VAR_102 , VAR_103 , & VAR_104 , & VAR_105 ) ; } VAR_106 += VAR_107 ; } METHOD_28 ( VAR_108 , VAR_109 + 1 ) ; return VAR_110 + 1 ; }",266
267,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; unsigned TYPE_1 VAR_5 ; TYPE_2 VAR_6 ; METHOD_1 ( & VAR_7 -> VAR_8 ) ; VAR_9 = METHOD_2 ( VAR_10 , & VAR_11 -> VAR_12 ) ; if ( VAR_13 == VAR_14 ) { VAR_15 = - VAR_16 ; } else { VAR_17 = METHOD_3 ( VAR_18 , & VAR_19 -> VAR_20 ) ; VAR_21 = & VAR_22 -> VAR_23 [ VAR_24 ] ; if ( ! ( VAR_25 -> VAR_26 & VAR_27 ) || VAR_28 -> METHOD_4 == VAR_29 || ( VAR_30 && VAR_31 -> VAR_32 && VAR_33 -> VAR_34 != VAR_35 ) ) { VAR_36 = - VAR_37 ; } else { METHOD_5 ( & VAR_38 -> VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = VAR_43 -> METHOD_6 ( VAR_44 , VAR_45 ) ; } if ( VAR_46 > 0 ) {  METHOD_7 ( & VAR_47 -> VAR_48 ) ;  METHOD_8 ( VAR_49 , VAR_50 ,  & VAR_51 -> VAR_52 ) ;  return 0 ; } } METHOD_9 ( & VAR_53 -> VAR_54 ) ; return VAR_55 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; unsigned TYPE_1 VAR_5 ; TYPE_2 VAR_6 ; METHOD_1 ( & VAR_7 -> VAR_8 ) ; VAR_9 = METHOD_2 ( VAR_10 , & VAR_11 -> VAR_12 ) ; if ( VAR_13 == VAR_14 ) { VAR_15 = - VAR_16 ; } else { VAR_17 = METHOD_3 ( VAR_18 , & VAR_19 -> VAR_20 ) ; VAR_21 = & VAR_22 -> VAR_23 [ VAR_24 ] ; if ( ! ( VAR_25 -> VAR_26 & VAR_27 ) || VAR_28 -> METHOD_4 == VAR_29 || ( VAR_30 && VAR_31 -> VAR_32 && VAR_33 -> VAR_34 != VAR_35 ) ) { VAR_36 = - VAR_37 ; } else { METHOD_5 ( & VAR_38 -> VAR_39 , VAR_40 , VAR_41 ) ; VAR_42 = VAR_43 -> METHOD_6 ( VAR_44 , VAR_45 ) ; } if ( VAR_46 > 0 ) { struct STRUCT_OR_UNION_5 VAR_52 = VAR_51 -> VAR_52 ; METHOD_7 ( & VAR_47 -> VAR_48 ) ; METHOD_8 ( VAR_49 , VAR_50 , & VAR_52 ) ; return 0 ; } } METHOD_9 ( & VAR_53 -> VAR_54 ) ; return VAR_55 ; }",267
268,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ;  VAR_2 = VAR_3 -> VAR_4 ;   if ( ! METHOD_1 ( VAR_5 ) )  return ; METHOD_2 ( VAR_6 ) ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 = VAR_3 -> VAR_4 ; if ( ! METHOD_1 ( VAR_5 ) ) return ; METHOD_2 ( VAR_6 ) ; },268
269,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { unsigned TYPE_2 VAR_2 , VAR_3 , VAR_4 , VAR_5 ; unsigned TYPE_3 VAR_6 = 0 ;  METHOD_1 ( VAR_7 , 1 , 0 , VAR_8 , VAR_9 -> VAR_10 ) ;  if ( VAR_11 -> VAR_12 != VAR_13 ) { METHOD_2 ( ""\\""%s\\""(%ld)usesdeprecatedSWP{B}instruction\\n"" , VAR_14 -> VAR_15 , ( unsigned TYPE_4 ) VAR_16 -> VAR_17 ) ; VAR_18 = VAR_19 -> VAR_20 ; } VAR_21 = VAR_22 -> VAR_23 [ METHOD_3 ( VAR_24 , VAR_25 ) ] ; VAR_26 = VAR_27 -> VAR_28 [ METHOD_4 ( VAR_29 , VAR_30 ) ] ; VAR_31 = METHOD_5 ( VAR_32 , VAR_33 ) ; VAR_34 = VAR_35 & VAR_36 ; METHOD_6 ( ""addrinr%d->0x%08x,destisr%d,sourceinr%d->0x%08x)\\n"" , METHOD_7 ( VAR_37 , VAR_38 ) , VAR_39 , VAR_40 , METHOD_8 ( VAR_41 , VAR_42 ) , VAR_43 ) ; if ( ! METHOD_9 ( VAR_44 , ( VAR_45 & ~ 3 ) , 4 ) ) { METHOD_10 ( ""SWP{B}emulation:accessto%pnotallowed!\\n"" , ( TYPE_5 * ) VAR_46 ) ; VAR_47 = - VAR_48 ; } else { VAR_49 = METHOD_11 ( VAR_50 , & VAR_51 , VAR_52 ) ; } if ( VAR_53 == 0 ) { VAR_54 -> VAR_55 += 4 ; VAR_56 -> VAR_57 [ VAR_58 ] = VAR_59 ; } else if ( VAR_60 == - VAR_61 ) { METHOD_12 ( VAR_62 , VAR_63 ) ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { unsigned TYPE_2 VAR_2 , VAR_3 , VAR_4 , VAR_5 ; unsigned TYPE_3 VAR_6 = 0 ; METHOD_1 ( VAR_7 , 1 , 0 , VAR_8 , VAR_9 -> VAR_10 ) ; if ( VAR_11 -> VAR_12 != VAR_13 ) { METHOD_2 ( ""\\""%s\\""(%ld)usesdeprecatedSWP{B}instruction\\n"" , VAR_14 -> VAR_15 , ( unsigned TYPE_4 ) VAR_16 -> VAR_17 ) ; VAR_18 = VAR_19 -> VAR_20 ; } VAR_21 = VAR_22 -> VAR_23 [ METHOD_3 ( VAR_24 , VAR_25 ) ] ; VAR_26 = VAR_27 -> VAR_28 [ METHOD_4 ( VAR_29 , VAR_30 ) ] ; VAR_31 = METHOD_5 ( VAR_32 , VAR_33 ) ; VAR_34 = VAR_35 & VAR_36 ; METHOD_6 ( ""addrinr%d->0x%08x,destisr%d,sourceinr%d->0x%08x)\\n"" , METHOD_7 ( VAR_37 , VAR_38 ) , VAR_39 , VAR_40 , METHOD_8 ( VAR_41 , VAR_42 ) , VAR_43 ) ; if ( ! METHOD_9 ( VAR_44 , ( VAR_45 & ~ 3 ) , 4 ) ) { METHOD_10 ( ""SWP{B}emulation:accessto%pnotallowed!\\n"" , ( TYPE_5 * ) VAR_46 ) ; VAR_47 = - VAR_48 ; } else { VAR_49 = METHOD_11 ( VAR_50 , & VAR_51 , VAR_52 ) ; } if ( VAR_53 == 0 ) { VAR_54 -> VAR_55 += 4 ; VAR_56 -> VAR_57 [ VAR_58 ] = VAR_59 ; } else if ( VAR_60 == - VAR_61 ) { METHOD_12 ( VAR_62 , VAR_63 ) ; } return 0 ; }",269
270,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_2 -> STRUCT_OR_UNION_4 ; TYPE_1 VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 = METHOD_1 ( STRUCT_OR_UNION_9 ) ; struct STRUCT_OR_UNION_10 * VAR_8 = STRUCT_OR_UNION_11 -> VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; TYPE_4 VAR_14 = 0 ; METHOD_2 ( STRUCT_OR_UNION_12 -> VAR_15 ) ;  METHOD_3 ( VAR_16 -> VAR_17 ) ;  if ( METHOD_4 ( STRUCT_OR_UNION_13 -> VAR_18 , VAR_19 ) && ! METHOD_5 ( STRUCT_OR_UNION_14 ) && ! METHOD_6 ( STRUCT_OR_UNION_15 -> VAR_20 ) ) { do { VAR_21 = METHOD_7 ( VAR_22 , VAR_23 , VAR_24 ) ; } while ( VAR_25 == - VAR_26 && METHOD_8 ( STRUCT_OR_UNION_16 -> VAR_27 , & VAR_28 ) ) ; goto VAR_29 ; } METHOD_9 ( STRUCT_OR_UNION_17 ) ; VAR_30 = METHOD_10 ( STRUCT_OR_UNION_18 ) ; if ( STRUCT_OR_UNION_19 -> VAR_31 != VAR_32 || METHOD_11 ( STRUCT_OR_UNION_20 ) > VAR_33 ) { METHOD_12 ( STRUCT_OR_UNION_21 ) ; VAR_34 = VAR_35 ; goto VAR_36 ; } if ( STRUCT_OR_UNION_22 -> VAR_37 == VAR_38 >> VAR_39 ) VAR_40 = VAR_41 & ~ VAR_42 ; else VAR_43 = VAR_44 ; if ( METHOD_13 ( STRUCT_OR_UNION_23 ) ) { if ( ! METHOD_14 ( VAR_45 , METHOD_15 ( STRUCT_OR_UNION_24 ) , 0 , VAR_46 , VAR_47 , VAR_48 ) ) { METHOD_16 ( STRUCT_OR_UNION_25 ) ; VAR_49 = VAR_50 ; goto VAR_51 ; } } METHOD_17 ( STRUCT_OR_UNION_26 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_27 ) ) VAR_52 = VAR_53 ; else VAR_54 = VAR_55 ; VAR_56 : VAR_57 = METHOD_19 ( STRUCT_OR_UNION_28 , VAR_58 , METHOD_20 ( STRUCT_OR_UNION_29 ) ) ; if ( METHOD_21 ( VAR_59 ) ) { VAR_60 = VAR_61 ; goto VAR_62 ; } VAR_63 = METHOD_22 ( VAR_64 , VAR_65 , VAR_66 ) ; if ( ! VAR_67 && METHOD_23 ( STRUCT_OR_UNION_30 ) ) { if ( METHOD_24 ( VAR_68 , METHOD_25 ( STRUCT_OR_UNION_31 ) , 0 , VAR_69 , VAR_70 , VAR_71 ) ) { METHOD_26 ( STRUCT_OR_UNION_32 ) ; VAR_72 = VAR_73 ; METHOD_27 ( VAR_74 ) ; goto VAR_75 ; } METHOD_28 ( STRUCT_OR_UNION_33 , VAR_76 ) ; } METHOD_29 ( VAR_77 ) ; if ( VAR_78 == - VAR_79 && METHOD_30 ( STRUCT_OR_UNION_34 -> VAR_80 , & VAR_81 ) ) goto VAR_82 ; VAR_83 : VAR_84 = METHOD_31 ( VAR_85 ) ; VAR_86 :  METHOD_32 ( STRUCT_OR_UNION_35 -> VAR_87 ) ;  return VAR_88 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_2 -> STRUCT_OR_UNION_4 ; TYPE_1 VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 = METHOD_1 ( STRUCT_OR_UNION_9 ) ; struct STRUCT_OR_UNION_10 * VAR_8 = STRUCT_OR_UNION_11 -> VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; TYPE_4 VAR_14 = 0 ; METHOD_2 ( STRUCT_OR_UNION_12 -> VAR_15 ) ; METHOD_3 ( VAR_16 -> VAR_17 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_13 -> VAR_18 , VAR_19 ) && ! METHOD_5 ( STRUCT_OR_UNION_14 ) && ! METHOD_6 ( STRUCT_OR_UNION_15 -> VAR_20 ) ) { do { VAR_21 = METHOD_7 ( VAR_22 , VAR_23 , VAR_24 ) ; } while ( VAR_25 == - VAR_26 && METHOD_8 ( STRUCT_OR_UNION_16 -> VAR_27 , & VAR_28 ) ) ; goto VAR_29 ; } METHOD_9 ( STRUCT_OR_UNION_17 ) ; VAR_30 = METHOD_10 ( STRUCT_OR_UNION_18 ) ; if ( STRUCT_OR_UNION_19 -> VAR_31 != VAR_32 || METHOD_11 ( STRUCT_OR_UNION_20 ) > VAR_33 ) { METHOD_12 ( STRUCT_OR_UNION_21 ) ; VAR_34 = VAR_35 ; goto VAR_36 ; } if ( STRUCT_OR_UNION_22 -> VAR_37 == VAR_38 >> VAR_39 ) VAR_40 = VAR_41 & ~ VAR_42 ; else VAR_43 = VAR_44 ; if ( METHOD_13 ( STRUCT_OR_UNION_23 ) ) { if ( ! METHOD_14 ( VAR_45 , METHOD_15 ( STRUCT_OR_UNION_24 ) , 0 , VAR_46 , VAR_47 , VAR_48 ) ) { METHOD_16 ( STRUCT_OR_UNION_25 ) ; VAR_49 = VAR_50 ; goto VAR_51 ; } } METHOD_17 ( STRUCT_OR_UNION_26 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_27 ) ) VAR_52 = VAR_53 ; else VAR_54 = VAR_55 ; VAR_56 : VAR_57 = METHOD_19 ( STRUCT_OR_UNION_28 , VAR_58 , METHOD_20 ( STRUCT_OR_UNION_29 ) ) ; if ( METHOD_21 ( VAR_59 ) ) { VAR_60 = VAR_61 ; goto VAR_62 ; } VAR_63 = METHOD_22 ( VAR_64 , VAR_65 , VAR_66 ) ; if ( ! VAR_67 && METHOD_23 ( STRUCT_OR_UNION_30 ) ) { if ( METHOD_24 ( VAR_68 , METHOD_25 ( STRUCT_OR_UNION_31 ) , 0 , VAR_69 , VAR_70 , VAR_71 ) ) { METHOD_26 ( STRUCT_OR_UNION_32 ) ; VAR_72 = VAR_73 ; METHOD_27 ( VAR_74 ) ; goto VAR_75 ; } METHOD_28 ( STRUCT_OR_UNION_33 , VAR_76 ) ; } METHOD_29 ( VAR_77 ) ; if ( VAR_78 == - VAR_79 && METHOD_30 ( STRUCT_OR_UNION_34 -> VAR_80 , & VAR_81 ) ) goto VAR_82 ; VAR_83 : VAR_84 = METHOD_31 ( VAR_85 ) ; VAR_86 : METHOD_34 ( & METHOD_33 ( STRUCT_OR_UNION_35 ) -> VAR_89 ) ; METHOD_32 ( STRUCT_OR_UNION_35 -> VAR_87 ) ; return VAR_88 ; }",270
271,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  TYPE_5 * const VAR_4 [ 4 ] = { VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 ,  VAR_11 -> VAR_12 } ;  const TYPE_6 VAR_13 [ 4 ] = { VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ,  VAR_20 -> VAR_21 } ; TYPE_7 VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = VAR_26 ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 ; VAR_30 ++ ) METHOD_1 ( & VAR_31 -> VAR_32 [ VAR_33 ] . VAR_34 , VAR_35 [ VAR_36 ] , VAR_37 [ VAR_38 ] , VAR_39 , VAR_40 , VAR_41 , VAR_42 -> VAR_43 . VAR_44 [ VAR_45 ] . VAR_46 , VAR_47 -> VAR_48 . VAR_49 [ VAR_50 ] . VAR_51 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * const VAR_4 [ 4 ] = { VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 , VAR_11 -> VAR_12 } ; const TYPE_6 VAR_13 [ 4 ] = { VAR_14 -> VAR_15 , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 , VAR_20 -> VAR_21 } ; TYPE_7 VAR_22 ; VAR_23 -> VAR_24 . VAR_25 = VAR_26 ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 ; VAR_30 ++ ) METHOD_1 ( & VAR_31 -> VAR_32 [ VAR_33 ] . VAR_34 , VAR_35 [ VAR_36 ] , VAR_37 [ VAR_38 ] , VAR_39 , VAR_40 , VAR_41 , VAR_42 -> VAR_43 . VAR_44 [ VAR_45 ] . VAR_46 , VAR_47 -> VAR_48 . VAR_49 [ VAR_50 ] . VAR_51 ) ; }",271
272,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  TYPE_4 * VAR_3 , * VAR_4 ;  TYPE_5 * VAR_5 ;  TYPE_6 VAR_6 = - 1 , VAR_7 = - 1 ;   TYPE_7 VAR_8 = 0 ;  TYPE_8 VAR_9 ; TYPE_9 * VAR_10 ; TYPE_10 VAR_11 ; unsigned TYPE_11 VAR_12 ; TYPE_12 * VAR_13 = ( TYPE_13 * ) VAR_14 -> VAR_15 ; TYPE_14 VAR_16 , VAR_17 ; if ( VAR_18 -> VAR_19 ) { if ( VAR_20 -> VAR_21 > VAR_22 ) { METHOD_1 ( VAR_23 , VAR_24 -> VAR_25 + VAR_26 -> VAR_27 , VAR_28 ) ; VAR_29 = VAR_30 ; VAR_31 -> VAR_32 -= VAR_33 ; VAR_34 -> VAR_35 += VAR_36 ; } else { METHOD_2 ( VAR_37 , VAR_38 -> VAR_39 + VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; VAR_44 = VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = 0 ; VAR_49 -> VAR_50 = 0 ; } goto VAR_51 ; } VAR_52 = VAR_53 -> VAR_54 ; VAR_55 = ( TYPE_15 * ) VAR_56 -> VAR_57 ; VAR_58 = METHOD_3 ( VAR_59 , VAR_60 , METHOD_4 ( VAR_61 ) + VAR_62 ) ; if ( VAR_63 < 2 ) { if ( - 1 == VAR_64 ) { TYPE_16 VAR_65 = VAR_66 ; METHOD_5 ( ""%s:peek;%m\\n"" , VAR_67 ) ; VAR_68 = VAR_69 ;  } else if ( 0 == VAR_70 ) {  VAR_71 = 0 ; } else { VAR_72 = VAR_73 ; } goto VAR_74 ; } VAR_75 = VAR_76 -> VAR_77 & 0x0f ; VAR_78 = VAR_79 -> VAR_80 & 0x7f ; if ( ! ( VAR_81 -> VAR_82 & 0x80 ) ) { METHOD_6 ( ""%s:gotframewithoutmask\\n"" , VAR_83 , VAR_84 ) ; VAR_85 = VAR_86 ; goto VAR_87 ; } if ( VAR_88 < 126 ) { VAR_89 = 2 ; VAR_90 = VAR_91 -> VAR_92 . VAR_93 ; } else if ( VAR_94 == 126 && 4 <= VAR_95 ) { VAR_96 = METHOD_7 ( VAR_97 -> VAR_98 . VAR_99 . VAR_100 ) ; VAR_101 = 4 ; VAR_102 = VAR_103 -> VAR_104 . VAR_105 . VAR_106 ; } else if ( VAR_107 == 127 && 10 <= VAR_108 ) { VAR_109 = METHOD_8 ( VAR_110 -> VAR_111 . VAR_112 . VAR_113 ) ; VAR_114 = 10 ; VAR_115 = VAR_116 -> VAR_117 . VAR_118 . VAR_119 ; } else { METHOD_9 ( ""%s:incompleteframeheader\\n"" , VAR_120 , VAR_121 ) ; VAR_122 = VAR_123 ; goto VAR_124 ; } VAR_125 = VAR_126 + VAR_127 + 4 ; VAR_128 = VAR_129 + VAR_130 + 4 ; if ( - 1 == ( VAR_131 = METHOD_10 ( VAR_132 , VAR_133 , VAR_134 ) ) ) { TYPE_17 VAR_135 = VAR_136 ; METHOD_11 ( ""%s:read;%m"" , VAR_137 ) ; VAR_138 = VAR_139 ; return VAR_140 ; } else if ( VAR_141 < VAR_142 ) { METHOD_12 ( ""%s:read;gotpartialdata\\n"" , VAR_143 ) ; } else { VAR_144 [ VAR_145 ] = '\\0' ; } VAR_146 = ( TYPE_18 * ) VAR_147 ; for ( VAR_148 = 0 ; VAR_149 < VAR_150 / 4 ; VAR_151 ++ ) { VAR_152 [ VAR_153 ] ^= VAR_154 . VAR_155 ; } for ( VAR_156 *= 4 ; VAR_157 < VAR_158 ; VAR_159 ++ ) { VAR_160 [ VAR_161 ] ^= VAR_162 . VAR_163 [ VAR_164 % 4 ] ; } switch ( VAR_165 ) { case VAR_166 : METHOD_13 ( ""gotclosure,reason%d\\n"" , METHOD_14 ( ( ( TYPE_19 * ) VAR_167 ) [ 0 ] ) ) ; VAR_168 = VAR_169 ; break ; case VAR_170 : if ( - 1 == ( VAR_171 = METHOD_15 ( VAR_172 , ( unsigned TYPE_20 * ) VAR_173 -> VAR_174 , sizeof ( VAR_175 -> VAR_176 ) ) ) ) { METHOD_16 ( ""%s:Base64decodeerror;%m\\n"" , VAR_177 ) ; break ; } VAR_178 = VAR_179 -> VAR_180 ; case VAR_181 : if ( VAR_182 > VAR_183 ) { METHOD_17 ( VAR_184 -> VAR_185 , VAR_186 + VAR_187 , VAR_188 - VAR_189 ) ; VAR_190 -> VAR_191 = 0 ; VAR_192 -> VAR_193 = VAR_194 - VAR_195 ; VAR_196 = VAR_197 ; } METHOD_18 ( VAR_198 , VAR_199 , VAR_200 ) ; VAR_201 = VAR_202 ; break ; default : METHOD_19 ( ""%s:unhandledopcode%d,b0:%02x,b1:%02x\\n"" , VAR_203 , ( TYPE_21 ) VAR_204 , VAR_205 -> VAR_206 , VAR_207 -> VAR_208 ) ; } VAR_209 : return VAR_210 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 * VAR_3 , * VAR_4 ; TYPE_5 * VAR_5 ; TYPE_6 VAR_6 = - 1 , VAR_7 = - 1 ; VAR_168 = VAR_123 ; VAR_192 -> VAR_211 = VAR_212 ; } VAR_209 : if ( VAR_192 -> VAR_211 == WS_HYBI_STATE_FRAME_COMPLETE ) { METHOD_13 ( ""framereceivedsuccessfully,cleaningup:read=%dhlen=%dplen=%d\\n"" , VAR_192 -> VAR_207 . nRead , VAR_192 -> VAR_207 . headerLen , VAR_192 -> VAR_207 . payloadLen ) ; METHOD_20 ( VAR_192 ) ; } else { METHOD_2 ( VAR_37 , VAR_38 -> VAR_39 + VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; VAR_44 = VAR_45 -> VAR_46 ; VAR_47 -> VAR_48 = 0 ; VAR_49 -> VAR_50 = 0 ; } goto VAR_51 ; } VAR_52 = VAR_53 -> VAR_54 ; VAR_55 = ( TYPE_15 * ) VAR_56 -> VAR_57 ; VAR_58 = METHOD_3 ( VAR_59 , VAR_60 , METHOD_4 ( VAR_61 ) + VAR_62 ) ; if ( VAR_63 < 2 ) { if ( - 1 == VAR_64 ) { TYPE_16 VAR_65 = VAR_66 ; METHOD_5 ( ""%s:peek;%m\\n"" , VAR_67 ) ; VAR_68 = VAR_69 ; } else if ( VAR_192 -> VAR_211 == VAR_212 ) { METHOD_20 ( VAR_192 ) ; } METHOD_13 ( ""%s_exit:len=%d;"" ""CTX:readlen=%dreadPos=%p"" ""writePos=%p"" ""state=%dtoRead=%dremaining=%d"" ""nRead=%dcarrylen=%dcarryBuf=%p"" ""result=%d\\n"" , VAR_203 , VAR_197 , VAR_192 -> VAR_213 , VAR_192 -> VAR_214 , VAR_192 -> VAR_215 , VAR_192 -> VAR_211 , VAR_192 -> VAR_216 , METHOD_21 ( VAR_192 ) , VAR_192 -> VAR_217 , VAR_192 -> VAR_218 , VAR_192 -> VAR_219 , VAR_210 ) ; return VAR_210 ; }",272
273,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ;  TYPE_5 VAR_4 = VAR_5 -> VAR_6 ;  VAR_7 = VAR_8 -> VAR_9 ; VAR_10 = ( 1.0 - ( VAR_11 / 20.0 ) ) ; if ( VAR_12 < VAR_13 ) VAR_14 = VAR_15 ; { TYPE_6 VAR_16 ; TYPE_7 VAR_17 ; TYPE_8 VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 -> VAR_21 * VAR_22 ) ; VAR_23 = METHOD_2 ( VAR_24 -> VAR_25 * VAR_26 ) ; VAR_27 = METHOD_3 ( ( VAR_28 * VAR_29 ) + ( VAR_30 * VAR_31 ) ) / 250.0 ; VAR_32 = ( ( VAR_33 > 1.0 ) ? 0.0 : ( 1.0 - VAR_34 ) ) ; if ( VAR_35 < VAR_36 ) VAR_37 = VAR_38 ; } return VAR_39 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 = VAR_5 -> VAR_6 ; VAR_7 = VAR_8 -> VAR_9 ; VAR_10 = ( 1.0 - ( VAR_11 / 20.0 ) ) ; if ( VAR_12 < VAR_13 ) VAR_14 = VAR_15 ; { TYPE_6 VAR_16 ; TYPE_7 VAR_17 ; TYPE_8 VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 -> VAR_21 * VAR_22 ) ; VAR_23 = METHOD_2 ( VAR_24 -> VAR_25 * VAR_26 ) ; VAR_27 = METHOD_3 ( ( VAR_28 * VAR_29 ) + ( VAR_30 * VAR_31 ) ) / 250.0 ; VAR_32 = ( ( VAR_33 > 1.0 ) ? 0.0 : ( 1.0 - VAR_34 ) ) ; if ( VAR_35 < VAR_36 ) VAR_37 = VAR_38 ; } return VAR_39 ; }",273
274,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_3 VAR_3 ; TYPE_4 * VAR_4 = VAR_5 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) {  VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_3 -> VAR_15 ) ;  if ( VAR_16 < 0 ) return VAR_17 ; else { STRUCT_OR_UNION_4 -> VAR_18 = METHOD_2 ( STRUCT_OR_UNION_5 ) ; METHOD_3 ( VAR_19 , STRUCT_OR_UNION_6 ) ;  if ( VAR_20 == 0 )  VAR_21 = VAR_22 ; } } break ; case VAR_23 : VAR_24 = VAR_25 ; if ( ! METHOD_4 ( STRUCT_OR_UNION_7 -> VAR_26 ) ) return VAR_27 ? - VAR_28 : 0 ; break ; default : return - VAR_29 ; } if ( VAR_30 ) { VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 ) ; if ( METHOD_6 ( VAR_34 ) ) return ( TYPE_7 ) METHOD_7 ( VAR_35 ) ; } VAR_36 = METHOD_8 ( VAR_37 , STRUCT_OR_UNION_8 , VAR_38 , """" , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_9 , VAR_43 , VAR_44 ) ; return VAR_45 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_3 VAR_3 ; TYPE_4 * VAR_4 = VAR_5 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) { VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_3 -> VAR_15 ) ; if ( VAR_16 < 0 ) return VAR_17 ; else { STRUCT_OR_UNION_4 -> VAR_18 = METHOD_2 ( STRUCT_OR_UNION_5 ) ; METHOD_3 ( VAR_19 , STRUCT_OR_UNION_6 ) ; if ( VAR_20 == 0 ) VAR_21 = VAR_22 ; } } break ; case VAR_23 : VAR_24 = VAR_25 ; if ( ! METHOD_4 ( STRUCT_OR_UNION_7 -> VAR_26 ) ) return VAR_27 ? - VAR_28 : 0 ; break ; default : return - VAR_29 ; } if ( VAR_30 ) { VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 ) ; if ( METHOD_6 ( VAR_34 ) ) return ( TYPE_7 ) METHOD_7 ( VAR_35 ) ; } VAR_36 = METHOD_8 ( VAR_37 , STRUCT_OR_UNION_8 , VAR_38 , """" , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_9 , VAR_43 , VAR_44 ) ; return VAR_45 ; }",274
275,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 TYPE_4 * VAR_3 , TYPE_5 TYPE_6 * VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; if ( VAR_9 != VAR_10 ) return - VAR_11 ; if ( METHOD_2 ( VAR_12 ) ) return METHOD_3 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( METHOD_4 ( VAR_17 , VAR_18 ) ) return - VAR_19 ; if ( VAR_20 < 0 ) return - VAR_21 ; METHOD_5 ( VAR_22 ) ; switch ( VAR_23 ) { case VAR_24 : { unsigned TYPE_9 VAR_25 [ sizeof ( struct STRUCT_OR_UNION_2 ) + 40 ] ; struct STRUCT_OR_UNION_3 * VAR_26 = ( struct STRUCT_OR_UNION_4 * ) VAR_27 ;  VAR_28 -> VAR_29 = 0 ;   if ( VAR_30 -> VAR_31 )  METHOD_6 ( VAR_32 , VAR_33 -> VAR_34 , sizeof ( struct STRUCT_OR_UNION_5 ) + VAR_35 -> VAR_36 -> VAR_37 ) ; METHOD_7 ( VAR_38 ) ; if ( VAR_39 -> VAR_40 == 0 ) return METHOD_8 ( 0 , VAR_41 ) ; METHOD_9 ( VAR_42 ) ; VAR_43 = min_t ( unsigned TYPE_10 , VAR_44 , VAR_45 -> VAR_46 ) ; if ( METHOD_10 ( VAR_47 , VAR_48 ) ) return - VAR_49 ; if ( METHOD_11 ( VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) ) return - VAR_54 ; return 0 ; } case VAR_55 : VAR_56 = ( VAR_57 -> VAR_58 & VAR_59 ) != 0 ; break ; case VAR_60 : VAR_61 = ( VAR_62 -> VAR_63 & VAR_64 ) != 0 ; break ; case VAR_65 : VAR_66 = ( VAR_67 -> VAR_68 & VAR_69 ) != 0 ; break ; case VAR_70 : VAR_71 = ( VAR_72 -> VAR_73 & VAR_74 ) != 0 ; break ; case VAR_75 : VAR_76 = ( VAR_77 -> VAR_78 & VAR_79 ) != 0 ; break ; case VAR_80 : VAR_81 = ( VAR_82 -> VAR_83 & VAR_84 ) != 0 ; break ; case VAR_85 : VAR_86 = ( VAR_87 -> VAR_88 & VAR_89 ) != 0 ; break ; case VAR_90 : VAR_91 = VAR_92 -> VAR_93 ; break ; case VAR_94 : VAR_95 = ( VAR_96 -> VAR_97 == - 1 ? VAR_98 : VAR_99 -> VAR_100 ) ; break ; case VAR_101 : VAR_102 = VAR_103 -> VAR_104 ; break ; case VAR_105 : VAR_106 = VAR_107 -> VAR_108 ; break ; case VAR_109 : VAR_110 = VAR_111 -> VAR_112 ; break ; case VAR_113 : { struct STRUCT_OR_UNION_6 * VAR_114 ; VAR_115 = 0 ; VAR_116 = METHOD_12 ( VAR_117 ) ; if ( VAR_118 ) { VAR_119 = METHOD_13 ( VAR_120 ) ; METHOD_14 ( VAR_121 ) ; } if ( ! VAR_122 ) { METHOD_15 ( VAR_123 ) ; return - VAR_124 ; } break ; } case VAR_125 : VAR_126 = VAR_127 -> VAR_128 ; break ; case VAR_129 : VAR_130 = VAR_131 -> VAR_132 ; break ; case VAR_133 : VAR_134 = VAR_135 -> VAR_136 ; break ; case VAR_137 : { struct STRUCT_OR_UNION_7 TYPE_11 ; VAR_138 = min_t ( unsigned TYPE_12 , VAR_139 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; TYPE_13 . VAR_140 = VAR_141 -> VAR_142 ; METHOD_16 ( VAR_143 ) ; if ( METHOD_17 ( VAR_144 , VAR_145 ) ) return - VAR_146 ; if ( METHOD_18 ( VAR_147 , & TYPE_14 , VAR_148 ) ) return - VAR_149 ; return 0 ; } case VAR_150 : { struct STRUCT_OR_UNION_9 VAR_151 ; TYPE_15 VAR_152 ; if ( VAR_153 < METHOD_19 ( 0 ) ) { METHOD_20 ( VAR_154 ) ; return - VAR_155 ; } if ( METHOD_21 ( & VAR_156 , VAR_157 , METHOD_22 ( 0 ) ) ) { METHOD_23 ( VAR_158 ) ; return - VAR_159 ; } VAR_160 = METHOD_24 ( VAR_161 , & VAR_162 , ( struct STRUCT_OR_UNION_10 TYPE_16 * ) VAR_163 , VAR_164 ) ; METHOD_25 ( VAR_165 ) ; return VAR_166 ; } case VAR_167 : { struct STRUCT_OR_UNION_11 VAR_168 ; TYPE_17 VAR_169 ; if ( VAR_170 < METHOD_26 ( 0 ) ) { METHOD_27 ( VAR_171 ) ; return - VAR_172 ; } if ( METHOD_28 ( & VAR_173 , VAR_174 , METHOD_29 ( 0 ) ) ) { METHOD_30 ( VAR_175 ) ; return - VAR_176 ; } VAR_177 = METHOD_31 ( VAR_178 , & VAR_179 , ( struct STRUCT_OR_UNION_12 TYPE_18 * ) VAR_180 , VAR_181 ) ; METHOD_32 ( VAR_182 ) ; return VAR_183 ; } case VAR_184 : VAR_185 = VAR_186 -> VAR_187 ; break ; case VAR_188 : { struct STRUCT_OR_UNION_13 VAR_189 ; METHOD_33 ( VAR_190 ) ; if ( VAR_191 -> VAR_192 != VAR_193 ) return - VAR_194 ; VAR_195 . VAR_196 = VAR_197 ; VAR_198 . VAR_199 = VAR_200 ; VAR_201 . VAR_202 = 0 ; if ( VAR_203 -> VAR_204 & VAR_205 ) { struct STRUCT_OR_UNION_14 VAR_206 ; VAR_207 . VAR_208 . VAR_209 = VAR_210 -> VAR_211 ; VAR_212 . VAR_213 . VAR_214 = VAR_215 -> VAR_216 ; VAR_217 . VAR_218 = VAR_219 -> VAR_220 ; METHOD_34 ( & VAR_221 , VAR_222 , VAR_223 , sizeof ( VAR_224 ) , & VAR_225 ) ; } if ( VAR_226 -> VAR_227 & VAR_228 ) { TYPE_19 VAR_229 = VAR_230 -> VAR_231 ; METHOD_35 ( & VAR_232 , VAR_233 , VAR_234 , sizeof ( VAR_235 ) , & VAR_236 ) ; } VAR_237 -= VAR_238 . VAR_239 ; return METHOD_36 ( VAR_240 , VAR_241 ) ; } case VAR_242 : VAR_243 = VAR_244 -> VAR_245 ; break ; case VAR_246 : VAR_247 = VAR_248 -> VAR_249 ; break ; case VAR_250 : VAR_251 = VAR_252 -> VAR_253 ; break ; default : METHOD_37 ( VAR_254 ) ; return - VAR_255 ; } METHOD_38 ( VAR_256 ) ; if ( VAR_257 < sizeof ( TYPE_20 ) && VAR_258 > 0 && VAR_259 >= 0 && VAR_260 <= 255 ) { unsigned TYPE_21 VAR_261 = ( unsigned TYPE_22 ) VAR_262 ; VAR_263 = 1 ; if ( METHOD_39 ( VAR_264 , VAR_265 ) ) return - VAR_266 ; if ( METHOD_40 ( VAR_267 , & VAR_268 , 1 ) ) return - VAR_269 ; } else { VAR_270 = min_t ( unsigned TYPE_23 , sizeof ( TYPE_24 ) , VAR_271 ) ; if ( METHOD_41 ( VAR_272 , VAR_273 ) ) return - VAR_274 ; if ( METHOD_42 ( VAR_275 , & VAR_276 , VAR_277 ) ) return - VAR_278 ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 TYPE_4 * VAR_3 , TYPE_5 TYPE_6 * VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_7 VAR_7 ; TYPE_8 VAR_8 ; if ( VAR_9 != VAR_10 ) return - VAR_11 ; if ( METHOD_2 ( VAR_12 ) ) return METHOD_3 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( METHOD_4 ( VAR_17 , VAR_18 ) ) return - VAR_19 ; if ( VAR_20 < 0 ) return - VAR_21 ; METHOD_5 ( VAR_22 ) ; switch ( VAR_23 ) { case VAR_24 : { unsigned TYPE_9 VAR_25 [ sizeof ( struct STRUCT_OR_UNION_2 ) + 40 ] ; struct STRUCT_OR_UNION_3 * VAR_26 = ( struct STRUCT_OR_UNION_4 * ) VAR_27 ; VAR_28 -> VAR_29 = 0 ; if ( VAR_30 -> VAR_31 ) METHOD_6 ( VAR_32 , VAR_33 -> VAR_34 , sizeof ( struct STRUCT_OR_UNION_5 ) + VAR_35 -> VAR_36 -> VAR_37 ) ; METHOD_7 ( VAR_38 ) ; if ( VAR_39 -> VAR_40 == 0 ) return METHOD_8 ( 0 , VAR_41 ) ; METHOD_9 ( VAR_42 ) ; VAR_43 = min_t ( unsigned TYPE_10 , VAR_44 , VAR_45 -> VAR_46 ) ; if ( METHOD_10 ( VAR_47 , VAR_48 ) ) return - VAR_49 ; if ( METHOD_11 ( VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) ) return - VAR_54 ; return 0 ; } case VAR_55 : VAR_56 = ( VAR_57 -> VAR_58 & VAR_59 ) != 0 ; break ; case VAR_60 : VAR_61 = ( VAR_62 -> VAR_63 & VAR_64 ) != 0 ; break ; case VAR_65 : VAR_66 = ( VAR_67 -> VAR_68 & VAR_69 ) != 0 ; break ; case VAR_70 : VAR_71 = ( VAR_72 -> VAR_73 & VAR_74 ) != 0 ; break ; case VAR_75 : VAR_76 = ( VAR_77 -> VAR_78 & VAR_79 ) != 0 ; break ; case VAR_80 : VAR_81 = ( VAR_82 -> VAR_83 & VAR_84 ) != 0 ; break ; case VAR_85 : VAR_86 = ( VAR_87 -> VAR_88 & VAR_89 ) != 0 ; break ; case VAR_90 : VAR_91 = VAR_92 -> VAR_93 ; break ; case VAR_94 : VAR_95 = ( VAR_96 -> VAR_97 == - 1 ? VAR_98 : VAR_99 -> VAR_100 ) ; break ; case VAR_101 : VAR_102 = VAR_103 -> VAR_104 ; break ; case VAR_105 : VAR_106 = VAR_107 -> VAR_108 ; break ; case VAR_109 : VAR_110 = VAR_111 -> VAR_112 ; break ; case VAR_113 : { struct STRUCT_OR_UNION_6 * VAR_114 ; VAR_115 = 0 ; VAR_116 = METHOD_12 ( VAR_117 ) ; if ( VAR_118 ) { VAR_119 = METHOD_13 ( VAR_120 ) ; METHOD_14 ( VAR_121 ) ; } if ( ! VAR_122 ) { METHOD_15 ( VAR_123 ) ; return - VAR_124 ; } break ; } case VAR_125 : VAR_126 = VAR_127 -> VAR_128 ; break ; case VAR_129 : VAR_130 = VAR_131 -> VAR_132 ; break ; case VAR_133 : VAR_134 = VAR_135 -> VAR_136 ; break ; case VAR_137 : { struct STRUCT_OR_UNION_7 TYPE_11 ; VAR_138 = min_t ( unsigned TYPE_12 , VAR_139 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; TYPE_13 . VAR_140 = VAR_141 -> VAR_142 ; METHOD_16 ( VAR_143 ) ; if ( METHOD_17 ( VAR_144 , VAR_145 ) ) return - VAR_146 ; if ( METHOD_18 ( VAR_147 , & TYPE_14 , VAR_148 ) ) return - VAR_149 ; return 0 ; } case VAR_150 : { struct STRUCT_OR_UNION_9 VAR_151 ; TYPE_15 VAR_152 ; if ( VAR_153 < METHOD_19 ( 0 ) ) { METHOD_20 ( VAR_154 ) ; return - VAR_155 ; } if ( METHOD_21 ( & VAR_156 , VAR_157 , METHOD_22 ( 0 ) ) ) { METHOD_23 ( VAR_158 ) ; return - VAR_159 ; } VAR_160 = METHOD_24 ( VAR_161 , & VAR_162 , ( struct STRUCT_OR_UNION_10 TYPE_16 * ) VAR_163 , VAR_164 ) ; METHOD_25 ( VAR_165 ) ; return VAR_166 ; } case VAR_167 : { struct STRUCT_OR_UNION_11 VAR_168 ; TYPE_17 VAR_169 ; if ( VAR_170 < METHOD_26 ( 0 ) ) { METHOD_27 ( VAR_171 ) ; return - VAR_172 ; } if ( METHOD_28 ( & VAR_173 , VAR_174 , METHOD_29 ( 0 ) ) ) { METHOD_30 ( VAR_175 ) ; return - VAR_176 ; } VAR_177 = METHOD_31 ( VAR_178 , & VAR_179 , ( struct STRUCT_OR_UNION_12 TYPE_18 * ) VAR_180 , VAR_181 ) ; METHOD_32 ( VAR_182 ) ; return VAR_183 ; } case VAR_184 : VAR_185 = VAR_186 -> VAR_187 ; break ; case VAR_188 : { struct STRUCT_OR_UNION_13 VAR_189 ; METHOD_33 ( VAR_190 ) ; if ( VAR_191 -> VAR_192 != VAR_193 ) return - VAR_194 ; VAR_195 . VAR_196 = VAR_197 ; VAR_198 . VAR_199 = VAR_200 ; VAR_201 . VAR_202 = 0 ; if ( VAR_203 -> VAR_204 & VAR_205 ) { struct STRUCT_OR_UNION_14 VAR_206 ; VAR_207 . VAR_208 . VAR_209 = VAR_210 -> VAR_211 ; VAR_212 . VAR_213 . VAR_214 = VAR_215 -> VAR_216 ; VAR_217 . VAR_218 = VAR_219 -> VAR_220 ; METHOD_34 ( & VAR_221 , VAR_222 , VAR_223 , sizeof ( VAR_224 ) , & VAR_225 ) ; } if ( VAR_226 -> VAR_227 & VAR_228 ) { TYPE_19 VAR_229 = VAR_230 -> VAR_231 ; METHOD_35 ( & VAR_232 , VAR_233 , VAR_234 , sizeof ( VAR_235 ) , & VAR_236 ) ; } VAR_237 -= VAR_238 . VAR_239 ; return METHOD_36 ( VAR_240 , VAR_241 ) ; } case VAR_242 : VAR_243 = VAR_244 -> VAR_245 ; break ; case VAR_246 : VAR_247 = VAR_248 -> VAR_249 ; break ; case VAR_250 : VAR_251 = VAR_252 -> VAR_253 ; break ; default : METHOD_37 ( VAR_254 ) ; return - VAR_255 ; } METHOD_38 ( VAR_256 ) ; if ( VAR_257 < sizeof ( TYPE_20 ) && VAR_258 > 0 && VAR_259 >= 0 && VAR_260 <= 255 ) { unsigned TYPE_21 VAR_261 = ( unsigned TYPE_22 ) VAR_262 ; VAR_263 = 1 ; if ( METHOD_39 ( VAR_264 , VAR_265 ) ) return - VAR_266 ; if ( METHOD_40 ( VAR_267 , & VAR_268 , 1 ) ) return - VAR_269 ; } else { VAR_270 = min_t ( unsigned TYPE_23 , sizeof ( TYPE_24 ) , VAR_271 ) ; if ( METHOD_41 ( VAR_272 , VAR_273 ) ) return - VAR_274 ; if ( METHOD_42 ( VAR_275 , & VAR_276 , VAR_277 ) ) return - VAR_278 ; } return 0 ; }",275
276,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 ;  TYPE_5 VAR_5 ;   METHOD_1 ( VAR_6 -> VAR_7 , 28 ) ;  METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 ) ;  VAR_11 = METHOD_3 ( VAR_12 , 0 , ( TYPE_6 * ) METHOD_4 ( VAR_13 -> VAR_14 ) , VAR_15 / 2 ,  & VAR_16 , 0 , VAR_17 , VAR_18 ) ; if ( VAR_19 < 1 ) if ( ! ( VAR_20 = ( TYPE_7 * ) METHOD_5 ( 1 , 1 ) ) ) { METHOD_6 ( VAR_21 , ""callocfailed!"" ) ; return VAR_22 ; } VAR_23 -> VAR_24 = VAR_25 -> VAR_26 -> VAR_27 ++ ; VAR_28 -> VAR_29 = METHOD_7 ( VAR_30 -> VAR_31 , VAR_32 ) ; if ( VAR_33 -> VAR_34 < 0 ) { VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = 0 ; } else { if ( METHOD_8 ( VAR_40 -> VAR_41 , VAR_42 , VAR_43 ) == - 1 ) { } } METHOD_9 ( VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ; METHOD_10 ( VAR_48 -> VAR_49 , 0 ) ; METHOD_11 ( VAR_50 ) ; return VAR_51 -> METHOD_12 ( VAR_52 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 ; TYPE_4 VAR_4 ; TYPE_5 VAR_5 ; METHOD_1 ( VAR_6 -> VAR_7 , 28 ) ) return VAR_54 ; if ( METHOD_14 ( VAR_52 -> VAR_14 ) < 4 ) return VAR_54 ; METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 ) ; VAR_11 = METHOD_3 ( VAR_12 , 0 , VAR_53 , VAR_15 / 2 , & VAR_16 , 0 , VAR_17 , VAR_18 ) ; if ( VAR_19 < 1 ) if ( ! ( VAR_20 = ( TYPE_7 * ) METHOD_5 ( 1 , 1 ) ) ) { METHOD_6 ( VAR_21 , ""callocfailed!"" ) ; return VAR_22 ; } VAR_23 -> VAR_24 = VAR_25 -> VAR_26 -> VAR_27 ++ ; VAR_28 -> VAR_29 = METHOD_7 ( VAR_30 -> VAR_31 , VAR_32 ) ; if ( VAR_33 -> VAR_34 < 0 ) { VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = 0 ; } else { if ( METHOD_8 ( VAR_40 -> VAR_41 , VAR_42 , VAR_43 ) == - 1 ) { } } METHOD_9 ( VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ; METHOD_10 ( VAR_48 -> VAR_49 , 0 ) ; METHOD_11 ( VAR_50 ) ; return VAR_51 -> METHOD_12 ( VAR_52 ) ; }",276
277,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  if ( METHOD_1 ( VAR_3 , 2 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; if ( METHOD_1 ( VAR_3 , 2 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }",277
278,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { unsigned TYPE_1 VAR_2 ;  TYPE_2 * VAR_3 ;  VAR_4 = VAR_5 -> VAR_6 . VAR_7 * VAR_8 -> VAR_9 . VAR_10 ; if ( VAR_11 -> VAR_12 -> VAR_13 ) { VAR_14 = VAR_15 ; } else { VAR_16 = METHOD_1 ( VAR_17 , VAR_18 ) ; if ( ! VAR_19 ) return - VAR_20 ; } VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 -> VAR_28 -> VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 -> VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 -> VAR_39 = VAR_40 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { unsigned TYPE_1 VAR_2 ; TYPE_2 * VAR_3 ; VAR_4 = VAR_5 -> VAR_6 . VAR_7 * VAR_8 -> VAR_9 . VAR_10 ; if ( VAR_11 -> VAR_12 -> VAR_13 ) { VAR_14 = VAR_15 ; } else { VAR_16 = METHOD_1 ( VAR_17 , VAR_18 ) ; if ( ! VAR_19 ) return - VAR_20 ; } VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 -> VAR_28 -> VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 -> VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 -> VAR_39 = VAR_40 ; return 0 ; }",278
279,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 = VAR_7 , * VAR_8 = VAR_9 , * VAR_10 = VAR_11 , * VAR_12 = VAR_13 ; TYPE_7 * VAR_14 ; TYPE_8 * VAR_15 = VAR_16 ; const TYPE_9 * VAR_17 ; const TYPE_10 * VAR_18 = VAR_19 ; TYPE_11 * VAR_20 = VAR_21 ; TYPE_12 * VAR_22 = VAR_23 ; METHOD_1 ( TYPE_13 ) * VAR_24 = VAR_25 ; METHOD_2 ( TYPE_14 ) * VAR_26 = VAR_27 ; TYPE_15 * VAR_28 = VAR_29 ; unsigned TYPE_16 * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_17 VAR_34 = 0 , VAR_35 = 0 ; if ( VAR_36 == VAR_37 ) { METHOD_3 ( VAR_38 , VAR_39 ) ; return VAR_40 ; } if ( VAR_41 -> VAR_42 . VAR_43 == VAR_44 ) { METHOD_4 ( VAR_45 , VAR_46 ) ; return VAR_47 ; } VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; switch ( VAR_54 ) { case VAR_55 : VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 . VAR_59 -> VAR_60 ) ; if ( ! METHOD_7 ( VAR_61 ) && VAR_62 == VAR_63 ) { METHOD_8 ( VAR_64 , VAR_65 ) ; goto VAR_66 ; } VAR_67 = VAR_68 -> VAR_69 . VAR_70 -> VAR_71 ; break ; case VAR_72 : VAR_73 = VAR_74 -> VAR_75 . VAR_76 -> VAR_77 ; VAR_78 = VAR_79 -> VAR_80 . VAR_81 -> VAR_82 ; VAR_83 = VAR_84 -> VAR_85 . VAR_86 -> VAR_87 -> VAR_88 ; VAR_89 = VAR_90 -> VAR_91 . VAR_92 -> VAR_93 -> VAR_94 ; VAR_95 = METHOD_9 ( VAR_96 -> VAR_97 ) ; if ( VAR_98 == VAR_99 ) { METHOD_10 ( VAR_100 , VAR_101 ) ; goto VAR_102 ; } break ; case VAR_103 : VAR_104 = VAR_105 -> VAR_106 . VAR_107 -> VAR_108 ; VAR_109 = VAR_110 -> VAR_111 . VAR_112 -> VAR_113 -> VAR_114 ; VAR_115 = VAR_116 -> VAR_117 . VAR_118 -> VAR_119 -> VAR_120 ; VAR_121 = METHOD_11 ( VAR_122 -> VAR_123 ) ; if ( VAR_124 == VAR_125 ) { METHOD_12 ( VAR_126 , VAR_127 ) ; goto VAR_128 ; } break ; default : METHOD_13 ( VAR_129 , VAR_130 ) ; goto VAR_131 ; }  if ( VAR_132 != VAR_133 ) {  for ( VAR_134 = 0 ; VAR_135 < METHOD_14 ( VAR_136 ) ; VAR_137 ++ ) { VAR_138 = METHOD_15 ( VAR_139 , VAR_140 ) ; if ( ( VAR_141 = METHOD_16 ( METHOD_17 ( ) ) ) == VAR_142 ) { METHOD_18 ( VAR_143 , VAR_144 ) ; goto VAR_145 ; } VAR_146 = METHOD_19 ( VAR_147 -> VAR_148 ) ; VAR_149 = METHOD_20 ( VAR_150 ) ; if ( VAR_151 == VAR_152 ) { METHOD_21 ( VAR_153 , VAR_154 ) ; goto VAR_155 ; } METHOD_22 ( VAR_156 , VAR_157 ) ; if ( VAR_158 == VAR_159 ) VAR_160 = VAR_161 ; else METHOD_23 ( VAR_162 , VAR_163 ) ; VAR_164 = VAR_165 ; } } if ( VAR_166 != VAR_167 ) { if ( ( VAR_168 = METHOD_24 ( METHOD_25 ( ) ) ) == VAR_169 ) { METHOD_26 ( VAR_170 , VAR_171 ) ; goto VAR_172 ; } if ( VAR_173 ) { for ( VAR_174 = 0 ; VAR_175 < METHOD_27 ( VAR_176 ) ; VAR_177 ++ ) { VAR_178 = METHOD_28 ( VAR_179 , VAR_180 ) ; if ( ! METHOD_29 ( VAR_181 , VAR_182 ) ) break ; VAR_183 = VAR_184 ; } if ( VAR_185 == VAR_186 ) { METHOD_30 ( VAR_187 , VAR_188 ) ; goto VAR_189 ; } } if ( VAR_190 == VAR_191 ) { for ( VAR_192 = 0 ; VAR_193 < METHOD_31 ( VAR_194 ) ; VAR_195 ++ ) { VAR_196 = METHOD_32 ( VAR_197 , VAR_198 ) ; if ( METHOD_33 ( & VAR_199 , & VAR_200 , VAR_201 , VAR_202 ) < 0 ) goto VAR_203 ; METHOD_34 ( ) ; } } else { if ( METHOD_35 ( & VAR_204 , & VAR_205 , VAR_206 , VAR_207 ) < 0 ) goto VAR_208 ; METHOD_36 ( ) ; } VAR_209 = VAR_210 ; METHOD_37 ( VAR_211 , & VAR_212 ) ; if ( METHOD_38 ( VAR_213 , VAR_214 , VAR_215 , VAR_216 , VAR_217 , 0 ) <= 0 ) goto VAR_218 ; if ( METHOD_39 ( VAR_219 , VAR_220 -> VAR_221 ) < 0 ) goto VAR_222 ; VAR_223 = METHOD_40 ( VAR_224 ) ; VAR_225 = METHOD_41 ( VAR_226 ) ; if ( ! VAR_227 ) goto VAR_228 ; if ( METHOD_42 ( VAR_229 , VAR_230 ) <= 0 ) goto VAR_231 ; if ( VAR_232 == VAR_233 ) { VAR_234 = VAR_235 ; VAR_236 = VAR_237 ; VAR_238 = VAR_239 ; } if ( VAR_240 != METHOD_43 ( VAR_241 ) ) { if ( ! METHOD_44 ( VAR_242 , VAR_243 ) ) { METHOD_45 ( VAR_244 , VAR_245 ) ; VAR_246 = VAR_247 ; VAR_248 = VAR_249 ; VAR_250 = VAR_251 ; } } METHOD_46 ( ) ; if ( METHOD_47 ( VAR_252 , VAR_253 , VAR_254 , VAR_255 , VAR_256 , 0 ) <= 0 ) goto VAR_257 ; METHOD_48 ( VAR_258 , VAR_259 ) ; VAR_260 = VAR_261 ; METHOD_49 ( VAR_262 , VAR_263 ) ; VAR_264 = VAR_265 ; if ( VAR_266 == VAR_267 ) VAR_268 = VAR_269 ; else METHOD_50 ( VAR_270 , VAR_271 ) ; VAR_272 = VAR_273 ; }  if ( METHOD_51 ( VAR_274 ) || ( VAR_275 != VAR_276 ) ) {  VAR_277 = VAR_278 ; } else { if ( VAR_279 -> VAR_280 > 0 ) VAR_281 = METHOD_52 ( VAR_282 -> VAR_283 , VAR_284 -> VAR_285 ) ; else { VAR_286 = METHOD_53 ( METHOD_54 ( ) ) ; METHOD_55 ( VAR_287 , 0 ) ; } if ( VAR_288 == VAR_289 ) goto VAR_290 ; } METHOD_56 ( VAR_291 , VAR_292 ) ; VAR_293 = VAR_294 ; return VAR_295 ; VAR_296 : METHOD_57 ( VAR_297 , VAR_298 ) ; METHOD_58 ( VAR_299 , VAR_300 ) ; METHOD_59 ( VAR_301 ) ; METHOD_60 ( VAR_302 ) ; METHOD_61 ( VAR_303 ) ; METHOD_62 ( VAR_304 ) ; return VAR_305 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 , VAR_5 ; TYPE_6 * VAR_6 = VAR_7 , * VAR_8 = VAR_9 , * VAR_10 = VAR_11 , * VAR_12 = VAR_13 ; TYPE_7 * VAR_14 ; TYPE_8 * VAR_15 = VAR_16 ; const TYPE_9 * VAR_17 ; const TYPE_10 * VAR_18 = VAR_19 ; TYPE_11 * VAR_20 = VAR_21 ; TYPE_12 * VAR_22 = VAR_23 ; METHOD_1 ( TYPE_13 ) * VAR_24 = VAR_25 ; METHOD_2 ( TYPE_14 ) * VAR_26 = VAR_27 ; TYPE_15 * VAR_28 = VAR_29 ; unsigned TYPE_16 * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_17 VAR_34 = 0 , VAR_35 = 0 ; if ( VAR_36 == VAR_37 ) { METHOD_3 ( VAR_38 , VAR_39 ) ; return VAR_40 ; } if ( VAR_284 == VAR_305 && VAR_278 == VAR_305 ) { METHOD_30 ( VAR_187 , VAR_46 ) ; goto VAR_296 ; } if ( VAR_41 -> VAR_42 . VAR_43 == VAR_44 ) { METHOD_4 ( VAR_45 , VAR_46 ) ; return VAR_47 ; } VAR_48 = METHOD_5 ( VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; switch ( VAR_54 ) { case VAR_55 : VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 . VAR_59 -> VAR_60 ) ; if ( ! METHOD_7 ( VAR_61 ) && VAR_62 == VAR_63 ) { METHOD_8 ( VAR_64 , VAR_65 ) ; goto VAR_66 ; } VAR_67 = VAR_68 -> VAR_69 . VAR_70 -> VAR_71 ; break ; case VAR_72 : VAR_73 = VAR_74 -> VAR_75 . VAR_76 -> VAR_77 ; VAR_78 = VAR_79 -> VAR_80 . VAR_81 -> VAR_82 ; VAR_83 = VAR_84 -> VAR_85 . VAR_86 -> VAR_87 -> VAR_88 ; VAR_89 = VAR_90 -> VAR_91 . VAR_92 -> VAR_93 -> VAR_94 ; VAR_95 = METHOD_9 ( VAR_96 -> VAR_97 ) ; if ( VAR_98 == VAR_99 ) { METHOD_10 ( VAR_100 , VAR_101 ) ; goto VAR_102 ; } break ; case VAR_103 : VAR_104 = VAR_105 -> VAR_106 . VAR_107 -> VAR_108 ; VAR_109 = VAR_110 -> VAR_111 . VAR_112 -> VAR_113 -> VAR_114 ; VAR_115 = VAR_116 -> VAR_117 . VAR_118 -> VAR_119 -> VAR_120 ; VAR_121 = METHOD_11 ( VAR_122 -> VAR_123 ) ; if ( VAR_124 == VAR_125 ) { METHOD_12 ( VAR_126 , VAR_127 ) ; goto VAR_128 ; } break ; default : METHOD_13 ( VAR_129 , VAR_130 ) ; goto VAR_131 ; } if ( VAR_132 != VAR_133 ) { for ( VAR_134 = 0 ; VAR_135 < METHOD_14 ( VAR_136 ) ; VAR_137 ++ ) { VAR_138 = METHOD_15 ( VAR_139 , VAR_140 ) ; if ( ( VAR_141 = METHOD_16 ( METHOD_17 ( ) ) ) == VAR_142 ) { METHOD_18 ( VAR_143 , VAR_144 ) ; goto VAR_145 ; } VAR_146 = METHOD_19 ( VAR_147 -> VAR_148 ) ; VAR_149 = METHOD_20 ( VAR_150 ) ; if ( VAR_151 == VAR_152 ) { METHOD_21 ( VAR_153 , VAR_154 ) ; goto VAR_155 ; } METHOD_22 ( VAR_156 , VAR_157 ) ; if ( VAR_158 == VAR_159 ) VAR_160 = VAR_161 ; else METHOD_23 ( VAR_162 , VAR_163 ) ; VAR_164 = VAR_165 ; } } if ( VAR_166 != VAR_167 ) { if ( ( VAR_168 = METHOD_24 ( METHOD_25 ( ) ) ) == VAR_169 ) { METHOD_26 ( VAR_170 , VAR_171 ) ; goto VAR_172 ; } if ( VAR_173 ) { for ( VAR_174 = 0 ; VAR_175 < METHOD_27 ( VAR_176 ) ; VAR_177 ++ ) { VAR_178 = METHOD_28 ( VAR_179 , VAR_180 ) ; if ( ! METHOD_29 ( VAR_181 , VAR_182 ) ) break ; VAR_183 = VAR_184 ; } if ( VAR_185 == VAR_186 ) { METHOD_30 ( VAR_187 , VAR_188 ) ; goto VAR_189 ; } } if ( VAR_190 == VAR_191 ) { for ( VAR_192 = 0 ; VAR_193 < METHOD_31 ( VAR_194 ) ; VAR_195 ++ ) { VAR_196 = METHOD_32 ( VAR_197 , VAR_198 ) ; if ( METHOD_33 ( & VAR_199 , & VAR_200 , VAR_201 , VAR_202 ) < 0 ) goto VAR_203 ; METHOD_34 ( ) ; } } else { if ( METHOD_35 ( & VAR_204 , & VAR_205 , VAR_206 , VAR_207 ) < 0 ) goto VAR_208 ; METHOD_36 ( ) ; } VAR_209 = VAR_210 ; METHOD_37 ( VAR_211 , & VAR_212 ) ; if ( METHOD_38 ( VAR_213 , VAR_214 , VAR_215 , VAR_216 , VAR_217 , 0 ) <= 0 ) goto VAR_218 ; if ( METHOD_39 ( VAR_219 , VAR_220 -> VAR_221 ) < 0 ) goto VAR_222 ; VAR_223 = METHOD_40 ( VAR_224 ) ; VAR_225 = METHOD_41 ( VAR_226 ) ; if ( ! VAR_227 ) goto VAR_228 ; if ( METHOD_42 ( VAR_229 , VAR_230 ) <= 0 ) goto VAR_231 ; if ( VAR_232 == VAR_233 ) { VAR_234 = VAR_235 ; VAR_236 = VAR_237 ; VAR_238 = VAR_239 ; } if ( VAR_240 != METHOD_43 ( VAR_241 ) ) { if ( ! METHOD_44 ( VAR_242 , VAR_243 ) ) { METHOD_45 ( VAR_244 , VAR_245 ) ; VAR_246 = VAR_247 ; VAR_248 = VAR_249 ; VAR_250 = VAR_251 ; } } METHOD_46 ( ) ; if ( METHOD_47 ( VAR_252 , VAR_253 , VAR_254 , VAR_255 , VAR_256 , 0 ) <= 0 ) goto VAR_257 ; METHOD_48 ( VAR_258 , VAR_259 ) ; VAR_260 = VAR_261 ; METHOD_49 ( VAR_262 , VAR_263 ) ; VAR_264 = VAR_265 ; if ( VAR_266 == VAR_267 ) VAR_268 = VAR_269 ; else METHOD_50 ( VAR_270 , VAR_271 ) ; VAR_272 = VAR_273 ; } if ( METHOD_51 ( VAR_274 ) || ( VAR_275 != VAR_276 ) ) { VAR_277 = VAR_278 ; } else { if ( VAR_279 -> VAR_280 > 0 ) VAR_281 = METHOD_52 ( VAR_282 -> VAR_283 , VAR_284 -> VAR_285 ) ; else { VAR_286 = METHOD_53 ( METHOD_54 ( ) ) ; METHOD_55 ( VAR_287 , 0 ) ; } if ( VAR_288 == VAR_289 ) goto VAR_290 ; } METHOD_56 ( VAR_291 , VAR_292 ) ; VAR_293 = VAR_294 ; return VAR_295 ; VAR_296 : METHOD_57 ( VAR_297 , VAR_298 ) ; METHOD_58 ( VAR_299 , VAR_300 ) ; METHOD_59 ( VAR_301 ) ; METHOD_60 ( VAR_302 ) ; METHOD_61 ( VAR_303 ) ; METHOD_62 ( VAR_304 ) ; return VAR_305 ; }",279
280,"static TYPE_0 * METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , enum VAR_1 * VAR_2 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; struct STRUCT_OR_UNION_3 STRUCT_OR_UNION_4 ; TYPE_1 * VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 , VAR_8 , & STRUCT_OR_UNION_5 ) ; if ( VAR_9 ) return METHOD_2 ( VAR_10 ) ; STRUCT_OR_UNION_6 = METHOD_3 ( STRUCT_OR_UNION_7 . VAR_11 ) ; VAR_12 = METHOD_4 ( STRUCT_OR_UNION_8 , VAR_13 ) ; if ( VAR_14 ) goto VAR_15 ; VAR_16 = METHOD_5 ( STRUCT_OR_UNION_9 , VAR_17 ) ; if ( VAR_18 ) goto VAR_19 ; VAR_20 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_21 , * VAR_22 ) ;  METHOD_7 ( & STRUCT_OR_UNION_11 ) ;  METHOD_8 ( & STRUCT_OR_UNION_12 ) ; return VAR_23 ; VAR_24 : METHOD_9 ( & STRUCT_OR_UNION_13 ) ; return METHOD_10 ( VAR_25 ) ; }","static TYPE_0 * METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , enum VAR_1 * VAR_2 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; struct STRUCT_OR_UNION_3 STRUCT_OR_UNION_4 ; TYPE_1 * VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 -> VAR_7 , VAR_8 , & STRUCT_OR_UNION_5 ) ; if ( VAR_9 ) return METHOD_2 ( VAR_10 ) ; STRUCT_OR_UNION_6 = METHOD_3 ( STRUCT_OR_UNION_7 . VAR_11 ) ; VAR_12 = METHOD_4 ( STRUCT_OR_UNION_8 , VAR_13 ) ; if ( VAR_14 ) goto VAR_15 ; VAR_16 = METHOD_5 ( STRUCT_OR_UNION_9 , VAR_17 ) ; if ( VAR_18 ) goto VAR_19 ; VAR_20 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_21 , * VAR_22 ) ; if ( ! METHOD_11 ( VAR_23 ) ) METHOD_7 ( & STRUCT_OR_UNION_11 ) ; METHOD_8 ( & STRUCT_OR_UNION_12 ) ; return VAR_23 ; VAR_24 : METHOD_9 ( & STRUCT_OR_UNION_13 ) ; return METHOD_10 ( VAR_25 ) ; }",280
281,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 METHOD_1 ; TYPE_3 VAR_3 ; TYPE_4 * VAR_4 ; METHOD_2 ( ""nfsd_dispatch:vers%dproc%d\\n"" , VAR_5 -> VAR_6 , VAR_7 -> VAR_8 ) ;  VAR_9 = VAR_10 -> VAR_11 ;  VAR_12 -> VAR_13 = VAR_14 -> VAR_15 ; METHOD_3 = VAR_16 -> VAR_17 ; if ( METHOD_4 && ! METHOD_5 ( VAR_18 , ( TYPE_5 * ) VAR_19 -> VAR_20 . VAR_21 [ 0 ] . VAR_22 , VAR_23 -> VAR_24 ) ) { METHOD_6 ( ""nfsd:failedtodecodearguments!\\n"" ) ; * VAR_25 = VAR_26 ; return 1 ; } switch ( METHOD_7 ( VAR_27 ) ) { case VAR_28 : return 0 ; case VAR_29 : return 1 ; case VAR_30 : ; } VAR_31 = VAR_32 -> VAR_33 . VAR_34 [ 0 ] . VAR_35 + VAR_36 -> VAR_37 . VAR_38 [ 0 ] . VAR_39 ; VAR_40 -> VAR_41 . VAR_42 [ 0 ] . VAR_43 += sizeof ( TYPE_6 ) ; VAR_44 = VAR_45 -> METHOD_8 ( VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ) ; VAR_51 = METHOD_9 ( VAR_52 -> VAR_53 , VAR_54 ) ; if ( VAR_55 == VAR_56 || METHOD_10 ( VAR_57 , & VAR_58 -> VAR_59 ) ) { METHOD_11 ( ""nfsd:Droppingrequest;mayberevisitedlater\\n"" ) ; METHOD_12 ( VAR_60 , VAR_61 , VAR_62 ) ; return 0 ; } if ( VAR_63 -> VAR_64 != 0 ) * VAR_65 ++ = VAR_66 ; if ( ! ( VAR_67 && VAR_68 -> VAR_69 == 2 ) ) { METHOD_13 = VAR_70 -> VAR_71 ; if ( METHOD_14 && ! METHOD_15 ( VAR_72 , VAR_73 , VAR_74 -> VAR_75 ) ) { METHOD_16 ( ""nfsd:failedtoencoderesult!\\n"" ) ; METHOD_17 ( VAR_76 , VAR_77 , VAR_78 ) ; * VAR_79 = VAR_80 ; return 1 ; } } METHOD_18 ( VAR_81 , VAR_82 -> VAR_83 , VAR_84 + 1 ) ; return 1 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 METHOD_1 ; TYPE_3 VAR_3 ; TYPE_4 * VAR_4 ; METHOD_2 ( ""nfsd_dispatch:vers%dproc%d\\n"" , VAR_5 -> VAR_6 , VAR_7 -> VAR_8 ) ; VAR_9 = VAR_10 -> VAR_11 ; if ( METHOD_19 ( VAR_82 , VAR_70 ) ) { METHOD_16 ( ""nfsd:NFSv%dargumenttoolarge\\n"" , VAR_82 -> VAR_69 ) ; * VAR_84 = VAR_26 ; return 1 ; } VAR_12 -> VAR_13 = VAR_14 -> VAR_15 ; METHOD_3 = VAR_16 -> VAR_17 ; if ( METHOD_4 && ! METHOD_5 ( VAR_18 , ( TYPE_5 * ) VAR_19 -> VAR_20 . VAR_21 [ 0 ] . VAR_22 , VAR_23 -> VAR_24 ) ) { METHOD_6 ( ""nfsd:failedtodecodearguments!\\n"" ) ; * VAR_25 = VAR_26 ; return 1 ; } switch ( METHOD_7 ( VAR_27 ) ) { case VAR_28 : return 0 ; case VAR_29 : return 1 ; case VAR_30 : ; } VAR_31 = VAR_32 -> VAR_33 . VAR_34 [ 0 ] . VAR_35 + VAR_36 -> VAR_37 . VAR_38 [ 0 ] . VAR_39 ; VAR_40 -> VAR_41 . VAR_42 [ 0 ] . VAR_43 += sizeof ( TYPE_6 ) ; VAR_44 = VAR_45 -> METHOD_8 ( VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ) ; VAR_51 = METHOD_9 ( VAR_52 -> VAR_53 , VAR_54 ) ; if ( VAR_55 == VAR_56 || METHOD_10 ( VAR_57 , & VAR_58 -> VAR_59 ) ) { METHOD_11 ( ""nfsd:Droppingrequest;mayberevisitedlater\\n"" ) ; METHOD_12 ( VAR_60 , VAR_61 , VAR_62 ) ; return 0 ; } if ( VAR_63 -> VAR_64 != 0 ) * VAR_65 ++ = VAR_66 ; if ( ! ( VAR_67 && VAR_68 -> VAR_69 == 2 ) ) { METHOD_13 = VAR_70 -> VAR_71 ; if ( METHOD_14 && ! METHOD_15 ( VAR_72 , VAR_73 , VAR_74 -> VAR_75 ) ) { METHOD_16 ( ""nfsd:failedtoencoderesult!\\n"" ) ; METHOD_17 ( VAR_76 , VAR_77 , VAR_78 ) ; * VAR_79 = VAR_80 ; return 1 ; } } METHOD_18 ( VAR_81 , VAR_82 -> VAR_83 , VAR_84 + 1 ) ; return 1 ; }",281
282,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = 1 ; METHOD_1 ( ""my_redel"" ) ; METHOD_2 ( ""my"" , ( ""org_name:\'%s\'tmp_name:\'%s\'MyFlags:%d"" , VAR_4 , VAR_5 , VAR_6 ) ) ;  if ( METHOD_3 ( VAR_7 , VAR_8 , VAR_9 ) < 0 )   goto VAR_10 ;  if ( VAR_11 & VAR_12 ) { TYPE_5 VAR_13 [ VAR_14 + 20 ] ; TYPE_6 VAR_15 [ 20 ] ; VAR_16 [ 0 ] = '-' ; METHOD_4 ( VAR_17 + 1 , 2 + 4 , ( TYPE_7 ) 0 ) ; METHOD_5 ( METHOD_6 ( VAR_18 ) , VAR_19 ) ; if ( METHOD_7 ( VAR_20 , METHOD_8 ( VAR_21 , VAR_22 , """" , VAR_23 , 2 ) , VAR_24 ) ) goto VAR_25 ; } else if ( METHOD_9 ( VAR_26 , VAR_27 ) ) goto VAR_28 ; if ( METHOD_10 ( VAR_29 , VAR_30 , VAR_31 ) ) goto VAR_32 ; VAR_33 = 0 ; VAR_34 : METHOD_11 ( VAR_35 ) ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = 1 ; METHOD_1 ( ""my_redel"" ) ; METHOD_2 ( ""my"" , ( ""org_name:\'%s\'tmp_name:\'%s\'MyFlags:%d"" , VAR_4 , VAR_5 , VAR_6 ) ) ; if ( ! ( VAR_31 & VAR_36 ) ) { if ( METHOD_3 ( VAR_7 , VAR_8 , VAR_9 ) < 0 ) goto VAR_10 ; if ( VAR_11 & VAR_12 ) { TYPE_5 VAR_13 [ VAR_14 + 20 ] ; TYPE_6 VAR_15 [ 20 ] ; VAR_16 [ 0 ] = '-' ; METHOD_4 ( VAR_17 + 1 , 2 + 4 , ( TYPE_7 ) 0 ) ; METHOD_5 ( METHOD_6 ( VAR_18 ) , VAR_19 ) ; if ( METHOD_7 ( VAR_20 , METHOD_8 ( VAR_21 , VAR_22 , """" , VAR_23 , 2 ) , VAR_24 ) ) goto VAR_25 ; } else if ( METHOD_9 ( VAR_26 , VAR_27 ) ) goto VAR_28 ; if ( METHOD_10 ( VAR_29 , VAR_30 , VAR_31 ) ) goto VAR_32 ; VAR_33 = 0 ; VAR_34 : METHOD_11 ( VAR_35 ) ; }",282
283,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 , * VAR_7 ; TYPE_1 VAR_8 , VAR_9 = 0 ; TYPE_2 VAR_10 = 0 , VAR_11 = VAR_12 -> VAR_13 [ 1 ] ; if ( VAR_14 -> VAR_15 ) return 0 ; VAR_16 = METHOD_2 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) return 0 ; VAR_20 = METHOD_3 ( VAR_21 , VAR_22 ) ; if ( VAR_23 == VAR_24 ) return - VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 -> VAR_29 ; VAR_30 ++ ) { struct STRUCT_OR_UNION_6 * VAR_31 ; struct STRUCT_OR_UNION_7 * VAR_32 , * * VAR_33 ; struct STRUCT_OR_UNION_8 * VAR_34 ; METHOD_4 ( VAR_35 , & VAR_36 -> VAR_37 [ VAR_38 ] , VAR_39 [ VAR_40 -> VAR_41 ] ) { if ( VAR_42 < VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_5 ( VAR_46 , VAR_47 ) ; if ( VAR_48 == VAR_49 ) { VAR_50 = - VAR_51 ; goto VAR_52 ; } for ( VAR_53 = & VAR_54 -> VAR_55 ; ( VAR_56 = METHOD_6 ( * VAR_57 ) ) != VAR_58 ; VAR_59 = & VAR_60 -> VAR_61 ) { VAR_62 = VAR_63 -> VAR_64 ; if ( VAR_65 ) { struct STRUCT_OR_UNION_9 VAR_66 ;  VAR_67 . VAR_68 = VAR_69 -> VAR_70 -> VAR_71 ;  VAR_72 . VAR_73 = VAR_74 -> VAR_75 ; if ( VAR_76 -> VAR_77 . VAR_78 == METHOD_7 ( VAR_79 ) ) VAR_80 . VAR_81 . VAR_82 . VAR_83 = VAR_84 -> VAR_85 . VAR_86 . VAR_87 ; if IS_ENABLED ( VAR_88 ) if ( VAR_89 -> VAR_90 . VAR_91 == METHOD_8 ( VAR_92 ) ) VAR_93 . VAR_94 . VAR_95 . VAR_96 = VAR_97 -> VAR_98 . VAR_99 . VAR_100 ; VAR_101 . VAR_102 . VAR_103 = VAR_104 -> VAR_105 . VAR_106 ; if ( METHOD_9 ( VAR_107 , VAR_108 , sizeof ( VAR_109 ) , & VAR_110 ) ) { METHOD_10 ( VAR_111 , VAR_112 ) ; VAR_113 = - VAR_114 ; goto VAR_115 ; } } } METHOD_11 ( VAR_116 , VAR_117 ) ; VAR_118 : VAR_119 ++ ; } } VAR_120 : VAR_121 -> VAR_122 [ 1 ] = VAR_123 ; METHOD_12 ( VAR_124 , VAR_125 ) ; return VAR_126 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_4 * VAR_5 ; struct STRUCT_OR_UNION_5 * VAR_6 , * VAR_7 ; TYPE_1 VAR_8 , VAR_9 = 0 ; TYPE_2 VAR_10 = 0 , VAR_11 = VAR_12 -> VAR_13 [ 1 ] ; if ( VAR_14 -> VAR_15 ) return 0 ; VAR_16 = METHOD_2 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) return 0 ; VAR_20 = METHOD_3 ( VAR_21 , VAR_22 ) ; if ( VAR_23 == VAR_24 ) return - VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 -> VAR_29 ; VAR_30 ++ ) { struct STRUCT_OR_UNION_6 * VAR_31 ; struct STRUCT_OR_UNION_7 * VAR_32 , * * VAR_33 ; struct STRUCT_OR_UNION_8 * VAR_34 ; METHOD_4 ( VAR_35 , & VAR_36 -> VAR_37 [ VAR_38 ] , VAR_39 [ VAR_40 -> VAR_41 ] ) { if ( VAR_42 < VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_5 ( VAR_46 , VAR_47 ) ; if ( VAR_48 == VAR_49 ) { VAR_50 = - VAR_51 ; goto VAR_52 ; } for ( VAR_53 = & VAR_54 -> VAR_55 ; ( VAR_56 = METHOD_6 ( * VAR_57 ) ) != VAR_58 ; VAR_59 = & VAR_60 -> VAR_61 ) { VAR_62 = VAR_63 -> VAR_64 ; if ( VAR_65 ) { struct STRUCT_OR_UNION_9 VAR_66 ; VAR_67 . VAR_68 = VAR_69 -> VAR_70 -> VAR_71 ; VAR_72 . VAR_73 = VAR_74 -> VAR_75 ; if ( VAR_76 -> VAR_77 . VAR_78 == METHOD_7 ( VAR_79 ) ) VAR_80 . VAR_81 . VAR_82 . VAR_83 = VAR_84 -> VAR_85 . VAR_86 . VAR_87 ; if IS_ENABLED ( VAR_88 ) if ( VAR_89 -> VAR_90 . VAR_91 == METHOD_8 ( VAR_92 ) ) VAR_93 . VAR_94 . VAR_95 . VAR_96 = VAR_97 -> VAR_98 . VAR_99 . VAR_100 ; VAR_101 . VAR_102 . VAR_103 = VAR_104 -> VAR_105 . VAR_106 ; if ( METHOD_9 ( VAR_107 , VAR_108 , sizeof ( VAR_109 ) , & VAR_110 ) ) { METHOD_10 ( VAR_111 , VAR_112 ) ; VAR_113 = - VAR_114 ; goto VAR_115 ; } } } METHOD_11 ( VAR_116 , VAR_117 ) ; VAR_118 : VAR_119 ++ ; } } VAR_120 : VAR_121 -> VAR_122 [ 1 ] = VAR_123 ; METHOD_12 ( VAR_124 , VAR_125 ) ; return VAR_126 ; }",283
284,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; if ( VAR_12 < 0 ) { VAR_13 = 0 ; } VAR_14 = VAR_15 / 86400 ;  VAR_16 = VAR_17 % 86400 ;  VAR_18 = ( 4 + VAR_19 ) % 7 ; VAR_20 = VAR_21 / 3600 ; VAR_22 %= 3600 ; VAR_23 = VAR_24 / 60 ; VAR_25 %= 60 ; VAR_26 = VAR_27 - ( 31 + 28 ) + 719527 ; VAR_28 = ( VAR_29 + 2 ) * 400 / ( 365 * 400 + 100 - 4 + 1 ) ; VAR_30 = VAR_31 - ( 365 * VAR_32 + VAR_33 / 4 - VAR_34 / 100 + VAR_35 / 400 ) ; if ( VAR_36 < 0 ) { VAR_37 = ( VAR_38 % 4 == 0 ) && ( VAR_39 % 100 || ( VAR_40 % 400 == 0 ) ) ; VAR_41 = 365 + VAR_42 + VAR_43 ; VAR_44 -- ; } VAR_45 = ( VAR_46 + 31 ) * 10 / 306 ; VAR_47 = VAR_48 - ( 367 * VAR_49 / 12 - 30 ) + 1 ; if ( VAR_50 >= 306 ) { VAR_51 ++ ; VAR_52 -= 10 ; } else { VAR_53 += 2 ; } VAR_54 -> VAR_55 = ( TYPE_5 ) VAR_56 ; VAR_57 -> VAR_58 = ( TYPE_6 ) VAR_59 ; VAR_60 -> VAR_61 = ( TYPE_7 ) VAR_62 ; VAR_63 -> VAR_64 = ( TYPE_8 ) VAR_65 ; VAR_66 -> VAR_67 = ( TYPE_9 ) VAR_68 ; VAR_69 -> VAR_70 = ( TYPE_10 ) VAR_71 ; VAR_72 -> VAR_73 = ( TYPE_11 ) VAR_74 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; if ( VAR_12 < 0 ) { VAR_13 = 0 ; } VAR_14 = VAR_15 / 86400 ; VAR_16 = VAR_17 % 86400 ; if ( VAR_31 > 2932896 ) { VAR_31 = 2932896 ; VAR_56 = 86399 ; } VAR_18 = ( 4 + VAR_19 ) % 7 ; VAR_20 = VAR_21 / 3600 ; VAR_22 %= 3600 ; VAR_23 = VAR_24 / 60 ; VAR_25 %= 60 ; VAR_26 = VAR_27 - ( 31 + 28 ) + 719527 ; VAR_28 = ( VAR_29 + 2 ) * 400 / ( 365 * 400 + 100 - 4 + 1 ) ; VAR_30 = VAR_31 - ( 365 * VAR_32 + VAR_33 / 4 - VAR_34 / 100 + VAR_35 / 400 ) ; if ( VAR_36 < 0 ) { VAR_37 = ( VAR_38 % 4 == 0 ) && ( VAR_39 % 100 || ( VAR_40 % 400 == 0 ) ) ; VAR_41 = 365 + VAR_42 + VAR_43 ; VAR_44 -- ; } VAR_45 = ( VAR_46 + 31 ) * 10 / 306 ; VAR_47 = VAR_48 - ( 367 * VAR_49 / 12 - 30 ) + 1 ; if ( VAR_50 >= 306 ) { VAR_51 ++ ; VAR_52 -= 10 ; } else { VAR_53 += 2 ; } VAR_54 -> VAR_55 = ( TYPE_5 ) VAR_56 ; VAR_57 -> VAR_58 = ( TYPE_6 ) VAR_59 ; VAR_60 -> VAR_61 = ( TYPE_7 ) VAR_62 ; VAR_63 -> VAR_64 = ( TYPE_8 ) VAR_65 ; VAR_66 -> VAR_67 = ( TYPE_9 ) VAR_68 ; VAR_69 -> VAR_70 = ( TYPE_10 ) VAR_71 ; VAR_72 -> VAR_73 = ( TYPE_11 ) VAR_74 ; }",284
285,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {  if ( ( VAR_5 + VAR_6 < VAR_7 ) || ( VAR_8 + VAR_9 < VAR_10 ) || ( VAR_11 + VAR_12 > VAR_13 ) || ( VAR_14 > VAR_15 ) ) {   METHOD_1 ( VAR_16 -> VAR_17 -> VAR_18 , VAR_19 , ""ExifData"" ,  ""Bogusthumbnailoffset(%u)orsize(%u)."" , VAR_20 , VAR_21 ) ; return ; } if ( VAR_22 -> VAR_23 ) METHOD_2 ( VAR_24 -> VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; if ( ! ( VAR_29 -> VAR_30 = METHOD_3 ( VAR_31 , VAR_32 ) ) ) { METHOD_4 ( VAR_33 -> VAR_34 -> VAR_35 , ""ExifData"" , VAR_36 ) ; VAR_37 -> VAR_38 = 0 ; return ; } VAR_39 -> VAR_40 = VAR_41 ; METHOD_5 ( VAR_42 -> VAR_43 , VAR_44 + VAR_45 , VAR_46 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { if ( VAR_45 >= VAR_15 ) { METHOD_1 ( VAR_16 -> VAR_17 -> VAR_18 , VAR_19 , ""ExifData"" , ""Bogusthumbnailoffset(%u)orsize(%u)."" , VAR_20 , VAR_21 ) ; return ; } if ( VAR_22 -> VAR_23 ) METHOD_2 ( VAR_24 -> VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; if ( ! ( VAR_29 -> VAR_30 = METHOD_3 ( VAR_31 , VAR_32 ) ) ) { METHOD_4 ( VAR_33 -> VAR_34 -> VAR_35 , ""ExifData"" , VAR_36 ) ; VAR_37 -> VAR_38 = 0 ; return ; } VAR_39 -> VAR_40 = VAR_41 ; METHOD_5 ( VAR_42 -> VAR_43 , VAR_44 + VAR_45 , VAR_46 ) ; }",285
286,TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ;  if ( ! VAR_2 )  return VAR_3 ; VAR_4 = ( TYPE_3 * ) ~ ( ( TYPE_4 ) VAR_5 -> VAR_6 ) ; return VAR_7 ; },TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; if ( ! VAR_2 ) return VAR_3 ; VAR_4 = ( TYPE_3 * ) ~ ( ( TYPE_4 ) VAR_5 -> VAR_6 ) ; return VAR_7 ; },286
287,"static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 TYPE_3 TYPE_4 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_5 VAR_2 , const TYPE_6 * VAR_3 TYPE_7 , TYPE_8 TYPE_9 , TYPE_10 TYPE_11 TYPE_12 , TYPE_13 TYPE_14 TYPE_15 , TYPE_16 VAR_4 TYPE_17 ) { TYPE_18 1 const struct STRUCT_OR_UNION_1 * VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 ; static const TYPE_19 * VAR_7 [ ] = { ""IPv4"" , ""IPv4net"" , ""IPv6"" , ""IPv6net"" , } ; static const TYPE_20 * VAR_8 [ ] = { VAR_9 , ""IPv4"" , ""FQDN"" , ""userFQDN"" , ""IPv4net"" , ""IPv6"" , ""IPv6net"" , ""IPv4range"" , ""IPv6range"" , ""ASN1DN"" , ""ASN1GN"" , ""keyid"" , } ; TYPE_21 VAR_10 ; const TYPE_22 * VAR_11 ; METHOD_1 ( ( VAR_12 , ""%s:"" , METHOD_2 ( VAR_13 ) ) ) ; VAR_14 = ( const struct STRUCT_OR_UNION_3 * ) VAR_15 ; METHOD_3 ( * VAR_16 ) ; METHOD_4 ( & VAR_17 , VAR_18 , sizeof ( VAR_19 ) ) ; if ( sizeof ( * VAR_20 ) < VAR_21 ) { VAR_22 = ( const TYPE_23 * ) ( VAR_23 + 1 ) ; VAR_24 = VAR_25 - sizeof ( * VAR_26 ) ; } else { VAR_27 = VAR_28 ; VAR_29 = 0 ; } if 0 METHOD_5 ( ( VAR_30 , ""[phase=%ddoi=%dproto=%d]"" , TYPE_24 , TYPE_25 , TYPE_26 ) ) ; switch ( TYPE_27 ) { TYPE_28 TYPE_29 case 1 : default : METHOD_6 ( ( VAR_31 , ""idtype=%s"" , METHOD_7 ( VAR_32 . VAR_33 . VAR_34 , VAR_35 ) ) ) ; METHOD_8 ( ( VAR_36 , ""doi_data=%u"" , ( TYPE_30 ) ( METHOD_9 ( VAR_37 . VAR_38 . VAR_39 ) & 0xffffff ) ) ) ; break ; TYPE_31 TYPE_32 case 1 : case 2 : { const struct STRUCT_OR_UNION_4 * VAR_40 ; struct STRUCT_OR_UNION_5 VAR_41 ; const TYPE_33 * VAR_42 ; VAR_43 = ( const struct STRUCT_OR_UNION_6 * ) VAR_44 ; METHOD_10 ( * VAR_45 ) ; METHOD_11 ( & VAR_46 , VAR_47 , sizeof ( VAR_48 ) ) ; METHOD_12 ( ( VAR_49 , ""idtype=%s"" , METHOD_13 ( VAR_50 . VAR_51 , VAR_52 ) ) ) ; if ( ! VAR_53 -> VAR_54 && VAR_55 . VAR_56 && ( VAR_57 = METHOD_14 ( VAR_58 . VAR_59 ) ) != VAR_60 ) METHOD_15 ( ( VAR_61 , ""protoid=%s"" , VAR_62 ) ) ; else METHOD_16 ( ( VAR_63 , ""protoid=%u"" , VAR_64 . VAR_65 ) ) ; METHOD_17 ( ( VAR_66 , ""port=%d"" , METHOD_18 ( VAR_67 . VAR_68 ) ) ) ; if ( ! VAR_69 ) break ; if ( VAR_70 == VAR_71 ) goto VAR_72 ; METHOD_19 ( * VAR_73 , VAR_74 ) ; switch ( VAR_75 . VAR_76 ) { case VAR_77 : if ( VAR_78 < 4 ) METHOD_20 ( ( VAR_79 , ""len=%d[bad:<4]"" , VAR_80 ) ) ; else METHOD_21 ( ( VAR_81 , ""len=%d%s"" , VAR_82 , METHOD_22 ( VAR_83 , VAR_84 ) ) ) ; VAR_85 = 0 ; break ; case VAR_86 : case VAR_87 : { TYPE_34 VAR_88 ; METHOD_23 ( ( VAR_89 , ""len=%d"" , VAR_90 ) ) ; for ( VAR_91 = 0 ; VAR_92 < VAR_93 ; VAR_94 ++ ) METHOD_24 ( VAR_95 , VAR_96 [ VAR_97 ] ) ; VAR_98 = 0 ; break ; } case VAR_99 : { const TYPE_35 * VAR_100 ; if ( VAR_101 < 8 ) METHOD_25 ( ( VAR_102 , ""len=%d[bad:<8]"" , VAR_103 ) ) ; else { VAR_104 = VAR_105 + sizeof ( struct STRUCT_OR_UNION_7 ) ; METHOD_26 ( ( VAR_106 , ""len=%d%s/%u.%u.%u.%u"" , VAR_107 , METHOD_27 ( VAR_108 , VAR_109 ) , VAR_110 [ 0 ] , VAR_111 [ 1 ] , VAR_112 [ 2 ] , VAR_113 [ 3 ] ) ) ; } VAR_114 = 0 ; break ; } case VAR_115 : if ( VAR_116 < 16 ) METHOD_28 ( ( VAR_117 , ""len=%d[bad:<16]"" , VAR_118 ) ) ; else METHOD_29 ( ( VAR_119 , ""len=%d%s"" , VAR_120 , METHOD_30 ( VAR_121 , VAR_122 ) ) ) ; VAR_123 = 0 ; break ; case VAR_124 : { const TYPE_36 * VAR_125 ;  if ( VAR_126 < 20 )  METHOD_31 ( ( VAR_127 , ""len=%d[bad:<20]"" , VAR_128 ) ) ; else { VAR_129 = ( const TYPE_37 * ) ( VAR_130 + sizeof ( struct STRUCT_OR_UNION_8 ) ) ; METHOD_32 ( ( VAR_131 , ""len=%d%s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"" , VAR_132 , METHOD_33 ( VAR_133 , VAR_134 ) , VAR_135 [ 0 ] , VAR_136 [ 1 ] , VAR_137 [ 2 ] , VAR_138 [ 3 ] , VAR_139 [ 4 ] , VAR_140 [ 5 ] , VAR_141 [ 6 ] , VAR_142 [ 7 ] , VAR_143 [ 8 ] , VAR_144 [ 9 ] , VAR_145 [ 10 ] , VAR_146 [ 11 ] , VAR_147 [ 12 ] , VAR_148 [ 13 ] , VAR_149 [ 14 ] , VAR_150 [ 15 ] ) ) ; } VAR_151 = 0 ; break ; } case VAR_152 : if ( VAR_153 < 8 ) METHOD_34 ( ( VAR_154 , ""len=%d[bad:<8]"" , VAR_155 ) ) ; else { METHOD_35 ( ( VAR_156 , ""len=%d%s-%s"" , VAR_157 , METHOD_36 ( VAR_158 , VAR_159 ) , METHOD_37 ( VAR_160 , VAR_161 + sizeof ( struct STRUCT_OR_UNION_9 ) ) ) ) ; } VAR_162 = 0 ; break ; case VAR_163 : if ( VAR_164 < 32 ) METHOD_38 ( ( VAR_165 , ""len=%d[bad:<32]"" , VAR_166 ) ) ; else { METHOD_39 ( ( VAR_167 , ""len=%d%s-%s"" , VAR_168 , METHOD_40 ( VAR_169 , VAR_170 ) , METHOD_41 ( VAR_171 , VAR_172 + sizeof ( struct STRUCT_OR_UNION_10 ) ) ) ) ; } VAR_173 = 0 ; break ; case VAR_174 : case VAR_175 : case VAR_176 : break ; } break ; } } if ( VAR_177 && VAR_178 ) { METHOD_42 ( ( VAR_179 , ""len=%d"" , VAR_180 ) ) ; if ( 2 < VAR_181 -> VAR_182 ) { METHOD_43 ( ( VAR_183 , """" ) ) ; if ( ! METHOD_44 ( VAR_184 , ( const TYPE_38 * ) VAR_185 , VAR_186 ) ) goto VAR_187 ; } } return ( const TYPE_39 * ) VAR_188 + VAR_189 ; VAR_190 : METHOD_45 ( ( VAR_191 , ""[|%s]"" , METHOD_46 ( VAR_192 ) ) ) ; return VAR_193 ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 TYPE_3 TYPE_4 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_5 VAR_2 , const TYPE_6 * VAR_3 TYPE_7 , TYPE_8 TYPE_9 , TYPE_10 TYPE_11 TYPE_12 , TYPE_13 TYPE_14 TYPE_15 , TYPE_16 VAR_4 TYPE_17 ) { TYPE_18 1 const struct STRUCT_OR_UNION_1 * VAR_5 ; struct STRUCT_OR_UNION_2 VAR_6 ; static const TYPE_19 * VAR_7 [ ] = { ""IPv4"" , ""IPv4net"" , ""IPv6"" , ""IPv6net"" , } ; static const TYPE_20 * VAR_8 [ ] = { VAR_9 , ""IPv4"" , ""FQDN"" , ""userFQDN"" , ""IPv4net"" , ""IPv6"" , ""IPv6net"" , ""IPv4range"" , ""IPv6range"" , ""ASN1DN"" , ""ASN1GN"" , ""keyid"" , } ; TYPE_21 VAR_10 ; const TYPE_22 * VAR_11 ; METHOD_1 ( ( VAR_12 , ""%s:"" , METHOD_2 ( VAR_13 ) ) ) ; VAR_14 = ( const struct STRUCT_OR_UNION_3 * ) VAR_15 ; METHOD_3 ( * VAR_16 ) ; METHOD_4 ( & VAR_17 , VAR_18 , sizeof ( VAR_19 ) ) ; if ( sizeof ( * VAR_20 ) < VAR_21 ) { VAR_22 = ( const TYPE_23 * ) ( VAR_23 + 1 ) ; VAR_24 = VAR_25 - sizeof ( * VAR_26 ) ; } else { VAR_27 = VAR_28 ; VAR_29 = 0 ; } if 0 METHOD_5 ( ( VAR_30 , ""[phase=%ddoi=%dproto=%d]"" , TYPE_24 , TYPE_25 , TYPE_26 ) ) ; switch ( TYPE_27 ) { TYPE_28 TYPE_29 case 1 : default : METHOD_6 ( ( VAR_31 , ""idtype=%s"" , METHOD_7 ( VAR_32 . VAR_33 . VAR_34 , VAR_35 ) ) ) ; METHOD_8 ( ( VAR_36 , ""doi_data=%u"" , ( TYPE_30 ) ( METHOD_9 ( VAR_37 . VAR_38 . VAR_39 ) & 0xffffff ) ) ) ; break ; TYPE_31 TYPE_32 case 1 : case 2 : { const struct STRUCT_OR_UNION_4 * VAR_40 ; struct STRUCT_OR_UNION_5 VAR_41 ; const TYPE_33 * VAR_42 ; VAR_43 = ( const struct STRUCT_OR_UNION_6 * ) VAR_44 ; METHOD_10 ( * VAR_45 ) ; METHOD_11 ( & VAR_46 , VAR_47 , sizeof ( VAR_48 ) ) ; METHOD_12 ( ( VAR_49 , ""idtype=%s"" , METHOD_13 ( VAR_50 . VAR_51 , VAR_52 ) ) ) ; if ( ! VAR_53 -> VAR_54 && VAR_55 . VAR_56 && ( VAR_57 = METHOD_14 ( VAR_58 . VAR_59 ) ) != VAR_60 ) METHOD_15 ( ( VAR_61 , ""protoid=%s"" , VAR_62 ) ) ; else METHOD_16 ( ( VAR_63 , ""protoid=%u"" , VAR_64 . VAR_65 ) ) ; METHOD_17 ( ( VAR_66 , ""port=%d"" , METHOD_18 ( VAR_67 . VAR_68 ) ) ) ; if ( ! VAR_69 ) break ; if ( VAR_70 == VAR_71 ) goto VAR_72 ; METHOD_19 ( * VAR_73 , VAR_74 ) ; switch ( VAR_75 . VAR_76 ) { case VAR_77 : if ( VAR_78 < 4 ) METHOD_20 ( ( VAR_79 , ""len=%d[bad:<4]"" , VAR_80 ) ) ; else METHOD_21 ( ( VAR_81 , ""len=%d%s"" , VAR_82 , METHOD_22 ( VAR_83 , VAR_84 ) ) ) ; VAR_85 = 0 ; break ; case VAR_86 : case VAR_87 : { TYPE_34 VAR_88 ; METHOD_23 ( ( VAR_89 , ""len=%d"" , VAR_90 ) ) ; for ( VAR_91 = 0 ; VAR_92 < VAR_93 ; VAR_94 ++ ) METHOD_24 ( VAR_95 , VAR_96 [ VAR_97 ] ) ; VAR_98 = 0 ; break ; } case VAR_99 : { const TYPE_35 * VAR_100 ; if ( VAR_101 < 8 ) METHOD_25 ( ( VAR_102 , ""len=%d[bad:<8]"" , VAR_103 ) ) ; else { VAR_104 = VAR_105 + sizeof ( struct STRUCT_OR_UNION_7 ) ; METHOD_26 ( ( VAR_106 , ""len=%d%s/%u.%u.%u.%u"" , VAR_107 , METHOD_27 ( VAR_108 , VAR_109 ) , VAR_110 [ 0 ] , VAR_111 [ 1 ] , VAR_112 [ 2 ] , VAR_113 [ 3 ] ) ) ; } VAR_114 = 0 ; break ; } case VAR_115 : if ( VAR_116 < 16 ) METHOD_28 ( ( VAR_117 , ""len=%d[bad:<16]"" , VAR_118 ) ) ; else METHOD_29 ( ( VAR_119 , ""len=%d%s"" , VAR_120 , METHOD_30 ( VAR_121 , VAR_122 ) ) ) ; VAR_123 = 0 ; break ; case VAR_124 : { const TYPE_36 * VAR_125 ; if ( VAR_126 < 20 ) METHOD_31 ( ( VAR_127 , ""len=%d[bad:<20]"" , VAR_128 ) ) ; else { VAR_129 = ( const TYPE_37 * ) ( VAR_130 + sizeof ( struct STRUCT_OR_UNION_8 ) ) ; METHOD_32 ( ( VAR_131 , ""len=%d%s/0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"" , VAR_132 , METHOD_33 ( VAR_133 , VAR_134 ) , VAR_135 [ 0 ] , VAR_136 [ 1 ] , VAR_137 [ 2 ] , VAR_138 [ 3 ] , VAR_139 [ 4 ] , VAR_140 [ 5 ] , VAR_141 [ 6 ] , VAR_142 [ 7 ] , VAR_143 [ 8 ] , VAR_144 [ 9 ] , VAR_145 [ 10 ] , VAR_146 [ 11 ] , VAR_147 [ 12 ] , VAR_148 [ 13 ] , VAR_149 [ 14 ] , VAR_150 [ 15 ] ) ) ; } VAR_151 = 0 ; break ; } case VAR_152 : if ( VAR_153 < 8 ) METHOD_34 ( ( VAR_154 , ""len=%d[bad:<8]"" , VAR_155 ) ) ; else { METHOD_35 ( ( VAR_156 , ""len=%d%s-%s"" , VAR_157 , METHOD_36 ( VAR_158 , VAR_159 ) , METHOD_37 ( VAR_160 , VAR_161 + sizeof ( struct STRUCT_OR_UNION_9 ) ) ) ) ; } VAR_162 = 0 ; break ; case VAR_163 : if ( VAR_164 < 32 ) METHOD_38 ( ( VAR_165 , ""len=%d[bad:<32]"" , VAR_166 ) ) ; else { METHOD_39 ( ( VAR_167 , ""len=%d%s-%s"" , VAR_168 , METHOD_40 ( VAR_169 , VAR_170 ) , METHOD_41 ( VAR_171 , VAR_172 + sizeof ( struct STRUCT_OR_UNION_10 ) ) ) ) ; } VAR_173 = 0 ; break ; case VAR_174 : case VAR_175 : case VAR_176 : break ; } break ; } } if ( VAR_177 && VAR_178 ) { METHOD_42 ( ( VAR_179 , ""len=%d"" , VAR_180 ) ) ; if ( 2 < VAR_181 -> VAR_182 ) { METHOD_43 ( ( VAR_183 , """" ) ) ; if ( ! METHOD_44 ( VAR_184 , ( const TYPE_38 * ) VAR_185 , VAR_186 ) ) goto VAR_187 ; } } return ( const TYPE_39 * ) VAR_188 + VAR_189 ; VAR_190 : METHOD_45 ( ( VAR_191 , ""[|%s]"" , METHOD_46 ( VAR_192 ) ) ) ; return VAR_193 ; }",287
288,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 ; * VAR_9 = VAR_10 ; METHOD_1 ( METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 -> VAR_14 , VAR_15 , & VAR_16 ) ) ; switch ( VAR_17 -> VAR_18 ) { case VAR_19 :  ( ( TYPE_8 * ) VAR_20 ) -> VAR_21 = VAR_22 ;  break ; case VAR_23 :  ( ( TYPE_9 * ) VAR_24 ) -> VAR_25 = VAR_26 ;  break ; case VAR_27 : VAR_28 = ( TYPE_10 * ) VAR_29 ; VAR_30 = ( TYPE_11 * ) VAR_31 ; METHOD_3 ( METHOD_4 ( VAR_32 -> VAR_33 , & VAR_34 -> VAR_35 ) , METHOD_5 ( VAR_36 ) ) ; for ( VAR_37 = 0 ; VAR_38 < VAR_39 ; VAR_40 ++ ) VAR_41 -> VAR_42 [ VAR_43 ] = VAR_44 -> VAR_45 [ VAR_46 ] ; break ; case VAR_47 : VAR_48 = ( ( TYPE_12 * ) VAR_49 ) -> VAR_50 ; while ( VAR_51 != VAR_52 ) { METHOD_6 ( METHOD_7 ( VAR_53 -> VAR_54 , & VAR_55 ) , METHOD_8 ( VAR_56 ) ) ; METHOD_9 ( METHOD_10 ( VAR_57 , VAR_58 ) , METHOD_11 ( VAR_59 ) ; METHOD_12 ( VAR_60 ) ) ; VAR_61 = VAR_62 -> VAR_63 ; } break ; case VAR_64 : METHOD_13 ( ( ( TYPE_13 * ) VAR_65 ) -> VAR_66 , & VAR_67 ) ; ( ( TYPE_14 * ) VAR_68 ) -> VAR_69 = VAR_70 ; break ; case VAR_71 : METHOD_14 ( ( ( TYPE_15 * ) VAR_72 ) -> VAR_73 , & VAR_74 ) ; ( ( TYPE_16 * ) VAR_75 ) -> VAR_76 = VAR_77 ; break ; default : METHOD_15 ( VAR_78 ) ; } * VAR_79 = VAR_80 ; return VAR_81 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 ; * VAR_9 = VAR_10 ; METHOD_1 ( METHOD_2 ( VAR_11 -> VAR_12 , VAR_13 -> VAR_14 , VAR_15 , & VAR_16 ) ) ; switch ( VAR_17 -> VAR_18 ) { case VAR_19 : ( ( TYPE_8 * ) VAR_20 ) -> VAR_21 = VAR_22 ; break ; case VAR_23 : ( ( TYPE_9 * ) VAR_24 ) -> VAR_25 = ( ( TYPE_8 * ) VAR_72 ) -> VAR_25 ; break ; case VAR_27 : VAR_28 = ( TYPE_10 * ) VAR_29 ; VAR_30 = ( TYPE_11 * ) VAR_31 ; METHOD_3 ( METHOD_4 ( VAR_32 -> VAR_33 , & VAR_34 -> VAR_35 ) , METHOD_5 ( VAR_36 ) ) ; for ( VAR_37 = 0 ; VAR_38 < VAR_39 ; VAR_40 ++ ) VAR_41 -> VAR_42 [ VAR_43 ] = VAR_44 -> VAR_45 [ VAR_46 ] ; break ; case VAR_47 : VAR_48 = ( ( TYPE_12 * ) VAR_49 ) -> VAR_50 ; while ( VAR_51 != VAR_52 ) { METHOD_6 ( METHOD_7 ( VAR_53 -> VAR_54 , & VAR_55 ) , METHOD_8 ( VAR_56 ) ) ; METHOD_9 ( METHOD_10 ( VAR_57 , VAR_58 ) , METHOD_11 ( VAR_59 ) ; METHOD_12 ( VAR_60 ) ) ; VAR_61 = VAR_62 -> VAR_63 ; } break ; case VAR_64 : METHOD_13 ( ( ( TYPE_13 * ) VAR_65 ) -> VAR_66 , & VAR_67 ) ; ( ( TYPE_14 * ) VAR_68 ) -> VAR_69 = VAR_70 ; break ; case VAR_71 : METHOD_14 ( ( ( TYPE_15 * ) VAR_72 ) -> VAR_73 , & VAR_74 ) ; ( ( TYPE_16 * ) VAR_75 ) -> VAR_76 = VAR_77 ; break ; default : METHOD_15 ( VAR_78 ) ; } * VAR_79 = VAR_80 ; return VAR_81 ; }",288
289,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""iptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ;  if ( ( VAR_38 -> VAR_39 == sizeof ( struct STRUCT_OR_UNION_4 ) &&  ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) &&  VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) ||  VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; TYPE_8 TYPE_9 if ( VAR_67 -> VAR_68 & ( 1 << VAR_69 ) ) { METHOD_7 ( ""Backunset"" ""onhook%u"" ""rule%u\\n"" , VAR_70 , VAR_71 ) ; } VAR_72 = VAR_73 ; VAR_74 = VAR_75 -> VAR_76 . VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = 0 ; if ( VAR_81 == VAR_82 ) goto VAR_83 ; VAR_84 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_85 + VAR_86 ) ; } while ( VAR_87 == VAR_88 + VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 -> VAR_93 ; VAR_94 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_95 + VAR_96 + VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 += VAR_103 ; } else { TYPE_10 VAR_104 = VAR_105 -> VAR_106 ; if ( METHOD_8 ( VAR_107 -> VAR_108 . VAR_109 . VAR_110 . VAR_111 , VAR_112 ) == 0 && VAR_113 >= 0 ) { if ( VAR_114 > VAR_115 -> VAR_116 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_9 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_117 ) ; return 0 ; } METHOD_10 ( ""Jumprule%u->%u\\n"" , VAR_118 , VAR_119 ) ; } else { VAR_120 = VAR_121 + VAR_122 -> VAR_123 ; } VAR_124 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_125 + VAR_126 ) ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } } VAR_133 : METHOD_11 ( ""Finishedchain%u\\n"" , VAR_134 ) ; } return 1 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""iptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ; if ( ( METHOD_4 ( VAR_127 ) && ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) && VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) || VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; TYPE_8 TYPE_9 if ( VAR_67 -> VAR_68 & ( 1 << VAR_69 ) ) { METHOD_7 ( ""Backunset"" ""onhook%u"" ""rule%u\\n"" , VAR_70 , VAR_71 ) ; } VAR_72 = VAR_73 ; VAR_74 = VAR_75 -> VAR_76 . VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = 0 ; if ( VAR_81 == VAR_82 ) goto VAR_83 ; VAR_84 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_85 + VAR_86 ) ; } while ( VAR_87 == VAR_88 + VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 -> VAR_93 ; VAR_94 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_95 + VAR_96 + VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 += VAR_103 ; } else { TYPE_10 VAR_104 = VAR_105 -> VAR_106 ; if ( METHOD_8 ( VAR_107 -> VAR_108 . VAR_109 . VAR_110 . VAR_111 , VAR_112 ) == 0 && VAR_113 >= 0 ) { if ( VAR_114 > VAR_115 -> VAR_116 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_9 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_117 ) ; return 0 ; } METHOD_10 ( ""Jumprule%u->%u\\n"" , VAR_118 , VAR_119 ) ; } else { VAR_120 = VAR_121 + VAR_122 -> VAR_123 ; } VAR_124 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_125 + VAR_126 ) ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } } VAR_133 : METHOD_11 ( ""Finishedchain%u\\n"" , VAR_134 ) ; } return 1 ; }",289
290,"static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 [ VAR_5 ] ;  if ( ( VAR_6 -> VAR_7 & VAR_8 ) && ! VAR_9 )   return - VAR_10 ;  if ( ! VAR_11 ) return 0 ; if ( VAR_12 -> VAR_13 . VAR_14 != VAR_15 ) return - VAR_16 ; if ( VAR_17 -> VAR_18 != 0 ) return - VAR_19 ; return 0 ; }","static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 [ VAR_5 ] ; struct STRUCT_OR_UNION_3 * VAR_20 ; if ( VAR_17 -> VAR_18 != 0 ) return - VAR_19 ; VAR_20 = METHOD_1 ( VAR_11 ) ; if ( VAR_20 -> VAR_21 > VAR_22 / sizeof ( VAR_20 -> VAR_23 [ 0 ] ) / 8 ) return - VAR_19 ; if ( METHOD_2 ( VAR_11 ) < METHOD_3 ( VAR_20 ) && METHOD_2 ( VAR_11 ) != sizeof ( * VAR_20 ) ) return - VAR_19 ; } return 0 ; }",290
291,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 = METHOD_1 ( ""/dev/null"" , VAR_3 ) ; while ( VAR_4 < 2 ) VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 > 2 ) METHOD_3 ( VAR_8 ) ; TYPE_4 VAR_9 = 1 ; VAR_10 = VAR_11 ; METHOD_4 ( ) ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 VAR_15 ; TYPE_9 VAR_16 ; TYPE_10 VAR_17 ; { TYPE_11 * VAR_18 = METHOD_5 ( ) ; METHOD_6 ( ""CCpp.conf"" , VAR_19 ) ; const TYPE_12 * VAR_20 ; VAR_21 = METHOD_7 ( VAR_22 , ""MakeCompatCore"" ) ; VAR_23 = VAR_24 && METHOD_8 ( VAR_25 ) ; VAR_26 = METHOD_9 ( VAR_27 , ""SaveBinaryImage"" ) ; VAR_28 = VAR_29 && METHOD_10 ( VAR_30 ) ; VAR_31 = METHOD_11 ( VAR_32 , ""SaveFullCore"" ) ; VAR_33 = VAR_34 ? METHOD_12 ( VAR_35 ) : VAR_36 ; VAR_37 = METHOD_13 ( VAR_38 , ""CreateCoreBacktrace"" ) ; VAR_39 = VAR_40 ? METHOD_14 ( VAR_41 ) : VAR_42 ; VAR_43 = METHOD_15 ( VAR_44 , ""SaveContainerizedPackageData"" ) ; VAR_45 = VAR_46 && METHOD_16 ( VAR_47 ) ; if ( ! VAR_48 ) { if ( VAR_49 ) METHOD_17 ( ""IgnoringSaveContainerizedPackageDatabecauseExploreChrootsisdisabled"" ) ; VAR_50 = VAR_51 ; } VAR_52 = METHOD_18 ( VAR_53 , ""StandaloneHook"" ) ; VAR_54 = VAR_55 && METHOD_19 ( VAR_56 ) ; VAR_57 = METHOD_20 ( VAR_58 , ""VerboseLog"" ) ; if ( VAR_59 ) VAR_60 = METHOD_21 ( VAR_61 ) ; METHOD_22 ( VAR_62 ) ; } if ( VAR_63 == 2 && METHOD_23 ( VAR_64 [ 1 ] , ""--config-test"" ) ) return METHOD_24 ( VAR_65 , VAR_66 ) ; if ( VAR_67 < 8 ) { METHOD_25 ( ""Usage:%sSIGNOCORE_SIZE_LIMITPIDUIDGIDTIMEBINARY_NAMEGLOBAL_PID[TID]"" , VAR_68 [ 0 ] ) ; } if ( METHOD_26 ( VAR_69 [ 1 ] , '' ) ) { TYPE_13 VAR_70 ; for ( VAR_71 = 1 ; VAR_72 [ VAR_73 ] ; VAR_74 ++ ) { METHOD_27 ( VAR_75 [ VAR_76 ] , '' ) [ 0 ] = '\\0' ; } } VAR_77 = 0 ; const TYPE_14 * VAR_78 = VAR_79 [ 1 ] ; TYPE_15 VAR_80 = METHOD_28 ( VAR_81 ) ; TYPE_16 VAR_82 = METHOD_29 ( VAR_83 [ 2 ] , VAR_84 , 10 ) ; if ( VAR_85 < 0 ) { VAR_86 = ~ ( ( TYPE_17 ) 1 << ( sizeof ( TYPE_18 ) * 8 - 1 ) ) ; } const TYPE_19 * VAR_87 = VAR_88 [ 3 ] ; TYPE_20 VAR_89 = METHOD_30 ( VAR_90 [ 3 ] ) ; TYPE_21 VAR_91 = METHOD_31 ( VAR_92 [ 4 ] ) ; if ( VAR_93 || VAR_94 <= 0 ) { METHOD_32 ( ""PID\'%s\'orlimit\'%s\'isbogus"" , VAR_95 [ 3 ] , VAR_96 [ 2 ] ) ; } { TYPE_22 * VAR_97 = METHOD_33 ( VAR_RUN ""/abrt/saved_core_pattern"" ) ; if ( VAR_98 && VAR_99 [ 0 ] != '|' ) VAR_100 = VAR_101 ; else METHOD_34 ( VAR_102 ) ; } const TYPE_23 * VAR_103 = VAR_104 [ 8 ] ; TYPE_24 VAR_105 = METHOD_35 ( VAR_106 [ 8 ] ) ; TYPE_25 VAR_107 = - 1 ; const TYPE_26 * VAR_108 = VAR_109 [ 9 ] ; if ( VAR_110 ) { VAR_111 = METHOD_36 ( VAR_112 ) ; } TYPE_27 VAR_113 [ VAR_114 ] ; TYPE_28 * VAR_115 = METHOD_37 ( VAR_116 ) ; if ( VAR_117 && METHOD_38 ( VAR_118 , ""/abrt-hook-ccpp"" ) ) { METHOD_39 ( ""PID%luis\'%s\',notdumpingittoavoidrecursion"" , ( TYPE_29 ) VAR_119 , VAR_120 ) ; } VAR_121 = METHOD_40 ( VAR_122 ) ; METHOD_41 ( ""user_pwd:\'%s\'"" , VAR_123 ) ; METHOD_42 ( VAR_124 , ""/proc/%lu/status"" , ( TYPE_30 ) VAR_125 ) ; TYPE_31 * VAR_126 = METHOD_43 ( VAR_127 , VAR_128 ) ; TYPE_32 VAR_129 = VAR_130 ; TYPE_33 VAR_131 = METHOD_44 ( VAR_132 ) ; if ( VAR_133 < 0 ) METHOD_45 ( ""Can\'tparse\'Uid:line\'in/proc/%lu/status"" , ( TYPE_34 ) VAR_134 ) ; const TYPE_35 VAR_135 = METHOD_46 ( VAR_136 ) ; if ( VAR_137 < 0 ) METHOD_47 ( ""Can\'tparse\'Gid:line\'in/proc/%lu/status"" , ( TYPE_36 ) VAR_138 ) ; TYPE_37 VAR_139 = METHOD_48 ( ) ; if ( VAR_140 != VAR_141 ) { VAR_142 = 0 ; if ( VAR_143 == VAR_144 ) VAR_145 = VAR_146 ; else { VAR_147 = VAR_148 ; VAR_149 = 1 ; } } TYPE_38 VAR_150 = - 1 ; if ( VAR_151 && VAR_152 != 0 ) VAR_153 = METHOD_49 ( VAR_154 , VAR_155 , VAR_156 , VAR_157 , & VAR_158 [ 1 ] ) ; if ( VAR_159 == VAR_160 ) { METHOD_50 ( ""Can\'tread/proc/%lu/exelink"" , ( TYPE_39 ) VAR_161 ) ; return METHOD_51 ( VAR_162 , VAR_163 , VAR_164 ) ; } const TYPE_40 * VAR_165 = VAR_166 ; if ( ! METHOD_52 ( VAR_167 , & VAR_168 ) ) return METHOD_53 ( VAR_169 , VAR_170 , VAR_171 ) ; const TYPE_41 VAR_172 = METHOD_54 ( ) ; if ( ! VAR_173 && ! VAR_174 ) { METHOD_55 ( ""abrtdisnotrunning.Ifitcrashed,"" ""/proc/sys/kernel/core_patterncontainsastalevalue,"" ""considerresettingitto\'core\'"" ) ; return METHOD_56 ( VAR_175 , VAR_176 , VAR_177 ) ; } if ( VAR_178 ) METHOD_57 ( VAR_179 , VAR_180 , ""abrt"" ) ; if ( VAR_181 > 0 ) { if ( METHOD_58 ( VAR_182 , VAR_183 ) ) return METHOD_59 ( VAR_184 , VAR_185 , VAR_186 ) ; } METHOD_60 ( VAR_187 , sizeof ( VAR_188 ) , ""%s/last-ccpp"" , VAR_189 ) ; if ( METHOD_61 ( VAR_190 , VAR_191 ) ) { return METHOD_62 ( VAR_192 , VAR_193 , VAR_194 ) ; } const TYPE_42 * VAR_195 = METHOD_63 ( VAR_196 , '/' ) ; if ( VAR_197 && METHOD_64 ( ++ VAR_198 , ""abrt"" , 4 ) == 0 ) { if ( VAR_199 == 0 ) { METHOD_65 ( ""Ignoringcrashof%s(SIG%s)."" , VAR_200 , VAR_201 ? VAR_202 : VAR_203 ) ; goto VAR_204 ; } if ( METHOD_66 ( VAR_205 , sizeof ( VAR_206 ) , ""%s/%s-coredump"" , VAR_207 , VAR_208 ) >= sizeof ( VAR_209 ) ) METHOD_67 ( ""Errorsaving\'%s\':truncatedlongfilepath"" , VAR_210 ) ;  TYPE_43 VAR_211 = METHOD_68 ( VAR_212 , VAR_213 | VAR_214 | VAR_215 , 0600 ) ;  TYPE_44 VAR_216 = METHOD_69 ( VAR_217 , VAR_218 , VAR_219 ) ; if ( VAR_220 < 0 || METHOD_70 ( VAR_221 ) != 0 ) { METHOD_71 ( VAR_222 ) ; METHOD_72 ( ""Errorsaving\'%s\'"" , VAR_223 ) ; } METHOD_73 ( ""Savedcoredumpofpid%lu(%s)to%s(%llubytes)"" , ( TYPE_45 ) VAR_224 , VAR_225 , VAR_226 , ( TYPE_46 TYPE_47 ) VAR_227 ) ; VAR_228 = 0 ; goto VAR_229 ; } unsigned VAR_230 = METHOD_74 ( VAR_231 , sizeof ( VAR_232 ) , ""%s/ccpp-%s-%lu.new"" , VAR_233 , METHOD_75 ( VAR_234 ) , ( TYPE_48 ) VAR_235 ) ; if ( VAR_236 >= ( sizeof ( VAR_237 ) - sizeof ( ""/"" FILENAME_COREDUMP ) ) ) { return METHOD_76 ( VAR_238 , VAR_239 , VAR_240 ) ; } VAR_241 = METHOD_77 ( VAR_242 , 0 , VAR_243 ) ; if ( VAR_244 ) { TYPE_49 VAR_245 [ sizeof ( ""/proc/%lu/somewhat_long_name"" ) + sizeof ( TYPE_50 ) * 3 ] ; TYPE_51 VAR_246 = METHOD_78 ( VAR_247 , ""/proc/%lu/root"" , ( TYPE_52 ) VAR_248 ) ; VAR_249 -= METHOD_79 ( ""root"" ) ; TYPE_53 * VAR_250 = METHOD_80 ( VAR_251 ) ? METHOD_81 ( VAR_252 ) : VAR_253 ; if ( VAR_254 ) { METHOD_82 ( VAR_255 , VAR_256 , ( VAR_257 != VAR_258 ) ? VAR_259 : VAR_260 ) ; } else { METHOD_83 ( VAR_261 , VAR_262 , VAR_263 ) ; } TYPE_54 * VAR_264 = METHOD_84 ( VAR_265 -> VAR_266 , ""also_somewhat_longish_name"" ) ; TYPE_55 * VAR_267 = METHOD_85 ( VAR_268 , '/' ) + 1 ; METHOD_86 ( VAR_269 + VAR_270 , ""maps"" ) ; METHOD_87 ( VAR_271 , VAR_272 , VAR_273 ) ; METHOD_88 ( VAR_274 + VAR_275 , ""limits"" ) ; METHOD_89 ( VAR_276 , VAR_277 , VAR_278 ) ; METHOD_90 ( VAR_279 + VAR_280 , ""cgroup"" ) ; METHOD_91 ( VAR_281 , VAR_282 , VAR_283 ) ; METHOD_92 ( VAR_284 + VAR_285 , ""mountinfo"" ) ; METHOD_93 ( VAR_286 , VAR_287 , VAR_288 ) ; METHOD_94 ( VAR_289 , VAR_290 ) ; METHOD_95 ( VAR_291 + VAR_292 , ""fd"" ) ; METHOD_96 ( VAR_293 , VAR_294 , VAR_295 -> VAR_296 , VAR_297 -> VAR_298 ) ; METHOD_97 ( VAR_299 , VAR_300 ) ; METHOD_98 ( VAR_301 , 1 , VAR_302 , VAR_303 -> VAR_304 , VAR_305 -> VAR_306 ) ; METHOD_99 ( VAR_307 ) ; TYPE_56 * VAR_308 = VAR_309 ; METHOD_100 ( VAR_310 , ""container"" , & VAR_311 ) ; if ( VAR_312 != VAR_313 ) { METHOD_101 ( VAR_314 , VAR_315 , VAR_316 ) ; METHOD_102 ( VAR_317 ) ; VAR_318 = VAR_319 ; } METHOD_103 ( VAR_320 , ""container_uuid"" , & VAR_321 ) ; if ( VAR_322 != VAR_323 ) { METHOD_104 ( VAR_324 , VAR_325 , VAR_326 ) ; METHOD_105 ( VAR_327 ) ; } const TYPE_57 VAR_328 = ( VAR_329 != VAR_330 && METHOD_106 ( VAR_331 , ""/"" ) == 0 ) ; if ( VAR_332 ) { METHOD_107 ( ""Process%disconsideredtobecontainerized"" , VAR_333 ) ; TYPE_58 VAR_334 ; if ( METHOD_108 ( VAR_335 , & VAR_336 ) == 0 ) { TYPE_59 * VAR_337 = METHOD_109 ( VAR_338 ) ; METHOD_110 ( VAR_339 , VAR_340 , VAR_341 ) ; METHOD_111 ( VAR_342 ) ; } } METHOD_112 ( VAR_343 , VAR_344 , ""abrt-ccpp"" ) ; METHOD_113 ( VAR_345 , VAR_346 , ""CCpp"" ) ; METHOD_114 ( VAR_347 , VAR_348 , VAR_349 ) ; METHOD_115 ( VAR_350 , VAR_351 , VAR_352 ) ; METHOD_116 ( VAR_353 , VAR_354 , VAR_355 ) ; METHOD_117 ( VAR_356 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) METHOD_118 ( VAR_360 , VAR_361 , VAR_362 ) ; if ( VAR_363 ) METHOD_119 ( VAR_364 , VAR_365 , VAR_366 ) ; if ( VAR_367 ) { if ( METHOD_120 ( VAR_368 , ""/"" ) != 0 ) METHOD_121 ( VAR_369 , VAR_370 , VAR_371 ) ; } METHOD_122 ( VAR_372 ) ; TYPE_60 * VAR_373 = METHOD_123 ( ""%skilledbySIG%s"" , VAR_374 , VAR_375 ? VAR_376 : VAR_377 ) ; METHOD_124 ( VAR_378 , VAR_379 , VAR_380 ) ; METHOD_125 ( VAR_381 ) ; TYPE_61 * VAR_382 = METHOD_126 ( VAR_383 ) ; METHOD_127 ( VAR_384 , VAR_385 , VAR_386 ? : """" ) ; METHOD_128 ( VAR_387 ) ; TYPE_62 * VAR_388 = METHOD_129 ( VAR_389 ) ; METHOD_130 ( VAR_390 , VAR_391 , VAR_392 ? : """" ) ; METHOD_131 ( VAR_393 ) ; TYPE_63 * VAR_394 = METHOD_132 ( ""/proc/sys/crypto/fips_enabled"" ) ; if ( VAR_395 ) { if ( METHOD_133 ( VAR_396 , ""0"" ) != 0 ) METHOD_134 ( VAR_397 , ""fips_enabled"" , VAR_398 ) ; METHOD_135 ( VAR_399 ) ; } METHOD_136 ( VAR_400 , VAR_401 , VAR_402 ) ; TYPE_64 unsigned VAR_403 = VAR_404 ; const TYPE_65 * VAR_405 = METHOD_137 ( VAR_406 , ""VmLck:"" ) ; if ( VAR_407 == VAR_408 ) METHOD_138 ( ""/proc/%s/statusdoesnotcontain\'VmLck:\'line"" , VAR_409 ) ; else if ( 1 != METHOD_139 ( VAR_410 + 6 , ""%lukB\\n"" , & VAR_411 ) ) METHOD_140 ( ""Failedtoparse\'VmLck:\'linein/proc/%s/status"" , VAR_412 ) ; if ( VAR_413 ) { METHOD_141 ( ""Process%sofuser%luhaslockedmemory"" , VAR_414 , ( TYPE_66 unsigned ) VAR_415 ) ; METHOD_142 ( VAR_416 , ""Theprocesshadlockedmemory"" ""whichusuallyindicateseffortstoprotectsensitive"" ""data(passwords)frombeingwrittentodisk.\\n"" ""Inordertoavoidsensitiveinformationleakages,"" ""ABRTwillnotallowyoutoreportthisproblemto"" ""bugtrackingtools"" ) ; } if ( VAR_417 ) { if ( METHOD_143 ( VAR_418 , VAR_419 ) ) { METHOD_144 ( ""Errorsaving\'%s\'"" , VAR_420 ) ; goto VAR_421 ; } } TYPE_67 VAR_422 = 0 ; if ( VAR_423 ) { METHOD_145 ( VAR_424 + VAR_425 , ""/"" FILENAME_COREDUMP ) ; TYPE_68 VAR_426 = METHOD_146 ( VAR_427 , VAR_428 ) ; VAR_429 = METHOD_147 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 ) ; METHOD_148 ( VAR_434 , VAR_435 ) ; if ( METHOD_149 ( VAR_436 ) != 0 || METHOD_150 ( VAR_437 ) != 0 || VAR_438 < 0 ) { METHOD_151 ( VAR_439 ) ; METHOD_152 ( ""Errorwriting\'%s\'"" , VAR_440 ) ; goto VAR_441 ; } } else { METHOD_153 ( VAR_442 , VAR_443 , VAR_444 ) ; } VAR_445 = - 1 ; if 0 { TYPE_69 * VAR_446 = METHOD_154 ( ""/tmp/jvm-%lu/hs_error.log"" , ( TYPE_70 ) VAR_447 ) ; TYPE_71 VAR_448 = METHOD_155 ( VAR_449 , VAR_450 ) ; METHOD_156 ( VAR_451 ) ; if ( VAR_452 < 0 ) { VAR_453 = METHOD_157 ( ""%s/hs_err_pid%lu.log"" , VAR_454 , ( TYPE_72 ) VAR_455 ) ; VAR_456 = METHOD_158 ( VAR_457 , VAR_458 ) ; METHOD_159 ( VAR_459 ) ; } if ( VAR_460 >= 0 ) { METHOD_160 ( VAR_461 + VAR_462 , ""/hs_err.log"" ) ; TYPE_73 VAR_463 = METHOD_161 ( VAR_464 , VAR_465 ) ; TYPE_74 VAR_466 = METHOD_162 ( VAR_467 , VAR_468 , VAR_469 ) ; if ( METHOD_163 ( VAR_470 ) != 0 || VAR_471 < 0 ) { METHOD_164 ( ""Errorsaving\'%s\'"" , VAR_472 ) ; goto VAR_473 ; } METHOD_165 ( VAR_474 ) ; } } if ( VAR_475 > 0 && VAR_476 ) METHOD_166 ( VAR_477 , VAR_478 , VAR_479 , VAR_480 ) ; METHOD_167 ( VAR_481 ) ; VAR_482 = VAR_483 ; VAR_484 [ VAR_485 ] = '\\0' ; if ( VAR_486 && VAR_487 && VAR_488 ) { METHOD_168 ( VAR_489 , ""/proc/%lu/root"" , ( TYPE_75 ) VAR_490 ) ; const TYPE_76 * VAR_491 [ 6 ] ; VAR_492 [ 0 ] = VAR_493 ""/abrt-action-save-package-data"" ; VAR_494 [ 1 ] = ""-d"" ; VAR_495 [ 2 ] = VAR_496 ; VAR_497 [ 3 ] = ""-r"" ; VAR_498 [ 4 ] = VAR_499 ; VAR_500 [ 5 ] = VAR_501 ; TYPE_77 VAR_502 = METHOD_169 ( 0 , ( TYPE_78 * * ) VAR_503 , VAR_504 , VAR_505 , VAR_506 , 0 ) ; TYPE_79 VAR_507 ; METHOD_170 ( VAR_508 , & VAR_509 , 0 ) ; } TYPE_80 * VAR_510 = METHOD_171 ( VAR_511 , VAR_512 - ( sizeof ( "".new"" ) - 1 ) ) ; if ( METHOD_172 ( VAR_513 , VAR_514 ) == 0 ) METHOD_173 ( VAR_515 , VAR_516 ) ; METHOD_174 ( VAR_517 ) ; if ( VAR_518 > 0 ) METHOD_175 ( ""Savedcoredumpofpid%lu(%s)to%s(%llubytes)"" , ( TYPE_81 ) VAR_519 , VAR_520 , VAR_521 , ( TYPE_82 TYPE_83 ) VAR_522 ) ; if ( VAR_523 ) METHOD_176 ( VAR_524 ) ; if ( VAR_525 > 0 ) { unsigned VAR_526 = VAR_527 + VAR_528 / 4 ; VAR_529 |= 63 ; METHOD_177 ( VAR_530 , VAR_531 * ( TYPE_84 ) ( 1024 * 1024 ) , VAR_532 ) ; } VAR_533 = 0 ; } else { return METHOD_178 ( VAR_534 , VAR_535 , VAR_536 ) ; } VAR_537 : if ( VAR_538 ) METHOD_179 ( VAR_539 ) ; if ( VAR_540 >= 0 ) METHOD_180 ( METHOD_181 ( VAR_541 ) , VAR_542 , 0 ) ; if ( VAR_543 != VAR_544 ) METHOD_182 ( VAR_545 ) ; return VAR_546 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 = METHOD_1 ( ""/dev/null"" , VAR_3 ) ; while ( VAR_4 < 2 ) VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 > 2 ) METHOD_3 ( VAR_8 ) ; TYPE_4 VAR_9 = 1 ; VAR_10 = VAR_11 ; METHOD_4 ( ) ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 VAR_15 ; TYPE_9 VAR_16 ; TYPE_10 VAR_17 ; { TYPE_11 * VAR_18 = METHOD_5 ( ) ; METHOD_6 ( ""CCpp.conf"" , VAR_19 ) ; const TYPE_12 * VAR_20 ; VAR_21 = METHOD_7 ( VAR_22 , ""MakeCompatCore"" ) ; VAR_23 = VAR_24 && METHOD_8 ( VAR_25 ) ; VAR_26 = METHOD_9 ( VAR_27 , ""SaveBinaryImage"" ) ; VAR_28 = VAR_29 && METHOD_10 ( VAR_30 ) ; VAR_31 = METHOD_11 ( VAR_32 , ""SaveFullCore"" ) ; VAR_33 = VAR_34 ? METHOD_12 ( VAR_35 ) : VAR_36 ; VAR_37 = METHOD_13 ( VAR_38 , ""CreateCoreBacktrace"" ) ; VAR_39 = VAR_40 ? METHOD_14 ( VAR_41 ) : VAR_42 ; VAR_43 = METHOD_15 ( VAR_44 , ""SaveContainerizedPackageData"" ) ; VAR_45 = VAR_46 && METHOD_16 ( VAR_47 ) ; if ( ! VAR_48 ) { if ( VAR_49 ) METHOD_17 ( ""IgnoringSaveContainerizedPackageDatabecauseExploreChrootsisdisabled"" ) ; VAR_50 = VAR_51 ; } VAR_52 = METHOD_18 ( VAR_53 , ""StandaloneHook"" ) ; VAR_54 = VAR_55 && METHOD_19 ( VAR_56 ) ; VAR_57 = METHOD_20 ( VAR_58 , ""VerboseLog"" ) ; if ( VAR_59 ) VAR_60 = METHOD_21 ( VAR_61 ) ; METHOD_22 ( VAR_62 ) ; } if ( VAR_63 == 2 && METHOD_23 ( VAR_64 [ 1 ] , ""--config-test"" ) ) return METHOD_24 ( VAR_65 , VAR_66 ) ; if ( VAR_67 < 8 ) { METHOD_25 ( ""Usage:%sSIGNOCORE_SIZE_LIMITPIDUIDGIDTIMEBINARY_NAMEGLOBAL_PID[TID]"" , VAR_68 [ 0 ] ) ; } if ( METHOD_26 ( VAR_69 [ 1 ] , '' ) ) { TYPE_13 VAR_70 ; for ( VAR_71 = 1 ; VAR_72 [ VAR_73 ] ; VAR_74 ++ ) { METHOD_27 ( VAR_75 [ VAR_76 ] , '' ) [ 0 ] = '\\0' ; } } VAR_77 = 0 ; const TYPE_14 * VAR_78 = VAR_79 [ 1 ] ; TYPE_15 VAR_80 = METHOD_28 ( VAR_81 ) ; TYPE_16 VAR_82 = METHOD_29 ( VAR_83 [ 2 ] , VAR_84 , 10 ) ; if ( VAR_85 < 0 ) { VAR_86 = ~ ( ( TYPE_17 ) 1 << ( sizeof ( TYPE_18 ) * 8 - 1 ) ) ; } const TYPE_19 * VAR_87 = VAR_88 [ 3 ] ; TYPE_20 VAR_89 = METHOD_30 ( VAR_90 [ 3 ] ) ; TYPE_21 VAR_91 = METHOD_31 ( VAR_92 [ 4 ] ) ; if ( VAR_93 || VAR_94 <= 0 ) { METHOD_32 ( ""PID\'%s\'orlimit\'%s\'isbogus"" , VAR_95 [ 3 ] , VAR_96 [ 2 ] ) ; } { TYPE_22 * VAR_97 = METHOD_33 ( VAR_RUN ""/abrt/saved_core_pattern"" ) ; if ( VAR_98 && VAR_99 [ 0 ] != '|' ) VAR_100 = VAR_101 ; else METHOD_34 ( VAR_102 ) ; } const TYPE_23 * VAR_103 = VAR_104 [ 8 ] ; TYPE_24 VAR_105 = METHOD_35 ( VAR_106 [ 8 ] ) ; TYPE_25 VAR_107 = - 1 ; const TYPE_26 * VAR_108 = VAR_109 [ 9 ] ; if ( VAR_110 ) { VAR_111 = METHOD_36 ( VAR_112 ) ; } TYPE_27 VAR_113 [ VAR_114 ] ; TYPE_28 * VAR_115 = METHOD_37 ( VAR_116 ) ; if ( VAR_117 && METHOD_38 ( VAR_118 , ""/abrt-hook-ccpp"" ) ) { METHOD_39 ( ""PID%luis\'%s\',notdumpingittoavoidrecursion"" , ( TYPE_29 ) VAR_119 , VAR_120 ) ; } VAR_121 = METHOD_40 ( VAR_122 ) ; METHOD_41 ( ""user_pwd:\'%s\'"" , VAR_123 ) ; METHOD_42 ( VAR_124 , ""/proc/%lu/status"" , ( TYPE_30 ) VAR_125 ) ; TYPE_31 * VAR_126 = METHOD_43 ( VAR_127 , VAR_128 ) ; TYPE_32 VAR_129 = VAR_130 ; TYPE_33 VAR_131 = METHOD_44 ( VAR_132 ) ; if ( VAR_133 < 0 ) METHOD_45 ( ""Can\'tparse\'Uid:line\'in/proc/%lu/status"" , ( TYPE_34 ) VAR_134 ) ; const TYPE_35 VAR_135 = METHOD_46 ( VAR_136 ) ; if ( VAR_137 < 0 ) METHOD_47 ( ""Can\'tparse\'Gid:line\'in/proc/%lu/status"" , ( TYPE_36 ) VAR_138 ) ; TYPE_37 VAR_139 = METHOD_48 ( ) ; if ( VAR_140 != VAR_141 ) { VAR_142 = 0 ; if ( VAR_143 == VAR_144 ) VAR_145 = VAR_146 ; else { VAR_147 = VAR_148 ; VAR_149 = 1 ; } } TYPE_38 VAR_150 = - 1 ; if ( VAR_151 && VAR_152 != 0 ) VAR_153 = METHOD_49 ( VAR_154 , VAR_155 , VAR_156 , VAR_157 , & VAR_158 [ 1 ] ) ; if ( VAR_159 == VAR_160 ) { METHOD_50 ( ""Can\'tread/proc/%lu/exelink"" , ( TYPE_39 ) VAR_161 ) ; return METHOD_51 ( VAR_162 , VAR_163 , VAR_164 ) ; } const TYPE_40 * VAR_165 = VAR_166 ; if ( ! METHOD_52 ( VAR_167 , & VAR_168 ) ) return METHOD_53 ( VAR_169 , VAR_170 , VAR_171 ) ; const TYPE_41 VAR_172 = METHOD_54 ( ) ; if ( ! VAR_173 && ! VAR_174 ) { METHOD_55 ( ""abrtdisnotrunning.Ifitcrashed,"" ""/proc/sys/kernel/core_patterncontainsastalevalue,"" ""considerresettingitto\'core\'"" ) ; return METHOD_56 ( VAR_175 , VAR_176 , VAR_177 ) ; } if ( VAR_178 ) METHOD_57 ( VAR_179 , VAR_180 , ""abrt"" ) ; if ( VAR_181 > 0 ) { if ( METHOD_58 ( VAR_182 , VAR_183 ) ) return METHOD_59 ( VAR_184 , VAR_185 , VAR_186 ) ; } METHOD_60 ( VAR_187 , sizeof ( VAR_188 ) , ""%s/last-ccpp"" , VAR_189 ) ; if ( METHOD_61 ( VAR_190 , VAR_191 ) ) { return METHOD_62 ( VAR_192 , VAR_193 , VAR_194 ) ; } const TYPE_42 * VAR_195 = METHOD_63 ( VAR_196 , '/' ) ; if ( VAR_197 && METHOD_64 ( ++ VAR_198 , ""abrt"" , 4 ) == 0 ) { if ( VAR_199 == 0 ) { METHOD_65 ( ""Ignoringcrashof%s(SIG%s)."" , VAR_200 , VAR_201 ? VAR_202 : VAR_203 ) ; goto VAR_204 ; } if ( METHOD_66 ( VAR_205 , sizeof ( VAR_206 ) , ""%s/%s-coredump"" , VAR_207 , VAR_208 ) >= sizeof ( VAR_209 ) ) METHOD_67 ( ""Errorsaving\'%s\':truncatedlongfilepath"" , VAR_210 ) ; TYPE_43 VAR_211 = METHOD_68 ( VAR_212 , VAR_213 | VAR_214 | VAR_148 , 0600 ) ; TYPE_44 VAR_216 = METHOD_69 ( VAR_217 , VAR_218 , VAR_219 ) ; if ( VAR_220 < 0 || METHOD_70 ( VAR_221 ) != 0 ) { METHOD_71 ( VAR_222 ) ; METHOD_72 ( ""Errorsaving\'%s\'"" , VAR_223 ) ; } METHOD_73 ( ""Savedcoredumpofpid%lu(%s)to%s(%llubytes)"" , ( TYPE_45 ) VAR_224 , VAR_225 , VAR_226 , ( TYPE_46 TYPE_47 ) VAR_227 ) ; VAR_228 = 0 ; goto VAR_229 ; } unsigned VAR_230 = METHOD_74 ( VAR_231 , sizeof ( VAR_232 ) , ""%s/ccpp-%s-%lu.new"" , VAR_233 , METHOD_75 ( VAR_234 ) , ( TYPE_48 ) VAR_235 ) ; if ( VAR_236 >= ( sizeof ( VAR_237 ) - sizeof ( ""/"" FILENAME_COREDUMP ) ) ) { return METHOD_76 ( VAR_238 , VAR_239 , VAR_240 ) ; } VAR_241 = METHOD_77 ( VAR_242 , 0 , VAR_243 ) ; if ( VAR_244 ) { TYPE_49 VAR_245 [ sizeof ( ""/proc/%lu/somewhat_long_name"" ) + sizeof ( TYPE_50 ) * 3 ] ; TYPE_51 VAR_246 = METHOD_78 ( VAR_247 , ""/proc/%lu/root"" , ( TYPE_52 ) VAR_248 ) ; VAR_249 -= METHOD_79 ( ""root"" ) ; TYPE_53 * VAR_250 = METHOD_80 ( VAR_251 ) ? METHOD_81 ( VAR_252 ) : VAR_253 ; if ( VAR_254 ) { METHOD_82 ( VAR_255 , VAR_256 , ( VAR_257 != VAR_258 ) ? VAR_259 : VAR_260 ) ; } else { METHOD_83 ( VAR_261 , VAR_262 , VAR_263 ) ; } TYPE_54 * VAR_264 = METHOD_84 ( VAR_265 -> VAR_266 , ""also_somewhat_longish_name"" ) ; TYPE_55 * VAR_267 = METHOD_85 ( VAR_268 , '/' ) + 1 ; METHOD_86 ( VAR_269 + VAR_270 , ""maps"" ) ; METHOD_87 ( VAR_271 , VAR_272 , VAR_273 ) ; METHOD_88 ( VAR_274 + VAR_275 , ""limits"" ) ; METHOD_89 ( VAR_276 , VAR_277 , VAR_278 ) ; METHOD_90 ( VAR_279 + VAR_280 , ""cgroup"" ) ; METHOD_91 ( VAR_281 , VAR_282 , VAR_283 ) ; METHOD_92 ( VAR_284 + VAR_285 , ""mountinfo"" ) ; METHOD_93 ( VAR_286 , VAR_287 , VAR_288 ) ; METHOD_94 ( VAR_289 , VAR_290 ) ; METHOD_95 ( VAR_291 + VAR_292 , ""fd"" ) ; METHOD_96 ( VAR_293 , VAR_294 , VAR_295 -> VAR_296 , VAR_297 -> VAR_298 ) ; METHOD_97 ( VAR_299 , VAR_300 ) ; METHOD_98 ( VAR_301 , 1 , VAR_302 , VAR_303 -> VAR_304 , VAR_305 -> VAR_306 ) ; METHOD_99 ( VAR_307 ) ; TYPE_56 * VAR_308 = VAR_309 ; METHOD_100 ( VAR_310 , ""container"" , & VAR_311 ) ; if ( VAR_312 != VAR_313 ) { METHOD_101 ( VAR_314 , VAR_315 , VAR_316 ) ; METHOD_102 ( VAR_317 ) ; VAR_318 = VAR_319 ; } METHOD_103 ( VAR_320 , ""container_uuid"" , & VAR_321 ) ; if ( VAR_322 != VAR_323 ) { METHOD_104 ( VAR_324 , VAR_325 , VAR_326 ) ; METHOD_105 ( VAR_327 ) ; } const TYPE_57 VAR_328 = ( VAR_329 != VAR_330 && METHOD_106 ( VAR_331 , ""/"" ) == 0 ) ; if ( VAR_332 ) { METHOD_107 ( ""Process%disconsideredtobecontainerized"" , VAR_333 ) ; TYPE_58 VAR_334 ; if ( METHOD_108 ( VAR_335 , & VAR_336 ) == 0 ) { TYPE_59 * VAR_337 = METHOD_109 ( VAR_338 ) ; METHOD_110 ( VAR_339 , VAR_340 , VAR_341 ) ; METHOD_111 ( VAR_342 ) ; } } METHOD_112 ( VAR_343 , VAR_344 , ""abrt-ccpp"" ) ; METHOD_113 ( VAR_345 , VAR_346 , ""CCpp"" ) ; METHOD_114 ( VAR_347 , VAR_348 , VAR_349 ) ; METHOD_115 ( VAR_350 , VAR_351 , VAR_352 ) ; METHOD_116 ( VAR_353 , VAR_354 , VAR_355 ) ; METHOD_117 ( VAR_356 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) METHOD_118 ( VAR_360 , VAR_361 , VAR_362 ) ; if ( VAR_363 ) METHOD_119 ( VAR_364 , VAR_365 , VAR_366 ) ; if ( VAR_367 ) { if ( METHOD_120 ( VAR_368 , ""/"" ) != 0 ) METHOD_121 ( VAR_369 , VAR_370 , VAR_371 ) ; } METHOD_122 ( VAR_372 ) ; TYPE_60 * VAR_373 = METHOD_123 ( ""%skilledbySIG%s"" , VAR_374 , VAR_375 ? VAR_376 : VAR_377 ) ; METHOD_124 ( VAR_378 , VAR_379 , VAR_380 ) ; METHOD_125 ( VAR_381 ) ; TYPE_61 * VAR_382 = METHOD_126 ( VAR_383 ) ; METHOD_127 ( VAR_384 , VAR_385 , VAR_386 ? : """" ) ; METHOD_128 ( VAR_387 ) ; TYPE_62 * VAR_388 = METHOD_129 ( VAR_389 ) ; METHOD_130 ( VAR_390 , VAR_391 , VAR_392 ? : """" ) ; METHOD_131 ( VAR_393 ) ; TYPE_63 * VAR_394 = METHOD_132 ( ""/proc/sys/crypto/fips_enabled"" ) ; if ( VAR_395 ) { if ( METHOD_133 ( VAR_396 , ""0"" ) != 0 ) METHOD_134 ( VAR_397 , ""fips_enabled"" , VAR_398 ) ; METHOD_135 ( VAR_399 ) ; } METHOD_136 ( VAR_400 , VAR_401 , VAR_402 ) ; TYPE_64 unsigned VAR_403 = VAR_404 ; const TYPE_65 * VAR_405 = METHOD_137 ( VAR_406 , ""VmLck:"" ) ; if ( VAR_407 == VAR_408 ) METHOD_138 ( ""/proc/%s/statusdoesnotcontain\'VmLck:\'line"" , VAR_409 ) ; else if ( 1 != METHOD_139 ( VAR_410 + 6 , ""%lukB\\n"" , & VAR_411 ) ) METHOD_140 ( ""Failedtoparse\'VmLck:\'linein/proc/%s/status"" , VAR_412 ) ; if ( VAR_413 ) { METHOD_141 ( ""Process%sofuser%luhaslockedmemory"" , VAR_414 , ( TYPE_66 unsigned ) VAR_415 ) ; METHOD_142 ( VAR_416 , ""Theprocesshadlockedmemory"" ""whichusuallyindicateseffortstoprotectsensitive"" ""data(passwords)frombeingwrittentodisk.\\n"" ""Inordertoavoidsensitiveinformationleakages,"" ""ABRTwillnotallowyoutoreportthisproblemto"" ""bugtrackingtools"" ) ; } if ( VAR_417 ) { if ( METHOD_143 ( VAR_418 , VAR_419 ) ) { METHOD_144 ( ""Errorsaving\'%s\'"" , VAR_420 ) ; goto VAR_421 ; } } TYPE_67 VAR_422 = 0 ; if ( VAR_423 ) { METHOD_145 ( VAR_424 + VAR_425 , ""/"" FILENAME_COREDUMP ) ; TYPE_68 VAR_426 = METHOD_146 ( VAR_427 , VAR_428 ) ; VAR_429 = METHOD_147 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 ) ; METHOD_148 ( VAR_434 , VAR_435 ) ; if ( METHOD_149 ( VAR_436 ) != 0 || METHOD_150 ( VAR_437 ) != 0 || VAR_438 < 0 ) { METHOD_151 ( VAR_439 ) ; METHOD_152 ( ""Errorwriting\'%s\'"" , VAR_440 ) ; goto VAR_441 ; } } else { METHOD_153 ( VAR_442 , VAR_443 , VAR_444 ) ; } VAR_445 = - 1 ; if 0 { TYPE_69 * VAR_446 = METHOD_154 ( ""/tmp/jvm-%lu/hs_error.log"" , ( TYPE_70 ) VAR_447 ) ; TYPE_71 VAR_448 = METHOD_155 ( VAR_449 , VAR_450 ) ; METHOD_156 ( VAR_451 ) ; if ( VAR_452 < 0 ) { VAR_453 = METHOD_157 ( ""%s/hs_err_pid%lu.log"" , VAR_454 , ( TYPE_72 ) VAR_455 ) ; VAR_456 = METHOD_158 ( VAR_457 , VAR_458 ) ; METHOD_159 ( VAR_459 ) ; } if ( VAR_460 >= 0 ) { METHOD_160 ( VAR_461 + VAR_462 , ""/hs_err.log"" ) ; TYPE_73 VAR_463 = METHOD_161 ( VAR_464 , VAR_465 ) ; TYPE_74 VAR_466 = METHOD_162 ( VAR_467 , VAR_468 , VAR_469 ) ; if ( METHOD_163 ( VAR_470 ) != 0 || VAR_471 < 0 ) { METHOD_164 ( ""Errorsaving\'%s\'"" , VAR_472 ) ; goto VAR_473 ; } METHOD_165 ( VAR_474 ) ; } } if ( VAR_475 > 0 && VAR_476 ) METHOD_166 ( VAR_477 , VAR_478 , VAR_479 , VAR_480 ) ; METHOD_167 ( VAR_481 ) ; VAR_482 = VAR_483 ; VAR_484 [ VAR_485 ] = '\\0' ; if ( VAR_486 && VAR_487 && VAR_488 ) { METHOD_168 ( VAR_489 , ""/proc/%lu/root"" , ( TYPE_75 ) VAR_490 ) ; const TYPE_76 * VAR_491 [ 6 ] ; VAR_492 [ 0 ] = VAR_493 ""/abrt-action-save-package-data"" ; VAR_494 [ 1 ] = ""-d"" ; VAR_495 [ 2 ] = VAR_496 ; VAR_497 [ 3 ] = ""-r"" ; VAR_498 [ 4 ] = VAR_499 ; VAR_500 [ 5 ] = VAR_501 ; TYPE_77 VAR_502 = METHOD_169 ( 0 , ( TYPE_78 * * ) VAR_503 , VAR_504 , VAR_505 , VAR_506 , 0 ) ; TYPE_79 VAR_507 ; METHOD_170 ( VAR_508 , & VAR_509 , 0 ) ; } TYPE_80 * VAR_510 = METHOD_171 ( VAR_511 , VAR_512 - ( sizeof ( "".new"" ) - 1 ) ) ; if ( METHOD_172 ( VAR_513 , VAR_514 ) == 0 ) METHOD_173 ( VAR_515 , VAR_516 ) ; METHOD_174 ( VAR_517 ) ; if ( VAR_518 > 0 ) METHOD_175 ( ""Savedcoredumpofpid%lu(%s)to%s(%llubytes)"" , ( TYPE_81 ) VAR_519 , VAR_520 , VAR_521 , ( TYPE_82 TYPE_83 ) VAR_522 ) ; if ( VAR_523 ) METHOD_176 ( VAR_524 ) ; if ( VAR_525 > 0 ) { unsigned VAR_526 = VAR_527 + VAR_528 / 4 ; VAR_529 |= 63 ; METHOD_177 ( VAR_530 , VAR_531 * ( TYPE_84 ) ( 1024 * 1024 ) , VAR_532 ) ; METHOD_151 ( VAR_532 ) ; } VAR_533 = 0 ; } else { return METHOD_178 ( VAR_534 , VAR_535 , VAR_536 ) ; } VAR_537 : if ( VAR_538 ) METHOD_179 ( VAR_539 ) ; if ( VAR_540 >= 0 ) METHOD_180 ( METHOD_181 ( VAR_541 ) , VAR_542 , 0 ) ; if ( VAR_543 != VAR_544 ) METHOD_182 ( VAR_545 ) ; return VAR_546 ; }",291
292,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , const TYPE_6 * VAR_5 , TYPE_7 VAR_6 , const TYPE_8 * VAR_7 , const TYPE_9 * VAR_8 , TYPE_10 VAR_9 , TYPE_11 * VAR_10 , TYPE_12 * VAR_11 , TYPE_13 VAR_12 , const TYPE_14 * VAR_13 , TYPE_15 * VAR_14 ,  TYPE_16 VAR_15 ,  TYPE_17 * VAR_16 , TYPE_18 VAR_17 , TYPE_19 VAR_18 , const TYPE_20 * VAR_19 , const TYPE_21 * VAR_20 , const TYPE_22 * * VAR_21 , TYPE_23 * VAR_22 ) { TYPE_24 VAR_23 ; TYPE_25 VAR_24 ; TYPE_26 VAR_25 ; TYPE_27 VAR_26 = VAR_27 -> VAR_28 ; TYPE_28 VAR_29 ; TYPE_29 VAR_30 = 0 ; METHOD_1 ( & VAR_31 , 0 , sizeof ( VAR_32 ) ) ; METHOD_2 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_3 ( & VAR_35 , 0 , sizeof ( VAR_36 ) ) ; VAR_37 . VAR_38 = 5 ; VAR_39 . VAR_40 = VAR_41 ; VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; METHOD_4 ( & VAR_46 -> VAR_47 ) ; VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 , * VAR_52 -> VAR_53 ) ; METHOD_6 ( VAR_54 . VAR_55 ) ; * VAR_56 . VAR_57 = VAR_58 ; VAR_59 = METHOD_7 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 , & VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; METHOD_8 ( VAR_67 -> VAR_68 == VAR_69 ) METHOD_9 ( VAR_70 -> VAR_71 == VAR_72 ) METHOD_10 ( VAR_73 -> VAR_74 == VAR_75 ) METHOD_11 ( TYPE_30 ) 0 METHOD_12 ( TYPE_31 ) 0 VAR_76 = METHOD_13 ( VAR_77 , VAR_78 , ! VAR_79 . VAR_80 || METHOD_14 || METHOD_15 ( VAR_81 ) || ! ( ( METHOD_16 && METHOD_17 ( VAR_82 ) ) || METHOD_18 ) , & VAR_83 -> VAR_84 , & VAR_85 , METHOD_19 ( VAR_86 , VAR_87 ) , METHOD_20 ( VAR_88 , VAR_89 -> VAR_90 . VAR_91 ) ,  METHOD_21 ( VAR_92 , VAR_93 -> VAR_94 . VAR_95 ) ) ;  if ( VAR_96 ) goto VAR_97 ; METHOD_22 ( & VAR_98 -> VAR_99 , & VAR_100 . VAR_101 . VAR_102 ) ; METHOD_23 ( & VAR_103 . VAR_104 . VAR_105 , VAR_106 ) ; METHOD_24 ( & VAR_107 -> VAR_108 , & VAR_109 . VAR_110 ) ; METHOD_25 ( & VAR_111 -> VAR_112 , & VAR_113 . VAR_114 ) ; VAR_115 . VAR_116 . VAR_117 = 5 ; VAR_118 . VAR_119 = VAR_120 . VAR_121 ; { TYPE_32 VAR_122 ; VAR_123 = VAR_124 . VAR_125 - * VAR_126 . VAR_127 ; if ( VAR_128 && VAR_129 -> VAR_130 . VAR_131 ) VAR_132 = METHOD_26 ( VAR_133 , * VAR_134 -> VAR_135 . VAR_136 ) ; if ( VAR_137 -> VAR_138 . VAR_139 ) VAR_140 = METHOD_27 ( VAR_141 , * VAR_142 -> VAR_143 . VAR_144 ) ; VAR_145 . VAR_146 = * VAR_147 . VAR_148 + VAR_149 ; } if ( VAR_150 . VAR_151 && VAR_152 -> VAR_153 . VAR_154 && VAR_155 . VAR_156 == VAR_157 && VAR_158 . VAR_159 < * VAR_160 -> VAR_161 && VAR_162 -> VAR_163 != VAR_164 ) { VAR_165 . VAR_166 . VAR_167 = 1 ; METHOD_28 ( VAR_168 . VAR_169 ) ; * VAR_170 . VAR_171 = * VAR_172 -> VAR_173 ; } if ( VAR_174 . VAR_175 ) { TYPE_33 VAR_176 ; VAR_177 = * VAR_178 . VAR_179 - * VAR_180 . VAR_181 ; if ( VAR_182 && VAR_183 -> VAR_184 . VAR_185 ) VAR_186 = METHOD_29 ( VAR_187 , * VAR_188 -> VAR_189 . VAR_190 ) ; if ( VAR_191 -> VAR_192 . VAR_193 ) VAR_194 = METHOD_30 ( VAR_195 , * VAR_196 -> VAR_197 . VAR_198 ) ; * VAR_199 . VAR_200 = * VAR_201 . VAR_202 + VAR_203 ; } if ( VAR_204 . VAR_205 ) { * VAR_206 . VAR_207 = METHOD_31 ( * VAR_208 . VAR_209 , * VAR_210 -> VAR_211 ) ; * VAR_212 . VAR_213 = METHOD_32 ( * VAR_214 . VAR_215 , * VAR_216 . VAR_217 ) ; VAR_218 . VAR_219 = METHOD_33 ( VAR_220 . VAR_221 , * VAR_222 . VAR_223 ) ; } * VAR_224 . VAR_225 = METHOD_34 ( * VAR_226 . VAR_227 , VAR_228 . VAR_229 ) ; if ( * VAR_230 . VAR_231 == VAR_232 . VAR_233 ) { VAR_234 = VAR_235 ; goto VAR_236 ; } if ( VAR_237 . VAR_238 && VAR_239 . VAR_240 == * VAR_241 . VAR_242 ) { METHOD_35 ( VAR_243 . VAR_244 ) ; VAR_245 . VAR_246 = VAR_247 ; VAR_248 . VAR_249 . VAR_250 = 0 ; } VAR_251 . VAR_252 . VAR_253 = VAR_254 -> VAR_255 . VAR_256 ; VAR_257 . VAR_258 . VAR_259 = VAR_260 -> VAR_261 . VAR_262 ; VAR_263 . VAR_264 . VAR_265 = VAR_266 -> VAR_267 . VAR_268 ; VAR_269 . VAR_270 . VAR_271 = VAR_272 -> VAR_273 . VAR_274 . VAR_275 ; if ( VAR_276 -> VAR_277 ) { VAR_278 = METHOD_36 ( VAR_279 , & VAR_280 , VAR_281 , VAR_282 ) ; if ( VAR_283 ) goto VAR_284 ; } if ( VAR_285 ) { unsigned TYPE_34 VAR_286 = 0 ; if ( VAR_287 . VAR_288 == VAR_289 ) { VAR_290 . VAR_291 = METHOD_37 ( 1 , sizeof ( * VAR_292 . VAR_293 ) ) ; if ( VAR_294 . VAR_295 == VAR_296 ) { VAR_297 = VAR_298 ; METHOD_38 ( VAR_299 , VAR_300 , ""malloc:outofmemory"" ) ; goto VAR_301 ; } } for ( VAR_302 = 0 ; VAR_303 < VAR_304 -> VAR_305 ; VAR_306 ++ ) { VAR_307 = METHOD_39 ( VAR_308 . VAR_309 , & VAR_310 -> VAR_311 [ VAR_312 ] ) ; if ( VAR_313 ) { METHOD_40 ( VAR_314 , VAR_315 , ""malloc:outofmemory"" ) ; goto VAR_316 ; } } VAR_317 = METHOD_41 ( VAR_318 , VAR_319 . VAR_320 , VAR_321 ) ; if ( VAR_322 == 0 ) { if ( VAR_323 . VAR_324 -> VAR_325 == 1 ) { METHOD_42 ( VAR_326 . VAR_327 ) ; METHOD_43 ( VAR_328 . VAR_329 ) ; VAR_330 . VAR_331 = VAR_332 ; } else { TYPE_35 * VAR_333 = VAR_334 . VAR_335 ; METHOD_44 ( & VAR_336 -> VAR_337 [ VAR_338 -> VAR_339 - 1 ] ) ; VAR_340 -> VAR_341 -- ; } } } VAR_342 = METHOD_45 ( VAR_343 , VAR_344 , & VAR_345 . VAR_346 ) ; if ( VAR_347 ) goto VAR_348 ; VAR_349 . VAR_350 = VAR_351 -> VAR_352 ; VAR_353 . VAR_354 = VAR_355 -> VAR_356 ; VAR_357 . VAR_358 = VAR_359 . VAR_360 ; VAR_361 . VAR_362 . VAR_363 = METHOD_46 ( 1 , sizeof ( * VAR_364 . VAR_365 . VAR_366 ) ) ; if ( VAR_367 . VAR_368 . VAR_369 == VAR_370 ) { VAR_371 = VAR_372 ; goto VAR_373 ; } VAR_374 . VAR_375 . VAR_376 = 1 ; VAR_377 . VAR_378 = VAR_379 -> VAR_380 ; VAR_381 . VAR_382 = VAR_383 . VAR_384 ; VAR_385 . VAR_386 = VAR_387 . VAR_388 ; VAR_389 . VAR_390 = VAR_391 . VAR_392 ; VAR_393 . VAR_394 = VAR_395 . VAR_396 ; VAR_397 . VAR_398 = VAR_399 . VAR_400 ; VAR_401 . VAR_402 = VAR_403 . VAR_404 . VAR_405 ; VAR_406 . VAR_407 = VAR_408 . VAR_409 . VAR_410 ; METHOD_47 ( VAR_411 , VAR_412 , ""TGS-REQ"" , VAR_413 . VAR_414 , VAR_415 . VAR_416 , VAR_417 . VAR_418 , VAR_419 . VAR_420 ) ; { TYPE_36 * VAR_421 = METHOD_48 ( & VAR_422 . VAR_423 ) ; if ( VAR_424 == VAR_425 || METHOD_49 ( VAR_426 , VAR_427 . VAR_428 ) == 0 ) { VAR_429 = METHOD_50 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 , VAR_434 , VAR_435 , VAR_436 , & VAR_437 ) ; if ( VAR_438 ) goto VAR_439 ; } } if ( VAR_440 -> VAR_441 ) { VAR_442 . VAR_443 = METHOD_51 ( 1 , sizeof ( * VAR_444 . VAR_445 ) ) ; if ( VAR_446 . VAR_447 == VAR_448 ) { VAR_449 = VAR_450 ; goto VAR_451 ; } VAR_452 = METHOD_52 ( VAR_453 , VAR_454 . VAR_455 ) ; if ( VAR_456 ) goto VAR_457 ; } if ( METHOD_53 ( VAR_458 , VAR_459 -> VAR_460 ) != 0 && METHOD_54 ( VAR_461 -> VAR_462 . VAR_463 , VAR_464 -> VAR_465 ) ) { METHOD_55 ( VAR_466 , VAR_467 -> VAR_468 ) ; VAR_469 = 1 ; } VAR_470 = METHOD_56 ( VAR_471 , VAR_472 , VAR_473 , 0 , & VAR_474 , & VAR_475 , & VAR_476 , VAR_477 -> VAR_478 , VAR_479 , VAR_480 , 0 , VAR_481 , VAR_482 , VAR_483 , VAR_484 ) ; if ( VAR_485 ) METHOD_57 ( VAR_486 , VAR_487 -> VAR_488 ) ; VAR_489 : METHOD_58 ( & VAR_490 ) ; METHOD_59 ( & VAR_491 . VAR_492 ) ; if ( VAR_493 . VAR_494 ) METHOD_60 ( VAR_495 . VAR_496 ) ; if ( VAR_497 . VAR_498 ) METHOD_61 ( VAR_499 . VAR_500 ) ; if ( VAR_501 . VAR_502 ) { METHOD_62 ( VAR_503 . VAR_504 ) ; METHOD_63 ( VAR_505 . VAR_506 ) ; } METHOD_64 ( & VAR_507 . VAR_508 ) ; METHOD_65 ( VAR_509 . VAR_510 . VAR_511 . VAR_512 , 0 , VAR_513 . VAR_514 . VAR_515 . VAR_516 ) ; METHOD_66 ( & VAR_517 . VAR_518 ) ; return VAR_519 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , const TYPE_6 * VAR_5 , TYPE_7 VAR_6 , const TYPE_8 * VAR_7 , const TYPE_9 * VAR_8 , TYPE_10 VAR_9 , TYPE_11 * VAR_10 , TYPE_12 * VAR_11 , TYPE_13 VAR_12 , const TYPE_14 * VAR_13 , TYPE_15 * VAR_14 , TYPE_16 VAR_15 , TYPE_17 * VAR_16 , TYPE_18 VAR_17 , TYPE_19 VAR_18 , const TYPE_20 * VAR_19 , const TYPE_21 * VAR_20 , const TYPE_22 * * VAR_21 , TYPE_23 * VAR_22 ) { TYPE_24 VAR_23 ; TYPE_25 VAR_24 ; TYPE_26 VAR_25 ; TYPE_27 VAR_26 = VAR_27 -> VAR_28 ; TYPE_28 VAR_29 ; TYPE_29 VAR_30 = 0 ; METHOD_1 ( & VAR_31 , 0 , sizeof ( VAR_32 ) ) ; METHOD_2 ( & VAR_33 , 0 , sizeof ( VAR_34 ) ) ; METHOD_3 ( & VAR_35 , 0 , sizeof ( VAR_36 ) ) ; VAR_37 . VAR_38 = 5 ; VAR_39 . VAR_40 = VAR_41 ; VAR_42 . VAR_43 = VAR_44 -> VAR_45 ; METHOD_4 ( & VAR_46 -> VAR_47 ) ; VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 , * VAR_52 -> VAR_53 ) ; METHOD_6 ( VAR_54 . VAR_55 ) ; * VAR_56 . VAR_57 = VAR_58 ; VAR_59 = METHOD_7 ( VAR_60 , VAR_61 , VAR_62 , VAR_63 , & VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; METHOD_8 ( VAR_67 -> VAR_68 == VAR_69 ) METHOD_9 ( VAR_70 -> VAR_71 == VAR_72 ) METHOD_10 ( VAR_73 -> VAR_74 == VAR_75 ) METHOD_11 ( TYPE_30 ) 0 METHOD_12 ( TYPE_31 ) 0 VAR_76 = METHOD_13 ( VAR_77 , VAR_78 , ! VAR_79 . VAR_80 || METHOD_14 || METHOD_15 ( VAR_81 ) || ! ( ( METHOD_16 && METHOD_17 ( VAR_82 ) ) || METHOD_18 ) , & VAR_83 -> VAR_84 , & VAR_85 , METHOD_19 ( VAR_86 , VAR_87 ) , METHOD_20 ( VAR_88 , VAR_89 -> VAR_90 . VAR_91 ) , METHOD_21 ( VAR_92 , VAR_93 -> VAR_94 . VAR_95 ) ) ; if ( VAR_96 ) goto VAR_97 ; METHOD_22 ( & VAR_98 -> VAR_99 , & VAR_100 . VAR_101 . VAR_102 ) ; METHOD_23 ( & VAR_103 . VAR_104 . VAR_105 , VAR_106 ) ; METHOD_24 ( & VAR_107 -> VAR_108 , & VAR_109 . VAR_110 ) ; METHOD_25 ( & VAR_111 -> VAR_112 , & VAR_113 . VAR_114 ) ; VAR_115 . VAR_116 . VAR_117 = 5 ; VAR_118 . VAR_119 = VAR_120 . VAR_121 ; { TYPE_32 VAR_122 ; VAR_123 = VAR_124 . VAR_125 - * VAR_126 . VAR_127 ; if ( VAR_128 && VAR_129 -> VAR_130 . VAR_131 ) VAR_132 = METHOD_26 ( VAR_133 , * VAR_134 -> VAR_135 . VAR_136 ) ; if ( VAR_137 -> VAR_138 . VAR_139 ) VAR_140 = METHOD_27 ( VAR_141 , * VAR_142 -> VAR_143 . VAR_144 ) ; VAR_145 . VAR_146 = * VAR_147 . VAR_148 + VAR_149 ; } if ( VAR_150 . VAR_151 && VAR_152 -> VAR_153 . VAR_154 && VAR_155 . VAR_156 == VAR_157 && VAR_158 . VAR_159 < * VAR_160 -> VAR_161 && VAR_162 -> VAR_163 != VAR_164 ) { VAR_165 . VAR_166 . VAR_167 = 1 ; METHOD_28 ( VAR_168 . VAR_169 ) ; * VAR_170 . VAR_171 = * VAR_172 -> VAR_173 ; } if ( VAR_174 . VAR_175 ) { TYPE_33 VAR_176 ; VAR_177 = * VAR_178 . VAR_179 - * VAR_180 . VAR_181 ; if ( VAR_182 && VAR_183 -> VAR_184 . VAR_185 ) VAR_186 = METHOD_29 ( VAR_187 , * VAR_188 -> VAR_189 . VAR_190 ) ; if ( VAR_191 -> VAR_192 . VAR_193 ) VAR_194 = METHOD_30 ( VAR_195 , * VAR_196 -> VAR_197 . VAR_198 ) ; * VAR_199 . VAR_200 = * VAR_201 . VAR_202 + VAR_203 ; } if ( VAR_204 . VAR_205 ) { * VAR_206 . VAR_207 = METHOD_31 ( * VAR_208 . VAR_209 , * VAR_210 -> VAR_211 ) ; * VAR_212 . VAR_213 = METHOD_32 ( * VAR_214 . VAR_215 , * VAR_216 . VAR_217 ) ; VAR_218 . VAR_219 = METHOD_33 ( VAR_220 . VAR_221 , * VAR_222 . VAR_223 ) ; } * VAR_224 . VAR_225 = METHOD_34 ( * VAR_226 . VAR_227 , VAR_228 . VAR_229 ) ; if ( * VAR_230 . VAR_231 == VAR_232 . VAR_233 ) { VAR_234 = VAR_235 ; goto VAR_236 ; } if ( VAR_237 . VAR_238 && VAR_239 . VAR_240 == * VAR_241 . VAR_242 ) { METHOD_35 ( VAR_243 . VAR_244 ) ; VAR_245 . VAR_246 = VAR_247 ; VAR_248 . VAR_249 . VAR_250 = 0 ; } VAR_251 . VAR_252 . VAR_253 = VAR_254 -> VAR_255 . VAR_256 ; VAR_257 . VAR_258 . VAR_259 = VAR_260 -> VAR_261 . VAR_262 ; VAR_263 . VAR_264 . VAR_265 = VAR_266 -> VAR_267 . VAR_268 ; VAR_269 . VAR_270 . VAR_271 = VAR_272 -> VAR_273 . VAR_274 . VAR_275 ; if ( VAR_276 -> VAR_277 ) { VAR_278 = METHOD_36 ( VAR_279 , & VAR_280 , VAR_281 , VAR_282 ) ; if ( VAR_283 ) goto VAR_284 ; } if ( VAR_285 ) { unsigned TYPE_34 VAR_286 = 0 ; if ( VAR_287 . VAR_288 == VAR_289 ) { VAR_290 . VAR_291 = METHOD_37 ( 1 , sizeof ( * VAR_292 . VAR_293 ) ) ; if ( VAR_294 . VAR_295 == VAR_296 ) { VAR_297 = VAR_298 ; METHOD_38 ( VAR_299 , VAR_300 , ""malloc:outofmemory"" ) ; goto VAR_301 ; } } for ( VAR_302 = 0 ; VAR_303 < VAR_304 -> VAR_305 ; VAR_306 ++ ) { VAR_307 = METHOD_39 ( VAR_308 . VAR_309 , & VAR_310 -> VAR_311 [ VAR_312 ] ) ; if ( VAR_313 ) { METHOD_40 ( VAR_314 , VAR_315 , ""malloc:outofmemory"" ) ; goto VAR_316 ; } } VAR_317 = METHOD_41 ( VAR_318 , VAR_319 . VAR_320 , VAR_321 ) ; if ( VAR_322 == 0 ) { if ( VAR_323 . VAR_324 -> VAR_325 == 1 ) { METHOD_42 ( VAR_326 . VAR_327 ) ; METHOD_43 ( VAR_328 . VAR_329 ) ; VAR_330 . VAR_331 = VAR_332 ; } else { TYPE_35 * VAR_333 = VAR_334 . VAR_335 ; METHOD_44 ( & VAR_336 -> VAR_337 [ VAR_338 -> VAR_339 - 1 ] ) ; VAR_340 -> VAR_341 -- ; } } } VAR_342 = METHOD_45 ( VAR_343 , VAR_344 , & VAR_345 . VAR_346 ) ; if ( VAR_347 ) goto VAR_348 ; VAR_349 . VAR_350 = VAR_351 -> VAR_352 ; VAR_353 . VAR_354 = VAR_355 -> VAR_356 ; VAR_357 . VAR_358 = VAR_359 . VAR_360 ; VAR_361 . VAR_362 . VAR_363 = METHOD_46 ( 1 , sizeof ( * VAR_364 . VAR_365 . VAR_366 ) ) ; if ( VAR_367 . VAR_368 . VAR_369 == VAR_370 ) { VAR_371 = VAR_372 ; goto VAR_373 ; } VAR_374 . VAR_375 . VAR_376 = 1 ; VAR_377 . VAR_378 = VAR_379 -> VAR_380 ; VAR_381 . VAR_382 = VAR_383 . VAR_384 ; VAR_385 . VAR_386 = VAR_387 . VAR_388 ; VAR_389 . VAR_390 = VAR_391 . VAR_392 ; VAR_393 . VAR_394 = VAR_395 . VAR_396 ; VAR_397 . VAR_398 = VAR_399 . VAR_400 ; VAR_401 . VAR_402 = VAR_403 . VAR_404 . VAR_405 ; VAR_406 . VAR_407 = VAR_408 . VAR_409 . VAR_410 ; METHOD_47 ( VAR_411 , VAR_412 , ""TGS-REQ"" , VAR_413 . VAR_414 , VAR_415 . VAR_416 , VAR_417 . VAR_418 , VAR_419 . VAR_420 ) ; { TYPE_36 * VAR_421 = METHOD_48 ( & VAR_422 . VAR_423 ) ; if ( VAR_424 == VAR_425 || METHOD_49 ( VAR_426 , VAR_427 . VAR_428 ) == 0 ) { VAR_429 = METHOD_50 ( VAR_430 , VAR_431 , VAR_432 , VAR_433 , VAR_434 , VAR_435 , VAR_436 , & VAR_437 ) ; if ( VAR_438 ) goto VAR_439 ; } } if ( VAR_440 -> VAR_441 ) { VAR_442 . VAR_443 = METHOD_51 ( 1 , sizeof ( * VAR_444 . VAR_445 ) ) ; if ( VAR_446 . VAR_447 == VAR_448 ) { VAR_449 = VAR_450 ; goto VAR_451 ; } VAR_452 = METHOD_52 ( VAR_453 , VAR_454 . VAR_455 ) ; if ( VAR_456 ) goto VAR_457 ; } if ( METHOD_53 ( VAR_458 , VAR_459 -> VAR_460 ) != 0 && METHOD_54 ( VAR_461 -> VAR_462 . VAR_463 , VAR_464 -> VAR_465 ) ) { METHOD_55 ( VAR_466 , VAR_467 -> VAR_468 ) ; VAR_469 = 1 ; } VAR_470 = METHOD_56 ( VAR_471 , VAR_472 , VAR_473 , 0 , & VAR_474 , & VAR_475 , & VAR_476 , VAR_477 -> VAR_478 , VAR_479 , VAR_480 , 0 , VAR_481 , VAR_482 , VAR_483 , VAR_484 ) ; if ( VAR_485 ) METHOD_57 ( VAR_486 , VAR_487 -> VAR_488 ) ; VAR_489 : METHOD_58 ( & VAR_490 ) ; METHOD_59 ( & VAR_491 . VAR_492 ) ; if ( VAR_493 . VAR_494 ) METHOD_60 ( VAR_495 . VAR_496 ) ; if ( VAR_497 . VAR_498 ) METHOD_61 ( VAR_499 . VAR_500 ) ; if ( VAR_501 . VAR_502 ) { METHOD_62 ( VAR_503 . VAR_504 ) ; METHOD_63 ( VAR_505 . VAR_506 ) ; } METHOD_64 ( & VAR_507 . VAR_508 ) ; METHOD_65 ( VAR_509 . VAR_510 . VAR_511 . VAR_512 , 0 , VAR_513 . VAR_514 . VAR_515 . VAR_516 ) ; METHOD_66 ( & VAR_517 . VAR_518 ) ; return VAR_519 ; }",292
293," static TYPE_0 METHOD_0 ( unsigned VAR_0 )  {  METHOD_1 ( VAR_1 , VAR_2 ) ;  }","static TYPE_0 METHOD_0 ( unsigned VAR_0 ) { METHOD_1 ( VAR_1 , VAR_3 ) ; }",293
294,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_8 * VAR_11 ; VAR_12 = METHOD_1 ( VAR_13 ) - VAR_14 ; for ( VAR_15 = 0 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { VAR_19 = VAR_20 + VAR_21 ; if ( VAR_22 -> VAR_23 != VAR_24 ) continue ; if ( VAR_25 -> VAR_26 && VAR_27 -> VAR_28 != VAR_29 ) continue ; if ( VAR_30 == VAR_31 ) if ( VAR_32 -> VAR_33 == sizeof ( VAR_34 ) ) { if ( VAR_35 -> VAR_36 != VAR_37 -> VAR_38 . VAR_39 ) continue ; if ( VAR_40 -> VAR_41 . VAR_42 != 0 ) { if ( VAR_43 -> VAR_44 . VAR_45 != sizeof ( VAR_46 ) ) continue ; if ( VAR_47 -> VAR_48 . VAR_49 != VAR_50 -> VAR_51 . VAR_52 ) continue ; } if ( VAR_53 -> VAR_54 . VAR_55 != 0 ) { if ( VAR_56 -> VAR_57 . VAR_58 != sizeof ( VAR_59 ) ) continue ; if ( VAR_60 -> VAR_61 . VAR_62 != VAR_63 -> VAR_64 . VAR_65 ) continue ; } } else if ( VAR_66 == VAR_67 ) if ( VAR_68 -> VAR_69 == sizeof ( VAR_70 ) ) { if ( VAR_71 -> VAR_72 != VAR_73 -> VAR_74 . VAR_75 ) continue ; if ( VAR_76 -> VAR_77 . VAR_78 != 0 ) { if ( VAR_79 -> VAR_80 . VAR_81 != sizeof ( VAR_82 ) ) continue ; if ( ! METHOD_2 ( & VAR_83 -> VAR_84 . VAR_85 , & VAR_86 -> VAR_87 . VAR_88 ) ) continue ; } if ( VAR_89 -> VAR_90 . VAR_91 != 0 ) { if ( VAR_92 -> VAR_93 . VAR_94 != sizeof ( VAR_95 ) ) continue ; if ( ! METHOD_3 ( & VAR_96 -> VAR_97 . VAR_98 , & VAR_99 -> VAR_100 . VAR_101 ) ) continue ; } } else { continue ; } break ; } if ( VAR_102 >= VAR_103 ) return VAR_104 ; if ( VAR_105 -> VAR_106 == VAR_107 ) { VAR_108 = METHOD_4 ( sizeof ( VAR_109 ) + VAR_110 ) ; if ( VAR_111 != VAR_112 ) { VAR_113 = METHOD_5 ( VAR_114 , 0 ) ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; } else { VAR_121 = VAR_122 ; } } else { VAR_123 = VAR_124 -> VAR_125 ; for ( VAR_126 = 1 ; VAR_127 -> VAR_128 ; VAR_129 ++ ) { VAR_130 = VAR_131 -> VAR_132 ; } if ( VAR_133 >= VAR_134 ) { METHOD_6 ( VAR_135 . VAR_136 [ VAR_137 -> VAR_138 ] . VAR_139 , 1 ) ; METHOD_7 ( VAR_140 [ VAR_141 -> VAR_142 ] . VAR_143 , 1 ) ; return VAR_144 ; } VAR_145 = METHOD_8 ( sizeof ( VAR_146 ) + VAR_147 ) ; if ( VAR_148 != VAR_149 ) { VAR_150 -> VAR_151 = METHOD_9 ( VAR_152 , 0 ) ; VAR_153 = VAR_154 -> VAR_155 ; VAR_156 -> VAR_157 = VAR_158 ; } else { VAR_159 = VAR_160 ; } } if ( VAR_161 == VAR_162 ) { METHOD_10 ( VAR_163 . VAR_164 [ VAR_165 -> VAR_166 ] . VAR_167 , 1 ) ; METHOD_11 ( VAR_168 [ VAR_169 -> VAR_170 ] . VAR_171 , 1 ) ; return VAR_172 ; } VAR_173 -> VAR_174 = VAR_175 ;  VAR_176 -> VAR_177 = 0 ;  if ( VAR_178 == VAR_179 ) if ( VAR_180 -> VAR_181 == sizeof ( VAR_182 ) ) { VAR_183 -> VAR_184 . VAR_185 = sizeof ( VAR_186 ) ; VAR_187 -> VAR_188 . VAR_189 = VAR_190 -> VAR_191 . VAR_192 ; VAR_193 -> VAR_194 . VAR_195 = sizeof ( VAR_196 ) ; VAR_197 -> VAR_198 . VAR_199 = VAR_200 -> VAR_201 . VAR_202 ; } if ( VAR_203 == VAR_204 ) if ( VAR_205 -> VAR_206 == sizeof ( VAR_207 ) ) { VAR_208 -> VAR_209 . VAR_210 = sizeof ( VAR_211 ) ; VAR_212 -> VAR_213 . VAR_214 = VAR_215 -> VAR_216 . VAR_217 ; VAR_218 -> VAR_219 . VAR_220 = sizeof ( VAR_221 ) ; VAR_222 -> VAR_223 . VAR_224 = VAR_225 -> VAR_226 . VAR_227 ; } VAR_228 -> VAR_229 = sizeof ( VAR_230 ) ; METHOD_12 ( VAR_231 -> VAR_232 , VAR_233 -> VAR_234 , VAR_235 , VAR_236 , VAR_237 ) ; VAR_238 -> VAR_239 = * VAR_240 ; METHOD_13 ( VAR_241 ) ; return VAR_242 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; VAR_7 * VAR_8 ; VAR_9 * VAR_10 ; TYPE_8 * VAR_11 ; VAR_12 = METHOD_1 ( VAR_13 ) - VAR_14 ; for ( VAR_15 = 0 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { VAR_19 = VAR_20 + VAR_21 ; if ( VAR_22 -> VAR_23 != VAR_24 ) continue ; if ( VAR_25 -> VAR_26 && VAR_27 -> VAR_28 != VAR_29 ) continue ; if ( VAR_30 == VAR_31 ) if ( VAR_32 -> VAR_33 == sizeof ( VAR_34 ) ) { if ( VAR_35 -> VAR_36 != VAR_37 -> VAR_38 . VAR_39 ) continue ; if ( VAR_40 -> VAR_41 . VAR_42 != 0 ) { if ( VAR_43 -> VAR_44 . VAR_45 != sizeof ( VAR_46 ) ) continue ; if ( VAR_47 -> VAR_48 . VAR_49 != VAR_50 -> VAR_51 . VAR_52 ) continue ; } if ( VAR_53 -> VAR_54 . VAR_55 != 0 ) { if ( VAR_56 -> VAR_57 . VAR_58 != sizeof ( VAR_59 ) ) continue ; if ( VAR_60 -> VAR_61 . VAR_62 != VAR_63 -> VAR_64 . VAR_65 ) continue ; } } else if ( VAR_66 == VAR_67 ) if ( VAR_68 -> VAR_69 == sizeof ( VAR_70 ) ) { if ( VAR_71 -> VAR_72 != VAR_73 -> VAR_74 . VAR_75 ) continue ; if ( VAR_76 -> VAR_77 . VAR_78 != 0 ) { if ( VAR_79 -> VAR_80 . VAR_81 != sizeof ( VAR_82 ) ) continue ; if ( ! METHOD_2 ( & VAR_83 -> VAR_84 . VAR_85 , & VAR_86 -> VAR_87 . VAR_88 ) ) continue ; } if ( VAR_89 -> VAR_90 . VAR_91 != 0 ) { if ( VAR_92 -> VAR_93 . VAR_94 != sizeof ( VAR_95 ) ) continue ; if ( ! METHOD_3 ( & VAR_96 -> VAR_97 . VAR_98 , & VAR_99 -> VAR_100 . VAR_101 ) ) continue ; } } else { continue ; } break ; } if ( VAR_102 >= VAR_103 ) return VAR_104 ; if ( VAR_105 -> VAR_106 == VAR_107 ) { VAR_108 = METHOD_4 ( sizeof ( VAR_109 ) + VAR_110 ) ; if ( VAR_111 != VAR_112 ) { VAR_113 = METHOD_5 ( VAR_114 , 0 ) ; VAR_115 -> VAR_116 = VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; } else { VAR_121 = VAR_122 ; } } else { VAR_123 = VAR_124 -> VAR_125 ; for ( VAR_126 = 1 ; VAR_127 -> VAR_128 ; VAR_129 ++ ) { VAR_130 = VAR_131 -> VAR_132 ; } if ( VAR_133 >= VAR_134 ) { METHOD_6 ( VAR_135 . VAR_136 [ VAR_137 -> VAR_138 ] . VAR_139 , 1 ) ; METHOD_7 ( VAR_140 [ VAR_141 -> VAR_142 ] . VAR_143 , 1 ) ; return VAR_144 ; } VAR_145 = METHOD_8 ( sizeof ( VAR_146 ) + VAR_147 ) ; if ( VAR_148 != VAR_149 ) { VAR_150 -> VAR_151 = METHOD_9 ( VAR_152 , 0 ) ; VAR_153 = VAR_154 -> VAR_155 ; VAR_156 -> VAR_157 = VAR_158 ; } else { VAR_159 = VAR_160 ; } } if ( VAR_161 == VAR_162 ) { METHOD_10 ( VAR_163 . VAR_164 [ VAR_165 -> VAR_166 ] . VAR_167 , 1 ) ; METHOD_11 ( VAR_168 [ VAR_169 -> VAR_170 ] . VAR_171 , 1 ) ; return VAR_172 ; } VAR_173 -> VAR_174 = VAR_175 ; VAR_176 -> VAR_177 = 0 ; if ( VAR_178 == VAR_179 ) if ( VAR_180 -> VAR_181 == sizeof ( VAR_182 ) ) { VAR_183 -> VAR_184 . VAR_185 = sizeof ( VAR_186 ) ; VAR_187 -> VAR_188 . VAR_189 = VAR_190 -> VAR_191 . VAR_192 ; VAR_193 -> VAR_194 . VAR_195 = sizeof ( VAR_196 ) ; VAR_197 -> VAR_198 . VAR_199 = VAR_200 -> VAR_201 . VAR_202 ; } if ( VAR_203 == VAR_204 ) if ( VAR_205 -> VAR_206 == sizeof ( VAR_207 ) ) { VAR_208 -> VAR_209 . VAR_210 = sizeof ( VAR_211 ) ; VAR_212 -> VAR_213 . VAR_214 = VAR_215 -> VAR_216 . VAR_217 ; VAR_218 -> VAR_219 . VAR_220 = sizeof ( VAR_221 ) ; VAR_222 -> VAR_223 . VAR_224 = VAR_225 -> VAR_226 . VAR_227 ; } VAR_228 -> VAR_229 = sizeof ( VAR_230 ) ; METHOD_12 ( VAR_231 -> VAR_232 , VAR_233 -> VAR_234 , VAR_235 , VAR_236 , VAR_237 ) ; VAR_238 -> VAR_169 = VAR_169 ; VAR_238 -> VAR_239 = * VAR_240 ; METHOD_13 ( VAR_241 ) ; return VAR_242 ; }",294
295," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 ,  TYPE_3 * * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ,  TYPE_6 VAR_5 , TYPE_7 VAR_6 ) {  TYPE_8 * const VAR_7 = & VAR_8 -> VAR_9 ;  TYPE_9 * const VAR_10 = & VAR_11 -> VAR_12 ;  TYPE_10 * const VAR_13 = & VAR_14 -> VAR_15 ;  const TYPE_11 VAR_16 = METHOD_1 ( VAR_17 ) , VAR_18 = ( 1 << VAR_19 ) / 4 ;  TYPE_12 VAR_20 ; TYPE_13 VAR_21 ;  TYPE_14 VAR_22 ;  if ( VAR_23 >= VAR_24 -> VAR_25 || VAR_26 >= VAR_27 -> VAR_28 ) return ; if ( VAR_29 >= VAR_30 ) { VAR_31 = METHOD_2 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ;  VAR_36 = * METHOD_3 ( VAR_37 , VAR_38 ) ;  } else { VAR_39 = 0 ; VAR_40 = VAR_41 ; }  VAR_42 = VAR_43 [ VAR_44 ] [ VAR_45 ] ;  switch ( VAR_46 ) { case VAR_47 :  if ( VAR_48 && VAR_49 >= VAR_50 )  VAR_51 -> VAR_52 . VAR_53 [ VAR_54 ] [ VAR_55 ] ++ ;  METHOD_4 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ;  break ; case VAR_63 :  if ( VAR_64 )  VAR_65 -> VAR_66 . VAR_67 [ VAR_68 ] [ VAR_69 ] ++ ; * METHOD_5 ( VAR_70 , VAR_71 ) = 0 ; METHOD_6 ( VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 ) ;  if ( VAR_79 + VAR_80 < VAR_81 -> VAR_82 ) {  * METHOD_7 ( VAR_83 , VAR_84 ) = 1 ; METHOD_8 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 , VAR_89 + VAR_90 , VAR_91 , VAR_92 ) ; } break ; case VAR_93 :  if ( VAR_94 )  VAR_95 -> VAR_96 . VAR_97 [ VAR_98 ] [ VAR_99 ] ++ ; * METHOD_9 ( VAR_100 , VAR_101 ) = 0 ; METHOD_10 ( VAR_102 , VAR_103 , VAR_104 , VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ;  if ( VAR_109 + VAR_110 < VAR_111 -> VAR_112 ) {  * METHOD_11 ( VAR_113 , VAR_114 ) = 1 ; METHOD_12 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 + VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; } break ; case VAR_123 :  VAR_124 = METHOD_13 ( VAR_125 , VAR_126 ) ;  if ( VAR_127 ) VAR_128 -> VAR_129 . VAR_130 [ VAR_131 ] [ VAR_132 ] ++ ; * METHOD_14 ( VAR_133 , VAR_134 ) = 0 ;  METHOD_15 ( VAR_135 , VAR_136 , VAR_137 , VAR_138 , VAR_139 , VAR_140 , VAR_141 ) ;  * METHOD_16 ( VAR_142 , VAR_143 ) = 1 ;  METHOD_17 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 + VAR_149 , VAR_150 , VAR_151 ) ;  * METHOD_18 ( VAR_152 , VAR_153 ) = 2 ;  METHOD_19 ( VAR_154 , VAR_155 , VAR_156 , VAR_157 + VAR_158 , VAR_159 , VAR_160 , VAR_161 ) ;  * METHOD_20 ( VAR_162 , VAR_163 ) = 3 ; METHOD_21 ( VAR_164 , VAR_165 , VAR_166 , VAR_167 + VAR_168 , VAR_169 + VAR_170 , VAR_171 , VAR_172 ) ; break ; default :  METHOD_22 ( ""Invalidpartitiontype."" ) ;  } if ( VAR_173 != VAR_174 || VAR_175 == VAR_176 ) METHOD_23 ( VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 ) { TYPE_8 * const VAR_7 = & VAR_8 -> VAR_9 ; TYPE_9 * const VAR_10 = & VAR_11 -> VAR_12 ; TYPE_10 * const VAR_13 = & VAR_14 -> VAR_15 ; const TYPE_11 VAR_16 = METHOD_1 ( VAR_17 ) , VAR_18 = ( 1 << VAR_19 ) / 4 ; TYPE_12 VAR_20 ; TYPE_13 VAR_21 ; TYPE_14 VAR_22 ; if ( VAR_23 >= VAR_24 -> VAR_25 || VAR_26 >= VAR_27 -> VAR_28 ) return ; if ( VAR_29 >= VAR_30 ) { VAR_31 = METHOD_2 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 = * METHOD_3 ( VAR_37 , VAR_38 ) ; } else { VAR_39 = 0 ; VAR_40 = VAR_41 ; } VAR_42 = VAR_43 [ VAR_44 ] [ VAR_45 ] ; switch ( VAR_46 ) { case VAR_47 : if ( VAR_48 && VAR_49 >= VAR_50 ) VAR_51 -> VAR_52 . VAR_53 [ VAR_54 ] [ VAR_55 ] ++ ; METHOD_4 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; break ; case VAR_63 : if ( VAR_64 ) VAR_65 -> VAR_66 . VAR_67 [ VAR_68 ] [ VAR_69 ] ++ ; * METHOD_5 ( VAR_70 , VAR_71 ) = 0 ; METHOD_6 ( VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 ) ; if ( VAR_79 + VAR_80 < VAR_81 -> VAR_82 ) { * METHOD_7 ( VAR_83 , VAR_84 ) = 1 ; METHOD_8 ( VAR_85 , VAR_86 , VAR_87 , VAR_88 , VAR_89 + VAR_90 , VAR_91 , VAR_92 ) ; } break ; case VAR_93 : if ( VAR_94 ) VAR_95 -> VAR_96 . VAR_97 [ VAR_98 ] [ VAR_99 ] ++ ; * METHOD_9 ( VAR_100 , VAR_101 ) = 0 ; METHOD_10 ( VAR_102 , VAR_103 , VAR_104 , VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ; if ( VAR_109 + VAR_110 < VAR_111 -> VAR_112 ) { * METHOD_11 ( VAR_113 , VAR_114 ) = 1 ; METHOD_12 ( VAR_115 , VAR_116 , VAR_117 , VAR_118 + VAR_119 , VAR_120 , VAR_121 , VAR_122 ) ; } break ; case VAR_123 : VAR_124 = METHOD_13 ( VAR_125 , VAR_126 ) ; if ( VAR_127 ) VAR_128 -> VAR_129 . VAR_130 [ VAR_131 ] [ VAR_132 ] ++ ; * METHOD_14 ( VAR_133 , VAR_134 ) = 0 ; METHOD_15 ( VAR_135 , VAR_136 , VAR_137 , VAR_138 , VAR_139 , VAR_140 , VAR_141 ) ; * METHOD_16 ( VAR_142 , VAR_143 ) = 1 ; METHOD_17 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 + VAR_149 , VAR_150 , VAR_151 ) ; * METHOD_18 ( VAR_152 , VAR_153 ) = 2 ; METHOD_19 ( VAR_154 , VAR_155 , VAR_156 , VAR_157 + VAR_158 , VAR_159 , VAR_160 , VAR_161 ) ; * METHOD_20 ( VAR_162 , VAR_163 ) = 3 ; METHOD_21 ( VAR_164 , VAR_165 , VAR_182 , VAR_166 , VAR_178 , VAR_179 , VAR_171 , VAR_180 , & VAR_183 -> VAR_186 ) ; break ; default : METHOD_22 ( 0 && ""Invalidpartitiontype."" ) ; break ; } if ( VAR_173 != VAR_174 || VAR_175 == VAR_176 ) METHOD_23 ( VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 ) ; }",295
296,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ;  METHOD_1 ( & VAR_10 . VAR_11 ) ;  VAR_12 = VAR_13 . VAR_14 ; if ( VAR_15 ) METHOD_2 ( VAR_16 ) ; METHOD_3 ( & VAR_17 . VAR_18 ) ; if ( VAR_19 == VAR_20 ) return - VAR_21 ; if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) ) return - VAR_25 ; VAR_26 = & VAR_27 -> VAR_28 ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 == VAR_32 ) { VAR_33 = 0 ; goto VAR_34 ; } VAR_35 = ( struct STRUCT_OR_UNION_7 * ) VAR_36 -> VAR_37 ; VAR_38 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_39 + 1 ) ; VAR_40 -> VAR_41 = sizeof ( struct STRUCT_OR_UNION_9 ) + VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 + sizeof ( struct STRUCT_OR_UNION_10 ) ; VAR_53 -> VAR_54 = VAR_55 ; if ( METHOD_5 ( VAR_56 + 1 , VAR_57 , VAR_58 ) ) goto VAR_59 ; METHOD_6 ( & VAR_60 -> VAR_61 [ VAR_62 - 1 ] ) ; VAR_63 = ( struct STRUCT_OR_UNION_11 * ) VAR_64 -> VAR_65 [ VAR_66 - 1 ] ; if ( VAR_67 ) { VAR_68 -> VAR_69 = VAR_70 -> VAR_71 ++ ; if ( VAR_72 -> VAR_73 == 0 ) VAR_74 -> VAR_75 = 1 ; METHOD_7 ( & VAR_76 -> VAR_77 ) ; if ( METHOD_8 ( VAR_78 , 0 , 0 , VAR_79 ) == 0 ) VAR_80 = VAR_81 ; METHOD_9 ( & VAR_82 -> VAR_83 ) ; } METHOD_10 ( & VAR_84 -> VAR_85 [ VAR_86 - 1 ] ) ; VAR_87 : if ( VAR_88 ) { VAR_89 = 0 ; METHOD_11 ( & VAR_90 -> VAR_91 ) ; METHOD_12 ( VAR_92 , VAR_93 ) ; METHOD_13 ( & VAR_94 -> VAR_95 ) ; } METHOD_14 ( VAR_96 ) ; return VAR_97 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; METHOD_1 ( & VAR_10 . VAR_11 ) ; VAR_12 = VAR_13 . VAR_14 ; if ( VAR_15 ) METHOD_2 ( VAR_16 ) ; METHOD_3 ( & VAR_17 . VAR_18 ) ; if ( VAR_19 == VAR_20 ) return - VAR_21 ; if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) ) return - VAR_25 ; VAR_26 = & VAR_27 -> VAR_28 ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 == VAR_32 ) { VAR_33 = 0 ; goto VAR_34 ; } VAR_35 = ( struct STRUCT_OR_UNION_7 * ) VAR_36 -> VAR_37 ; VAR_38 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_39 + 1 ) ; VAR_40 -> VAR_41 = sizeof ( struct STRUCT_OR_UNION_9 ) + VAR_42 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 + sizeof ( struct STRUCT_OR_UNION_10 ) ; VAR_53 -> VAR_54 = VAR_55 ; if ( METHOD_5 ( VAR_56 + 1 , VAR_57 , VAR_58 ) ) goto VAR_59 ; METHOD_6 ( & VAR_60 -> VAR_61 [ VAR_62 - 1 ] ) ; VAR_63 = ( struct STRUCT_OR_UNION_11 * ) VAR_64 -> VAR_65 [ VAR_66 - 1 ] ; if ( VAR_67 ) { VAR_68 -> VAR_69 = VAR_70 -> VAR_71 ++ ; if ( VAR_72 -> VAR_73 == 0 ) VAR_74 -> VAR_75 = 1 ; METHOD_7 ( & VAR_76 -> VAR_77 ) ; if ( METHOD_8 ( VAR_78 , 0 , 0 , VAR_79 ) == 0 ) VAR_80 = VAR_81 ; METHOD_9 ( & VAR_82 -> VAR_83 ) ; } METHOD_10 ( & VAR_84 -> VAR_85 [ VAR_86 - 1 ] ) ; VAR_87 : if ( VAR_88 ) { VAR_89 = 0 ; METHOD_11 ( & VAR_90 -> VAR_91 ) ; METHOD_12 ( VAR_92 , VAR_93 ) ; METHOD_13 ( & VAR_94 -> VAR_95 ) ; } METHOD_14 ( VAR_96 ) ; return VAR_97 ; }",296
297,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_1 ) ; struct STRUCT_OR_UNION_3 * VAR_2 ; METHOD_2 ( ""%s:sk:%p\\n"" , VAR_3 , VAR_4 ) ; VAR_5 = METHOD_3 ( VAR_6 ) ; switch ( VAR_7 -> VAR_8 ) { case VAR_9 : VAR_10 -> VAR_11 = VAR_12 ; break ; case VAR_13 : VAR_14 -> VAR_15 = VAR_16 ; break ; default : return - VAR_17 ; } VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = STRUCT_OR_UNION_4 -> VAR_32 . VAR_33 ; VAR_34 -> VAR_35 = STRUCT_OR_UNION_5 -> VAR_36 . VAR_37 ; VAR_38 -> VAR_39 . VAR_40 = VAR_41 ; VAR_42 -> VAR_43 . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 . VAR_48 = STRUCT_OR_UNION_6 -> VAR_49 . VAR_50 ; VAR_51 -> VAR_52 . VAR_53 = STRUCT_OR_UNION_7 -> VAR_54 . VAR_55 ; VAR_56 -> VAR_57 . VAR_58 = STRUCT_OR_UNION_8 -> VAR_59 . VAR_60 ; VAR_61 -> VAR_62 . VAR_63 = STRUCT_OR_UNION_9 -> VAR_64 . VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = STRUCT_OR_UNION_10 -> VAR_69 . VAR_70 ; VAR_71 -> VAR_72 . VAR_73 = STRUCT_OR_UNION_11 -> VAR_74 . VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = 0 ; VAR_79 -> VAR_80 . VAR_81 = 0 ; VAR_82 -> VAR_83 . VAR_84 = 0 ; VAR_85 -> VAR_86 . VAR_87 = STRUCT_OR_UNION_12 -> VAR_88 . VAR_89 ; METHOD_4 ( & VAR_90 -> VAR_91 , 0 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ; VAR_92 -> VAR_93 = STRUCT_OR_UNION_14 -> VAR_94 . VAR_95 ; VAR_96 -> VAR_97 = STRUCT_OR_UNION_15 -> VAR_98 . VAR_99 ; VAR_100 -> VAR_101 = 0 ; VAR_102 -> VAR_103 = STRUCT_OR_UNION_16 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 = 2 ; VAR_108 -> VAR_109 = VAR_110 | VAR_111 | VAR_112 ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 -> VAR_118 = 0 ; VAR_119 -> VAR_120 = 0 ; VAR_121 -> VAR_122 = 1 ; VAR_123 -> VAR_124 = 0 ; VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = 0 ; VAR_129 -> VAR_130 = METHOD_5 ( VAR_131 -> VAR_132 ) ; METHOD_6 ( & VAR_133 -> VAR_134 , 0 ) ; METHOD_7 ( & VAR_135 -> VAR_136 ) ; VAR_137 -> VAR_138 = 0 ; VAR_139 -> VAR_140 = METHOD_8 ( VAR_141 , VAR_142 ) ; if ( ! VAR_143 -> VAR_144 ) return - VAR_145 ; VAR_146 -> VAR_147 = VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; METHOD_9 ( STRUCT_OR_UNION_17 ) ; METHOD_10 ( ) ; METHOD_11 ( & VAR_152 ) ; METHOD_12 ( STRUCT_OR_UNION_18 , VAR_153 -> VAR_154 , 1 ) ; if ( STRUCT_OR_UNION_19 -> VAR_155 . VAR_156 ) {  METHOD_13 ( & VAR_157 -> VAR_158 ,  & STRUCT_OR_UNION_20 -> VAR_159 . VAR_160 ) ;  VAR_161 -> VAR_162 = 1 ;   } else   VAR_163 -> VAR_164 = 0 ;  METHOD_14 ( ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_1 ) ; struct STRUCT_OR_UNION_3 * VAR_2 ; METHOD_2 ( ""%s:sk:%p\\n"" , VAR_3 , VAR_4 ) ; VAR_5 = METHOD_3 ( VAR_6 ) ; switch ( VAR_7 -> VAR_8 ) { case VAR_9 : VAR_10 -> VAR_11 = VAR_12 ; break ; case VAR_13 : VAR_14 -> VAR_15 = VAR_16 ; break ; default : return - VAR_17 ; } VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; VAR_26 -> VAR_27 = 0 ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = STRUCT_OR_UNION_4 -> VAR_32 . VAR_33 ; VAR_34 -> VAR_35 = STRUCT_OR_UNION_5 -> VAR_36 . VAR_37 ; VAR_38 -> VAR_39 . VAR_40 = VAR_41 ; VAR_42 -> VAR_43 . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 . VAR_48 = STRUCT_OR_UNION_6 -> VAR_49 . VAR_50 ; VAR_51 -> VAR_52 . VAR_53 = STRUCT_OR_UNION_7 -> VAR_54 . VAR_55 ; VAR_56 -> VAR_57 . VAR_58 = STRUCT_OR_UNION_8 -> VAR_59 . VAR_60 ; VAR_61 -> VAR_62 . VAR_63 = STRUCT_OR_UNION_9 -> VAR_64 . VAR_65 ; VAR_66 -> VAR_67 . VAR_68 = STRUCT_OR_UNION_10 -> VAR_69 . VAR_70 ; VAR_71 -> VAR_72 . VAR_73 = STRUCT_OR_UNION_11 -> VAR_74 . VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = 0 ; VAR_79 -> VAR_80 . VAR_81 = 0 ; VAR_82 -> VAR_83 . VAR_84 = 0 ; VAR_85 -> VAR_86 . VAR_87 = STRUCT_OR_UNION_12 -> VAR_88 . VAR_89 ; METHOD_4 ( & VAR_90 -> VAR_91 , 0 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ; VAR_92 -> VAR_93 = STRUCT_OR_UNION_14 -> VAR_94 . VAR_95 ; VAR_96 -> VAR_97 = STRUCT_OR_UNION_15 -> VAR_98 . VAR_99 ; VAR_100 -> VAR_101 = 0 ; VAR_102 -> VAR_103 = STRUCT_OR_UNION_16 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 = 2 ; VAR_108 -> VAR_109 = VAR_110 | VAR_111 | VAR_112 ; VAR_113 -> VAR_114 = 0 ; VAR_115 -> VAR_116 = 0 ; VAR_117 -> VAR_118 = 0 ; VAR_119 -> VAR_120 = 0 ; VAR_121 -> VAR_122 = 1 ; VAR_123 -> VAR_124 = 0 ; VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = 0 ; VAR_129 -> VAR_130 = METHOD_5 ( VAR_131 -> VAR_132 ) ; METHOD_6 ( & VAR_133 -> VAR_134 , 0 ) ; METHOD_7 ( & VAR_135 -> VAR_136 ) ; VAR_137 -> VAR_138 = 0 ; VAR_139 -> VAR_140 = METHOD_8 ( VAR_141 , VAR_142 ) ; if ( ! VAR_143 -> VAR_144 ) return - VAR_145 ; VAR_146 -> VAR_147 = VAR_148 ; VAR_149 -> VAR_150 = VAR_151 ; METHOD_9 ( STRUCT_OR_UNION_17 ) ; METHOD_10 ( ) ; METHOD_11 ( & VAR_152 ) ; METHOD_12 ( STRUCT_OR_UNION_18 , VAR_153 -> VAR_154 , 1 ) ; if ( STRUCT_OR_UNION_19 -> VAR_155 . VAR_156 ) { METHOD_15 ( & METHOD_1 ( VAR_153 ) -> VAR_159 . VAR_165 ) ; METHOD_13 ( & VAR_157 -> VAR_158 , & STRUCT_OR_UNION_20 -> VAR_159 . VAR_160 ) ; VAR_161 -> VAR_162 = 1 ; } else { VAR_163 -> VAR_164 = 0 ; } METHOD_14 ( ) ; return 0 ; }",297
298,TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) { METHOD_2 ( STRUCT_OR_UNION_3 ) ;  METHOD_3 ( STRUCT_OR_UNION_4 ) ;  METHOD_4 ( STRUCT_OR_UNION_5 ) ; } },TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_0 ) ) { METHOD_2 ( STRUCT_OR_UNION_3 ) ; METHOD_3 ( STRUCT_OR_UNION_4 ) ; METHOD_4 ( STRUCT_OR_UNION_5 ) ; } },298
299,TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( ) ; if ( VAR_2 ) { VAR_3 -> VAR_4 = VAR_5 ; VAR_6 -> VAR_7 = METHOD_2 ( VAR_8 ) ;  }  return VAR_9 ; },TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( ) ; if ( VAR_2 ) { VAR_3 -> VAR_4 = VAR_5 ; VAR_6 -> VAR_7 = METHOD_2 ( VAR_8 ) ; if ( ! VAR_9 -> VAR_7 ) { METHOD_3 ( VAR_9 ) ; return 0 ; } } return VAR_9 ; },299
300,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 * VAR_6 = ( TYPE_8 * ) VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 = 0 ; METHOD_1 ( & VAR_10 ) ; if ( ! METHOD_2 ( VAR_11 ) ) { VAR_12 = - VAR_13 ; goto VAR_14 ; } if ( VAR_15 == VAR_16 || VAR_17 -> VAR_18 == VAR_19 ) { VAR_20 = - VAR_21 ; goto VAR_22 ; } switch ( VAR_23 ) { case VAR_24 : if ( VAR_25 == VAR_26 || * VAR_27 != sizeof ( TYPE_11 ) ) { VAR_28 = - VAR_29 ; goto VAR_30 ; } if ( VAR_31 -> VAR_32 . METHOD_3 ) * ( TYPE_12 * ) VAR_33 = VAR_34 -> VAR_35 . METHOD_4 ( VAR_36 ) ; else * ( TYPE_13 * ) VAR_37 = 0 ; break ; case VAR_38 : if ( VAR_39 == VAR_40 || VAR_41 != sizeof ( TYPE_14 ) || VAR_42 == VAR_43 || * VAR_44 != sizeof ( TYPE_15 ) ) { VAR_45 = - VAR_46 ; goto VAR_47 ; } * ( TYPE_16 * ) VAR_48 = METHOD_5 ( VAR_49 , ( TYPE_17 * ) VAR_50 ) ; break ; case VAR_51 : if ( VAR_52 == VAR_53 || * VAR_54 != sizeof ( TYPE_18 ) ) { VAR_55 = - VAR_56 ; goto VAR_57 ; } if ( ! VAR_58 -> VAR_59 ) { VAR_60 = - VAR_61 ; goto VAR_62 ; } METHOD_6 ( VAR_63 , ( TYPE_19 * ) VAR_64 ) ; break ; case VAR_65 : if ( VAR_66 -> VAR_67 . METHOD_7 ) VAR_68 -> VAR_69 . METHOD_8 ( VAR_70 ) ; break ; case VAR_71 : if ( VAR_72 == VAR_73 || * VAR_74 != sizeof ( TYPE_20 ) ) { VAR_75 = - VAR_76 ; goto VAR_77 ; } if ( VAR_78 -> VAR_79 != VAR_80 ) { VAR_81 = - VAR_82 ; goto VAR_83 ; } VAR_84 -> VAR_85 = VAR_86 ; if ( VAR_87 -> VAR_88 . METHOD_9 ) VAR_89 -> VAR_90 . METHOD_10 ( VAR_91 ) ; METHOD_11 ( ""%sEFFECT_CMD_ENABLE"" , VAR_92 ) ; * ( TYPE_21 * ) VAR_93 = 0 ; break ; case VAR_94 : if ( VAR_95 == VAR_96 || * VAR_97 != sizeof ( TYPE_22 ) ) { VAR_98 = - VAR_99 ; goto VAR_100 ; } if ( VAR_101 -> VAR_102 != VAR_103 ) { VAR_104 = - VAR_105 ; goto VAR_106 ; } VAR_107 -> VAR_108 = VAR_109 ; if ( VAR_110 -> VAR_111 . METHOD_12 ) VAR_112 -> VAR_113 . METHOD_13 ( VAR_114 ) ; METHOD_14 ( ""%sEFFECT_CMD_DISABLE"" , VAR_115 ) ; * ( TYPE_23 * ) VAR_116 = 0 ; break ; case VAR_117 : { if ( VAR_118 == VAR_119 || VAR_120 < ( TYPE_24 ) ( sizeof ( TYPE_25 ) + sizeof ( TYPE_26 ) ) || VAR_121 == VAR_122 || * VAR_123 < ( TYPE_27 ) ( sizeof ( TYPE_28 ) + sizeof ( TYPE_29 ) +  sizeof ( VAR_124 ) ) ) {  VAR_125 = - VAR_126 ; METHOD_15 ( ""EFFECT_CMD_GET_PARAMinvalidcommandcmdSize%d*replySize%d"" , VAR_127 , * VAR_128 ) ; goto VAR_129 ; } if ( ! VAR_130 -> VAR_131 ) { VAR_132 = - VAR_133 ; goto VAR_134 ; } TYPE_30 * VAR_135 = ( TYPE_31 * ) VAR_136 ; METHOD_16 ( VAR_137 , VAR_138 , sizeof ( TYPE_32 ) + VAR_139 -> VAR_140 ) ; TYPE_33 * VAR_141 = ( TYPE_34 * ) VAR_142 ; if ( VAR_143 -> VAR_144 . METHOD_17 ) VAR_145 -> VAR_146 . METHOD_18 ( VAR_147 , VAR_148 , VAR_149 ) ; } break ; case VAR_150 : { if ( VAR_151 == VAR_152 || VAR_153 < ( TYPE_35 ) ( sizeof ( TYPE_36 ) + sizeof ( TYPE_37 ) + sizeof ( VAR_154 ) ) || VAR_155 == VAR_156 || * VAR_157 != sizeof ( TYPE_38 ) ) { VAR_158 = - VAR_159 ; METHOD_19 ( ""EFFECT_CMD_SET_PARAMinvalidcommandcmdSize%d*replySize%d"" , VAR_160 , * VAR_161 ) ; goto VAR_162 ; } * ( TYPE_39 * ) VAR_163 = 0 ; TYPE_40 * VAR_164 = ( TYPE_41 * ) VAR_165 ; if ( VAR_166 -> VAR_167 . METHOD_20 ) * ( TYPE_42 * ) VAR_168 = VAR_169 -> VAR_170 . METHOD_21 ( VAR_171 , VAR_172 , * VAR_173 ) ; } break ; case VAR_174 : { TYPE_43 VAR_175 ; METHOD_22 ( ""\\tEFFECT_CMD_SET_DEVICEstart"" ) ; if ( VAR_176 == VAR_177 || VAR_178 < sizeof ( TYPE_44 ) ) { VAR_179 = - VAR_180 ; METHOD_23 ( ""EFFECT_CMD_SET_DEVICEinvalidcommandcmdSize%d"" , VAR_181 ) ; goto VAR_182 ; } VAR_183 = * ( TYPE_45 * ) VAR_184 ; if ( VAR_185 -> VAR_186 . METHOD_24 ) VAR_187 -> VAR_188 . METHOD_25 ( VAR_189 , VAR_190 ) ; } break ; case VAR_191 : case VAR_192 : break ; case VAR_193 : { VAR_194 * VAR_195 ; if ( VAR_196 != sizeof ( TYPE_46 ) || VAR_197 == VAR_198 || VAR_199 == VAR_200 || * VAR_201 != sizeof ( TYPE_47 ) ) { METHOD_26 ( ""%sEFFECT_CMD_OFFLOADbadformat"" , VAR_202 ) ; VAR_203 = - VAR_204 ; break ; } TYPE_48 * VAR_205 = ( TYPE_49 * ) VAR_206 ; METHOD_27 ( ""%sEFFECT_CMD_OFFLOADoffload%doutput%d"" , VAR_207 , VAR_208 -> VAR_209 , VAR_210 -> VAR_211 ) ; * ( TYPE_50 * ) VAR_212 = 0 ; VAR_213 -> VAR_214 = VAR_215 -> VAR_216 ; if ( VAR_217 -> VAR_218 == VAR_219 -> VAR_220 ) break ; VAR_221 = METHOD_28 ( VAR_222 -> VAR_223 ) ; if ( VAR_224 != VAR_225 ) METHOD_29 ( VAR_226 , VAR_227 ) ; VAR_228 -> VAR_229 = VAR_230 -> VAR_231 ; VAR_232 = METHOD_30 ( VAR_233 -> VAR_234 ) ; if ( VAR_235 != VAR_236 ) METHOD_31 ( VAR_237 , VAR_238 ) ; } break ; default : if ( VAR_239 >= VAR_240 && VAR_241 -> VAR_242 . METHOD_32 ) VAR_243 = VAR_244 -> VAR_245 . METHOD_33 ( VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , VAR_251 ) ; else { METHOD_34 ( ""%sinvalidcommand%d"" , VAR_252 , VAR_253 ) ; VAR_254 = - VAR_255 ; } break ; } VAR_256 : METHOD_35 ( & VAR_257 ) ; return VAR_258 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 * VAR_6 = ( TYPE_8 * ) VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 = 0 ; METHOD_1 ( & VAR_10 ) ; if ( ! METHOD_2 ( VAR_11 ) ) { VAR_12 = - VAR_13 ; goto VAR_14 ; } if ( VAR_15 == VAR_16 || VAR_17 -> VAR_18 == VAR_19 ) { VAR_20 = - VAR_21 ; goto VAR_22 ; } switch ( VAR_23 ) { case VAR_24 : if ( VAR_25 == VAR_26 || * VAR_27 != sizeof ( TYPE_11 ) ) { VAR_28 = - VAR_29 ; goto VAR_30 ; } if ( VAR_31 -> VAR_32 . METHOD_3 ) * ( TYPE_12 * ) VAR_33 = VAR_34 -> VAR_35 . METHOD_4 ( VAR_36 ) ; else * ( TYPE_13 * ) VAR_37 = 0 ; break ; case VAR_38 : if ( VAR_39 == VAR_40 || VAR_41 != sizeof ( TYPE_14 ) || VAR_42 == VAR_43 || * VAR_44 != sizeof ( TYPE_15 ) ) { VAR_45 = - VAR_46 ; goto VAR_47 ; } * ( TYPE_16 * ) VAR_48 = METHOD_5 ( VAR_49 , ( TYPE_17 * ) VAR_50 ) ; break ; case VAR_51 : if ( VAR_52 == VAR_53 || * VAR_54 != sizeof ( TYPE_18 ) ) { VAR_55 = - VAR_56 ; goto VAR_57 ; } if ( ! VAR_58 -> VAR_59 ) { VAR_60 = - VAR_61 ; goto VAR_62 ; } METHOD_6 ( VAR_63 , ( TYPE_19 * ) VAR_64 ) ; break ; case VAR_65 : if ( VAR_66 -> VAR_67 . METHOD_7 ) VAR_68 -> VAR_69 . METHOD_8 ( VAR_70 ) ; break ; case VAR_71 : if ( VAR_72 == VAR_73 || * VAR_74 != sizeof ( TYPE_20 ) ) { VAR_75 = - VAR_76 ; goto VAR_77 ; } if ( VAR_78 -> VAR_79 != VAR_80 ) { VAR_81 = - VAR_82 ; goto VAR_83 ; } VAR_84 -> VAR_85 = VAR_86 ; if ( VAR_87 -> VAR_88 . METHOD_9 ) VAR_89 -> VAR_90 . METHOD_10 ( VAR_91 ) ; METHOD_11 ( ""%sEFFECT_CMD_ENABLE"" , VAR_92 ) ; * ( TYPE_21 * ) VAR_93 = 0 ; break ; case VAR_94 : if ( VAR_95 == VAR_96 || * VAR_97 != sizeof ( TYPE_22 ) ) { VAR_98 = - VAR_99 ; goto VAR_100 ; } if ( VAR_101 -> VAR_102 != VAR_103 ) { VAR_104 = - VAR_105 ; goto VAR_106 ; } VAR_107 -> VAR_108 = VAR_109 ; if ( VAR_110 -> VAR_111 . METHOD_12 ) VAR_112 -> VAR_113 . METHOD_13 ( VAR_114 ) ; METHOD_14 ( ""%sEFFECT_CMD_DISABLE"" , VAR_115 ) ; * ( TYPE_23 * ) VAR_116 = 0 ; break ; case VAR_117 : { if ( VAR_118 == VAR_119 || VAR_120 < ( TYPE_24 ) ( sizeof ( TYPE_25 ) + sizeof ( TYPE_26 ) ) || VAR_121 == VAR_122 || * VAR_123 < ( TYPE_27 ) ( sizeof ( TYPE_28 ) + sizeof ( TYPE_29 ) + sizeof ( VAR_124 ) ) ) { VAR_125 = - VAR_126 ; METHOD_15 ( ""EFFECT_CMD_GET_PARAMinvalidcommandcmdSize%d*replySize%d"" , VAR_127 , * VAR_128 ) ; goto VAR_129 ; } if ( ! VAR_130 -> VAR_131 ) { VAR_132 = - VAR_133 ; goto VAR_134 ; } TYPE_30 * VAR_135 = ( TYPE_31 * ) VAR_136 ; METHOD_16 ( VAR_137 , VAR_138 , sizeof ( TYPE_32 ) + VAR_139 -> VAR_140 ) ; TYPE_33 * VAR_141 = ( TYPE_34 * ) VAR_142 ; if ( VAR_143 -> VAR_144 . METHOD_17 ) VAR_145 -> VAR_146 . METHOD_18 ( VAR_147 , VAR_148 , VAR_149 ) ; } break ; case VAR_150 : { if ( VAR_151 == VAR_152 || VAR_153 < ( TYPE_35 ) ( sizeof ( TYPE_36 ) + sizeof ( TYPE_37 ) + sizeof ( VAR_154 ) ) || ( ( TYPE_41 * ) VAR_249 ) -> VAR_140 > * VAR_250 - sizeof ( TYPE_41 ) || VAR_155 == VAR_156 || * VAR_157 != sizeof ( TYPE_38 ) ) { VAR_158 = - VAR_159 ; METHOD_19 ( ""EFFECT_CMD_SET_PARAMinvalidcommandcmdSize%d*replySize%d"" , VAR_160 , * VAR_161 ) ; goto VAR_162 ; } * ( TYPE_39 * ) VAR_163 = 0 ; TYPE_40 * VAR_164 = ( TYPE_41 * ) VAR_165 ; if ( VAR_166 -> VAR_167 . METHOD_20 ) * ( TYPE_42 * ) VAR_168 = VAR_169 -> VAR_170 . METHOD_21 ( VAR_171 , VAR_172 , * VAR_173 ) ; } break ; case VAR_174 : { TYPE_43 VAR_175 ; METHOD_22 ( ""\\tEFFECT_CMD_SET_DEVICEstart"" ) ; if ( VAR_176 == VAR_177 || VAR_178 < sizeof ( TYPE_44 ) ) { VAR_179 = - VAR_180 ; METHOD_23 ( ""EFFECT_CMD_SET_DEVICEinvalidcommandcmdSize%d"" , VAR_181 ) ; goto VAR_182 ; } VAR_183 = * ( TYPE_45 * ) VAR_184 ; if ( VAR_185 -> VAR_186 . METHOD_24 ) VAR_187 -> VAR_188 . METHOD_25 ( VAR_189 , VAR_190 ) ; } break ; case VAR_191 : case VAR_192 : break ; case VAR_193 : { VAR_194 * VAR_195 ; if ( VAR_196 != sizeof ( TYPE_46 ) || VAR_197 == VAR_198 || VAR_199 == VAR_200 || * VAR_201 != sizeof ( TYPE_47 ) ) { METHOD_26 ( ""%sEFFECT_CMD_OFFLOADbadformat"" , VAR_202 ) ; VAR_203 = - VAR_204 ; break ; } TYPE_48 * VAR_205 = ( TYPE_49 * ) VAR_206 ; METHOD_27 ( ""%sEFFECT_CMD_OFFLOADoffload%doutput%d"" , VAR_207 , VAR_208 -> VAR_209 , VAR_210 -> VAR_211 ) ; * ( TYPE_50 * ) VAR_212 = 0 ; VAR_213 -> VAR_214 = VAR_215 -> VAR_216 ; if ( VAR_217 -> VAR_218 == VAR_219 -> VAR_220 ) break ; VAR_221 = METHOD_28 ( VAR_222 -> VAR_223 ) ; if ( VAR_224 != VAR_225 ) METHOD_29 ( VAR_226 , VAR_227 ) ; VAR_228 -> VAR_229 = VAR_230 -> VAR_231 ; VAR_232 = METHOD_30 ( VAR_233 -> VAR_234 ) ; if ( VAR_235 != VAR_236 ) METHOD_31 ( VAR_237 , VAR_238 ) ; } break ; default : if ( VAR_239 >= VAR_240 && VAR_241 -> VAR_242 . METHOD_32 ) VAR_243 = VAR_244 -> VAR_245 . METHOD_33 ( VAR_246 , VAR_247 , VAR_248 , VAR_249 , VAR_250 , VAR_251 ) ; else { METHOD_34 ( ""%sinvalidcommand%d"" , VAR_252 , VAR_253 ) ; VAR_254 = - VAR_255 ; } break ; } VAR_256 : METHOD_35 ( & VAR_257 ) ; return VAR_258 ; }",300
301,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; if ( VAR_2 -> VAR_3 )  return - VAR_4 ;  VAR_5 = METHOD_1 ( ""_pid"" , VAR_6 -> VAR_7 , VAR_8 -> VAR_9 , VAR_10 , VAR_11 | VAR_12 , VAR_13 , VAR_14 , VAR_15 ) ; if ( METHOD_2 ( VAR_16 ) ) return METHOD_3 ( VAR_17 ) ; VAR_18 -> VAR_19 = VAR_20 ; return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; if ( VAR_2 -> VAR_3 ) return - VAR_4 ; VAR_5 = METHOD_1 ( ""_pid"" , VAR_6 -> VAR_7 , VAR_8 -> VAR_9 , VAR_10 , VAR_11 | VAR_12 , VAR_13 , VAR_14 , VAR_15 ) ; if ( METHOD_2 ( VAR_16 ) ) return METHOD_3 ( VAR_17 ) ; VAR_18 -> VAR_19 = VAR_20 ; return 0 ; }",301
302,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 . VAR_5 ) ; unsigned VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 . VAR_9 ) ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , VAR_13 ) ; METHOD_4 ( VAR_14 -> VAR_15 . VAR_16 , VAR_17 ) ; METHOD_5 ( VAR_18 -> VAR_19 . VAR_20 , VAR_21 -> VAR_22 . VAR_23 ) ;  METHOD_6 ( ( TYPE_3 * ) & VAR_24 ) ;  return VAR_25 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 . VAR_5 ) ; unsigned VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 . VAR_9 ) ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , VAR_13 ) ; METHOD_4 ( VAR_14 -> VAR_15 . VAR_16 , VAR_17 ) ; METHOD_5 ( VAR_18 -> VAR_19 . VAR_20 , VAR_21 -> VAR_22 . VAR_23 ) ; METHOD_6 ( ( TYPE_3 * ) VAR_24 ) ; return VAR_25 ; }",302
303,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 , struct STRUCT_OR_UNION_2 * * VAR_5 ) { TYPE_4 VAR_6 = VAR_7 -> VAR_8 & VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = METHOD_1 ( VAR_11 ) ; TYPE_5 VAR_12 ; VAR_13 * VAR_14 ; TYPE_6 VAR_15 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; if ( ! * VAR_16 ) { VAR_17 = - VAR_18 ; STRUCT_OR_UNION_6 = METHOD_2 ( VAR_19 , VAR_20 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 ) ) goto VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_8 , ( const TYPE_7 TYPE_8 * ) VAR_23 , METHOD_5 ( VAR_24 ) , VAR_25 ) ; if ( METHOD_6 ( VAR_26 ) ) { VAR_27 = - VAR_28 ; * VAR_29 = STRUCT_OR_UNION_9 ; goto VAR_30 ; } } else { STRUCT_OR_UNION_10 = * VAR_31 ; * VAR_32 = VAR_33 ; } METHOD_7 ( STRUCT_OR_UNION_11 ) ; METHOD_8 ( STRUCT_OR_UNION_12 ) ; if ( VAR_34 ) { struct STRUCT_OR_UNION_13 * VAR_35 = VAR_36 -> VAR_37 -> VAR_38 ; TYPE_9 VAR_39 = METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = METHOD_10 ( STRUCT_OR_UNION_14 , VAR_44 , VAR_45 ) ; if ( VAR_46 ) goto VAR_47 ; } VAR_48 = METHOD_11 ( VAR_49 , VAR_50 , VAR_51 ) ; METHOD_12 ( VAR_52 ) ; VAR_53 = - VAR_54 ; if ( ! METHOD_13 ( METHOD_14 ( VAR_55 ) ) ) goto VAR_56 ; if ( VAR_57 ) { METHOD_15 ( STRUCT_OR_UNION_15 , VAR_58 ) ; } else { METHOD_16 ( STRUCT_OR_UNION_16 ) ; METHOD_17 ( STRUCT_OR_UNION_17 , VAR_59 , VAR_60 ) ; } VAR_61 = METHOD_18 ( VAR_62 , STRUCT_OR_UNION_18 , VAR_63 -> VAR_64 & VAR_65 ) ; if ( VAR_66 -> VAR_67 & VAR_68 ) VAR_69 = METHOD_19 ( VAR_70 ) ; VAR_71 = METHOD_20 ( VAR_72 ) ; METHOD_21 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; ( TYPE_10 ) METHOD_22 ( VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 -> VAR_82 & VAR_83 ) ; METHOD_23 ( METHOD_24 ( VAR_84 ) , VAR_85 ) ; METHOD_25 ( VAR_86 , VAR_87 , VAR_88 ) ; METHOD_26 ( VAR_89 ) ; if ( VAR_90 ) METHOD_27 ( STRUCT_OR_UNION_19 ) ; VAR_91 = 0 ; VAR_92 : return VAR_93 ; VAR_94 : METHOD_28 ( VAR_95 ) ;  VAR_96 :  if ( VAR_97 ) METHOD_29 ( STRUCT_OR_UNION_20 ) ; METHOD_30 ( STRUCT_OR_UNION_21 ) ; goto VAR_98 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , unsigned TYPE_2 VAR_3 , unsigned TYPE_3 VAR_4 , struct STRUCT_OR_UNION_2 * * VAR_5 ) { TYPE_4 VAR_6 = VAR_7 -> VAR_8 & VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = METHOD_1 ( VAR_11 ) ; TYPE_5 VAR_12 ; VAR_13 * VAR_14 ; TYPE_6 VAR_15 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ; if ( ! * VAR_16 ) { VAR_17 = - VAR_18 ; STRUCT_OR_UNION_6 = METHOD_2 ( VAR_19 , VAR_20 , 0 ) ; if ( METHOD_3 ( STRUCT_OR_UNION_7 ) ) goto VAR_21 ; VAR_22 = METHOD_4 ( STRUCT_OR_UNION_8 , ( const TYPE_7 TYPE_8 * ) VAR_23 , METHOD_5 ( VAR_24 ) , VAR_25 ) ; if ( METHOD_6 ( VAR_26 ) ) { VAR_27 = - VAR_28 ; * VAR_29 = STRUCT_OR_UNION_9 ; goto VAR_30 ; } } else { STRUCT_OR_UNION_10 = * VAR_31 ; * VAR_32 = VAR_33 ; } METHOD_7 ( STRUCT_OR_UNION_11 ) ; METHOD_8 ( STRUCT_OR_UNION_12 ) ; if ( VAR_34 ) { struct STRUCT_OR_UNION_13 * VAR_35 = VAR_36 -> VAR_37 -> VAR_38 ; TYPE_9 VAR_39 = METHOD_9 ( VAR_40 , VAR_41 , VAR_42 ) ; VAR_43 = METHOD_10 ( STRUCT_OR_UNION_14 , VAR_44 , VAR_45 ) ; if ( VAR_46 ) goto VAR_47 ; } VAR_48 = METHOD_11 ( VAR_49 , VAR_50 , VAR_51 ) ; METHOD_12 ( VAR_52 ) ; VAR_53 = - VAR_54 ; if ( ! METHOD_13 ( METHOD_14 ( VAR_55 ) ) ) goto VAR_56 ; if ( VAR_57 ) { METHOD_15 ( STRUCT_OR_UNION_15 , VAR_58 ) ; } else { METHOD_16 ( STRUCT_OR_UNION_16 ) ; METHOD_17 ( STRUCT_OR_UNION_17 , VAR_59 , VAR_60 ) ; } VAR_61 = METHOD_18 ( VAR_62 , STRUCT_OR_UNION_18 , VAR_63 -> VAR_64 & VAR_65 ) ; if ( VAR_66 -> VAR_67 & VAR_68 ) VAR_69 = METHOD_19 ( VAR_70 ) ; VAR_71 = METHOD_20 ( VAR_72 ) ; METHOD_21 ( VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; ( TYPE_10 ) METHOD_22 ( VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 -> VAR_82 & VAR_83 ) ; METHOD_23 ( METHOD_24 ( VAR_84 ) , VAR_85 ) ; METHOD_25 ( VAR_86 , VAR_87 , VAR_88 ) ; METHOD_26 ( VAR_89 ) ; if ( VAR_90 ) METHOD_27 ( STRUCT_OR_UNION_19 ) ; VAR_91 = 0 ; VAR_92 : return VAR_93 ; VAR_94 : METHOD_28 ( VAR_95 ) ; if ( VAR_97 ) METHOD_29 ( STRUCT_OR_UNION_21 ) ; VAR_96 : METHOD_30 ( STRUCT_OR_UNION_21 ) ; goto VAR_98 ; }",303
304,static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 * VAR_5 ; while ( ( VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 -> VAR_9 . VAR_10 ) ) != VAR_11 ) { VAR_12 = ( TYPE_5 * ) VAR_13 -> VAR_14 ; if ( VAR_15 -> VAR_16 . VAR_17 ) { METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 ) ; } METHOD_3 ( VAR_21 -> VAR_22 ) ; METHOD_4 ( VAR_23 ) ; } while ( ( VAR_24 = METHOD_5 ( VAR_25 -> VAR_26 -> VAR_27 . VAR_28 ) ) != VAR_29 ) { VAR_30 = ( TYPE_6 * ) VAR_31 -> VAR_32 ; if ( VAR_33 -> VAR_34 . VAR_35 ) { METHOD_6 ( VAR_36 -> VAR_37 . VAR_38 ) ; } METHOD_7 ( VAR_39 -> VAR_40 ) ; METHOD_8 ( VAR_41 ) ; } while ( ( VAR_42 = METHOD_9 ( VAR_43 -> VAR_44 -> VAR_45 ) ) != VAR_46 ) { VAR_47 = ( TYPE_7 * ) VAR_48 -> VAR_49 ; METHOD_10 ( VAR_50 -> VAR_51 ) ; METHOD_11 ( VAR_52 ) ; METHOD_12 ( VAR_53 ) ; } while ( ( VAR_54 = METHOD_13 ( VAR_55 -> VAR_56 -> VAR_57 ) ) != VAR_58 ) { VAR_59 = ( TYPE_8 * ) VAR_60 -> VAR_61 ; METHOD_14 ( VAR_62 -> VAR_63 ) ; METHOD_15 ( VAR_64 ) ; METHOD_16 ( VAR_65 ) ; } while ( ( VAR_66 = METHOD_17 ( VAR_67 -> VAR_68 -> VAR_69 . VAR_70 ) ) != VAR_71 ) {  VAR_72 = ( TYPE_9 * ) VAR_73 -> VAR_74 ;  METHOD_18 ( VAR_75 -> VAR_76 ) ; METHOD_19 ( VAR_77 ) ; METHOD_20 ( VAR_78 ) ; } },static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 * VAR_5 ; while ( ( VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 -> VAR_9 . VAR_10 ) ) != VAR_11 ) { VAR_12 = ( TYPE_5 * ) VAR_13 -> VAR_14 ; if ( VAR_15 -> VAR_16 . VAR_17 ) { METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 ) ; } METHOD_3 ( VAR_21 -> VAR_22 ) ; METHOD_4 ( VAR_23 ) ; } while ( ( VAR_24 = METHOD_5 ( VAR_25 -> VAR_26 -> VAR_27 . VAR_28 ) ) != VAR_29 ) { VAR_30 = ( TYPE_6 * ) VAR_31 -> VAR_32 ; if ( VAR_33 -> VAR_34 . VAR_35 ) { METHOD_6 ( VAR_36 -> VAR_37 . VAR_38 ) ; } METHOD_7 ( VAR_39 -> VAR_40 ) ; METHOD_8 ( VAR_41 ) ; } while ( ( VAR_42 = METHOD_9 ( VAR_43 -> VAR_44 -> VAR_45 ) ) != VAR_46 ) { VAR_47 = ( TYPE_7 * ) VAR_48 -> VAR_49 ; METHOD_10 ( VAR_50 -> VAR_51 ) ; METHOD_11 ( VAR_52 ) ; METHOD_12 ( VAR_53 ) ; } while ( ( VAR_54 = METHOD_13 ( VAR_55 -> VAR_56 -> VAR_57 ) ) != VAR_58 ) { VAR_59 = ( TYPE_8 * ) VAR_60 -> VAR_61 ; METHOD_14 ( VAR_62 -> VAR_63 ) ; METHOD_15 ( VAR_64 ) ; METHOD_16 ( VAR_65 ) ; } while ( ( VAR_66 = METHOD_17 ( VAR_67 -> VAR_68 -> VAR_69 . VAR_70 ) ) != VAR_71 ) { VAR_36 = ( TYPE_6 * ) VAR_78 -> VAR_74 ; if ( VAR_36 -> VAR_37 . VAR_38 ) { METHOD_19 ( VAR_36 -> VAR_37 . VAR_38 ) ; } METHOD_19 ( VAR_78 -> VAR_74 ) ; METHOD_20 ( VAR_78 ) ; } },304
305,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 , TYPE_2 * VAR_4 ) { struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_5 * VAR_11 = VAR_12 -> VAR_13 ; struct STRUCT_OR_UNION_6 * VAR_14 , VAR_15 ;  struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ;  struct STRUCT_OR_UNION_9 * VAR_16 = VAR_17 ;  TYPE_3 VAR_18 ;   TYPE_4 VAR_19 = 500 , VAR_20 = - 1 , VAR_21 , VAR_22 , VAR_23 ;  TYPE_5 VAR_24 ; TYPE_6 VAR_25 [ 64 ] ; const TYPE_7 * VAR_26 = VAR_27 ; if ( VAR_28 -> VAR_29 != VAR_30 ) return METHOD_1 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ;  if ( ( STRUCT_OR_UNION_10 = METHOD_2 ( VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) == VAR_39 ) {  VAR_40 = 416 ; ( TYPE_8 ) METHOD_3 ( VAR_41 , sizeof ( VAR_42 ) , ""bytes*/%lld"" , VAR_43 -> VAR_44 ) ; VAR_45 = VAR_46 ; goto VAR_47 ; } if ( ( VAR_48 = METHOD_4 ( VAR_49 , VAR_50 ) ) == - 1 ) goto VAR_51 ; VAR_52 = METHOD_5 ( VAR_53 , VAR_54 , VAR_55 ) ;  if ( ( VAR_56 = METHOD_6 ( ) ) == VAR_57 ) {  VAR_58 = ""failedtoallocatefilebuffer"" ; goto VAR_59 ; } if ( VAR_60 == 1 ) {  ( TYPE_9 ) METHOD_7 ( VAR_61 , sizeof ( VAR_62 ) ,  ""bytes%lld-%lld/%lld"" , STRUCT_OR_UNION_11 -> VAR_63 , STRUCT_OR_UNION_12 -> VAR_64 , VAR_65 -> VAR_66 ) ; if ( METHOD_8 ( & VAR_67 -> VAR_68 , ""Content-Range"" , VAR_69 ) == VAR_70 ) goto VAR_71 ;  VAR_72 = STRUCT_OR_UNION_13 -> VAR_73 - STRUCT_OR_UNION_14 -> VAR_74 + 1 ;   if ( METHOD_9 ( VAR_75 , VAR_76 , STRUCT_OR_UNION_15 ) == 0 )  goto VAR_77 ; } else {  VAR_78 = 0 ;  VAR_79 = METHOD_10 ( ) ; while ( VAR_80 -- ) { if ( ( VAR_81 = METHOD_11 ( VAR_82 , ""\\r\\n--%ud\\r\\n"" , VAR_83 ) ) == - 1 ) goto VAR_84 ;  VAR_85 += VAR_86 ;  if ( ( VAR_87 = METHOD_12 ( VAR_88 , ""Content-Type:%s/%s\\r\\n"" , VAR_89 -> STRUCT_OR_UNION_16 , VAR_90 -> VAR_91 ) ) == - 1 ) goto VAR_92 ; VAR_93 += VAR_94 ; if ( ( VAR_95 = METHOD_13 ( VAR_96 , ""Content-Range:bytes%lld-%lld/%lld\\r\\n\\r\\n"" , STRUCT_OR_UNION_17 -> VAR_97 , STRUCT_OR_UNION_18 -> VAR_98 , VAR_99 -> VAR_100 ) ) == - 1 ) goto VAR_101 ; VAR_102 += VAR_103 ; if ( METHOD_14 ( VAR_104 , VAR_105 , STRUCT_OR_UNION_19 ) == 0 ) goto VAR_106 ; VAR_107 += STRUCT_OR_UNION_20 -> VAR_108 - STRUCT_OR_UNION_21 -> VAR_109 + 1 ;  STRUCT_OR_UNION_22 ++ ;  }  if ( ( VAR_110 = METHOD_15 ( VAR_111 , ""\\r\\n--%ud--\\r\\n"" ,  VAR_112 ) ) == - 1 ) goto VAR_113 ;  VAR_114 += VAR_115 ;  ( TYPE_10 ) METHOD_16 ( VAR_116 . STRUCT_OR_UNION_23 , ""multipart"" , sizeof ( VAR_117 . STRUCT_OR_UNION_24 ) ) ; ( TYPE_11 ) METHOD_17 ( VAR_118 . VAR_119 , sizeof ( VAR_120 . VAR_121 ) ,  ""byteranges;boundary=%ud"" , VAR_122 ) ;  VAR_123 = & VAR_124 ; }  METHOD_18 ( VAR_125 ) ;  VAR_126 = - 1 ; VAR_127 = METHOD_19 ( VAR_128 , 206 , VAR_129 , VAR_130 , METHOD_20 ( METHOD_21 ( VAR_131 ) , VAR_132 -> VAR_133 . VAR_134 ) ) ; switch ( VAR_135 ) { case - 1 : goto VAR_136 ; case 0 :  goto VAR_137 ;  default : break ; }  if ( METHOD_22 ( VAR_138 , VAR_139 ) == - 1 )  goto VAR_140 ;  METHOD_23 ( VAR_141 -> VAR_142 , VAR_143 | VAR_144 ) ;   if ( VAR_145 -> VAR_146 )  VAR_147 -> VAR_148 = VAR_149 ; else VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = 0 ; VAR_155 : METHOD_24 ( VAR_156 ) ; METHOD_25 ( VAR_157 ) ; return ( 0 ) ; VAR_158 : METHOD_26 ( VAR_159 -> VAR_160 , VAR_161 | VAR_162 ) ; METHOD_27 ( VAR_163 -> VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 :  if ( VAR_169 != VAR_170 )  METHOD_28 ( VAR_171 ) ; if ( VAR_172 != - 1 ) METHOD_29 ( VAR_173 ) ; if ( VAR_174 == VAR_175 ) VAR_176 = METHOD_30 ( VAR_177 ) ; METHOD_31 ( VAR_178 , VAR_179 , VAR_180 ) ; return ( - 1 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 , TYPE_2 * VAR_4 ) { struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_5 * VAR_11 = VAR_12 -> VAR_13 ; struct STRUCT_OR_UNION_6 * VAR_14 , VAR_15 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ; struct STRUCT_OR_UNION_9 * VAR_16 = VAR_17 ; TYPE_3 VAR_18 ; TYPE_4 VAR_19 = 500 , VAR_20 = - 1 , VAR_21 , VAR_22 , VAR_23 ; TYPE_5 VAR_24 ; TYPE_6 VAR_25 [ 64 ] ; const TYPE_7 * VAR_26 = VAR_27 ; if ( VAR_28 -> VAR_29 != VAR_30 ) return METHOD_1 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; if ( ( STRUCT_OR_UNION_10 = METHOD_2 ( VAR_35 , VAR_36 -> VAR_37 , & VAR_38 ) ) == VAR_39 ) { VAR_40 = 416 ; ( TYPE_8 ) METHOD_3 ( VAR_41 , sizeof ( VAR_42 ) , ""bytes*/%lld"" , VAR_43 -> VAR_44 ) ; VAR_45 = VAR_46 ; goto VAR_47 ; } if ( ( VAR_48 = METHOD_4 ( VAR_49 , VAR_50 ) ) == - 1 ) goto VAR_51 ; VAR_52 = METHOD_5 ( VAR_53 , VAR_54 , VAR_55 ) ; if ( ( VAR_56 = METHOD_6 ( ) ) == VAR_57 ) { VAR_58 = ""failedtoallocatefilebuffer"" ; goto VAR_59 ; } if ( VAR_60 == 1 ) { STRUCT_OR_UNION_22 = & VAR_181 -> STRUCT_OR_UNION_22 [ 0 ] ; ( TYPE_9 ) METHOD_7 ( VAR_61 , sizeof ( VAR_62 ) , ""bytes%lld-%lld/%lld"" , STRUCT_OR_UNION_11 -> VAR_63 , STRUCT_OR_UNION_12 -> VAR_64 , VAR_65 -> VAR_66 ) ; if ( METHOD_8 ( & VAR_67 -> VAR_68 , ""Content-Range"" , VAR_69 ) == VAR_70 ) goto VAR_71 ; VAR_72 = STRUCT_OR_UNION_13 -> VAR_73 - STRUCT_OR_UNION_14 -> VAR_74 + 1 ; } else { VAR_78 = 0 ; VAR_79 = METHOD_10 ( ) ; while ( VAR_80 -- ) { if ( ( VAR_81 = METHOD_11 ( VAR_82 , ""\\r\\n--%ud\\r\\n"" , VAR_83 ) ) == - 1 ) goto VAR_84 ; VAR_85 += VAR_86 ; if ( ( VAR_87 = METHOD_12 ( VAR_88 , ""Content-Type:%s/%s\\r\\n"" , VAR_89 -> STRUCT_OR_UNION_16 , VAR_90 -> VAR_91 ) ) == - 1 ) goto VAR_92 ; VAR_93 += VAR_94 ; if ( ( VAR_95 = METHOD_13 ( VAR_96 , ""Content-Range:bytes%lld-%lld/%lld\\r\\n\\r\\n"" , STRUCT_OR_UNION_17 -> VAR_97 , STRUCT_OR_UNION_18 -> VAR_98 , VAR_99 -> VAR_100 ) ) == - 1 ) goto VAR_101 ; VAR_102 += VAR_103 ; if ( METHOD_14 ( VAR_104 , VAR_105 , STRUCT_OR_UNION_19 ) == 0 ) goto VAR_106 ; VAR_107 += STRUCT_OR_UNION_20 -> VAR_108 - STRUCT_OR_UNION_21 -> VAR_109 + 1 ; } if ( ( VAR_110 = METHOD_15 ( VAR_111 , ""\\r\\n--%ud--\\r\\n"" , VAR_112 ) ) == - 1 ) goto VAR_113 ; VAR_114 += VAR_115 ; ( TYPE_10 ) METHOD_16 ( VAR_116 . STRUCT_OR_UNION_23 , ""multipart"" , sizeof ( VAR_117 . STRUCT_OR_UNION_24 ) ) ; ( TYPE_11 ) METHOD_17 ( VAR_118 . VAR_119 , sizeof ( VAR_120 . VAR_121 ) , ""byteranges;boundary=%ud"" , VAR_122 ) ; VAR_123 = & VAR_124 ; } METHOD_18 ( VAR_125 ) ; VAR_126 = - 1 ; VAR_127 = METHOD_19 ( VAR_128 , 206 , VAR_129 , VAR_130 , METHOD_20 ( METHOD_21 ( VAR_131 ) , VAR_132 -> VAR_133 . VAR_134 ) ) ; switch ( VAR_135 ) { case - 1 : goto VAR_136 ; case 0 : METHOD_29 ( VAR_173 ) ; goto VAR_137 ; default : break ; } if ( METHOD_22 ( VAR_138 , VAR_139 ) == - 1 ) goto VAR_140 ; METHOD_23 ( VAR_141 -> VAR_142 , VAR_143 | VAR_144 ) ; if ( VAR_145 -> VAR_146 ) VAR_147 -> VAR_148 = VAR_149 ; else VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = 0 ; VAR_155 : METHOD_24 ( VAR_156 ) ; METHOD_25 ( VAR_157 ) ; return ( 0 ) ; VAR_158 : METHOD_26 ( VAR_159 -> VAR_160 , VAR_161 | VAR_162 ) ; METHOD_27 ( VAR_163 -> VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 : if ( VAR_169 != VAR_170 ) METHOD_28 ( VAR_171 ) ; if ( VAR_172 != - 1 ) METHOD_29 ( VAR_173 ) ; if ( VAR_174 == VAR_175 ) VAR_176 = METHOD_30 ( VAR_177 ) ; METHOD_31 ( VAR_178 , VAR_179 , VAR_180 ) ; return ( - 1 ) ; }",305
306,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; TYPE_2 VAR_4 ; if ( ! VAR_5 ) return - VAR_6 ;  VAR_7 -> VAR_8 = VAR_9 ;  switch ( VAR_10 -> VAR_11 ) { case 1 : VAR_12 -> VAR_13 = VAR_14 ; VAR_15 -> VAR_16 = VAR_17 ; break ; case 2 : VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 = VAR_23 ; break ; case 4 : VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; break ; default : METHOD_1 ( VAR_30 -> VAR_31 , ""Invalidregistersize:%d\\n"" , VAR_32 -> VAR_33 ) ; return - VAR_34 ; } for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 ; VAR_39 ++ ) { if ( METHOD_2 ( VAR_40 + VAR_41 * VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) == VAR_47 ) { while ( VAR_48 -- ) METHOD_3 ( VAR_49 + VAR_50 * VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; return - VAR_55 ; } }  return 0 ;  }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 = VAR_2 -> VAR_3 ; TYPE_2 VAR_4 ; if ( ! VAR_5 ) return - VAR_6 ; VAR_7 -> VAR_8 = VAR_9 ; switch ( VAR_10 -> VAR_11 ) { case 1 : VAR_12 -> VAR_13 = VAR_14 ; VAR_15 -> VAR_16 = VAR_17 ; break ; case 2 : VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 = VAR_23 ; break ; case 4 : VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; break ; default : METHOD_1 ( VAR_30 -> VAR_31 , ""Invalidregistersize:%d\\n"" , VAR_32 -> VAR_33 ) ; return - VAR_34 ; } for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 ; VAR_39 ++ ) { if ( METHOD_2 ( VAR_40 + VAR_41 * VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 ) == VAR_47 ) { while ( VAR_48 -- ) METHOD_3 ( VAR_49 + VAR_50 * VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; return - VAR_55 ; } } VAR_53 -> VAR_8 = VAR_9 ; return 0 ; }",306
307,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , const TYPE_5 * VAR_4 ) { METHOD_1 ( VAR_5 , ""enter"" ) ; const TYPE_6 * VAR_6 = ""<scripttype=\\""text/javascript\\"">\\n"" ""vartargetOrigin=\'%s\';\\n"" ""varmessage=\'%s\'+\'\'+\'%s\';\\n"" ""\tvartimerID;\\n"" ""\\n"" ""functioncheckSession(){\\n"" ""console.debug(\'checkSession:posting\'+message+\'to\'+targetOrigin);\\n"" ""varwin=window.parent.document.getElementById(\'%s\').contentWindow;\\n"" ""win.postMessage(message,targetOrigin);\\n"" ""}\\n"" ""\\n"" ""functionsetTimer(){\\n"" ""checkSession();\\n""  ""timerID=setInterval(\'checkSession()\',%s);\\n""  ""}\\n"" ""\\n"" ""functionreceiveMessage(e){\\n"" ""console.debug(\'receiveMessage:\'+e.data+\'from\'+e.origin);\\n"" ""if(e.origin!==targetOrigin){\\n"" ""console.debug(\'receiveMessage:cross-sitescriptingattack?\');\\n"" ""return;\\n"" ""}\\n"" ""if(e.data!=\'unchanged\'){\\n"" ""clearInterval(timerID);\\n"" ""if(e.data==\'changed\'){\\n"" ""\t\twindow.location.href=\'%s?session=check\';\\n"" ""}else{\\n"" ""\t\twindow.location.href=\'%s?session=logout\';\\n"" ""}\\n"" ""}\\n"" ""}\\n"" ""\\n"" ""window.addEventListener(\'message\',receiveMessage,false);\\n"" ""\\n"" ""</script>\\n"" ; TYPE_7 * VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 ) ; TYPE_8 VAR_11 ; METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 , & VAR_15 ) ; TYPE_9 * VAR_16 = METHOD_4 ( VAR_17 , VAR_18 . VAR_19 ) ; * VAR_20 = '\\0' ; const TYPE_10 * VAR_21 = ""openidc-op"" ; const TYPE_11 * VAR_22 = METHOD_5 ( VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) { METHOD_6 ( VAR_27 , ""nosession_statefoundinthesession;theOPdoesprobablynotsupportsessionmanagement!?"" ) ; return VAR_28 ; } TYPE_12 * VAR_29 = VAR_30 ; METHOD_7 ( VAR_31 , ""poll"" , & VAR_32 ) ;  if ( VAR_33 == VAR_34 )  VAR_35 = ""3000"" ; const TYPE_13 * VAR_36 = METHOD_8 ( VAR_37 , VAR_38 ) ; VAR_39 = METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 , VAR_43 , VAR_44 ,  VAR_45 , VAR_46 , VAR_47 , VAR_48 ,  VAR_49 ) ; return METHOD_10 ( VAR_50 , VAR_51 , VAR_52 , ""setTimer"" , VAR_53 , VAR_54 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , const TYPE_5 * VAR_4 ) { METHOD_1 ( VAR_5 , ""enter"" ) ; const TYPE_6 * VAR_6 = ""<scripttype=\\""text/javascript\\"">\\n"" ""vartargetOrigin=\'%s\';\\n"" ""varmessage=\'%s\'+\'\'+\'%s\';\\n"" ""\tvartimerID;\\n"" ""\\n"" ""functioncheckSession(){\\n"" ""console.debug(\'checkSession:posting\'+message+\'to\'+targetOrigin);\\n"" ""varwin=window.parent.document.getElementById(\'%s\').contentWindow;\\n"" ""win.postMessage(message,targetOrigin);\\n"" ""}\\n"" ""\\n"" ""functionsetTimer(){\\n"" ""checkSession();\\n"" ""timerID=setInterval(\'checkSession()\',%d);\\n"" ""}\\n"" ""\\n"" ""functionreceiveMessage(e){\\n"" ""console.debug(\'receiveMessage:\'+e.data+\'from\'+e.origin);\\n"" ""if(e.origin!==targetOrigin){\\n"" ""console.debug(\'receiveMessage:cross-sitescriptingattack?\');\\n"" ""return;\\n"" ""}\\n"" ""if(e.data!=\'unchanged\'){\\n"" ""clearInterval(timerID);\\n"" ""if(e.data==\'changed\'){\\n"" ""\t\twindow.location.href=\'%s?session=check\';\\n"" ""}else{\\n"" ""\t\twindow.location.href=\'%s?session=logout\';\\n"" ""}\\n"" ""}\\n"" ""}\\n"" ""\\n"" ""window.addEventListener(\'message\',receiveMessage,false);\\n"" ""\\n"" ""</script>\\n"" ; TYPE_7 * VAR_7 = METHOD_2 ( VAR_8 -> VAR_9 , VAR_10 ) ; TYPE_8 VAR_11 ; METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 , & VAR_15 ) ; TYPE_9 * VAR_16 = METHOD_4 ( VAR_17 , VAR_18 . VAR_19 ) ; * VAR_20 = '\\0' ; const TYPE_10 * VAR_21 = ""openidc-op"" ; const TYPE_11 * VAR_22 = METHOD_5 ( VAR_23 , VAR_24 ) ; if ( VAR_25 == VAR_26 ) { METHOD_6 ( VAR_27 , ""nosession_statefoundinthesession;theOPdoesprobablynotsupportsessionmanagement!?"" ) ; return VAR_28 ; } TYPE_12 * VAR_29 = VAR_30 ; METHOD_7 ( VAR_31 , ""poll"" , & VAR_32 ) ; if ( VAR_33 == VAR_34 ) VAR_35 = ""3000"" ; const TYPE_13 * VAR_36 = METHOD_8 ( VAR_37 , VAR_38 ) ; VAR_39 = METHOD_9 ( VAR_40 -> VAR_41 , VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; return METHOD_10 ( VAR_50 , VAR_51 , VAR_52 , ""setTimer"" , VAR_53 , VAR_54 ) ; }",307
308,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 TYPE_4 , VAR_3 * VAR_4 , VAR_5 * VAR_6 TYPE_5 , TYPE_6 * * VAR_7 , TYPE_7 VAR_8 ) { TYPE_8 VAR_9 , VAR_10 ; TYPE_9 * VAR_11 ; if ( VAR_12 % 2 ) VAR_13 += 2 - ( VAR_14 % 2 ) ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ;  if ( VAR_18 <= 0 ) { if ( VAR_19 ) * VAR_20 = METHOD_2 ( """" ) ; return VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 | VAR_28 ) ; VAR_29 = ( TYPE_10 ) METHOD_4 ( VAR_30 ) ; METHOD_5 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 * 2 , VAR_36 ) ; if ( VAR_37 ) * VAR_38 = VAR_39 ; else METHOD_6 ( VAR_40 ) ; return VAR_41 + ( VAR_42 + 1 ) * 2 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 TYPE_4 , VAR_3 * VAR_4 , VAR_5 * VAR_6 TYPE_5 , TYPE_6 * * VAR_7 , TYPE_7 VAR_8 ) { TYPE_8 VAR_9 , VAR_10 ; TYPE_9 * VAR_11 ; if ( VAR_12 % 2 ) VAR_13 += 2 - ( VAR_14 % 2 ) ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ; if ( VAR_18 <= 0 ) { if ( VAR_19 ) * VAR_20 = METHOD_2 ( """" ) ; return VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 | VAR_28 ) ; VAR_29 = ( TYPE_10 ) METHOD_4 ( VAR_30 ) ; METHOD_5 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 * 2 , VAR_36 ) ; if ( VAR_37 ) * VAR_38 = VAR_39 ; else METHOD_6 ( VAR_40 ) ; return VAR_41 + ( VAR_42 + 1 ) * 2 ; }",308
309,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 TYPE_3 * VAR_2 ) { const struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_4 VAR_6 , VAR_7 ; TYPE_5 VAR_8 = VAR_9 ; if ( ! VAR_10 ) return - VAR_11 ; if ( ! VAR_12 -> METHOD_2 ) return - VAR_13 ; VAR_14 = METHOD_3 ( ) ; if ( METHOD_4 ( ! VAR_15 ) ) return - VAR_16 ; METHOD_5 ( & VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_6 ( VAR_20 ) ; if ( VAR_21 < 0 ) { VAR_22 = VAR_23 ; goto VAR_24 ; } VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = ( TYPE_6 ) VAR_29 ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ;  VAR_36 -> VAR_37 = - 1 ;  if ( VAR_38 ) { METHOD_7 ( ) ; VAR_39 -> VAR_40 = METHOD_8 ( METHOD_9 ( VAR_41 ) ) ; METHOD_10 ( ) ; if ( ! VAR_42 -> VAR_43 ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } VAR_47 -> VAR_48 = VAR_49 -> VAR_50 ; VAR_51 -> VAR_52 -> VAR_53 . VAR_54 = VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 -> VAR_59 . VAR_60 = VAR_61 -> VAR_62 ; } else { VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 -> VAR_68 . VAR_69 = VAR_70 ; METHOD_11 ( & VAR_71 -> VAR_72 -> VAR_73 . VAR_74 , 0 , sizeof ( VAR_75 ) ) ; VAR_76 -> VAR_77 -> VAR_78 . VAR_79 . VAR_80 = VAR_81 -> VAR_82 ; VAR_83 -> VAR_84 = METHOD_12 ( METHOD_13 ( VAR_85 ) ) ; } VAR_86 -> VAR_87 -> VAR_88 . VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; if ( METHOD_14 ( VAR_97 , & VAR_98 , sizeof ( VAR_99 ) ) ) { VAR_100 = - VAR_101 ; goto VAR_102 ; } VAR_103 = VAR_104 -> METHOD_15 ( VAR_105 ) ; if ( VAR_106 ) goto VAR_107 ; METHOD_16 ( & VAR_108 -> VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 -> VAR_114 ; METHOD_17 ( & VAR_115 -> VAR_116 , & VAR_117 -> VAR_118 -> VAR_119 ) ; METHOD_18 ( & VAR_120 -> VAR_121 -> VAR_122 ) ; return 0 ; VAR_123 : METHOD_19 ( VAR_124 , VAR_125 ) ; return VAR_126 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 TYPE_3 * VAR_2 ) { const struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * VAR_5 ; TYPE_4 VAR_6 , VAR_7 ; TYPE_5 VAR_8 = VAR_9 ; if ( ! VAR_10 ) return - VAR_11 ; if ( ! VAR_12 -> METHOD_2 ) return - VAR_13 ; VAR_14 = METHOD_3 ( ) ; if ( METHOD_4 ( ! VAR_15 ) ) return - VAR_16 ; METHOD_5 ( & VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_6 ( VAR_20 ) ; if ( VAR_21 < 0 ) { VAR_22 = VAR_23 ; goto VAR_24 ; } VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = ( TYPE_6 ) VAR_29 ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = - 1LL ; if ( VAR_38 ) { METHOD_7 ( ) ; VAR_39 -> VAR_40 = METHOD_8 ( METHOD_9 ( VAR_41 ) ) ; METHOD_10 ( ) ; if ( ! VAR_42 -> VAR_43 ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } VAR_47 -> VAR_48 = VAR_49 -> VAR_50 ; VAR_51 -> VAR_52 -> VAR_53 . VAR_54 = VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 -> VAR_59 . VAR_60 = VAR_61 -> VAR_62 ; } else { VAR_63 -> VAR_64 = VAR_65 ; VAR_66 -> VAR_67 -> VAR_68 . VAR_69 = VAR_70 ; METHOD_11 ( & VAR_71 -> VAR_72 -> VAR_73 . VAR_74 , 0 , sizeof ( VAR_75 ) ) ; VAR_76 -> VAR_77 -> VAR_78 . VAR_79 . VAR_80 = VAR_81 -> VAR_82 ; VAR_83 -> VAR_84 = METHOD_12 ( METHOD_13 ( VAR_85 ) ) ; } VAR_86 -> VAR_87 -> VAR_88 . VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; if ( METHOD_14 ( VAR_97 , & VAR_98 , sizeof ( VAR_99 ) ) ) { VAR_100 = - VAR_101 ; goto VAR_102 ; } VAR_103 = VAR_104 -> METHOD_15 ( VAR_105 ) ; if ( VAR_106 ) goto VAR_107 ; METHOD_16 ( & VAR_108 -> VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 -> VAR_114 ; METHOD_17 ( & VAR_115 -> VAR_116 , & VAR_117 -> VAR_118 -> VAR_119 ) ; METHOD_18 ( & VAR_120 -> VAR_121 -> VAR_122 ) ; return 0 ; VAR_123 : METHOD_19 ( VAR_124 , VAR_125 ) ; return VAR_126 ; }",309
310,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 * VAR_11 ; TYPE_7 * VAR_12 , * VAR_13 , * VAR_14 , * VAR_15 ; TYPE_8 VAR_16 , VAR_17 , VAR_18 , VAR_19 = 0 ; if ( METHOD_1 ( VAR_20 ) ) { VAR_21 = 1 ; VAR_22 = VAR_23 ; } else { VAR_24 = METHOD_2 ( VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 ) ; if ( ! VAR_30 ) { METHOD_3 ( & VAR_31 ) ; return METHOD_4 ( VAR_32 ) ; } METHOD_5 ( VAR_33 , VAR_34 ) ; } if ( VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 [ 0 ] ; VAR_40 = VAR_41 -> VAR_42 [ 0 ] ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; VAR_47 ++ ) { TYPE_9 VAR_48 = VAR_49 -> VAR_50 ; const TYPE_10 ( * VAR_51 ) [ 256 ] = ( const TYPE_11 ( * ) [ 256 ] ) VAR_52 -> VAR_53 ; VAR_54 = VAR_55 ; VAR_56 = VAR_57 ; for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; VAR_61 ++ ) { switch ( VAR_62 -> VAR_63 ) { case 4 : VAR_64 [ 3 ] = VAR_65 [ 3 ] [ VAR_66 [ 3 ] ] ; case 3 : VAR_67 [ 2 ] = VAR_68 [ 2 ] [ VAR_69 [ 2 ] ] ; case 2 : VAR_70 [ 1 ] = VAR_71 [ 1 ] [ VAR_72 [ 1 ] ] ; default : VAR_73 [ 0 ] = VAR_74 [ 0 ] [ VAR_75 [ 0 ] ] ; } VAR_76 += VAR_77 -> VAR_78 ; VAR_79 += VAR_80 -> VAR_81 ; } VAR_82 += VAR_83 -> VAR_84 [ 0 ] ; VAR_85 += VAR_86 -> VAR_87 [ 0 ] ; } } else {  for ( VAR_88 = 0 ; VAR_89 < 4 && VAR_90 -> VAR_91 [ VAR_92 ] ; VAR_93 ++ ) {  TYPE_12 VAR_94 = VAR_95 == 1 || VAR_96 == 2 ? VAR_97 -> VAR_98 : 0 ; TYPE_13 VAR_99 = VAR_100 == 1 || VAR_101 == 2 ? VAR_102 -> VAR_103 : 0 ; TYPE_14 VAR_104 = METHOD_6 ( VAR_105 -> VAR_106 , VAR_107 ) ; TYPE_15 VAR_108 = METHOD_7 ( VAR_109 -> VAR_110 , VAR_111 ) ; VAR_112 = VAR_113 -> VAR_114 [ VAR_115 ] ; VAR_116 = VAR_117 -> VAR_118 [ VAR_119 ] ; for ( VAR_120 = 0 ; VAR_121 < VAR_122 ; VAR_123 ++ ) { const TYPE_16 * VAR_124 = VAR_125 -> VAR_126 [ VAR_127 ] ; for ( VAR_128 = 0 ; VAR_129 < VAR_130 ; VAR_131 ++ ) VAR_132 [ VAR_133 ] = VAR_134 [ VAR_135 [ VAR_136 ] ] ; VAR_137 += VAR_138 -> VAR_139 [ VAR_140 ] ; VAR_141 += VAR_142 -> VAR_143 [ VAR_144 ] ; } } } if ( ! VAR_145 ) METHOD_8 ( & VAR_146 ) ; return METHOD_9 ( VAR_147 , VAR_148 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 * VAR_11 ; TYPE_7 * VAR_12 , * VAR_13 , * VAR_14 , * VAR_15 ; TYPE_8 VAR_16 , VAR_17 , VAR_18 , VAR_19 = 0 ; if ( METHOD_1 ( VAR_20 ) ) { VAR_21 = 1 ; VAR_22 = VAR_23 ; } else { VAR_24 = METHOD_2 ( VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 ) ; if ( ! VAR_30 ) { METHOD_3 ( & VAR_31 ) ; return METHOD_4 ( VAR_32 ) ; } METHOD_5 ( VAR_33 , VAR_34 ) ; } if ( VAR_35 -> VAR_36 ) { VAR_37 = VAR_38 -> VAR_39 [ 0 ] ; VAR_40 = VAR_41 -> VAR_42 [ 0 ] ; for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; VAR_47 ++ ) { TYPE_9 VAR_48 = VAR_49 -> VAR_50 ; const TYPE_10 ( * VAR_51 ) [ 256 ] = ( const TYPE_11 ( * ) [ 256 ] ) VAR_52 -> VAR_53 ; VAR_54 = VAR_55 ; VAR_56 = VAR_57 ; for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; VAR_61 ++ ) { switch ( VAR_62 -> VAR_63 ) { case 4 : VAR_64 [ 3 ] = VAR_65 [ 3 ] [ VAR_66 [ 3 ] ] ; case 3 : VAR_67 [ 2 ] = VAR_68 [ 2 ] [ VAR_69 [ 2 ] ] ; case 2 : VAR_70 [ 1 ] = VAR_71 [ 1 ] [ VAR_72 [ 1 ] ] ; default : VAR_73 [ 0 ] = VAR_74 [ 0 ] [ VAR_75 [ 0 ] ] ; } VAR_76 += VAR_77 -> VAR_78 ; VAR_79 += VAR_80 -> VAR_81 ; } VAR_82 += VAR_83 -> VAR_84 [ 0 ] ; VAR_85 += VAR_86 -> VAR_87 [ 0 ] ; } } else { for ( VAR_88 = 0 ; VAR_89 < 4 && VAR_90 -> VAR_91 [ VAR_92 ] ; VAR_93 ++ ) { TYPE_12 VAR_94 = VAR_95 == 1 || VAR_96 == 2 ? VAR_97 -> VAR_98 : 0 ; TYPE_13 VAR_99 = VAR_100 == 1 || VAR_101 == 2 ? VAR_102 -> VAR_103 : 0 ; TYPE_14 VAR_104 = METHOD_6 ( VAR_105 -> VAR_106 , VAR_107 ) ; TYPE_15 VAR_108 = METHOD_7 ( VAR_109 -> VAR_110 , VAR_111 ) ; VAR_112 = VAR_113 -> VAR_114 [ VAR_115 ] ; VAR_116 = VAR_117 -> VAR_118 [ VAR_119 ] ; for ( VAR_120 = 0 ; VAR_121 < VAR_122 ; VAR_123 ++ ) { const TYPE_16 * VAR_124 = VAR_125 -> VAR_126 [ VAR_127 ] ; for ( VAR_128 = 0 ; VAR_129 < VAR_130 ; VAR_131 ++ ) VAR_132 [ VAR_133 ] = VAR_134 [ VAR_135 [ VAR_136 ] ] ; VAR_137 += VAR_138 -> VAR_139 [ VAR_140 ] ; VAR_141 += VAR_142 -> VAR_143 [ VAR_144 ] && VAR_146 -> VAR_143 [ VAR_144 ] ; } } } if ( ! VAR_145 ) METHOD_8 ( & VAR_146 ) ; return METHOD_9 ( VAR_147 , VAR_148 ) ; }",310
311,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_2 ( VAR_6 ) ;  unsigned TYPE_3 VAR_7 ; TYPE_4 * VAR_8 = ( TYPE_5 * ) VAR_9 ; TYPE_6 VAR_10 ; VAR_11 = METHOD_3 ( VAR_12 , & VAR_13 , 0 ) ; if ( ! VAR_14 || ( * VAR_15 && ( * VAR_16 != '\\n' ) ) ) return - VAR_17 ; VAR_18 = ! ! VAR_19 ; if ( ! METHOD_4 ( VAR_20 , & VAR_21 -> VAR_22 ) || ! METHOD_5 ( VAR_23 , & VAR_24 -> VAR_25 ) || ! METHOD_6 ( VAR_26 , & VAR_27 -> VAR_28 ) ) return - VAR_29 ;  if ( VAR_30 && VAR_31 == VAR_32 -> VAR_33 &&  VAR_34 -> VAR_35 != VAR_36 -> VAR_37 )  return - VAR_38 ;   if ( VAR_39 && ! VAR_40 -> VAR_41 ) {  VAR_42 = METHOD_7 ( VAR_43 ) ; if ( VAR_44 )  return VAR_45 ;  } if ( ! VAR_46 && VAR_47 -> VAR_48 && VAR_49 -> VAR_50 == VAR_51 -> VAR_52 ) { METHOD_8 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; } VAR_57 -> VAR_58 = VAR_59 ; if ( VAR_60 -> VAR_61 ) { VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; }  return VAR_69 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_2 * VAR_5 = METHOD_2 ( VAR_6 ) ; unsigned TYPE_3 VAR_7 ; TYPE_4 * VAR_8 = ( TYPE_5 * ) VAR_9 ; TYPE_6 VAR_10 ; VAR_11 = METHOD_3 ( VAR_12 , & VAR_13 , 0 ) ; if ( ! VAR_14 || ( * VAR_15 && ( * VAR_16 != '\\n' ) ) ) return - VAR_17 ; VAR_18 = ! ! VAR_19 ; if ( ! METHOD_4 ( VAR_20 , & VAR_21 -> VAR_22 ) || ! METHOD_5 ( VAR_23 , & VAR_24 -> VAR_25 ) || ! METHOD_6 ( VAR_26 , & VAR_27 -> VAR_28 ) ) return - VAR_29 ; METHOD_9 ( ) ; VAR_65 = METHOD_2 ( VAR_67 ) ; if ( ! VAR_65 ) { VAR_45 = - VAR_29 ; goto VAR_70 ; } if ( VAR_30 && VAR_31 == VAR_32 -> VAR_33 && VAR_34 -> VAR_35 != VAR_36 -> VAR_37 ) return - VAR_38 ; goto VAR_70 ; } if ( VAR_39 && ! VAR_40 -> VAR_41 ) { VAR_42 = METHOD_7 ( VAR_43 ) ; if ( VAR_44 ) return VAR_45 ; } if ( ! VAR_46 && VAR_47 -> VAR_48 && VAR_49 -> VAR_50 == VAR_51 -> VAR_52 ) { METHOD_8 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; } VAR_57 -> VAR_58 = VAR_59 ; if ( VAR_60 -> VAR_61 ) { VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; } VAR_45 = VAR_69 ; VAR_70 : METHOD_10 ( ) ; return VAR_45 ; }",311
312,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  if ( ! VAR_1 -> VAR_2 . VAR_3 )  return - VAR_4 ; VAR_5 -> VAR_6 . VAR_7 = VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( ! VAR_1 -> VAR_2 . VAR_3 ) return - VAR_4 ; VAR_5 -> VAR_6 . VAR_7 = VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ; return 0 ; }",312
313,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , const unsigned TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { const unsigned TYPE_3 * VAR_3 = VAR_4 ; METHOD_1 ( VAR_5 , VAR_6 ) ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 = 0 ; if ( METHOD_2 ( VAR_9 ) && STRUCT_OR_UNION_3 -> VAR_10 -> METHOD_3 != VAR_11 ) { VAR_12 = METHOD_4 ( VAR_13 ) ; if ( VAR_14 ) return VAR_15 ; } METHOD_5 ( & VAR_16 -> VAR_17 ) ; METHOD_6 ( VAR_18 ) ; METHOD_7 ( & VAR_19 -> VAR_20 , & VAR_21 ) ; while ( 1 ) { METHOD_8 ( VAR_22 ) ; if ( METHOD_9 ( VAR_23 ) ) { VAR_24 = - VAR_25 ; break ; } if ( METHOD_10 ( STRUCT_OR_UNION_4 ) || ( VAR_26 -> VAR_27 && ! VAR_28 -> VAR_29 -> VAR_30 ) ) { VAR_31 = - VAR_32 ; break ; } if ( METHOD_11 ( VAR_33 ) ) { while ( VAR_34 > 0 ) { TYPE_6 VAR_35 = METHOD_12 ( VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) { if ( VAR_40 == - VAR_41 ) break ; VAR_42 = VAR_43 ; goto VAR_44 ; } VAR_45 += VAR_46 ; VAR_47 -= VAR_48 ; if ( VAR_49 == 0 ) break ; VAR_50 = * VAR_51 ; if ( METHOD_13 ( VAR_52 , VAR_53 ) < 0 ) break ; VAR_54 ++ ; VAR_55 -- ; } if ( VAR_56 -> VAR_57 -> METHOD_14 ) VAR_58 -> VAR_59 -> METHOD_15 ( VAR_60 ) ; } else {  while ( VAR_61 > 0 ) {   VAR_62 = VAR_63 -> VAR_64 -> METHOD_16 ( VAR_65 , VAR_66 , VAR_67 ) ;  if ( VAR_68 < 0 ) { VAR_69 = VAR_70 ; goto VAR_71 ; } if ( ! VAR_72 ) break ; VAR_73 += VAR_74 ; VAR_75 -= VAR_76 ; } } if ( ! VAR_77 ) break ; if ( STRUCT_OR_UNION_5 -> VAR_78 & VAR_79 ) { VAR_80 = - VAR_81 ; break ; } METHOD_17 ( & VAR_82 -> VAR_83 ) ; METHOD_18 ( ) ; METHOD_19 ( & VAR_84 -> VAR_85 ) ; } VAR_86 : METHOD_20 ( VAR_87 ) ; METHOD_21 ( & VAR_88 -> VAR_89 , & VAR_90 ) ; if ( VAR_91 - VAR_92 != VAR_93 && VAR_94 -> VAR_95 ) METHOD_22 ( VAR_96 , & VAR_97 -> VAR_98 ) ; METHOD_23 ( & VAR_99 -> VAR_100 ) ; return ( VAR_101 - VAR_102 ) ? VAR_103 - VAR_104 : VAR_105 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , const unsigned TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { const unsigned TYPE_3 * VAR_3 = VAR_4 ; METHOD_1 ( VAR_5 , VAR_6 ) ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 = 0 ; if ( METHOD_2 ( VAR_9 ) && STRUCT_OR_UNION_3 -> VAR_10 -> METHOD_3 != VAR_11 ) { VAR_12 = METHOD_4 ( VAR_13 ) ; if ( VAR_14 ) return VAR_15 ; } METHOD_5 ( & VAR_16 -> VAR_17 ) ; METHOD_6 ( VAR_18 ) ; METHOD_7 ( & VAR_19 -> VAR_20 , & VAR_21 ) ; while ( 1 ) { METHOD_8 ( VAR_22 ) ; if ( METHOD_9 ( VAR_23 ) ) { VAR_24 = - VAR_25 ; break ; } if ( METHOD_10 ( STRUCT_OR_UNION_4 ) || ( VAR_26 -> VAR_27 && ! VAR_28 -> VAR_29 -> VAR_30 ) ) { VAR_31 = - VAR_32 ; break ; } if ( METHOD_11 ( VAR_33 ) ) { while ( VAR_34 > 0 ) { TYPE_6 VAR_35 = METHOD_12 ( VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) { if ( VAR_40 == - VAR_41 ) break ; VAR_42 = VAR_43 ; goto VAR_44 ; } VAR_45 += VAR_46 ; VAR_47 -= VAR_48 ; if ( VAR_49 == 0 ) break ; VAR_50 = * VAR_51 ; if ( METHOD_13 ( VAR_52 , VAR_53 ) < 0 ) break ; VAR_54 ++ ; VAR_55 -- ; } if ( VAR_56 -> VAR_57 -> METHOD_14 ) VAR_58 -> VAR_59 -> METHOD_15 ( VAR_60 ) ; } else { struct STRUCT_OR_UNION_6 * VAR_106 = VAR_99 -> VAR_107 ; while ( VAR_61 > 0 ) { METHOD_24 ( & VAR_106 -> VAR_108 ) ; VAR_62 = VAR_63 -> VAR_64 -> METHOD_16 ( VAR_65 , VAR_66 , VAR_67 ) ; if ( VAR_68 < 0 ) { VAR_69 = VAR_70 ; goto VAR_71 ; } if ( ! VAR_72 ) break ; VAR_73 += VAR_74 ; VAR_75 -= VAR_76 ; } } if ( ! VAR_77 ) break ; if ( STRUCT_OR_UNION_5 -> VAR_78 & VAR_79 ) { VAR_80 = - VAR_81 ; break ; } METHOD_17 ( & VAR_82 -> VAR_83 ) ; METHOD_18 ( ) ; METHOD_19 ( & VAR_84 -> VAR_85 ) ; } VAR_86 : METHOD_20 ( VAR_87 ) ; METHOD_21 ( & VAR_88 -> VAR_89 , & VAR_90 ) ; if ( VAR_91 - VAR_92 != VAR_93 && VAR_94 -> VAR_95 ) METHOD_22 ( VAR_96 , & VAR_97 -> VAR_98 ) ; METHOD_23 ( & VAR_99 -> VAR_100 ) ; return ( VAR_101 - VAR_102 ) ? VAR_103 - VAR_104 : VAR_105 ; }",313
314,static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 )  return - VAR_4 ;  METHOD_2 ( VAR_5 -> VAR_6 ) ; VAR_7 = METHOD_3 ( VAR_8 ) ; if ( VAR_9 < 0 ) { METHOD_4 ( VAR_10 ) ; return VAR_11 ; } return METHOD_5 ( VAR_12 ) ; },static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 ) return - VAR_4 ; METHOD_2 ( VAR_5 -> VAR_6 ) ; VAR_7 = METHOD_3 ( VAR_8 ) ; if ( VAR_9 < 0 ) { METHOD_4 ( VAR_10 ) ; return VAR_11 ; } return METHOD_5 ( VAR_12 ) ; },314
315,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_5 ; TYPE_6 VAR_6 , VAR_7 ; union { TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; } VAR_10 ; while ( VAR_11 > 0 && VAR_12 == VAR_13 ) {  VAR_14 = METHOD_1 ( VAR_15 + VAR_16 ) ;  VAR_17 = METHOD_2 ( VAR_18 + VAR_19 + 1 ) ; METHOD_3 ( ( VAR_20 , ""\\n\\tSubobject,Type:%s(%u),Length:%u"" , METHOD_4 ( VAR_21 , ""Unknown"" , VAR_22 ) , VAR_23 , VAR_24 ) ) ; if ( VAR_25 < 4 ) { METHOD_5 ( ( VAR_26 , ""(tooshort)"" ) ) ; break ; } if ( ( VAR_27 % 4 ) != 0 ) { METHOD_6 ( ( VAR_28 , ""(notamultipleof4)"" ) ) ; break ; } if ( VAR_29 < VAR_30 ) { METHOD_7 ( ( VAR_31 , ""(goespasttheendoftheobject)"" ) ) ; break ; } switch ( VAR_32 ) { case VAR_33 :  METHOD_8 ( ( VAR_34 , ""\\n\\tSwitchingType:%s(%u)"" ,  METHOD_9 ( VAR_35 , ""Unknown"" , METHOD_10 ( VAR_36 + VAR_37 + 2 ) ) ,  METHOD_11 ( VAR_38 + VAR_39 + 2 ) ) ) ;  METHOD_12 ( ( VAR_40 , ""\\n\\tEncodingType:%s(%u)"" , METHOD_13 ( VAR_41 , ""Unknown"" , METHOD_14 ( VAR_42 + VAR_43 + 3 ) ) , METHOD_15 ( VAR_44 + VAR_45 + 3 ) ) ) ; METHOD_16 ( VAR_46 + VAR_47 + 4 ) ; VAR_48 . VAR_49 = METHOD_17 ( VAR_50 + VAR_51 + 4 ) ; METHOD_18 ( ( VAR_52 , ""\\n\\tMinReservableBandwidth:%.3fMbps"" , VAR_53 . VAR_54 * 8 / 1000000 ) ) ;  VAR_55 . VAR_56 = METHOD_19 ( VAR_57 + VAR_58 + 8 ) ;  METHOD_20 ( ( VAR_59 , ""\\n\\tMaxReservableBandwidth:%.3fMbps"" , VAR_60 . VAR_61 * 8 / 1000000 ) ) ; break ; case VAR_62 :  METHOD_21 ( ( VAR_63 , ""\\n\\tWavelength:%u"" ,  METHOD_22 ( VAR_64 + VAR_65 + 4 ) ) ) ; break ; default : VAR_66 = VAR_67 ; break ; } VAR_68 -= VAR_69 ; VAR_70 += VAR_71 ; } return ( VAR_72 ) ; VAR_73 : return - 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_5 ; TYPE_6 VAR_6 , VAR_7 ; union { TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; } VAR_10 ; while ( VAR_11 > 0 && VAR_12 == VAR_13 ) { METHOD_23 ( VAR_64 + VAR_70 ) ; VAR_14 = METHOD_1 ( VAR_15 + VAR_16 ) ; VAR_17 = METHOD_2 ( VAR_18 + VAR_19 + 1 ) ; METHOD_3 ( ( VAR_20 , ""\\n\\tSubobject,Type:%s(%u),Length:%u"" , METHOD_4 ( VAR_21 , ""Unknown"" , VAR_22 ) , VAR_23 , VAR_24 ) ) ; if ( VAR_25 < 4 ) { METHOD_5 ( ( VAR_26 , ""(tooshort)"" ) ) ; break ; } if ( ( VAR_27 % 4 ) != 0 ) { METHOD_6 ( ( VAR_28 , ""(notamultipleof4)"" ) ) ; break ; } if ( VAR_29 < VAR_30 ) { METHOD_7 ( ( VAR_31 , ""(goespasttheendoftheobject)"" ) ) ; break ; } switch ( VAR_32 ) { case VAR_33 : METHOD_24 ( VAR_64 + VAR_70 + 2 ) ; METHOD_8 ( ( VAR_34 , ""\\n\\tSwitchingType:%s(%u)"" , METHOD_9 ( VAR_35 , ""Unknown"" , METHOD_10 ( VAR_36 + VAR_37 + 2 ) ) ) ; METHOD_24 ( VAR_64 + VAR_70 + 3 , METHOD_11 ( VAR_38 + VAR_39 + 2 ) ) ) ; METHOD_16 ( VAR_64 + VAR_70 + 8 ) ; METHOD_12 ( ( VAR_40 , ""\\n\\tEncodingType:%s(%u)"" , METHOD_13 ( VAR_41 , ""Unknown"" , METHOD_14 ( VAR_42 + VAR_43 + 3 ) ) , METHOD_15 ( VAR_44 + VAR_45 + 3 ) ) ) ; METHOD_16 ( VAR_46 + VAR_47 + 4 ) ; VAR_48 . VAR_49 = METHOD_17 ( VAR_50 + VAR_51 + 4 ) ; METHOD_18 ( ( VAR_52 , ""\\n\\tMinReservableBandwidth:%.3fMbps"" , VAR_53 . VAR_54 * 8 / 1000000 ) ) ; VAR_55 . VAR_56 = METHOD_19 ( VAR_57 + VAR_58 + 8 ) ; METHOD_20 ( ( VAR_59 , ""\\n\\tMaxReservableBandwidth:%.3fMbps"" , VAR_60 . VAR_61 * 8 / 1000000 ) ) ; break ; case VAR_62 : METHOD_16 ( VAR_64 + VAR_70 + 4 ) ; METHOD_21 ( ( VAR_63 , ""\\n\\tWavelength:%u"" , METHOD_22 ( VAR_64 + VAR_65 + 4 ) ) ) ; break ; default : VAR_66 = VAR_67 ; break ; } VAR_68 -= VAR_69 ; VAR_70 += VAR_71 ; } return ( VAR_72 ) ; VAR_73 : return - 1 ; }",315
316," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  unsigned TYPE_4 VAR_3 = METHOD_1 ( VAR_4 , & VAR_5 -> VAR_6 ,  VAR_7 , VAR_8 , VAR_9 ) ; if ( VAR_10 < 8 ) return VAR_11 ; else if ( VAR_12 < 128 ) return VAR_13 ; else if ( VAR_14 < 2048 ) return VAR_15 ; else return VAR_16 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { unsigned TYPE_4 VAR_3 = METHOD_1 ( VAR_4 , & VAR_5 -> VAR_6 , VAR_7 , VAR_8 , VAR_9 ) ; if ( VAR_10 < 8 ) return VAR_11 ; else if ( VAR_12 < 128 ) return VAR_13 ; else if ( VAR_14 < 2048 ) return VAR_15 ; else return VAR_16 ; }",316
317,"static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 ) { VAR_3 -> VAR_4 = METHOD_1 ( * ( ( TYPE_2 * ) VAR_5 ) ) ; VAR_6 += 2 ;  VAR_7 -> VAR_8 = * VAR_9 ++ ;  METHOD_2 ( ""sens_res0x%x,nfcid1_len%d\\n"" , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 ) ; METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 , VAR_17 -> VAR_18 ) ; VAR_19 += VAR_20 -> VAR_21 ; VAR_22 -> VAR_23 = * VAR_24 ++ ; if ( VAR_25 -> VAR_26 != 0 ) VAR_27 -> VAR_28 = * VAR_29 ++ ; METHOD_4 ( ""sel_res_len%d,sel_res0x%x\\n"" , VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ; return VAR_34 ; }","static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 ) { VAR_3 -> VAR_4 = METHOD_1 ( * ( ( TYPE_2 * ) VAR_5 ) ) ; VAR_6 += 2 ; VAR_7 -> VAR_8 = * VAR_9 ++ ; METHOD_2 ( ""sens_res0x%x,nfcid1_len%d\\n"" , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 ) ; METHOD_3 ( VAR_14 -> VAR_15 , VAR_16 , VAR_17 -> VAR_18 ) ; VAR_19 += VAR_20 -> VAR_21 ; VAR_22 -> VAR_23 = * VAR_24 ++ ; if ( VAR_25 -> VAR_26 != 0 ) VAR_27 -> VAR_28 = * VAR_29 ++ ; METHOD_4 ( ""sel_res_len%d,sel_res0x%x\\n"" , VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ; return VAR_34 ; }",317
318,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) {   TYPE_6 * const VAR_5 = & VAR_6 -> VAR_7 ;  TYPE_7 * const VAR_8 = & VAR_9 -> VAR_10 ; TYPE_8 * const VAR_11 = & VAR_12 -> VAR_13 ; VAR_14 * VAR_15 ; const TYPE_9 VAR_16 = VAR_17 [ VAR_18 ] ; const TYPE_10 VAR_19 = VAR_20 [ VAR_21 ] ;  const TYPE_11 VAR_22 = VAR_23 >> 1 ;  const TYPE_12 VAR_24 = VAR_25 >> 1 ; const TYPE_13 VAR_26 = VAR_27 * VAR_28 -> VAR_29 + VAR_30 ; const struct STRUCT_OR_UNION_0 * const VAR_31 = & VAR_32 -> VAR_33 ; METHOD_1 ( VAR_34 , VAR_35 , VAR_36 ) ;  VAR_37 -> VAR_38 = & VAR_39 -> VAR_40 [ VAR_41 ] ;  VAR_42 -> VAR_43 = METHOD_2 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; METHOD_3 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; VAR_53 = & VAR_54 -> VAR_55 [ 0 ] -> VAR_56 ;  METHOD_4 ( VAR_57 , METHOD_5 ( VAR_58 ) , VAR_59 , VAR_60 ) ;  VAR_61 -> VAR_62 = - ( ( ( VAR_63 + VAR_64 ) * VAR_65 ) + VAR_66 ) ; VAR_67 -> VAR_68 = - ( ( ( VAR_69 + VAR_70 ) * VAR_71 ) + VAR_72 ) ; VAR_73 -> VAR_74 = ( VAR_75 -> VAR_76 - VAR_77 ) * VAR_78 + VAR_79 ; VAR_80 -> VAR_81 = ( VAR_82 -> VAR_83 - VAR_84 ) * VAR_85 + VAR_86 ; METHOD_6 ( ! ( VAR_87 & ( VAR_88 - 1 ) ) && ! ( VAR_89 & ( VAR_90 - 1 ) ) ) ; METHOD_7 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 -> VAR_98 , VAR_99 -> VAR_100 ) ; METHOD_8 ( VAR_101 , VAR_102 -> VAR_103 , VAR_104 , VAR_105 ) ;  VAR_106 -> VAR_107 = VAR_108 -> VAR_109 ;   VAR_110 -> VAR_111 = VAR_112 -> VAR_113 ;  if ( VAR_114 -> VAR_115 ) { if ( VAR_116 -> VAR_117 . VAR_118 != VAR_119 ) { const TYPE_14 * const VAR_120 = VAR_121 -> VAR_122 ? VAR_123 -> VAR_124 : VAR_125 -> VAR_126 ;  VAR_127 -> VAR_128 = METHOD_9 ( VAR_129 , VAR_130 , VAR_131 , VAR_132 , VAR_133 ) ;  } METHOD_10 ( VAR_134 , VAR_135 ) ; VAR_136 -> VAR_137 = VAR_138 -> VAR_139 [ VAR_140 -> VAR_141 ] ; } else { VAR_142 -> VAR_143 = 0 ; VAR_144 -> VAR_145 = VAR_146 -> VAR_147 ; }  } ","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * const VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 * const VAR_5 = & VAR_6 -> VAR_7 ; TYPE_7 * const VAR_8 = & VAR_9 -> VAR_10 ; TYPE_8 * const VAR_11 = & VAR_12 -> VAR_13 ; VAR_14 * VAR_15 ; const TYPE_9 VAR_16 = VAR_17 [ VAR_18 ] ; const struct STRUCT_OR_UNION_0 * const VAR_31 = & VAR_32 -> VAR_33 ; METHOD_1 ( VAR_34 , VAR_35 , VAR_36 ) ; VAR_37 -> VAR_38 = & VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 -> VAR_43 = METHOD_2 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; METHOD_3 ( VAR_49 , VAR_50 , VAR_51 , VAR_52 ) ; VAR_53 = & VAR_54 -> VAR_55 [ 0 ] -> VAR_56 ; METHOD_4 ( VAR_57 , METHOD_5 ( VAR_58 ) , VAR_59 , VAR_60 ) ; VAR_61 -> VAR_62 = - ( ( ( VAR_63 + VAR_64 ) * VAR_65 ) + VAR_66 ) ; VAR_67 -> VAR_68 = - ( ( ( VAR_69 + VAR_70 ) * VAR_71 ) + VAR_72 ) ; VAR_73 -> VAR_74 = ( VAR_75 -> VAR_76 - VAR_77 ) * VAR_78 + VAR_79 ; VAR_80 -> VAR_81 = ( VAR_82 -> VAR_83 - VAR_84 ) * VAR_85 + VAR_86 ; METHOD_6 ( ! ( VAR_87 & ( VAR_88 - 1 ) ) && ! ( VAR_89 & ( VAR_90 - 1 ) ) ) ; METHOD_7 ( VAR_91 , VAR_92 , VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 -> VAR_98 , VAR_99 -> VAR_100 ) ; METHOD_8 ( VAR_101 , VAR_102 -> VAR_103 , VAR_104 , VAR_105 ) ; VAR_106 -> VAR_107 = VAR_108 -> VAR_109 ; VAR_110 -> VAR_111 = VAR_112 -> VAR_113 ; if ( VAR_114 -> VAR_115 ) { if ( VAR_116 -> VAR_117 . VAR_118 != VAR_119 ) { const TYPE_14 * const VAR_120 = VAR_121 -> VAR_122 ? VAR_123 -> VAR_124 : VAR_125 -> VAR_126 ; VAR_127 -> VAR_128 = METHOD_9 ( VAR_129 , VAR_130 , VAR_131 , VAR_132 , VAR_133 ) ; } METHOD_10 ( VAR_134 , VAR_135 ) ; VAR_136 -> VAR_137 = VAR_138 -> VAR_139 [ VAR_140 -> VAR_141 ] ; } else { VAR_142 -> VAR_143 = 0 ; VAR_144 -> VAR_145 = VAR_146 -> VAR_149 . VAR_147 ; } VAR_91 -> VAR_92 = * VAR_92 ; }",318
319,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 ( * VAR_2 ) [ 2 ] , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( VAR_7 -> VAR_8 & VAR_9 ) METHOD_1 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 ; VAR_13 ++ ) { VAR_14 = VAR_15 [ VAR_16 ] [ 0 ] ; VAR_17 = VAR_18 [ VAR_19 ] [ 1 ] ; if ( VAR_20 < 0 ) { if ( VAR_21 >= 3 ) continue ; else { VAR_22 = METHOD_2 ( ""/dev/null"" , VAR_23 == 0 ? VAR_24 : VAR_25 ) ; VAR_26 = VAR_27 ; if ( VAR_28 == - 1 ) { METHOD_3 ( VAR_29 , - VAR_30 ) ; METHOD_4 ( ""failedtoopenstdio"" ) ; METHOD_5 ( 127 ) ; } } } if ( VAR_31 == VAR_32 ) METHOD_6 ( VAR_33 , 0 ) ; else METHOD_7 ( VAR_34 , VAR_35 ) ; if ( VAR_36 <= 2 ) METHOD_8 ( VAR_37 , 0 ) ; if ( VAR_38 != - 1 ) METHOD_9 ( VAR_39 ) ; } for ( VAR_40 = 0 ; VAR_41 < VAR_42 ; VAR_43 ++ ) { VAR_44 = VAR_45 [ VAR_46 ] [ 1 ] ; if ( VAR_47 >= 0 && VAR_48 != VAR_49 ) METHOD_10 ( VAR_50 ) ; } if ( VAR_51 -> VAR_52 != VAR_53 && METHOD_11 ( VAR_54 -> VAR_55 ) ) { METHOD_12 ( VAR_56 , - VAR_57 ) ; METHOD_13 ( ""chdir()"" ) ; METHOD_14 ( 127 ) ; }  if ( ( VAR_58 -> VAR_59 & VAR_60 ) && METHOD_15 ( VAR_61 -> VAR_62 ) ) {  METHOD_16 ( VAR_63 , - VAR_64 ) ; METHOD_17 ( ""setgid()"" ) ; METHOD_18 ( 127 ) ; } if ( ( VAR_65 -> VAR_66 & VAR_67 ) && METHOD_19 ( VAR_68 -> VAR_69 ) ) { METHOD_20 ( VAR_70 , - VAR_71 ) ; METHOD_21 ( ""setuid()"" ) ; METHOD_22 ( 127 ) ; } if ( VAR_72 -> VAR_73 != VAR_74 ) { VAR_75 = VAR_76 -> VAR_77 ; } METHOD_23 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 ) ; METHOD_24 ( VAR_82 , - VAR_83 ) ; METHOD_25 ( ""execvp()"" ) ; METHOD_26 ( 127 ) ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 ( * VAR_2 ) [ 2 ] , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( VAR_7 -> VAR_8 & VAR_9 ) METHOD_1 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 ; VAR_13 ++ ) { VAR_14 = VAR_15 [ VAR_16 ] [ 0 ] ; VAR_17 = VAR_18 [ VAR_19 ] [ 1 ] ; if ( VAR_20 < 0 ) { if ( VAR_21 >= 3 ) continue ; else { VAR_22 = METHOD_2 ( ""/dev/null"" , VAR_23 == 0 ? VAR_24 : VAR_25 ) ; VAR_26 = VAR_27 ; if ( VAR_28 == - 1 ) { METHOD_3 ( VAR_29 , - VAR_30 ) ; METHOD_4 ( ""failedtoopenstdio"" ) ; METHOD_5 ( 127 ) ; } } } if ( VAR_80 -> VAR_66 & ( VAR_67 | VAR_60 ) ) { METHOD_28 ( METHOD_27 ( 0 , VAR_74 ) ) ; } if ( VAR_31 == VAR_32 ) METHOD_6 ( VAR_33 , 0 ) ; else METHOD_7 ( VAR_34 , VAR_35 ) ; if ( VAR_36 <= 2 ) METHOD_8 ( VAR_37 , 0 ) ; if ( VAR_38 != - 1 ) METHOD_9 ( VAR_39 ) ; } for ( VAR_40 = 0 ; VAR_41 < VAR_42 ; VAR_43 ++ ) { VAR_44 = VAR_45 [ VAR_46 ] [ 1 ] ; if ( VAR_47 >= 0 && VAR_48 != VAR_49 ) METHOD_10 ( VAR_50 ) ; } if ( VAR_51 -> VAR_52 != VAR_53 && METHOD_11 ( VAR_54 -> VAR_55 ) ) { METHOD_12 ( VAR_56 , - VAR_57 ) ; METHOD_13 ( ""chdir()"" ) ; METHOD_14 ( 127 ) ; } if ( ( VAR_58 -> VAR_59 & VAR_60 ) && METHOD_15 ( VAR_61 -> VAR_62 ) ) { METHOD_16 ( VAR_63 , - VAR_64 ) ; METHOD_17 ( ""setgid()"" ) ; METHOD_18 ( 127 ) ; } if ( ( VAR_65 -> VAR_66 & VAR_67 ) && METHOD_19 ( VAR_68 -> VAR_69 ) ) { METHOD_20 ( VAR_70 , - VAR_71 ) ; METHOD_21 ( ""setuid()"" ) ; METHOD_22 ( 127 ) ; } if ( VAR_72 -> VAR_73 != VAR_74 ) { VAR_75 = VAR_76 -> VAR_77 ; } METHOD_23 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 ) ; METHOD_24 ( VAR_82 , - VAR_83 ) ; METHOD_25 ( ""execvp()"" ) ; METHOD_26 ( 127 ) ; }",319
320,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 ) { TYPE_10 VAR_9 = ( TYPE_11 ) VAR_10 ; VAR_11 * VAR_12 ; VAR_13 * VAR_14 ; TYPE_12 VAR_15 ; TYPE_13 VAR_16 , VAR_17 ; TYPE_14 VAR_18 ; TYPE_15 * VAR_19 = & VAR_20 -> VAR_21 . VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 ; TYPE_19 * VAR_26 = & VAR_27 -> VAR_28 . VAR_29 ; VAR_30 = VAR_31 -> VAR_32 . VAR_33 . VAR_34 ; VAR_35 = VAR_36 -> VAR_37 . VAR_38 ; VAR_39 = VAR_40 -> VAR_41 . VAR_42 ; VAR_43 = VAR_44 -> VAR_45 . VAR_46 . VAR_47 ; { VAR_48 = 0 ; if ( ( VAR_49 <= VAR_50 -> VAR_51 ) && ( VAR_52 > VAR_53 -> VAR_54 ) && ( VAR_55 < VAR_56 ) && ! ( VAR_57 && ( VAR_58 == 0 ) ) ) { VAR_59 = VAR_60 + ( 5 - VAR_61 ) ; METHOD_1 ( ""split_transform_flag"" , VAR_62 -> VAR_63 , VAR_64 ) ; VAR_65 = METHOD_2 ( VAR_66 , VAR_67 , VAR_68 ) ; METHOD_3 ( ""split_transform_flag"" , VAR_69 , VAR_70 -> VAR_71 ) ; } else { TYPE_20 VAR_72 = 0 ; if ( ( 0 == VAR_73 -> VAR_74 ) && ( VAR_75 == VAR_76 -> VAR_77 . VAR_78 . VAR_79 ) && ( VAR_80 != VAR_81 -> VAR_82 . VAR_83 . VAR_84 ) && ( 0 == VAR_85 ) ) { VAR_86 = 1 ; } if ( ( VAR_87 > VAR_88 -> VAR_89 ) || ( ( 1 == VAR_90 ) && ( 0 == VAR_91 ) ) || ( 1 == VAR_92 ) ) { VAR_93 = 1 ; } } if ( 0 == VAR_94 ) { VAR_95 -> VAR_96 . VAR_97 . VAR_98 [ VAR_99 ] = 0 ; VAR_100 -> VAR_101 . VAR_102 . VAR_103 [ VAR_104 ] = 0 ; } else { VAR_105 -> VAR_106 . VAR_107 . VAR_108 [ VAR_109 ] = VAR_110 -> VAR_111 . VAR_112 . VAR_113 [ VAR_114 - 1 ] ; VAR_115 -> VAR_116 . VAR_117 . VAR_118 [ VAR_119 ] = VAR_120 -> VAR_121 . VAR_122 . VAR_123 [ VAR_124 - 1 ] ; } if ( VAR_125 == 0 || VAR_126 > 2 ) { VAR_127 = VAR_128 + VAR_129 ; if ( ( VAR_130 == 0 ) || VAR_131 -> VAR_132 . VAR_133 . VAR_134 [ VAR_135 - 1 ] ) { METHOD_4 ( ""cbf_cb"" , VAR_136 -> VAR_137 , VAR_138 ) ; VAR_139 = METHOD_5 ( VAR_140 , VAR_141 , VAR_142 ) ; METHOD_6 ( ""cbf_cb"" , VAR_143 , VAR_144 -> VAR_145 ) ; VAR_146 -> VAR_147 . VAR_148 . VAR_149 [ VAR_150 ] = VAR_151 ; } if ( ( VAR_152 == 0 ) || VAR_153 -> VAR_154 . VAR_155 . VAR_156 [ VAR_157 - 1 ] ) { METHOD_7 ( ""cbf_cr"" , VAR_158 -> VAR_159 , VAR_160 ) ; VAR_161 = METHOD_8 ( VAR_162 , VAR_163 , VAR_164 ) ; METHOD_9 ( ""cbf_cr"" , VAR_165 , VAR_166 -> VAR_167 ) ; VAR_168 -> VAR_169 . VAR_170 . VAR_171 [ VAR_172 ] = VAR_173 ; } } if ( VAR_174 ) { TYPE_21 VAR_175 ; VAR_176 = VAR_177 + ( ( 1 << VAR_178 ) >> 1 ) ; VAR_179 = VAR_180 + ( ( 1 << VAR_181 ) >> 1 ) ; VAR_182 = VAR_183 ? VAR_184 : VAR_185 -> VAR_186 . VAR_187 . VAR_188 [ 0 ] ; METHOD_10 ( VAR_189 , VAR_190 , VAR_191 , VAR_192 , VAR_193 , VAR_194 - 1 , VAR_195 + 1 , 0 , VAR_196 ) ; VAR_197 = VAR_198 ? VAR_199 : VAR_200 -> VAR_201 . VAR_202 . VAR_203 [ 1 ] ; METHOD_11 ( VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 , VAR_209 - 1 , VAR_210 + 1 , 1 , VAR_211 ) ; VAR_212 = VAR_213 ? VAR_214 : VAR_215 -> VAR_216 . VAR_217 . VAR_218 [ 2 ] ; METHOD_12 ( VAR_219 , VAR_220 , VAR_221 , VAR_222 , VAR_223 , VAR_224 - 1 , VAR_225 + 1 , 2 , VAR_226 ) ; VAR_227 = VAR_228 ? VAR_229 : VAR_230 -> VAR_231 . VAR_232 . VAR_233 [ 3 ] ; METHOD_13 ( VAR_234 , VAR_235 , VAR_236 , VAR_237 , VAR_238 , VAR_239 - 1 , VAR_240 + 1 , 3 , VAR_241 ) ; } else { TYPE_22 VAR_242 ; TYPE_23 VAR_243 ; TYPE_24 VAR_244 ; TYPE_25 * VAR_245 = VAR_246 -> VAR_247 . VAR_248 ; VAR_249 = 0 ; VAR_250 = VAR_251 -> VAR_252 . VAR_253 << VAR_254 -> VAR_255 ; VAR_256 = VAR_257 -> VAR_258 . VAR_259 << VAR_260 -> VAR_261 ; if ( ( VAR_262 -> VAR_263 . VAR_264 . VAR_265 == VAR_266 ) || ( VAR_267 != 0 ) || ( VAR_268 -> VAR_269 . VAR_270 . VAR_271 [ VAR_272 ] ) || ( VAR_273 -> VAR_274 . VAR_275 . VAR_276 [ VAR_277 ] ) ) { VAR_278 = VAR_279 ; VAR_280 += ( VAR_281 == 0 ) ? 1 : 0 ; METHOD_14 ( ""cbf_luma"" , VAR_282 -> VAR_283 , VAR_284 ) ; VAR_285 = METHOD_15 ( VAR_286 , VAR_287 , VAR_288 ) ; METHOD_16 ( ""cbf_luma"" , VAR_289 , VAR_290 -> VAR_291 ) ; VAR_292 -> VAR_293 . VAR_294 . VAR_295 = VAR_296 ; } else { VAR_297 -> VAR_298 . VAR_299 . VAR_300 = 1 ; } VAR_301 -> VAR_302 = 0 ; VAR_303 -> VAR_304 = 0 ; VAR_305 -> VAR_306 = 0 ; VAR_307 -> VAR_308 = ( ( VAR_309 - VAR_310 ) >> 2 ) ; VAR_311 -> VAR_312 = ( ( VAR_313 - VAR_314 ) >> 2 ) ; VAR_315 -> VAR_316 = VAR_317 -> VAR_318 . VAR_319 . VAR_320 ; VAR_321 -> VAR_322 = ( VAR_323 - 2 ) ; VAR_324 -> VAR_325 = VAR_326 -> VAR_327 . VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 -> VAR_335 . VAR_336 . VAR_337 ; if ( VAR_338 -> VAR_339 . VAR_340 . VAR_341 || VAR_342 -> VAR_343 . VAR_344 . VAR_345 [ VAR_346 ] || VAR_347 -> VAR_348 . VAR_349 . VAR_350 [ VAR_351 ] ) { TYPE_26 VAR_352 ; if ( VAR_353 -> VAR_354 && ! VAR_355 -> VAR_356 . VAR_357 ) { TYPE_27 VAR_358 = VAR_359 ; TYPE_28 VAR_360 = VAR_361 ; TYPE_29 VAR_362 = VAR_363 ; METHOD_17 ( ""cu_qp_delta_abs"" , VAR_364 -> VAR_365 , VAR_366 ) ; VAR_367 = METHOD_18 ( VAR_368 , VAR_369 , VAR_370 , VAR_371 , 0 , VAR_372 ) ; if ( VAR_373 >= VAR_374 ) { VAR_375 = METHOD_19 ( VAR_376 , VAR_377 , 0 ) ; VAR_378 += VAR_379 ; } METHOD_20 ( ""cu_qp_delta_abs"" , VAR_380 , VAR_381 -> VAR_382 ) ; VAR_383 -> VAR_384 . VAR_385 = 1 ; if ( VAR_386 ) { VAR_387 = METHOD_21 ( VAR_388 , VAR_389 ) ; METHOD_22 ( ""cu_qp_delta_sign"" , VAR_390 , VAR_391 -> VAR_392 ) ; if ( VAR_393 ) VAR_394 = - VAR_395 ; }  VAR_396 -> VAR_397 . VAR_398 . VAR_399 = VAR_400 ;  } if ( VAR_401 -> VAR_402 . VAR_403 . VAR_404 ) { VAR_405 -> VAR_406 = 1 ; METHOD_23 ( VAR_407 , VAR_408 , VAR_409 , VAR_410 , 0 , VAR_411 ) ; } if ( 4 == VAR_412 -> VAR_413 . VAR_414 . VAR_415 ) VAR_416 = VAR_417 -> VAR_418 . VAR_419 . VAR_420 [ 0 ] ; else { VAR_421 = VAR_422 [ VAR_423 -> VAR_424 . VAR_425 . VAR_426 ] ; if ( VAR_427 == VAR_428 -> VAR_429 . VAR_430 . VAR_431 [ 0 ] ) { VAR_432 = METHOD_24 ( 34 ) ; } } if ( VAR_433 > 2 ) { if ( VAR_434 -> VAR_435 . VAR_436 . VAR_437 [ VAR_438 ] ) { VAR_439 -> VAR_440 = 1 ; METHOD_25 ( VAR_441 , VAR_442 , VAR_443 , VAR_444 - 1 , 1 , VAR_445 ) ; } if ( VAR_446 -> VAR_447 . VAR_448 . VAR_449 [ VAR_450 ] ) { VAR_451 -> VAR_452 = 1 ; METHOD_26 ( VAR_453 , VAR_454 , VAR_455 , VAR_456 - 1 , 2 , VAR_457 ) ; } } else if ( VAR_458 == 3 ) { if ( VAR_459 -> VAR_460 . VAR_461 . VAR_462 [ VAR_463 ] ) { VAR_464 -> VAR_465 = 1 ; METHOD_27 ( VAR_466 , VAR_467 , VAR_468 , VAR_469 , 1 , VAR_470 ) ; } if ( VAR_471 -> VAR_472 . VAR_473 . VAR_474 [ VAR_475 ] ) { VAR_476 -> VAR_477 = 1 ; METHOD_28 ( VAR_478 , VAR_479 , VAR_480 , VAR_481 , 2 , VAR_482 ) ; } } else { VAR_483 -> VAR_484 = VAR_485 ; } } else { if ( ( 3 != VAR_486 ) && ( 2 == VAR_487 ) ) { VAR_488 -> VAR_489 = VAR_490 ; } } { if ( ( VAR_491 -> VAR_492 . VAR_493 . VAR_494 << 3 ) == ( VAR_495 -> VAR_496 << 2 ) && ( VAR_497 -> VAR_498 . VAR_499 . VAR_500 << 3 ) == ( VAR_501 -> VAR_502 << 2 ) ) { VAR_503 -> VAR_504 = 1 ; } else { VAR_505 -> VAR_506 = 0 ; } } VAR_507 -> VAR_508 . VAR_509 ++ ; VAR_510 -> VAR_511 . VAR_512 . VAR_513 ++ ; VAR_514 -> VAR_515 . VAR_516 ++ ; } } return VAR_517 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 VAR_7 , TYPE_9 VAR_8 ) { TYPE_10 VAR_9 = ( TYPE_11 ) VAR_10 ; VAR_11 * VAR_12 ; VAR_13 * VAR_14 ; TYPE_12 VAR_15 ; TYPE_13 VAR_16 , VAR_17 ; TYPE_14 VAR_18 ; TYPE_15 * VAR_19 = & VAR_20 -> VAR_21 . VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 ; TYPE_19 * VAR_26 = & VAR_27 -> VAR_28 . VAR_29 ; VAR_30 = VAR_31 -> VAR_32 . VAR_33 . VAR_34 ; VAR_35 = VAR_36 -> VAR_37 . VAR_38 ; VAR_39 = VAR_40 -> VAR_41 . VAR_42 ; VAR_43 = VAR_44 -> VAR_45 . VAR_46 . VAR_47 ; { VAR_48 = 0 ; if ( ( VAR_49 <= VAR_50 -> VAR_51 ) && ( VAR_52 > VAR_53 -> VAR_54 ) && ( VAR_55 < VAR_56 ) && ! ( VAR_57 && ( VAR_58 == 0 ) ) ) { VAR_59 = VAR_60 + ( 5 - VAR_61 ) ; METHOD_1 ( ""split_transform_flag"" , VAR_62 -> VAR_63 , VAR_64 ) ; VAR_65 = METHOD_2 ( VAR_66 , VAR_67 , VAR_68 ) ; METHOD_3 ( ""split_transform_flag"" , VAR_69 , VAR_70 -> VAR_71 ) ; } else { TYPE_20 VAR_72 = 0 ; if ( ( 0 == VAR_73 -> VAR_74 ) && ( VAR_75 == VAR_76 -> VAR_77 . VAR_78 . VAR_79 ) && ( VAR_80 != VAR_81 -> VAR_82 . VAR_83 . VAR_84 ) && ( 0 == VAR_85 ) ) { VAR_86 = 1 ; } if ( ( VAR_87 > VAR_88 -> VAR_89 ) || ( ( 1 == VAR_90 ) && ( 0 == VAR_91 ) ) || ( 1 == VAR_92 ) ) { VAR_93 = 1 ; } } if ( 0 == VAR_94 ) { VAR_95 -> VAR_96 . VAR_97 . VAR_98 [ VAR_99 ] = 0 ; VAR_100 -> VAR_101 . VAR_102 . VAR_103 [ VAR_104 ] = 0 ; } else { VAR_105 -> VAR_106 . VAR_107 . VAR_108 [ VAR_109 ] = VAR_110 -> VAR_111 . VAR_112 . VAR_113 [ VAR_114 - 1 ] ; VAR_115 -> VAR_116 . VAR_117 . VAR_118 [ VAR_119 ] = VAR_120 -> VAR_121 . VAR_122 . VAR_123 [ VAR_124 - 1 ] ; } if ( VAR_125 == 0 || VAR_126 > 2 ) { VAR_127 = VAR_128 + VAR_129 ; if ( ( VAR_130 == 0 ) || VAR_131 -> VAR_132 . VAR_133 . VAR_134 [ VAR_135 - 1 ] ) { METHOD_4 ( ""cbf_cb"" , VAR_136 -> VAR_137 , VAR_138 ) ; VAR_139 = METHOD_5 ( VAR_140 , VAR_141 , VAR_142 ) ; METHOD_6 ( ""cbf_cb"" , VAR_143 , VAR_144 -> VAR_145 ) ; VAR_146 -> VAR_147 . VAR_148 . VAR_149 [ VAR_150 ] = VAR_151 ; } if ( ( VAR_152 == 0 ) || VAR_153 -> VAR_154 . VAR_155 . VAR_156 [ VAR_157 - 1 ] ) { METHOD_7 ( ""cbf_cr"" , VAR_158 -> VAR_159 , VAR_160 ) ; VAR_161 = METHOD_8 ( VAR_162 , VAR_163 , VAR_164 ) ; METHOD_9 ( ""cbf_cr"" , VAR_165 , VAR_166 -> VAR_167 ) ; VAR_168 -> VAR_169 . VAR_170 . VAR_171 [ VAR_172 ] = VAR_173 ; } } if ( VAR_174 ) { TYPE_21 VAR_175 ; VAR_176 = VAR_177 + ( ( 1 << VAR_178 ) >> 1 ) ; VAR_179 = VAR_180 + ( ( 1 << VAR_181 ) >> 1 ) ; VAR_182 = VAR_183 ? VAR_184 : VAR_185 -> VAR_186 . VAR_187 . VAR_188 [ 0 ] ; METHOD_10 ( VAR_189 , VAR_190 , VAR_191 , VAR_192 , VAR_193 , VAR_194 - 1 , VAR_195 + 1 , 0 , VAR_196 ) ; VAR_197 = VAR_198 ? VAR_199 : VAR_200 -> VAR_201 . VAR_202 . VAR_203 [ 1 ] ; METHOD_11 ( VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 , VAR_209 - 1 , VAR_210 + 1 , 1 , VAR_211 ) ; VAR_212 = VAR_213 ? VAR_214 : VAR_215 -> VAR_216 . VAR_217 . VAR_218 [ 2 ] ; METHOD_12 ( VAR_219 , VAR_220 , VAR_221 , VAR_222 , VAR_223 , VAR_224 - 1 , VAR_225 + 1 , 2 , VAR_226 ) ; VAR_227 = VAR_228 ? VAR_229 : VAR_230 -> VAR_231 . VAR_232 . VAR_233 [ 3 ] ; METHOD_13 ( VAR_234 , VAR_235 , VAR_236 , VAR_237 , VAR_238 , VAR_239 - 1 , VAR_240 + 1 , 3 , VAR_241 ) ; } else { TYPE_22 VAR_242 ; TYPE_23 VAR_243 ; TYPE_24 VAR_244 ; TYPE_25 * VAR_245 = VAR_246 -> VAR_247 . VAR_248 ; VAR_249 = 0 ; VAR_250 = VAR_251 -> VAR_252 . VAR_253 << VAR_254 -> VAR_255 ; VAR_256 = VAR_257 -> VAR_258 . VAR_259 << VAR_260 -> VAR_261 ; if ( ( VAR_262 -> VAR_263 . VAR_264 . VAR_265 == VAR_266 ) || ( VAR_267 != 0 ) || ( VAR_268 -> VAR_269 . VAR_270 . VAR_271 [ VAR_272 ] ) || ( VAR_273 -> VAR_274 . VAR_275 . VAR_276 [ VAR_277 ] ) ) { VAR_278 = VAR_279 ; VAR_280 += ( VAR_281 == 0 ) ? 1 : 0 ; METHOD_14 ( ""cbf_luma"" , VAR_282 -> VAR_283 , VAR_284 ) ; VAR_285 = METHOD_15 ( VAR_286 , VAR_287 , VAR_288 ) ; METHOD_16 ( ""cbf_luma"" , VAR_289 , VAR_290 -> VAR_291 ) ; VAR_292 -> VAR_293 . VAR_294 . VAR_295 = VAR_296 ; } else { VAR_297 -> VAR_298 . VAR_299 . VAR_300 = 1 ; } VAR_301 -> VAR_302 = 0 ; VAR_303 -> VAR_304 = 0 ; VAR_305 -> VAR_306 = 0 ; VAR_307 -> VAR_308 = ( ( VAR_309 - VAR_310 ) >> 2 ) ; VAR_311 -> VAR_312 = ( ( VAR_313 - VAR_314 ) >> 2 ) ; VAR_315 -> VAR_316 = VAR_317 -> VAR_318 . VAR_319 . VAR_320 ; VAR_321 -> VAR_322 = ( VAR_323 - 2 ) ; VAR_324 -> VAR_325 = VAR_326 -> VAR_327 . VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 -> VAR_335 . VAR_336 . VAR_337 ; if ( VAR_338 -> VAR_339 . VAR_340 . VAR_341 || VAR_342 -> VAR_343 . VAR_344 . VAR_345 [ VAR_346 ] || VAR_347 -> VAR_348 . VAR_349 . VAR_350 [ VAR_351 ] ) { TYPE_26 VAR_352 ; if ( VAR_353 -> VAR_354 && ! VAR_355 -> VAR_356 . VAR_357 ) { TYPE_27 VAR_358 = VAR_359 ; TYPE_28 VAR_360 = VAR_361 ; TYPE_29 VAR_362 = VAR_363 ; METHOD_17 ( ""cu_qp_delta_abs"" , VAR_364 -> VAR_365 , VAR_366 ) ; VAR_367 = METHOD_18 ( VAR_368 , VAR_369 , VAR_370 , VAR_371 , 0 , VAR_372 ) ; if ( VAR_373 >= VAR_374 ) { VAR_375 = METHOD_19 ( VAR_376 , VAR_377 , 0 ) ; VAR_378 += VAR_379 ; } METHOD_20 ( ""cu_qp_delta_abs"" , VAR_380 , VAR_381 -> VAR_382 ) ; VAR_383 -> VAR_384 . VAR_385 = 1 ; if ( VAR_386 ) { VAR_387 = METHOD_21 ( VAR_388 , VAR_389 ) ; METHOD_22 ( ""cu_qp_delta_sign"" , VAR_390 , VAR_391 -> VAR_392 ) ; if ( VAR_393 ) VAR_394 = - VAR_395 ; } VAR_396 -> VAR_397 . VAR_398 . VAR_399 = VAR_400 ; } if ( VAR_400 < METHOD_29 ( VAR_260 -> VAR_518 ) || VAR_400 > METHOD_30 ( VAR_260 -> VAR_518 ) ) { return VAR_519 ; } if ( VAR_401 -> VAR_402 . VAR_403 . VAR_404 ) { VAR_405 -> VAR_406 = 1 ; METHOD_23 ( VAR_407 , VAR_408 , VAR_409 , VAR_410 , 0 , VAR_411 ) ; } if ( 4 == VAR_412 -> VAR_413 . VAR_414 . VAR_415 ) VAR_416 = VAR_417 -> VAR_418 . VAR_419 . VAR_420 [ 0 ] ; else { VAR_421 = VAR_422 [ VAR_423 -> VAR_424 . VAR_425 . VAR_426 ] ; if ( VAR_427 == VAR_428 -> VAR_429 . VAR_430 . VAR_431 [ 0 ] ) { VAR_432 = METHOD_24 ( 34 ) ; } } if ( VAR_433 > 2 ) { if ( VAR_434 -> VAR_435 . VAR_436 . VAR_437 [ VAR_438 ] ) { VAR_439 -> VAR_440 = 1 ; METHOD_25 ( VAR_441 , VAR_442 , VAR_443 , VAR_444 - 1 , 1 , VAR_445 ) ; } if ( VAR_446 -> VAR_447 . VAR_448 . VAR_449 [ VAR_450 ] ) { VAR_451 -> VAR_452 = 1 ; METHOD_26 ( VAR_453 , VAR_454 , VAR_455 , VAR_456 - 1 , 2 , VAR_457 ) ; } } else if ( VAR_458 == 3 ) { if ( VAR_459 -> VAR_460 . VAR_461 . VAR_462 [ VAR_463 ] ) { VAR_464 -> VAR_465 = 1 ; METHOD_27 ( VAR_466 , VAR_467 , VAR_468 , VAR_469 , 1 , VAR_470 ) ; } if ( VAR_471 -> VAR_472 . VAR_473 . VAR_474 [ VAR_475 ] ) { VAR_476 -> VAR_477 = 1 ; METHOD_28 ( VAR_478 , VAR_479 , VAR_480 , VAR_481 , 2 , VAR_482 ) ; } } else { VAR_483 -> VAR_484 = VAR_485 ; } } else { if ( ( 3 != VAR_486 ) && ( 2 == VAR_487 ) ) { VAR_488 -> VAR_489 = VAR_490 ; } } { if ( ( VAR_491 -> VAR_492 . VAR_493 . VAR_494 << 3 ) == ( VAR_495 -> VAR_496 << 2 ) && ( VAR_497 -> VAR_498 . VAR_499 . VAR_500 << 3 ) == ( VAR_501 -> VAR_502 << 2 ) ) { VAR_503 -> VAR_504 = 1 ; } else { VAR_505 -> VAR_506 = 0 ; } } VAR_507 -> VAR_508 . VAR_509 ++ ; VAR_510 -> VAR_511 . VAR_512 . VAR_513 ++ ; VAR_514 -> VAR_515 . VAR_516 ++ ; } } return VAR_517 ; }",320
321,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_3 , VAR_4 , VAR_5 ? VAR_6 : VAR_7 ) ; if ( VAR_8 ) return - VAR_9 ;  if ( METHOD_2 ( VAR_10 , & STRUCT_OR_UNION_3 -> VAR_11 ) ) {  METHOD_3 ( ) ; return STRUCT_OR_UNION_4 -> VAR_12 ; } return METHOD_4 ( STRUCT_OR_UNION_5 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( & STRUCT_OR_UNION_2 -> VAR_3 , VAR_4 , VAR_5 ? VAR_6 : VAR_7 ) ; if ( VAR_8 ) return - VAR_9 ; VAR_8 = METHOD_5 ( STRUCT_OR_UNION_5 ) ; if ( VAR_8 < 0 ) return VAR_8 ; return METHOD_4 ( STRUCT_OR_UNION_5 ) ; }",321
322,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { const struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; if ( VAR_5 & ( 1 << ( VAR_6 - 1 ) ) ) { struct STRUCT_OR_UNION_3 VAR_7 = { . VAR_8 = 1 , . VAR_9 = VAR_10 -> VAR_11 , . VAR_12 = VAR_13 -> VAR_14 , } ;  TYPE_2 VAR_15 = VAR_16 -> VAR_17 ;   METHOD_2 ( VAR_18 , VAR_19 -> VAR_20 ) ;   VAR_21 . VAR_22 = VAR_23 ;  METHOD_3 ( VAR_24 , VAR_25 , sizeof ( VAR_26 ) , & VAR_27 ) ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { const struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_1 ( VAR_4 ) ; if ( VAR_5 & ( 1 << ( VAR_6 - 1 ) ) ) { struct STRUCT_OR_UNION_3 VAR_7 = { . VAR_8 = 1 , . VAR_9 = VAR_10 -> VAR_11 , . VAR_12 = VAR_13 -> VAR_14 , } ; if ( VAR_27 . VAR_9 > 0 ) { TYPE_2 VAR_15 = VAR_16 -> VAR_17 ; METHOD_2 ( VAR_18 , VAR_19 -> VAR_20 ) ; VAR_21 . VAR_22 = VAR_23 ; } METHOD_3 ( VAR_24 , VAR_25 , sizeof ( VAR_26 ) , & VAR_27 ) ; } }",322
323,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; unsigned TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( * VAR_8 ) , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 -> VAR_13 = & VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 -> VAR_21 ) ; if ( METHOD_3 ( VAR_22 -> VAR_23 ) ) return METHOD_4 ( VAR_24 -> VAR_25 ) ;  for ( VAR_26 = 0 ; VAR_27 <= VAR_28 ; VAR_29 ++ ) {  VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( VAR_36 ) return VAR_37 ; } METHOD_6 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_8 ( VAR_45 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; unsigned TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( * VAR_8 ) , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 -> VAR_13 = & VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 -> VAR_21 ) ; if ( METHOD_3 ( VAR_22 -> VAR_23 ) ) return METHOD_4 ( VAR_24 -> VAR_25 ) ; for ( VAR_26 = 0 ; VAR_27 <= VAR_28 ; VAR_29 ++ ) { VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( VAR_36 ) return VAR_37 ; } METHOD_6 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_8 ( VAR_45 ) ; }",323
324,"static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , ""acomp"" , sizeof ( VAR_5 . VAR_6 ) ) ;  if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }","static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ; METHOD_0 ( VAR_3 . VAR_4 , ""acomp"" , sizeof ( VAR_5 . VAR_6 ) ) ; if ( METHOD_1 ( VAR_7 , VAR_8 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_9 ) ) goto VAR_10 ; return 0 ; VAR_11 : return - VAR_12 ; }",324
325, TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) {   return METHOD_1 ( VAR_1 ) ;  },TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { return METHOD_1 ( VAR_1 * VAR_2 ) ; },325
326,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; union { struct STRUCT_OR_UNION_7 * VAR_7 ; struct STRUCT_OR_UNION_8 * VAR_8 ; TYPE_1 * VAR_9 ; } VAR_10 ; TYPE_2 * VAR_11 = VAR_12 -> VAR_13 ; TYPE_3 VAR_14 = VAR_15 -> VAR_16 ; unsigned TYPE_4 VAR_17 , VAR_18 ; unsigned TYPE_5 VAR_19 = VAR_20 | VAR_21 ; unsigned TYPE_6 VAR_22 , VAR_23 , VAR_24 ; struct STRUCT_OR_UNION_9 * VAR_25 = VAR_26 ; struct STRUCT_OR_UNION_10 VAR_27 ; struct STRUCT_OR_UNION_11 VAR_28 ; struct STRUCT_OR_UNION_12 * VAR_29 = METHOD_1 ( VAR_30 ) ; if ( VAR_31 -> VAR_32 == VAR_33 ) goto VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; VAR_38 = METHOD_2 ( VAR_39 ) ; if ( ! METHOD_3 ( METHOD_4 ( VAR_40 ) , METHOD_5 ( VAR_41 ) ) ) goto VAR_42 ; if ( VAR_43 -> VAR_44 ) { if ( VAR_45 -> VAR_46 != VAR_47 ) METHOD_6 ( VAR_48 , VAR_49 -> VAR_50 - METHOD_7 ( VAR_51 ) ) ; else if ( VAR_52 -> VAR_53 == VAR_54 ) { METHOD_8 ( VAR_55 , METHOD_9 ( VAR_56 ) ) ; } } if ( VAR_57 -> VAR_58 == VAR_59 ) VAR_60 |= VAR_61 ; VAR_62 = VAR_63 -> VAR_64 ; VAR_65 = METHOD_10 ( VAR_66 , VAR_67 , VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; if ( VAR_71 > VAR_72 ) VAR_73 = VAR_74 ; if ( VAR_75 -> VAR_76 == VAR_77 ) { VAR_78 = VAR_79 = METHOD_11 ( VAR_80 -> VAR_81 ) + 16 + VAR_82 -> VAR_83 ; } else { unsigned VAR_84 = METHOD_12 ( VAR_85 ) ; VAR_86 = METHOD_13 ( VAR_87 -> VAR_88 + ( VAR_89 < 16 ? 16 : VAR_90 ) ) + VAR_91 -> VAR_92 ; VAR_93 = VAR_94 - VAR_95 ; } if ( VAR_96 + VAR_97 > VAR_98 -> VAR_99 . VAR_100 ) { if ( VAR_101 -> VAR_102 && METHOD_14 ( & VAR_103 -> VAR_104 ) + VAR_105 -> VAR_106 < ( unsigned ) VAR_107 -> VAR_108 ) { if ( METHOD_15 ( VAR_109 ) ) { VAR_110 = METHOD_16 ( VAR_111 , VAR_112 ) ; } else { VAR_113 = METHOD_17 ( VAR_114 ) ; VAR_115 = VAR_116 -> VAR_117 ; } if ( VAR_118 ) METHOD_18 ( VAR_119 , VAR_120 ) ; } VAR_121 = VAR_122 -> VAR_123 . VAR_124 - VAR_125 ; if ( ( TYPE_7 ) VAR_126 < 0 ) VAR_127 = 0 ; } METHOD_19 ( & VAR_128 -> VAR_129 . VAR_130 ) ; VAR_131 . VAR_132 = METHOD_20 ( VAR_133 , & VAR_134 -> VAR_135 , VAR_136 ) ; if ( ! VAR_137 . VAR_138 ) goto VAR_139 ; METHOD_21 ( & VAR_140 -> VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 ++ ; if ( VAR_145 ) { VAR_146 |= VAR_147 ; METHOD_22 ( & VAR_148 -> VAR_149 , VAR_150 ) ; } if ( ! VAR_151 -> VAR_152 . VAR_153 ) VAR_154 &= ~ VAR_155 ; METHOD_23 ( & VAR_156 -> VAR_157 . VAR_158 ) ; METHOD_24 ( VAR_159 , 0 , VAR_160 . VAR_161 + VAR_162 , VAR_163 ) ; switch ( VAR_164 -> VAR_165 ) { case VAR_166 : VAR_167 . VAR_168 -> VAR_169 = VAR_170 -> VAR_171 ; VAR_172 . VAR_173 -> VAR_174 = VAR_175 ; VAR_176 . VAR_177 -> VAR_178 = VAR_179 ; VAR_180 . VAR_181 -> VAR_182 = VAR_183 ; if ( ( VAR_184 -> VAR_185 & VAR_186 ) && VAR_187 -> VAR_188 . VAR_189 ) VAR_190 = METHOD_25 ( VAR_191 -> VAR_192 ) ; else if ( ( VAR_193 -> VAR_194 & VAR_195 ) && VAR_196 -> VAR_197 . VAR_198 ) VAR_199 = METHOD_26 ( VAR_200 -> VAR_201 ) ; else if ( VAR_202 -> VAR_203 . VAR_204 ) VAR_205 = METHOD_27 ( VAR_206 -> VAR_207 ) ; else METHOD_28 ( & VAR_208 ) ; VAR_209 . VAR_210 -> VAR_211 = VAR_212 . VAR_213 ; VAR_214 . VAR_215 -> VAR_216 = VAR_217 . VAR_218 ; VAR_219 = sizeof ( * VAR_220 . VAR_221 ) ; break ; case VAR_222 : VAR_223 . VAR_224 -> VAR_225 = VAR_226 -> VAR_227 ; VAR_228 . VAR_229 -> VAR_230 = VAR_231 ; VAR_232 . VAR_233 -> VAR_234 = VAR_235 ; VAR_236 . VAR_237 -> VAR_238 = VAR_239 ; if ( ( VAR_240 -> VAR_241 & VAR_242 ) && VAR_243 -> VAR_244 . VAR_245 ) VAR_246 = METHOD_29 ( VAR_247 -> VAR_248 ) ; else if ( ( VAR_249 -> VAR_250 & VAR_251 ) && VAR_252 -> VAR_253 . VAR_254 ) VAR_255 = METHOD_30 ( VAR_256 -> VAR_257 ) ; else if ( VAR_258 -> VAR_259 . VAR_260 ) VAR_261 = METHOD_31 ( VAR_262 -> VAR_263 ) ; else METHOD_32 ( & VAR_264 ) ; VAR_265 . VAR_266 -> VAR_267 = VAR_268 . VAR_269 ; VAR_270 . VAR_271 -> VAR_272 = VAR_273 . VAR_274 ; if ( METHOD_33 ( VAR_275 ) ) { VAR_276 . VAR_277 -> VAR_278 = METHOD_34 ( VAR_279 ) ; VAR_280 |= VAR_281 ; } else { VAR_282 . VAR_283 -> VAR_284 = 0 ; }  VAR_285 = sizeof ( * VAR_286 . VAR_287 ) ;  break ; default : METHOD_35 ( ) ; } VAR_288 = VAR_289 . VAR_290 + METHOD_36 ( VAR_291 ) ; VAR_292 -> VAR_293 = METHOD_37 ( VAR_294 , VAR_295 -> VAR_296 ) ; VAR_297 -> VAR_298 = VAR_299 ; VAR_300 -> VAR_301 = VAR_302 -> VAR_303 ; VAR_304 -> VAR_305 = VAR_306 -> VAR_307 ; VAR_308 -> VAR_309 = VAR_310 -> VAR_311 ; if ( METHOD_38 ( VAR_312 -> VAR_313 ) ) VAR_314 -> VAR_315 = VAR_316 -> VAR_317 ; else VAR_318 -> VAR_319 = VAR_320 -> VAR_321 ; METHOD_39 ( VAR_322 , VAR_323 . VAR_324 , VAR_325 ) ; METHOD_40 ( ) ; if VAR_326 == 1 { TYPE_8 * VAR_327 , * VAR_328 ; VAR_329 = ( TYPE_9 * ) METHOD_41 ( ( unsigned TYPE_10 ) VAR_330 . VAR_331 + VAR_332 + VAR_333 ) ; for ( VAR_334 = VAR_335 . VAR_336 ; VAR_337 < VAR_338 ; VAR_339 += VAR_340 ) METHOD_42 ( METHOD_43 ( VAR_341 ) ) ; } VAR_342 -> METHOD_44 ( VAR_343 , 0 ) ; VAR_344 : if ( VAR_345 != VAR_346 -> VAR_347 && METHOD_45 ( VAR_348 ) ) { VAR_349 -> VAR_350 = VAR_351 ; VAR_352 -> VAR_353 = VAR_354 ; } VAR_355 : METHOD_46 ( VAR_356 ) ; return 0 ; VAR_357 : VAR_358 -> VAR_359 . VAR_360 ++ ; METHOD_47 ( & VAR_361 -> VAR_362 . VAR_363 ) ; VAR_364 -> METHOD_48 ( VAR_365 , 0 ) ; METHOD_49 ( VAR_366 ) ; goto VAR_367 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; union { struct STRUCT_OR_UNION_7 * VAR_7 ; struct STRUCT_OR_UNION_8 * VAR_8 ; TYPE_1 * VAR_9 ; } VAR_10 ; TYPE_2 * VAR_11 = VAR_12 -> VAR_13 ; TYPE_3 VAR_14 = VAR_15 -> VAR_16 ; unsigned TYPE_4 VAR_17 , VAR_18 ; unsigned TYPE_5 VAR_19 = VAR_20 | VAR_21 ; unsigned TYPE_6 VAR_22 , VAR_23 , VAR_24 ; struct STRUCT_OR_UNION_9 * VAR_25 = VAR_26 ; struct STRUCT_OR_UNION_10 VAR_27 ; struct STRUCT_OR_UNION_11 VAR_28 ; struct STRUCT_OR_UNION_12 * VAR_29 = METHOD_1 ( VAR_30 ) ; if ( VAR_31 -> VAR_32 == VAR_33 ) goto VAR_34 ; VAR_35 = VAR_36 -> VAR_37 ; VAR_38 = METHOD_2 ( VAR_39 ) ; if ( ! METHOD_3 ( METHOD_4 ( VAR_40 ) , METHOD_5 ( VAR_41 ) ) ) goto VAR_42 ; if ( VAR_43 -> VAR_44 ) { if ( VAR_45 -> VAR_46 != VAR_47 ) METHOD_6 ( VAR_48 , VAR_49 -> VAR_50 - METHOD_7 ( VAR_51 ) ) ; else if ( VAR_52 -> VAR_53 == VAR_54 ) { METHOD_8 ( VAR_55 , METHOD_9 ( VAR_56 ) ) ; } } if ( VAR_57 -> VAR_58 == VAR_59 ) VAR_60 |= VAR_61 ; VAR_62 = VAR_63 -> VAR_64 ; VAR_65 = METHOD_10 ( VAR_66 , VAR_67 , VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; if ( VAR_71 > VAR_72 ) VAR_73 = VAR_74 ; if ( VAR_75 -> VAR_76 == VAR_77 ) { VAR_78 = VAR_79 = METHOD_11 ( VAR_80 -> VAR_81 ) + 16 + VAR_82 -> VAR_83 ; } else { unsigned VAR_84 = METHOD_12 ( VAR_85 ) ; VAR_86 = METHOD_13 ( VAR_87 -> VAR_88 + ( VAR_89 < 16 ? 16 : VAR_90 ) ) + VAR_91 -> VAR_92 ; VAR_93 = VAR_94 - VAR_95 ; } if ( VAR_96 + VAR_97 > VAR_98 -> VAR_99 . VAR_100 ) { if ( VAR_101 -> VAR_102 && METHOD_14 ( & VAR_103 -> VAR_104 ) + VAR_105 -> VAR_106 < ( unsigned ) VAR_107 -> VAR_108 ) { if ( METHOD_15 ( VAR_109 ) ) { VAR_110 = METHOD_16 ( VAR_111 , VAR_112 ) ; } else { VAR_113 = METHOD_17 ( VAR_114 ) ; VAR_115 = VAR_116 -> VAR_117 ; } if ( VAR_118 ) METHOD_18 ( VAR_119 , VAR_120 ) ; } VAR_121 = VAR_122 -> VAR_123 . VAR_124 - VAR_125 ; if ( ( TYPE_7 ) VAR_126 < 0 ) VAR_127 = 0 ; } VAR_335 . VAR_287 -> VAR_368 = 0 ; METHOD_19 ( & VAR_128 -> VAR_129 . VAR_130 ) ; VAR_131 . VAR_132 = METHOD_20 ( VAR_133 , & VAR_134 -> VAR_135 , VAR_136 ) ; if ( ! VAR_137 . VAR_138 ) goto VAR_139 ; METHOD_21 ( & VAR_140 -> VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 ++ ; if ( VAR_145 ) { VAR_146 |= VAR_147 ; METHOD_22 ( & VAR_148 -> VAR_149 , VAR_150 ) ; } if ( ! VAR_151 -> VAR_152 . VAR_153 ) VAR_154 &= ~ VAR_155 ; METHOD_23 ( & VAR_156 -> VAR_157 . VAR_158 ) ; METHOD_24 ( VAR_159 , 0 , VAR_160 . VAR_161 + VAR_162 , VAR_163 ) ; switch ( VAR_164 -> VAR_165 ) { case VAR_166 : VAR_167 . VAR_168 -> VAR_169 = VAR_170 -> VAR_171 ; VAR_172 . VAR_173 -> VAR_174 = VAR_175 ; VAR_176 . VAR_177 -> VAR_178 = VAR_179 ; VAR_180 . VAR_181 -> VAR_182 = VAR_183 ; if ( ( VAR_184 -> VAR_185 & VAR_186 ) && VAR_187 -> VAR_188 . VAR_189 ) VAR_190 = METHOD_25 ( VAR_191 -> VAR_192 ) ; else if ( ( VAR_193 -> VAR_194 & VAR_195 ) && VAR_196 -> VAR_197 . VAR_198 ) VAR_199 = METHOD_26 ( VAR_200 -> VAR_201 ) ; else if ( VAR_202 -> VAR_203 . VAR_204 ) VAR_205 = METHOD_27 ( VAR_206 -> VAR_207 ) ; else METHOD_28 ( & VAR_208 ) ; VAR_209 . VAR_210 -> VAR_211 = VAR_212 . VAR_213 ; VAR_214 . VAR_215 -> VAR_216 = VAR_217 . VAR_218 ; VAR_219 = sizeof ( * VAR_220 . VAR_221 ) ; break ; case VAR_222 : VAR_223 . VAR_224 -> VAR_225 = VAR_226 -> VAR_227 ; VAR_228 . VAR_229 -> VAR_230 = VAR_231 ; VAR_232 . VAR_233 -> VAR_234 = VAR_235 ; VAR_236 . VAR_237 -> VAR_238 = VAR_239 ; if ( ( VAR_240 -> VAR_241 & VAR_242 ) && VAR_243 -> VAR_244 . VAR_245 ) VAR_246 = METHOD_29 ( VAR_247 -> VAR_248 ) ; else if ( ( VAR_249 -> VAR_250 & VAR_251 ) && VAR_252 -> VAR_253 . VAR_254 ) VAR_255 = METHOD_30 ( VAR_256 -> VAR_257 ) ; else if ( VAR_258 -> VAR_259 . VAR_260 ) VAR_261 = METHOD_31 ( VAR_262 -> VAR_263 ) ; else METHOD_32 ( & VAR_264 ) ; VAR_265 . VAR_266 -> VAR_267 = VAR_268 . VAR_269 ; VAR_270 . VAR_271 -> VAR_272 = VAR_273 . VAR_274 ; if ( METHOD_33 ( VAR_275 ) ) { VAR_276 . VAR_277 -> VAR_278 = METHOD_34 ( VAR_279 ) ; VAR_280 |= VAR_281 ; } else { VAR_282 . VAR_283 -> VAR_284 = 0 ; } VAR_285 = sizeof ( * VAR_286 . VAR_287 ) ; break ; default : METHOD_35 ( ) ; } VAR_288 = VAR_289 . VAR_290 + METHOD_36 ( VAR_291 ) ; VAR_292 -> VAR_293 = METHOD_37 ( VAR_294 , VAR_295 -> VAR_296 ) ; VAR_297 -> VAR_298 = VAR_299 ; VAR_300 -> VAR_301 = VAR_302 -> VAR_303 ; VAR_304 -> VAR_305 = VAR_306 -> VAR_307 ; VAR_308 -> VAR_309 = VAR_310 -> VAR_311 ; if ( METHOD_38 ( VAR_312 -> VAR_313 ) ) VAR_314 -> VAR_315 = VAR_316 -> VAR_317 ; else VAR_318 -> VAR_319 = VAR_320 -> VAR_321 ; METHOD_39 ( VAR_322 , VAR_323 . VAR_324 , VAR_325 ) ; METHOD_40 ( ) ; if VAR_326 == 1 { TYPE_8 * VAR_327 , * VAR_328 ; VAR_329 = ( TYPE_9 * ) METHOD_41 ( ( unsigned TYPE_10 ) VAR_330 . VAR_331 + VAR_332 + VAR_333 ) ; for ( VAR_334 = VAR_335 . VAR_336 ; VAR_337 < VAR_338 ; VAR_339 += VAR_340 ) METHOD_42 ( METHOD_43 ( VAR_341 ) ) ; } VAR_342 -> METHOD_44 ( VAR_343 , 0 ) ; VAR_344 : if ( VAR_345 != VAR_346 -> VAR_347 && METHOD_45 ( VAR_348 ) ) { VAR_349 -> VAR_350 = VAR_351 ; VAR_352 -> VAR_353 = VAR_354 ; } VAR_355 : METHOD_46 ( VAR_356 ) ; return 0 ; VAR_357 : VAR_358 -> VAR_359 . VAR_360 ++ ; METHOD_47 ( & VAR_361 -> VAR_362 . VAR_363 ) ; VAR_364 -> METHOD_48 ( VAR_365 , 0 ) ; METHOD_49 ( VAR_366 ) ; goto VAR_367 ; }",326
327,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;  METHOD_3 ( VAR_6 -> VAR_7 ) ;  return 0 ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ; return 0 ; },327
328,"TYPE_0 * METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { const struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 * VAR_3 , * VAR_4 ; TYPE_3 VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_4 VAR_7 = VAR_8 + 1 ; for ( VAR_9 = VAR_10 ; VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ) { if ( VAR_15 -> VAR_16 ) VAR_17 += VAR_18 -> VAR_19 + 1 ; } VAR_20 = METHOD_2 ( VAR_21 ) ; VAR_22 = VAR_23 + VAR_24 - ( VAR_25 + 1 ) ;  METHOD_3 ( VAR_26 , VAR_27 ) ;  for ( VAR_28 = VAR_29 ; VAR_30 ; VAR_31 = VAR_32 -> VAR_33 ) { if ( VAR_34 -> VAR_35 ) { VAR_36 -= VAR_37 -> VAR_38 + 1 ; METHOD_4 ( VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; VAR_44 [ VAR_45 -> VAR_46 ] = '/' ; } } return VAR_47 ; }","TYPE_0 * METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 ) { const struct STRUCT_OR_UNION_1 * VAR_2 ; TYPE_2 * VAR_3 , * VAR_4 ; TYPE_3 VAR_5 = METHOD_1 ( VAR_6 ) ; TYPE_4 VAR_7 = VAR_8 + 1 ; for ( VAR_9 = VAR_10 ; VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ) { if ( VAR_15 -> VAR_16 ) VAR_17 += VAR_18 -> VAR_19 + 1 ; } VAR_20 = METHOD_2 ( VAR_21 ) ; VAR_22 = VAR_23 + VAR_24 - ( VAR_25 + 1 ) ; METHOD_3 ( VAR_26 , VAR_27 ) ; for ( VAR_28 = VAR_29 ; VAR_30 ; VAR_31 = VAR_32 -> VAR_33 ) { if ( VAR_34 -> VAR_35 ) { VAR_36 -= VAR_37 -> VAR_38 + 1 ; METHOD_4 ( VAR_39 , VAR_40 -> VAR_41 , VAR_42 -> VAR_43 ) ; VAR_44 [ VAR_45 -> VAR_46 ] = '/' ; } } return VAR_47 ; }",328
329,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ;  TYPE_4 * VAR_4 = & VAR_5 -> VAR_6 . VAR_7 ;  const TYPE_5 * VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] . VAR_13 ; const TYPE_6 * VAR_14 = & VAR_15 -> VAR_16 . VAR_17 ;  METHOD_1 ( VAR_18 , VAR_19 -> VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ) ;  for ( VAR_25 = 0 ; VAR_26 < 2 ; ++ VAR_27 ) { TYPE_7 * VAR_28 = & VAR_29 -> VAR_30 [ VAR_31 ] ; const TYPE_8 * VAR_32 = & VAR_33 -> VAR_34 [ VAR_35 ] ; const TYPE_9 * VAR_36 = & VAR_37 -> VAR_38 [ VAR_39 ] ;  VAR_40 -> VAR_41 = METHOD_2 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 ) ;   METHOD_3 ( VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 ,  VAR_51 -> VAR_52 ) ;  METHOD_4 ( VAR_53 , VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 ) ;  for ( VAR_60 = 0 ; VAR_61 < VAR_62 ; ++ VAR_63 )  VAR_64 -> VAR_65 [ VAR_66 ] = METHOD_5 ( VAR_67 -> VAR_68 [ VAR_69 ] , VAR_70 -> VAR_71 [ VAR_72 ] ) ;  for ( VAR_73 = 0 ; VAR_74 < VAR_75 ; ++ VAR_76 )  METHOD_6 ( VAR_77 , VAR_78 -> VAR_79 [ VAR_80 ] , VAR_81 -> VAR_82 [ VAR_83 ] ,  VAR_84 -> VAR_85 [ VAR_86 ] ) ;  METHOD_7 ( VAR_87 , VAR_88 -> VAR_89 , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 ) ;  if ( VAR_94 ) {  VAR_95 -> VAR_96 = METHOD_8 ( VAR_97 -> VAR_98 , VAR_99 -> VAR_100 ) ;   VAR_101 -> VAR_102 = METHOD_9 ( VAR_103 -> VAR_104 , VAR_105 -> VAR_106 ) ;  } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 ; TYPE_4 * VAR_4 = & VAR_5 -> VAR_6 . VAR_7 ; const TYPE_5 * VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] . VAR_13 ; const TYPE_6 * VAR_14 = & VAR_15 -> VAR_16 . VAR_17 ; METHOD_10 ( VAR_18 , VAR_19 -> VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < 2 ; ++ VAR_27 ) { TYPE_7 * VAR_28 = & VAR_29 -> VAR_30 [ VAR_31 ] ; const TYPE_8 * VAR_32 = & VAR_33 -> VAR_34 [ VAR_35 ] ; const TYPE_9 * VAR_36 = & VAR_37 -> VAR_38 [ VAR_39 ] ; VAR_40 -> VAR_41 = METHOD_2 ( VAR_42 -> VAR_43 , VAR_44 -> VAR_45 ) ; METHOD_10 ( VAR_46 , VAR_47 -> VAR_48 , VAR_49 -> VAR_50 , VAR_51 -> VAR_52 ) ; METHOD_10 ( VAR_53 , VAR_54 -> VAR_55 , VAR_56 -> VAR_57 , VAR_58 -> VAR_59 ) ; for ( VAR_60 = 0 ; VAR_61 < VAR_62 ; ++ VAR_63 ) VAR_64 -> VAR_65 [ VAR_66 ] = METHOD_5 ( VAR_67 -> VAR_68 [ VAR_69 ] , VAR_70 -> VAR_71 [ VAR_72 ] ) ; METHOD_10 ( VAR_87 , VAR_88 -> VAR_89 , VAR_90 -> VAR_91 , VAR_92 -> VAR_93 ) ; if ( VAR_94 ) { VAR_95 -> VAR_96 = METHOD_8 ( VAR_97 -> VAR_98 , VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = METHOD_9 ( VAR_103 -> VAR_104 , VAR_105 -> VAR_106 ) ; } } }",329
330,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 [ VAR_6 ] ; struct STRUCT_OR_UNION_1 * VAR_7 ; struct STRUCT_OR_UNION_2 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; struct STRUCT_OR_UNION_5 VAR_11 ; if ( ! METHOD_1 ( VAR_12 ) ) return - VAR_13 ;  if ( VAR_14 != VAR_15 [ METHOD_2 ( VAR_16 ) ] ) {  METHOD_3 ( ""set_ctl:len%u!=%u\\n"" , VAR_17 , VAR_18 [ METHOD_4 ( VAR_19 ) ] ) ; return - VAR_20 ; } if ( METHOD_5 ( VAR_21 , VAR_22 , VAR_23 ) != 0 ) return - VAR_24 ; METHOD_6 ( ) ; if ( METHOD_7 ( & VAR_25 ) ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } if ( VAR_29 == VAR_30 ) { VAR_31 = METHOD_8 ( ) ; goto VAR_32 ; } else if ( VAR_33 == VAR_34 ) { VAR_35 = METHOD_9 ( ( struct STRUCT_OR_UNION_6 * ) VAR_36 ) ; goto VAR_37 ; } else if ( VAR_38 == VAR_39 ) { struct STRUCT_OR_UNION_7 * VAR_40 = ( struct STRUCT_OR_UNION_8 * ) VAR_41 ; VAR_42 = METHOD_10 ( VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; goto VAR_49 ; } else if ( VAR_50 == VAR_51 ) { struct STRUCT_OR_UNION_9 * VAR_52 = ( struct STRUCT_OR_UNION_10 * ) VAR_53 ; VAR_54 = METHOD_11 ( VAR_55 -> VAR_56 ) ; goto VAR_57 ; } VAR_58 = ( struct STRUCT_OR_UNION_11 * ) VAR_59 ; VAR_60 = ( struct STRUCT_OR_UNION_12 * ) ( VAR_61 + 1 ) ; METHOD_12 ( & VAR_62 , VAR_63 ) ; METHOD_13 ( & VAR_64 , VAR_65 ) ; if ( VAR_66 == VAR_67 ) { if ( ! VAR_68 . VAR_69 && ! VAR_70 . VAR_71 . VAR_72 && ! VAR_73 . VAR_74 ) { VAR_75 = METHOD_14 ( ) ; goto VAR_76 ; } } if ( VAR_77 . VAR_78 != VAR_79 && VAR_80 . VAR_81 != VAR_82 ) { METHOD_15 ( ""set_ctl:invalidprotocol:%d%pI4:%d%s\\n"" , VAR_83 . VAR_84 , & VAR_85 . VAR_86 . VAR_87 , METHOD_16 ( VAR_88 . VAR_89 ) , VAR_90 . VAR_91 ) ; VAR_92 = - VAR_93 ; goto VAR_94 ; } if ( VAR_95 . VAR_96 == 0 ) VAR_97 = METHOD_17 ( VAR_98 . VAR_99 , VAR_100 . VAR_101 , & VAR_102 . VAR_103 , VAR_104 . VAR_105 ) ; else VAR_106 = METHOD_18 ( VAR_107 . VAR_108 , VAR_109 . VAR_110 ) ; if ( VAR_111 != VAR_112 && ( VAR_113 == VAR_114 || VAR_115 -> VAR_116 != VAR_117 . VAR_118 ) ) { VAR_119 = - VAR_120 ; goto VAR_121 ; } switch ( VAR_122 ) { case VAR_123 : if ( VAR_124 != VAR_125 ) VAR_126 = - VAR_127 ; else VAR_128 = METHOD_19 ( & VAR_129 , & VAR_130 ) ; break ; case VAR_131 : VAR_132 = METHOD_20 ( VAR_133 , & VAR_134 ) ; break ; case VAR_135 : VAR_136 = METHOD_21 ( VAR_137 ) ; if ( ! VAR_138 ) goto VAR_139 ; break ; case VAR_140 : VAR_141 = METHOD_22 ( VAR_142 ) ; break ; case VAR_143 : VAR_144 = METHOD_23 ( VAR_145 , & VAR_146 ) ; break ; case VAR_147 : VAR_148 = METHOD_24 ( VAR_149 , & VAR_150 ) ; break ; case VAR_151 : VAR_152 = METHOD_25 ( VAR_153 , & VAR_154 ) ; break ; default : VAR_155 = - VAR_156 ; } if ( VAR_157 ) METHOD_26 ( VAR_158 ) ; VAR_159 : METHOD_27 ( & VAR_160 ) ; VAR_161 : METHOD_28 ( ) ; return VAR_162 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; unsigned TYPE_6 VAR_5 [ VAR_6 ] ; struct STRUCT_OR_UNION_1 * VAR_7 ; struct STRUCT_OR_UNION_2 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 ; struct STRUCT_OR_UNION_5 VAR_11 ; if ( VAR_122 < VAR_163 || VAR_122 > VAR_164 ) return - VAR_156 ; if ( VAR_23 < 0 || VAR_23 > VAR_6 ) return - VAR_156 ; if ( ! METHOD_1 ( VAR_12 ) ) return - VAR_13 ; if ( VAR_14 != VAR_15 [ METHOD_2 ( VAR_16 ) ] ) { METHOD_3 ( ""set_ctl:len%u!=%u\\n"" , VAR_17 , VAR_18 [ METHOD_4 ( VAR_19 ) ] ) ; return - VAR_20 ; } if ( METHOD_5 ( VAR_21 , VAR_22 , VAR_23 ) != 0 ) return - VAR_24 ; METHOD_6 ( ) ; if ( METHOD_7 ( & VAR_25 ) ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } if ( VAR_29 == VAR_30 ) { VAR_31 = METHOD_8 ( ) ; goto VAR_32 ; } else if ( VAR_33 == VAR_34 ) { VAR_35 = METHOD_9 ( ( struct STRUCT_OR_UNION_6 * ) VAR_36 ) ; goto VAR_37 ; } else if ( VAR_38 == VAR_39 ) { struct STRUCT_OR_UNION_7 * VAR_40 = ( struct STRUCT_OR_UNION_8 * ) VAR_41 ; VAR_42 = METHOD_10 ( VAR_43 -> VAR_44 , VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; goto VAR_49 ; } else if ( VAR_50 == VAR_51 ) { struct STRUCT_OR_UNION_9 * VAR_52 = ( struct STRUCT_OR_UNION_10 * ) VAR_53 ; VAR_54 = METHOD_11 ( VAR_55 -> VAR_56 ) ; goto VAR_57 ; } VAR_58 = ( struct STRUCT_OR_UNION_11 * ) VAR_59 ; VAR_60 = ( struct STRUCT_OR_UNION_12 * ) ( VAR_61 + 1 ) ; METHOD_12 ( & VAR_62 , VAR_63 ) ; METHOD_13 ( & VAR_64 , VAR_65 ) ; if ( VAR_66 == VAR_67 ) { if ( ! VAR_68 . VAR_69 && ! VAR_70 . VAR_71 . VAR_72 && ! VAR_73 . VAR_74 ) { VAR_75 = METHOD_14 ( ) ; goto VAR_76 ; } } if ( VAR_77 . VAR_78 != VAR_79 && VAR_80 . VAR_81 != VAR_82 ) { METHOD_15 ( ""set_ctl:invalidprotocol:%d%pI4:%d%s\\n"" , VAR_83 . VAR_84 , & VAR_85 . VAR_86 . VAR_87 , METHOD_16 ( VAR_88 . VAR_89 ) , VAR_90 . VAR_91 ) ; VAR_92 = - VAR_93 ; goto VAR_94 ; } if ( VAR_95 . VAR_96 == 0 ) VAR_97 = METHOD_17 ( VAR_98 . VAR_99 , VAR_100 . VAR_101 , & VAR_102 . VAR_103 , VAR_104 . VAR_105 ) ; else VAR_106 = METHOD_18 ( VAR_107 . VAR_108 , VAR_109 . VAR_110 ) ; if ( VAR_111 != VAR_112 && ( VAR_113 == VAR_114 || VAR_115 -> VAR_116 != VAR_117 . VAR_118 ) ) { VAR_119 = - VAR_120 ; goto VAR_121 ; } switch ( VAR_122 ) { case VAR_123 : if ( VAR_124 != VAR_125 ) VAR_126 = - VAR_127 ; else VAR_128 = METHOD_19 ( & VAR_129 , & VAR_130 ) ; break ; case VAR_131 : VAR_132 = METHOD_20 ( VAR_133 , & VAR_134 ) ; break ; case VAR_135 : VAR_136 = METHOD_21 ( VAR_137 ) ; if ( ! VAR_138 ) goto VAR_139 ; break ; case VAR_140 : VAR_141 = METHOD_22 ( VAR_142 ) ; break ; case VAR_143 : VAR_144 = METHOD_23 ( VAR_145 , & VAR_146 ) ; break ; case VAR_147 : VAR_148 = METHOD_24 ( VAR_149 , & VAR_150 ) ; break ; case VAR_151 : VAR_152 = METHOD_25 ( VAR_153 , & VAR_154 ) ; break ; default : VAR_155 = - VAR_156 ; } if ( VAR_157 ) METHOD_26 ( VAR_158 ) ; VAR_159 : METHOD_27 ( & VAR_160 ) ; VAR_161 : METHOD_28 ( ) ; return VAR_162 ; }",330
331,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 VAR_4 ; METHOD_1 ( & VAR_5 , VAR_6 , VAR_7 ) ; const TYPE_3 * VAR_8 = METHOD_2 ( & VAR_9 -> VAR_10 , ""content-type"" ) ; METHOD_3 ( & VAR_11 , VAR_12 , VAR_13 ? METHOD_4 ( VAR_14 ) : 0 ) ; if ( METHOD_5 ( & VAR_15 , ""application/x-www-form-urlencoded"" ) ) { METHOD_6 ( & VAR_16 -> VAR_17 , VAR_18 , VAR_19 ) ; } else if ( METHOD_7 ( & VAR_20 , ""multipart/form-data"" ) ) { const TYPE_4 * VAR_21 = METHOD_8 ( & VAR_22 , ""boundary"" ) ; if ( VAR_23 && * VAR_24 ) { const TYPE_5 * VAR_25 = VAR_26 ; for ( const TYPE_6 * VAR_27 = VAR_28 ; VAR_29 > 0 ; ) { const TYPE_7 * VAR_30 ; if ( ( VAR_31 == VAR_32 && ( VAR_33 = METHOD_9 ( VAR_34 , VAR_35 , ""--"" ) ) != VAR_36 ) || ( VAR_37 = METHOD_10 ( VAR_38 , VAR_39 , ""\\r\\n--"" ) ) != VAR_40 ) { VAR_41 -= VAR_42 - VAR_43 + ( VAR_44 == VAR_45 ? 2 : 4 ) ; VAR_46 = VAR_47 + ( VAR_48 == VAR_49 ? 2 : 4 ) ; if ( ! METHOD_11 ( VAR_50 , VAR_51 , VAR_52 ) ) { TYPE_8 VAR_53 = METHOD_12 ( VAR_54 ) ; VAR_55 -= VAR_56 ; VAR_57 += VAR_58 ; if ( ! METHOD_13 ( VAR_59 , VAR_60 , ""\\r\\n"" ) ) { VAR_61 -= 2 ; VAR_62 += 2 ; if ( VAR_63 ) { METHOD_14 ( VAR_64 , VAR_65 , VAR_66 - VAR_67 ) ; } else { if ( VAR_68 != VAR_69 ) { info ( ""[http]Ignoringprologuebefore\\""multipart/form-data\\""!"" ) ; } } VAR_70 = VAR_71 ; } else if ( ! METHOD_15 ( VAR_72 , VAR_73 , ""--\\r\\n"" ) ) { VAR_74 -= 4 ; VAR_75 += 4 ; METHOD_16 ( VAR_76 , VAR_77 , VAR_78 - VAR_79 ) ; VAR_80 = VAR_81 ; if ( VAR_82 > 0 ) { info ( ""[http]Ignoringepiloguepastendof\\""multipart/"" ""form-data\\""!"" ) ; } } } }  }  if ( VAR_83 ) {  METHOD_17 ( ""[http]Missingfinal\\""boundary\\""for\\""multipart/form-data\\""!"" ) ;  } } else { METHOD_18 ( ""[http]Missing\\""boundary\\""informationfor\\""multipart/form-data\\""!"" ) ; } } METHOD_19 ( & VAR_84 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 VAR_4 ; METHOD_1 ( & VAR_5 , VAR_6 , VAR_7 ) ; const TYPE_3 * VAR_8 = METHOD_2 ( & VAR_9 -> VAR_10 , ""content-type"" ) ; METHOD_3 ( & VAR_11 , VAR_12 , VAR_13 ? METHOD_4 ( VAR_14 ) : 0 ) ; if ( METHOD_5 ( & VAR_15 , ""application/x-www-form-urlencoded"" ) ) { METHOD_6 ( & VAR_16 -> VAR_17 , VAR_18 , VAR_19 ) ; } else if ( METHOD_7 ( & VAR_20 , ""multipart/form-data"" ) ) { const TYPE_4 * VAR_21 = METHOD_8 ( & VAR_22 , ""boundary"" ) ; if ( VAR_23 && * VAR_24 ) { const TYPE_5 * VAR_25 = VAR_26 ; for ( const TYPE_6 * VAR_27 = VAR_28 ; VAR_29 > 0 ; ) { const TYPE_7 * VAR_30 ; if ( ( VAR_31 == VAR_32 && ( VAR_33 = METHOD_9 ( VAR_34 , VAR_35 , ""--"" ) ) != VAR_36 ) || ( VAR_37 = METHOD_10 ( VAR_38 , VAR_39 , ""\\r\\n--"" ) ) != VAR_40 ) { VAR_41 -= VAR_42 - VAR_43 + ( VAR_44 == VAR_45 ? 2 : 4 ) ; VAR_46 = VAR_47 + ( VAR_48 == VAR_49 ? 2 : 4 ) ; if ( ! METHOD_11 ( VAR_50 , VAR_51 , VAR_52 ) ) { TYPE_8 VAR_53 = METHOD_12 ( VAR_54 ) ; VAR_55 -= VAR_56 ; VAR_57 += VAR_58 ; if ( ! METHOD_13 ( VAR_59 , VAR_60 , ""\\r\\n"" ) ) { VAR_61 -= 2 ; VAR_62 += 2 ; if ( VAR_63 ) { METHOD_14 ( VAR_64 , VAR_65 , VAR_66 - VAR_67 ) ; } else { if ( VAR_68 != VAR_69 ) { info ( ""[http]Ignoringprologuebefore\\""multipart/form-data\\""!"" ) ; } } VAR_70 = VAR_71 ; } else if ( ! METHOD_15 ( VAR_72 , VAR_73 , ""--\\r\\n"" ) ) { VAR_74 -= 4 ; VAR_75 += 4 ; METHOD_16 ( VAR_76 , VAR_77 , VAR_78 - VAR_79 ) ; VAR_80 = VAR_81 ; if ( VAR_82 > 0 ) { info ( ""[http]Ignoringepiloguepastendof\\""multipart/"" ""form-data\\""!"" ) ; } } } else { METHOD_18 ( ""[http]Ignorningbrokenmultipart/form-data"" ) ; break ; } } if ( VAR_83 ) { METHOD_18 ( ""[http]Missing\\""boundary\\""informationfor\\""multipart/form-data\\""!"" ) ; } } METHOD_19 ( & VAR_84 ) ; }",331
332,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ;  VAR_11 = VAR_12 -> VAR_13 ;  VAR_14 = METHOD_1 ( 0 , & VAR_15 ) ; if ( VAR_16 == VAR_17 ) return VAR_18 ; do { VAR_19 = METHOD_2 ( VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ) ; if ( VAR_25 ) break ; if ( VAR_26 == VAR_27 ) if ( VAR_28 -> VAR_29 . VAR_30 == sizeof ( TYPE_8 ) ) { TYPE_9 VAR_31 ; VAR_32 = METHOD_3 ( & VAR_33 , VAR_34 -> VAR_35 . VAR_36 , & VAR_37 ) ; if ( VAR_38 ) break ; VAR_39 . VAR_40 = sizeof ( VAR_41 ) ; VAR_42 . VAR_43 . VAR_44 = VAR_45 ; VAR_46 . VAR_47 . VAR_48 = VAR_49 -> VAR_50 . VAR_51 ; VAR_52 . VAR_53 . VAR_54 = 0 ; VAR_55 . VAR_56 . VAR_57 = VAR_58 -> VAR_59 ; VAR_60 . VAR_61 . VAR_62 = METHOD_4 ( VAR_63 -> VAR_64 ) ; } else if ( VAR_65 == VAR_66 ) if ( VAR_67 -> VAR_68 . VAR_69 == sizeof ( VAR_70 ) ) { VAR_71 = METHOD_5 ( & VAR_72 , & VAR_73 -> VAR_74 . VAR_75 , & VAR_76 . VAR_77 . VAR_78 ) ; if ( VAR_79 ) break ; VAR_80 . VAR_81 = sizeof ( VAR_82 ) ; VAR_83 . VAR_84 . VAR_85 = VAR_86 -> VAR_87 . VAR_88 ; VAR_89 . VAR_90 . VAR_91 = METHOD_6 ( VAR_92 -> VAR_93 ) ; VAR_94 . VAR_95 . VAR_96 [ 0 ] = 0 ; VAR_97 . VAR_98 . VAR_99 [ 1 ] = 0 ; VAR_100 . VAR_101 . VAR_102 [ 2 ] = 0 ; VAR_103 . VAR_104 . VAR_105 = VAR_106 -> VAR_107 ; } else { VAR_108 = VAR_109 ; break ; } VAR_110 = VAR_111 ; if ( VAR_112 -> VAR_113 != 0 ) { VAR_114 . VAR_115 = VAR_116 -> VAR_117 ; } else if ( METHOD_7 ( & VAR_118 -> VAR_119 ) ) { VAR_120 . VAR_121 = VAR_122 -> VAR_123 ; } else { VAR_124 . VAR_125 = VAR_126 -> VAR_127 ; } if ( VAR_128 & VAR_129 ) { VAR_130 . VAR_131 = VAR_132 ; } if ( VAR_133 == VAR_134 ) VAR_135 . VAR_136 = VAR_137 -> VAR_138 ; if ( VAR_139 == VAR_140 ) VAR_141 . VAR_142 = VAR_143 -> VAR_144 ; VAR_145 . VAR_146 = VAR_147 -> VAR_148 ; if ( VAR_149 == VAR_150 ) VAR_151 . VAR_152 = VAR_153 -> VAR_154 ; VAR_155 . VAR_156 = VAR_157 -> VAR_158 ; if ( VAR_159 == VAR_160 ) VAR_161 . VAR_162 = VAR_163 -> VAR_164 ; VAR_165 . VAR_166 = VAR_167 -> VAR_168 ; if ( VAR_169 == VAR_170 ) VAR_171 . VAR_172 = VAR_173 -> VAR_174 ; if ( VAR_175 == VAR_176 ) VAR_177 . VAR_178 = VAR_179 -> VAR_180 ; VAR_181 = METHOD_8 ( VAR_182 , & VAR_183 , VAR_184 , VAR_185 , & VAR_186 ) ; if ( VAR_187 ) break ; } while ( 0 ) ; METHOD_9 ( VAR_188 ) ; return VAR_189 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = METHOD_1 ( 0 , & VAR_15 ) ; if ( VAR_16 == VAR_17 ) return VAR_18 ; do { VAR_19 = METHOD_2 ( VAR_20 , VAR_21 -> VAR_22 , VAR_23 -> VAR_24 ) ; if ( VAR_25 ) break ; if ( VAR_26 == VAR_27 ) if ( VAR_28 -> VAR_29 . VAR_30 == sizeof ( TYPE_8 ) ) { TYPE_9 VAR_31 ; VAR_32 = METHOD_3 ( & VAR_33 , VAR_34 -> VAR_35 . VAR_36 , & VAR_37 ) ; if ( VAR_38 ) break ; VAR_39 . VAR_40 = sizeof ( VAR_41 ) ; VAR_42 . VAR_43 . VAR_44 = VAR_45 ; VAR_46 . VAR_47 . VAR_48 = VAR_49 -> VAR_50 . VAR_51 ; VAR_52 . VAR_53 . VAR_54 = 0 ; VAR_55 . VAR_56 . VAR_57 = VAR_58 -> VAR_59 ; VAR_60 . VAR_61 . VAR_62 = METHOD_4 ( VAR_63 -> VAR_64 ) ; } else if ( VAR_65 == VAR_66 ) if ( VAR_67 -> VAR_68 . VAR_69 == sizeof ( VAR_70 ) ) { VAR_71 = METHOD_5 ( & VAR_72 , & VAR_73 -> VAR_74 . VAR_75 , & VAR_76 . VAR_77 . VAR_78 ) ; if ( VAR_79 ) break ; VAR_80 . VAR_81 = sizeof ( VAR_82 ) ; VAR_83 . VAR_84 . VAR_85 = VAR_86 -> VAR_87 . VAR_88 ; VAR_89 . VAR_90 . VAR_91 = METHOD_6 ( VAR_92 -> VAR_93 ) ; VAR_94 . VAR_95 . VAR_96 [ 0 ] = 0 ; VAR_97 . VAR_98 . VAR_99 [ 1 ] = 0 ; VAR_100 . VAR_101 . VAR_102 [ 2 ] = 0 ; VAR_103 . VAR_104 . VAR_105 = VAR_106 -> VAR_107 ; } else { VAR_108 = VAR_109 ; break ; } VAR_110 = VAR_111 ; if ( VAR_112 -> VAR_113 != 0 ) { VAR_114 . VAR_115 = VAR_116 -> VAR_117 ; } else if ( METHOD_7 ( & VAR_118 -> VAR_119 ) ) { VAR_120 . VAR_121 = VAR_122 -> VAR_123 ; } else { VAR_124 . VAR_125 = VAR_126 -> VAR_127 ; } if ( VAR_128 & VAR_129 ) { VAR_130 . VAR_131 = VAR_132 ; } if ( VAR_133 == VAR_134 ) VAR_135 . VAR_136 = VAR_137 -> VAR_138 ; if ( VAR_139 == VAR_140 ) VAR_141 . VAR_142 = VAR_143 -> VAR_144 ; VAR_145 . VAR_146 = VAR_147 -> VAR_148 ; if ( VAR_149 == VAR_150 ) VAR_151 . VAR_152 = VAR_153 -> VAR_154 ; VAR_155 . VAR_156 = VAR_157 -> VAR_158 ; if ( VAR_159 == VAR_160 ) VAR_161 . VAR_162 = VAR_163 -> VAR_164 ; VAR_165 . VAR_166 = VAR_167 -> VAR_168 ; if ( VAR_169 == VAR_170 ) VAR_171 . VAR_172 = VAR_173 -> VAR_174 ; if ( VAR_175 == VAR_176 ) VAR_177 . VAR_178 = VAR_179 -> VAR_180 ; VAR_181 = METHOD_8 ( VAR_182 , & VAR_183 , VAR_184 , VAR_185 , & VAR_186 ) ; if ( VAR_187 ) break ; } while ( 0 ) ; METHOD_9 ( VAR_188 ) ; return VAR_189 ; }",332
333,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  METHOD_1 ( VAR_3 , VAR_4 , & VAR_5 ) ; METHOD_2 ( VAR_6 . VAR_7 [ 0 ] , VAR_8 . VAR_9 [ 1 ] , & VAR_10 . VAR_11 -> VAR_12 [ 0 ] ) ; METHOD_3 ( VAR_13 . VAR_14 [ 2 ] , VAR_15 . VAR_16 [ 3 ] , & VAR_17 . VAR_18 -> VAR_19 [ 1 ] ) ; METHOD_4 ( VAR_20 . VAR_21 [ 0 ] , VAR_22 . VAR_23 [ 2 ] , & VAR_24 . VAR_25 -> VAR_26 [ 0 ] ) ; METHOD_5 ( VAR_27 . VAR_28 [ 1 ] , VAR_29 . VAR_30 [ 3 ] , & VAR_31 . VAR_32 -> VAR_33 [ 1 ] ) ; METHOD_6 ( & VAR_34 . VAR_35 -> VAR_36 [ 0 ] , & VAR_37 . VAR_38 -> VAR_39 [ 1 ] , & VAR_40 . VAR_41 -> VAR_42 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; METHOD_1 ( VAR_3 , VAR_4 , & VAR_5 ) ; METHOD_2 ( VAR_6 . VAR_7 [ 0 ] , VAR_8 . VAR_9 [ 1 ] , & VAR_10 . VAR_11 -> VAR_12 [ 0 ] ) ; METHOD_3 ( VAR_13 . VAR_14 [ 2 ] , VAR_15 . VAR_16 [ 3 ] , & VAR_17 . VAR_18 -> VAR_19 [ 1 ] ) ; METHOD_4 ( VAR_20 . VAR_21 [ 0 ] , VAR_22 . VAR_23 [ 2 ] , & VAR_24 . VAR_25 -> VAR_26 [ 0 ] ) ; METHOD_5 ( VAR_27 . VAR_28 [ 1 ] , VAR_29 . VAR_30 [ 3 ] , & VAR_31 . VAR_32 -> VAR_33 [ 1 ] ) ; METHOD_6 ( & VAR_34 . VAR_35 -> VAR_36 [ 0 ] , & VAR_37 . VAR_38 -> VAR_39 [ 1 ] , & VAR_40 . VAR_41 -> VAR_42 ) ; }",333
334,"TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 ,  TYPE_3 * VAR_2 ,  TYPE_4 VAR_3 ) {  TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_6 VAR_11 ;  TYPE_7 VAR_12 , VAR_13 [ VAR_14 ] , VAR_15 [ VAR_16 ] ;  METHOD_1 ( VAR_17 , VAR_18 ) ;  METHOD_2 ( VAR_19 , VAR_20 , sizeof ( TYPE_8 ) * VAR_21 ) ;  for ( VAR_22 = VAR_23 , VAR_24 = 0 ; VAR_25 < VAR_26 ; ++ VAR_27 ) VAR_28 += METHOD_3 ( VAR_29 + 2 * VAR_30 , VAR_31 [ VAR_32 ] ) ; VAR_33 += METHOD_4 ( VAR_34 + 2 * VAR_35 , VAR_36 [ VAR_37 ] ) ; VAR_38 = 0 ; VAR_39 = VAR_40 [ VAR_41 ] ;  VAR_42 = ( * VAR_43 > VAR_44 [ VAR_45 ] ? - 1 : 1 ) ;  for ( VAR_46 = * VAR_47 ; VAR_48 != VAR_49 [ VAR_50 ] ; VAR_51 += VAR_52 ) { if ( VAR_53 < 1 || VAR_54 > 255 ) continue ; VAR_55 [ VAR_56 ] = VAR_57 ; METHOD_5 ( VAR_58 , VAR_59 ) ; for ( VAR_60 = VAR_61 , VAR_62 = 0 ; VAR_63 < VAR_64 ; ++ VAR_65 ) VAR_66 += METHOD_6 ( VAR_67 + 2 * VAR_68 , VAR_69 [ VAR_70 ] ) ; VAR_71 += METHOD_7 ( VAR_72 + 2 * VAR_73 , VAR_74 [ VAR_75 ] ) ; VAR_76 = METHOD_8 ( VAR_77 , VAR_78 [ VAR_79 ] ) + VAR_80 ; VAR_81 = VAR_82 - VAR_83 - VAR_84 ; if ( VAR_85 > VAR_86 ) { VAR_87 = VAR_88 ; VAR_89 = VAR_90 ; } }  * VAR_91 = VAR_92 ;  return VAR_93 ; }","TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 ; TYPE_6 VAR_11 ; TYPE_7 VAR_12 , VAR_13 [ VAR_14 ] , VAR_15 [ VAR_16 ] ; METHOD_1 ( VAR_17 , VAR_18 ) ; METHOD_2 ( VAR_19 , VAR_20 , sizeof ( TYPE_8 ) * VAR_21 ) ; for ( VAR_22 = VAR_23 , VAR_24 = 0 ; VAR_25 < VAR_26 ; ++ VAR_27 ) VAR_28 += METHOD_3 ( VAR_29 + 2 * VAR_30 , VAR_31 [ VAR_32 ] ) ; VAR_33 += METHOD_4 ( VAR_34 + 2 * VAR_35 , VAR_36 [ VAR_37 ] ) ; VAR_38 = 0 ; VAR_39 = VAR_40 [ VAR_41 ] ; VAR_42 = ( * VAR_43 > VAR_44 [ VAR_45 ] ? - 1 : 1 ) ; for ( VAR_46 = * VAR_47 ; VAR_48 != VAR_49 [ VAR_50 ] ; VAR_51 += VAR_52 ) { if ( VAR_53 < 1 || VAR_54 > 255 ) continue ; VAR_55 [ VAR_56 ] = VAR_57 ; METHOD_5 ( VAR_58 , VAR_59 ) ; for ( VAR_60 = VAR_61 , VAR_62 = 0 ; VAR_63 < VAR_64 ; ++ VAR_65 ) VAR_66 += METHOD_6 ( VAR_67 + 2 * VAR_68 , VAR_69 [ VAR_70 ] ) ; VAR_71 += METHOD_7 ( VAR_72 + 2 * VAR_73 , VAR_74 [ VAR_75 ] ) ; VAR_76 = METHOD_8 ( VAR_77 , VAR_78 [ VAR_79 ] ) + VAR_80 ; VAR_81 = VAR_82 - VAR_83 - VAR_84 ; if ( VAR_85 > VAR_86 ) { VAR_87 = VAR_88 ; VAR_89 = VAR_90 ; } } } else { VAR_52 = VAR_94 ; for ( VAR_90 = * VAR_91 ; VAR_90 < VAR_78 [ VAR_79 ] ; VAR_90 += VAR_52 ) { if ( VAR_90 < 1 || VAR_90 > 255 ) continue ; VAR_74 [ VAR_79 ] = VAR_90 ; METHOD_5 ( VAR_74 , VAR_74 ) ; for ( VAR_70 = VAR_61 , VAR_83 = 0 ; VAR_70 < VAR_64 ; ++ VAR_70 ) VAR_83 += METHOD_7 ( VAR_72 + 2 * VAR_70 , VAR_74 [ VAR_70 ] ) ; VAR_83 += METHOD_7 ( VAR_72 + 2 * VAR_79 , VAR_74 [ VAR_79 ] ) ; VAR_84 = METHOD_8 ( VAR_90 , VAR_78 [ VAR_79 ] ) + VAR_80 ; VAR_88 = VAR_82 - VAR_83 - VAR_84 ; if ( VAR_88 > VAR_93 ) { VAR_93 = VAR_88 ; VAR_92 = VAR_90 ; } } } * VAR_91 = VAR_92 ; return VAR_93 ; }",334
335," static TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 ,   struct STRUCT_OR_UNION_0 * * VAR_1 )  {  struct STRUCT_OR_UNION_1 VAR_2 ;  TYPE_2 VAR_3 ; METHOD_1 ( & VAR_4 , 0 , sizeof ( VAR_5 ) ) ; VAR_6 . VAR_7 = VAR_8 ; VAR_9 = METHOD_2 ( METHOD_3 , & VAR_10 ) ; if ( VAR_11 == 1 ) { * VAR_12 = VAR_13 . VAR_14 ; return 0 ;  } else {  METHOD_4 ( ""Unabletolocate0xe4descriptorforEXTENDED_COPY\\n"" ) ; return - VAR_15 ; }  } ","static TYPE_0 METHOD_0 ( const unsigned TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * * VAR_17 , struct STRUCT_OR_UNION_3 * * VAR_18 ) { struct STRUCT_OR_UNION_4 * VAR_19 ; struct STRUCT_OR_UNION_5 * VAR_20 ; struct STRUCT_OR_UNION_6 * VAR_21 = VAR_22 ; struct STRUCT_OR_UNION_0 * VAR_14 = VAR_22 ; if ( ! VAR_16 ) goto VAR_23 ; METHOD_5 ( ""XCOPY0xe4:searchingfor:%*ph\\n"" , VAR_24 , VAR_8 ) ; VAR_20 = VAR_16 -> STRUCT_OR_UNION_5 ; METHOD_6 ( ) ; METHOD_7 ( VAR_19 , & VAR_20 -> VAR_25 , VAR_26 ) { struct STRUCT_OR_UNION_0 * VAR_27 ; TYPE_2 VAR_28 ; VAR_21 = METHOD_8 ( VAR_19 -> STRUCT_OR_UNION_6 ) ; VAR_27 = METHOD_9 ( VAR_21 -> VAR_29 ) ; VAR_28 = METHOD_3 ( VAR_27 , VAR_8 ) ; if ( VAR_28 ) { if ( METHOD_10 ( & VAR_21 -> VAR_30 ) ) VAR_14 = VAR_27 ; break ; } } METHOD_11 ( ) ; if ( VAR_14 == VAR_22 ) goto VAR_23 ; METHOD_5 ( ""lun_refheldforse_dev:%pse_dev->se_dev_group:%p\\n"" , VAR_14 , & VAR_14 -> VAR_31 ) ; * VAR_17 = VAR_14 ; * VAR_18 = & VAR_21 -> VAR_30 ; return 0 ; VAR_23 : METHOD_4 ( ""Unabletolocate0xe4descriptorforEXTENDED_COPY\\n"" ) ; return - VAR_15 ; }",335
336,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 = { 0 } ; const TYPE_1 * VAR_3 = VAR_4 ; TYPE_2 VAR_5 ; VAR_6 . VAR_7 = VAR_8 -> VAR_9 [ VAR_10 ] ; VAR_11 . VAR_12 = VAR_13 -> VAR_14 [ VAR_15 ] ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 -> VAR_22 [ VAR_23 ] ; if ( VAR_24 -> VAR_25 [ VAR_26 ] ) VAR_27 . VAR_28 = METHOD_1 ( VAR_29 -> VAR_30 [ VAR_31 ] ) ; if ( VAR_32 -> VAR_33 [ VAR_34 ] ) VAR_35 . VAR_36 = VAR_37 ; if ( VAR_38 -> VAR_39 [ VAR_40 ] ) { VAR_41 = METHOD_2 ( VAR_42 , ""%.*s"" , METHOD_3 ( VAR_43 -> VAR_44 [ VAR_45 ] ) , ( TYPE_3 * ) METHOD_4 ( VAR_46 -> VAR_47 [ VAR_48 ] ) ) ; if ( ! VAR_49 ) return - VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; } if ( VAR_54 -> VAR_55 [ VAR_56 ] ) VAR_57 . VAR_58 = VAR_59 ; else VAR_60 . VAR_61 = ( VAR_62 . VAR_63 > 1 ) ; if ( VAR_64 -> VAR_65 [ VAR_66 ] ) VAR_67 . VAR_68 = METHOD_5 ( VAR_69 -> VAR_70 [ VAR_71 ] ) ; if ( VAR_72 -> VAR_73 [ VAR_74 ] ) { TYPE_4 VAR_75 = METHOD_6 ( VAR_76 -> VAR_77 [ VAR_78 ] ) ;  if ( VAR_79 >= METHOD_7 ( VAR_80 ) )  return - VAR_81 ;  VAR_82 . VAR_83 = VAR_84 [ VAR_85 ] ;  } VAR_86 = METHOD_8 ( VAR_87 , & VAR_88 ) ; METHOD_9 ( VAR_89 ) ; return VAR_90 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 = { 0 } ; const TYPE_1 * VAR_3 = VAR_4 ; TYPE_2 VAR_5 ; VAR_6 . VAR_7 = VAR_8 -> VAR_9 [ VAR_10 ] ; VAR_11 . VAR_12 = VAR_13 -> VAR_14 [ VAR_15 ] ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 -> VAR_22 [ VAR_23 ] ; if ( VAR_24 -> VAR_25 [ VAR_26 ] ) VAR_27 . VAR_28 = METHOD_1 ( VAR_29 -> VAR_30 [ VAR_31 ] ) ; if ( VAR_32 -> VAR_33 [ VAR_34 ] ) VAR_35 . VAR_36 = VAR_37 ; if ( VAR_38 -> VAR_39 [ VAR_40 ] ) { VAR_41 = METHOD_2 ( VAR_42 , ""%.*s"" , METHOD_3 ( VAR_43 -> VAR_44 [ VAR_45 ] ) , ( TYPE_3 * ) METHOD_4 ( VAR_46 -> VAR_47 [ VAR_48 ] ) ) ; if ( ! VAR_49 ) return - VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; } if ( VAR_54 -> VAR_55 [ VAR_56 ] ) VAR_57 . VAR_58 = VAR_59 ; else VAR_60 . VAR_61 = ( VAR_62 . VAR_63 > 1 ) ; if ( VAR_64 -> VAR_65 [ VAR_66 ] ) VAR_67 . VAR_68 = METHOD_5 ( VAR_69 -> VAR_70 [ VAR_71 ] ) ; if ( VAR_72 -> VAR_73 [ VAR_74 ] ) { TYPE_4 VAR_75 = METHOD_6 ( VAR_76 -> VAR_77 [ VAR_78 ] ) ; if ( VAR_79 >= METHOD_7 ( VAR_80 ) ) return - VAR_81 ; } VAR_82 . VAR_83 = VAR_84 [ VAR_85 ] ; } VAR_86 = METHOD_8 ( VAR_87 , & VAR_88 ) ; METHOD_9 ( VAR_89 ) ; return VAR_90 ; }",336
337,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; if ( ! METHOD_1 ( VAR_3 , ( TYPE_4 * ) & VAR_4 , 4 ) ) return ; VAR_5 = METHOD_2 ( VAR_6 ) ;  VAR_7 = METHOD_3 ( ( TYPE_5 ) VAR_8 + 1 ) ;  if ( ! METHOD_4 ( VAR_9 , VAR_10 , VAR_11 ) ) { METHOD_5 ( VAR_12 ) ; return ; } VAR_13 [ VAR_14 ] = 0 ; METHOD_6 ( ""VNCconnectionfailed:%s\\n"" , VAR_15 ) ; METHOD_7 ( VAR_16 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; if ( ! METHOD_1 ( VAR_3 , ( TYPE_4 * ) & VAR_4 , 4 ) ) return ; VAR_5 = METHOD_2 ( VAR_6 ) ; VAR_7 = METHOD_3 ( ( TYPE_5 ) VAR_8 + 1 ) ; if ( ! METHOD_4 ( VAR_9 , VAR_10 , VAR_11 ) ) { METHOD_5 ( VAR_12 ) ; return ; } VAR_13 [ VAR_14 ] = 0 ; METHOD_6 ( ""VNCconnectionfailed:%s\\n"" , VAR_15 ) ; METHOD_7 ( VAR_16 ) ; }",337
338,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 , METHOD_3 ( VAR_4 ) ) ;  } ","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 , METHOD_3 ( VAR_4 ) ) ; if ( METHOD_4 ( ) ) { if ( METHOD_5 ( VAR_2 ) ) METHOD_6 ( VAR_5 , VAR_6 | VAR_7 ) ; else METHOD_7 ( VAR_5 , VAR_6 | VAR_7 ) ; } if ( METHOD_8 ( ) ) METHOD_9 ( VAR_2 ) ; }",338
339,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 * VAR_3 ) { TYPE_3 * VAR_4 = VAR_5 ;  TYPE_4 * VAR_6 ;  TYPE_5 * VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ;  TYPE_8 VAR_10 ;  VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = - VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) goto VAR_22 ; METHOD_3 ( & VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 != 1 ) return - VAR_28 ; METHOD_4 ( & VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; METHOD_5 ( ""%dtickets\\n"" , VAR_33 ) ; while ( VAR_34 -- ) {  VAR_35 = METHOD_6 ( VAR_36 , VAR_37 , & VAR_38 , VAR_39 ,  VAR_40 , VAR_41 ) ; if ( VAR_42 )  goto VAR_43 ;  } VAR_44 = 0 ; VAR_45 : METHOD_7 ( VAR_46 ) ; VAR_47 : METHOD_8 ( VAR_48 ) ; return VAR_49 ; VAR_50 :  VAR_51 = - VAR_52 ;   goto VAR_53 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 * VAR_3 ) { TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = - VAR_17 ; VAR_18 = METHOD_2 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) goto VAR_22 ; METHOD_3 ( & VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 != 1 ) return - VAR_28 ; METHOD_4 ( & VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; METHOD_5 ( ""%dtickets\\n"" , VAR_33 ) ; while ( VAR_34 -- ) { VAR_35 = METHOD_6 ( VAR_36 , VAR_37 , & VAR_38 , VAR_39 ) ; if ( VAR_42 ) goto VAR_43 ; } VAR_44 = 0 ; VAR_45 : METHOD_7 ( VAR_46 ) ; VAR_47 : METHOD_8 ( VAR_48 ) ; return VAR_49 ; VAR_50 : return - VAR_52 ; }",339
340,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_4 VAR_9 , VAR_10 ; METHOD_3 ( METHOD_4 ( VAR_11 ) ) ; VAR_12 -= VAR_13 ; if ( VAR_14 >= VAR_15 . VAR_16 ) { METHOD_5 ( VAR_17 , ""Unrecognizednodetype%d."" , METHOD_6 ( VAR_18 ) ) ; return 0 ; } VAR_19 = & VAR_20 . VAR_21 [ VAR_22 ] ; METHOD_7 ( VAR_23 , VAR_24 -> VAR_25 ) ; VAR_26 = & VAR_27 -> VAR_28 [ VAR_29 -> VAR_30 ] ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; ++ VAR_34 ) { TYPE_5 * VAR_35 = METHOD_8 ( VAR_36 , VAR_37 ) ; TYPE_6 VAR_38 = METHOD_9 ( VAR_39 ) ;  for ( VAR_40 = 0 ; VAR_41 < VAR_42 -> VAR_43 ; ++ VAR_44 ) {  TYPE_7 VAR_45 = VAR_46 -> VAR_47 [ VAR_48 ] . VAR_49 ; METHOD_10 ( VAR_50 < VAR_51 . VAR_52 . VAR_53 ) ; if ( VAR_54 . VAR_55 . VAR_56 [ VAR_57 ] . VAR_58 == VAR_59 ) { if ( METHOD_11 ( VAR_60 ) && ! METHOD_12 ( VAR_61 ) ) return 0 ; VAR_62 = & VAR_63 -> VAR_64 [ VAR_65 -> VAR_66 [ VAR_67 ] . VAR_68 ] ; goto VAR_69 ; } } { TYPE_8 VAR_70 = VAR_71 -> VAR_72 -> VAR_73 ; TYPE_9 VAR_74 ; if ( ! VAR_75 ) goto VAR_76 ; VAR_77 = VAR_78 . VAR_79 . VAR_80 [ VAR_81 ] . VAR_82 ; if ( METHOD_13 ( VAR_83 ) ) METHOD_14 ( VAR_84 , ""Expectednodetype%d,got%d."" , VAR_85 , VAR_86 ) ; else METHOD_15 ( VAR_87 , ""Illegalterminal:expected%s."" , VAR_88 [ VAR_89 ] ) ; return 0 ; } VAR_90 : continue ; } for ( VAR_91 = 0 ; VAR_92 < VAR_93 -> VAR_94 ; ++ VAR_95 ) { if ( ! VAR_96 -> VAR_97 [ VAR_98 ] . VAR_99 ) { return 1 ; } } VAR_100 : METHOD_16 ( VAR_101 , ""Illegalnumberofchildrenfor%snode."" , VAR_102 -> VAR_103 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_3 VAR_3 = METHOD_2 ( VAR_4 ) ; VAR_5 * VAR_6 ; VAR_7 * VAR_8 ; TYPE_4 VAR_9 , VAR_10 ; METHOD_3 ( METHOD_4 ( VAR_11 ) ) ; VAR_12 -= VAR_13 ; if ( VAR_14 >= VAR_15 . VAR_16 ) { METHOD_5 ( VAR_17 , ""Unrecognizednodetype%d."" , METHOD_6 ( VAR_18 ) ) ; return 0 ; } VAR_19 = & VAR_20 . VAR_21 [ VAR_22 ] ; METHOD_7 ( VAR_23 , VAR_24 -> VAR_25 ) ; VAR_26 = & VAR_27 -> VAR_28 [ VAR_29 -> VAR_30 ] ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; ++ VAR_34 ) { TYPE_5 * VAR_35 = METHOD_8 ( VAR_36 , VAR_37 ) ; TYPE_6 VAR_38 = METHOD_9 ( VAR_39 ) ; for ( VAR_40 = 0 ; VAR_41 < VAR_42 -> VAR_43 ; ++ VAR_44 ) { TYPE_7 VAR_45 = VAR_46 -> VAR_47 [ VAR_48 ] . VAR_49 ; METHOD_10 ( VAR_50 < VAR_51 . VAR_52 . VAR_53 ) ; if ( VAR_54 . VAR_55 . VAR_56 [ VAR_57 ] . VAR_58 == VAR_59 ) { if ( METHOD_11 ( VAR_60 ) && ! METHOD_12 ( VAR_61 ) ) return 0 ; VAR_62 = & VAR_63 -> VAR_64 [ VAR_65 -> VAR_66 [ VAR_67 ] . VAR_68 ] ; goto VAR_69 ; } } { TYPE_8 VAR_70 = VAR_71 -> VAR_72 -> VAR_73 ; TYPE_9 VAR_74 ; if ( ! VAR_75 ) goto VAR_76 ; VAR_77 = VAR_78 . VAR_79 . VAR_80 [ VAR_81 ] . VAR_82 ; if ( METHOD_13 ( VAR_83 ) ) METHOD_14 ( VAR_84 , ""Expectednodetype%d,got%d."" , VAR_85 , VAR_86 ) ; else METHOD_15 ( VAR_87 , ""Illegalterminal:expected%s."" , VAR_88 [ VAR_89 ] ) ; return 0 ; } VAR_90 : continue ; } for ( VAR_91 = 0 ; VAR_92 < VAR_93 -> VAR_94 ; ++ VAR_95 ) { if ( ! VAR_96 -> VAR_97 [ VAR_98 ] . VAR_99 ) { return 1 ; } } VAR_100 : METHOD_16 ( VAR_101 , ""Illegalnumberofchildrenfor%snode."" , VAR_102 -> VAR_103 ) ; return 0 ; }",340
341,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ; VAR_8 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ;  VAR_13 = METHOD_2 ( VAR_14 ) ;  VAR_15 = METHOD_3 ( VAR_16 + VAR_17 ) ; VAR_18 = ( TYPE_5 * ) METHOD_4 ( VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 ) ; METHOD_6 ( VAR_22 ) = VAR_23 + VAR_24 ; METHOD_7 ( METHOD_8 ( VAR_25 ) , METHOD_9 ( VAR_26 ) , METHOD_10 ( VAR_27 ) ) ; VAR_28 = METHOD_11 ( VAR_29 ) ; if ( VAR_30 == 0 ) { METHOD_12 ( METHOD_13 ( VAR_31 ) + METHOD_14 ( VAR_32 ) , METHOD_15 ( VAR_33 ) , METHOD_16 ( VAR_34 ) ) ; } else if ( VAR_35 > 0 ) { VAR_36 = VAR_37 - VAR_38 ; VAR_39 = METHOD_17 ( VAR_40 ) + METHOD_18 ( VAR_41 ) - 1 ; for ( VAR_42 = METHOD_19 ( VAR_43 ) ; VAR_44 < METHOD_20 ( VAR_45 ) ; VAR_46 ++ ) { * VAR_47 |= ( ( * VAR_48 >> VAR_49 ) & VAR_50 ) ; VAR_51 ++ ; if ( VAR_52 < METHOD_21 ( VAR_53 ) ) * VAR_54 = ( * VAR_55 << VAR_56 ) & VAR_57 ; } } return VAR_58 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ; VAR_8 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ; VAR_13 = METHOD_2 ( VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 + VAR_17 ) ; VAR_18 = ( TYPE_5 * ) METHOD_4 ( VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 ) ; METHOD_6 ( VAR_22 ) = VAR_23 + VAR_24 ; METHOD_7 ( METHOD_8 ( VAR_25 ) , METHOD_9 ( VAR_26 ) , METHOD_10 ( VAR_27 ) ) ; VAR_28 = METHOD_11 ( VAR_29 ) ; if ( VAR_30 == 0 ) { METHOD_12 ( METHOD_13 ( VAR_31 ) + METHOD_14 ( VAR_32 ) , METHOD_15 ( VAR_33 ) , METHOD_16 ( VAR_34 ) ) ; } else if ( VAR_35 > 0 ) { VAR_36 = VAR_37 - VAR_38 ; VAR_39 = METHOD_17 ( VAR_40 ) + METHOD_18 ( VAR_41 ) - 1 ; for ( VAR_42 = METHOD_19 ( VAR_43 ) ; VAR_44 < METHOD_20 ( VAR_45 ) ; VAR_46 ++ ) { * VAR_47 |= ( ( * VAR_48 >> VAR_49 ) & VAR_50 ) ; VAR_51 ++ ; if ( VAR_52 < METHOD_21 ( VAR_53 ) ) * VAR_54 = ( * VAR_55 << VAR_56 ) & VAR_57 ; } } return VAR_58 ; }",341
342,"static unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = container_of ( VAR_2 , struct STRUCT_OR_UNION_2 , VAR_3 ) ;  return VAR_4 -> VAR_5 . VAR_6 ?  VAR_7 -> VAR_8 . METHOD_1 : VAR_9 -> METHOD_2 ; }","static unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = container_of ( VAR_2 , struct STRUCT_OR_UNION_2 , VAR_3 ) ; return VAR_9 -> METHOD_2 ; }",342
343," static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 * VAR_6 = ( TYPE_6 * ) VAR_7 ; TYPE_7 VAR_8 = VAR_9 / 4 ;  METHOD_2 ( ( VAR_10 % ( 4 * VAR_11 ) ) == 0 ) ;  if ( VAR_12 > VAR_13 ) { VAR_14 -= VAR_15 ; do { REPEAT4 ( VAR_16 , VAR_17 [ VAR_18 ] += VAR_19 [ 0 ] ; VAR_20 ++ ) VAR_21 -= VAR_22 ; } while ( VAR_23 > 0 ) ; }  } ","static TYPE_8 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = METHOD_1 ( VAR_4 ) -> VAR_5 ; TYPE_5 * VAR_6 = ( TYPE_6 * ) VAR_7 ; TYPE_7 VAR_8 = VAR_9 / 4 ; if ( ( VAR_10 % ( 4 * VAR_11 ) ) == 0 ) ; if ( VAR_12 > VAR_13 ) { VAR_14 -= VAR_15 ; do { REPEAT4 ( VAR_16 , VAR_17 [ VAR_18 ] += VAR_19 [ 0 ] ; VAR_20 ++ ) VAR_21 -= VAR_22 ; } while ( VAR_23 > 0 ) ; } return 1 ; }",343
344,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_5 * VAR_2 = METHOD_1 ( STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_3 = STRUCT_OR_UNION_8 -> VAR_4 ; struct STRUCT_OR_UNION_9 * STRUCT_OR_UNION_10 = METHOD_2 ( VAR_5 ) ; struct STRUCT_OR_UNION_11 * VAR_6 = METHOD_3 ( VAR_7 ) ; struct STRUCT_OR_UNION_12 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_13 * VAR_11 = VAR_12 ; TYPE_2 VAR_13 = 0 ; TYPE_3 VAR_14 ; unsigned TYPE_4 VAR_15 ; struct STRUCT_OR_UNION_14 * VAR_16 ; TYPE_5 VAR_17 ; struct STRUCT_OR_UNION_15 VAR_18 ; TYPE_6 VAR_19 ; TYPE_7 VAR_20 = 0 ; if ( VAR_21 == VAR_22 -> VAR_23 ) VAR_24 -> VAR_25 = & VAR_26 ; METHOD_4 ( ) ;  VAR_27 = METHOD_5 ( STRUCT_OR_UNION_16 , VAR_28 , VAR_29 -> VAR_30 ) ;  if ( VAR_31 < 0 ) return VAR_32 ; VAR_33 = - VAR_34 ; if ( VAR_35 -> VAR_36 & VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 ) { VAR_41 = METHOD_6 ( VAR_42 , VAR_43 -> VAR_44 , & VAR_45 ) ; if ( VAR_46 < 0 ) goto VAR_47 ; VAR_48 = VAR_49 ; } else { VAR_50 = VAR_51 ; VAR_52 = - VAR_53 ; VAR_54 = METHOD_7 ( VAR_55 ) ; if ( ! VAR_56 ) goto VAR_57 ; } if ( METHOD_8 ( VAR_58 , & STRUCT_OR_UNION_17 -> VAR_59 ) && ! VAR_60 -> VAR_61 && ( VAR_62 = METHOD_9 ( STRUCT_OR_UNION_18 ) ) != 0 ) goto VAR_63 ; VAR_64 = - VAR_65 ; if ( VAR_66 > VAR_67 -> VAR_68 - 32 ) goto VAR_69 ; if ( VAR_70 > VAR_71 ) VAR_72 = METHOD_10 ( TYPE_8 , VAR_73 - VAR_74 , VAR_75 * VAR_76 ) ; VAR_77 = METHOD_11 ( VAR_78 , VAR_79 - VAR_80 , VAR_81 , VAR_82 -> VAR_83 & VAR_84 , & VAR_85 ) ; if ( VAR_86 == VAR_87 ) goto VAR_88 ; VAR_89 = METHOD_12 ( VAR_90 -> VAR_91 , VAR_92 , VAR_93 ) ; if ( VAR_94 < 0 ) goto VAR_95 ; VAR_96 = VAR_97 + 1 ; METHOD_13 ( VAR_98 -> VAR_99 , VAR_100 ) ; METHOD_14 ( VAR_101 , VAR_102 - VAR_103 ) ; VAR_104 -> VAR_105 = VAR_106 ; VAR_107 -> VAR_108 = VAR_109 ; VAR_110 = METHOD_15 ( VAR_111 , 0 , VAR_112 -> VAR_113 , 0 , VAR_114 ) ; if ( VAR_115 ) goto VAR_116 ; VAR_117 = METHOD_16 ( VAR_118 , VAR_119 -> VAR_120 & VAR_121 ) ; VAR_122 : if ( ! VAR_123 ) { VAR_124 = - VAR_125 ; if ( VAR_126 == VAR_127 ) goto VAR_128 ; VAR_129 = METHOD_17 ( STRUCT_OR_UNION_19 , VAR_130 , VAR_131 , VAR_132 -> VAR_133 , VAR_134 , & VAR_135 ) ; if ( VAR_136 == VAR_137 ) goto VAR_138 ; } if ( METHOD_18 ( VAR_139 , VAR_140 ) < 0 ) { VAR_141 = VAR_142 ; goto VAR_143 ; } METHOD_19 ( VAR_144 ) ; VAR_145 = - VAR_146 ; if ( ! METHOD_20 ( VAR_147 , VAR_148 ) ) goto VAR_149 ; if ( METHOD_21 ( VAR_150 , VAR_151 ) ) { METHOD_22 ( VAR_152 ) ; METHOD_23 ( VAR_153 ) ; VAR_154 = 0 ; METHOD_24 ( VAR_155 ) ; if ( METHOD_25 ( VAR_156 ) == VAR_157 ) { METHOD_26 ( VAR_158 ) = VAR_159 ; METHOD_27 ( VAR_160 ) ; METHOD_28 ( VAR_161 , VAR_162 ) ; METHOD_29 ( VAR_163 ) ; VAR_164 = - VAR_165 ; } else { METHOD_30 ( VAR_166 ) ; } VAR_167 = VAR_168 ; if ( VAR_169 ) goto VAR_170 ; goto VAR_171 ; } VAR_172 = - VAR_173 ; if ( VAR_174 -> VAR_175 & VAR_176 ) goto VAR_177 ; if ( VAR_178 -> VAR_179 != VAR_180 ) { VAR_181 = METHOD_31 ( VAR_182 -> VAR_183 , VAR_184 -> VAR_185 ) ; if ( VAR_186 ) goto VAR_187 ; } if ( METHOD_32 ( VAR_188 ) != VAR_189 && METHOD_33 ( VAR_190 ) ) { if ( ! VAR_191 ) { VAR_192 = - VAR_193 ; goto VAR_194 ; } VAR_195 = METHOD_34 ( VAR_196 , VAR_197 ) ; VAR_198 = METHOD_35 ( VAR_199 ) ; if ( METHOD_36 ( VAR_200 ) ) goto VAR_201 ; goto VAR_202 ; } if ( METHOD_37 ( VAR_203 , VAR_204 ) ) METHOD_38 ( VAR_205 ) ; METHOD_39 ( VAR_206 , STRUCT_OR_UNION_20 , VAR_207 ) ; METHOD_40 ( & VAR_208 -> VAR_209 , VAR_210 ) ; if ( VAR_211 > METHOD_41 ( VAR_212 ) -> VAR_213 ) METHOD_42 ( VAR_214 ) -> VAR_215 = VAR_216 ; METHOD_43 ( VAR_217 ) ; VAR_218 -> METHOD_44 ( VAR_219 , VAR_220 ) ; METHOD_45 ( VAR_221 ) ; METHOD_46 ( VAR_222 -> VAR_223 ) ; return VAR_224 ; VAR_225 : METHOD_47 ( VAR_226 ) ; VAR_227 : METHOD_48 ( VAR_228 ) ; VAR_229 : if ( VAR_230 ) METHOD_49 ( VAR_231 ) ; METHOD_50 ( VAR_232 -> VAR_233 ) ; return VAR_234 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_5 * VAR_2 = METHOD_1 ( STRUCT_OR_UNION_6 ) ; struct STRUCT_OR_UNION_7 * VAR_3 = STRUCT_OR_UNION_8 -> VAR_4 ; struct STRUCT_OR_UNION_9 * STRUCT_OR_UNION_10 = METHOD_2 ( VAR_5 ) ; struct STRUCT_OR_UNION_11 * VAR_6 = METHOD_3 ( VAR_7 ) ; struct STRUCT_OR_UNION_12 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_13 * VAR_11 = VAR_12 ; TYPE_2 VAR_13 = 0 ; TYPE_3 VAR_14 ; unsigned TYPE_4 VAR_15 ; struct STRUCT_OR_UNION_14 * VAR_16 ; TYPE_5 VAR_17 ; struct STRUCT_OR_UNION_15 VAR_18 ; TYPE_6 VAR_19 ; TYPE_7 VAR_20 = 0 ; if ( VAR_21 == VAR_22 -> VAR_23 ) VAR_24 -> VAR_25 = & VAR_26 ; METHOD_4 ( ) ; VAR_27 = METHOD_5 ( STRUCT_OR_UNION_16 , VAR_28 , VAR_29 -> VAR_30 ) ; if ( VAR_31 < 0 ) return VAR_32 ; VAR_33 = - VAR_34 ; if ( VAR_35 -> VAR_36 & VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 ) { VAR_41 = METHOD_6 ( VAR_42 , VAR_43 -> VAR_44 , & VAR_45 ) ; if ( VAR_46 < 0 ) goto VAR_47 ; VAR_48 = VAR_49 ; } else { VAR_50 = VAR_51 ; VAR_52 = - VAR_53 ; VAR_54 = METHOD_7 ( VAR_55 ) ; if ( ! VAR_56 ) goto VAR_57 ; } if ( METHOD_8 ( VAR_58 , & STRUCT_OR_UNION_17 -> VAR_59 ) && ! VAR_60 -> VAR_61 && ( VAR_62 = METHOD_9 ( STRUCT_OR_UNION_18 ) ) != 0 ) goto VAR_63 ; VAR_64 = - VAR_65 ; if ( VAR_66 > VAR_67 -> VAR_68 - 32 ) goto VAR_69 ; if ( VAR_70 > VAR_71 ) VAR_72 = METHOD_10 ( TYPE_8 , VAR_73 - VAR_74 , VAR_75 * VAR_76 ) ; VAR_77 = METHOD_11 ( VAR_78 , VAR_79 - VAR_80 , VAR_81 , VAR_82 -> VAR_83 & VAR_84 , & VAR_85 ) ; if ( VAR_86 == VAR_87 ) goto VAR_88 ; VAR_89 = METHOD_12 ( VAR_90 -> VAR_91 , VAR_92 , VAR_93 ) ; if ( VAR_94 < 0 ) goto VAR_95 ; VAR_96 = VAR_97 + 1 ; METHOD_13 ( VAR_98 -> VAR_99 , VAR_100 ) ; METHOD_14 ( VAR_101 , VAR_102 - VAR_103 ) ; VAR_104 -> VAR_105 = VAR_106 ; VAR_107 -> VAR_108 = VAR_109 ; VAR_110 = METHOD_15 ( VAR_111 , 0 , VAR_112 -> VAR_113 , 0 , VAR_114 ) ; if ( VAR_115 ) goto VAR_116 ; VAR_117 = METHOD_16 ( VAR_118 , VAR_119 -> VAR_120 & VAR_121 ) ; VAR_122 : if ( ! VAR_123 ) { VAR_124 = - VAR_125 ; if ( VAR_126 == VAR_127 ) goto VAR_128 ; VAR_129 = METHOD_17 ( STRUCT_OR_UNION_19 , VAR_130 , VAR_131 , VAR_132 -> VAR_133 , VAR_134 , & VAR_135 ) ; if ( VAR_136 == VAR_137 ) goto VAR_138 ; } if ( METHOD_18 ( VAR_139 , VAR_140 ) < 0 ) { VAR_141 = VAR_142 ; goto VAR_143 ; } METHOD_19 ( VAR_144 ) ; VAR_145 = - VAR_146 ; if ( ! METHOD_20 ( VAR_147 , VAR_148 ) ) goto VAR_149 ; if ( METHOD_21 ( VAR_150 , VAR_151 ) ) { METHOD_22 ( VAR_152 ) ; METHOD_23 ( VAR_153 ) ; VAR_154 = 0 ; METHOD_24 ( VAR_155 ) ; if ( METHOD_25 ( VAR_156 ) == VAR_157 ) { METHOD_26 ( VAR_158 ) = VAR_159 ; METHOD_27 ( VAR_160 ) ; METHOD_28 ( VAR_161 , VAR_162 ) ; METHOD_29 ( VAR_163 ) ; VAR_164 = - VAR_165 ; } else { METHOD_30 ( VAR_166 ) ; } VAR_167 = VAR_168 ; if ( VAR_169 ) goto VAR_170 ; goto VAR_171 ; } VAR_172 = - VAR_173 ; if ( VAR_174 -> VAR_175 & VAR_176 ) goto VAR_177 ; if ( VAR_178 -> VAR_179 != VAR_180 ) { VAR_181 = METHOD_31 ( VAR_182 -> VAR_183 , VAR_184 -> VAR_185 ) ; if ( VAR_186 ) goto VAR_187 ; } if ( METHOD_32 ( VAR_188 ) != VAR_189 && METHOD_33 ( VAR_190 ) ) { if ( ! VAR_191 ) { VAR_192 = - VAR_193 ; goto VAR_194 ; } VAR_195 = METHOD_34 ( VAR_196 , VAR_197 ) ; VAR_198 = METHOD_35 ( VAR_199 ) ; if ( METHOD_36 ( VAR_200 ) ) goto VAR_201 ; goto VAR_202 ; } if ( METHOD_37 ( VAR_203 , VAR_204 ) ) METHOD_38 ( VAR_205 ) ; METHOD_39 ( VAR_206 , STRUCT_OR_UNION_20 , VAR_207 ) ; METHOD_40 ( & VAR_208 -> VAR_209 , VAR_210 ) ; if ( VAR_211 > METHOD_41 ( VAR_212 ) -> VAR_213 ) METHOD_42 ( VAR_214 ) -> VAR_215 = VAR_216 ; METHOD_43 ( VAR_217 ) ; VAR_218 -> METHOD_44 ( VAR_219 , VAR_220 ) ; METHOD_45 ( VAR_221 ) ; METHOD_46 ( VAR_222 -> VAR_223 ) ; return VAR_224 ; VAR_225 : METHOD_47 ( VAR_226 ) ; VAR_227 : METHOD_48 ( VAR_228 ) ; VAR_229 : if ( VAR_230 ) METHOD_49 ( VAR_231 ) ; METHOD_50 ( VAR_232 -> VAR_233 , VAR_235 ) ; return VAR_234 ; }",344
345,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { enum VAR_1 VAR_2 = VAR_3 ; TYPE_1 VAR_4 ; do { METHOD_1 ( & VAR_5 ) ; VAR_6 = METHOD_2 ( ) ; if ( VAR_7 > 0 ) { if ( METHOD_3 ( ) ) VAR_8 = METHOD_4 ( VAR_9 ) ; else VAR_10 = METHOD_5 ( ) ; }  if ( VAR_11 < 0 )   VAR_12 = METHOD_6 ( - VAR_13 , VAR_14 ) ;  VAR_15 = METHOD_7 ( VAR_16 ) ; METHOD_8 ( & VAR_17 ) ; METHOD_9 ( ) ; } while ( VAR_18 && VAR_19 == VAR_20 ) ; if ( VAR_21 == VAR_22 ) METHOD_10 ( & VAR_23 , VAR_24 . VAR_25 * VAR_26 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { enum VAR_1 VAR_2 = VAR_3 ; TYPE_1 VAR_4 ; do { METHOD_1 ( & VAR_5 ) ; VAR_6 = METHOD_2 ( ) ; if ( VAR_7 > 0 ) { if ( METHOD_3 ( ) ) VAR_8 = METHOD_4 ( VAR_9 ) ; else VAR_10 = METHOD_5 ( ) ; } if ( VAR_11 < 0 ) { TYPE_1 VAR_27 ; VAR_27 = METHOD_12 ( - VAR_18 , METHOD_11 ( ) ) ; VAR_12 = METHOD_6 ( VAR_27 , VAR_14 ) ; if ( VAR_21 == VAR_20 && VAR_27 != - VAR_18 && VAR_27 < VAR_28 ) VAR_21 = VAR_22 ; } VAR_15 = METHOD_7 ( VAR_16 ) ; METHOD_8 ( & VAR_17 ) ; METHOD_9 ( ) ; } while ( VAR_18 && VAR_19 == VAR_20 ) ; if ( VAR_21 == VAR_22 ) METHOD_10 ( & VAR_23 , VAR_24 . VAR_25 * VAR_26 ) ; }",345
346,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 , VAR_6 , VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 * VAR_9 = VAR_10 -> VAR_11 ; TYPE_8 * VAR_12 = & VAR_13 -> VAR_14 ; TYPE_9 VAR_15 , VAR_16 , VAR_17 ; TYPE_10 VAR_18 ; TYPE_11 VAR_19 = 0 ; TYPE_12 VAR_20 = 0 ; TYPE_13 VAR_21 = 0 ; TYPE_14 VAR_22 = 0 ; TYPE_15 VAR_23 = 0 ; TYPE_16 VAR_24 = 0 ; TYPE_17 VAR_25 = 0 ; TYPE_18 VAR_26 = 0 ; TYPE_19 VAR_27 = 0 ; TYPE_20 VAR_28 ; TYPE_21 VAR_29 ; TYPE_22 VAR_30 , VAR_31 , VAR_32 , VAR_33 , VAR_34 ; VAR_35 ; VAR_36 = METHOD_1 ( VAR_37 , 8 ) ; METHOD_2 ( ""SPS:profile_idc"" , VAR_38 ) ; VAR_39 = METHOD_3 ( VAR_40 ) ; VAR_41 = METHOD_4 ( VAR_42 ) ; METHOD_5 ( VAR_43 ) ; METHOD_6 ( VAR_44 , 5 ) ; if ( ( VAR_45 != VAR_46 ) && ( VAR_47 != VAR_48 ) && ( VAR_49 != VAR_50 ) ) { if ( ( VAR_51 != VAR_52 ) || ( ( VAR_53 != 1 ) && ( VAR_54 != 1 ) ) ) { return ( VAR_55 ) ; } } VAR_56 = METHOD_7 ( VAR_57 , 8 ) ; METHOD_8 ( ""SPS:u4_level_idc"" , VAR_58 ) ; VAR_59 = METHOD_9 ( VAR_60 , VAR_61 ) ; if ( VAR_62 & VAR_63 ) return VAR_64 ; VAR_65 = VAR_66 ; METHOD_10 ( ""SPS:seq_parameter_set_id"" , VAR_67 ) ; VAR_68 = VAR_69 -> VAR_70 ; * VAR_71 = VAR_72 -> VAR_73 [ VAR_74 ] ; if ( VAR_75 == VAR_76 -> VAR_77 ) VAR_78 -> VAR_79 = VAR_80 ; VAR_81 -> VAR_82 = VAR_83 ; VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; VAR_90 -> VAR_91 = 1 ; VAR_92 -> VAR_93 = 0 ; VAR_94 -> VAR_95 = 0 ; VAR_96 -> VAR_97 = 0 ; VAR_98 -> VAR_99 = 0 ; if ( VAR_100 == VAR_101 ) { VAR_102 -> VAR_103 = METHOD_11 ( VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 != 1 ) { return VAR_108 ; } VAR_109 -> VAR_110 = METHOD_12 ( VAR_111 , VAR_112 ) ; if ( VAR_113 -> VAR_114 != 0 ) { return VAR_115 ; } VAR_116 -> VAR_117 = METHOD_13 ( VAR_118 , VAR_119 ) ; if ( VAR_120 -> VAR_121 != 0 ) { return VAR_122 ; } VAR_123 -> VAR_124 = ( TYPE_23 ) METHOD_14 ( VAR_125 ) ; if ( VAR_126 -> VAR_127 != 0 ) { return VAR_128 ; } VAR_129 -> VAR_130 = ( TYPE_24 ) METHOD_15 ( VAR_131 ) ; if ( VAR_132 -> VAR_133 ) { for ( VAR_134 = 0 ; VAR_135 < 8 ; VAR_136 ++ ) { VAR_137 -> VAR_138 [ VAR_139 ] = METHOD_16 ( VAR_140 ) ; VAR_141 -> VAR_142 [ VAR_143 ] = 0 ; if ( VAR_144 -> VAR_145 [ VAR_146 ] ) { if ( VAR_147 < 6 ) { METHOD_17 ( VAR_148 -> VAR_149 [ VAR_150 ] , 16 , & VAR_151 -> VAR_152 [ VAR_153 ] , VAR_154 ) ; } else { METHOD_18 ( VAR_155 -> VAR_156 [ VAR_157 - 6 ] , 64 , & VAR_158 -> VAR_159 [ VAR_160 ] , VAR_161 ) ; } } } } } VAR_162 = 4 + METHOD_19 ( VAR_163 , VAR_164 ) ; if ( VAR_165 > VAR_166 ) { return VAR_167 ; } VAR_168 -> VAR_169 = VAR_170 ; METHOD_20 ( ""SPS:log2_max_frame_num_minus4"" , ( VAR_171 -> VAR_172 - 4 ) ) ; VAR_173 = ( 1 << ( VAR_174 -> VAR_175 ) ) ; VAR_176 -> VAR_177 = VAR_178 - 1 ; VAR_179 = METHOD_21 ( VAR_180 , VAR_181 ) ; if ( VAR_182 > VAR_183 ) { return VAR_184 ; } VAR_185 -> VAR_186 = VAR_187 ; METHOD_22 ( ""SPS:pic_order_cnt_type"" , VAR_188 -> VAR_189 ) ; VAR_190 -> VAR_191 = 1 ; if ( VAR_192 -> VAR_193 == 0 ) { VAR_194 = 4 + METHOD_23 ( VAR_195 , VAR_196 ) ; if ( VAR_197 > VAR_198 ) { return VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = ( 1 << VAR_205 ) ; METHOD_24 ( ""SPS:log2_max_pic_order_cnt_lsb_minus4"" , ( VAR_206 - 4 ) ) ; } else if ( VAR_207 -> VAR_208 == 1 ) { VAR_209 -> VAR_210 = METHOD_25 ( VAR_211 ) ; METHOD_26 ( ""SPS:delta_pic_order_always_zero_flag"" , VAR_212 -> VAR_213 ) ; VAR_214 -> VAR_215 = METHOD_27 ( VAR_216 , VAR_217 ) ; METHOD_28 ( ""SPS:offset_for_non_ref_pic"" , VAR_218 -> VAR_219 ) ; VAR_220 -> VAR_221 = METHOD_29 ( VAR_222 , VAR_223 ) ; METHOD_30 ( ""SPS:offset_for_top_to_bottom_field"" , VAR_224 -> VAR_225 ) ; VAR_226 = METHOD_31 ( VAR_227 , VAR_228 ) ; if ( VAR_229 > 255 ) return VAR_230 ; VAR_231 -> VAR_232 = VAR_233 ; METHOD_32 ( ""SPS:num_ref_frames_in_pic_order_cnt_cycle"" , VAR_234 -> VAR_235 ) ; for ( VAR_236 = 0 ; VAR_237 < VAR_238 -> VAR_239 ; VAR_240 ++ ) { VAR_241 -> VAR_242 [ VAR_243 ] = METHOD_33 ( VAR_244 , VAR_245 ) ; METHOD_34 ( ""SPS:offset_for_ref_frame"" , VAR_246 -> VAR_247 [ VAR_248 ] ) ; } } VAR_249 = METHOD_35 ( VAR_250 , VAR_251 ) ; if ( ( VAR_252 > VAR_253 ) ) { return VAR_254 ; } VAR_255 -> VAR_256 = VAR_257 ; METHOD_36 ( ""SPS:num_ref_frames"" , VAR_258 -> VAR_259 ) ; VAR_260 -> VAR_261 = METHOD_37 ( VAR_262 ) ; METHOD_38 ( ""SPS:gaps_in_frame_num_value_allowed_flag"" , VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 = 1 + METHOD_39 ( VAR_267 , VAR_268 ) ; METHOD_40 ( ""SPS:pic_width_in_mbs_minus1"" , VAR_269 -> VAR_270 - 1 ) ; VAR_271 = ( VAR_272 -> VAR_273 << 4 ) ; VAR_274 = METHOD_41 ( VAR_275 , VAR_276 ) ; VAR_277 -> VAR_278 = 1 + VAR_279 ; VAR_280 = ( VAR_281 -> VAR_282 << 4 ) ; VAR_283 -> VAR_284 = ( VAR_285 -> VAR_286 * VAR_287 -> VAR_288 ) - 1 ; VAR_289 -> VAR_290 = VAR_291 -> VAR_292 + 1 ; VAR_293 -> VAR_294 = METHOD_42 ( VAR_295 , VAR_296 -> VAR_297 ) ; VAR_298 = METHOD_43 ( VAR_299 ) ; VAR_300 -> VAR_301 = VAR_302 ; METHOD_44 ( ""SPS:frame_mbs_only_flag"" , VAR_303 ) ; if ( ! VAR_304 ) { VAR_305 <<= 1 ; VAR_306 -> VAR_307 = METHOD_45 ( VAR_308 ) ; METHOD_46 ( ""SPS:mb_adaptive_frame_field_flag"" , VAR_309 -> VAR_310 ) ; } else VAR_311 -> VAR_312 = 0 ; VAR_313 -> VAR_314 = METHOD_47 ( VAR_315 ) ; METHOD_48 ( ""SPS:direct_8x8_inference_flag"" , VAR_316 -> VAR_317 ) ; VAR_318 = METHOD_49 ( VAR_319 ) ; METHOD_50 ( ""SPS:frame_cropping_flag"" , VAR_320 ) ; if ( VAR_321 ) { VAR_322 = METHOD_51 ( VAR_323 , VAR_324 ) ; METHOD_52 ( ""SPS:frame_cropping_rect_left_offset"" , VAR_325 ) ; VAR_326 = METHOD_53 ( VAR_327 , VAR_328 ) ; METHOD_54 ( ""SPS:frame_cropping_rect_right_offset"" , VAR_329 ) ; VAR_330 = METHOD_55 ( VAR_331 , VAR_332 ) ; METHOD_56 ( ""SPS:frame_cropping_rect_top_offset"" , VAR_333 ) ; VAR_334 = METHOD_57 ( VAR_335 , VAR_336 ) ; METHOD_58 ( ""SPS:frame_cropping_rect_bottom_offset"" , VAR_337 ) ; } VAR_338 -> VAR_339 = METHOD_59 ( VAR_340 ) ; METHOD_60 ( ""SPS:vui_parameters_present_flag"" , VAR_341 -> VAR_342 ) ; VAR_343 = VAR_344 + ( TYPE_25 ) ( VAR_345 << 1 ) ; if ( 1 == VAR_346 -> VAR_347 ) { if ( VAR_348 -> VAR_349 > VAR_350 ) VAR_351 = VAR_352 -> VAR_353 ; } VAR_354 = VAR_355 + ( TYPE_26 ) ( VAR_356 << 2 ) ; VAR_357 = VAR_358 + ( TYPE_27 ) ( VAR_359 << 2 ) ; VAR_360 = METHOD_61 ( VAR_361 , VAR_362 ) ; VAR_363 = ( VAR_364 >> 1 ) + ( TYPE_28 ) ( VAR_365 << 2 ) ; VAR_366 = METHOD_62 ( VAR_367 , ( VAR_368 >> 1 ) ) ; { TYPE_29 VAR_369 = 0 ; TYPE_30 VAR_370 = 0 ; TYPE_31 VAR_371 = 0 ; TYPE_32 VAR_372 = 0 ; TYPE_33 VAR_373 ; TYPE_34 VAR_374 ; TYPE_35 VAR_375 , VAR_376 ; if ( VAR_377 ) { VAR_378 = VAR_379 << 1 ; VAR_380 = VAR_381 << 1 ; VAR_382 = ( 1 == VAR_383 -> VAR_384 ) ; VAR_385 = ( 2 - VAR_386 ) ; VAR_387 = ( VAR_388 << VAR_389 ) ; VAR_390 = ( VAR_391 << VAR_392 ) ; } VAR_393 = ( VAR_394 * VAR_395 ) + ( VAR_396 ) ; VAR_397 = ( VAR_398 * ( VAR_399 >> 1 ) ) + ( VAR_400 >> 1 ) * VAR_401 ; VAR_402 = VAR_403 - ( VAR_404 + VAR_405 ) ; VAR_406 = VAR_407 - ( VAR_408 + VAR_409 ) ; if ( ( VAR_410 < VAR_411 ) || ( VAR_412 < VAR_413 ) ) { return VAR_414 ; } if ( ( 3 == VAR_415 -> VAR_416 ) && ( VAR_417 -> VAR_418 != VAR_419 ) ) { VAR_420 -> VAR_421 = 1 ; return VAR_422 ; } if ( ( 3 == VAR_423 -> VAR_424 ) && ( VAR_425 -> VAR_426 != VAR_427 ) ) { VAR_428 -> VAR_429 = 1 ; return VAR_430 ; } if ( ( VAR_431 > VAR_432 ) || ( VAR_433 > VAR_434 ) ) { return VAR_435 ; }  VAR_436 -> VAR_437 = VAR_438 ;  VAR_439 -> VAR_440 = VAR_441 ; } if ( 1 == VAR_442 -> VAR_443 ) { VAR_444 = METHOD_63 ( & VAR_445 -> VAR_446 , VAR_447 ) ; if ( VAR_448 != VAR_449 ) return VAR_450 ; } VAR_451 -> VAR_452 = VAR_453 ; VAR_454 -> VAR_455 = VAR_456 ; VAR_457 -> VAR_458 = VAR_459 ; VAR_460 -> VAR_461 = VAR_462 ; VAR_463 -> VAR_464 = VAR_465 ; VAR_466 -> VAR_467 = VAR_468 ; VAR_469 -> VAR_470 . VAR_471 = ( TYPE_36 ) ( VAR_472 << ( 1 - VAR_473 ) ) ; VAR_474 -> VAR_475 . VAR_476 = ( TYPE_37 ) ( VAR_477 << ( 1 - VAR_478 ) ) ; VAR_479 -> VAR_480 = VAR_481 -> VAR_482 ; VAR_483 -> VAR_484 = VAR_485 -> VAR_486 ; VAR_487 -> VAR_488 = VAR_489 ; VAR_490 -> VAR_491 = VAR_492 ; if ( VAR_493 -> VAR_494 > VAR_495 -> VAR_496 ) { return VAR_497 ; } VAR_498 -> VAR_499 = VAR_500 ; VAR_501 -> VAR_502 [ VAR_503 ] = * VAR_504 ; return VAR_505 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 , VAR_6 , VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 * VAR_9 = VAR_10 -> VAR_11 ; TYPE_8 * VAR_12 = & VAR_13 -> VAR_14 ; TYPE_9 VAR_15 , VAR_16 , VAR_17 ; TYPE_10 VAR_18 ; TYPE_11 VAR_19 = 0 ; TYPE_12 VAR_20 = 0 ; TYPE_13 VAR_21 = 0 ; TYPE_14 VAR_22 = 0 ; TYPE_15 VAR_23 = 0 ; TYPE_16 VAR_24 = 0 ; TYPE_17 VAR_25 = 0 ; TYPE_18 VAR_26 = 0 ; TYPE_19 VAR_27 = 0 ; TYPE_20 VAR_28 ; TYPE_21 VAR_29 ; TYPE_22 VAR_30 , VAR_31 , VAR_32 , VAR_33 , VAR_34 ; VAR_35 ; VAR_36 = METHOD_1 ( VAR_37 , 8 ) ; METHOD_2 ( ""SPS:profile_idc"" , VAR_38 ) ; VAR_39 = METHOD_3 ( VAR_40 ) ; VAR_41 = METHOD_4 ( VAR_42 ) ; METHOD_5 ( VAR_43 ) ; METHOD_6 ( VAR_44 , 5 ) ; if ( ( VAR_45 != VAR_46 ) && ( VAR_47 != VAR_48 ) && ( VAR_49 != VAR_50 ) ) { if ( ( VAR_51 != VAR_52 ) || ( ( VAR_53 != 1 ) && ( VAR_54 != 1 ) ) ) { return ( VAR_55 ) ; } } VAR_56 = METHOD_7 ( VAR_57 , 8 ) ; METHOD_8 ( ""SPS:u4_level_idc"" , VAR_58 ) ; VAR_59 = METHOD_9 ( VAR_60 , VAR_61 ) ; if ( VAR_62 & VAR_63 ) return VAR_64 ; VAR_65 = VAR_66 ; METHOD_10 ( ""SPS:seq_parameter_set_id"" , VAR_67 ) ; VAR_68 = VAR_69 -> VAR_70 ; * VAR_71 = VAR_72 -> VAR_73 [ VAR_74 ] ; if ( VAR_75 == VAR_76 -> VAR_77 ) VAR_78 -> VAR_79 = VAR_80 ; VAR_81 -> VAR_82 = VAR_83 ; VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; VAR_90 -> VAR_91 = 1 ; VAR_92 -> VAR_93 = 0 ; VAR_94 -> VAR_95 = 0 ; VAR_96 -> VAR_97 = 0 ; VAR_98 -> VAR_99 = 0 ; if ( VAR_100 == VAR_101 ) { VAR_102 -> VAR_103 = METHOD_11 ( VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 != 1 ) { return VAR_108 ; } VAR_109 -> VAR_110 = METHOD_12 ( VAR_111 , VAR_112 ) ; if ( VAR_113 -> VAR_114 != 0 ) { return VAR_115 ; } VAR_116 -> VAR_117 = METHOD_13 ( VAR_118 , VAR_119 ) ; if ( VAR_120 -> VAR_121 != 0 ) { return VAR_122 ; } VAR_123 -> VAR_124 = ( TYPE_23 ) METHOD_14 ( VAR_125 ) ; if ( VAR_126 -> VAR_127 != 0 ) { return VAR_128 ; } VAR_129 -> VAR_130 = ( TYPE_24 ) METHOD_15 ( VAR_131 ) ; if ( VAR_132 -> VAR_133 ) { for ( VAR_134 = 0 ; VAR_135 < 8 ; VAR_136 ++ ) { VAR_137 -> VAR_138 [ VAR_139 ] = METHOD_16 ( VAR_140 ) ; VAR_141 -> VAR_142 [ VAR_143 ] = 0 ; if ( VAR_144 -> VAR_145 [ VAR_146 ] ) { if ( VAR_147 < 6 ) { METHOD_17 ( VAR_148 -> VAR_149 [ VAR_150 ] , 16 , & VAR_151 -> VAR_152 [ VAR_153 ] , VAR_154 ) ; } else { METHOD_18 ( VAR_155 -> VAR_156 [ VAR_157 - 6 ] , 64 , & VAR_158 -> VAR_159 [ VAR_160 ] , VAR_161 ) ; } } } } } VAR_162 = 4 + METHOD_19 ( VAR_163 , VAR_164 ) ; if ( VAR_165 > VAR_166 ) { return VAR_167 ; } VAR_168 -> VAR_169 = VAR_170 ; METHOD_20 ( ""SPS:log2_max_frame_num_minus4"" , ( VAR_171 -> VAR_172 - 4 ) ) ; VAR_173 = ( 1 << ( VAR_174 -> VAR_175 ) ) ; VAR_176 -> VAR_177 = VAR_178 - 1 ; VAR_179 = METHOD_21 ( VAR_180 , VAR_181 ) ; if ( VAR_182 > VAR_183 ) { return VAR_184 ; } VAR_185 -> VAR_186 = VAR_187 ; METHOD_22 ( ""SPS:pic_order_cnt_type"" , VAR_188 -> VAR_189 ) ; VAR_190 -> VAR_191 = 1 ; if ( VAR_192 -> VAR_193 == 0 ) { VAR_194 = 4 + METHOD_23 ( VAR_195 , VAR_196 ) ; if ( VAR_197 > VAR_198 ) { return VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = ( 1 << VAR_205 ) ; METHOD_24 ( ""SPS:log2_max_pic_order_cnt_lsb_minus4"" , ( VAR_206 - 4 ) ) ; } else if ( VAR_207 -> VAR_208 == 1 ) { VAR_209 -> VAR_210 = METHOD_25 ( VAR_211 ) ; METHOD_26 ( ""SPS:delta_pic_order_always_zero_flag"" , VAR_212 -> VAR_213 ) ; VAR_214 -> VAR_215 = METHOD_27 ( VAR_216 , VAR_217 ) ; METHOD_28 ( ""SPS:offset_for_non_ref_pic"" , VAR_218 -> VAR_219 ) ; VAR_220 -> VAR_221 = METHOD_29 ( VAR_222 , VAR_223 ) ; METHOD_30 ( ""SPS:offset_for_top_to_bottom_field"" , VAR_224 -> VAR_225 ) ; VAR_226 = METHOD_31 ( VAR_227 , VAR_228 ) ; if ( VAR_229 > 255 ) return VAR_230 ; VAR_231 -> VAR_232 = VAR_233 ; METHOD_32 ( ""SPS:num_ref_frames_in_pic_order_cnt_cycle"" , VAR_234 -> VAR_235 ) ; for ( VAR_236 = 0 ; VAR_237 < VAR_238 -> VAR_239 ; VAR_240 ++ ) { VAR_241 -> VAR_242 [ VAR_243 ] = METHOD_33 ( VAR_244 , VAR_245 ) ; METHOD_34 ( ""SPS:offset_for_ref_frame"" , VAR_246 -> VAR_247 [ VAR_248 ] ) ; } } VAR_249 = METHOD_35 ( VAR_250 , VAR_251 ) ; if ( ( VAR_252 > VAR_253 ) ) { return VAR_254 ; } VAR_255 -> VAR_256 = VAR_257 ; METHOD_36 ( ""SPS:num_ref_frames"" , VAR_258 -> VAR_259 ) ; VAR_260 -> VAR_261 = METHOD_37 ( VAR_262 ) ; METHOD_38 ( ""SPS:gaps_in_frame_num_value_allowed_flag"" , VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 = 1 + METHOD_39 ( VAR_267 , VAR_268 ) ; METHOD_40 ( ""SPS:pic_width_in_mbs_minus1"" , VAR_269 -> VAR_270 - 1 ) ; VAR_271 = ( VAR_272 -> VAR_273 << 4 ) ; VAR_274 = METHOD_41 ( VAR_275 , VAR_276 ) ; VAR_277 -> VAR_278 = 1 + VAR_279 ; VAR_280 = ( VAR_281 -> VAR_282 << 4 ) ; VAR_283 -> VAR_284 = ( VAR_285 -> VAR_286 * VAR_287 -> VAR_288 ) - 1 ; VAR_289 -> VAR_290 = VAR_291 -> VAR_292 + 1 ; VAR_293 -> VAR_294 = METHOD_42 ( VAR_295 , VAR_296 -> VAR_297 ) ; VAR_298 = METHOD_43 ( VAR_299 ) ; VAR_300 -> VAR_301 = VAR_302 ; METHOD_44 ( ""SPS:frame_mbs_only_flag"" , VAR_303 ) ; if ( ! VAR_304 ) { VAR_305 <<= 1 ; VAR_306 -> VAR_307 = METHOD_45 ( VAR_308 ) ; METHOD_46 ( ""SPS:mb_adaptive_frame_field_flag"" , VAR_309 -> VAR_310 ) ; } else VAR_311 -> VAR_312 = 0 ; VAR_313 -> VAR_314 = METHOD_47 ( VAR_315 ) ; METHOD_48 ( ""SPS:direct_8x8_inference_flag"" , VAR_316 -> VAR_317 ) ; VAR_318 = METHOD_49 ( VAR_319 ) ; METHOD_50 ( ""SPS:frame_cropping_flag"" , VAR_320 ) ; if ( VAR_321 ) { VAR_322 = METHOD_51 ( VAR_323 , VAR_324 ) ; METHOD_52 ( ""SPS:frame_cropping_rect_left_offset"" , VAR_325 ) ; VAR_326 = METHOD_53 ( VAR_327 , VAR_328 ) ; METHOD_54 ( ""SPS:frame_cropping_rect_right_offset"" , VAR_329 ) ; VAR_330 = METHOD_55 ( VAR_331 , VAR_332 ) ; METHOD_56 ( ""SPS:frame_cropping_rect_top_offset"" , VAR_333 ) ; VAR_334 = METHOD_57 ( VAR_335 , VAR_336 ) ; METHOD_58 ( ""SPS:frame_cropping_rect_bottom_offset"" , VAR_337 ) ; } VAR_338 -> VAR_339 = METHOD_59 ( VAR_340 ) ; METHOD_60 ( ""SPS:vui_parameters_present_flag"" , VAR_341 -> VAR_342 ) ; VAR_343 = VAR_344 + ( TYPE_25 ) ( VAR_345 << 1 ) ; if ( 1 == VAR_346 -> VAR_347 ) { if ( VAR_348 -> VAR_349 > VAR_350 ) VAR_351 = VAR_352 -> VAR_353 ; } VAR_354 = VAR_355 + ( TYPE_26 ) ( VAR_356 << 2 ) ; VAR_357 = VAR_358 + ( TYPE_27 ) ( VAR_359 << 2 ) ; VAR_360 = METHOD_61 ( VAR_361 , VAR_362 ) ; VAR_363 = ( VAR_364 >> 1 ) + ( TYPE_28 ) ( VAR_365 << 2 ) ; VAR_366 = METHOD_62 ( VAR_367 , ( VAR_368 >> 1 ) ) ; { TYPE_29 VAR_369 = 0 ; TYPE_30 VAR_370 = 0 ; TYPE_31 VAR_371 = 0 ; TYPE_32 VAR_372 = 0 ; TYPE_33 VAR_373 ; TYPE_34 VAR_374 ; TYPE_35 VAR_375 , VAR_376 ; if ( VAR_377 ) { VAR_378 = VAR_379 << 1 ; VAR_380 = VAR_381 << 1 ; VAR_382 = ( 1 == VAR_383 -> VAR_384 ) ; VAR_385 = ( 2 - VAR_386 ) ; VAR_387 = ( VAR_388 << VAR_389 ) ; VAR_390 = ( VAR_391 << VAR_392 ) ; } VAR_393 = ( VAR_394 * VAR_395 ) + ( VAR_396 ) ; VAR_397 = ( VAR_398 * ( VAR_399 >> 1 ) ) + ( VAR_400 >> 1 ) * VAR_401 ; VAR_402 = VAR_403 - ( VAR_404 + VAR_405 ) ; VAR_406 = VAR_407 - ( VAR_408 + VAR_409 ) ; if ( ( VAR_410 < VAR_411 ) || ( VAR_412 < VAR_413 ) ) { return VAR_414 ; } if ( ( 3 == VAR_415 -> VAR_416 ) && ( VAR_417 -> VAR_418 != VAR_419 ) ) { VAR_420 -> VAR_421 = 1 ; return VAR_422 ; } if ( ( 3 == VAR_423 -> VAR_424 ) && ( VAR_425 -> VAR_426 != VAR_427 ) ) { VAR_428 -> VAR_429 = 1 ; return VAR_430 ; } if ( ( VAR_431 > VAR_432 ) || ( VAR_433 > VAR_434 ) ) { return VAR_435 ; } if ( ( VAR_453 << VAR_504 -> VAR_312 ) > VAR_432 ) { return VAR_435 ; } VAR_436 -> VAR_437 = VAR_438 ; VAR_439 -> VAR_440 = VAR_441 ; } if ( 1 == VAR_442 -> VAR_443 ) { VAR_444 = METHOD_63 ( & VAR_445 -> VAR_446 , VAR_447 ) ; if ( VAR_448 != VAR_449 ) return VAR_450 ; } VAR_451 -> VAR_452 = VAR_453 ; VAR_454 -> VAR_455 = VAR_456 ; VAR_457 -> VAR_458 = VAR_459 ; VAR_460 -> VAR_461 = VAR_462 ; VAR_463 -> VAR_464 = VAR_465 ; VAR_466 -> VAR_467 = VAR_468 ; VAR_469 -> VAR_470 . VAR_471 = ( TYPE_36 ) ( VAR_472 << ( 1 - VAR_473 ) ) ; VAR_474 -> VAR_475 . VAR_476 = ( TYPE_37 ) ( VAR_477 << ( 1 - VAR_478 ) ) ; VAR_479 -> VAR_480 = VAR_481 -> VAR_482 ; VAR_483 -> VAR_484 = VAR_485 -> VAR_486 ; VAR_487 -> VAR_488 = VAR_489 ; VAR_490 -> VAR_491 = VAR_492 ; if ( VAR_493 -> VAR_494 > VAR_495 -> VAR_496 ) { return VAR_497 ; } VAR_498 -> VAR_499 = VAR_500 ; VAR_501 -> VAR_502 [ VAR_503 ] = * VAR_504 ; return VAR_505 ; }",346
347," TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 )  {  METHOD_1 ( VAR_2 -> VAR_3 ) ;  }","TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { METHOD_1 ( VAR_2 -> VAR_3 ) ; }",347
348,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; TYPE_13 VAR_12 ; VAR_13 * VAR_14 ; VAR_15 * VAR_16 ; if ( VAR_17 < 2 ) { METHOD_1 ( ""Usage:%sfile.h264\\n"" , VAR_18 [ 0 ] ) ; return - 1 ; } VAR_19 = METHOD_2 ( ""out.yuv"" , ""wb"" ) ; if ( VAR_20 == VAR_21 ) { METHOD_3 ( ""UNABLETOOPENOUTPUTFILE\\n"" ) ; return - 1 ; } VAR_22 = METHOD_4 ( VAR_23 [ VAR_24 - 1 ] , ""rb"" ) ; if ( VAR_25 == VAR_26 ) { METHOD_5 ( ""UNABLETOOPENINPUTFILE\\n"" ) ; return - 1 ; } METHOD_6 ( VAR_27 , 0L , VAR_28 ) ; VAR_29 = ( TYPE_14 ) METHOD_7 ( VAR_30 ) ; METHOD_8 ( VAR_31 ) ;  VAR_32 = VAR_33 = ( TYPE_15 * ) METHOD_9 ( sizeof ( TYPE_16 ) * VAR_34 ) ;  if ( VAR_35 == VAR_36 ) { METHOD_10 ( ""UNABLETOALLOCATEMEMORY\\n"" ) ; return - 1 ; } METHOD_11 ( VAR_37 , sizeof ( TYPE_17 ) , VAR_38 , VAR_39 ) ; METHOD_12 ( VAR_40 ) ; VAR_41 = METHOD_13 ( & VAR_42 , 0 ) ; if ( VAR_43 != VAR_44 ) { METHOD_14 ( ""DECODERINITIALIZATIONFAILED\\n"" ) ; return - 1 ; } VAR_45 . VAR_46 = VAR_47 ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = 0 ; VAR_53 = 0 ; do { VAR_54 = METHOD_15 ( VAR_55 , & VAR_56 , & VAR_57 ) ; switch ( VAR_58 ) { case VAR_59 : VAR_60 = METHOD_16 ( VAR_61 , & VAR_62 ) ; if ( VAR_63 != VAR_64 ) return - 1 ; VAR_65 = VAR_66 . VAR_67 * VAR_68 . VAR_69 ; VAR_70 = ( 3 * VAR_71 ) / 2 ; METHOD_17 ( ""Width%dHeight%d\\n"" , VAR_72 . VAR_73 , VAR_74 . VAR_75 ) ; VAR_76 . VAR_77 -= ( TYPE_18 ) ( VAR_78 . VAR_79 - VAR_80 . VAR_81 ) ; VAR_82 . VAR_83 = VAR_84 . VAR_85 ; break ; case VAR_86 : case VAR_87 : VAR_88 . VAR_89 -= ( TYPE_19 ) ( VAR_90 . VAR_91 - VAR_92 . VAR_93 ) ; VAR_94 . VAR_95 = VAR_96 . VAR_97 ; while ( METHOD_18 ( VAR_98 , & VAR_99 , 0 ) == VAR_100 ) { VAR_101 ++ ; METHOD_19 ( ""PIC%d,type%s,concealed%d\\n"" , VAR_102 , VAR_103 . VAR_104 ? ""IDR"" : ""NON-IDR"" , VAR_105 . VAR_106 ) ; METHOD_20 ( VAR_107 ) ; METHOD_21 ( VAR_108 , ( TYPE_20 * ) VAR_109 . VAR_110 , VAR_111 ) ; } break ; case VAR_112 : METHOD_22 ( ""EVALUATIONLIMITREACHED\\n"" ) ; goto VAR_113 ; default : METHOD_23 ( ""UNRECOVERABLEERROR\\n"" ) ; return - 1 ; } } while ( VAR_114 . VAR_115 > 0 ) ; VAR_116 : while ( METHOD_24 ( VAR_117 , & VAR_118 , 1 ) == VAR_119 ) { VAR_120 ++ ; METHOD_25 ( ""PIC%d,type%s,concealed%d\\n"" , VAR_121 , VAR_122 . VAR_123 ? ""IDR"" : ""NON-IDR"" , VAR_124 . VAR_125 ) ; METHOD_26 ( VAR_126 ) ; METHOD_27 ( VAR_127 , ( TYPE_21 * ) VAR_128 . VAR_129 , VAR_130 ) ; } METHOD_28 ( VAR_131 ) ; METHOD_29 ( VAR_132 ) ; METHOD_30 ( VAR_133 ) ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; TYPE_13 VAR_12 ; VAR_13 * VAR_14 ; VAR_15 * VAR_16 ; if ( VAR_17 < 2 ) { METHOD_1 ( ""Usage:%sfile.h264\\n"" , VAR_18 [ 0 ] ) ; return - 1 ; } VAR_19 = METHOD_2 ( ""out.yuv"" , ""wb"" ) ; if ( VAR_20 == VAR_21 ) { METHOD_3 ( ""UNABLETOOPENOUTPUTFILE\\n"" ) ; return - 1 ; } VAR_22 = METHOD_4 ( VAR_23 [ VAR_24 - 1 ] , ""rb"" ) ; if ( VAR_25 == VAR_26 ) { METHOD_5 ( ""UNABLETOOPENINPUTFILE\\n"" ) ; return - 1 ; } METHOD_6 ( VAR_27 , 0L , VAR_28 ) ; VAR_29 = ( TYPE_14 ) METHOD_7 ( VAR_30 ) ; METHOD_8 ( VAR_31 ) ; VAR_32 = VAR_33 = ( TYPE_15 * ) METHOD_9 ( sizeof ( TYPE_16 ) * VAR_34 ) ; if ( VAR_35 == VAR_36 ) { METHOD_10 ( ""UNABLETOALLOCATEMEMORY\\n"" ) ; return - 1 ; } METHOD_11 ( VAR_37 , sizeof ( TYPE_17 ) , VAR_38 , VAR_39 ) ; METHOD_12 ( VAR_40 ) ; VAR_41 = METHOD_13 ( & VAR_42 , 0 ) ; if ( VAR_43 != VAR_44 ) { METHOD_14 ( ""DECODERINITIALIZATIONFAILED\\n"" ) ; return - 1 ; } VAR_45 . VAR_46 = VAR_47 ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = 0 ; VAR_53 = 0 ; do { VAR_54 = METHOD_15 ( VAR_55 , & VAR_56 , & VAR_57 ) ; switch ( VAR_58 ) { case VAR_59 : VAR_60 = METHOD_16 ( VAR_61 , & VAR_62 ) ; if ( VAR_63 != VAR_64 ) return - 1 ; VAR_65 = VAR_66 . VAR_67 * VAR_68 . VAR_69 ; VAR_70 = ( 3 * VAR_71 ) / 2 ; METHOD_17 ( ""Width%dHeight%d\\n"" , VAR_72 . VAR_73 , VAR_74 . VAR_75 ) ; VAR_76 . VAR_77 -= ( TYPE_18 ) ( VAR_78 . VAR_79 - VAR_80 . VAR_81 ) ; VAR_82 . VAR_83 = VAR_84 . VAR_85 ; break ; case VAR_86 : case VAR_87 : VAR_88 . VAR_89 -= ( TYPE_19 ) ( VAR_90 . VAR_91 - VAR_92 . VAR_93 ) ; VAR_94 . VAR_95 = VAR_96 . VAR_97 ; while ( METHOD_18 ( VAR_98 , & VAR_99 , 0 ) == VAR_100 ) { VAR_101 ++ ; METHOD_19 ( ""PIC%d,type%s,concealed%d\\n"" , VAR_102 , VAR_103 . VAR_104 ? ""IDR"" : ""NON-IDR"" , VAR_105 . VAR_106 ) ; METHOD_20 ( VAR_107 ) ; METHOD_21 ( VAR_108 , ( TYPE_20 * ) VAR_109 . VAR_110 , VAR_111 ) ; } break ; case VAR_112 : METHOD_22 ( ""EVALUATIONLIMITREACHED\\n"" ) ; goto VAR_113 ; default : METHOD_23 ( ""UNRECOVERABLEERROR\\n"" ) ; return - 1 ; } } while ( VAR_114 . VAR_115 > 0 ) ; VAR_116 : while ( METHOD_24 ( VAR_117 , & VAR_118 , 1 ) == VAR_119 ) { VAR_120 ++ ; METHOD_25 ( ""PIC%d,type%s,concealed%d\\n"" , VAR_121 , VAR_122 . VAR_123 ? ""IDR"" : ""NON-IDR"" , VAR_124 . VAR_125 ) ; METHOD_26 ( VAR_126 ) ; METHOD_27 ( VAR_127 , ( TYPE_21 * ) VAR_128 . VAR_129 , VAR_130 ) ; } METHOD_28 ( VAR_131 ) ; METHOD_29 ( VAR_132 ) ; METHOD_30 ( VAR_133 ) ; return 0 ; }",348
349," static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * * VAR_0 , const TYPE_3 * VAR_1 ,   TYPE_4 VAR_2 , TYPE_5 VAR_3 ,  TYPE_6 VAR_4 , unsigned TYPE_7 * VAR_5 ) { ( * VAR_6 ) -> VAR_7 = VAR_8 ; ( * VAR_9 ) -> VAR_10 = VAR_11 ; ( * VAR_12 ) -> VAR_13 = VAR_14 ; ( * VAR_15 ) -> VAR_16 = VAR_17 ; ( * VAR_18 ) ++ ; ++ VAR_19 [ VAR_20 ] ; }","static TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * * VAR_0 , const TYPE_3 * VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 , unsigned TYPE_7 * VAR_5 ) { ( * VAR_6 ) -> VAR_7 = VAR_8 ; ( * VAR_9 ) -> VAR_10 = VAR_11 ; ( * VAR_12 ) -> VAR_13 = VAR_14 ; ( * VAR_15 ) -> VAR_16 = VAR_17 ; ( * VAR_18 ) ++ ; ++ VAR_19 [ VAR_20 ] ; }",349
350,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ;  TYPE_6 VAR_5 ;  TYPE_7 * VAR_6 ; if ( METHOD_1 ( VAR_7 ) > 0 && METHOD_2 ( VAR_8 ) > 0 ) { METHOD_3 ( VAR_9 -> VAR_10 ) ; VAR_11 = METHOD_4 ( VAR_12 ) ; for ( VAR_13 = VAR_14 -> VAR_15 , VAR_16 = VAR_17 -> VAR_18 [ 0 ] ; VAR_19 > 0 ; -- VAR_20 , VAR_21 += VAR_22 ) { for ( VAR_23 = VAR_24 -> VAR_25 , VAR_26 = VAR_27 ; VAR_28 > 0 ; -- VAR_29 , ++ VAR_30 ) { * VAR_31 = VAR_32 ; } } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 * VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 * VAR_6 ; if ( METHOD_1 ( VAR_7 ) > 0 && METHOD_2 ( VAR_8 ) > 0 ) { METHOD_3 ( VAR_9 -> VAR_10 ) ; VAR_11 = METHOD_4 ( VAR_12 ) ; for ( VAR_13 = VAR_14 -> VAR_15 , VAR_16 = VAR_17 -> VAR_18 [ 0 ] ; VAR_19 > 0 ; -- VAR_20 , VAR_21 += VAR_22 ) { for ( VAR_23 = VAR_24 -> VAR_25 , VAR_26 = VAR_27 ; VAR_28 > 0 ; -- VAR_29 , ++ VAR_30 ) { * VAR_31 = VAR_32 ; } } } }",350
351,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) {  struct STRUCT_OR_UNION_0 VAR_3 ;  VAR_4 . VAR_5 = VAR_6 ; VAR_7 . VAR_8 = 0 ; VAR_9 . VAR_10 = VAR_11 ; VAR_12 . VAR_13 = METHOD_1 ( VAR_14 ) ; VAR_15 . VAR_16 = METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; return METHOD_5 ( VAR_17 , VAR_18 , VAR_19 , & VAR_20 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 VAR_3 ; VAR_4 . VAR_5 = VAR_6 ; VAR_7 . VAR_8 = 0 ; VAR_9 . VAR_10 = VAR_11 ; VAR_12 . VAR_13 = METHOD_1 ( VAR_14 ) ; VAR_15 . VAR_16 = METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) ) ; return METHOD_5 ( VAR_17 , VAR_18 , VAR_19 , & VAR_20 ) ; }",351
352,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; METHOD_1 ( & VAR_2 -> VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;  TYPE_2 TYPE_3  TYPE_4 ( VAR_6 -> s_files ) ; for ( VAR_7 = 0 ; VAR_8 < VAR_9 ; VAR_10 ++ ) METHOD_3 ( & VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] ) ; METHOD_4 ( VAR_15 ) ; METHOD_5 ( ! METHOD_6 ( & VAR_16 -> VAR_17 ) ) ; METHOD_7 ( VAR_18 -> VAR_19 ) ; METHOD_8 ( VAR_20 -> VAR_21 ) ; METHOD_9 ( VAR_22 , VAR_23 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; METHOD_1 ( & VAR_2 -> VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ; TYPE_2 TYPE_3 TYPE_4 ( VAR_6 -> s_files ) ; for ( VAR_7 = 0 ; VAR_8 < VAR_9 ; VAR_10 ++ ) METHOD_3 ( & VAR_11 -> VAR_12 . VAR_13 [ VAR_14 ] ) ; METHOD_4 ( VAR_15 ) ; METHOD_5 ( ! METHOD_6 ( & VAR_16 -> VAR_17 ) ) ; METHOD_7 ( VAR_18 -> VAR_19 ) ; METHOD_8 ( VAR_20 -> VAR_21 ) ; METHOD_9 ( VAR_22 , VAR_23 ) ; }",352
353,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 = 0 ; TYPE_9 VAR_8 = METHOD_1 ( VAR_9 ) ; if ( VAR_10 > 1 ) { if ( * VAR_11 < 0 ) { * VAR_12 = METHOD_2 ( VAR_13 ) ;  VAR_14 = METHOD_3 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , 1 ) ;  } else { TYPE_10 * VAR_19 = METHOD_4 ( VAR_20 , * VAR_21 ) ; VAR_22 = METHOD_5 ( VAR_23 , VAR_24 ) ; if ( VAR_25 < 0 ) { VAR_26 = VAR_27 ; } METHOD_6 ( VAR_28 ) ; } } if ( VAR_29 <= 1 ) { if ( ! VAR_30 )  VAR_31 = METHOD_7 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 , 0 ) ;  } else if ( METHOD_8 ( VAR_36 ) ) { if ( ! VAR_37 )  VAR_38 = METHOD_9 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 , 0 ) ;  * VAR_43 = - 1 ; } else { * VAR_44 = 0 ; } return VAR_45 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 = 0 ; TYPE_9 VAR_8 = METHOD_1 ( VAR_9 ) ; if ( VAR_10 > 1 ) { if ( * VAR_11 < 0 ) { * VAR_12 = METHOD_2 ( VAR_13 ) ; VAR_14 = METHOD_3 ( VAR_15 , VAR_16 , VAR_17 , VAR_18 , 1 ) ; } else { TYPE_10 * VAR_19 = METHOD_4 ( VAR_20 , * VAR_21 ) ; VAR_22 = METHOD_5 ( VAR_23 , VAR_24 ) ; if ( VAR_25 < 0 ) { VAR_26 = VAR_27 ; } METHOD_6 ( VAR_28 ) ; } } if ( VAR_29 <= 1 ) { if ( ! VAR_30 ) VAR_31 = METHOD_7 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 , 0 ) ; } else if ( METHOD_8 ( VAR_36 ) ) { if ( ! VAR_37 ) VAR_38 = METHOD_9 ( VAR_39 , VAR_40 , VAR_41 , 1 , VAR_42 , 0 ) ; * VAR_43 = - 1 ; } else { * VAR_44 = 0 ; } return VAR_45 ; }",353
354,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; register TYPE_6 * VAR_5 ; register TYPE_7 VAR_6 ; register TYPE_8 * VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 , VAR_10 , VAR_11 ; unsigned TYPE_11 * VAR_12 , * VAR_13 ; METHOD_1 ( VAR_14 != ( const TYPE_12 * ) VAR_15 ) ; METHOD_2 ( VAR_16 -> VAR_17 == VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) ( TYPE_13 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , ""%s"" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_14 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; VAR_33 = METHOD_8 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = METHOD_9 ( VAR_41 ) ; return ( ( TYPE_15 * ) VAR_42 ) ; } VAR_43 = VAR_44 ; VAR_45 = ( TYPE_16 * ) METHOD_10 ( ( TYPE_17 ) VAR_46 + VAR_47 , sizeof ( * VAR_48 ) ) ; VAR_49 = VAR_50 ; if ( VAR_51 != ( TYPE_18 * ) VAR_52 ) while ( METHOD_11 ( VAR_53 , VAR_54 ) != ( TYPE_19 * ) VAR_55 ) { if ( ( * VAR_56 == '' ) && ( ( VAR_57 == VAR_58 ) || ( * ( VAR_59 - 1 ) == '\\n' ) ) ) continue ; if ( ( * VAR_60 == '}' ) && ( * ( VAR_61 + 1 ) == ';' ) ) break ; VAR_62 += METHOD_12 ( VAR_63 ) ; if ( ( TYPE_20 ) ( VAR_64 - VAR_65 + VAR_66 + 1 ) < VAR_67 ) continue ; VAR_68 <<= 1 ; VAR_69 = ( TYPE_21 * ) METHOD_13 ( VAR_70 , VAR_71 + VAR_72 + 1 , sizeof ( * VAR_73 ) ) ; if ( VAR_74 == ( TYPE_22 * ) VAR_75 ) break ; VAR_76 = VAR_77 + METHOD_14 ( VAR_78 ) ; } if ( VAR_79 == ( TYPE_23 * ) VAR_80 ) METHOD_15 ( VAR_81 , ""MemoryAllocationFailed"" ) ; VAR_82 [ VAR_83 ] = '\\0' ; if ( METHOD_16 ( VAR_84 , ( unsigned TYPE_24 * ) VAR_85 , & VAR_86 , & VAR_87 -> VAR_88 , & VAR_89 -> VAR_90 , & VAR_91 , & VAR_92 -> VAR_93 , VAR_94 ) == VAR_95 ) {  VAR_96 = ( TYPE_25 * ) METHOD_17 ( VAR_97 ) ;  METHOD_18 ( VAR_98 , ""CorruptImage"" ) ; } VAR_99 = ( TYPE_26 * ) METHOD_19 ( VAR_100 ) ; VAR_101 -> VAR_102 = 24 ; VAR_103 -> VAR_104 = VAR_105 ; VAR_106 = METHOD_20 ( VAR_107 , VAR_108 -> VAR_109 , VAR_110 -> VAR_111 , VAR_112 ) ; if ( VAR_113 == VAR_114 ) { VAR_115 = ( unsigned TYPE_27 * ) METHOD_21 ( VAR_116 ) ; VAR_117 = ( unsigned TYPE_28 * ) METHOD_22 ( VAR_118 ) ; return ( METHOD_23 ( VAR_119 ) ) ; } if ( METHOD_24 ( VAR_120 , VAR_121 -> VAR_122 , VAR_123 ) == VAR_124 ) { VAR_125 = ( unsigned TYPE_29 * ) METHOD_25 ( VAR_126 ) ; VAR_127 = ( unsigned TYPE_30 * ) METHOD_26 ( VAR_128 ) ; METHOD_27 ( VAR_129 , ""MemoryAllocationFailed"" ) ; } for ( VAR_130 = 0 ; VAR_131 < ( TYPE_31 ) VAR_132 -> VAR_133 ; ++ VAR_134 ) { VAR_135 -> VAR_136 [ VAR_137 ] . VAR_138 = METHOD_28 ( VAR_139 [ VAR_140 * 4 + 0 ] ) ; VAR_141 -> VAR_142 [ VAR_143 ] . VAR_144 = METHOD_29 ( VAR_145 [ VAR_146 * 4 + 1 ] ) ; VAR_147 -> VAR_148 [ VAR_149 ] . VAR_150 = METHOD_30 ( VAR_151 [ VAR_152 * 4 + 2 ] ) ; } VAR_153 = 0 ; if ( VAR_154 -> VAR_155 == VAR_156 ) { for ( VAR_157 = 0 ; VAR_158 < ( TYPE_32 ) VAR_159 -> VAR_160 ; VAR_161 ++ ) { VAR_162 = METHOD_31 ( VAR_163 , 0 , VAR_164 , VAR_165 -> VAR_166 , 1 , VAR_167 ) ; if ( VAR_168 == ( TYPE_33 * ) VAR_169 ) break ; for ( VAR_170 = 0 ; VAR_171 < ( TYPE_34 ) VAR_172 -> VAR_173 ; VAR_174 ++ ) { VAR_175 = ( TYPE_35 ) VAR_176 [ VAR_177 * VAR_178 -> VAR_179 + VAR_180 ] ; METHOD_32 ( VAR_181 , VAR_182 , VAR_183 ) ; VAR_184 += METHOD_33 ( VAR_185 ) ; } if ( METHOD_34 ( VAR_186 , VAR_187 ) == VAR_188 ) break ; } if ( VAR_189 < ( TYPE_36 ) VAR_190 -> VAR_191 ) { VAR_192 = ( unsigned TYPE_37 * ) METHOD_35 ( VAR_193 ) ; VAR_194 = ( unsigned TYPE_38 * ) METHOD_36 ( VAR_195 ) ; METHOD_37 ( VAR_196 , ""NotEnoughPixelData"" ) ; } } VAR_197 = ( unsigned TYPE_39 * ) METHOD_38 ( VAR_198 ) ; VAR_199 = ( unsigned TYPE_40 * ) METHOD_39 ( VAR_200 ) ; ( TYPE_41 ) METHOD_40 ( VAR_201 ) ; return ( METHOD_41 ( VAR_202 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; register TYPE_6 * VAR_5 ; register TYPE_7 VAR_6 ; register TYPE_8 * VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 , VAR_10 , VAR_11 ; unsigned TYPE_11 * VAR_12 , * VAR_13 ; METHOD_1 ( VAR_14 != ( const TYPE_12 * ) VAR_15 ) ; METHOD_2 ( VAR_16 -> VAR_17 == VAR_18 ) ; if ( VAR_19 -> VAR_20 != VAR_21 ) ( TYPE_13 ) METHOD_3 ( VAR_22 , METHOD_4 ( ) , ""%s"" , VAR_23 -> VAR_24 ) ; METHOD_5 ( VAR_25 != ( TYPE_14 * ) VAR_26 ) ; METHOD_6 ( VAR_27 -> VAR_28 == VAR_29 ) ; VAR_30 = METHOD_7 ( VAR_31 , VAR_32 ) ; VAR_33 = METHOD_8 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; if ( VAR_38 == VAR_39 ) { VAR_40 = METHOD_9 ( VAR_41 ) ; return ( ( TYPE_15 * ) VAR_42 ) ; } VAR_43 = VAR_44 ; VAR_45 = ( TYPE_16 * ) METHOD_10 ( ( TYPE_17 ) VAR_46 + VAR_47 , sizeof ( * VAR_48 ) ) ; VAR_49 = VAR_50 ; if ( VAR_51 != ( TYPE_18 * ) VAR_52 ) while ( METHOD_11 ( VAR_53 , VAR_54 ) != ( TYPE_19 * ) VAR_55 ) { if ( ( * VAR_56 == '' ) && ( ( VAR_57 == VAR_58 ) || ( * ( VAR_59 - 1 ) == '\\n' ) ) ) continue ; if ( ( * VAR_60 == '}' ) && ( * ( VAR_61 + 1 ) == ';' ) ) break ; VAR_62 += METHOD_12 ( VAR_63 ) ; if ( ( TYPE_20 ) ( VAR_64 - VAR_65 + VAR_66 + 1 ) < VAR_67 ) continue ; VAR_68 <<= 1 ; VAR_69 = ( TYPE_21 * ) METHOD_13 ( VAR_70 , VAR_71 + VAR_72 + 1 , sizeof ( * VAR_73 ) ) ; if ( VAR_74 == ( TYPE_22 * ) VAR_75 ) break ; VAR_76 = VAR_77 + METHOD_14 ( VAR_78 ) ; } if ( VAR_79 == ( TYPE_23 * ) VAR_80 ) METHOD_15 ( VAR_81 , ""MemoryAllocationFailed"" ) ; VAR_82 [ VAR_83 ] = '\\0' ; if ( METHOD_16 ( VAR_84 , ( unsigned TYPE_24 * ) VAR_85 , & VAR_86 , & VAR_87 -> VAR_88 , & VAR_89 -> VAR_90 , & VAR_91 , & VAR_92 -> VAR_93 , VAR_94 ) == VAR_95 ) { VAR_96 = ( TYPE_25 * ) METHOD_17 ( VAR_97 ) ; METHOD_18 ( VAR_98 , ""CorruptImage"" ) ; } VAR_99 = ( TYPE_26 * ) METHOD_19 ( VAR_100 ) ; VAR_101 -> VAR_102 = 24 ; VAR_103 -> VAR_104 = VAR_105 ; VAR_106 = METHOD_20 ( VAR_107 , VAR_108 -> VAR_109 , VAR_110 -> VAR_111 , VAR_112 ) ; if ( VAR_113 == VAR_114 ) { VAR_115 = ( unsigned TYPE_27 * ) METHOD_21 ( VAR_116 ) ; VAR_117 = ( unsigned TYPE_28 * ) METHOD_22 ( VAR_118 ) ; return ( METHOD_23 ( VAR_119 ) ) ; } if ( METHOD_24 ( VAR_120 , VAR_121 -> VAR_122 , VAR_123 ) == VAR_124 ) { VAR_125 = ( unsigned TYPE_29 * ) METHOD_25 ( VAR_126 ) ; VAR_127 = ( unsigned TYPE_30 * ) METHOD_26 ( VAR_128 ) ; METHOD_27 ( VAR_129 , ""MemoryAllocationFailed"" ) ; } for ( VAR_130 = 0 ; VAR_131 < ( TYPE_31 ) VAR_132 -> VAR_133 ; ++ VAR_134 ) { VAR_135 -> VAR_136 [ VAR_137 ] . VAR_138 = METHOD_28 ( VAR_139 [ VAR_140 * 4 + 0 ] ) ; VAR_141 -> VAR_142 [ VAR_143 ] . VAR_144 = METHOD_29 ( VAR_145 [ VAR_146 * 4 + 1 ] ) ; VAR_147 -> VAR_148 [ VAR_149 ] . VAR_150 = METHOD_30 ( VAR_151 [ VAR_152 * 4 + 2 ] ) ; } VAR_153 = 0 ; if ( VAR_154 -> VAR_155 == VAR_156 ) { for ( VAR_157 = 0 ; VAR_158 < ( TYPE_32 ) VAR_159 -> VAR_160 ; VAR_161 ++ ) { VAR_162 = METHOD_31 ( VAR_163 , 0 , VAR_164 , VAR_165 -> VAR_166 , 1 , VAR_167 ) ; if ( VAR_168 == ( TYPE_33 * ) VAR_169 ) break ; for ( VAR_170 = 0 ; VAR_171 < ( TYPE_34 ) VAR_172 -> VAR_173 ; VAR_174 ++ ) { VAR_175 = ( TYPE_35 ) VAR_176 [ VAR_177 * VAR_178 -> VAR_179 + VAR_180 ] ; METHOD_32 ( VAR_181 , VAR_182 , VAR_183 ) ; VAR_184 += METHOD_33 ( VAR_185 ) ; } if ( METHOD_34 ( VAR_186 , VAR_187 ) == VAR_188 ) break ; } if ( VAR_189 < ( TYPE_36 ) VAR_190 -> VAR_191 ) { VAR_192 = ( unsigned TYPE_37 * ) METHOD_35 ( VAR_193 ) ; VAR_194 = ( unsigned TYPE_38 * ) METHOD_36 ( VAR_195 ) ; METHOD_37 ( VAR_196 , ""NotEnoughPixelData"" ) ; } } VAR_197 = ( unsigned TYPE_39 * ) METHOD_38 ( VAR_198 ) ; VAR_199 = ( unsigned TYPE_40 * ) METHOD_39 ( VAR_200 ) ; ( TYPE_41 ) METHOD_40 ( VAR_201 ) ; return ( METHOD_41 ( VAR_202 ) ) ; }",354
355,"struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , const TYPE_0 * VAR_3 ) { TYPE_1 VAR_4 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 = VAR_5 , * VAR_6 ;  const TYPE_2 * VAR_7 ;  VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; if ( METHOD_2 ( VAR_11 ) || METHOD_3 ( VAR_12 ) ) goto VAR_13 ; if ( METHOD_4 ( VAR_14 ) || VAR_15 == VAR_16 || METHOD_5 ( VAR_17 ) ) goto VAR_18 ; STRUCT_OR_UNION_6 = METHOD_6 ( VAR_19 , VAR_20 , METHOD_7 ( VAR_21 ) ) ; if ( METHOD_8 ( STRUCT_OR_UNION_7 ) || STRUCT_OR_UNION_8 == VAR_22 || METHOD_9 ( STRUCT_OR_UNION_9 ) ) goto VAR_23 ;  VAR_24 = METHOD_10 ( VAR_25 -> VAR_26 . VAR_27 ) ;  VAR_28 = METHOD_11 ( METHOD_12 ( VAR_29 ) , VAR_30 , METHOD_13 ( VAR_31 ) , STRUCT_OR_UNION_10 , 0 ) ; if ( VAR_32 ) { METHOD_14 ( VAR_33 ) ; goto VAR_34 ; } METHOD_15 ( VAR_35 , STRUCT_OR_UNION_11 ) ; METHOD_16 ( METHOD_17 ( VAR_36 ) , METHOD_18 ( VAR_37 ) , VAR_38 , METHOD_19 ( VAR_39 ) , VAR_40 , VAR_41 ) ;  METHOD_20 ( VAR_42 ) ;  METHOD_21 ( VAR_43 , VAR_44 ) ; METHOD_22 ( STRUCT_OR_UNION_12 ) ; return VAR_45 ; VAR_46 : if ( STRUCT_OR_UNION_13 && ! METHOD_23 ( STRUCT_OR_UNION_14 ) ) METHOD_24 ( STRUCT_OR_UNION_15 ) ; METHOD_25 ( VAR_47 , VAR_48 ) ; return VAR_49 ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , const TYPE_0 * VAR_3 ) { TYPE_1 VAR_4 ; struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 = VAR_5 , * VAR_6 ; const TYPE_2 * VAR_7 ; VAR_8 = METHOD_1 ( VAR_9 , VAR_10 ) ; if ( METHOD_2 ( VAR_11 ) || METHOD_3 ( VAR_12 ) ) goto VAR_13 ; if ( METHOD_4 ( VAR_14 ) || VAR_15 == VAR_16 || METHOD_5 ( VAR_17 ) ) goto VAR_18 ; STRUCT_OR_UNION_6 = METHOD_6 ( VAR_19 , VAR_20 , METHOD_7 ( VAR_21 ) ) ; if ( METHOD_8 ( STRUCT_OR_UNION_7 ) || STRUCT_OR_UNION_8 == VAR_22 || METHOD_9 ( STRUCT_OR_UNION_9 ) ) goto VAR_23 ; VAR_24 = METHOD_10 ( VAR_25 -> VAR_26 . VAR_27 ) ; VAR_28 = METHOD_11 ( METHOD_12 ( VAR_29 ) , VAR_30 , METHOD_13 ( VAR_31 ) , STRUCT_OR_UNION_10 , 0 ) ; if ( VAR_32 ) { METHOD_14 ( VAR_33 ) ; goto VAR_34 ; } METHOD_15 ( VAR_35 , STRUCT_OR_UNION_11 ) ; METHOD_16 ( METHOD_17 ( VAR_36 ) , METHOD_18 ( VAR_37 ) , VAR_38 , METHOD_19 ( VAR_39 ) , VAR_40 , VAR_41 ) ; METHOD_20 ( VAR_42 ) ; METHOD_21 ( VAR_43 , VAR_44 ) ; METHOD_22 ( STRUCT_OR_UNION_12 ) ; return VAR_45 ; VAR_46 : if ( STRUCT_OR_UNION_13 && ! METHOD_23 ( STRUCT_OR_UNION_14 ) ) METHOD_24 ( STRUCT_OR_UNION_15 ) ; METHOD_25 ( VAR_47 , VAR_48 ) ; return VAR_49 ; }",355
356,"static TYPE_0 * * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 TYPE_5 VAR_3 ) { TYPE_6 * VAR_4 = ( TYPE_7 * ) VAR_5 ( VAR_6 TSRMLS_CC ) ; TYPE_8 * * VAR_7 ; TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 * VAR_11 = spl_array_get_hash_table ( VAR_12 , 0 TSRMLS_CC ) ;  if ( ! VAR_13 ) {  return & METHOD_1 ( VAR_14 ) ; } if ( ( TYPE_13 == VAR_15 || TYPE_14 == VAR_16 ) && ( VAR_17 -> VAR_18 > 0 ) ) { METHOD_2 ( VAR_19 , ""ModificationofArrayObjectduringsortingisprohibited"" ) ; return & METHOD_3 ( VAR_20 ) ; ; } switch ( METHOD_4 ( VAR_21 ) ) { case VAR_22 : VAR_23 = METHOD_5 ( VAR_24 ) ; VAR_25 = METHOD_6 ( VAR_26 ) + 1 ; VAR_27 : if ( METHOD_7 ( VAR_28 , VAR_29 , VAR_30 , ( TYPE_15 * * ) & VAR_31 ) == VAR_32 ) { switch ( TYPE_16 ) { case VAR_33 : METHOD_8 ( VAR_34 , ""Undindex:%s"" , VAR_35 ) ; case VAR_36 : case VAR_37 : VAR_38 = & METHOD_9 ( VAR_39 ) ; break ; case VAR_40 : METHOD_10 ( VAR_41 , ""Undindex:%s"" , VAR_42 ) ; case VAR_43 : { TYPE_17 * VAR_44 ; METHOD_11 ( VAR_45 ) ; METHOD_12 ( VAR_46 , VAR_47 , VAR_48 , ( TYPE_18 * * ) & VAR_49 , sizeof ( TYPE_19 * ) , ( TYPE_20 * * ) & VAR_50 ) ; } } } return VAR_51 ; case VAR_52 : VAR_53 = """" ; VAR_54 = 1 ; goto VAR_55 ; case VAR_56 : METHOD_13 ( VAR_57 , ""ResourceID%ldusedasoffset,castingtointeger(%ld)"" , METHOD_14 ( VAR_58 ) , METHOD_15 ( VAR_59 ) ) ; case VAR_60 : case VAR_61 : case VAR_62 : if ( VAR_63 -> TYPE_21 == VAR_64 ) { VAR_65 = ( TYPE_22 ) METHOD_16 ( VAR_66 ) ; } else { VAR_67 = METHOD_17 ( VAR_68 ) ; } if ( METHOD_18 ( VAR_69 , VAR_70 , ( TYPE_23 * * ) & VAR_71 ) == VAR_72 ) { switch ( TYPE_24 ) { case VAR_73 : METHOD_19 ( VAR_74 , ""Undoffset:%ld"" , VAR_75 ) ; case VAR_76 : case VAR_77 : VAR_78 = & METHOD_20 ( VAR_79 ) ; break ; case VAR_80 : METHOD_21 ( VAR_81 , ""Undoffset:%ld"" , VAR_82 ) ; case VAR_83 : { TYPE_25 * VAR_84 ; METHOD_22 ( VAR_85 ) ; METHOD_23 ( VAR_86 , VAR_87 , ( TYPE_26 * * ) & VAR_88 , sizeof ( TYPE_27 * ) , ( TYPE_28 * * ) & VAR_89 ) ; } } } return VAR_90 ; default : METHOD_24 ( VAR_91 , ""Illegaloffsettype"" ) ; return ( TYPE_29 == VAR_92 || TYPE_30 == VAR_93 ) ? & METHOD_25 ( VAR_94 ) : & METHOD_26 ( VAR_95 ) ; } }","static TYPE_0 * * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 TYPE_5 VAR_3 ) { TYPE_6 * VAR_4 = ( TYPE_7 * ) VAR_5 ( VAR_6 TSRMLS_CC ) ; TYPE_8 * * VAR_7 ; TYPE_9 * VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 * VAR_11 = spl_array_get_hash_table ( VAR_12 , 0 TSRMLS_CC ) ; if ( ! VAR_13 ) { return & METHOD_1 ( VAR_14 ) ; } if ( ( TYPE_13 == VAR_15 || TYPE_14 == VAR_16 ) && ( VAR_17 -> VAR_18 > 0 ) ) { METHOD_2 ( VAR_19 , ""ModificationofArrayObjectduringsortingisprohibited"" ) ; return & METHOD_3 ( VAR_20 ) ; ; } switch ( METHOD_4 ( VAR_21 ) ) { case VAR_22 : VAR_23 = METHOD_5 ( VAR_24 ) ; VAR_25 = METHOD_6 ( VAR_26 ) + 1 ; VAR_27 : if ( METHOD_7 ( VAR_28 , VAR_29 , VAR_30 , ( TYPE_15 * * ) & VAR_31 ) == VAR_32 ) { switch ( TYPE_16 ) { case VAR_33 : METHOD_8 ( VAR_34 , ""Undindex:%s"" , VAR_35 ) ; case VAR_36 : case VAR_37 : VAR_38 = & METHOD_9 ( VAR_39 ) ; break ; case VAR_40 : METHOD_10 ( VAR_41 , ""Undindex:%s"" , VAR_42 ) ; case VAR_43 : { TYPE_17 * VAR_44 ; METHOD_11 ( VAR_45 ) ; METHOD_12 ( VAR_46 , VAR_47 , VAR_48 , ( TYPE_18 * * ) & VAR_49 , sizeof ( TYPE_19 * ) , ( TYPE_20 * * ) & VAR_50 ) ; } } } return VAR_51 ; case VAR_52 : VAR_53 = """" ; VAR_54 = 1 ; goto VAR_55 ; case VAR_56 : METHOD_13 ( VAR_57 , ""ResourceID%ldusedasoffset,castingtointeger(%ld)"" , METHOD_14 ( VAR_58 ) , METHOD_15 ( VAR_59 ) ) ; case VAR_60 : case VAR_61 : case VAR_62 : if ( VAR_63 -> TYPE_21 == VAR_64 ) { VAR_65 = ( TYPE_22 ) METHOD_16 ( VAR_66 ) ; } else { VAR_67 = METHOD_17 ( VAR_68 ) ; } if ( METHOD_18 ( VAR_69 , VAR_70 , ( TYPE_23 * * ) & VAR_71 ) == VAR_72 ) { switch ( TYPE_24 ) { case VAR_73 : METHOD_19 ( VAR_74 , ""Undoffset:%ld"" , VAR_75 ) ; case VAR_76 : case VAR_77 : VAR_78 = & METHOD_20 ( VAR_79 ) ; break ; case VAR_80 : METHOD_21 ( VAR_81 , ""Undoffset:%ld"" , VAR_82 ) ; case VAR_83 : { TYPE_25 * VAR_84 ; METHOD_22 ( VAR_85 ) ; METHOD_23 ( VAR_86 , VAR_87 , ( TYPE_26 * * ) & VAR_88 , sizeof ( TYPE_27 * ) , ( TYPE_28 * * ) & VAR_89 ) ; } } } return VAR_90 ; default : METHOD_24 ( VAR_91 , ""Illegaloffsettype"" ) ; return ( TYPE_29 == VAR_92 || TYPE_30 == VAR_93 ) ? & METHOD_25 ( VAR_94 ) : & METHOD_26 ( VAR_95 ) ; } }",356
357,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 , TYPE_3 * VAR_4 ) { unsigned TYPE_4 VAR_5 = 0 ; TYPE_5 VAR_6 ; if ( ( * VAR_7 & ( VAR_8 | VAR_9 ) ) == VAR_10 ) return - VAR_11 ; if ( ( * VAR_12 & VAR_13 ) && ( METHOD_1 ( VAR_14 , VAR_15 ) || METHOD_2 ( VAR_16 , VAR_17 + VAR_18 ) ) ) return - VAR_19 ; if ( * VAR_20 & VAR_21 ) VAR_22 |= VAR_23 ; if ( * VAR_24 & VAR_25 ) VAR_26 |= VAR_27 ; if ( VAR_28 ) VAR_29 |= VAR_30 ; if ( * VAR_31 & VAR_32 ) VAR_33 |= VAR_34 | VAR_35 ; if ( * VAR_36 & VAR_37 ) { METHOD_3 ( VAR_38 & VAR_39 ) ; VAR_40 |= VAR_41 ; } VAR_42 = METHOD_4 ( VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 & VAR_47 ) { if ( VAR_48 & VAR_49 ) return - VAR_50 ; if ( VAR_51 & ( VAR_52 | VAR_53 ) ) return * VAR_54 & VAR_55 ? - VAR_56 : - VAR_57 ; if ( VAR_58 & ( VAR_59 | VAR_60 ) ) return - VAR_61 ; METHOD_5 ( ) ; } if ( VAR_62 ) { if ( VAR_63 & VAR_64 ) VAR_65 -> VAR_66 ++ ; else VAR_67 -> VAR_68 ++ ; } if ( VAR_69 & VAR_70 ) { if ( VAR_71 ) * VAR_72 = 0 ; return - VAR_73 ; } if ( ( VAR_74 & VAR_75 ) && ! ( VAR_76 -> VAR_77 & VAR_78 ) )  * VAR_79 &= ~ VAR_80 ;  return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 , TYPE_3 * VAR_4 ) { unsigned TYPE_4 VAR_5 = 0 ; TYPE_5 VAR_6 ; if ( ( * VAR_7 & ( VAR_8 | VAR_9 ) ) == VAR_10 ) return - VAR_11 ; if ( ( * VAR_12 & VAR_13 ) && ( METHOD_1 ( VAR_14 , VAR_15 ) || METHOD_2 ( VAR_16 , VAR_17 + VAR_18 ) ) ) return - VAR_19 ; if ( * VAR_20 & VAR_21 ) VAR_22 |= VAR_23 ; if ( * VAR_24 & VAR_25 ) VAR_26 |= VAR_27 ; if ( VAR_28 ) VAR_29 |= VAR_30 ; if ( * VAR_31 & VAR_32 ) VAR_33 |= VAR_34 | VAR_35 ; if ( * VAR_36 & VAR_37 ) { METHOD_3 ( VAR_38 & VAR_39 ) ; VAR_40 |= VAR_41 ; } VAR_42 = METHOD_4 ( VAR_43 , VAR_44 , VAR_45 ) ; if ( VAR_46 & VAR_47 ) { if ( VAR_48 & VAR_49 ) return - VAR_50 ; if ( VAR_51 & ( VAR_52 | VAR_53 ) ) return * VAR_54 & VAR_55 ? - VAR_56 : - VAR_57 ; if ( VAR_58 & ( VAR_59 | VAR_60 ) ) return - VAR_61 ; METHOD_5 ( ) ; } if ( VAR_62 ) { if ( VAR_63 & VAR_64 ) VAR_65 -> VAR_66 ++ ; else VAR_67 -> VAR_68 ++ ; } if ( VAR_69 & VAR_70 ) { if ( VAR_71 ) * VAR_72 = 0 ; return - VAR_73 ; } if ( ( VAR_74 & VAR_75 ) && ! ( VAR_76 -> VAR_77 & VAR_78 ) ) * VAR_79 |= VAR_81 ; return 0 ; }",357
358,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; METHOD_1 ( VAR_5 , 3 ) ; METHOD_2 ( VAR_6 ) ; if ( ! VAR_7 -> VAR_8 ) { METHOD_3 ( VAR_9 ) ; } else { VAR_10 -> VAR_11 = METHOD_4 ( VAR_12 , 4 ) ; VAR_13 -> VAR_14 = METHOD_5 ( VAR_15 , 4 ) ; } VAR_16 -> VAR_17 = METHOD_6 ( VAR_18 ) ; METHOD_7 ( VAR_19 , 17 ) ; VAR_20 -> VAR_21 [ 0 ] = 0 ; VAR_22 -> VAR_23 [ 1 ] = 0 ; VAR_24 -> VAR_25 [ 2 ] = 0 ; VAR_26 -> VAR_27 [ 3 ] = VAR_28 = METHOD_8 ( VAR_29 ) ; METHOD_9 ( VAR_30 , VAR_31 -> VAR_32 + 4 , 16 ) ; if ( ! VAR_33 && VAR_34 -> VAR_35 ) { METHOD_10 ( VAR_36 , 1 ) ; VAR_37 = VAR_38 -> VAR_39 [ 20 ] = METHOD_11 ( VAR_40 ) ; METHOD_12 ( VAR_41 , VAR_42 -> VAR_43 [ 20 ] ) ;  METHOD_13 ( VAR_44 , VAR_45 -> VAR_46 + 21 , VAR_47 ) ;  }  return VAR_48 ;  }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = ( TYPE_5 * ) VAR_4 ; METHOD_1 ( VAR_5 , 3 ) ; METHOD_2 ( VAR_6 ) ; if ( ! VAR_7 -> VAR_8 ) { METHOD_3 ( VAR_9 ) ; } else { VAR_10 -> VAR_11 = METHOD_4 ( VAR_12 , 4 ) ; VAR_13 -> VAR_14 = METHOD_5 ( VAR_15 , 4 ) ; } VAR_16 -> VAR_17 = METHOD_6 ( VAR_18 ) ; METHOD_7 ( VAR_19 , 17 ) ; VAR_20 -> VAR_21 [ 0 ] = 0 ; VAR_22 -> VAR_23 [ 1 ] = 0 ; VAR_24 -> VAR_25 [ 2 ] = 0 ; VAR_26 -> VAR_27 [ 3 ] = VAR_28 = METHOD_8 ( VAR_29 ) ; METHOD_9 ( VAR_30 , VAR_31 -> VAR_32 + 4 , 16 ) ; if ( ! VAR_33 && VAR_34 -> VAR_35 ) { METHOD_10 ( VAR_36 , 1 ) ; VAR_37 = VAR_38 -> VAR_39 [ 20 ] = METHOD_11 ( VAR_40 ) ; METHOD_12 ( VAR_41 , VAR_42 -> VAR_43 [ 20 ] ) ; if ( ( VAR_47 != 8 ) && ( VAR_47 != 16 ) ) { METHOD_14 ( VAR_49 , VAR_50 , ( ""[isofile]InvalidconstantIVsize%d,mustbe8or16\\n"" , ( TYPE_6 ) VAR_47 ) ) ; VAR_45 -> VAR_46 [ 20 ] = 16 ; return VAR_51 ; } METHOD_13 ( VAR_44 , VAR_45 -> VAR_46 + 21 , VAR_47 ) ; } else if ( ( VAR_47 != 0 ) && ( VAR_47 != 8 ) && ( VAR_47 != 16 ) ) { METHOD_14 ( VAR_49 , VAR_50 , ( ""[isofile]InvalidIVsize%d,mustbe0,8or16\\n"" , ( TYPE_6 ) VAR_47 ) ) ; return VAR_51 ; } return VAR_48 ; }",358
359,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { TYPE_5 VAR_6 = 0 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_1 ( VAR_9 ) -> VAR_10 ; TYPE_6 VAR_11 = METHOD_2 ( STRUCT_OR_UNION_6 ) ; TYPE_7 VAR_12 = METHOD_3 ( VAR_13 ) ; if ( METHOD_4 ( VAR_14 == VAR_15 ) ) { METHOD_5 ( & VAR_16 , & METHOD_6 ( STRUCT_OR_UNION_7 ) -> VAR_17 -> VAR_18 , sizeof ( VAR_19 ) ) ; } else { VAR_20 . VAR_21 = VAR_22 ; METHOD_7 ( & VAR_23 , VAR_24 ) ; VAR_25 . VAR_26 = 0 ; } if ( METHOD_8 ( VAR_27 == VAR_28 ) ) { VAR_29 = METHOD_9 ( VAR_30 , VAR_31 -> VAR_32 -> VAR_33 , VAR_34 . VAR_35 , VAR_36 -> VAR_37 . VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else if ( VAR_43 ) { VAR_44 = METHOD_10 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; } if ( VAR_52 ) return VAR_53 ; VAR_54 = METHOD_11 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 , & VAR_60 , METHOD_12 ( STRUCT_OR_UNION_8 ) , VAR_61 ) ;  if ( VAR_62 == - VAR_63 )  goto VAR_64 ; else if ( VAR_65 ) { METHOD_13 ( VAR_66 , VAR_67 , VAR_68 ) ; return VAR_69 ; } METHOD_14 ( VAR_70 , VAR_71 -> VAR_72 + VAR_73 * 2 ) ; METHOD_15 ( VAR_74 ) ; VAR_75 -> VAR_76 = VAR_77 -> VAR_78 = VAR_79 ; VAR_80 = METHOD_16 ( VAR_81 , VAR_82 , VAR_83 ) ; if ( VAR_84 ) METHOD_17 ( VAR_85 , VAR_86 , VAR_87 ) ; return VAR_88 ; VAR_89 : if ( METHOD_18 ( VAR_90 == VAR_91 ) ) { TYPE_8 VAR_92 ; TYPE_9 VAR_93 ; VAR_94 = METHOD_19 ( VAR_95 , VAR_96 -> VAR_97 -> VAR_98 , VAR_99 . VAR_100 , VAR_101 -> VAR_102 . VAR_103 , VAR_104 , & VAR_105 , VAR_106 , VAR_107 ) ; } else if ( VAR_108 ) { TYPE_10 VAR_109 ; TYPE_11 VAR_110 ; VAR_111 = METHOD_20 ( VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 , VAR_117 , & VAR_118 ) ; } return VAR_119 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , const TYPE_1 * VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 VAR_5 ) { TYPE_5 VAR_6 = 0 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 = METHOD_1 ( VAR_9 ) -> VAR_10 ; TYPE_6 VAR_11 = METHOD_2 ( STRUCT_OR_UNION_6 ) ; TYPE_7 VAR_12 = METHOD_3 ( VAR_13 ) ; if ( METHOD_4 ( VAR_14 == VAR_15 ) ) { METHOD_5 ( & VAR_16 , & METHOD_6 ( STRUCT_OR_UNION_7 ) -> VAR_17 -> VAR_18 , sizeof ( VAR_19 ) ) ; } else { VAR_20 . VAR_21 = VAR_22 ; METHOD_7 ( & VAR_23 , VAR_24 ) ; VAR_25 . VAR_26 = 0 ; } if ( METHOD_8 ( VAR_27 == VAR_28 ) ) { VAR_29 = METHOD_9 ( VAR_30 , VAR_31 -> VAR_32 -> VAR_33 , VAR_34 . VAR_35 , VAR_36 -> VAR_37 . VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else if ( VAR_43 ) { VAR_44 = METHOD_10 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 ) ; } if ( VAR_52 ) return VAR_53 ; VAR_54 = METHOD_11 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 , & VAR_60 , METHOD_12 ( STRUCT_OR_UNION_8 ) , VAR_61 ) ; if ( VAR_62 == - VAR_63 || VAR_119 == - VAR_120 ) goto VAR_64 ; else if ( VAR_65 ) { METHOD_13 ( VAR_66 , VAR_67 , VAR_68 ) ; return VAR_69 ; } METHOD_14 ( VAR_70 , VAR_71 -> VAR_72 + VAR_73 * 2 ) ; METHOD_15 ( VAR_74 ) ; VAR_75 -> VAR_76 = VAR_77 -> VAR_78 = VAR_79 ; VAR_80 = METHOD_16 ( VAR_81 , VAR_82 , VAR_83 ) ; if ( VAR_84 ) METHOD_17 ( VAR_85 , VAR_86 , VAR_87 ) ; return VAR_88 ; VAR_89 : if ( METHOD_18 ( VAR_90 == VAR_91 ) ) { TYPE_8 VAR_92 ; TYPE_9 VAR_93 ; VAR_94 = METHOD_19 ( VAR_95 , VAR_96 -> VAR_97 -> VAR_98 , VAR_99 . VAR_100 , VAR_101 -> VAR_102 . VAR_103 , VAR_104 , & VAR_105 , VAR_106 , VAR_107 ) ; } else if ( VAR_108 ) { TYPE_10 VAR_109 ; TYPE_11 VAR_110 ; VAR_111 = METHOD_20 ( VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 , VAR_117 , & VAR_118 ) ; } return VAR_119 ; }",359
360,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 -> VAR_5 [ 0 ] ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = - 1 ; VAR_15 -> VAR_16 [ 0 ] -> VAR_17 = 0 ; VAR_18 -> VAR_19 [ 1 ] -> VAR_20 = - 1 ; VAR_21 -> VAR_22 [ 2 ] -> VAR_23 = - 1 ; VAR_24 -> VAR_25 [ 3 ] -> VAR_26 = - 1 ; VAR_27 -> VAR_28 [ 0 ] -> VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 [ 1 ] -> VAR_34 = - 1 ; VAR_35 -> VAR_36 [ 2 ] -> VAR_37 = - 1 ; VAR_38 -> VAR_39 [ 3 ] -> VAR_40 = - 1 ; if ( VAR_41 -> VAR_42 == 1 ) return 0 ; METHOD_1 ( ( TYPE_10 * ) VAR_43 -> VAR_44 ) ; VAR_45 = - 1 ; VAR_46 = 0 ; while ( 1 ) { TYPE_11 VAR_47 ; if ( VAR_48 . VAR_49 + VAR_50 >= VAR_51 . VAR_52 ) { break ; } VAR_53 = METHOD_2 ( & VAR_54 , VAR_55 ) ; VAR_56 = VAR_57 & 0xFF ; VAR_58 = ( ( ( VAR_59 >> 8 ) == 0x01 ) && ( VAR_60 ) && ( VAR_61 <= VAR_62 -> VAR_63 ) ) ; if ( ! VAR_64 ) break ; VAR_65 -= 1 ;  if ( VAR_66 != VAR_67 )  { if ( VAR_68 != - 1 ) { TYPE_12 VAR_69 ; TYPE_13 VAR_70 ; VAR_71 . VAR_72 = VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 ; VAR_83 = METHOD_3 ( VAR_84 -> VAR_85 , & VAR_86 , sizeof ( VAR_87 ) , 1 , 0 ) ; if ( VAR_88 != VAR_89 ) return VAR_90 ; } VAR_91 = VAR_92 . VAR_93 >> 3 ; VAR_94 -= ( TYPE_14 ) VAR_95 . VAR_96 & 3 ; VAR_97 = VAR_98 ; VAR_99 = VAR_100 ;  }  METHOD_4 ( & VAR_101 , VAR_102 ) ; while ( METHOD_5 ( & VAR_103 , 24 ) != VAR_104 ) { METHOD_6 ( & VAR_105 , 8 ) ; if ( VAR_106 . VAR_107 >= VAR_108 . VAR_109 ) { break ; } } } { TYPE_15 VAR_110 ; TYPE_16 VAR_111 ; VAR_112 . VAR_113 = VAR_114 ; VAR_115 . VAR_116 = VAR_117 -> VAR_118 ; VAR_119 . VAR_120 = VAR_121 ; VAR_122 . VAR_123 = VAR_124 ; VAR_125 = METHOD_7 ( VAR_126 -> VAR_127 , & VAR_128 , sizeof ( VAR_129 ) , 1 , 0 ) ; if ( VAR_130 != VAR_131 ) return VAR_132 ; } if ( ( VAR_133 != VAR_134 -> VAR_135 ) && ( ( 0 == VAR_136 -> VAR_137 ) || ( VAR_138 != VAR_139 -> VAR_140 ) ) ) { for ( VAR_141 = 0 ; VAR_142 < VAR_143 -> VAR_144 ; VAR_145 += 64 ) { TYPE_17 VAR_146 ; TYPE_18 VAR_147 ; VAR_148 . VAR_149 = VAR_150 ; VAR_151 . VAR_152 >>= 4 ; VAR_153 . VAR_154 = ( VAR_155 + 64 ) ; VAR_156 . VAR_157 >>= 4 ; VAR_158 . VAR_159 = VAR_160 ; VAR_161 . VAR_162 = 0 ; VAR_163 = METHOD_8 ( VAR_164 -> VAR_165 , & VAR_166 , sizeof ( VAR_167 ) , 1 , 0 ) ; if ( VAR_168 != VAR_169 ) return VAR_170 ; } } METHOD_9 ( VAR_171 -> VAR_172 ) ; VAR_173 -> VAR_174 = VAR_175 . VAR_176 >> 3 ; VAR_177 -> VAR_178 -= ( ( TYPE_19 ) VAR_179 . VAR_180 & 3 ) ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 -> VAR_5 [ 0 ] ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = - 1 ; VAR_15 -> VAR_16 [ 0 ] -> VAR_17 = 0 ; VAR_18 -> VAR_19 [ 1 ] -> VAR_20 = - 1 ; VAR_21 -> VAR_22 [ 2 ] -> VAR_23 = - 1 ; VAR_24 -> VAR_25 [ 3 ] -> VAR_26 = - 1 ; VAR_27 -> VAR_28 [ 0 ] -> VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 [ 1 ] -> VAR_34 = - 1 ; VAR_35 -> VAR_36 [ 2 ] -> VAR_37 = - 1 ; VAR_38 -> VAR_39 [ 3 ] -> VAR_40 = - 1 ; if ( VAR_41 -> VAR_42 == 1 ) return 0 ; METHOD_1 ( ( TYPE_10 * ) VAR_43 -> VAR_44 ) ; VAR_45 = - 1 ; VAR_46 = 0 ; while ( 1 ) { TYPE_11 VAR_47 ; if ( VAR_48 . VAR_49 + VAR_50 >= VAR_51 . VAR_52 ) { break ; } VAR_53 = METHOD_2 ( & VAR_54 , VAR_55 ) ; VAR_56 = VAR_57 & 0xFF ; VAR_58 = ( ( ( VAR_59 >> 8 ) == 0x01 ) && ( VAR_60 ) && ( VAR_61 <= VAR_62 -> VAR_63 ) ) ; if ( ! VAR_64 ) break ; VAR_65 -= 1 ; if ( VAR_66 != VAR_67 ) { if ( VAR_68 != - 1 ) { TYPE_12 VAR_69 ; TYPE_13 VAR_70 ; VAR_71 . VAR_72 = VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 ; VAR_83 = METHOD_3 ( VAR_84 -> VAR_85 , & VAR_86 , sizeof ( VAR_87 ) , 1 , 0 ) ; if ( VAR_88 != VAR_89 ) return VAR_90 ; } VAR_91 = VAR_92 . VAR_93 >> 3 ; VAR_94 -= ( TYPE_14 ) VAR_95 . VAR_96 & 3 ; VAR_97 = VAR_98 ; VAR_99 = VAR_100 ; } else if ( VAR_97 > VAR_100 ) { METHOD_10 ( 0x534e4554 , ""26070014"" ) ; } METHOD_4 ( & VAR_101 , VAR_102 ) ; while ( METHOD_5 ( & VAR_103 , 24 ) != VAR_104 ) { METHOD_6 ( & VAR_105 , 8 ) ; if ( VAR_106 . VAR_107 >= VAR_108 . VAR_109 ) { break ; } } } { TYPE_15 VAR_110 ; TYPE_16 VAR_111 ; VAR_112 . VAR_113 = VAR_114 ; VAR_115 . VAR_116 = VAR_117 -> VAR_118 ; VAR_119 . VAR_120 = VAR_121 ; VAR_122 . VAR_123 = VAR_124 ; VAR_125 = METHOD_7 ( VAR_126 -> VAR_127 , & VAR_128 , sizeof ( VAR_129 ) , 1 , 0 ) ; if ( VAR_130 != VAR_131 ) return VAR_132 ; } if ( ( VAR_133 != VAR_134 -> VAR_135 ) && ( ( 0 == VAR_136 -> VAR_137 ) || ( VAR_138 != VAR_139 -> VAR_140 ) ) ) { for ( VAR_141 = 0 ; VAR_142 < VAR_143 -> VAR_144 ; VAR_145 += 64 ) { TYPE_17 VAR_146 ; TYPE_18 VAR_147 ; VAR_148 . VAR_149 = VAR_150 ; VAR_151 . VAR_152 >>= 4 ; VAR_153 . VAR_154 = ( VAR_155 + 64 ) ; VAR_156 . VAR_157 >>= 4 ; VAR_158 . VAR_159 = VAR_160 ; VAR_161 . VAR_162 = 0 ; VAR_163 = METHOD_8 ( VAR_164 -> VAR_165 , & VAR_166 , sizeof ( VAR_167 ) , 1 , 0 ) ; if ( VAR_168 != VAR_169 ) return VAR_170 ; } } METHOD_9 ( VAR_171 -> VAR_172 ) ; VAR_173 -> VAR_174 = VAR_175 . VAR_176 >> 3 ; VAR_177 -> VAR_178 -= ( ( TYPE_19 ) VAR_179 . VAR_180 & 3 ) ; return 0 ; }",360
361,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; TYPE_1 VAR_2 = VAR_3 -> VAR_4 . VAR_5 . VAR_6 [ VAR_7 ] ; TYPE_2 VAR_8 = ( VAR_9 -> VAR_10 . VAR_11 . VAR_12 [ VAR_13 ] & - 1u ) | ( ( TYPE_3 ) ( VAR_14 -> VAR_15 . VAR_16 . VAR_17 [ VAR_18 ] & - 1u ) << 32 ) ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = METHOD_1 ( & VAR_30 -> VAR_31 ) + 2 ;  if ( METHOD_2 ( & VAR_32 -> VAR_33 , & VAR_34 ) ) {  METHOD_3 ( VAR_35 , VAR_36 ) ; METHOD_4 ( & VAR_37 -> VAR_38 , 0 ) ; } else { METHOD_5 ( VAR_39 , VAR_40 ) ; METHOD_6 ( & VAR_41 -> VAR_42 ) ; } return 1 ; }",static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; TYPE_1 VAR_2 = VAR_3 -> VAR_4 . VAR_5 . VAR_6 [ VAR_7 ] ; TYPE_2 VAR_8 = ( VAR_9 -> VAR_10 . VAR_11 . VAR_12 [ VAR_13 ] & - 1u ) | ( ( TYPE_3 ) ( VAR_14 -> VAR_15 . VAR_16 . VAR_17 [ VAR_18 ] & - 1u ) << 32 ) ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = METHOD_1 ( & VAR_30 -> VAR_31 ) + 2 ; if ( METHOD_7 ( & VAR_41 -> VAR_42 ) ; } return 1 ; },361
362,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ;  VAR_5 * VAR_6 ;  VAR_7 = VAR_8 ; for ( VAR_9 = 0 ; VAR_10 < VAR_11 ; VAR_12 += 16 ) { METHOD_1 ( VAR_13 , ""%04zx:"" , VAR_14 ) ; for ( VAR_15 = 0 ; VAR_16 < 16 ; ++ VAR_17 ) { if ( VAR_18 + VAR_19 < VAR_20 ) { METHOD_2 ( VAR_21 , ""%02x"" , VAR_22 [ VAR_23 + VAR_24 ] ) ; } } METHOD_3 ( VAR_25 , ""\\n"" ) ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; VAR_7 = VAR_8 ; for ( VAR_9 = 0 ; VAR_10 < VAR_11 ; VAR_12 += 16 ) { METHOD_1 ( VAR_13 , ""%04zx:"" , VAR_14 ) ; for ( VAR_15 = 0 ; VAR_16 < 16 ; ++ VAR_17 ) { if ( VAR_18 + VAR_19 < VAR_20 ) { METHOD_2 ( VAR_21 , ""%02x"" , VAR_22 [ VAR_23 + VAR_24 ] ) ; } } METHOD_3 ( VAR_25 , ""\\n"" ) ; } return 0 ; }",362
363,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 ) ; switch ( VAR_6 ) { case VAR_7 : VAR_8 -> VAR_9 = 0 ; VAR_10 -> VAR_11 = 0 ; VAR_12 -> VAR_13 = 8 ; VAR_14 -> VAR_15 = 12 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = - 1 ; return 1 ; case VAR_22 : if ( VAR_23 != VAR_24 ) return 0 ; METHOD_2 ( METHOD_3 ( VAR_25 ) , VAR_26 , VAR_27 ) ; VAR_28 -> VAR_29 = VAR_30 ; { TYPE_7 VAR_31 = METHOD_4 ( VAR_32 ) [ VAR_33 - 2 ] << 8 | METHOD_5 ( VAR_34 ) [ VAR_35 - 1 ] ;  VAR_36 -= VAR_37 ;   if ( ! METHOD_6 ( VAR_38 ) )   VAR_39 -= VAR_40 -> VAR_41 ;  METHOD_7 ( VAR_42 ) [ VAR_43 - 2 ] = VAR_44 >> 8 ; METHOD_8 ( VAR_45 ) [ VAR_46 - 1 ] = VAR_47 & 0xff ; } return VAR_48 -> VAR_49 ; case VAR_50 : if ( VAR_51 != VAR_52 ) return 0 ; METHOD_9 ( METHOD_10 ( VAR_53 ) , VAR_54 , VAR_55 ) ; return 1 ; case VAR_56 : VAR_57 = 15 - VAR_58 ; case VAR_59 : if ( VAR_60 < 2 || VAR_61 > 8 ) return 0 ; VAR_62 -> VAR_63 = VAR_64 ; return 1 ; case VAR_65 : if ( ( VAR_66 & 1 ) || VAR_67 < 4 || VAR_68 > 16 ) return 0 ; if ( METHOD_11 ( VAR_69 ) && VAR_70 ) return 0 ; if ( VAR_71 ) { VAR_72 -> VAR_73 = 1 ; METHOD_12 ( METHOD_13 ( VAR_74 ) , VAR_75 , VAR_76 ) ; } VAR_77 -> VAR_78 = VAR_79 ; return 1 ; case VAR_80 : if ( ! METHOD_14 ( VAR_81 ) || ! VAR_82 -> VAR_83 ) return 0 ; if ( ! METHOD_15 ( & VAR_84 -> VAR_85 , VAR_86 , ( TYPE_8 ) VAR_87 ) ) return 0 ; VAR_88 -> VAR_89 = 0 ; VAR_90 -> VAR_91 = 0 ; VAR_92 -> VAR_93 = 0 ; return 1 ; case VAR_94 : { TYPE_9 * VAR_95 = VAR_96 ; TYPE_10 * VAR_97 = METHOD_16 ( TYPE_11 , VAR_98 ) ; if ( VAR_99 -> VAR_100 . VAR_101 ) { if ( VAR_102 -> VAR_103 . VAR_104 != & VAR_105 -> VAR_106 ) return 0 ; VAR_107 -> VAR_108 . VAR_109 = & VAR_110 -> VAR_111 ; } return 1 ; } default : return - 1 ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 ) ; switch ( VAR_6 ) { case VAR_7 : VAR_8 -> VAR_9 = 0 ; VAR_10 -> VAR_11 = 0 ; VAR_12 -> VAR_13 = 8 ; VAR_14 -> VAR_15 = 12 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = - 1 ; return 1 ; case VAR_22 : if ( VAR_23 != VAR_24 ) return 0 ; METHOD_2 ( METHOD_3 ( VAR_25 ) , VAR_26 , VAR_27 ) ; VAR_28 -> VAR_29 = VAR_30 ; { TYPE_7 VAR_31 = METHOD_4 ( VAR_32 ) [ VAR_33 - 2 ] << 8 | METHOD_5 ( VAR_34 ) [ VAR_35 - 1 ] ; if ( VAR_47 < VAR_37 ) return 0 ; VAR_36 -= VAR_37 ; if ( ! METHOD_6 ( VAR_38 ) ) VAR_39 -= VAR_40 -> VAR_41 ; METHOD_7 ( VAR_42 ) [ VAR_43 - 2 ] = VAR_44 >> 8 ; METHOD_8 ( VAR_45 ) [ VAR_46 - 1 ] = VAR_47 & 0xff ; } return VAR_48 -> VAR_49 ; case VAR_50 : if ( VAR_51 != VAR_52 ) return 0 ; METHOD_9 ( METHOD_10 ( VAR_53 ) , VAR_54 , VAR_55 ) ; return 1 ; case VAR_56 : VAR_57 = 15 - VAR_58 ; case VAR_59 : if ( VAR_60 < 2 || VAR_61 > 8 ) return 0 ; VAR_62 -> VAR_63 = VAR_64 ; return 1 ; case VAR_65 : if ( ( VAR_66 & 1 ) || VAR_67 < 4 || VAR_68 > 16 ) return 0 ; if ( METHOD_11 ( VAR_69 ) && VAR_70 ) return 0 ; if ( VAR_71 ) { VAR_72 -> VAR_73 = 1 ; METHOD_12 ( METHOD_13 ( VAR_74 ) , VAR_75 , VAR_76 ) ; } VAR_77 -> VAR_78 = VAR_79 ; return 1 ; case VAR_80 : if ( ! METHOD_14 ( VAR_81 ) || ! VAR_82 -> VAR_83 ) return 0 ; if ( ! METHOD_15 ( & VAR_84 -> VAR_85 , VAR_86 , ( TYPE_8 ) VAR_87 ) ) return 0 ; VAR_88 -> VAR_89 = 0 ; VAR_90 -> VAR_91 = 0 ; VAR_92 -> VAR_93 = 0 ; return 1 ; case VAR_94 : { TYPE_9 * VAR_95 = VAR_96 ; TYPE_10 * VAR_97 = METHOD_16 ( TYPE_11 , VAR_98 ) ; if ( VAR_99 -> VAR_100 . VAR_101 ) { if ( VAR_102 -> VAR_103 . VAR_104 != & VAR_105 -> VAR_106 ) return 0 ; VAR_107 -> VAR_108 . VAR_109 = & VAR_110 -> VAR_111 ; } return 1 ; } default : return - 1 ; } }",363
364,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; TYPE_15 VAR_19 ; unsigned VAR_20 , VAR_21 ; unsigned VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 = 0x80 ; VAR_26 * VAR_27 ; TYPE_19 VAR_28 ; unsigned TYPE_20 ( * METHOD_1 ) ( TYPE_21 * VAR_29 ) ; unsigned TYPE_22 ( * METHOD_2 ) ( TYPE_23 * VAR_30 ) ; TYPE_24 ( * METHOD_3 ) ( TYPE_25 * VAR_31 , TYPE_26 VAR_32 , TYPE_27 * VAR_33 ) ; TYPE_28 ( * METHOD_4 ) ( TYPE_29 * VAR_34 , TYPE_30 VAR_35 , TYPE_31 * VAR_36 ) ; METHOD_5 ( VAR_37 != ( const TYPE_32 * ) VAR_38 ) ; METHOD_6 ( VAR_39 -> VAR_40 == VAR_41 ) ; METHOD_7 ( VAR_42 != ( TYPE_33 * ) VAR_43 ) ; METHOD_8 ( VAR_44 -> VAR_45 == VAR_46 ) ; VAR_47 = METHOD_9 ( VAR_48 , METHOD_10 ( ) , ""enter"" ) ; VAR_49 = ( TYPE_34 * ) VAR_50 ; VAR_51 = METHOD_11 ( VAR_52 ) ; VAR_53 = METHOD_12 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; if ( VAR_58 == VAR_59 ) { VAR_60 = METHOD_13 ( VAR_61 ) ; return ( ( TYPE_35 * ) VAR_62 ) ; } VAR_63 = ( TYPE_36 * ) VAR_64 ; if ( METHOD_14 ( VAR_65 , 124 , ( unsigned TYPE_37 * ) & VAR_66 . VAR_67 ) != 124 ) METHOD_15 ( VAR_68 , ""ImproperImageHeader"" ) ; if ( METHOD_16 ( VAR_69 . VAR_70 , ""MATLAB"" , 6 ) != 0 ) { VAR_71 = METHOD_17 ( VAR_72 , VAR_73 , VAR_74 ) ; if ( VAR_75 == VAR_76 ) goto VAR_77 ; VAR_78 = VAR_79 ; goto VAR_80 ; } VAR_81 . VAR_82 = METHOD_18 ( VAR_83 ) ; if ( METHOD_19 ( VAR_84 , 2 , ( unsigned TYPE_38 * ) & VAR_85 . VAR_86 ) != 2 ) METHOD_20 ( VAR_87 , ""ImproperImageHeader"" ) ; if ( VAR_88 ) ( TYPE_39 ) METHOD_21 ( VAR_89 , METHOD_22 ( ) , ""Endian%c%c"" , VAR_90 . VAR_91 [ 0 ] , VAR_92 . VAR_93 [ 1 ] ) ; if ( ! METHOD_23 ( VAR_94 . VAR_95 , ""IM"" , 2 ) ) { METHOD_24 = VAR_96 ; METHOD_25 = METHOD_26 ; METHOD_27 = VAR_97 ; METHOD_28 = VAR_98 ; VAR_99 -> VAR_100 = VAR_101 ; } else if ( ! METHOD_29 ( VAR_102 . VAR_103 , ""MI"" , 2 ) ) { METHOD_30 = VAR_104 ; METHOD_31 = VAR_105 ; METHOD_32 = VAR_106 ; METHOD_33 = VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; } else goto VAR_111 ; if ( METHOD_34 ( VAR_112 . VAR_113 , ""MATLAB"" , 6 ) )  VAR_114 : METHOD_35 ( VAR_115 , ""ImproperImageHeader"" ) ;  VAR_116 = METHOD_36 ( VAR_117 ) ; while ( ! METHOD_37 ( VAR_118 ) ) { VAR_119 = 1 ; ( TYPE_40 ) METHOD_38 ( VAR_120 , VAR_121 , VAR_122 ) ; VAR_123 . VAR_124 = METHOD_39 ( VAR_125 ) ; if ( METHOD_40 ( VAR_126 ) ) break ; VAR_127 . VAR_128 = METHOD_41 ( VAR_129 ) ; if ( METHOD_42 ( VAR_130 ) ) break ; if ( VAR_131 . VAR_132 + VAR_133 > METHOD_43 ( VAR_134 ) ) goto VAR_135 ; VAR_136 += VAR_137 . VAR_138 + 4 + 4 ; VAR_139 = METHOD_44 ( VAR_140 ) ; VAR_141 = VAR_142 ; if d ( VAR_143 ) if ( VAR_144 . VAR_145 == VAR_146 ) { VAR_147 = METHOD_45 ( VAR_148 , & VAR_149 . VAR_150 , VAR_151 , VAR_152 ) ; if ( VAR_153 == VAR_154 ) continue ; VAR_155 . VAR_156 = METHOD_46 ( VAR_157 ) ; } if ( VAR_158 . VAR_159 != VAR_160 ) continue ; VAR_161 . VAR_162 = METHOD_47 ( VAR_163 ) ; VAR_164 . VAR_165 = METHOD_48 ( VAR_166 ) ; VAR_167 . VAR_168 = METHOD_49 ( VAR_169 ) ; VAR_170 . VAR_171 = VAR_172 . VAR_173 & 0xFF ; VAR_174 . VAR_175 = ( VAR_176 . VAR_177 >> 8 ) & 0xFF ; VAR_178 . VAR_179 = METHOD_50 ( VAR_180 ) ; if ( VAR_181 != VAR_182 ) VAR_183 . VAR_184 = METHOD_51 ( VAR_185 ) ; VAR_186 . VAR_187 = METHOD_52 ( VAR_188 ) ; VAR_189 . VAR_190 = METHOD_53 ( VAR_191 ) ; VAR_192 . VAR_193 = METHOD_54 ( VAR_194 ) ; VAR_195 . VAR_196 = METHOD_55 ( VAR_197 ) ; switch ( VAR_198 . VAR_199 ) { case 8 : VAR_200 = VAR_201 = 1 ; break ; case 12 : VAR_202 = VAR_203 = METHOD_56 ( VAR_204 ) ; VAR_205 = METHOD_57 ( VAR_206 ) ; ( TYPE_41 ) VAR_207 ; if ( VAR_208 != 3 ) METHOD_58 ( VAR_209 , ""MultidimensionalMatricesAreNotSupported"" ) ; break ; case 16 : VAR_210 = VAR_211 = METHOD_59 ( VAR_212 ) ; if ( VAR_213 != 3 && VAR_214 != 1 ) METHOD_60 ( VAR_215 , ""MultidimensionalMatricesAreNotSupported"" ) ; VAR_216 = METHOD_61 ( VAR_217 ) ; if ( VAR_218 == 0 ) METHOD_62 ( VAR_219 , ""ImproperImageHeader"" ) ; break ; default : METHOD_63 ( VAR_220 , ""MultidimensionalMatricesAreNotSupported"" ) ; } VAR_221 . VAR_222 = METHOD_64 ( VAR_223 ) ; VAR_224 . VAR_225 = METHOD_65 ( VAR_226 ) ; if ( VAR_227 ) ( TYPE_42 ) METHOD_66 ( VAR_228 , METHOD_67 ( ) , ""MATLAB_HDR.StructureClass%d"" , VAR_229 . VAR_230 ) ; if ( VAR_231 . VAR_232 != VAR_233 && VAR_234 . VAR_235 != VAR_236 && VAR_237 . VAR_238 != VAR_239 && VAR_240 . VAR_241 != VAR_242 && VAR_243 . VAR_244 != VAR_245 && VAR_246 . VAR_247 != VAR_248 && VAR_249 . VAR_250 != VAR_251 && VAR_252 . VAR_253 != VAR_254 && VAR_255 . VAR_256 != VAR_257 && VAR_258 . VAR_259 != VAR_260 && VAR_261 . VAR_262 != VAR_263 ) METHOD_68 ( VAR_264 , ""UnsupportedCellTypeInTheMatrix"" ) ; switch ( VAR_265 . VAR_266 ) { case 0 : VAR_267 = METHOD_69 ( VAR_268 ) ; VAR_269 = 4 * ( TYPE_43 ) ( ( VAR_270 + 3 + 1 ) / 4 ) ; ( TYPE_44 ) METHOD_70 ( VAR_271 , VAR_272 , VAR_273 ) ; break ; case 1 : case 2 : case 3 : case 4 : ( TYPE_45 ) METHOD_71 ( VAR_274 , 4 , ( unsigned TYPE_46 * ) & VAR_275 ) ; break ; default : goto VAR_276 ; } VAR_277 = METHOD_72 ( VAR_278 ) ; if ( VAR_279 ) ( TYPE_47 ) METHOD_73 ( VAR_280 , METHOD_74 ( ) , ""MATLAB_HDR.CellType:%.20g"" , ( TYPE_48 ) VAR_281 ) ; ( TYPE_49 ) METHOD_75 ( VAR_282 , 4 , ( unsigned TYPE_50 * ) & VAR_283 ) ; VAR_284 : switch ( VAR_285 ) { case VAR_286 : case VAR_287 : VAR_288 = 8 ; if ( VAR_289 . VAR_290 & VAR_291 ) VAR_292 -> VAR_293 = 1 ; else VAR_294 -> VAR_295 = 8 ; VAR_296 = ( TYPE_51 ) VAR_297 . VAR_298 ; break ; case VAR_299 : case VAR_300 : VAR_301 = 16 ; VAR_302 -> VAR_303 = 16 ; VAR_304 = ( TYPE_52 ) ( 2 * VAR_305 . VAR_306 ) ; break ; case VAR_307 : case VAR_308 : VAR_309 = 32 ; VAR_310 -> VAR_311 = 32 ; VAR_312 = ( TYPE_53 ) ( 4 * VAR_313 . VAR_314 ) ; break ; case VAR_315 : case VAR_316 : VAR_317 = 64 ; VAR_318 -> VAR_319 = 64 ; VAR_320 = ( TYPE_54 ) ( 8 * VAR_321 . VAR_322 ) ; break ; case VAR_323 : VAR_324 = 32 ; VAR_325 -> VAR_326 = 32 ; ( TYPE_55 ) METHOD_76 ( VAR_327 , ""quantum:format"" , ""floating-point"" ) ; if ( VAR_328 . VAR_329 & VAR_330 ) { } VAR_331 = ( TYPE_56 ) ( 4 * VAR_332 . VAR_333 ) ; break ; case VAR_334 : VAR_335 = 64 ; VAR_336 -> VAR_337 = 64 ; ( TYPE_57 ) METHOD_77 ( VAR_338 , ""quantum:format"" , ""floating-point"" ) ; METHOD_78 ( 4127 ) if ( sizeof ( TYPE_58 ) != 8 ) TYPE_59 METHOD_79 ( VAR_339 , ""IncompatibleSizeOfDouble"" ) ; if ( VAR_340 . VAR_341 & VAR_342 ) { } VAR_343 = ( TYPE_60 ) ( 8 * VAR_344 . VAR_345 ) ; break ; default : METHOD_80 ( VAR_346 , ""UnsupportedCellTypeInTheMatrix"" ) ; } ( TYPE_61 ) VAR_347 ; VAR_348 -> VAR_349 = VAR_350 . VAR_351 ; VAR_352 -> VAR_353 = VAR_354 . VAR_355 ; VAR_356 = 1 ; VAR_357 -> VAR_358 = VAR_359 << VAR_360 -> VAR_361 ; if ( VAR_362 -> VAR_363 == 0 || VAR_364 -> VAR_365 == 0 ) goto VAR_366 ; if ( ( unsigned TYPE_62 ) VAR_367 * VAR_368 . VAR_369 > VAR_370 . VAR_371 ) goto VAR_372 ; if ( ( VAR_373 . VAR_374 == 8 ) && ( ( VAR_375 . VAR_376 & VAR_377 ) == 0 ) ) { METHOD_81 ( VAR_378 , VAR_379 ) ; VAR_380 -> VAR_381 = VAR_382 ; } if ( VAR_383 -> VAR_384 ) { TYPE_63 VAR_385 = VAR_386 -> VAR_387 ; VAR_388 -> VAR_389 = VAR_390 -> VAR_391 ; VAR_392 -> VAR_393 = VAR_394 ; goto VAR_395 ; } VAR_396 = METHOD_82 ( VAR_397 , VAR_398 -> VAR_399 , VAR_400 -> VAR_401 ) ; if ( VAR_402 == VAR_403 ) { METHOD_83 ( VAR_404 , & VAR_405 -> VAR_406 ) ; return ( METHOD_84 ( VAR_407 ) ) ; } VAR_408 = METHOD_85 ( VAR_409 , VAR_410 ) ; if ( VAR_411 == ( TYPE_64 * ) VAR_412 ) METHOD_86 ( VAR_413 , ""MemoryAllocationFailed"" ) ; VAR_414 = ( unsigned TYPE_65 * ) METHOD_87 ( ( TYPE_66 ) ( VAR_415 ) , sizeof ( TYPE_67 ) ) ; if ( VAR_416 == VAR_417 ) METHOD_88 ( VAR_418 , ""MemoryAllocationFailed"" ) ; ( TYPE_68 ) METHOD_89 ( VAR_419 , 0 , VAR_420 * sizeof ( TYPE_69 ) ) ; VAR_421 = 0 ; VAR_422 = 0 ; if ( VAR_423 == VAR_424 || VAR_425 == VAR_426 ) { METHOD_90 ( VAR_427 , VAR_428 -> VAR_429 , VAR_430 . VAR_431 , VAR_432 . VAR_433 , VAR_434 , VAR_435 , VAR_436 , & VAR_437 -> VAR_438 , & VAR_439 -> VAR_440 ) ; } if ( VAR_441 == 1 ) VAR_442 = 0 ; do { for ( VAR_443 = 0 ; VAR_444 < ( TYPE_70 ) VAR_445 . VAR_446 ; VAR_447 ++ ) { VAR_448 = METHOD_91 ( VAR_449 , 0 , VAR_450 . VAR_451 - VAR_452 - 1 , VAR_453 -> VAR_454 , 1 , VAR_455 ) ; if ( VAR_456 == ( TYPE_71 * ) VAR_457 ) { if ( VAR_458 ) ( TYPE_72 ) METHOD_92 ( VAR_459 , METHOD_93 ( ) , ""MATsetimagepixelsreturnsunexpectedNULLonarow%u."" , ( unsigned ) ( VAR_460 . VAR_461 - VAR_462 - 1 ) ) ; goto VAR_463 ; } if ( METHOD_94 ( VAR_464 , VAR_465 , ( unsigned TYPE_73 * ) VAR_466 ) != ( TYPE_74 ) VAR_467 ) { if ( VAR_468 ) ( TYPE_75 ) METHOD_95 ( VAR_469 , METHOD_96 ( ) , ""MATcannotreadscanrow%ufromafile."" , ( unsigned ) ( VAR_470 . VAR_471 - VAR_472 - 1 ) ) ; goto VAR_473 ; } if ( ( VAR_474 == VAR_475 || VAR_476 == VAR_477 ) && ( VAR_478 . VAR_479 & VAR_480 ) ) { METHOD_97 ( ( unsigned TYPE_76 * ) VAR_481 , VAR_482 ) ; if ( METHOD_98 ( VAR_483 , ( TYPE_77 * ) VAR_484 , VAR_485 , VAR_486 [ VAR_487 ] , VAR_488 , VAR_489 ) <= 0 ) { VAR_490 : if ( VAR_491 ) ( TYPE_78 ) METHOD_99 ( VAR_492 , METHOD_100 ( ) , ""MATfailedtoImportQuantumPixelsforarow%u"" , ( unsigned ) ( VAR_493 . VAR_494 - VAR_495 - 1 ) ) ; break ; } } else { if ( METHOD_101 ( VAR_496 , ( TYPE_79 * ) VAR_497 , VAR_498 , VAR_499 [ VAR_500 ] , VAR_501 , VAR_502 ) <= 0 ) goto VAR_503 ; if ( VAR_504 <= 1 && ( VAR_505 == VAR_506 || VAR_507 == VAR_508 || VAR_509 == VAR_510 || VAR_511 == VAR_512 ) ) METHOD_102 ( VAR_513 , VAR_514 . VAR_515 ) ; } if ( ! METHOD_103 ( VAR_516 , VAR_517 ) ) { if ( VAR_518 ) ( TYPE_80 ) METHOD_104 ( VAR_519 , METHOD_105 ( ) , ""MATfailedtosyncimagepixelsforarow%u"" , ( unsigned ) ( VAR_520 . VAR_521 - VAR_522 - 1 ) ) ; goto VAR_523 ; } } } while ( VAR_524 -- >= 2 ) ; VAR_525 : if ( VAR_526 . VAR_527 & VAR_528 ) { VAR_529 = METHOD_106 ( VAR_530 ) ; VAR_531 = METHOD_107 ( VAR_532 ) ; if ( VAR_533 == VAR_534 || VAR_535 == VAR_536 ) { METHOD_108 ( VAR_537 , VAR_538 -> VAR_539 , VAR_540 . VAR_541 , VAR_542 . VAR_543 , VAR_544 , VAR_545 , VAR_546 , & VAR_547 , & VAR_548 ) ; } if ( VAR_549 == VAR_550 ) for ( VAR_551 = 0 ; VAR_552 < ( TYPE_81 ) VAR_553 . VAR_554 ; VAR_555 ++ ) { METHOD_109 ( VAR_556 , VAR_557 , ( TYPE_82 * ) VAR_558 ) ; METHOD_110 ( ( TYPE_83 * ) VAR_559 , VAR_560 , VAR_561 , VAR_562 , VAR_563 ) ; } if ( VAR_564 == VAR_565 ) for ( VAR_566 = 0 ; VAR_567 < ( TYPE_84 ) VAR_568 . VAR_569 ; VAR_570 ++ ) { METHOD_111 ( VAR_571 , VAR_572 , ( TYPE_85 * ) VAR_573 ) ; METHOD_112 ( ( TYPE_86 * ) VAR_574 , VAR_575 , VAR_576 , VAR_577 , VAR_578 ) ; } } if ( ( VAR_579 . VAR_580 == 8 ) && ( ( VAR_581 . VAR_582 & VAR_583 ) == 0 ) ) VAR_584 -> VAR_585 = VAR_586 ; if ( VAR_587 -> VAR_588 == 1 ) VAR_589 -> VAR_590 = VAR_591 ; if ( VAR_592 == VAR_593 ) VAR_594 = VAR_595 ; VAR_596 = METHOD_113 ( VAR_597 , 90.0 , VAR_598 ) ; if ( VAR_599 != ( TYPE_87 * ) VAR_600 ) { VAR_601 -> VAR_602 . VAR_603 = 0 ; VAR_604 -> VAR_605 . VAR_606 = 0 ; VAR_607 = VAR_608 -> VAR_609 ; VAR_610 -> VAR_611 = VAR_612 -> VAR_613 ; VAR_614 -> VAR_615 = VAR_616 -> VAR_617 ; VAR_618 -> VAR_619 = VAR_620 ; METHOD_114 ( & VAR_621 , VAR_622 ) ; METHOD_115 ( & VAR_623 ) ; } VAR_624 : if ( VAR_625 != VAR_626 ) if ( VAR_627 != VAR_628 ) { METHOD_116 ( & VAR_629 ) ; if ( VAR_630 ) { if ( VAR_631 -> VAR_632 ) { METHOD_117 ( VAR_633 -> VAR_634 ) ; VAR_635 -> VAR_636 = VAR_637 ; ( TYPE_88 ) METHOD_118 ( VAR_638 -> VAR_639 ) ; } } } METHOD_119 ( VAR_640 , VAR_641 ) ; if ( VAR_642 -> VAR_643 == ( TYPE_89 * ) VAR_644 ) break ; VAR_645 = METHOD_120 ( VAR_646 ) ; VAR_647 -> VAR_648 = VAR_649 -> VAR_650 = 0 ; VAR_651 -> VAR_652 = 0 ; METHOD_121 ( VAR_653 ) ; VAR_654 = VAR_655 ; if ( -- VAR_656 > 0 ) { VAR_657 = VAR_658 ; if ( VAR_659 == VAR_660 ) VAR_661 = VAR_662 ; goto VAR_663 ; } if ( VAR_664 != VAR_665 ) if ( VAR_666 != VAR_667 ) { METHOD_122 ( & VAR_668 ) ; if ( VAR_669 ) { if ( VAR_670 -> VAR_671 ) { METHOD_123 ( VAR_672 -> VAR_673 ) ; VAR_674 -> VAR_675 = VAR_676 ; ( TYPE_90 ) METHOD_124 ( VAR_677 -> VAR_678 ) ; } } } } METHOD_125 ( VAR_679 ) ; if ( VAR_680 != ( TYPE_91 * ) VAR_681 ) VAR_682 = METHOD_126 ( VAR_683 ) ; VAR_684 : if ( VAR_685 ) VAR_686 = METHOD_127 ( VAR_687 ) ; METHOD_128 ( VAR_688 ) ; { TYPE_92 * VAR_689 ; TYPE_93 VAR_690 = 0 ; VAR_691 = VAR_692 ; VAR_693 = VAR_694 ; while ( VAR_695 != ( TYPE_94 * ) VAR_696 ) { TYPE_95 * VAR_697 = VAR_698 ; if ( ( VAR_699 -> VAR_700 == 0 ) || ( VAR_701 -> VAR_702 == 0 ) ) { VAR_703 = VAR_704 -> VAR_705 ; METHOD_129 ( & VAR_706 ) ; } else { VAR_707 = VAR_708 ; VAR_709 = VAR_710 -> VAR_711 ; } } for ( VAR_712 = VAR_713 ; VAR_714 != ( TYPE_96 * ) VAR_715 ; VAR_716 = VAR_717 -> VAR_718 ) VAR_719 -> VAR_720 = VAR_721 ++ ; } if ( VAR_722 != VAR_723 ) { if ( VAR_724 -> VAR_725 ) { METHOD_130 ( VAR_726 -> VAR_727 ) ; VAR_728 -> VAR_729 = VAR_730 ; ( TYPE_97 ) METHOD_131 ( VAR_731 -> VAR_732 ) ; } METHOD_132 ( VAR_733 ) ; VAR_734 = VAR_735 ; } if ( VAR_736 ) ( TYPE_98 ) METHOD_133 ( VAR_737 , METHOD_134 ( ) , ""return"" ) ; if ( VAR_738 == VAR_739 ) METHOD_135 ( VAR_740 , ""ImproperImageHeader"" ) ; return ( VAR_741 ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 = VAR_4 , * VAR_5 ; TYPE_4 * VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 * VAR_11 ; TYPE_10 * VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 ; unsigned TYPE_13 * VAR_15 = VAR_16 ; TYPE_14 VAR_17 , VAR_18 ; TYPE_15 VAR_19 ; unsigned VAR_20 , VAR_21 ; unsigned VAR_22 ; TYPE_16 VAR_23 ; TYPE_17 VAR_24 ; TYPE_18 VAR_25 = 0x80 ; VAR_26 * VAR_27 ; TYPE_19 VAR_28 ; unsigned TYPE_20 ( * METHOD_1 ) ( TYPE_21 * VAR_29 ) ; unsigned TYPE_22 ( * METHOD_2 ) ( TYPE_23 * VAR_30 ) ; TYPE_24 ( * METHOD_3 ) ( TYPE_25 * VAR_31 , TYPE_26 VAR_32 , TYPE_27 * VAR_33 ) ; TYPE_28 ( * METHOD_4 ) ( TYPE_29 * VAR_34 , TYPE_30 VAR_35 , TYPE_31 * VAR_36 ) ; METHOD_5 ( VAR_37 != ( const TYPE_32 * ) VAR_38 ) ; METHOD_6 ( VAR_39 -> VAR_40 == VAR_41 ) ; METHOD_7 ( VAR_42 != ( TYPE_33 * ) VAR_43 ) ; METHOD_8 ( VAR_44 -> VAR_45 == VAR_46 ) ; VAR_47 = METHOD_9 ( VAR_48 , METHOD_10 ( ) , ""enter"" ) ; VAR_49 = ( TYPE_34 * ) VAR_50 ; VAR_51 = METHOD_11 ( VAR_52 ) ; VAR_53 = METHOD_12 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; if ( VAR_58 == VAR_59 ) { VAR_60 = METHOD_13 ( VAR_61 ) ; return ( ( TYPE_35 * ) VAR_62 ) ; } VAR_63 = ( TYPE_36 * ) VAR_64 ; if ( METHOD_14 ( VAR_65 , 124 , ( unsigned TYPE_37 * ) & VAR_66 . VAR_67 ) != 124 ) METHOD_15 ( VAR_68 , ""ImproperImageHeader"" ) ; if ( METHOD_16 ( VAR_69 . VAR_70 , ""MATLAB"" , 6 ) != 0 ) { VAR_71 = METHOD_17 ( VAR_72 , VAR_73 , VAR_74 ) ; if ( VAR_75 == VAR_76 ) goto VAR_77 ; VAR_78 = VAR_79 ; goto VAR_80 ; } VAR_81 . VAR_82 = METHOD_18 ( VAR_83 ) ; if ( METHOD_19 ( VAR_84 , 2 , ( unsigned TYPE_38 * ) & VAR_85 . VAR_86 ) != 2 ) METHOD_20 ( VAR_87 , ""ImproperImageHeader"" ) ; if ( VAR_88 ) ( TYPE_39 ) METHOD_21 ( VAR_89 , METHOD_22 ( ) , ""Endian%c%c"" , VAR_90 . VAR_91 [ 0 ] , VAR_92 . VAR_93 [ 1 ] ) ; if ( ! METHOD_23 ( VAR_94 . VAR_95 , ""IM"" , 2 ) ) { METHOD_24 = VAR_96 ; METHOD_25 = METHOD_26 ; METHOD_27 = VAR_97 ; METHOD_28 = VAR_98 ; VAR_99 -> VAR_100 = VAR_101 ; } else if ( ! METHOD_29 ( VAR_102 . VAR_103 , ""MI"" , 2 ) ) { METHOD_30 = VAR_104 ; METHOD_31 = VAR_105 ; METHOD_32 = VAR_106 ; METHOD_33 = VAR_107 ; VAR_108 -> VAR_109 = VAR_110 ; } else goto VAR_111 ; if ( METHOD_34 ( VAR_112 . VAR_113 , ""MATLAB"" , 6 ) ) { VAR_372 : VAR_734 = METHOD_132 ( VAR_734 ) ; METHOD_135 ( VAR_740 , ""ImproperImageHeader"" ) ; } return ( VAR_741 ) ; }",364
365,TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 ;  TYPE_3 VAR_2 = 0 ; VAR_3 = VAR_4 ; while ( * VAR_5 != '\\0' ) if ( * VAR_6 ++ == '%' ) { if ( * VAR_7 == '\\0' ) return 1 ; if ( * VAR_8 == '%' ) VAR_9 ++ ; else if ( * VAR_10 == 's' || * VAR_11 == 'S' ) { VAR_12 = 1 ; VAR_13 ++ ; } else { if ( * VAR_14 == '' ) VAR_15 ++ ; while ( * VAR_16 >= '0' && * VAR_17 <= '9' ) VAR_18 ++ ; if ( * VAR_19 ++ != 'l' ) return 1 ; if ( * VAR_20 == 'u' ) VAR_21 ++ ; else return 1 ; VAR_22 ++ ; } } return ( VAR_23 != 3 ) ; },TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 VAR_2 = 0 ; VAR_3 = VAR_4 ; while ( * VAR_5 != '\\0' ) if ( * VAR_6 ++ == '%' ) { if ( * VAR_7 == '\\0' ) return 1 ; if ( * VAR_8 == '%' ) VAR_9 ++ ; else if ( * VAR_10 == 's' || * VAR_11 == 'S' ) { VAR_12 = 1 ; VAR_13 ++ ; } else { if ( * VAR_14 == '' ) VAR_15 ++ ; while ( * VAR_16 >= '0' && * VAR_17 <= '9' ) VAR_18 ++ ; if ( * VAR_19 ++ != 'l' ) return 1 ; if ( * VAR_20 == 'u' ) VAR_21 ++ ; else return 1 ; VAR_22 ++ ; } } return ( VAR_23 != 3 ) ; },365
366,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 != VAR_3 ) { return METHOD_1 ( VAR_4 -> VAR_5 ) ; } else { TYPE_1 * VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 == VAR_10 ) {  VAR_11 = METHOD_2 ( VAR_12 -> VAR_13 , VAR_14 ) ;  if ( VAR_15 == VAR_16 ) { METHOD_3 ( VAR_17 ) ; return 1 ; } else { VAR_18 -> VAR_19 = VAR_20 ; } } return METHOD_4 ( VAR_21 ) == 0 ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( VAR_1 -> VAR_2 != VAR_3 ) { return METHOD_1 ( VAR_4 -> VAR_5 ) ; } else { TYPE_1 * VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 == VAR_10 ) { VAR_11 = METHOD_2 ( VAR_12 -> VAR_13 , VAR_14 ) ; if ( VAR_15 == VAR_16 ) { METHOD_3 ( VAR_17 ) ; return 1 ; } else { VAR_18 -> VAR_19 = VAR_20 ; } } return METHOD_4 ( VAR_21 ) == 0 ; } }",366
367,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; if ( ( VAR_4 & VAR_5 ) == VAR_6 && ( VAR_7 & VAR_8 ) == VAR_9 ) { TYPE_2 VAR_10 = ( VAR_11 & VAR_12 ) >> 11 ; TYPE_3 VAR_13 = ( VAR_14 & VAR_15 ) >> 16 ; METHOD_2 ( VAR_16 ,  1 , 0 , VAR_17 , 0 ) ;  switch ( VAR_18 ) { case 0 : VAR_19 -> VAR_20 [ VAR_21 ] = METHOD_3 ( ) ; return 0 ; case 1 : VAR_22 -> VAR_23 [ VAR_24 ] = METHOD_4 ( VAR_25 . VAR_26 . VAR_27 , VAR_28 . VAR_29 . VAR_30 ) ; return 0 ; case 2 : VAR_31 -> VAR_32 [ VAR_33 ] = METHOD_5 ( ) ; return 0 ; case 3 : switch ( VAR_34 . VAR_35 ) { case VAR_36 : case VAR_37 : VAR_38 -> VAR_39 [ VAR_40 ] = 1 ; break ; default : VAR_41 -> VAR_42 [ VAR_43 ] = 2 ; } return 0 ; case 29 : VAR_44 -> VAR_45 [ VAR_46 ] = VAR_47 -> VAR_48 ; return 0 ; default : return - 1 ; } } return - 1 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = METHOD_1 ( VAR_3 ) ; if ( ( VAR_4 & VAR_5 ) == VAR_6 && ( VAR_7 & VAR_8 ) == VAR_9 ) { TYPE_2 VAR_10 = ( VAR_11 & VAR_12 ) >> 11 ; TYPE_3 VAR_13 = ( VAR_14 & VAR_15 ) >> 16 ; METHOD_2 ( VAR_16 , 1 , 0 , VAR_17 , 0 ) ; switch ( VAR_18 ) { case 0 : VAR_19 -> VAR_20 [ VAR_21 ] = METHOD_3 ( ) ; return 0 ; case 1 : VAR_22 -> VAR_23 [ VAR_24 ] = METHOD_4 ( VAR_25 . VAR_26 . VAR_27 , VAR_28 . VAR_29 . VAR_30 ) ; return 0 ; case 2 : VAR_31 -> VAR_32 [ VAR_33 ] = METHOD_5 ( ) ; return 0 ; case 3 : switch ( VAR_34 . VAR_35 ) { case VAR_36 : case VAR_37 : VAR_38 -> VAR_39 [ VAR_40 ] = 1 ; break ; default : VAR_41 -> VAR_42 [ VAR_43 ] = 2 ; } return 0 ; case 29 : VAR_44 -> VAR_45 [ VAR_46 ] = VAR_47 -> VAR_48 ; return 0 ; default : return - 1 ; } } return - 1 ; }",367
368,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = - VAR_4 ; unsigned TYPE_2 * VAR_5 = VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ;  struct STRUCT_OR_UNION_3 * VAR_9 = VAR_10 ;  struct STRUCT_OR_UNION_4 * VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ; if ( VAR_17 == VAR_18 ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } VAR_22 = METHOD_2 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 < 0 ) goto VAR_28 ; VAR_29 = VAR_30 ; VAR_31 = ( VAR_32 + 3 ) & ~ 3 ; VAR_33 = METHOD_3 ( sizeof ( * VAR_34 ) + VAR_35 , VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 = - VAR_40 ; goto VAR_41 ; }  METHOD_4 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 ) ;   VAR_46 -> VAR_47 = VAR_48 ;   VAR_49 -> VAR_50 = sizeof ( struct STRUCT_OR_UNION_5 ) ;  METHOD_5 ( VAR_51 ) ; VAR_52 = VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 ) ; VAR_56 = METHOD_7 ( & VAR_57 -> VAR_58 , VAR_59 ) ;  METHOD_8 ( VAR_60 ) ;  return 0 ; VAR_61 : METHOD_9 ( VAR_62 ) ; METHOD_10 ( VAR_63 ) ; return VAR_64 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = - VAR_4 ; unsigned TYPE_2 * VAR_5 = VAR_6 ; TYPE_3 VAR_7 ; TYPE_4 VAR_8 ; struct STRUCT_OR_UNION_3 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_4 * VAR_11 ; VAR_12 = VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 , VAR_16 ) ; if ( VAR_17 == VAR_18 ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } VAR_22 = METHOD_2 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 < 0 ) goto VAR_28 ; VAR_29 = VAR_30 ; VAR_31 = ( VAR_32 + 3 ) & ~ 3 ; VAR_33 = METHOD_3 ( sizeof ( * VAR_34 ) + VAR_35 , VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 = - VAR_40 ; goto VAR_41 ; } METHOD_4 ( VAR_42 -> VAR_43 , VAR_44 , VAR_45 ) ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = sizeof ( struct STRUCT_OR_UNION_5 ) ; METHOD_5 ( VAR_51 ) ; VAR_52 = VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 ) ; VAR_56 = METHOD_7 ( & VAR_57 -> VAR_58 , VAR_59 ) ; METHOD_8 ( VAR_60 ) ; return 0 ; VAR_61 : METHOD_9 ( VAR_62 ) ; METHOD_10 ( VAR_63 ) ; return VAR_64 ; }",368
369,"TYPE_0 TYPE_1 * METHOD_0 ( const TYPE_2 * VAR_0 , TYPE_3 * VAR_1 , TYPE_4 * VAR_2 ) {  TYPE_5 * VAR_3 = METHOD_1 ( ""R2_CURL"" ) ;  if ( VAR_4 && * VAR_5 ) { TYPE_6 * VAR_6 = METHOD_2 ( VAR_7 ) ; TYPE_7 * VAR_8 = METHOD_3 ( ""curl\'%s\'"" , VAR_9 ) ; METHOD_4 ( VAR_10 ) ; if ( VAR_11 ) { if ( VAR_12 ) { * VAR_13 = 200 ; } if ( VAR_14 ) { * VAR_15 = METHOD_5 ( VAR_16 ) ; }  }  METHOD_6 ( VAR_17 ) ; return VAR_18 ; } METHOD_7 ( VAR_19 ) ; VAR_20 * VAR_21 ; TYPE_8 VAR_22 = METHOD_8 ( VAR_23 , ""https://"" ) ; TYPE_9 * VAR_24 , * VAR_25 , * VAR_26 , * VAR_27 = ""80"" ; TYPE_10 * VAR_28 = METHOD_9 ( VAR_29 ) ; if ( ! VAR_30 ) { return VAR_31 ; } if ( VAR_32 ) { * VAR_33 = 0 ; } if ( VAR_34 ) { * VAR_35 = 0 ; } VAR_36 = METHOD_10 ( VAR_37 , ""://"" ) ; if ( ! VAR_38 ) { METHOD_11 ( VAR_39 ) ; METHOD_12 ( ""r_socket_http_get:InvalidURI"" ) ; return VAR_40 ; } VAR_41 += 3 ; VAR_42 = METHOD_13 ( VAR_43 , ':' ) ; if ( ! VAR_44 ) { VAR_45 = VAR_46 ? ""443"" : ""80"" ; VAR_47 = VAR_48 ; } else { * VAR_49 ++ = 0 ; VAR_50 = VAR_51 ; } VAR_52 = METHOD_14 ( VAR_53 , '/' ) ; if ( ! VAR_54 ) { VAR_55 = """" ; } else { * VAR_56 ++ = 0 ; } VAR_57 = METHOD_15 ( VAR_58 ) ; if ( ! VAR_59 ) { METHOD_16 ( ""r_socket_http_get:Cannotcreatesocket\\n"" ) ; METHOD_17 ( VAR_60 ) ; return VAR_61 ; } if ( METHOD_18 ( VAR_62 , VAR_63 , VAR_64 , 0 ) ) { r_socket_printf ( VAR_65 , ""GET/%sHTTP/1.1\\r\\n"" ""User-Agent:radare2"" R2_VERSION ""\\r\\n"" ""Accept:*/*\\r\\n"" ""Host:%s:%s\\r\\n"" ""\\r\\n"" , VAR_66 , VAR_67 , VAR_68 ) ; VAR_69 = METHOD_19 ( VAR_70 , VAR_71 , VAR_72 ) ; } else { METHOD_20 ( ""Cannotconnectto%s:%s\\n"" , VAR_73 , VAR_74 ) ; VAR_75 = VAR_76 ; } METHOD_21 ( VAR_77 ) ; METHOD_22 ( VAR_78 ) ; return VAR_79 ; }","TYPE_0 TYPE_1 * METHOD_0 ( const TYPE_2 * VAR_0 , TYPE_3 * VAR_1 , TYPE_4 * VAR_2 ) { TYPE_5 * VAR_3 = METHOD_1 ( ""R2_CURL"" ) ; if ( VAR_4 && * VAR_5 ) { TYPE_6 * VAR_6 = METHOD_2 ( VAR_7 ) ; TYPE_7 * VAR_8 = METHOD_3 ( ""curl\'%s\'"" , VAR_9 ) ; METHOD_4 ( VAR_10 ) ; if ( VAR_11 ) { if ( VAR_12 ) { * VAR_13 = 200 ; } if ( VAR_14 ) { * VAR_15 = METHOD_5 ( VAR_16 ) ; }",369
370,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 = METHOD_3 ( VAR_6 ) ; unsigned TYPE_1 VAR_7 ; unsigned TYPE_2 VAR_8 ; unsigned TYPE_3 VAR_9 ; if ( VAR_10 ) { VAR_11 = METHOD_4 ( VAR_12 , VAR_13 , VAR_14 -> VAR_15 ) ; VAR_16 = METHOD_5 ( VAR_17 , VAR_18 , VAR_19 -> VAR_20 ) ; VAR_21 = ( VAR_22 - VAR_23 ) - METHOD_6 ( & VAR_24 -> VAR_25 , VAR_26 , VAR_27 ) ;  METHOD_7 ( & VAR_28 -> VAR_29 , VAR_30 ) ;  if ( VAR_31 ) { METHOD_8 ( VAR_32 , - VAR_33 ) ; METHOD_9 ( VAR_34 , VAR_35 ) ; } } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_5 = METHOD_3 ( VAR_6 ) ; unsigned TYPE_1 VAR_7 ; unsigned TYPE_2 VAR_8 ; unsigned TYPE_3 VAR_9 ; if ( VAR_10 ) { VAR_11 = METHOD_4 ( VAR_12 , VAR_13 , VAR_14 -> VAR_15 ) ; VAR_16 = METHOD_5 ( VAR_17 , VAR_18 , VAR_19 -> VAR_20 ) ; VAR_21 = ( VAR_22 - VAR_23 ) - METHOD_6 ( & VAR_24 -> VAR_25 , VAR_26 , VAR_27 ) ; METHOD_10 ( VAR_19 ) ; if ( VAR_31 ) { METHOD_8 ( VAR_32 , - VAR_33 ) ; METHOD_9 ( VAR_34 , VAR_35 ) ; } } }",370
371," TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  TYPE_1 VAR_1 [ 32 ] ; TYPE_2 VAR_2 = 0 ; TYPE_3 VAR_3 ; VAR_4 . VAR_5 = sizeof ( VAR_6 ) ; if ( METHOD_1 ( VAR_7 , 1 , 32 , VAR_8 -> VAR_9 ) == 32 ) { TYPE_4 VAR_10 ; if ( METHOD_2 ( VAR_11 ) < 256 * 1024 * 1024 ) { for ( VAR_12 = 0 ; VAR_13 < METHOD_3 ( ) ; ++ VAR_14 ) { const TYPE_5 * const VAR_15 = METHOD_4 ( VAR_16 ) ;  if ( ! METHOD_5 ( VAR_17 -> METHOD_6 ( ) ,  VAR_18 + 4 , 32 - 4 , & VAR_19 ) ) { VAR_20 = 1 ; VAR_21 -> VAR_22 = VAR_23 -> VAR_24 ; VAR_25 -> VAR_26 = VAR_27 . VAR_28 ; VAR_29 -> VAR_30 = VAR_31 . VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = 30 ; VAR_36 -> VAR_37 . VAR_38 = 1 ; break ; } } } } METHOD_7 ( VAR_39 -> VAR_40 ) ; return VAR_41 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 [ 32 ] ; TYPE_2 VAR_2 = 0 ; TYPE_3 VAR_3 ; VAR_4 . VAR_5 = sizeof ( VAR_6 ) ; if ( METHOD_1 ( VAR_7 , 1 , 32 , VAR_8 -> VAR_9 ) == 32 ) { TYPE_4 VAR_10 ; if ( METHOD_2 ( VAR_11 ) < 256 * 1024 * 1024 ) { for ( VAR_12 = 0 ; VAR_13 < METHOD_3 ( ) ; ++ VAR_14 ) { const TYPE_5 * const VAR_15 = METHOD_4 ( VAR_16 ) ; if ( ! METHOD_5 ( VAR_17 -> METHOD_6 ( ) , VAR_18 + 4 , 32 - 4 , & VAR_19 ) ) { VAR_20 = 1 ; VAR_21 -> VAR_22 = VAR_23 -> VAR_24 ; VAR_25 -> VAR_26 = VAR_27 . VAR_28 ; VAR_29 -> VAR_30 = VAR_31 . VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = 30 ; VAR_36 -> VAR_37 . VAR_38 = 1 ; break ; } } } } METHOD_7 ( VAR_39 -> VAR_40 ) ; return VAR_41 ; }",371
372,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , signed TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 ) { VAR_3 -> VAR_4 = VAR_5 ;  METHOD_1 ( VAR_6 -> VAR_7 , VAR_8 , sizeof ( VAR_9 -> VAR_10 ) ) ;  }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , signed TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 ) { VAR_3 -> VAR_4 = VAR_5 ; METHOD_2 ( VAR_9 -> VAR_10 ) ) ; }",372
373,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { switch ( VAR_3 -> VAR_4 ) { case VAR_5 : return 0 ; case VAR_6 : case VAR_7 :  return ( ( VAR_8 < VAR_9 -> VAR_10 ) ||   ( ( VAR_11 + VAR_12 ) > ( VAR_13 -> VAR_14 + VAR_15 -> VAR_16 ) ) ) ?  - VAR_17 : 0 ; default : return - VAR_18 ; } }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { switch ( VAR_3 -> VAR_4 ) { case VAR_5 : return 0 ; case VAR_6 : case VAR_7 : return ( ( VAR_8 < VAR_9 -> VAR_10 ) || ( ( VAR_11 + VAR_12 ) > ( VAR_13 -> VAR_14 + VAR_15 -> VAR_16 - VAR_16 ) return - VAR_18 ; return 0 ; default : return - VAR_18 ; } }",373
374,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 VAR_7 ; if ( VAR_8 -> VAR_9 == 1 ) VAR_10 -> VAR_11 = 0 ; else VAR_12 -> VAR_13 = 1 ;  VAR_14 -> VAR_15 = - 1 ;  VAR_16 -> VAR_17 = METHOD_1 ( VAR_18 ) ; if ( ! VAR_19 -> VAR_20 ) return METHOD_2 ( VAR_21 ) ; if ( VAR_22 ) METHOD_3 ( & VAR_23 -> VAR_24 , * VAR_25 , 0 ) ; if ( VAR_26 -> VAR_27 ) { TYPE_7 VAR_28 = METHOD_4 ( VAR_29 -> VAR_30 ) ; if ( VAR_31 < 2 || METHOD_5 ( ""\\r\\n"" , VAR_32 -> VAR_33 + VAR_34 - 2 ) ) { METHOD_6 ( VAR_35 , VAR_36 , ""NotrailingCRLFfoundinHTTPheader.\\n"" ) ; VAR_37 = METHOD_7 ( & VAR_38 -> VAR_39 , VAR_40 + 3 ) ; if ( VAR_41 < 0 ) return VAR_42 ; VAR_43 -> VAR_44 [ VAR_45 ] = '\\r' ; VAR_46 -> VAR_47 [ VAR_48 + 1 ] = '\\n' ; VAR_49 -> VAR_50 [ VAR_51 + 2 ] = '\\0' ; } } if ( VAR_52 -> VAR_53 ) { return METHOD_8 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; } VAR_58 = METHOD_9 ( VAR_59 , VAR_60 ) ; if ( VAR_61 < 0 ) METHOD_10 ( & VAR_62 -> VAR_63 ) ; return VAR_64 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 VAR_7 ; if ( VAR_8 -> VAR_9 == 1 ) VAR_10 -> VAR_11 = 0 ; else VAR_12 -> VAR_13 = 1 ; VAR_14 -> VAR_15 = - 1 ; VAR_16 -> VAR_17 = METHOD_1 ( VAR_18 ) ; if ( ! VAR_19 -> VAR_20 ) return METHOD_2 ( VAR_21 ) ; if ( VAR_22 ) METHOD_3 ( & VAR_23 -> VAR_24 , * VAR_25 , 0 ) ; if ( VAR_26 -> VAR_27 ) { TYPE_7 VAR_28 = METHOD_4 ( VAR_29 -> VAR_30 ) ; if ( VAR_31 < 2 || METHOD_5 ( ""\\r\\n"" , VAR_32 -> VAR_33 + VAR_34 - 2 ) ) { METHOD_6 ( VAR_35 , VAR_36 , ""NotrailingCRLFfoundinHTTPheader.\\n"" ) ; VAR_37 = METHOD_7 ( & VAR_38 -> VAR_39 , VAR_40 + 3 ) ; if ( VAR_41 < 0 ) return VAR_42 ; VAR_43 -> VAR_44 [ VAR_45 ] = '\\r' ; VAR_46 -> VAR_47 [ VAR_48 + 1 ] = '\\n' ; VAR_49 -> VAR_50 [ VAR_51 + 2 ] = '\\0' ; } } if ( VAR_52 -> VAR_53 ) { return METHOD_8 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 ) ; } VAR_58 = METHOD_9 ( VAR_59 , VAR_60 ) ; if ( VAR_61 < 0 ) METHOD_10 ( & VAR_62 -> VAR_63 ) ; return VAR_64 ; }",374
375," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) {  TYPE_2 VAR_2 , VAR_3 , VAR_4 ; METHOD_1 ( VAR_5 -> VAR_6 , & VAR_7 , & VAR_8 ) ; VAR_9 = VAR_10 -> VAR_11 - VAR_12 ; while ( VAR_13 -- )  METHOD_2 ( VAR_14 , 1 ) ;  if ( VAR_15 -> VAR_16 < VAR_17 )  METHOD_3 ( VAR_18 , 0 ) ;   METHOD_4 ( VAR_19 , VAR_20 -> VAR_21 != 0 ) ;  if ( VAR_22 -> VAR_23 != 0 )  METHOD_5 ( VAR_24 , VAR_25 -> VAR_26 != 1 ) ;  }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 , VAR_3 , VAR_4 ; METHOD_1 ( VAR_5 -> VAR_6 , & VAR_7 , & VAR_8 ) ; VAR_9 = VAR_10 -> VAR_11 - VAR_12 ; while ( VAR_13 -- ) METHOD_6 ( VAR_24 , VAR_25 -> VAR_26 != 1 ) ; }",375
376,"TYPE_0 METHOD_0 ( ) { unsigned VAR_0 = 0 ; VAR_1 * VAR_2 ; METHOD_1 ( VAR_3 [ VAR_4 ] ) ;  METHOD_2 ( & VAR_5 , & VAR_6 , sizeof ( VAR_7 ) ) ;  for ( VAR_8 = VAR_9 . VAR_10 ; VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ) VAR_15 -> VAR_16 = VAR_17 ++ ; METHOD_3 ( & VAR_18 , & VAR_19 , sizeof ( VAR_20 ) ) ;  VAR_21 = VAR_22 ;  METHOD_4 ( VAR_23 [ VAR_24 ] ) ; }","TYPE_0 METHOD_0 ( ) { unsigned VAR_0 = 0 ; VAR_1 * VAR_2 ; METHOD_1 ( VAR_3 [ VAR_4 ] ) ; METHOD_2 ( & VAR_5 , & VAR_6 , sizeof ( VAR_7 ) ) ; METHOD_5 ( & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; METHOD_5 ( & VAR_6 , 0 , sizeof ( VAR_7 ) ) ; for ( VAR_8 = VAR_9 . VAR_10 ; VAR_11 ; VAR_12 = VAR_13 -> VAR_14 ) VAR_15 -> VAR_16 = VAR_17 ++ ; METHOD_3 ( & VAR_18 , & VAR_19 , sizeof ( VAR_20 ) ) ; VAR_21 = VAR_22 ; METHOD_4 ( VAR_23 [ VAR_24 ] ) ; }",376
377,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 * VAR_6 = VAR_7 ; TYPE_6 VAR_8 [ VAR_9 ] , VAR_10 [ VAR_11 ] , * VAR_12 = VAR_13 ; unsigned TYPE_7 VAR_14 ; TYPE_8 VAR_15 , VAR_16 ; METHOD_1 ( VAR_17 != VAR_18 && VAR_19 != VAR_20 ) ; VAR_21 = VAR_22 -> VAR_23 ; METHOD_2 ( VAR_24 , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; VAR_29 = VAR_30 -> VAR_31 ; METHOD_3 ( VAR_32 , & VAR_33 , VAR_34 , 0xA4 , 0 , 0x04 ) ; switch ( VAR_35 -> VAR_36 ) { case VAR_37 : if ( VAR_38 != 2 ) return VAR_39 ; case VAR_40 : VAR_41 . VAR_42 = 9 ; break ; case VAR_43 : VAR_44 . VAR_45 = 4 ; break ; case VAR_46 : VAR_47 . VAR_48 = 8 ; if ( VAR_49 >= 2 && METHOD_4 ( VAR_50 , ""\\x3F\\x00"" , 2 ) == 0 ) VAR_51 += 2 , VAR_52 -= 2 ; if ( VAR_53 == 0 ) VAR_54 . VAR_55 = 0 ; break ; case VAR_56 : VAR_57 . VAR_58 = 3 ; VAR_59 = 0 ; break ; default : METHOD_5 ( VAR_60 , VAR_61 , VAR_62 ) ; } if ( VAR_63 == 0 ) VAR_64 . VAR_65 = VAR_66 ; VAR_67 . VAR_68 = VAR_69 ; VAR_70 . VAR_71 = VAR_72 ; VAR_73 . VAR_74 = VAR_75 ; if ( VAR_76 != VAR_77 ) { VAR_78 . VAR_79 = VAR_80 ; VAR_81 . VAR_82 = sizeof ( VAR_83 ) ; VAR_84 . VAR_85 = 256 ; } else { VAR_86 . VAR_87 = 0 ; VAR_88 . VAR_89 = 0 ; VAR_90 . VAR_91 = 0x0C ; VAR_92 . VAR_93 = ( VAR_94 == 0 ) ? VAR_95 : VAR_96 ; } VAR_97 = METHOD_6 ( VAR_98 , & VAR_99 ) ; METHOD_7 ( VAR_100 , VAR_101 , VAR_102 , ""APDUtransmitfailed"" ) ; VAR_103 = METHOD_8 ( VAR_104 , VAR_105 . VAR_106 , VAR_107 . VAR_108 ) ; if ( VAR_109 || VAR_110 == VAR_111 ) METHOD_9 ( VAR_112 , VAR_113 , VAR_114 ) ; if ( VAR_115 . VAR_116 < 1 || VAR_117 . VAR_118 [ 0 ] != 0x62 ) { METHOD_10 ( VAR_119 , VAR_120 , ""receivedinvalidtemplate%02X\\n"" , VAR_121 . VAR_122 [ 0 ] ) ; METHOD_11 ( VAR_123 , VAR_124 , VAR_125 ) ; } VAR_126 = METHOD_12 ( ) ; if ( VAR_127 == VAR_128 ) METHOD_13 ( VAR_129 , VAR_130 , VAR_131 ) ; * VAR_132 = VAR_133 ; VAR_134 -> VAR_135 = * VAR_136 ; for ( VAR_137 = 2 ; VAR_138 + 1 < VAR_139 . VAR_140 && VAR_141 + 1 + VAR_142 . VAR_143 [ VAR_144 + 1 ] < VAR_145 . VAR_146 ; VAR_147 += 2 + VAR_148 . VAR_149 [ VAR_150 + 1 ] ) {  TYPE_9 VAR_151 , VAR_152 = VAR_153 . VAR_154 [ VAR_155 + 1 ] ;  unsigned TYPE_10 VAR_156 = VAR_157 . VAR_158 [ VAR_159 ] , * VAR_160 = VAR_161 . VAR_162 + VAR_163 + 2 ; switch ( VAR_164 ) { case 0x80 : case 0x81 : VAR_165 -> VAR_166 = 0 ; for ( VAR_167 = 0 ; VAR_168 < VAR_169 ; ++ VAR_170 ) VAR_171 -> VAR_172 = ( VAR_173 -> VAR_174 << 8 ) | VAR_175 [ VAR_176 ] ; break ; case 0x82 : VAR_177 -> VAR_178 = ( VAR_179 [ 0 ] & 0x40 ) ? 1 : 0 ; VAR_180 -> VAR_181 = VAR_182 [ 0 ] & 7 ; switch ( ( VAR_183 [ 0 ] >> 3 ) & 7 ) { case 0 : VAR_184 -> VAR_185 = VAR_186 ; break ; case 7 : VAR_187 -> VAR_188 = VAR_189 ; break ; default : METHOD_14 ( VAR_190 , VAR_191 , ""invalidfiletype%02Xinfiledescriptor\\n"" , VAR_192 [ 0 ] ) ; METHOD_15 ( VAR_193 , VAR_194 , VAR_195 ) ; } break ; case 0x83 : VAR_196 -> VAR_197 = ( VAR_198 [ 0 ] << 8 ) | VAR_199 [ 1 ] ; break ; case 0x84 :  METHOD_16 ( VAR_200 -> VAR_201 , VAR_202 , VAR_203 ) ;   VAR_204 -> VAR_205 = VAR_206 ;  break ; case 0x86 : METHOD_17 ( VAR_207 , VAR_208 , VAR_209 ) ; break ; default : if ( VAR_210 > 0 ) METHOD_18 ( VAR_211 , VAR_212 , VAR_213 ) ; } } VAR_214 -> VAR_215 = VAR_216 ; METHOD_19 ( VAR_217 , VAR_218 , VAR_219 -> VAR_220 , VAR_221 -> VAR_222 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 ) { VAR_3 * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 * VAR_6 = VAR_7 ; TYPE_6 VAR_8 [ VAR_9 ] , VAR_10 [ VAR_11 ] , * VAR_12 = VAR_13 ; unsigned TYPE_7 VAR_14 ; TYPE_8 VAR_15 , VAR_16 ; METHOD_1 ( VAR_17 != VAR_18 && VAR_19 != VAR_20 ) ; VAR_21 = VAR_22 -> VAR_23 ; METHOD_2 ( VAR_24 , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; VAR_29 = VAR_30 -> VAR_31 ; METHOD_3 ( VAR_32 , & VAR_33 , VAR_34 , 0xA4 , 0 , 0x04 ) ; switch ( VAR_35 -> VAR_36 ) { case VAR_37 : if ( VAR_38 != 2 ) return VAR_39 ; case VAR_40 : VAR_41 . VAR_42 = 9 ; break ; case VAR_43 : VAR_44 . VAR_45 = 4 ; break ; case VAR_46 : VAR_47 . VAR_48 = 8 ; if ( VAR_49 >= 2 && METHOD_4 ( VAR_50 , ""\\x3F\\x00"" , 2 ) == 0 ) VAR_51 += 2 , VAR_52 -= 2 ; if ( VAR_53 == 0 ) VAR_54 . VAR_55 = 0 ; break ; case VAR_56 : VAR_57 . VAR_58 = 3 ; VAR_59 = 0 ; break ; default : METHOD_5 ( VAR_60 , VAR_61 , VAR_62 ) ; } if ( VAR_63 == 0 ) VAR_64 . VAR_65 = VAR_66 ; VAR_67 . VAR_68 = VAR_69 ; VAR_70 . VAR_71 = VAR_72 ; VAR_73 . VAR_74 = VAR_75 ; if ( VAR_76 != VAR_77 ) { VAR_78 . VAR_79 = VAR_80 ; VAR_81 . VAR_82 = sizeof ( VAR_83 ) ; VAR_84 . VAR_85 = 256 ; } else { VAR_86 . VAR_87 = 0 ; VAR_88 . VAR_89 = 0 ; VAR_90 . VAR_91 = 0x0C ; VAR_92 . VAR_93 = ( VAR_94 == 0 ) ? VAR_95 : VAR_96 ; } VAR_97 = METHOD_6 ( VAR_98 , & VAR_99 ) ; METHOD_7 ( VAR_100 , VAR_101 , VAR_102 , ""APDUtransmitfailed"" ) ; VAR_103 = METHOD_8 ( VAR_104 , VAR_105 . VAR_106 , VAR_107 . VAR_108 ) ; if ( VAR_109 || VAR_110 == VAR_111 ) METHOD_9 ( VAR_112 , VAR_113 , VAR_114 ) ; if ( VAR_115 . VAR_116 < 1 || VAR_117 . VAR_118 [ 0 ] != 0x62 ) { METHOD_10 ( VAR_119 , VAR_120 , ""receivedinvalidtemplate%02X\\n"" , VAR_121 . VAR_122 [ 0 ] ) ; METHOD_11 ( VAR_123 , VAR_124 , VAR_125 ) ; } VAR_126 = METHOD_12 ( ) ; if ( VAR_127 == VAR_128 ) METHOD_13 ( VAR_129 , VAR_130 , VAR_131 ) ; * VAR_132 = VAR_133 ; VAR_134 -> VAR_135 = * VAR_136 ; for ( VAR_137 = 2 ; VAR_138 + 1 < VAR_139 . VAR_140 && VAR_141 + 1 + VAR_142 . VAR_143 [ VAR_144 + 1 ] < VAR_145 . VAR_146 ; VAR_147 += 2 + VAR_148 . VAR_149 [ VAR_150 + 1 ] ) { TYPE_9 VAR_151 , VAR_152 = VAR_153 . VAR_154 [ VAR_155 + 1 ] ; unsigned TYPE_10 VAR_156 = VAR_157 . VAR_158 [ VAR_159 ] , * VAR_160 = VAR_161 . VAR_162 + VAR_163 + 2 ; switch ( VAR_164 ) { case 0x80 : case 0x81 : VAR_165 -> VAR_166 = 0 ; for ( VAR_167 = 0 ; VAR_168 < VAR_169 ; ++ VAR_170 ) VAR_171 -> VAR_172 = ( VAR_173 -> VAR_174 << 8 ) | VAR_175 [ VAR_176 ] ; break ; case 0x82 : VAR_177 -> VAR_178 = ( VAR_179 [ 0 ] & 0x40 ) ? 1 : 0 ; VAR_180 -> VAR_181 = VAR_182 [ 0 ] & 7 ; switch ( ( VAR_183 [ 0 ] >> 3 ) & 7 ) { case 0 : VAR_184 -> VAR_185 = VAR_186 ; break ; case 7 : VAR_187 -> VAR_188 = VAR_189 ; break ; default : METHOD_14 ( VAR_190 , VAR_191 , ""invalidfiletype%02Xinfiledescriptor\\n"" , VAR_192 [ 0 ] ) ; METHOD_15 ( VAR_193 , VAR_194 , VAR_195 ) ; } break ; case 0x83 : VAR_196 -> VAR_197 = ( VAR_198 [ 0 ] << 8 ) | VAR_199 [ 1 ] ; break ; case 0x84 : VAR_221 -> VAR_205 ) ; break ; case 0x86 : METHOD_17 ( VAR_207 , VAR_208 , VAR_209 ) ; break ; default : if ( VAR_210 > 0 ) METHOD_18 ( VAR_211 , VAR_212 , VAR_213 ) ; } } VAR_214 -> VAR_215 = VAR_216 ; METHOD_19 ( VAR_217 , VAR_218 , VAR_219 -> VAR_220 , VAR_221 -> VAR_222 ) ; return 0 ; }",377
378,"static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_4 VAR_3 = { . VAR_4 = """" , } ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ; unsigned TYPE_1 VAR_5 ; METHOD_1 ( ) ; VAR_6 = METHOD_2 ( & VAR_7 -> VAR_8 ) ; if ( ! VAR_9 ) goto VAR_10 ; STRUCT_OR_UNION_9 = ( struct STRUCT_OR_UNION_10 * ) VAR_11 ; if ( ! METHOD_3 ( & STRUCT_OR_UNION_11 -> VAR_12 ) ) goto VAR_13 ; METHOD_4 ( ) ; VAR_14 -> VAR_15 -> METHOD_5 ( VAR_16 ) ; VAR_17 : STRUCT_OR_UNION_12 -> VAR_18 = METHOD_6 ( VAR_19 ) ; STRUCT_OR_UNION_13 -> STRUCT_OR_UNION_14 = STRUCT_OR_UNION_15 ; return VAR_20 ; VAR_21 : METHOD_7 ( ) ; STRUCT_OR_UNION_16 = METHOD_8 ( VAR_22 -> VAR_23 ) ; if ( ! STRUCT_OR_UNION_17 ) { VAR_24 -> VAR_25 -> METHOD_9 ( VAR_26 ) ; return METHOD_10 ( - VAR_27 ) ; } STRUCT_OR_UNION_18 -> VAR_28 = VAR_29 -> VAR_30 ; STRUCT_OR_UNION_19 -> VAR_31 = STRUCT_OR_UNION_20 -> VAR_32 = STRUCT_OR_UNION_21 -> VAR_33 = METHOD_11 ( STRUCT_OR_UNION_22 ) ; STRUCT_OR_UNION_23 -> VAR_34 |= VAR_35 ; STRUCT_OR_UNION_24 -> VAR_36 = VAR_37 | VAR_38 ; STRUCT_OR_UNION_25 -> VAR_39 = & VAR_40 ; STRUCT_OR_UNION_26 -> VAR_41 = VAR_42 ; STRUCT_OR_UNION_27 = METHOD_12 ( VAR_43 -> VAR_44 , & VAR_45 ) ; if ( ! STRUCT_OR_UNION_28 ) { METHOD_13 ( STRUCT_OR_UNION_29 ) ; return METHOD_14 ( - VAR_46 ) ; } METHOD_15 ( STRUCT_OR_UNION_30 , STRUCT_OR_UNION_31 ) ;  STRUCT_OR_UNION_32 -> VAR_47 = ( TYPE_2 * ) VAR_48 -> VAR_49 ;  VAR_50 = METHOD_16 ( & VAR_51 -> VAR_52 , 0 , ( unsigned TYPE_3 ) STRUCT_OR_UNION_33 ) ; if ( VAR_53 ) { METHOD_17 ( STRUCT_OR_UNION_34 ) ; METHOD_18 ( STRUCT_OR_UNION_35 ) ; METHOD_19 ( ) ; return METHOD_20 ( - VAR_54 ) ; } goto VAR_55 ; }","static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_4 VAR_3 = { . VAR_4 = """" , } ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_8 ; unsigned TYPE_1 VAR_5 ; METHOD_1 ( ) ; VAR_6 = METHOD_2 ( & VAR_7 -> VAR_8 ) ; if ( ! VAR_9 ) goto VAR_10 ; STRUCT_OR_UNION_9 = ( struct STRUCT_OR_UNION_10 * ) VAR_11 ; if ( ! METHOD_3 ( & STRUCT_OR_UNION_11 -> VAR_12 ) ) goto VAR_13 ; METHOD_4 ( ) ; VAR_14 -> VAR_15 -> METHOD_5 ( VAR_16 ) ; VAR_17 : STRUCT_OR_UNION_12 -> VAR_18 = METHOD_6 ( VAR_19 ) ; STRUCT_OR_UNION_13 -> STRUCT_OR_UNION_14 = STRUCT_OR_UNION_15 ; return VAR_20 ; VAR_21 : METHOD_7 ( ) ; STRUCT_OR_UNION_16 = METHOD_8 ( VAR_22 -> VAR_23 ) ; if ( ! STRUCT_OR_UNION_17 ) { VAR_24 -> VAR_25 -> METHOD_9 ( VAR_26 ) ; return METHOD_10 ( - VAR_27 ) ; } STRUCT_OR_UNION_18 -> VAR_28 = VAR_29 -> VAR_30 ; STRUCT_OR_UNION_19 -> VAR_31 = STRUCT_OR_UNION_20 -> VAR_32 = STRUCT_OR_UNION_21 -> VAR_33 = METHOD_11 ( STRUCT_OR_UNION_22 ) ; STRUCT_OR_UNION_23 -> VAR_34 |= VAR_35 ; STRUCT_OR_UNION_24 -> VAR_36 = VAR_37 | VAR_38 ; STRUCT_OR_UNION_25 -> VAR_39 = & VAR_40 ; STRUCT_OR_UNION_26 -> VAR_41 = VAR_42 ; STRUCT_OR_UNION_27 = METHOD_12 ( VAR_43 -> VAR_44 , & VAR_45 ) ; if ( ! STRUCT_OR_UNION_28 ) { METHOD_13 ( STRUCT_OR_UNION_29 ) ; return METHOD_14 ( - VAR_46 ) ; } METHOD_15 ( STRUCT_OR_UNION_30 , STRUCT_OR_UNION_31 ) ; STRUCT_OR_UNION_32 -> VAR_47 = ( TYPE_2 * ) VAR_48 -> VAR_49 ; VAR_50 = METHOD_16 ( & VAR_51 -> VAR_52 , 0 , ( unsigned TYPE_3 ) STRUCT_OR_UNION_33 ) ; if ( VAR_53 ) { METHOD_17 ( STRUCT_OR_UNION_34 ) ; METHOD_18 ( STRUCT_OR_UNION_35 ) ; METHOD_19 ( ) ; return METHOD_20 ( - VAR_54 ) ; } goto VAR_55 ; }",378
379,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 = VAR_3 ;  TYPE_4 VAR_4 = 0 , VAR_5 , VAR_6 , VAR_7 ; TYPE_5 VAR_8 ; if ( VAR_9 == VAR_10 ) return VAR_11 ; VAR_12 = METHOD_1 ( VAR_13 ) ; while ( ( VAR_14 > 0 ) && METHOD_2 ( VAR_15 [ VAR_16 - 1 ] ) ) VAR_17 -- ; VAR_18 = VAR_19 + 1 ; if ( VAR_20 )  VAR_21 = ( TYPE_6 ) METHOD_3 ( VAR_22 , VAR_23 * sizeof ( VAR_24 ) ) ;  if ( VAR_25 == VAR_26 ) { METHOD_4 ( VAR_27 , ""Couldnotallocatestringbuffer.\\n"" ) ; METHOD_5 ( - 2 ) ; } METHOD_6 ( VAR_28 , 0 , VAR_29 * sizeof ( VAR_30 ) ) ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { switch ( VAR_35 [ VAR_36 ] ) { case '<' : VAR_37 = VAR_38 ? 13 : 4 ; VAR_39 += VAR_40 - 1 ;  VAR_41 = ( TYPE_7 ) METHOD_7 ( VAR_42 , VAR_43 * sizeof ( VAR_44 ) ) ;  if ( VAR_45 == VAR_46 ) { METHOD_8 ( VAR_47 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_9 ( - 3 ) ; } if ( VAR_48 ) METHOD_10 ( & VAR_49 [ VAR_50 ] , ""<replaceable>"" , VAR_51 ) ; else METHOD_11 ( & VAR_52 [ VAR_53 ] , ""&lt;"" , VAR_54 ) ; VAR_55 += VAR_56 ; break ; case '>' : VAR_57 = VAR_58 ? 14 : 4 ; VAR_59 += VAR_60 - 1 ;  VAR_61 = ( TYPE_8 ) METHOD_12 ( VAR_62 , VAR_63 * sizeof ( VAR_64 ) ) ;  if ( VAR_65 == VAR_66 ) { METHOD_13 ( VAR_67 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_14 ( - 4 ) ; } if ( VAR_68 ) METHOD_15 ( & VAR_69 [ VAR_70 ] , ""</replaceable>"" , VAR_71 ) ; else METHOD_16 ( & VAR_72 [ VAR_73 ] , ""&lt;"" , VAR_74 ) ; VAR_75 += VAR_76 ; break ; case '\\'' : VAR_77 += 5 ;  VAR_78 = ( TYPE_9 ) METHOD_17 ( VAR_79 , VAR_80 * sizeof ( VAR_81 ) ) ;  if ( VAR_82 == VAR_83 ) { METHOD_18 ( VAR_84 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_19 ( - 5 ) ; } VAR_85 [ VAR_86 ++ ] = '&' ; VAR_87 [ VAR_88 ++ ] = 'a' ; VAR_89 [ VAR_90 ++ ] = 'p' ; VAR_91 [ VAR_92 ++ ] = 'o' ; VAR_93 [ VAR_94 ++ ] = 's' ; VAR_95 [ VAR_96 ++ ] = ';' ; break ; case \'""\' : VAR_97 += 5 ;  VAR_98 = ( TYPE_10 ) METHOD_20 ( VAR_99 , VAR_100 * sizeof ( VAR_101 ) ) ;  if ( VAR_102 == VAR_103 ) { METHOD_21 ( VAR_104 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_22 ( - 6 ) ; } VAR_105 [ VAR_106 ++ ] = '&' ; VAR_107 [ VAR_108 ++ ] = 'q' ; VAR_109 [ VAR_110 ++ ] = 'u' ; VAR_111 [ VAR_112 ++ ] = 'o' ; VAR_113 [ VAR_114 ++ ] = 't' ; VAR_115 [ VAR_116 ++ ] = ';' ; break ; case '&' : VAR_117 += 4 ;  VAR_118 = ( TYPE_11 ) METHOD_23 ( VAR_119 , VAR_120 * sizeof ( VAR_121 ) ) ;   if ( VAR_122 == VAR_123 )  { METHOD_24 ( VAR_124 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_25 ( - 7 ) ; } VAR_125 [ VAR_126 ++ ] = '&' ; VAR_127 [ VAR_128 ++ ] = 'a' ; VAR_129 [ VAR_130 ++ ] = 'm' ; VAR_131 [ VAR_132 ++ ] = 'p' ; VAR_133 [ VAR_134 ++ ] = ';' ; break ; default : VAR_135 [ VAR_136 ++ ] = VAR_137 [ VAR_138 ] ; break ; } VAR_139 [ VAR_140 - 1 ] = '\\0' ; } return VAR_141 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_3 ; TYPE_4 VAR_4 = 0 , VAR_5 , VAR_6 , VAR_7 ; TYPE_5 VAR_8 ; if ( VAR_9 == VAR_10 ) return VAR_11 ; VAR_12 = METHOD_1 ( VAR_13 ) ; while ( ( VAR_14 > 0 ) && METHOD_2 ( VAR_15 [ VAR_16 - 1 ] ) ) VAR_17 -- ; VAR_18 = VAR_19 + 1 ; if ( VAR_20 ) VAR_21 = ( TYPE_6 ) METHOD_3 ( VAR_22 , VAR_23 * sizeof ( VAR_24 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 ; } if ( VAR_25 == VAR_26 ) { METHOD_4 ( VAR_27 , ""Couldnotallocatestringbuffer.\\n"" ) ; METHOD_5 ( - 2 ) ; } METHOD_6 ( VAR_28 , 0 , VAR_29 * sizeof ( VAR_30 ) ) ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { switch ( VAR_35 [ VAR_36 ] ) { case '<' : VAR_37 = VAR_38 ? 13 : 4 ; VAR_39 += VAR_40 - 1 ; VAR_142 = ( TYPE_11 ) METHOD_23 ( VAR_119 , VAR_120 * sizeof ( VAR_121 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 ; if ( VAR_122 == VAR_123 ) { METHOD_24 ( VAR_124 , ""Couldnotreallocatestringbuffer.\\n"" ) ; METHOD_25 ( - 7 ) ; } VAR_125 [ VAR_126 ++ ] = '&' ; VAR_127 [ VAR_128 ++ ] = 'a' ; VAR_129 [ VAR_130 ++ ] = 'm' ; VAR_131 [ VAR_132 ++ ] = 'p' ; VAR_133 [ VAR_134 ++ ] = ';' ; break ; default : VAR_135 [ VAR_136 ++ ] = VAR_137 [ VAR_138 ] ; break ; } VAR_139 [ VAR_140 - 1 ] = '\\0' ; } return VAR_141 ; }",379
380,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 VAR_8 , VAR_9 = 0 ; VAR_10 * VAR_11 ;  TYPE_8 VAR_12 = VAR_13 -> VAR_14 . VAR_15 ;  if ( ! ( VAR_16 = METHOD_1 ( METHOD_2 ( ) ) ) ) { METHOD_3 ( ""CouldnotcreatenewSSLcontext.\\n"" ) ; return VAR_17 ; } VAR_18 = METHOD_4 ( ) ; if ( ! VAR_19 )  {  if ( VAR_20 -> VAR_21 . VAR_22 ) { if ( ! METHOD_5 ( VAR_23 , VAR_24 -> VAR_25 . VAR_26 , VAR_27 ) ) { METHOD_6 ( ""FailedtoloadCAcertificatefrom%s.\\n"" , VAR_28 -> VAR_29 . VAR_30 ) ; goto VAR_31 ; } } else { METHOD_7 ( ""Usingdefaultpathsforcertificateverification.\\n"" ) ; METHOD_8 ( VAR_32 ) ; } if ( VAR_33 -> VAR_34 . VAR_35 ) { if ( ! METHOD_9 ( VAR_36 -> VAR_37 . VAR_38 , VAR_39 ) ) { METHOD_10 ( ""CRLscouldnotbeloaded.\\n"" ) ; goto VAR_40 ; } if ( VAR_41 == VAR_42 ) VAR_43 = VAR_44 ; } if ( VAR_45 -> VAR_46 . VAR_47 && VAR_48 -> VAR_49 . VAR_50 ) { if ( METHOD_11 ( VAR_51 , VAR_52 -> VAR_53 . VAR_54 ) != 1 ) { METHOD_12 ( ""Clientcertificatecouldnotbeloaded.\\n"" ) ; goto VAR_55 ; } if ( METHOD_13 ( VAR_56 , VAR_57 -> VAR_58 . VAR_59 , VAR_60 ) != 1 ) { METHOD_14 ( ""Clientprivatekeycouldnotbeloaded.\\n"" ) ; goto VAR_61 ; } if ( METHOD_15 ( VAR_62 ) == 0 ) { METHOD_16 ( ""Clientcertificateandprivatekeydonotmatch.\\n"" ) ; goto VAR_63 ; } } METHOD_17 ( VAR_64 , VAR_65 , VAR_66 ) ; if ( VAR_67 == VAR_68 ) METHOD_18 ( VAR_69 , VAR_70 ) ; else if ( VAR_71 == VAR_72 ) METHOD_19 ( VAR_73 , VAR_74 | VAR_75 ) ; if ( ! METHOD_20 ( VAR_76 , VAR_77 -> VAR_78 , METHOD_21 ( VAR_79 -> VAR_80 ) ) ) { METHOD_22 ( ""Couldnotsetservernameforverification.\\n"" ) ; goto VAR_81 ; } METHOD_23 ( VAR_82 , VAR_83 ) ; } if ( ! ( VAR_84 = METHOD_24 ( VAR_85 ) ) ) { METHOD_25 ( ""CouldnotcreateanewSSLsession.\\n"" ) ; goto VAR_86 ; } METHOD_26 ( VAR_87 , ""ALL"" ) ; METHOD_27 ( VAR_88 , VAR_89 ) ; METHOD_28 ( VAR_90 , VAR_91 ) ; do { VAR_92 = METHOD_29 ( VAR_93 ) ; if ( VAR_94 != 1 ) { if ( METHOD_30 ( VAR_95 , VAR_96 , 1 ) != 1 ) { VAR_97 = 1 ; METHOD_31 ( VAR_98 ) ; goto VAR_99 ; } } } while ( VAR_100 != 1 && VAR_101 != 1 ) ; METHOD_32 ( VAR_102 ) ; return VAR_103 ; VAR_104 : METHOD_33 ( VAR_105 ) ; VAR_106 : METHOD_34 ( VAR_107 ) ; METHOD_35 ( VAR_108 ) ; return VAR_109 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 VAR_8 , VAR_9 = 0 ; VAR_10 * VAR_11 ; TYPE_8 VAR_12 = VAR_13 -> VAR_14 . VAR_15 ; if ( ! ( VAR_16 = METHOD_1 ( METHOD_2 ( ) ) ) ) { METHOD_3 ( ""CouldnotcreatenewSSLcontext.\\n"" ) ; return VAR_17 ; } VAR_18 = METHOD_4 ( ) ; if ( ! VAR_19 ) { VAR_71 = VAR_57 -> VAR_58 . VAR_15 ; if ( VAR_20 -> VAR_21 . VAR_22 ) { if ( ! METHOD_5 ( VAR_23 , VAR_24 -> VAR_25 . VAR_26 , VAR_27 ) ) { METHOD_6 ( ""FailedtoloadCAcertificatefrom%s.\\n"" , VAR_28 -> VAR_29 . VAR_30 ) ; goto VAR_31 ; } } else { METHOD_7 ( ""Usingdefaultpathsforcertificateverification.\\n"" ) ; METHOD_8 ( VAR_32 ) ; } if ( VAR_33 -> VAR_34 . VAR_35 ) { if ( ! METHOD_9 ( VAR_36 -> VAR_37 . VAR_38 , VAR_39 ) ) { METHOD_10 ( ""CRLscouldnotbeloaded.\\n"" ) ; goto VAR_40 ; } if ( VAR_41 == VAR_42 ) VAR_43 = VAR_44 ; } if ( VAR_45 -> VAR_46 . VAR_47 && VAR_48 -> VAR_49 . VAR_50 ) { if ( METHOD_11 ( VAR_51 , VAR_52 -> VAR_53 . VAR_54 ) != 1 ) { METHOD_12 ( ""Clientcertificatecouldnotbeloaded.\\n"" ) ; goto VAR_55 ; } if ( METHOD_13 ( VAR_56 , VAR_57 -> VAR_58 . VAR_59 , VAR_60 ) != 1 ) { METHOD_14 ( ""Clientprivatekeycouldnotbeloaded.\\n"" ) ; goto VAR_61 ; } if ( METHOD_15 ( VAR_62 ) == 0 ) { METHOD_16 ( ""Clientcertificateandprivatekeydonotmatch.\\n"" ) ; goto VAR_63 ; } } METHOD_17 ( VAR_64 , VAR_65 , VAR_66 ) ; if ( VAR_67 == VAR_68 ) METHOD_18 ( VAR_69 , VAR_70 ) ; else if ( VAR_71 == VAR_72 ) METHOD_19 ( VAR_73 , VAR_74 | VAR_75 ) ; if ( ! METHOD_20 ( VAR_76 , VAR_77 -> VAR_78 , METHOD_21 ( VAR_79 -> VAR_80 ) ) ) { METHOD_22 ( ""Couldnotsetservernameforverification.\\n"" ) ; goto VAR_81 ; } METHOD_23 ( VAR_82 , VAR_83 ) ; } if ( ! ( VAR_84 = METHOD_24 ( VAR_85 ) ) ) { METHOD_25 ( ""CouldnotcreateanewSSLsession.\\n"" ) ; goto VAR_86 ; } METHOD_26 ( VAR_87 , ""ALL"" ) ; METHOD_27 ( VAR_88 , VAR_89 ) ; METHOD_28 ( VAR_90 , VAR_91 ) ; do { VAR_92 = METHOD_29 ( VAR_93 ) ; if ( VAR_94 != 1 ) { if ( METHOD_30 ( VAR_95 , VAR_96 , 1 ) != 1 ) { VAR_97 = 1 ; METHOD_31 ( VAR_98 ) ; goto VAR_99 ; } } } while ( VAR_100 != 1 && VAR_101 != 1 ) ; METHOD_32 ( VAR_102 ) ; return VAR_103 ; VAR_104 : METHOD_33 ( VAR_105 ) ; VAR_106 : METHOD_34 ( VAR_107 ) ; METHOD_35 ( VAR_108 ) ; return VAR_109 ; }",380
381,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) { TYPE_3 VAR_2 ; struct STRUCT_OR_UNION_0 * VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , VAR_6 ) ; if ( ! VAR_7 ) { METHOD_2 ( VAR_8 , ""%d:failedtogetunnamedlock\\n"" , VAR_9 ) ; METHOD_3 ( 1 ) ; } VAR_10 = METHOD_4 ( VAR_11 , 0 ) ; if ( VAR_12 ) { METHOD_5 ( VAR_13 , ""%d:failedtotakeunnamedlock(%d)\\n"" , VAR_14 , VAR_15 ) ; METHOD_6 ( 1 ) ; } VAR_16 = METHOD_7 ( VAR_17 ) ; if ( VAR_18 ) { METHOD_8 ( VAR_19 , ""%d:failedtoputunnamedlock(%d)\\n"" , VAR_20 , VAR_21 ) ; METHOD_9 ( 1 ) ; } METHOD_10 ( VAR_22 ) ; VAR_23 = METHOD_11 ( ""/var/lib/lxc"" , VAR_24 ) ; if ( ! VAR_25 ) { METHOD_12 ( VAR_26 , ""%d:failedtogetlock\\n"" , VAR_27 ) ; METHOD_13 ( 1 ) ; } struct STRUCT_OR_UNION_1 VAR_28 ;  TYPE_4 * VAR_29 = VAR_30 ""/lock/lxc/var/lib/lxc/"" ;  VAR_31 = STRUCT_OR_UNION_2 ( VAR_32 , & VAR_33 ) ; if ( VAR_34 != 0 ) { METHOD_14 ( VAR_35 , ""%d:filename%snotcreated\\n"" , VAR_36 , VAR_37 ) ; METHOD_15 ( 1 ) ; } METHOD_16 ( VAR_38 ) ; METHOD_17 ( ) ; METHOD_18 ( VAR_39 , ""alltestspassed\\n"" ) ; METHOD_19 ( VAR_40 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) { TYPE_3 VAR_2 ; struct STRUCT_OR_UNION_0 * VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 , VAR_6 ) ; if ( ! VAR_7 ) { METHOD_2 ( VAR_8 , ""%d:failedtogetunnamedlock\\n"" , VAR_9 ) ; METHOD_3 ( 1 ) ; } VAR_10 = METHOD_4 ( VAR_11 , 0 ) ; if ( VAR_12 ) { METHOD_5 ( VAR_13 , ""%d:failedtotakeunnamedlock(%d)\\n"" , VAR_14 , VAR_15 ) ; METHOD_6 ( 1 ) ; } VAR_16 = METHOD_7 ( VAR_17 ) ; if ( VAR_18 ) { METHOD_8 ( VAR_19 , ""%d:failedtoputunnamedlock(%d)\\n"" , VAR_20 , VAR_21 ) ; METHOD_9 ( 1 ) ; } METHOD_10 ( VAR_22 ) ; VAR_23 = METHOD_11 ( ""/var/lib/lxc"" , VAR_24 ) ; if ( ! VAR_25 ) { METHOD_12 ( VAR_26 , ""%d:failedtogetlock\\n"" , VAR_27 ) ; METHOD_13 ( 1 ) ; } struct STRUCT_OR_UNION_1 VAR_28 ; TYPE_4 * VAR_29 = VAR_30 ""/lock/lxc/var/lib/lxc/"" ; VAR_31 = STRUCT_OR_UNION_2 ( VAR_32 , & VAR_33 ) ; if ( VAR_34 != 0 ) { METHOD_14 ( VAR_35 , ""%d:filename%snotcreated\\n"" , VAR_36 , VAR_37 ) ; METHOD_15 ( 1 ) ; } METHOD_16 ( VAR_38 ) ; METHOD_17 ( ) ; METHOD_18 ( VAR_39 , ""alltestspassed\\n"" ) ; METHOD_19 ( VAR_40 ) ; }",381
382,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_1 VAR_3 [ ] , TYPE_3 VAR_4 ) { const struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_4 VAR_8 = 0 ; TYPE_5 VAR_9 = 0 ; METHOD_1 ( ) ; VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 ) ; while ( ( TYPE_6 ) VAR_13 > VAR_14 ) { TYPE_7 VAR_15 ; if ( METHOD_3 ( VAR_16 >= VAR_17 ) ) { VAR_18 = - VAR_19 ; break ; } VAR_20 = METHOD_4 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( METHOD_5 ( ! VAR_24 ) ) { VAR_25 = - VAR_26 ; break ; } VAR_27 = VAR_28 + VAR_29 ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 + VAR_34 -> VAR_35 ;  VAR_36 -> VAR_37 = METHOD_6 ( ( TYPE_8 ) VAR_38 , VAR_39 ) ;  VAR_40 -> VAR_41 = ( TYPE_9 TYPE_10 * ) ( unsigned TYPE_11 ) ( VAR_42 -> VAR_43 + VAR_44 - VAR_45 -> VAR_46 ) ; VAR_47 += VAR_48 ; VAR_49 += VAR_50 ; ++ VAR_51 ; } METHOD_7 ( ) ; return VAR_52 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_1 VAR_3 [ ] , TYPE_3 VAR_4 ) { const struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_4 VAR_8 = 0 ; TYPE_5 VAR_9 = 0 ; METHOD_1 ( ) ; VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 ) ; while ( ( TYPE_6 ) VAR_13 > VAR_14 ) { TYPE_7 VAR_15 ; if ( METHOD_3 ( VAR_16 >= VAR_17 ) ) { VAR_18 = - VAR_19 ; break ; } VAR_20 = METHOD_4 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( METHOD_5 ( ! VAR_24 ) ) { VAR_25 = - VAR_26 ; break ; } VAR_27 = VAR_28 + VAR_29 ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 + VAR_34 -> VAR_35 ; VAR_36 -> VAR_37 = METHOD_6 ( ( TYPE_8 ) VAR_38 - VAR_47 , VAR_39 ) ; VAR_40 -> VAR_41 = ( TYPE_9 TYPE_10 * ) ( unsigned TYPE_11 ) ( VAR_42 -> VAR_43 + VAR_44 - VAR_45 -> VAR_46 ) ; VAR_47 += VAR_48 ; VAR_49 += VAR_50 ; ++ VAR_51 ; } METHOD_7 ( ) ; return VAR_52 ; }",382
383,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 ; TYPE_2 VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; if ( VAR_16 ) VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ; else VAR_23 = METHOD_3 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 ) ;  if ( VAR_29 < 0 )   return VAR_30 ;  VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; METHOD_4 ( VAR_37 , VAR_38 , VAR_39 -> VAR_40 ) ; METHOD_5 ( & VAR_41 -> VAR_42 -> VAR_43 ) ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 -> VAR_47 ; VAR_48 ++ ) { VAR_49 = METHOD_6 ( VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 . VAR_58 = VAR_59 -> VAR_60 + VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -= VAR_66 ; VAR_67 -> VAR_68 = VAR_69 ; if ( VAR_70 ) METHOD_7 ( VAR_71 -> VAR_72 , VAR_73 -> VAR_74 + VAR_75 , VAR_76 ) ; VAR_77 = METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 . VAR_82 . VAR_83 , VAR_84 , VAR_85 -> VAR_86 . VAR_87 . VAR_88 , VAR_89 , VAR_90 -> VAR_91 . VAR_92 . VAR_93 ) ; if ( VAR_94 < 0 ) break ; if ( ! VAR_95 ) METHOD_9 ( VAR_96 -> VAR_97 + VAR_98 , VAR_99 -> VAR_100 , VAR_101 ) ; VAR_102 += VAR_103 ; } METHOD_10 ( & VAR_104 -> VAR_105 -> VAR_106 ) ; METHOD_11 ( VAR_107 ) ; return VAR_108 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 ; TYPE_2 VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 ; TYPE_5 VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; if ( VAR_16 ) VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ; else VAR_23 = METHOD_3 ( VAR_24 -> VAR_25 , VAR_26 , VAR_27 , VAR_28 ) ; if ( VAR_29 < 0 ) { METHOD_11 ( VAR_107 ) ; return VAR_30 ; VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = VAR_35 -> VAR_36 ; METHOD_4 ( VAR_37 , VAR_38 , VAR_39 -> VAR_40 ) ; METHOD_5 ( & VAR_41 -> VAR_42 -> VAR_43 ) ; for ( VAR_44 = 0 ; VAR_45 < VAR_46 -> VAR_47 ; VAR_48 ++ ) { VAR_49 = METHOD_6 ( VAR_50 , VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 . VAR_58 = VAR_59 -> VAR_60 + VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; VAR_65 -= VAR_66 ; VAR_67 -> VAR_68 = VAR_69 ; if ( VAR_70 ) METHOD_7 ( VAR_71 -> VAR_72 , VAR_73 -> VAR_74 + VAR_75 , VAR_76 ) ; VAR_77 = METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 -> VAR_81 . VAR_82 . VAR_83 , VAR_84 , VAR_85 -> VAR_86 . VAR_87 . VAR_88 , VAR_89 , VAR_90 -> VAR_91 . VAR_92 . VAR_93 ) ; if ( VAR_94 < 0 ) break ; if ( ! VAR_95 ) METHOD_9 ( VAR_96 -> VAR_97 + VAR_98 , VAR_99 -> VAR_100 , VAR_101 ) ; VAR_102 += VAR_103 ; } METHOD_10 ( & VAR_104 -> VAR_105 -> VAR_106 ) ; METHOD_11 ( VAR_107 ) ; return VAR_108 ; } }",383
384,"static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ;  if ( METHOD_2 ( VAR_7 < VAR_8 ) )  return 0 ; return 1 ; }","static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ; if ( METHOD_2 ( VAR_4 -> VAR_9 ) ) return 0 ; if ( METHOD_2 ( VAR_7 < VAR_8 ) ) return 0 ; return 1 ; }",384
385,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 METHOD_1 , struct STRUCT_OR_UNION_3 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = & STRUCT_OR_UNION_5 -> STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 VAR_5 ; struct STRUCT_OR_UNION_8 VAR_6 ; enum VAR_7 VAR_8 = VAR_9 -> VAR_10 . VAR_11 . VAR_12 == 0 ? VAR_13 : VAR_14 ; TYPE_4 VAR_15 = VAR_16 -> VAR_17 ; if ( ! VAR_18 -> VAR_19 ) return ; if ( ! VAR_20 ) METHOD_2 ( ""badtreeobject"" ) ; if ( VAR_21 -> VAR_22 & ( VAR_23 | VAR_24 ) ) return ; if ( METHOD_3 ( STRUCT_OR_UNION_9 , VAR_25 -> VAR_26 ) < 0 ) { if ( VAR_27 -> VAR_28 ) return ; METHOD_4 ( ""badtreeobject%s"" , METHOD_5 ( & VAR_29 -> VAR_30 ) ) ; } VAR_31 -> VAR_32 |= VAR_33 ;  METHOD_6 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ;  METHOD_7 ( VAR_38 , VAR_39 ) ; if ( VAR_40 -> VAR_41 ) METHOD_8 ( VAR_42 , '/' ) ; METHOD_9 ( & VAR_43 , STRUCT_OR_UNION_10 -> VAR_44 , STRUCT_OR_UNION_11 -> VAR_45 ) ; while ( METHOD_10 ( & VAR_46 , & VAR_47 ) ) { if ( VAR_48 != VAR_49 ) { VAR_50 = METHOD_11 ( & VAR_51 , VAR_52 , 0 , & VAR_53 -> VAR_54 . VAR_55 ) ; if ( VAR_56 == VAR_57 ) break ; if ( VAR_58 == VAR_59 ) continue ; } if ( METHOD_12 ( VAR_60 . VAR_61 ) ) METHOD_13 ( VAR_62 , METHOD_14 ( VAR_63 . VAR_64 ) , METHOD_15 , VAR_65 , VAR_66 . VAR_67 , VAR_68 ) ; else if ( METHOD_16 ( VAR_69 . VAR_70 ) ) METHOD_17 ( VAR_71 , VAR_72 . VAR_73 , METHOD_18 , VAR_74 , VAR_75 . VAR_76 , VAR_77 ) ; else METHOD_19 ( VAR_78 , METHOD_20 ( VAR_79 . VAR_80 ) , METHOD_21 , VAR_81 , VAR_82 . VAR_83 , VAR_84 ) ; } METHOD_22 ( VAR_85 , VAR_86 ) ; METHOD_23 ( STRUCT_OR_UNION_12 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , TYPE_1 METHOD_1 , struct STRUCT_OR_UNION_3 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 * VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = & STRUCT_OR_UNION_5 -> STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 VAR_5 ; struct STRUCT_OR_UNION_8 VAR_6 ; enum VAR_7 VAR_8 = VAR_9 -> VAR_10 . VAR_11 . VAR_12 == 0 ? VAR_13 : VAR_14 ; TYPE_4 VAR_15 = VAR_16 -> VAR_17 ; if ( ! VAR_18 -> VAR_19 ) return ; if ( ! VAR_20 ) METHOD_2 ( ""badtreeobject"" ) ; if ( VAR_21 -> VAR_22 & ( VAR_23 | VAR_24 ) ) return ; if ( METHOD_3 ( STRUCT_OR_UNION_9 , VAR_25 -> VAR_26 ) < 0 ) { if ( VAR_27 -> VAR_28 ) return ; METHOD_4 ( ""badtreeobject%s"" , METHOD_5 ( & VAR_29 -> VAR_30 ) ) ; } VAR_31 -> VAR_32 |= VAR_33 ; METHOD_7 ( VAR_85 , VAR_39 ) ; METHOD_6 ( VAR_34 , VAR_35 , VAR_36 , VAR_37 ) ; METHOD_7 ( VAR_38 , VAR_39 ) ; if ( VAR_40 -> VAR_41 ) METHOD_8 ( VAR_42 , '/' ) ; METHOD_9 ( & VAR_43 , STRUCT_OR_UNION_10 -> VAR_44 , STRUCT_OR_UNION_11 -> VAR_45 ) ; while ( METHOD_10 ( & VAR_46 , & VAR_47 ) ) { if ( VAR_48 != VAR_49 ) { VAR_50 = METHOD_11 ( & VAR_51 , VAR_52 , 0 , & VAR_53 -> VAR_54 . VAR_55 ) ; if ( VAR_56 == VAR_57 ) break ; if ( VAR_58 == VAR_59 ) continue ; } if ( METHOD_12 ( VAR_60 . VAR_61 ) ) METHOD_13 ( VAR_62 , METHOD_14 ( VAR_63 . VAR_64 ) , METHOD_15 , VAR_65 , VAR_66 . VAR_67 , VAR_68 ) ; else if ( METHOD_16 ( VAR_69 . VAR_70 ) ) METHOD_17 ( VAR_71 , VAR_72 . VAR_73 , METHOD_18 , VAR_74 , VAR_75 . VAR_76 , VAR_77 ) ; else METHOD_19 ( VAR_78 , METHOD_20 ( VAR_79 . VAR_80 ) , METHOD_21 , VAR_81 , VAR_82 . VAR_83 , VAR_84 ) ; } METHOD_22 ( VAR_85 , VAR_86 ) ; METHOD_23 ( STRUCT_OR_UNION_12 ) ; }",385
386,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 ; TYPE_8 VAR_9 ; unsigned TYPE_9 VAR_10 [ 32 ] ; if ( ( VAR_11 == VAR_12 ) || ( VAR_13 == VAR_14 ) ) { METHOD_1 ( ""reverseSamplesBytes"" , ""Invalidinputoroutputbuffer"" ) ; return ( 1 ) ; } VAR_15 = ( ( VAR_16 * VAR_17 ) + 7 ) / 8 ;  switch ( VAR_18 / 8 )  { case 8 : case 4 : case 3 : case 2 : for ( VAR_19 = 0 ; VAR_20 < ( VAR_21 / 2 ) ; VAR_22 ++ ) { VAR_23 = VAR_24 * VAR_25 ; METHOD_2 ( VAR_26 , VAR_27 + VAR_28 , VAR_29 ) ; METHOD_3 ( VAR_30 + VAR_31 , VAR_32 - VAR_33 - VAR_34 , VAR_35 ) ; METHOD_4 ( VAR_36 - VAR_37 - VAR_38 , VAR_39 , VAR_40 ) ; } break ; case 1 : for ( VAR_41 = 0 ; VAR_42 < ( VAR_43 / 2 ) ; VAR_44 ++ ) { for ( VAR_45 = 0 ; VAR_46 < VAR_47 ; VAR_48 ++ ) { VAR_49 = * VAR_50 ; * VAR_51 ++ = * ( VAR_52 - VAR_53 + VAR_54 ) ; * ( VAR_55 - VAR_56 + VAR_57 ) = VAR_58 ; } VAR_59 -= VAR_60 ; } break ; default : METHOD_5 ( ""reverseSamplesBytes"" , ""Unsupportedbitdepth%d"" , VAR_61 ) ; return ( 1 ) ; } return ( 0 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 , VAR_7 , VAR_8 ; TYPE_8 VAR_9 ; unsigned TYPE_9 VAR_10 [ 32 ] ; if ( ( VAR_11 == VAR_12 ) || ( VAR_13 == VAR_14 ) ) { METHOD_1 ( ""reverseSamplesBytes"" , ""Invalidinputoroutputbuffer"" ) ; return ( 1 ) ; } VAR_15 = ( ( VAR_16 * VAR_17 ) + 7 ) / 8 ; if ( VAR_40 > sizeof ( VAR_39 ) ) { METHOD_5 ( ""reverseSamplesBytes"" , ""bytes_per_pixeltoolarge"" ) ; return ( 1 ) ; } switch ( VAR_18 / 8 ) { case 8 : case 4 : case 3 : case 2 : for ( VAR_19 = 0 ; VAR_20 < ( VAR_21 / 2 ) ; VAR_22 ++ ) { VAR_23 = VAR_24 * VAR_25 ; METHOD_2 ( VAR_26 , VAR_27 + VAR_28 , VAR_29 ) ; METHOD_3 ( VAR_30 + VAR_31 , VAR_32 - VAR_33 - VAR_34 , VAR_35 ) ; METHOD_4 ( VAR_36 - VAR_37 - VAR_38 , VAR_39 , VAR_40 ) ; } break ; case 1 : for ( VAR_41 = 0 ; VAR_42 < ( VAR_43 / 2 ) ; VAR_44 ++ ) { for ( VAR_45 = 0 ; VAR_46 < VAR_47 ; VAR_48 ++ ) { VAR_49 = * VAR_50 ; * VAR_51 ++ = * ( VAR_52 - VAR_53 + VAR_54 ) ; * ( VAR_55 - VAR_56 + VAR_57 ) = VAR_58 ; } VAR_59 -= VAR_60 ; } break ; default : METHOD_5 ( ""reverseSamplesBytes"" , ""Unsupportedbitdepth%d"" , VAR_61 ) ; return ( 1 ) ; } return ( 0 ) ; }",386
387,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 < VAR_4 ) return ; VAR_5 -= VAR_6 ; METHOD_1 ( VAR_7 -> VAR_8 ) ; while ( ( VAR_9 -> VAR_10 == VAR_11 && ( const TYPE_3 * ) VAR_12 < VAR_13 -> VAR_14 ) || METHOD_2 ( * VAR_15 , ( VAR_16 -> VAR_17 + 2 ) ) ) { unsigned TYPE_4 VAR_18 = VAR_19 -> VAR_20 + 2 ; if ( VAR_21 -> VAR_22 == VAR_23 ) { VAR_24 = 1 ; METHOD_3 ( ( VAR_25 , ""opt:pad0"" ) ) ; } else { METHOD_4 ( ( VAR_26 , ""opt:%slen:%u"" , METHOD_5 ( VAR_27 , ""subopt:%u"" , VAR_28 -> VAR_29 ) , VAR_30 ) ) ; if ( VAR_31 -> VAR_32 > 2 ) { unsigned TYPE_5 VAR_33 = VAR_34 -> VAR_35 ; if ( VAR_36 > VAR_37 ) VAR_38 = VAR_39 ; METHOD_6 ( VAR_40 , """" , ( ( const TYPE_6 * ) VAR_41 ) + VAR_42 , VAR_43 ) ; } } VAR_44 = ( const struct STRUCT_OR_UNION_1 * ) ( ( ( const TYPE_7 * ) VAR_45 ) + VAR_46 ) ; VAR_47 -= VAR_48 ;  }  return ; VAR_49 :  METHOD_7 ( ( VAR_50 , ""[|truncated]"" ) ) ;  return ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_3 < VAR_4 ) return ; VAR_5 -= VAR_6 ; METHOD_1 ( VAR_7 -> VAR_8 ) ; while ( ( VAR_9 -> VAR_10 == VAR_11 && ( const TYPE_3 * ) VAR_12 < VAR_13 -> VAR_14 ) || METHOD_2 ( * VAR_15 , ( VAR_16 -> VAR_17 + 2 ) ) ) { unsigned TYPE_4 VAR_18 = VAR_19 -> VAR_20 + 2 ; if ( VAR_21 -> VAR_22 == VAR_23 ) { VAR_24 = 1 ; METHOD_3 ( ( VAR_25 , ""opt:pad0"" ) ) ; } else { METHOD_4 ( ( VAR_26 , ""opt:%slen:%u"" , METHOD_5 ( VAR_27 , ""subopt:%u"" , VAR_28 -> VAR_29 ) , VAR_30 ) ) ; if ( VAR_31 -> VAR_32 > 2 ) { unsigned TYPE_5 VAR_33 = VAR_34 -> VAR_35 ; if ( VAR_36 > VAR_37 ) VAR_38 = VAR_39 ; METHOD_6 ( VAR_40 , """" , ( ( const TYPE_6 * ) VAR_41 ) + VAR_42 , VAR_43 ) ; } } VAR_44 = ( const struct STRUCT_OR_UNION_1 * ) ( ( ( const TYPE_7 * ) VAR_45 ) + VAR_46 ) ; VAR_47 -= VAR_48 ; METHOD_1 ( VAR_45 -> VAR_35 ) ; } return ; VAR_49 : METHOD_7 ( ( VAR_50 , ""%s"" , VAR_51 ) ) ; return ; }",387
388,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 ; TYPE_4 VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 = VAR_13 ; TYPE_7 VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_1 STRUCT_OR_UNION_2 ; VAR_16 -> VAR_17 . VAR_18 = VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = VAR_36 -> VAR_37 . VAR_38 + VAR_39 ; VAR_40 -> VAR_41 = 1 ; if ( VAR_42 > 0 ) METHOD_1 ( VAR_43 -> VAR_44 . VAR_45 , VAR_46 , VAR_47 ) ; else { VAR_48 = METHOD_2 ( VAR_49 , 1 ) ; if ( VAR_50 != VAR_51 ) return VAR_52 ; } switch ( VAR_53 ) { case VAR_54 : case VAR_55 : case VAR_56 : VAR_57 = VAR_58 = 2 ; break ; case VAR_59 : VAR_60 = VAR_61 = 4 ; break ; TYPE_8 TYPE_9 case VAR_62 : VAR_63 = 4 ; VAR_64 = 8 ; break ; default : return VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; for ( ; ; ) { switch ( VAR_72 -> VAR_73 = METHOD_3 ( VAR_74 , VAR_75 ) ) { case 0x66 : VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ^ 6 ; break ; case 0x67 : if ( VAR_81 == VAR_82 ) VAR_83 -> VAR_84 = VAR_85 ^ 12 ; else VAR_86 -> VAR_87 = VAR_88 ^ 6 ; break ; case 0x26 : case 0x2e : case 0x36 : case 0x3e : VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = ( VAR_93 -> VAR_94 >> 3 ) & 3 ; break ; case 0x64 : case 0x65 : VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 -> VAR_100 & 7 ; break ; case 0x40 ... 0x4f : if ( VAR_101 != VAR_102 ) goto VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; continue ; case 0xf0 : VAR_108 -> VAR_109 = 1 ; break ; case 0xf2 : case 0xf3 : VAR_110 -> VAR_111 = VAR_112 -> VAR_113 ; break ; default : goto VAR_114 ; } VAR_115 -> VAR_116 = 0 ; } VAR_117 : if ( VAR_118 -> VAR_119 & 8 ) VAR_120 -> VAR_121 = 8 ; STRUCT_OR_UNION_3 = VAR_122 [ VAR_123 -> VAR_124 ] ; if ( VAR_125 -> VAR_126 == 0x0f ) { VAR_127 -> VAR_128 = 2 ; VAR_129 -> VAR_130 = METHOD_4 ( VAR_131 , VAR_132 ) ; STRUCT_OR_UNION_4 = VAR_133 [ VAR_134 -> VAR_135 ] ; if ( VAR_136 -> VAR_137 == 0x38 ) { VAR_138 -> VAR_139 = 3 ; VAR_140 -> VAR_141 = METHOD_5 ( VAR_142 , VAR_143 ) ; STRUCT_OR_UNION_5 = VAR_144 [ VAR_145 -> VAR_146 ] ; } } VAR_147 -> VAR_148 = STRUCT_OR_UNION_6 . VAR_149 ; if ( VAR_150 -> VAR_151 & VAR_152 ) VAR_153 -> VAR_154 = METHOD_6 ( VAR_155 , VAR_156 ) ; if ( VAR_157 -> VAR_158 == 1 && ( VAR_159 -> VAR_160 == 0xc5 || VAR_161 -> VAR_162 == 0xc4 ) && ( VAR_163 == VAR_164 || ( VAR_165 >= VAR_166 && ( VAR_167 -> VAR_168 & 0x80 ) ) ) ) { VAR_169 -> VAR_170 = VAR_171 ; } while ( VAR_172 -> VAR_173 & VAR_174 ) { switch ( VAR_175 -> VAR_176 & VAR_177 ) { case VAR_178 : VAR_179 = ( VAR_180 -> VAR_181 >> 3 ) & 7 ; STRUCT_OR_UNION_7 = STRUCT_OR_UNION_8 . VAR_182 . VAR_183 [ VAR_184 ] ; break ; case VAR_185 : VAR_186 = ( VAR_187 -> VAR_188 >> 3 ) & 7 ; if ( ( VAR_189 -> VAR_190 >> 6 ) == 3 ) STRUCT_OR_UNION_9 = STRUCT_OR_UNION_10 . VAR_191 . VAR_192 -> VAR_193 [ VAR_194 ] ; else STRUCT_OR_UNION_11 = STRUCT_OR_UNION_12 . VAR_195 . VAR_196 -> VAR_197 [ VAR_198 ] ; break ; case VAR_199 : VAR_200 = VAR_201 -> VAR_202 & 7 ; STRUCT_OR_UNION_13 = STRUCT_OR_UNION_14 . VAR_203 . VAR_204 [ VAR_205 ] ; break ; case VAR_206 : if ( VAR_207 -> VAR_208 && VAR_209 ) return VAR_210 ; VAR_211 = VAR_212 ? 0x66 : VAR_213 -> VAR_214 ; switch ( VAR_215 ) { case 0x00 : STRUCT_OR_UNION_15 = STRUCT_OR_UNION_16 . VAR_216 . VAR_217 -> VAR_218 ; break ; case 0x66 : STRUCT_OR_UNION_17 = STRUCT_OR_UNION_18 . VAR_219 . VAR_220 -> VAR_221 ; break ; case 0xf2 : STRUCT_OR_UNION_19 = STRUCT_OR_UNION_20 . VAR_222 . VAR_223 -> VAR_224 ; break ; case 0xf3 : STRUCT_OR_UNION_21 = STRUCT_OR_UNION_22 . VAR_225 . VAR_226 -> VAR_227 ; break ; } break ; case VAR_228 : if ( VAR_229 -> VAR_230 > 0xbf ) STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 . VAR_231 . VAR_232 -> VAR_233 [ VAR_234 -> VAR_235 - 0xc0 ] ; else STRUCT_OR_UNION_25 = STRUCT_OR_UNION_26 . VAR_236 . VAR_237 -> VAR_238 [ ( VAR_239 -> VAR_240 >> 3 ) & 7 ] ; break ; default : return VAR_241 ; } VAR_242 -> VAR_243 &= ~ ( TYPE_10 ) VAR_244 ; VAR_245 -> VAR_246 |= STRUCT_OR_UNION_27 . VAR_247 ; } if ( VAR_248 -> VAR_249 == 0 ) return VAR_250 ; VAR_251 -> VAR_252 = STRUCT_OR_UNION_28 . VAR_253 . VAR_254 ; if ( METHOD_7 ( VAR_255 -> VAR_256 ) && METHOD_8 ( ! ( VAR_257 -> VAR_258 & VAR_259 ) ) ) return VAR_260 ; if ( METHOD_9 ( VAR_261 -> VAR_262 & ( VAR_263 | VAR_264 | VAR_265 | VAR_266 | VAR_267 | VAR_268 | VAR_269 ) ) ) { VAR_270 -> VAR_271 = STRUCT_OR_UNION_29 . VAR_272 ; VAR_273 -> VAR_274 = STRUCT_OR_UNION_30 . VAR_275 ; if ( VAR_276 -> VAR_277 & VAR_278 ) return VAR_279 ; if ( VAR_280 == VAR_281 && ( VAR_282 -> VAR_283 & VAR_284 ) ) VAR_285 -> VAR_286 = 8 ; if ( VAR_287 -> VAR_288 & VAR_289 ) { if ( VAR_290 == VAR_291 ) VAR_292 -> VAR_293 = 8 ; else VAR_294 -> VAR_295 = 4 ; } if ( VAR_296 -> VAR_297 & VAR_298 ) VAR_299 -> VAR_300 = 16 ; else if ( VAR_301 -> VAR_302 & VAR_303 ) VAR_304 -> VAR_305 = 8 ; } if ( VAR_306 -> VAR_307 & VAR_308 ) { VAR_309 = METHOD_10 ( VAR_310 , & VAR_311 -> VAR_312 ) ; if ( ! VAR_313 ) { VAR_314 = VAR_315 ; VAR_316 -> VAR_317 = VAR_318 -> VAR_319 ; } } else if ( VAR_320 -> VAR_321 & VAR_322 ) VAR_323 = METHOD_11 ( VAR_324 , & VAR_325 -> VAR_326 ) ; if ( VAR_327 != VAR_328 ) goto VAR_329 ; if ( ! VAR_330 ) VAR_331 -> VAR_332 = VAR_333 ; VAR_334 -> VAR_335 . VAR_336 . VAR_337 . VAR_338 = VAR_339 -> VAR_340 ; VAR_341 = METHOD_12 ( VAR_342 , & VAR_343 -> VAR_344 , ( VAR_345 -> VAR_346 >> VAR_347 ) & VAR_348 ) ; if ( VAR_349 != VAR_350 ) goto VAR_351 ; VAR_352 = METHOD_13 ( VAR_353 , & VAR_354 -> VAR_355 , ( VAR_356 -> VAR_357 >> VAR_358 ) & VAR_359 ) ; if ( VAR_360 != VAR_361 ) goto VAR_362 ; VAR_363 = METHOD_14 ( VAR_364 , & VAR_365 -> VAR_366 , ( VAR_367 -> VAR_368 >> VAR_369 ) & VAR_370 ) ;  VAR_371 :  if ( VAR_372 -> VAR_373 )  VAR_374 -> VAR_375 -> VAR_376 . VAR_377 . VAR_378 += VAR_379 -> VAR_380 ;  return ( VAR_381 != VAR_382 ) ? VAR_383 : VAR_384 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = VAR_4 ; TYPE_4 VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 = VAR_13 ; TYPE_7 VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_1 STRUCT_OR_UNION_2 ; VAR_16 -> VAR_17 . VAR_18 = VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; VAR_23 -> VAR_24 = VAR_25 -> VAR_26 ; VAR_27 -> VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; VAR_33 -> VAR_34 . VAR_35 = VAR_36 -> VAR_37 . VAR_38 + VAR_39 ; VAR_40 -> VAR_41 = 1 ; if ( VAR_42 > 0 ) METHOD_1 ( VAR_43 -> VAR_44 . VAR_45 , VAR_46 , VAR_47 ) ; else { VAR_48 = METHOD_2 ( VAR_49 , 1 ) ; if ( VAR_50 != VAR_51 ) return VAR_52 ; } switch ( VAR_53 ) { case VAR_54 : case VAR_55 : case VAR_56 : VAR_57 = VAR_58 = 2 ; break ; case VAR_59 : VAR_60 = VAR_61 = 4 ; break ; TYPE_8 TYPE_9 case VAR_62 : VAR_63 = 4 ; VAR_64 = 8 ; break ; default : return VAR_65 ; } VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; for ( ; ; ) { switch ( VAR_72 -> VAR_73 = METHOD_3 ( VAR_74 , VAR_75 ) ) { case 0x66 : VAR_76 = VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ^ 6 ; break ; case 0x67 : if ( VAR_81 == VAR_82 ) VAR_83 -> VAR_84 = VAR_85 ^ 12 ; else VAR_86 -> VAR_87 = VAR_88 ^ 6 ; break ; case 0x26 : case 0x2e : case 0x36 : case 0x3e : VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = ( VAR_93 -> VAR_94 >> 3 ) & 3 ; break ; case 0x64 : case 0x65 : VAR_95 = VAR_96 ; VAR_97 -> VAR_98 = VAR_99 -> VAR_100 & 7 ; break ; case 0x40 ... 0x4f : if ( VAR_101 != VAR_102 ) goto VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; continue ; case 0xf0 : VAR_108 -> VAR_109 = 1 ; break ; case 0xf2 : case 0xf3 : VAR_110 -> VAR_111 = VAR_112 -> VAR_113 ; break ; default : goto VAR_114 ; } VAR_115 -> VAR_116 = 0 ; } VAR_117 : if ( VAR_118 -> VAR_119 & 8 ) VAR_120 -> VAR_121 = 8 ; STRUCT_OR_UNION_3 = VAR_122 [ VAR_123 -> VAR_124 ] ; if ( VAR_125 -> VAR_126 == 0x0f ) { VAR_127 -> VAR_128 = 2 ; VAR_129 -> VAR_130 = METHOD_4 ( VAR_131 , VAR_132 ) ; STRUCT_OR_UNION_4 = VAR_133 [ VAR_134 -> VAR_135 ] ; if ( VAR_136 -> VAR_137 == 0x38 ) { VAR_138 -> VAR_139 = 3 ; VAR_140 -> VAR_141 = METHOD_5 ( VAR_142 , VAR_143 ) ; STRUCT_OR_UNION_5 = VAR_144 [ VAR_145 -> VAR_146 ] ; } } VAR_147 -> VAR_148 = STRUCT_OR_UNION_6 . VAR_149 ; if ( VAR_150 -> VAR_151 & VAR_152 ) VAR_153 -> VAR_154 = METHOD_6 ( VAR_155 , VAR_156 ) ; if ( VAR_157 -> VAR_158 == 1 && ( VAR_159 -> VAR_160 == 0xc5 || VAR_161 -> VAR_162 == 0xc4 ) && ( VAR_163 == VAR_164 || ( VAR_165 >= VAR_166 && ( VAR_167 -> VAR_168 & 0x80 ) ) ) ) { VAR_169 -> VAR_170 = VAR_171 ; } while ( VAR_172 -> VAR_173 & VAR_174 ) { switch ( VAR_175 -> VAR_176 & VAR_177 ) { case VAR_178 : VAR_179 = ( VAR_180 -> VAR_181 >> 3 ) & 7 ; STRUCT_OR_UNION_7 = STRUCT_OR_UNION_8 . VAR_182 . VAR_183 [ VAR_184 ] ; break ; case VAR_185 : VAR_186 = ( VAR_187 -> VAR_188 >> 3 ) & 7 ; if ( ( VAR_189 -> VAR_190 >> 6 ) == 3 ) STRUCT_OR_UNION_9 = STRUCT_OR_UNION_10 . VAR_191 . VAR_192 -> VAR_193 [ VAR_194 ] ; else STRUCT_OR_UNION_11 = STRUCT_OR_UNION_12 . VAR_195 . VAR_196 -> VAR_197 [ VAR_198 ] ; break ; case VAR_199 : VAR_200 = VAR_201 -> VAR_202 & 7 ; STRUCT_OR_UNION_13 = STRUCT_OR_UNION_14 . VAR_203 . VAR_204 [ VAR_205 ] ; break ; case VAR_206 : if ( VAR_207 -> VAR_208 && VAR_209 ) return VAR_210 ; VAR_211 = VAR_212 ? 0x66 : VAR_213 -> VAR_214 ; switch ( VAR_215 ) { case 0x00 : STRUCT_OR_UNION_15 = STRUCT_OR_UNION_16 . VAR_216 . VAR_217 -> VAR_218 ; break ; case 0x66 : STRUCT_OR_UNION_17 = STRUCT_OR_UNION_18 . VAR_219 . VAR_220 -> VAR_221 ; break ; case 0xf2 : STRUCT_OR_UNION_19 = STRUCT_OR_UNION_20 . VAR_222 . VAR_223 -> VAR_224 ; break ; case 0xf3 : STRUCT_OR_UNION_21 = STRUCT_OR_UNION_22 . VAR_225 . VAR_226 -> VAR_227 ; break ; } break ; case VAR_228 : if ( VAR_229 -> VAR_230 > 0xbf ) STRUCT_OR_UNION_23 = STRUCT_OR_UNION_24 . VAR_231 . VAR_232 -> VAR_233 [ VAR_234 -> VAR_235 - 0xc0 ] ; else STRUCT_OR_UNION_25 = STRUCT_OR_UNION_26 . VAR_236 . VAR_237 -> VAR_238 [ ( VAR_239 -> VAR_240 >> 3 ) & 7 ] ; break ; default : return VAR_241 ; } VAR_242 -> VAR_243 &= ~ ( TYPE_10 ) VAR_244 ; VAR_245 -> VAR_246 |= STRUCT_OR_UNION_27 . VAR_247 ; } if ( VAR_248 -> VAR_249 == 0 ) return VAR_250 ; VAR_251 -> VAR_252 = STRUCT_OR_UNION_28 . VAR_253 . VAR_254 ; if ( METHOD_7 ( VAR_255 -> VAR_256 ) && METHOD_8 ( ! ( VAR_257 -> VAR_258 & VAR_259 ) ) ) return VAR_260 ; if ( METHOD_9 ( VAR_261 -> VAR_262 & ( VAR_263 | VAR_264 | VAR_265 | VAR_266 | VAR_267 | VAR_268 | VAR_269 ) ) ) { VAR_270 -> VAR_271 = STRUCT_OR_UNION_29 . VAR_272 ; VAR_273 -> VAR_274 = STRUCT_OR_UNION_30 . VAR_275 ; if ( VAR_276 -> VAR_277 & VAR_278 ) return VAR_279 ; if ( VAR_280 == VAR_281 && ( VAR_282 -> VAR_283 & VAR_284 ) ) VAR_285 -> VAR_286 = 8 ; if ( VAR_287 -> VAR_288 & VAR_289 ) { if ( VAR_290 == VAR_291 ) VAR_292 -> VAR_293 = 8 ; else VAR_294 -> VAR_295 = 4 ; } if ( VAR_296 -> VAR_297 & VAR_298 ) VAR_299 -> VAR_300 = 16 ; else if ( VAR_301 -> VAR_302 & VAR_303 ) VAR_304 -> VAR_305 = 8 ; } if ( VAR_306 -> VAR_307 & VAR_308 ) { VAR_309 = METHOD_10 ( VAR_310 , & VAR_311 -> VAR_312 ) ; if ( ! VAR_313 ) { VAR_314 = VAR_315 ; VAR_316 -> VAR_317 = VAR_318 -> VAR_319 ; } } else if ( VAR_320 -> VAR_321 & VAR_322 ) VAR_323 = METHOD_11 ( VAR_324 , & VAR_325 -> VAR_326 ) ; if ( VAR_327 != VAR_328 ) goto VAR_329 ; if ( ! VAR_330 ) VAR_331 -> VAR_332 = VAR_333 ; VAR_334 -> VAR_335 . VAR_336 . VAR_337 . VAR_338 = VAR_339 -> VAR_340 ; VAR_341 = METHOD_12 ( VAR_342 , & VAR_343 -> VAR_344 , ( VAR_345 -> VAR_346 >> VAR_347 ) & VAR_348 ) ; if ( VAR_349 != VAR_350 ) goto VAR_351 ; VAR_352 = METHOD_13 ( VAR_353 , & VAR_354 -> VAR_355 , ( VAR_356 -> VAR_357 >> VAR_358 ) & VAR_359 ) ; if ( VAR_360 != VAR_361 ) goto VAR_362 ; VAR_363 = METHOD_14 ( VAR_364 , & VAR_365 -> VAR_366 , ( VAR_367 -> VAR_368 >> VAR_369 ) & VAR_370 ) ; VAR_371 : if ( VAR_372 -> VAR_373 ) VAR_374 -> VAR_375 -> VAR_376 . VAR_377 . VAR_378 += VAR_379 -> VAR_380 ; VAR_371 : return ( VAR_381 != VAR_382 ) ? VAR_383 : VAR_384 ; }",388
389,"static VAR_0 signed TYPE_0 METHOD_0 ( const TYPE_1 VAR_1 , const unsigned TYPE_2 * VAR_2 ) { union { unsigned TYPE_3 VAR_3 ; signed TYPE_4 VAR_4 ; } VAR_5 ; unsigned TYPE_5 VAR_6 ; if ( VAR_7 == VAR_8 ) {  VAR_9 = ( unsigned TYPE_6 ) ( ( VAR_10 [ 1 ] << 8 ) | VAR_11 [ 0 ] ) ;   VAR_12 . VAR_13 = ( VAR_14 & 0xffff ) ;  return ( VAR_15 . VAR_16 ) ; }  VAR_17 = ( unsigned TYPE_7 ) ( ( ( ( unsigned TYPE_8 * ) VAR_18 ) [ 0 ] << 8 ) |   ( ( unsigned TYPE_9 * ) VAR_19 ) [ 1 ] ) ;   VAR_20 . VAR_21 = ( VAR_22 & 0xffff ) ;  return ( VAR_23 . VAR_24 ) ; }","static VAR_0 signed TYPE_0 METHOD_0 ( const TYPE_1 VAR_1 , const unsigned TYPE_2 * VAR_2 ) { union { unsigned TYPE_3 VAR_3 ; signed TYPE_4 VAR_4 ; } VAR_5 ; unsigned TYPE_5 VAR_6 ; if ( VAR_7 == VAR_8 ) { VAR_9 = ( unsigned TYPE_6 ) ( ( VAR_10 [ 1 ] << 8 ) | VAR_11 [ 0 ] ) ; VAR_12 . VAR_13 = ( VAR_14 & 0xffff ) ; return ( VAR_15 . VAR_16 ) ; } VAR_17 = ( unsigned TYPE_7 ) ( ( ( ( unsigned TYPE_8 * ) VAR_18 ) [ 0 ] << 8 ) | ( ( unsigned TYPE_9 * ) VAR_19 ) [ 1 ] ) ; VAR_20 . VAR_21 = VAR_22 & 0xffff ) ; return ( VAR_23 . VAR_24 ) ; }",389
390,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;  METHOD_3 ( VAR_6 -> VAR_7 ) ;  return 0 ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; VAR_2 = METHOD_1 ( VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ; return 0 ; },390
391,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 ; METHOD_1 ( VAR_7 , ""filtersession:%p:%s%s"" , VAR_8 , METHOD_2 ( VAR_9 ) , METHOD_3 ( STRUCT_OR_UNION_3 ) ) ; switch ( VAR_10 ) { case VAR_11 : VAR_12 : VAR_13 = METHOD_4 ( VAR_14 -> STRUCT_OR_UNION_4 , & VAR_15 ) ; if ( VAR_16 == VAR_17 ) return ; METHOD_5 ( VAR_18 -> VAR_19 , VAR_20 ) ; goto VAR_21 ;  case VAR_22 :  METHOD_6 ( VAR_23 -> STRUCT_OR_UNION_5 ) ; VAR_24 -> STRUCT_OR_UNION_6 = VAR_25 ; break ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 ; METHOD_1 ( VAR_7 , ""filtersession:%p:%s%s"" , VAR_8 , METHOD_2 ( VAR_9 ) , METHOD_3 ( STRUCT_OR_UNION_3 ) ) ; switch ( VAR_10 ) { case VAR_11 : VAR_12 : VAR_13 = METHOD_4 ( VAR_14 -> STRUCT_OR_UNION_4 , & VAR_15 ) ; if ( VAR_16 == VAR_17 ) return ; METHOD_5 ( VAR_18 -> VAR_19 , VAR_20 ) ; goto VAR_21 ; } }",391
392,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( ! VAR_6 -> VAR_7 ) { goto VAR_8 ; } else { TYPE_5 VAR_9 , VAR_10 ; VAR_11 -> VAR_12 = 0 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = 0 ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; VAR_21 ++ ) { VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 ] ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 -> VAR_29 ; VAR_30 ++ ) { TYPE_6 VAR_31 , VAR_32 ; VAR_33 = & VAR_34 -> VAR_35 [ VAR_36 ] ; VAR_37 = VAR_38 -> VAR_39 * ( 1u << ( VAR_40 -> VAR_41 + VAR_42 -> VAR_43 - 1 - VAR_44 ) ) ; VAR_45 = VAR_46 -> VAR_47 * ( 1u << ( VAR_48 -> VAR_49 + VAR_50 -> VAR_51 - 1 - VAR_52 ) ) ; VAR_53 -> VAR_54 = ! VAR_55 -> VAR_56 ? VAR_57 : METHOD_1 ( VAR_58 -> VAR_59 , VAR_60 ) ; VAR_61 -> VAR_62 = ! VAR_63 -> VAR_64 ? VAR_65 : METHOD_2 ( VAR_66 -> VAR_67 , VAR_68 ) ; } } } if ( ! VAR_69 -> VAR_70 ) { VAR_71 -> VAR_72 . VAR_73 = VAR_74 -> VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; VAR_81 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; } for ( VAR_91 -> VAR_92 = VAR_93 -> VAR_94 . VAR_95 ; VAR_96 -> VAR_97 < VAR_98 -> VAR_99 . VAR_100 ; VAR_101 -> VAR_102 ++ ) { for ( VAR_103 -> VAR_104 = VAR_105 -> VAR_106 . VAR_107 ; VAR_108 -> VAR_109 < VAR_110 -> VAR_111 . VAR_112 ; VAR_113 -> VAR_114 += ( TYPE_7 ) ( VAR_115 -> VAR_116 - ( TYPE_8 ) ( VAR_117 -> VAR_118 % ( TYPE_9 ) VAR_119 -> VAR_120 ) ) ) { for ( VAR_121 -> VAR_122 = VAR_123 -> VAR_124 . VAR_125 ; VAR_126 -> VAR_127 < VAR_128 -> VAR_129 . VAR_130 ; VAR_131 -> VAR_132 += ( TYPE_10 ) ( VAR_133 -> VAR_134 - ( TYPE_11 ) ( VAR_135 -> VAR_136 % ( TYPE_12 ) VAR_137 -> VAR_138 ) ) ) { for ( VAR_139 -> VAR_140 = VAR_141 -> VAR_142 . VAR_143 ; VAR_144 -> VAR_145 < VAR_146 -> VAR_147 . VAR_148 ; VAR_149 -> VAR_150 ++ ) { TYPE_13 VAR_151 ; TYPE_14 VAR_152 , VAR_153 ; TYPE_15 VAR_154 , VAR_155 ; TYPE_16 VAR_156 , VAR_157 ; TYPE_17 VAR_158 , VAR_159 ; VAR_160 = & VAR_161 -> VAR_162 [ VAR_163 -> VAR_164 ] ; if ( VAR_165 -> VAR_166 >= VAR_167 -> VAR_168 ) { continue ; } VAR_169 = & VAR_170 -> VAR_171 [ VAR_172 -> VAR_173 ] ; VAR_174 = VAR_175 -> VAR_176 - 1 - VAR_177 -> VAR_178 ; VAR_179 = METHOD_3 ( VAR_180 -> VAR_181 , ( TYPE_18 ) ( VAR_182 -> VAR_183 << VAR_184 ) ) ; VAR_185 = METHOD_4 ( VAR_186 -> VAR_187 , ( TYPE_19 ) ( VAR_188 -> VAR_189 << VAR_190 ) ) ; VAR_191 = METHOD_5 ( VAR_192 -> VAR_193 , ( TYPE_20 ) ( VAR_194 -> VAR_195 << VAR_196 ) ) ; VAR_197 = METHOD_6 ( VAR_198 -> VAR_199 , ( TYPE_21 ) ( VAR_200 -> VAR_201 << VAR_202 ) ) ; VAR_203 = VAR_204 -> VAR_205 + VAR_206 ; VAR_207 = VAR_208 -> VAR_209 + VAR_210 ;  if ( ! ( ( VAR_211 -> VAR_212 % ( TYPE_22 ) ( VAR_213 -> VAR_214 << VAR_215 ) == 0 ) || ( ( VAR_216 -> VAR_217 == VAR_218 -> VAR_219 ) &&  ( ( VAR_220 << VAR_221 ) % ( 1 << VAR_222 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_223 -> VAR_224 % ( TYPE_23 ) ( VAR_225 -> VAR_226 << VAR_227 ) == 0 ) || ( ( VAR_228 -> VAR_229 == VAR_230 -> VAR_231 ) && ( ( VAR_232 << VAR_233 ) % ( 1 << VAR_234 ) ) ) ) ) { continue ; } if ( ( VAR_235 -> VAR_236 == 0 ) || ( VAR_237 -> VAR_238 == 0 ) ) { continue ; } if ( ( VAR_239 == VAR_240 ) || ( VAR_241 == VAR_242 ) ) { continue ; } VAR_243 = METHOD_7 ( METHOD_8 ( VAR_244 -> VAR_245 , ( TYPE_24 ) ( VAR_246 -> VAR_247 << VAR_248 ) ) , ( TYPE_25 ) VAR_249 -> VAR_250 ) - METHOD_9 ( VAR_251 , ( TYPE_26 ) VAR_252 -> VAR_253 ) ; VAR_254 = METHOD_10 ( METHOD_11 ( VAR_255 -> VAR_256 , ( TYPE_27 ) ( VAR_257 -> VAR_258 << VAR_259 ) ) , ( TYPE_28 ) VAR_260 -> VAR_261 ) - METHOD_12 ( VAR_262 , ( TYPE_29 ) VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 = ( TYPE_30 ) ( VAR_267 + VAR_268 * ( TYPE_31 ) VAR_269 -> VAR_270 ) ; for ( VAR_271 -> VAR_272 = VAR_273 -> VAR_274 . VAR_275 ; VAR_276 -> VAR_277 < VAR_278 -> VAR_279 . VAR_280 ; VAR_281 -> VAR_282 ++ ) { VAR_283 = VAR_284 -> VAR_285 * VAR_286 -> VAR_287 + VAR_288 -> VAR_289 * VAR_290 -> VAR_291 + VAR_292 -> VAR_293 * VAR_294 -> VAR_295 + VAR_296 -> VAR_297 * VAR_298 -> VAR_299 ; if ( ! VAR_300 -> VAR_301 [ VAR_302 ] ) { VAR_303 -> VAR_304 [ VAR_305 ] = 1 ; return VAR_306 ; } VAR_307 : ; } } } } } return VAR_308 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( VAR_234 >= 31 || ( ( VAR_257 -> VAR_247 << VAR_234 ) >> VAR_234 ) != VAR_257 -> VAR_247 || VAR_222 >= 31 || ( ( VAR_257 -> VAR_258 << VAR_222 ) >> VAR_222 ) != VAR_257 -> VAR_258 ) { continue ; } if ( ! VAR_6 -> VAR_7 ) { goto VAR_8 ; } else { TYPE_5 VAR_9 , VAR_10 ; VAR_11 -> VAR_12 = 0 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = 0 ; for ( VAR_17 = 0 ; VAR_18 < VAR_19 -> VAR_20 ; VAR_21 ++ ) { VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 ] ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 -> VAR_29 ; VAR_30 ++ ) { TYPE_6 VAR_31 , VAR_32 ; VAR_33 = & VAR_34 -> VAR_35 [ VAR_36 ] ; VAR_37 = VAR_38 -> VAR_39 * ( 1u << ( VAR_40 -> VAR_41 + VAR_42 -> VAR_43 - 1 - VAR_44 ) ) ; VAR_45 = VAR_46 -> VAR_47 * ( 1u << ( VAR_48 -> VAR_49 + VAR_50 -> VAR_51 - 1 - VAR_52 ) ) ; VAR_53 -> VAR_54 = ! VAR_55 -> VAR_56 ? VAR_57 : METHOD_1 ( VAR_58 -> VAR_59 , VAR_60 ) ; VAR_61 -> VAR_62 = ! VAR_63 -> VAR_64 ? VAR_65 : METHOD_2 ( VAR_66 -> VAR_67 , VAR_68 ) ; } } } if ( ! VAR_69 -> VAR_70 ) { VAR_71 -> VAR_72 . VAR_73 = VAR_74 -> VAR_75 ; VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; VAR_81 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; } for ( VAR_91 -> VAR_92 = VAR_93 -> VAR_94 . VAR_95 ; VAR_96 -> VAR_97 < VAR_98 -> VAR_99 . VAR_100 ; VAR_101 -> VAR_102 ++ ) { for ( VAR_103 -> VAR_104 = VAR_105 -> VAR_106 . VAR_107 ; VAR_108 -> VAR_109 < VAR_110 -> VAR_111 . VAR_112 ; VAR_113 -> VAR_114 += ( TYPE_7 ) ( VAR_115 -> VAR_116 - ( TYPE_8 ) ( VAR_117 -> VAR_118 % ( TYPE_9 ) VAR_119 -> VAR_120 ) ) ) { for ( VAR_121 -> VAR_122 = VAR_123 -> VAR_124 . VAR_125 ; VAR_126 -> VAR_127 < VAR_128 -> VAR_129 . VAR_130 ; VAR_131 -> VAR_132 += ( TYPE_10 ) ( VAR_133 -> VAR_134 - ( TYPE_11 ) ( VAR_135 -> VAR_136 % ( TYPE_12 ) VAR_137 -> VAR_138 ) ) ) { for ( VAR_139 -> VAR_140 = VAR_141 -> VAR_142 . VAR_143 ; VAR_144 -> VAR_145 < VAR_146 -> VAR_147 . VAR_148 ; VAR_149 -> VAR_150 ++ ) { TYPE_13 VAR_151 ; TYPE_14 VAR_152 , VAR_153 ; TYPE_15 VAR_154 , VAR_155 ; TYPE_16 VAR_156 , VAR_157 ; TYPE_17 VAR_158 , VAR_159 ; VAR_160 = & VAR_161 -> VAR_162 [ VAR_163 -> VAR_164 ] ; if ( VAR_165 -> VAR_166 >= VAR_167 -> VAR_168 ) { continue ; } VAR_169 = & VAR_170 -> VAR_171 [ VAR_172 -> VAR_173 ] ; VAR_174 = VAR_175 -> VAR_176 - 1 - VAR_177 -> VAR_178 ; VAR_179 = METHOD_3 ( VAR_180 -> VAR_181 , ( TYPE_18 ) ( VAR_182 -> VAR_183 << VAR_184 ) ) ; VAR_185 = METHOD_4 ( VAR_186 -> VAR_187 , ( TYPE_19 ) ( VAR_188 -> VAR_189 << VAR_190 ) ) ; VAR_191 = METHOD_5 ( VAR_192 -> VAR_193 , ( TYPE_20 ) ( VAR_194 -> VAR_195 << VAR_196 ) ) ; VAR_197 = METHOD_6 ( VAR_198 -> VAR_199 , ( TYPE_21 ) ( VAR_200 -> VAR_201 << VAR_202 ) ) ; VAR_203 = VAR_204 -> VAR_205 + VAR_206 ; VAR_207 = VAR_208 -> VAR_209 + VAR_210 ; if ( ! ( ( VAR_211 -> VAR_212 % ( TYPE_22 ) ( VAR_213 -> VAR_214 << VAR_215 ) == 0 ) || ( ( VAR_216 -> VAR_217 == VAR_218 -> VAR_219 ) && ( ( VAR_220 << VAR_221 ) % ( 1 << VAR_222 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_223 -> VAR_224 % ( TYPE_23 ) ( VAR_225 -> VAR_226 << VAR_227 ) == 0 ) || ( ( VAR_228 -> VAR_229 == VAR_230 -> VAR_231 ) && ( ( VAR_232 << VAR_233 ) % ( 1 << VAR_234 ) ) ) ) ) { continue ; } if ( ( VAR_235 -> VAR_236 == 0 ) || ( VAR_237 -> VAR_238 == 0 ) ) { continue ; } if ( ( VAR_239 == VAR_240 ) || ( VAR_241 == VAR_242 ) ) { continue ; } VAR_243 = METHOD_7 ( METHOD_8 ( VAR_244 -> VAR_245 , ( TYPE_24 ) ( VAR_246 -> VAR_247 << VAR_248 ) ) , ( TYPE_25 ) VAR_249 -> VAR_250 ) - METHOD_9 ( VAR_251 , ( TYPE_26 ) VAR_252 -> VAR_253 ) ; VAR_254 = METHOD_10 ( METHOD_11 ( VAR_255 -> VAR_256 , ( TYPE_27 ) ( VAR_257 -> VAR_258 << VAR_259 ) ) , ( TYPE_28 ) VAR_260 -> VAR_261 ) - METHOD_12 ( VAR_262 , ( TYPE_29 ) VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 = ( TYPE_30 ) ( VAR_267 + VAR_268 * ( TYPE_31 ) VAR_269 -> VAR_270 ) ; for ( VAR_271 -> VAR_272 = VAR_273 -> VAR_274 . VAR_275 ; VAR_276 -> VAR_277 < VAR_278 -> VAR_279 . VAR_280 ; VAR_281 -> VAR_282 ++ ) { VAR_283 = VAR_284 -> VAR_285 * VAR_286 -> VAR_287 + VAR_288 -> VAR_289 * VAR_290 -> VAR_291 + VAR_292 -> VAR_293 * VAR_294 -> VAR_295 + VAR_296 -> VAR_297 * VAR_298 -> VAR_299 ; if ( ! VAR_300 -> VAR_301 [ VAR_302 ] ) { VAR_303 -> VAR_304 [ VAR_305 ] = 1 ; return VAR_306 ; } VAR_307 : ; } } } } } return VAR_308 ; }",392
393,"VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_2 * VAR_3 ) { METHOD_1 ( VAR_4 , ""%llu:APIv1datawithURL\'%s\'"" , VAR_5 -> VAR_6 , VAR_7 ) ; TYPE_3 VAR_8 = 400 ; TYPE_4 * VAR_9 = VAR_10 ; METHOD_2 ( VAR_11 -> VAR_12 . VAR_13 ) ; TYPE_5 * VAR_14 = ""0.6"" , * VAR_15 = ""0"" , * VAR_16 = ""0"" , * VAR_17 = ""json"" , * VAR_18 = VAR_19 , * VAR_20 = VAR_21 ; TYPE_6 VAR_22 = 0 , VAR_23 = 0 ; TYPE_7 * VAR_24 = VAR_25 , * VAR_26 = VAR_27 , * VAR_28 = VAR_29 , * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_8 VAR_34 = VAR_35 ; TYPE_9 VAR_36 = VAR_37 ; TYPE_10 VAR_38 = 0x00000000 ; while ( VAR_39 ) { TYPE_11 * VAR_40 = METHOD_3 ( & VAR_41 , ""?&"" ) ; if ( ! VAR_42 || ! * VAR_43 ) continue ; TYPE_12 * VAR_44 = METHOD_4 ( & VAR_45 , ""="" ) ; if ( ! VAR_46 || ! * VAR_47 ) continue ; if ( ! VAR_48 || ! * VAR_49 ) continue ; METHOD_5 ( VAR_50 , ""%llu:APIv1dataqueryparam\'%s\'withvalue\'%s\'"" , VAR_51 -> VAR_52 , VAR_53 , VAR_54 ) ; if ( ! METHOD_6 ( VAR_55 , ""chart"" ) ) VAR_56 = VAR_57 ; else if ( ! METHOD_7 ( VAR_58 , ""dimension"" ) || ! METHOD_8 ( VAR_59 , ""dim"" ) || ! METHOD_9 ( VAR_60 , ""dimensions"" ) || ! METHOD_10 ( VAR_61 , ""dims"" ) ) { if ( ! VAR_62 ) VAR_63 = METHOD_11 ( 100 ) ; METHOD_12 ( VAR_64 , ""|"" ) ; METHOD_13 ( VAR_65 , VAR_66 ) ; } else if ( ! METHOD_14 ( VAR_67 , ""after"" ) ) VAR_68 = VAR_69 ; else if ( ! METHOD_15 ( VAR_70 , ""before"" ) ) VAR_71 = VAR_72 ; else if ( ! METHOD_16 ( VAR_73 , ""points"" ) ) VAR_74 = VAR_75 ; else if ( ! METHOD_17 ( VAR_76 , ""gtime"" ) ) VAR_77 = VAR_78 ; else if ( ! METHOD_18 ( VAR_79 , ""group"" ) ) { VAR_80 = METHOD_19 ( VAR_81 , VAR_82 ) ; } else if ( ! METHOD_20 ( VAR_83 , ""format"" ) ) { VAR_84 = METHOD_21 ( VAR_85 ) ; } else if ( ! METHOD_22 ( VAR_86 , ""options"" ) ) { VAR_87 |= METHOD_23 ( VAR_88 ) ; } else if ( ! METHOD_24 ( VAR_89 , ""callback"" ) ) { VAR_90 = VAR_91 ; } else if ( ! METHOD_25 ( VAR_92 , ""filename"" ) ) { VAR_93 = VAR_94 ; } else if ( ! METHOD_26 ( VAR_95 , ""tqx"" ) ) { TYPE_13 * VAR_96 , * VAR_97 ; while ( VAR_98 ) { VAR_99 = METHOD_27 ( & VAR_100 , "";"" ) ; if ( ! VAR_101 || ! * VAR_102 ) continue ; VAR_103 = METHOD_28 ( & VAR_104 , "":"" ) ; if ( ! VAR_105 || ! * VAR_106 ) continue ; if ( ! VAR_107 || ! * VAR_108 ) continue ; if ( ! METHOD_29 ( VAR_109 , ""version"" ) ) VAR_110 = VAR_111 ; else if ( ! METHOD_30 ( VAR_112 , ""reqId"" ) ) VAR_113 = VAR_114 ; else if ( ! METHOD_31 ( VAR_115 , ""sig"" ) ) { VAR_116 = VAR_117 ; VAR_118 = METHOD_32 ( VAR_119 , VAR_120 , 0 ) ; } else if ( ! METHOD_33 ( VAR_121 , ""out"" ) ) { VAR_122 = VAR_123 ; VAR_124 = METHOD_34 ( VAR_125 ) ; } else if ( ! METHOD_35 ( VAR_126 , ""responseHandler"" ) ) VAR_127 = VAR_128 ; else if ( ! METHOD_36 ( VAR_129 , ""outFileName"" ) ) VAR_130 = VAR_131 ; } } }  if ( ! VAR_132 || ! * VAR_133 ) {  METHOD_37 ( VAR_134 -> VAR_135 . VAR_136 , ""Nochartidisgivenattherequest."" ) ; goto VAR_137 ; } TYPE_14 * VAR_138 = METHOD_38 ( VAR_139 , VAR_140 ) ; if ( ! VAR_141 ) VAR_142 = METHOD_39 ( VAR_143 , VAR_144 ) ; if ( ! VAR_145 ) { METHOD_40 ( VAR_146 -> VAR_147 . VAR_148 , ""Chartisnotfound:"" ) ; METHOD_41 ( VAR_149 -> VAR_150 . VAR_151 , VAR_152 ) ; VAR_153 = 404 ; goto VAR_154 ; } VAR_155 -> VAR_156 = METHOD_42 ( ) ; TYPE_15 TYPE_16 VAR_157 = ( VAR_158 && * VAR_159 ) ? METHOD_43 ( VAR_160 ) : 0 ; TYPE_17 TYPE_18 VAR_161 = ( VAR_162 && * VAR_163 ) ? METHOD_44 ( VAR_164 ) : 0 ; TYPE_19 VAR_165 = ( VAR_166 && * VAR_167 ) ? METHOD_45 ( VAR_168 ) : 0 ; TYPE_20 VAR_169 = ( VAR_170 && * VAR_171 ) ? METHOD_46 ( VAR_172 ) : 0 ; METHOD_47 ( VAR_173 , ""%llu:APIcommand\'data\'forchart\'%s\',dimensions\'%s\',after\'%lld\',before\'%lld\',points\'%d\',group\'%d\',format\'%u\',options\'0x%08x\'"" , VAR_174 -> VAR_175 , VAR_176 , ( VAR_177 ) ? METHOD_48 ( VAR_178 ) : """" , VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; if ( VAR_185 && * VAR_186 ) { METHOD_49 ( VAR_187 -> VAR_188 . VAR_189 , ""Content-Disposition:attachment;filename=\\""%s\\""\\r\\n"" , VAR_190 ) ; METHOD_50 ( VAR_191 , ""%llu:generatingoutfilenameheader:\'%s\'"" , VAR_192 -> VAR_193 , VAR_194 ) ; } if ( VAR_195 == VAR_196 ) { if ( VAR_197 == VAR_198 ) VAR_199 = ""google.visualization.Query.setResponse"" ; METHOD_51 ( VAR_200 , ""%llu:GOOGLEJSON/JSONP:version=\'%s\',reqId=\'%s\',sig=\'%s\',out=\'%s\',responseHandler=\'%s\',outFileName=\'%s\'"" , VAR_201 -> VAR_202 , VAR_203 , VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 ) ; METHOD_52 ( VAR_209 -> VAR_210 . VAR_211 , ""%s({version:\'%s\',reqId:\'%s\',status:\'ok\',sig:\'%ld\',table:"" , VAR_212 , VAR_213 , VAR_214 , VAR_215 -> VAR_216 . VAR_217 ) ; } else if ( VAR_218 == VAR_219 ) { if ( VAR_220 == VAR_221 ) VAR_222 = ""callback"" ; METHOD_53 ( VAR_223 -> VAR_224 . VAR_225 , VAR_226 ) ; METHOD_54 ( VAR_227 -> VAR_228 . VAR_229 , ""("" ) ; } VAR_230 = METHOD_55 ( VAR_231 , VAR_232 -> VAR_233 . VAR_234 , VAR_235 , VAR_236 , VAR_237 , VAR_238 , VAR_239 , VAR_240 , VAR_241 , VAR_242 , & VAR_243 ) ; if ( VAR_244 == VAR_245 ) { if ( VAR_246 < VAR_247 ) METHOD_56 ( VAR_248 -> VAR_249 . VAR_250 , ""});"" ) ; else { METHOD_57 ( VAR_251 -> VAR_252 . VAR_253 ) ; METHOD_58 ( VAR_254 -> VAR_255 . VAR_256 , ""%s({version:\'%s\',reqId:\'%s\',status:\'error\',errors:[{reason:\'not_modified\',message:\'Datanotmodified\'}]});"" , VAR_257 , VAR_258 , VAR_259 ) ; } } else if ( VAR_260 == VAR_261 ) METHOD_59 ( VAR_262 -> VAR_263 . VAR_264 , "");"" ) ; VAR_265 : METHOD_60 ( VAR_266 ) ; return VAR_267 ; }","VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_2 * VAR_3 ) { METHOD_1 ( VAR_4 , ""%llu:APIv1datawithURL\'%s\'"" , VAR_5 -> VAR_6 , VAR_7 ) ; TYPE_3 VAR_8 = 400 ; TYPE_4 * VAR_9 = VAR_10 ; METHOD_2 ( VAR_11 -> VAR_12 . VAR_13 ) ; TYPE_5 * VAR_14 = ""0.6"" , * VAR_15 = ""0"" , * VAR_16 = ""0"" , * VAR_17 = ""json"" , * VAR_18 = VAR_19 , * VAR_20 = VAR_21 ; TYPE_6 VAR_22 = 0 , VAR_23 = 0 ; TYPE_7 * VAR_24 = VAR_25 , * VAR_26 = VAR_27 , * VAR_28 = VAR_29 , * VAR_30 = VAR_31 , * VAR_32 = VAR_33 ; TYPE_8 VAR_34 = VAR_35 ; TYPE_9 VAR_36 = VAR_37 ; TYPE_10 VAR_38 = 0x00000000 ; while ( VAR_39 ) { TYPE_11 * VAR_40 = METHOD_3 ( & VAR_41 , ""?&"" ) ; if ( ! VAR_42 || ! * VAR_43 ) continue ; TYPE_12 * VAR_44 = METHOD_4 ( & VAR_45 , ""="" ) ; if ( ! VAR_46 || ! * VAR_47 ) continue ; if ( ! VAR_48 || ! * VAR_49 ) continue ; METHOD_5 ( VAR_50 , ""%llu:APIv1dataqueryparam\'%s\'withvalue\'%s\'"" , VAR_51 -> VAR_52 , VAR_53 , VAR_54 ) ; if ( ! METHOD_6 ( VAR_55 , ""chart"" ) ) VAR_56 = VAR_57 ; else if ( ! METHOD_7 ( VAR_58 , ""dimension"" ) || ! METHOD_8 ( VAR_59 , ""dim"" ) || ! METHOD_9 ( VAR_60 , ""dimensions"" ) || ! METHOD_10 ( VAR_61 , ""dims"" ) ) { if ( ! VAR_62 ) VAR_63 = METHOD_11 ( 100 ) ; METHOD_12 ( VAR_64 , ""|"" ) ; METHOD_13 ( VAR_65 , VAR_66 ) ; } else if ( ! METHOD_14 ( VAR_67 , ""after"" ) ) VAR_68 = VAR_69 ; else if ( ! METHOD_15 ( VAR_70 , ""before"" ) ) VAR_71 = VAR_72 ; else if ( ! METHOD_16 ( VAR_73 , ""points"" ) ) VAR_74 = VAR_75 ; else if ( ! METHOD_17 ( VAR_76 , ""gtime"" ) ) VAR_77 = VAR_78 ; else if ( ! METHOD_18 ( VAR_79 , ""group"" ) ) { VAR_80 = METHOD_19 ( VAR_81 , VAR_82 ) ; } else if ( ! METHOD_20 ( VAR_83 , ""format"" ) ) { VAR_84 = METHOD_21 ( VAR_85 ) ; } else if ( ! METHOD_22 ( VAR_86 , ""options"" ) ) { VAR_87 |= METHOD_23 ( VAR_88 ) ; } else if ( ! METHOD_24 ( VAR_89 , ""callback"" ) ) { VAR_90 = VAR_91 ; } else if ( ! METHOD_25 ( VAR_92 , ""filename"" ) ) { VAR_93 = VAR_94 ; } else if ( ! METHOD_26 ( VAR_95 , ""tqx"" ) ) { TYPE_13 * VAR_96 , * VAR_97 ; while ( VAR_98 ) { VAR_99 = METHOD_27 ( & VAR_100 , "";"" ) ; if ( ! VAR_101 || ! * VAR_102 ) continue ; VAR_103 = METHOD_28 ( & VAR_104 , "":"" ) ; if ( ! VAR_105 || ! * VAR_106 ) continue ; if ( ! VAR_107 || ! * VAR_108 ) continue ; if ( ! METHOD_29 ( VAR_109 , ""version"" ) ) VAR_110 = VAR_111 ; else if ( ! METHOD_30 ( VAR_112 , ""reqId"" ) ) VAR_113 = VAR_114 ; else if ( ! METHOD_31 ( VAR_115 , ""sig"" ) ) { VAR_116 = VAR_117 ; VAR_118 = METHOD_32 ( VAR_119 , VAR_120 , 0 ) ; } else if ( ! METHOD_33 ( VAR_121 , ""out"" ) ) { VAR_122 = VAR_123 ; VAR_124 = METHOD_34 ( VAR_125 ) ; } else if ( ! METHOD_35 ( VAR_126 , ""responseHandler"" ) ) VAR_127 = VAR_128 ; else if ( ! METHOD_36 ( VAR_129 , ""outFileName"" ) ) VAR_130 = VAR_131 ; } } } METHOD_61 ( VAR_206 ) ; METHOD_61 ( VAR_205 ) ; METHOD_61 ( VAR_259 ) ; METHOD_61 ( VAR_258 ) ; METHOD_61 ( VAR_257 ) ; METHOD_61 ( VAR_208 ) ; if ( ! VAR_132 || ! * VAR_133 ) { METHOD_37 ( VAR_134 -> VAR_135 . VAR_136 , ""Nochartidisgivenattherequest."" ) ; goto VAR_137 ; } TYPE_14 * VAR_138 = METHOD_38 ( VAR_139 , VAR_140 ) ; if ( ! VAR_141 ) VAR_142 = METHOD_39 ( VAR_143 , VAR_144 ) ; if ( ! VAR_145 ) { METHOD_40 ( VAR_146 -> VAR_147 . VAR_148 , ""Chartisnotfound:"" ) ; METHOD_41 ( VAR_149 -> VAR_150 . VAR_151 , VAR_152 ) ; VAR_153 = 404 ; goto VAR_154 ; } VAR_155 -> VAR_156 = METHOD_42 ( ) ; TYPE_15 TYPE_16 VAR_157 = ( VAR_158 && * VAR_159 ) ? METHOD_43 ( VAR_160 ) : 0 ; TYPE_17 TYPE_18 VAR_161 = ( VAR_162 && * VAR_163 ) ? METHOD_44 ( VAR_164 ) : 0 ; TYPE_19 VAR_165 = ( VAR_166 && * VAR_167 ) ? METHOD_45 ( VAR_168 ) : 0 ; TYPE_20 VAR_169 = ( VAR_170 && * VAR_171 ) ? METHOD_46 ( VAR_172 ) : 0 ; METHOD_47 ( VAR_173 , ""%llu:APIcommand\'data\'forchart\'%s\',dimensions\'%s\',after\'%lld\',before\'%lld\',points\'%d\',group\'%d\',format\'%u\',options\'0x%08x\'"" , VAR_174 -> VAR_175 , VAR_176 , ( VAR_177 ) ? METHOD_48 ( VAR_178 ) : """" , VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; if ( VAR_185 && * VAR_186 ) { METHOD_49 ( VAR_187 -> VAR_188 . VAR_189 , ""Content-Disposition:attachment;filename=\\""%s\\""\\r\\n"" , VAR_190 ) ; METHOD_50 ( VAR_191 , ""%llu:generatingoutfilenameheader:\'%s\'"" , VAR_192 -> VAR_193 , VAR_194 ) ; } if ( VAR_195 == VAR_196 ) { if ( VAR_197 == VAR_198 ) VAR_199 = ""google.visualization.Query.setResponse"" ; METHOD_51 ( VAR_200 , ""%llu:GOOGLEJSON/JSONP:version=\'%s\',reqId=\'%s\',sig=\'%s\',out=\'%s\',responseHandler=\'%s\',outFileName=\'%s\'"" , VAR_201 -> VAR_202 , VAR_203 , VAR_204 , VAR_205 , VAR_206 , VAR_207 , VAR_208 ) ; METHOD_52 ( VAR_209 -> VAR_210 . VAR_211 , ""%s({version:\'%s\',reqId:\'%s\',status:\'ok\',sig:\'%ld\',table:"" , VAR_212 , VAR_213 , VAR_214 , VAR_215 -> VAR_216 . VAR_217 ) ; } else if ( VAR_218 == VAR_219 ) { if ( VAR_220 == VAR_221 ) VAR_222 = ""callback"" ; METHOD_53 ( VAR_223 -> VAR_224 . VAR_225 , VAR_226 ) ; METHOD_54 ( VAR_227 -> VAR_228 . VAR_229 , ""("" ) ; } VAR_230 = METHOD_55 ( VAR_231 , VAR_232 -> VAR_233 . VAR_234 , VAR_235 , VAR_236 , VAR_237 , VAR_238 , VAR_239 , VAR_240 , VAR_241 , VAR_242 , & VAR_243 ) ; if ( VAR_244 == VAR_245 ) { if ( VAR_246 < VAR_247 ) METHOD_56 ( VAR_248 -> VAR_249 . VAR_250 , ""});"" ) ; else { METHOD_57 ( VAR_251 -> VAR_252 . VAR_253 ) ; METHOD_58 ( VAR_254 -> VAR_255 . VAR_256 , ""%s({version:\'%s\',reqId:\'%s\',status:\'error\',errors:[{reason:\'not_modified\',message:\'Datanotmodified\'}]});"" , VAR_257 , VAR_258 , VAR_259 ) ; } } else if ( VAR_260 == VAR_261 ) METHOD_59 ( VAR_262 -> VAR_263 . VAR_264 , "");"" ) ; VAR_265 : METHOD_60 ( VAR_266 ) ; return VAR_267 ; }",393
394,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * * VAR_0 , unsigned VAR_1 , TYPE_1 VAR_2 , enum VAR_3 VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) ; TYPE_2 TYPE_3 struct STRUCT_OR_UNION_2 * VAR_9 = METHOD_2 ( VAR_10 , VAR_11 , VAR_12 ) ; unsigned TYPE_4 VAR_13 ; unsigned VAR_14 ; if ( VAR_15 == VAR_16 ) { VAR_17 = 0 ; while ( VAR_18 < VAR_19 ) { TYPE_5 TYPE_6 struct STRUCT_OR_UNION_3 * VAR_20 = VAR_21 [ VAR_22 ] ; unsigned VAR_23 = 0 , VAR_24 ; if ( ! VAR_25 [ VAR_26 ] ) { ++ VAR_27 ; continue ; } TYPE_7 TYPE_8  if ( ! ( VAR_28 & VAR_29 ) ) {  for ( VAR_30 = 0 ; VAR_31 < VAR_32 ; ++ VAR_33 ) if ( VAR_34 ++ != VAR_35 [ VAR_36 + VAR_37 ] ) break ; if ( VAR_38 == VAR_39 ) VAR_40 = VAR_41 ; } if ( METHOD_3 ( VAR_42 [ VAR_43 ] ) != 1 ) METHOD_4 ( ""Erroneouspagecount.Leakingpages.\\n"" ) ; METHOD_5 ( VAR_44 [ VAR_45 ] , VAR_46 ) ; VAR_47 = 1 << VAR_48 ; while ( VAR_49 ) { VAR_50 [ VAR_51 ++ ] = VAR_52 ; -- VAR_53 ; } } return ; } VAR_54 = 0 ; TYPE_9 TYPE_10 if ( VAR_55 ) { unsigned VAR_56 , VAR_57 ; METHOD_6 ( & VAR_58 -> VAR_59 , VAR_60 ) ;  while ( VAR_61 < VAR_62 ) {  struct STRUCT_OR_UNION_4 * VAR_63 = VAR_64 [ VAR_65 ] ; unsigned VAR_66 ; if ( ! VAR_67 ) break ; for ( VAR_68 = 0 ; VAR_69 < VAR_70 ; ++ VAR_71 ) if ( VAR_72 ++ != VAR_73 [ VAR_74 + VAR_75 ] ) break ; if ( VAR_76 != VAR_77 ) break ; METHOD_7 ( & VAR_78 [ VAR_79 ] -> VAR_80 , & VAR_81 -> VAR_82 ) ; for ( VAR_83 = 0 ; VAR_84 < VAR_85 ; ++ VAR_86 ) VAR_87 [ VAR_88 ++ ] = VAR_89 ; VAR_90 -> VAR_91 ++ ; } VAR_92 = VAR_93 -> VAR_94 . VAR_95 ; VAR_96 /= VAR_97 ; if ( VAR_98 -> VAR_99 > VAR_100 ) VAR_101 = VAR_102 -> VAR_103 - VAR_104 ; else VAR_105 = 0 ; METHOD_8 ( & VAR_106 -> VAR_107 , VAR_108 ) ; if ( VAR_109 ) METHOD_9 ( VAR_110 , VAR_111 , VAR_112 ) ; } METHOD_10 ( & VAR_113 -> VAR_114 , VAR_115 ) ; while ( VAR_116 < VAR_117 ) { if ( VAR_118 [ VAR_119 ] ) { if ( METHOD_11 ( VAR_120 [ VAR_121 ] ) != 1 ) METHOD_12 ( ""Erroneouspagecount.Leakingpages.\\n"" ) ; METHOD_13 ( & VAR_122 [ VAR_123 ] -> VAR_124 , & VAR_125 -> VAR_126 ) ; VAR_127 [ VAR_128 ] = VAR_129 ; VAR_130 -> VAR_131 ++ ; } ++ VAR_132 ; } VAR_133 = 0 ; if ( VAR_134 -> VAR_135 > VAR_136 -> VAR_137 . VAR_138 ) { VAR_139 = VAR_140 -> VAR_141 - VAR_142 -> VAR_143 . VAR_144 ; if ( VAR_145 < VAR_146 ) VAR_147 = VAR_148 ; } METHOD_14 ( & VAR_149 -> VAR_150 , VAR_151 ) ; if ( VAR_152 ) METHOD_15 ( VAR_153 , VAR_154 , VAR_155 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * * VAR_0 , unsigned VAR_1 , TYPE_1 VAR_2 , enum VAR_3 VAR_4 ) { struct STRUCT_OR_UNION_1 * VAR_5 = METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) ; TYPE_2 TYPE_3 struct STRUCT_OR_UNION_2 * VAR_9 = METHOD_2 ( VAR_10 , VAR_11 , VAR_12 ) ; unsigned TYPE_4 VAR_13 ; unsigned VAR_14 ; if ( VAR_15 == VAR_16 ) { VAR_17 = 0 ; while ( ( VAR_154 - VAR_132 ) >= VAR_97 ) { struct STRUCT_OR_UNION_4 * VAR_63 = VAR_64 [ VAR_65 ] ; unsigned VAR_66 ; if ( ! VAR_67 ) break ; for ( VAR_68 = 0 ; VAR_69 < VAR_70 ; ++ VAR_71 ) if ( VAR_72 ++ != VAR_73 [ VAR_74 + VAR_75 ] ) break ; if ( VAR_76 != VAR_77 ) break ; METHOD_7 ( & VAR_78 [ VAR_79 ] -> VAR_80 , & VAR_81 -> VAR_82 ) ; for ( VAR_83 = 0 ; VAR_84 < VAR_85 ; ++ VAR_86 ) VAR_87 [ VAR_88 ++ ] = VAR_89 ; VAR_90 -> VAR_91 ++ ; } VAR_92 = VAR_93 -> VAR_94 . VAR_95 ; VAR_96 /= VAR_97 ; if ( VAR_98 -> VAR_99 > VAR_100 ) VAR_101 = VAR_102 -> VAR_103 - VAR_104 ; else VAR_105 = 0 ; METHOD_8 ( & VAR_106 -> VAR_107 , VAR_108 ) ; if ( VAR_109 ) METHOD_9 ( VAR_110 , VAR_111 , VAR_112 ) ; } METHOD_10 ( & VAR_113 -> VAR_114 , VAR_115 ) ; while ( VAR_116 < VAR_117 ) { if ( VAR_118 [ VAR_119 ] ) { if ( METHOD_11 ( VAR_120 [ VAR_121 ] ) != 1 ) METHOD_12 ( ""Erroneouspagecount.Leakingpages.\\n"" ) ; METHOD_13 ( & VAR_122 [ VAR_123 ] -> VAR_124 , & VAR_125 -> VAR_126 ) ; VAR_127 [ VAR_128 ] = VAR_129 ; VAR_130 -> VAR_131 ++ ; } ++ VAR_132 ; } VAR_133 = 0 ; if ( VAR_134 -> VAR_135 > VAR_136 -> VAR_137 . VAR_138 ) { VAR_139 = VAR_140 -> VAR_141 - VAR_142 -> VAR_143 . VAR_144 ; if ( VAR_145 < VAR_146 ) VAR_147 = VAR_148 ; } METHOD_14 ( & VAR_149 -> VAR_150 , VAR_151 ) ; if ( VAR_152 ) METHOD_15 ( VAR_153 , VAR_154 , VAR_155 ) ; }",394
395,"asmlinkage void bad_mode ( struct pt_regs * regs , int reason , unsigned int esr )  {  console_verbose ( ) ; pr_crit ( ""Badmodein%shandlerdetected,code0x%08x\\n"" , handler [ reason ] , esr ) ;  die ( ""Oops-badmode"" , regs , 0 ) ;  local_irq_disable ( ) ; panic ( ""badmode"" ) ; }","asmlinkage void bad_mode ( struct pt_regs * regs , int reason , unsigned int esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; console_verbose ( ) ; pr_crit ( ""Badmodein%shandlerdetected,code0x%08x\\n"" , handler [ reason ] , esr ) ; __show_regs ( regs ) ; info . si_signo = SIGILL ; info . si_errno = 0 ; info . si_code = ILL_ILLOPC ; info . si_addr = pc ; arm64_notify_die ( ""Oops-badmode"" , regs , & info , 0 ) ; }",395
396,"TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( ""ENABLEBT"" ) ; if ( VAR_0 ) { METHOD_2 ( ""Bluetoothisalreadyenabled"" ) ; return ; }  VAR_1 = VAR_2 -> METHOD_3 ( ) ;  METHOD_4 ( VAR_3 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( ""ENABLEBT"" ) ; if ( VAR_0 ) { METHOD_2 ( ""Bluetoothisalreadyenabled"" ) ; return ; } VAR_1 = VAR_2 -> METHOD_3 ( VAR_4 ) ; METHOD_4 ( VAR_3 ) ; }",396
397,"static TYPE_0  METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 )   {  if ( VAR_4 > VAR_5 ) return 0 ; return ( METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) == 0 ? 1 : 0 ) ; }","static TYPE_0 METHOD_0 ( TYPE_5 * VAR_9 , const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 > VAR_5 ) return 0 ; return ( METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) == 0 ? 1 : 0 ) ; }",397
398,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , const struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_5 -> VAR_6 ) ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; const struct STRUCT_OR_UNION_8 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; struct STRUCT_OR_UNION_10 VAR_16 ; struct STRUCT_OR_UNION_11 VAR_17 ; struct STRUCT_OR_UNION_12 VAR_18 ; struct STRUCT_OR_UNION_13 VAR_19 = { 0 } ; struct STRUCT_OR_UNION_14 VAR_20 ; TYPE_4 VAR_21 = 0 ; TYPE_5 VAR_22 = 0 ; TYPE_6 VAR_23 ; TYPE_7 VAR_24 = 0 ; TYPE_8 VAR_25 = METHOD_3 ( STRUCT_OR_UNION_15 , VAR_26 -> VAR_27 ) ; if ( ( TYPE_9 * ) VAR_28 < VAR_29 -> VAR_30 || ( METHOD_4 ( VAR_31 ) + sizeof ( * VAR_32 ) ) > METHOD_5 ( VAR_33 ) ) return ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 ) ; if ( METHOD_7 ( STRUCT_OR_UNION_16 , & VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , 0 ) || METHOD_8 ( STRUCT_OR_UNION_17 , VAR_41 -> VAR_42 , & VAR_43 -> VAR_44 ) ) VAR_45 = & VAR_46 -> VAR_47 ; if ( VAR_48 & VAR_49 || VAR_50 -> VAR_51 != VAR_52 ) { if ( VAR_53 != VAR_54 && ! ( VAR_55 == VAR_56 && VAR_57 == VAR_58 && ( METHOD_9 ( VAR_59 , VAR_60 ) ) ) ) return ; VAR_61 = VAR_62 ; } VAR_63 = METHOD_10 ( & VAR_64 -> VAR_65 ) ; if ( METHOD_11 ( VAR_66 ) ) VAR_67 = VAR_68 -> VAR_69 -> VAR_70 ;  else   VAR_71 = METHOD_12 ( METHOD_13 ( VAR_72 ) -> VAR_73 ) ;  if ( ( VAR_74 == VAR_75 ) || ( VAR_76 & VAR_77 ) ) { METHOD_14 ( ""icmp6_send:addr_any/mcastsource[%pI6c>%pI6c]\\n"" , & VAR_78 -> VAR_79 , & VAR_80 -> VAR_81 ) ; return ; } if ( METHOD_15 ( VAR_82 ) ) { METHOD_16 ( ""icmp6_send:noreplytoicmperror[%pI6c>%pI6c]\\n"" , & VAR_83 -> VAR_84 , & VAR_85 -> VAR_86 ) ; return ; } METHOD_17 ( VAR_87 ) ; METHOD_18 ( & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = VAR_92 ; VAR_93 . VAR_94 = VAR_95 -> VAR_96 ; if ( VAR_97 ) VAR_98 = VAR_99 ; if ( VAR_100 ) VAR_101 . VAR_102 = * VAR_103 ; VAR_104 . VAR_105 = VAR_106 ; VAR_107 . VAR_108 = VAR_109 ; VAR_110 . VAR_111 = VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; METHOD_19 ( VAR_116 , METHOD_20 ( & VAR_117 ) ) ; VAR_118 = METHOD_21 ( STRUCT_OR_UNION_18 ) ; if ( ! VAR_119 ) return ; VAR_120 -> VAR_121 = VAR_122 ; VAR_123 = METHOD_22 ( VAR_124 ) ; if ( ! METHOD_23 ( VAR_125 , VAR_126 , & VAR_127 ) ) goto VAR_128 ; VAR_129 . VAR_130 = VAR_131 ; VAR_132 . VAR_133 = VAR_134 ; VAR_135 . VAR_136 = 0 ; VAR_137 . VAR_138 = METHOD_24 ( VAR_139 ) ; if ( ! VAR_140 . VAR_141 && METHOD_25 ( & VAR_142 . VAR_143 ) ) VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; else if ( ! VAR_148 . VAR_149 ) VAR_150 . VAR_151 = VAR_152 -> VAR_153 ; VAR_154 . VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = METHOD_26 ( VAR_160 . VAR_161 , VAR_162 . VAR_163 ) ; VAR_164 = METHOD_27 ( STRUCT_OR_UNION_19 , VAR_165 , VAR_166 , & VAR_167 ) ; if ( METHOD_28 ( VAR_168 ) ) goto VAR_169 ; VAR_170 . VAR_171 = METHOD_29 ( VAR_172 , & VAR_173 , VAR_174 ) ; VAR_175 . VAR_176 = VAR_177 -> VAR_178 ; VAR_179 . VAR_180 = VAR_181 ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 = METHOD_30 ( VAR_187 ) ; VAR_188 . VAR_189 = VAR_190 ; VAR_191 = VAR_192 -> VAR_193 - VAR_194 . VAR_195 ; VAR_196 = min_t ( unsigned TYPE_10 , VAR_197 , VAR_198 - sizeof ( struct STRUCT_OR_UNION_20 ) - sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( VAR_199 < 0 ) { METHOD_31 ( ""icmp:lenproblem[%pI6c>%pI6c]\\n"" , & VAR_200 -> VAR_201 , & VAR_202 -> VAR_203 ) ; goto VAR_204 ; } METHOD_32 ( ) ; VAR_205 = METHOD_33 ( VAR_206 -> VAR_207 ) ; VAR_208 = METHOD_34 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 + sizeof ( struct STRUCT_OR_UNION_22 ) , sizeof ( struct STRUCT_OR_UNION_23 ) , & VAR_213 , & VAR_214 , ( struct STRUCT_OR_UNION_24 * ) VAR_215 , VAR_216 , & VAR_217 ) ; if ( VAR_218 ) { METHOD_35 ( STRUCT_OR_UNION_25 , VAR_219 , VAR_220 ) ; METHOD_36 ( VAR_221 ) ; } else { VAR_222 = METHOD_37 ( VAR_223 , & VAR_224 , & VAR_225 , VAR_226 + sizeof ( struct STRUCT_OR_UNION_26 ) ) ; } METHOD_38 ( ) ; VAR_227 : METHOD_39 ( VAR_228 ) ; VAR_229 : METHOD_40 ( VAR_230 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , const struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_5 -> VAR_6 ) ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; const struct STRUCT_OR_UNION_8 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; struct STRUCT_OR_UNION_10 VAR_16 ; struct STRUCT_OR_UNION_11 VAR_17 ; struct STRUCT_OR_UNION_12 VAR_18 ; struct STRUCT_OR_UNION_13 VAR_19 = { 0 } ; struct STRUCT_OR_UNION_14 VAR_20 ; TYPE_4 VAR_21 = 0 ; TYPE_5 VAR_22 = 0 ; TYPE_6 VAR_23 ; TYPE_7 VAR_24 = 0 ; TYPE_8 VAR_25 = METHOD_3 ( STRUCT_OR_UNION_15 , VAR_26 -> VAR_27 ) ; if ( ( TYPE_9 * ) VAR_28 < VAR_29 -> VAR_30 || ( METHOD_4 ( VAR_31 ) + sizeof ( * VAR_32 ) ) > METHOD_5 ( VAR_33 ) ) return ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 ) ; if ( METHOD_7 ( STRUCT_OR_UNION_16 , & VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , 0 ) || METHOD_8 ( STRUCT_OR_UNION_17 , VAR_41 -> VAR_42 , & VAR_43 -> VAR_44 ) ) VAR_45 = & VAR_46 -> VAR_47 ; if ( VAR_48 & VAR_49 || VAR_50 -> VAR_51 != VAR_52 ) { if ( VAR_53 != VAR_54 && ! ( VAR_55 == VAR_56 && VAR_57 == VAR_58 && ( METHOD_9 ( VAR_59 , VAR_60 ) ) ) ) return ; VAR_61 = VAR_62 ; } VAR_63 = METHOD_10 ( & VAR_64 -> VAR_65 ) ; if ( METHOD_11 ( VAR_66 ) ) VAR_67 = VAR_68 -> VAR_69 -> VAR_70 ; else { VAR_228 = METHOD_13 ( VAR_206 ) ; VAR_71 = METHOD_12 ( VAR_228 ? VAR_228 -> VAR_207 : VAR_206 -> VAR_207 ) ; } if ( ( VAR_74 == VAR_75 ) || ( VAR_76 & VAR_77 ) ) { METHOD_14 ( ""icmp6_send:addr_any/mcastsource[%pI6c>%pI6c]\\n"" , & VAR_78 -> VAR_79 , & VAR_80 -> VAR_81 ) ; return ; } if ( METHOD_15 ( VAR_82 ) ) { METHOD_16 ( ""icmp6_send:noreplytoicmperror[%pI6c>%pI6c]\\n"" , & VAR_83 -> VAR_84 , & VAR_85 -> VAR_86 ) ; return ; } METHOD_17 ( VAR_87 ) ; METHOD_18 ( & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = VAR_92 ; VAR_93 . VAR_94 = VAR_95 -> VAR_96 ; if ( VAR_97 ) VAR_98 = VAR_99 ; if ( VAR_100 ) VAR_101 . VAR_102 = * VAR_103 ; VAR_104 . VAR_105 = VAR_106 ; VAR_107 . VAR_108 = VAR_109 ; VAR_110 . VAR_111 = VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; METHOD_19 ( VAR_116 , METHOD_20 ( & VAR_117 ) ) ; VAR_118 = METHOD_21 ( STRUCT_OR_UNION_18 ) ; if ( ! VAR_119 ) return ; VAR_120 -> VAR_121 = VAR_122 ; VAR_123 = METHOD_22 ( VAR_124 ) ; if ( ! METHOD_23 ( VAR_125 , VAR_126 , & VAR_127 ) ) goto VAR_128 ; VAR_129 . VAR_130 = VAR_131 ; VAR_132 . VAR_133 = VAR_134 ; VAR_135 . VAR_136 = 0 ; VAR_137 . VAR_138 = METHOD_24 ( VAR_139 ) ; if ( ! VAR_140 . VAR_141 && METHOD_25 ( & VAR_142 . VAR_143 ) ) VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; else if ( ! VAR_148 . VAR_149 ) VAR_150 . VAR_151 = VAR_152 -> VAR_153 ; VAR_154 . VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = METHOD_26 ( VAR_160 . VAR_161 , VAR_162 . VAR_163 ) ; VAR_164 = METHOD_27 ( STRUCT_OR_UNION_19 , VAR_165 , VAR_166 , & VAR_167 ) ; if ( METHOD_28 ( VAR_168 ) ) goto VAR_169 ; VAR_170 . VAR_171 = METHOD_29 ( VAR_172 , & VAR_173 , VAR_174 ) ; VAR_175 . VAR_176 = VAR_177 -> VAR_178 ; VAR_179 . VAR_180 = VAR_181 ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 = METHOD_30 ( VAR_187 ) ; VAR_188 . VAR_189 = VAR_190 ; VAR_191 = VAR_192 -> VAR_193 - VAR_194 . VAR_195 ; VAR_196 = min_t ( unsigned TYPE_10 , VAR_197 , VAR_198 - sizeof ( struct STRUCT_OR_UNION_20 ) - sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( VAR_199 < 0 ) { METHOD_31 ( ""icmp:lenproblem[%pI6c>%pI6c]\\n"" , & VAR_200 -> VAR_201 , & VAR_202 -> VAR_203 ) ; goto VAR_204 ; } METHOD_32 ( ) ; VAR_205 = METHOD_33 ( VAR_206 -> VAR_207 ) ; VAR_208 = METHOD_34 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 + sizeof ( struct STRUCT_OR_UNION_22 ) , sizeof ( struct STRUCT_OR_UNION_23 ) , & VAR_213 , & VAR_214 , ( struct STRUCT_OR_UNION_24 * ) VAR_215 , VAR_216 , & VAR_217 ) ; if ( VAR_218 ) { METHOD_35 ( STRUCT_OR_UNION_25 , VAR_219 , VAR_220 ) ; METHOD_36 ( VAR_221 ) ; } else { VAR_222 = METHOD_37 ( VAR_223 , & VAR_224 , & VAR_225 , VAR_226 + sizeof ( struct STRUCT_OR_UNION_26 ) ) ; } METHOD_38 ( ) ; VAR_227 : METHOD_39 ( VAR_228 ) ; VAR_229 : METHOD_40 ( VAR_230 ) ; }",398
399," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 )  { if ( VAR_2 -> VAR_3 > 0 ) {  if ( ( VAR_4 -> VAR_5 + VAR_6 -> VAR_7 ) > METHOD_1 ( VAR_8 ) )  return - 1 ; VAR_9 -> VAR_10 = ( TYPE_3 ) METHOD_2 ( VAR_11 -> VAR_12 ) ; if ( ! VAR_13 -> VAR_14 ) return - 1 ; METHOD_3 ( VAR_15 , VAR_16 -> VAR_17 ) ; METHOD_4 ( VAR_18 , VAR_19 -> VAR_20 , VAR_21 -> VAR_22 ) ; } return 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { if ( VAR_2 -> VAR_3 > 0 ) { if ( ( VAR_4 -> VAR_5 + VAR_6 -> VAR_7 ) > METHOD_1 ( VAR_8 ) ) return - 1 ; VAR_9 -> VAR_10 = ( TYPE_3 ) METHOD_2 ( VAR_11 -> VAR_12 ) ; if ( ! VAR_13 -> VAR_14 ) return - 1 ; METHOD_3 ( VAR_15 , VAR_16 -> VAR_17 ) ; METHOD_4 ( VAR_18 , VAR_19 -> VAR_20 , VAR_21 -> VAR_22 ) ; } return 1 ; }",399
400,"static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 -> VAR_2 ) ; struct STRUCT_OR_UNION_0 VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; if ( ! VAR_7 -> VAR_8 ) { METHOD_2 ( VAR_9 , ""Nofilesetfortrack_file%s-removing"" , VAR_10 -> VAR_11 ) ; METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 -> VAR_15 -> VAR_16 ) ; return ; } if ( VAR_17 == VAR_18 ) return ; VAR_19 = STRUCT_OR_UNION_1 ( VAR_20 -> VAR_21 , & VAR_22 ) ; if ( ! VAR_23 ) { if ( VAR_24 == VAR_25 ) { return ; } if ( ( VAR_26 . VAR_27 & VAR_28 ) != VAR_29 ) { METHOD_4 ( VAR_30 , ""Cannotinitialisetrackfile%s-itisnotaregularfile"" , VAR_31 -> VAR_32 ) ; return ; } if ( VAR_33 ) return ; } if ( ! METHOD_5 ( VAR_34 , & VAR_35 ) ) {  if ( ( VAR_36 = METHOD_6 ( VAR_37 -> VAR_38 , ""w"" ) ) ) {  METHOD_7 ( VAR_39 , ""%d\\n"" , VAR_40 ) ; METHOD_8 ( VAR_41 ) ; } else METHOD_9 ( VAR_42 , ""Unabletoinitialisetrackfile%s"" , VAR_43 -> VAR_44 ) ; } }","static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 -> VAR_2 ) ; struct STRUCT_OR_UNION_0 VAR_3 ; VAR_4 * VAR_5 ; TYPE_3 VAR_6 ; if ( ! VAR_7 -> VAR_8 ) { METHOD_2 ( VAR_9 , ""Nofilesetfortrack_file%s-removing"" , VAR_10 -> VAR_11 ) ; METHOD_3 ( VAR_12 -> VAR_13 , VAR_14 -> VAR_15 -> VAR_16 ) ; return ; } if ( VAR_17 == VAR_18 ) return ; VAR_19 = STRUCT_OR_UNION_1 ( VAR_20 -> VAR_21 , & VAR_22 ) ; if ( ! VAR_23 ) { if ( VAR_24 == VAR_25 ) { return ; } if ( ( VAR_26 . VAR_27 & VAR_28 ) != VAR_29 ) { METHOD_4 ( VAR_30 , ""Cannotinitialisetrackfile%s-itisnotaregularfile"" , VAR_31 -> VAR_32 ) ; return ; } if ( VAR_33 ) return ; } if ( ! METHOD_5 ( VAR_34 , & VAR_35 ) ) { if ( ( VAR_36 = METHOD_6 ( VAR_37 -> VAR_38 , ""w"" ) ) ) { METHOD_7 ( VAR_39 , ""%d\\n"" , VAR_40 ) ; METHOD_8 ( VAR_41 ) ; } else METHOD_9 ( VAR_42 , ""Unabletoinitialisetrackfile%s"" , VAR_43 -> VAR_44 ) ; } }",400
401,"TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 )  { struct STRUCT_OR_UNION_0 * VAR_3 ;  VAR_4 = ( struct STRUCT_OR_UNION_1 * ) * VAR_5 ;   * VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 ) ;  * VAR_9 = VAR_10 -> VAR_11 ; * VAR_12 = VAR_13 -> VAR_14 - 2 ;  return ( VAR_15 -> VAR_16 ) ;  }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 ; VAR_4 = ( struct STRUCT_OR_UNION_1 * ) VAR_18 ; * VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 ) ; * VAR_17 = VAR_15 -> VAR_16 ; * VAR_9 = VAR_10 -> VAR_11 ; * VAR_12 = VAR_13 -> VAR_14 - 2 ; if ( ( VAR_15 -> VAR_14 + 4 ) > VAR_19 ) { return - 1 ; } return ( VAR_15 -> VAR_16 ) ; }",401
402,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 ; struct STRUCT_OR_UNION_4 VAR_2 ; TYPE_2 VAR_3 [ 32 ] ; TYPE_3 VAR_4 = 0 ; VAR_5 = STRUCT_OR_UNION_5 -> VAR_6 ;  METHOD_1 ( & VAR_7 -> VAR_8 ) ;  if ( VAR_9 -> VAR_10 ) { METHOD_2 ( VAR_11 -> VAR_12 ) ; VAR_13 -> VAR_14 = VAR_15 ; } if ( METHOD_3 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } METHOD_4 ( VAR_22 , ""application%i"" , VAR_23 -> VAR_24 ) ; if ( VAR_25 . VAR_26 . VAR_27 != VAR_28 ) VAR_29 . VAR_30 . VAR_31 = VAR_32 ; VAR_33 = METHOD_5 ( & VAR_34 -> VAR_35 , VAR_36 , & VAR_37 . VAR_38 , VAR_39 -> VAR_40 ) ; if ( VAR_41 < 0 ) goto VAR_42 ; METHOD_6 ( VAR_43 -> VAR_44 ) ; VAR_45 -> VAR_46 = VAR_47 ; METHOD_7 ( VAR_48 -> VAR_49 ) ; VAR_50 -> VAR_51 = VAR_52 ; if ( VAR_53 -> VAR_54 ) { VAR_55 -> VAR_56 = METHOD_8 ( VAR_57 -> VAR_58 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_59 ) ; if ( VAR_60 -> VAR_61 == VAR_62 ) VAR_63 = - VAR_64 ; } else { VAR_65 -> VAR_66 = METHOD_9 ( VAR_67 -> VAR_68 * sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_69 ) ; if ( VAR_70 -> VAR_71 == VAR_72 ) VAR_73 = - VAR_74 ; } if ( VAR_75 < 0 ) { METHOD_10 ( VAR_76 -> VAR_77 ) ; VAR_78 -> VAR_79 = VAR_80 ; } else { VAR_81 -> VAR_82 -> VAR_83 |= VAR_84 ; VAR_85 -> VAR_86 -> VAR_87 = VAR_88 -> VAR_89 ? VAR_90 : VAR_91 ; VAR_92 -> VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 -> VAR_98 = ( TYPE_4 * ) VAR_99 ; } VAR_100 :  METHOD_11 ( & VAR_101 -> VAR_102 ) ;  return VAR_103 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 ; struct STRUCT_OR_UNION_4 VAR_2 ; TYPE_2 VAR_3 [ 32 ] ; TYPE_3 VAR_4 = 0 ; VAR_5 = STRUCT_OR_UNION_5 -> VAR_6 ; METHOD_1 ( & VAR_7 -> VAR_8 ) ; if ( VAR_9 -> VAR_10 ) { METHOD_2 ( VAR_11 -> VAR_12 ) ; VAR_13 -> VAR_14 = VAR_15 ; } if ( METHOD_3 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } METHOD_4 ( VAR_22 , ""application%i"" , VAR_23 -> VAR_24 ) ; if ( VAR_25 . VAR_26 . VAR_27 != VAR_28 ) VAR_29 . VAR_30 . VAR_31 = VAR_32 ; VAR_33 = METHOD_5 ( & VAR_34 -> VAR_35 , VAR_36 , & VAR_37 . VAR_38 , VAR_39 -> VAR_40 ) ; if ( VAR_41 < 0 ) goto VAR_42 ; METHOD_6 ( VAR_43 -> VAR_44 ) ; VAR_45 -> VAR_46 = VAR_47 ; METHOD_7 ( VAR_48 -> VAR_49 ) ; VAR_50 -> VAR_51 = VAR_52 ; if ( VAR_53 -> VAR_54 ) { VAR_55 -> VAR_56 = METHOD_8 ( VAR_57 -> VAR_58 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_59 ) ; if ( VAR_60 -> VAR_61 == VAR_62 ) VAR_63 = - VAR_64 ; } else { VAR_65 -> VAR_66 = METHOD_9 ( VAR_67 -> VAR_68 * sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_69 ) ; if ( VAR_70 -> VAR_71 == VAR_72 ) VAR_73 = - VAR_74 ; } if ( VAR_75 < 0 ) { METHOD_10 ( VAR_76 -> VAR_77 ) ; VAR_78 -> VAR_79 = VAR_80 ; } else { VAR_81 -> VAR_82 -> VAR_83 |= VAR_84 ; VAR_85 -> VAR_86 -> VAR_87 = VAR_88 -> VAR_89 ? VAR_90 : VAR_91 ; VAR_92 -> VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 -> VAR_98 = ( TYPE_4 * ) VAR_99 ; } VAR_100 : return VAR_103 ; }",402
403,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ VAR_3 ] , VAR_4 [ VAR_5 ] , VAR_6 [ VAR_7 ] , VAR_8 [ VAR_9 ] ; TYPE_4 * VAR_10 ; TYPE_5 * VAR_11 ; TYPE_6 * VAR_12 , VAR_13 , * VAR_14 , * VAR_15 , VAR_16 , * VAR_17 ; TYPE_7 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_8 VAR_23 ; TYPE_9 * VAR_24 ; register TYPE_10 VAR_25 , VAR_26 ; register TYPE_11 * VAR_27 ; register unsigned TYPE_12 * VAR_28 ; TYPE_13 VAR_29 , VAR_30 , VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 , VAR_43 , VAR_44 ; TYPE_14 VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 ; unsigned TYPE_15 * VAR_51 ; unsigned TYPE_16 VAR_52 , VAR_53 ; METHOD_1 ( VAR_54 != ( const TYPE_17 * ) VAR_55 ) ; METHOD_2 ( VAR_56 -> VAR_57 == VAR_58 ) ; if ( VAR_59 -> VAR_60 != VAR_61 ) ( TYPE_18 ) METHOD_3 ( VAR_62 , METHOD_4 ( ) , ""%s"" , VAR_63 -> VAR_64 ) ; METHOD_5 ( VAR_65 != ( TYPE_19 * ) VAR_66 ) ; METHOD_6 ( VAR_67 -> VAR_68 == VAR_69 ) ; VAR_70 = METHOD_7 ( VAR_71 , VAR_72 ) ; VAR_73 = METHOD_8 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 ) ; if ( VAR_78 == VAR_79 ) { VAR_80 = METHOD_9 ( VAR_81 ) ; return ( ( TYPE_20 * ) VAR_82 ) ; } VAR_83 -> VAR_84 = 8UL ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 = ( TYPE_21 * ) METHOD_10 ( sizeof ( * VAR_89 ) ) ; if ( VAR_90 == ( TYPE_22 * ) VAR_91 ) METHOD_11 ( VAR_92 , ""MemoryAllocationFailed"" ) ; ( TYPE_23 ) METHOD_12 ( VAR_93 , 0 , sizeof ( * VAR_94 ) ) ; VAR_95 = METHOD_13 ( VAR_96 , 128 , ( unsigned TYPE_24 * ) VAR_97 ) ; if ( VAR_98 != 128 ) METHOD_14 ( VAR_99 , ""ImproperImageHeader"" ) ; VAR_100 = METHOD_15 ( VAR_101 , 4 , ( unsigned TYPE_25 * ) VAR_102 ) ; if ( ( VAR_103 != 4 ) || ( METHOD_16 ( VAR_104 , ""DICM"" , 4 ) != 0 ) ) { VAR_105 = METHOD_17 ( VAR_106 , 0L , VAR_107 ) ; if ( VAR_108 < 0 ) METHOD_18 ( VAR_109 , ""ImproperImageHeader"" ) ; } ( TYPE_26 ) METHOD_19 ( VAR_110 , ""MONOCHROME1"" , VAR_111 ) ; VAR_112 = 8 ; VAR_113 = 1 ; VAR_114 = VAR_115 ; VAR_116 = ( unsigned TYPE_27 * ) VAR_117 ; VAR_118 = 8 ; VAR_119 = 0 ; VAR_120 [ 2 ] = '\\0' ; VAR_121 = VAR_122 ; VAR_123 = 0 ; VAR_124 = ( TYPE_28 * ) VAR_125 ; VAR_126 = ( TYPE_29 * ) VAR_127 ; VAR_128 = ( TYPE_30 * ) VAR_129 ; VAR_130 = ( TYPE_31 * ) VAR_131 ; VAR_132 = 0 ; VAR_133 = 255UL ; VAR_134 = 0xffff ; VAR_135 = 1 ; VAR_136 = 0 ; VAR_137 = 1 ; VAR_138 = 1 ; VAR_139 = ( TYPE_32 * ) VAR_140 ; VAR_141 = VAR_142 ; VAR_143 = ( ~ 0UL ) ; VAR_144 = 0 ; VAR_145 = VAR_146 ; VAR_147 = VAR_148 ; VAR_149 = 0 ; VAR_150 = 0 ; VAR_151 = 0 ; for ( VAR_152 = 0 ; ( VAR_153 != 0x7FE0 ) || ( VAR_154 != 0x0010 ) || ( VAR_155 != VAR_156 ) ; ) { VAR_157 -> VAR_158 = ( TYPE_33 ) METHOD_20 ( VAR_159 ) ; VAR_160 = METHOD_21 ( VAR_161 ) ; VAR_162 = METHOD_22 ( VAR_163 ) ; if ( ( VAR_164 != 0x0002 ) && ( VAR_165 -> VAR_166 == VAR_167 ) ) { VAR_168 = ( unsigned TYPE_34 ) ( ( VAR_169 << 8 ) | ( ( VAR_170 >> 8 ) & 0xFF ) ) ; VAR_171 = ( unsigned TYPE_35 ) ( ( VAR_172 << 8 ) | ( ( VAR_173 >> 8 ) & 0xFF ) ) ; } VAR_174 = 0 ; for ( VAR_175 = 0 ; VAR_176 [ VAR_177 ] . VAR_178 < 0xffff ; VAR_179 ++ ) if ( ( VAR_180 == VAR_181 [ VAR_182 ] . VAR_183 ) && ( VAR_184 == VAR_185 [ VAR_186 ] . VAR_187 ) ) break ; ( TYPE_36 ) METHOD_23 ( VAR_188 , VAR_189 [ VAR_190 ] . VAR_191 , VAR_192 ) ; VAR_193 = METHOD_24 ( VAR_194 , 2 , ( unsigned TYPE_37 * ) VAR_195 ) ; if ( VAR_196 != 2 ) METHOD_25 ( VAR_197 , ""ImproperImageHeader"" ) ; if ( ( VAR_198 == VAR_199 ) && ( VAR_200 != 0x0002 ) ) VAR_201 = ( METHOD_26 ( ( unsigned TYPE_38 ) * VAR_202 ) != VAR_203 ) && ( METHOD_27 ( ( unsigned TYPE_39 ) * ( VAR_204 + 1 ) ) != VAR_205 ) ? VAR_206 : VAR_207 ; VAR_208 = ( ( VAR_209 == 0x0002 ) && ( VAR_210 == VAR_211 ) ) || ( VAR_212 != VAR_213 ) ? VAR_214 : VAR_215 ; if ( ( VAR_216 != VAR_217 ) && ( METHOD_28 ( VAR_218 , ""xs"" , 2 ) == 0 ) ) ( TYPE_40 ) METHOD_29 ( VAR_219 , VAR_220 , VAR_221 ) ; if ( ( VAR_222 == VAR_223 ) || ( METHOD_30 ( VAR_224 , ""!!"" , 2 ) == 0 ) ) { VAR_225 = METHOD_31 ( VAR_226 , ( TYPE_41 ) - 2 , VAR_227 ) ; if ( VAR_228 < 0 ) METHOD_32 ( VAR_229 , ""ImproperImageHeader"" ) ; VAR_230 = 4 ; } else { VAR_231 = 2 ; if ( ( METHOD_33 ( VAR_232 , ""OB"" , 2 ) == 0 ) || ( METHOD_34 ( VAR_233 , ""UN"" , 2 ) == 0 ) || ( METHOD_35 ( VAR_234 , ""OW"" , 2 ) == 0 ) || ( METHOD_36 ( VAR_235 , ""SQ"" , 2 ) == 0 ) ) { ( TYPE_42 ) METHOD_37 ( VAR_236 ) ; VAR_237 = 4 ; } } VAR_238 = 0 ; if ( VAR_239 == 4 ) { if ( VAR_240 == 0x0002 ) VAR_241 = METHOD_38 ( VAR_242 ) ; else VAR_243 = METHOD_39 ( VAR_244 ) ; } else if ( VAR_245 == 2 ) { if ( VAR_246 == 0x0002 ) VAR_247 = METHOD_40 ( VAR_248 ) ; else VAR_249 = METHOD_41 ( VAR_250 ) ; } VAR_251 = 0 ; VAR_252 = 1 ; if ( VAR_253 != 0 ) { if ( ( METHOD_42 ( VAR_254 , ""SS"" , 2 ) == 0 ) || ( METHOD_43 ( VAR_255 , ""US"" , 2 ) == 0 ) ) VAR_256 = 2 ; else if ( ( METHOD_44 ( VAR_257 , ""UL"" , 2 ) == 0 ) || ( METHOD_45 ( VAR_258 , ""SL"" , 2 ) == 0 ) || ( METHOD_46 ( VAR_259 , ""FL"" , 2 ) == 0 ) ) VAR_260 = 4 ; else if ( METHOD_47 ( VAR_261 , ""FD"" , 2 ) != 0 ) VAR_262 = 1 ; else VAR_263 = 8 ; if ( VAR_264 != ~ 0 ) VAR_265 = ( TYPE_43 ) VAR_266 / VAR_267 ; else { VAR_268 = 0 ; VAR_269 = 0 ; } } if ( VAR_270 -> VAR_271 != VAR_272 ) { if ( VAR_273 == VAR_274 ) VAR_275 [ 0 ] = '\\0' ; for ( VAR_276 = 0 ; VAR_277 [ VAR_278 ] . VAR_279 != ( TYPE_44 * ) VAR_280 ; VAR_281 ++ ) if ( ( VAR_282 == VAR_283 [ VAR_284 ] . VAR_285 ) && ( VAR_286 == VAR_287 [ VAR_288 ] . VAR_289 ) ) break ; ( TYPE_45 ) METHOD_48 ( VAR_290 , ""0x%04lX%4ld%s-%s(0x%04lx,0x%04lx)"" , ( unsigned TYPE_46 ) VAR_291 -> VAR_292 , ( TYPE_47 ) VAR_293 , VAR_294 , VAR_295 , ( unsigned TYPE_48 ) VAR_296 , ( unsigned TYPE_49 ) VAR_297 ) ; if ( VAR_298 [ VAR_299 ] . VAR_300 != ( TYPE_50 * ) VAR_301 ) ( TYPE_51 ) METHOD_49 ( VAR_302 , ""%s"" , VAR_303 [ VAR_304 ] . VAR_305 ) ; ( TYPE_52 ) METHOD_50 ( VAR_306 , "":"" ) ; } if ( ( VAR_307 == VAR_308 ) && ( VAR_309 == 0x7FE0 ) && ( VAR_310 == 0x0010 ) ) { if ( VAR_311 -> VAR_312 != VAR_313 ) ( TYPE_53 ) METHOD_51 ( VAR_314 , ""\\n"" ) ; break ; } VAR_315 = ( unsigned TYPE_54 * ) VAR_316 ; if ( ( VAR_317 == 1 ) && ( VAR_318 == 1 ) ) VAR_319 = METHOD_52 ( VAR_320 ) ; else if ( ( VAR_321 == 1 ) && ( VAR_322 == 2 ) ) { if ( VAR_323 == 0x0002 ) VAR_324 = METHOD_53 ( VAR_325 ) ; else VAR_326 = METHOD_54 ( VAR_327 ) ; } else if ( ( VAR_328 == 1 ) && ( VAR_329 == 4 ) ) { if ( VAR_330 == 0x0002 ) VAR_331 = METHOD_55 ( VAR_332 ) ; else VAR_333 = METHOD_56 ( VAR_334 ) ; } else if ( ( VAR_335 != 0 ) && ( VAR_336 != 0 ) ) { if ( ~ VAR_337 >= 1 ) VAR_338 = ( unsigned TYPE_55 * ) METHOD_57 ( VAR_339 + 1 , VAR_340 * sizeof ( * VAR_341 ) ) ; if ( VAR_342 == ( unsigned TYPE_56 * ) VAR_343 ) METHOD_58 ( VAR_344 , ""MemoryAllocationFailed"" ) ; VAR_345 = METHOD_59 ( VAR_346 , ( TYPE_57 ) VAR_347 * VAR_348 , VAR_349 ) ; if ( VAR_350 != ( TYPE_58 ) ( VAR_351 * VAR_352 ) ) { if ( VAR_353 -> VAR_354 != VAR_355 ) ( TYPE_59 ) METHOD_60 ( VAR_356 , ""count=%dquantum=%d"" ""length=%dgroup=%d\\n"" , ( TYPE_60 ) VAR_357 , ( TYPE_61 ) VAR_358 , ( TYPE_62 ) VAR_359 , ( TYPE_63 ) VAR_360 ) ; METHOD_61 ( VAR_361 , ""InsufficientImageDataInFile"" ) ; } VAR_362 [ VAR_363 * VAR_364 ] = '\\0' ; } else if ( ( unsigned TYPE_64 ) VAR_365 == 0xFFFFFFFFU ) { VAR_366 = VAR_367 ; continue ; } if ( ( unsigned TYPE_65 ) ( ( VAR_368 << 16 ) | VAR_369 ) == 0xFFFEE0DD ) { if ( VAR_370 != ( unsigned TYPE_66 * ) VAR_371 ) VAR_372 = ( unsigned TYPE_67 * ) METHOD_62 ( VAR_373 ) ; VAR_374 = VAR_375 ; continue ; } if ( VAR_376 != VAR_377 ) { if ( VAR_378 != ( unsigned TYPE_68 * ) VAR_379 ) VAR_380 = ( unsigned TYPE_69 * ) METHOD_63 ( VAR_381 ) ; continue ; } switch ( VAR_382 ) { case 0x0002 : { switch ( VAR_383 ) { case 0x0010 : { TYPE_70 VAR_384 [ VAR_385 ] ; if ( ( VAR_386 == 0 ) && ( VAR_387 == VAR_388 ) ) { VAR_389 = VAR_390 ; ( TYPE_71 ) METHOD_64 ( VAR_391 , ( TYPE_72 ) 0 , VAR_392 ) ; VAR_393 = 0 ; VAR_394 = 0 ; if ( VAR_395 -> VAR_396 != VAR_397 ) ( TYPE_73 ) METHOD_65 ( VAR_398 , ""Corruptedimage-tryingexplicitformat\\n"" ) ; break ; } * VAR_399 = '\\0' ; if ( VAR_400 != ( unsigned TYPE_74 * ) VAR_401 ) ( TYPE_75 ) METHOD_66 ( VAR_402 , ( TYPE_76 * ) VAR_403 , VAR_404 ) ; if ( VAR_405 -> VAR_406 != VAR_407 ) ( TYPE_77 ) METHOD_67 ( VAR_408 , ""transfer_syntax=%s\\n"" , ( const TYPE_78 * ) VAR_409 ) ; if ( METHOD_68 ( VAR_410 , ""1.2.840.10008.1.2"" , 17 ) == 0 ) { TYPE_79 VAR_411 , VAR_412 , VAR_413 ; VAR_414 = 1 ; VAR_415 = 0 ; if ( METHOD_69 ( VAR_416 ) > 17 ) { VAR_417 = METHOD_70 ( VAR_418 + 17 , "".%d.%d"" , & VAR_419 , & VAR_420 ) ; if ( VAR_421 < 1 ) METHOD_71 ( VAR_422 , ""ImproperImageHeader"" ) ; } switch ( VAR_423 ) { case 1 : { VAR_424 -> VAR_425 = VAR_426 ; break ; } case 2 : { VAR_427 -> VAR_428 = VAR_429 ; break ; } case 4 : { if ( ( VAR_430 >= 80 ) && ( VAR_431 <= 81 ) ) VAR_432 -> VAR_433 = VAR_434 ; else if ( ( VAR_435 >= 90 ) && ( VAR_436 <= 93 ) ) VAR_437 -> VAR_438 = VAR_439 ; else VAR_440 -> VAR_441 = VAR_442 ; break ; } case 5 : { VAR_443 -> VAR_444 = VAR_445 ; break ; } } } break ; } default : break ; } break ; } case 0x0028 : { switch ( VAR_446 ) { case 0x0002 : { VAR_447 = ( TYPE_80 ) VAR_448 ; break ; } case 0x0004 : {  for ( VAR_449 = 0 ; VAR_450 < ( TYPE_81 ) METHOD_72 ( VAR_451 , VAR_452 - 1 ) ; VAR_453 ++ )  VAR_454 [ VAR_455 ] = ( TYPE_82 ) VAR_456 [ VAR_457 ] ; VAR_458 [ VAR_459 ] = '\\0' ; VAR_460 = METHOD_73 ( VAR_461 , ""MONOCHROME1"" ) == 0 ? VAR_462 : VAR_463 ; break ; } case 0x0006 : { if ( VAR_464 == 1 ) VAR_465 -> VAR_466 = VAR_467 ; break ; } case 0x0008 :  {  VAR_468 = METHOD_74 ( ( TYPE_83 * ) VAR_469 ) ; break ; } case 0x0010 : { VAR_470 = ( TYPE_84 ) VAR_471 ; break ; } case 0x0011 : { VAR_472 = ( TYPE_85 ) VAR_473 ; break ; } case 0x0100 : { VAR_474 = ( TYPE_86 ) VAR_475 ; VAR_476 = 1 ; if ( VAR_477 > 8 ) VAR_478 = 2 ; VAR_479 = VAR_480 ; if ( VAR_481 > 32 ) METHOD_75 ( VAR_482 , ""ImproperImageHeader"" ) ; VAR_483 = ( 1UL << VAR_484 ) - 1 ; break ; } case 0x0101 : { VAR_485 = ( TYPE_87 ) VAR_486 ; VAR_487 = 1 ; if ( VAR_488 > 8 ) VAR_489 = 2 ; VAR_490 = VAR_491 ; if ( VAR_492 > 32 ) METHOD_76 ( VAR_493 , ""ImproperImageHeader"" ) ; VAR_494 = ( 1UL << VAR_495 ) - 1 ; VAR_496 = ( TYPE_88 ) METHOD_77 ( VAR_497 ) ; break ; } case 0x0102 : { break ; } case 0x0103 : { VAR_498 = ( TYPE_89 ) VAR_499 ; break ; } case 0x1050 : { if ( VAR_500 != ( unsigned TYPE_90 * ) VAR_501 ) VAR_502 = ( TYPE_91 ) METHOD_78 ( ( TYPE_92 * ) VAR_503 ) ; break ; } case 0x1051 : { if ( VAR_504 != ( unsigned TYPE_93 * ) VAR_505 ) VAR_506 = METHOD_79 ( ( TYPE_94 * ) VAR_507 ) ; break ; } case 0x1052 : { if ( VAR_508 != ( unsigned TYPE_95 * ) VAR_509 ) VAR_510 = ( TYPE_96 ) METHOD_80 ( ( TYPE_97 * ) VAR_511 ) ; break ; } case 0x1053 : { if ( VAR_512 != ( unsigned TYPE_98 * ) VAR_513 ) VAR_514 = ( TYPE_99 ) METHOD_81 ( ( TYPE_100 * ) VAR_515 ) ; break ; } case 0x1200 : case 0x3006 : { if ( VAR_516 == ( unsigned TYPE_101 * ) VAR_517 ) break ; VAR_518 = ( TYPE_102 ) ( VAR_519 / VAR_520 ) ; VAR_521 = ( TYPE_103 ) VAR_522 ; VAR_523 = ( TYPE_104 * ) METHOD_82 ( ( TYPE_105 ) VAR_524 , sizeof ( * VAR_525 ) ) ; if ( VAR_526 == ( TYPE_106 * ) VAR_527 ) METHOD_83 ( VAR_528 , ""MemoryAllocationFailed"" ) ; for ( VAR_529 = 0 ; VAR_530 < ( TYPE_107 ) VAR_531 ; VAR_532 ++ ) if ( VAR_533 == 1 ) VAR_534 [ VAR_535 ] = ( TYPE_108 ) VAR_536 [ VAR_537 ] ; else VAR_538 [ VAR_539 ] = ( TYPE_109 ) ( ( TYPE_110 * ) VAR_540 ) [ VAR_541 ] ; break ; } case 0x1201 : { unsigned TYPE_111 VAR_542 ; if ( VAR_543 == ( unsigned TYPE_112 * ) VAR_544 ) break ; VAR_545 = ( TYPE_113 ) ( VAR_546 / 2 ) ; VAR_547 = ( TYPE_114 ) VAR_548 ; VAR_549 = ( TYPE_115 * ) METHOD_84 ( ( TYPE_116 ) VAR_550 , sizeof ( * VAR_551 ) ) ; if ( VAR_552 == ( TYPE_117 * ) VAR_553 ) METHOD_85 ( VAR_554 , ""MemoryAllocationFailed"" ) ; VAR_555 = VAR_556 ; for ( VAR_557 = 0 ; VAR_558 < ( TYPE_118 ) VAR_559 ; VAR_560 ++ ) { if ( VAR_561 -> VAR_562 == VAR_563 ) VAR_564 = ( unsigned TYPE_119 ) ( ( * VAR_565 << 8 ) | * ( VAR_566 + 1 ) ) ; else VAR_567 = ( unsigned TYPE_120 ) ( * VAR_568 | ( * ( VAR_569 + 1 ) << 8 ) ) ; VAR_570 [ VAR_571 ] = ( TYPE_121 ) VAR_572 ; VAR_573 += 2 ; } break ; } case 0x1202 : { unsigned TYPE_122 VAR_574 ; if ( VAR_575 == ( unsigned TYPE_123 * ) VAR_576 ) break ; VAR_577 = ( TYPE_124 ) ( VAR_578 / 2 ) ; VAR_579 = ( TYPE_125 ) VAR_580 ; VAR_581 = ( TYPE_126 * ) METHOD_86 ( ( TYPE_127 ) VAR_582 , sizeof ( * VAR_583 ) ) ; if ( VAR_584 == ( TYPE_128 * ) VAR_585 ) METHOD_87 ( VAR_586 , ""MemoryAllocationFailed"" ) ; VAR_587 = VAR_588 ; for ( VAR_589 = 0 ; VAR_590 < ( TYPE_129 ) VAR_591 ; VAR_592 ++ ) { if ( VAR_593 -> VAR_594 == VAR_595 ) VAR_596 = ( unsigned TYPE_130 ) ( ( * VAR_597 << 8 ) | * ( VAR_598 + 1 ) ) ; else VAR_599 = ( unsigned TYPE_131 ) ( * VAR_600 | ( * ( VAR_601 + 1 ) << 8 ) ) ; VAR_602 [ VAR_603 ] = ( TYPE_132 ) VAR_604 ; VAR_605 += 2 ; } break ; } case 0x1203 : { unsigned TYPE_133 VAR_606 ; if ( VAR_607 == ( unsigned TYPE_134 * ) VAR_608 ) break ; VAR_609 = ( TYPE_135 ) ( VAR_610 / 2 ) ; VAR_611 = ( TYPE_136 ) VAR_612 ; VAR_613 = ( TYPE_137 * ) METHOD_88 ( ( TYPE_138 ) VAR_614 , sizeof ( * VAR_615 ) ) ; if ( VAR_616 == ( TYPE_139 * ) VAR_617 ) METHOD_89 ( VAR_618 , ""MemoryAllocationFailed"" ) ; VAR_619 = VAR_620 ; for ( VAR_621 = 0 ; VAR_622 < ( TYPE_140 ) VAR_623 ; VAR_624 ++ ) { if ( VAR_625 -> VAR_626 == VAR_627 ) VAR_628 = ( unsigned TYPE_141 ) ( ( * VAR_629 << 8 ) | * ( VAR_630 + 1 ) ) ; else VAR_631 = ( unsigned TYPE_142 ) ( * VAR_632 | ( * ( VAR_633 + 1 ) << 8 ) ) ; VAR_634 [ VAR_635 ] = ( TYPE_143 ) VAR_636 ; VAR_637 += 2 ; } break ; } default : break ; } break ; } case 0x2050 : { switch ( VAR_638 ) { case 0x0020 : { if ( ( VAR_639 != ( unsigned TYPE_144 * ) VAR_640 ) && ( METHOD_90 ( ( TYPE_145 * ) VAR_641 , ""INVERSE"" , 7 ) == 0 ) ) VAR_642 = VAR_643 ; break ; } default : break ; } break ; } default : break ; } if ( VAR_644 != ( unsigned TYPE_146 * ) VAR_645 ) { TYPE_147 * VAR_646 ; for ( VAR_647 = 0 ; VAR_648 [ VAR_649 ] . VAR_650 != ( TYPE_148 * ) VAR_651 ; VAR_652 ++ ) if ( ( VAR_653 == VAR_654 [ VAR_655 ] . VAR_656 ) && ( VAR_657 == VAR_658 [ VAR_659 ] . VAR_660 ) ) break ; if ( VAR_661 [ VAR_662 ] . VAR_663 != ( TYPE_149 * ) VAR_664 ) { VAR_665 = METHOD_91 ( ""dcm:"" ) ; ( TYPE_150 ) METHOD_92 ( & VAR_666 , VAR_667 [ VAR_668 ] . VAR_669 ) ; for ( VAR_670 = 0 ; VAR_671 < ( TYPE_151 ) METHOD_93 ( VAR_672 , 4 ) ; VAR_673 ++ ) if ( METHOD_94 ( ( TYPE_152 ) VAR_674 [ VAR_675 ] ) == VAR_676 ) break ; if ( ( VAR_677 == ( TYPE_153 ) VAR_678 ) || ( VAR_679 > 4 ) ) { ( TYPE_154 ) METHOD_95 ( & VAR_680 , """" , """" ) ; ( TYPE_155 ) METHOD_96 ( VAR_681 , VAR_682 , ( TYPE_156 * ) VAR_683 , VAR_684 ) ; } VAR_685 = METHOD_97 ( VAR_686 ) ; } } if ( VAR_687 -> VAR_688 != VAR_689 ) { if ( VAR_690 == ( unsigned TYPE_157 * ) VAR_691 ) ( TYPE_158 ) METHOD_98 ( VAR_692 , ""%d\\n"" , VAR_693 ) ; else { for ( VAR_694 = 0 ; VAR_695 < ( TYPE_159 ) METHOD_99 ( VAR_696 , 4 ) ; VAR_697 ++ ) if ( METHOD_100 ( ( TYPE_160 ) VAR_698 [ VAR_699 ] ) == VAR_700 ) break ; if ( ( VAR_701 != ( TYPE_161 ) VAR_702 ) && ( VAR_703 <= 4 ) ) { TYPE_162 VAR_704 ; VAR_705 = 0 ; for ( VAR_706 = ( TYPE_163 ) VAR_707 - 1 ; VAR_708 >= 0 ; VAR_709 -- ) VAR_710 = ( 256 * VAR_711 + VAR_712 [ VAR_713 ] ) ; ( TYPE_164 ) METHOD_101 ( VAR_714 , ""%d"" , VAR_715 ) ; } else for ( VAR_716 = 0 ; VAR_717 < ( TYPE_165 ) VAR_718 ; VAR_719 ++ ) if ( METHOD_102 ( ( TYPE_166 ) VAR_720 [ VAR_721 ] ) != VAR_722 ) ( TYPE_167 ) METHOD_103 ( VAR_723 , ""%c"" , VAR_724 [ VAR_725 ] ) ; else ( TYPE_168 ) METHOD_104 ( VAR_726 , ""%c"" , '.' ) ; ( TYPE_169 ) METHOD_105 ( VAR_727 , ""\\n"" ) ; } } if ( VAR_728 != ( unsigned TYPE_170 * ) VAR_729 ) VAR_730 = ( unsigned TYPE_171 * ) METHOD_106 ( VAR_731 ) ; if ( METHOD_107 ( VAR_732 ) != VAR_733 ) { METHOD_108 ( VAR_734 , VAR_735 , ""UnexpectedEndOfFile"" , VAR_736 -> VAR_737 ) ; break ; } } if ( ( VAR_738 == 0 ) || ( VAR_739 == 0 ) ) METHOD_109 ( VAR_740 , ""ImproperImageHeader"" ) ; VAR_741 -> VAR_742 = ( TYPE_172 ) VAR_743 ; VAR_744 -> VAR_745 = ( TYPE_173 ) VAR_746 ; if ( VAR_747 == 0xffff ) VAR_748 = ( TYPE_174 ) ( VAR_749 == 16 ? 1 : 0 ) ; if ( ( VAR_750 -> VAR_751 == VAR_752 ) || ( VAR_753 -> VAR_754 == VAR_755 ) ) { TYPE_175 * VAR_756 ; TYPE_176 * VAR_757 ; TYPE_177 VAR_758 ; TYPE_178 VAR_759 ; unsigned TYPE_179 VAR_760 ; for ( VAR_761 = 0 ; VAR_762 < ( TYPE_180 ) VAR_763 -> VAR_764 ; VAR_765 ++ ) ( TYPE_181 ) METHOD_110 ( VAR_766 ) ; VAR_767 = ( METHOD_111 ( VAR_768 ) << 16 ) | METHOD_112 ( VAR_769 ) ; ( TYPE_182 ) VAR_770 ; VAR_771 = ( TYPE_183 ) METHOD_113 ( VAR_772 ) ; VAR_773 -> VAR_774 = VAR_775 >> 2 ; if ( VAR_776 -> VAR_777 != 0 ) { TYPE_184 VAR_778 ; VAR_779 -> VAR_780 = ( TYPE_185 * ) METHOD_114 ( VAR_781 -> VAR_782 , sizeof ( * VAR_783 -> VAR_784 ) ) ; if ( VAR_785 -> VAR_786 == ( TYPE_186 * ) VAR_787 ) METHOD_115 ( VAR_788 , ""MemoryAllocationFailed"" ) ; for ( VAR_789 = 0 ; VAR_790 < ( TYPE_187 ) VAR_791 -> VAR_792 ; VAR_793 ++ ) VAR_794 -> VAR_795 [ VAR_796 ] = ( TYPE_188 ) METHOD_116 ( VAR_797 ) ; VAR_798 = METHOD_117 ( VAR_799 ) ; for ( VAR_800 = 0 ; VAR_801 < ( TYPE_189 ) VAR_802 -> VAR_803 ; VAR_804 ++ ) VAR_805 -> VAR_806 [ VAR_807 ] += VAR_808 ; } VAR_809 = METHOD_118 ( VAR_810 ) ; METHOD_119 ( VAR_811 , ( TYPE_190 * ) VAR_812 , 0 ) ; VAR_813 = METHOD_120 ( ) ; for ( VAR_814 = 0 ; VAR_815 < ( TYPE_191 ) VAR_816 ; VAR_817 ++ ) { TYPE_192 VAR_818 [ VAR_819 ] ; const TYPE_193 * VAR_820 ; TYPE_194 * VAR_821 ; TYPE_195 * VAR_822 ; TYPE_196 VAR_823 ; unsigned TYPE_197 VAR_824 ; VAR_825 = ( METHOD_121 ( VAR_826 ) << 16 ) | METHOD_122 ( VAR_827 ) ; VAR_828 = ( TYPE_198 ) METHOD_123 ( VAR_829 ) ; if ( VAR_830 == 0xFFFEE0DD ) break ; if ( VAR_831 != 0xFFFEE000 ) METHOD_124 ( VAR_832 , ""ImproperImageHeader"" ) ; VAR_833 = ( TYPE_199 * ) VAR_834 ; VAR_835 = METHOD_125 ( VAR_836 ) ; if ( VAR_837 != - 1 ) VAR_838 = METHOD_126 ( VAR_839 , ""wb"" ) ; if ( VAR_840 == ( TYPE_200 * ) VAR_841 ) { ( TYPE_201 ) METHOD_127 ( VAR_842 ) ; METHOD_128 ( VAR_843 , VAR_844 , ""UnableToCreateTemporaryFile"" , VAR_845 ) ; break ; } for ( ; VAR_846 != 0 ; VAR_847 -- ) { VAR_848 = METHOD_129 ( VAR_849 ) ; if ( VAR_850 == VAR_851 ) { METHOD_130 ( VAR_852 , VAR_853 , ""UnexpectedEndOfFile"" , VAR_854 -> VAR_855 ) ; break ; } ( TYPE_202 ) METHOD_131 ( VAR_856 , VAR_857 ) ; } ( TYPE_203 ) METHOD_132 ( VAR_858 ) ; ( TYPE_204 ) METHOD_133 ( VAR_859 -> VAR_860 , VAR_861 , ""jpeg:%s"" , VAR_862 ) ; if ( VAR_863 -> VAR_864 == VAR_865 ) ( TYPE_205 ) METHOD_134 ( VAR_866 -> VAR_867 , VAR_868 , ""j2k:%s"" , VAR_869 ) ; VAR_870 = METHOD_135 ( VAR_871 , VAR_872 ) ; if ( VAR_873 != ( TYPE_206 * ) VAR_874 ) { METHOD_136 ( VAR_875 ) ; VAR_876 = METHOD_137 ( VAR_877 ) ; while ( VAR_878 != ( const TYPE_207 * ) VAR_879 ) { ( TYPE_208 ) METHOD_138 ( VAR_880 , VAR_881 , METHOD_139 ( VAR_882 , VAR_883 , VAR_884 ) , VAR_885 ) ; VAR_886 = METHOD_140 ( VAR_887 ) ; } METHOD_141 ( & VAR_888 , VAR_889 ) ; } ( TYPE_209 ) METHOD_142 ( VAR_890 ) ; } VAR_891 = METHOD_143 ( VAR_892 ) ; VAR_893 = METHOD_144 ( VAR_894 ) ; return ( METHOD_145 ( VAR_895 ) ) ; } if ( VAR_896 != ( 1UL * VAR_897 ) ) { TYPE_210 VAR_898 ; TYPE_211 VAR_899 ; VAR_900 = ( TYPE_212 ) ( METHOD_146 ( VAR_901 ) + 1 ) ; VAR_902 = ( TYPE_213 * ) METHOD_147 ( VAR_903 , sizeof ( * VAR_904 ) ) ; if ( VAR_905 == ( TYPE_214 * ) VAR_906 ) METHOD_148 ( VAR_907 , ""MemoryAllocationFailed"" ) ; VAR_908 = METHOD_149 ( VAR_909 ) ;  for ( VAR_910 = 0 ; VAR_911 < ( TYPE_215 ) ( METHOD_150 ( VAR_912 ) + 1 ) ; VAR_913 ++ )  VAR_914 [ VAR_915 ] = METHOD_151 ( ( TYPE_216 ) VAR_916 , VAR_917 ) ; } if ( VAR_918 -> VAR_919 == VAR_920 ) { TYPE_217 VAR_921 ; unsigned TYPE_218 VAR_922 ; for ( VAR_923 = 0 ; VAR_924 < ( TYPE_219 ) VAR_925 -> VAR_926 ; VAR_927 ++ ) ( TYPE_220 ) METHOD_152 ( VAR_928 ) ; VAR_929 = ( METHOD_153 ( VAR_930 ) << 16 ) | METHOD_154 ( VAR_931 ) ; ( TYPE_221 ) VAR_932 ; VAR_933 = ( TYPE_222 ) METHOD_155 ( VAR_934 ) ; VAR_935 -> VAR_936 = VAR_937 >> 2 ; if ( VAR_938 -> VAR_939 != 0 ) { TYPE_223 VAR_940 ; VAR_941 -> VAR_942 = ( TYPE_224 * ) METHOD_156 ( VAR_943 -> VAR_944 , sizeof ( * VAR_945 -> VAR_946 ) ) ; if ( VAR_947 -> VAR_948 == ( TYPE_225 * ) VAR_949 ) METHOD_157 ( VAR_950 , ""MemoryAllocationFailed"" ) ; for ( VAR_951 = 0 ; VAR_952 < ( TYPE_226 ) VAR_953 -> VAR_954 ; VAR_955 ++ ) VAR_956 -> VAR_957 [ VAR_958 ] = ( TYPE_227 ) METHOD_158 ( VAR_959 ) ; VAR_960 = METHOD_159 ( VAR_961 ) ; for ( VAR_962 = 0 ; VAR_963 < ( TYPE_228 ) VAR_964 -> VAR_965 ; VAR_966 ++ ) VAR_967 -> VAR_968 [ VAR_969 ] += VAR_970 ; } } for ( VAR_971 = 0 ; VAR_972 < ( TYPE_229 ) VAR_973 ; VAR_974 ++ ) { if ( VAR_975 -> VAR_976 != VAR_977 ) break ; VAR_978 -> VAR_979 = ( TYPE_230 ) VAR_980 ; VAR_981 -> VAR_982 = ( TYPE_231 ) VAR_983 ; VAR_984 -> VAR_985 = VAR_986 ; VAR_987 = METHOD_160 ( VAR_988 , VAR_989 -> VAR_990 , VAR_991 -> VAR_992 , VAR_993 ) ; if ( VAR_994 == VAR_995 ) break ; VAR_996 -> VAR_997 = VAR_998 ; if ( ( VAR_999 -> VAR_1000 == ( TYPE_232 * ) VAR_1001 ) && ( VAR_1002 == 1 ) ) { TYPE_233 VAR_1003 ; VAR_1004 = 1 ; if ( VAR_1005 == 0 ) VAR_1006 = VAR_1007 << VAR_1008 ; if ( METHOD_161 ( VAR_1009 , VAR_1010 << VAR_1011 , VAR_1012 ) == VAR_1013 ) METHOD_162 ( VAR_1014 , ""MemoryAllocationFailed"" ) ; if ( VAR_1015 != ( TYPE_234 * ) VAR_1016 ) for ( VAR_1017 = 0 ; VAR_1018 < ( TYPE_235 ) VAR_1019 ; VAR_1020 ++ ) { VAR_1021 = VAR_1022 [ VAR_1023 ] ; if ( ( VAR_1024 != ( TYPE_236 * ) VAR_1025 ) && ( VAR_1026 <= ( TYPE_237 ) VAR_1027 ) ) VAR_1028 = ( TYPE_238 ) VAR_1029 [ VAR_1030 ] ; VAR_1031 -> VAR_1032 [ VAR_1033 ] . VAR_1034 = ( TYPE_239 ) VAR_1035 ; } if ( VAR_1036 != ( TYPE_240 * ) VAR_1037 ) for ( VAR_1038 = 0 ; VAR_1039 < ( TYPE_241 ) VAR_1040 ; VAR_1041 ++ ) { VAR_1042 = VAR_1043 [ VAR_1044 ] ; if ( ( VAR_1045 != ( TYPE_242 * ) VAR_1046 ) && ( VAR_1047 <= ( TYPE_243 ) VAR_1048 ) ) VAR_1049 = ( TYPE_244 ) VAR_1050 [ VAR_1051 ] ; VAR_1052 -> VAR_1053 [ VAR_1054 ] . VAR_1055 = ( TYPE_245 ) VAR_1056 ; } if ( VAR_1057 != ( TYPE_246 * ) VAR_1058 ) for ( VAR_1059 = 0 ; VAR_1060 < ( TYPE_247 ) VAR_1061 ; VAR_1062 ++ ) { VAR_1063 = VAR_1064 [ VAR_1065 ] ; if ( ( VAR_1066 != ( TYPE_248 * ) VAR_1067 ) && ( VAR_1068 <= ( TYPE_249 ) VAR_1069 ) ) VAR_1070 = ( TYPE_250 ) VAR_1071 [ VAR_1072 ] ; VAR_1073 -> VAR_1074 [ VAR_1075 ] . VAR_1076 = ( TYPE_251 ) VAR_1077 ; } if ( VAR_1078 != ( TYPE_252 * ) VAR_1079 ) for ( VAR_1080 = 0 ; VAR_1081 < ( TYPE_253 ) VAR_1082 ; VAR_1083 ++ ) { VAR_1084 = VAR_1085 [ VAR_1086 ] ; if ( ( VAR_1087 != ( TYPE_254 * ) VAR_1088 ) && ( VAR_1089 <= ( TYPE_255 ) VAR_1090 ) ) VAR_1091 = ( TYPE_256 ) VAR_1092 [ VAR_1093 ] ; VAR_1094 -> VAR_1095 [ VAR_1096 ] . VAR_1097 = ( TYPE_257 ) VAR_1098 ; VAR_1099 -> VAR_1100 [ VAR_1101 ] . VAR_1102 = ( TYPE_258 ) VAR_1103 ; VAR_1104 -> VAR_1105 [ VAR_1106 ] . VAR_1107 = ( TYPE_259 ) VAR_1108 ; } } if ( VAR_1109 -> VAR_1110 == VAR_1111 ) { unsigned TYPE_260 VAR_1112 ; for ( VAR_1113 = 0 ; VAR_1114 < ( TYPE_261 ) VAR_1115 -> VAR_1116 ; VAR_1117 ++ ) ( TYPE_262 ) METHOD_163 ( VAR_1118 ) ; VAR_1119 = ( METHOD_164 ( VAR_1120 ) << 16 ) | METHOD_165 ( VAR_1121 ) ; VAR_1122 -> VAR_1123 = ( TYPE_263 ) METHOD_166 ( VAR_1124 ) ; if ( ( VAR_1125 != 0xFFFEE000 ) || ( VAR_1126 -> VAR_1127 <= 64 ) || ( METHOD_167 ( VAR_1128 ) != VAR_1129 ) ) METHOD_168 ( VAR_1130 , ""ImproperImageHeader"" ) ; VAR_1131 -> VAR_1132 = 0 ; VAR_1133 -> VAR_1134 = METHOD_169 ( VAR_1135 ) ; if ( VAR_1136 -> VAR_1137 > 1 ) { VAR_1138 = 1 ; VAR_1139 = 8 ; } for ( VAR_1140 = 0 ; VAR_1141 < 15 ; VAR_1142 ++ ) VAR_1143 -> VAR_1144 [ VAR_1145 ] = ( TYPE_264 ) METHOD_170 ( VAR_1146 ) ; VAR_1147 -> VAR_1148 -= 64 ; } if ( ( VAR_1149 > 1 ) && ( VAR_1150 -> VAR_1151 == VAR_1152 ) ) { for ( VAR_1153 = 0 ; VAR_1154 < ( TYPE_265 ) VAR_1155 ; VAR_1156 ++ ) { for ( VAR_1157 = 0 ; VAR_1158 < ( TYPE_266 ) VAR_1159 -> VAR_1160 ; VAR_1161 ++ ) { VAR_1162 = METHOD_171 ( VAR_1163 , 0 , VAR_1164 , VAR_1165 -> VAR_1166 , 1 , VAR_1167 ) ; if ( VAR_1168 == ( TYPE_267 * ) VAR_1169 ) break ; for ( VAR_1170 = 0 ; VAR_1171 < ( TYPE_268 ) VAR_1172 -> VAR_1173 ; VAR_1174 ++ ) { switch ( ( TYPE_269 ) VAR_1175 ) { case 0 : { METHOD_172 ( VAR_1176 , METHOD_173 ( ( unsigned TYPE_270 ) METHOD_174 ( VAR_1177 , VAR_1178 ) ) , VAR_1179 ) ; break ; } case 1 : { METHOD_175 ( VAR_1180 , METHOD_176 ( ( unsigned TYPE_271 ) METHOD_177 ( VAR_1181 , VAR_1182 ) ) , VAR_1183 ) ; break ; } case 2 : { METHOD_178 ( VAR_1184 , METHOD_179 ( ( unsigned TYPE_272 ) METHOD_180 ( VAR_1185 , VAR_1186 ) ) , VAR_1187 ) ; break ; } case 3 : { METHOD_181 ( VAR_1188 , METHOD_182 ( ( unsigned TYPE_273 ) METHOD_183 ( VAR_1189 , VAR_1190 ) ) , VAR_1191 ) ; break ; } default : break ; } VAR_1192 += METHOD_184 ( VAR_1193 ) ; } if ( METHOD_185 ( VAR_1194 , VAR_1195 ) == VAR_1196 ) break ; if ( VAR_1197 -> VAR_1198 == ( TYPE_274 * ) VAR_1199 ) { VAR_1200 = METHOD_186 ( VAR_1201 , VAR_1202 , ( TYPE_275 ) VAR_1203 , VAR_1204 -> VAR_1205 ) ; if ( VAR_1206 == VAR_1207 ) break ; } } } } else { const TYPE_276 * VAR_1208 ; TYPE_277 VAR_1209 ; TYPE_278 VAR_1210 ; VAR_1211 = 0 ; VAR_1212 = 0 ; if ( ( VAR_1213 != 0 ) && ( VAR_1214 == 0 ) ) VAR_1215 = ( TYPE_279 ) VAR_1216 ; VAR_1217 = METHOD_187 ( VAR_1218 , ""dcm:display-range"" ) ; if ( VAR_1219 != ( const TYPE_280 * ) VAR_1220 ) { if ( METHOD_188 ( VAR_1221 , ""reset"" ) == 0 ) VAR_1222 = 0 ; } ( TYPE_281 ) METHOD_189 ( & VAR_1223 , 0 , sizeof ( VAR_1224 ) ) ; for ( VAR_1225 = 0 ; VAR_1226 < ( TYPE_282 ) VAR_1227 -> VAR_1228 ; VAR_1229 ++ ) { VAR_1230 = METHOD_190 ( VAR_1231 , 0 , VAR_1232 , VAR_1233 -> VAR_1234 , 1 , VAR_1235 ) ; if ( VAR_1236 == ( TYPE_283 * ) VAR_1237 ) break ; for ( VAR_1238 = 0 ; VAR_1239 < ( TYPE_284 ) VAR_1240 -> VAR_1241 ; VAR_1242 ++ ) { if ( VAR_1243 == 1 ) { TYPE_285 VAR_1244 ; if ( VAR_1245 == 1 ) VAR_1246 = VAR_1247 != VAR_1248 ? ( ( TYPE_286 ) VAR_1249 - METHOD_191 ( VAR_1250 , VAR_1251 ) ) : METHOD_192 ( VAR_1252 , VAR_1253 ) ; else if ( ( VAR_1254 != 12 ) || ( VAR_1255 != 12 ) ) { if ( VAR_1256 ) VAR_1257 = METHOD_193 ( VAR_1258 , VAR_1259 ) ; else VAR_1260 = METHOD_194 ( VAR_1261 , VAR_1262 ) ; if ( VAR_1263 != VAR_1264 ) VAR_1265 = ( TYPE_287 ) VAR_1266 - VAR_1267 ; } else { if ( ( VAR_1268 & 0x01 ) != 0 ) VAR_1269 = ( METHOD_195 ( VAR_1270 , VAR_1271 ) << 8 ) | VAR_1272 ; else { VAR_1273 = METHOD_196 ( VAR_1274 , VAR_1275 ) ; VAR_1276 = ( TYPE_288 ) ( VAR_1277 & 0x0f ) ; VAR_1278 >>= 4 ; } VAR_1279 ++ ; } VAR_1280 = ( VAR_1281 * VAR_1282 ) + VAR_1283 ; if ( VAR_1284 == 0 ) { if ( VAR_1285 == 1 ) VAR_1286 -= 32767 ; } else { TYPE_289 VAR_1287 , VAR_1288 ; VAR_1289 = ( TYPE_290 ) METHOD_197 ( ( TYPE_291 ) VAR_1290 - ( VAR_1291 - 1.0 ) / 2.0 - 0.5 ) ; VAR_1292 = ( TYPE_292 ) METHOD_198 ( ( TYPE_293 ) VAR_1293 + ( VAR_1294 - 1.0 ) / 2.0 + 0.5 ) ; if ( ( TYPE_294 ) VAR_1295 <= VAR_1296 ) VAR_1297 = 0 ; else if ( ( TYPE_295 ) VAR_1298 > VAR_1299 ) VAR_1300 = ( TYPE_296 ) VAR_1301 ; else VAR_1302 = ( TYPE_297 ) ( VAR_1303 * ( ( ( VAR_1304 - VAR_1305 - 0.5 ) / ( VAR_1306 - 1 ) ) + 0.5 ) ) ; } VAR_1307 &= VAR_1308 ; VAR_1309 = ( TYPE_298 ) METHOD_199 ( VAR_1310 , ( TYPE_299 ) VAR_1311 , VAR_1312 ) ; METHOD_200 ( VAR_1313 , ( TYPE_300 ) VAR_1314 , VAR_1315 ) ; VAR_1316 . VAR_1317 = ( unsigned TYPE_301 ) VAR_1318 -> VAR_1319 [ VAR_1320 ] . VAR_1321 ; VAR_1322 . VAR_1323 = ( unsigned TYPE_302 ) VAR_1324 -> VAR_1325 [ VAR_1326 ] . VAR_1327 ; VAR_1328 . VAR_1329 = ( unsigned TYPE_303 ) VAR_1330 -> VAR_1331 [ VAR_1332 ] . VAR_1333 ; } else { if ( VAR_1334 == 1 ) { VAR_1335 . VAR_1336 = ( unsigned TYPE_304 ) METHOD_201 ( VAR_1337 , VAR_1338 ) ; VAR_1339 . VAR_1340 = ( unsigned TYPE_305 ) METHOD_202 ( VAR_1341 , VAR_1342 ) ; VAR_1343 . VAR_1344 = ( unsigned TYPE_306 ) METHOD_203 ( VAR_1345 , VAR_1346 ) ; } else { VAR_1347 . VAR_1348 = METHOD_204 ( VAR_1349 , VAR_1350 ) ; VAR_1351 . VAR_1352 = METHOD_205 ( VAR_1353 , VAR_1354 ) ; VAR_1355 . VAR_1356 = METHOD_206 ( VAR_1357 , VAR_1358 ) ; } VAR_1359 . VAR_1360 &= VAR_1361 ; VAR_1362 . VAR_1363 &= VAR_1364 ; VAR_1365 . VAR_1366 &= VAR_1367 ; if ( VAR_1368 != ( TYPE_307 * ) VAR_1369 ) {  VAR_1370 . VAR_1371 = VAR_1372 [ VAR_1373 . VAR_1374 ] ;   VAR_1375 . VAR_1376 = VAR_1377 [ VAR_1378 . VAR_1379 ] ;   VAR_1380 . VAR_1381 = VAR_1382 [ VAR_1383 . VAR_1384 ] ;  } } METHOD_207 ( VAR_1385 , ( TYPE_308 ) VAR_1386 . VAR_1387 , VAR_1388 ) ; METHOD_208 ( VAR_1389 , ( TYPE_309 ) VAR_1390 . VAR_1391 , VAR_1392 ) ; METHOD_209 ( VAR_1393 , ( TYPE_310 ) VAR_1394 . VAR_1395 , VAR_1396 ) ; VAR_1397 += METHOD_210 ( VAR_1398 ) ; } if ( METHOD_211 ( VAR_1399 , VAR_1400 ) == VAR_1401 ) break ; if ( VAR_1402 -> VAR_1403 == ( TYPE_311 * ) VAR_1404 ) { VAR_1405 = METHOD_212 ( VAR_1406 , VAR_1407 , ( TYPE_312 ) VAR_1408 , VAR_1409 -> VAR_1410 ) ; if ( VAR_1411 == VAR_1412 ) break ; } } if ( VAR_1413 -> VAR_1414 > 1 ) for ( VAR_1415 = 0 ; VAR_1416 < ( TYPE_313 ) VAR_1417 -> VAR_1418 ; VAR_1419 ++ ) { VAR_1420 = METHOD_213 ( VAR_1421 , 0 , VAR_1422 , VAR_1423 -> VAR_1424 , 1 , VAR_1425 ) ; if ( VAR_1426 == ( TYPE_314 * ) VAR_1427 ) break ; for ( VAR_1428 = 0 ; VAR_1429 < ( TYPE_315 ) VAR_1430 -> VAR_1431 ; VAR_1432 ++ ) { if ( VAR_1433 == 1 ) { TYPE_316 VAR_1434 ; if ( VAR_1435 == 1 ) VAR_1436 = VAR_1437 != VAR_1438 ? ( ( TYPE_317 ) VAR_1439 - METHOD_214 ( VAR_1440 , VAR_1441 ) ) : METHOD_215 ( VAR_1442 , VAR_1443 ) ; else if ( ( VAR_1444 != 12 ) || ( VAR_1445 != 12 ) ) { VAR_1446 = ( TYPE_318 ) ( VAR_1447 != VAR_1448 ? ( VAR_1449 - METHOD_216 ( VAR_1450 , VAR_1451 ) ) : METHOD_217 ( VAR_1452 , VAR_1453 ) ) ; if ( VAR_1454 == 1 ) VAR_1455 = ( ( signed TYPE_319 ) VAR_1456 ) ; } else { if ( ( VAR_1457 & 0x01 ) != 0 ) VAR_1458 = ( METHOD_218 ( VAR_1459 , VAR_1460 ) << 8 ) | VAR_1461 ; else { VAR_1462 = METHOD_219 ( VAR_1463 , VAR_1464 ) ; VAR_1465 = ( TYPE_320 ) ( VAR_1466 & 0x0f ) ; VAR_1467 >>= 4 ; } VAR_1468 ++ ; } VAR_1469 = ( VAR_1470 * VAR_1471 ) + VAR_1472 ; if ( VAR_1473 == 0 ) { if ( VAR_1474 == 1 ) VAR_1475 -= 32767 ; } else { TYPE_321 VAR_1476 , VAR_1477 ; VAR_1478 = ( TYPE_322 ) METHOD_220 ( ( TYPE_323 ) VAR_1479 - ( VAR_1480 - 1.0 ) / 2.0 - 0.5 ) ; VAR_1481 = ( TYPE_324 ) METHOD_221 ( ( TYPE_325 ) VAR_1482 + ( VAR_1483 - 1.0 ) / 2.0 + 0.5 ) ; if ( ( TYPE_326 ) VAR_1484 <= VAR_1485 ) VAR_1486 = 0 ; else if ( ( TYPE_327 ) VAR_1487 > VAR_1488 ) VAR_1489 = ( TYPE_328 ) VAR_1490 ; else VAR_1491 = ( TYPE_329 ) ( VAR_1492 * ( ( ( VAR_1493 - VAR_1494 - 0.5 ) / ( VAR_1495 - 1 ) ) + 0.5 ) ) ; } VAR_1496 &= VAR_1497 ; VAR_1498 = ( TYPE_330 ) METHOD_222 ( VAR_1499 , ( TYPE_331 ) VAR_1500 , VAR_1501 ) ; METHOD_223 ( VAR_1502 , ( TYPE_332 ) ( ( ( TYPE_333 ) METHOD_224 ( VAR_1503 , VAR_1504 ) ) | ( ( ( TYPE_334 ) VAR_1505 ) << 8 ) ) , VAR_1506 ) ; VAR_1507 . VAR_1508 = ( unsigned TYPE_335 ) VAR_1509 -> VAR_1510 [ VAR_1511 ] . VAR_1512 ; VAR_1513 . VAR_1514 = ( unsigned TYPE_336 ) VAR_1515 -> VAR_1516 [ VAR_1517 ] . VAR_1518 ; VAR_1519 . VAR_1520 = ( unsigned TYPE_337 ) VAR_1521 -> VAR_1522 [ VAR_1523 ] . VAR_1524 ; } else { if ( VAR_1525 == 1 ) { VAR_1526 . VAR_1527 = ( unsigned TYPE_338 ) METHOD_225 ( VAR_1528 , VAR_1529 ) ; VAR_1530 . VAR_1531 = ( unsigned TYPE_339 ) METHOD_226 ( VAR_1532 , VAR_1533 ) ; VAR_1534 . VAR_1535 = ( unsigned TYPE_340 ) METHOD_227 ( VAR_1536 , VAR_1537 ) ; } else { VAR_1538 . VAR_1539 = METHOD_228 ( VAR_1540 , VAR_1541 ) ; VAR_1542 . VAR_1543 = METHOD_229 ( VAR_1544 , VAR_1545 ) ; VAR_1546 . VAR_1547 = METHOD_230 ( VAR_1548 , VAR_1549 ) ; } VAR_1550 . VAR_1551 &= VAR_1552 ; VAR_1553 . VAR_1554 &= VAR_1555 ; VAR_1556 . VAR_1557 &= VAR_1558 ; if ( VAR_1559 != ( TYPE_341 * ) VAR_1560 ) { VAR_1561 . VAR_1562 = VAR_1563 [ VAR_1564 . VAR_1565 ] ; VAR_1566 . VAR_1567 = VAR_1568 [ VAR_1569 . VAR_1570 ] ; VAR_1571 . VAR_1572 = VAR_1573 [ VAR_1574 . VAR_1575 ] ; } } METHOD_231 ( VAR_1576 , ( TYPE_342 ) ( ( ( TYPE_343 ) METHOD_232 ( VAR_1577 , VAR_1578 ) ) | ( ( ( TYPE_344 ) VAR_1579 . VAR_1580 ) << 8 ) ) , VAR_1581 ) ; METHOD_233 ( VAR_1582 , ( TYPE_345 ) ( ( ( TYPE_346 ) METHOD_234 ( VAR_1583 , VAR_1584 ) ) | ( ( ( TYPE_347 ) VAR_1585 . VAR_1586 ) << 8 ) ) , VAR_1587 ) ; METHOD_235 ( VAR_1588 , ( TYPE_348 ) ( ( ( TYPE_349 ) METHOD_236 ( VAR_1589 , VAR_1590 ) ) | ( ( ( TYPE_350 ) VAR_1591 . VAR_1592 ) << 8 ) ) , VAR_1593 ) ; VAR_1594 += METHOD_237 ( VAR_1595 ) ; } if ( METHOD_238 ( VAR_1596 , VAR_1597 ) == VAR_1598 ) break ; if ( VAR_1599 -> VAR_1600 == ( TYPE_351 * ) VAR_1601 ) { VAR_1602 = METHOD_239 ( VAR_1603 , VAR_1604 , ( TYPE_352 ) VAR_1605 , VAR_1606 -> VAR_1607 ) ; if ( VAR_1608 == VAR_1609 ) break ; } } } if ( METHOD_240 ( VAR_1610 , VAR_1611 ) != VAR_1612 ) ( TYPE_353 ) METHOD_241 ( VAR_1613 , VAR_1614 , VAR_1615 ) ; if ( METHOD_242 ( VAR_1616 ) != VAR_1617 ) { METHOD_243 ( VAR_1618 , VAR_1619 , ""UnexpectedEndOfFile"" , VAR_1620 -> VAR_1621 ) ; break ; } if ( VAR_1622 -> VAR_1623 != 0 ) if ( VAR_1624 -> VAR_1625 >= ( VAR_1626 -> VAR_1627 + VAR_1628 -> VAR_1629 - 1 ) ) break ; if ( VAR_1630 < ( TYPE_354 ) ( VAR_1631 - 1 ) ) { METHOD_244 ( VAR_1632 , VAR_1633 , VAR_1634 ) ; if ( METHOD_245 ( VAR_1635 ) == ( TYPE_355 * ) VAR_1636 ) { VAR_1637 = METHOD_246 ( VAR_1638 ) ; return ( ( TYPE_356 * ) VAR_1639 ) ; } VAR_1640 = METHOD_247 ( VAR_1641 ) ; VAR_1642 = METHOD_248 ( VAR_1643 , VAR_1644 , METHOD_249 ( VAR_1645 ) , METHOD_250 ( VAR_1646 ) ) ; if ( VAR_1647 == VAR_1648 ) break ; } } if ( VAR_1649 -> VAR_1650 != ( TYPE_357 * ) VAR_1651 ) VAR_1652 -> VAR_1653 = ( TYPE_358 * ) METHOD_251 ( VAR_1654 -> VAR_1655 ) ; VAR_1656 = ( TYPE_359 * ) METHOD_252 ( VAR_1657 ) ; if ( VAR_1658 != ( TYPE_360 * ) VAR_1659 ) VAR_1660 = ( TYPE_361 * ) METHOD_253 ( VAR_1661 ) ; if ( VAR_1662 != ( TYPE_362 * ) VAR_1663 ) VAR_1664 = ( TYPE_363 * ) METHOD_254 ( VAR_1665 ) ; if ( VAR_1666 != ( TYPE_364 * ) VAR_1667 ) VAR_1668 = ( TYPE_365 * ) METHOD_255 ( VAR_1669 ) ; if ( VAR_1670 != ( TYPE_366 * ) VAR_1671 ) VAR_1672 = ( TYPE_367 * ) METHOD_256 ( VAR_1673 ) ; if ( VAR_1674 != ( TYPE_368 * ) VAR_1675 ) VAR_1676 = ( TYPE_369 * ) METHOD_257 ( VAR_1677 ) ; ( TYPE_370 ) METHOD_258 ( VAR_1678 ) ; return ( METHOD_259 ( VAR_1679 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ VAR_3 ] , VAR_4 [ VAR_5 ] , VAR_6 [ VAR_7 ] , VAR_8 [ VAR_9 ] ; TYPE_4 * VAR_10 ; TYPE_5 * VAR_11 ; TYPE_6 * VAR_12 , VAR_13 , * VAR_14 , * VAR_15 , VAR_16 , * VAR_17 ; TYPE_7 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_8 VAR_23 ; TYPE_9 * VAR_24 ; register TYPE_10 VAR_25 , VAR_26 ; register TYPE_11 * VAR_27 ; register unsigned TYPE_12 * VAR_28 ; TYPE_13 VAR_29 , VAR_30 , VAR_31 , VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 , VAR_41 , VAR_42 , VAR_43 , VAR_44 ; TYPE_14 VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 ; unsigned TYPE_15 * VAR_51 ; unsigned TYPE_16 VAR_52 , VAR_53 ; METHOD_1 ( VAR_54 != ( const TYPE_17 * ) VAR_55 ) ; METHOD_2 ( VAR_56 -> VAR_57 == VAR_58 ) ; if ( VAR_59 -> VAR_60 != VAR_61 ) ( TYPE_18 ) METHOD_3 ( VAR_62 , METHOD_4 ( ) , ""%s"" , VAR_63 -> VAR_64 ) ; METHOD_5 ( VAR_65 != ( TYPE_19 * ) VAR_66 ) ; METHOD_6 ( VAR_67 -> VAR_68 == VAR_69 ) ; VAR_70 = METHOD_7 ( VAR_71 , VAR_72 ) ; VAR_73 = METHOD_8 ( VAR_74 , VAR_75 , VAR_76 , VAR_77 ) ; if ( VAR_78 == VAR_79 ) { VAR_80 = METHOD_9 ( VAR_81 ) ; return ( ( TYPE_20 * ) VAR_82 ) ; } VAR_83 -> VAR_84 = 8UL ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 = ( TYPE_21 * ) METHOD_10 ( sizeof ( * VAR_89 ) ) ; if ( VAR_90 == ( TYPE_22 * ) VAR_91 ) METHOD_11 ( VAR_92 , ""MemoryAllocationFailed"" ) ; ( TYPE_23 ) METHOD_12 ( VAR_93 , 0 , sizeof ( * VAR_94 ) ) ; VAR_95 = METHOD_13 ( VAR_96 , 128 , ( unsigned TYPE_24 * ) VAR_97 ) ; if ( VAR_98 != 128 ) METHOD_14 ( VAR_99 , ""ImproperImageHeader"" ) ; VAR_100 = METHOD_15 ( VAR_101 , 4 , ( unsigned TYPE_25 * ) VAR_102 ) ; if ( ( VAR_103 != 4 ) || ( METHOD_16 ( VAR_104 , ""DICM"" , 4 ) != 0 ) ) { VAR_105 = METHOD_17 ( VAR_106 , 0L , VAR_107 ) ; if ( VAR_108 < 0 ) METHOD_18 ( VAR_109 , ""ImproperImageHeader"" ) ; } ( TYPE_26 ) METHOD_19 ( VAR_110 , ""MONOCHROME1"" , VAR_111 ) ; VAR_112 = 8 ; VAR_113 = 1 ; VAR_114 = VAR_115 ; VAR_116 = ( unsigned TYPE_27 * ) VAR_117 ; VAR_118 = 8 ; VAR_119 = 0 ; VAR_120 [ 2 ] = '\\0' ; VAR_121 = VAR_122 ; VAR_123 = 0 ; VAR_124 = ( TYPE_28 * ) VAR_125 ; VAR_126 = ( TYPE_29 * ) VAR_127 ; VAR_128 = ( TYPE_30 * ) VAR_129 ; VAR_130 = ( TYPE_31 * ) VAR_131 ; VAR_132 = 0 ; VAR_133 = 255UL ; VAR_134 = 0xffff ; VAR_135 = 1 ; VAR_136 = 0 ; VAR_137 = 1 ; VAR_138 = 1 ; VAR_139 = ( TYPE_32 * ) VAR_140 ; VAR_141 = VAR_142 ; VAR_143 = ( ~ 0UL ) ; VAR_144 = 0 ; VAR_145 = VAR_146 ; VAR_147 = VAR_148 ; VAR_149 = 0 ; VAR_150 = 0 ; VAR_151 = 0 ; for ( VAR_152 = 0 ; ( VAR_153 != 0x7FE0 ) || ( VAR_154 != 0x0010 ) || ( VAR_155 != VAR_156 ) ; ) { VAR_157 -> VAR_158 = ( TYPE_33 ) METHOD_20 ( VAR_159 ) ; VAR_160 = METHOD_21 ( VAR_161 ) ; VAR_162 = METHOD_22 ( VAR_163 ) ; if ( ( VAR_164 != 0x0002 ) && ( VAR_165 -> VAR_166 == VAR_167 ) ) { VAR_168 = ( unsigned TYPE_34 ) ( ( VAR_169 << 8 ) | ( ( VAR_170 >> 8 ) & 0xFF ) ) ; VAR_171 = ( unsigned TYPE_35 ) ( ( VAR_172 << 8 ) | ( ( VAR_173 >> 8 ) & 0xFF ) ) ; } VAR_174 = 0 ; for ( VAR_175 = 0 ; VAR_176 [ VAR_177 ] . VAR_178 < 0xffff ; VAR_179 ++ ) if ( ( VAR_180 == VAR_181 [ VAR_182 ] . VAR_183 ) && ( VAR_184 == VAR_185 [ VAR_186 ] . VAR_187 ) ) break ; ( TYPE_36 ) METHOD_23 ( VAR_188 , VAR_189 [ VAR_190 ] . VAR_191 , VAR_192 ) ; VAR_193 = METHOD_24 ( VAR_194 , 2 , ( unsigned TYPE_37 * ) VAR_195 ) ; if ( VAR_196 != 2 ) METHOD_25 ( VAR_197 , ""ImproperImageHeader"" ) ; if ( ( VAR_198 == VAR_199 ) && ( VAR_200 != 0x0002 ) ) VAR_201 = ( METHOD_26 ( ( unsigned TYPE_38 ) * VAR_202 ) != VAR_203 ) && ( METHOD_27 ( ( unsigned TYPE_39 ) * ( VAR_204 + 1 ) ) != VAR_205 ) ? VAR_206 : VAR_207 ; VAR_208 = ( ( VAR_209 == 0x0002 ) && ( VAR_210 == VAR_211 ) ) || ( VAR_212 != VAR_213 ) ? VAR_214 : VAR_215 ; if ( ( VAR_216 != VAR_217 ) && ( METHOD_28 ( VAR_218 , ""xs"" , 2 ) == 0 ) ) ( TYPE_40 ) METHOD_29 ( VAR_219 , VAR_220 , VAR_221 ) ; if ( ( VAR_222 == VAR_223 ) || ( METHOD_30 ( VAR_224 , ""!!"" , 2 ) == 0 ) ) { VAR_225 = METHOD_31 ( VAR_226 , ( TYPE_41 ) - 2 , VAR_227 ) ; if ( VAR_228 < 0 ) METHOD_32 ( VAR_229 , ""ImproperImageHeader"" ) ; VAR_230 = 4 ; } else { VAR_231 = 2 ; if ( ( METHOD_33 ( VAR_232 , ""OB"" , 2 ) == 0 ) || ( METHOD_34 ( VAR_233 , ""UN"" , 2 ) == 0 ) || ( METHOD_35 ( VAR_234 , ""OW"" , 2 ) == 0 ) || ( METHOD_36 ( VAR_235 , ""SQ"" , 2 ) == 0 ) ) { ( TYPE_42 ) METHOD_37 ( VAR_236 ) ; VAR_237 = 4 ; } } VAR_238 = 0 ; if ( VAR_239 == 4 ) { if ( VAR_240 == 0x0002 ) VAR_241 = METHOD_38 ( VAR_242 ) ; else VAR_243 = METHOD_39 ( VAR_244 ) ; } else if ( VAR_245 == 2 ) { if ( VAR_246 == 0x0002 ) VAR_247 = METHOD_40 ( VAR_248 ) ; else VAR_249 = METHOD_41 ( VAR_250 ) ; } VAR_251 = 0 ; VAR_252 = 1 ; if ( VAR_253 != 0 ) { if ( ( METHOD_42 ( VAR_254 , ""SS"" , 2 ) == 0 ) || ( METHOD_43 ( VAR_255 , ""US"" , 2 ) == 0 ) ) VAR_256 = 2 ; else if ( ( METHOD_44 ( VAR_257 , ""UL"" , 2 ) == 0 ) || ( METHOD_45 ( VAR_258 , ""SL"" , 2 ) == 0 ) || ( METHOD_46 ( VAR_259 , ""FL"" , 2 ) == 0 ) ) VAR_260 = 4 ; else if ( METHOD_47 ( VAR_261 , ""FD"" , 2 ) != 0 ) VAR_262 = 1 ; else VAR_263 = 8 ; if ( VAR_264 != ~ 0 ) VAR_265 = ( TYPE_43 ) VAR_266 / VAR_267 ; else { VAR_268 = 0 ; VAR_269 = 0 ; } } if ( VAR_270 -> VAR_271 != VAR_272 ) { if ( VAR_273 == VAR_274 ) VAR_275 [ 0 ] = '\\0' ; for ( VAR_276 = 0 ; VAR_277 [ VAR_278 ] . VAR_279 != ( TYPE_44 * ) VAR_280 ; VAR_281 ++ ) if ( ( VAR_282 == VAR_283 [ VAR_284 ] . VAR_285 ) && ( VAR_286 == VAR_287 [ VAR_288 ] . VAR_289 ) ) break ; ( TYPE_45 ) METHOD_48 ( VAR_290 , ""0x%04lX%4ld%s-%s(0x%04lx,0x%04lx)"" , ( unsigned TYPE_46 ) VAR_291 -> VAR_292 , ( TYPE_47 ) VAR_293 , VAR_294 , VAR_295 , ( unsigned TYPE_48 ) VAR_296 , ( unsigned TYPE_49 ) VAR_297 ) ; if ( VAR_298 [ VAR_299 ] . VAR_300 != ( TYPE_50 * ) VAR_301 ) ( TYPE_51 ) METHOD_49 ( VAR_302 , ""%s"" , VAR_303 [ VAR_304 ] . VAR_305 ) ; ( TYPE_52 ) METHOD_50 ( VAR_306 , "":"" ) ; } if ( ( VAR_307 == VAR_308 ) && ( VAR_309 == 0x7FE0 ) && ( VAR_310 == 0x0010 ) ) { if ( VAR_311 -> VAR_312 != VAR_313 ) ( TYPE_53 ) METHOD_51 ( VAR_314 , ""\\n"" ) ; break ; } VAR_315 = ( unsigned TYPE_54 * ) VAR_316 ; if ( ( VAR_317 == 1 ) && ( VAR_318 == 1 ) ) VAR_319 = METHOD_52 ( VAR_320 ) ; else if ( ( VAR_321 == 1 ) && ( VAR_322 == 2 ) ) { if ( VAR_323 == 0x0002 ) VAR_324 = METHOD_53 ( VAR_325 ) ; else VAR_326 = METHOD_54 ( VAR_327 ) ; } else if ( ( VAR_328 == 1 ) && ( VAR_329 == 4 ) ) { if ( VAR_330 == 0x0002 ) VAR_331 = METHOD_55 ( VAR_332 ) ; else VAR_333 = METHOD_56 ( VAR_334 ) ; } else if ( ( VAR_335 != 0 ) && ( VAR_336 != 0 ) ) { if ( ~ VAR_337 >= 1 ) VAR_338 = ( unsigned TYPE_55 * ) METHOD_57 ( VAR_339 + 1 , VAR_340 * sizeof ( * VAR_341 ) ) ; if ( VAR_342 == ( unsigned TYPE_56 * ) VAR_343 ) METHOD_58 ( VAR_344 , ""MemoryAllocationFailed"" ) ; VAR_345 = METHOD_59 ( VAR_346 , ( TYPE_57 ) VAR_347 * VAR_348 , VAR_349 ) ; if ( VAR_350 != ( TYPE_58 ) ( VAR_351 * VAR_352 ) ) { if ( VAR_353 -> VAR_354 != VAR_355 ) ( TYPE_59 ) METHOD_60 ( VAR_356 , ""count=%dquantum=%d"" ""length=%dgroup=%d\\n"" , ( TYPE_60 ) VAR_357 , ( TYPE_61 ) VAR_358 , ( TYPE_62 ) VAR_359 , ( TYPE_63 ) VAR_360 ) ; METHOD_61 ( VAR_361 , ""InsufficientImageDataInFile"" ) ; } VAR_362 [ VAR_363 * VAR_364 ] = '\\0' ; } else if ( ( unsigned TYPE_64 ) VAR_365 == 0xFFFFFFFFU ) { VAR_366 = VAR_367 ; continue ; } if ( ( unsigned TYPE_65 ) ( ( VAR_368 << 16 ) | VAR_369 ) == 0xFFFEE0DD ) { if ( VAR_370 != ( unsigned TYPE_66 * ) VAR_371 ) VAR_372 = ( unsigned TYPE_67 * ) METHOD_62 ( VAR_373 ) ; VAR_374 = VAR_375 ; continue ; } if ( VAR_376 != VAR_377 ) { if ( VAR_378 != ( unsigned TYPE_68 * ) VAR_379 ) VAR_380 = ( unsigned TYPE_69 * ) METHOD_63 ( VAR_381 ) ; continue ; } switch ( VAR_382 ) { case 0x0002 : { switch ( VAR_383 ) { case 0x0010 : { TYPE_70 VAR_384 [ VAR_385 ] ; if ( ( VAR_386 == 0 ) && ( VAR_387 == VAR_388 ) ) { VAR_389 = VAR_390 ; ( TYPE_71 ) METHOD_64 ( VAR_391 , ( TYPE_72 ) 0 , VAR_392 ) ; VAR_393 = 0 ; VAR_394 = 0 ; if ( VAR_395 -> VAR_396 != VAR_397 ) ( TYPE_73 ) METHOD_65 ( VAR_398 , ""Corruptedimage-tryingexplicitformat\\n"" ) ; break ; } * VAR_399 = '\\0' ; if ( VAR_400 != ( unsigned TYPE_74 * ) VAR_401 ) ( TYPE_75 ) METHOD_66 ( VAR_402 , ( TYPE_76 * ) VAR_403 , VAR_404 ) ; if ( VAR_405 -> VAR_406 != VAR_407 ) ( TYPE_77 ) METHOD_67 ( VAR_408 , ""transfer_syntax=%s\\n"" , ( const TYPE_78 * ) VAR_409 ) ; if ( METHOD_68 ( VAR_410 , ""1.2.840.10008.1.2"" , 17 ) == 0 ) { TYPE_79 VAR_411 , VAR_412 , VAR_413 ; VAR_414 = 1 ; VAR_415 = 0 ; if ( METHOD_69 ( VAR_416 ) > 17 ) { VAR_417 = METHOD_70 ( VAR_418 + 17 , "".%d.%d"" , & VAR_419 , & VAR_420 ) ; if ( VAR_421 < 1 ) METHOD_71 ( VAR_422 , ""ImproperImageHeader"" ) ; } switch ( VAR_423 ) { case 1 : { VAR_424 -> VAR_425 = VAR_426 ; break ; } case 2 : { VAR_427 -> VAR_428 = VAR_429 ; break ; } case 4 : { if ( ( VAR_430 >= 80 ) && ( VAR_431 <= 81 ) ) VAR_432 -> VAR_433 = VAR_434 ; else if ( ( VAR_435 >= 90 ) && ( VAR_436 <= 93 ) ) VAR_437 -> VAR_438 = VAR_439 ; else VAR_440 -> VAR_441 = VAR_442 ; break ; } case 5 : { VAR_443 -> VAR_444 = VAR_445 ; break ; } } } break ; } default : break ; } break ; } case 0x0028 : { switch ( VAR_446 ) { case 0x0002 : { VAR_447 = ( TYPE_80 ) VAR_448 ; break ; } case 0x0004 : { if ( VAR_731 == ( unsigned TYPE_280 * ) VAR_1675 ) break ; for ( VAR_449 = 0 ; VAR_450 < ( TYPE_81 ) METHOD_72 ( VAR_451 , VAR_452 - 1 ) ; VAR_453 ++ ) VAR_454 [ VAR_455 ] = ( TYPE_82 ) VAR_456 [ VAR_457 ] ; VAR_458 [ VAR_459 ] = '\\0' ; VAR_460 = METHOD_73 ( VAR_461 , ""MONOCHROME1"" ) == 0 ? VAR_462 : VAR_463 ; break ; } case 0x0006 : { if ( VAR_464 == 1 ) VAR_465 -> VAR_466 = VAR_467 ; break ; } case 0x0008 : { if ( VAR_731 == ( unsigned TYPE_280 * ) VAR_1675 ) break ; VAR_468 = METHOD_74 ( ( TYPE_83 * ) VAR_469 ) ; break ; } case 0x0010 : { VAR_470 = ( TYPE_84 ) VAR_471 ; break ; } case 0x0011 : { VAR_472 = ( TYPE_85 ) VAR_473 ; break ; } case 0x0100 : { VAR_474 = ( TYPE_86 ) VAR_475 ; VAR_476 = 1 ; if ( VAR_477 > 8 ) VAR_478 = 2 ; VAR_479 = VAR_480 ; if ( VAR_481 > 32 ) METHOD_75 ( VAR_482 , ""ImproperImageHeader"" ) ; VAR_483 = ( 1UL << VAR_484 ) - 1 ; break ; } case 0x0101 : { VAR_485 = ( TYPE_87 ) VAR_486 ; VAR_487 = 1 ; if ( VAR_488 > 8 ) VAR_489 = 2 ; VAR_490 = VAR_491 ; if ( VAR_492 > 32 ) METHOD_76 ( VAR_493 , ""ImproperImageHeader"" ) ; VAR_494 = ( 1UL << VAR_495 ) - 1 ; VAR_496 = ( TYPE_88 ) METHOD_77 ( VAR_497 ) ; break ; } case 0x0102 : { break ; } case 0x0103 : { VAR_498 = ( TYPE_89 ) VAR_499 ; break ; } case 0x1050 : { if ( VAR_500 != ( unsigned TYPE_90 * ) VAR_501 ) VAR_502 = ( TYPE_91 ) METHOD_78 ( ( TYPE_92 * ) VAR_503 ) ; break ; } case 0x1051 : { if ( VAR_504 != ( unsigned TYPE_93 * ) VAR_505 ) VAR_506 = METHOD_79 ( ( TYPE_94 * ) VAR_507 ) ; break ; } case 0x1052 : { if ( VAR_508 != ( unsigned TYPE_95 * ) VAR_509 ) VAR_510 = ( TYPE_96 ) METHOD_80 ( ( TYPE_97 * ) VAR_511 ) ; break ; } case 0x1053 : { if ( VAR_512 != ( unsigned TYPE_98 * ) VAR_513 ) VAR_514 = ( TYPE_99 ) METHOD_81 ( ( TYPE_100 * ) VAR_515 ) ; break ; } case 0x1200 : case 0x3006 : { if ( VAR_516 == ( unsigned TYPE_101 * ) VAR_517 ) break ; VAR_518 = ( TYPE_102 ) ( VAR_519 / VAR_520 ) ; VAR_521 = ( TYPE_103 ) VAR_522 ; VAR_523 = ( TYPE_104 * ) METHOD_82 ( ( TYPE_105 ) VAR_524 , sizeof ( * VAR_525 ) ) ; if ( VAR_526 == ( TYPE_106 * ) VAR_527 ) METHOD_83 ( VAR_528 , ""MemoryAllocationFailed"" ) ; for ( VAR_529 = 0 ; VAR_530 < ( TYPE_107 ) VAR_531 ; VAR_532 ++ ) if ( VAR_533 == 1 ) VAR_534 [ VAR_535 ] = ( TYPE_108 ) VAR_536 [ VAR_537 ] ; else VAR_538 [ VAR_539 ] = ( TYPE_109 ) ( ( TYPE_110 * ) VAR_540 ) [ VAR_541 ] ; break ; } case 0x1201 : { unsigned TYPE_111 VAR_542 ; if ( VAR_543 == ( unsigned TYPE_112 * ) VAR_544 ) break ; VAR_545 = ( TYPE_113 ) ( VAR_546 / 2 ) ; VAR_547 = ( TYPE_114 ) VAR_548 ; VAR_549 = ( TYPE_115 * ) METHOD_84 ( ( TYPE_116 ) VAR_550 , sizeof ( * VAR_551 ) ) ; if ( VAR_552 == ( TYPE_117 * ) VAR_553 ) METHOD_85 ( VAR_554 , ""MemoryAllocationFailed"" ) ; VAR_555 = VAR_556 ; for ( VAR_557 = 0 ; VAR_558 < ( TYPE_118 ) VAR_559 ; VAR_560 ++ ) { if ( VAR_561 -> VAR_562 == VAR_563 ) VAR_564 = ( unsigned TYPE_119 ) ( ( * VAR_565 << 8 ) | * ( VAR_566 + 1 ) ) ; else VAR_567 = ( unsigned TYPE_120 ) ( * VAR_568 | ( * ( VAR_569 + 1 ) << 8 ) ) ; VAR_570 [ VAR_571 ] = ( TYPE_121 ) VAR_572 ; VAR_573 += 2 ; } break ; } case 0x1202 : { unsigned TYPE_122 VAR_574 ; if ( VAR_575 == ( unsigned TYPE_123 * ) VAR_576 ) break ; VAR_577 = ( TYPE_124 ) ( VAR_578 / 2 ) ; VAR_579 = ( TYPE_125 ) VAR_580 ; VAR_581 = ( TYPE_126 * ) METHOD_86 ( ( TYPE_127 ) VAR_582 , sizeof ( * VAR_583 ) ) ; if ( VAR_584 == ( TYPE_128 * ) VAR_585 ) METHOD_87 ( VAR_586 , ""MemoryAllocationFailed"" ) ; VAR_587 = VAR_588 ; for ( VAR_589 = 0 ; VAR_590 < ( TYPE_129 ) VAR_591 ; VAR_592 ++ ) { if ( VAR_593 -> VAR_594 == VAR_595 ) VAR_596 = ( unsigned TYPE_130 ) ( ( * VAR_597 << 8 ) | * ( VAR_598 + 1 ) ) ; else VAR_599 = ( unsigned TYPE_131 ) ( * VAR_600 | ( * ( VAR_601 + 1 ) << 8 ) ) ; VAR_602 [ VAR_603 ] = ( TYPE_132 ) VAR_604 ; VAR_605 += 2 ; } break ; } case 0x1203 : { unsigned TYPE_133 VAR_606 ; if ( VAR_607 == ( unsigned TYPE_134 * ) VAR_608 ) break ; VAR_609 = ( TYPE_135 ) ( VAR_610 / 2 ) ; VAR_611 = ( TYPE_136 ) VAR_612 ; VAR_613 = ( TYPE_137 * ) METHOD_88 ( ( TYPE_138 ) VAR_614 , sizeof ( * VAR_615 ) ) ; if ( VAR_616 == ( TYPE_139 * ) VAR_617 ) METHOD_89 ( VAR_618 , ""MemoryAllocationFailed"" ) ; VAR_619 = VAR_620 ; for ( VAR_621 = 0 ; VAR_622 < ( TYPE_140 ) VAR_623 ; VAR_624 ++ ) { if ( VAR_625 -> VAR_626 == VAR_627 ) VAR_628 = ( unsigned TYPE_141 ) ( ( * VAR_629 << 8 ) | * ( VAR_630 + 1 ) ) ; else VAR_631 = ( unsigned TYPE_142 ) ( * VAR_632 | ( * ( VAR_633 + 1 ) << 8 ) ) ; VAR_634 [ VAR_635 ] = ( TYPE_143 ) VAR_636 ; VAR_637 += 2 ; } break ; } default : break ; } break ; } case 0x2050 : { switch ( VAR_638 ) { case 0x0020 : { if ( ( VAR_639 != ( unsigned TYPE_144 * ) VAR_640 ) && ( METHOD_90 ( ( TYPE_145 * ) VAR_641 , ""INVERSE"" , 7 ) == 0 ) ) VAR_642 = VAR_643 ; break ; } default : break ; } break ; } default : break ; } if ( VAR_644 != ( unsigned TYPE_146 * ) VAR_645 ) { TYPE_147 * VAR_646 ; for ( VAR_647 = 0 ; VAR_648 [ VAR_649 ] . VAR_650 != ( TYPE_148 * ) VAR_651 ; VAR_652 ++ ) if ( ( VAR_653 == VAR_654 [ VAR_655 ] . VAR_656 ) && ( VAR_657 == VAR_658 [ VAR_659 ] . VAR_660 ) ) break ; if ( VAR_661 [ VAR_662 ] . VAR_663 != ( TYPE_149 * ) VAR_664 ) { VAR_665 = METHOD_91 ( ""dcm:"" ) ; ( TYPE_150 ) METHOD_92 ( & VAR_666 , VAR_667 [ VAR_668 ] . VAR_669 ) ; for ( VAR_670 = 0 ; VAR_671 < ( TYPE_151 ) METHOD_93 ( VAR_672 , 4 ) ; VAR_673 ++ ) if ( METHOD_94 ( ( TYPE_152 ) VAR_674 [ VAR_675 ] ) == VAR_676 ) break ; if ( ( VAR_677 == ( TYPE_153 ) VAR_678 ) || ( VAR_679 > 4 ) ) { ( TYPE_154 ) METHOD_95 ( & VAR_680 , """" , """" ) ; ( TYPE_155 ) METHOD_96 ( VAR_681 , VAR_682 , ( TYPE_156 * ) VAR_683 , VAR_684 ) ; } VAR_685 = METHOD_97 ( VAR_686 ) ; } } if ( VAR_687 -> VAR_688 != VAR_689 ) { if ( VAR_690 == ( unsigned TYPE_157 * ) VAR_691 ) ( TYPE_158 ) METHOD_98 ( VAR_692 , ""%d\\n"" , VAR_693 ) ; else { for ( VAR_694 = 0 ; VAR_695 < ( TYPE_159 ) METHOD_99 ( VAR_696 , 4 ) ; VAR_697 ++ ) if ( METHOD_100 ( ( TYPE_160 ) VAR_698 [ VAR_699 ] ) == VAR_700 ) break ; if ( ( VAR_701 != ( TYPE_161 ) VAR_702 ) && ( VAR_703 <= 4 ) ) { TYPE_162 VAR_704 ; VAR_705 = 0 ; for ( VAR_706 = ( TYPE_163 ) VAR_707 - 1 ; VAR_708 >= 0 ; VAR_709 -- ) VAR_710 = ( 256 * VAR_711 + VAR_712 [ VAR_713 ] ) ; ( TYPE_164 ) METHOD_101 ( VAR_714 , ""%d"" , VAR_715 ) ; } else for ( VAR_716 = 0 ; VAR_717 < ( TYPE_165 ) VAR_718 ; VAR_719 ++ ) if ( METHOD_102 ( ( TYPE_166 ) VAR_720 [ VAR_721 ] ) != VAR_722 ) ( TYPE_167 ) METHOD_103 ( VAR_723 , ""%c"" , VAR_724 [ VAR_725 ] ) ; else ( TYPE_168 ) METHOD_104 ( VAR_726 , ""%c"" , '.' ) ; ( TYPE_169 ) METHOD_105 ( VAR_727 , ""\\n"" ) ; } } if ( VAR_728 != ( unsigned TYPE_170 * ) VAR_729 ) VAR_730 = ( unsigned TYPE_171 * ) METHOD_106 ( VAR_731 ) ; if ( METHOD_107 ( VAR_732 ) != VAR_733 ) { METHOD_108 ( VAR_734 , VAR_735 , ""UnexpectedEndOfFile"" , VAR_736 -> VAR_737 ) ; break ; } } if ( ( VAR_738 == 0 ) || ( VAR_739 == 0 ) ) METHOD_109 ( VAR_740 , ""ImproperImageHeader"" ) ; VAR_741 -> VAR_742 = ( TYPE_172 ) VAR_743 ; VAR_744 -> VAR_745 = ( TYPE_173 ) VAR_746 ; if ( VAR_747 == 0xffff ) VAR_748 = ( TYPE_174 ) ( VAR_749 == 16 ? 1 : 0 ) ; if ( ( VAR_750 -> VAR_751 == VAR_752 ) || ( VAR_753 -> VAR_754 == VAR_755 ) ) { TYPE_175 * VAR_756 ; TYPE_176 * VAR_757 ; TYPE_177 VAR_758 ; TYPE_178 VAR_759 ; unsigned TYPE_179 VAR_760 ; for ( VAR_761 = 0 ; VAR_762 < ( TYPE_180 ) VAR_763 -> VAR_764 ; VAR_765 ++ ) ( TYPE_181 ) METHOD_110 ( VAR_766 ) ; VAR_767 = ( METHOD_111 ( VAR_768 ) << 16 ) | METHOD_112 ( VAR_769 ) ; ( TYPE_182 ) VAR_770 ; VAR_771 = ( TYPE_183 ) METHOD_113 ( VAR_772 ) ; VAR_773 -> VAR_774 = VAR_775 >> 2 ; if ( VAR_776 -> VAR_777 != 0 ) { TYPE_184 VAR_778 ; VAR_779 -> VAR_780 = ( TYPE_185 * ) METHOD_114 ( VAR_781 -> VAR_782 , sizeof ( * VAR_783 -> VAR_784 ) ) ; if ( VAR_785 -> VAR_786 == ( TYPE_186 * ) VAR_787 ) METHOD_115 ( VAR_788 , ""MemoryAllocationFailed"" ) ; for ( VAR_789 = 0 ; VAR_790 < ( TYPE_187 ) VAR_791 -> VAR_792 ; VAR_793 ++ ) VAR_794 -> VAR_795 [ VAR_796 ] = ( TYPE_188 ) METHOD_116 ( VAR_797 ) ; VAR_798 = METHOD_117 ( VAR_799 ) ; for ( VAR_800 = 0 ; VAR_801 < ( TYPE_189 ) VAR_802 -> VAR_803 ; VAR_804 ++ ) VAR_805 -> VAR_806 [ VAR_807 ] += VAR_808 ; } VAR_809 = METHOD_118 ( VAR_810 ) ; METHOD_119 ( VAR_811 , ( TYPE_190 * ) VAR_812 , 0 ) ; VAR_813 = METHOD_120 ( ) ; for ( VAR_814 = 0 ; VAR_815 < ( TYPE_191 ) VAR_816 ; VAR_817 ++ ) { TYPE_192 VAR_818 [ VAR_819 ] ; const TYPE_193 * VAR_820 ; TYPE_194 * VAR_821 ; TYPE_195 * VAR_822 ; TYPE_196 VAR_823 ; unsigned TYPE_197 VAR_824 ; VAR_825 = ( METHOD_121 ( VAR_826 ) << 16 ) | METHOD_122 ( VAR_827 ) ; VAR_828 = ( TYPE_198 ) METHOD_123 ( VAR_829 ) ; if ( VAR_830 == 0xFFFEE0DD ) break ; if ( VAR_831 != 0xFFFEE000 ) METHOD_124 ( VAR_832 , ""ImproperImageHeader"" ) ; VAR_833 = ( TYPE_199 * ) VAR_834 ; VAR_835 = METHOD_125 ( VAR_836 ) ; if ( VAR_837 != - 1 ) VAR_838 = METHOD_126 ( VAR_839 , ""wb"" ) ; if ( VAR_840 == ( TYPE_200 * ) VAR_841 ) { ( TYPE_201 ) METHOD_127 ( VAR_842 ) ; METHOD_128 ( VAR_843 , VAR_844 , ""UnableToCreateTemporaryFile"" , VAR_845 ) ; break ; } for ( ; VAR_846 != 0 ; VAR_847 -- ) { VAR_848 = METHOD_129 ( VAR_849 ) ; if ( VAR_850 == VAR_851 ) { METHOD_130 ( VAR_852 , VAR_853 , ""UnexpectedEndOfFile"" , VAR_854 -> VAR_855 ) ; break ; } ( TYPE_202 ) METHOD_131 ( VAR_856 , VAR_857 ) ; } ( TYPE_203 ) METHOD_132 ( VAR_858 ) ; ( TYPE_204 ) METHOD_133 ( VAR_859 -> VAR_860 , VAR_861 , ""jpeg:%s"" , VAR_862 ) ; if ( VAR_863 -> VAR_864 == VAR_865 ) ( TYPE_205 ) METHOD_134 ( VAR_866 -> VAR_867 , VAR_868 , ""j2k:%s"" , VAR_869 ) ; VAR_870 = METHOD_135 ( VAR_871 , VAR_872 ) ; if ( VAR_873 != ( TYPE_206 * ) VAR_874 ) { METHOD_136 ( VAR_875 ) ; VAR_876 = METHOD_137 ( VAR_877 ) ; while ( VAR_878 != ( const TYPE_207 * ) VAR_879 ) { ( TYPE_208 ) METHOD_138 ( VAR_880 , VAR_881 , METHOD_139 ( VAR_882 , VAR_883 , VAR_884 ) , VAR_885 ) ; VAR_886 = METHOD_140 ( VAR_887 ) ; } METHOD_141 ( & VAR_888 , VAR_889 ) ; } ( TYPE_209 ) METHOD_142 ( VAR_890 ) ; } VAR_891 = METHOD_143 ( VAR_892 ) ; VAR_893 = METHOD_144 ( VAR_894 ) ; return ( METHOD_145 ( VAR_895 ) ) ; } if ( VAR_896 != ( 1UL * VAR_897 ) ) { TYPE_210 VAR_898 ; TYPE_211 VAR_899 ; VAR_900 = ( TYPE_212 ) ( METHOD_146 ( VAR_901 ) + 1 ) ; VAR_902 = ( TYPE_213 * ) METHOD_147 ( VAR_903 , sizeof ( * VAR_904 ) ) ; if ( VAR_905 == ( TYPE_214 * ) VAR_906 ) METHOD_148 ( VAR_907 , ""MemoryAllocationFailed"" ) ; VAR_908 = METHOD_149 ( VAR_909 ) ; for ( VAR_910 = 0 ; VAR_911 < ( TYPE_215 ) ( METHOD_150 ( VAR_912 ) + 1 ) ; VAR_913 ++ ) VAR_914 [ VAR_915 ] = METHOD_151 ( ( TYPE_216 ) VAR_916 , VAR_917 ) ; } if ( VAR_918 -> VAR_919 == VAR_920 ) { TYPE_217 VAR_921 ; unsigned TYPE_218 VAR_922 ; for ( VAR_923 = 0 ; VAR_924 < ( TYPE_219 ) VAR_925 -> VAR_926 ; VAR_927 ++ ) ( TYPE_220 ) METHOD_152 ( VAR_928 ) ; VAR_929 = ( METHOD_153 ( VAR_930 ) << 16 ) | METHOD_154 ( VAR_931 ) ; ( TYPE_221 ) VAR_932 ; VAR_933 = ( TYPE_222 ) METHOD_155 ( VAR_934 ) ; VAR_935 -> VAR_936 = VAR_937 >> 2 ; if ( VAR_938 -> VAR_939 != 0 ) { TYPE_223 VAR_940 ; VAR_941 -> VAR_942 = ( TYPE_224 * ) METHOD_156 ( VAR_943 -> VAR_944 , sizeof ( * VAR_945 -> VAR_946 ) ) ; if ( VAR_947 -> VAR_948 == ( TYPE_225 * ) VAR_949 ) METHOD_157 ( VAR_950 , ""MemoryAllocationFailed"" ) ; for ( VAR_951 = 0 ; VAR_952 < ( TYPE_226 ) VAR_953 -> VAR_954 ; VAR_955 ++ ) VAR_956 -> VAR_957 [ VAR_958 ] = ( TYPE_227 ) METHOD_158 ( VAR_959 ) ; VAR_960 = METHOD_159 ( VAR_961 ) ; for ( VAR_962 = 0 ; VAR_963 < ( TYPE_228 ) VAR_964 -> VAR_965 ; VAR_966 ++ ) VAR_967 -> VAR_968 [ VAR_969 ] += VAR_970 ; } } for ( VAR_971 = 0 ; VAR_972 < ( TYPE_229 ) VAR_973 ; VAR_974 ++ ) { if ( VAR_975 -> VAR_976 != VAR_977 ) break ; VAR_978 -> VAR_979 = ( TYPE_230 ) VAR_980 ; VAR_981 -> VAR_982 = ( TYPE_231 ) VAR_983 ; VAR_984 -> VAR_985 = VAR_986 ; VAR_987 = METHOD_160 ( VAR_988 , VAR_989 -> VAR_990 , VAR_991 -> VAR_992 , VAR_993 ) ; if ( VAR_994 == VAR_995 ) break ; VAR_996 -> VAR_997 = VAR_998 ; if ( ( VAR_999 -> VAR_1000 == ( TYPE_232 * ) VAR_1001 ) && ( VAR_1002 == 1 ) ) { TYPE_233 VAR_1003 ; VAR_1004 = 1 ; if ( VAR_1005 == 0 ) VAR_1006 = VAR_1007 << VAR_1008 ; if ( METHOD_161 ( VAR_1009 , VAR_1010 << VAR_1011 , VAR_1012 ) == VAR_1013 ) METHOD_162 ( VAR_1014 , ""MemoryAllocationFailed"" ) ; if ( VAR_1015 != ( TYPE_234 * ) VAR_1016 ) for ( VAR_1017 = 0 ; VAR_1018 < ( TYPE_235 ) VAR_1019 ; VAR_1020 ++ ) { VAR_1021 = VAR_1022 [ VAR_1023 ] ; if ( ( VAR_1024 != ( TYPE_236 * ) VAR_1025 ) && ( VAR_1026 <= ( TYPE_237 ) VAR_1027 ) ) VAR_1028 = ( TYPE_238 ) VAR_1029 [ VAR_1030 ] ; VAR_1031 -> VAR_1032 [ VAR_1033 ] . VAR_1034 = ( TYPE_239 ) VAR_1035 ; } if ( VAR_1036 != ( TYPE_240 * ) VAR_1037 ) for ( VAR_1038 = 0 ; VAR_1039 < ( TYPE_241 ) VAR_1040 ; VAR_1041 ++ ) { VAR_1042 = VAR_1043 [ VAR_1044 ] ; if ( ( VAR_1045 != ( TYPE_242 * ) VAR_1046 ) && ( VAR_1047 <= ( TYPE_243 ) VAR_1048 ) ) VAR_1049 = ( TYPE_244 ) VAR_1050 [ VAR_1051 ] ; VAR_1052 -> VAR_1053 [ VAR_1054 ] . VAR_1055 = ( TYPE_245 ) VAR_1056 ; } if ( VAR_1057 != ( TYPE_246 * ) VAR_1058 ) for ( VAR_1059 = 0 ; VAR_1060 < ( TYPE_247 ) VAR_1061 ; VAR_1062 ++ ) { VAR_1063 = VAR_1064 [ VAR_1065 ] ; if ( ( VAR_1066 != ( TYPE_248 * ) VAR_1067 ) && ( VAR_1068 <= ( TYPE_249 ) VAR_1069 ) ) VAR_1070 = ( TYPE_250 ) VAR_1071 [ VAR_1072 ] ; VAR_1073 -> VAR_1074 [ VAR_1075 ] . VAR_1076 = ( TYPE_251 ) VAR_1077 ; } if ( VAR_1078 != ( TYPE_252 * ) VAR_1079 ) for ( VAR_1080 = 0 ; VAR_1081 < ( TYPE_253 ) VAR_1082 ; VAR_1083 ++ ) { VAR_1084 = VAR_1085 [ VAR_1086 ] ; if ( ( VAR_1087 != ( TYPE_254 * ) VAR_1088 ) && ( VAR_1089 <= ( TYPE_255 ) VAR_1090 ) ) VAR_1091 = ( TYPE_256 ) VAR_1092 [ VAR_1093 ] ; VAR_1094 -> VAR_1095 [ VAR_1096 ] . VAR_1097 = ( TYPE_257 ) VAR_1098 ; VAR_1099 -> VAR_1100 [ VAR_1101 ] . VAR_1102 = ( TYPE_258 ) VAR_1103 ; VAR_1104 -> VAR_1105 [ VAR_1106 ] . VAR_1107 = ( TYPE_259 ) VAR_1108 ; } } if ( VAR_1109 -> VAR_1110 == VAR_1111 ) { unsigned TYPE_260 VAR_1112 ; for ( VAR_1113 = 0 ; VAR_1114 < ( TYPE_261 ) VAR_1115 -> VAR_1116 ; VAR_1117 ++ ) ( TYPE_262 ) METHOD_163 ( VAR_1118 ) ; VAR_1119 = ( METHOD_164 ( VAR_1120 ) << 16 ) | METHOD_165 ( VAR_1121 ) ; VAR_1122 -> VAR_1123 = ( TYPE_263 ) METHOD_166 ( VAR_1124 ) ; if ( ( VAR_1125 != 0xFFFEE000 ) || ( VAR_1126 -> VAR_1127 <= 64 ) || ( METHOD_167 ( VAR_1128 ) != VAR_1129 ) ) METHOD_168 ( VAR_1130 , ""ImproperImageHeader"" ) ; VAR_1131 -> VAR_1132 = 0 ; VAR_1133 -> VAR_1134 = METHOD_169 ( VAR_1135 ) ; if ( VAR_1136 -> VAR_1137 > 1 ) { VAR_1138 = 1 ; VAR_1139 = 8 ; } for ( VAR_1140 = 0 ; VAR_1141 < 15 ; VAR_1142 ++ ) VAR_1143 -> VAR_1144 [ VAR_1145 ] = ( TYPE_264 ) METHOD_170 ( VAR_1146 ) ; VAR_1147 -> VAR_1148 -= 64 ; } if ( ( VAR_1149 > 1 ) && ( VAR_1150 -> VAR_1151 == VAR_1152 ) ) { for ( VAR_1153 = 0 ; VAR_1154 < ( TYPE_265 ) VAR_1155 ; VAR_1156 ++ ) { for ( VAR_1157 = 0 ; VAR_1158 < ( TYPE_266 ) VAR_1159 -> VAR_1160 ; VAR_1161 ++ ) { VAR_1162 = METHOD_171 ( VAR_1163 , 0 , VAR_1164 , VAR_1165 -> VAR_1166 , 1 , VAR_1167 ) ; if ( VAR_1168 == ( TYPE_267 * ) VAR_1169 ) break ; for ( VAR_1170 = 0 ; VAR_1171 < ( TYPE_268 ) VAR_1172 -> VAR_1173 ; VAR_1174 ++ ) { switch ( ( TYPE_269 ) VAR_1175 ) { case 0 : { METHOD_172 ( VAR_1176 , METHOD_173 ( ( unsigned TYPE_270 ) METHOD_174 ( VAR_1177 , VAR_1178 ) ) , VAR_1179 ) ; break ; } case 1 : { METHOD_175 ( VAR_1180 , METHOD_176 ( ( unsigned TYPE_271 ) METHOD_177 ( VAR_1181 , VAR_1182 ) ) , VAR_1183 ) ; break ; } case 2 : { METHOD_178 ( VAR_1184 , METHOD_179 ( ( unsigned TYPE_272 ) METHOD_180 ( VAR_1185 , VAR_1186 ) ) , VAR_1187 ) ; break ; } case 3 : { METHOD_181 ( VAR_1188 , METHOD_182 ( ( unsigned TYPE_273 ) METHOD_183 ( VAR_1189 , VAR_1190 ) ) , VAR_1191 ) ; break ; } default : break ; } VAR_1192 += METHOD_184 ( VAR_1193 ) ; } if ( METHOD_185 ( VAR_1194 , VAR_1195 ) == VAR_1196 ) break ; if ( VAR_1197 -> VAR_1198 == ( TYPE_274 * ) VAR_1199 ) { VAR_1200 = METHOD_186 ( VAR_1201 , VAR_1202 , ( TYPE_275 ) VAR_1203 , VAR_1204 -> VAR_1205 ) ; if ( VAR_1206 == VAR_1207 ) break ; } } } } else { const TYPE_276 * VAR_1208 ; TYPE_277 VAR_1209 ; TYPE_278 VAR_1210 ; VAR_1211 = 0 ; VAR_1212 = 0 ; if ( ( VAR_1213 != 0 ) && ( VAR_1214 == 0 ) ) VAR_1215 = ( TYPE_279 ) VAR_1216 ; VAR_1217 = METHOD_187 ( VAR_1218 , ""dcm:display-range"" ) ; if ( VAR_1219 != ( const TYPE_280 * ) VAR_1220 ) { if ( METHOD_188 ( VAR_1221 , ""reset"" ) == 0 ) VAR_1222 = 0 ; } ( TYPE_281 ) METHOD_189 ( & VAR_1223 , 0 , sizeof ( VAR_1224 ) ) ; for ( VAR_1225 = 0 ; VAR_1226 < ( TYPE_282 ) VAR_1227 -> VAR_1228 ; VAR_1229 ++ ) { VAR_1230 = METHOD_190 ( VAR_1231 , 0 , VAR_1232 , VAR_1233 -> VAR_1234 , 1 , VAR_1235 ) ; if ( VAR_1236 == ( TYPE_283 * ) VAR_1237 ) break ; for ( VAR_1238 = 0 ; VAR_1239 < ( TYPE_284 ) VAR_1240 -> VAR_1241 ; VAR_1242 ++ ) { if ( VAR_1243 == 1 ) { TYPE_285 VAR_1244 ; if ( VAR_1245 == 1 ) VAR_1246 = VAR_1247 != VAR_1248 ? ( ( TYPE_286 ) VAR_1249 - METHOD_191 ( VAR_1250 , VAR_1251 ) ) : METHOD_192 ( VAR_1252 , VAR_1253 ) ; else if ( ( VAR_1254 != 12 ) || ( VAR_1255 != 12 ) ) { if ( VAR_1256 ) VAR_1257 = METHOD_193 ( VAR_1258 , VAR_1259 ) ; else VAR_1260 = METHOD_194 ( VAR_1261 , VAR_1262 ) ; if ( VAR_1263 != VAR_1264 ) VAR_1265 = ( TYPE_287 ) VAR_1266 - VAR_1267 ; } else { if ( ( VAR_1268 & 0x01 ) != 0 ) VAR_1269 = ( METHOD_195 ( VAR_1270 , VAR_1271 ) << 8 ) | VAR_1272 ; else { VAR_1273 = METHOD_196 ( VAR_1274 , VAR_1275 ) ; VAR_1276 = ( TYPE_288 ) ( VAR_1277 & 0x0f ) ; VAR_1278 >>= 4 ; } VAR_1279 ++ ; } VAR_1280 = ( VAR_1281 * VAR_1282 ) + VAR_1283 ; if ( VAR_1284 == 0 ) { if ( VAR_1285 == 1 ) VAR_1286 -= 32767 ; } else { TYPE_289 VAR_1287 , VAR_1288 ; VAR_1289 = ( TYPE_290 ) METHOD_197 ( ( TYPE_291 ) VAR_1290 - ( VAR_1291 - 1.0 ) / 2.0 - 0.5 ) ; VAR_1292 = ( TYPE_292 ) METHOD_198 ( ( TYPE_293 ) VAR_1293 + ( VAR_1294 - 1.0 ) / 2.0 + 0.5 ) ; if ( ( TYPE_294 ) VAR_1295 <= VAR_1296 ) VAR_1297 = 0 ; else if ( ( TYPE_295 ) VAR_1298 > VAR_1299 ) VAR_1300 = ( TYPE_296 ) VAR_1301 ; else VAR_1302 = ( TYPE_297 ) ( VAR_1303 * ( ( ( VAR_1304 - VAR_1305 - 0.5 ) / ( VAR_1306 - 1 ) ) + 0.5 ) ) ; } VAR_1307 &= VAR_1308 ; VAR_1309 = ( TYPE_298 ) METHOD_199 ( VAR_1310 , ( TYPE_299 ) VAR_1311 , VAR_1312 ) ; METHOD_200 ( VAR_1313 , ( TYPE_300 ) VAR_1314 , VAR_1315 ) ; VAR_1316 . VAR_1317 = ( unsigned TYPE_301 ) VAR_1318 -> VAR_1319 [ VAR_1320 ] . VAR_1321 ; VAR_1322 . VAR_1323 = ( unsigned TYPE_302 ) VAR_1324 -> VAR_1325 [ VAR_1326 ] . VAR_1327 ; VAR_1328 . VAR_1329 = ( unsigned TYPE_303 ) VAR_1330 -> VAR_1331 [ VAR_1332 ] . VAR_1333 ; } else { if ( VAR_1334 == 1 ) { VAR_1335 . VAR_1336 = ( unsigned TYPE_304 ) METHOD_201 ( VAR_1337 , VAR_1338 ) ; VAR_1339 . VAR_1340 = ( unsigned TYPE_305 ) METHOD_202 ( VAR_1341 , VAR_1342 ) ; VAR_1343 . VAR_1344 = ( unsigned TYPE_306 ) METHOD_203 ( VAR_1345 , VAR_1346 ) ; } else { VAR_1347 . VAR_1348 = METHOD_204 ( VAR_1349 , VAR_1350 ) ; VAR_1351 . VAR_1352 = METHOD_205 ( VAR_1353 , VAR_1354 ) ; VAR_1355 . VAR_1356 = METHOD_206 ( VAR_1357 , VAR_1358 ) ; } VAR_1359 . VAR_1360 &= VAR_1361 ; VAR_1362 . VAR_1363 &= VAR_1364 ; VAR_1365 . VAR_1366 &= VAR_1367 ; if ( VAR_1368 != ( TYPE_307 * ) VAR_1369 ) { VAR_1370 . VAR_1371 = VAR_1372 [ VAR_1373 . VAR_1374 ] ; VAR_1375 . VAR_1376 = VAR_1377 [ VAR_1378 . VAR_1379 ] ; VAR_1380 . VAR_1381 = VAR_1382 [ VAR_1383 . VAR_1384 ] ; } } METHOD_207 ( VAR_1385 , ( TYPE_308 ) VAR_1386 . VAR_1387 , VAR_1388 ) ; METHOD_208 ( VAR_1389 , ( TYPE_309 ) VAR_1390 . VAR_1391 , VAR_1392 ) ; METHOD_209 ( VAR_1393 , ( TYPE_310 ) VAR_1394 . VAR_1395 , VAR_1396 ) ; VAR_1397 += METHOD_210 ( VAR_1398 ) ; } if ( METHOD_211 ( VAR_1399 , VAR_1400 ) == VAR_1401 ) break ; if ( VAR_1402 -> VAR_1403 == ( TYPE_311 * ) VAR_1404 ) { VAR_1405 = METHOD_212 ( VAR_1406 , VAR_1407 , ( TYPE_312 ) VAR_1408 , VAR_1409 -> VAR_1410 ) ; if ( VAR_1411 == VAR_1412 ) break ; } } if ( VAR_1413 -> VAR_1414 > 1 ) for ( VAR_1415 = 0 ; VAR_1416 < ( TYPE_313 ) VAR_1417 -> VAR_1418 ; VAR_1419 ++ ) { VAR_1420 = METHOD_213 ( VAR_1421 , 0 , VAR_1422 , VAR_1423 -> VAR_1424 , 1 , VAR_1425 ) ; if ( VAR_1426 == ( TYPE_314 * ) VAR_1427 ) break ; for ( VAR_1428 = 0 ; VAR_1429 < ( TYPE_315 ) VAR_1430 -> VAR_1431 ; VAR_1432 ++ ) { if ( VAR_1433 == 1 ) { TYPE_316 VAR_1434 ; if ( VAR_1435 == 1 ) VAR_1436 = VAR_1437 != VAR_1438 ? ( ( TYPE_317 ) VAR_1439 - METHOD_214 ( VAR_1440 , VAR_1441 ) ) : METHOD_215 ( VAR_1442 , VAR_1443 ) ; else if ( ( VAR_1444 != 12 ) || ( VAR_1445 != 12 ) ) { VAR_1446 = ( TYPE_318 ) ( VAR_1447 != VAR_1448 ? ( VAR_1449 - METHOD_216 ( VAR_1450 , VAR_1451 ) ) : METHOD_217 ( VAR_1452 , VAR_1453 ) ) ; if ( VAR_1454 == 1 ) VAR_1455 = ( ( signed TYPE_319 ) VAR_1456 ) ; } else { if ( ( VAR_1457 & 0x01 ) != 0 ) VAR_1458 = ( METHOD_218 ( VAR_1459 , VAR_1460 ) << 8 ) | VAR_1461 ; else { VAR_1462 = METHOD_219 ( VAR_1463 , VAR_1464 ) ; VAR_1465 = ( TYPE_320 ) ( VAR_1466 & 0x0f ) ; VAR_1467 >>= 4 ; } VAR_1468 ++ ; } VAR_1469 = ( VAR_1470 * VAR_1471 ) + VAR_1472 ; if ( VAR_1473 == 0 ) { if ( VAR_1474 == 1 ) VAR_1475 -= 32767 ; } else { TYPE_321 VAR_1476 , VAR_1477 ; VAR_1478 = ( TYPE_322 ) METHOD_220 ( ( TYPE_323 ) VAR_1479 - ( VAR_1480 - 1.0 ) / 2.0 - 0.5 ) ; VAR_1481 = ( TYPE_324 ) METHOD_221 ( ( TYPE_325 ) VAR_1482 + ( VAR_1483 - 1.0 ) / 2.0 + 0.5 ) ; if ( ( TYPE_326 ) VAR_1484 <= VAR_1485 ) VAR_1486 = 0 ; else if ( ( TYPE_327 ) VAR_1487 > VAR_1488 ) VAR_1489 = ( TYPE_328 ) VAR_1490 ; else VAR_1491 = ( TYPE_329 ) ( VAR_1492 * ( ( ( VAR_1493 - VAR_1494 - 0.5 ) / ( VAR_1495 - 1 ) ) + 0.5 ) ) ; } VAR_1496 &= VAR_1497 ; VAR_1498 = ( TYPE_330 ) METHOD_222 ( VAR_1499 , ( TYPE_331 ) VAR_1500 , VAR_1501 ) ; METHOD_223 ( VAR_1502 , ( TYPE_332 ) ( ( ( TYPE_333 ) METHOD_224 ( VAR_1503 , VAR_1504 ) ) | ( ( ( TYPE_334 ) VAR_1505 ) << 8 ) ) , VAR_1506 ) ; VAR_1507 . VAR_1508 = ( unsigned TYPE_335 ) VAR_1509 -> VAR_1510 [ VAR_1511 ] . VAR_1512 ; VAR_1513 . VAR_1514 = ( unsigned TYPE_336 ) VAR_1515 -> VAR_1516 [ VAR_1517 ] . VAR_1518 ; VAR_1519 . VAR_1520 = ( unsigned TYPE_337 ) VAR_1521 -> VAR_1522 [ VAR_1523 ] . VAR_1524 ; } else { if ( VAR_1525 == 1 ) { VAR_1526 . VAR_1527 = ( unsigned TYPE_338 ) METHOD_225 ( VAR_1528 , VAR_1529 ) ; VAR_1530 . VAR_1531 = ( unsigned TYPE_339 ) METHOD_226 ( VAR_1532 , VAR_1533 ) ; VAR_1534 . VAR_1535 = ( unsigned TYPE_340 ) METHOD_227 ( VAR_1536 , VAR_1537 ) ; } else { VAR_1538 . VAR_1539 = METHOD_228 ( VAR_1540 , VAR_1541 ) ; VAR_1542 . VAR_1543 = METHOD_229 ( VAR_1544 , VAR_1545 ) ; VAR_1546 . VAR_1547 = METHOD_230 ( VAR_1548 , VAR_1549 ) ; } VAR_1550 . VAR_1551 &= VAR_1552 ; VAR_1553 . VAR_1554 &= VAR_1555 ; VAR_1556 . VAR_1557 &= VAR_1558 ; if ( VAR_1559 != ( TYPE_341 * ) VAR_1560 ) { VAR_1561 . VAR_1562 = VAR_1563 [ VAR_1564 . VAR_1565 ] ; VAR_1566 . VAR_1567 = VAR_1568 [ VAR_1569 . VAR_1570 ] ; VAR_1571 . VAR_1572 = VAR_1573 [ VAR_1574 . VAR_1575 ] ; } } METHOD_231 ( VAR_1576 , ( TYPE_342 ) ( ( ( TYPE_343 ) METHOD_232 ( VAR_1577 , VAR_1578 ) ) | ( ( ( TYPE_344 ) VAR_1579 . VAR_1580 ) << 8 ) ) , VAR_1581 ) ; METHOD_233 ( VAR_1582 , ( TYPE_345 ) ( ( ( TYPE_346 ) METHOD_234 ( VAR_1583 , VAR_1584 ) ) | ( ( ( TYPE_347 ) VAR_1585 . VAR_1586 ) << 8 ) ) , VAR_1587 ) ; METHOD_235 ( VAR_1588 , ( TYPE_348 ) ( ( ( TYPE_349 ) METHOD_236 ( VAR_1589 , VAR_1590 ) ) | ( ( ( TYPE_350 ) VAR_1591 . VAR_1592 ) << 8 ) ) , VAR_1593 ) ; VAR_1594 += METHOD_237 ( VAR_1595 ) ; } if ( METHOD_238 ( VAR_1596 , VAR_1597 ) == VAR_1598 ) break ; if ( VAR_1599 -> VAR_1600 == ( TYPE_351 * ) VAR_1601 ) { VAR_1602 = METHOD_239 ( VAR_1603 , VAR_1604 , ( TYPE_352 ) VAR_1605 , VAR_1606 -> VAR_1607 ) ; if ( VAR_1608 == VAR_1609 ) break ; } } } if ( METHOD_240 ( VAR_1610 , VAR_1611 ) != VAR_1612 ) ( TYPE_353 ) METHOD_241 ( VAR_1613 , VAR_1614 , VAR_1615 ) ; if ( METHOD_242 ( VAR_1616 ) != VAR_1617 ) { METHOD_243 ( VAR_1618 , VAR_1619 , ""UnexpectedEndOfFile"" , VAR_1620 -> VAR_1621 ) ; break ; } if ( VAR_1622 -> VAR_1623 != 0 ) if ( VAR_1624 -> VAR_1625 >= ( VAR_1626 -> VAR_1627 + VAR_1628 -> VAR_1629 - 1 ) ) break ; if ( VAR_1630 < ( TYPE_354 ) ( VAR_1631 - 1 ) ) { METHOD_244 ( VAR_1632 , VAR_1633 , VAR_1634 ) ; if ( METHOD_245 ( VAR_1635 ) == ( TYPE_355 * ) VAR_1636 ) { VAR_1637 = METHOD_246 ( VAR_1638 ) ; return ( ( TYPE_356 * ) VAR_1639 ) ; } VAR_1640 = METHOD_247 ( VAR_1641 ) ; VAR_1642 = METHOD_248 ( VAR_1643 , VAR_1644 , METHOD_249 ( VAR_1645 ) , METHOD_250 ( VAR_1646 ) ) ; if ( VAR_1647 == VAR_1648 ) break ; } } if ( VAR_1649 -> VAR_1650 != ( TYPE_357 * ) VAR_1651 ) VAR_1652 -> VAR_1653 = ( TYPE_358 * ) METHOD_251 ( VAR_1654 -> VAR_1655 ) ; VAR_1656 = ( TYPE_359 * ) METHOD_252 ( VAR_1657 ) ; if ( VAR_1658 != ( TYPE_360 * ) VAR_1659 ) VAR_1660 = ( TYPE_361 * ) METHOD_253 ( VAR_1661 ) ; if ( VAR_1662 != ( TYPE_362 * ) VAR_1663 ) VAR_1664 = ( TYPE_363 * ) METHOD_254 ( VAR_1665 ) ; if ( VAR_1666 != ( TYPE_364 * ) VAR_1667 ) VAR_1668 = ( TYPE_365 * ) METHOD_255 ( VAR_1669 ) ; if ( VAR_1670 != ( TYPE_366 * ) VAR_1671 ) VAR_1672 = ( TYPE_367 * ) METHOD_256 ( VAR_1673 ) ; if ( VAR_1674 != ( TYPE_368 * ) VAR_1675 ) VAR_1676 = ( TYPE_369 * ) METHOD_257 ( VAR_1677 ) ; ( TYPE_370 ) METHOD_258 ( VAR_1678 ) ; return ( METHOD_259 ( VAR_1679 ) ) ; }",403
404,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) {  TYPE_7 VAR_6 = METHOD_1 ( VAR_7 ) ;  TYPE_8 VAR_8 = METHOD_2 ( VAR_9 , VAR_10 ) ; METHOD_3 ( VAR_11 == VAR_12 ) ;  if ( VAR_13 > VAR_14 * VAR_15 -> VAR_16 ) {  DPRINTF ( ( ""Outofboundsread%"" SIZE_T_FORMAT ""u>%"" SIZE_T_FORMAT ""u\\n"" ,  VAR_17 , VAR_18 * VAR_19 -> VAR_20 ) ) ;  return - 1 ; } ( TYPE_9 ) METHOD_4 ( ( ( TYPE_10 * ) VAR_21 ) + VAR_22 , ( ( const TYPE_11 * ) VAR_23 -> VAR_24 ) + VAR_25 , VAR_26 ) ; return VAR_27 ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 = METHOD_1 ( VAR_7 ) ; TYPE_8 VAR_8 = METHOD_2 ( VAR_9 , VAR_10 ) ; METHOD_3 ( VAR_11 == VAR_12 ) ; if ( VAR_13 > VAR_14 * VAR_15 -> VAR_16 ) { DPRINTF ( ( ""Outofboundsread%"" SIZE_T_FORMAT ""u>%"" SIZE_T_FORMAT ""u\\n"" , VAR_17 , VAR_18 * VAR_19 -> VAR_20 ) ) ; return - 1 ; } ( TYPE_9 ) METHOD_4 ( ( ( TYPE_10 * ) VAR_21 ) + VAR_22 , ( ( const TYPE_11 * ) VAR_23 -> VAR_24 ) + VAR_25 , VAR_26 ) ; return VAR_27 ; }",404
405,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_9 * VAR_12 ; TYPE_10 * VAR_13 ; TYPE_11 * VAR_14 ; ( * VAR_15 ) = 0 ; ( * VAR_16 ) = ( * VAR_17 ) = 0 ; if ( VAR_18 ) ( * VAR_19 ) = VAR_20 ; if ( ! VAR_21 || ! VAR_22 ) return VAR_23 ; if ( ! VAR_24 -> VAR_25 || ! VAR_26 -> VAR_27 || ! VAR_28 -> VAR_29 ) return VAR_30 ; if ( VAR_31 -> VAR_32 && VAR_33 -> VAR_34 -> VAR_35 == VAR_36 -> VAR_37 -> VAR_38 ) { VAR_39 = & VAR_40 -> VAR_41 -> VAR_42 [ VAR_43 - 1 ] ; if ( ! VAR_44 ) return VAR_45 ; ( * VAR_46 ) = VAR_47 -> VAR_48 ; ( * VAR_49 ) = VAR_50 ; if ( VAR_51 ) * VAR_52 = VAR_53 ; if ( VAR_54 -> VAR_55 -> VAR_56 == VAR_57 ) { VAR_58 = ( TYPE_12 * ) VAR_59 -> VAR_60 ; if ( ! VAR_61 -> VAR_62 ) return VAR_63 ;  ( * VAR_64 ) = ( TYPE_13 ) VAR_65 -> VAR_66 [ VAR_67 - 1 ] ;  } else { VAR_68 = ( TYPE_14 * ) VAR_69 -> VAR_70 ;  if ( ! VAR_71 -> VAR_72 ) return VAR_73 ;  ( * VAR_74 ) = VAR_75 -> VAR_76 [ VAR_77 - 1 ] ; } return VAR_78 ; } if ( VAR_79 -> VAR_80 -> VAR_81 && ( VAR_82 -> VAR_83 -> VAR_84 <= VAR_85 ) ) { VAR_86 = VAR_87 -> VAR_88 -> VAR_89 ; VAR_90 = & VAR_91 -> VAR_92 -> VAR_93 [ VAR_94 -> VAR_95 -> VAR_96 ] ; METHOD_1 ( VAR_97 , VAR_98 , VAR_99 -> VAR_100 -> VAR_101 , VAR_102 ) ; VAR_103 = VAR_104 -> VAR_105 -> VAR_106 ; } else { VAR_107 = 0 ; VAR_108 -> VAR_109 -> VAR_110 = 0 ; VAR_111 -> VAR_112 -> VAR_113 = 1 ; VAR_114 -> VAR_115 -> VAR_116 = 1 ; VAR_117 -> VAR_118 -> VAR_119 = 1 ; VAR_120 = & VAR_121 -> VAR_122 -> VAR_123 [ 0 ] ; METHOD_2 ( VAR_124 , 0 , VAR_125 -> VAR_126 -> VAR_127 , VAR_128 ) ; VAR_129 = VAR_130 -> VAR_131 -> VAR_132 ; } for ( ; VAR_133 < VAR_134 -> VAR_135 -> VAR_136 ; VAR_137 ++ ) { METHOD_3 ( VAR_138 -> VAR_139 -> VAR_140 <= VAR_141 ) ; if ( VAR_142 > VAR_143 -> VAR_144 -> VAR_145 ) { return VAR_146 ; } TYPE_15 VAR_147 = VAR_148 -> VAR_149 -> VAR_150 - VAR_151 ; TYPE_16 VAR_152 = VAR_153 - VAR_154 -> VAR_155 -> VAR_156 ; if ( VAR_157 -> VAR_158 ) VAR_159 /= VAR_160 -> VAR_161 ; if ( ( VAR_162 <= VAR_163 ) && ( VAR_164 -> VAR_165 -> VAR_166 + ( VAR_167 + 1 ) * VAR_168 -> VAR_169 > VAR_170 ) ) { VAR_171 -> VAR_172 -> VAR_173 += VAR_174 * VAR_175 -> VAR_176 ; VAR_177 -> VAR_178 -> VAR_179 += VAR_180 ; goto VAR_181 ; } VAR_182 += 1 ; VAR_183 -> VAR_184 -> VAR_185 += VAR_186 * VAR_187 -> VAR_188 ; VAR_189 -> VAR_190 -> VAR_191 += VAR_192 ; if ( VAR_193 + 1 != VAR_194 -> VAR_195 -> VAR_196 ) { VAR_197 = & VAR_198 -> VAR_199 -> VAR_200 [ VAR_201 + 1 ] ; METHOD_4 ( VAR_202 , VAR_203 + 1 , VAR_204 -> VAR_205 -> VAR_206 , VAR_207 ) ; VAR_208 -> VAR_209 -> VAR_210 = VAR_211 + 1 ; VAR_212 -> VAR_213 -> VAR_214 = 1 ; VAR_215 = 1 ; } } return VAR_216 ; VAR_217 : ( * VAR_218 ) = VAR_219 -> VAR_220 ; ( * VAR_221 ) = VAR_222 = VAR_223 -> VAR_224 + VAR_225 -> VAR_226 -> VAR_227 - 1 ; if ( VAR_228 ) * VAR_229 = VAR_230 ; if ( ! * VAR_231 ) return VAR_232 ; VAR_233 = 0 ; if ( VAR_234 -> VAR_235 && VAR_236 -> VAR_237 -> VAR_238 ) { TYPE_17 VAR_239 = VAR_240 - VAR_241 -> VAR_242 -> VAR_243 ; VAR_244 += VAR_245 * VAR_246 -> VAR_247 -> VAR_248 ; } else if ( ( VAR_249 -> VAR_250 == VAR_251 ) && ( VAR_252 -> VAR_253 == VAR_254 ) ) { VAR_255 = VAR_256 -> VAR_257 ; } else if ( ( VAR_258 -> VAR_259 == VAR_260 ) && ( VAR_261 -> VAR_262 + 1 == VAR_263 ) ) { VAR_264 = METHOD_5 ( VAR_265 -> VAR_266 , VAR_267 -> VAR_268 , & VAR_269 ) ; if ( VAR_270 ) return VAR_271 ; VAR_272 -> VAR_273 += VAR_274 ; VAR_275 -> VAR_276 = VAR_277 ; VAR_278 = VAR_279 -> VAR_280 ; } else { for ( VAR_281 = VAR_282 -> VAR_283 -> VAR_284 ; VAR_285 < VAR_286 ; VAR_287 ++ ) { VAR_288 = METHOD_6 ( VAR_289 -> VAR_290 , VAR_291 , & VAR_292 ) ; if ( VAR_293 ) return VAR_294 ; VAR_295 += VAR_296 ; } VAR_297 -> VAR_298 = VAR_299 ; VAR_300 -> VAR_301 = VAR_302 ; VAR_303 -> VAR_304 = VAR_305 ; } if ( VAR_306 -> VAR_307 -> VAR_308 == VAR_309 ) { VAR_310 = ( TYPE_18 * ) VAR_311 -> VAR_312 ; if ( VAR_313 -> VAR_314 < ( * VAR_315 ) ) return VAR_316 ; ( * VAR_317 ) = ( TYPE_19 ) VAR_318 -> VAR_319 [ ( * VAR_320 ) - 1 ] + ( TYPE_20 ) VAR_321 ; } else { VAR_322 = ( TYPE_21 * ) VAR_323 -> VAR_324 ; if ( VAR_325 -> VAR_326 < ( * VAR_327 ) ) return VAR_328 ; ( * VAR_329 ) = VAR_330 -> VAR_331 [ ( * VAR_332 ) - 1 ] + ( TYPE_22 ) VAR_333 ; } return VAR_334 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_9 * VAR_12 ; TYPE_10 * VAR_13 ; TYPE_11 * VAR_14 ; ( * VAR_15 ) = 0 ; ( * VAR_16 ) = ( * VAR_17 ) = 0 ; if ( VAR_18 ) ( * VAR_19 ) = VAR_20 ; if ( ! VAR_21 || ! VAR_22 ) return VAR_23 ; if ( ! VAR_24 -> VAR_25 || ! VAR_26 -> VAR_27 || ! VAR_28 -> VAR_29 ) return VAR_30 ; if ( VAR_31 -> VAR_32 && VAR_33 -> VAR_34 -> VAR_35 == VAR_36 -> VAR_37 -> VAR_38 ) { VAR_39 = & VAR_40 -> VAR_41 -> VAR_42 [ VAR_43 - 1 ] ; if ( ! VAR_44 ) return VAR_45 ; ( * VAR_46 ) = VAR_47 -> VAR_48 ; ( * VAR_49 ) = VAR_50 ; if ( VAR_51 ) * VAR_52 = VAR_53 ; if ( VAR_54 -> VAR_55 -> VAR_56 == VAR_57 ) { VAR_58 = ( TYPE_12 * ) VAR_59 -> VAR_60 ; if ( ! VAR_61 -> VAR_62 ) return VAR_63 ; ( * VAR_64 ) = ( TYPE_13 ) VAR_65 -> VAR_66 [ VAR_67 - 1 ] ; } else { VAR_68 = ( TYPE_14 * ) VAR_69 -> VAR_70 ; if ( ! VAR_71 -> VAR_72 ) return VAR_73 ; ( * VAR_74 ) = VAR_75 -> VAR_76 [ VAR_77 - 1 ] ; } return VAR_78 ; } if ( VAR_79 -> VAR_80 -> VAR_81 && ( VAR_82 -> VAR_83 -> VAR_84 <= VAR_85 ) ) { VAR_86 = VAR_87 -> VAR_88 -> VAR_89 ; VAR_90 = & VAR_91 -> VAR_92 -> VAR_93 [ VAR_94 -> VAR_95 -> VAR_96 ] ; METHOD_1 ( VAR_97 , VAR_98 , VAR_99 -> VAR_100 -> VAR_101 , VAR_102 ) ; VAR_103 = VAR_104 -> VAR_105 -> VAR_106 ; } else { VAR_107 = 0 ; VAR_108 -> VAR_109 -> VAR_110 = 0 ; VAR_111 -> VAR_112 -> VAR_113 = 1 ; VAR_114 -> VAR_115 -> VAR_116 = 1 ; VAR_117 -> VAR_118 -> VAR_119 = 1 ; VAR_120 = & VAR_121 -> VAR_122 -> VAR_123 [ 0 ] ; METHOD_2 ( VAR_124 , 0 , VAR_125 -> VAR_126 -> VAR_127 , VAR_128 ) ; VAR_129 = VAR_130 -> VAR_131 -> VAR_132 ; } for ( ; VAR_133 < VAR_134 -> VAR_135 -> VAR_136 ; VAR_137 ++ ) { METHOD_3 ( VAR_138 -> VAR_139 -> VAR_140 <= VAR_141 ) ; if ( VAR_142 > VAR_143 -> VAR_144 -> VAR_145 ) { return VAR_146 ; } TYPE_15 VAR_147 = VAR_148 -> VAR_149 -> VAR_150 - VAR_151 ; TYPE_16 VAR_152 = VAR_153 - VAR_154 -> VAR_155 -> VAR_156 ; if ( VAR_157 -> VAR_158 ) VAR_159 /= VAR_160 -> VAR_161 ; if ( ( VAR_162 <= VAR_163 ) && ( VAR_164 -> VAR_165 -> VAR_166 + ( VAR_167 + 1 ) * VAR_168 -> VAR_169 > VAR_170 ) ) { VAR_171 -> VAR_172 -> VAR_173 += VAR_174 * VAR_175 -> VAR_176 ; VAR_177 -> VAR_178 -> VAR_179 += VAR_180 ; goto VAR_181 ; } VAR_182 += 1 ; VAR_183 -> VAR_184 -> VAR_185 += VAR_186 * VAR_187 -> VAR_188 ; VAR_189 -> VAR_190 -> VAR_191 += VAR_192 ; if ( VAR_193 + 1 != VAR_194 -> VAR_195 -> VAR_196 ) { VAR_197 = & VAR_198 -> VAR_199 -> VAR_200 [ VAR_201 + 1 ] ; METHOD_4 ( VAR_202 , VAR_203 + 1 , VAR_204 -> VAR_205 -> VAR_206 , VAR_207 ) ; VAR_208 -> VAR_209 -> VAR_210 = VAR_211 + 1 ; VAR_212 -> VAR_213 -> VAR_214 = 1 ; VAR_215 = 1 ; } } return VAR_216 ; VAR_217 : ( * VAR_218 ) = VAR_219 -> VAR_220 ; ( * VAR_221 ) = VAR_222 = VAR_223 -> VAR_224 + VAR_225 -> VAR_226 -> VAR_227 - 1 ; if ( VAR_228 ) * VAR_229 = VAR_230 ; if ( ! * VAR_231 ) return VAR_232 ; VAR_233 = 0 ; if ( VAR_234 -> VAR_235 && VAR_236 -> VAR_237 -> VAR_238 ) { TYPE_17 VAR_239 = VAR_240 - VAR_241 -> VAR_242 -> VAR_243 ; VAR_244 += VAR_245 * VAR_246 -> VAR_247 -> VAR_248 ; } else if ( ( VAR_249 -> VAR_250 == VAR_251 ) && ( VAR_252 -> VAR_253 == VAR_254 ) ) { VAR_255 = VAR_256 -> VAR_257 ; } else if ( ( VAR_258 -> VAR_259 == VAR_260 ) && ( VAR_261 -> VAR_262 + 1 == VAR_263 ) ) { VAR_264 = METHOD_5 ( VAR_265 -> VAR_266 , VAR_267 -> VAR_268 , & VAR_269 ) ; if ( VAR_270 ) return VAR_271 ; VAR_272 -> VAR_273 += VAR_274 ; VAR_275 -> VAR_276 = VAR_277 ; VAR_278 = VAR_279 -> VAR_280 ; } else { for ( VAR_281 = VAR_282 -> VAR_283 -> VAR_284 ; VAR_285 < VAR_286 ; VAR_287 ++ ) { VAR_288 = METHOD_6 ( VAR_289 -> VAR_290 , VAR_291 , & VAR_292 ) ; if ( VAR_293 ) return VAR_294 ; VAR_295 += VAR_296 ; } VAR_297 -> VAR_298 = VAR_299 ; VAR_300 -> VAR_301 = VAR_302 ; VAR_303 -> VAR_304 = VAR_305 ; } if ( VAR_306 -> VAR_307 -> VAR_308 == VAR_309 ) { VAR_310 = ( TYPE_18 * ) VAR_311 -> VAR_312 ; if ( VAR_313 -> VAR_314 < ( * VAR_315 ) ) return VAR_316 ; ( * VAR_317 ) = ( TYPE_19 ) VAR_318 -> VAR_319 [ ( * VAR_320 ) - 1 ] + ( TYPE_20 ) VAR_321 ; } else { VAR_322 = ( TYPE_21 * ) VAR_323 -> VAR_324 ; if ( VAR_325 -> VAR_326 < ( * VAR_327 ) ) return VAR_328 ; if ( VAR_318 -> VAR_326 < VAR_302 ) return VAR_328 ; ( * VAR_329 ) = VAR_330 -> VAR_331 ) return VAR_328 ; if ( VAR_330 -> VAR_326 < VAR_302 [ ( * VAR_332 ) - 1 ] + ( TYPE_22 ) VAR_333 ; } return VAR_334 ; }",405
406,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 , * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; VAR_9 = METHOD_2 ( METHOD_3 ( VAR_10 ) , VAR_11 , VAR_12 , VAR_13 -> VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) goto VAR_17 ; METHOD_4 ( VAR_18 , VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) ; METHOD_6 ( VAR_23 , VAR_24 ) ; VAR_25 = ( struct STRUCT_OR_UNION_7 * ) VAR_26 ; METHOD_7 ( VAR_27 ) -> VAR_28 = & VAR_29 -> VAR_30 ; METHOD_8 ( VAR_31 ) -> VAR_32 = METHOD_9 ( VAR_33 ) -> VAR_34 ; VAR_35 = METHOD_10 ( VAR_36 ) ;  METHOD_11 ( VAR_37 , VAR_38 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ;  METHOD_12 ( ) ; VAR_39 = METHOD_13 ( VAR_40 -> VAR_41 ) ; if ( VAR_42 ) VAR_43 = METHOD_14 ( VAR_44 , VAR_45 ) ; METHOD_15 ( VAR_46 -> VAR_47 , VAR_48 ) ; METHOD_16 ( ) ; METHOD_17 ( & VAR_49 -> VAR_50 . VAR_51 , VAR_52 ) ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; METHOD_18 ( VAR_57 ) ; if ( VAR_58 -> VAR_59 -> METHOD_19 ( VAR_60 ) ) { METHOD_20 ( VAR_61 ) ; VAR_62 = VAR_63 ; } VAR_64 : return VAR_65 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , TYPE_0 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 , * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_7 ; struct STRUCT_OR_UNION_6 * VAR_8 ; VAR_9 = METHOD_2 ( METHOD_3 ( VAR_10 ) , VAR_11 , VAR_12 , VAR_13 -> VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) goto VAR_17 ; METHOD_4 ( VAR_18 , VAR_19 ) ; METHOD_5 ( VAR_20 , VAR_21 , VAR_22 ) ; METHOD_6 ( VAR_23 , VAR_24 ) ; VAR_25 = ( struct STRUCT_OR_UNION_7 * ) VAR_26 ; METHOD_7 ( VAR_27 ) -> VAR_28 = & VAR_29 -> VAR_30 ; METHOD_8 ( VAR_31 ) -> VAR_32 = METHOD_9 ( VAR_33 ) -> VAR_34 ; VAR_35 = METHOD_10 ( VAR_36 ) ; METHOD_11 ( VAR_37 , VAR_38 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; VAR_46 -> VAR_66 = VAR_63 ; VAR_46 -> VAR_67 = VAR_63 ; VAR_46 -> VAR_68 = VAR_63 ; METHOD_12 ( ) ; VAR_39 = METHOD_13 ( VAR_40 -> VAR_41 ) ; if ( VAR_42 ) VAR_43 = METHOD_14 ( VAR_44 , VAR_45 ) ; METHOD_15 ( VAR_46 -> VAR_47 , VAR_48 ) ; METHOD_16 ( ) ; METHOD_17 ( & VAR_49 -> VAR_50 . VAR_51 , VAR_52 ) ; VAR_53 -> VAR_54 = VAR_55 -> VAR_56 ; METHOD_18 ( VAR_57 ) ; if ( VAR_58 -> VAR_59 -> METHOD_19 ( VAR_60 ) ) { METHOD_20 ( VAR_61 ) ; VAR_62 = VAR_63 ; } VAR_64 : return VAR_65 ; }",406
407,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( & VAR_1 -> VAR_2 ) ;  METHOD_2 ( VAR_3 -> VAR_4 . VAR_5 . VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) ;  { TYPE_2 VAR_9 [ 2 ] = { 1 , 1 } ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , ( const TYPE_3 * ) VAR_13 -> VAR_14 . VAR_15 . VAR_16 , VAR_17 ) ; }  METHOD_4 ( & VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 . VAR_22 , sizeof ( VAR_23 -> VAR_24 . VAR_25 ) ) ;   METHOD_5 ( & VAR_26 -> VAR_27 , & VAR_28 -> VAR_29 . VAR_30 , sizeof ( VAR_31 -> VAR_32 . VAR_33 ) ) ;   METHOD_6 ( & VAR_34 -> VAR_35 , & VAR_36 -> VAR_37 . VAR_38 , sizeof ( VAR_39 -> VAR_40 . VAR_41 ) ) ;  VAR_42 -> VAR_43 . VAR_44 = VAR_45 -> VAR_46 . VAR_47 * 3 / 8 ; if ( VAR_48 -> VAR_49 ) VAR_50 -> VAR_51 = VAR_52 -> VAR_53 ; else VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 . VAR_59 = 1 ; VAR_60 -> VAR_61 . VAR_62 = 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( & VAR_1 -> VAR_2 ) ; METHOD_2 ( VAR_3 -> VAR_4 . VAR_5 . VAR_6 , VAR_7 , sizeof ( VAR_8 ) ) ; { TYPE_2 VAR_9 [ 2 ] = { 1 , 1 } ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , ( const TYPE_3 * ) VAR_13 -> VAR_14 . VAR_15 . VAR_16 , VAR_17 ) ; } METHOD_4 ( & VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 . VAR_22 , sizeof ( VAR_23 -> VAR_24 . VAR_25 ) ) ; METHOD_5 ( & VAR_26 -> VAR_27 , & VAR_28 -> VAR_29 . VAR_30 , sizeof ( VAR_31 -> VAR_32 . VAR_33 ) ) ; METHOD_6 ( & VAR_34 -> VAR_35 , & VAR_36 -> VAR_37 . VAR_38 , sizeof ( VAR_39 -> VAR_40 . VAR_41 ) ) ; VAR_42 -> VAR_43 . VAR_44 = VAR_45 -> VAR_46 . VAR_47 * 3 / 8 ; if ( VAR_48 -> VAR_49 ) VAR_50 -> VAR_51 = VAR_52 -> VAR_53 ; else VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 . VAR_59 = 1 ; VAR_60 -> VAR_61 . VAR_62 = 1 ; }",407
408,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 , VAR_3 , VAR_4 = 0 ; METHOD_1 ( VAR_5 , VAR_6 ) ; METHOD_2 ( & VAR_7 , 0 , sizeof ( VAR_8 ) ) ; VAR_9 . VAR_10 = METHOD_3 ( VAR_11 ) ; METHOD_4 ( VAR_12 , ""Resourcelength:%d(0x%04X)\\n"" , VAR_13 . VAR_14 , VAR_15 . VAR_16 ) ; if ( VAR_17 . VAR_18 > METHOD_5 ( VAR_19 -> VAR_20 ) ) { VAR_21 . VAR_22 = METHOD_6 ( 1 , VAR_23 . VAR_24 ) ; VAR_25 . VAR_26 = VAR_27 ; } else { VAR_28 . VAR_29 = VAR_30 -> VAR_31 ; VAR_32 . VAR_33 = VAR_34 ; } ; METHOD_7 ( VAR_35 . VAR_36 , VAR_37 . VAR_38 , 1 , VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 = VAR_44 . VAR_45 ; VAR_46 . VAR_47 = METHOD_8 ( & VAR_48 , 0 ) ; VAR_49 . VAR_50 = METHOD_9 ( & VAR_51 , 4 ) ; VAR_52 . VAR_53 = METHOD_10 ( & VAR_54 , 8 ) ; VAR_55 . VAR_56 = METHOD_11 ( & VAR_57 , 12 ) ; if ( VAR_58 . VAR_59 == 0x51607 && VAR_60 . VAR_61 == 0x20000 ) { METHOD_12 ( VAR_62 , ""Tryingoffsetof0x52bytes.\\n"" ) ; VAR_63 . VAR_64 = METHOD_13 ( & VAR_65 , 0x52 + 0 ) + 0x52 ; VAR_66 . VAR_67 = METHOD_14 ( & VAR_68 , 0x52 + 4 ) + 0x52 ; VAR_69 . VAR_70 = METHOD_15 ( & VAR_71 , 0x52 + 8 ) ; VAR_72 . VAR_73 = METHOD_16 ( & VAR_74 , 0x52 + 12 ) ; } ; METHOD_17 ( VAR_75 , ""dataoffset:0x%04X\\nmapoffset:0x%04X\\n"" ""datalength:0x%04X\\nmaplength:0x%04X\\n"" , VAR_76 . VAR_77 , VAR_78 . VAR_79 , VAR_80 . VAR_81 , VAR_82 . VAR_83 ) ; if ( VAR_84 . VAR_85 > VAR_86 . VAR_87 ) { METHOD_18 ( VAR_88 , ""Error:rsrc.data_offset(%d,0x%x)>len\\n"" , VAR_89 . VAR_90 , VAR_91 . VAR_92 ) ; VAR_93 = VAR_94 ; goto VAR_95 ; } ; if ( VAR_96 . VAR_97 > VAR_98 . VAR_99 ) { METHOD_19 ( VAR_100 , ""Error:rsrc.map_offset>len\\n"" ) ; VAR_101 = VAR_102 ; goto VAR_103 ; } ; if ( VAR_104 . VAR_105 > VAR_106 . VAR_107 ) { METHOD_20 ( VAR_108 , ""Error:rsrc.data_length>len\\n"" ) ; VAR_109 = VAR_110 ; goto VAR_111 ; } ; if ( VAR_112 . VAR_113 > VAR_114 . VAR_115 ) { METHOD_21 ( VAR_116 , ""Error:rsrc.map_length>len\\n"" ) ; VAR_117 = VAR_118 ; goto VAR_119 ; } ; if ( VAR_120 . VAR_121 + VAR_122 . VAR_123 != VAR_124 . VAR_125 || VAR_126 . VAR_127 + VAR_128 . VAR_129 != VAR_130 . VAR_131 ) { METHOD_22 ( VAR_132 , ""Error:ThisdoesnotlooklikeaMacOSXresourcefork.\\n"" ) ; VAR_133 = VAR_134 ; goto VAR_135 ; } ; if ( VAR_136 . VAR_137 + 28 >= VAR_138 . VAR_139 ) { METHOD_23 ( VAR_140 , ""Badmapoffset(%d+28>%d).\\n"" , VAR_141 . VAR_142 , VAR_143 . VAR_144 ) ; VAR_145 = VAR_146 ; goto VAR_147 ; } ; VAR_148 . VAR_149 = VAR_150 . VAR_151 + METHOD_24 ( & VAR_152 , VAR_153 . VAR_154 + 26 ) ; if ( VAR_155 . VAR_156 > VAR_157 . VAR_158 ) { METHOD_25 ( VAR_159 , ""Badstringoffset(%d).\\n"" , VAR_160 . VAR_161 ) ; VAR_162 = VAR_163 ; goto VAR_164 ; } ; VAR_165 . VAR_166 = VAR_167 . VAR_168 + 30 ;  VAR_169 . VAR_170 = METHOD_26 ( & VAR_171 , VAR_172 . VAR_173 + 28 ) + 1 ;  if ( VAR_174 . VAR_175 < 1 ) { METHOD_27 ( VAR_176 , ""Badtypecount.\\n"" ) ; VAR_177 = VAR_178 ; goto VAR_179 ; } ; VAR_180 . VAR_181 = VAR_182 . VAR_183 + VAR_184 . VAR_185 * 8 ; if ( VAR_186 . VAR_187 < 0 || VAR_188 . VAR_189 > VAR_190 . VAR_191 ) { METHOD_28 ( VAR_192 , ""Baditemoffset(%d).\\n"" , VAR_193 . VAR_194 ) ; VAR_195 = VAR_196 ; goto VAR_197 ; } ; VAR_198 . VAR_199 = - 1 ; for ( VAR_200 = 0 ; VAR_201 < VAR_202 . VAR_203 ; VAR_204 ++ )  { VAR_205 = METHOD_29 ( & VAR_206 , VAR_207 . VAR_208 + VAR_209 * 8 ) ;  if ( VAR_210 == VAR_211 ) { VAR_212 . VAR_213 = VAR_214 ; VAR_215 . VAR_216 = METHOD_30 ( & VAR_217 , VAR_218 . VAR_219 + VAR_220 * 8 + 4 ) + 1 ; VAR_221 = METHOD_31 ( VAR_222 , & VAR_223 ) ; goto VAR_224 ; } ; } ; METHOD_32 ( VAR_225 , ""No\'STR\'resource.\\n"" ) ; VAR_226 = VAR_227 ; VAR_228 : METHOD_33 ( VAR_229 , VAR_230 ) ; if ( VAR_231 . VAR_232 ) METHOD_34 ( VAR_233 . VAR_234 ) ; return VAR_235 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 VAR_2 , VAR_3 , VAR_4 = 0 ; METHOD_1 ( VAR_5 , VAR_6 ) ; METHOD_2 ( & VAR_7 , 0 , sizeof ( VAR_8 ) ) ; VAR_9 . VAR_10 = METHOD_3 ( VAR_11 ) ; METHOD_4 ( VAR_12 , ""Resourcelength:%d(0x%04X)\\n"" , VAR_13 . VAR_14 , VAR_15 . VAR_16 ) ; if ( VAR_17 . VAR_18 > METHOD_5 ( VAR_19 -> VAR_20 ) ) { VAR_21 . VAR_22 = METHOD_6 ( 1 , VAR_23 . VAR_24 ) ; VAR_25 . VAR_26 = VAR_27 ; } else { VAR_28 . VAR_29 = VAR_30 -> VAR_31 ; VAR_32 . VAR_33 = VAR_34 ; } ; METHOD_7 ( VAR_35 . VAR_36 , VAR_37 . VAR_38 , 1 , VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 = VAR_44 . VAR_45 ; VAR_46 . VAR_47 = METHOD_8 ( & VAR_48 , 0 ) ; VAR_49 . VAR_50 = METHOD_9 ( & VAR_51 , 4 ) ; VAR_52 . VAR_53 = METHOD_10 ( & VAR_54 , 8 ) ; VAR_55 . VAR_56 = METHOD_11 ( & VAR_57 , 12 ) ; if ( VAR_58 . VAR_59 == 0x51607 && VAR_60 . VAR_61 == 0x20000 ) { METHOD_12 ( VAR_62 , ""Tryingoffsetof0x52bytes.\\n"" ) ; VAR_63 . VAR_64 = METHOD_13 ( & VAR_65 , 0x52 + 0 ) + 0x52 ; VAR_66 . VAR_67 = METHOD_14 ( & VAR_68 , 0x52 + 4 ) + 0x52 ; VAR_69 . VAR_70 = METHOD_15 ( & VAR_71 , 0x52 + 8 ) ; VAR_72 . VAR_73 = METHOD_16 ( & VAR_74 , 0x52 + 12 ) ; } ; METHOD_17 ( VAR_75 , ""dataoffset:0x%04X\\nmapoffset:0x%04X\\n"" ""datalength:0x%04X\\nmaplength:0x%04X\\n"" , VAR_76 . VAR_77 , VAR_78 . VAR_79 , VAR_80 . VAR_81 , VAR_82 . VAR_83 ) ; if ( VAR_84 . VAR_85 > VAR_86 . VAR_87 ) { METHOD_18 ( VAR_88 , ""Error:rsrc.data_offset(%d,0x%x)>len\\n"" , VAR_89 . VAR_90 , VAR_91 . VAR_92 ) ; VAR_93 = VAR_94 ; goto VAR_95 ; } ; if ( VAR_96 . VAR_97 > VAR_98 . VAR_99 ) { METHOD_19 ( VAR_100 , ""Error:rsrc.map_offset>len\\n"" ) ; VAR_101 = VAR_102 ; goto VAR_103 ; } ; if ( VAR_104 . VAR_105 > VAR_106 . VAR_107 ) { METHOD_20 ( VAR_108 , ""Error:rsrc.data_length>len\\n"" ) ; VAR_109 = VAR_110 ; goto VAR_111 ; } ; if ( VAR_112 . VAR_113 > VAR_114 . VAR_115 ) { METHOD_21 ( VAR_116 , ""Error:rsrc.map_length>len\\n"" ) ; VAR_117 = VAR_118 ; goto VAR_119 ; } ; if ( VAR_120 . VAR_121 + VAR_122 . VAR_123 != VAR_124 . VAR_125 || VAR_126 . VAR_127 + VAR_128 . VAR_129 != VAR_130 . VAR_131 ) { METHOD_22 ( VAR_132 , ""Error:ThisdoesnotlooklikeaMacOSXresourcefork.\\n"" ) ; VAR_133 = VAR_134 ; goto VAR_135 ; } ; if ( VAR_136 . VAR_137 + 28 >= VAR_138 . VAR_139 ) { METHOD_23 ( VAR_140 , ""Badmapoffset(%d+28>%d).\\n"" , VAR_141 . VAR_142 , VAR_143 . VAR_144 ) ; VAR_145 = VAR_146 ; goto VAR_147 ; } ; VAR_148 . VAR_149 = VAR_150 . VAR_151 + METHOD_24 ( & VAR_152 , VAR_153 . VAR_154 + 26 ) ; if ( VAR_155 . VAR_156 > VAR_157 . VAR_158 ) { METHOD_25 ( VAR_159 , ""Badstringoffset(%d).\\n"" , VAR_160 . VAR_161 ) ; VAR_162 = VAR_163 ; goto VAR_164 ; } ; VAR_165 . VAR_166 = VAR_167 . VAR_168 + 30 ; if ( VAR_233 . VAR_173 + 28 > VAR_233 . VAR_191 ) { METHOD_32 ( VAR_229 , ""Badmapoffset.\\n"" ) ; goto VAR_228 ; } ; VAR_169 . VAR_170 = METHOD_26 ( & VAR_171 , VAR_172 . VAR_173 + 28 ) + 1 ; if ( VAR_174 . VAR_175 < 1 ) { METHOD_27 ( VAR_176 , ""Badtypecount.\\n"" ) ; VAR_177 = VAR_178 ; goto VAR_179 ; } ; VAR_180 . VAR_181 = VAR_182 . VAR_183 + VAR_184 . VAR_185 * 8 ; if ( VAR_186 . VAR_187 < 0 || VAR_188 . VAR_189 > VAR_190 . VAR_191 ) { METHOD_28 ( VAR_192 , ""Baditemoffset(%d).\\n"" , VAR_193 . VAR_194 ) ; VAR_195 = VAR_196 ; goto VAR_197 ; } ; VAR_198 . VAR_199 = - 1 ; for ( VAR_200 = 0 ; VAR_201 < VAR_202 . VAR_203 ; VAR_204 ++ ) { VAR_205 = METHOD_29 ( & VAR_206 , VAR_207 . VAR_208 + VAR_209 * 8 ) ; if ( VAR_210 == VAR_211 ) { VAR_212 . VAR_213 = VAR_214 ; VAR_215 . VAR_216 = METHOD_30 ( & VAR_217 , VAR_218 . VAR_219 + VAR_220 * 8 > VAR_233 . VAR_191 ) { METHOD_32 ( VAR_229 , ""Badrsrcmarker.\\n"" ) ; goto VAR_228 ; } ; VAR_210 = METHOD_29 ( & VAR_233 , VAR_233 . VAR_219 + VAR_220 * 8 + 4 ) + 1 ; VAR_221 = METHOD_31 ( VAR_222 , & VAR_223 ) ; goto VAR_224 ; } ; } ; METHOD_32 ( VAR_225 , ""No\'STR\'resource.\\n"" ) ; VAR_226 = VAR_227 ; VAR_228 : METHOD_33 ( VAR_229 , VAR_230 ) ; if ( VAR_231 . VAR_232 ) METHOD_34 ( VAR_233 . VAR_234 ) ; return VAR_235 ; }",408
409,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  TYPE_1 VAR_1 = 0 ;  TYPE_2 VAR_2 , VAR_3 ; METHOD_1 ( & STRUCT_OR_UNION_3 -> VAR_4 . VAR_5 -> VAR_6 . VAR_7 ) ; VAR_8 = STRUCT_OR_UNION_4 -> VAR_9 . VAR_10 -> VAR_11 . VAR_12 & VAR_13 ; VAR_14 = VAR_15 -> VAR_16 & VAR_17 ; if ( ! VAR_18 && VAR_19 ) VAR_20 = 1 ; METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_21 . VAR_22 -> VAR_23 . VAR_24 , & VAR_25 -> VAR_26 , sizeof ( STRUCT_OR_UNION_6 -> VAR_27 . VAR_28 -> VAR_29 . VAR_30 ) ) ; STRUCT_OR_UNION_7 -> VAR_31 . VAR_32 -> VAR_33 . VAR_34 = VAR_35 -> VAR_36 ;  METHOD_3 ( STRUCT_OR_UNION_8 , 0 , STRUCT_OR_UNION_9 -> VAR_37 . VAR_38 -> VAR_39 . VAR_40 [ 0 ] . VAR_41 , VAR_42 ) ;  METHOD_4 ( & STRUCT_OR_UNION_10 -> VAR_43 . VAR_44 -> VAR_45 . VAR_46 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 VAR_2 , VAR_3 ; METHOD_1 ( & STRUCT_OR_UNION_3 -> VAR_4 . VAR_5 -> VAR_6 . VAR_7 ) ; VAR_8 = STRUCT_OR_UNION_4 -> VAR_9 . VAR_10 -> VAR_11 . VAR_12 & VAR_13 ; VAR_14 = VAR_15 -> VAR_16 & VAR_17 ; if ( ! VAR_18 && VAR_19 ) VAR_20 = 1 ; METHOD_2 ( & STRUCT_OR_UNION_5 -> VAR_21 . VAR_22 -> VAR_23 . VAR_24 , & VAR_25 -> VAR_26 , sizeof ( STRUCT_OR_UNION_6 -> VAR_27 . VAR_28 -> VAR_29 . VAR_30 ) ) ; STRUCT_OR_UNION_7 -> VAR_31 . VAR_32 -> VAR_33 . VAR_34 = VAR_35 -> VAR_36 ; for ( VAR_47 = 0 ; VAR_47 < 3 ; VAR_47 ++ ) METHOD_3 ( STRUCT_OR_UNION_8 , 0 , STRUCT_OR_UNION_9 -> VAR_37 . VAR_38 -> VAR_39 . VAR_40 [ VAR_47 ] . VAR_41 , VAR_42 ) ; METHOD_4 ( & STRUCT_OR_UNION_10 -> VAR_43 . VAR_44 -> VAR_45 . VAR_46 ) ; return 0 ; }",409
410,"static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , ""%i"" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; * ( METHOD_5 ( VAR_9 ) - 1 ) = '' ; METHOD_6 ( ) ;  METHOD_7 ( VAR_10 , VAR_11 ) ;  METHOD_8 ( VAR_12 , VAR_13 ) ; VAR_14 = METHOD_9 ( VAR_15 ) ; } }","static TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 * VAR_0 = METHOD_1 ( VAR_1 , VAR_2 ) + METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 ; if ( METHOD_3 ( VAR_5 , ""%i"" , & VAR_6 ) != 1 ) { METHOD_4 ( VAR_7 , VAR_8 ) ; * ( METHOD_5 ( VAR_9 ) - 1 ) = '' ; METHOD_6 ( ) ; METHOD_10 ( VAR_16 , METHOD_2 ( VAR_15 ) + METHOD_2 ( VAR_13 ) + 1 , VAR_17 ) ; METHOD_7 ( VAR_10 , VAR_11 ) ; METHOD_8 ( VAR_12 , VAR_13 ) ; VAR_14 = METHOD_9 ( VAR_15 ) ; } }",410
411,"TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; unsigned TYPE_4 VAR_7 = 0 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 = VAR_13 ; TYPE_5 VAR_14 ; METHOD_1 ( VAR_15 ) ; if ( VAR_16 -> VAR_17 & VAR_18 ) return METHOD_2 ( VAR_19 ) ; if ( METHOD_3 ( VAR_20 ) ) return METHOD_4 ( VAR_21 ) ; if ( ( VAR_22 & VAR_23 ) && ( VAR_24 -> VAR_25 > ( TYPE_6 ) - 1 ) && ! METHOD_5 ( & VAR_26 -> VAR_27 -> VAR_28 ) ) return METHOD_6 ( VAR_29 ) ; if ( METHOD_7 ( VAR_30 ) && ( VAR_31 & VAR_32 ) ) { VAR_33 = METHOD_8 ( VAR_34 , VAR_35 -> VAR_36 . VAR_37 , VAR_38 -> VAR_39 . VAR_40 , VAR_41 -> VAR_42 , VAR_43 , & VAR_44 , VAR_45 , & VAR_46 ) ; if ( VAR_47 ) return VAR_48 ; } VAR_49 = METHOD_9 ( VAR_50 , VAR_51 ) ; VAR_52 = METHOD_10 ( VAR_53 , & METHOD_11 ( VAR_54 ) -> VAR_55 , 0 , 0 ) ; if ( VAR_56 ) goto VAR_57 ; VAR_58 = VAR_59 ; METHOD_12 ( VAR_60 , VAR_61 ) ; if ( ! METHOD_13 ( METHOD_14 ( VAR_62 ) ) ) { VAR_63 = METHOD_15 ( VAR_64 ) ; goto VAR_65 ; } if ( VAR_66 & VAR_67 ) { if ( METHOD_16 ( ) != & VAR_68 ) { VAR_69 = METHOD_17 ( VAR_70 ) ; goto VAR_71 ; } if ( METHOD_18 ( VAR_72 ) && METHOD_19 ( VAR_73 ) && METHOD_20 ( VAR_74 ) != VAR_75 -> VAR_76 ) { METHOD_21 ( VAR_77 ) ; VAR_78 = METHOD_22 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 , METHOD_23 ( VAR_84 ) ? VAR_85 : 0 ) ; if ( VAR_86 ) goto VAR_87 ; } } if ( VAR_88 & VAR_89 ) { if ( VAR_90 -> VAR_91 . VAR_92 && ( ( VAR_93 -> VAR_94 . VAR_95 << VAR_96 -> VAR_97 . VAR_98 ) != VAR_99 -> VAR_100 ) ) { VAR_101 = METHOD_24 ( VAR_102 ) ; goto VAR_103 ; } if ( VAR_104 -> VAR_105 != 0 ) { TYPE_7 VAR_106 ; TYPE_8 VAR_107 ; VAR_108 = METHOD_25 ( VAR_109 , VAR_110 -> VAR_111 ) ; if ( VAR_112 > VAR_113 ) { VAR_114 = METHOD_26 ( VAR_115 ) ; goto VAR_116 ; } if ( METHOD_27 ( VAR_117 ) || ( ( VAR_118 & VAR_119 ) && ( VAR_120 -> VAR_121 & VAR_122 ) ) ) { VAR_123 = VAR_124 -> VAR_125 . VAR_126 << VAR_127 -> VAR_128 . VAR_129 ; } else { VAR_130 = VAR_131 -> VAR_132 . VAR_133 ; if ( VAR_134 > VAR_135 -> VAR_136 . VAR_137 / 2 ) { VAR_138 = METHOD_28 ( VAR_139 ) ; goto VAR_140 ; } } if ( VAR_141 -> VAR_142 % VAR_143 ) { VAR_144 = METHOD_29 ( VAR_145 ) ; goto VAR_146 ; } } } if ( VAR_147 & VAR_148 ) { if ( ( VAR_149 -> VAR_150 . VAR_151 || VAR_152 -> VAR_153 ) && ( METHOD_30 ( VAR_154 ) ) != ( VAR_155 -> VAR_156 & VAR_157 ) ) { VAR_158 = METHOD_31 ( VAR_159 ) ; goto VAR_160 ; } if ( ( VAR_161 -> VAR_162 & VAR_163 ) ) { if ( ( VAR_164 -> VAR_165 . VAR_166 == 0 ) || ( VAR_167 -> VAR_168 . VAR_169 == 0 ) || ( VAR_170 -> VAR_171 . VAR_172 % VAR_173 -> VAR_174 . VAR_175 ) ) { VAR_176 = METHOD_32 ( VAR_177 ) ; goto VAR_178 ; } } if ( ( VAR_179 -> VAR_180 . VAR_181 & ( VAR_182 | VAR_183 ) || ( VAR_184 -> VAR_185 & ( VAR_186 | VAR_187 ) ) ) && ! METHOD_33 ( VAR_188 ) ) { VAR_189 = METHOD_34 ( VAR_190 ) ; goto VAR_191 ; } } METHOD_35 ( VAR_192 , VAR_193 , 0 ) ; if ( VAR_194 & VAR_195 ) { if ( ( VAR_196 -> VAR_197 . VAR_198 & ( VAR_199 | VAR_200 ) ) &&  ! METHOD_36 ( METHOD_37 ( VAR_201 ) , VAR_202 ) )  VAR_203 -> VAR_204 . VAR_205 &= ~ ( VAR_206 | VAR_207 ) ; if ( METHOD_38 ( VAR_208 ) != VAR_209 -> VAR_210 ) { if ( METHOD_39 ( VAR_211 ) && METHOD_40 ( VAR_212 ) ) { VAR_213 = METHOD_41 ( VAR_214 , VAR_215 , & VAR_216 -> VAR_217 , VAR_218 ) ; } METHOD_42 ( VAR_219 , VAR_220 -> VAR_221 ) ; if ( VAR_222 -> VAR_223 . VAR_224 == 1 ) METHOD_43 ( VAR_225 , VAR_226 ) ; } } if ( VAR_227 & VAR_228 ) VAR_229 -> VAR_230 . VAR_231 = VAR_232 -> VAR_233 >> VAR_234 -> VAR_235 . VAR_236 ; if ( VAR_237 & VAR_238 ) { METHOD_44 ( VAR_239 , VAR_240 -> VAR_241 ) ; METHOD_45 ( VAR_242 ) ; } METHOD_46 ( VAR_243 , VAR_244 , VAR_245 ) ; METHOD_47 ( VAR_246 , VAR_247 , VAR_248 ) ; METHOD_48 ( VAR_249 ) ; if ( VAR_250 -> VAR_251 & VAR_252 ) METHOD_49 ( VAR_253 ) ; VAR_254 = METHOD_50 ( VAR_255 , 0 ) ; METHOD_51 ( VAR_256 , VAR_257 ) ; METHOD_52 ( VAR_258 ) ; METHOD_53 ( VAR_259 ) ; METHOD_54 ( VAR_260 ) ; return VAR_261 ; VAR_262 : METHOD_55 ( VAR_263 ) ; METHOD_56 ( VAR_264 ) ; METHOD_57 ( VAR_265 , 0 ) ; if ( VAR_266 ) METHOD_58 ( VAR_267 , VAR_268 ) ; return VAR_269 ; }","TYPE_0 TYPE_1 METHOD_0 ( TYPE_2 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_6 ; unsigned TYPE_4 VAR_7 = 0 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_4 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 = VAR_13 ; TYPE_5 VAR_14 ; METHOD_1 ( VAR_15 ) ; if ( VAR_16 -> VAR_17 & VAR_18 ) return METHOD_2 ( VAR_19 ) ; if ( METHOD_3 ( VAR_20 ) ) return METHOD_4 ( VAR_21 ) ; if ( ( VAR_22 & VAR_23 ) && ( VAR_24 -> VAR_25 > ( TYPE_6 ) - 1 ) && ! METHOD_59 ( METHOD_37 ( VAR_201 ) , VAR_202 ) ) VAR_203 -> VAR_204 . VAR_205 &= ~ ( VAR_206 | VAR_207 ) ; if ( METHOD_38 ( VAR_208 ) != VAR_209 -> VAR_210 ) { if ( METHOD_39 ( VAR_211 ) && METHOD_40 ( VAR_212 ) ) { VAR_213 = METHOD_41 ( VAR_214 , VAR_215 , & VAR_216 -> VAR_217 , VAR_218 ) ; } METHOD_42 ( VAR_219 , VAR_220 -> VAR_221 ) ; if ( VAR_222 -> VAR_223 . VAR_224 == 1 ) METHOD_43 ( VAR_225 , VAR_226 ) ; } } if ( VAR_227 & VAR_228 ) VAR_229 -> VAR_230 . VAR_231 = VAR_232 -> VAR_233 >> VAR_234 -> VAR_235 . VAR_236 ; if ( VAR_237 & VAR_238 ) { METHOD_44 ( VAR_239 , VAR_240 -> VAR_241 ) ; METHOD_45 ( VAR_242 ) ; } METHOD_46 ( VAR_243 , VAR_244 , VAR_245 ) ; METHOD_47 ( VAR_246 , VAR_247 , VAR_248 ) ; METHOD_48 ( VAR_249 ) ; if ( VAR_250 -> VAR_251 & VAR_252 ) METHOD_49 ( VAR_253 ) ; VAR_254 = METHOD_50 ( VAR_255 , 0 ) ; METHOD_51 ( VAR_256 , VAR_257 ) ; METHOD_52 ( VAR_258 ) ; METHOD_53 ( VAR_259 ) ; METHOD_54 ( VAR_260 ) ; return VAR_261 ; VAR_262 : METHOD_55 ( VAR_263 ) ; METHOD_56 ( VAR_264 ) ; METHOD_57 ( VAR_265 , 0 ) ; if ( VAR_266 ) METHOD_58 ( VAR_267 , VAR_268 ) ; return VAR_269 ; }",411
412,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; METHOD_2 ( VAR_8 ) ; if ( VAR_9 -> VAR_10 == VAR_11 && METHOD_3 ( VAR_12 , & METHOD_4 ( VAR_13 ) -> VAR_14 ) ) { METHOD_5 ( VAR_15 -> VAR_16 -> VAR_17 , 0 ) ; VAR_18 -> VAR_19 = VAR_20 ;  METHOD_6 ( VAR_21 ) ;  return 0 ; } METHOD_7 ( VAR_22 ) ; return METHOD_8 ( VAR_23 , STRUCT_OR_UNION_7 , VAR_24 , VAR_25 , VAR_26 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; METHOD_2 ( VAR_8 ) ; if ( VAR_9 -> VAR_10 == VAR_11 && METHOD_3 ( VAR_12 , & METHOD_4 ( VAR_13 ) -> VAR_14 ) ) { METHOD_5 ( VAR_15 -> VAR_16 -> VAR_17 , 0 ) ; VAR_18 -> VAR_19 = VAR_20 ; VAR_24 -> VAR_27 = 0 ; METHOD_6 ( VAR_21 ) ; return 0 ; } METHOD_7 ( VAR_22 ) ; return METHOD_8 ( VAR_23 , STRUCT_OR_UNION_7 , VAR_24 , VAR_25 , VAR_26 ) ; }",412
413,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_3 VAR_3 ; VAR_4 = METHOD_1 ( STRUCT_OR_UNION_3 ) ; if ( ! VAR_5 ) return - VAR_6 ; METHOD_2 ( VAR_7 ) ; switch ( VAR_8 ) { case VAR_9 : { unsigned TYPE_4 VAR_10 , VAR_11 ; VAR_12 = METHOD_3 ( VAR_13 ) ; VAR_14 = VAR_15 >> VAR_16 ; VAR_17 = - VAR_18 ; if ( ! VAR_19 ) goto VAR_20 ; if ( ! METHOD_4 ( VAR_21 ) && VAR_22 > VAR_23 ) { VAR_24 = - VAR_25 ; goto VAR_26 ;  }  VAR_27 = METHOD_5 ( VAR_28 , VAR_29 ) ; break ; } case VAR_30 : VAR_31 = VAR_32 -> VAR_33 * VAR_34 ; break ; default : VAR_35 = - VAR_36 ; break ; } VAR_37 : METHOD_6 ( VAR_38 ) ; return VAR_39 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , unsigned TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_3 VAR_3 ; VAR_4 = METHOD_1 ( STRUCT_OR_UNION_3 ) ; if ( ! VAR_5 ) return - VAR_6 ; METHOD_2 ( VAR_7 ) ; switch ( VAR_8 ) { case VAR_9 : { unsigned TYPE_4 VAR_10 , VAR_11 ; VAR_12 = METHOD_3 ( VAR_13 ) ; VAR_14 = VAR_15 >> VAR_16 ; VAR_17 = - VAR_18 ; if ( ! VAR_19 ) goto VAR_20 ; if ( ! METHOD_4 ( VAR_21 ) && VAR_22 > VAR_23 ) { VAR_24 = - VAR_25 ; goto VAR_26 ; } VAR_27 = METHOD_5 ( VAR_28 , VAR_29 ) ; break ; } case VAR_30 : VAR_31 = VAR_32 -> VAR_33 * VAR_34 ; break ; default : VAR_35 = - VAR_36 ; break ; } VAR_37 : METHOD_6 ( VAR_38 ) ; return VAR_39 ; }",413
414,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_4 -> VAR_5 ;  TYPE_3 TYPE_4  if ( ! STRUCT_OR_UNION_4 ) {  * VAR_6 = VAR_7 ;  METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ; return 0 ; } if ( METHOD_2 ( STRUCT_OR_UNION_5 -> VAR_11 ) ) {  * VAR_12 = VAR_13 ;  METHOD_3 ( VAR_14 , VAR_15 , VAR_16 , STRUCT_OR_UNION_6 -> VAR_17 ) ; return 0 ; } else if ( ! STRUCT_OR_UNION_7 ) return - VAR_18 ; if ( METHOD_4 ( METHOD_5 ( STRUCT_OR_UNION_8 ) ) ) { return 0 ; }  * VAR_19 = VAR_20 ;  VAR_21 = ( ( VAR_22 - VAR_23 -> VAR_24 ) >> VAR_25 ) + VAR_26 -> VAR_27 ; if ( VAR_28 > VAR_29 -> VAR_30 ) VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = ( ( VAR_35 - VAR_36 -> VAR_37 ) >> VAR_38 ) + VAR_39 -> VAR_40 ; METHOD_6 ( STRUCT_OR_UNION_9 -> VAR_41 , STRUCT_OR_UNION_10 , VAR_42 , VAR_43 - VAR_44 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = VAR_4 -> VAR_5 ; * VAR_19 = VAR_39 ; TYPE_3 TYPE_4 if ( ! STRUCT_OR_UNION_4 ) { * VAR_6 = VAR_7 ; METHOD_1 ( VAR_8 , VAR_9 , VAR_10 ) ; return 0 ; } if ( METHOD_2 ( STRUCT_OR_UNION_5 -> VAR_11 ) ) { * VAR_12 = VAR_13 ; METHOD_3 ( VAR_14 , VAR_15 , VAR_16 , STRUCT_OR_UNION_6 -> VAR_17 ) ; return 0 ; } else if ( ! STRUCT_OR_UNION_7 ) return - VAR_18 ; if ( METHOD_4 ( METHOD_5 ( STRUCT_OR_UNION_8 ) ) ) { return 0 ; } * VAR_19 = VAR_20 ; VAR_21 = ( ( VAR_22 - VAR_23 -> VAR_24 ) >> VAR_25 ) + VAR_26 -> VAR_27 ; if ( VAR_28 > VAR_29 -> VAR_30 ) VAR_31 = VAR_32 -> VAR_33 ; VAR_34 = ( ( VAR_35 - VAR_36 -> VAR_37 ) >> VAR_38 ) + VAR_39 -> VAR_40 ; METHOD_6 ( STRUCT_OR_UNION_9 -> VAR_41 , STRUCT_OR_UNION_10 , VAR_42 , VAR_43 - VAR_44 ) ; return 0 ; }",414
415,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { const struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 , VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; TYPE_2 TYPE_3 ;  TYPE_4 = ( VAR_9 -> VAR_10 & ~ VAR_11 ) == VAR_12 ;  VAR_13 = VAR_14 -> VAR_15 ; if ( VAR_16 ) { VAR_17 -> VAR_18 = METHOD_1 ( VAR_19 ) ; } else if ( ! VAR_20 -> VAR_21 ) { if ( ! TYPE_5 ) return ; } VAR_22 -> METHOD_2 ( VAR_23 -> VAR_24 , & VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; if ( VAR_28 && ( VAR_29 -> VAR_30 & VAR_31 || TYPE_6 ) ) VAR_32 -> VAR_33 += VAR_34 -> METHOD_4 ( VAR_35 , VAR_36 ) ; VAR_37 = VAR_38 -> METHOD_5 ( VAR_39 , VAR_40 ) ; if ( VAR_41 <= 0 ) { if ( ! TYPE_7 ) VAR_42 -> VAR_43 . VAR_44 = 1 ; } else { VAR_45 -> VAR_46 = METHOD_6 ( VAR_47 ) ; } }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { const struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_1 VAR_5 , VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_3 VAR_8 ; TYPE_2 TYPE_3 ; TYPE_4 = ( VAR_9 -> VAR_10 & ~ VAR_11 ) == VAR_12 ; VAR_13 = VAR_14 -> VAR_15 ; if ( VAR_16 ) { VAR_17 -> VAR_18 = METHOD_1 ( VAR_19 ) ; } else if ( ! VAR_20 -> VAR_21 ) { if ( ! TYPE_5 ) return ; } VAR_22 -> METHOD_2 ( VAR_23 -> VAR_24 , & VAR_25 ) ; VAR_26 = METHOD_3 ( VAR_27 ) ; if ( VAR_28 && ( VAR_29 -> VAR_30 & VAR_31 || TYPE_6 ) ) VAR_32 -> VAR_33 += VAR_34 -> METHOD_4 ( VAR_35 , VAR_36 ) ; VAR_37 = VAR_38 -> METHOD_5 ( VAR_39 , VAR_40 ) ; if ( VAR_41 <= 0 ) { if ( ! TYPE_7 ) VAR_42 -> VAR_43 . VAR_44 = 1 ; } else { VAR_45 -> VAR_46 = METHOD_6 ( VAR_47 ) ; } }",415
416,"TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ;  if ( ! ( VAR_4 = METHOD_1 ( sizeof ( TYPE_5 ) ) ) ) {  return 0 ; } VAR_5 -> VAR_6 = 0 ; VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = VAR_17 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = VAR_22 * VAR_23 ; if ( VAR_24 -> VAR_25 > 0 ) { if ( ! ( VAR_26 -> VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 , sizeof ( TYPE_6 * ) ) ) ) { METHOD_3 ( VAR_30 ) ; return 0 ; } } if ( VAR_31 -> VAR_32 > 0 ) { if ( ! ( VAR_33 -> VAR_34 = METHOD_4 ( VAR_35 -> VAR_36 , sizeof ( TYPE_7 ) ) ) ) { METHOD_5 ( VAR_37 ) ; return 0 ; } } for ( VAR_38 = 0 ; VAR_39 < VAR_40 ; ++ VAR_41 ) { VAR_42 -> VAR_43 [ VAR_44 ] = & VAR_45 -> VAR_46 [ VAR_47 * VAR_48 -> VAR_49 ] ; } for ( VAR_50 = 0 ; VAR_51 < VAR_52 -> VAR_53 ; ++ VAR_54 ) { VAR_55 -> VAR_56 [ VAR_57 ] = 0 ; } VAR_58 -> VAR_59 = 0 ; VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; return VAR_70 ; }","TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; if ( VAR_40 < 0 || VAR_23 < 0 ) { return 0 ; } if ( ! ( VAR_4 = METHOD_1 ( sizeof ( TYPE_5 ) ) ) ) { return 0 ; } VAR_5 -> VAR_6 = 0 ; VAR_7 -> VAR_8 = VAR_9 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; VAR_15 -> VAR_16 = VAR_17 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = VAR_22 * VAR_23 ; if ( VAR_24 -> VAR_25 > 0 ) { if ( ! ( VAR_26 -> VAR_27 = METHOD_2 ( VAR_28 -> VAR_29 , sizeof ( TYPE_6 * ) ) ) ) { METHOD_3 ( VAR_30 ) ; return 0 ; } } if ( VAR_31 -> VAR_32 > 0 ) { if ( ! ( VAR_33 -> VAR_34 = METHOD_4 ( VAR_35 -> VAR_36 , sizeof ( TYPE_7 ) ) ) ) { METHOD_5 ( VAR_37 ) ; return 0 ; } } for ( VAR_38 = 0 ; VAR_39 < VAR_40 ; ++ VAR_41 ) { VAR_42 -> VAR_43 [ VAR_44 ] = & VAR_45 -> VAR_46 [ VAR_47 * VAR_48 -> VAR_49 ] ; } for ( VAR_50 = 0 ; VAR_51 < VAR_52 -> VAR_53 ; ++ VAR_54 ) { VAR_55 -> VAR_56 [ VAR_57 ] = 0 ; } VAR_58 -> VAR_59 = 0 ; VAR_60 -> VAR_61 = 0 ; VAR_62 -> VAR_63 = VAR_64 -> VAR_65 ; VAR_66 -> VAR_67 = VAR_68 -> VAR_69 ; return VAR_70 ; }",416
417,"TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 [ 16 ] ;  TYPE_3 VAR_1 = METHOD_1 ( VAR_2 , VAR_3 ) ;  if ( ! METHOD_2 ( VAR_4 == sizeof ( VAR_5 ) - 1 ) ) { METHOD_3 ( ""Expected:%zu"" , sizeof ( VAR_6 ) - 1 ) ; METHOD_4 ( ""Actual:%zu"" , VAR_7 ) ; } VAR_8 [ VAR_9 ] = '\\0' ; if ( ! METHOD_5 ( METHOD_6 ( VAR_10 , VAR_11 ) == 0 ) ) { METHOD_7 ( ""Expected:%s"" , VAR_12 ) ; METHOD_8 ( ""Actual:%s"" , VAR_13 ) ; } }","TYPE_0 METHOD_0 ( TYPE_1 ) { TYPE_2 VAR_0 [ 16 ] ; TYPE_3 VAR_1 = METHOD_1 ( VAR_2 , VAR_3 ) ; if ( ! METHOD_2 ( VAR_4 == sizeof ( VAR_5 ) - 1 ) ) { METHOD_3 ( ""Expected:%zu"" , sizeof ( VAR_6 ) - 1 ) ; METHOD_4 ( ""Actual:%zu"" , VAR_7 ) ; } VAR_8 [ VAR_9 ] = '\\0' ; if ( ! METHOD_5 ( METHOD_6 ( VAR_10 , VAR_11 ) == 0 ) ) { METHOD_7 ( ""Expected:%s"" , VAR_12 ) ; METHOD_8 ( ""Actual:%s"" , VAR_13 ) ; } }",417
418,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = STRUCT_OR_UNION_4 -> VAR_4 ; struct STRUCT_OR_UNION_5 VAR_5 ; TYPE_3 VAR_6 , VAR_7 = 0 ; METHOD_1 ( ""sk%p"" , VAR_8 ) ; if ( ! VAR_9 || VAR_10 -> VAR_11 != VAR_12 ) return - VAR_13 ; METHOD_2 ( & VAR_14 , 0 , sizeof ( VAR_15 ) ) ; VAR_16 = min_t ( unsigned TYPE_4 , sizeof ( VAR_17 ) , VAR_18 ) ; METHOD_3 ( & VAR_19 , VAR_20 , VAR_21 ) ; if ( VAR_22 . VAR_23 ) return - VAR_24 ; METHOD_4 ( VAR_25 ) ; if ( VAR_26 -> VAR_27 == VAR_28 && ! VAR_29 . VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } switch ( METHOD_5 ( VAR_34 ) -> VAR_35 ) { case VAR_36 : break ; case VAR_37 :  if ( VAR_38 )  break ; default : VAR_39 = - VAR_40 ; goto VAR_41 ; } switch ( VAR_42 -> VAR_43 ) { case VAR_44 : case VAR_45 : case VAR_46 : goto VAR_47 ; case VAR_48 : goto VAR_49 ; case VAR_50 : case VAR_51 : break ; default : VAR_52 = - VAR_53 ; goto VAR_54 ; } METHOD_6 ( & METHOD_7 ( VAR_55 ) -> VAR_56 , & VAR_57 . VAR_58 ) ; METHOD_8 ( VAR_59 ) -> VAR_60 = VAR_61 . VAR_62 ; VAR_63 = METHOD_9 ( VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; VAR_67 : VAR_68 = METHOD_10 ( VAR_69 , VAR_70 , METHOD_11 ( VAR_71 , VAR_72 & VAR_73 ) ) ; VAR_74 : METHOD_12 ( VAR_75 ) ; return VAR_76 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = STRUCT_OR_UNION_4 -> VAR_4 ; struct STRUCT_OR_UNION_5 VAR_5 ; TYPE_3 VAR_6 , VAR_7 = 0 ; METHOD_1 ( ""sk%p"" , VAR_8 ) ; if ( ! VAR_9 || VAR_10 -> VAR_11 != VAR_12 ) return - VAR_13 ; METHOD_2 ( & VAR_14 , 0 , sizeof ( VAR_15 ) ) ; VAR_16 = min_t ( unsigned TYPE_4 , sizeof ( VAR_17 ) , VAR_18 ) ; METHOD_3 ( & VAR_19 , VAR_20 , VAR_21 ) ; if ( VAR_22 . VAR_23 ) return - VAR_24 ; METHOD_4 ( VAR_25 ) ; if ( VAR_26 -> VAR_27 == VAR_28 && ! VAR_29 . VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } switch ( METHOD_5 ( VAR_34 ) -> VAR_35 ) { case VAR_36 : break ; case VAR_37 : case VAR_77 : if ( VAR_38 ) break ; default : VAR_39 = - VAR_40 ; goto VAR_41 ; } switch ( VAR_42 -> VAR_43 ) { case VAR_44 : case VAR_45 : case VAR_46 : goto VAR_47 ; case VAR_48 : goto VAR_49 ; case VAR_50 : case VAR_51 : break ; default : VAR_52 = - VAR_53 ; goto VAR_54 ; } METHOD_6 ( & METHOD_7 ( VAR_55 ) -> VAR_56 , & VAR_57 . VAR_58 ) ; METHOD_8 ( VAR_59 ) -> VAR_60 = VAR_61 . VAR_62 ; VAR_63 = METHOD_9 ( VAR_64 ) ; if ( VAR_65 ) goto VAR_66 ; VAR_67 : VAR_68 = METHOD_10 ( VAR_69 , VAR_70 , METHOD_11 ( VAR_71 , VAR_72 & VAR_73 ) ) ; VAR_74 : METHOD_12 ( VAR_75 ) ; return VAR_76 ; }",418
419,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 = VAR_7 ? VAR_8 -> VAR_9 : 0 ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; VAR_14 ++ ) { TYPE_7 * VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 , VAR_18 -> VAR_19 [ VAR_20 ] . VAR_21 , 0 ) ;  if ( VAR_22 && VAR_23 && VAR_24 -> VAR_25 == VAR_26 ) {  VAR_27 -> VAR_28 = VAR_29 ;  VAR_30 -> VAR_31 &= ~ ( VAR_32 | VAR_33 | VAR_34 ) ;  } VAR_35 = METHOD_2 ( VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 ) VAR_40 -> VAR_41 [ VAR_42 + VAR_43 ] . VAR_44 = VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 ; } } return VAR_49 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 ) { TYPE_5 VAR_5 ; TYPE_6 VAR_6 = VAR_7 ? VAR_8 -> VAR_9 : 0 ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; VAR_14 ++ ) { TYPE_7 * VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 , VAR_18 -> VAR_19 [ VAR_20 ] . VAR_21 , 0 ) ; METHOD_4 ( VAR_38 == 0 || ! METHOD_3 ( VAR_38 , VAR_50 ) ) ; if ( VAR_22 && VAR_23 && VAR_24 -> VAR_25 == VAR_26 ) { VAR_27 -> VAR_28 = VAR_29 ; VAR_30 -> VAR_31 &= ~ ( VAR_32 | VAR_33 | VAR_34 ) ; VAR_38 -> VAR_51 . VAR_52 = 0 ; } VAR_35 = METHOD_2 ( VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 ) VAR_40 -> VAR_41 [ VAR_42 + VAR_43 ] . VAR_44 = VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 ; } } return VAR_49 ; }",419
420,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { VAR_4 * VAR_5 ; unsigned TYPE_5 VAR_6 [ VAR_7 ] , * VAR_8 = VAR_9 ; unsigned TYPE_6 VAR_10 [ VAR_11 ] , * VAR_12 = VAR_13 ; TYPE_7 VAR_14 , VAR_15 ; if ( METHOD_1 ( VAR_16 , VAR_17 , ""02"" , & VAR_18 , & VAR_19 ) > 0 ) { TYPE_8 VAR_20 = METHOD_2 ( METHOD_3 ( VAR_21 ) ) ; rb_warn ( ""argumentsfor%"" PRIsVALUE ""encryptand%"" PRIsVALUE ""decryptweredeprecated;"" ""use%"" PRIsVALUE ""pkcs5_keyivgentoderivekeyandIV"" , VAR_22 , VAR_23 , VAR_24 ) ; METHOD_4 ( VAR_25 ) ; METHOD_5 ( VAR_26 , VAR_27 ) ; if ( METHOD_6 ( VAR_28 ) ) METHOD_7 ( VAR_29 , ""OpenSSLforRubyrulez!"" , sizeof ( VAR_30 ) ) ; else { METHOD_8 ( VAR_31 ) ; if ( VAR_32 > METHOD_9 ( VAR_33 ) ) { METHOD_10 ( VAR_34 , 0 , VAR_35 ) ; METHOD_11 ( VAR_36 , METHOD_12 ( VAR_37 ) , METHOD_13 ( VAR_38 ) ) ; } else METHOD_14 ( VAR_39 , METHOD_15 ( VAR_40 ) , sizeof ( VAR_41 ) ) ; } METHOD_16 ( METHOD_17 ( VAR_42 ) , METHOD_18 ( ) , VAR_43 , ( unsigned TYPE_9 * ) METHOD_19 ( VAR_44 ) , METHOD_20 ( VAR_45 ) , 1 , VAR_46 , VAR_47 ) ; VAR_48 = VAR_49 ; VAR_50 = VAR_51 ; } else { METHOD_21 ( VAR_52 , VAR_53 ) ; } if ( METHOD_22 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 ) != 1 ) { METHOD_23 ( VAR_60 , VAR_61 ) ; }  return VAR_62 ;  }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { VAR_4 * VAR_5 ; unsigned TYPE_5 VAR_6 [ VAR_7 ] , * VAR_8 = VAR_9 ; unsigned TYPE_6 VAR_10 [ VAR_11 ] , * VAR_12 = VAR_13 ; TYPE_7 VAR_14 , VAR_15 ; if ( METHOD_1 ( VAR_16 , VAR_17 , ""02"" , & VAR_18 , & VAR_19 ) > 0 ) { TYPE_8 VAR_20 = METHOD_2 ( METHOD_3 ( VAR_21 ) ) ; rb_warn ( ""argumentsfor%"" PRIsVALUE ""encryptand%"" PRIsVALUE ""decryptweredeprecated;"" ""use%"" PRIsVALUE ""pkcs5_keyivgentoderivekeyandIV"" , VAR_22 , VAR_23 , VAR_24 ) ; METHOD_4 ( VAR_25 ) ; METHOD_5 ( VAR_26 , VAR_27 ) ; if ( METHOD_6 ( VAR_28 ) ) METHOD_7 ( VAR_29 , ""OpenSSLforRubyrulez!"" , sizeof ( VAR_30 ) ) ; else { METHOD_8 ( VAR_31 ) ; if ( VAR_32 > METHOD_9 ( VAR_33 ) ) { METHOD_10 ( VAR_34 , 0 , VAR_35 ) ; METHOD_11 ( VAR_36 , METHOD_12 ( VAR_37 ) , METHOD_13 ( VAR_38 ) ) ; } if ( VAR_57 ) METHOD_24 ( VAR_62 , VAR_63 , VAR_64 ) ; else METHOD_14 ( VAR_39 , METHOD_15 ( VAR_40 ) , sizeof ( VAR_41 ) ) ; } METHOD_16 ( METHOD_17 ( VAR_42 ) , METHOD_18 ( ) , VAR_43 , ( unsigned TYPE_9 * ) METHOD_19 ( VAR_44 ) , METHOD_20 ( VAR_45 ) , 1 , VAR_46 , VAR_47 ) ; VAR_48 = VAR_49 ; VAR_50 = VAR_51 ; } else { METHOD_21 ( VAR_52 , VAR_53 ) ; } if ( METHOD_22 ( VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 , VAR_59 ) != 1 ) { METHOD_23 ( VAR_60 , VAR_61 ) ; } return VAR_62 ; }",420
421,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , const TYPE_6 * VAR_5 , unsigned TYPE_7 VAR_6 ) { TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 [ 32 ] ; TYPE_10 VAR_10 [ 32 ] ; unsigned TYPE_11 VAR_11 ; struct STRUCT_OR_UNION_0 VAR_12 ; unsigned TYPE_12 VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 ) ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) <= 0 ) { METHOD_3 ( VAR_18 , ""inet_aton(%s)FAILED"" , VAR_19 ) ; return - 1 ; } if ( ! METHOD_4 ( VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ) { METHOD_5 ( VAR_25 , ""redirectionpermissioncheckfailedfor"" ""%hu->%s:%hu%s"" , VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; return - 3 ; }  VAR_30 [ 0 ] = '\\0' ;  VAR_31 = METHOD_6 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 , sizeof ( VAR_36 ) , & VAR_37 , 0 , 0 , VAR_38 , sizeof ( VAR_39 ) , & VAR_40 , 0 , 0 ) ; if ( VAR_41 == 0 ) { if ( METHOD_7 ( VAR_42 , VAR_43 ) == 0 && ( ( VAR_44 == VAR_45 && VAR_46 [ 0 ] == '\\0' ) || ( VAR_47 && ( METHOD_8 ( VAR_48 , ""*"" ) == 0 ) && VAR_49 [ 0 ] == '\\0' ) || ( VAR_50 && ( METHOD_9 ( VAR_51 , VAR_52 ) == 0 ) ) ) ) { METHOD_10 ( VAR_53 , ""updatingexistingportmapping%hu%s(rhost\'%s\')=>%s:%hu"" , VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; VAR_59 = ( VAR_60 > 0 ) ? METHOD_11 ( ) + VAR_61 : 0 ; if ( VAR_62 != VAR_63 ) { VAR_64 = METHOD_12 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; } else { VAR_71 = METHOD_13 ( VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; } TYPE_13 TYPE_14 if ( VAR_77 == 0 ) { METHOD_14 ( VAR_78 , VAR_79 ) ; METHOD_15 ( VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ; } return VAR_86 ; } else { METHOD_16 ( VAR_87 , ""port%hu%s(rhost\'%s\')alreadyredirectedto%s:%hu"" , VAR_88 , VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; return - 2 ; } TYPE_15 TYPE_16 } else if ( METHOD_17 ( VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 ) > 0 ) { METHOD_18 ( VAR_98 , ""port%huprotocol%salreadyinuse"" , VAR_99 , VAR_100 ) ; return - 4 ; } else { VAR_101 = ( VAR_102 > 0 ) ? METHOD_19 ( ) + VAR_103 : 0 ; METHOD_20 ( VAR_104 , ""redirectingport%huto%s:%huprotocol%sfor:%s"" , VAR_105 , VAR_106 , VAR_107 , VAR_108 , VAR_109 ) ; return METHOD_21 ( VAR_110 , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; } }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , unsigned TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , const TYPE_6 * VAR_5 , unsigned TYPE_7 VAR_6 ) { TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 [ 32 ] ; TYPE_10 VAR_10 [ 32 ] ; unsigned TYPE_11 VAR_11 ; struct STRUCT_OR_UNION_0 VAR_12 ; unsigned TYPE_12 VAR_13 ; VAR_14 = METHOD_1 ( VAR_15 ) ; if ( METHOD_2 ( VAR_16 , & VAR_17 ) <= 0 ) { METHOD_3 ( VAR_18 , ""inet_aton(%s)FAILED"" , VAR_19 ) ; return - 1 ; } if ( ! METHOD_4 ( VAR_20 , VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ) { METHOD_5 ( VAR_25 , ""redirectionpermissioncheckfailedfor"" ""%hu->%s:%hu%s"" , VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; return - 3 ; } if ( VAR_115 == VAR_45 ) VAR_115 = """" ; VAR_30 [ 0 ] = '\\0' ; VAR_31 = METHOD_6 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 , sizeof ( VAR_36 ) , & VAR_37 , 0 , 0 , VAR_38 , sizeof ( VAR_39 ) , & VAR_40 , 0 , 0 ) ; if ( VAR_41 == 0 ) { if ( METHOD_7 ( VAR_42 , VAR_43 ) == 0 && ( ( VAR_44 == VAR_45 && VAR_46 [ 0 ] == '\\0' ) || ( VAR_47 && ( METHOD_8 ( VAR_48 , ""*"" ) == 0 ) && VAR_49 [ 0 ] == '\\0' ) || ( VAR_50 && ( METHOD_9 ( VAR_51 , VAR_52 ) == 0 ) ) ) ) { METHOD_10 ( VAR_53 , ""updatingexistingportmapping%hu%s(rhost\'%s\')=>%s:%hu"" , VAR_54 , VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; VAR_59 = ( VAR_60 > 0 ) ? METHOD_11 ( ) + VAR_61 : 0 ; if ( VAR_62 != VAR_63 ) { VAR_64 = METHOD_12 ( VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 ) ; } else { VAR_71 = METHOD_13 ( VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 ) ; } TYPE_13 TYPE_14 if ( VAR_77 == 0 ) { METHOD_14 ( VAR_78 , VAR_79 ) ; METHOD_15 ( VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) ; } return VAR_86 ; } else { METHOD_16 ( VAR_87 , ""port%hu%s(rhost\'%s\')alreadyredirectedto%s:%hu"" , VAR_88 , VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; return - 2 ; } TYPE_15 TYPE_16 } else if ( METHOD_17 ( VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 ) > 0 ) { METHOD_18 ( VAR_98 , ""port%huprotocol%salreadyinuse"" , VAR_99 , VAR_100 ) ; return - 4 ; } else { VAR_101 = ( VAR_102 > 0 ) ? METHOD_19 ( ) + VAR_103 : 0 ; METHOD_20 ( VAR_104 , ""redirectingport%huto%s:%huprotocol%sfor:%s"" , VAR_105 , VAR_106 , VAR_107 , VAR_108 , VAR_109 ) ; return METHOD_21 ( VAR_110 , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; } }",421
422,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 ) { const struct STRUCT_OR_UNION_0 * VAR_2 ; const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; const TYPE_3 * VAR_3 , * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 , VAR_11 ; VAR_12 = ( const struct STRUCT_OR_UNION_3 * ) VAR_13 ; METHOD_1 ( * VAR_14 ) ; if ( METHOD_2 ( & VAR_15 -> VAR_16 ) != VAR_17 ) { METHOD_3 ( ( VAR_18 , ""%sLDPversion%upacketnotsupported"" , ( VAR_19 -> VAR_20 < 1 ) ? """" : ""\\n\\t"" , METHOD_4 ( & VAR_21 -> VAR_22 ) ) ) ; return 0 ; } VAR_23 = METHOD_5 ( & VAR_24 -> VAR_25 ) ; if ( VAR_26 < sizeof ( const struct STRUCT_OR_UNION_4 ) - 4 ) { METHOD_6 ( ( VAR_27 , ""%sLDP,pdu-length:%u(tooshort,<%u)"" , ( VAR_28 -> VAR_29 < 1 ) ? """" : ""\\n\\t"" , VAR_30 , ( TYPE_7 ) ( sizeof ( const struct STRUCT_OR_UNION_5 ) - 4 ) ) ) ; return 0 ; } METHOD_7 ( ( VAR_31 , ""%sLDP,Label-Space-ID:%s:%u,pdu-length:%u"" , ( VAR_32 -> VAR_33 < 1 ) ? """" : ""\\n\\t"" , METHOD_8 ( VAR_34 , & VAR_35 -> VAR_36 ) , METHOD_9 ( & VAR_37 -> VAR_38 ) , VAR_39 ) ) ; if ( VAR_40 -> VAR_41 < 1 ) return 0 ; VAR_42 = VAR_43 + sizeof ( const struct STRUCT_OR_UNION_6 ) ; VAR_44 = VAR_45 - ( sizeof ( const struct STRUCT_OR_UNION_7 ) - 4 ) ; while ( VAR_46 > 0 ) { METHOD_10 ( * VAR_47 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; STRUCT_OR_UNION_9 = ( const struct STRUCT_OR_UNION_10 * ) VAR_48 ; VAR_49 = METHOD_11 ( STRUCT_OR_UNION_11 -> VAR_50 ) ; VAR_51 = METHOD_12 ( METHOD_13 ( STRUCT_OR_UNION_12 -> VAR_52 ) ) ; if ( VAR_53 < sizeof ( struct STRUCT_OR_UNION_13 ) - 4 ) { METHOD_14 ( ( VAR_54 , ""\\n\\t%sMessage(0x%04x),length:%u(tooshort,<%u)"" , METHOD_15 ( VAR_55 , ""Unknown"" , VAR_56 ) , VAR_57 , VAR_58 , ( TYPE_8 ) ( sizeof ( struct STRUCT_OR_UNION_14 ) - 4 ) ) ) ; return 0 ; } METHOD_16 ( ( VAR_59 , ""\\n\\t%sMessage(0x%04x),length:%u,MessageID:0x%08x,Flags:[%sifunknown]"" , METHOD_17 ( VAR_60 , ""Unknown"" , VAR_61 ) , VAR_62 , VAR_63 , METHOD_18 ( & STRUCT_OR_UNION_15 -> VAR_64 ) , METHOD_19 ( METHOD_20 ( & STRUCT_OR_UNION_16 -> VAR_65 ) ) ? ""continueprocessing"" : ""ignore"" ) ) ; VAR_66 = VAR_67 + sizeof ( struct STRUCT_OR_UNION_17 ) ; VAR_68 = VAR_69 - ( sizeof ( struct STRUCT_OR_UNION_18 ) - 4 ) ; METHOD_21 ( * VAR_70 , VAR_71 ) ; VAR_72 = VAR_73 ; switch ( VAR_74 ) { case VAR_75 : case VAR_76 : case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : while ( VAR_83 >= 4 ) { VAR_84 = METHOD_22 ( VAR_85 , VAR_86 , VAR_87 ) ; if ( VAR_88 == 0 ) break ; VAR_89 -= VAR_90 ; VAR_91 += VAR_92 ; } break ; case VAR_93 : case VAR_94 : case VAR_95 : default : if ( VAR_96 -> VAR_97 <= 1 ) METHOD_23 ( VAR_98 , VAR_99 , ""\\n\\t"" , VAR_100 ) ; break ; } if ( VAR_101 -> VAR_102 > 1 || VAR_103 == VAR_104 ) METHOD_24 ( VAR_105 , VAR_106 + sizeof ( struct STRUCT_OR_UNION_19 ) , ""\\n\\t"" , VAR_107 ) ; VAR_108 += VAR_109 + 4 ; VAR_110 -= VAR_111 + 4 ; } return VAR_112 + 4 ; VAR_113 :  METHOD_25 ( ( VAR_114 , ""\\n\\t\\tpacketexceededsnapshot"" ) ) ;  return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , register const TYPE_2 * VAR_1 ) { const struct STRUCT_OR_UNION_0 * VAR_2 ; const struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; const TYPE_3 * VAR_3 , * VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 , VAR_7 , VAR_8 , VAR_9 ; TYPE_6 VAR_10 , VAR_11 ; VAR_12 = ( const struct STRUCT_OR_UNION_3 * ) VAR_13 ; METHOD_1 ( * VAR_14 ) ; if ( METHOD_2 ( & VAR_15 -> VAR_16 ) != VAR_17 ) { METHOD_3 ( ( VAR_18 , ""%sLDPversion%upacketnotsupported"" , ( VAR_19 -> VAR_20 < 1 ) ? """" : ""\\n\\t"" , METHOD_4 ( & VAR_21 -> VAR_22 ) ) ) ; return 0 ; } VAR_23 = METHOD_5 ( & VAR_24 -> VAR_25 ) ; if ( VAR_26 < sizeof ( const struct STRUCT_OR_UNION_4 ) - 4 ) { METHOD_6 ( ( VAR_27 , ""%sLDP,pdu-length:%u(tooshort,<%u)"" , ( VAR_28 -> VAR_29 < 1 ) ? """" : ""\\n\\t"" , VAR_30 , ( TYPE_7 ) ( sizeof ( const struct STRUCT_OR_UNION_5 ) - 4 ) ) ) ; return 0 ; } METHOD_7 ( ( VAR_31 , ""%sLDP,Label-Space-ID:%s:%u,pdu-length:%u"" , ( VAR_32 -> VAR_33 < 1 ) ? """" : ""\\n\\t"" , METHOD_8 ( VAR_34 , & VAR_35 -> VAR_36 ) , METHOD_9 ( & VAR_37 -> VAR_38 ) , VAR_39 ) ) ; if ( VAR_40 -> VAR_41 < 1 ) return 0 ; VAR_42 = VAR_43 + sizeof ( const struct STRUCT_OR_UNION_6 ) ; VAR_44 = VAR_45 - ( sizeof ( const struct STRUCT_OR_UNION_7 ) - 4 ) ; while ( VAR_46 > 0 ) { METHOD_10 ( * VAR_47 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; STRUCT_OR_UNION_9 = ( const struct STRUCT_OR_UNION_10 * ) VAR_48 ; VAR_49 = METHOD_11 ( STRUCT_OR_UNION_11 -> VAR_50 ) ; VAR_51 = METHOD_12 ( METHOD_13 ( STRUCT_OR_UNION_12 -> VAR_52 ) ) ; if ( VAR_53 < sizeof ( struct STRUCT_OR_UNION_13 ) - 4 ) { METHOD_14 ( ( VAR_54 , ""\\n\\t%sMessage(0x%04x),length:%u(tooshort,<%u)"" , METHOD_15 ( VAR_55 , ""Unknown"" , VAR_56 ) , VAR_57 , VAR_58 , ( TYPE_8 ) ( sizeof ( struct STRUCT_OR_UNION_14 ) - 4 ) ) ) ; return 0 ; } METHOD_16 ( ( VAR_59 , ""\\n\\t%sMessage(0x%04x),length:%u,MessageID:0x%08x,Flags:[%sifunknown]"" , METHOD_17 ( VAR_60 , ""Unknown"" , VAR_61 ) , VAR_62 , VAR_63 , METHOD_18 ( & STRUCT_OR_UNION_15 -> VAR_64 ) , METHOD_19 ( METHOD_20 ( & STRUCT_OR_UNION_16 -> VAR_65 ) ) ? ""continueprocessing"" : ""ignore"" ) ) ; VAR_66 = VAR_67 + sizeof ( struct STRUCT_OR_UNION_17 ) ; VAR_68 = VAR_69 - ( sizeof ( struct STRUCT_OR_UNION_18 ) - 4 ) ; METHOD_21 ( * VAR_70 , VAR_71 ) ; VAR_72 = VAR_73 ; switch ( VAR_74 ) { case VAR_75 : case VAR_76 : case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : while ( VAR_83 >= 4 ) { VAR_84 = METHOD_22 ( VAR_85 , VAR_86 , VAR_87 ) ; if ( VAR_88 == 0 ) break ; VAR_89 -= VAR_90 ; VAR_91 += VAR_92 ; } break ; case VAR_93 : case VAR_94 : case VAR_95 : default : if ( VAR_96 -> VAR_97 <= 1 ) METHOD_23 ( VAR_98 , VAR_99 , ""\\n\\t"" , VAR_100 ) ; break ; } if ( VAR_101 -> VAR_102 > 1 || VAR_103 == VAR_104 ) METHOD_24 ( VAR_105 , VAR_106 + sizeof ( struct STRUCT_OR_UNION_19 ) , ""\\n\\t"" , VAR_107 ) ; VAR_108 += VAR_109 + 4 ; VAR_110 -= VAR_111 + 4 ; } return VAR_112 + 4 ; VAR_113 : METHOD_25 ( ( VAR_114 , ""%s"" , VAR_115 ) ) ; return 0 ; }",422
423,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { register TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ;  TYPE_9 VAR_10 ;  TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 * VAR_13 ; TYPE_13 * VAR_14 ; VAR_15 = VAR_16 -> VAR_17 [ 0 ] ; VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; METHOD_1 ( VAR_21 -> VAR_22 == VAR_23 ) ; if ( ( VAR_24 -> VAR_25 == VAR_26 ) && ( ! METHOD_2 ( VAR_27 ) ) ) VAR_28 = VAR_29 -> VAR_30 [ 1 ] ; else VAR_31 = 1 ; VAR_32 = METHOD_3 ( VAR_33 , VAR_34 ) ; if ( VAR_35 > VAR_36 ) { VAR_37 = VAR_38 ; VAR_39 = VAR_40 ; } else if ( VAR_41 > 0 ) { TYPE_14 VAR_42 ; VAR_43 = ( TYPE_15 ) ( VAR_44 / VAR_45 ) ; VAR_46 = VAR_47 * VAR_48 ; VAR_49 = VAR_50 * VAR_51 ; } else return ; if ( VAR_52 >= VAR_53 -> VAR_54 ) return ;  VAR_55 = METHOD_4 ( VAR_56 , VAR_57 ) ;   if ( ( VAR_58 == 0 ) || ( VAR_59 > 0xFFFFFFFF ) )  return ; VAR_60 = ( TYPE_16 ) VAR_61 ;  VAR_62 = ( TYPE_17 * ) VAR_63 ( VAR_64 , VAR_65 , sizeof ( TYPE_18 ) ,  ""forchopped\\""StripByteCounts\\""array"" ) ;  VAR_66 = ( TYPE_19 * ) VAR_67 ( VAR_68 , VAR_69 , sizeof ( TYPE_20 ) ,  ""forchopped\\""StripOffsets\\""array"" ) ; if ( VAR_70 == VAR_71 || VAR_72 == VAR_73 ) { if ( VAR_74 != VAR_75 ) METHOD_5 ( VAR_76 ) ; if ( VAR_77 != VAR_78 ) METHOD_6 ( VAR_79 ) ; return ; }  for ( VAR_80 = 0 ; VAR_81 < VAR_82 ; VAR_83 ++ ) {  if ( VAR_84 > VAR_85 ) VAR_86 = VAR_87 ; VAR_88 [ VAR_89 ] = VAR_90 ;  VAR_91 [ VAR_92 ] = VAR_93 ;  VAR_94 += VAR_95 ; VAR_96 -= VAR_97 ; }  VAR_98 -> VAR_99 = VAR_100 -> VAR_101 = VAR_102 ;  METHOD_7 ( VAR_103 , VAR_104 , VAR_105 ) ; METHOD_8 ( VAR_106 -> VAR_107 ) ; METHOD_9 ( VAR_108 -> VAR_109 ) ; VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = VAR_115 ; VAR_116 -> VAR_117 = 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { register TYPE_2 * VAR_1 = & VAR_2 -> VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 * VAR_13 ; TYPE_13 * VAR_14 ; VAR_15 = VAR_16 -> VAR_17 [ 0 ] ; VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; METHOD_1 ( VAR_21 -> VAR_22 == VAR_23 ) ; if ( ( VAR_24 -> VAR_25 == VAR_26 ) && ( ! METHOD_2 ( VAR_27 ) ) ) VAR_28 = VAR_29 -> VAR_30 [ 1 ] ; else VAR_31 = 1 ; VAR_32 = METHOD_3 ( VAR_33 , VAR_34 ) ; if ( VAR_35 > VAR_36 ) { VAR_37 = VAR_38 ; VAR_39 = VAR_40 ; } else if ( VAR_41 > 0 ) { TYPE_14 VAR_42 ; VAR_43 = ( TYPE_15 ) ( VAR_44 / VAR_45 ) ; VAR_46 = VAR_47 * VAR_48 ; VAR_49 = VAR_50 * VAR_51 ; } else return ; if ( VAR_52 >= VAR_53 -> VAR_54 ) return ; VAR_118 = METHOD_10 ( VAR_116 -> VAR_119 , VAR_105 ) ; if ( VAR_118 == 0 ) || ( VAR_59 > 0xFFFFFFFF ) ) return ; VAR_60 = ( TYPE_16 ) VAR_61 ; VAR_62 = ( TYPE_17 * ) VAR_63 ( VAR_64 , VAR_65 , sizeof ( TYPE_18 ) , ""forchopped\\""StripByteCounts\\""array"" ) ; VAR_66 = ( TYPE_19 * ) VAR_67 ( VAR_68 , VAR_69 , sizeof ( TYPE_20 ) , ""forchopped\\""StripOffsets\\""array"" ) ; if ( VAR_70 == VAR_71 || VAR_72 == VAR_73 ) { if ( VAR_74 != VAR_75 ) METHOD_5 ( VAR_76 ) ; if ( VAR_77 != VAR_78 ) METHOD_6 ( VAR_79 ) ; return ; } for ( VAR_80 = 0 ; VAR_81 < VAR_82 ; VAR_83 ++ ) { if ( VAR_84 > VAR_85 ) VAR_86 = VAR_87 ; VAR_88 [ VAR_89 ] = VAR_90 ; VAR_91 [ VAR_92 ] = VAR_97 ? VAR_94 : 0 ; VAR_94 += VAR_95 ; VAR_96 -= VAR_97 ; } VAR_98 -> VAR_99 = VAR_100 -> VAR_101 = VAR_118 ; METHOD_7 ( VAR_103 , VAR_104 , VAR_105 ) ; METHOD_8 ( VAR_106 -> VAR_107 ) ; METHOD_9 ( VAR_108 -> VAR_109 ) ; VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = VAR_115 ; VAR_116 -> VAR_117 = 1 ; }",423
424, static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )   {  STRUCT_OR_UNION_2 -> VAR_0 = & STRUCT_OR_UNION_3 -> VAR_1 ; STRUCT_OR_UNION_4 -> VAR_2 -> VAR_3 = STRUCT_OR_UNION_5 -> VAR_4 ;  STRUCT_OR_UNION_6 -> VAR_5 -> VAR_6 = STRUCT_OR_UNION_7 -> VAR_7 ;  STRUCT_OR_UNION_8 -> VAR_8 = 1 ; STRUCT_OR_UNION_9 -> VAR_9 = 0 ; return 0 ; },"static TYPE_0 METHOD_0 ( TYPE_1 VAR_10 , struct STRUCT_OR_UNION_10 * STRUCT_OR_UNION_10 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { STRUCT_OR_UNION_2 -> VAR_0 = & STRUCT_OR_UNION_3 -> VAR_1 ; STRUCT_OR_UNION_4 -> VAR_2 -> VAR_3 = STRUCT_OR_UNION_5 -> VAR_4 ; STRUCT_OR_UNION_6 -> VAR_5 -> VAR_6 = VAR_11 ; STRUCT_OR_UNION_9 -> VAR_9 = 0 ; return 0 ; }",424
425,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , unsigned * VAR_2 , unsigned VAR_3 ) { TYPE_3 VAR_4 ; unsigned VAR_5 ; unsigned VAR_6 ; TYPE_4 * VAR_7 ; TYPE_5 VAR_8 [ VAR_9 + 1 ] ; METHOD_1 ( VAR_10 != VAR_11 ) ; METHOD_2 ( VAR_12 != VAR_13 ) ; METHOD_3 ( VAR_14 ) ; METHOD_4 ( VAR_15 >= 0 ) ; METHOD_5 ( VAR_16 != VAR_17 ) ; METHOD_6 ( VAR_18 != VAR_19 ) ; METHOD_7 ( VAR_20 , 0 , VAR_21 + 1 ) ; if ( VAR_22 == 0 ) METHOD_8 ( ) ;  switch ( VAR_23 = ( * VAR_24 ) ( VAR_25 ) )  { case '-' : case '+' : * VAR_26 = VAR_27 == '-' ; if ( ( * VAR_28 ) ( VAR_29 , VAR_30 , VAR_31 ) != ( TYPE_6 ) VAR_32 ) { return ( VAR_33 ) ; } if ( VAR_34 >= VAR_35 ) { if ( VAR_36 > VAR_37 ) goto VAR_38 ; if ( METHOD_9 ( VAR_39 , VAR_40 , VAR_41 ) > 0 ) goto VAR_42 ; } VAR_43 = VAR_44 ; VAR_45 = 0 ; do { if ( ( ( VAR_46 = * VAR_47 ++ ) < '0' ) || ( VAR_48 > '9' ) ) { return ( VAR_49 ) ; } VAR_50 = 10 * VAR_51 + VAR_52 - '0' ; } while ( -- VAR_53 ) ; * VAR_54 = VAR_55 ; return ( VAR_56 ) ; break ; case '0' : return ( VAR_57 ) ; break ; case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : VAR_58 = VAR_59 - '0' ; if ( VAR_60 > 1 ) { if ( ( * VAR_61 ) ( VAR_62 , VAR_63 + 1 , VAR_64 - 1 ) != ( TYPE_7 ) VAR_65 - 1 ) { return ( VAR_66 ) ; } VAR_67 = VAR_68 ; if ( VAR_69 >= VAR_70 ) { if ( VAR_71 > VAR_72 ) break ; * VAR_73 = VAR_74 ; if ( METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) > 0 ) break ; } while ( -- VAR_78 ) { if ( ( ( VAR_79 = * ++ VAR_80 ) < '0' ) || ( VAR_81 > '9' ) ) { return ( VAR_82 ) ; } VAR_83 = 10 * VAR_84 + VAR_85 - '0' ; } } return ( METHOD_11 ( VAR_86 , VAR_87 , VAR_88 , VAR_89 ) ) ; break ; case - 1 : return ( VAR_90 ) ; break ; case - 2 : return ( VAR_91 ) ; break ; default : return ( VAR_92 ) ; break ; } * VAR_93 = VAR_94 ; VAR_95 : * VAR_96 = VAR_97 ; return ( VAR_98 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , unsigned * VAR_2 , unsigned VAR_3 ) { TYPE_3 VAR_4 ; unsigned VAR_5 ; unsigned VAR_6 ; TYPE_4 * VAR_7 ; TYPE_5 VAR_8 [ VAR_9 + 1 ] ; METHOD_1 ( VAR_10 != VAR_11 ) ; METHOD_2 ( VAR_12 != VAR_13 ) ; METHOD_3 ( VAR_14 ) ; METHOD_4 ( VAR_15 >= 0 ) ; METHOD_5 ( VAR_16 != VAR_17 ) ; METHOD_6 ( VAR_18 != VAR_19 ) ; METHOD_7 ( VAR_20 , 0 , VAR_21 + 1 ) ; if ( VAR_22 == 0 ) METHOD_8 ( ) ; if ( VAR_78 >= VAR_77 ) { if ( VAR_78 > VAR_77 ) goto VAR_95 ; if ( METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) > 0 ) goto VAR_95 ; } switch ( VAR_23 = ( * VAR_24 ) ( VAR_25 ) ) { case '-' : case '+' : * VAR_26 = VAR_27 == '-' ; if ( ( * VAR_28 ) ( VAR_29 , VAR_30 , VAR_31 ) != ( TYPE_6 ) VAR_32 ) { return ( VAR_33 ) ; } if ( VAR_34 >= VAR_35 ) { if ( VAR_36 > VAR_37 ) goto VAR_38 ; if ( METHOD_9 ( VAR_39 , VAR_40 , VAR_41 ) > 0 ) goto VAR_42 ; } VAR_43 = VAR_44 ; VAR_45 = 0 ; do { if ( ( ( VAR_46 = * VAR_47 ++ ) < '0' ) || ( VAR_48 > '9' ) ) { return ( VAR_49 ) ; } VAR_50 = 10 * VAR_51 + VAR_52 - '0' ; } while ( -- VAR_53 ) ; * VAR_54 = VAR_55 ; return ( VAR_56 ) ; break ; case '0' : return ( VAR_57 ) ; break ; case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : case '7' : case '8' : case '9' : VAR_58 = VAR_59 - '0' ; if ( VAR_60 > 1 ) { if ( ( * VAR_61 ) ( VAR_62 , VAR_63 + 1 , VAR_64 - 1 ) != ( TYPE_7 ) VAR_65 - 1 ) { return ( VAR_66 ) ; } VAR_67 = VAR_68 ; if ( VAR_69 >= VAR_70 ) { if ( VAR_71 > VAR_72 ) break ; * VAR_73 = VAR_74 ; if ( METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) > 0 ) break ; } while ( -- VAR_78 ) { if ( ( ( VAR_79 = * ++ VAR_80 ) < '0' ) || ( VAR_81 > '9' ) ) { return ( VAR_82 ) ; } VAR_83 = 10 * VAR_84 + VAR_85 - '0' ; } } return ( METHOD_11 ( VAR_86 , VAR_87 , VAR_88 , VAR_89 ) ) ; break ; case - 1 : return ( VAR_90 ) ; break ; case - 2 : return ( VAR_91 ) ; break ; default : return ( VAR_92 ) ; break ; } * VAR_93 = VAR_94 ; VAR_95 : * VAR_96 = VAR_97 ; return ( VAR_98 ) ; }",425
426,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 != VAR_2 ) ; TYPE_2 VAR_3 = 0 ;  if ( METHOD_2 ( VAR_4 -> VAR_5 , VAR_6 , & VAR_7 ) == - 1 )  return - 1 ; return VAR_8 ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 != VAR_2 ) ; TYPE_2 VAR_3 = 0 ; if ( METHOD_3 ( METHOD_2 ( VAR_4 -> VAR_5 , VAR_6 , & VAR_7 ) == - 1 ) return - 1 ; return VAR_8 ; }",426
427," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ,  TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 * VAR_7 ) {  const TYPE_9 VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ;  const TYPE_10 * const VAR_13 = METHOD_2 ( VAR_14 , VAR_15 ) ;  const TYPE_11 VAR_16 = ( VAR_17 + VAR_18 ) < VAR_19 -> VAR_20 ; const TYPE_12 VAR_21 = ( VAR_22 + VAR_23 ) < VAR_24 -> VAR_25 ; if ( VAR_26 && VAR_27 ) { METHOD_3 ( VAR_28 , VAR_29 , VAR_30 , & VAR_31 [ VAR_32 ] ) ; } else if ( ! VAR_33 && VAR_34 ) { METHOD_4 ( VAR_35 == VAR_36 || VAR_37 == VAR_38 ) ;  METHOD_5 ( VAR_39 , VAR_40 == VAR_41 , VAR_42 [ 1 ] ) ;  } else if ( VAR_43 && ! VAR_44 ) { METHOD_6 ( VAR_45 == VAR_46 || VAR_47 == VAR_48 ) ;  METHOD_7 ( VAR_49 , VAR_50 == VAR_51 , VAR_52 [ 2 ] ) ;  } else { METHOD_8 ( VAR_53 == VAR_54 ) ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 VAR_6 , TYPE_8 * VAR_7 ) { const TYPE_9 VAR_8 = METHOD_1 ( VAR_9 , VAR_10 , VAR_11 , VAR_12 ) ; const TYPE_14 * const VAR_52 = VAR_9 -> VAR_55 [ VAR_15 ] ; const TYPE_12 VAR_21 = ( VAR_22 + VAR_23 ) < VAR_24 -> VAR_25 ; if ( VAR_26 && VAR_27 ) { METHOD_3 ( VAR_28 , VAR_29 , VAR_30 , & VAR_31 [ VAR_32 ] ) ; } else if ( ! VAR_33 && VAR_34 ) { METHOD_4 ( VAR_35 == VAR_36 || VAR_37 == VAR_38 ) ; METHOD_9 ( VAR_49 , VAR_50 == VAR_51 , VAR_52 [ 2 ] ) ; } else { METHOD_8 ( VAR_53 == VAR_54 ) ; } }",427
428,static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 ;  METHOD_1 ( & VAR_2 -> VAR_3 ) ;  for ( VAR_4 = METHOD_2 ( VAR_5 -> VAR_6 ) - 1 ; VAR_7 >= 0 ; VAR_8 -- )  { if ( VAR_9 -> VAR_10 [ VAR_11 ] . METHOD_3 ) VAR_12 -> VAR_13 [ VAR_14 ] . METHOD_4 ( & VAR_15 -> VAR_16 [ VAR_17 ] ) ; } return VAR_18 ; },static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; METHOD_1 ( & VAR_2 -> VAR_3 ) ; vpx_free ( VAR_15 ) ; return VAR_18 ; },428
429, TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 )  { if ( VAR_1 ) { if ( VAR_2 -> VAR_3 ) { METHOD_1 ( VAR_4 -> VAR_5 ) ; VAR_6 -> VAR_7 = 0 ; VAR_8 -> VAR_9 = 0 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; } } },static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 ) { if ( VAR_2 -> VAR_3 ) { METHOD_1 ( VAR_4 -> VAR_5 ) ; VAR_6 -> VAR_7 = 0 ; VAR_8 -> VAR_9 = 0 ; VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = 0 ; } } },429
430,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 VAR_0 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = & STRUCT_OR_UNION_4 -> STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_1 = STRUCT_OR_UNION_7 -> VAR_2 . VAR_3 ; struct STRUCT_OR_UNION_8 * VAR_4 = & VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_9 * VAR_7 ; struct STRUCT_OR_UNION_10 * VAR_8 ; TYPE_2 * VAR_9 , * VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; TYPE_4 VAR_14 ; TYPE_5 VAR_15 [ 64 ] ; VAR_16 = ( VAR_17 -> VAR_18 - VAR_19 -> VAR_20 ) / sizeof ( VAR_21 -> VAR_22 [ 0 ] ) ; VAR_23 = VAR_24 -> VAR_25 [ VAR_26 ] ; VAR_27 = METHOD_1 ( VAR_28 -> VAR_29 -> VAR_30 . VAR_31 ) ; VAR_32 = VAR_33 + VAR_34 ; VAR_35 = METHOD_2 ( VAR_36 -> VAR_37 [ VAR_38 ] , METHOD_3 ( VAR_39 -> VAR_40 -> VAR_41 . VAR_42 ) ,  VAR_43 , ( TYPE_6 * * ) & VAR_44 ) ;  if ( VAR_45 == - 1 ) { METHOD_4 ( VAR_46 , ""BUG?WUSBhosthasnosecuritydescriptors\\n"" ) ; return 0 ; } VAR_47 = sizeof ( * VAR_48 ) ; if ( VAR_49 - ( TYPE_7 * ) VAR_50 < VAR_51 ) { METHOD_5 ( VAR_52 , ""BUG?Notenoughdatatoprocesssecurity"" ""descriptorheader(%zubytesleftvs%zuneeded)\\n"" , VAR_53 - ( TYPE_8 * ) VAR_54 , VAR_55 ) ; return 0 ; } VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 ) ; if ( VAR_59 - ( TYPE_9 * ) VAR_60 < VAR_61 ) { METHOD_7 ( VAR_62 , ""BUG?Notenoughdatatoprocesssecurity"" ""descriptors(%zubytesleftvs%zuneeded)\\n"" , VAR_63 - ( TYPE_10 * ) VAR_64 , VAR_65 ) ; return 0 ; } VAR_66 = ( TYPE_11 * ) VAR_67 + sizeof ( * VAR_68 ) ; VAR_69 = ( TYPE_12 * ) VAR_70 + METHOD_8 ( VAR_71 -> VAR_72 ) ; VAR_73 = 0 ; VAR_74 = 0 ; while ( VAR_75 < VAR_76 ) { VAR_77 = VAR_78 ; if ( VAR_79 - VAR_80 < sizeof ( * VAR_81 ) ) { METHOD_9 ( VAR_82 , ""BUG:badhostsecuritydescriptor;"" ""notenoughdata(%zuvs%zuleft)\\n"" , VAR_83 - VAR_84 , sizeof ( * VAR_85 ) ) ; break ; } if ( VAR_86 -> VAR_87 < sizeof ( * VAR_88 ) ) { METHOD_10 ( VAR_89 , ""BUG:badhostencryptiondescriptor;"" ""descriptoristooshort"" ""(%zuvs%zuneeded)\\n"" , ( TYPE_13 ) VAR_90 -> VAR_91 , sizeof ( * VAR_92 ) ) ; break ; } VAR_93 += VAR_94 -> VAR_95 ; VAR_96 += METHOD_11 ( VAR_97 + VAR_98 , sizeof ( VAR_99 ) - VAR_100 , ""%s(0x%02x)"" , METHOD_12 ( VAR_101 -> VAR_102 ) , VAR_103 -> VAR_104 ) ; STRUCT_OR_UNION_11 -> VAR_105 = VAR_106 ; } METHOD_13 ( VAR_107 , ""supportedencryptiontypes:%s\\n"" , VAR_108 ) ; if ( STRUCT_OR_UNION_12 -> VAR_109 == VAR_110 ) { METHOD_14 ( VAR_111 , ""E:hostdoesn\'tsupportCCM-1crypto\\n"" ) ; return 0 ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 VAR_0 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = & STRUCT_OR_UNION_4 -> STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_1 = STRUCT_OR_UNION_7 -> VAR_2 . VAR_3 ; struct STRUCT_OR_UNION_8 * VAR_4 = & VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_9 * VAR_7 ; struct STRUCT_OR_UNION_10 * VAR_8 ; TYPE_2 * VAR_9 , * VAR_10 ; TYPE_3 VAR_11 , VAR_12 , VAR_13 ; TYPE_4 VAR_14 ; TYPE_5 VAR_15 [ 64 ] ; VAR_16 = ( VAR_17 -> VAR_18 - VAR_19 -> VAR_20 ) / sizeof ( VAR_21 -> VAR_22 [ 0 ] ) ; VAR_23 = VAR_24 -> VAR_25 [ VAR_26 ] ; VAR_27 = METHOD_1 ( VAR_28 -> VAR_29 -> VAR_30 . VAR_31 ) ; VAR_32 = VAR_33 + VAR_34 ; VAR_35 = METHOD_2 ( VAR_36 -> VAR_37 [ VAR_38 ] , METHOD_3 ( VAR_39 -> VAR_40 -> VAR_41 . VAR_42 ) , VAR_43 , ( TYPE_6 * * ) & VAR_44 ) ; if ( VAR_45 == - 1 ) { METHOD_4 ( VAR_46 , ""BUG?WUSBhosthasnosecuritydescriptors\\n"" ) ; return 0 ; } VAR_47 = sizeof ( * VAR_48 ) ; if ( VAR_49 - ( TYPE_7 * ) VAR_50 < VAR_51 ) { METHOD_5 ( VAR_52 , ""BUG?Notenoughdatatoprocesssecurity"" ""descriptorheader(%zubytesleftvs%zuneeded)\\n"" , VAR_53 - ( TYPE_8 * ) VAR_54 , VAR_55 ) ; return 0 ; } VAR_56 = METHOD_6 ( VAR_57 -> VAR_58 ) ; if ( VAR_59 - ( TYPE_9 * ) VAR_60 < VAR_61 ) { METHOD_7 ( VAR_62 , ""BUG?Notenoughdatatoprocesssecurity"" ""descriptors(%zubytesleftvs%zuneeded)\\n"" , VAR_63 - ( TYPE_10 * ) VAR_64 , VAR_65 ) ; return 0 ; } VAR_66 = ( TYPE_11 * ) VAR_67 + sizeof ( * VAR_68 ) ; VAR_69 = ( TYPE_12 * ) VAR_70 + METHOD_8 ( VAR_71 -> VAR_72 ) ; VAR_73 = 0 ; VAR_74 = 0 ; while ( VAR_75 < VAR_76 ) { VAR_77 = VAR_78 ; if ( VAR_79 - VAR_80 < sizeof ( * VAR_81 ) ) { METHOD_9 ( VAR_82 , ""BUG:badhostsecuritydescriptor;"" ""notenoughdata(%zuvs%zuleft)\\n"" , VAR_83 - VAR_84 , sizeof ( * VAR_85 ) ) ; break ; } if ( VAR_86 -> VAR_87 < sizeof ( * VAR_88 ) ) { METHOD_10 ( VAR_89 , ""BUG:badhostencryptiondescriptor;"" ""descriptoristooshort"" ""(%zuvs%zuneeded)\\n"" , ( TYPE_13 ) VAR_90 -> VAR_91 , sizeof ( * VAR_92 ) ) ; break ; } VAR_93 += VAR_94 -> VAR_95 ; VAR_96 += METHOD_11 ( VAR_97 + VAR_98 , sizeof ( VAR_99 ) - VAR_100 , ""%s(0x%02x)"" , METHOD_12 ( VAR_101 -> VAR_102 ) , VAR_103 -> VAR_104 ) ; STRUCT_OR_UNION_11 -> VAR_105 = VAR_106 ; } METHOD_13 ( VAR_107 , ""supportedencryptiontypes:%s\\n"" , VAR_108 ) ; if ( STRUCT_OR_UNION_12 -> VAR_109 == VAR_110 ) { METHOD_14 ( VAR_111 , ""E:hostdoesn\'tsupportCCM-1crypto\\n"" ) ; return 0 ; } return 0 ; }",430
431,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 VAR_7 = VAR_8 -> VAR_9 ; const TYPE_5 * VAR_10 = VAR_11 -> VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 VAR_15 , VAR_16 [ 4 ] ; TYPE_9 VAR_17 = VAR_18 -> VAR_19 ; TYPE_10 VAR_20 = VAR_21 -> VAR_22 . VAR_23 ; unsigned TYPE_11 * VAR_24 , * VAR_25 , * VAR_26 ; unsigned TYPE_12 * VAR_27 , * VAR_28 , * VAR_29 ; VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = VAR_37 -> VAR_38 ; VAR_39 = VAR_40 -> VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; for ( VAR_48 = 0 ; VAR_49 < VAR_50 -> VAR_51 ; VAR_52 ++ ) { for ( VAR_53 = 0 ; VAR_54 < VAR_55 -> VAR_56 ; VAR_57 ++ ) { if ( VAR_58 == VAR_59 ) VAR_60 = METHOD_1 ( VAR_61 , VAR_62 ) ; else VAR_63 = ( VAR_64 == VAR_65 ? 4 : 0 ) ; if ( VAR_66 ) { if ( VAR_67 < 4 ) { TYPE_13 VAR_68 , VAR_69 ; for ( VAR_70 = 0 ; VAR_71 < 2 ; ++ VAR_72 ) for ( VAR_73 = 0 ; VAR_74 < 2 ; ++ VAR_75 ) { if ( VAR_76 [ VAR_77 * 2 + VAR_78 ] ) { METHOD_2 ( 8 , VAR_79 , VAR_80 , VAR_81 + 8 * ( VAR_82 * VAR_83 -> VAR_84 + VAR_85 ) , VAR_86 + 4 * ( VAR_87 * VAR_88 -> VAR_89 + VAR_90 ) , VAR_91 + 4 * ( VAR_92 * VAR_93 -> VAR_94 + VAR_95 ) , VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 + 8 * ( VAR_101 * VAR_102 -> VAR_103 + VAR_104 ) , VAR_105 + 4 * ( VAR_106 * VAR_107 -> VAR_108 + VAR_109 ) , VAR_110 + 4 * ( VAR_111 * VAR_112 -> VAR_113 + VAR_114 ) , VAR_115 -> VAR_116 , VAR_117 -> VAR_118 ) ; } else { TYPE_14 VAR_119 ; unsigned TYPE_15 * VAR_120 = VAR_121 + 4 * ( VAR_122 * VAR_123 -> VAR_124 + VAR_125 ) ; unsigned TYPE_16 * VAR_126 = VAR_127 + 4 * ( VAR_128 * VAR_129 -> VAR_130 + VAR_131 ) ; unsigned TYPE_17 * VAR_132 = VAR_133 + 4 * ( VAR_134 * VAR_135 -> VAR_136 + VAR_137 ) ; unsigned TYPE_18 * VAR_138 = VAR_139 + 4 * ( VAR_140 * VAR_141 -> VAR_142 + VAR_143 ) ; METHOD_3 ( VAR_144 + 8 * ( VAR_145 * VAR_146 -> VAR_147 + VAR_148 ) , VAR_149 -> VAR_150 , VAR_151 + 8 * ( VAR_152 * VAR_153 -> VAR_154 + VAR_155 ) , VAR_156 -> VAR_157 ) ; for ( VAR_158 = 0 ; VAR_159 < 4 ; ++ VAR_160 , VAR_161 += VAR_162 -> VAR_163 , VAR_164 += VAR_165 -> VAR_166 , VAR_167 += VAR_168 -> VAR_169 , VAR_170 += VAR_171 -> VAR_172 ) {  METHOD_4 ( VAR_173 , VAR_174 , 4 ) ;   METHOD_5 ( VAR_175 , VAR_176 , 4 ) ;  } } } } else { METHOD_6 ( 16 , VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 , VAR_182 -> VAR_183 , VAR_184 -> VAR_185 , VAR_186 , VAR_187 , VAR_188 , VAR_189 -> VAR_190 , VAR_191 -> VAR_192 ) ; } } else { METHOD_7 ( VAR_193 , VAR_194 -> VAR_195 , VAR_196 , VAR_197 -> VAR_198 ) ; METHOD_8 ( VAR_199 , VAR_200 -> VAR_201 , VAR_202 , VAR_203 -> VAR_204 ) ; METHOD_9 ( VAR_205 , VAR_206 -> VAR_207 , VAR_208 , VAR_209 -> VAR_210 ) ; } VAR_211 += 16 ; VAR_212 += 8 ; VAR_213 += 8 ; VAR_214 += 16 ; VAR_215 += 8 ; VAR_216 += 8 ; VAR_217 ++ ; } VAR_218 += VAR_219 -> VAR_220 * 16 - 16 * VAR_221 -> VAR_222 ; VAR_223 += VAR_224 -> VAR_225 * 8 - 8 * VAR_226 -> VAR_227 ; VAR_228 += VAR_229 -> VAR_230 * 8 - 8 * VAR_231 -> VAR_232 ; VAR_233 += VAR_234 -> VAR_235 * 16 - 16 * VAR_236 -> VAR_237 ; VAR_238 += VAR_239 -> VAR_240 * 8 - 8 * VAR_241 -> VAR_242 ; VAR_243 += VAR_244 -> VAR_245 * 8 - 8 * VAR_246 -> VAR_247 ; VAR_248 ++ ; } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 * VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 VAR_7 = VAR_8 -> VAR_9 ; const TYPE_5 * VAR_10 = VAR_11 -> VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 ; TYPE_8 VAR_15 , VAR_16 [ 4 ] ; TYPE_9 VAR_17 = VAR_18 -> VAR_19 ; TYPE_10 VAR_20 = VAR_21 -> VAR_22 . VAR_23 ; unsigned TYPE_11 * VAR_24 , * VAR_25 , * VAR_26 ; unsigned TYPE_12 * VAR_27 , * VAR_28 , * VAR_29 ; VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = VAR_37 -> VAR_38 ; VAR_39 = VAR_40 -> VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; for ( VAR_48 = 0 ; VAR_49 < VAR_50 -> VAR_51 ; VAR_52 ++ ) { for ( VAR_53 = 0 ; VAR_54 < VAR_55 -> VAR_56 ; VAR_57 ++ ) { if ( VAR_58 == VAR_59 ) VAR_60 = METHOD_1 ( VAR_61 , VAR_62 ) ; else VAR_63 = ( VAR_64 == VAR_65 ? 4 : 0 ) ; if ( VAR_66 ) { if ( VAR_67 < 4 ) { TYPE_13 VAR_68 , VAR_69 ; for ( VAR_70 = 0 ; VAR_71 < 2 ; ++ VAR_72 ) for ( VAR_73 = 0 ; VAR_74 < 2 ; ++ VAR_75 ) { if ( VAR_76 [ VAR_77 * 2 + VAR_78 ] ) { METHOD_2 ( 8 , VAR_79 , VAR_80 , VAR_81 + 8 * ( VAR_82 * VAR_83 -> VAR_84 + VAR_85 ) , VAR_86 + 4 * ( VAR_87 * VAR_88 -> VAR_89 + VAR_90 ) , VAR_91 + 4 * ( VAR_92 * VAR_93 -> VAR_94 + VAR_95 ) , VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 + 8 * ( VAR_101 * VAR_102 -> VAR_103 + VAR_104 ) , VAR_105 + 4 * ( VAR_106 * VAR_107 -> VAR_108 + VAR_109 ) , VAR_110 + 4 * ( VAR_111 * VAR_112 -> VAR_113 + VAR_114 ) , VAR_115 -> VAR_116 , VAR_117 -> VAR_118 ) ; } else { TYPE_14 VAR_119 ; unsigned TYPE_15 * VAR_120 = VAR_121 + 4 * ( VAR_122 * VAR_123 -> VAR_124 + VAR_125 ) ; unsigned TYPE_16 * VAR_126 = VAR_127 + 4 * ( VAR_128 * VAR_129 -> VAR_130 + VAR_131 ) ; unsigned TYPE_17 * VAR_132 = VAR_133 + 4 * ( VAR_134 * VAR_135 -> VAR_136 + VAR_137 ) ; unsigned TYPE_18 * VAR_138 = VAR_139 + 4 * ( VAR_140 * VAR_141 -> VAR_142 + VAR_143 ) ; METHOD_3 ( VAR_144 + 8 * ( VAR_145 * VAR_146 -> VAR_147 + VAR_148 ) , VAR_149 -> VAR_150 , VAR_151 + 8 * ( VAR_152 * VAR_153 -> VAR_154 + VAR_155 ) , VAR_156 -> VAR_157 ) ; for ( VAR_158 = 0 ; VAR_159 < 4 ; ++ VAR_160 , VAR_161 += VAR_162 -> VAR_163 , VAR_164 += VAR_165 -> VAR_166 , VAR_167 += VAR_168 -> VAR_169 , VAR_170 += VAR_171 -> VAR_172 ) { METHOD_4 ( VAR_173 , VAR_174 , 4 ) ; METHOD_10 ( VAR_175 , VAR_176 , 4 ) ; } } } } else { METHOD_6 ( 16 , VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 , VAR_182 -> VAR_183 , VAR_184 -> VAR_185 , VAR_186 , VAR_187 , VAR_188 , VAR_189 -> VAR_190 , VAR_191 -> VAR_192 ) ; } } else { METHOD_7 ( VAR_193 , VAR_194 -> VAR_195 , VAR_196 , VAR_197 -> VAR_198 ) ; METHOD_8 ( VAR_199 , VAR_200 -> VAR_201 , VAR_202 , VAR_203 -> VAR_204 ) ; METHOD_9 ( VAR_205 , VAR_206 -> VAR_207 , VAR_208 , VAR_209 -> VAR_210 ) ; } VAR_211 += 16 ; VAR_212 += 8 ; VAR_213 += 8 ; VAR_214 += 16 ; VAR_215 += 8 ; VAR_216 += 8 ; VAR_217 ++ ; } VAR_218 += VAR_219 -> VAR_220 * 16 - 16 * VAR_221 -> VAR_222 ; VAR_223 += VAR_224 -> VAR_225 * 8 - 8 * VAR_226 -> VAR_227 ; VAR_228 += VAR_229 -> VAR_230 * 8 - 8 * VAR_231 -> VAR_232 ; VAR_233 += VAR_234 -> VAR_235 * 16 - 16 * VAR_236 -> VAR_237 ; VAR_238 += VAR_239 -> VAR_240 * 8 - 8 * VAR_241 -> VAR_242 ; VAR_243 += VAR_244 -> VAR_245 * 8 - 8 * VAR_246 -> VAR_247 ; VAR_248 ++ ; } }",431
432,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , enum VAR_5 VAR_6 , TYPE_5 VAR_7 ) { struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_2 * VAR_11 = METHOD_1 ( VAR_12 ) ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 + VAR_15 ; TYPE_6 VAR_16 , VAR_17 = 0 ; VAR_18 = METHOD_2 ( VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 ) return VAR_28 ; VAR_29 += VAR_30 -> VAR_31 ; if ( VAR_32 -> VAR_33 == VAR_34 ) { if ( VAR_35 == VAR_36 && VAR_37 >= 0 && METHOD_4 ( VAR_38 , VAR_39 ) ) { METHOD_5 ( VAR_40 , ""R%dleaksaddrintomap\\n"" , VAR_41 ) ; return - VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; if ( ! VAR_49 && VAR_50 == VAR_51 && VAR_52 >= 0 ) METHOD_7 ( VAR_53 , VAR_54 , VAR_55 ) ; } else if ( VAR_56 -> VAR_57 == VAR_58 ) { enum VAR_59 VAR_60 = VAR_61 ; if ( VAR_62 == VAR_63 && VAR_64 >= 0 && METHOD_8 ( VAR_65 , VAR_66 ) ) { METHOD_9 ( VAR_67 , ""R%dleaksaddrintoctx\\n"" , VAR_68 ) ; return - VAR_69 ; } if ( VAR_70 -> VAR_71 ) { METHOD_10 ( VAR_72 , ""dereferenceofmodifiedctxptrR%doff=%d+%d,ctx+constisallowed,ctx+const+constisnot\\n"" , VAR_73 , VAR_74 -> VAR_75 , VAR_76 - VAR_77 -> VAR_78 ) ; return - VAR_79 ; } if ( ! METHOD_11 ( VAR_80 -> VAR_81 ) || VAR_82 -> VAR_83 . VAR_84 ) { TYPE_7 VAR_85 [ 48 ] ; METHOD_12 ( VAR_86 , sizeof ( VAR_87 ) , VAR_88 -> VAR_89 ) ; METHOD_13 ( VAR_90 , ""variablectxaccessvar_off=%soff=%dsize=%d"" , VAR_91 , VAR_92 , VAR_93 ) ; return - VAR_94 ; } VAR_95 = METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 , & VAR_101 ) ; if ( ! VAR_102 && VAR_103 == VAR_104 && VAR_105 >= 0 ) { if ( VAR_106 == VAR_107 ) METHOD_15 ( VAR_108 , VAR_109 , VAR_110 ) ; else METHOD_16 ( VAR_111 , VAR_112 , VAR_113 ) ; VAR_114 [ VAR_115 ] . VAR_116 = 0 ; VAR_117 [ VAR_118 ] . VAR_119 = 0 ; VAR_120 [ VAR_121 ] . VAR_122 = 0 ; VAR_123 [ VAR_124 ] . VAR_125 = VAR_126 ; } } else if ( VAR_127 -> VAR_128 == VAR_129 ) { if ( ! METHOD_17 ( VAR_130 -> VAR_131 ) ) { TYPE_8 VAR_132 [ 48 ] ; METHOD_18 ( VAR_133 , sizeof ( VAR_134 ) , VAR_135 -> VAR_136 ) ; METHOD_19 ( VAR_137 , ""variablestackaccessvar_off=%soff=%dsize=%d"" , VAR_138 , VAR_139 , VAR_140 ) ; return - VAR_141 ; } VAR_142 += VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 >= 0 || VAR_147 < - VAR_148 ) { METHOD_20 ( VAR_149 , ""invalidstackoff=%dsize=%d\\n"" , VAR_150 , VAR_151 ) ; return - VAR_152 ; } if ( VAR_153 -> VAR_154 -> VAR_155 -> VAR_156 < - VAR_157 ) VAR_158 -> VAR_159 -> VAR_160 -> VAR_161 = - VAR_162 ; if ( VAR_163 == VAR_164 ) VAR_165 = METHOD_21 ( VAR_166 , VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ; else VAR_171 = METHOD_22 ( VAR_172 , VAR_173 , VAR_174 , VAR_175 , VAR_176 ) ; } else if ( METHOD_23 ( VAR_177 ) ) { if ( VAR_178 == VAR_179 && ! METHOD_24 ( VAR_180 , VAR_181 , VAR_182 ) ) { METHOD_25 ( VAR_183 , ""cannotwriteintopacket\\n"" ) ; return - VAR_184 ; } if ( VAR_185 == VAR_186 && VAR_187 >= 0 && METHOD_26 ( VAR_188 , VAR_189 ) ) { METHOD_27 ( VAR_190 , ""R%dleaksaddrintopacket\\n"" , VAR_191 ) ; return - VAR_192 ; } VAR_193 = METHOD_28 ( VAR_194 , VAR_195 , VAR_196 , VAR_197 , VAR_198 ) ; if ( ! VAR_199 && VAR_200 == VAR_201 && VAR_202 >= 0 ) METHOD_29 ( VAR_203 , VAR_204 , VAR_205 ) ; } else { METHOD_30 ( VAR_206 , ""R%dinvalidmemaccess\'%s\'\\n"" , VAR_207 , VAR_208 [ VAR_209 -> VAR_210 ] ) ; return - VAR_211 ; } if ( ! VAR_212 && VAR_213 < VAR_214 && VAR_215 >= 0 && VAR_216 == VAR_217 && VAR_218 [ VAR_219 ] . VAR_220 == VAR_221 ) {  VAR_222 [ VAR_223 ] . VAR_224 =  METHOD_31 ( VAR_225 [ VAR_226 ] . VAR_227 , VAR_228 ) ; METHOD_32 ( & VAR_229 [ VAR_230 ] ) ; } return VAR_231 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , enum VAR_5 VAR_6 , TYPE_5 VAR_7 ) { struct STRUCT_OR_UNION_1 * VAR_8 = VAR_9 -> VAR_10 ; struct STRUCT_OR_UNION_2 * VAR_11 = METHOD_1 ( VAR_12 ) ; struct STRUCT_OR_UNION_3 * VAR_13 = VAR_14 + VAR_15 ; TYPE_6 VAR_16 , VAR_17 = 0 ; VAR_18 = METHOD_2 ( VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 ) return VAR_28 ; VAR_29 += VAR_30 -> VAR_31 ; if ( VAR_32 -> VAR_33 == VAR_34 ) { if ( VAR_35 == VAR_36 && VAR_37 >= 0 && METHOD_4 ( VAR_38 , VAR_39 ) ) { METHOD_5 ( VAR_40 , ""R%dleaksaddrintomap\\n"" , VAR_41 ) ; return - VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ; if ( ! VAR_49 && VAR_50 == VAR_51 && VAR_52 >= 0 ) METHOD_7 ( VAR_53 , VAR_54 , VAR_55 ) ; } else if ( VAR_56 -> VAR_57 == VAR_58 ) { enum VAR_59 VAR_60 = VAR_61 ; if ( VAR_62 == VAR_63 && VAR_64 >= 0 && METHOD_8 ( VAR_65 , VAR_66 ) ) { METHOD_9 ( VAR_67 , ""R%dleaksaddrintoctx\\n"" , VAR_68 ) ; return - VAR_69 ; } if ( VAR_70 -> VAR_71 ) { METHOD_10 ( VAR_72 , ""dereferenceofmodifiedctxptrR%doff=%d+%d,ctx+constisallowed,ctx+const+constisnot\\n"" , VAR_73 , VAR_74 -> VAR_75 , VAR_76 - VAR_77 -> VAR_78 ) ; return - VAR_79 ; } if ( ! METHOD_11 ( VAR_80 -> VAR_81 ) || VAR_82 -> VAR_83 . VAR_84 ) { TYPE_7 VAR_85 [ 48 ] ; METHOD_12 ( VAR_86 , sizeof ( VAR_87 ) , VAR_88 -> VAR_89 ) ; METHOD_13 ( VAR_90 , ""variablectxaccessvar_off=%soff=%dsize=%d"" , VAR_91 , VAR_92 , VAR_93 ) ; return - VAR_94 ; } VAR_95 = METHOD_14 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 , & VAR_101 ) ; if ( ! VAR_102 && VAR_103 == VAR_104 && VAR_105 >= 0 ) { if ( VAR_106 == VAR_107 ) METHOD_15 ( VAR_108 , VAR_109 , VAR_110 ) ; else METHOD_16 ( VAR_111 , VAR_112 , VAR_113 ) ; VAR_114 [ VAR_115 ] . VAR_116 = 0 ; VAR_117 [ VAR_118 ] . VAR_119 = 0 ; VAR_120 [ VAR_121 ] . VAR_122 = 0 ; VAR_123 [ VAR_124 ] . VAR_125 = VAR_126 ; } } else if ( VAR_127 -> VAR_128 == VAR_129 ) { if ( ! METHOD_17 ( VAR_130 -> VAR_131 ) ) { TYPE_8 VAR_132 [ 48 ] ; METHOD_18 ( VAR_133 , sizeof ( VAR_134 ) , VAR_135 -> VAR_136 ) ; METHOD_19 ( VAR_137 , ""variablestackaccessvar_off=%soff=%dsize=%d"" , VAR_138 , VAR_139 , VAR_140 ) ; return - VAR_141 ; } VAR_142 += VAR_143 -> VAR_144 . VAR_145 ; if ( VAR_146 >= 0 || VAR_147 < - VAR_148 ) { METHOD_20 ( VAR_149 , ""invalidstackoff=%dsize=%d\\n"" , VAR_150 , VAR_151 ) ; return - VAR_152 ; } if ( VAR_153 -> VAR_154 -> VAR_155 -> VAR_156 < - VAR_157 ) VAR_158 -> VAR_159 -> VAR_160 -> VAR_161 = - VAR_162 ; if ( VAR_163 == VAR_164 ) VAR_165 = METHOD_21 ( VAR_166 , VAR_167 , VAR_168 , VAR_169 , VAR_170 ) ; else VAR_171 = METHOD_22 ( VAR_172 , VAR_173 , VAR_174 , VAR_175 , VAR_176 ) ; } else if ( METHOD_23 ( VAR_177 ) ) { if ( VAR_178 == VAR_179 && ! METHOD_24 ( VAR_180 , VAR_181 , VAR_182 ) ) { METHOD_25 ( VAR_183 , ""cannotwriteintopacket\\n"" ) ; return - VAR_184 ; } if ( VAR_185 == VAR_186 && VAR_187 >= 0 && METHOD_26 ( VAR_188 , VAR_189 ) ) { METHOD_27 ( VAR_190 , ""R%dleaksaddrintopacket\\n"" , VAR_191 ) ; return - VAR_192 ; } VAR_193 = METHOD_28 ( VAR_194 , VAR_195 , VAR_196 , VAR_197 , VAR_198 ) ; if ( ! VAR_199 && VAR_200 == VAR_201 && VAR_202 >= 0 ) METHOD_29 ( VAR_203 , VAR_204 , VAR_205 ) ; } else { METHOD_30 ( VAR_206 , ""R%dinvalidmemaccess\'%s\'\\n"" , VAR_207 , VAR_208 [ VAR_209 -> VAR_210 ] ) ; return - VAR_211 ; } if ( ! VAR_212 && VAR_213 < VAR_214 && VAR_215 >= 0 && VAR_216 == VAR_217 && VAR_218 [ VAR_219 ] . VAR_220 == VAR_221 ) { coerce_reg_to_size ( & VAR_222 [ VAR_223 ] . VAR_224 = METHOD_31 ( VAR_225 [ VAR_226 ] . VAR_227 , VAR_228 ) ; METHOD_32 ( & VAR_229 [ VAR_230 ] , VAR_228 ) ; } return VAR_231 ; }",432
433,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ;  TYPE_6 VAR_5 ;   TYPE_7 VAR_6 [ VAR_7 ] ;  TYPE_8 VAR_8 [ VAR_9 ] ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 [ 13 ] ; VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( VAR_17 < 0 ) return VAR_18 ;  VAR_19 = METHOD_2 ( & VAR_20 -> VAR_21 , VAR_22 , VAR_23 , & VAR_24 ,  VAR_25 , VAR_26 , VAR_27 ) ; if ( VAR_28 == - 1 ) return VAR_29 ;  if ( ! METHOD_3 ( VAR_30 -> VAR_31 , VAR_32 , VAR_33 ,   VAR_34 , & VAR_35 -> VAR_36 , VAR_37 -> VAR_38 , VAR_39 , VAR_40 ) )  return VAR_41 ; if ( VAR_42 -> VAR_43 == VAR_44 ) VAR_45 -> VAR_46 = VAR_47 -> VAR_48 . VAR_49 ; else { if ( VAR_50 -> VAR_51 != VAR_52 -> VAR_53 . VAR_54 ) VAR_55 -> VAR_56 = VAR_57 ; } * VAR_58 = VAR_59 ; return VAR_60 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 [ VAR_7 ] ; TYPE_8 VAR_8 [ VAR_9 ] ; TYPE_9 VAR_10 ; TYPE_10 VAR_11 [ 13 ] ; VAR_12 = METHOD_1 ( VAR_13 , VAR_14 , VAR_15 , VAR_16 ) ; if ( VAR_17 < 0 ) return VAR_18 ; VAR_19 = METHOD_2 ( & VAR_20 -> VAR_21 , VAR_22 , VAR_23 , & VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ; if ( VAR_28 == - 1 ) return VAR_29 ; if ( ! METHOD_3 ( VAR_30 -> VAR_31 , VAR_32 , VAR_33 , VAR_34 , & VAR_35 -> VAR_36 , VAR_37 -> VAR_38 , VAR_39 , VAR_40 ) ) return VAR_41 ; if ( VAR_42 -> VAR_43 == VAR_44 ) VAR_45 -> VAR_46 = VAR_47 -> VAR_48 . VAR_49 ; else { if ( VAR_50 -> VAR_51 != VAR_52 -> VAR_53 . VAR_54 ) VAR_55 -> VAR_56 = VAR_57 ; } * VAR_58 = VAR_59 ; return VAR_60 ; }",433
434,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { unsigned TYPE_1 VAR_3 [ 16 ] ; TYPE_2 VAR_4 ; if ( VAR_5 -> METHOD_1 ( VAR_6 , & VAR_7 [ 0 ] , VAR_8 ) != VAR_9 ) { return VAR_10 ; } if ( ( ( unsigned TYPE_3 ) METHOD_2 ( & VAR_11 [ VAR_12 ] ) != 0x4A41574B ) || ( ( unsigned TYPE_4 ) METHOD_3 ( & VAR_13 [ VAR_14 ] ) != 0xD127F088 ) ) { return VAR_15 ; } VAR_16 -> VAR_17 = METHOD_4 ( & VAR_18 [ VAR_19 ] ) ; VAR_20 -> VAR_21 = METHOD_5 ( & VAR_22 [ VAR_23 ] ) ; VAR_24 -> VAR_25 = METHOD_6 ( & VAR_26 [ VAR_27 ] ) ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = 0 ; if ( VAR_38 -> VAR_39 & VAR_40 ) { if ( VAR_41 -> METHOD_7 ( VAR_42 , & VAR_43 [ 0 ] , 4 ) != 4 ) return VAR_44 ; VAR_45 -> VAR_46 = METHOD_8 ( & VAR_47 [ 0 ] ) ; } if ( VAR_48 -> VAR_49 & VAR_50 ) { if ( VAR_51 -> METHOD_9 ( VAR_52 , & VAR_53 [ 0 ] , 2 ) != 2 ) return VAR_54 ; } if ( VAR_55 -> VAR_56 & VAR_57 ) { if ( VAR_58 -> METHOD_10 ( VAR_59 , & VAR_60 [ 0 ] , 2 ) != 2 ) return VAR_61 ; VAR_62 = METHOD_11 ( & VAR_63 [ 0 ] ) ; if ( VAR_64 -> METHOD_12 ( VAR_65 , ( TYPE_5 ) VAR_66 , VAR_67 ) ) return VAR_68 ; } if ( VAR_69 -> VAR_70 & ( VAR_71 | VAR_72 ) ) {  TYPE_6 VAR_73 = VAR_74 -> METHOD_13 ( VAR_75 ) ;  TYPE_7 * VAR_76 = ( TYPE_8 * ) VAR_77 -> METHOD_14 ( VAR_78 , ( TYPE_9 ) 13 ) ;  if ( ! VAR_79 ) return VAR_80 ;   VAR_81 -> VAR_82 = VAR_83 ;  if ( VAR_84 -> VAR_85 & VAR_86 ) {  if ( VAR_87 -> METHOD_15 ( VAR_88 , & VAR_89 [ 0 ] , 9 ) != 9 ) return VAR_90 ;   for ( VAR_91 = 0 ; VAR_92 < 9 ; VAR_93 ++ , VAR_94 ++ ) if ( ! ( * VAR_95 = VAR_96 [ VAR_97 ] ) ) break ;   VAR_98 += ( VAR_99 < 9 ) ? VAR_100 + 1 : 9 ;  if ( VAR_101 -> METHOD_16 ( VAR_102 , VAR_103 , VAR_104 ) )  return VAR_105 ;  } if ( VAR_106 -> VAR_107 & VAR_108 ) { * VAR_109 ++ = '.' ;  if ( VAR_110 -> METHOD_17 ( VAR_111 , & VAR_112 [ 0 ] , 4 ) != 4 ) return VAR_113 ;   for ( VAR_114 = 0 ; VAR_115 < 4 ; VAR_116 ++ , VAR_117 ++ ) if ( ! ( * VAR_118 = VAR_119 [ VAR_120 ] ) ) break ;   VAR_121 += ( VAR_122 < 4 ) ? VAR_123 + 1 : 4 ;  if ( VAR_124 -> METHOD_18 ( VAR_125 , VAR_126 , VAR_127 ) )  return VAR_128 ;  } * VAR_129 = '\\0' ; } if ( VAR_130 -> VAR_131 & VAR_132 ) { if ( VAR_133 -> METHOD_19 ( VAR_134 , & VAR_135 [ 0 ] , 2 ) != 2 ) return VAR_136 ; VAR_137 = METHOD_20 ( & VAR_138 [ 0 ] ) ; VAR_139 -> VAR_140 = ( TYPE_10 * ) VAR_141 -> METHOD_21 ( VAR_142 , ( TYPE_11 ) VAR_143 + 1 ) ; if ( ! VAR_144 -> VAR_145 ) return VAR_146 ; if ( VAR_147 -> METHOD_22 ( VAR_148 , VAR_149 -> VAR_150 , VAR_151 ) != VAR_152 ) return VAR_153 ; VAR_154 -> VAR_155 [ VAR_156 ] = '\\0' ; VAR_157 -> VAR_158 = VAR_159 ; } return VAR_160 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { unsigned TYPE_1 VAR_3 [ 16 ] ; TYPE_2 VAR_4 ; if ( VAR_5 -> METHOD_1 ( VAR_6 , & VAR_7 [ 0 ] , VAR_8 ) != VAR_9 ) { return VAR_10 ; } if ( ( ( unsigned TYPE_3 ) METHOD_2 ( & VAR_11 [ VAR_12 ] ) != 0x4A41574B ) || ( ( unsigned TYPE_4 ) METHOD_3 ( & VAR_13 [ VAR_14 ] ) != 0xD127F088 ) ) { return VAR_15 ; } VAR_16 -> VAR_17 = METHOD_4 ( & VAR_18 [ VAR_19 ] ) ; VAR_20 -> VAR_21 = METHOD_5 ( & VAR_22 [ VAR_23 ] ) ; VAR_24 -> VAR_25 = METHOD_6 ( & VAR_26 [ VAR_27 ] ) ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = 0 ; if ( VAR_38 -> VAR_39 & VAR_40 ) { if ( VAR_41 -> METHOD_7 ( VAR_42 , & VAR_43 [ 0 ] , 4 ) != 4 ) return VAR_44 ; VAR_45 -> VAR_46 = METHOD_8 ( & VAR_47 [ 0 ] ) ; } if ( VAR_48 -> VAR_49 & VAR_50 ) { if ( VAR_51 -> METHOD_9 ( VAR_52 , & VAR_53 [ 0 ] , 2 ) != 2 ) return VAR_54 ; } if ( VAR_55 -> VAR_56 & VAR_57 ) { if ( VAR_58 -> METHOD_10 ( VAR_59 , & VAR_60 [ 0 ] , 2 ) != 2 ) return VAR_61 ; VAR_62 = METHOD_11 ( & VAR_63 [ 0 ] ) ; if ( VAR_64 -> METHOD_12 ( VAR_65 , ( TYPE_5 ) VAR_66 , VAR_67 ) ) return VAR_68 ; } if ( VAR_69 -> VAR_70 & ( VAR_71 | VAR_72 ) ) { TYPE_6 VAR_73 = VAR_74 -> METHOD_13 ( VAR_75 ) ; TYPE_7 * VAR_76 = ( TYPE_8 * ) VAR_77 -> METHOD_14 ( VAR_78 , ( TYPE_9 ) 13 ) ; if ( ! ( VAR_157 -> VAR_82 = VAR_129 ) ) return VAR_146 ; if ( ( VAR_161 = VAR_147 -> METHOD_22 ( VAR_148 , VAR_149 -> VAR_150 , VAR_151 ) != VAR_152 ) return VAR_153 ; VAR_154 -> VAR_155 [ VAR_156 ] = '\\0' ; VAR_157 -> VAR_158 = VAR_159 ; } return VAR_160 ; }",434
435,"TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 * * VAR_2 ,  TYPE_3 * VAR_3 )  { TYPE_4 VAR_4 = - 1 ; struct STRUCT_OR_UNION_1 * VAR_5 = VAR_6 ; TYPE_5 VAR_7 = 0 ; TYPE_6 VAR_8 = 0 ; if ( VAR_9 ) * VAR_10 = VAR_11 ; if ( VAR_12 ) * VAR_13 = 0 ;  if ( VAR_14 < 0 || ( VAR_15 > 0 && ! VAR_16 ) || ! VAR_17 || ! VAR_18 )  goto VAR_19 ; if ( VAR_20 == 0 ) { if ( VAR_21 ) { if ( ! ( VAR_22 = METHOD_1 ( 1 , sizeof ( VAR_23 ) ) ) ) goto VAR_24 ; VAR_25 = sizeof ( VAR_26 ) ; } * VAR_27 = VAR_28 ;  * VAR_29 = VAR_30 ;  VAR_31 = VAR_32 ; VAR_33 = 0 ; goto VAR_34 ; } for ( TYPE_7 VAR_35 = 0 ; VAR_36 < VAR_37 ; VAR_38 ++ ) VAR_39 += VAR_40 [ VAR_41 ] . VAR_42 ; VAR_43 = ( sizeof ( struct STRUCT_OR_UNION_2 ) * ( TYPE_8 ) VAR_44 ) + VAR_45 ; if ( ! ( VAR_46 = METHOD_2 ( 1 , VAR_47 ) ) ) goto VAR_48 ; { TYPE_9 * VAR_49 = ( TYPE_10 * ) & VAR_50 [ VAR_51 ] ; TYPE_11 VAR_52 = VAR_53 ; TYPE_12 VAR_54 ; for ( VAR_55 = 0 ; VAR_56 < VAR_57 ; VAR_58 ++ ) { const TYPE_13 VAR_59 = VAR_60 [ VAR_61 ] . VAR_62 ; const TYPE_14 * VAR_63 = VAR_64 [ VAR_65 ] . VAR_66 ; if ( VAR_67 ) { VAR_68 [ VAR_69 ] . VAR_70 = VAR_71 ; VAR_72 [ VAR_73 ] . VAR_74 = ( TYPE_15 * ) ( VAR_75 - ( TYPE_16 * ) VAR_76 ) ; if ( ! VAR_77 ) goto VAR_78 ; if ( METHOD_3 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 ) != VAR_83 ) goto VAR_84 ; VAR_85 += VAR_86 ; VAR_87 -= VAR_88 ; } } if ( VAR_89 != 0 ) goto VAR_90 ; } * VAR_91 = VAR_92 ; * VAR_93 = VAR_94 ;  VAR_95 = VAR_96 ;  VAR_97 = 0 ; VAR_98 : if ( VAR_99 ) METHOD_4 ( VAR_100 ) ; return VAR_101 ; }","TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 * * VAR_2 , TYPE_3 * VAR_3 ) { TYPE_4 VAR_4 = - 1 ; struct STRUCT_OR_UNION_1 * VAR_5 = VAR_6 ; TYPE_5 VAR_7 = 0 ; TYPE_6 VAR_8 = 0 ; if ( VAR_102 ) * VAR_102 = 0 ; if ( VAR_9 ) * VAR_10 = VAR_11 ; if ( VAR_12 ) * VAR_13 = 0 ; if ( VAR_14 < 0 || ( VAR_15 > 0 && ! VAR_16 ) || ! VAR_17 || ! VAR_18 ) goto VAR_19 ; if ( VAR_20 == 0 ) { if ( VAR_21 ) { if ( ! ( VAR_22 = METHOD_1 ( 1 , sizeof ( VAR_23 ) ) ) ) goto VAR_24 ; VAR_25 = sizeof ( VAR_26 ) ; } * VAR_27 = VAR_28 ; * VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; VAR_33 = 0 ; goto VAR_34 ; } for ( TYPE_7 VAR_35 = 0 ; VAR_36 < VAR_37 ; VAR_38 ++ ) VAR_39 += VAR_40 [ VAR_41 ] . VAR_42 ; VAR_43 = ( sizeof ( struct STRUCT_OR_UNION_2 ) * ( TYPE_8 ) VAR_44 ) + VAR_45 ; if ( ! ( VAR_46 = METHOD_2 ( 1 , VAR_47 ) ) ) goto VAR_48 ; { TYPE_9 * VAR_49 = ( TYPE_10 * ) & VAR_50 [ VAR_51 ] ; TYPE_11 VAR_52 = VAR_53 ; TYPE_12 VAR_54 ; for ( VAR_55 = 0 ; VAR_56 < VAR_57 ; VAR_58 ++ ) { const TYPE_13 VAR_59 = VAR_60 [ VAR_61 ] . VAR_62 ; const TYPE_14 * VAR_63 = VAR_64 [ VAR_65 ] . VAR_66 ; if ( VAR_67 ) { VAR_68 [ VAR_69 ] . VAR_70 = VAR_71 ; VAR_72 [ VAR_73 ] . VAR_74 = ( TYPE_15 * ) ( VAR_75 - ( TYPE_16 * ) VAR_76 ) ; if ( ! VAR_77 ) goto VAR_78 ; if ( METHOD_3 ( VAR_79 , VAR_80 , VAR_81 , VAR_82 ) != VAR_83 ) goto VAR_84 ; VAR_85 += VAR_86 ; VAR_87 -= VAR_88 ; } } if ( VAR_89 != 0 ) goto VAR_90 ; } * VAR_91 = VAR_92 ; * VAR_93 = VAR_94 ; * VAR_102 = VAR_53 ; VAR_95 = VAR_96 ; VAR_97 = 0 ; VAR_98 : if ( VAR_99 ) METHOD_4 ( VAR_100 ) ; return VAR_101 ; }",435
436,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; VAR_9 = 0 ; if ( METHOD_1 ( VAR_10 , & VAR_11 -> VAR_12 ) || METHOD_2 ( VAR_13 , & VAR_14 -> VAR_15 ) || METHOD_3 ( VAR_16 , & VAR_17 -> VAR_18 ) || METHOD_4 ( VAR_19 , & VAR_20 -> VAR_21 ) || METHOD_5 ( VAR_22 , & VAR_23 -> VAR_24 ) || METHOD_6 ( VAR_25 , & VAR_26 -> VAR_27 ) || METHOD_7 ( VAR_28 , & VAR_29 -> VAR_30 ) || METHOD_8 ( VAR_31 , & VAR_32 -> VAR_33 ) || METHOD_9 ( VAR_34 , & VAR_35 -> VAR_36 ) || METHOD_10 ( VAR_37 , & VAR_38 -> VAR_39 ) ) { return - 1 ; } if ( ! VAR_40 -> VAR_41 || ! VAR_42 -> VAR_43 || ! VAR_44 -> VAR_45 || ! VAR_46 -> VAR_47 || ! VAR_48 -> VAR_49 || VAR_50 -> VAR_51 > 16384 ) { return - 1 ; }  if ( ! ( VAR_52 -> VAR_53 = METHOD_11 ( VAR_54 -> VAR_55 , sizeof ( VAR_56 ) ) ) ) {  return - 1 ; } for ( VAR_57 = 0 ; VAR_58 < VAR_59 -> VAR_60 ; ++ VAR_61 ) { if ( METHOD_12 ( VAR_62 , & VAR_63 ) || METHOD_13 ( VAR_64 , & VAR_65 -> VAR_66 [ VAR_67 ] . VAR_68 ) || METHOD_14 ( VAR_69 , & VAR_70 -> VAR_71 [ VAR_72 ] . VAR_73 ) ) { METHOD_15 ( VAR_74 -> VAR_75 ) ; return - 1 ; } if ( VAR_76 -> VAR_77 [ VAR_78 ] . VAR_79 == 0 || VAR_80 -> VAR_81 [ VAR_82 ] . VAR_83 > 255 ) { METHOD_16 ( ""invalidXRsizvalue%d\\n"" , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 ) ; METHOD_17 ( VAR_88 -> VAR_89 ) ; return - 1 ; } if ( VAR_90 -> VAR_91 [ VAR_92 ] . VAR_93 == 0 || VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 > 255 ) { METHOD_18 ( ""invalidYRsizvalue%d\\n"" , VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 ) ; METHOD_19 ( VAR_102 -> VAR_103 ) ; return - 1 ; } VAR_104 -> VAR_105 [ VAR_106 ] . VAR_107 = ( VAR_108 >> 7 ) & 1 ; VAR_109 -> VAR_110 [ VAR_111 ] . VAR_112 = ( VAR_113 & 0x7f ) + 1 ; } if ( METHOD_20 ( VAR_114 ) ) { METHOD_21 ( VAR_115 -> VAR_116 ) ; return - 1 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_5 VAR_7 ; TYPE_6 VAR_8 ; VAR_9 = 0 ; if ( METHOD_1 ( VAR_10 , & VAR_11 -> VAR_12 ) || METHOD_2 ( VAR_13 , & VAR_14 -> VAR_15 ) || METHOD_3 ( VAR_16 , & VAR_17 -> VAR_18 ) || METHOD_4 ( VAR_19 , & VAR_20 -> VAR_21 ) || METHOD_5 ( VAR_22 , & VAR_23 -> VAR_24 ) || METHOD_6 ( VAR_25 , & VAR_26 -> VAR_27 ) || METHOD_7 ( VAR_28 , & VAR_29 -> VAR_30 ) || METHOD_8 ( VAR_31 , & VAR_32 -> VAR_33 ) || METHOD_9 ( VAR_34 , & VAR_35 -> VAR_36 ) || METHOD_10 ( VAR_37 , & VAR_38 -> VAR_39 ) ) { return - 1 ; } if ( VAR_115 -> VAR_33 >= VAR_115 -> VAR_41 || VAR_115 -> VAR_36 >= VAR_115 -> VAR_43 ) { METHOD_18 ( ""alltilesareoutsidetheimagearea\\n"" ) ; return - 1 ; } if ( ! VAR_40 -> VAR_41 || ! VAR_42 -> VAR_43 || ! VAR_44 -> VAR_45 || ! VAR_46 -> VAR_47 || ! VAR_48 -> VAR_49 || VAR_50 -> VAR_51 > 16384 ) { return - 1 ; } if ( ! ( VAR_52 -> VAR_53 = METHOD_11 ( VAR_54 -> VAR_55 , sizeof ( VAR_56 ) ) ) ) { return - 1 ; } for ( VAR_57 = 0 ; VAR_58 < VAR_59 -> VAR_60 ; ++ VAR_61 ) { if ( METHOD_12 ( VAR_62 , & VAR_63 ) || METHOD_13 ( VAR_64 , & VAR_65 -> VAR_66 [ VAR_67 ] . VAR_68 ) || METHOD_14 ( VAR_69 , & VAR_70 -> VAR_71 [ VAR_72 ] . VAR_73 ) ) { METHOD_15 ( VAR_74 -> VAR_75 ) ; return - 1 ; } if ( VAR_76 -> VAR_77 [ VAR_78 ] . VAR_79 == 0 || VAR_80 -> VAR_81 [ VAR_82 ] . VAR_83 > 255 ) { METHOD_16 ( ""invalidXRsizvalue%d\\n"" , VAR_84 -> VAR_85 [ VAR_86 ] . VAR_87 ) ; METHOD_17 ( VAR_88 -> VAR_89 ) ; return - 1 ; } if ( VAR_90 -> VAR_91 [ VAR_92 ] . VAR_93 == 0 || VAR_94 -> VAR_95 [ VAR_96 ] . VAR_97 > 255 ) { METHOD_18 ( ""invalidYRsizvalue%d\\n"" , VAR_98 -> VAR_99 [ VAR_100 ] . VAR_101 ) ; METHOD_19 ( VAR_102 -> VAR_103 ) ; return - 1 ; } VAR_104 -> VAR_105 [ VAR_106 ] . VAR_107 = ( VAR_108 >> 7 ) & 1 ; VAR_109 -> VAR_110 [ VAR_111 ] . VAR_112 = ( VAR_113 & 0x7f ) + 1 ; } if ( METHOD_20 ( VAR_114 ) ) { METHOD_21 ( VAR_115 -> VAR_116 ) ; return - 1 ; } return 0 ; }",436
437,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 METHOD_1 ; TYPE_9 VAR_7 = - 1 ; TYPE_10 VAR_8 = - 1 ; TYPE_11 VAR_9 = 0 ; if ( METHOD_2 ( VAR_10 -> VAR_11 ) ) VAR_12 |= VAR_13 ; if ( METHOD_3 ( VAR_14 -> VAR_15 ) ) VAR_16 |= VAR_17 ; if ( METHOD_4 ( VAR_18 -> VAR_19 ) ) VAR_20 |= VAR_21 ; if ( METHOD_5 ( VAR_22 -> VAR_23 ) ) METHOD_6 = VAR_24 ; else METHOD_7 = VAR_25 ; if ( METHOD_8 ( VAR_26 -> VAR_27 ) ) { VAR_28 = METHOD_9 ( VAR_29 -> VAR_30 , VAR_31 + VAR_32 , VAR_33 - VAR_34 ,  VAR_35 > 0 ? VAR_36 | VAR_37 : VAR_38 ,  VAR_39 , VAR_40 ) ; } if ( METHOD_10 ( VAR_41 -> VAR_42 ) && VAR_43 == - 1 ) { VAR_44 |= VAR_45 ; VAR_46 = METHOD_11 ( VAR_47 -> VAR_48 , VAR_49 + VAR_50 , VAR_51 - VAR_52 ,  VAR_53 > 0 ? VAR_54 | VAR_55 : VAR_56 ,  VAR_57 , VAR_58 ) ; } switch ( VAR_59 ) { case - 1 : return VAR_60 ; case - 2 : return VAR_61 ; case - 3 : return VAR_62 ; case - 4 : return VAR_63 ; case - 5 : return VAR_64 ; } if ( VAR_65 == 0 && VAR_66 -> VAR_67 == VAR_68 ) return VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 ; VAR_83 . VAR_84 = VAR_85 ; VAR_86 . VAR_87 = VAR_88 ; VAR_89 . VAR_90 = METHOD_12 ( VAR_91 -> VAR_92 ) ; if ( VAR_93 -> VAR_94 != VAR_95 ) { VAR_96 = METHOD_13 ( VAR_97 -> VAR_98 ,  VAR_99 + VAR_100 ,  VAR_101 , VAR_102 | VAR_103 | VAR_104 , METHOD_14 , ( TYPE_12 * ) & VAR_105 ) ; switch ( VAR_106 ) { case - 2 : return VAR_107 ; case - 3 : return VAR_108 ; case - 4 : return VAR_109 ; case - 5 : return VAR_110 ; } } else { METHOD_15 ( METHOD_16 ( VAR_111 + VAR_112 , 0 , VAR_113 , & VAR_114 ) ) ; } return VAR_115 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 VAR_6 ; TYPE_8 METHOD_1 ; TYPE_9 VAR_7 = - 1 ; TYPE_10 VAR_8 = - 1 ; TYPE_11 VAR_9 = 0 ; if ( METHOD_2 ( VAR_10 -> VAR_11 ) ) VAR_12 |= VAR_13 ; if ( METHOD_3 ( VAR_14 -> VAR_15 ) ) VAR_16 |= VAR_17 ; if ( METHOD_4 ( VAR_18 -> VAR_19 ) ) VAR_20 |= VAR_21 ; if ( METHOD_5 ( VAR_22 -> VAR_23 ) ) METHOD_6 = VAR_24 ; else METHOD_7 = VAR_25 ; if ( METHOD_8 ( VAR_26 -> VAR_27 ) ) { VAR_28 = METHOD_9 ( VAR_29 -> VAR_30 , VAR_31 + VAR_32 , VAR_33 - VAR_34 , VAR_35 > 0 ? VAR_36 | VAR_37 : VAR_38 , VAR_39 , VAR_40 ) ; } if ( METHOD_10 ( VAR_41 -> VAR_42 ) && VAR_43 == - 1 ) { VAR_44 |= VAR_45 ; VAR_46 = METHOD_11 ( VAR_47 -> VAR_48 , VAR_49 + VAR_50 , VAR_51 - VAR_52 , VAR_53 > 0 ? VAR_54 | VAR_55 : VAR_56 , VAR_57 , VAR_58 ) ; } switch ( VAR_59 ) { case - 1 : return VAR_60 ; case - 2 : return VAR_61 ; case - 3 : return VAR_62 ; case - 4 : return VAR_63 ; case - 5 : return VAR_64 ; } if ( VAR_65 == 0 && VAR_66 -> VAR_67 == VAR_68 ) return VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 ; VAR_83 . VAR_84 = VAR_85 ; VAR_86 . VAR_87 = VAR_88 ; VAR_89 . VAR_90 = METHOD_12 ( VAR_91 -> VAR_92 ) ; if ( VAR_93 -> VAR_94 != VAR_95 ) { VAR_96 = METHOD_13 ( VAR_97 -> VAR_98 , VAR_99 + VAR_100 , VAR_101 , VAR_102 | VAR_103 | VAR_104 , METHOD_14 , ( TYPE_12 * ) & VAR_105 ) ; switch ( VAR_106 ) { case - 2 : return VAR_107 ; case - 3 : return VAR_108 ; case - 4 : return VAR_109 ; case - 5 : return VAR_110 ; } } else { METHOD_15 ( METHOD_16 ( VAR_111 + VAR_112 , 0 , VAR_113 , & VAR_114 ) ) ; } return VAR_115 ; }",437
438,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 1 ; TYPE_2 VAR_2 = 1 << VAR_3 -> VAR_4 -> VAR_5 ; const TYPE_3 VAR_6 = offsetof ( struct STRUCT_OR_UNION_1 , VAR_7 ) ; METHOD_1 ( VAR_8 -> VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; if ( ( unsigned ) VAR_13 -> VAR_14 > VAR_15 - VAR_16 || ( unsigned ) VAR_17 -> VAR_18 > VAR_19 || ( unsigned ) ( VAR_20 -> VAR_21 + VAR_22 -> VAR_23 ) > VAR_24 ) { METHOD_2 ( KERN_NOTICE ""rock:corrupteddirectoryentry."" ""extent=%d,offset=%d,size=%d\\n"" , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ; VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( VAR_34 -> VAR_35 ) { struct STRUCT_OR_UNION_2 * VAR_36 ; VAR_37 -> VAR_38 = METHOD_3 ( VAR_39 -> VAR_40 , VAR_41 ) ; if ( ! VAR_42 -> VAR_43 ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } VAR_47 = - VAR_48 ;  VAR_49 = METHOD_4 ( VAR_50 -> VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ;  if ( VAR_55 ) { METHOD_5 ( VAR_56 -> VAR_57 , VAR_58 -> VAR_59 + VAR_60 -> VAR_61 , VAR_62 -> VAR_63 ) ; METHOD_6 ( VAR_64 ) ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; VAR_69 -> VAR_70 = VAR_71 -> VAR_72 ; VAR_73 -> VAR_74 = 0 ; VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 = 0 ; return 0 ; } METHOD_7 ( ""Unabletoreadrock-ridgeattributes\\n"" ) ; } VAR_79 : METHOD_8 ( VAR_80 -> VAR_81 ) ; VAR_82 -> VAR_83 = VAR_84 ; return VAR_85 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 1 ; TYPE_2 VAR_2 = 1 << VAR_3 -> VAR_4 -> VAR_5 ; const TYPE_3 VAR_6 = offsetof ( struct STRUCT_OR_UNION_1 , VAR_7 ) ; METHOD_1 ( VAR_8 -> VAR_9 ) ; VAR_10 -> VAR_11 = VAR_12 ; if ( ( unsigned ) VAR_13 -> VAR_14 > VAR_15 - VAR_16 || ( unsigned ) VAR_17 -> VAR_18 > VAR_19 || ( unsigned ) ( VAR_20 -> VAR_21 + VAR_22 -> VAR_23 ) > VAR_24 ) { METHOD_2 ( KERN_NOTICE ""rock:corrupteddirectoryentry."" ""extent=%d,offset=%d,size=%d\\n"" , VAR_25 -> VAR_26 , VAR_27 -> VAR_28 , VAR_29 -> VAR_30 ) ; VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( VAR_34 -> VAR_35 ) { struct STRUCT_OR_UNION_2 * VAR_36 ; VAR_37 -> VAR_38 = METHOD_3 ( VAR_39 -> VAR_40 , VAR_41 ) ; if ( ! VAR_42 -> VAR_43 ) { VAR_44 = - VAR_45 ; goto VAR_46 ; } VAR_47 = - VAR_48 ; if ( ++ VAR_82 -> VAR_86 >= VAR_87 ) goto VAR_79 ; VAR_49 = METHOD_4 ( VAR_50 -> VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; if ( VAR_55 ) { METHOD_5 ( VAR_56 -> VAR_57 , VAR_58 -> VAR_59 + VAR_60 -> VAR_61 , VAR_62 -> VAR_63 ) ; METHOD_6 ( VAR_64 ) ; VAR_65 -> VAR_66 = VAR_67 -> VAR_68 ; VAR_69 -> VAR_70 = VAR_71 -> VAR_72 ; VAR_73 -> VAR_74 = 0 ; VAR_75 -> VAR_76 = 0 ; VAR_77 -> VAR_78 = 0 ; return 0 ; } METHOD_7 ( ""Unabletoreadrock-ridgeattributes\\n"" ) ; } VAR_79 : METHOD_8 ( VAR_80 -> VAR_81 ) ; VAR_82 -> VAR_83 = VAR_84 ; return VAR_85 ; }",438
439,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) {  VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_4 -> VAR_15 ) ;  if ( VAR_16 < 0 ) return VAR_17 ;  METHOD_2 ( STRUCT_OR_UNION_5 , STRUCT_OR_UNION_6 -> VAR_18 ) ;  if ( VAR_19 == 0 ) VAR_20 = VAR_21 ; } break ; case VAR_22 : VAR_23 = VAR_24 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_25 ) ) return VAR_26 ? - VAR_27 : 0 ; break ; default : return - VAR_28 ; } if ( VAR_29 ) { VAR_30 = METHOD_4 ( VAR_31 , & VAR_32 ) ; if ( METHOD_5 ( VAR_33 ) ) { METHOD_6 ( STRUCT_OR_UNION_8 , VAR_34 ) ; return ( TYPE_6 ) METHOD_7 ( VAR_35 ) ; } } VAR_36 = METHOD_8 ( STRUCT_OR_UNION_9 , VAR_37 , """" , VAR_38 , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_10 , VAR_43 , VAR_44 ) ; METHOD_11 ( STRUCT_OR_UNION_11 , VAR_45 ) ; return VAR_46 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 * VAR_4 = VAR_5 ; TYPE_4 VAR_6 = 0 ; TYPE_5 VAR_7 ; switch ( VAR_8 ) { case VAR_9 : VAR_10 = VAR_11 ; if ( VAR_12 ) { VAR_13 = METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_4 -> VAR_15 ) ; if ( VAR_16 < 0 ) return VAR_17 ; METHOD_2 ( STRUCT_OR_UNION_5 , STRUCT_OR_UNION_6 -> VAR_18 ) ; if ( VAR_19 == 0 ) VAR_20 = VAR_21 ; } break ; case VAR_22 : VAR_23 = VAR_24 ; if ( ! METHOD_3 ( STRUCT_OR_UNION_7 -> VAR_25 ) ) return VAR_26 ? - VAR_27 : 0 ; break ; default : return - VAR_28 ; } if ( VAR_29 ) { VAR_30 = METHOD_4 ( VAR_31 , & VAR_32 ) ; if ( METHOD_5 ( VAR_33 ) ) { METHOD_6 ( STRUCT_OR_UNION_8 , VAR_34 ) ; return ( TYPE_6 ) METHOD_7 ( VAR_35 ) ; } } VAR_36 = METHOD_8 ( STRUCT_OR_UNION_9 , VAR_37 , """" , VAR_38 , VAR_39 , VAR_40 , 0 ) ; METHOD_9 ( VAR_41 ) ; if ( ! VAR_42 ) METHOD_10 ( STRUCT_OR_UNION_10 , VAR_43 , VAR_44 ) ; METHOD_11 ( STRUCT_OR_UNION_11 , VAR_45 ) ; return VAR_46 ; }",439
440,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  struct STRUCT_OR_UNION_2 VAR_2 ;  struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 ; METHOD_1 ( & VAR_7 -> VAR_8 ) ; METHOD_2 ( & VAR_9 , & VAR_10 -> VAR_11 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; METHOD_3 ( & VAR_12 -> VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 . VAR_17 ; VAR_18 . VAR_19 = VAR_20 . VAR_21 ; VAR_22 . VAR_23 = VAR_24 . VAR_25 ; VAR_26 . VAR_27 = VAR_28 . VAR_29 ; VAR_30 . VAR_31 = VAR_32 . VAR_33 ; VAR_34 . VAR_35 = VAR_36 . VAR_37 ; VAR_38 . VAR_39 = VAR_40 . VAR_41 ; VAR_42 . VAR_43 = VAR_44 . VAR_45 ; VAR_46 . VAR_47 = VAR_48 . VAR_49 ; VAR_50 . VAR_51 = VAR_52 . VAR_53 ; VAR_54 . VAR_55 = VAR_56 . VAR_57 ; return METHOD_4 ( VAR_58 , & VAR_59 , sizeof ( VAR_60 ) ) ? - VAR_61 : 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 = VAR_5 -> VAR_6 ; METHOD_1 ( & VAR_7 -> VAR_8 ) ; METHOD_2 ( & VAR_9 , & VAR_10 -> VAR_11 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; METHOD_3 ( & VAR_12 -> VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 . VAR_17 ; VAR_18 . VAR_19 = VAR_20 . VAR_21 ; VAR_22 . VAR_23 = VAR_24 . VAR_25 ; VAR_26 . VAR_27 = VAR_28 . VAR_29 ; VAR_30 . VAR_31 = VAR_32 . VAR_33 ; VAR_34 . VAR_35 = VAR_36 . VAR_37 ; VAR_38 . VAR_39 = VAR_40 . VAR_41 ; VAR_42 . VAR_43 = VAR_44 . VAR_45 ; VAR_46 . VAR_47 = VAR_48 . VAR_49 ; VAR_50 . VAR_51 = VAR_52 . VAR_53 ; VAR_54 . VAR_55 = VAR_56 . VAR_57 ; return METHOD_4 ( VAR_58 , & VAR_59 , sizeof ( VAR_60 ) ) ? - VAR_61 : 0 ; }",440
441,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 -> VAR_9 [ VAR_10 -> VAR_11 ] -> VAR_12 ; struct STRUCT_OR_UNION_5 * VAR_13 , * VAR_14 ; TYPE_2 VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 ) ; TYPE_3 VAR_18 ; if ( VAR_19 > VAR_20 ) { METHOD_2 ( VAR_21 , ""invalidBPF_JMPopcode%x\\n"" , VAR_22 ) ; return - VAR_23 ; } if ( METHOD_3 ( VAR_24 -> VAR_25 ) == VAR_26 ) { if ( VAR_27 -> VAR_28 != 0 ) { METHOD_4 ( VAR_29 , ""BPF_JMPusesreservedfields\\n"" ) ; return - VAR_30 ; } VAR_31 = METHOD_5 ( VAR_32 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) return VAR_37 ; if ( METHOD_6 ( VAR_38 , VAR_39 -> VAR_40 ) ) { METHOD_7 ( VAR_41 , ""R%dpointercomparisonprohibited\\n"" , VAR_42 -> VAR_43 ) ; return - VAR_44 ; } } else { if ( VAR_45 -> VAR_46 != VAR_47 ) { METHOD_8 ( VAR_48 , ""BPF_JMPusesreservedfields\\n"" ) ; return - VAR_49 ; } } VAR_50 = METHOD_9 ( VAR_51 , VAR_52 -> VAR_53 , VAR_54 ) ; if ( VAR_55 ) return VAR_56 ; VAR_57 = & VAR_58 [ VAR_59 -> VAR_60 ] ; if ( METHOD_10 ( VAR_61 -> VAR_62 ) == VAR_63 ) { TYPE_4 VAR_64 = METHOD_11 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 ) ; if ( VAR_69 == 1 ) { * VAR_70 += VAR_71 -> VAR_72 ; return 0 ; } else if ( VAR_73 == 0 ) { return 0 ; } }  VAR_74 = METHOD_12 ( VAR_75 , * VAR_76 + VAR_77 -> VAR_78 + 1 , * VAR_79 ) ;  if ( ! VAR_80 ) return - VAR_81 ; VAR_82 = VAR_83 -> VAR_84 [ VAR_85 -> VAR_86 ] -> VAR_87 ; if ( METHOD_13 ( VAR_88 -> VAR_89 ) == VAR_90 ) { if ( VAR_91 -> VAR_92 == VAR_93 && VAR_94 [ VAR_95 -> VAR_96 ] . VAR_97 == VAR_98 ) { if ( METHOD_14 ( VAR_99 [ VAR_100 -> VAR_101 ] . VAR_102 ) ) METHOD_15 ( & VAR_103 [ VAR_104 -> VAR_105 ] , VAR_106 , VAR_107 [ VAR_108 -> VAR_109 ] . VAR_110 . VAR_111 , VAR_112 ) ; else if ( METHOD_16 ( VAR_113 -> VAR_114 ) ) METHOD_17 ( & VAR_115 [ VAR_116 -> VAR_117 ] , & VAR_118 [ VAR_119 -> VAR_120 ] , VAR_121 -> VAR_122 . VAR_123 , VAR_124 ) ; else if ( VAR_125 == VAR_126 || VAR_127 == VAR_128 ) METHOD_18 ( & VAR_129 [ VAR_130 -> VAR_131 ] , & VAR_132 [ VAR_133 -> VAR_134 ] , & VAR_135 [ VAR_136 -> VAR_137 ] , & VAR_138 [ VAR_139 -> VAR_140 ] , VAR_141 ) ; } } else if ( VAR_142 -> VAR_143 == VAR_144 ) { METHOD_19 ( & VAR_145 [ VAR_146 -> VAR_147 ] , VAR_148 , VAR_149 -> VAR_150 , VAR_151 ) ; } if ( METHOD_20 ( VAR_152 -> VAR_153 ) == VAR_154 && VAR_155 -> VAR_156 == 0 && ( VAR_157 == VAR_158 || VAR_159 == VAR_160 ) && METHOD_21 ( VAR_161 -> VAR_162 ) ) { METHOD_22 ( VAR_163 , VAR_164 -> VAR_165 , VAR_166 == VAR_167 ) ; METHOD_23 ( VAR_168 , VAR_169 -> VAR_170 , VAR_171 == VAR_172 ) ; } else if ( ! METHOD_24 ( VAR_173 , VAR_174 , & VAR_175 [ VAR_176 -> VAR_177 ] , VAR_178 , VAR_179 ) && METHOD_25 ( VAR_180 , VAR_181 -> VAR_182 ) ) { METHOD_26 ( VAR_183 , ""R%dpointercomparisonprohibited\\n"" , VAR_184 -> VAR_185 ) ; return - VAR_186 ; } if ( VAR_187 -> VAR_188 . VAR_189 ) METHOD_27 ( VAR_190 , VAR_191 -> VAR_192 [ VAR_193 -> VAR_194 ] ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 -> VAR_9 [ VAR_10 -> VAR_11 ] -> VAR_12 ; struct STRUCT_OR_UNION_5 * VAR_13 , * VAR_14 ; TYPE_2 VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 ) ; TYPE_3 VAR_18 ; if ( VAR_19 > VAR_20 ) { METHOD_2 ( VAR_21 , ""invalidBPF_JMPopcode%x\\n"" , VAR_22 ) ; return - VAR_23 ; } if ( METHOD_3 ( VAR_24 -> VAR_25 ) == VAR_26 ) { if ( VAR_27 -> VAR_28 != 0 ) { METHOD_4 ( VAR_29 , ""BPF_JMPusesreservedfields\\n"" ) ; return - VAR_30 ; } VAR_31 = METHOD_5 ( VAR_32 , VAR_33 -> VAR_34 , VAR_35 ) ; if ( VAR_36 ) return VAR_37 ; if ( METHOD_6 ( VAR_38 , VAR_39 -> VAR_40 ) ) { METHOD_7 ( VAR_41 , ""R%dpointercomparisonprohibited\\n"" , VAR_42 -> VAR_43 ) ; return - VAR_44 ; } } else { if ( VAR_45 -> VAR_46 != VAR_47 ) { METHOD_8 ( VAR_48 , ""BPF_JMPusesreservedfields\\n"" ) ; return - VAR_49 ; } } VAR_50 = METHOD_9 ( VAR_51 , VAR_52 -> VAR_53 , VAR_54 ) ; if ( VAR_55 ) return VAR_56 ; VAR_57 = & VAR_58 [ VAR_59 -> VAR_60 ] ; if ( METHOD_10 ( VAR_61 -> VAR_62 ) == VAR_63 ) { TYPE_4 VAR_64 = METHOD_11 ( VAR_65 , VAR_66 -> VAR_67 , VAR_68 ) ; if ( VAR_69 == 1 ) { * VAR_70 += VAR_71 -> VAR_72 ; return 0 ; } else if ( VAR_73 == 0 ) { return 0 ; } } VAR_74 = METHOD_12 ( VAR_75 , * VAR_76 + VAR_77 -> VAR_78 + 1 , * VAR_79 , VAR_195 ) ; if ( ! VAR_80 ) return - VAR_81 ; VAR_82 = VAR_83 -> VAR_84 [ VAR_85 -> VAR_86 ] -> VAR_87 ; if ( METHOD_13 ( VAR_88 -> VAR_89 ) == VAR_90 ) { if ( VAR_91 -> VAR_92 == VAR_93 && VAR_94 [ VAR_95 -> VAR_96 ] . VAR_97 == VAR_98 ) { if ( METHOD_14 ( VAR_99 [ VAR_100 -> VAR_101 ] . VAR_102 ) ) METHOD_15 ( & VAR_103 [ VAR_104 -> VAR_105 ] , VAR_106 , VAR_107 [ VAR_108 -> VAR_109 ] . VAR_110 . VAR_111 , VAR_112 ) ; else if ( METHOD_16 ( VAR_113 -> VAR_114 ) ) METHOD_17 ( & VAR_115 [ VAR_116 -> VAR_117 ] , & VAR_118 [ VAR_119 -> VAR_120 ] , VAR_121 -> VAR_122 . VAR_123 , VAR_124 ) ; else if ( VAR_125 == VAR_126 || VAR_127 == VAR_128 ) METHOD_18 ( & VAR_129 [ VAR_130 -> VAR_131 ] , & VAR_132 [ VAR_133 -> VAR_134 ] , & VAR_135 [ VAR_136 -> VAR_137 ] , & VAR_138 [ VAR_139 -> VAR_140 ] , VAR_141 ) ; } } else if ( VAR_142 -> VAR_143 == VAR_144 ) { METHOD_19 ( & VAR_145 [ VAR_146 -> VAR_147 ] , VAR_148 , VAR_149 -> VAR_150 , VAR_151 ) ; } if ( METHOD_20 ( VAR_152 -> VAR_153 ) == VAR_154 && VAR_155 -> VAR_156 == 0 && ( VAR_157 == VAR_158 || VAR_159 == VAR_160 ) && METHOD_21 ( VAR_161 -> VAR_162 ) ) { METHOD_22 ( VAR_163 , VAR_164 -> VAR_165 , VAR_166 == VAR_167 ) ; METHOD_23 ( VAR_168 , VAR_169 -> VAR_170 , VAR_171 == VAR_172 ) ; } else if ( ! METHOD_24 ( VAR_173 , VAR_174 , & VAR_175 [ VAR_176 -> VAR_177 ] , VAR_178 , VAR_179 ) && METHOD_25 ( VAR_180 , VAR_181 -> VAR_182 ) ) { METHOD_26 ( VAR_183 , ""R%dpointercomparisonprohibited\\n"" , VAR_184 -> VAR_185 ) ; return - VAR_186 ; } if ( VAR_187 -> VAR_188 . VAR_189 ) METHOD_27 ( VAR_190 , VAR_191 -> VAR_192 [ VAR_193 -> VAR_194 ] ) ; return 0 ; }",441
442,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 + 1 == VAR_3 ) { METHOD_1 ( METHOD_2 ( VAR_4 ) ) ; return ;  }  TYPE_3 TYPE_4 if ( VAR_5 ) return ; if ( VAR_6 [ VAR_7 ] != VAR_8 ) ++ VAR_9 ; METHOD_3 ( VAR_10 , VAR_11 , VAR_12 ) ; if ( ( VAR_13 [ VAR_14 ] = METHOD_4 ( ( TYPE_5 * ) VAR_15 , VAR_16 ) ) == VAR_17 ) { METHOD_5 ( METHOD_6 ( VAR_18 ) , VAR_19 ) ; if ( VAR_20 ) -- VAR_21 ; return ; } if ( METHOD_7 ( ) == VAR_22 ) return ; if ( VAR_23 ) { TYPE_6 VAR_24 ; TYPE_7 VAR_25 ; TYPE_8 VAR_26 = VAR_27 ; TYPE_9 VAR_28 = VAR_29 ; TYPE_10 VAR_30 = VAR_31 ; TYPE_11 VAR_32 = VAR_33 ; TYPE_12 VAR_34 = VAR_35 ; VAR_36 = VAR_37 ; VAR_38 = VAR_39 ; VAR_40 = 0 ; VAR_41 = VAR_42 ; METHOD_8 ( & VAR_43 ) ; VAR_44 = VAR_45 ; VAR_46 = VAR_47 ; do { METHOD_9 ( ) ; METHOD_10 ( & VAR_48 , VAR_49 ) ; METHOD_11 ( ) ; } while ( VAR_50 [ VAR_51 ] != VAR_52 ) ; VAR_53 = VAR_54 ; VAR_55 = VAR_56 ; VAR_57 = VAR_58 ; VAR_59 = VAR_60 ; VAR_61 = VAR_62 ; } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { if ( VAR_2 + 1 == VAR_3 ) { METHOD_1 ( METHOD_2 ( VAR_4 ) ) ; return ; } if ( METHOD_12 ( ) ) return ; TYPE_3 TYPE_4 if ( VAR_5 ) return ; if ( VAR_6 [ VAR_7 ] != VAR_8 ) ++ VAR_9 ; METHOD_3 ( VAR_10 , VAR_11 , VAR_12 ) ; if ( ( VAR_13 [ VAR_14 ] = METHOD_4 ( ( TYPE_5 * ) VAR_15 , VAR_16 ) ) == VAR_17 ) { METHOD_5 ( METHOD_6 ( VAR_18 ) , VAR_19 ) ; if ( VAR_20 ) -- VAR_21 ; return ; } if ( METHOD_7 ( ) == VAR_22 ) return ; if ( VAR_23 ) { TYPE_6 VAR_24 ; TYPE_7 VAR_25 ; TYPE_8 VAR_26 = VAR_27 ; TYPE_9 VAR_28 = VAR_29 ; TYPE_10 VAR_30 = VAR_31 ; TYPE_11 VAR_32 = VAR_33 ; TYPE_12 VAR_34 = VAR_35 ; VAR_36 = VAR_37 ; VAR_38 = VAR_39 ; VAR_40 = 0 ; VAR_41 = VAR_42 ; METHOD_8 ( & VAR_43 ) ; VAR_44 = VAR_45 ; VAR_46 = VAR_47 ; do { METHOD_9 ( ) ; METHOD_10 ( & VAR_48 , VAR_49 ) ; METHOD_11 ( ) ; } while ( VAR_50 [ VAR_51 ] != VAR_52 ) ; VAR_53 = VAR_54 ; VAR_55 = VAR_56 ; VAR_57 = VAR_58 ; VAR_59 = VAR_60 ; VAR_61 = VAR_62 ; } }",442
443,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_3 VAR_9 = 0 , VAR_10 = 0 , VAR_11 , VAR_12 = 0 , VAR_13 ; switch ( VAR_14 [ 0 ] ) { case VAR_15 : if ( VAR_16 < 4 || ( ( VAR_17 - 4 ) % 9 ) != 0 ) return 0 ; VAR_18 = ( VAR_19 - 4 ) / 9 ;  VAR_20 -> VAR_21 = 0 ;  for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; VAR_25 ++ ) METHOD_2 ( VAR_26 , VAR_27 , VAR_28 + VAR_29 * 9 + 4 ) ; VAR_30 = VAR_31 [ 1 ] ; break ; case VAR_32 : if ( VAR_33 < 6 || ( ( VAR_34 - 6 ) % 8 ) != 0 ) return 0 ;  VAR_35 = ( VAR_36 - 6 ) / 8 ;  VAR_37 -> VAR_38 = 0 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) METHOD_3 ( VAR_43 , VAR_44 , VAR_45 + VAR_46 * 8 + 6 ) ; VAR_47 = ( TYPE_4 ) ( ( ( VAR_48 [ 3 ] & 0x0c ) << 28 ) | ( VAR_49 [ 1 ] << 22 ) ) >> 22 ; VAR_50 = ( TYPE_5 ) ( ( ( VAR_51 [ 3 ] & 0x30 ) << 26 ) | ( VAR_52 [ 2 ] << 22 ) ) >> 22 ; VAR_53 = VAR_54 [ 3 ] ; break ; case VAR_55 : METHOD_4 ( VAR_56 , VAR_57 , VAR_58 + 2 , VAR_59 [ 1 ] ) ; METHOD_5 ( VAR_60 , VAR_61 , VAR_62 + 2 + VAR_63 [ 1 ] , VAR_64 - 2 - VAR_65 [ 1 ] ) ; break ; default : return 0 ; } if ( VAR_66 -> VAR_67 . VAR_68 == VAR_69 ) { METHOD_6 ( VAR_70 , VAR_71 & 3 ) ; METHOD_7 ( VAR_72 , VAR_73 , VAR_74 ) ; METHOD_8 ( VAR_75 , VAR_76 , VAR_77 ) ; } else { METHOD_9 ( VAR_78 , VAR_79 , VAR_80 & 1 ) ; METHOD_10 ( VAR_81 , VAR_82 ) ; } METHOD_11 ( VAR_83 ) ; return 1 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_3 VAR_9 = 0 , VAR_10 = 0 , VAR_11 , VAR_12 = 0 , VAR_13 ; switch ( VAR_14 [ 0 ] ) { case VAR_15 : if ( VAR_16 < 4 || ( ( VAR_17 - 4 ) % 9 ) != 0 ) return 0 ; VAR_18 = ( VAR_19 - 4 ) / 9 ; if ( VAR_41 > 15 ) { METHOD_12 ( VAR_60 , ""invalidsizevalue(%d)forTRACKPAD_REPORT_ID\\n"" , VAR_64 ) ; return 0 ; } VAR_20 -> VAR_21 = 0 ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 ; VAR_25 ++ ) METHOD_2 ( VAR_26 , VAR_27 , VAR_28 + VAR_29 * 9 + 4 ) ; VAR_30 = VAR_31 [ 1 ] ; break ; case VAR_32 : if ( VAR_33 < 6 || ( ( VAR_34 - 6 ) % 8 ) != 0 ) return 0 ; VAR_35 = ( VAR_36 - 6 ) / 8 ; if ( VAR_41 > 15 ) { METHOD_12 ( VAR_60 , ""invalidsizevalue(%d)forMOUSE_REPORT_ID\\n"" , VAR_64 ) ; return 0 ; } VAR_37 -> VAR_38 = 0 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) METHOD_3 ( VAR_43 , VAR_44 , VAR_45 + VAR_46 * 8 + 6 ) ; VAR_47 = ( TYPE_4 ) ( ( ( VAR_48 [ 3 ] & 0x0c ) << 28 ) | ( VAR_49 [ 1 ] << 22 ) ) >> 22 ; VAR_50 = ( TYPE_5 ) ( ( ( VAR_51 [ 3 ] & 0x30 ) << 26 ) | ( VAR_52 [ 2 ] << 22 ) ) >> 22 ; VAR_53 = VAR_54 [ 3 ] ; break ; case VAR_55 : METHOD_4 ( VAR_56 , VAR_57 , VAR_58 + 2 , VAR_59 [ 1 ] ) ; METHOD_5 ( VAR_60 , VAR_61 , VAR_62 + 2 + VAR_63 [ 1 ] , VAR_64 - 2 - VAR_65 [ 1 ] ) ; break ; default : return 0 ; } if ( VAR_66 -> VAR_67 . VAR_68 == VAR_69 ) { METHOD_6 ( VAR_70 , VAR_71 & 3 ) ; METHOD_7 ( VAR_72 , VAR_73 , VAR_74 ) ; METHOD_8 ( VAR_75 , VAR_76 , VAR_77 ) ; } else { METHOD_9 ( VAR_78 , VAR_79 , VAR_80 & 1 ) ; METHOD_10 ( VAR_81 , VAR_82 ) ; } METHOD_11 ( VAR_83 ) ; return 1 ; }",443
444,"TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 )  {  if ( METHOD_1 ( METHOD_2 ( ) , STRUCT_OR_UNION_2 -> VAR_0 ) ) return VAR_1 ;  if ( METHOD_3 ( STRUCT_OR_UNION_3 , VAR_2 ) )  return VAR_3 ; return VAR_4 ; }","TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { if ( METHOD_1 ( METHOD_2 ( ) , STRUCT_OR_UNION_2 -> VAR_0 ) ) return VAR_1 ; if ( METHOD_3 ( STRUCT_OR_UNION_3 , VAR_2 ) ) return VAR_3 ; return VAR_4 ; }",444
445,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { const TYPE_2 * VAR_3 ; const TYPE_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 VAR_6 ; TYPE_4 VAR_7 ; unsigned VAR_8 , VAR_9 ; TYPE_5 * VAR_10 ; TYPE_6 * VAR_11 ; TYPE_7 VAR_12 [ 8 ] ; TYPE_8 VAR_13 [ 8 ] ; TYPE_9 VAR_14 ; struct STRUCT_OR_UNION_7 * VAR_15 , * VAR_16 ; unsigned TYPE_10 VAR_17 ; TYPE_11 VAR_18 = ( VAR_19 ) , VAR_20 ; STRUCT_OR_UNION_8 = ( struct STRUCT_OR_UNION_9 * ) ( VAR_21 -> VAR_22 -> VAR_23 ) ; VAR_24 = STRUCT_OR_UNION_10 -> VAR_25 ; if ( VAR_26 == VAR_27 ) { if ( ! STRUCT_OR_UNION_11 -> VAR_28 ) { STRUCT_OR_UNION_12 -> VAR_29 = METHOD_1 ( & ( VAR_30 -> VAR_31 ) ) ; STRUCT_OR_UNION_13 -> VAR_32 = 1 ; } VAR_33 = STRUCT_OR_UNION_14 -> VAR_34 ; } if ( ( VAR_35 = METHOD_2 ( VAR_36 , 7 , VAR_37 ) ) == VAR_38 ) return ( VAR_39 ) ; VAR_40 = VAR_41 ; METHOD_3 ( & STRUCT_OR_UNION_15 , VAR_42 , sizeof ( STRUCT_OR_UNION_16 ) ) ; STRUCT_OR_UNION_17 -> VAR_43 = METHOD_4 ( STRUCT_OR_UNION_18 . VAR_44 ) ; VAR_45 = METHOD_5 ( STRUCT_OR_UNION_19 . VAR_46 ) ; if ( VAR_47 < ( TYPE_12 ) sizeof ( VAR_48 ) + 7 ) { METHOD_6 ( & VAR_49 -> VAR_50 , VAR_51 , ""Invalidheadersize"" ) ; return ( VAR_52 ) ; } VAR_53 = METHOD_7 ( 0 , ( const unsigned TYPE_13 * ) VAR_54 + 2 , 7 - 2 ) ; METHOD_8 ( VAR_55 , 7 ) ; if ( ! ( STRUCT_OR_UNION_20 -> VAR_56 & VAR_57 ) ) { STRUCT_OR_UNION_21 -> VAR_58 = 0 ; STRUCT_OR_UNION_22 -> VAR_59 = 0 ; STRUCT_OR_UNION_23 -> VAR_60 = 0 ; STRUCT_OR_UNION_24 -> VAR_61 = 0 ; STRUCT_OR_UNION_25 -> VAR_62 = 0 ; STRUCT_OR_UNION_26 -> VAR_63 = 0 ; STRUCT_OR_UNION_27 -> VAR_64 = 0 ; STRUCT_OR_UNION_28 -> VAR_65 = 0 ; METHOD_9 ( & STRUCT_OR_UNION_29 -> VAR_66 , 0 , sizeof ( STRUCT_OR_UNION_30 -> VAR_67 ) ) ; STRUCT_OR_UNION_31 -> VAR_68 = 0 ; STRUCT_OR_UNION_32 -> VAR_69 = 0 ; STRUCT_OR_UNION_33 -> VAR_70 = 0 ; STRUCT_OR_UNION_34 -> VAR_71 = 0 ; STRUCT_OR_UNION_35 -> VAR_72 = 0 ; STRUCT_OR_UNION_36 -> VAR_73 = 0 ; STRUCT_OR_UNION_37 -> VAR_74 = 0 ; STRUCT_OR_UNION_38 -> VAR_75 = 0 ; } else { METHOD_10 ( & VAR_76 -> VAR_77 , VAR_78 , ""RARsolidarchivesupportunavailable."" ) ; return ( VAR_79 ) ; } if ( ( VAR_80 = METHOD_11 ( VAR_81 , ( TYPE_14 ) VAR_82 - 7 , VAR_83 ) ) == VAR_84 ) return ( VAR_85 ) ; VAR_86 = METHOD_12 ( VAR_87 , VAR_88 , ( unsigned ) ( VAR_89 - 7 ) ) ; if ( ( VAR_90 & 0xffff ) != METHOD_13 ( STRUCT_OR_UNION_39 . VAR_91 ) ) { METHOD_14 ( & VAR_92 -> VAR_93 , VAR_94 , ""HeaderCRCerror"" ) ; return ( VAR_95 ) ; } VAR_96 = VAR_97 ; VAR_98 = VAR_99 + VAR_100 - 7 ; METHOD_15 ( & VAR_101 , VAR_102 , sizeof ( VAR_103 ) ) ; VAR_104 += sizeof ( VAR_105 ) ; STRUCT_OR_UNION_40 -> VAR_106 = VAR_107 . VAR_108 ; VAR_109 = METHOD_16 ( VAR_110 . VAR_111 ) ; STRUCT_OR_UNION_41 -> VAR_112 = METHOD_17 ( VAR_113 ) ; STRUCT_OR_UNION_42 -> VAR_114 = METHOD_18 ( VAR_115 . VAR_116 ) ; if ( STRUCT_OR_UNION_43 -> VAR_117 & VAR_118 ) { METHOD_19 ( VAR_119 , 1 ) ; STRUCT_OR_UNION_44 -> VAR_120 = 1 ; METHOD_20 ( & VAR_121 -> VAR_122 , VAR_123 , ""RARencryptionsupportunavailable."" ) ; } if ( STRUCT_OR_UNION_45 -> VAR_124 & VAR_125 ) { METHOD_21 ( VAR_126 , VAR_127 . VAR_128 , 4 ) ; METHOD_22 ( VAR_129 + 4 , VAR_130 , 4 ) ; VAR_131 += 4 ; METHOD_23 ( VAR_132 , VAR_133 . VAR_134 , 4 ) ; METHOD_24 ( VAR_135 + 4 , VAR_136 , 4 ) ; VAR_137 += 4 ; STRUCT_OR_UNION_46 -> VAR_138 = METHOD_25 ( & VAR_139 ) ; STRUCT_OR_UNION_47 -> VAR_140 = METHOD_26 ( & VAR_141 ) ; } else { STRUCT_OR_UNION_48 -> VAR_142 = METHOD_27 ( VAR_143 . VAR_144 ) ; STRUCT_OR_UNION_49 -> VAR_145 = METHOD_28 ( VAR_146 . VAR_147 ) ; } if ( STRUCT_OR_UNION_50 -> VAR_148 < 0 || STRUCT_OR_UNION_51 -> VAR_149 < 0 ) { METHOD_29 ( & VAR_150 -> VAR_151 , VAR_152 , ""Invalidsizesspecified."" ) ; return ( VAR_153 ) ; } STRUCT_OR_UNION_52 -> VAR_154 = STRUCT_OR_UNION_53 -> VAR_155 ; if ( VAR_156 == VAR_157 ) { TYPE_15 VAR_158 = VAR_159 - ( const TYPE_16 * ) VAR_160 ; VAR_161 += STRUCT_OR_UNION_54 -> VAR_162 ; if ( ( VAR_163 = METHOD_30 ( VAR_164 , ( TYPE_17 ) VAR_165 - 7 , VAR_166 ) ) == VAR_167 ) return ( VAR_168 ) ; VAR_169 = VAR_170 ; VAR_171 = VAR_172 + VAR_173 - 7 ; VAR_174 += VAR_175 ; } VAR_176 = METHOD_31 ( VAR_177 . VAR_178 ) ; if ( VAR_179 + VAR_180 > VAR_181 ) { METHOD_32 ( & VAR_182 -> VAR_183 , VAR_184 , ""Invalidfilenamesize"" ) ; return ( VAR_185 ) ; } if ( STRUCT_OR_UNION_55 -> VAR_186 < VAR_187 * 2 + 2 ) { TYPE_18 * VAR_188 ; TYPE_19 VAR_189 = VAR_190 * 2 + 2 ; VAR_191 = METHOD_33 ( STRUCT_OR_UNION_56 -> VAR_192 , VAR_193 ) ; if ( VAR_194 == VAR_195 ) { METHOD_34 ( & VAR_196 -> VAR_197 , VAR_198 , ""Couldn\'tallocatememory."" ) ; return ( VAR_199 ) ; } STRUCT_OR_UNION_57 -> VAR_200 = VAR_201 ; STRUCT_OR_UNION_58 -> VAR_202 = VAR_203 ; } VAR_204 = STRUCT_OR_UNION_59 -> VAR_205 ; METHOD_35 ( VAR_206 , VAR_207 , VAR_208 ) ; VAR_209 [ VAR_210 ] = '\\0' ; if ( STRUCT_OR_UNION_60 -> VAR_211 & VAR_212 ) { if ( VAR_213 != METHOD_36 ( VAR_214 ) ) { unsigned TYPE_20 VAR_215 , VAR_216 , VAR_217 ; unsigned VAR_218 , VAR_219 ; VAR_220 = VAR_221 ; VAR_222 = VAR_223 * 2 ; VAR_224 = 0 ; VAR_225 = ( unsigned ) METHOD_37 ( VAR_226 ) + 1 ; VAR_227 = * ( VAR_228 + VAR_229 ++ ) ; VAR_230 = 0 ; VAR_231 = 0 ; while ( VAR_232 < VAR_233 && VAR_234 < VAR_235 ) { if ( ! VAR_236 ) { VAR_237 = * ( VAR_238 + VAR_239 ++ ) ; VAR_240 = 8 ; } VAR_241 -= 2 ; switch ( ( VAR_242 >> VAR_243 ) & 3 ) { case 0 : VAR_244 [ VAR_245 ++ ] = '\\0' ; VAR_246 [ VAR_247 ++ ] = * ( VAR_248 + VAR_249 ++ ) ; break ; case 1 : VAR_250 [ VAR_251 ++ ] = VAR_252 ; VAR_253 [ VAR_254 ++ ] = * ( VAR_255 + VAR_256 ++ ) ; break ; case 2 : VAR_257 [ VAR_258 ++ ] = * ( VAR_259 + VAR_260 + 1 ) ; VAR_261 [ VAR_262 ++ ] = * ( VAR_263 + VAR_264 ) ; VAR_265 += 2 ; break ; case 3 : { TYPE_21 VAR_266 , VAR_267 ; TYPE_22 VAR_268 = * ( VAR_269 + VAR_270 ++ ) ; if ( VAR_271 & 0x80 ) { VAR_272 = * ( VAR_273 + VAR_274 ++ ) ; VAR_275 = ( TYPE_23 ) VAR_276 ; } else VAR_277 = VAR_278 = 0 ; VAR_279 = ( VAR_280 & 0x7f ) + 2 ; while ( VAR_281 && VAR_282 < VAR_283 ) { unsigned VAR_284 = VAR_285 >> 1 ; VAR_286 [ VAR_287 ++ ] = VAR_288 ; VAR_289 [ VAR_290 ++ ] = VAR_291 [ VAR_292 ] + VAR_293 ; VAR_294 -- ; } } break ; } } if ( VAR_295 > VAR_296 ) { METHOD_38 ( & VAR_297 -> VAR_298 , VAR_299 , ""Invalidfilename"" ) ; return ( VAR_300 ) ; } VAR_301 [ VAR_302 ++ ] = '\\0' ;  VAR_303 [ VAR_304 ++ ] = '\\0' ;  if ( STRUCT_OR_UNION_61 -> VAR_305 == VAR_306 ) { STRUCT_OR_UNION_62 -> VAR_307 = METHOD_39 ( & VAR_308 -> VAR_309 , ""UTF-16BE"" , 1 ) ; if ( STRUCT_OR_UNION_63 -> VAR_310 == VAR_311 ) return ( VAR_312 ) ; } VAR_313 = STRUCT_OR_UNION_64 -> VAR_314 ; VAR_315 = VAR_316 ; while ( METHOD_40 ( VAR_317 , ""\\x00\\x00"" , 2 ) ) { if ( ! METHOD_41 ( VAR_318 , ""\\x00\\\\"" , 2 ) ) * ( VAR_319 + 1 ) = '/' ; VAR_320 += 2 ; } VAR_321 += VAR_322 ; } else { if ( STRUCT_OR_UNION_65 -> VAR_323 == VAR_324 ) { STRUCT_OR_UNION_66 -> VAR_325 = METHOD_42 ( & VAR_326 -> VAR_327 , ""UTF-8"" , 1 ) ; if ( STRUCT_OR_UNION_67 -> VAR_328 == VAR_329 ) return ( VAR_330 ) ; } VAR_331 = STRUCT_OR_UNION_68 -> VAR_332 ; while ( ( VAR_333 = METHOD_43 ( VAR_334 , '\\\\' ) ) != VAR_335 ) * VAR_336 = '/' ; VAR_337 += VAR_338 ; } } else { VAR_339 = VAR_340 ; while ( ( VAR_341 = METHOD_44 ( VAR_342 , '\\\\' ) ) != VAR_343 ) * VAR_344 = '/' ; VAR_345 += VAR_346 ; } if ( STRUCT_OR_UNION_69 -> VAR_347 && VAR_348 == STRUCT_OR_UNION_70 -> VAR_349 && ! METHOD_45 ( STRUCT_OR_UNION_71 -> VAR_350 , STRUCT_OR_UNION_72 -> VAR_351 , VAR_352 + 1 ) ) { METHOD_46 ( VAR_353 , VAR_354 - 7 ) ; STRUCT_OR_UNION_73 -> VAR_355 ++ ; if ( STRUCT_OR_UNION_74 -> VAR_356 >= STRUCT_OR_UNION_75 -> VAR_357 ) { STRUCT_OR_UNION_76 -> VAR_358 ++ ; if ( ( STRUCT_OR_UNION_77 -> VAR_359 = METHOD_47 ( STRUCT_OR_UNION_78 -> VAR_360 , sizeof ( * STRUCT_OR_UNION_79 -> VAR_361 ) * STRUCT_OR_UNION_80 -> VAR_362 ) ) == VAR_363 ) { METHOD_48 ( & VAR_364 -> VAR_365 , VAR_366 , ""Couldn\'tallocatememory."" ) ; return ( VAR_367 ) ; } STRUCT_OR_UNION_81 -> VAR_368 [ STRUCT_OR_UNION_82 -> VAR_369 ] . VAR_370 = VAR_371 ; STRUCT_OR_UNION_83 -> VAR_372 [ STRUCT_OR_UNION_84 -> VAR_373 ] . VAR_374 = - 1 ; STRUCT_OR_UNION_85 -> VAR_375 [ STRUCT_OR_UNION_86 -> VAR_376 ] . VAR_377 = - 1 ; } if ( STRUCT_OR_UNION_87 -> VAR_378 [ STRUCT_OR_UNION_88 -> VAR_379 ] . VAR_380 < 0 ) { STRUCT_OR_UNION_89 -> VAR_381 [ STRUCT_OR_UNION_90 -> VAR_382 ] . VAR_383 = VAR_384 -> VAR_385 -> VAR_386 ; STRUCT_OR_UNION_91 -> VAR_387 [ STRUCT_OR_UNION_92 -> VAR_388 ] . VAR_389 = STRUCT_OR_UNION_93 -> VAR_390 [ STRUCT_OR_UNION_94 -> VAR_391 ] . VAR_392 + STRUCT_OR_UNION_95 -> VAR_393 ; } return VAR_394 ; } STRUCT_OR_UNION_96 -> VAR_395 = ( TYPE_24 * ) METHOD_49 ( STRUCT_OR_UNION_97 -> VAR_396 , VAR_397 + 1 ) ; METHOD_50 ( STRUCT_OR_UNION_98 -> VAR_398 , STRUCT_OR_UNION_99 -> VAR_399 , VAR_400 + 1 ) ; STRUCT_OR_UNION_100 -> VAR_401 = VAR_402 ; METHOD_51 ( STRUCT_OR_UNION_101 -> VAR_403 ) ; if ( ( STRUCT_OR_UNION_102 -> VAR_404 = METHOD_52 ( 1 , sizeof ( * STRUCT_OR_UNION_103 -> VAR_405 ) ) ) == VAR_406 ) { METHOD_53 ( & VAR_407 -> VAR_408 , VAR_409 , ""Couldn\'tallocatememory."" ) ; return ( VAR_410 ) ; } STRUCT_OR_UNION_104 -> VAR_411 [ 0 ] . VAR_412 = VAR_413 ; STRUCT_OR_UNION_105 -> VAR_414 [ 0 ] . VAR_415 = - 1 ; STRUCT_OR_UNION_106 -> VAR_416 [ 0 ] . VAR_417 = - 1 ; STRUCT_OR_UNION_107 -> VAR_418 = 0 ; STRUCT_OR_UNION_108 -> VAR_419 = 1 ; if ( STRUCT_OR_UNION_109 -> VAR_420 & VAR_421 ) { if ( VAR_422 + 8 > VAR_423 ) { METHOD_54 ( & VAR_424 -> VAR_425 , VAR_426 , ""Invalidheadersize"" ) ; return ( VAR_427 ) ; } METHOD_55 ( STRUCT_OR_UNION_110 -> VAR_428 , VAR_429 , 8 ) ; VAR_430 += 8 ; } if ( STRUCT_OR_UNION_111 -> VAR_431 & VAR_432 ) { if ( METHOD_56 ( VAR_433 , STRUCT_OR_UNION_112 , VAR_434 ) < 0 ) { METHOD_57 ( & VAR_435 -> VAR_436 , VAR_437 , ""Invalidheadersize"" ) ; return ( VAR_438 ) ; } } METHOD_58 ( VAR_439 , VAR_440 - 7 ) ; STRUCT_OR_UNION_113 -> VAR_441 [ 0 ] . VAR_442 = VAR_443 -> VAR_444 -> VAR_445 ; STRUCT_OR_UNION_114 -> VAR_446 [ 0 ] . VAR_447 = STRUCT_OR_UNION_115 -> VAR_448 [ 0 ] . VAR_449 + STRUCT_OR_UNION_116 -> VAR_450 ; switch ( VAR_451 . VAR_452 ) { case VAR_453 : case VAR_454 : case VAR_455 : STRUCT_OR_UNION_117 -> VAR_456 = METHOD_59 ( VAR_457 . VAR_458 ) ; if ( STRUCT_OR_UNION_118 -> VAR_459 & VAR_460 ) STRUCT_OR_UNION_119 -> VAR_461 = VAR_462 | VAR_463 | VAR_464 | VAR_465 ; else STRUCT_OR_UNION_120 -> VAR_466 = VAR_467 ; STRUCT_OR_UNION_121 -> VAR_468 |= VAR_469 | VAR_470 | VAR_471 | VAR_472 ; break ; case VAR_473 : case VAR_474 : case VAR_475 : STRUCT_OR_UNION_122 -> VAR_476 = METHOD_60 ( VAR_477 . VAR_478 ) ; break ; default : METHOD_61 ( & VAR_479 -> VAR_480 , VAR_481 , ""UnknownfileattributesfromRARfile\'shostOS"" ) ; return ( VAR_482 ) ; } STRUCT_OR_UNION_123 -> VAR_483 = STRUCT_OR_UNION_124 -> VAR_484 = 0 ; STRUCT_OR_UNION_125 -> VAR_485 . VAR_486 = STRUCT_OR_UNION_126 -> VAR_487 = 0 ; STRUCT_OR_UNION_127 -> VAR_488 = 0 ; STRUCT_OR_UNION_128 -> VAR_489 = 0 ; STRUCT_OR_UNION_129 -> VAR_490 = 0 ; STRUCT_OR_UNION_130 -> VAR_491 . VAR_492 = 0 ; STRUCT_OR_UNION_131 -> VAR_493 . VAR_494 = 0 ; STRUCT_OR_UNION_132 -> VAR_495 = 0 ; STRUCT_OR_UNION_133 -> VAR_496 = 0 ; STRUCT_OR_UNION_134 -> VAR_497 = 1 ; STRUCT_OR_UNION_135 -> VAR_498 = 0 ; STRUCT_OR_UNION_136 -> VAR_499 = 1 ; METHOD_62 ( STRUCT_OR_UNION_137 -> VAR_500 ) ; STRUCT_OR_UNION_138 -> VAR_501 = VAR_502 ; STRUCT_OR_UNION_139 -> VAR_503 = 0 ; STRUCT_OR_UNION_140 -> VAR_504 = VAR_505 ; METHOD_63 ( STRUCT_OR_UNION_141 -> VAR_506 , 0 , sizeof ( STRUCT_OR_UNION_142 -> VAR_507 ) ) ; VAR_508 . METHOD_64 ( & STRUCT_OR_UNION_143 -> VAR_509 , & VAR_510 ) ; STRUCT_OR_UNION_144 -> VAR_511 = STRUCT_OR_UNION_145 -> VAR_512 = 0 ; if ( VAR_513 == VAR_514 ) return VAR_515 ; METHOD_65 ( VAR_516 , STRUCT_OR_UNION_146 -> VAR_517 , STRUCT_OR_UNION_147 -> VAR_518 ) ; METHOD_66 ( VAR_519 , STRUCT_OR_UNION_148 -> VAR_520 , STRUCT_OR_UNION_149 -> VAR_521 ) ; METHOD_67 ( VAR_522 , STRUCT_OR_UNION_150 -> VAR_523 , STRUCT_OR_UNION_151 -> VAR_524 ) ; METHOD_68 ( VAR_525 , STRUCT_OR_UNION_152 -> VAR_526 ) ; METHOD_69 ( VAR_527 , STRUCT_OR_UNION_153 -> VAR_528 ) ; if ( METHOD_70 ( VAR_529 , VAR_530 , VAR_531 , VAR_532 ) ) { if ( VAR_533 == VAR_534 ) { METHOD_71 ( & VAR_535 -> VAR_536 , VAR_537 , ""Can\'tallocatememoryforPathname"" ) ; return ( VAR_538 ) ; } METHOD_72 ( & VAR_539 -> VAR_540 , VAR_541 , ""Pathnamecannotbeconvertedfrom%stocurrentlocale."" , METHOD_73 ( VAR_542 ) ) ; VAR_543 = ( VAR_544 ) ; } if ( ( ( STRUCT_OR_UNION_154 -> VAR_545 ) & VAR_546 ) == VAR_547 ) { STRUCT_OR_UNION_155 -> VAR_548 = 0 ; METHOD_74 ( VAR_549 , 0 ) ; if ( ( VAR_550 = METHOD_75 ( VAR_551 , VAR_552 , VAR_553 ) ) < ( VAR_554 ) ) return VAR_555 ; if ( VAR_556 > VAR_557 ) VAR_558 = VAR_559 ; } if ( STRUCT_OR_UNION_156 -> VAR_560 == 0 ) STRUCT_OR_UNION_157 -> VAR_561 = 1 ; return VAR_562 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { const TYPE_2 * VAR_3 ; const TYPE_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; struct STRUCT_OR_UNION_4 STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 VAR_6 ; TYPE_4 VAR_7 ; unsigned VAR_8 , VAR_9 ; TYPE_5 * VAR_10 ; TYPE_6 * VAR_11 ; TYPE_7 VAR_12 [ 8 ] ; TYPE_8 VAR_13 [ 8 ] ; TYPE_9 VAR_14 ; struct STRUCT_OR_UNION_7 * VAR_15 , * VAR_16 ; unsigned TYPE_10 VAR_17 ; TYPE_11 VAR_18 = ( VAR_19 ) , VAR_20 ; STRUCT_OR_UNION_8 = ( struct STRUCT_OR_UNION_9 * ) ( VAR_21 -> VAR_22 -> VAR_23 ) ; VAR_24 = STRUCT_OR_UNION_10 -> VAR_25 ; if ( VAR_26 == VAR_27 ) { if ( ! STRUCT_OR_UNION_11 -> VAR_28 ) { STRUCT_OR_UNION_12 -> VAR_29 = METHOD_1 ( & ( VAR_30 -> VAR_31 ) ) ; STRUCT_OR_UNION_13 -> VAR_32 = 1 ; } VAR_33 = STRUCT_OR_UNION_14 -> VAR_34 ; } if ( ( VAR_35 = METHOD_2 ( VAR_36 , 7 , VAR_37 ) ) == VAR_38 ) return ( VAR_39 ) ; VAR_40 = VAR_41 ; METHOD_3 ( & STRUCT_OR_UNION_15 , VAR_42 , sizeof ( STRUCT_OR_UNION_16 ) ) ; STRUCT_OR_UNION_17 -> VAR_43 = METHOD_4 ( STRUCT_OR_UNION_18 . VAR_44 ) ; VAR_45 = METHOD_5 ( STRUCT_OR_UNION_19 . VAR_46 ) ; if ( VAR_47 < ( TYPE_12 ) sizeof ( VAR_48 ) + 7 ) { METHOD_6 ( & VAR_49 -> VAR_50 , VAR_51 , ""Invalidheadersize"" ) ; return ( VAR_52 ) ; } VAR_53 = METHOD_7 ( 0 , ( const unsigned TYPE_13 * ) VAR_54 + 2 , 7 - 2 ) ; METHOD_8 ( VAR_55 , 7 ) ; if ( ! ( STRUCT_OR_UNION_20 -> VAR_56 & VAR_57 ) ) { STRUCT_OR_UNION_21 -> VAR_58 = 0 ; STRUCT_OR_UNION_22 -> VAR_59 = 0 ; STRUCT_OR_UNION_23 -> VAR_60 = 0 ; STRUCT_OR_UNION_24 -> VAR_61 = 0 ; STRUCT_OR_UNION_25 -> VAR_62 = 0 ; STRUCT_OR_UNION_26 -> VAR_63 = 0 ; STRUCT_OR_UNION_27 -> VAR_64 = 0 ; STRUCT_OR_UNION_28 -> VAR_65 = 0 ; METHOD_9 ( & STRUCT_OR_UNION_29 -> VAR_66 , 0 , sizeof ( STRUCT_OR_UNION_30 -> VAR_67 ) ) ; STRUCT_OR_UNION_31 -> VAR_68 = 0 ; STRUCT_OR_UNION_32 -> VAR_69 = 0 ; STRUCT_OR_UNION_33 -> VAR_70 = 0 ; STRUCT_OR_UNION_34 -> VAR_71 = 0 ; STRUCT_OR_UNION_35 -> VAR_72 = 0 ; STRUCT_OR_UNION_36 -> VAR_73 = 0 ; STRUCT_OR_UNION_37 -> VAR_74 = 0 ; STRUCT_OR_UNION_38 -> VAR_75 = 0 ; } else { METHOD_10 ( & VAR_76 -> VAR_77 , VAR_78 , ""RARsolidarchivesupportunavailable."" ) ; return ( VAR_79 ) ; } if ( ( VAR_80 = METHOD_11 ( VAR_81 , ( TYPE_14 ) VAR_82 - 7 , VAR_83 ) ) == VAR_84 ) return ( VAR_85 ) ; VAR_86 = METHOD_12 ( VAR_87 , VAR_88 , ( unsigned ) ( VAR_89 - 7 ) ) ; if ( ( VAR_90 & 0xffff ) != METHOD_13 ( STRUCT_OR_UNION_39 . VAR_91 ) ) { METHOD_14 ( & VAR_92 -> VAR_93 , VAR_94 , ""HeaderCRCerror"" ) ; return ( VAR_95 ) ; } VAR_96 = VAR_97 ; VAR_98 = VAR_99 + VAR_100 - 7 ; METHOD_15 ( & VAR_101 , VAR_102 , sizeof ( VAR_103 ) ) ; VAR_104 += sizeof ( VAR_105 ) ; STRUCT_OR_UNION_40 -> VAR_106 = VAR_107 . VAR_108 ; VAR_109 = METHOD_16 ( VAR_110 . VAR_111 ) ; STRUCT_OR_UNION_41 -> VAR_112 = METHOD_17 ( VAR_113 ) ; STRUCT_OR_UNION_42 -> VAR_114 = METHOD_18 ( VAR_115 . VAR_116 ) ; if ( STRUCT_OR_UNION_43 -> VAR_117 & VAR_118 ) { METHOD_19 ( VAR_119 , 1 ) ; STRUCT_OR_UNION_44 -> VAR_120 = 1 ; METHOD_20 ( & VAR_121 -> VAR_122 , VAR_123 , ""RARencryptionsupportunavailable."" ) ; } if ( STRUCT_OR_UNION_45 -> VAR_124 & VAR_125 ) { METHOD_21 ( VAR_126 , VAR_127 . VAR_128 , 4 ) ; METHOD_22 ( VAR_129 + 4 , VAR_130 , 4 ) ; VAR_131 += 4 ; METHOD_23 ( VAR_132 , VAR_133 . VAR_134 , 4 ) ; METHOD_24 ( VAR_135 + 4 , VAR_136 , 4 ) ; VAR_137 += 4 ; STRUCT_OR_UNION_46 -> VAR_138 = METHOD_25 ( & VAR_139 ) ; STRUCT_OR_UNION_47 -> VAR_140 = METHOD_26 ( & VAR_141 ) ; } else { STRUCT_OR_UNION_48 -> VAR_142 = METHOD_27 ( VAR_143 . VAR_144 ) ; STRUCT_OR_UNION_49 -> VAR_145 = METHOD_28 ( VAR_146 . VAR_147 ) ; } if ( STRUCT_OR_UNION_50 -> VAR_148 < 0 || STRUCT_OR_UNION_51 -> VAR_149 < 0 ) { METHOD_29 ( & VAR_150 -> VAR_151 , VAR_152 , ""Invalidsizesspecified."" ) ; return ( VAR_153 ) ; } STRUCT_OR_UNION_52 -> VAR_154 = STRUCT_OR_UNION_53 -> VAR_155 ; if ( VAR_156 == VAR_157 ) { TYPE_15 VAR_158 = VAR_159 - ( const TYPE_16 * ) VAR_160 ; VAR_161 += STRUCT_OR_UNION_54 -> VAR_162 ; if ( ( VAR_163 = METHOD_30 ( VAR_164 , ( TYPE_17 ) VAR_165 - 7 , VAR_166 ) ) == VAR_167 ) return ( VAR_168 ) ; VAR_169 = VAR_170 ; VAR_171 = VAR_172 + VAR_173 - 7 ; VAR_174 += VAR_175 ; } VAR_176 = METHOD_31 ( VAR_177 . VAR_178 ) ; if ( VAR_179 + VAR_180 > VAR_181 ) { METHOD_32 ( & VAR_182 -> VAR_183 , VAR_184 , ""Invalidfilenamesize"" ) ; return ( VAR_185 ) ; } if ( STRUCT_OR_UNION_55 -> VAR_186 < VAR_187 * 2 + 2 ) { TYPE_18 * VAR_188 ; TYPE_19 VAR_189 = VAR_190 * 2 + 2 ; VAR_191 = METHOD_33 ( STRUCT_OR_UNION_56 -> VAR_192 , VAR_193 ) ; if ( VAR_194 == VAR_195 ) { METHOD_34 ( & VAR_196 -> VAR_197 , VAR_198 , ""Couldn\'tallocatememory."" ) ; return ( VAR_199 ) ; } STRUCT_OR_UNION_57 -> VAR_200 = VAR_201 ; STRUCT_OR_UNION_58 -> VAR_202 = VAR_203 ; } VAR_204 = STRUCT_OR_UNION_59 -> VAR_205 ; METHOD_35 ( VAR_206 , VAR_207 , VAR_208 ) ; VAR_209 [ VAR_210 ] = '\\0' ; if ( STRUCT_OR_UNION_60 -> VAR_211 & VAR_212 ) { if ( VAR_213 != METHOD_36 ( VAR_214 ) ) { unsigned TYPE_20 VAR_215 , VAR_216 , VAR_217 ; unsigned VAR_218 , VAR_219 ; VAR_220 = VAR_221 ; VAR_222 = VAR_223 * 2 ; VAR_224 = 0 ; VAR_225 = ( unsigned ) METHOD_37 ( VAR_226 ) + 1 ; VAR_227 = * ( VAR_228 + VAR_229 ++ ) ; VAR_230 = 0 ; VAR_231 = 0 ; while ( VAR_232 < VAR_233 && VAR_234 < VAR_235 ) { if ( ! VAR_236 ) { VAR_237 = * ( VAR_238 + VAR_239 ++ ) ; VAR_240 = 8 ; } VAR_241 -= 2 ; switch ( ( VAR_242 >> VAR_243 ) & 3 ) { case 0 : VAR_244 [ VAR_245 ++ ] = '\\0' ; VAR_246 [ VAR_247 ++ ] = * ( VAR_248 + VAR_249 ++ ) ; break ; case 1 : VAR_250 [ VAR_251 ++ ] = VAR_252 ; VAR_253 [ VAR_254 ++ ] = * ( VAR_255 + VAR_256 ++ ) ; break ; case 2 : VAR_257 [ VAR_258 ++ ] = * ( VAR_259 + VAR_260 + 1 ) ; VAR_261 [ VAR_262 ++ ] = * ( VAR_263 + VAR_264 ) ; VAR_265 += 2 ; break ; case 3 : { TYPE_21 VAR_266 , VAR_267 ; TYPE_22 VAR_268 = * ( VAR_269 + VAR_270 ++ ) ; if ( VAR_271 & 0x80 ) { VAR_272 = * ( VAR_273 + VAR_274 ++ ) ; VAR_275 = ( TYPE_23 ) VAR_276 ; } else VAR_277 = VAR_278 = 0 ; VAR_279 = ( VAR_280 & 0x7f ) + 2 ; while ( VAR_281 && VAR_282 < VAR_283 ) { unsigned VAR_284 = VAR_285 >> 1 ; VAR_286 [ VAR_287 ++ ] = VAR_288 ; VAR_289 [ VAR_290 ++ ] = VAR_291 [ VAR_292 ] + VAR_293 ; VAR_294 -- ; } } break ; } } if ( VAR_295 > VAR_296 ) { METHOD_38 ( & VAR_297 -> VAR_298 , VAR_299 , ""Invalidfilename"" ) ; return ( VAR_300 ) ; } VAR_301 [ VAR_302 ++ ] = '\\0' ; VAR_303 [ VAR_304 ++ ] = '\\0' ; if ( STRUCT_OR_UNION_61 -> VAR_305 == VAR_306 ) { STRUCT_OR_UNION_62 -> VAR_307 = METHOD_39 ( & VAR_308 -> VAR_309 , ""UTF-16BE"" , 1 ) ; if ( STRUCT_OR_UNION_63 -> VAR_310 == VAR_311 ) return ( VAR_312 ) ; } VAR_313 = STRUCT_OR_UNION_64 -> VAR_314 ; VAR_315 = VAR_316 ; while ( METHOD_40 ( VAR_317 , ""\\x00\\x00"" , 2 ) ) { if ( ! METHOD_41 ( VAR_318 , ""\\x00\\\\"" , 2 ) ) * ( VAR_319 + 1 ) = '/' ; VAR_320 += 2 ; } VAR_321 += VAR_322 ; } else { if ( STRUCT_OR_UNION_65 -> VAR_323 == VAR_324 ) { STRUCT_OR_UNION_66 -> VAR_325 = METHOD_42 ( & VAR_326 -> VAR_327 , ""UTF-8"" , 1 ) ; if ( STRUCT_OR_UNION_67 -> VAR_328 == VAR_329 ) return ( VAR_330 ) ; } VAR_331 = STRUCT_OR_UNION_68 -> VAR_332 ; while ( ( VAR_333 = METHOD_43 ( VAR_334 , '\\\\' ) ) != VAR_335 ) * VAR_336 = '/' ; VAR_337 += VAR_338 ; } } else { VAR_339 = VAR_340 ; while ( ( VAR_341 = METHOD_44 ( VAR_342 , '\\\\' ) ) != VAR_343 ) * VAR_344 = '/' ; VAR_345 += VAR_346 ; } if ( STRUCT_OR_UNION_69 -> VAR_347 && VAR_348 == STRUCT_OR_UNION_70 -> VAR_349 && ! METHOD_45 ( STRUCT_OR_UNION_71 -> VAR_350 , STRUCT_OR_UNION_72 -> VAR_351 , VAR_352 + 1 ) ) { METHOD_46 ( VAR_353 , VAR_354 - 7 ) ; STRUCT_OR_UNION_73 -> VAR_355 ++ ; if ( STRUCT_OR_UNION_74 -> VAR_356 >= STRUCT_OR_UNION_75 -> VAR_357 ) { STRUCT_OR_UNION_76 -> VAR_358 ++ ; if ( ( STRUCT_OR_UNION_77 -> VAR_359 = METHOD_47 ( STRUCT_OR_UNION_78 -> VAR_360 , sizeof ( * STRUCT_OR_UNION_79 -> VAR_361 ) * STRUCT_OR_UNION_80 -> VAR_362 ) ) == VAR_363 ) { METHOD_48 ( & VAR_364 -> VAR_365 , VAR_366 , ""Couldn\'tallocatememory."" ) ; return ( VAR_367 ) ; } STRUCT_OR_UNION_81 -> VAR_368 [ STRUCT_OR_UNION_82 -> VAR_369 ] . VAR_370 = VAR_371 ; STRUCT_OR_UNION_83 -> VAR_372 [ STRUCT_OR_UNION_84 -> VAR_373 ] . VAR_374 = - 1 ; STRUCT_OR_UNION_85 -> VAR_375 [ STRUCT_OR_UNION_86 -> VAR_376 ] . VAR_377 = - 1 ; } if ( STRUCT_OR_UNION_87 -> VAR_378 [ STRUCT_OR_UNION_88 -> VAR_379 ] . VAR_380 < 0 ) { STRUCT_OR_UNION_89 -> VAR_381 [ STRUCT_OR_UNION_90 -> VAR_382 ] . VAR_383 = VAR_384 -> VAR_385 -> VAR_386 ; STRUCT_OR_UNION_91 -> VAR_387 [ STRUCT_OR_UNION_92 -> VAR_388 ] . VAR_389 = STRUCT_OR_UNION_93 -> VAR_390 [ STRUCT_OR_UNION_94 -> VAR_391 ] . VAR_392 + STRUCT_OR_UNION_95 -> VAR_393 ; } return VAR_394 ; } STRUCT_OR_UNION_96 -> VAR_395 = ( TYPE_24 * ) METHOD_49 ( STRUCT_OR_UNION_97 -> VAR_396 , VAR_397 + 1 ) ; METHOD_50 ( STRUCT_OR_UNION_98 -> VAR_398 , STRUCT_OR_UNION_99 -> VAR_399 , VAR_400 + 1 ) ; STRUCT_OR_UNION_100 -> VAR_401 = VAR_402 ; METHOD_51 ( STRUCT_OR_UNION_101 -> VAR_403 ) ; if ( ( STRUCT_OR_UNION_102 -> VAR_404 = METHOD_52 ( 1 , sizeof ( * STRUCT_OR_UNION_103 -> VAR_405 ) ) ) == VAR_406 ) { METHOD_53 ( & VAR_407 -> VAR_408 , VAR_409 , ""Couldn\'tallocatememory."" ) ; return ( VAR_410 ) ; } STRUCT_OR_UNION_104 -> VAR_411 [ 0 ] . VAR_412 = VAR_413 ; STRUCT_OR_UNION_105 -> VAR_414 [ 0 ] . VAR_415 = - 1 ; STRUCT_OR_UNION_106 -> VAR_416 [ 0 ] . VAR_417 = - 1 ; STRUCT_OR_UNION_107 -> VAR_418 = 0 ; STRUCT_OR_UNION_108 -> VAR_419 = 1 ; if ( STRUCT_OR_UNION_109 -> VAR_420 & VAR_421 ) { if ( VAR_422 + 8 > VAR_423 ) { METHOD_54 ( & VAR_424 -> VAR_425 , VAR_426 , ""Invalidheadersize"" ) ; return ( VAR_427 ) ; } METHOD_55 ( STRUCT_OR_UNION_110 -> VAR_428 , VAR_429 , 8 ) ; VAR_430 += 8 ; } if ( STRUCT_OR_UNION_111 -> VAR_431 & VAR_432 ) { if ( METHOD_56 ( VAR_433 , STRUCT_OR_UNION_112 , VAR_434 ) < 0 ) { METHOD_57 ( & VAR_435 -> VAR_436 , VAR_437 , ""Invalidheadersize"" ) ; return ( VAR_438 ) ; } } METHOD_58 ( VAR_439 , VAR_440 - 7 ) ; STRUCT_OR_UNION_113 -> VAR_441 [ 0 ] . VAR_442 = VAR_443 -> VAR_444 -> VAR_445 ; STRUCT_OR_UNION_114 -> VAR_446 [ 0 ] . VAR_447 = STRUCT_OR_UNION_115 -> VAR_448 [ 0 ] . VAR_449 + STRUCT_OR_UNION_116 -> VAR_450 ; switch ( VAR_451 . VAR_452 ) { case VAR_453 : case VAR_454 : case VAR_455 : STRUCT_OR_UNION_117 -> VAR_456 = METHOD_59 ( VAR_457 . VAR_458 ) ; if ( STRUCT_OR_UNION_118 -> VAR_459 & VAR_460 ) STRUCT_OR_UNION_119 -> VAR_461 = VAR_462 | VAR_463 | VAR_464 | VAR_465 ; else STRUCT_OR_UNION_120 -> VAR_466 = VAR_467 ; STRUCT_OR_UNION_121 -> VAR_468 |= VAR_469 | VAR_470 | VAR_471 | VAR_472 ; break ; case VAR_473 : case VAR_474 : case VAR_475 : STRUCT_OR_UNION_122 -> VAR_476 = METHOD_60 ( VAR_477 . VAR_478 ) ; break ; default : METHOD_61 ( & VAR_479 -> VAR_480 , VAR_481 , ""UnknownfileattributesfromRARfile\'shostOS"" ) ; return ( VAR_482 ) ; } STRUCT_OR_UNION_123 -> VAR_483 = STRUCT_OR_UNION_124 -> VAR_484 = 0 ; STRUCT_OR_UNION_125 -> VAR_485 . VAR_486 = STRUCT_OR_UNION_126 -> VAR_487 = 0 ; STRUCT_OR_UNION_127 -> VAR_488 = 0 ; STRUCT_OR_UNION_128 -> VAR_489 = 0 ; STRUCT_OR_UNION_129 -> VAR_490 = 0 ; STRUCT_OR_UNION_130 -> VAR_491 . VAR_492 = 0 ; STRUCT_OR_UNION_131 -> VAR_493 . VAR_494 = 0 ; STRUCT_OR_UNION_132 -> VAR_495 = 0 ; STRUCT_OR_UNION_133 -> VAR_496 = 0 ; STRUCT_OR_UNION_134 -> VAR_497 = 1 ; STRUCT_OR_UNION_135 -> VAR_498 = 0 ; STRUCT_OR_UNION_136 -> VAR_499 = 1 ; METHOD_62 ( STRUCT_OR_UNION_137 -> VAR_500 ) ; STRUCT_OR_UNION_138 -> VAR_501 = VAR_502 ; STRUCT_OR_UNION_139 -> VAR_503 = 0 ; STRUCT_OR_UNION_140 -> VAR_504 = VAR_505 ; METHOD_63 ( STRUCT_OR_UNION_141 -> VAR_506 , 0 , sizeof ( STRUCT_OR_UNION_142 -> VAR_507 ) ) ; VAR_508 . METHOD_64 ( & STRUCT_OR_UNION_143 -> VAR_509 , & VAR_510 ) ; STRUCT_OR_UNION_144 -> VAR_511 = STRUCT_OR_UNION_145 -> VAR_512 = 0 ; if ( VAR_513 == VAR_514 ) return VAR_515 ; METHOD_65 ( VAR_516 , STRUCT_OR_UNION_146 -> VAR_517 , STRUCT_OR_UNION_147 -> VAR_518 ) ; METHOD_66 ( VAR_519 , STRUCT_OR_UNION_148 -> VAR_520 , STRUCT_OR_UNION_149 -> VAR_521 ) ; METHOD_67 ( VAR_522 , STRUCT_OR_UNION_150 -> VAR_523 , STRUCT_OR_UNION_151 -> VAR_524 ) ; METHOD_68 ( VAR_525 , STRUCT_OR_UNION_152 -> VAR_526 ) ; METHOD_69 ( VAR_527 , STRUCT_OR_UNION_153 -> VAR_528 ) ; if ( METHOD_70 ( VAR_529 , VAR_530 , VAR_531 , VAR_532 ) ) { if ( VAR_533 == VAR_534 ) { METHOD_71 ( & VAR_535 -> VAR_536 , VAR_537 , ""Can\'tallocatememoryforPathname"" ) ; return ( VAR_538 ) ; } METHOD_72 ( & VAR_539 -> VAR_540 , VAR_541 , ""Pathnamecannotbeconvertedfrom%stocurrentlocale."" , METHOD_73 ( VAR_542 ) ) ; VAR_543 = ( VAR_544 ) ; } if ( ( ( STRUCT_OR_UNION_154 -> VAR_545 ) & VAR_546 ) == VAR_547 ) { STRUCT_OR_UNION_155 -> VAR_548 = 0 ; METHOD_74 ( VAR_549 , 0 ) ; if ( ( VAR_550 = METHOD_75 ( VAR_551 , VAR_552 , VAR_553 ) ) < ( VAR_554 ) ) return VAR_555 ; if ( VAR_556 > VAR_557 ) VAR_558 = VAR_559 ; } if ( STRUCT_OR_UNION_156 -> VAR_560 == 0 ) STRUCT_OR_UNION_157 -> VAR_561 = 1 ; return VAR_562 ; }",445
446,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; TYPE_1 VAR_4 ; TYPE_2 VAR_5 ; STRUCT_OR_UNION_4 = METHOD_1 ( 0 , VAR_6 ) ; if ( ! STRUCT_OR_UNION_5 ) return - VAR_7 ; METHOD_2 ( STRUCT_OR_UNION_6 , VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 , VAR_15 , VAR_16 , 1 ) ; METHOD_3 ( STRUCT_OR_UNION_7 , & VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_4 ( STRUCT_OR_UNION_8 , VAR_20 ) ; if ( VAR_21 ) { METHOD_5 ( STRUCT_OR_UNION_9 ) ;  goto VAR_22 ;  } VAR_23 = METHOD_6 ( VAR_24 , VAR_25 ) ; VAR_26 |= VAR_27 ; METHOD_7 ( VAR_28 , VAR_29 , VAR_30 ) ; VAR_31 : return VAR_32 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 ; TYPE_1 VAR_4 ; TYPE_2 VAR_5 ; STRUCT_OR_UNION_4 = METHOD_1 ( 0 , VAR_6 ) ; if ( ! STRUCT_OR_UNION_5 ) return - VAR_7 ; METHOD_2 ( STRUCT_OR_UNION_6 , VAR_8 -> VAR_9 , VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 , VAR_15 , VAR_16 , 1 ) ; METHOD_3 ( STRUCT_OR_UNION_7 , & VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_4 ( STRUCT_OR_UNION_8 , VAR_20 ) ; if ( VAR_21 ) { METHOD_5 ( STRUCT_OR_UNION_9 ) ; METHOD_8 ( STRUCT_OR_UNION_9 ) ; goto VAR_22 ; } VAR_23 = METHOD_6 ( VAR_24 , VAR_25 ) ; VAR_26 |= VAR_27 ; METHOD_7 ( VAR_28 , VAR_29 , VAR_30 ) ; VAR_31 : return VAR_32 ; }",446
447,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_5 * VAR_3 = STRUCT_OR_UNION_6 -> VAR_4 ; struct STRUCT_OR_UNION_7 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_8 * VAR_7 ; TYPE_3 VAR_8 , VAR_9 ; VAR_10 = - VAR_11 ; if ( VAR_12 & ~ ( VAR_13 | VAR_14 | VAR_15 | VAR_16 ) ) goto VAR_17 ;  VAR_18 -> VAR_19 = 0 ;  VAR_20 = METHOD_2 ( VAR_21 , VAR_22 , VAR_23 & VAR_24 , & VAR_25 ) ; if ( VAR_26 == VAR_27 ) goto VAR_28 ; VAR_29 = VAR_30 -> VAR_31 ; if ( VAR_32 > VAR_33 ) { VAR_34 -> VAR_35 |= VAR_36 ; VAR_37 = VAR_38 ; } METHOD_3 ( VAR_39 ) ; VAR_40 = METHOD_4 ( VAR_41 , 0 , VAR_42 -> VAR_43 , VAR_44 ) ; if ( VAR_45 ) goto VAR_46 ; METHOD_5 ( VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 = ( VAR_51 & VAR_52 ) ? VAR_53 -> VAR_54 : VAR_55 ; if ( VAR_56 -> VAR_57 . VAR_58 != VAR_59 && 3 * METHOD_6 ( & VAR_60 -> VAR_61 ) <= VAR_62 -> VAR_63 ) METHOD_7 ( VAR_64 ) ; VAR_65 : METHOD_8 ( VAR_66 , VAR_67 ) ; VAR_68 : return VAR_69 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_5 * VAR_3 = STRUCT_OR_UNION_6 -> VAR_4 ; struct STRUCT_OR_UNION_7 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_8 * VAR_7 ; TYPE_3 VAR_8 , VAR_9 ; VAR_10 = - VAR_11 ; if ( VAR_12 & ~ ( VAR_13 | VAR_14 | VAR_15 | VAR_16 ) ) goto VAR_17 ; VAR_18 -> VAR_19 = 0 ; VAR_20 = METHOD_2 ( VAR_21 , VAR_22 , VAR_23 & VAR_24 , & VAR_25 ) ; if ( VAR_26 == VAR_27 ) goto VAR_28 ; VAR_29 = VAR_30 -> VAR_31 ; if ( VAR_32 > VAR_33 ) { VAR_34 -> VAR_35 |= VAR_36 ; VAR_37 = VAR_38 ; } METHOD_3 ( VAR_39 ) ; VAR_40 = METHOD_4 ( VAR_41 , 0 , VAR_42 -> VAR_43 , VAR_44 ) ; if ( VAR_45 ) goto VAR_46 ; METHOD_5 ( VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 = ( VAR_51 & VAR_52 ) ? VAR_53 -> VAR_54 : VAR_55 ; if ( VAR_56 -> VAR_57 . VAR_58 != VAR_59 && 3 * METHOD_6 ( & VAR_60 -> VAR_61 ) <= VAR_62 -> VAR_63 ) METHOD_7 ( VAR_64 ) ; VAR_65 : METHOD_8 ( VAR_66 , VAR_67 ) ; VAR_68 : return VAR_69 ; }",447
448,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 * VAR_2 ,  const TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 ( VAR_5 != 00 ) ; TYPE_7 ( VAR_6 != 00 ) ; TYPE_8 ( VAR_7 != 00 ) ; METHOD_1 ( VAR_8 ) ; METHOD_2 ( VAR_9 ) ;  METHOD_3 ( VAR_10 , VAR_11 ,  2 ) ; VAR_12 += 2 ; METHOD_4 ( VAR_13 , 10 , 2 ) ; VAR_14 += 2 ; METHOD_5 ( VAR_15 , VAR_16 -> VAR_17 , 2 ) ; VAR_18 += 2 ; VAR_19 += 4 ; METHOD_6 ( VAR_20 , VAR_21 -> VAR_22 . VAR_23 . VAR_24 , 1 ) ; ++ VAR_25 ; METHOD_7 ( VAR_26 , VAR_27 -> VAR_28 . VAR_29 [ VAR_30 -> VAR_31 ] . VAR_32 , 1 ) ; ++ VAR_33 ; TYPE_9 TYPE_10 TYPE_11 ( 0 && ""TODO"" ) ; * VAR_34 = 12 ; return VAR_35 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , const TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 ( VAR_5 != 00 ) ; TYPE_7 ( VAR_6 != 00 ) ; TYPE_8 ( VAR_7 != 00 ) ; METHOD_1 ( VAR_8 ) ; METHOD_2 ( VAR_9 ) ; if ( VAR_36 < 12 ) { METHOD_8 ( VAR_9 , VAR_37 , ""NotenoughbytesinoutputbuffertowriteSOTmarker\\n"" ) ; return VAR_38 ; } METHOD_3 ( VAR_10 , VAR_11 , 2 ) ; VAR_12 += 2 ; METHOD_4 ( VAR_13 , 10 , 2 ) ; VAR_14 += 2 ; METHOD_5 ( VAR_15 , VAR_16 -> VAR_17 , 2 ) ; VAR_18 += 2 ; VAR_19 += 4 ; METHOD_6 ( VAR_20 , VAR_21 -> VAR_22 . VAR_23 . VAR_24 , 1 ) ; ++ VAR_25 ; METHOD_7 ( VAR_26 , VAR_27 -> VAR_28 . VAR_29 [ VAR_30 -> VAR_31 ] . VAR_32 , 1 ) ; ++ VAR_33 ; TYPE_9 TYPE_10 TYPE_11 ( 0 && ""TODO"" ) ; * VAR_34 = 12 ; return VAR_35 ; }",448
449," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 , VAR_5 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { METHOD_1 ( VAR_2 ) ; METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_4 , VAR_5 ) ; }",449
450,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { const unsigned TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 ; unsigned TYPE_7 VAR_7 , VAR_8 , VAR_9 ; if ! METHOD_1 ( VAR_10 ) && VAR_11 unsigned TYPE_8 VAR_12 , VAR_13 ; unsigned TYPE_9 VAR_14 = ( unsigned TYPE_10 ) VAR_15 ; TYPE_11 * VAR_16 = & VAR_17 -> VAR_18 . VAR_19 [ 0 ] ; TYPE_12 VAR_20 ; if ( VAR_21 < 0 ) { METHOD_2 ( VAR_22 , VAR_23 ) ; return - 1 ; } VAR_24 -> VAR_25 = VAR_26 ; VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; if ( ( unsigned TYPE_13 ) VAR_31 < VAR_32 -> VAR_33 . VAR_34 ) { METHOD_3 ( VAR_35 , VAR_36 ) ; return - 1 ; } VAR_37 -> VAR_38 . VAR_39 = 0 ; if ( METHOD_4 ( VAR_40 ) && ! METHOD_5 ( VAR_41 ) ) { VAR_42 = VAR_43 -> METHOD_6 ( VAR_44 ) ; if ( VAR_45 < 0 ) return ( VAR_46 ) ; if ( VAR_47 == 0 ) { METHOD_7 ( VAR_48 , VAR_49 ) ; return - 1 ; } } if ( VAR_50 -> VAR_51 != 0 ) { VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , & VAR_55 [ VAR_56 ] , VAR_57 -> VAR_58 . VAR_59 ) ; if ( VAR_60 <= 0 ) { VAR_61 -> VAR_62 . VAR_63 = VAR_64 ; return VAR_65 ; } VAR_66 += VAR_67 ; } if ! METHOD_9 ( VAR_68 ) && VAR_69 if ( VAR_70 == VAR_71 && VAR_72 >= 4 * ( VAR_73 = VAR_74 -> VAR_75 ) && VAR_76 -> VAR_77 == VAR_78 && VAR_79 -> VAR_80 == VAR_81 &&  ! METHOD_10 ( VAR_82 ) && METHOD_11 ( VAR_83 ) &&  METHOD_12 ( METHOD_13 ( VAR_84 -> VAR_85 ) ) & VAR_86 ) { unsigned TYPE_14 VAR_87 [ 13 ] ; TYPE_15 VAR_88 ; TYPE_16 VAR_89 ; if ( ( VAR_90 & 0xfff ) == 0 ) VAR_91 -= 512 ; if ( VAR_92 == 0 || VAR_93 -> VAR_94 == VAR_95 ) { METHOD_14 ( VAR_96 ) ; VAR_97 = METHOD_15 ( VAR_98 -> VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; if ( VAR_103 >= 8 * VAR_104 ) VAR_105 *= 8 ; else VAR_106 *= 4 ; if ( ! METHOD_16 ( VAR_107 , 1 , VAR_108 ) ) { METHOD_17 ( VAR_109 , VAR_110 ) ; return - 1 ; } } else if ( VAR_111 == VAR_112 ) { METHOD_18 ( VAR_113 ) ; return VAR_114 ; } VAR_115 = ( VAR_116 - VAR_117 ) ; for ( ; ; ) { if ( VAR_118 < 4 * VAR_119 ) { METHOD_19 ( VAR_120 ) ; break ; } if ( VAR_121 -> VAR_122 -> VAR_123 ) { VAR_124 = VAR_125 -> VAR_126 -> METHOD_20 ( VAR_127 ) ; if ( VAR_128 <= 0 ) { VAR_129 -> VAR_130 . VAR_131 = VAR_132 ; return VAR_133 ; } } if ( VAR_134 >= 8 * VAR_135 ) VAR_136 = VAR_137 * ( VAR_138 . VAR_139 = 8 ) ; else VAR_140 = VAR_141 * ( VAR_142 . VAR_143 = 4 ) ; METHOD_21 ( VAR_144 , VAR_145 -> VAR_146 . VAR_147 , 8 ) ; VAR_148 [ 8 ] = VAR_149 ; VAR_150 [ 9 ] = ( unsigned TYPE_17 ) ( VAR_151 -> VAR_152 >> 8 ) ; VAR_153 [ 10 ] = ( unsigned TYPE_18 ) ( VAR_154 -> VAR_155 ) ; VAR_156 [ 11 ] = 0 ; VAR_157 [ 12 ] = 0 ; VAR_158 . VAR_159 = VAR_160 ; VAR_161 . VAR_162 = VAR_163 ; VAR_164 . VAR_165 = VAR_166 ; VAR_167 = METHOD_22 ( VAR_168 -> VAR_169 , VAR_170 , sizeof ( VAR_171 ) , & VAR_172 ) ; if ( VAR_173 <= 0 || VAR_174 > ( TYPE_19 ) VAR_175 -> VAR_176 ) { METHOD_23 ( VAR_177 ) ; break ; } VAR_178 . VAR_179 = VAR_180 -> VAR_181 ; VAR_182 . VAR_183 = & VAR_184 [ VAR_185 ] ; VAR_186 . VAR_187 = VAR_188 ; if ( METHOD_24 ( VAR_189 -> VAR_190 , VAR_191 , sizeof ( VAR_192 ) , & VAR_193 ) <= 0 ) return - 1 ; VAR_194 -> VAR_195 . VAR_196 [ 7 ] += VAR_197 . VAR_198 ; if ( VAR_199 -> VAR_200 . VAR_201 [ 7 ] < VAR_202 . VAR_203 ) { TYPE_20 VAR_204 = 6 ; while ( VAR_205 >= 0 && ( ++ VAR_206 -> VAR_207 . VAR_208 [ VAR_209 -- ] ) == 0 ) ; } VAR_210 -> VAR_211 = 0 ; VAR_212 -> VAR_213 = VAR_214 ; VAR_215 -> VAR_216 . VAR_217 = VAR_218 ; VAR_219 -> VAR_220 . VAR_221 = & VAR_222 [ VAR_223 ] ; VAR_224 -> VAR_225 . VAR_226 = VAR_227 ; VAR_228 -> VAR_229 . VAR_230 = VAR_231 ; VAR_232 = METHOD_25 ( VAR_233 , VAR_234 , & VAR_235 [ VAR_236 ] , VAR_237 ) ; if ( VAR_238 <= 0 ) { if ( VAR_239 < 0 && ( ! VAR_240 -> VAR_241 || ! METHOD_26 ( VAR_242 -> VAR_243 ) ) ) { METHOD_27 ( VAR_244 ) ; } VAR_245 -> VAR_246 . VAR_247 = VAR_248 ; return VAR_249 ; } if ( VAR_250 == ( TYPE_21 ) VAR_251 ) { METHOD_28 ( VAR_252 ) ; return VAR_253 + VAR_254 ; } VAR_255 -= VAR_256 ; VAR_257 += VAR_258 ; } } else if ( VAR_259 == VAR_260 ) { if ( VAR_261 -> VAR_262 & VAR_263 && ! METHOD_29 ( VAR_264 ) ) METHOD_30 ( VAR_265 ) ; return VAR_266 ; } VAR_267 = ( VAR_268 - VAR_269 ) ; VAR_270 = VAR_271 -> VAR_272 ; VAR_273 = VAR_274 -> VAR_275 ; if ( VAR_276 > VAR_277 ) { METHOD_31 ( VAR_278 , VAR_279 ) ; return - 1 ; } if ( VAR_280 == 0 || VAR_281 -> VAR_282 == VAR_283 || ! ( METHOD_32 ( METHOD_33 ( VAR_284 -> VAR_285 ) ) & VAR_286 ) || ! METHOD_34 ( VAR_287 ) ) VAR_288 = 1 ; if ( VAR_289 -> VAR_290 == 0 || VAR_291 > VAR_292 -> VAR_293 || VAR_294 == 0 ) { METHOD_35 ( VAR_295 , VAR_296 ) ; return - 1 ; } for ( ; ; ) { unsigned TYPE_22 VAR_297 [ VAR_298 ] , VAR_299 , VAR_300 ; unsigned TYPE_23 VAR_301 , VAR_302 ; if ( VAR_303 == 0 ) VAR_304 = 1 ; else VAR_305 = ( ( VAR_306 - 1 ) / VAR_307 ) + 1 ; if ( VAR_308 > VAR_309 ) VAR_310 = VAR_311 ; if ( VAR_312 / VAR_313 >= VAR_314 -> VAR_315 ) { for ( VAR_316 = 0 ; VAR_317 < VAR_318 ; VAR_319 ++ ) { VAR_320 [ VAR_321 ] = VAR_322 -> VAR_323 ; } } else { VAR_324 = VAR_325 / VAR_326 ; VAR_327 = VAR_328 % VAR_329 ; for ( VAR_330 = 0 ; VAR_331 < VAR_332 ; VAR_333 ++ ) { VAR_334 [ VAR_335 ] = VAR_336 ; if ( VAR_337 < VAR_338 ) VAR_339 [ VAR_340 ] ++ ; } } VAR_341 = METHOD_36 ( VAR_342 , VAR_343 , & ( VAR_344 [ VAR_345 ] ) , VAR_346 , VAR_347 , 0 ) ; if ( VAR_348 <= 0 ) { VAR_349 -> VAR_350 . VAR_351 = VAR_352 ; return VAR_353 ; } if ( ( VAR_354 == ( TYPE_24 ) VAR_355 ) || ( VAR_356 == VAR_357 && ( VAR_358 -> VAR_359 & VAR_360 ) ) ) { VAR_361 -> VAR_362 -> VAR_363 = 0 ; if ( ( VAR_364 == ( TYPE_25 ) VAR_365 ) && VAR_366 -> VAR_367 & VAR_368 && ! METHOD_37 ( VAR_369 ) ) METHOD_38 ( VAR_370 ) ; return VAR_371 + VAR_372 ; } VAR_373 -= VAR_374 ; VAR_375 += VAR_376 ; } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { const unsigned TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 ; unsigned TYPE_7 VAR_7 , VAR_8 , VAR_9 ; if ! METHOD_1 ( VAR_10 ) && VAR_11 unsigned TYPE_8 VAR_12 , VAR_13 ; unsigned TYPE_9 VAR_14 = ( unsigned TYPE_10 ) VAR_15 ; TYPE_11 * VAR_16 = & VAR_17 -> VAR_18 . VAR_19 [ 0 ] ; TYPE_12 VAR_20 ; if ( VAR_21 < 0 ) { METHOD_2 ( VAR_22 , VAR_23 ) ; return - 1 ; } VAR_24 -> VAR_25 = VAR_26 ; VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; if ( ( unsigned TYPE_13 ) VAR_31 < VAR_32 -> VAR_33 . VAR_34 ) { METHOD_3 ( VAR_35 , VAR_36 ) ; return - 1 ; } VAR_37 -> VAR_38 . VAR_39 = 0 ; if ( METHOD_4 ( VAR_40 ) && ! METHOD_5 ( VAR_41 ) ) { VAR_42 = VAR_43 -> METHOD_6 ( VAR_44 ) ; if ( VAR_45 < 0 ) return ( VAR_46 ) ; if ( VAR_47 == 0 ) { METHOD_7 ( VAR_48 , VAR_49 ) ; return - 1 ; } } if ( VAR_50 -> VAR_51 != 0 ) { VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , & VAR_55 [ VAR_56 ] , VAR_57 -> VAR_58 . VAR_59 ) ; if ( VAR_60 <= 0 ) { VAR_61 -> VAR_62 . VAR_63 = VAR_64 ; return VAR_65 ; } VAR_66 += VAR_67 ; } if ! METHOD_9 ( VAR_68 ) && VAR_69 if ( VAR_70 == VAR_71 && VAR_72 >= 4 * ( VAR_73 = VAR_74 -> VAR_75 ) && VAR_76 -> VAR_77 == VAR_78 && VAR_79 -> VAR_80 == VAR_81 && ! METHOD_10 ( VAR_82 ) && METHOD_11 ( VAR_83 ) && METHOD_12 ( METHOD_13 ( VAR_84 -> VAR_85 ) ) & VAR_86 ) { unsigned TYPE_14 VAR_87 [ 13 ] ; TYPE_15 VAR_88 ; TYPE_16 VAR_89 ; if ( ( VAR_90 & 0xfff ) == 0 ) VAR_91 -= 512 ; if ( VAR_92 == 0 || VAR_93 -> VAR_94 == VAR_95 ) { METHOD_14 ( VAR_96 ) ; VAR_97 = METHOD_15 ( VAR_98 -> VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; if ( VAR_103 >= 8 * VAR_104 ) VAR_105 *= 8 ; else VAR_106 *= 4 ; if ( ! METHOD_16 ( VAR_107 , 1 , VAR_108 ) ) { METHOD_17 ( VAR_109 , VAR_110 ) ; return - 1 ; } } else if ( VAR_111 == VAR_112 ) { METHOD_18 ( VAR_113 ) ; return VAR_114 ; } VAR_115 = ( VAR_116 - VAR_117 ) ; for ( ; ; ) { if ( VAR_118 < 4 * VAR_119 ) { METHOD_19 ( VAR_120 ) ; break ; } if ( VAR_121 -> VAR_122 -> VAR_123 ) { VAR_124 = VAR_125 -> VAR_126 -> METHOD_20 ( VAR_127 ) ; if ( VAR_128 <= 0 ) { VAR_129 -> VAR_130 . VAR_131 = VAR_132 ; return VAR_133 ; } } if ( VAR_134 >= 8 * VAR_135 ) VAR_136 = VAR_137 * ( VAR_138 . VAR_139 = 8 ) ; else VAR_140 = VAR_141 * ( VAR_142 . VAR_143 = 4 ) ; METHOD_21 ( VAR_144 , VAR_145 -> VAR_146 . VAR_147 , 8 ) ; VAR_148 [ 8 ] = VAR_149 ; VAR_150 [ 9 ] = ( unsigned TYPE_17 ) ( VAR_151 -> VAR_152 >> 8 ) ; VAR_153 [ 10 ] = ( unsigned TYPE_18 ) ( VAR_154 -> VAR_155 ) ; VAR_156 [ 11 ] = 0 ; VAR_157 [ 12 ] = 0 ; VAR_158 . VAR_159 = VAR_160 ; VAR_161 . VAR_162 = VAR_163 ; VAR_164 . VAR_165 = VAR_166 ; VAR_167 = METHOD_22 ( VAR_168 -> VAR_169 , VAR_170 , sizeof ( VAR_171 ) , & VAR_172 ) ; if ( VAR_173 <= 0 || VAR_174 > ( TYPE_19 ) VAR_175 -> VAR_176 ) { METHOD_23 ( VAR_177 ) ; break ; } VAR_178 . VAR_179 = VAR_180 -> VAR_181 ; VAR_182 . VAR_183 = & VAR_184 [ VAR_185 ] ; VAR_186 . VAR_187 = VAR_188 ; if ( METHOD_24 ( VAR_189 -> VAR_190 , VAR_191 , sizeof ( VAR_192 ) , & VAR_193 ) <= 0 ) return - 1 ; VAR_194 -> VAR_195 . VAR_196 [ 7 ] += VAR_197 . VAR_198 ; if ( VAR_199 -> VAR_200 . VAR_201 [ 7 ] < VAR_202 . VAR_203 ) { TYPE_20 VAR_204 = 6 ; while ( VAR_205 >= 0 && ( ++ VAR_206 -> VAR_207 . VAR_208 [ VAR_209 -- ] ) == 0 ) ; } VAR_210 -> VAR_211 = 0 ; VAR_212 -> VAR_213 = VAR_214 ; VAR_215 -> VAR_216 . VAR_217 = VAR_218 ; VAR_219 -> VAR_220 . VAR_221 = & VAR_222 [ VAR_223 ] ; VAR_224 -> VAR_225 . VAR_226 = VAR_227 ; VAR_228 -> VAR_229 . VAR_230 = VAR_231 ; VAR_232 = METHOD_25 ( VAR_233 , VAR_234 , & VAR_235 [ VAR_236 ] , VAR_237 ) ; if ( VAR_238 <= 0 ) { if ( VAR_239 < 0 && ( ! VAR_240 -> VAR_241 || ! METHOD_26 ( VAR_242 -> VAR_243 ) ) ) { METHOD_27 ( VAR_244 ) ; } VAR_245 -> VAR_246 . VAR_247 = VAR_248 ; return VAR_249 ; } if ( VAR_250 == ( TYPE_21 ) VAR_251 ) { METHOD_28 ( VAR_252 ) ; return VAR_253 + VAR_254 ; } VAR_255 -= VAR_256 ; VAR_257 += VAR_258 ; } } else if ( VAR_259 == VAR_260 ) { if ( VAR_261 -> VAR_262 & VAR_263 && ! METHOD_29 ( VAR_264 ) ) METHOD_30 ( VAR_265 ) ; return VAR_266 ; } VAR_267 = ( VAR_268 - VAR_269 ) ; VAR_270 = VAR_271 -> VAR_272 ; VAR_273 = VAR_274 -> VAR_275 ; if ( VAR_276 > VAR_277 ) { METHOD_31 ( VAR_278 , VAR_279 ) ; return - 1 ; } if ( VAR_280 == 0 || VAR_281 -> VAR_282 == VAR_283 || ! ( METHOD_32 ( METHOD_33 ( VAR_284 -> VAR_285 ) ) & VAR_286 ) || ! METHOD_34 ( VAR_287 ) ) VAR_288 = 1 ; if ( VAR_289 -> VAR_290 == 0 || VAR_291 > VAR_292 -> VAR_293 || VAR_294 == 0 ) { METHOD_35 ( VAR_295 , VAR_296 ) ; return - 1 ; } for ( ; ; ) { unsigned TYPE_22 VAR_297 [ VAR_298 ] , VAR_299 , VAR_300 ; unsigned TYPE_23 VAR_301 , VAR_302 ; if ( VAR_303 == 0 ) VAR_304 = 1 ; else VAR_305 = ( ( VAR_306 - 1 ) / VAR_307 ) + 1 ; if ( VAR_308 > VAR_309 ) VAR_310 = VAR_311 ; if ( VAR_312 / VAR_313 >= VAR_314 -> VAR_315 ) { for ( VAR_316 = 0 ; VAR_317 < VAR_318 ; VAR_319 ++ ) { VAR_320 [ VAR_321 ] = VAR_322 -> VAR_323 ; } } else { VAR_324 = VAR_325 / VAR_326 ; VAR_327 = VAR_328 % VAR_329 ; for ( VAR_330 = 0 ; VAR_331 < VAR_332 ; VAR_333 ++ ) { VAR_334 [ VAR_335 ] = VAR_336 ; if ( VAR_337 < VAR_338 ) VAR_339 [ VAR_340 ] ++ ; } } VAR_341 = METHOD_36 ( VAR_342 , VAR_343 , & ( VAR_344 [ VAR_345 ] ) , VAR_346 , VAR_347 , 0 ) ; if ( VAR_348 <= 0 ) { VAR_349 -> VAR_350 . VAR_351 = VAR_352 ; return VAR_353 ; } if ( ( VAR_354 == ( TYPE_24 ) VAR_355 ) || ( VAR_356 == VAR_357 && ( VAR_358 -> VAR_359 & VAR_360 ) ) ) { VAR_361 -> VAR_362 -> VAR_363 = 0 ; if ( ( VAR_364 == ( TYPE_25 ) VAR_365 ) && VAR_366 -> VAR_367 & VAR_368 && ! METHOD_37 ( VAR_369 ) ) METHOD_38 ( VAR_370 ) ; return VAR_371 + VAR_372 ; } VAR_373 -= VAR_374 ; VAR_375 += VAR_376 ; } }",450
451,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = METHOD_1 ( VAR_10 ) ; unsigned TYPE_4 VAR_11 , VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 , * VAR_14 , * VAR_15 ; TYPE_5 VAR_16 = 0 ;  TYPE_6 VAR_17 ;  VAR_18 -> VAR_19 = 0 ; if ( ( VAR_20 -> VAR_21 == VAR_22 ) && METHOD_2 ( & VAR_23 -> VAR_24 ) && METHOD_3 ( & VAR_25 -> VAR_26 ) && METHOD_4 ( & VAR_27 -> VAR_28 . VAR_29 ) ) return 0 ; if ( VAR_30 & ( VAR_31 ) ) return - VAR_32 ; VAR_33 = METHOD_5 ( VAR_34 , VAR_35 , VAR_36 , & VAR_37 ) ; if ( ! VAR_38 ) { if ( VAR_39 -> VAR_40 & VAR_41 ) return 0 ; return VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 ) -> VAR_45 ; VAR_46 = VAR_47 -> VAR_48 - VAR_49 ; VAR_50 = min_t ( unsigned TYPE_7 , VAR_51 , VAR_52 ) ; if ( ! VAR_53 ) VAR_54 -> VAR_55 = VAR_56 -> VAR_57 | VAR_58 ; VAR_59 = VAR_60 ; if ( METHOD_7 ( VAR_61 , VAR_62 , VAR_63 -> VAR_64 , VAR_65 ) ) { if ( ! ( VAR_66 & VAR_67 ) ) METHOD_8 ( & VAR_68 -> VAR_69 , VAR_70 ) ; return - VAR_71 ; } if ( VAR_72 -> VAR_73 == VAR_74 ) { if ( VAR_75 < VAR_76 ) VAR_77 -> VAR_78 |= VAR_79 ; VAR_80 -> VAR_81 |= VAR_82 ; } VAR_83 = METHOD_9 ( VAR_84 , VAR_85 , VAR_86 , sizeof ( METHOD_10 ( VAR_87 ) -> VAR_88 ) , ( TYPE_8 * ) & METHOD_11 ( VAR_89 ) -> VAR_90 ) ; if ( VAR_91 ) { if ( ! ( VAR_92 & VAR_93 ) ) METHOD_12 ( & VAR_94 -> VAR_95 , VAR_96 ) ; return VAR_97 ; } if ( ! ( VAR_98 & VAR_99 ) ) { if ( VAR_100 -> VAR_101 == VAR_102 ) { if ( VAR_103 < VAR_104 ) { METHOD_13 ( VAR_105 ) -> VAR_106 = VAR_107 + VAR_108 ; goto VAR_109 ; } } METHOD_14 ( VAR_110 ) ; if ( VAR_111 -> VAR_112 == VAR_113 ) { METHOD_15 ( & VAR_114 -> VAR_115 ) ; if ( METHOD_16 ( & VAR_116 -> VAR_117 ) > VAR_118 -> VAR_119 ) { METHOD_17 ( 1 ) ; METHOD_18 ( VAR_120 ) ; return - VAR_121 ; } } METHOD_19 ( & VAR_122 -> VAR_123 . VAR_124 ) ; VAR_125 = METHOD_20 ( & VAR_126 -> VAR_127 ) ; while ( VAR_128 ) { METHOD_21 ( VAR_129 ) -> VAR_130 = 0 ; if ( METHOD_22 ( VAR_131 , VAR_132 ) ) { METHOD_23 ( & VAR_133 -> VAR_134 , VAR_135 ) ; break ; } else { VAR_136 = METHOD_24 ( & VAR_137 -> VAR_138 ) ; } } if ( METHOD_25 ( & VAR_139 -> VAR_140 ) ) { if ( ! METHOD_26 ( & VAR_141 -> VAR_142 . VAR_143 ) ) METHOD_27 ( VAR_144 ) ; if ( METHOD_28 ( & VAR_145 -> VAR_146 ) >= VAR_147 -> VAR_148 / 2 ) { VAR_149 = METHOD_29 ( VAR_150 , VAR_151 ) ; if ( VAR_152 ) { VAR_153 -> VAR_154 = VAR_155 ; VAR_156 -> METHOD_30 ( VAR_157 ) ; } } } METHOD_31 ( & VAR_158 -> VAR_159 . VAR_160 ) ; } VAR_161 : if ( VAR_162 -> VAR_163 == VAR_164 && ( VAR_165 & VAR_166 ) ) VAR_167 = VAR_168 ; return VAR_169 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = METHOD_1 ( VAR_10 ) ; unsigned TYPE_4 VAR_11 , VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 , * VAR_14 , * VAR_15 ; TYPE_5 VAR_16 = 0 ; TYPE_6 VAR_17 ; VAR_18 -> VAR_19 = 0 ; if ( ( VAR_20 -> VAR_21 == VAR_22 ) && METHOD_2 ( & VAR_23 -> VAR_24 ) && METHOD_3 ( & VAR_25 -> VAR_26 ) && METHOD_4 ( & VAR_27 -> VAR_28 . VAR_29 ) ) return 0 ; if ( VAR_30 & ( VAR_31 ) ) return - VAR_32 ; VAR_33 = METHOD_5 ( VAR_34 , VAR_35 , VAR_36 , & VAR_37 ) ; if ( ! VAR_38 ) { if ( VAR_39 -> VAR_40 & VAR_41 ) return 0 ; return VAR_42 ; } VAR_43 = METHOD_6 ( VAR_44 ) -> VAR_45 ; VAR_46 = VAR_47 -> VAR_48 - VAR_49 ; VAR_50 = min_t ( unsigned TYPE_7 , VAR_51 , VAR_52 ) ; if ( ! VAR_53 ) VAR_54 -> VAR_55 = VAR_56 -> VAR_57 | VAR_58 ; VAR_59 = VAR_60 ; if ( METHOD_7 ( VAR_61 , VAR_62 , VAR_63 -> VAR_64 , VAR_65 ) ) { if ( ! ( VAR_66 & VAR_67 ) ) METHOD_8 ( & VAR_68 -> VAR_69 , VAR_70 ) ; return - VAR_71 ; } if ( VAR_72 -> VAR_73 == VAR_74 ) { if ( VAR_75 < VAR_76 ) VAR_77 -> VAR_78 |= VAR_79 ; VAR_80 -> VAR_81 |= VAR_82 ; } VAR_83 = METHOD_9 ( VAR_84 , VAR_85 , VAR_86 , sizeof ( METHOD_10 ( VAR_87 ) -> VAR_88 ) , ( TYPE_8 * ) & METHOD_11 ( VAR_89 ) -> VAR_90 ) ; if ( VAR_91 ) { if ( ! ( VAR_92 & VAR_93 ) ) METHOD_12 ( & VAR_94 -> VAR_95 , VAR_96 ) ; return VAR_97 ; } if ( ! ( VAR_98 & VAR_99 ) ) { if ( VAR_100 -> VAR_101 == VAR_102 ) { if ( VAR_103 < VAR_104 ) { METHOD_13 ( VAR_105 ) -> VAR_106 = VAR_107 + VAR_108 ; goto VAR_109 ; } } METHOD_14 ( VAR_110 ) ; if ( VAR_111 -> VAR_112 == VAR_113 ) { METHOD_15 ( & VAR_114 -> VAR_115 ) ; if ( METHOD_16 ( & VAR_116 -> VAR_117 ) > VAR_118 -> VAR_119 ) { METHOD_17 ( 1 ) ; METHOD_18 ( VAR_120 ) ; return - VAR_121 ; } } METHOD_19 ( & VAR_122 -> VAR_123 . VAR_124 ) ; VAR_125 = METHOD_20 ( & VAR_126 -> VAR_127 ) ; while ( VAR_128 ) { METHOD_21 ( VAR_129 ) -> VAR_130 = 0 ; if ( METHOD_22 ( VAR_131 , VAR_132 ) ) { METHOD_23 ( & VAR_133 -> VAR_134 , VAR_135 ) ; break ; } else { VAR_136 = METHOD_24 ( & VAR_137 -> VAR_138 ) ; } } if ( METHOD_25 ( & VAR_139 -> VAR_140 ) ) { if ( ! METHOD_26 ( & VAR_141 -> VAR_142 . VAR_143 ) ) METHOD_27 ( VAR_144 ) ; if ( METHOD_28 ( & VAR_145 -> VAR_146 ) >= VAR_147 -> VAR_148 / 2 ) { VAR_149 = METHOD_29 ( VAR_150 , VAR_151 ) ; if ( VAR_152 ) { VAR_153 -> VAR_154 = VAR_155 ; VAR_156 -> METHOD_30 ( VAR_157 ) ; } } } METHOD_31 ( & VAR_158 -> VAR_159 . VAR_160 ) ; } VAR_161 : if ( VAR_162 -> VAR_163 == VAR_164 && ( VAR_165 & VAR_166 ) ) VAR_167 = VAR_168 ; return VAR_169 ; }",451
452,TYPE_0 METHOD_0 ( TYPE_1 VAR_0 )  {  if ( VAR_1 -> VAR_2 == 0 ) { METHOD_1 ( VAR_3 ) ; VAR_4 -> VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; METHOD_2 ( VAR_9 ) ; } else { TYPE_2 VAR_10 = VAR_11 -> VAR_12 ; VAR_13 -> VAR_14 = VAR_15 -> VAR_16 -> VAR_17 ; METHOD_3 ( VAR_18 ) ; } if METHOD_4 ( VAR_19 ) || METHOD_5 ( VAR_20 ) if ( ! VAR_21 -> VAR_22 ) while ( VAR_23 -> VAR_24 && VAR_25 -> VAR_26 -> VAR_27 < 0 ) VAR_28 -> VAR_29 = VAR_30 -> VAR_31 -> VAR_32 ; if ( VAR_33 -> VAR_34 ) METHOD_6 ( VAR_35 -> VAR_36 ) ; return VAR_37 -> VAR_38 ; },TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { if ( VAR_1 -> VAR_2 == 0 ) { METHOD_1 ( VAR_3 ) ; VAR_4 -> VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; METHOD_2 ( VAR_9 ) ; } else { TYPE_2 VAR_10 = VAR_11 -> VAR_12 ; VAR_13 -> VAR_14 = VAR_15 -> VAR_16 -> VAR_17 ; METHOD_3 ( VAR_18 ) ; } if METHOD_4 ( VAR_19 ) || METHOD_5 ( VAR_20 ) if ( ! VAR_21 -> VAR_22 ) while ( VAR_23 -> VAR_24 && VAR_25 -> VAR_26 -> VAR_27 < 0 ) VAR_28 -> VAR_29 = VAR_30 -> VAR_31 -> VAR_32 ; if ( VAR_33 -> VAR_34 ) METHOD_6 ( VAR_35 -> VAR_36 ) ; return VAR_37 -> VAR_38 ; },452
453,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; const TYPE_6 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; TYPE_9 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_10 VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_11 VAR_28 [ 3 ] ; TYPE_12 * VAR_29 ; TYPE_13 VAR_30 ; if ( VAR_31 < VAR_32 ) return VAR_33 ; METHOD_1 ( & VAR_34 , VAR_35 , VAR_36 ) ; VAR_37 = METHOD_2 ( & VAR_38 ) ; VAR_39 = METHOD_3 ( & VAR_40 ) ; if ( VAR_41 != VAR_42 ) { METHOD_4 ( VAR_43 , VAR_44 , ""unsupportedversion\\n"" ) ; return VAR_45 ; } if ( VAR_46 < VAR_47 || VAR_48 < VAR_49 ) { METHOD_5 ( VAR_50 , VAR_51 , ""invalidheadersize\\n"" ) ; return VAR_52 ; } VAR_53 = METHOD_6 ( & VAR_54 ) ; VAR_55 = METHOD_7 ( & VAR_56 ) ; VAR_57 -> VAR_58 = METHOD_8 ( & VAR_59 ) ; VAR_60 -> VAR_61 = METHOD_9 ( & VAR_62 ) ; VAR_63 = METHOD_10 ( & VAR_64 ) ; VAR_65 = METHOD_11 ( & VAR_66 ) ; VAR_67 = METHOD_12 ( & VAR_68 ) ; VAR_69 = METHOD_13 ( & VAR_70 ) ; VAR_71 = METHOD_14 ( & VAR_72 ) ; VAR_73 = METHOD_15 ( & VAR_74 ) ; VAR_75 = METHOD_16 ( & VAR_76 ) ; VAR_77 = METHOD_17 ( & VAR_78 ) ; VAR_79 [ 0 ] = METHOD_18 ( & VAR_80 ) ; VAR_81 [ 1 ] = METHOD_19 ( & VAR_82 ) ; VAR_83 [ 2 ] = METHOD_20 ( & VAR_84 ) ; METHOD_21 ( & VAR_85 , 8 ) ; VAR_86 = METHOD_22 ( & VAR_87 ) ; METHOD_23 ( & VAR_88 , VAR_89 - ( VAR_90 - 20 ) ) ; METHOD_24 ( VAR_91 , VAR_92 , ""pixformat%"" VAR_93 "",pixdepth%"" VAR_94 "",bunit%"" VAR_95 "",bitorder%"" VAR_96 "",bpad%"" VAR_97 ""\\n"" , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; METHOD_25 ( VAR_103 , VAR_104 , ""vclass%"" VAR_105 "",ncolors%"" VAR_106 "",bpp%"" VAR_107 "",be%"" VAR_108 "",lsize%"" VAR_109 "",xoffset%"" VAR_110 ""\\n"" , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; METHOD_26 ( VAR_117 , VAR_118 , ""red%0"" PRIx32 "",green%0"" PRIx32 "",blue%0"" PRIx32 ""\\n"" , VAR_119 [ 0 ] , VAR_120 [ 1 ] , VAR_121 [ 2 ] ) ; if ( VAR_122 > VAR_123 ) { METHOD_27 ( VAR_124 , VAR_125 , ""invalidpixmapformat\\n"" ) ; return VAR_126 ; } if ( VAR_127 == 0 || VAR_128 > 32 ) { METHOD_28 ( VAR_129 , VAR_130 , ""invalidpixmapdepth\\n"" ) ; return VAR_131 ; } if ( VAR_132 ) { avpriv_request_sample ( VAR_133 , ""xoffset%"" VAR_134 """" , VAR_135 ) ; return VAR_136 ; } if ( VAR_137 > 1 ) { METHOD_29 ( VAR_138 , VAR_139 , ""invalidbyteorder\\n"" ) ; return VAR_140 ; } if ( VAR_141 > 1 ) { METHOD_30 ( VAR_142 , VAR_143 , ""invalidbitmapbitorder\\n"" ) ; return VAR_144 ; } if ( VAR_145 != 8 && VAR_146 != 16 && VAR_147 != 32 ) { METHOD_31 ( VAR_148 , VAR_149 , ""invalidbitmapunit\\n"" ) ; return VAR_150 ; } if ( VAR_151 != 8 && VAR_152 != 16 && VAR_153 != 32 ) { METHOD_32 ( VAR_154 , VAR_155 , ""invalidbitmapscan-linepad\\n"" ) ; return VAR_156 ; } if ( VAR_157 == 0 || VAR_158 > 32 ) { METHOD_33 ( VAR_159 , VAR_160 , ""invalidbitsperpixel\\n"" ) ; return VAR_161 ; } if ( VAR_162 > 256 ) { METHOD_34 ( VAR_163 , VAR_164 , ""invalidnumberofentriesincolormap\\n"" ) ; return VAR_165 ; } if ( ( VAR_166 = METHOD_35 ( VAR_167 -> VAR_168 , VAR_169 -> VAR_170 , 0 , VAR_171 ) ) < 0 ) return VAR_172 ; VAR_173 = METHOD_36 ( VAR_174 -> VAR_175 * VAR_176 , VAR_177 ) / 8 ; if ( VAR_178 < VAR_179 ) { METHOD_37 ( VAR_180 , VAR_181 , ""invalidbytesperscan-line\\n"" ) ; return VAR_182 ; } if ( METHOD_38 ( & VAR_183 ) < VAR_184 * VAR_185 + ( TYPE_14 ) VAR_186 -> VAR_187 * VAR_188 ) { METHOD_39 ( VAR_189 , VAR_190 , ""inputbuffertoosmall\\n"" ) ; return VAR_191 ; } if ( VAR_192 != VAR_193 ) { avpriv_report_missing_feature ( VAR_194 , ""Pixmapformat%"" VAR_195 , VAR_196 ) ; return VAR_197 ; } VAR_198 -> VAR_199 = VAR_200 ; switch ( VAR_201 ) { case VAR_202 : case VAR_203 : if ( VAR_204 != 1 && VAR_205 != 8 ) return VAR_206 ;  if ( VAR_207 == 1 ) {  VAR_208 -> VAR_209 = VAR_210 ;  } else if ( VAR_211 == 8 ) {  VAR_212 -> VAR_213 = VAR_214 ; } break ; case VAR_215 : case VAR_216 : if ( VAR_217 == 8 ) VAR_218 -> VAR_219 = VAR_220 ; break ; case VAR_221 : case VAR_222 : if ( VAR_223 != 16 && VAR_224 != 24 && VAR_225 != 32 ) return VAR_226 ; if ( VAR_227 == 16 && VAR_228 == 15 ) { if ( VAR_229 [ 0 ] == 0x7C00 && VAR_230 [ 1 ] == 0x3E0 && VAR_231 [ 2 ] == 0x1F ) VAR_232 -> VAR_233 = VAR_234 ? VAR_235 : VAR_236 ; else if ( VAR_237 [ 0 ] == 0x1F && VAR_238 [ 1 ] == 0x3E0 && VAR_239 [ 2 ] == 0x7C00 ) VAR_240 -> VAR_241 = VAR_242 ? VAR_243 : VAR_244 ; } else if ( VAR_245 == 16 && VAR_246 == 16 ) { if ( VAR_247 [ 0 ] == 0xF800 && VAR_248 [ 1 ] == 0x7E0 && VAR_249 [ 2 ] == 0x1F ) VAR_250 -> VAR_251 = VAR_252 ? VAR_253 : VAR_254 ; else if ( VAR_255 [ 0 ] == 0x1F && VAR_256 [ 1 ] == 0x7E0 && VAR_257 [ 2 ] == 0xF800 ) VAR_258 -> VAR_259 = VAR_260 ? VAR_261 : VAR_262 ; } else if ( VAR_263 == 24 ) { if ( VAR_264 [ 0 ] == 0xFF0000 && VAR_265 [ 1 ] == 0xFF00 && VAR_266 [ 2 ] == 0xFF ) VAR_267 -> VAR_268 = VAR_269 ? VAR_270 : VAR_271 ; else if ( VAR_272 [ 0 ] == 0xFF && VAR_273 [ 1 ] == 0xFF00 && VAR_274 [ 2 ] == 0xFF0000 ) VAR_275 -> VAR_276 = VAR_277 ? VAR_278 : VAR_279 ; } else if ( VAR_280 == 32 ) { if ( VAR_281 [ 0 ] == 0xFF0000 && VAR_282 [ 1 ] == 0xFF00 && VAR_283 [ 2 ] == 0xFF ) VAR_284 -> VAR_285 = VAR_286 ? VAR_287 : VAR_288 ; else if ( VAR_289 [ 0 ] == 0xFF && VAR_290 [ 1 ] == 0xFF00 && VAR_291 [ 2 ] == 0xFF0000 ) VAR_292 -> VAR_293 = VAR_294 ? VAR_295 : VAR_296 ; } METHOD_40 ( & VAR_297 , VAR_298 * VAR_299 ) ; break ; default : METHOD_41 ( VAR_300 , VAR_301 , ""invalidvisualclass\\n"" ) ; return VAR_302 ; } if ( VAR_303 -> VAR_304 == VAR_305 ) { avpriv_request_sample ( VAR_306 , ""Unknownfile:bpp%"" VAR_307 "",pixdepth%"" VAR_308 "",vclass%"" VAR_309 """" , VAR_310 , VAR_311 , VAR_312 ) ; return VAR_313 ; } if ( ( VAR_314 = METHOD_42 ( VAR_315 , VAR_316 , 0 ) ) < 0 ) return VAR_317 ; VAR_318 -> VAR_319 = 1 ; VAR_320 -> VAR_321 = VAR_322 ; if ( VAR_323 -> VAR_324 == VAR_325 ) { TYPE_15 * VAR_326 = ( TYPE_16 * ) VAR_327 -> VAR_328 [ 1 ] ; TYPE_17 VAR_329 , VAR_330 , VAR_331 ; for ( VAR_332 = 0 ; VAR_333 < VAR_334 ; VAR_335 ++ ) { METHOD_43 ( & VAR_336 , 4 ) ; VAR_337 = METHOD_44 ( & VAR_338 ) ; METHOD_45 ( & VAR_339 , 1 ) ; VAR_340 = METHOD_46 ( & VAR_341 ) ; METHOD_47 ( & VAR_342 , 1 ) ; VAR_343 = METHOD_48 ( & VAR_344 ) ; METHOD_49 ( & VAR_345 , 3 ) ; VAR_346 [ VAR_347 ] = VAR_348 << 16 | VAR_349 << 8 | VAR_350 ; } } VAR_351 = VAR_352 -> VAR_353 [ 0 ] ; for ( VAR_354 = 0 ; VAR_355 < VAR_356 -> VAR_357 ; VAR_358 ++ ) { METHOD_50 ( & VAR_359 , VAR_360 , VAR_361 ) ; METHOD_51 ( & VAR_362 , VAR_363 - VAR_364 ) ; VAR_365 += VAR_366 -> VAR_367 [ 0 ] ; } * VAR_368 = 1 ; return VAR_369 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; const TYPE_6 * VAR_6 = VAR_7 -> VAR_8 ; TYPE_7 VAR_9 , VAR_10 , VAR_11 = VAR_12 -> VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 ; TYPE_9 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_10 VAR_23 , VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_11 VAR_28 [ 3 ] ; TYPE_12 * VAR_29 ; TYPE_13 VAR_30 ; if ( VAR_310 == 1 && VAR_31 < VAR_32 ) return VAR_33 ; METHOD_1 ( & VAR_34 , VAR_35 , VAR_36 ) ; VAR_37 = METHOD_2 ( & VAR_38 ) ; VAR_39 = METHOD_3 ( & VAR_40 ) ; if ( VAR_41 != VAR_42 ) { METHOD_4 ( VAR_43 , VAR_44 , ""unsupportedversion\\n"" ) ; return VAR_45 ; } if ( VAR_46 < VAR_47 || VAR_48 < VAR_49 ) { METHOD_5 ( VAR_50 , VAR_51 , ""invalidheadersize\\n"" ) ; return VAR_52 ; } VAR_53 = METHOD_6 ( & VAR_54 ) ; VAR_55 = METHOD_7 ( & VAR_56 ) ; VAR_57 -> VAR_58 = METHOD_8 ( & VAR_59 ) ; VAR_60 -> VAR_61 = METHOD_9 ( & VAR_62 ) ; VAR_63 = METHOD_10 ( & VAR_64 ) ; VAR_65 = METHOD_11 ( & VAR_66 ) ; VAR_67 = METHOD_12 ( & VAR_68 ) ; VAR_69 = METHOD_13 ( & VAR_70 ) ; VAR_71 = METHOD_14 ( & VAR_72 ) ; VAR_73 = METHOD_15 ( & VAR_74 ) ; VAR_75 = METHOD_16 ( & VAR_76 ) ; VAR_77 = METHOD_17 ( & VAR_78 ) ; VAR_79 [ 0 ] = METHOD_18 ( & VAR_80 ) ; VAR_81 [ 1 ] = METHOD_19 ( & VAR_82 ) ; VAR_83 [ 2 ] = METHOD_20 ( & VAR_84 ) ; METHOD_21 ( & VAR_85 , 8 ) ; VAR_86 = METHOD_22 ( & VAR_87 ) ; METHOD_23 ( & VAR_88 , VAR_89 - ( VAR_90 - 20 ) ) ; METHOD_24 ( VAR_91 , VAR_92 , ""pixformat%"" VAR_93 "",pixdepth%"" VAR_94 "",bunit%"" VAR_95 "",bitorder%"" VAR_96 "",bpad%"" VAR_97 ""\\n"" , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; METHOD_25 ( VAR_103 , VAR_104 , ""vclass%"" VAR_105 "",ncolors%"" VAR_106 "",bpp%"" VAR_107 "",be%"" VAR_108 "",lsize%"" VAR_109 "",xoffset%"" VAR_110 ""\\n"" , VAR_111 , VAR_112 , VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; METHOD_26 ( VAR_117 , VAR_118 , ""red%0"" PRIx32 "",green%0"" PRIx32 "",blue%0"" PRIx32 ""\\n"" , VAR_119 [ 0 ] , VAR_120 [ 1 ] , VAR_121 [ 2 ] ) ; if ( VAR_122 > VAR_123 ) { METHOD_27 ( VAR_124 , VAR_125 , ""invalidpixmapformat\\n"" ) ; return VAR_126 ; } if ( VAR_127 == 0 || VAR_128 > 32 ) { METHOD_28 ( VAR_129 , VAR_130 , ""invalidpixmapdepth\\n"" ) ; return VAR_131 ; } if ( VAR_132 ) { avpriv_request_sample ( VAR_133 , ""xoffset%"" VAR_134 """" , VAR_135 ) ; return VAR_136 ; } if ( VAR_137 > 1 ) { METHOD_29 ( VAR_138 , VAR_139 , ""invalidbyteorder\\n"" ) ; return VAR_140 ; } if ( VAR_141 > 1 ) { METHOD_30 ( VAR_142 , VAR_143 , ""invalidbitmapbitorder\\n"" ) ; return VAR_144 ; } if ( VAR_145 != 8 && VAR_146 != 16 && VAR_147 != 32 ) { METHOD_31 ( VAR_148 , VAR_149 , ""invalidbitmapunit\\n"" ) ; return VAR_150 ; } if ( VAR_151 != 8 && VAR_152 != 16 && VAR_153 != 32 ) { METHOD_32 ( VAR_154 , VAR_155 , ""invalidbitmapscan-linepad\\n"" ) ; return VAR_156 ; } if ( VAR_157 == 0 || VAR_158 > 32 ) { METHOD_33 ( VAR_159 , VAR_160 , ""invalidbitsperpixel\\n"" ) ; return VAR_161 ; } if ( VAR_162 > 256 ) { METHOD_34 ( VAR_163 , VAR_164 , ""invalidnumberofentriesincolormap\\n"" ) ; return VAR_165 ; } if ( ( VAR_166 = METHOD_35 ( VAR_167 -> VAR_168 , VAR_169 -> VAR_170 , 0 , VAR_171 ) ) < 0 ) return VAR_172 ; VAR_173 = METHOD_36 ( VAR_174 -> VAR_175 * VAR_176 , VAR_177 ) / 8 ; if ( VAR_178 < VAR_179 ) { METHOD_37 ( VAR_180 , VAR_181 , ""invalidbytesperscan-line\\n"" ) ; return VAR_182 ; } if ( METHOD_38 ( & VAR_183 ) < VAR_184 * VAR_185 + ( TYPE_14 ) VAR_186 -> VAR_187 * VAR_188 ) { METHOD_39 ( VAR_189 , VAR_190 , ""inputbuffertoosmall\\n"" ) ; return VAR_191 ; } if ( VAR_192 != VAR_193 ) { avpriv_report_missing_feature ( VAR_194 , ""Pixmapformat%"" VAR_195 , VAR_196 ) ; return VAR_197 ; } VAR_198 -> VAR_199 = VAR_200 ; switch ( VAR_201 ) { case VAR_202 : case VAR_203 : if ( VAR_204 != 1 && VAR_205 != 8 ) return VAR_206 ; if ( VAR_207 == 1 ) { VAR_208 -> VAR_209 = VAR_210 ; } else if ( VAR_310 == 8 && VAR_211 == 8 ) { VAR_212 -> VAR_213 = VAR_214 ; } break ; case VAR_215 : case VAR_216 : if ( VAR_217 == 8 ) VAR_218 -> VAR_219 = VAR_220 ; break ; case VAR_221 : case VAR_222 : if ( VAR_223 != 16 && VAR_224 != 24 && VAR_225 != 32 ) return VAR_226 ; if ( VAR_227 == 16 && VAR_228 == 15 ) { if ( VAR_229 [ 0 ] == 0x7C00 && VAR_230 [ 1 ] == 0x3E0 && VAR_231 [ 2 ] == 0x1F ) VAR_232 -> VAR_233 = VAR_234 ? VAR_235 : VAR_236 ; else if ( VAR_237 [ 0 ] == 0x1F && VAR_238 [ 1 ] == 0x3E0 && VAR_239 [ 2 ] == 0x7C00 ) VAR_240 -> VAR_241 = VAR_242 ? VAR_243 : VAR_244 ; } else if ( VAR_245 == 16 && VAR_246 == 16 ) { if ( VAR_247 [ 0 ] == 0xF800 && VAR_248 [ 1 ] == 0x7E0 && VAR_249 [ 2 ] == 0x1F ) VAR_250 -> VAR_251 = VAR_252 ? VAR_253 : VAR_254 ; else if ( VAR_255 [ 0 ] == 0x1F && VAR_256 [ 1 ] == 0x7E0 && VAR_257 [ 2 ] == 0xF800 ) VAR_258 -> VAR_259 = VAR_260 ? VAR_261 : VAR_262 ; } else if ( VAR_263 == 24 ) { if ( VAR_264 [ 0 ] == 0xFF0000 && VAR_265 [ 1 ] == 0xFF00 && VAR_266 [ 2 ] == 0xFF ) VAR_267 -> VAR_268 = VAR_269 ? VAR_270 : VAR_271 ; else if ( VAR_272 [ 0 ] == 0xFF && VAR_273 [ 1 ] == 0xFF00 && VAR_274 [ 2 ] == 0xFF0000 ) VAR_275 -> VAR_276 = VAR_277 ? VAR_278 : VAR_279 ; } else if ( VAR_280 == 32 ) { if ( VAR_281 [ 0 ] == 0xFF0000 && VAR_282 [ 1 ] == 0xFF00 && VAR_283 [ 2 ] == 0xFF ) VAR_284 -> VAR_285 = VAR_286 ? VAR_287 : VAR_288 ; else if ( VAR_289 [ 0 ] == 0xFF && VAR_290 [ 1 ] == 0xFF00 && VAR_291 [ 2 ] == 0xFF0000 ) VAR_292 -> VAR_293 = VAR_294 ? VAR_295 : VAR_296 ; } METHOD_40 ( & VAR_297 , VAR_298 * VAR_299 ) ; break ; default : METHOD_41 ( VAR_300 , VAR_301 , ""invalidvisualclass\\n"" ) ; return VAR_302 ; } if ( VAR_303 -> VAR_304 == VAR_305 ) { avpriv_request_sample ( VAR_306 , ""Unknownfile:bpp%"" VAR_307 "",pixdepth%"" VAR_308 "",vclass%"" VAR_309 """" , VAR_310 , VAR_311 , VAR_312 ) ; return VAR_313 ; } if ( ( VAR_314 = METHOD_42 ( VAR_315 , VAR_316 , 0 ) ) < 0 ) return VAR_317 ; VAR_318 -> VAR_319 = 1 ; VAR_320 -> VAR_321 = VAR_322 ; if ( VAR_323 -> VAR_324 == VAR_325 ) { TYPE_15 * VAR_326 = ( TYPE_16 * ) VAR_327 -> VAR_328 [ 1 ] ; TYPE_17 VAR_329 , VAR_330 , VAR_331 ; for ( VAR_332 = 0 ; VAR_333 < VAR_334 ; VAR_335 ++ ) { METHOD_43 ( & VAR_336 , 4 ) ; VAR_337 = METHOD_44 ( & VAR_338 ) ; METHOD_45 ( & VAR_339 , 1 ) ; VAR_340 = METHOD_46 ( & VAR_341 ) ; METHOD_47 ( & VAR_342 , 1 ) ; VAR_343 = METHOD_48 ( & VAR_344 ) ; METHOD_49 ( & VAR_345 , 3 ) ; VAR_346 [ VAR_347 ] = VAR_348 << 16 | VAR_349 << 8 | VAR_350 ; } } VAR_351 = VAR_352 -> VAR_353 [ 0 ] ; for ( VAR_354 = 0 ; VAR_355 < VAR_356 -> VAR_357 ; VAR_358 ++ ) { METHOD_50 ( & VAR_359 , VAR_360 , VAR_361 ) ; METHOD_51 ( & VAR_362 , VAR_363 - VAR_364 ) ; VAR_365 += VAR_366 -> VAR_367 [ 0 ] ; } * VAR_368 = 1 ; return VAR_369 ; }",453
454," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; if ( ! VAR_8 ) return ; VAR_9 = 0 ; VAR_10 = VAR_11 -> VAR_12 ; if ( VAR_13 && VAR_14 -> VAR_15 > 8 ) { VAR_16 = VAR_17 -> VAR_18 >> 1 ; VAR_19 &= 0xfffffff8 ; VAR_20 = METHOD_1 ( VAR_21 -> VAR_22 / 8 , 8 ) ; } VAR_23 = VAR_24 + VAR_25 ; METHOD_2 ( VAR_26 , VAR_27 ) ;  METHOD_3 ( VAR_28 -> VAR_29 , VAR_30 , VAR_31 ,  VAR_32 , VAR_33 , VAR_34 ) ; }","TYPE_0 METHOD_0 ( TYPE_7 * VAR_35 , TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; if ( ! VAR_8 ) return ; VAR_9 = 0 ; VAR_10 = VAR_11 -> VAR_12 ; if ( VAR_13 && VAR_14 -> VAR_15 > 8 ) { VAR_16 = VAR_17 -> VAR_18 >> 1 ; VAR_19 &= 0xfffffff8 ; VAR_20 = METHOD_1 ( VAR_21 -> VAR_22 / 8 , 8 ) ; } VAR_23 = VAR_24 + VAR_25 ; METHOD_2 ( VAR_26 , VAR_27 ) ; METHOD_3 ( VAR_35 , VAR_30 , VAR_31 -> VAR_36 , VAR_32 , VAR_33 , VAR_34 ) ; }",454
455,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; TYPE_9 * VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 ) - VAR_17 ; if ( VAR_18 < sizeof ( VAR_19 ) ) { METHOD_2 ( VAR_20 . VAR_21 , 1 ) ; METHOD_3 ( VAR_22 , 1 ) ; return VAR_23 ; } VAR_24 = METHOD_4 ( VAR_25 , VAR_26 ) ; if ( VAR_27 == VAR_28 ) return VAR_29 ; TRACE_INFO ( ""UDPdatagramreceived(%"" PRIuSIZE ""bytes)...\\r\\n"" , VAR_30 ) ; METHOD_5 ( VAR_31 ) ; if ( VAR_32 -> VAR_33 != 0x0000 || VAR_34 -> VAR_35 == sizeof ( VAR_36 ) ) { if ( METHOD_6 ( VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , VAR_41 , VAR_42 , VAR_43 ) != 0x0000 ) { METHOD_7 ( ""WrongUDPheaderchecksum!\\r\\n"" ) ; METHOD_8 ( VAR_44 . VAR_45 , 1 ) ; METHOD_9 ( VAR_46 , 1 ) ; return VAR_47 ; } } for ( VAR_48 = 0 ; VAR_49 < VAR_50 ; VAR_51 ++ ) { VAR_52 = VAR_53 + VAR_54 ; if ( VAR_55 -> VAR_56 != VAR_57 ) continue ; if ( VAR_58 -> VAR_59 && VAR_60 -> VAR_61 != VAR_62 ) continue ; if ( VAR_63 -> VAR_64 == 0 || VAR_65 -> VAR_66 != METHOD_10 ( VAR_67 -> VAR_68 ) ) continue ; if ( VAR_69 -> VAR_70 != 0 && VAR_71 -> VAR_72 != METHOD_11 ( VAR_73 -> VAR_74 ) ) continue ; if ( VAR_75 == VAR_76 ) if ( VAR_77 -> VAR_78 == sizeof ( VAR_79 ) ) { if ( VAR_80 -> VAR_81 . VAR_82 != 0 ) { if ( VAR_83 -> VAR_84 . VAR_85 != sizeof ( VAR_86 ) ) continue ; if ( VAR_87 -> VAR_88 . VAR_89 != VAR_90 -> VAR_91 . VAR_92 ) continue ; } if ( VAR_93 -> VAR_94 . VAR_95 != 0 ) { if ( VAR_96 -> VAR_97 . VAR_98 != sizeof ( VAR_99 ) ) continue ; if ( VAR_100 -> VAR_101 . VAR_102 != VAR_103 -> VAR_104 . VAR_105 ) continue ; } } else if ( VAR_106 == VAR_107 ) if ( VAR_108 -> VAR_109 == sizeof ( VAR_110 ) ) { if ( VAR_111 -> VAR_112 . VAR_113 != 0 ) { if ( VAR_114 -> VAR_115 . VAR_116 != sizeof ( VAR_117 ) ) continue ; if ( ! METHOD_12 ( & VAR_118 -> VAR_119 . VAR_120 , & VAR_121 -> VAR_122 . VAR_123 ) ) continue ; } if ( VAR_124 -> VAR_125 . VAR_126 != 0 ) { if ( VAR_127 -> VAR_128 . VAR_129 != sizeof ( VAR_130 ) ) continue ; if ( ! METHOD_13 ( & VAR_131 -> VAR_132 . VAR_133 , & VAR_134 -> VAR_135 . VAR_136 ) ) continue ; } } else { continue ; } break ; } VAR_137 += sizeof ( VAR_138 ) ; VAR_139 -= sizeof ( VAR_140 ) ; if ( VAR_141 >= VAR_142 ) { VAR_143 = METHOD_14 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 , VAR_149 ) ; return VAR_150 ; } if ( VAR_151 -> VAR_152 == VAR_153 ) { VAR_154 = METHOD_15 ( sizeof ( VAR_155 ) + VAR_156 ) ; if ( VAR_157 != VAR_158 ) { VAR_159 = METHOD_16 ( VAR_160 , 0 ) ; VAR_161 -> VAR_162 = VAR_163 ; VAR_164 -> VAR_165 = VAR_166 ; } else { VAR_167 = VAR_168 ; } } else { VAR_169 = VAR_170 -> VAR_171 ; for ( VAR_172 = 1 ; VAR_173 -> VAR_174 ; VAR_175 ++ ) { VAR_176 = VAR_177 -> VAR_178 ; } if ( VAR_179 >= VAR_180 ) { METHOD_17 ( VAR_181 . VAR_182 [ VAR_183 -> VAR_184 ] . VAR_185 , 1 ) ; METHOD_18 ( VAR_186 [ VAR_187 -> VAR_188 ] . VAR_189 , 1 ) ; return VAR_190 ; } VAR_191 = METHOD_19 ( sizeof ( VAR_192 ) + VAR_193 ) ; if ( VAR_194 != VAR_195 ) { VAR_196 -> VAR_197 = METHOD_20 ( VAR_198 , 0 ) ; VAR_199 = VAR_200 -> VAR_201 ; VAR_202 -> VAR_203 = VAR_204 ; } else { VAR_205 = VAR_206 ; } } if ( VAR_207 == VAR_208 ) { METHOD_21 ( VAR_209 . VAR_210 [ VAR_211 -> VAR_212 ] . VAR_213 , 1 ) ; METHOD_22 ( VAR_214 [ VAR_215 -> VAR_216 ] . VAR_217 , 1 ) ; return VAR_218 ; } VAR_219 -> VAR_220 = VAR_221 ;  VAR_222 -> VAR_223 = METHOD_23 ( VAR_224 -> VAR_225 ) ;  if ( VAR_226 == VAR_227 ) if ( VAR_228 -> VAR_229 == sizeof ( VAR_230 ) ) { VAR_231 -> VAR_232 . VAR_233 = sizeof ( VAR_234 ) ; VAR_235 -> VAR_236 . VAR_237 = VAR_238 -> VAR_239 . VAR_240 ; VAR_241 -> VAR_242 . VAR_243 = sizeof ( VAR_244 ) ; VAR_245 -> VAR_246 . VAR_247 = VAR_248 -> VAR_249 . VAR_250 ; } if ( VAR_251 == VAR_252 ) if ( VAR_253 -> VAR_254 == sizeof ( VAR_255 ) ) { VAR_256 -> VAR_257 . VAR_258 = sizeof ( VAR_259 ) ; VAR_260 -> VAR_261 . VAR_262 = VAR_263 -> VAR_264 . VAR_265 ; VAR_266 -> VAR_267 . VAR_268 = sizeof ( VAR_269 ) ; VAR_270 -> VAR_271 . VAR_272 = VAR_273 -> VAR_274 . VAR_275 ; } VAR_276 -> VAR_277 = sizeof ( VAR_278 ) ; METHOD_24 ( VAR_279 -> VAR_280 , VAR_281 -> VAR_282 , VAR_283 , VAR_284 , VAR_285 ) ; VAR_286 -> VAR_287 = * VAR_288 ; METHOD_25 ( VAR_289 ) ; METHOD_26 ( VAR_290 . VAR_291 , 1 ) ; METHOD_27 ( VAR_292 , 1 ) ; METHOD_28 ( VAR_293 , 1 ) ; return VAR_294 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; VAR_12 * VAR_13 ; TYPE_9 * VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 ) - VAR_17 ; if ( VAR_18 < sizeof ( VAR_19 ) ) { METHOD_2 ( VAR_20 . VAR_21 , 1 ) ; METHOD_3 ( VAR_22 , 1 ) ; return VAR_23 ; } VAR_24 = METHOD_4 ( VAR_25 , VAR_26 ) ; if ( VAR_27 == VAR_28 ) return VAR_29 ; TRACE_INFO ( ""UDPdatagramreceived(%"" PRIuSIZE ""bytes)...\\r\\n"" , VAR_30 ) ; METHOD_5 ( VAR_31 ) ; if ( VAR_32 -> VAR_33 != 0x0000 || VAR_34 -> VAR_35 == sizeof ( VAR_36 ) ) { if ( METHOD_6 ( VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , VAR_41 , VAR_42 , VAR_43 ) != 0x0000 ) { METHOD_7 ( ""WrongUDPheaderchecksum!\\r\\n"" ) ; METHOD_8 ( VAR_44 . VAR_45 , 1 ) ; METHOD_9 ( VAR_46 , 1 ) ; return VAR_47 ; } } for ( VAR_48 = 0 ; VAR_49 < VAR_50 ; VAR_51 ++ ) { VAR_52 = VAR_53 + VAR_54 ; if ( VAR_55 -> VAR_56 != VAR_57 ) continue ; if ( VAR_58 -> VAR_59 && VAR_60 -> VAR_61 != VAR_62 ) continue ; if ( VAR_63 -> VAR_64 == 0 || VAR_65 -> VAR_66 != METHOD_10 ( VAR_67 -> VAR_68 ) ) continue ; if ( VAR_69 -> VAR_70 != 0 && VAR_71 -> VAR_72 != METHOD_11 ( VAR_73 -> VAR_74 ) ) continue ; if ( VAR_75 == VAR_76 ) if ( VAR_77 -> VAR_78 == sizeof ( VAR_79 ) ) { if ( VAR_80 -> VAR_81 . VAR_82 != 0 ) { if ( VAR_83 -> VAR_84 . VAR_85 != sizeof ( VAR_86 ) ) continue ; if ( VAR_87 -> VAR_88 . VAR_89 != VAR_90 -> VAR_91 . VAR_92 ) continue ; } if ( VAR_93 -> VAR_94 . VAR_95 != 0 ) { if ( VAR_96 -> VAR_97 . VAR_98 != sizeof ( VAR_99 ) ) continue ; if ( VAR_100 -> VAR_101 . VAR_102 != VAR_103 -> VAR_104 . VAR_105 ) continue ; } } else if ( VAR_106 == VAR_107 ) if ( VAR_108 -> VAR_109 == sizeof ( VAR_110 ) ) { if ( VAR_111 -> VAR_112 . VAR_113 != 0 ) { if ( VAR_114 -> VAR_115 . VAR_116 != sizeof ( VAR_117 ) ) continue ; if ( ! METHOD_12 ( & VAR_118 -> VAR_119 . VAR_120 , & VAR_121 -> VAR_122 . VAR_123 ) ) continue ; } if ( VAR_124 -> VAR_125 . VAR_126 != 0 ) { if ( VAR_127 -> VAR_128 . VAR_129 != sizeof ( VAR_130 ) ) continue ; if ( ! METHOD_13 ( & VAR_131 -> VAR_132 . VAR_133 , & VAR_134 -> VAR_135 . VAR_136 ) ) continue ; } } else { continue ; } break ; } VAR_137 += sizeof ( VAR_138 ) ; VAR_139 -= sizeof ( VAR_140 ) ; if ( VAR_141 >= VAR_142 ) { VAR_143 = METHOD_14 ( VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_148 , VAR_149 ) ; return VAR_150 ; } if ( VAR_151 -> VAR_152 == VAR_153 ) { VAR_154 = METHOD_15 ( sizeof ( VAR_155 ) + VAR_156 ) ; if ( VAR_157 != VAR_158 ) { VAR_159 = METHOD_16 ( VAR_160 , 0 ) ; VAR_161 -> VAR_162 = VAR_163 ; VAR_164 -> VAR_165 = VAR_166 ; } else { VAR_167 = VAR_168 ; } } else { VAR_169 = VAR_170 -> VAR_171 ; for ( VAR_172 = 1 ; VAR_173 -> VAR_174 ; VAR_175 ++ ) { VAR_176 = VAR_177 -> VAR_178 ; } if ( VAR_179 >= VAR_180 ) { METHOD_17 ( VAR_181 . VAR_182 [ VAR_183 -> VAR_184 ] . VAR_185 , 1 ) ; METHOD_18 ( VAR_186 [ VAR_187 -> VAR_188 ] . VAR_189 , 1 ) ; return VAR_190 ; } VAR_191 = METHOD_19 ( sizeof ( VAR_192 ) + VAR_193 ) ; if ( VAR_194 != VAR_195 ) { VAR_196 -> VAR_197 = METHOD_20 ( VAR_198 , 0 ) ; VAR_199 = VAR_200 -> VAR_201 ; VAR_202 -> VAR_203 = VAR_204 ; } else { VAR_205 = VAR_206 ; } } if ( VAR_207 == VAR_208 ) { METHOD_21 ( VAR_209 . VAR_210 [ VAR_211 -> VAR_212 ] . VAR_213 , 1 ) ; METHOD_22 ( VAR_214 [ VAR_215 -> VAR_216 ] . VAR_217 , 1 ) ; return VAR_218 ; } VAR_219 -> VAR_220 = VAR_221 ; VAR_222 -> VAR_223 = METHOD_23 ( VAR_224 -> VAR_225 ) ; if ( VAR_226 == VAR_227 ) if ( VAR_228 -> VAR_229 == sizeof ( VAR_230 ) ) { VAR_231 -> VAR_232 . VAR_233 = sizeof ( VAR_234 ) ; VAR_235 -> VAR_236 . VAR_237 = VAR_238 -> VAR_239 . VAR_240 ; VAR_241 -> VAR_242 . VAR_243 = sizeof ( VAR_244 ) ; VAR_245 -> VAR_246 . VAR_247 = VAR_248 -> VAR_249 . VAR_250 ; } if ( VAR_251 == VAR_252 ) if ( VAR_253 -> VAR_254 == sizeof ( VAR_255 ) ) { VAR_256 -> VAR_257 . VAR_258 = sizeof ( VAR_259 ) ; VAR_260 -> VAR_261 . VAR_262 = VAR_263 -> VAR_264 . VAR_265 ; VAR_266 -> VAR_267 . VAR_268 = sizeof ( VAR_269 ) ; VAR_270 -> VAR_271 . VAR_272 = VAR_273 -> VAR_274 . VAR_275 ; } VAR_276 -> VAR_277 = sizeof ( VAR_278 ) ; METHOD_24 ( VAR_279 -> VAR_280 , VAR_281 -> VAR_282 , VAR_283 , VAR_284 , VAR_285 ) ; VAR_286 -> VAR_215 = VAR_215 ; VAR_286 -> VAR_287 = * VAR_288 ; METHOD_25 ( VAR_289 ) ; METHOD_26 ( VAR_290 . VAR_291 , 1 ) ; METHOD_27 ( VAR_292 , 1 ) ; METHOD_28 ( VAR_293 , 1 ) ; return VAR_294 ; }",455
456,"TYPE_0 METHOD_0 ( ) { VAR_0 . VAR_1 = VAR_2 ; VAR_3 . VAR_4 = VAR_5 ; VAR_6 . VAR_7 = VAR_8 ; VAR_9 . VAR_10 = - 1 ; VAR_11 . VAR_12 = - 1 ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = 0 ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = 0 ; VAR_32 . VAR_33 = METHOD_1 ( ""redis"" ) ; VAR_34 . VAR_35 = VAR_36 ; VAR_37 . VAR_38 = 1 ; VAR_39 . VAR_40 = 0 ; VAR_41 . VAR_42 = 0 ; VAR_43 . VAR_44 = VAR_45 ; VAR_46 . VAR_47 = 0 ; VAR_48 . VAR_49 = METHOD_2 ( VAR_50 ) ; VAR_51 . VAR_52 = - 1 ; VAR_53 . VAR_54 = - 1 ; VAR_55 . VAR_56 = METHOD_3 ( ""/var/run/redis.pid"" ) ; VAR_57 . VAR_58 = METHOD_4 ( ""dump.rdb"" ) ; VAR_59 . VAR_60 = METHOD_5 ( ""appendonly.aof"" ) ; VAR_61 . VAR_62 = VAR_63 ; VAR_64 . VAR_65 = 1 ; VAR_66 . VAR_67 = 1 ; VAR_68 . VAR_69 = 0 ; VAR_70 . VAR_71 = 0 ; VAR_72 . VAR_73 = 0 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = 3 ;  VAR_79 . VAR_80 = 0 ;   VAR_81 . VAR_82 = METHOD_6 ( ""/tmp/redis-%p.vm"" ) ;  VAR_83 . VAR_84 = 256 ; VAR_85 . VAR_86 = 1024 * 1024 * 100 ;  VAR_87 . VAR_88 = 1024LL * 1024 * 1024 * 1 ;  VAR_89 . VAR_90 = 4 ; VAR_91 . VAR_92 = 0 ; VAR_93 . VAR_94 = VAR_95 ; VAR_96 . VAR_97 = VAR_98 ; VAR_99 . VAR_100 = VAR_101 ; VAR_102 . VAR_103 = VAR_104 ; VAR_105 . VAR_106 = VAR_107 ; VAR_108 . VAR_109 = 0 ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( 60 * 60 , 1 ) ; METHOD_10 ( 300 , 100 ) ; METHOD_11 ( 60 , 10000 ) ; VAR_110 . VAR_111 = 0 ; VAR_112 . VAR_113 = VAR_114 ; VAR_115 . VAR_116 = VAR_117 ; VAR_118 . VAR_119 = 6379 ; VAR_120 . VAR_121 = VAR_122 ; VAR_123 . VAR_124 = VAR_125 ; VAR_126 . VAR_127 = 1 ; VAR_128 = 0.0 ; VAR_129 = 1.0 / VAR_130 ; VAR_131 = - 1.0 / VAR_132 ; VAR_133 = VAR_134 / VAR_135 ; VAR_136 . VAR_137 = METHOD_12 ( & VAR_138 , VAR_139 ) ; METHOD_13 ( ) ; VAR_140 . VAR_141 = METHOD_14 ( ""del"" ) ; VAR_142 . VAR_143 = METHOD_15 ( ""multi"" ) ; }","TYPE_0 METHOD_0 ( ) { VAR_0 . VAR_1 = VAR_2 ; VAR_3 . VAR_4 = VAR_5 ; VAR_6 . VAR_7 = VAR_8 ; VAR_9 . VAR_10 = - 1 ; VAR_11 . VAR_12 = - 1 ; VAR_13 . VAR_14 = VAR_15 ; VAR_16 . VAR_17 = VAR_18 ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = 0 ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = 0 ; VAR_32 . VAR_33 = METHOD_1 ( ""redis"" ) ; VAR_34 . VAR_35 = VAR_36 ; VAR_37 . VAR_38 = 1 ; VAR_39 . VAR_40 = 0 ; VAR_41 . VAR_42 = 0 ; VAR_43 . VAR_44 = VAR_45 ; VAR_46 . VAR_47 = 0 ; VAR_48 . VAR_49 = METHOD_2 ( VAR_50 ) ; VAR_51 . VAR_52 = - 1 ; VAR_53 . VAR_54 = - 1 ; VAR_55 . VAR_56 = METHOD_3 ( ""/var/run/redis.pid"" ) ; VAR_57 . VAR_58 = METHOD_4 ( ""dump.rdb"" ) ; VAR_59 . VAR_60 = METHOD_5 ( ""appendonly.aof"" ) ; VAR_61 . VAR_62 = VAR_63 ; VAR_64 . VAR_65 = 1 ; VAR_66 . VAR_67 = 1 ; VAR_68 . VAR_69 = 0 ; VAR_70 . VAR_71 = 0 ; VAR_72 . VAR_73 = 0 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = 3 ; VAR_79 . VAR_80 = 0 ; VAR_81 . VAR_82 = METHOD_6 ( ""/tmp/redis.ds"" ) ; VAR_142 . VAR_146 = 64LL * 1024 * 100 ; VAR_87 . VAR_88 = 1024LL * 1024 * 1024 ; VAR_142 . cache_blocked_clients = 0 ; VAR_93 . VAR_94 = VAR_95 ; VAR_96 . VAR_97 = VAR_98 ; VAR_99 . VAR_100 = VAR_101 ; VAR_102 . VAR_103 = VAR_104 ; VAR_105 . VAR_106 = VAR_107 ; VAR_108 . VAR_109 = 0 ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( 60 * 60 , 1 ) ; METHOD_10 ( 300 , 100 ) ; METHOD_11 ( 60 , 10000 ) ; VAR_110 . VAR_111 = 0 ; VAR_112 . VAR_113 = VAR_114 ; VAR_115 . VAR_116 = VAR_117 ; VAR_118 . VAR_119 = 6379 ; VAR_120 . VAR_121 = VAR_122 ; VAR_123 . VAR_124 = VAR_125 ; VAR_126 . VAR_127 = 1 ; VAR_128 = 0.0 ; VAR_129 = 1.0 / VAR_130 ; VAR_131 = - 1.0 / VAR_132 ; VAR_133 = VAR_134 / VAR_135 ; VAR_136 . VAR_137 = METHOD_12 ( & VAR_138 , VAR_139 ) ; METHOD_13 ( ) ; VAR_140 . VAR_141 = METHOD_14 ( ""del"" ) ; VAR_142 . VAR_143 = METHOD_15 ( ""multi"" ) ; }",456
457,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const unsigned TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_2 ) ; const struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; unsigned TYPE_3 VAR_5 , VAR_6 ; VAR_7 * VAR_8 , * VAR_9 ; METHOD_2 ( STRUCT_OR_UNION_4 -> VAR_10 ) ; METHOD_3 ( STRUCT_OR_UNION_5 -> VAR_11 ) ; if ( STRUCT_OR_UNION_6 -> VAR_12 && STRUCT_OR_UNION_7 -> VAR_13 -> VAR_14 ) return METHOD_4 ( VAR_15 , VAR_16 ) ; VAR_17 = VAR_18 -> VAR_19 / 2 ; STRUCT_OR_UNION_8 -> VAR_20 = METHOD_5 ( VAR_21 + 1 , sizeof ( * STRUCT_OR_UNION_9 -> VAR_22 ) , VAR_23 ) ; if ( ! STRUCT_OR_UNION_10 -> VAR_24 ) return - VAR_25 ; STRUCT_OR_UNION_11 -> VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 , 2 , VAR_29 ) ;  if ( ! STRUCT_OR_UNION_12 -> VAR_30 )  return - VAR_31 ;  VAR_32 = STRUCT_OR_UNION_13 -> VAR_33 ;  VAR_34 = VAR_35 + VAR_36 ; METHOD_7 ( & STRUCT_OR_UNION_14 -> VAR_37 ) ; for ( VAR_38 = 0 ; VAR_39 <= VAR_40 ; VAR_41 ++ ) { STRUCT_OR_UNION_15 -> VAR_42 [ VAR_43 ] . VAR_44 = 8 ; if ( VAR_45 != VAR_46 ) STRUCT_OR_UNION_16 -> VAR_47 [ VAR_48 ] . VAR_49 = 1 ; STRUCT_OR_UNION_17 -> VAR_50 [ VAR_51 ] . VAR_52 = 2 ; STRUCT_OR_UNION_18 -> VAR_53 [ VAR_54 ] . VAR_55 = STRUCT_OR_UNION_19 -> VAR_56 -> VAR_57 ; if ( VAR_58 < VAR_59 ) STRUCT_OR_UNION_20 -> VAR_60 [ VAR_61 ] . VAR_62 = & VAR_63 [ VAR_64 ] ; if ( VAR_65 >= 1 ) STRUCT_OR_UNION_21 -> VAR_66 [ VAR_67 ] . VAR_68 = & VAR_69 [ VAR_70 - 1 ] ; METHOD_8 ( & STRUCT_OR_UNION_22 -> VAR_71 [ VAR_72 ] , & STRUCT_OR_UNION_23 -> VAR_73 ) ; } VAR_74 = VAR_75 -> VAR_76 ; for ( VAR_77 = 0 ; VAR_78 < VAR_79 -> VAR_80 ; VAR_81 ++ , VAR_82 ++ ) { if ( ! METHOD_9 ( VAR_83 -> VAR_84 , VAR_85 ) ) continue ; if ( VAR_86 -> VAR_87 . VAR_88 == 32 ) * VAR_89 ++ = METHOD_10 ( ( VAR_90 -> VAR_91 + 2 ) << 8 ) ; * VAR_92 ++ = METHOD_11 ( VAR_93 -> VAR_94 << 8 ) ; } return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const unsigned TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 = METHOD_1 ( VAR_2 ) ; const struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; unsigned TYPE_3 VAR_5 , VAR_6 ; VAR_7 * VAR_8 , * VAR_9 ; METHOD_2 ( STRUCT_OR_UNION_4 -> VAR_10 ) ; METHOD_3 ( STRUCT_OR_UNION_5 -> VAR_11 ) ; if ( STRUCT_OR_UNION_6 -> VAR_12 && STRUCT_OR_UNION_7 -> VAR_13 -> VAR_14 ) return METHOD_4 ( VAR_15 , VAR_16 ) ; VAR_17 = VAR_18 -> VAR_19 / 2 ; STRUCT_OR_UNION_8 -> VAR_20 = METHOD_5 ( VAR_21 + 1 , sizeof ( * STRUCT_OR_UNION_9 -> VAR_22 ) , VAR_23 ) ; if ( ! STRUCT_OR_UNION_10 -> VAR_24 ) return - VAR_25 ; STRUCT_OR_UNION_11 -> VAR_26 = METHOD_6 ( VAR_27 -> VAR_28 , 2 , VAR_29 ) ; if ( ! STRUCT_OR_UNION_12 -> VAR_30 ) return - VAR_31 ; } VAR_32 = STRUCT_OR_UNION_13 -> VAR_33 ; VAR_34 = VAR_35 + VAR_36 ; METHOD_7 ( & STRUCT_OR_UNION_14 -> VAR_37 ) ; for ( VAR_38 = 0 ; VAR_39 <= VAR_40 ; VAR_41 ++ ) { STRUCT_OR_UNION_15 -> VAR_42 [ VAR_43 ] . VAR_44 = 8 ; if ( VAR_45 != VAR_46 ) STRUCT_OR_UNION_16 -> VAR_47 [ VAR_48 ] . VAR_49 = 1 ; STRUCT_OR_UNION_17 -> VAR_50 [ VAR_51 ] . VAR_52 = 2 ; STRUCT_OR_UNION_18 -> VAR_53 [ VAR_54 ] . VAR_55 = STRUCT_OR_UNION_19 -> VAR_56 -> VAR_57 ; if ( VAR_58 < VAR_59 ) STRUCT_OR_UNION_20 -> VAR_60 [ VAR_61 ] . VAR_62 = & VAR_63 [ VAR_64 ] ; if ( VAR_65 >= 1 ) STRUCT_OR_UNION_21 -> VAR_66 [ VAR_67 ] . VAR_68 = & VAR_69 [ VAR_70 - 1 ] ; METHOD_8 ( & STRUCT_OR_UNION_22 -> VAR_71 [ VAR_72 ] , & STRUCT_OR_UNION_23 -> VAR_73 ) ; } VAR_74 = VAR_75 -> VAR_76 ; for ( VAR_77 = 0 ; VAR_78 < VAR_79 -> VAR_80 ; VAR_81 ++ , VAR_82 ++ ) { if ( ! METHOD_9 ( VAR_83 -> VAR_84 , VAR_85 ) ) continue ; if ( VAR_86 -> VAR_87 . VAR_88 == 32 ) * VAR_89 ++ = METHOD_10 ( ( VAR_90 -> VAR_91 + 2 ) << 8 ) ; * VAR_92 ++ = METHOD_11 ( VAR_93 -> VAR_94 << 8 ) ; } return 0 ; }",457
458," static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 )  {  METHOD_1 ( VAR_3 , VAR_4 -> VAR_5 + VAR_6 ) ;  }","static VAR_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_1 VAR_2 ) { METHOD_1 ( VAR_3 , VAR_4 -> VAR_5 + VAR_6 ) ; }",458
459,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 = * VAR_6 ; if ( VAR_7 == 13 ) { TYPE_7 VAR_8 ; TYPE_8 VAR_9 = METHOD_1 ( & VAR_10 , * VAR_11 , VAR_12 , VAR_13 ) ; if ( VAR_14 != 0 ) { METHOD_2 ( ""sn_coap_parser_options_parse-**packet_data_pptroverflow!"" ) ; return - 1 ; } else {  VAR_15 += VAR_16 ;  * VAR_17 = METHOD_3 ( VAR_18 , VAR_19 , VAR_20 , 1 ) ; } } else if ( VAR_21 == 14 ) { TYPE_9 VAR_22 = METHOD_4 ( & VAR_23 , * VAR_24 , VAR_25 , VAR_26 ) ; if ( VAR_27 != 0 ) { METHOD_5 ( ""sn_coap_parser_options_parse-**packet_data_pptroverflow!"" ) ; return - 1 ; } else {  VAR_28 += 269 ;  * VAR_29 = METHOD_6 ( VAR_30 , VAR_31 , VAR_32 , 2 ) ; } } else if ( VAR_33 == 15 ) { METHOD_7 ( ""sn_coap_parser_options_parse-invalidoptionnumber(15)!"" ) ; return - 1 ; } * VAR_34 = VAR_35 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 = * VAR_6 ; if ( VAR_7 == 13 ) { TYPE_7 VAR_8 ; TYPE_8 VAR_9 = METHOD_1 ( & VAR_10 , * VAR_11 , VAR_12 , VAR_13 ) ; if ( VAR_14 != 0 ) { METHOD_2 ( ""sn_coap_parser_options_parse-**packet_data_pptroverflow!"" ) ; return - 1 ; } else { if ( METHOD_8 ( VAR_35 , VAR_16 , & VAR_35 ) != 0 ) { return - 1 ; } * VAR_29 = METHOD_6 ( VAR_30 , VAR_31 , VAR_32 , 2 ) ; } } else if ( VAR_33 == 15 ) { METHOD_7 ( ""sn_coap_parser_options_parse-invalidoptionnumber(15)!"" ) ; return - 1 ; } * VAR_34 = VAR_35 ; return 0 ; }",459
460,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 ; TYPE_2 VAR_2 , VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 , VAR_6 ) ;  if ( VAR_7 -> VAR_8 ) {  METHOD_2 ( & VAR_9 -> VAR_10 , VAR_11 ) ; return ; } VAR_12 -> VAR_13 = - VAR_14 ;  METHOD_3 ( & VAR_15 -> VAR_16 , VAR_17 ) ;  for ( VAR_18 = VAR_19 -> VAR_20 - 1 ; VAR_21 >= 0 ; -- VAR_22 ) { METHOD_4 ( VAR_23 -> VAR_24 [ VAR_25 ] ) ; VAR_26 = METHOD_5 ( VAR_27 -> VAR_28 [ VAR_29 ] ) ; if ( VAR_30 != - VAR_31 && VAR_32 != - VAR_33 && VAR_34 != - VAR_35 && VAR_36 != - VAR_37 ) METHOD_6 ( & VAR_38 -> VAR_39 -> VAR_40 , ""%s,unlink-->%d\\n"" , VAR_41 , VAR_42 ) ; }  } ","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { unsigned TYPE_1 VAR_1 ; TYPE_2 VAR_2 , VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 , VAR_6 ) ; if ( VAR_7 -> VAR_8 ) { METHOD_2 ( & VAR_9 -> VAR_10 , VAR_11 ) ; return ; } VAR_12 -> VAR_13 = - VAR_14 ; VAR_38 -> VAR_43 ++ ; METHOD_3 ( & VAR_15 -> VAR_16 , VAR_17 ) ; for ( VAR_18 = VAR_19 -> VAR_20 - 1 ; VAR_21 >= 0 ; -- VAR_22 ) { METHOD_4 ( VAR_23 -> VAR_24 [ VAR_25 ] ) ; VAR_26 = METHOD_5 ( VAR_27 -> VAR_28 [ VAR_29 ] ) ; if ( VAR_30 != - VAR_31 && VAR_32 != - VAR_33 && VAR_34 != - VAR_35 && VAR_36 != - VAR_37 ) METHOD_6 ( & VAR_38 -> VAR_39 -> VAR_40 , ""%s,unlink-->%d\\n"" , VAR_41 , VAR_42 ) ; } METHOD_1 ( & VAR_38 -> VAR_16 , VAR_17 ) ; VAR_38 -> VAR_43 -- ; if ( ! VAR_38 -> VAR_43 ) METHOD_7 ( & VAR_38 -> METHOD_7 ) ; METHOD_3 ( & VAR_38 -> VAR_16 , VAR_17 ) ; }",460
461,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( VAR_7 == VAR_8 ) VAR_9 = VAR_10 ; else if ( VAR_11 == VAR_12 ) VAR_13 = VAR_14 ; else VAR_15 = VAR_16 ; if ( VAR_17 == VAR_18 ) VAR_19 = VAR_20 ; else if ( VAR_21 == VAR_22 ) VAR_23 = VAR_24 ; else if ( VAR_25 == VAR_26 ) VAR_27 = VAR_28 ; else if ( VAR_29 == VAR_30 ) VAR_31 = VAR_32 ; else VAR_33 = VAR_34 ; if ( VAR_35 == VAR_36 || VAR_37 == VAR_38 ) return VAR_39 ; if ( VAR_40 == VAR_41 ) VAR_42 = METHOD_1 ( ) ; VAR_43 = METHOD_2 ( VAR_44 , VAR_45 ) ; if ( VAR_46 ) { if ( VAR_47 & VAR_48 ) VAR_49 = VAR_50 ; else if ( VAR_51 & VAR_52 ) VAR_53 = VAR_54 ; if ( VAR_55 & VAR_56 ) { VAR_57 = VAR_58 ; } else if ( VAR_59 & VAR_60 ) { VAR_61 = VAR_62 ; } else if ( VAR_63 & VAR_64 ) { VAR_65 = VAR_66 ; } else if ( VAR_67 & VAR_68 ) { VAR_69 = VAR_70 ; } else { TYPE_8 VAR_71 = METHOD_3 ( VAR_72 ) ; if ( VAR_73 >= 6 && ! METHOD_4 ( VAR_74 + VAR_75 - 6 , "".local"" ) ) { if ( VAR_76 == VAR_77 ) VAR_78 = VAR_79 ; }  else if ( VAR_80 <= 15 && ! METHOD_5 ( VAR_81 , '.' ) && VAR_82 == VAR_83 )  { if ( VAR_84 == VAR_85 ) VAR_86 = VAR_87 ; }  else if ( ! METHOD_6 ( VAR_88 , '.' ) )  { if ( VAR_89 == VAR_90 ) VAR_91 = VAR_92 ; } } if ( VAR_93 == VAR_94 ) if ( VAR_95 == VAR_96 ) { VAR_97 = METHOD_7 ( VAR_98 , VAR_99 , VAR_100 , VAR_101 ) ; } else if ( VAR_102 == VAR_103 ) if ( VAR_104 == VAR_105 ) { VAR_106 = METHOD_8 ( VAR_107 , VAR_108 , VAR_109 , VAR_110 ) ; } else if ( VAR_111 == VAR_112 && VAR_113 == VAR_114 ) if ( VAR_115 == VAR_116 ) { VAR_117 = METHOD_9 ( VAR_118 , VAR_119 , VAR_120 ) ; } else if ( VAR_121 == VAR_122 ) if ( VAR_123 == VAR_124 ) { VAR_125 = METHOD_10 ( VAR_126 , VAR_127 , VAR_128 , VAR_129 ) ; } else { VAR_130 = VAR_131 ; } } return VAR_132 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; if ( VAR_7 == VAR_8 ) VAR_9 = VAR_10 ; else if ( VAR_11 == VAR_12 ) VAR_13 = VAR_14 ; else VAR_15 = VAR_16 ; if ( VAR_17 == VAR_18 ) VAR_19 = VAR_20 ; else if ( VAR_21 == VAR_22 ) VAR_23 = VAR_24 ; else if ( VAR_25 == VAR_26 ) VAR_27 = VAR_28 ; else if ( VAR_29 == VAR_30 ) VAR_31 = VAR_32 ; else VAR_33 = VAR_34 ; if ( VAR_35 == VAR_36 || VAR_37 == VAR_38 ) return VAR_39 ; if ( VAR_40 == VAR_41 ) VAR_42 = METHOD_1 ( ) ; VAR_43 = METHOD_2 ( VAR_44 , VAR_45 ) ; if ( VAR_46 ) { if ( VAR_47 & VAR_48 ) VAR_49 = VAR_50 ; else if ( VAR_51 & VAR_52 ) VAR_53 = VAR_54 ; if ( VAR_55 & VAR_56 ) { VAR_57 = VAR_58 ; } else if ( VAR_59 & VAR_60 ) { VAR_61 = VAR_62 ; } else if ( VAR_63 & VAR_64 ) { VAR_65 = VAR_66 ; } else if ( VAR_67 & VAR_68 ) { VAR_69 = VAR_70 ; } else { TYPE_8 VAR_71 = METHOD_3 ( VAR_72 ) ; if ( VAR_73 >= 6 && ! METHOD_4 ( VAR_74 + VAR_75 - 6 , "".local"" ) ) { if ( VAR_76 == VAR_77 ) VAR_78 = VAR_79 ; } else if ( VAR_80 <= 15 && ! METHOD_5 ( VAR_81 , '.' ) && VAR_82 == VAR_83 ) { if ( VAR_84 == VAR_85 ) VAR_86 = VAR_87 ; } else if ( ! METHOD_6 ( VAR_88 , '.' ) ) { if ( VAR_89 == VAR_90 ) VAR_91 = VAR_92 ; } } if ( VAR_93 == VAR_94 ) if ( VAR_95 == VAR_96 ) { VAR_97 = METHOD_7 ( VAR_98 , VAR_99 , VAR_100 , VAR_101 ) ; } else if ( VAR_102 == VAR_103 ) if ( VAR_104 == VAR_105 ) { VAR_106 = METHOD_8 ( VAR_107 , VAR_108 , VAR_109 , VAR_110 ) ; } else if ( VAR_111 == VAR_112 && VAR_113 == VAR_114 ) if ( VAR_115 == VAR_116 ) { VAR_117 = METHOD_9 ( VAR_118 , VAR_119 , VAR_120 ) ; } else if ( VAR_121 == VAR_122 ) if ( VAR_123 == VAR_124 ) { VAR_125 = METHOD_10 ( VAR_126 , VAR_127 , VAR_128 , VAR_129 ) ; } else { VAR_130 = VAR_131 ; } } return VAR_132 ; }",461
462,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( struct STRUCT_OR_UNION_4 * , struct STRUCT_OR_UNION_5 * , struct STRUCT_OR_UNION_6 * ) ) { struct STRUCT_OR_UNION_7 * VAR_2 ; struct STRUCT_OR_UNION_8 * VAR_3 = ( struct STRUCT_OR_UNION_9 * ) METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_10 * VAR_5 = VAR_6 -> VAR_7 && ! METHOD_3 ( ) ? METHOD_4 ( VAR_8 -> VAR_9 ) : VAR_10 ; struct STRUCT_OR_UNION_11 * VAR_11 ; struct STRUCT_OR_UNION_12 * VAR_12 ; unsigned TYPE_2 VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_3 VAR_17 , VAR_18 ; TYPE_4 VAR_19 ; TYPE_5 VAR_20 , VAR_21 = 0 , VAR_22 = 0 ; VAR_23 * VAR_24 , VAR_25 = 0 ;  VAR_26 = METHOD_5 ( VAR_27 , & VAR_28 ) ;  VAR_29 = * VAR_30 ; VAR_31 = METHOD_6 ( VAR_32 ) ; if ( METHOD_7 ( ! VAR_33 -> VAR_34 && VAR_35 -> VAR_36 > VAR_37 ) ) goto VAR_38 ; if ( METHOD_8 ( VAR_39 ) -> VAR_40 ) { if ( METHOD_9 ( VAR_41 ) -> VAR_42 > VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_10 ( VAR_46 ) -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; } if ( VAR_52 && VAR_53 -> VAR_54 < VAR_55 ) { if ( VAR_56 -> VAR_57 ) VAR_58 = VAR_59 -> VAR_60 ; } if ( VAR_61 < VAR_62 + sizeof ( struct STRUCT_OR_UNION_13 ) + 8 ) goto VAR_63 ; VAR_64 -= VAR_65 + sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_66 = METHOD_11 ( STRUCT_OR_UNION_15 , & METHOD_12 ( VAR_67 ) -> VAR_68 , & METHOD_13 ( VAR_69 ) -> VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 && ( VAR_74 = METHOD_14 ( VAR_75 ) ) ) goto VAR_76 ; VAR_77 = METHOD_15 ( VAR_78 -> VAR_79 . VAR_80 ) ; if ( METHOD_16 ( VAR_81 ) ) { unsigned TYPE_6 VAR_82 = METHOD_17 ( VAR_83 ) ; struct STRUCT_OR_UNION_16 * VAR_84 ; if ( VAR_85 - VAR_86 > VAR_87 || ( ( VAR_88 - VAR_89 ) & 7 ) || METHOD_18 ( VAR_90 ) || METHOD_19 ( VAR_91 ) < ( VAR_92 + sizeof ( struct STRUCT_OR_UNION_17 ) ) ) goto VAR_93 ; METHOD_20 ( VAR_94 , VAR_95 ) { if ( VAR_96 -> VAR_97 > VAR_98 || ( ( VAR_99 -> VAR_100 & 7 ) && VAR_101 -> VAR_102 ) || METHOD_21 ( VAR_103 ) < ( VAR_104 + VAR_105 + sizeof ( struct STRUCT_OR_UNION_18 ) ) ) goto VAR_106 ; if ( METHOD_22 ( VAR_107 ) ) goto VAR_108 ; METHOD_23 ( VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 ) { VAR_113 -> VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; } VAR_120 -> VAR_121 -= VAR_122 -> VAR_123 ; } VAR_124 = 0 ; VAR_125 = 0 ; * VAR_126 = VAR_127 ; VAR_128 = METHOD_24 ( METHOD_25 ( VAR_129 ) , VAR_130 , VAR_131 ) ; if ( ! VAR_132 ) { METHOD_26 ( STRUCT_OR_UNION_19 , METHOD_27 ( METHOD_28 ( VAR_133 ) ) , VAR_134 ) ; VAR_135 = - VAR_136 ; goto VAR_137 ; } VAR_138 = METHOD_29 ( VAR_139 ) -> VAR_140 ; METHOD_30 ( VAR_141 ) ; METHOD_31 ( VAR_142 , VAR_143 ) ; VAR_144 = ( struct STRUCT_OR_UNION_20 * ) METHOD_32 ( VAR_145 , sizeof ( struct STRUCT_OR_UNION_21 ) ) ; METHOD_33 ( VAR_146 , VAR_147 ) ; METHOD_34 ( VAR_148 ) ; METHOD_35 ( METHOD_36 ( VAR_149 ) , VAR_150 , VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = 0 ; VAR_157 -> VAR_158 = METHOD_37 ( VAR_159 ) ; VAR_160 -> VAR_161 = VAR_162 ; VAR_163 = METHOD_38 ( VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 - METHOD_39 ( VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_40 ( VAR_172 ) -> VAR_173 = METHOD_41 ( VAR_174 - sizeof ( struct STRUCT_OR_UNION_22 ) ) ; METHOD_42 ( & VAR_175 -> VAR_176 ) ; for ( ; ; ) { if ( VAR_177 ) { VAR_178 -> VAR_179 = VAR_180 ; METHOD_43 ( VAR_181 ) ; VAR_182 = ( struct STRUCT_OR_UNION_23 * ) METHOD_44 ( VAR_183 , sizeof ( struct STRUCT_OR_UNION_24 ) ) ; METHOD_45 ( VAR_184 , VAR_185 ) ; METHOD_46 ( VAR_186 ) ; METHOD_47 ( METHOD_48 ( VAR_187 ) , VAR_188 , VAR_189 ) ; VAR_190 += VAR_191 -> VAR_192 - VAR_193 - sizeof ( struct STRUCT_OR_UNION_25 ) ; VAR_194 -> VAR_195 = VAR_196 ; VAR_197 -> VAR_198 = 0 ; VAR_199 -> VAR_200 = METHOD_49 ( VAR_201 ) ; if ( VAR_202 -> VAR_203 ) VAR_204 -> VAR_205 |= METHOD_50 ( VAR_206 ) ; VAR_207 -> VAR_208 = VAR_209 ; METHOD_51 ( VAR_210 ) -> VAR_211 = METHOD_52 ( VAR_212 -> VAR_213 - sizeof ( struct STRUCT_OR_UNION_26 ) ) ; METHOD_53 ( VAR_214 , VAR_215 ) ; } VAR_216 = METHOD_54 ( STRUCT_OR_UNION_27 , VAR_217 , VAR_218 ) ; if ( ! VAR_219 ) METHOD_55 ( STRUCT_OR_UNION_28 , METHOD_56 ( & VAR_220 -> VAR_221 ) , VAR_222 ) ; if ( VAR_223 || ! VAR_224 ) break ; VAR_225 = VAR_226 ; VAR_227 = VAR_228 -> VAR_229 ; VAR_230 -> VAR_231 = VAR_232 ; } METHOD_57 ( VAR_233 ) ; if ( VAR_234 == 0 ) { METHOD_58 ( STRUCT_OR_UNION_29 , METHOD_59 ( & VAR_235 -> VAR_236 ) , VAR_237 ) ; METHOD_60 ( VAR_238 ) ; return 0 ; } METHOD_61 ( VAR_239 ) ; METHOD_62 ( STRUCT_OR_UNION_30 , METHOD_63 ( & VAR_240 -> VAR_241 ) , VAR_242 ) ; METHOD_64 ( VAR_243 ) ; return VAR_244 ; VAR_245 : METHOD_65 ( VAR_246 , VAR_247 ) { if ( VAR_248 == VAR_249 ) break ; VAR_250 -> VAR_251 = VAR_252 ; VAR_253 -> VAR_254 = VAR_255 ; VAR_256 -> VAR_257 += VAR_258 -> VAR_259 ; } } VAR_260 : VAR_261 = VAR_262 -> VAR_263 - VAR_264 ; VAR_265 = VAR_266 ; VAR_267 = VAR_268 -> VAR_269 . VAR_270 -> VAR_271 ; while ( VAR_272 > 0 ) { VAR_273 * VAR_274 ; VAR_275 = VAR_276 ; if ( VAR_277 > VAR_278 ) VAR_279 = VAR_280 ; if ( VAR_281 < VAR_282 ) { VAR_283 &= ~ 7 ; } VAR_284 = METHOD_66 ( VAR_285 + VAR_286 + sizeof ( struct STRUCT_OR_UNION_31 ) + VAR_287 + VAR_288 , VAR_289 ) ; if ( ! VAR_290 ) { METHOD_67 ( STRUCT_OR_UNION_32 , METHOD_68 ( METHOD_69 ( VAR_291 ) ) , VAR_292 ) ; VAR_293 = - VAR_294 ; goto VAR_295 ; } METHOD_70 ( VAR_296 , VAR_297 ) ; METHOD_71 ( VAR_298 , VAR_299 ) ; METHOD_72 ( VAR_300 , VAR_301 + VAR_302 + sizeof ( struct STRUCT_OR_UNION_33 ) ) ; METHOD_73 ( VAR_303 ) ; VAR_304 = ( struct STRUCT_OR_UNION_34 * ) ( METHOD_74 ( VAR_305 ) + VAR_306 ) ; VAR_307 -> VAR_308 = ( VAR_309 -> VAR_310 + VAR_311 + sizeof ( struct STRUCT_OR_UNION_35 ) ) ; if ( VAR_312 -> VAR_313 ) METHOD_75 ( VAR_314 , VAR_315 -> VAR_316 ) ; METHOD_76 ( VAR_317 , METHOD_77 ( VAR_318 ) , VAR_319 ) ; VAR_320 = METHOD_78 ( VAR_321 ) ; VAR_322 += VAR_323 - METHOD_79 ( VAR_324 ) ; * VAR_325 = VAR_326 ; VAR_327 -> VAR_328 = VAR_329 ; VAR_330 -> VAR_331 = 0 ; VAR_332 -> VAR_333 = VAR_334 ; METHOD_80 ( METHOD_81 ( VAR_335 , VAR_336 , METHOD_82 ( VAR_337 ) , VAR_338 ) ) ; VAR_339 -= VAR_340 ; VAR_341 -> VAR_342 = METHOD_83 ( VAR_343 ) ; if ( VAR_344 > 0 ) VAR_345 -> VAR_346 |= METHOD_84 ( VAR_347 ) ; METHOD_85 ( VAR_348 ) -> VAR_349 = METHOD_86 ( VAR_350 -> VAR_351 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; VAR_352 += VAR_353 ; VAR_354 += VAR_355 ; VAR_356 = METHOD_87 ( STRUCT_OR_UNION_37 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) goto VAR_360 ; METHOD_88 ( STRUCT_OR_UNION_38 , METHOD_89 ( METHOD_90 ( VAR_361 ) ) , VAR_362 ) ; } METHOD_91 ( STRUCT_OR_UNION_39 , METHOD_92 ( METHOD_93 ( VAR_363 ) ) , VAR_364 ) ; METHOD_94 ( VAR_365 ) ; return VAR_366 ; VAR_367 : if ( VAR_368 -> VAR_369 && METHOD_95 ( METHOD_96 ( VAR_370 ) ) ) METHOD_97 ( VAR_371 -> VAR_372 , VAR_373 ) ; VAR_374 -> VAR_375 = METHOD_98 ( VAR_376 ) -> VAR_377 ; METHOD_99 ( VAR_378 , VAR_379 , 0 , VAR_380 ) ; VAR_381 = - VAR_382 ; VAR_383 : METHOD_100 ( STRUCT_OR_UNION_40 , METHOD_101 ( METHOD_102 ( VAR_384 ) ) , VAR_385 ) ; METHOD_103 ( VAR_386 ) ; return VAR_387 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( struct STRUCT_OR_UNION_4 * , struct STRUCT_OR_UNION_5 * , struct STRUCT_OR_UNION_6 * ) ) { struct STRUCT_OR_UNION_7 * VAR_2 ; struct STRUCT_OR_UNION_8 * VAR_3 = ( struct STRUCT_OR_UNION_9 * ) METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_10 * VAR_5 = VAR_6 -> VAR_7 && ! METHOD_3 ( ) ? METHOD_4 ( VAR_8 -> VAR_9 ) : VAR_10 ; struct STRUCT_OR_UNION_11 * VAR_11 ; struct STRUCT_OR_UNION_12 * VAR_12 ; unsigned TYPE_2 VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_3 VAR_17 , VAR_18 ; TYPE_4 VAR_19 ; TYPE_5 VAR_20 , VAR_21 = 0 , VAR_22 = 0 ; VAR_23 * VAR_24 , VAR_25 = 0 ; VAR_26 = METHOD_5 ( VAR_27 , & VAR_28 ) ; VAR_29 = * VAR_30 ; VAR_31 = METHOD_6 ( VAR_32 ) ; if ( METHOD_7 ( ! VAR_33 -> VAR_34 && VAR_35 -> VAR_36 > VAR_37 ) ) goto VAR_38 ; if ( METHOD_8 ( VAR_39 ) -> VAR_40 ) { if ( METHOD_9 ( VAR_41 ) -> VAR_42 > VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_10 ( VAR_46 ) -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; } if ( VAR_52 && VAR_53 -> VAR_54 < VAR_55 ) { if ( VAR_56 -> VAR_57 ) VAR_58 = VAR_59 -> VAR_60 ; } if ( VAR_61 < VAR_62 + sizeof ( struct STRUCT_OR_UNION_13 ) + 8 ) goto VAR_63 ; VAR_64 -= VAR_65 + sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_66 = METHOD_11 ( STRUCT_OR_UNION_15 , & METHOD_12 ( VAR_67 ) -> VAR_68 , & METHOD_13 ( VAR_69 ) -> VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 && ( VAR_74 = METHOD_14 ( VAR_75 ) ) ) goto VAR_76 ; VAR_77 = METHOD_15 ( VAR_78 -> VAR_79 . VAR_80 ) ; if ( METHOD_16 ( VAR_81 ) ) { unsigned TYPE_6 VAR_82 = METHOD_17 ( VAR_83 ) ; struct STRUCT_OR_UNION_16 * VAR_84 ; if ( VAR_85 - VAR_86 > VAR_87 || ( ( VAR_88 - VAR_89 ) & 7 ) || METHOD_18 ( VAR_90 ) || METHOD_19 ( VAR_91 ) < ( VAR_92 + sizeof ( struct STRUCT_OR_UNION_17 ) ) ) goto VAR_93 ; METHOD_20 ( VAR_94 , VAR_95 ) { if ( VAR_96 -> VAR_97 > VAR_98 || ( ( VAR_99 -> VAR_100 & 7 ) && VAR_101 -> VAR_102 ) || METHOD_21 ( VAR_103 ) < ( VAR_104 + VAR_105 + sizeof ( struct STRUCT_OR_UNION_18 ) ) ) goto VAR_106 ; if ( METHOD_22 ( VAR_107 ) ) goto VAR_108 ; METHOD_23 ( VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 ) { VAR_113 -> VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; } VAR_120 -> VAR_121 -= VAR_122 -> VAR_123 ; } VAR_124 = 0 ; VAR_125 = 0 ; * VAR_126 = VAR_127 ; VAR_128 = METHOD_24 ( METHOD_25 ( VAR_129 ) , VAR_130 , VAR_131 ) ; if ( ! VAR_132 ) { METHOD_26 ( STRUCT_OR_UNION_19 , METHOD_27 ( METHOD_28 ( VAR_133 ) ) , VAR_134 ) ; VAR_135 = - VAR_136 ; goto VAR_137 ; } VAR_138 = METHOD_29 ( VAR_139 ) -> VAR_140 ; METHOD_30 ( VAR_141 ) ; METHOD_31 ( VAR_142 , VAR_143 ) ; VAR_144 = ( struct STRUCT_OR_UNION_20 * ) METHOD_32 ( VAR_145 , sizeof ( struct STRUCT_OR_UNION_21 ) ) ; METHOD_33 ( VAR_146 , VAR_147 ) ; METHOD_34 ( VAR_148 ) ; METHOD_35 ( METHOD_36 ( VAR_149 ) , VAR_150 , VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = 0 ; VAR_157 -> VAR_158 = METHOD_37 ( VAR_159 ) ; VAR_160 -> VAR_161 = VAR_162 ; VAR_163 = METHOD_38 ( VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 - METHOD_39 ( VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_40 ( VAR_172 ) -> VAR_173 = METHOD_41 ( VAR_174 - sizeof ( struct STRUCT_OR_UNION_22 ) ) ; METHOD_42 ( & VAR_175 -> VAR_176 ) ; for ( ; ; ) { if ( VAR_177 ) { VAR_178 -> VAR_179 = VAR_180 ; METHOD_43 ( VAR_181 ) ; VAR_182 = ( struct STRUCT_OR_UNION_23 * ) METHOD_44 ( VAR_183 , sizeof ( struct STRUCT_OR_UNION_24 ) ) ; METHOD_45 ( VAR_184 , VAR_185 ) ; METHOD_46 ( VAR_186 ) ; METHOD_47 ( METHOD_48 ( VAR_187 ) , VAR_188 , VAR_189 ) ; VAR_190 += VAR_191 -> VAR_192 - VAR_193 - sizeof ( struct STRUCT_OR_UNION_25 ) ; VAR_194 -> VAR_195 = VAR_196 ; VAR_197 -> VAR_198 = 0 ; VAR_199 -> VAR_200 = METHOD_49 ( VAR_201 ) ; if ( VAR_202 -> VAR_203 ) VAR_204 -> VAR_205 |= METHOD_50 ( VAR_206 ) ; VAR_207 -> VAR_208 = VAR_209 ; METHOD_51 ( VAR_210 ) -> VAR_211 = METHOD_52 ( VAR_212 -> VAR_213 - sizeof ( struct STRUCT_OR_UNION_26 ) ) ; METHOD_53 ( VAR_214 , VAR_215 ) ; } VAR_216 = METHOD_54 ( STRUCT_OR_UNION_27 , VAR_217 , VAR_218 ) ; if ( ! VAR_219 ) METHOD_55 ( STRUCT_OR_UNION_28 , METHOD_56 ( & VAR_220 -> VAR_221 ) , VAR_222 ) ; if ( VAR_223 || ! VAR_224 ) break ; VAR_225 = VAR_226 ; VAR_227 = VAR_228 -> VAR_229 ; VAR_230 -> VAR_231 = VAR_232 ; } METHOD_57 ( VAR_233 ) ; if ( VAR_234 == 0 ) { METHOD_58 ( STRUCT_OR_UNION_29 , METHOD_59 ( & VAR_235 -> VAR_236 ) , VAR_237 ) ; METHOD_60 ( VAR_238 ) ; return 0 ; } METHOD_61 ( VAR_239 ) ; METHOD_62 ( STRUCT_OR_UNION_30 , METHOD_63 ( & VAR_240 -> VAR_241 ) , VAR_242 ) ; METHOD_64 ( VAR_243 ) ; return VAR_244 ; VAR_245 : METHOD_65 ( VAR_246 , VAR_247 ) { if ( VAR_248 == VAR_249 ) break ; VAR_250 -> VAR_251 = VAR_252 ; VAR_253 -> VAR_254 = VAR_255 ; VAR_256 -> VAR_257 += VAR_258 -> VAR_259 ; } } VAR_260 : VAR_261 = VAR_262 -> VAR_263 - VAR_264 ; VAR_265 = VAR_266 ; VAR_267 = VAR_268 -> VAR_269 . VAR_270 -> VAR_271 ; while ( VAR_272 > 0 ) { VAR_273 * VAR_274 ; VAR_275 = VAR_276 ; if ( VAR_277 > VAR_278 ) VAR_279 = VAR_280 ; if ( VAR_281 < VAR_282 ) { VAR_283 &= ~ 7 ; } VAR_284 = METHOD_66 ( VAR_285 + VAR_286 + sizeof ( struct STRUCT_OR_UNION_31 ) + VAR_287 + VAR_288 , VAR_289 ) ; if ( ! VAR_290 ) { METHOD_67 ( STRUCT_OR_UNION_32 , METHOD_68 ( METHOD_69 ( VAR_291 ) ) , VAR_292 ) ; VAR_293 = - VAR_294 ; goto VAR_295 ; } METHOD_70 ( VAR_296 , VAR_297 ) ; METHOD_71 ( VAR_298 , VAR_299 ) ; METHOD_72 ( VAR_300 , VAR_301 + VAR_302 + sizeof ( struct STRUCT_OR_UNION_33 ) ) ; METHOD_73 ( VAR_303 ) ; VAR_304 = ( struct STRUCT_OR_UNION_34 * ) ( METHOD_74 ( VAR_305 ) + VAR_306 ) ; VAR_307 -> VAR_308 = ( VAR_309 -> VAR_310 + VAR_311 + sizeof ( struct STRUCT_OR_UNION_35 ) ) ; if ( VAR_312 -> VAR_313 ) METHOD_75 ( VAR_314 , VAR_315 -> VAR_316 ) ; METHOD_76 ( VAR_317 , METHOD_77 ( VAR_318 ) , VAR_319 ) ; VAR_320 = METHOD_78 ( VAR_321 ) ; VAR_322 += VAR_323 - METHOD_79 ( VAR_324 ) ; * VAR_325 = VAR_326 ; VAR_327 -> VAR_328 = VAR_329 ; VAR_330 -> VAR_331 = 0 ; VAR_332 -> VAR_333 = VAR_334 ; METHOD_80 ( METHOD_81 ( VAR_335 , VAR_336 , METHOD_82 ( VAR_337 ) , VAR_338 ) ) ; VAR_339 -= VAR_340 ; VAR_341 -> VAR_342 = METHOD_83 ( VAR_343 ) ; if ( VAR_344 > 0 ) VAR_345 -> VAR_346 |= METHOD_84 ( VAR_347 ) ; METHOD_85 ( VAR_348 ) -> VAR_349 = METHOD_86 ( VAR_350 -> VAR_351 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; VAR_352 += VAR_353 ; VAR_354 += VAR_355 ; VAR_356 = METHOD_87 ( STRUCT_OR_UNION_37 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) goto VAR_360 ; METHOD_88 ( STRUCT_OR_UNION_38 , METHOD_89 ( METHOD_90 ( VAR_361 ) ) , VAR_362 ) ; } METHOD_91 ( STRUCT_OR_UNION_39 , METHOD_92 ( METHOD_93 ( VAR_363 ) ) , VAR_364 ) ; METHOD_94 ( VAR_365 ) ; return VAR_366 ; VAR_367 : if ( VAR_368 -> VAR_369 && METHOD_95 ( METHOD_96 ( VAR_370 ) ) ) METHOD_97 ( VAR_371 -> VAR_372 , VAR_373 ) ; VAR_374 -> VAR_375 = METHOD_98 ( VAR_376 ) -> VAR_377 ; METHOD_99 ( VAR_378 , VAR_379 , 0 , VAR_380 ) ; VAR_381 = - VAR_382 ; VAR_383 : METHOD_100 ( STRUCT_OR_UNION_40 , METHOD_101 ( METHOD_102 ( VAR_384 ) ) , VAR_385 ) ; METHOD_103 ( VAR_386 ) ; return VAR_387 ; }",462
463,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 , VAR_10 = VAR_11 & VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 ; struct STRUCT_OR_UNION_8 * VAR_14 = VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ;  METHOD_3 ( ""size%zuflags0x%xtimeo%ld\\n"" , VAR_19 , VAR_20 , VAR_21 ) ;  if ( VAR_22 & VAR_23 ) goto VAR_24 ; while ( 1 ) { if ( ! METHOD_4 ( & VAR_25 -> VAR_26 ) ) { VAR_27 = METHOD_5 ( VAR_28 , VAR_29 ) ; break ; } if ( VAR_30 -> VAR_31 ) { VAR_32 = METHOD_6 ( VAR_33 , VAR_34 ) ; break ; } if ( ! METHOD_7 ( VAR_35 , & VAR_36 ) ) { if ( VAR_37 ) { VAR_38 = - VAR_39 ; break ; } VAR_40 = METHOD_8 ( * METHOD_9 ( VAR_41 ) , ( ! METHOD_10 ( & VAR_42 -> VAR_43 ) || VAR_44 -> VAR_45 || METHOD_11 ( VAR_46 , & VAR_47 ) ) , VAR_48 ) ; METHOD_12 ( ""recvmsgwokeinc%ptimeo%ld\\n"" , VAR_49 , VAR_50 ) ; if ( VAR_51 > 0 || VAR_52 == VAR_53 ) continue ; VAR_54 = VAR_55 ; if ( VAR_56 == 0 ) VAR_57 = - VAR_58 ; break ; } METHOD_13 ( ""copyinginc%pfrom%pI4:%utouser\\n"" , VAR_59 , & VAR_60 -> VAR_61 -> VAR_62 , METHOD_14 ( VAR_63 -> VAR_64 . VAR_65 ) ) ; VAR_66 = VAR_67 -> VAR_68 -> VAR_69 -> METHOD_15 ( VAR_70 , VAR_71 -> VAR_72 , VAR_73 ) ; if ( VAR_74 < 0 ) break ; if ( ! METHOD_16 ( VAR_75 , VAR_76 , ! ( VAR_77 & VAR_78 ) ) ) { METHOD_17 ( VAR_79 ) ; VAR_80 = VAR_81 ; METHOD_18 ( VAR_82 ) ; continue ; } if ( VAR_83 < METHOD_19 ( VAR_84 -> VAR_85 . VAR_86 ) ) { if ( VAR_87 & VAR_88 ) VAR_89 = METHOD_20 ( VAR_90 -> VAR_91 . VAR_92 ) ; VAR_93 -> VAR_94 |= VAR_95 ; } if ( METHOD_21 ( VAR_96 , VAR_97 ) ) { VAR_98 = - VAR_99 ; goto VAR_100 ; } METHOD_22 ( VAR_101 ) ; VAR_102 = ( struct STRUCT_OR_UNION_9 * ) VAR_103 -> VAR_104 ; if ( VAR_105 ) { VAR_106 -> VAR_107 = VAR_108 ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 . VAR_113 ; VAR_114 -> VAR_115 . VAR_116 = VAR_117 -> VAR_118 ; METHOD_23 ( VAR_119 -> VAR_120 , 0 , sizeof ( VAR_121 -> VAR_122 ) ) ;  }  break ; } if ( VAR_123 ) METHOD_24 ( VAR_124 ) ; VAR_125 : return VAR_126 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 , VAR_10 = VAR_11 & VAR_12 ; struct STRUCT_OR_UNION_7 * VAR_13 ; struct STRUCT_OR_UNION_8 * VAR_14 = VAR_15 ; VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; METHOD_3 ( ""size%zuflags0x%xtimeo%ld\\n"" , VAR_19 , VAR_20 , VAR_21 ) ; if ( VAR_22 & VAR_23 ) goto VAR_24 ; while ( 1 ) { if ( ! METHOD_4 ( & VAR_25 -> VAR_26 ) ) { VAR_27 = METHOD_5 ( VAR_28 , VAR_29 ) ; break ; } if ( VAR_30 -> VAR_31 ) { VAR_32 = METHOD_6 ( VAR_33 , VAR_34 ) ; break ; } if ( ! METHOD_7 ( VAR_35 , & VAR_36 ) ) { if ( VAR_37 ) { VAR_38 = - VAR_39 ; break ; } VAR_40 = METHOD_8 ( * METHOD_9 ( VAR_41 ) , ( ! METHOD_10 ( & VAR_42 -> VAR_43 ) || VAR_44 -> VAR_45 || METHOD_11 ( VAR_46 , & VAR_47 ) ) , VAR_48 ) ; METHOD_12 ( ""recvmsgwokeinc%ptimeo%ld\\n"" , VAR_49 , VAR_50 ) ; if ( VAR_51 > 0 || VAR_52 == VAR_53 ) continue ; VAR_54 = VAR_55 ; if ( VAR_56 == 0 ) VAR_57 = - VAR_58 ; break ; } METHOD_13 ( ""copyinginc%pfrom%pI4:%utouser\\n"" , VAR_59 , & VAR_60 -> VAR_61 -> VAR_62 , METHOD_14 ( VAR_63 -> VAR_64 . VAR_65 ) ) ; VAR_103 -> VAR_127 = sizeof ( * VAR_121 ) ; VAR_66 = VAR_67 -> VAR_68 -> VAR_69 -> METHOD_15 ( VAR_70 , VAR_71 -> VAR_72 , VAR_73 ) ; if ( VAR_74 < 0 ) break ; if ( ! METHOD_16 ( VAR_75 , VAR_76 , ! ( VAR_77 & VAR_78 ) ) ) { METHOD_17 ( VAR_79 ) ; VAR_80 = VAR_81 ; METHOD_18 ( VAR_82 ) ; continue ; } if ( VAR_83 < METHOD_19 ( VAR_84 -> VAR_85 . VAR_86 ) ) { if ( VAR_87 & VAR_88 ) VAR_89 = METHOD_20 ( VAR_90 -> VAR_91 . VAR_92 ) ; VAR_93 -> VAR_94 |= VAR_95 ; } if ( METHOD_21 ( VAR_96 , VAR_97 ) ) { VAR_98 = - VAR_99 ; goto VAR_100 ; } METHOD_22 ( VAR_101 ) ; VAR_102 = ( struct STRUCT_OR_UNION_9 * ) VAR_103 -> VAR_104 ; if ( VAR_105 ) { VAR_106 -> VAR_107 = VAR_108 ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 . VAR_113 ; VAR_114 -> VAR_115 . VAR_116 = VAR_117 -> VAR_118 ; METHOD_23 ( VAR_119 -> VAR_120 , 0 , sizeof ( VAR_121 -> VAR_122 ) ) ; } break ; } if ( VAR_123 ) METHOD_24 ( VAR_124 ) ; VAR_125 : return VAR_126 ; }",463
464,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { TYPE_5 VAR_7 = 0 ; TYPE_6 VAR_8 = - VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ; struct STRUCT_OR_UNION_4 * VAR_11 ; VAR_12 = ( struct STRUCT_OR_UNION_5 * ) VAR_13 -> VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; if ( ! VAR_20 ) goto VAR_21 ; VAR_22 = VAR_23 -> VAR_24 ; if ( VAR_25 < VAR_26 ) { VAR_27 -> VAR_28 |= VAR_29 ; VAR_30 = VAR_31 ; } VAR_32 = METHOD_2 ( VAR_33 , 0 , VAR_34 -> VAR_35 , VAR_36 ) ; if ( VAR_37 ) goto VAR_38 ; METHOD_3 ( VAR_39 , VAR_40 , VAR_41 ) ; if ( VAR_42 ) { VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = METHOD_4 ( VAR_48 ) -> VAR_49 ;  }  if ( VAR_50 ) * VAR_51 = sizeof ( * VAR_52 ) ; if ( VAR_53 & VAR_54 ) VAR_55 = VAR_56 -> VAR_57 ; VAR_58 : METHOD_5 ( VAR_59 , VAR_60 ) ; VAR_61 : if ( VAR_62 ) return VAR_63 ; return VAR_64 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , TYPE_4 * VAR_6 ) { TYPE_5 VAR_7 = 0 ; TYPE_6 VAR_8 = - VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 ; struct STRUCT_OR_UNION_4 * VAR_11 ; VAR_12 = ( struct STRUCT_OR_UNION_5 * ) VAR_13 -> VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; if ( ! VAR_20 ) goto VAR_21 ; VAR_22 = VAR_23 -> VAR_24 ; if ( VAR_25 < VAR_26 ) { VAR_27 -> VAR_28 |= VAR_29 ; VAR_30 = VAR_31 ; } VAR_32 = METHOD_2 ( VAR_33 , 0 , VAR_34 -> VAR_35 , VAR_36 ) ; if ( VAR_37 ) goto VAR_38 ; METHOD_3 ( VAR_39 , VAR_40 , VAR_41 ) ; if ( VAR_42 ) { VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = METHOD_4 ( VAR_48 ) -> VAR_49 ; * VAR_51 = sizeof ( * VAR_52 ) ; } if ( VAR_53 & VAR_54 ) VAR_55 = VAR_56 -> VAR_57 ; VAR_58 : METHOD_5 ( VAR_59 , VAR_60 ) ; VAR_61 : if ( VAR_62 ) return VAR_63 ; return VAR_64 ; }",464
465," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  const TYPE_2 VAR_1 = METHOD_1 ( VAR_2 , VAR_3 ) ; const TYPE_3 VAR_4 = METHOD_2 ( VAR_5 , - VAR_6 ) ; const TYPE_4 VAR_7 = METHOD_3 ( VAR_8 , VAR_9 ) ; const TYPE_5 VAR_10 = METHOD_4 ( VAR_11 , - VAR_12 ) ; const TYPE_6 VAR_13 = METHOD_5 ( VAR_14 , VAR_15 ) ; const TYPE_7 VAR_16 = METHOD_6 ( VAR_17 , - VAR_18 ) ; const TYPE_8 VAR_19 = METHOD_7 ( VAR_20 , VAR_21 ) ; const TYPE_9 VAR_22 = METHOD_8 ( VAR_23 , - VAR_24 ) ; const TYPE_10 VAR_25 = METHOD_9 ( VAR_26 , VAR_27 ) ; const TYPE_11 VAR_28 = METHOD_10 ( VAR_29 , - VAR_30 ) ; const TYPE_12 VAR_31 = METHOD_11 ( - VAR_32 , VAR_33 ) ; const TYPE_13 VAR_34 = METHOD_12 ( VAR_35 , - VAR_36 ) ;  const TYPE_14 VAR_37 = METHOD_13 ( VAR_38 ) ;  const TYPE_15 VAR_39 = METHOD_14 ( 0 ) ; const TYPE_16 VAR_40 = METHOD_15 ( VAR_41 ) ; TYPE_17 VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 , VAR_52 , VAR_53 , VAR_54 , VAR_55 , VAR_56 , VAR_57 ; TYPE_18 VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 , VAR_72 , VAR_73 ; TYPE_19 VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 , VAR_88 , VAR_89 ; TYPE_20 VAR_90 , VAR_91 , VAR_92 , VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 ; TYPE_21 VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 , VAR_104 , VAR_105 ; VAR_106 = VAR_107 [ 7 ] ; VAR_108 = VAR_109 [ 0 ] ; VAR_110 = VAR_111 [ 5 ] ; VAR_112 = VAR_113 [ 2 ] ; VAR_114 = VAR_115 [ 3 ] ; VAR_116 = VAR_117 [ 4 ] ; VAR_118 = VAR_119 [ 1 ] ; VAR_120 = VAR_121 [ 6 ] ; VAR_122 = METHOD_16 ( VAR_123 , VAR_124 ) ; VAR_125 = METHOD_17 ( VAR_126 , VAR_127 ) ; VAR_128 = METHOD_18 ( VAR_129 , VAR_130 ) ; VAR_131 = METHOD_19 ( VAR_132 , VAR_133 ) ; VAR_134 = METHOD_20 ( VAR_135 , VAR_136 ) ; VAR_137 = METHOD_21 ( VAR_138 , VAR_139 ) ; VAR_140 = METHOD_22 ( VAR_141 , VAR_142 ) ; VAR_143 = METHOD_23 ( VAR_144 , VAR_145 ) ; VAR_146 = METHOD_24 ( VAR_147 , VAR_148 ) ; VAR_149 = METHOD_25 ( VAR_150 , VAR_151 ) ; VAR_152 = METHOD_26 ( VAR_153 , VAR_154 ) ; VAR_155 = METHOD_27 ( VAR_156 , VAR_157 ) ; VAR_158 = METHOD_28 ( VAR_159 , VAR_160 ) ; VAR_161 = METHOD_29 ( VAR_162 , VAR_163 ) ; VAR_164 = METHOD_30 ( VAR_165 , VAR_166 ) ; VAR_167 = METHOD_31 ( VAR_168 , VAR_169 ) ; VAR_170 = METHOD_32 ( VAR_171 , VAR_172 ) ; VAR_173 = METHOD_33 ( VAR_174 , VAR_175 ) ; VAR_176 = METHOD_34 ( VAR_177 , VAR_178 ) ; VAR_179 = METHOD_35 ( VAR_180 , VAR_181 ) ; VAR_182 = METHOD_36 ( VAR_183 , VAR_184 ) ; VAR_185 = METHOD_37 ( VAR_186 , VAR_187 ) ; VAR_188 = METHOD_38 ( VAR_189 , VAR_190 ) ; VAR_191 = METHOD_39 ( VAR_192 , VAR_193 ) ; VAR_194 = METHOD_40 ( VAR_195 , VAR_196 ) ; VAR_197 = METHOD_41 ( VAR_198 , VAR_199 ) ; VAR_200 = METHOD_42 ( VAR_201 , VAR_202 ) ; VAR_203 = METHOD_43 ( VAR_204 , VAR_205 ) ; VAR_206 = METHOD_44 ( VAR_207 , VAR_208 ) ; VAR_209 = METHOD_45 ( VAR_210 , VAR_211 ) ; VAR_212 = METHOD_46 ( VAR_213 , VAR_214 ) ; VAR_215 = METHOD_47 ( VAR_216 , VAR_217 ) ; VAR_218 = METHOD_48 ( VAR_219 , VAR_220 ) ; VAR_221 = METHOD_49 ( VAR_222 , VAR_223 ) ; VAR_224 = METHOD_50 ( VAR_225 , VAR_226 ) ; VAR_227 = METHOD_51 ( VAR_228 , VAR_229 ) ; VAR_230 = METHOD_52 ( VAR_231 , VAR_232 ) ; VAR_233 = METHOD_53 ( VAR_234 , VAR_235 ) ; VAR_236 = METHOD_54 ( VAR_237 , VAR_238 ) ; VAR_239 = METHOD_55 ( VAR_240 , VAR_241 ) ; VAR_242 = METHOD_56 ( VAR_243 , VAR_244 ) ; VAR_245 = METHOD_57 ( VAR_246 , VAR_247 ) ; VAR_248 = METHOD_58 ( VAR_249 , VAR_250 ) ; VAR_251 = METHOD_59 ( VAR_252 , VAR_253 ) ; VAR_254 = METHOD_60 ( VAR_255 , VAR_256 ) ; VAR_257 = METHOD_61 ( VAR_258 , VAR_259 ) ; VAR_260 = METHOD_62 ( VAR_261 , VAR_262 ) ; VAR_263 = METHOD_63 ( VAR_264 , VAR_265 ) ; VAR_266 = METHOD_64 ( VAR_267 , VAR_268 ) ; VAR_269 = METHOD_65 ( VAR_270 , VAR_271 ) ; VAR_272 = METHOD_66 ( VAR_273 , VAR_274 ) ; VAR_275 = METHOD_67 ( VAR_276 , VAR_277 ) ; VAR_278 = METHOD_68 ( VAR_279 , VAR_280 ) ; VAR_281 = METHOD_69 ( VAR_282 , VAR_283 ) ; VAR_284 = METHOD_70 ( VAR_285 , VAR_286 ) ; VAR_287 = METHOD_71 ( VAR_288 , VAR_289 ) ; VAR_290 = METHOD_72 ( VAR_291 , VAR_292 ) ; VAR_293 = METHOD_73 ( VAR_294 , VAR_295 ) ; VAR_296 = METHOD_74 ( VAR_297 , VAR_298 ) ; VAR_299 = METHOD_75 ( VAR_300 , VAR_301 ) ; VAR_302 = METHOD_76 ( VAR_303 , VAR_304 ) ; VAR_305 = METHOD_77 ( VAR_306 , VAR_307 ) ; VAR_308 = METHOD_78 ( VAR_309 , VAR_310 ) ; VAR_311 = METHOD_79 ( VAR_312 , VAR_313 ) ; VAR_314 = METHOD_80 ( VAR_315 , VAR_316 ) ; VAR_317 = METHOD_81 ( VAR_318 , VAR_319 ) ; VAR_320 = METHOD_82 ( VAR_321 , VAR_322 ) ; VAR_323 = METHOD_83 ( VAR_324 , VAR_325 ) ; VAR_326 = METHOD_84 ( VAR_327 , VAR_328 ) ; VAR_329 = METHOD_85 ( VAR_330 , VAR_331 ) ; VAR_332 = METHOD_86 ( VAR_333 , VAR_334 ) ; VAR_335 = METHOD_87 ( VAR_336 , VAR_337 ) ; VAR_338 [ 0 ] = METHOD_88 ( VAR_339 , VAR_340 ) ; VAR_341 [ 1 ] = METHOD_89 ( VAR_342 , VAR_343 ) ; VAR_344 [ 2 ] = METHOD_90 ( VAR_345 , VAR_346 ) ; VAR_347 [ 3 ] = METHOD_91 ( VAR_348 , VAR_349 ) ; VAR_350 [ 4 ] = METHOD_92 ( VAR_351 , VAR_352 ) ; VAR_353 [ 5 ] = METHOD_93 ( VAR_354 , VAR_355 ) ; VAR_356 [ 6 ] = METHOD_94 ( VAR_357 , VAR_358 ) ; VAR_359 [ 7 ] = METHOD_95 ( VAR_360 , VAR_361 ) ; VAR_362 = METHOD_96 ( VAR_363 [ 0 ] , VAR_364 [ 2 ] ) ; VAR_365 = METHOD_97 ( VAR_366 [ 1 ] , VAR_367 [ 3 ] ) ; VAR_368 = METHOD_98 ( VAR_369 [ 0 ] , VAR_370 [ 2 ] ) ; VAR_371 = METHOD_99 ( VAR_372 [ 1 ] , VAR_373 [ 3 ] ) ; VAR_374 = METHOD_100 ( VAR_375 [ 4 ] , VAR_376 [ 5 ] ) ; VAR_377 = METHOD_101 ( VAR_378 [ 4 ] , VAR_379 [ 5 ] ) ; VAR_380 = METHOD_102 ( VAR_381 [ 6 ] , VAR_382 [ 7 ] ) ; VAR_383 = METHOD_103 ( VAR_384 [ 6 ] , VAR_385 [ 7 ] ) ; VAR_386 = METHOD_104 ( VAR_387 , VAR_388 ) ; VAR_389 = METHOD_105 ( VAR_390 , VAR_391 ) ; VAR_392 = METHOD_106 ( VAR_393 , VAR_394 ) ; VAR_395 = METHOD_107 ( VAR_396 , VAR_397 ) ; VAR_398 = METHOD_108 ( VAR_399 , VAR_400 ) ; VAR_401 = METHOD_109 ( VAR_402 , VAR_403 ) ; VAR_404 = METHOD_110 ( VAR_405 , VAR_406 ) ; VAR_407 = METHOD_111 ( VAR_408 , VAR_409 ) ; VAR_410 = METHOD_112 ( VAR_411 , VAR_412 ) ; VAR_413 = METHOD_113 ( VAR_414 , VAR_415 ) ; VAR_416 = METHOD_114 ( VAR_417 , VAR_418 ) ; VAR_419 = METHOD_115 ( VAR_420 , VAR_421 ) ; VAR_422 = METHOD_116 ( VAR_423 , VAR_424 ) ; VAR_425 = METHOD_117 ( VAR_426 , VAR_427 ) ; VAR_428 = METHOD_118 ( VAR_429 , VAR_430 ) ; VAR_431 = METHOD_119 ( VAR_432 , VAR_433 ) ; VAR_434 = METHOD_120 ( VAR_435 , VAR_436 ) ; VAR_437 = METHOD_121 ( VAR_438 , VAR_439 ) ; VAR_440 = METHOD_122 ( VAR_441 , VAR_442 ) ; VAR_443 = METHOD_123 ( VAR_444 , VAR_445 ) ; VAR_446 = METHOD_124 ( VAR_447 , VAR_448 ) ; VAR_449 = METHOD_125 ( VAR_450 , VAR_451 ) ; VAR_452 = METHOD_126 ( VAR_453 , VAR_454 ) ; VAR_455 = METHOD_127 ( VAR_456 , VAR_457 ) ; VAR_458 = METHOD_128 ( VAR_459 , VAR_460 ) ; VAR_461 = METHOD_129 ( VAR_462 , VAR_463 ) ; VAR_464 = METHOD_130 ( VAR_465 , VAR_466 ) ; VAR_467 = METHOD_131 ( VAR_468 , VAR_469 ) ; VAR_470 = METHOD_132 ( VAR_471 , VAR_472 ) ; VAR_473 = METHOD_133 ( VAR_474 , VAR_475 ) ; VAR_476 = METHOD_134 ( VAR_477 , VAR_478 ) ; VAR_479 = METHOD_135 ( VAR_480 , VAR_481 ) ; VAR_482 = METHOD_136 ( VAR_483 , VAR_484 ) ; VAR_485 = METHOD_137 ( VAR_486 , VAR_487 ) ; VAR_488 = METHOD_138 ( VAR_489 , VAR_490 ) ; VAR_491 = METHOD_139 ( VAR_492 , VAR_493 ) ; VAR_494 = METHOD_140 ( VAR_495 , VAR_496 ) ; VAR_497 = METHOD_141 ( VAR_498 , VAR_499 ) ; VAR_500 = METHOD_142 ( VAR_501 , VAR_502 ) ; VAR_503 = METHOD_143 ( VAR_504 , VAR_505 ) ; VAR_506 = METHOD_144 ( VAR_507 , VAR_508 ) ; VAR_509 = METHOD_145 ( VAR_510 , VAR_511 ) ; VAR_512 = METHOD_146 ( VAR_513 , VAR_514 ) ; VAR_515 = METHOD_147 ( VAR_516 , VAR_517 ) ; VAR_518 = METHOD_148 ( VAR_519 , VAR_520 ) ; VAR_521 = METHOD_149 ( VAR_522 , VAR_523 ) ; VAR_524 = METHOD_150 ( VAR_525 , VAR_526 ) ; VAR_527 = METHOD_151 ( VAR_528 , VAR_529 ) ; VAR_530 = METHOD_152 ( VAR_531 , VAR_532 ) ; VAR_533 = METHOD_153 ( VAR_534 , VAR_535 ) ; VAR_536 = METHOD_154 ( VAR_537 , VAR_538 ) ; VAR_539 = METHOD_155 ( VAR_540 , VAR_541 ) ; VAR_542 = METHOD_156 ( VAR_543 , VAR_544 ) ; VAR_545 = METHOD_157 ( VAR_546 , VAR_547 ) ; VAR_548 = METHOD_158 ( VAR_549 , VAR_550 ) ; VAR_551 = METHOD_159 ( VAR_552 , VAR_553 ) ; VAR_554 = METHOD_160 ( VAR_555 , VAR_556 ) ; VAR_557 = METHOD_161 ( VAR_558 , VAR_559 ) ; VAR_560 = METHOD_162 ( VAR_561 , VAR_562 ) ; VAR_563 = METHOD_163 ( VAR_564 , VAR_565 ) ; VAR_566 = METHOD_164 ( VAR_567 , VAR_568 ) ; VAR_569 = METHOD_165 ( VAR_570 , VAR_571 ) ; VAR_572 = METHOD_166 ( VAR_573 , VAR_574 ) ; VAR_575 = METHOD_167 ( VAR_576 , VAR_577 ) ; VAR_578 = METHOD_168 ( VAR_579 , VAR_580 ) ; VAR_581 = METHOD_169 ( VAR_582 , VAR_583 ) ; VAR_584 = METHOD_170 ( VAR_585 , VAR_586 ) ; VAR_587 = METHOD_171 ( VAR_588 , VAR_589 ) ; VAR_590 [ 0 ] = VAR_591 ; VAR_592 [ 1 ] = METHOD_172 ( VAR_593 , VAR_594 ) ; VAR_595 [ 2 ] = VAR_596 ; VAR_597 [ 3 ] = METHOD_173 ( VAR_598 , VAR_599 ) ; VAR_600 [ 4 ] = VAR_601 ; VAR_602 [ 5 ] = METHOD_174 ( VAR_603 , VAR_604 ) ; VAR_605 [ 6 ] = VAR_606 ; VAR_607 [ 7 ] = METHOD_175 ( VAR_608 , VAR_609 ) ; METHOD_176 ( VAR_610 , VAR_611 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { const TYPE_2 VAR_1 = METHOD_1 ( VAR_2 , VAR_3 ) ; const TYPE_3 VAR_4 = METHOD_2 ( VAR_5 , - VAR_6 ) ; const TYPE_4 VAR_7 = METHOD_3 ( VAR_8 , VAR_9 ) ; const TYPE_5 VAR_10 = METHOD_4 ( VAR_11 , - VAR_12 ) ; const TYPE_6 VAR_13 = METHOD_5 ( VAR_14 , VAR_15 ) ; const TYPE_7 VAR_16 = METHOD_6 ( VAR_17 , - VAR_18 ) ; const TYPE_8 VAR_19 = METHOD_7 ( VAR_20 , VAR_21 ) ; const TYPE_9 VAR_22 = METHOD_8 ( VAR_23 , - VAR_24 ) ; const TYPE_10 VAR_25 = METHOD_9 ( VAR_26 , VAR_27 ) ; const TYPE_11 VAR_28 = METHOD_10 ( VAR_29 , - VAR_30 ) ; const TYPE_12 VAR_31 = METHOD_11 ( - VAR_32 , VAR_33 ) ; const TYPE_13 VAR_34 = METHOD_12 ( VAR_35 , - VAR_36 ) ; const TYPE_14 VAR_37 = METHOD_13 ( VAR_38 ) ; const TYPE_15 VAR_39 = METHOD_14 ( ( TYPE_22 ) 0 ) ; const TYPE_16 VAR_40 = METHOD_15 ( VAR_41 ) ; TYPE_17 VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 , VAR_49 , VAR_50 , VAR_51 , VAR_52 , VAR_53 , VAR_54 , VAR_55 , VAR_56 , VAR_57 ; TYPE_18 VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 , VAR_64 , VAR_65 , VAR_66 , VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 , VAR_72 , VAR_73 ; TYPE_19 VAR_74 , VAR_75 , VAR_76 , VAR_77 , VAR_78 , VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 , VAR_86 , VAR_87 , VAR_88 , VAR_89 ; TYPE_20 VAR_90 , VAR_91 , VAR_92 , VAR_93 , VAR_94 , VAR_95 , VAR_96 , VAR_97 ; TYPE_21 VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 , VAR_104 , VAR_105 ; VAR_106 = VAR_107 [ 7 ] ; VAR_108 = VAR_109 [ 0 ] ; VAR_110 = VAR_111 [ 5 ] ; VAR_112 = VAR_113 [ 2 ] ; VAR_114 = VAR_115 [ 3 ] ; VAR_116 = VAR_117 [ 4 ] ; VAR_118 = VAR_119 [ 1 ] ; VAR_120 = VAR_121 [ 6 ] ; VAR_122 = METHOD_16 ( VAR_123 , VAR_124 ) ; VAR_125 = METHOD_17 ( VAR_126 , VAR_127 ) ; VAR_128 = METHOD_18 ( VAR_129 , VAR_130 ) ; VAR_131 = METHOD_19 ( VAR_132 , VAR_133 ) ; VAR_134 = METHOD_20 ( VAR_135 , VAR_136 ) ; VAR_137 = METHOD_21 ( VAR_138 , VAR_139 ) ; VAR_140 = METHOD_22 ( VAR_141 , VAR_142 ) ; VAR_143 = METHOD_23 ( VAR_144 , VAR_145 ) ; VAR_146 = METHOD_24 ( VAR_147 , VAR_148 ) ; VAR_149 = METHOD_25 ( VAR_150 , VAR_151 ) ; VAR_152 = METHOD_26 ( VAR_153 , VAR_154 ) ; VAR_155 = METHOD_27 ( VAR_156 , VAR_157 ) ; VAR_158 = METHOD_28 ( VAR_159 , VAR_160 ) ; VAR_161 = METHOD_29 ( VAR_162 , VAR_163 ) ; VAR_164 = METHOD_30 ( VAR_165 , VAR_166 ) ; VAR_167 = METHOD_31 ( VAR_168 , VAR_169 ) ; VAR_170 = METHOD_32 ( VAR_171 , VAR_172 ) ; VAR_173 = METHOD_33 ( VAR_174 , VAR_175 ) ; VAR_176 = METHOD_34 ( VAR_177 , VAR_178 ) ; VAR_179 = METHOD_35 ( VAR_180 , VAR_181 ) ; VAR_182 = METHOD_36 ( VAR_183 , VAR_184 ) ; VAR_185 = METHOD_37 ( VAR_186 , VAR_187 ) ; VAR_188 = METHOD_38 ( VAR_189 , VAR_190 ) ; VAR_191 = METHOD_39 ( VAR_192 , VAR_193 ) ; VAR_194 = METHOD_40 ( VAR_195 , VAR_196 ) ; VAR_197 = METHOD_41 ( VAR_198 , VAR_199 ) ; VAR_200 = METHOD_42 ( VAR_201 , VAR_202 ) ; VAR_203 = METHOD_43 ( VAR_204 , VAR_205 ) ; VAR_206 = METHOD_44 ( VAR_207 , VAR_208 ) ; VAR_209 = METHOD_45 ( VAR_210 , VAR_211 ) ; VAR_212 = METHOD_46 ( VAR_213 , VAR_214 ) ; VAR_215 = METHOD_47 ( VAR_216 , VAR_217 ) ; VAR_218 = METHOD_48 ( VAR_219 , VAR_220 ) ; VAR_221 = METHOD_49 ( VAR_222 , VAR_223 ) ; VAR_224 = METHOD_50 ( VAR_225 , VAR_226 ) ; VAR_227 = METHOD_51 ( VAR_228 , VAR_229 ) ; VAR_230 = METHOD_52 ( VAR_231 , VAR_232 ) ; VAR_233 = METHOD_53 ( VAR_234 , VAR_235 ) ; VAR_236 = METHOD_54 ( VAR_237 , VAR_238 ) ; VAR_239 = METHOD_55 ( VAR_240 , VAR_241 ) ; VAR_242 = METHOD_56 ( VAR_243 , VAR_244 ) ; VAR_245 = METHOD_57 ( VAR_246 , VAR_247 ) ; VAR_248 = METHOD_58 ( VAR_249 , VAR_250 ) ; VAR_251 = METHOD_59 ( VAR_252 , VAR_253 ) ; VAR_254 = METHOD_60 ( VAR_255 , VAR_256 ) ; VAR_257 = METHOD_61 ( VAR_258 , VAR_259 ) ; VAR_260 = METHOD_62 ( VAR_261 , VAR_262 ) ; VAR_263 = METHOD_63 ( VAR_264 , VAR_265 ) ; VAR_266 = METHOD_64 ( VAR_267 , VAR_268 ) ; VAR_269 = METHOD_65 ( VAR_270 , VAR_271 ) ; VAR_272 = METHOD_66 ( VAR_273 , VAR_274 ) ; VAR_275 = METHOD_67 ( VAR_276 , VAR_277 ) ; VAR_278 = METHOD_68 ( VAR_279 , VAR_280 ) ; VAR_281 = METHOD_69 ( VAR_282 , VAR_283 ) ; VAR_284 = METHOD_70 ( VAR_285 , VAR_286 ) ; VAR_287 = METHOD_71 ( VAR_288 , VAR_289 ) ; VAR_290 = METHOD_72 ( VAR_291 , VAR_292 ) ; VAR_293 = METHOD_73 ( VAR_294 , VAR_295 ) ; VAR_296 = METHOD_74 ( VAR_297 , VAR_298 ) ; VAR_299 = METHOD_75 ( VAR_300 , VAR_301 ) ; VAR_302 = METHOD_76 ( VAR_303 , VAR_304 ) ; VAR_305 = METHOD_77 ( VAR_306 , VAR_307 ) ; VAR_308 = METHOD_78 ( VAR_309 , VAR_310 ) ; VAR_311 = METHOD_79 ( VAR_312 , VAR_313 ) ; VAR_314 = METHOD_80 ( VAR_315 , VAR_316 ) ; VAR_317 = METHOD_81 ( VAR_318 , VAR_319 ) ; VAR_320 = METHOD_82 ( VAR_321 , VAR_322 ) ; VAR_323 = METHOD_83 ( VAR_324 , VAR_325 ) ; VAR_326 = METHOD_84 ( VAR_327 , VAR_328 ) ; VAR_329 = METHOD_85 ( VAR_330 , VAR_331 ) ; VAR_332 = METHOD_86 ( VAR_333 , VAR_334 ) ; VAR_335 = METHOD_87 ( VAR_336 , VAR_337 ) ; VAR_338 [ 0 ] = METHOD_88 ( VAR_339 , VAR_340 ) ; VAR_341 [ 1 ] = METHOD_89 ( VAR_342 , VAR_343 ) ; VAR_344 [ 2 ] = METHOD_90 ( VAR_345 , VAR_346 ) ; VAR_347 [ 3 ] = METHOD_91 ( VAR_348 , VAR_349 ) ; VAR_350 [ 4 ] = METHOD_92 ( VAR_351 , VAR_352 ) ; VAR_353 [ 5 ] = METHOD_93 ( VAR_354 , VAR_355 ) ; VAR_356 [ 6 ] = METHOD_94 ( VAR_357 , VAR_358 ) ; VAR_359 [ 7 ] = METHOD_95 ( VAR_360 , VAR_361 ) ; VAR_362 = METHOD_96 ( VAR_363 [ 0 ] , VAR_364 [ 2 ] ) ; VAR_365 = METHOD_97 ( VAR_366 [ 1 ] , VAR_367 [ 3 ] ) ; VAR_368 = METHOD_98 ( VAR_369 [ 0 ] , VAR_370 [ 2 ] ) ; VAR_371 = METHOD_99 ( VAR_372 [ 1 ] , VAR_373 [ 3 ] ) ; VAR_374 = METHOD_100 ( VAR_375 [ 4 ] , VAR_376 [ 5 ] ) ; VAR_377 = METHOD_101 ( VAR_378 [ 4 ] , VAR_379 [ 5 ] ) ; VAR_380 = METHOD_102 ( VAR_381 [ 6 ] , VAR_382 [ 7 ] ) ; VAR_383 = METHOD_103 ( VAR_384 [ 6 ] , VAR_385 [ 7 ] ) ; VAR_386 = METHOD_104 ( VAR_387 , VAR_388 ) ; VAR_389 = METHOD_105 ( VAR_390 , VAR_391 ) ; VAR_392 = METHOD_106 ( VAR_393 , VAR_394 ) ; VAR_395 = METHOD_107 ( VAR_396 , VAR_397 ) ; VAR_398 = METHOD_108 ( VAR_399 , VAR_400 ) ; VAR_401 = METHOD_109 ( VAR_402 , VAR_403 ) ; VAR_404 = METHOD_110 ( VAR_405 , VAR_406 ) ; VAR_407 = METHOD_111 ( VAR_408 , VAR_409 ) ; VAR_410 = METHOD_112 ( VAR_411 , VAR_412 ) ; VAR_413 = METHOD_113 ( VAR_414 , VAR_415 ) ; VAR_416 = METHOD_114 ( VAR_417 , VAR_418 ) ; VAR_419 = METHOD_115 ( VAR_420 , VAR_421 ) ; VAR_422 = METHOD_116 ( VAR_423 , VAR_424 ) ; VAR_425 = METHOD_117 ( VAR_426 , VAR_427 ) ; VAR_428 = METHOD_118 ( VAR_429 , VAR_430 ) ; VAR_431 = METHOD_119 ( VAR_432 , VAR_433 ) ; VAR_434 = METHOD_120 ( VAR_435 , VAR_436 ) ; VAR_437 = METHOD_121 ( VAR_438 , VAR_439 ) ; VAR_440 = METHOD_122 ( VAR_441 , VAR_442 ) ; VAR_443 = METHOD_123 ( VAR_444 , VAR_445 ) ; VAR_446 = METHOD_124 ( VAR_447 , VAR_448 ) ; VAR_449 = METHOD_125 ( VAR_450 , VAR_451 ) ; VAR_452 = METHOD_126 ( VAR_453 , VAR_454 ) ; VAR_455 = METHOD_127 ( VAR_456 , VAR_457 ) ; VAR_458 = METHOD_128 ( VAR_459 , VAR_460 ) ; VAR_461 = METHOD_129 ( VAR_462 , VAR_463 ) ; VAR_464 = METHOD_130 ( VAR_465 , VAR_466 ) ; VAR_467 = METHOD_131 ( VAR_468 , VAR_469 ) ; VAR_470 = METHOD_132 ( VAR_471 , VAR_472 ) ; VAR_473 = METHOD_133 ( VAR_474 , VAR_475 ) ; VAR_476 = METHOD_134 ( VAR_477 , VAR_478 ) ; VAR_479 = METHOD_135 ( VAR_480 , VAR_481 ) ; VAR_482 = METHOD_136 ( VAR_483 , VAR_484 ) ; VAR_485 = METHOD_137 ( VAR_486 , VAR_487 ) ; VAR_488 = METHOD_138 ( VAR_489 , VAR_490 ) ; VAR_491 = METHOD_139 ( VAR_492 , VAR_493 ) ; VAR_494 = METHOD_140 ( VAR_495 , VAR_496 ) ; VAR_497 = METHOD_141 ( VAR_498 , VAR_499 ) ; VAR_500 = METHOD_142 ( VAR_501 , VAR_502 ) ; VAR_503 = METHOD_143 ( VAR_504 , VAR_505 ) ; VAR_506 = METHOD_144 ( VAR_507 , VAR_508 ) ; VAR_509 = METHOD_145 ( VAR_510 , VAR_511 ) ; VAR_512 = METHOD_146 ( VAR_513 , VAR_514 ) ; VAR_515 = METHOD_147 ( VAR_516 , VAR_517 ) ; VAR_518 = METHOD_148 ( VAR_519 , VAR_520 ) ; VAR_521 = METHOD_149 ( VAR_522 , VAR_523 ) ; VAR_524 = METHOD_150 ( VAR_525 , VAR_526 ) ; VAR_527 = METHOD_151 ( VAR_528 , VAR_529 ) ; VAR_530 = METHOD_152 ( VAR_531 , VAR_532 ) ; VAR_533 = METHOD_153 ( VAR_534 , VAR_535 ) ; VAR_536 = METHOD_154 ( VAR_537 , VAR_538 ) ; VAR_539 = METHOD_155 ( VAR_540 , VAR_541 ) ; VAR_542 = METHOD_156 ( VAR_543 , VAR_544 ) ; VAR_545 = METHOD_157 ( VAR_546 , VAR_547 ) ; VAR_548 = METHOD_158 ( VAR_549 , VAR_550 ) ; VAR_551 = METHOD_159 ( VAR_552 , VAR_553 ) ; VAR_554 = METHOD_160 ( VAR_555 , VAR_556 ) ; VAR_557 = METHOD_161 ( VAR_558 , VAR_559 ) ; VAR_560 = METHOD_162 ( VAR_561 , VAR_562 ) ; VAR_563 = METHOD_163 ( VAR_564 , VAR_565 ) ; VAR_566 = METHOD_164 ( VAR_567 , VAR_568 ) ; VAR_569 = METHOD_165 ( VAR_570 , VAR_571 ) ; VAR_572 = METHOD_166 ( VAR_573 , VAR_574 ) ; VAR_575 = METHOD_167 ( VAR_576 , VAR_577 ) ; VAR_578 = METHOD_168 ( VAR_579 , VAR_580 ) ; VAR_581 = METHOD_169 ( VAR_582 , VAR_583 ) ; VAR_584 = METHOD_170 ( VAR_585 , VAR_586 ) ; VAR_587 = METHOD_171 ( VAR_588 , VAR_589 ) ; VAR_590 [ 0 ] = VAR_591 ; VAR_592 [ 1 ] = METHOD_172 ( VAR_593 , VAR_594 ) ; VAR_595 [ 2 ] = VAR_596 ; VAR_597 [ 3 ] = METHOD_173 ( VAR_598 , VAR_599 ) ; VAR_600 [ 4 ] = VAR_601 ; VAR_602 [ 5 ] = METHOD_174 ( VAR_603 , VAR_604 ) ; VAR_605 [ 6 ] = VAR_606 ; VAR_607 [ 7 ] = METHOD_175 ( VAR_608 , VAR_609 ) ; METHOD_176 ( VAR_610 , VAR_611 ) ; }",465
466,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; const TYPE_3 * VAR_7 = ""Gettingsbfailed"" ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 STRUCT_OR_UNION_8 ;  TYPE_4 VAR_8 ;  VAR_9 = METHOD_1 ( VAR_10 , VAR_11 ) ; if ( ! VAR_12 ) { VAR_13 = - VAR_14 ; goto VAR_15 ; }  VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ;  if ( VAR_19 ) { VAR_20 = ""Errorparsingoptions"" ; goto VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( METHOD_4 ( VAR_27 ) ) { VAR_28 = METHOD_5 ( VAR_29 ) ; goto VAR_30 ; } VAR_31 -> VAR_32 = VAR_33 ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 , ""ecryptfs"" , VAR_37 ) ; if ( VAR_38 ) goto VAR_39 ; METHOD_7 ( VAR_40 , VAR_41 ) ; VAR_42 -> VAR_43 = & VAR_44 -> VAR_45 ; VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = & VAR_50 ; VAR_51 -> VAR_52 = & VAR_53 ; VAR_54 = ""Readingsbfailed"" ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 | VAR_58 , & STRUCT_OR_UNION_9 ) ; if ( VAR_59 ) { METHOD_9 ( VAR_60 , ""kern_path()failed\\n"" ) ; goto VAR_61 ; } if ( STRUCT_OR_UNION_10 . STRUCT_OR_UNION_11 -> VAR_62 -> VAR_63 == & VAR_64 ) { VAR_65 = - VAR_66 ; printk ( KERN_ERR ""Mountonfilesystemoftype"" ""eCryptfsexplicitlydisalloweddueto"" ""knownincompatibilities\\n"" ) ; goto VAR_67 ; }  METHOD_10 ( VAR_68 , STRUCT_OR_UNION_12 . STRUCT_OR_UNION_13 -> VAR_69 ) ;  VAR_70 -> VAR_71 = STRUCT_OR_UNION_14 . STRUCT_OR_UNION_15 -> VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = STRUCT_OR_UNION_16 . STRUCT_OR_UNION_17 -> VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ; STRUCT_OR_UNION_18 = METHOD_11 ( STRUCT_OR_UNION_19 . STRUCT_OR_UNION_20 -> VAR_81 , VAR_82 ) ; VAR_83 = METHOD_12 ( STRUCT_OR_UNION_21 ) ; if ( METHOD_13 ( STRUCT_OR_UNION_22 ) ) goto VAR_84 ; VAR_85 -> VAR_86 = METHOD_14 ( STRUCT_OR_UNION_23 ) ; if ( ! VAR_87 -> VAR_88 ) { METHOD_15 ( STRUCT_OR_UNION_24 ) ; VAR_89 = - VAR_90 ; goto VAR_91 ; } VAR_92 = - VAR_93 ; VAR_94 = METHOD_16 ( VAR_95 , VAR_96 ) ; if ( ! VAR_97 ) goto VAR_98 ; METHOD_17 ( VAR_99 -> VAR_100 , VAR_101 ) ; METHOD_18 ( VAR_102 -> VAR_103 , STRUCT_OR_UNION_25 . STRUCT_OR_UNION_26 ) ; METHOD_19 ( VAR_104 -> VAR_105 , STRUCT_OR_UNION_27 . VAR_106 ) ; VAR_107 -> VAR_108 |= VAR_109 ; return METHOD_20 ( VAR_110 -> VAR_111 ) ; VAR_112 : METHOD_21 ( & STRUCT_OR_UNION_28 ) ; VAR_113 : METHOD_22 ( VAR_114 ) ; VAR_115 : if ( VAR_116 ) { METHOD_23 ( & VAR_117 -> VAR_118 ) ; METHOD_24 ( VAR_119 , VAR_120 ) ; } printk ( KERN_ERR ""%s;rc=[%d]\\n"" , VAR_121 , VAR_122 ) ; return METHOD_25 ( VAR_123 ) ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , TYPE_0 VAR_1 , const TYPE_1 * VAR_2 , TYPE_2 * VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 ; const TYPE_3 * VAR_7 = ""Gettingsbfailed"" ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_6 ; struct STRUCT_OR_UNION_7 STRUCT_OR_UNION_8 ; TYPE_4 VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 , VAR_11 ) ; if ( ! VAR_12 ) { VAR_13 = - VAR_14 ; goto VAR_15 ; } VAR_16 = METHOD_2 ( VAR_17 , VAR_18 ) ; if ( VAR_19 ) { VAR_20 = ""Errorparsingoptions"" ; goto VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 , VAR_24 , VAR_25 , VAR_26 ) ; if ( METHOD_4 ( VAR_27 ) ) { VAR_28 = METHOD_5 ( VAR_29 ) ; goto VAR_30 ; } VAR_31 -> VAR_32 = VAR_33 ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 , ""ecryptfs"" , VAR_37 ) ; if ( VAR_38 ) goto VAR_39 ; METHOD_7 ( VAR_40 , VAR_41 ) ; VAR_42 -> VAR_43 = & VAR_44 -> VAR_45 ; VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = & VAR_50 ; VAR_51 -> VAR_52 = & VAR_53 ; VAR_54 = ""Readingsbfailed"" ; VAR_55 = METHOD_8 ( VAR_56 , VAR_57 | VAR_58 , & STRUCT_OR_UNION_9 ) ; if ( VAR_59 ) { METHOD_9 ( VAR_60 , ""kern_path()failed\\n"" ) ; goto VAR_61 ; } if ( STRUCT_OR_UNION_10 . STRUCT_OR_UNION_11 -> VAR_62 -> VAR_63 == & VAR_64 ) { VAR_65 = - VAR_66 ; printk ( KERN_ERR ""Mountonfilesystemoftype"" ""eCryptfsexplicitlydisalloweddueto"" ""knownincompatibilities\\n"" ) ; goto VAR_67 ; } METHOD_10 ( VAR_68 , STRUCT_OR_UNION_12 . STRUCT_OR_UNION_13 -> VAR_69 ) ; VAR_70 -> VAR_71 = STRUCT_OR_UNION_14 . STRUCT_OR_UNION_15 -> VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = STRUCT_OR_UNION_16 . STRUCT_OR_UNION_17 -> VAR_76 -> VAR_77 ; VAR_78 -> VAR_79 = VAR_80 ; STRUCT_OR_UNION_18 = METHOD_11 ( STRUCT_OR_UNION_19 . STRUCT_OR_UNION_20 -> VAR_81 , VAR_82 ) ; VAR_83 = METHOD_12 ( STRUCT_OR_UNION_21 ) ; if ( METHOD_13 ( STRUCT_OR_UNION_22 ) ) goto VAR_84 ; VAR_85 -> VAR_86 = METHOD_14 ( STRUCT_OR_UNION_23 ) ; if ( ! VAR_87 -> VAR_88 ) { METHOD_15 ( STRUCT_OR_UNION_24 ) ; VAR_89 = - VAR_90 ; goto VAR_91 ; } VAR_92 = - VAR_93 ; VAR_94 = METHOD_16 ( VAR_95 , VAR_96 ) ; if ( ! VAR_97 ) goto VAR_98 ; METHOD_17 ( VAR_99 -> VAR_100 , VAR_101 ) ; METHOD_18 ( VAR_102 -> VAR_103 , STRUCT_OR_UNION_25 . STRUCT_OR_UNION_26 ) ; METHOD_19 ( VAR_104 -> VAR_105 , STRUCT_OR_UNION_27 . VAR_106 ) ; VAR_107 -> VAR_108 |= VAR_109 ; return METHOD_20 ( VAR_110 -> VAR_111 ) ; VAR_112 : METHOD_21 ( & STRUCT_OR_UNION_28 ) ; VAR_113 : METHOD_22 ( VAR_114 ) ; VAR_115 : if ( VAR_116 ) { METHOD_23 ( & VAR_117 -> VAR_118 ) ; METHOD_24 ( VAR_119 , VAR_120 ) ; } printk ( KERN_ERR ""%s;rc=[%d]\\n"" , VAR_121 , VAR_122 ) ; return METHOD_25 ( VAR_123 ) ; }",466
467,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 & VAR_7 ; TYPE_2 VAR_8 ; if ( VAR_9 -> VAR_10 >= METHOD_1 ( VAR_11 ) ) return - VAR_12 ; VAR_13 = VAR_14 [ VAR_15 -> VAR_16 ] ; if ( VAR_17 == VAR_18 ) return - VAR_19 ; if ( VAR_20 ) return 0 ; VAR_21 = METHOD_2 ( sizeof ( * VAR_22 ) , VAR_23 ) ; if ( ! VAR_24 ) return - VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> STRUCT_OR_UNION_5 = STRUCT_OR_UNION_6 ; METHOD_3 ( & STRUCT_OR_UNION_7 -> VAR_30 ) ; VAR_31 = VAR_32 -> METHOD_4 ( VAR_33 , VAR_34 -> VAR_35 ) ; if ( VAR_36 < 0 ) { METHOD_5 ( & STRUCT_OR_UNION_8 -> VAR_37 ) ; METHOD_6 ( VAR_38 ) ; return VAR_39 ; } METHOD_7 ( & VAR_40 -> VAR_41 , & STRUCT_OR_UNION_9 -> VAR_42 ) ; METHOD_8 ( & STRUCT_OR_UNION_10 -> VAR_43 ) ; if ( VAR_44 -> METHOD_9 ) VAR_45 -> METHOD_10 ( VAR_46 ) ;  VAR_47 = METHOD_11 ( VAR_48 -> VAR_49 , & VAR_50 , VAR_51 , VAR_52 | VAR_53 ) ;  if ( VAR_54 < 0 ) {  METHOD_12 ( & STRUCT_OR_UNION_11 -> VAR_55 ) ;  METHOD_13 ( & VAR_56 -> VAR_57 ) ; METHOD_14 ( & STRUCT_OR_UNION_12 -> VAR_58 ) ; VAR_59 -> METHOD_15 ( VAR_60 ) ; return VAR_61 ; }  METHOD_16 ( STRUCT_OR_UNION_13 ) ;  VAR_62 -> VAR_63 = VAR_64 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = VAR_2 ; struct STRUCT_OR_UNION_4 * VAR_3 ; TYPE_1 VAR_4 = VAR_5 -> VAR_6 & VAR_7 ; TYPE_2 VAR_8 ; if ( VAR_9 -> VAR_10 >= METHOD_1 ( VAR_11 ) ) return - VAR_12 ; VAR_13 = VAR_14 [ VAR_15 -> VAR_16 ] ; if ( VAR_17 == VAR_18 ) return - VAR_19 ; if ( VAR_20 ) return 0 ; VAR_21 = METHOD_2 ( sizeof ( * VAR_22 ) , VAR_23 ) ; if ( ! VAR_24 ) return - VAR_25 ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 -> STRUCT_OR_UNION_5 = STRUCT_OR_UNION_6 ; METHOD_3 ( & STRUCT_OR_UNION_7 -> VAR_30 ) ; VAR_31 = VAR_32 -> METHOD_4 ( VAR_33 , VAR_34 -> VAR_35 ) ; if ( VAR_36 < 0 ) { METHOD_5 ( & STRUCT_OR_UNION_8 -> VAR_37 ) ; METHOD_6 ( VAR_38 ) ; return VAR_39 ; } METHOD_7 ( & VAR_40 -> VAR_41 , & STRUCT_OR_UNION_9 -> VAR_42 ) ; METHOD_8 ( & STRUCT_OR_UNION_10 -> VAR_43 ) ; if ( VAR_44 -> METHOD_9 ) VAR_45 -> METHOD_10 ( VAR_46 ) ; VAR_47 = METHOD_11 ( VAR_48 -> VAR_49 , & VAR_50 , VAR_51 , VAR_52 | VAR_53 ) ; if ( VAR_54 < 0 ) { METHOD_12 ( & STRUCT_OR_UNION_11 -> VAR_55 ) ; METHOD_13 ( & VAR_56 -> VAR_57 ) ; METHOD_14 ( & STRUCT_OR_UNION_12 -> VAR_58 ) ; VAR_59 -> METHOD_15 ( VAR_60 ) ; METHOD_16 ( STRUCT_OR_UNION_13 ) ; return VAR_61 ; } METHOD_16 ( STRUCT_OR_UNION_13 ) ; VAR_62 -> VAR_63 = VAR_64 ; return 0 ; }",467
468,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = 0 ; TYPE_3 unsigned TYPE_4 VAR_2 ; VAR_3 * VAR_4 ; TYPE_5 * VAR_5 = & VAR_6 ; if ( VAR_7 && VAR_8 -> VAR_9 ) { VAR_10 = VAR_11 -> VAR_12 ; VAR_13 -> VAR_14 = VAR_15 -> VAR_16 . VAR_17 ; } else return ; if ( VAR_18 -> VAR_19 == VAR_20 || VAR_21 -> VAR_22 . VAR_23 == VAR_24 ) return ; VAR_25 -> VAR_26 = VAR_27 -> VAR_28 ; if ( VAR_29 -> VAR_30 == VAR_31 ) goto VAR_32 ; switch ( VAR_33 -> VAR_34 ) { case VAR_35 : METHOD_1 ( VAR_36 , VAR_37 ) ; break ; case VAR_38 : METHOD_2 ( VAR_39 , VAR_40 ) ; break ; case VAR_41 : METHOD_3 ( VAR_42 , VAR_43 ) ; break ; case VAR_44 : METHOD_4 ( VAR_45 , VAR_46 ) ; break ; case VAR_47 : METHOD_5 ( VAR_48 , VAR_49 ) ; break ; case VAR_50 : METHOD_6 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : METHOD_7 ( VAR_54 , VAR_55 ) ; break ; case VAR_56 : METHOD_8 ( VAR_57 , VAR_58 ) ; break ; case VAR_59 : METHOD_9 ( VAR_60 , VAR_61 ) ; break ; case VAR_62 : METHOD_10 ( VAR_63 , VAR_64 ) ; break ; case VAR_65 : METHOD_11 ( VAR_66 , VAR_67 ) ; break ; case VAR_68 : METHOD_12 ( VAR_69 , VAR_70 ) ; break ; case VAR_71 : METHOD_13 ( VAR_72 , VAR_73 ) ; break ; case VAR_74 : METHOD_14 ( VAR_75 , VAR_76 ) ; break ; case VAR_77 : METHOD_15 ( VAR_78 , VAR_79 ) ; break ; case VAR_80 : METHOD_16 ( VAR_81 , VAR_82 ) ; break ; case VAR_83 : METHOD_17 ( VAR_84 , VAR_85 ) ; break ; case VAR_86 : METHOD_18 ( VAR_87 , VAR_88 ) ; break ; case VAR_89 : METHOD_19 ( VAR_90 , VAR_91 ) ; break ; case VAR_92 : METHOD_20 ( VAR_93 , VAR_94 ) ; break ; case VAR_95 : METHOD_21 ( VAR_96 , VAR_97 ) ; break ; case VAR_98 : METHOD_22 ( VAR_99 , VAR_100 ) ; break ; case VAR_101 : METHOD_23 ( VAR_102 , VAR_103 ) ; break ; case VAR_104 : METHOD_24 ( VAR_105 , VAR_106 ) ; break ; case VAR_107 : METHOD_25 ( VAR_108 , VAR_109 ) ; break ; case VAR_110 : METHOD_26 ( VAR_111 , VAR_112 ) ; break ; case VAR_113 : METHOD_27 ( VAR_114 , VAR_115 ) ; break ; case VAR_116 : METHOD_28 ( VAR_117 , VAR_118 ) ; break ; case VAR_119 : METHOD_29 ( VAR_120 , VAR_121 ) ; break ; case VAR_122 : METHOD_30 ( VAR_123 , VAR_124 ) ; break ; case VAR_125 : METHOD_31 ( VAR_126 , VAR_127 ) ; break ; case VAR_128 : METHOD_32 ( VAR_129 , VAR_130 ) ; break ; case VAR_131 : METHOD_33 ( VAR_132 , VAR_133 ) ; break ; case VAR_134 : METHOD_34 ( VAR_135 , VAR_136 ) ; break ; case VAR_137 : METHOD_35 ( VAR_138 , VAR_139 ) ; break ; case VAR_140 : METHOD_36 ( VAR_141 , VAR_142 ) ; break ; case VAR_143 : METHOD_37 ( VAR_144 , VAR_145 ) ; break ; case VAR_146 : METHOD_38 ( VAR_147 , VAR_148 ) ; break ; case VAR_149 : METHOD_39 ( VAR_150 , VAR_151 ) ; break ; case VAR_152 : METHOD_40 ( VAR_153 , VAR_154 ) ; break ; case VAR_155 : METHOD_41 ( VAR_156 , VAR_157 ) ; break ; case VAR_158 : METHOD_42 ( VAR_159 , VAR_160 ) ; break ; case VAR_161 : METHOD_43 ( VAR_162 , VAR_163 ) ; break ; case VAR_164 : METHOD_44 ( VAR_165 , VAR_166 ) ; break ; case VAR_167 : METHOD_45 ( VAR_168 , VAR_169 ) ; break ; case VAR_170 : METHOD_46 ( VAR_171 , VAR_172 ) ; break ; case VAR_173 : METHOD_47 ( VAR_174 , VAR_175 ) ; break ; case VAR_176 : METHOD_48 ( VAR_177 , VAR_178 ) ; break ; case VAR_179 : METHOD_49 ( VAR_180 , VAR_181 ) ; break ; case VAR_182 : METHOD_50 ( VAR_183 , VAR_184 ) ; break ; case VAR_185 : METHOD_51 ( VAR_186 , VAR_187 ) ; break ; case VAR_188 : METHOD_52 ( VAR_189 , VAR_190 ) ; break ; case VAR_191 : METHOD_53 ( VAR_192 , VAR_193 ) ; break ; case VAR_194 : METHOD_54 ( VAR_195 , VAR_196 ) ; break ; case VAR_197 : METHOD_55 ( VAR_198 , VAR_199 ) ; break ; case VAR_200 : METHOD_56 ( VAR_201 , VAR_202 ) ; break ; case VAR_203 : METHOD_57 ( VAR_204 , VAR_205 ) ; break ; case VAR_206 : METHOD_58 ( VAR_207 , VAR_208 ) ; break ; case VAR_209 : METHOD_59 ( VAR_210 , VAR_211 ) ; break ; case VAR_212 : METHOD_60 ( VAR_213 , VAR_214 ) ; break ; case VAR_215 : METHOD_61 ( VAR_216 , VAR_217 ) ; break ; case VAR_218 : METHOD_62 ( VAR_219 , VAR_220 ) ; break ; case VAR_221 : METHOD_63 ( VAR_222 , VAR_223 ) ; break ; case VAR_224 : METHOD_64 ( VAR_225 , VAR_226 ) ; break ; case VAR_227 : METHOD_65 ( VAR_228 , VAR_229 ) ; break ; case VAR_230 : METHOD_66 ( VAR_231 , VAR_232 ) ; break ; case VAR_233 : METHOD_67 ( VAR_234 , VAR_235 ) ; break ; case VAR_236 : METHOD_68 ( VAR_237 , VAR_238 ) ; break ; case VAR_239 : METHOD_69 ( VAR_240 , VAR_241 ) ; break ; case VAR_242 : METHOD_70 ( VAR_243 , VAR_244 ) ; break ; case VAR_245 : METHOD_71 ( VAR_246 , VAR_247 ) ; break ; case VAR_248 : METHOD_72 ( VAR_249 , VAR_250 ) ; break ; case VAR_251 : METHOD_73 ( VAR_252 , VAR_253 ) ; break ; case VAR_254 : METHOD_74 ( VAR_255 , VAR_256 ) ; break ; case VAR_257 : METHOD_75 ( VAR_258 , VAR_259 ) ; break ; TYPE_6 TYPE_7 case VAR_260 : METHOD_76 ( VAR_261 , VAR_262 ) ; break ; case VAR_263 : METHOD_77 ( VAR_264 , VAR_265 ) ; break ; case VAR_266 : METHOD_78 ( VAR_267 , VAR_268 ) ; break ; case VAR_269 : METHOD_79 ( VAR_270 , VAR_271 ) ; break ; default : if ( VAR_272 -> VAR_273 == VAR_274 -> VAR_275 -> VAR_276 ) { SINCE ( R_13 ) { METHOD_80 ( VAR_277 , VAR_278 ) ; } } else if ( ( VAR_279 = METHOD_81 ( VAR_280 -> VAR_281 , VAR_282 ) ) & VAR_283 ) {  TYPE_8 VAR_284 ;  TYPE_9 VAR_285 ; VAR_286 * VAR_287 ; VAR_288 : VAR_289 = 0 ; VAR_290 = VAR_291 -> VAR_292 - 500 ; VAR_293 = VAR_294 ; VAR_295 = VAR_296 -> VAR_297 ; if ( VAR_298 -> VAR_299 && VAR_300 >= 0 && VAR_301 < ( TYPE_10 ) VAR_302 -> VAR_303 ) { VAR_304 = & VAR_305 -> VAR_306 [ VAR_307 ] ; VAR_308 = VAR_309 ? METHOD_82 ( VAR_310 ) : 0 ; }  if ( VAR_311 -> VAR_312 == VAR_313 )  { METHOD_83 ( VAR_314 , VAR_315 ) ;  }   else if ( VAR_316 -> VAR_317 == VAR_318 )  { METHOD_84 ( VAR_319 , VAR_320 ) ;  }  else if ( VAR_321 && ! VAR_322 ) { METHOD_85 ( VAR_323 , VAR_324 ) ; } else if ( VAR_325 && VAR_326 ) { METHOD_86 ( VAR_327 , VAR_328 ) ; } else { METHOD_87 ( VAR_329 -> VAR_330 . VAR_331 ) ; } } } if ( VAR_332 -> VAR_333 & VAR_334 ) METHOD_88 ( VAR_335 -> VAR_336 ) ; VAR_337 -> VAR_338 = VAR_339 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 = 0 ; TYPE_3 unsigned TYPE_4 VAR_2 ; VAR_3 * VAR_4 ; TYPE_5 * VAR_5 = & VAR_6 ; if ( VAR_7 && VAR_8 -> VAR_9 ) { VAR_10 = VAR_11 -> VAR_12 ; VAR_13 -> VAR_14 = VAR_15 -> VAR_16 . VAR_17 ; } else return ; if ( VAR_18 -> VAR_19 == VAR_20 || VAR_21 -> VAR_22 . VAR_23 == VAR_24 ) return ; VAR_25 -> VAR_26 = VAR_27 -> VAR_28 ; if ( VAR_29 -> VAR_30 == VAR_31 ) goto VAR_32 ; switch ( VAR_33 -> VAR_34 ) { case VAR_35 : METHOD_1 ( VAR_36 , VAR_37 ) ; break ; case VAR_38 : METHOD_2 ( VAR_39 , VAR_40 ) ; break ; case VAR_41 : METHOD_3 ( VAR_42 , VAR_43 ) ; break ; case VAR_44 : METHOD_4 ( VAR_45 , VAR_46 ) ; break ; case VAR_47 : METHOD_5 ( VAR_48 , VAR_49 ) ; break ; case VAR_50 : METHOD_6 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : METHOD_7 ( VAR_54 , VAR_55 ) ; break ; case VAR_56 : METHOD_8 ( VAR_57 , VAR_58 ) ; break ; case VAR_59 : METHOD_9 ( VAR_60 , VAR_61 ) ; break ; case VAR_62 : METHOD_10 ( VAR_63 , VAR_64 ) ; break ; case VAR_65 : METHOD_11 ( VAR_66 , VAR_67 ) ; break ; case VAR_68 : METHOD_12 ( VAR_69 , VAR_70 ) ; break ; case VAR_71 : METHOD_13 ( VAR_72 , VAR_73 ) ; break ; case VAR_74 : METHOD_14 ( VAR_75 , VAR_76 ) ; break ; case VAR_77 : METHOD_15 ( VAR_78 , VAR_79 ) ; break ; case VAR_80 : METHOD_16 ( VAR_81 , VAR_82 ) ; break ; case VAR_83 : METHOD_17 ( VAR_84 , VAR_85 ) ; break ; case VAR_86 : METHOD_18 ( VAR_87 , VAR_88 ) ; break ; case VAR_89 : METHOD_19 ( VAR_90 , VAR_91 ) ; break ; case VAR_92 : METHOD_20 ( VAR_93 , VAR_94 ) ; break ; case VAR_95 : METHOD_21 ( VAR_96 , VAR_97 ) ; break ; case VAR_98 : METHOD_22 ( VAR_99 , VAR_100 ) ; break ; case VAR_101 : METHOD_23 ( VAR_102 , VAR_103 ) ; break ; case VAR_104 : METHOD_24 ( VAR_105 , VAR_106 ) ; break ; case VAR_107 : METHOD_25 ( VAR_108 , VAR_109 ) ; break ; case VAR_110 : METHOD_26 ( VAR_111 , VAR_112 ) ; break ; case VAR_113 : METHOD_27 ( VAR_114 , VAR_115 ) ; break ; case VAR_116 : METHOD_28 ( VAR_117 , VAR_118 ) ; break ; case VAR_119 : METHOD_29 ( VAR_120 , VAR_121 ) ; break ; case VAR_122 : METHOD_30 ( VAR_123 , VAR_124 ) ; break ; case VAR_125 : METHOD_31 ( VAR_126 , VAR_127 ) ; break ; case VAR_128 : METHOD_32 ( VAR_129 , VAR_130 ) ; break ; case VAR_131 : METHOD_33 ( VAR_132 , VAR_133 ) ; break ; case VAR_134 : METHOD_34 ( VAR_135 , VAR_136 ) ; break ; case VAR_137 : METHOD_35 ( VAR_138 , VAR_139 ) ; break ; case VAR_140 : METHOD_36 ( VAR_141 , VAR_142 ) ; break ; case VAR_143 : METHOD_37 ( VAR_144 , VAR_145 ) ; break ; case VAR_146 : METHOD_38 ( VAR_147 , VAR_148 ) ; break ; case VAR_149 : METHOD_39 ( VAR_150 , VAR_151 ) ; break ; case VAR_152 : METHOD_40 ( VAR_153 , VAR_154 ) ; break ; case VAR_155 : METHOD_41 ( VAR_156 , VAR_157 ) ; break ; case VAR_158 : METHOD_42 ( VAR_159 , VAR_160 ) ; break ; case VAR_161 : METHOD_43 ( VAR_162 , VAR_163 ) ; break ; case VAR_164 : METHOD_44 ( VAR_165 , VAR_166 ) ; break ; case VAR_167 : METHOD_45 ( VAR_168 , VAR_169 ) ; break ; case VAR_170 : METHOD_46 ( VAR_171 , VAR_172 ) ; break ; case VAR_173 : METHOD_47 ( VAR_174 , VAR_175 ) ; break ; case VAR_176 : METHOD_48 ( VAR_177 , VAR_178 ) ; break ; case VAR_179 : METHOD_49 ( VAR_180 , VAR_181 ) ; break ; case VAR_182 : METHOD_50 ( VAR_183 , VAR_184 ) ; break ; case VAR_185 : METHOD_51 ( VAR_186 , VAR_187 ) ; break ; case VAR_188 : METHOD_52 ( VAR_189 , VAR_190 ) ; break ; case VAR_191 : METHOD_53 ( VAR_192 , VAR_193 ) ; break ; case VAR_194 : METHOD_54 ( VAR_195 , VAR_196 ) ; break ; case VAR_197 : METHOD_55 ( VAR_198 , VAR_199 ) ; break ; case VAR_200 : METHOD_56 ( VAR_201 , VAR_202 ) ; break ; case VAR_203 : METHOD_57 ( VAR_204 , VAR_205 ) ; break ; case VAR_206 : METHOD_58 ( VAR_207 , VAR_208 ) ; break ; case VAR_209 : METHOD_59 ( VAR_210 , VAR_211 ) ; break ; case VAR_212 : METHOD_60 ( VAR_213 , VAR_214 ) ; break ; case VAR_215 : METHOD_61 ( VAR_216 , VAR_217 ) ; break ; case VAR_218 : METHOD_62 ( VAR_219 , VAR_220 ) ; break ; case VAR_221 : METHOD_63 ( VAR_222 , VAR_223 ) ; break ; case VAR_224 : METHOD_64 ( VAR_225 , VAR_226 ) ; break ; case VAR_227 : METHOD_65 ( VAR_228 , VAR_229 ) ; break ; case VAR_230 : METHOD_66 ( VAR_231 , VAR_232 ) ; break ; case VAR_233 : METHOD_67 ( VAR_234 , VAR_235 ) ; break ; case VAR_236 : METHOD_68 ( VAR_237 , VAR_238 ) ; break ; case VAR_239 : METHOD_69 ( VAR_240 , VAR_241 ) ; break ; case VAR_242 : METHOD_70 ( VAR_243 , VAR_244 ) ; break ; case VAR_245 : METHOD_71 ( VAR_246 , VAR_247 ) ; break ; case VAR_248 : METHOD_72 ( VAR_249 , VAR_250 ) ; break ; case VAR_251 : METHOD_73 ( VAR_252 , VAR_253 ) ; break ; case VAR_254 : METHOD_74 ( VAR_255 , VAR_256 ) ; break ; case VAR_257 : METHOD_75 ( VAR_258 , VAR_259 ) ; break ; TYPE_6 TYPE_7 case VAR_260 : METHOD_76 ( VAR_261 , VAR_262 ) ; break ; case VAR_263 : METHOD_77 ( VAR_264 , VAR_265 ) ; break ; case VAR_266 : METHOD_78 ( VAR_267 , VAR_268 ) ; break ; case VAR_269 : METHOD_79 ( VAR_270 , VAR_271 ) ; break ; default : if ( VAR_272 -> VAR_273 == VAR_274 -> VAR_275 -> VAR_276 ) { SINCE ( R_13 ) { METHOD_80 ( VAR_277 , VAR_278 ) ; } } else if ( ( VAR_279 = METHOD_81 ( VAR_280 -> VAR_281 , VAR_282 ) ) & VAR_283 ) { TYPE_8 VAR_284 ; TYPE_9 VAR_285 ; VAR_286 * VAR_287 ; VAR_288 : VAR_289 = 0 ; VAR_290 = VAR_291 -> VAR_292 - 500 ; VAR_293 = VAR_294 ; VAR_295 = VAR_296 -> VAR_297 ; if ( VAR_298 -> VAR_299 && VAR_300 >= 0 && VAR_301 < ( TYPE_10 ) VAR_302 -> VAR_303 ) { VAR_304 = & VAR_305 -> VAR_306 [ VAR_307 ] ; VAR_308 = VAR_309 ? METHOD_82 ( VAR_310 ) : 0 ; } if ( VAR_311 -> VAR_312 == VAR_313 ) { METHOD_83 ( VAR_314 , VAR_315 ) ; } else if ( VAR_316 -> VAR_317 == DWG_TYPE_UNKNOWN_ENT ) METHOD_86 ( VAR_327 , VAR_328 ) ; } else { METHOD_87 ( VAR_329 -> VAR_330 . VAR_331 ) ; } } } if ( VAR_332 -> VAR_333 & VAR_334 ) METHOD_88 ( VAR_335 -> VAR_336 ) ; VAR_337 -> VAR_338 = VAR_339 ; }",468
469,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 ) { unsigned VAR_2 ; unsigned VAR_3 ; if ( VAR_4 >= METHOD_1 ( ) ) return - VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 ) ; VAR_8 = METHOD_3 ( VAR_9 ) ; if ( VAR_10 [ VAR_11 ] == VAR_12 ) { if ( VAR_13 == - 1 ) return 0 ; VAR_14 [ VAR_15 ] = ( TYPE_3 * ) METHOD_4 ( VAR_16 ) ; if ( VAR_17 [ VAR_18 ] == VAR_19 ) return - VAR_20 ; METHOD_5 ( VAR_21 ) ; }  VAR_22 [ VAR_23 ] [ VAR_24 ] = VAR_25 ;  return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , unsigned TYPE_2 VAR_1 ) { unsigned VAR_2 ; unsigned VAR_3 ; if ( VAR_4 >= METHOD_1 ( ) ) return - VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 ) ; VAR_8 = METHOD_3 ( VAR_9 ) ; if ( VAR_10 [ VAR_11 ] == VAR_12 ) { if ( VAR_13 == - 1 ) return 0 ; VAR_14 [ VAR_15 ] = ( TYPE_3 * ) METHOD_4 ( VAR_16 ) ; if ( VAR_17 [ VAR_18 ] == VAR_19 ) return - VAR_20 ; METHOD_5 ( VAR_21 ) ; } METHOD_6 ( VAR_22 [ VAR_23 ] [ VAR_24 ] , VAR_25 ) ; return 0 ; }",469
470,"TYPE_0 METHOD_0 ( TYPE_1 * METHOD_1 , TYPE_2 * VAR_0 , TYPE_3 * VAR_1 , TYPE_4 * VAR_2 , TYPE_5 * VAR_3 ) { TYPE_6 VAR_4 ; const TYPE_7 * VAR_5 ; unsigned TYPE_8 * VAR_6 , * VAR_7 = VAR_8 ; TYPE_9 VAR_9 = - 1 , VAR_10 , VAR_11 ; METHOD_2 ( & VAR_12 ) ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 ) ; VAR_16 = METHOD_4 ( METHOD_5 ( VAR_17 ) ) ; if ( VAR_18 == VAR_19 ) { METHOD_6 ( VAR_20 , VAR_21 ) ; goto VAR_22 ; }  VAR_23 = METHOD_7 ( VAR_24 , VAR_25 ) ;  VAR_26 = METHOD_8 ( ( unsigned TYPE_10 ) VAR_27 ) ; if ( VAR_28 == VAR_29 ) { METHOD_9 ( VAR_30 , VAR_31 ) ; goto VAR_32 ; } VAR_33 = VAR_34 ; METHOD_10 ( VAR_35 , & VAR_36 ) ; VAR_37 = METHOD_11 ( & VAR_38 , VAR_39 , VAR_40 ) && METHOD_12 ( & VAR_41 , ( unsigned TYPE_11 * ) VAR_42 , VAR_43 ) ; METHOD_13 ( VAR_44 , ( unsigned TYPE_12 ) VAR_45 ) ; METHOD_14 ( VAR_46 ) ; if ( ! VAR_47 ) { METHOD_15 ( VAR_48 , VAR_49 ) ; goto VAR_50 ; } VAR_51 = - 1 ; if ( METHOD_16 ( & VAR_52 , ( unsigned TYPE_13 * ) VAR_53 -> VAR_54 , ( unsigned TYPE_14 ) VAR_55 -> VAR_56 , VAR_57 ) <= 0 ) { METHOD_17 ( VAR_58 , VAR_59 ) ; VAR_60 = 0 ; goto VAR_61 ; } VAR_62 = 1 ; VAR_63 : METHOD_18 ( & VAR_64 ) ; return ( VAR_65 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * METHOD_1 , TYPE_2 * VAR_0 , TYPE_3 * VAR_1 , TYPE_4 * VAR_2 , TYPE_5 * VAR_3 ) { TYPE_6 VAR_4 ; const TYPE_7 * VAR_5 ; unsigned TYPE_8 * VAR_6 , * VAR_7 = VAR_8 ; TYPE_9 VAR_9 = - 1 , VAR_10 , VAR_11 ; METHOD_2 ( & VAR_12 ) ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 ) ; VAR_16 = METHOD_4 ( METHOD_5 ( VAR_17 ) ) ; if ( VAR_18 == VAR_19 ) { METHOD_6 ( VAR_20 , VAR_21 ) ; goto VAR_22 ; } VAR_23 = METHOD_7 ( VAR_24 , VAR_25 ) ; VAR_26 = METHOD_8 ( ( unsigned TYPE_10 ) VAR_27 ) ; if ( VAR_28 == VAR_29 ) { METHOD_9 ( VAR_30 , VAR_31 ) ; goto VAR_32 ; } VAR_33 = VAR_34 ; METHOD_10 ( VAR_35 , & VAR_36 ) ; VAR_37 = METHOD_11 ( & VAR_38 , VAR_39 , VAR_40 ) && METHOD_12 ( & VAR_41 , ( unsigned TYPE_11 * ) VAR_42 , VAR_43 ) ; METHOD_13 ( VAR_44 , ( unsigned TYPE_12 ) VAR_45 ) ; METHOD_14 ( VAR_46 ) ; if ( ! VAR_47 ) { METHOD_15 ( VAR_48 , VAR_49 ) ; goto VAR_50 ; } VAR_51 = - 1 ; if ( METHOD_16 ( & VAR_52 , ( unsigned TYPE_13 * ) VAR_53 -> VAR_54 , ( unsigned TYPE_14 ) VAR_55 -> VAR_56 , VAR_57 ) <= 0 ) { METHOD_17 ( VAR_58 , VAR_59 ) ; VAR_60 = 0 ; goto VAR_61 ; } VAR_62 = 1 ; VAR_63 : METHOD_18 ( & VAR_64 ) ; return ( VAR_65 ) ; }",470
471,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { if ( ( VAR_2 & VAR_3 ) == VAR_4 && ( VAR_5 & VAR_6 ) == VAR_7 ) { METHOD_1 ( VAR_8 ,  1 , 0 , VAR_9 , 0 ) ;  return 0 ; } return - 1 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { if ( ( VAR_2 & VAR_3 ) == VAR_4 && ( VAR_5 & VAR_6 ) == VAR_7 ) { METHOD_1 ( VAR_8 , 1 , VAR_9 , 0 ) ; return 0 ; } return - 1 ; }",471
472,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( TYPE_2 * VAR_2 , TYPE_3 * VAR_3 ) , TYPE_4 * VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 , * VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 , * VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 , * VAR_13 , * * VAR_14 ; unsigned TYPE_5 VAR_15 ; TYPE_6 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; METHOD_2 ( ""-->%s()\\n"" , VAR_21 ) ; if ( ! VAR_22 -> VAR_23 ) return 0 ; VAR_24 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_25 ) ; if ( ! VAR_26 ) return - VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 [ 0 ] . VAR_39 = & VAR_40 -> VAR_41 ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 ; VAR_46 = VAR_47 = VAR_48 ; VAR_49 = & VAR_50 ; VAR_51 = VAR_52 -> VAR_53 ; VAR_54 : if ( METHOD_4 ( VAR_55 ) ) { VAR_56 = METHOD_5 ( VAR_57 ) ; VAR_58 = METHOD_6 ( VAR_59 -> VAR_60 , VAR_61 ) ; VAR_62 >>= VAR_63 ; VAR_64 = METHOD_7 ( sizeof ( struct STRUCT_OR_UNION_8 ) + VAR_65 * sizeof ( unsigned TYPE_7 ) , VAR_66 ) ; if ( ! VAR_67 ) goto VAR_68 ; METHOD_8 ( ""dupshortcut%p->%p\\n"" , VAR_69 , VAR_70 ) ; METHOD_9 ( VAR_71 , VAR_72 , ( sizeof ( struct STRUCT_OR_UNION_9 ) + VAR_73 * sizeof ( unsigned TYPE_8 ) ) ) ; VAR_74 -> VAR_75 = VAR_76 ; VAR_77 -> VAR_78 = VAR_79 -> VAR_80 ; * VAR_81 = VAR_82 = METHOD_10 ( VAR_83 ) ; VAR_84 = & VAR_85 -> VAR_86 ; VAR_87 = VAR_88 -> VAR_89 ; } VAR_90 = METHOD_11 ( VAR_91 ) ; VAR_92 = METHOD_12 ( sizeof ( struct STRUCT_OR_UNION_10 ) , VAR_93 ) ; if ( ! VAR_94 ) goto VAR_95 ; METHOD_13 ( ""dupnode%p->%p\\n"" , VAR_96 , VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 -> VAR_104 ; * VAR_105 = VAR_106 = METHOD_14 ( VAR_107 ) ; VAR_108 = VAR_109 ; VAR_110 = 0 ; VAR_111 : for ( ; VAR_112 < VAR_113 ; VAR_114 ++ ) { VAR_115 = VAR_116 -> VAR_117 [ VAR_118 ] ; if ( ! VAR_119 ) continue ; if ( METHOD_15 ( VAR_120 ) ) { if ( METHOD_16 ( METHOD_17 ( VAR_121 ) , VAR_122 ) ) VAR_123 -> VAR_124 [ VAR_125 ] = VAR_126 ; continue ; } VAR_127 = & VAR_128 -> VAR_129 [ VAR_130 ] ; VAR_131 = VAR_132 ; goto VAR_133 ; } METHOD_18 ( ""--compressnode%p--\\n"" , VAR_134 ) ; VAR_135 -> VAR_136 = 0 ; VAR_137 = 0 ; for ( VAR_138 = 0 ; VAR_139 < VAR_140 ; VAR_141 ++ ) { VAR_142 = VAR_143 -> VAR_144 [ VAR_145 ] ; if ( ! VAR_146 ) VAR_147 ++ ; else if ( METHOD_19 ( VAR_148 ) ) VAR_149 -> VAR_150 ++ ; } METHOD_20 ( ""free=%d,leaves=%lu\\n"" , VAR_151 , VAR_152 -> VAR_153 ) ; VAR_154 = 0 ; for ( VAR_155 = 0 ; VAR_156 < VAR_157 ; VAR_158 ++ ) { struct STRUCT_OR_UNION_11 * VAR_159 ; struct STRUCT_OR_UNION_12 * VAR_160 ; VAR_161 = VAR_162 -> VAR_163 [ VAR_164 ] ; if ( ! VAR_165 || METHOD_21 ( VAR_166 ) ) continue ; VAR_167 = VAR_168 ; if ( METHOD_22 ( VAR_169 ) ) { VAR_170 = METHOD_23 ( VAR_171 ) ; VAR_172 = VAR_173 -> VAR_174 ; } VAR_175 = METHOD_24 ( VAR_176 ) ; VAR_177 -> VAR_178 += VAR_179 -> VAR_180 ; if ( VAR_181 -> VAR_182 <= VAR_183 + 1 ) { METHOD_25 ( ""[%d]foldnode%lu/%d[nx%d]\\n"" , VAR_184 , VAR_185 -> VAR_186 , VAR_187 + 1 , VAR_188 ) ; METHOD_26 ( VAR_189 ) ; VAR_190 -> VAR_191 [ VAR_192 ] = VAR_193 ; VAR_194 ++ ; if ( VAR_195 < VAR_196 ) VAR_197 = VAR_198 ; for ( VAR_199 = 0 ; VAR_200 < VAR_201 ; VAR_202 ++ ) { struct STRUCT_OR_UNION_13 * VAR_203 = VAR_204 -> VAR_205 [ VAR_206 ] ; if ( ! VAR_207 ) continue ; METHOD_27 ( METHOD_28 ( VAR_208 ) ) ; while ( VAR_209 -> VAR_210 [ VAR_211 ] ) VAR_212 ++ ; METHOD_29 ( VAR_213 >= VAR_214 ) ; VAR_215 -> VAR_216 [ VAR_217 ++ ] = VAR_218 ; VAR_219 -- ; } METHOD_30 ( VAR_220 ) ; } else { METHOD_31 ( ""[%d]retainnode%lu/%d[nx%d]\\n"" , VAR_221 , VAR_222 -> VAR_223 , VAR_224 + 1 , VAR_225 ) ; } } METHOD_32 ( ""after:%lu\\n"" , VAR_226 -> VAR_227 ) ; VAR_228 = VAR_229 -> VAR_230 ; if ( VAR_231 == VAR_232 - 1 ) { for ( VAR_233 = 0 ; VAR_234 < VAR_235 ; VAR_236 ++ ) if ( ( VAR_237 = VAR_238 -> VAR_239 [ VAR_240 ] ) ) break ; if ( METHOD_33 ( VAR_241 ) && METHOD_34 ( VAR_242 ) ) { METHOD_35 ( ""excisenode%pwith1shortcut\\n"" , VAR_243 ) ; VAR_244 = METHOD_36 ( VAR_245 ) ; VAR_246 = VAR_247 -> VAR_248 ; VAR_249 = VAR_250 -> VAR_251 ; METHOD_37 ( VAR_252 ) ; if ( ! VAR_253 ) { VAR_254 -> VAR_255 = VAR_256 ; VAR_257 -> VAR_258 = 0 ; VAR_259 = VAR_260 ; goto VAR_261 ; } if ( METHOD_38 ( VAR_262 ) ) { struct STRUCT_OR_UNION_14 * VAR_263 = METHOD_39 ( VAR_264 ) ; METHOD_40 ( ""exciseprecedingshortcut\\n"" ) ; VAR_265 = VAR_266 -> VAR_267 = VAR_268 -> VAR_269 ; VAR_270 = VAR_271 -> VAR_272 = VAR_273 -> VAR_274 ; METHOD_41 ( VAR_275 ) ; if ( ! VAR_276 ) { VAR_277 -> VAR_278 = VAR_279 ; VAR_280 -> VAR_281 = 0 ; VAR_282 = VAR_283 ; goto VAR_284 ; } } VAR_285 -> VAR_286 = VAR_287 ; VAR_288 -> VAR_289 = VAR_290 ; VAR_291 = METHOD_42 ( VAR_292 ) ; VAR_293 -> VAR_294 [ VAR_295 ] = VAR_296 ; goto VAR_297 ; } } VAR_298 = VAR_299 -> VAR_300 ; if ( ! VAR_301 ) goto VAR_302 ; if ( METHOD_43 ( VAR_303 ) ) { VAR_304 = METHOD_44 ( VAR_305 ) ; VAR_306 = VAR_307 -> VAR_308 ; VAR_309 = VAR_310 -> VAR_311 ; if ( VAR_312 -> VAR_313 <= VAR_314 ) { struct STRUCT_OR_UNION_15 * VAR_315 ; METHOD_45 ( ""exciseshortcut\\n"" ) ; VAR_316 -> VAR_317 = VAR_318 ; VAR_319 -> VAR_320 = VAR_321 ; METHOD_46 ( VAR_322 ) ; if ( ! VAR_323 ) { VAR_324 = METHOD_47 ( VAR_325 ) ; goto VAR_326 ; } VAR_327 = METHOD_48 ( VAR_328 ) ; VAR_329 -> VAR_330 [ VAR_331 ] = METHOD_49 ( VAR_332 ) ; } } else { VAR_333 = VAR_334 ; } VAR_335 = METHOD_50 ( VAR_336 ) ; VAR_337 : VAR_338 = VAR_339 -> VAR_340 ; if ( METHOD_51 ( VAR_341 ) ) { VAR_342 = METHOD_52 ( VAR_343 ) ; VAR_344 = VAR_345 -> VAR_346 ; VAR_347 = VAR_348 -> VAR_349 ;  } else {  VAR_350 = VAR_351 -> VAR_352 ; VAR_353 = VAR_354 ; }  METHOD_53 ( ! VAR_355 ) ;  VAR_356 = METHOD_54 ( VAR_357 ) ; VAR_358 ++ ; goto VAR_359 ; VAR_360 : VAR_361 -> VAR_362 [ 0 ] . VAR_363 = VAR_364 ; METHOD_55 ( VAR_365 ) ; VAR_366 -> VAR_367 = VAR_368 ; return 0 ; VAR_369 : METHOD_56 ( ""enomem\\n"" ) ; METHOD_57 ( VAR_370 , VAR_371 -> VAR_372 ) ; METHOD_58 ( VAR_373 ) ; return - VAR_374 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( TYPE_2 * VAR_2 , TYPE_3 * VAR_3 ) , TYPE_4 * VAR_4 ) { struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 , * VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 , * VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 , * VAR_13 , * * VAR_14 ; unsigned TYPE_5 VAR_15 ; TYPE_6 VAR_16 , VAR_17 , VAR_18 , VAR_19 , VAR_20 ; METHOD_2 ( ""-->%s()\\n"" , VAR_21 ) ; if ( ! VAR_22 -> VAR_23 ) return 0 ; VAR_24 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_25 ) ; if ( ! VAR_26 ) return - VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 -> VAR_32 = VAR_33 ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 [ 0 ] . VAR_39 = & VAR_40 -> VAR_41 ; VAR_42 -> VAR_43 = VAR_44 -> VAR_45 ; VAR_46 = VAR_47 = VAR_48 ; VAR_49 = & VAR_50 ; VAR_51 = VAR_52 -> VAR_53 ; VAR_54 : if ( METHOD_4 ( VAR_55 ) ) { VAR_56 = METHOD_5 ( VAR_57 ) ; VAR_58 = METHOD_6 ( VAR_59 -> VAR_60 , VAR_61 ) ; VAR_62 >>= VAR_63 ; VAR_64 = METHOD_7 ( sizeof ( struct STRUCT_OR_UNION_8 ) + VAR_65 * sizeof ( unsigned TYPE_7 ) , VAR_66 ) ; if ( ! VAR_67 ) goto VAR_68 ; METHOD_8 ( ""dupshortcut%p->%p\\n"" , VAR_69 , VAR_70 ) ; METHOD_9 ( VAR_71 , VAR_72 , ( sizeof ( struct STRUCT_OR_UNION_9 ) + VAR_73 * sizeof ( unsigned TYPE_8 ) ) ) ; VAR_74 -> VAR_75 = VAR_76 ; VAR_77 -> VAR_78 = VAR_79 -> VAR_80 ; * VAR_81 = VAR_82 = METHOD_10 ( VAR_83 ) ; VAR_84 = & VAR_85 -> VAR_86 ; VAR_87 = VAR_88 -> VAR_89 ; } VAR_90 = METHOD_11 ( VAR_91 ) ; VAR_92 = METHOD_12 ( sizeof ( struct STRUCT_OR_UNION_10 ) , VAR_93 ) ; if ( ! VAR_94 ) goto VAR_95 ; METHOD_13 ( ""dupnode%p->%p\\n"" , VAR_96 , VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 -> VAR_104 ; * VAR_105 = VAR_106 = METHOD_14 ( VAR_107 ) ; VAR_108 = VAR_109 ; VAR_110 = 0 ; VAR_111 : for ( ; VAR_112 < VAR_113 ; VAR_114 ++ ) { VAR_115 = VAR_116 -> VAR_117 [ VAR_118 ] ; if ( ! VAR_119 ) continue ; if ( METHOD_15 ( VAR_120 ) ) { if ( METHOD_16 ( METHOD_17 ( VAR_121 ) , VAR_122 ) ) VAR_123 -> VAR_124 [ VAR_125 ] = VAR_126 ; continue ; } VAR_127 = & VAR_128 -> VAR_129 [ VAR_130 ] ; VAR_131 = VAR_132 ; goto VAR_133 ; } METHOD_18 ( ""--compressnode%p--\\n"" , VAR_134 ) ; VAR_135 -> VAR_136 = 0 ; VAR_137 = 0 ; for ( VAR_138 = 0 ; VAR_139 < VAR_140 ; VAR_141 ++ ) { VAR_142 = VAR_143 -> VAR_144 [ VAR_145 ] ; if ( ! VAR_146 ) VAR_147 ++ ; else if ( METHOD_19 ( VAR_148 ) ) VAR_149 -> VAR_150 ++ ; } METHOD_20 ( ""free=%d,leaves=%lu\\n"" , VAR_151 , VAR_152 -> VAR_153 ) ; VAR_154 = 0 ; for ( VAR_155 = 0 ; VAR_156 < VAR_157 ; VAR_158 ++ ) { struct STRUCT_OR_UNION_11 * VAR_159 ; struct STRUCT_OR_UNION_12 * VAR_160 ; VAR_161 = VAR_162 -> VAR_163 [ VAR_164 ] ; if ( ! VAR_165 || METHOD_21 ( VAR_166 ) ) continue ; VAR_167 = VAR_168 ; if ( METHOD_22 ( VAR_169 ) ) { VAR_170 = METHOD_23 ( VAR_171 ) ; VAR_172 = VAR_173 -> VAR_174 ; } VAR_175 = METHOD_24 ( VAR_176 ) ; VAR_177 -> VAR_178 += VAR_179 -> VAR_180 ; if ( VAR_181 -> VAR_182 <= VAR_183 + 1 ) { METHOD_25 ( ""[%d]foldnode%lu/%d[nx%d]\\n"" , VAR_184 , VAR_185 -> VAR_186 , VAR_187 + 1 , VAR_188 ) ; METHOD_26 ( VAR_189 ) ; VAR_190 -> VAR_191 [ VAR_192 ] = VAR_193 ; VAR_194 ++ ; if ( VAR_195 < VAR_196 ) VAR_197 = VAR_198 ; for ( VAR_199 = 0 ; VAR_200 < VAR_201 ; VAR_202 ++ ) { struct STRUCT_OR_UNION_13 * VAR_203 = VAR_204 -> VAR_205 [ VAR_206 ] ; if ( ! VAR_207 ) continue ; METHOD_27 ( METHOD_28 ( VAR_208 ) ) ; while ( VAR_209 -> VAR_210 [ VAR_211 ] ) VAR_212 ++ ; METHOD_29 ( VAR_213 >= VAR_214 ) ; VAR_215 -> VAR_216 [ VAR_217 ++ ] = VAR_218 ; VAR_219 -- ; } METHOD_30 ( VAR_220 ) ; } else { METHOD_31 ( ""[%d]retainnode%lu/%d[nx%d]\\n"" , VAR_221 , VAR_222 -> VAR_223 , VAR_224 + 1 , VAR_225 ) ; } } METHOD_32 ( ""after:%lu\\n"" , VAR_226 -> VAR_227 ) ; VAR_228 = VAR_229 -> VAR_230 ; if ( VAR_231 == VAR_232 - 1 ) { for ( VAR_233 = 0 ; VAR_234 < VAR_235 ; VAR_236 ++ ) if ( ( VAR_237 = VAR_238 -> VAR_239 [ VAR_240 ] ) ) break ; if ( METHOD_33 ( VAR_241 ) && METHOD_34 ( VAR_242 ) ) { METHOD_35 ( ""excisenode%pwith1shortcut\\n"" , VAR_243 ) ; VAR_244 = METHOD_36 ( VAR_245 ) ; VAR_246 = VAR_247 -> VAR_248 ; VAR_249 = VAR_250 -> VAR_251 ; METHOD_37 ( VAR_252 ) ; if ( ! VAR_253 ) { VAR_254 -> VAR_255 = VAR_256 ; VAR_257 -> VAR_258 = 0 ; VAR_259 = VAR_260 ; goto VAR_261 ; } if ( METHOD_38 ( VAR_262 ) ) { struct STRUCT_OR_UNION_14 * VAR_263 = METHOD_39 ( VAR_264 ) ; METHOD_40 ( ""exciseprecedingshortcut\\n"" ) ; VAR_265 = VAR_266 -> VAR_267 = VAR_268 -> VAR_269 ; VAR_270 = VAR_271 -> VAR_272 = VAR_273 -> VAR_274 ; METHOD_41 ( VAR_275 ) ; if ( ! VAR_276 ) { VAR_277 -> VAR_278 = VAR_279 ; VAR_280 -> VAR_281 = 0 ; VAR_282 = VAR_283 ; goto VAR_284 ; } } VAR_285 -> VAR_286 = VAR_287 ; VAR_288 -> VAR_289 = VAR_290 ; VAR_291 = METHOD_42 ( VAR_292 ) ; VAR_293 -> VAR_294 [ VAR_295 ] = VAR_296 ; goto VAR_297 ; } } VAR_298 = VAR_299 -> VAR_300 ; if ( ! VAR_301 ) goto VAR_302 ; if ( METHOD_43 ( VAR_303 ) ) { VAR_304 = METHOD_44 ( VAR_305 ) ; VAR_306 = VAR_307 -> VAR_308 ; VAR_309 = VAR_310 -> VAR_311 ; if ( VAR_312 -> VAR_313 <= VAR_314 ) { struct STRUCT_OR_UNION_15 * VAR_315 ; METHOD_45 ( ""exciseshortcut\\n"" ) ; VAR_316 -> VAR_317 = VAR_318 ; VAR_319 -> VAR_320 = VAR_321 ; METHOD_46 ( VAR_322 ) ; if ( ! VAR_323 ) { VAR_324 = METHOD_47 ( VAR_325 ) ; goto VAR_326 ; } VAR_327 = METHOD_48 ( VAR_328 ) ; VAR_329 -> VAR_330 [ VAR_331 ] = METHOD_49 ( VAR_332 ) ; } } else { VAR_333 = VAR_334 ; } VAR_335 = METHOD_50 ( VAR_336 ) ; VAR_337 : VAR_338 = VAR_339 -> VAR_340 ; if ( METHOD_51 ( VAR_341 ) ) { VAR_342 = METHOD_52 ( VAR_343 ) ; VAR_344 = VAR_345 -> VAR_346 ; VAR_347 = VAR_348 -> VAR_349 ; if ( ! VAR_357 ) goto VAR_360 ; } else { VAR_350 = VAR_351 -> VAR_352 ; VAR_353 = VAR_354 ; } METHOD_53 ( ! VAR_357 ) ; VAR_356 = METHOD_54 ( VAR_357 ) ; VAR_358 ++ ; goto VAR_359 ; VAR_360 : VAR_361 -> VAR_362 [ 0 ] . VAR_363 = VAR_364 ; METHOD_55 ( VAR_365 ) ; VAR_366 -> VAR_367 = VAR_368 ; return 0 ; VAR_369 : METHOD_56 ( ""enomem\\n"" ) ; METHOD_57 ( VAR_370 , VAR_371 -> VAR_372 ) ; METHOD_58 ( VAR_373 ) ; return - VAR_374 ; }",472
473,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_2 VAR_8 ; struct STRUCT_OR_UNION_3 STRUCT_OR_UNION_4 ; struct STRUCT_OR_UNION_5 TYPE_3 * VAR_9 ; unsigned TYPE_4 VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; unsigned TYPE_7 VAR_14 , VAR_15 , VAR_16 ; VAR_17 = ( struct STRUCT_OR_UNION_6 TYPE_8 * ) VAR_18 ; VAR_19 = - VAR_20 ; if ( METHOD_1 ( & STRUCT_OR_UNION_7 , VAR_21 , sizeof ( STRUCT_OR_UNION_8 ) - sizeof ( VAR_22 ) ) ) goto VAR_23 ; VAR_24 = - VAR_25 ; if ( ! STRUCT_OR_UNION_9 . VAR_26 ) goto VAR_27 ; if ( STRUCT_OR_UNION_10 . VAR_28 & ~ ( VAR_29 | VAR_30 ) ) goto VAR_31 ; VAR_32 = 0 ; if ( STRUCT_OR_UNION_11 . VAR_33 & VAR_34 ) VAR_35 |= VAR_36 ; if ( STRUCT_OR_UNION_12 . VAR_37 & VAR_38 ) { VAR_39 |= VAR_40 ; VAR_41 = - VAR_42 ; goto VAR_43 ; } VAR_44 = METHOD_2 ( VAR_45 , STRUCT_OR_UNION_13 . VAR_46 . VAR_47 , STRUCT_OR_UNION_14 . VAR_48 . VAR_49 ) ; if ( VAR_50 ) goto VAR_51 ; VAR_52 = STRUCT_OR_UNION_15 . VAR_53 . VAR_54 ; VAR_55 = VAR_56 + STRUCT_OR_UNION_16 . VAR_57 . VAR_58 ; VAR_59 = - VAR_60 ; if ( ! METHOD_3 ( VAR_61 ) ) goto VAR_62 ;  METHOD_4 ( & VAR_63 -> VAR_64 ) ;  VAR_65 = METHOD_5 ( VAR_66 , VAR_67 , & VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; VAR_71 = - VAR_72 ; if ( VAR_73 -> VAR_74 >= VAR_75 ) goto VAR_76 ; if ( METHOD_6 ( VAR_77 ) ) { unsigned TYPE_9 VAR_78 = METHOD_7 ( VAR_79 ) ; if ( VAR_80 & ( VAR_81 - 1 ) ) goto VAR_82 ; } VAR_83 = VAR_84 ; VAR_85 = VAR_86 ; for ( VAR_87 = VAR_88 ; VAR_89 && VAR_90 -> VAR_91 < VAR_92 ; VAR_93 = VAR_94 -> VAR_95 ) { METHOD_8 ( ) ; METHOD_9 ( ! ! VAR_96 -> STRUCT_OR_UNION_17 . VAR_97 ^ ! ! ( VAR_98 -> VAR_99 & ( VAR_100 | VAR_101 ) ) ) ; VAR_102 = - VAR_103 ; if ( ! METHOD_10 ( VAR_104 ) ) goto VAR_105 ; VAR_106 = - VAR_107 ; if ( METHOD_11 ( ! ( VAR_108 -> VAR_109 & VAR_110 ) ) ) goto VAR_111 ; if ( METHOD_12 ( VAR_112 ) && VAR_113 <= VAR_114 -> VAR_115 && VAR_116 > VAR_117 -> VAR_118 ) { unsigned TYPE_10 VAR_119 = METHOD_13 ( VAR_120 ) ; VAR_121 = - VAR_122 ; if ( VAR_123 & ( VAR_124 - 1 ) ) goto VAR_125 ; } VAR_126 = - VAR_127 ; if ( VAR_128 -> STRUCT_OR_UNION_18 . VAR_129 && VAR_130 -> STRUCT_OR_UNION_19 . VAR_131 != VAR_132 ) goto VAR_133 ; if ( METHOD_14 ( VAR_134 ) ) VAR_135 = VAR_136 ; VAR_137 = VAR_138 ; } METHOD_15 ( ! VAR_139 ) ; if ( VAR_140 -> VAR_141 < VAR_142 ) VAR_143 = VAR_144 ; VAR_145 = 0 ; do { METHOD_16 ( ) ; METHOD_17 ( ! METHOD_18 ( VAR_146 ) ) ; METHOD_19 ( VAR_147 -> STRUCT_OR_UNION_20 . VAR_148 && VAR_149 -> STRUCT_OR_UNION_21 . VAR_150 != VAR_151 ) ; METHOD_20 ( ! ( VAR_152 -> VAR_153 & VAR_154 ) ) ; if ( VAR_155 -> STRUCT_OR_UNION_22 . VAR_156 == VAR_157 && ( VAR_158 -> VAR_159 & VAR_160 ) == VAR_161 ) goto VAR_162 ; if ( VAR_163 -> VAR_164 > VAR_165 ) VAR_166 = VAR_167 -> VAR_168 ; VAR_169 = METHOD_21 ( VAR_170 , VAR_171 -> VAR_172 ) ; VAR_173 = ( VAR_174 -> VAR_175 & ~ VAR_176 ) | VAR_177 ; VAR_178 = METHOD_22 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 -> VAR_185 , VAR_186 -> VAR_187 , VAR_188 -> VAR_189 , METHOD_23 ( VAR_190 ) , ( ( struct STRUCT_OR_UNION_23 ) { VAR_191 } ) ) ; if ( VAR_192 ) { VAR_193 = VAR_194 ; goto VAR_195 ; } if ( VAR_196 -> VAR_197 < VAR_198 ) { VAR_199 = METHOD_24 ( VAR_200 , VAR_201 , VAR_202 , 1 ) ; if ( VAR_203 ) break ; } if ( VAR_204 -> VAR_205 > VAR_206 ) { VAR_207 = METHOD_25 ( VAR_208 , VAR_209 , VAR_210 , 0 ) ; if ( VAR_211 ) break ; } VAR_212 : VAR_213 -> VAR_214 = VAR_215 ; VAR_216 -> STRUCT_OR_UNION_24 . VAR_217 = VAR_218 ; VAR_219 : VAR_220 = VAR_221 ; VAR_222 = VAR_223 -> VAR_224 ; VAR_225 = VAR_226 -> VAR_227 ; } while ( VAR_228 && VAR_229 -> VAR_230 < VAR_231 ) ; VAR_232 : METHOD_26 ( & VAR_233 -> VAR_234 ) ; METHOD_27 ( VAR_235 ) ; if ( ! VAR_236 ) { if ( METHOD_28 ( VAR_237 ? VAR_238 : VAR_239 , & VAR_240 -> VAR_241 ) ) VAR_242 = - VAR_243 ; } VAR_244 : return VAR_245 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 -> VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 , * VAR_6 , * VAR_7 ; TYPE_2 VAR_8 ; struct STRUCT_OR_UNION_3 STRUCT_OR_UNION_4 ; struct STRUCT_OR_UNION_5 TYPE_3 * VAR_9 ; unsigned TYPE_4 VAR_10 , VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; unsigned TYPE_7 VAR_14 , VAR_15 , VAR_16 ; VAR_17 = ( struct STRUCT_OR_UNION_6 TYPE_8 * ) VAR_18 ; VAR_19 = - VAR_20 ; if ( METHOD_1 ( & STRUCT_OR_UNION_7 , VAR_21 , sizeof ( STRUCT_OR_UNION_8 ) - sizeof ( VAR_22 ) ) ) goto VAR_23 ; VAR_24 = - VAR_25 ; if ( ! STRUCT_OR_UNION_9 . VAR_26 ) goto VAR_27 ; if ( STRUCT_OR_UNION_10 . VAR_28 & ~ ( VAR_29 | VAR_30 ) ) goto VAR_31 ; VAR_32 = 0 ; if ( STRUCT_OR_UNION_11 . VAR_33 & VAR_34 ) VAR_35 |= VAR_36 ; if ( STRUCT_OR_UNION_12 . VAR_37 & VAR_38 ) { VAR_39 |= VAR_40 ; VAR_41 = - VAR_42 ; goto VAR_43 ; } VAR_44 = METHOD_2 ( VAR_45 , STRUCT_OR_UNION_13 . VAR_46 . VAR_47 , STRUCT_OR_UNION_14 . VAR_48 . VAR_49 ) ; if ( VAR_50 ) goto VAR_51 ; VAR_52 = STRUCT_OR_UNION_15 . VAR_53 . VAR_54 ; VAR_55 = VAR_56 + STRUCT_OR_UNION_16 . VAR_57 . VAR_58 ; VAR_59 = - VAR_60 ; if ( ! METHOD_3 ( VAR_61 ) ) goto VAR_62 ; METHOD_4 ( & VAR_63 -> VAR_64 ) ; VAR_65 = METHOD_5 ( VAR_66 , VAR_67 , & VAR_68 ) ; if ( ! VAR_69 ) goto VAR_70 ; VAR_71 = - VAR_72 ; if ( VAR_73 -> VAR_74 >= VAR_75 ) goto VAR_76 ; if ( METHOD_6 ( VAR_77 ) ) { unsigned TYPE_9 VAR_78 = METHOD_7 ( VAR_79 ) ; if ( VAR_80 & ( VAR_81 - 1 ) ) goto VAR_82 ; } VAR_83 = VAR_84 ; VAR_85 = VAR_86 ; for ( VAR_87 = VAR_88 ; VAR_89 && VAR_90 -> VAR_91 < VAR_92 ; VAR_93 = VAR_94 -> VAR_95 ) { METHOD_8 ( ) ; METHOD_9 ( ! ! VAR_96 -> STRUCT_OR_UNION_17 . VAR_97 ^ ! ! ( VAR_98 -> VAR_99 & ( VAR_100 | VAR_101 ) ) ) ; VAR_102 = - VAR_103 ; if ( ! METHOD_10 ( VAR_104 ) ) goto VAR_105 ; VAR_106 = - VAR_107 ; if ( METHOD_11 ( ! ( VAR_108 -> VAR_109 & VAR_110 ) ) ) goto VAR_111 ; if ( METHOD_12 ( VAR_112 ) && VAR_113 <= VAR_114 -> VAR_115 && VAR_116 > VAR_117 -> VAR_118 ) { unsigned TYPE_10 VAR_119 = METHOD_13 ( VAR_120 ) ; VAR_121 = - VAR_122 ; if ( VAR_123 & ( VAR_124 - 1 ) ) goto VAR_125 ; } VAR_126 = - VAR_127 ; if ( VAR_128 -> STRUCT_OR_UNION_18 . VAR_129 && VAR_130 -> STRUCT_OR_UNION_19 . VAR_131 != VAR_132 ) goto VAR_133 ; if ( METHOD_14 ( VAR_134 ) ) VAR_135 = VAR_136 ; VAR_137 = VAR_138 ; } METHOD_15 ( ! VAR_139 ) ; if ( VAR_140 -> VAR_141 < VAR_142 ) VAR_143 = VAR_144 ; VAR_145 = 0 ; do { METHOD_16 ( ) ; METHOD_17 ( ! METHOD_18 ( VAR_146 ) ) ; METHOD_19 ( VAR_147 -> STRUCT_OR_UNION_20 . VAR_148 && VAR_149 -> STRUCT_OR_UNION_21 . VAR_150 != VAR_151 ) ; METHOD_20 ( ! ( VAR_152 -> VAR_153 & VAR_154 ) ) ; if ( VAR_155 -> STRUCT_OR_UNION_22 . VAR_156 == VAR_157 && ( VAR_158 -> VAR_159 & VAR_160 ) == VAR_161 ) goto VAR_162 ; if ( VAR_163 -> VAR_164 > VAR_165 ) VAR_166 = VAR_167 -> VAR_168 ; VAR_169 = METHOD_21 ( VAR_170 , VAR_171 -> VAR_172 ) ; VAR_173 = ( VAR_174 -> VAR_175 & ~ VAR_176 ) | VAR_177 ; VAR_178 = METHOD_22 ( VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 , VAR_184 -> VAR_185 , VAR_186 -> VAR_187 , VAR_188 -> VAR_189 , METHOD_23 ( VAR_190 ) , ( ( struct STRUCT_OR_UNION_23 ) { VAR_191 } ) ) ; if ( VAR_192 ) { VAR_193 = VAR_194 ; goto VAR_195 ; } if ( VAR_196 -> VAR_197 < VAR_198 ) { VAR_199 = METHOD_24 ( VAR_200 , VAR_201 , VAR_202 , 1 ) ; if ( VAR_203 ) break ; } if ( VAR_204 -> VAR_205 > VAR_206 ) { VAR_207 = METHOD_25 ( VAR_208 , VAR_209 , VAR_210 , 0 ) ; if ( VAR_211 ) break ; } VAR_212 : VAR_213 -> VAR_214 = VAR_215 ; VAR_216 -> STRUCT_OR_UNION_24 . VAR_217 = VAR_218 ; VAR_219 : VAR_220 = VAR_221 ; VAR_222 = VAR_223 -> VAR_224 ; VAR_225 = VAR_226 -> VAR_227 ; } while ( VAR_228 && VAR_229 -> VAR_230 < VAR_231 ) ; VAR_232 : METHOD_26 ( & VAR_233 -> VAR_234 ) ; if ( ! METHOD_29 ( VAR_235 ) ) goto VAR_232 ; METHOD_27 ( VAR_235 ) ; if ( ! VAR_236 ) { if ( METHOD_28 ( VAR_237 ? VAR_238 : VAR_239 , & VAR_240 -> VAR_241 ) ) VAR_242 = - VAR_243 ; } VAR_244 : return VAR_245 ; }",473
474,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 ; unsigned TYPE_2 VAR_11 , VAR_12 , VAR_13 ; TYPE_3 VAR_14 ; TYPE_4 VAR_15 ; TYPE_5 VAR_16 , VAR_17 ; TYPE_6 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; VAR_31 -> VAR_32 [ VAR_33 ] = VAR_34 -> VAR_35 . VAR_36 ; METHOD_1 ( ""-->%s()\\n"" , VAR_37 ) ; VAR_38 = - 1 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { VAR_43 = VAR_44 -> VAR_45 [ VAR_46 ] ; if ( ! VAR_47 ) { VAR_48 = VAR_49 ; continue ; } if ( METHOD_2 ( VAR_50 ) && VAR_51 -> METHOD_3 ( METHOD_4 ( VAR_52 ) , VAR_53 ) ) { METHOD_5 ( ""replaceinslot%d\\n"" , VAR_54 ) ; VAR_55 -> VAR_56 = & VAR_57 -> VAR_58 [ VAR_59 ] ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] ; METHOD_6 ( ""<--%s()=ok[replace]\\n"" , VAR_65 ) ; return VAR_66 ; } } if ( VAR_67 >= 0 ) { METHOD_7 ( ""insertinfreeslot%d\\n"" , VAR_68 ) ; VAR_69 -> VAR_70 = & VAR_71 -> VAR_72 [ VAR_73 ] ; VAR_74 -> VAR_75 = VAR_76 ; METHOD_8 ( ""<--%s()=ok[insert]\\n"" , VAR_77 ) ; return VAR_78 ; } VAR_79 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_80 ) ; if ( ! VAR_81 ) return VAR_82 ; VAR_83 -> VAR_84 [ 0 ] = METHOD_10 ( VAR_85 ) ; VAR_86 = METHOD_11 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_87 ) ; if ( ! VAR_88 ) return VAR_89 ; VAR_90 -> VAR_91 [ 1 ] = METHOD_12 ( VAR_92 ) ; METHOD_13 ( ""nospareslots\\n"" ) ; VAR_93 = VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; VAR_98 ++ ) { VAR_99 = VAR_100 -> VAR_101 [ VAR_102 ] ; if ( METHOD_14 ( VAR_103 ) ) { VAR_104 -> VAR_105 [ VAR_106 ] = 0xff ; VAR_107 = VAR_108 ; continue ; } VAR_109 = VAR_110 -> METHOD_15 ( METHOD_16 ( VAR_111 ) , VAR_112 ) ; VAR_113 >>= VAR_114 & VAR_115 ; VAR_116 -> VAR_117 [ VAR_118 ] = VAR_119 & VAR_120 ; } if ( VAR_121 ) { METHOD_17 ( ""havemeta\\n"" ) ; goto VAR_122 ; } VAR_123 = 0 ; VAR_124 = VAR_125 -> VAR_126 [ 0 ] ; for ( VAR_127 = 1 ; VAR_128 < VAR_129 ; VAR_130 ++ ) VAR_131 |= VAR_132 -> VAR_133 [ VAR_134 ] ^ VAR_135 ; METHOD_18 ( ""onlyleaves;dissimilarity=%lx\\n"" , VAR_136 ) ; if ( ( VAR_137 & VAR_138 ) == 0 ) { if ( ( VAR_139 -> VAR_140 [ VAR_141 ] ^ VAR_142 ) == 0 ) goto VAR_143 ;  goto VAR_144 ;  } VAR_145 : METHOD_19 ( ""splitnode\\n"" ) ; VAR_146 -> VAR_147 [ 0 ] . VAR_148 = METHOD_20 ( VAR_149 ) ; VAR_150 -> VAR_151 = VAR_152 -> VAR_153 ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 -> VAR_159 = METHOD_21 ( VAR_160 ) ; VAR_161 -> VAR_162 = - 1 ; VAR_163 : METHOD_22 ( ""do_split_node\\n"" ) ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 ; VAR_168 -> VAR_169 = 0 ; for ( VAR_170 = 0 ; VAR_171 < VAR_172 ; VAR_173 ++ ) { VAR_174 = VAR_175 -> VAR_176 [ VAR_177 ] ; if ( VAR_178 != 0xff ) for ( VAR_179 = VAR_180 + 1 ; VAR_181 < VAR_182 + 1 ; VAR_183 ++ ) if ( VAR_184 -> VAR_185 [ VAR_186 ] == VAR_187 ) goto VAR_188 ; } VAR_189 : METHOD_23 ( ""sameslot:%x%x[%02x]\\n"" , VAR_190 , VAR_191 , VAR_192 ) ; METHOD_24 ( VAR_193 >= VAR_194 ) ; METHOD_25 ( VAR_195 >= VAR_196 + 1 ) ; METHOD_26 ( VAR_197 >= VAR_198 ) ; VAR_199 -> VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < VAR_204 ; VAR_205 ++ ) if ( METHOD_27 ( VAR_206 -> VAR_207 [ VAR_208 ] ) ) VAR_209 -> VAR_210 [ VAR_211 ] = VAR_212 -> VAR_213 [ VAR_214 ] ; else VAR_215 -> VAR_216 [ VAR_217 ] = VAR_218 ; METHOD_28 ( VAR_219 -> VAR_220 [ VAR_221 ] != VAR_222 ) ; VAR_223 -> VAR_224 [ VAR_225 ] = METHOD_29 ( VAR_226 ) ; VAR_227 = - 1 ; VAR_228 = 0 ; for ( VAR_229 = 0 ; VAR_230 < VAR_231 ; VAR_232 ++ ) { if ( METHOD_30 ( VAR_233 -> VAR_234 [ VAR_235 ] ) ) continue ; if ( VAR_236 -> VAR_237 [ VAR_238 ] == VAR_239 ) { VAR_240 -> VAR_241 [ VAR_242 ++ ] = VAR_243 -> VAR_244 [ VAR_245 ] ; VAR_246 -> VAR_247 ++ ; } else { do { VAR_248 ++ ; } while ( VAR_249 -> VAR_250 [ VAR_251 ] != VAR_252 ) ; VAR_253 -> VAR_254 [ VAR_255 ] = VAR_256 -> VAR_257 [ VAR_258 ] ; } } METHOD_31 ( ""filtered:f=%xn=%x\\n"" , VAR_259 , VAR_260 ) ; if ( VAR_261 -> VAR_262 [ VAR_263 ] != VAR_264 ) { do { VAR_265 ++ ; } while ( VAR_266 -> VAR_267 [ VAR_268 ] != VAR_269 ) ; VAR_270 -> VAR_271 = & VAR_272 -> VAR_273 [ VAR_274 ] ; VAR_275 -> VAR_276 = VAR_277 ; } else { VAR_278 -> VAR_279 = & VAR_280 -> VAR_281 [ VAR_282 ++ ] ; VAR_283 -> VAR_284 = VAR_285 ; } METHOD_32 ( VAR_286 <= 1 ) ; VAR_287 -> VAR_288 = METHOD_33 ( VAR_289 ) ; for ( VAR_290 = 0 ; VAR_291 < VAR_292 ; VAR_293 ++ ) { if ( VAR_294 -> VAR_295 [ VAR_296 ] == 0xff ) { VAR_297 = VAR_298 -> VAR_299 [ VAR_300 ] ; METHOD_34 ( METHOD_35 ( VAR_301 ) ) ; if ( METHOD_36 ( VAR_302 ) ) { VAR_303 = METHOD_37 ( VAR_304 ) ; VAR_305 -> VAR_306 [ VAR_307 ] = & VAR_308 -> VAR_309 ; } else { VAR_310 = METHOD_38 ( VAR_311 ) ; VAR_312 -> VAR_313 [ VAR_314 ] = & VAR_315 -> VAR_316 ; } } } VAR_317 = VAR_318 -> VAR_319 ; if ( ! VAR_320 ) VAR_321 -> VAR_322 [ 0 ] . VAR_323 = & VAR_324 -> VAR_325 -> VAR_326 ; else if ( METHOD_39 ( VAR_327 ) ) VAR_328 -> VAR_329 [ 0 ] . VAR_330 = & METHOD_40 ( VAR_331 ) -> VAR_332 [ VAR_333 -> VAR_334 ] ; else VAR_335 -> VAR_336 [ 0 ] . VAR_337 = & METHOD_41 ( VAR_338 ) -> VAR_339 ; VAR_340 -> VAR_341 [ 0 ] = METHOD_42 ( VAR_342 ) ; METHOD_43 ( ""<--%s()=ok[splitnode]\\n"" , VAR_343 ) ; return VAR_344 ;  VAR_345 :  METHOD_44 ( ""presentleavesclusterbutnotnewleaf\\n"" ) ; VAR_346 -> VAR_347 = VAR_348 -> VAR_349 ; VAR_350 -> VAR_351 = VAR_352 -> VAR_353 ; VAR_354 -> VAR_355 = VAR_356 -> VAR_357 ; VAR_358 -> VAR_359 = METHOD_45 ( VAR_360 ) ; VAR_361 -> VAR_362 = VAR_363 -> VAR_364 [ 0 ] ; VAR_365 -> VAR_366 = VAR_367 -> VAR_368 ; VAR_369 -> VAR_370 = VAR_371 ; for ( VAR_372 = 0 ; VAR_373 < VAR_374 ; VAR_375 ++ ) VAR_376 -> VAR_377 [ VAR_378 ] = VAR_379 -> VAR_380 [ VAR_381 ] ; VAR_382 -> VAR_383 [ VAR_384 -> VAR_385 [ 0 ] ] = METHOD_46 ( VAR_386 ) ; VAR_387 -> VAR_388 = & VAR_389 -> VAR_390 [ VAR_391 -> VAR_392 [ VAR_393 ] ] ; VAR_394 -> VAR_395 [ 0 ] . VAR_396 = & METHOD_47 ( VAR_397 -> VAR_398 ) -> VAR_399 [ VAR_400 -> VAR_401 ] ; VAR_402 -> VAR_403 [ 0 ] . VAR_404 = METHOD_48 ( VAR_405 ) ; VAR_406 -> VAR_407 [ 0 ] = METHOD_49 ( VAR_408 ) ; METHOD_50 ( ""<--%s()=ok[insertnodebefore]\\n"" , VAR_409 ) ; return VAR_410 ; VAR_411 : METHOD_51 ( ""allleavesclustertogether\\n"" ) ; VAR_412 = VAR_413 ; for ( VAR_414 = 0 ; VAR_415 < VAR_416 ; VAR_417 ++ ) { TYPE_7 VAR_418 = VAR_419 -> METHOD_52 ( METHOD_53 ( VAR_420 -> VAR_421 [ VAR_422 ] ) , VAR_423 ) ; if ( VAR_424 < VAR_425 ) { METHOD_54 ( VAR_426 < 0 ) ; VAR_427 = VAR_428 ; } } METHOD_55 ( VAR_429 == VAR_430 ) ; METHOD_56 ( VAR_431 < VAR_432 + VAR_433 ) ; VAR_434 = METHOD_57 ( VAR_435 , VAR_436 ) ; VAR_437 >>= VAR_438 ; VAR_439 = METHOD_58 ( sizeof ( struct STRUCT_OR_UNION_8 ) + VAR_440 * sizeof ( unsigned TYPE_8 ) , VAR_441 ) ; if ( ! VAR_442 ) return VAR_443 ; VAR_444 -> VAR_445 [ 2 ] = METHOD_59 ( VAR_446 ) ; VAR_447 -> VAR_448 [ 0 ] . VAR_449 = METHOD_60 ( VAR_450 ) ; VAR_451 -> VAR_452 = VAR_453 -> VAR_454 ; VAR_455 -> VAR_456 = VAR_457 -> VAR_458 ; VAR_459 -> VAR_460 = METHOD_61 ( VAR_461 ) ; VAR_462 -> VAR_463 = METHOD_62 ( VAR_464 ) ; VAR_465 -> VAR_466 = 0 ; VAR_467 -> VAR_468 = METHOD_63 ( VAR_469 ) ; VAR_470 -> VAR_471 = - 1 ; VAR_472 -> VAR_473 = VAR_474 = VAR_475 & ~ VAR_476 ; METHOD_64 ( ""skip_to_level=%d[diff%d]\\n"" , VAR_477 , VAR_478 ) ; METHOD_65 ( VAR_479 <= 0 ) ; for ( VAR_480 = 0 ; VAR_481 < VAR_482 ; VAR_483 ++ ) VAR_484 -> VAR_485 [ VAR_486 ] = VAR_487 -> METHOD_66 ( VAR_488 , VAR_489 * VAR_490 ) ; VAR_491 = VAR_492 << ( VAR_493 & VAR_494 ) ; METHOD_67 ( ""blankoff[%zu]%d:%lx\\n"" , VAR_495 - 1 , VAR_496 , VAR_497 ) ; VAR_498 -> VAR_499 [ VAR_500 - 1 ] &= ~ VAR_501 ; for ( VAR_502 = 0 ; VAR_503 < VAR_504 ; VAR_505 ++ ) { VAR_506 = VAR_507 -> VAR_508 [ VAR_509 ] ; VAR_510 = VAR_511 -> METHOD_68 ( METHOD_69 ( VAR_512 ) , VAR_513 ) ; VAR_514 >>= VAR_515 & VAR_516 ; VAR_517 -> VAR_518 [ VAR_519 ] = VAR_520 & VAR_521 ; } VAR_522 = VAR_523 -> METHOD_70 ( VAR_524 , VAR_525 ) ; VAR_526 >>= VAR_527 & VAR_528 ; VAR_529 -> VAR_530 [ VAR_531 ] = VAR_532 & VAR_533 ; goto VAR_534 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , const TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 , * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 ; unsigned TYPE_2 VAR_11 , VAR_12 , VAR_13 ; TYPE_3 VAR_14 ; TYPE_4 VAR_15 ; TYPE_5 VAR_16 , VAR_17 ; TYPE_6 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; VAR_23 = VAR_24 -> VAR_25 . VAR_26 ; VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; VAR_31 -> VAR_32 [ VAR_33 ] = VAR_34 -> VAR_35 . VAR_36 ; METHOD_1 ( ""-->%s()\\n"" , VAR_37 ) ; VAR_38 = - 1 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) { VAR_43 = VAR_44 -> VAR_45 [ VAR_46 ] ; if ( ! VAR_47 ) { VAR_48 = VAR_49 ; continue ; } if ( METHOD_2 ( VAR_50 ) && VAR_51 -> METHOD_3 ( METHOD_4 ( VAR_52 ) , VAR_53 ) ) { METHOD_5 ( ""replaceinslot%d\\n"" , VAR_54 ) ; VAR_55 -> VAR_56 = & VAR_57 -> VAR_58 [ VAR_59 ] ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 [ VAR_64 ] ; METHOD_6 ( ""<--%s()=ok[replace]\\n"" , VAR_65 ) ; return VAR_66 ; } } if ( VAR_67 >= 0 ) { METHOD_7 ( ""insertinfreeslot%d\\n"" , VAR_68 ) ; VAR_69 -> VAR_70 = & VAR_71 -> VAR_72 [ VAR_73 ] ; VAR_74 -> VAR_75 = VAR_76 ; METHOD_8 ( ""<--%s()=ok[insert]\\n"" , VAR_77 ) ; return VAR_78 ; } VAR_79 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_80 ) ; if ( ! VAR_81 ) return VAR_82 ; VAR_83 -> VAR_84 [ 0 ] = METHOD_10 ( VAR_85 ) ; VAR_86 = METHOD_11 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_87 ) ; if ( ! VAR_88 ) return VAR_89 ; VAR_90 -> VAR_91 [ 1 ] = METHOD_12 ( VAR_92 ) ; METHOD_13 ( ""nospareslots\\n"" ) ; VAR_93 = VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; VAR_98 ++ ) { VAR_99 = VAR_100 -> VAR_101 [ VAR_102 ] ; if ( METHOD_14 ( VAR_103 ) ) { VAR_104 -> VAR_105 [ VAR_106 ] = 0xff ; VAR_107 = VAR_108 ; continue ; } VAR_109 = VAR_110 -> METHOD_15 ( METHOD_16 ( VAR_111 ) , VAR_112 ) ; VAR_113 >>= VAR_114 & VAR_115 ; VAR_116 -> VAR_117 [ VAR_118 ] = VAR_119 & VAR_120 ; } if ( VAR_121 ) { METHOD_17 ( ""havemeta\\n"" ) ; goto VAR_122 ; } VAR_123 = 0 ; VAR_124 = VAR_125 -> VAR_126 [ 0 ] ; for ( VAR_127 = 1 ; VAR_128 < VAR_129 ; VAR_130 ++ ) VAR_131 |= VAR_132 -> VAR_133 [ VAR_134 ] ^ VAR_135 ; METHOD_18 ( ""onlyleaves;dissimilarity=%lx\\n"" , VAR_136 ) ; if ( ( VAR_137 & VAR_138 ) == 0 ) { if ( ( VAR_139 -> VAR_140 [ VAR_141 ] ^ VAR_142 ) == 0 ) goto VAR_143 ; goto VAR_144 ; } VAR_145 : METHOD_19 ( ""splitnode\\n"" ) ; VAR_146 -> VAR_147 [ 0 ] . VAR_148 = METHOD_20 ( VAR_149 ) ; VAR_150 -> VAR_151 = VAR_152 -> VAR_153 ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 -> VAR_159 = METHOD_21 ( VAR_160 ) ; VAR_161 -> VAR_162 = - 1 ; VAR_163 : METHOD_22 ( ""do_split_node\\n"" ) ; VAR_164 -> VAR_165 = VAR_166 -> VAR_167 ; VAR_168 -> VAR_169 = 0 ; for ( VAR_170 = 0 ; VAR_171 < VAR_172 ; VAR_173 ++ ) { VAR_174 = VAR_175 -> VAR_176 [ VAR_177 ] ; if ( VAR_178 != 0xff ) for ( VAR_179 = VAR_180 + 1 ; VAR_181 < VAR_182 + 1 ; VAR_183 ++ ) if ( VAR_184 -> VAR_185 [ VAR_186 ] == VAR_187 ) goto VAR_188 ; } VAR_189 : METHOD_23 ( ""sameslot:%x%x[%02x]\\n"" , VAR_190 , VAR_191 , VAR_192 ) ; METHOD_24 ( VAR_193 >= VAR_194 ) ; METHOD_25 ( VAR_195 >= VAR_196 + 1 ) ; METHOD_26 ( VAR_197 >= VAR_198 ) ; VAR_199 -> VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < VAR_204 ; VAR_205 ++ ) if ( METHOD_27 ( VAR_206 -> VAR_207 [ VAR_208 ] ) ) VAR_209 -> VAR_210 [ VAR_211 ] = VAR_212 -> VAR_213 [ VAR_214 ] ; else VAR_215 -> VAR_216 [ VAR_217 ] = VAR_218 ; METHOD_28 ( VAR_219 -> VAR_220 [ VAR_221 ] != VAR_222 ) ; VAR_223 -> VAR_224 [ VAR_225 ] = METHOD_29 ( VAR_226 ) ; VAR_227 = - 1 ; VAR_228 = 0 ; for ( VAR_229 = 0 ; VAR_230 < VAR_231 ; VAR_232 ++ ) { if ( METHOD_30 ( VAR_233 -> VAR_234 [ VAR_235 ] ) ) continue ; if ( VAR_236 -> VAR_237 [ VAR_238 ] == VAR_239 ) { VAR_240 -> VAR_241 [ VAR_242 ++ ] = VAR_243 -> VAR_244 [ VAR_245 ] ; VAR_246 -> VAR_247 ++ ; } else { do { VAR_248 ++ ; } while ( VAR_249 -> VAR_250 [ VAR_251 ] != VAR_252 ) ; VAR_253 -> VAR_254 [ VAR_255 ] = VAR_256 -> VAR_257 [ VAR_258 ] ; } } METHOD_31 ( ""filtered:f=%xn=%x\\n"" , VAR_259 , VAR_260 ) ; if ( VAR_261 -> VAR_262 [ VAR_263 ] != VAR_264 ) { do { VAR_265 ++ ; } while ( VAR_266 -> VAR_267 [ VAR_268 ] != VAR_269 ) ; VAR_270 -> VAR_271 = & VAR_272 -> VAR_273 [ VAR_274 ] ; VAR_275 -> VAR_276 = VAR_277 ; } else { VAR_278 -> VAR_279 = & VAR_280 -> VAR_281 [ VAR_282 ++ ] ; VAR_283 -> VAR_284 = VAR_285 ; } METHOD_32 ( VAR_286 <= 1 ) ; VAR_287 -> VAR_288 = METHOD_33 ( VAR_289 ) ; for ( VAR_290 = 0 ; VAR_291 < VAR_292 ; VAR_293 ++ ) { if ( VAR_294 -> VAR_295 [ VAR_296 ] == 0xff ) { VAR_297 = VAR_298 -> VAR_299 [ VAR_300 ] ; METHOD_34 ( METHOD_35 ( VAR_301 ) ) ; if ( METHOD_36 ( VAR_302 ) ) { VAR_303 = METHOD_37 ( VAR_304 ) ; VAR_305 -> VAR_306 [ VAR_307 ] = & VAR_308 -> VAR_309 ; } else { VAR_310 = METHOD_38 ( VAR_311 ) ; VAR_312 -> VAR_313 [ VAR_314 ] = & VAR_315 -> VAR_316 ; } } } VAR_317 = VAR_318 -> VAR_319 ; if ( ! VAR_320 ) VAR_321 -> VAR_322 [ 0 ] . VAR_323 = & VAR_324 -> VAR_325 -> VAR_326 ; else if ( METHOD_39 ( VAR_327 ) ) VAR_328 -> VAR_329 [ 0 ] . VAR_330 = & METHOD_40 ( VAR_331 ) -> VAR_332 [ VAR_333 -> VAR_334 ] ; else VAR_335 -> VAR_336 [ 0 ] . VAR_337 = & METHOD_41 ( VAR_338 ) -> VAR_339 ; VAR_340 -> VAR_341 [ 0 ] = METHOD_42 ( VAR_342 ) ; METHOD_43 ( ""<--%s()=ok[splitnode]\\n"" , VAR_343 ) ; return VAR_344 ; VAR_345 : METHOD_44 ( ""presentleavesclusterbutnotnewleaf\\n"" ) ; VAR_346 -> VAR_347 = VAR_348 -> VAR_349 ; VAR_350 -> VAR_351 = VAR_352 -> VAR_353 ; VAR_354 -> VAR_355 = VAR_356 -> VAR_357 ; VAR_358 -> VAR_359 = METHOD_45 ( VAR_360 ) ; VAR_361 -> VAR_362 = VAR_363 -> VAR_364 [ 0 ] ; VAR_365 -> VAR_366 = VAR_367 -> VAR_368 ; VAR_369 -> VAR_370 = VAR_371 ; for ( VAR_372 = 0 ; VAR_373 < VAR_374 ; VAR_375 ++ ) VAR_376 -> VAR_377 [ VAR_378 ] = VAR_379 -> VAR_380 [ VAR_381 ] ; VAR_382 -> VAR_383 [ VAR_384 -> VAR_385 [ 0 ] ] = METHOD_46 ( VAR_386 ) ; VAR_387 -> VAR_388 = & VAR_389 -> VAR_390 [ VAR_391 -> VAR_392 [ VAR_393 ] ] ; VAR_394 -> VAR_395 [ 0 ] . VAR_396 = & METHOD_47 ( VAR_397 -> VAR_398 ) -> VAR_399 [ VAR_400 -> VAR_401 ] ; VAR_402 -> VAR_403 [ 0 ] . VAR_404 = METHOD_48 ( VAR_405 ) ; VAR_406 -> VAR_407 [ 0 ] = METHOD_49 ( VAR_408 ) ; METHOD_50 ( ""<--%s()=ok[insertnodebefore]\\n"" , VAR_409 ) ; return VAR_410 ; VAR_411 : METHOD_51 ( ""allleavesclustertogether\\n"" ) ; VAR_412 = VAR_413 ; for ( VAR_414 = 0 ; VAR_415 < VAR_416 ; VAR_417 ++ ) { TYPE_7 VAR_418 = VAR_419 -> METHOD_52 ( METHOD_53 ( VAR_420 -> VAR_421 [ VAR_422 ] ) , VAR_423 ) ; if ( VAR_424 < VAR_425 ) { METHOD_54 ( VAR_426 < 0 ) ; VAR_427 = VAR_428 ; } } METHOD_55 ( VAR_429 == VAR_430 ) ; METHOD_56 ( VAR_431 < VAR_432 + VAR_433 ) ; VAR_434 = METHOD_57 ( VAR_435 , VAR_436 ) ; VAR_437 >>= VAR_438 ; VAR_439 = METHOD_58 ( sizeof ( struct STRUCT_OR_UNION_8 ) + VAR_440 * sizeof ( unsigned TYPE_8 ) , VAR_441 ) ; if ( ! VAR_442 ) return VAR_443 ; VAR_444 -> VAR_445 [ 2 ] = METHOD_59 ( VAR_446 ) ; VAR_447 -> VAR_448 [ 0 ] . VAR_449 = METHOD_60 ( VAR_450 ) ; VAR_451 -> VAR_452 = VAR_453 -> VAR_454 ; VAR_455 -> VAR_456 = VAR_457 -> VAR_458 ; VAR_459 -> VAR_460 = METHOD_61 ( VAR_461 ) ; VAR_462 -> VAR_463 = METHOD_62 ( VAR_464 ) ; VAR_465 -> VAR_466 = 0 ; VAR_467 -> VAR_468 = METHOD_63 ( VAR_469 ) ; VAR_470 -> VAR_471 = - 1 ; VAR_472 -> VAR_473 = VAR_474 = VAR_475 & ~ VAR_476 ; METHOD_64 ( ""skip_to_level=%d[diff%d]\\n"" , VAR_477 , VAR_478 ) ; METHOD_65 ( VAR_479 <= 0 ) ; for ( VAR_480 = 0 ; VAR_481 < VAR_482 ; VAR_483 ++ ) VAR_484 -> VAR_485 [ VAR_486 ] = VAR_487 -> METHOD_66 ( VAR_488 , VAR_489 * VAR_490 ) ; VAR_491 = VAR_492 << ( VAR_493 & VAR_494 ) ; METHOD_67 ( ""blankoff[%zu]%d:%lx\\n"" , VAR_495 - 1 , VAR_496 , VAR_497 ) ; VAR_498 -> VAR_499 [ VAR_500 - 1 ] &= ~ VAR_501 ; for ( VAR_502 = 0 ; VAR_503 < VAR_504 ; VAR_505 ++ ) { VAR_506 = VAR_507 -> VAR_508 [ VAR_509 ] ; VAR_510 = VAR_511 -> METHOD_68 ( METHOD_69 ( VAR_512 ) , VAR_513 ) ; VAR_514 >>= VAR_515 & VAR_516 ; VAR_517 -> VAR_518 [ VAR_519 ] = VAR_520 & VAR_521 ; } VAR_522 = VAR_523 -> METHOD_70 ( VAR_524 , VAR_525 ) ; VAR_526 >>= VAR_527 & VAR_528 ; VAR_529 -> VAR_530 [ VAR_531 ] = VAR_532 & VAR_533 ; goto VAR_534 ; }",474
475,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; struct STRUCT_OR_UNION_8 * VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; unsigned TYPE_3 VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_4 VAR_18 = - VAR_19 ; TYPE_5 VAR_20 ; TYPE_6 VAR_21 = 0 ;  METHOD_4 ( VAR_22 ) ;  for ( VAR_23 = VAR_24 -> VAR_25 , VAR_26 = VAR_27 -> VAR_28 ; VAR_29 > 0 ; VAR_30 -- , VAR_31 ++ ) { unsigned TYPE_7 VAR_32 = VAR_33 -> VAR_34 ; TYPE_8 TYPE_9 * VAR_35 = VAR_36 -> VAR_37 ; while ( VAR_38 ) { VAR_39 = list_first_entry ( & VAR_40 -> VAR_41 , struct STRUCT_OR_UNION_11 , VAR_42 ) ; VAR_43 = VAR_44 -> VAR_45 ; while ( ! VAR_46 -> VAR_47 ) VAR_48 ++ ; VAR_49 = VAR_50 -> VAR_51 ; if ( ! VAR_52 ) { VAR_53 = METHOD_5 ( VAR_54 , VAR_55 ) ; if ( VAR_56 ) goto VAR_57 ; } VAR_58 = min_t ( unsigned TYPE_10 , VAR_59 , VAR_60 ) ; VAR_61 = METHOD_6 ( & VAR_62 -> VAR_63 , VAR_64 , VAR_65 , 1 ) ; VAR_66 = VAR_67 ; if ( VAR_68 < 0 ) goto VAR_69 ; if ( VAR_70 -> VAR_71 || VAR_72 < VAR_73 -> VAR_74 ) VAR_75 -= VAR_76 % VAR_77 ; VAR_78 = - VAR_79 ; if ( ! VAR_80 ) goto VAR_81 ; METHOD_7 ( & VAR_82 -> VAR_83 , VAR_84 , VAR_85 -> VAR_86 . VAR_87 , VAR_88 , VAR_89 -> VAR_90 ) ; VAR_91 = METHOD_8 ( VAR_92 -> VAR_93 ? METHOD_9 ( & VAR_94 -> VAR_95 ) : METHOD_10 ( & VAR_96 -> VAR_97 ) , & VAR_98 -> VAR_99 ) ; VAR_100 : METHOD_11 ( & VAR_101 -> VAR_102 ) ; if ( VAR_103 ) goto VAR_104 ; VAR_105 += VAR_106 ; VAR_107 += VAR_108 ; VAR_109 -= VAR_110 ; METHOD_12 ( VAR_111 , VAR_112 ) ; } } VAR_113 = 0 ; VAR_114 : METHOD_13 ( VAR_115 ) ; METHOD_14 ( VAR_116 ) ; return VAR_117 ? : VAR_118 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = VAR_9 -> VAR_10 ; unsigned VAR_11 = METHOD_2 ( METHOD_3 ( & VAR_12 -> VAR_13 ) ) ; struct STRUCT_OR_UNION_8 * VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; unsigned TYPE_3 VAR_16 ; struct STRUCT_OR_UNION_10 * VAR_17 ; TYPE_4 VAR_18 = - VAR_19 ; TYPE_5 VAR_20 ; TYPE_6 VAR_21 = 0 ; METHOD_4 ( VAR_22 ) ; for ( VAR_23 = VAR_24 -> VAR_25 , VAR_26 = VAR_27 -> VAR_28 ; VAR_29 > 0 ; VAR_30 -- , VAR_31 ++ ) { unsigned TYPE_7 VAR_32 = VAR_33 -> VAR_34 ; TYPE_8 TYPE_9 * VAR_35 = VAR_36 -> VAR_37 ; while ( VAR_38 ) { VAR_39 = list_first_entry ( & VAR_40 -> VAR_41 , struct STRUCT_OR_UNION_11 , VAR_42 ) ; VAR_43 = VAR_44 -> VAR_45 ; while ( ! VAR_46 -> VAR_47 ) VAR_48 ++ ; VAR_49 = VAR_50 -> VAR_51 ; if ( ! VAR_52 ) { VAR_53 = METHOD_5 ( VAR_54 , VAR_55 ) ; if ( VAR_56 ) goto VAR_57 ; } VAR_58 = min_t ( unsigned TYPE_10 , VAR_59 , VAR_60 ) ; VAR_61 = METHOD_6 ( & VAR_62 -> VAR_63 , VAR_64 , VAR_65 , 1 ) ; VAR_66 = VAR_67 ; if ( VAR_68 < 0 ) goto VAR_69 ; if ( VAR_70 -> VAR_71 || VAR_72 < VAR_73 -> VAR_74 ) VAR_75 -= VAR_76 % VAR_77 ; VAR_78 = - VAR_79 ; if ( ! VAR_80 ) goto VAR_81 ; METHOD_7 ( & VAR_82 -> VAR_83 , VAR_84 , VAR_85 -> VAR_86 . VAR_87 , VAR_88 , VAR_89 -> VAR_90 ) ; VAR_91 = METHOD_8 ( VAR_92 -> VAR_93 ? METHOD_9 ( & VAR_94 -> VAR_95 ) : METHOD_10 ( & VAR_96 -> VAR_97 ) , & VAR_98 -> VAR_99 ) ; VAR_100 : METHOD_11 ( & VAR_101 -> VAR_102 ) ; if ( VAR_103 ) goto VAR_104 ; VAR_105 += VAR_106 ; VAR_107 += VAR_108 ; VAR_109 -= VAR_110 ; METHOD_12 ( VAR_111 , VAR_112 ) ; } } VAR_113 = 0 ; VAR_114 : METHOD_13 ( VAR_115 ) ; METHOD_14 ( VAR_116 ) ; VAR_27 -> VAR_119 = 0 ; return VAR_117 ? : VAR_118 ; }",475
476,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) {  struct STRUCT_OR_UNION_4 * VAR_4 , * VAR_5 ;  TYPE_1 VAR_6 = 0 ; struct STRUCT_OR_UNION_5 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = VAR_10 ; METHOD_1 ( VAR_11 ) ; METHOD_2 ( VAR_12 ) ; for ( VAR_13 = METHOD_3 ( VAR_14 , VAR_15 ) ; VAR_16 ; VAR_17 = METHOD_4 ( VAR_18 , VAR_19 ) ) { TYPE_2 VAR_20 ; struct STRUCT_OR_UNION_7 * VAR_21 ; if ( METHOD_5 ( VAR_22 ) ) continue ;  VAR_23 = METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , & VAR_27 ) ;  VAR_28 = METHOD_7 ( VAR_29 , VAR_30 -> VAR_31 . VAR_32 , VAR_33 ) ; if ( METHOD_8 ( VAR_34 ) ) { VAR_35 = METHOD_9 ( VAR_36 ) ; METHOD_10 ( VAR_37 , VAR_38 . VAR_39 ) ; goto VAR_40 ; } if ( METHOD_11 ( VAR_41 , VAR_42 -> VAR_43 . VAR_44 ) ) { METHOD_12 ( VAR_45 , VAR_46 , VAR_47 ) ; METHOD_13 ( & VAR_48 -> VAR_49 , VAR_50 ) ; } else { METHOD_14 ( & VAR_51 -> VAR_52 , & VAR_53 ) ; } VAR_54 = VAR_55 ; VAR_56 = VAR_57 ; } VAR_58 : METHOD_15 ( & VAR_59 ) ; while ( ! METHOD_16 ( & VAR_60 ) ) { VAR_61 = list_first_entry ( & VAR_62 , struct STRUCT_OR_UNION_8 , VAR_63 ) ; METHOD_17 ( VAR_64 , 0 , & VAR_65 ) ; } METHOD_18 ( & VAR_66 ) ; METHOD_19 ( & VAR_67 ) ; return VAR_68 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { struct STRUCT_OR_UNION_9 * VAR_69 = VAR_70 -> VAR_71 -> VAR_72 -> VAR_69 ; struct STRUCT_OR_UNION_4 * VAR_4 , * VAR_5 ; TYPE_1 VAR_6 = 0 ; struct STRUCT_OR_UNION_5 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 = VAR_10 ; METHOD_1 ( VAR_11 ) ; METHOD_2 ( VAR_12 ) ; for ( VAR_13 = METHOD_3 ( VAR_14 , VAR_15 ) ; VAR_16 ; VAR_17 = METHOD_4 ( VAR_18 , VAR_19 ) ) { TYPE_2 VAR_20 ; struct STRUCT_OR_UNION_7 * VAR_21 ; if ( METHOD_5 ( VAR_22 ) ) continue ; VAR_23 = METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , & VAR_27 ) ; VAR_28 = METHOD_7 ( VAR_29 , VAR_30 -> VAR_31 . VAR_32 , VAR_33 ) ; if ( METHOD_8 ( VAR_34 ) ) { VAR_35 = METHOD_9 ( VAR_36 ) ; METHOD_10 ( VAR_37 , VAR_38 . VAR_39 ) ; goto VAR_40 ; } if ( METHOD_11 ( VAR_41 , VAR_42 -> VAR_43 . VAR_44 ) ) { METHOD_12 ( VAR_45 , VAR_46 , VAR_47 ) ; METHOD_13 ( & VAR_48 -> VAR_49 , VAR_50 ) ; } else { METHOD_14 ( & VAR_51 -> VAR_52 , & VAR_53 ) ; } VAR_54 = VAR_55 ; VAR_56 = VAR_57 ; } VAR_58 : METHOD_15 ( & VAR_59 ) ; while ( ! METHOD_16 ( & VAR_60 ) ) { VAR_61 = list_first_entry ( & VAR_62 , struct STRUCT_OR_UNION_8 , VAR_63 ) ; METHOD_17 ( VAR_64 , 0 , & VAR_65 ) ; } METHOD_18 ( & VAR_66 ) ; METHOD_19 ( & VAR_67 ) ; return VAR_68 ; }",476
477,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 -> VAR_3 > 0 ) { METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ; } if ( VAR_7 -> VAR_8 -> VAR_9 != VAR_10 ) { METHOD_2 ( VAR_11 -> VAR_12 -> VAR_13 ) ; } if ( VAR_14 -> VAR_15 -> VAR_16 != VAR_17 ) { METHOD_3 ( VAR_18 -> VAR_19 -> VAR_20 , VAR_21 ) ; METHOD_4 ( VAR_22 -> VAR_23 -> VAR_24 ) ; }  if ( VAR_25 -> VAR_26 -> VAR_27 > 0 ) {  METHOD_5 ( VAR_28 -> VAR_29 -> VAR_30 ) ; } }",static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { if ( VAR_1 -> VAR_2 -> VAR_3 > 0 ) { METHOD_1 ( VAR_4 -> VAR_5 -> VAR_6 ) ; } },477
478,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ; TYPE_1 VAR_8 ; TYPE_2 VAR_9 ; TYPE_3 VAR_10 ; METHOD_1 ( VAR_11 ) ; VAR_12 = VAR_13 -> VAR_14 ; METHOD_2 ( & VAR_15 , VAR_16 ) ; VAR_17 = METHOD_3 ( VAR_18 ) ; METHOD_4 ( VAR_19 . VAR_20 < METHOD_5 ( VAR_21 -> VAR_22 -> VAR_23 ) / 8 ) ; VAR_24 = VAR_25 -> VAR_26 ; VAR_27 = VAR_28 = VAR_29 . VAR_30 / 2 ; for ( VAR_31 = & VAR_32 [ VAR_33 ] ; VAR_34 > 4 ; VAR_35 = & VAR_36 [ VAR_37 ] ) { VAR_38 /= 2 ; if ( METHOD_6 ( VAR_39 -> VAR_40 ) < VAR_41 ) VAR_42 += VAR_43 ; else if ( METHOD_7 ( VAR_44 -> VAR_45 ) > VAR_46 ) VAR_47 -= VAR_48 ; else break ; } METHOD_8 ( VAR_49 >= 0 && ( ! VAR_50 . VAR_51 || VAR_52 < VAR_53 . VAR_54 ) ) ; METHOD_9 ( VAR_55 <= 4 || METHOD_10 ( VAR_56 -> VAR_57 ) == VAR_58 ) ; while ( VAR_59 > 0 && METHOD_11 ( VAR_60 -> VAR_61 ) >= VAR_62 ) { VAR_63 -- ; VAR_64 -- ; } while ( VAR_65 < VAR_66 . VAR_67 && METHOD_12 ( VAR_68 -> VAR_69 ) < VAR_70 ) { VAR_71 ++ ; VAR_72 ++ ; } if ( VAR_73 == VAR_74 . VAR_75 || METHOD_13 ( VAR_76 -> VAR_77 ) != VAR_78 ) { VAR_79 -> VAR_80 = VAR_81 ; return METHOD_14 ( VAR_82 ) ; } for ( ; VAR_83 < VAR_84 . VAR_85 && ( METHOD_15 ( VAR_86 -> VAR_87 ) == VAR_88 ) ; VAR_89 ++ , VAR_90 ++ ) { if ( ( VAR_91 -> VAR_92 & VAR_93 ) != ( VAR_94 -> VAR_95 & VAR_96 ) ) { continue ; } if ( VAR_97 -> VAR_98 & VAR_99 ) { VAR_100 = METHOD_16 ( VAR_101 , VAR_102 ) ; if ( VAR_103 -> VAR_104 != VAR_105 -> VAR_106 ) continue ; if ( METHOD_17 ( VAR_107 -> VAR_108 , VAR_109 -> VAR_110 , VAR_111 -> VAR_112 ) != 0 ) continue ; if ( ! METHOD_18 ( VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ) continue ; VAR_117 -> VAR_118 = VAR_119 ; return METHOD_19 ( VAR_120 ) ; } else { VAR_121 = METHOD_20 ( VAR_122 , VAR_123 ) ; if ( VAR_124 -> VAR_125 != VAR_126 -> VAR_127 ) continue ; if ( METHOD_21 ( VAR_128 -> VAR_129 , VAR_130 -> VAR_131 , VAR_132 -> VAR_133 ) != 0 ) continue ; if ( ! METHOD_22 ( VAR_134 -> VAR_135 , VAR_136 -> VAR_137 ) ) continue ; VAR_138 -> VAR_139 = VAR_140 ;  VAR_141 -> VAR_142 = METHOD_23 ( VAR_143 -> VAR_144 ) ;  VAR_145 -> VAR_146 = METHOD_24 ( VAR_147 -> VAR_148 ) ; VAR_149 -> VAR_150 = METHOD_25 ( VAR_151 -> VAR_152 -> VAR_153 ,  VAR_154 -> VAR_155 ) ;  return METHOD_26 ( VAR_156 ) ; } } VAR_157 -> VAR_158 = VAR_159 ; return METHOD_27 ( VAR_160 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 ; TYPE_1 VAR_8 ; TYPE_2 VAR_9 ; TYPE_3 VAR_10 ; METHOD_1 ( VAR_11 ) ; VAR_12 = VAR_13 -> VAR_14 ; METHOD_2 ( & VAR_15 , VAR_16 ) ; VAR_17 = METHOD_3 ( VAR_18 ) ; METHOD_4 ( VAR_19 . VAR_20 < METHOD_5 ( VAR_21 -> VAR_22 -> VAR_23 ) / 8 ) ; VAR_24 = VAR_25 -> VAR_26 ; VAR_27 = VAR_28 = VAR_29 . VAR_30 / 2 ; for ( VAR_31 = & VAR_32 [ VAR_33 ] ; VAR_34 > 4 ; VAR_35 = & VAR_36 [ VAR_37 ] ) { VAR_38 /= 2 ; if ( METHOD_6 ( VAR_39 -> VAR_40 ) < VAR_41 ) VAR_42 += VAR_43 ; else if ( METHOD_7 ( VAR_44 -> VAR_45 ) > VAR_46 ) VAR_47 -= VAR_48 ; else break ; } METHOD_8 ( VAR_49 >= 0 && ( ! VAR_50 . VAR_51 || VAR_52 < VAR_53 . VAR_54 ) ) ; METHOD_9 ( VAR_55 <= 4 || METHOD_10 ( VAR_56 -> VAR_57 ) == VAR_58 ) ; while ( VAR_59 > 0 && METHOD_11 ( VAR_60 -> VAR_61 ) >= VAR_62 ) { VAR_63 -- ; VAR_64 -- ; } while ( VAR_65 < VAR_66 . VAR_67 && METHOD_12 ( VAR_68 -> VAR_69 ) < VAR_70 ) { VAR_71 ++ ; VAR_72 ++ ; } if ( VAR_73 == VAR_74 . VAR_75 || METHOD_13 ( VAR_76 -> VAR_77 ) != VAR_78 ) { VAR_79 -> VAR_80 = VAR_81 ; return METHOD_14 ( VAR_82 ) ; } for ( ; VAR_83 < VAR_84 . VAR_85 && ( METHOD_15 ( VAR_86 -> VAR_87 ) == VAR_88 ) ; VAR_89 ++ , VAR_90 ++ ) { if ( ( VAR_91 -> VAR_92 & VAR_93 ) != ( VAR_94 -> VAR_95 & VAR_96 ) ) { continue ; } if ( VAR_97 -> VAR_98 & VAR_99 ) { VAR_100 = METHOD_16 ( VAR_101 , VAR_102 ) ; if ( VAR_103 -> VAR_104 != VAR_105 -> VAR_106 ) continue ; if ( METHOD_17 ( VAR_107 -> VAR_108 , VAR_109 -> VAR_110 , VAR_111 -> VAR_112 ) != 0 ) continue ; if ( ! METHOD_18 ( VAR_113 -> VAR_114 , VAR_115 -> VAR_116 ) ) continue ; VAR_117 -> VAR_118 = VAR_119 ; return METHOD_19 ( VAR_120 ) ; } else { VAR_121 = METHOD_20 ( VAR_122 , VAR_123 ) ; if ( VAR_124 -> VAR_125 != VAR_126 -> VAR_127 ) continue ; if ( METHOD_21 ( VAR_128 -> VAR_129 , VAR_130 -> VAR_131 , VAR_132 -> VAR_133 ) != 0 ) continue ; if ( ! METHOD_22 ( VAR_134 -> VAR_135 , VAR_136 -> VAR_137 ) ) continue ; VAR_138 -> VAR_139 = VAR_140 ; VAR_141 -> VAR_142 = METHOD_23 ( VAR_143 -> VAR_144 ) ; VAR_145 -> VAR_146 = METHOD_24 ( VAR_147 -> VAR_148 ) ; VAR_149 -> VAR_150 = METHOD_25 ( VAR_151 -> VAR_152 -> VAR_153 , VAR_154 -> VAR_155 ) ; return METHOD_26 ( VAR_156 ) ; } } VAR_157 -> VAR_158 = VAR_159 ; return METHOD_27 ( VAR_160 ) ; }",478
479," TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) {  METHOD_1 ( VAR_3 -> VAR_4 + VAR_5 -> VAR_6 ,  VAR_7 -> VAR_8 + VAR_9 -> VAR_10 , VAR_11 -> VAR_12 + VAR_13 -> VAR_14 , VAR_15 ) ;  }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { METHOD_1 ( VAR_3 -> VAR_4 + VAR_5 -> VAR_6 , VAR_7 -> VAR_8 + VAR_9 -> VAR_10 , VAR_11 -> VAR_16 + 1 , VAR_15 ) ; }",479
480,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 = VAR_13 ; unsigned TYPE_3 VAR_14 ; TYPE_4 VAR_15 = 0 ; METHOD_1 ( VAR_16 , 0x00 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ; VAR_17 -> VAR_18 = VAR_19 ; while ( VAR_20 > 0 ) { VAR_21 = VAR_22 [ 0 ] ; if ( ! VAR_23 ) { METHOD_2 ( & VAR_24 -> VAR_25 , ""skippinggarbagebyte\\n"" ) ; VAR_26 = 1 ;  goto VAR_27 ;  } if ( VAR_28 [ 1 ] != VAR_29 ) { METHOD_3 ( & VAR_30 -> VAR_31 , ""skippinggarbage\\n"" ) ; goto VAR_32 ; } switch ( VAR_33 [ 2 ] ) { case VAR_34 : if ( VAR_35 < sizeof ( struct STRUCT_OR_UNION_8 ) ) goto VAR_36 ; if ( VAR_37 ) { METHOD_4 ( & VAR_38 -> VAR_39 , ""Morethanoneuniondescriptor,skipping...\\n"" ) ; goto VAR_40 ; } VAR_41 = ( struct STRUCT_OR_UNION_9 * ) VAR_42 ; break ; case VAR_43 : if ( VAR_44 < sizeof ( struct STRUCT_OR_UNION_10 ) ) goto VAR_45 ; VAR_46 -> STRUCT_OR_UNION_11 = ( struct STRUCT_OR_UNION_12 * ) VAR_47 ; break ; case VAR_48 : if ( VAR_49 != sizeof ( struct STRUCT_OR_UNION_13 ) ) goto VAR_50 ; if ( VAR_51 ) return - VAR_52 ; VAR_53 = ( struct STRUCT_OR_UNION_14 * ) VAR_54 ; break ; case VAR_55 : if ( VAR_56 < sizeof ( struct STRUCT_OR_UNION_15 ) ) goto VAR_57 ; VAR_58 -> STRUCT_OR_UNION_16 = ( struct STRUCT_OR_UNION_17 * ) VAR_59 ; break ; case VAR_60 : if ( VAR_61 != sizeof ( struct STRUCT_OR_UNION_18 ) ) goto VAR_62 ; if ( VAR_63 ) return - VAR_64 ; VAR_65 = ( struct STRUCT_OR_UNION_19 * ) VAR_66 ; break ; case VAR_67 : if ( VAR_68 < sizeof ( struct STRUCT_OR_UNION_20 ) ) goto VAR_69 ; VAR_70 -> STRUCT_OR_UNION_21 = ( struct STRUCT_OR_UNION_22 * ) VAR_71 ; break ; case VAR_72 : if ( VAR_73 < sizeof ( struct STRUCT_OR_UNION_23 ) ) goto VAR_74 ; VAR_75 -> STRUCT_OR_UNION_24 = ( struct STRUCT_OR_UNION_25 * ) VAR_76 ; break ; case VAR_77 : if ( VAR_78 < sizeof ( struct STRUCT_OR_UNION_26 * ) ) goto VAR_79 ; if ( VAR_80 ) return - VAR_81 ; VAR_82 = ( struct STRUCT_OR_UNION_27 * ) VAR_83 ; break ; case VAR_84 : if ( VAR_85 < sizeof ( struct STRUCT_OR_UNION_28 * ) ) goto VAR_86 ; if ( VAR_87 ) return - VAR_88 ; VAR_89 = ( struct STRUCT_OR_UNION_29 * ) VAR_90 ; break ; case VAR_91 : if ( VAR_92 < sizeof ( struct STRUCT_OR_UNION_30 ) ) goto VAR_93 ; VAR_94 -> STRUCT_OR_UNION_31 = ( struct STRUCT_OR_UNION_32 * ) VAR_95 ; break ; case VAR_96 : if ( VAR_97 < sizeof ( struct STRUCT_OR_UNION_33 ) ) goto VAR_98 ; VAR_99 -> STRUCT_OR_UNION_34 = ( struct STRUCT_OR_UNION_35 * ) VAR_100 ; break ; case VAR_101 : if ( VAR_102 < sizeof ( struct STRUCT_OR_UNION_36 ) ) break ; VAR_103 -> STRUCT_OR_UNION_37 = ( struct STRUCT_OR_UNION_38 * ) VAR_104 ; break ; case VAR_105 : VAR_106 -> VAR_107 = VAR_108 ; break ; default : METHOD_5 ( & VAR_109 -> VAR_110 , ""Ignoringdescriptor:type%02x,length%ud\\n"" , VAR_111 [ 2 ] , VAR_112 ) ; goto VAR_113 ; } VAR_114 ++ ; VAR_115 : VAR_116 -= VAR_117 ; VAR_118 += VAR_119 ; } VAR_120 -> STRUCT_OR_UNION_39 = VAR_121 ; VAR_122 -> STRUCT_OR_UNION_40 = VAR_123 ; VAR_124 -> STRUCT_OR_UNION_41 = VAR_125 ; VAR_126 -> STRUCT_OR_UNION_42 = VAR_127 ; VAR_128 -> STRUCT_OR_UNION_43 = VAR_129 ; return VAR_130 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_4 * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 = VAR_11 ; struct STRUCT_OR_UNION_6 * VAR_12 = VAR_13 ; unsigned TYPE_3 VAR_14 ; TYPE_4 VAR_15 = 0 ; METHOD_1 ( VAR_16 , 0x00 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ; VAR_17 -> VAR_18 = VAR_19 ; while ( VAR_20 > 0 ) { VAR_21 = VAR_22 [ 0 ] ; if ( ! VAR_23 ) { METHOD_2 ( & VAR_24 -> VAR_25 , ""skippinggarbagebyte\\n"" ) ; VAR_26 = 1 ; goto VAR_27 ; } if ( VAR_28 [ 1 ] != VAR_29 ) { METHOD_3 ( & VAR_30 -> VAR_31 , ""skippinggarbage\\n"" ) ; goto VAR_32 ; } switch ( VAR_33 [ 2 ] ) { case VAR_34 : if ( VAR_35 < sizeof ( struct STRUCT_OR_UNION_8 ) ) goto VAR_36 ; if ( VAR_37 ) { METHOD_4 ( & VAR_38 -> VAR_39 , ""Morethanoneuniondescriptor,skipping...\\n"" ) ; goto VAR_40 ; } VAR_41 = ( struct STRUCT_OR_UNION_9 * ) VAR_42 ; break ; case VAR_43 : if ( VAR_44 < sizeof ( struct STRUCT_OR_UNION_10 ) ) goto VAR_45 ; VAR_46 -> STRUCT_OR_UNION_11 = ( struct STRUCT_OR_UNION_12 * ) VAR_47 ; break ; case VAR_48 : if ( VAR_49 != sizeof ( struct STRUCT_OR_UNION_13 ) ) goto VAR_50 ; if ( VAR_51 ) return - VAR_52 ; VAR_53 = ( struct STRUCT_OR_UNION_14 * ) VAR_54 ; break ; case VAR_55 : if ( VAR_56 < sizeof ( struct STRUCT_OR_UNION_15 ) ) goto VAR_57 ; VAR_58 -> STRUCT_OR_UNION_16 = ( struct STRUCT_OR_UNION_17 * ) VAR_59 ; break ; case VAR_60 : if ( VAR_61 != sizeof ( struct STRUCT_OR_UNION_18 ) ) goto VAR_62 ; if ( VAR_63 ) return - VAR_64 ; VAR_65 = ( struct STRUCT_OR_UNION_19 * ) VAR_66 ; break ; case VAR_67 : if ( VAR_68 < sizeof ( struct STRUCT_OR_UNION_20 ) ) goto VAR_69 ; VAR_70 -> STRUCT_OR_UNION_21 = ( struct STRUCT_OR_UNION_22 * ) VAR_71 ; break ; case VAR_72 : if ( VAR_73 < sizeof ( struct STRUCT_OR_UNION_23 ) ) goto VAR_74 ; VAR_75 -> STRUCT_OR_UNION_24 = ( struct STRUCT_OR_UNION_25 * ) VAR_76 ; break ; case VAR_77 : if ( VAR_78 < sizeof ( struct STRUCT_OR_UNION_26 * ) ) goto VAR_79 ; if ( VAR_80 ) return - VAR_81 ; VAR_82 = ( struct STRUCT_OR_UNION_27 * ) VAR_83 ; break ; case VAR_84 : if ( VAR_85 < sizeof ( struct STRUCT_OR_UNION_28 * ) ) goto VAR_86 ; if ( VAR_87 ) return - VAR_88 ; VAR_89 = ( struct STRUCT_OR_UNION_29 * ) VAR_90 ; break ; case VAR_91 : if ( VAR_92 < sizeof ( struct STRUCT_OR_UNION_30 ) ) goto VAR_93 ; VAR_94 -> STRUCT_OR_UNION_31 = ( struct STRUCT_OR_UNION_32 * ) VAR_95 ; break ; case VAR_96 : if ( VAR_97 < sizeof ( struct STRUCT_OR_UNION_33 ) ) goto VAR_98 ; VAR_99 -> STRUCT_OR_UNION_34 = ( struct STRUCT_OR_UNION_35 * ) VAR_100 ; break ; case VAR_101 : if ( VAR_102 < sizeof ( struct STRUCT_OR_UNION_36 ) ) break ; VAR_103 -> STRUCT_OR_UNION_37 = ( struct STRUCT_OR_UNION_38 * ) VAR_104 ; break ; case VAR_105 : VAR_106 -> VAR_107 = VAR_108 ; break ; default : METHOD_5 ( & VAR_109 -> VAR_110 , ""Ignoringdescriptor:type%02x,length%ud\\n"" , VAR_111 [ 2 ] , VAR_112 ) ; goto VAR_113 ; } VAR_114 ++ ; VAR_115 : VAR_116 -= VAR_117 ; VAR_118 += VAR_119 ; } VAR_120 -> STRUCT_OR_UNION_39 = VAR_121 ; VAR_122 -> STRUCT_OR_UNION_40 = VAR_123 ; VAR_124 -> STRUCT_OR_UNION_41 = VAR_125 ; VAR_126 -> STRUCT_OR_UNION_42 = VAR_127 ; VAR_128 -> STRUCT_OR_UNION_43 = VAR_129 ; return VAR_130 ; }",480
481,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; TYPE_3 TYPE_4 * VAR_6 = ( TYPE_5 TYPE_6 * ) VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_7 VAR_11 = VAR_12 ; TYPE_8 VAR_13 = 0 ; struct STRUCT_OR_UNION_3 VAR_14 ; TYPE_9 VAR_15 ; METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 , ""ParametersPassedtocontrolIOCTLcmd=0x%Xarg=0x%lX"" , VAR_20 , VAR_21 ) ; if ( METHOD_2 ( VAR_22 ) != VAR_23 ) return - VAR_24 ; if ( METHOD_3 ( VAR_25 ) & VAR_26 ) VAR_27 = ! METHOD_4 ( VAR_28 , VAR_29 , METHOD_5 ( VAR_30 ) ) ; else if ( METHOD_6 ( VAR_31 ) & VAR_32 ) VAR_33 = ! METHOD_7 ( VAR_34 , VAR_35 , METHOD_8 ( VAR_36 ) ) ; else if ( VAR_37 == ( METHOD_9 ( VAR_38 ) & VAR_39 ) ) VAR_40 = VAR_41 ; if ( VAR_42 ) return - VAR_43 ; if ( VAR_44 -> VAR_45 ) return - VAR_46 ; if ( VAR_47 == VAR_48 -> VAR_49 ) { switch ( VAR_50 ) { case VAR_51 : case VAR_52 : case VAR_53 : case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : return - VAR_59 ; default : break ; } } VAR_60 = METHOD_10 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 != VAR_65 ) return VAR_66 ; switch ( VAR_67 ) { case VAR_68 : { struct STRUCT_OR_UNION_4 VAR_69 = { 0 } ; TYPE_10 VAR_70 ; TYPE_11 VAR_71 ; TYPE_12 VAR_72 ; if ( METHOD_11 ( & VAR_73 , VAR_74 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ) return - VAR_75 ; if ( VAR_76 . VAR_77 > sizeof ( VAR_78 ) ) return - VAR_79 ; if ( METHOD_12 ( & VAR_80 , VAR_81 . VAR_82 , VAR_83 . VAR_84 ) ) return - VAR_85 ; if ( VAR_86 . VAR_87 > VAR_88 || VAR_89 . VAR_90 == 0 ) { return - VAR_91 ; } VAR_92 = VAR_93 . VAR_94 ; VAR_95 = 4 - ( VAR_96 % 4 ) ; VAR_97 += VAR_98 % 4 ; VAR_99 = METHOD_13 ( VAR_100 , VAR_101 ) ; if ( ! VAR_102 ) return - VAR_103 ; VAR_104 = METHOD_14 ( VAR_105 , ( TYPE_13 ) VAR_106 . VAR_107 , ( TYPE_14 ) VAR_108 , VAR_109 ) ; if ( VAR_110 > 0 ) { VAR_111 = VAR_112 ; if ( METHOD_15 ( VAR_113 . VAR_114 , VAR_115 , VAR_116 ) ) { METHOD_16 ( VAR_117 ) ; return - VAR_118 ; } } else { VAR_119 = VAR_120 ; } METHOD_17 ( VAR_121 ) ; break ; } case VAR_122 : { struct STRUCT_OR_UNION_6 VAR_123 = { 0 } ; TYPE_15 VAR_124 = 0 ; if ( METHOD_18 ( & VAR_125 , VAR_126 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ) return - VAR_127 ; if ( VAR_128 . VAR_129 > sizeof ( VAR_130 ) ) return - VAR_131 ; if ( METHOD_19 ( & VAR_132 , VAR_133 . VAR_134 , VAR_135 . VAR_136 ) ) return - VAR_137 ; VAR_138 = VAR_139 . VAR_140 & VAR_141 ; if ( ! ( ( VAR_142 -> VAR_143 -> VAR_144 ) & VAR_145 ) && ( ( VAR_146 == VAR_147 ) || ( VAR_148 == VAR_149 ) || ( VAR_150 == VAR_151 ) || ( VAR_152 == VAR_153 ) ) ) { METHOD_20 ( VAR_154 , VAR_155 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; return - VAR_156 ; } VAR_157 = METHOD_21 ( VAR_158 , ( TYPE_16 ) VAR_159 . VAR_160 , ( TYPE_17 ) VAR_161 . VAR_162 , sizeof ( TYPE_18 ) ) ; if ( VAR_163 == VAR_164 ) { METHOD_22 ( VAR_165 , VAR_166 , VAR_167 , VAR_168 , ""WRMDone\\n"" ) ; } else { METHOD_23 ( VAR_169 , VAR_170 , VAR_171 , VAR_172 , ""WRMFailed\\n"" ) ; VAR_173 = - VAR_174 ; } break ; } case VAR_175 : case VAR_176 : { struct STRUCT_OR_UNION_8 VAR_177 = { 0 } ; TYPE_19 VAR_178 = VAR_179 ; TYPE_20 VAR_180 = 0 ; if ( ( VAR_181 -> VAR_182 == VAR_183 ) || ( VAR_184 -> VAR_185 == VAR_186 ) || ( VAR_187 -> VAR_188 == VAR_189 ) ) { METHOD_24 ( VAR_190 , VAR_191 , 0 , 0 , ""DeviceinIdleMode,BlockingRdms\\n"" ) ; return - VAR_192 ; } if ( METHOD_25 ( & VAR_193 , VAR_194 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_195 ; if ( VAR_196 . VAR_197 > sizeof ( VAR_198 ) ) return - VAR_199 ; if ( METHOD_26 ( & VAR_200 , VAR_201 . VAR_202 , VAR_203 . VAR_204 ) ) return - VAR_205 ; if ( VAR_206 . VAR_207 > VAR_208 || VAR_209 . VAR_210 == 0 ) { return - VAR_211 ; } VAR_212 = METHOD_27 ( VAR_213 . VAR_214 , VAR_215 ) ; if ( ! VAR_216 ) return VAR_217 ; if ( ( ( ( TYPE_21 ) VAR_218 . VAR_219 & 0x0F000000 ) != 0x0F000000 ) || ( ( TYPE_22 ) VAR_220 . VAR_221 & 0x3 ) ) { METHOD_28 ( VAR_222 , VAR_223 , 0 , 0 , ""RDMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_23 ) VAR_224 . VAR_225 ) ; METHOD_29 ( VAR_226 ) ; return - VAR_227 ; } VAR_228 = VAR_229 . VAR_230 & VAR_231 ; VAR_232 = METHOD_30 ( VAR_233 , ( TYPE_24 ) VAR_234 . VAR_235 , ( TYPE_25 ) VAR_236 , VAR_237 . VAR_238 ) ; if ( VAR_239 > 0 ) { VAR_240 = VAR_241 ; if ( METHOD_31 ( VAR_242 . VAR_243 , VAR_244 , VAR_245 ) ) { METHOD_32 ( VAR_246 ) ; return - VAR_247 ; } } else { VAR_248 = VAR_249 ; } METHOD_33 ( VAR_250 ) ; break ; } case VAR_251 : case VAR_252 : { struct STRUCT_OR_UNION_10 VAR_253 = { 0 } ; TYPE_26 VAR_254 = 0 ; if ( ( VAR_255 -> VAR_256 == VAR_257 ) || ( VAR_258 -> VAR_259 == VAR_260 ) || ( VAR_261 -> VAR_262 == VAR_263 ) ) { METHOD_34 ( VAR_264 , VAR_265 , 0 , 0 , ""DeviceinIdleMode,BlockingWrms\\n"" ) ; return - VAR_266 ; } if ( METHOD_35 ( & VAR_267 , VAR_268 , sizeof ( struct STRUCT_OR_UNION_11 ) ) ) return - VAR_269 ; if ( VAR_270 . VAR_271 > sizeof ( VAR_272 ) ) return - VAR_273 ; if ( METHOD_36 ( & VAR_274 , VAR_275 . VAR_276 , VAR_277 . VAR_278 ) ) return - VAR_279 ; if ( ( ( ( TYPE_27 ) VAR_280 . VAR_281 & 0x0F000000 ) != 0x0F000000 ) || ( ( TYPE_28 ) VAR_282 . VAR_283 & 0x3 ) ) { METHOD_37 ( VAR_284 , VAR_285 , 0 , 0 , ""WRMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_29 ) VAR_286 . VAR_287 ) ; return - VAR_288 ; } VAR_289 = VAR_290 . VAR_291 & VAR_292 ; if ( ! ( ( VAR_293 -> VAR_294 -> VAR_295 ) & VAR_296 ) && ( ( VAR_297 == VAR_298 ) || ( VAR_299 == VAR_300 ) || ( VAR_301 == VAR_302 ) || ( VAR_303 == VAR_304 ) ) && ( VAR_305 == VAR_306 ) ) { METHOD_38 ( VAR_307 , VAR_308 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; return - VAR_309 ; } VAR_310 = METHOD_39 ( VAR_311 , ( TYPE_30 ) VAR_312 . VAR_313 , ( TYPE_31 ) VAR_314 . VAR_315 , VAR_316 . VAR_317 ) ; if ( VAR_318 == VAR_319 ) { METHOD_40 ( VAR_320 , VAR_321 , VAR_322 , VAR_323 , ""WRMDone\\n"" ) ; } else { METHOD_41 ( VAR_324 , VAR_325 , VAR_326 , VAR_327 , ""WRMFailed\\n"" ) ; VAR_328 = - VAR_329 ; } break ; } case VAR_330 : { TYPE_32 VAR_331 [ 4 ] ; TYPE_33 VAR_332 = 0 ; TYPE_34 VAR_333 = 0 ; TYPE_35 VAR_334 = 0 ; struct STRUCT_OR_UNION_12 VAR_335 = { 0 } ; if ( ( VAR_336 -> VAR_337 == VAR_338 ) || ( VAR_339 -> VAR_340 == VAR_341 ) || ( VAR_342 -> VAR_343 == VAR_344 ) ) { METHOD_42 ( VAR_345 , VAR_346 , VAR_347 , VAR_348 , ""GPIOCan\'tbeset/clearinLowpowerMode"" ) ; return - VAR_349 ; } if ( METHOD_43 ( & VAR_350 , VAR_351 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ) return - VAR_352 ; if ( VAR_353 . VAR_354 > sizeof ( VAR_355 ) ) return - VAR_356 ; if ( METHOD_44 ( & VAR_357 , VAR_358 . VAR_359 , VAR_360 . VAR_361 ) ) return - VAR_362 ; VAR_363 = VAR_364 . VAR_365 ; VAR_366 = VAR_367 . VAR_368 ; VAR_369 = ( 1 << VAR_370 ) ; if ( METHOD_45 ( VAR_371 , VAR_372 ) == VAR_373 ) { METHOD_46 ( VAR_374 , VAR_375 , VAR_376 , VAR_377 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoLED!!!"" , VAR_378 ) ; VAR_379 = - VAR_380 ; break ; } if ( VAR_381 ) { VAR_382 = METHOD_47 ( VAR_383 , VAR_384 , ( TYPE_36 ) ( & VAR_385 ) , sizeof ( TYPE_37 ) ) ; if ( VAR_386 == VAR_387 ) { METHOD_48 ( VAR_388 , VAR_389 , VAR_390 , VAR_391 , ""SettheGPIObit\\n"" ) ; } else { METHOD_49 ( VAR_392 , VAR_393 , VAR_394 , VAR_395 , ""Failedtosetthe%dthGPIO\\n"" , VAR_396 ) ; break ; } } else { VAR_397 = METHOD_50 ( VAR_398 , VAR_399 , ( TYPE_38 ) ( & VAR_400 ) , sizeof ( TYPE_39 ) ) ; if ( VAR_401 == VAR_402 ) { METHOD_51 ( VAR_403 , VAR_404 , VAR_405 , VAR_406 , ""SettheGPIObit\\n"" ) ; } else { METHOD_52 ( VAR_407 , VAR_408 , VAR_409 , VAR_410 , ""Failedtoclearthe%dthGPIO\\n"" , VAR_411 ) ; break ; } } VAR_412 = METHOD_53 ( VAR_413 , ( TYPE_40 ) VAR_414 , ( TYPE_41 ) VAR_415 , sizeof ( TYPE_42 ) ) ; if ( VAR_416 < 0 ) { VAR_417 = VAR_418 ; METHOD_54 ( VAR_419 , VAR_420 , VAR_421 , VAR_422 , ""GPIO_MODE_REGISTERreadfailed"" ) ; break ; } else { VAR_423 = VAR_424 ; } * ( TYPE_43 * ) VAR_425 |= ( 1 << VAR_426 ) ; VAR_427 = METHOD_55 ( VAR_428 , VAR_429 , ( TYPE_44 ) VAR_430 , sizeof ( TYPE_45 ) ) ; if ( VAR_431 == VAR_432 ) { METHOD_56 ( VAR_433 , VAR_434 , VAR_435 , VAR_436 , ""SettheGPIOtooutputMode\\n"" ) ; } else { METHOD_57 ( VAR_437 , VAR_438 , VAR_439 , VAR_440 , ""FailedtoputGPIOinOutputMode\\n"" ) ; break ; } } break ; case VAR_441 : { struct STRUCT_OR_UNION_14 VAR_442 = { 0 } ; METHOD_58 ( VAR_443 , VAR_444 , VAR_445 , VAR_446 , ""UsermadeLEDthreadInActive"" ) ; if ( ( VAR_447 -> VAR_448 == VAR_449 ) || ( VAR_450 -> VAR_451 == VAR_452 ) || ( VAR_453 -> VAR_454 == VAR_455 ) ) { METHOD_59 ( VAR_456 , VAR_457 , VAR_458 , VAR_459 , ""GPIOCan\'tbeset/clearinLowpowerMode"" ) ; VAR_460 = - VAR_461 ; break ; } if ( METHOD_60 ( & VAR_462 , VAR_463 , sizeof ( struct STRUCT_OR_UNION_15 ) ) ) return - VAR_464 ; if ( VAR_465 . VAR_466 > sizeof ( VAR_467 ) ) return - VAR_468 ; if ( METHOD_61 ( & VAR_469 , VAR_470 . VAR_471 , VAR_472 . VAR_473 ) ) return - VAR_474 ; if ( VAR_475 -> VAR_476 . VAR_477 ) { if ( VAR_478 . VAR_479 == VAR_480 ) { METHOD_62 ( VAR_481 , VAR_482 , VAR_483 , VAR_484 , ""Activatingthreadreq"" ) ; VAR_485 -> VAR_486 = VAR_487 ; } else { METHOD_63 ( VAR_488 , VAR_489 , VAR_490 , VAR_491 , ""DeActivatingThreadreq....."" ) ; VAR_492 -> VAR_493 = VAR_494 ; } METHOD_64 ( & VAR_495 -> VAR_496 . VAR_497 ) ; } } break ; case VAR_498 : { TYPE_46 VAR_499 = 0 ; TYPE_47 VAR_500 [ 4 ] ; struct STRUCT_OR_UNION_16 VAR_501 = { 0 } ; if ( ( VAR_502 -> VAR_503 == VAR_504 ) || ( VAR_505 -> VAR_506 == VAR_507 ) || ( VAR_508 -> VAR_509 == VAR_510 ) ) return - VAR_511 ; if ( METHOD_65 ( & VAR_512 , VAR_513 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ) return - VAR_514 ; if ( VAR_515 . VAR_516 > sizeof ( VAR_517 ) ) return - VAR_518 ; if ( METHOD_66 ( & VAR_519 , VAR_520 . VAR_521 , VAR_522 . VAR_523 ) ) return - VAR_524 ; VAR_525 = VAR_526 . VAR_527 ; VAR_528 = METHOD_67 ( VAR_529 , ( TYPE_48 ) VAR_530 , ( TYPE_49 ) VAR_531 , sizeof ( TYPE_50 ) ) ; if ( VAR_532 < 0 ) { VAR_533 = VAR_534 ; METHOD_68 ( VAR_535 , VAR_536 , 0 , 0 , ""RDMFailed\\n"" ) ; return VAR_537 ; } else { VAR_538 = VAR_539 ; } } break ; case VAR_540 : { TYPE_51 VAR_541 [ 4 ] ; struct STRUCT_OR_UNION_18 VAR_542 [ VAR_543 ] ; struct STRUCT_OR_UNION_19 * VAR_544 = ( struct STRUCT_OR_UNION_20 * ) VAR_545 ; METHOD_69 ( VAR_546 , 0 , VAR_547 * sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( ( VAR_548 -> VAR_549 == VAR_550 ) || ( VAR_551 -> VAR_552 == VAR_553 ) || ( VAR_554 -> VAR_555 == VAR_556 ) ) return - VAR_557 ; if ( METHOD_70 ( & VAR_558 , VAR_559 , sizeof ( struct STRUCT_OR_UNION_22 ) ) ) return - VAR_560 ; if ( VAR_561 . VAR_562 > sizeof ( VAR_563 ) ) return - VAR_564 ; if ( METHOD_71 ( & VAR_565 , VAR_566 . VAR_567 , VAR_568 . VAR_569 ) ) return - VAR_570 ; if ( METHOD_72 ( VAR_571 , VAR_572 [ VAR_573 ] . VAR_574 ) == VAR_575 ) { METHOD_73 ( VAR_576 , VAR_577 , VAR_578 , VAR_579 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoNVMLEDbitmap<0x%X>!!!"" , VAR_580 [ VAR_581 ] . VAR_582 , VAR_583 -> VAR_584 ) ; VAR_585 = - VAR_586 ; break ; } if ( ( VAR_587 [ VAR_588 ] . VAR_589 ) & ( VAR_590 [ VAR_591 ] . VAR_592 ) ) { * ( TYPE_52 * ) VAR_593 = VAR_594 [ VAR_595 ] . VAR_596 & VAR_597 [ VAR_598 ] . VAR_599 & VAR_600 [ VAR_601 ] . VAR_602 ; if ( * ( TYPE_53 * ) VAR_603 ) VAR_604 = METHOD_74 ( VAR_605 , VAR_606 , ( TYPE_54 ) VAR_607 , sizeof ( TYPE_55 ) ) ; if ( VAR_608 != VAR_609 ) { METHOD_75 ( VAR_610 , VAR_611 , 0 , 0 , ""WRMtoBCM_GPIO_OUTPUT_SET_REGFailed."" ) ; return VAR_612 ; } * ( TYPE_56 * ) VAR_613 = ( VAR_614 [ VAR_615 ] . VAR_616 & VAR_617 [ VAR_618 ] . VAR_619 & ( ~ ( VAR_620 [ VAR_621 ] . VAR_622 ) ) ) ; if ( * ( TYPE_57 * ) VAR_623 ) VAR_624 = METHOD_76 ( VAR_625 , VAR_626 , ( TYPE_58 ) VAR_627 , sizeof ( TYPE_59 ) ) ; if ( VAR_628 != VAR_629 ) { METHOD_77 ( VAR_630 , VAR_631 , 0 , 0 , ""WRMtoBCM_GPIO_OUTPUT_CLR_REGFailed."" ) ; return VAR_632 ; } } if ( VAR_633 [ VAR_634 ] . VAR_635 ) { VAR_636 = METHOD_78 ( VAR_637 , ( TYPE_60 ) VAR_638 , ( TYPE_61 ) VAR_639 , sizeof ( TYPE_62 ) ) ; if ( VAR_640 < 0 ) { VAR_641 = VAR_642 ; METHOD_79 ( VAR_643 , VAR_644 , 0 , 0 , ""RDMtoGPIO_PIN_STATE_REGISTERFailed."" ) ; return VAR_645 ; } else { VAR_646 = VAR_647 ; } VAR_648 [ VAR_649 ] . VAR_650 = ( * ( TYPE_63 * ) VAR_651 & VAR_652 [ VAR_653 ] . VAR_654 ) ; } VAR_655 = METHOD_80 ( VAR_656 . VAR_657 , & VAR_658 , VAR_659 . VAR_660 ) ; if ( VAR_661 ) { METHOD_81 ( VAR_662 , VAR_663 , 0 , 0 , ""FailedwhilecopyingContenttoIOBuferforuserspaceerr:%d"" , VAR_664 ) ; return - VAR_665 ; } } break ; case VAR_666 : { TYPE_64 VAR_667 [ 4 ] ; struct STRUCT_OR_UNION_23 VAR_668 [ VAR_669 ] ; struct STRUCT_OR_UNION_24 * VAR_670 = ( struct STRUCT_OR_UNION_25 * ) VAR_671 ; if ( ( VAR_672 -> VAR_673 == VAR_674 ) || ( VAR_675 -> VAR_676 == VAR_677 ) || ( VAR_678 -> VAR_679 == VAR_680 ) ) return - VAR_681 ; if ( METHOD_82 ( & VAR_682 , VAR_683 , sizeof ( struct STRUCT_OR_UNION_26 ) ) ) return - VAR_684 ; if ( VAR_685 . VAR_686 > sizeof ( VAR_687 ) ) return - VAR_688 ; if ( METHOD_83 ( & VAR_689 , VAR_690 . VAR_691 , VAR_692 . VAR_693 ) ) return - VAR_694 ; VAR_695 = METHOD_84 ( VAR_696 , ( TYPE_65 ) VAR_697 , ( TYPE_66 ) VAR_698 , sizeof ( TYPE_67 ) ) ; if ( VAR_699 < 0 ) { VAR_700 = VAR_701 ; METHOD_85 ( VAR_702 , VAR_703 , 0 , 0 , ""ReadofGPIO_MODE_REGISTERfailed"" ) ; return VAR_704 ; } else { VAR_705 = VAR_706 ; } if ( METHOD_86 ( VAR_707 , VAR_708 [ VAR_709 ] . VAR_710 ) == VAR_711 ) { METHOD_87 ( VAR_712 , VAR_713 , VAR_714 , VAR_715 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoNVMLEDbitmap<0x%X>!!!"" , VAR_716 [ VAR_717 ] . VAR_718 , VAR_719 -> VAR_720 ) ; VAR_721 = - VAR_722 ; break ; } if ( VAR_723 [ VAR_724 ] . VAR_725 ) { * ( TYPE_68 * ) VAR_726 |= ( VAR_727 [ VAR_728 ] . VAR_729 & VAR_730 [ VAR_731 ] . VAR_732 ) ; * ( TYPE_69 * ) VAR_733 &= ~ ( ( ~ VAR_734 [ VAR_735 ] . VAR_736 ) & VAR_737 [ VAR_738 ] . VAR_739 ) ; VAR_740 [ VAR_741 ] . VAR_742 = * ( TYPE_70 * ) VAR_743 ; VAR_744 = METHOD_88 ( VAR_745 , VAR_746 , ( TYPE_71 ) VAR_747 , sizeof ( TYPE_72 ) ) ; if ( VAR_748 == VAR_749 ) { METHOD_89 ( VAR_750 , VAR_751 , VAR_752 , VAR_753 , ""WRMtoGPIO_MODE_REGISTERDone"" ) ; } else { METHOD_90 ( VAR_754 , VAR_755 , 0 , 0 , ""WRMtoGPIO_MODE_REGISTERFailed"" ) ; VAR_756 = - VAR_757 ; break ; } } else { VAR_758 [ VAR_759 ] . VAR_760 = * ( TYPE_73 * ) VAR_761 ; } VAR_762 = METHOD_91 ( VAR_763 . VAR_764 , & VAR_765 , VAR_766 . VAR_767 ) ; if ( VAR_768 ) { METHOD_92 ( VAR_769 , VAR_770 , 0 , 0 , ""FailedwhilecopyingContenttoIOBuferforuserspaceerr:%d"" , VAR_771 ) ; return - VAR_772 ; } } break ; case VAR_773 : case VAR_774 : case VAR_775 : case VAR_776 : case VAR_777 : case VAR_778 : { TYPE_74 VAR_779 = VAR_780 ; if ( METHOD_93 ( & VAR_781 , VAR_782 , sizeof ( struct STRUCT_OR_UNION_27 ) ) ) return - VAR_783 ; if ( VAR_784 . VAR_785 < sizeof ( struct STRUCT_OR_UNION_28 ) ) return - VAR_786 ; if ( VAR_787 . VAR_788 > VAR_789 ) return - VAR_790 ; VAR_791 = METHOD_94 ( VAR_792 . VAR_793 , VAR_794 . VAR_795 ) ; if ( METHOD_95 ( VAR_796 ) ) return METHOD_96 ( VAR_797 ) ; METHOD_97 ( & VAR_798 -> VAR_799 ) ; VAR_800 = METHOD_98 ( VAR_801 -> VAR_802 , ! VAR_803 -> VAR_804 , ( 1 * VAR_805 ) ) ; if ( VAR_806 == - VAR_807 ) goto VAR_808 ; if ( VAR_809 -> VAR_810 ) { METHOD_99 ( VAR_811 , VAR_812 , VAR_813 , VAR_814 , ""PreparingIdleModeisstillTrue-HenceRejectingcontrolmessage\\n"" ) ; VAR_815 = VAR_816 ; goto VAR_817 ; } VAR_818 = METHOD_100 ( VAR_819 , ( TYPE_75 ) VAR_820 ) ; VAR_821 : METHOD_101 ( & VAR_822 -> VAR_823 ) ; METHOD_102 ( VAR_824 ) ; break ; } case VAR_825 : { if ( METHOD_103 ( & VAR_826 -> VAR_827 ) ) { METHOD_104 ( VAR_828 , VAR_829 , VAR_830 , VAR_831 , ""IOCTL_BCM_CHIP_RESETnotallowedasEEPROMRead/Writeisinprogress\\n"" ) ; return - VAR_832 ; } METHOD_105 ( VAR_833 , VAR_834 , 0 , 0 , ""StartingthefirmwaredownloadPID=0x%x!!!!\\n"" , VAR_835 -> VAR_836 ) ; if ( METHOD_106 ( & VAR_837 -> VAR_838 ) ) return - VAR_839 ; VAR_840 -> VAR_841 = VAR_842 ; VAR_843 -> VAR_844 = VAR_845 -> VAR_846 ; VAR_847 -> VAR_848 = VAR_849 ; VAR_850 -> VAR_851 = VAR_852 ; METHOD_107 ( VAR_853 -> VAR_854 ) ; METHOD_108 ( VAR_855 -> VAR_856 ) ; VAR_857 = METHOD_109 ( VAR_858 ) ; if ( VAR_859 ) { pr_err ( PFX ""%s:reset_card_procFailed!\\n"" , VAR_860 -> VAR_861 -> VAR_862 ) ; METHOD_110 ( & VAR_863 -> VAR_864 ) ; METHOD_111 ( & VAR_865 -> VAR_866 ) ; return VAR_867 ; } METHOD_112 ( 10 ) ; METHOD_113 ( & VAR_868 -> VAR_869 ) ; return VAR_870 ; } case VAR_871 : { struct STRUCT_OR_UNION_29 * VAR_872 = VAR_873 ; METHOD_114 ( VAR_874 , VAR_875 , 0 , 0 , ""StartingthefirmwaredownloadPID=0x%x!!!!\\n"" , VAR_876 -> VAR_877 ) ; if ( ! METHOD_115 ( & VAR_878 -> VAR_879 ) ) { METHOD_116 ( VAR_880 , VAR_881 , 0 , 0 , ""Invalidwaytodownloadbuffer.UseStartandthencallthis!!!\\n"" ) ; METHOD_117 ( & VAR_882 -> VAR_883 ) ; VAR_884 = - VAR_885 ; return VAR_886 ; } if ( METHOD_118 ( & VAR_887 , VAR_888 , sizeof ( struct STRUCT_OR_UNION_30 ) ) ) { METHOD_119 ( & VAR_889 -> VAR_890 ) ; return - VAR_891 ; } METHOD_120 ( VAR_892 , VAR_893 , 0 , 0 , ""LengthforFWDLDis:%lx\\n"" , VAR_894 . VAR_895 ) ; if ( VAR_896 . VAR_897 > sizeof ( struct STRUCT_OR_UNION_31 ) ) { METHOD_121 ( & VAR_898 -> VAR_899 ) ; return - VAR_900 ; } VAR_901 = METHOD_122 ( sizeof ( * VAR_902 ) , VAR_903 ) ; if ( ! VAR_904 ) { METHOD_123 ( & VAR_905 -> VAR_906 ) ; return - VAR_907 ; } if ( METHOD_124 ( VAR_908 , VAR_909 . VAR_910 , VAR_911 . VAR_912 ) ) { METHOD_125 ( & VAR_913 -> VAR_914 ) ; METHOD_126 ( VAR_915 ) ; return - VAR_916 ; } if ( ! VAR_917 -> VAR_918 || ( VAR_919 -> VAR_920 == 0 ) ) { METHOD_127 ( VAR_921 , VAR_922 , 0 , 0 , ""Somethingelseiswrong%lu\\n"" , VAR_923 -> VAR_924 ) ; METHOD_128 ( & VAR_925 -> VAR_926 ) ; METHOD_129 ( VAR_927 ) ; VAR_928 = - VAR_929 ; return VAR_930 ; } VAR_931 = METHOD_130 ( VAR_932 , VAR_933 ) ; if ( VAR_934 != VAR_935 ) { if ( VAR_936 -> VAR_937 == VAR_938 ) METHOD_131 ( VAR_939 , VAR_940 , 0 , 0 , ""IOCTL:ConfigurationFileUploadFailed\\n"" ) ; else METHOD_132 ( VAR_941 , VAR_942 , 0 , 0 , ""IOCTL:FirmwareFileUploadFailed\\n"" ) ; if ( VAR_943 -> VAR_944 . VAR_945 & VAR_946 ) { VAR_947 -> VAR_948 = VAR_949 ; VAR_950 -> VAR_951 . VAR_952 = VAR_953 ; METHOD_133 ( & VAR_954 -> VAR_955 . VAR_956 ) ; } } if ( VAR_957 != VAR_958 ) METHOD_134 ( & VAR_959 -> VAR_960 ) ; METHOD_135 ( VAR_961 , VAR_962 , VAR_963 , VAR_964 , ""IOCTL:FirmwareFileUploaded\\n"" ) ; METHOD_136 ( VAR_965 ) ; return VAR_966 ; } case VAR_967 : { if ( ! METHOD_137 ( & VAR_968 -> VAR_969 ) ) { METHOD_138 ( & VAR_970 -> VAR_971 ) ; return - VAR_972 ; } if ( METHOD_139 ( & VAR_973 -> VAR_974 ) ) { METHOD_140 ( VAR_975 , VAR_976 , 0 , 0 , ""FWdownloadblockedasEEPROMRead/Writeisinprogress\\n"" ) ; METHOD_141 ( & VAR_977 -> VAR_978 ) ; return - VAR_979 ; } VAR_980 -> VAR_981 = VAR_982 ; VAR_983 -> VAR_984 = VAR_985 ; METHOD_142 ( & VAR_986 -> VAR_987 , 0 ) ; VAR_988 -> VAR_989 = 0 ; VAR_990 -> VAR_991 = 0 ; VAR_992 = METHOD_143 ( VAR_993 ) ; if ( VAR_994 ) { METHOD_144 ( VAR_995 , VAR_996 , 0 , 0 , ""FirmDownloadFailed\\n"" ) ; METHOD_145 ( & VAR_997 -> VAR_998 ) ; METHOD_146 ( & VAR_999 -> VAR_1000 ) ; return VAR_1001 ; } else { METHOD_147 ( VAR_1002 , VAR_1003 , VAR_1004 , VAR_1005 , ""FirmDownloadOver...\\n"" ) ; } METHOD_148 ( 10 ) ; if ( METHOD_149 ( ( struct STRUCT_OR_UNION_32 * ) VAR_1006 -> VAR_1007 ) ) METHOD_150 ( VAR_1008 , VAR_1009 , 0 , 0 , ""Unabletosendinterrupt...\\n"" ) ; VAR_1010 = 5 * VAR_1011 ; VAR_1012 -> VAR_1013 = VAR_1014 ; METHOD_151 ( VAR_1015 -> VAR_1016 , VAR_1017 -> VAR_1018 , VAR_1019 ) ; VAR_1020 -> VAR_1021 = VAR_1022 ; VAR_1023 -> VAR_1024 = VAR_1025 ; METHOD_152 ( & VAR_1026 -> VAR_1027 , 0 ) ; VAR_1028 -> VAR_1029 = 0 ; VAR_1030 -> VAR_1031 = 0 ; METHOD_153 ( & VAR_1032 -> VAR_1033 , 0 ) ; VAR_1034 -> VAR_1035 = 0 ; VAR_1036 -> VAR_1037 = 0 ; if ( VAR_1038 -> VAR_1039 . VAR_1040 & VAR_1041 ) { VAR_1042 -> VAR_1043 = VAR_1044 ; METHOD_154 ( & VAR_1045 -> VAR_1046 . VAR_1047 ) ; } if ( ! VAR_1048 ) VAR_1049 = - VAR_1050 ; METHOD_155 ( & VAR_1051 -> VAR_1052 ) ; METHOD_156 ( & VAR_1053 -> VAR_1054 ) ; return VAR_1055 ; } case VAR_1056 : VAR_1057 = 0 ; if ( METHOD_157 ( VAR_1058 -> VAR_1059 , ( unsigned TYPE_76 TYPE_77 * ) VAR_1060 ) ) VAR_1061 = - VAR_1062 ; break ; case VAR_1063 : VAR_1064 = 0 ; if ( METHOD_158 ( VAR_1065 -> VAR_1066 , ( unsigned TYPE_78 TYPE_79 * ) VAR_1067 ) ) VAR_1068 = - VAR_1069 ; break ; case VAR_1070 : { TYPE_80 VAR_1071 = METHOD_159 ( & VAR_1072 -> VAR_1073 ) ; if ( VAR_1074 ) { METHOD_160 ( VAR_1075 , VAR_1076 , 0 , 0 , ""IOCTL_BCM_CHIP_RESETnotallowedasEEPROMRead/Writeisinprogress\\n"" ) ; return - VAR_1077 ; } METHOD_161 ( & VAR_1078 -> VAR_1079 ) ; VAR_1080 = METHOD_162 ( VAR_1081 ) ; METHOD_163 ( ) ; METHOD_164 ( & VAR_1082 -> VAR_1083 ) ; METHOD_165 ( & VAR_1084 -> VAR_1085 ) ; METHOD_166 ( VAR_1086 ) ; break ; } case VAR_1087 : { TYPE_81 VAR_1088 ; VAR_1089 = 0 ; for ( VAR_1090 = 0 ; VAR_1091 < VAR_1092 ; VAR_1093 ++ ) { if ( METHOD_167 ( VAR_1094 -> VAR_1095 [ VAR_1096 ] . VAR_1097 , ( unsigned TYPE_82 TYPE_83 * ) VAR_1098 ) ) { VAR_1099 = - VAR_1100 ; break ; } } break ; } case VAR_1101 : METHOD_168 ( VAR_1102 ) ; METHOD_169 ( & VAR_1103 -> VAR_1104 ) ; VAR_1105 = VAR_1106 ; break ; case VAR_1107 : if ( METHOD_170 ( VAR_1108 , & VAR_1109 -> VAR_1110 , sizeof ( struct STRUCT_OR_UNION_33 ) * VAR_1111 ) ) return - VAR_1112 ; VAR_1113 = VAR_1114 ; break ; case VAR_1115 : { TYPE_84 VAR_1116 = 0 ; if ( METHOD_171 ( & VAR_1117 , VAR_1118 , sizeof ( TYPE_85 ) ) ) return - VAR_1119 ; if ( VAR_1120 ) { METHOD_172 ( VAR_1121 , VAR_1122 , VAR_1123 , VAR_1124 , ""IOCTL_BCM_SWITCH_TRANSFER_MODE:ETH_PACKET_TUNNELING_MODE\\n"" ) ; VAR_1125 -> VAR_1126 = VAR_1127 ; } else { METHOD_173 ( VAR_1128 , VAR_1129 , VAR_1130 , VAR_1131 , ""IOCTL_BCM_SWITCH_TRANSFER_MODE:IP_PACKET_ONLY_MODE\\n"" ) ; VAR_1132 -> VAR_1133 = VAR_1134 ; } VAR_1135 = VAR_1136 ; break ; } case VAR_1137 : { TYPE_86 VAR_1138 ; if ( METHOD_174 ( & VAR_1139 , VAR_1140 , sizeof ( struct STRUCT_OR_UNION_34 ) ) ) return - VAR_1141 ; VAR_1142 = METHOD_175 ( TYPE_87 , VAR_1143 . VAR_1144 , METHOD_176 ( VAR_1145 ) + 1 ) ; if ( METHOD_177 ( VAR_1146 . VAR_1147 , VAR_1148 , VAR_1149 ) ) return - VAR_1150 ; VAR_1151 = VAR_1152 ; break ; } case VAR_1153 : { struct STRUCT_OR_UNION_35 VAR_1154 ; if ( METHOD_178 ( & VAR_1155 , VAR_1156 , sizeof ( struct STRUCT_OR_UNION_36 ) ) ) { METHOD_179 ( VAR_1157 , VAR_1158 , 0 , 0 , ""copy_from_userfailed..\\n"" ) ; return - VAR_1159 ; } if ( VAR_1160 . VAR_1161 != sizeof ( VAR_1162 ) ) { VAR_1163 = - VAR_1164 ; break ; } METHOD_180 ( & VAR_1165 , 0 , sizeof ( VAR_1166 ) ) ; VAR_1167 . VAR_1168 = VAR_1169 -> VAR_1170 ; VAR_1171 . VAR_1172 = VAR_1173 -> VAR_1174 ; VAR_1175 . VAR_1176 = VAR_1177 -> VAR_1178 ; if ( METHOD_181 ( VAR_1179 . VAR_1180 , & VAR_1181 , METHOD_182 ( VAR_1182 , sizeof ( VAR_1183 ) , VAR_1184 . VAR_1185 ) ) ) { METHOD_183 ( VAR_1186 , VAR_1187 , 0 , 0 , ""Copy_to_userFailed..\\n"" ) ; return - VAR_1188 ; } VAR_1189 = VAR_1190 ; break ; } case VAR_1191 : { TYPE_88 VAR_1192 ; if ( METHOD_184 ( & VAR_1193 , VAR_1194 , sizeof ( struct STRUCT_OR_UNION_37 ) ) ) return - VAR_1195 ; if ( METHOD_185 ( & VAR_1196 , VAR_1197 . VAR_1198 , sizeof ( TYPE_89 ) ) ) return - VAR_1199 ; if ( VAR_1200 ) VAR_1201 -> VAR_1202 -> VAR_1203 = VAR_1204 ; else VAR_1205 -> VAR_1206 -> VAR_1207 = VAR_1208 ; break ; } case VAR_1209 : { TYPE_90 VAR_1210 = 0 ; if ( METHOD_186 ( & VAR_1211 , VAR_1212 , sizeof ( struct STRUCT_OR_UNION_38 ) ) ) return - VAR_1213 ; if ( VAR_1214 . VAR_1215 < sizeof ( struct STRUCT_OR_UNION_39 ) ) { METHOD_187 ( VAR_1216 , VAR_1217 , 0 , 0 , ""Mismatchreq:%lxneededis=0x%zx!!!"" , VAR_1218 . VAR_1219 , sizeof ( struct STRUCT_OR_UNION_40 ) ) ; return - VAR_1220 ; } if ( METHOD_188 ( & VAR_1221 , VAR_1222 . VAR_1223 , sizeof ( VAR_1224 ) ) ) return - VAR_1225 ; METHOD_189 ( VAR_1226 , VAR_1227 , VAR_1228 , VAR_1229 , ""GetDSXDataSFIDis=%lx\\n"" , VAR_1230 ) ; METHOD_190 ( VAR_1231 , VAR_1232 , VAR_1233 . VAR_1234 ) ; VAR_1235 = VAR_1236 ; } break ; case VAR_1237 : { TYPE_91 VAR_1238 ; if ( METHOD_191 ( & VAR_1239 , VAR_1240 , sizeof ( struct STRUCT_OR_UNION_41 ) ) ) return - VAR_1241 ; if ( VAR_1242 . VAR_1243 != sizeof ( struct STRUCT_OR_UNION_42 ) ) { METHOD_192 ( VAR_1244 , VAR_1245 , 0 , 0 , ""LengthCheckfailed%lu%zd\\n"" , VAR_1246 . VAR_1247 , sizeof ( struct STRUCT_OR_UNION_43 ) ) ; return - VAR_1248 ; } VAR_1249 = METHOD_193 ( sizeof ( struct STRUCT_OR_UNION_44 ) , VAR_1250 ) ; if ( ! VAR_1251 ) return VAR_1252 ; VAR_1253 = METHOD_194 ( VAR_1254 , VAR_1255 ) ; METHOD_195 ( VAR_1256 , VAR_1257 ) ; if ( VAR_1258 != VAR_1259 ) if ( METHOD_196 ( VAR_1260 . VAR_1261 , VAR_1262 , sizeof ( struct STRUCT_OR_UNION_45 ) ) ) { METHOD_197 ( VAR_1263 ) ; return - VAR_1264 ; } METHOD_198 ( VAR_1265 ) ; break ; } case VAR_1266 : if ( ( VAR_1267 == VAR_1268 -> VAR_1269 ) && ( VAR_1270 == VAR_1271 -> VAR_1272 ) ) { VAR_1273 -> VAR_1274 = VAR_1275 ; VAR_1276 -> VAR_1277 = VAR_1278 ; METHOD_199 ( & VAR_1279 -> VAR_1280 ) ; } VAR_1281 = VAR_1282 ; break ; case VAR_1283 : { struct STRUCT_OR_UNION_46 * VAR_1284 ; TYPE_92 VAR_1285 = 0 ; TYPE_93 VAR_1286 = VAR_1287 ; if ( ( VAR_1288 -> VAR_1289 == VAR_1290 ) || ( VAR_1291 -> VAR_1292 == VAR_1293 ) || ( VAR_1294 -> VAR_1295 == VAR_1296 ) ) { METHOD_200 ( VAR_1297 , VAR_1298 , 0 , 0 , ""DeviceinIdle/ShutdownMode,BlockingWrms\\n"" ) ; VAR_1299 = - VAR_1300 ; break ; } if ( METHOD_201 ( & VAR_1301 , VAR_1302 , sizeof ( struct STRUCT_OR_UNION_47 ) ) ) return - VAR_1303 ; if ( VAR_1304 . VAR_1305 < sizeof ( TYPE_94 ) * 2 ) return - VAR_1306 ; VAR_1307 = METHOD_202 ( VAR_1308 . VAR_1309 , VAR_1310 . VAR_1311 ) ; if ( METHOD_203 ( VAR_1312 ) ) return METHOD_204 ( VAR_1313 ) ; VAR_1314 = ( struct STRUCT_OR_UNION_48 * ) VAR_1315 ; if ( ( ( TYPE_95 ) VAR_1316 -> VAR_1317 & 0x0F000000 ) != 0x0F000000 || ( ( TYPE_96 ) VAR_1318 -> VAR_1319 & 0x3 ) ) { METHOD_205 ( VAR_1320 , VAR_1321 , 0 , 0 , ""WRMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_97 ) VAR_1322 -> VAR_1323 ) ; METHOD_206 ( VAR_1324 ) ; VAR_1325 = - VAR_1326 ; break ; } VAR_1327 = VAR_1328 -> VAR_1329 & VAR_1330 ; if ( ! ( ( VAR_1331 -> VAR_1332 -> VAR_1333 ) & VAR_1334 ) && ( ( VAR_1335 == VAR_1336 ) || ( VAR_1337 == VAR_1338 ) || ( VAR_1339 == VAR_1340 ) || ( VAR_1341 == VAR_1342 ) ) && ( VAR_1343 == VAR_1344 ) ) { METHOD_207 ( VAR_1345 ) ; METHOD_208 ( VAR_1346 , VAR_1347 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; VAR_1348 = - VAR_1349 ; break ; } if ( VAR_1350 -> VAR_1351 == VAR_1352 ) VAR_1353 = METHOD_209 ( VAR_1354 , ( TYPE_98 ) VAR_1355 -> VAR_1356 , ( TYPE_99 ) VAR_1357 -> VAR_1358 , VAR_1359 . VAR_1360 - 2 * sizeof ( TYPE_100 ) ) ; else VAR_1361 = METHOD_210 ( VAR_1362 , ( TYPE_101 ) VAR_1363 -> VAR_1364 , ( TYPE_102 ) VAR_1365 -> VAR_1366 , VAR_1367 . VAR_1368 - 2 * sizeof ( TYPE_103 ) ) ; if ( VAR_1369 != VAR_1370 ) METHOD_211 ( VAR_1371 , VAR_1372 , 0 , 0 , ""WRMFailed\\n"" ) ; METHOD_212 ( VAR_1373 ) ; break ; } case VAR_1374 : if ( METHOD_213 ( & VAR_1375 , VAR_1376 , sizeof ( struct STRUCT_OR_UNION_49 ) ) ) return - VAR_1377 ; if ( VAR_1378 -> VAR_1379 == VAR_1380 || VAR_1381 -> VAR_1382 == VAR_1383 ) { if ( METHOD_214 ( VAR_1384 . VAR_1385 , & VAR_1386 -> VAR_1387 , sizeof ( TYPE_104 ) ) ) return - VAR_1388 ; } VAR_1389 = VAR_1390 ; break ; case VAR_1391 : { TYPE_105 VAR_1392 = 0 ; if ( VAR_1393 -> VAR_1394 == VAR_1395 ) { if ( METHOD_215 ( & VAR_1396 , VAR_1397 , sizeof ( struct STRUCT_OR_UNION_50 ) ) ) return - VAR_1398 ; if ( METHOD_216 ( & VAR_1399 , VAR_1400 . VAR_1401 , sizeof ( TYPE_106 ) ) ) return - VAR_1402 ; if ( ( VAR_1403 < VAR_1404 ) || ( VAR_1405 > VAR_1406 ) ) { if ( METHOD_217 ( VAR_1407 . VAR_1408 , & VAR_1409 -> VAR_1410 , sizeof ( TYPE_107 ) ) ) return - VAR_1411 ; } else { if ( METHOD_218 ( VAR_1412 ) ) { if ( METHOD_219 ( VAR_1413 . VAR_1414 , & VAR_1415 -> VAR_1416 , sizeof ( TYPE_108 ) ) ) return - VAR_1417 ; } else { if ( ( VAR_1418 == VAR_1419 -> VAR_1420 ) || ( VAR_1421 == VAR_1422 -> VAR_1423 ) ) { METHOD_220 ( VAR_1424 , VAR_1425 , 0 , 0 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; return - VAR_1426 ; } VAR_1427 -> VAR_1428 = VAR_1429 ; METHOD_221 ( VAR_1430 , VAR_1431 -> VAR_1432 ) ; } } VAR_1433 = VAR_1434 ; } else { VAR_1435 = VAR_1436 ; } } break ; case VAR_1437 : TYPE_109 VAR_1438 { struct STRUCT_OR_UNION_51 VAR_1439 ; METHOD_222 ( VAR_1440 , VAR_1441 , VAR_1442 , VAR_1443 , ""InSET_DEBUGioctl\\n"" ) ; if ( METHOD_223 ( & VAR_1444 , VAR_1445 , sizeof ( struct STRUCT_OR_UNION_52 ) ) ) return - VAR_1446 ; if ( METHOD_224 ( & VAR_1447 , VAR_1448 . VAR_1449 , sizeof ( struct STRUCT_OR_UNION_53 ) ) ) return - VAR_1450 ; METHOD_225 ( VAR_1451 , VAR_1452 , 0 , 0 , ""IOCTL_BCM_SET_DEBUG:OnOff=%dType=0x%x"" , VAR_1453 . VAR_1454 , VAR_1455 . VAR_1456 ) ; VAR_1457 . VAR_1458 = 1 << VAR_1459 . VAR_1460 ; METHOD_226 ( VAR_1461 , VAR_1462 , 0 , 0 , ""actualSubtype=0x%x\\n"" , VAR_1463 . VAR_1464 ) ; VAR_1465 -> VAR_1466 . VAR_1467 |= VAR_1468 . VAR_1469 ; if ( VAR_1470 . VAR_1471 ) VAR_1472 -> VAR_1473 . VAR_1474 [ VAR_1475 . VAR_1476 ] |= VAR_1477 . VAR_1478 ; else VAR_1479 -> VAR_1480 . VAR_1481 [ VAR_1482 . VAR_1483 ] &= ~ VAR_1484 . VAR_1485 ; METHOD_227 ( VAR_1486 ) ; } break ; case VAR_1487 : case VAR_1488 : { struct STRUCT_OR_UNION_54 VAR_1489 ; TYPE_110 VAR_1490 = VAR_1491 ; TYPE_111 VAR_1492 = 0 ; struct STRUCT_OR_UNION_55 VAR_1493 , VAR_1494 ; METHOD_228 ( & VAR_1495 , 0 , sizeof ( struct STRUCT_OR_UNION_56 ) ) ; METHOD_229 ( & VAR_1496 , 0 , sizeof ( struct STRUCT_OR_UNION_57 ) ) ; if ( ( VAR_1497 -> VAR_1498 == VAR_1499 ) && ( VAR_1500 -> VAR_1501 == 0 ) ) { METHOD_230 ( VAR_1502 , VAR_1503 , 0 , 0 , ""TheFlashControlSectionisCorrupted.HenceRejectiononNVMRead/Write\\n"" ) ; return - VAR_1504 ; } if ( METHOD_231 ( VAR_1505 ) ) { if ( ( VAR_1506 -> VAR_1507 != VAR_1508 ) && ( VAR_1509 -> VAR_1510 != VAR_1511 ) && ( VAR_1512 -> VAR_1513 != VAR_1514 ) ) { METHOD_232 ( VAR_1515 , VAR_1516 , 0 , 0 , ""NoDSDisactive..henceNVMCommandisblocked"" ) ; return VAR_1517 ; } } if ( METHOD_233 ( & VAR_1518 , VAR_1519 , sizeof ( struct STRUCT_OR_UNION_58 ) ) ) return - VAR_1520 ; if ( METHOD_234 ( & VAR_1521 , ( VAR_1522 == VAR_1523 ) ? VAR_1524 . VAR_1525 : VAR_1526 . VAR_1527 , sizeof ( struct STRUCT_OR_UNION_59 ) ) ) return - VAR_1528 ; if ( VAR_1529 . VAR_1530 > VAR_1531 -> VAR_1532 ) return VAR_1533 ; if ( VAR_1534 . VAR_1535 > VAR_1536 -> VAR_1537 - VAR_1538 . VAR_1539 ) { return VAR_1540 ; } VAR_1541 = METHOD_235 ( VAR_1542 . VAR_1543 , VAR_1544 . VAR_1545 ) ; if ( METHOD_236 ( VAR_1546 ) ) return METHOD_237 ( VAR_1547 ) ; METHOD_238 ( & VAR_1548 ) ; if ( VAR_1549 == VAR_1550 ) { METHOD_239 ( & VAR_1551 -> VAR_1552 ) ; if ( ( VAR_1553 -> VAR_1554 == VAR_1555 ) || ( VAR_1556 -> VAR_1557 == VAR_1558 ) || ( VAR_1559 -> VAR_1560 == VAR_1561 ) ) { METHOD_240 ( VAR_1562 , VAR_1563 , VAR_1564 , VAR_1565 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_241 ( & VAR_1566 -> VAR_1567 ) ; METHOD_242 ( VAR_1568 ) ; return - VAR_1569 ; } VAR_1570 = METHOD_243 ( VAR_1571 , ( TYPE_112 ) VAR_1572 , VAR_1573 . VAR_1574 , VAR_1575 . VAR_1576 ) ; METHOD_244 ( & VAR_1577 -> VAR_1578 ) ; if ( VAR_1579 != VAR_1580 ) { METHOD_245 ( VAR_1581 ) ; return VAR_1582 ; } if ( METHOD_246 ( VAR_1583 . VAR_1584 , VAR_1585 , VAR_1586 . VAR_1587 ) ) { METHOD_247 ( VAR_1588 ) ; return - VAR_1589 ; } } else { METHOD_248 ( & VAR_1590 -> VAR_1591 ) ; if ( ( VAR_1592 -> VAR_1593 == VAR_1594 ) || ( VAR_1595 -> VAR_1596 == VAR_1597 ) || ( VAR_1598 -> VAR_1599 == VAR_1600 ) ) { METHOD_249 ( VAR_1601 , VAR_1602 , VAR_1603 , VAR_1604 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_250 ( & VAR_1605 -> VAR_1606 ) ; METHOD_251 ( VAR_1607 ) ; return - VAR_1608 ; } VAR_1609 -> VAR_1610 = VAR_1611 ; if ( METHOD_252 ( VAR_1612 ) ) { VAR_1613 = METHOD_253 ( VAR_1614 , VAR_1615 -> VAR_1616 ) ; if ( VAR_1617 != VAR_1618 ) { if ( ( ( VAR_1619 . VAR_1620 + VAR_1621 . VAR_1622 ) != VAR_1623 -> VAR_1624 ) || ( VAR_1625 . VAR_1626 < VAR_1627 ) ) { METHOD_254 ( VAR_1628 , VAR_1629 , VAR_1630 , VAR_1631 , ""DSDSigispresentneitherinFlashnorUserprovidedInput.."" ) ; METHOD_255 ( & VAR_1632 -> VAR_1633 ) ; METHOD_256 ( VAR_1634 ) ; return VAR_1635 ; } VAR_1636 = METHOD_257 ( * ( TYPE_113 ) ( VAR_1637 + VAR_1638 . VAR_1639 - VAR_1640 ) ) ; if ( VAR_1641 != VAR_1642 ) { METHOD_258 ( VAR_1643 , VAR_1644 , VAR_1645 , VAR_1646 , ""DSDSigispresentneitherinFlashnorUserprovidedInput.."" ) ; METHOD_259 ( & VAR_1647 -> VAR_1648 ) ; METHOD_260 ( VAR_1649 ) ; return VAR_1650 ; } } } VAR_1651 = METHOD_261 ( VAR_1652 , ( TYPE_114 ) VAR_1653 , VAR_1654 . VAR_1655 , VAR_1656 . VAR_1657 , VAR_1658 . VAR_1659 ) ; if ( METHOD_262 ( VAR_1660 ) ) METHOD_263 ( VAR_1661 , VAR_1662 -> VAR_1663 ) ; VAR_1664 -> VAR_1665 = VAR_1666 ; METHOD_264 ( & VAR_1667 -> VAR_1668 ) ; if ( VAR_1669 != VAR_1670 ) { METHOD_265 ( VAR_1671 ) ; return VAR_1672 ; } } METHOD_266 ( & VAR_1673 ) ; METHOD_267 ( VAR_1674 , VAR_1675 , VAR_1676 , VAR_1677 , ""timetakenbyWrite/read:%ldmsec\\n"" , ( VAR_1678 . VAR_1679 - VAR_1680 . VAR_1681 ) * 1000 + ( VAR_1682 . VAR_1683 - VAR_1684 . VAR_1685 ) / 1000 ) ; METHOD_268 ( VAR_1686 ) ; return VAR_1687 ; } case VAR_1688 : { struct STRUCT_OR_UNION_60 VAR_1689 = { 0 } ; TYPE_115 VAR_1690 = VAR_1691 ; TYPE_116 VAR_1692 = 0 ; TYPE_117 VAR_1693 = 0 ; TYPE_118 VAR_1694 = 0 ; TYPE_119 VAR_1695 = 0 ; TYPE_120 TYPE_121 * VAR_1696 ; if ( METHOD_269 ( VAR_1697 ) != VAR_1698 ) { METHOD_270 ( VAR_1699 , VAR_1700 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_1701 ; } METHOD_271 ( VAR_1702 , VAR_1703 , VAR_1704 , VAR_1705 , ""IOCTL_BCM_FLASH2X_SECTION_READCalled"" ) ; if ( METHOD_272 ( & VAR_1706 , VAR_1707 , sizeof ( struct STRUCT_OR_UNION_61 ) ) ) return - VAR_1708 ; if ( METHOD_273 ( & VAR_1709 , VAR_1710 . VAR_1711 , sizeof ( struct STRUCT_OR_UNION_62 ) ) ) return - VAR_1712 ; METHOD_274 ( VAR_1713 , VAR_1714 , VAR_1715 , VAR_1716 , ""\\nsFlash2xRead.Section:%x"" , VAR_1717 . VAR_1718 ) ; METHOD_275 ( VAR_1719 , VAR_1720 , VAR_1721 , VAR_1722 , ""\\nsFlash2xRead.offset:%x"" , VAR_1723 . VAR_1724 ) ; METHOD_276 ( VAR_1725 , VAR_1726 , VAR_1727 , VAR_1728 , ""\\nsFlash2xRead.numOfBytes:%x"" , VAR_1729 . VAR_1730 ) ; METHOD_277 ( VAR_1731 , VAR_1732 , VAR_1733 , VAR_1734 , ""\\nsFlash2xRead.bVerify:%x\\n"" , VAR_1735 . VAR_1736 ) ; if ( METHOD_278 ( VAR_1737 , & VAR_1738 ) == VAR_1739 ) return VAR_1740 ; VAR_1741 = VAR_1742 . VAR_1743 ; if ( VAR_1744 > VAR_1745 -> VAR_1746 ) VAR_1747 = VAR_1748 -> VAR_1749 ; else VAR_1750 = VAR_1751 ; VAR_1752 = VAR_1753 . VAR_1754 ; VAR_1755 = VAR_1756 . VAR_1757 ; VAR_1758 = ( TYPE_122 ) METHOD_279 ( VAR_1759 , VAR_1760 ) ; if ( VAR_1761 == VAR_1762 ) { METHOD_280 ( VAR_1763 , VAR_1764 , 0 , 0 , ""MemoryallocationfailedforFlash2.xReadStructure"" ) ; return - VAR_1765 ; } METHOD_281 ( & VAR_1766 -> VAR_1767 ) ; if ( ( VAR_1768 -> VAR_1769 == VAR_1770 ) || ( VAR_1771 -> VAR_1772 == VAR_1773 ) || ( VAR_1774 -> VAR_1775 == VAR_1776 ) ) { METHOD_282 ( VAR_1777 , VAR_1778 , VAR_1779 , VAR_1780 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_283 ( & VAR_1781 -> VAR_1782 ) ; METHOD_284 ( VAR_1783 ) ; return - VAR_1784 ; } while ( VAR_1785 ) { if ( VAR_1786 > VAR_1787 -> VAR_1788 ) VAR_1789 = VAR_1790 -> VAR_1791 ; else VAR_1792 = VAR_1793 ; VAR_1794 = METHOD_285 ( VAR_1795 , ( TYPE_123 ) VAR_1796 , VAR_1797 . VAR_1798 , VAR_1799 , VAR_1800 ) ; if ( VAR_1801 ) { METHOD_286 ( VAR_1802 , VAR_1803 , VAR_1804 , VAR_1805 , ""Flash2xreaderrwithStatus:%d"" , VAR_1806 ) ; break ; } METHOD_287 ( VAR_1807 , VAR_1808 , VAR_1809 , VAR_1810 , VAR_1811 , VAR_1812 ) ; VAR_1813 = METHOD_288 ( VAR_1814 , VAR_1815 , VAR_1816 ) ; if ( VAR_1817 ) { METHOD_289 ( VAR_1818 , VAR_1819 , VAR_1820 , VAR_1821 , ""Copytousefailedwithstatus:%d"" , VAR_1822 ) ; METHOD_290 ( & VAR_1823 -> VAR_1824 ) ; METHOD_291 ( VAR_1825 ) ; return - VAR_1826 ; } VAR_1827 = VAR_1828 - VAR_1829 ; if ( VAR_1830 ) { VAR_1831 = VAR_1832 + VAR_1833 ; VAR_1834 = VAR_1835 + VAR_1836 ; } } METHOD_292 ( & VAR_1837 -> VAR_1838 ) ; METHOD_293 ( VAR_1839 ) ; } break ; case VAR_1840 : { struct STRUCT_OR_UNION_63 VAR_1841 = { 0 } ; TYPE_124 VAR_1842 ; TYPE_125 TYPE_126 * VAR_1843 ; TYPE_127 VAR_1844 = 0 ; TYPE_128 VAR_1845 = 0 ; TYPE_129 VAR_1846 = 0 ; TYPE_130 VAR_1847 = 0 ; if ( METHOD_294 ( VAR_1848 ) != VAR_1849 ) { METHOD_295 ( VAR_1850 , VAR_1851 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_1852 ; } VAR_1853 -> VAR_1854 = VAR_1855 ; METHOD_296 ( VAR_1856 , VAR_1857 , VAR_1858 , VAR_1859 , ""IOCTL_BCM_FLASH2X_SECTION_WRITECalled"" ) ; if ( METHOD_297 ( & VAR_1860 , VAR_1861 , sizeof ( struct STRUCT_OR_UNION_64 ) ) ) return - VAR_1862 ; if ( METHOD_298 ( & VAR_1863 , VAR_1864 . VAR_1865 , sizeof ( struct STRUCT_OR_UNION_65 ) ) ) return - VAR_1866 ; METHOD_299 ( VAR_1867 , VAR_1868 , VAR_1869 , VAR_1870 , ""\\nsFlash2xRead.Section:%x"" , VAR_1871 . VAR_1872 ) ; METHOD_300 ( VAR_1873 , VAR_1874 , VAR_1875 , VAR_1876 , ""\\nsFlash2xRead.offset:%d"" , VAR_1877 . VAR_1878 ) ; METHOD_301 ( VAR_1879 , VAR_1880 , VAR_1881 , VAR_1882 , ""\\nsFlash2xRead.numOfBytes:%x"" , VAR_1883 . VAR_1884 ) ; METHOD_302 ( VAR_1885 , VAR_1886 , VAR_1887 , VAR_1888 , ""\\nsFlash2xRead.bVerify:%x\\n"" , VAR_1889 . VAR_1890 ) ; if ( ( VAR_1891 . VAR_1892 != VAR_1893 ) && ( VAR_1894 . VAR_1895 != VAR_1896 ) && ( VAR_1897 . VAR_1898 != VAR_1899 ) ) { METHOD_303 ( VAR_1900 , VAR_1901 , VAR_1902 , VAR_1903 , ""OnlyVSAwriteisallowed"" ) ; return - VAR_1904 ; } if ( METHOD_304 ( VAR_1905 , & VAR_1906 ) == VAR_1907 ) return VAR_1908 ; VAR_1909 = VAR_1910 . VAR_1911 ; VAR_1912 = VAR_1913 . VAR_1914 ; VAR_1915 = VAR_1916 . VAR_1917 ; if ( VAR_1918 > VAR_1919 -> VAR_1920 ) VAR_1921 = VAR_1922 -> VAR_1923 ; else VAR_1924 = VAR_1925 ; VAR_1926 = METHOD_305 ( VAR_1927 , VAR_1928 ) ; if ( VAR_1929 == VAR_1930 ) return - VAR_1931 ; VAR_1932 = VAR_1933 -> VAR_1934 ; if ( VAR_1935 % VAR_1936 -> VAR_1937 ) VAR_1938 = VAR_1939 -> VAR_1940 - ( VAR_1941 % VAR_1942 -> VAR_1943 ) ; if ( VAR_1944 < VAR_1945 ) VAR_1946 = VAR_1947 ; METHOD_306 ( & VAR_1948 -> VAR_1949 ) ; if ( ( VAR_1950 -> VAR_1951 == VAR_1952 ) || ( VAR_1953 -> VAR_1954 == VAR_1955 ) || ( VAR_1956 -> VAR_1957 == VAR_1958 ) ) { METHOD_307 ( VAR_1959 , VAR_1960 , VAR_1961 , VAR_1962 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_308 ( & VAR_1963 -> VAR_1964 ) ; METHOD_309 ( VAR_1965 ) ; return - VAR_1966 ; } METHOD_310 ( VAR_1967 , VAR_1968 . VAR_1969 ) ; do { VAR_1970 = METHOD_311 ( VAR_1971 , VAR_1972 , VAR_1973 ) ; if ( VAR_1974 ) { METHOD_312 ( VAR_1975 , VAR_1976 , 0 , 0 , ""Copytouserfailedwithstatus:%d"" , VAR_1977 ) ; METHOD_313 ( & VAR_1978 -> VAR_1979 ) ; METHOD_314 ( VAR_1980 ) ; return - VAR_1981 ; } METHOD_315 ( VAR_1982 , VAR_1983 , VAR_1984 , VAR_1985 , VAR_1986 , VAR_1987 ) ; VAR_1988 = METHOD_316 ( VAR_1989 , ( TYPE_131 ) VAR_1990 , VAR_1991 . VAR_1992 , VAR_1993 , VAR_1994 , VAR_1995 . VAR_1996 ) ; if ( VAR_1997 ) { METHOD_317 ( VAR_1998 , VAR_1999 , 0 , 0 , ""Flash2xreaderrwithStatus:%d"" , VAR_2000 ) ; break ; } VAR_2001 = VAR_2002 - VAR_2003 ; if ( VAR_2004 ) { VAR_2005 = VAR_2006 + VAR_2007 ; VAR_2008 = VAR_2009 + VAR_2010 ; if ( VAR_2011 > VAR_2012 -> VAR_2013 ) VAR_2014 = VAR_2015 -> VAR_2016 ; else VAR_2017 = VAR_2018 ; } } while ( VAR_2019 > 0 ) ; METHOD_318 ( VAR_2020 , VAR_2021 . VAR_2022 ) ; METHOD_319 ( & VAR_2023 -> VAR_2024 ) ; METHOD_320 ( VAR_2025 ) ; } break ; case VAR_2026 : { struct STRUCT_OR_UNION_66 * VAR_2027 ; METHOD_321 ( VAR_2028 , VAR_2029 , VAR_2030 , VAR_2031 , ""IOCTL_BCM_GET_FLASH2X_SECTION_BITMAPCalled"" ) ; if ( METHOD_322 ( & VAR_2032 , VAR_2033 , sizeof ( struct STRUCT_OR_UNION_67 ) ) ) return - VAR_2034 ; if ( VAR_2035 . VAR_2036 != sizeof ( struct STRUCT_OR_UNION_68 ) ) return - VAR_2037 ; VAR_2038 = METHOD_323 ( sizeof ( struct STRUCT_OR_UNION_69 ) , VAR_2039 ) ; if ( VAR_2040 == VAR_2041 ) { METHOD_324 ( VAR_2042 , VAR_2043 , 0 , 0 , ""Memoryisnotavailable"" ) ; return - VAR_2044 ; } METHOD_325 ( & VAR_2045 -> VAR_2046 ) ; if ( ( VAR_2047 -> VAR_2048 == VAR_2049 ) || ( VAR_2050 -> VAR_2051 == VAR_2052 ) || ( VAR_2053 -> VAR_2054 == VAR_2055 ) ) { METHOD_326 ( VAR_2056 , VAR_2057 , VAR_2058 , VAR_2059 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_327 ( & VAR_2060 -> VAR_2061 ) ; METHOD_328 ( VAR_2062 ) ; return - VAR_2063 ; } METHOD_329 ( VAR_2064 , VAR_2065 ) ; METHOD_330 ( & VAR_2066 -> VAR_2067 ) ; if ( METHOD_331 ( VAR_2068 . VAR_2069 , VAR_2070 , sizeof ( struct STRUCT_OR_UNION_70 ) ) ) { METHOD_332 ( VAR_2071 ) ; return - VAR_2072 ; } METHOD_333 ( VAR_2073 ) ; } break ; case VAR_2074 : { enum VAR_2075 VAR_2076 = 0 ; METHOD_334 ( VAR_2077 , VAR_2078 , VAR_2079 , VAR_2080 , ""IOCTL_BCM_SET_ACTIVE_SECTIONCalled"" ) ; if ( METHOD_335 ( VAR_2081 ) != VAR_2082 ) { METHOD_336 ( VAR_2083 , VAR_2084 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2085 ; } VAR_2086 = METHOD_337 ( & VAR_2087 , VAR_2088 , sizeof ( struct STRUCT_OR_UNION_71 ) ) ; if ( VAR_2089 ) { METHOD_338 ( VAR_2090 , VAR_2091 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2092 ; } VAR_2093 = METHOD_339 ( & VAR_2094 , VAR_2095 . VAR_2096 , sizeof ( TYPE_132 ) ) ; if ( VAR_2097 ) { METHOD_340 ( VAR_2098 , VAR_2099 , 0 , 0 , ""Copyofflashsectionvalfailed"" ) ; return - VAR_2100 ; } METHOD_341 ( & VAR_2101 -> VAR_2102 ) ; if ( ( VAR_2103 -> VAR_2104 == VAR_2105 ) || ( VAR_2106 -> VAR_2107 == VAR_2108 ) || ( VAR_2109 -> VAR_2110 == VAR_2111 ) ) { METHOD_342 ( VAR_2112 , VAR_2113 , VAR_2114 , VAR_2115 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_343 ( & VAR_2116 -> VAR_2117 ) ; return - VAR_2118 ; } VAR_2119 = METHOD_344 ( VAR_2120 , VAR_2121 ) ; if ( VAR_2122 ) METHOD_345 ( VAR_2123 , VAR_2124 , 0 , 0 , ""Failedtomakeit\'spriorityHighest.Status%d"" , VAR_2125 ) ; METHOD_346 ( & VAR_2126 -> VAR_2127 ) ; } break ; case VAR_2128 : { VAR_2129 -> VAR_2130 = VAR_2131 ; METHOD_347 ( VAR_2132 , VAR_2133 , VAR_2134 , VAR_2135 , ""IOCTL_BCM_IDENTIFY_ACTIVE_SECTIONcalled"" ) ; VAR_2136 = VAR_2137 ; } break ; case VAR_2138 : { struct STRUCT_OR_UNION_72 VAR_2139 = { 0 } ; VAR_2140 = VAR_2141 ; METHOD_348 ( VAR_2142 , VAR_2143 , VAR_2144 , VAR_2145 , ""IOCTL_BCM_COPY_SECTIONCalled"" ) ; VAR_2146 -> VAR_2147 = VAR_2148 ; if ( METHOD_349 ( VAR_2149 ) != VAR_2150 ) { METHOD_350 ( VAR_2151 , VAR_2152 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2153 ; } VAR_2154 = METHOD_351 ( & VAR_2155 , VAR_2156 , sizeof ( struct STRUCT_OR_UNION_73 ) ) ; if ( VAR_2157 ) { METHOD_352 ( VAR_2158 , VAR_2159 , 0 , 0 , ""CopyofIOCTLBUFFERfailedStatus:%d"" , VAR_2160 ) ; return - VAR_2161 ; } VAR_2162 = METHOD_353 ( & VAR_2163 , VAR_2164 . VAR_2165 , sizeof ( struct STRUCT_OR_UNION_74 ) ) ; if ( VAR_2166 ) { METHOD_354 ( VAR_2167 , VAR_2168 , 0 , 0 , ""CopyofCopy_Section_StructfailedwithStatus:%d"" , VAR_2169 ) ; return - VAR_2170 ; } METHOD_355 ( VAR_2171 , VAR_2172 , VAR_2173 , VAR_2174 , ""SourceSEction:%x"" , VAR_2175 . VAR_2176 ) ; METHOD_356 ( VAR_2177 , VAR_2178 , VAR_2179 , VAR_2180 , ""DestinationSEction:%x"" , VAR_2181 . VAR_2182 ) ; METHOD_357 ( VAR_2183 , VAR_2184 , VAR_2185 , VAR_2186 , ""offset:%x"" , VAR_2187 . VAR_2188 ) ; METHOD_358 ( VAR_2189 , VAR_2190 , VAR_2191 , VAR_2192 , ""NOB:%x"" , VAR_2193 . VAR_2194 ) ; if ( METHOD_359 ( VAR_2195 , VAR_2196 . VAR_2197 ) == VAR_2198 ) { METHOD_360 ( VAR_2199 , VAR_2200 , 0 , 0 , ""SourceSection<%x>doesnotexixtinFlash"" , VAR_2201 . VAR_2202 ) ; return - VAR_2203 ; } if ( METHOD_361 ( VAR_2204 , VAR_2205 . VAR_2206 ) == VAR_2207 ) { METHOD_362 ( VAR_2208 , VAR_2209 , 0 , 0 , ""DestinatioSection<%x>doesnotexixtinFlash"" , VAR_2210 . VAR_2211 ) ; return - VAR_2212 ; } if ( VAR_2213 . VAR_2214 == VAR_2215 . VAR_2216 ) { METHOD_363 ( VAR_2217 , VAR_2218 , VAR_2219 , VAR_2220 , ""SourceandDestinationsectionshouldbedifferent"" ) ; return - VAR_2221 ; } METHOD_364 ( & VAR_2222 -> VAR_2223 ) ; if ( ( VAR_2224 -> VAR_2225 == VAR_2226 ) || ( VAR_2227 -> VAR_2228 == VAR_2229 ) || ( VAR_2230 -> VAR_2231 == VAR_2232 ) ) { METHOD_365 ( VAR_2233 , VAR_2234 , VAR_2235 , VAR_2236 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_366 ( & VAR_2237 -> VAR_2238 ) ; return - VAR_2239 ; } if ( VAR_2240 . VAR_2241 == VAR_2242 || VAR_2243 . VAR_2244 == VAR_2245 ) { if ( METHOD_367 ( VAR_2246 ) ) { METHOD_368 ( VAR_2247 , VAR_2248 , 0 , 0 , ""DeviceisNon-CDLesshencewon\'thaveISO!!"" ) ; VAR_2249 = - VAR_2250 ; } else if ( VAR_2251 . VAR_2252 == 0 ) { VAR_2253 = METHOD_369 ( VAR_2254 , VAR_2255 ) ; } else { METHOD_370 ( VAR_2256 , VAR_2257 , 0 , 0 , ""PartialCopyofISOsectionisnotAllowed.."" ) ; VAR_2258 = VAR_2259 ; } METHOD_371 ( & VAR_2260 -> VAR_2261 ) ; return VAR_2262 ; } VAR_2263 = METHOD_372 ( VAR_2264 , VAR_2265 . VAR_2266 , VAR_2267 . VAR_2268 , VAR_2269 . VAR_2270 , VAR_2271 . VAR_2272 ) ; METHOD_373 ( & VAR_2273 -> VAR_2274 ) ; } break ; case VAR_2275 : { VAR_2276 = VAR_2277 ; METHOD_374 ( VAR_2278 , VAR_2279 , VAR_2280 , VAR_2281 , ""IOCTL_BCM_GET_FLASH_CS_INFOCalled"" ) ; VAR_2282 = METHOD_375 ( & VAR_2283 , VAR_2284 , sizeof ( struct STRUCT_OR_UNION_75 ) ) ; if ( VAR_2285 ) { METHOD_376 ( VAR_2286 , VAR_2287 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2288 ; } if ( VAR_2289 -> VAR_2290 != VAR_2291 ) { METHOD_377 ( VAR_2292 , VAR_2293 , 0 , 0 , ""Connecteddevicedoesnothaveflash"" ) ; VAR_2294 = - VAR_2295 ; break ; } if ( METHOD_378 ( VAR_2296 ) == VAR_2297 ) { if ( VAR_2298 . VAR_2299 < sizeof ( struct STRUCT_OR_UNION_76 ) ) return - VAR_2300 ; if ( METHOD_379 ( VAR_2301 . VAR_2302 , VAR_2303 -> VAR_2304 , sizeof ( struct STRUCT_OR_UNION_77 ) ) ) return - VAR_2305 ; } else { if ( VAR_2306 . VAR_2307 < sizeof ( struct STRUCT_OR_UNION_78 ) ) return - VAR_2308 ; if ( METHOD_380 ( VAR_2309 . VAR_2310 , VAR_2311 -> VAR_2312 , sizeof ( struct STRUCT_OR_UNION_79 ) ) ) return - VAR_2313 ; } } break ; case VAR_2314 : { TYPE_133 VAR_2315 = 0 ; enum VAR_2316 VAR_2317 ; VAR_2318 = VAR_2319 ; METHOD_381 ( VAR_2320 , VAR_2321 , VAR_2322 , VAR_2323 , ""IOCTL_BCM_SELECT_DSDCalled"" ) ; if ( METHOD_382 ( VAR_2324 ) != VAR_2325 ) { METHOD_383 ( VAR_2326 , VAR_2327 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2328 ; } VAR_2329 = METHOD_384 ( & VAR_2330 , VAR_2331 , sizeof ( struct STRUCT_OR_UNION_80 ) ) ; if ( VAR_2332 ) { METHOD_385 ( VAR_2333 , VAR_2334 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2335 ; } VAR_2336 = METHOD_386 ( & VAR_2337 , VAR_2338 . VAR_2339 , sizeof ( TYPE_134 ) ) ; if ( VAR_2340 ) { METHOD_387 ( VAR_2341 , VAR_2342 , 0 , 0 , ""Copyofflashsectionvalfailed"" ) ; return - VAR_2343 ; } METHOD_388 ( VAR_2344 , VAR_2345 , VAR_2346 , VAR_2347 , ""ReadSection:%d"" , VAR_2348 ) ; if ( ( VAR_2349 != VAR_2350 ) && ( VAR_2351 != VAR_2352 ) && ( VAR_2353 != VAR_2354 ) ) { METHOD_389 ( VAR_2355 , VAR_2356 , 0 , 0 , ""Passedsection<%x>isnotDSDsection"" , VAR_2357 ) ; return VAR_2358 ; } VAR_2359 = METHOD_390 ( VAR_2360 , VAR_2361 ) ; if ( VAR_2362 == VAR_2363 ) { METHOD_391 ( VAR_2364 , VAR_2365 , 0 , 0 , ""ProvidedSectionval<%d>doesnotexixtinFlash2.x"" , VAR_2366 ) ; return - VAR_2367 ; } VAR_2368 -> VAR_2369 = VAR_2370 ; VAR_2371 -> VAR_2372 = VAR_2373 ; VAR_2374 -> VAR_2375 = VAR_2376 ; } VAR_2377 = VAR_2378 ; break ; case VAR_2379 : { struct STRUCT_OR_UNION_81 VAR_2380 ; TYPE_135 VAR_2381 ; TYPE_136 VAR_2382 ; TYPE_137 VAR_2383 = 0 ; TYPE_138 VAR_2384 = 0 ; TYPE_139 VAR_2385 ; TYPE_140 TYPE_141 * VAR_2386 ; if ( VAR_2387 -> VAR_2388 != VAR_2389 ) { METHOD_392 ( VAR_2390 , VAR_2391 , 0 , 0 , ""NVMTYPEisnotFlash"" ) ; return - VAR_2392 ; } if ( METHOD_393 ( & VAR_2393 , VAR_2394 , sizeof ( struct STRUCT_OR_UNION_82 ) ) ) { METHOD_394 ( VAR_2395 , VAR_2396 , 0 , 0 , ""copy_from_user1failed\\n"" ) ; return - VAR_2397 ; } if ( METHOD_395 ( & VAR_2398 , VAR_2399 . VAR_2400 , sizeof ( struct STRUCT_OR_UNION_83 ) ) ) return - VAR_2401 ; VAR_2402 = VAR_2403 . VAR_2404 ; if ( VAR_2405 > VAR_2406 ) VAR_2407 = VAR_2408 ; else VAR_2409 = VAR_2410 ; VAR_2411 = VAR_2412 . VAR_2413 ; VAR_2414 = VAR_2415 . VAR_2416 ; VAR_2417 = METHOD_396 ( VAR_2418 , VAR_2419 ) ; if ( VAR_2420 == VAR_2421 ) { METHOD_397 ( VAR_2422 , VAR_2423 , 0 , 0 , ""MemoryallocationfailedforFlash2.xReadStructure"" ) ; VAR_2424 = - VAR_2425 ; break ; } METHOD_398 ( & VAR_2426 -> VAR_2427 ) ; if ( ( VAR_2428 -> VAR_2429 == VAR_2430 ) || ( VAR_2431 -> VAR_2432 == VAR_2433 ) || ( VAR_2434 -> VAR_2435 == VAR_2436 ) ) { METHOD_399 ( VAR_2437 , VAR_2438 , VAR_2439 , VAR_2440 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_400 ( VAR_2441 ) ; METHOD_401 ( & VAR_2442 -> VAR_2443 ) ; return - VAR_2444 ; } VAR_2445 -> VAR_2446 = VAR_2447 ; while ( VAR_2448 ) { if ( VAR_2449 > VAR_2450 ) VAR_2451 = VAR_2452 ; else VAR_2453 = VAR_2454 ; VAR_2455 = METHOD_402 ( VAR_2456 , ( TYPE_142 ) VAR_2457 , VAR_2458 , VAR_2459 ) ; if ( VAR_2460 ) { METHOD_403 ( VAR_2461 , VAR_2462 , 0 , 0 , ""Flash2xreaderrwithStatus:%d"" , VAR_2463 ) ; break ; } METHOD_404 ( VAR_2464 , VAR_2465 , VAR_2466 , VAR_2467 , VAR_2468 , VAR_2469 ) ; VAR_2470 = METHOD_405 ( VAR_2471 , VAR_2472 , VAR_2473 ) ; if ( VAR_2474 ) { METHOD_406 ( VAR_2475 , VAR_2476 , 0 , 0 , ""Copytousefailedwithstatus:%d"" , VAR_2477 ) ; METHOD_407 ( & VAR_2478 -> VAR_2479 ) ; METHOD_408 ( VAR_2480 ) ; return - VAR_2481 ; } VAR_2482 = VAR_2483 - VAR_2484 ; if ( VAR_2485 ) { VAR_2486 = VAR_2487 + VAR_2488 ; VAR_2489 = VAR_2490 + VAR_2491 ; } } VAR_2492 -> VAR_2493 = VAR_2494 ; METHOD_409 ( & VAR_2495 -> VAR_2496 ) ; METHOD_410 ( VAR_2497 ) ; break ; } case VAR_2498 : { TYPE_143 VAR_2499 = 0 ; VAR_2500 = METHOD_411 ( & VAR_2501 , VAR_2502 , sizeof ( struct STRUCT_OR_UNION_84 ) ) ; if ( VAR_2503 ) { METHOD_412 ( VAR_2504 , VAR_2505 , VAR_2506 , VAR_2507 , ""copyofIoctlbufferisfailedfromuserspace"" ) ; return - VAR_2508 ; } if ( VAR_2509 . VAR_2510 != sizeof ( unsigned TYPE_144 ) ) { VAR_2511 = - VAR_2512 ; break ; } VAR_2513 = METHOD_413 ( & VAR_2514 , VAR_2515 . VAR_2516 , VAR_2517 . VAR_2518 ) ; if ( VAR_2519 ) { METHOD_414 ( VAR_2520 , VAR_2521 , VAR_2522 , VAR_2523 , ""copyofcontrolbitmaskfailedfromuserspace"" ) ; return - VAR_2524 ; } METHOD_415 ( VAR_2525 , VAR_2526 , VAR_2527 , VAR_2528 , ""\\nGotuserdcntrlmsgbitmask:%lx"" , VAR_2529 ) ; VAR_2530 -> VAR_2531 = VAR_2532 ; } break ; case VAR_2533 : { struct STRUCT_OR_UNION_85 VAR_2534 ; METHOD_416 ( VAR_2535 , VAR_2536 , VAR_2537 , VAR_2538 , ""CalledIOCTL_BCM_GET_DEVICE_DRIVER_INFO\\n"" ) ;  VAR_2539 . VAR_2540 = VAR_2541 ;  VAR_2542 . VAR_2543 = VAR_2544 ; VAR_2545 . VAR_2546 = 0 ; VAR_2547 . VAR_2548 = VAR_2549 -> VAR_2550 ; VAR_2551 . VAR_2552 = VAR_2553 ; if ( METHOD_417 ( & VAR_2554 , VAR_2555 , sizeof ( struct STRUCT_OR_UNION_86 ) ) ) return - VAR_2556 ; if ( VAR_2557 . VAR_2558 < sizeof ( VAR_2559 ) ) return - VAR_2560 ; if ( METHOD_418 ( VAR_2561 . VAR_2562 , & VAR_2563 , sizeof ( VAR_2564 ) ) ) return - VAR_2565 ; } break ; case VAR_2566 : { struct STRUCT_OR_UNION_87 VAR_2567 = { 0 } ; METHOD_419 ( VAR_2568 , VAR_2569 , VAR_2570 , VAR_2571 , ""IOCTL_BCM_TIME_SINCE_NET_ENTRYcalled"" ) ; if ( METHOD_420 ( & VAR_2572 , VAR_2573 , sizeof ( struct STRUCT_OR_UNION_88 ) ) ) return - VAR_2574 ; if ( VAR_2575 . VAR_2576 < sizeof ( struct STRUCT_OR_UNION_89 ) ) return - VAR_2577 ; VAR_2578 . VAR_2579 = METHOD_421 ( ) - VAR_2580 -> VAR_2581 ; if ( METHOD_422 ( VAR_2582 . VAR_2583 , & VAR_2584 , sizeof ( struct STRUCT_OR_UNION_90 ) ) ) return - VAR_2585 ; } break ; case VAR_2586 : METHOD_423 ( VAR_2587 , VAR_2588 , VAR_2589 , VAR_2590 , ""IOCTL_CLOSE_NOTIFICATION"" ) ; break ; default : pr_info ( DRV_NAME "":unknownioctlcmd=%x\\n"" , VAR_2591 ) ; VAR_2592 = VAR_2593 ; break ; } return VAR_2594 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = VAR_4 -> VAR_5 ; TYPE_3 TYPE_4 * VAR_6 = ( TYPE_5 TYPE_6 * ) VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_7 VAR_11 = VAR_12 ; TYPE_8 VAR_13 = 0 ; struct STRUCT_OR_UNION_3 VAR_14 ; TYPE_9 VAR_15 ; METHOD_1 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 , ""ParametersPassedtocontrolIOCTLcmd=0x%Xarg=0x%lX"" , VAR_20 , VAR_21 ) ; if ( METHOD_2 ( VAR_22 ) != VAR_23 ) return - VAR_24 ; if ( METHOD_3 ( VAR_25 ) & VAR_26 ) VAR_27 = ! METHOD_4 ( VAR_28 , VAR_29 , METHOD_5 ( VAR_30 ) ) ; else if ( METHOD_6 ( VAR_31 ) & VAR_32 ) VAR_33 = ! METHOD_7 ( VAR_34 , VAR_35 , METHOD_8 ( VAR_36 ) ) ; else if ( VAR_37 == ( METHOD_9 ( VAR_38 ) & VAR_39 ) ) VAR_40 = VAR_41 ; if ( VAR_42 ) return - VAR_43 ; if ( VAR_44 -> VAR_45 ) return - VAR_46 ; if ( VAR_47 == VAR_48 -> VAR_49 ) { switch ( VAR_50 ) { case VAR_51 : case VAR_52 : case VAR_53 : case VAR_54 : case VAR_55 : case VAR_56 : case VAR_57 : case VAR_58 : return - VAR_59 ; default : break ; } } VAR_60 = METHOD_10 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 != VAR_65 ) return VAR_66 ; switch ( VAR_67 ) { case VAR_68 : { struct STRUCT_OR_UNION_4 VAR_69 = { 0 } ; TYPE_10 VAR_70 ; TYPE_11 VAR_71 ; TYPE_12 VAR_72 ; if ( METHOD_11 ( & VAR_73 , VAR_74 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ) return - VAR_75 ; if ( VAR_76 . VAR_77 > sizeof ( VAR_78 ) ) return - VAR_79 ; if ( METHOD_12 ( & VAR_80 , VAR_81 . VAR_82 , VAR_83 . VAR_84 ) ) return - VAR_85 ; if ( VAR_86 . VAR_87 > VAR_88 || VAR_89 . VAR_90 == 0 ) { return - VAR_91 ; } VAR_92 = VAR_93 . VAR_94 ; VAR_95 = 4 - ( VAR_96 % 4 ) ; VAR_97 += VAR_98 % 4 ; VAR_99 = METHOD_13 ( VAR_100 , VAR_101 ) ; if ( ! VAR_102 ) return - VAR_103 ; VAR_104 = METHOD_14 ( VAR_105 , ( TYPE_13 ) VAR_106 . VAR_107 , ( TYPE_14 ) VAR_108 , VAR_109 ) ; if ( VAR_110 > 0 ) { VAR_111 = VAR_112 ; if ( METHOD_15 ( VAR_113 . VAR_114 , VAR_115 , VAR_116 ) ) { METHOD_16 ( VAR_117 ) ; return - VAR_118 ; } } else { VAR_119 = VAR_120 ; } METHOD_17 ( VAR_121 ) ; break ; } case VAR_122 : { struct STRUCT_OR_UNION_6 VAR_123 = { 0 } ; TYPE_15 VAR_124 = 0 ; if ( METHOD_18 ( & VAR_125 , VAR_126 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ) return - VAR_127 ; if ( VAR_128 . VAR_129 > sizeof ( VAR_130 ) ) return - VAR_131 ; if ( METHOD_19 ( & VAR_132 , VAR_133 . VAR_134 , VAR_135 . VAR_136 ) ) return - VAR_137 ; VAR_138 = VAR_139 . VAR_140 & VAR_141 ; if ( ! ( ( VAR_142 -> VAR_143 -> VAR_144 ) & VAR_145 ) && ( ( VAR_146 == VAR_147 ) || ( VAR_148 == VAR_149 ) || ( VAR_150 == VAR_151 ) || ( VAR_152 == VAR_153 ) ) ) { METHOD_20 ( VAR_154 , VAR_155 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; return - VAR_156 ; } VAR_157 = METHOD_21 ( VAR_158 , ( TYPE_16 ) VAR_159 . VAR_160 , ( TYPE_17 ) VAR_161 . VAR_162 , sizeof ( TYPE_18 ) ) ; if ( VAR_163 == VAR_164 ) { METHOD_22 ( VAR_165 , VAR_166 , VAR_167 , VAR_168 , ""WRMDone\\n"" ) ; } else { METHOD_23 ( VAR_169 , VAR_170 , VAR_171 , VAR_172 , ""WRMFailed\\n"" ) ; VAR_173 = - VAR_174 ; } break ; } case VAR_175 : case VAR_176 : { struct STRUCT_OR_UNION_8 VAR_177 = { 0 } ; TYPE_19 VAR_178 = VAR_179 ; TYPE_20 VAR_180 = 0 ; if ( ( VAR_181 -> VAR_182 == VAR_183 ) || ( VAR_184 -> VAR_185 == VAR_186 ) || ( VAR_187 -> VAR_188 == VAR_189 ) ) { METHOD_24 ( VAR_190 , VAR_191 , 0 , 0 , ""DeviceinIdleMode,BlockingRdms\\n"" ) ; return - VAR_192 ; } if ( METHOD_25 ( & VAR_193 , VAR_194 , sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_195 ; if ( VAR_196 . VAR_197 > sizeof ( VAR_198 ) ) return - VAR_199 ; if ( METHOD_26 ( & VAR_200 , VAR_201 . VAR_202 , VAR_203 . VAR_204 ) ) return - VAR_205 ; if ( VAR_206 . VAR_207 > VAR_208 || VAR_209 . VAR_210 == 0 ) { return - VAR_211 ; } VAR_212 = METHOD_27 ( VAR_213 . VAR_214 , VAR_215 ) ; if ( ! VAR_216 ) return VAR_217 ; if ( ( ( ( TYPE_21 ) VAR_218 . VAR_219 & 0x0F000000 ) != 0x0F000000 ) || ( ( TYPE_22 ) VAR_220 . VAR_221 & 0x3 ) ) { METHOD_28 ( VAR_222 , VAR_223 , 0 , 0 , ""RDMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_23 ) VAR_224 . VAR_225 ) ; METHOD_29 ( VAR_226 ) ; return - VAR_227 ; } VAR_228 = VAR_229 . VAR_230 & VAR_231 ; VAR_232 = METHOD_30 ( VAR_233 , ( TYPE_24 ) VAR_234 . VAR_235 , ( TYPE_25 ) VAR_236 , VAR_237 . VAR_238 ) ; if ( VAR_239 > 0 ) { VAR_240 = VAR_241 ; if ( METHOD_31 ( VAR_242 . VAR_243 , VAR_244 , VAR_245 ) ) { METHOD_32 ( VAR_246 ) ; return - VAR_247 ; } } else { VAR_248 = VAR_249 ; } METHOD_33 ( VAR_250 ) ; break ; } case VAR_251 : case VAR_252 : { struct STRUCT_OR_UNION_10 VAR_253 = { 0 } ; TYPE_26 VAR_254 = 0 ; if ( ( VAR_255 -> VAR_256 == VAR_257 ) || ( VAR_258 -> VAR_259 == VAR_260 ) || ( VAR_261 -> VAR_262 == VAR_263 ) ) { METHOD_34 ( VAR_264 , VAR_265 , 0 , 0 , ""DeviceinIdleMode,BlockingWrms\\n"" ) ; return - VAR_266 ; } if ( METHOD_35 ( & VAR_267 , VAR_268 , sizeof ( struct STRUCT_OR_UNION_11 ) ) ) return - VAR_269 ; if ( VAR_270 . VAR_271 > sizeof ( VAR_272 ) ) return - VAR_273 ; if ( METHOD_36 ( & VAR_274 , VAR_275 . VAR_276 , VAR_277 . VAR_278 ) ) return - VAR_279 ; if ( ( ( ( TYPE_27 ) VAR_280 . VAR_281 & 0x0F000000 ) != 0x0F000000 ) || ( ( TYPE_28 ) VAR_282 . VAR_283 & 0x3 ) ) { METHOD_37 ( VAR_284 , VAR_285 , 0 , 0 , ""WRMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_29 ) VAR_286 . VAR_287 ) ; return - VAR_288 ; } VAR_289 = VAR_290 . VAR_291 & VAR_292 ; if ( ! ( ( VAR_293 -> VAR_294 -> VAR_295 ) & VAR_296 ) && ( ( VAR_297 == VAR_298 ) || ( VAR_299 == VAR_300 ) || ( VAR_301 == VAR_302 ) || ( VAR_303 == VAR_304 ) ) && ( VAR_305 == VAR_306 ) ) { METHOD_38 ( VAR_307 , VAR_308 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; return - VAR_309 ; } VAR_310 = METHOD_39 ( VAR_311 , ( TYPE_30 ) VAR_312 . VAR_313 , ( TYPE_31 ) VAR_314 . VAR_315 , VAR_316 . VAR_317 ) ; if ( VAR_318 == VAR_319 ) { METHOD_40 ( VAR_320 , VAR_321 , VAR_322 , VAR_323 , ""WRMDone\\n"" ) ; } else { METHOD_41 ( VAR_324 , VAR_325 , VAR_326 , VAR_327 , ""WRMFailed\\n"" ) ; VAR_328 = - VAR_329 ; } break ; } case VAR_330 : { TYPE_32 VAR_331 [ 4 ] ; TYPE_33 VAR_332 = 0 ; TYPE_34 VAR_333 = 0 ; TYPE_35 VAR_334 = 0 ; struct STRUCT_OR_UNION_12 VAR_335 = { 0 } ; if ( ( VAR_336 -> VAR_337 == VAR_338 ) || ( VAR_339 -> VAR_340 == VAR_341 ) || ( VAR_342 -> VAR_343 == VAR_344 ) ) { METHOD_42 ( VAR_345 , VAR_346 , VAR_347 , VAR_348 , ""GPIOCan\'tbeset/clearinLowpowerMode"" ) ; return - VAR_349 ; } if ( METHOD_43 ( & VAR_350 , VAR_351 , sizeof ( struct STRUCT_OR_UNION_13 ) ) ) return - VAR_352 ; if ( VAR_353 . VAR_354 > sizeof ( VAR_355 ) ) return - VAR_356 ; if ( METHOD_44 ( & VAR_357 , VAR_358 . VAR_359 , VAR_360 . VAR_361 ) ) return - VAR_362 ; VAR_363 = VAR_364 . VAR_365 ; VAR_366 = VAR_367 . VAR_368 ; VAR_369 = ( 1 << VAR_370 ) ; if ( METHOD_45 ( VAR_371 , VAR_372 ) == VAR_373 ) { METHOD_46 ( VAR_374 , VAR_375 , VAR_376 , VAR_377 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoLED!!!"" , VAR_378 ) ; VAR_379 = - VAR_380 ; break ; } if ( VAR_381 ) { VAR_382 = METHOD_47 ( VAR_383 , VAR_384 , ( TYPE_36 ) ( & VAR_385 ) , sizeof ( TYPE_37 ) ) ; if ( VAR_386 == VAR_387 ) { METHOD_48 ( VAR_388 , VAR_389 , VAR_390 , VAR_391 , ""SettheGPIObit\\n"" ) ; } else { METHOD_49 ( VAR_392 , VAR_393 , VAR_394 , VAR_395 , ""Failedtosetthe%dthGPIO\\n"" , VAR_396 ) ; break ; } } else { VAR_397 = METHOD_50 ( VAR_398 , VAR_399 , ( TYPE_38 ) ( & VAR_400 ) , sizeof ( TYPE_39 ) ) ; if ( VAR_401 == VAR_402 ) { METHOD_51 ( VAR_403 , VAR_404 , VAR_405 , VAR_406 , ""SettheGPIObit\\n"" ) ; } else { METHOD_52 ( VAR_407 , VAR_408 , VAR_409 , VAR_410 , ""Failedtoclearthe%dthGPIO\\n"" , VAR_411 ) ; break ; } } VAR_412 = METHOD_53 ( VAR_413 , ( TYPE_40 ) VAR_414 , ( TYPE_41 ) VAR_415 , sizeof ( TYPE_42 ) ) ; if ( VAR_416 < 0 ) { VAR_417 = VAR_418 ; METHOD_54 ( VAR_419 , VAR_420 , VAR_421 , VAR_422 , ""GPIO_MODE_REGISTERreadfailed"" ) ; break ; } else { VAR_423 = VAR_424 ; } * ( TYPE_43 * ) VAR_425 |= ( 1 << VAR_426 ) ; VAR_427 = METHOD_55 ( VAR_428 , VAR_429 , ( TYPE_44 ) VAR_430 , sizeof ( TYPE_45 ) ) ; if ( VAR_431 == VAR_432 ) { METHOD_56 ( VAR_433 , VAR_434 , VAR_435 , VAR_436 , ""SettheGPIOtooutputMode\\n"" ) ; } else { METHOD_57 ( VAR_437 , VAR_438 , VAR_439 , VAR_440 , ""FailedtoputGPIOinOutputMode\\n"" ) ; break ; } } break ; case VAR_441 : { struct STRUCT_OR_UNION_14 VAR_442 = { 0 } ; METHOD_58 ( VAR_443 , VAR_444 , VAR_445 , VAR_446 , ""UsermadeLEDthreadInActive"" ) ; if ( ( VAR_447 -> VAR_448 == VAR_449 ) || ( VAR_450 -> VAR_451 == VAR_452 ) || ( VAR_453 -> VAR_454 == VAR_455 ) ) { METHOD_59 ( VAR_456 , VAR_457 , VAR_458 , VAR_459 , ""GPIOCan\'tbeset/clearinLowpowerMode"" ) ; VAR_460 = - VAR_461 ; break ; } if ( METHOD_60 ( & VAR_462 , VAR_463 , sizeof ( struct STRUCT_OR_UNION_15 ) ) ) return - VAR_464 ; if ( VAR_465 . VAR_466 > sizeof ( VAR_467 ) ) return - VAR_468 ; if ( METHOD_61 ( & VAR_469 , VAR_470 . VAR_471 , VAR_472 . VAR_473 ) ) return - VAR_474 ; if ( VAR_475 -> VAR_476 . VAR_477 ) { if ( VAR_478 . VAR_479 == VAR_480 ) { METHOD_62 ( VAR_481 , VAR_482 , VAR_483 , VAR_484 , ""Activatingthreadreq"" ) ; VAR_485 -> VAR_486 = VAR_487 ; } else { METHOD_63 ( VAR_488 , VAR_489 , VAR_490 , VAR_491 , ""DeActivatingThreadreq....."" ) ; VAR_492 -> VAR_493 = VAR_494 ; } METHOD_64 ( & VAR_495 -> VAR_496 . VAR_497 ) ; } } break ; case VAR_498 : { TYPE_46 VAR_499 = 0 ; TYPE_47 VAR_500 [ 4 ] ; struct STRUCT_OR_UNION_16 VAR_501 = { 0 } ; if ( ( VAR_502 -> VAR_503 == VAR_504 ) || ( VAR_505 -> VAR_506 == VAR_507 ) || ( VAR_508 -> VAR_509 == VAR_510 ) ) return - VAR_511 ; if ( METHOD_65 ( & VAR_512 , VAR_513 , sizeof ( struct STRUCT_OR_UNION_17 ) ) ) return - VAR_514 ; if ( VAR_515 . VAR_516 > sizeof ( VAR_517 ) ) return - VAR_518 ; if ( METHOD_66 ( & VAR_519 , VAR_520 . VAR_521 , VAR_522 . VAR_523 ) ) return - VAR_524 ; VAR_525 = VAR_526 . VAR_527 ; VAR_528 = METHOD_67 ( VAR_529 , ( TYPE_48 ) VAR_530 , ( TYPE_49 ) VAR_531 , sizeof ( TYPE_50 ) ) ; if ( VAR_532 < 0 ) { VAR_533 = VAR_534 ; METHOD_68 ( VAR_535 , VAR_536 , 0 , 0 , ""RDMFailed\\n"" ) ; return VAR_537 ; } else { VAR_538 = VAR_539 ; } } break ; case VAR_540 : { TYPE_51 VAR_541 [ 4 ] ; struct STRUCT_OR_UNION_18 VAR_542 [ VAR_543 ] ; struct STRUCT_OR_UNION_19 * VAR_544 = ( struct STRUCT_OR_UNION_20 * ) VAR_545 ; METHOD_69 ( VAR_546 , 0 , VAR_547 * sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( ( VAR_548 -> VAR_549 == VAR_550 ) || ( VAR_551 -> VAR_552 == VAR_553 ) || ( VAR_554 -> VAR_555 == VAR_556 ) ) return - VAR_557 ; if ( METHOD_70 ( & VAR_558 , VAR_559 , sizeof ( struct STRUCT_OR_UNION_22 ) ) ) return - VAR_560 ; if ( VAR_561 . VAR_562 > sizeof ( VAR_563 ) ) return - VAR_564 ; if ( METHOD_71 ( & VAR_565 , VAR_566 . VAR_567 , VAR_568 . VAR_569 ) ) return - VAR_570 ; if ( METHOD_72 ( VAR_571 , VAR_572 [ VAR_573 ] . VAR_574 ) == VAR_575 ) { METHOD_73 ( VAR_576 , VAR_577 , VAR_578 , VAR_579 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoNVMLEDbitmap<0x%X>!!!"" , VAR_580 [ VAR_581 ] . VAR_582 , VAR_583 -> VAR_584 ) ; VAR_585 = - VAR_586 ; break ; } if ( ( VAR_587 [ VAR_588 ] . VAR_589 ) & ( VAR_590 [ VAR_591 ] . VAR_592 ) ) { * ( TYPE_52 * ) VAR_593 = VAR_594 [ VAR_595 ] . VAR_596 & VAR_597 [ VAR_598 ] . VAR_599 & VAR_600 [ VAR_601 ] . VAR_602 ; if ( * ( TYPE_53 * ) VAR_603 ) VAR_604 = METHOD_74 ( VAR_605 , VAR_606 , ( TYPE_54 ) VAR_607 , sizeof ( TYPE_55 ) ) ; if ( VAR_608 != VAR_609 ) { METHOD_75 ( VAR_610 , VAR_611 , 0 , 0 , ""WRMtoBCM_GPIO_OUTPUT_SET_REGFailed."" ) ; return VAR_612 ; } * ( TYPE_56 * ) VAR_613 = ( VAR_614 [ VAR_615 ] . VAR_616 & VAR_617 [ VAR_618 ] . VAR_619 & ( ~ ( VAR_620 [ VAR_621 ] . VAR_622 ) ) ) ; if ( * ( TYPE_57 * ) VAR_623 ) VAR_624 = METHOD_76 ( VAR_625 , VAR_626 , ( TYPE_58 ) VAR_627 , sizeof ( TYPE_59 ) ) ; if ( VAR_628 != VAR_629 ) { METHOD_77 ( VAR_630 , VAR_631 , 0 , 0 , ""WRMtoBCM_GPIO_OUTPUT_CLR_REGFailed."" ) ; return VAR_632 ; } } if ( VAR_633 [ VAR_634 ] . VAR_635 ) { VAR_636 = METHOD_78 ( VAR_637 , ( TYPE_60 ) VAR_638 , ( TYPE_61 ) VAR_639 , sizeof ( TYPE_62 ) ) ; if ( VAR_640 < 0 ) { VAR_641 = VAR_642 ; METHOD_79 ( VAR_643 , VAR_644 , 0 , 0 , ""RDMtoGPIO_PIN_STATE_REGISTERFailed."" ) ; return VAR_645 ; } else { VAR_646 = VAR_647 ; } VAR_648 [ VAR_649 ] . VAR_650 = ( * ( TYPE_63 * ) VAR_651 & VAR_652 [ VAR_653 ] . VAR_654 ) ; } VAR_655 = METHOD_80 ( VAR_656 . VAR_657 , & VAR_658 , VAR_659 . VAR_660 ) ; if ( VAR_661 ) { METHOD_81 ( VAR_662 , VAR_663 , 0 , 0 , ""FailedwhilecopyingContenttoIOBuferforuserspaceerr:%d"" , VAR_664 ) ; return - VAR_665 ; } } break ; case VAR_666 : { TYPE_64 VAR_667 [ 4 ] ; struct STRUCT_OR_UNION_23 VAR_668 [ VAR_669 ] ; struct STRUCT_OR_UNION_24 * VAR_670 = ( struct STRUCT_OR_UNION_25 * ) VAR_671 ; if ( ( VAR_672 -> VAR_673 == VAR_674 ) || ( VAR_675 -> VAR_676 == VAR_677 ) || ( VAR_678 -> VAR_679 == VAR_680 ) ) return - VAR_681 ; if ( METHOD_82 ( & VAR_682 , VAR_683 , sizeof ( struct STRUCT_OR_UNION_26 ) ) ) return - VAR_684 ; if ( VAR_685 . VAR_686 > sizeof ( VAR_687 ) ) return - VAR_688 ; if ( METHOD_83 ( & VAR_689 , VAR_690 . VAR_691 , VAR_692 . VAR_693 ) ) return - VAR_694 ; VAR_695 = METHOD_84 ( VAR_696 , ( TYPE_65 ) VAR_697 , ( TYPE_66 ) VAR_698 , sizeof ( TYPE_67 ) ) ; if ( VAR_699 < 0 ) { VAR_700 = VAR_701 ; METHOD_85 ( VAR_702 , VAR_703 , 0 , 0 , ""ReadofGPIO_MODE_REGISTERfailed"" ) ; return VAR_704 ; } else { VAR_705 = VAR_706 ; } if ( METHOD_86 ( VAR_707 , VAR_708 [ VAR_709 ] . VAR_710 ) == VAR_711 ) { METHOD_87 ( VAR_712 , VAR_713 , VAR_714 , VAR_715 , ""Sorry,RequestedGPIO<0x%X>isnotcorrespondtoNVMLEDbitmap<0x%X>!!!"" , VAR_716 [ VAR_717 ] . VAR_718 , VAR_719 -> VAR_720 ) ; VAR_721 = - VAR_722 ; break ; } if ( VAR_723 [ VAR_724 ] . VAR_725 ) { * ( TYPE_68 * ) VAR_726 |= ( VAR_727 [ VAR_728 ] . VAR_729 & VAR_730 [ VAR_731 ] . VAR_732 ) ; * ( TYPE_69 * ) VAR_733 &= ~ ( ( ~ VAR_734 [ VAR_735 ] . VAR_736 ) & VAR_737 [ VAR_738 ] . VAR_739 ) ; VAR_740 [ VAR_741 ] . VAR_742 = * ( TYPE_70 * ) VAR_743 ; VAR_744 = METHOD_88 ( VAR_745 , VAR_746 , ( TYPE_71 ) VAR_747 , sizeof ( TYPE_72 ) ) ; if ( VAR_748 == VAR_749 ) { METHOD_89 ( VAR_750 , VAR_751 , VAR_752 , VAR_753 , ""WRMtoGPIO_MODE_REGISTERDone"" ) ; } else { METHOD_90 ( VAR_754 , VAR_755 , 0 , 0 , ""WRMtoGPIO_MODE_REGISTERFailed"" ) ; VAR_756 = - VAR_757 ; break ; } } else { VAR_758 [ VAR_759 ] . VAR_760 = * ( TYPE_73 * ) VAR_761 ; } VAR_762 = METHOD_91 ( VAR_763 . VAR_764 , & VAR_765 , VAR_766 . VAR_767 ) ; if ( VAR_768 ) { METHOD_92 ( VAR_769 , VAR_770 , 0 , 0 , ""FailedwhilecopyingContenttoIOBuferforuserspaceerr:%d"" , VAR_771 ) ; return - VAR_772 ; } } break ; case VAR_773 : case VAR_774 : case VAR_775 : case VAR_776 : case VAR_777 : case VAR_778 : { TYPE_74 VAR_779 = VAR_780 ; if ( METHOD_93 ( & VAR_781 , VAR_782 , sizeof ( struct STRUCT_OR_UNION_27 ) ) ) return - VAR_783 ; if ( VAR_784 . VAR_785 < sizeof ( struct STRUCT_OR_UNION_28 ) ) return - VAR_786 ; if ( VAR_787 . VAR_788 > VAR_789 ) return - VAR_790 ; VAR_791 = METHOD_94 ( VAR_792 . VAR_793 , VAR_794 . VAR_795 ) ; if ( METHOD_95 ( VAR_796 ) ) return METHOD_96 ( VAR_797 ) ; METHOD_97 ( & VAR_798 -> VAR_799 ) ; VAR_800 = METHOD_98 ( VAR_801 -> VAR_802 , ! VAR_803 -> VAR_804 , ( 1 * VAR_805 ) ) ; if ( VAR_806 == - VAR_807 ) goto VAR_808 ; if ( VAR_809 -> VAR_810 ) { METHOD_99 ( VAR_811 , VAR_812 , VAR_813 , VAR_814 , ""PreparingIdleModeisstillTrue-HenceRejectingcontrolmessage\\n"" ) ; VAR_815 = VAR_816 ; goto VAR_817 ; } VAR_818 = METHOD_100 ( VAR_819 , ( TYPE_75 ) VAR_820 ) ; VAR_821 : METHOD_101 ( & VAR_822 -> VAR_823 ) ; METHOD_102 ( VAR_824 ) ; break ; } case VAR_825 : { if ( METHOD_103 ( & VAR_826 -> VAR_827 ) ) { METHOD_104 ( VAR_828 , VAR_829 , VAR_830 , VAR_831 , ""IOCTL_BCM_CHIP_RESETnotallowedasEEPROMRead/Writeisinprogress\\n"" ) ; return - VAR_832 ; } METHOD_105 ( VAR_833 , VAR_834 , 0 , 0 , ""StartingthefirmwaredownloadPID=0x%x!!!!\\n"" , VAR_835 -> VAR_836 ) ; if ( METHOD_106 ( & VAR_837 -> VAR_838 ) ) return - VAR_839 ; VAR_840 -> VAR_841 = VAR_842 ; VAR_843 -> VAR_844 = VAR_845 -> VAR_846 ; VAR_847 -> VAR_848 = VAR_849 ; VAR_850 -> VAR_851 = VAR_852 ; METHOD_107 ( VAR_853 -> VAR_854 ) ; METHOD_108 ( VAR_855 -> VAR_856 ) ; VAR_857 = METHOD_109 ( VAR_858 ) ; if ( VAR_859 ) { pr_err ( PFX ""%s:reset_card_procFailed!\\n"" , VAR_860 -> VAR_861 -> VAR_862 ) ; METHOD_110 ( & VAR_863 -> VAR_864 ) ; METHOD_111 ( & VAR_865 -> VAR_866 ) ; return VAR_867 ; } METHOD_112 ( 10 ) ; METHOD_113 ( & VAR_868 -> VAR_869 ) ; return VAR_870 ; } case VAR_871 : { struct STRUCT_OR_UNION_29 * VAR_872 = VAR_873 ; METHOD_114 ( VAR_874 , VAR_875 , 0 , 0 , ""StartingthefirmwaredownloadPID=0x%x!!!!\\n"" , VAR_876 -> VAR_877 ) ; if ( ! METHOD_115 ( & VAR_878 -> VAR_879 ) ) { METHOD_116 ( VAR_880 , VAR_881 , 0 , 0 , ""Invalidwaytodownloadbuffer.UseStartandthencallthis!!!\\n"" ) ; METHOD_117 ( & VAR_882 -> VAR_883 ) ; VAR_884 = - VAR_885 ; return VAR_886 ; } if ( METHOD_118 ( & VAR_887 , VAR_888 , sizeof ( struct STRUCT_OR_UNION_30 ) ) ) { METHOD_119 ( & VAR_889 -> VAR_890 ) ; return - VAR_891 ; } METHOD_120 ( VAR_892 , VAR_893 , 0 , 0 , ""LengthforFWDLDis:%lx\\n"" , VAR_894 . VAR_895 ) ; if ( VAR_896 . VAR_897 > sizeof ( struct STRUCT_OR_UNION_31 ) ) { METHOD_121 ( & VAR_898 -> VAR_899 ) ; return - VAR_900 ; } VAR_901 = METHOD_122 ( sizeof ( * VAR_902 ) , VAR_903 ) ; if ( ! VAR_904 ) { METHOD_123 ( & VAR_905 -> VAR_906 ) ; return - VAR_907 ; } if ( METHOD_124 ( VAR_908 , VAR_909 . VAR_910 , VAR_911 . VAR_912 ) ) { METHOD_125 ( & VAR_913 -> VAR_914 ) ; METHOD_126 ( VAR_915 ) ; return - VAR_916 ; } if ( ! VAR_917 -> VAR_918 || ( VAR_919 -> VAR_920 == 0 ) ) { METHOD_127 ( VAR_921 , VAR_922 , 0 , 0 , ""Somethingelseiswrong%lu\\n"" , VAR_923 -> VAR_924 ) ; METHOD_128 ( & VAR_925 -> VAR_926 ) ; METHOD_129 ( VAR_927 ) ; VAR_928 = - VAR_929 ; return VAR_930 ; } VAR_931 = METHOD_130 ( VAR_932 , VAR_933 ) ; if ( VAR_934 != VAR_935 ) { if ( VAR_936 -> VAR_937 == VAR_938 ) METHOD_131 ( VAR_939 , VAR_940 , 0 , 0 , ""IOCTL:ConfigurationFileUploadFailed\\n"" ) ; else METHOD_132 ( VAR_941 , VAR_942 , 0 , 0 , ""IOCTL:FirmwareFileUploadFailed\\n"" ) ; if ( VAR_943 -> VAR_944 . VAR_945 & VAR_946 ) { VAR_947 -> VAR_948 = VAR_949 ; VAR_950 -> VAR_951 . VAR_952 = VAR_953 ; METHOD_133 ( & VAR_954 -> VAR_955 . VAR_956 ) ; } } if ( VAR_957 != VAR_958 ) METHOD_134 ( & VAR_959 -> VAR_960 ) ; METHOD_135 ( VAR_961 , VAR_962 , VAR_963 , VAR_964 , ""IOCTL:FirmwareFileUploaded\\n"" ) ; METHOD_136 ( VAR_965 ) ; return VAR_966 ; } case VAR_967 : { if ( ! METHOD_137 ( & VAR_968 -> VAR_969 ) ) { METHOD_138 ( & VAR_970 -> VAR_971 ) ; return - VAR_972 ; } if ( METHOD_139 ( & VAR_973 -> VAR_974 ) ) { METHOD_140 ( VAR_975 , VAR_976 , 0 , 0 , ""FWdownloadblockedasEEPROMRead/Writeisinprogress\\n"" ) ; METHOD_141 ( & VAR_977 -> VAR_978 ) ; return - VAR_979 ; } VAR_980 -> VAR_981 = VAR_982 ; VAR_983 -> VAR_984 = VAR_985 ; METHOD_142 ( & VAR_986 -> VAR_987 , 0 ) ; VAR_988 -> VAR_989 = 0 ; VAR_990 -> VAR_991 = 0 ; VAR_992 = METHOD_143 ( VAR_993 ) ; if ( VAR_994 ) { METHOD_144 ( VAR_995 , VAR_996 , 0 , 0 , ""FirmDownloadFailed\\n"" ) ; METHOD_145 ( & VAR_997 -> VAR_998 ) ; METHOD_146 ( & VAR_999 -> VAR_1000 ) ; return VAR_1001 ; } else { METHOD_147 ( VAR_1002 , VAR_1003 , VAR_1004 , VAR_1005 , ""FirmDownloadOver...\\n"" ) ; } METHOD_148 ( 10 ) ; if ( METHOD_149 ( ( struct STRUCT_OR_UNION_32 * ) VAR_1006 -> VAR_1007 ) ) METHOD_150 ( VAR_1008 , VAR_1009 , 0 , 0 , ""Unabletosendinterrupt...\\n"" ) ; VAR_1010 = 5 * VAR_1011 ; VAR_1012 -> VAR_1013 = VAR_1014 ; METHOD_151 ( VAR_1015 -> VAR_1016 , VAR_1017 -> VAR_1018 , VAR_1019 ) ; VAR_1020 -> VAR_1021 = VAR_1022 ; VAR_1023 -> VAR_1024 = VAR_1025 ; METHOD_152 ( & VAR_1026 -> VAR_1027 , 0 ) ; VAR_1028 -> VAR_1029 = 0 ; VAR_1030 -> VAR_1031 = 0 ; METHOD_153 ( & VAR_1032 -> VAR_1033 , 0 ) ; VAR_1034 -> VAR_1035 = 0 ; VAR_1036 -> VAR_1037 = 0 ; if ( VAR_1038 -> VAR_1039 . VAR_1040 & VAR_1041 ) { VAR_1042 -> VAR_1043 = VAR_1044 ; METHOD_154 ( & VAR_1045 -> VAR_1046 . VAR_1047 ) ; } if ( ! VAR_1048 ) VAR_1049 = - VAR_1050 ; METHOD_155 ( & VAR_1051 -> VAR_1052 ) ; METHOD_156 ( & VAR_1053 -> VAR_1054 ) ; return VAR_1055 ; } case VAR_1056 : VAR_1057 = 0 ; if ( METHOD_157 ( VAR_1058 -> VAR_1059 , ( unsigned TYPE_76 TYPE_77 * ) VAR_1060 ) ) VAR_1061 = - VAR_1062 ; break ; case VAR_1063 : VAR_1064 = 0 ; if ( METHOD_158 ( VAR_1065 -> VAR_1066 , ( unsigned TYPE_78 TYPE_79 * ) VAR_1067 ) ) VAR_1068 = - VAR_1069 ; break ; case VAR_1070 : { TYPE_80 VAR_1071 = METHOD_159 ( & VAR_1072 -> VAR_1073 ) ; if ( VAR_1074 ) { METHOD_160 ( VAR_1075 , VAR_1076 , 0 , 0 , ""IOCTL_BCM_CHIP_RESETnotallowedasEEPROMRead/Writeisinprogress\\n"" ) ; return - VAR_1077 ; } METHOD_161 ( & VAR_1078 -> VAR_1079 ) ; VAR_1080 = METHOD_162 ( VAR_1081 ) ; METHOD_163 ( ) ; METHOD_164 ( & VAR_1082 -> VAR_1083 ) ; METHOD_165 ( & VAR_1084 -> VAR_1085 ) ; METHOD_166 ( VAR_1086 ) ; break ; } case VAR_1087 : { TYPE_81 VAR_1088 ; VAR_1089 = 0 ; for ( VAR_1090 = 0 ; VAR_1091 < VAR_1092 ; VAR_1093 ++ ) { if ( METHOD_167 ( VAR_1094 -> VAR_1095 [ VAR_1096 ] . VAR_1097 , ( unsigned TYPE_82 TYPE_83 * ) VAR_1098 ) ) { VAR_1099 = - VAR_1100 ; break ; } } break ; } case VAR_1101 : METHOD_168 ( VAR_1102 ) ; METHOD_169 ( & VAR_1103 -> VAR_1104 ) ; VAR_1105 = VAR_1106 ; break ; case VAR_1107 : if ( METHOD_170 ( VAR_1108 , & VAR_1109 -> VAR_1110 , sizeof ( struct STRUCT_OR_UNION_33 ) * VAR_1111 ) ) return - VAR_1112 ; VAR_1113 = VAR_1114 ; break ; case VAR_1115 : { TYPE_84 VAR_1116 = 0 ; if ( METHOD_171 ( & VAR_1117 , VAR_1118 , sizeof ( TYPE_85 ) ) ) return - VAR_1119 ; if ( VAR_1120 ) { METHOD_172 ( VAR_1121 , VAR_1122 , VAR_1123 , VAR_1124 , ""IOCTL_BCM_SWITCH_TRANSFER_MODE:ETH_PACKET_TUNNELING_MODE\\n"" ) ; VAR_1125 -> VAR_1126 = VAR_1127 ; } else { METHOD_173 ( VAR_1128 , VAR_1129 , VAR_1130 , VAR_1131 , ""IOCTL_BCM_SWITCH_TRANSFER_MODE:IP_PACKET_ONLY_MODE\\n"" ) ; VAR_1132 -> VAR_1133 = VAR_1134 ; } VAR_1135 = VAR_1136 ; break ; } case VAR_1137 : { TYPE_86 VAR_1138 ; if ( METHOD_174 ( & VAR_1139 , VAR_1140 , sizeof ( struct STRUCT_OR_UNION_34 ) ) ) return - VAR_1141 ; VAR_1142 = METHOD_175 ( TYPE_87 , VAR_1143 . VAR_1144 , METHOD_176 ( VAR_1145 ) + 1 ) ; if ( METHOD_177 ( VAR_1146 . VAR_1147 , VAR_1148 , VAR_1149 ) ) return - VAR_1150 ; VAR_1151 = VAR_1152 ; break ; } case VAR_1153 : { struct STRUCT_OR_UNION_35 VAR_1154 ; if ( METHOD_178 ( & VAR_1155 , VAR_1156 , sizeof ( struct STRUCT_OR_UNION_36 ) ) ) { METHOD_179 ( VAR_1157 , VAR_1158 , 0 , 0 , ""copy_from_userfailed..\\n"" ) ; return - VAR_1159 ; } if ( VAR_1160 . VAR_1161 != sizeof ( VAR_1162 ) ) { VAR_1163 = - VAR_1164 ; break ; } METHOD_180 ( & VAR_1165 , 0 , sizeof ( VAR_1166 ) ) ; VAR_1167 . VAR_1168 = VAR_1169 -> VAR_1170 ; VAR_1171 . VAR_1172 = VAR_1173 -> VAR_1174 ; VAR_1175 . VAR_1176 = VAR_1177 -> VAR_1178 ; if ( METHOD_181 ( VAR_1179 . VAR_1180 , & VAR_1181 , METHOD_182 ( VAR_1182 , sizeof ( VAR_1183 ) , VAR_1184 . VAR_1185 ) ) ) { METHOD_183 ( VAR_1186 , VAR_1187 , 0 , 0 , ""Copy_to_userFailed..\\n"" ) ; return - VAR_1188 ; } VAR_1189 = VAR_1190 ; break ; } case VAR_1191 : { TYPE_88 VAR_1192 ; if ( METHOD_184 ( & VAR_1193 , VAR_1194 , sizeof ( struct STRUCT_OR_UNION_37 ) ) ) return - VAR_1195 ; if ( METHOD_185 ( & VAR_1196 , VAR_1197 . VAR_1198 , sizeof ( TYPE_89 ) ) ) return - VAR_1199 ; if ( VAR_1200 ) VAR_1201 -> VAR_1202 -> VAR_1203 = VAR_1204 ; else VAR_1205 -> VAR_1206 -> VAR_1207 = VAR_1208 ; break ; } case VAR_1209 : { TYPE_90 VAR_1210 = 0 ; if ( METHOD_186 ( & VAR_1211 , VAR_1212 , sizeof ( struct STRUCT_OR_UNION_38 ) ) ) return - VAR_1213 ; if ( VAR_1214 . VAR_1215 < sizeof ( struct STRUCT_OR_UNION_39 ) ) { METHOD_187 ( VAR_1216 , VAR_1217 , 0 , 0 , ""Mismatchreq:%lxneededis=0x%zx!!!"" , VAR_1218 . VAR_1219 , sizeof ( struct STRUCT_OR_UNION_40 ) ) ; return - VAR_1220 ; } if ( METHOD_188 ( & VAR_1221 , VAR_1222 . VAR_1223 , sizeof ( VAR_1224 ) ) ) return - VAR_1225 ; METHOD_189 ( VAR_1226 , VAR_1227 , VAR_1228 , VAR_1229 , ""GetDSXDataSFIDis=%lx\\n"" , VAR_1230 ) ; METHOD_190 ( VAR_1231 , VAR_1232 , VAR_1233 . VAR_1234 ) ; VAR_1235 = VAR_1236 ; } break ; case VAR_1237 : { TYPE_91 VAR_1238 ; if ( METHOD_191 ( & VAR_1239 , VAR_1240 , sizeof ( struct STRUCT_OR_UNION_41 ) ) ) return - VAR_1241 ; if ( VAR_1242 . VAR_1243 != sizeof ( struct STRUCT_OR_UNION_42 ) ) { METHOD_192 ( VAR_1244 , VAR_1245 , 0 , 0 , ""LengthCheckfailed%lu%zd\\n"" , VAR_1246 . VAR_1247 , sizeof ( struct STRUCT_OR_UNION_43 ) ) ; return - VAR_1248 ; } VAR_1249 = METHOD_193 ( sizeof ( struct STRUCT_OR_UNION_44 ) , VAR_1250 ) ; if ( ! VAR_1251 ) return VAR_1252 ; VAR_1253 = METHOD_194 ( VAR_1254 , VAR_1255 ) ; METHOD_195 ( VAR_1256 , VAR_1257 ) ; if ( VAR_1258 != VAR_1259 ) if ( METHOD_196 ( VAR_1260 . VAR_1261 , VAR_1262 , sizeof ( struct STRUCT_OR_UNION_45 ) ) ) { METHOD_197 ( VAR_1263 ) ; return - VAR_1264 ; } METHOD_198 ( VAR_1265 ) ; break ; } case VAR_1266 : if ( ( VAR_1267 == VAR_1268 -> VAR_1269 ) && ( VAR_1270 == VAR_1271 -> VAR_1272 ) ) { VAR_1273 -> VAR_1274 = VAR_1275 ; VAR_1276 -> VAR_1277 = VAR_1278 ; METHOD_199 ( & VAR_1279 -> VAR_1280 ) ; } VAR_1281 = VAR_1282 ; break ; case VAR_1283 : { struct STRUCT_OR_UNION_46 * VAR_1284 ; TYPE_92 VAR_1285 = 0 ; TYPE_93 VAR_1286 = VAR_1287 ; if ( ( VAR_1288 -> VAR_1289 == VAR_1290 ) || ( VAR_1291 -> VAR_1292 == VAR_1293 ) || ( VAR_1294 -> VAR_1295 == VAR_1296 ) ) { METHOD_200 ( VAR_1297 , VAR_1298 , 0 , 0 , ""DeviceinIdle/ShutdownMode,BlockingWrms\\n"" ) ; VAR_1299 = - VAR_1300 ; break ; } if ( METHOD_201 ( & VAR_1301 , VAR_1302 , sizeof ( struct STRUCT_OR_UNION_47 ) ) ) return - VAR_1303 ; if ( VAR_1304 . VAR_1305 < sizeof ( TYPE_94 ) * 2 ) return - VAR_1306 ; VAR_1307 = METHOD_202 ( VAR_1308 . VAR_1309 , VAR_1310 . VAR_1311 ) ; if ( METHOD_203 ( VAR_1312 ) ) return METHOD_204 ( VAR_1313 ) ; VAR_1314 = ( struct STRUCT_OR_UNION_48 * ) VAR_1315 ; if ( ( ( TYPE_95 ) VAR_1316 -> VAR_1317 & 0x0F000000 ) != 0x0F000000 || ( ( TYPE_96 ) VAR_1318 -> VAR_1319 & 0x3 ) ) { METHOD_205 ( VAR_1320 , VAR_1321 , 0 , 0 , ""WRMDoneOninvalidAddress:%xAccessDenied.\\n"" , ( TYPE_97 ) VAR_1322 -> VAR_1323 ) ; METHOD_206 ( VAR_1324 ) ; VAR_1325 = - VAR_1326 ; break ; } VAR_1327 = VAR_1328 -> VAR_1329 & VAR_1330 ; if ( ! ( ( VAR_1331 -> VAR_1332 -> VAR_1333 ) & VAR_1334 ) && ( ( VAR_1335 == VAR_1336 ) || ( VAR_1337 == VAR_1338 ) || ( VAR_1339 == VAR_1340 ) || ( VAR_1341 == VAR_1342 ) ) && ( VAR_1343 == VAR_1344 ) ) { METHOD_207 ( VAR_1345 ) ; METHOD_208 ( VAR_1346 , VAR_1347 , 0 , 0 , ""EEPROMAccessDenied,notinVSGMode\\n"" ) ; VAR_1348 = - VAR_1349 ; break ; } if ( VAR_1350 -> VAR_1351 == VAR_1352 ) VAR_1353 = METHOD_209 ( VAR_1354 , ( TYPE_98 ) VAR_1355 -> VAR_1356 , ( TYPE_99 ) VAR_1357 -> VAR_1358 , VAR_1359 . VAR_1360 - 2 * sizeof ( TYPE_100 ) ) ; else VAR_1361 = METHOD_210 ( VAR_1362 , ( TYPE_101 ) VAR_1363 -> VAR_1364 , ( TYPE_102 ) VAR_1365 -> VAR_1366 , VAR_1367 . VAR_1368 - 2 * sizeof ( TYPE_103 ) ) ; if ( VAR_1369 != VAR_1370 ) METHOD_211 ( VAR_1371 , VAR_1372 , 0 , 0 , ""WRMFailed\\n"" ) ; METHOD_212 ( VAR_1373 ) ; break ; } case VAR_1374 : if ( METHOD_213 ( & VAR_1375 , VAR_1376 , sizeof ( struct STRUCT_OR_UNION_49 ) ) ) return - VAR_1377 ; if ( VAR_1378 -> VAR_1379 == VAR_1380 || VAR_1381 -> VAR_1382 == VAR_1383 ) { if ( METHOD_214 ( VAR_1384 . VAR_1385 , & VAR_1386 -> VAR_1387 , sizeof ( TYPE_104 ) ) ) return - VAR_1388 ; } VAR_1389 = VAR_1390 ; break ; case VAR_1391 : { TYPE_105 VAR_1392 = 0 ; if ( VAR_1393 -> VAR_1394 == VAR_1395 ) { if ( METHOD_215 ( & VAR_1396 , VAR_1397 , sizeof ( struct STRUCT_OR_UNION_50 ) ) ) return - VAR_1398 ; if ( METHOD_216 ( & VAR_1399 , VAR_1400 . VAR_1401 , sizeof ( TYPE_106 ) ) ) return - VAR_1402 ; if ( ( VAR_1403 < VAR_1404 ) || ( VAR_1405 > VAR_1406 ) ) { if ( METHOD_217 ( VAR_1407 . VAR_1408 , & VAR_1409 -> VAR_1410 , sizeof ( TYPE_107 ) ) ) return - VAR_1411 ; } else { if ( METHOD_218 ( VAR_1412 ) ) { if ( METHOD_219 ( VAR_1413 . VAR_1414 , & VAR_1415 -> VAR_1416 , sizeof ( TYPE_108 ) ) ) return - VAR_1417 ; } else { if ( ( VAR_1418 == VAR_1419 -> VAR_1420 ) || ( VAR_1421 == VAR_1422 -> VAR_1423 ) ) { METHOD_220 ( VAR_1424 , VAR_1425 , 0 , 0 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; return - VAR_1426 ; } VAR_1427 -> VAR_1428 = VAR_1429 ; METHOD_221 ( VAR_1430 , VAR_1431 -> VAR_1432 ) ; } } VAR_1433 = VAR_1434 ; } else { VAR_1435 = VAR_1436 ; } } break ; case VAR_1437 : TYPE_109 VAR_1438 { struct STRUCT_OR_UNION_51 VAR_1439 ; METHOD_222 ( VAR_1440 , VAR_1441 , VAR_1442 , VAR_1443 , ""InSET_DEBUGioctl\\n"" ) ; if ( METHOD_223 ( & VAR_1444 , VAR_1445 , sizeof ( struct STRUCT_OR_UNION_52 ) ) ) return - VAR_1446 ; if ( METHOD_224 ( & VAR_1447 , VAR_1448 . VAR_1449 , sizeof ( struct STRUCT_OR_UNION_53 ) ) ) return - VAR_1450 ; METHOD_225 ( VAR_1451 , VAR_1452 , 0 , 0 , ""IOCTL_BCM_SET_DEBUG:OnOff=%dType=0x%x"" , VAR_1453 . VAR_1454 , VAR_1455 . VAR_1456 ) ; VAR_1457 . VAR_1458 = 1 << VAR_1459 . VAR_1460 ; METHOD_226 ( VAR_1461 , VAR_1462 , 0 , 0 , ""actualSubtype=0x%x\\n"" , VAR_1463 . VAR_1464 ) ; VAR_1465 -> VAR_1466 . VAR_1467 |= VAR_1468 . VAR_1469 ; if ( VAR_1470 . VAR_1471 ) VAR_1472 -> VAR_1473 . VAR_1474 [ VAR_1475 . VAR_1476 ] |= VAR_1477 . VAR_1478 ; else VAR_1479 -> VAR_1480 . VAR_1481 [ VAR_1482 . VAR_1483 ] &= ~ VAR_1484 . VAR_1485 ; METHOD_227 ( VAR_1486 ) ; } break ; case VAR_1487 : case VAR_1488 : { struct STRUCT_OR_UNION_54 VAR_1489 ; TYPE_110 VAR_1490 = VAR_1491 ; TYPE_111 VAR_1492 = 0 ; struct STRUCT_OR_UNION_55 VAR_1493 , VAR_1494 ; METHOD_228 ( & VAR_1495 , 0 , sizeof ( struct STRUCT_OR_UNION_56 ) ) ; METHOD_229 ( & VAR_1496 , 0 , sizeof ( struct STRUCT_OR_UNION_57 ) ) ; if ( ( VAR_1497 -> VAR_1498 == VAR_1499 ) && ( VAR_1500 -> VAR_1501 == 0 ) ) { METHOD_230 ( VAR_1502 , VAR_1503 , 0 , 0 , ""TheFlashControlSectionisCorrupted.HenceRejectiononNVMRead/Write\\n"" ) ; return - VAR_1504 ; } if ( METHOD_231 ( VAR_1505 ) ) { if ( ( VAR_1506 -> VAR_1507 != VAR_1508 ) && ( VAR_1509 -> VAR_1510 != VAR_1511 ) && ( VAR_1512 -> VAR_1513 != VAR_1514 ) ) { METHOD_232 ( VAR_1515 , VAR_1516 , 0 , 0 , ""NoDSDisactive..henceNVMCommandisblocked"" ) ; return VAR_1517 ; } } if ( METHOD_233 ( & VAR_1518 , VAR_1519 , sizeof ( struct STRUCT_OR_UNION_58 ) ) ) return - VAR_1520 ; if ( METHOD_234 ( & VAR_1521 , ( VAR_1522 == VAR_1523 ) ? VAR_1524 . VAR_1525 : VAR_1526 . VAR_1527 , sizeof ( struct STRUCT_OR_UNION_59 ) ) ) return - VAR_1528 ; if ( VAR_1529 . VAR_1530 > VAR_1531 -> VAR_1532 ) return VAR_1533 ; if ( VAR_1534 . VAR_1535 > VAR_1536 -> VAR_1537 - VAR_1538 . VAR_1539 ) { return VAR_1540 ; } VAR_1541 = METHOD_235 ( VAR_1542 . VAR_1543 , VAR_1544 . VAR_1545 ) ; if ( METHOD_236 ( VAR_1546 ) ) return METHOD_237 ( VAR_1547 ) ; METHOD_238 ( & VAR_1548 ) ; if ( VAR_1549 == VAR_1550 ) { METHOD_239 ( & VAR_1551 -> VAR_1552 ) ; if ( ( VAR_1553 -> VAR_1554 == VAR_1555 ) || ( VAR_1556 -> VAR_1557 == VAR_1558 ) || ( VAR_1559 -> VAR_1560 == VAR_1561 ) ) { METHOD_240 ( VAR_1562 , VAR_1563 , VAR_1564 , VAR_1565 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_241 ( & VAR_1566 -> VAR_1567 ) ; METHOD_242 ( VAR_1568 ) ; return - VAR_1569 ; } VAR_1570 = METHOD_243 ( VAR_1571 , ( TYPE_112 ) VAR_1572 , VAR_1573 . VAR_1574 , VAR_1575 . VAR_1576 ) ; METHOD_244 ( & VAR_1577 -> VAR_1578 ) ; if ( VAR_1579 != VAR_1580 ) { METHOD_245 ( VAR_1581 ) ; return VAR_1582 ; } if ( METHOD_246 ( VAR_1583 . VAR_1584 , VAR_1585 , VAR_1586 . VAR_1587 ) ) { METHOD_247 ( VAR_1588 ) ; return - VAR_1589 ; } } else { METHOD_248 ( & VAR_1590 -> VAR_1591 ) ; if ( ( VAR_1592 -> VAR_1593 == VAR_1594 ) || ( VAR_1595 -> VAR_1596 == VAR_1597 ) || ( VAR_1598 -> VAR_1599 == VAR_1600 ) ) { METHOD_249 ( VAR_1601 , VAR_1602 , VAR_1603 , VAR_1604 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_250 ( & VAR_1605 -> VAR_1606 ) ; METHOD_251 ( VAR_1607 ) ; return - VAR_1608 ; } VAR_1609 -> VAR_1610 = VAR_1611 ; if ( METHOD_252 ( VAR_1612 ) ) { VAR_1613 = METHOD_253 ( VAR_1614 , VAR_1615 -> VAR_1616 ) ; if ( VAR_1617 != VAR_1618 ) { if ( ( ( VAR_1619 . VAR_1620 + VAR_1621 . VAR_1622 ) != VAR_1623 -> VAR_1624 ) || ( VAR_1625 . VAR_1626 < VAR_1627 ) ) { METHOD_254 ( VAR_1628 , VAR_1629 , VAR_1630 , VAR_1631 , ""DSDSigispresentneitherinFlashnorUserprovidedInput.."" ) ; METHOD_255 ( & VAR_1632 -> VAR_1633 ) ; METHOD_256 ( VAR_1634 ) ; return VAR_1635 ; } VAR_1636 = METHOD_257 ( * ( TYPE_113 ) ( VAR_1637 + VAR_1638 . VAR_1639 - VAR_1640 ) ) ; if ( VAR_1641 != VAR_1642 ) { METHOD_258 ( VAR_1643 , VAR_1644 , VAR_1645 , VAR_1646 , ""DSDSigispresentneitherinFlashnorUserprovidedInput.."" ) ; METHOD_259 ( & VAR_1647 -> VAR_1648 ) ; METHOD_260 ( VAR_1649 ) ; return VAR_1650 ; } } } VAR_1651 = METHOD_261 ( VAR_1652 , ( TYPE_114 ) VAR_1653 , VAR_1654 . VAR_1655 , VAR_1656 . VAR_1657 , VAR_1658 . VAR_1659 ) ; if ( METHOD_262 ( VAR_1660 ) ) METHOD_263 ( VAR_1661 , VAR_1662 -> VAR_1663 ) ; VAR_1664 -> VAR_1665 = VAR_1666 ; METHOD_264 ( & VAR_1667 -> VAR_1668 ) ; if ( VAR_1669 != VAR_1670 ) { METHOD_265 ( VAR_1671 ) ; return VAR_1672 ; } } METHOD_266 ( & VAR_1673 ) ; METHOD_267 ( VAR_1674 , VAR_1675 , VAR_1676 , VAR_1677 , ""timetakenbyWrite/read:%ldmsec\\n"" , ( VAR_1678 . VAR_1679 - VAR_1680 . VAR_1681 ) * 1000 + ( VAR_1682 . VAR_1683 - VAR_1684 . VAR_1685 ) / 1000 ) ; METHOD_268 ( VAR_1686 ) ; return VAR_1687 ; } case VAR_1688 : { struct STRUCT_OR_UNION_60 VAR_1689 = { 0 } ; TYPE_115 VAR_1690 = VAR_1691 ; TYPE_116 VAR_1692 = 0 ; TYPE_117 VAR_1693 = 0 ; TYPE_118 VAR_1694 = 0 ; TYPE_119 VAR_1695 = 0 ; TYPE_120 TYPE_121 * VAR_1696 ; if ( METHOD_269 ( VAR_1697 ) != VAR_1698 ) { METHOD_270 ( VAR_1699 , VAR_1700 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_1701 ; } METHOD_271 ( VAR_1702 , VAR_1703 , VAR_1704 , VAR_1705 , ""IOCTL_BCM_FLASH2X_SECTION_READCalled"" ) ; if ( METHOD_272 ( & VAR_1706 , VAR_1707 , sizeof ( struct STRUCT_OR_UNION_61 ) ) ) return - VAR_1708 ; if ( METHOD_273 ( & VAR_1709 , VAR_1710 . VAR_1711 , sizeof ( struct STRUCT_OR_UNION_62 ) ) ) return - VAR_1712 ; METHOD_274 ( VAR_1713 , VAR_1714 , VAR_1715 , VAR_1716 , ""\\nsFlash2xRead.Section:%x"" , VAR_1717 . VAR_1718 ) ; METHOD_275 ( VAR_1719 , VAR_1720 , VAR_1721 , VAR_1722 , ""\\nsFlash2xRead.offset:%x"" , VAR_1723 . VAR_1724 ) ; METHOD_276 ( VAR_1725 , VAR_1726 , VAR_1727 , VAR_1728 , ""\\nsFlash2xRead.numOfBytes:%x"" , VAR_1729 . VAR_1730 ) ; METHOD_277 ( VAR_1731 , VAR_1732 , VAR_1733 , VAR_1734 , ""\\nsFlash2xRead.bVerify:%x\\n"" , VAR_1735 . VAR_1736 ) ; if ( METHOD_278 ( VAR_1737 , & VAR_1738 ) == VAR_1739 ) return VAR_1740 ; VAR_1741 = VAR_1742 . VAR_1743 ; if ( VAR_1744 > VAR_1745 -> VAR_1746 ) VAR_1747 = VAR_1748 -> VAR_1749 ; else VAR_1750 = VAR_1751 ; VAR_1752 = VAR_1753 . VAR_1754 ; VAR_1755 = VAR_1756 . VAR_1757 ; VAR_1758 = ( TYPE_122 ) METHOD_279 ( VAR_1759 , VAR_1760 ) ; if ( VAR_1761 == VAR_1762 ) { METHOD_280 ( VAR_1763 , VAR_1764 , 0 , 0 , ""MemoryallocationfailedforFlash2.xReadStructure"" ) ; return - VAR_1765 ; } METHOD_281 ( & VAR_1766 -> VAR_1767 ) ; if ( ( VAR_1768 -> VAR_1769 == VAR_1770 ) || ( VAR_1771 -> VAR_1772 == VAR_1773 ) || ( VAR_1774 -> VAR_1775 == VAR_1776 ) ) { METHOD_282 ( VAR_1777 , VAR_1778 , VAR_1779 , VAR_1780 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_283 ( & VAR_1781 -> VAR_1782 ) ; METHOD_284 ( VAR_1783 ) ; return - VAR_1784 ; } while ( VAR_1785 ) { if ( VAR_1786 > VAR_1787 -> VAR_1788 ) VAR_1789 = VAR_1790 -> VAR_1791 ; else VAR_1792 = VAR_1793 ; VAR_1794 = METHOD_285 ( VAR_1795 , ( TYPE_123 ) VAR_1796 , VAR_1797 . VAR_1798 , VAR_1799 , VAR_1800 ) ; if ( VAR_1801 ) { METHOD_286 ( VAR_1802 , VAR_1803 , VAR_1804 , VAR_1805 , ""Flash2xreaderrwithStatus:%d"" , VAR_1806 ) ; break ; } METHOD_287 ( VAR_1807 , VAR_1808 , VAR_1809 , VAR_1810 , VAR_1811 , VAR_1812 ) ; VAR_1813 = METHOD_288 ( VAR_1814 , VAR_1815 , VAR_1816 ) ; if ( VAR_1817 ) { METHOD_289 ( VAR_1818 , VAR_1819 , VAR_1820 , VAR_1821 , ""Copytousefailedwithstatus:%d"" , VAR_1822 ) ; METHOD_290 ( & VAR_1823 -> VAR_1824 ) ; METHOD_291 ( VAR_1825 ) ; return - VAR_1826 ; } VAR_1827 = VAR_1828 - VAR_1829 ; if ( VAR_1830 ) { VAR_1831 = VAR_1832 + VAR_1833 ; VAR_1834 = VAR_1835 + VAR_1836 ; } } METHOD_292 ( & VAR_1837 -> VAR_1838 ) ; METHOD_293 ( VAR_1839 ) ; } break ; case VAR_1840 : { struct STRUCT_OR_UNION_63 VAR_1841 = { 0 } ; TYPE_124 VAR_1842 ; TYPE_125 TYPE_126 * VAR_1843 ; TYPE_127 VAR_1844 = 0 ; TYPE_128 VAR_1845 = 0 ; TYPE_129 VAR_1846 = 0 ; TYPE_130 VAR_1847 = 0 ; if ( METHOD_294 ( VAR_1848 ) != VAR_1849 ) { METHOD_295 ( VAR_1850 , VAR_1851 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_1852 ; } VAR_1853 -> VAR_1854 = VAR_1855 ; METHOD_296 ( VAR_1856 , VAR_1857 , VAR_1858 , VAR_1859 , ""IOCTL_BCM_FLASH2X_SECTION_WRITECalled"" ) ; if ( METHOD_297 ( & VAR_1860 , VAR_1861 , sizeof ( struct STRUCT_OR_UNION_64 ) ) ) return - VAR_1862 ; if ( METHOD_298 ( & VAR_1863 , VAR_1864 . VAR_1865 , sizeof ( struct STRUCT_OR_UNION_65 ) ) ) return - VAR_1866 ; METHOD_299 ( VAR_1867 , VAR_1868 , VAR_1869 , VAR_1870 , ""\\nsFlash2xRead.Section:%x"" , VAR_1871 . VAR_1872 ) ; METHOD_300 ( VAR_1873 , VAR_1874 , VAR_1875 , VAR_1876 , ""\\nsFlash2xRead.offset:%d"" , VAR_1877 . VAR_1878 ) ; METHOD_301 ( VAR_1879 , VAR_1880 , VAR_1881 , VAR_1882 , ""\\nsFlash2xRead.numOfBytes:%x"" , VAR_1883 . VAR_1884 ) ; METHOD_302 ( VAR_1885 , VAR_1886 , VAR_1887 , VAR_1888 , ""\\nsFlash2xRead.bVerify:%x\\n"" , VAR_1889 . VAR_1890 ) ; if ( ( VAR_1891 . VAR_1892 != VAR_1893 ) && ( VAR_1894 . VAR_1895 != VAR_1896 ) && ( VAR_1897 . VAR_1898 != VAR_1899 ) ) { METHOD_303 ( VAR_1900 , VAR_1901 , VAR_1902 , VAR_1903 , ""OnlyVSAwriteisallowed"" ) ; return - VAR_1904 ; } if ( METHOD_304 ( VAR_1905 , & VAR_1906 ) == VAR_1907 ) return VAR_1908 ; VAR_1909 = VAR_1910 . VAR_1911 ; VAR_1912 = VAR_1913 . VAR_1914 ; VAR_1915 = VAR_1916 . VAR_1917 ; if ( VAR_1918 > VAR_1919 -> VAR_1920 ) VAR_1921 = VAR_1922 -> VAR_1923 ; else VAR_1924 = VAR_1925 ; VAR_1926 = METHOD_305 ( VAR_1927 , VAR_1928 ) ; if ( VAR_1929 == VAR_1930 ) return - VAR_1931 ; VAR_1932 = VAR_1933 -> VAR_1934 ; if ( VAR_1935 % VAR_1936 -> VAR_1937 ) VAR_1938 = VAR_1939 -> VAR_1940 - ( VAR_1941 % VAR_1942 -> VAR_1943 ) ; if ( VAR_1944 < VAR_1945 ) VAR_1946 = VAR_1947 ; METHOD_306 ( & VAR_1948 -> VAR_1949 ) ; if ( ( VAR_1950 -> VAR_1951 == VAR_1952 ) || ( VAR_1953 -> VAR_1954 == VAR_1955 ) || ( VAR_1956 -> VAR_1957 == VAR_1958 ) ) { METHOD_307 ( VAR_1959 , VAR_1960 , VAR_1961 , VAR_1962 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_308 ( & VAR_1963 -> VAR_1964 ) ; METHOD_309 ( VAR_1965 ) ; return - VAR_1966 ; } METHOD_310 ( VAR_1967 , VAR_1968 . VAR_1969 ) ; do { VAR_1970 = METHOD_311 ( VAR_1971 , VAR_1972 , VAR_1973 ) ; if ( VAR_1974 ) { METHOD_312 ( VAR_1975 , VAR_1976 , 0 , 0 , ""Copytouserfailedwithstatus:%d"" , VAR_1977 ) ; METHOD_313 ( & VAR_1978 -> VAR_1979 ) ; METHOD_314 ( VAR_1980 ) ; return - VAR_1981 ; } METHOD_315 ( VAR_1982 , VAR_1983 , VAR_1984 , VAR_1985 , VAR_1986 , VAR_1987 ) ; VAR_1988 = METHOD_316 ( VAR_1989 , ( TYPE_131 ) VAR_1990 , VAR_1991 . VAR_1992 , VAR_1993 , VAR_1994 , VAR_1995 . VAR_1996 ) ; if ( VAR_1997 ) { METHOD_317 ( VAR_1998 , VAR_1999 , 0 , 0 , ""Flash2xreaderrwithStatus:%d"" , VAR_2000 ) ; break ; } VAR_2001 = VAR_2002 - VAR_2003 ; if ( VAR_2004 ) { VAR_2005 = VAR_2006 + VAR_2007 ; VAR_2008 = VAR_2009 + VAR_2010 ; if ( VAR_2011 > VAR_2012 -> VAR_2013 ) VAR_2014 = VAR_2015 -> VAR_2016 ; else VAR_2017 = VAR_2018 ; } } while ( VAR_2019 > 0 ) ; METHOD_318 ( VAR_2020 , VAR_2021 . VAR_2022 ) ; METHOD_319 ( & VAR_2023 -> VAR_2024 ) ; METHOD_320 ( VAR_2025 ) ; } break ; case VAR_2026 : { struct STRUCT_OR_UNION_66 * VAR_2027 ; METHOD_321 ( VAR_2028 , VAR_2029 , VAR_2030 , VAR_2031 , ""IOCTL_BCM_GET_FLASH2X_SECTION_BITMAPCalled"" ) ; if ( METHOD_322 ( & VAR_2032 , VAR_2033 , sizeof ( struct STRUCT_OR_UNION_67 ) ) ) return - VAR_2034 ; if ( VAR_2035 . VAR_2036 != sizeof ( struct STRUCT_OR_UNION_68 ) ) return - VAR_2037 ; VAR_2038 = METHOD_323 ( sizeof ( struct STRUCT_OR_UNION_69 ) , VAR_2039 ) ; if ( VAR_2040 == VAR_2041 ) { METHOD_324 ( VAR_2042 , VAR_2043 , 0 , 0 , ""Memoryisnotavailable"" ) ; return - VAR_2044 ; } METHOD_325 ( & VAR_2045 -> VAR_2046 ) ; if ( ( VAR_2047 -> VAR_2048 == VAR_2049 ) || ( VAR_2050 -> VAR_2051 == VAR_2052 ) || ( VAR_2053 -> VAR_2054 == VAR_2055 ) ) { METHOD_326 ( VAR_2056 , VAR_2057 , VAR_2058 , VAR_2059 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_327 ( & VAR_2060 -> VAR_2061 ) ; METHOD_328 ( VAR_2062 ) ; return - VAR_2063 ; } METHOD_329 ( VAR_2064 , VAR_2065 ) ; METHOD_330 ( & VAR_2066 -> VAR_2067 ) ; if ( METHOD_331 ( VAR_2068 . VAR_2069 , VAR_2070 , sizeof ( struct STRUCT_OR_UNION_70 ) ) ) { METHOD_332 ( VAR_2071 ) ; return - VAR_2072 ; } METHOD_333 ( VAR_2073 ) ; } break ; case VAR_2074 : { enum VAR_2075 VAR_2076 = 0 ; METHOD_334 ( VAR_2077 , VAR_2078 , VAR_2079 , VAR_2080 , ""IOCTL_BCM_SET_ACTIVE_SECTIONCalled"" ) ; if ( METHOD_335 ( VAR_2081 ) != VAR_2082 ) { METHOD_336 ( VAR_2083 , VAR_2084 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2085 ; } VAR_2086 = METHOD_337 ( & VAR_2087 , VAR_2088 , sizeof ( struct STRUCT_OR_UNION_71 ) ) ; if ( VAR_2089 ) { METHOD_338 ( VAR_2090 , VAR_2091 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2092 ; } VAR_2093 = METHOD_339 ( & VAR_2094 , VAR_2095 . VAR_2096 , sizeof ( TYPE_132 ) ) ; if ( VAR_2097 ) { METHOD_340 ( VAR_2098 , VAR_2099 , 0 , 0 , ""Copyofflashsectionvalfailed"" ) ; return - VAR_2100 ; } METHOD_341 ( & VAR_2101 -> VAR_2102 ) ; if ( ( VAR_2103 -> VAR_2104 == VAR_2105 ) || ( VAR_2106 -> VAR_2107 == VAR_2108 ) || ( VAR_2109 -> VAR_2110 == VAR_2111 ) ) { METHOD_342 ( VAR_2112 , VAR_2113 , VAR_2114 , VAR_2115 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_343 ( & VAR_2116 -> VAR_2117 ) ; return - VAR_2118 ; } VAR_2119 = METHOD_344 ( VAR_2120 , VAR_2121 ) ; if ( VAR_2122 ) METHOD_345 ( VAR_2123 , VAR_2124 , 0 , 0 , ""Failedtomakeit\'spriorityHighest.Status%d"" , VAR_2125 ) ; METHOD_346 ( & VAR_2126 -> VAR_2127 ) ; } break ; case VAR_2128 : { VAR_2129 -> VAR_2130 = VAR_2131 ; METHOD_347 ( VAR_2132 , VAR_2133 , VAR_2134 , VAR_2135 , ""IOCTL_BCM_IDENTIFY_ACTIVE_SECTIONcalled"" ) ; VAR_2136 = VAR_2137 ; } break ; case VAR_2138 : { struct STRUCT_OR_UNION_72 VAR_2139 = { 0 } ; VAR_2140 = VAR_2141 ; METHOD_348 ( VAR_2142 , VAR_2143 , VAR_2144 , VAR_2145 , ""IOCTL_BCM_COPY_SECTIONCalled"" ) ; VAR_2146 -> VAR_2147 = VAR_2148 ; if ( METHOD_349 ( VAR_2149 ) != VAR_2150 ) { METHOD_350 ( VAR_2151 , VAR_2152 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2153 ; } VAR_2154 = METHOD_351 ( & VAR_2155 , VAR_2156 , sizeof ( struct STRUCT_OR_UNION_73 ) ) ; if ( VAR_2157 ) { METHOD_352 ( VAR_2158 , VAR_2159 , 0 , 0 , ""CopyofIOCTLBUFFERfailedStatus:%d"" , VAR_2160 ) ; return - VAR_2161 ; } VAR_2162 = METHOD_353 ( & VAR_2163 , VAR_2164 . VAR_2165 , sizeof ( struct STRUCT_OR_UNION_74 ) ) ; if ( VAR_2166 ) { METHOD_354 ( VAR_2167 , VAR_2168 , 0 , 0 , ""CopyofCopy_Section_StructfailedwithStatus:%d"" , VAR_2169 ) ; return - VAR_2170 ; } METHOD_355 ( VAR_2171 , VAR_2172 , VAR_2173 , VAR_2174 , ""SourceSEction:%x"" , VAR_2175 . VAR_2176 ) ; METHOD_356 ( VAR_2177 , VAR_2178 , VAR_2179 , VAR_2180 , ""DestinationSEction:%x"" , VAR_2181 . VAR_2182 ) ; METHOD_357 ( VAR_2183 , VAR_2184 , VAR_2185 , VAR_2186 , ""offset:%x"" , VAR_2187 . VAR_2188 ) ; METHOD_358 ( VAR_2189 , VAR_2190 , VAR_2191 , VAR_2192 , ""NOB:%x"" , VAR_2193 . VAR_2194 ) ; if ( METHOD_359 ( VAR_2195 , VAR_2196 . VAR_2197 ) == VAR_2198 ) { METHOD_360 ( VAR_2199 , VAR_2200 , 0 , 0 , ""SourceSection<%x>doesnotexixtinFlash"" , VAR_2201 . VAR_2202 ) ; return - VAR_2203 ; } if ( METHOD_361 ( VAR_2204 , VAR_2205 . VAR_2206 ) == VAR_2207 ) { METHOD_362 ( VAR_2208 , VAR_2209 , 0 , 0 , ""DestinatioSection<%x>doesnotexixtinFlash"" , VAR_2210 . VAR_2211 ) ; return - VAR_2212 ; } if ( VAR_2213 . VAR_2214 == VAR_2215 . VAR_2216 ) { METHOD_363 ( VAR_2217 , VAR_2218 , VAR_2219 , VAR_2220 , ""SourceandDestinationsectionshouldbedifferent"" ) ; return - VAR_2221 ; } METHOD_364 ( & VAR_2222 -> VAR_2223 ) ; if ( ( VAR_2224 -> VAR_2225 == VAR_2226 ) || ( VAR_2227 -> VAR_2228 == VAR_2229 ) || ( VAR_2230 -> VAR_2231 == VAR_2232 ) ) { METHOD_365 ( VAR_2233 , VAR_2234 , VAR_2235 , VAR_2236 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_366 ( & VAR_2237 -> VAR_2238 ) ; return - VAR_2239 ; } if ( VAR_2240 . VAR_2241 == VAR_2242 || VAR_2243 . VAR_2244 == VAR_2245 ) { if ( METHOD_367 ( VAR_2246 ) ) { METHOD_368 ( VAR_2247 , VAR_2248 , 0 , 0 , ""DeviceisNon-CDLesshencewon\'thaveISO!!"" ) ; VAR_2249 = - VAR_2250 ; } else if ( VAR_2251 . VAR_2252 == 0 ) { VAR_2253 = METHOD_369 ( VAR_2254 , VAR_2255 ) ; } else { METHOD_370 ( VAR_2256 , VAR_2257 , 0 , 0 , ""PartialCopyofISOsectionisnotAllowed.."" ) ; VAR_2258 = VAR_2259 ; } METHOD_371 ( & VAR_2260 -> VAR_2261 ) ; return VAR_2262 ; } VAR_2263 = METHOD_372 ( VAR_2264 , VAR_2265 . VAR_2266 , VAR_2267 . VAR_2268 , VAR_2269 . VAR_2270 , VAR_2271 . VAR_2272 ) ; METHOD_373 ( & VAR_2273 -> VAR_2274 ) ; } break ; case VAR_2275 : { VAR_2276 = VAR_2277 ; METHOD_374 ( VAR_2278 , VAR_2279 , VAR_2280 , VAR_2281 , ""IOCTL_BCM_GET_FLASH_CS_INFOCalled"" ) ; VAR_2282 = METHOD_375 ( & VAR_2283 , VAR_2284 , sizeof ( struct STRUCT_OR_UNION_75 ) ) ; if ( VAR_2285 ) { METHOD_376 ( VAR_2286 , VAR_2287 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2288 ; } if ( VAR_2289 -> VAR_2290 != VAR_2291 ) { METHOD_377 ( VAR_2292 , VAR_2293 , 0 , 0 , ""Connecteddevicedoesnothaveflash"" ) ; VAR_2294 = - VAR_2295 ; break ; } if ( METHOD_378 ( VAR_2296 ) == VAR_2297 ) { if ( VAR_2298 . VAR_2299 < sizeof ( struct STRUCT_OR_UNION_76 ) ) return - VAR_2300 ; if ( METHOD_379 ( VAR_2301 . VAR_2302 , VAR_2303 -> VAR_2304 , sizeof ( struct STRUCT_OR_UNION_77 ) ) ) return - VAR_2305 ; } else { if ( VAR_2306 . VAR_2307 < sizeof ( struct STRUCT_OR_UNION_78 ) ) return - VAR_2308 ; if ( METHOD_380 ( VAR_2309 . VAR_2310 , VAR_2311 -> VAR_2312 , sizeof ( struct STRUCT_OR_UNION_79 ) ) ) return - VAR_2313 ; } } break ; case VAR_2314 : { TYPE_133 VAR_2315 = 0 ; enum VAR_2316 VAR_2317 ; VAR_2318 = VAR_2319 ; METHOD_381 ( VAR_2320 , VAR_2321 , VAR_2322 , VAR_2323 , ""IOCTL_BCM_SELECT_DSDCalled"" ) ; if ( METHOD_382 ( VAR_2324 ) != VAR_2325 ) { METHOD_383 ( VAR_2326 , VAR_2327 , 0 , 0 , ""FlashDoesnothave2.xmap"" ) ; return - VAR_2328 ; } VAR_2329 = METHOD_384 ( & VAR_2330 , VAR_2331 , sizeof ( struct STRUCT_OR_UNION_80 ) ) ; if ( VAR_2332 ) { METHOD_385 ( VAR_2333 , VAR_2334 , 0 , 0 , ""CopyofIOCTLBUFFERfailed"" ) ; return - VAR_2335 ; } VAR_2336 = METHOD_386 ( & VAR_2337 , VAR_2338 . VAR_2339 , sizeof ( TYPE_134 ) ) ; if ( VAR_2340 ) { METHOD_387 ( VAR_2341 , VAR_2342 , 0 , 0 , ""Copyofflashsectionvalfailed"" ) ; return - VAR_2343 ; } METHOD_388 ( VAR_2344 , VAR_2345 , VAR_2346 , VAR_2347 , ""ReadSection:%d"" , VAR_2348 ) ; if ( ( VAR_2349 != VAR_2350 ) && ( VAR_2351 != VAR_2352 ) && ( VAR_2353 != VAR_2354 ) ) { METHOD_389 ( VAR_2355 , VAR_2356 , 0 , 0 , ""Passedsection<%x>isnotDSDsection"" , VAR_2357 ) ; return VAR_2358 ; } VAR_2359 = METHOD_390 ( VAR_2360 , VAR_2361 ) ; if ( VAR_2362 == VAR_2363 ) { METHOD_391 ( VAR_2364 , VAR_2365 , 0 , 0 , ""ProvidedSectionval<%d>doesnotexixtinFlash2.x"" , VAR_2366 ) ; return - VAR_2367 ; } VAR_2368 -> VAR_2369 = VAR_2370 ; VAR_2371 -> VAR_2372 = VAR_2373 ; VAR_2374 -> VAR_2375 = VAR_2376 ; } VAR_2377 = VAR_2378 ; break ; case VAR_2379 : { struct STRUCT_OR_UNION_81 VAR_2380 ; TYPE_135 VAR_2381 ; TYPE_136 VAR_2382 ; TYPE_137 VAR_2383 = 0 ; TYPE_138 VAR_2384 = 0 ; TYPE_139 VAR_2385 ; TYPE_140 TYPE_141 * VAR_2386 ; if ( VAR_2387 -> VAR_2388 != VAR_2389 ) { METHOD_392 ( VAR_2390 , VAR_2391 , 0 , 0 , ""NVMTYPEisnotFlash"" ) ; return - VAR_2392 ; } if ( METHOD_393 ( & VAR_2393 , VAR_2394 , sizeof ( struct STRUCT_OR_UNION_82 ) ) ) { METHOD_394 ( VAR_2395 , VAR_2396 , 0 , 0 , ""copy_from_user1failed\\n"" ) ; return - VAR_2397 ; } if ( METHOD_395 ( & VAR_2398 , VAR_2399 . VAR_2400 , sizeof ( struct STRUCT_OR_UNION_83 ) ) ) return - VAR_2401 ; VAR_2402 = VAR_2403 . VAR_2404 ; if ( VAR_2405 > VAR_2406 ) VAR_2407 = VAR_2408 ; else VAR_2409 = VAR_2410 ; VAR_2411 = VAR_2412 . VAR_2413 ; VAR_2414 = VAR_2415 . VAR_2416 ; VAR_2417 = METHOD_396 ( VAR_2418 , VAR_2419 ) ; if ( VAR_2420 == VAR_2421 ) { METHOD_397 ( VAR_2422 , VAR_2423 , 0 , 0 , ""MemoryallocationfailedforFlash2.xReadStructure"" ) ; VAR_2424 = - VAR_2425 ; break ; } METHOD_398 ( & VAR_2426 -> VAR_2427 ) ; if ( ( VAR_2428 -> VAR_2429 == VAR_2430 ) || ( VAR_2431 -> VAR_2432 == VAR_2433 ) || ( VAR_2434 -> VAR_2435 == VAR_2436 ) ) { METHOD_399 ( VAR_2437 , VAR_2438 , VAR_2439 , VAR_2440 , ""DeviceisinIdle/ShutdownMode\\n"" ) ; METHOD_400 ( VAR_2441 ) ; METHOD_401 ( & VAR_2442 -> VAR_2443 ) ; return - VAR_2444 ; } VAR_2445 -> VAR_2446 = VAR_2447 ; while ( VAR_2448 ) { if ( VAR_2449 > VAR_2450 ) VAR_2451 = VAR_2452 ; else VAR_2453 = VAR_2454 ; VAR_2455 = METHOD_402 ( VAR_2456 , ( TYPE_142 ) VAR_2457 , VAR_2458 , VAR_2459 ) ; if ( VAR_2460 ) { METHOD_403 ( VAR_2461 , VAR_2462 , 0 , 0 , ""Flash2xreaderrwithStatus:%d"" , VAR_2463 ) ; break ; } METHOD_404 ( VAR_2464 , VAR_2465 , VAR_2466 , VAR_2467 , VAR_2468 , VAR_2469 ) ; VAR_2470 = METHOD_405 ( VAR_2471 , VAR_2472 , VAR_2473 ) ; if ( VAR_2474 ) { METHOD_406 ( VAR_2475 , VAR_2476 , 0 , 0 , ""Copytousefailedwithstatus:%d"" , VAR_2477 ) ; METHOD_407 ( & VAR_2478 -> VAR_2479 ) ; METHOD_408 ( VAR_2480 ) ; return - VAR_2481 ; } VAR_2482 = VAR_2483 - VAR_2484 ; if ( VAR_2485 ) { VAR_2486 = VAR_2487 + VAR_2488 ; VAR_2489 = VAR_2490 + VAR_2491 ; } } VAR_2492 -> VAR_2493 = VAR_2494 ; METHOD_409 ( & VAR_2495 -> VAR_2496 ) ; METHOD_410 ( VAR_2497 ) ; break ; } case VAR_2498 : { TYPE_143 VAR_2499 = 0 ; VAR_2500 = METHOD_411 ( & VAR_2501 , VAR_2502 , sizeof ( struct STRUCT_OR_UNION_84 ) ) ; if ( VAR_2503 ) { METHOD_412 ( VAR_2504 , VAR_2505 , VAR_2506 , VAR_2507 , ""copyofIoctlbufferisfailedfromuserspace"" ) ; return - VAR_2508 ; } if ( VAR_2509 . VAR_2510 != sizeof ( unsigned TYPE_144 ) ) { VAR_2511 = - VAR_2512 ; break ; } VAR_2513 = METHOD_413 ( & VAR_2514 , VAR_2515 . VAR_2516 , VAR_2517 . VAR_2518 ) ; if ( VAR_2519 ) { METHOD_414 ( VAR_2520 , VAR_2521 , VAR_2522 , VAR_2523 , ""copyofcontrolbitmaskfailedfromuserspace"" ) ; return - VAR_2524 ; } METHOD_415 ( VAR_2525 , VAR_2526 , VAR_2527 , VAR_2528 , ""\\nGotuserdcntrlmsgbitmask:%lx"" , VAR_2529 ) ; VAR_2530 -> VAR_2531 = VAR_2532 ; } break ; case VAR_2533 : { struct STRUCT_OR_UNION_85 VAR_2534 ; METHOD_416 ( VAR_2535 , VAR_2536 , VAR_2537 , VAR_2538 , ""CalledIOCTL_BCM_GET_DEVICE_DRIVER_INFO\\n"" ) ; METHOD_229 ( & VAR_2564 , 0 , sizeof ( VAR_2564 ) ) ; VAR_2539 . VAR_2540 = VAR_2541 ; VAR_2542 . VAR_2543 = VAR_2544 ; VAR_2545 . VAR_2546 = 0 ; VAR_2547 . VAR_2548 = VAR_2549 -> VAR_2550 ; VAR_2551 . VAR_2552 = VAR_2553 ; if ( METHOD_417 ( & VAR_2554 , VAR_2555 , sizeof ( struct STRUCT_OR_UNION_86 ) ) ) return - VAR_2556 ; if ( VAR_2557 . VAR_2558 < sizeof ( VAR_2559 ) ) return - VAR_2560 ; if ( METHOD_418 ( VAR_2561 . VAR_2562 , & VAR_2563 , sizeof ( VAR_2564 ) ) ) return - VAR_2565 ; } break ; case VAR_2566 : { struct STRUCT_OR_UNION_87 VAR_2567 = { 0 } ; METHOD_419 ( VAR_2568 , VAR_2569 , VAR_2570 , VAR_2571 , ""IOCTL_BCM_TIME_SINCE_NET_ENTRYcalled"" ) ; if ( METHOD_420 ( & VAR_2572 , VAR_2573 , sizeof ( struct STRUCT_OR_UNION_88 ) ) ) return - VAR_2574 ; if ( VAR_2575 . VAR_2576 < sizeof ( struct STRUCT_OR_UNION_89 ) ) return - VAR_2577 ; VAR_2578 . VAR_2579 = METHOD_421 ( ) - VAR_2580 -> VAR_2581 ; if ( METHOD_422 ( VAR_2582 . VAR_2583 , & VAR_2584 , sizeof ( struct STRUCT_OR_UNION_90 ) ) ) return - VAR_2585 ; } break ; case VAR_2586 : METHOD_423 ( VAR_2587 , VAR_2588 , VAR_2589 , VAR_2590 , ""IOCTL_CLOSE_NOTIFICATION"" ) ; break ; default : pr_info ( DRV_NAME "":unknownioctlcmd=%x\\n"" , VAR_2591 ) ; VAR_2592 = VAR_2593 ; break ; } return VAR_2594 ; }",481
482,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; VAR_12 * VAR_13 [ 3 ] ; VAR_14 = 0 ;  for ( VAR_15 = 0 ; VAR_16 < METHOD_1 ( VAR_17 ) ; ++ VAR_18 ) {   VAR_19 [ VAR_20 ] = METHOD_2 ( 1 , METHOD_3 ( VAR_21 ) ) ;  METHOD_4 ( VAR_22 [ VAR_23 ] ) ; } VAR_24 = METHOD_5 ( VAR_25 ) - ( VAR_26 -> VAR_27 * VAR_28 -> VAR_29 + 7 ) / 8 ; for ( VAR_30 = 0 ; VAR_31 < VAR_32 -> VAR_33 ; VAR_34 ++ ) { VAR_35 = 0 ; VAR_36 = 0 ; for ( VAR_37 = 0 ; VAR_38 < VAR_39 -> VAR_40 ; VAR_41 ++ ) { while ( VAR_42 < VAR_43 -> VAR_44 ) { if ( ( VAR_45 = METHOD_6 ( VAR_46 ) ) == VAR_47 ) {  return - 1 ;  }  VAR_48 = ( VAR_49 << 8 ) | VAR_50 ;  VAR_51 += 8 ; } VAR_52 = ( VAR_53 >> ( VAR_54 - VAR_55 -> VAR_56 ) ) & METHOD_7 ( VAR_57 -> VAR_58 ) ; VAR_59 &= METHOD_8 ( VAR_60 - VAR_61 -> VAR_62 ) ; VAR_63 -= VAR_64 -> VAR_65 ; if ( METHOD_9 ( VAR_66 ) == 3 ) { METHOD_10 ( VAR_67 [ 0 ] , VAR_68 , ( METHOD_11 ( VAR_69 ) ) ) ; METHOD_12 ( VAR_70 [ 1 ] , VAR_71 , ( METHOD_13 ( VAR_72 ) ) ) ; METHOD_14 ( VAR_73 [ 2 ] , VAR_74 , ( METHOD_15 ( VAR_75 ) ) ) ; } else { METHOD_16 ( VAR_76 [ 0 ] , VAR_77 , ( VAR_78 ) ) ; } } if ( VAR_79 ) { if ( ( VAR_80 = METHOD_17 ( VAR_81 ) ) == VAR_82 ) { return - 1 ; } } for ( VAR_83 = 0 ; VAR_84 < METHOD_18 ( VAR_85 ) ; ++ VAR_86 ) { if ( METHOD_19 ( VAR_87 , VAR_88 , 0 , VAR_89 , VAR_90 -> VAR_91 , 1 , VAR_92 [ VAR_93 ] ) ) { return - 1 ; } } } for ( VAR_94 = 0 ; VAR_95 < METHOD_20 ( VAR_96 ) ; ++ VAR_97 ) { METHOD_21 ( VAR_98 [ VAR_99 ] ) ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; VAR_12 * VAR_13 [ 3 ] ; VAR_14 = 0 ; METHOD_4 ( METHOD_20 ( VAR_96 ) ; ++ VAR_97 ) { METHOD_21 ( VAR_98 [ VAR_99 ] ) ; } return 0 ; }",482
483,"static TYPE_0 METHOD_0 ( const TYPE_1 * TYPE_2 , TYPE_3 VAR_0 , TYPE_4 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) {  TYPE_5 TYPE_6   TYPE_7 TYPE_8 [ TYPE_9 ( TYPE_10 ) + 1 ] ;  else TYPE_11 * TYPE_12 = METHOD_1 ( TYPE_13 ( TYPE_14 ) + 1 ) ;   TYPE_15 * VAR_3 = TYPE_16 ; TYPE_17 * VAR_4 ; enum VAR_5 VAR_6 = VAR_7 ; TYPE_18 VAR_8 = VAR_9 ; TYPE_19 VAR_10 = VAR_11 ; VAR_12 -> VAR_13 = VAR_14 ; METHOD_2 ( TYPE_20 , TYPE_21 , TYPE_22 ( TYPE_23 ) + 1 ) ; while ( * VAR_15 == '/' ) VAR_16 ++ ; if ( ! * VAR_17 ) {  * VAR_18 = VAR_19 ;  return 0 ; } for ( ; ; ) { TYPE_24 VAR_20 ; struct STRUCT_OR_UNION_1 VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 , '/' ) ; if ( VAR_24 ) { while ( * VAR_25 == '/' ) * ( VAR_26 ++ ) = '\\0' ; } if ( VAR_27 != VAR_28 ) { METHOD_4 ( VAR_29 , VAR_30 ) ;  return METHOD_5 ( VAR_31 , ""notadirectory"" ) ;  } VAR_32 . VAR_33 = VAR_34 ; VAR_35 . VAR_36 = & VAR_37 ; VAR_38 . VAR_39 = & VAR_40 ; VAR_41 . VAR_42 = & VAR_43 ; VAR_44 = VAR_45 -> METHOD_6 ( VAR_46 , VAR_47 , & VAR_48 ) ; if ( ! VAR_49 ) {  if ( VAR_50 )   return VAR_51 ;  break ; } if ( VAR_52 == VAR_53 ) { TYPE_25 * VAR_54 ; if ( ++ ( VAR_55 -> VAR_56 ) == 8 ) { METHOD_7 ( VAR_57 , VAR_58 ) ; METHOD_8 ( VAR_59 , VAR_60 ) ;  return METHOD_9 ( VAR_61 ,  ""toodeepnestingofsymlinks"" ) ; } VAR_62 = VAR_63 -> METHOD_10 ( VAR_64 ) ; METHOD_11 ( VAR_65 , VAR_66 ) ; if ( ! VAR_67 ) {  METHOD_12 ( VAR_68 , VAR_69 ) ;  return VAR_70 ; } if ( VAR_71 [ 0 ] == '/' ) { METHOD_13 ( VAR_72 , VAR_73 ) ; VAR_74 = VAR_75 -> VAR_76 ; } METHOD_14 ( VAR_77 , VAR_78 , & VAR_79 , VAR_80 ) ; VAR_81 = VAR_82 -> VAR_83 ; METHOD_15 ( VAR_84 ) ; if ( VAR_85 ) { METHOD_16 ( VAR_86 , VAR_87 ) ;  return VAR_88 ;  } } METHOD_17 ( VAR_89 , VAR_90 ) ; if ( ! VAR_91 || * VAR_92 == '\\0' ) { * VAR_93 = VAR_94 ; VAR_95 -> VAR_96 = VAR_97 ;  return 0 ;  } VAR_98 = VAR_99 ; }  return METHOD_18 ( VAR_100 , ""filenotfound"" ) ;  }","static TYPE_0 METHOD_0 ( const TYPE_1 * TYPE_2 , TYPE_3 VAR_0 , TYPE_4 * VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 ) { TYPE_5 TYPE_6 TYPE_7 TYPE_8 [ TYPE_9 ( TYPE_10 ) + 1 ) ; TYPE_25 * VAR_98 = TYPE_20 ; TYPE_25 * VAR_99 ; enum VAR_5 VAR_97 = VAR_28 ; TYPE_19 VAR_94 = VAR_14 ; TYPE_19 VAR_89 = VAR_14 ; VAR_95 -> VAR_14 = VAR_14 ; METHOD_2 ( TYPE_20 , TYPE_23 , TYPE_22 ( TYPE_23 ) + 1 ) ; while ( * VAR_15 == '/' ) VAR_16 ++ ; if ( ! * VAR_17 ) { * VAR_18 = VAR_19 ; return 0 ; } for ( ; ; ) { TYPE_24 VAR_20 ; struct STRUCT_OR_UNION_1 VAR_21 ; VAR_22 = METHOD_3 ( VAR_23 , '/' ) ; if ( VAR_24 ) { while ( * VAR_25 == '/' ) * ( VAR_26 ++ ) = '\\0' ; } if ( VAR_27 != VAR_28 ) { METHOD_4 ( VAR_29 , VAR_30 ) ; return METHOD_5 ( VAR_31 , ""notadirectory"" ) ; } VAR_32 . VAR_33 = VAR_34 ; VAR_35 . VAR_36 = & VAR_37 ; VAR_38 . VAR_39 = & VAR_40 ; VAR_41 . VAR_42 = & VAR_43 ; VAR_44 = VAR_45 -> METHOD_6 ( VAR_46 , VAR_47 , & VAR_48 ) ; if ( ! VAR_49 ) { if ( VAR_50 ) return VAR_51 ; break ; } if ( VAR_52 == VAR_53 ) { TYPE_25 * VAR_54 ; if ( ++ ( VAR_55 -> VAR_56 ) == 8 ) { METHOD_7 ( VAR_57 , VAR_58 ) ; METHOD_8 ( VAR_59 , VAR_60 ) ; return METHOD_9 ( VAR_61 , ""toodeepnestingofsymlinks"" ) ; } VAR_62 = VAR_63 -> METHOD_10 ( VAR_64 ) ; METHOD_11 ( VAR_65 , VAR_66 ) ; if ( ! VAR_67 ) { METHOD_12 ( VAR_68 , VAR_69 ) ; return VAR_70 ; } if ( VAR_71 [ 0 ] == '/' ) { METHOD_13 ( VAR_72 , VAR_73 ) ; VAR_74 = VAR_75 -> VAR_76 ; } METHOD_14 ( VAR_77 , VAR_78 , & VAR_79 , VAR_80 ) ; VAR_81 = VAR_82 -> VAR_83 ; METHOD_15 ( VAR_84 ) ; if ( VAR_85 ) { METHOD_16 ( VAR_86 , VAR_87 ) ; return VAR_88 ; } } METHOD_17 ( VAR_89 , VAR_90 ) ; if ( ! VAR_91 || * VAR_92 == '\\0' ) { * VAR_93 = VAR_94 ; METHOD_19 ( TYPE_20 ) ; VAR_95 -> VAR_96 = VAR_97 ; METHOD_19 ( TYPE_20 ) ; return 0 ; } VAR_98 = VAR_99 ; } METHOD_19 ( TYPE_20 ) ; return METHOD_18 ( VAR_100 , ""filenotfound"" ) ; }",483
484,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 TYPE_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; unsigned VAR_10 ; TYPE_3 VAR_11 ; TYPE_4 VAR_12 = 0 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 ) ) return - VAR_15 ; METHOD_2 ( & VAR_16 -> VAR_17 . VAR_18 ) ; VAR_19 = METHOD_3 ( VAR_20 , VAR_21 -> VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) { METHOD_4 ( ""invalidframebufferid\\n"" ) ; VAR_25 = - VAR_26 ; goto VAR_27 ; } VAR_28 = METHOD_5 ( VAR_29 ) ; VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = ( struct STRUCT_OR_UNION_7 * ) ( unsigned TYPE_5 ) VAR_34 -> VAR_35 ; if ( ! VAR_36 != ! VAR_37 ) { VAR_38 = - VAR_39 ; goto VAR_40 ; } VAR_41 = VAR_42 & VAR_43 -> VAR_44 ; if ( VAR_45 & VAR_46 && ( VAR_47 % 2 ) ) { VAR_48 = - VAR_49 ; goto VAR_50 ; } if ( VAR_51 && VAR_52 ) {  VAR_53 = METHOD_6 ( VAR_54 * sizeof ( * VAR_55 ) , VAR_56 ) ;  if ( ! VAR_57 ) { VAR_58 = - VAR_59 ; goto VAR_60 ; } VAR_61 = METHOD_7 ( VAR_62 , VAR_63 , VAR_64 * sizeof ( * VAR_65 ) ) ; if ( VAR_66 ) { VAR_67 = - VAR_68 ; goto VAR_69 ; } } if ( VAR_70 -> VAR_71 -> METHOD_8 ) { VAR_72 = VAR_73 -> VAR_74 -> METHOD_9 ( VAR_75 , VAR_76 , VAR_77 , VAR_78 -> VAR_79 , VAR_80 , VAR_81 ) ; } else { VAR_82 = - VAR_83 ; goto VAR_84 ; } VAR_85 : METHOD_10 ( VAR_86 ) ; VAR_87 : METHOD_11 ( & VAR_88 -> VAR_89 . VAR_90 ) ; return VAR_91 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 TYPE_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 = VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; struct STRUCT_OR_UNION_6 * VAR_9 ; unsigned VAR_10 ; TYPE_3 VAR_11 ; TYPE_4 VAR_12 = 0 ; if ( ! METHOD_1 ( VAR_13 , VAR_14 ) ) return - VAR_15 ; METHOD_2 ( & VAR_16 -> VAR_17 . VAR_18 ) ; VAR_19 = METHOD_3 ( VAR_20 , VAR_21 -> VAR_22 , VAR_23 ) ; if ( ! VAR_24 ) { METHOD_4 ( ""invalidframebufferid\\n"" ) ; VAR_25 = - VAR_26 ; goto VAR_27 ; } VAR_28 = METHOD_5 ( VAR_29 ) ; VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = ( struct STRUCT_OR_UNION_7 * ) ( unsigned TYPE_5 ) VAR_34 -> VAR_35 ; if ( ! VAR_36 != ! VAR_37 ) { VAR_38 = - VAR_39 ; goto VAR_40 ; } VAR_41 = VAR_42 & VAR_43 -> VAR_44 ; if ( VAR_45 & VAR_46 && ( VAR_47 % 2 ) ) { VAR_48 = - VAR_49 ; goto VAR_50 ; } if ( VAR_51 && VAR_52 ) { VAR_53 = METHOD_6 ( VAR_54 * sizeof ( * VAR_55 ) , VAR_56 ) ; if ( ! VAR_57 ) { VAR_58 = - VAR_59 ; goto VAR_60 ; } VAR_61 = METHOD_7 ( VAR_62 , VAR_63 , VAR_64 * sizeof ( * VAR_65 ) ) ; if ( VAR_66 ) { VAR_67 = - VAR_68 ; goto VAR_69 ; } } if ( VAR_70 -> VAR_71 -> METHOD_8 ) { VAR_72 = VAR_73 -> VAR_74 -> METHOD_9 ( VAR_75 , VAR_76 , VAR_77 , VAR_78 -> VAR_79 , VAR_80 , VAR_81 ) ; } else { VAR_82 = - VAR_83 ; goto VAR_84 ; } VAR_85 : METHOD_10 ( VAR_86 ) ; VAR_87 : METHOD_11 ( & VAR_88 -> VAR_89 . VAR_90 ) ; return VAR_91 ; }",484
485,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 -> VAR_2 = VAR_3 ;  return 0 ;  },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 -> VAR_2 = VAR_3 ; VAR_1 -> VAR_4 = VAR_5 ; return 0 ; },485
486,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_1 ; TYPE_2 VAR_2 = 0 ; switch ( STRUCT_OR_UNION_5 -> VAR_3 ) { case VAR_4 : VAR_5 = - VAR_6 ; if ( METHOD_1 ( ! ( STRUCT_OR_UNION_6 -> VAR_7 & VAR_8 ) ) ) break ; VAR_9 = - VAR_10 ; if ( METHOD_2 ( ! METHOD_3 ( VAR_11 , STRUCT_OR_UNION_7 -> VAR_12 , STRUCT_OR_UNION_8 -> VAR_13 ) ) ) break ;  VAR_14 = METHOD_4 ( STRUCT_OR_UNION_9 , VAR_15 ) ;  if ( METHOD_5 ( VAR_16 ) ) break ; VAR_17 = METHOD_6 ( STRUCT_OR_UNION_10 ) ; if ( VAR_18 ) break ; VAR_19 = - VAR_20 ; if ( STRUCT_OR_UNION_11 -> VAR_21 -> VAR_22 ) STRUCT_OR_UNION_12 -> VAR_23 = VAR_24 ; break ; case VAR_25 : VAR_26 = - VAR_27 ; if ( METHOD_7 ( ! ( STRUCT_OR_UNION_13 -> VAR_28 & VAR_29 ) ) ) break ; VAR_30 = - VAR_31 ; if ( METHOD_8 ( ! METHOD_9 ( VAR_32 , STRUCT_OR_UNION_14 -> VAR_33 , STRUCT_OR_UNION_15 -> VAR_34 ) ) ) break ;  VAR_35 = METHOD_10 ( STRUCT_OR_UNION_16 , VAR_36 ) ;  if ( METHOD_11 ( VAR_37 ) ) break ; VAR_38 = METHOD_12 ( STRUCT_OR_UNION_17 ) ; if ( VAR_39 ) break ; VAR_40 = - VAR_41 ; if ( STRUCT_OR_UNION_18 -> VAR_42 -> VAR_43 ) STRUCT_OR_UNION_19 -> VAR_44 = VAR_45 ; break ; case VAR_46 : VAR_47 = - VAR_48 ; if ( METHOD_13 ( ! ( STRUCT_OR_UNION_20 -> VAR_49 & VAR_50 ) ) ) break ;  VAR_51 = METHOD_14 ( STRUCT_OR_UNION_21 , VAR_52 ) ;  if ( METHOD_15 ( VAR_53 ) ) break ; VAR_54 = METHOD_16 ( VAR_55 , STRUCT_OR_UNION_22 , VAR_56 ) ; if ( VAR_57 ) break ; VAR_58 = - VAR_59 ; if ( STRUCT_OR_UNION_23 -> VAR_60 -> VAR_61 ) STRUCT_OR_UNION_24 -> VAR_62 = VAR_63 ; break ; case VAR_64 : VAR_65 = - VAR_66 ; if ( METHOD_17 ( ! ( STRUCT_OR_UNION_25 -> VAR_67 & VAR_68 ) ) ) break ;  VAR_69 = METHOD_18 ( STRUCT_OR_UNION_26 , VAR_70 ) ;  if ( METHOD_19 ( VAR_71 ) ) break ; VAR_72 = METHOD_20 ( VAR_73 , STRUCT_OR_UNION_27 , VAR_74 ) ; if ( VAR_75 ) break ; VAR_76 = - VAR_77 ; if ( STRUCT_OR_UNION_28 -> VAR_78 -> VAR_79 ) STRUCT_OR_UNION_29 -> VAR_80 = VAR_81 ; break ; case VAR_82 : VAR_83 = - VAR_84 ; if ( STRUCT_OR_UNION_30 -> VAR_85 -> VAR_86 ) STRUCT_OR_UNION_31 -> VAR_87 = VAR_88 ; break ; case VAR_89 : VAR_90 = - VAR_91 ; if ( STRUCT_OR_UNION_32 -> VAR_92 -> VAR_93 ) STRUCT_OR_UNION_33 -> VAR_94 = VAR_95 ; break ; default : METHOD_21 ( ""EINVAL:io_submit:nooperationprovided\\n"" ) ; VAR_96 = - VAR_97 ; } if ( ! STRUCT_OR_UNION_34 -> VAR_98 ) return VAR_99 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = STRUCT_OR_UNION_4 -> VAR_1 ; TYPE_2 VAR_2 = 0 ; switch ( STRUCT_OR_UNION_5 -> VAR_3 ) { case VAR_4 : VAR_5 = - VAR_6 ; if ( METHOD_1 ( ! ( STRUCT_OR_UNION_6 -> VAR_7 & VAR_8 ) ) ) break ; VAR_9 = - VAR_10 ; if ( METHOD_2 ( ! METHOD_3 ( VAR_11 , STRUCT_OR_UNION_7 -> VAR_12 , STRUCT_OR_UNION_8 -> VAR_13 ) ) ) break ; VAR_14 = METHOD_4 ( STRUCT_OR_UNION_9 , VAR_15 ) ; if ( METHOD_5 ( VAR_16 ) ) break ; VAR_17 = METHOD_6 ( STRUCT_OR_UNION_10 ) ; if ( VAR_18 ) break ; VAR_19 = - VAR_20 ; if ( STRUCT_OR_UNION_11 -> VAR_21 -> VAR_22 ) STRUCT_OR_UNION_12 -> VAR_23 = VAR_24 ; break ; case VAR_25 : VAR_26 = - VAR_27 ; if ( METHOD_7 ( ! ( STRUCT_OR_UNION_13 -> VAR_28 & VAR_29 ) ) ) break ; VAR_30 = - VAR_31 ; if ( METHOD_8 ( ! METHOD_9 ( VAR_32 , STRUCT_OR_UNION_14 -> VAR_33 , STRUCT_OR_UNION_15 -> VAR_34 ) ) ) break ; VAR_35 = METHOD_10 ( STRUCT_OR_UNION_16 , VAR_36 ) ; if ( METHOD_11 ( VAR_37 ) ) break ; VAR_38 = METHOD_12 ( STRUCT_OR_UNION_17 ) ; if ( VAR_39 ) break ; VAR_40 = - VAR_41 ; if ( STRUCT_OR_UNION_18 -> VAR_42 -> VAR_43 ) STRUCT_OR_UNION_19 -> VAR_44 = VAR_45 ; break ; case VAR_46 : VAR_47 = - VAR_48 ; if ( METHOD_13 ( ! ( STRUCT_OR_UNION_20 -> VAR_49 & VAR_50 ) ) ) break ; VAR_51 = METHOD_14 ( STRUCT_OR_UNION_21 , VAR_52 ) ; if ( METHOD_15 ( VAR_53 ) ) break ; VAR_54 = METHOD_16 ( VAR_55 , STRUCT_OR_UNION_22 , VAR_56 ) ; if ( VAR_57 ) break ; VAR_58 = - VAR_59 ; if ( STRUCT_OR_UNION_23 -> VAR_60 -> VAR_61 ) STRUCT_OR_UNION_24 -> VAR_62 = VAR_63 ; break ; case VAR_64 : VAR_65 = - VAR_66 ; if ( METHOD_17 ( ! ( STRUCT_OR_UNION_25 -> VAR_67 & VAR_68 ) ) ) break ; VAR_69 = METHOD_18 ( STRUCT_OR_UNION_26 , VAR_70 ) ; if ( METHOD_19 ( VAR_71 ) ) break ; VAR_72 = METHOD_20 ( VAR_73 , STRUCT_OR_UNION_27 , VAR_74 ) ; if ( VAR_75 ) break ; VAR_76 = - VAR_77 ; if ( STRUCT_OR_UNION_28 -> VAR_78 -> VAR_79 ) STRUCT_OR_UNION_29 -> VAR_80 = VAR_81 ; break ; case VAR_82 : VAR_83 = - VAR_84 ; if ( STRUCT_OR_UNION_30 -> VAR_85 -> VAR_86 ) STRUCT_OR_UNION_31 -> VAR_87 = VAR_88 ; break ; case VAR_89 : VAR_90 = - VAR_91 ; if ( STRUCT_OR_UNION_32 -> VAR_92 -> VAR_93 ) STRUCT_OR_UNION_33 -> VAR_94 = VAR_95 ; break ; default : METHOD_21 ( ""EINVAL:io_submit:nooperationprovided\\n"" ) ; VAR_96 = - VAR_97 ; } if ( ! STRUCT_OR_UNION_34 -> VAR_98 ) return VAR_99 ; return 0 ; }",486
487,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 VAR_1 ;   TYPE_3 * VAR_2 ;  VAR_3 = METHOD_1 ( 1 , 1024 ) ;  VAR_4 = METHOD_2 ( VAR_5 ) ;  METHOD_3 ( VAR_6 , 0 , VAR_7 ) ; METHOD_4 ( METHOD_5 ( VAR_8 , 1 , 1023 , VAR_9 ) , 1023 , ""FailedtoloadPDFheader.\\n"" ) ; METHOD_6 ( VAR_10 , VAR_11 , VAR_12 ) ; return VAR_13 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 VAR_1 ; TYPE_3 * VAR_2 ; VAR_3 = METHOD_1 ( 1 , 1024 ) ; TYPE_2 VAR_4 = METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_6 , 0 , VAR_7 ) ; METHOD_4 ( METHOD_5 ( VAR_8 , 1 , 1023 , VAR_9 ) , 1023 , ""FailedtoloadPDFheader.\\n"" ) ; METHOD_6 ( VAR_10 , VAR_11 , VAR_12 ) ; return VAR_13 ; }",487
488,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 -> VAR_2 , 0xff , VAR_3 ) ; VAR_4 -> VAR_5 = VAR_6 ; METHOD_2 ( VAR_7 ) ;  VAR_8 -> VAR_9 = & VAR_10 ;  VAR_11 -> VAR_12 = VAR_13 * 2 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( VAR_1 -> VAR_2 , 0xff , VAR_3 ) ; VAR_4 -> VAR_5 = VAR_6 ; METHOD_2 ( VAR_7 ) ; VAR_8 -> VAR_9 = & VAR_10 ; VAR_11 -> VAR_14 &= ~ VAR_15 ; VAR_11 -> VAR_12 = VAR_13 * 2 ; }",488
489,static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 ) return - VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 < 0 ) { METHOD_3 ( VAR_8 ) ;  return VAR_9 != - VAR_10 ? VAR_11 : 0 ;  } return METHOD_4 ( VAR_12 ) ; },static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 ) return - VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 < 0 ) { METHOD_3 ( VAR_8 ) ; return VAR_9 != - VAR_10 ? VAR_11 : 0 ; } return METHOD_4 ( VAR_12 ) ; },489
490,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ; TYPE_1 VAR_3 , VAR_4 = 0 ; struct STRUCT_OR_UNION_2 VAR_5 = { } ; TYPE_2 * VAR_6 = VAR_7 ; TYPE_3 * VAR_8 ; TYPE_4 VAR_9 ; TYPE_5 VAR_10 ; if ( ! VAR_11 ) return ; if ( ! VAR_12 || ! VAR_13 -> VAR_14 ) return ; VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 * sizeof ( * VAR_18 ) , VAR_19 ) ; if ( ! VAR_20 ) return ; for ( VAR_21 = 0 , VAR_22 = 0 ; VAR_23 < VAR_24 -> VAR_25 ; VAR_26 ++ ) { VAR_27 += 64 ; VAR_28 [ VAR_29 ] = VAR_30 ; } VAR_31 . VAR_32 = VAR_33 ;  for ( VAR_34 = 0 ; VAR_35 < 10 ; VAR_36 ++ ) {  VAR_37 = METHOD_2 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 , & VAR_42 ) ; if ( VAR_43 <= 0 ) { VAR_44 = VAR_45 ; if ( VAR_46 ) METHOD_3 ( VAR_47 ) ; goto VAR_48 ; } if ( VAR_49 ) { if ( VAR_50 != VAR_51 ) { METHOD_4 ( ""bpf_jit:proglen=%d!=oldproglen=%d\\n"" , VAR_52 , VAR_53 ) ; goto VAR_54 ; } break ; } if ( VAR_55 == VAR_56 ) { VAR_57 = METHOD_5 ( VAR_58 , & VAR_59 , 1 , VAR_60 ) ; if ( ! VAR_61 ) goto VAR_62 ; } VAR_63 = VAR_64 ; } if ( VAR_65 > 1 ) METHOD_6 ( VAR_66 -> VAR_67 , VAR_68 , 0 , VAR_69 ) ; if ( VAR_70 ) { METHOD_7 ( VAR_71 , VAR_72 + VAR_73 ) ; METHOD_8 ( ( unsigned TYPE_6 ) VAR_74 , VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = ( TYPE_7 * ) VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; } VAR_83 : METHOD_9 ( VAR_84 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 ; TYPE_1 VAR_3 , VAR_4 = 0 ; struct STRUCT_OR_UNION_2 VAR_5 = { } ; TYPE_2 * VAR_6 = VAR_7 ; TYPE_3 * VAR_8 ; TYPE_4 VAR_9 ; TYPE_5 VAR_10 ; if ( ! VAR_11 ) return ; if ( ! VAR_12 || ! VAR_13 -> VAR_14 ) return ; VAR_15 = METHOD_1 ( VAR_16 -> VAR_17 * sizeof ( * VAR_18 ) , VAR_19 ) ; if ( ! VAR_20 ) return ; for ( VAR_21 = 0 , VAR_22 = 0 ; VAR_23 < VAR_24 -> VAR_25 ; VAR_26 ++ ) { VAR_27 += 64 ; VAR_28 [ VAR_29 ] = VAR_30 ; } VAR_31 . VAR_32 = VAR_33 ; for ( VAR_34 = 0 ; VAR_35 < 10 ; VAR_36 ++ ) { VAR_37 = METHOD_2 ( VAR_38 , VAR_39 , VAR_40 , VAR_41 , & VAR_42 ) ; if ( VAR_43 <= 0 ) { VAR_44 = VAR_45 ; if ( VAR_46 ) METHOD_3 ( VAR_47 ) ; goto VAR_48 ; } if ( VAR_49 ) { if ( VAR_50 != VAR_51 ) { METHOD_4 ( ""bpf_jit:proglen=%d!=oldproglen=%d\\n"" , VAR_52 , VAR_53 ) ; goto VAR_54 ; } break ; } if ( VAR_55 == VAR_56 ) { VAR_57 = METHOD_5 ( VAR_58 , & VAR_59 , 1 , VAR_60 ) ; if ( ! VAR_61 ) goto VAR_62 ; } VAR_63 = VAR_64 ; } if ( VAR_65 > 1 ) METHOD_6 ( VAR_66 -> VAR_67 , VAR_68 , 0 , VAR_69 ) ; if ( VAR_70 ) { METHOD_7 ( VAR_71 , VAR_72 + VAR_73 ) ; METHOD_8 ( ( unsigned TYPE_6 ) VAR_74 , VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = ( TYPE_7 * ) VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; } VAR_83 : METHOD_9 ( VAR_84 ) ; }",490
491,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 * VAR_7 = VAR_8 -> VAR_9 ;  TYPE_7 VAR_10 = VAR_11 -> VAR_12 ;  TYPE_8 VAR_13 [ VAR_14 ] ; TYPE_9 VAR_15 , VAR_16 ; TYPE_10 * VAR_17 = VAR_18 ; if ( VAR_19 == VAR_20 ) return VAR_21 -> VAR_22 ; else if ( ! VAR_23 && ( ( VAR_24 == VAR_25 && VAR_26 == 0 ) || ( VAR_27 == VAR_28 && VAR_29 == VAR_30 -> VAR_31 ) ) ) return VAR_32 -> VAR_33 ;  else if ( ( VAR_34 -> VAR_35 == - 1 && VAR_36 == VAR_37 ) )  return METHOD_1 ( VAR_38 ) ; if ( VAR_39 == VAR_40 ) VAR_41 += VAR_42 -> VAR_43 ; else if ( VAR_44 == VAR_45 ) VAR_46 += VAR_47 -> VAR_48 ; else if ( VAR_49 != VAR_50 ) return METHOD_2 ( VAR_51 ) ; if ( VAR_52 < 0 ) return METHOD_3 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; if ( VAR_57 -> VAR_58 && VAR_59 -> VAR_60 ) return METHOD_4 ( VAR_61 ) ; VAR_62 = VAR_63 -> VAR_64 - VAR_65 -> VAR_66 ; METHOD_5 ( VAR_67 , VAR_68 -> VAR_69 , VAR_70 ) ; VAR_71 -> VAR_72 = VAR_73 ; if ( ( VAR_74 = METHOD_6 ( VAR_75 , & VAR_76 ) ) < 0 ) { METHOD_7 ( & VAR_77 ) ; METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 , VAR_81 ) ; VAR_82 -> VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 = VAR_88 -> VAR_89 + VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; return VAR_97 ; } METHOD_9 ( & VAR_98 ) ; METHOD_10 ( VAR_99 ) ; return VAR_100 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 -> VAR_6 ; TYPE_6 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_7 VAR_10 = VAR_11 -> VAR_12 ; TYPE_8 VAR_13 [ VAR_14 ] ; TYPE_9 VAR_15 , VAR_16 ; TYPE_10 * VAR_17 = VAR_18 ; if ( VAR_19 == VAR_20 ) return VAR_21 -> VAR_22 ; else if ( ! VAR_23 && ( ( VAR_24 == VAR_25 && VAR_26 == 0 ) || ( VAR_27 == VAR_28 && VAR_29 == VAR_30 -> VAR_31 ) ) ) return VAR_32 -> VAR_33 ; else if ( ( VAR_34 -> VAR_35 == - 1 && VAR_36 == VAR_37 ) ) return METHOD_1 ( VAR_38 ) ; if ( VAR_39 == VAR_40 ) VAR_41 += VAR_42 -> VAR_43 ; else if ( VAR_44 == VAR_45 ) VAR_46 += VAR_47 -> VAR_48 ; else if ( VAR_49 != VAR_50 ) return METHOD_2 ( VAR_51 ) ; if ( VAR_52 < 0 ) return METHOD_3 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; if ( VAR_57 -> VAR_58 && VAR_59 -> VAR_60 ) return METHOD_4 ( VAR_61 ) ; VAR_62 = VAR_63 -> VAR_64 - VAR_65 -> VAR_66 ; METHOD_5 ( VAR_67 , VAR_68 -> VAR_69 , VAR_70 ) ; VAR_71 -> VAR_72 = VAR_73 ; if ( ( VAR_74 = METHOD_6 ( VAR_75 , & VAR_76 ) ) < 0 ) { METHOD_7 ( & VAR_77 ) ; METHOD_8 ( VAR_78 -> VAR_79 , VAR_80 , VAR_81 ) ; VAR_82 -> VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 = VAR_88 -> VAR_89 + VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; return VAR_97 ; } METHOD_9 ( & VAR_98 ) ; METHOD_10 ( VAR_99 ) ; return VAR_100 ; }",491
492,TYPE_0 METHOD_0 ( ) {  METHOD_1 ( ) ;  METHOD_2 ( VAR_0 ) ; },TYPE_0 METHOD_0 ( ) { METHOD_2 ( VAR_0 ) ; },492
493,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 128 ] ;  TYPE_4 VAR_3 = METHOD_1 ( VAR_4 , sizeof ( VAR_5 ) , VAR_6 , 0 ) ;   METHOD_2 ( VAR_7 , VAR_8 , VAR_9 ) ;  METHOD_3 ( VAR_10 , ""\\n"" , 1 ) ; return 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 [ 128 ] ; TYPE_4 VAR_3 = METHOD_1 ( VAR_4 , sizeof ( VAR_5 ) , VAR_6 , 0 ) ; METHOD_4 ( VAR_10 , ""\\n"" , 1 ) ; return 1 ; }",493
494,TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 VAR_2 = 0 ; if ( ! VAR_3 ) {  return VAR_4 ;  } while ( VAR_5 [ VAR_6 ] != 0 || VAR_7 [ VAR_8 + 1 ] != 0 ) { VAR_9 ++ ; } VAR_10 = METHOD_1 ( VAR_11 + 2 ) ; VAR_12 = 0 ; while ( VAR_13 [ VAR_14 ] != 0 || VAR_15 [ VAR_16 + 1 ] != 0 ) { VAR_17 [ VAR_18 ] = 0xFF & VAR_19 [ VAR_20 ] ; VAR_21 ++ ; } VAR_22 [ VAR_23 ++ ] = '\\0' ; VAR_24 [ VAR_25 ++ ] = '\\0' ; return VAR_26 ; },TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 VAR_2 = 0 ; if ( ! VAR_3 ) { return VAR_27 ; } while ( VAR_5 [ VAR_6 ] != 0 || VAR_7 [ VAR_8 + 1 ] != 0 ) { VAR_9 ++ ; } VAR_10 = METHOD_1 ( VAR_11 + 2 ) ; VAR_12 = 0 ; while ( VAR_13 [ VAR_14 ] != 0 || VAR_15 [ VAR_16 + 1 ] != 0 ) { VAR_17 [ VAR_18 ] = 0xFF & VAR_19 [ VAR_20 ] ; VAR_21 ++ ; } VAR_22 [ VAR_23 ++ ] = '\\0' ; VAR_24 [ VAR_25 ++ ] = '\\0' ; return VAR_26 ; },494
495,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 ) { const struct STRUCT_OR_UNION_1 * VAR_1 ; unsigned TYPE_1 VAR_2 ;  if ( ! METHOD_1 ( & VAR_3 -> VAR_4 ) )  return VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 ) ; if ( METHOD_3 ( VAR_8 -> VAR_9 . VAR_10 . VAR_11 , VAR_12 ) != 0 ) return VAR_13 ; VAR_14 = ( ( struct STRUCT_OR_UNION_2 * ) VAR_15 ) -> VAR_16 ; VAR_17 = - VAR_18 - 1 ; return VAR_19 == VAR_20 || VAR_21 == VAR_22 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 ) { const struct STRUCT_OR_UNION_1 * VAR_1 ; unsigned TYPE_1 VAR_2 ; if ( ! METHOD_1 ( VAR_7 ) ) return VAR_5 ; VAR_6 = METHOD_2 ( VAR_7 ) ; if ( METHOD_3 ( VAR_8 -> VAR_9 . VAR_10 . VAR_11 , VAR_12 ) != 0 ) return VAR_13 ; VAR_14 = ( ( struct STRUCT_OR_UNION_2 * ) VAR_15 ) -> VAR_16 ; VAR_17 = - VAR_18 - 1 ; return VAR_19 == VAR_20 || VAR_21 == VAR_22 ; }",495
496,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , const TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; VAR_9 . VAR_10 = VAR_11 -> VAR_12 ; VAR_13 . VAR_14 = ( TYPE_10 * ) VAR_15 -> VAR_16 ; VAR_17 = METHOD_1 ( & VAR_18 , VAR_19 ) ; if ( VAR_20 )  return VAR_21 ;  VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ? VAR_25 : VAR_26 , & VAR_27 , VAR_28 -> VAR_29 , * VAR_30 ) ; if ( VAR_31 ) { * VAR_32 = ""INVALID_S4U2SELF_CHECKSUM"" ; METHOD_3 ( VAR_33 , * VAR_34 ) ; * VAR_35 = VAR_36 ; return VAR_37 ; } if ( METHOD_4 ( VAR_38 , ( * VAR_39 ) -> VAR_40 . VAR_41 ) == 0 || ( * VAR_42 ) -> VAR_43 . VAR_44 . VAR_45 != 0 ) { * VAR_46 = ""INVALID_S4U2SELF_REQUEST"" ; METHOD_5 ( VAR_47 , * VAR_48 ) ; * VAR_49 = VAR_50 ; return VAR_51 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * * VAR_5 , const TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; VAR_9 . VAR_10 = VAR_11 -> VAR_12 ; VAR_13 . VAR_14 = ( TYPE_10 * ) VAR_15 -> VAR_16 ; VAR_17 = METHOD_1 ( & VAR_18 , VAR_19 ) ; if ( VAR_20 ) return VAR_21 ; VAR_22 = METHOD_2 ( VAR_23 , VAR_24 ? VAR_25 : VAR_26 , & VAR_27 , VAR_28 -> VAR_29 , * VAR_30 ) ; if ( VAR_31 ) { * VAR_32 = ""INVALID_S4U2SELF_CHECKSUM"" ; METHOD_3 ( VAR_33 , * VAR_34 ) ; * VAR_35 = VAR_36 ; return VAR_37 ; } if ( METHOD_4 ( VAR_38 , ( * VAR_39 ) -> VAR_40 . VAR_41 ) == 0 || ( * VAR_42 ) -> VAR_43 . VAR_44 . VAR_45 != 0 ) { * VAR_46 = ""INVALID_S4U2SELF_REQUEST"" ; METHOD_5 ( VAR_47 , * VAR_48 ) ; * VAR_49 = VAR_50 ; return VAR_51 ; } return 0 ; }",496
497,"TYPE_0  METHOD_0 ( TYPE_1 METHOD_1 , TYPE_2 VAR_0 , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5  VAR_3 , TYPE_6 VAR_4 , TYPE_7 * VAR_5 ) { TYPE_8 VAR_6 ; if ( ! METHOD_2 ) { METHOD_3 ( VAR_7 , ""fieldargisrequiredforarg"" ) ; return VAR_8 ; } VAR_9 = ( TYPE_9 ) METHOD_4 ( VAR_10 , sizeof ( * VAR_11 ) ) ; if ( ! VAR_12 ) return VAR_13 ; VAR_14 -> METHOD_5 = METHOD_6 ; VAR_15 -> VAR_16 = VAR_17 ;  VAR_18 -> VAR_19 = VAR_20 ;  VAR_21 -> VAR_22 = VAR_23 ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; return VAR_30 ; }","TYPE_0 METHOD_0 ( TYPE_1 METHOD_1 , TYPE_2 VAR_0 , TYPE_3 VAR_1 , TYPE_4 VAR_2 , TYPE_5 VAR_3 , TYPE_6 VAR_4 , TYPE_7 * VAR_5 ) { TYPE_8 VAR_6 ; if ( ! METHOD_2 ) { METHOD_3 ( VAR_7 , ""fieldargisrequiredforarg"" ) ; return VAR_8 ; } VAR_9 = ( TYPE_9 ) METHOD_4 ( VAR_10 , sizeof ( * VAR_11 ) ) ; if ( ! VAR_12 ) return VAR_13 ; VAR_14 -> METHOD_5 = METHOD_6 ; VAR_15 -> VAR_16 = VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 = VAR_23 ; VAR_24 -> VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; return VAR_30 ; }",497
498,"static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  {  const TYPE_3 * VAR_2 = ( const TYPE_4 * ) VAR_3 ;  if ( METHOD_1 ( VAR_4 ) & VAR_5 ) { METHOD_2 ( ( VAR_6 , ""A"" ) ) ; } if ( METHOD_3 ( VAR_7 ) & VAR_8 ) { METHOD_4 ( ( VAR_9 , ""S"" ) ) ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { const TYPE_3 * VAR_2 = ( const TYPE_4 * ) VAR_3 ; if ( VAR_10 < 4 ) { METHOD_4 ( ( VAR_9 , ""AVPtooshort"" ) ) ; return ; } if ( METHOD_1 ( VAR_4 ) & VAR_5 ) { METHOD_2 ( ( VAR_6 , ""A"" ) ) ; } if ( METHOD_3 ( VAR_7 ) & VAR_8 ) { METHOD_4 ( ( VAR_9 , ""S"" ) ) ; } }",498
499,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 VAR_5 = 0 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 = METHOD_1 ( VAR_8 , VAR_9 -> VAR_10 ) ; TYPE_7 VAR_11 = METHOD_2 ( VAR_12 , VAR_13 -> VAR_14 ) ; TYPE_8 VAR_15 ; TYPE_9 VAR_16 = 0 ;  TYPE_10 VAR_17 = VAR_18 -> VAR_19 ;  TYPE_11 VAR_20 = 0 ; TYPE_12 VAR_21 ; TYPE_13 VAR_22 = 0 ; TYPE_14 VAR_23 = 0 ; TYPE_15 VAR_24 [ VAR_25 + 1 ] ; TYPE_16 * VAR_26 = VAR_27 -> VAR_28 ;  METHOD_3 ( VAR_29 , 0 , sizeof ( VAR_30 ) ) ;  VAR_31 -> VAR_32 = & VAR_33 -> VAR_34 ; if ( VAR_35 -> VAR_36 == VAR_37 ) VAR_38 -> VAR_39 = 0 ; else VAR_40 -> VAR_41 = VAR_42 -> VAR_43 . VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; else if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; VAR_56 = ( VAR_57 < 16 ) ? 4 : VAR_58 / 4 ; METHOD_4 ( VAR_59 , VAR_60 -> VAR_61 ) ; METHOD_5 ( VAR_62 , VAR_63 ) ; METHOD_6 ( VAR_64 , & VAR_65 -> VAR_66 . VAR_67 , VAR_68 ) ; VAR_69 = METHOD_7 ( VAR_70 , VAR_71 -> VAR_72 ) ; VAR_73 [ VAR_74 ] = VAR_75 ; VAR_76 = VAR_77 ; while ( VAR_78 > 0 ) { VAR_79 = ( VAR_80 >> ( 15 - ( VAR_81 / 8 ) ) ) * VAR_82 ; if ( VAR_83 -> VAR_84 . VAR_85 < 20 ) VAR_86 = VAR_87 * VAR_88 -> VAR_89 . VAR_90 / 20 ; VAR_91 = ( ( VAR_92 + VAR_93 ) > VAR_94 ) ? VAR_95 : ( VAR_96 + VAR_97 ) ; VAR_98 = ( ( VAR_99 - VAR_100 ) < VAR_101 ) ? VAR_102 : ( VAR_103 - VAR_104 ) ; if ( ( VAR_105 <= 0 ) && ( VAR_106 != VAR_107 ) ) { if ( VAR_108 [ VAR_109 ] == 0 ) { METHOD_8 ( VAR_110 , VAR_111 -> VAR_112 ) ; METHOD_9 ( VAR_113 , VAR_114 ) ; METHOD_10 ( VAR_115 , & VAR_116 -> VAR_117 . VAR_118 , VAR_119 ) ; VAR_120 = METHOD_11 ( VAR_121 , VAR_122 -> VAR_123 ) ; VAR_124 [ VAR_125 ] = VAR_126 ; } else VAR_127 = VAR_128 [ VAR_129 ] ; if ( ( VAR_130 - VAR_131 ) < VAR_132 ) { if ( VAR_133 < VAR_134 ) VAR_135 = VAR_136 ; VAR_137 = VAR_138 ; } } if ( ( VAR_139 >= 0 ) && ( VAR_140 != VAR_141 ) ) { if ( VAR_142 [ VAR_143 ] == 0 ) { METHOD_12 ( VAR_144 , VAR_145 -> VAR_146 ) ; METHOD_13 ( VAR_147 , VAR_148 ) ; METHOD_14 ( VAR_149 , & VAR_150 -> VAR_151 . VAR_152 , VAR_153 ) ; VAR_154 = METHOD_15 ( VAR_155 , VAR_156 -> VAR_157 ) ; VAR_158 [ VAR_159 ] = VAR_160 ; } else VAR_161 = VAR_162 [ VAR_163 ] ; if ( VAR_164 < ( VAR_165 - VAR_166 ) ) { VAR_167 = VAR_168 ; VAR_169 = VAR_170 ; } } if ( VAR_171 == VAR_172 ) { VAR_173 = VAR_174 / 2 ; VAR_175 = 0 ; } else { VAR_176 = ( VAR_177 < VAR_178 ) ? - 1 : 1 ; VAR_179 = VAR_180 ; } } VAR_181 -> VAR_182 = VAR_183 ; VAR_184 -> VAR_185 = VAR_186 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 VAR_5 = 0 ; TYPE_5 VAR_6 = 0 ; TYPE_6 VAR_7 = METHOD_1 ( VAR_8 , VAR_9 -> VAR_10 ) ; TYPE_7 VAR_11 = METHOD_2 ( VAR_12 , VAR_13 -> VAR_14 ) ; TYPE_8 VAR_15 ; TYPE_9 VAR_16 = 0 ; TYPE_10 VAR_17 = VAR_18 -> VAR_19 ; TYPE_11 VAR_20 = 0 ; TYPE_12 VAR_21 ; TYPE_13 VAR_22 = 0 ; TYPE_14 VAR_23 = 0 ; TYPE_15 VAR_24 [ VAR_25 + 1 ] ; TYPE_16 * VAR_26 = VAR_27 -> VAR_28 ; METHOD_3 ( VAR_29 , 0 , sizeof ( VAR_30 ) ) ; VAR_31 -> VAR_32 = & VAR_33 -> VAR_34 ; if ( VAR_35 -> VAR_36 == VAR_37 ) VAR_38 -> VAR_39 = 0 ; else VAR_40 -> VAR_41 = VAR_42 -> VAR_43 . VAR_44 ; VAR_45 = VAR_46 -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; else if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; VAR_56 = ( VAR_57 < 16 ) ? 4 : VAR_58 / 4 ; METHOD_4 ( VAR_59 , VAR_60 -> VAR_61 ) ; METHOD_5 ( VAR_62 , VAR_63 ) ; METHOD_6 ( VAR_64 , & VAR_65 -> VAR_66 . VAR_67 , VAR_68 ) ; VAR_69 = METHOD_7 ( VAR_70 , VAR_71 -> VAR_72 ) ; VAR_73 [ VAR_74 ] = VAR_75 ; VAR_76 = VAR_77 ; while ( VAR_78 > 0 ) { VAR_79 = ( VAR_80 >> ( 15 - ( VAR_81 / 8 ) ) ) * VAR_82 ; if ( VAR_83 -> VAR_84 . VAR_85 < 20 ) VAR_86 = VAR_87 * VAR_88 -> VAR_89 . VAR_90 / 20 ; VAR_91 = ( ( VAR_92 + VAR_93 ) > VAR_94 ) ? VAR_95 : ( VAR_96 + VAR_97 ) ; VAR_98 = ( ( VAR_99 - VAR_100 ) < VAR_101 ) ? VAR_102 : ( VAR_103 - VAR_104 ) ; if ( ( VAR_105 <= 0 ) && ( VAR_106 != VAR_107 ) ) { if ( VAR_108 [ VAR_109 ] == 0 ) { METHOD_8 ( VAR_110 , VAR_111 -> VAR_112 ) ; METHOD_9 ( VAR_113 , VAR_114 ) ; METHOD_10 ( VAR_115 , & VAR_116 -> VAR_117 . VAR_118 , VAR_119 ) ; VAR_120 = METHOD_11 ( VAR_121 , VAR_122 -> VAR_123 ) ; VAR_124 [ VAR_125 ] = VAR_126 ; } else VAR_127 = VAR_128 [ VAR_129 ] ; if ( ( VAR_130 - VAR_131 ) < VAR_132 ) { if ( VAR_133 < VAR_134 ) VAR_135 = VAR_136 ; VAR_137 = VAR_138 ; } } if ( ( VAR_139 >= 0 ) && ( VAR_140 != VAR_141 ) ) { if ( VAR_142 [ VAR_143 ] == 0 ) { METHOD_12 ( VAR_144 , VAR_145 -> VAR_146 ) ; METHOD_13 ( VAR_147 , VAR_148 ) ; METHOD_14 ( VAR_149 , & VAR_150 -> VAR_151 . VAR_152 , VAR_153 ) ; VAR_154 = METHOD_15 ( VAR_155 , VAR_156 -> VAR_157 ) ; VAR_158 [ VAR_159 ] = VAR_160 ; } else VAR_161 = VAR_162 [ VAR_163 ] ; if ( VAR_164 < ( VAR_165 - VAR_166 ) ) { VAR_167 = VAR_168 ; VAR_169 = VAR_170 ; } } if ( VAR_171 == VAR_172 ) { VAR_173 = VAR_174 / 2 ; VAR_175 = 0 ; } else { VAR_176 = ( VAR_177 < VAR_178 ) ? - 1 : 1 ; VAR_179 = VAR_180 ; } } VAR_181 -> VAR_182 = VAR_183 ; VAR_184 -> VAR_185 = VAR_186 ; }",499
500,"static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ;  METHOD_0 ( VAR_3 . VAR_4 , ""cipher"" , sizeof ( VAR_5 . VAR_6 ) ) ;  VAR_7 . VAR_8 = VAR_9 -> VAR_10 ; VAR_11 . VAR_12 = VAR_13 -> VAR_14 . VAR_15 ; VAR_16 . VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; if ( METHOD_1 ( VAR_21 , VAR_22 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_23 ) ) goto VAR_24 ; return 0 ; VAR_25 : return - VAR_26 ; }","static TYPE_0 STRUCT_OR_UNION_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 VAR_2 ; METHOD_0 ( VAR_3 . VAR_4 , ""cipher"" , sizeof ( VAR_5 . VAR_6 ) ) ; VAR_7 . VAR_8 = VAR_9 -> VAR_10 ; VAR_11 . VAR_12 = VAR_13 -> VAR_14 . VAR_15 ; VAR_16 . VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; if ( METHOD_1 ( VAR_21 , VAR_22 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_23 ) ) goto VAR_24 ; return 0 ; VAR_25 : return - VAR_26 ; }",500
501,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 = { 0 } ;  VAR_3 . VAR_4 = ( VAR_5 -> VAR_6 + 15 ) / 16 ; VAR_7 . VAR_8 = ( VAR_9 -> VAR_10 + 15 ) / 16 ; VAR_11 . VAR_12 = VAR_13 ; if ( METHOD_1 ( VAR_14 , VAR_15 , & VAR_16 ) ) METHOD_2 ( VAR_17 , ""Failedtosetactivemap"" ) ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 = { 0 } ; VAR_3 . VAR_4 = ( VAR_5 -> VAR_6 + 15 ) / 16 ; VAR_7 . VAR_8 = ( VAR_9 -> VAR_10 + 15 ) / 16 ; VAR_11 . VAR_12 = VAR_13 ; if ( METHOD_1 ( VAR_14 , VAR_15 , & VAR_16 ) ) METHOD_2 ( VAR_17 , ""Failedtosetactivemap"" ) ; }",501
502,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; VAR_12 * VAR_13 ; VAR_14 = & VAR_15 -> VAR_16 ; if ( ( ! VAR_17 -> VAR_18 && VAR_19 -> VAR_20 != 1 ) || ( VAR_21 -> VAR_22 && VAR_23 -> VAR_24 >= 1 ) ) { return VAR_25 ; } if ( VAR_26 % VAR_27 ) {  return VAR_28 ;  } VAR_29 = METHOD_1 ( & VAR_30 , & VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; if ( VAR_35 != 0 ) { return VAR_36 ; } if ( VAR_37 -> VAR_38 ) { METHOD_2 ( & VAR_39 . VAR_40 , VAR_41 , VAR_42 , VAR_43 , 0 ) ; VAR_44 . VAR_45 . VAR_46 = VAR_47 ; VAR_48 . VAR_49 . VAR_50 = VAR_51 ; VAR_52 = METHOD_3 ( VAR_53 , & VAR_54 , 1 ) ; } else { VAR_55 = METHOD_4 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ; } METHOD_5 ( VAR_60 , VAR_61 ) ; if ( VAR_62 != 0 ) { return VAR_63 ; } METHOD_6 ( & VAR_64 ) ; VAR_65 = METHOD_7 ( VAR_66 , 1 , VAR_67 , & VAR_68 , VAR_69 , VAR_70 -> VAR_71 ? VAR_72 : VAR_73 ) ; if ( VAR_74 == VAR_75 ) { return VAR_76 ; } if ( VAR_77 -> VAR_78 ) { METHOD_8 ( VAR_79 , VAR_80 ) ; VAR_81 -> VAR_82 = 1 ; VAR_83 -> VAR_84 = 1 ; } else { METHOD_9 ( VAR_85 , VAR_86 ) ; VAR_87 -> VAR_88 = 1 ; VAR_89 -> VAR_90 += 2 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 * VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 ; VAR_12 * VAR_13 ; VAR_14 = & VAR_15 -> VAR_16 ; if ( ( ! VAR_17 -> VAR_18 && VAR_19 -> VAR_20 != 1 ) || ( VAR_21 -> VAR_22 && VAR_23 -> VAR_24 >= 1 ) ) { return VAR_25 ; } if ( VAR_26 % VAR_27 ) { return VAR_28 ; } if ( VAR_41 / VAR_27 > VAR_89 -> VAR_91 ) { return VAR_92 ; } VAR_29 = METHOD_1 ( & VAR_30 , & VAR_31 , VAR_32 , VAR_33 , VAR_34 ) ; if ( VAR_35 != 0 ) { return VAR_36 ; } if ( VAR_37 -> VAR_38 ) { METHOD_2 ( & VAR_39 . VAR_40 , VAR_41 , VAR_42 , VAR_43 , 0 ) ; VAR_44 . VAR_45 . VAR_46 = VAR_47 ; VAR_48 . VAR_49 . VAR_50 = VAR_51 ; VAR_52 = METHOD_3 ( VAR_53 , & VAR_54 , 1 ) ; } else { VAR_55 = METHOD_4 ( VAR_56 , VAR_57 , VAR_58 , VAR_59 ) ; } METHOD_5 ( VAR_60 , VAR_61 ) ; if ( VAR_62 != 0 ) { return VAR_63 ; } METHOD_6 ( & VAR_64 ) ; VAR_65 = METHOD_7 ( VAR_66 , 1 , VAR_67 , & VAR_68 , VAR_69 , VAR_70 -> VAR_71 ? VAR_72 : VAR_73 ) ; if ( VAR_74 == VAR_75 ) { return VAR_76 ; } if ( VAR_77 -> VAR_78 ) { METHOD_8 ( VAR_79 , VAR_80 ) ; VAR_81 -> VAR_82 = 1 ; VAR_83 -> VAR_84 = 1 ; } else { METHOD_9 ( VAR_85 , VAR_86 ) ; VAR_87 -> VAR_88 = 1 ; VAR_89 -> VAR_90 += 2 ; } return 0 ; }",502
503,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 ; TYPE_4 VAR_4 = 0 ; TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = 0 ; const TYPE_7 VAR_7 = VAR_8 -> VAR_9 . VAR_10 . VAR_11 * 1000 * ( TYPE_8 ) VAR_12 -> VAR_13 . VAR_14 / ( TYPE_9 ) VAR_15 -> VAR_16 . VAR_17 ; TYPE_10 VAR_18 = VAR_19 -> VAR_20 ++ % VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 [ VAR_25 ] = VAR_26 ; VAR_27 -> VAR_28 [ VAR_29 ] = ( TYPE_11 ) VAR_30 -> VAR_31 . VAR_32 . VAR_33 ; if ( VAR_34 < VAR_35 -> VAR_36 ) return ;  VAR_37 = VAR_38 ;  for ( VAR_39 = VAR_40 -> VAR_41 ; VAR_42 > 0 && VAR_43 -> VAR_44 - VAR_45 < VAR_46 -> VAR_47 ; VAR_48 -- ) { const TYPE_12 VAR_49 = ( VAR_50 - 1 ) % VAR_51 -> VAR_52 ; VAR_53 = VAR_54 -> VAR_55 [ VAR_56 ] ; if ( VAR_57 - VAR_58 > VAR_59 -> VAR_60 ) break ; VAR_61 += VAR_62 -> VAR_63 [ VAR_64 ] ; } if ( VAR_65 == VAR_66 ) return ; VAR_67 = VAR_68 * 8 * 1000 / ( VAR_69 - VAR_70 ) ; VAR_71 = ( TYPE_13 ) ( VAR_72 * ( VAR_73 / 2 ) / ( VAR_74 -> VAR_75 * 1000 ) ) ; if ( VAR_76 < 0 ) VAR_77 = 0 ; if ( VAR_78 > VAR_79 - 1 ) VAR_80 = VAR_81 - 1 ; if ( VAR_82 -> VAR_83 [ VAR_84 ] . VAR_85 > VAR_86 ) VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = ( TYPE_14 ) VAR_91 ; if ( VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 < VAR_96 ) VAR_97 -> VAR_98 [ VAR_99 ] . VAR_100 = ( TYPE_15 ) VAR_101 ; VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 ++ ; VAR_106 -> VAR_107 ++ ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 ) { TYPE_3 VAR_3 ; TYPE_4 VAR_4 = 0 ; TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = 0 ; const TYPE_7 VAR_7 = VAR_8 -> VAR_9 . VAR_10 . VAR_11 * 1000 * ( TYPE_8 ) VAR_12 -> VAR_13 . VAR_14 / ( TYPE_9 ) VAR_15 -> VAR_16 . VAR_17 ; TYPE_10 VAR_18 = VAR_19 -> VAR_20 ++ % VAR_21 -> VAR_22 ; VAR_23 -> VAR_24 [ VAR_25 ] = VAR_26 ; VAR_27 -> VAR_28 [ VAR_29 ] = ( TYPE_11 ) VAR_30 -> VAR_31 . VAR_32 . VAR_33 ; if ( VAR_34 < VAR_35 -> VAR_36 ) return ; if ( ! VAR_74 -> VAR_75 ) return ; VAR_37 = VAR_38 ; for ( VAR_39 = VAR_40 -> VAR_41 ; VAR_42 > 0 && VAR_43 -> VAR_44 - VAR_45 < VAR_46 -> VAR_47 ; VAR_48 -- ) { const TYPE_12 VAR_49 = ( VAR_50 - 1 ) % VAR_51 -> VAR_52 ; VAR_53 = VAR_54 -> VAR_55 [ VAR_56 ] ; if ( VAR_57 - VAR_58 > VAR_59 -> VAR_60 ) break ; VAR_61 += VAR_62 -> VAR_63 [ VAR_64 ] ; } if ( VAR_65 == VAR_66 ) return ; VAR_67 = VAR_68 * 8 * 1000 / ( VAR_69 - VAR_70 ) ; VAR_71 = ( TYPE_13 ) ( VAR_72 * ( VAR_73 / 2 ) / ( VAR_74 -> VAR_75 * 1000 ) ) ; if ( VAR_76 < 0 ) VAR_77 = 0 ; if ( VAR_78 > VAR_79 - 1 ) VAR_80 = VAR_81 - 1 ; if ( VAR_82 -> VAR_83 [ VAR_84 ] . VAR_85 > VAR_86 ) VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = ( TYPE_14 ) VAR_91 ; if ( VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 < VAR_96 ) VAR_97 -> VAR_98 [ VAR_99 ] . VAR_100 = ( TYPE_15 ) VAR_101 ; VAR_102 -> VAR_103 [ VAR_104 ] . VAR_105 ++ ; VAR_106 -> VAR_107 ++ ; }",503
504,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = & METHOD_1 ( VAR_5 ) -> VAR_6 [ VAR_7 ] . VAR_8 ; TYPE_4 VAR_9 , VAR_10 = 0 ; TYPE_5 VAR_11 = - 1 ; METHOD_2 ( & VAR_12 -> VAR_13 ) ; for ( VAR_14 = VAR_15 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { if ( VAR_19 < 0 && ( VAR_20 -> VAR_21 [ VAR_22 ] == 0 ) ) { VAR_23 = VAR_24 ; continue ; } if ( VAR_25 -> VAR_26 [ VAR_27 ] && ( VAR_28 == ( VAR_29 & METHOD_3 ( VAR_30 -> VAR_31 [ VAR_32 ] ) ) ) ) { * VAR_33 = VAR_34 ; ++ VAR_35 -> VAR_36 [ VAR_37 ] ; goto VAR_38 ;  }  } if ( VAR_39 -> VAR_40 == VAR_41 -> VAR_42 ) { VAR_43 = - VAR_44 ; goto VAR_45 ; } VAR_46 -> VAR_47 [ VAR_48 ] = 1 ; VAR_49 -> VAR_50 [ VAR_51 ] = METHOD_4 ( VAR_52 | VAR_53 ) ; VAR_54 = METHOD_5 ( VAR_55 , VAR_56 , VAR_57 -> VAR_58 ) ; if ( METHOD_6 ( VAR_59 ) ) { METHOD_7 ( VAR_60 , ""Failedaddingvlan:%u\\n"" , VAR_61 ) ; VAR_62 -> VAR_63 [ VAR_64 ] = 0 ; VAR_65 -> VAR_66 [ VAR_67 ] = 0 ; goto VAR_68 ; } * VAR_69 = VAR_70 ; ++ VAR_71 -> VAR_72 ; VAR_73 : METHOD_8 ( & VAR_74 -> VAR_75 ) ; return VAR_76 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 = & METHOD_1 ( VAR_5 ) -> VAR_6 [ VAR_7 ] . VAR_8 ; TYPE_4 VAR_9 , VAR_10 = 0 ; TYPE_5 VAR_11 = - 1 ; METHOD_2 ( & VAR_12 -> VAR_13 ) ; for ( VAR_14 = VAR_15 ; VAR_16 < VAR_17 ; VAR_18 ++ ) { if ( VAR_19 < 0 && ( VAR_20 -> VAR_21 [ VAR_22 ] == 0 ) ) { VAR_23 = VAR_24 ; continue ; } if ( VAR_25 -> VAR_26 [ VAR_27 ] && ( VAR_28 == ( VAR_29 & METHOD_3 ( VAR_30 -> VAR_31 [ VAR_32 ] ) ) ) ) { * VAR_33 = VAR_34 ; ++ VAR_35 -> VAR_36 [ VAR_37 ] ; goto VAR_38 ; } } if ( VAR_39 -> VAR_40 == VAR_41 -> VAR_42 ) { VAR_43 = - VAR_44 ; goto VAR_45 ; } VAR_46 -> VAR_47 [ VAR_48 ] = 1 ; VAR_49 -> VAR_50 [ VAR_51 ] = METHOD_4 ( VAR_52 | VAR_53 ) ; VAR_54 = METHOD_5 ( VAR_55 , VAR_56 , VAR_57 -> VAR_58 ) ; if ( METHOD_6 ( VAR_59 ) ) { METHOD_7 ( VAR_60 , ""Failedaddingvlan:%u\\n"" , VAR_61 ) ; VAR_62 -> VAR_63 [ VAR_64 ] = 0 ; VAR_65 -> VAR_66 [ VAR_67 ] = 0 ; goto VAR_68 ; } * VAR_69 = VAR_70 ; ++ VAR_71 -> VAR_72 ; VAR_73 : METHOD_8 ( & VAR_74 -> VAR_75 ) ; return VAR_76 ; }",504
505,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const unsigned TYPE_1 * VAR_2 , const unsigned TYPE_2 * VAR_3 , const unsigned TYPE_3 * VAR_4 , const unsigned TYPE_4 * VAR_5 , unsigned TYPE_5 VAR_6 ) { unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( ( unsigned TYPE_8 ) VAR_9 % VAR_10 ( struct STRUCT_OR_UNION_2 ) != 0 ||  ( unsigned TYPE_9 * ) VAR_11 + sizeof ( struct STRUCT_OR_UNION_3 ) >= VAR_12 ) {  METHOD_1 ( ""Badoffset%p\\n"" , VAR_13 ) ; return - VAR_14 ; } if ( VAR_15 -> VAR_16 < sizeof ( struct STRUCT_OR_UNION_4 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_2 ( ""checking:element%psize%u\\n"" , VAR_17 , VAR_18 -> VAR_19 ) ; return - VAR_20 ; } VAR_21 = METHOD_3 ( VAR_22 ) ; if ( VAR_23 ) return VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { if ( ! ( VAR_29 & ( 1 << VAR_30 ) ) ) continue ; if ( ( unsigned TYPE_10 * ) VAR_31 - VAR_32 == VAR_33 [ VAR_34 ] ) VAR_35 -> VAR_36 [ VAR_37 ] = VAR_38 [ VAR_39 ] ; if ( ( unsigned TYPE_11 * ) VAR_40 - VAR_41 == VAR_42 [ VAR_43 ] ) { if ( ! METHOD_4 ( VAR_44 ) ) { METHOD_5 ( ""Underflowsmustbeunconditionaland"" ""usetheSTANDARDtargetwith"" ""ACCEPT/DROP\\n"" ) ; return - VAR_45 ; } VAR_46 -> VAR_47 [ VAR_48 ] = VAR_49 [ VAR_50 ] ; } } VAR_51 -> VAR_52 = ( ( struct STRUCT_OR_UNION_6 ) { 0 , 0 } ) ; VAR_53 -> VAR_54 = 0 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const unsigned TYPE_1 * VAR_2 , const unsigned TYPE_2 * VAR_3 , const unsigned TYPE_3 * VAR_4 , const unsigned TYPE_4 * VAR_5 , unsigned TYPE_5 VAR_6 ) { unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( ( unsigned TYPE_8 ) VAR_9 % VAR_10 ( struct STRUCT_OR_UNION_2 ) != 0 || ( unsigned TYPE_9 * ) VAR_11 + sizeof ( struct STRUCT_OR_UNION_3 ) >= VAR_12 ) { METHOD_1 ( ""Badoffset%p\\n"" , VAR_13 ) ; return - VAR_14 ; } if ( VAR_15 -> VAR_16 < sizeof ( struct STRUCT_OR_UNION_4 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_2 ( ""checking:element%psize%u\\n"" , VAR_17 , VAR_18 -> VAR_19 ) ; return - VAR_20 ; } VAR_21 = METHOD_3 ( VAR_22 ) ; if ( VAR_23 ) return VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { if ( ! ( VAR_29 & ( 1 << VAR_30 ) ) ) continue ; if ( ( unsigned TYPE_10 * ) VAR_31 - VAR_32 == VAR_33 [ VAR_34 ] ) VAR_35 -> VAR_36 [ VAR_37 ] = VAR_38 [ VAR_39 ] ; if ( ( unsigned TYPE_11 * ) VAR_40 - VAR_41 == VAR_42 [ VAR_43 ] ) { if ( ! METHOD_4 ( VAR_44 ) ) { METHOD_5 ( ""Underflowsmustbeunconditionaland"" ""usetheSTANDARDtargetwith"" ""ACCEPT/DROP\\n"" ) ; return - VAR_45 ; } VAR_46 -> VAR_47 [ VAR_48 ] = VAR_49 [ VAR_50 ] ; } } VAR_51 -> VAR_52 = ( ( struct STRUCT_OR_UNION_6 ) { 0 , 0 } ) ; VAR_53 -> VAR_54 = 0 ; return 0 ; }",505
506,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; VAR_4 -> VAR_5 = - 1 ; VAR_6 -> VAR_7 = - 1 ;  VAR_8 -> VAR_9 = 0666 ;  if ( ! VAR_10 ) { return 0 ; } if ( VAR_11 -> VAR_12 && * VAR_13 -> VAR_14 ) { struct STRUCT_OR_UNION_2 * VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) { METHOD_2 ( VAR_20 , ""[pool%s]cannotgetuidforuser\'%s\'"" , VAR_21 -> VAR_22 -> VAR_23 , VAR_24 -> VAR_25 ) ; return - 1 ; } VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; } if ( VAR_34 -> VAR_35 && * VAR_36 -> VAR_37 ) { struct STRUCT_OR_UNION_3 * VAR_38 ; VAR_39 = METHOD_3 ( VAR_40 -> VAR_41 ) ; if ( ! VAR_42 ) { METHOD_4 ( VAR_43 , ""[pool%s]cannotgetgidforgroup\'%s\'"" , VAR_44 -> VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; return - 1 ; } VAR_49 -> VAR_50 = VAR_51 -> VAR_52 ; } if ( VAR_53 -> VAR_54 && * VAR_55 -> VAR_56 ) { VAR_57 -> VAR_58 = METHOD_5 ( VAR_59 -> VAR_60 , 0 , 8 ) ; } return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; VAR_4 -> VAR_5 = - 1 ; VAR_6 -> VAR_7 = - 1 ; VAR_8 -> VAR_9 = 0666 ; if ( ! VAR_10 ) { return 0 ; } if ( VAR_11 -> VAR_12 && * VAR_13 -> VAR_14 ) { struct STRUCT_OR_UNION_2 * VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 -> VAR_18 ) ; if ( ! VAR_19 ) { METHOD_2 ( VAR_20 , ""[pool%s]cannotgetuidforuser\'%s\'"" , VAR_21 -> VAR_22 -> VAR_23 , VAR_24 -> VAR_25 ) ; return - 1 ; } VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; } if ( VAR_34 -> VAR_35 && * VAR_36 -> VAR_37 ) { struct STRUCT_OR_UNION_3 * VAR_38 ; VAR_39 = METHOD_3 ( VAR_40 -> VAR_41 ) ; if ( ! VAR_42 ) { METHOD_4 ( VAR_43 , ""[pool%s]cannotgetgidforgroup\'%s\'"" , VAR_44 -> VAR_45 -> VAR_46 , VAR_47 -> VAR_48 ) ; return - 1 ; } VAR_49 -> VAR_50 = VAR_51 -> VAR_52 ; } if ( VAR_53 -> VAR_54 && * VAR_55 -> VAR_56 ) { VAR_57 -> VAR_58 = METHOD_5 ( VAR_59 -> VAR_60 , 0 , 8 ) ; } return 0 ; }",506
507,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 > 32 && VAR_4 < 128 ) { METHOD_1 ( VAR_5 >= 4 ) ; VAR_6 [ 0 ] = '\\'' ; VAR_7 [ 1 ] = ( TYPE_4 ) VAR_8 ; VAR_9 [ 2 ] = '\\'' ; VAR_10 [ 3 ] = 0 ; return ; } switch ( VAR_11 ) { case VAR_12 : METHOD_2 ( VAR_13 , ""EOF"" , VAR_14 ) ; return ; case VAR_15 : METHOD_3 ( VAR_16 , ""ID"" , VAR_17 ) ; return ; case VAR_18 : METHOD_4 ( VAR_19 , ""INT"" , VAR_20 ) ; return ; case VAR_21 : METHOD_5 ( VAR_22 , ""FLOAT"" , VAR_23 ) ; return ; case VAR_24 : METHOD_6 ( VAR_25 , ""STRING"" , VAR_26 ) ; return ; case VAR_27 : METHOD_7 ( VAR_28 , ""UNFINISHEDSTRING"" , VAR_29 ) ; return ; case VAR_30 : METHOD_8 ( VAR_31 , ""TEMPLATELITERAL"" , VAR_32 ) ; return ; case VAR_33 : METHOD_9 ( VAR_34 , ""UNFINISHEDTEMPLATELITERAL"" , VAR_35 ) ; return ; case VAR_36 : METHOD_10 ( VAR_37 , ""REGEX"" , VAR_38 ) ; return ; case VAR_39 : METHOD_11 ( VAR_40 , ""UNFINISHEDREGEX"" , VAR_41 ) ; return ; case VAR_42 : METHOD_12 ( VAR_43 , ""UNFINISHEDCOMMENT"" , VAR_44 ) ; return ; } if ( VAR_45 >= VAR_46 && VAR_47 < VAR_48 ) { const TYPE_5 VAR_49 [ ] = ""==\\0"" ""===\\0"" ""!=\\0"" ""!==\\0"" ""<=\\0"" ""<<\\0"" ""<<=\\0"" "">=\\0"" "">>\\0"" "">>>\\0"" "">>=\\0"" "">>>=\\0"" ""+=\\0"" ""-=\\0"" ""++\\0"" ""--\\0"" ""*=\\0"" ""/=\\0"" ""%=\\0"" ""&=\\0"" ""&&\\0"" ""|=\\0"" ""||\\0"" ""^=\\0"" ""=>\\0"" ""if\\0"" ""else\\0"" ""do\\0"" ""while\\0"" ""for\\0"" ""return\\0"" ""continue\\0"" ""function\\0"" ""return\\0"" ""var\\0"" ""let\\0"" ""const\\0"" ""this\\0"" ""throw\\0"" ""try\\0"" ""catch\\0"" ""finally\\0"" ""true\\0"" ""false\\0"" ""null\\0"" ""undefined\\0"" ""new\\0"" ""in\\0"" ""instanceof\\0"" ""switch\\0"" ""case\\0"" ""default\\0"" ""delete\\0"" ""typeof\\0"" ""void\\0"" ""debugger\\0"" ""class\\0"" ""extends\\0"" ""super\\0"" ""static\\0"" ; unsigned TYPE_6 VAR_50 = 0 ; TYPE_7 VAR_51 = VAR_52 - VAR_53 ; while ( VAR_54 > 0 && VAR_55 < sizeof ( VAR_56 ) ) { while ( VAR_57 [ VAR_58 ] && VAR_59 < sizeof ( VAR_60 ) ) VAR_61 ++ ; VAR_62 ++ ; VAR_63 -- ; } METHOD_13 ( VAR_64 == 0 ) ; METHOD_14 ( VAR_65 , & VAR_66 [ VAR_67 ] , VAR_68 ) ; return ; } METHOD_15 ( VAR_69 >= 10 ) ;  METHOD_16 ( VAR_70 , ""?["" , VAR_71 ) ;  METHOD_17 ( VAR_72 , & VAR_73 [ 2 ] , 10 ) ; METHOD_18 ( VAR_74 , ""]"" , VAR_75 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 > 32 && VAR_4 < 128 ) { METHOD_1 ( VAR_5 >= 4 ) ; VAR_6 [ 0 ] = '\\'' ; VAR_7 [ 1 ] = ( TYPE_4 ) VAR_8 ; VAR_9 [ 2 ] = '\\'' ; VAR_10 [ 3 ] = 0 ; return ; } switch ( VAR_11 ) { case VAR_12 : METHOD_2 ( VAR_13 , ""EOF"" , VAR_14 ) ; return ; case VAR_15 : METHOD_3 ( VAR_16 , ""ID"" , VAR_17 ) ; return ; case VAR_18 : METHOD_4 ( VAR_19 , ""INT"" , VAR_20 ) ; return ; case VAR_21 : METHOD_5 ( VAR_22 , ""FLOAT"" , VAR_23 ) ; return ; case VAR_24 : METHOD_6 ( VAR_25 , ""STRING"" , VAR_26 ) ; return ; case VAR_27 : METHOD_7 ( VAR_28 , ""UNFINISHEDSTRING"" , VAR_29 ) ; return ; case VAR_30 : METHOD_8 ( VAR_31 , ""TEMPLATELITERAL"" , VAR_32 ) ; return ; case VAR_33 : METHOD_9 ( VAR_34 , ""UNFINISHEDTEMPLATELITERAL"" , VAR_35 ) ; return ; case VAR_36 : METHOD_10 ( VAR_37 , ""REGEX"" , VAR_38 ) ; return ; case VAR_39 : METHOD_11 ( VAR_40 , ""UNFINISHEDREGEX"" , VAR_41 ) ; return ; case VAR_42 : METHOD_12 ( VAR_43 , ""UNFINISHEDCOMMENT"" , VAR_44 ) ; return ; } if ( VAR_45 >= VAR_46 && VAR_47 < VAR_48 ) { const TYPE_5 VAR_49 [ ] = ""==\\0"" ""===\\0"" ""!=\\0"" ""!==\\0"" ""<=\\0"" ""<<\\0"" ""<<=\\0"" "">=\\0"" "">>\\0"" "">>>\\0"" "">>=\\0"" "">>>=\\0"" ""+=\\0"" ""-=\\0"" ""++\\0"" ""--\\0"" ""*=\\0"" ""/=\\0"" ""%=\\0"" ""&=\\0"" ""&&\\0"" ""|=\\0"" ""||\\0"" ""^=\\0"" ""=>\\0"" ""if\\0"" ""else\\0"" ""do\\0"" ""while\\0"" ""for\\0"" ""return\\0"" ""continue\\0"" ""function\\0"" ""return\\0"" ""var\\0"" ""let\\0"" ""const\\0"" ""this\\0"" ""throw\\0"" ""try\\0"" ""catch\\0"" ""finally\\0"" ""true\\0"" ""false\\0"" ""null\\0"" ""undefined\\0"" ""new\\0"" ""in\\0"" ""instanceof\\0"" ""switch\\0"" ""case\\0"" ""default\\0"" ""delete\\0"" ""typeof\\0"" ""void\\0"" ""debugger\\0"" ""class\\0"" ""extends\\0"" ""super\\0"" ""static\\0"" ; unsigned TYPE_6 VAR_50 = 0 ; TYPE_7 VAR_51 = VAR_52 - VAR_53 ; while ( VAR_54 > 0 && VAR_55 < sizeof ( VAR_56 ) ) { while ( VAR_57 [ VAR_58 ] && VAR_59 < sizeof ( VAR_60 ) ) VAR_61 ++ ; VAR_62 ++ ; VAR_63 -- ; } METHOD_13 ( VAR_64 == 0 ) ; METHOD_14 ( VAR_65 , & VAR_66 [ VAR_67 ] , VAR_68 ) ; return ; } METHOD_15 ( VAR_69 >= 10 ) ; METHOD_19 ( VAR_74 , VAR_75 , ""?[%d]"" , VAR_72 ) ; }",507
508,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 VAR_5 ; VAR_6 . VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 . VAR_10 ) ; VAR_11 . VAR_12 = METHOD_2 ( VAR_13 -> VAR_14 . VAR_15 ) ; if ( VAR_16 ) { VAR_17 . VAR_18 = VAR_19 ; VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 . VAR_27 ; VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; } else { VAR_33 . VAR_34 = VAR_35 ; VAR_36 . VAR_37 = VAR_38 ; VAR_39 . VAR_40 = VAR_41 -> VAR_42 . VAR_43 ; VAR_44 . VAR_45 = VAR_46 -> VAR_47 . VAR_48 ; }  METHOD_3 ( VAR_49 , & VAR_50 , sizeof ( VAR_51 ) ) ;  }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 ) { struct STRUCT_OR_UNION_2 VAR_5 ; VAR_6 . VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 . VAR_10 ) ; VAR_11 . VAR_12 = METHOD_2 ( VAR_13 -> VAR_14 . VAR_15 ) ; if ( VAR_16 ) { VAR_17 . VAR_18 = VAR_19 ; VAR_20 . VAR_21 = VAR_22 ; VAR_23 . VAR_24 = VAR_25 -> VAR_26 . VAR_27 ; VAR_28 . VAR_29 = VAR_30 -> VAR_31 . VAR_32 ; } else { VAR_33 . VAR_34 = VAR_35 ; VAR_36 . VAR_37 = VAR_38 ; VAR_39 . VAR_40 = VAR_41 -> VAR_42 . VAR_43 ; VAR_44 . VAR_45 = VAR_46 -> VAR_47 . VAR_48 ; } VAR_51 . VAR_52 = 0 ; METHOD_3 ( VAR_49 , & VAR_50 , sizeof ( VAR_51 ) ) ; }",508
509,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = ( struct STRUCT_OR_UNION_8 * ) VAR_9 -> VAR_10 ; TYPE_3 VAR_11 ; unsigned TYPE_4 * asmptr ; struct sk_buff * TYPE_5 ; TYPE_6 VAR_12 , er , qbit ; if ( VAR_13 -> sk_state != TCP_ESTABLISHED ) return - ENOTCONN ; if ( ( TYPE_7 = skb_recv_datagram ( VAR_14 , VAR_15 & ~ MSG_DONTWAIT , VAR_16 & MSG_DONTWAIT , & er ) ) == VAR_17 ) return er ; qbit = ( TYPE_8 -> data [ 0 ] & ROSE_Q_BIT ) == ROSE_Q_BIT ; skb_pull ( TYPE_9 , ROSE_MIN_LEN ) ; if ( VAR_18 -> qbitincl ) { asmptr = skb_push ( TYPE_10 , 1 ) ; * asmptr = qbit ; } VAR_19 ( TYPE_11 ) ; VAR_20 = TYPE_12 -> VAR_21 ; if ( VAR_22 > VAR_23 ) { VAR_24 = VAR_25 ; VAR_26 -> VAR_27 |= VAR_28 ; } METHOD_2 ( TYPE_13 , 0 , VAR_29 -> VAR_30 , VAR_31 ) ; if ( VAR_32 != VAR_33 ) {  VAR_34 -> VAR_35 = VAR_36 ;  VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = VAR_43 -> VAR_44 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 ; if ( VAR_49 -> VAR_50 >= sizeof ( struct STRUCT_OR_UNION_9 ) ) { struct STRUCT_OR_UNION_10 * VAR_51 = ( struct STRUCT_OR_UNION_11 * ) VAR_52 -> VAR_53 ; for ( VAR_54 = 0 ; VAR_55 < VAR_56 -> VAR_57 ; VAR_58 ++ ) VAR_59 -> VAR_60 [ VAR_61 ] = VAR_62 -> VAR_63 [ VAR_64 ] ; VAR_65 -> VAR_66 = sizeof ( struct STRUCT_OR_UNION_12 ) ; } else { if ( VAR_67 -> VAR_68 >= 1 ) { VAR_69 -> VAR_70 = 1 ; VAR_71 -> VAR_72 = VAR_73 -> VAR_74 [ 0 ] ; } VAR_75 -> VAR_76 = sizeof ( struct STRUCT_OR_UNION_13 ) ; } } METHOD_3 ( VAR_77 , TYPE_14 ) ; return VAR_78 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 = ( struct STRUCT_OR_UNION_8 * ) VAR_9 -> VAR_10 ; TYPE_3 VAR_11 ; unsigned TYPE_4 * asmptr ; struct sk_buff * TYPE_5 ; TYPE_6 VAR_12 , er , qbit ; if ( VAR_13 -> sk_state != TCP_ESTABLISHED ) return - ENOTCONN ; if ( ( TYPE_7 = skb_recv_datagram ( VAR_14 , VAR_15 & ~ MSG_DONTWAIT , VAR_16 & MSG_DONTWAIT , & er ) ) == VAR_17 ) return er ; qbit = ( TYPE_8 -> data [ 0 ] & ROSE_Q_BIT ) == ROSE_Q_BIT ; skb_pull ( TYPE_9 , ROSE_MIN_LEN ) ; if ( VAR_18 -> qbitincl ) { asmptr = skb_push ( TYPE_10 , 1 ) ; * asmptr = qbit ; } VAR_19 ( TYPE_11 ) ; VAR_20 = TYPE_12 -> VAR_21 ; if ( VAR_22 > VAR_23 ) { VAR_24 = VAR_25 ; VAR_26 -> VAR_27 |= VAR_28 ; } METHOD_2 ( TYPE_13 , 0 , VAR_29 -> VAR_30 , VAR_31 ) ; if ( VAR_32 != VAR_33 ) { METHOD_4 ( VAR_71 , 0 , VAR_75 -> VAR_76 ) ; VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; VAR_41 -> VAR_42 = VAR_43 -> VAR_44 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 ; if ( VAR_49 -> VAR_50 >= sizeof ( struct STRUCT_OR_UNION_9 ) ) { struct STRUCT_OR_UNION_10 * VAR_51 = ( struct STRUCT_OR_UNION_11 * ) VAR_52 -> VAR_53 ; for ( VAR_54 = 0 ; VAR_55 < VAR_56 -> VAR_57 ; VAR_58 ++ ) VAR_59 -> VAR_60 [ VAR_61 ] = VAR_62 -> VAR_63 [ VAR_64 ] ; VAR_65 -> VAR_66 = sizeof ( struct STRUCT_OR_UNION_12 ) ; } else { if ( VAR_67 -> VAR_68 >= 1 ) { VAR_69 -> VAR_70 = 1 ; VAR_71 -> VAR_72 = VAR_73 -> VAR_74 [ 0 ] ; } VAR_75 -> VAR_76 = sizeof ( struct STRUCT_OR_UNION_13 ) ; } } METHOD_3 ( VAR_77 , TYPE_14 ) ; return VAR_78 ; }",509
510,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const TYPE_4 * VAR_4 ; const struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; METHOD_1 ( ( VAR_8 , ""wb-id:"" ) ) ; if ( VAR_9 < sizeof ( * VAR_10 ) || ! METHOD_2 ( * VAR_11 ) ) return ( - 1 ) ; VAR_12 -= sizeof ( * VAR_13 ) ; METHOD_3 ( ( VAR_14 , ""%u/%s:%u(max%u/%s:%u)"" , METHOD_4 ( & VAR_15 -> VAR_16 . VAR_17 ) , METHOD_5 ( VAR_18 , & VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) , METHOD_6 ( & VAR_23 -> VAR_24 . VAR_25 . VAR_26 ) , METHOD_7 ( & VAR_27 -> VAR_28 ) , METHOD_8 ( VAR_29 , & VAR_30 -> VAR_31 . VAR_32 ) , METHOD_9 ( & VAR_33 -> VAR_34 . VAR_35 ) ) ) ; VAR_36 = METHOD_10 ( & VAR_37 -> VAR_38 . VAR_39 ) ; VAR_40 -= sizeof ( * VAR_41 ) * VAR_42 ; VAR_43 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_44 + 1 ) ; VAR_45 = ( TYPE_7 * ) ( VAR_46 + VAR_47 ) ;  if ( ! METHOD_11 ( VAR_48 , VAR_49 ) ) {  METHOD_12 ( ( VAR_50 , ""\\"""" ) ) ; fn_print ( VAR_51 , ( u_char * ) VAR_52 , ( u_char * ) VAR_53 + VAR_54 ) ; METHOD_13 ( ( VAR_55 , ""\\"""" ) ) ; } VAR_56 = '<' ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 && METHOD_14 ( * VAR_60 ) ; ++ VAR_61 , ++ VAR_62 ) { METHOD_15 ( ( VAR_63 , ""%c%s:%u"" , VAR_64 , METHOD_16 ( VAR_65 , & VAR_66 -> VAR_67 ) , METHOD_17 ( & VAR_68 -> VAR_69 ) ) ) ; VAR_70 = ',' ; } if ( VAR_71 >= VAR_72 ) { METHOD_18 ( ( VAR_73 , "">"" ) ) ; return ( 0 ) ; } return ( - 1 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 ; const TYPE_4 * VAR_4 ; const struct STRUCT_OR_UNION_1 * VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 ; METHOD_1 ( ( VAR_8 , ""wb-id:"" ) ) ; if ( VAR_9 < sizeof ( * VAR_10 ) || ! METHOD_2 ( * VAR_11 ) ) return ( - 1 ) ; VAR_12 -= sizeof ( * VAR_13 ) ; METHOD_3 ( ( VAR_14 , ""%u/%s:%u(max%u/%s:%u)"" , METHOD_4 ( & VAR_15 -> VAR_16 . VAR_17 ) , METHOD_5 ( VAR_18 , & VAR_19 -> VAR_20 . VAR_21 . VAR_22 ) , METHOD_6 ( & VAR_23 -> VAR_24 . VAR_25 . VAR_26 ) , METHOD_7 ( & VAR_27 -> VAR_28 ) , METHOD_8 ( VAR_29 , & VAR_30 -> VAR_31 . VAR_32 ) , METHOD_9 ( & VAR_33 -> VAR_34 . VAR_35 ) ) ) ; VAR_36 = METHOD_10 ( & VAR_37 -> VAR_38 . VAR_39 ) ; VAR_40 -= sizeof ( * VAR_41 ) * VAR_42 ; VAR_43 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_44 + 1 ) ; VAR_45 = ( TYPE_7 * ) ( VAR_46 + VAR_47 ) ; if ( ! METHOD_11 ( VAR_48 , VAR_49 ) ) { METHOD_12 ( ( VAR_50 , ""\\"""" ) ) ; fn_print ( VAR_51 , ( u_char * ) VAR_52 , ( u_char * ) VAR_53 + VAR_54 ) ; METHOD_13 ( ( VAR_55 , ""\\"""" ) ) ; } VAR_56 = '<' ; for ( VAR_57 = 0 ; VAR_58 < VAR_59 && METHOD_14 ( * VAR_60 ) ; ++ VAR_61 , ++ VAR_62 ) { METHOD_15 ( ( VAR_63 , ""%c%s:%u"" , VAR_64 , METHOD_16 ( VAR_65 , & VAR_66 -> VAR_67 ) , METHOD_17 ( & VAR_68 -> VAR_69 ) ) ) ; VAR_70 = ',' ; } if ( VAR_71 >= VAR_72 ) { METHOD_18 ( ( VAR_73 , "">"" ) ) ; return ( 0 ) ; } return ( - 1 ) ; }",510
511,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; unsigned TYPE_4 VAR_9 , VAR_10 ; struct STRUCT_OR_UNION_6 * VAR_11 , * VAR_12 ; TYPE_5 VAR_13 = 0 ; METHOD_1 ( ""%p%zu\\n"" , VAR_14 , VAR_15 ) ;  VAR_16 -> VAR_17 = 0 ;  METHOD_2 ( VAR_18 ) ; if ( VAR_19 -> VAR_20 == VAR_21 && METHOD_3 ( & VAR_22 -> VAR_23 ) ) { METHOD_4 ( VAR_24 ) ; return 0 ; } METHOD_5 ( VAR_25 ) ; if ( VAR_26 & ( VAR_27 ) ) return - VAR_28 ; VAR_29 = METHOD_6 ( VAR_30 , VAR_31 , VAR_32 , & VAR_33 ) ; if ( ! VAR_34 ) { METHOD_7 ( ""Recvdatagramfailedstate%d%d%d"" , VAR_35 -> VAR_36 , VAR_37 , METHOD_8 ( VAR_38 ) ) ; if ( VAR_39 -> VAR_40 & VAR_41 ) return 0 ; return VAR_42 ; } VAR_43 = VAR_44 -> VAR_45 ; VAR_46 = min_t ( unsigned TYPE_6 , VAR_47 , VAR_48 ) ; VAR_49 = VAR_50 ; if ( METHOD_9 ( VAR_51 , 0 , VAR_52 -> VAR_53 , VAR_54 ) ) { if ( ! ( VAR_55 & VAR_56 ) ) METHOD_10 ( & VAR_57 -> VAR_58 , VAR_59 ) ; return - VAR_60 ; } METHOD_11 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 -> VAR_65 == VAR_66 && VAR_67 -> VAR_68 ) { struct STRUCT_OR_UNION_7 * VAR_69 = METHOD_12 ( VAR_70 ) ; struct STRUCT_OR_UNION_8 * VAR_71 = ( struct STRUCT_OR_UNION_9 * ) VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = sizeof ( struct STRUCT_OR_UNION_10 ) ; METHOD_13 ( ""Datagramsocket%d%d\\n"" , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 ) ; METHOD_14 ( VAR_80 , 0 , sizeof ( * VAR_81 ) ) ; VAR_82 -> VAR_83 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 = VAR_94 -> VAR_95 ; } if ( ! ( VAR_96 & VAR_97 ) ) { if ( VAR_98 -> VAR_99 == VAR_100 || VAR_101 -> VAR_102 == VAR_103 || VAR_104 -> VAR_105 == VAR_106 ) { METHOD_15 ( VAR_107 , VAR_108 ) ; if ( VAR_109 -> VAR_110 ) { METHOD_16 ( & VAR_111 -> VAR_112 , VAR_113 ) ; goto VAR_114 ; } } METHOD_17 ( VAR_115 ) ; } VAR_116 : if ( VAR_117 -> VAR_118 == VAR_119 && ( VAR_120 & VAR_121 ) ) VAR_122 = VAR_123 ; return VAR_124 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = VAR_5 & VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 = STRUCT_OR_UNION_5 -> VAR_8 ; unsigned TYPE_4 VAR_9 , VAR_10 ; struct STRUCT_OR_UNION_6 * VAR_11 , * VAR_12 ; TYPE_5 VAR_13 = 0 ; METHOD_1 ( ""%p%zu\\n"" , VAR_14 , VAR_15 ) ; VAR_16 -> VAR_17 = 0 ; METHOD_2 ( VAR_18 ) ; if ( VAR_19 -> VAR_20 == VAR_21 && METHOD_3 ( & VAR_22 -> VAR_23 ) ) { METHOD_4 ( VAR_24 ) ; return 0 ; } METHOD_5 ( VAR_25 ) ; if ( VAR_26 & ( VAR_27 ) ) return - VAR_28 ; VAR_29 = METHOD_6 ( VAR_30 , VAR_31 , VAR_32 , & VAR_33 ) ; if ( ! VAR_34 ) { METHOD_7 ( ""Recvdatagramfailedstate%d%d%d"" , VAR_35 -> VAR_36 , VAR_37 , METHOD_8 ( VAR_38 ) ) ; if ( VAR_39 -> VAR_40 & VAR_41 ) return 0 ; return VAR_42 ; } VAR_43 = VAR_44 -> VAR_45 ; VAR_46 = min_t ( unsigned TYPE_6 , VAR_47 , VAR_48 ) ; VAR_49 = VAR_50 ; if ( METHOD_9 ( VAR_51 , 0 , VAR_52 -> VAR_53 , VAR_54 ) ) { if ( ! ( VAR_55 & VAR_56 ) ) METHOD_10 ( & VAR_57 -> VAR_58 , VAR_59 ) ; return - VAR_60 ; } METHOD_11 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 -> VAR_65 == VAR_66 && VAR_67 -> VAR_68 ) { struct STRUCT_OR_UNION_7 * VAR_69 = METHOD_12 ( VAR_70 ) ; struct STRUCT_OR_UNION_8 * VAR_71 = ( struct STRUCT_OR_UNION_9 * ) VAR_72 -> VAR_73 ; VAR_74 -> VAR_75 = sizeof ( struct STRUCT_OR_UNION_10 ) ; METHOD_13 ( ""Datagramsocket%d%d\\n"" , VAR_76 -> VAR_77 , VAR_78 -> VAR_79 ) ; METHOD_14 ( VAR_80 , 0 , sizeof ( * VAR_81 ) ) ; VAR_82 -> VAR_83 = VAR_84 ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 -> VAR_91 ; VAR_92 -> VAR_93 = VAR_94 -> VAR_95 ; } if ( ! ( VAR_96 & VAR_97 ) ) { if ( VAR_98 -> VAR_99 == VAR_100 || VAR_101 -> VAR_102 == VAR_103 || VAR_104 -> VAR_105 == VAR_106 ) { METHOD_15 ( VAR_107 , VAR_108 ) ; if ( VAR_109 -> VAR_110 ) { METHOD_16 ( & VAR_111 -> VAR_112 , VAR_113 ) ; goto VAR_114 ; } } METHOD_17 ( VAR_115 ) ; } VAR_116 : if ( VAR_117 -> VAR_118 == VAR_119 && ( VAR_120 & VAR_121 ) ) VAR_122 = VAR_123 ; return VAR_124 ; }",511
512,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 ) { struct STRUCT_OR_UNION_5 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_6 * VAR_6 , * VAR_7 = METHOD_2 ( VAR_8 ) ; struct STRUCT_OR_UNION_7 * VAR_9 ; struct STRUCT_OR_UNION_8 * VAR_10 ; struct STRUCT_OR_UNION_9 * VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 ; if ( VAR_13 -> VAR_14 == METHOD_3 ( VAR_15 ) ) { VAR_16 = METHOD_4 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 ) ; if ( VAR_21 == VAR_22 ) return VAR_23 ; VAR_24 = ( struct STRUCT_OR_UNION_11 * ) VAR_25 ; VAR_26 = METHOD_5 ( VAR_27 ) ; VAR_28 -> VAR_29 = & VAR_30 -> VAR_31 ; VAR_32 = METHOD_6 ( VAR_33 ) ; METHOD_7 ( VAR_34 , VAR_35 , sizeof ( struct STRUCT_OR_UNION_12 ) ) ; METHOD_8 ( VAR_36 -> VAR_37 , & VAR_38 -> VAR_39 ) ; METHOD_9 ( VAR_40 -> VAR_41 , & VAR_42 -> VAR_43 ) ; METHOD_10 ( & VAR_44 -> VAR_45 , & VAR_46 -> VAR_47 ) ; METHOD_11 ( VAR_48 ) -> VAR_49 = & VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = METHOD_12 ( VAR_62 ) ; VAR_63 -> VAR_64 = METHOD_13 ( VAR_65 ) -> VAR_66 ; METHOD_14 ( VAR_67 , METHOD_15 ( VAR_68 ) -> VAR_69 ) ; return VAR_70 ; } VAR_71 = VAR_72 -> VAR_73 ; if ( METHOD_16 ( VAR_74 ) ) goto VAR_75 ; if ( VAR_76 == VAR_77 ) { struct STRUCT_OR_UNION_13 * VAR_78 , VAR_79 ; struct STRUCT_OR_UNION_14 VAR_80 ; METHOD_17 ( & VAR_81 , 0 , sizeof ( VAR_82 ) ) ; VAR_83 . VAR_84 = VAR_85 ; METHOD_18 ( & VAR_86 . VAR_87 , & VAR_88 -> VAR_89 ) ; VAR_90 = METHOD_19 ( & VAR_91 , VAR_92 , & VAR_93 ) ; METHOD_20 ( & VAR_94 . VAR_95 , & VAR_96 -> VAR_97 ) ; VAR_98 . VAR_99 = VAR_100 -> VAR_101 ; VAR_102 . VAR_103 = METHOD_21 ( VAR_104 ) -> VAR_105 ; VAR_106 . VAR_107 = METHOD_22 ( VAR_108 ) -> VAR_109 ; METHOD_23 ( VAR_110 , METHOD_24 ( & VAR_111 ) ) ; VAR_112 = METHOD_25 ( VAR_113 , & VAR_114 , VAR_115 , VAR_116 ) ; if ( METHOD_26 ( VAR_117 ) ) goto VAR_118 ; } VAR_119 = METHOD_27 ( VAR_120 , VAR_121 , VAR_122 ) ; if ( VAR_123 == VAR_124 ) goto VAR_125 ; METHOD_28 ( VAR_126 , VAR_127 , VAR_128 , VAR_129 ) ; VAR_130 -> VAR_131 = VAR_132 -> VAR_133 -> VAR_134 & ~ ( VAR_135 | VAR_136 ) ; VAR_137 = ( struct STRUCT_OR_UNION_15 * ) VAR_138 ; VAR_139 = METHOD_29 ( VAR_140 ) ; VAR_141 -> VAR_142 = & VAR_143 -> VAR_144 ; VAR_145 = METHOD_30 ( VAR_146 ) ; METHOD_31 ( VAR_147 , VAR_148 , sizeof ( struct STRUCT_OR_UNION_16 ) ) ; METHOD_32 ( & VAR_149 -> VAR_150 , & VAR_151 -> VAR_152 ) ; METHOD_33 ( & VAR_153 -> VAR_154 , & VAR_155 -> VAR_156 ) ; METHOD_34 ( & VAR_157 -> VAR_158 , & VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 = VAR_163 -> VAR_164 ;  VAR_165 -> VAR_166 = VAR_167 ;  VAR_168 -> VAR_169 . VAR_170 = VAR_171 -> VAR_172 . VAR_173 ; VAR_174 -> VAR_175 = VAR_176 ; if ( VAR_177 -> VAR_178 != VAR_179 ) { VAR_180 -> VAR_181 = METHOD_35 ( VAR_182 -> VAR_183 , VAR_184 ) ; METHOD_36 ( VAR_185 -> VAR_186 ) ; VAR_187 -> VAR_188 = VAR_189 ; if ( VAR_190 -> VAR_191 ) METHOD_37 ( VAR_192 -> VAR_193 , VAR_194 ) ; } VAR_195 -> VAR_196 = VAR_197 ; VAR_198 -> VAR_199 = METHOD_38 ( VAR_200 ) ; VAR_201 -> VAR_202 = METHOD_39 ( VAR_203 ) -> VAR_204 ; if ( VAR_205 != VAR_206 ) { VAR_207 -> VAR_208 = METHOD_40 ( VAR_209 , VAR_210 ) ; if ( VAR_211 != VAR_212 -> VAR_213 ) METHOD_41 ( VAR_214 , VAR_215 , VAR_216 -> VAR_217 ) ; } METHOD_42 ( VAR_218 ) -> VAR_219 = 0 ; if ( VAR_220 -> VAR_221 != VAR_222 ) METHOD_43 ( VAR_223 ) -> VAR_224 = ( VAR_225 -> VAR_226 -> VAR_227 + VAR_228 -> VAR_229 -> VAR_230 ) ; METHOD_44 ( VAR_231 , METHOD_45 ( VAR_232 ) ) ; VAR_233 -> VAR_234 = VAR_235 -> VAR_236 = VAR_237 ; VAR_238 -> VAR_239 = VAR_240 ; if ( METHOD_46 ( VAR_241 , VAR_242 ) < 0 ) { METHOD_47 ( VAR_243 ) ; goto VAR_244 ; } METHOD_48 ( VAR_245 , VAR_246 ) ; return VAR_247 ; VAR_248 : METHOD_49 ( METHOD_50 ( VAR_249 ) , VAR_250 ) ; VAR_251 : METHOD_51 ( VAR_252 ) ; VAR_253 : METHOD_52 ( METHOD_53 ( VAR_254 ) , VAR_255 ) ; if ( VAR_256 != VAR_257 && VAR_258 != VAR_259 -> VAR_260 ) METHOD_54 ( VAR_261 , VAR_262 , VAR_263 -> VAR_264 ) ; return VAR_265 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 , struct STRUCT_OR_UNION_4 * VAR_3 ) { struct STRUCT_OR_UNION_5 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_6 * VAR_6 , * VAR_7 = METHOD_2 ( VAR_8 ) ; struct STRUCT_OR_UNION_7 * VAR_9 ; struct STRUCT_OR_UNION_8 * VAR_10 ; struct STRUCT_OR_UNION_9 * VAR_11 ; struct STRUCT_OR_UNION_10 * VAR_12 ; if ( VAR_13 -> VAR_14 == METHOD_3 ( VAR_15 ) ) { VAR_16 = METHOD_4 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 ) ; if ( VAR_21 == VAR_22 ) return VAR_23 ; VAR_24 = ( struct STRUCT_OR_UNION_11 * ) VAR_25 ; VAR_26 = METHOD_5 ( VAR_27 ) ; VAR_28 -> VAR_29 = & VAR_30 -> VAR_31 ; VAR_32 = METHOD_6 ( VAR_33 ) ; METHOD_7 ( VAR_34 , VAR_35 , sizeof ( struct STRUCT_OR_UNION_12 ) ) ; METHOD_8 ( VAR_36 -> VAR_37 , & VAR_38 -> VAR_39 ) ; METHOD_9 ( VAR_40 -> VAR_41 , & VAR_42 -> VAR_43 ) ; METHOD_10 ( & VAR_44 -> VAR_45 , & VAR_46 -> VAR_47 ) ; METHOD_11 ( VAR_48 ) -> VAR_49 = & VAR_50 ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = METHOD_12 ( VAR_62 ) ; VAR_63 -> VAR_64 = METHOD_13 ( VAR_65 ) -> VAR_66 ; METHOD_14 ( VAR_67 , METHOD_15 ( VAR_68 ) -> VAR_69 ) ; return VAR_70 ; } VAR_71 = VAR_72 -> VAR_73 ; if ( METHOD_16 ( VAR_74 ) ) goto VAR_75 ; if ( VAR_76 == VAR_77 ) { struct STRUCT_OR_UNION_13 * VAR_78 , VAR_79 ; struct STRUCT_OR_UNION_14 VAR_80 ; METHOD_17 ( & VAR_81 , 0 , sizeof ( VAR_82 ) ) ; VAR_83 . VAR_84 = VAR_85 ; METHOD_18 ( & VAR_86 . VAR_87 , & VAR_88 -> VAR_89 ) ; VAR_90 = METHOD_19 ( & VAR_91 , VAR_92 , & VAR_93 ) ; METHOD_20 ( & VAR_94 . VAR_95 , & VAR_96 -> VAR_97 ) ; VAR_98 . VAR_99 = VAR_100 -> VAR_101 ; VAR_102 . VAR_103 = METHOD_21 ( VAR_104 ) -> VAR_105 ; VAR_106 . VAR_107 = METHOD_22 ( VAR_108 ) -> VAR_109 ; METHOD_23 ( VAR_110 , METHOD_24 ( & VAR_111 ) ) ; VAR_112 = METHOD_25 ( VAR_113 , & VAR_114 , VAR_115 , VAR_116 ) ; if ( METHOD_26 ( VAR_117 ) ) goto VAR_118 ; } VAR_119 = METHOD_27 ( VAR_120 , VAR_121 , VAR_122 ) ; if ( VAR_123 == VAR_124 ) goto VAR_125 ; METHOD_28 ( VAR_126 , VAR_127 , VAR_128 , VAR_129 ) ; VAR_130 -> VAR_131 = VAR_132 -> VAR_133 -> VAR_134 & ~ ( VAR_135 | VAR_136 ) ; VAR_137 = ( struct STRUCT_OR_UNION_15 * ) VAR_138 ; VAR_139 = METHOD_29 ( VAR_140 ) ; VAR_141 -> VAR_142 = & VAR_143 -> VAR_144 ; VAR_145 = METHOD_30 ( VAR_146 ) ; METHOD_31 ( VAR_147 , VAR_148 , sizeof ( struct STRUCT_OR_UNION_16 ) ) ; METHOD_32 ( & VAR_149 -> VAR_150 , & VAR_151 -> VAR_152 ) ; METHOD_33 ( & VAR_153 -> VAR_154 , & VAR_155 -> VAR_156 ) ; METHOD_34 ( & VAR_157 -> VAR_158 , & VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 = VAR_163 -> VAR_164 ; VAR_165 -> VAR_166 = VAR_167 ; VAR_168 -> VAR_169 . VAR_170 = VAR_171 -> VAR_172 . VAR_173 ; VAR_174 -> VAR_175 = VAR_176 ; if ( VAR_177 -> VAR_178 != VAR_179 ) { VAR_180 -> VAR_181 = METHOD_35 ( VAR_182 -> VAR_183 , VAR_184 ) ; METHOD_36 ( VAR_185 -> VAR_186 ) ; VAR_187 -> VAR_188 = VAR_189 ; if ( VAR_190 -> VAR_191 ) METHOD_37 ( VAR_192 -> VAR_193 , VAR_194 ) ; } VAR_195 -> VAR_196 = VAR_197 ; VAR_198 -> VAR_199 = METHOD_38 ( VAR_200 ) ; VAR_201 -> VAR_202 = METHOD_39 ( VAR_203 ) -> VAR_204 ; if ( VAR_205 != VAR_206 ) { VAR_207 -> VAR_208 = METHOD_40 ( VAR_209 , VAR_210 ) ; if ( VAR_211 != VAR_212 -> VAR_213 ) METHOD_41 ( VAR_214 , VAR_215 , VAR_216 -> VAR_217 ) ; } METHOD_42 ( VAR_218 ) -> VAR_219 = 0 ; if ( VAR_220 -> VAR_221 != VAR_222 ) METHOD_43 ( VAR_223 ) -> VAR_224 = ( VAR_225 -> VAR_226 -> VAR_227 + VAR_228 -> VAR_229 -> VAR_230 ) ; METHOD_44 ( VAR_231 , METHOD_45 ( VAR_232 ) ) ; VAR_233 -> VAR_234 = VAR_235 -> VAR_236 = VAR_237 ; VAR_238 -> VAR_239 = VAR_240 ; if ( METHOD_46 ( VAR_241 , VAR_242 ) < 0 ) { METHOD_47 ( VAR_243 ) ; goto VAR_244 ; } METHOD_48 ( VAR_245 , VAR_246 ) ; return VAR_247 ; VAR_248 : METHOD_49 ( METHOD_50 ( VAR_249 ) , VAR_250 ) ; VAR_251 : METHOD_51 ( VAR_252 ) ; VAR_253 : METHOD_52 ( METHOD_53 ( VAR_254 ) , VAR_255 ) ; if ( VAR_256 != VAR_257 && VAR_258 != VAR_259 -> VAR_260 ) METHOD_54 ( VAR_261 , VAR_262 , VAR_263 -> VAR_264 ) ; return VAR_265 ; }",512
513," static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 ) {  const TYPE_3 VAR_2 = ( VAR_3 -> VAR_4 -  VAR_5 -> VAR_6 ) / VAR_7 -> VAR_8 ;  const TYPE_4 VAR_9 = VAR_10 <= 512.0   ? METHOD_1 ( METHOD_2 ( 1.0 - ( VAR_11 / 512.0 ) , 0.5 ) , 0.85 , 1.0 )  : 0.85 ; return METHOD_3 ( VAR_12 , VAR_13 -> VAR_14 ) ; }","static TYPE_0 METHOD_0 ( const TYPE_5 * VAR_15 , const TYPE_2 * VAR_1 ) { const TYPE_3 VAR_2 = ( VAR_3 -> VAR_4 - VAR_5 -> VAR_6 ) / VAR_7 -> VAR_8 ; const TYPE_4 VAR_17 = ( 0.95 * METHOD_2 ( ( VAR_13 -> VAR_14 - VAR_13 -> pcnt_motion ) , ZM_POWER_FACTOR ) ) ; return MAX ( VAR_17 , ( VAR_16 + ( ( 1.0 - VAR_16 ) * VAR_17 ) ) ) ; }",513
514,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; unsigned TYPE_5 TYPE_6 * VAR_5 = ( unsigned TYPE_7 TYPE_8 * ) VAR_6 ; switch ( VAR_7 ) { case VAR_8 : VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 ) ; break ; case VAR_13 : VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 ) ; break ; case VAR_18 : VAR_19 = METHOD_3 ( VAR_20 , & VAR_21 , VAR_22 , 0 , sizeof ( struct STRUCT_OR_UNION_1 ) , VAR_23 ) ; break ; case VAR_24 : VAR_25 = METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 , 0 , sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_29 ) ; break ; case VAR_30 : VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 , VAR_34 , 0 , sizeof ( union STRUCT_OR_UNION_3 ) , VAR_35 ) ; break ; case VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , & VAR_39 , VAR_40 , 0 , sizeof ( union STRUCT_OR_UNION_4 ) , VAR_41 ) ; break ; TYPE_9 TYPE_10 case VAR_42 : VAR_43 = METHOD_7 ( VAR_44 , VAR_45 ) ; break ; case VAR_46 : VAR_47 = METHOD_8 ( VAR_48 , VAR_49 ) ; break ; case VAR_50 :  VAR_51 = METHOD_9 ( METHOD_10 ( VAR_52 ) -> VAR_53 ,  VAR_54 ) ; break ; case VAR_55 : METHOD_11 ( VAR_56 ) -> VAR_57 = VAR_58 ; VAR_59 = 0 ; break ; TYPE_11 TYPE_12 case VAR_60 : VAR_61 = METHOD_12 ( VAR_62 , VAR_63 ) ; break ; case VAR_64 : VAR_65 = METHOD_13 ( VAR_66 , VAR_67 ) ; break ; TYPE_13 TYPE_14 case VAR_68 : VAR_69 = METHOD_14 ( VAR_70 , & VAR_71 , VAR_72 , 0 , VAR_73 , VAR_74 ) ; break ; case VAR_75 : VAR_76 = METHOD_15 ( VAR_77 , & VAR_78 , VAR_79 , 0 , VAR_80 , VAR_81 ) ; break ; TYPE_15 TYPE_16 case VAR_82 : if ( METHOD_16 ( VAR_83 ) < 0 ) return - VAR_84 ; VAR_85 = METHOD_17 ( VAR_86 , VAR_87 , ( unsigned TYPE_17 TYPE_18 * ) VAR_88 ) ; METHOD_18 ( VAR_89 ) ; break ; case VAR_90 : if ( METHOD_19 ( VAR_91 ) < 0 ) return - VAR_92 ; VAR_93 = METHOD_20 ( VAR_94 , VAR_95 , ( unsigned TYPE_19 TYPE_20 * ) VAR_96 ) ; METHOD_21 ( VAR_97 ) ; break ; default : VAR_98 = METHOD_22 ( VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; break ; } return VAR_103 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , unsigned TYPE_3 VAR_3 ) { TYPE_4 VAR_4 ; unsigned TYPE_5 TYPE_6 * VAR_5 = ( unsigned TYPE_7 TYPE_8 * ) VAR_6 ; switch ( VAR_7 ) { case VAR_8 : VAR_9 = METHOD_1 ( VAR_10 , VAR_11 , VAR_12 ) ; break ; case VAR_13 : VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 ) ; break ; case VAR_18 : VAR_19 = METHOD_3 ( VAR_20 , & VAR_21 , VAR_22 , 0 , sizeof ( struct STRUCT_OR_UNION_1 ) , VAR_23 ) ; break ; case VAR_24 : VAR_25 = METHOD_4 ( VAR_26 , & VAR_27 , VAR_28 , 0 , sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_29 ) ; break ; case VAR_30 : VAR_31 = METHOD_5 ( VAR_32 , & VAR_33 , VAR_34 , 0 , sizeof ( union STRUCT_OR_UNION_3 ) , VAR_35 ) ; break ; case VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , & VAR_39 , VAR_40 , 0 , sizeof ( union STRUCT_OR_UNION_4 ) , VAR_41 ) ; break ; TYPE_9 TYPE_10 case VAR_42 : VAR_43 = METHOD_7 ( VAR_44 , VAR_45 ) ; break ; case VAR_46 : VAR_47 = METHOD_8 ( VAR_48 , VAR_49 ) ; break ; case VAR_50 : VAR_51 = METHOD_9 ( METHOD_10 ( VAR_52 ) -> VAR_53 [ 0 ] , VAR_54 ) ; break ; case VAR_55 : METHOD_11 ( VAR_56 ) -> VAR_57 = VAR_58 ; VAR_59 = 0 ; break ; TYPE_11 TYPE_12 case VAR_60 : VAR_61 = METHOD_12 ( VAR_62 , VAR_63 ) ; break ; case VAR_64 : VAR_65 = METHOD_13 ( VAR_66 , VAR_67 ) ; break ; TYPE_13 TYPE_14 case VAR_68 : VAR_69 = METHOD_14 ( VAR_70 , & VAR_71 , VAR_72 , 0 , VAR_73 , VAR_74 ) ; break ; case VAR_75 : VAR_76 = METHOD_15 ( VAR_77 , & VAR_78 , VAR_79 , 0 , VAR_80 , VAR_81 ) ; break ; TYPE_15 TYPE_16 case VAR_82 : if ( METHOD_16 ( VAR_83 ) < 0 ) return - VAR_84 ; VAR_85 = METHOD_17 ( VAR_86 , VAR_87 , ( unsigned TYPE_17 TYPE_18 * ) VAR_88 ) ; METHOD_18 ( VAR_89 ) ; break ; case VAR_90 : if ( METHOD_19 ( VAR_91 ) < 0 ) return - VAR_92 ; VAR_93 = METHOD_20 ( VAR_94 , VAR_95 , ( unsigned TYPE_19 TYPE_20 * ) VAR_96 ) ; METHOD_21 ( VAR_97 ) ; break ; default : VAR_98 = METHOD_22 ( VAR_99 , VAR_100 , VAR_101 , VAR_102 ) ; break ; } return VAR_103 ; }",514
515,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 , ... ) { TYPE_4 VAR_4 ;  struct STRUCT_OR_UNION_1 VAR_5 ;  TYPE_5 VAR_6 [ 32 ] ; METHOD_1 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) - 1 ) ; METHOD_3 ( VAR_12 , VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = & VAR_19 ; if ( ! ( VAR_20 & VAR_21 ) ) goto VAR_22 ; if ( METHOD_4 ( VAR_23 ) && METHOD_5 ( VAR_24 -> VAR_25 ) ) METHOD_6 ( ""[%s]:[%s:%d]:%d:%pV"" ,  METHOD_7 ( & VAR_26 -> VAR_27 -> VAR_28 ) , VAR_29 , VAR_30 ,  VAR_31 -> VAR_32 , & VAR_33 ) ; else  METHOD_8 ( ""[0000:00:00.0]:[%s:%d]:%pV"" , VAR_34 , VAR_35 , & VAR_36 ) ;  VAR_37 : METHOD_9 ( VAR_38 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 , ... ) { TYPE_4 VAR_4 ; struct STRUCT_OR_UNION_1 VAR_5 ; TYPE_5 VAR_6 [ 32 ] ; METHOD_1 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) - 1 ) ; METHOD_3 ( VAR_12 , VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = & VAR_19 ; if ( ! ( VAR_20 & VAR_21 ) ) goto VAR_22 ; if ( METHOD_4 ( VAR_23 ) && METHOD_5 ( VAR_24 -> VAR_25 ) ) METHOD_6 ( ""[%s]:[%s:%d]:%d:%pV"" , METHOD_7 ( & VAR_26 -> VAR_27 -> VAR_28 ) , VAR_10 , VAR_35 , & VAR_36 ) ; VAR_37 : METHOD_9 ( VAR_38 ) ; }",515
516," static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 ,  TYPE_0 VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; METHOD_1 ( & VAR_3 -> VAR_4 ) ;  VAR_5 = METHOD_2 ( & VAR_6 -> VAR_7 , VAR_8 ) ;  if ( VAR_9 ) METHOD_3 ( VAR_10 ) ; METHOD_4 ( & VAR_11 -> VAR_12 ) ;  return VAR_13 ? VAR_14 : METHOD_5 ( - VAR_15 ) ;  }","struct STRUCT_OR_UNION_2 * VAR_2 ; METHOD_1 ( & VAR_3 -> VAR_4 ) ; VAR_5 = METHOD_2 ( & VAR_6 -> VAR_7 , VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( VAR_10 ) ; METHOD_4 ( & VAR_11 -> VAR_12 ) ; return VAR_13 ? VAR_14 : METHOD_5 ( - VAR_15 ) ; }",516
517," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) {  VAR_4 = * VAR_5 ;  METHOD_1 ( VAR_6 -> VAR_7 [ VAR_8 ] , VAR_9 , VAR_10 ) ;  * VAR_11 = VAR_12 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { VAR_4 = * VAR_5 ; METHOD_1 ( VAR_6 -> VAR_7 [ VAR_8 ] , VAR_9 , VAR_10 , VAR_13 ) ; * VAR_11 = VAR_12 ; }",517
518,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ;  TYPE_2 VAR_4 , VAR_5 , VAR_6 ;  TYPE_3 VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_1 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ; unsigned TYPE_5 VAR_13 ; TYPE_6 VAR_14 = 0 ; VAR_15 = METHOD_2 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; if ( ! VAR_20 ) return 1 ; METHOD_3 ( VAR_21 != VAR_22 ) ; VAR_23 = ( struct STRUCT_OR_UNION_6 * ) VAR_24 -> VAR_25 ; VAR_26 = METHOD_4 ( VAR_27 -> VAR_28 ) ; if ( sizeof ( * VAR_29 ) + VAR_30 > VAR_31 -> VAR_32 ) { METHOD_5 ( VAR_33 , ""errorloadinglogicalvolumedescriptor:"" ""Partitiontabletoolong(%u>%lu)\\n"" , VAR_34 , VAR_35 -> VAR_36 - sizeof ( * VAR_37 ) ) ; goto VAR_38 ; } VAR_39 = METHOD_6 ( VAR_40 , METHOD_7 ( VAR_41 -> VAR_42 ) ) ; if ( VAR_43 ) goto VAR_44 ; for ( VAR_45 = 0 , VAR_46 = 0 ; VAR_47 < VAR_48 -> VAR_49 && VAR_50 < VAR_51 ; VAR_52 ++ , VAR_53 += VAR_54 -> VAR_55 ) { struct STRUCT_OR_UNION_7 * VAR_56 = & VAR_57 -> VAR_58 [ VAR_59 ] ; VAR_60 = ( struct STRUCT_OR_UNION_8 * ) & ( VAR_61 -> VAR_62 [ VAR_63 ] ) ; VAR_64 = VAR_65 -> VAR_66 ; if ( VAR_67 == 1 ) { struct STRUCT_OR_UNION_9 * VAR_68 = ( struct STRUCT_OR_UNION_10 * ) VAR_69 ; VAR_70 -> VAR_71 = VAR_72 ; VAR_73 -> VAR_74 = METHOD_8 ( VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_9 ( VAR_79 -> VAR_80 ) ; VAR_81 -> VAR_82 = VAR_83 ; } else if ( VAR_84 == 2 ) { struct STRUCT_OR_UNION_11 * VAR_85 = ( struct STRUCT_OR_UNION_12 * ) VAR_86 ; if ( ! METHOD_10 ( VAR_87 -> VAR_88 . VAR_89 , VAR_90 , METHOD_11 ( VAR_91 ) ) ) { TYPE_7 VAR_92 = METHOD_12 ( ( ( TYPE_8 * ) VAR_93 -> VAR_94 . VAR_95 ) [ 0 ] ) ; if ( VAR_96 < 0x0200 ) { VAR_97 -> VAR_98 = VAR_99 ; VAR_100 -> VAR_101 = VAR_102 ; } else { VAR_103 -> VAR_104 = VAR_105 ; VAR_106 -> VAR_107 = VAR_108 ; } } else if ( ! METHOD_13 ( VAR_109 -> VAR_110 . VAR_111 , VAR_112 , METHOD_14 ( VAR_113 ) ) ) {  TYPE_9 VAR_114 ;  struct STRUCT_OR_UNION_13 * VAR_115 ;  struct STRUCT_OR_UNION_14 * VAR_116 =  ( struct STRUCT_OR_UNION_15 * ) VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 . VAR_123 . VAR_124 = METHOD_15 ( VAR_125 -> VAR_126 ) ; for ( VAR_127 = 0 ; VAR_128 < VAR_129 -> VAR_130 ; VAR_131 ++ ) { struct STRUCT_OR_UNION_16 * VAR_132 ; VAR_133 = METHOD_16 ( VAR_134 -> VAR_135 [ VAR_136 ] ) ; VAR_137 = METHOD_17 ( VAR_138 , VAR_139 , VAR_140 , & VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 . VAR_145 [ VAR_146 ] = VAR_147 ; if ( VAR_148 == VAR_149 ) continue ; VAR_150 = ( struct STRUCT_OR_UNION_17 * ) VAR_151 -> VAR_152 ; if ( VAR_153 != 0 || METHOD_18 ( VAR_154 -> VAR_155 . VAR_156 , VAR_157 , METHOD_19 ( VAR_158 ) ) ) { METHOD_20 ( VAR_159 ) ; VAR_160 -> VAR_161 . VAR_162 . VAR_163 [ VAR_164 ] = VAR_165 ; } } VAR_166 -> VAR_167 = VAR_168 ; } else if ( ! METHOD_21 ( VAR_169 -> VAR_170 . VAR_171 , VAR_172 , METHOD_22 ( VAR_173 ) ) ) { struct STRUCT_OR_UNION_18 * VAR_174 = & VAR_175 -> VAR_176 . VAR_177 ; struct STRUCT_OR_UNION_19 * VAR_178 = ( struct STRUCT_OR_UNION_20 * ) & ( VAR_179 -> VAR_180 [ VAR_181 ] ) ; METHOD_23 ( ""ParsingLogicalvolpart%dtype%did=%s\\n"" , VAR_182 , VAR_183 , VAR_184 ) ; VAR_185 -> VAR_186 = VAR_187 ; VAR_188 -> VAR_189 = VAR_190 ; VAR_191 -> VAR_192 = METHOD_24 ( VAR_193 -> VAR_194 ) ; VAR_195 -> VAR_196 = METHOD_25 ( VAR_197 -> VAR_198 ) ; VAR_199 -> VAR_200 = METHOD_26 ( VAR_201 -> VAR_202 ) ; VAR_203 -> VAR_204 = METHOD_27 ( VAR_205 -> VAR_206 ) ; VAR_207 -> VAR_208 = METHOD_28 ( VAR_209 -> VAR_210 ) ; if ( VAR_211 -> VAR_212 & 0x01 ) VAR_213 -> VAR_214 |= VAR_215 ; METHOD_29 ( ""MetadataIdentsuffix=0x%x\\n"" , METHOD_30 ( * ( TYPE_10 * ) VAR_216 -> VAR_217 . VAR_218 ) ) ; METHOD_31 ( ""Metadatapartnum=%d\\n"" , METHOD_32 ( VAR_219 -> VAR_220 ) ) ; METHOD_33 ( ""Metadatapartallocunitsize=%d\\n"" , METHOD_34 ( VAR_221 -> VAR_222 ) ) ; METHOD_35 ( ""Metadatafileloc=%d\\n"" , METHOD_36 ( VAR_223 -> VAR_224 ) ) ; METHOD_37 ( ""Mirrorfileloc=%d\\n"" , METHOD_38 ( VAR_225 -> VAR_226 ) ) ; METHOD_39 ( ""Bitmapfileloc=%d\\n"" , METHOD_40 ( VAR_227 -> VAR_228 ) ) ; METHOD_41 ( ""Flags:%d%d\\n"" , VAR_229 -> VAR_230 , VAR_231 -> VAR_232 ) ; } else { METHOD_42 ( ""Unknownident:%s\\n"" , VAR_233 -> VAR_234 . VAR_235 ) ; continue ; } VAR_236 -> VAR_237 = METHOD_43 ( VAR_238 -> VAR_239 ) ; VAR_240 -> VAR_241 = METHOD_44 ( VAR_242 -> VAR_243 ) ; } METHOD_45 ( ""Partition(%d:%d)type%donvolume%d\\n"" , VAR_244 , VAR_245 -> VAR_246 , VAR_247 , VAR_248 -> VAR_249 ) ; } if ( VAR_250 ) { struct STRUCT_OR_UNION_21 * VAR_251 = ( struct STRUCT_OR_UNION_22 * ) & ( VAR_252 -> VAR_253 [ 0 ] ) ; * VAR_254 = METHOD_46 ( VAR_255 -> VAR_256 ) ; METHOD_47 ( ""FileSetfoundinLogicalVolDescatblock=%d,partition=%d\\n"" , VAR_257 -> VAR_258 , VAR_259 -> VAR_260 ) ; } if ( VAR_261 -> VAR_262 . VAR_263 ) METHOD_48 ( VAR_264 , METHOD_49 ( VAR_265 -> VAR_266 ) ) ; VAR_267 : METHOD_50 ( VAR_268 ) ; return VAR_269 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_1 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ; unsigned TYPE_5 VAR_13 ; TYPE_6 VAR_14 = 0 ; VAR_15 = METHOD_2 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; if ( ! VAR_20 ) return 1 ; METHOD_3 ( VAR_21 != VAR_22 ) ; VAR_23 = ( struct STRUCT_OR_UNION_6 * ) VAR_24 -> VAR_25 ; VAR_26 = METHOD_4 ( VAR_27 -> VAR_28 ) ; if ( sizeof ( * VAR_29 ) + VAR_30 > VAR_31 -> VAR_32 ) { METHOD_5 ( VAR_33 , ""errorloadinglogicalvolumedescriptor:"" ""Partitiontabletoolong(%u>%lu)\\n"" , VAR_34 , VAR_35 -> VAR_36 - sizeof ( * VAR_37 ) ) ; goto VAR_38 ; } VAR_39 = METHOD_6 ( VAR_40 , METHOD_7 ( VAR_41 -> VAR_42 ) ) ; if ( VAR_43 ) goto VAR_44 ; for ( VAR_45 = 0 , VAR_46 = 0 ; VAR_47 < VAR_48 -> VAR_49 && VAR_50 < VAR_51 ; VAR_52 ++ , VAR_53 += VAR_54 -> VAR_55 ) { struct STRUCT_OR_UNION_7 * VAR_56 = & VAR_57 -> VAR_58 [ VAR_59 ] ; VAR_60 = ( struct STRUCT_OR_UNION_8 * ) & ( VAR_61 -> VAR_62 [ VAR_63 ] ) ; VAR_64 = VAR_65 -> VAR_66 ; if ( VAR_67 == 1 ) { struct STRUCT_OR_UNION_9 * VAR_68 = ( struct STRUCT_OR_UNION_10 * ) VAR_69 ; VAR_70 -> VAR_71 = VAR_72 ; VAR_73 -> VAR_74 = METHOD_8 ( VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = METHOD_9 ( VAR_79 -> VAR_80 ) ; VAR_81 -> VAR_82 = VAR_83 ; } else if ( VAR_84 == 2 ) { struct STRUCT_OR_UNION_11 * VAR_85 = ( struct STRUCT_OR_UNION_12 * ) VAR_86 ; if ( ! METHOD_10 ( VAR_87 -> VAR_88 . VAR_89 , VAR_90 , METHOD_11 ( VAR_91 ) ) ) { if ( udf_load_sparable_map ( VAR_264 , VAR_248 , ( struct STRUCT_OR_UNION_15 * ) VAR_117 ; VAR_118 -> VAR_119 = VAR_120 ; VAR_121 -> VAR_122 . VAR_123 . VAR_124 = METHOD_15 ( VAR_125 -> VAR_126 ) ; for ( VAR_127 = 0 ; VAR_128 < VAR_129 -> VAR_130 ; VAR_131 ++ ) { struct STRUCT_OR_UNION_16 * VAR_132 ; VAR_133 = METHOD_16 ( VAR_134 -> VAR_135 [ VAR_136 ] ) ; VAR_137 = METHOD_17 ( VAR_138 , VAR_139 , VAR_140 , & VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 . VAR_145 [ VAR_146 ] = VAR_147 ; if ( VAR_148 == VAR_149 ) continue ; VAR_150 = ( struct STRUCT_OR_UNION_17 * ) VAR_151 -> VAR_152 ; if ( VAR_153 != 0 || METHOD_18 ( VAR_154 -> VAR_155 . VAR_156 , VAR_157 , METHOD_19 ( VAR_158 ) ) ) { METHOD_20 ( VAR_159 ) ; VAR_160 -> VAR_161 . VAR_162 . VAR_163 [ VAR_164 ] = VAR_165 ; } } VAR_166 -> VAR_167 = VAR_168 ; } else if ( ! METHOD_21 ( VAR_169 -> VAR_170 . VAR_171 , VAR_172 , METHOD_22 ( VAR_173 ) ) ) { struct STRUCT_OR_UNION_18 * VAR_174 = & VAR_175 -> VAR_176 . VAR_177 ; struct STRUCT_OR_UNION_19 * VAR_178 = ( struct STRUCT_OR_UNION_20 * ) & ( VAR_179 -> VAR_180 [ VAR_181 ] ) ; METHOD_23 ( ""ParsingLogicalvolpart%dtype%did=%s\\n"" , VAR_182 , VAR_183 , VAR_184 ) ; VAR_185 -> VAR_186 = VAR_187 ; VAR_188 -> VAR_189 = VAR_190 ; VAR_191 -> VAR_192 = METHOD_24 ( VAR_193 -> VAR_194 ) ; VAR_195 -> VAR_196 = METHOD_25 ( VAR_197 -> VAR_198 ) ; VAR_199 -> VAR_200 = METHOD_26 ( VAR_201 -> VAR_202 ) ; VAR_203 -> VAR_204 = METHOD_27 ( VAR_205 -> VAR_206 ) ; VAR_207 -> VAR_208 = METHOD_28 ( VAR_209 -> VAR_210 ) ; if ( VAR_211 -> VAR_212 & 0x01 ) VAR_213 -> VAR_214 |= VAR_215 ; METHOD_29 ( ""MetadataIdentsuffix=0x%x\\n"" , METHOD_30 ( * ( TYPE_10 * ) VAR_216 -> VAR_217 . VAR_218 ) ) ; METHOD_31 ( ""Metadatapartnum=%d\\n"" , METHOD_32 ( VAR_219 -> VAR_220 ) ) ; METHOD_33 ( ""Metadatapartallocunitsize=%d\\n"" , METHOD_34 ( VAR_221 -> VAR_222 ) ) ; METHOD_35 ( ""Metadatafileloc=%d\\n"" , METHOD_36 ( VAR_223 -> VAR_224 ) ) ; METHOD_37 ( ""Mirrorfileloc=%d\\n"" , METHOD_38 ( VAR_225 -> VAR_226 ) ) ; METHOD_39 ( ""Bitmapfileloc=%d\\n"" , METHOD_40 ( VAR_227 -> VAR_228 ) ) ; METHOD_41 ( ""Flags:%d%d\\n"" , VAR_229 -> VAR_230 , VAR_231 -> VAR_232 ) ; } else { METHOD_42 ( ""Unknownident:%s\\n"" , VAR_233 -> VAR_234 . VAR_235 ) ; continue ; } VAR_236 -> VAR_237 = METHOD_43 ( VAR_238 -> VAR_239 ) ; VAR_240 -> VAR_241 = METHOD_44 ( VAR_242 -> VAR_243 ) ; } METHOD_45 ( ""Partition(%d:%d)type%donvolume%d\\n"" , VAR_244 , VAR_245 -> VAR_246 , VAR_247 , VAR_248 -> VAR_249 ) ; } if ( VAR_250 ) { struct STRUCT_OR_UNION_21 * VAR_251 = ( struct STRUCT_OR_UNION_22 * ) & ( VAR_252 -> VAR_253 [ 0 ] ) ; * VAR_254 = METHOD_46 ( VAR_255 -> VAR_256 ) ; METHOD_47 ( ""FileSetfoundinLogicalVolDescatblock=%d,partition=%d\\n"" , VAR_257 -> VAR_258 , VAR_259 -> VAR_260 ) ; } if ( VAR_261 -> VAR_262 . VAR_263 ) METHOD_48 ( VAR_264 , METHOD_49 ( VAR_265 -> VAR_266 ) ) ; VAR_267 : METHOD_50 ( VAR_268 ) ; return VAR_269 ; }",518
519,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) {  } ","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) { ( TYPE_0 ) VAR_0 ; ( TYPE_0 ) VAR_1 ; ( TYPE_0 ) VAR_2 ; }",519
520,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = VAR_1 ;  struct STRUCT_OR_UNION_3 * VAR_2 ;  METHOD_1 ( & METHOD_2 ( STRUCT_OR_UNION_4 ) -> VAR_3 ) ; if ( ! METHOD_3 ( STRUCT_OR_UNION_5 ) -> VAR_4 ) goto VAR_5 ; VAR_6 = METHOD_4 ( STRUCT_OR_UNION_6 -> VAR_7 , METHOD_5 ( STRUCT_OR_UNION_7 ) -> VAR_8 ) ; if ( ! VAR_9 ) { METHOD_6 ( STRUCT_OR_UNION_8 -> VAR_10 , ""ext2_xattr_delete_inode"" , ""inode%ld:block%dreaderror"" , STRUCT_OR_UNION_9 -> VAR_11 , METHOD_7 ( STRUCT_OR_UNION_10 ) -> VAR_12 ) ; goto VAR_13 ; } METHOD_8 ( VAR_14 , ""b_count=%d"" , METHOD_9 ( & ( VAR_15 -> VAR_16 ) ) ) ; if ( METHOD_10 ( VAR_17 ) -> VAR_18 != METHOD_11 ( VAR_19 ) || METHOD_12 ( VAR_20 ) -> VAR_21 != METHOD_13 ( 1 ) ) { METHOD_14 ( STRUCT_OR_UNION_11 -> VAR_22 , ""ext2_xattr_delete_inode"" , ""inode%ld:badblock%d"" , STRUCT_OR_UNION_12 -> VAR_23 , METHOD_15 ( STRUCT_OR_UNION_13 ) -> VAR_24 ) ; goto VAR_25 ; }  VAR_26 = METHOD_16 ( VAR_27 , VAR_28 -> VAR_29 , VAR_30 -> VAR_31 ) ;  METHOD_17 ( VAR_32 ) ; if ( METHOD_18 ( VAR_33 ) -> VAR_34 == METHOD_19 ( 1 ) ) {  if ( VAR_35 )  METHOD_20 ( VAR_36 ) ; METHOD_21 ( STRUCT_OR_UNION_14 , METHOD_22 ( STRUCT_OR_UNION_15 ) -> VAR_37 , 1 ) ; METHOD_23 ( VAR_38 ) ; METHOD_24 ( VAR_39 ) ; METHOD_25 ( VAR_40 ) ; } else {  METHOD_26 ( & METHOD_27 ( VAR_41 ) -> VAR_42 , - 1 ) ;  if ( VAR_43 ) METHOD_28 ( VAR_44 ) ; METHOD_29 ( VAR_45 , ""refcountnow=%d"" , METHOD_30 ( METHOD_31 ( VAR_46 ) -> VAR_47 ) ) ; METHOD_32 ( VAR_48 ) ; METHOD_33 ( VAR_49 ) ; if ( METHOD_34 ( STRUCT_OR_UNION_16 ) ) METHOD_35 ( VAR_50 ) ; METHOD_36 ( STRUCT_OR_UNION_17 , 1 ) ; } METHOD_37 ( STRUCT_OR_UNION_18 ) -> VAR_51 = 0 ; VAR_52 : METHOD_38 ( VAR_53 ) ; METHOD_39 ( & METHOD_40 ( STRUCT_OR_UNION_19 ) -> VAR_54 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = VAR_1 ; METHOD_1 ( & METHOD_2 ( STRUCT_OR_UNION_4 ) -> VAR_3 ) ; if ( ! METHOD_3 ( STRUCT_OR_UNION_5 ) -> VAR_4 ) goto VAR_5 ; VAR_6 = METHOD_4 ( STRUCT_OR_UNION_6 -> VAR_7 , METHOD_5 ( STRUCT_OR_UNION_7 ) -> VAR_8 ) ; if ( ! VAR_9 ) { METHOD_6 ( STRUCT_OR_UNION_8 -> VAR_10 , ""ext2_xattr_delete_inode"" , ""inode%ld:block%dreaderror"" , STRUCT_OR_UNION_9 -> VAR_11 , METHOD_7 ( STRUCT_OR_UNION_10 ) -> VAR_12 ) ; goto VAR_13 ; } METHOD_8 ( VAR_14 , ""b_count=%d"" , METHOD_9 ( & ( VAR_15 -> VAR_16 ) ) ) ; if ( METHOD_10 ( VAR_17 ) -> VAR_18 != METHOD_11 ( VAR_19 ) || METHOD_12 ( VAR_20 ) -> VAR_21 != METHOD_13 ( 1 ) ) { __u32 hash = METHOD_30 ( METHOD_31 ( VAR_53 ) -> h_hash ) ; mb2_cache_entry_delete_block ( EXT2_SB ( STRUCT_OR_UNION_19 -> VAR_22 ) -> s_mb_cache , hash , VAR_53 -> VAR_31 ) ; METHOD_21 ( STRUCT_OR_UNION_14 , METHOD_22 ( STRUCT_OR_UNION_15 ) -> VAR_37 , 1 ) ; METHOD_23 ( VAR_38 ) ; METHOD_24 ( VAR_39 ) ; METHOD_25 ( VAR_40 ) ; } else { METHOD_26 ( & METHOD_27 ( VAR_41 ) -> VAR_42 , - 1 ) ; METHOD_29 ( VAR_45 , ""refcountnow=%d"" , METHOD_30 ( METHOD_31 ( VAR_46 ) -> VAR_47 ) ) ; METHOD_32 ( VAR_48 ) ; METHOD_33 ( VAR_49 ) ; if ( METHOD_34 ( STRUCT_OR_UNION_16 ) ) METHOD_35 ( VAR_50 ) ; METHOD_36 ( STRUCT_OR_UNION_17 , 1 ) ; } METHOD_37 ( STRUCT_OR_UNION_18 ) -> VAR_51 = 0 ; VAR_52 : METHOD_38 ( VAR_53 ) ; METHOD_39 ( & METHOD_40 ( STRUCT_OR_UNION_19 ) -> VAR_54 ) ; }",520
521,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( ! VAR_6 -> VAR_7 ) { VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] ; goto VAR_13 ; } else { TYPE_5 VAR_14 , VAR_15 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 -> VAR_25 ; VAR_26 ++ ) { VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 ] ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 -> VAR_34 ; VAR_35 ++ ) { TYPE_6 VAR_36 , VAR_37 ; VAR_38 = & VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 = VAR_43 -> VAR_44 * ( 1u << ( VAR_45 -> VAR_46 + VAR_47 -> VAR_48 - 1 - VAR_49 ) ) ; VAR_50 = VAR_51 -> VAR_52 * ( 1u << ( VAR_53 -> VAR_54 + VAR_55 -> VAR_56 - 1 - VAR_57 ) ) ; VAR_58 -> VAR_59 = ! VAR_60 -> VAR_61 ? VAR_62 : METHOD_1 ( VAR_63 -> VAR_64 , VAR_65 ) ; VAR_66 -> VAR_67 = ! VAR_68 -> VAR_69 ? VAR_70 : METHOD_2 ( VAR_71 -> VAR_72 , VAR_73 ) ; } } } if ( ! VAR_74 -> VAR_75 ) { VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; VAR_81 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = VAR_94 -> VAR_95 ; } for ( VAR_96 -> VAR_97 = VAR_98 -> VAR_99 . VAR_100 ; VAR_101 -> VAR_102 < VAR_103 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 += ( TYPE_7 ) ( VAR_108 -> VAR_109 - ( TYPE_8 ) ( VAR_110 -> VAR_111 % ( TYPE_9 ) VAR_112 -> VAR_113 ) ) ) { for ( VAR_114 -> VAR_115 = VAR_116 -> VAR_117 . VAR_118 ; VAR_119 -> VAR_120 < VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 += ( TYPE_10 ) ( VAR_126 -> VAR_127 - ( TYPE_11 ) ( VAR_128 -> VAR_129 % ( TYPE_12 ) VAR_130 -> VAR_131 ) ) ) { for ( VAR_132 -> VAR_133 = VAR_134 -> VAR_135 . VAR_136 ; VAR_137 -> VAR_138 < VAR_139 -> VAR_140 . VAR_141 ; VAR_142 -> VAR_143 ++ ) { VAR_144 = & VAR_145 -> VAR_146 [ VAR_147 -> VAR_148 ] ; for ( VAR_149 -> VAR_150 = VAR_151 -> VAR_152 . VAR_153 ; VAR_154 -> VAR_155 < METHOD_3 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 ++ ) { TYPE_13 VAR_163 ; TYPE_14 VAR_164 , VAR_165 ; TYPE_15 VAR_166 , VAR_167 ; TYPE_16 VAR_168 , VAR_169 ; TYPE_17 VAR_170 , VAR_171 ; VAR_172 = & VAR_173 -> VAR_174 [ VAR_175 -> VAR_176 ] ; VAR_177 = VAR_178 -> VAR_179 - 1 - VAR_180 -> VAR_181 ; VAR_182 = METHOD_4 ( VAR_183 -> VAR_184 , ( TYPE_18 ) ( VAR_185 -> VAR_186 << VAR_187 ) ) ; VAR_188 = METHOD_5 ( VAR_189 -> VAR_190 , ( TYPE_19 ) ( VAR_191 -> VAR_192 << VAR_193 ) ) ; VAR_194 = METHOD_6 ( VAR_195 -> VAR_196 , ( TYPE_20 ) ( VAR_197 -> VAR_198 << VAR_199 ) ) ; VAR_200 = METHOD_7 ( VAR_201 -> VAR_202 , ( TYPE_21 ) ( VAR_203 -> VAR_204 << VAR_205 ) ) ; VAR_206 = VAR_207 -> VAR_208 + VAR_209 ; VAR_210 = VAR_211 -> VAR_212 + VAR_213 ;  if ( ! ( ( VAR_214 -> VAR_215 % ( TYPE_22 ) ( VAR_216 -> VAR_217 << VAR_218 ) == 0 ) || ( ( VAR_219 -> VAR_220 == VAR_221 -> VAR_222 ) &&  ( ( VAR_223 << VAR_224 ) % ( 1 << VAR_225 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_226 -> VAR_227 % ( TYPE_23 ) ( VAR_228 -> VAR_229 << VAR_230 ) == 0 ) || ( ( VAR_231 -> VAR_232 == VAR_233 -> VAR_234 ) && ( ( VAR_235 << VAR_236 ) % ( 1 << VAR_237 ) ) ) ) ) { continue ; } if ( ( VAR_238 -> VAR_239 == 0 ) || ( VAR_240 -> VAR_241 == 0 ) ) { continue ; } if ( ( VAR_242 == VAR_243 ) || ( VAR_244 == VAR_245 ) ) { continue ; } VAR_246 = METHOD_8 ( METHOD_9 ( VAR_247 -> VAR_248 , ( TYPE_24 ) ( VAR_249 -> VAR_250 << VAR_251 ) ) , ( TYPE_25 ) VAR_252 -> VAR_253 ) - METHOD_10 ( VAR_254 , ( TYPE_26 ) VAR_255 -> VAR_256 ) ; VAR_257 = METHOD_11 ( METHOD_12 ( VAR_258 -> VAR_259 , ( TYPE_27 ) ( VAR_260 -> VAR_261 << VAR_262 ) ) , ( TYPE_28 ) VAR_263 -> VAR_264 ) - METHOD_13 ( VAR_265 , ( TYPE_29 ) VAR_266 -> VAR_267 ) ; VAR_268 -> VAR_269 = ( TYPE_30 ) ( VAR_270 + VAR_271 * ( TYPE_31 ) VAR_272 -> VAR_273 ) ; for ( VAR_274 -> VAR_275 = VAR_276 -> VAR_277 . VAR_278 ; VAR_279 -> VAR_280 < VAR_281 -> VAR_282 . VAR_283 ; VAR_284 -> VAR_285 ++ ) { VAR_286 = VAR_287 -> VAR_288 * VAR_289 -> VAR_290 + VAR_291 -> VAR_292 * VAR_293 -> VAR_294 + VAR_295 -> VAR_296 * VAR_297 -> VAR_298 + VAR_299 -> VAR_300 * VAR_301 -> VAR_302 ; if ( ! VAR_303 -> VAR_304 [ VAR_305 ] ) { VAR_306 -> VAR_307 [ VAR_308 ] = 1 ; return VAR_309 ; } VAR_310 : ; } } } } } return VAR_311 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 ; TYPE_3 * VAR_3 = VAR_4 ; TYPE_4 VAR_5 = 0 ; if ( VAR_237 >= 31 || ( ( VAR_260 -> VAR_250 << VAR_237 ) >> VAR_237 ) != VAR_260 -> VAR_250 || VAR_225 >= 31 || ( ( VAR_260 -> VAR_261 << VAR_225 ) >> VAR_225 ) != VAR_260 -> VAR_261 ) { continue ; } if ( ! VAR_6 -> VAR_7 ) { VAR_8 = & VAR_9 -> VAR_10 [ VAR_11 -> VAR_12 ] ; goto VAR_13 ; } else { TYPE_5 VAR_14 , VAR_15 ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; for ( VAR_22 = 0 ; VAR_23 < VAR_24 -> VAR_25 ; VAR_26 ++ ) { VAR_27 = & VAR_28 -> VAR_29 [ VAR_30 ] ; for ( VAR_31 = 0 ; VAR_32 < VAR_33 -> VAR_34 ; VAR_35 ++ ) { TYPE_6 VAR_36 , VAR_37 ; VAR_38 = & VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 = VAR_43 -> VAR_44 * ( 1u << ( VAR_45 -> VAR_46 + VAR_47 -> VAR_48 - 1 - VAR_49 ) ) ; VAR_50 = VAR_51 -> VAR_52 * ( 1u << ( VAR_53 -> VAR_54 + VAR_55 -> VAR_56 - 1 - VAR_57 ) ) ; VAR_58 -> VAR_59 = ! VAR_60 -> VAR_61 ? VAR_62 : METHOD_1 ( VAR_63 -> VAR_64 , VAR_65 ) ; VAR_66 -> VAR_67 = ! VAR_68 -> VAR_69 ? VAR_70 : METHOD_2 ( VAR_71 -> VAR_72 , VAR_73 ) ; } } } if ( ! VAR_74 -> VAR_75 ) { VAR_76 -> VAR_77 . VAR_78 = VAR_79 -> VAR_80 ; VAR_81 -> VAR_82 . VAR_83 = VAR_84 -> VAR_85 ; VAR_86 -> VAR_87 . VAR_88 = VAR_89 -> VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = VAR_94 -> VAR_95 ; } for ( VAR_96 -> VAR_97 = VAR_98 -> VAR_99 . VAR_100 ; VAR_101 -> VAR_102 < VAR_103 -> VAR_104 . VAR_105 ; VAR_106 -> VAR_107 += ( TYPE_7 ) ( VAR_108 -> VAR_109 - ( TYPE_8 ) ( VAR_110 -> VAR_111 % ( TYPE_9 ) VAR_112 -> VAR_113 ) ) ) { for ( VAR_114 -> VAR_115 = VAR_116 -> VAR_117 . VAR_118 ; VAR_119 -> VAR_120 < VAR_121 -> VAR_122 . VAR_123 ; VAR_124 -> VAR_125 += ( TYPE_10 ) ( VAR_126 -> VAR_127 - ( TYPE_11 ) ( VAR_128 -> VAR_129 % ( TYPE_12 ) VAR_130 -> VAR_131 ) ) ) { for ( VAR_132 -> VAR_133 = VAR_134 -> VAR_135 . VAR_136 ; VAR_137 -> VAR_138 < VAR_139 -> VAR_140 . VAR_141 ; VAR_142 -> VAR_143 ++ ) { VAR_144 = & VAR_145 -> VAR_146 [ VAR_147 -> VAR_148 ] ; for ( VAR_149 -> VAR_150 = VAR_151 -> VAR_152 . VAR_153 ; VAR_154 -> VAR_155 < METHOD_3 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 ++ ) { TYPE_13 VAR_163 ; TYPE_14 VAR_164 , VAR_165 ; TYPE_15 VAR_166 , VAR_167 ; TYPE_16 VAR_168 , VAR_169 ; TYPE_17 VAR_170 , VAR_171 ; VAR_172 = & VAR_173 -> VAR_174 [ VAR_175 -> VAR_176 ] ; VAR_177 = VAR_178 -> VAR_179 - 1 - VAR_180 -> VAR_181 ; VAR_182 = METHOD_4 ( VAR_183 -> VAR_184 , ( TYPE_18 ) ( VAR_185 -> VAR_186 << VAR_187 ) ) ; VAR_188 = METHOD_5 ( VAR_189 -> VAR_190 , ( TYPE_19 ) ( VAR_191 -> VAR_192 << VAR_193 ) ) ; VAR_194 = METHOD_6 ( VAR_195 -> VAR_196 , ( TYPE_20 ) ( VAR_197 -> VAR_198 << VAR_199 ) ) ; VAR_200 = METHOD_7 ( VAR_201 -> VAR_202 , ( TYPE_21 ) ( VAR_203 -> VAR_204 << VAR_205 ) ) ; VAR_206 = VAR_207 -> VAR_208 + VAR_209 ; VAR_210 = VAR_211 -> VAR_212 + VAR_213 ; if ( ! ( ( VAR_214 -> VAR_215 % ( TYPE_22 ) ( VAR_216 -> VAR_217 << VAR_218 ) == 0 ) || ( ( VAR_219 -> VAR_220 == VAR_221 -> VAR_222 ) && ( ( VAR_223 << VAR_224 ) % ( 1 << VAR_225 ) ) ) ) ) { continue ; } if ( ! ( ( VAR_226 -> VAR_227 % ( TYPE_23 ) ( VAR_228 -> VAR_229 << VAR_230 ) == 0 ) || ( ( VAR_231 -> VAR_232 == VAR_233 -> VAR_234 ) && ( ( VAR_235 << VAR_236 ) % ( 1 << VAR_237 ) ) ) ) ) { continue ; } if ( ( VAR_238 -> VAR_239 == 0 ) || ( VAR_240 -> VAR_241 == 0 ) ) { continue ; } if ( ( VAR_242 == VAR_243 ) || ( VAR_244 == VAR_245 ) ) { continue ; } VAR_246 = METHOD_8 ( METHOD_9 ( VAR_247 -> VAR_248 , ( TYPE_24 ) ( VAR_249 -> VAR_250 << VAR_251 ) ) , ( TYPE_25 ) VAR_252 -> VAR_253 ) - METHOD_10 ( VAR_254 , ( TYPE_26 ) VAR_255 -> VAR_256 ) ; VAR_257 = METHOD_11 ( METHOD_12 ( VAR_258 -> VAR_259 , ( TYPE_27 ) ( VAR_260 -> VAR_261 << VAR_262 ) ) , ( TYPE_28 ) VAR_263 -> VAR_264 ) - METHOD_13 ( VAR_265 , ( TYPE_29 ) VAR_266 -> VAR_267 ) ; VAR_268 -> VAR_269 = ( TYPE_30 ) ( VAR_270 + VAR_271 * ( TYPE_31 ) VAR_272 -> VAR_273 ) ; for ( VAR_274 -> VAR_275 = VAR_276 -> VAR_277 . VAR_278 ; VAR_279 -> VAR_280 < VAR_281 -> VAR_282 . VAR_283 ; VAR_284 -> VAR_285 ++ ) { VAR_286 = VAR_287 -> VAR_288 * VAR_289 -> VAR_290 + VAR_291 -> VAR_292 * VAR_293 -> VAR_294 + VAR_295 -> VAR_296 * VAR_297 -> VAR_298 + VAR_299 -> VAR_300 * VAR_301 -> VAR_302 ; if ( ! VAR_303 -> VAR_304 [ VAR_305 ] ) { VAR_306 -> VAR_307 [ VAR_308 ] = 1 ; return VAR_309 ; } VAR_310 : ; } } } } } return VAR_311 ; }",521
522,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  VAR_3 = VAR_4 ; for ( VAR_5 = VAR_6 ; VAR_7 > 0 ; -- VAR_8 ) { if ( METHOD_1 ( VAR_9 ) == VAR_10 ) { return VAR_11 - VAR_12 ; } } return VAR_13 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_3 = VAR_4 ; for ( VAR_5 = VAR_6 ; VAR_7 > 0 ; -- VAR_8 ) { if ( METHOD_1 ( VAR_9 ) == VAR_10 ) { return VAR_11 - VAR_12 ; } } return VAR_13 ; }",522
523,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 . VAR_9 ) ; struct STRUCT_OR_UNION_2 * VAR_10 = METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 ) ; if ( ! VAR_18 ) { METHOD_5 ( VAR_19 ) ; return - VAR_20 ; } VAR_21 [ 1 ] = VAR_22 ; VAR_23 [ 9 ] = VAR_24 -> VAR_25 ; VAR_26 = METHOD_6 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , VAR_31 ) ; if ( ! VAR_32 ) goto VAR_33 ; VAR_34 -> VAR_35 = METHOD_7 ( & VAR_36 [ 12 ] ) ; VAR_37 -> VAR_38 = METHOD_8 ( & VAR_39 [ 16 ] ) ; VAR_40 -> VAR_41 = METHOD_9 ( & VAR_42 [ 20 ] ) ; VAR_43 -> VAR_44 = METHOD_10 ( & VAR_45 [ 24 ] ) ; VAR_46 :  METHOD_11 ( VAR_47 ) ;  return VAR_48 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; VAR_2 * VAR_3 ; VAR_4 * VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 = METHOD_1 ( VAR_7 -> VAR_8 . VAR_9 ) ; struct STRUCT_OR_UNION_2 * VAR_10 = METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( VAR_13 ) ; if ( ! VAR_14 ) return - VAR_15 ; VAR_16 = METHOD_4 ( VAR_17 ) ; if ( ! VAR_18 ) { METHOD_5 ( VAR_19 ) ; return - VAR_20 ; } VAR_21 [ 1 ] = VAR_22 ; VAR_23 [ 9 ] = VAR_24 -> VAR_25 ; VAR_26 = METHOD_6 ( VAR_27 , VAR_28 , VAR_29 , VAR_30 , VAR_31 ) ; if ( ! VAR_32 ) goto VAR_33 ; VAR_34 -> VAR_35 = METHOD_7 ( & VAR_36 [ 12 ] ) ; VAR_37 -> VAR_38 = METHOD_8 ( & VAR_39 [ 16 ] ) ; VAR_40 -> VAR_41 = METHOD_9 ( & VAR_42 [ 20 ] ) ; VAR_43 -> VAR_44 = METHOD_10 ( & VAR_45 [ 24 ] ) ; VAR_46 : METHOD_11 ( VAR_28 ) ; METHOD_11 ( VAR_47 ) ; return VAR_48 ; }",523
524,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; struct STRUCT_OR_UNION_0 VAR_2 ; TYPE_3 VAR_3 ;  TYPE_4 VAR_4 [ VAR_5 ] ;  METHOD_1 ( VAR_6 , 0 , sizeof ( VAR_7 ) ) ;  VAR_8 = METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) , VAR_12 , & VAR_13 , & VAR_14 ) ;  if ( VAR_15 > 0 ) {  VAR_16 [ VAR_17 ] = 0 ;  if ( VAR_18 . VAR_19 != VAR_20 ) return ; if ( METHOD_3 ( VAR_21 , ""M-SEARCH*"" ) ) { TYPE_5 VAR_22 ; TYPE_6 * VAR_23 , * VAR_24 ; struct STRUCT_OR_UNION_1 * VAR_25 ; struct STRUCT_OR_UNION_2 * VAR_26 = ( struct STRUCT_OR_UNION_3 * ) & VAR_27 ; VAR_28 = METHOD_4 ( & VAR_29 ) ; if ( ! VAR_30 ) { METHOD_5 ( VAR_31 , ""Nomatchingsocketforclient%s"" , METHOD_6 ( VAR_32 -> VAR_33 ) ) ; return ; } METHOD_7 ( VAR_34 , ""Matchingsocketforclient%s"" , METHOD_8 ( VAR_35 -> VAR_36 ) ) ; VAR_37 = METHOD_9 ( VAR_38 , ""\\r\\nST:"" ) ; if ( ! VAR_39 ) { METHOD_10 ( VAR_40 , ""NoSearchType(ST:)foundinM-SEARCH*,assuming"" VAR_41 ) ; VAR_42 = VAR_43 ; METHOD_11 ( VAR_44 , VAR_45 , & VAR_46 ) ; return ; } VAR_47 = METHOD_12 ( VAR_48 , ':' ) ; if ( ! VAR_49 ) return ; VAR_50 ++ ; while ( METHOD_13 ( * VAR_51 ) ) VAR_52 ++ ; VAR_53 = METHOD_14 ( VAR_54 , ""\\r\\n"" ) ; if ( ! VAR_55 ) return ; * VAR_56 = 0 ; for ( VAR_57 = 0 ; VAR_58 [ VAR_59 ] ; VAR_60 ++ ) { if ( ! METHOD_15 ( VAR_61 [ VAR_62 ] , VAR_63 ) ) { METHOD_16 ( VAR_64 , ""M-SEARCH*ST:%sfrom%sport%d"" , VAR_65 , METHOD_17 ( VAR_66 -> VAR_67 ) , METHOD_18 ( VAR_68 -> VAR_69 ) ) ; METHOD_19 ( VAR_70 , VAR_71 , & VAR_72 ) ; return ; } } METHOD_20 ( VAR_73 , ""M-SEARCH*forunsupportedST:%sfrom%s"" , VAR_74 , METHOD_21 ( VAR_75 -> VAR_76 ) ) ; } } }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 VAR_1 ; struct STRUCT_OR_UNION_0 VAR_2 ; TYPE_3 VAR_3 ; TYPE_4 VAR_4 [ VAR_5 ] ; METHOD_1 ( VAR_6 , 0 , sizeof ( VAR_7 ) ) ; VAR_8 = METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) , VAR_12 , & VAR_13 , & VAR_14 ) ; if ( VAR_15 > 0 ) { VAR_16 [ VAR_17 ] = 0 ; if ( VAR_18 . VAR_19 != VAR_20 ) return ; if ( METHOD_3 ( VAR_21 , ""M-SEARCH*"" ) ) { TYPE_5 VAR_22 ; TYPE_6 * VAR_23 , * VAR_24 ; struct STRUCT_OR_UNION_1 * VAR_25 ; struct STRUCT_OR_UNION_2 * VAR_26 = ( struct STRUCT_OR_UNION_3 * ) & VAR_27 ; VAR_28 = METHOD_4 ( & VAR_29 ) ; if ( ! VAR_30 ) { METHOD_5 ( VAR_31 , ""Nomatchingsocketforclient%s"" , METHOD_6 ( VAR_32 -> VAR_33 ) ) ; return ; } METHOD_7 ( VAR_34 , ""Matchingsocketforclient%s"" , METHOD_8 ( VAR_35 -> VAR_36 ) ) ; VAR_37 = METHOD_9 ( VAR_38 , ""\\r\\nST:"" ) ; if ( ! VAR_39 ) { METHOD_10 ( VAR_40 , ""NoSearchType(ST:)foundinM-SEARCH*,assuming"" VAR_41 ) ; VAR_42 = VAR_43 ; METHOD_11 ( VAR_44 , VAR_45 , & VAR_46 ) ; return ; } VAR_47 = METHOD_12 ( VAR_48 , ':' ) ; if ( ! VAR_49 ) return ; VAR_50 ++ ; while ( METHOD_13 ( * VAR_51 ) ) VAR_52 ++ ; VAR_53 = METHOD_14 ( VAR_54 , ""\\r\\n"" ) ; if ( ! VAR_55 ) return ; * VAR_56 = 0 ; for ( VAR_57 = 0 ; VAR_58 [ VAR_59 ] ; VAR_60 ++ ) { if ( ! METHOD_15 ( VAR_61 [ VAR_62 ] , VAR_63 ) ) { METHOD_16 ( VAR_64 , ""M-SEARCH*ST:%sfrom%sport%d"" , VAR_65 , METHOD_17 ( VAR_66 -> VAR_67 ) , METHOD_18 ( VAR_68 -> VAR_69 ) ) ; METHOD_19 ( VAR_70 , VAR_71 , & VAR_72 ) ; return ; } } METHOD_20 ( VAR_73 , ""M-SEARCH*forunsupportedST:%sfrom%s"" , VAR_74 , METHOD_21 ( VAR_75 -> VAR_76 ) ) ; } } }",524
525,"static TYPE_0 METHOD_0 ( TYPE_1 * TYPE_2 ) { TYPE_3 * VAR_0 , * VAR_1 , * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 ; const TYPE_4 * VAR_9 , * VAR_10 , * VAR_11 , * VAR_12 ;  unsigned TYPE_5 VAR_13 , VAR_14 , VAR_15 ;  TYPE_6 VAR_16 , VAR_17 ; unsigned TYPE_7 VAR_18 , VAR_19 ; VAR_20 = ( TYPE_8 ) TYPE_9 -> TYPE_10 [ 0 ] . VAR_21 ; VAR_22 = 1 << ( VAR_23 - 1 ) ; VAR_24 = ( 1 << VAR_25 ) - 1 ;  VAR_26 = ( unsigned TYPE_11 ) TYPE_12 -> TYPE_13 [ 0 ] . TYPE_14 ; VAR_27 = ( unsigned TYPE_15 ) TYPE_16 -> TYPE_17 [ 0 ] . TYPE_18 ;  VAR_28 = VAR_29 * VAR_30 ; VAR_31 = TYPE_19 -> TYPE_20 [ 0 ] . VAR_32 ; VAR_33 = TYPE_21 -> TYPE_22 [ 1 ] . VAR_34 ; VAR_35 = TYPE_23 -> TYPE_24 [ 2 ] . VAR_36 ;  VAR_37 = VAR_38 = ( TYPE_25 * ) METHOD_1 ( sizeof ( TYPE_26 ) * ( TYPE_27 ) VAR_39 ) ;   VAR_40 = VAR_41 = ( TYPE_28 * ) METHOD_2 ( sizeof ( TYPE_29 ) * ( TYPE_30 ) VAR_42 ) ;  VAR_43 = VAR_44 = ( TYPE_31 * ) METHOD_3 ( sizeof ( TYPE_32 ) * ( TYPE_33 ) VAR_45 ) ; if ( VAR_46 == VAR_47 || VAR_48 == VAR_49 || VAR_50 == VAR_51 ) goto VAR_52 ;  for ( VAR_53 = 0U ; VAR_54 < ( VAR_55 & ~ ( unsigned TYPE_34 ) 1U ) ; VAR_56 += 2U )  {  VAR_57 = VAR_58 + VAR_59 ;  VAR_60 = VAR_61 + VAR_62 ; VAR_63 = VAR_64 + VAR_65 ; VAR_66 = VAR_67 + VAR_68 ;  for ( VAR_69 = 0 ; VAR_70 < ( VAR_71 & ~ ( unsigned TYPE_35 ) 1U ) ; VAR_72 += 2U )  { METHOD_4 ( VAR_73 , VAR_74 , * VAR_75 , * VAR_76 , * VAR_77 , VAR_78 , VAR_79 , VAR_80 ) ; ++ VAR_81 ; ++ VAR_82 ; ++ VAR_83 ; ++ VAR_84 ; METHOD_5 ( VAR_85 , VAR_86 , * VAR_87 , * VAR_88 , * VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; ++ VAR_93 ; ++ VAR_94 ; ++ VAR_95 ; ++ VAR_96 ; METHOD_6 ( VAR_97 , VAR_98 , * VAR_99 , * VAR_100 , * VAR_101 , VAR_102 , VAR_103 , VAR_104 ) ; ++ VAR_105 ; ++ VAR_106 ; ++ VAR_107 ; ++ VAR_108 ; METHOD_7 ( VAR_109 , VAR_110 , * VAR_111 , * VAR_112 , * VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; ++ VAR_117 ; ++ VAR_118 ; ++ VAR_119 ; ++ VAR_120 ; ++ VAR_121 ; ++ VAR_122 ; }  if ( VAR_123 < VAR_124 )  { METHOD_8 ( VAR_125 , VAR_126 , * VAR_127 , * VAR_128 , * VAR_129 , VAR_130 , VAR_131 , VAR_132 ) ; ++ VAR_133 ; ++ VAR_134 ; ++ VAR_135 ; ++ VAR_136 ; METHOD_9 ( VAR_137 , VAR_138 , * VAR_139 , * VAR_140 , * VAR_141 , VAR_142 , VAR_143 , VAR_144 ) ; ++ VAR_145 ; ++ VAR_146 ; ++ VAR_147 ; ++ VAR_148 ; ++ VAR_149 ; ++ VAR_150 ; } VAR_151 += VAR_152 ; VAR_153 += VAR_154 ; VAR_155 += VAR_156 ; VAR_157 += VAR_158 ; }  if ( VAR_159 < VAR_160 )  {  for ( VAR_161 = 0U ; VAR_162 < ( VAR_163 & ~ ( unsigned TYPE_36 ) 1U ) ; VAR_164 += 2U )  { METHOD_10 ( VAR_165 , VAR_166 , * VAR_167 , * VAR_168 , * VAR_169 , VAR_170 , VAR_171 , VAR_172 ) ; ++ VAR_173 ; ++ VAR_174 ; ++ VAR_175 ; ++ VAR_176 ; METHOD_11 ( VAR_177 , VAR_178 , * VAR_179 , * VAR_180 , * VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; ++ VAR_185 ; ++ VAR_186 ; ++ VAR_187 ; ++ VAR_188 ; ++ VAR_189 ; ++ VAR_190 ; } if ( VAR_191 < VAR_192 ) { METHOD_12 ( VAR_193 , VAR_194 , * VAR_195 , * VAR_196 , * VAR_197 , VAR_198 , VAR_199 , VAR_200 ) ; } } METHOD_13 ( TYPE_37 -> TYPE_38 [ 0 ] . VAR_201 ) ; TYPE_39 -> TYPE_40 [ 0 ] . VAR_202 = VAR_203 ; METHOD_14 ( TYPE_41 -> TYPE_42 [ 1 ] . VAR_204 ) ; TYPE_43 -> TYPE_44 [ 1 ] . VAR_205 = VAR_206 ; METHOD_15 ( TYPE_45 -> TYPE_46 [ 2 ] . VAR_207 ) ; TYPE_47 -> TYPE_48 [ 2 ] . VAR_208 = VAR_209 ;  if METHOD_16 ( VAR_210 ) || METHOD_17 ( VAR_211 )   TYPE_49 -> TYPE_50 [ 1 ] . TYPE_51 = VAR_212 ; TYPE_52 -> TYPE_53 [ 1 ] . TYPE_54 = VAR_213 ;   TYPE_55 -> TYPE_56 [ 2 ] . TYPE_57 = VAR_214 ; TYPE_58 -> TYPE_59 [ 2 ] . TYPE_60 = VAR_215 ;  else  TYPE_61 -> TYPE_62 [ 1 ] . TYPE_63 = ( TYPE_64 ) VAR_216 ; TYPE_65 -> TYPE_66 [ 1 ] . TYPE_67 = ( TYPE_68 ) VAR_217 ;   TYPE_69 -> TYPE_70 [ 2 ] . TYPE_71 = ( TYPE_72 ) VAR_218 ; TYPE_73 -> TYPE_74 [ 2 ] . TYPE_75 = ( TYPE_76 ) VAR_219 ;  TYPE_77 -> TYPE_78 [ 1 ] . TYPE_79 = TYPE_80 -> TYPE_81 [ 0 ] . TYPE_82 ; TYPE_83 -> TYPE_84 [ 2 ] . TYPE_85 = TYPE_86 -> TYPE_87 [ 0 ] . TYPE_88 ; TYPE_89 -> TYPE_90 [ 1 ] . TYPE_91 = TYPE_92 -> TYPE_93 [ 0 ] . TYPE_94 ;  TYPE_95 -> TYPE_96 [ 2 ] . TYPE_97 = TYPE_98 -> TYPE_99 [ 0 ] . TYPE_100 ;  return ; VAR_220 :  if ( VAR_221 ) METHOD_18 ( VAR_222 ) ;   if ( VAR_223 ) METHOD_19 ( VAR_224 ) ;   if ( VAR_225 ) METHOD_20 ( VAR_226 ) ;  }","static TYPE_0 METHOD_0 ( TYPE_1 * TYPE_2 ) { TYPE_3 * VAR_0 , * VAR_1 , * VAR_2 , * VAR_3 , * VAR_4 , * VAR_5 , * VAR_6 , * VAR_7 , * VAR_8 ; const TYPE_4 * VAR_9 , * VAR_10 , * VAR_11 , * VAR_12 ; unsigned TYPE_5 VAR_13 , VAR_14 , VAR_15 ; TYPE_6 VAR_16 , VAR_17 ; unsigned TYPE_7 VAR_18 , VAR_19 ; VAR_20 = ( TYPE_8 ) TYPE_9 -> TYPE_10 [ 0 ] . VAR_21 ; VAR_22 = 1 << ( VAR_23 - 1 ) ; VAR_24 = ( 1 << VAR_25 ) - 1 ; VAR_26 = ( unsigned TYPE_11 ) TYPE_12 -> TYPE_13 [ 0 ] . TYPE_14 ; VAR_27 = ( unsigned TYPE_15 ) TYPE_16 -> TYPE_17 [ 0 ] . TYPE_18 ; VAR_28 = VAR_29 * VAR_30 ; VAR_31 = TYPE_19 -> TYPE_20 [ 0 ] . VAR_32 ; VAR_33 = TYPE_21 -> TYPE_22 [ 1 ] . VAR_34 ; VAR_35 = TYPE_23 -> TYPE_24 [ 2 ] . VAR_36 ; VAR_37 = VAR_38 = ( TYPE_25 * ) METHOD_1 ( sizeof ( TYPE_26 ) * ( TYPE_27 ) VAR_39 ) ; VAR_40 = VAR_41 = ( TYPE_28 * ) METHOD_2 ( sizeof ( TYPE_29 ) * ( TYPE_30 ) VAR_42 ) ; VAR_43 = VAR_44 = ( TYPE_31 * ) METHOD_3 ( sizeof ( TYPE_32 ) * ( TYPE_33 ) VAR_45 ) ; if ( VAR_46 == VAR_47 || VAR_48 == VAR_49 || VAR_50 == VAR_51 ) goto VAR_52 ; for ( VAR_53 = 0U ; VAR_54 < ( VAR_55 & ~ ( TYPE_33 ) 1U ) ; VAR_56 += 2U ) { TYPE_33 VAR_191 ; VAR_57 = VAR_58 + VAR_59 ; VAR_60 = VAR_61 + VAR_62 ; VAR_63 = VAR_64 + VAR_65 ; VAR_66 = VAR_67 + VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < ( VAR_71 & ~ ( TYPE_33 ) 1U ) ; VAR_72 += 2U ) { METHOD_4 ( VAR_73 , VAR_74 , * VAR_75 , * VAR_76 , * VAR_77 , VAR_78 , VAR_79 , VAR_80 ) ; ++ VAR_81 ; ++ VAR_82 ; ++ VAR_83 ; ++ VAR_84 ; METHOD_5 ( VAR_85 , VAR_86 , * VAR_87 , * VAR_88 , * VAR_89 , VAR_90 , VAR_91 , VAR_92 ) ; ++ VAR_93 ; ++ VAR_94 ; ++ VAR_95 ; ++ VAR_96 ; METHOD_6 ( VAR_97 , VAR_98 , * VAR_99 , * VAR_100 , * VAR_101 , VAR_102 , VAR_103 , VAR_104 ) ; ++ VAR_105 ; ++ VAR_106 ; ++ VAR_107 ; ++ VAR_108 ; METHOD_7 ( VAR_109 , VAR_110 , * VAR_111 , * VAR_112 , * VAR_113 , VAR_114 , VAR_115 , VAR_116 ) ; ++ VAR_117 ; ++ VAR_118 ; ++ VAR_119 ; ++ VAR_120 ; ++ VAR_121 ; ++ VAR_122 ; } if ( VAR_123 < VAR_124 ) { METHOD_8 ( VAR_125 , VAR_126 , * VAR_127 , * VAR_128 , * VAR_129 , VAR_130 , VAR_131 , VAR_132 ) ; ++ VAR_133 ; ++ VAR_134 ; ++ VAR_135 ; ++ VAR_136 ; METHOD_9 ( VAR_137 , VAR_138 , * VAR_139 , * VAR_140 , * VAR_141 , VAR_142 , VAR_143 , VAR_144 ) ; ++ VAR_145 ; ++ VAR_146 ; ++ VAR_147 ; ++ VAR_148 ; ++ VAR_149 ; ++ VAR_150 ; } VAR_151 += VAR_152 ; VAR_153 += VAR_154 ; VAR_155 += VAR_156 ; VAR_157 += VAR_158 ; } if ( VAR_159 < VAR_160 ) { for ( VAR_161 = 0U ; VAR_162 < ( VAR_163 & ~ ( unsigned TYPE_36 ) 1U ) ; VAR_164 += 2U ) { METHOD_10 ( VAR_165 , VAR_166 , * VAR_167 , * VAR_168 , * VAR_169 , VAR_170 , VAR_171 , VAR_172 ) ; ++ VAR_173 ; ++ VAR_174 ; ++ VAR_175 ; ++ VAR_176 ; METHOD_11 ( VAR_177 , VAR_178 , * VAR_179 , * VAR_180 , * VAR_181 , VAR_182 , VAR_183 , VAR_184 ) ; ++ VAR_185 ; ++ VAR_186 ; ++ VAR_187 ; ++ VAR_188 ; ++ VAR_189 ; ++ VAR_190 ; } if ( VAR_191 < VAR_228 ) { METHOD_12 ( VAR_193 , VAR_194 , * VAR_195 , * VAR_196 , * VAR_197 , VAR_198 , VAR_199 , VAR_200 ) ; } } METHOD_13 ( TYPE_37 -> TYPE_38 [ 0 ] . VAR_201 ) ; TYPE_39 -> TYPE_40 [ 0 ] . VAR_202 = VAR_203 ; METHOD_14 ( TYPE_41 -> TYPE_42 [ 1 ] . VAR_204 ) ; TYPE_43 -> TYPE_44 [ 1 ] . VAR_205 = VAR_206 ; METHOD_15 ( TYPE_45 -> TYPE_46 [ 2 ] . VAR_207 ) ; TYPE_47 -> TYPE_48 [ 2 ] . VAR_208 = VAR_209 ; TYPE_98 -> TYPE_99 [ 0 ] . TYPE_100 ; return ; VAR_220 : if ( VAR_221 ) METHOD_18 ( VAR_222 ) ; if ( VAR_223 ) METHOD_19 ( VAR_224 ) ; if ( VAR_225 ) METHOD_20 ( VAR_226 ) ; }",525
526,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = 0xFF000000 ; const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 [ 100 ] ;  if ( * VAR_5 == '' ) {  VAR_6 ++ ; VAR_7 -- ; if ( VAR_8 == 3 ) { VAR_9 |= ( METHOD_1 ( VAR_10 [ 2 ] ) << 4 ) | ( METHOD_2 ( VAR_11 [ 1 ] ) << 12 ) | ( METHOD_3 ( VAR_12 [ 0 ] ) << 20 ) ; } else if ( VAR_13 == 4 ) { VAR_14 = ( METHOD_4 ( VAR_15 [ 3 ] ) << 4 ) | ( METHOD_5 ( VAR_16 [ 2 ] ) << 12 ) | ( METHOD_6 ( VAR_17 [ 1 ] ) << 20 ) | ( METHOD_7 ( VAR_18 [ 0 ] ) << 28 ) ; } else if ( VAR_19 == 6 ) { VAR_20 |= METHOD_8 ( VAR_21 [ 5 ] ) | ( METHOD_9 ( VAR_22 [ 4 ] ) << 4 ) | ( METHOD_10 ( VAR_23 [ 3 ] ) << 8 ) | ( METHOD_11 ( VAR_24 [ 2 ] ) << 12 ) | ( METHOD_12 ( VAR_25 [ 1 ] ) << 16 ) | ( METHOD_13 ( VAR_26 [ 0 ] ) << 20 ) ; } else if ( VAR_27 == 8 ) { VAR_28 = METHOD_14 ( VAR_29 [ 7 ] ) | ( METHOD_15 ( VAR_30 [ 6 ] ) << 4 ) | ( METHOD_16 ( VAR_31 [ 5 ] ) << 8 ) | ( METHOD_17 ( VAR_32 [ 4 ] ) << 12 ) | ( METHOD_18 ( VAR_33 [ 3 ] ) << 16 ) | ( METHOD_19 ( VAR_34 [ 2 ] ) << 20 ) | ( METHOD_20 ( VAR_35 [ 1 ] ) << 24 ) | ( METHOD_21 ( VAR_36 [ 0 ] ) << 28 ) ; } } else { METHOD_22 ( VAR_37 , VAR_38 , VAR_39 ) ; VAR_40 [ VAR_41 ] = '\\0' ; VAR_42 = METHOD_23 ( VAR_43 , VAR_44 , METHOD_24 ( VAR_45 ) , sizeof ( TYPE_6 ) , VAR_46 ) ; if ( ! VAR_47 ) return VAR_48 ; VAR_49 = VAR_50 -> VAR_51 ; } return VAR_52 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = 0xFF000000 ; const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 [ 100 ] ; VAR_41 = METHOD_26 ( METHOD_25 ( VAR_41 , 0 ) , sizeof ( VAR_43 ) - 1 ) ; if ( * VAR_5 == '' ) { VAR_6 ++ ; VAR_7 -- ; if ( VAR_8 == 3 ) { VAR_9 |= ( METHOD_1 ( VAR_10 [ 2 ] ) << 4 ) | ( METHOD_2 ( VAR_11 [ 1 ] ) << 12 ) | ( METHOD_3 ( VAR_12 [ 0 ] ) << 20 ) ; } else if ( VAR_13 == 4 ) { VAR_14 = ( METHOD_4 ( VAR_15 [ 3 ] ) << 4 ) | ( METHOD_5 ( VAR_16 [ 2 ] ) << 12 ) | ( METHOD_6 ( VAR_17 [ 1 ] ) << 20 ) | ( METHOD_7 ( VAR_18 [ 0 ] ) << 28 ) ; } else if ( VAR_19 == 6 ) { VAR_20 |= METHOD_8 ( VAR_21 [ 5 ] ) | ( METHOD_9 ( VAR_22 [ 4 ] ) << 4 ) | ( METHOD_10 ( VAR_23 [ 3 ] ) << 8 ) | ( METHOD_11 ( VAR_24 [ 2 ] ) << 12 ) | ( METHOD_12 ( VAR_25 [ 1 ] ) << 16 ) | ( METHOD_13 ( VAR_26 [ 0 ] ) << 20 ) ; } else if ( VAR_27 == 8 ) { VAR_28 = METHOD_14 ( VAR_29 [ 7 ] ) | ( METHOD_15 ( VAR_30 [ 6 ] ) << 4 ) | ( METHOD_16 ( VAR_31 [ 5 ] ) << 8 ) | ( METHOD_17 ( VAR_32 [ 4 ] ) << 12 ) | ( METHOD_18 ( VAR_33 [ 3 ] ) << 16 ) | ( METHOD_19 ( VAR_34 [ 2 ] ) << 20 ) | ( METHOD_20 ( VAR_35 [ 1 ] ) << 24 ) | ( METHOD_21 ( VAR_36 [ 0 ] ) << 28 ) ; } } else { METHOD_22 ( VAR_37 , VAR_38 , VAR_39 ) ; VAR_40 [ VAR_41 ] = '\\0' ; VAR_42 = METHOD_23 ( VAR_43 , VAR_44 , METHOD_24 ( VAR_45 ) , sizeof ( TYPE_6 ) , VAR_46 ) ; if ( ! VAR_47 ) return VAR_48 ; VAR_49 = VAR_50 -> VAR_51 ; } return VAR_52 ; }",526
527,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_1 VAR_11 = VAR_12 -> VAR_13 -> VAR_14 ; TYPE_2 VAR_15 , VAR_16 = 0 ; TYPE_3 VAR_17 = 0 ; TYPE_4 VAR_18 = VAR_19 ; METHOD_1 ( VAR_20 ) ; VAR_21 = 0 ; VAR_22 -> VAR_23 = VAR_24 ; for ( ; ; ) { struct STRUCT_OR_UNION_4 * VAR_25 ; TYPE_5 VAR_26 ; TYPE_6 VAR_27 ; if ( VAR_28 >= VAR_29 ) { METHOD_2 ( ""invalidinsnidx%dinsn_cnt%d\\n"" , VAR_30 , VAR_31 ) ; return - VAR_32 ; } VAR_33 = & VAR_34 [ VAR_35 ] ; VAR_36 = METHOD_3 ( VAR_37 -> VAR_38 ) ; if ( ++ VAR_39 > VAR_40 ) { METHOD_4 ( ""BPFprogramistoolarge.Processed%dinsn\\n"" , VAR_41 ) ; return - VAR_42 ; } VAR_43 = METHOD_5 ( VAR_44 , VAR_45 ) ; if ( VAR_46 < 0 ) return VAR_47 ; if ( VAR_48 == 1 ) { if ( VAR_49 ) { if ( VAR_50 ) METHOD_6 ( ""\\nfrom%dto%d:safe\\n"" , VAR_51 , VAR_52 ) ; else METHOD_7 ( ""%d:safe\\n"" , VAR_53 ) ; } goto VAR_54 ; } if ( VAR_55 && VAR_56 ) { METHOD_8 ( ""\\nfrom%dto%d:"" , VAR_57 , VAR_58 ) ; METHOD_9 ( & VAR_59 -> VAR_60 ) ; VAR_61 = VAR_62 ; } if ( VAR_63 ) { METHOD_10 ( ""%d:"" , VAR_64 ) ;  METHOD_11 ( VAR_65 ) ;  } VAR_66 = METHOD_12 ( VAR_67 , VAR_68 , VAR_69 ) ; if ( VAR_70 ) return VAR_71 ; if ( VAR_72 == VAR_73 || VAR_74 == VAR_75 ) { VAR_76 = METHOD_13 ( VAR_77 , VAR_78 ) ; if ( VAR_79 ) return VAR_80 ; } else if ( VAR_81 == VAR_82 ) { enum VAR_83 * VAR_84 , VAR_85 ; VAR_86 = METHOD_14 ( VAR_87 , VAR_88 -> VAR_89 , VAR_90 ) ; if ( VAR_91 ) return VAR_92 ; VAR_93 = METHOD_15 ( VAR_94 , VAR_95 -> VAR_96 , VAR_97 ) ; if ( VAR_98 ) return VAR_99 ; VAR_100 = VAR_101 [ VAR_102 -> VAR_103 ] . VAR_104 ; VAR_105 = METHOD_16 ( VAR_106 , VAR_107 -> VAR_108 , VAR_109 -> VAR_110 , METHOD_17 ( VAR_111 -> VAR_112 ) , VAR_113 , VAR_114 -> VAR_115 ) ; if ( VAR_116 ) return VAR_117 ; if ( METHOD_18 ( VAR_118 -> VAR_119 ) != VAR_120 && METHOD_19 ( VAR_121 -> VAR_122 ) != VAR_123 ) { VAR_124 ++ ; continue ; } VAR_125 = & VAR_126 -> VAR_127 [ VAR_128 ] . VAR_129 ; if ( * VAR_130 == VAR_131 ) { * VAR_132 = VAR_133 ; } else if ( VAR_134 != * VAR_135 && ( VAR_136 == VAR_137 || * VAR_138 == VAR_139 ) ) { METHOD_20 ( ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_140 ; } } else if ( VAR_141 == VAR_142 ) { enum VAR_143 * VAR_144 , VAR_145 ; if ( METHOD_21 ( VAR_146 -> VAR_147 ) == VAR_148 ) { VAR_149 = METHOD_22 ( VAR_150 , VAR_151 ) ; if ( VAR_152 ) return VAR_153 ; VAR_154 ++ ; continue ; } VAR_155 = METHOD_23 ( VAR_156 , VAR_157 -> VAR_158 , VAR_159 ) ; if ( VAR_160 ) return VAR_161 ; VAR_162 = METHOD_24 ( VAR_163 , VAR_164 -> VAR_165 , VAR_166 ) ; if ( VAR_167 ) return VAR_168 ; VAR_169 = VAR_170 [ VAR_171 -> VAR_172 ] . VAR_173 ; VAR_174 = METHOD_25 ( VAR_175 , VAR_176 -> VAR_177 , VAR_178 -> VAR_179 , METHOD_26 ( VAR_180 -> VAR_181 ) , VAR_182 , VAR_183 -> VAR_184 ) ; if ( VAR_185 ) return VAR_186 ; VAR_187 = & VAR_188 -> VAR_189 [ VAR_190 ] . VAR_191 ; if ( * VAR_192 == VAR_193 ) { * VAR_194 = VAR_195 ; } else if ( VAR_196 != * VAR_197 && ( VAR_198 == VAR_199 || * VAR_200 == VAR_201 ) ) { METHOD_27 ( ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_202 ; } } else if ( VAR_203 == VAR_204 ) { if ( METHOD_28 ( VAR_205 -> VAR_206 ) != VAR_207 || VAR_208 -> VAR_209 != VAR_210 ) { METHOD_29 ( ""BPF_STusesreservedfields\\n"" ) ; return - VAR_211 ; } VAR_212 = METHOD_30 ( VAR_213 , VAR_214 -> VAR_215 , VAR_216 ) ; if ( VAR_217 ) return VAR_218 ; VAR_219 = METHOD_31 ( VAR_220 , VAR_221 -> VAR_222 , VAR_223 -> VAR_224 , METHOD_32 ( VAR_225 -> VAR_226 ) , VAR_227 , - 1 ) ; if ( VAR_228 ) return VAR_229 ; } else if ( VAR_230 == VAR_231 ) { TYPE_7 VAR_232 = METHOD_33 ( VAR_233 -> VAR_234 ) ; if ( VAR_235 == VAR_236 ) { if ( METHOD_34 ( VAR_237 -> VAR_238 ) != VAR_239 || VAR_240 -> VAR_241 != 0 || VAR_242 -> VAR_243 != VAR_244 || VAR_245 -> VAR_246 != VAR_247 ) { METHOD_35 ( ""BPF_CALLusesreservedfields\\n"" ) ; return - VAR_248 ; } VAR_249 = METHOD_36 ( VAR_250 , VAR_251 -> VAR_252 , VAR_253 ) ; if ( VAR_254 ) return VAR_255 ; } else if ( VAR_256 == VAR_257 ) { if ( METHOD_37 ( VAR_258 -> VAR_259 ) != VAR_260 || VAR_261 -> VAR_262 != 0 || VAR_263 -> VAR_264 != VAR_265 || VAR_266 -> VAR_267 != VAR_268 ) { METHOD_38 ( ""BPF_JAusesreservedfields\\n"" ) ; return - VAR_269 ; } VAR_270 += VAR_271 -> VAR_272 + 1 ; continue ; } else if ( VAR_273 == VAR_274 ) { if ( METHOD_39 ( VAR_275 -> VAR_276 ) != VAR_277 || VAR_278 -> VAR_279 != 0 || VAR_280 -> VAR_281 != VAR_282 || VAR_283 -> VAR_284 != VAR_285 ) { METHOD_40 ( ""BPF_EXITusesreservedfields\\n"" ) ; return - VAR_286 ; } VAR_287 = METHOD_41 ( VAR_288 , VAR_289 , VAR_290 ) ; if ( VAR_291 ) return VAR_292 ; if ( METHOD_42 ( VAR_293 , VAR_294 ) ) { METHOD_43 ( ""R0leaksaddrasreturnvalue\\n"" ) ; return - VAR_295 ; } VAR_296 : VAR_297 = METHOD_44 ( VAR_298 , & VAR_299 ) ; if ( VAR_300 < 0 ) { break ; } else { VAR_301 = VAR_302 ; continue ; } } else { VAR_303 = METHOD_45 ( VAR_304 , VAR_305 , & VAR_306 ) ; if ( VAR_307 ) return VAR_308 ; } } else if ( VAR_309 == VAR_310 ) { TYPE_8 VAR_311 = METHOD_46 ( VAR_312 -> VAR_313 ) ; if ( VAR_314 == VAR_315 || VAR_316 == VAR_317 ) { VAR_318 = METHOD_47 ( VAR_319 , VAR_320 ) ; if ( VAR_321 ) return VAR_322 ; } else if ( VAR_323 == VAR_324 ) { VAR_325 = METHOD_48 ( VAR_326 , VAR_327 ) ; if ( VAR_328 ) return VAR_329 ; VAR_330 ++ ; } else { METHOD_49 ( ""invalidBPF_LDmode\\n"" ) ; return - VAR_331 ; } METHOD_50 ( VAR_332 , VAR_333 -> VAR_334 ) ; } else { METHOD_51 ( ""unknowninsnclass%d\\n"" , VAR_335 ) ; return - VAR_336 ; } VAR_337 ++ ; } METHOD_52 ( ""processed%dinsns\\n"" , VAR_338 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 -> VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = VAR_9 -> VAR_10 ; TYPE_1 VAR_11 = VAR_12 -> VAR_13 -> VAR_14 ; TYPE_2 VAR_15 , VAR_16 = 0 ; TYPE_3 VAR_17 = 0 ; TYPE_4 VAR_18 = VAR_19 ; METHOD_1 ( VAR_20 ) ; VAR_21 = 0 ; VAR_22 -> VAR_23 = VAR_24 ; for ( ; ; ) { struct STRUCT_OR_UNION_4 * VAR_25 ; TYPE_5 VAR_26 ; TYPE_6 VAR_27 ; if ( VAR_28 >= VAR_29 ) { METHOD_2 ( ""invalidinsnidx%dinsn_cnt%d\\n"" , VAR_30 , VAR_31 ) ; return - VAR_32 ; } VAR_33 = & VAR_34 [ VAR_35 ] ; VAR_36 = METHOD_3 ( VAR_37 -> VAR_38 ) ; if ( ++ VAR_39 > VAR_40 ) { METHOD_4 ( ""BPFprogramistoolarge.Processed%dinsn\\n"" , VAR_41 ) ; return - VAR_42 ; } VAR_43 = METHOD_5 ( VAR_44 , VAR_45 ) ; if ( VAR_46 < 0 ) return VAR_47 ; if ( VAR_48 == 1 ) { if ( VAR_49 ) { if ( VAR_50 ) METHOD_6 ( ""\\nfrom%dto%d:safe\\n"" , VAR_51 , VAR_52 ) ; else METHOD_7 ( ""%d:safe\\n"" , VAR_53 ) ; } goto VAR_54 ; } if ( VAR_55 && VAR_56 ) { METHOD_8 ( ""\\nfrom%dto%d:"" , VAR_57 , VAR_58 ) ; METHOD_9 ( & VAR_59 -> VAR_60 ) ; VAR_61 = VAR_62 ; } if ( VAR_63 ) { METHOD_10 ( ""%d:"" , VAR_64 ) ; METHOD_11 ( VAR_326 , VAR_65 ) ; } VAR_66 = METHOD_12 ( VAR_67 , VAR_68 , VAR_69 ) ; if ( VAR_70 ) return VAR_71 ; if ( VAR_72 == VAR_73 || VAR_74 == VAR_75 ) { VAR_76 = METHOD_13 ( VAR_77 , VAR_78 ) ; if ( VAR_79 ) return VAR_80 ; } else if ( VAR_81 == VAR_82 ) { enum VAR_83 * VAR_84 , VAR_85 ; VAR_86 = METHOD_14 ( VAR_87 , VAR_88 -> VAR_89 , VAR_90 ) ; if ( VAR_91 ) return VAR_92 ; VAR_93 = METHOD_15 ( VAR_94 , VAR_95 -> VAR_96 , VAR_97 ) ; if ( VAR_98 ) return VAR_99 ; VAR_100 = VAR_101 [ VAR_102 -> VAR_103 ] . VAR_104 ; VAR_105 = METHOD_16 ( VAR_106 , VAR_107 -> VAR_108 , VAR_109 -> VAR_110 , METHOD_17 ( VAR_111 -> VAR_112 ) , VAR_113 , VAR_114 -> VAR_115 ) ; if ( VAR_116 ) return VAR_117 ; if ( METHOD_18 ( VAR_118 -> VAR_119 ) != VAR_120 && METHOD_19 ( VAR_121 -> VAR_122 ) != VAR_123 ) { VAR_124 ++ ; continue ; } VAR_125 = & VAR_126 -> VAR_127 [ VAR_128 ] . VAR_129 ; if ( * VAR_130 == VAR_131 ) { * VAR_132 = VAR_133 ; } else if ( VAR_134 != * VAR_135 && ( VAR_136 == VAR_137 || * VAR_138 == VAR_139 ) ) { METHOD_20 ( ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_140 ; } } else if ( VAR_141 == VAR_142 ) { enum VAR_143 * VAR_144 , VAR_145 ; if ( METHOD_21 ( VAR_146 -> VAR_147 ) == VAR_148 ) { VAR_149 = METHOD_22 ( VAR_150 , VAR_151 ) ; if ( VAR_152 ) return VAR_153 ; VAR_154 ++ ; continue ; } VAR_155 = METHOD_23 ( VAR_156 , VAR_157 -> VAR_158 , VAR_159 ) ; if ( VAR_160 ) return VAR_161 ; VAR_162 = METHOD_24 ( VAR_163 , VAR_164 -> VAR_165 , VAR_166 ) ; if ( VAR_167 ) return VAR_168 ; VAR_169 = VAR_170 [ VAR_171 -> VAR_172 ] . VAR_173 ; VAR_174 = METHOD_25 ( VAR_175 , VAR_176 -> VAR_177 , VAR_178 -> VAR_179 , METHOD_26 ( VAR_180 -> VAR_181 ) , VAR_182 , VAR_183 -> VAR_184 ) ; if ( VAR_185 ) return VAR_186 ; VAR_187 = & VAR_188 -> VAR_189 [ VAR_190 ] . VAR_191 ; if ( * VAR_192 == VAR_193 ) { * VAR_194 = VAR_195 ; } else if ( VAR_196 != * VAR_197 && ( VAR_198 == VAR_199 || * VAR_200 == VAR_201 ) ) { METHOD_27 ( ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_202 ; } } else if ( VAR_203 == VAR_204 ) { if ( METHOD_28 ( VAR_205 -> VAR_206 ) != VAR_207 || VAR_208 -> VAR_209 != VAR_210 ) { METHOD_29 ( ""BPF_STusesreservedfields\\n"" ) ; return - VAR_211 ; } VAR_212 = METHOD_30 ( VAR_213 , VAR_214 -> VAR_215 , VAR_216 ) ; if ( VAR_217 ) return VAR_218 ; VAR_219 = METHOD_31 ( VAR_220 , VAR_221 -> VAR_222 , VAR_223 -> VAR_224 , METHOD_32 ( VAR_225 -> VAR_226 ) , VAR_227 , - 1 ) ; if ( VAR_228 ) return VAR_229 ; } else if ( VAR_230 == VAR_231 ) { TYPE_7 VAR_232 = METHOD_33 ( VAR_233 -> VAR_234 ) ; if ( VAR_235 == VAR_236 ) { if ( METHOD_34 ( VAR_237 -> VAR_238 ) != VAR_239 || VAR_240 -> VAR_241 != 0 || VAR_242 -> VAR_243 != VAR_244 || VAR_245 -> VAR_246 != VAR_247 ) { METHOD_35 ( ""BPF_CALLusesreservedfields\\n"" ) ; return - VAR_248 ; } VAR_249 = METHOD_36 ( VAR_250 , VAR_251 -> VAR_252 , VAR_253 ) ; if ( VAR_254 ) return VAR_255 ; } else if ( VAR_256 == VAR_257 ) { if ( METHOD_37 ( VAR_258 -> VAR_259 ) != VAR_260 || VAR_261 -> VAR_262 != 0 || VAR_263 -> VAR_264 != VAR_265 || VAR_266 -> VAR_267 != VAR_268 ) { METHOD_38 ( ""BPF_JAusesreservedfields\\n"" ) ; return - VAR_269 ; } VAR_270 += VAR_271 -> VAR_272 + 1 ; continue ; } else if ( VAR_273 == VAR_274 ) { if ( METHOD_39 ( VAR_275 -> VAR_276 ) != VAR_277 || VAR_278 -> VAR_279 != 0 || VAR_280 -> VAR_281 != VAR_282 || VAR_283 -> VAR_284 != VAR_285 ) { METHOD_40 ( ""BPF_EXITusesreservedfields\\n"" ) ; return - VAR_286 ; } VAR_287 = METHOD_41 ( VAR_288 , VAR_289 , VAR_290 ) ; if ( VAR_291 ) return VAR_292 ; if ( METHOD_42 ( VAR_293 , VAR_294 ) ) { METHOD_43 ( ""R0leaksaddrasreturnvalue\\n"" ) ; return - VAR_295 ; } VAR_296 : VAR_297 = METHOD_44 ( VAR_298 , & VAR_299 ) ; if ( VAR_300 < 0 ) { break ; } else { VAR_301 = VAR_302 ; continue ; } } else { VAR_303 = METHOD_45 ( VAR_304 , VAR_305 , & VAR_306 ) ; if ( VAR_307 ) return VAR_308 ; } } else if ( VAR_309 == VAR_310 ) { TYPE_8 VAR_311 = METHOD_46 ( VAR_312 -> VAR_313 ) ; if ( VAR_314 == VAR_315 || VAR_316 == VAR_317 ) { VAR_318 = METHOD_47 ( VAR_319 , VAR_320 ) ; if ( VAR_321 ) return VAR_322 ; } else if ( VAR_323 == VAR_324 ) { VAR_325 = METHOD_48 ( VAR_326 , VAR_327 ) ; if ( VAR_328 ) return VAR_329 ; VAR_330 ++ ; } else { METHOD_49 ( ""invalidBPF_LDmode\\n"" ) ; return - VAR_331 ; } METHOD_50 ( VAR_332 , VAR_333 -> VAR_334 ) ; } else { METHOD_51 ( ""unknowninsnclass%d\\n"" , VAR_335 ) ; return - VAR_336 ; } VAR_337 ++ ; } METHOD_52 ( ""processed%dinsns\\n"" , VAR_338 ) ; return 0 ; }",527
528,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { if ( ( VAR_3 -> VAR_4 == 1 ) && ( VAR_5 -> VAR_6 [ 0 ] . VAR_7 == 1 ) ) { TYPE_2 VAR_8 = VAR_9 -> VAR_10 [ 0 ] . VAR_11 ; if ( VAR_12 == VAR_13 ) { TYPE_3 VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 ) ;  if ( METHOD_2 ( VAR_18 , METHOD_3 ( ) ) )  return VAR_19 ; } else if ( VAR_20 == VAR_21 ) { TYPE_4 VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 , VAR_25 ) ;  if ( METHOD_5 ( VAR_26 , METHOD_6 ( ) ) )  return VAR_27 ; } } if ( ! METHOD_7 ( VAR_28 ) ) return VAR_29 ; if ( METHOD_8 ( VAR_30 -> VAR_31 , VAR_32 ) && METHOD_9 ( STRUCT_OR_UNION_4 , VAR_33 -> VAR_34 , VAR_35 ) ) return VAR_36 ; return VAR_37 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 ) { if ( ( VAR_3 -> VAR_4 == 1 ) && ( VAR_5 -> VAR_6 [ 0 ] . VAR_7 == 1 ) ) { TYPE_2 VAR_8 = VAR_9 -> VAR_10 [ 0 ] . VAR_11 ; if ( VAR_12 == VAR_13 ) { TYPE_3 VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 , VAR_17 ) ; if ( METHOD_2 ( VAR_18 , STRUCT_OR_UNION_4 -> VAR_38 -> VAR_39 ) ) return VAR_19 ; } else if ( VAR_20 == VAR_21 ) { TYPE_4 VAR_22 = METHOD_4 ( VAR_23 -> VAR_24 , VAR_25 ) ; if ( METHOD_5 ( VAR_26 , STRUCT_OR_UNION_4 -> VAR_38 -> VAR_40 ) ) return VAR_27 ; } } if ( ! METHOD_7 ( VAR_28 ) ) return VAR_29 ; if ( METHOD_8 ( VAR_30 -> VAR_31 , VAR_32 ) && METHOD_9 ( STRUCT_OR_UNION_4 , VAR_33 -> VAR_34 , VAR_35 ) ) return VAR_36 ; return VAR_37 ; }",528
529,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 ) {  return VAR_4 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , unsigned TYPE_2 * VAR_3 ) { return METHOD_2 ( METHOD_1 ( VAR_0 ) ) ; }",529
530,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; if ( METHOD_1 ( VAR_4 , VAR_5 ) ) { return VAR_6 ; } if ( METHOD_2 ( sizeof ( unsigned TYPE_5 * ) , VAR_7 ) ) { return VAR_8 ; }  VAR_9 = ( TYPE_6 * ) METHOD_3 ( 1 , sizeof ( TYPE_7 ) ) ;  VAR_10 -> VAR_11 = ( unsigned TYPE_8 * * ) METHOD_4 ( sizeof ( unsigned TYPE_9 * ) * VAR_12 ) ; VAR_13 -> VAR_14 = ( unsigned TYPE_10 * * ) METHOD_5 ( sizeof ( unsigned TYPE_11 * ) * VAR_15 ) ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 ; VAR_29 ++ ) { VAR_30 -> VAR_31 [ VAR_32 ] = ( unsigned TYPE_12 * ) METHOD_6 ( VAR_33 , sizeof ( unsigned TYPE_13 ) ) ; VAR_34 -> VAR_35 [ VAR_36 ] = ( unsigned TYPE_14 * ) METHOD_7 ( VAR_37 , sizeof ( unsigned TYPE_15 ) ) ; } VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 = 0 ; VAR_46 -> VAR_47 = ( - 1 ) ; VAR_48 -> VAR_49 = 0 ; VAR_50 -> VAR_51 = 1 ; VAR_52 -> VAR_53 = 0 ; VAR_54 -> VAR_55 = 0 ; for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { VAR_60 -> VAR_61 [ VAR_62 ] = 1 ; VAR_63 -> VAR_64 [ VAR_65 ] = 0 ; VAR_66 -> VAR_67 [ VAR_68 ] = 0 ; VAR_69 -> VAR_70 [ VAR_71 ] = 0 ; } VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 = 0 ; VAR_76 -> VAR_77 = 0 ; VAR_78 -> VAR_79 = 0 ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 - 1 ; VAR_84 -> VAR_85 = VAR_86 -> VAR_87 - 1 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; return VAR_94 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; if ( METHOD_1 ( VAR_4 , VAR_5 ) ) { return VAR_6 ; } if ( METHOD_2 ( sizeof ( unsigned TYPE_5 * ) , VAR_7 ) ) { return VAR_8 ; } VAR_9 = ( TYPE_6 * ) METHOD_3 ( 1 , sizeof ( TYPE_7 ) ) ; VAR_10 -> VAR_11 = ( unsigned TYPE_8 * * ) METHOD_4 ( sizeof ( unsigned TYPE_9 * ) * VAR_12 ) ; VAR_13 -> VAR_14 = ( unsigned TYPE_10 * * ) METHOD_5 ( sizeof ( unsigned TYPE_11 * ) * VAR_15 ) ; VAR_16 -> VAR_17 = 0 ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = 0 ; VAR_22 -> VAR_23 = 0 ; VAR_24 -> VAR_25 = 0 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 ; VAR_29 ++ ) { VAR_30 -> VAR_31 [ VAR_32 ] = ( unsigned TYPE_12 * ) METHOD_6 ( VAR_33 , sizeof ( unsigned TYPE_13 ) ) ; VAR_34 -> VAR_35 [ VAR_36 ] = ( unsigned TYPE_14 * ) METHOD_7 ( VAR_37 , sizeof ( unsigned TYPE_15 ) ) ; } VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; VAR_44 -> VAR_45 = 0 ; VAR_46 -> VAR_47 = ( - 1 ) ; VAR_48 -> VAR_49 = 0 ; VAR_50 -> VAR_51 = 1 ; VAR_52 -> VAR_53 = 0 ; VAR_54 -> VAR_55 = 0 ; for ( VAR_56 = 0 ; VAR_57 < VAR_58 ; VAR_59 ++ ) { VAR_60 -> VAR_61 [ VAR_62 ] = 1 ; VAR_63 -> VAR_64 [ VAR_65 ] = 0 ; VAR_66 -> VAR_67 [ VAR_68 ] = 0 ; VAR_69 -> VAR_70 [ VAR_71 ] = 0 ; } VAR_72 -> VAR_73 = 0 ; VAR_74 -> VAR_75 = 0 ; VAR_76 -> VAR_77 = 0 ; VAR_78 -> VAR_79 = 0 ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 - 1 ; VAR_84 -> VAR_85 = VAR_86 -> VAR_87 - 1 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; return VAR_94 ; }",530
531,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , enum VAR_1 VAR_2 , TYPE_1 * VAR_3 , unsigned TYPE_2 VAR_4 ) { unsigned TYPE_3 * VAR_5 = VAR_6 -> VAR_7 + VAR_8 -> VAR_9 ; unsigned TYPE_4 VAR_10 = VAR_11 + ( VAR_12 == VAR_13 ? 0 : VAR_14 ) ;  if ( VAR_15 -> VAR_16 + VAR_17 > VAR_18 ) {  METHOD_1 ( VAR_19 , METHOD_2 ( ""add_control_packet:ERROR,toolargepacket.Exceeds%dbytes\\n"" ) , VAR_20 ) ; return - 1 ; } if ( VAR_21 == VAR_22 ) { METHOD_3 ( VAR_23 , VAR_24 , VAR_25 ) ; VAR_26 -> VAR_27 += VAR_28 ; return VAR_29 ; } METHOD_4 ( VAR_30 , VAR_31 , sizeof ( VAR_32 ) ) ; VAR_33 [ 4 ] = VAR_34 ; if VAR_35 == VAR_36 { unsigned TYPE_5 VAR_37 ; VAR_38 = METHOD_5 ( VAR_39 ) ; METHOD_6 ( VAR_40 + 5 , & VAR_41 , sizeof ( VAR_42 ) ) ; } else METHOD_7 ( VAR_43 + 5 , & VAR_44 , sizeof ( VAR_45 ) ) ; if ( VAR_46 > 0 ) { METHOD_8 ( VAR_47 + VAR_48 , VAR_49 , VAR_50 ) ; } VAR_51 -> VAR_52 += VAR_53 ; return VAR_54 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , enum VAR_1 VAR_2 , TYPE_1 * VAR_3 , unsigned TYPE_2 VAR_4 ) { unsigned TYPE_3 * VAR_5 = VAR_6 -> VAR_7 + VAR_8 -> VAR_9 ; unsigned TYPE_4 VAR_10 = VAR_11 + ( VAR_12 == VAR_13 ? 0 : VAR_14 ) ; if ( VAR_15 -> VAR_16 + VAR_17 > VAR_18 ) { METHOD_1 ( VAR_19 , METHOD_2 ( ""add_control_packet:ERROR,toolargepacket.Exceeds%dbytes\\n"" ) , VAR_20 ) ; return - 1 ; } if ( VAR_21 == VAR_22 ) { METHOD_3 ( VAR_23 , VAR_24 , VAR_25 ) ; VAR_26 -> VAR_27 += VAR_28 ; return VAR_29 ; } METHOD_4 ( VAR_30 , VAR_31 , sizeof ( VAR_32 ) ) ; VAR_33 [ 4 ] = VAR_34 ; if VAR_35 == VAR_36 { unsigned TYPE_5 VAR_37 ; VAR_38 = METHOD_5 ( VAR_39 ) ; METHOD_6 ( VAR_40 + 5 , & VAR_41 , sizeof ( VAR_42 ) ) ; } else METHOD_7 ( VAR_43 + 5 , & VAR_44 , sizeof ( VAR_45 ) ) ; if ( VAR_46 > 0 ) { METHOD_8 ( VAR_47 + VAR_48 , VAR_49 , VAR_50 ) ; } VAR_51 -> VAR_52 += VAR_53 ; return VAR_54 ; }",531
532,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 [ VAR_3 ] ; TYPE_3 * VAR_4 = VAR_5 ; if ( ! VAR_6 ) return - 1 ; while ( * VAR_7 ) { METHOD_1 ( VAR_8 ) ; if ( METHOD_2 ( ""FLAGS"" , VAR_9 , 5 ) == 0 ) { VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) return - 1 ; } else if ( METHOD_4 ( ""UID"" , VAR_14 , 3 ) == 0 ) { VAR_15 += 3 ; METHOD_5 ( VAR_16 ) ; if ( METHOD_6 ( VAR_17 , & VAR_18 -> VAR_19 -> VAR_20 ) < 0 ) return - 1 ; VAR_21 = METHOD_7 ( VAR_22 ) ; } else if ( METHOD_8 ( ""INTERNALDATE"" , VAR_23 , 12 ) == 0 ) { VAR_24 += 12 ; METHOD_9 ( VAR_25 ) ; if ( * VAR_26 != \'\\""\' ) { mutt_debug ( 1 , ""bogusINTERNALDATEentry:%s\\n"" , VAR_27 ) ; return - 1 ; } VAR_28 ++ ; VAR_29 = VAR_30 ;  while ( * VAR_31 && * VAR_32 != \'\\""\' )  * VAR_33 ++ = * VAR_34 ++ ; if ( * VAR_35 != \'\\""\' ) return - 1 ; VAR_36 ++ ; * VAR_37 = '\\0' ; VAR_38 -> received = mutt_date_parse_imap ( VAR_39 ) ; } else if ( METHOD_10 ( ""RFC822.SIZE"" , VAR_40 , 11 ) == 0 ) { VAR_41 += 11 ; METHOD_11 ( VAR_42 ) ; VAR_43 = VAR_44 ;  while ( isdigit ( ( unsigned TYPE_4 ) * VAR_45 ) )  * VAR_46 ++ = * VAR_47 ++ ; * VAR_48 = '\\0' ; if ( mutt_str_atol ( VAR_49 , & VAR_50 -> content_length ) < 0 ) return - 1 ; } else if ( ( METHOD_12 ( ""BODY"" , VAR_51 , 4 ) == 0 ) || ( METHOD_13 ( ""RFC822.HEADER"" , VAR_52 , 13 ) == 0 ) ) { return - 2 ; } else if ( * VAR_53 == ')' ) VAR_54 ++ ; else if ( * VAR_55 ) { imap_error ( ""msg_parse_fetch"" , VAR_56 ) ; return - 1 ; } } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 [ VAR_3 ] ; TYPE_3 * VAR_4 = VAR_5 ; if ( ! VAR_6 ) return - 1 ; while ( * VAR_7 ) { METHOD_1 ( VAR_8 ) ; if ( METHOD_2 ( ""FLAGS"" , VAR_9 , 5 ) == 0 ) { VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; if ( ! VAR_13 ) return - 1 ; } else if ( METHOD_4 ( ""UID"" , VAR_14 , 3 ) == 0 ) { VAR_15 += 3 ; METHOD_5 ( VAR_16 ) ; if ( METHOD_6 ( VAR_17 , & VAR_18 -> VAR_19 -> VAR_20 ) < 0 ) return - 1 ; VAR_21 = METHOD_7 ( VAR_22 ) ; } else if ( METHOD_8 ( ""INTERNALDATE"" , VAR_23 , 12 ) == 0 ) { VAR_24 += 12 ; METHOD_9 ( VAR_25 ) ; if ( * VAR_26 != \'\\""\' ) { mutt_debug ( 1 , ""bogusINTERNALDATEentry:%s\\n"" , VAR_27 ) ; return - 1 ; } VAR_28 ++ ; VAR_29 = VAR_30 ; while ( * VAR_31 && * VAR_32 != \'\\""\' ) * VAR_33 ++ = * VAR_34 ++ ; if ( * VAR_35 != \'\\""\' ) return - 1 ; VAR_36 ++ ; * VAR_37 = '\\0' ; VAR_38 -> received = mutt_date_parse_imap ( VAR_39 ) ; } else if ( METHOD_10 ( ""RFC822.SIZE"" , VAR_40 , 11 ) == 0 ) { VAR_41 += 11 ; METHOD_11 ( VAR_42 ) ; VAR_43 = VAR_44 ; while ( isdigit ( ( unsigned TYPE_4 ) * VAR_45 ) ) * VAR_46 ++ = * VAR_47 ++ ; * VAR_48 = '\\0' ; if ( mutt_str_atol ( VAR_49 , & VAR_50 -> content_length ) < 0 ) return - 1 ; } else if ( ( METHOD_12 ( ""BODY"" , VAR_51 , 4 ) == 0 ) || ( METHOD_13 ( ""RFC822.HEADER"" , VAR_52 , 13 ) == 0 ) ) { return - 2 ; } else if ( * VAR_53 == ')' ) VAR_54 ++ ; else if ( * VAR_55 ) { imap_error ( ""msg_parse_fetch"" , VAR_56 ) ; return - 1 ; } } return 0 ; }",532
533,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  TYPE_3 VAR_2 ;  if ( METHOD_1 ( VAR_3 , 4 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; if ( METHOD_1 ( VAR_3 , 4 , & VAR_4 ) ) return - 1 ; * VAR_5 = VAR_6 ; return 0 ; }",533
534,static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 = METHOD_1 ( VAR_0 ) ;  TYPE_2 VAR_1 = METHOD_2 ( ) ;  do { STRUCT_OR_UNION_2 -> VAR_2 = 0 ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ! METHOD_5 ( ) ) ; METHOD_6 ( ) ; } while ( STRUCT_OR_UNION_3 -> VAR_4 ) ;  } ,static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 = METHOD_1 ( VAR_0 ) ; TYPE_2 VAR_1 = METHOD_2 ( ) ; METHOD_7 ( & VAR_5 ) ; do { STRUCT_OR_UNION_2 -> VAR_2 = 0 ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( ! METHOD_5 ( ) ) ; METHOD_6 ( ) ; } while ( STRUCT_OR_UNION_3 -> VAR_4 ) ; METHOD_8 ( & VAR_5 ) ; },534
535,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = & VAR_11 -> VAR_12 ;  const TYPE_3 * VAR_13 = VAR_14 -> VAR_15 -> METHOD_1 . VAR_16 ;  TYPE_4 VAR_17 ; TYPE_5 VAR_18 [ VAR_19 + 1 ] ; * VAR_20 = VAR_21 ; METHOD_2 ( VAR_22 ) ; VAR_23 = METHOD_3 ( VAR_24 ) ; if ( VAR_25 != VAR_26 ) return VAR_27 ; VAR_28 -> VAR_29 . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; if ( VAR_44 -> VAR_45 . VAR_46 && VAR_47 -> VAR_48 . VAR_49 ) { struct STRUCT_OR_UNION_4 VAR_50 ; struct STRUCT_OR_UNION_5 * VAR_51 ; VAR_52 = VAR_53 -> METHOD_4 . VAR_54 . VAR_55 ; METHOD_5 ( & VAR_56 , 0 , sizeof ( VAR_57 ) ) ; VAR_58 -> METHOD_6 . VAR_59 . VAR_60 = & VAR_61 ; VAR_62 = METHOD_7 ( VAR_63 , VAR_64 , VAR_65 -> VAR_66 . VAR_67 , VAR_68 -> VAR_69 ) ; VAR_70 -> METHOD_8 . VAR_71 . VAR_72 = VAR_73 ; if ( VAR_74 != VAR_75 ) return VAR_76 ; } if ( ( VAR_77 -> VAR_78 -> VAR_79 & VAR_80 ) && VAR_81 -> METHOD_9 . VAR_82 != VAR_83 ) { VAR_84 = METHOD_10 ( VAR_85 , VAR_86 ) ; if ( VAR_87 ) return VAR_88 ; } METHOD_11 ( VAR_89 ) ; VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; VAR_99 -> VAR_100 = VAR_101 ; if ( ! * VAR_102 ) { if ( ! METHOD_12 ( VAR_103 , sizeof VAR_104 ) ) VAR_105 = VAR_106 ; else VAR_107 = ""localhost"" ; }  VAR_108 -> VAR_109 = METHOD_13 ( VAR_110 -> VAR_111 , VAR_112 , 0 , & VAR_113 ) ;  if ( ! VAR_114 -> VAR_115 ) return VAR_116 ; METHOD_14 ( VAR_117 , VAR_118 ) ; if ( VAR_119 -> METHOD_15 . VAR_120 == VAR_121 ) VAR_122 = METHOD_16 ( VAR_123 , VAR_124 ) ; else { VAR_125 = METHOD_17 ( VAR_126 ) ; if ( ! VAR_127 ) * VAR_128 = VAR_129 ; } return VAR_130 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 = & VAR_4 -> VAR_5 . VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 = VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_3 * VAR_10 = & VAR_11 -> VAR_12 ; const TYPE_3 * VAR_13 = VAR_14 -> VAR_15 -> METHOD_1 . VAR_16 ; TYPE_4 VAR_17 ; TYPE_5 VAR_18 [ VAR_19 + 1 ] ; * VAR_20 = VAR_21 ; METHOD_2 ( VAR_22 ) ; VAR_23 = METHOD_3 ( VAR_24 ) ; if ( VAR_25 != VAR_26 ) return VAR_27 ; VAR_28 -> VAR_29 . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = VAR_37 ; VAR_38 -> VAR_39 = VAR_40 ; VAR_41 -> VAR_42 = VAR_43 ; if ( VAR_44 -> VAR_45 . VAR_46 && VAR_47 -> VAR_48 . VAR_49 ) { struct STRUCT_OR_UNION_4 VAR_50 ; struct STRUCT_OR_UNION_5 * VAR_51 ; VAR_52 = VAR_53 -> METHOD_4 . VAR_54 . VAR_55 ; METHOD_5 ( & VAR_56 , 0 , sizeof ( VAR_57 ) ) ; VAR_58 -> METHOD_6 . VAR_59 . VAR_60 = & VAR_61 ; VAR_62 = METHOD_7 ( VAR_63 , VAR_64 , VAR_65 -> VAR_66 . VAR_67 , VAR_68 -> VAR_69 ) ; VAR_70 -> METHOD_8 . VAR_71 . VAR_72 = VAR_73 ; if ( VAR_74 != VAR_75 ) return VAR_76 ; } if ( ( VAR_77 -> VAR_78 -> VAR_79 & VAR_80 ) && VAR_81 -> METHOD_9 . VAR_82 != VAR_83 ) { VAR_84 = METHOD_10 ( VAR_85 , VAR_86 ) ; if ( VAR_87 ) return VAR_88 ; } METHOD_11 ( VAR_89 ) ; VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = VAR_98 ; VAR_99 -> VAR_100 = VAR_101 ; if ( ! * VAR_102 ) { if ( ! METHOD_12 ( VAR_103 , sizeof VAR_104 ) ) VAR_105 = VAR_106 ; else VAR_107 = ""localhost"" ; } VAR_130 = METHOD_18 ( VAR_126 -> VAR_119 , VAR_112 , 0 , & VAR_108 -> VAR_109 = METHOD_13 ( VAR_110 -> VAR_111 , VAR_112 , 0 , & VAR_113 ) ; if ( ! VAR_114 -> VAR_115 ) return VAR_116 ; METHOD_14 ( VAR_117 , VAR_118 ) ; if ( VAR_119 -> METHOD_15 . VAR_120 == VAR_121 ) VAR_122 = METHOD_16 ( VAR_123 , VAR_124 ) ; else { VAR_125 = METHOD_17 ( VAR_126 ) ; if ( ! VAR_127 ) * VAR_128 = VAR_129 ; } return VAR_130 ; }",535
536,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 * VAR_1 ) { if ( ! VAR_2 || ! VAR_3 ) return - 1 ; if ( VAR_4 -> VAR_5 ) { if ( ( VAR_6 -> VAR_7 && ( VAR_8 -> VAR_9 == ( VAR_10 -> VAR_11 - 1 ) ) ) || ( ! VAR_12 -> VAR_13 && ( VAR_14 -> VAR_15 == ( VAR_16 -> VAR_17 + 1 ) ) ) ) { VAR_18 -> VAR_19 = 0 ; } } if ( ! VAR_20 -> VAR_21 ) { VAR_22 -> VAR_23 = VAR_24 -> VAR_25 ; if ( VAR_26 -> VAR_27 == VAR_28 -> VAR_29 ) return 1 ;  while ( ! * ( VAR_30 -> VAR_31 ) )  VAR_32 -> VAR_33 ++ ; VAR_34 -> VAR_35 = METHOD_1 ( VAR_36 -> VAR_37 , ',' ) ; if ( ! VAR_38 -> VAR_39 ) VAR_40 -> VAR_41 = VAR_42 -> VAR_43 ; else * ( VAR_44 -> VAR_45 ) = '\\0' ; TYPE_2 * VAR_46 = METHOD_2 ( VAR_47 -> VAR_48 , ':' ) ; if ( VAR_49 ) * VAR_50 ++ = '\\0' ; if ( METHOD_3 ( VAR_51 -> VAR_52 , & VAR_53 -> VAR_54 ) != 0 ) return - 1 ; if ( VAR_55 ) { if ( METHOD_4 ( VAR_56 , & VAR_57 -> VAR_58 ) != 0 ) return - 1 ; } else VAR_59 -> VAR_60 = VAR_61 -> VAR_62 ; VAR_63 -> VAR_64 = ( VAR_65 -> VAR_66 < VAR_67 -> VAR_68 ) ; VAR_69 -> VAR_70 = 1 ; } * VAR_71 = VAR_72 -> VAR_73 ; if ( VAR_74 -> VAR_75 ) VAR_76 -> VAR_77 -- ; else VAR_78 -> VAR_79 ++ ; return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 * VAR_1 ) { if ( ! VAR_2 || ! VAR_3 ) return - 1 ; if ( VAR_4 -> VAR_5 ) { if ( ( VAR_6 -> VAR_7 && ( VAR_8 -> VAR_9 == ( VAR_10 -> VAR_11 - 1 ) ) ) || ( ! VAR_12 -> VAR_13 && ( VAR_14 -> VAR_15 == ( VAR_16 -> VAR_17 + 1 ) ) ) ) { VAR_18 -> VAR_19 = 0 ; } } if ( ! VAR_20 -> VAR_21 ) { VAR_22 -> VAR_23 = VAR_24 -> VAR_25 ; if ( VAR_26 -> VAR_27 == VAR_28 -> VAR_29 ) return 1 ; VAR_78 -> VAR_45 = METHOD_2 ( VAR_78 -> VAR_52 , ',' ) ; if ( ! VAR_78 -> VAR_45 ) VAR_78 -> VAR_45 = VAR_78 -> VAR_43 ; else * ( VAR_78 -> VAR_45 ++ ) = '\\0' ; TYPE_2 * VAR_46 = METHOD_2 ( VAR_47 -> VAR_48 , ':' ) ; if ( VAR_49 ) * VAR_50 ++ = '\\0' ; if ( METHOD_3 ( VAR_51 -> VAR_52 , & VAR_53 -> VAR_54 ) != 0 ) return - 1 ; if ( VAR_55 ) { if ( METHOD_4 ( VAR_56 , & VAR_57 -> VAR_58 ) != 0 ) return - 1 ; } else VAR_59 -> VAR_60 = VAR_61 -> VAR_62 ; VAR_63 -> VAR_64 = ( VAR_65 -> VAR_66 < VAR_67 -> VAR_68 ) ; VAR_69 -> VAR_70 = 1 ; } * VAR_71 = VAR_72 -> VAR_73 ; if ( VAR_74 -> VAR_75 ) VAR_76 -> VAR_77 -- ; else VAR_78 -> VAR_79 ++ ; return 0 ; }",536
537,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) {  const struct STRUCT_OR_UNION_1 * VAR_3 ;  switch ( VAR_4 -> VAR_5 ) { case VAR_6 : VAR_7 = ( const struct STRUCT_OR_UNION_2 * ) ( const TYPE_3 * ) VAR_8 ; METHOD_1 ( * VAR_9 ) ; if ( VAR_10 < sizeof ( struct STRUCT_OR_UNION_3 ) )  goto VAR_11 ;  METHOD_2 ( ( VAR_12 , ""\\n\\textHELLO%ldms"" , ( unsigned TYPE_4 ) METHOD_3 ( & VAR_13 -> VAR_14 ) ) ) ; break ; default : METHOD_4 ( ( VAR_15 , ""\\n\\text%u%u"" , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ) ) ; break ; } return ; VAR_20 : METHOD_5 ( ( VAR_21 , ""[|hello]"" ) ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { const struct STRUCT_OR_UNION_1 * VAR_3 ; switch ( VAR_4 -> VAR_5 ) { case VAR_6 : VAR_7 = ( const struct STRUCT_OR_UNION_2 * ) ( const TYPE_3 * ) VAR_8 ; METHOD_1 ( * VAR_9 ) ; if ( VAR_10 < sizeof ( struct STRUCT_OR_UNION_3 ) ) goto VAR_11 ; METHOD_2 ( ( VAR_12 , ""\\n\\textHELLO%ldms"" , ( unsigned TYPE_4 ) METHOD_3 ( & VAR_13 -> VAR_14 ) ) ) ; break ; default : METHOD_4 ( ( VAR_15 , ""\\n\\text%u%u"" , VAR_16 -> VAR_17 , VAR_18 -> VAR_19 ) ) ; break ; } return ; VAR_20 : METHOD_5 ( ( VAR_21 , ""[|hello]"" ) ) ; }",537
538,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; VAR_16 * VAR_17 ; if ( ! VAR_18 -> VAR_19 || VAR_20 -> VAR_21 == VAR_22 -> VAR_23 ) return METHOD_1 ( VAR_24 , VAR_25 ) ; METHOD_2 ( VAR_26 , ""picturewillmove%soneline\\n"" , VAR_27 -> VAR_28 ? ""up"" : ""down"" ) ; VAR_29 = VAR_30 -> VAR_31 ;  for ( VAR_32 = 0 ; VAR_33 < 4 && VAR_34 -> VAR_35 [ VAR_36 ] ; VAR_37 ++ ) {  VAR_38 = VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 = VAR_43 -> VAR_44 [ VAR_45 ] ; VAR_46 = VAR_47 -> VAR_48 [ VAR_49 ] ; if ( VAR_50 -> VAR_51 ) { for ( VAR_52 = 0 ; VAR_53 < VAR_54 ; VAR_55 ++ ) { if ( 1 + VAR_56 < VAR_57 -> VAR_58 ) { METHOD_3 ( VAR_59 , VAR_60 + VAR_61 , VAR_62 ) ; } else { METHOD_4 ( VAR_63 , VAR_64 - VAR_65 - VAR_66 , VAR_67 ) ; } VAR_68 += VAR_69 ; } } else { VAR_70 += ( VAR_71 - 1 ) * VAR_72 ; for ( VAR_73 = VAR_74 - 1 ; VAR_75 >= 0 ; VAR_76 -- ) { if ( VAR_77 > 0 ) { METHOD_5 ( VAR_78 , VAR_79 - VAR_80 , VAR_81 ) ; } else { METHOD_6 ( VAR_82 , VAR_83 + VAR_84 + VAR_85 , VAR_86 ) ; } VAR_87 -= VAR_88 ; } } } VAR_89 -> VAR_90 = VAR_91 -> VAR_92 ; return METHOD_7 ( VAR_93 , VAR_94 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 * VAR_8 = VAR_9 -> VAR_10 [ 0 ] ; TYPE_6 VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; VAR_16 * VAR_17 ; if ( ! VAR_18 -> VAR_19 || VAR_20 -> VAR_21 == VAR_22 -> VAR_23 ) return METHOD_1 ( VAR_24 , VAR_25 ) ; METHOD_2 ( VAR_26 , ""picturewillmove%soneline\\n"" , VAR_27 -> VAR_28 ? ""up"" : ""down"" ) ; VAR_29 = VAR_30 -> VAR_31 ; for ( VAR_32 = 0 ; VAR_33 < 4 && VAR_34 -> VAR_35 [ VAR_36 ] ; VAR_37 ++ ) { VAR_38 = VAR_39 -> VAR_40 [ VAR_41 ] ; VAR_42 = VAR_43 -> VAR_44 [ VAR_45 ] ; VAR_46 = VAR_47 -> VAR_48 [ VAR_49 ] && VAR_94 -> VAR_40 [ VAR_49 ] ; if ( VAR_50 -> VAR_51 ) { for ( VAR_52 = 0 ; VAR_53 < VAR_54 ; VAR_55 ++ ) { if ( 1 + VAR_56 < VAR_57 -> VAR_58 ) { METHOD_3 ( VAR_59 , VAR_60 + VAR_61 , VAR_62 ) ; } else { METHOD_4 ( VAR_63 , VAR_64 - VAR_65 - VAR_66 , VAR_67 ) ; } VAR_68 += VAR_69 ; } } else { VAR_70 += ( VAR_71 - 1 ) * VAR_72 ; for ( VAR_73 = VAR_74 - 1 ; VAR_75 >= 0 ; VAR_76 -- ) { if ( VAR_77 > 0 ) { METHOD_5 ( VAR_78 , VAR_79 - VAR_80 , VAR_81 ) ; } else { METHOD_6 ( VAR_82 , VAR_83 + VAR_84 + VAR_85 , VAR_86 ) ; } VAR_87 -= VAR_88 ; } } } VAR_89 -> VAR_90 = VAR_91 -> VAR_92 ; return METHOD_7 ( VAR_93 , VAR_94 ) ; }",538
539,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 , ""enteringCDROM_DRIVE_STATUS\\n"" ) ; if ( ! ( VAR_3 -> VAR_4 -> VAR_5 & VAR_6 ) ) return - VAR_7 ; if ( ! METHOD_2 ( VAR_8 ) || ( VAR_9 == VAR_10 || VAR_11 == VAR_12 ) ) return VAR_13 -> VAR_14 -> METHOD_3 ( VAR_15 , VAR_16 ) ;  if ( ( ( TYPE_2 ) VAR_17 >= VAR_18 -> VAR_19 ) )  return - VAR_20 ; return METHOD_4 ( VAR_21 , VAR_22 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { METHOD_1 ( VAR_2 , ""enteringCDROM_DRIVE_STATUS\\n"" ) ; if ( ! ( VAR_3 -> VAR_4 -> VAR_5 & VAR_6 ) ) return - VAR_7 ; if ( ! METHOD_2 ( VAR_8 ) || ( VAR_9 == VAR_10 || VAR_11 == VAR_12 ) ) return VAR_13 -> VAR_14 -> METHOD_3 ( VAR_15 , VAR_16 ) ; if ( ( ( TYPE_2 ) VAR_17 >= VAR_18 -> VAR_19 ) ) return - VAR_20 ; return METHOD_4 ( VAR_21 , VAR_22 ) ; }",539
540,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { const TYPE_3 * const VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 * const VAR_5 = & VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = VAR_10 ;  VAR_11 -> VAR_12 = ( ( TYPE_5 ) VAR_13 -> VAR_14 * 64 * 64 ) /  ( VAR_15 -> VAR_16 * VAR_17 -> VAR_18 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { const TYPE_3 * const VAR_2 = & VAR_3 -> VAR_4 ; TYPE_4 * const VAR_5 = & VAR_6 -> VAR_7 ; VAR_8 -> VAR_9 = VAR_10 ; if ( VAR_6 -> VAR_19 . VAR_20 == VAR_21 && VAR_13 -> VAR_22 != VAR_23 ) VAR_13 -> VAR_14 = ( TYPE_2 ) ( VAR_13 -> VAR_14 * VAR_24 [ VAR_13 -> VAR_22 ] ) ; VAR_11 -> VAR_12 = ( ( TYPE_5 ) VAR_13 -> VAR_14 * 64 * 64 ) / ( VAR_15 -> VAR_16 * VAR_17 -> VAR_18 ) ; }",540
541,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; if ! VAR_5 if ( ( TYPE_6 ) VAR_6 & ( sizeof ( TYPE_7 ) - 1 ) ) { for ( VAR_7 = 0 ; VAR_8 + 7 < VAR_9 ; VAR_10 += 8 ) { VAR_11 [ VAR_12 + 0 ] = VAR_13 [ VAR_14 + 0 ] - VAR_15 [ VAR_16 + 0 ] ; VAR_17 [ VAR_18 + 1 ] = VAR_19 [ VAR_20 + 1 ] - VAR_21 [ VAR_22 + 1 ] ; VAR_23 [ VAR_24 + 2 ] = VAR_25 [ VAR_26 + 2 ] - VAR_27 [ VAR_28 + 2 ] ; VAR_29 [ VAR_30 + 3 ] = VAR_31 [ VAR_32 + 3 ] - VAR_33 [ VAR_34 + 3 ] ; VAR_35 [ VAR_36 + 4 ] = VAR_37 [ VAR_38 + 4 ] - VAR_39 [ VAR_40 + 4 ] ; VAR_41 [ VAR_42 + 5 ] = VAR_43 [ VAR_44 + 5 ] - VAR_45 [ VAR_46 + 5 ] ; VAR_47 [ VAR_48 + 6 ] = VAR_49 [ VAR_50 + 6 ] - VAR_51 [ VAR_52 + 6 ] ; VAR_53 [ VAR_54 + 7 ] = VAR_55 [ VAR_56 + 7 ] - VAR_57 [ VAR_58 + 7 ] ; } } else  for ( VAR_59 = 0 ; VAR_60 <= VAR_61 - sizeof ( TYPE_8 ) ; VAR_62 += sizeof ( TYPE_9 ) ) {  TYPE_10 VAR_63 = * ( TYPE_11 * ) ( VAR_64 + VAR_65 ) ; TYPE_12 VAR_66 = * ( TYPE_13 * ) ( VAR_67 + VAR_68 ) ; * ( TYPE_14 * ) ( VAR_69 + VAR_70 ) = ( ( VAR_71 | VAR_72 ) - ( VAR_73 & VAR_74 ) ) ^ ( ( VAR_75 ^ VAR_76 ^ VAR_77 ) & VAR_78 ) ; } for ( ; VAR_79 < VAR_80 ; VAR_81 ++ ) VAR_82 [ VAR_83 + 0 ] = VAR_84 [ VAR_85 + 0 ] - VAR_86 [ VAR_87 + 0 ] ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; if ! VAR_5 if ( ( TYPE_6 ) VAR_6 & ( sizeof ( TYPE_7 ) - 1 ) ) { for ( VAR_7 = 0 ; VAR_8 + 7 < VAR_9 ; VAR_10 += 8 ) { VAR_11 [ VAR_12 + 0 ] = VAR_13 [ VAR_14 + 0 ] - VAR_15 [ VAR_16 + 0 ] ; VAR_17 [ VAR_18 + 1 ] = VAR_19 [ VAR_20 + 1 ] - VAR_21 [ VAR_22 + 1 ] ; VAR_23 [ VAR_24 + 2 ] = VAR_25 [ VAR_26 + 2 ] - VAR_27 [ VAR_28 + 2 ] ; VAR_29 [ VAR_30 + 3 ] = VAR_31 [ VAR_32 + 3 ] - VAR_33 [ VAR_34 + 3 ] ; VAR_35 [ VAR_36 + 4 ] = VAR_37 [ VAR_38 + 4 ] - VAR_39 [ VAR_40 + 4 ] ; VAR_41 [ VAR_42 + 5 ] = VAR_43 [ VAR_44 + 5 ] - VAR_45 [ VAR_46 + 5 ] ; VAR_47 [ VAR_48 + 6 ] = VAR_49 [ VAR_50 + 6 ] - VAR_51 [ VAR_52 + 6 ] ; VAR_53 [ VAR_54 + 7 ] = VAR_55 [ VAR_56 + 7 ] - VAR_57 [ VAR_58 + 7 ] ; } } else for ( VAR_59 = 0 ; VAR_60 <= VAR_61 - sizeof ( TYPE_8 ) ; VAR_62 += sizeof ( TYPE_9 ) ) { TYPE_10 VAR_63 = * ( TYPE_11 * ) ( VAR_64 + VAR_65 ) ; TYPE_12 VAR_66 = * ( TYPE_13 * ) ( VAR_67 + VAR_68 ) ; * ( TYPE_14 * ) ( VAR_69 + VAR_70 ) = ( ( VAR_71 | VAR_72 ) - ( VAR_73 & VAR_74 ) ) ^ ( ( VAR_75 ^ VAR_76 ^ VAR_77 ) & VAR_78 ) ; } for ( ; VAR_79 < VAR_80 ; VAR_81 ++ ) VAR_82 [ VAR_83 + 0 ] = VAR_84 [ VAR_85 + 0 ] - VAR_86 [ VAR_87 + 0 ] ; }",541
542,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 ) ; if ( VAR_5 ) { METHOD_2 ( ""WrongFITformat:notaflatteneddevicetree(err=%d)\\n"" , VAR_6 ) ; return - VAR_7 ; }  if ( ! METHOD_3 ( VAR_8 , 0 , VAR_9 , VAR_10 ) ) {  METHOD_4 ( ""WrongFITformat:nodescription\\n"" ) ; return - VAR_11 ; } if ( VAR_12 ) { if ( ! METHOD_5 ( VAR_13 , 0 , VAR_14 , VAR_15 ) ) { METHOD_6 ( ""WrongFITformat:notimestamp\\n"" ) ; return - VAR_16 ; } } if ( METHOD_7 ( VAR_17 , VAR_18 ) < 0 ) { METHOD_8 ( ""WrongFITformat:noimagesparentnode\\n"" ) ; return - VAR_19 ; } return 0 ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; VAR_3 = METHOD_1 ( VAR_4 ) ; if ( VAR_5 ) { METHOD_2 ( ""WrongFITformat:notaflatteneddevicetree(err=%d)\\n"" , VAR_6 ) ; return - VAR_7 ; } if ( METHOD_9 ( VAR_20 ) ) { if ( VAR_1 == VAR_21 ) VAR_1 = METHOD_10 ( VAR_17 ) ; VAR_6 = METHOD_11 ( VAR_17 , VAR_1 ) ; if ( VAR_6 ) { METHOD_8 ( ""FITcheckerror%d\\n"" , VAR_6 ) ; return - VAR_22 ; } } if ( ! METHOD_3 ( VAR_8 , 0 , VAR_9 , VAR_10 ) ) { METHOD_4 ( ""WrongFITformat:nodescription\\n"" ) ; return - VAR_11 ; } if ( VAR_12 ) { if ( ! METHOD_5 ( VAR_13 , 0 , VAR_14 , VAR_15 ) ) { METHOD_6 ( ""WrongFITformat:notimestamp\\n"" ) ; return - VAR_16 ; } } if ( METHOD_7 ( VAR_17 , VAR_18 ) < 0 ) { METHOD_8 ( ""WrongFITformat:noimagesparentnode\\n"" ) ; return - VAR_19 ; } return 0 ; }",542
543,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; if ( ! METHOD_1 ( VAR_6 ) ) return 0 ; VAR_7 = ! ( VAR_8 -> VAR_9 & VAR_10 ) ; METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( & VAR_13 -> VAR_14 ) ; if ( ! VAR_15 ) { VAR_16 -> VAR_17 |= VAR_18 ; return 0 ; } METHOD_4 ( & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; if ( VAR_21 ) { VAR_22 . VAR_23 = METHOD_5 ( VAR_24 -> VAR_25 ) ; VAR_26 . VAR_27 = METHOD_6 ( VAR_28 -> VAR_29 ) ; VAR_30 = VAR_31 ; if ( METHOD_7 ( VAR_32 -> VAR_33 . VAR_34 ) ) VAR_35 |= METHOD_8 ( VAR_36 -> VAR_37 ) ; } else { VAR_38 = VAR_39 | METHOD_9 ( VAR_40 -> VAR_41 ) ; } VAR_42 = METHOD_10 ( VAR_43 , VAR_44 , & VAR_45 ) ; if ( VAR_46 < 0 ) { if ( VAR_47 -> VAR_48 ) METHOD_11 ( VAR_49 -> VAR_50 , 0 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; VAR_51 -> VAR_52 -- ;  METHOD_12 ( VAR_53 , VAR_54 , VAR_55 ) ;  return VAR_56 ; } VAR_57 -> VAR_58 |= VAR_59 ; if ( VAR_60 ) { VAR_61 -> VAR_62 = METHOD_13 ( VAR_63 ) ; METHOD_14 ( ! VAR_64 -> VAR_65 ) ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; TYPE_3 VAR_5 ; if ( ! METHOD_1 ( VAR_6 ) ) return 0 ; VAR_7 = ! ( VAR_8 -> VAR_9 & VAR_10 ) ; METHOD_2 ( VAR_11 ) ; VAR_12 = METHOD_3 ( & VAR_13 -> VAR_14 ) ; if ( ! VAR_15 ) { VAR_16 -> VAR_17 |= VAR_18 ; return 0 ; } METHOD_4 ( & VAR_19 , 0 , sizeof ( VAR_20 ) ) ; if ( VAR_21 ) { VAR_22 . VAR_23 = METHOD_5 ( VAR_24 -> VAR_25 ) ; VAR_26 . VAR_27 = METHOD_6 ( VAR_28 -> VAR_29 ) ; VAR_30 = VAR_31 ; if ( METHOD_7 ( VAR_32 -> VAR_33 . VAR_34 ) ) VAR_35 |= METHOD_8 ( VAR_36 -> VAR_37 ) ; } else { VAR_38 = VAR_39 | METHOD_9 ( VAR_40 -> VAR_41 ) ; } VAR_42 = METHOD_10 ( VAR_43 , VAR_44 , & VAR_45 ) ; if ( VAR_46 < 0 ) { if ( VAR_47 -> VAR_48 ) METHOD_11 ( VAR_49 -> VAR_50 , 0 , sizeof ( struct STRUCT_OR_UNION_3 ) ) ; VAR_51 -> VAR_52 -- ; METHOD_12 ( VAR_53 , VAR_54 , VAR_55 ) ; return VAR_56 ; } VAR_57 -> VAR_58 |= VAR_59 ; if ( VAR_60 ) { VAR_61 -> VAR_62 = METHOD_13 ( VAR_63 ) ; METHOD_14 ( ! VAR_64 -> VAR_65 ) ; } return 0 ; }",543
544,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = ( struct STRUCT_OR_UNION_2 * ) VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; TYPE_3 VAR_8 = 0 ; unsigned TYPE_4 VAR_9 ; TYPE_5 VAR_10 = 0 ; METHOD_1 ( & VAR_11 -> VAR_12 , VAR_13 ) ; if ( ! VAR_14 -> VAR_15 ) METHOD_2 ( VAR_16 , 0 ) ; if ( VAR_17 -> VAR_18 ) { VAR_19 = VAR_20 -> VAR_21 -> VAR_22 . VAR_23 -> VAR_24 ; VAR_25 = VAR_26 -> VAR_27 -> VAR_28 . VAR_29 -> VAR_30 ; } if ( VAR_31 -> VAR_32 ) VAR_33 = - VAR_34 ; else if ( ! VAR_35 ) VAR_36 = - VAR_37 ; METHOD_3 ( & VAR_38 -> VAR_39 , VAR_40 ) ;  return VAR_41 ? : METHOD_4 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 ) ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 ) { struct STRUCT_OR_UNION_1 * VAR_3 = ( struct STRUCT_OR_UNION_2 * ) VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 = VAR_7 ; TYPE_3 VAR_8 = 0 ; unsigned TYPE_4 VAR_9 ; TYPE_5 VAR_10 = 0 ; METHOD_1 ( & VAR_11 -> VAR_12 , VAR_13 ) ; if ( ! VAR_14 -> VAR_15 ) METHOD_2 ( VAR_16 , 0 ) ; if ( VAR_17 -> VAR_18 ) { VAR_19 = VAR_20 -> VAR_21 -> VAR_22 . VAR_23 -> VAR_24 ; VAR_25 = VAR_26 -> VAR_27 -> VAR_28 . VAR_29 -> VAR_30 ; } if ( VAR_31 -> VAR_32 ) VAR_33 = - VAR_34 ; else if ( ! VAR_35 ) VAR_36 = - VAR_37 ; METHOD_3 ( & VAR_38 -> VAR_39 , VAR_40 ) ; if ( ! VAR_41 && VAR_4 -> VAR_46 != METHOD_5 ( VAR_42 -> VAR_47 ) >> VAR_48 ) VAR_41 = METHOD_6 ( VAR_7 , VAR_44 ) ; return VAR_41 ? : METHOD_4 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 ) ; }",544
545,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 = 0 ; TYPE_5 VAR_9 ; if ( VAR_10 & VAR_11 )  return - VAR_12 ;  VAR_13 -> VAR_14 = 0 ; METHOD_1 ( ""sk%psize%zu"" , VAR_15 , VAR_16 ) ; METHOD_2 ( VAR_17 ) ; VAR_18 = METHOD_3 ( VAR_19 , VAR_20 & VAR_21 , VAR_22 ) ; VAR_23 = METHOD_4 ( VAR_24 , VAR_25 & VAR_26 ) ; do { struct STRUCT_OR_UNION_6 * VAR_27 ; TYPE_6 VAR_28 ; VAR_29 = METHOD_5 ( & VAR_30 -> VAR_31 ) ; if ( ! VAR_32 ) { if ( VAR_33 >= VAR_34 ) break ; VAR_35 = METHOD_6 ( VAR_36 ) ; if ( VAR_37 ) break ; if ( VAR_38 -> VAR_39 & VAR_40 ) break ; VAR_41 = - VAR_42 ; if ( ! VAR_43 ) break ; VAR_44 = METHOD_7 ( VAR_45 , VAR_46 ) ; if ( METHOD_8 ( VAR_47 ) ) { VAR_48 = METHOD_9 ( VAR_49 ) ; goto VAR_50 ; } continue ; } VAR_51 = min_t ( unsigned TYPE_7 , VAR_52 -> VAR_53 , VAR_54 ) ; if ( METHOD_10 ( VAR_55 , 0 , VAR_56 -> VAR_57 , VAR_58 ) ) { METHOD_11 ( & VAR_59 -> VAR_60 , VAR_61 ) ; if ( ! VAR_62 ) VAR_63 = - VAR_64 ; break ; } VAR_65 += VAR_66 ; VAR_67 -= VAR_68 ; METHOD_12 ( VAR_69 , VAR_70 , VAR_71 ) ; if ( ! ( VAR_72 & VAR_73 ) ) { TYPE_8 VAR_74 = METHOD_13 ( VAR_75 ) ; if ( VAR_76 <= VAR_77 ) { METHOD_14 ( VAR_78 , VAR_79 ) ; } else { struct STRUCT_OR_UNION_7 * VAR_80 ; METHOD_15 ( VAR_81 , VAR_82 ) ; VAR_83 -= VAR_84 ; METHOD_16 ( VAR_85 , VAR_86 ) { if ( VAR_87 <= VAR_88 -> VAR_89 ) { VAR_90 -> VAR_91 -= VAR_92 ; VAR_93 -> VAR_94 -= VAR_95 ; METHOD_17 ( VAR_96 , VAR_97 ) ; break ; } else if ( VAR_98 -> VAR_99 ) { VAR_100 -= VAR_101 -> VAR_102 ; VAR_103 -> VAR_104 -= VAR_105 -> VAR_106 ; VAR_107 -> VAR_108 -= VAR_109 -> VAR_110 ; METHOD_18 ( VAR_111 , VAR_112 -> VAR_113 ) ; } } } if ( VAR_114 -> VAR_115 ) { METHOD_19 ( & VAR_116 -> VAR_117 , VAR_118 ) ; break ; } METHOD_20 ( VAR_119 ) ; } else { METHOD_21 ( & VAR_120 -> VAR_121 , VAR_122 ) ; break ; } } while ( VAR_123 ) ; VAR_124 : METHOD_22 ( VAR_125 ) ; return VAR_126 ? : VAR_127 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; TYPE_3 VAR_6 = 0 ; TYPE_4 VAR_7 , VAR_8 = 0 ; TYPE_5 VAR_9 ; if ( VAR_10 & VAR_11 ) return - VAR_12 ; METHOD_1 ( ""sk%psize%zu"" , VAR_15 , VAR_16 ) ; METHOD_2 ( VAR_17 ) ; VAR_18 = METHOD_3 ( VAR_19 , VAR_20 & VAR_21 , VAR_22 ) ; VAR_23 = METHOD_4 ( VAR_24 , VAR_25 & VAR_26 ) ; do { struct STRUCT_OR_UNION_6 * VAR_27 ; TYPE_6 VAR_28 ; VAR_29 = METHOD_5 ( & VAR_30 -> VAR_31 ) ; if ( ! VAR_32 ) { if ( VAR_33 >= VAR_34 ) break ; VAR_35 = METHOD_6 ( VAR_36 ) ; if ( VAR_37 ) break ; if ( VAR_38 -> VAR_39 & VAR_40 ) break ; VAR_41 = - VAR_42 ; if ( ! VAR_43 ) break ; VAR_44 = METHOD_7 ( VAR_45 , VAR_46 ) ; if ( METHOD_8 ( VAR_47 ) ) { VAR_48 = METHOD_9 ( VAR_49 ) ; goto VAR_50 ; } continue ; } VAR_51 = min_t ( unsigned TYPE_7 , VAR_52 -> VAR_53 , VAR_54 ) ; if ( METHOD_10 ( VAR_55 , 0 , VAR_56 -> VAR_57 , VAR_58 ) ) { METHOD_11 ( & VAR_59 -> VAR_60 , VAR_61 ) ; if ( ! VAR_62 ) VAR_63 = - VAR_64 ; break ; } VAR_65 += VAR_66 ; VAR_67 -= VAR_68 ; METHOD_12 ( VAR_69 , VAR_70 , VAR_71 ) ; if ( ! ( VAR_72 & VAR_73 ) ) { TYPE_8 VAR_74 = METHOD_13 ( VAR_75 ) ; if ( VAR_76 <= VAR_77 ) { METHOD_14 ( VAR_78 , VAR_79 ) ; } else { struct STRUCT_OR_UNION_7 * VAR_80 ; METHOD_15 ( VAR_81 , VAR_82 ) ; VAR_83 -= VAR_84 ; METHOD_16 ( VAR_85 , VAR_86 ) { if ( VAR_87 <= VAR_88 -> VAR_89 ) { VAR_90 -> VAR_91 -= VAR_92 ; VAR_93 -> VAR_94 -= VAR_95 ; METHOD_17 ( VAR_96 , VAR_97 ) ; break ; } else if ( VAR_98 -> VAR_99 ) { VAR_100 -= VAR_101 -> VAR_102 ; VAR_103 -> VAR_104 -= VAR_105 -> VAR_106 ; VAR_107 -> VAR_108 -= VAR_109 -> VAR_110 ; METHOD_18 ( VAR_111 , VAR_112 -> VAR_113 ) ; } } } if ( VAR_114 -> VAR_115 ) { METHOD_19 ( & VAR_116 -> VAR_117 , VAR_118 ) ; break ; } METHOD_20 ( VAR_119 ) ; } else { METHOD_21 ( & VAR_120 -> VAR_121 , VAR_122 ) ; break ; } } while ( VAR_123 ) ; VAR_124 : METHOD_22 ( VAR_125 ) ; return VAR_126 ? : VAR_127 ; }",545
546,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 , * VAR_6 ; unsigned TYPE_2 VAR_7 ; struct STRUCT_OR_UNION_4 * * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 ; TYPE_3 * VAR_11 ; unsigned TYPE_4 VAR_12 ; TYPE_5 VAR_13 ; unsigned TYPE_6 VAR_14 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 ;  if ( VAR_17 -> VAR_18 == 0 ) {  VAR_19 = - VAR_20 ; goto VAR_21 ; } if ( ! VAR_22 -> VAR_23 -> METHOD_1 ) { VAR_24 = - VAR_25 ; goto VAR_26 ; } VAR_27 = METHOD_2 ( & VAR_28 -> VAR_29 ) ; if ( VAR_30 == 0 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( ( VAR_34 - 1 ) > ( VAR_35 >> VAR_36 ) ) { VAR_37 = - VAR_38 ; goto VAR_39 ; } METHOD_3 ( ""RDS:get_mraddr%llxlen%llunr_pages%u\\n"" , VAR_40 -> VAR_41 . VAR_42 , VAR_43 -> VAR_44 . VAR_45 , VAR_46 ) ; VAR_47 = METHOD_4 ( VAR_48 , sizeof ( struct STRUCT_OR_UNION_6 * ) , VAR_49 ) ; if ( ! VAR_50 ) { VAR_51 = - VAR_52 ; goto VAR_53 ; } VAR_54 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_55 ) ; if ( ! VAR_56 ) { VAR_57 = - VAR_58 ; goto VAR_59 ; } METHOD_6 ( & VAR_60 -> VAR_61 , 1 ) ; METHOD_7 ( & VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = VAR_66 -> VAR_67 ; VAR_68 -> VAR_69 = VAR_70 ; if ( VAR_71 -> VAR_72 & VAR_73 ) VAR_74 -> VAR_75 = 1 ; if ( VAR_76 -> VAR_77 & VAR_78 ) VAR_79 -> VAR_80 = 1 ; if ( VAR_81 -> VAR_82 & VAR_83 ) VAR_84 -> VAR_85 = 1 ; VAR_86 = METHOD_8 ( VAR_87 -> VAR_88 . VAR_89 , VAR_90 , VAR_91 , 1 ) ; if ( VAR_92 < 0 ) goto VAR_93 ; VAR_94 = VAR_95 ; VAR_96 = METHOD_9 ( VAR_97 , sizeof ( * VAR_98 ) , VAR_99 ) ; if ( ! VAR_100 ) { VAR_101 = - VAR_102 ; goto VAR_103 ; } METHOD_10 ( ! VAR_104 ) ; METHOD_11 ( VAR_105 , VAR_106 ) ; for ( VAR_107 = 0 ; VAR_108 < VAR_109 ; VAR_110 ++ ) METHOD_12 ( & VAR_111 [ VAR_112 ] , VAR_113 [ VAR_114 ] , VAR_115 , 0 ) ; METHOD_13 ( ""RDS:trans_privatenentsis%u\\n"" , VAR_116 ) ; VAR_117 = VAR_118 -> VAR_119 -> METHOD_14 ( VAR_120 , VAR_121 , VAR_122 , & VAR_123 -> VAR_124 ) ; if ( METHOD_15 ( VAR_125 ) ) { for ( VAR_126 = 0 ; VAR_127 < VAR_128 ; VAR_129 ++ ) METHOD_16 ( METHOD_17 ( & VAR_130 [ VAR_131 ] ) ) ; METHOD_18 ( VAR_132 ) ; VAR_133 = METHOD_19 ( VAR_134 ) ; goto VAR_135 ; } VAR_136 -> VAR_137 = VAR_138 ; METHOD_20 ( ""RDS:get_mrput_userkeyis%xcookie_addr%p\\n"" , VAR_139 -> VAR_140 , ( TYPE_9 * ) ( unsigned TYPE_10 ) VAR_141 -> VAR_142 ) ; VAR_143 = METHOD_21 ( VAR_144 -> VAR_145 , VAR_146 -> VAR_147 . VAR_148 & ~ VAR_149 ) ; if ( VAR_150 ) * VAR_151 = VAR_152 ; if ( VAR_153 -> VAR_154 && METHOD_22 ( VAR_155 , ( TYPE_11 TYPE_12 * ) ( unsigned TYPE_13 ) VAR_156 -> VAR_157 ) ) { VAR_158 = - VAR_159 ; goto VAR_160 ; } METHOD_23 ( & VAR_161 -> VAR_162 , VAR_163 ) ; VAR_164 = METHOD_24 ( & VAR_165 -> VAR_166 , VAR_167 -> VAR_168 , VAR_169 ) ; METHOD_25 ( & VAR_170 -> VAR_171 , VAR_172 ) ; METHOD_26 ( VAR_173 && VAR_174 != VAR_175 ) ; METHOD_27 ( ""RDS:get_mrkeyis%x\\n"" , VAR_176 -> VAR_177 ) ; if ( VAR_178 ) { METHOD_28 ( & VAR_179 -> VAR_180 ) ; * VAR_181 = VAR_182 ; } VAR_183 = 0 ; VAR_184 : METHOD_29 ( VAR_185 ) ; if ( VAR_186 ) METHOD_30 ( VAR_187 ) ; return VAR_188 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 * VAR_2 , struct STRUCT_OR_UNION_2 * * VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = VAR_5 , * VAR_6 ; unsigned TYPE_2 VAR_7 ; struct STRUCT_OR_UNION_4 * * VAR_8 = VAR_9 ; struct STRUCT_OR_UNION_5 * VAR_10 ; TYPE_3 * VAR_11 ; unsigned TYPE_4 VAR_12 ; TYPE_5 VAR_13 ; unsigned TYPE_6 VAR_14 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 ; if ( VAR_17 -> VAR_18 == 0 || ! VAR_170 -> VAR_119 ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } if ( ! VAR_22 -> VAR_23 -> METHOD_1 ) { VAR_24 = - VAR_25 ; goto VAR_26 ; } VAR_27 = METHOD_2 ( & VAR_28 -> VAR_29 ) ; if ( VAR_30 == 0 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( ( VAR_34 - 1 ) > ( VAR_35 >> VAR_36 ) ) { VAR_37 = - VAR_38 ; goto VAR_39 ; } METHOD_3 ( ""RDS:get_mraddr%llxlen%llunr_pages%u\\n"" , VAR_40 -> VAR_41 . VAR_42 , VAR_43 -> VAR_44 . VAR_45 , VAR_46 ) ; VAR_47 = METHOD_4 ( VAR_48 , sizeof ( struct STRUCT_OR_UNION_6 * ) , VAR_49 ) ; if ( ! VAR_50 ) { VAR_51 = - VAR_52 ; goto VAR_53 ; } VAR_54 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_55 ) ; if ( ! VAR_56 ) { VAR_57 = - VAR_58 ; goto VAR_59 ; } METHOD_6 ( & VAR_60 -> VAR_61 , 1 ) ; METHOD_7 ( & VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = VAR_66 -> VAR_67 ; VAR_68 -> VAR_69 = VAR_70 ; if ( VAR_71 -> VAR_72 & VAR_73 ) VAR_74 -> VAR_75 = 1 ; if ( VAR_76 -> VAR_77 & VAR_78 ) VAR_79 -> VAR_80 = 1 ; if ( VAR_81 -> VAR_82 & VAR_83 ) VAR_84 -> VAR_85 = 1 ; VAR_86 = METHOD_8 ( VAR_87 -> VAR_88 . VAR_89 , VAR_90 , VAR_91 , 1 ) ; if ( VAR_92 < 0 ) goto VAR_93 ; VAR_94 = VAR_95 ; VAR_96 = METHOD_9 ( VAR_97 , sizeof ( * VAR_98 ) , VAR_99 ) ; if ( ! VAR_100 ) { VAR_101 = - VAR_102 ; goto VAR_103 ; } METHOD_10 ( ! VAR_104 ) ; METHOD_11 ( VAR_105 , VAR_106 ) ; for ( VAR_107 = 0 ; VAR_108 < VAR_109 ; VAR_110 ++ ) METHOD_12 ( & VAR_111 [ VAR_112 ] , VAR_113 [ VAR_114 ] , VAR_115 , 0 ) ; METHOD_13 ( ""RDS:trans_privatenentsis%u\\n"" , VAR_116 ) ; VAR_117 = VAR_118 -> VAR_119 -> METHOD_14 ( VAR_120 , VAR_121 , VAR_122 , & VAR_123 -> VAR_124 ) ; if ( METHOD_15 ( VAR_125 ) ) { for ( VAR_126 = 0 ; VAR_127 < VAR_128 ; VAR_129 ++ ) METHOD_16 ( METHOD_17 ( & VAR_130 [ VAR_131 ] ) ) ; METHOD_18 ( VAR_132 ) ; VAR_133 = METHOD_19 ( VAR_134 ) ; goto VAR_135 ; } VAR_136 -> VAR_137 = VAR_138 ; METHOD_20 ( ""RDS:get_mrput_userkeyis%xcookie_addr%p\\n"" , VAR_139 -> VAR_140 , ( TYPE_9 * ) ( unsigned TYPE_10 ) VAR_141 -> VAR_142 ) ; VAR_143 = METHOD_21 ( VAR_144 -> VAR_145 , VAR_146 -> VAR_147 . VAR_148 & ~ VAR_149 ) ; if ( VAR_150 ) * VAR_151 = VAR_152 ; if ( VAR_153 -> VAR_154 && METHOD_22 ( VAR_155 , ( TYPE_11 TYPE_12 * ) ( unsigned TYPE_13 ) VAR_156 -> VAR_157 ) ) { VAR_158 = - VAR_159 ; goto VAR_160 ; } METHOD_23 ( & VAR_161 -> VAR_162 , VAR_163 ) ; VAR_164 = METHOD_24 ( & VAR_165 -> VAR_166 , VAR_167 -> VAR_168 , VAR_169 ) ; METHOD_25 ( & VAR_170 -> VAR_171 , VAR_172 ) ; METHOD_26 ( VAR_173 && VAR_174 != VAR_175 ) ; METHOD_27 ( ""RDS:get_mrkeyis%x\\n"" , VAR_176 -> VAR_177 ) ; if ( VAR_178 ) { METHOD_28 ( & VAR_179 -> VAR_180 ) ; * VAR_181 = VAR_182 ; } VAR_183 = 0 ; VAR_184 : METHOD_29 ( VAR_185 ) ; if ( VAR_186 ) METHOD_30 ( VAR_187 ) ; return VAR_188 ; }",546
547,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_2 VAR_7 ; TYPE_3 VAR_8 = - VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 & VAR_13 ) { METHOD_1 ( VAR_14 , ""BadreturnfromREPLY_ADD_STA(0x%08X)\\n"" , VAR_15 -> VAR_16 . VAR_17 ) ; return VAR_18 ; } METHOD_2 ( VAR_19 , ""Processingresponseforaddingstation%u\\n"" , VAR_20 ) ; METHOD_3 ( & VAR_21 -> VAR_22 -> VAR_23 , VAR_24 ) ; switch ( VAR_25 -> VAR_26 . VAR_27 . VAR_28 ) { case VAR_29 : METHOD_4 ( VAR_30 , ""REPLY_ADD_STAPASSED\\n"" ) ;  METHOD_5 ( VAR_31 , VAR_32 ) ;  VAR_33 = 0 ; break ; case VAR_34 : METHOD_6 ( VAR_35 , ""Addingstation%dfailed,noroomintable.\\n"" , VAR_36 ) ; break ; case VAR_37 : METHOD_7 ( VAR_38 , ""Addingstation%dfailed,noblockack"" ""resource.\\n"" , VAR_39 ) ; break ; case VAR_40 : METHOD_8 ( VAR_41 , ""Attemptingtomodifynon-existingstation%d\\n"" , VAR_42 ) ; break ; default : METHOD_9 ( VAR_43 , ""ReceivedREPLY_ADD_STA:(0x%08X)\\n"" , VAR_44 -> VAR_45 . VAR_46 . VAR_47 ) ; break ; } METHOD_10 ( VAR_48 , ""%sstationid%uaddr%pM\\n"" , VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 . VAR_53 == VAR_54 ? ""Modified"" : ""Added"" , VAR_55 , VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 . VAR_61 ) ; METHOD_11 ( VAR_62 , ""%sstationaccordingtocmdbuffer%pM\\n"" , VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 . VAR_67 == VAR_68 ? ""Modified"" : ""Added"" , VAR_69 -> VAR_70 . VAR_71 ) ; METHOD_12 ( & VAR_72 -> VAR_73 -> VAR_74 , VAR_75 ) ; return VAR_76 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { TYPE_1 VAR_3 = VAR_4 -> VAR_5 . VAR_6 ; unsigned TYPE_2 VAR_7 ; TYPE_3 VAR_8 = - VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 & VAR_13 ) { METHOD_1 ( VAR_14 , ""BadreturnfromREPLY_ADD_STA(0x%08X)\\n"" , VAR_15 -> VAR_16 . VAR_17 ) ; return VAR_18 ; } METHOD_2 ( VAR_19 , ""Processingresponseforaddingstation%u\\n"" , VAR_20 ) ; METHOD_3 ( & VAR_21 -> VAR_22 -> VAR_23 , VAR_24 ) ; switch ( VAR_25 -> VAR_26 . VAR_27 . VAR_28 ) { case VAR_29 : METHOD_4 ( VAR_30 , ""REPLY_ADD_STAPASSED\\n"" ) ; VAR_76 = METHOD_5 ( VAR_72 , VAR_65 ) ; break ; case VAR_34 : METHOD_6 ( VAR_35 , ""Addingstation%dfailed,noroomintable.\\n"" , VAR_36 ) ; break ; case VAR_37 : METHOD_7 ( VAR_38 , ""Addingstation%dfailed,noblockack"" ""resource.\\n"" , VAR_39 ) ; break ; case VAR_40 : METHOD_8 ( VAR_41 , ""Attemptingtomodifynon-existingstation%d\\n"" , VAR_42 ) ; break ; default : METHOD_9 ( VAR_43 , ""ReceivedREPLY_ADD_STA:(0x%08X)\\n"" , VAR_44 -> VAR_45 . VAR_46 . VAR_47 ) ; break ; } METHOD_10 ( VAR_48 , ""%sstationid%uaddr%pM\\n"" , VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 . VAR_53 == VAR_54 ? ""Modified"" : ""Added"" , VAR_55 , VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 . VAR_61 ) ; METHOD_11 ( VAR_62 , ""%sstationaccordingtocmdbuffer%pM\\n"" , VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 . VAR_67 == VAR_68 ? ""Modified"" : ""Added"" , VAR_69 -> VAR_70 . VAR_71 ) ; METHOD_12 ( & VAR_72 -> VAR_73 -> VAR_74 , VAR_75 ) ; return VAR_76 ; }",547
548,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""iptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ;  if ( ( VAR_38 -> VAR_39 == sizeof ( struct STRUCT_OR_UNION_4 ) &&  ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) &&  VAR_46 -> VAR_47 < 0 &&  METHOD_4 ( & VAR_48 -> VAR_49 ) ) || VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; TYPE_8 TYPE_9 if ( VAR_67 -> VAR_68 & ( 1 << VAR_69 ) ) { METHOD_7 ( ""Backunset"" ""onhook%u"" ""rule%u\\n"" , VAR_70 , VAR_71 ) ; } VAR_72 = VAR_73 ; VAR_74 = VAR_75 -> VAR_76 . VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = 0 ; if ( VAR_81 == VAR_82 ) goto VAR_83 ; VAR_84 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_85 + VAR_86 ) ; } while ( VAR_87 == VAR_88 + VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 -> VAR_93 ; VAR_94 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_95 + VAR_96 + VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 += VAR_103 ; } else { TYPE_10 VAR_104 = VAR_105 -> VAR_106 ; if ( METHOD_8 ( VAR_107 -> VAR_108 . VAR_109 . VAR_110 . VAR_111 , VAR_112 ) == 0 && VAR_113 >= 0 ) { if ( VAR_114 > VAR_115 -> VAR_116 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_9 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_117 ) ; return 0 ; } METHOD_10 ( ""Jumprule%u->%u\\n"" , VAR_118 , VAR_119 ) ; } else { VAR_120 = VAR_121 + VAR_122 -> VAR_123 ; } VAR_124 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_125 + VAR_126 ) ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } } VAR_133 : METHOD_11 ( ""Finishedchain%u\\n"" , VAR_134 ) ; } return 1 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""iptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ; if ( ( METHOD_4 ( VAR_127 ) && ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) && VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) || VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; TYPE_8 TYPE_9 if ( VAR_67 -> VAR_68 & ( 1 << VAR_69 ) ) { METHOD_7 ( ""Backunset"" ""onhook%u"" ""rule%u\\n"" , VAR_70 , VAR_71 ) ; } VAR_72 = VAR_73 ; VAR_74 = VAR_75 -> VAR_76 . VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = 0 ; if ( VAR_81 == VAR_82 ) goto VAR_83 ; VAR_84 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_85 + VAR_86 ) ; } while ( VAR_87 == VAR_88 + VAR_89 -> VAR_90 ) ; VAR_91 = VAR_92 -> VAR_93 ; VAR_94 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_95 + VAR_96 + VAR_97 ) ; VAR_98 -> VAR_99 . VAR_100 = VAR_101 ; VAR_102 += VAR_103 ; } else { TYPE_10 VAR_104 = VAR_105 -> VAR_106 ; if ( METHOD_8 ( VAR_107 -> VAR_108 . VAR_109 . VAR_110 . VAR_111 , VAR_112 ) == 0 && VAR_113 >= 0 ) { if ( VAR_114 > VAR_115 -> VAR_116 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_9 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_117 ) ; return 0 ; } METHOD_10 ( ""Jumprule%u->%u\\n"" , VAR_118 , VAR_119 ) ; } else { VAR_120 = VAR_121 + VAR_122 -> VAR_123 ; } VAR_124 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_125 + VAR_126 ) ; VAR_127 -> VAR_128 . VAR_129 = VAR_130 ; VAR_131 = VAR_132 ; } } VAR_133 : METHOD_11 ( ""Finishedchain%u\\n"" , VAR_134 ) ; } return 1 ; }",548
549,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 [ 0 ] ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 [ 1 ] ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; TYPE_1 VAR_10 , VAR_11 , VAR_12 = 0 , VAR_13 , VAR_14 ; enum VAR_15 VAR_16 ; TYPE_2 VAR_17 ; if ( ! METHOD_1 ( VAR_18 -> VAR_19 [ VAR_20 ] ) ) return - VAR_21 ; STRUCT_OR_UNION_8 = & VAR_22 -> STRUCT_OR_UNION_9 ; if ( ! VAR_23 -> VAR_24 -> METHOD_2 ) return - VAR_25 ; if ( VAR_26 -> VAR_27 ) return - VAR_28 ; if ( VAR_29 -> VAR_30 [ VAR_31 ] ) { VAR_32 = METHOD_3 ( VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( ! VAR_36 ) return - VAR_37 ; } else { VAR_38 = 0 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) if ( STRUCT_OR_UNION_10 -> VAR_43 [ VAR_44 ] ) VAR_45 += STRUCT_OR_UNION_11 -> VAR_46 [ VAR_47 ] -> VAR_48 ; } if ( VAR_49 -> VAR_50 [ VAR_51 ] ) METHOD_4 ( VAR_52 , VAR_53 -> VAR_54 [ VAR_55 ] , VAR_56 ) VAR_57 ++ ; if ( VAR_58 > STRUCT_OR_UNION_12 -> VAR_59 ) return - VAR_60 ; if ( VAR_61 -> VAR_62 [ VAR_63 ] ) VAR_64 = METHOD_5 ( VAR_65 -> VAR_66 [ VAR_67 ] ) ; else VAR_68 = 0 ; if ( VAR_69 > STRUCT_OR_UNION_13 -> VAR_70 ) return - VAR_71 ; VAR_72 = METHOD_6 ( sizeof ( * VAR_73 ) + sizeof ( * VAR_74 -> VAR_75 ) * VAR_76 + sizeof ( * VAR_77 -> VAR_78 ) * VAR_79 + VAR_80 , VAR_81 ) ; if ( ! VAR_82 ) return - VAR_83 ; if ( VAR_84 ) VAR_85 -> VAR_86 = ( TYPE_3 * ) & VAR_87 -> VAR_88 [ VAR_89 ] ; VAR_90 -> VAR_91 = VAR_92 ; if ( VAR_93 ) { if ( VAR_94 -> VAR_95 ) VAR_96 -> VAR_97 = ( TYPE_4 * ) ( VAR_98 -> VAR_99 + VAR_100 ) ; else VAR_101 -> VAR_102 = ( TYPE_5 * ) ( VAR_103 -> VAR_104 + VAR_105 ) ; } VAR_106 = 0 ; if ( VAR_107 -> VAR_108 [ VAR_109 ] ) { METHOD_7 ( VAR_110 , VAR_111 -> VAR_112 [ VAR_113 ] , VAR_114 ) { struct STRUCT_OR_UNION_14 * VAR_115 ; VAR_116 = METHOD_8 ( STRUCT_OR_UNION_15 , METHOD_9 ( VAR_117 ) ) ; if ( ! VAR_118 ) { VAR_119 = - VAR_120 ; goto VAR_121 ; } if ( VAR_122 -> VAR_123 & VAR_124 ) continue ; VAR_125 -> VAR_126 [ VAR_127 ] = VAR_128 ; VAR_129 ++ ; } } else { for ( VAR_130 = 0 ; VAR_131 < VAR_132 ; VAR_133 ++ ) { TYPE_6 VAR_134 ; if ( ! STRUCT_OR_UNION_16 -> VAR_135 [ VAR_136 ] ) continue ; for ( VAR_137 = 0 ; VAR_138 < STRUCT_OR_UNION_17 -> VAR_139 [ VAR_140 ] -> VAR_141 ; VAR_142 ++ ) { struct STRUCT_OR_UNION_18 * VAR_143 ; VAR_144 = & STRUCT_OR_UNION_19 -> VAR_145 [ VAR_146 ] -> VAR_147 [ VAR_148 ] ; if ( VAR_149 -> VAR_150 & VAR_151 ) continue ; VAR_152 -> VAR_153 [ VAR_154 ] = VAR_155 ; VAR_156 ++ ; } } } if ( ! VAR_157 ) { VAR_158 = - VAR_159 ; goto VAR_160 ; } VAR_161 -> VAR_162 = VAR_163 ; VAR_164 = 0 ; if ( VAR_165 -> VAR_166 [ VAR_167 ] ) {  METHOD_10 ( VAR_168 , VAR_169 -> VAR_170 [ VAR_171 ] , VAR_172 ) {  if ( VAR_173 -> VAR_174 [ VAR_175 ] . VAR_176 > VAR_177 ) { VAR_178 = - VAR_179 ; goto VAR_180 ; } METHOD_11 ( VAR_181 -> VAR_182 [ VAR_183 ] . VAR_184 , METHOD_12 ( VAR_185 ) , METHOD_13 ( VAR_186 ) ) ;  VAR_187 -> VAR_188 [ VAR_189 ] . VAR_190 = METHOD_14 ( VAR_191 ) ;  VAR_192 ++ ; } } if ( VAR_193 -> VAR_194 [ VAR_195 ] ) { VAR_196 -> VAR_197 = METHOD_15 ( VAR_198 -> VAR_199 [ VAR_200 ] ) ; METHOD_16 ( ( TYPE_7 * ) VAR_201 -> VAR_202 , METHOD_17 ( VAR_203 -> VAR_204 [ VAR_205 ] ) , VAR_206 -> VAR_207 ) ; } VAR_208 -> VAR_209 = VAR_210 ; VAR_211 -> STRUCT_OR_UNION_20 = & VAR_212 -> STRUCT_OR_UNION_21 ; VAR_213 -> VAR_214 = VAR_215 ; VAR_216 = VAR_217 -> VAR_218 -> METHOD_18 ( & VAR_219 -> STRUCT_OR_UNION_22 , VAR_220 , VAR_221 ) ; if ( ! VAR_222 ) { METHOD_19 ( VAR_223 , VAR_224 ) ; METHOD_20 ( VAR_225 ) ; } else { VAR_226 : VAR_227 -> VAR_228 = VAR_229 ; METHOD_21 ( VAR_230 ) ; } return VAR_231 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 [ 0 ] ; struct STRUCT_OR_UNION_3 * VAR_5 = VAR_6 -> VAR_7 [ 1 ] ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; struct STRUCT_OR_UNION_6 * STRUCT_OR_UNION_7 ; TYPE_1 VAR_10 , VAR_11 , VAR_12 = 0 , VAR_13 , VAR_14 ; enum VAR_15 VAR_16 ; TYPE_2 VAR_17 ; if ( ! METHOD_1 ( VAR_18 -> VAR_19 [ VAR_20 ] ) ) return - VAR_21 ; STRUCT_OR_UNION_8 = & VAR_22 -> STRUCT_OR_UNION_9 ; if ( ! VAR_23 -> VAR_24 -> METHOD_2 ) return - VAR_25 ; if ( VAR_26 -> VAR_27 ) return - VAR_28 ; if ( VAR_29 -> VAR_30 [ VAR_31 ] ) { VAR_32 = METHOD_3 ( VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( ! VAR_36 ) return - VAR_37 ; } else { VAR_38 = 0 ; for ( VAR_39 = 0 ; VAR_40 < VAR_41 ; VAR_42 ++ ) if ( STRUCT_OR_UNION_10 -> VAR_43 [ VAR_44 ] ) VAR_45 += STRUCT_OR_UNION_11 -> VAR_46 [ VAR_47 ] -> VAR_48 ; } if ( VAR_49 -> VAR_50 [ VAR_51 ] ) METHOD_4 ( VAR_52 , VAR_53 -> VAR_54 [ VAR_55 ] , VAR_56 ) VAR_57 ++ ; if ( VAR_58 > STRUCT_OR_UNION_12 -> VAR_59 ) return - VAR_60 ; if ( VAR_61 -> VAR_62 [ VAR_63 ] ) VAR_64 = METHOD_5 ( VAR_65 -> VAR_66 [ VAR_67 ] ) ; else VAR_68 = 0 ; if ( VAR_69 > STRUCT_OR_UNION_13 -> VAR_70 ) return - VAR_71 ; VAR_72 = METHOD_6 ( sizeof ( * VAR_73 ) + sizeof ( * VAR_74 -> VAR_75 ) * VAR_76 + sizeof ( * VAR_77 -> VAR_78 ) * VAR_79 + VAR_80 , VAR_81 ) ; if ( ! VAR_82 ) return - VAR_83 ; if ( VAR_84 ) VAR_85 -> VAR_86 = ( TYPE_3 * ) & VAR_87 -> VAR_88 [ VAR_89 ] ; VAR_90 -> VAR_91 = VAR_92 ; if ( VAR_93 ) { if ( VAR_94 -> VAR_95 ) VAR_96 -> VAR_97 = ( TYPE_4 * ) ( VAR_98 -> VAR_99 + VAR_100 ) ; else VAR_101 -> VAR_102 = ( TYPE_5 * ) ( VAR_103 -> VAR_104 + VAR_105 ) ; } VAR_106 = 0 ; if ( VAR_107 -> VAR_108 [ VAR_109 ] ) { METHOD_7 ( VAR_110 , VAR_111 -> VAR_112 [ VAR_113 ] , VAR_114 ) { struct STRUCT_OR_UNION_14 * VAR_115 ; VAR_116 = METHOD_8 ( STRUCT_OR_UNION_15 , METHOD_9 ( VAR_117 ) ) ; VAR_192 ++ ; } } if ( VAR_193 -> VAR_194 [ VAR_195 ] ) { VAR_196 -> VAR_197 = METHOD_15 ( VAR_198 -> VAR_199 [ VAR_200 ] ) ; METHOD_16 ( ( TYPE_7 * ) VAR_201 -> VAR_202 , METHOD_17 ( VAR_203 -> VAR_204 [ VAR_205 ] ) , VAR_206 -> VAR_207 ) ; } VAR_208 -> VAR_209 = VAR_210 ; VAR_211 -> STRUCT_OR_UNION_20 = & VAR_212 -> STRUCT_OR_UNION_21 ; VAR_213 -> VAR_214 = VAR_215 ; VAR_216 = VAR_217 -> VAR_218 -> METHOD_18 ( & VAR_219 -> STRUCT_OR_UNION_22 , VAR_220 , VAR_221 ) ; if ( ! VAR_222 ) { METHOD_19 ( VAR_223 , VAR_224 ) ; METHOD_20 ( VAR_225 ) ; } else { VAR_226 : VAR_227 -> VAR_228 = VAR_229 ; METHOD_21 ( VAR_230 ) ; } return VAR_231 ; }",549
550,"static TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  VAR_2 -> VAR_3 = VAR_4 ; VAR_5 -> VAR_6 = VAR_7 -> VAR_8 ; VAR_9 -> VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ;  } ","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_13 ) { if ( VAR_15 && VAR_1 ) { VAR_2 -> VAR_3 = VAR_4 ; VAR_5 -> VAR_6 = VAR_7 -> VAR_8 ; VAR_9 -> VAR_10 -> VAR_11 = VAR_12 ; VAR_13 -> VAR_14 = VAR_15 ; } }",550
551,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 = VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; TYPE_5 VAR_9 , VAR_10 ;  TYPE_6 VAR_11 = 0 ;  VAR_12 : if ( ! VAR_13 -> VAR_14 ) return VAR_15 ; if ( ! VAR_16 -> VAR_17 ) { TYPE_7 VAR_18 ; struct STRUCT_OR_UNION_1 * VAR_19 ; if ( VAR_20 -> VAR_21 && VAR_22 -> VAR_23 -> VAR_24 ) { VAR_25 -> VAR_26 = 0 ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 -> VAR_30 ; VAR_31 ++ ) { if ( VAR_32 -> VAR_33 [ VAR_34 ] -> VAR_35 < VAR_36 ) { VAR_37 -> VAR_38 = 1 ; break ; } } } if ( ! VAR_39 -> VAR_40 ) { METHOD_1 ( VAR_41 -> VAR_42 , VAR_43 , ""Nolongerreceivingplaylist%d\\n"" , VAR_44 -> VAR_45 ) ; return VAR_46 ; } VAR_47 = METHOD_2 ( VAR_48 ) ; VAR_49 :  if ( ! VAR_50 -> VAR_51 &&  METHOD_3 ( ) - VAR_52 -> VAR_53 >= VAR_54 ) { if ( ( VAR_55 = METHOD_4 ( VAR_56 , VAR_57 -> VAR_58 , VAR_59 , VAR_60 ) ) < 0 ) { METHOD_5 ( VAR_61 -> VAR_62 , VAR_63 , ""Failedtoreloadplaylist%d\\n"" , VAR_64 -> VAR_65 ) ; return VAR_66 ; } VAR_67 = VAR_68 -> VAR_69 / 2 ; } if ( VAR_70 -> VAR_71 < VAR_72 -> VAR_73 ) { METHOD_6 ( VAR_74 , VAR_75 , ""skipping%dsegmentsahead,expiredfromplaylists\\n"" , VAR_76 -> VAR_77 - VAR_78 -> VAR_79 ) ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 ; } if ( VAR_84 -> VAR_85 >= VAR_86 -> VAR_87 + VAR_88 -> VAR_89 ) { if ( VAR_90 -> VAR_91 ) return VAR_92 ; while ( METHOD_7 ( ) - VAR_93 -> VAR_94 < VAR_95 ) { if ( METHOD_8 ( VAR_96 -> VAR_97 ) ) return VAR_98 ; METHOD_9 ( 100 * 1000 ) ; } goto VAR_99 ; } VAR_100 = METHOD_10 ( VAR_101 ) ; VAR_102 = METHOD_11 ( VAR_103 , VAR_104 ) ; if ( VAR_105 ) return VAR_106 ; VAR_107 = METHOD_12 ( VAR_108 , VAR_109 , VAR_110 ) ; if ( VAR_111 < 0 ) { if ( METHOD_13 ( VAR_112 -> VAR_113 ) ) return VAR_114 ; METHOD_14 ( VAR_115 -> VAR_116 , VAR_117 , ""Failedtoopensegmentofplaylist%d\\n"" , VAR_118 -> VAR_119 ) ; VAR_120 -> VAR_121 += 1 ; goto VAR_122 ; } VAR_123 = 1 ; } if ( VAR_124 -> VAR_125 < VAR_126 -> VAR_127 ) { TYPE_8 VAR_128 = METHOD_15 ( VAR_129 -> VAR_130 - VAR_131 -> VAR_132 , VAR_133 ) ; METHOD_16 ( VAR_134 , VAR_135 -> VAR_136 , VAR_137 ) ; VAR_138 -> VAR_139 += VAR_140 ; return VAR_141 ; } VAR_142 = METHOD_17 ( VAR_143 , METHOD_18 ( VAR_144 ) , VAR_145 , VAR_146 , VAR_147 ) ; if ( VAR_148 > 0 ) { if ( VAR_149 && VAR_150 -> VAR_151 != 0 ) { METHOD_19 ( VAR_152 , VAR_153 , VAR_154 , & VAR_155 ) ; } return VAR_156 ; } METHOD_20 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 ++ ; VAR_163 -> VAR_164 = VAR_165 -> VAR_166 ; goto VAR_167 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { struct STRUCT_OR_UNION_0 * VAR_3 = VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; TYPE_5 VAR_9 , VAR_10 ; TYPE_6 VAR_11 = 0 ; VAR_12 : if ( ! VAR_13 -> VAR_14 ) return VAR_15 ; if ( ! VAR_16 -> VAR_17 ) { TYPE_7 VAR_18 ; struct STRUCT_OR_UNION_1 * VAR_19 ; if ( VAR_20 -> VAR_21 && VAR_22 -> VAR_23 -> VAR_24 ) { VAR_25 -> VAR_26 = 0 ; for ( VAR_27 = 0 ; VAR_28 < VAR_29 -> VAR_30 ; VAR_31 ++ ) { if ( VAR_32 -> VAR_33 [ VAR_34 ] -> VAR_35 < VAR_36 ) { VAR_37 -> VAR_38 = 1 ; break ; } } } if ( ! VAR_39 -> VAR_40 ) { METHOD_1 ( VAR_41 -> VAR_42 , VAR_43 , ""Nolongerreceivingplaylist%d\\n"" , VAR_44 -> VAR_45 ) ; return VAR_46 ; } VAR_47 = METHOD_2 ( VAR_48 ) ; VAR_49 : if ( ! VAR_50 -> VAR_51 && METHOD_3 ( ) - VAR_52 -> VAR_53 >= VAR_54 ) { if ( ( VAR_55 = METHOD_4 ( VAR_56 , VAR_57 -> VAR_58 , VAR_59 , VAR_60 ) ) < 0 ) { METHOD_5 ( VAR_61 -> VAR_62 , VAR_63 , ""Failedtoreloadplaylist%d\\n"" , VAR_64 -> VAR_65 ) ; return VAR_66 ; } VAR_67 = VAR_68 -> VAR_69 / 2 ; } if ( VAR_70 -> VAR_71 < VAR_72 -> VAR_73 ) { METHOD_6 ( VAR_74 , VAR_75 , ""skipping%dsegmentsahead,expiredfromplaylists\\n"" , VAR_76 -> VAR_77 - VAR_78 -> VAR_79 ) ; VAR_80 -> VAR_81 = VAR_82 -> VAR_83 ; } if ( VAR_84 -> VAR_85 >= VAR_86 -> VAR_87 + VAR_88 -> VAR_89 ) { if ( VAR_90 -> VAR_91 ) return VAR_92 ; while ( METHOD_7 ( ) - VAR_93 -> VAR_94 < VAR_95 ) { if ( METHOD_8 ( VAR_96 -> VAR_97 ) ) return VAR_98 ; METHOD_9 ( 100 * 1000 ) ; } goto VAR_99 ; } VAR_100 = METHOD_10 ( VAR_101 ) ; VAR_102 = METHOD_11 ( VAR_103 , VAR_104 ) ; if ( VAR_105 ) return VAR_106 ; VAR_107 = METHOD_12 ( VAR_108 , VAR_109 , VAR_110 ) ; if ( VAR_111 < 0 ) { if ( METHOD_13 ( VAR_112 -> VAR_113 ) ) return VAR_114 ; METHOD_14 ( VAR_115 -> VAR_116 , VAR_117 , ""Failedtoopensegmentofplaylist%d\\n"" , VAR_118 -> VAR_119 ) ; VAR_120 -> VAR_121 += 1 ; goto VAR_122 ; } VAR_123 = 1 ; } if ( VAR_124 -> VAR_125 < VAR_126 -> VAR_127 ) { TYPE_8 VAR_128 = METHOD_15 ( VAR_129 -> VAR_130 - VAR_131 -> VAR_132 , VAR_133 ) ; METHOD_16 ( VAR_134 , VAR_135 -> VAR_136 , VAR_137 ) ; VAR_138 -> VAR_139 += VAR_140 ; return VAR_141 ; } VAR_142 = METHOD_17 ( VAR_143 , METHOD_18 ( VAR_144 ) , VAR_145 , VAR_146 , VAR_147 ) ; if ( VAR_148 > 0 ) { if ( VAR_149 && VAR_150 -> VAR_151 != 0 ) { METHOD_19 ( VAR_152 , VAR_153 , VAR_154 , & VAR_155 ) ; } return VAR_156 ; } METHOD_20 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_160 ) ; VAR_161 -> VAR_162 ++ ; VAR_163 -> VAR_164 = VAR_165 -> VAR_166 ; goto VAR_167 ; }",551
552,"struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const TYPE_0 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; TYPE_2 VAR_9 ; VAR_10 = METHOD_1 ( sizeof ( * VAR_11 ) + VAR_12 -> VAR_13 . VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) return VAR_17 ; METHOD_2 ( ) ; VAR_18 = METHOD_3 ( VAR_19 -> VAR_20 ) ; if ( VAR_21 ) { VAR_22 -> VAR_23 = METHOD_4 ( VAR_24 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_25 ) ; if ( ! VAR_26 -> VAR_27 ) { METHOD_5 ( ) ; goto VAR_28 ; } if ( VAR_29 -> VAR_30 ) { for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { VAR_35 -> VAR_36 [ VAR_37 ] . VAR_38 = VAR_39 -> VAR_40 + 1 ; VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = METHOD_6 ( VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 , sizeof ( VAR_49 ) , VAR_50 ) ; if ( ! VAR_51 -> VAR_52 [ VAR_53 ] . VAR_54 ) { METHOD_7 ( ) ; goto VAR_55 ; } } } } METHOD_8 ( ) ;  METHOD_9 ( & VAR_56 -> VAR_57 ) ;  METHOD_10 ( & VAR_58 -> VAR_59 , VAR_60 ) ; METHOD_11 ( & VAR_61 -> VAR_62 . VAR_63 , VAR_64 ) ; METHOD_12 ( & VAR_65 -> VAR_66 . VAR_67 ) ; TYPE_3 TYPE_4 if ( VAR_68 ( & VAR_69 -> VAR_70 ) && ! VAR_71 -> VAR_72 . VAR_73 . VAR_74 ) METHOD_13 ( & VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = VAR_79 ; METHOD_14 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 , VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_15 ( & VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 . VAR_101 ; METHOD_16 ( & VAR_102 -> VAR_103 , 1024 , 8 ) ; for ( VAR_104 = 0 ; VAR_105 < METHOD_17 ( VAR_106 -> VAR_107 ) ; VAR_108 ++ ) METHOD_18 ( & VAR_109 -> VAR_110 [ VAR_111 ] , 1024 , 8 ) ; if ( METHOD_19 ( VAR_112 , VAR_113 , VAR_114 ) ) goto VAR_115 ; for ( VAR_116 = 0 ; VAR_117 < VAR_118 ; VAR_119 ++ ) { VAR_120 -> VAR_121 [ VAR_122 ] = VAR_123 ; } for ( VAR_124 = 0 ; VAR_125 < VAR_126 ; VAR_127 ++ ) { METHOD_20 ( & VAR_128 -> VAR_129 [ VAR_130 ] ) ; METHOD_21 ( & VAR_131 -> VAR_132 [ VAR_133 ] ) ; } for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) VAR_138 -> VAR_139 [ VAR_140 ] = METHOD_22 ( VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 = VAR_145 ; if ( VAR_146 -> VAR_147 . VAR_148 == VAR_149 || VAR_150 -> VAR_151 . VAR_152 == VAR_153 ) { struct STRUCT_OR_UNION_7 * VAR_154 = VAR_155 -> VAR_156 . VAR_157 -> VAR_158 [ METHOD_23 ( VAR_159 ) ] ; TYPE_5 VAR_160 = ( VAR_161 -> VAR_162 . VAR_163 & VAR_164 ) >> VAR_165 ; switch ( VAR_166 ) { case VAR_167 : VAR_168 -> VAR_169 = VAR_170 ; break ; case VAR_171 : VAR_172 -> VAR_173 = VAR_174 ; break ; case VAR_175 : VAR_176 -> VAR_177 = VAR_178 ; break ; default : METHOD_24 ( 1 ) ; } } METHOD_25 ( VAR_179 , ""AllocatedSTA%pM\\n"" , VAR_180 -> VAR_181 . VAR_182 ) ; return VAR_183 ; VAR_184 : if ( VAR_185 -> VAR_186 ) { for ( VAR_187 = 0 ; VAR_188 < VAR_189 ; VAR_190 ++ ) METHOD_26 ( VAR_191 -> VAR_192 [ VAR_193 ] . VAR_194 ) ; METHOD_27 ( VAR_195 -> VAR_196 ) ; } METHOD_28 ( VAR_197 ) ; return VAR_198 ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , const TYPE_0 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 ; TYPE_2 VAR_9 ; VAR_10 = METHOD_1 ( sizeof ( * VAR_11 ) + VAR_12 -> VAR_13 . VAR_14 , VAR_15 ) ; if ( ! VAR_16 ) return VAR_17 ; METHOD_2 ( ) ; VAR_18 = METHOD_3 ( VAR_19 -> VAR_20 ) ; if ( VAR_21 ) { VAR_22 -> VAR_23 = METHOD_4 ( VAR_24 * sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_25 ) ; if ( ! VAR_26 -> VAR_27 ) { METHOD_5 ( ) ; goto VAR_28 ; } if ( VAR_29 -> VAR_30 ) { for ( VAR_31 = 0 ; VAR_32 < VAR_33 ; VAR_34 ++ ) { VAR_35 -> VAR_36 [ VAR_37 ] . VAR_38 = VAR_39 -> VAR_40 + 1 ; VAR_41 -> VAR_42 [ VAR_43 ] . VAR_44 = METHOD_6 ( VAR_45 -> VAR_46 [ VAR_47 ] . VAR_48 , sizeof ( VAR_49 ) , VAR_50 ) ; if ( ! VAR_51 -> VAR_52 [ VAR_53 ] . VAR_54 ) { METHOD_7 ( ) ; goto VAR_55 ; } } } } METHOD_8 ( ) ; METHOD_9 ( & VAR_56 -> VAR_57 ) ; METHOD_10 ( & VAR_58 -> VAR_59 , VAR_60 ) ; METHOD_11 ( & VAR_61 -> VAR_62 . VAR_63 , VAR_64 ) ; METHOD_12 ( & VAR_65 -> VAR_66 . VAR_67 ) ; TYPE_3 TYPE_4 if ( VAR_68 ( & VAR_69 -> VAR_70 ) && ! VAR_71 -> VAR_72 . VAR_73 . VAR_74 ) METHOD_13 ( & VAR_75 -> VAR_76 ) ; VAR_77 -> VAR_78 = VAR_79 ; METHOD_14 ( VAR_80 -> VAR_81 . VAR_82 , VAR_83 , VAR_84 ) ; VAR_85 -> VAR_86 = VAR_87 ; VAR_88 -> VAR_89 = VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_15 ( & VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 . VAR_101 ; METHOD_16 ( & VAR_102 -> VAR_103 , 1024 , 8 ) ; for ( VAR_104 = 0 ; VAR_105 < METHOD_17 ( VAR_106 -> VAR_107 ) ; VAR_108 ++ ) METHOD_18 ( & VAR_109 -> VAR_110 [ VAR_111 ] , 1024 , 8 ) ; if ( METHOD_19 ( VAR_112 , VAR_113 , VAR_114 ) ) goto VAR_115 ; for ( VAR_116 = 0 ; VAR_117 < VAR_118 ; VAR_119 ++ ) { VAR_120 -> VAR_121 [ VAR_122 ] = VAR_123 ; } for ( VAR_124 = 0 ; VAR_125 < VAR_126 ; VAR_127 ++ ) { METHOD_20 ( & VAR_128 -> VAR_129 [ VAR_130 ] ) ; METHOD_21 ( & VAR_131 -> VAR_132 [ VAR_133 ] ) ; } for ( VAR_134 = 0 ; VAR_135 < VAR_136 ; VAR_137 ++ ) VAR_138 -> VAR_139 [ VAR_140 ] = METHOD_22 ( VAR_141 ) ; VAR_142 -> VAR_143 . VAR_144 = VAR_145 ; if ( VAR_146 -> VAR_147 . VAR_148 == VAR_149 || VAR_150 -> VAR_151 . VAR_152 == VAR_153 ) { struct STRUCT_OR_UNION_7 * VAR_154 = VAR_155 -> VAR_156 . VAR_157 -> VAR_158 [ METHOD_23 ( VAR_159 ) ] ; TYPE_5 VAR_160 = ( VAR_161 -> VAR_162 . VAR_163 & VAR_164 ) >> VAR_165 ; switch ( VAR_166 ) { case VAR_167 : VAR_168 -> VAR_169 = VAR_170 ; break ; case VAR_171 : VAR_172 -> VAR_173 = VAR_174 ; break ; case VAR_175 : VAR_176 -> VAR_177 = VAR_178 ; break ; default : METHOD_24 ( 1 ) ; } } METHOD_25 ( VAR_179 , ""AllocatedSTA%pM\\n"" , VAR_180 -> VAR_181 . VAR_182 ) ; return VAR_183 ; VAR_184 : if ( VAR_185 -> VAR_186 ) { for ( VAR_187 = 0 ; VAR_188 < VAR_189 ; VAR_190 ++ ) METHOD_26 ( VAR_191 -> VAR_192 [ VAR_193 ] . VAR_194 ) ; METHOD_27 ( VAR_195 -> VAR_196 ) ; } METHOD_28 ( VAR_197 ) ; return VAR_198 ; }",552
553,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 * VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 * VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ;  VAR_12 = VAR_13 + 32 ;  VAR_14 = METHOD_1 ( VAR_15 ) ; if ( ! VAR_16 ) { METHOD_2 ( ) ; METHOD_3 ( ""[gzip]couldnotallocateoutgoingbuffer"" ) ; return - 1 ; } METHOD_4 ( & VAR_17 , '\\0' , sizeof ( VAR_18 ) ) ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 ; VAR_28 . VAR_29 = VAR_30 ; VAR_31 . VAR_32 = VAR_33 ; VAR_34 . VAR_35 = 0 ; METHOD_5 ( & VAR_36 , VAR_37 , VAR_38 , - VAR_39 , 9 , VAR_40 ) ; METHOD_6 ( VAR_41 ) ; VAR_42 = ( TYPE_13 * ) VAR_43 + VAR_44 ; VAR_45 = VAR_46 ; while ( 1 ) { VAR_47 . VAR_48 = VAR_49 + VAR_50 . VAR_51 ; VAR_52 . VAR_53 = VAR_54 - ( VAR_55 - ( TYPE_14 * ) VAR_56 ) ; if ( VAR_57 . VAR_58 == 0 ) { VAR_59 = VAR_60 ; } VAR_61 = METHOD_7 ( & VAR_62 , VAR_63 ) ; if ( VAR_64 == VAR_65 ) { break ; } else if ( VAR_66 != VAR_67 ) { METHOD_8 ( & VAR_68 ) ; return - 1 ; } } if ( METHOD_9 ( & VAR_69 ) != VAR_70 ) { METHOD_10 ( VAR_71 ) ; return - 1 ; } * VAR_72 = VAR_73 . VAR_74 ; VAR_75 = VAR_76 + * VAR_77 ; VAR_78 = ( TYPE_15 * ) VAR_79 + VAR_80 ; VAR_81 = METHOD_11 ( VAR_82 , VAR_83 , VAR_84 ) ; * VAR_85 ++ = VAR_86 & 0xFF ; * VAR_87 ++ = ( VAR_88 >> 8 ) & 0xFF ; * VAR_89 ++ = ( VAR_90 >> 16 ) & 0xFF ; * VAR_91 ++ = ( VAR_92 >> 24 ) & 0xFF ; * VAR_93 ++ = VAR_94 & 0xFF ; * VAR_95 ++ = ( VAR_96 >> 8 ) & 0xFF ; * VAR_97 ++ = ( VAR_98 >> 16 ) & 0xFF ; * VAR_99 ++ = ( VAR_100 >> 24 ) & 0xFF ; * VAR_101 += VAR_102 + 8 ; * VAR_103 = VAR_104 ; return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 * VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 * VAR_9 ; TYPE_11 VAR_10 ; TYPE_12 VAR_11 ; VAR_12 = VAR_13 + 32 ; VAR_14 = METHOD_1 ( VAR_15 ) ; if ( ! VAR_16 ) { METHOD_2 ( ) ; METHOD_3 ( ""[gzip]couldnotallocateoutgoingbuffer"" ) ; return - 1 ; } METHOD_4 ( & VAR_17 , '\\0' , sizeof ( VAR_18 ) ) ; VAR_19 . VAR_20 = VAR_21 ; VAR_22 . VAR_23 = VAR_24 ; VAR_25 . VAR_26 = VAR_27 ; VAR_28 . VAR_29 = VAR_30 ; VAR_31 . VAR_32 = VAR_33 ; VAR_34 . VAR_35 = 0 ; METHOD_5 ( & VAR_36 , VAR_37 , VAR_38 , - VAR_39 , 9 , VAR_40 ) ; METHOD_6 ( VAR_41 ) ; VAR_42 = ( TYPE_13 * ) VAR_43 + VAR_44 ; VAR_45 = VAR_46 ; while ( 1 ) { VAR_47 . VAR_48 = VAR_49 + VAR_50 . VAR_51 ; VAR_52 . VAR_53 = VAR_54 - ( VAR_55 - ( TYPE_14 * ) VAR_56 ) ; if ( VAR_57 . VAR_58 == 0 ) { VAR_59 = VAR_60 ; } VAR_61 = METHOD_7 ( & VAR_62 , VAR_63 ) ; if ( VAR_64 == VAR_65 ) { break ; } else if ( VAR_66 != VAR_67 ) { METHOD_8 ( & VAR_68 ) ; return - 1 ; } } if ( METHOD_9 ( & VAR_69 ) != VAR_70 ) { METHOD_10 ( VAR_71 ) ; return - 1 ; } * VAR_72 = VAR_73 . VAR_74 ; VAR_75 = VAR_76 + * VAR_77 ; VAR_78 = ( TYPE_15 * ) VAR_79 + VAR_80 ; VAR_81 = METHOD_11 ( VAR_82 , VAR_83 , VAR_84 ) ; * VAR_85 ++ = VAR_86 & 0xFF ; * VAR_87 ++ = ( VAR_88 >> 8 ) & 0xFF ; * VAR_89 ++ = ( VAR_90 >> 16 ) & 0xFF ; * VAR_91 ++ = ( VAR_92 >> 24 ) & 0xFF ; * VAR_93 ++ = VAR_94 & 0xFF ; * VAR_95 ++ = ( VAR_96 >> 8 ) & 0xFF ; * VAR_97 ++ = ( VAR_98 >> 16 ) & 0xFF ; * VAR_99 ++ = ( VAR_100 >> 24 ) & 0xFF ; * VAR_101 += VAR_102 + 8 ; * VAR_103 = VAR_104 ; return 0 ; }",553
554,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 , unsigned TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; unsigned TYPE_7 VAR_6 [ VAR_7 ] ; unsigned TYPE_8 VAR_8 , VAR_9 ; unsigned TYPE_9 VAR_10 , VAR_11 ; unsigned TYPE_10 VAR_12 , VAR_13 ; unsigned TYPE_11 VAR_14 , VAR_15 ; if ( ! VAR_16 || ! VAR_17 || ! VAR_18 || ! VAR_19 ) { return 0 ; } if ( METHOD_1 ( VAR_20 , VAR_21 , 1 , VAR_22 ) != 1 ) { METHOD_2 ( VAR_23 , ""\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n"" ) ; return 0 ; } VAR_24 = VAR_25 [ 0 ] ; VAR_26 = VAR_27 [ 2 ] ;  VAR_28 = METHOD_3 ( & VAR_29 [ 5 ] ) ;  VAR_30 = VAR_31 [ 7 ] ; if 0  VAR_32 = METHOD_4 ( & VAR_33 [ 8 ] ) ;   VAR_34 = METHOD_5 ( & VAR_35 [ 10 ] ) ;   VAR_36 = METHOD_6 ( & VAR_37 [ 12 ] ) ;   VAR_38 = METHOD_7 ( & VAR_39 [ 14 ] ) ;  VAR_40 = VAR_41 [ 16 ] ; VAR_42 = VAR_43 [ 17 ] ; * VAR_44 = ( unsigned TYPE_12 ) VAR_45 ; * VAR_46 = ( unsigned TYPE_13 ) VAR_47 ; * VAR_48 = ( unsigned TYPE_14 ) VAR_49 ; if ( VAR_50 ) { unsigned TYPE_15 * VAR_51 = ( unsigned TYPE_16 * ) METHOD_8 ( VAR_52 ) ; if ( VAR_53 == 0 ) { METHOD_9 ( VAR_54 , ""tga_readheader:memoryout\\n"" ) ; return 0 ; } if ( ! METHOD_10 ( VAR_55 , VAR_56 , 1 , VAR_57 ) ) { METHOD_11 ( VAR_58 , ""\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n"" ) ; METHOD_12 ( VAR_59 ) ; return 0 ; } METHOD_13 ( VAR_60 ) ; } if ( VAR_61 > 8 ) { METHOD_14 ( VAR_62 , ""Sorry,compressedtgafilesarenotcurrentlysupported.\\n"" ) ; return 0 ; } * VAR_63 = ! ( VAR_64 & 32 ) ; VAR_65 = VAR_66 * ( VAR_67 / 8 ) ; if ( VAR_68 > 0 ) { METHOD_15 ( VAR_69 , ""Filecontainsapalette-notyetsupported."" ) ; METHOD_16 ( VAR_70 , VAR_71 , VAR_72 ) ; } return 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 , unsigned TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; unsigned TYPE_7 VAR_6 [ VAR_7 ] ; unsigned TYPE_8 VAR_8 , VAR_9 ; unsigned TYPE_9 VAR_10 , VAR_11 ; unsigned TYPE_10 VAR_12 , VAR_13 ; unsigned TYPE_11 VAR_14 , VAR_15 ; if ( ! VAR_16 || ! VAR_17 || ! VAR_18 || ! VAR_19 ) { return 0 ; } if ( METHOD_1 ( VAR_20 , VAR_21 , 1 , VAR_22 ) != 1 ) { METHOD_2 ( VAR_23 , ""\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n"" ) ; return 0 ; } VAR_24 = VAR_25 [ 0 ] ; VAR_26 = VAR_27 [ 2 ] ; VAR_28 = METHOD_3 ( & VAR_29 [ 5 ] ) ; VAR_30 = VAR_31 [ 7 ] ; if 0 VAR_32 = METHOD_4 ( & VAR_33 [ 8 ] ) ; VAR_34 = METHOD_5 ( & VAR_35 [ 10 ] ) ; VAR_36 = METHOD_6 ( & VAR_37 [ 12 ] ) ; VAR_38 = METHOD_7 ( & VAR_39 [ 14 ] ) ; VAR_40 = VAR_41 [ 16 ] ; VAR_42 = VAR_43 [ 17 ] ; * VAR_44 = ( unsigned TYPE_12 ) VAR_45 ; * VAR_46 = ( unsigned TYPE_13 ) VAR_47 ; * VAR_48 = ( unsigned TYPE_14 ) VAR_49 ; if ( VAR_50 ) { unsigned TYPE_15 * VAR_51 = ( unsigned TYPE_16 * ) METHOD_8 ( VAR_52 ) ; if ( VAR_53 == 0 ) { METHOD_9 ( VAR_54 , ""tga_readheader:memoryout\\n"" ) ; return 0 ; } if ( ! METHOD_10 ( VAR_55 , VAR_56 , 1 , VAR_57 ) ) { METHOD_11 ( VAR_58 , ""\\nError:freadreturnanumberofelementdifferentfromtheexpected.\\n"" ) ; METHOD_12 ( VAR_59 ) ; return 0 ; } METHOD_13 ( VAR_60 ) ; } if ( VAR_61 > 8 ) { METHOD_14 ( VAR_62 , ""Sorry,compressedtgafilesarenotcurrentlysupported.\\n"" ) ; return 0 ; } * VAR_63 = ! ( VAR_64 & 32 ) ; VAR_65 = VAR_66 * ( VAR_67 / 8 ) ; if ( VAR_68 > 0 ) { METHOD_15 ( VAR_69 , ""Filecontainsapalette-notyetsupported."" ) ; METHOD_16 ( VAR_70 , VAR_71 , VAR_72 ) ; } return 1 ; }",554
555,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 , VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_13 * VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_14 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_15 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_16 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_17 * ) VAR_45 ) ; } VAR_46 . VAR_47 = METHOD_10 ( VAR_48 ) ; do { if ( VAR_49 . VAR_50 != 0x01DA ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 . VAR_53 = ( unsigned TYPE_18 ) METHOD_12 ( VAR_54 ) ; switch ( VAR_55 . VAR_56 ) { case 0x00 : VAR_57 -> VAR_58 = VAR_59 ; break ; case 0x01 : VAR_60 -> VAR_61 = VAR_62 ; break ; default : METHOD_13 ( VAR_63 , ""ImproperImageHeader"" ) ; } VAR_64 . VAR_65 = ( unsigned TYPE_19 ) METHOD_14 ( VAR_66 ) ; if ( ( VAR_67 . VAR_68 == 0 ) || ( VAR_69 . VAR_70 > 2 ) ) METHOD_15 ( VAR_71 , ""ImproperImageHeader"" ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == 0 ) || ( VAR_86 . VAR_87 > 4 ) ) METHOD_20 ( VAR_88 , ""ImproperImageHeader"" ) ; VAR_89 . VAR_90 = METHOD_21 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_22 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_23 ( VAR_97 ) ;  ( TYPE_20 ) METHOD_24 ( VAR_98 , sizeof ( VAR_99 . VAR_100 ) , ( unsigned TYPE_21 * )   VAR_101 . VAR_102 ) ;  VAR_103 . VAR_104 [ sizeof ( VAR_105 . VAR_106 ) - 1 ] = '\\0' ; if ( * VAR_107 . VAR_108 != '\\0' ) ( TYPE_22 ) METHOD_25 ( VAR_109 , ""label"" , VAR_110 . VAR_111 , VAR_112 ) ; VAR_113 . VAR_114 = METHOD_26 ( VAR_115 ) ; if ( VAR_116 . VAR_117 != 0 ) METHOD_27 ( VAR_118 , ""ImproperImageHeader"" ) ; VAR_119 = METHOD_28 ( VAR_120 , sizeof ( VAR_121 . VAR_122 ) , VAR_123 . VAR_124 ) ;  ( TYPE_23 ) VAR_125 ;  VAR_126 -> VAR_127 = VAR_128 . VAR_129 ; VAR_130 -> VAR_131 = VAR_132 . VAR_133 ; VAR_134 -> VAR_135 = ( TYPE_24 ) METHOD_29 ( VAR_136 . VAR_137 , VAR_138 ) ; if ( VAR_139 . VAR_140 == 0 ) VAR_141 -> VAR_142 = ( TYPE_25 ) METHOD_30 ( ( TYPE_26 ) 8 * VAR_143 . VAR_144 , VAR_145 ) ; if ( VAR_146 . VAR_147 < 3 ) { VAR_148 -> VAR_149 = VAR_150 ; VAR_151 -> VAR_152 = VAR_153 . VAR_154 > 1 ? 65535 : 256 ; }  if ( METHOD_31 ( VAR_155 ) != VAR_156 )  METHOD_32 ( VAR_157 , ""ImproperImageHeader"" ) ; if ( ( VAR_158 -> VAR_159 != VAR_160 ) && ( VAR_161 -> VAR_162 != 0 ) ) if ( VAR_163 -> VAR_164 >= ( VAR_165 -> VAR_166 + VAR_167 -> VAR_168 - 1 ) ) break ; VAR_169 = METHOD_33 ( VAR_170 , VAR_171 -> VAR_172 , VAR_173 -> VAR_174 , VAR_175 ) ; if ( VAR_176 == VAR_177 ) return ( METHOD_34 ( VAR_178 ) ) ; VAR_179 = ( TYPE_27 ) VAR_180 . VAR_181 ; VAR_182 = ( TYPE_28 ) VAR_183 . VAR_184 * VAR_185 . VAR_186 ; if ( ( 4 * VAR_187 * VAR_188 ) != ( ( TYPE_29 ) ( TYPE_30 ) ( 4 * VAR_189 * VAR_190 ) ) ) METHOD_35 ( VAR_191 , ""MemoryAllocationFailed"" ) ; VAR_192 = METHOD_36 ( VAR_193 . VAR_194 , VAR_195 . VAR_196 * 4 * VAR_197 * sizeof ( * VAR_198 ) ) ; if ( VAR_199 == ( TYPE_31 * ) VAR_200 ) METHOD_37 ( VAR_201 , ""MemoryAllocationFailed"" ) ; VAR_202 = ( unsigned TYPE_32 * ) METHOD_38 ( VAR_203 ) ; if ( ( TYPE_33 ) VAR_204 . VAR_205 != 0x01 ) { unsigned TYPE_34 * VAR_206 ; VAR_207 = ( unsigned TYPE_35 * ) METHOD_39 ( VAR_208 . VAR_209 , VAR_210 * sizeof ( * VAR_211 ) ) ; if ( VAR_212 == ( unsigned TYPE_36 * ) VAR_213 ) METHOD_40 ( VAR_214 , ""MemoryAllocationFailed"" ) ; for ( VAR_215 = 0 ; VAR_216 < ( TYPE_37 ) VAR_217 . VAR_218 ; VAR_219 ++ ) { VAR_220 = VAR_221 + VAR_222 * VAR_223 ; for ( VAR_224 = 0 ; VAR_225 < ( TYPE_38 ) VAR_226 . VAR_227 ; VAR_228 ++ ) { VAR_229 = METHOD_41 ( VAR_230 , VAR_231 * VAR_232 . VAR_233 , VAR_234 ) ; if ( METHOD_42 ( VAR_235 ) != VAR_236 ) break ; if ( VAR_237 == 2 ) for ( VAR_238 = 0 ; VAR_239 < ( TYPE_39 ) VAR_240 . VAR_241 ; VAR_242 ++ ) { * VAR_243 = VAR_244 [ 2 * VAR_245 ] ; * ( VAR_246 + 1 ) = VAR_247 [ 2 * VAR_248 + 1 ] ; VAR_249 += 8 ; } else for ( VAR_250 = 0 ; VAR_251 < ( TYPE_40 ) VAR_252 . VAR_253 ; VAR_254 ++ ) { * VAR_255 = VAR_256 [ VAR_257 ] ; VAR_258 += 4 ; } } } VAR_259 = ( unsigned TYPE_41 * ) METHOD_43 ( VAR_260 ) ; } else { TYPE_42 * VAR_261 ; TYPE_43 * VAR_262 ; TYPE_44 VAR_263 , * VAR_264 ; unsigned TYPE_45 * VAR_265 ; unsigned TYPE_46 VAR_266 ; VAR_267 = ( TYPE_47 * ) METHOD_44 ( ( TYPE_48 ) VAR_268 . VAR_269 , VAR_270 . VAR_271 * sizeof ( * VAR_272 ) ) ; VAR_273 = ( TYPE_49 * ) METHOD_45 ( VAR_274 . VAR_275 , VAR_276 . VAR_277 * sizeof ( * VAR_278 ) ) ; VAR_279 = METHOD_46 ( ( TYPE_50 ) VAR_280 . VAR_281 + 10UL , 4UL * sizeof ( * VAR_282 ) ) ; if ( ( VAR_283 == ( TYPE_51 * ) VAR_284 ) || ( VAR_285 == ( TYPE_52 * ) VAR_286 ) || ( VAR_287 == ( TYPE_53 * ) VAR_288 ) ) { if ( VAR_289 == ( TYPE_54 * ) VAR_290 ) VAR_291 = ( TYPE_55 * ) METHOD_47 ( VAR_292 ) ; if ( VAR_293 == ( TYPE_56 * ) VAR_294 ) VAR_295 = ( TYPE_57 * ) METHOD_48 ( VAR_296 ) ; if ( VAR_297 == ( TYPE_58 * ) VAR_298 ) VAR_299 = METHOD_49 ( VAR_300 ) ; METHOD_50 ( VAR_301 , ""MemoryAllocationFailed"" ) ; } VAR_302 = ( unsigned TYPE_59 * ) METHOD_51 ( VAR_303 ) ; for ( VAR_304 = 0 ; VAR_305 < ( TYPE_60 ) ( VAR_306 . VAR_307 * VAR_308 . VAR_309 ) ; VAR_310 ++ ) VAR_311 [ VAR_312 ] = METHOD_52 ( VAR_313 ) ; for ( VAR_314 = 0 ; VAR_315 < ( TYPE_61 ) ( VAR_316 . VAR_317 * VAR_318 . VAR_319 ) ; VAR_320 ++ ) { VAR_321 [ VAR_322 ] = METHOD_53 ( VAR_323 ) ; if ( VAR_324 [ VAR_325 ] > ( 4 * ( TYPE_62 ) VAR_326 . VAR_327 + 10 ) ) METHOD_54 ( VAR_328 , ""ImproperImageHeader"" ) ; } VAR_329 = 0 ; VAR_330 = 0 ; for ( VAR_331 = 0 ; ( ( VAR_332 < ( TYPE_63 ) VAR_333 . VAR_334 ) && ( VAR_335 == 0 ) ) ; VAR_336 ++ ) for ( VAR_337 = 0 ; ( ( VAR_338 < ( TYPE_64 ) VAR_339 . VAR_340 ) && ( VAR_341 == 0 ) ) ; VAR_342 ++ ) { if ( VAR_343 [ VAR_344 + VAR_345 * VAR_346 . VAR_347 ] < VAR_348 ) VAR_349 = 1 ; VAR_350 = VAR_351 [ VAR_352 + VAR_353 * VAR_354 . VAR_355 ] ; } VAR_356 = ( TYPE_65 ) METHOD_55 ( VAR_357 ) ; if ( VAR_358 == 1 ) { for ( VAR_359 = 0 ; VAR_360 < ( TYPE_66 ) VAR_361 . VAR_362 ; VAR_363 ++ ) { VAR_364 = VAR_365 ; for ( VAR_366 = 0 ; VAR_367 < ( TYPE_67 ) VAR_368 . VAR_369 ; VAR_370 ++ ) { if ( VAR_371 != VAR_372 [ VAR_373 + VAR_374 * VAR_375 . VAR_376 ] ) { VAR_377 = VAR_378 [ VAR_379 + VAR_380 * VAR_381 . VAR_382 ] ; VAR_383 = ( TYPE_68 ) METHOD_56 ( VAR_384 , ( TYPE_69 ) VAR_385 , VAR_386 ) ; } VAR_387 = METHOD_57 ( VAR_388 , ( TYPE_70 ) VAR_389 [ VAR_390 + VAR_391 * VAR_392 . VAR_393 ] , VAR_394 ) ; if ( METHOD_58 ( VAR_395 ) != VAR_396 ) break ; VAR_397 += ( TYPE_71 ) VAR_398 [ VAR_399 + VAR_400 * VAR_401 . VAR_402 ] ; VAR_403 = METHOD_59 ( VAR_404 , ( TYPE_72 ) ( VAR_405 [ VAR_406 + VAR_407 * VAR_408 . VAR_409 ] / VAR_410 ) , VAR_411 , 1L * VAR_412 . VAR_413 , VAR_414 + VAR_415 * VAR_416 ) ; if ( VAR_417 == VAR_418 ) METHOD_60 ( VAR_419 , ""ImproperImageHeader"" ) ; VAR_420 += ( VAR_421 . VAR_422 * 4 * VAR_423 ) ; } } } else { TYPE_73 VAR_424 ; VAR_425 = METHOD_61 ( VAR_426 ) ; VAR_427 = VAR_428 ; for ( VAR_429 = 0 ; VAR_430 < ( TYPE_74 ) VAR_431 . VAR_432 ; VAR_433 ++ ) { for ( VAR_434 = 0 ; VAR_435 < ( TYPE_75 ) VAR_436 . VAR_437 ; VAR_438 ++ ) { if ( VAR_439 != VAR_440 [ VAR_441 + VAR_442 * VAR_443 . VAR_444 ] ) { VAR_445 = VAR_446 [ VAR_447 + VAR_448 * VAR_449 . VAR_450 ] ; VAR_451 = ( TYPE_76 ) METHOD_62 ( VAR_452 , ( TYPE_77 ) VAR_453 , VAR_454 ) ; } VAR_455 = METHOD_63 ( VAR_456 , ( TYPE_78 ) VAR_457 [ VAR_458 + VAR_459 * VAR_460 . VAR_461 ] , VAR_462 ) ; if ( METHOD_64 ( VAR_463 ) != VAR_464 ) break ; VAR_465 += ( TYPE_79 ) VAR_466 [ VAR_467 + VAR_468 * VAR_469 . VAR_470 ] ; VAR_471 = METHOD_65 ( VAR_472 , ( TYPE_80 ) ( VAR_473 [ VAR_474 + VAR_475 * VAR_476 . VAR_477 ] / VAR_478 ) , VAR_479 , 1L * VAR_480 . VAR_481 , VAR_482 + VAR_483 * VAR_484 ) ; if ( VAR_485 == VAR_486 ) METHOD_66 ( VAR_487 , ""ImproperImageHeader"" ) ; } VAR_488 += ( VAR_489 . VAR_490 * 4 * VAR_491 ) ; } VAR_492 = ( TYPE_81 ) METHOD_67 ( VAR_493 , VAR_494 , VAR_495 ) ; } VAR_496 = METHOD_68 ( VAR_497 ) ; VAR_498 = ( TYPE_82 * ) METHOD_69 ( VAR_499 ) ; VAR_500 = ( TYPE_83 * ) METHOD_70 ( VAR_501 ) ; } VAR_502 -> VAR_503 = VAR_504 . VAR_505 == 4 ? VAR_506 : VAR_507 ; VAR_508 -> VAR_509 = VAR_510 . VAR_511 ; VAR_512 -> VAR_513 = VAR_514 . VAR_515 ; if ( VAR_516 -> VAR_517 == VAR_518 ) { if ( VAR_519 == 2 ) { for ( VAR_520 = 0 ; VAR_521 < ( TYPE_84 ) VAR_522 -> VAR_523 ; VAR_524 ++ ) { VAR_525 = VAR_526 + ( VAR_527 -> VAR_528 - VAR_529 - 1 ) * 8 * VAR_530 -> VAR_531 ; VAR_532 = METHOD_71 ( VAR_533 , 0 , VAR_534 , VAR_535 -> VAR_536 , 1 , VAR_537 ) ; if ( VAR_538 == ( TYPE_85 * ) VAR_539 ) break ; for ( VAR_540 = 0 ; VAR_541 < ( TYPE_86 ) VAR_542 -> VAR_543 ; VAR_544 ++ ) { METHOD_72 ( VAR_545 , METHOD_73 ( ( unsigned TYPE_87 ) ( ( * ( VAR_546 + 0 ) << 8 ) | ( * ( VAR_547 + 1 ) ) ) ) , VAR_548 ) ; METHOD_74 ( VAR_549 , METHOD_75 ( ( unsigned TYPE_88 ) ( ( * ( VAR_550 + 2 ) << 8 ) | ( * ( VAR_551 + 3 ) ) ) ) , VAR_552 ) ; METHOD_76 ( VAR_553 , METHOD_77 ( ( unsigned TYPE_89 ) ( ( * ( VAR_554 + 4 ) << 8 ) | ( * ( VAR_555 + 5 ) ) ) ) , VAR_556 ) ; METHOD_78 ( VAR_557 , VAR_558 , VAR_559 ) ; if ( VAR_560 -> VAR_561 != VAR_562 ) METHOD_79 ( VAR_563 , METHOD_80 ( ( unsigned TYPE_90 ) ( ( * ( VAR_564 + 6 ) << 8 ) | ( * ( VAR_565 + 7 ) ) ) ) , VAR_566 ) ; VAR_567 += 8 ; VAR_568 += METHOD_81 ( VAR_569 ) ; } if ( METHOD_82 ( VAR_570 , VAR_571 ) == VAR_572 ) break ; if ( VAR_573 -> VAR_574 == ( TYPE_91 * ) VAR_575 ) { VAR_576 = METHOD_83 ( VAR_577 , VAR_578 , ( TYPE_92 ) VAR_579 , VAR_580 -> VAR_581 ) ; if ( VAR_582 == VAR_583 ) break ; } } } else for ( VAR_584 = 0 ; VAR_585 < ( TYPE_93 ) VAR_586 -> VAR_587 ; VAR_588 ++ ) { VAR_589 = VAR_590 + ( VAR_591 -> VAR_592 - VAR_593 - 1 ) * 4 * VAR_594 -> VAR_595 ; VAR_596 = METHOD_84 ( VAR_597 , 0 , VAR_598 , VAR_599 -> VAR_600 , 1 , VAR_601 ) ; if ( VAR_602 == ( TYPE_94 * ) VAR_603 ) break ; for ( VAR_604 = 0 ; VAR_605 < ( TYPE_95 ) VAR_606 -> VAR_607 ; VAR_608 ++ ) { METHOD_85 ( VAR_609 , METHOD_86 ( * VAR_610 ) , VAR_611 ) ; METHOD_87 ( VAR_612 , METHOD_88 ( * ( VAR_613 + 1 ) ) , VAR_614 ) ; METHOD_89 ( VAR_615 , METHOD_90 ( * ( VAR_616 + 2 ) ) , VAR_617 ) ; METHOD_91 ( VAR_618 , VAR_619 , VAR_620 ) ; if ( VAR_621 -> VAR_622 != VAR_623 ) METHOD_92 ( VAR_624 , METHOD_93 ( * ( VAR_625 + 3 ) ) , VAR_626 ) ; VAR_627 += 4 ; VAR_628 += METHOD_94 ( VAR_629 ) ; } if ( METHOD_95 ( VAR_630 , VAR_631 ) == VAR_632 ) break ; if ( VAR_633 -> VAR_634 == ( TYPE_96 * ) VAR_635 ) { VAR_636 = METHOD_96 ( VAR_637 , VAR_638 , ( TYPE_97 ) VAR_639 , VAR_640 -> VAR_641 ) ; if ( VAR_642 == VAR_643 ) break ; } } } else { if ( METHOD_97 ( VAR_644 , VAR_645 -> VAR_646 , VAR_647 ) == VAR_648 ) METHOD_98 ( VAR_649 , ""MemoryAllocationFailed"" ) ; if ( VAR_650 == 2 ) { for ( VAR_651 = 0 ; VAR_652 < ( TYPE_98 ) VAR_653 -> VAR_654 ; VAR_655 ++ ) { VAR_656 = VAR_657 + ( VAR_658 -> VAR_659 - VAR_660 - 1 ) * 8 * VAR_661 -> VAR_662 ; VAR_663 = METHOD_99 ( VAR_664 , 0 , VAR_665 , VAR_666 -> VAR_667 , 1 , VAR_668 ) ; if ( VAR_669 == ( TYPE_99 * ) VAR_670 ) break ; for ( VAR_671 = 0 ; VAR_672 < ( TYPE_100 ) VAR_673 -> VAR_674 ; VAR_675 ++ ) { VAR_676 = ( * VAR_677 << 8 ) ; VAR_678 |= ( * ( VAR_679 + 1 ) ) ; METHOD_100 ( VAR_680 , ( TYPE_101 ) VAR_681 , VAR_682 ) ; VAR_683 += 8 ; VAR_684 += METHOD_101 ( VAR_685 ) ; } if ( METHOD_102 ( VAR_686 , VAR_687 ) == VAR_688 ) break ; if ( VAR_689 -> VAR_690 == ( TYPE_102 * ) VAR_691 ) { VAR_692 = METHOD_103 ( VAR_693 , VAR_694 , ( TYPE_103 ) VAR_695 , VAR_696 -> VAR_697 ) ; if ( VAR_698 == VAR_699 ) break ; } } } else for ( VAR_700 = 0 ; VAR_701 < ( TYPE_104 ) VAR_702 -> VAR_703 ; VAR_704 ++ ) { VAR_705 = VAR_706 + ( VAR_707 -> VAR_708 - VAR_709 - 1 ) * 4 * VAR_710 -> VAR_711 ; VAR_712 = METHOD_104 ( VAR_713 , 0 , VAR_714 , VAR_715 -> VAR_716 , 1 , VAR_717 ) ; if ( VAR_718 == ( TYPE_105 * ) VAR_719 ) break ; for ( VAR_720 = 0 ; VAR_721 < ( TYPE_106 ) VAR_722 -> VAR_723 ; VAR_724 ++ ) { METHOD_105 ( VAR_725 , * VAR_726 , VAR_727 ) ; VAR_728 += 4 ; VAR_729 += METHOD_106 ( VAR_730 ) ; } if ( METHOD_107 ( VAR_731 , VAR_732 ) == VAR_733 ) break ; if ( VAR_734 -> VAR_735 == ( TYPE_107 * ) VAR_736 ) { VAR_737 = METHOD_108 ( VAR_738 , VAR_739 , ( TYPE_108 ) VAR_740 , VAR_741 -> VAR_742 ) ; if ( VAR_743 == VAR_744 ) break ; } } ( TYPE_109 ) METHOD_109 ( VAR_745 , VAR_746 ) ; } VAR_747 = METHOD_110 ( VAR_748 ) ; if ( METHOD_111 ( VAR_749 ) != VAR_750 ) { METHOD_112 ( VAR_751 , VAR_752 , ""UnexpectedEndOfFile"" , VAR_753 -> VAR_754 ) ; break ; } if ( VAR_755 -> VAR_756 != 0 ) if ( VAR_757 -> VAR_758 >= ( VAR_759 -> VAR_760 + VAR_761 -> VAR_762 - 1 ) ) break ; VAR_763 . VAR_764 = METHOD_113 ( VAR_765 ) ; if ( VAR_766 . VAR_767 == 0x01DA ) { METHOD_114 ( VAR_768 , VAR_769 , VAR_770 ) ; if ( METHOD_115 ( VAR_771 ) == ( TYPE_110 * ) VAR_772 ) { VAR_773 = METHOD_116 ( VAR_774 ) ; return ( ( TYPE_111 * ) VAR_775 ) ; } VAR_776 = METHOD_117 ( VAR_777 ) ; VAR_778 = METHOD_118 ( VAR_779 , VAR_780 , METHOD_119 ( VAR_781 ) , METHOD_120 ( VAR_782 ) ) ; if ( VAR_783 == VAR_784 ) break ; } } while ( VAR_785 . VAR_786 == 0x01DA ) ; ( TYPE_112 ) METHOD_121 ( VAR_787 ) ; return ( METHOD_122 ( VAR_788 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 * VAR_5 ; register TYPE_7 * VAR_6 ; register TYPE_8 VAR_7 , VAR_8 ; register unsigned TYPE_9 * VAR_9 ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 , VAR_12 ; TYPE_12 VAR_13 , VAR_14 , VAR_15 ; unsigned TYPE_13 * VAR_16 ; METHOD_1 ( VAR_17 != ( const TYPE_14 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_15 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_16 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_17 * ) VAR_45 ) ; } VAR_46 . VAR_47 = METHOD_10 ( VAR_48 ) ; do { if ( VAR_49 . VAR_50 != 0x01DA ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 . VAR_53 = ( unsigned TYPE_18 ) METHOD_12 ( VAR_54 ) ; switch ( VAR_55 . VAR_56 ) { case 0x00 : VAR_57 -> VAR_58 = VAR_59 ; break ; case 0x01 : VAR_60 -> VAR_61 = VAR_62 ; break ; default : METHOD_13 ( VAR_63 , ""ImproperImageHeader"" ) ; } VAR_64 . VAR_65 = ( unsigned TYPE_19 ) METHOD_14 ( VAR_66 ) ; if ( ( VAR_67 . VAR_68 == 0 ) || ( VAR_69 . VAR_70 > 2 ) ) METHOD_15 ( VAR_71 , ""ImproperImageHeader"" ) ; VAR_72 . VAR_73 = METHOD_16 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_17 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_18 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_19 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == 0 ) || ( VAR_86 . VAR_87 > 4 ) ) METHOD_20 ( VAR_88 , ""ImproperImageHeader"" ) ; VAR_89 . VAR_90 = METHOD_21 ( VAR_91 ) ; VAR_92 . VAR_93 = METHOD_22 ( VAR_94 ) ; VAR_95 . VAR_96 = METHOD_23 ( VAR_97 ) ; ( TYPE_20 ) METHOD_24 ( VAR_98 , sizeof ( VAR_99 . VAR_100 ) , ( unsigned TYPE_21 * ) VAR_101 . VAR_102 ) ; VAR_103 . VAR_104 [ sizeof ( VAR_105 . VAR_106 ) - 1 ] = '\\0' ; if ( * VAR_107 . VAR_108 != '\\0' ) ( TYPE_22 ) METHOD_25 ( VAR_109 , ""label"" , VAR_110 . VAR_111 , VAR_112 ) ; VAR_113 . VAR_114 = METHOD_26 ( VAR_115 ) ; if ( VAR_116 . VAR_117 != 0 ) METHOD_27 ( VAR_118 , ""ImproperImageHeader"" ) ; VAR_119 = METHOD_28 ( VAR_120 , sizeof ( VAR_121 . VAR_122 ) , VAR_123 . VAR_124 ) ; ( TYPE_23 ) VAR_125 ; VAR_126 -> VAR_127 = VAR_128 . VAR_129 ; VAR_130 -> VAR_131 = VAR_132 . VAR_133 ; VAR_134 -> VAR_135 = ( TYPE_24 ) METHOD_29 ( VAR_136 . VAR_137 , VAR_138 ) ; if ( VAR_139 . VAR_140 == 0 ) VAR_141 -> VAR_142 = ( TYPE_25 ) METHOD_30 ( ( TYPE_26 ) 8 * VAR_143 . VAR_144 , VAR_145 ) ; if ( VAR_146 . VAR_147 < 3 ) { VAR_148 -> VAR_149 = VAR_150 ; VAR_151 -> VAR_152 = VAR_153 . VAR_154 > 1 ? 65535 : 256 ; } if ( METHOD_31 ( VAR_155 ) != VAR_156 ) METHOD_32 ( VAR_157 , ""ImproperImageHeader"" ) ; if ( ( VAR_158 -> VAR_159 != VAR_160 ) && ( VAR_161 -> VAR_162 != 0 ) ) if ( VAR_163 -> VAR_164 >= ( VAR_165 -> VAR_166 + VAR_167 -> VAR_168 - 1 ) ) break ; VAR_169 = METHOD_33 ( VAR_170 , VAR_171 -> VAR_172 , VAR_173 -> VAR_174 , VAR_175 ) ; if ( VAR_176 == VAR_177 ) return ( METHOD_34 ( VAR_178 ) ) ; VAR_179 = ( TYPE_27 ) VAR_180 . VAR_181 ; VAR_182 = ( TYPE_28 ) VAR_183 . VAR_184 * VAR_185 . VAR_186 ; if ( ( 4 * VAR_187 * VAR_188 ) != ( ( TYPE_29 ) ( TYPE_30 ) ( 4 * VAR_189 * VAR_190 ) ) ) METHOD_35 ( VAR_191 , ""MemoryAllocationFailed"" ) ; VAR_192 = METHOD_36 ( VAR_193 . VAR_194 , VAR_195 . VAR_196 * 4 * VAR_197 * sizeof ( * VAR_198 ) ) ; if ( VAR_199 == ( TYPE_31 * ) VAR_200 ) METHOD_37 ( VAR_201 , ""MemoryAllocationFailed"" ) ; VAR_202 = ( unsigned TYPE_32 * ) METHOD_38 ( VAR_203 ) ; if ( ( TYPE_33 ) VAR_204 . VAR_205 != 0x01 ) { unsigned TYPE_34 * VAR_206 ; VAR_207 = ( unsigned TYPE_35 * ) METHOD_39 ( VAR_208 . VAR_209 , VAR_210 * sizeof ( * VAR_211 ) ) ; if ( VAR_212 == ( unsigned TYPE_36 * ) VAR_213 ) METHOD_40 ( VAR_214 , ""MemoryAllocationFailed"" ) ; for ( VAR_215 = 0 ; VAR_216 < ( TYPE_37 ) VAR_217 . VAR_218 ; VAR_219 ++ ) { VAR_220 = VAR_221 + VAR_222 * VAR_223 ; for ( VAR_224 = 0 ; VAR_225 < ( TYPE_38 ) VAR_226 . VAR_227 ; VAR_228 ++ ) { VAR_229 = METHOD_41 ( VAR_230 , VAR_231 * VAR_232 . VAR_233 , VAR_234 ) ; if ( METHOD_42 ( VAR_235 ) != VAR_236 ) break ; if ( VAR_237 == 2 ) for ( VAR_238 = 0 ; VAR_239 < ( TYPE_39 ) VAR_240 . VAR_241 ; VAR_242 ++ ) { * VAR_243 = VAR_244 [ 2 * VAR_245 ] ; * ( VAR_246 + 1 ) = VAR_247 [ 2 * VAR_248 + 1 ] ; VAR_249 += 8 ; } else for ( VAR_250 = 0 ; VAR_251 < ( TYPE_40 ) VAR_252 . VAR_253 ; VAR_254 ++ ) { * VAR_255 = VAR_256 [ VAR_257 ] ; VAR_258 += 4 ; } } } VAR_259 = ( unsigned TYPE_41 * ) METHOD_43 ( VAR_260 ) ; } else { TYPE_42 * VAR_261 ; TYPE_43 * VAR_262 ; TYPE_44 VAR_263 , * VAR_264 ; unsigned TYPE_45 * VAR_265 ; unsigned TYPE_46 VAR_266 ; VAR_267 = ( TYPE_47 * ) METHOD_44 ( ( TYPE_48 ) VAR_268 . VAR_269 , VAR_270 . VAR_271 * sizeof ( * VAR_272 ) ) ; VAR_273 = ( TYPE_49 * ) METHOD_45 ( VAR_274 . VAR_275 , VAR_276 . VAR_277 * sizeof ( * VAR_278 ) ) ; VAR_279 = METHOD_46 ( ( TYPE_50 ) VAR_280 . VAR_281 + 10UL , 4UL * sizeof ( * VAR_282 ) ) ; if ( ( VAR_283 == ( TYPE_51 * ) VAR_284 ) || ( VAR_285 == ( TYPE_52 * ) VAR_286 ) || ( VAR_287 == ( TYPE_53 * ) VAR_288 ) ) { if ( VAR_289 == ( TYPE_54 * ) VAR_290 ) VAR_291 = ( TYPE_55 * ) METHOD_47 ( VAR_292 ) ; if ( VAR_293 == ( TYPE_56 * ) VAR_294 ) VAR_295 = ( TYPE_57 * ) METHOD_48 ( VAR_296 ) ; if ( VAR_297 == ( TYPE_58 * ) VAR_298 ) VAR_299 = METHOD_49 ( VAR_300 ) ; METHOD_50 ( VAR_301 , ""MemoryAllocationFailed"" ) ; } VAR_302 = ( unsigned TYPE_59 * ) METHOD_51 ( VAR_303 ) ; for ( VAR_304 = 0 ; VAR_305 < ( TYPE_60 ) ( VAR_306 . VAR_307 * VAR_308 . VAR_309 ) ; VAR_310 ++ ) VAR_311 [ VAR_312 ] = METHOD_52 ( VAR_313 ) ; for ( VAR_314 = 0 ; VAR_315 < ( TYPE_61 ) ( VAR_316 . VAR_317 * VAR_318 . VAR_319 ) ; VAR_320 ++ ) { VAR_321 [ VAR_322 ] = METHOD_53 ( VAR_323 ) ; if ( VAR_324 [ VAR_325 ] > ( 4 * ( TYPE_62 ) VAR_326 . VAR_327 + 10 ) ) METHOD_54 ( VAR_328 , ""ImproperImageHeader"" ) ; } VAR_329 = 0 ; VAR_330 = 0 ; for ( VAR_331 = 0 ; ( ( VAR_332 < ( TYPE_63 ) VAR_333 . VAR_334 ) && ( VAR_335 == 0 ) ) ; VAR_336 ++ ) for ( VAR_337 = 0 ; ( ( VAR_338 < ( TYPE_64 ) VAR_339 . VAR_340 ) && ( VAR_341 == 0 ) ) ; VAR_342 ++ ) { if ( VAR_343 [ VAR_344 + VAR_345 * VAR_346 . VAR_347 ] < VAR_348 ) VAR_349 = 1 ; VAR_350 = VAR_351 [ VAR_352 + VAR_353 * VAR_354 . VAR_355 ] ; } VAR_356 = ( TYPE_65 ) METHOD_55 ( VAR_357 ) ; if ( VAR_358 == 1 ) { for ( VAR_359 = 0 ; VAR_360 < ( TYPE_66 ) VAR_361 . VAR_362 ; VAR_363 ++ ) { VAR_364 = VAR_365 ; for ( VAR_366 = 0 ; VAR_367 < ( TYPE_67 ) VAR_368 . VAR_369 ; VAR_370 ++ ) { if ( VAR_371 != VAR_372 [ VAR_373 + VAR_374 * VAR_375 . VAR_376 ] ) { VAR_377 = VAR_378 [ VAR_379 + VAR_380 * VAR_381 . VAR_382 ] ; VAR_383 = ( TYPE_68 ) METHOD_56 ( VAR_384 , ( TYPE_69 ) VAR_385 , VAR_386 ) ; } VAR_387 = METHOD_57 ( VAR_388 , ( TYPE_70 ) VAR_389 [ VAR_390 + VAR_391 * VAR_392 . VAR_393 ] , VAR_394 ) ; if ( METHOD_58 ( VAR_395 ) != VAR_396 ) break ; VAR_397 += ( TYPE_71 ) VAR_398 [ VAR_399 + VAR_400 * VAR_401 . VAR_402 ] ; VAR_403 = METHOD_59 ( VAR_404 , ( TYPE_72 ) ( VAR_405 [ VAR_406 + VAR_407 * VAR_408 . VAR_409 ] / VAR_410 ) , VAR_411 , 1L * VAR_412 . VAR_413 , VAR_414 + VAR_415 * VAR_416 ) ; if ( VAR_417 == VAR_418 ) METHOD_60 ( VAR_419 , ""ImproperImageHeader"" ) ; VAR_420 += ( VAR_421 . VAR_422 * 4 * VAR_423 ) ; } } } else { TYPE_73 VAR_424 ; VAR_425 = METHOD_61 ( VAR_426 ) ; VAR_427 = VAR_428 ; for ( VAR_429 = 0 ; VAR_430 < ( TYPE_74 ) VAR_431 . VAR_432 ; VAR_433 ++ ) { for ( VAR_434 = 0 ; VAR_435 < ( TYPE_75 ) VAR_436 . VAR_437 ; VAR_438 ++ ) { if ( VAR_439 != VAR_440 [ VAR_441 + VAR_442 * VAR_443 . VAR_444 ] ) { VAR_445 = VAR_446 [ VAR_447 + VAR_448 * VAR_449 . VAR_450 ] ; VAR_451 = ( TYPE_76 ) METHOD_62 ( VAR_452 , ( TYPE_77 ) VAR_453 , VAR_454 ) ; } VAR_455 = METHOD_63 ( VAR_456 , ( TYPE_78 ) VAR_457 [ VAR_458 + VAR_459 * VAR_460 . VAR_461 ] , VAR_462 ) ; if ( METHOD_64 ( VAR_463 ) != VAR_464 ) break ; VAR_465 += ( TYPE_79 ) VAR_466 [ VAR_467 + VAR_468 * VAR_469 . VAR_470 ] ; VAR_471 = METHOD_65 ( VAR_472 , ( TYPE_80 ) ( VAR_473 [ VAR_474 + VAR_475 * VAR_476 . VAR_477 ] / VAR_478 ) , VAR_479 , 1L * VAR_480 . VAR_481 , VAR_482 + VAR_483 * VAR_484 ) ; if ( VAR_485 == VAR_486 ) METHOD_66 ( VAR_487 , ""ImproperImageHeader"" ) ; } VAR_488 += ( VAR_489 . VAR_490 * 4 * VAR_491 ) ; } VAR_492 = ( TYPE_81 ) METHOD_67 ( VAR_493 , VAR_494 , VAR_495 ) ; } VAR_496 = METHOD_68 ( VAR_497 ) ; VAR_498 = ( TYPE_82 * ) METHOD_69 ( VAR_499 ) ; VAR_500 = ( TYPE_83 * ) METHOD_70 ( VAR_501 ) ; } VAR_502 -> VAR_503 = VAR_504 . VAR_505 == 4 ? VAR_506 : VAR_507 ; VAR_508 -> VAR_509 = VAR_510 . VAR_511 ; VAR_512 -> VAR_513 = VAR_514 . VAR_515 ; if ( VAR_516 -> VAR_517 == VAR_518 ) { if ( VAR_519 == 2 ) { for ( VAR_520 = 0 ; VAR_521 < ( TYPE_84 ) VAR_522 -> VAR_523 ; VAR_524 ++ ) { VAR_525 = VAR_526 + ( VAR_527 -> VAR_528 - VAR_529 - 1 ) * 8 * VAR_530 -> VAR_531 ; VAR_532 = METHOD_71 ( VAR_533 , 0 , VAR_534 , VAR_535 -> VAR_536 , 1 , VAR_537 ) ; if ( VAR_538 == ( TYPE_85 * ) VAR_539 ) break ; for ( VAR_540 = 0 ; VAR_541 < ( TYPE_86 ) VAR_542 -> VAR_543 ; VAR_544 ++ ) { METHOD_72 ( VAR_545 , METHOD_73 ( ( unsigned TYPE_87 ) ( ( * ( VAR_546 + 0 ) << 8 ) | ( * ( VAR_547 + 1 ) ) ) ) , VAR_548 ) ; METHOD_74 ( VAR_549 , METHOD_75 ( ( unsigned TYPE_88 ) ( ( * ( VAR_550 + 2 ) << 8 ) | ( * ( VAR_551 + 3 ) ) ) ) , VAR_552 ) ; METHOD_76 ( VAR_553 , METHOD_77 ( ( unsigned TYPE_89 ) ( ( * ( VAR_554 + 4 ) << 8 ) | ( * ( VAR_555 + 5 ) ) ) ) , VAR_556 ) ; METHOD_78 ( VAR_557 , VAR_558 , VAR_559 ) ; if ( VAR_560 -> VAR_561 != VAR_562 ) METHOD_79 ( VAR_563 , METHOD_80 ( ( unsigned TYPE_90 ) ( ( * ( VAR_564 + 6 ) << 8 ) | ( * ( VAR_565 + 7 ) ) ) ) , VAR_566 ) ; VAR_567 += 8 ; VAR_568 += METHOD_81 ( VAR_569 ) ; } if ( METHOD_82 ( VAR_570 , VAR_571 ) == VAR_572 ) break ; if ( VAR_573 -> VAR_574 == ( TYPE_91 * ) VAR_575 ) { VAR_576 = METHOD_83 ( VAR_577 , VAR_578 , ( TYPE_92 ) VAR_579 , VAR_580 -> VAR_581 ) ; if ( VAR_582 == VAR_583 ) break ; } } } else for ( VAR_584 = 0 ; VAR_585 < ( TYPE_93 ) VAR_586 -> VAR_587 ; VAR_588 ++ ) { VAR_589 = VAR_590 + ( VAR_591 -> VAR_592 - VAR_593 - 1 ) * 4 * VAR_594 -> VAR_595 ; VAR_596 = METHOD_84 ( VAR_597 , 0 , VAR_598 , VAR_599 -> VAR_600 , 1 , VAR_601 ) ; if ( VAR_602 == ( TYPE_94 * ) VAR_603 ) break ; for ( VAR_604 = 0 ; VAR_605 < ( TYPE_95 ) VAR_606 -> VAR_607 ; VAR_608 ++ ) { METHOD_85 ( VAR_609 , METHOD_86 ( * VAR_610 ) , VAR_611 ) ; METHOD_87 ( VAR_612 , METHOD_88 ( * ( VAR_613 + 1 ) ) , VAR_614 ) ; METHOD_89 ( VAR_615 , METHOD_90 ( * ( VAR_616 + 2 ) ) , VAR_617 ) ; METHOD_91 ( VAR_618 , VAR_619 , VAR_620 ) ; if ( VAR_621 -> VAR_622 != VAR_623 ) METHOD_92 ( VAR_624 , METHOD_93 ( * ( VAR_625 + 3 ) ) , VAR_626 ) ; VAR_627 += 4 ; VAR_628 += METHOD_94 ( VAR_629 ) ; } if ( METHOD_95 ( VAR_630 , VAR_631 ) == VAR_632 ) break ; if ( VAR_633 -> VAR_634 == ( TYPE_96 * ) VAR_635 ) { VAR_636 = METHOD_96 ( VAR_637 , VAR_638 , ( TYPE_97 ) VAR_639 , VAR_640 -> VAR_641 ) ; if ( VAR_642 == VAR_643 ) break ; } } } else { if ( METHOD_97 ( VAR_644 , VAR_645 -> VAR_646 , VAR_647 ) == VAR_648 ) METHOD_98 ( VAR_649 , ""MemoryAllocationFailed"" ) ; if ( VAR_650 == 2 ) { for ( VAR_651 = 0 ; VAR_652 < ( TYPE_98 ) VAR_653 -> VAR_654 ; VAR_655 ++ ) { VAR_656 = VAR_657 + ( VAR_658 -> VAR_659 - VAR_660 - 1 ) * 8 * VAR_661 -> VAR_662 ; VAR_663 = METHOD_99 ( VAR_664 , 0 , VAR_665 , VAR_666 -> VAR_667 , 1 , VAR_668 ) ; if ( VAR_669 == ( TYPE_99 * ) VAR_670 ) break ; for ( VAR_671 = 0 ; VAR_672 < ( TYPE_100 ) VAR_673 -> VAR_674 ; VAR_675 ++ ) { VAR_676 = ( * VAR_677 << 8 ) ; VAR_678 |= ( * ( VAR_679 + 1 ) ) ; METHOD_100 ( VAR_680 , ( TYPE_101 ) VAR_681 , VAR_682 ) ; VAR_683 += 8 ; VAR_684 += METHOD_101 ( VAR_685 ) ; } if ( METHOD_102 ( VAR_686 , VAR_687 ) == VAR_688 ) break ; if ( VAR_689 -> VAR_690 == ( TYPE_102 * ) VAR_691 ) { VAR_692 = METHOD_103 ( VAR_693 , VAR_694 , ( TYPE_103 ) VAR_695 , VAR_696 -> VAR_697 ) ; if ( VAR_698 == VAR_699 ) break ; } } } else for ( VAR_700 = 0 ; VAR_701 < ( TYPE_104 ) VAR_702 -> VAR_703 ; VAR_704 ++ ) { VAR_705 = VAR_706 + ( VAR_707 -> VAR_708 - VAR_709 - 1 ) * 4 * VAR_710 -> VAR_711 ; VAR_712 = METHOD_104 ( VAR_713 , 0 , VAR_714 , VAR_715 -> VAR_716 , 1 , VAR_717 ) ; if ( VAR_718 == ( TYPE_105 * ) VAR_719 ) break ; for ( VAR_720 = 0 ; VAR_721 < ( TYPE_106 ) VAR_722 -> VAR_723 ; VAR_724 ++ ) { METHOD_105 ( VAR_725 , * VAR_726 , VAR_727 ) ; VAR_728 += 4 ; VAR_729 += METHOD_106 ( VAR_730 ) ; } if ( METHOD_107 ( VAR_731 , VAR_732 ) == VAR_733 ) break ; if ( VAR_734 -> VAR_735 == ( TYPE_107 * ) VAR_736 ) { VAR_737 = METHOD_108 ( VAR_738 , VAR_739 , ( TYPE_108 ) VAR_740 , VAR_741 -> VAR_742 ) ; if ( VAR_743 == VAR_744 ) break ; } } ( TYPE_109 ) METHOD_109 ( VAR_745 , VAR_746 ) ; } VAR_747 = METHOD_110 ( VAR_748 ) ; if ( METHOD_111 ( VAR_749 ) != VAR_750 ) { METHOD_112 ( VAR_751 , VAR_752 , ""UnexpectedEndOfFile"" , VAR_753 -> VAR_754 ) ; break ; } if ( VAR_755 -> VAR_756 != 0 ) if ( VAR_757 -> VAR_758 >= ( VAR_759 -> VAR_760 + VAR_761 -> VAR_762 - 1 ) ) break ; VAR_763 . VAR_764 = METHOD_113 ( VAR_765 ) ; if ( VAR_766 . VAR_767 == 0x01DA ) { METHOD_114 ( VAR_768 , VAR_769 , VAR_770 ) ; if ( METHOD_115 ( VAR_771 ) == ( TYPE_110 * ) VAR_772 ) { VAR_773 = METHOD_116 ( VAR_774 ) ; return ( ( TYPE_111 * ) VAR_775 ) ; } VAR_776 = METHOD_117 ( VAR_777 ) ; VAR_778 = METHOD_118 ( VAR_779 , VAR_780 , METHOD_119 ( VAR_781 ) , METHOD_120 ( VAR_782 ) ) ; if ( VAR_783 == VAR_784 ) break ; } } while ( VAR_785 . VAR_786 == 0x01DA ) ; ( TYPE_112 ) METHOD_121 ( VAR_787 ) ; return ( METHOD_122 ( VAR_788 ) ) ; }",555
556,"TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 = ( TYPE_2 ) STRUCT_OR_UNION_3 -> VAR_2 . VAR_3 [ VAR_4 ] ; METHOD_1 ( VAR_5 , STRUCT_OR_UNION_4 -> VAR_6 ) ;  if ( METHOD_2 ( STRUCT_OR_UNION_5 ) )  METHOD_3 ( VAR_7 , "":%zu[%s]"" , VAR_8 , VAR_9 > VAR_10 ? ""file"" : ""buff"" ) ; }","TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 = ( TYPE_2 ) STRUCT_OR_UNION_3 -> VAR_2 . VAR_3 [ VAR_4 ] ; METHOD_1 ( VAR_5 , STRUCT_OR_UNION_4 -> VAR_6 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_5 ) ) METHOD_3 ( VAR_7 , "":%zu[%s]"" , VAR_8 , VAR_9 > VAR_10 ? ""file"" : ""buff"" ) ; }",556
557,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 -> VAR_2 . VAR_3 . VAR_4 = 1 ; VAR_5 -> VAR_6 . VAR_7 . VAR_8 = 1 ;  METHOD_1 ( VAR_9 -> VAR_10 . VAR_11 . VAR_12 , 0 , sizeof ( VAR_13 -> VAR_14 . VAR_15 . VAR_16 ) ) ;   METHOD_2 ( VAR_17 -> VAR_18 . VAR_19 . VAR_20 , 0 , sizeof ( VAR_21 -> VAR_22 . VAR_23 . VAR_24 ) ) ;  VAR_25 -> VAR_26 . VAR_27 . VAR_28 [ VAR_29 ] = 2 ; VAR_30 -> VAR_31 . VAR_32 . VAR_33 [ VAR_34 ] = 0 ; VAR_35 -> VAR_36 . VAR_37 . VAR_38 [ VAR_39 ] = - 2 ; VAR_40 -> VAR_41 . VAR_42 . VAR_43 [ VAR_44 ] = - 2 ; VAR_45 -> VAR_46 . VAR_47 . VAR_48 [ 0 ] = 4 ; if ( VAR_49 -> VAR_50 . VAR_51 == VAR_52 ) VAR_53 -> VAR_54 . VAR_55 . VAR_56 [ 1 ] = - 12 ; else VAR_57 -> VAR_58 . VAR_59 . VAR_60 [ 1 ] = - 2 ; VAR_61 -> VAR_62 . VAR_63 . VAR_64 [ 2 ] = 2 ; VAR_65 -> VAR_66 . VAR_67 . VAR_68 [ 3 ] = 4 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { VAR_1 -> VAR_2 . VAR_3 . VAR_4 = 1 ; VAR_5 -> VAR_6 . VAR_7 . VAR_8 = 1 ; METHOD_1 ( VAR_9 -> VAR_10 . VAR_11 . VAR_12 , 0 , sizeof ( VAR_13 -> VAR_14 . VAR_15 . VAR_16 ) ) ; METHOD_2 ( VAR_17 -> VAR_18 . VAR_19 . VAR_20 , 0 , sizeof ( VAR_21 -> VAR_22 . VAR_23 . VAR_24 ) ) ; VAR_25 -> VAR_26 . VAR_27 . VAR_28 [ VAR_29 ] = 2 ; VAR_30 -> VAR_31 . VAR_32 . VAR_33 [ VAR_34 ] = 0 ; VAR_35 -> VAR_36 . VAR_37 . VAR_38 [ VAR_39 ] = - 2 ; VAR_40 -> VAR_41 . VAR_42 . VAR_43 [ VAR_44 ] = - 2 ; VAR_45 -> VAR_46 . VAR_47 . VAR_48 [ 0 ] = 4 ; if ( VAR_49 -> VAR_50 . VAR_51 == VAR_52 ) VAR_53 -> VAR_54 . VAR_55 . VAR_56 [ 1 ] = - 12 ; else VAR_57 -> VAR_58 . VAR_59 . VAR_60 [ 1 ] = - 2 ; VAR_61 -> VAR_62 . VAR_63 . VAR_64 [ 2 ] = 2 ; VAR_65 -> VAR_66 . VAR_67 . VAR_68 [ 3 ] = 4 ; }",557
558,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_2 ( VAR_7 ) ; TYPE_2 VAR_8 = 0 ; TYPE_3 VAR_9 ; VAR_10 -> VAR_11 . VAR_12 = 0 ; switch ( VAR_13 -> VAR_14 ) { case VAR_15 : goto VAR_16 ; case VAR_17 : if ( VAR_18 -> VAR_19 ) return 1 ; if ( VAR_20 -> VAR_21 ) goto VAR_22 ; if ( VAR_23 -> VAR_24 ) {  if ( VAR_25 -> VAR_26 -> METHOD_3 ( VAR_27 , VAR_28 ) < 0 )  return 1 ; METHOD_4 ( VAR_29 ) ; return 0 ; } goto VAR_30 ; case VAR_31 : VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 ) ; if ( VAR_37 >= 0 ) return VAR_38 ; METHOD_6 ( VAR_39 , VAR_40 , VAR_41 ) ; METHOD_7 ( VAR_42 ) ; METHOD_8 ( VAR_43 ) ; return 0 ; } VAR_44 = METHOD_9 ( VAR_45 , VAR_46 , VAR_47 , 0 ) ; if ( VAR_48 <= 0 ) return - VAR_49 ; if ( VAR_50 -> VAR_51 ) { TYPE_4 VAR_52 = METHOD_10 ( VAR_53 , VAR_54 , VAR_55 ) > 0 ; switch ( VAR_56 -> VAR_57 ) { case VAR_58 : if ( VAR_59 ) { VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_11 ( ) ; METHOD_12 ( VAR_64 , VAR_65 ) ; VAR_66 -> METHOD_13 ( VAR_67 ) ; if ( VAR_68 -> VAR_69 ) METHOD_14 ( VAR_70 , VAR_71 , VAR_72 ) ; VAR_73 -> VAR_74 = METHOD_15 ( VAR_75 ) -> VAR_76 ; VAR_77 -> VAR_78 = METHOD_16 ( VAR_79 -> VAR_80 ) << VAR_81 -> VAR_82 . VAR_83 ; METHOD_17 ( VAR_84 , METHOD_18 ( VAR_85 ) -> VAR_86 ) ; if ( VAR_87 -> VAR_88 . VAR_89 ) VAR_90 -> VAR_91 -= VAR_92 ; VAR_93 -> VAR_94 -> METHOD_19 ( VAR_95 ) ; METHOD_20 ( VAR_96 ) ; METHOD_21 ( VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 ; METHOD_22 ( VAR_101 ) ; METHOD_23 ( VAR_102 ) ; METHOD_24 ( VAR_103 ) ; METHOD_25 ( VAR_104 ) ; } else { return 1 ; } break ; case VAR_105 : if ( VAR_106 -> VAR_107 == VAR_108 -> VAR_109 ) { METHOD_26 ( VAR_110 , VAR_111 ) ; VAR_112 -> VAR_113 |= VAR_114 ; METHOD_27 ( METHOD_28 ( VAR_115 ) ) ; if ( ! METHOD_29 ( VAR_116 , VAR_117 ) ) VAR_118 -> METHOD_30 ( VAR_119 ) ; else { TYPE_5 VAR_120 ; if ( VAR_121 -> VAR_122 < 0 || ( METHOD_31 ( VAR_123 ) -> VAR_124 != METHOD_32 ( VAR_125 ) -> VAR_126 && METHOD_33 ( METHOD_34 ( VAR_127 ) -> VAR_128 - VAR_129 -> VAR_130 , VAR_131 -> VAR_132 ) ) ) { METHOD_35 ( VAR_133 ) ; METHOD_36 ( METHOD_37 ( VAR_134 ) , VAR_135 ) ; return 1 ; } VAR_136 = METHOD_38 ( VAR_137 ) ; if ( VAR_138 > VAR_139 ) { METHOD_39 ( VAR_140 , VAR_141 - VAR_142 ) ; } else if ( VAR_143 -> VAR_144 || METHOD_40 ( VAR_145 ) ) { METHOD_41 ( VAR_146 , VAR_147 ) ; } else { METHOD_42 ( VAR_148 , VAR_149 , VAR_150 ) ; goto VAR_151 ; } } } break ; case VAR_152 : if ( VAR_153 -> VAR_154 == VAR_155 -> VAR_156 ) { METHOD_43 ( VAR_157 , VAR_158 , 0 ) ; goto VAR_159 ; } break ; case VAR_160 : if ( VAR_161 -> VAR_162 == VAR_163 -> VAR_164 ) { METHOD_44 ( VAR_165 ) ; METHOD_45 ( VAR_166 ) ; goto VAR_167 ; } break ; } } else goto VAR_168 ; METHOD_46 ( VAR_169 , VAR_170 , VAR_171 ) ; switch ( VAR_172 -> VAR_173 ) { case VAR_174 : case VAR_175 : case VAR_176 : if ( ! METHOD_47 ( METHOD_48 ( VAR_177 ) -> VAR_178 , VAR_179 -> VAR_180 ) ) break ; case VAR_181 : case VAR_182 : if ( VAR_183 -> VAR_184 & VAR_185 ) { if ( METHOD_49 ( VAR_186 ) -> VAR_187 != METHOD_50 ( VAR_188 ) -> VAR_189 && METHOD_51 ( METHOD_52 ( VAR_190 ) -> VAR_191 - VAR_192 -> VAR_193 , VAR_194 -> VAR_195 ) ) { METHOD_53 ( METHOD_54 ( VAR_196 ) , VAR_197 ) ; METHOD_55 ( VAR_198 ) ; return 1 ; } } case VAR_199 : METHOD_56 ( VAR_200 , VAR_201 ) ; VAR_202 = 1 ; break ; } if ( VAR_203 -> VAR_204 != VAR_205 ) { METHOD_57 ( VAR_206 ) ; METHOD_58 ( VAR_207 ) ; } if ( ! VAR_208 ) { VAR_209 : METHOD_59 ( VAR_210 ) ; } return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , const struct STRUCT_OR_UNION_2 * VAR_2 , unsigned TYPE_1 VAR_3 ) { struct STRUCT_OR_UNION_3 * VAR_4 = METHOD_1 ( VAR_5 ) ; struct STRUCT_OR_UNION_4 * VAR_6 = METHOD_2 ( VAR_7 ) ; TYPE_2 VAR_8 = 0 ; TYPE_3 VAR_9 ; VAR_10 -> VAR_11 . VAR_12 = 0 ; switch ( VAR_13 -> VAR_14 ) { case VAR_15 : goto VAR_16 ; case VAR_17 : if ( VAR_18 -> VAR_19 ) return 1 ; if ( VAR_20 -> VAR_21 ) goto VAR_22 ; if ( VAR_23 -> VAR_24 ) { if ( VAR_192 -> VAR_193 ) goto VAR_209 ; if ( VAR_25 -> VAR_26 -> METHOD_3 ( VAR_27 , VAR_28 ) < 0 ) return 1 ; METHOD_4 ( VAR_29 ) ; return 0 ; } goto VAR_30 ; case VAR_31 : VAR_32 = METHOD_5 ( VAR_33 , VAR_34 , VAR_35 , VAR_36 ) ; if ( VAR_37 >= 0 ) return VAR_38 ; METHOD_6 ( VAR_39 , VAR_40 , VAR_41 ) ; METHOD_7 ( VAR_42 ) ; METHOD_8 ( VAR_43 ) ; return 0 ; } VAR_44 = METHOD_9 ( VAR_45 , VAR_46 , VAR_47 , 0 ) ; if ( VAR_48 <= 0 ) return - VAR_49 ; if ( VAR_50 -> VAR_51 ) { TYPE_4 VAR_52 = METHOD_10 ( VAR_53 , VAR_54 , VAR_55 ) > 0 ; switch ( VAR_56 -> VAR_57 ) { case VAR_58 : if ( VAR_59 ) { VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_11 ( ) ; METHOD_12 ( VAR_64 , VAR_65 ) ; VAR_66 -> METHOD_13 ( VAR_67 ) ; if ( VAR_68 -> VAR_69 ) METHOD_14 ( VAR_70 , VAR_71 , VAR_72 ) ; VAR_73 -> VAR_74 = METHOD_15 ( VAR_75 ) -> VAR_76 ; VAR_77 -> VAR_78 = METHOD_16 ( VAR_79 -> VAR_80 ) << VAR_81 -> VAR_82 . VAR_83 ; METHOD_17 ( VAR_84 , METHOD_18 ( VAR_85 ) -> VAR_86 ) ; if ( VAR_87 -> VAR_88 . VAR_89 ) VAR_90 -> VAR_91 -= VAR_92 ; VAR_93 -> VAR_94 -> METHOD_19 ( VAR_95 ) ; METHOD_20 ( VAR_96 ) ; METHOD_21 ( VAR_97 ) ; VAR_98 -> VAR_99 = VAR_100 ; METHOD_22 ( VAR_101 ) ; METHOD_23 ( VAR_102 ) ; METHOD_24 ( VAR_103 ) ; METHOD_25 ( VAR_104 ) ; } else { return 1 ; } break ; case VAR_105 : if ( VAR_106 -> VAR_107 == VAR_108 -> VAR_109 ) { METHOD_26 ( VAR_110 , VAR_111 ) ; VAR_112 -> VAR_113 |= VAR_114 ; METHOD_27 ( METHOD_28 ( VAR_115 ) ) ; if ( ! METHOD_29 ( VAR_116 , VAR_117 ) ) VAR_118 -> METHOD_30 ( VAR_119 ) ; else { TYPE_5 VAR_120 ; if ( VAR_121 -> VAR_122 < 0 || ( METHOD_31 ( VAR_123 ) -> VAR_124 != METHOD_32 ( VAR_125 ) -> VAR_126 && METHOD_33 ( METHOD_34 ( VAR_127 ) -> VAR_128 - VAR_129 -> VAR_130 , VAR_131 -> VAR_132 ) ) ) { METHOD_35 ( VAR_133 ) ; METHOD_36 ( METHOD_37 ( VAR_134 ) , VAR_135 ) ; return 1 ; } VAR_136 = METHOD_38 ( VAR_137 ) ; if ( VAR_138 > VAR_139 ) { METHOD_39 ( VAR_140 , VAR_141 - VAR_142 ) ; } else if ( VAR_143 -> VAR_144 || METHOD_40 ( VAR_145 ) ) { METHOD_41 ( VAR_146 , VAR_147 ) ; } else { METHOD_42 ( VAR_148 , VAR_149 , VAR_150 ) ; goto VAR_151 ; } } } break ; case VAR_152 : if ( VAR_153 -> VAR_154 == VAR_155 -> VAR_156 ) { METHOD_43 ( VAR_157 , VAR_158 , 0 ) ; goto VAR_159 ; } break ; case VAR_160 : if ( VAR_161 -> VAR_162 == VAR_163 -> VAR_164 ) { METHOD_44 ( VAR_165 ) ; METHOD_45 ( VAR_166 ) ; goto VAR_167 ; } break ; } } else goto VAR_168 ; METHOD_46 ( VAR_169 , VAR_170 , VAR_171 ) ; switch ( VAR_172 -> VAR_173 ) { case VAR_174 : case VAR_175 : case VAR_176 : if ( ! METHOD_47 ( METHOD_48 ( VAR_177 ) -> VAR_178 , VAR_179 -> VAR_180 ) ) break ; case VAR_181 : case VAR_182 : if ( VAR_183 -> VAR_184 & VAR_185 ) { if ( METHOD_49 ( VAR_186 ) -> VAR_187 != METHOD_50 ( VAR_188 ) -> VAR_189 && METHOD_51 ( METHOD_52 ( VAR_190 ) -> VAR_191 - VAR_192 -> VAR_193 , VAR_194 -> VAR_195 ) ) { METHOD_53 ( METHOD_54 ( VAR_196 ) , VAR_197 ) ; METHOD_55 ( VAR_198 ) ; return 1 ; } } case VAR_199 : METHOD_56 ( VAR_200 , VAR_201 ) ; VAR_202 = 1 ; break ; } if ( VAR_203 -> VAR_204 != VAR_205 ) { METHOD_57 ( VAR_206 ) ; METHOD_58 ( VAR_207 ) ; } if ( ! VAR_208 ) { VAR_209 : METHOD_59 ( VAR_210 ) ; } return 0 ; }",558
559,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ;  TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ;  if ( VAR_19 == 32 ) { METHOD_4 ( VAR_20 , 4 ) ; METHOD_5 ( & VAR_21 , 4 ) ; } VAR_22 = VAR_23 . VAR_24 ; VAR_25 = VAR_26 . VAR_27 ; VAR_28 = VAR_29 . VAR_30 ; VAR_31 = VAR_32 . VAR_33 ; VAR_34 = METHOD_6 ( VAR_35 . VAR_36 ) ; VAR_37 = METHOD_7 ( VAR_38 -> VAR_39 ) ; if ( ( VAR_40 && ( VAR_41 != VAR_42 || VAR_43 != VAR_44 ) ) || VAR_45 > VAR_46 || VAR_47 > VAR_48 ) { METHOD_8 ( VAR_49 ) ; return 0 ; } if ( ! VAR_50 && VAR_51 != VAR_52 && VAR_53 != VAR_54 && VAR_55 != VAR_56 ) { METHOD_9 ( VAR_57 ) ; return 0 ; } switch ( VAR_58 ) { case VAR_59 :  if ( METHOD_10 ( VAR_60 -> VAR_61 , VAR_62 ) ||  METHOD_11 ( VAR_63 -> VAR_64 , VAR_65 ) ) { VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; } else { VAR_72 -> VAR_73 += VAR_74 ; VAR_75 -> VAR_76 += VAR_77 ; } if ( VAR_78 -> VAR_79 + VAR_80 < VAR_81 || VAR_82 -> VAR_83 + VAR_84 < VAR_85 ) { VAR_86 -> VAR_87 = 0 ; VAR_88 -> VAR_89 = VAR_90 ; } else { VAR_91 -> VAR_92 += VAR_93 ; VAR_94 -> VAR_95 += VAR_96 ; } VAR_97 -> VAR_98 = METHOD_12 ( VAR_99 -> VAR_100 , VAR_101 . VAR_102 ) ; break ; case VAR_103 :  if ( METHOD_13 ( VAR_104 -> VAR_105 , VAR_106 ) ||  METHOD_14 ( VAR_107 -> VAR_108 , VAR_109 ) ) { VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = VAR_115 ; } else { VAR_116 -> VAR_117 -= VAR_118 ; VAR_119 -> VAR_120 -= VAR_121 ; } if ( VAR_122 -> VAR_123 < VAR_124 ) { VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = VAR_129 ; } else { VAR_130 -> VAR_131 -= VAR_132 ; VAR_133 -> VAR_134 -= VAR_135 ; } VAR_136 -> VAR_137 = METHOD_15 ( VAR_138 -> VAR_139 , VAR_140 . VAR_141 ) ; break ; case VAR_142 : VAR_143 -> VAR_144 = METHOD_16 ( VAR_145 -> VAR_146 , VAR_147 . VAR_148 ) ; if ( VAR_149 < 0 || VAR_150 -> VAR_151 < 0 ) { METHOD_17 ( VAR_152 ) ; METHOD_18 ( VAR_153 ) ; break ; } if ( VAR_154 > VAR_155 || VAR_156 -> VAR_157 > VAR_158 ) { METHOD_19 ( VAR_159 ) ; METHOD_20 ( VAR_160 ) ; break ; } VAR_161 -> VAR_162 *= VAR_163 ; VAR_164 -> VAR_165 *= VAR_166 ; if ( VAR_167 -> VAR_168 > VAR_169 ) { VAR_170 -> VAR_171 = VAR_172 ; VAR_173 -> VAR_174 = VAR_175 ; } else { VAR_176 -> VAR_177 = VAR_178 -> VAR_179 ; VAR_180 -> VAR_181 = VAR_182 -> VAR_183 ; } break ; case VAR_184 : if ( VAR_185 && VAR_186 ) { METHOD_21 ( VAR_187 , VAR_188 -> VAR_189 . VAR_190 & VAR_191 . VAR_192 . VAR_193 ) ; break ; } VAR_194 -> VAR_195 = METHOD_22 ( VAR_196 -> VAR_197 , VAR_198 . VAR_199 ) ; VAR_200 -> VAR_201 = VAR_202 -> VAR_203 . VAR_204 ; VAR_205 -> VAR_206 = METHOD_23 ( VAR_207 -> VAR_208 , VAR_209 ) ; if ( VAR_210 -> VAR_211 < 0 || VAR_212 < 0 ) { VAR_213 -> VAR_214 = VAR_215 ; VAR_216 -> VAR_217 = VAR_218 ; } else { VAR_219 -> VAR_220 = VAR_221 -> VAR_222 ; VAR_223 -> VAR_224 = VAR_225 -> VAR_226 ; } METHOD_24 ( VAR_227 ) ; break ; case VAR_228 : if ( VAR_229 && VAR_230 ) { METHOD_25 ( VAR_231 , VAR_232 -> VAR_233 . VAR_234 | VAR_235 . VAR_236 . VAR_237 ) ; break ; } VAR_238 -> VAR_239 = METHOD_26 ( VAR_240 -> VAR_241 , VAR_242 . VAR_243 ) ; VAR_244 -> VAR_245 = METHOD_27 ( VAR_246 -> VAR_247 , VAR_248 ) ; VAR_249 -> VAR_250 = VAR_251 -> VAR_252 . VAR_253 | VAR_254 -> VAR_255 . VAR_256 ; if ( VAR_257 -> VAR_258 < 0 || VAR_259 < 0 ) { VAR_260 -> VAR_261 = VAR_262 ; VAR_263 -> VAR_264 = VAR_265 ; } else { VAR_266 -> VAR_267 = VAR_268 -> VAR_269 ; VAR_270 -> VAR_271 = VAR_272 -> VAR_273 ; } METHOD_28 ( VAR_274 ) ; break ; case VAR_275 : if ( VAR_276 >= VAR_277 ) { METHOD_29 ( VAR_278 , VAR_279 , VAR_280 -> VAR_281 ) ; break ; } VAR_282 -> VAR_283 = VAR_284 ; VAR_285 -> VAR_286 = VAR_287 ; if ( VAR_288 -> VAR_289 > 1ULL << ( 63 - VAR_290 ) ) { VAR_291 -> VAR_292 = 0 ; VAR_293 -> VAR_294 = VAR_295 ; } else { VAR_296 -> VAR_297 <<= VAR_298 ; VAR_299 -> VAR_300 <<= VAR_301 ; } VAR_302 -> VAR_303 = METHOD_30 ( VAR_304 -> VAR_305 , VAR_306 ) ; METHOD_31 ( VAR_307 ) ; break ; case VAR_308 : if ( VAR_309 >= VAR_310 ) { METHOD_32 ( VAR_311 , VAR_312 , VAR_313 -> VAR_314 ) ; break ; } VAR_315 -> VAR_316 = VAR_317 ; VAR_318 -> VAR_319 = VAR_320 ; VAR_321 -> VAR_322 = METHOD_33 ( VAR_323 -> VAR_324 , VAR_325 ) ; VAR_326 -> VAR_327 >>= VAR_328 ; VAR_329 -> VAR_330 >>= VAR_331 ; METHOD_34 ( VAR_332 ) ; break ; case VAR_333 : if ( VAR_334 >= VAR_335 ) { METHOD_35 ( VAR_336 , VAR_337 , VAR_338 -> VAR_339 ) ; break ; } VAR_340 -> VAR_341 >>= VAR_342 ; VAR_343 -> VAR_344 >>= VAR_345 ; VAR_346 -> VAR_347 = METHOD_36 ( VAR_348 -> VAR_349 , VAR_350 ) ; VAR_351 -> VAR_352 = 0 ; VAR_353 -> VAR_354 = VAR_355 ; METHOD_37 ( VAR_356 ) ; break ; default : METHOD_38 ( VAR_357 , VAR_358 , VAR_359 -> VAR_360 ) ; break ; } if ( METHOD_39 ( VAR_361 -> VAR_362 ) != VAR_363 ) { METHOD_40 ( VAR_364 , 4 ) ; } METHOD_41 ( VAR_365 ) ; METHOD_42 ( VAR_366 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; TYPE_1 VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 ) ; TYPE_2 VAR_9 , VAR_10 ; TYPE_3 VAR_11 , VAR_12 ; TYPE_4 VAR_13 , VAR_14 ; TYPE_5 VAR_15 = ( METHOD_3 ( VAR_16 -> VAR_17 ) == VAR_18 ) ? 64 : 32 ; TYPE_6 VAR_367 = VAR_361 -> VAR_366 ; TYPE_0 VAR_368 ; if ( VAR_19 == 32 ) { METHOD_4 ( VAR_20 , 4 ) ; METHOD_5 ( & VAR_21 , 4 ) ; } VAR_22 = VAR_23 . VAR_24 ; VAR_25 = VAR_26 . VAR_27 ; VAR_28 = VAR_29 . VAR_30 ; VAR_31 = VAR_32 . VAR_33 ; VAR_34 = METHOD_6 ( VAR_35 . VAR_36 ) ; VAR_37 = METHOD_7 ( VAR_38 -> VAR_39 ) ; if ( ( VAR_40 && ( VAR_41 != VAR_42 || VAR_43 != VAR_44 ) ) || VAR_45 > VAR_46 || VAR_47 > VAR_48 ) { METHOD_8 ( VAR_49 ) ; return 0 ; } if ( ! VAR_50 && VAR_51 != VAR_52 && VAR_53 != VAR_54 && VAR_55 != VAR_56 ) { METHOD_9 ( VAR_57 ) ; return 0 ; } switch ( VAR_58 ) { case VAR_59 : VAR_368 = METHOD_43 ( VAR_357 , VAR_361 ) ; if ( VAR_368 < 0 ) { METHOD_44 ( VAR_357 , ""R%dtriedtoaddfromdifferentpointersorscalars\\n"" , VAR_367 ) ; return VAR_368 ; } if ( METHOD_10 ( VAR_60 -> VAR_61 , VAR_62 ) || METHOD_11 ( VAR_63 -> VAR_64 , VAR_65 ) ) { VAR_66 -> VAR_67 = VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; } else { VAR_72 -> VAR_73 += VAR_74 ; VAR_75 -> VAR_76 += VAR_77 ; } if ( VAR_78 -> VAR_79 + VAR_80 < VAR_81 || VAR_82 -> VAR_83 + VAR_84 < VAR_85 ) { VAR_86 -> VAR_87 = 0 ; VAR_88 -> VAR_89 = VAR_90 ; } else { VAR_91 -> VAR_92 += VAR_93 ; VAR_94 -> VAR_95 += VAR_96 ; } VAR_97 -> VAR_98 = METHOD_12 ( VAR_99 -> VAR_100 , VAR_101 . VAR_102 ) ; break ; case VAR_103 : VAR_368 = METHOD_43 ( VAR_357 , VAR_361 ) ; if ( VAR_368 < 0 ) { METHOD_44 ( VAR_357 , ""R%dtriedtosubfromdifferentpointersorscalars\\n"" , VAR_367 ) ; return VAR_368 ; } if ( METHOD_13 ( VAR_104 -> VAR_105 , VAR_106 ) || METHOD_14 ( VAR_107 -> VAR_108 , VAR_109 ) ) { VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = VAR_115 ; } else { VAR_116 -> VAR_117 -= VAR_118 ; VAR_119 -> VAR_120 -= VAR_121 ; } if ( VAR_122 -> VAR_123 < VAR_124 ) { VAR_125 -> VAR_126 = 0 ; VAR_127 -> VAR_128 = VAR_129 ; } else { VAR_130 -> VAR_131 -= VAR_132 ; VAR_133 -> VAR_134 -= VAR_135 ; } VAR_136 -> VAR_137 = METHOD_15 ( VAR_138 -> VAR_139 , VAR_140 . VAR_141 ) ; break ; case VAR_142 : VAR_143 -> VAR_144 = METHOD_16 ( VAR_145 -> VAR_146 , VAR_147 . VAR_148 ) ; if ( VAR_149 < 0 || VAR_150 -> VAR_151 < 0 ) { METHOD_17 ( VAR_152 ) ; METHOD_18 ( VAR_153 ) ; break ; } if ( VAR_154 > VAR_155 || VAR_156 -> VAR_157 > VAR_158 ) { METHOD_19 ( VAR_159 ) ; METHOD_20 ( VAR_160 ) ; break ; } VAR_161 -> VAR_162 *= VAR_163 ; VAR_164 -> VAR_165 *= VAR_166 ; if ( VAR_167 -> VAR_168 > VAR_169 ) { VAR_170 -> VAR_171 = VAR_172 ; VAR_173 -> VAR_174 = VAR_175 ; } else { VAR_176 -> VAR_177 = VAR_178 -> VAR_179 ; VAR_180 -> VAR_181 = VAR_182 -> VAR_183 ; } break ; case VAR_184 : if ( VAR_185 && VAR_186 ) { METHOD_21 ( VAR_187 , VAR_188 -> VAR_189 . VAR_190 & VAR_191 . VAR_192 . VAR_193 ) ; break ; } VAR_194 -> VAR_195 = METHOD_22 ( VAR_196 -> VAR_197 , VAR_198 . VAR_199 ) ; VAR_200 -> VAR_201 = VAR_202 -> VAR_203 . VAR_204 ; VAR_205 -> VAR_206 = METHOD_23 ( VAR_207 -> VAR_208 , VAR_209 ) ; if ( VAR_210 -> VAR_211 < 0 || VAR_212 < 0 ) { VAR_213 -> VAR_214 = VAR_215 ; VAR_216 -> VAR_217 = VAR_218 ; } else { VAR_219 -> VAR_220 = VAR_221 -> VAR_222 ; VAR_223 -> VAR_224 = VAR_225 -> VAR_226 ; } METHOD_24 ( VAR_227 ) ; break ; case VAR_228 : if ( VAR_229 && VAR_230 ) { METHOD_25 ( VAR_231 , VAR_232 -> VAR_233 . VAR_234 | VAR_235 . VAR_236 . VAR_237 ) ; break ; } VAR_238 -> VAR_239 = METHOD_26 ( VAR_240 -> VAR_241 , VAR_242 . VAR_243 ) ; VAR_244 -> VAR_245 = METHOD_27 ( VAR_246 -> VAR_247 , VAR_248 ) ; VAR_249 -> VAR_250 = VAR_251 -> VAR_252 . VAR_253 | VAR_254 -> VAR_255 . VAR_256 ; if ( VAR_257 -> VAR_258 < 0 || VAR_259 < 0 ) { VAR_260 -> VAR_261 = VAR_262 ; VAR_263 -> VAR_264 = VAR_265 ; } else { VAR_266 -> VAR_267 = VAR_268 -> VAR_269 ; VAR_270 -> VAR_271 = VAR_272 -> VAR_273 ; } METHOD_28 ( VAR_274 ) ; break ; case VAR_275 : if ( VAR_276 >= VAR_277 ) { METHOD_29 ( VAR_278 , VAR_279 , VAR_280 -> VAR_281 ) ; break ; } VAR_282 -> VAR_283 = VAR_284 ; VAR_285 -> VAR_286 = VAR_287 ; if ( VAR_288 -> VAR_289 > 1ULL << ( 63 - VAR_290 ) ) { VAR_291 -> VAR_292 = 0 ; VAR_293 -> VAR_294 = VAR_295 ; } else { VAR_296 -> VAR_297 <<= VAR_298 ; VAR_299 -> VAR_300 <<= VAR_301 ; } VAR_302 -> VAR_303 = METHOD_30 ( VAR_304 -> VAR_305 , VAR_306 ) ; METHOD_31 ( VAR_307 ) ; break ; case VAR_308 : if ( VAR_309 >= VAR_310 ) { METHOD_32 ( VAR_311 , VAR_312 , VAR_313 -> VAR_314 ) ; break ; } VAR_315 -> VAR_316 = VAR_317 ; VAR_318 -> VAR_319 = VAR_320 ; VAR_321 -> VAR_322 = METHOD_33 ( VAR_323 -> VAR_324 , VAR_325 ) ; VAR_326 -> VAR_327 >>= VAR_328 ; VAR_329 -> VAR_330 >>= VAR_331 ; METHOD_34 ( VAR_332 ) ; break ; case VAR_333 : if ( VAR_334 >= VAR_335 ) { METHOD_35 ( VAR_336 , VAR_337 , VAR_338 -> VAR_339 ) ; break ; } VAR_340 -> VAR_341 >>= VAR_342 ; VAR_343 -> VAR_344 >>= VAR_345 ; VAR_346 -> VAR_347 = METHOD_36 ( VAR_348 -> VAR_349 , VAR_350 ) ; VAR_351 -> VAR_352 = 0 ; VAR_353 -> VAR_354 = VAR_355 ; METHOD_37 ( VAR_356 ) ; break ; default : METHOD_38 ( VAR_357 , VAR_358 , VAR_359 -> VAR_360 ) ; break ; } if ( METHOD_39 ( VAR_361 -> VAR_362 ) != VAR_363 ) { METHOD_40 ( VAR_364 , 4 ) ; } METHOD_41 ( VAR_365 ) ; METHOD_42 ( VAR_366 ) ; return 0 ; }",559
560," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 )  { TYPE_1 VAR_1 [ ] = { 0x51 } ; TYPE_2 VAR_2 [ ] = { 0 } ;  if ( METHOD_1 ( VAR_3 -> VAR_4 , VAR_5 , 1 , VAR_6 , 1 , 0 ) < 0 )  METHOD_2 ( ""command0x51transferfailed."" ) ;  VAR_7 -> VAR_8 [ 0 ] . VAR_9 = METHOD_3 ( VAR_10 , & VAR_11 ,   & VAR_12 -> VAR_13 -> VAR_14 ) ;   if ( VAR_15 -> VAR_16 [ 0 ] . VAR_17 == VAR_18 )  return - VAR_19 ;  if ( METHOD_4 ( VAR_20 , VAR_21 -> VAR_22 [ 0 ] . VAR_23 ,  & VAR_24 ,  & VAR_25 -> VAR_26 -> VAR_27 ) ) {  METHOD_5 ( ""AttachedRS2000/TS2020!"" ) ; return 0 ; } METHOD_6 ( ""FailedtoattachRS2000/TS2020!"" ) ; return - VAR_28 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_29 ) { struct STRUCT_OR_UNION_1 * VAR_25 = VAR_29 -> VAR_26 ; struct STRUCT_OR_UNION_2 * VAR_30 = VAR_25 -> VAR_31 ; METHOD_7 ( & VAR_25 -> VAR_32 ) ; VAR_30 -> VAR_33 [ 0 ] = 0x51 ; if ( METHOD_1 ( VAR_3 -> VAR_4 , VAR_5 , 1 , VAR_30 -> VAR_33 , 1 , 0 ) < 0 ) METHOD_2 ( ""command0x51transferfailed."" ) ; METHOD_8 ( & VAR_25 -> VAR_32 ) ; VAR_29 -> VAR_22 [ 0 ] . VAR_23 , & VAR_24 , & VAR_25 -> VAR_26 -> VAR_27 ) ) { METHOD_5 ( ""AttachedRS2000/TS2020!"" ) ; return 0 ; } METHOD_6 ( ""FailedtoattachRS2000/TS2020!"" ) ; return - VAR_28 ; }",560
561,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  if ( ! VAR_1 -> VAR_2 . VAR_3 )  return - VAR_4 ; VAR_5 -> VAR_6 . VAR_7 = VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { if ( ! VAR_1 -> VAR_2 . VAR_3 ) return - VAR_4 ; VAR_5 -> VAR_6 . VAR_7 = VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ; return 0 ; }",561
562,"TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 ) { switch ( VAR_3 ) { case VAR_4 : VAR_5 -> VAR_6 = * ( const TYPE_4 * ) VAR_7 ; return 0 ; case VAR_8 : VAR_9 -> VAR_10 = * ( const TYPE_5 * ) VAR_11 ; return 0 ; case VAR_12 : VAR_13 -> VAR_14 = * ( const TYPE_6 * ) VAR_15 ; return 0 ; case VAR_16 : VAR_17 -> VAR_18 = * ( const TYPE_7 * ) VAR_19 ; return 0 ;  default :  VAR_20 = VAR_21 ; return - 1 ; } }","TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 ) { switch ( VAR_3 ) { case VAR_4 : VAR_5 -> VAR_6 = * ( const TYPE_4 * ) VAR_7 ; return 0 ; case VAR_22 : VAR_17 -> VAR_23 = * ( const TYPE_7 * ) VAR_19 ; return 0 ; case VAR_8 : VAR_9 -> VAR_10 = * ( const TYPE_5 * ) VAR_11 ; return 0 ; case VAR_12 : VAR_13 -> VAR_14 = * ( const TYPE_6 * ) VAR_15 ; return 0 ; case VAR_16 : VAR_17 -> VAR_18 = * ( const TYPE_7 * ) VAR_19 ; return 0 ; default : VAR_20 = VAR_21 ; return - 1 ; } }",562
563,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 ; if ( VAR_4 -> VAR_5 -> METHOD_1 ( VAR_6 , 3 , VAR_7 -> VAR_8 ) ) return METHOD_2 ( VAR_9 , 0 ) ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 | 2 ; * METHOD_3 ( VAR_18 , VAR_19 ) = VAR_20 -> VAR_21 ; * METHOD_4 ( VAR_22 , VAR_23 ) = VAR_24 -> VAR_25 ; * METHOD_5 ( VAR_26 , VAR_27 ) = VAR_28 -> VAR_29 ; * METHOD_6 ( VAR_30 , VAR_31 ) = VAR_32 -> VAR_33 ; * METHOD_7 ( VAR_34 , VAR_35 ) = VAR_36 -> VAR_37 ; * METHOD_8 ( VAR_38 , VAR_39 ) = VAR_40 -> VAR_41 ; * METHOD_9 ( VAR_42 , VAR_43 ) = VAR_44 -> VAR_45 ; * METHOD_10 ( VAR_46 , VAR_47 ) = VAR_48 -> VAR_49 ; METHOD_11 ( VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) ; METHOD_12 ( VAR_54 , VAR_55 -> VAR_56 , VAR_57 ) ; METHOD_13 ( VAR_58 , VAR_59 -> VAR_60 , VAR_61 ) ; METHOD_14 ( VAR_62 , VAR_63 -> VAR_64 , VAR_65 ) ; METHOD_15 ( VAR_66 , VAR_67 -> VAR_68 , VAR_69 ) ; METHOD_16 ( VAR_70 , VAR_71 -> VAR_72 , VAR_73 ) ; METHOD_17 ( VAR_74 , VAR_75 -> VAR_76 , VAR_77 ) ; if ( VAR_78 -> VAR_79 & VAR_80 ) { VAR_81 -> VAR_82 = VAR_83 ; VAR_84 = 3 ; } else { VAR_85 -> VAR_86 = VAR_87 ; VAR_88 = VAR_89 -> VAR_90 & 3 ; }  VAR_91 = METHOD_18 ( VAR_92 , VAR_93 -> VAR_94 , VAR_95 , VAR_96 , VAR_97 ) ;  if ( VAR_98 != VAR_99 ) return VAR_100 ;  VAR_101 = METHOD_19 ( VAR_102 , VAR_103 -> VAR_104 , VAR_105 , VAR_106 , VAR_107 ) ;  if ( VAR_108 != VAR_109 ) return VAR_110 ;  VAR_111 = METHOD_20 ( VAR_112 , VAR_113 -> VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ;  if ( VAR_118 != VAR_119 ) return VAR_120 ;  VAR_121 = METHOD_21 ( VAR_122 , VAR_123 -> VAR_124 , VAR_125 , VAR_126 , VAR_127 ) ;  if ( VAR_128 != VAR_129 ) return VAR_130 ;  VAR_131 = METHOD_22 ( VAR_132 , VAR_133 -> VAR_134 , VAR_135 , VAR_136 , VAR_137 ) ;  if ( VAR_138 != VAR_139 ) return VAR_140 ;  VAR_141 = METHOD_23 ( VAR_142 , VAR_143 -> VAR_144 , VAR_145 , VAR_146 , VAR_147 ) ;  if ( VAR_148 != VAR_149 ) return VAR_150 ;  VAR_151 = METHOD_24 ( VAR_152 , VAR_153 -> VAR_154 , VAR_155 , VAR_156 , VAR_157 ) ;  if ( VAR_158 != VAR_159 ) return VAR_160 ; return VAR_161 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; TYPE_2 VAR_3 ; if ( VAR_4 -> VAR_5 -> METHOD_1 ( VAR_6 , 3 , VAR_7 -> VAR_8 ) ) return METHOD_2 ( VAR_9 , 0 ) ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 ; VAR_14 -> VAR_15 = VAR_16 -> VAR_17 | 2 ; * METHOD_3 ( VAR_18 , VAR_19 ) = VAR_20 -> VAR_21 ; * METHOD_4 ( VAR_22 , VAR_23 ) = VAR_24 -> VAR_25 ; * METHOD_5 ( VAR_26 , VAR_27 ) = VAR_28 -> VAR_29 ; * METHOD_6 ( VAR_30 , VAR_31 ) = VAR_32 -> VAR_33 ; * METHOD_7 ( VAR_34 , VAR_35 ) = VAR_36 -> VAR_37 ; * METHOD_8 ( VAR_38 , VAR_39 ) = VAR_40 -> VAR_41 ; * METHOD_9 ( VAR_42 , VAR_43 ) = VAR_44 -> VAR_45 ; * METHOD_10 ( VAR_46 , VAR_47 ) = VAR_48 -> VAR_49 ; METHOD_11 ( VAR_50 , VAR_51 -> VAR_52 , VAR_53 ) ; METHOD_12 ( VAR_54 , VAR_55 -> VAR_56 , VAR_57 ) ; METHOD_13 ( VAR_58 , VAR_59 -> VAR_60 , VAR_61 ) ; METHOD_14 ( VAR_62 , VAR_63 -> VAR_64 , VAR_65 ) ; METHOD_15 ( VAR_66 , VAR_67 -> VAR_68 , VAR_69 ) ; METHOD_16 ( VAR_70 , VAR_71 -> VAR_72 , VAR_73 ) ; METHOD_17 ( VAR_74 , VAR_75 -> VAR_76 , VAR_77 ) ; if ( VAR_78 -> VAR_79 & VAR_80 ) { VAR_81 -> VAR_82 = VAR_83 ; VAR_84 = 3 ; } else { VAR_85 -> VAR_86 = VAR_87 ; VAR_88 = VAR_89 -> VAR_90 & 3 ; } VAR_91 = METHOD_18 ( VAR_92 , VAR_93 -> VAR_94 , VAR_95 , VAR_156 , VAR_157 , VAR_162 ) ; if ( VAR_98 != VAR_99 ) return VAR_100 ; VAR_101 = METHOD_19 ( VAR_102 , VAR_103 -> VAR_104 , VAR_105 , VAR_106 , VAR_107 ) ; if ( VAR_108 != VAR_109 ) return VAR_110 ; VAR_111 = METHOD_20 ( VAR_112 , VAR_113 -> VAR_114 , VAR_115 , VAR_116 , VAR_117 ) ; if ( VAR_118 != VAR_119 ) return VAR_120 ; VAR_121 = METHOD_21 ( VAR_122 , VAR_123 -> VAR_124 , VAR_125 , VAR_126 , VAR_127 ) ; if ( VAR_128 != VAR_129 ) return VAR_130 ; VAR_131 = METHOD_22 ( VAR_132 , VAR_133 -> VAR_134 , VAR_135 , VAR_136 , VAR_137 ) ; if ( VAR_138 != VAR_139 ) return VAR_140 ; VAR_141 = METHOD_23 ( VAR_142 , VAR_143 -> VAR_144 , VAR_145 , VAR_146 , VAR_147 ) ; if ( VAR_148 != VAR_149 ) return VAR_150 ; VAR_151 = METHOD_24 ( VAR_152 , VAR_153 -> VAR_154 , VAR_155 , VAR_156 , VAR_157 , VAR_162 ) ; if ( VAR_158 != VAR_159 ) return VAR_160 ; return VAR_161 ; }",563
564,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , enum VAR_1 VAR_2 ) { switch ( VAR_3 ) { case VAR_4 :  METHOD_1 ( & ( ( struct STRUCT_OR_UNION_0 * ) VAR_5 ) -> VAR_6 -> VAR_7 ) ;  break ; case VAR_8 :  METHOD_2 ( VAR_9 , VAR_10 ) ;  break ; default : METHOD_3 ( 1 ) ; break ; } return VAR_11 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , enum VAR_1 VAR_2 ) { switch ( VAR_3 ) { case VAR_4 : VAR_11 = METHOD_4 ( VAR_11 ) ; break ; case VAR_8 : VAR_11 = METHOD_2 ( VAR_9 , VAR_10 ) ; break ; default : METHOD_3 ( 1 ) ; break ; } return VAR_11 ; }",564
565,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 , VAR_7 ; TYPE_8 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; struct STRUCT_OR_UNION_0 * VAR_12 ; TYPE_9 * VAR_13 ; TYPE_10 * VAR_14 ; TYPE_11 VAR_15 [ 2 ] ;  signed TYPE_12 VAR_16 ;  if ( ! VAR_17 ) VAR_18 = & VAR_19 ; VAR_20 = METHOD_1 ( VAR_21 , VAR_22 ) ; if ( VAR_23 < 0 ) { METHOD_2 ( ""failedtogettheinitpid"" ) ; return - 1 ; } VAR_24 = METHOD_3 ( VAR_25 ) ; if ( ! VAR_26 ) { METHOD_4 ( ""failedtogetcontextoftheinitprocess,pid=%ld"" , ( TYPE_13 ) VAR_27 ) ; return - 1 ; } VAR_28 = METHOD_5 ( VAR_29 , VAR_30 ) ; if ( VAR_31 -> VAR_32 < 0 ) { METHOD_6 ( ""Failedtogetpersonalityofthecontainer"" ) ; METHOD_7 ( VAR_33 ) ; return - 1 ; } VAR_34 -> VAR_35 = VAR_36 ; if ( ! METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ) METHOD_9 ( ""Failedtogetseccomppolicy"" ) ; VAR_41 = METHOD_10 ( VAR_42 , 0 ) ; if ( VAR_43 -> VAR_44 == - 1 ) { VAR_45 -> VAR_46 = METHOD_11 ( VAR_47 , VAR_48 ) ; if ( VAR_49 -> VAR_50 == - 1 ) { METHOD_12 ( ""failedtoautomaticallydeterminethe"" ""namespaceswhichthecontainerunshared"" ) ; METHOD_13 ( VAR_51 ) ; METHOD_14 ( VAR_52 ) ; return - 1 ; } } VAR_53 = METHOD_15 ( VAR_54 , VAR_55 | VAR_56 , 0 , VAR_57 ) ; if ( VAR_58 < 0 ) { METHOD_16 ( ""couldnotsetuprequiredIPCmechanismforattaching"" ) ; METHOD_17 ( VAR_59 ) ; METHOD_18 ( VAR_60 ) ; return - 1 ; } VAR_61 = METHOD_19 ( ) ; if ( VAR_62 < 0 ) { METHOD_20 ( ""failedtocreatefirstsubprocess"" ) ; METHOD_21 ( VAR_63 ) ; METHOD_22 ( VAR_64 ) ; return - 1 ; } if ( VAR_65 ) { TYPE_14 VAR_66 = VAR_67 ; METHOD_23 ( VAR_68 [ 1 ] ) ; METHOD_24 ( VAR_69 ) ; if ( VAR_70 -> VAR_71 & VAR_72 ) { if ( ! METHOD_25 ( VAR_73 , VAR_74 , VAR_75 ) ) goto VAR_76 ; } VAR_77 = 0 ; VAR_78 = METHOD_26 ( VAR_79 [ 0 ] , & VAR_80 , sizeof ( VAR_81 ) ) ; if ( VAR_82 <= 0 ) { METHOD_27 ( ""errorusingIPCtonotifyattachedprocessforinitialization(0)"" ) ; goto VAR_83 ; } VAR_84 = METHOD_28 ( VAR_85 [ 0 ] , & VAR_86 , sizeof ( VAR_87 ) , VAR_88 ) ; if ( VAR_89 <= 0 ) { if ( VAR_90 != 0 ) METHOD_29 ( ""errorusingIPCtoreceivepidofattachedprocess"" ) ; goto VAR_91 ; } if ( VAR_92 -> VAR_93 == 0 ) { METHOD_30 ( VAR_94 , VAR_95 ) ; METHOD_31 ( VAR_96 , VAR_97 ) ; } VAR_98 = METHOD_32 ( VAR_99 ) ; if ( VAR_100 < 0 ) goto VAR_101 ; VAR_102 = VAR_103 ; VAR_104 = 0 ; VAR_105 = METHOD_33 ( VAR_106 [ 0 ] , & VAR_107 , sizeof ( VAR_108 ) ) ; if ( VAR_109 <= 0 ) { METHOD_34 ( ""errorusingIPCtonotifyattachedprocessforinitialization(0)"" ) ; goto VAR_110 ; } VAR_111 = 1 ; VAR_112 = METHOD_35 ( VAR_113 [ 0 ] , & VAR_114 , sizeof ( VAR_115 ) , & VAR_116 ) ; if ( VAR_117 <= 0 ) { if ( VAR_118 != 0 ) METHOD_36 ( ""errorusingIPCtoreceivenotificationfromattachedprocess(1)"" ) ; goto VAR_119 ; } VAR_120 = 2 ; VAR_121 = METHOD_37 ( VAR_122 [ 0 ] , & VAR_123 , sizeof ( VAR_124 ) ) ; if ( VAR_125 <= 0 ) { METHOD_38 ( ""errorusingIPCtonotifyattachedprocessforinitialization(2)"" ) ; goto VAR_126 ; } METHOD_39 ( VAR_127 [ 0 ] , VAR_128 ) ; METHOD_40 ( VAR_129 [ 0 ] ) ; METHOD_41 ( VAR_130 ) ; * VAR_131 = VAR_132 ; return 0 ; VAR_133 : METHOD_42 ( VAR_134 [ 0 ] , VAR_135 ) ; METHOD_43 ( VAR_136 [ 0 ] ) ; if ( VAR_137 ) ( TYPE_15 ) METHOD_44 ( VAR_138 ) ; METHOD_45 ( VAR_139 ) ; return - 1 ; } METHOD_46 ( VAR_140 [ 0 ] ) ; VAR_141 = 0 ; VAR_142 = - 1 ; VAR_143 = METHOD_47 ( VAR_144 [ 1 ] , & VAR_145 , sizeof ( VAR_146 ) , & VAR_147 ) ; if ( VAR_148 <= 0 ) { METHOD_48 ( ""errorcommunicatingwithchildprocess"" ) ; METHOD_49 ( VAR_149 [ 1 ] , VAR_150 ) ; METHOD_50 ( - 1 ) ; }  VAR_151 = METHOD_51 ( VAR_152 , VAR_153 -> VAR_154 ) ;  if ( VAR_155 < 0 ) { METHOD_52 ( ""failedtoenterthenamespace"" ) ; METHOD_53 ( VAR_156 [ 1 ] , VAR_157 ) ; METHOD_54 ( - 1 ) ; } if ( VAR_158 -> VAR_159 ) VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 = VAR_164 ; VAR_165 = METHOD_55 ( VAR_166 ) ; if ( VAR_167 < 0 ) METHOD_56 ( ""couldnotchangedirectoryto\'%s\'"" , VAR_168 ) ; METHOD_57 ( VAR_169 ) ; { struct STRUCT_OR_UNION_1 VAR_170 = { . VAR_171 = VAR_172 [ 1 ] , . VAR_173 = VAR_174 , . VAR_175 = VAR_176 , . VAR_177 = VAR_178 ,  . VAR_179 = VAR_180  } ; VAR_181 = METHOD_58 ( VAR_182 , & VAR_183 , VAR_184 ) ; } if ( VAR_185 <= 0 ) { METHOD_59 ( ""failedtocreatesubprocess"" ) ; METHOD_60 ( VAR_186 [ 1 ] , VAR_187 ) ; METHOD_61 ( - 1 ) ; } VAR_188 = METHOD_62 ( VAR_189 [ 1 ] , & VAR_190 , sizeof ( VAR_191 ) ) ; if ( VAR_192 != sizeof ( VAR_193 ) ) { METHOD_63 ( ""errorusingIPCtonotifymainprocessofpidoftheattachedprocess"" ) ; METHOD_64 ( VAR_194 [ 1 ] , VAR_195 ) ; METHOD_65 ( - 1 ) ; } METHOD_66 ( 0 ) ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { TYPE_7 VAR_6 , VAR_7 ; TYPE_8 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; struct STRUCT_OR_UNION_0 * VAR_12 ; TYPE_9 * VAR_13 ; TYPE_10 * VAR_14 ; TYPE_11 VAR_15 [ 2 ] ; TYPE_11 VAR_196 ; signed TYPE_12 VAR_16 ; if ( ! VAR_17 ) VAR_18 = & VAR_19 ; VAR_20 = METHOD_1 ( VAR_21 , VAR_22 ) ; if ( VAR_23 < 0 ) { METHOD_2 ( ""failedtogettheinitpid"" ) ; return - 1 ; } VAR_24 = METHOD_3 ( VAR_25 ) ; if ( ! VAR_26 ) { METHOD_4 ( ""failedtogetcontextoftheinitprocess,pid=%ld"" , ( TYPE_13 ) VAR_27 ) ; return - 1 ; } VAR_28 = METHOD_5 ( VAR_29 , VAR_30 ) ; if ( VAR_31 -> VAR_32 < 0 ) { METHOD_6 ( ""Failedtogetpersonalityofthecontainer"" ) ; METHOD_7 ( VAR_33 ) ; return - 1 ; } VAR_34 -> VAR_35 = VAR_36 ; if ( ! METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ) METHOD_9 ( ""Failedtogetseccomppolicy"" ) ; VAR_41 = METHOD_10 ( VAR_42 , 0 ) ; if ( VAR_43 -> VAR_44 == - 1 ) { VAR_45 -> VAR_46 = METHOD_11 ( VAR_47 , VAR_48 ) ; if ( VAR_49 -> VAR_50 == - 1 ) { METHOD_12 ( ""failedtoautomaticallydeterminethe"" ""namespaceswhichthecontainerunshared"" ) ; METHOD_13 ( VAR_51 ) ; METHOD_14 ( VAR_52 ) ; return - 1 ; } } VAR_53 = METHOD_15 ( VAR_54 , VAR_55 | VAR_56 , 0 , VAR_57 ) ; if ( VAR_58 < 0 ) { METHOD_16 ( ""couldnotsetuprequiredIPCmechanismforattaching"" ) ; METHOD_17 ( VAR_59 ) ; METHOD_18 ( VAR_60 ) ; return - 1 ; } VAR_61 = METHOD_19 ( ) ; if ( VAR_62 < 0 ) { METHOD_20 ( ""failedtocreatefirstsubprocess"" ) ; METHOD_21 ( VAR_63 ) ; METHOD_22 ( VAR_64 ) ; return - 1 ; } if ( VAR_65 ) { TYPE_14 VAR_66 = VAR_67 ; METHOD_23 ( VAR_68 [ 1 ] ) ; METHOD_24 ( VAR_69 ) ; if ( VAR_70 -> VAR_71 & VAR_72 ) { if ( ! METHOD_25 ( VAR_73 , VAR_74 , VAR_75 ) ) goto VAR_76 ; } VAR_77 = 0 ; VAR_78 = METHOD_26 ( VAR_79 [ 0 ] , & VAR_80 , sizeof ( VAR_81 ) ) ; if ( VAR_82 <= 0 ) { METHOD_27 ( ""errorusingIPCtonotifyattachedprocessforinitialization(0)"" ) ; goto VAR_83 ; } VAR_84 = METHOD_28 ( VAR_85 [ 0 ] , & VAR_86 , sizeof ( VAR_87 ) , VAR_88 ) ; if ( VAR_89 <= 0 ) { if ( VAR_90 != 0 ) METHOD_29 ( ""errorusingIPCtoreceivepidofattachedprocess"" ) ; goto VAR_91 ; } if ( VAR_92 -> VAR_93 == 0 ) { METHOD_30 ( VAR_94 , VAR_95 ) ; METHOD_31 ( VAR_96 , VAR_97 ) ; } VAR_196 = METHOD_67 ( ""/proc"" , VAR_197 | VAR_198 ) ; if ( VAR_196 < 0 ) { METHOD_59 ( ""Unabletoopen/proc"" ) ; METHOD_64 ( VAR_194 [ 1 ] , VAR_195 ) ; METHOD_66 ( - 1 ) ; } VAR_98 = METHOD_32 ( VAR_99 ) ; if ( VAR_100 < 0 ) goto VAR_101 ; VAR_102 = VAR_103 ; VAR_104 = 0 ; VAR_105 = METHOD_33 ( VAR_106 [ 0 ] , & VAR_107 , sizeof ( VAR_108 ) ) ; if ( VAR_109 <= 0 ) { METHOD_34 ( ""errorusingIPCtonotifyattachedprocessforinitialization(0)"" ) ; goto VAR_110 ; } VAR_111 = 1 ; VAR_112 = METHOD_35 ( VAR_113 [ 0 ] , & VAR_114 , sizeof ( VAR_115 ) , & VAR_116 ) ; if ( VAR_117 <= 0 ) { if ( VAR_118 != 0 ) METHOD_36 ( ""errorusingIPCtoreceivenotificationfromattachedprocess(1)"" ) ; goto VAR_119 ; } VAR_120 = 2 ; VAR_121 = METHOD_37 ( VAR_122 [ 0 ] , & VAR_123 , sizeof ( VAR_124 ) ) ; if ( VAR_125 <= 0 ) { METHOD_38 ( ""errorusingIPCtonotifyattachedprocessforinitialization(2)"" ) ; goto VAR_126 ; } METHOD_39 ( VAR_127 [ 0 ] , VAR_128 ) ; METHOD_40 ( VAR_129 [ 0 ] ) ; METHOD_41 ( VAR_130 ) ; * VAR_131 = VAR_132 ; return 0 ; VAR_133 : METHOD_42 ( VAR_134 [ 0 ] , VAR_135 ) ; METHOD_43 ( VAR_136 [ 0 ] ) ; if ( VAR_137 ) ( TYPE_15 ) METHOD_44 ( VAR_138 ) ; METHOD_45 ( VAR_139 ) ; return - 1 ; } METHOD_46 ( VAR_140 [ 0 ] ) ; VAR_141 = 0 ; VAR_142 = - 1 ; VAR_143 = METHOD_47 ( VAR_144 [ 1 ] , & VAR_145 , sizeof ( VAR_146 ) , & VAR_147 ) ; if ( VAR_148 <= 0 ) { METHOD_48 ( ""errorcommunicatingwithchildprocess"" ) ; METHOD_49 ( VAR_149 [ 1 ] , VAR_150 ) ; METHOD_50 ( - 1 ) ; } VAR_151 = METHOD_51 ( VAR_152 , VAR_153 -> VAR_154 ) ; if ( VAR_155 < 0 ) { METHOD_52 ( ""failedtoenterthenamespace"" ) ; METHOD_53 ( VAR_156 [ 1 ] , VAR_157 ) ; METHOD_54 ( - 1 ) ; } if ( VAR_158 -> VAR_159 ) VAR_160 = VAR_161 -> VAR_162 ; else VAR_163 = VAR_164 ; VAR_165 = METHOD_55 ( VAR_166 ) ; if ( VAR_167 < 0 ) METHOD_56 ( ""couldnotchangedirectoryto\'%s\'"" , VAR_168 ) ; METHOD_57 ( VAR_169 ) ; { struct STRUCT_OR_UNION_1 VAR_170 = { . VAR_171 = VAR_172 [ 1 ] , . VAR_173 = VAR_174 , . VAR_175 = VAR_176 , . VAR_177 = VAR_178 , . VAR_179 = VAR_180 } ; VAR_181 = METHOD_58 ( VAR_182 , & VAR_183 , VAR_184 ) ; } if ( VAR_185 <= 0 ) { METHOD_59 ( ""failedtocreatesubprocess"" ) ; METHOD_60 ( VAR_186 [ 1 ] , VAR_187 ) ; METHOD_61 ( - 1 ) ; } VAR_188 = METHOD_62 ( VAR_189 [ 1 ] , & VAR_190 , sizeof ( VAR_191 ) ) ; if ( VAR_192 != sizeof ( VAR_193 ) ) { METHOD_63 ( ""errorusingIPCtonotifymainprocessofpidoftheattachedprocess"" ) ; METHOD_64 ( VAR_194 [ 1 ] , VAR_195 ) ; METHOD_65 ( - 1 ) ; } METHOD_66 ( 0 ) ; }",565
566,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 ; struct STRUCT_OR_UNION_8 * VAR_9 ; TYPE_3 VAR_10 ; unsigned TYPE_4 VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; if ( METHOD_2 ( ! VAR_14 ) ) return - VAR_15 ; METHOD_3 ( VAR_16 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_9 -> VAR_17 == VAR_18 ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; }  VAR_22 = METHOD_5 ( VAR_23 , VAR_24 & VAR_25 ) ;  VAR_26 : while ( METHOD_6 ( & VAR_27 -> VAR_28 ) ) { if ( STRUCT_OR_UNION_10 -> VAR_29 == VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( VAR_34 <= 0L ) { VAR_35 = VAR_36 ? VAR_37 : - VAR_38 ; goto VAR_39 ; } METHOD_7 ( VAR_40 ) ; VAR_41 = METHOD_8 ( * METHOD_9 ( VAR_42 ) , METHOD_10 ( STRUCT_OR_UNION_11 ) , VAR_43 ) ; METHOD_11 ( VAR_44 ) ; } VAR_45 = METHOD_12 ( & VAR_46 -> VAR_47 ) ; VAR_48 = METHOD_13 ( VAR_49 ) ; VAR_50 = METHOD_14 ( VAR_51 ) ; VAR_52 = METHOD_15 ( VAR_53 ) ; if ( ( ! VAR_54 ) && ( ! VAR_55 ) ) { METHOD_16 ( VAR_56 ) ; goto VAR_57 ; } METHOD_17 ( VAR_58 , VAR_59 ) ; VAR_60 = METHOD_18 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 ) goto VAR_65 ; if ( ! VAR_66 ) { if ( METHOD_19 ( VAR_67 < VAR_68 ) ) { VAR_69 = VAR_70 ; VAR_71 -> VAR_72 |= VAR_73 ; } VAR_74 = METHOD_20 ( VAR_75 , METHOD_21 ( VAR_76 ) , VAR_77 -> VAR_78 , VAR_79 ) ; if ( VAR_80 ) goto VAR_81 ; VAR_82 = VAR_83 ; } else { if ( ( STRUCT_OR_UNION_12 -> VAR_84 == VAR_85 ) || ( ( VAR_86 == VAR_87 ) || VAR_88 -> VAR_89 ) ) VAR_90 = 0 ; else VAR_91 = - VAR_92 ; } if ( METHOD_22 ( ! ( VAR_93 & VAR_94 ) ) ) { if ( ( STRUCT_OR_UNION_13 -> VAR_95 != VAR_96 ) && ( ++ VAR_97 -> VAR_98 >= VAR_99 ) ) METHOD_23 ( VAR_100 -> VAR_101 , VAR_102 -> VAR_103 ) ; METHOD_24 ( VAR_104 ) ; } VAR_105 : METHOD_25 ( VAR_106 ) ; return VAR_107 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_7 * VAR_8 ; struct STRUCT_OR_UNION_8 * VAR_9 ; TYPE_3 VAR_10 ; unsigned TYPE_4 VAR_11 ; TYPE_5 VAR_12 ; TYPE_6 VAR_13 ; if ( METHOD_2 ( ! VAR_14 ) ) return - VAR_15 ; METHOD_3 ( VAR_16 ) ; if ( METHOD_4 ( STRUCT_OR_UNION_9 -> VAR_17 == VAR_18 ) ) { VAR_19 = - VAR_20 ; goto VAR_21 ; } VAR_22 = METHOD_5 ( VAR_23 , VAR_24 & VAR_25 ) ; VAR_26 : while ( METHOD_6 ( & VAR_27 -> VAR_28 ) ) { if ( STRUCT_OR_UNION_10 -> VAR_29 == VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } if ( VAR_34 <= 0L ) { VAR_35 = VAR_36 ? VAR_37 : - VAR_38 ; goto VAR_39 ; } METHOD_7 ( VAR_40 ) ; VAR_41 = METHOD_8 ( * METHOD_9 ( VAR_42 ) , METHOD_10 ( STRUCT_OR_UNION_11 ) , VAR_43 ) ; METHOD_11 ( VAR_44 ) ; } VAR_45 = METHOD_12 ( & VAR_46 -> VAR_47 ) ; VAR_48 = METHOD_13 ( VAR_49 ) ; VAR_50 = METHOD_14 ( VAR_51 ) ; VAR_52 = METHOD_15 ( VAR_53 ) ; if ( ( ! VAR_54 ) && ( ! VAR_55 ) ) { METHOD_16 ( VAR_56 ) ; goto VAR_57 ; } METHOD_17 ( VAR_58 , VAR_59 ) ; VAR_60 = METHOD_18 ( VAR_61 , VAR_62 , VAR_63 ) ; if ( VAR_64 ) goto VAR_65 ; if ( ! VAR_66 ) { if ( METHOD_19 ( VAR_67 < VAR_68 ) ) { VAR_69 = VAR_70 ; VAR_71 -> VAR_72 |= VAR_73 ; } VAR_74 = METHOD_20 ( VAR_75 , METHOD_21 ( VAR_76 ) , VAR_77 -> VAR_78 , VAR_79 ) ; if ( VAR_80 ) goto VAR_81 ; VAR_82 = VAR_83 ; } else { if ( ( STRUCT_OR_UNION_12 -> VAR_84 == VAR_85 ) || ( ( VAR_86 == VAR_87 ) || VAR_88 -> VAR_89 ) ) VAR_90 = 0 ; else VAR_91 = - VAR_92 ; } if ( METHOD_22 ( ! ( VAR_93 & VAR_94 ) ) ) { if ( ( STRUCT_OR_UNION_13 -> VAR_95 != VAR_96 ) && ( ++ VAR_97 -> VAR_98 >= VAR_99 ) ) METHOD_23 ( VAR_100 -> VAR_101 , VAR_102 -> VAR_103 ) ; METHOD_24 ( VAR_104 ) ; } VAR_105 : METHOD_25 ( VAR_106 ) ; return VAR_107 ; }",566
567,"static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 * VAR_2 ) {  if ( * VAR_3 >= 30 && VAR_4 [ 29 ] == 0x05 && VAR_5 [ 30 ] == 0x09 ) {  METHOD_1 ( VAR_6 , ""fixingupbutton/consumerinHIDreportdescriptor\\n"" ) ; VAR_7 [ 30 ] = 0x0c ; } return VAR_8 ; }","static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 * VAR_2 ) { if ( * VAR_3 >= 30 && VAR_4 [ 29 ] == 0x05 && VAR_5 [ 30 ] == 0x09 ) { METHOD_1 ( VAR_6 , ""fixingupbutton/consumerinHIDreportdescriptor\\n"" ) ; VAR_7 [ 30 ] = 0x0c ; } return VAR_8 ; }",567
568,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; struct STRUCT_OR_UNION_3 * VAR_5 = STRUCT_OR_UNION_4 -> VAR_6 . STRUCT_OR_UNION_5 ; TYPE_4 VAR_7 ; if ( ! VAR_8 ) return 0 ; VAR_9 = VAR_10 -> VAR_11 ; VAR_12 = VAR_13 + VAR_14 -> VAR_15 ; VAR_16 = VAR_17 ; if ( ! ( VAR_18 -> VAR_19 & VAR_20 ) ) VAR_21 |= VAR_22 ; if ( ! STRUCT_OR_UNION_6 -> VAR_23 . VAR_24 ) VAR_25 |= VAR_26 ; while ( VAR_27 < VAR_28 ) { unsigned TYPE_5 VAR_29 ; if ( METHOD_1 ( VAR_30 , METHOD_2 ( VAR_31 ) ) ) { VAR_32 += 1 ; continue ; } VAR_33 = METHOD_3 ( STRUCT_OR_UNION_7 , VAR_34 ) ; while ( ( VAR_35 + ( VAR_36 >> VAR_37 ) ) > VAR_38 ) VAR_39 >>= 1 ; while ( ( VAR_40 << VAR_41 ) & ( VAR_42 - 1 ) ) VAR_43 >>= 1 ; while ( METHOD_4 ( VAR_44 , VAR_45 ) & ( VAR_46 - 1 ) ) VAR_47 >>= 1 ;  VAR_48 = METHOD_5 ( VAR_49 , VAR_50 , VAR_51 ) ;  if ( METHOD_6 ( VAR_52 ) ) { VAR_53 += 1 ; continue ; } VAR_54 = METHOD_7 ( VAR_55 , METHOD_8 ( VAR_56 ) , METHOD_9 ( VAR_57 ) , VAR_58 , VAR_59 ) ; if ( VAR_60 ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommufailedtomappfn=%llx\\n"" , VAR_61 ) ;  METHOD_10 ( STRUCT_OR_UNION_8 , VAR_62 , VAR_63 ) ;  goto VAR_64 ; } VAR_65 += VAR_66 >> VAR_67 ; } return 0 ; VAR_68 : METHOD_11 ( STRUCT_OR_UNION_9 , VAR_69 -> VAR_70 , VAR_71 - VAR_72 -> VAR_73 ) ; return VAR_74 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; struct STRUCT_OR_UNION_3 * VAR_5 = STRUCT_OR_UNION_4 -> VAR_6 . STRUCT_OR_UNION_5 ; TYPE_4 VAR_7 ; if ( ! VAR_8 ) return 0 ; VAR_9 = VAR_10 -> VAR_11 ; VAR_12 = VAR_13 + VAR_14 -> VAR_15 ; VAR_16 = VAR_17 ; if ( ! ( VAR_18 -> VAR_19 & VAR_20 ) ) VAR_21 |= VAR_22 ; if ( ! STRUCT_OR_UNION_6 -> VAR_23 . VAR_24 ) VAR_25 |= VAR_26 ; while ( VAR_27 < VAR_28 ) { unsigned TYPE_5 VAR_29 ; if ( METHOD_1 ( VAR_30 , METHOD_2 ( VAR_31 ) ) ) { VAR_32 += 1 ; continue ; } VAR_33 = METHOD_3 ( STRUCT_OR_UNION_7 , VAR_34 ) ; while ( ( VAR_35 + ( VAR_36 >> VAR_37 ) ) > VAR_38 ) VAR_39 >>= 1 ; while ( ( VAR_40 << VAR_41 ) & ( VAR_42 - 1 ) ) VAR_43 >>= 1 ; while ( METHOD_4 ( VAR_44 , VAR_45 ) & ( VAR_46 - 1 ) ) VAR_47 >>= 1 ; VAR_48 = METHOD_5 ( VAR_49 , VAR_50 , VAR_51 ) ; if ( METHOD_6 ( VAR_52 ) ) { VAR_53 += 1 ; continue ; } VAR_54 = METHOD_7 ( VAR_55 , METHOD_8 ( VAR_56 ) , METHOD_9 ( VAR_57 ) , VAR_58 , VAR_59 ) ; if ( VAR_60 ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommufailedtomappfn=%llx\\n"" , VAR_61 ) ; METHOD_10 ( STRUCT_OR_UNION_8 , VAR_62 , VAR_63 ) ; goto VAR_64 ; } VAR_65 += VAR_66 >> VAR_67 ; } return 0 ; VAR_68 : METHOD_11 ( STRUCT_OR_UNION_9 , VAR_69 -> VAR_70 , VAR_71 - VAR_72 -> VAR_73 ) ; return VAR_74 ; }",568
569,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { struct STRUCT_OR_UNION_0 * VAR_5 = ( struct STRUCT_OR_UNION_1 * ) ( TYPE_6 ) VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ;  if ( METHOD_1 ( VAR_8 ) )  return 0 ; if ( VAR_9 > VAR_10 -> VAR_11 - sizeof ( struct STRUCT_OR_UNION_3 ) ) return 0 ; VAR_12 = METHOD_2 ( ( struct STRUCT_OR_UNION_4 * ) & VAR_13 -> VAR_14 [ VAR_15 ] , VAR_16 -> VAR_17 - VAR_18 , VAR_19 ) ; if ( VAR_20 ) return ( TYPE_7 * ) VAR_21 - ( TYPE_8 * ) VAR_22 -> VAR_23 ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { struct STRUCT_OR_UNION_0 * VAR_5 = ( struct STRUCT_OR_UNION_1 * ) ( TYPE_6 ) VAR_6 ; struct STRUCT_OR_UNION_2 * VAR_7 ; if ( METHOD_1 ( VAR_8 ) ) return 0 ; if ( VAR_9 > VAR_10 -> VAR_11 - sizeof ( struct STRUCT_OR_UNION_3 ) ) return 0 ; VAR_12 = METHOD_2 ( ( struct STRUCT_OR_UNION_4 * ) & VAR_13 -> VAR_14 [ VAR_15 ] , VAR_16 -> VAR_17 - VAR_18 , VAR_19 ) ; if ( VAR_20 ) return ( TYPE_7 * ) VAR_21 - ( TYPE_8 * ) VAR_22 -> VAR_23 ; return 0 ; }",569
570,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ;  TYPE_8 VAR_16 = METHOD_3 ( VAR_17 ) ;  TYPE_9 VAR_18 ; TYPE_10 VAR_19 ; if ( VAR_20 & VAR_21 ) return METHOD_4 ( VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 . VAR_30 . VAR_31 ) return METHOD_5 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , VAR_39 | ( VAR_40 ? VAR_41 : 0 ) , & VAR_42 , & VAR_43 , & VAR_44 ) ; if ( ! VAR_45 ) goto VAR_46 ; VAR_47 = VAR_48 -> VAR_49 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_50 = VAR_51 ; if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; else if ( VAR_56 < VAR_57 ) VAR_58 -> VAR_59 |= VAR_60 ; VAR_61 = ( VAR_62 -> VAR_63 == METHOD_7 ( VAR_64 ) ) ; if ( VAR_65 < VAR_66 || METHOD_8 ( VAR_67 ) -> VAR_68 ) {  if ( METHOD_9 ( VAR_69 ) )  goto VAR_70 ; }  if ( METHOD_10 ( VAR_71 ) )  VAR_72 = METHOD_11 ( VAR_73 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_74 , VAR_75 ) ; else { VAR_76 = METHOD_12 ( VAR_77 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_78 ) ; if ( VAR_79 == - VAR_80 ) goto VAR_81 ; } if ( METHOD_13 ( VAR_82 ) ) { METHOD_14 ( VAR_83 , METHOD_15 ) ; if ( ! VAR_84 ) { METHOD_16 ( & VAR_85 -> VAR_86 ) ; if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 , VAR_90 ) ; else METHOD_19 ( METHOD_20 ( VAR_91 ) , VAR_92 , VAR_93 ) ; } goto VAR_94 ; } if ( ! VAR_95 ) { if ( VAR_96 ) METHOD_21 ( METHOD_22 ( VAR_97 ) , VAR_98 , VAR_99 ) ; else METHOD_23 ( METHOD_24 ( VAR_100 ) , VAR_101 , VAR_102 ) ; } METHOD_25 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 ) { DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_8 * , VAR_108 , VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = METHOD_26 ( VAR_116 ) -> VAR_117 ; VAR_118 -> VAR_119 = 0 ; if ( VAR_120 ) { METHOD_27 ( METHOD_28 ( VAR_121 ) -> VAR_122 , & VAR_123 -> VAR_124 ) ; VAR_125 -> VAR_126 = 0 ; } else { VAR_127 -> VAR_128 = METHOD_29 ( VAR_129 ) -> VAR_130 ; VAR_131 -> VAR_132 = METHOD_30 ( & VAR_133 -> VAR_134 , METHOD_31 ( VAR_135 ) ) ; } * VAR_136 = sizeof ( * VAR_137 ) ; } if ( VAR_138 -> VAR_139 . VAR_140 ) METHOD_32 ( VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 ) { if ( VAR_145 -> VAR_146 ) METHOD_33 ( VAR_147 , VAR_148 ) ; } else { if ( VAR_149 -> VAR_150 . VAR_151 ) METHOD_34 ( VAR_152 , VAR_153 , VAR_154 ) ; } VAR_155 = VAR_156 ; if ( VAR_157 & VAR_158 ) VAR_159 = VAR_160 ; VAR_161 : METHOD_35 ( VAR_162 , VAR_163 ) ; VAR_164 : return VAR_165 ; VAR_166 : VAR_167 = METHOD_36 ( VAR_168 ) ; if ( ! METHOD_37 ( VAR_169 , VAR_170 , VAR_171 ) ) { if ( VAR_172 ) { METHOD_38 ( METHOD_39 ( VAR_173 ) , VAR_174 , VAR_175 ) ; METHOD_40 ( METHOD_41 ( VAR_176 ) , VAR_177 , VAR_178 ) ; } else { METHOD_42 ( METHOD_43 ( VAR_179 ) , VAR_180 , VAR_181 ) ; METHOD_44 ( METHOD_45 ( VAR_182 ) , VAR_183 , VAR_184 ) ; } } METHOD_46 ( VAR_185 , VAR_186 ) ; METHOD_47 ( ) ; VAR_187 -> VAR_188 &= ~ VAR_189 ; goto VAR_190 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 = METHOD_3 ( VAR_17 ) ; TYPE_9 VAR_18 ; TYPE_10 VAR_19 ; if ( VAR_20 & VAR_21 ) return METHOD_4 ( VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 . VAR_30 . VAR_31 ) return METHOD_5 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , VAR_39 | ( VAR_40 ? VAR_41 : 0 ) , & VAR_42 , & VAR_43 , & VAR_44 ) ; if ( ! VAR_45 ) goto VAR_46 ; VAR_47 = VAR_48 -> VAR_49 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_50 = VAR_51 ; if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; else if ( VAR_56 < VAR_57 ) VAR_58 -> VAR_59 |= VAR_60 ; VAR_61 = ( VAR_62 -> VAR_63 == METHOD_7 ( VAR_64 ) ) ; if ( VAR_65 < VAR_66 || METHOD_8 ( VAR_67 ) -> VAR_68 ) { if ( METHOD_9 ( VAR_69 ) ) goto VAR_70 ; } if ( VAR_191 || METHOD_10 ( VAR_71 ) ) VAR_72 = METHOD_11 ( VAR_73 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_74 , VAR_75 ) ; else { VAR_76 = METHOD_12 ( VAR_77 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_78 ) ; if ( VAR_79 == - VAR_80 ) goto VAR_81 ; } if ( METHOD_13 ( VAR_82 ) ) { METHOD_14 ( VAR_83 , METHOD_15 ) ; if ( ! VAR_84 ) { METHOD_16 ( & VAR_85 -> VAR_86 ) ; if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 , VAR_90 ) ; else METHOD_19 ( METHOD_20 ( VAR_91 ) , VAR_92 , VAR_93 ) ; } goto VAR_94 ; } if ( ! VAR_95 ) { if ( VAR_96 ) METHOD_21 ( METHOD_22 ( VAR_97 ) , VAR_98 , VAR_99 ) ; else METHOD_23 ( METHOD_24 ( VAR_100 ) , VAR_101 , VAR_102 ) ; } METHOD_25 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 ) { DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_8 * , VAR_108 , VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = METHOD_26 ( VAR_116 ) -> VAR_117 ; VAR_118 -> VAR_119 = 0 ; if ( VAR_120 ) { METHOD_27 ( METHOD_28 ( VAR_121 ) -> VAR_122 , & VAR_123 -> VAR_124 ) ; VAR_125 -> VAR_126 = 0 ; } else { VAR_127 -> VAR_128 = METHOD_29 ( VAR_129 ) -> VAR_130 ; VAR_131 -> VAR_132 = METHOD_30 ( & VAR_133 -> VAR_134 , METHOD_31 ( VAR_135 ) ) ; } * VAR_136 = sizeof ( * VAR_137 ) ; } if ( VAR_138 -> VAR_139 . VAR_140 ) METHOD_32 ( VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 ) { if ( VAR_145 -> VAR_146 ) METHOD_33 ( VAR_147 , VAR_148 ) ; } else { if ( VAR_149 -> VAR_150 . VAR_151 ) METHOD_34 ( VAR_152 , VAR_153 , VAR_154 ) ; } VAR_155 = VAR_156 ; if ( VAR_157 & VAR_158 ) VAR_159 = VAR_160 ; VAR_161 : METHOD_35 ( VAR_162 , VAR_163 ) ; VAR_164 : return VAR_165 ; VAR_166 : VAR_167 = METHOD_36 ( VAR_168 ) ; if ( ! METHOD_37 ( VAR_169 , VAR_170 , VAR_171 ) ) { if ( VAR_172 ) { METHOD_38 ( METHOD_39 ( VAR_173 ) , VAR_174 , VAR_175 ) ; METHOD_40 ( METHOD_41 ( VAR_176 ) , VAR_177 , VAR_178 ) ; } else { METHOD_42 ( METHOD_43 ( VAR_179 ) , VAR_180 , VAR_181 ) ; METHOD_44 ( METHOD_45 ( VAR_182 ) , VAR_183 , VAR_184 ) ; } } METHOD_46 ( VAR_185 , VAR_186 ) ; METHOD_47 ( ) ; VAR_187 -> VAR_188 &= ~ VAR_189 ; goto VAR_190 ; }",570
571,"METHOD_0 ( TYPE_0 , TYPE_1 ) { TYPE_2 * VAR_0 = ( TYPE_3 * ) VAR_1 ( METHOD_1 ( ) VAR_2 ) ; TYPE_4 VAR_3 = 0 ; if ( zend_parse_parameters ( METHOD_2 ( ) VAR_4 , ""l"" , & VAR_5 ) == FAILURE ) { return ; } if ( VAR_6 <= 0 ) { php_error_docref ( TYPE_5 VAR_7 , VAR_8 , ""Lengthparametermustbegreaterthan0"" ) ; VAR_9 ; }  METHOD_3 ( VAR_10 ) = METHOD_4 ( VAR_11 + 1 ) ;  METHOD_5 ( VAR_12 ) = METHOD_6 ( VAR_13 -> VAR_14 . VAR_15 . VAR_16 , METHOD_7 ( VAR_17 ) , VAR_18 ) ; METHOD_8 ( VAR_19 ) [ METHOD_9 ( VAR_20 ) ] = 0 ; METHOD_10 ( VAR_21 ) = VAR_22 ; }","METHOD_0 ( TYPE_0 , TYPE_1 ) { TYPE_2 * VAR_0 = ( TYPE_3 * ) VAR_1 ( METHOD_1 ( ) VAR_2 ) ; TYPE_4 VAR_3 = 0 ; if ( zend_parse_parameters ( METHOD_2 ( ) VAR_4 , ""l"" , & VAR_5 ) == FAILURE ) { return ; } if ( VAR_6 <= 0 ) { php_error_docref ( TYPE_5 VAR_7 , VAR_8 , ""Lengthparametermustbegreaterthan0"" ) ; VAR_9 ; } if ( VAR_18 > VAR_23 ) { php_error_docref ( TYPE_5 VAR_7 , VAR_8 , ""Lengthparametermustbenomorethan%d"" , VAR_23 ) ; VAR_9 ; } METHOD_3 ( VAR_10 ) = METHOD_4 ( VAR_11 + 1 ) ; METHOD_5 ( VAR_12 ) = METHOD_6 ( VAR_13 -> VAR_14 . VAR_15 . VAR_16 , METHOD_7 ( VAR_17 ) , VAR_18 ) ; METHOD_8 ( VAR_19 ) [ METHOD_9 ( VAR_20 ) ] = 0 ; METHOD_10 ( VAR_21 ) = VAR_22 ; }",571
572," TYPE_0 * METHOD_0 ( TYPE_1 * TYPE_2 , TYPE_3 VAR_0 )  { VAR_1 * VAR_2 ; TYPE_4 * VAR_3 ; if ( ! ( VAR_4 = TYPE_5 ( VAR_5 ( TYPE_6 * , TYPE_7 ) , VAR_6 ) ) ) goto VAR_7 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 ) ) ) goto VAR_10 ; METHOD_2 ( VAR_11 ) ; return VAR_12 ; VAR_13 : if ( VAR_14 ) METHOD_3 ( VAR_15 ) ; return 0 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * TYPE_2 , TYPE_3 VAR_0 ) { VAR_1 * VAR_2 ; TYPE_4 * VAR_3 ; if ( ! ( VAR_4 = TYPE_5 ( VAR_5 ( TYPE_6 * , TYPE_7 ) , VAR_6 ) ) ) goto VAR_7 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 ) ) ) goto VAR_10 ; METHOD_2 ( VAR_11 ) ; return VAR_12 ; VAR_13 : if ( VAR_14 ) METHOD_3 ( VAR_15 ) ; return 0 ; }",572
573,static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 ) return - VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 < 0 ) { METHOD_3 ( VAR_8 ) ;  return VAR_9 != - VAR_10 ? VAR_11 : 0 ;  } return METHOD_4 ( VAR_12 ) ; },static TYPE_0 METHOD_0 ( TYPE_1 ) { struct STRUCT_OR_UNION_0 * VAR_0 ; TYPE_2 VAR_1 ; VAR_2 = METHOD_1 ( ) ; if ( ! VAR_3 ) return - VAR_4 ; VAR_5 = METHOD_2 ( VAR_6 ) ; if ( VAR_7 < 0 ) { METHOD_3 ( VAR_8 ) ; return VAR_9 != - VAR_10 ? VAR_11 : 0 ; } return METHOD_4 ( VAR_12 ) ; },573
574,TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) {  TYPE_2 * VAR_1 =   ( TYPE_3 * ) METHOD_1 ( METHOD_2 ( VAR_2 ) ) ;  VAR_3 -> VAR_4 = VAR_5 ; return VAR_6 ; },TYPE_0 * METHOD_0 ( TYPE_1 VAR_0 ) { TYPE_2 * VAR_1 = ( TYPE_3 * ) METHOD_1 ( METHOD_2 ( VAR_2 ) ) ; VAR_3 -> VAR_4 = VAR_5 ; return VAR_6 ; },574
575,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 = - VAR_4 ; unsigned TYPE_2 VAR_5 , VAR_6 ;  struct STRUCT_OR_UNION_3 VAR_7 = {  . VAR_8 = 0x0000beef , } ;  struct STRUCT_OR_UNION_4 VAR_9 ;  VAR_10 = METHOD_1 ( METHOD_2 ( VAR_11 ) , METHOD_3 ( METHOD_4 ( VAR_12 ) , 0 ) , VAR_13 , VAR_14 | VAR_15 | VAR_16 , 1 , VAR_17 -> VAR_18 [ 0 ] . VAR_19 . VAR_20 ,  & VAR_21 ,   sizeof ( VAR_22 ) ,  1000 ) ;  if ( VAR_23 < 0 ) {  METHOD_5 ( & VAR_24 -> VAR_25 , ""Couldn\'tsenddataformat(err=%d)\\n"" , VAR_26 ) ; return VAR_27 ;  }  VAR_28 = METHOD_6 ( METHOD_7 ( VAR_29 ) , METHOD_8 ( METHOD_9 ( VAR_30 ) , 0 ) , VAR_31 , VAR_32 | VAR_33 | VAR_34 , 1 , VAR_35 -> VAR_36 [ 0 ] . VAR_37 . VAR_38 ,  & VAR_39 ,   sizeof ( VAR_40 ) ,  1000 ) ; if ( VAR_41 < 0 ) { METHOD_10 ( & VAR_42 -> VAR_43 , ""Couldn\'tgetdeviceconfig:(err=%d)\\n"" , VAR_44 ) ;  return VAR_45 ;  } VAR_46 = VAR_47 . VAR_48 + 1 ; METHOD_11 ( & VAR_49 -> VAR_50 , ""Configuringfor%dinterfaces\\n"" , VAR_51 ) ; if ( VAR_52 > VAR_53 ) { METHOD_12 ( & VAR_54 -> VAR_55 , ""Drivercannothandlemorethat%dCANinterfaces\\n"" , VAR_56 ) ;  return - VAR_57 ;  } VAR_58 = METHOD_13 ( sizeof ( * VAR_59 ) , VAR_60 ) ;  if ( ! VAR_61 )  return - VAR_62 ;  METHOD_14 ( & VAR_63 -> VAR_64 ) ;  METHOD_15 ( & VAR_65 -> VAR_66 , 0 ) ; METHOD_16 ( VAR_67 , VAR_68 ) ; VAR_69 -> VAR_70 = METHOD_17 ( VAR_71 ) ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 ; VAR_75 ++ ) {  VAR_76 -> VAR_77 [ VAR_78 ] = METHOD_18 ( VAR_79 , VAR_80 , & VAR_81 ) ;  if ( METHOD_19 ( VAR_82 -> VAR_83 [ VAR_84 ] ) ) { VAR_85 = METHOD_20 ( VAR_86 -> VAR_87 [ VAR_88 ] ) ; VAR_89 = VAR_90 ; for ( VAR_91 = 0 ; VAR_92 < VAR_93 ; VAR_94 ++ ) METHOD_21 ( VAR_95 -> VAR_96 [ VAR_97 ] ) ; METHOD_22 ( & VAR_98 -> VAR_99 ) ;  METHOD_23 ( VAR_100 ) ;  return VAR_101 ; } VAR_102 -> VAR_103 [ VAR_104 ] -> VAR_105 = VAR_106 ; }  return 0 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 = - VAR_4 ; unsigned TYPE_2 VAR_5 , VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_22 ; struct STRUCT_OR_UNION_4 VAR_9 ; VAR_10 = METHOD_1 ( METHOD_2 ( VAR_11 ) , METHOD_3 ( METHOD_4 ( VAR_12 ) , 0 ) , VAR_13 , VAR_14 | VAR_15 | VAR_16 , 1 , VAR_17 -> VAR_18 [ 0 ] . VAR_19 . VAR_20 , & VAR_21 , sizeof ( VAR_22 ) , 1000 ) ; if ( VAR_23 < 0 ) { METHOD_5 ( & VAR_24 -> VAR_25 , ""Couldn\'tsenddataformat(err=%d)\\n"" , VAR_26 ) ; return VAR_27 ; } VAR_28 = METHOD_6 ( METHOD_7 ( VAR_29 ) , METHOD_8 ( METHOD_9 ( VAR_30 ) , 0 ) , VAR_31 , VAR_32 | VAR_33 | VAR_34 , 1 , VAR_35 -> VAR_36 [ 0 ] . VAR_37 . VAR_38 , & VAR_39 , sizeof ( * * VAR_40 ) , 1000 ) ; METHOD_23 ( VAR_22 ) ; if ( VAR_41 < 0 ) { METHOD_10 ( & VAR_42 -> VAR_43 , ""Couldn\'tgetdeviceconfig:(err=%d)\\n"" , VAR_44 ) ; return VAR_45 ; } VAR_46 = VAR_47 . VAR_48 + 1 ; METHOD_11 ( & VAR_49 -> VAR_50 , ""Configuringfor%dinterfaces\\n"" , VAR_51 ) ; if ( VAR_52 > VAR_53 ) { METHOD_12 ( & VAR_54 -> VAR_55 , ""Drivercannothandlemorethat%dCANinterfaces\\n"" , VAR_56 ) ; METHOD_23 ( VAR_81 ) ; return - VAR_57 ; } VAR_58 = METHOD_13 ( sizeof ( * VAR_59 ) , VAR_60 ) ; if ( ! VAR_61 ) return - VAR_62 ; } METHOD_14 ( & VAR_63 -> VAR_64 ) ; METHOD_15 ( & VAR_65 -> VAR_66 , 0 ) ; METHOD_16 ( VAR_67 , VAR_68 ) ; VAR_69 -> VAR_70 = METHOD_17 ( VAR_71 ) ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 ; VAR_75 ++ ) { VAR_76 -> VAR_77 [ VAR_78 ] = METHOD_18 ( VAR_79 , VAR_80 , VAR_81 ) ; if ( METHOD_19 ( VAR_82 -> VAR_83 [ VAR_84 ] ) ) { VAR_85 = METHOD_20 ( VAR_86 -> VAR_87 [ VAR_88 ] ) ; VAR_89 = VAR_90 ; for ( VAR_91 = 0 ; VAR_92 < VAR_93 ; VAR_94 ++ ) METHOD_21 ( VAR_95 -> VAR_96 [ VAR_97 ] ) ; METHOD_22 ( & VAR_98 -> VAR_99 ) ; METHOD_23 ( VAR_81 ) ; METHOD_23 ( VAR_100 ) ; return VAR_101 ; } VAR_81 = METHOD_24 ( sizeof ( * VAR_81 ) , VAR_60 ) ; if ( ! VAR_81 ) return - VAR_62 ; VAR_102 -> VAR_103 [ VAR_104 ] -> VAR_105 = VAR_106 ; } METHOD_23 ( VAR_81 ) ; return 0 ; }",575
576,"static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { unsigned TYPE_3 VAR_3 , VAR_4 = 0 ; TYPE_4 VAR_5 [ 11 ] ; do { switch ( * VAR_6 & 0xC0 ) { case 0x00 :  VAR_7 += 2 ;  VAR_8 += 2 ; VAR_9 -= 2 ; break ; case 0x40 :  VAR_10 += 3 ;  VAR_11 += 3 ; VAR_12 -= 3 ; break ; case 0x80 :  VAR_13 += 4 ;  VAR_14 += 4 ; VAR_15 -= 4 ; break ; case 0xC0 :  VAR_16 = VAR_17 [ 1 ] ;  if ( VAR_18 < 10 || VAR_19 > 20 ) return - 1 ; if ( * VAR_20 == VAR_21 ) { METHOD_1 ( & VAR_22 -> VAR_23 , VAR_24 + 7 , VAR_25 ) ; METHOD_2 ( VAR_26 , VAR_27 + 12 , VAR_28 - 10 ) ; VAR_29 [ VAR_30 - 10 ] = '\\0' ; METHOD_3 ( & VAR_31 -> VAR_32 , VAR_33 ) ; } if ( * VAR_34 == VAR_35 ) { METHOD_4 ( & VAR_36 -> VAR_37 , VAR_38 + 7 , VAR_39 ) ; METHOD_5 ( VAR_40 , VAR_41 + 12 , VAR_42 - 10 ) ; VAR_43 [ VAR_44 - 10 ] = '\\0' ; METHOD_6 ( & VAR_45 -> VAR_46 , VAR_47 ) ; } VAR_48 += VAR_49 + 2 ; VAR_50 += VAR_51 + 2 ; VAR_52 -= VAR_53 + 2 ; break ; } } while ( * VAR_54 != 0x00 && VAR_55 > 0 ) ; return VAR_56 ; }","static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 ) { unsigned TYPE_3 VAR_3 , VAR_4 = 0 ; TYPE_4 VAR_5 [ 11 ] ; do { switch ( * VAR_6 & 0xC0 ) { case 0x00 : if ( VAR_55 < 2 ) return - 1 ; VAR_7 += 2 ; VAR_8 += 2 ; VAR_9 -= 2 ; break ; case 0x40 : if ( VAR_55 < 3 ) return - 1 ; VAR_10 += 3 ; VAR_11 += 3 ; VAR_12 -= 3 ; break ; case 0x80 : if ( VAR_55 < 4 ) return - 1 ; VAR_13 += 4 ; VAR_14 += 4 ; VAR_15 -= 4 ; break ; case 0xC0 : if ( VAR_55 < 2 ) return - 1 ; VAR_16 = VAR_17 [ 1 ] ; if ( VAR_18 < 10 || VAR_19 > 20 ) return - 1 ; if ( * VAR_20 == VAR_21 ) { METHOD_1 ( & VAR_22 -> VAR_23 , VAR_24 + 7 , VAR_25 ) ; METHOD_2 ( VAR_26 , VAR_27 + 12 , VAR_28 - 10 ) ; VAR_29 [ VAR_30 - 10 ] = '\\0' ; METHOD_3 ( & VAR_31 -> VAR_32 , VAR_33 ) ; } if ( * VAR_34 == VAR_35 ) { METHOD_4 ( & VAR_36 -> VAR_37 , VAR_38 + 7 , VAR_39 ) ; METHOD_5 ( VAR_40 , VAR_41 + 12 , VAR_42 - 10 ) ; VAR_43 [ VAR_44 - 10 ] = '\\0' ; METHOD_6 ( & VAR_45 -> VAR_46 , VAR_47 ) ; } VAR_48 += VAR_49 + 2 ; VAR_50 += VAR_51 + 2 ; VAR_52 -= VAR_53 + 2 ; break ; } } while ( * VAR_54 != 0x00 && VAR_55 > 0 ) ; return VAR_56 ; }",576
577,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , TYPE_1 * VAR_4 [ VAR_5 ] , struct STRUCT_OR_UNION_4 * * VAR_6 ) { TYPE_2 VAR_7 ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 ; TYPE_6 * VAR_11 = 0 ; TYPE_7 VAR_12 [ VAR_13 ] ; struct STRUCT_OR_UNION_5 * VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 ) ; TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; if ( ! VAR_19 ) { METHOD_2 ( VAR_20 , 0 , sizeof ( * VAR_21 ) ) ; } else { VAR_22 = METHOD_3 ( VAR_23 , VAR_24 | VAR_25 , ( TYPE_10 ) VAR_26 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ; if ( VAR_27 != VAR_28 ) return VAR_29 ;  METHOD_4 ( VAR_30 , VAR_31 ) ;  } if ( VAR_32 && METHOD_5 ( VAR_33 -> VAR_34 ) ) { return VAR_35 ; } for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ ) { VAR_40 [ VAR_41 ] = VAR_42 ; switch ( METHOD_6 ( VAR_43 -> VAR_44 , VAR_45 ) ) { case VAR_46 : case VAR_47 : case VAR_48 : VAR_49 = ( TYPE_11 * ) VAR_50 -> VAR_51 [ VAR_52 ] . VAR_53 . VAR_54 ; VAR_55 = VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 ; if ( ! VAR_61 ) { if ( VAR_62 ) return VAR_63 ; break ; } if ( METHOD_7 ( VAR_64 , VAR_65 , VAR_66 ) ) { VAR_67 = METHOD_8 ( VAR_68 , sizeof ( VAR_69 ) ) ; if ( METHOD_9 ( VAR_70 , VAR_71 , & VAR_72 ) ) return VAR_73 ; VAR_74 [ VAR_75 ] = VAR_76 ; break ; } VAR_77 = METHOD_10 ( VAR_78 , VAR_79 , VAR_80 , & VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 . STRUCT_OR_UNION_7 , & VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 . VAR_89 ) ; if ( VAR_90 != VAR_91 ) return VAR_92 ; break ; default : break ; } } if ( VAR_93 == 0 ) return VAR_94 ; VAR_95 = METHOD_11 ( VAR_96 , VAR_97 , & VAR_98 ) ; if ( VAR_99 != VAR_100 ) return VAR_101 ; VAR_102 = 0 ; for ( VAR_103 = 0 ; VAR_104 < VAR_105 ; VAR_106 ++ ) { if ( ! VAR_107 [ VAR_108 ] ) continue ; VAR_109 = METHOD_12 ( VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 . VAR_114 , sizeof ( VAR_115 ) ) ; switch ( METHOD_13 ( VAR_116 -> VAR_117 , VAR_118 ) ) { case VAR_119 : case VAR_120 : VAR_121 = ( TYPE_12 * ) VAR_122 -> VAR_123 [ VAR_124 ] . VAR_125 . VAR_126 ; if ( VAR_127 ) { VAR_128 = METHOD_14 ( VAR_129 , VAR_130 , VAR_131 -> VAR_132 [ VAR_133 ] . VAR_134 . VAR_135 ) ; if ( VAR_136 != VAR_137 ) return VAR_138 ; VAR_139 -> VAR_140 [ VAR_141 ] . VAR_142 . VAR_143 = VAR_144 ; VAR_145 -> VAR_146 [ VAR_147 ] . VAR_148 . STRUCT_OR_UNION_8 = * VAR_149 ; VAR_150 [ VAR_151 ] = VAR_152 ; VAR_153 += VAR_154 ; VAR_155 += VAR_156 ; } break ; case VAR_157 : VAR_158 = ( TYPE_13 * ) VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 . VAR_163 ; if ( VAR_164 ) { VAR_165 -> VAR_166 [ VAR_167 ] . VAR_168 . VAR_169 = VAR_170 ; VAR_171 -> VAR_172 [ VAR_173 ] . VAR_174 . STRUCT_OR_UNION_9 = * VAR_175 ; VAR_176 [ VAR_177 ] = VAR_178 ; VAR_179 += VAR_180 ; VAR_181 += VAR_182 ; } break ; default : continue ; } } return VAR_183 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 , TYPE_1 * VAR_4 [ VAR_5 ] , struct STRUCT_OR_UNION_4 * * VAR_6 ) { TYPE_2 VAR_7 ; TYPE_3 VAR_8 ; TYPE_4 VAR_9 = 0 ; TYPE_5 VAR_10 ; TYPE_6 * VAR_11 = 0 ; TYPE_7 VAR_12 [ VAR_13 ] ; struct STRUCT_OR_UNION_5 * VAR_14 = METHOD_1 ( VAR_15 -> VAR_16 ) ; TYPE_8 * VAR_17 ; TYPE_9 VAR_18 ; if ( ! VAR_19 ) { METHOD_2 ( VAR_20 , 0 , sizeof ( * VAR_21 ) ) ; } else { VAR_22 = METHOD_3 ( VAR_23 , VAR_24 | VAR_25 , ( TYPE_10 ) VAR_26 , sizeof ( struct STRUCT_OR_UNION_6 ) ) ; if ( VAR_27 != VAR_28 ) return VAR_29 ; METHOD_4 ( VAR_30 , VAR_31 ) ; } if ( VAR_32 && METHOD_5 ( VAR_33 -> VAR_34 ) ) { return VAR_35 ; } for ( VAR_36 = 0 ; VAR_37 < VAR_38 ; VAR_39 ++ ) { VAR_40 [ VAR_41 ] = VAR_42 ; switch ( METHOD_6 ( VAR_43 -> VAR_44 , VAR_45 ) ) { case VAR_46 : case VAR_47 : case VAR_48 : VAR_49 = ( TYPE_11 * ) VAR_50 -> VAR_51 [ VAR_52 ] . VAR_53 . VAR_54 ; VAR_55 = VAR_56 -> VAR_57 [ VAR_58 ] . VAR_59 . VAR_60 ; if ( ! VAR_61 ) { if ( VAR_62 ) return VAR_63 ; break ; } if ( METHOD_7 ( VAR_64 , VAR_65 , VAR_66 ) ) { VAR_67 = METHOD_8 ( VAR_68 , sizeof ( VAR_69 ) ) ; if ( METHOD_9 ( VAR_70 , VAR_71 , & VAR_72 ) ) return VAR_73 ; VAR_74 [ VAR_75 ] = VAR_76 ; break ; } VAR_77 = METHOD_10 ( VAR_78 , VAR_79 , VAR_80 , & VAR_81 -> VAR_82 [ VAR_83 ] . VAR_84 . STRUCT_OR_UNION_7 , & VAR_85 -> VAR_86 [ VAR_87 ] . VAR_88 . VAR_89 ) ; if ( VAR_90 != VAR_91 ) return VAR_92 ; break ; default : break ; } } if ( VAR_93 == 0 ) return VAR_94 ; VAR_95 = METHOD_11 ( VAR_96 , VAR_97 , & VAR_98 ) ; if ( VAR_99 != VAR_100 ) return VAR_101 ; VAR_102 = 0 ; for ( VAR_103 = 0 ; VAR_104 < VAR_105 ; VAR_106 ++ ) { if ( ! VAR_107 [ VAR_108 ] ) continue ; VAR_109 = METHOD_12 ( VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 . VAR_114 , sizeof ( VAR_115 ) ) ; switch ( METHOD_13 ( VAR_116 -> VAR_117 , VAR_118 ) ) { case VAR_119 : case VAR_120 : VAR_121 = ( TYPE_12 * ) VAR_122 -> VAR_123 [ VAR_124 ] . VAR_125 . VAR_126 ; if ( VAR_127 ) { VAR_128 = METHOD_14 ( VAR_129 , VAR_130 , VAR_131 -> VAR_132 [ VAR_133 ] . VAR_134 . VAR_135 ) ; if ( VAR_136 != VAR_137 ) return VAR_138 ; VAR_139 -> VAR_140 [ VAR_141 ] . VAR_142 . VAR_143 = VAR_144 ; VAR_145 -> VAR_146 [ VAR_147 ] . VAR_148 . STRUCT_OR_UNION_8 = * VAR_149 ; VAR_150 [ VAR_151 ] = VAR_152 ; VAR_153 += VAR_154 ; VAR_155 += VAR_156 ; } break ; case VAR_157 : VAR_158 = ( TYPE_13 * ) VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 . VAR_163 ; if ( VAR_164 ) { VAR_165 -> VAR_166 [ VAR_167 ] . VAR_168 . VAR_169 = VAR_170 ; VAR_171 -> VAR_172 [ VAR_173 ] . VAR_174 . STRUCT_OR_UNION_9 = * VAR_175 ; VAR_176 [ VAR_177 ] = VAR_178 ; VAR_179 += VAR_180 ; VAR_181 += VAR_182 ; } break ; default : continue ; } } return VAR_183 ; }",577
578,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 * VAR_8 ; register TYPE_9 * VAR_9 ; register TYPE_10 VAR_10 ; register TYPE_11 * VAR_11 ; register TYPE_12 VAR_12 ; register unsigned TYPE_13 * VAR_13 ; TYPE_14 VAR_14 , VAR_15 ; TYPE_15 VAR_16 ; unsigned TYPE_16 * VAR_17 ; METHOD_1 ( VAR_18 != ( const TYPE_17 * ) VAR_19 ) ; METHOD_2 ( VAR_20 -> VAR_21 == VAR_22 ) ; if ( VAR_23 -> VAR_24 != VAR_25 ) ( TYPE_18 ) METHOD_3 ( VAR_26 , METHOD_4 ( ) , ""%s"" , VAR_27 -> VAR_28 ) ; METHOD_5 ( VAR_29 != ( TYPE_19 * ) VAR_30 ) ; METHOD_6 ( VAR_31 -> VAR_32 == VAR_33 ) ; VAR_34 = METHOD_7 ( VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_20 * ) VAR_45 ) ; } ( TYPE_21 ) METHOD_10 ( & VAR_46 , 0 , sizeof ( VAR_47 ) ) ; VAR_48 . VAR_49 = METHOD_11 ( VAR_50 ) ; if ( VAR_51 . VAR_52 != 40 ) METHOD_12 ( VAR_53 , ""ImproperImageHeader"" ) ; VAR_54 . VAR_55 = ( TYPE_22 ) METHOD_13 ( VAR_56 ) ; VAR_57 . VAR_58 = ( TYPE_23 ) METHOD_14 ( VAR_59 ) ; VAR_60 . VAR_61 = METHOD_15 ( VAR_62 ) ; VAR_63 . VAR_64 = METHOD_16 ( VAR_65 ) ; VAR_66 . VAR_67 = METHOD_17 ( VAR_68 ) ; VAR_69 . VAR_70 = METHOD_18 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_19 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_20 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_21 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_22 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == VAR_86 ) && ( ( VAR_87 . VAR_88 == 16 ) || ( VAR_89 . VAR_90 == 32 ) ) ) { VAR_91 . VAR_92 = METHOD_23 ( VAR_93 ) ; VAR_94 . VAR_95 = METHOD_24 ( VAR_96 ) ; VAR_97 . VAR_98 = METHOD_25 ( VAR_99 ) ; } VAR_100 -> VAR_101 = VAR_102 . VAR_103 == 32 ? VAR_104 : VAR_105 ; VAR_106 -> VAR_107 = ( TYPE_24 ) METHOD_26 ( VAR_108 . VAR_109 ) ; VAR_110 -> VAR_111 = ( TYPE_25 ) METHOD_27 ( VAR_112 . VAR_113 ) ; VAR_114 -> VAR_115 = 8 ; if ( ( VAR_116 . VAR_117 != 0 ) || ( VAR_118 . VAR_119 < 16 ) ) { TYPE_26 VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = VAR_126 . VAR_127 ; VAR_128 = 1 ; if ( VAR_129 -> VAR_130 == 0 ) VAR_131 -> VAR_132 = VAR_133 << VAR_134 . VAR_135 ; } if ( VAR_136 -> VAR_137 ) { TYPE_27 VAR_138 ; TYPE_28 VAR_139 ; VAR_140 = METHOD_28 ( VAR_141 -> VAR_142 , & VAR_143 ) ; if ( VAR_144 & VAR_145 ) if ( ( VAR_146 . VAR_147 != 0 ) && ( VAR_148 . VAR_149 < VAR_150 -> VAR_151 ) ) VAR_152 -> VAR_153 = VAR_154 . VAR_155 ; if ( VAR_156 & VAR_157 ) if ( ( VAR_158 . VAR_159 != 0 ) && ( VAR_160 . VAR_161 < VAR_162 -> VAR_163 ) ) VAR_164 -> VAR_165 = VAR_166 . VAR_167 ; }  if ( VAR_168 -> VAR_169 == VAR_170 )  { TYPE_29 VAR_171 , VAR_172 ; unsigned TYPE_30 * VAR_173 ; if ( METHOD_29 ( VAR_174 , VAR_175 -> VAR_176 ) == VAR_177 ) METHOD_30 ( VAR_178 , ""MemoryAllocationFailed"" ) ; VAR_179 = ( TYPE_31 ) VAR_180 -> VAR_181 ; VAR_182 = ( unsigned TYPE_32 * ) METHOD_31 ( VAR_183 , 4 * sizeof ( * VAR_184 ) ) ; if ( VAR_185 == ( unsigned TYPE_33 * ) VAR_186 ) METHOD_32 ( VAR_187 , ""MemoryAllocationFailed"" ) ; VAR_188 = 4 ; VAR_189 = METHOD_33 ( VAR_190 , VAR_191 * VAR_192 -> VAR_193 , VAR_194 ) ; if ( VAR_195 != ( TYPE_34 ) ( VAR_196 * VAR_197 -> VAR_198 ) ) METHOD_34 ( VAR_199 , ""InsufficientImageDataInFile"" ) ; VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < ( TYPE_35 ) VAR_204 -> VAR_205 ; VAR_206 ++ ) { VAR_207 -> VAR_208 [ VAR_209 ] . VAR_210 = METHOD_35 ( * VAR_211 ++ ) ; VAR_212 -> VAR_213 [ VAR_214 ] . VAR_215 = METHOD_36 ( * VAR_216 ++ ) ; VAR_217 -> VAR_218 [ VAR_219 ] . VAR_220 = METHOD_37 ( * VAR_221 ++ ) ; if ( VAR_222 == 4 ) VAR_223 ++ ; } VAR_224 = ( unsigned TYPE_36 * ) METHOD_38 ( VAR_225 ) ; } if ( VAR_226 . VAR_227 == VAR_228 ) VAR_229 . VAR_230 <<= 1 ; VAR_231 = 4 * ( ( VAR_232 -> VAR_233 * VAR_234 . VAR_235 + 31 ) / 32 ) ; VAR_236 = VAR_237 * VAR_238 -> VAR_239 ; VAR_240 = METHOD_39 ( ( TYPE_37 ) VAR_241 -> VAR_242 , METHOD_40 ( VAR_243 , VAR_244 -> VAR_245 + 256UL ) * sizeof ( * VAR_246 ) ) ; if ( VAR_247 == ( TYPE_38 * ) VAR_248 ) METHOD_41 ( VAR_249 , ""MemoryAllocationFailed"" ) ; VAR_250 = ( unsigned TYPE_39 * ) METHOD_42 ( VAR_251 ) ; if ( ( VAR_252 . VAR_253 == VAR_254 ) || ( VAR_255 . VAR_256 == VAR_257 ) ) { VAR_258 = METHOD_43 ( VAR_259 , VAR_260 , VAR_261 ) ; if ( VAR_262 != ( TYPE_40 ) ( VAR_263 ) ) METHOD_44 ( VAR_264 , ""InsufficientImageDataInFile"" ) ; } else { VAR_265 = METHOD_45 ( VAR_266 , VAR_267 . VAR_268 ? VAR_269 : VAR_270 , VAR_271 ) ; if ( VAR_272 == VAR_273 ) METHOD_46 ( VAR_274 , ""UnableToRunlengthDecodeImage"" ) ; } VAR_275 -> VAR_276 = VAR_277 ; VAR_278 -> VAR_279 = ( TYPE_41 ) VAR_280 . VAR_281 / 100.0 ; VAR_282 -> VAR_283 = ( TYPE_42 ) VAR_284 . VAR_285 / 100.0 ; switch ( VAR_286 . VAR_287 ) { case 1 : { for ( VAR_288 = ( TYPE_43 ) VAR_289 -> VAR_290 - 1 ; VAR_291 >= 0 ; VAR_292 -- ) { VAR_293 = VAR_294 + ( VAR_295 -> VAR_296 - VAR_297 - 1 ) * VAR_298 ; VAR_299 = METHOD_47 ( VAR_300 , 0 , VAR_301 , VAR_302 -> VAR_303 , 1 , VAR_304 ) ; if ( VAR_305 == ( TYPE_44 * ) VAR_306 ) break ; VAR_307 = METHOD_48 ( VAR_308 ) ; for ( VAR_309 = 0 ; VAR_310 < ( ( TYPE_45 ) VAR_311 -> VAR_312 - 7 ) ; VAR_313 += 8 ) { for ( VAR_314 = 0 ; VAR_315 < 8 ; VAR_316 ++ ) { VAR_317 = ( TYPE_46 ) ( ( * VAR_318 ) & ( 0x80 >> VAR_319 ) ? 0x01 : 0x00 ) ; METHOD_49 ( VAR_320 + VAR_321 + VAR_322 , VAR_323 ) ; } VAR_324 ++ ; } if ( ( VAR_325 -> VAR_326 % 8 ) != 0 ) { for ( VAR_327 = 0 ; VAR_328 < ( TYPE_47 ) ( VAR_329 -> VAR_330 % 8 ) ; VAR_331 ++ ) { VAR_332 = ( TYPE_48 ) ( ( * VAR_333 ) & ( 0x80 >> VAR_334 ) ? 0x01 : 0x00 ) ; METHOD_50 ( VAR_335 + VAR_336 + VAR_337 , VAR_338 ) ; } VAR_339 ++ ; } if ( METHOD_51 ( VAR_340 , VAR_341 ) == VAR_342 ) break ; if ( VAR_343 -> VAR_344 == ( TYPE_49 * ) VAR_345 ) { VAR_346 = METHOD_52 ( VAR_347 , VAR_348 , VAR_349 -> VAR_350 - VAR_351 - 1 , VAR_352 -> VAR_353 ) ; if ( VAR_354 == VAR_355 ) break ; } } ( TYPE_50 ) METHOD_53 ( VAR_356 ) ; break ; } case 4 : { for ( VAR_357 = ( TYPE_51 ) VAR_358 -> VAR_359 - 1 ; VAR_360 >= 0 ; VAR_361 -- ) { VAR_362 = VAR_363 + ( VAR_364 -> VAR_365 - VAR_366 - 1 ) * VAR_367 ; VAR_368 = METHOD_54 ( VAR_369 , 0 , VAR_370 , VAR_371 -> VAR_372 , 1 , VAR_373 ) ; if ( VAR_374 == ( TYPE_52 * ) VAR_375 ) break ; VAR_376 = METHOD_55 ( VAR_377 ) ; for ( VAR_378 = 0 ; VAR_379 < ( ( TYPE_53 ) VAR_380 -> VAR_381 - 1 ) ; VAR_382 += 2 ) { VAR_383 = METHOD_56 ( VAR_384 , ( * VAR_385 >> 4 ) & 0xf ) ; METHOD_57 ( VAR_386 + VAR_387 , VAR_388 ) ; VAR_389 = METHOD_58 ( VAR_390 , * VAR_391 & 0xf ) ; METHOD_59 ( VAR_392 + VAR_393 + 1 , VAR_394 ) ; VAR_395 ++ ; } if ( ( VAR_396 -> VAR_397 % 2 ) != 0 ) { VAR_398 = METHOD_60 ( VAR_399 , ( * VAR_400 >> 4 ) & 0xf ) ; METHOD_61 ( VAR_401 + VAR_402 , VAR_403 ) ; VAR_404 ++ ; } if ( METHOD_62 ( VAR_405 , VAR_406 ) == VAR_407 ) break ; if ( VAR_408 -> VAR_409 == ( TYPE_54 * ) VAR_410 ) { VAR_411 = METHOD_63 ( VAR_412 , VAR_413 , VAR_414 -> VAR_415 - VAR_416 - 1 , VAR_417 -> VAR_418 ) ; if ( VAR_419 == VAR_420 ) break ; } } ( TYPE_55 ) METHOD_64 ( VAR_421 ) ; break ; } case 8 : { if ( ( VAR_422 . VAR_423 == VAR_424 ) || ( VAR_425 . VAR_426 == VAR_427 ) ) VAR_428 = VAR_429 -> VAR_430 ; for ( VAR_431 = ( TYPE_56 ) VAR_432 -> VAR_433 - 1 ; VAR_434 >= 0 ; VAR_435 -- ) { VAR_436 = VAR_437 + ( VAR_438 -> VAR_439 - VAR_440 - 1 ) * VAR_441 ; VAR_442 = METHOD_65 ( VAR_443 , 0 , VAR_444 , VAR_445 -> VAR_446 , 1 , VAR_447 ) ; if ( VAR_448 == ( TYPE_57 * ) VAR_449 ) break ; VAR_450 = METHOD_66 ( VAR_451 ) ; for ( VAR_452 = 0 ; VAR_453 < ( TYPE_58 ) VAR_454 -> VAR_455 ; VAR_456 ++ ) { VAR_457 = METHOD_67 ( VAR_458 , * VAR_459 ) ; METHOD_68 ( VAR_460 + VAR_461 , VAR_462 ) ; VAR_463 ++ ; VAR_464 ++ ; } if ( METHOD_69 ( VAR_465 , VAR_466 ) == VAR_467 ) break ; if ( VAR_468 -> VAR_469 == ( TYPE_59 * ) VAR_470 ) { VAR_471 = METHOD_70 ( VAR_472 , VAR_473 , VAR_474 -> VAR_475 - VAR_476 - 1 , VAR_477 -> VAR_478 ) ; if ( VAR_479 == VAR_480 ) break ; } } ( TYPE_60 ) METHOD_71 ( VAR_481 ) ; break ; } case 16 : { unsigned TYPE_61 VAR_482 ; VAR_483 -> VAR_484 = VAR_485 ; if ( VAR_486 . VAR_487 == VAR_488 ) VAR_489 = 2 * VAR_490 -> VAR_491 ; for ( VAR_492 = ( TYPE_62 ) VAR_493 -> VAR_494 - 1 ; VAR_495 >= 0 ; VAR_496 -- ) { VAR_497 = VAR_498 + ( VAR_499 -> VAR_500 - VAR_501 - 1 ) * VAR_502 ; VAR_503 = METHOD_72 ( VAR_504 , 0 , VAR_505 , VAR_506 -> VAR_507 , 1 , VAR_508 ) ; if ( VAR_509 == ( TYPE_63 * ) VAR_510 ) break ; for ( VAR_511 = 0 ; VAR_512 < ( TYPE_64 ) VAR_513 -> VAR_514 ; VAR_515 ++ ) { VAR_516 = ( * VAR_517 ++ ) ; VAR_518 |= ( * VAR_519 ++ << 8 ) ; if ( VAR_520 . VAR_521 == 0 ) { METHOD_73 ( VAR_522 , METHOD_74 ( METHOD_75 ( ( unsigned TYPE_65 ) ( ( VAR_523 >> 10 ) & 0x1f ) ) ) ) ; METHOD_76 ( VAR_524 , METHOD_77 ( METHOD_78 ( ( unsigned TYPE_66 ) ( ( VAR_525 >> 5 ) & 0x1f ) ) ) ) ; METHOD_79 ( VAR_526 , METHOD_80 ( METHOD_81 ( ( unsigned TYPE_67 ) ( VAR_527 & 0x1f ) ) ) ) ; } else { METHOD_82 ( VAR_528 , METHOD_83 ( METHOD_84 ( ( unsigned TYPE_68 ) ( ( VAR_529 >> 11 ) & 0x1f ) ) ) ) ; METHOD_85 ( VAR_530 , METHOD_86 ( METHOD_87 ( ( unsigned TYPE_69 ) ( ( VAR_531 >> 5 ) & 0x3f ) ) ) ) ; METHOD_88 ( VAR_532 , METHOD_89 ( METHOD_90 ( ( unsigned TYPE_70 ) ( VAR_533 & 0x1f ) ) ) ) ; } VAR_534 ++ ; } if ( METHOD_91 ( VAR_535 , VAR_536 ) == VAR_537 ) break ; if ( VAR_538 -> VAR_539 == ( TYPE_71 * ) VAR_540 ) { VAR_541 = METHOD_92 ( VAR_542 , VAR_543 , VAR_544 -> VAR_545 - VAR_546 - 1 , VAR_547 -> VAR_548 ) ; if ( VAR_549 == VAR_550 ) break ; } } break ; } case 24 : case 32 : { for ( VAR_551 = ( TYPE_72 ) VAR_552 -> VAR_553 - 1 ; VAR_554 >= 0 ; VAR_555 -- ) { VAR_556 = VAR_557 + ( VAR_558 -> VAR_559 - VAR_560 - 1 ) * VAR_561 ; VAR_562 = METHOD_93 ( VAR_563 , 0 , VAR_564 , VAR_565 -> VAR_566 , 1 , VAR_567 ) ; if ( VAR_568 == ( TYPE_73 * ) VAR_569 ) break ; for ( VAR_570 = 0 ; VAR_571 < ( TYPE_74 ) VAR_572 -> VAR_573 ; VAR_574 ++ ) { METHOD_94 ( VAR_575 , METHOD_95 ( * VAR_576 ++ ) ) ; METHOD_96 ( VAR_577 , METHOD_97 ( * VAR_578 ++ ) ) ; METHOD_98 ( VAR_579 , METHOD_99 ( * VAR_580 ++ ) ) ; if ( VAR_581 -> VAR_582 != VAR_583 ) METHOD_100 ( VAR_584 , METHOD_101 ( * VAR_585 ++ ) ) ; VAR_586 ++ ; } if ( METHOD_102 ( VAR_587 , VAR_588 ) == VAR_589 ) break ; if ( VAR_590 -> VAR_591 == ( TYPE_75 * ) VAR_592 ) { VAR_593 = METHOD_103 ( VAR_594 , VAR_595 , VAR_596 -> VAR_597 - VAR_598 - 1 , VAR_599 -> VAR_600 ) ; if ( VAR_601 == VAR_602 ) break ; } } break ; } default : METHOD_104 ( VAR_603 , ""ImproperImageHeader"" ) ; } VAR_604 = METHOD_105 ( VAR_605 ) ; if ( METHOD_106 ( VAR_606 ) != VAR_607 ) METHOD_107 ( VAR_608 , VAR_609 , ""UnexpectedEndOfFile"" , VAR_610 -> VAR_611 ) ; if ( VAR_612 . VAR_613 < 0 ) { TYPE_76 * VAR_614 ; VAR_615 = METHOD_108 ( VAR_616 , VAR_617 ) ; if ( VAR_618 != ( TYPE_77 * ) VAR_619 ) { METHOD_109 ( VAR_620 , VAR_621 ) ; VAR_622 = METHOD_110 ( VAR_623 ) ; VAR_624 = VAR_625 ; } } ( TYPE_78 ) METHOD_111 ( VAR_626 ) ; return ( METHOD_112 ( VAR_627 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 ; TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 ; TYPE_7 VAR_7 ; TYPE_8 * VAR_8 ; register TYPE_9 * VAR_9 ; register TYPE_10 VAR_10 ; register TYPE_11 * VAR_11 ; register TYPE_12 VAR_12 ; register unsigned TYPE_13 * VAR_13 ; TYPE_14 VAR_14 , VAR_15 ; TYPE_15 VAR_16 ; unsigned TYPE_16 * VAR_17 ; METHOD_1 ( VAR_18 != ( const TYPE_17 * ) VAR_19 ) ; METHOD_2 ( VAR_20 -> VAR_21 == VAR_22 ) ; if ( VAR_23 -> VAR_24 != VAR_25 ) ( TYPE_18 ) METHOD_3 ( VAR_26 , METHOD_4 ( ) , ""%s"" , VAR_27 -> VAR_28 ) ; METHOD_5 ( VAR_29 != ( TYPE_19 * ) VAR_30 ) ; METHOD_6 ( VAR_31 -> VAR_32 == VAR_33 ) ; VAR_34 = METHOD_7 ( VAR_35 ) ; VAR_36 = METHOD_8 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 == VAR_42 ) { VAR_43 = METHOD_9 ( VAR_44 ) ; return ( ( TYPE_20 * ) VAR_45 ) ; } ( TYPE_21 ) METHOD_10 ( & VAR_46 , 0 , sizeof ( VAR_47 ) ) ; VAR_48 . VAR_49 = METHOD_11 ( VAR_50 ) ; if ( VAR_51 . VAR_52 != 40 ) METHOD_12 ( VAR_53 , ""ImproperImageHeader"" ) ; VAR_54 . VAR_55 = ( TYPE_22 ) METHOD_13 ( VAR_56 ) ; VAR_57 . VAR_58 = ( TYPE_23 ) METHOD_14 ( VAR_59 ) ; VAR_60 . VAR_61 = METHOD_15 ( VAR_62 ) ; VAR_63 . VAR_64 = METHOD_16 ( VAR_65 ) ; VAR_66 . VAR_67 = METHOD_17 ( VAR_68 ) ; VAR_69 . VAR_70 = METHOD_18 ( VAR_71 ) ; VAR_72 . VAR_73 = METHOD_19 ( VAR_74 ) ; VAR_75 . VAR_76 = METHOD_20 ( VAR_77 ) ; VAR_78 . VAR_79 = METHOD_21 ( VAR_80 ) ; VAR_81 . VAR_82 = METHOD_22 ( VAR_83 ) ; if ( ( VAR_84 . VAR_85 == VAR_86 ) && ( ( VAR_87 . VAR_88 == 16 ) || ( VAR_89 . VAR_90 == 32 ) ) ) { VAR_91 . VAR_92 = METHOD_23 ( VAR_93 ) ; VAR_94 . VAR_95 = METHOD_24 ( VAR_96 ) ; VAR_97 . VAR_98 = METHOD_25 ( VAR_99 ) ; } VAR_100 -> VAR_101 = VAR_102 . VAR_103 == 32 ? VAR_104 : VAR_105 ; VAR_106 -> VAR_107 = ( TYPE_24 ) METHOD_26 ( VAR_108 . VAR_109 ) ; VAR_110 -> VAR_111 = ( TYPE_25 ) METHOD_27 ( VAR_112 . VAR_113 ) ; VAR_114 -> VAR_115 = 8 ; if ( ( VAR_116 . VAR_117 != 0 ) || ( VAR_118 . VAR_119 < 16 ) ) { TYPE_26 VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = VAR_126 . VAR_127 ; VAR_128 = 1 ; if ( VAR_129 -> VAR_130 == 0 ) VAR_131 -> VAR_132 = VAR_133 << VAR_134 . VAR_135 ; } if ( VAR_136 -> VAR_137 ) { TYPE_27 VAR_138 ; TYPE_28 VAR_139 ; VAR_140 = METHOD_28 ( VAR_141 -> VAR_142 , & VAR_143 ) ; if ( VAR_144 & VAR_145 ) if ( ( VAR_146 . VAR_147 != 0 ) && ( VAR_148 . VAR_149 < VAR_150 -> VAR_151 ) ) VAR_152 -> VAR_153 = VAR_154 . VAR_155 ; if ( VAR_156 & VAR_157 ) if ( ( VAR_158 . VAR_159 != 0 ) && ( VAR_160 . VAR_161 < VAR_162 -> VAR_163 ) ) VAR_164 -> VAR_165 = VAR_166 . VAR_167 ; } if ( VAR_168 -> VAR_169 == VAR_170 ) { TYPE_29 VAR_171 , VAR_172 ; unsigned TYPE_30 * VAR_173 ; if ( METHOD_29 ( VAR_174 , VAR_175 -> VAR_176 ) == VAR_177 ) METHOD_30 ( VAR_178 , ""MemoryAllocationFailed"" ) ; VAR_179 = ( TYPE_31 ) VAR_180 -> VAR_181 ; VAR_182 = ( unsigned TYPE_32 * ) METHOD_31 ( VAR_183 , 4 * sizeof ( * VAR_184 ) ) ; if ( VAR_185 == ( unsigned TYPE_33 * ) VAR_186 ) METHOD_32 ( VAR_187 , ""MemoryAllocationFailed"" ) ; VAR_188 = 4 ; VAR_189 = METHOD_33 ( VAR_190 , VAR_191 * VAR_192 -> VAR_193 , VAR_194 ) ; if ( VAR_195 != ( TYPE_34 ) ( VAR_196 * VAR_197 -> VAR_198 ) ) METHOD_34 ( VAR_199 , ""InsufficientImageDataInFile"" ) ; VAR_200 = VAR_201 ; for ( VAR_202 = 0 ; VAR_203 < ( TYPE_35 ) VAR_204 -> VAR_205 ; VAR_206 ++ ) { VAR_207 -> VAR_208 [ VAR_209 ] . VAR_210 = METHOD_35 ( * VAR_211 ++ ) ; VAR_212 -> VAR_213 [ VAR_214 ] . VAR_215 = METHOD_36 ( * VAR_216 ++ ) ; VAR_217 -> VAR_218 [ VAR_219 ] . VAR_220 = METHOD_37 ( * VAR_221 ++ ) ; if ( VAR_222 == 4 ) VAR_223 ++ ; } VAR_224 = ( unsigned TYPE_36 * ) METHOD_38 ( VAR_225 ) ; } if ( VAR_226 . VAR_227 == VAR_228 ) VAR_229 . VAR_230 <<= 1 ; VAR_231 = 4 * ( ( VAR_232 -> VAR_233 * VAR_234 . VAR_235 + 31 ) / 32 ) ; VAR_236 = VAR_237 * VAR_238 -> VAR_239 ; VAR_240 = METHOD_39 ( ( TYPE_37 ) VAR_241 -> VAR_242 , METHOD_40 ( VAR_243 , VAR_244 -> VAR_245 + 256UL ) * sizeof ( * VAR_246 ) ) ; if ( VAR_247 == ( TYPE_38 * ) VAR_248 ) METHOD_41 ( VAR_249 , ""MemoryAllocationFailed"" ) ; VAR_250 = ( unsigned TYPE_39 * ) METHOD_42 ( VAR_251 ) ; if ( ( VAR_252 . VAR_253 == VAR_254 ) || ( VAR_255 . VAR_256 == VAR_257 ) ) { VAR_258 = METHOD_43 ( VAR_259 , VAR_260 , VAR_261 ) ; if ( VAR_262 != ( TYPE_40 ) ( VAR_263 ) ) METHOD_44 ( VAR_264 , ""InsufficientImageDataInFile"" ) ; } else { VAR_265 = METHOD_45 ( VAR_266 , VAR_267 . VAR_268 ? VAR_269 : VAR_270 , VAR_271 ) ; if ( VAR_272 == VAR_273 ) METHOD_46 ( VAR_274 , ""UnableToRunlengthDecodeImage"" ) ; } VAR_275 -> VAR_276 = VAR_277 ; VAR_278 -> VAR_279 = ( TYPE_41 ) VAR_280 . VAR_281 / 100.0 ; VAR_282 -> VAR_283 = ( TYPE_42 ) VAR_284 . VAR_285 / 100.0 ; switch ( VAR_286 . VAR_287 ) { case 1 : { for ( VAR_288 = ( TYPE_43 ) VAR_289 -> VAR_290 - 1 ; VAR_291 >= 0 ; VAR_292 -- ) { VAR_293 = VAR_294 + ( VAR_295 -> VAR_296 - VAR_297 - 1 ) * VAR_298 ; VAR_299 = METHOD_47 ( VAR_300 , 0 , VAR_301 , VAR_302 -> VAR_303 , 1 , VAR_304 ) ; if ( VAR_305 == ( TYPE_44 * ) VAR_306 ) break ; VAR_307 = METHOD_48 ( VAR_308 ) ; for ( VAR_309 = 0 ; VAR_310 < ( ( TYPE_45 ) VAR_311 -> VAR_312 - 7 ) ; VAR_313 += 8 ) { for ( VAR_314 = 0 ; VAR_315 < 8 ; VAR_316 ++ ) { VAR_317 = ( TYPE_46 ) ( ( * VAR_318 ) & ( 0x80 >> VAR_319 ) ? 0x01 : 0x00 ) ; METHOD_49 ( VAR_320 + VAR_321 + VAR_322 , VAR_323 ) ; } VAR_324 ++ ; } if ( ( VAR_325 -> VAR_326 % 8 ) != 0 ) { for ( VAR_327 = 0 ; VAR_328 < ( TYPE_47 ) ( VAR_329 -> VAR_330 % 8 ) ; VAR_331 ++ ) { VAR_332 = ( TYPE_48 ) ( ( * VAR_333 ) & ( 0x80 >> VAR_334 ) ? 0x01 : 0x00 ) ; METHOD_50 ( VAR_335 + VAR_336 + VAR_337 , VAR_338 ) ; } VAR_339 ++ ; } if ( METHOD_51 ( VAR_340 , VAR_341 ) == VAR_342 ) break ; if ( VAR_343 -> VAR_344 == ( TYPE_49 * ) VAR_345 ) { VAR_346 = METHOD_52 ( VAR_347 , VAR_348 , VAR_349 -> VAR_350 - VAR_351 - 1 , VAR_352 -> VAR_353 ) ; if ( VAR_354 == VAR_355 ) break ; } } ( TYPE_50 ) METHOD_53 ( VAR_356 ) ; break ; } case 4 : { for ( VAR_357 = ( TYPE_51 ) VAR_358 -> VAR_359 - 1 ; VAR_360 >= 0 ; VAR_361 -- ) { VAR_362 = VAR_363 + ( VAR_364 -> VAR_365 - VAR_366 - 1 ) * VAR_367 ; VAR_368 = METHOD_54 ( VAR_369 , 0 , VAR_370 , VAR_371 -> VAR_372 , 1 , VAR_373 ) ; if ( VAR_374 == ( TYPE_52 * ) VAR_375 ) break ; VAR_376 = METHOD_55 ( VAR_377 ) ; for ( VAR_378 = 0 ; VAR_379 < ( ( TYPE_53 ) VAR_380 -> VAR_381 - 1 ) ; VAR_382 += 2 ) { VAR_383 = METHOD_56 ( VAR_384 , ( * VAR_385 >> 4 ) & 0xf ) ; METHOD_57 ( VAR_386 + VAR_387 , VAR_388 ) ; VAR_389 = METHOD_58 ( VAR_390 , * VAR_391 & 0xf ) ; METHOD_59 ( VAR_392 + VAR_393 + 1 , VAR_394 ) ; VAR_395 ++ ; } if ( ( VAR_396 -> VAR_397 % 2 ) != 0 ) { VAR_398 = METHOD_60 ( VAR_399 , ( * VAR_400 >> 4 ) & 0xf ) ; METHOD_61 ( VAR_401 + VAR_402 , VAR_403 ) ; VAR_404 ++ ; } if ( METHOD_62 ( VAR_405 , VAR_406 ) == VAR_407 ) break ; if ( VAR_408 -> VAR_409 == ( TYPE_54 * ) VAR_410 ) { VAR_411 = METHOD_63 ( VAR_412 , VAR_413 , VAR_414 -> VAR_415 - VAR_416 - 1 , VAR_417 -> VAR_418 ) ; if ( VAR_419 == VAR_420 ) break ; } } ( TYPE_55 ) METHOD_64 ( VAR_421 ) ; break ; } case 8 : { if ( ( VAR_422 . VAR_423 == VAR_424 ) || ( VAR_425 . VAR_426 == VAR_427 ) ) VAR_428 = VAR_429 -> VAR_430 ; for ( VAR_431 = ( TYPE_56 ) VAR_432 -> VAR_433 - 1 ; VAR_434 >= 0 ; VAR_435 -- ) { VAR_436 = VAR_437 + ( VAR_438 -> VAR_439 - VAR_440 - 1 ) * VAR_441 ; VAR_442 = METHOD_65 ( VAR_443 , 0 , VAR_444 , VAR_445 -> VAR_446 , 1 , VAR_447 ) ; if ( VAR_448 == ( TYPE_57 * ) VAR_449 ) break ; VAR_450 = METHOD_66 ( VAR_451 ) ; for ( VAR_452 = 0 ; VAR_453 < ( TYPE_58 ) VAR_454 -> VAR_455 ; VAR_456 ++ ) { VAR_457 = METHOD_67 ( VAR_458 , * VAR_459 ) ; METHOD_68 ( VAR_460 + VAR_461 , VAR_462 ) ; VAR_463 ++ ; VAR_464 ++ ; } if ( METHOD_69 ( VAR_465 , VAR_466 ) == VAR_467 ) break ; if ( VAR_468 -> VAR_469 == ( TYPE_59 * ) VAR_470 ) { VAR_471 = METHOD_70 ( VAR_472 , VAR_473 , VAR_474 -> VAR_475 - VAR_476 - 1 , VAR_477 -> VAR_478 ) ; if ( VAR_479 == VAR_480 ) break ; } } ( TYPE_60 ) METHOD_71 ( VAR_481 ) ; break ; } case 16 : { unsigned TYPE_61 VAR_482 ; VAR_483 -> VAR_484 = VAR_485 ; if ( VAR_486 . VAR_487 == VAR_488 ) VAR_489 = 2 * VAR_490 -> VAR_491 ; for ( VAR_492 = ( TYPE_62 ) VAR_493 -> VAR_494 - 1 ; VAR_495 >= 0 ; VAR_496 -- ) { VAR_497 = VAR_498 + ( VAR_499 -> VAR_500 - VAR_501 - 1 ) * VAR_502 ; VAR_503 = METHOD_72 ( VAR_504 , 0 , VAR_505 , VAR_506 -> VAR_507 , 1 , VAR_508 ) ; if ( VAR_509 == ( TYPE_63 * ) VAR_510 ) break ; for ( VAR_511 = 0 ; VAR_512 < ( TYPE_64 ) VAR_513 -> VAR_514 ; VAR_515 ++ ) { VAR_516 = ( * VAR_517 ++ ) ; VAR_518 |= ( * VAR_519 ++ << 8 ) ; if ( VAR_520 . VAR_521 == 0 ) { METHOD_73 ( VAR_522 , METHOD_74 ( METHOD_75 ( ( unsigned TYPE_65 ) ( ( VAR_523 >> 10 ) & 0x1f ) ) ) ) ; METHOD_76 ( VAR_524 , METHOD_77 ( METHOD_78 ( ( unsigned TYPE_66 ) ( ( VAR_525 >> 5 ) & 0x1f ) ) ) ) ; METHOD_79 ( VAR_526 , METHOD_80 ( METHOD_81 ( ( unsigned TYPE_67 ) ( VAR_527 & 0x1f ) ) ) ) ; } else { METHOD_82 ( VAR_528 , METHOD_83 ( METHOD_84 ( ( unsigned TYPE_68 ) ( ( VAR_529 >> 11 ) & 0x1f ) ) ) ) ; METHOD_85 ( VAR_530 , METHOD_86 ( METHOD_87 ( ( unsigned TYPE_69 ) ( ( VAR_531 >> 5 ) & 0x3f ) ) ) ) ; METHOD_88 ( VAR_532 , METHOD_89 ( METHOD_90 ( ( unsigned TYPE_70 ) ( VAR_533 & 0x1f ) ) ) ) ; } VAR_534 ++ ; } if ( METHOD_91 ( VAR_535 , VAR_536 ) == VAR_537 ) break ; if ( VAR_538 -> VAR_539 == ( TYPE_71 * ) VAR_540 ) { VAR_541 = METHOD_92 ( VAR_542 , VAR_543 , VAR_544 -> VAR_545 - VAR_546 - 1 , VAR_547 -> VAR_548 ) ; if ( VAR_549 == VAR_550 ) break ; } } break ; } case 24 : case 32 : { for ( VAR_551 = ( TYPE_72 ) VAR_552 -> VAR_553 - 1 ; VAR_554 >= 0 ; VAR_555 -- ) { VAR_556 = VAR_557 + ( VAR_558 -> VAR_559 - VAR_560 - 1 ) * VAR_561 ; VAR_562 = METHOD_93 ( VAR_563 , 0 , VAR_564 , VAR_565 -> VAR_566 , 1 , VAR_567 ) ; if ( VAR_568 == ( TYPE_73 * ) VAR_569 ) break ; for ( VAR_570 = 0 ; VAR_571 < ( TYPE_74 ) VAR_572 -> VAR_573 ; VAR_574 ++ ) { METHOD_94 ( VAR_575 , METHOD_95 ( * VAR_576 ++ ) ) ; METHOD_96 ( VAR_577 , METHOD_97 ( * VAR_578 ++ ) ) ; METHOD_98 ( VAR_579 , METHOD_99 ( * VAR_580 ++ ) ) ; if ( VAR_581 -> VAR_582 != VAR_583 ) METHOD_100 ( VAR_584 , METHOD_101 ( * VAR_585 ++ ) ) ; VAR_586 ++ ; } if ( METHOD_102 ( VAR_587 , VAR_588 ) == VAR_589 ) break ; if ( VAR_590 -> VAR_591 == ( TYPE_75 * ) VAR_592 ) { VAR_593 = METHOD_103 ( VAR_594 , VAR_595 , VAR_596 -> VAR_597 - VAR_598 - 1 , VAR_599 -> VAR_600 ) ; if ( VAR_601 == VAR_602 ) break ; } } break ; } default : METHOD_104 ( VAR_603 , ""ImproperImageHeader"" ) ; } VAR_604 = METHOD_105 ( VAR_605 ) ; if ( METHOD_106 ( VAR_606 ) != VAR_607 ) METHOD_107 ( VAR_608 , VAR_609 , ""UnexpectedEndOfFile"" , VAR_610 -> VAR_611 ) ; if ( VAR_612 . VAR_613 < 0 ) { TYPE_76 * VAR_614 ; VAR_615 = METHOD_108 ( VAR_616 , VAR_617 ) ; if ( VAR_618 != ( TYPE_77 * ) VAR_619 ) { METHOD_109 ( VAR_620 , VAR_621 ) ; VAR_622 = METHOD_110 ( VAR_623 ) ; VAR_624 = VAR_625 ; } } ( TYPE_78 ) METHOD_111 ( VAR_626 ) ; return ( METHOD_112 ( VAR_627 ) ) ; }",578
579,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; TYPE_2 VAR_4 = VAR_5 -> VAR_6 ; TYPE_3 VAR_7 = VAR_8 -> VAR_9 ; switch ( VAR_10 ) { case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : case VAR_16 : break ; case VAR_17 : return METHOD_1 ( VAR_18 , VAR_19 ) ; case VAR_20 : VAR_21 &= ~ ( TYPE_4 ) 0x40 ; VAR_22 &= ~ ( TYPE_5 ) 0x100 ; VAR_23 &= ~ ( TYPE_6 ) 0x8 ; if ( VAR_24 != 0 ) { METHOD_2 ( VAR_25 , ""unimplementedHWCRwrmsr:0x%llx\\n"" , VAR_26 ) ; return 1 ; } break ; case VAR_27 : if ( VAR_28 != 0 ) { METHOD_3 ( VAR_29 , ""unimplementedMMIO_CONF_BASEwrmsr:"" ""0x%llx\\n"" , VAR_30 ) ; return 1 ; } break ; case VAR_31 : if ( ! VAR_32 ) { break ; } else if ( VAR_33 & ~ ( VAR_34 | VAR_35 ) ) { return 1 ; } METHOD_4 ( VAR_36 , ""%s:MSR_IA32_DEBUGCTLMSR0x%llx,nop\\n"" , VAR_37 , VAR_38 ) ; break ; case 0x200 ... 0x2ff : return METHOD_5 ( VAR_39 , VAR_40 , VAR_41 ) ; case VAR_42 : METHOD_6 ( VAR_43 , VAR_44 ) ; break ; case VAR_45 ... VAR_46 + 0x3ff : return METHOD_7 ( VAR_47 , VAR_48 , VAR_49 ) ; case VAR_50 : METHOD_8 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : if ( METHOD_9 ( VAR_54 ) ) { if ( ! VAR_55 -> VAR_56 ) { TYPE_7 VAR_57 = VAR_58 - VAR_59 -> VAR_60 . VAR_61 ; VAR_62 -> METHOD_10 ( VAR_63 , VAR_64 , VAR_65 ) ; } VAR_66 -> VAR_67 . VAR_68 = VAR_69 ; } break ; case VAR_70 : VAR_71 -> VAR_72 . VAR_73 = VAR_74 ; break ; case VAR_75 : case VAR_76 : VAR_77 -> VAR_78 -> VAR_79 . VAR_80 = VAR_81 ; METHOD_11 ( VAR_82 -> VAR_83 , VAR_84 ) ; break ; case VAR_85 : case VAR_86 : { METHOD_12 ( VAR_87 ) ; VAR_88 -> VAR_89 . VAR_90 = VAR_91 ; METHOD_13 ( VAR_92 , VAR_93 ) ; if ( ! ( VAR_94 & 1 ) ) break ;  VAR_95 -> VAR_96 . VAR_97 = VAR_98 & ~ ( VAR_99 | 1 ) ;  VAR_100 -> VAR_101 . VAR_102 = METHOD_14 ( VAR_103 -> VAR_104 , VAR_105 >> VAR_106 ) ; if ( METHOD_15 ( VAR_107 -> VAR_108 . VAR_109 ) ) VAR_110 -> VAR_111 . VAR_112 = VAR_113 ; break ; } case VAR_114 : if ( METHOD_16 ( VAR_115 , VAR_116 ) ) return 1 ; break ; case VAR_117 : if ( METHOD_17 ( ! METHOD_18 ( ) ) ) return 1 ; if ( VAR_118 & VAR_119 ) return 1 ; if ( METHOD_19 ( VAR_120 -> VAR_121 , & VAR_122 -> VAR_123 . VAR_124 . VAR_125 , VAR_126 & VAR_127 ) ) return 1 ; VAR_128 -> VAR_129 . VAR_130 . VAR_131 = VAR_132 ; if ( ! ( VAR_133 & VAR_134 ) ) break ; VAR_135 -> VAR_136 . VAR_137 . VAR_138 = VAR_139 -> VAR_140 . VAR_141 ; METHOD_20 ( ) ; METHOD_21 ( VAR_142 ) ; METHOD_22 ( ) ; METHOD_23 ( VAR_143 , VAR_144 ) ; break ; case VAR_145 : if ( METHOD_24 ( VAR_146 , VAR_147 ) ) return 1 ; break ; case VAR_148 : case VAR_149 : case VAR_150 ... VAR_151 + 4 * VAR_152 - 1 : return METHOD_25 ( VAR_153 , VAR_154 , VAR_155 ) ; case VAR_156 : case VAR_157 : case VAR_158 : case VAR_159 : if ( VAR_160 != 0 ) METHOD_26 ( VAR_161 , ""unimplementedperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_162 , VAR_163 ) ; break ; case VAR_164 : case VAR_165 : case VAR_166 : case VAR_167 : METHOD_27 ( VAR_168 , ""unimplementedperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_169 , VAR_170 ) ; break ; case VAR_171 : case VAR_172 : VAR_173 = VAR_174 ; case VAR_175 : case VAR_176 : if ( METHOD_28 ( VAR_177 , VAR_178 ) ) return METHOD_29 ( VAR_179 , VAR_180 , VAR_181 ) ; if ( VAR_182 || VAR_183 != 0 ) METHOD_30 ( VAR_184 , ""disabledperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_185 , VAR_186 ) ; break ; case VAR_187 : break ; case VAR_188 ... VAR_189 : if ( METHOD_31 ( VAR_190 ) ) { TYPE_8 VAR_191 ; METHOD_32 ( & VAR_192 -> VAR_193 -> VAR_194 ) ; VAR_195 = METHOD_33 ( VAR_196 , VAR_197 , VAR_198 ) ; METHOD_34 ( & VAR_199 -> VAR_200 -> VAR_201 ) ; return VAR_202 ; } else return METHOD_35 ( VAR_203 , VAR_204 , VAR_205 ) ; break ; case VAR_206 : METHOD_36 ( VAR_207 , ""ignoredwrmsr:0x%xdata%llx\\n"" , VAR_208 , VAR_209 ) ; break ; case VAR_210 : if ( ! METHOD_37 ( VAR_211 ) ) return 1 ; VAR_212 -> VAR_213 . VAR_214 . VAR_215 = VAR_216 ; break ; case VAR_217 : if ( ! METHOD_38 ( VAR_218 ) ) return 1 ; VAR_219 -> VAR_220 . VAR_221 . VAR_222 = VAR_223 ; break ; default : if ( VAR_224 && ( VAR_225 == VAR_226 -> VAR_227 -> VAR_228 . METHOD_39 . VAR_229 ) ) return METHOD_40 ( VAR_230 , VAR_231 ) ; if ( METHOD_41 ( VAR_232 , VAR_233 ) ) return METHOD_42 ( VAR_234 , VAR_235 , VAR_236 ) ; if ( ! VAR_237 ) { METHOD_43 ( VAR_238 , ""unhandledwrmsr:0x%xdata%llx\\n"" , VAR_239 , VAR_240 ) ; return 1 ; } else { METHOD_44 ( VAR_241 , ""ignoredwrmsr:0x%xdata%llx\\n"" , VAR_242 , VAR_243 ) ; break ; } } return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 = VAR_3 ; TYPE_2 VAR_4 = VAR_5 -> VAR_6 ; TYPE_3 VAR_7 = VAR_8 -> VAR_9 ; switch ( VAR_10 ) { case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : case VAR_16 : break ; case VAR_17 : return METHOD_1 ( VAR_18 , VAR_19 ) ; case VAR_20 : VAR_21 &= ~ ( TYPE_4 ) 0x40 ; VAR_22 &= ~ ( TYPE_5 ) 0x100 ; VAR_23 &= ~ ( TYPE_6 ) 0x8 ; if ( VAR_24 != 0 ) { METHOD_2 ( VAR_25 , ""unimplementedHWCRwrmsr:0x%llx\\n"" , VAR_26 ) ; return 1 ; } break ; case VAR_27 : if ( VAR_28 != 0 ) { METHOD_3 ( VAR_29 , ""unimplementedMMIO_CONF_BASEwrmsr:"" ""0x%llx\\n"" , VAR_30 ) ; return 1 ; } break ; case VAR_31 : if ( ! VAR_32 ) { break ; } else if ( VAR_33 & ~ ( VAR_34 | VAR_35 ) ) { return 1 ; } METHOD_4 ( VAR_36 , ""%s:MSR_IA32_DEBUGCTLMSR0x%llx,nop\\n"" , VAR_37 , VAR_38 ) ; break ; case 0x200 ... 0x2ff : return METHOD_5 ( VAR_39 , VAR_40 , VAR_41 ) ; case VAR_42 : METHOD_6 ( VAR_43 , VAR_44 ) ; break ; case VAR_45 ... VAR_46 + 0x3ff : return METHOD_7 ( VAR_47 , VAR_48 , VAR_49 ) ; case VAR_50 : METHOD_8 ( VAR_51 , VAR_52 ) ; break ; case VAR_53 : if ( METHOD_9 ( VAR_54 ) ) { if ( ! VAR_55 -> VAR_56 ) { TYPE_7 VAR_57 = VAR_58 - VAR_59 -> VAR_60 . VAR_61 ; VAR_62 -> METHOD_10 ( VAR_63 , VAR_64 , VAR_65 ) ; } VAR_66 -> VAR_67 . VAR_68 = VAR_69 ; } break ; case VAR_70 : VAR_71 -> VAR_72 . VAR_73 = VAR_74 ; break ; case VAR_75 : case VAR_76 : VAR_77 -> VAR_78 -> VAR_79 . VAR_80 = VAR_81 ; METHOD_11 ( VAR_82 -> VAR_83 , VAR_84 ) ; break ; case VAR_85 : case VAR_86 : { METHOD_12 ( VAR_87 ) ; VAR_88 -> VAR_89 . VAR_90 = VAR_91 ; METHOD_13 ( VAR_92 , VAR_93 ) ; if ( ! ( VAR_94 & 1 ) ) break ; VAR_95 -> VAR_96 . VAR_97 = VAR_98 & ~ ( VAR_99 | 1 ) ; if ( VAR_241 -> VAR_228 . VAR_97 & ( sizeof ( struct STRUCT_OR_UNION_2 ) - 1 ) ) break ; VAR_100 -> VAR_101 . VAR_102 = METHOD_14 ( VAR_103 -> VAR_104 , VAR_105 >> VAR_106 ) ; if ( METHOD_15 ( VAR_107 -> VAR_108 . VAR_109 ) ) VAR_110 -> VAR_111 . VAR_112 = VAR_113 ; break ; } case VAR_114 : if ( METHOD_16 ( VAR_115 , VAR_116 ) ) return 1 ; break ; case VAR_117 : if ( METHOD_17 ( ! METHOD_18 ( ) ) ) return 1 ; if ( VAR_118 & VAR_119 ) return 1 ; if ( METHOD_19 ( VAR_120 -> VAR_121 , & VAR_122 -> VAR_123 . VAR_124 . VAR_125 , VAR_126 & VAR_127 ) ) return 1 ; VAR_128 -> VAR_129 . VAR_130 . VAR_131 = VAR_132 ; if ( ! ( VAR_133 & VAR_134 ) ) break ; VAR_135 -> VAR_136 . VAR_137 . VAR_138 = VAR_139 -> VAR_140 . VAR_141 ; METHOD_20 ( ) ; METHOD_21 ( VAR_142 ) ; METHOD_22 ( ) ; METHOD_23 ( VAR_143 , VAR_144 ) ; break ; case VAR_145 : if ( METHOD_24 ( VAR_146 , VAR_147 ) ) return 1 ; break ; case VAR_148 : case VAR_149 : case VAR_150 ... VAR_151 + 4 * VAR_152 - 1 : return METHOD_25 ( VAR_153 , VAR_154 , VAR_155 ) ; case VAR_156 : case VAR_157 : case VAR_158 : case VAR_159 : if ( VAR_160 != 0 ) METHOD_26 ( VAR_161 , ""unimplementedperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_162 , VAR_163 ) ; break ; case VAR_164 : case VAR_165 : case VAR_166 : case VAR_167 : METHOD_27 ( VAR_168 , ""unimplementedperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_169 , VAR_170 ) ; break ; case VAR_171 : case VAR_172 : VAR_173 = VAR_174 ; case VAR_175 : case VAR_176 : if ( METHOD_28 ( VAR_177 , VAR_178 ) ) return METHOD_29 ( VAR_179 , VAR_180 , VAR_181 ) ; if ( VAR_182 || VAR_183 != 0 ) METHOD_30 ( VAR_184 , ""disabledperfctrwrmsr:"" ""0x%xdata0x%llx\\n"" , VAR_185 , VAR_186 ) ; break ; case VAR_187 : break ; case VAR_188 ... VAR_189 : if ( METHOD_31 ( VAR_190 ) ) { TYPE_8 VAR_191 ; METHOD_32 ( & VAR_192 -> VAR_193 -> VAR_194 ) ; VAR_195 = METHOD_33 ( VAR_196 , VAR_197 , VAR_198 ) ; METHOD_34 ( & VAR_199 -> VAR_200 -> VAR_201 ) ; return VAR_202 ; } else return METHOD_35 ( VAR_203 , VAR_204 , VAR_205 ) ; break ; case VAR_206 : METHOD_36 ( VAR_207 , ""ignoredwrmsr:0x%xdata%llx\\n"" , VAR_208 , VAR_209 ) ; break ; case VAR_210 : if ( ! METHOD_37 ( VAR_211 ) ) return 1 ; VAR_212 -> VAR_213 . VAR_214 . VAR_215 = VAR_216 ; break ; case VAR_217 : if ( ! METHOD_38 ( VAR_218 ) ) return 1 ; VAR_219 -> VAR_220 . VAR_221 . VAR_222 = VAR_223 ; break ; default : if ( VAR_224 && ( VAR_225 == VAR_226 -> VAR_227 -> VAR_228 . METHOD_39 . VAR_229 ) ) return METHOD_40 ( VAR_230 , VAR_231 ) ; if ( METHOD_41 ( VAR_232 , VAR_233 ) ) return METHOD_42 ( VAR_234 , VAR_235 , VAR_236 ) ; if ( ! VAR_237 ) { METHOD_43 ( VAR_238 , ""unhandledwrmsr:0x%xdata%llx\\n"" , VAR_239 , VAR_240 ) ; return 1 ; } else { METHOD_44 ( VAR_241 , ""ignoredwrmsr:0x%xdata%llx\\n"" , VAR_242 , VAR_243 ) ; break ; } } return 0 ; }",579
580,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; unsigned TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( * VAR_8 ) , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 -> VAR_13 = & VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 -> VAR_21 ) ; if ( METHOD_3 ( VAR_22 -> VAR_23 ) ) return METHOD_4 ( VAR_24 -> VAR_25 ) ;  for ( VAR_26 = 0 ; VAR_27 <= VAR_28 ; VAR_29 ++ ) {  VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( VAR_36 ) return VAR_37 ; } METHOD_6 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_8 ( VAR_45 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; unsigned TYPE_1 VAR_3 ; TYPE_2 VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( * VAR_8 ) , VAR_9 ) ; if ( ! VAR_10 ) return - VAR_11 ; VAR_12 -> VAR_13 = & VAR_14 -> VAR_15 ; VAR_16 -> VAR_17 = METHOD_2 ( VAR_18 -> VAR_19 . VAR_20 -> VAR_21 ) ; if ( METHOD_3 ( VAR_22 -> VAR_23 ) ) return METHOD_4 ( VAR_24 -> VAR_25 ) ; for ( VAR_26 = 0 ; VAR_27 <= VAR_28 ; VAR_29 ++ ) { VAR_30 = METHOD_5 ( VAR_31 , VAR_32 , & VAR_33 -> VAR_34 [ VAR_35 ] ) ; if ( VAR_36 ) return VAR_37 ; } METHOD_6 ( & VAR_38 -> VAR_39 , VAR_40 ) ; VAR_41 = METHOD_7 ( VAR_42 -> VAR_43 , VAR_44 ) ; return METHOD_8 ( VAR_45 ) ; }",580
581,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; static TYPE_6 VAR_7 = VAR_8 ; if ( ! VAR_9 && METHOD_1 ( & VAR_10 ) ) return ( VAR_11 ) ; switch ( VAR_12 -> VAR_13 ) { case VAR_14 : if ( * VAR_15 ) { if ( ( VAR_16 = METHOD_2 ( VAR_17 , * VAR_18 , & VAR_19 ) ) != 0 ) return VAR_20 ; } if ( ! METHOD_3 ( VAR_21 , & VAR_22 ) ) return VAR_23 ; if ( VAR_24 ) METHOD_4 ( VAR_25 ) ; break ; case VAR_26 : if ( ! METHOD_5 ( VAR_27 , & VAR_28 ) ) return VAR_29 ; if ( VAR_30 ) { VAR_31 = METHOD_6 ( VAR_32 , VAR_33 , & VAR_34 ) ; if ( VAR_35 != 0 ) return VAR_36 ; * VAR_37 = VAR_38 ; METHOD_7 ( VAR_39 ) ; } else * VAR_40 = VAR_41 ; break ; case VAR_42 : if ( * VAR_43 != VAR_44 ) METHOD_8 ( VAR_45 , * VAR_46 ) ;  break ;  } return VAR_47 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 = VAR_6 ; static TYPE_6 VAR_7 = VAR_8 ; if ( ! VAR_9 && METHOD_1 ( & VAR_10 ) ) return ( VAR_11 ) ; switch ( VAR_12 -> VAR_13 ) { case VAR_14 : if ( * VAR_15 ) { if ( ( VAR_16 = METHOD_2 ( VAR_17 , * VAR_18 , & VAR_19 ) ) != 0 ) return VAR_20 ; } if ( ! METHOD_3 ( VAR_21 , & VAR_22 ) ) return VAR_23 ; if ( VAR_24 ) METHOD_4 ( VAR_25 ) ; break ; case VAR_26 : if ( ! METHOD_5 ( VAR_27 , & VAR_28 ) ) return VAR_29 ; if ( VAR_30 ) { VAR_31 = METHOD_6 ( VAR_32 , VAR_33 , & VAR_34 ) ; if ( VAR_35 != 0 ) return VAR_36 ; * VAR_37 = VAR_38 ; METHOD_7 ( VAR_39 ) ; } else * VAR_40 = VAR_41 ; break ; case VAR_42 : if ( * VAR_43 != VAR_44 ) METHOD_8 ( VAR_45 , * VAR_46 ) ; * VAR_46 = VAR_44 ; break ; } return VAR_47 ; }",581
582,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , const struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_5 -> VAR_6 ) ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; const struct STRUCT_OR_UNION_8 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; struct STRUCT_OR_UNION_10 VAR_16 ; struct STRUCT_OR_UNION_11 VAR_17 ; struct STRUCT_OR_UNION_12 VAR_18 ; struct STRUCT_OR_UNION_13 VAR_19 = { 0 } ; struct STRUCT_OR_UNION_14 VAR_20 ; TYPE_4 VAR_21 = 0 ; TYPE_5 VAR_22 = 0 ; TYPE_6 VAR_23 ; TYPE_7 VAR_24 = 0 ; TYPE_8 VAR_25 = METHOD_3 ( STRUCT_OR_UNION_15 , VAR_26 -> VAR_27 ) ; if ( ( TYPE_9 * ) VAR_28 < VAR_29 -> VAR_30 || ( METHOD_4 ( VAR_31 ) + sizeof ( * VAR_32 ) ) > METHOD_5 ( VAR_33 ) ) return ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 ) ; if ( METHOD_7 ( STRUCT_OR_UNION_16 , & VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , 0 ) || METHOD_8 ( STRUCT_OR_UNION_17 , VAR_41 -> VAR_42 , & VAR_43 -> VAR_44 ) ) VAR_45 = & VAR_46 -> VAR_47 ; if ( VAR_48 & VAR_49 || VAR_50 -> VAR_51 != VAR_52 ) { if ( VAR_53 != VAR_54 && ! ( VAR_55 == VAR_56 && VAR_57 == VAR_58 && ( METHOD_9 ( VAR_59 , VAR_60 ) ) ) ) return ; VAR_61 = VAR_62 ; } VAR_63 = METHOD_10 ( & VAR_64 -> VAR_65 ) ; if ( METHOD_11 ( VAR_66 ) ) VAR_67 = VAR_68 -> VAR_69 -> VAR_70 ;  else   VAR_71 = METHOD_12 ( METHOD_13 ( VAR_72 ) -> VAR_73 ) ;  if ( ( VAR_74 == VAR_75 ) || ( VAR_76 & VAR_77 ) ) { METHOD_14 ( ""icmp6_send:addr_any/mcastsource[%pI6c>%pI6c]\\n"" , & VAR_78 -> VAR_79 , & VAR_80 -> VAR_81 ) ; return ; } if ( METHOD_15 ( VAR_82 ) ) { METHOD_16 ( ""icmp6_send:noreplytoicmperror[%pI6c>%pI6c]\\n"" , & VAR_83 -> VAR_84 , & VAR_85 -> VAR_86 ) ; return ; } METHOD_17 ( VAR_87 ) ; METHOD_18 ( & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = VAR_92 ; VAR_93 . VAR_94 = VAR_95 -> VAR_96 ; if ( VAR_97 ) VAR_98 = VAR_99 ; if ( VAR_100 ) VAR_101 . VAR_102 = * VAR_103 ; VAR_104 . VAR_105 = VAR_106 ; VAR_107 . VAR_108 = VAR_109 ; VAR_110 . VAR_111 = VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; METHOD_19 ( VAR_116 , METHOD_20 ( & VAR_117 ) ) ; VAR_118 = METHOD_21 ( STRUCT_OR_UNION_18 ) ; if ( ! VAR_119 ) return ; VAR_120 -> VAR_121 = VAR_122 ; VAR_123 = METHOD_22 ( VAR_124 ) ; if ( ! METHOD_23 ( VAR_125 , VAR_126 , & VAR_127 ) ) goto VAR_128 ; VAR_129 . VAR_130 = VAR_131 ; VAR_132 . VAR_133 = VAR_134 ; VAR_135 . VAR_136 = 0 ; VAR_137 . VAR_138 = METHOD_24 ( VAR_139 ) ; if ( ! VAR_140 . VAR_141 && METHOD_25 ( & VAR_142 . VAR_143 ) ) VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; else if ( ! VAR_148 . VAR_149 ) VAR_150 . VAR_151 = VAR_152 -> VAR_153 ; VAR_154 . VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = METHOD_26 ( VAR_160 . VAR_161 , VAR_162 . VAR_163 ) ; VAR_164 = METHOD_27 ( STRUCT_OR_UNION_19 , VAR_165 , VAR_166 , & VAR_167 ) ; if ( METHOD_28 ( VAR_168 ) ) goto VAR_169 ; VAR_170 . VAR_171 = METHOD_29 ( VAR_172 , & VAR_173 , VAR_174 ) ; VAR_175 . VAR_176 = VAR_177 -> VAR_178 ; VAR_179 . VAR_180 = VAR_181 ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 = METHOD_30 ( VAR_187 ) ; VAR_188 . VAR_189 = VAR_190 ; VAR_191 = VAR_192 -> VAR_193 - VAR_194 . VAR_195 ; VAR_196 = min_t ( unsigned TYPE_10 , VAR_197 , VAR_198 - sizeof ( struct STRUCT_OR_UNION_20 ) - sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( VAR_199 < 0 ) { METHOD_31 ( ""icmp:lenproblem[%pI6c>%pI6c]\\n"" , & VAR_200 -> VAR_201 , & VAR_202 -> VAR_203 ) ; goto VAR_204 ; } METHOD_32 ( ) ; VAR_205 = METHOD_33 ( VAR_206 -> VAR_207 ) ; VAR_208 = METHOD_34 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 + sizeof ( struct STRUCT_OR_UNION_22 ) , sizeof ( struct STRUCT_OR_UNION_23 ) , & VAR_213 , & VAR_214 , ( struct STRUCT_OR_UNION_24 * ) VAR_215 , VAR_216 , & VAR_217 ) ; if ( VAR_218 ) { METHOD_35 ( STRUCT_OR_UNION_25 , VAR_219 , VAR_220 ) ; METHOD_36 ( VAR_221 ) ; } else { VAR_222 = METHOD_37 ( VAR_223 , & VAR_224 , & VAR_225 , VAR_226 + sizeof ( struct STRUCT_OR_UNION_26 ) ) ; } METHOD_38 ( ) ; VAR_227 : METHOD_39 ( VAR_228 ) ; VAR_229 : METHOD_40 ( VAR_230 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , const struct STRUCT_OR_UNION_1 * VAR_4 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = METHOD_1 ( VAR_5 -> VAR_6 ) ; struct STRUCT_OR_UNION_4 * VAR_7 = VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 = METHOD_2 ( VAR_10 ) ; struct STRUCT_OR_UNION_6 * VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; const struct STRUCT_OR_UNION_8 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_9 * VAR_15 ; struct STRUCT_OR_UNION_10 VAR_16 ; struct STRUCT_OR_UNION_11 VAR_17 ; struct STRUCT_OR_UNION_12 VAR_18 ; struct STRUCT_OR_UNION_13 VAR_19 = { 0 } ; struct STRUCT_OR_UNION_14 VAR_20 ; TYPE_4 VAR_21 = 0 ; TYPE_5 VAR_22 = 0 ; TYPE_6 VAR_23 ; TYPE_7 VAR_24 = 0 ; TYPE_8 VAR_25 = METHOD_3 ( STRUCT_OR_UNION_15 , VAR_26 -> VAR_27 ) ; if ( ( TYPE_9 * ) VAR_28 < VAR_29 -> VAR_30 || ( METHOD_4 ( VAR_31 ) + sizeof ( * VAR_32 ) ) > METHOD_5 ( VAR_33 ) ) return ; VAR_34 = METHOD_6 ( & VAR_35 -> VAR_36 ) ; if ( METHOD_7 ( STRUCT_OR_UNION_16 , & VAR_37 -> VAR_38 , VAR_39 -> VAR_40 , 0 ) || METHOD_8 ( STRUCT_OR_UNION_17 , VAR_41 -> VAR_42 , & VAR_43 -> VAR_44 ) ) VAR_45 = & VAR_46 -> VAR_47 ; if ( VAR_48 & VAR_49 || VAR_50 -> VAR_51 != VAR_52 ) { if ( VAR_53 != VAR_54 && ! ( VAR_55 == VAR_56 && VAR_57 == VAR_58 && ( METHOD_9 ( VAR_59 , VAR_60 ) ) ) ) return ; VAR_61 = VAR_62 ; } VAR_63 = METHOD_10 ( & VAR_64 -> VAR_65 ) ; if ( METHOD_11 ( VAR_66 ) ) VAR_67 = VAR_68 -> VAR_69 -> VAR_70 ; else { VAR_228 = METHOD_13 ( VAR_206 ) ; VAR_71 = METHOD_12 ( VAR_228 ? VAR_228 -> VAR_207 : VAR_206 -> VAR_207 ) ; } if ( ( VAR_74 == VAR_75 ) || ( VAR_76 & VAR_77 ) ) { METHOD_14 ( ""icmp6_send:addr_any/mcastsource[%pI6c>%pI6c]\\n"" , & VAR_78 -> VAR_79 , & VAR_80 -> VAR_81 ) ; return ; } if ( METHOD_15 ( VAR_82 ) ) { METHOD_16 ( ""icmp6_send:noreplytoicmperror[%pI6c>%pI6c]\\n"" , & VAR_83 -> VAR_84 , & VAR_85 -> VAR_86 ) ; return ; } METHOD_17 ( VAR_87 ) ; METHOD_18 ( & VAR_88 , 0 , sizeof ( VAR_89 ) ) ; VAR_90 . VAR_91 = VAR_92 ; VAR_93 . VAR_94 = VAR_95 -> VAR_96 ; if ( VAR_97 ) VAR_98 = VAR_99 ; if ( VAR_100 ) VAR_101 . VAR_102 = * VAR_103 ; VAR_104 . VAR_105 = VAR_106 ; VAR_107 . VAR_108 = VAR_109 ; VAR_110 . VAR_111 = VAR_112 ; VAR_113 . VAR_114 = VAR_115 ; METHOD_19 ( VAR_116 , METHOD_20 ( & VAR_117 ) ) ; VAR_118 = METHOD_21 ( STRUCT_OR_UNION_18 ) ; if ( ! VAR_119 ) return ; VAR_120 -> VAR_121 = VAR_122 ; VAR_123 = METHOD_22 ( VAR_124 ) ; if ( ! METHOD_23 ( VAR_125 , VAR_126 , & VAR_127 ) ) goto VAR_128 ; VAR_129 . VAR_130 = VAR_131 ; VAR_132 . VAR_133 = VAR_134 ; VAR_135 . VAR_136 = 0 ; VAR_137 . VAR_138 = METHOD_24 ( VAR_139 ) ; if ( ! VAR_140 . VAR_141 && METHOD_25 ( & VAR_142 . VAR_143 ) ) VAR_144 . VAR_145 = VAR_146 -> VAR_147 ; else if ( ! VAR_148 . VAR_149 ) VAR_150 . VAR_151 = VAR_152 -> VAR_153 ; VAR_154 . VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = METHOD_26 ( VAR_160 . VAR_161 , VAR_162 . VAR_163 ) ; VAR_164 = METHOD_27 ( STRUCT_OR_UNION_19 , VAR_165 , VAR_166 , & VAR_167 ) ; if ( METHOD_28 ( VAR_168 ) ) goto VAR_169 ; VAR_170 . VAR_171 = METHOD_29 ( VAR_172 , & VAR_173 , VAR_174 ) ; VAR_175 . VAR_176 = VAR_177 -> VAR_178 ; VAR_179 . VAR_180 = VAR_181 ; VAR_182 . VAR_183 = VAR_184 ; VAR_185 . VAR_186 = METHOD_30 ( VAR_187 ) ; VAR_188 . VAR_189 = VAR_190 ; VAR_191 = VAR_192 -> VAR_193 - VAR_194 . VAR_195 ; VAR_196 = min_t ( unsigned TYPE_10 , VAR_197 , VAR_198 - sizeof ( struct STRUCT_OR_UNION_20 ) - sizeof ( struct STRUCT_OR_UNION_21 ) ) ; if ( VAR_199 < 0 ) { METHOD_31 ( ""icmp:lenproblem[%pI6c>%pI6c]\\n"" , & VAR_200 -> VAR_201 , & VAR_202 -> VAR_203 ) ; goto VAR_204 ; } METHOD_32 ( ) ; VAR_205 = METHOD_33 ( VAR_206 -> VAR_207 ) ; VAR_208 = METHOD_34 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 + sizeof ( struct STRUCT_OR_UNION_22 ) , sizeof ( struct STRUCT_OR_UNION_23 ) , & VAR_213 , & VAR_214 , ( struct STRUCT_OR_UNION_24 * ) VAR_215 , VAR_216 , & VAR_217 ) ; if ( VAR_218 ) { METHOD_35 ( STRUCT_OR_UNION_25 , VAR_219 , VAR_220 ) ; METHOD_36 ( VAR_221 ) ; } else { VAR_222 = METHOD_37 ( VAR_223 , & VAR_224 , & VAR_225 , VAR_226 + sizeof ( struct STRUCT_OR_UNION_26 ) ) ; } METHOD_38 ( ) ; VAR_227 : METHOD_39 ( VAR_228 ) ; VAR_229 : METHOD_40 ( VAR_230 ) ; }",582
583,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 ,  const TYPE_5 * VAR_4 , TYPE_6 VAR_5 )  { TYPE_7 TYPE_8 struct STRUCT_OR_UNION_0 VAR_6 ;  if ( METHOD_1 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 & ~ VAR_11 , VAR_12 ) ) {  if ( VAR_13 ) { METHOD_2 ( ""failedtomount\'%s\'on\'%s\'(optional):%s"" , VAR_14 , VAR_15 , METHOD_3 ( VAR_16 ) ) ; return 0 ; } else { METHOD_4 ( ""failedtomount\'%s\'on\'%s\'"" , VAR_17 , VAR_18 ) ; return - 1 ; } } if ( ( VAR_19 & VAR_20 ) || ( VAR_21 & VAR_22 ) ) { METHOD_5 ( ""remounting%son%storespectbindorremountoptions"" , VAR_23 ? VAR_24 : ""(none)"" , VAR_25 ? VAR_26 : ""(none)"" ) ; unsigned TYPE_9 VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) VAR_30 |= VAR_31 ; TYPE_10 TYPE_11 if ( STRUCT_OR_UNION_1 ( VAR_32 , & VAR_33 ) == 0 ) { unsigned TYPE_12 VAR_34 = VAR_35 ; if ( VAR_36 . VAR_37 & VAR_38 ) VAR_39 |= VAR_40 ; if ( VAR_41 . VAR_42 & VAR_43 ) VAR_44 |= VAR_45 ; if ( VAR_46 . VAR_47 & VAR_48 ) VAR_49 |= VAR_50 ; if ( VAR_51 . VAR_52 & VAR_53 ) VAR_54 |= VAR_55 ; METHOD_6 ( ""(atremount)flagsfor%swas%lu,requiredextraflagsare%lu"" , VAR_56 , VAR_57 . VAR_58 , VAR_59 ) ; if ( ! ( VAR_60 & VAR_61 ) ) { if ( ! ( VAR_62 & ~ VAR_63 ) && VAR_64 == 0 ) { METHOD_7 ( ""mountflagsalreadywas%lu,skippingremount"" , VAR_65 ) ; goto VAR_66 ; } } VAR_67 |= VAR_68 ; } if ( METHOD_8 ( VAR_69 , VAR_70 , VAR_71 ,  VAR_72 | VAR_73 , VAR_74 ) ) {  if ( VAR_75 ) { METHOD_9 ( ""failedtomount\'%s\'on\'%s\'(optional):%s"" , VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ; return 0 ; } else { METHOD_11 ( ""failedtomount\'%s\'on\'%s\'"" , VAR_79 , VAR_80 ) ; return - 1 ; } } } TYPE_13 TYPE_14 VAR_81 : METHOD_12 ( ""mounted\'%s\'on\'%s\',type\'%s\'"" , VAR_82 , VAR_83 , VAR_84 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , unsigned TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 VAR_5 ) { TYPE_7 TYPE_8 struct STRUCT_OR_UNION_0 VAR_6 ; if ( METHOD_1 ( VAR_7 , VAR_8 , VAR_9 , VAR_10 & ~ VAR_11 , VAR_12 ) ) { if ( VAR_13 ) { METHOD_2 ( ""failedtomount\'%s\'on\'%s\'(optional):%s"" , VAR_14 , VAR_15 , METHOD_3 ( VAR_16 ) ) ; return 0 ; } else { METHOD_4 ( ""failedtomount\'%s\'on\'%s\'"" , VAR_17 , VAR_18 ) ; return - 1 ; } } if ( ( VAR_19 & VAR_20 ) || ( VAR_21 & VAR_22 ) ) { METHOD_5 ( ""remounting%son%storespectbindorremountoptions"" , VAR_23 ? VAR_24 : ""(none)"" , VAR_25 ? VAR_26 : ""(none)"" ) ; unsigned TYPE_9 VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) VAR_30 |= VAR_31 ; TYPE_10 TYPE_11 if ( STRUCT_OR_UNION_1 ( VAR_32 , & VAR_33 ) == 0 ) { unsigned TYPE_12 VAR_34 = VAR_35 ; if ( VAR_36 . VAR_37 & VAR_38 ) VAR_39 |= VAR_40 ; if ( VAR_41 . VAR_42 & VAR_43 ) VAR_44 |= VAR_45 ; if ( VAR_46 . VAR_47 & VAR_48 ) VAR_49 |= VAR_50 ; if ( VAR_51 . VAR_52 & VAR_53 ) VAR_54 |= VAR_55 ; METHOD_6 ( ""(atremount)flagsfor%swas%lu,requiredextraflagsare%lu"" , VAR_56 , VAR_57 . VAR_58 , VAR_59 ) ; if ( ! ( VAR_60 & VAR_61 ) ) { if ( ! ( VAR_62 & ~ VAR_63 ) && VAR_64 == 0 ) { METHOD_7 ( ""mountflagsalreadywas%lu,skippingremount"" , VAR_65 ) ; goto VAR_66 ; } } VAR_67 |= VAR_68 ; } if ( METHOD_8 ( VAR_69 , VAR_70 , VAR_71 , VAR_72 | VAR_73 , VAR_74 , VAR_85 ) ) { if ( VAR_75 ) { METHOD_9 ( ""failedtomount\'%s\'on\'%s\'(optional):%s"" , VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ; return 0 ; } else { METHOD_11 ( ""failedtomount\'%s\'on\'%s\'"" , VAR_79 , VAR_80 ) ; return - 1 ; } } } TYPE_13 TYPE_14 VAR_81 : METHOD_12 ( ""mounted\'%s\'on\'%s\',type\'%s\'"" , VAR_82 , VAR_83 , VAR_84 ) ; return 0 ; }",583
584,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { if ( ( VAR_2 & VAR_3 ) == VAR_4 ) { METHOD_1 ( VAR_5 ,  1 , 0 , VAR_6 , 0 ) ;  return METHOD_2 ( VAR_7 , VAR_8 ) ; } if ( ( VAR_9 & VAR_10 ) == VAR_11 ) { METHOD_3 ( VAR_12 ,  1 , 0 , VAR_13 , 0 ) ;  return METHOD_4 ( VAR_14 , VAR_15 ) ; } return - 1 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { if ( ( VAR_2 & VAR_3 ) == VAR_4 ) { METHOD_1 ( VAR_5 , 1 , 0 , VAR_6 , 0 ) ; return METHOD_2 ( VAR_7 , VAR_8 ) ; } if ( ( VAR_9 & VAR_10 ) == VAR_11 ) { METHOD_3 ( VAR_12 , 1 , 0 , VAR_13 , 0 ) ; return METHOD_4 ( VAR_14 , VAR_15 ) ; } return - 1 ; }",584
585,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ;  TYPE_4 TYPE_5 * VAR_3 = VAR_4 ;  TYPE_6 VAR_5 ; TYPE_7 * VAR_6 = VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 = - 1 ; TYPE_10 VAR_10 = - 1 ; TYPE_11 VAR_11 [ ] = { - 1 , - 1 } ; const TYPE_12 * VAR_12 ; TYPE_13 VAR_13 ; TYPE_14 VAR_14 ; struct STRUCT_OR_UNION_0 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 TYPE_17 VAR_17 ; TYPE_18 TYPE_19 * VAR_18 = VAR_19 ; TYPE_20 VAR_20 ; struct STRUCT_OR_UNION_1 VAR_21 ; TYPE_21 TYPE_22 * VAR_22 = VAR_23 ; if ( VAR_24 == 2 && ( METHOD_1 ( VAR_25 [ 1 ] , ""--version"" ) == 0 ) ) METHOD_2 ( ) ; VAR_26 = METHOD_3 ( ) ; VAR_27 = METHOD_4 ( ) ; METHOD_5 ( ) ; if ( METHOD_6 ( VAR_28 , 1 , 0 , 0 , 0 ) < 0 ) METHOD_7 ( ""prctl(PR_SET_NO_NEW_CAPS)failed"" ) ; METHOD_8 ( ) ; VAR_29 = VAR_30 [ 0 ] ; if ( METHOD_9 ( 1 ) ) VAR_31 = METHOD_10 ( 1 ) ; VAR_32 ++ ; VAR_33 -- ; if ( VAR_34 == 0 ) METHOD_11 ( VAR_35 , VAR_36 ) ; METHOD_12 ( & VAR_37 , ( const TYPE_23 * * * ) & VAR_38 ) ; VAR_39 = VAR_40 ; VAR_41 = VAR_42 ; if ( ( VAR_43 [ 0 ] || VAR_44 [ 1 ] ) && VAR_45 ) METHOD_13 ( ""--cap-addinsetuidmodecanbeusedonlybyroot"" ) ; if ( VAR_46 != - 1 && ! VAR_47 ) METHOD_14 ( ""--userns-block-fdrequires--unshare-user"" ) ; if ( VAR_48 != - 1 && VAR_49 == - 1 ) METHOD_15 ( ""--userns-block-fdrequires--info-fd"" ) ; if ( ! VAR_50 && METHOD_16 ( ) != 0 ) VAR_51 = VAR_52 ; TYPE_24 TYPE_25 if ( VAR_53 && METHOD_17 ( ) != 0 ) VAR_54 = VAR_55 ; if ( VAR_56 && STRUCT_OR_UNION_2 ( ""/proc/self/ns/user"" , & VAR_57 ) == 0 ) { TYPE_26 VAR_58 = VAR_59 ; if ( STRUCT_OR_UNION_3 ( ""/sys/module/user_namespace/parameters/enable"" , & VAR_60 ) == 0 ) { TYPE_27 TYPE_28 * VAR_61 = VAR_62 ; VAR_63 = METHOD_18 ( VAR_64 , ""/sys/module/user_namespace/parameters/enable"" ) ; if ( VAR_65 != VAR_66 && VAR_67 [ 0 ] == 'N' ) VAR_68 = VAR_69 ; } if ( STRUCT_OR_UNION_4 ( ""/proc/sys/user/max_user_namespaces"" , & VAR_70 ) == 0 ) { TYPE_29 TYPE_30 * VAR_71 = VAR_72 ; VAR_73 = METHOD_19 ( VAR_74 , ""/proc/sys/user/max_user_namespaces"" ) ; if ( VAR_75 != VAR_76 && METHOD_20 ( VAR_77 , ""0\\n"" ) == 0 ) VAR_78 = VAR_79 ; } if ( ! VAR_80 ) VAR_81 = VAR_82 ; } if ( VAR_83 == 0 ) METHOD_21 ( VAR_84 , VAR_85 ) ; METHOD_22 ( ( ""Creatingrootmountpoint\\n"" ) ) ; if ( VAR_86 == - 1 ) VAR_87 = VAR_88 ; if ( VAR_89 == - 1 ) VAR_90 = VAR_91 ; if ( ! VAR_92 && VAR_93 != VAR_94 ) METHOD_23 ( ""Specifying--uidrequires--unshare-user"" ) ; if ( ! VAR_95 && VAR_96 != VAR_97 ) METHOD_24 ( ""Specifying--gidrequires--unshare-user"" ) ; if ( ! VAR_98 && VAR_99 != VAR_100 ) METHOD_25 ( ""Specifying--hostnamerequires--unshare-uts"" ) ; if ( VAR_101 && ! VAR_102 ) METHOD_26 ( ""Specifying--as-pid-1requires--unshare-pid"" ) ; if ( VAR_103 && VAR_104 != VAR_105 ) METHOD_27 ( ""Specifying--as-pid-1and--lock-fileisnotpermitted"" ) ; VAR_106 = METHOD_28 ( ""/proc"" , VAR_107 ) ; if ( VAR_108 == - 1 ) METHOD_29 ( ""Can\'topen/proc"" ) ;  VAR_109 = METHOD_30 ( ""/run/user/%d/.bubblewrap"" , VAR_110 ) ;  if ( METHOD_31 ( VAR_111 , 0755 ) ) { METHOD_32 ( VAR_112 ) ; VAR_113 = METHOD_33 ( ""/tmp/.bubblewrap-%d"" , VAR_114 ) ; if ( METHOD_34 ( VAR_115 , 0755 ) ) METHOD_35 ( ""Creatingrootmountpointfailed"" ) ; } METHOD_36 ( ( ""creatingnewnamespace\\n"" ) ) ; if ( VAR_116 && ! VAR_117 ) { VAR_118 = METHOD_37 ( 0 , VAR_119 | VAR_120 ) ; if ( VAR_121 == - 1 ) METHOD_38 ( ""eventfd()"" ) ; } METHOD_39 ( ) ; VAR_122 = VAR_123 | VAR_124 ; if ( VAR_125 ) VAR_126 |= VAR_127 ; if ( VAR_128 ) VAR_129 |= VAR_130 ; if ( VAR_131 ) VAR_132 |= VAR_133 ; if ( VAR_134 ) VAR_135 |= VAR_136 ; if ( VAR_137 ) VAR_138 |= VAR_139 ; if ( VAR_140 ) { if ( STRUCT_OR_UNION_5 ( ""/proc/self/ns/cgroup"" , & VAR_141 ) ) { if ( VAR_142 == VAR_143 ) METHOD_40 ( ""Cannotcreatenewcgroupnamespacebecausethekerneldoesnotsupportit"" ) ; else METHOD_41 ( ""staton/proc/self/ns/cgroupfailed"" ) ; } VAR_144 |= VAR_145 ; } if ( VAR_146 ) if ( ! STRUCT_OR_UNION_6 ( ""/proc/self/ns/cgroup"" , & VAR_147 ) ) VAR_148 |= VAR_149 ; VAR_150 = METHOD_42 ( 0 , VAR_151 ) ; if ( VAR_152 == - 1 ) METHOD_43 ( ""eventfd()"" ) ; if ( VAR_153 != - 1 ) { TYPE_31 VAR_154 ; VAR_155 = METHOD_44 ( VAR_156 , VAR_157 ) ; if ( VAR_158 == - 1 ) METHOD_45 ( ""pipe2()"" ) ; } VAR_159 = METHOD_46 ( VAR_160 , VAR_161 ) ; if ( VAR_162 == - 1 ) { if ( VAR_163 ) { if ( VAR_164 == VAR_165 ) METHOD_47 ( ""Creatingnewnamespacefailed,likelybecausethekerneldoesnotsupportusernamespaces.bwrapmustbeinstalledsetuidonsuchsystems."" ) ; else if ( VAR_166 == VAR_167 && ! VAR_168 ) METHOD_48 ( ""Nopermissionstocreatingnewnamespace,likelybecausethekerneldoesnotallownon-privilegedusernamespaces.One.g.debianthiscanbeenabledwith\'sysctlkernel.unprivileged_userns_clone=1\'."" ) ; } METHOD_49 ( ""Creatingnewnamespacefailed"" ) ; } VAR_169 = VAR_170 ; VAR_171 = VAR_172 ; if ( VAR_173 != 0 ) { if ( VAR_174 && VAR_175 && VAR_176 == - 1 ) { METHOD_50 ( VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 ) ; } METHOD_51 ( VAR_184 ) ; METHOD_52 ( ) ; if ( VAR_185 != - 1 ) { TYPE_32 TYPE_33 * VAR_186 = METHOD_53 ( ""{\\n\\""child-pid\\"":%i\\n}\\n"" , VAR_187 ) ; METHOD_54 ( VAR_188 , VAR_189 , VAR_190 ) ; METHOD_55 ( VAR_191 ) ; } if ( VAR_192 != - 1 ) { TYPE_34 TYPE_35 * VAR_193 = METHOD_56 ( ""{\\""child-pid\\"":%i}\\n"" , VAR_194 ) ; METHOD_57 ( VAR_195 , VAR_196 , VAR_197 ) ; } if ( VAR_198 != - 1 ) { TYPE_36 VAR_199 [ 1 ] ; ( TYPE_37 ) METHOD_58 ( METHOD_59 ( VAR_200 , VAR_201 , 1 ) ) ; METHOD_60 ( VAR_202 ) ; } VAR_203 = 1 ; TYPE_38 = METHOD_61 ( VAR_204 , & VAR_205 , 8 ) ; METHOD_62 ( VAR_206 ) ; return METHOD_63 ( VAR_207 , VAR_208 , VAR_209 [ 0 ] ) ; } if ( VAR_210 != - 1 ) METHOD_64 ( VAR_211 ) ; if ( VAR_212 != - 1 ) METHOD_65 ( VAR_213 ) ; TYPE_39 = METHOD_66 ( VAR_214 , & VAR_215 , 8 ) ; METHOD_67 ( VAR_216 ) ; METHOD_68 ( ) ; if ( VAR_217 ) METHOD_69 ( ) ; VAR_218 = VAR_219 ; VAR_220 = VAR_221 ; if ( ! VAR_222 && VAR_223 && VAR_224 == - 1 ) { if ( VAR_225 ) { VAR_226 = 0 ; VAR_227 = 0 ; } METHOD_70 ( VAR_228 , VAR_229 , VAR_230 , VAR_231 , - 1 , VAR_232 , VAR_233 ) ; } VAR_234 = METHOD_71 ( 0 ) ; METHOD_72 ( ) ; if ( METHOD_73 ( VAR_235 , ""/"" , VAR_236 , VAR_237 | VAR_238 , VAR_239 ) < 0 ) METHOD_74 ( ""Failedtomake/slave"" ) ; if ( METHOD_75 ( ""tmpfs"" , VAR_240 , ""tmpfs"" , VAR_241 | VAR_242 , VAR_243 ) != 0 ) METHOD_76 ( ""Failedtomounttmpfs"" ) ; VAR_244 = METHOD_77 ( ) ; if ( METHOD_78 ( VAR_245 ) != 0 ) METHOD_79 ( ""chdirbase_path"" ) ; if ( METHOD_80 ( ""newroot"" , 0755 ) ) METHOD_81 ( ""Creatingnewrootfailed"" ) ; if ( METHOD_82 ( ""newroot"" , ""newroot"" , VAR_246 , VAR_247 | VAR_248 | VAR_249 , VAR_250 ) < 0 ) METHOD_83 ( ""settingupnewrootbind"" ) ; if ( METHOD_84 ( ""oldroot"" , 0755 ) ) METHOD_85 ( ""Creatingoldrootfailed"" ) ; if ( METHOD_86 ( VAR_251 , ""oldroot"" ) ) METHOD_87 ( ""pivot_root"" ) ; if ( METHOD_88 ( ""/"" ) != 0 ) METHOD_89 ( ""chdir/(basepath)"" ) ; if ( VAR_252 ) { TYPE_40 VAR_253 ; TYPE_41 VAR_254 [ 2 ] ; if ( METHOD_90 ( VAR_255 , VAR_256 | VAR_257 , 0 , VAR_258 ) != 0 ) METHOD_91 ( ""Can\'tcreateprivsepsocket"" ) ; VAR_259 = METHOD_92 ( ) ; if ( VAR_260 == - 1 ) METHOD_93 ( ""Can\'tforkunprivilegedhelper"" ) ; if ( VAR_261 == 0 ) { METHOD_94 ( VAR_262 ) ; METHOD_95 ( VAR_263 [ 0 ] ) ; METHOD_96 ( VAR_264 , VAR_265 [ 1 ] ) ; METHOD_97 ( 0 ) ; } else { TYPE_42 VAR_266 ; TYPE_43 VAR_267 [ 2048 ] ; TYPE_44 VAR_268 , VAR_269 ; const TYPE_45 * VAR_270 , * VAR_271 ; TYPE_46 TYPE_47 VAR_272 = - 1 ; VAR_273 = VAR_274 [ 0 ] ; METHOD_98 ( VAR_275 [ 1 ] ) ; do { VAR_276 = METHOD_99 ( VAR_277 , VAR_278 , sizeof ( VAR_279 ) , & VAR_280 , & VAR_281 , & VAR_282 ) ; METHOD_100 ( - 1 , VAR_283 , VAR_284 , VAR_285 , VAR_286 ) ; if ( METHOD_101 ( VAR_287 , VAR_288 , 1 ) != 1 ) METHOD_102 ( ""Can\'twritetoop_socket"" ) ; } while ( VAR_289 != VAR_290 ) ; METHOD_103 ( VAR_291 , & VAR_292 , 0 ) ; } } else { METHOD_104 ( VAR_293 , - 1 ) ; } METHOD_105 ( ) ; if ( METHOD_106 ( ""oldroot"" , ""oldroot"" , VAR_294 , VAR_295 | VAR_296 , VAR_297 ) != 0 ) METHOD_107 ( ""Failedtomakeoldrootrprivate"" ) ; if ( METHOD_108 ( ""oldroot"" , VAR_298 ) ) METHOD_109 ( ""unmountoldroot"" ) ; { TYPE_48 TYPE_49 VAR_299 = METHOD_110 ( ""/"" , VAR_300 | VAR_301 ) ; if ( VAR_302 < 0 ) METHOD_111 ( ""can\'topen/"" ) ; if ( METHOD_112 ( ""/newroot"" ) != 0 ) METHOD_113 ( ""chdir/newroot"" ) ; if ( METHOD_114 ( ""."" , ""."" ) != 0 ) METHOD_115 ( ""pivot_root(/newroot)"" ) ; if ( METHOD_116 ( VAR_303 ) < 0 ) METHOD_117 ( ""fchdirtooldroot"" ) ; if ( METHOD_118 ( ""."" , VAR_304 ) < 0 ) METHOD_119 ( ""umountoldroot"" ) ; if ( METHOD_120 ( ""/"" ) != 0 ) METHOD_121 ( ""chdir/"" ) ; } if ( VAR_305 && ( VAR_306 != VAR_307 || VAR_308 != VAR_309 ) && VAR_310 == - 1 ) { if ( METHOD_122 ( VAR_311 ) ) METHOD_123 ( ""unshareuserns"" ) ; METHOD_124 ( VAR_312 , VAR_313 , VAR_314 , VAR_315 , - 1 , VAR_316 , VAR_317 ) ; } METHOD_125 ( ! VAR_318 ) ; if ( VAR_319 != - 1 ) { TYPE_50 VAR_320 [ 1 ] ; ( TYPE_51 ) METHOD_126 ( METHOD_127 ( VAR_321 , VAR_322 , 1 ) ) ; METHOD_128 ( VAR_323 ) ; } if ( VAR_324 != - 1 ) { VAR_325 = METHOD_129 ( VAR_326 , & VAR_327 ) ; if ( VAR_328 == VAR_329 ) METHOD_130 ( ""Can\'treadseccompdata"" ) ; if ( VAR_330 % 8 != 0 ) METHOD_131 ( ""Invalidseccompdata,mustbemultipleof8"" ) ; VAR_331 . VAR_332 = VAR_333 / 8 ; VAR_334 . VAR_335 = ( struct STRUCT_OR_UNION_7 * ) VAR_336 ; METHOD_132 ( VAR_337 ) ; } METHOD_133 ( VAR_338 ) ; VAR_339 = ""/"" ; if ( VAR_340 ) { if ( METHOD_134 ( VAR_341 ) ) METHOD_135 ( ""Can\'tchdirto%s"" , VAR_342 ) ; VAR_343 = VAR_344 ; } else if ( METHOD_136 ( VAR_345 ) == 0 ) { VAR_346 = VAR_347 ; } else { const TYPE_52 * VAR_348 = METHOD_137 ( ""HOME"" ) ; if ( VAR_349 != VAR_350 && METHOD_138 ( VAR_351 ) == 0 ) VAR_352 = VAR_353 ; } METHOD_139 ( ""PWD"" , VAR_354 , 1 ) ; METHOD_140 ( VAR_355 ) ; if ( VAR_356 && METHOD_141 ( ) == ( TYPE_53 ) - 1 ) METHOD_142 ( ""setsid"" ) ; if ( METHOD_143 ( VAR_357 ) == - 1 ) METHOD_144 ( ""label_exec%s"" , VAR_358 [ 0 ] ) ; METHOD_145 ( ( ""forkingforchild\\n"" ) ) ; if ( ! VAR_359 && ( VAR_360 || VAR_361 != VAR_362 || VAR_363 != - 1 ) ) { VAR_364 = METHOD_146 ( ) ; if ( VAR_365 == - 1 ) METHOD_147 ( ""Can\'tforkforpid1"" ) ; if ( VAR_366 != 0 ) { METHOD_148 ( VAR_367 ) ; { TYPE_54 VAR_368 [ 3 ] ; TYPE_55 VAR_369 = 0 ; if ( VAR_370 != - 1 ) VAR_371 [ VAR_372 ++ ] = VAR_373 ; if ( VAR_374 != - 1 ) VAR_375 [ VAR_376 ++ ] = VAR_377 ; VAR_378 [ VAR_379 ++ ] = - 1 ; METHOD_149 ( VAR_380 , VAR_381 , VAR_382 ) ; } return METHOD_150 ( VAR_383 , VAR_384 , VAR_385 != VAR_386 ? & VAR_387 : VAR_388 ) ; } } METHOD_151 ( ( ""launchexecutable%s\\n"" , VAR_389 [ 0 ] ) ) ; if ( VAR_390 != - 1 ) METHOD_152 ( VAR_391 ) ; if ( ! VAR_392 ) { if ( VAR_393 != - 1 ) METHOD_153 ( VAR_394 ) ; } METHOD_154 ( ) ; METHOD_155 ( ) ; if ( ! VAR_395 ) METHOD_156 ( ) ; if ( VAR_396 != VAR_397 && METHOD_157 ( VAR_398 , VAR_399 , & VAR_400 ) != 0 ) METHOD_158 ( ""prctl(PR_SET_SECCOMP)"" ) ; if ( VAR_401 [ 1 ] != - 1 ) { TYPE_56 VAR_402 = 0 ; TYPE_57 = METHOD_159 ( VAR_403 [ 1 ] , & VAR_404 , 1 ) ; } if ( METHOD_160 ( VAR_405 [ 0 ] , VAR_406 ) == - 1 ) { if ( VAR_407 [ 1 ] != - 1 ) { TYPE_58 VAR_408 = VAR_409 ; TYPE_59 VAR_410 = 0 ; TYPE_60 = METHOD_161 ( VAR_411 [ 1 ] , & VAR_412 , 1 ) ; VAR_413 = VAR_414 ; } METHOD_162 ( ""execvp%s"" , VAR_415 [ 0 ] ) ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 TYPE_5 * VAR_3 = VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 * VAR_6 = VAR_7 ; TYPE_8 VAR_8 ; TYPE_9 VAR_9 = - 1 ; TYPE_10 VAR_10 = - 1 ; TYPE_11 VAR_11 [ ] = { - 1 , - 1 } ; const TYPE_12 * VAR_12 ; TYPE_13 VAR_13 ; TYPE_14 VAR_14 ; struct STRUCT_OR_UNION_0 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 TYPE_17 VAR_17 ; TYPE_18 TYPE_19 * VAR_18 = VAR_19 ; TYPE_20 VAR_20 ; struct STRUCT_OR_UNION_1 VAR_21 ; TYPE_21 TYPE_22 * VAR_22 = VAR_23 ; if ( VAR_24 == 2 && ( METHOD_1 ( VAR_25 [ 1 ] , ""--version"" ) == 0 ) ) METHOD_2 ( ) ; VAR_26 = METHOD_3 ( ) ; VAR_27 = METHOD_4 ( ) ; METHOD_5 ( ) ; if ( METHOD_6 ( VAR_28 , 1 , 0 , 0 , 0 ) < 0 ) METHOD_7 ( ""prctl(PR_SET_NO_NEW_CAPS)failed"" ) ; METHOD_8 ( ) ; VAR_29 = VAR_30 [ 0 ] ; if ( METHOD_9 ( 1 ) ) VAR_31 = METHOD_10 ( 1 ) ; VAR_32 ++ ; VAR_33 -- ; if ( VAR_34 == 0 ) METHOD_11 ( VAR_35 , VAR_36 ) ; METHOD_12 ( & VAR_37 , ( const TYPE_23 * * * ) & VAR_38 ) ; VAR_39 = VAR_40 ; VAR_41 = VAR_42 ; if ( ( VAR_43 [ 0 ] || VAR_44 [ 1 ] ) && VAR_45 ) METHOD_13 ( ""--cap-addinsetuidmodecanbeusedonlybyroot"" ) ; if ( VAR_46 != - 1 && ! VAR_47 ) METHOD_14 ( ""--userns-block-fdrequires--unshare-user"" ) ; if ( VAR_48 != - 1 && VAR_49 == - 1 ) METHOD_15 ( ""--userns-block-fdrequires--info-fd"" ) ; if ( ! VAR_50 && METHOD_16 ( ) != 0 ) VAR_51 = VAR_52 ; TYPE_24 TYPE_25 if ( VAR_53 && METHOD_17 ( ) != 0 ) VAR_54 = VAR_55 ; if ( VAR_56 && STRUCT_OR_UNION_2 ( ""/proc/self/ns/user"" , & VAR_57 ) == 0 ) { TYPE_26 VAR_58 = VAR_59 ; if ( STRUCT_OR_UNION_3 ( ""/sys/module/user_namespace/parameters/enable"" , & VAR_60 ) == 0 ) { TYPE_27 TYPE_28 * VAR_61 = VAR_62 ; VAR_63 = METHOD_18 ( VAR_64 , ""/sys/module/user_namespace/parameters/enable"" ) ; if ( VAR_65 != VAR_66 && VAR_67 [ 0 ] == 'N' ) VAR_68 = VAR_69 ; } if ( STRUCT_OR_UNION_4 ( ""/proc/sys/user/max_user_namespaces"" , & VAR_70 ) == 0 ) { TYPE_29 TYPE_30 * VAR_71 = VAR_72 ; VAR_73 = METHOD_19 ( VAR_74 , ""/proc/sys/user/max_user_namespaces"" ) ; if ( VAR_75 != VAR_76 && METHOD_20 ( VAR_77 , ""0\\n"" ) == 0 ) VAR_78 = VAR_79 ; } if ( ! VAR_80 ) VAR_81 = VAR_82 ; } if ( VAR_83 == 0 ) METHOD_21 ( VAR_84 , VAR_85 ) ; METHOD_22 ( ( ""Creatingrootmountpoint\\n"" ) ) ; if ( VAR_86 == - 1 ) VAR_87 = VAR_88 ; if ( VAR_89 == - 1 ) VAR_90 = VAR_91 ; if ( ! VAR_92 && VAR_93 != VAR_94 ) METHOD_23 ( ""Specifying--uidrequires--unshare-user"" ) ; if ( ! VAR_95 && VAR_96 != VAR_97 ) METHOD_24 ( ""Specifying--gidrequires--unshare-user"" ) ; if ( ! VAR_98 && VAR_99 != VAR_100 ) METHOD_25 ( ""Specifying--hostnamerequires--unshare-uts"" ) ; if ( VAR_101 && ! VAR_102 ) METHOD_26 ( ""Specifying--as-pid-1requires--unshare-pid"" ) ; if ( VAR_103 && VAR_104 != VAR_105 ) METHOD_27 ( ""Specifying--as-pid-1and--lock-fileisnotpermitted"" ) ; VAR_106 = METHOD_28 ( ""/proc"" , VAR_107 ) ; if ( VAR_108 == - 1 ) METHOD_29 ( ""Can\'topen/proc"" ) ; VAR_109 = METHOD_30 ( ""/run/user/%d/.bubblewrap"" , VAR_110 ) ; if ( METHOD_31 ( VAR_111 , 0755 ) ) { METHOD_32 ( VAR_112 ) ; VAR_113 = METHOD_33 ( ""/tmp/.bubblewrap-%d"" , VAR_114 ) ; if ( METHOD_34 ( VAR_115 , 0755 ) ) METHOD_35 ( ""Creatingrootmountpointfailed"" ) ; } METHOD_36 ( ( ""creatingnewnamespace\\n"" ) ) ; if ( VAR_116 && ! VAR_117 ) { VAR_118 = METHOD_37 ( 0 , VAR_119 | VAR_120 ) ; if ( VAR_121 == - 1 ) METHOD_38 ( ""eventfd()"" ) ; } METHOD_39 ( ) ; VAR_122 = VAR_123 | VAR_124 ; if ( VAR_125 ) VAR_126 |= VAR_127 ; if ( VAR_128 ) VAR_129 |= VAR_130 ; if ( VAR_131 ) VAR_132 |= VAR_133 ; if ( VAR_134 ) VAR_135 |= VAR_136 ; if ( VAR_137 ) VAR_138 |= VAR_139 ; if ( VAR_140 ) { if ( STRUCT_OR_UNION_5 ( ""/proc/self/ns/cgroup"" , & VAR_141 ) ) { if ( VAR_142 == VAR_143 ) METHOD_40 ( ""Cannotcreatenewcgroupnamespacebecausethekerneldoesnotsupportit"" ) ; else METHOD_41 ( ""staton/proc/self/ns/cgroupfailed"" ) ; } VAR_144 |= VAR_145 ; } if ( VAR_146 ) if ( ! STRUCT_OR_UNION_6 ( ""/proc/self/ns/cgroup"" , & VAR_147 ) ) VAR_148 |= VAR_149 ; VAR_150 = METHOD_42 ( 0 , VAR_151 ) ; if ( VAR_152 == - 1 ) METHOD_43 ( ""eventfd()"" ) ; if ( VAR_153 != - 1 ) { TYPE_31 VAR_154 ; VAR_155 = METHOD_44 ( VAR_156 , VAR_157 ) ; if ( VAR_158 == - 1 ) METHOD_45 ( ""pipe2()"" ) ; } VAR_159 = METHOD_46 ( VAR_160 , VAR_161 ) ; if ( VAR_162 == - 1 ) { if ( VAR_163 ) { if ( VAR_164 == VAR_165 ) METHOD_47 ( ""Creatingnewnamespacefailed,likelybecausethekerneldoesnotsupportusernamespaces.bwrapmustbeinstalledsetuidonsuchsystems."" ) ; else if ( VAR_166 == VAR_167 && ! VAR_168 ) METHOD_48 ( ""Nopermissionstocreatingnewnamespace,likelybecausethekerneldoesnotallownon-privilegedusernamespaces.One.g.debianthiscanbeenabledwith\'sysctlkernel.unprivileged_userns_clone=1\'."" ) ; } METHOD_49 ( ""Creatingnewnamespacefailed"" ) ; } VAR_169 = VAR_170 ; VAR_171 = VAR_172 ; if ( VAR_173 != 0 ) { if ( VAR_174 && VAR_175 && VAR_176 == - 1 ) { METHOD_50 ( VAR_177 , VAR_178 , VAR_179 , VAR_180 , VAR_181 , VAR_182 , VAR_183 ) ; } METHOD_51 ( VAR_184 ) ; METHOD_52 ( ) ; if ( VAR_185 != - 1 ) { TYPE_32 TYPE_33 * VAR_186 = METHOD_53 ( ""{\\n\\""child-pid\\"":%i\\n}\\n"" , VAR_187 ) ; METHOD_54 ( VAR_188 , VAR_189 , VAR_190 ) ; METHOD_55 ( VAR_191 ) ; } if ( VAR_192 != - 1 ) { TYPE_34 TYPE_35 * VAR_193 = METHOD_56 ( ""{\\""child-pid\\"":%i}\\n"" , VAR_194 ) ; METHOD_57 ( VAR_195 , VAR_196 , VAR_197 ) ; } if ( VAR_198 != - 1 ) { TYPE_36 VAR_199 [ 1 ] ; ( TYPE_37 ) METHOD_58 ( METHOD_59 ( VAR_200 , VAR_201 , 1 ) ) ; METHOD_60 ( VAR_202 ) ; } VAR_203 = 1 ; TYPE_38 = METHOD_61 ( VAR_204 , & VAR_205 , 8 ) ; METHOD_62 ( VAR_206 ) ; return METHOD_63 ( VAR_207 , VAR_208 , VAR_209 [ 0 ] ) ; } if ( VAR_210 != - 1 ) METHOD_64 ( VAR_211 ) ; if ( VAR_212 != - 1 ) METHOD_65 ( VAR_213 ) ; TYPE_39 = METHOD_66 ( VAR_214 , & VAR_215 , 8 ) ; METHOD_67 ( VAR_216 ) ; METHOD_68 ( ) ; if ( VAR_217 ) METHOD_69 ( ) ; VAR_218 = VAR_219 ; VAR_220 = VAR_221 ; if ( ! VAR_222 && VAR_223 && VAR_224 == - 1 ) { if ( VAR_225 ) { VAR_226 = 0 ; VAR_227 = 0 ; } METHOD_70 ( VAR_228 , VAR_229 , VAR_230 , VAR_231 , - 1 , VAR_232 , VAR_233 ) ; } VAR_234 = METHOD_71 ( 0 ) ; METHOD_72 ( ) ; if ( METHOD_73 ( VAR_235 , ""/"" , VAR_236 , VAR_237 | VAR_238 , VAR_239 ) < 0 ) METHOD_74 ( ""Failedtomake/slave"" ) ; if ( METHOD_75 ( ""tmpfs"" , VAR_240 , ""tmpfs"" , VAR_241 | VAR_242 , VAR_243 ) != 0 ) METHOD_76 ( ""Failedtomounttmpfs"" ) ; VAR_244 = METHOD_77 ( ) ; if ( METHOD_78 ( VAR_245 ) != 0 ) METHOD_79 ( ""chdirbase_path"" ) ; if ( METHOD_80 ( ""newroot"" , 0755 ) ) METHOD_81 ( ""Creatingnewrootfailed"" ) ; if ( METHOD_82 ( ""newroot"" , ""newroot"" , VAR_246 , VAR_247 | VAR_248 | VAR_249 , VAR_250 ) < 0 ) METHOD_83 ( ""settingupnewrootbind"" ) ; if ( METHOD_84 ( ""oldroot"" , 0755 ) ) METHOD_85 ( ""Creatingoldrootfailed"" ) ; if ( METHOD_86 ( VAR_251 , ""oldroot"" ) ) METHOD_87 ( ""pivot_root"" ) ; if ( METHOD_88 ( ""/"" ) != 0 ) METHOD_89 ( ""chdir/(basepath)"" ) ; if ( VAR_252 ) { TYPE_40 VAR_253 ; TYPE_41 VAR_254 [ 2 ] ; if ( METHOD_90 ( VAR_255 , VAR_256 | VAR_257 , 0 , VAR_258 ) != 0 ) METHOD_91 ( ""Can\'tcreateprivsepsocket"" ) ; VAR_259 = METHOD_92 ( ) ; if ( VAR_260 == - 1 ) METHOD_93 ( ""Can\'tforkunprivilegedhelper"" ) ; if ( VAR_261 == 0 ) { METHOD_94 ( VAR_262 ) ; METHOD_95 ( VAR_263 [ 0 ] ) ; METHOD_96 ( VAR_264 , VAR_265 [ 1 ] ) ; METHOD_97 ( 0 ) ; } else { TYPE_42 VAR_266 ; TYPE_43 VAR_267 [ 2048 ] ; TYPE_44 VAR_268 , VAR_269 ; const TYPE_45 * VAR_270 , * VAR_271 ; TYPE_46 TYPE_47 VAR_272 = - 1 ; VAR_273 = VAR_274 [ 0 ] ; METHOD_98 ( VAR_275 [ 1 ] ) ; do { VAR_276 = METHOD_99 ( VAR_277 , VAR_278 , sizeof ( VAR_279 ) , & VAR_280 , & VAR_281 , & VAR_282 ) ; METHOD_100 ( - 1 , VAR_283 , VAR_284 , VAR_285 , VAR_286 ) ; if ( METHOD_101 ( VAR_287 , VAR_288 , 1 ) != 1 ) METHOD_102 ( ""Can\'twritetoop_socket"" ) ; } while ( VAR_289 != VAR_290 ) ; METHOD_103 ( VAR_291 , & VAR_292 , 0 ) ; } } else { METHOD_104 ( VAR_293 , - 1 ) ; } METHOD_105 ( ) ; if ( METHOD_106 ( ""oldroot"" , ""oldroot"" , VAR_294 , VAR_295 | VAR_296 , VAR_297 ) != 0 ) METHOD_107 ( ""Failedtomakeoldrootrprivate"" ) ; if ( METHOD_108 ( ""oldroot"" , VAR_298 ) ) METHOD_109 ( ""unmountoldroot"" ) ; { TYPE_48 TYPE_49 VAR_299 = METHOD_110 ( ""/"" , VAR_300 | VAR_301 ) ; if ( VAR_302 < 0 ) METHOD_111 ( ""can\'topen/"" ) ; if ( METHOD_112 ( ""/newroot"" ) != 0 ) METHOD_113 ( ""chdir/newroot"" ) ; if ( METHOD_114 ( ""."" , ""."" ) != 0 ) METHOD_115 ( ""pivot_root(/newroot)"" ) ; if ( METHOD_116 ( VAR_303 ) < 0 ) METHOD_117 ( ""fchdirtooldroot"" ) ; if ( METHOD_118 ( ""."" , VAR_304 ) < 0 ) METHOD_119 ( ""umountoldroot"" ) ; if ( METHOD_120 ( ""/"" ) != 0 ) METHOD_121 ( ""chdir/"" ) ; } if ( VAR_305 && ( VAR_306 != VAR_307 || VAR_308 != VAR_309 ) && VAR_310 == - 1 ) { if ( METHOD_122 ( VAR_311 ) ) METHOD_123 ( ""unshareuserns"" ) ; METHOD_124 ( VAR_312 , VAR_313 , VAR_314 , VAR_315 , - 1 , VAR_316 , VAR_317 ) ; } METHOD_125 ( ! VAR_318 ) ; if ( VAR_319 != - 1 ) { TYPE_50 VAR_320 [ 1 ] ; ( TYPE_51 ) METHOD_126 ( METHOD_127 ( VAR_321 , VAR_322 , 1 ) ) ; METHOD_128 ( VAR_323 ) ; } if ( VAR_324 != - 1 ) { VAR_325 = METHOD_129 ( VAR_326 , & VAR_327 ) ; if ( VAR_328 == VAR_329 ) METHOD_130 ( ""Can\'treadseccompdata"" ) ; if ( VAR_330 % 8 != 0 ) METHOD_131 ( ""Invalidseccompdata,mustbemultipleof8"" ) ; VAR_331 . VAR_332 = VAR_333 / 8 ; VAR_334 . VAR_335 = ( struct STRUCT_OR_UNION_7 * ) VAR_336 ; METHOD_132 ( VAR_337 ) ; } METHOD_133 ( VAR_338 ) ; VAR_339 = ""/"" ; if ( VAR_340 ) { if ( METHOD_134 ( VAR_341 ) ) METHOD_135 ( ""Can\'tchdirto%s"" , VAR_342 ) ; VAR_343 = VAR_344 ; } else if ( METHOD_136 ( VAR_345 ) == 0 ) { VAR_346 = VAR_347 ; } else { const TYPE_52 * VAR_348 = METHOD_137 ( ""HOME"" ) ; if ( VAR_349 != VAR_350 && METHOD_138 ( VAR_351 ) == 0 ) VAR_352 = VAR_353 ; } METHOD_139 ( ""PWD"" , VAR_354 , 1 ) ; METHOD_140 ( VAR_355 ) ; if ( VAR_356 && METHOD_141 ( ) == ( TYPE_53 ) - 1 ) METHOD_142 ( ""setsid"" ) ; if ( METHOD_143 ( VAR_357 ) == - 1 ) METHOD_144 ( ""label_exec%s"" , VAR_358 [ 0 ] ) ; METHOD_145 ( ( ""forkingforchild\\n"" ) ) ; if ( ! VAR_359 && ( VAR_360 || VAR_361 != VAR_362 || VAR_363 != - 1 ) ) { VAR_364 = METHOD_146 ( ) ; if ( VAR_365 == - 1 ) METHOD_147 ( ""Can\'tforkforpid1"" ) ; if ( VAR_366 != 0 ) { METHOD_148 ( VAR_367 ) ; { TYPE_54 VAR_368 [ 3 ] ; TYPE_55 VAR_369 = 0 ; if ( VAR_370 != - 1 ) VAR_371 [ VAR_372 ++ ] = VAR_373 ; if ( VAR_374 != - 1 ) VAR_375 [ VAR_376 ++ ] = VAR_377 ; VAR_378 [ VAR_379 ++ ] = - 1 ; METHOD_149 ( VAR_380 , VAR_381 , VAR_382 ) ; } return METHOD_150 ( VAR_383 , VAR_384 , VAR_385 != VAR_386 ? & VAR_387 : VAR_388 ) ; } } METHOD_151 ( ( ""launchexecutable%s\\n"" , VAR_389 [ 0 ] ) ) ; if ( VAR_390 != - 1 ) METHOD_152 ( VAR_391 ) ; if ( ! VAR_392 ) { if ( VAR_393 != - 1 ) METHOD_153 ( VAR_394 ) ; } METHOD_154 ( ) ; METHOD_155 ( ) ; if ( ! VAR_395 ) METHOD_156 ( ) ; if ( VAR_396 != VAR_397 && METHOD_157 ( VAR_398 , VAR_399 , & VAR_400 ) != 0 ) METHOD_158 ( ""prctl(PR_SET_SECCOMP)"" ) ; if ( VAR_401 [ 1 ] != - 1 ) { TYPE_56 VAR_402 = 0 ; TYPE_57 = METHOD_159 ( VAR_403 [ 1 ] , & VAR_404 , 1 ) ; } if ( METHOD_160 ( VAR_405 [ 0 ] , VAR_406 ) == - 1 ) { if ( VAR_407 [ 1 ] != - 1 ) { TYPE_58 VAR_408 = VAR_409 ; TYPE_59 VAR_410 = 0 ; TYPE_60 = METHOD_161 ( VAR_411 [ 1 ] , & VAR_412 , 1 ) ; VAR_413 = VAR_414 ; } METHOD_162 ( ""execvp%s"" , VAR_415 [ 0 ] ) ; } return 0 ; }",585
586," TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 == VAR_5 ) {  METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) ;  } else {  TYPE_5 VAR_9 [ 4 * 4 ] ;   TYPE_6 * VAR_10 = & VAR_11 [ 0 ] ;  TYPE_7 VAR_12 , VAR_13 ;  TYPE_8 VAR_14 [ 4 ] , VAR_15 [ 4 ] ;  const TYPE_9 VAR_16 = VAR_17 [ VAR_18 ] ; for ( VAR_19 = 0 ; VAR_20 < 4 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < 4 ; ++ VAR_24 ) VAR_25 [ VAR_26 ] = VAR_27 [ VAR_28 * VAR_29 + VAR_30 ] * 16 ; if ( VAR_31 == 0 && VAR_32 [ 0 ] ) VAR_33 [ 0 ] += 1 ; VAR_34 . METHOD_2 ( VAR_35 , VAR_36 ) ; for ( VAR_37 = 0 ; VAR_38 < 4 ; ++ VAR_39 )  VAR_40 [ VAR_41 * 4 + VAR_42 ] = VAR_43 [ VAR_44 ] ;  } for ( VAR_45 = 0 ; VAR_46 < 4 ; ++ VAR_47 ) { for ( VAR_48 = 0 ; VAR_49 < 4 ; ++ VAR_50 ) VAR_51 [ VAR_52 ] = VAR_53 [ VAR_54 + VAR_55 * 4 ] ; VAR_56 . METHOD_3 ( VAR_57 , VAR_58 ) ; for ( VAR_59 = 0 ; VAR_60 < 4 ; ++ VAR_61 ) VAR_62 [ VAR_63 + VAR_64 * 4 ] = ( VAR_65 [ VAR_66 ] + 1 ) >> 2 ; } } }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 == VAR_5 ) { METHOD_1 ( VAR_6 , VAR_7 , VAR_8 ) ; } else { TYPE_5 VAR_9 [ 4 * 4 ] ; TYPE_6 * VAR_10 = & VAR_11 [ 0 ] ; TYPE_7 VAR_12 , VAR_13 ; TYPE_8 VAR_14 [ 4 ] , VAR_15 [ 4 ] ; const TYPE_9 VAR_16 = VAR_17 [ VAR_18 ] ; for ( VAR_19 = 0 ; VAR_20 < 4 ; ++ VAR_21 ) { for ( VAR_22 = 0 ; VAR_23 < 4 ; ++ VAR_24 ) VAR_25 [ VAR_26 ] = VAR_27 [ VAR_28 * VAR_29 + VAR_30 ] * 16 ; if ( VAR_31 == 0 && VAR_32 [ 0 ] ) VAR_33 [ 0 ] += 1 ; VAR_34 . METHOD_2 ( VAR_35 , VAR_36 ) ; for ( VAR_37 = 0 ; VAR_38 < 4 ; ++ VAR_39 ) VAR_40 [ VAR_41 * 4 + VAR_42 ] = VAR_43 [ VAR_44 ] ; } for ( VAR_45 = 0 ; VAR_46 < 4 ; ++ VAR_47 ) { for ( VAR_48 = 0 ; VAR_49 < 4 ; ++ VAR_50 ) VAR_51 [ VAR_52 ] = VAR_53 [ VAR_54 + VAR_55 * 4 ] ; VAR_56 . METHOD_3 ( VAR_57 , VAR_58 ) ; for ( VAR_59 = 0 ; VAR_60 < 4 ; ++ VAR_61 ) VAR_62 [ VAR_63 + VAR_64 * 4 ] = ( VAR_65 [ VAR_66 ] + 1 ) >> 2 ; } } }",586
587," static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 )  { TYPE_3 * VAR_2 ; if ( * VAR_3 != '[' ) {  VAR_4 = VAR_5 ;  return 0 ; } VAR_6 -> VAR_7 = VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 + 1 ) ; if ( * VAR_11 == ']' )  return VAR_12 + 1 ;   if ( ! ( VAR_13 -> VAR_14 = VAR_15 = METHOD_2 ( ) ) )  return 0 ;  if ( ! ( VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 , METHOD_5 ( VAR_18 ) ) ) ) )  return 0 ; while ( * VAR_19 == ',' ) { TYPE_4 * VAR_20 ; if ( ! ( VAR_21 = METHOD_6 ( ) ) ) return 0 ; VAR_22 -> VAR_23 = VAR_24 ; VAR_25 -> VAR_26 = VAR_27 ;  VAR_28 = VAR_29 ;   if ( ! ( VAR_30 = METHOD_7 ( METHOD_8 ( VAR_31 , METHOD_9 ( VAR_32 + 1 ) ) ) ) )  return 0 ; } if ( * VAR_33 == ']' )  return VAR_34 + 1 ;  VAR_35 = VAR_36 ; return 0 ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; if ( * VAR_3 != '[' ) { VAR_4 = VAR_5 ; return 0 ; } VAR_6 -> VAR_7 = VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 + 1 ) , VAR_35 ) ) ; if ( ! VAR_36 ) return 0 ; if ( ! ( VAR_16 = METHOD_3 ( METHOD_4 ( VAR_17 , METHOD_5 ( VAR_18 ) ) ) ) ) return 0 ; while ( * VAR_19 == ',' ) { TYPE_4 * VAR_20 ; if ( ! ( VAR_21 = METHOD_6 ( ) ) ) return 0 ; VAR_22 -> VAR_23 = VAR_24 ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 = VAR_29 ; if ( ! ( VAR_30 = METHOD_7 ( METHOD_8 ( VAR_31 , METHOD_9 ( VAR_32 + 1 ) ) ) ) ) return 0 ; } if ( * VAR_33 == ']' ) return VAR_36 + 1 ; * VAR_35 = VAR_36 ; return 0 ; }",587
588,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 * * VAR_5 ) { union STRUCT_OR_UNION_1 * VAR_6 = & VAR_7 -> VAR_8 ; TYPE_6 VAR_9 ;  TYPE_7 VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ;  TYPE_8 VAR_17 ; TYPE_9 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_10 VAR_23 , VAR_24 ; TYPE_11 VAR_25 [ VAR_26 ] = """" , VAR_27 [ 6 ] = """" ; struct STRUCT_OR_UNION_2 STRUCT_OR_UNION_3 ; VAR_28 * VAR_29 ; TYPE_12 VAR_30 , VAR_31 , VAR_32 , VAR_33 = 0 ; if ( METHOD_1 ( VAR_34 , ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:"" , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 , & VAR_39 , & VAR_40 , & VAR_41 ) == 7 ) { VAR_42 = METHOD_2 ( VAR_43 ,  ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:%5s(%127[A-Za-z0-9/:]),Length:%9u,Pro:%9d,Off:%9d,Pri:%9d,RM:%9d,Err:%9d[%8x,%8x]"" ,  & VAR_44 , & VAR_45 , & VAR_46 , & VAR_47 , & VAR_48 , & VAR_49 , & VAR_50 , VAR_51 , VAR_52 , & VAR_53 , & VAR_54 , & VAR_55 , & VAR_56 , & VAR_57 , & VAR_58 , & VAR_59 , & VAR_60 ) ; if ( VAR_61 != 17 ) { * VAR_62 = VAR_63 ; * VAR_64 = METHOD_3 ( ""cosine:purportedcontrolbladelinedoesn\'thavecodevalues"" ) ; return VAR_65 ; } } else { VAR_66 = METHOD_4 ( VAR_67 ,  ""%5s(%127[A-Za-z0-9/:]),Length:%9u,Pro:%9d,Off:%9d,Pri:%9d,RM:%9d,Err:%9d[%8x,%8x]"" ,  VAR_68 , VAR_69 , & VAR_70 , & VAR_71 , & VAR_72 , & VAR_73 , & VAR_74 , & VAR_75 , & VAR_76 , & VAR_77 ) ; if ( VAR_78 != 10 ) { * VAR_79 = VAR_80 ; * VAR_81 = METHOD_5 ( ""cosine:headerlineisneithercontrolbladenorPEoutput"" ) ; return VAR_82 ; }  VAR_83 = VAR_84 = VAR_85 = VAR_86 = VAR_87 = VAR_88 = VAR_89 = 0 ;  } if ( VAR_90 > VAR_91 ) { * VAR_92 = VAR_93 ; * VAR_94 = METHOD_6 ( ""cosine:Filehas%u-bytepacket,biggerthanmaximumof%u"" , VAR_95 , VAR_96 ) ; return VAR_97 ; } VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 | VAR_104 ; STRUCT_OR_UNION_4 . VAR_105 = VAR_106 - 1900 ; STRUCT_OR_UNION_5 . VAR_107 = VAR_108 - 1 ; STRUCT_OR_UNION_6 . VAR_109 = VAR_110 ; STRUCT_OR_UNION_7 . VAR_111 = VAR_112 ; STRUCT_OR_UNION_8 . VAR_113 = VAR_114 ; STRUCT_OR_UNION_9 . VAR_115 = VAR_116 ; STRUCT_OR_UNION_10 . VAR_117 = - 1 ; VAR_118 -> VAR_119 . VAR_120 = METHOD_7 ( & STRUCT_OR_UNION_11 ) ; VAR_121 -> VAR_122 . VAR_123 = VAR_124 * 10000000 ; VAR_125 -> VAR_126 = VAR_127 ; if ( METHOD_8 ( VAR_128 , ""TEST:"" , 5 ) == 0 ) { VAR_129 -> VAR_130 . VAR_131 = VAR_132 ; } else if ( METHOD_9 ( VAR_133 , ""PPoATM:"" , 7 ) == 0 ) { VAR_134 -> VAR_135 . VAR_136 = VAR_137 ; } else if ( METHOD_10 ( VAR_138 , ""PPoFR:"" , 6 ) == 0 ) { VAR_139 -> VAR_140 . VAR_141 = VAR_142 ; } else if ( METHOD_11 ( VAR_143 , ""ATM:"" , 4 ) == 0 ) { VAR_144 -> VAR_145 . VAR_146 = VAR_147 ; } else if ( METHOD_12 ( VAR_148 , ""FR:"" , 3 ) == 0 ) { VAR_149 -> VAR_150 . VAR_151 = VAR_152 ; } else if ( METHOD_13 ( VAR_153 , ""HDLC:"" , 5 ) == 0 ) { VAR_154 -> VAR_155 . VAR_156 = VAR_157 ; } else if ( METHOD_14 ( VAR_158 , ""PPP:"" , 4 ) == 0 ) { VAR_159 -> VAR_160 . VAR_161 = VAR_162 ; } else if ( METHOD_15 ( VAR_163 , ""ETH:"" , 4 ) == 0 ) { VAR_164 -> VAR_165 . VAR_166 = VAR_167 ; } else { VAR_168 -> VAR_169 . VAR_170 = VAR_171 ; } if ( METHOD_16 ( VAR_172 , ""l2-tx"" , 5 ) == 0 ) { VAR_173 -> VAR_174 . VAR_175 = VAR_176 ; } else if ( METHOD_17 ( VAR_177 , ""l2-rx"" , 5 ) == 0 ) { VAR_178 -> VAR_179 . VAR_180 = VAR_181 ; } METHOD_18 ( VAR_182 -> VAR_183 . VAR_184 , VAR_185 , VAR_186 ) ; VAR_187 -> VAR_188 . VAR_189 = VAR_190 ; VAR_191 -> VAR_192 . VAR_193 = VAR_194 ; VAR_195 -> VAR_196 . VAR_197 = VAR_198 ; VAR_199 -> VAR_200 . VAR_201 = VAR_202 ; VAR_203 -> VAR_204 . VAR_205 = VAR_206 ; METHOD_19 ( VAR_207 , VAR_208 ) ; VAR_209 = METHOD_20 ( VAR_210 ) ; VAR_211 = VAR_212 / 16 + ( ( VAR_213 % 16 ) ? 1 : 0 ) ; for ( VAR_214 = 0 ; VAR_215 < VAR_216 ; VAR_217 ++ ) { if ( METHOD_21 ( VAR_218 , VAR_219 , VAR_220 ) == VAR_221 ) { * VAR_222 = METHOD_22 ( VAR_223 , VAR_224 ) ; if ( * VAR_225 == 0 ) { * VAR_226 = VAR_227 ; } return VAR_228 ; } if ( METHOD_23 ( VAR_229 ) ) { break ; } if ( ( VAR_230 = METHOD_24 ( VAR_231 , VAR_232 , VAR_233 * 16 ) ) == - 1 ) { * VAR_234 = VAR_235 ; * VAR_236 = METHOD_25 ( ""cosine:hexdumplinedoesn\'thave16numbers"" ) ; return VAR_237 ; } VAR_238 += VAR_239 ; } VAR_240 -> VAR_241 = VAR_242 ; return VAR_243 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 * * VAR_5 ) { union STRUCT_OR_UNION_1 * VAR_6 = & VAR_7 -> VAR_8 ; TYPE_6 VAR_9 ; TYPE_7 VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_8 VAR_17 ; TYPE_9 VAR_18 , VAR_19 , VAR_20 , VAR_21 , VAR_22 ; TYPE_10 VAR_23 , VAR_24 ; TYPE_11 VAR_25 [ VAR_26 ] = """" , VAR_27 [ 6 ] = """" ; struct STRUCT_OR_UNION_2 STRUCT_OR_UNION_3 ; VAR_28 * VAR_29 ; TYPE_12 VAR_30 , VAR_31 , VAR_32 , VAR_33 = 0 ; if ( METHOD_1 ( VAR_34 , ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:"" , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 , & VAR_39 , & VAR_40 , & VAR_41 ) == 7 ) { VAR_42 = METHOD_2 ( VAR_43 , ""%4d-%2d-%2d,%2d:%2d:%2d.%9d:%5s(%127[A-Za-z0-9/:]),Length:%9u,Pro:%9d,Off:%9d,Pri:%9d,RM:%9d,Err:%9d[%8x,%8x]"" , & VAR_44 , & VAR_45 , & VAR_46 , & VAR_47 , & VAR_48 , & VAR_49 , & VAR_50 , VAR_51 , VAR_52 , & VAR_53 , & VAR_54 , & VAR_55 , & VAR_56 , & VAR_57 , & VAR_58 , & VAR_59 , & VAR_60 ) ; if ( VAR_61 != 17 ) { * VAR_62 = VAR_63 ; * VAR_64 = METHOD_3 ( ""cosine:purportedcontrolbladelinedoesn\'thavecodevalues"" ) ; return VAR_65 ; } } else { VAR_66 = METHOD_4 ( VAR_67 , ""%5s(%127[A-Za-z0-9/:]),Length:%9u,Pro:%9d,Off:%9d,Pri:%9d,RM:%9d,Err:%9d[%8x,%8x]"" , VAR_68 , VAR_69 , & VAR_70 , & VAR_71 , & VAR_72 , & VAR_73 , & VAR_74 , & VAR_75 , & VAR_76 , & VAR_77 ) ; if ( VAR_78 != 10 ) { * VAR_79 = VAR_80 ; * VAR_81 = METHOD_5 ( ""cosine:headerlineisneithercontrolbladenorPEoutput"" ) ; return VAR_82 ; } VAR_83 = VAR_84 = VAR_85 = VAR_86 = VAR_87 = VAR_88 = VAR_89 = 0 ; } if ( VAR_90 > VAR_91 ) { * VAR_92 = VAR_93 ; * VAR_94 = METHOD_6 ( ""cosine:Filehas%u-bytepacket,biggerthanmaximumof%u"" , VAR_95 , VAR_96 ) ; return VAR_97 ; } VAR_98 -> VAR_99 = VAR_100 ; VAR_101 -> VAR_102 = VAR_103 | VAR_104 ; STRUCT_OR_UNION_4 . VAR_105 = VAR_106 - 1900 ; STRUCT_OR_UNION_5 . VAR_107 = VAR_108 - 1 ; STRUCT_OR_UNION_6 . VAR_109 = VAR_110 ; STRUCT_OR_UNION_7 . VAR_111 = VAR_112 ; STRUCT_OR_UNION_8 . VAR_113 = VAR_114 ; STRUCT_OR_UNION_9 . VAR_115 = VAR_116 ; STRUCT_OR_UNION_10 . VAR_117 = - 1 ; VAR_118 -> VAR_119 . VAR_120 = METHOD_7 ( & STRUCT_OR_UNION_11 ) ; VAR_121 -> VAR_122 . VAR_123 = VAR_124 * 10000000 ; VAR_125 -> VAR_126 = VAR_127 ; if ( METHOD_8 ( VAR_128 , ""TEST:"" , 5 ) == 0 ) { VAR_129 -> VAR_130 . VAR_131 = VAR_132 ; } else if ( METHOD_9 ( VAR_133 , ""PPoATM:"" , 7 ) == 0 ) { VAR_134 -> VAR_135 . VAR_136 = VAR_137 ; } else if ( METHOD_10 ( VAR_138 , ""PPoFR:"" , 6 ) == 0 ) { VAR_139 -> VAR_140 . VAR_141 = VAR_142 ; } else if ( METHOD_11 ( VAR_143 , ""ATM:"" , 4 ) == 0 ) { VAR_144 -> VAR_145 . VAR_146 = VAR_147 ; } else if ( METHOD_12 ( VAR_148 , ""FR:"" , 3 ) == 0 ) { VAR_149 -> VAR_150 . VAR_151 = VAR_152 ; } else if ( METHOD_13 ( VAR_153 , ""HDLC:"" , 5 ) == 0 ) { VAR_154 -> VAR_155 . VAR_156 = VAR_157 ; } else if ( METHOD_14 ( VAR_158 , ""PPP:"" , 4 ) == 0 ) { VAR_159 -> VAR_160 . VAR_161 = VAR_162 ; } else if ( METHOD_15 ( VAR_163 , ""ETH:"" , 4 ) == 0 ) { VAR_164 -> VAR_165 . VAR_166 = VAR_167 ; } else { VAR_168 -> VAR_169 . VAR_170 = VAR_171 ; } if ( METHOD_16 ( VAR_172 , ""l2-tx"" , 5 ) == 0 ) { VAR_173 -> VAR_174 . VAR_175 = VAR_176 ; } else if ( METHOD_17 ( VAR_177 , ""l2-rx"" , 5 ) == 0 ) { VAR_178 -> VAR_179 . VAR_180 = VAR_181 ; } METHOD_18 ( VAR_182 -> VAR_183 . VAR_184 , VAR_185 , VAR_186 ) ; VAR_187 -> VAR_188 . VAR_189 = VAR_190 ; VAR_191 -> VAR_192 . VAR_193 = VAR_194 ; VAR_195 -> VAR_196 . VAR_197 = VAR_198 ; VAR_199 -> VAR_200 . VAR_201 = VAR_202 ; VAR_203 -> VAR_204 . VAR_205 = VAR_206 ; METHOD_19 ( VAR_207 , VAR_208 ) ; VAR_209 = METHOD_20 ( VAR_210 ) ; VAR_211 = VAR_212 / 16 + ( ( VAR_213 % 16 ) ? 1 : 0 ) ; for ( VAR_214 = 0 ; VAR_215 < VAR_216 ; VAR_217 ++ ) { if ( METHOD_21 ( VAR_218 , VAR_219 , VAR_220 ) == VAR_221 ) { * VAR_222 = METHOD_22 ( VAR_223 , VAR_224 ) ; if ( * VAR_225 == 0 ) { * VAR_226 = VAR_227 ; } return VAR_228 ; } if ( METHOD_23 ( VAR_229 ) ) { break ; } if ( ( VAR_230 = METHOD_24 ( VAR_231 , VAR_232 , VAR_233 * 16 ) ) == - 1 ) { * VAR_234 = VAR_235 ; * VAR_236 = METHOD_25 ( ""cosine:hexdumplinedoesn\'thave16numbers"" ) ; return VAR_237 ; } VAR_238 += VAR_239 ; } VAR_240 -> VAR_241 = VAR_242 ; return VAR_243 ; }",588
589,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { METHOD_1 ( VAR_2 , """" ) ; if VAR_3 METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_6 ) ; METHOD_4 ( VAR_7 ) ; const TYPE_3 * VAR_8 = METHOD_5 ( ""&[-y][-iBUILD_IDS_FILE|-i-][-ePATH[:PATH]...]\\n"" ""\\t[-rREPO]\\n"" ""\\n"" ""Installsdebuginfopackagesforallbuild-idslistedinBUILD_IDS_FILEto\\n"" ""ABRTsystemcache."" ) ; enum { VAR_9 = 1 << 0 , VAR_10 = 1 << 1 , VAR_11 = 1 << 2 , VAR_12 = 1 << 3 , VAR_13 = 1 << 4 , VAR_14 = 1 << 5 , } ; const TYPE_4 * VAR_15 = ""build_ids"" ; const TYPE_5 * VAR_16 = VAR_17 ; const TYPE_6 * VAR_18 = VAR_19 ; const TYPE_7 * VAR_20 = VAR_21 ; struct STRUCT_OR_UNION_0 VAR_22 [ ] = { METHOD_6 ( & VAR_23 ) , METHOD_7 ( 'y' , ""yes"" , VAR_24 , METHOD_8 ( ""Noninteractive,assume\'Yes\'toallquestions"" ) ) , METHOD_9 ( 'i' , ""ids"" , & VAR_25 , ""BUILD_IDS_FILE"" , METHOD_10 ( ""-meansSTDIN,default:build_ids"" ) ) , METHOD_11 ( 'e' , ""exact"" , & VAR_26 , ""EXACT"" , METHOD_12 ( ""Downloadonlyspecifiedfiles"" ) ) , METHOD_13 ( 'r' , ""repo"" , & VAR_27 , ""REPO"" , METHOD_14 ( ""Patterntousewhensearchingforrepos,default:*debug*"" ) ) , METHOD_15 ( 's' , ""size_mb"" , & VAR_28 , ""SIZE_MB"" , METHOD_16 ( ""Ignoredoption"" ) ) , METHOD_17 ( ) } ; const unsigned VAR_29 = METHOD_18 ( VAR_30 , VAR_31 , VAR_32 , VAR_33 ) ; const TYPE_8 VAR_34 = METHOD_19 ( ) ; const TYPE_9 VAR_35 = METHOD_20 ( ) ; const TYPE_10 VAR_36 = METHOD_21 ( ) ; const TYPE_11 VAR_37 = METHOD_22 ( ) ; TYPE_12 * VAR_38 = VAR_39 ; if ( METHOD_23 ( ""-"" , VAR_40 ) != 0 ) { if ( METHOD_24 ( VAR_41 , VAR_42 ) < 0 ) METHOD_25 ( ""setregid(egid,rgid)"" ) ; if ( METHOD_26 ( VAR_43 , VAR_44 ) < 0 ) METHOD_27 ( ""setreuid(euid,ruid)"" ) ; const TYPE_13 VAR_45 = METHOD_28 ( VAR_46 , VAR_47 ) ; if ( METHOD_29 ( VAR_48 , VAR_49 ) < 0 ) METHOD_30 ( ""setregid(rgid,egid)"" ) ; if ( METHOD_31 ( VAR_50 , VAR_51 ) < 0 ) METHOD_32 ( ""setreuid(ruid,euid)"" ) ; if ( VAR_52 < 0 ) METHOD_33 ( ""Failedtoopenfile\'%s\'"" , VAR_53 ) ; VAR_54 = METHOD_34 ( ""/proc/self/fd/%d"" , VAR_55 ) ; }  const TYPE_14 * VAR_56 [ 11 ] ;  { const TYPE_15 * VAR_57 [ ] = { """" , ""-v"" , ""-vv"" , ""-vvv"" } ; unsigned VAR_58 = 0 ; VAR_59 [ VAR_60 ++ ] = VAR_61 ; VAR_62 [ VAR_63 ++ ] = ""--ids"" ; VAR_64 [ VAR_65 ++ ] = ( VAR_66 != VAR_67 ) ? VAR_68 : ""-"" ; if ( VAR_69 > 0 ) VAR_70 [ VAR_71 ++ ] = VAR_72 [ VAR_73 <= 3 ? VAR_74 : 3 ] ; if ( ( VAR_75 & VAR_76 ) ) VAR_77 [ VAR_78 ++ ] = ""-y"" ; if ( ( VAR_79 & VAR_80 ) ) { VAR_81 [ VAR_82 ++ ] = ""--exact"" ; VAR_83 [ VAR_84 ++ ] = VAR_85 ; } if ( ( VAR_86 & VAR_87 ) ) { VAR_88 [ VAR_89 ++ ] = ""--repo"" ; VAR_90 [ VAR_91 ++ ] = VAR_92 ; }  VAR_93 [ VAR_94 ++ ] = ""--"" ;  VAR_95 [ VAR_96 ] = VAR_97 ; } if ( VAR_98 != VAR_99 ) METHOD_35 ( METHOD_36 ( VAR_100 , VAR_101 ) ) ; if ( VAR_102 != VAR_103 ) { METHOD_37 ( METHOD_38 ( VAR_104 , VAR_105 ) ) ; if 1 static const TYPE_16 * VAR_106 [ ] = { ""REPORT_CLIENT_SLAVE"" , ""LANG"" , } ; const TYPE_17 VAR_107 = sizeof ( VAR_108 ) / sizeof ( TYPE_18 * ) ; TYPE_19 * VAR_109 [ sizeof ( VAR_110 ) / sizeof ( TYPE_20 * ) ] = { 0 } ; TYPE_21 * VAR_111 = VAR_112 ; for ( TYPE_22 VAR_113 = 0 ; VAR_114 < VAR_115 ; VAR_116 ++ ) if ( ( VAR_117 = METHOD_39 ( VAR_118 [ VAR_119 ] ) ) != VAR_120 ) VAR_121 [ VAR_122 ] = METHOD_40 ( VAR_123 ) ; METHOD_41 ( ) ; for ( TYPE_23 VAR_124 = 0 ; VAR_125 < VAR_126 ; VAR_127 ++ ) if ( VAR_128 [ VAR_129 ] != VAR_130 ) { METHOD_42 ( VAR_131 [ VAR_132 ] , VAR_133 [ VAR_134 ] ) ; METHOD_43 ( VAR_135 [ VAR_136 ] ) ; } else static const TYPE_24 VAR_137 [ ] = ""LD_LIBRARY_PATH"" ""\\0"" ""LD_PRELOAD"" ""\\0"" ""LD_TRACE_LOADED_OBJECTS"" ""\\0"" ""LD_BIND_NOW"" ""\\0"" ""LD_AOUT_LIBRARY_PATH"" ""\\0"" ""LD_AOUT_PRELOAD"" ""\\0"" ""LD_NOWARN"" ""\\0"" ""LD_KEEPDIR"" ""\\0"" ; const TYPE_25 * VAR_138 = VAR_139 ; do { METHOD_44 ( VAR_140 ) ; VAR_141 += METHOD_45 ( VAR_142 ) + 1 ; } while ( * VAR_143 ) ; TYPE_26 VAR_144 [ ] = ""PATH=/usr/sbin:/sbin:/usr/bin:/bin:"" BIN_DIR "":"" SBIN_DIR ; if ( VAR_145 != 0 ) strcpy ( VAR_146 , ""PATH=/usr/bin:/bin:"" BIN_DIR ) ; METHOD_46 ( VAR_147 ) ; METHOD_47 ( 0022 ) ; }  METHOD_48 ( VAR_148 , ( TYPE_27 * * ) VAR_149 ) ;  METHOD_49 ( ""Can\'texecute%s"" , VAR_150 ) ;  } ","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * * VAR_1 ) { METHOD_1 ( VAR_2 , """" ) ; if VAR_3 METHOD_2 ( VAR_4 , VAR_5 ) ; METHOD_3 ( VAR_6 ) ; METHOD_4 ( VAR_7 ) ; const TYPE_3 * VAR_8 = METHOD_5 ( ""&[-y][-iBUILD_IDS_FILE|-i-][-ePATH[:PATH]...]\\n"" ""\\t[-rREPO]\\n"" ""\\n"" ""Installsdebuginfopackagesforallbuild-idslistedinBUILD_IDS_FILEto\\n"" ""ABRTsystemcache."" ) ; enum { VAR_9 = 1 << 0 , VAR_10 = 1 << 1 , VAR_11 = 1 << 2 , VAR_12 = 1 << 3 , VAR_13 = 1 << 4 , VAR_14 = 1 << 5 , } ; const TYPE_4 * VAR_15 = ""build_ids"" ; const TYPE_5 * VAR_16 = VAR_17 ; const TYPE_6 * VAR_18 = VAR_19 ; const TYPE_7 * VAR_20 = VAR_21 ; struct STRUCT_OR_UNION_0 VAR_22 [ ] = { METHOD_6 ( & VAR_23 ) , METHOD_7 ( 'y' , ""yes"" , VAR_24 , METHOD_8 ( ""Noninteractive,assume\'Yes\'toallquestions"" ) ) , METHOD_9 ( 'i' , ""ids"" , & VAR_25 , ""BUILD_IDS_FILE"" , METHOD_10 ( ""-meansSTDIN,default:build_ids"" ) ) , METHOD_11 ( 'e' , ""exact"" , & VAR_26 , ""EXACT"" , METHOD_12 ( ""Downloadonlyspecifiedfiles"" ) ) , METHOD_13 ( 'r' , ""repo"" , & VAR_27 , ""REPO"" , METHOD_14 ( ""Patterntousewhensearchingforrepos,default:*debug*"" ) ) , METHOD_15 ( 's' , ""size_mb"" , & VAR_28 , ""SIZE_MB"" , METHOD_16 ( ""Ignoredoption"" ) ) , METHOD_17 ( ) } ; const unsigned VAR_29 = METHOD_18 ( VAR_30 , VAR_31 , VAR_32 , VAR_33 ) ; const TYPE_8 VAR_34 = METHOD_19 ( ) ; const TYPE_9 VAR_35 = METHOD_20 ( ) ; const TYPE_10 VAR_36 = METHOD_21 ( ) ; const TYPE_11 VAR_37 = METHOD_22 ( ) ; TYPE_12 * VAR_38 = VAR_39 ; if ( METHOD_23 ( ""-"" , VAR_40 ) != 0 ) { if ( METHOD_24 ( VAR_41 , VAR_42 ) < 0 ) METHOD_25 ( ""setregid(egid,rgid)"" ) ; if ( METHOD_26 ( VAR_43 , VAR_44 ) < 0 ) METHOD_27 ( ""setreuid(euid,ruid)"" ) ; const TYPE_13 VAR_45 = METHOD_28 ( VAR_46 , VAR_47 ) ; if ( METHOD_29 ( VAR_48 , VAR_49 ) < 0 ) METHOD_30 ( ""setregid(rgid,egid)"" ) ; if ( METHOD_31 ( VAR_50 , VAR_51 ) < 0 ) METHOD_32 ( ""setreuid(ruid,euid)"" ) ; if ( VAR_52 < 0 ) METHOD_33 ( ""Failedtoopenfile\'%s\'"" , VAR_53 ) ; VAR_54 = METHOD_34 ( ""/proc/self/fd/%d"" , VAR_55 ) ; } TYPE_27 VAR_151 [ ] = VAR_152 ""/abrt-tmp-debuginfo.XXXXXX"" ; if ( METHOD_50 ( VAR_151 ) == VAR_130 ) METHOD_33 ( ""Failedtocreateworkingdirectory"" ) ; METHOD_51 ( ""Createdworkingdirectory:%s"" , VAR_151 ) ; const TYPE_27 * VAR_149 [ 13 ] ; { const TYPE_15 * VAR_57 [ ] = { """" , ""-v"" , ""-vv"" , ""-vvv"" } ; unsigned VAR_58 = 0 ; VAR_59 [ VAR_60 ++ ] = ""--tmpdir"" ; VAR_149 [ VAR_136 ++ ] = VAR_151 ; VAR_149 [ VAR_136 ++ ] = VAR_61 ; VAR_62 [ VAR_63 ++ ] = ""--ids"" ; VAR_64 [ VAR_65 ++ ] = ( VAR_66 != VAR_67 ) ? VAR_68 : ""-"" ; if ( VAR_69 > 0 ) VAR_70 [ VAR_71 ++ ] = VAR_72 [ VAR_73 <= 3 ? VAR_74 : 3 ] ; if ( ( VAR_75 & VAR_76 ) ) VAR_77 [ VAR_78 ++ ] = ""-y"" ; if ( ( VAR_79 & VAR_80 ) ) { VAR_81 [ VAR_82 ++ ] = ""--exact"" ; VAR_83 [ VAR_84 ++ ] = VAR_85 ; } if ( ( VAR_86 & VAR_87 ) ) { VAR_88 [ VAR_89 ++ ] = ""--repo"" ; VAR_90 [ VAR_91 ++ ] = VAR_92 ; } VAR_93 [ VAR_94 ++ ] = ""--"" ; VAR_95 [ VAR_96 ] = VAR_97 ; } if ( VAR_98 != VAR_99 ) METHOD_35 ( METHOD_36 ( VAR_100 , VAR_101 ) ) ; if ( VAR_102 != VAR_103 ) { METHOD_37 ( METHOD_38 ( VAR_104 , VAR_105 ) ) ; if 1 static const TYPE_16 * VAR_106 [ ] = { ""REPORT_CLIENT_SLAVE"" , ""LANG"" , } ; const TYPE_17 VAR_107 = sizeof ( VAR_108 ) / sizeof ( TYPE_18 * ) ; TYPE_19 * VAR_109 [ sizeof ( VAR_110 ) / sizeof ( TYPE_20 * ) ] = { 0 } ; TYPE_21 * VAR_111 = VAR_112 ; for ( TYPE_22 VAR_113 = 0 ; VAR_114 < VAR_115 ; VAR_116 ++ ) if ( ( VAR_117 = METHOD_39 ( VAR_118 [ VAR_119 ] ) ) != VAR_120 ) VAR_121 [ VAR_122 ] = METHOD_40 ( VAR_123 ) ; METHOD_41 ( ) ; for ( TYPE_23 VAR_124 = 0 ; VAR_125 < VAR_126 ; VAR_127 ++ ) if ( VAR_128 [ VAR_129 ] != VAR_130 ) { METHOD_42 ( VAR_131 [ VAR_132 ] , VAR_133 [ VAR_134 ] ) ; METHOD_43 ( VAR_135 [ VAR_136 ] ) ; } TYPE_28 VAR_153 = METHOD_52 ( ) ; if ( VAR_153 < 0 ) METHOD_33 ( ""fork"" ) ; if ( VAR_153 == 0 ) { else static const TYPE_24 VAR_137 [ ] = ""LD_LIBRARY_PATH"" ""\\0"" ""LD_PRELOAD"" ""\\0"" ""LD_TRACE_LOADED_OBJECTS"" ""\\0"" ""LD_BIND_NOW"" ""\\0"" ""LD_AOUT_LIBRARY_PATH"" ""\\0"" ""LD_AOUT_PRELOAD"" ""\\0"" ""LD_NOWARN"" ""\\0"" ""LD_KEEPDIR"" ""\\0"" ; const TYPE_25 * VAR_138 = VAR_139 ; do { METHOD_44 ( VAR_140 ) ; VAR_141 += METHOD_45 ( VAR_142 ) + 1 ; } while ( * VAR_143 ) ; TYPE_26 VAR_144 [ ] = ""PATH=/usr/sbin:/sbin:/usr/bin:/bin:"" BIN_DIR "":"" SBIN_DIR ; if ( VAR_145 != 0 ) strcpy ( VAR_146 , ""PATH=/usr/bin:/bin:"" BIN_DIR ) ; METHOD_46 ( VAR_147 ) ; METHOD_47 ( 0022 ) ; } TYPE_13 VAR_154 ; if ( METHOD_53 ( VAR_153 , & VAR_154 , 0 ) < 0 ) METHOD_33 ( ""waitpid"" ) ; if ( METHOD_54 ( VAR_151 ) >= 0 ) METHOD_51 ( ""Removedworkingdirectory:%s"" , VAR_151 ) ; else if ( VAR_155 != VAR_156 ) METHOD_55 ( ""Failedtoremoveworkingdirectory"" ) ; if ( METHOD_56 ( VAR_154 ) ) return METHOD_57 ( VAR_154 ) ; if ( METHOD_58 ( VAR_154 ) ) METHOD_49 ( ""Childterminatedwithsignal%d"" , METHOD_59 ( VAR_154 ) ) ; METHOD_49 ( ""Childexitfailed"" ) ; } METHOD_48 ( VAR_148 , ( TYPE_27 * * ) VAR_149 ) ; METHOD_49 ( ""Can\'texecute%s"" , VAR_150 ) ; }",589
590,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 ; if ( VAR_5 -> VAR_6 ) { if ( VAR_7 == VAR_8 ) { TYPE_3 VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 ) ; if ( VAR_15 < 0 ) return VAR_16 ; }  VAR_17 -> VAR_18 = VAR_19 ;  } else VAR_20 -> VAR_21 = VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 , ( struct STRUCT_OR_UNION_3 TYPE_4 * ) VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; if ( VAR_29 >= 0 ) VAR_30 -> VAR_31 = VAR_32 ; return VAR_33 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , TYPE_1 VAR_3 ) { TYPE_2 VAR_4 ; if ( VAR_5 -> VAR_6 ) { if ( VAR_7 == VAR_8 ) { TYPE_3 VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 , VAR_12 -> VAR_13 , VAR_14 ) ; if ( VAR_15 < 0 ) return VAR_16 ; } if ( VAR_30 -> VAR_21 ) VAR_17 -> VAR_18 = VAR_19 ; } else VAR_20 -> VAR_21 = VAR_22 ; VAR_23 = METHOD_2 ( VAR_24 , ( struct STRUCT_OR_UNION_3 TYPE_4 * ) VAR_25 -> VAR_26 , VAR_27 -> VAR_28 ) ; if ( VAR_29 >= 0 ) VAR_30 -> VAR_31 = VAR_32 ; return VAR_33 ; }",590
591,"TYPE_0 METHOD_0 ( TYPE_1 ) { if 0 VAR_0 = METHOD_1 ( ""OpenSSL"" ) ; VAR_1 = METHOD_2 ( VAR_2 , ""OpenSSLError"" , VAR_3 ) ; VAR_4 = METHOD_3 ( VAR_5 , ""Cipher"" , VAR_6 ) ; VAR_7 = METHOD_4 ( VAR_8 , ""CipherError"" , VAR_9 ) ; METHOD_5 ( VAR_10 , VAR_11 ) ; METHOD_6 ( VAR_12 , VAR_13 ) ; METHOD_7 ( VAR_14 , ""ciphers"" , VAR_15 , 0 ) ; METHOD_8 ( VAR_16 , ""initialize"" , VAR_17 , 1 ) ; METHOD_9 ( VAR_18 , ""reset"" , VAR_19 , 0 ) ; METHOD_10 ( VAR_20 , ""encrypt"" , VAR_21 , - 1 ) ; METHOD_11 ( VAR_22 , ""decrypt"" , VAR_23 , - 1 ) ; METHOD_12 ( VAR_24 , ""pkcs5_keyivgen"" , VAR_25 , - 1 ) ; METHOD_13 ( VAR_26 , ""update"" , VAR_27 , - 1 ) ; METHOD_14 ( VAR_28 , ""final"" , VAR_29 , 0 ) ; METHOD_15 ( VAR_30 , ""name"" , VAR_31 , 0 ) ; METHOD_16 ( VAR_32 , ""key="" , VAR_33 , 1 ) ; METHOD_17 ( VAR_34 , ""auth_data="" , VAR_35 , 1 ) ; METHOD_18 ( VAR_36 , ""auth_tag="" , VAR_37 , 1 ) ; METHOD_19 ( VAR_38 , ""auth_tag"" , VAR_39 , - 1 ) ; METHOD_20 ( VAR_40 , ""auth_tag_len="" , VAR_41 , 1 ) ; METHOD_21 ( VAR_42 , ""authenticated?"" , VAR_43 , 0 ) ; METHOD_22 ( VAR_44 , ""key_len="" , VAR_45 , 1 ) ; METHOD_23 ( VAR_46 , ""key_len"" , VAR_47 , 0 ) ; METHOD_24 ( VAR_48 , ""iv="" , VAR_49 , 1 ) ; METHOD_25 ( VAR_50 , ""iv_len="" , VAR_51 , 1 ) ; METHOD_26 ( VAR_52 , ""iv_len"" , VAR_53 , 0 ) ; METHOD_27 ( VAR_54 , ""block_size"" , VAR_55 , 0 ) ; METHOD_28 ( VAR_56 , ""padding="" , VAR_57 , 1 ) ; VAR_58 = METHOD_29 ( ""auth_tag_len"" ) ;  } ","TYPE_0 METHOD_0 ( TYPE_1 ) { if 0 VAR_0 = METHOD_1 ( ""OpenSSL"" ) ; VAR_1 = METHOD_2 ( VAR_2 , ""OpenSSLError"" , VAR_3 ) ; VAR_4 = METHOD_3 ( VAR_5 , ""Cipher"" , VAR_6 ) ; VAR_7 = METHOD_4 ( VAR_8 , ""CipherError"" , VAR_9 ) ; METHOD_5 ( VAR_10 , VAR_11 ) ; METHOD_6 ( VAR_12 , VAR_13 ) ; METHOD_7 ( VAR_14 , ""ciphers"" , VAR_15 , 0 ) ; METHOD_8 ( VAR_16 , ""initialize"" , VAR_17 , 1 ) ; METHOD_9 ( VAR_18 , ""reset"" , VAR_19 , 0 ) ; METHOD_10 ( VAR_20 , ""encrypt"" , VAR_21 , - 1 ) ; METHOD_11 ( VAR_22 , ""decrypt"" , VAR_23 , - 1 ) ; METHOD_12 ( VAR_24 , ""pkcs5_keyivgen"" , VAR_25 , - 1 ) ; METHOD_13 ( VAR_26 , ""update"" , VAR_27 , - 1 ) ; METHOD_14 ( VAR_28 , ""final"" , VAR_29 , 0 ) ; METHOD_15 ( VAR_30 , ""name"" , VAR_31 , 0 ) ; METHOD_16 ( VAR_32 , ""key="" , VAR_33 , 1 ) ; METHOD_17 ( VAR_34 , ""auth_data="" , VAR_35 , 1 ) ; METHOD_18 ( VAR_36 , ""auth_tag="" , VAR_37 , 1 ) ; METHOD_19 ( VAR_38 , ""auth_tag"" , VAR_39 , - 1 ) ; METHOD_20 ( VAR_40 , ""auth_tag_len="" , VAR_41 , 1 ) ; METHOD_21 ( VAR_42 , ""authenticated?"" , VAR_43 , 0 ) ; METHOD_22 ( VAR_44 , ""key_len="" , VAR_45 , 1 ) ; METHOD_23 ( VAR_46 , ""key_len"" , VAR_47 , 0 ) ; METHOD_24 ( VAR_48 , ""iv="" , VAR_49 , 1 ) ; METHOD_25 ( VAR_50 , ""iv_len="" , VAR_51 , 1 ) ; METHOD_26 ( VAR_52 , ""iv_len"" , VAR_53 , 0 ) ; METHOD_27 ( VAR_54 , ""block_size"" , VAR_55 , 0 ) ; METHOD_28 ( VAR_56 , ""padding="" , VAR_57 , 1 ) ; VAR_58 = METHOD_29 ( ""auth_tag_len"" ) ; VAR_59 = METHOD_29 ( ""key_set"" ) ; }",591
592,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_3 * VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_4 * VAR_5 = METHOD_3 ( VAR_6 ) ; TYPE_5 * VAR_7 = """" ; METHOD_4 ( VAR_8 ) ; if ( ! METHOD_5 ( VAR_9 , ""/"" ) ) { if ( METHOD_6 ( ""WikiHome"" , VAR_10 ) != 0 ) METHOD_7 ( VAR_11 , ""/WikiHome?create"" ) ; VAR_12 = ""/WikiHome"" ; } if ( ! METHOD_8 ( VAR_13 , ""/styles.css"" ) ) { METHOD_9 ( VAR_14 , ""text/css"" ) ; METHOD_10 ( VAR_15 , ""%s"" , VAR_16 ) ; METHOD_11 ( VAR_17 ) ; METHOD_12 ( 0 ) ; } if ( ! METHOD_13 ( VAR_18 , ""/favicon.ico"" ) ) { METHOD_14 ( VAR_19 , ""image/ico"" ) ; METHOD_15 ( VAR_20 , VAR_21 , VAR_22 ) ; METHOD_16 ( VAR_23 ) ; METHOD_17 ( 0 ) ; } VAR_24 = VAR_25 + 1 ; if ( ! METHOD_18 ( VAR_26 , ""api/"" , 4 ) ) { TYPE_6 * VAR_27 ; VAR_28 += 4 ; for ( VAR_29 = VAR_30 ; * VAR_31 != '\\0' ; VAR_32 ++ ) if ( * VAR_33 == '?' ) { * VAR_34 = '\\0' ; break ; } METHOD_19 ( VAR_35 , VAR_36 , VAR_37 ) ; METHOD_20 ( 0 ) ; }  if ( METHOD_21 ( VAR_38 , '/' ) )  { METHOD_22 ( VAR_39 , 404 , ""NotFound"" ) ; METHOD_23 ( VAR_40 , ""<html><body>404NotFound</body></html>\\n"" ) ; METHOD_24 ( VAR_41 ) ; METHOD_25 ( 0 ) ; } if ( ! METHOD_26 ( VAR_42 , ""Changes"" ) ) { METHOD_27 ( VAR_43 ) ; } else if ( ! METHOD_28 ( VAR_44 , ""ChangesRss"" ) ) { METHOD_29 ( VAR_45 ) ; } else if ( ! METHOD_30 ( VAR_46 , ""Search"" ) ) { METHOD_31 ( VAR_47 , METHOD_32 ( VAR_48 , ""expr"" ) ) ; } else if ( ! METHOD_33 ( VAR_49 , ""Create"" ) ) { if ( ( VAR_50 = METHOD_34 ( VAR_51 , ""title"" ) ) != VAR_52 ) { METHOD_35 ( VAR_53 , METHOD_36 ( VAR_54 , ""title"" ) ) ; } else { METHOD_37 ( VAR_55 ) ; } } else { if ( ( VAR_56 = METHOD_38 ( VAR_57 , ""wikitext"" ) ) != VAR_58 ) { METHOD_39 ( VAR_59 , VAR_60 ) ; } if ( METHOD_40 ( VAR_61 , VAR_62 ) == 0 ) { VAR_63 = METHOD_41 ( VAR_64 ) ; if ( ! METHOD_42 ( VAR_65 , ""edit"" ) ) { METHOD_43 ( VAR_66 , VAR_67 , VAR_68 ) ; } else { METHOD_44 ( VAR_69 , VAR_70 , VAR_71 ) ; } } else { if ( ! METHOD_45 ( VAR_72 , ""create"" ) ) { METHOD_46 ( VAR_73 , VAR_74 , VAR_75 ) ; } else { TYPE_7 VAR_76 [ 1024 ] ; METHOD_47 ( VAR_77 , 1024 , ""%s?create"" , VAR_78 ) ; METHOD_48 ( VAR_79 , VAR_80 ) ; } } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_3 * VAR_3 = METHOD_2 ( VAR_4 ) ; TYPE_4 * VAR_5 = METHOD_3 ( VAR_6 ) ; TYPE_5 * VAR_7 = """" ; METHOD_4 ( VAR_8 ) ; if ( ! METHOD_5 ( VAR_9 , ""/"" ) ) { if ( METHOD_6 ( ""WikiHome"" , VAR_10 ) != 0 ) METHOD_7 ( VAR_11 , ""/WikiHome?create"" ) ; VAR_12 = ""/WikiHome"" ; } if ( ! METHOD_49 ( VAR_78 ) ) { METHOD_9 ( VAR_14 , ""text/css"" ) ; METHOD_10 ( VAR_15 , ""%s"" , VAR_16 ) ; METHOD_11 ( VAR_17 ) ; METHOD_12 ( 0 ) ; } if ( ! METHOD_13 ( VAR_18 , ""/favicon.ico"" ) ) { METHOD_14 ( VAR_19 , ""image/ico"" ) ; METHOD_15 ( VAR_20 , VAR_21 , VAR_22 ) ; METHOD_16 ( VAR_23 ) ; METHOD_17 ( 0 ) ; } VAR_24 = VAR_25 + 1 ; if ( ! METHOD_18 ( VAR_26 , ""api/"" , 4 ) ) { TYPE_6 * VAR_27 ; VAR_28 += 4 ; for ( VAR_29 = VAR_30 ; * VAR_31 != '\\0' ; VAR_32 ++ ) if ( * VAR_33 == '?' ) { * VAR_34 = '\\0' ; break ; } METHOD_19 ( VAR_35 , VAR_36 , VAR_37 ) ; METHOD_20 ( 0 ) ; } if ( METHOD_21 ( VAR_38 , '/' ) ) { METHOD_22 ( VAR_39 , 404 , ""NotFound"" ) ; METHOD_23 ( VAR_40 , ""<html><body>404NotFound</body></html>\\n"" ) ; METHOD_24 ( VAR_41 ) ; METHOD_25 ( 0 ) ; } if ( ! METHOD_26 ( VAR_42 , ""Changes"" ) ) { METHOD_27 ( VAR_43 ) ; } else if ( ! METHOD_28 ( VAR_44 , ""ChangesRss"" ) ) { METHOD_29 ( VAR_45 ) ; } else if ( ! METHOD_30 ( VAR_46 , ""Search"" ) ) { METHOD_31 ( VAR_47 , METHOD_32 ( VAR_48 , ""expr"" ) ) ; } else if ( ! METHOD_33 ( VAR_49 , ""Create"" ) ) { if ( ( VAR_50 = METHOD_34 ( VAR_51 , ""title"" ) ) != VAR_52 ) { METHOD_35 ( VAR_53 , METHOD_36 ( VAR_54 , ""title"" ) ) ; } else { METHOD_37 ( VAR_55 ) ; } } else { if ( ( VAR_56 = METHOD_38 ( VAR_57 , ""wikitext"" ) ) != VAR_58 ) { METHOD_39 ( VAR_59 , VAR_60 ) ; } if ( METHOD_40 ( VAR_61 , VAR_62 ) == 0 ) { VAR_63 = METHOD_41 ( VAR_64 ) ; if ( ! METHOD_42 ( VAR_65 , ""edit"" ) ) { METHOD_43 ( VAR_66 , VAR_67 , VAR_68 ) ; } else { METHOD_44 ( VAR_69 , VAR_70 , VAR_71 ) ; } } else { if ( ! METHOD_45 ( VAR_72 , ""create"" ) ) { METHOD_46 ( VAR_73 , VAR_74 , VAR_75 ) ; } else { TYPE_7 VAR_76 [ 1024 ] ; METHOD_47 ( VAR_77 , 1024 , ""%s?create"" , VAR_78 ) ; METHOD_48 ( VAR_79 , VAR_80 ) ; } } } }",592
593,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) {  TYPE_5 VAR_4 = 0 , VAR_5 = 1 ;  TYPE_6 VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ;  TYPE_8 VAR_10 ;  TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 , VAR_15 ; TYPE_13 VAR_16 = METHOD_1 ( VAR_17 ) ; TYPE_14 VAR_18 = METHOD_2 ( VAR_19 ) ; TYPE_15 VAR_20 = METHOD_3 ( VAR_21 ) ; TYPE_16 VAR_22 = METHOD_4 ( VAR_23 ) ; TYPE_17 VAR_24 = METHOD_5 ( VAR_25 ) ; TYPE_18 VAR_26 = METHOD_6 ( VAR_27 ) ? 3 : 1 ; TYPE_19 VAR_28 = 16 ; if ( VAR_29 == 3 && METHOD_7 ( VAR_30 ) != 127 ) { METHOD_8 ( ""can\'tcreatevalidRIFFwavheaderfornon-normalizedfloatingdata!"" ) ; return VAR_31 ; } if ( VAR_32 == - 1 ) VAR_33 = 0x7ffff000 / ( VAR_34 * VAR_35 ) ; VAR_36 = VAR_37 * VAR_38 * VAR_39 ; if ( VAR_40 > 0xff000000 ) { if ( VAR_41 ) METHOD_9 ( ""total_data_bytes=%lld,sorf64"" , VAR_42 ) ; VAR_43 = 0 ; VAR_44 = 1 ; } else if ( VAR_45 ) METHOD_10 ( ""total_data_bytes=%lld,soriff"" , VAR_46 ) ; METHOD_11 ( VAR_47 ) ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; VAR_54 . VAR_55 = VAR_56 ; VAR_57 . VAR_58 = VAR_59 * VAR_60 * VAR_61 ; VAR_62 . VAR_63 = VAR_64 * VAR_65 ; VAR_66 . VAR_67 = VAR_68 ; if ( VAR_69 > 2 || VAR_70 != 0x5 - VAR_71 ) { VAR_72 = sizeof ( VAR_73 ) ; VAR_74 . VAR_75 = 22 ; VAR_76 . VAR_77 = VAR_78 ; VAR_79 . VAR_80 = VAR_81 ; VAR_82 . VAR_83 = VAR_84 ; VAR_85 . VAR_86 = 0xfffe ; VAR_87 . VAR_88 = VAR_89 * 8 ; VAR_90 . VAR_91 [ 4 ] = 0x10 ; VAR_92 . VAR_93 [ 6 ] = 0x80 ; VAR_94 . VAR_95 [ 9 ] = 0xaa ; VAR_96 . VAR_97 [ 11 ] = 0x38 ; VAR_98 . VAR_99 [ 12 ] = 0x9b ; VAR_100 . VAR_101 [ 13 ] = 0x71 ; } METHOD_12 ( VAR_102 . VAR_103 , VAR_104 ? ""RF64"" : ""RIFF"" , sizeof ( VAR_105 . VAR_106 ) ) ; METHOD_13 ( VAR_107 . VAR_108 , ""WAVE"" , sizeof ( VAR_109 . VAR_110 ) ) ; VAR_111 = sizeof ( VAR_112 ) + VAR_113 + sizeof ( VAR_114 ) + ( ( VAR_115 + 1 ) & ~ ( TYPE_20 ) 1 ) ; if ( VAR_116 ) VAR_117 += sizeof ( VAR_118 ) + sizeof ( VAR_119 ) ;  if ( VAR_120 ) VAR_121 += sizeof ( VAR_122 ) ;  METHOD_14 ( VAR_123 . VAR_124 , ""fmt"" , sizeof ( VAR_125 . VAR_126 ) ) ; METHOD_15 ( VAR_127 . VAR_128 , ""data"" , sizeof ( VAR_129 . VAR_130 ) ) ; VAR_131 . VAR_132 = VAR_133 ; if ( VAR_134 ) { METHOD_16 ( VAR_135 ) ; METHOD_17 ( VAR_136 . VAR_137 , ""junk"" , sizeof ( VAR_138 . VAR_139 ) ) ; VAR_140 . VAR_141 = sizeof ( VAR_142 ) - 8 ; METHOD_18 ( & VAR_143 , VAR_144 ) ; } if ( VAR_145 ) { METHOD_19 ( VAR_146 . VAR_147 , ""ds64"" , sizeof ( VAR_148 . VAR_149 ) ) ;  VAR_150 . VAR_151 = sizeof ( VAR_152 ) ;  METHOD_20 ( VAR_153 ) ; VAR_154 . VAR_155 = VAR_156 ; VAR_157 . VAR_158 = VAR_159 ;  VAR_160 . VAR_161 = VAR_162 ;  VAR_163 . VAR_164 = ( TYPE_21 ) - 1 ; VAR_165 . VAR_166 = ( TYPE_22 ) - 1 ; METHOD_21 ( & VAR_167 , VAR_168 ) ; METHOD_22 ( & VAR_169 , VAR_170 ) ; } else { VAR_171 . VAR_172 = ( TYPE_23 ) VAR_173 ; VAR_174 . VAR_175 = ( TYPE_24 ) VAR_176 ; }  METHOD_23 ( & VAR_177 , VAR_178 ) ;  METHOD_24 ( & VAR_179 , VAR_180 ) ; METHOD_25 ( & VAR_181 , VAR_182 ) ; METHOD_26 ( & VAR_183 , VAR_184 ) ; if ( ! METHOD_27 ( VAR_185 , & VAR_186 , sizeof ( VAR_187 ) , & VAR_188 ) || VAR_189 != sizeof ( VAR_190 ) || ( VAR_191 && ( ! METHOD_28 ( VAR_192 , & VAR_193 , sizeof ( VAR_194 ) , & VAR_195 ) || VAR_196 != sizeof ( VAR_197 ) ) ) ||  ( VAR_198 && ( ! METHOD_29 ( VAR_199 , & VAR_200 , sizeof ( VAR_201 ) , & VAR_202 ) || VAR_203 != sizeof ( VAR_204 ) ) ) ||  ( VAR_205 && ( ! METHOD_30 ( VAR_206 , & VAR_207 , sizeof ( VAR_208 ) , & VAR_209 ) || VAR_210 != sizeof ( VAR_211 ) ) ) || ! METHOD_31 ( VAR_212 , & VAR_213 , sizeof ( VAR_214 ) , & VAR_215 ) || VAR_216 != sizeof ( VAR_217 ) || ! METHOD_32 ( VAR_218 , & VAR_219 , VAR_220 , & VAR_221 ) || VAR_222 != VAR_223 || ! METHOD_33 ( VAR_224 , & VAR_225 , sizeof ( VAR_226 ) , & VAR_227 ) || VAR_228 != sizeof ( VAR_229 ) ) { METHOD_34 ( ""can\'twrite.WAVdata,diskprobablyfull!"" ) ; return VAR_230 ; } return VAR_231 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = 0 , VAR_5 = 1 ; TYPE_6 VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; TYPE_8 VAR_10 ; TYPE_9 VAR_11 ; TYPE_10 VAR_12 ; TYPE_11 VAR_13 ; TYPE_12 VAR_14 , VAR_15 ; TYPE_13 VAR_16 = METHOD_1 ( VAR_17 ) ; TYPE_14 VAR_18 = METHOD_2 ( VAR_19 ) ; TYPE_15 VAR_20 = METHOD_3 ( VAR_21 ) ; TYPE_16 VAR_22 = METHOD_4 ( VAR_23 ) ; TYPE_17 VAR_24 = METHOD_5 ( VAR_25 ) ; TYPE_18 VAR_26 = METHOD_6 ( VAR_27 ) ? 3 : 1 ; TYPE_19 VAR_28 = 16 ; if ( VAR_29 == 3 && METHOD_7 ( VAR_30 ) != 127 ) { METHOD_8 ( ""can\'tcreatevalidRIFFwavheaderfornon-normalizedfloatingdata!"" ) ; return VAR_31 ; } if ( VAR_32 == - 1 ) VAR_33 = 0x7ffff000 / ( VAR_34 * VAR_35 ) ; VAR_36 = VAR_37 * VAR_38 * VAR_39 ; if ( VAR_40 > 0xff000000 ) { if ( VAR_41 ) METHOD_9 ( ""total_data_bytes=%lld,sorf64"" , VAR_42 ) ; VAR_43 = 0 ; VAR_44 = 1 ; } else if ( VAR_45 ) METHOD_10 ( ""total_data_bytes=%lld,soriff"" , VAR_46 ) ; METHOD_11 ( VAR_47 ) ; VAR_48 . VAR_49 = VAR_50 ; VAR_51 . VAR_52 = VAR_53 ; VAR_54 . VAR_55 = VAR_56 ; VAR_57 . VAR_58 = VAR_59 * VAR_60 * VAR_61 ; VAR_62 . VAR_63 = VAR_64 * VAR_65 ; VAR_66 . VAR_67 = VAR_68 ; if ( VAR_69 > 2 || VAR_70 != 0x5 - VAR_71 ) { VAR_72 = sizeof ( VAR_73 ) ; VAR_74 . VAR_75 = 22 ; VAR_76 . VAR_77 = VAR_78 ; VAR_79 . VAR_80 = VAR_81 ; VAR_82 . VAR_83 = VAR_84 ; VAR_85 . VAR_86 = 0xfffe ; VAR_87 . VAR_88 = VAR_89 * 8 ; VAR_90 . VAR_91 [ 4 ] = 0x10 ; VAR_92 . VAR_93 [ 6 ] = 0x80 ; VAR_94 . VAR_95 [ 9 ] = 0xaa ; VAR_96 . VAR_97 [ 11 ] = 0x38 ; VAR_98 . VAR_99 [ 12 ] = 0x9b ; VAR_100 . VAR_101 [ 13 ] = 0x71 ; } METHOD_12 ( VAR_102 . VAR_103 , VAR_104 ? ""RF64"" : ""RIFF"" , sizeof ( VAR_105 . VAR_106 ) ) ; METHOD_13 ( VAR_107 . VAR_108 , ""WAVE"" , sizeof ( VAR_109 . VAR_110 ) ) ; VAR_111 = sizeof ( VAR_112 ) + VAR_113 + sizeof ( VAR_114 ) + ( ( VAR_115 + 1 ) & ~ ( TYPE_20 ) 1 ) ; if ( VAR_116 ) VAR_117 += sizeof ( VAR_118 ) + sizeof ( VAR_119 ) ; if ( VAR_120 ) VAR_121 += sizeof ( VAR_122 ) ; METHOD_14 ( VAR_123 . VAR_124 , ""fmt"" , sizeof ( VAR_125 . VAR_126 ) ) ; METHOD_15 ( VAR_127 . VAR_128 , ""data"" , sizeof ( VAR_129 . VAR_130 ) ) ; VAR_131 . VAR_132 = VAR_133 ; if ( VAR_134 ) { METHOD_16 ( VAR_135 ) ; METHOD_17 ( VAR_136 . VAR_137 , ""junk"" , sizeof ( VAR_138 . VAR_139 ) ) ; VAR_140 . VAR_141 = sizeof ( VAR_142 ) - 8 ; METHOD_18 ( & VAR_143 , VAR_144 ) ; } if ( VAR_145 ) { METHOD_19 ( VAR_146 . VAR_147 , ""ds64"" , sizeof ( VAR_148 . VAR_149 ) ) ; VAR_150 . VAR_151 = sizeof ( VAR_152 ) ; METHOD_20 ( VAR_153 ) ; VAR_154 . VAR_155 = VAR_156 ; VAR_157 . VAR_158 = VAR_159 ; VAR_160 . VAR_161 = VAR_162 ; VAR_163 . VAR_164 = ( TYPE_21 ) - 1 ; VAR_165 . VAR_166 = ( TYPE_22 ) - 1 ; METHOD_21 ( & VAR_167 , VAR_168 ) ; METHOD_22 ( & VAR_169 , VAR_170 ) ; } else { VAR_171 . VAR_172 = ( TYPE_23 ) VAR_173 ; VAR_174 . VAR_175 = ( TYPE_24 ) VAR_176 ; } METHOD_23 ( & VAR_177 , VAR_178 ) ; METHOD_24 ( & VAR_179 , VAR_180 ) ; METHOD_25 ( & VAR_181 , VAR_182 ) ; METHOD_26 ( & VAR_183 , VAR_184 ) ; if ( ! METHOD_27 ( VAR_185 , & VAR_186 , sizeof ( VAR_187 ) , & VAR_188 ) || VAR_189 != sizeof ( VAR_190 ) || ( VAR_191 && ( ! METHOD_28 ( VAR_192 , & VAR_193 , sizeof ( VAR_194 ) , & VAR_195 ) || VAR_196 != sizeof ( VAR_197 ) ) ) ) { METHOD_34 ( ""can\'twrite.WAVdata,diskprobablyfull!"" ) ; return VAR_230 ; } while ( VAR_232 -- ) if ( ! METHOD_33 ( VAR_224 , & VAR_233 , sizeof ( VAR_233 ) , & VAR_228 ) || VAR_228 != sizeof ( VAR_233 ) ) { METHOD_34 ( ""can\'twrite.WAVdata,diskprobablyfull!"" ) ; return VAR_230 ; } if ( ( VAR_205 && ( ! METHOD_30 ( VAR_206 , & VAR_207 , sizeof ( VAR_208 ) , & VAR_209 ) || VAR_210 != sizeof ( VAR_211 ) ) ) || ! METHOD_31 ( VAR_212 , & VAR_213 , sizeof ( VAR_214 ) , & VAR_215 ) || VAR_216 != sizeof ( VAR_217 ) || ! METHOD_32 ( VAR_218 , & VAR_219 , VAR_220 , & VAR_221 ) || VAR_222 != VAR_223 || ! METHOD_33 ( VAR_224 , & VAR_225 , sizeof ( VAR_226 ) , & VAR_227 ) || VAR_228 != sizeof ( VAR_229 ) ) { METHOD_34 ( ""can\'twrite.WAVdata,diskprobablyfull!"" ) ; return VAR_230 ; } return VAR_231 ; }",593
594,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; if ( VAR_3 < VAR_4 -> VAR_5 ) return - VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , sizeof ( * VAR_9 ) , VAR_10 | VAR_11 ) ; if ( METHOD_2 ( ! VAR_12 ) ) return - VAR_13 ; if ( VAR_14 -> VAR_15 ) { unsigned TYPE_2 VAR_16 ; unsigned TYPE_3 VAR_17 ; VAR_18 = VAR_19 -> VAR_20 + VAR_21 -> VAR_22 ; if ( VAR_23 < VAR_24 -> VAR_25 ) VAR_26 = 0 ; else VAR_27 &= ( VAR_28 -> VAR_29 - 1 ) ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 ; if ( VAR_34 ) METHOD_3 ( VAR_35 , VAR_36 -> VAR_37 + VAR_38 -> VAR_39 , VAR_40 * sizeof ( struct STRUCT_OR_UNION_2 ) ) ; if ( VAR_41 ) METHOD_4 ( VAR_42 + VAR_43 , VAR_44 -> VAR_45 , VAR_46 * sizeof ( struct STRUCT_OR_UNION_3 ) ) ; }  VAR_47 -> VAR_48 = 0 ;  METHOD_5 ( VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; return VAR_57 * VAR_58 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; if ( VAR_3 < VAR_4 -> VAR_5 ) return - VAR_6 ; VAR_7 = METHOD_1 ( VAR_8 , sizeof ( * VAR_9 ) , VAR_10 | VAR_11 ) ; if ( METHOD_2 ( ! VAR_12 ) ) return - VAR_13 ; if ( VAR_14 -> VAR_15 ) { unsigned TYPE_2 VAR_16 ; unsigned TYPE_3 VAR_17 ; VAR_18 = VAR_19 -> VAR_20 + VAR_21 -> VAR_22 ; if ( VAR_23 < VAR_24 -> VAR_25 ) VAR_26 = 0 ; else VAR_27 &= ( VAR_28 -> VAR_29 - 1 ) ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 ; if ( VAR_34 ) METHOD_3 ( VAR_35 , VAR_36 -> VAR_37 + VAR_38 -> VAR_39 , VAR_40 * sizeof ( struct STRUCT_OR_UNION_2 ) ) ; if ( VAR_41 ) METHOD_4 ( VAR_42 + VAR_43 , VAR_44 -> VAR_45 , VAR_46 * sizeof ( struct STRUCT_OR_UNION_3 ) ) ; } METHOD_6 ( VAR_54 , VAR_54 -> VAR_55 , VAR_57 ) ; VAR_47 -> VAR_48 = 0 ; METHOD_5 ( VAR_49 -> VAR_50 ) ; VAR_51 -> VAR_52 = VAR_53 ; VAR_54 -> VAR_55 = VAR_56 ; return VAR_57 * VAR_58 ; }",594
595,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , TYPE_6 VAR_6 ) { TYPE_7 * VAR_7 = VAR_8 + 0x2a1 , * VAR_9 , * VAR_10 , * VAR_11 , * VAR_12 , VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 ; TYPE_9 VAR_19 = 0 , VAR_20 ; METHOD_1 ( ""inwwunpack\\n"" ) ; while ( 1 ) { if ( ! METHOD_2 ( VAR_21 , VAR_22 [ VAR_23 ] . VAR_24 , VAR_25 , 17 ) ) { METHOD_3 ( ""WWPack:Arrayofstructsoutofsection\\n"" ) ; break ; } VAR_26 = VAR_27 [ VAR_28 ] . VAR_29 - METHOD_4 ( VAR_30 ) ; VAR_31 += 8 ; VAR_32 = METHOD_5 ( VAR_33 ) * 4 ; VAR_34 += 4 ; VAR_35 = METHOD_6 ( VAR_36 ) ; VAR_37 += 4 ; VAR_38 = VAR_39 = VAR_40 + VAR_41 + VAR_42 + 4 - VAR_43 ; if ( ! VAR_44 || ! METHOD_7 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ) { METHOD_8 ( ""WWPack:Compresseddataoutoffile\\n"" ) ; break ; } METHOD_9 ( ""WWP:src:%x,szd:%x,srcend:%x-%x\\n"" , VAR_49 , VAR_50 , VAR_51 , VAR_52 + 4 - VAR_53 ) ; if ( ! ( VAR_54 = METHOD_10 ( VAR_55 ) ) ) { METHOD_11 ( ""WWPack:Unabletoallocatememoryforcompd\\n"" ) ; break ; } METHOD_12 ( VAR_56 , VAR_57 , VAR_58 ) ; METHOD_13 ( VAR_59 , - 1 , VAR_60 ) ; VAR_61 = VAR_62 ; VAR_63 ; while ( ! VAR_64 ) { TYPE_10 VAR_65 , VAR_66 ; TYPE_11 VAR_67 ; VAR_68 ; if ( ! VAR_69 ) { if ( VAR_70 - VAR_71 >= VAR_72 || ! METHOD_14 ( VAR_73 , VAR_74 , VAR_75 , 1 ) ) VAR_76 = 1 ; else * VAR_77 ++ = * VAR_78 ++ ; continue ; } METHOD_15 ( 2 ) ; if ( VAR_79 == 3 ) { TYPE_12 VAR_80 , VAR_81 = 31 ; METHOD_16 ( 2 ) ; VAR_82 = VAR_83 + 5 ; if ( VAR_84 >= 2 ) { VAR_85 ++ ; VAR_86 += 0x80 ; } VAR_87 = ( 1 << VAR_88 ) - VAR_89 ; METHOD_17 ( VAR_90 ) ; if ( VAR_91 || VAR_92 == 0x1ff ) break ; VAR_93 += VAR_94 ; if ( ! METHOD_18 ( VAR_95 , VAR_96 , VAR_97 , 2 ) || ! METHOD_19 ( VAR_98 , VAR_99 , VAR_100 - VAR_101 , 2 ) ) { VAR_102 = 1 ; } else { VAR_103 [ 0 ] = * ( VAR_104 - VAR_105 ) ; VAR_106 [ 1 ] = * ( VAR_107 - VAR_108 + 1 ) ; VAR_109 += 2 ; } continue ; } VAR_110 = VAR_111 ; METHOD_20 ( 3 ) ; if ( VAR_112 < 6 ) { VAR_113 = VAR_114 ; switch ( VAR_115 ) { case 4 : VAR_116 ++ ; case 3 : VAR_117 ; VAR_118 += VAR_119 ; case 0 : case 1 : case 2 : VAR_120 += 5 ; break ; case 5 : VAR_121 = 12 ; break ; } METHOD_21 ( VAR_122 ) ; VAR_123 += ( 1 << VAR_124 ) - 31 ; } else if ( VAR_125 == 6 ) { METHOD_22 ( 0x0e ) ; VAR_126 += 0x1fe1 ; } else { METHOD_23 ( 0x0f ) ; VAR_127 += 0x5fe1 ; } VAR_128 = VAR_129 ; if ( ! VAR_130 ) { VAR_131 ; if ( ! VAR_132 ) { VAR_133 ; VAR_134 += 5 ; } else { METHOD_24 ( 3 ) ; if ( VAR_135 ) { VAR_136 += 6 ; } else { METHOD_25 ( 4 ) ; if ( VAR_137 ) { VAR_138 += 13 ; } else { TYPE_13 VAR_139 = 4 ; TYPE_14 VAR_140 = 0x0d ; do { if ( VAR_141 == 7 ) { VAR_142 = 0x0e ; VAR_143 = 0 ; break ; } VAR_144 = ( ( VAR_145 + 2 ) << 1 ) - 1 ; VAR_146 ; VAR_147 ++ ; } while ( ! VAR_148 ) ; METHOD_26 ( VAR_149 ) ; VAR_150 += VAR_151 ; } } } VAR_152 = VAR_153 ; } else { VAR_154 = VAR_155 + 2 ; } if ( ! METHOD_27 ( VAR_156 , VAR_157 , VAR_158 , VAR_159 ) || ! METHOD_28 ( VAR_160 , VAR_161 , VAR_162 - VAR_163 , VAR_164 ) ) VAR_165 = 1 ; else while ( VAR_166 -- ) { * VAR_167 = * ( VAR_168 - VAR_169 ) ; VAR_170 ++ ; } } METHOD_29 ( VAR_171 ) ; if ( VAR_172 ) { METHOD_30 ( ""WWPack:decompressionerror\\n"" ) ; break ; } if ( VAR_173 || ! * VAR_174 ++ ) break ; } if ( ! VAR_175 ) { if ( VAR_176 + 6 > VAR_177 || VAR_178 + 7 > VAR_179 || VAR_180 + 0x28 > VAR_181 || VAR_182 + 0x50 > VAR_183 || VAR_184 + 0x14 > VAR_185 ) return VAR_186 ; VAR_187 [ VAR_188 + 6 ] = ( TYPE_15 ) VAR_189 ; VAR_190 [ VAR_191 + 7 ] = ( TYPE_16 ) ( VAR_192 >> 8 ) ;  METHOD_31 ( & VAR_193 [ VAR_194 + 0x28 ] , METHOD_32 ( VAR_195 + 0x295 ) + VAR_196 [ VAR_197 ] . VAR_198 + 0x299 ) ;  METHOD_33 ( & VAR_199 [ VAR_200 + 0x50 ] , METHOD_34 ( & VAR_201 [ VAR_202 + 0x50 ] ) - VAR_203 [ VAR_204 ] . VAR_205 ) ; VAR_206 = & VAR_207 [ ( 0xffff & METHOD_35 ( & VAR_208 [ VAR_209 + 0x14 ] ) ) + VAR_210 + 0x18 ] ; for ( VAR_211 = 0 ; VAR_212 < VAR_213 ; VAR_214 ++ ) { if ( ! METHOD_36 ( VAR_215 , VAR_216 , VAR_217 , 0x28 ) ) { METHOD_37 ( ""WWPack:structspointeroutofbounds\\n"" ) ; return VAR_218 ; } METHOD_38 ( VAR_219 + 8 , VAR_220 [ VAR_221 ] . VAR_222 ) ; METHOD_39 ( VAR_223 + 12 , VAR_224 [ VAR_225 ] . VAR_226 ) ; METHOD_40 ( VAR_227 + 16 , VAR_228 [ VAR_229 ] . VAR_230 ) ; METHOD_41 ( VAR_231 + 20 , VAR_232 [ VAR_233 ] . VAR_234 ) ; VAR_235 += 0x28 ; } if ( ! METHOD_42 ( VAR_236 , VAR_237 , VAR_238 , 0x28 ) ) { METHOD_43 ( ""WWPack:structspointeroutofbounds\\n"" ) ; return VAR_239 ; } METHOD_44 ( VAR_240 , 0 , 0x28 ) ; VAR_241 = ( TYPE_17 ) METHOD_45 ( VAR_242 , VAR_243 , VAR_244 ) != VAR_245 ; } return VAR_246 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 , struct STRUCT_OR_UNION_0 * VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , TYPE_6 VAR_6 ) { TYPE_7 * VAR_7 = VAR_8 + 0x2a1 , * VAR_9 , * VAR_10 , * VAR_11 , * VAR_12 , VAR_13 ; TYPE_8 VAR_14 , VAR_15 , VAR_16 , VAR_17 , VAR_18 ; TYPE_9 VAR_19 = 0 , VAR_20 ; METHOD_1 ( ""inwwunpack\\n"" ) ; while ( 1 ) { if ( ! METHOD_2 ( VAR_21 , VAR_22 [ VAR_23 ] . VAR_24 , VAR_25 , 17 ) ) { METHOD_3 ( ""WWPack:Arrayofstructsoutofsection\\n"" ) ; break ; } VAR_26 = VAR_27 [ VAR_28 ] . VAR_29 - METHOD_4 ( VAR_30 ) ; VAR_31 += 8 ; VAR_32 = METHOD_5 ( VAR_33 ) * 4 ; VAR_34 += 4 ; VAR_35 = METHOD_6 ( VAR_36 ) ; VAR_37 += 4 ; VAR_38 = VAR_39 = VAR_40 + VAR_41 + VAR_42 + 4 - VAR_43 ; if ( ! VAR_44 || ! METHOD_7 ( VAR_45 , VAR_46 , VAR_47 , VAR_48 ) ) { METHOD_8 ( ""WWPack:Compresseddataoutoffile\\n"" ) ; break ; } METHOD_9 ( ""WWP:src:%x,szd:%x,srcend:%x-%x\\n"" , VAR_49 , VAR_50 , VAR_51 , VAR_52 + 4 - VAR_53 ) ; if ( ! ( VAR_54 = METHOD_10 ( VAR_55 ) ) ) { METHOD_11 ( ""WWPack:Unabletoallocatememoryforcompd\\n"" ) ; break ; } METHOD_12 ( VAR_56 , VAR_57 , VAR_58 ) ; METHOD_13 ( VAR_59 , - 1 , VAR_60 ) ; VAR_61 = VAR_62 ; VAR_63 ; while ( ! VAR_64 ) { TYPE_10 VAR_65 , VAR_66 ; TYPE_11 VAR_67 ; VAR_68 ; if ( ! VAR_69 ) { if ( VAR_70 - VAR_71 >= VAR_72 || ! METHOD_14 ( VAR_73 , VAR_74 , VAR_75 , 1 ) ) VAR_76 = 1 ; else * VAR_77 ++ = * VAR_78 ++ ; continue ; } METHOD_15 ( 2 ) ; if ( VAR_79 == 3 ) { TYPE_12 VAR_80 , VAR_81 = 31 ; METHOD_16 ( 2 ) ; VAR_82 = VAR_83 + 5 ; if ( VAR_84 >= 2 ) { VAR_85 ++ ; VAR_86 += 0x80 ; } VAR_87 = ( 1 << VAR_88 ) - VAR_89 ; METHOD_17 ( VAR_90 ) ; if ( VAR_91 || VAR_92 == 0x1ff ) break ; VAR_93 += VAR_94 ; if ( ! METHOD_18 ( VAR_95 , VAR_96 , VAR_97 , 2 ) || ! METHOD_19 ( VAR_98 , VAR_99 , VAR_100 - VAR_101 , 2 ) ) { VAR_102 = 1 ; } else { VAR_103 [ 0 ] = * ( VAR_104 - VAR_105 ) ; VAR_106 [ 1 ] = * ( VAR_107 - VAR_108 + 1 ) ; VAR_109 += 2 ; } continue ; } VAR_110 = VAR_111 ; METHOD_20 ( 3 ) ; if ( VAR_112 < 6 ) { VAR_113 = VAR_114 ; switch ( VAR_115 ) { case 4 : VAR_116 ++ ; case 3 : VAR_117 ; VAR_118 += VAR_119 ; case 0 : case 1 : case 2 : VAR_120 += 5 ; break ; case 5 : VAR_121 = 12 ; break ; } METHOD_21 ( VAR_122 ) ; VAR_123 += ( 1 << VAR_124 ) - 31 ; } else if ( VAR_125 == 6 ) { METHOD_22 ( 0x0e ) ; VAR_126 += 0x1fe1 ; } else { METHOD_23 ( 0x0f ) ; VAR_127 += 0x5fe1 ; } VAR_128 = VAR_129 ; if ( ! VAR_130 ) { VAR_131 ; if ( ! VAR_132 ) { VAR_133 ; VAR_134 += 5 ; } else { METHOD_24 ( 3 ) ; if ( VAR_135 ) { VAR_136 += 6 ; } else { METHOD_25 ( 4 ) ; if ( VAR_137 ) { VAR_138 += 13 ; } else { TYPE_13 VAR_139 = 4 ; TYPE_14 VAR_140 = 0x0d ; do { if ( VAR_141 == 7 ) { VAR_142 = 0x0e ; VAR_143 = 0 ; break ; } VAR_144 = ( ( VAR_145 + 2 ) << 1 ) - 1 ; VAR_146 ; VAR_147 ++ ; } while ( ! VAR_148 ) ; METHOD_26 ( VAR_149 ) ; VAR_150 += VAR_151 ; } } } VAR_152 = VAR_153 ; } else { VAR_154 = VAR_155 + 2 ; } if ( ! METHOD_27 ( VAR_156 , VAR_157 , VAR_158 , VAR_159 ) || ! METHOD_28 ( VAR_160 , VAR_161 , VAR_162 - VAR_163 , VAR_164 ) ) VAR_165 = 1 ; else while ( VAR_166 -- ) { * VAR_167 = * ( VAR_168 - VAR_169 ) ; VAR_170 ++ ; } } METHOD_29 ( VAR_171 ) ; if ( VAR_172 ) { METHOD_30 ( ""WWPack:decompressionerror\\n"" ) ; break ; } if ( VAR_173 || ! * VAR_174 ++ ) break ; } if ( ! VAR_175 ) { if ( VAR_176 + 6 > VAR_177 || VAR_178 + 7 > VAR_179 || VAR_180 + 0x28 > VAR_181 || VAR_182 + 0x50 > VAR_183 || VAR_184 + 0x14 > VAR_185 ) return VAR_186 ; VAR_187 [ VAR_188 + 6 ] = ( TYPE_15 ) VAR_189 ; VAR_190 [ VAR_191 + 7 ] = ( TYPE_16 ) ( VAR_192 >> 8 ) ; if ( ! METHOD_42 ( VAR_195 , VAR_232 [ VAR_213 ] . VAR_24 , VAR_195 + 0x295 , 4 ) || ! METHOD_42 ( VAR_195 , VAR_232 [ VAR_213 ] . VAR_24 , VAR_195 + 0x295 + VAR_232 [ VAR_213 ] . VAR_234 , 4 ) || ! METHOD_42 ( VAR_195 , VAR_232 [ VAR_213 ] . VAR_24 , VAR_195 + 0x295 + VAR_232 [ VAR_213 ] . VAR_234 + 0x299 , 4 ) ) { METHOD_43 ( ""WWPack:unpackmemoryaddressoutofbounds.\\n"" ) ; return VAR_239 ; } METHOD_31 ( & VAR_193 [ VAR_194 + 0x28 ] , METHOD_32 ( VAR_195 + 0x295 ) + VAR_196 [ VAR_197 ] . VAR_198 + 0x299 ) ; METHOD_33 ( & VAR_199 [ VAR_200 + 0x50 ] , METHOD_34 ( & VAR_201 [ VAR_202 + 0x50 ] ) - VAR_203 [ VAR_204 ] . VAR_205 ) ; VAR_206 = & VAR_207 [ ( 0xffff & METHOD_35 ( & VAR_208 [ VAR_209 + 0x14 ] ) ) + VAR_210 + 0x18 ] ; for ( VAR_211 = 0 ; VAR_212 < VAR_213 ; VAR_214 ++ ) { if ( ! METHOD_36 ( VAR_215 , VAR_216 , VAR_217 , 0x28 ) ) { METHOD_37 ( ""WWPack:structspointeroutofbounds\\n"" ) ; return VAR_218 ; } METHOD_38 ( VAR_219 + 8 , VAR_220 [ VAR_221 ] . VAR_222 ) ; METHOD_39 ( VAR_223 + 12 , VAR_224 [ VAR_225 ] . VAR_226 ) ; METHOD_40 ( VAR_227 + 16 , VAR_228 [ VAR_229 ] . VAR_230 ) ; METHOD_41 ( VAR_231 + 20 , VAR_232 [ VAR_233 ] . VAR_234 ) ; VAR_235 += 0x28 ; } if ( ! METHOD_42 ( VAR_236 , VAR_237 , VAR_238 , 0x28 ) ) { METHOD_43 ( ""WWPack:structspointeroutofbounds\\n"" ) ; return VAR_239 ; } METHOD_44 ( VAR_240 , 0 , 0x28 ) ; VAR_241 = ( TYPE_17 ) METHOD_45 ( VAR_242 , VAR_243 , VAR_244 ) != VAR_245 ; } return VAR_246 ; }",595
596,"static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * VAR_4 = """" ; const TYPE_5 * VAR_5 = """" ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 ( VAR_8 ) * VAR_9 = VAR_10 ; TYPE_8 VAR_11 [ sizeof ( TYPE_9 ( VAR_12 ) ) ] = { 0 } ; TYPE_10 * VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; if ( VAR_16 -> VAR_17 > VAR_18 -> VAR_19 . VAR_20 ) { return VAR_21 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ;  if ( VAR_27 -> VAR_28 < 1 ) {  return VAR_29 ; } TYPE_12 ( VAR_30 ) * VAR_31 = METHOD_1 ( VAR_32 -> VAR_33 , sizeof ( TYPE_13 ) ) ; if ( ! VAR_34 ) { return VAR_35 ; } if ( VAR_36 -> VAR_37 && VAR_38 -> VAR_39 < VAR_40 -> VAR_41 ) { VAR_42 = & VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 ] ; } if ( VAR_47 && VAR_48 -> VAR_49 && VAR_50 -> VAR_51 < VAR_52 -> VAR_53 ) { VAR_54 = & VAR_55 -> VAR_56 [ VAR_57 -> VAR_58 ] ; } if ( ! VAR_59 ) { METHOD_2 ( ""Warning:Cannotallocatememory(CheckElf_(Verdef))\\n"" ) ; return VAR_60 ; } VAR_61 = METHOD_3 ( ) ; VAR_62 = ( TYPE_14 * ) VAR_63 + VAR_64 -> VAR_65 ; METHOD_4 ( VAR_66 , ""section_name"" , VAR_67 , 0 ) ; METHOD_5 ( VAR_68 , ""entries"" , VAR_69 -> VAR_70 , 0 ) ; METHOD_6 ( VAR_71 , ""addr"" , VAR_72 -> VAR_73 , 0 ) ; METHOD_7 ( VAR_74 , ""offset"" , VAR_75 -> VAR_76 , 0 ) ; METHOD_8 ( VAR_77 , ""link"" , VAR_78 -> VAR_79 , 0 ) ; METHOD_9 ( VAR_80 , ""link_section_name"" , VAR_81 , 0 ) ; for ( VAR_82 = 0 , VAR_83 = 0 ; VAR_84 >= 0 && VAR_85 < VAR_86 -> VAR_87 && ( ( TYPE_15 * ) VAR_88 + VAR_89 < VAR_90 ) ; ++ VAR_91 ) { TYPE_16 * VAR_92 = METHOD_10 ( ) ; TYPE_17 * VAR_93 = ( ( TYPE_18 * ) VAR_94 ) + VAR_95 ; TYPE_19 VAR_96 [ 32 ] = { 0 } ; TYPE_20 ( VAR_97 ) * VAR_98 = ( TYPE_21 ( VAR_99 ) * ) VAR_100 ; TYPE_22 ( TYPE_23 ) VAR_101 = { 0 } ; TYPE_24 VAR_102 = 0 ; TYPE_25 VAR_103 = 0 ; METHOD_11 ( VAR_104 -> VAR_105 , VAR_106 -> VAR_107 + VAR_108 , VAR_109 , sizeof ( TYPE_26 ( VAR_110 ) ) ) ; VAR_111 -> VAR_112 = METHOD_12 ( VAR_113 , VAR_114 ) VAR_115 -> VAR_116 = METHOD_13 ( VAR_117 , VAR_118 ) VAR_119 -> VAR_120 = METHOD_14 ( VAR_121 , VAR_122 ) VAR_123 -> VAR_124 = METHOD_15 ( VAR_125 , VAR_126 ) VAR_127 -> VAR_128 = METHOD_16 ( VAR_129 , VAR_130 ) VAR_131 -> VAR_132 = METHOD_17 ( VAR_133 , VAR_134 ) VAR_135 -> VAR_136 = METHOD_18 ( VAR_137 , VAR_138 ) TYPE_27 VAR_139 = VAR_140 -> VAR_141 ; if ( VAR_142 < 1 ) { METHOD_19 ( VAR_143 ) ; goto VAR_144 ; } VAR_145 += VAR_146 ; if ( VAR_147 > VAR_148 || VAR_149 + sizeof ( TYPE_28 ( TYPE_29 ) ) > VAR_150 ) { METHOD_20 ( VAR_151 ) ; goto VAR_152 ; } VAR_153 = 0 ; VAR_154 . VAR_155 = METHOD_21 ( VAR_156 , VAR_157 ) VAR_158 . VAR_159 = METHOD_22 ( VAR_160 , VAR_161 ) VAR_162 = VAR_163 + VAR_164 -> VAR_165 ; if ( VAR_166 . VAR_167 > VAR_168 -> VAR_169 ) { METHOD_23 ( VAR_170 ) ; goto VAR_171 ; } METHOD_24 ( VAR_172 , ""idx"" , VAR_173 , 0 ) ; METHOD_25 ( VAR_174 , ""vd_version"" , VAR_175 -> VAR_176 , 0 ) ; METHOD_26 ( VAR_177 , ""vd_ndx"" , VAR_178 -> VAR_179 , 0 ) ; METHOD_27 ( VAR_180 , ""vd_cnt"" , VAR_181 -> VAR_182 , 0 ) ; METHOD_28 ( VAR_183 , ""vda_name"" , & VAR_184 -> VAR_185 [ VAR_186 . VAR_187 ] , 0 ) ; METHOD_29 ( VAR_188 , ""flags"" , METHOD_30 ( VAR_189 -> VAR_190 ) , 0 ) ; for ( VAR_191 = 1 ; VAR_192 < VAR_193 -> VAR_194 ; ++ VAR_195 ) { TYPE_30 VAR_196 ; TYPE_31 * VAR_197 = METHOD_31 ( ) ; VAR_198 += VAR_199 . VAR_200 ; VAR_201 += VAR_202 . VAR_203 ; if ( VAR_204 > VAR_205 || VAR_206 + sizeof ( TYPE_32 ( TYPE_33 ) ) > VAR_207 ) { METHOD_32 ( VAR_208 ) ; METHOD_33 ( VAR_209 ) ; goto VAR_210 ; } VAR_211 = 0 ; VAR_212 . VAR_213 = METHOD_34 ( VAR_214 , VAR_215 ) VAR_216 . VAR_217 = METHOD_35 ( VAR_218 , VAR_219 ) if ( VAR_220 . VAR_221 > VAR_222 -> VAR_223 ) { METHOD_36 ( VAR_224 ) ; METHOD_37 ( VAR_225 ) ; goto VAR_226 ; } METHOD_38 ( VAR_227 , ""idx"" , VAR_228 , 0 ) ; METHOD_39 ( VAR_229 , ""parent"" , VAR_230 , 0 ) ; METHOD_40 ( VAR_231 , ""vda_name"" , & VAR_232 -> VAR_233 [ VAR_234 . VAR_235 ] , 0 ) ; METHOD_41 ( VAR_236 , sizeof ( VAR_237 ) , ""parent%d"" , VAR_238 - 1 ) ; METHOD_42 ( VAR_239 , VAR_240 , VAR_241 ) ; } METHOD_43 ( VAR_242 , sizeof ( VAR_243 ) , ""verdef%d"" , VAR_244 ) ; METHOD_44 ( VAR_245 , VAR_246 , VAR_247 ) ; if ( ! VAR_248 -> VAR_249 ) { METHOD_45 ( VAR_250 ) ; goto VAR_251 ; } if ( ( TYPE_34 ) VAR_252 -> VAR_253 < 1 ) { METHOD_46 ( ""Warning:Invalidvd_nextintheELFversion\\n"" ) ; break ; } VAR_254 += VAR_255 -> VAR_256 ; } METHOD_47 ( VAR_257 ) ; return VAR_258 ; VAR_259 : METHOD_48 ( VAR_260 ) ; METHOD_49 ( VAR_261 ) ; return VAR_262 ; }","static TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( VAR_1 ) * VAR_2 , TYPE_3 VAR_3 ) { const TYPE_4 * VAR_4 = """" ; const TYPE_5 * VAR_5 = """" ; TYPE_6 * VAR_6 = VAR_7 ; TYPE_7 ( VAR_8 ) * VAR_9 = VAR_10 ; TYPE_8 VAR_11 [ sizeof ( TYPE_9 ( VAR_12 ) ) ] = { 0 } ; TYPE_10 * VAR_13 ; TYPE_11 VAR_14 , VAR_15 ; if ( VAR_16 -> VAR_17 > VAR_18 -> VAR_19 . VAR_20 ) { return VAR_21 ; } VAR_22 = & VAR_23 -> VAR_24 [ VAR_25 -> VAR_26 ] ; if ( VAR_27 -> VAR_28 < 1 ) { return VAR_29 ; } TYPE_12 ( VAR_30 ) * VAR_31 = METHOD_1 ( VAR_32 -> VAR_33 , sizeof ( TYPE_13 ) ) ; if ( ! VAR_34 ) { return VAR_35 ; } if ( VAR_36 -> VAR_37 && VAR_38 -> VAR_39 < VAR_40 -> VAR_41 ) { VAR_42 = & VAR_43 -> VAR_44 [ VAR_45 -> VAR_46 ] ; } if ( VAR_47 && VAR_48 -> VAR_49 && VAR_50 -> VAR_51 < VAR_52 -> VAR_53 ) { VAR_54 = & VAR_55 -> VAR_56 [ VAR_57 -> VAR_58 ] ; } if ( ! VAR_59 ) { METHOD_2 ( ""Warning:Cannotallocatememory(CheckElf_(Verdef))\\n"" ) ; return VAR_60 ; } VAR_61 = METHOD_3 ( ) ; VAR_62 = ( TYPE_14 * ) VAR_63 + VAR_64 -> VAR_65 ; METHOD_4 ( VAR_66 , ""section_name"" , VAR_67 , 0 ) ; METHOD_5 ( VAR_68 , ""entries"" , VAR_69 -> VAR_70 , 0 ) ; METHOD_6 ( VAR_71 , ""addr"" , VAR_72 -> VAR_73 , 0 ) ; METHOD_7 ( VAR_74 , ""offset"" , VAR_75 -> VAR_76 , 0 ) ; METHOD_8 ( VAR_77 , ""link"" , VAR_78 -> VAR_79 , 0 ) ; METHOD_9 ( VAR_80 , ""link_section_name"" , VAR_81 , 0 ) ; for ( VAR_82 = 0 , VAR_83 = 0 ; VAR_84 >= 0 && VAR_85 < VAR_86 -> VAR_87 && ( ( TYPE_15 * ) VAR_88 + VAR_89 < VAR_90 ) ; ++ VAR_91 ) { TYPE_16 * VAR_92 = METHOD_10 ( ) ; TYPE_17 * VAR_93 = ( ( TYPE_18 * ) VAR_94 ) + VAR_95 ; TYPE_19 VAR_96 [ 32 ] = { 0 } ; TYPE_20 ( VAR_97 ) * VAR_98 = ( TYPE_21 ( VAR_99 ) * ) VAR_100 ; TYPE_22 ( TYPE_23 ) VAR_101 = { 0 } ; TYPE_24 VAR_102 = 0 ; TYPE_25 VAR_103 = 0 ; METHOD_11 ( VAR_104 -> VAR_105 , VAR_106 -> VAR_107 + VAR_108 , VAR_109 , sizeof ( TYPE_26 ( VAR_110 ) ) ) ; VAR_111 -> VAR_112 = METHOD_12 ( VAR_113 , VAR_114 ) VAR_115 -> VAR_116 = METHOD_13 ( VAR_117 , VAR_118 ) VAR_119 -> VAR_120 = METHOD_14 ( VAR_121 , VAR_122 ) VAR_123 -> VAR_124 = METHOD_15 ( VAR_125 , VAR_126 ) VAR_127 -> VAR_128 = METHOD_16 ( VAR_129 , VAR_130 ) VAR_131 -> VAR_132 = METHOD_17 ( VAR_133 , VAR_134 ) VAR_135 -> VAR_136 = METHOD_18 ( VAR_137 , VAR_138 ) TYPE_27 VAR_139 = VAR_140 -> VAR_141 ; if ( VAR_142 < 1 ) { METHOD_19 ( VAR_143 ) ; goto VAR_144 ; } VAR_145 += VAR_146 ; if ( VAR_147 > VAR_148 || VAR_149 + sizeof ( TYPE_28 ( TYPE_29 ) ) > VAR_150 ) { METHOD_20 ( VAR_151 ) ; goto VAR_152 ; } VAR_153 = 0 ; VAR_154 . VAR_155 = METHOD_21 ( VAR_156 , VAR_157 ) VAR_158 . VAR_159 = METHOD_22 ( VAR_160 , VAR_161 ) VAR_162 = VAR_163 + VAR_164 -> VAR_165 ; if ( VAR_166 . VAR_167 > VAR_168 -> VAR_169 ) { METHOD_23 ( VAR_170 ) ; goto VAR_171 ; } METHOD_24 ( VAR_172 , ""idx"" , VAR_173 , 0 ) ; METHOD_25 ( VAR_174 , ""vd_version"" , VAR_175 -> VAR_176 , 0 ) ; METHOD_26 ( VAR_177 , ""vd_ndx"" , VAR_178 -> VAR_179 , 0 ) ; METHOD_27 ( VAR_180 , ""vd_cnt"" , VAR_181 -> VAR_182 , 0 ) ; METHOD_28 ( VAR_183 , ""vda_name"" , & VAR_184 -> VAR_185 [ VAR_186 . VAR_187 ] , 0 ) ; METHOD_29 ( VAR_188 , ""flags"" , METHOD_30 ( VAR_189 -> VAR_190 ) , 0 ) ; for ( VAR_191 = 1 ; VAR_192 < VAR_193 -> VAR_194 ; ++ VAR_195 ) { TYPE_30 VAR_196 ; TYPE_31 * VAR_197 = METHOD_31 ( ) ; VAR_198 += VAR_199 . VAR_200 ; VAR_201 += VAR_202 . VAR_203 ; if ( VAR_204 > VAR_205 || VAR_206 + sizeof ( TYPE_32 ( TYPE_33 ) ) > VAR_207 ) { METHOD_32 ( VAR_208 ) ; METHOD_33 ( VAR_209 ) ; goto VAR_210 ; } VAR_211 = 0 ; VAR_212 . VAR_213 = METHOD_34 ( VAR_214 , VAR_215 ) VAR_216 . VAR_217 = METHOD_35 ( VAR_218 , VAR_219 ) if ( VAR_220 . VAR_221 > VAR_222 -> VAR_223 ) { METHOD_36 ( VAR_224 ) ; METHOD_37 ( VAR_225 ) ; goto VAR_226 ; } METHOD_38 ( VAR_227 , ""idx"" , VAR_228 , 0 ) ; METHOD_39 ( VAR_229 , ""parent"" , VAR_230 , 0 ) ; METHOD_40 ( VAR_231 , ""vda_name"" , & VAR_232 -> VAR_233 [ VAR_234 . VAR_235 ] , 0 ) ; METHOD_41 ( VAR_236 , sizeof ( VAR_237 ) , ""parent%d"" , VAR_238 - 1 ) ; METHOD_42 ( VAR_239 , VAR_240 , VAR_241 ) ; } METHOD_43 ( VAR_242 , sizeof ( VAR_243 ) , ""verdef%d"" , VAR_244 ) ; METHOD_44 ( VAR_245 , VAR_246 , VAR_247 ) ; if ( ! VAR_248 -> VAR_249 ) { METHOD_45 ( VAR_250 ) ; goto VAR_251 ; } if ( ( TYPE_34 ) VAR_252 -> VAR_253 < 1 ) { METHOD_46 ( ""Warning:Invalidvd_nextintheELFversion\\n"" ) ; break ; } VAR_254 += VAR_255 -> VAR_256 ; } METHOD_47 ( VAR_257 ) ; return VAR_258 ; VAR_259 : METHOD_48 ( VAR_260 ) ; METHOD_49 ( VAR_261 ) ; return VAR_262 ; }",596
597,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const unsigned TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const unsigned TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ;  TYPE_7 VAR_8 = - 1 ;  VAR_9 = METHOD_1 ( ) ; if ( VAR_10 == VAR_11 ) return ( VAR_12 ) ;  if ( METHOD_2 ( & VAR_13 , & VAR_14 , VAR_15 ) == VAR_16 ) goto VAR_17 ;  VAR_18 = METHOD_3 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ; VAR_23 :  METHOD_4 ( VAR_24 ) ;  return ( VAR_25 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , const unsigned TYPE_2 * VAR_1 , TYPE_3 VAR_2 , const unsigned TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * VAR_5 ) { VAR_6 * VAR_7 ; TYPE_7 VAR_8 = - 1 ; VAR_9 = METHOD_1 ( ) ; if ( VAR_10 == VAR_11 ) return ( VAR_12 ) ; if ( METHOD_2 ( & VAR_13 , & VAR_14 , VAR_15 ) == VAR_16 ) goto VAR_23 ; VAR_28 = METHOD_5 ( VAR_24 , & VAR_27 ) ; if ( VAR_28 != VAR_15 || METHOD_6 ( VAR_14 , VAR_27 , VAR_28 ) ) goto VAR_17 ; VAR_18 = METHOD_3 ( VAR_19 , VAR_20 , VAR_21 , VAR_22 ) ; VAR_23 : if ( VAR_28 > 0 ) { METHOD_7 ( VAR_27 , VAR_28 ) ; METHOD_8 ( VAR_27 ) ; } METHOD_4 ( VAR_24 ) ; return ( VAR_25 ) ; }",597
598,"static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; TYPE_0 VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 = & VAR_10 ; TYPE_1 VAR_11 ; enum VAR_12 VAR_13 ; TYPE_2 VAR_14 ; if ( ! ( VAR_15 -> VAR_16 -> VAR_17 & VAR_18 ) ) goto VAR_19 ; if ( METHOD_1 ( VAR_20 ) || METHOD_2 ( VAR_21 ) || VAR_22 -> VAR_23 ) goto VAR_24 ; METHOD_3 ( VAR_25 , VAR_26 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_27 , VAR_28 , VAR_29 ) { if ( VAR_30 -> VAR_31 != VAR_32 || ! VAR_33 -> VAR_34 . METHOD_6 ) continue ; METHOD_7 ( VAR_35 , METHOD_8 ( VAR_36 ) ) ; METHOD_9 ( VAR_37 ) ; METHOD_10 ( VAR_38 ) -> VAR_39 = 0 ; METHOD_11 ( VAR_40 ) -> VAR_41 = 0 ; METHOD_12 ( VAR_42 ) -> VAR_43 = 0 ;  METHOD_13 ( VAR_44 ) -> VAR_45 = 0 ;  METHOD_14 ( VAR_46 ) -> VAR_47 = 0 ; switch ( VAR_48 -> VAR_49 ) { case VAR_50 : METHOD_15 ( VAR_51 ) -> VAR_52 = VAR_53 -> VAR_54 ; METHOD_16 ( VAR_55 ) -> VAR_56 = 1 ; METHOD_17 ( VAR_57 ) -> VAR_58 = 0 ; break ; case VAR_59 : METHOD_18 ( VAR_60 ) -> VAR_61 = VAR_62 -> VAR_63 + 1 ; METHOD_19 ( VAR_64 ) -> VAR_65 = 0 ; break ; default : METHOD_20 ( VAR_66 ) -> VAR_67 = 0 ; METHOD_21 ( VAR_68 ) -> VAR_69 = 0 ; } VAR_70 = VAR_71 -> VAR_72 . METHOD_22 ( & VAR_73 -> VAR_74 , VAR_75 ) ; break ; } METHOD_23 ( ) ; if ( & VAR_76 -> VAR_77 == VAR_78 ) goto VAR_79 ; VAR_80 = METHOD_24 ( VAR_81 ) -> VAR_82 ; VAR_83 = METHOD_25 ( VAR_84 ) -> VAR_85 ? VAR_86 : VAR_87 ; if ( VAR_88 ) { struct STRUCT_OR_UNION_5 * VAR_89 = * VAR_90 ; * VAR_91 = VAR_92 -> VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_26 ( VAR_97 ) ; VAR_98 -> VAR_99 -- ; } if ( VAR_100 ) goto VAR_101 ; if ( METHOD_27 ( VAR_102 ) -> VAR_103 ) goto VAR_104 ; if ( METHOD_28 ( VAR_105 -> VAR_106 >= VAR_107 ) ) { struct STRUCT_OR_UNION_6 * VAR_108 = VAR_109 -> VAR_110 ; while ( VAR_111 -> VAR_112 ) { VAR_113 = & VAR_114 -> VAR_115 ; VAR_116 = * VAR_117 ; } * VAR_118 = VAR_119 ; VAR_120 -> VAR_121 = VAR_122 ; METHOD_29 ( VAR_123 ) ; } else { VAR_124 -> VAR_125 ++ ; } METHOD_30 ( VAR_126 ) -> VAR_127 = 1 ; METHOD_31 ( VAR_128 ) -> VAR_129 = VAR_130 ; METHOD_32 ( VAR_131 ) -> VAR_132 = VAR_133 ; METHOD_33 ( VAR_134 ) -> VAR_135 = METHOD_34 ( VAR_136 ) ; VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; VAR_141 -> VAR_142 = VAR_143 ; VAR_144 = VAR_145 ; VAR_146 : VAR_147 = METHOD_35 ( VAR_148 ) - METHOD_36 ( VAR_149 ) ; if ( VAR_150 > 0 ) METHOD_37 ( VAR_151 , VAR_152 ) ; VAR_153 : return VAR_154 ; VAR_155 : VAR_156 = VAR_157 ; goto VAR_158 ; }","static enum VAR_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * * VAR_3 = VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; TYPE_0 VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_4 * VAR_9 = & VAR_10 ; TYPE_1 VAR_11 ; enum VAR_12 VAR_13 ; TYPE_2 VAR_14 ; if ( ! ( VAR_15 -> VAR_16 -> VAR_17 & VAR_18 ) ) goto VAR_19 ; if ( METHOD_1 ( VAR_20 ) || METHOD_2 ( VAR_21 ) || VAR_22 -> VAR_23 ) goto VAR_24 ; METHOD_3 ( VAR_25 , VAR_26 ) ; METHOD_4 ( ) ; METHOD_5 ( VAR_27 , VAR_28 , VAR_29 ) { if ( VAR_30 -> VAR_31 != VAR_32 || ! VAR_33 -> VAR_34 . METHOD_6 ) continue ; METHOD_7 ( VAR_35 , METHOD_8 ( VAR_36 ) ) ; METHOD_9 ( VAR_37 ) ; METHOD_10 ( VAR_38 ) -> VAR_39 = 0 ; METHOD_11 ( VAR_40 ) -> VAR_41 = 0 ; METHOD_12 ( VAR_42 ) -> VAR_43 = 0 ; METHOD_13 ( VAR_44 ) -> VAR_45 = 0 ; METHOD_14 ( VAR_46 ) -> VAR_47 = 0 ; switch ( VAR_48 -> VAR_49 ) { case VAR_50 : METHOD_15 ( VAR_51 ) -> VAR_52 = VAR_53 -> VAR_54 ; METHOD_16 ( VAR_55 ) -> VAR_56 = 1 ; METHOD_17 ( VAR_57 ) -> VAR_58 = 0 ; break ; case VAR_59 : METHOD_18 ( VAR_60 ) -> VAR_61 = VAR_62 -> VAR_63 + 1 ; METHOD_19 ( VAR_64 ) -> VAR_65 = 0 ; break ; default : METHOD_20 ( VAR_66 ) -> VAR_67 = 0 ; METHOD_21 ( VAR_68 ) -> VAR_69 = 0 ; } VAR_70 = VAR_71 -> VAR_72 . METHOD_22 ( & VAR_73 -> VAR_74 , VAR_75 ) ; break ; } METHOD_23 ( ) ; if ( & VAR_76 -> VAR_77 == VAR_78 ) goto VAR_79 ; VAR_80 = METHOD_24 ( VAR_81 ) -> VAR_82 ; VAR_83 = METHOD_25 ( VAR_84 ) -> VAR_85 ? VAR_86 : VAR_87 ; if ( VAR_88 ) { struct STRUCT_OR_UNION_5 * VAR_89 = * VAR_90 ; * VAR_91 = VAR_92 -> VAR_93 ; VAR_94 -> VAR_95 = VAR_96 ; METHOD_26 ( VAR_97 ) ; VAR_98 -> VAR_99 -- ; } if ( VAR_100 ) goto VAR_101 ; if ( METHOD_27 ( VAR_102 ) -> VAR_103 ) goto VAR_104 ; if ( METHOD_28 ( VAR_105 -> VAR_106 >= VAR_107 ) ) { struct STRUCT_OR_UNION_6 * VAR_108 = VAR_109 -> VAR_110 ; while ( VAR_111 -> VAR_112 ) { VAR_113 = & VAR_114 -> VAR_115 ; VAR_116 = * VAR_117 ; } * VAR_118 = VAR_119 ; VAR_120 -> VAR_121 = VAR_122 ; METHOD_29 ( VAR_123 ) ; } else { VAR_124 -> VAR_125 ++ ; } METHOD_30 ( VAR_126 ) -> VAR_127 = 1 ; METHOD_31 ( VAR_128 ) -> VAR_129 = VAR_130 ; METHOD_32 ( VAR_131 ) -> VAR_132 = VAR_133 ; METHOD_33 ( VAR_134 ) -> VAR_135 = METHOD_34 ( VAR_136 ) ; VAR_137 -> VAR_138 = VAR_139 -> VAR_140 ; VAR_141 -> VAR_142 = VAR_143 ; VAR_144 = VAR_145 ; VAR_146 : VAR_147 = METHOD_35 ( VAR_148 ) - METHOD_36 ( VAR_149 ) ; if ( VAR_150 > 0 ) METHOD_37 ( VAR_151 , VAR_152 ) ; VAR_153 : return VAR_154 ; VAR_155 : VAR_156 = VAR_157 ; goto VAR_158 ; }",598
599,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 METHOD_1 { struct STRUCT_OR_UNION_4 * VAR_3 = STRUCT_OR_UNION_5 -> VAR_4 ; struct STRUCT_OR_UNION_6 * VAR_5 = VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 = & VAR_8 -> VAR_9 ;  struct STRUCT_OR_UNION_8 * VAR_10 = VAR_11 ;  TYPE_2 VAR_12 = 0 ;  struct STRUCT_OR_UNION_9 * VAR_13 = METHOD_2 ( STRUCT_OR_UNION_10 METHOD_3 ;  METHOD_4 ( VAR_14 METHOD_5 ( ( struct STRUCT_OR_UNION_11 * METHOD_6 ( VAR_15 METHOD_7 METHOD_8 if ( VAR_16 -> VAR_17 && VAR_18 -> VAR_19 > VAR_20 -> VAR_21 METHOD_9 return - VAR_22 ; if ( VAR_23 -> VAR_24 METHOD_10 {  VAR_25 = METHOD_11 ( VAR_26 , VAR_27 -> VAR_28 -> VAR_29 ,  VAR_30 -> VAR_31 -> VAR_32 METHOD_12 ; METHOD_13 ( VAR_33 -> VAR_34 , ""get_write_access"" METHOD_14 ; VAR_35 = METHOD_15 ( VAR_36 , VAR_37 -> VAR_38 METHOD_16 ; if ( VAR_39 METHOD_17 goto VAR_40 ; METHOD_18 ( VAR_41 -> VAR_42 METHOD_19 ; if ( METHOD_20 ( VAR_43 -> VAR_44 METHOD_21 -> VAR_45 == METHOD_22 ( 1 METHOD_23 METHOD_24 {  if ( VAR_46 METHOD_25 {  METHOD_26 ( VAR_47 METHOD_27 ; VAR_48 = VAR_49 ; } METHOD_28 ( VAR_50 -> VAR_51 , ""modifyingin-place"" METHOD_29 ; VAR_52 = METHOD_30 ( VAR_53 , VAR_54 METHOD_31 ; if ( ! VAR_55 METHOD_32 { if ( ! METHOD_33 ( VAR_56 -> VAR_57 METHOD_34 METHOD_35 METHOD_36 ( METHOD_37 ( VAR_58 -> VAR_59 METHOD_38 , VAR_60 -> VAR_61 METHOD_39 ; METHOD_40 ( VAR_62 , VAR_63 -> VAR_64 METHOD_41 ; } METHOD_42 ( VAR_65 -> VAR_66 METHOD_43 ; if ( VAR_67 == - VAR_68 METHOD_44 goto VAR_69 ; if ( ! VAR_70 METHOD_45 VAR_71 = METHOD_46 ( VAR_72 , STRUCT_OR_UNION_12 , VAR_73 -> VAR_74 METHOD_47 ; if ( VAR_75 METHOD_48 goto VAR_76 ; goto VAR_77 ; } else { TYPE_3 VAR_78 = ( TYPE_4 * METHOD_49 VAR_79 -> VAR_80 - VAR_81 -> VAR_82 -> VAR_83 ; METHOD_50 ( VAR_84 -> VAR_85 METHOD_51 ;  if ( VAR_86 METHOD_52 {  METHOD_53 ( VAR_87 METHOD_54 ; VAR_88 = VAR_89 ; } METHOD_55 ( VAR_90 -> VAR_91 , ""cloning"" METHOD_56 ; VAR_92 -> VAR_93 = METHOD_57 ( VAR_94 -> VAR_95 -> VAR_96 , VAR_97 METHOD_58 ; VAR_98 = - VAR_99 ; if ( VAR_100 -> VAR_101 == VAR_102 METHOD_59 goto VAR_103 ; METHOD_60 ( VAR_104 -> VAR_105 , METHOD_61 ( VAR_106 -> VAR_107 METHOD_62 , VAR_108 -> VAR_109 -> VAR_110 METHOD_63 ; VAR_111 -> VAR_112 = METHOD_64 ( METHOD_65 ( VAR_113 -> VAR_114 METHOD_66 + 1 METHOD_67 ; METHOD_68 ( VAR_115 -> VAR_116 METHOD_69 -> VAR_117 = METHOD_70 ( 1 METHOD_71 ; VAR_118 -> VAR_119 = METHOD_72 ( VAR_120 -> VAR_121 + VAR_122 METHOD_73 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 + VAR_127 -> VAR_128 -> VAR_129 ; } } else { VAR_130 -> VAR_131 = METHOD_74 ( VAR_132 -> VAR_133 , VAR_134 METHOD_75 ; VAR_135 = - VAR_136 ; if ( VAR_137 -> VAR_138 == VAR_139 METHOD_76 goto VAR_140 ; METHOD_77 ( VAR_141 -> VAR_142 METHOD_78 -> VAR_143 = METHOD_79 ( VAR_144 METHOD_80 ; METHOD_81 ( VAR_145 -> VAR_146 METHOD_82 -> VAR_147 = METHOD_83 ( 1 METHOD_84 ; METHOD_85 ( VAR_148 -> VAR_149 METHOD_86 -> VAR_150 = METHOD_87 ( 1 METHOD_88 ; VAR_151 -> VAR_152 = METHOD_89 ( METHOD_90 ( VAR_153 -> VAR_154 METHOD_91 + 1 METHOD_92 ; VAR_155 -> VAR_156 = METHOD_93 ( METHOD_94 ( VAR_157 -> VAR_158 METHOD_95 + 1 METHOD_96 ; VAR_159 -> VAR_160 = VAR_161 -> VAR_162 + VAR_163 -> VAR_164 ; } VAR_165 = METHOD_97 ( VAR_166 , VAR_167 METHOD_98 ; if ( VAR_168 == - VAR_169 METHOD_99 goto VAR_170 ; if ( VAR_171 METHOD_100 goto VAR_172 ; if ( ! METHOD_101 ( VAR_173 -> VAR_174 METHOD_102 METHOD_103 METHOD_104 ( METHOD_105 ( VAR_175 -> VAR_176 METHOD_106 , VAR_177 -> VAR_178 METHOD_107 ; VAR_179 : if ( ! METHOD_108 ( VAR_180 -> VAR_181 METHOD_109 METHOD_110 { VAR_182 = METHOD_111 ( STRUCT_OR_UNION_13 , METHOD_112 ( VAR_183 -> VAR_184 METHOD_113 , & VAR_185 METHOD_114 ; if ( VAR_186 METHOD_115 { if ( VAR_187 == VAR_188 -> VAR_189 METHOD_116 METHOD_117 ( VAR_190 , ""keeping"" METHOD_118 ; else { VAR_191 = METHOD_119 ( STRUCT_OR_UNION_14 , METHOD_120 ( METHOD_121 ( VAR_192 METHOD_122 , 1 METHOD_123 METHOD_124 ; if ( VAR_193 METHOD_125 goto VAR_194 ; METHOD_126 ( VAR_195 , ""get_write_access"" METHOD_127 ; VAR_196 = METHOD_128 ( VAR_197 , VAR_198 METHOD_129 ; if ( VAR_199 METHOD_130 goto VAR_200 ; METHOD_131 ( VAR_201 METHOD_132 ;  METHOD_133 ( & METHOD_134 ( VAR_202 METHOD_135 -> VAR_203 , 1 METHOD_136 ;  METHOD_137 ( VAR_204 , ""reusing;refcountnow=%d"" , METHOD_138 ( METHOD_139 ( VAR_205 METHOD_140 -> VAR_206 METHOD_141 METHOD_142 ; METHOD_143 ( VAR_207 METHOD_144 ; VAR_208 = METHOD_145 ( VAR_209 , STRUCT_OR_UNION_15 , VAR_210 METHOD_146 ; if ( VAR_211 METHOD_147 goto VAR_212 ; }  METHOD_148 ( VAR_213 METHOD_149 ;  VAR_214 = VAR_215 ; } else if ( VAR_216 -> VAR_217 && VAR_218 -> VAR_219 == VAR_220 -> VAR_221 -> VAR_222 METHOD_150 { METHOD_151 ( VAR_223 -> VAR_224 , ""keepingthisblock"" METHOD_152 ; VAR_225 = VAR_226 -> VAR_227 ; METHOD_153 ( VAR_228 METHOD_154 ; } else { TYPE_5 VAR_229 , VAR_230 ; VAR_231 = METHOD_155 ( VAR_232 , METHOD_156 ( STRUCT_OR_UNION_16 METHOD_157 -> VAR_233 METHOD_158 ; if ( ! ( METHOD_159 ( STRUCT_OR_UNION_17 , VAR_234 METHOD_160 METHOD_161 METHOD_162 VAR_235 = VAR_236 & VAR_237 ; VAR_238 = METHOD_163 ( VAR_239 , STRUCT_OR_UNION_18 , VAR_240 , 0 , VAR_241 , & VAR_242 METHOD_164 ; if ( VAR_243 METHOD_165 goto VAR_244 ; if ( ! ( METHOD_166 ( STRUCT_OR_UNION_19 , VAR_245 METHOD_167 METHOD_168 METHOD_169 METHOD_170 ( VAR_246 > VAR_247 METHOD_171 ; METHOD_172 ( STRUCT_OR_UNION_20 , ""creatingblock%llu"" , ( unsigned TYPE_6 TYPE_7 METHOD_173 VAR_248 METHOD_174 ; VAR_249 = METHOD_175 ( VAR_250 , VAR_251 METHOD_176 ; if ( METHOD_177 ( ! VAR_252 METHOD_178 METHOD_179 { VAR_253 = - VAR_254 ; VAR_255 : METHOD_180 ( VAR_256 , STRUCT_OR_UNION_21 , VAR_257 , VAR_258 , 1 , VAR_259 METHOD_181 ; goto VAR_260 ; } METHOD_182 ( VAR_261 METHOD_183 ; VAR_262 = METHOD_184 ( VAR_263 , VAR_264 METHOD_185 ; if ( VAR_265 METHOD_186 { METHOD_187 ( VAR_266 METHOD_188 ; VAR_267 = - VAR_268 ; goto VAR_269 ; } METHOD_189 ( VAR_270 -> VAR_271 , VAR_272 -> VAR_273 , VAR_274 -> VAR_275 METHOD_190 ; METHOD_191 ( VAR_276 METHOD_192 ; METHOD_193 ( VAR_277 METHOD_194 ; METHOD_195 ( VAR_278 , VAR_279 METHOD_196 ; VAR_280 = METHOD_197 ( VAR_281 , STRUCT_OR_UNION_22 , VAR_282 METHOD_198 ; if ( VAR_283 METHOD_199 goto VAR_284 ; } } METHOD_200 ( STRUCT_OR_UNION_23 METHOD_201 -> VAR_285 = VAR_286 ? VAR_287 -> VAR_288 : 0 ; if ( VAR_289 -> VAR_290 && VAR_291 -> VAR_292 != VAR_293 METHOD_202 METHOD_203 ( VAR_294 , STRUCT_OR_UNION_24 , VAR_295 -> VAR_296 METHOD_204 ; VAR_297 = 0 ; VAR_298 : if ( VAR_299 METHOD_205  METHOD_206 ( VAR_300 METHOD_207 ;  METHOD_208 ( VAR_301 METHOD_209 ; if ( ! ( VAR_302 -> VAR_303 && VAR_304 -> VAR_305 == VAR_306 -> VAR_307 -> VAR_308 METHOD_210 METHOD_211 METHOD_212 ( VAR_309 -> VAR_310 METHOD_213 ; return VAR_311 ; VAR_312 : METHOD_214 ( STRUCT_OR_UNION_25 , METHOD_215 ( METHOD_216 ( VAR_313 METHOD_217 , 1 METHOD_218 METHOD_219 ; goto VAR_314 ; VAR_315 : METHOD_220 ( STRUCT_OR_UNION_26 , ""badblock%llu"" , METHOD_221 ( STRUCT_OR_UNION_27 METHOD_222 -> VAR_316 METHOD_223 ; goto VAR_317 ; METHOD_224 }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 , struct STRUCT_OR_UNION_3 * VAR_2 METHOD_1 { struct STRUCT_OR_UNION_4 * VAR_3 = STRUCT_OR_UNION_5 -> VAR_4 ; struct STRUCT_OR_UNION_6 * VAR_5 = VAR_6 ; struct STRUCT_OR_UNION_7 * VAR_7 = & VAR_8 -> VAR_9 ; struct STRUCT_OR_UNION_8 * VAR_10 = VAR_11 ; TYPE_2 VAR_12 = 0 ; struct STRUCT_OR_UNION_9 * VAR_13 = METHOD_2 ( STRUCT_OR_UNION_10 METHOD_3 ; METHOD_4 ( VAR_14 METHOD_5 ( ( struct STRUCT_OR_UNION_11 * METHOD_6 ( VAR_15 METHOD_7 METHOD_8 if ( VAR_16 -> VAR_17 && VAR_18 -> VAR_19 > VAR_20 -> VAR_21 METHOD_9 return - VAR_22 ; if ( VAR_23 -> VAR_24 METHOD_10 { VAR_25 = METHOD_11 ( VAR_26 , VAR_27 -> VAR_28 -> VAR_29 , VAR_30 -> VAR_31 -> VAR_32 METHOD_12 ; METHOD_13 ( VAR_33 -> VAR_34 , ""get_write_access"" METHOD_14 ; VAR_35 = METHOD_15 ( VAR_36 , VAR_37 -> VAR_38 METHOD_16 ; if ( VAR_39 METHOD_17 goto VAR_40 ; METHOD_18 ( VAR_41 -> VAR_42 METHOD_19 ; if ( METHOD_20 ( VAR_43 -> VAR_44 METHOD_21 -> VAR_45 == METHOD_22 ( 1 METHOD_23 METHOD_24 { if ( VAR_46 METHOD_25 { METHOD_26 ( VAR_47 METHOD_27 ; VAR_48 = VAR_49 ; } METHOD_28 ( VAR_50 -> VAR_51 , ""modifyingin-place"" METHOD_29 ; VAR_52 = METHOD_30 ( VAR_53 , VAR_54 METHOD_31 ; if ( ! VAR_55 METHOD_32 { if ( ! METHOD_33 ( VAR_56 -> VAR_57 METHOD_34 METHOD_35 METHOD_36 ( METHOD_37 ( VAR_58 -> VAR_59 METHOD_38 , VAR_60 -> VAR_61 METHOD_39 ; METHOD_40 ( VAR_62 , VAR_63 -> VAR_64 METHOD_41 ; } METHOD_42 ( VAR_65 -> VAR_66 METHOD_43 ; if ( VAR_67 == - VAR_68 METHOD_44 goto VAR_69 ; if ( ! VAR_70 METHOD_45 VAR_71 = METHOD_46 ( VAR_72 , STRUCT_OR_UNION_12 , VAR_73 -> VAR_74 METHOD_47 ; if ( VAR_75 METHOD_48 goto VAR_76 ; goto VAR_77 ; } else { TYPE_3 VAR_78 = ( TYPE_4 * METHOD_49 VAR_79 -> VAR_80 - VAR_81 -> VAR_82 -> VAR_83 ; METHOD_50 ( VAR_84 -> VAR_85 METHOD_51 ; if ( VAR_86 METHOD_52 { METHOD_53 ( VAR_87 METHOD_54 ; VAR_88 = VAR_89 ; } METHOD_55 ( VAR_90 -> VAR_91 , ""cloning"" METHOD_56 ; VAR_92 -> VAR_93 = METHOD_57 ( VAR_94 -> VAR_95 -> VAR_96 , VAR_97 METHOD_58 ; VAR_98 = - VAR_99 ; if ( VAR_100 -> VAR_101 == VAR_102 METHOD_59 goto VAR_103 ; METHOD_60 ( VAR_104 -> VAR_105 , METHOD_61 ( VAR_106 -> VAR_107 METHOD_62 , VAR_108 -> VAR_109 -> VAR_110 METHOD_63 ; VAR_111 -> VAR_112 = METHOD_64 ( METHOD_65 ( VAR_113 -> VAR_114 METHOD_66 + 1 METHOD_67 ; METHOD_68 ( VAR_115 -> VAR_116 METHOD_69 -> VAR_117 = METHOD_70 ( 1 METHOD_71 ; VAR_118 -> VAR_119 = METHOD_72 ( VAR_120 -> VAR_121 + VAR_122 METHOD_73 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 + VAR_127 -> VAR_128 -> VAR_129 ; } } else { VAR_130 -> VAR_131 = METHOD_74 ( VAR_132 -> VAR_133 , VAR_134 METHOD_75 ; VAR_135 = - VAR_136 ; if ( VAR_137 -> VAR_138 == VAR_139 METHOD_76 goto VAR_140 ; METHOD_77 ( VAR_141 -> VAR_142 METHOD_78 -> VAR_143 = METHOD_79 ( VAR_144 METHOD_80 ; METHOD_81 ( VAR_145 -> VAR_146 METHOD_82 -> VAR_147 = METHOD_83 ( 1 METHOD_84 ; METHOD_85 ( VAR_148 -> VAR_149 METHOD_86 -> VAR_150 = METHOD_87 ( 1 METHOD_88 ; VAR_151 -> VAR_152 = METHOD_89 ( METHOD_90 ( VAR_153 -> VAR_154 METHOD_91 + 1 METHOD_92 ; VAR_155 -> VAR_156 = METHOD_93 ( METHOD_94 ( VAR_157 -> VAR_158 METHOD_95 + 1 METHOD_96 ; VAR_159 -> VAR_160 = VAR_161 -> VAR_162 + VAR_163 -> VAR_164 ; } VAR_165 = METHOD_97 ( VAR_166 , VAR_167 METHOD_98 ; if ( VAR_168 == - VAR_169 METHOD_99 goto VAR_170 ; if ( VAR_171 METHOD_100 goto VAR_172 ; if ( ! METHOD_101 ( VAR_173 -> VAR_174 METHOD_102 METHOD_103 METHOD_104 ( METHOD_105 ( VAR_175 -> VAR_176 METHOD_106 , VAR_177 -> VAR_178 METHOD_107 ; VAR_179 : if ( ! METHOD_108 ( VAR_180 -> VAR_181 METHOD_109 METHOD_110 { VAR_182 = METHOD_111 ( STRUCT_OR_UNION_13 , METHOD_112 ( VAR_183 -> VAR_184 METHOD_113 , & VAR_185 METHOD_114 ; if ( VAR_186 METHOD_115 { if ( VAR_187 == VAR_188 -> VAR_189 METHOD_116 METHOD_117 ( VAR_190 , ""keeping"" METHOD_118 ; else { VAR_191 = METHOD_119 ( STRUCT_OR_UNION_14 , METHOD_120 ( METHOD_121 ( VAR_192 METHOD_122 , 1 METHOD_123 METHOD_124 ; if ( VAR_193 METHOD_125 goto VAR_194 ; METHOD_126 ( VAR_195 , ""get_write_access"" METHOD_127 ; VAR_196 = METHOD_128 ( VAR_197 , VAR_198 METHOD_129 ; if ( VAR_199 METHOD_130 goto VAR_200 ; METHOD_131 ( VAR_201 METHOD_132 ; METHOD_133 ( & METHOD_134 ( VAR_202 METHOD_135 -> VAR_203 , 1 METHOD_136 ; METHOD_137 ( VAR_204 , ""reusing;refcountnow=%d"" , METHOD_138 ( METHOD_139 ( VAR_205 METHOD_140 -> VAR_206 METHOD_141 METHOD_142 ; METHOD_143 ( VAR_207 METHOD_144 ; VAR_208 = METHOD_145 ( VAR_209 , STRUCT_OR_UNION_15 , VAR_210 METHOD_146 ; if ( VAR_211 METHOD_147 goto VAR_212 ; } METHOD_148 ( VAR_213 METHOD_149 ; VAR_214 = VAR_215 ; } else if ( VAR_216 -> VAR_217 && VAR_218 -> VAR_219 == VAR_220 -> VAR_221 -> VAR_222 METHOD_150 { METHOD_151 ( VAR_223 -> VAR_224 , ""keepingthisblock"" METHOD_152 ; VAR_225 = VAR_226 -> VAR_227 ; METHOD_153 ( VAR_228 METHOD_154 ; } else { TYPE_5 VAR_229 , VAR_230 ; VAR_231 = METHOD_155 ( VAR_232 , METHOD_156 ( STRUCT_OR_UNION_16 METHOD_157 -> VAR_233 METHOD_158 ; if ( ! ( METHOD_159 ( STRUCT_OR_UNION_17 , VAR_234 METHOD_160 METHOD_161 METHOD_162 VAR_235 = VAR_236 & VAR_237 ; VAR_238 = METHOD_163 ( VAR_239 , STRUCT_OR_UNION_18 , VAR_240 , 0 , VAR_241 , & VAR_242 METHOD_164 ; if ( VAR_243 METHOD_165 goto VAR_244 ; if ( ! ( METHOD_166 ( STRUCT_OR_UNION_19 , VAR_245 METHOD_167 METHOD_168 METHOD_169 METHOD_170 ( VAR_246 > VAR_247 METHOD_171 ; METHOD_172 ( STRUCT_OR_UNION_20 , ""creatingblock%llu"" , ( unsigned TYPE_6 TYPE_7 METHOD_173 VAR_248 METHOD_174 ; VAR_249 = METHOD_175 ( VAR_250 , VAR_251 METHOD_176 ; if ( METHOD_177 ( ! VAR_252 METHOD_178 METHOD_179 { VAR_253 = - VAR_254 ; VAR_255 : METHOD_180 ( VAR_256 , STRUCT_OR_UNION_21 , VAR_257 , VAR_258 , 1 , VAR_259 METHOD_181 ; goto VAR_260 ; } METHOD_182 ( VAR_261 METHOD_183 ; VAR_262 = METHOD_184 ( VAR_263 , VAR_264 METHOD_185 ; if ( VAR_265 METHOD_186 { METHOD_187 ( VAR_266 METHOD_188 ; VAR_267 = - VAR_268 ; goto VAR_269 ; } METHOD_189 ( VAR_270 -> VAR_271 , VAR_272 -> VAR_273 , VAR_274 -> VAR_275 METHOD_190 ; METHOD_191 ( VAR_276 METHOD_192 ; METHOD_193 ( VAR_277 METHOD_194 ; METHOD_195 ( VAR_278 , VAR_279 METHOD_196 ; VAR_280 = METHOD_197 ( VAR_281 , STRUCT_OR_UNION_22 , VAR_282 METHOD_198 ; if ( VAR_283 METHOD_199 goto VAR_284 ; } } METHOD_200 ( STRUCT_OR_UNION_23 METHOD_201 -> VAR_285 = VAR_286 ? VAR_287 -> VAR_288 : 0 ; if ( VAR_289 -> VAR_290 && VAR_291 -> VAR_292 != VAR_293 METHOD_202 METHOD_203 ( VAR_294 , STRUCT_OR_UNION_24 , VAR_295 -> VAR_296 METHOD_204 ; VAR_297 = 0 ; VAR_298 : if ( VAR_299 METHOD_205 METHOD_206 ( VAR_300 METHOD_207 ; METHOD_208 ( VAR_301 METHOD_209 ; if ( ! ( VAR_302 -> VAR_303 && VAR_304 -> VAR_305 == VAR_306 -> VAR_307 -> VAR_308 METHOD_210 METHOD_211 METHOD_212 ( VAR_309 -> VAR_310 METHOD_213 ; return VAR_311 ; VAR_312 : METHOD_214 ( STRUCT_OR_UNION_25 , METHOD_215 ( METHOD_216 ( VAR_313 METHOD_217 , 1 METHOD_218 METHOD_219 ; goto VAR_314 ; VAR_315 : METHOD_220 ( STRUCT_OR_UNION_26 , ""badblock%llu"" , METHOD_221 ( STRUCT_OR_UNION_27 METHOD_222 -> VAR_316 METHOD_223 ; goto VAR_317 ; METHOD_224 }",599
600," TYPE_0 METHOD_0 ( ) {  METHOD_1 ( VAR_0 , ""Usage:%s<infile><outfile>\\n"" , VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }","TYPE_0 METHOD_0 ( TYPE_0 ) { METHOD_1 ( VAR_0 , ""Usage:%s<infile><outfile>\\n"" , VAR_1 ) ; METHOD_2 ( VAR_2 ) ; }",600
601," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) {  TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 -> VAR_3 -> VAR_4 , & VAR_5 ) ; if ( VAR_6 -> VAR_7 != 0 ) { METHOD_2 ( VAR_8 , VAR_9 , METHOD_3 ( VAR_10 ) ) ; if ( ( METHOD_4 ( VAR_11 -> VAR_12 , VAR_13 ) != VAR_14 -> VAR_15 ) ) { METHOD_5 ( VAR_16 , VAR_17 -> VAR_18 , VAR_19 ) ; } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 -> VAR_3 -> VAR_4 , & VAR_5 ) ; if ( VAR_6 -> VAR_7 != 0 ) { METHOD_2 ( VAR_8 , VAR_9 , METHOD_3 ( VAR_10 ) ) ; if ( ( METHOD_4 ( VAR_11 -> VAR_12 , VAR_13 ) != VAR_14 -> VAR_15 ) ) { METHOD_5 ( VAR_16 , VAR_17 -> VAR_18 , VAR_19 ) ; } } }",601
602,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 ; TYPE_3 VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; TYPE_4 VAR_9 = VAR_10 -> VAR_11 -> VAR_12 ; METHOD_1 ( VAR_13 > 4 ) ; TYPE_5 VAR_14 ; if ( VAR_15 < 4 ) { VAR_16 = METHOD_2 ( VAR_17 , VAR_18 + VAR_19 , 4 - VAR_20 ) ; if ( VAR_21 < 0 ) goto VAR_22 ; if ( VAR_23 ) { if ( VAR_24 > 0 ) METHOD_3 ( ""TPKT:read%ibytesfromsocket\\n"" , VAR_25 ) ; } VAR_26 += VAR_27 ; if ( VAR_28 == 4 ) { if ( ( VAR_29 [ 0 ] == 3 ) && ( VAR_30 [ 1 ] == 0 ) ) { VAR_31 -> VAR_32 = ( VAR_33 [ 2 ] * 0x100 ) + VAR_34 [ 3 ] ; if ( VAR_35 ) METHOD_4 ( ""TPKT:headercomplete(msgsize=%i)\\n"" , VAR_36 -> VAR_37 ) ; if ( VAR_38 -> VAR_39 > VAR_40 ) { if ( VAR_41 ) METHOD_5 ( ""TPKT:packettoolarge\\n"" ) ; goto VAR_42 ; } } else { if ( VAR_43 ) METHOD_6 ( ""TPKT:failedtodecodeTPKTheader.\\n"" ) ; goto VAR_44 ; } } else goto VAR_45 ; }  VAR_46 = METHOD_7 ( VAR_47 , VAR_48 + VAR_49 , VAR_50 -> VAR_51 - VAR_52 ) ;  if ( VAR_53 < 0 ) goto VAR_54 ; VAR_55 += VAR_56 ; if ( VAR_57 < VAR_58 -> VAR_59 ) goto VAR_60 ; if ( VAR_61 ) METHOD_8 ( ""TPKT:messagecomplete(size=%i)\\n"" , VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 -> VAR_66 = VAR_67 ; return VAR_68 ; VAR_69 : if ( VAR_70 ) METHOD_9 ( ""TPKT:socketclosedorsocketerror\\n"" ) ; return VAR_71 ; VAR_72 : if ( VAR_73 ) METHOD_10 ( ""TPKT:Errorparsingmessage\\n"" ) ; return VAR_74 ; VAR_75 : if ( VAR_76 ) if ( VAR_77 != 0 ) METHOD_11 ( ""TPKT:waiting(read%iof%i)\\n"" , VAR_78 , VAR_79 -> VAR_80 ) ; VAR_81 -> VAR_82 -> VAR_83 = VAR_84 ; return VAR_85 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = VAR_2 -> VAR_3 -> VAR_4 ; TYPE_3 VAR_5 = VAR_6 -> VAR_7 -> VAR_8 ; TYPE_4 VAR_9 = VAR_10 -> VAR_11 -> VAR_12 ; METHOD_1 ( VAR_13 > 4 ) ; TYPE_5 VAR_14 ; if ( VAR_15 < 4 ) { VAR_16 = METHOD_2 ( VAR_17 , VAR_18 + VAR_19 , 4 - VAR_20 ) ; if ( VAR_21 < 0 ) goto VAR_22 ; if ( VAR_23 ) { if ( VAR_24 > 0 ) METHOD_3 ( ""TPKT:read%ibytesfromsocket\\n"" , VAR_25 ) ; } VAR_26 += VAR_27 ; if ( VAR_28 == 4 ) { if ( ( VAR_29 [ 0 ] == 3 ) && ( VAR_30 [ 1 ] == 0 ) ) { VAR_31 -> VAR_32 = ( VAR_33 [ 2 ] * 0x100 ) + VAR_34 [ 3 ] ; if ( VAR_35 ) METHOD_4 ( ""TPKT:headercomplete(msgsize=%i)\\n"" , VAR_36 -> VAR_37 ) ; if ( VAR_38 -> VAR_39 > VAR_40 ) { if ( VAR_41 ) METHOD_5 ( ""TPKT:packettoolarge\\n"" ) ; goto VAR_42 ; } } else { if ( VAR_43 ) METHOD_6 ( ""TPKT:failedtodecodeTPKTheader.\\n"" ) ; goto VAR_44 ; } } else goto VAR_45 ; } VAR_46 = METHOD_7 ( VAR_47 , VAR_48 + VAR_49 , VAR_50 -> VAR_51 - VAR_52 ) ; if ( VAR_53 < 0 ) goto VAR_54 ; VAR_55 += VAR_56 ; if ( VAR_57 < VAR_58 -> VAR_59 ) goto VAR_60 ; if ( VAR_61 ) METHOD_8 ( ""TPKT:messagecomplete(size=%i)\\n"" , VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 -> VAR_66 = VAR_67 ; return VAR_68 ; VAR_69 : if ( VAR_70 ) METHOD_9 ( ""TPKT:socketclosedorsocketerror\\n"" ) ; return VAR_71 ; VAR_72 : if ( VAR_73 ) METHOD_10 ( ""TPKT:Errorparsingmessage\\n"" ) ; return VAR_74 ; VAR_75 : if ( VAR_76 ) if ( VAR_77 != 0 ) METHOD_11 ( ""TPKT:waiting(read%iof%i)\\n"" , VAR_78 , VAR_79 -> VAR_80 ) ; VAR_81 -> VAR_82 -> VAR_83 = VAR_84 ; return VAR_85 ; }",602
603,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 ;  TYPE_3 VAR_3 ;  if ( VAR_4 -> VAR_5 == VAR_6 ) return ; VAR_7 = VAR_8 -> VAR_9 - VAR_10 -> VAR_11 ; if ( VAR_12 -> VAR_13 ) VAR_14 += VAR_15 -> VAR_16 -> VAR_17 ; if ( VAR_18 -> VAR_19 + VAR_20 > VAR_21 -> VAR_22 ) VAR_23 = VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) { TYPE_4 VAR_32 = VAR_33 -> VAR_34 [ VAR_35 ] ; if ( ! METHOD_1 ( VAR_36 ) ) {  if ( METHOD_2 ( VAR_37 ) -> VAR_38 == VAR_39 ) {  VAR_40 -> VAR_41 [ VAR_42 ] = METHOD_3 ( ) ; } else { METHOD_4 ( VAR_43 , METHOD_5 ( VAR_44 ) ) ; } }  }  }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) return ; VAR_7 = VAR_8 -> VAR_9 - VAR_10 -> VAR_11 ; if ( VAR_12 -> VAR_13 ) VAR_14 += VAR_15 -> VAR_16 -> VAR_17 ; if ( VAR_18 -> VAR_19 + VAR_20 > VAR_21 -> VAR_22 ) VAR_23 = VAR_24 -> VAR_25 - VAR_26 -> VAR_27 ; for ( VAR_28 = 0 ; VAR_29 < VAR_30 ; VAR_31 ++ ) { TYPE_4 VAR_32 = VAR_33 -> VAR_34 [ VAR_35 ] ; if ( ! METHOD_1 ( VAR_36 ) ) { METHOD_4 ( VAR_43 , METHOD_5 ( VAR_44 ) ) ; } } VAR_30 = VAR_40 -> VAR_25 - VAR_40 -> VAR_41 ; VAR_45 = METHOD_3 ( ) ; for ( ; VAR_42 < VAR_30 ; VAR_42 ++ ) { VAR_40 -> VAR_41 [ VAR_42 ] = VAR_45 ; } }",603
604,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = STRUCT_OR_UNION_4 -> VAR_2 . VAR_3 [ 0 ] ; struct STRUCT_OR_UNION_5 * VAR_4 ; TYPE_1 * VAR_5 ; TYPE_2 * VAR_6 = VAR_7 ; const TYPE_3 * VAR_8 = VAR_9 ; TYPE_4 VAR_10 = VAR_11 -> VAR_12 ; TYPE_5 VAR_13 = 0 ;  if ( METHOD_1 ( VAR_14 , & STRUCT_OR_UNION_6 -> VAR_15 ) )  return - VAR_16 ; if ( VAR_17 <= 0 || VAR_18 > 32767 || ! VAR_19 -> VAR_20 ) return - VAR_21 ; VAR_22 = METHOD_2 ( VAR_23 + 1 , VAR_24 ) ; if ( ! VAR_25 ) return - VAR_26 ; VAR_27 [ VAR_28 ] = 0 ; METHOD_3 ( VAR_29 , VAR_30 -> VAR_31 , VAR_32 ) ; VAR_33 = METHOD_4 ( VAR_34 , & VAR_35 , & VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) goto VAR_40 ; VAR_41 = METHOD_5 ( VAR_42 , VAR_43 -> VAR_44 ) ; if ( VAR_45 < 0 ) goto VAR_46 ; VAR_47 = METHOD_6 ( STRUCT_OR_UNION_7 , VAR_48 -> VAR_49 , VAR_50 , VAR_51 -> VAR_52 ) ; if ( METHOD_7 ( VAR_53 ) ) { VAR_54 = METHOD_8 ( VAR_55 ) ; goto VAR_56 ; } METHOD_9 ( VAR_57 , VAR_58 -> VAR_59 , VAR_60 , VAR_61 -> VAR_62 ) ; METHOD_10 ( VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 ) ; METHOD_11 ( VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 -> VAR_73 ) ; METHOD_12 ( STRUCT_OR_UNION_8 , VAR_74 ) ; METHOD_13 ( & VAR_75 -> VAR_76 , VAR_77 ) ; VAR_78 : METHOD_14 ( VAR_79 ) ; return VAR_80 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = STRUCT_OR_UNION_4 -> VAR_2 . VAR_3 [ 0 ] ; struct STRUCT_OR_UNION_5 * VAR_4 ; TYPE_1 * VAR_5 ; TYPE_2 * VAR_6 = VAR_7 ; const TYPE_3 * VAR_8 = VAR_9 ; TYPE_4 VAR_10 = VAR_11 -> VAR_12 ; TYPE_5 VAR_13 = 0 ; if ( METHOD_15 ( STRUCT_OR_UNION_8 ) ) return - VAR_16 ; if ( VAR_17 <= 0 || VAR_18 > 32767 || ! VAR_19 -> VAR_20 ) return - VAR_21 ; VAR_22 = METHOD_2 ( VAR_23 + 1 , VAR_24 ) ; if ( ! VAR_25 ) return - VAR_26 ; VAR_27 [ VAR_28 ] = 0 ; METHOD_3 ( VAR_29 , VAR_30 -> VAR_31 , VAR_32 ) ; VAR_33 = METHOD_4 ( VAR_34 , & VAR_35 , & VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) goto VAR_40 ; VAR_41 = METHOD_5 ( VAR_42 , VAR_43 -> VAR_44 ) ; if ( VAR_45 < 0 ) goto VAR_46 ; VAR_47 = METHOD_6 ( STRUCT_OR_UNION_7 , VAR_48 -> VAR_49 , VAR_50 , VAR_51 -> VAR_52 ) ; if ( METHOD_7 ( VAR_53 ) ) { VAR_54 = METHOD_8 ( VAR_55 ) ; goto VAR_56 ; } METHOD_9 ( VAR_57 , VAR_58 -> VAR_59 , VAR_60 , VAR_61 -> VAR_62 ) ; METHOD_10 ( VAR_63 -> VAR_64 , VAR_65 -> VAR_66 , VAR_67 ) ; METHOD_11 ( VAR_68 -> VAR_69 , VAR_70 -> VAR_71 , VAR_72 -> VAR_73 ) ; METHOD_12 ( STRUCT_OR_UNION_8 , VAR_74 ) ; METHOD_13 ( & VAR_75 -> VAR_76 , VAR_77 ) ; VAR_78 : METHOD_14 ( VAR_79 ) ; return VAR_80 ; }",604
605,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 -> VAR_5 ) { METHOD_1 ( VAR_6 , ""overread%d,state:%Xnext:%dindex:%do_index:%d\\n"" , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 , VAR_11 , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ) ; METHOD_2 ( VAR_16 , ""%X%X%X%X\\n"" , ( * VAR_17 ) [ 0 ] , ( * VAR_18 ) [ 1 ] , ( * VAR_19 ) [ 2 ] , ( * VAR_20 ) [ 3 ] ) ; } for ( ; VAR_21 -> VAR_22 > 0 ; VAR_23 -> VAR_24 -- ) { VAR_25 -> VAR_26 [ VAR_27 -> VAR_28 ++ ] = VAR_29 -> VAR_30 [ VAR_31 -> VAR_32 ++ ] ; } if ( ! * VAR_33 && VAR_34 == VAR_35 ) { VAR_36 = 0 ; } VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 == VAR_42 ) { TYPE_5 * VAR_43 = METHOD_3 ( VAR_44 -> VAR_45 , & VAR_46 -> VAR_47 , ( * VAR_48 ) + VAR_49 -> VAR_50 + VAR_51 ) ;  if ( ! VAR_52 )   return METHOD_4 ( VAR_53 ) ;  VAR_54 -> VAR_55 = VAR_56 ; METHOD_5 ( & VAR_57 -> VAR_58 [ VAR_59 -> VAR_60 ] , * VAR_61 , * VAR_62 ) ; VAR_63 -> VAR_64 += * VAR_65 ; return - 1 ; } * VAR_66 = VAR_67 -> VAR_68 = VAR_69 -> VAR_70 + VAR_71 ; if ( VAR_72 -> VAR_73 ) { TYPE_6 * VAR_74 = METHOD_6 ( VAR_75 -> VAR_76 , & VAR_77 -> VAR_78 , VAR_79 + VAR_80 -> VAR_81 + VAR_82 ) ;  if ( ! VAR_83 )   return METHOD_7 ( VAR_84 ) ;  VAR_85 -> VAR_86 = VAR_87 ; if ( VAR_88 > - VAR_89 ) METHOD_8 ( & VAR_90 -> VAR_91 [ VAR_92 -> VAR_93 ] , * VAR_94 , VAR_95 + VAR_96 ) ; VAR_97 -> VAR_98 = 0 ; * VAR_99 = VAR_100 -> VAR_101 ; } for ( ; VAR_102 < 0 ; VAR_103 ++ ) { VAR_104 -> VAR_105 = ( VAR_106 -> VAR_107 << 8 ) | VAR_108 -> VAR_109 [ VAR_110 -> VAR_111 + VAR_112 ] ; VAR_113 -> VAR_114 = ( VAR_115 -> VAR_116 << 8 ) | VAR_117 -> VAR_118 [ VAR_119 -> VAR_120 + VAR_121 ] ; VAR_122 -> VAR_123 ++ ; } if ( VAR_124 -> VAR_125 ) { METHOD_9 ( VAR_126 , ""overread%d,state:%Xnext:%dindex:%do_index:%d\\n"" , VAR_127 -> VAR_128 , VAR_129 -> VAR_130 , VAR_131 , VAR_132 -> VAR_133 , VAR_134 -> VAR_135 ) ; METHOD_10 ( VAR_136 , ""%X%X%X%X\\n"" , ( * VAR_137 ) [ 0 ] , ( * VAR_138 ) [ 1 ] , ( * VAR_139 ) [ 2 ] , ( * VAR_140 ) [ 3 ] ) ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * * VAR_2 , TYPE_4 * VAR_3 ) { if ( VAR_4 -> VAR_5 ) { METHOD_1 ( VAR_6 , ""overread%d,state:%Xnext:%dindex:%do_index:%d\\n"" , VAR_7 -> VAR_8 , VAR_9 -> VAR_10 , VAR_11 , VAR_12 -> VAR_13 , VAR_14 -> VAR_15 ) ; METHOD_2 ( VAR_16 , ""%X%X%X%X\\n"" , ( * VAR_17 ) [ 0 ] , ( * VAR_18 ) [ 1 ] , ( * VAR_19 ) [ 2 ] , ( * VAR_20 ) [ 3 ] ) ; } for ( ; VAR_21 -> VAR_22 > 0 ; VAR_23 -> VAR_24 -- ) { VAR_25 -> VAR_26 [ VAR_27 -> VAR_28 ++ ] = VAR_29 -> VAR_30 [ VAR_31 -> VAR_32 ++ ] ; } if ( ! * VAR_33 && VAR_34 == VAR_35 ) { VAR_36 = 0 ; } VAR_37 -> VAR_38 = VAR_39 -> VAR_40 ; if ( VAR_41 == VAR_42 ) { TYPE_5 * VAR_43 = METHOD_3 ( VAR_44 -> VAR_45 , & VAR_46 -> VAR_47 , ( * VAR_48 ) + VAR_49 -> VAR_50 + VAR_51 ) ; if ( ! VAR_52 ) return METHOD_4 ( VAR_53 ) ; VAR_54 -> VAR_55 = VAR_56 ; METHOD_5 ( & VAR_57 -> VAR_58 [ VAR_59 -> VAR_60 ] , * VAR_61 , * VAR_62 ) ; VAR_63 -> VAR_64 += * VAR_65 ; return - 1 ; } * VAR_66 = VAR_67 -> VAR_68 = VAR_69 -> VAR_70 + VAR_71 ; if ( VAR_72 -> VAR_73 ) { TYPE_6 * VAR_74 = METHOD_6 ( VAR_75 -> VAR_76 , & VAR_77 -> VAR_78 , VAR_79 + VAR_80 -> VAR_81 + VAR_82 ) ; if ( ! VAR_83 ) return METHOD_7 ( VAR_84 ) ; } VAR_85 -> VAR_86 = VAR_87 ; if ( VAR_88 > - VAR_89 ) METHOD_8 ( & VAR_90 -> VAR_91 [ VAR_92 -> VAR_93 ] , * VAR_94 , VAR_95 + VAR_96 ) ; VAR_97 -> VAR_98 = 0 ; * VAR_99 = VAR_100 -> VAR_101 ; } for ( ; VAR_102 < 0 ; VAR_103 ++ ) { VAR_104 -> VAR_105 = ( VAR_106 -> VAR_107 << 8 ) | VAR_108 -> VAR_109 [ VAR_110 -> VAR_111 + VAR_112 ] ; VAR_113 -> VAR_114 = ( VAR_115 -> VAR_116 << 8 ) | VAR_117 -> VAR_118 [ VAR_119 -> VAR_120 + VAR_121 ] ; VAR_122 -> VAR_123 ++ ; } if ( VAR_124 -> VAR_125 ) { METHOD_9 ( VAR_126 , ""overread%d,state:%Xnext:%dindex:%do_index:%d\\n"" , VAR_127 -> VAR_128 , VAR_129 -> VAR_130 , VAR_131 , VAR_132 -> VAR_133 , VAR_134 -> VAR_135 ) ; METHOD_10 ( VAR_136 , ""%X%X%X%X\\n"" , ( * VAR_137 ) [ 0 ] , ( * VAR_138 ) [ 1 ] , ( * VAR_139 ) [ 2 ] , ( * VAR_140 ) [ 3 ] ) ; } return 0 ; }",605
606,"TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_2 * VAR_1 ,  const TYPE_3 * VAR_2 , const TYPE_4 VAR_3 [ 2 ] )  { TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 , & VAR_12 , & VAR_13 ) == - 1 ) return - 1 ; if ( METHOD_2 ( VAR_14 ) ) { const TYPE_8 * VAR_15 ; if ( METHOD_3 ( VAR_16 , ""CompositeDocumentFileV2Document"" ) == - 1 ) return - 1 ; if ( METHOD_4 ( VAR_17 , "",%sEndian"" , VAR_18 . VAR_19 == 0xfffe ? ""Little"" : ""Big"" ) == - 1 ) return - 2 ; switch ( VAR_20 . VAR_21 ) { case 2 : if ( METHOD_5 ( VAR_22 , "",Os:Windows,Version%d.%d"" , VAR_23 . VAR_24 & 0xff , ( TYPE_9 ) VAR_25 . VAR_26 >> 8 ) == - 1 ) return - 2 ; break ; case 1 : if ( METHOD_6 ( VAR_27 , "",Os:MacOS,Version%d.%d"" , ( TYPE_10 ) VAR_28 . VAR_29 >> 8 , VAR_30 . VAR_31 & 0xff ) == - 1 ) return - 2 ; break ; default : if ( METHOD_7 ( VAR_32 , "",Os%d,Version:%d.%d"" , VAR_33 . VAR_34 , VAR_35 . VAR_36 & 0xff , ( TYPE_11 ) VAR_37 . VAR_38 >> 8 ) == - 1 ) return - 2 ; break ; }  VAR_39 = METHOD_8 ( VAR_40 , VAR_41 ) ;  if ( VAR_42 ) if ( METHOD_9 ( VAR_43 , "",%s"" , VAR_44 ) == - 1 )  return - 2 ;  }  VAR_45 = METHOD_10 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ;  METHOD_11 ( VAR_50 ) ; return VAR_51 == - 1 ? - 2 : VAR_52 ; }","TYPE_0 TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , const TYPE_4 VAR_3 [ 2 ] ) { TYPE_5 VAR_4 ; VAR_5 * VAR_6 ; TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; if ( METHOD_1 ( VAR_9 , VAR_10 , & VAR_11 , & VAR_12 , & VAR_13 ) == - 1 ) return - 1 ; if ( METHOD_2 ( VAR_14 ) ) { const TYPE_8 * VAR_15 ; if ( METHOD_3 ( VAR_16 , ""CompositeDocumentFileV2Document"" ) == - 1 ) return - 1 ; if ( METHOD_4 ( VAR_17 , "",%sEndian"" , VAR_18 . VAR_19 == 0xfffe ? ""Little"" : ""Big"" ) == - 1 ) return - 2 ; switch ( VAR_20 . VAR_21 ) { case 2 : if ( METHOD_5 ( VAR_22 , "",Os:Windows,Version%d.%d"" , VAR_23 . VAR_24 & 0xff , ( TYPE_9 ) VAR_25 . VAR_26 >> 8 ) == - 1 ) return - 2 ; break ; case 1 : if ( METHOD_6 ( VAR_27 , "",Os:MacOS,Version%d.%d"" , ( TYPE_10 ) VAR_28 . VAR_29 >> 8 , VAR_30 . VAR_31 & 0xff ) == - 1 ) return - 2 ; break ; default : if ( METHOD_7 ( VAR_32 , "",Os%d,Version:%d.%d"" , VAR_33 . VAR_34 , VAR_35 . VAR_36 & 0xff , ( TYPE_11 ) VAR_37 . VAR_38 >> 8 ) == - 1 ) return - 2 ; break ; } if ( VAR_53 ) { VAR_39 = METHOD_8 ( VAR_53 -> VAR_54 , VAR_41 ) ; if ( VAR_42 ) if ( METHOD_9 ( VAR_43 , "",%s"" , VAR_44 ) == - 1 ) return - 2 ; } } VAR_45 = METHOD_10 ( VAR_46 , VAR_47 , VAR_48 , VAR_53 ) ; METHOD_11 ( VAR_50 ) ; return VAR_51 == - 1 ? - 2 : VAR_52 ; }",606
607,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 = 0 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 = 1 ; TYPE_8 VAR_8 = VAR_9 ; TYPE_9 VAR_10 = 0 ; VAR_11 -> VAR_12 = 0 ; while ( VAR_13 ) { VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 , & VAR_18 , & VAR_19 ) ; if ( ! METHOD_2 ( VAR_20 + VAR_21 , ""ptr"" , 3 ) ) { continue ; } else if ( ! METHOD_3 ( VAR_22 + VAR_23 , ""byte"" , 4 ) ) { VAR_24 -> VAR_25 |= VAR_26 | VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; } else if ( ! METHOD_4 ( VAR_33 + VAR_34 , ""word"" , 4 ) ) { VAR_35 -> VAR_36 |= VAR_37 | VAR_38 ; VAR_39 -> VAR_40 = VAR_41 ; VAR_42 = VAR_43 ; } else if ( ! METHOD_5 ( VAR_44 + VAR_45 , ""dword"" , 5 ) ) { VAR_46 -> VAR_47 |= VAR_48 | VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; } else if ( ! METHOD_6 ( VAR_55 + VAR_56 , ""qword"" , 5 ) ) { VAR_57 -> VAR_58 |= VAR_59 | VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } else if ( ! METHOD_7 ( VAR_66 + VAR_67 , ""oword"" , 5 ) ) { VAR_68 -> VAR_69 |= VAR_70 | VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } else if ( ! METHOD_8 ( VAR_77 + VAR_78 , ""tbyte"" , 5 ) ) { VAR_79 -> VAR_80 |= VAR_81 | VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 = VAR_87 ; } else { VAR_88 = 0 ; } } if ( VAR_89 [ VAR_90 ] == '[' ) { if ( ! VAR_91 -> VAR_92 ) { VAR_93 -> VAR_94 = VAR_95 ; } VAR_96 -> VAR_97 = VAR_98 -> VAR_99 [ 0 ] = VAR_100 -> VAR_101 [ 1 ] = 0 ; TYPE_10 VAR_102 = 1 ; TYPE_11 VAR_103 = VAR_104 ; TYPE_12 VAR_105 = VAR_106 ; while ( VAR_107 [ VAR_108 ] != ']' ) { if ( VAR_109 > VAR_110 ) { break ; } VAR_111 = VAR_112 ; if ( ! VAR_113 [ VAR_114 ] ) { break ; } VAR_115 = METHOD_9 ( VAR_116 , & VAR_117 , & VAR_118 ) ; if ( VAR_119 == VAR_120 ) { if ( VAR_121 [ VAR_122 ] == '+' || VAR_123 [ VAR_124 ] == '-' || VAR_125 [ VAR_126 ] == ']' ) { if ( VAR_127 != VAR_128 ) {  VAR_129 -> VAR_130 [ VAR_131 ] = VAR_132 ;  VAR_133 -> VAR_134 [ VAR_135 ] = VAR_136 ;  ++ VAR_137 ;  } else {  VAR_138 -> VAR_139 += VAR_140 ;   VAR_141 -> VAR_142 [ VAR_143 ] = VAR_144 ;  } VAR_145 = 1 ; VAR_146 = VAR_147 ; } else if ( VAR_148 [ VAR_149 ] == '*' ) { } } else if ( VAR_150 == VAR_151 ) { TYPE_13 VAR_152 = 0 ; if ( VAR_153 != VAR_154 ) { VAR_155 -> VAR_156 = 0 ; } VAR_157 = VAR_158 ; VAR_159 = METHOD_10 ( VAR_160 , VAR_161 , & VAR_162 , & VAR_163 ) ; if ( VAR_164 ) { VAR_165 -> VAR_166 = VAR_167 ; if ( VAR_168 > 8 ) { VAR_169 -> VAR_170 = VAR_171 ; VAR_172 -> VAR_173 = VAR_174 - 9 ; } VAR_175 = VAR_176 ; } else if ( VAR_177 > 8 ) { VAR_178 -> VAR_179 = VAR_180 - 9 ; } if ( VAR_181 & VAR_182 & VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 = VAR_189 ; METHOD_11 ( VAR_190 , VAR_191 , & VAR_192 , VAR_193 , VAR_194 ) ; return VAR_195 ; } if ( ! VAR_196 ) { VAR_197 -> VAR_198 |= VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 ; if ( ! ( VAR_206 & VAR_207 ) ) { VAR_208 -> VAR_209 = 0 ; } } else { TYPE_14 * VAR_210 = METHOD_12 ( VAR_211 , '+' ) ; VAR_212 -> VAR_213 = 1 ; if ( ! VAR_214 ) { VAR_215 = METHOD_13 ( VAR_216 , '-' ) ; if ( VAR_217 ) { VAR_218 -> VAR_219 = - 1 ; } } TYPE_15 * VAR_220 = METHOD_14 ( VAR_221 , '+' ) ; TYPE_16 * VAR_222 = METHOD_15 ( VAR_223 , '-' ) ; TYPE_17 * VAR_224 = METHOD_16 ( VAR_225 , ']' ) ; if ( VAR_226 && VAR_227 && VAR_228 < VAR_229 && VAR_230 < VAR_231 ) { VAR_232 -> VAR_233 = - 1 ; } TYPE_18 * VAR_234 ; VAR_235 = METHOD_17 ( METHOD_18 ( VAR_236 + VAR_237 ) + 1 ) ; METHOD_19 ( VAR_238 , VAR_239 + VAR_240 ) ; METHOD_20 ( VAR_241 , ""+-"" ) ; TYPE_19 VAR_242 = METHOD_21 ( VAR_243 , VAR_244 ) ; METHOD_22 ( VAR_245 ) ; VAR_246 *= VAR_247 ; } } } else if ( VAR_248 == VAR_249 ) { VAR_250 = VAR_251 ; VAR_252 * VAR_253 ; if ( VAR_254 ) { VAR_255 -> VAR_256 = VAR_257 ; METHOD_23 ( VAR_258 -> VAR_259 , VAR_260 , VAR_261 - 1 ) ; VAR_262 -> VAR_263 [ VAR_264 - 1 ] = '\\0' ; return VAR_265 ; } VAR_266 -> VAR_267 = METHOD_24 ( VAR_268 , VAR_269 , & VAR_270 , & VAR_271 -> VAR_272 ) ; VAR_273 -> VAR_274 = VAR_275 ; if ( VAR_276 -> VAR_277 > 8 ) { VAR_278 -> VAR_279 = VAR_280 ; VAR_281 -> VAR_282 -= 9 ; } if ( VAR_283 -> VAR_284 & VAR_285 & VAR_286 ) { METHOD_25 ( VAR_287 , VAR_288 , & VAR_289 , VAR_290 , VAR_291 ) ; return VAR_292 ; } if ( VAR_293 -> VAR_294 == VAR_295 ) { VAR_296 -> VAR_297 = VAR_298 ; if ( VAR_299 -> VAR_300 && VAR_301 -> VAR_302 -> VAR_303 == 0 ) { return VAR_304 ; } VAR_305 -> VAR_306 = VAR_307 ; TYPE_20 * VAR_308 = VAR_309 -> VAR_310 ? ( TYPE_21 * ) ( VAR_311 -> VAR_312 -> VAR_313 ) : VAR_314 ; if ( VAR_315 && ( VAR_316 = METHOD_26 ( VAR_317 -> VAR_318 , VAR_319 ) ) ) { VAR_320 -> VAR_321 = VAR_322 ; } TYPE_22 * VAR_323 = METHOD_27 ( VAR_324 , '-' ) ; if ( VAR_325 ) { VAR_326 -> VAR_327 = - 1 ; VAR_328 = ++ VAR_329 ; } VAR_330 -> VAR_331 = METHOD_28 ( VAR_332 , VAR_333 ) ; } else if ( VAR_334 -> VAR_335 < VAR_336 ) { METHOD_29 ( VAR_337 -> VAR_338 , VAR_339 , VAR_340 - 1 ) ; VAR_341 -> VAR_342 [ VAR_343 - 1 ] = '\\0' ; } } else { VAR_344 -> VAR_345 = VAR_346 ; VAR_347 -> VAR_348 = 1 ; TYPE_23 * VAR_349 = METHOD_30 ( VAR_350 , '-' ) ; if ( VAR_351 ) { VAR_352 -> VAR_353 = - 1 ; VAR_354 = ++ VAR_355 ; } VAR_356 -> VAR_357 = METHOD_31 ( VAR_358 , VAR_359 ) ; } return VAR_360 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 , VAR_5 = 0 ; TYPE_6 VAR_6 ; TYPE_7 VAR_7 = 1 ; TYPE_8 VAR_8 = VAR_9 ; TYPE_9 VAR_10 = 0 ; VAR_11 -> VAR_12 = 0 ; while ( VAR_13 ) { VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( VAR_17 , & VAR_18 , & VAR_19 ) ; if ( ! METHOD_2 ( VAR_20 + VAR_21 , ""ptr"" , 3 ) ) { continue ; } else if ( ! METHOD_3 ( VAR_22 + VAR_23 , ""byte"" , 4 ) ) { VAR_24 -> VAR_25 |= VAR_26 | VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = VAR_32 ; } else if ( ! METHOD_4 ( VAR_33 + VAR_34 , ""word"" , 4 ) ) { VAR_35 -> VAR_36 |= VAR_37 | VAR_38 ; VAR_39 -> VAR_40 = VAR_41 ; VAR_42 = VAR_43 ; } else if ( ! METHOD_5 ( VAR_44 + VAR_45 , ""dword"" , 5 ) ) { VAR_46 -> VAR_47 |= VAR_48 | VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 = VAR_54 ; } else if ( ! METHOD_6 ( VAR_55 + VAR_56 , ""qword"" , 5 ) ) { VAR_57 -> VAR_58 |= VAR_59 | VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 = VAR_65 ; } else if ( ! METHOD_7 ( VAR_66 + VAR_67 , ""oword"" , 5 ) ) { VAR_68 -> VAR_69 |= VAR_70 | VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } else if ( ! METHOD_8 ( VAR_77 + VAR_78 , ""tbyte"" , 5 ) ) { VAR_79 -> VAR_80 |= VAR_81 | VAR_82 ; VAR_83 -> VAR_84 = VAR_85 ; VAR_86 = VAR_87 ; } else { VAR_88 = 0 ; } } if ( VAR_89 [ VAR_90 ] == '[' ) { if ( ! VAR_91 -> VAR_92 ) { VAR_93 -> VAR_94 = VAR_95 ; } VAR_96 -> VAR_97 = VAR_98 -> VAR_99 [ 0 ] = VAR_100 -> VAR_101 [ 1 ] = 0 ; TYPE_10 VAR_102 = 1 ; TYPE_11 VAR_103 = VAR_104 ; TYPE_12 VAR_105 = VAR_106 ; while ( VAR_107 [ VAR_108 ] != ']' ) { if ( VAR_109 > VAR_110 ) { break ; } VAR_111 = VAR_112 ; if ( ! VAR_113 [ VAR_114 ] ) { break ; } VAR_115 = METHOD_9 ( VAR_116 , & VAR_117 , & VAR_118 ) ; if ( VAR_119 == VAR_120 ) { if ( VAR_121 [ VAR_122 ] == '+' || VAR_123 [ VAR_124 ] == '-' || VAR_125 [ VAR_126 ] == ']' ) { if ( VAR_127 != VAR_128 ) { VAR_129 -> VAR_130 [ VAR_131 ] = VAR_132 ; VAR_133 -> VAR_134 [ VAR_135 ] = VAR_136 ; ++ VAR_137 ; } else { VAR_138 -> VAR_139 += VAR_140 ; VAR_141 -> VAR_142 [ VAR_143 ] = VAR_144 ; } VAR_145 = 1 ; VAR_146 = VAR_147 ; } else if ( VAR_148 [ VAR_149 ] == '*' ) { } } else if ( VAR_150 == VAR_151 ) { TYPE_13 VAR_152 = 0 ; if ( VAR_153 != VAR_154 ) { VAR_155 -> VAR_156 = 0 ; } VAR_157 = VAR_158 ; VAR_159 = METHOD_10 ( VAR_160 , VAR_161 , & VAR_162 , & VAR_163 ) ; if ( VAR_164 ) { VAR_165 -> VAR_166 = VAR_167 ; if ( VAR_168 > 8 ) { VAR_169 -> VAR_170 = VAR_171 ; VAR_172 -> VAR_173 = VAR_174 - 9 ; } VAR_175 = VAR_176 ; } else if ( VAR_177 > 8 ) { VAR_178 -> VAR_179 = VAR_180 - 9 ; } if ( VAR_181 & VAR_182 & VAR_183 ) { VAR_184 -> VAR_185 = VAR_186 ; VAR_187 -> VAR_188 = VAR_189 ; METHOD_11 ( VAR_190 , VAR_191 , & VAR_192 , VAR_193 , VAR_194 ) ; return VAR_195 ; } if ( ! VAR_196 ) { VAR_197 -> VAR_198 |= VAR_199 ; } VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 ; if ( ! ( VAR_206 & VAR_207 ) ) { VAR_208 -> VAR_209 = 0 ; } } else { TYPE_14 * VAR_210 = METHOD_12 ( VAR_211 , '+' ) ; VAR_212 -> VAR_213 = 1 ; if ( ! VAR_214 ) { VAR_215 = METHOD_13 ( VAR_216 , '-' ) ; if ( VAR_217 ) { VAR_218 -> VAR_219 = - 1 ; } } TYPE_15 * VAR_220 = METHOD_14 ( VAR_221 , '+' ) ; TYPE_16 * VAR_222 = METHOD_15 ( VAR_223 , '-' ) ; TYPE_17 * VAR_224 = METHOD_16 ( VAR_225 , ']' ) ; if ( VAR_226 && VAR_227 && VAR_228 < VAR_229 && VAR_230 < VAR_231 ) { VAR_232 -> VAR_233 = - 1 ; } TYPE_18 * VAR_234 ; VAR_235 = METHOD_17 ( METHOD_18 ( VAR_236 + VAR_237 ) + 1 ) ; METHOD_19 ( VAR_238 , VAR_239 + VAR_240 ) ; METHOD_20 ( VAR_241 , ""+-"" ) ; TYPE_19 VAR_242 = METHOD_21 ( VAR_243 , VAR_244 ) ; METHOD_22 ( VAR_245 ) ; VAR_246 *= VAR_247 ; } } } else if ( VAR_248 == VAR_249 ) { VAR_250 = VAR_251 ; VAR_252 * VAR_253 ; if ( VAR_254 ) { VAR_255 -> VAR_256 = VAR_257 ; METHOD_23 ( VAR_258 -> VAR_259 , VAR_260 , VAR_261 - 1 ) ; VAR_262 -> VAR_263 [ VAR_264 - 1 ] = '\\0' ; return VAR_265 ; } VAR_266 -> VAR_267 = METHOD_24 ( VAR_268 , VAR_269 , & VAR_270 , & VAR_271 -> VAR_272 ) ; VAR_273 -> VAR_274 = VAR_275 ; if ( VAR_276 -> VAR_277 > 8 ) { VAR_278 -> VAR_279 = VAR_280 ; VAR_281 -> VAR_282 -= 9 ; } if ( VAR_283 -> VAR_284 & VAR_285 & VAR_286 ) { METHOD_25 ( VAR_287 , VAR_288 , & VAR_289 , VAR_290 , VAR_291 ) ; return VAR_292 ; } if ( VAR_293 -> VAR_294 == VAR_295 ) { VAR_296 -> VAR_297 = VAR_298 ; if ( VAR_299 -> VAR_300 && VAR_301 -> VAR_302 -> VAR_303 == 0 ) { return VAR_304 ; } VAR_305 -> VAR_306 = VAR_307 ; TYPE_20 * VAR_308 = VAR_309 -> VAR_310 ? ( TYPE_21 * ) ( VAR_311 -> VAR_312 -> VAR_313 ) : VAR_314 ; if ( VAR_315 && ( VAR_316 = METHOD_26 ( VAR_317 -> VAR_318 , VAR_319 ) ) ) { VAR_320 -> VAR_321 = VAR_322 ; } TYPE_22 * VAR_323 = METHOD_27 ( VAR_324 , '-' ) ; if ( VAR_325 ) { VAR_326 -> VAR_327 = - 1 ; VAR_328 = ++ VAR_329 ; } VAR_330 -> VAR_331 = METHOD_28 ( VAR_332 , VAR_333 ) ; } else if ( VAR_334 -> VAR_335 < VAR_336 ) { if ( VAR_291 < 2 ) { METHOD_29 ( VAR_337 -> VAR_338 , VAR_339 , VAR_340 - 1 ) ; VAR_341 -> VAR_342 [ VAR_343 - 1 ] = '\\0' ; } } else { VAR_344 -> VAR_345 = VAR_346 ; VAR_347 -> VAR_348 = 1 ; TYPE_23 * VAR_349 = METHOD_30 ( VAR_350 , '-' ) ; if ( VAR_351 ) { VAR_352 -> VAR_353 = - 1 ; VAR_354 = ++ VAR_355 ; } VAR_356 -> VAR_357 = METHOD_31 ( VAR_358 , VAR_359 ) ; } return VAR_360 ; }",607
608,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( struct STRUCT_OR_UNION_3 ) , VAR_8 ) ; if ( ! VAR_9 ) return - VAR_10 ; METHOD_2 ( & VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_3 ( VAR_14 , VAR_15 , 0 ) ; if ( ! VAR_16 ) { METHOD_4 ( & VAR_17 -> VAR_18 , ""Failedtogetgpioioresource.\\n"" ) ; return - VAR_19 ; } VAR_20 -> VAR_21 = METHOD_5 ( & VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , METHOD_6 ( VAR_26 ) ) ; if ( ! VAR_27 -> VAR_28 ) return - VAR_29 ; VAR_30 = METHOD_7 ( VAR_31 , 0 ) ; if ( VAR_32 < 0 ) { METHOD_8 ( & VAR_33 -> VAR_34 , ""FailedtogetgpioIRQ.\\n"" ) ; return - VAR_35 ; } VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 = VAR_42 ; VAR_43 -> VAR_44 . VAR_45 = VAR_46 ; VAR_47 -> VAR_48 . VAR_49 = VAR_50 ; VAR_51 -> VAR_52 . VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 = VAR_58 ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 ; VAR_63 -> VAR_64 . VAR_65 = 0 ; VAR_66 -> VAR_67 . VAR_68 = VAR_69 -> VAR_70 ; VAR_71 -> VAR_72 . VAR_73 = VAR_74 ; VAR_75 -> VAR_76 . VAR_77 = & VAR_78 -> VAR_79 ; VAR_80 -> VAR_81 . VAR_82 = VAR_83 ; if d ( VAR_84 ) VAR_85 -> VAR_86 . VAR_87 = VAR_88 -> VAR_89 . VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = METHOD_9 ( VAR_96 ) ; VAR_97 . VAR_98 = METHOD_10 ( & VAR_99 -> VAR_100 ) ;  VAR_101 -> VAR_102 = METHOD_11 ( & VAR_103 ,   & VAR_104 -> VAR_105 , VAR_106 ) ;  if ( METHOD_12 ( VAR_107 -> VAR_108 ) ) { METHOD_13 ( & VAR_109 -> VAR_110 , ""Couldn\'tregisterpinctrldriver\\n"" ) ; return METHOD_14 ( VAR_111 -> VAR_112 ) ; } VAR_113 = METHOD_15 ( & VAR_114 -> VAR_115 , VAR_116 ) ; if ( VAR_117 )  goto VAR_118 ;  VAR_119 = METHOD_16 ( & VAR_120 -> VAR_121 , METHOD_17 ( & VAR_122 -> VAR_123 ) , 0 , 0 , VAR_124 ) ; if ( VAR_125 ) { METHOD_18 ( & VAR_126 -> VAR_127 , ""Failedtoaddpinrange\\n"" ) ; goto VAR_128 ; } VAR_129 = METHOD_19 ( & VAR_130 -> VAR_131 , & VAR_132 , 0 , VAR_133 , VAR_134 ) ; if ( VAR_135 ) { METHOD_20 ( & VAR_136 -> VAR_137 , ""couldnotaddirqchip\\n"" ) ; VAR_138 = - VAR_139 ; goto VAR_140 ; } METHOD_21 ( & VAR_141 -> VAR_142 , & VAR_143 , VAR_144 , VAR_145 ) ; METHOD_22 ( VAR_146 , VAR_147 ) ; METHOD_23 ( & VAR_148 -> VAR_149 , ""amdgpiodriverloaded\\n"" ) ; return VAR_150 ; VAR_151 : METHOD_24 ( & VAR_152 -> VAR_153 ) ;  VAR_154 :  METHOD_25 ( VAR_155 -> VAR_156 ) ; return VAR_157 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = 0 ; TYPE_2 VAR_2 ; struct STRUCT_OR_UNION_1 * VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 ; VAR_5 = METHOD_1 ( & VAR_6 -> VAR_7 , sizeof ( struct STRUCT_OR_UNION_3 ) , VAR_8 ) ; if ( ! VAR_9 ) return - VAR_10 ; METHOD_2 ( & VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_3 ( VAR_14 , VAR_15 , 0 ) ; if ( ! VAR_16 ) { METHOD_4 ( & VAR_17 -> VAR_18 , ""Failedtogetgpioioresource.\\n"" ) ; return - VAR_19 ; } VAR_20 -> VAR_21 = METHOD_5 ( & VAR_22 -> VAR_23 , VAR_24 -> VAR_25 , METHOD_6 ( VAR_26 ) ) ; if ( ! VAR_27 -> VAR_28 ) return - VAR_29 ; VAR_30 = METHOD_7 ( VAR_31 , 0 ) ; if ( VAR_32 < 0 ) { METHOD_8 ( & VAR_33 -> VAR_34 , ""FailedtogetgpioIRQ.\\n"" ) ; return - VAR_35 ; } VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 . VAR_41 = VAR_42 ; VAR_43 -> VAR_44 . VAR_45 = VAR_46 ; VAR_47 -> VAR_48 . VAR_49 = VAR_50 ; VAR_51 -> VAR_52 . VAR_53 = VAR_54 ; VAR_55 -> VAR_56 . VAR_57 = VAR_58 ; VAR_59 -> VAR_60 . VAR_61 = VAR_62 ; VAR_63 -> VAR_64 . VAR_65 = 0 ; VAR_66 -> VAR_67 . VAR_68 = VAR_69 -> VAR_70 ; VAR_71 -> VAR_72 . VAR_73 = VAR_74 ; VAR_75 -> VAR_76 . VAR_77 = & VAR_78 -> VAR_79 ; VAR_80 -> VAR_81 . VAR_82 = VAR_83 ; if d ( VAR_84 ) VAR_85 -> VAR_86 . VAR_87 = VAR_88 -> VAR_89 . VAR_90 ; VAR_91 -> VAR_92 = VAR_93 ; VAR_94 -> VAR_95 = METHOD_9 ( VAR_96 ) ; VAR_97 . VAR_98 = METHOD_10 ( & VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = METHOD_11 ( & VAR_103 , & VAR_104 -> VAR_105 , VAR_106 ) ; if ( METHOD_12 ( VAR_107 -> VAR_108 ) ) { METHOD_13 ( & VAR_109 -> VAR_110 , ""Couldn\'tregisterpinctrldriver\\n"" ) ; return METHOD_14 ( VAR_111 -> VAR_112 ) ; } VAR_113 = METHOD_15 ( & VAR_114 -> VAR_115 , VAR_116 ) ; if ( VAR_117 ) goto VAR_118 ; VAR_119 = METHOD_16 ( & VAR_120 -> VAR_121 , METHOD_17 ( & VAR_122 -> VAR_123 ) , 0 , 0 , VAR_124 ) ; if ( VAR_125 ) { METHOD_18 ( & VAR_126 -> VAR_127 , ""Failedtoaddpinrange\\n"" ) ; goto VAR_128 ; } VAR_129 = METHOD_19 ( & VAR_130 -> VAR_131 , & VAR_132 , 0 , VAR_133 , VAR_134 ) ; if ( VAR_135 ) { METHOD_20 ( & VAR_136 -> VAR_137 , ""couldnotaddirqchip\\n"" ) ; VAR_138 = - VAR_139 ; goto VAR_140 ; } METHOD_21 ( & VAR_141 -> VAR_142 , & VAR_143 , VAR_144 , VAR_145 ) ; METHOD_22 ( VAR_146 , VAR_147 ) ; METHOD_23 ( & VAR_148 -> VAR_149 , ""amdgpiodriverloaded\\n"" ) ; return VAR_150 ; VAR_151 : METHOD_24 ( & VAR_152 -> VAR_153 ) ; return VAR_157 ; }",608
609,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 -> VAR_3 = METHOD_1 ( 16 , VAR_4 ) ; VAR_5 -> VAR_6 = METHOD_2 ( 16 , VAR_7 ) ;  VAR_8 -> VAR_9 = METHOD_3 ( 3 , VAR_10 ) ;  VAR_11 -> VAR_12 = METHOD_4 ( 1 , VAR_13 ) ; VAR_14 -> VAR_15 = METHOD_5 ( 1 , VAR_16 ) ; VAR_17 -> VAR_18 = METHOD_6 ( 2 , VAR_19 ) + 1 ; VAR_20 -> VAR_21 = METHOD_7 ( 2 , VAR_22 ) ; VAR_23 -> VAR_24 = METHOD_8 ( 1 , VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_9 ( 1 , VAR_28 ) ; VAR_29 -> VAR_30 = METHOD_10 ( 1 , VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_11 ( 1 , VAR_34 ) ; VAR_35 -> VAR_36 = METHOD_12 ( 2 , VAR_37 ) ; VAR_38 -> VAR_39 = METHOD_13 ( 1 , VAR_40 ) ; if ( VAR_41 -> VAR_42 ) { VAR_43 -> VAR_44 = METHOD_14 ( 6 , VAR_45 ) - 32 ; } VAR_46 -> VAR_47 = METHOD_15 ( 2 , VAR_48 ) ; VAR_49 -> VAR_50 = ( VAR_51 -> VAR_52 & 1 ) * 20 + ( VAR_53 -> VAR_54 & 2 ) * 22 + ( ( VAR_55 -> VAR_56 & 3 ) == 3 ) * 2 + 400 ; VAR_57 -> VAR_58 = METHOD_16 ( 4 , VAR_59 ) ; if ( VAR_60 -> VAR_61 != 400 ) { VAR_62 -> VAR_63 = METHOD_17 ( 1 , VAR_64 ) ; VAR_65 -> VAR_66 = METHOD_18 ( 1 , VAR_67 ) ; } VAR_68 -> VAR_69 = METHOD_19 ( 1 , VAR_70 ) ? 10 : 8 ; if ( VAR_71 -> VAR_72 == 10 ) VAR_73 -> VAR_74 += 2 * METHOD_20 ( 1 , VAR_75 ) ; VAR_76 -> VAR_77 = METHOD_21 ( 1 , VAR_78 ) ? 10 : 8 ; if ( VAR_79 -> VAR_80 == 10 ) VAR_81 -> VAR_82 += 2 * METHOD_22 ( 1 , VAR_83 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 -> VAR_3 = METHOD_1 ( 16 , VAR_4 ) ; VAR_5 -> VAR_6 = METHOD_2 ( 16 , VAR_7 ) ; VAR_8 -> VAR_9 = METHOD_3 ( 3 , VAR_10 ) ; VAR_11 -> VAR_12 = METHOD_4 ( 1 , VAR_13 ) ; VAR_14 -> VAR_15 = METHOD_5 ( 1 , VAR_16 ) ; VAR_17 -> VAR_18 = METHOD_6 ( 2 , VAR_19 ) + 1 ; VAR_20 -> VAR_21 = METHOD_7 ( 2 , VAR_22 ) ; VAR_23 -> VAR_24 = METHOD_8 ( 1 , VAR_25 ) ; VAR_26 -> VAR_27 = METHOD_9 ( 1 , VAR_28 ) ; VAR_29 -> VAR_30 = METHOD_10 ( 1 , VAR_31 ) ; VAR_32 -> VAR_33 = METHOD_11 ( 1 , VAR_34 ) ; VAR_35 -> VAR_36 = METHOD_12 ( 2 , VAR_37 ) ; VAR_38 -> VAR_39 = METHOD_13 ( 1 , VAR_40 ) ; if ( VAR_41 -> VAR_42 ) { VAR_43 -> VAR_44 = METHOD_14 ( 6 , VAR_45 ) - 32 ; } VAR_46 -> VAR_47 = METHOD_15 ( 2 , VAR_48 ) ; VAR_49 -> VAR_50 = ( VAR_51 -> VAR_52 & 1 ) * 20 + ( VAR_53 -> VAR_54 & 2 ) * 22 + ( ( VAR_55 -> VAR_56 & 3 ) == 3 ) * 2 + 400 ; VAR_57 -> VAR_58 = METHOD_16 ( 4 , VAR_59 ) ; if ( VAR_60 -> VAR_61 != 400 ) { VAR_62 -> VAR_63 = METHOD_17 ( 1 , VAR_64 ) ; VAR_65 -> VAR_66 = METHOD_18 ( 1 , VAR_67 ) ; } VAR_68 -> VAR_69 = METHOD_19 ( 1 , VAR_70 ) ? 10 : 8 ; if ( VAR_71 -> VAR_72 == 10 ) VAR_73 -> VAR_74 += 2 * METHOD_20 ( 1 , VAR_75 ) ; VAR_76 -> VAR_77 = METHOD_21 ( 1 , VAR_78 ) ? 10 : 8 ; if ( VAR_79 -> VAR_80 == 10 ) VAR_81 -> VAR_82 += 2 * METHOD_22 ( 1 , VAR_83 ) ; }",609
610,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_3 * , VAR_8 , VAR_9 -> msg_name ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ;  TYPE_8 VAR_16 = METHOD_2 ( VAR_17 ) ;  TYPE_9 VAR_18 ; if ( VAR_19 & VAR_20 ) return METHOD_3 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ; VAR_25 : VAR_26 = METHOD_4 ( VAR_27 , VAR_28 | ( VAR_29 ? VAR_30 : 0 ) , & VAR_31 , & VAR_32 , & VAR_33 ) ; if ( ! VAR_34 ) goto VAR_35 ; VAR_36 = VAR_37 -> VAR_38 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_39 = VAR_40 ; if ( VAR_41 > VAR_42 ) VAR_43 = VAR_44 ; else if ( VAR_45 < VAR_46 ) VAR_47 -> VAR_48 |= VAR_49 ; if ( VAR_50 < VAR_51 || METHOD_5 ( VAR_52 ) -> VAR_53 ) {  if ( METHOD_6 ( VAR_54 ) )  goto VAR_55 ; }  if ( METHOD_7 ( VAR_56 ) )  VAR_57 = METHOD_8 ( VAR_58 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_59 , VAR_60 ) ; else { VAR_61 = METHOD_9 ( VAR_62 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_63 ) ; if ( VAR_64 == - VAR_65 ) goto VAR_66 ; } if ( METHOD_10 ( VAR_67 ) ) { METHOD_11 ( VAR_68 , METHOD_12 ) ; if ( ! VAR_69 ) { METHOD_13 ( & VAR_70 -> VAR_71 ) ; METHOD_14 ( METHOD_15 ( VAR_72 ) , VAR_73 , VAR_74 ) ; } goto VAR_75 ; } if ( ! VAR_76 ) METHOD_16 ( METHOD_17 ( VAR_77 ) , VAR_78 , VAR_79 ) ; METHOD_18 ( VAR_80 , VAR_81 , VAR_82 ) ; if ( VAR_83 ) { VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = METHOD_19 ( VAR_89 ) -> VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = METHOD_20 ( VAR_94 ) -> VAR_95 ; METHOD_21 ( VAR_96 -> VAR_97 , 0 , sizeof ( VAR_98 -> VAR_99 ) ) ; * VAR_100 = sizeof ( * VAR_101 ) ; } if ( VAR_102 -> VAR_103 ) METHOD_22 ( VAR_104 , VAR_105 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; VAR_106 = VAR_107 ; if ( VAR_108 & VAR_109 ) VAR_110 = VAR_111 ; VAR_112 : METHOD_23 ( VAR_113 , VAR_114 ) ; VAR_115 : return VAR_116 ; VAR_117 : VAR_118 = METHOD_24 ( VAR_119 ) ; if ( ! METHOD_25 ( VAR_120 , VAR_121 , VAR_122 ) ) { METHOD_26 ( METHOD_27 ( VAR_123 ) , VAR_124 , VAR_125 ) ; METHOD_28 ( METHOD_29 ( VAR_126 ) , VAR_127 , VAR_128 ) ; } METHOD_30 ( VAR_129 , VAR_130 ) ; METHOD_31 ( ) ; VAR_131 -> VAR_132 &= ~ VAR_133 ; goto VAR_134 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_3 * , VAR_8 , VAR_9 -> msg_name ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 = METHOD_2 ( VAR_17 ) ; TYPE_9 VAR_18 ; if ( VAR_19 & VAR_20 ) return METHOD_3 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 ) ; VAR_25 : VAR_26 = METHOD_4 ( VAR_27 , VAR_28 | ( VAR_29 ? VAR_30 : 0 ) , & VAR_31 , & VAR_32 , & VAR_33 ) ; if ( ! VAR_34 ) goto VAR_35 ; VAR_36 = VAR_37 -> VAR_38 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_39 = VAR_40 ; if ( VAR_41 > VAR_42 ) VAR_43 = VAR_44 ; else if ( VAR_45 < VAR_46 ) VAR_47 -> VAR_48 |= VAR_49 ; if ( VAR_50 < VAR_51 || METHOD_5 ( VAR_52 ) -> VAR_53 ) { if ( METHOD_6 ( VAR_54 ) ) goto VAR_55 ; } if ( VAR_135 || METHOD_7 ( VAR_56 ) ) VAR_57 = METHOD_8 ( VAR_58 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_59 , VAR_60 ) ; else { VAR_61 = METHOD_9 ( VAR_62 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_63 ) ; if ( VAR_64 == - VAR_65 ) goto VAR_66 ; } if ( METHOD_10 ( VAR_67 ) ) { METHOD_11 ( VAR_68 , METHOD_12 ) ; if ( ! VAR_69 ) { METHOD_13 ( & VAR_70 -> VAR_71 ) ; METHOD_14 ( METHOD_15 ( VAR_72 ) , VAR_73 , VAR_74 ) ; } goto VAR_75 ; } if ( ! VAR_76 ) METHOD_16 ( METHOD_17 ( VAR_77 ) , VAR_78 , VAR_79 ) ; METHOD_18 ( VAR_80 , VAR_81 , VAR_82 ) ; if ( VAR_83 ) { VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = METHOD_19 ( VAR_89 ) -> VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = METHOD_20 ( VAR_94 ) -> VAR_95 ; METHOD_21 ( VAR_96 -> VAR_97 , 0 , sizeof ( VAR_98 -> VAR_99 ) ) ; * VAR_100 = sizeof ( * VAR_101 ) ; } if ( VAR_102 -> VAR_103 ) METHOD_22 ( VAR_104 , VAR_105 , sizeof ( struct STRUCT_OR_UNION_8 ) ) ; VAR_106 = VAR_107 ; if ( VAR_108 & VAR_109 ) VAR_110 = VAR_111 ; VAR_112 : METHOD_23 ( VAR_113 , VAR_114 ) ; VAR_115 : return VAR_116 ; VAR_117 : VAR_118 = METHOD_24 ( VAR_119 ) ; if ( ! METHOD_25 ( VAR_120 , VAR_121 , VAR_122 ) ) { METHOD_26 ( METHOD_27 ( VAR_123 ) , VAR_124 , VAR_125 ) ; METHOD_28 ( METHOD_29 ( VAR_126 ) , VAR_127 , VAR_128 ) ; } METHOD_30 ( VAR_129 , VAR_130 ) ; METHOD_31 ( ) ; VAR_131 -> VAR_132 &= ~ VAR_133 ; goto VAR_134 ; }",610
611,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; if ( VAR_5 < 2 ) return 0 ; METHOD_1 ( * VAR_6 , 2 ) ; VAR_7 = VAR_8 [ 1 ] ; VAR_9 = VAR_10 [ 0 ] ; if ( VAR_11 < VAR_12 ) return 0 ; if ( VAR_13 < 2 ) { METHOD_2 ( ( VAR_14 , ""\\n\\t%sOption(0x%02x),length%u(lengthbogus,shouldbe>=2)"" , METHOD_3 ( VAR_15 , ""Unknown"" , VAR_16 ) , VAR_17 , VAR_18 ) ) ; return 0 ; } METHOD_4 ( ( VAR_19 , ""\\n\\t%sOption(0x%02x),length%u"" , METHOD_5 ( VAR_20 , ""Unknown"" , VAR_21 ) , VAR_22 , VAR_23 ) ) ; switch ( VAR_24 ) { case VAR_25 : if ( VAR_26 != 6 ) { METHOD_6 ( ( VAR_27 , ""(lengthbogus,shouldbe=6)"" ) ) ; return VAR_28 ; }  METHOD_7 ( * ( VAR_29 + 2 ) , 4 ) ;  METHOD_8 ( ( VAR_30 , "":Magic-Num0x%08x"" , METHOD_9 ( VAR_31 + 2 ) ) ) ; break ; default : if ( VAR_32 -> VAR_33 < 2 ) METHOD_10 ( VAR_34 , & VAR_35 [ 2 ] , ""\\n\\t"" , VAR_36 - 2 ) ; break ; } if ( VAR_37 -> VAR_38 > 1 ) METHOD_11 ( VAR_39 , & VAR_40 [ 2 ] , ""\\n\\t"" , VAR_41 - 2 ) ; return VAR_42 ; VAR_43 : METHOD_12 ( ( VAR_44 , ""[|bacp]"" ) ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 , VAR_4 ; if ( VAR_5 < 2 ) return 0 ; METHOD_1 ( * VAR_6 , 2 ) ; VAR_7 = VAR_8 [ 1 ] ; VAR_9 = VAR_10 [ 0 ] ; if ( VAR_11 < VAR_12 ) return 0 ; if ( VAR_13 < 2 ) { METHOD_2 ( ( VAR_14 , ""\\n\\t%sOption(0x%02x),length%u(lengthbogus,shouldbe>=2)"" , METHOD_3 ( VAR_15 , ""Unknown"" , VAR_16 ) , VAR_17 , VAR_18 ) ) ; return 0 ; } METHOD_4 ( ( VAR_19 , ""\\n\\t%sOption(0x%02x),length%u"" , METHOD_5 ( VAR_20 , ""Unknown"" , VAR_21 ) , VAR_22 , VAR_23 ) ) ; switch ( VAR_24 ) { case VAR_25 : if ( VAR_26 != 6 ) { METHOD_6 ( ( VAR_27 , ""(lengthbogus,shouldbe=6)"" ) ) ; return VAR_28 ; } METHOD_7 ( * ( VAR_29 + 2 ) , 4 ) ; METHOD_8 ( ( VAR_30 , "":Magic-Num0x%08x"" , METHOD_9 ( VAR_31 + 2 ) ) ) ; break ; default : if ( VAR_32 -> VAR_33 < 2 ) METHOD_10 ( VAR_34 , & VAR_35 [ 2 ] , ""\\n\\t"" , VAR_36 - 2 ) ; break ; } if ( VAR_37 -> VAR_38 > 1 ) METHOD_11 ( VAR_39 , & VAR_40 [ 2 ] , ""\\n\\t"" , VAR_41 - 2 ) ; return VAR_42 ; VAR_43 : METHOD_12 ( ( VAR_44 , ""[|bacp]"" ) ) ; return 0 ; }",611
612,static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; VAR_4 -> VAR_5 = 0 ;  if VAR_6  if ( ! VAR_7 -> VAR_8 ) VAR_9 -> VAR_10 = 0 ; VAR_11 -> VAR_12 = 1 ; },static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; VAR_4 -> VAR_5 = 0 ; if VAR_6 if ( ! VAR_7 -> VAR_8 ) VAR_9 -> VAR_10 = 0 ; VAR_11 -> VAR_12 = 1 ; },612
613,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_1 VAR_3 [ ] , TYPE_3 VAR_4 ) { const struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_4 VAR_8 = 0 ; TYPE_5 VAR_9 = 0 ; METHOD_1 ( ) ; VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 ) ; while ( ( TYPE_6 ) VAR_13 > VAR_14 ) { TYPE_7 VAR_15 ; if ( METHOD_3 ( VAR_16 >= VAR_17 ) ) { VAR_18 = - VAR_19 ; break ; } VAR_20 = METHOD_4 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( METHOD_5 ( ! VAR_24 ) ) { VAR_25 = - VAR_26 ; break ; } VAR_27 = VAR_28 + VAR_29 ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 + VAR_34 -> VAR_35 ;  VAR_36 -> VAR_37 = METHOD_6 ( ( TYPE_8 ) VAR_38 , VAR_39 ) ;  VAR_40 -> VAR_41 = ( TYPE_9 TYPE_10 * ) ( unsigned TYPE_11 ) ( VAR_42 -> VAR_43 + VAR_44 - VAR_45 -> VAR_46 ) ; VAR_47 += VAR_48 ; VAR_49 += VAR_50 ; ++ VAR_51 ; } METHOD_7 ( ) ; return VAR_52 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , struct STRUCT_OR_UNION_1 VAR_3 [ ] , TYPE_3 VAR_4 ) { const struct STRUCT_OR_UNION_2 * VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 ; TYPE_4 VAR_8 = 0 ; TYPE_5 VAR_9 = 0 ; METHOD_1 ( ) ; VAR_10 = METHOD_2 ( VAR_11 -> VAR_12 ) ; while ( ( TYPE_6 ) VAR_13 > VAR_14 ) { TYPE_7 VAR_15 ; if ( METHOD_3 ( VAR_16 >= VAR_17 ) ) { VAR_18 = - VAR_19 ; break ; } VAR_20 = METHOD_4 ( VAR_21 , VAR_22 , VAR_23 ) ; if ( METHOD_5 ( ! VAR_24 ) ) { VAR_25 = - VAR_26 ; break ; } VAR_27 = VAR_28 + VAR_29 ; VAR_30 = VAR_31 -> VAR_32 - VAR_33 + VAR_34 -> VAR_35 ; VAR_36 -> VAR_37 = METHOD_6 ( ( TYPE_8 ) VAR_38 - VAR_47 , VAR_39 ) ; VAR_40 -> VAR_41 = ( TYPE_9 TYPE_10 * ) ( unsigned TYPE_11 ) ( VAR_42 -> VAR_43 + VAR_44 - VAR_45 -> VAR_46 ) ; VAR_47 += VAR_48 ; VAR_49 += VAR_50 ; ++ VAR_51 ; } METHOD_7 ( ) ; return VAR_52 ; }",613
614,"static unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) {  struct STRUCT_OR_UNION_1 * VAR_2 ;  unsigned TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; if ( VAR_8 < 0 ) return 0 ; if ( METHOD_2 ( VAR_9 ) || METHOD_3 ( VAR_10 ) ) return - 1L ; if ( ! VAR_11 ) return 0 ;  VAR_12 = METHOD_4 ( VAR_13 ) ;   if ( ! VAR_14 )  return 0 ;  VAR_15 = METHOD_5 ( VAR_16 ) ;   if ( VAR_17 -> VAR_18 )  VAR_19 = ( VAR_20 << 12 ) + 0xfff ; return VAR_21 ; }","static unsigned TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 ; unsigned TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; if ( VAR_8 < 0 ) return 0 ; if ( ! VAR_11 ) return 0 ; VAR_12 = METHOD_4 ( VAR_13 ) ; if ( ! VAR_14 ) return 0 ; VAR_15 = METHOD_5 ( & VAR_16 ) ; if ( VAR_17 -> VAR_18 ) VAR_19 = ( VAR_20 << 12 ) + 0xfff ; return VAR_21 ; }",614
615,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 , * VAR_4 , * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; register TYPE_8 * VAR_10 ; register TYPE_9 VAR_11 ; TYPE_10 VAR_12 , VAR_13 ; TYPE_11 VAR_14 ; unsigned TYPE_12 VAR_15 [ VAR_16 ] ; METHOD_1 ( VAR_17 != ( const TYPE_13 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_14 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_15 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = VAR_37 ; VAR_38 = METHOD_8 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; if ( VAR_43 == VAR_44 ) return ( ( TYPE_16 * ) VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , 5 , VAR_48 ) ; if ( ( VAR_49 != 5 ) || ( METHOD_10 ( ( TYPE_17 * ) VAR_50 , ""SFW95"" , 5 ) != 0 ) ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 = METHOD_12 ( VAR_53 ) ; ( TYPE_18 ) METHOD_13 ( VAR_54 , ( TYPE_19 ) VAR_55 , ( TYPE_20 * ) VAR_56 ) ; METHOD_14 ( VAR_57 , ( TYPE_21 * ) VAR_58 , 0 ) ; VAR_59 = METHOD_15 ( VAR_60 -> VAR_61 ) ; for ( ; ; ) { for ( VAR_62 = METHOD_16 ( VAR_63 ) ; VAR_64 != VAR_65 ; VAR_66 = METHOD_17 ( VAR_67 ) ) { for ( VAR_68 = 0 ; VAR_69 < 17 ; VAR_70 ++ ) VAR_71 [ VAR_72 ] = VAR_73 [ VAR_74 + 1 ] ; VAR_75 [ 17 ] = ( unsigned TYPE_22 ) VAR_76 ; if ( METHOD_18 ( ( TYPE_23 * ) ( VAR_77 + 12 ) , ""SFW94A"" , 6 ) == 0 ) break ; } if ( VAR_78 == VAR_79 ) break ; if ( METHOD_19 ( ( TYPE_24 * ) ( VAR_80 + 12 ) , ""SFW94A"" , 6 ) != 0 ) { ( TYPE_25 ) METHOD_20 ( VAR_81 -> VAR_82 ) ; METHOD_21 ( VAR_83 , ""ImproperImageHeader"" ) ; } VAR_84 = ( TYPE_26 * ) VAR_85 ; if ( VAR_86 != - 1 ) VAR_87 = METHOD_22 ( VAR_88 , ""wb"" ) ; if ( ( VAR_89 == - 1 ) || ( VAR_90 == ( TYPE_27 * ) VAR_91 ) ) { ( TYPE_28 ) METHOD_23 ( VAR_92 -> VAR_93 ) ; METHOD_24 ( VAR_94 , VAR_95 , ""UnableToWriteFile"" , VAR_96 -> VAR_97 ) ; VAR_98 = METHOD_25 ( VAR_99 ) ; return ( ( TYPE_29 * ) VAR_100 ) ; } VAR_101 = METHOD_26 ( ""SFW94A"" , 1 , 6 , VAR_102 ) ; ( TYPE_30 ) VAR_103 ; VAR_104 = 65535UL * VAR_105 [ 2 ] + 256L * VAR_106 [ 1 ] + VAR_107 [ 0 ] ; for ( VAR_108 = 0 ; VAR_109 < ( TYPE_31 ) VAR_110 ; VAR_111 ++ ) { VAR_112 = METHOD_27 ( VAR_113 ) ; ( TYPE_32 ) METHOD_28 ( VAR_114 , VAR_115 ) ; } ( TYPE_33 ) METHOD_29 ( VAR_116 ) ; VAR_117 = METHOD_30 ( VAR_118 , VAR_119 ) ; if ( VAR_120 == ( TYPE_34 * ) VAR_121 ) break ; ( TYPE_35 ) METHOD_31 ( VAR_122 -> VAR_123 , VAR_124 , ""slide_%02ld.sfw"" , ( TYPE_36 ) VAR_125 -> VAR_126 ) ; if ( VAR_127 == ( TYPE_37 * ) VAR_128 ) VAR_129 = VAR_130 ; else { for ( VAR_131 = VAR_132 ; VAR_133 -> VAR_134 != ( TYPE_38 * ) VAR_135 ; VAR_136 = METHOD_32 ( VAR_137 ) ) ; VAR_138 -> VAR_139 = VAR_140 ; VAR_141 -> VAR_142 = VAR_143 -> VAR_144 + 1 ; VAR_145 -> VAR_146 = VAR_147 ; } if ( VAR_148 -> VAR_149 != 0 ) if ( VAR_150 -> VAR_151 >= ( VAR_152 -> VAR_153 + VAR_154 -> VAR_155 - 1 ) ) break ; VAR_156 = METHOD_33 ( VAR_157 , VAR_158 , METHOD_34 ( VAR_159 ) , METHOD_35 ( VAR_160 ) ) ; if ( VAR_161 == VAR_162 ) break ; } if ( VAR_163 != - 1 ) ( TYPE_39 ) METHOD_36 ( VAR_164 ) ; ( TYPE_40 ) METHOD_37 ( VAR_165 -> VAR_166 ) ; VAR_167 = METHOD_38 ( VAR_168 ) ;  ( TYPE_41 ) METHOD_39 ( VAR_169 ) ;  VAR_170 = METHOD_40 ( VAR_171 ) ; if ( METHOD_41 ( VAR_172 ) != VAR_173 ) { TYPE_42 * VAR_174 ; VAR_175 = METHOD_42 ( VAR_176 ) ; ( TYPE_43 ) METHOD_43 ( VAR_177 , METHOD_44 ( ) , VAR_178 , ""UnexpectedEndOfFile"" , ""`%s\':%s"" , VAR_179 -> VAR_180 , VAR_181 ) ; VAR_182 = METHOD_45 ( VAR_183 ) ; } ( TYPE_44 ) METHOD_46 ( VAR_184 ) ; return ( METHOD_47 ( VAR_185 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 ; TYPE_4 * VAR_3 , * VAR_4 , * VAR_5 ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; register TYPE_8 * VAR_10 ; register TYPE_9 VAR_11 ; TYPE_10 VAR_12 , VAR_13 ; TYPE_11 VAR_14 ; unsigned TYPE_12 VAR_15 [ VAR_16 ] ; METHOD_1 ( VAR_17 != ( const TYPE_13 * ) VAR_18 ) ; METHOD_2 ( VAR_19 -> VAR_20 == VAR_21 ) ; if ( VAR_22 -> VAR_23 != VAR_24 ) ( TYPE_14 ) METHOD_3 ( VAR_25 , METHOD_4 ( ) , ""%s"" , VAR_26 -> VAR_27 ) ; METHOD_5 ( VAR_28 != ( TYPE_15 * ) VAR_29 ) ; METHOD_6 ( VAR_30 -> VAR_31 == VAR_32 ) ; VAR_33 = METHOD_7 ( VAR_34 , VAR_35 ) ; VAR_36 = VAR_37 ; VAR_38 = METHOD_8 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; if ( VAR_43 == VAR_44 ) return ( ( TYPE_16 * ) VAR_45 ) ; VAR_46 = METHOD_9 ( VAR_47 , 5 , VAR_48 ) ; if ( ( VAR_49 != 5 ) || ( METHOD_10 ( ( TYPE_17 * ) VAR_50 , ""SFW95"" , 5 ) != 0 ) ) METHOD_11 ( VAR_51 , ""ImproperImageHeader"" ) ; VAR_52 = METHOD_12 ( VAR_53 ) ; ( TYPE_18 ) METHOD_13 ( VAR_54 , ( TYPE_19 ) VAR_55 , ( TYPE_20 * ) VAR_56 ) ; METHOD_14 ( VAR_57 , ( TYPE_21 * ) VAR_58 , 0 ) ; VAR_59 = METHOD_15 ( VAR_60 -> VAR_61 ) ; for ( ; ; ) { for ( VAR_62 = METHOD_16 ( VAR_63 ) ; VAR_64 != VAR_65 ; VAR_66 = METHOD_17 ( VAR_67 ) ) { for ( VAR_68 = 0 ; VAR_69 < 17 ; VAR_70 ++ ) VAR_71 [ VAR_72 ] = VAR_73 [ VAR_74 + 1 ] ; VAR_75 [ 17 ] = ( unsigned TYPE_22 ) VAR_76 ; if ( METHOD_18 ( ( TYPE_23 * ) ( VAR_77 + 12 ) , ""SFW94A"" , 6 ) == 0 ) break ; } if ( VAR_78 == VAR_79 ) break ; if ( METHOD_19 ( ( TYPE_24 * ) ( VAR_80 + 12 ) , ""SFW94A"" , 6 ) != 0 ) { ( TYPE_25 ) METHOD_20 ( VAR_81 -> VAR_82 ) ; METHOD_21 ( VAR_83 , ""ImproperImageHeader"" ) ; } VAR_84 = ( TYPE_26 * ) VAR_85 ; if ( VAR_86 != - 1 ) VAR_87 = METHOD_22 ( VAR_88 , ""wb"" ) ; if ( ( VAR_89 == - 1 ) || ( VAR_90 == ( TYPE_27 * ) VAR_91 ) ) { ( TYPE_28 ) METHOD_23 ( VAR_92 -> VAR_93 ) ; METHOD_24 ( VAR_94 , VAR_95 , ""UnableToWriteFile"" , VAR_96 -> VAR_97 ) ; VAR_98 = METHOD_25 ( VAR_99 ) ; return ( ( TYPE_29 * ) VAR_100 ) ; } VAR_101 = METHOD_26 ( ""SFW94A"" , 1 , 6 , VAR_102 ) ; ( TYPE_30 ) VAR_103 ; VAR_104 = 65535UL * VAR_105 [ 2 ] + 256L * VAR_106 [ 1 ] + VAR_107 [ 0 ] ; for ( VAR_108 = 0 ; VAR_109 < ( TYPE_31 ) VAR_110 ; VAR_111 ++ ) { VAR_112 = METHOD_27 ( VAR_113 ) ; ( TYPE_32 ) METHOD_28 ( VAR_114 , VAR_115 ) ; } ( TYPE_33 ) METHOD_29 ( VAR_116 ) ; VAR_117 = METHOD_30 ( VAR_118 , VAR_119 ) ; if ( VAR_120 == ( TYPE_34 * ) VAR_121 ) break ; ( TYPE_35 ) METHOD_31 ( VAR_122 -> VAR_123 , VAR_124 , ""slide_%02ld.sfw"" , ( TYPE_36 ) VAR_125 -> VAR_126 ) ; if ( VAR_127 == ( TYPE_37 * ) VAR_128 ) VAR_129 = VAR_130 ; else { for ( VAR_131 = VAR_132 ; VAR_133 -> VAR_134 != ( TYPE_38 * ) VAR_135 ; VAR_136 = METHOD_32 ( VAR_137 ) ) ; VAR_138 -> VAR_139 = VAR_140 ; VAR_141 -> VAR_142 = VAR_143 -> VAR_144 + 1 ; VAR_145 -> VAR_146 = VAR_147 ; } if ( VAR_148 -> VAR_149 != 0 ) if ( VAR_150 -> VAR_151 >= ( VAR_152 -> VAR_153 + VAR_154 -> VAR_155 - 1 ) ) break ; VAR_156 = METHOD_33 ( VAR_157 , VAR_158 , METHOD_34 ( VAR_159 ) , METHOD_35 ( VAR_160 ) ) ; if ( VAR_161 == VAR_162 ) break ; } if ( VAR_163 != - 1 ) ( TYPE_39 ) METHOD_36 ( VAR_164 ) ; ( TYPE_40 ) METHOD_37 ( VAR_165 -> VAR_166 ) ; VAR_167 = METHOD_38 ( VAR_168 ) ; if ( METHOD_41 ( VAR_172 ) != VAR_173 ) { TYPE_42 * VAR_174 ; VAR_175 = METHOD_42 ( VAR_176 ) ; ( TYPE_43 ) METHOD_43 ( VAR_177 , METHOD_44 ( ) , VAR_178 , ""UnexpectedEndOfFile"" , ""`%s\':%s"" , VAR_179 -> VAR_180 , VAR_181 ) ; VAR_182 = METHOD_45 ( VAR_183 ) ; } ( TYPE_44 ) METHOD_46 ( VAR_184 ) ; return ( METHOD_47 ( VAR_185 ) ) ; }",615
616,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , const TYPE_0 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = container_of ( VAR_4 , struct STRUCT_OR_UNION_4 , VAR_5 ) ; struct STRUCT_OR_UNION_5 * VAR_6 ;  unsigned TYPE_1 VAR_7 ;  TYPE_2 VAR_8 ; if ( METHOD_1 ( VAR_9 , ""tpgt_"" ) != VAR_10 ) return METHOD_2 ( - VAR_11 ) ;  if ( METHOD_3 ( VAR_12 + 5 , 10 , & VAR_13 ) || VAR_14 > VAR_15 )  return METHOD_4 ( - VAR_16 ) ; VAR_17 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_18 ) ; if ( ! VAR_19 ) { METHOD_6 ( ""Unabletoallocatestructvhost_scsi_tpg"" ) ; return METHOD_7 ( - VAR_20 ) ; } METHOD_8 ( & VAR_21 -> VAR_22 ) ; METHOD_9 ( & VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = METHOD_10 ( & VAR_32 -> VAR_33 , VAR_34 , & VAR_35 -> VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) { METHOD_11 ( VAR_40 ) ; return VAR_41 ; } METHOD_12 ( & VAR_42 ) ; METHOD_13 ( & VAR_43 -> VAR_44 , & VAR_45 ) ; METHOD_14 ( & VAR_46 ) ; return & VAR_47 -> VAR_48 ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 , const TYPE_0 * VAR_2 ) { struct STRUCT_OR_UNION_3 * VAR_3 = container_of ( VAR_4 , struct STRUCT_OR_UNION_4 , VAR_5 ) ; struct STRUCT_OR_UNION_5 * VAR_6 ; unsigned TYPE_1 VAR_7 ; TYPE_2 VAR_8 ; if ( METHOD_15 ( VAR_12 + 5 , 10 , & VAR_13 ) || VAR_14 > VAR_15 ) return METHOD_4 ( - VAR_16 ) ; VAR_17 = METHOD_5 ( sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_18 ) ; if ( ! VAR_19 ) { METHOD_6 ( ""Unabletoallocatestructvhost_scsi_tpg"" ) ; return METHOD_7 ( - VAR_20 ) ; } METHOD_8 ( & VAR_21 -> VAR_22 ) ; METHOD_9 ( & VAR_23 -> VAR_24 ) ; VAR_25 -> VAR_26 = VAR_27 ; VAR_28 -> VAR_29 = VAR_30 ; VAR_31 = METHOD_10 ( & VAR_32 -> VAR_33 , VAR_34 , & VAR_35 -> VAR_36 , VAR_37 , VAR_38 ) ; if ( VAR_39 < 0 ) { METHOD_11 ( VAR_40 ) ; return VAR_41 ; } METHOD_12 ( & VAR_42 ) ; METHOD_13 ( & VAR_43 -> VAR_44 , & VAR_45 ) ; METHOD_14 ( & VAR_46 ) ; return & VAR_47 -> VAR_48 ; }",616
617,"static  TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 )  { TYPE_3 VAR_2 ; struct STRUCT_OR_UNION_0 VAR_3 ;  VAR_4 = METHOD_1 ( VAR_5 ) ;  for ( ; METHOD_2 ( VAR_6 , & VAR_7 ) ; METHOD_3 ( & VAR_8 ) ) { switch ( VAR_9 . VAR_10 ) { case VAR_11 :  VAR_12 . VAR_13 = VAR_14 ;  break ; case VAR_15 :  VAR_16 . VAR_17 = VAR_18 ;  break ; case VAR_19 : VAR_20 . VAR_21 = VAR_22 ; break ; case VAR_23 : VAR_24 . VAR_25 = VAR_26 ; break ; case VAR_27 : VAR_28 . VAR_29 = VAR_30 ; break ; case VAR_31 : VAR_32 . VAR_33 = VAR_34 ; break ; case VAR_35 : VAR_36 . VAR_37 = VAR_38 ; break ; case VAR_39 : VAR_40 . VAR_41 = VAR_42 ; break ; case VAR_43 : case VAR_44 : case VAR_45 : case VAR_46 : case VAR_47 : case VAR_48 : default :  if ( ! ( VAR_49 . VAR_50 >= VAR_51 && VAR_52 . VAR_53 < VAR_54 ) )  continue ; break ; }  if ( ! METHOD_4 ( VAR_55 , VAR_56 . VAR_57 ) ) {  switch ( VAR_58 . VAR_59 ) { case VAR_60 : continue ; break ; case VAR_61 : case VAR_62 : case VAR_63 : case VAR_64 : case VAR_65 : if ( VAR_66 . VAR_67 != 1 ) continue ; break ; case VAR_68 : case VAR_69 : case VAR_70 : if ( VAR_71 . VAR_72 >= 16 * 1024 ) continue ; break ; case VAR_73 : continue ; break ; }  ( TYPE_4 ) METHOD_5 ( VAR_74 , & VAR_75 , VAR_76 ) ;  } } METHOD_6 ( VAR_77 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; struct STRUCT_OR_UNION_0 VAR_3 ; VAR_4 = METHOD_1 ( VAR_5 ) ; for ( ; METHOD_2 ( VAR_6 , & VAR_7 ) ; METHOD_3 ( & VAR_8 ) ) { switch ( VAR_9 . VAR_10 ) { case VAR_11 : VAR_12 . VAR_13 = VAR_14 ; break ; case VAR_15 : VAR_16 . VAR_17 = VAR_18 ; break ; case VAR_19 : VAR_20 . VAR_21 = VAR_22 ; break ; case VAR_23 : VAR_24 . VAR_25 = VAR_26 ; break ; case VAR_27 : VAR_28 . VAR_29 = VAR_30 ; break ; case VAR_31 : VAR_32 . VAR_33 = VAR_34 ; break ; case VAR_35 : VAR_36 . VAR_37 = VAR_38 ; break ; case VAR_39 : VAR_40 . VAR_41 = VAR_42 ; break ; case VAR_43 : case VAR_44 : case VAR_45 : case VAR_46 : case VAR_47 : case VAR_48 : default : if ( ! METHOD_5 ( VAR_74 , & VAR_75 , VAR_76 ) ) break ; METHOD_3 ( & VAR_75 ) ; } } METHOD_3 ( & VAR_75 ) ; if ( VAR_79 -> VAR_81 ) { METHOD_11 ( VAR_78 , ""invalidsignaturetag%s(%d)"" , METHOD_10 ( VAR_79 -> VAR_82 ) , VAR_79 -> VAR_82 ) ; } return VAR_79 -> VAR_81 ; }",617
618,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; if ( VAR_3 == VAR_4 ) return ( - 1 ) ; if ( VAR_5 ) { if ( ( VAR_6 -> VAR_7 != VAR_8 ) && ( VAR_9 -> VAR_10 -> VAR_11 ) ) METHOD_1 ( VAR_12 , ""%s(%d):"" , VAR_13 -> VAR_14 -> VAR_15 , VAR_16 -> VAR_17 -> VAR_18 ) ; METHOD_2 ( VAR_19 ,  ""Pushinginput%d:%.30s\\n"" , VAR_20 -> VAR_21 + 1 , VAR_22 -> VAR_23 ) ;  } VAR_24 = METHOD_3 ( VAR_25 , VAR_26 ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) return ( - 1 ) ; VAR_30 ; return ( VAR_31 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; if ( VAR_3 == VAR_4 ) return ( - 1 ) ; if ( VAR_5 ) { if ( ( VAR_6 -> VAR_7 != VAR_8 ) && ( VAR_9 -> VAR_10 -> VAR_11 ) ) METHOD_1 ( VAR_12 , ""%s(%d):"" , VAR_13 -> VAR_14 -> VAR_15 , VAR_16 -> VAR_17 -> VAR_18 ) ; METHOD_2 ( VAR_19 , ""Pushinginput%d:%.30s\\n"" , VAR_20 -> VAR_21 + 1 , VAR_22 -> VAR_23 ) ; } VAR_24 = METHOD_3 ( VAR_25 , VAR_26 ) ; if ( VAR_27 -> VAR_28 == VAR_29 ) return ( - 1 ) ; VAR_30 ; return ( VAR_31 ) ; }",618
619,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_1 = STRUCT_OR_UNION_3 -> VAR_2 ; struct STRUCT_OR_UNION_4 VAR_3 ; TYPE_2 VAR_4 = 0 , VAR_5 ;  if ( ! METHOD_1 ( VAR_6 ) )  return 0 ; METHOD_2 ( & METHOD_3 ( VAR_7 ) -> VAR_8 ) ; if ( ! METHOD_4 ( & METHOD_5 ( STRUCT_OR_UNION_5 ) -> VAR_9 ) ) goto VAR_10 ; METHOD_6 ( ( METHOD_7 ( STRUCT_OR_UNION_6 -> VAR_11 ) || METHOD_8 ( STRUCT_OR_UNION_7 -> VAR_12 ) || METHOD_9 ( STRUCT_OR_UNION_8 -> VAR_13 ) ) || STRUCT_OR_UNION_9 -> VAR_14 == 0 ) ; METHOD_10 ( METHOD_11 ( VAR_15 ) -> VAR_16 , ""get_write_access"" ) ; VAR_17 = METHOD_12 ( VAR_18 , METHOD_13 ( VAR_19 ) -> VAR_20 ) ; if ( VAR_21 ) goto VAR_22 ; VAR_23 = METHOD_14 ( VAR_24 , STRUCT_OR_UNION_10 , & VAR_25 ) ; if ( VAR_26 ) goto VAR_27 ; if ( METHOD_15 ( STRUCT_OR_UNION_11 ) && METHOD_16 ( STRUCT_OR_UNION_12 ) <= ( METHOD_17 ( METHOD_18 ( VAR_28 ) -> VAR_29 -> VAR_30 ) ) ) goto VAR_31 ; METHOD_19 ( STRUCT_OR_UNION_13 ) = METHOD_20 ( METHOD_21 ( VAR_32 ) -> VAR_33 -> VAR_34 ) ; METHOD_22 ( VAR_35 ) -> VAR_36 -> VAR_37 = METHOD_23 ( STRUCT_OR_UNION_14 -> VAR_38 ) ; VAR_39 = METHOD_24 ( VAR_40 , VAR_41 ) ; VAR_42 = METHOD_25 ( VAR_43 , STRUCT_OR_UNION_15 , & VAR_44 ) ; if ( ! VAR_45 ) VAR_46 = VAR_47 ; VAR_48 : if ( ! VAR_49 ) METHOD_26 ( & METHOD_27 ( STRUCT_OR_UNION_16 ) -> VAR_50 , & METHOD_28 ( VAR_51 ) -> VAR_52 ) ; METHOD_29 ( 4 , ""superblockwillpointto%lu\\n"" , STRUCT_OR_UNION_17 -> VAR_53 ) ; METHOD_30 ( 4 , ""orphaninode%luwillpointto%d\\n"" , STRUCT_OR_UNION_18 -> VAR_54 , METHOD_31 ( STRUCT_OR_UNION_19 ) ) ; VAR_55 : METHOD_32 ( & METHOD_33 ( VAR_56 ) -> VAR_57 ) ; METHOD_34 ( STRUCT_OR_UNION_20 -> VAR_58 , VAR_59 ) ; return VAR_60 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_1 = STRUCT_OR_UNION_3 -> VAR_2 ; struct STRUCT_OR_UNION_4 VAR_3 ; TYPE_2 VAR_4 = 0 , VAR_5 ; if ( ! METHOD_33 ( VAR_56 ) -> VAR_61 ) return 0 ; METHOD_2 ( & METHOD_3 ( VAR_7 ) -> VAR_8 ) ; if ( ! METHOD_4 ( & METHOD_5 ( STRUCT_OR_UNION_5 ) -> VAR_9 ) ) goto VAR_10 ; METHOD_6 ( ( METHOD_7 ( STRUCT_OR_UNION_6 -> VAR_11 ) || METHOD_8 ( STRUCT_OR_UNION_7 -> VAR_12 ) || METHOD_9 ( STRUCT_OR_UNION_8 -> VAR_13 ) ) || STRUCT_OR_UNION_9 -> VAR_14 == 0 ) ; METHOD_10 ( METHOD_11 ( VAR_15 ) -> VAR_16 , ""get_write_access"" ) ; VAR_17 = METHOD_12 ( VAR_18 , METHOD_13 ( VAR_19 ) -> VAR_20 ) ; if ( VAR_21 ) goto VAR_22 ; VAR_23 = METHOD_14 ( VAR_24 , STRUCT_OR_UNION_10 , & VAR_25 ) ; if ( VAR_26 ) goto VAR_27 ; if ( METHOD_15 ( STRUCT_OR_UNION_11 ) && METHOD_16 ( STRUCT_OR_UNION_12 ) <= ( METHOD_17 ( METHOD_18 ( VAR_28 ) -> VAR_29 -> VAR_30 ) ) ) goto VAR_31 ; METHOD_19 ( STRUCT_OR_UNION_13 ) = METHOD_20 ( METHOD_21 ( VAR_32 ) -> VAR_33 -> VAR_34 ) ; METHOD_22 ( VAR_35 ) -> VAR_36 -> VAR_37 = METHOD_23 ( STRUCT_OR_UNION_14 -> VAR_38 ) ; VAR_39 = METHOD_24 ( VAR_40 , VAR_41 ) ; VAR_42 = METHOD_25 ( VAR_43 , STRUCT_OR_UNION_15 , & VAR_44 ) ; if ( ! VAR_45 ) VAR_46 = VAR_47 ; VAR_48 : if ( ! VAR_49 ) METHOD_26 ( & METHOD_27 ( STRUCT_OR_UNION_16 ) -> VAR_50 , & METHOD_28 ( VAR_51 ) -> VAR_52 ) ; METHOD_29 ( 4 , ""superblockwillpointto%lu\\n"" , STRUCT_OR_UNION_17 -> VAR_53 ) ; METHOD_30 ( 4 , ""orphaninode%luwillpointto%d\\n"" , STRUCT_OR_UNION_18 -> VAR_54 , METHOD_31 ( STRUCT_OR_UNION_19 ) ) ; VAR_55 : METHOD_32 ( & METHOD_33 ( VAR_56 ) -> VAR_57 ) ; METHOD_34 ( STRUCT_OR_UNION_20 -> VAR_58 , VAR_59 ) ; return VAR_60 ; }",619
620,"static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 TYPE_7 VAR_5 , TYPE_8 TYPE_9 VAR_6 , TYPE_10 TYPE_11 VAR_7 , TYPE_12 TYPE_13 VAR_8 ) { struct STRUCT_OR_UNION_1 VAR_9 ; const TYPE_14 * VAR_10 [ ] = { ""invalid"" , ""rsasig"" , ""shared-secret"" , ""dsssig"" } ; const TYPE_15 * VAR_11 = ( const TYPE_16 * ) VAR_12 + sizeof ( VAR_13 ) ; unsigned TYPE_17 VAR_14 ;  METHOD_1 ( * VAR_15 ) ;  METHOD_2 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ; METHOD_3 ( VAR_19 , METHOD_4 ( VAR_20 ) , VAR_21 . VAR_22 . VAR_23 ) ; VAR_24 = METHOD_5 ( VAR_25 . VAR_26 . VAR_27 ) ; METHOD_6 ( ( VAR_28 , ""len=%umethod=%s"" , VAR_29 - 4 , METHOD_7 ( VAR_30 . VAR_31 , VAR_32 ) ) ) ; if ( VAR_33 > 4 ) { if ( VAR_34 -> VAR_35 > 1 ) { METHOD_8 ( ( VAR_36 , ""authdata=("" ) ) ; if ( ! METHOD_9 ( VAR_37 , ( const TYPE_18 * ) VAR_38 , VAR_39 - sizeof ( VAR_40 ) ) ) goto VAR_41 ; METHOD_10 ( ( VAR_42 , "")"" ) ) ; } else if ( VAR_43 -> VAR_44 ) { if ( ! METHOD_11 ( VAR_45 , VAR_46 , VAR_47 ) ) goto VAR_48 ; } } return ( const TYPE_19 * ) VAR_49 + VAR_50 ; VAR_51 : METHOD_12 ( ( VAR_52 , ""[|%s]"" , METHOD_13 ( VAR_53 ) ) ) ; return VAR_54 ; }","static const TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 TYPE_4 VAR_3 , const TYPE_5 * VAR_4 , TYPE_6 TYPE_7 VAR_5 , TYPE_8 TYPE_9 VAR_6 , TYPE_10 TYPE_11 VAR_7 , TYPE_12 TYPE_13 VAR_8 ) { struct STRUCT_OR_UNION_1 VAR_9 ; const TYPE_14 * VAR_10 [ ] = { ""invalid"" , ""rsasig"" , ""shared-secret"" , ""dsssig"" } ; const TYPE_15 * VAR_11 = ( const TYPE_16 * ) VAR_12 + sizeof ( VAR_13 ) ; unsigned TYPE_17 VAR_14 ; METHOD_1 ( * VAR_15 ) ; METHOD_2 ( & VAR_16 , VAR_17 , sizeof ( VAR_18 ) ) ; METHOD_3 ( VAR_19 , METHOD_4 ( VAR_20 ) , VAR_21 . VAR_22 . VAR_23 ) ; VAR_24 = METHOD_5 ( VAR_25 . VAR_26 . VAR_27 ) ; METHOD_6 ( ( VAR_28 , ""len=%umethod=%s"" , VAR_29 - 4 , METHOD_7 ( VAR_30 . VAR_31 , VAR_32 ) ) ) ; if ( VAR_33 > 4 ) { if ( VAR_34 -> VAR_35 > 1 ) { METHOD_8 ( ( VAR_36 , ""authdata=("" ) ) ; if ( ! METHOD_9 ( VAR_37 , ( const TYPE_18 * ) VAR_38 , VAR_39 - sizeof ( VAR_40 ) ) ) goto VAR_41 ; METHOD_10 ( ( VAR_42 , "")"" ) ) ; } else if ( VAR_43 -> VAR_44 ) { if ( ! METHOD_11 ( VAR_45 , VAR_46 , VAR_47 ) ) goto VAR_48 ; } } return ( const TYPE_19 * ) VAR_49 + VAR_50 ; VAR_51 : METHOD_12 ( ( VAR_52 , ""[|%s]"" , METHOD_13 ( VAR_53 ) ) ) ; return VAR_54 ; }",620
621,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , struct STRUCT_OR_UNION_2 * * VAR_3 , struct STRUCT_OR_UNION_3 * VAR_4 ) { TYPE_2 VAR_5 [ VAR_6 ] ; if ( ! VAR_7 -> VAR_8 -> METHOD_1 ) return - VAR_9 ;  VAR_10 -> VAR_11 -> METHOD_2 ( VAR_12 , VAR_13 ) ;  return METHOD_3 ( VAR_14 , VAR_15 , sizeof ( VAR_16 ) , VAR_17 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , struct STRUCT_OR_UNION_2 * * VAR_3 , struct STRUCT_OR_UNION_3 * VAR_4 ) { TYPE_2 VAR_5 [ VAR_6 ] ; if ( ! VAR_7 -> VAR_8 -> METHOD_1 ) return - VAR_9 ; METHOD_4 ( VAR_17 , 0 , sizeof ( VAR_17 ) ) ; VAR_10 -> VAR_11 -> METHOD_2 ( VAR_12 , VAR_13 ) ; return METHOD_3 ( VAR_14 , VAR_15 , sizeof ( VAR_16 ) , VAR_17 ) ; }",621
622,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ) { if ( STRUCT_OR_UNION_6 -> VAR_0 & VAR_1 ) return 0 ;  if ( METHOD_1 ( STRUCT_OR_UNION_7 ) -> METHOD_2 ( STRUCT_OR_UNION_8 , VAR_2 ) )  return 1 ;  if ( METHOD_3 ( STRUCT_OR_UNION_9 , STRUCT_OR_UNION_10 ) && ( STRUCT_OR_UNION_11 -> VAR_3 == VAR_4 ||  ( STRUCT_OR_UNION_12 -> VAR_5 -> VAR_6 == 0 && STRUCT_OR_UNION_13 -> VAR_7 -> VAR_8 == VAR_9 &&  STRUCT_OR_UNION_14 -> VAR_10 -> VAR_11 != VAR_12 ) ) )  return 1 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * STRUCT_OR_UNION_5 ) { if ( STRUCT_OR_UNION_6 -> VAR_0 & VAR_1 ) return 0 ; if ( STRUCT_OR_UNION_14 -> VAR_10 -> VAR_11 != VAR_12 ) ) ) return 1 ; return 0 ; }",622
623,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ,  struct STRUCT_OR_UNION_2 * VAR_1 )  {  struct STRUCT_OR_UNION_3 * VAR_2 ;  TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; VAR_5 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; VAR_6 = VAR_7 [ VAR_8 ] . VAR_9 ;  METHOD_2 ( ""ext4_convert_unwritten_extents_endio:inode%lu,logical""  ""block%llu,max_blocks%u\\n"" , STRUCT_OR_UNION_5 -> VAR_10 ,  ( unsigned TYPE_4 TYPE_5 ) METHOD_3 ( VAR_11 -> VAR_12 ) ,  METHOD_4 ( VAR_13 ) ) ; VAR_14 = METHOD_5 ( VAR_15 , STRUCT_OR_UNION_6 , VAR_16 + VAR_17 ) ; if ( VAR_18 ) goto VAR_19 ; METHOD_6 ( VAR_20 ) ; METHOD_7 ( VAR_21 , STRUCT_OR_UNION_7 , VAR_22 , VAR_23 ) ; VAR_24 = METHOD_8 ( VAR_25 , STRUCT_OR_UNION_8 , VAR_26 + VAR_27 -> VAR_28 ) ; VAR_29 : METHOD_9 ( STRUCT_OR_UNION_9 , VAR_30 ) ; return VAR_31 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_1 ) { struct STRUCT_OR_UNION_3 * VAR_2 ; TYPE_2 VAR_3 ; TYPE_3 VAR_4 = 0 ; VAR_5 = METHOD_1 ( STRUCT_OR_UNION_4 ) ; VAR_6 = VAR_7 [ VAR_8 ] . VAR_9 ; VAR_12 = METHOD_3 ( VAR_23 -> VAR_12 ) ; VAR_33 = METHOD_4 ( VAR_23 ) ; METHOD_2 ( ""ext4_convert_unwritten_extents_endio:inode%lu,logical"" ""block%llu,max_blocks%u\\n"" , STRUCT_OR_UNION_5 -> VAR_10 , ( unsigned TYPE_4 TYPE_5 ) METHOD_3 ( VAR_11 -> VAR_12 ) , METHOD_4 ( VAR_13 ) ) ; VAR_14 = METHOD_5 ( VAR_15 , STRUCT_OR_UNION_6 , VAR_16 + VAR_17 ) ; if ( VAR_18 ) goto VAR_19 ; METHOD_6 ( VAR_20 ) ; METHOD_7 ( VAR_21 , STRUCT_OR_UNION_7 , VAR_22 , VAR_23 ) ; VAR_24 = METHOD_8 ( VAR_25 , STRUCT_OR_UNION_8 , VAR_26 + VAR_27 -> VAR_28 ) ; VAR_29 : METHOD_9 ( STRUCT_OR_UNION_9 , VAR_30 ) ; return VAR_31 ; }",623
624,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 ; if ( METHOD_1 ( ) ) return - VAR_4 ; VAR_5 = METHOD_2 ( & VAR_6 , VAR_7 -> VAR_8 , METHOD_3 ( VAR_9 -> VAR_10 ) ) ; if ( ! VAR_11 ) return - VAR_12 ; METHOD_4 ( VAR_13 -> VAR_14 , VAR_15 ) ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; VAR_21 -> VAR_22 = VAR_23 -> VAR_24 . VAR_25 ; VAR_26 -> VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; VAR_31 -> VAR_32 = 1 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 = VAR_40 -> VAR_41 ; VAR_42 = METHOD_5 ( VAR_43 ) ; VAR_44 -> VAR_45 = VAR_46 -> VAR_47 . VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 . VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 , 0 , 0 ) ; if ( VAR_56 ) METHOD_7 ( VAR_57 ) ; else VAR_58 -> VAR_59 = VAR_60 ;  return VAR_61 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 ; TYPE_1 VAR_3 ; if ( METHOD_1 ( ) ) return - VAR_4 ; VAR_5 = METHOD_2 ( & VAR_6 , VAR_7 -> VAR_8 , METHOD_3 ( VAR_9 -> VAR_10 ) ) ; if ( ! VAR_11 ) return - VAR_12 ; METHOD_4 ( VAR_13 -> VAR_14 , VAR_15 ) ; VAR_16 -> VAR_17 = VAR_18 -> VAR_19 . VAR_20 ; VAR_21 -> VAR_22 = VAR_23 -> VAR_24 . VAR_25 ; VAR_26 -> VAR_27 = VAR_28 -> VAR_29 . VAR_30 ; VAR_31 -> VAR_32 = 1 ; VAR_33 -> VAR_34 = VAR_35 -> VAR_36 -> VAR_37 ; VAR_38 -> VAR_39 = VAR_40 -> VAR_41 ; VAR_42 = METHOD_5 ( VAR_43 ) ; VAR_44 -> VAR_45 = VAR_46 -> VAR_47 . VAR_48 ; VAR_49 -> VAR_50 = VAR_51 -> VAR_52 . VAR_53 ; VAR_54 = METHOD_6 ( VAR_55 , 0 , 0 ) ; if ( VAR_56 ) METHOD_7 ( VAR_57 ) ; else VAR_58 -> VAR_59 = VAR_60 ; if ( VAR_58 -> VAR_36 -> VAR_62 & VAR_63 ) METHOD_8 ( VAR_58 , VAR_64 , VAR_65 , VAR_65 ) ; return VAR_61 ; }",624
625,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 = METHOD_3 ( VAR_17 ) ; TYPE_9 VAR_18 ; TYPE_10 VAR_19 ; if ( VAR_20 & VAR_21 ) return METHOD_4 ( VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 . VAR_30 . VAR_31 ) return METHOD_5 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , VAR_39 | ( VAR_40 ? VAR_41 : 0 ) , & VAR_42 , & VAR_43 , & VAR_44 ) ; if ( ! VAR_45 ) goto VAR_46 ; VAR_47 = VAR_48 -> VAR_49 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_50 = VAR_51 ; if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; else if ( VAR_56 < VAR_57 ) VAR_58 -> VAR_59 |= VAR_60 ; VAR_61 = ( VAR_62 -> VAR_63 == METHOD_7 ( VAR_64 ) ) ; if ( VAR_65 < VAR_66 || METHOD_8 ( VAR_67 ) -> VAR_68 ) { if ( METHOD_9 ( VAR_69 ) ) goto VAR_70 ; } if ( METHOD_10 ( VAR_71 ) ) VAR_72 = METHOD_11 ( VAR_73 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_74 , VAR_75 ) ; else { VAR_76 = METHOD_12 ( VAR_77 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_78 ) ; if ( VAR_79 == - VAR_80 ) goto VAR_81 ; } if ( METHOD_13 ( VAR_82 ) ) { METHOD_14 ( VAR_83 , METHOD_15 ) ; if ( ! VAR_84 ) { METHOD_16 ( & VAR_85 -> VAR_86 ) ; if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 , VAR_90 ) ; else METHOD_19 ( METHOD_20 ( VAR_91 ) , VAR_92 , VAR_93 ) ; } goto VAR_94 ; } if ( ! VAR_95 ) { if ( VAR_96 ) METHOD_21 ( METHOD_22 ( VAR_97 ) , VAR_98 , VAR_99 ) ; else METHOD_23 ( METHOD_24 ( VAR_100 ) , VAR_101 , VAR_102 ) ; } METHOD_25 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 ) { DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_8 * , VAR_108 , VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = METHOD_26 ( VAR_116 ) -> VAR_117 ; VAR_118 -> VAR_119 = 0 ; if ( VAR_120 ) { METHOD_27 ( METHOD_28 ( VAR_121 ) -> VAR_122 , & VAR_123 -> VAR_124 ) ; VAR_125 -> VAR_126 = 0 ; } else { VAR_127 -> VAR_128 = METHOD_29 ( VAR_129 ) -> VAR_130 ; VAR_131 -> VAR_132 = METHOD_30 ( & VAR_133 -> VAR_134 , METHOD_31 ( VAR_135 ) ) ; } * VAR_136 = sizeof ( * VAR_137 ) ; } if ( VAR_138 -> VAR_139 . VAR_140 ) METHOD_32 ( VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 ) { if ( VAR_145 -> VAR_146 ) METHOD_33 ( VAR_147 , VAR_148 ) ; } else { if ( VAR_149 -> VAR_150 . VAR_151 ) METHOD_34 ( VAR_152 , VAR_153 , VAR_154 ) ; } VAR_155 = VAR_156 ; if ( VAR_157 & VAR_158 ) VAR_159 = VAR_160 ; VAR_161 : METHOD_35 ( VAR_162 , VAR_163 ) ; VAR_164 : return VAR_165 ; VAR_166 : VAR_167 = METHOD_36 ( VAR_168 ) ; if ( ! METHOD_37 ( VAR_169 , VAR_170 , VAR_171 ) ) { if ( VAR_172 ) { METHOD_38 ( METHOD_39 ( VAR_173 ) , VAR_174 , VAR_175 ) ; METHOD_40 ( METHOD_41 ( VAR_176 ) , VAR_177 , VAR_178 ) ; } else { METHOD_42 ( METHOD_43 ( VAR_179 ) , VAR_180 , VAR_181 ) ; METHOD_44 ( METHOD_45 ( VAR_182 ) , VAR_183 , VAR_184 ) ; } } METHOD_46 ( VAR_185 , VAR_186 ) ;  if ( VAR_187 )  return - VAR_188 ; VAR_189 -> VAR_190 &= ~ VAR_191 ; goto VAR_192 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , TYPE_4 * VAR_5 ) { struct STRUCT_OR_UNION_2 * VAR_6 = METHOD_1 ( VAR_7 ) ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_2 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; unsigned TYPE_5 VAR_11 , VAR_12 ; TYPE_6 VAR_13 , VAR_14 = 0 ; TYPE_7 VAR_15 ; TYPE_8 VAR_16 = METHOD_3 ( VAR_17 ) ; TYPE_9 VAR_18 ; TYPE_10 VAR_19 ; if ( VAR_20 & VAR_21 ) return METHOD_4 ( VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ; if ( VAR_26 -> VAR_27 && VAR_28 -> VAR_29 . VAR_30 . VAR_31 ) return METHOD_5 ( VAR_32 , VAR_33 , VAR_34 , VAR_35 ) ; VAR_36 : VAR_37 = METHOD_6 ( VAR_38 , VAR_39 | ( VAR_40 ? VAR_41 : 0 ) , & VAR_42 , & VAR_43 , & VAR_44 ) ; if ( ! VAR_45 ) goto VAR_46 ; VAR_47 = VAR_48 -> VAR_49 - sizeof ( struct STRUCT_OR_UNION_5 ) ; VAR_50 = VAR_51 ; if ( VAR_52 > VAR_53 ) VAR_54 = VAR_55 ; else if ( VAR_56 < VAR_57 ) VAR_58 -> VAR_59 |= VAR_60 ; VAR_61 = ( VAR_62 -> VAR_63 == METHOD_7 ( VAR_64 ) ) ; if ( VAR_65 < VAR_66 || METHOD_8 ( VAR_67 ) -> VAR_68 ) { if ( METHOD_9 ( VAR_69 ) ) goto VAR_70 ; } if ( METHOD_10 ( VAR_71 ) ) VAR_72 = METHOD_11 ( VAR_73 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_74 , VAR_75 ) ; else { VAR_76 = METHOD_12 ( VAR_77 , sizeof ( struct STRUCT_OR_UNION_7 ) , VAR_78 ) ; if ( VAR_79 == - VAR_80 ) goto VAR_81 ; } if ( METHOD_13 ( VAR_82 ) ) { METHOD_14 ( VAR_83 , METHOD_15 ) ; if ( ! VAR_84 ) { METHOD_16 ( & VAR_85 -> VAR_86 ) ; if ( VAR_87 ) METHOD_17 ( METHOD_18 ( VAR_88 ) , VAR_89 , VAR_90 ) ; else METHOD_19 ( METHOD_20 ( VAR_91 ) , VAR_92 , VAR_93 ) ; } goto VAR_94 ; } if ( ! VAR_95 ) { if ( VAR_96 ) METHOD_21 ( METHOD_22 ( VAR_97 ) , VAR_98 , VAR_99 ) ; else METHOD_23 ( METHOD_24 ( VAR_100 ) , VAR_101 , VAR_102 ) ; } METHOD_25 ( VAR_103 , VAR_104 , VAR_105 ) ; if ( VAR_106 -> VAR_107 ) { DECLARE_SOCKADDR ( struct STRUCT_OR_UNION_8 * , VAR_108 , VAR_109 -> VAR_110 ) ; VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = METHOD_26 ( VAR_116 ) -> VAR_117 ; VAR_118 -> VAR_119 = 0 ; if ( VAR_120 ) { METHOD_27 ( METHOD_28 ( VAR_121 ) -> VAR_122 , & VAR_123 -> VAR_124 ) ; VAR_125 -> VAR_126 = 0 ; } else { VAR_127 -> VAR_128 = METHOD_29 ( VAR_129 ) -> VAR_130 ; VAR_131 -> VAR_132 = METHOD_30 ( & VAR_133 -> VAR_134 , METHOD_31 ( VAR_135 ) ) ; } * VAR_136 = sizeof ( * VAR_137 ) ; } if ( VAR_138 -> VAR_139 . VAR_140 ) METHOD_32 ( VAR_141 , VAR_142 , VAR_143 ) ; if ( VAR_144 ) { if ( VAR_145 -> VAR_146 ) METHOD_33 ( VAR_147 , VAR_148 ) ; } else { if ( VAR_149 -> VAR_150 . VAR_151 ) METHOD_34 ( VAR_152 , VAR_153 , VAR_154 ) ; } VAR_155 = VAR_156 ; if ( VAR_157 & VAR_158 ) VAR_159 = VAR_160 ; VAR_161 : METHOD_35 ( VAR_162 , VAR_163 ) ; VAR_164 : return VAR_165 ; VAR_166 : VAR_167 = METHOD_36 ( VAR_168 ) ; if ( ! METHOD_37 ( VAR_169 , VAR_170 , VAR_171 ) ) { if ( VAR_172 ) { METHOD_38 ( METHOD_39 ( VAR_173 ) , VAR_174 , VAR_175 ) ; METHOD_40 ( METHOD_41 ( VAR_176 ) , VAR_177 , VAR_178 ) ; } else { METHOD_42 ( METHOD_43 ( VAR_179 ) , VAR_180 , VAR_181 ) ; METHOD_44 ( METHOD_45 ( VAR_182 ) , VAR_183 , VAR_184 ) ; } } METHOD_46 ( VAR_185 , VAR_186 ) ; METHOD_47 ( ) ; VAR_189 -> VAR_190 &= ~ VAR_191 ; goto VAR_192 ; }",625
626,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * VAR_1 ) ( TYPE_3 * ) , const TYPE_4 * VAR_2 ) { TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; if ( VAR_5 -> VAR_6 ) { VAR_7 = 0 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 | VAR_12 | VAR_13 | VAR_14 ) ) ) VAR_15 -> VAR_16 = VAR_17 ; else { VAR_18 = VAR_19 ; if ( VAR_20 != VAR_21 ) METHOD_2 ( VAR_22 , ""Unabletocreate%snotifyfifo%s"" , VAR_23 , VAR_24 -> VAR_25 ) ; } if ( ! VAR_26 || VAR_27 == VAR_28 ) { if ( VAR_29 -> VAR_30 ) METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 -> VAR_35 ) ;  if ( ( VAR_36 -> VAR_37 = METHOD_4 ( VAR_38 -> VAR_39 , VAR_40 | VAR_41 | VAR_42 ) ) == - 1 ) {  METHOD_5 ( VAR_43 , ""Unabletoopen%snotifyfifo%s-errno%d"" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 -> VAR_49 ) { METHOD_6 ( VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; } } } if ( VAR_55 -> VAR_56 == - 1 ) { METHOD_7 ( VAR_57 -> VAR_58 ) ; VAR_59 -> VAR_60 = VAR_61 ; } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 ( * VAR_1 ) ( TYPE_3 * ) , const TYPE_4 * VAR_2 ) { TYPE_5 VAR_3 ; TYPE_6 VAR_4 ; if ( VAR_5 -> VAR_6 ) { VAR_7 = 0 ; if ( ! ( VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 | VAR_12 | VAR_13 | VAR_14 ) ) ) VAR_15 -> VAR_16 = VAR_17 ; else { VAR_18 = VAR_19 ; if ( VAR_20 != VAR_21 ) METHOD_2 ( VAR_22 , ""Unabletocreate%snotifyfifo%s"" , VAR_23 , VAR_24 -> VAR_25 ) ; } if ( ! VAR_26 || VAR_27 == VAR_28 ) { if ( VAR_29 -> VAR_30 ) METHOD_3 ( VAR_31 , VAR_32 , VAR_33 , VAR_34 -> VAR_35 ) ; if ( ( VAR_36 -> VAR_37 = METHOD_4 ( VAR_38 -> VAR_39 , VAR_40 | VAR_41 | VAR_42 | VAR_62 ) ) == - 1 ) { METHOD_5 ( VAR_43 , ""Unabletoopen%snotifyfifo%s-errno%d"" , VAR_44 , VAR_45 -> VAR_46 , VAR_47 ) ; if ( VAR_48 -> VAR_49 ) { METHOD_6 ( VAR_50 -> VAR_51 ) ; VAR_52 -> VAR_53 = VAR_54 ; } } } if ( VAR_55 -> VAR_56 == - 1 ) { METHOD_7 ( VAR_57 -> VAR_58 ) ; VAR_59 -> VAR_60 = VAR_61 ; } } }",626
627,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 -> VAR_3 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 ; TYPE_2 VAR_7 = 0 ; if ( METHOD_1 ( VAR_8 ) -> VAR_9 ) { VAR_10 = METHOD_2 ( VAR_11 ) -> VAR_12 ; goto VAR_13 ; } VAR_14 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_15 ) ; if ( ! VAR_16 ) return - VAR_17 ; METHOD_4 ( & VAR_18 -> VAR_19 , 0 ) ; METHOD_5 ( & VAR_20 -> VAR_21 , 0 ) ; METHOD_6 ( & VAR_22 -> VAR_23 ) ; METHOD_7 ( & VAR_24 -> VAR_25 ) ; METHOD_8 ( VAR_26 ) -> VAR_27 = VAR_28 ;  VAR_29 :  VAR_30 -> VAR_31 = METHOD_9 ( VAR_32 , VAR_33 , ""f2fs_flush-%u:%u"" , METHOD_10 ( VAR_34 ) , METHOD_11 ( VAR_35 ) ) ; if ( METHOD_12 ( VAR_36 -> VAR_37 ) ) { VAR_38 = METHOD_13 ( VAR_39 -> VAR_40 ) ; METHOD_14 ( VAR_41 ) ; METHOD_15 ( VAR_42 ) -> VAR_43 = VAR_44 ; return VAR_45 ; } return VAR_46 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 -> VAR_3 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_1 * VAR_6 ; TYPE_2 VAR_7 = 0 ; if ( METHOD_1 ( VAR_8 ) -> VAR_9 ) { VAR_10 = METHOD_2 ( VAR_11 ) -> VAR_12 ; goto VAR_13 ; } VAR_14 = METHOD_3 ( sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_15 ) ; if ( ! VAR_16 ) return - VAR_17 ; METHOD_4 ( & VAR_18 -> VAR_19 , 0 ) ; METHOD_5 ( & VAR_20 -> VAR_21 , 0 ) ; METHOD_6 ( & VAR_22 -> VAR_23 ) ; METHOD_7 ( & VAR_24 -> VAR_25 ) ; METHOD_8 ( VAR_26 ) -> VAR_27 = VAR_28 ; VAR_29 : VAR_30 -> VAR_31 = METHOD_9 ( VAR_32 , VAR_33 , ""f2fs_flush-%u:%u"" , METHOD_10 ( VAR_34 ) , METHOD_11 ( VAR_35 ) ) ; if ( METHOD_12 ( VAR_36 -> VAR_37 ) ) { VAR_38 = METHOD_13 ( VAR_39 -> VAR_40 ) ; METHOD_14 ( VAR_41 ) ; METHOD_15 ( VAR_42 ) -> VAR_43 = VAR_44 ; return VAR_45 ; } return VAR_46 ; }",627
628,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) {  TYPE_1 VAR_2 ;  METHOD_1 ( VAR_3 != VAR_4 -> VAR_5 ) ; METHOD_2 ( & VAR_6 -> VAR_7 ) ;  VAR_8 = METHOD_3 ( VAR_9 , VAR_10 ) ;  if ( ! VAR_11 ) { METHOD_4 ( 1 , ""%s:invalidhandlepassedtofree.\\n"" , VAR_12 ) ; METHOD_5 ( & VAR_13 -> VAR_14 ) ;  return ;  } METHOD_6 ( & VAR_15 -> VAR_16 ) ; METHOD_7 ( VAR_17 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; METHOD_1 ( VAR_3 != VAR_4 -> VAR_5 ) ; METHOD_2 ( & VAR_6 -> VAR_7 ) ; VAR_8 = METHOD_3 ( VAR_9 , VAR_10 ) ; if ( ! VAR_11 ) { METHOD_4 ( 1 , ""%s:invalidhandlepassedtofree.\\n"" , VAR_12 ) ; METHOD_5 ( & VAR_13 -> VAR_14 ) ; return ; } METHOD_6 ( & VAR_15 -> VAR_16 ) ; METHOD_7 ( VAR_17 ) ; }",628
629,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 ; struct STRUCT_OR_UNION_3 * VAR_1 ; METHOD_1 ( ) ; VAR_2 = METHOD_2 ( STRUCT_OR_UNION_4 ) ; if ( METHOD_3 ( VAR_3 ) ) goto VAR_4 ; METHOD_4 ( ) ; while ( ! METHOD_5 ( & VAR_5 -> VAR_6 ) ) { VAR_7 = hlist_entry ( VAR_8 -> VAR_9 . VAR_10 , struct STRUCT_OR_UNION_5 , VAR_11 ) ; if ( VAR_12 -> VAR_13 . VAR_14 & VAR_15 ) { struct STRUCT_OR_UNION_6 * VAR_16 , * VAR_17 ; METHOD_6 ( VAR_18 , VAR_19 , & VAR_20 -> VAR_21 , VAR_22 ) { METHOD_7 ( & VAR_23 -> VAR_24 . VAR_25 , & VAR_26 ) ; METHOD_8 ( VAR_27 ) ; } }  else METHOD_9 ( VAR_28 , 0 ) ;  } METHOD_10 ( ) ; METHOD_11 ( VAR_29 ) ; VAR_30 : METHOD_12 ( ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 ; struct STRUCT_OR_UNION_3 * VAR_1 ; METHOD_1 ( ) ; VAR_2 = METHOD_2 ( STRUCT_OR_UNION_4 ) ; if ( METHOD_3 ( VAR_3 ) ) goto VAR_4 ; METHOD_4 ( ) ; while ( ! METHOD_5 ( & VAR_5 -> VAR_6 ) ) { VAR_7 = hlist_entry ( VAR_8 -> VAR_9 . VAR_10 , struct STRUCT_OR_UNION_5 , VAR_11 ) ; if ( VAR_12 -> VAR_13 . VAR_14 & VAR_15 ) { struct STRUCT_OR_UNION_6 * VAR_16 , * VAR_17 ; METHOD_6 ( VAR_18 , VAR_19 , & VAR_20 -> VAR_21 , VAR_22 ) { METHOD_7 ( & VAR_23 -> VAR_24 . VAR_25 , & VAR_26 ) ; METHOD_8 ( VAR_27 ) ; } } else METHOD_9 ( VAR_28 , VAR_31 ) ; } METHOD_10 ( ) ; METHOD_11 ( VAR_29 ) ; VAR_30 : METHOD_12 ( ) ; }",629
630,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; if ( METHOD_1 ( VAR_5 ) <= 32 ) return 0 ; VAR_6 -> VAR_7 = 0 ;  VAR_8 -> VAR_9 = VAR_10 ;  METHOD_2 ( VAR_11 , VAR_12 ) ; METHOD_3 ( VAR_13 , 10 ) ; METHOD_4 ( VAR_14 , 2 ) ; VAR_15 -> VAR_16 = METHOD_5 ( VAR_17 , 2 ) + VAR_18 ; if ( METHOD_6 ( VAR_19 ) ) { METHOD_7 ( VAR_20 ) ; METHOD_8 ( VAR_21 ) ; VAR_22 -> VAR_23 = METHOD_9 ( VAR_24 ) ^ 1 ; } if ( VAR_25 -> VAR_26 == VAR_27 ) { if ( METHOD_10 ( VAR_28 ) ) METHOD_11 ( VAR_29 ) ; } if ( VAR_30 -> VAR_31 != VAR_32 ) { VAR_33 -> VAR_34 = METHOD_12 ( VAR_35 ) ; VAR_36 -> VAR_37 = METHOD_13 ( VAR_38 ) ; VAR_39 -> VAR_40 = METHOD_14 ( VAR_41 , 2 ) ; VAR_42 -> VAR_43 = METHOD_15 ( VAR_44 , 2 ) ; VAR_45 -> VAR_46 = METHOD_16 ( VAR_47 ) ; } if ( VAR_48 -> VAR_49 ) { METHOD_17 ( VAR_50 -> VAR_51 . VAR_52 , & VAR_53 -> VAR_54 , VAR_55 ) ; METHOD_18 ( VAR_56 -> VAR_57 . VAR_58 , & VAR_59 -> VAR_60 , VAR_61 ) ; METHOD_19 ( VAR_62 -> VAR_63 . VAR_64 , & VAR_65 -> VAR_66 , VAR_67 ) ; METHOD_20 ( VAR_68 -> VAR_69 . VAR_70 , & VAR_71 -> VAR_72 , VAR_73 ) ; } else { METHOD_21 ( VAR_74 -> VAR_75 . VAR_76 , & VAR_77 -> VAR_78 , VAR_79 ) ; METHOD_22 ( VAR_80 -> VAR_81 . VAR_82 , & VAR_83 -> VAR_84 , VAR_85 ) ; METHOD_23 ( VAR_86 -> VAR_87 . VAR_88 , & VAR_89 -> VAR_90 , VAR_91 ) ; METHOD_24 ( VAR_92 -> VAR_93 . VAR_94 , & VAR_95 -> VAR_96 , VAR_97 ) ; } METHOD_25 ( VAR_98 ) ; METHOD_26 ( VAR_99 ) ; METHOD_27 ( VAR_100 , VAR_101 , 4 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; if ( METHOD_1 ( VAR_5 ) <= 32 ) return 0 ; VAR_6 -> VAR_7 = 0 ; VAR_8 -> VAR_9 = VAR_10 ; METHOD_2 ( VAR_11 , VAR_12 ) ; METHOD_3 ( VAR_13 , 10 ) ; METHOD_4 ( VAR_14 , 2 ) ; VAR_15 -> VAR_16 = METHOD_5 ( VAR_17 , 2 ) + VAR_18 ; if ( METHOD_6 ( VAR_19 ) ) { METHOD_7 ( VAR_20 ) ; METHOD_8 ( VAR_21 ) ; VAR_22 -> VAR_23 = METHOD_9 ( VAR_24 ) ^ 1 ; } if ( VAR_25 -> VAR_26 == VAR_27 ) { if ( METHOD_10 ( VAR_28 ) ) METHOD_11 ( VAR_29 ) ; } if ( VAR_30 -> VAR_31 != VAR_32 ) { VAR_33 -> VAR_34 = METHOD_12 ( VAR_35 ) ; VAR_36 -> VAR_37 = METHOD_13 ( VAR_38 ) ; VAR_39 -> VAR_40 = METHOD_14 ( VAR_41 , 2 ) ; VAR_42 -> VAR_43 = METHOD_15 ( VAR_44 , 2 ) ; VAR_45 -> VAR_46 = METHOD_16 ( VAR_47 ) ; } if ( VAR_48 -> VAR_49 ) { METHOD_17 ( VAR_50 -> VAR_51 . VAR_52 , & VAR_53 -> VAR_54 , VAR_55 ) ; METHOD_18 ( VAR_56 -> VAR_57 . VAR_58 , & VAR_59 -> VAR_60 , VAR_61 ) ; METHOD_19 ( VAR_62 -> VAR_63 . VAR_64 , & VAR_65 -> VAR_66 , VAR_67 ) ; METHOD_20 ( VAR_68 -> VAR_69 . VAR_70 , & VAR_71 -> VAR_72 , VAR_73 ) ; } else { METHOD_21 ( VAR_74 -> VAR_75 . VAR_76 , & VAR_77 -> VAR_78 , VAR_79 ) ; METHOD_22 ( VAR_80 -> VAR_81 . VAR_82 , & VAR_83 -> VAR_84 , VAR_85 ) ; METHOD_23 ( VAR_86 -> VAR_87 . VAR_88 , & VAR_89 -> VAR_90 , VAR_91 ) ; METHOD_24 ( VAR_92 -> VAR_93 . VAR_94 , & VAR_95 -> VAR_96 , VAR_97 ) ; } METHOD_25 ( VAR_98 ) ; METHOD_26 ( VAR_99 ) ; METHOD_27 ( VAR_100 , VAR_101 , 4 ) ; return 0 ; }",630
631,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 ;  VAR_5 -> METHOD_2 ( VAR_6 , VAR_7 -> VAR_8 ) ;  if ( VAR_9 > ( VAR_10 -> VAR_11 - sizeof ( VAR_12 ) ) ) return ( TYPE_5 ) - 1 ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 + VAR_16 ) ; return VAR_17 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 ; VAR_5 -> METHOD_2 ( VAR_6 , VAR_7 -> VAR_8 ) ; if ( VAR_9 > ( VAR_10 -> VAR_11 - sizeof ( VAR_12 ) ) ) return ( TYPE_5 ) - 1 ; VAR_13 = METHOD_3 ( VAR_14 -> VAR_15 + VAR_16 ) ; return VAR_17 ; }",631
632," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 ,  TYPE_7 * VAR_6 ) {  TYPE_8 VAR_7 = VAR_8 ; const TYPE_9 * VAR_9 = VAR_10 ; const TYPE_10 VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 != VAR_19 ) METHOD_2 ( VAR_20 , ""Failedtoencodeframe."" ) ;  while ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 ) ) != VAR_24 ) {  if ( VAR_25 -> VAR_26 == VAR_27 ) { const TYPE_11 VAR_28 = ( VAR_29 -> VAR_30 . VAR_31 . VAR_32 & VAR_33 ) != 0 ; if ( ! METHOD_4 ( VAR_34 , VAR_35 -> VAR_36 . VAR_37 . VAR_38 , VAR_39 -> VAR_40 . VAR_41 . VAR_42 , VAR_43 -> VAR_44 . VAR_45 . VAR_46 ) ) METHOD_5 ( VAR_47 , ""Failedtowritecompressedframe."" ) ; METHOD_6 ( VAR_48 ? ""K"" : ""."" ) ; METHOD_7 ( VAR_49 ) ; } }  } ","static TYPE_11 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 = VAR_8 ; const TYPE_9 * VAR_9 = VAR_10 ; const TYPE_10 VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 != VAR_19 ) METHOD_2 ( VAR_20 , ""Failedtoencodeframe."" ) ; while ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 ) ) != VAR_24 ) { VAR_50 = 1 ; if ( VAR_25 -> VAR_26 == VAR_27 ) { const TYPE_11 VAR_28 = ( VAR_29 -> VAR_30 . VAR_31 . VAR_32 & VAR_33 ) != 0 ; if ( ! METHOD_4 ( VAR_34 , VAR_35 -> VAR_36 . VAR_37 . VAR_38 , VAR_39 -> VAR_40 . VAR_41 . VAR_42 , VAR_43 -> VAR_44 . VAR_45 . VAR_46 ) ) METHOD_5 ( VAR_47 , ""Failedtowritecompressedframe."" ) ; METHOD_6 ( VAR_48 ? ""K"" : ""."" ) ; METHOD_7 ( VAR_49 ) ; } } return VAR_50 ; }",632
633," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,   TYPE_3 VAR_2 ) {  TYPE_4 VAR_3 ;  if ( VAR_4 -> VAR_5 > VAR_6 -> VAR_7 . VAR_8 )   VAR_9 = ( VAR_10 * VAR_11 -> VAR_12 /   METHOD_1 ( VAR_13 -> VAR_14 ) ) ;  else VAR_15 = ( VAR_16 * VAR_17 -> VAR_18 . VAR_19 / METHOD_2 ( VAR_20 -> VAR_21 ) ) ; if ( VAR_22 > 0.0 ) VAR_23 += VAR_24 * ( VAR_25 * 2.0 ) ; else VAR_26 += VAR_27 * ( VAR_28 / 2.0 ) ;  return METHOD_3 ( VAR_29 , VAR_30 ) ;  }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; if ( VAR_4 -> VAR_5 > VAR_6 -> VAR_7 . VAR_8 ) VAR_9 = ( VAR_10 * VAR_11 -> VAR_12 / METHOD_1 ( VAR_13 -> VAR_14 ) ) ; else VAR_15 = ( VAR_16 * VAR_17 -> VAR_18 . VAR_19 / METHOD_2 ( VAR_20 -> VAR_21 ) ; VAR_29 = VAR_29 * VAR_46 * VAR_38 ; if ( VAR_22 > 0.0 ) VAR_23 += VAR_24 * ( VAR_25 * 2.0 ) ; else VAR_26 += VAR_27 * ( VAR_28 / 2.0 ) ; return METHOD_3 ( VAR_29 , VAR_31 * VAR_38 ) ; }",633
634," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 VAR_3 )  { METHOD_1 ( & VAR_4 -> VAR_5 ) ; if ( VAR_6 != VAR_7 ) { METHOD_2 ( VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 , sizeof ( VAR_13 -> VAR_14 . VAR_15 ) ) ; METHOD_3 ( VAR_16 , & VAR_17 -> VAR_18 ) ; } if ( VAR_19 != VAR_20 )  METHOD_4 ( VAR_21 , VAR_22 , VAR_23 ) ;  METHOD_5 ( & VAR_24 -> VAR_25 ) ; METHOD_6 ( & VAR_26 -> VAR_27 -> VAR_28 ) ;  METHOD_7 ( VAR_29 , VAR_30 ) ;  METHOD_8 ( & VAR_31 -> VAR_32 -> VAR_33 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , const TYPE_2 * VAR_2 , TYPE_3 VAR_3 ) { METHOD_1 ( & VAR_4 -> VAR_5 ) ; if ( VAR_6 != VAR_7 ) { METHOD_2 ( VAR_8 -> VAR_9 . VAR_10 , VAR_11 -> VAR_12 , sizeof ( VAR_13 -> VAR_14 . VAR_15 ) ) ; METHOD_3 ( VAR_16 , & VAR_17 -> VAR_18 ) ; } if ( VAR_19 != VAR_20 ) METHOD_4 ( VAR_21 , VAR_22 , VAR_34 ) ; METHOD_5 ( & VAR_24 -> VAR_25 ) ; METHOD_6 ( & VAR_26 -> VAR_27 -> VAR_28 ) ; METHOD_7 ( VAR_29 , VAR_30 ) ; METHOD_8 ( & VAR_31 -> VAR_32 -> VAR_33 ) ; }",634
635,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { const TYPE_7 * VAR_6 ; TYPE_8 VAR_7 ; const TYPE_9 * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_17 * VAR_22 ; if ( VAR_23 > VAR_24 / 4 ) { VAR_25 = VAR_26 ; goto VAR_27 ; } VAR_28 = CAST ( const TYPE_18 * , ( const TYPE_19 * ) ( ( const TYPE_20 * ) VAR_29 -> VAR_30 + VAR_31 ) ) ; if ( METHOD_1 ( VAR_32 , VAR_33 , VAR_34 , sizeof ( * VAR_35 ) , VAR_36 ) == - 1 ) goto VAR_37 ; VAR_38 . VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 / 8 ) if ( VAR_43 . VAR_44 > METHOD_4 ) { VAR_45 = VAR_46 ; goto VAR_47 ; } VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 ) ; METHOD_6 ( VAR_52 / ( 4 * sizeof ( * VAR_53 ) ) ) if ( VAR_54 . VAR_55 > METHOD_7 ) goto VAR_56 ; METHOD_8 ( ( ""sectionlen:%uproperties%u\\n"" , VAR_57 . VAR_58 , VAR_59 . VAR_60 ) ) ; if ( * VAR_61 ) { if ( * VAR_62 > METHOD_9 ) goto VAR_63 ; * VAR_64 += VAR_65 . VAR_66 ; VAR_67 = CAST ( TYPE_21 * , METHOD_10 ( * VAR_68 , * VAR_69 * sizeof ( * VAR_70 ) ) ) ; } else { * VAR_71 = VAR_72 . VAR_73 ; VAR_74 = CAST ( TYPE_22 * , METHOD_11 ( * VAR_75 * sizeof ( * VAR_76 ) ) ) ; } if ( VAR_77 == VAR_78 ) goto VAR_79 ; * VAR_80 = VAR_81 ; VAR_82 += * VAR_83 ; * VAR_84 += VAR_85 . VAR_86 ; VAR_87 = CAST ( const TYPE_23 * , ( const TYPE_24 * ) ( ( const TYPE_25 * ) ( const TYPE_26 * ) VAR_88 -> VAR_89 + VAR_90 + sizeof ( VAR_91 ) ) ) ; VAR_92 = CAST ( const TYPE_27 * , ( const TYPE_28 * ) ( ( ( const TYPE_29 * ) ( const TYPE_30 * ) VAR_93 ) + VAR_94 . VAR_95 ) ) ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , 0 , VAR_99 ) == - 1 ) goto VAR_100 ; for ( VAR_101 = 0 ; VAR_102 < VAR_103 . VAR_104 ; VAR_105 ++ ) {  VAR_106 = ( const TYPE_31 * ) ( const TYPE_32 * )  ( ( const TYPE_33 * ) ( const TYPE_34 * ) VAR_107 +  METHOD_13 ( VAR_108 , ( VAR_109 << 1 ) + 1 ) ) - 2 * sizeof ( TYPE_35 ) ;  if ( VAR_110 > VAR_111 ) { METHOD_14 ( ( ""Ranoftheend%p>%p\\n"" , VAR_112 , VAR_113 ) ) ; goto VAR_114 ; } VAR_115 [ VAR_116 ] . VAR_117 = METHOD_15 ( VAR_118 , VAR_119 << 1 ) ; VAR_120 [ VAR_121 ] . VAR_122 = METHOD_16 ( VAR_123 , 0 ) ;  METHOD_17 ( ( ""%"" SIZE_T_FORMAT ""u)id=%xtype=%xoffs=0x%tx,0x%x\\n"" , VAR_124 ,  VAR_125 [ VAR_126 ] . VAR_127 , VAR_128 [ VAR_129 ] . VAR_130 , VAR_131 - VAR_132 ,  METHOD_18 ( VAR_133 , ( VAR_134 << 1 ) + 1 ) ) ) ;  if ( VAR_135 [ VAR_136 ] . VAR_137 & VAR_138 ) { VAR_139 = METHOD_19 ( VAR_140 , 1 ) ; VAR_141 = 2 ; } else { VAR_142 = 1 ; VAR_143 = 1 ; } VAR_144 = VAR_145 * sizeof ( TYPE_36 ) ; if ( VAR_146 [ VAR_147 ] . VAR_148 & ( VAR_149 | VAR_150 | VAR_151 ) ) goto VAR_152 ; switch ( VAR_153 [ VAR_154 ] . VAR_155 & VAR_156 ) { case VAR_157 : case VAR_158 : break ; case VAR_159 : if ( VAR_160 [ VAR_161 ] . VAR_162 & VAR_163 ) goto VAR_164 ; ( TYPE_37 ) METHOD_20 ( & VAR_165 , & VAR_166 [ VAR_167 ] , sizeof ( VAR_168 ) ) ; VAR_169 [ VAR_170 ] . VAR_171 = METHOD_21 ( VAR_172 ) ; break ; case VAR_173 : if ( VAR_174 [ VAR_175 ] . VAR_176 & VAR_177 ) goto VAR_178 ; ( TYPE_38 ) METHOD_22 ( & VAR_179 , & VAR_180 [ VAR_181 ] , sizeof ( VAR_182 ) ) ; VAR_183 [ VAR_184 ] . VAR_185 = METHOD_23 ( ( TYPE_39 ) VAR_186 ) ; break ; case VAR_187 : case VAR_188 : if ( VAR_189 [ VAR_190 ] . VAR_191 & VAR_192 ) goto VAR_193 ; ( TYPE_40 ) METHOD_24 ( & VAR_194 , & VAR_195 [ VAR_196 ] , sizeof ( VAR_197 ) ) ; VAR_198 [ VAR_199 ] . VAR_200 = METHOD_25 ( VAR_201 ) ; break ; case VAR_202 : if ( VAR_203 [ VAR_204 ] . VAR_205 & VAR_206 ) goto VAR_207 ; ( TYPE_41 ) METHOD_26 ( & VAR_208 , & VAR_209 [ VAR_210 ] , sizeof ( VAR_211 ) ) ; VAR_212 [ VAR_213 ] . VAR_214 = METHOD_27 ( ( TYPE_42 ) VAR_215 ) ; break ; case VAR_216 : if ( VAR_217 [ VAR_218 ] . VAR_219 & VAR_220 ) goto VAR_221 ; ( TYPE_43 ) METHOD_28 ( & VAR_222 , & VAR_223 [ VAR_224 ] , sizeof ( VAR_225 ) ) ; VAR_226 [ VAR_227 ] . VAR_228 = METHOD_29 ( ( TYPE_44 ) VAR_229 ) ; break ; case VAR_230 : if ( VAR_231 [ VAR_232 ] . VAR_233 & VAR_234 ) goto VAR_235 ; ( TYPE_45 ) METHOD_30 ( & VAR_236 , & VAR_237 [ VAR_238 ] , sizeof ( VAR_239 ) ) ; VAR_240 = METHOD_31 ( VAR_241 ) ; METHOD_32 ( & VAR_242 [ VAR_243 ] . VAR_244 , & VAR_245 , sizeof ( VAR_246 [ VAR_247 ] . VAR_248 ) ) ; break ; case VAR_249 : if ( VAR_250 [ VAR_251 ] . VAR_252 & VAR_253 ) goto VAR_254 ; ( TYPE_46 ) METHOD_33 ( & VAR_255 , & VAR_256 [ VAR_257 ] , sizeof ( VAR_258 ) ) ; VAR_259 = METHOD_34 ( ( TYPE_47 ) VAR_260 ) ; METHOD_35 ( & VAR_261 [ VAR_262 ] . VAR_263 , & VAR_264 , sizeof ( VAR_265 [ VAR_266 ] . VAR_267 ) ) ; break ; case VAR_268 : case VAR_269 : if ( VAR_270 > 1 ) { TYPE_48 VAR_271 = VAR_272 - * VAR_273 ; if ( * VAR_274 > METHOD_36 || VAR_275 > METHOD_37 ) goto VAR_276 ; * VAR_277 += VAR_278 ; VAR_279 = CAST ( TYPE_49 * , METHOD_38 ( * VAR_280 , * VAR_281 * sizeof ( * VAR_282 ) ) ) ; if ( VAR_283 == VAR_284 ) goto VAR_285 ; * VAR_286 = VAR_287 ; VAR_288 = * VAR_289 + VAR_290 ; } METHOD_39 ( ( ""nelements=%"" SIZE_T_FORMAT ""u\\n"" , VAR_291 ) ) ; for ( VAR_292 = 0 ; VAR_293 < VAR_294 ; VAR_295 ++ , VAR_296 ++ ) { TYPE_50 VAR_297 = METHOD_40 ( VAR_298 , VAR_299 ) ; VAR_300 [ VAR_301 ] . VAR_302 . VAR_303 = VAR_304 ; VAR_305 [ VAR_306 ] . VAR_307 . VAR_308 = ( const TYPE_51 * ) ( const TYPE_52 * ) ( & VAR_309 [ VAR_310 + sizeof ( VAR_311 ) ] ) ; METHOD_41 ( ( ""l=%d,r=%"" SIZE_T_FORMAT ""u,s=%s\\n"" , VAR_312 , METHOD_42 ( VAR_313 , sizeof ( VAR_314 ) ) , VAR_315 [ VAR_316 ] . VAR_317 . VAR_318 ) ) ; if ( VAR_319 & 1 ) VAR_320 ++ ; VAR_321 += VAR_322 >> 1 ; if ( VAR_323 + VAR_324 >= VAR_325 ) goto VAR_326 ; VAR_327 = VAR_328 * sizeof ( TYPE_53 ) ; } VAR_329 -- ; break ; case VAR_330 : if ( VAR_331 [ VAR_332 ] . VAR_333 & VAR_334 ) goto VAR_335 ; ( TYPE_54 ) METHOD_43 ( & VAR_336 , & VAR_337 [ VAR_338 ] , sizeof ( VAR_339 ) ) ; VAR_340 [ VAR_341 ] . VAR_342 = METHOD_44 ( ( TYPE_55 ) VAR_343 ) ; break ; case VAR_344 : if ( VAR_345 [ VAR_346 ] . VAR_347 & VAR_348 ) goto VAR_349 ; break ; default : VAR_350 : METHOD_45 ( ( ""Don\'tknowhowtodealwith%x\\n"" , VAR_351 [ VAR_352 ] . VAR_353 ) ) ; break ; } } return 0 ; VAR_354 : METHOD_46 ( * VAR_355 ) ; return - 1 ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * * VAR_3 , TYPE_5 * VAR_4 , TYPE_6 * VAR_5 ) { const TYPE_7 * VAR_6 ; TYPE_8 VAR_7 ; const TYPE_9 * VAR_8 , * VAR_9 , * VAR_10 ; TYPE_10 VAR_11 ; TYPE_11 VAR_12 ; TYPE_12 VAR_13 ; TYPE_13 VAR_14 ; TYPE_14 VAR_15 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 , VAR_18 , VAR_19 , VAR_20 , VAR_21 ; TYPE_17 * VAR_22 ; if ( VAR_23 > VAR_24 / 4 ) { VAR_25 = VAR_26 ; goto VAR_27 ; } VAR_28 = CAST ( const TYPE_18 * , ( const TYPE_19 * ) ( ( const TYPE_20 * ) VAR_29 -> VAR_30 + VAR_31 ) ) ; if ( METHOD_1 ( VAR_32 , VAR_33 , VAR_34 , sizeof ( * VAR_35 ) , VAR_36 ) == - 1 ) goto VAR_37 ; VAR_38 . VAR_39 = METHOD_2 ( VAR_40 -> VAR_41 ) ; METHOD_3 ( VAR_42 / 8 ) if ( VAR_43 . VAR_44 > METHOD_4 ) { VAR_45 = VAR_46 ; goto VAR_47 ; } VAR_48 . VAR_49 = METHOD_5 ( VAR_50 -> VAR_51 ) ; METHOD_6 ( VAR_52 / ( 4 * sizeof ( * VAR_53 ) ) ) if ( VAR_54 . VAR_55 > METHOD_7 ) goto VAR_56 ; METHOD_8 ( ( ""sectionlen:%uproperties%u\\n"" , VAR_57 . VAR_58 , VAR_59 . VAR_60 ) ) ; if ( * VAR_61 ) { if ( * VAR_62 > METHOD_9 ) goto VAR_63 ; * VAR_64 += VAR_65 . VAR_66 ; VAR_67 = CAST ( TYPE_21 * , METHOD_10 ( * VAR_68 , * VAR_69 * sizeof ( * VAR_70 ) ) ) ; } else { * VAR_71 = VAR_72 . VAR_73 ; VAR_74 = CAST ( TYPE_22 * , METHOD_11 ( * VAR_75 * sizeof ( * VAR_76 ) ) ) ; } if ( VAR_77 == VAR_78 ) goto VAR_79 ; * VAR_80 = VAR_81 ; VAR_82 += * VAR_83 ; * VAR_84 += VAR_85 . VAR_86 ; VAR_87 = CAST ( const TYPE_23 * , ( const TYPE_24 * ) ( ( const TYPE_25 * ) ( const TYPE_26 * ) VAR_88 -> VAR_89 + VAR_90 + sizeof ( VAR_91 ) ) ) ; VAR_92 = CAST ( const TYPE_27 * , ( const TYPE_28 * ) ( ( ( const TYPE_29 * ) ( const TYPE_30 * ) VAR_93 ) + VAR_94 . VAR_95 ) ) ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_98 , 0 , VAR_99 ) == - 1 ) goto VAR_100 ; for ( VAR_101 = 0 ; VAR_102 < VAR_103 . VAR_104 ; VAR_105 ++ ) { TYPE_48 VAR_356 = METHOD_40 ( VAR_133 , ( VAR_352 << 1 ) + 1 ) ; VAR_106 = ( const TYPE_31 * ) ( const TYPE_32 * ) ( ( const TYPE_33 * ) ( const TYPE_34 * ) VAR_107 + METHOD_13 ( VAR_108 , ( VAR_109 << 1 ) + 1 ) ) - 2 * sizeof ( TYPE_35 ) ; if ( VAR_110 > VAR_111 ) { METHOD_14 ( ( ""Ranoftheend%p>%p\\n"" , VAR_112 , VAR_113 ) ) ; goto VAR_114 ; } VAR_115 [ VAR_116 ] . VAR_117 = METHOD_15 ( VAR_118 , VAR_119 << 1 ) ; VAR_120 [ VAR_121 ] . VAR_122 = METHOD_16 ( VAR_123 , 0 ) ; METHOD_17 ( ( ""%"" SIZE_T_FORMAT ""u)id=%xtype=%xoffs=0x%tx,0x%x\\n"" , VAR_352 , VAR_351 [ VAR_352 ] . VAR_353 ) ) ; break ; } } return 0 ; VAR_354 : METHOD_46 ( * VAR_355 ) ; return - 1 ; }",635
636,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ;  TYPE_3 VAR_2 [ VAR_3 ] ;  TYPE_4 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_5 * VAR_12 ; METHOD_1 ( ""selReadStream"" ) ; if ( ! VAR_13 ) return ( TYPE_6 * ) METHOD_2 ( ""streamnotdefined"" , VAR_14 , VAR_15 ) ; if ( METHOD_3 ( VAR_16 , ""SelVersion%d\\n"" , & VAR_17 ) != 1 ) return ( TYPE_7 * ) METHOD_4 ( ""notaselfile"" , VAR_18 , VAR_19 ) ; if ( VAR_20 != VAR_21 ) return ( TYPE_8 * ) METHOD_5 ( ""invalidselversion"" , VAR_22 , VAR_23 ) ;  if ( METHOD_6 ( VAR_24 , VAR_25 , VAR_26 ) == VAR_27 )  return ( TYPE_9 * ) METHOD_7 ( ""errorreadingintolinebuf"" , VAR_28 , VAR_29 ) ; VAR_30 = METHOD_8 ( VAR_31 ) ;  METHOD_9 ( VAR_32 , ""------%s------"" , VAR_33 ) ;  if ( METHOD_10 ( VAR_34 , ""sy=%d,sx=%d,cy=%d,cx=%d\\n"" , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 ) != 4 ) { METHOD_11 ( VAR_39 ) ; return ( TYPE_10 * ) METHOD_12 ( ""dimensionsnotread"" , VAR_40 , VAR_41 ) ; } if ( ( VAR_42 = METHOD_13 ( VAR_43 , VAR_44 , VAR_45 ) ) == VAR_46 ) { METHOD_14 ( VAR_47 ) ; return ( TYPE_11 * ) METHOD_15 ( ""selnotmade"" , VAR_48 , VAR_49 ) ; } METHOD_16 ( VAR_50 , VAR_51 , VAR_52 ) ; for ( VAR_53 = 0 ; VAR_54 < VAR_55 ; VAR_56 ++ ) { VAR_57 = METHOD_17 ( VAR_58 , """" ) ; for ( VAR_59 = 0 ; VAR_60 < VAR_61 ; VAR_62 ++ ) VAR_63 = METHOD_18 ( VAR_64 , ""%1d"" , & VAR_65 -> VAR_66 [ VAR_67 ] [ VAR_68 ] ) ; VAR_69 = METHOD_19 ( VAR_70 , ""\\n"" ) ; } VAR_71 = METHOD_20 ( VAR_72 , ""\\n"" ) ; METHOD_21 ( VAR_73 ) ; return VAR_74 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 VAR_2 [ VAR_3 ] ; TYPE_4 VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_5 * VAR_12 ; METHOD_1 ( ""selReadStream"" ) ; if ( ! VAR_13 ) return ( TYPE_6 * ) METHOD_2 ( ""streamnotdefined"" , VAR_14 , VAR_15 ) ; if ( METHOD_3 ( VAR_16 , ""SelVersion%d\\n"" , & VAR_17 ) != 1 ) return ( TYPE_7 * ) METHOD_4 ( ""notaselfile"" , VAR_18 , VAR_19 ) ; if ( VAR_20 != VAR_21 ) return ( TYPE_8 * ) METHOD_5 ( ""invalidselversion"" , VAR_22 , VAR_23 ) ; if ( METHOD_6 ( VAR_24 , VAR_25 , VAR_26 ) == VAR_27 ) return ( TYPE_9 * ) METHOD_7 ( ""errorreadingintolinebuf"" , VAR_28 , VAR_29 ) ; VAR_30 = METHOD_8 ( VAR_31 ) ; METHOD_9 ( VAR_32 , ""------%s------"" , VAR_33 ) ; if ( METHOD_10 ( VAR_34 , ""sy=%d,sx=%d,cy=%d,cx=%d\\n"" , & VAR_35 , & VAR_36 , & VAR_37 , & VAR_38 ) != 4 ) { METHOD_11 ( VAR_39 ) ; return ( TYPE_10 * ) METHOD_12 ( ""dimensionsnotread"" , VAR_40 , VAR_41 ) ; } if ( ( VAR_42 = METHOD_13 ( VAR_43 , VAR_44 , VAR_45 ) ) == VAR_46 ) { METHOD_14 ( VAR_47 ) ; return ( TYPE_11 * ) METHOD_15 ( ""selnotmade"" , VAR_48 , VAR_49 ) ; } METHOD_16 ( VAR_50 , VAR_51 , VAR_52 ) ; for ( VAR_53 = 0 ; VAR_54 < VAR_55 ; VAR_56 ++ ) { VAR_57 = METHOD_17 ( VAR_58 , """" ) ; for ( VAR_59 = 0 ; VAR_60 < VAR_61 ; VAR_62 ++ ) VAR_63 = METHOD_18 ( VAR_64 , ""%1d"" , & VAR_65 -> VAR_66 [ VAR_67 ] [ VAR_68 ] ) ; VAR_69 = METHOD_19 ( VAR_70 , ""\\n"" ) ; } VAR_71 = METHOD_20 ( VAR_72 , ""\\n"" ) ; METHOD_21 ( VAR_73 ) ; return VAR_74 ; }",636
637,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ;   if ( METHOD_1 ( VAR_4 ) ) {  METHOD_2 ( ) ; METHOD_3 ( VAR_5 ) ; if ( METHOD_4 ( VAR_6 ) )  METHOD_5 ( VAR_7 ) ;   METHOD_6 ( ) ;  METHOD_7 ( VAR_8 ) ; } METHOD_8 ( & VAR_9 -> VAR_10 ) ; METHOD_9 ( VAR_11 -> VAR_12 , METHOD_10 ( & VAR_13 -> VAR_14 ) == 0 ) ; METHOD_11 ( & VAR_15 -> VAR_16 ) ; if ( VAR_17 -> VAR_18 ) METHOD_12 ( VAR_19 -> VAR_20 , VAR_21 ) ; METHOD_13 ( VAR_22 -> VAR_23 ) ; METHOD_14 ( VAR_24 ) ; METHOD_15 ( VAR_25 -> VAR_26 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = VAR_2 -> VAR_3 ; if ( METHOD_1 ( VAR_4 ) ) { METHOD_2 ( ) ; METHOD_3 ( VAR_5 ) ; if ( METHOD_4 ( VAR_6 ) ) METHOD_5 ( VAR_7 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_8 ) ; } METHOD_8 ( & VAR_9 -> VAR_10 ) ; METHOD_9 ( VAR_11 -> VAR_12 , METHOD_10 ( & VAR_13 -> VAR_14 ) == 0 ) ; METHOD_11 ( & VAR_15 -> VAR_16 ) ; if ( VAR_17 -> VAR_18 ) METHOD_12 ( VAR_19 -> VAR_20 , VAR_21 ) ; METHOD_13 ( VAR_22 -> VAR_23 ) ; METHOD_14 ( VAR_24 ) ; METHOD_15 ( VAR_25 -> VAR_26 ) ; }",637
638," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ,  const struct STRUCT_OR_UNION_2 * VAR_1 , const struct STRUCT_OR_UNION_3 * VAR_2 ) {  TYPE_2 VAR_3 , VAR_4 ;   VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ;   VAR_8 = METHOD_2 ( VAR_9 , VAR_10 ) ;  VAR_11 ^= METHOD_3 ( STRUCT_OR_UNION_4 ) ; VAR_12 = METHOD_4 ( VAR_13 , 1 ) ; if ( METHOD_5 ( ! VAR_14 ) ) VAR_15 = 1 << 31 ; return VAR_16 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 , const struct STRUCT_OR_UNION_2 * VAR_1 , const struct STRUCT_OR_UNION_3 * VAR_2 ) { TYPE_2 VAR_3 , VAR_4 ; VAR_5 = METHOD_1 ( VAR_6 , VAR_7 ) ; VAR_8 = METHOD_2 ( VAR_9 , VAR_10 ) ; VAR_11 ^= METHOD_3 ( STRUCT_OR_UNION_4 ) ; VAR_12 = METHOD_4 ( VAR_13 , 1 ) ; if ( METHOD_5 ( ! VAR_14 ) ) VAR_15 = 1 << 31 ; return VAR_16 ; }",638
639,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 VAR_0 ; TYPE_2 VAR_1 ; TYPE_3 METHOD_1 ; TYPE_4 VAR_2 ; VAR_3 = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 == - 1 ) { METHOD_3 ( STRUCT_OR_UNION_2 , ""FailedtocreateICMP6socket."" ) ; return - VAR_8 ; } VAR_9 = 1 ; VAR_10 = METHOD_4 ( VAR_11 , VAR_12 , VAR_13 , & VAR_14 , sizeof ( VAR_15 ) ) ; if ( VAR_16 == - 1 ) { METHOD_5 ( STRUCT_OR_UNION_3 , ""FailedtosetsockoptIPV6_RECVPKTINFO."" ) ; METHOD_6 = - VAR_17 ; goto VAR_18 ; } VAR_19 = 255 ; VAR_20 = METHOD_7 ( VAR_21 , VAR_22 , VAR_23 , & VAR_24 , sizeof ( VAR_25 ) ) ; if ( VAR_26 == - 1 ) {  METHOD_8 ( STRUCT_OR_UNION_4 , ""FailedtosetsockoptIPV6_MULTICAST_HOPS."" ) ;  METHOD_9 = - VAR_27 ; goto VAR_28 ; } STRUCT_OR_UNION_5 -> VAR_29 = VAR_30 ; return 0 ; VAR_31 : METHOD_10 ( VAR_32 ) ; return METHOD_11 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { TYPE_1 VAR_0 ; TYPE_2 VAR_1 ; TYPE_3 METHOD_1 ; TYPE_4 VAR_2 ; VAR_3 = METHOD_2 ( VAR_4 , VAR_5 , VAR_6 ) ; if ( VAR_7 == - 1 ) { METHOD_3 ( STRUCT_OR_UNION_2 , ""FailedtocreateICMP6socket."" ) ; return - VAR_8 ; } VAR_9 = 1 ; VAR_10 = METHOD_4 ( VAR_11 , VAR_12 , VAR_13 , & VAR_14 , sizeof ( VAR_15 ) ) ; if ( VAR_16 == - 1 ) { METHOD_5 ( STRUCT_OR_UNION_3 , ""FailedtosetsockoptIPV6_RECVPKTINFO."" ) ; METHOD_6 = - VAR_17 ; goto VAR_18 ; } VAR_19 = 255 ; VAR_20 = METHOD_7 ( VAR_21 , VAR_22 , VAR_23 , & VAR_24 , sizeof ( VAR_25 ) ) ; if ( VAR_26 == - 1 ) { METHOD_8 ( STRUCT_OR_UNION_4 , ""FailedtosetsockoptIPV6_MULTICAST_HOPS."" ) ; METHOD_9 = - VAR_27 ; goto VAR_28 ; } STRUCT_OR_UNION_5 -> VAR_29 = VAR_30 ; return 0 ; VAR_31 : METHOD_10 ( VAR_32 ) ; return METHOD_11 ; }",639
640,TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( & VAR_1 ) ;  METHOD_2 ( & VAR_2 -> VAR_3 ) ;   METHOD_3 ( & VAR_4 -> VAR_5 ) ;  METHOD_4 ( & VAR_6 ) ; METHOD_5 ( & VAR_7 -> VAR_8 . VAR_9 ) ; VAR_10 -> VAR_11 = 1 ; METHOD_6 ( & VAR_12 -> VAR_13 ) ; METHOD_7 ( & VAR_14 -> VAR_15 . VAR_16 ) ; },TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { METHOD_1 ( & VAR_1 ) ; METHOD_2 ( & VAR_2 -> VAR_3 ) ; METHOD_3 ( & VAR_4 -> VAR_5 ) ; METHOD_4 ( & VAR_6 ) ; METHOD_8 ( & VAR_14 -> VAR_15 . VAR_16 ) ; },640
641,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) {  TYPE_5 * VAR_4 = & VAR_5 -> VAR_6 ;  TYPE_6 * const VAR_7 = & VAR_8 -> VAR_9 ;  TYPE_7 VAR_10 ;  TYPE_8 VAR_11 = VAR_12 -> VAR_13 ;  TYPE_9 VAR_14 = VAR_15 ;  TYPE_10 VAR_16 = { 0 , 0 } ; TYPE_11 VAR_17 ; TYPE_12 * VAR_18 = & VAR_19 -> VAR_20 . VAR_21 [ 0 ] -> VAR_22 [ 0 ] . VAR_23 [ 0 ] . VAR_24 ; struct STRUCT_OR_UNION_0 VAR_25 = VAR_26 -> VAR_27 [ 0 ] . VAR_28 ; struct STRUCT_OR_UNION_1 VAR_29 = VAR_30 -> VAR_31 [ 0 ] . VAR_32 [ 0 ] ; VAR_33 . VAR_34 = VAR_35 . VAR_36 >> 3 ; VAR_37 . VAR_38 = VAR_39 . VAR_40 >> 3 ; VAR_41 -> VAR_42 [ 0 ] . VAR_43 . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 [ 0 ] . VAR_48 . VAR_49 = VAR_50 ; VAR_51 -> VAR_52 [ 0 ] . VAR_53 [ 0 ] . VAR_54 = VAR_55 ; VAR_56 -> VAR_57 [ 0 ] . VAR_58 [ 0 ] . VAR_59 = VAR_60 ;  if ( VAR_61 -> VAR_62 < 8 )  VAR_63 = VAR_64 -> VAR_65 . VAR_66 + ( ( VAR_67 -> VAR_68 > 5 ) ? 1 : 0 ) ; else VAR_69 = VAR_70 -> VAR_71 . VAR_72 + 2 ;  VAR_73 = METHOD_1 ( VAR_74 , ( VAR_75 -> VAR_76 . VAR_77 - 2 ) ) ;  METHOD_2 ( VAR_78 , & VAR_79 , VAR_80 , VAR_81 , 1 ,  & VAR_82 -> VAR_83 [ VAR_84 ] , 0 , & VAR_85 , VAR_86 ) ;   {  TYPE_13 VAR_87 ; unsigned TYPE_14 VAR_88 ; VAR_89 = VAR_90 -> METHOD_3 ( VAR_91 , VAR_92 , & VAR_93 , VAR_94 -> VAR_95 . VAR_96 , VAR_97 -> VAR_98 , & VAR_99 -> VAR_100 [ VAR_101 ] , 0 , VAR_102 -> VAR_103 . VAR_104 , VAR_105 , VAR_106 , & VAR_107 , & VAR_108 ) ; } VAR_109 -> VAR_110 [ 0 ] . VAR_111 = VAR_112 ; VAR_113 -> VAR_114 [ 0 ] . VAR_115 [ 0 ] = VAR_116 ; return VAR_117 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 * const VAR_109 = & VAR_102 -> VAR_118 . VAR_6 ; TYPE_6 * const VAR_7 = & VAR_8 -> VAR_9 ; TYPE_7 VAR_10 ; TYPE_8 VAR_11 = VAR_12 -> VAR_13 ; TYPE_9 VAR_14 = VAR_15 ; TYPE_10 VAR_16 = { 0 , 0 } ; TYPE_11 VAR_17 ; TYPE_12 * VAR_18 = & VAR_19 -> VAR_20 . VAR_21 [ 0 ] -> VAR_22 [ 0 ] . VAR_23 [ 0 ] . VAR_24 ; struct STRUCT_OR_UNION_0 VAR_25 = VAR_26 -> VAR_27 [ 0 ] . VAR_28 ; struct STRUCT_OR_UNION_1 VAR_29 = VAR_30 -> VAR_31 [ 0 ] . VAR_32 [ 0 ] ; VAR_33 . VAR_34 = VAR_35 . VAR_36 >> 3 ; VAR_37 . VAR_38 = VAR_39 . VAR_40 >> 3 ; VAR_41 -> VAR_42 [ 0 ] . VAR_43 . VAR_44 = VAR_45 ; VAR_46 -> VAR_47 [ 0 ] . VAR_48 . VAR_49 = VAR_50 ; VAR_51 -> VAR_52 [ 0 ] . VAR_53 [ 0 ] . VAR_54 = VAR_55 ; VAR_56 -> VAR_57 [ 0 ] . VAR_58 [ 0 ] . VAR_59 = VAR_60 ; VAR_80 = VAR_119 -> VAR_72 ; VAR_80 = METHOD_1 ( VAR_80 , VAR_122 - 2 ) ) ; METHOD_2 ( VAR_78 , & VAR_79 , VAR_80 , VAR_81 , 1 , METHOD_4 ( VAR_102 , VAR_121 ) , & VAR_82 -> VAR_83 [ VAR_84 ] , 0 , & VAR_85 , VAR_86 ) ; { TYPE_13 VAR_87 ; unsigned TYPE_14 VAR_88 ; VAR_89 = VAR_90 -> METHOD_3 ( VAR_91 , VAR_92 , & VAR_93 , VAR_94 -> VAR_95 . VAR_96 , VAR_97 -> VAR_98 , & VAR_99 -> VAR_100 [ VAR_101 ] , 0 , VAR_102 -> VAR_103 . VAR_104 , VAR_105 , VAR_106 , & VAR_107 , & VAR_108 ) ; } VAR_109 -> VAR_110 [ 0 ] . VAR_111 = VAR_112 ; VAR_113 -> VAR_114 [ 0 ] . VAR_115 [ 0 ] = VAR_116 ; return VAR_117 ; }",641
642,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = ( struct STRUCT_OR_UNION_4 * ) STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_0 ; struct STRUCT_OR_UNION_7 * VAR_1 ; TYPE_1 VAR_2 , VAR_3 ; VAR_4 = METHOD_1 ( STRUCT_OR_UNION_8 -> STRUCT_OR_UNION_9 . VAR_5 , STRUCT_OR_UNION_10 -> STRUCT_OR_UNION_11 . VAR_6 ) ; VAR_7 = METHOD_2 ( VAR_8 , STRUCT_OR_UNION_12 -> STRUCT_OR_UNION_13 . VAR_9 ) ; if ( ! VAR_10 ) { METHOD_3 ( STRUCT_OR_UNION_14 , ""Couldn\'tgetaltsetting\\n"" ) ; return - VAR_11 ; }  VAR_12 = METHOD_4 ( VAR_13 -> VAR_14 [ 0 ] . VAR_15 . VAR_16 ) ;  VAR_17 = METHOD_5 ( STRUCT_OR_UNION_15 , VAR_18 , VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; VAR_22 = STRUCT_OR_UNION_16 -> VAR_23 -> METHOD_6 ( STRUCT_OR_UNION_17 ) ; if ( VAR_24 < 0 ) goto VAR_25 ; VAR_26 = METHOD_7 ( STRUCT_OR_UNION_18 , VAR_27 , 1 ) ; VAR_28 : if ( VAR_29 < 0 ) METHOD_8 ( STRUCT_OR_UNION_19 , VAR_30 , ""Startingstreamfailed\\n"" ) ; else METHOD_9 ( STRUCT_OR_UNION_20 , VAR_31 , ""Startedstreaming\\n"" ) ; return ( VAR_32 < 0 ) ? VAR_33 : 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 = ( struct STRUCT_OR_UNION_4 * ) STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_0 ; struct STRUCT_OR_UNION_7 * VAR_1 ; TYPE_1 VAR_2 , VAR_3 ; VAR_4 = METHOD_1 ( STRUCT_OR_UNION_8 -> STRUCT_OR_UNION_9 . VAR_5 , STRUCT_OR_UNION_10 -> STRUCT_OR_UNION_11 . VAR_6 ) ; VAR_7 = METHOD_2 ( VAR_8 , STRUCT_OR_UNION_12 -> STRUCT_OR_UNION_13 . VAR_9 ) ; if ( ! VAR_10 ) { METHOD_3 ( STRUCT_OR_UNION_14 , ""Couldn\'tgetaltsetting\\n"" ) ; return - VAR_11 ; } if ( VAR_13 -> VAR_15 . VAR_34 < 1 ) return - VAR_35 ; VAR_12 = METHOD_4 ( VAR_13 -> VAR_14 [ 0 ] . VAR_15 . VAR_16 ) ; VAR_17 = METHOD_5 ( STRUCT_OR_UNION_15 , VAR_18 , VAR_19 ) ; if ( VAR_20 < 0 ) return VAR_21 ; VAR_22 = STRUCT_OR_UNION_16 -> VAR_23 -> METHOD_6 ( STRUCT_OR_UNION_17 ) ; if ( VAR_24 < 0 ) goto VAR_25 ; VAR_26 = METHOD_7 ( STRUCT_OR_UNION_18 , VAR_27 , 1 ) ; VAR_28 : if ( VAR_29 < 0 ) METHOD_8 ( STRUCT_OR_UNION_19 , VAR_30 , ""Startingstreamfailed\\n"" ) ; else METHOD_9 ( STRUCT_OR_UNION_20 , VAR_31 , ""Startedstreaming\\n"" ) ; return ( VAR_32 < 0 ) ? VAR_33 : 0 ; }",642
643,"static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { TYPE_0 VAR_2 = - VAR_3 , VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; VAR_6 = METHOD_1 ( ) ;  VAR_7 = METHOD_2 ( VAR_8 , VAR_9 -> VAR_10 ) ;  if ( VAR_11 ) { METHOD_3 ( 1 , ""Existingsmbsessfound(status=%d)"" , VAR_12 -> VAR_13 ) ; METHOD_4 ( VAR_14 ) ; METHOD_5 ( & VAR_15 -> VAR_16 ) ; VAR_17 = METHOD_6 ( VAR_18 , VAR_19 ) ; if ( VAR_20 ) { METHOD_7 ( & VAR_21 -> VAR_22 ) ; METHOD_8 ( VAR_23 ) ; METHOD_9 ( VAR_24 ) ; return METHOD_10 ( VAR_25 ) ; } if ( VAR_26 -> VAR_27 ) { METHOD_11 ( 1 , ""Sessionneedsreconnect"" ) ; VAR_28 = METHOD_12 ( VAR_29 , VAR_30 , VAR_31 -> VAR_32 ) ; if ( VAR_33 ) { METHOD_13 ( & VAR_34 -> VAR_35 ) ; METHOD_14 ( VAR_36 ) ; METHOD_15 ( VAR_37 ) ; return METHOD_16 ( VAR_38 ) ; } } METHOD_17 ( & VAR_39 -> VAR_40 ) ; METHOD_18 ( VAR_41 ) ; return VAR_42 ; } METHOD_19 ( 1 , ""Existingsmbsessnotfound"" ) ; VAR_43 = METHOD_20 ( ) ; if ( VAR_44 == VAR_45 ) goto VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; if ( VAR_50 -> VAR_51 . VAR_52 . VAR_53 == VAR_54 ) METHOD_21 ( VAR_55 -> VAR_56 , ""%pI6"" , & VAR_57 -> VAR_58 . VAR_59 . VAR_60 ) ; else METHOD_22 ( VAR_61 -> VAR_62 , ""%pI4"" , & VAR_63 -> VAR_64 . VAR_65 . VAR_66 . VAR_67 ) ; if ( VAR_68 -> VAR_69 ) METHOD_23 ( VAR_70 -> VAR_71 , VAR_72 -> VAR_73 , VAR_74 ) ; if ( VAR_75 -> VAR_76 ) { VAR_77 -> VAR_78 = METHOD_24 ( VAR_79 -> VAR_80 , VAR_81 ) ; if ( ! VAR_82 -> VAR_83 ) goto VAR_84 ; } if ( VAR_85 -> VAR_86 ) { TYPE_1 VAR_87 = METHOD_25 ( VAR_88 -> VAR_89 ) ; VAR_90 -> VAR_91 = METHOD_26 ( VAR_92 + 1 , VAR_93 ) ; if ( VAR_94 -> VAR_95 ) METHOD_27 ( VAR_96 -> VAR_97 , VAR_98 -> VAR_99 ) ; } VAR_100 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; METHOD_28 ( & VAR_108 -> VAR_109 ) ; VAR_110 = METHOD_29 ( VAR_111 , VAR_112 ) ; if ( ! VAR_113 ) VAR_114 = METHOD_30 ( VAR_115 , VAR_116 , VAR_117 -> VAR_118 ) ; METHOD_31 ( & VAR_119 -> VAR_120 ) ; if ( VAR_121 ) goto VAR_122 ; METHOD_32 ( & VAR_123 ) ; METHOD_33 ( & VAR_124 -> VAR_125 , & VAR_126 -> VAR_127 ) ; METHOD_34 ( & VAR_128 ) ; METHOD_35 ( VAR_129 ) ; return VAR_130 ; VAR_131 : METHOD_36 ( VAR_132 ) ; METHOD_37 ( VAR_133 ) ; return METHOD_38 ( VAR_134 ) ; }","static struct STRUCT_OR_UNION_0 * METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_0 , struct STRUCT_OR_UNION_2 * VAR_1 ) { TYPE_0 VAR_2 = - VAR_3 , VAR_4 ; struct STRUCT_OR_UNION_3 * VAR_5 ; VAR_6 = METHOD_1 ( ) ; VAR_7 = METHOD_2 ( VAR_8 , VAR_9 -> VAR_10 ) ; if ( VAR_11 ) { METHOD_3 ( 1 , ""Existingsmbsessfound(status=%d)"" , VAR_12 -> VAR_13 ) ; METHOD_4 ( VAR_14 ) ; METHOD_5 ( & VAR_15 -> VAR_16 ) ; VAR_17 = METHOD_6 ( VAR_18 , VAR_19 ) ; if ( VAR_20 ) { METHOD_7 ( & VAR_21 -> VAR_22 ) ; METHOD_8 ( VAR_23 ) ; METHOD_9 ( VAR_24 ) ; return METHOD_10 ( VAR_25 ) ; } if ( VAR_26 -> VAR_27 ) { METHOD_11 ( 1 , ""Sessionneedsreconnect"" ) ; VAR_28 = METHOD_12 ( VAR_29 , VAR_30 , VAR_31 -> VAR_32 ) ; if ( VAR_33 ) { METHOD_13 ( & VAR_34 -> VAR_35 ) ; METHOD_14 ( VAR_36 ) ; METHOD_15 ( VAR_37 ) ; return METHOD_16 ( VAR_38 ) ; } } METHOD_17 ( & VAR_39 -> VAR_40 ) ; METHOD_18 ( VAR_41 ) ; return VAR_42 ; } METHOD_19 ( 1 , ""Existingsmbsessnotfound"" ) ; VAR_43 = METHOD_20 ( ) ; if ( VAR_44 == VAR_45 ) goto VAR_46 ; VAR_47 -> VAR_48 = VAR_49 ; if ( VAR_50 -> VAR_51 . VAR_52 . VAR_53 == VAR_54 ) METHOD_21 ( VAR_55 -> VAR_56 , ""%pI6"" , & VAR_57 -> VAR_58 . VAR_59 . VAR_60 ) ; else METHOD_22 ( VAR_61 -> VAR_62 , ""%pI4"" , & VAR_63 -> VAR_64 . VAR_65 . VAR_66 . VAR_67 ) ; if ( VAR_68 -> VAR_69 ) METHOD_23 ( VAR_70 -> VAR_71 , VAR_72 -> VAR_73 , VAR_74 ) ; if ( VAR_75 -> VAR_76 ) { VAR_77 -> VAR_78 = METHOD_24 ( VAR_79 -> VAR_80 , VAR_81 ) ; if ( ! VAR_82 -> VAR_83 ) goto VAR_84 ; } if ( VAR_85 -> VAR_86 ) { TYPE_1 VAR_87 = METHOD_25 ( VAR_88 -> VAR_89 ) ; VAR_90 -> VAR_91 = METHOD_26 ( VAR_92 + 1 , VAR_93 ) ; if ( VAR_94 -> VAR_95 ) METHOD_27 ( VAR_96 -> VAR_97 , VAR_98 -> VAR_99 ) ; } VAR_100 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 ; METHOD_28 ( & VAR_108 -> VAR_109 ) ; VAR_110 = METHOD_29 ( VAR_111 , VAR_112 ) ; if ( ! VAR_113 ) VAR_114 = METHOD_30 ( VAR_115 , VAR_116 , VAR_117 -> VAR_118 ) ; METHOD_31 ( & VAR_119 -> VAR_120 ) ; if ( VAR_121 ) goto VAR_122 ; METHOD_32 ( & VAR_123 ) ; METHOD_33 ( & VAR_124 -> VAR_125 , & VAR_126 -> VAR_127 ) ; METHOD_34 ( & VAR_128 ) ; METHOD_35 ( VAR_129 ) ; return VAR_130 ; VAR_131 : METHOD_36 ( VAR_132 ) ; METHOD_37 ( VAR_133 ) ; return METHOD_38 ( VAR_134 ) ; }",643
644,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 ) { TYPE_5 VAR_5 = ( VAR_6 + 15 ) & ~ 15 ; TYPE_6 VAR_7 = ( VAR_8 + 15 ) & ~ 15 ; TYPE_7 VAR_9 = ( ( VAR_10 + 2 * VAR_11 ) + 31 ) & ~ 31 ; TYPE_8 VAR_12 = ( VAR_13 + 2 * VAR_14 ) * VAR_15 ; TYPE_9 VAR_16 = VAR_17 >> 1 ; TYPE_10 VAR_18 = VAR_19 >> 1 ; TYPE_11 VAR_20 = VAR_21 >> 1 ; TYPE_12 VAR_22 = ( VAR_23 + VAR_24 ) * VAR_25 ; const TYPE_13 VAR_26 = VAR_27 + 2 * VAR_28 ; if ( ! VAR_29 -> VAR_30 ) { VAR_31 -> VAR_32 = ( TYPE_14 * ) METHOD_1 ( 32 , VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 ; } if ( ! VAR_37 -> VAR_38 || VAR_39 -> VAR_40 < VAR_41 ) return - 1 ; if ( VAR_42 & 0x1f ) return - 3 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ;  VAR_58 -> VAR_59 = VAR_60 ;  VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; VAR_67 -> VAR_68 = 0 ; VAR_69 -> VAR_70 = 0 ; VAR_71 -> VAR_72 = 0 ; VAR_73 -> VAR_74 = VAR_75 ; VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = VAR_81 -> VAR_82 + ( VAR_83 * VAR_84 ) + VAR_85 ; VAR_86 -> VAR_87 = VAR_88 -> VAR_89 + VAR_90 + ( VAR_91 / 2 * VAR_92 ) + VAR_93 / 2 ; VAR_94 -> VAR_95 = VAR_96 -> VAR_97 + VAR_98 + VAR_99 + ( VAR_100 / 2 * VAR_101 ) + VAR_102 / 2 ; VAR_103 -> VAR_104 = VAR_105 ; VAR_106 -> VAR_107 = 0 ; return 0 ; } return - 2 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { if ( VAR_4 ) { TYPE_5 VAR_5 = ( VAR_6 + 15 ) & ~ 15 ; TYPE_6 VAR_7 = ( VAR_8 + 15 ) & ~ 15 ; TYPE_7 VAR_9 = ( ( VAR_10 + 2 * VAR_11 ) + 31 ) & ~ 31 ; TYPE_8 VAR_12 = ( VAR_13 + 2 * VAR_14 ) * VAR_15 ; TYPE_9 VAR_16 = VAR_17 >> 1 ; TYPE_10 VAR_18 = VAR_19 >> 1 ; TYPE_11 VAR_20 = VAR_21 >> 1 ; TYPE_12 VAR_22 = ( VAR_23 + VAR_24 ) * VAR_25 ; const TYPE_13 VAR_26 = VAR_27 + 2 * VAR_28 ; if ( ! VAR_29 -> VAR_30 ) { VAR_31 -> VAR_32 = ( TYPE_14 * ) METHOD_1 ( 32 , VAR_33 ) ; VAR_34 -> VAR_35 = VAR_36 ; } if ( ! VAR_37 -> VAR_38 || VAR_39 -> VAR_40 < VAR_41 ) return - 1 ; if ( VAR_42 & 0x1f ) return - 3 ; VAR_43 -> VAR_44 = VAR_45 ; VAR_46 -> VAR_47 = VAR_48 ; VAR_49 -> VAR_50 = VAR_51 ; VAR_52 -> VAR_53 = VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = VAR_60 ; VAR_61 -> VAR_62 = VAR_63 ; VAR_64 -> VAR_65 = VAR_66 ; VAR_67 -> VAR_68 = 0 ; VAR_69 -> VAR_70 = 0 ; VAR_71 -> VAR_72 = 0 ; VAR_73 -> VAR_74 = VAR_75 ; VAR_76 -> VAR_77 = VAR_78 ; VAR_79 -> VAR_80 = VAR_81 -> VAR_82 + ( VAR_83 * VAR_84 ) + VAR_85 ; VAR_86 -> VAR_87 = VAR_88 -> VAR_89 + VAR_90 + ( VAR_91 / 2 * VAR_92 ) + VAR_93 / 2 ; VAR_94 -> VAR_95 = VAR_96 -> VAR_97 + VAR_98 + VAR_99 + ( VAR_100 / 2 * VAR_101 ) + VAR_102 / 2 ; VAR_103 -> VAR_104 = VAR_105 ; VAR_106 -> VAR_108 = ( VAR_45 + 1 ) / 2 ; VAR_106 -> VAR_109 = ( VAR_48 + 1 ) / 2 ; VAR_106 -> VAR_107 = 0 ; return 0 ; } return - 2 ; }",644
645,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_1 VAR_3 ; METHOD_2 ( VAR_4 ) ; METHOD_3 ( & VAR_5 -> VAR_6 ) ; if ( METHOD_4 ( VAR_7 , VAR_8 ) || ! METHOD_5 ( VAR_9 , VAR_10 ) ) { struct STRUCT_OR_UNION_2 VAR_11 = { . VAR_12 = VAR_13 , } ; METHOD_6 ( VAR_14 , & VAR_15 ) ; }  METHOD_7 ( VAR_16 ) ;  if ( METHOD_8 ( VAR_17 ) && ! VAR_18 -> VAR_19 ) { struct STRUCT_OR_UNION_3 VAR_20 = { . VAR_21 = VAR_22 | VAR_23 , } ; METHOD_9 ( VAR_24 , & VAR_25 ) ; } METHOD_10 ( VAR_26 ) ; METHOD_11 ( VAR_27 , VAR_28 ) ; METHOD_12 ( VAR_29 ) ; METHOD_13 ( & VAR_30 -> VAR_31 ) ; METHOD_14 ( VAR_32 ) ; METHOD_15 ( VAR_33 -> VAR_34 ) ; METHOD_16 ( VAR_35 -> VAR_36 ) ; METHOD_17 ( VAR_37 ) ; METHOD_18 ( VAR_38 ) ; METHOD_19 ( VAR_39 -> VAR_40 ) ; METHOD_20 ( VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 ; if ( VAR_45 -> VAR_46 ) METHOD_21 ( VAR_47 -> VAR_48 ) ; METHOD_22 ( VAR_49 -> VAR_50 ) ; METHOD_23 ( VAR_51 ) ; METHOD_24 ( VAR_52 -> VAR_53 ) ; TYPE_2 TYPE_3 for ( VAR_54 = 0 ; VAR_55 < VAR_56 ; VAR_57 ++ ) METHOD_25 ( VAR_58 -> VAR_59 [ VAR_60 ] ) ; METHOD_26 ( VAR_61 ) ; for ( VAR_62 = 0 ; VAR_63 < VAR_64 ; VAR_65 ++ ) METHOD_27 ( VAR_66 -> VAR_67 [ VAR_68 ] ) ; METHOD_28 ( VAR_69 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; TYPE_1 VAR_3 ; METHOD_2 ( VAR_4 ) ; METHOD_3 ( & VAR_5 -> VAR_6 ) ; if ( METHOD_4 ( VAR_7 , VAR_8 ) || ! METHOD_5 ( VAR_9 , VAR_10 ) ) { struct STRUCT_OR_UNION_2 VAR_11 = { . VAR_12 = VAR_13 , } ; METHOD_6 ( VAR_14 , & VAR_15 ) ; } METHOD_7 ( VAR_16 ) ; if ( METHOD_8 ( VAR_17 ) && ! VAR_18 -> VAR_19 ) { struct STRUCT_OR_UNION_3 VAR_20 = { . VAR_21 = VAR_22 | VAR_23 , } ; METHOD_9 ( VAR_24 , & VAR_25 ) ; } METHOD_10 ( VAR_26 ) ; METHOD_11 ( VAR_27 , VAR_28 ) ; METHOD_12 ( VAR_29 ) ; METHOD_13 ( & VAR_30 -> VAR_31 ) ; METHOD_14 ( VAR_32 ) ; METHOD_15 ( VAR_33 -> VAR_34 ) ; METHOD_16 ( VAR_35 -> VAR_36 ) ; METHOD_17 ( VAR_37 ) ; METHOD_18 ( VAR_38 ) ; METHOD_19 ( VAR_39 -> VAR_40 ) ; METHOD_20 ( VAR_41 ) ; VAR_42 -> VAR_43 = VAR_44 ; if ( VAR_45 -> VAR_46 ) METHOD_21 ( VAR_47 -> VAR_48 ) ; METHOD_22 ( VAR_49 -> VAR_50 ) ; METHOD_23 ( VAR_51 ) ; METHOD_24 ( VAR_52 -> VAR_53 ) ; TYPE_2 TYPE_3 for ( VAR_54 = 0 ; VAR_55 < VAR_56 ; VAR_57 ++ ) METHOD_25 ( VAR_58 -> VAR_59 [ VAR_60 ] ) ; METHOD_26 ( VAR_61 ) ; for ( VAR_62 = 0 ; VAR_63 < VAR_64 ; VAR_65 ++ ) METHOD_27 ( VAR_66 -> VAR_67 [ VAR_68 ] ) ; METHOD_28 ( VAR_69 ) ; }",645
646,"TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 VAR_4 , const TYPE_5 * VAR_5 , TYPE_6 VAR_6 ) { unsigned TYPE_7 VAR_7 ; { TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; METHOD_1 ( & VAR_10 , VAR_11 , VAR_12 ) ; VAR_13 . METHOD_2 ( & VAR_14 , & VAR_15 , & VAR_16 -> VAR_17 , & VAR_18 -> VAR_19 ) ; VAR_20 = METHOD_3 ( & VAR_21 , VAR_22 ) ; if ( VAR_23 < VAR_24 ) { return ""2"" ""exponentiationfailed;toomanyoctets"" ; } METHOD_4 ( VAR_25 , VAR_26 . VAR_27 , VAR_28 ) ; METHOD_5 ( VAR_29 . VAR_30 ) ; METHOD_6 ( & VAR_31 ) ; } VAR_32 = VAR_33 - 3 - VAR_34 ; METHOD_7 ( VAR_35 , METHOD_8 ( ""verify_shdecryptedSIG1:"" , VAR_36 , VAR_37 ) ) ; METHOD_9 ( VAR_38 , METHOD_10 ( ""pad_lencalculated:%dhash_len:%d"" , VAR_39 , ( TYPE_10 ) VAR_40 ) ) ; if ( VAR_41 [ 0 ] != 0x00 || VAR_42 [ 1 ] != 0x01 || VAR_43 [ VAR_44 + 2 ] != 0x00 ) { return ""3"" ""SIGpaddingdoesnotcheckout"" ; }  VAR_45 += VAR_46 + 3 ;   ( * VAR_47 ) = VAR_48 ;  return VAR_49 ; }","TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 * * VAR_3 , TYPE_4 VAR_4 , const TYPE_5 * VAR_5 , TYPE_6 VAR_6 ) { unsigned TYPE_7 VAR_7 ; { TYPE_8 VAR_8 ; TYPE_9 VAR_9 ; METHOD_1 ( & VAR_10 , VAR_11 , VAR_12 ) ; VAR_13 . METHOD_2 ( & VAR_14 , & VAR_15 , & VAR_16 -> VAR_17 , & VAR_18 -> VAR_19 ) ; VAR_20 = METHOD_3 ( & VAR_21 , VAR_22 ) ; if ( VAR_23 < VAR_24 ) { return ""2"" ""exponentiationfailed;toomanyoctets"" ; } METHOD_4 ( VAR_25 , VAR_26 . VAR_27 , VAR_28 ) ; METHOD_5 ( VAR_29 . VAR_30 ) ; METHOD_6 ( & VAR_31 ) ; } VAR_32 = VAR_33 - 3 - VAR_34 ; METHOD_7 ( VAR_35 , METHOD_8 ( ""verify_shdecryptedSIG1:"" , VAR_36 , VAR_37 ) ) ; METHOD_9 ( VAR_38 , METHOD_10 ( ""pad_lencalculated:%dhash_len:%d"" , VAR_39 , ( TYPE_10 ) VAR_40 ) ) ; if ( VAR_41 [ 0 ] != 0x00 || VAR_42 [ 1 ] != 0x01 || VAR_43 [ VAR_44 + 2 ] != 0x00 ) { return ""3"" ""SIGpaddingdoesnotcheckout"" ; } ( * VAR_47 ) = VAR_48 + VAR_46 + 3 ; { const TYPE_5 * VAR_50 ; TYPE_6 VAR_51 = 0 ; for ( VAR_50 = VAR_48 + 2 ; VAR_50 < VAR_48 + VAR_46 + 2 ; VAR_50 ++ ) if ( * VAR_50 == 0xFF ) VAR_51 ++ ; if ( VAR_51 != VAR_46 ) return ""4"" ""invalidPaddingString"" ; } return VAR_49 ; }",646
647,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; TYPE_7 VAR_8 = VAR_9 -> VAR_10 , VAR_11 ; TYPE_8 VAR_12 ; if ( VAR_13 < 0x280 ) { METHOD_1 ( VAR_14 -> VAR_15 , VAR_16 , ""buffertoosmall(%d<640).\\n"" , VAR_17 ) ; return VAR_18 ; } VAR_19 = METHOD_2 ( VAR_20 ) ; if ( VAR_21 == 0 ) { METHOD_3 ( VAR_22 -> VAR_23 , VAR_24 , ""unknownheader0x%02X0x%02X0x%02X0x%02X0x%02X\\n"" , VAR_25 [ 0 ] , VAR_26 [ 1 ] , VAR_27 [ 2 ] , VAR_28 [ 3 ] , VAR_29 [ 4 ] ) ; return VAR_30 ; } if ( VAR_31 [ 5 ] & 2 ) { VAR_32 -> VAR_33 = VAR_34 [ 5 ] & 1 ; VAR_35 -> VAR_36 = 1 ; VAR_37 -> VAR_38 = VAR_39 ^ VAR_40 -> VAR_41 ; METHOD_4 ( VAR_42 -> VAR_43 , VAR_44 , ""interlaced%d,curfield%d\\n"" , VAR_45 [ 5 ] & 3 , VAR_46 -> VAR_47 ) ; } else { VAR_48 -> VAR_49 = 0 ; } VAR_50 -> VAR_51 = ( VAR_52 [ 0x6 ] >> 5 ) & 1 ; VAR_53 -> VAR_54 = METHOD_5 ( VAR_55 + 0x18 ) ; VAR_56 -> VAR_57 = METHOD_6 ( VAR_58 + 0x1a ) ; switch ( VAR_59 [ 0x21 ] >> 5 ) { case 1 : VAR_60 = 8 ; break ; case 2 : VAR_61 = 10 ; break ; case 3 : VAR_62 = 12 ; break ; default : METHOD_7 ( VAR_63 -> VAR_64 , VAR_65 , ""Unknownbitdepthindicator(%d)\\n"" , VAR_66 [ 0x21 ] >> 5 ) ; return VAR_67 ; } VAR_68 = METHOD_8 ( VAR_69 + 0x28 ) ; VAR_70 -> VAR_71 -> VAR_72 = METHOD_9 ( VAR_73 ) ; if ( ( VAR_74 = METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) ) < 0 ) return VAR_78 ; if ( VAR_79 -> VAR_80 && VAR_81 -> VAR_82 -> VAR_83 != 1260 ) METHOD_11 ( VAR_84 -> VAR_85 , VAR_86 , ""AdaptiveMBinterlaceflaginanunsupportedprofile.\\n"" ) ; VAR_87 -> VAR_88 = VAR_89 [ 0x2C ] & 7 ; if ( VAR_90 -> VAR_91 && VAR_92 -> VAR_93 -> VAR_94 != 1256 && VAR_95 -> VAR_96 -> VAR_97 != 1270 ) METHOD_12 ( VAR_98 -> VAR_99 , VAR_100 , ""Adaptivecolortransforminanunsupportedprofile.\\n"" ) ; VAR_101 -> VAR_102 = ( VAR_103 [ 0x2C ] >> 6 ) & 1 ; if ( VAR_104 -> VAR_105 ) { if ( VAR_106 == 8 ) { METHOD_13 ( VAR_107 -> VAR_108 , ""4:4:48bits"" ) ; return VAR_109 ; } else if ( VAR_110 == 10 ) { VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = VAR_116 -> VAR_117 ? VAR_118 : VAR_119 ; } else { VAR_120 -> VAR_121 = VAR_122 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ? VAR_127 : VAR_128 ; } } else if ( VAR_129 == 12 ) { VAR_130 -> VAR_131 = VAR_132 ; VAR_133 -> VAR_134 = VAR_135 ; } else if ( VAR_136 == 10 ) { if ( VAR_137 -> VAR_138 -> VAR_139 == VAR_140 ) VAR_141 -> VAR_142 = VAR_143 ; else VAR_144 -> VAR_145 = VAR_146 ; VAR_147 -> VAR_148 = VAR_149 ; } else { VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = VAR_155 ; } VAR_156 -> VAR_157 -> VAR_158 = VAR_159 -> VAR_160 = VAR_161 ; if ( VAR_162 -> VAR_163 != VAR_164 ) { METHOD_14 ( & VAR_165 -> VAR_166 , VAR_167 -> VAR_168 ) ; METHOD_15 ( & VAR_169 -> VAR_170 , VAR_171 -> VAR_172 ) ; METHOD_16 ( VAR_173 -> VAR_174 . VAR_175 , & VAR_176 -> VAR_177 , VAR_178 ) ; } if ( VAR_179 -> VAR_180 != VAR_181 -> VAR_182 -> VAR_183 && VAR_184 -> VAR_185 -> VAR_186 != VAR_187 ) { METHOD_17 ( & VAR_188 -> VAR_189 -> VAR_190 . VAR_191 , & VAR_192 -> VAR_193 -> VAR_194 . VAR_195 , VAR_196 -> VAR_197 , VAR_198 -> VAR_199 -> VAR_200 , 255 ) ; VAR_201 -> VAR_202 = VAR_203 -> VAR_204 -> VAR_205 ; } if ( VAR_206 < VAR_207 -> VAR_208 -> VAR_209 ) { METHOD_18 ( VAR_210 -> VAR_211 , VAR_212 , ""incorrectframesize(%d<%u).\\n"" , VAR_213 , VAR_214 -> VAR_215 -> VAR_216 ) ; return VAR_217 ; } VAR_218 -> VAR_219 = ( VAR_220 -> VAR_221 + 15 ) >> 4 ; VAR_222 -> VAR_223 = METHOD_19 ( VAR_224 + 0x16c ) ; if ( ( VAR_225 -> VAR_226 + 15 ) >> 4 == VAR_227 -> VAR_228 && VAR_229 -> VAR_230 ) VAR_231 -> VAR_232 <<= 1 ; METHOD_20 ( VAR_233 -> VAR_234 , VAR_235 , ""%dx%d,4:%s%dbits,MBAFF=%dACT=%d\\n"" , VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 -> VAR_241 ? ""4:4"" : ""2:2"" , VAR_242 -> VAR_243 , VAR_244 -> VAR_245 , VAR_246 -> VAR_247 ) ; if ( VAR_248 -> VAR_249 > 68 && METHOD_21 ( VAR_250 ) ) { VAR_251 -> VAR_252 = 0x170 + ( VAR_253 -> VAR_254 << 2 ) ; } else {  if ( VAR_255 -> VAR_256 > 68 ||  ( VAR_257 -> VAR_258 << VAR_259 -> VAR_260 ) > ( VAR_261 -> VAR_262 + 15 ) >> 4 ) { METHOD_22 ( VAR_263 -> VAR_264 , VAR_265 , ""mbheighttoobig:%d\\n"" , VAR_266 -> VAR_267 ) ; return VAR_268 ; }  VAR_269 -> VAR_270 = 0x280 ;  } if ( VAR_271 < VAR_272 -> VAR_273 ) { METHOD_23 ( VAR_274 -> VAR_275 , VAR_276 , ""buffertoosmall(%d<%d).\\n"" , VAR_277 , VAR_278 -> VAR_279 ) ; return VAR_280 ; } if ( VAR_281 -> VAR_282 > METHOD_24 ( VAR_283 -> VAR_284 ) ) { METHOD_25 ( VAR_285 -> VAR_286 , VAR_287 , ""mb_heighttoobig(%d>%"" SIZE_SPECIFIER "").\\n"" , VAR_288 -> VAR_289 , METHOD_26 ( VAR_290 -> VAR_291 ) ) ; return VAR_292 ; } for ( VAR_293 = 0 ; VAR_294 < VAR_295 -> VAR_296 ; VAR_297 ++ ) { VAR_298 -> VAR_299 [ VAR_300 ] = METHOD_27 ( VAR_301 + 0x170 + ( VAR_302 << 2 ) ) ; ff_dlog ( VAR_303 -> VAR_304 , ""mbscanindex%d,pos%d:%"" PRIu32 ""\\n"" , VAR_305 , 0x170 + ( VAR_306 << 2 ) , VAR_307 -> VAR_308 [ VAR_309 ] ) ; if ( VAR_310 - VAR_311 -> VAR_312 < VAR_313 -> VAR_314 [ VAR_315 ] ) { METHOD_28 ( VAR_316 -> VAR_317 , VAR_318 , ""invalidmbscanindex(%"" PRIu32 ""vs%u).\\n"" , VAR_319 -> VAR_320 [ VAR_321 ] , VAR_322 - VAR_323 -> VAR_324 ) ; return VAR_325 ; } } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 ) { TYPE_6 VAR_5 , VAR_6 , VAR_7 ; TYPE_7 VAR_8 = VAR_9 -> VAR_10 , VAR_11 ; TYPE_8 VAR_12 ; if ( VAR_13 < 0x280 ) { METHOD_1 ( VAR_14 -> VAR_15 , VAR_16 , ""buffertoosmall(%d<640).\\n"" , VAR_17 ) ; return VAR_18 ; } VAR_19 = METHOD_2 ( VAR_20 ) ; if ( VAR_21 == 0 ) { METHOD_3 ( VAR_22 -> VAR_23 , VAR_24 , ""unknownheader0x%02X0x%02X0x%02X0x%02X0x%02X\\n"" , VAR_25 [ 0 ] , VAR_26 [ 1 ] , VAR_27 [ 2 ] , VAR_28 [ 3 ] , VAR_29 [ 4 ] ) ; return VAR_30 ; } if ( VAR_31 [ 5 ] & 2 ) { VAR_32 -> VAR_33 = VAR_34 [ 5 ] & 1 ; VAR_35 -> VAR_36 = 1 ; VAR_37 -> VAR_38 = VAR_39 ^ VAR_40 -> VAR_41 ; METHOD_4 ( VAR_42 -> VAR_43 , VAR_44 , ""interlaced%d,curfield%d\\n"" , VAR_45 [ 5 ] & 3 , VAR_46 -> VAR_47 ) ; } else { VAR_48 -> VAR_49 = 0 ; } VAR_50 -> VAR_51 = ( VAR_52 [ 0x6 ] >> 5 ) & 1 ; VAR_53 -> VAR_54 = METHOD_5 ( VAR_55 + 0x18 ) ; VAR_56 -> VAR_57 = METHOD_6 ( VAR_58 + 0x1a ) ; switch ( VAR_59 [ 0x21 ] >> 5 ) { case 1 : VAR_60 = 8 ; break ; case 2 : VAR_61 = 10 ; break ; case 3 : VAR_62 = 12 ; break ; default : METHOD_7 ( VAR_63 -> VAR_64 , VAR_65 , ""Unknownbitdepthindicator(%d)\\n"" , VAR_66 [ 0x21 ] >> 5 ) ; return VAR_67 ; } VAR_68 = METHOD_8 ( VAR_69 + 0x28 ) ; VAR_70 -> VAR_71 -> VAR_72 = METHOD_9 ( VAR_73 ) ; if ( ( VAR_74 = METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) ) < 0 ) return VAR_78 ; if ( VAR_79 -> VAR_80 && VAR_81 -> VAR_82 -> VAR_83 != 1260 ) METHOD_11 ( VAR_84 -> VAR_85 , VAR_86 , ""AdaptiveMBinterlaceflaginanunsupportedprofile.\\n"" ) ; VAR_87 -> VAR_88 = VAR_89 [ 0x2C ] & 7 ; if ( VAR_90 -> VAR_91 && VAR_92 -> VAR_93 -> VAR_94 != 1256 && VAR_95 -> VAR_96 -> VAR_97 != 1270 ) METHOD_12 ( VAR_98 -> VAR_99 , VAR_100 , ""Adaptivecolortransforminanunsupportedprofile.\\n"" ) ; VAR_101 -> VAR_102 = ( VAR_103 [ 0x2C ] >> 6 ) & 1 ; if ( VAR_104 -> VAR_105 ) { if ( VAR_106 == 8 ) { METHOD_13 ( VAR_107 -> VAR_108 , ""4:4:48bits"" ) ; return VAR_109 ; } else if ( VAR_110 == 10 ) { VAR_111 -> VAR_112 = VAR_113 ; VAR_114 -> VAR_115 = VAR_116 -> VAR_117 ? VAR_118 : VAR_119 ; } else { VAR_120 -> VAR_121 = VAR_122 ; VAR_123 -> VAR_124 = VAR_125 -> VAR_126 ? VAR_127 : VAR_128 ; } } else if ( VAR_129 == 12 ) { VAR_130 -> VAR_131 = VAR_132 ; VAR_133 -> VAR_134 = VAR_135 ; } else if ( VAR_136 == 10 ) { if ( VAR_137 -> VAR_138 -> VAR_139 == VAR_140 ) VAR_141 -> VAR_142 = VAR_143 ; else VAR_144 -> VAR_145 = VAR_146 ; VAR_147 -> VAR_148 = VAR_149 ; } else { VAR_150 -> VAR_151 = VAR_152 ; VAR_153 -> VAR_154 = VAR_155 ; } VAR_156 -> VAR_157 -> VAR_158 = VAR_159 -> VAR_160 = VAR_161 ; if ( VAR_162 -> VAR_163 != VAR_164 ) { METHOD_14 ( & VAR_165 -> VAR_166 , VAR_167 -> VAR_168 ) ; METHOD_15 ( & VAR_169 -> VAR_170 , VAR_171 -> VAR_172 ) ; METHOD_16 ( VAR_173 -> VAR_174 . VAR_175 , & VAR_176 -> VAR_177 , VAR_178 ) ; } if ( VAR_179 -> VAR_180 != VAR_181 -> VAR_182 -> VAR_183 && VAR_184 -> VAR_185 -> VAR_186 != VAR_187 ) { METHOD_17 ( & VAR_188 -> VAR_189 -> VAR_190 . VAR_191 , & VAR_192 -> VAR_193 -> VAR_194 . VAR_195 , VAR_196 -> VAR_197 , VAR_198 -> VAR_199 -> VAR_200 , 255 ) ; VAR_201 -> VAR_202 = VAR_203 -> VAR_204 -> VAR_205 ; } if ( VAR_206 < VAR_207 -> VAR_208 -> VAR_209 ) { METHOD_18 ( VAR_210 -> VAR_211 , VAR_212 , ""incorrectframesize(%d<%u).\\n"" , VAR_213 , VAR_214 -> VAR_215 -> VAR_216 ) ; return VAR_217 ; } VAR_218 -> VAR_219 = ( VAR_220 -> VAR_221 + 15 ) >> 4 ; VAR_222 -> VAR_223 = METHOD_19 ( VAR_224 + 0x16c ) ; if ( ( VAR_225 -> VAR_226 + 15 ) >> 4 == VAR_227 -> VAR_228 && VAR_229 -> VAR_230 ) VAR_231 -> VAR_232 <<= 1 ; METHOD_20 ( VAR_233 -> VAR_234 , VAR_235 , ""%dx%d,4:%s%dbits,MBAFF=%dACT=%d\\n"" , VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 -> VAR_241 ? ""4:4"" : ""2:2"" , VAR_242 -> VAR_243 , VAR_244 -> VAR_245 , VAR_246 -> VAR_247 ) ; if ( VAR_248 -> VAR_249 > 68 && METHOD_21 ( VAR_250 ) ) { VAR_251 -> VAR_252 = 0x170 + ( VAR_253 -> VAR_254 << 2 ) ; } else { if ( VAR_255 -> VAR_256 > 68 || ( VAR_257 -> VAR_258 << VAR_259 -> VAR_260 ) > ( VAR_261 -> VAR_262 + 15 ) >> 4 ) { METHOD_22 ( VAR_263 -> VAR_264 , VAR_265 , ""mbheighttoobig:%d\\n"" , VAR_266 -> VAR_267 ) ; return VAR_268 ; } VAR_269 -> VAR_270 = 0x280 ; } if ( VAR_271 < VAR_272 -> VAR_273 ) { METHOD_23 ( VAR_274 -> VAR_275 , VAR_276 , ""buffertoosmall(%d<%d).\\n"" , VAR_277 , VAR_278 -> VAR_279 ) ; return VAR_280 ; } if ( VAR_281 -> VAR_282 > METHOD_24 ( VAR_283 -> VAR_284 ) ) { METHOD_25 ( VAR_285 -> VAR_286 , VAR_287 , ""mb_heighttoobig(%d>%"" SIZE_SPECIFIER "").\\n"" , VAR_288 -> VAR_289 , METHOD_26 ( VAR_290 -> VAR_291 ) ) ; return VAR_292 ; } for ( VAR_293 = 0 ; VAR_294 < VAR_295 -> VAR_296 ; VAR_297 ++ ) { VAR_298 -> VAR_299 [ VAR_300 ] = METHOD_27 ( VAR_301 + 0x170 + ( VAR_302 << 2 ) ) ; ff_dlog ( VAR_303 -> VAR_304 , ""mbscanindex%d,pos%d:%"" PRIu32 ""\\n"" , VAR_305 , 0x170 + ( VAR_306 << 2 ) , VAR_307 -> VAR_308 [ VAR_309 ] ) ; if ( VAR_310 - VAR_311 -> VAR_312 < VAR_313 -> VAR_314 [ VAR_315 ] ) { METHOD_28 ( VAR_316 -> VAR_317 , VAR_318 , ""invalidmbscanindex(%"" PRIu32 ""vs%u).\\n"" , VAR_319 -> VAR_320 [ VAR_321 ] , VAR_322 - VAR_323 -> VAR_324 ) ; return VAR_325 ; } } return 0 ; }",647
648,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; unsigned TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 , VAR_5 ; unsigned TYPE_5 VAR_6 ; unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 = 1 ; METHOD_1 ( & VAR_10 , VAR_11 ) ; VAR_12 = METHOD_2 ( ) ; if ( METHOD_3 ( ~ VAR_13 & VAR_14 ) ) { METHOD_4 ( & VAR_15 , VAR_16 ) ; if ( VAR_17 ) METHOD_5 ( ""Interrupt%d,withoutanydata\\n"" , VAR_18 ) ; VAR_19 = 0 ; goto VAR_20 ; } VAR_21 = METHOD_6 ( ) ; if ( VAR_22 && ( VAR_23 & VAR_24 ) ) { static unsigned TYPE_9 VAR_25 ; static unsigned TYPE_10 VAR_26 ; VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) { METHOD_7 ( ""MUXerror,statusis%02x,datais%02x\\n"" , VAR_30 , VAR_31 ) ; switch ( VAR_32 ) { default : if ( METHOD_8 ( VAR_33 , VAR_34 + VAR_35 / 10 ) ) { VAR_36 = VAR_37 ; break ; } case 0xfc : case 0xfd : case 0xfe : VAR_38 = VAR_39 ; VAR_40 = 0xfe ; break ; case 0xff : VAR_41 = VAR_42 ; VAR_43 = 0xfe ; break ; } } VAR_44 = VAR_45 + ( ( VAR_46 >> 6 ) & 3 ) ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 ; } else { VAR_51 = ( ( VAR_52 & VAR_53 ) ? VAR_54 : 0 ) | ( ( VAR_55 & VAR_56 && ! VAR_57 ) ? VAR_58 : 0 ) ; VAR_59 = ( VAR_60 & VAR_61 ) ? VAR_62 : VAR_63 ; } VAR_64 = & VAR_65 [ VAR_66 ] ; STRUCT_OR_UNION_3 = VAR_67 -> VAR_68 ? VAR_69 -> STRUCT_OR_UNION_4 : VAR_70 ; METHOD_9 ( VAR_71 -> VAR_72 , VAR_73 , ""<-i8042(interrupt,%d,%d%s%s)\\n"" , VAR_74 , VAR_75 , VAR_76 & VAR_77 ? "",badparity"" : """" , VAR_78 & VAR_79 ? "",timeout"" : """" ) ; VAR_80 = METHOD_10 ( VAR_81 , VAR_82 , STRUCT_OR_UNION_5 ) ; METHOD_11 ( & VAR_83 , VAR_84 ) ;  if ( METHOD_12 ( VAR_85 -> VAR_86 && ! VAR_87 ) )  METHOD_13 ( STRUCT_OR_UNION_6 , VAR_88 , VAR_89 ) ; VAR_90 : return METHOD_14 ( VAR_91 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 ; unsigned TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 , VAR_5 ; unsigned TYPE_5 VAR_6 ; unsigned TYPE_6 VAR_7 ; TYPE_7 VAR_8 ; TYPE_8 VAR_9 = 1 ; METHOD_1 ( & VAR_10 , VAR_11 ) ; VAR_12 = METHOD_2 ( ) ; if ( METHOD_3 ( ~ VAR_13 & VAR_14 ) ) { METHOD_4 ( & VAR_15 , VAR_16 ) ; if ( VAR_17 ) METHOD_5 ( ""Interrupt%d,withoutanydata\\n"" , VAR_18 ) ; VAR_19 = 0 ; goto VAR_20 ; } VAR_21 = METHOD_6 ( ) ; if ( VAR_22 && ( VAR_23 & VAR_24 ) ) { static unsigned TYPE_9 VAR_25 ; static unsigned TYPE_10 VAR_26 ; VAR_27 = 0 ; if ( VAR_28 & VAR_29 ) { METHOD_7 ( ""MUXerror,statusis%02x,datais%02x\\n"" , VAR_30 , VAR_31 ) ; switch ( VAR_32 ) { default : if ( METHOD_8 ( VAR_33 , VAR_34 + VAR_35 / 10 ) ) { VAR_36 = VAR_37 ; break ; } case 0xfc : case 0xfd : case 0xfe : VAR_38 = VAR_39 ; VAR_40 = 0xfe ; break ; case 0xff : VAR_41 = VAR_42 ; VAR_43 = 0xfe ; break ; } } VAR_44 = VAR_45 + ( ( VAR_46 >> 6 ) & 3 ) ; VAR_47 = VAR_48 ; VAR_49 = VAR_50 ; } else { VAR_51 = ( ( VAR_52 & VAR_53 ) ? VAR_54 : 0 ) | ( ( VAR_55 & VAR_56 && ! VAR_57 ) ? VAR_58 : 0 ) ; VAR_59 = ( VAR_60 & VAR_61 ) ? VAR_62 : VAR_63 ; } VAR_64 = & VAR_65 [ VAR_66 ] ; STRUCT_OR_UNION_3 = VAR_67 -> VAR_68 ? VAR_69 -> STRUCT_OR_UNION_4 : VAR_70 ; METHOD_9 ( VAR_71 -> VAR_72 , VAR_73 , ""<-i8042(interrupt,%d,%d%s%s)\\n"" , VAR_74 , VAR_75 , VAR_76 & VAR_77 ? "",badparity"" : """" , VAR_78 & VAR_79 ? "",timeout"" : """" ) ; VAR_80 = METHOD_10 ( VAR_81 , VAR_82 , STRUCT_OR_UNION_5 ) ; METHOD_11 ( & VAR_83 , VAR_84 ) ; if ( METHOD_12 ( STRUCT_OR_UNION_6 && ! VAR_87 ) ) METHOD_13 ( STRUCT_OR_UNION_6 , VAR_88 , VAR_89 ) ; VAR_90 : return METHOD_14 ( VAR_91 ) ; }",648
649,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 , VAR_10 , VAR_11 = 0 , VAR_12 , VAR_13 , VAR_14 ; TYPE_10 VAR_15 ; if ( VAR_16 -> VAR_17 <= 0 ) { METHOD_1 ( VAR_18 , VAR_19 , ""nreslevels2decode%dinvalidoruninitialized\\n"" , VAR_20 -> VAR_21 ) ; return VAR_22 ; } if ( VAR_23 = METHOD_2 ( & VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 - 1 , VAR_30 -> VAR_31 ) ) return VAR_32 ; VAR_33 = ( VAR_34 -> VAR_35 [ 0 ] [ 1 ] - VAR_36 -> VAR_37 [ 0 ] [ 0 ] ) * ( VAR_38 -> VAR_39 [ 1 ] [ 1 ] - VAR_40 -> VAR_41 [ 1 ] [ 0 ] ) ; if ( VAR_42 -> VAR_43 == VAR_44 ) { VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = METHOD_3 ( VAR_50 , sizeof ( * VAR_51 -> VAR_52 ) ) ; if ( ! VAR_53 -> VAR_54 ) return METHOD_4 ( VAR_55 ) ; } else { VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = METHOD_5 ( VAR_61 , sizeof ( * VAR_62 -> VAR_63 ) ) ; if ( ! VAR_64 -> VAR_65 ) return METHOD_6 ( VAR_66 ) ; } VAR_67 -> VAR_68 = METHOD_7 ( VAR_69 -> VAR_70 , sizeof ( * VAR_71 -> VAR_72 ) ) ; if ( ! VAR_73 -> VAR_74 ) return METHOD_8 ( VAR_75 ) ; for ( VAR_76 = 0 ; VAR_77 < VAR_78 -> VAR_79 ; VAR_80 ++ ) { TYPE_11 VAR_81 = VAR_82 -> VAR_83 - VAR_84 ; TYPE_12 * VAR_85 = VAR_86 -> VAR_87 + VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < 2 ; VAR_91 ++ ) for ( VAR_92 = 0 ; VAR_93 < 2 ; VAR_94 ++ ) VAR_95 -> VAR_96 [ VAR_97 ] [ VAR_98 ] = METHOD_9 ( VAR_99 -> VAR_100 [ VAR_101 ] [ VAR_102 ] , VAR_103 - 1 ) ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 [ VAR_108 ] ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 [ VAR_113 ] ; if ( VAR_114 == 0 ) VAR_115 -> VAR_116 = 1 ; else VAR_117 -> VAR_118 = 3 ; if ( VAR_119 -> VAR_120 [ 0 ] [ 1 ] == VAR_121 -> VAR_122 [ 0 ] [ 0 ] ) VAR_123 -> VAR_124 = 0 ; else VAR_125 -> VAR_126 = METHOD_10 ( VAR_127 -> VAR_128 [ 0 ] [ 1 ] , VAR_129 -> VAR_130 ) - ( VAR_131 -> VAR_132 [ 0 ] [ 0 ] >> VAR_133 -> VAR_134 ) ; if ( VAR_135 -> VAR_136 [ 1 ] [ 1 ] == VAR_137 -> VAR_138 [ 1 ] [ 0 ] ) VAR_139 -> VAR_140 = 0 ; else VAR_141 -> VAR_142 = METHOD_11 ( VAR_143 -> VAR_144 [ 1 ] [ 1 ] , VAR_145 -> VAR_146 ) - ( VAR_147 -> VAR_148 [ 1 ] [ 0 ] >> VAR_149 -> VAR_150 ) ;  VAR_151 -> VAR_152 = METHOD_12 ( VAR_153 -> VAR_154 , sizeof ( * VAR_155 -> VAR_156 ) ) ;  if ( ! VAR_157 -> VAR_158 ) return METHOD_13 ( VAR_159 ) ; for ( VAR_160 = 0 ; VAR_161 < VAR_162 -> VAR_163 ; VAR_164 ++ , VAR_165 ++ ) { TYPE_13 * VAR_166 = VAR_167 -> VAR_168 + VAR_169 ; TYPE_14 VAR_170 , VAR_171 ; TYPE_15 VAR_172 ; switch ( VAR_173 -> VAR_174 ) { TYPE_16 VAR_175 ; TYPE_17 VAR_176 ; case VAR_177 : VAR_178 -> VAR_179 = 1 ; break ; case VAR_180 : VAR_181 = VAR_182 + VAR_183 [ VAR_184 -> VAR_185 == VAR_186 ] [ VAR_187 + ( VAR_188 > 0 ) ] ; VAR_189 -> VAR_190 = METHOD_14 ( 2048 + VAR_191 -> VAR_192 [ VAR_193 ] , 2 + VAR_194 - VAR_195 -> VAR_196 [ VAR_197 ] ) ; break ; case VAR_198 : VAR_199 = VAR_200 ; VAR_201 -> VAR_202 = METHOD_15 ( 2.0 , VAR_203 - VAR_204 -> VAR_205 [ VAR_206 ] ) ; VAR_207 -> VAR_208 *= VAR_209 -> VAR_210 [ VAR_211 ] / 2048.0 + 1.0 ; break ; default : VAR_212 -> VAR_213 = 0 ; METHOD_16 ( VAR_214 , VAR_215 , ""Unknownquantizationformat\\n"" ) ; break ; } if ( ! METHOD_17 ( VAR_216 -> VAR_217 ) ) VAR_218 -> VAR_219 *= 0.5 ; VAR_220 -> VAR_221 = VAR_222 -> VAR_223 * ( 1 << 15 ) ; if ( VAR_224 == 0 ) { for ( VAR_225 = 0 ; VAR_226 < 2 ; VAR_227 ++ ) for ( VAR_228 = 0 ; VAR_229 < 2 ; VAR_230 ++ ) VAR_231 -> VAR_232 [ VAR_233 ] [ VAR_234 ] = METHOD_18 ( VAR_235 -> VAR_236 [ VAR_237 ] [ VAR_238 ] - VAR_239 -> VAR_240 [ VAR_241 ] [ 0 ] , VAR_242 - 1 ) ; VAR_243 = VAR_244 -> VAR_245 ; VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = METHOD_19 ( VAR_251 -> VAR_252 , VAR_253 -> VAR_254 ) ; VAR_255 -> VAR_256 = METHOD_20 ( VAR_257 -> VAR_258 , VAR_259 -> VAR_260 ) ; } else { for ( VAR_261 = 0 ; VAR_262 < 2 ; VAR_263 ++ ) for ( VAR_264 = 0 ; VAR_265 < 2 ; VAR_266 ++ ) VAR_267 -> VAR_268 [ VAR_269 ] [ VAR_270 ] = METHOD_21 ( VAR_271 -> VAR_272 [ VAR_273 ] [ VAR_274 ] - VAR_275 -> VAR_276 [ VAR_277 ] [ 0 ] - ( ( ( VAR_278 + 1 >> VAR_279 ) & 1 ) << VAR_280 - 1 ) , VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_22 ( VAR_284 -> VAR_285 , VAR_286 -> VAR_287 - 1 ) ; VAR_288 -> VAR_289 = METHOD_23 ( VAR_290 -> VAR_291 , VAR_292 -> VAR_293 - 1 ) ; VAR_294 = VAR_295 -> VAR_296 - 1 ; VAR_297 = VAR_298 -> VAR_299 - 1 ; } for ( VAR_300 = 0 ; VAR_301 < 2 ; VAR_302 ++ ) VAR_303 -> VAR_304 [ 0 ] [ VAR_305 ] = METHOD_24 ( VAR_306 -> VAR_307 [ 0 ] [ VAR_308 ] , VAR_309 ) ; for ( VAR_310 = 0 ; VAR_311 < 2 ; VAR_312 ++ ) VAR_313 -> VAR_314 [ 1 ] [ VAR_315 ] = METHOD_25 ( VAR_316 -> VAR_317 [ 1 ] [ VAR_318 ] , VAR_319 ) ;  VAR_320 -> VAR_321 = METHOD_26 ( VAR_322 -> VAR_323 *  ( TYPE_18 ) VAR_324 -> VAR_325 , sizeof ( * VAR_326 -> VAR_327 ) ) ; if ( ! VAR_328 -> VAR_329 ) return METHOD_27 ( VAR_330 ) ; VAR_331 = VAR_332 -> VAR_333 * VAR_334 -> VAR_335 ; for ( VAR_336 = 0 ; VAR_337 < VAR_338 ; VAR_339 ++ ) { TYPE_19 * VAR_340 = VAR_341 -> VAR_342 + VAR_343 ; VAR_344 -> VAR_345 [ 0 ] [ 0 ] = ( VAR_346 % VAR_347 -> VAR_348 ) * ( 1 << VAR_349 ) ; VAR_350 -> VAR_351 [ 0 ] [ 0 ] = METHOD_28 ( VAR_352 -> VAR_353 [ 0 ] [ 0 ] , VAR_354 -> VAR_355 [ 0 ] [ 0 ] ) ; VAR_356 -> VAR_357 [ 1 ] [ 0 ] = ( VAR_358 / VAR_359 -> VAR_360 ) * ( 1 << VAR_361 ) ; VAR_362 -> VAR_363 [ 1 ] [ 0 ] = METHOD_29 ( VAR_364 -> VAR_365 [ 1 ] [ 0 ] , VAR_366 -> VAR_367 [ 1 ] [ 0 ] ) ; VAR_368 -> VAR_369 [ 0 ] [ 1 ] = VAR_370 -> VAR_371 [ 0 ] [ 0 ] + ( 1 << VAR_372 ) ; VAR_373 -> VAR_374 [ 0 ] [ 1 ] = METHOD_30 ( VAR_375 -> VAR_376 [ 0 ] [ 1 ] , VAR_377 -> VAR_378 [ 0 ] [ 1 ] ) ; VAR_379 -> VAR_380 [ 1 ] [ 1 ] = VAR_381 -> VAR_382 [ 1 ] [ 0 ] + ( 1 << VAR_383 ) ; VAR_384 -> VAR_385 [ 1 ] [ 1 ] = METHOD_31 ( VAR_386 -> VAR_387 [ 1 ] [ 1 ] , VAR_388 -> VAR_389 [ 1 ] [ 1 ] ) ; VAR_390 -> VAR_391 = METHOD_32 ( VAR_392 -> VAR_393 [ 0 ] [ 1 ] - VAR_394 -> VAR_395 [ 0 ] [ 0 ] , VAR_396 -> VAR_397 ) ; VAR_398 -> VAR_399 = METHOD_33 ( VAR_400 -> VAR_401 [ 1 ] [ 1 ] - VAR_402 -> VAR_403 [ 1 ] [ 0 ] , VAR_404 -> VAR_405 ) ; VAR_406 -> VAR_407 = METHOD_34 ( VAR_408 -> VAR_409 , VAR_410 -> VAR_411 ) ; if ( ! VAR_412 -> VAR_413 ) return METHOD_35 ( VAR_414 ) ; VAR_415 -> VAR_416 = METHOD_36 ( VAR_417 -> VAR_418 , VAR_419 -> VAR_420 ) ; if ( ! VAR_421 -> VAR_422 ) return METHOD_37 ( VAR_423 ) ; VAR_424 -> VAR_425 = METHOD_38 ( VAR_426 -> VAR_427 * ( TYPE_20 ) VAR_428 -> VAR_429 , sizeof ( * VAR_430 -> VAR_431 ) ) ; if ( ! VAR_432 -> VAR_433 ) return METHOD_39 ( VAR_434 ) ; for ( VAR_435 = 0 ; VAR_436 < VAR_437 -> VAR_438 * VAR_439 -> VAR_440 ; VAR_441 ++ ) { TYPE_21 * VAR_442 = VAR_443 -> VAR_444 + VAR_445 ; TYPE_22 VAR_446 , VAR_447 ; VAR_448 = ( VAR_449 -> VAR_450 [ 0 ] [ 0 ] >> VAR_451 -> VAR_452 ) << VAR_453 -> VAR_454 ; VAR_455 = VAR_456 + ( ( VAR_457 % VAR_458 -> VAR_459 ) << VAR_460 -> VAR_461 ) ; VAR_462 -> VAR_463 [ 0 ] [ 0 ] = METHOD_40 ( VAR_464 , VAR_465 -> VAR_466 [ 0 ] [ 0 ] ) ; VAR_467 = ( VAR_468 -> VAR_469 [ 1 ] [ 0 ] >> VAR_470 -> VAR_471 ) << VAR_472 -> VAR_473 ; VAR_474 = VAR_475 + ( ( VAR_476 / VAR_477 -> VAR_478 ) << VAR_479 -> VAR_480 ) ; VAR_481 -> VAR_482 [ 1 ] [ 0 ] = METHOD_41 ( VAR_483 , VAR_484 -> VAR_485 [ 1 ] [ 0 ] ) ; VAR_486 -> VAR_487 [ 0 ] [ 1 ] = METHOD_42 ( VAR_488 + ( 1 << VAR_489 -> VAR_490 ) , VAR_491 -> VAR_492 [ 0 ] [ 1 ] ) ; VAR_493 -> VAR_494 [ 1 ] [ 1 ] = METHOD_43 ( VAR_495 + ( 1 << VAR_496 -> VAR_497 ) , VAR_498 -> VAR_499 [ 1 ] [ 1 ] ) ; if ( ( VAR_500 + ! ! VAR_501 ) & 1 ) { VAR_502 -> VAR_503 [ 0 ] [ 0 ] += VAR_504 -> VAR_505 [ VAR_506 - 1 ] . VAR_507 [ 0 ] [ 1 ] - VAR_508 -> VAR_509 [ VAR_510 - 1 ] . VAR_511 [ 0 ] [ 0 ] ; VAR_512 -> VAR_513 [ 0 ] [ 1 ] += VAR_514 -> VAR_515 [ VAR_516 - 1 ] . VAR_517 [ 0 ] [ 1 ] - VAR_518 -> VAR_519 [ VAR_520 - 1 ] . VAR_521 [ 0 ] [ 0 ] ; } if ( ( VAR_522 + ! ! VAR_523 ) & 2 ) { VAR_524 -> VAR_525 [ 1 ] [ 0 ] += VAR_526 -> VAR_527 [ VAR_528 - 1 ] . VAR_529 [ 1 ] [ 1 ] - VAR_530 -> VAR_531 [ VAR_532 - 1 ] . VAR_533 [ 1 ] [ 0 ] ; VAR_534 -> VAR_535 [ 1 ] [ 1 ] += VAR_536 -> VAR_537 [ VAR_538 - 1 ] . VAR_539 [ 1 ] [ 1 ] - VAR_540 -> VAR_541 [ VAR_542 - 1 ] . VAR_543 [ 1 ] [ 0 ] ; } VAR_544 -> VAR_545 = 0 ; VAR_546 -> VAR_547 = 3 ; VAR_548 -> VAR_549 = 0 ; VAR_550 -> VAR_551 = 0 ; VAR_552 -> VAR_553 = 0 ; } } } } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 , VAR_8 ; TYPE_9 VAR_9 , VAR_10 , VAR_11 = 0 , VAR_12 , VAR_13 , VAR_14 ; TYPE_10 VAR_15 ; if ( VAR_16 -> VAR_17 <= 0 ) { METHOD_1 ( VAR_18 , VAR_19 , ""nreslevels2decode%dinvalidoruninitialized\\n"" , VAR_20 -> VAR_21 ) ; return VAR_22 ; } if ( VAR_23 = METHOD_2 ( & VAR_24 -> VAR_25 , VAR_26 -> VAR_27 , VAR_28 -> VAR_29 - 1 , VAR_30 -> VAR_31 ) ) return VAR_32 ; VAR_33 = ( VAR_34 -> VAR_35 [ 0 ] [ 1 ] - VAR_36 -> VAR_37 [ 0 ] [ 0 ] ) * ( VAR_38 -> VAR_39 [ 1 ] [ 1 ] - VAR_40 -> VAR_41 [ 1 ] [ 0 ] ) ; if ( VAR_42 -> VAR_43 == VAR_44 ) { VAR_45 -> VAR_46 = VAR_47 ; VAR_48 -> VAR_49 = METHOD_3 ( VAR_50 , sizeof ( * VAR_51 -> VAR_52 ) ) ; if ( ! VAR_53 -> VAR_54 ) return METHOD_4 ( VAR_55 ) ; } else { VAR_56 -> VAR_57 = VAR_58 ; VAR_59 -> VAR_60 = METHOD_5 ( VAR_61 , sizeof ( * VAR_62 -> VAR_63 ) ) ; if ( ! VAR_64 -> VAR_65 ) return METHOD_6 ( VAR_66 ) ; } VAR_67 -> VAR_68 = METHOD_7 ( VAR_69 -> VAR_70 , sizeof ( * VAR_71 -> VAR_72 ) ) ; if ( ! VAR_73 -> VAR_74 ) return METHOD_8 ( VAR_75 ) ; for ( VAR_76 = 0 ; VAR_77 < VAR_78 -> VAR_79 ; VAR_80 ++ ) { TYPE_11 VAR_81 = VAR_82 -> VAR_83 - VAR_84 ; TYPE_12 * VAR_85 = VAR_86 -> VAR_87 + VAR_88 ; for ( VAR_89 = 0 ; VAR_90 < 2 ; VAR_91 ++ ) for ( VAR_92 = 0 ; VAR_93 < 2 ; VAR_94 ++ ) VAR_95 -> VAR_96 [ VAR_97 ] [ VAR_98 ] = METHOD_9 ( VAR_99 -> VAR_100 [ VAR_101 ] [ VAR_102 ] , VAR_103 - 1 ) ; VAR_104 -> VAR_105 = VAR_106 -> VAR_107 [ VAR_108 ] ; VAR_109 -> VAR_110 = VAR_111 -> VAR_112 [ VAR_113 ] ; if ( VAR_114 == 0 ) VAR_115 -> VAR_116 = 1 ; else VAR_117 -> VAR_118 = 3 ; if ( VAR_119 -> VAR_120 [ 0 ] [ 1 ] == VAR_121 -> VAR_122 [ 0 ] [ 0 ] ) VAR_123 -> VAR_124 = 0 ; else VAR_125 -> VAR_126 = METHOD_10 ( VAR_127 -> VAR_128 [ 0 ] [ 1 ] , VAR_129 -> VAR_130 ) - ( VAR_131 -> VAR_132 [ 0 ] [ 0 ] >> VAR_133 -> VAR_134 ) ; if ( VAR_135 -> VAR_136 [ 1 ] [ 1 ] == VAR_137 -> VAR_138 [ 1 ] [ 0 ] ) VAR_139 -> VAR_140 = 0 ; else VAR_141 -> VAR_142 = METHOD_11 ( VAR_143 -> VAR_144 [ 1 ] [ 1 ] , VAR_145 -> VAR_146 ) - ( VAR_147 -> VAR_148 [ 1 ] [ 0 ] >> VAR_149 -> VAR_150 ) ; VAR_151 -> VAR_152 = METHOD_12 ( VAR_153 -> VAR_154 , sizeof ( * VAR_155 -> VAR_156 ) ) ; if ( ! VAR_157 -> VAR_158 ) return METHOD_13 ( VAR_159 ) ; for ( VAR_160 = 0 ; VAR_161 < VAR_162 -> VAR_163 ; VAR_164 ++ , VAR_165 ++ ) { TYPE_13 * VAR_166 = VAR_167 -> VAR_168 + VAR_169 ; TYPE_14 VAR_170 , VAR_171 ; TYPE_15 VAR_172 ; switch ( VAR_173 -> VAR_174 ) { TYPE_16 VAR_175 ; TYPE_17 VAR_176 ; case VAR_177 : VAR_178 -> VAR_179 = 1 ; break ; case VAR_180 : VAR_181 = VAR_182 + VAR_183 [ VAR_184 -> VAR_185 == VAR_186 ] [ VAR_187 + ( VAR_188 > 0 ) ] ; VAR_189 -> VAR_190 = METHOD_14 ( 2048 + VAR_191 -> VAR_192 [ VAR_193 ] , 2 + VAR_194 - VAR_195 -> VAR_196 [ VAR_197 ] ) ; break ; case VAR_198 : VAR_199 = VAR_200 ; VAR_201 -> VAR_202 = METHOD_15 ( 2.0 , VAR_203 - VAR_204 -> VAR_205 [ VAR_206 ] ) ; VAR_207 -> VAR_208 *= VAR_209 -> VAR_210 [ VAR_211 ] / 2048.0 + 1.0 ; break ; default : VAR_212 -> VAR_213 = 0 ; METHOD_16 ( VAR_214 , VAR_215 , ""Unknownquantizationformat\\n"" ) ; break ; } if ( ! METHOD_17 ( VAR_216 -> VAR_217 ) ) VAR_218 -> VAR_219 *= 0.5 ; VAR_220 -> VAR_221 = VAR_222 -> VAR_223 * ( 1 << 15 ) ; if ( VAR_224 == 0 ) { for ( VAR_225 = 0 ; VAR_226 < 2 ; VAR_227 ++ ) for ( VAR_228 = 0 ; VAR_229 < 2 ; VAR_230 ++ ) VAR_231 -> VAR_232 [ VAR_233 ] [ VAR_234 ] = METHOD_18 ( VAR_235 -> VAR_236 [ VAR_237 ] [ VAR_238 ] - VAR_239 -> VAR_240 [ VAR_241 ] [ 0 ] , VAR_242 - 1 ) ; VAR_243 = VAR_244 -> VAR_245 ; VAR_246 = VAR_247 -> VAR_248 ; VAR_249 -> VAR_250 = METHOD_19 ( VAR_251 -> VAR_252 , VAR_253 -> VAR_254 ) ; VAR_255 -> VAR_256 = METHOD_20 ( VAR_257 -> VAR_258 , VAR_259 -> VAR_260 ) ; } else { for ( VAR_261 = 0 ; VAR_262 < 2 ; VAR_263 ++ ) for ( VAR_264 = 0 ; VAR_265 < 2 ; VAR_266 ++ ) VAR_267 -> VAR_268 [ VAR_269 ] [ VAR_270 ] = METHOD_21 ( VAR_271 -> VAR_272 [ VAR_273 ] [ VAR_274 ] - VAR_275 -> VAR_276 [ VAR_277 ] [ 0 ] - ( ( ( VAR_278 + 1 >> VAR_279 ) & 1 ) << VAR_280 - 1 ) , VAR_281 ) ; VAR_282 -> VAR_283 = METHOD_22 ( VAR_284 -> VAR_285 , VAR_286 -> VAR_287 - 1 ) ; VAR_288 -> VAR_289 = METHOD_23 ( VAR_290 -> VAR_291 , VAR_292 -> VAR_293 - 1 ) ; VAR_294 = VAR_295 -> VAR_296 - 1 ; VAR_297 = VAR_298 -> VAR_299 - 1 ; } for ( VAR_300 = 0 ; VAR_301 < 2 ; VAR_302 ++ ) VAR_303 -> VAR_304 [ 0 ] [ VAR_305 ] = METHOD_24 ( VAR_306 -> VAR_307 [ 0 ] [ VAR_308 ] , VAR_309 ) ; for ( VAR_310 = 0 ; VAR_311 < 2 ; VAR_312 ++ ) VAR_313 -> VAR_314 [ 1 ] [ VAR_315 ] = METHOD_25 ( VAR_316 -> VAR_317 [ 1 ] [ VAR_318 ] , VAR_319 ) ; VAR_320 -> VAR_321 = METHOD_26 ( VAR_322 -> VAR_323 * ( TYPE_18 ) VAR_324 -> VAR_325 , sizeof ( * VAR_326 -> VAR_327 ) ) ; if ( ! VAR_328 -> VAR_329 ) return METHOD_27 ( VAR_330 ) ; VAR_331 = VAR_332 -> VAR_333 * VAR_334 -> VAR_335 ; for ( VAR_336 = 0 ; VAR_337 < VAR_338 ; VAR_339 ++ ) { TYPE_19 * VAR_340 = VAR_341 -> VAR_342 + VAR_343 ; VAR_344 -> VAR_345 [ 0 ] [ 0 ] = ( VAR_346 % VAR_347 -> VAR_348 ) * ( 1 << VAR_349 ) ; VAR_350 -> VAR_351 [ 0 ] [ 0 ] = METHOD_28 ( VAR_352 -> VAR_353 [ 0 ] [ 0 ] , VAR_354 -> VAR_355 [ 0 ] [ 0 ] ) ; VAR_356 -> VAR_357 [ 1 ] [ 0 ] = ( VAR_358 / VAR_359 -> VAR_360 ) * ( 1 << VAR_361 ) ; VAR_362 -> VAR_363 [ 1 ] [ 0 ] = METHOD_29 ( VAR_364 -> VAR_365 [ 1 ] [ 0 ] , VAR_366 -> VAR_367 [ 1 ] [ 0 ] ) ; VAR_368 -> VAR_369 [ 0 ] [ 1 ] = VAR_370 -> VAR_371 [ 0 ] [ 0 ] + ( 1 << VAR_372 ) ; VAR_373 -> VAR_374 [ 0 ] [ 1 ] = METHOD_30 ( VAR_375 -> VAR_376 [ 0 ] [ 1 ] , VAR_377 -> VAR_378 [ 0 ] [ 1 ] ) ; VAR_379 -> VAR_380 [ 1 ] [ 1 ] = VAR_381 -> VAR_382 [ 1 ] [ 0 ] + ( 1 << VAR_383 ) ; VAR_384 -> VAR_385 [ 1 ] [ 1 ] = METHOD_31 ( VAR_386 -> VAR_387 [ 1 ] [ 1 ] , VAR_388 -> VAR_389 [ 1 ] [ 1 ] ) ; VAR_390 -> VAR_391 = METHOD_32 ( VAR_392 -> VAR_393 [ 0 ] [ 1 ] - VAR_394 -> VAR_395 [ 0 ] [ 0 ] , VAR_396 -> VAR_397 ) ; VAR_398 -> VAR_399 = METHOD_33 ( VAR_400 -> VAR_401 [ 1 ] [ 1 ] - VAR_402 -> VAR_403 [ 1 ] [ 0 ] , VAR_404 -> VAR_405 ) ; VAR_406 -> VAR_407 = METHOD_34 ( VAR_408 -> VAR_409 , VAR_410 -> VAR_411 ) ; if ( ! VAR_412 -> VAR_413 ) return METHOD_35 ( VAR_414 ) ; VAR_415 -> VAR_416 = METHOD_36 ( VAR_417 -> VAR_418 , VAR_419 -> VAR_420 ) ; if ( ! VAR_421 -> VAR_422 ) return METHOD_37 ( VAR_423 ) ; VAR_424 -> VAR_425 = METHOD_38 ( VAR_426 -> VAR_427 * ( TYPE_20 ) VAR_428 -> VAR_429 , sizeof ( * VAR_430 -> VAR_431 ) ) ; if ( ! VAR_432 -> VAR_433 ) return METHOD_39 ( VAR_434 ) ; for ( VAR_435 = 0 ; VAR_436 < VAR_437 -> VAR_438 * VAR_439 -> VAR_440 ; VAR_441 ++ ) { TYPE_21 * VAR_442 = VAR_443 -> VAR_444 + VAR_445 ; TYPE_22 VAR_446 , VAR_447 ; VAR_448 = ( VAR_449 -> VAR_450 [ 0 ] [ 0 ] >> VAR_451 -> VAR_452 ) << VAR_453 -> VAR_454 ; VAR_455 = VAR_456 + ( ( VAR_457 % VAR_458 -> VAR_459 ) << VAR_460 -> VAR_461 ) ; VAR_462 -> VAR_463 [ 0 ] [ 0 ] = METHOD_40 ( VAR_464 , VAR_465 -> VAR_466 [ 0 ] [ 0 ] ) ; VAR_467 = ( VAR_468 -> VAR_469 [ 1 ] [ 0 ] >> VAR_470 -> VAR_471 ) << VAR_472 -> VAR_473 ; VAR_474 = VAR_475 + ( ( VAR_476 / VAR_477 -> VAR_478 ) << VAR_479 -> VAR_480 ) ; VAR_481 -> VAR_482 [ 1 ] [ 0 ] = METHOD_41 ( VAR_483 , VAR_484 -> VAR_485 [ 1 ] [ 0 ] ) ; VAR_486 -> VAR_487 [ 0 ] [ 1 ] = METHOD_42 ( VAR_488 + ( 1 << VAR_489 -> VAR_490 ) , VAR_491 -> VAR_492 [ 0 ] [ 1 ] ) ; VAR_493 -> VAR_494 [ 1 ] [ 1 ] = METHOD_43 ( VAR_495 + ( 1 << VAR_496 -> VAR_497 ) , VAR_498 -> VAR_499 [ 1 ] [ 1 ] ) ; if ( ( VAR_500 + ! ! VAR_501 ) & 1 ) { VAR_502 -> VAR_503 [ 0 ] [ 0 ] += VAR_504 -> VAR_505 [ VAR_506 - 1 ] . VAR_507 [ 0 ] [ 1 ] - VAR_508 -> VAR_509 [ VAR_510 - 1 ] . VAR_511 [ 0 ] [ 0 ] ; VAR_512 -> VAR_513 [ 0 ] [ 1 ] += VAR_514 -> VAR_515 [ VAR_516 - 1 ] . VAR_517 [ 0 ] [ 1 ] - VAR_518 -> VAR_519 [ VAR_520 - 1 ] . VAR_521 [ 0 ] [ 0 ] ; } if ( ( VAR_522 + ! ! VAR_523 ) & 2 ) { VAR_524 -> VAR_525 [ 1 ] [ 0 ] += VAR_526 -> VAR_527 [ VAR_528 - 1 ] . VAR_529 [ 1 ] [ 1 ] - VAR_530 -> VAR_531 [ VAR_532 - 1 ] . VAR_533 [ 1 ] [ 0 ] ; VAR_534 -> VAR_535 [ 1 ] [ 1 ] += VAR_536 -> VAR_537 [ VAR_538 - 1 ] . VAR_539 [ 1 ] [ 1 ] - VAR_540 -> VAR_541 [ VAR_542 - 1 ] . VAR_543 [ 1 ] [ 0 ] ; } VAR_544 -> VAR_545 = 0 ; VAR_546 -> VAR_547 = 3 ; VAR_548 -> VAR_549 = 0 ; VAR_550 -> VAR_551 = 0 ; VAR_552 -> VAR_553 = 0 ; } } } } return 0 ; }",649
650,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_1 VAR_7 ; const TYPE_2 * VAR_8 ; struct STRUCT_OR_UNION_7 * VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 . VAR_12 ) ; if ( ! VAR_13 -> VAR_14 ) { VAR_15 -> VAR_16 = 1 ; METHOD_2 ( & VAR_17 -> VAR_18 ) ; } VAR_19 = VAR_20 -> VAR_21 . VAR_22 -> VAR_23 ; VAR_24 = ( struct STRUCT_OR_UNION_8 * ) VAR_25 -> STRUCT_OR_UNION_9 ; if ( ! VAR_26 ) { METHOD_3 ( & VAR_27 -> VAR_28 , ""blacklistedby%s\\n"" , VAR_29 ) ; return - VAR_30 ; } VAR_31 = METHOD_4 ( VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = - VAR_37 ; VAR_38 = METHOD_5 ( sizeof ( * VAR_39 ) ) ; if ( ! VAR_40 ) goto VAR_41 ; METHOD_6 ( VAR_42 , & VAR_43 -> VAR_44 ) ; VAR_45 = METHOD_7 ( VAR_46 ) ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> STRUCT_OR_UNION_10 = VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = METHOD_8 ( VAR_60 , VAR_61 | VAR_62 | VAR_63 ) ; METHOD_9 ( & VAR_64 -> VAR_65 ) ; METHOD_10 ( & VAR_66 -> VAR_67 ) ; METHOD_11 ( & VAR_68 -> VAR_69 ) ; METHOD_12 ( & VAR_70 -> VAR_71 ) ; METHOD_13 ( & VAR_72 -> VAR_73 ) ; VAR_74 -> VAR_75 . VAR_76 = VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = ( unsigned TYPE_3 ) VAR_81 ; METHOD_14 ( & VAR_82 -> VAR_83 , VAR_84 ) ; METHOD_15 ( & VAR_85 -> VAR_86 ) ; VAR_87 -> VAR_88 . VAR_89 = VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = ( unsigned TYPE_4 ) VAR_94 ; METHOD_16 ( & VAR_95 -> VAR_96 ) ; METHOD_17 ( & VAR_97 -> VAR_98 ) ; METHOD_18 ( & VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = 0 ; VAR_103 -> VAR_104 = VAR_105 ; METHOD_19 ( VAR_106 -> VAR_107 , ""usb%d"" ) ; METHOD_20 ( VAR_108 -> VAR_109 , VAR_110 , sizeof VAR_111 ) ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 + VAR_116 -> VAR_117 ; VAR_118 -> VAR_119 = & VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = & VAR_126 ; if ( VAR_127 -> METHOD_21 ) { VAR_128 = VAR_129 -> METHOD_22 ( VAR_130 , VAR_131 ) ; if ( VAR_132 < 0 ) goto VAR_133 ; if ( ( VAR_134 -> STRUCT_OR_UNION_11 -> VAR_135 & VAR_136 ) != 0 && ( ( VAR_137 -> STRUCT_OR_UNION_12 -> VAR_138 & VAR_139 ) == 0 || ( VAR_140 -> VAR_141 [ 0 ] & 0x02 ) == 0 ) ) METHOD_23 ( VAR_142 -> VAR_143 , ""eth%d"" ) ; if ( ( VAR_144 -> STRUCT_OR_UNION_13 -> VAR_145 & VAR_146 ) != 0 ) METHOD_24 ( VAR_147 -> VAR_148 , ""wlan%d"" ) ; if ( ( VAR_149 -> STRUCT_OR_UNION_14 -> VAR_150 & VAR_151 ) != 0 ) METHOD_25 ( VAR_152 -> VAR_153 , ""wwan%d"" ) ; if ( ( VAR_154 -> STRUCT_OR_UNION_15 -> VAR_155 & VAR_156 ) != 0 ) VAR_157 -> VAR_158 |= VAR_159 ; if ( VAR_160 -> VAR_161 > ( VAR_162 -> VAR_163 - VAR_164 -> VAR_165 ) ) VAR_166 -> VAR_167 = VAR_168 -> VAR_169 - VAR_170 -> VAR_171 ; } else if ( ! VAR_172 -> VAR_173 || ! VAR_174 -> VAR_175 ) VAR_176 = METHOD_26 ( VAR_177 , VAR_178 ) ; else { VAR_179 -> VAR_180 = METHOD_27 ( VAR_181 , VAR_182 -> VAR_183 ) ; VAR_184 -> VAR_185 = METHOD_28 ( VAR_186 , VAR_187 -> VAR_188 ) ; if ( ! ( VAR_189 -> VAR_190 & VAR_191 ) ) VAR_192 = METHOD_29 ( VAR_193 , VAR_194 -> VAR_195 . VAR_196 , VAR_197 -> VAR_198 . VAR_199 ) ; else VAR_200 = 0 ; } if ( VAR_201 >= 0 && VAR_202 -> VAR_203 ) VAR_204 = METHOD_30 ( VAR_205 , VAR_206 ) ; if ( VAR_207 < 0 ) goto VAR_208 ; if ( ! VAR_209 -> VAR_210 ) VAR_211 -> VAR_212 = VAR_213 -> VAR_214 ; VAR_215 -> VAR_216 = METHOD_31 ( VAR_217 -> VAR_218 , VAR_219 -> VAR_220 , 1 ) ; if ( METHOD_32 ( VAR_221 -> VAR_222 , VAR_223 ) ) VAR_224 -> VAR_225 = VAR_226 ; if ( ( VAR_227 -> STRUCT_OR_UNION_16 -> VAR_228 & VAR_229 ) != 0 ) METHOD_33 ( VAR_230 , & VAR_231 ) ; if ( ( VAR_232 -> STRUCT_OR_UNION_17 -> VAR_233 & VAR_234 ) != 0 ) METHOD_34 ( VAR_235 , & VAR_236 ) ; METHOD_35 ( VAR_237 ) ; if ( VAR_238 -> VAR_239 && ! ( VAR_240 -> VAR_241 & VAR_242 ) && ! ( VAR_243 -> VAR_244 & VAR_245 ) ) { VAR_246 -> VAR_247 = METHOD_36 ( 1 , VAR_248 ) ; if ( ! VAR_249 -> VAR_250 ) { VAR_251 = - VAR_252 ; goto VAR_253 ; } } VAR_254 = METHOD_37 ( VAR_255 ) ; if ( VAR_256 ) goto VAR_257 ; METHOD_38 ( VAR_258 , VAR_259 , VAR_260 -> VAR_261 , ""register\'%s\'atusb-%s-%s,%s,%pM\\n"" , VAR_262 -> VAR_263 . VAR_264 -> VAR_265 , VAR_266 -> VAR_267 -> VAR_268 , VAR_269 -> VAR_270 , VAR_271 -> STRUCT_OR_UNION_18 -> VAR_272 , VAR_273 -> VAR_274 ) ; METHOD_39 ( VAR_275 , VAR_276 ) ; METHOD_40 ( VAR_277 ) ; if ( VAR_278 -> STRUCT_OR_UNION_19 -> VAR_279 & VAR_280 ) METHOD_41 ( VAR_281 , 0 , 0 ) ; return 0 ; VAR_282 : METHOD_42 ( VAR_283 -> VAR_284 ) ; VAR_285 : METHOD_43 ( VAR_286 -> VAR_287 ) ; VAR_288 : if ( VAR_289 -> METHOD_44 ) VAR_290 -> METHOD_45 ( VAR_291 , VAR_292 ) ; VAR_293 :  METHOD_46 ( VAR_294 ) ;  VAR_295 : return VAR_296 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 ; struct STRUCT_OR_UNION_3 * VAR_3 ; struct STRUCT_OR_UNION_4 * VAR_4 ; struct STRUCT_OR_UNION_5 * VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 ; TYPE_1 VAR_7 ; const TYPE_2 * VAR_8 ; struct STRUCT_OR_UNION_7 * VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 . VAR_12 ) ; if ( ! VAR_13 -> VAR_14 ) { VAR_15 -> VAR_16 = 1 ; METHOD_2 ( & VAR_17 -> VAR_18 ) ; } VAR_19 = VAR_20 -> VAR_21 . VAR_22 -> VAR_23 ; VAR_24 = ( struct STRUCT_OR_UNION_8 * ) VAR_25 -> STRUCT_OR_UNION_9 ; if ( ! VAR_26 ) { METHOD_3 ( & VAR_27 -> VAR_28 , ""blacklistedby%s\\n"" , VAR_29 ) ; return - VAR_30 ; } VAR_31 = METHOD_4 ( VAR_32 ) ; VAR_33 = VAR_34 -> VAR_35 ; VAR_36 = - VAR_37 ; VAR_38 = METHOD_5 ( sizeof ( * VAR_39 ) ) ; if ( ! VAR_40 ) goto VAR_41 ; METHOD_6 ( VAR_42 , & VAR_43 -> VAR_44 ) ; VAR_45 = METHOD_7 ( VAR_46 ) ; VAR_47 -> VAR_48 = VAR_49 ; VAR_50 -> VAR_51 = VAR_52 ; VAR_53 -> STRUCT_OR_UNION_10 = VAR_54 ; VAR_55 -> VAR_56 = VAR_57 ; VAR_58 -> VAR_59 = METHOD_8 ( VAR_60 , VAR_61 | VAR_62 | VAR_63 ) ; METHOD_9 ( & VAR_64 -> VAR_65 ) ; METHOD_10 ( & VAR_66 -> VAR_67 ) ; METHOD_11 ( & VAR_68 -> VAR_69 ) ; METHOD_12 ( & VAR_70 -> VAR_71 ) ; METHOD_13 ( & VAR_72 -> VAR_73 ) ; VAR_74 -> VAR_75 . VAR_76 = VAR_77 ; VAR_78 -> VAR_79 . VAR_80 = ( unsigned TYPE_3 ) VAR_81 ; METHOD_14 ( & VAR_82 -> VAR_83 , VAR_84 ) ; METHOD_15 ( & VAR_85 -> VAR_86 ) ; VAR_87 -> VAR_88 . VAR_89 = VAR_90 ; VAR_91 -> VAR_92 . VAR_93 = ( unsigned TYPE_4 ) VAR_94 ; METHOD_16 ( & VAR_95 -> VAR_96 ) ; METHOD_17 ( & VAR_97 -> VAR_98 ) ; METHOD_18 ( & VAR_99 -> VAR_100 ) ; VAR_101 -> VAR_102 = 0 ; VAR_103 -> VAR_104 = VAR_105 ; METHOD_19 ( VAR_106 -> VAR_107 , ""usb%d"" ) ; METHOD_20 ( VAR_108 -> VAR_109 , VAR_110 , sizeof VAR_111 ) ; VAR_112 -> VAR_113 = VAR_114 -> VAR_115 + VAR_116 -> VAR_117 ; VAR_118 -> VAR_119 = & VAR_120 ; VAR_121 -> VAR_122 = VAR_123 ; VAR_124 -> VAR_125 = & VAR_126 ; if ( VAR_127 -> METHOD_21 ) { VAR_128 = VAR_129 -> METHOD_22 ( VAR_130 , VAR_131 ) ; if ( VAR_132 < 0 ) goto VAR_133 ; if ( ( VAR_134 -> STRUCT_OR_UNION_11 -> VAR_135 & VAR_136 ) != 0 && ( ( VAR_137 -> STRUCT_OR_UNION_12 -> VAR_138 & VAR_139 ) == 0 || ( VAR_140 -> VAR_141 [ 0 ] & 0x02 ) == 0 ) ) METHOD_23 ( VAR_142 -> VAR_143 , ""eth%d"" ) ; if ( ( VAR_144 -> STRUCT_OR_UNION_13 -> VAR_145 & VAR_146 ) != 0 ) METHOD_24 ( VAR_147 -> VAR_148 , ""wlan%d"" ) ; if ( ( VAR_149 -> STRUCT_OR_UNION_14 -> VAR_150 & VAR_151 ) != 0 ) METHOD_25 ( VAR_152 -> VAR_153 , ""wwan%d"" ) ; if ( ( VAR_154 -> STRUCT_OR_UNION_15 -> VAR_155 & VAR_156 ) != 0 ) VAR_157 -> VAR_158 |= VAR_159 ; if ( VAR_160 -> VAR_161 > ( VAR_162 -> VAR_163 - VAR_164 -> VAR_165 ) ) VAR_166 -> VAR_167 = VAR_168 -> VAR_169 - VAR_170 -> VAR_171 ; } else if ( ! VAR_172 -> VAR_173 || ! VAR_174 -> VAR_175 ) VAR_176 = METHOD_26 ( VAR_177 , VAR_178 ) ; else { VAR_179 -> VAR_180 = METHOD_27 ( VAR_181 , VAR_182 -> VAR_183 ) ; VAR_184 -> VAR_185 = METHOD_28 ( VAR_186 , VAR_187 -> VAR_188 ) ; if ( ! ( VAR_189 -> VAR_190 & VAR_191 ) ) VAR_192 = METHOD_29 ( VAR_193 , VAR_194 -> VAR_195 . VAR_196 , VAR_197 -> VAR_198 . VAR_199 ) ; else VAR_200 = 0 ; } if ( VAR_201 >= 0 && VAR_202 -> VAR_203 ) VAR_204 = METHOD_30 ( VAR_205 , VAR_206 ) ; if ( VAR_207 < 0 ) goto VAR_208 ; if ( ! VAR_209 -> VAR_210 ) VAR_211 -> VAR_212 = VAR_213 -> VAR_214 ; VAR_215 -> VAR_216 = METHOD_31 ( VAR_217 -> VAR_218 , VAR_219 -> VAR_220 , 1 ) ; if ( METHOD_32 ( VAR_221 -> VAR_222 , VAR_223 ) ) VAR_224 -> VAR_225 = VAR_226 ; if ( ( VAR_227 -> STRUCT_OR_UNION_16 -> VAR_228 & VAR_229 ) != 0 ) METHOD_33 ( VAR_230 , & VAR_231 ) ; if ( ( VAR_232 -> STRUCT_OR_UNION_17 -> VAR_233 & VAR_234 ) != 0 ) METHOD_34 ( VAR_235 , & VAR_236 ) ; METHOD_35 ( VAR_237 ) ; if ( VAR_238 -> VAR_239 && ! ( VAR_240 -> VAR_241 & VAR_242 ) && ! ( VAR_243 -> VAR_244 & VAR_245 ) ) { VAR_246 -> VAR_247 = METHOD_36 ( 1 , VAR_248 ) ; if ( ! VAR_249 -> VAR_250 ) { VAR_251 = - VAR_252 ; goto VAR_253 ; } } VAR_254 = METHOD_37 ( VAR_255 ) ; if ( VAR_256 ) goto VAR_257 ; METHOD_38 ( VAR_258 , VAR_259 , VAR_260 -> VAR_261 , ""register\'%s\'atusb-%s-%s,%s,%pM\\n"" , VAR_262 -> VAR_263 . VAR_264 -> VAR_265 , VAR_266 -> VAR_267 -> VAR_268 , VAR_269 -> VAR_270 , VAR_271 -> STRUCT_OR_UNION_18 -> VAR_272 , VAR_273 -> VAR_274 ) ; METHOD_39 ( VAR_275 , VAR_276 ) ; METHOD_40 ( VAR_277 ) ; if ( VAR_278 -> STRUCT_OR_UNION_19 -> VAR_279 & VAR_280 ) METHOD_41 ( VAR_281 , 0 , 0 ) ; return 0 ; VAR_282 : METHOD_42 ( VAR_283 -> VAR_284 ) ; VAR_285 : METHOD_43 ( VAR_286 -> VAR_287 ) ; VAR_288 : if ( VAR_289 -> METHOD_44 ) VAR_290 -> METHOD_45 ( VAR_291 , VAR_292 ) ; VAR_293 : METHOD_47 ( & VAR_291 -> VAR_83 ) ; METHOD_48 ( & VAR_291 -> VAR_96 ) ; METHOD_46 ( VAR_294 ) ; VAR_295 : return VAR_296 ; }",650
651,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  VAR_1 -> VAR_2 . VAR_3 = VAR_4 ;  VAR_5 -> VAR_6 . VAR_7 . VAR_8 = & VAR_9 -> VAR_10 ;  VAR_11 -> VAR_12 . VAR_13 = VAR_14 -> VAR_15 ;  return METHOD_1 ( VAR_16 ) ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { VAR_1 -> VAR_2 . VAR_3 = VAR_4 ; VAR_5 -> VAR_6 . VAR_7 . VAR_8 = & VAR_9 -> VAR_10 ; VAR_11 -> VAR_12 . VAR_13 = VAR_14 -> VAR_15 ; return METHOD_1 ( VAR_16 ) ; },651
652,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 ) ; if ( METHOD_2 ( VAR_10 ) ) return ; switch ( VAR_11 -> VAR_12 ) { case 0 : METHOD_3 ( VAR_13 , & VAR_14 -> VAR_15 . VAR_16 , 0 ) ; METHOD_4 ( VAR_17 , VAR_18 -> VAR_19 ) ; break ; case - VAR_20 : case - VAR_21 : case - VAR_22 : case - VAR_23 :  if ( VAR_24 -> VAR_25 . VAR_26 == 0 )  break ; default : if ( METHOD_5 ( VAR_27 , VAR_28 , VAR_29 ) == - VAR_30 ) { METHOD_6 ( VAR_31 ) ; return ; } } METHOD_7 ( VAR_32 -> VAR_33 , VAR_34 -> VAR_35 . VAR_36 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 ) { struct STRUCT_OR_UNION_1 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = METHOD_1 ( VAR_8 -> VAR_9 ) ; if ( METHOD_2 ( VAR_10 ) ) return ; switch ( VAR_11 -> VAR_12 ) { case 0 : METHOD_3 ( VAR_13 , & VAR_14 -> VAR_15 . VAR_16 , 0 ) ; METHOD_4 ( VAR_17 , VAR_18 -> VAR_19 ) ; break ; case - VAR_20 : case - VAR_21 : case - VAR_22 : case - VAR_23 : if ( VAR_24 -> VAR_25 . VAR_37 == 0 ) break ; default : if ( METHOD_5 ( VAR_27 , VAR_28 , VAR_29 ) == - VAR_30 ) { METHOD_6 ( VAR_31 ) ; return ; } } METHOD_7 ( VAR_32 -> VAR_33 , VAR_34 -> VAR_35 . VAR_36 ) ; }",652
653,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = METHOD_1 ( STRUCT_OR_UNION_4 -> VAR_2 ) ; struct STRUCT_OR_UNION_5 * VAR_3 = METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_4 ) ; VAR_5 -> VAR_6 = VAR_7 ; VAR_8 -> VAR_9 = METHOD_3 ( VAR_10 ) ; if ( VAR_11 ) { METHOD_4 ( & VAR_12 -> VAR_13 ) ;  if ( VAR_14 -> VAR_15 >= 0 ) {   VAR_16 -> VAR_17 = VAR_18 -> VAR_19 ;   VAR_20 -> VAR_21 = VAR_22 -> VAR_23 = VAR_24 -> VAR_25 ;  VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; } METHOD_5 ( & VAR_34 -> VAR_35 ) ; } VAR_36 -> VAR_37 = VAR_38 ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = METHOD_1 ( STRUCT_OR_UNION_4 -> VAR_2 ) ; struct STRUCT_OR_UNION_5 * VAR_3 = METHOD_2 ( STRUCT_OR_UNION_6 -> VAR_4 ) ; VAR_5 -> VAR_6 = VAR_7 ; VAR_8 -> VAR_9 = METHOD_3 ( VAR_10 ) ; if ( VAR_11 ) { METHOD_4 ( & VAR_12 -> VAR_13 ) ; if ( VAR_14 -> VAR_15 >= 0 ) { VAR_16 -> VAR_17 = VAR_18 -> VAR_19 ; VAR_20 -> VAR_21 = VAR_22 -> VAR_23 = VAR_24 -> VAR_25 ; VAR_26 -> VAR_27 = VAR_28 -> VAR_29 ; VAR_30 -> VAR_31 = VAR_32 -> VAR_33 ; } METHOD_5 ( & VAR_34 -> VAR_35 ) ; } VAR_36 -> VAR_37 = VAR_38 ; return 0 ; }",653
654,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 = 0 ; TYPE_5 * VAR_5 = VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 = 0 ; if ( ! VAR_10 ) { return VAR_11 ; } while ( VAR_12 ) { TYPE_9 * VAR_13 = METHOD_2 ( VAR_14 , ',' ) ; if ( VAR_15 ) { * VAR_16 ++ = 0 ; } while ( VAR_17 [ 0 ] == '' ) { VAR_18 ++ ; } if ( VAR_19 >= VAR_20 ) { METHOD_3 ( ""Toomanyoperands\\n"" ) ; return VAR_21 ; } VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 = VAR_26 ; VAR_27 -> VAR_28 [ VAR_29 ] . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 [ VAR_34 ] . VAR_35 = VAR_36 ; while ( VAR_37 [ 0 ] == '' || VAR_38 [ 0 ] == '[' || VAR_39 [ 0 ] == ']' ) { VAR_40 ++ ; } if ( ! METHOD_4 ( VAR_41 , ""lsl"" , 3 ) ) { VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 = VAR_46 ; } else if ( ! METHOD_5 ( VAR_47 , ""lsr"" , 3 ) ) { VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 = VAR_52 ; } else if ( ! METHOD_6 ( VAR_53 , ""asr"" , 3 ) ) { VAR_54 -> VAR_55 [ VAR_56 ] . VAR_57 = VAR_58 ; }  if ( VAR_59 -> VAR_60 [ VAR_61 ] . VAR_62 != VAR_63 ) {  VAR_64 -> VAR_65 ++ ; VAR_66 -> VAR_67 [ VAR_68 ] . VAR_69 = METHOD_7 ( VAR_70 , VAR_71 + 4 ) ; if ( VAR_72 -> VAR_73 [ VAR_74 ] . VAR_75 > 63 ) { return VAR_76 ; } VAR_77 ++ ; VAR_78 = VAR_79 ; continue ; } switch ( VAR_80 [ 0 ] ) { case 'x' : VAR_81 = METHOD_8 ( VAR_82 , ',' ) ; if ( VAR_83 ) { VAR_84 [ 0 ] = '\\0' ; } VAR_85 -> VAR_86 ++ ; VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = VAR_91 ; VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 = VAR_96 ; VAR_97 -> VAR_98 [ VAR_99 ] . VAR_100 = METHOD_9 ( VAR_101 , VAR_102 + 1 ) ; if ( VAR_103 -> VAR_104 [ VAR_105 ] . VAR_106 > 31 ) { return VAR_107 ; } break ; case 'w' : VAR_108 -> VAR_109 ++ ; VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 = VAR_114 ; VAR_115 -> VAR_116 [ VAR_117 ] . VAR_118 = VAR_119 ; VAR_120 -> VAR_121 [ VAR_122 ] . VAR_123 = METHOD_10 ( VAR_124 , VAR_125 + 1 ) ; if ( VAR_126 -> VAR_127 [ VAR_128 ] . VAR_129 > 31 ) { return VAR_130 ; } break ; case 'v' : VAR_131 -> VAR_132 ++ ; VAR_133 -> VAR_134 [ VAR_135 ] . VAR_136 = VAR_137 ; VAR_138 -> VAR_139 [ VAR_140 ] . VAR_141 = METHOD_11 ( VAR_142 , VAR_143 + 1 ) ; break ; case 's' : case 'S' : if ( VAR_144 [ 1 ] == 'P' || VAR_145 [ 1 ] == 'p' ) { TYPE_10 VAR_146 ; for ( VAR_147 = 0 ; VAR_148 [ VAR_149 ] . VAR_150 ; VAR_151 ++ ) { if ( ! METHOD_12 ( VAR_152 , VAR_153 [ VAR_154 ] . VAR_155 , METHOD_13 ( VAR_156 [ VAR_157 ] . VAR_158 ) ) ) { VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 = VAR_163 [ VAR_164 ] . VAR_165 ; break ; } } VAR_166 -> VAR_167 ++ ; VAR_168 -> VAR_169 [ VAR_170 ] . VAR_171 = VAR_172 ; VAR_173 -> VAR_174 [ VAR_175 ] . VAR_176 = VAR_177 | VAR_178 ; VAR_179 -> VAR_180 [ VAR_181 ] . VAR_182 = 31 ; break ; } VAR_183 = METHOD_14 ( VAR_184 ) ; if ( VAR_185 != - 1 ) { VAR_186 -> VAR_187 ++ ; VAR_188 -> VAR_189 [ VAR_190 ] . VAR_191 = VAR_192 ; VAR_193 -> VAR_194 [ VAR_195 ] . VAR_196 = VAR_197 ; } break ; case 'L' : case 'l' : case 'I' : case 'i' : case 'N' : case 'n' : case 'O' : case 'o' : case 'p' : case 'P' : VAR_198 = METHOD_15 ( VAR_199 ) ; if ( VAR_200 != - 1 ) { VAR_201 -> VAR_202 ++ ; VAR_203 -> VAR_204 [ VAR_205 ] . VAR_206 = VAR_207 ; VAR_208 -> VAR_209 [ VAR_210 ] . VAR_211 = VAR_212 ; } break ; case '-' : VAR_213 -> VAR_214 [ VAR_215 ] . VAR_216 = - 1 ; default : VAR_217 -> VAR_218 ++ ; VAR_219 -> VAR_220 [ VAR_221 ] . VAR_222 = VAR_223 ; VAR_224 -> VAR_225 [ VAR_226 ] . VAR_227 = METHOD_16 ( VAR_228 , VAR_229 ) ; VAR_230 ++ ; break ; } VAR_231 = VAR_232 ; VAR_233 ++ ; if ( VAR_234 > VAR_235 ) { METHOD_17 ( VAR_236 ) ; return VAR_237 ; } } METHOD_18 ( VAR_238 ) ; return VAR_239 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = METHOD_1 ( VAR_3 ) ; TYPE_4 VAR_4 = 0 ; TYPE_5 * VAR_5 = VAR_6 ; TYPE_6 * VAR_7 ; TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 = 0 ; if ( ! VAR_10 ) { return VAR_11 ; } while ( VAR_12 ) { TYPE_9 * VAR_13 = METHOD_2 ( VAR_14 , ',' ) ; if ( VAR_15 ) { * VAR_16 ++ = 0 ; } while ( VAR_17 [ 0 ] == '' ) { VAR_18 ++ ; } if ( METHOD_13 ( VAR_231 ) > 4 && VAR_19 >= VAR_20 ) { METHOD_3 ( ""Toomanyoperands\\n"" ) ; return VAR_21 ; } VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 = VAR_26 ; VAR_27 -> VAR_28 [ VAR_29 ] . VAR_30 = VAR_31 ; VAR_32 -> VAR_33 [ VAR_34 ] . VAR_35 = VAR_36 ; while ( VAR_37 [ 0 ] == '' || VAR_38 [ 0 ] == '[' || VAR_39 [ 0 ] == ']' ) { VAR_40 ++ ; } if ( ! METHOD_4 ( VAR_41 , ""lsl"" , 3 ) ) { VAR_42 -> VAR_43 [ VAR_44 ] . VAR_45 = VAR_46 ; } else if ( ! METHOD_5 ( VAR_47 , ""lsr"" , 3 ) ) { VAR_48 -> VAR_49 [ VAR_50 ] . VAR_51 = VAR_52 ; } else if ( ! METHOD_6 ( VAR_53 , ""asr"" , 3 ) ) { VAR_54 -> VAR_55 [ VAR_56 ] . VAR_57 = VAR_58 ; } if ( VAR_59 -> VAR_60 [ VAR_61 ] . VAR_62 != VAR_63 ) { VAR_64 -> VAR_65 ++ ; VAR_66 -> VAR_67 [ VAR_68 ] . VAR_69 = METHOD_7 ( VAR_70 , VAR_71 + 4 ) ; if ( VAR_72 -> VAR_73 [ VAR_74 ] . VAR_75 > 63 ) { return VAR_76 ; } VAR_77 ++ ; VAR_78 = VAR_79 ; continue ; } switch ( VAR_80 [ 0 ] ) { case 'x' : VAR_81 = METHOD_8 ( VAR_82 , ',' ) ; if ( VAR_83 ) { VAR_84 [ 0 ] = '\\0' ; } VAR_85 -> VAR_86 ++ ; VAR_87 -> VAR_88 [ VAR_89 ] . VAR_90 = VAR_91 ; VAR_92 -> VAR_93 [ VAR_94 ] . VAR_95 = VAR_96 ; VAR_97 -> VAR_98 [ VAR_99 ] . VAR_100 = METHOD_9 ( VAR_101 , VAR_102 + 1 ) ; if ( VAR_103 -> VAR_104 [ VAR_105 ] . VAR_106 > 31 ) { return VAR_107 ; } break ; case 'w' : VAR_108 -> VAR_109 ++ ; VAR_110 -> VAR_111 [ VAR_112 ] . VAR_113 = VAR_114 ; VAR_115 -> VAR_116 [ VAR_117 ] . VAR_118 = VAR_119 ; VAR_120 -> VAR_121 [ VAR_122 ] . VAR_123 = METHOD_10 ( VAR_124 , VAR_125 + 1 ) ; if ( VAR_126 -> VAR_127 [ VAR_128 ] . VAR_129 > 31 ) { return VAR_130 ; } break ; case 'v' : VAR_131 -> VAR_132 ++ ; VAR_133 -> VAR_134 [ VAR_135 ] . VAR_136 = VAR_137 ; VAR_138 -> VAR_139 [ VAR_140 ] . VAR_141 = METHOD_11 ( VAR_142 , VAR_143 + 1 ) ; break ; case 's' : case 'S' : if ( VAR_144 [ 1 ] == 'P' || VAR_145 [ 1 ] == 'p' ) { TYPE_10 VAR_146 ; for ( VAR_147 = 0 ; VAR_148 [ VAR_149 ] . VAR_150 ; VAR_151 ++ ) { if ( ! METHOD_12 ( VAR_152 , VAR_153 [ VAR_154 ] . VAR_155 , METHOD_13 ( VAR_156 [ VAR_157 ] . VAR_158 ) ) ) { VAR_159 -> VAR_160 [ VAR_161 ] . VAR_162 = VAR_163 [ VAR_164 ] . VAR_165 ; break ; } } VAR_166 -> VAR_167 ++ ; VAR_168 -> VAR_169 [ VAR_170 ] . VAR_171 = VAR_172 ; VAR_173 -> VAR_174 [ VAR_175 ] . VAR_176 = VAR_177 | VAR_178 ; VAR_179 -> VAR_180 [ VAR_181 ] . VAR_182 = 31 ; break ; } VAR_183 = METHOD_14 ( VAR_184 ) ; if ( VAR_185 != - 1 ) { VAR_186 -> VAR_187 ++ ; VAR_188 -> VAR_189 [ VAR_190 ] . VAR_191 = VAR_192 ; VAR_193 -> VAR_194 [ VAR_195 ] . VAR_196 = VAR_197 ; } break ; case 'L' : case 'l' : case 'I' : case 'i' : case 'N' : case 'n' : case 'O' : case 'o' : case 'p' : case 'P' : VAR_198 = METHOD_15 ( VAR_199 ) ; if ( VAR_200 != - 1 ) { VAR_201 -> VAR_202 ++ ; VAR_203 -> VAR_204 [ VAR_205 ] . VAR_206 = VAR_207 ; VAR_208 -> VAR_209 [ VAR_210 ] . VAR_211 = VAR_212 ; } break ; case '-' : VAR_213 -> VAR_214 [ VAR_215 ] . VAR_216 = - 1 ; default : VAR_217 -> VAR_218 ++ ; VAR_219 -> VAR_220 [ VAR_221 ] . VAR_222 = VAR_223 ; VAR_224 -> VAR_225 [ VAR_226 ] . VAR_227 = METHOD_16 ( VAR_228 , VAR_229 ) ; VAR_230 ++ ; break ; } VAR_231 = VAR_232 ; VAR_233 ++ ; if ( VAR_234 > VAR_235 ) { METHOD_17 ( VAR_236 ) ; return VAR_237 ; } } METHOD_18 ( VAR_238 ) ; return VAR_239 ; }",654
655,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 -> VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; TYPE_5 * VAR_10 = VAR_11 -> VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 [ 2 ] ; TYPE_8 VAR_15 = 0 ; TYPE_9 VAR_16 , VAR_17 ; TYPE_10 VAR_18 , VAR_19 = 0 , VAR_20 ; TYPE_11 VAR_21 = 0 ; TYPE_12 VAR_22 , VAR_23 ; TYPE_13 VAR_24 ; TYPE_14 * VAR_25 = VAR_26 -> VAR_27 ; TYPE_15 * VAR_28 = & VAR_29 -> VAR_30 ; TYPE_16 VAR_31 ; TYPE_17 VAR_32 , VAR_33 ; TYPE_18 VAR_34 , VAR_35 ; TYPE_19 VAR_36 ; TYPE_20 * VAR_37 ; TYPE_21 VAR_38 ; TYPE_22 VAR_39 ; TYPE_23 VAR_40 = 0 ; VAR_41 -> VAR_42 -> VAR_43 = 0 ; VAR_44 = METHOD_1 ( VAR_45 , VAR_46 ) ; if ( VAR_47 > ( VAR_48 -> VAR_49 * VAR_50 -> VAR_51 ) ) { return VAR_52 ; } if ( ( ( VAR_53 << VAR_54 -> VAR_55 ) <= VAR_56 -> VAR_57 ) && ( VAR_58 -> VAR_59 != 0 ) && ( VAR_60 -> VAR_61 != 0 ) ) { return VAR_62 ; } METHOD_2 ( ""SH:first_mb_in_slice"" , VAR_63 ) ; VAR_64 = METHOD_3 ( VAR_65 , VAR_66 ) ; if ( VAR_67 > 9 ) return VAR_68 ; VAR_69 = VAR_70 ; METHOD_4 ( ""SH:slice_type"" , ( VAR_71 ) ) ; VAR_72 -> VAR_73 = 0 ; if ( VAR_74 > 4 ) { VAR_75 -= 5 ; VAR_76 -> VAR_77 = 1 ; } { TYPE_24 VAR_78 ; if ( ( VAR_79 -> VAR_80 == VAR_81 ) || ( VAR_82 -> VAR_83 == VAR_84 ) ) { TYPE_25 VAR_85 = 0 ; if ( VAR_86 -> VAR_87 == VAR_88 ) { VAR_89 = 0 ; VAR_90 -> VAR_91 = VAR_92 ; } else if ( ( VAR_93 == VAR_94 ) && ( 1 >= VAR_95 -> VAR_96 -> VAR_97 ) ) { VAR_98 = 0 ; VAR_99 -> VAR_100 = VAR_101 ; } else { VAR_102 = 1 ; } if ( ( 0 == VAR_103 ) && ( 1 == VAR_104 -> VAR_105 ) ) { VAR_106 = 0 ; } if ( VAR_107 ) { VAR_108 -> VAR_109 = 1 ; VAR_110 -> VAR_111 = VAR_112 ; return 0 ; } else { if ( 1 == VAR_113 -> VAR_114 ) { VAR_115 -> VAR_116 = 1 ; return 0 ; } } } } VAR_117 = METHOD_5 ( VAR_118 , VAR_119 ) ; if ( VAR_120 & VAR_121 ) return VAR_122 ; METHOD_6 ( ""SH:pic_parameter_set_id"" , VAR_123 ) ; VAR_124 = & VAR_125 -> VAR_126 [ VAR_127 ] ; if ( VAR_128 == VAR_129 -> VAR_130 ) { return VAR_131 ; } VAR_132 = VAR_133 -> VAR_134 ; if ( ! VAR_135 ) return VAR_136 ; if ( VAR_137 == VAR_138 -> VAR_139 ) return VAR_140 ; VAR_141 = METHOD_7 ( VAR_142 , VAR_143 -> VAR_144 ) ; METHOD_8 ( ""SH:frame_num"" , VAR_145 ) ; if ( ! VAR_146 -> VAR_147 ) { VAR_148 = METHOD_9 ( VAR_149 ) ; METHOD_10 ( ""SH:field_pic_flag"" , VAR_150 ) ; VAR_151 = 0 ; if ( VAR_152 ) { VAR_153 -> VAR_154 = ( TYPE_26 * ) VAR_155 ; VAR_156 = METHOD_11 ( VAR_157 ) ; METHOD_12 ( ""SH:bottom_field_flag"" , VAR_158 ) ; } else { VAR_159 -> VAR_160 = ( TYPE_27 * ) VAR_161 ; } } else { VAR_162 = 0 ; VAR_163 = 0 ; VAR_164 -> VAR_165 = ( TYPE_28 * ) VAR_166 ; } VAR_167 = VAR_168 ; if ( VAR_169 ) { if ( 0 == VAR_170 ) { VAR_171 -> VAR_172 = VAR_173 | VAR_174 ; } VAR_175 = VAR_176 ; VAR_177 = METHOD_13 ( VAR_178 , VAR_179 ) ; if ( VAR_180 > 65535 ) return VAR_181 ; METHOD_14 ( ""SH:"" , VAR_182 ) ; } VAR_183 [ 0 ] = VAR_184 [ 1 ] = 0 ; VAR_185 . VAR_186 = 0 ; VAR_187 . VAR_188 = 0 ; VAR_189 = VAR_190 -> VAR_191 ; if ( VAR_192 == 0 ) { VAR_193 = METHOD_15 ( VAR_194 , VAR_195 -> VAR_196 ) ; if ( VAR_197 < 0 || VAR_198 >= VAR_199 -> VAR_200 ) return VAR_201 ; VAR_202 . VAR_203 = VAR_204 ; METHOD_16 ( ""SH:pic_order_cnt_lsb"" , VAR_205 . VAR_206 ) ; if ( ( VAR_207 -> VAR_208 == 1 ) && ( ! VAR_209 ) ) { VAR_210 . VAR_211 = METHOD_17 ( VAR_212 , VAR_213 ) ; METHOD_18 ( ""SH:delta_pic_order_cnt_bottom"" , VAR_214 . VAR_215 ) ; } } VAR_216 . VAR_217 [ 0 ] = 0 ; VAR_218 . VAR_219 [ 1 ] = 0 ; if ( VAR_220 == 1 && ( ! VAR_221 -> VAR_222 ) ) { VAR_223 . VAR_224 [ 0 ] = METHOD_19 ( VAR_225 , VAR_226 ) ; METHOD_20 ( ""SH:delta_pic_order_cnt[0]"" , VAR_227 . VAR_228 [ 0 ] ) ; if ( VAR_229 -> VAR_230 && ! VAR_231 ) { VAR_232 . VAR_233 [ 1 ] = METHOD_21 ( VAR_234 , VAR_235 ) ; METHOD_22 ( ""SH:delta_pic_order_cnt[1]"" , VAR_236 . VAR_237 [ 1 ] ) ; } } if ( VAR_238 -> VAR_239 ) { VAR_240 = METHOD_23 ( VAR_241 , VAR_242 ) ; if ( VAR_243 > VAR_244 ) return VAR_245 ; VAR_246 = VAR_247 ; METHOD_24 ( ""SH:redundant_pic_cnt"" , VAR_248 ) ; } VAR_249 = 0 ; if ( ! VAR_250 -> VAR_251 ) { VAR_252 = METHOD_25 ( VAR_253 , VAR_254 , & VAR_255 , & VAR_256 -> VAR_257 , VAR_258 , VAR_259 , VAR_260 , VAR_261 , VAR_262 , VAR_263 ) ; if ( ( VAR_264 -> VAR_265 == 2 ) && ( VAR_266 == 0 ) ) { VAR_267 -> VAR_268 -> VAR_269 |= VAR_270 ; VAR_271 = 1 ; } else { VAR_272 -> VAR_273 -> VAR_274 &= VAR_275 ; } } VAR_276 = VAR_277 -> VAR_278 && ( ! VAR_279 ) ; VAR_280 = 0 ; if ( VAR_281 || VAR_282 -> VAR_283 ) { if ( VAR_284 != VAR_285 -> VAR_286 && VAR_287 -> VAR_288 != 0 && VAR_289 -> VAR_290 != ( VAR_291 | VAR_292 ) ) { VAR_293 -> VAR_294 = 1 ; if ( VAR_295 -> VAR_296 ) { VAR_297 = 1 ; } else { VAR_298 = 2 ; } if ( VAR_299 -> VAR_300 == VAR_301 ) VAR_302 -> VAR_303 = 1 ; else VAR_304 -> VAR_305 = 0 ; VAR_306 = ( VAR_307 -> VAR_308 * VAR_309 -> VAR_310 ) - VAR_311 -> VAR_312 ; VAR_313 = & VAR_314 -> VAR_315 ; VAR_316 = VAR_317 -> VAR_318 == VAR_319 ; } else if ( VAR_320 -> VAR_321 == 2 ) { if ( VAR_322 > 0 ) { VAR_323 = 1 ; VAR_324 = VAR_325 << VAR_326 ; VAR_327 = & VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 ; VAR_335 -> VAR_336 = VAR_337 ; VAR_338 -> VAR_339 = VAR_340 . VAR_341 ; VAR_342 -> VAR_343 = VAR_344 ; VAR_345 -> VAR_346 = VAR_347 ; VAR_348 -> VAR_349 = VAR_350 ; VAR_351 -> VAR_352 = VAR_353 ; } } else { if ( VAR_354 -> VAR_355 ) { VAR_356 = 1 ; VAR_357 = VAR_358 << VAR_359 ; } else { VAR_360 = 2 ; VAR_361 = ( VAR_362 -> VAR_363 * VAR_364 -> VAR_365 ) - VAR_366 -> VAR_367 ; } VAR_368 = & VAR_369 ; } } else { if ( ( VAR_370 << VAR_371 ) > VAR_372 -> VAR_373 ) { VAR_374 = 2 ; VAR_375 = ( VAR_376 << VAR_377 ) - VAR_378 -> VAR_379 ; VAR_380 = & VAR_381 ; } else if ( ( VAR_382 << VAR_383 ) < VAR_384 -> VAR_385 ) { return VAR_386 ; } } if ( VAR_387 ) { VAR_388 = METHOD_26 ( VAR_389 , VAR_390 , VAR_391 , VAR_392 , VAR_393 , VAR_394 ) ; if ( VAR_395 -> VAR_396 == 1 ) { VAR_397 -> VAR_398 = 1 - VAR_399 -> VAR_400 ; VAR_401 -> VAR_402 = VAR_403 ; VAR_404 -> VAR_405 = VAR_406 ; VAR_407 -> VAR_408 = 0 ; return VAR_409 ; } if ( VAR_410 == 2 ) { VAR_411 -> VAR_412 = 0 ; return VAR_413 ; } if ( VAR_414 -> VAR_415 >= VAR_416 -> VAR_417 * VAR_418 -> VAR_419 ) { VAR_420 -> VAR_421 = 0 ; return VAR_422 ; } if ( VAR_423 -> VAR_424 -> VAR_425 & VAR_426 ) { METHOD_27 ( VAR_427 ) ; return VAR_428 ; } if ( VAR_429 != VAR_430 ) return VAR_431 ; VAR_432 = 0 ; } if ( VAR_433 -> VAR_434 == 0 ) VAR_435 -> VAR_436 ++ ; VAR_437 -> VAR_438 = 0 ; if ( ! VAR_439 -> VAR_440 ) { TYPE_29 VAR_441 = 0 ; if ( VAR_442 -> VAR_443 == ( VAR_444 -> VAR_445 -> VAR_446 + 1 ) ) { if ( VAR_447 -> VAR_448 == 0 ) VAR_449 = 1 ; } if ( VAR_450 || VAR_451 ) { if ( 1 == VAR_452 -> VAR_453 ) { VAR_454 = METHOD_28 ( VAR_455 ) ; if ( VAR_456 != VAR_457 ) return VAR_458 ; VAR_459 = METHOD_29 ( VAR_460 , VAR_461 , VAR_462 ) ; if ( VAR_463 != VAR_464 ) return VAR_465 ; if VAR_466 METHOD_30 ( ""------PICSKIPPED------\\n"" ) ; return VAR_467 ; } else { VAR_468 = METHOD_31 ( VAR_469 , VAR_470 , VAR_471 ) ; if ( VAR_472 != VAR_473 ) return VAR_474 ; } } } if ( VAR_475 ) { VAR_476 -> VAR_477 = VAR_478 ; } if ( VAR_479 -> VAR_480 ) { TYPE_30 VAR_481 ; TYPE_31 VAR_482 , VAR_483 ; if ( ! VAR_484 -> VAR_485 ) { VAR_486 = VAR_487 -> VAR_488 -> VAR_489 ; VAR_490 = VAR_491 -> VAR_492 -> VAR_493 ; VAR_494 = METHOD_32 ( VAR_495 , VAR_496 ) ; } else if ( ! VAR_497 -> VAR_498 ) VAR_499 = VAR_500 -> VAR_501 -> VAR_502 ; else VAR_503 = VAR_504 -> VAR_505 -> VAR_506 ; VAR_507 -> VAR_508 -> VAR_509 = VAR_510 - VAR_511 -> VAR_512 -> VAR_513 ; VAR_514 -> VAR_515 -> VAR_516 = VAR_517 - VAR_518 -> VAR_519 -> VAR_520 ; VAR_521 -> VAR_522 -> VAR_523 = VAR_524 ; VAR_525 -> VAR_526 -> VAR_527 = VAR_528 ; } if ( VAR_529 -> VAR_530 == 2 ) { VAR_531 = METHOD_33 ( VAR_532 , VAR_533 , & VAR_534 -> VAR_535 , & VAR_536 , VAR_537 , VAR_538 , VAR_539 , VAR_540 , VAR_541 , & VAR_542 ) ; if ( VAR_543 != VAR_544 ) return VAR_545 ; if ( VAR_546 >= VAR_547 -> VAR_548 ) VAR_549 -> VAR_550 = VAR_551 ; if ( VAR_552 == 0 ) { VAR_553 -> VAR_554 = VAR_555 -> VAR_556 + VAR_557 -> VAR_558 + VAR_559 -> VAR_560 + 1 ; VAR_561 -> VAR_562 = 0 ; } } VAR_563 -> VAR_564 [ 0 ] = VAR_565 [ 0 ] ; VAR_566 -> VAR_567 [ 1 ] = VAR_568 [ 1 ] ; VAR_569 -> VAR_570 = VAR_571 ; VAR_572 -> VAR_573 = VAR_574 ; VAR_575 -> VAR_576 = VAR_577 ; VAR_578 -> VAR_579 = VAR_580 ; VAR_581 -> VAR_582 = VAR_583 ; VAR_584 -> VAR_585 = VAR_586 . VAR_587 ; VAR_588 -> VAR_589 = VAR_590 ; VAR_591 -> VAR_592 = VAR_593 ; VAR_594 -> VAR_595 = VAR_596 ; VAR_597 -> VAR_598 = VAR_599 ; if ( VAR_600 -> VAR_601 ) VAR_602 -> VAR_603 = VAR_604 -> VAR_605 ; else VAR_606 -> VAR_607 = 1 ; if ( VAR_608 == VAR_609 ) { VAR_610 -> VAR_611 = METHOD_34 ( VAR_612 ) ; METHOD_35 ( ""SH:direct_spatial_mv_pred_flag"" , VAR_613 -> VAR_614 ) ; if ( VAR_615 -> VAR_616 ) VAR_617 -> VAR_618 = VAR_619 ; else VAR_620 -> VAR_621 = VAR_622 ; if ( ! ( ( VAR_623 -> VAR_624 -> VAR_625 ) && ( ! VAR_626 ) ) ) VAR_627 -> VAR_628 = VAR_629 ; } else { if ( ! ( ( VAR_630 -> VAR_631 -> VAR_632 ) && ( ! VAR_633 ) ) ) VAR_634 -> VAR_635 = VAR_636 ; } if ( VAR_637 -> VAR_638 == 2 ) { if ( VAR_639 == 0 ) { VAR_640 = METHOD_36 ( VAR_641 , VAR_642 , & VAR_643 , VAR_644 , VAR_645 ) ; if ( VAR_646 != VAR_647 ) return VAR_648 ; } VAR_649 -> VAR_650 = 0 ; { METHOD_37 ( VAR_651 , VAR_652 -> VAR_653 , & ( VAR_654 -> VAR_655 ) ) ; if ( 0 != VAR_656 -> VAR_657 . VAR_658 ) { VAR_659 -> VAR_660 = VAR_661 -> VAR_662 . VAR_663 ; } else VAR_664 -> VAR_665 = 1 ; } if ( VAR_666 -> VAR_667 == 1 ) { if ( VAR_668 -> VAR_669 == 0 ) { METHOD_38 ( VAR_670 -> VAR_671 , VAR_672 , ( TYPE_32 * ) VAR_673 , ( TYPE_33 * ) VAR_674 ) ; VAR_675 -> VAR_676 = 1 ; } if ( ( VAR_677 -> VAR_678 == 3 ) && ( ( VAR_679 -> VAR_680 == 0 ) || VAR_681 -> VAR_682 ) && ( VAR_683 -> VAR_684 == 0 ) ) { VAR_685 -> VAR_686 = 0 ; METHOD_39 ( VAR_687 -> VAR_688 , VAR_689 , ( TYPE_34 * ) VAR_690 , ( TYPE_35 * ) VAR_691 ) ; VAR_692 -> VAR_693 = 1 ; } } } { TYPE_36 VAR_694 ; VAR_695 = ( ( VAR_696 -> VAR_697 -> VAR_698 == 0 ) && ( VAR_699 -> VAR_700 -> VAR_701 == 0 ) && ( VAR_702 != VAR_703 ) && ( VAR_704 -> VAR_705 -> VAR_706 == 0 ) ) ; if ( VAR_707 ) { VAR_708 -> VAR_709 = VAR_710 ; VAR_711 -> VAR_712 = VAR_713 ; } else { VAR_714 -> VAR_715 = VAR_716 ; VAR_717 -> VAR_718 = VAR_719 ; } } { TYPE_37 * VAR_720 = VAR_721 -> VAR_722 ; if ( VAR_723 -> VAR_724 == VAR_725 ) { VAR_726 -> VAR_727 = VAR_728 ; VAR_729 -> VAR_730 = VAR_731 ; } VAR_732 -> VAR_733 = VAR_734 ; } { TYPE_38 VAR_735 , VAR_736 ; VAR_737 = ( VAR_738 -> VAR_739 & VAR_740 ) && ( VAR_741 == VAR_742 ) && ( 0 == VAR_743 ) ; VAR_744 = ( VAR_745 -> VAR_746 & VAR_747 ) && ( VAR_748 == VAR_749 ) && ( 0 == VAR_750 ) ; if ( VAR_751 ) { VAR_752 -> VAR_753 -> VAR_754 |= VAR_755 ; VAR_756 -> VAR_757 = 1 ; return VAR_758 ; } if ( VAR_759 ) { VAR_760 -> VAR_761 -> VAR_762 |= VAR_763 ; VAR_764 -> VAR_765 = 1 ; return VAR_766 ; } } { TYPE_39 VAR_767 , VAR_768 ; VAR_769 -> VAR_770 = ( ( VAR_771 << VAR_772 -> VAR_773 ) * VAR_774 ) - VAR_775 ; if ( VAR_776 ) { TYPE_40 VAR_777 ; TYPE_41 VAR_778 ; TYPE_42 VAR_779 ; VAR_780 = VAR_781 -> VAR_782 ; VAR_783 = VAR_784 -> VAR_785 ; VAR_786 = VAR_787 -> VAR_788 ; { TYPE_43 VAR_789 ; TYPE_44 VAR_790 ; TYPE_45 VAR_791 ; VAR_792 * VAR_793 ; if ( VAR_794 -> VAR_795 ) { VAR_796 = & VAR_797 -> VAR_798 ; } else { VAR_799 = & VAR_800 -> VAR_801 ; } VAR_802 = METHOD_40 ( VAR_803 , VAR_804 ) ; VAR_805 = METHOD_41 ( VAR_806 , VAR_807 ) ; VAR_808 <<= VAR_809 ; if ( ( VAR_810 > VAR_811 - 1 ) || ( VAR_812 > VAR_813 -> VAR_814 - 1 ) ) { return VAR_815 ; } VAR_816 = VAR_817 -> VAR_818 << VAR_819 ; VAR_820 = VAR_821 << 4 ; VAR_822 = ( VAR_823 * VAR_824 ) << 4 ; VAR_825 -> VAR_826 = VAR_827 -> VAR_828 . VAR_829 + VAR_830 + VAR_831 ; VAR_832 = VAR_833 -> VAR_834 << VAR_835 ; VAR_836 >>= 1 ; VAR_837 = ( VAR_838 * VAR_839 ) << 3 ; VAR_840 *= VAR_841 ; VAR_842 -> VAR_843 = VAR_844 -> VAR_845 . VAR_846 + VAR_847 + VAR_848 ; VAR_849 -> VAR_850 = VAR_851 -> VAR_852 . VAR_853 + VAR_854 + VAR_855 ; VAR_856 -> VAR_857 = VAR_858 -> VAR_859 ; VAR_860 -> VAR_861 = VAR_862 -> VAR_863 ; VAR_864 -> VAR_865 = VAR_866 -> VAR_867 ; if ( VAR_868 -> VAR_869 == 1 ) { VAR_870 -> VAR_871 = VAR_872 -> VAR_873 + ( VAR_874 << VAR_875 ) ; } else { VAR_876 -> VAR_877 = VAR_878 -> VAR_879 + ( VAR_880 << VAR_881 ) ; } VAR_882 -> VAR_883 = ( VAR_884 << VAR_885 ) ; VAR_886 -> VAR_887 = VAR_888 -> VAR_889 . VAR_890 + ( ( VAR_891 << VAR_892 ) << 4 ) ; } } else { VAR_893 * VAR_894 ; if ( VAR_895 -> VAR_896 ) { VAR_897 = & VAR_898 -> VAR_899 ; } else { VAR_900 = & VAR_901 -> VAR_902 ; } VAR_903 = 0xffff ; VAR_904 = 0 ; VAR_905 -> VAR_906 = 0 ; VAR_907 -> VAR_908 = VAR_909 -> VAR_910 ; VAR_911 -> VAR_912 = VAR_913 -> VAR_914 . VAR_915 ; VAR_916 -> VAR_917 = VAR_918 -> VAR_919 . VAR_920 ; VAR_921 -> VAR_922 = VAR_923 -> VAR_924 . VAR_925 ; VAR_926 -> VAR_927 = VAR_928 -> VAR_929 . VAR_930 ; VAR_931 -> VAR_932 = VAR_933 -> VAR_934 ; VAR_935 -> VAR_936 = VAR_937 -> VAR_938 ; VAR_939 -> VAR_940 = VAR_941 -> VAR_942 ; } VAR_943 -> VAR_944 = VAR_945 -> VAR_946 ; VAR_947 -> VAR_948 = ( METHOD_42 ( VAR_949 - 1 , VAR_950 -> VAR_951 ) ) ; VAR_952 -> VAR_953 = ( METHOD_43 ( VAR_954 - 1 , VAR_955 -> VAR_956 ) ) ; VAR_957 -> VAR_958 <<= VAR_959 -> VAR_960 ; VAR_961 -> VAR_962 = VAR_963 -> VAR_964 ; VAR_965 -> VAR_966 = VAR_967 -> VAR_968 ; } VAR_969 -> VAR_970 += VAR_971 -> VAR_972 -> VAR_973 ; VAR_974 -> VAR_975 = ( VAR_976 == VAR_977 ) ; VAR_978 -> VAR_979 = 0 ; VAR_980 -> VAR_981 -> VAR_982 = VAR_983 -> VAR_984 -> VAR_985 ; VAR_986 -> VAR_987 -> VAR_988 = VAR_989 -> VAR_990 -> VAR_991 ; VAR_992 -> VAR_993 = 1 ; { TYPE_46 VAR_994 ; TYPE_47 VAR_995 ; TYPE_48 * VAR_996 ; VAR_997 = VAR_998 ; if ( ( 1 >= VAR_999 -> VAR_1000 -> VAR_1001 ) && ( 0 == VAR_1002 -> VAR_1003 ) ) { VAR_1004 = 1 ; } VAR_1005 = ( ( 2 * VAR_1006 ) + 1 ) ; if ( VAR_1007 != VAR_1008 -> VAR_1009 -> VAR_1010 ) { VAR_1011 *= 2 ; } VAR_1012 = VAR_1013 * sizeof ( TYPE_49 * ) ; VAR_1014 += VAR_1015 * sizeof ( TYPE_50 * ) ; VAR_1016 = ( TYPE_51 * ) VAR_1017 -> VAR_1018 ; VAR_1019 += VAR_1020 * VAR_1021 -> VAR_1022 ; VAR_1023 -> VAR_1024 -> VAR_1025 = ( TYPE_52 * ) VAR_1026 ; } if ( VAR_1027 -> VAR_1028 ) { VAR_1029 -> VAR_1030 -> VAR_1031 = VAR_1032 -> VAR_1033 ; } else { VAR_1034 -> VAR_1035 = VAR_1036 -> VAR_1037 ; }  VAR_1038 -> VAR_1039 = VAR_1040 -> VAR_1041 ;  if ( VAR_1042 == VAR_1043 ) { VAR_1044 -> VAR_1045 -> VAR_1046 |= VAR_1047 ; VAR_1048 = METHOD_44 ( VAR_1049 , VAR_1050 ) ; if ( VAR_1051 -> VAR_1052 != VAR_1053 && VAR_1054 -> VAR_1055 != VAR_1056 ) VAR_1057 -> VAR_1058 = VAR_1059 ; } else if ( VAR_1060 == VAR_1061 ) { VAR_1062 -> VAR_1063 -> VAR_1064 |= VAR_1065 ; VAR_1066 = METHOD_45 ( VAR_1067 , VAR_1068 ) ; VAR_1069 -> VAR_1070 = VAR_1071 ; if ( VAR_1072 -> VAR_1073 != VAR_1074 ) VAR_1075 -> VAR_1076 = VAR_1077 ; } else if ( VAR_1078 == VAR_1079 ) { VAR_1080 -> VAR_1081 -> VAR_1082 |= VAR_1083 ; VAR_1084 = METHOD_46 ( VAR_1085 , VAR_1086 ) ; VAR_1087 -> VAR_1088 = VAR_1089 ; VAR_1090 -> VAR_1091 = VAR_1092 ; } else return VAR_1093 ; if ( VAR_1094 -> VAR_1095 ) { VAR_1096 -> VAR_1097 = 0 ; VAR_1098 -> VAR_1099 = 0 ; } if ( VAR_1100 != VAR_1101 ) return VAR_1102 ; VAR_1103 -> VAR_1104 ++ ; VAR_1105 -> VAR_1106 = VAR_1107 -> VAR_1108 ; VAR_1109 -> VAR_1110 = VAR_1111 -> VAR_1112 ; if ( VAR_1113 -> VAR_1114 >= ( VAR_1115 -> VAR_1116 + 1 ) ) { VAR_1117 -> VAR_1118 = 1 ; } { TYPE_53 * VAR_1119 = VAR_1120 -> VAR_1121 ; if ( ( VAR_1122 -> VAR_1123 & VAR_1124 ) && ( VAR_1125 -> VAR_1126 == VAR_1127 ) ) { VAR_1128 -> VAR_1129 = VAR_1130 ; } } PRINT_BIN_BIT_RATIO ( VAR_1131 ) return VAR_1132 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 -> VAR_5 ; VAR_6 * VAR_7 ; VAR_8 * VAR_9 ; TYPE_5 * VAR_10 = VAR_11 -> VAR_12 ; TYPE_6 VAR_13 ; TYPE_7 VAR_14 [ 2 ] ; TYPE_8 VAR_15 = 0 ; TYPE_9 VAR_16 , VAR_17 ; TYPE_10 VAR_18 , VAR_19 = 0 , VAR_20 ; TYPE_11 VAR_21 = 0 ; TYPE_12 VAR_22 , VAR_23 ; TYPE_13 VAR_24 ; TYPE_14 * VAR_25 = VAR_26 -> VAR_27 ; TYPE_15 * VAR_28 = & VAR_29 -> VAR_30 ; TYPE_16 VAR_31 ; TYPE_17 VAR_32 , VAR_33 ; TYPE_18 VAR_34 , VAR_35 ; TYPE_19 VAR_36 ; TYPE_20 * VAR_37 ; TYPE_21 VAR_38 ; TYPE_22 VAR_39 ; TYPE_23 VAR_40 = 0 ; VAR_41 -> VAR_42 -> VAR_43 = 0 ; VAR_44 = METHOD_1 ( VAR_45 , VAR_46 ) ; if ( VAR_47 > ( VAR_48 -> VAR_49 * VAR_50 -> VAR_51 ) ) { return VAR_52 ; } if ( ( ( VAR_53 << VAR_54 -> VAR_55 ) <= VAR_56 -> VAR_57 ) && ( VAR_58 -> VAR_59 != 0 ) && ( VAR_60 -> VAR_61 != 0 ) ) { return VAR_62 ; } METHOD_2 ( ""SH:first_mb_in_slice"" , VAR_63 ) ; VAR_64 = METHOD_3 ( VAR_65 , VAR_66 ) ; if ( VAR_67 > 9 ) return VAR_68 ; VAR_69 = VAR_70 ; METHOD_4 ( ""SH:slice_type"" , ( VAR_71 ) ) ; VAR_72 -> VAR_73 = 0 ; if ( VAR_74 > 4 ) { VAR_75 -= 5 ; VAR_76 -> VAR_77 = 1 ; } { TYPE_24 VAR_78 ; if ( ( VAR_79 -> VAR_80 == VAR_81 ) || ( VAR_82 -> VAR_83 == VAR_84 ) ) { TYPE_25 VAR_85 = 0 ; if ( VAR_86 -> VAR_87 == VAR_88 ) { VAR_89 = 0 ; VAR_90 -> VAR_91 = VAR_92 ; } else if ( ( VAR_93 == VAR_94 ) && ( 1 >= VAR_95 -> VAR_96 -> VAR_97 ) ) { VAR_98 = 0 ; VAR_99 -> VAR_100 = VAR_101 ; } else { VAR_102 = 1 ; } if ( ( 0 == VAR_103 ) && ( 1 == VAR_104 -> VAR_105 ) ) { VAR_106 = 0 ; } if ( VAR_107 ) { VAR_108 -> VAR_109 = 1 ; VAR_110 -> VAR_111 = VAR_112 ; return 0 ; } else { if ( 1 == VAR_113 -> VAR_114 ) { VAR_115 -> VAR_116 = 1 ; return 0 ; } } } } VAR_117 = METHOD_5 ( VAR_118 , VAR_119 ) ; if ( VAR_120 & VAR_121 ) return VAR_122 ; METHOD_6 ( ""SH:pic_parameter_set_id"" , VAR_123 ) ; VAR_124 = & VAR_125 -> VAR_126 [ VAR_127 ] ; if ( VAR_128 == VAR_129 -> VAR_130 ) { return VAR_131 ; } VAR_132 = VAR_133 -> VAR_134 ; if ( ! VAR_135 ) return VAR_136 ; if ( VAR_137 == VAR_138 -> VAR_139 ) return VAR_140 ; VAR_141 = METHOD_7 ( VAR_142 , VAR_143 -> VAR_144 ) ; METHOD_8 ( ""SH:frame_num"" , VAR_145 ) ; if ( ! VAR_146 -> VAR_147 ) { VAR_148 = METHOD_9 ( VAR_149 ) ; METHOD_10 ( ""SH:field_pic_flag"" , VAR_150 ) ; VAR_151 = 0 ; if ( VAR_152 ) { VAR_153 -> VAR_154 = ( TYPE_26 * ) VAR_155 ; VAR_156 = METHOD_11 ( VAR_157 ) ; METHOD_12 ( ""SH:bottom_field_flag"" , VAR_158 ) ; } else { VAR_159 -> VAR_160 = ( TYPE_27 * ) VAR_161 ; } } else { VAR_162 = 0 ; VAR_163 = 0 ; VAR_164 -> VAR_165 = ( TYPE_28 * ) VAR_166 ; } VAR_167 = VAR_168 ; if ( VAR_169 ) { if ( 0 == VAR_170 ) { VAR_171 -> VAR_172 = VAR_173 | VAR_174 ; } VAR_175 = VAR_176 ; VAR_177 = METHOD_13 ( VAR_178 , VAR_179 ) ; if ( VAR_180 > 65535 ) return VAR_181 ; METHOD_14 ( ""SH:"" , VAR_182 ) ; } VAR_183 [ 0 ] = VAR_184 [ 1 ] = 0 ; VAR_185 . VAR_186 = 0 ; VAR_187 . VAR_188 = 0 ; VAR_189 = VAR_190 -> VAR_191 ; if ( VAR_192 == 0 ) { VAR_193 = METHOD_15 ( VAR_194 , VAR_195 -> VAR_196 ) ; if ( VAR_197 < 0 || VAR_198 >= VAR_199 -> VAR_200 ) return VAR_201 ; VAR_202 . VAR_203 = VAR_204 ; METHOD_16 ( ""SH:pic_order_cnt_lsb"" , VAR_205 . VAR_206 ) ; if ( ( VAR_207 -> VAR_208 == 1 ) && ( ! VAR_209 ) ) { VAR_210 . VAR_211 = METHOD_17 ( VAR_212 , VAR_213 ) ; METHOD_18 ( ""SH:delta_pic_order_cnt_bottom"" , VAR_214 . VAR_215 ) ; } } VAR_216 . VAR_217 [ 0 ] = 0 ; VAR_218 . VAR_219 [ 1 ] = 0 ; if ( VAR_220 == 1 && ( ! VAR_221 -> VAR_222 ) ) { VAR_223 . VAR_224 [ 0 ] = METHOD_19 ( VAR_225 , VAR_226 ) ; METHOD_20 ( ""SH:delta_pic_order_cnt[0]"" , VAR_227 . VAR_228 [ 0 ] ) ; if ( VAR_229 -> VAR_230 && ! VAR_231 ) { VAR_232 . VAR_233 [ 1 ] = METHOD_21 ( VAR_234 , VAR_235 ) ; METHOD_22 ( ""SH:delta_pic_order_cnt[1]"" , VAR_236 . VAR_237 [ 1 ] ) ; } } if ( VAR_238 -> VAR_239 ) { VAR_240 = METHOD_23 ( VAR_241 , VAR_242 ) ; if ( VAR_243 > VAR_244 ) return VAR_245 ; VAR_246 = VAR_247 ; METHOD_24 ( ""SH:redundant_pic_cnt"" , VAR_248 ) ; } VAR_249 = 0 ; if ( ! VAR_250 -> VAR_251 ) { VAR_252 = METHOD_25 ( VAR_253 , VAR_254 , & VAR_255 , & VAR_256 -> VAR_257 , VAR_258 , VAR_259 , VAR_260 , VAR_261 , VAR_262 , VAR_263 ) ; if ( ( VAR_264 -> VAR_265 == 2 ) && ( VAR_266 == 0 ) ) { VAR_267 -> VAR_268 -> VAR_269 |= VAR_270 ; VAR_271 = 1 ; } else { VAR_272 -> VAR_273 -> VAR_274 &= VAR_275 ; } } VAR_276 = VAR_277 -> VAR_278 && ( ! VAR_279 ) ; VAR_280 = 0 ; if ( VAR_281 || VAR_282 -> VAR_283 ) { if ( VAR_284 != VAR_285 -> VAR_286 && VAR_287 -> VAR_288 != 0 && VAR_289 -> VAR_290 != ( VAR_291 | VAR_292 ) ) { VAR_293 -> VAR_294 = 1 ; if ( VAR_295 -> VAR_296 ) { VAR_297 = 1 ; } else { VAR_298 = 2 ; } if ( VAR_299 -> VAR_300 == VAR_301 ) VAR_302 -> VAR_303 = 1 ; else VAR_304 -> VAR_305 = 0 ; VAR_306 = ( VAR_307 -> VAR_308 * VAR_309 -> VAR_310 ) - VAR_311 -> VAR_312 ; VAR_313 = & VAR_314 -> VAR_315 ; VAR_316 = VAR_317 -> VAR_318 == VAR_319 ; } else if ( VAR_320 -> VAR_321 == 2 ) { if ( VAR_322 > 0 ) { VAR_323 = 1 ; VAR_324 = VAR_325 << VAR_326 ; VAR_327 = & VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; VAR_332 -> VAR_333 = VAR_334 ; VAR_335 -> VAR_336 = VAR_337 ; VAR_338 -> VAR_339 = VAR_340 . VAR_341 ; VAR_342 -> VAR_343 = VAR_344 ; VAR_345 -> VAR_346 = VAR_347 ; VAR_348 -> VAR_349 = VAR_350 ; VAR_351 -> VAR_352 = VAR_353 ; } } else { if ( VAR_354 -> VAR_355 ) { VAR_356 = 1 ; VAR_357 = VAR_358 << VAR_359 ; } else { VAR_360 = 2 ; VAR_361 = ( VAR_362 -> VAR_363 * VAR_364 -> VAR_365 ) - VAR_366 -> VAR_367 ; } VAR_368 = & VAR_369 ; } } else { if ( ( VAR_370 << VAR_371 ) > VAR_372 -> VAR_373 ) { VAR_374 = 2 ; VAR_375 = ( VAR_376 << VAR_377 ) - VAR_378 -> VAR_379 ; VAR_380 = & VAR_381 ; } else if ( ( VAR_382 << VAR_383 ) < VAR_384 -> VAR_385 ) { return VAR_386 ; } } if ( VAR_387 ) { VAR_388 = METHOD_26 ( VAR_389 , VAR_390 , VAR_391 , VAR_392 , VAR_393 , VAR_394 ) ; if ( VAR_395 -> VAR_396 == 1 ) { VAR_397 -> VAR_398 = 1 - VAR_399 -> VAR_400 ; VAR_401 -> VAR_402 = VAR_403 ; VAR_404 -> VAR_405 = VAR_406 ; VAR_407 -> VAR_408 = 0 ; return VAR_409 ; } if ( VAR_410 == 2 ) { VAR_411 -> VAR_412 = 0 ; return VAR_413 ; } if ( VAR_414 -> VAR_415 >= VAR_416 -> VAR_417 * VAR_418 -> VAR_419 ) { VAR_420 -> VAR_421 = 0 ; return VAR_422 ; } if ( VAR_423 -> VAR_424 -> VAR_425 & VAR_426 ) { METHOD_27 ( VAR_427 ) ; return VAR_428 ; } if ( VAR_429 != VAR_430 ) return VAR_431 ; VAR_432 = 0 ; } if ( VAR_433 -> VAR_434 == 0 ) VAR_435 -> VAR_436 ++ ; VAR_437 -> VAR_438 = 0 ; if ( ! VAR_439 -> VAR_440 ) { TYPE_29 VAR_441 = 0 ; if ( VAR_442 -> VAR_443 == ( VAR_444 -> VAR_445 -> VAR_446 + 1 ) ) { if ( VAR_447 -> VAR_448 == 0 ) VAR_449 = 1 ; } if ( VAR_450 || VAR_451 ) { if ( 1 == VAR_452 -> VAR_453 ) { VAR_454 = METHOD_28 ( VAR_455 ) ; if ( VAR_456 != VAR_457 ) return VAR_458 ; VAR_459 = METHOD_29 ( VAR_460 , VAR_461 , VAR_462 ) ; if ( VAR_463 != VAR_464 ) return VAR_465 ; if VAR_466 METHOD_30 ( ""------PICSKIPPED------\\n"" ) ; return VAR_467 ; } else { VAR_468 = METHOD_31 ( VAR_469 , VAR_470 , VAR_471 ) ; if ( VAR_472 != VAR_473 ) return VAR_474 ; } } } if ( VAR_475 ) { VAR_476 -> VAR_477 = VAR_478 ; } if ( VAR_479 -> VAR_480 ) { TYPE_30 VAR_481 ; TYPE_31 VAR_482 , VAR_483 ; if ( ! VAR_484 -> VAR_485 ) { VAR_486 = VAR_487 -> VAR_488 -> VAR_489 ; VAR_490 = VAR_491 -> VAR_492 -> VAR_493 ; VAR_494 = METHOD_32 ( VAR_495 , VAR_496 ) ; } else if ( ! VAR_497 -> VAR_498 ) VAR_499 = VAR_500 -> VAR_501 -> VAR_502 ; else VAR_503 = VAR_504 -> VAR_505 -> VAR_506 ; VAR_507 -> VAR_508 -> VAR_509 = VAR_510 - VAR_511 -> VAR_512 -> VAR_513 ; VAR_514 -> VAR_515 -> VAR_516 = VAR_517 - VAR_518 -> VAR_519 -> VAR_520 ; VAR_521 -> VAR_522 -> VAR_523 = VAR_524 ; VAR_525 -> VAR_526 -> VAR_527 = VAR_528 ; } if ( VAR_529 -> VAR_530 == 2 ) { VAR_531 = METHOD_33 ( VAR_532 , VAR_533 , & VAR_534 -> VAR_535 , & VAR_536 , VAR_537 , VAR_538 , VAR_539 , VAR_540 , VAR_541 , & VAR_542 ) ; if ( VAR_543 != VAR_544 ) return VAR_545 ; if ( VAR_546 >= VAR_547 -> VAR_548 ) VAR_549 -> VAR_550 = VAR_551 ; if ( VAR_552 == 0 ) { VAR_553 -> VAR_554 = VAR_555 -> VAR_556 + VAR_557 -> VAR_558 + VAR_559 -> VAR_560 + 1 ; VAR_561 -> VAR_562 = 0 ; } } VAR_563 -> VAR_564 [ 0 ] = VAR_565 [ 0 ] ; VAR_566 -> VAR_567 [ 1 ] = VAR_568 [ 1 ] ; VAR_569 -> VAR_570 = VAR_571 ; VAR_572 -> VAR_573 = VAR_574 ; VAR_575 -> VAR_576 = VAR_577 ; VAR_578 -> VAR_579 = VAR_580 ; VAR_581 -> VAR_582 = VAR_583 ; VAR_584 -> VAR_585 = VAR_586 . VAR_587 ; VAR_588 -> VAR_589 = VAR_590 ; VAR_591 -> VAR_592 = VAR_593 ; VAR_594 -> VAR_595 = VAR_596 ; VAR_597 -> VAR_598 = VAR_599 ; if ( VAR_600 -> VAR_601 ) VAR_602 -> VAR_603 = VAR_604 -> VAR_605 ; else VAR_606 -> VAR_607 = 1 ; if ( VAR_608 == VAR_609 ) { VAR_610 -> VAR_611 = METHOD_34 ( VAR_612 ) ; METHOD_35 ( ""SH:direct_spatial_mv_pred_flag"" , VAR_613 -> VAR_614 ) ; if ( VAR_615 -> VAR_616 ) VAR_617 -> VAR_618 = VAR_619 ; else VAR_620 -> VAR_621 = VAR_622 ; if ( ! ( ( VAR_623 -> VAR_624 -> VAR_625 ) && ( ! VAR_626 ) ) ) VAR_627 -> VAR_628 = VAR_629 ; } else { if ( ! ( ( VAR_630 -> VAR_631 -> VAR_632 ) && ( ! VAR_633 ) ) ) VAR_634 -> VAR_635 = VAR_636 ; } if ( VAR_637 -> VAR_638 == 2 ) { if ( VAR_639 == 0 ) { VAR_640 = METHOD_36 ( VAR_641 , VAR_642 , & VAR_643 , VAR_644 , VAR_645 ) ; if ( VAR_646 != VAR_647 ) return VAR_648 ; } VAR_649 -> VAR_650 = 0 ; { METHOD_37 ( VAR_651 , VAR_652 -> VAR_653 , & ( VAR_654 -> VAR_655 ) ) ; if ( 0 != VAR_656 -> VAR_657 . VAR_658 ) { VAR_659 -> VAR_660 = VAR_661 -> VAR_662 . VAR_663 ; } else VAR_664 -> VAR_665 = 1 ; } if ( VAR_666 -> VAR_667 == 1 ) { if ( VAR_668 -> VAR_669 == 0 ) { METHOD_38 ( VAR_670 -> VAR_671 , VAR_672 , ( TYPE_32 * ) VAR_673 , ( TYPE_33 * ) VAR_674 ) ; VAR_675 -> VAR_676 = 1 ; } if ( ( VAR_677 -> VAR_678 == 3 ) && ( ( VAR_679 -> VAR_680 == 0 ) || VAR_681 -> VAR_682 ) && ( VAR_683 -> VAR_684 == 0 ) ) { VAR_685 -> VAR_686 = 0 ; METHOD_39 ( VAR_687 -> VAR_688 , VAR_689 , ( TYPE_34 * ) VAR_690 , ( TYPE_35 * ) VAR_691 ) ; VAR_692 -> VAR_693 = 1 ; } } } { TYPE_36 VAR_694 ; VAR_695 = ( ( VAR_696 -> VAR_697 -> VAR_698 == 0 ) && ( VAR_699 -> VAR_700 -> VAR_701 == 0 ) && ( VAR_702 != VAR_703 ) && ( VAR_704 -> VAR_705 -> VAR_706 == 0 ) ) ; if ( VAR_707 ) { VAR_708 -> VAR_709 = VAR_710 ; VAR_711 -> VAR_712 = VAR_713 ; } else { VAR_714 -> VAR_715 = VAR_716 ; VAR_717 -> VAR_718 = VAR_719 ; } } { TYPE_37 * VAR_720 = VAR_721 -> VAR_722 ; if ( VAR_723 -> VAR_724 == VAR_725 ) { VAR_726 -> VAR_727 = VAR_728 ; VAR_729 -> VAR_730 = VAR_731 ; } VAR_732 -> VAR_733 = VAR_734 ; } { TYPE_38 VAR_735 , VAR_736 ; VAR_737 = ( VAR_738 -> VAR_739 & VAR_740 ) && ( VAR_741 == VAR_742 ) && ( 0 == VAR_743 ) ; VAR_744 = ( VAR_745 -> VAR_746 & VAR_747 ) && ( VAR_748 == VAR_749 ) && ( 0 == VAR_750 ) ; if ( VAR_751 ) { VAR_752 -> VAR_753 -> VAR_754 |= VAR_755 ; VAR_756 -> VAR_757 = 1 ; return VAR_758 ; } if ( VAR_759 ) { VAR_760 -> VAR_761 -> VAR_762 |= VAR_763 ; VAR_764 -> VAR_765 = 1 ; return VAR_766 ; } } { TYPE_39 VAR_767 , VAR_768 ; VAR_769 -> VAR_770 = ( ( VAR_771 << VAR_772 -> VAR_773 ) * VAR_774 ) - VAR_775 ; if ( VAR_776 ) { TYPE_40 VAR_777 ; TYPE_41 VAR_778 ; TYPE_42 VAR_779 ; VAR_780 = VAR_781 -> VAR_782 ; VAR_783 = VAR_784 -> VAR_785 ; VAR_786 = VAR_787 -> VAR_788 ; { TYPE_43 VAR_789 ; TYPE_44 VAR_790 ; TYPE_45 VAR_791 ; VAR_792 * VAR_793 ; if ( VAR_794 -> VAR_795 ) { VAR_796 = & VAR_797 -> VAR_798 ; } else { VAR_799 = & VAR_800 -> VAR_801 ; } VAR_802 = METHOD_40 ( VAR_803 , VAR_804 ) ; VAR_805 = METHOD_41 ( VAR_806 , VAR_807 ) ; VAR_808 <<= VAR_809 ; if ( ( VAR_810 > VAR_811 - 1 ) || ( VAR_812 > VAR_813 -> VAR_814 - 1 ) ) { return VAR_815 ; } VAR_816 = VAR_817 -> VAR_818 << VAR_819 ; VAR_820 = VAR_821 << 4 ; VAR_822 = ( VAR_823 * VAR_824 ) << 4 ; VAR_825 -> VAR_826 = VAR_827 -> VAR_828 . VAR_829 + VAR_830 + VAR_831 ; VAR_832 = VAR_833 -> VAR_834 << VAR_835 ; VAR_836 >>= 1 ; VAR_837 = ( VAR_838 * VAR_839 ) << 3 ; VAR_840 *= VAR_841 ; VAR_842 -> VAR_843 = VAR_844 -> VAR_845 . VAR_846 + VAR_847 + VAR_848 ; VAR_849 -> VAR_850 = VAR_851 -> VAR_852 . VAR_853 + VAR_854 + VAR_855 ; VAR_856 -> VAR_857 = VAR_858 -> VAR_859 ; VAR_860 -> VAR_861 = VAR_862 -> VAR_863 ; VAR_864 -> VAR_865 = VAR_866 -> VAR_867 ; if ( VAR_868 -> VAR_869 == 1 ) { VAR_870 -> VAR_871 = VAR_872 -> VAR_873 + ( VAR_874 << VAR_875 ) ; } else { VAR_876 -> VAR_877 = VAR_878 -> VAR_879 + ( VAR_880 << VAR_881 ) ; } VAR_882 -> VAR_883 = ( VAR_884 << VAR_885 ) ; VAR_886 -> VAR_887 = VAR_888 -> VAR_889 . VAR_890 + ( ( VAR_891 << VAR_892 ) << 4 ) ; } } else { VAR_893 * VAR_894 ; if ( VAR_895 -> VAR_896 ) { VAR_897 = & VAR_898 -> VAR_899 ; } else { VAR_900 = & VAR_901 -> VAR_902 ; } VAR_903 = 0xffff ; VAR_904 = 0 ; VAR_905 -> VAR_906 = 0 ; VAR_907 -> VAR_908 = VAR_909 -> VAR_910 ; VAR_911 -> VAR_912 = VAR_913 -> VAR_914 . VAR_915 ; VAR_916 -> VAR_917 = VAR_918 -> VAR_919 . VAR_920 ; VAR_921 -> VAR_922 = VAR_923 -> VAR_924 . VAR_925 ; VAR_926 -> VAR_927 = VAR_928 -> VAR_929 . VAR_930 ; VAR_931 -> VAR_932 = VAR_933 -> VAR_934 ; VAR_935 -> VAR_936 = VAR_937 -> VAR_938 ; VAR_939 -> VAR_940 = VAR_941 -> VAR_942 ; } VAR_943 -> VAR_944 = VAR_945 -> VAR_946 ; VAR_947 -> VAR_948 = ( METHOD_42 ( VAR_949 - 1 , VAR_950 -> VAR_951 ) ) ; VAR_952 -> VAR_953 = ( METHOD_43 ( VAR_954 - 1 , VAR_955 -> VAR_956 ) ) ; VAR_957 -> VAR_958 <<= VAR_959 -> VAR_960 ; VAR_961 -> VAR_962 = VAR_963 -> VAR_964 ; VAR_965 -> VAR_966 = VAR_967 -> VAR_968 ; } VAR_969 -> VAR_970 += VAR_971 -> VAR_972 -> VAR_973 ; VAR_974 -> VAR_975 = ( VAR_976 == VAR_977 ) ; VAR_978 -> VAR_979 = 0 ; VAR_980 -> VAR_981 -> VAR_982 = VAR_983 -> VAR_984 -> VAR_985 ; VAR_986 -> VAR_987 -> VAR_988 = VAR_989 -> VAR_990 -> VAR_991 ; VAR_992 -> VAR_993 = 1 ; { TYPE_46 VAR_994 ; TYPE_47 VAR_995 ; TYPE_48 * VAR_996 ; VAR_997 = VAR_998 ; if ( ( 1 >= VAR_999 -> VAR_1000 -> VAR_1001 ) && ( 0 == VAR_1002 -> VAR_1003 ) ) { VAR_1004 = 1 ; } VAR_1005 = ( ( 2 * VAR_1006 ) + 1 ) ; if ( VAR_1007 != VAR_1008 -> VAR_1009 -> VAR_1010 ) { VAR_1011 *= 2 ; } VAR_1012 = VAR_1013 * sizeof ( TYPE_49 * ) ; VAR_1014 += VAR_1015 * sizeof ( TYPE_50 * ) ; VAR_1016 = ( TYPE_51 * ) VAR_1017 -> VAR_1018 ; VAR_1019 += VAR_1020 * VAR_1021 -> VAR_1022 ; VAR_1023 -> VAR_1024 -> VAR_1025 = ( TYPE_52 * ) VAR_1026 ; } if ( VAR_1027 -> VAR_1028 ) { VAR_1029 -> VAR_1030 -> VAR_1031 = VAR_1032 -> VAR_1033 ; } else { VAR_1034 -> VAR_1035 = VAR_1036 -> VAR_1037 ; } VAR_1038 -> VAR_1039 = VAR_1040 -> VAR_1041 ; if ( VAR_1042 == VAR_1043 ) { VAR_1044 -> VAR_1045 -> VAR_1046 |= VAR_1047 ; VAR_1048 = METHOD_44 ( VAR_1049 , VAR_1050 ) ; if ( VAR_1051 -> VAR_1052 != VAR_1053 && VAR_1054 -> VAR_1055 != VAR_1056 ) VAR_1057 -> VAR_1058 = VAR_1059 ; } else if ( VAR_1060 == VAR_1061 ) { VAR_1062 -> VAR_1063 -> VAR_1064 |= VAR_1065 ; VAR_1066 = METHOD_45 ( VAR_1067 , VAR_1068 ) ; VAR_1069 -> VAR_1070 = VAR_1071 ; if ( VAR_1072 -> VAR_1073 != VAR_1074 ) VAR_1075 -> VAR_1076 = VAR_1077 ; } else if ( VAR_1078 == VAR_1079 ) { VAR_1080 -> VAR_1081 -> VAR_1082 |= VAR_1083 ; VAR_1084 = METHOD_46 ( VAR_1085 , VAR_1086 ) ; VAR_1087 -> VAR_1088 = VAR_1089 ; VAR_1090 -> VAR_1091 = VAR_1092 ; } else return VAR_1093 ; if ( VAR_1094 -> VAR_1095 ) { VAR_1096 -> VAR_1097 = 0 ; VAR_1098 -> VAR_1099 = 0 ; } if ( VAR_1100 != VAR_1101 ) return VAR_1102 ; VAR_1103 -> VAR_1104 ++ ; VAR_1105 -> VAR_1106 = VAR_1107 -> VAR_1108 ; VAR_1109 -> VAR_1110 = VAR_1111 -> VAR_1112 ; if ( VAR_1113 -> VAR_1114 >= ( VAR_1115 -> VAR_1116 + 1 ) ) { VAR_1117 -> VAR_1118 = 1 ; } { TYPE_53 * VAR_1119 = VAR_1120 -> VAR_1121 ; if ( ( VAR_1122 -> VAR_1123 & VAR_1124 ) && ( VAR_1125 -> VAR_1126 == VAR_1127 ) ) { VAR_1128 -> VAR_1129 = VAR_1130 ; } } PRINT_BIN_BIT_RATIO ( VAR_1131 ) return VAR_1132 ; }",655
656,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; unsigned TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 = VAR_8 -> VAR_9 ; TYPE_7 * VAR_10 = VAR_11 -> VAR_12 [ VAR_13 ] ; if ( VAR_14 ) {  METHOD_1 ( VAR_15 -> VAR_16 [ 0 ] + VAR_17 - 1 , 127 , VAR_18 -> VAR_19 + 5 ) ;   METHOD_2 ( VAR_20 -> VAR_21 [ 0 ] + ( VAR_22 >> 1 ) - 1 , 127 , ( VAR_23 -> VAR_24 >> 1 ) + 5 ) ;   METHOD_3 ( VAR_25 -> VAR_26 [ 0 ] + ( VAR_27 >> 1 ) - 1 , 127 , ( VAR_28 -> VAR_29 >> 1 ) + 5 ) ;  for ( VAR_30 = 1 ; VAR_31 < VAR_32 -> VAR_33 ; VAR_34 ++ ) {  METHOD_4 ( VAR_35 -> VAR_36 [ VAR_37 ] + VAR_38 - 1 , ( unsigned TYPE_8 ) 129 , 1 ) ;   METHOD_5 ( VAR_39 -> VAR_40 [ VAR_41 ] + ( VAR_42 >> 1 ) - 1 , ( unsigned TYPE_9 ) 129 , 1 ) ;   METHOD_6 ( VAR_43 -> VAR_44 [ VAR_45 ] + ( VAR_46 >> 1 ) - 1 , ( unsigned TYPE_10 ) 129 , 1 ) ;  } for ( VAR_47 = 0 ; VAR_48 < VAR_49 -> VAR_50 ; VAR_51 ++ ) {  METHOD_7 ( VAR_52 -> VAR_53 [ VAR_54 ] , ( unsigned TYPE_11 ) 129 , 16 ) ;   METHOD_8 ( VAR_55 -> VAR_56 [ VAR_57 ] , ( unsigned TYPE_12 ) 129 , 8 ) ;   METHOD_9 ( VAR_58 -> VAR_59 [ VAR_60 ] , ( unsigned TYPE_13 ) 129 , 8 ) ;  } METHOD_10 ( VAR_61 , & VAR_62 -> VAR_63 , VAR_64 ) ; } else METHOD_11 ( VAR_65 ) ; METHOD_12 ( VAR_66 , VAR_67 , VAR_68 -> VAR_69 , VAR_70 -> VAR_71 ) ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 -> VAR_75 ; VAR_76 ++ ) METHOD_13 ( & VAR_77 -> VAR_78 [ VAR_79 ] ) ; METHOD_14 ( VAR_80 , VAR_81 , 0 ) ; METHOD_15 ( & VAR_82 -> VAR_83 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * VAR_2 = & VAR_3 -> VAR_4 ; unsigned TYPE_4 VAR_5 ; TYPE_5 VAR_6 ; TYPE_6 VAR_7 = VAR_8 -> VAR_9 ; TYPE_7 * VAR_10 = VAR_11 -> VAR_12 [ VAR_13 ] ; if ( VAR_14 ) { METHOD_1 ( VAR_15 -> VAR_16 [ 0 ] + VAR_17 - 1 , 127 , VAR_18 -> VAR_19 + 5 ) ; METHOD_2 ( VAR_20 -> VAR_21 [ 0 ] + ( VAR_22 >> 1 ) - 1 , 127 , ( VAR_23 -> VAR_24 >> 1 ) + 5 ) ; METHOD_3 ( VAR_25 -> VAR_26 [ 0 ] + ( VAR_27 >> 1 ) - 1 , 127 , ( VAR_28 -> VAR_29 >> 1 ) + 5 ) ; for ( VAR_30 = 1 ; VAR_31 < VAR_32 -> VAR_33 ; VAR_34 ++ ) { METHOD_4 ( VAR_35 -> VAR_36 [ VAR_37 ] + VAR_38 - 1 , ( unsigned TYPE_8 ) 129 , 1 ) ; METHOD_5 ( VAR_39 -> VAR_40 [ VAR_41 ] + ( VAR_42 >> 1 ) - 1 , ( unsigned TYPE_9 ) 129 , 1 ) ; METHOD_6 ( VAR_43 -> VAR_44 [ VAR_45 ] + ( VAR_46 >> 1 ) - 1 , ( unsigned TYPE_10 ) 129 , 1 ) ; } for ( VAR_47 = 0 ; VAR_48 < VAR_49 -> VAR_50 ; VAR_51 ++ ) { METHOD_7 ( VAR_52 -> VAR_53 [ VAR_54 ] , ( unsigned TYPE_11 ) 129 , 16 ) ; METHOD_8 ( VAR_55 -> VAR_56 [ VAR_57 ] , ( unsigned TYPE_12 ) 129 , 8 ) ; METHOD_9 ( VAR_58 -> VAR_59 [ VAR_60 ] , ( unsigned TYPE_13 ) 129 , 8 ) ; } METHOD_10 ( VAR_61 , & VAR_62 -> VAR_63 , VAR_64 ) ; } else METHOD_11 ( VAR_65 ) ; METHOD_12 ( VAR_66 , VAR_67 , VAR_68 -> VAR_69 , VAR_70 -> VAR_71 ) ; for ( VAR_72 = 0 ; VAR_73 < VAR_74 -> VAR_75 ; VAR_76 ++ ) METHOD_13 ( & VAR_77 -> VAR_78 [ VAR_79 ] ) ; METHOD_14 ( VAR_80 , VAR_81 , 0 ) ; METHOD_15 ( & VAR_82 -> VAR_83 ) ; }",656
657,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ;  if ( VAR_11 == 0 && VAR_12 == 0 ) {  return ; } VAR_13 = 1 << VAR_14 ; VAR_15 = VAR_16 ; for ( VAR_17 = 0 ; VAR_18 < METHOD_1 ( VAR_19 ) ; ++ VAR_20 ) { for ( VAR_21 = 0 ; VAR_22 < METHOD_2 ( VAR_23 ) ; ++ VAR_24 ) { VAR_25 = METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 >= VAR_32 ) { VAR_33 >>= VAR_34 ; VAR_35 = ( VAR_36 < 0 ) ? ( - VAR_37 ) : VAR_38 ; METHOD_5 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else { VAR_43 <<= VAR_44 ;  VAR_45 = ( 1 << VAR_46 ) - 1 ;  if ( VAR_47 & ( ~ VAR_48 ) ) { if ( ! VAR_49 ) { METHOD_6 ( ""warning:possiblycorruptcodestream\\n"" ) ; VAR_50 = VAR_51 ; } VAR_52 &= VAR_53 ; } VAR_54 = ( VAR_55 < 0 ) ? ( - VAR_56 ) : VAR_57 ; METHOD_7 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 ) ; } } } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 ; TYPE_7 VAR_6 ; TYPE_8 VAR_7 ; TYPE_9 VAR_8 ; TYPE_10 VAR_9 ; TYPE_11 VAR_10 ; if ( VAR_11 == 0 && VAR_12 == 0 ) { return ; } VAR_13 = 1 << VAR_14 ; VAR_15 = VAR_16 ; for ( VAR_17 = 0 ; VAR_18 < METHOD_1 ( VAR_19 ) ; ++ VAR_20 ) { for ( VAR_21 = 0 ; VAR_22 < METHOD_2 ( VAR_23 ) ; ++ VAR_24 ) { VAR_25 = METHOD_3 ( VAR_26 , VAR_27 , VAR_28 ) ; VAR_29 = METHOD_4 ( VAR_30 ) ; if ( VAR_31 >= VAR_32 ) { VAR_33 >>= VAR_34 ; VAR_35 = ( VAR_36 < 0 ) ? ( - VAR_37 ) : VAR_38 ; METHOD_5 ( VAR_39 , VAR_40 , VAR_41 , VAR_42 ) ; } else { VAR_43 <<= VAR_44 ; VAR_45 = ( 1 << VAR_46 ) - 1 ; if ( VAR_47 & ( ~ VAR_48 ) ) { if ( ! VAR_49 ) { METHOD_6 ( ""warning:possiblycorruptcodestream\\n"" ) ; VAR_50 = VAR_51 ; } VAR_52 &= VAR_53 ; } VAR_54 = ( VAR_55 < 0 ) ? ( - VAR_56 ) : VAR_57 ; METHOD_7 ( VAR_58 , VAR_59 , VAR_60 , VAR_61 ) ; } } } }",657
658," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ,  const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 ,  TYPE_7 * VAR_6 ) {  TYPE_8 VAR_7 = VAR_8 ; const TYPE_9 * VAR_9 = VAR_10 ; const TYPE_10 VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 != VAR_19 ) METHOD_2 ( VAR_20 , ""Failedtogetframestats."" ) ; while ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 ) ) != VAR_24 ) {  if ( VAR_25 -> VAR_26 == VAR_27 ) {  const TYPE_11 * const VAR_28 = VAR_29 -> VAR_30 . VAR_31 . VAR_32 ; const TYPE_12 VAR_33 = VAR_34 -> VAR_35 . VAR_36 . VAR_37 ; VAR_38 -> VAR_39 = METHOD_4 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 + VAR_44 ) ; METHOD_5 ( ( TYPE_13 * ) VAR_45 -> VAR_46 + VAR_47 -> VAR_48 , VAR_49 , VAR_50 ) ; VAR_51 -> VAR_52 += VAR_53 ; } }  } ","static TYPE_6 METHOD_0 ( TYPE_1 * VAR_0 , const TYPE_2 * VAR_1 , TYPE_3 VAR_2 , unsigned TYPE_4 VAR_3 , TYPE_5 VAR_4 , unsigned TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 = VAR_8 ; const TYPE_9 * VAR_9 = VAR_10 ; const TYPE_10 VAR_11 = METHOD_1 ( VAR_12 , VAR_13 , VAR_14 , VAR_15 , VAR_16 , VAR_17 ) ; if ( VAR_18 != VAR_19 ) METHOD_2 ( VAR_20 , ""Failedtogetframestats."" ) ; while ( ( VAR_21 = METHOD_3 ( VAR_22 , & VAR_23 ) ) != VAR_24 ) { VAR_54 = 1 ; if ( VAR_25 -> VAR_26 == VAR_27 ) { const TYPE_11 * const VAR_28 = VAR_29 -> VAR_30 . VAR_31 . VAR_32 ; const TYPE_12 VAR_33 = VAR_34 -> VAR_35 . VAR_36 . VAR_37 ; VAR_38 -> VAR_39 = METHOD_4 ( VAR_40 -> VAR_41 , VAR_42 -> VAR_43 + VAR_44 ) ; METHOD_5 ( ( TYPE_13 * ) VAR_45 -> VAR_46 + VAR_47 -> VAR_48 , VAR_49 , VAR_50 ) ; VAR_51 -> VAR_52 += VAR_53 ; } } return VAR_54 ; }",658
659," TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {   TYPE_3 * const VAR_2 = ( TYPE_4 * ) VAR_3 ;   ( TYPE_5 ) VAR_4 ;   METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , & VAR_9 -> VAR_10 ,  VAR_11 -> VAR_12 , VAR_13 -> VAR_14 , VAR_15 -> VAR_16 ) ; return 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 * const VAR_2 = ( TYPE_4 * ) VAR_3 ; ( TYPE_5 ) unused ; METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 -> VAR_8 , VAR_15 -> VAR_17 , VAR_15 -> VAR_16 ) ; return 1 ; }",659
660,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; while ( ( VAR_4 = METHOD_1 ( VAR_5 , ""//"" ) ) != ( TYPE_5 * ) 0 ) { for ( VAR_6 = VAR_7 + 2 ; * VAR_8 == '/' ; ++ VAR_9 ) continue ; ( TYPE_6 ) METHOD_2 ( VAR_10 + 1 , VAR_11 ) ; } while ( METHOD_3 ( VAR_12 , ""./"" , 2 ) == 0 ) ( TYPE_7 ) METHOD_4 ( VAR_13 , VAR_14 + 2 , METHOD_5 ( VAR_15 ) - 1 ) ; while ( ( VAR_16 = METHOD_6 ( VAR_17 , ""/./"" ) ) != ( TYPE_8 * ) 0 )  ( TYPE_9 ) METHOD_7 ( VAR_18 , VAR_19 + 2 , METHOD_8 ( VAR_20 ) - 1 ) ;  for ( ; ; ) { while ( METHOD_9 ( VAR_21 , ""../"" , 3 ) == 0 ) ( TYPE_10 ) METHOD_10 ( VAR_22 , VAR_23 + 3 , METHOD_11 ( VAR_24 ) - 2 ) ; VAR_25 = METHOD_12 ( VAR_26 , ""/../"" ) ; if ( VAR_27 == ( TYPE_11 * ) 0 ) break ; for ( VAR_28 = VAR_29 - 1 ; VAR_30 >= VAR_31 && * VAR_32 != '/' ; -- VAR_33 ) continue ; ( TYPE_12 ) METHOD_13 ( VAR_34 + 1 , VAR_35 + 4 ) ; } while ( ( VAR_36 = METHOD_14 ( VAR_37 ) ) > 3 && METHOD_15 ( ( VAR_38 = VAR_39 + VAR_40 - 3 ) , ""/.."" ) == 0 ) { for ( VAR_41 = VAR_42 - 1 ; VAR_43 >= VAR_44 && * VAR_45 != '/' ; -- VAR_46 ) continue ; if ( VAR_47 < VAR_48 ) break ; * VAR_49 = '\\0' ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; TYPE_3 * VAR_2 ; TYPE_4 VAR_3 ; while ( ( VAR_4 = METHOD_1 ( VAR_5 , ""//"" ) ) != ( TYPE_5 * ) 0 ) { for ( VAR_6 = VAR_7 + 2 ; * VAR_8 == '/' ; ++ VAR_9 ) continue ; ( TYPE_6 ) METHOD_2 ( VAR_10 + 1 , VAR_11 ) ; } while ( METHOD_3 ( VAR_12 , ""./"" , 2 ) == 0 ) ( TYPE_7 ) METHOD_4 ( VAR_13 , VAR_14 + 2 , METHOD_5 ( VAR_15 ) - 1 ) ; while ( ( VAR_16 = METHOD_6 ( VAR_17 , ""/./"" ) ) != ( TYPE_8 * ) 0 ) ( TYPE_9 ) METHOD_7 ( VAR_18 , VAR_19 + 2 , METHOD_8 ( VAR_20 ) - 1 ) ; for ( ; ; ) { while ( METHOD_9 ( VAR_21 , ""../"" , 3 ) == 0 ) ( TYPE_10 ) METHOD_10 ( VAR_22 , VAR_23 + 3 , METHOD_11 ( VAR_24 ) - 2 ) ; VAR_25 = METHOD_12 ( VAR_26 , ""/../"" ) ; if ( VAR_27 == ( TYPE_11 * ) 0 ) break ; for ( VAR_28 = VAR_29 - 1 ; VAR_30 >= VAR_31 && * VAR_32 != '/' ; -- VAR_33 ) continue ; ( TYPE_12 ) METHOD_13 ( VAR_34 + 1 , VAR_35 + 4 ) ; } while ( ( VAR_36 = METHOD_14 ( VAR_37 ) ) > 3 && METHOD_15 ( ( VAR_38 = VAR_39 + VAR_40 - 3 ) , ""/.."" ) == 0 ) { for ( VAR_41 = VAR_42 - 1 ; VAR_43 >= VAR_44 && * VAR_45 != '/' ; -- VAR_46 ) continue ; if ( VAR_47 < VAR_48 ) break ; * VAR_49 = '\\0' ; } }",660
661,"static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""arptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ;  if ( ( VAR_38 -> VAR_39 == sizeof ( struct STRUCT_OR_UNION_4 ) &&  ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) &&  VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) ||  VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; VAR_67 = VAR_68 ; VAR_69 = VAR_70 -> VAR_71 . VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = 0 ; if ( VAR_76 == VAR_77 ) goto VAR_78 ; VAR_79 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_80 + VAR_81 ) ; } while ( VAR_82 == VAR_83 + VAR_84 -> VAR_85 ) ; VAR_86 = VAR_87 -> VAR_88 ; VAR_89 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_90 + VAR_91 + VAR_92 ) ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 += VAR_98 ; } else { TYPE_8 VAR_99 = VAR_100 -> VAR_101 ; if ( METHOD_7 ( VAR_102 -> VAR_103 . VAR_104 . VAR_105 . VAR_106 , VAR_107 ) == 0 && VAR_108 >= 0 ) { if ( VAR_109 > VAR_110 -> VAR_111 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_8 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_112 ) ; return 0 ; } METHOD_9 ( ""Jumprule%u->%u\\n"" , VAR_113 , VAR_114 ) ; } else { VAR_115 = VAR_116 + VAR_117 -> VAR_118 ; } VAR_119 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_120 + VAR_121 ) ; VAR_122 -> VAR_123 . VAR_124 = VAR_125 ; VAR_126 = VAR_127 ; } } VAR_128 : METHOD_10 ( ""Finishedchain%u\\n"" , VAR_129 ) ; } return 1 ; }","static TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 ) { unsigned TYPE_3 VAR_3 ; for ( VAR_4 = 0 ; VAR_5 < VAR_6 ; VAR_7 ++ ) { unsigned TYPE_4 VAR_8 = VAR_9 -> VAR_10 [ VAR_11 ] ; struct STRUCT_OR_UNION_1 * VAR_12 = ( struct STRUCT_OR_UNION_2 * ) ( VAR_13 + VAR_14 ) ; if ( ! ( VAR_15 & ( 1 << VAR_16 ) ) ) continue ; VAR_17 -> VAR_18 . VAR_19 = VAR_20 ; for ( ; ; ) { const struct STRUCT_OR_UNION_3 * VAR_21 = ( TYPE_5 * ) METHOD_1 ( VAR_22 ) ; TYPE_6 VAR_23 = VAR_24 -> VAR_25 & ( 1 << VAR_26 ) ; if ( VAR_27 -> VAR_28 & ( 1 << VAR_29 ) ) { METHOD_2 ( ""arptables:loophook%upos%u%08X.\\n"" , VAR_30 , VAR_31 , VAR_32 -> VAR_33 ) ; return 0 ; } VAR_34 -> VAR_35 |= ( ( 1 << VAR_36 ) | ( 1 << VAR_37 ) ) ; if ( ( METHOD_4 ( VAR_122 ) && ( METHOD_3 ( VAR_40 -> VAR_41 . VAR_42 . VAR_43 . VAR_44 , VAR_45 ) == 0 ) && VAR_46 -> VAR_47 < 0 && METHOD_4 ( & VAR_48 -> VAR_49 ) ) || VAR_50 ) { unsigned TYPE_7 VAR_51 , VAR_52 ; if ( ( METHOD_5 ( VAR_53 -> VAR_54 . VAR_55 . VAR_56 . VAR_57 , VAR_58 ) == 0 ) && VAR_59 -> VAR_60 < - VAR_61 - 1 ) { METHOD_6 ( ""mark_source_chains:bad"" ""negativeverdict(%i)\\n"" , VAR_62 -> VAR_63 ) ; return 0 ; } do { VAR_64 -> VAR_65 ^= ( 1 << VAR_66 ) ; VAR_67 = VAR_68 ; VAR_69 = VAR_70 -> VAR_71 . VAR_72 ; VAR_73 -> VAR_74 . VAR_75 = 0 ; if ( VAR_76 == VAR_77 ) goto VAR_78 ; VAR_79 = ( struct STRUCT_OR_UNION_5 * ) ( VAR_80 + VAR_81 ) ; } while ( VAR_82 == VAR_83 + VAR_84 -> VAR_85 ) ; VAR_86 = VAR_87 -> VAR_88 ; VAR_89 = ( struct STRUCT_OR_UNION_6 * ) ( VAR_90 + VAR_91 + VAR_92 ) ; VAR_93 -> VAR_94 . VAR_95 = VAR_96 ; VAR_97 += VAR_98 ; } else { TYPE_8 VAR_99 = VAR_100 -> VAR_101 ; if ( METHOD_7 ( VAR_102 -> VAR_103 . VAR_104 . VAR_105 . VAR_106 , VAR_107 ) == 0 && VAR_108 >= 0 ) { if ( VAR_109 > VAR_110 -> VAR_111 - sizeof ( struct STRUCT_OR_UNION_7 ) ) { METHOD_8 ( ""mark_source_chains:"" ""badverdict(%i)\\n"" , VAR_112 ) ; return 0 ; } METHOD_9 ( ""Jumprule%u->%u\\n"" , VAR_113 , VAR_114 ) ; } else { VAR_115 = VAR_116 + VAR_117 -> VAR_118 ; } VAR_119 = ( struct STRUCT_OR_UNION_8 * ) ( VAR_120 + VAR_121 ) ; VAR_122 -> VAR_123 . VAR_124 = VAR_125 ; VAR_126 = VAR_127 ; } } VAR_128 : METHOD_10 ( ""Finishedchain%u\\n"" , VAR_129 ) ; } return 1 ; }",661
662,static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) {  TYPE_1 VAR_1 = VAR_2 -> VAR_3 . VAR_4 ;  if ( VAR_5 -> VAR_6 . VAR_7 != VAR_8 ) return - VAR_9 ; if ( METHOD_1 ( VAR_10 ) ) return - VAR_11 ; switch ( VAR_12 ) { case VAR_13 : case VAR_14 : return - VAR_15 ; default : break ; } if ( VAR_16 >= VAR_17 ) return - VAR_18 ; if ( ! VAR_19 -> VAR_20 ) { TYPE_2 VAR_21 ; VAR_22 = METHOD_2 ( VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; METHOD_3 ( & VAR_26 [ VAR_27 ] ) ; VAR_28 -> VAR_29 = VAR_30 ; } return 0 ; },static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 = VAR_2 -> VAR_3 . VAR_4 ; if ( VAR_5 -> VAR_6 . VAR_7 != VAR_8 ) return - VAR_9 ; if ( METHOD_1 ( VAR_10 ) ) return - VAR_11 ; switch ( VAR_12 ) { case VAR_13 : case VAR_14 : return - VAR_15 ; default : break ; } if ( VAR_16 >= VAR_17 ) return - VAR_18 ; if ( ! VAR_19 -> VAR_20 ) { TYPE_2 VAR_21 ; VAR_22 = METHOD_2 ( VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; METHOD_3 ( & VAR_26 [ VAR_27 ] ) ; VAR_28 -> VAR_29 = VAR_30 ; } return 0 ; },662
663,"static TYPE_0 * METHOD_0 ( TYPE_1 ) { METHOD_1 ( & VAR_0 , VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_3 ) ; if ( ! VAR_4 ) { METHOD_3 ( VAR_5 , ""%sunabletoloadconfigfile;attemptingtotranscodelegacyfile."" , VAR_6 ) ; VAR_7 = METHOD_4 ( VAR_8 ) ; if ( ! VAR_9 ) { METHOD_5 ( VAR_10 , ""%sunabletotranscodelegacyfile,startingunconfigured."" , VAR_11 ) ; VAR_12 = METHOD_6 ( ) ; if ( ! VAR_13 ) { METHOD_7 ( VAR_14 , ""%sunabletoallocateaconfigobject."" , VAR_15 ) ; goto VAR_16 ; } } if ( METHOD_8 ( VAR_17 , VAR_18 ) ) METHOD_9 ( VAR_19 ) ; }  VAR_20 = METHOD_10 ( ) ;  if ( ! VAR_21 ) { METHOD_11 ( VAR_22 , ""%sunabletocreatealarm."" , VAR_23 ) ; goto VAR_24 ; } return METHOD_12 ( VAR_25 ) ; VAR_26 : ; METHOD_13 ( VAR_27 ) ; METHOD_14 ( VAR_28 ) ; METHOD_15 ( & VAR_29 ) ; VAR_30 = VAR_31 ; VAR_32 = VAR_33 ; return METHOD_16 ( VAR_34 ) ; }","static TYPE_0 * METHOD_0 ( TYPE_1 ) { METHOD_1 ( & VAR_0 , VAR_1 ) ; VAR_2 = METHOD_2 ( VAR_3 ) ; if ( ! VAR_4 ) { METHOD_3 ( VAR_5 , ""%sunabletoloadconfigfile;attemptingtotranscodelegacyfile."" , VAR_6 ) ; VAR_7 = METHOD_4 ( VAR_8 ) ; if ( ! VAR_9 ) { METHOD_5 ( VAR_10 , ""%sunabletotranscodelegacyfile,startingunconfigured."" , VAR_11 ) ; VAR_12 = METHOD_6 ( ) ; if ( ! VAR_13 ) { METHOD_7 ( VAR_14 , ""%sunabletoallocateaconfigobject."" , VAR_15 ) ; goto VAR_16 ; } } if ( METHOD_8 ( VAR_17 , VAR_18 ) ) METHOD_9 ( VAR_19 ) ; } METHOD_17 ( ) ; VAR_20 = METHOD_10 ( ) ; if ( ! VAR_21 ) { METHOD_11 ( VAR_22 , ""%sunabletocreatealarm."" , VAR_23 ) ; goto VAR_24 ; } return METHOD_12 ( VAR_25 ) ; VAR_26 : ; METHOD_13 ( VAR_27 ) ; METHOD_14 ( VAR_28 ) ; METHOD_15 ( & VAR_29 ) ; VAR_30 = VAR_31 ; VAR_32 = VAR_33 ; return METHOD_16 ( VAR_34 ) ; }",663
664,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 ; TYPE_1 VAR_5 ; TYPE_2 VAR_6 ;  TYPE_3 VAR_7 = 0 ;  TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 -> VAR_14 ;  VAR_15 = 1 << VAR_16 -> VAR_17 ;   if ( VAR_18 < 2 ) {  VAR_19 -> VAR_20 = 0 ; return 1 ; } VAR_21 = ( ( VAR_22 -> VAR_23 + VAR_24 - 1 ) + ( ( METHOD_2 ( VAR_25 -> VAR_26 -> VAR_27 ) + 1 ) << METHOD_3 ( VAR_28 ) ) ) / VAR_29 ; VAR_30 = VAR_31 * sizeof ( struct STRUCT_OR_UNION_3 ) ; VAR_32 -> VAR_33 = METHOD_4 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 == VAR_38 ) { METHOD_5 ( VAR_39 , VAR_40 , ""notenoughmemoryfor%uflexgroups"" , VAR_41 ) ; goto VAR_42 ; } for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; VAR_47 ++ ) { VAR_48 = METHOD_6 ( VAR_49 , VAR_50 , VAR_51 ) ; VAR_52 = METHOD_7 ( VAR_53 , VAR_54 ) ; METHOD_8 ( METHOD_9 ( VAR_55 , VAR_56 ) , & VAR_57 -> VAR_58 [ VAR_59 ] . VAR_60 ) ; METHOD_10 ( METHOD_11 ( VAR_61 , VAR_62 ) , & VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 ) ; METHOD_12 ( METHOD_13 ( VAR_67 , VAR_68 ) , & VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 ) ; } return 1 ; VAR_73 : return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 = VAR_4 ; TYPE_1 VAR_5 ; TYPE_2 VAR_6 ; TYPE_3 VAR_7 = 0 ; TYPE_4 VAR_8 ; TYPE_5 VAR_9 ; VAR_10 -> VAR_11 = VAR_12 -> VAR_13 -> VAR_14 ; VAR_15 = 1 << VAR_16 -> VAR_17 ; if ( VAR_18 < 2 ) { VAR_19 -> VAR_20 = 0 ; return 1 ; } VAR_21 = ( ( VAR_22 -> VAR_23 + VAR_24 - 1 ) + ( ( METHOD_2 ( VAR_25 -> VAR_26 -> VAR_27 ) + 1 ) << METHOD_3 ( VAR_28 ) ) ) / VAR_29 ; VAR_30 = VAR_31 * sizeof ( struct STRUCT_OR_UNION_3 ) ; VAR_32 -> VAR_33 = METHOD_4 ( VAR_34 , VAR_35 ) ; if ( VAR_36 -> VAR_37 == VAR_38 ) { METHOD_5 ( VAR_39 , VAR_40 , ""notenoughmemoryfor%uflexgroups"" , VAR_41 ) ; goto VAR_42 ; } for ( VAR_43 = 0 ; VAR_44 < VAR_45 -> VAR_46 ; VAR_47 ++ ) { VAR_48 = METHOD_6 ( VAR_49 , VAR_50 , VAR_51 ) ; VAR_52 = METHOD_7 ( VAR_53 , VAR_54 ) ; METHOD_8 ( METHOD_9 ( VAR_55 , VAR_56 ) , & VAR_57 -> VAR_58 [ VAR_59 ] . VAR_60 ) ; METHOD_10 ( METHOD_11 ( VAR_61 , VAR_62 ) , & VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 ) ; METHOD_12 ( METHOD_13 ( VAR_67 , VAR_68 ) , & VAR_69 -> VAR_70 [ VAR_71 ] . VAR_72 ) ; } return 1 ; VAR_73 : return 0 ; }",664
665,"static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 = VAR_6 ;  for ( VAR_7 = VAR_8 + 2 ; VAR_9 < VAR_10 + 2 + VAR_11 [ VAR_12 + 1 ] ; VAR_13 ++ )  if ( VAR_14 -> VAR_15 [ VAR_16 ] == VAR_17 || VAR_18 [ VAR_19 ] != VAR_20 -> VAR_21 [ VAR_22 ++ ] ) return 0 ; return 1 ; }","static TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 ; TYPE_6 VAR_5 = VAR_6 ; for ( VAR_7 = VAR_8 + 2 ; ( ( VAR_9 < VAR_10 + 2 + VAR_11 [ VAR_12 + 1 ] ) && ( VAR_22 < VAR_20 -> VAR_23 ) ) ; VAR_13 ++ ) if ( VAR_14 -> VAR_15 [ VAR_16 ] == VAR_17 || VAR_18 [ VAR_19 ] != VAR_20 -> VAR_21 [ VAR_22 ++ ] ) return 0 ; return 1 ; }",665
666,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 ; TYPE_1 VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 ) ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 ) ; VAR_16 = METHOD_3 ( VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_4 ( VAR_20 -> VAR_21 ) ; if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) ) goto VAR_25 ; if ( VAR_26 -> VAR_27 & VAR_28 ) VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = VAR_34 -> VAR_35 + VAR_36 ; if ( METHOD_5 ( VAR_37 , VAR_38 ) != VAR_39 ) goto VAR_40 ; VAR_41 -> VAR_42 += VAR_43 ; VAR_44 -> VAR_45 ++ ; VAR_46 -> VAR_47 += VAR_48 ; VAR_49 -> VAR_50 ++ ; return VAR_51 ; VAR_52 : METHOD_6 ( VAR_53 ) ; VAR_54 -> VAR_55 ++ ; return VAR_56 ; VAR_57 :  METHOD_7 ( VAR_58 ) ;  VAR_59 -> VAR_60 ++ ; return VAR_61 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 ; TYPE_1 VAR_8 ; VAR_9 = METHOD_1 ( VAR_10 ) ; VAR_11 = VAR_12 -> VAR_13 ; VAR_14 = METHOD_2 ( VAR_15 ) ; VAR_16 = METHOD_3 ( VAR_17 -> VAR_18 ) ; VAR_19 = METHOD_4 ( VAR_20 -> VAR_21 ) ; if ( ! ( VAR_22 -> VAR_23 & VAR_24 ) ) goto VAR_25 ; if ( VAR_26 -> VAR_27 & VAR_28 ) VAR_29 -> VAR_30 = VAR_31 -> VAR_32 ; VAR_33 = VAR_34 -> VAR_35 + VAR_36 ; if ( METHOD_5 ( VAR_37 , VAR_38 ) != VAR_39 ) goto VAR_40 ; VAR_41 -> VAR_42 += VAR_43 ; VAR_44 -> VAR_45 ++ ; VAR_46 -> VAR_47 += VAR_48 ; VAR_49 -> VAR_50 ++ ; return VAR_51 ; VAR_52 : METHOD_6 ( VAR_53 ) ; VAR_54 -> VAR_55 ++ ; return VAR_56 ; VAR_57 : VAR_59 -> VAR_60 ++ ; return VAR_61 ; }",666
667,"static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) {  TYPE_4 VAR_3 ;  unsigned TYPE_5 VAR_4 [ 8 ] ;  struct STRUCT_OR_UNION_0 * VAR_5 ;  struct STRUCT_OR_UNION_1 VAR_6 , VAR_7 ; struct STRUCT_OR_UNION_2 * VAR_8 ; METHOD_1 ( VAR_9 , VAR_10 ) ;  VAR_11 = METHOD_2 ( ""ecb(des)"" , 0 , VAR_12 ) ;  if ( METHOD_3 ( VAR_13 ) ) {  VAR_14 = METHOD_4 ( VAR_15 ) ;  METHOD_5 ( VAR_16 , ""couldnotallocatedescryptoAPI\\n"" ) ;  goto VAR_17 ;  } VAR_18 = METHOD_6 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) { VAR_22 = - VAR_23 ; METHOD_7 ( VAR_24 , ""couldnotallocatedescryptoAPI\\n"" ) ; goto VAR_25 ; } METHOD_8 ( VAR_26 , VAR_27 , 8 ) ;  METHOD_9 ( & VAR_28 , VAR_29 , 8 ) ;  METHOD_10 ( & VAR_30 , VAR_31 , 8 ) ; METHOD_11 ( VAR_32 , 0 , VAR_33 , VAR_34 ) ; METHOD_12 ( VAR_35 , & VAR_36 , & VAR_37 , 8 , VAR_38 ) ; VAR_39 = METHOD_13 ( VAR_40 ) ; if ( VAR_41 ) METHOD_14 ( VAR_42 , ""couldnotencryptcryptkeyrc:%d\\n"" , VAR_43 ) ; METHOD_15 ( VAR_44 ) ; VAR_45 : METHOD_16 ( VAR_46 ) ;  VAR_47 :  return VAR_48 ; }","static TYPE_0 METHOD_0 ( unsigned TYPE_1 * VAR_0 , const unsigned TYPE_2 * VAR_1 , unsigned TYPE_3 * VAR_2 ) { TYPE_4 VAR_3 ; unsigned TYPE_5 VAR_4 [ 8 ] ; struct crypto_cipher * VAR_46 ; METHOD_1 ( VAR_9 , VAR_10 ) ; VAR_11 = METHOD_2 ( ""ecb(des)"" , 0 , VAR_12 ) ; if ( METHOD_3 ( VAR_13 ) ) { VAR_14 = METHOD_4 ( VAR_15 ) ; METHOD_5 ( VAR_16 , ""couldnotallocatedescryptoAPI\\n"" ) ; goto VAR_17 ; } VAR_18 = METHOD_6 ( VAR_19 , VAR_20 ) ; if ( ! VAR_21 ) { VAR_22 = - VAR_23 ; METHOD_7 ( VAR_24 , ""couldnotallocatedescryptoAPI\\n"" ) ; goto VAR_25 ; } METHOD_8 ( VAR_26 , VAR_27 , 8 ) ; METHOD_9 ( & VAR_28 , VAR_29 , 8 ) ; METHOD_10 ( & VAR_30 , VAR_31 , 8 ) ; METHOD_11 ( VAR_32 , 0 , 0 ) ; if ( VAR_41 ) METHOD_14 ( VAR_42 , ""couldnotencryptcryptkeyrc:%d\\n"" , VAR_43 ) ; METHOD_15 ( VAR_44 ) ; VAR_45 : METHOD_16 ( VAR_46 ) ; return 0 ; }",667
668,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; for ( VAR_5 = 0 ; VAR_6 -> VAR_7 && VAR_8 < VAR_9 -> VAR_10 ; VAR_11 ++ ) { TYPE_4 * VAR_12 = VAR_13 -> VAR_14 + VAR_15 ; for ( VAR_16 = 0 ; VAR_17 < VAR_18 -> VAR_19 ; VAR_20 ++ ) { TYPE_5 * VAR_21 = VAR_22 -> VAR_23 + VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 -> VAR_28 * VAR_29 -> VAR_30 ; VAR_31 ++ ) {  TYPE_6 * VAR_32 = VAR_33 -> VAR_34 + VAR_35 ;  METHOD_1 ( & VAR_36 -> VAR_37 ) ; METHOD_2 ( & VAR_38 -> VAR_39 ) ; METHOD_3 ( & VAR_40 -> VAR_41 ) ; }  METHOD_4 ( & VAR_42 -> VAR_43 ) ;  } METHOD_5 ( & VAR_44 -> VAR_45 ) ; } METHOD_6 ( & VAR_46 -> VAR_47 ) ; METHOD_7 ( & VAR_48 -> VAR_49 ) ; METHOD_8 ( & VAR_50 -> VAR_51 ) ; METHOD_9 ( & VAR_52 -> VAR_53 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; for ( VAR_5 = 0 ; VAR_6 -> VAR_7 && VAR_8 < VAR_9 -> VAR_10 ; VAR_11 ++ ) { if ( VAR_45 -> VAR_43 ) { TYPE_4 * VAR_12 = VAR_13 -> VAR_14 + VAR_15 ; for ( VAR_16 = 0 ; VAR_17 < VAR_18 -> VAR_19 ; VAR_20 ++ ) { TYPE_5 * VAR_21 = VAR_22 -> VAR_23 + VAR_24 ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 -> VAR_28 * VAR_29 -> VAR_30 ; VAR_31 ++ ) { TYPE_6 * VAR_32 = VAR_33 -> VAR_34 + VAR_35 ; METHOD_1 ( & VAR_36 -> VAR_37 ) ; METHOD_2 ( & VAR_38 -> VAR_39 ) ; METHOD_3 ( & VAR_40 -> VAR_41 ) ; } } METHOD_4 ( & VAR_42 -> VAR_43 ) ; } METHOD_5 ( & VAR_44 -> VAR_45 ) ; } METHOD_6 ( & VAR_46 -> VAR_47 ) ; METHOD_7 ( & VAR_48 -> VAR_49 ) ; METHOD_8 ( & VAR_50 -> VAR_51 ) ; METHOD_9 ( & VAR_52 -> VAR_53 ) ; }",668
669,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 ; struct STRUCT_OR_UNION_1 VAR_2 ; TYPE_2 VAR_3 = VAR_4 ; TYPE_3 TYPE_4 TYPE_5 TYPE_6 = 0 ; METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 , VAR_8 ) ; METHOD_2 ( ""Enteringrequestloop!\\n"" ) ; VAR_9 . VAR_10 = METHOD_3 ( VAR_11 ) ; VAR_12 . VAR_13 = 0 ; while ( VAR_14 ) { TYPE_7 VAR_15 [ VAR_16 ] ; TYPE_8 VAR_17 ; TYPE_9 TYPE_10 TYPE_11 ++ ; TYPE_12 ( ""%d:"" , TYPE_13 ) ; METHOD_4 ( VAR_18 -> VAR_19 , & VAR_20 , sizeof ( VAR_21 ) ) ; VAR_22 . VAR_23 = METHOD_5 ( VAR_24 . VAR_25 ) ; VAR_26 . VAR_27 = METHOD_6 ( VAR_28 . VAR_29 ) ; if ( VAR_30 . VAR_31 == VAR_32 ) { METHOD_7 ( VAR_33 , ""Disconnectrequestreceived."" ) ; if ( VAR_34 -> VAR_35 -> VAR_36 & VAR_37 ) { if ( VAR_38 -> VAR_39 ) METHOD_8 ( VAR_40 -> VAR_41 ) ; METHOD_9 ( VAR_42 -> VAR_43 ) ; METHOD_10 ( VAR_44 -> VAR_45 ) ; METHOD_11 ( VAR_46 -> VAR_47 ) ; } VAR_48 = VAR_49 ; continue ; } VAR_50 = METHOD_12 ( VAR_51 . VAR_52 ) ; if ( VAR_53 . VAR_54 != METHOD_13 ( VAR_55 ) ) METHOD_14 ( ""Notenoughmagic."" ) ;  if ( VAR_56 > VAR_57 + sizeof ( struct STRUCT_OR_UNION_2 ) )  METHOD_15 ( ""Requesttoobig!"" ) ; TYPE_14 TYPE_15 TYPE_16 ( ""%sfrom%llu(%llu)len%d,"" , VAR_58 . VAR_59 ? ""WRITE"" : ""READ"" , ( unsigned TYPE_17 TYPE_18 ) VAR_60 . VAR_61 , ( unsigned TYPE_19 TYPE_20 ) VAR_62 . VAR_63 / 512 , VAR_64 ) ; METHOD_16 ( VAR_65 . VAR_66 , VAR_67 . VAR_68 , sizeof ( VAR_69 . VAR_70 ) ) ; if ( ( VAR_71 . VAR_72 + VAR_73 ) > ( VAR_74 ) ) { METHOD_17 ( ""[Numbertoolarge!]"" ) ; METHOD_18 ( VAR_75 , VAR_76 , VAR_77 ) ; continue ; } if ( ( ( TYPE_21 ) ( ( TYPE_22 ) VAR_78 . VAR_79 + VAR_80 ) > VAR_81 -> VAR_82 ) ) { METHOD_19 ( ""[RANGE!]"" ) ; METHOD_20 ( VAR_83 , VAR_84 , VAR_85 ) ; continue ; } if ( VAR_86 . VAR_87 == VAR_88 ) { METHOD_21 ( ""wr:net->buf,"" ) ; METHOD_22 ( VAR_89 -> VAR_90 , VAR_91 , VAR_92 ) ; METHOD_23 ( ""buf->exp,"" ) ; if ( ( VAR_93 -> VAR_94 -> VAR_95 & VAR_96 ) || ( VAR_97 -> VAR_98 -> VAR_99 & VAR_100 ) ) { METHOD_24 ( ""[WRITEtoREADONLY!]"" ) ; METHOD_25 ( VAR_101 , VAR_102 , VAR_103 ) ; continue ; } if ( METHOD_26 ( VAR_104 . VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ) { METHOD_27 ( ""Writefailed:%m"" ) ; METHOD_28 ( VAR_109 , VAR_110 , VAR_111 ) ; continue ; } METHOD_29 ( VAR_112 -> VAR_113 , VAR_114 ) ; METHOD_30 ( ""OK!\\n"" ) ; continue ; } METHOD_31 ( ""exp->buf,"" ) ; if ( METHOD_32 ( VAR_115 . VAR_116 , VAR_117 + sizeof ( struct STRUCT_OR_UNION_3 ) , VAR_118 , VAR_119 ) ) { METHOD_33 ( ""Readfailed:%m"" ) ; METHOD_34 ( VAR_120 , VAR_121 , VAR_122 ) ; continue ; } METHOD_35 ( ""buf->net,"" ) ; METHOD_36 ( VAR_123 , & VAR_124 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; METHOD_37 ( VAR_125 -> VAR_126 , VAR_127 , VAR_128 + sizeof ( struct STRUCT_OR_UNION_5 ) ) ; METHOD_38 ( ""OK!\\n"" ) ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { struct STRUCT_OR_UNION_0 VAR_1 ; struct STRUCT_OR_UNION_1 VAR_2 ; TYPE_2 VAR_3 = VAR_4 ; TYPE_3 TYPE_4 TYPE_5 TYPE_6 = 0 ; METHOD_1 ( VAR_5 -> VAR_6 , VAR_7 , VAR_8 ) ; METHOD_2 ( ""Enteringrequestloop!\\n"" ) ; VAR_9 . VAR_10 = METHOD_3 ( VAR_11 ) ; VAR_12 . VAR_13 = 0 ; while ( VAR_14 ) { TYPE_7 VAR_15 [ VAR_16 ] ; TYPE_8 VAR_17 ; TYPE_9 TYPE_10 TYPE_11 ++ ; TYPE_12 ( ""%d:"" , TYPE_13 ) ; METHOD_4 ( VAR_18 -> VAR_19 , & VAR_20 , sizeof ( VAR_21 ) ) ; VAR_22 . VAR_23 = METHOD_5 ( VAR_24 . VAR_25 ) ; VAR_26 . VAR_27 = METHOD_6 ( VAR_28 . VAR_29 ) ; if ( VAR_30 . VAR_31 == VAR_32 ) { METHOD_7 ( VAR_33 , ""Disconnectrequestreceived."" ) ; if ( VAR_34 -> VAR_35 -> VAR_36 & VAR_37 ) { if ( VAR_38 -> VAR_39 ) METHOD_8 ( VAR_40 -> VAR_41 ) ; METHOD_9 ( VAR_42 -> VAR_43 ) ; METHOD_10 ( VAR_44 -> VAR_45 ) ; METHOD_11 ( VAR_46 -> VAR_47 ) ; } VAR_48 = VAR_49 ; continue ; } VAR_50 = METHOD_12 ( VAR_51 . VAR_52 ) ; if ( VAR_53 . VAR_54 != METHOD_13 ( VAR_55 ) ) METHOD_14 ( ""Notenoughmagic."" ) ; if ( VAR_56 > VAR_57 + sizeof ( struct STRUCT_OR_UNION_2 ) ) METHOD_15 ( ""Requesttoobig!"" ) ; TYPE_14 TYPE_15 TYPE_16 ( ""%sfrom%llu(%llu)len%d,"" , VAR_58 . VAR_59 ? ""WRITE"" : ""READ"" , ( unsigned TYPE_17 TYPE_18 ) VAR_60 . VAR_61 , ( unsigned TYPE_19 TYPE_20 ) VAR_62 . VAR_63 / 512 , VAR_64 ) ; METHOD_16 ( VAR_65 . VAR_66 , VAR_67 . VAR_68 , sizeof ( VAR_69 . VAR_70 ) ) ; if ( ( VAR_71 . VAR_72 + VAR_73 ) > ( VAR_74 ) ) { METHOD_17 ( ""[Numbertoolarge!]"" ) ; METHOD_18 ( VAR_75 , VAR_76 , VAR_77 ) ; continue ; } if ( ( ( TYPE_21 ) ( ( TYPE_22 ) VAR_78 . VAR_79 + VAR_80 ) > VAR_81 -> VAR_82 ) ) { METHOD_19 ( ""[RANGE!]"" ) ; METHOD_20 ( VAR_83 , VAR_84 , VAR_85 ) ; continue ; } if ( VAR_86 . VAR_87 == VAR_88 ) { METHOD_21 ( ""wr:net->buf,"" ) ; METHOD_22 ( VAR_89 -> VAR_90 , VAR_91 , VAR_92 ) ; METHOD_23 ( ""buf->exp,"" ) ; if ( ( VAR_93 -> VAR_94 -> VAR_95 & VAR_96 ) || ( VAR_97 -> VAR_98 -> VAR_99 & VAR_100 ) ) { METHOD_24 ( ""[WRITEtoREADONLY!]"" ) ; METHOD_25 ( VAR_101 , VAR_102 , VAR_103 ) ; continue ; } if ( METHOD_26 ( VAR_104 . VAR_105 , VAR_106 , VAR_107 , VAR_108 ) ) { METHOD_27 ( ""Writefailed:%m"" ) ; METHOD_28 ( VAR_109 , VAR_110 , VAR_111 ) ; continue ; } METHOD_29 ( VAR_112 -> VAR_113 , VAR_114 ) ; METHOD_30 ( ""OK!\\n"" ) ; continue ; } METHOD_31 ( ""exp->buf,"" ) ; if ( METHOD_32 ( VAR_115 . VAR_116 , VAR_117 + sizeof ( struct STRUCT_OR_UNION_3 ) , VAR_118 , VAR_119 ) ) { METHOD_33 ( ""Readfailed:%m"" ) ; METHOD_34 ( VAR_120 , VAR_121 , VAR_122 ) ; continue ; } METHOD_35 ( ""buf->net,"" ) ; METHOD_36 ( VAR_123 , & VAR_124 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; METHOD_37 ( VAR_125 -> VAR_126 , VAR_127 , VAR_128 + sizeof ( struct STRUCT_OR_UNION_5 ) ) ; METHOD_38 ( ""OK!\\n"" ) ; } return 0 ; }",669
670,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_1 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ;  TYPE_5 VAR_13 = 0 ;  VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , & VAR_18 ) ; if ( ! VAR_19 ) return 1 ; METHOD_3 ( VAR_20 != VAR_21 ) ;  VAR_22 = ( struct STRUCT_OR_UNION_6 * ) VAR_23 -> VAR_24 ;  VAR_25 = METHOD_4 ( VAR_26 , METHOD_5 ( VAR_27 -> VAR_28 ) ) ; if ( VAR_29 ) goto VAR_30 ; for ( VAR_31 = 0 , VAR_32 = 0 ;  VAR_33 < VAR_34 -> VAR_35 && VAR_36 < METHOD_6 ( VAR_37 -> VAR_38 ) ;  VAR_39 ++ , VAR_40 += VAR_41 -> VAR_42 ) { struct STRUCT_OR_UNION_7 * VAR_43 = & VAR_44 -> VAR_45 [ VAR_46 ] ; VAR_47 = ( struct STRUCT_OR_UNION_8 * ) & ( VAR_48 -> VAR_49 [ VAR_50 ] ) ; VAR_51 = VAR_52 -> VAR_53 ; if ( VAR_54 == 1 ) { struct STRUCT_OR_UNION_9 * VAR_55 = ( struct STRUCT_OR_UNION_10 * ) VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = METHOD_7 ( VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = METHOD_8 ( VAR_66 -> VAR_67 ) ; VAR_68 -> VAR_69 = VAR_70 ; } else if ( VAR_71 == 2 ) { struct STRUCT_OR_UNION_11 * VAR_72 = ( struct STRUCT_OR_UNION_12 * ) VAR_73 ; if ( ! METHOD_9 ( VAR_74 -> VAR_75 . VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ) { TYPE_6 VAR_79 = METHOD_11 ( ( ( TYPE_7 * ) VAR_80 -> VAR_81 . VAR_82 ) [ 0 ] ) ; if ( VAR_83 < 0x0200 ) { VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; } else { VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; } } else if ( ! METHOD_12 ( VAR_96 -> VAR_97 . VAR_98 , VAR_99 , METHOD_13 ( VAR_100 ) ) ) { TYPE_8 VAR_101 ; struct STRUCT_OR_UNION_13 * VAR_102 ; struct STRUCT_OR_UNION_14 * VAR_103 = ( struct STRUCT_OR_UNION_15 * ) VAR_104 ; VAR_105 -> VAR_106 = VAR_107 ; VAR_108 -> VAR_109 . VAR_110 . VAR_111 = METHOD_14 ( VAR_112 -> VAR_113 ) ; for ( VAR_114 = 0 ; VAR_115 < VAR_116 -> VAR_117 ; VAR_118 ++ ) { struct STRUCT_OR_UNION_16 * VAR_119 ; VAR_120 = METHOD_15 ( VAR_121 -> VAR_122 [ VAR_123 ] ) ; VAR_124 = METHOD_16 ( VAR_125 , VAR_126 , VAR_127 , & VAR_128 ) ; VAR_129 -> VAR_130 . VAR_131 . VAR_132 [ VAR_133 ] = VAR_134 ; if ( VAR_135 == VAR_136 ) continue ; VAR_137 = ( struct STRUCT_OR_UNION_17 * ) VAR_138 -> VAR_139 ; if ( VAR_140 != 0 || METHOD_17 ( VAR_141 -> VAR_142 . VAR_143 , VAR_144 , METHOD_18 ( VAR_145 ) ) ) { METHOD_19 ( VAR_146 ) ; VAR_147 -> VAR_148 . VAR_149 . VAR_150 [ VAR_151 ] = VAR_152 ; } } VAR_153 -> VAR_154 = VAR_155 ; } else if ( ! METHOD_20 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 , METHOD_21 ( VAR_160 ) ) ) { struct STRUCT_OR_UNION_18 * VAR_161 = & VAR_162 -> VAR_163 . VAR_164 ; struct STRUCT_OR_UNION_19 * VAR_165 = ( struct STRUCT_OR_UNION_20 * ) & ( VAR_166 -> VAR_167 [ VAR_168 ] ) ; METHOD_22 ( ""ParsingLogicalvolpart%dtype%did=%s\\n"" , VAR_169 , VAR_170 , VAR_171 ) ; VAR_172 -> VAR_173 = VAR_174 ; VAR_175 -> VAR_176 = VAR_177 ; VAR_178 -> VAR_179 = METHOD_23 ( VAR_180 -> VAR_181 ) ; VAR_182 -> VAR_183 = METHOD_24 ( VAR_184 -> VAR_185 ) ; VAR_186 -> VAR_187 = METHOD_25 ( VAR_188 -> VAR_189 ) ; VAR_190 -> VAR_191 = METHOD_26 ( VAR_192 -> VAR_193 ) ; VAR_194 -> VAR_195 = METHOD_27 ( VAR_196 -> VAR_197 ) ; if ( VAR_198 -> VAR_199 & 0x01 ) VAR_200 -> VAR_201 |= VAR_202 ; METHOD_28 ( ""MetadataIdentsuffix=0x%x\\n"" , METHOD_29 ( * ( TYPE_9 * ) VAR_203 -> VAR_204 . VAR_205 ) ) ; METHOD_30 ( ""Metadatapartnum=%d\\n"" , METHOD_31 ( VAR_206 -> VAR_207 ) ) ; METHOD_32 ( ""Metadatapartallocunitsize=%d\\n"" , METHOD_33 ( VAR_208 -> VAR_209 ) ) ; METHOD_34 ( ""Metadatafileloc=%d\\n"" , METHOD_35 ( VAR_210 -> VAR_211 ) ) ; METHOD_36 ( ""Mirrorfileloc=%d\\n"" , METHOD_37 ( VAR_212 -> VAR_213 ) ) ; METHOD_38 ( ""Bitmapfileloc=%d\\n"" , METHOD_39 ( VAR_214 -> VAR_215 ) ) ; METHOD_40 ( ""Flags:%d%d\\n"" , VAR_216 -> VAR_217 , VAR_218 -> VAR_219 ) ; } else { METHOD_41 ( ""Unknownident:%s\\n"" , VAR_220 -> VAR_221 . VAR_222 ) ; continue ; } VAR_223 -> VAR_224 = METHOD_42 ( VAR_225 -> VAR_226 ) ; VAR_227 -> VAR_228 = METHOD_43 ( VAR_229 -> VAR_230 ) ; } METHOD_44 ( ""Partition(%d:%d)type%donvolume%d\\n"" , VAR_231 , VAR_232 -> VAR_233 , VAR_234 , VAR_235 -> VAR_236 ) ; } if ( VAR_237 ) { struct STRUCT_OR_UNION_21 * VAR_238 = ( struct STRUCT_OR_UNION_22 * ) & ( VAR_239 -> VAR_240 [ 0 ] ) ; * VAR_241 = METHOD_45 ( VAR_242 -> VAR_243 ) ; METHOD_46 ( ""FileSetfoundinLogicalVolDescatblock=%d,partition=%d\\n"" , VAR_244 -> VAR_245 , VAR_246 -> VAR_247 ) ; } if ( VAR_248 -> VAR_249 . VAR_250 ) METHOD_47 ( VAR_251 , METHOD_48 ( VAR_252 -> VAR_253 ) ) ; VAR_254 : METHOD_49 ( VAR_255 ) ; return VAR_256 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 ; TYPE_2 VAR_4 , VAR_5 , VAR_6 ; TYPE_3 VAR_7 ; struct STRUCT_OR_UNION_3 * VAR_8 = METHOD_1 ( VAR_9 ) ; struct STRUCT_OR_UNION_4 * VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_5 * VAR_12 ; TYPE_5 VAR_13 = 0 ; VAR_14 = METHOD_2 ( VAR_15 , VAR_16 , VAR_17 , & VAR_18 ) ; if ( ! VAR_19 ) return 1 ; METHOD_3 ( VAR_20 != VAR_21 ) ; VAR_22 = ( struct STRUCT_OR_UNION_6 * ) VAR_23 -> VAR_24 ; VAR_25 = METHOD_4 ( VAR_26 , METHOD_5 ( VAR_27 -> VAR_28 ) ) ; if ( VAR_29 ) goto VAR_30 ; for ( VAR_31 = 0 , VAR_32 = 0 ; VAR_33 < VAR_34 -> VAR_35 && VAR_36 < METHOD_6 ( VAR_37 -> VAR_38 ) ; VAR_39 ++ , VAR_40 += VAR_41 -> VAR_42 ) { struct STRUCT_OR_UNION_7 * VAR_43 = & VAR_44 -> VAR_45 [ VAR_46 ] ; VAR_47 = ( struct STRUCT_OR_UNION_8 * ) & ( VAR_48 -> VAR_49 [ VAR_50 ] ) ; VAR_51 = VAR_52 -> VAR_53 ; if ( VAR_54 == 1 ) { struct STRUCT_OR_UNION_9 * VAR_55 = ( struct STRUCT_OR_UNION_10 * ) VAR_56 ; VAR_57 -> VAR_58 = VAR_59 ; VAR_60 -> VAR_61 = METHOD_7 ( VAR_62 -> VAR_63 ) ; VAR_64 -> VAR_65 = METHOD_8 ( VAR_66 -> VAR_67 ) ; VAR_68 -> VAR_69 = VAR_70 ; } else if ( VAR_71 == 2 ) { struct STRUCT_OR_UNION_11 * VAR_72 = ( struct STRUCT_OR_UNION_12 * ) VAR_73 ; if ( ! METHOD_9 ( VAR_74 -> VAR_75 . VAR_76 , VAR_77 , METHOD_10 ( VAR_78 ) ) ) { TYPE_6 VAR_79 = METHOD_11 ( ( ( TYPE_7 * ) VAR_80 -> VAR_81 . VAR_82 ) [ 0 ] ) ; if ( VAR_83 < 0x0200 ) { VAR_84 -> VAR_85 = VAR_86 ; VAR_87 -> VAR_88 = VAR_89 ; } else { VAR_90 -> VAR_91 = VAR_92 ; VAR_93 -> VAR_94 = VAR_95 ; } } else if ( ! METHOD_12 ( VAR_96 -> VAR_97 . VAR_98 , VAR_99 , METHOD_13 ( VAR_100 ) ) ) { TYPE_8 VAR_101 ; struct STRUCT_OR_UNION_13 * VAR_102 ; struct STRUCT_OR_UNION_14 * VAR_103 = ( struct STRUCT_OR_UNION_15 * ) VAR_104 ; VAR_105 -> VAR_106 = VAR_107 ; VAR_108 -> VAR_109 . VAR_110 . VAR_111 = METHOD_14 ( VAR_112 -> VAR_113 ) ; for ( VAR_114 = 0 ; VAR_115 < VAR_116 -> VAR_117 ; VAR_118 ++ ) { struct STRUCT_OR_UNION_16 * VAR_119 ; VAR_120 = METHOD_15 ( VAR_121 -> VAR_122 [ VAR_123 ] ) ; VAR_124 = METHOD_16 ( VAR_125 , VAR_126 , VAR_127 , & VAR_128 ) ; VAR_129 -> VAR_130 . VAR_131 . VAR_132 [ VAR_133 ] = VAR_134 ; if ( VAR_135 == VAR_136 ) continue ; VAR_137 = ( struct STRUCT_OR_UNION_17 * ) VAR_138 -> VAR_139 ; VAR_257 = METHOD_39 ( VAR_252 -> VAR_38 ) ; if ( sizeof ( * VAR_252 ) + VAR_257 > VAR_251 -> VAR_258 ) { METHOD_50 ( VAR_251 , ""errorloadinglogicalvolumedescriptor:"" ""Partitiontabletoolong(%u>%lu)\\n"" , VAR_257 , VAR_251 -> VAR_258 - sizeof ( * VAR_252 ) ) ; goto VAR_254 ; } if ( VAR_140 != 0 || METHOD_17 ( VAR_141 -> VAR_142 . VAR_143 , VAR_144 , METHOD_18 ( VAR_145 ) ) ) { METHOD_19 ( VAR_146 ) ; VAR_147 -> VAR_148 . VAR_149 . VAR_150 [ VAR_151 ] = VAR_152 ; } } VAR_153 -> VAR_154 = VAR_155 ; } else if ( ! METHOD_20 ( VAR_156 -> VAR_157 . VAR_158 , VAR_159 , METHOD_21 ( VAR_160 ) ) ) { struct STRUCT_OR_UNION_18 * VAR_161 = & VAR_162 -> VAR_163 . VAR_164 ; struct STRUCT_OR_UNION_19 * VAR_165 = ( struct STRUCT_OR_UNION_20 * ) & ( VAR_166 -> VAR_167 [ VAR_168 ] ) ; METHOD_22 ( ""ParsingLogicalvolpart%dtype%did=%s\\n"" , VAR_169 , VAR_170 , VAR_171 ) ; VAR_172 -> VAR_173 = VAR_174 ; VAR_175 -> VAR_176 = VAR_177 ; VAR_178 -> VAR_179 = METHOD_23 ( VAR_180 -> VAR_181 ) ; VAR_182 -> VAR_183 = METHOD_24 ( VAR_184 -> VAR_185 ) ; VAR_186 -> VAR_187 = METHOD_25 ( VAR_188 -> VAR_189 ) ; VAR_190 -> VAR_191 = METHOD_26 ( VAR_192 -> VAR_193 ) ; VAR_194 -> VAR_195 = METHOD_27 ( VAR_196 -> VAR_197 ) ; if ( VAR_198 -> VAR_199 & 0x01 ) VAR_200 -> VAR_201 |= VAR_202 ; METHOD_28 ( ""MetadataIdentsuffix=0x%x\\n"" , METHOD_29 ( * ( TYPE_9 * ) VAR_203 -> VAR_204 . VAR_205 ) ) ; METHOD_30 ( ""Metadatapartnum=%d\\n"" , METHOD_31 ( VAR_206 -> VAR_207 ) ) ; METHOD_32 ( ""Metadatapartallocunitsize=%d\\n"" , METHOD_33 ( VAR_208 -> VAR_209 ) ) ; METHOD_34 ( ""Metadatafileloc=%d\\n"" , METHOD_35 ( VAR_210 -> VAR_211 ) ) ; METHOD_36 ( ""Mirrorfileloc=%d\\n"" , METHOD_37 ( VAR_212 -> VAR_213 ) ) ; METHOD_38 ( ""Bitmapfileloc=%d\\n"" , METHOD_39 ( VAR_214 -> VAR_215 ) ) ; METHOD_40 ( ""Flags:%d%d\\n"" , VAR_216 -> VAR_217 , VAR_218 -> VAR_219 ) ; } else { METHOD_41 ( ""Unknownident:%s\\n"" , VAR_220 -> VAR_221 . VAR_222 ) ; continue ; } VAR_223 -> VAR_224 = METHOD_42 ( VAR_225 -> VAR_226 ) ; VAR_227 -> VAR_228 = METHOD_43 ( VAR_229 -> VAR_230 ) ; } METHOD_44 ( ""Partition(%d:%d)type%donvolume%d\\n"" , VAR_231 , VAR_232 -> VAR_233 , VAR_234 , VAR_235 -> VAR_236 ) ; } if ( VAR_237 ) { struct STRUCT_OR_UNION_21 * VAR_238 = ( struct STRUCT_OR_UNION_22 * ) & ( VAR_239 -> VAR_240 [ 0 ] ) ; * VAR_241 = METHOD_45 ( VAR_242 -> VAR_243 ) ; METHOD_46 ( ""FileSetfoundinLogicalVolDescatblock=%d,partition=%d\\n"" , VAR_244 -> VAR_245 , VAR_246 -> VAR_247 ) ; } if ( VAR_248 -> VAR_249 . VAR_250 ) METHOD_47 ( VAR_251 , METHOD_48 ( VAR_252 -> VAR_253 ) ) ; VAR_254 : METHOD_49 ( VAR_255 ) ; return VAR_256 ; }",670
671,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { const unsigned TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 VAR_4 = VAR_5 -> VAR_6 ; TYPE_4 VAR_7 = VAR_8 -> VAR_9 ;  TYPE_5 VAR_10 = VAR_11 - 8 - ( VAR_12 + 8 ) ;  TYPE_6 VAR_13 = VAR_14 -> VAR_15 - VAR_16 ; TYPE_7 VAR_17 = VAR_18 * VAR_19 ; TYPE_8 VAR_20 = ( TYPE_9 ) ( VAR_21 + VAR_22 - VAR_23 ) ; TYPE_10 VAR_24 = 0 ; unsigned TYPE_11 VAR_25 [ sizeof ( TYPE_12 ) + 1 ] ; if ( VAR_26 -> METHOD_1 ) {  TYPE_13 VAR_27 = VAR_28 > sizeof ( VAR_29 ) ? sizeof ( VAR_30 ) : VAR_31 ;  VAR_32 -> METHOD_2 ( VAR_33 -> VAR_34 , VAR_35 , VAR_36 , ( TYPE_14 ) VAR_37 ) ; VAR_38 = VAR_39 ; } if ( VAR_40 >= 0 ) { VAR_41 += VAR_42 ; VAR_43 = VAR_44 ; } if ( VAR_45 < 0 || VAR_46 ) { while ( VAR_47 >= VAR_48 ) { VAR_49 += VAR_50 ; VAR_51 |= ( TYPE_15 ) * VAR_52 << VAR_53 ; ++ VAR_54 ; ++ VAR_55 -> VAR_56 ; VAR_57 -= VAR_58 ; } } VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { const unsigned TYPE_2 * VAR_1 = VAR_2 -> VAR_3 ; TYPE_3 VAR_4 = VAR_5 -> VAR_6 ; TYPE_4 VAR_7 = VAR_8 -> VAR_9 ; TYPE_5 VAR_10 = VAR_11 - 8 - ( VAR_12 + 8 ) ; TYPE_6 VAR_13 = VAR_14 -> VAR_15 - VAR_16 ; TYPE_7 VAR_17 = VAR_18 * VAR_19 ; TYPE_8 VAR_20 = ( TYPE_9 ) ( VAR_21 + VAR_22 - VAR_23 ) ; TYPE_10 VAR_24 = 0 ; unsigned TYPE_11 VAR_25 [ sizeof ( TYPE_12 ) + 1 ] ; if ( VAR_26 -> METHOD_1 ) { TYPE_13 VAR_27 = VAR_28 > sizeof ( VAR_29 ) ? sizeof ( VAR_30 ) : VAR_31 ; VAR_32 -> METHOD_2 ( VAR_33 -> VAR_34 , VAR_35 , VAR_36 , ( TYPE_14 ) VAR_37 ) ; VAR_38 = VAR_39 ; } if ( VAR_40 >= 0 ) { VAR_41 += VAR_42 ; VAR_43 = VAR_44 ; } if ( VAR_45 < 0 || VAR_46 ) { while ( VAR_47 >= VAR_48 ) { VAR_49 += VAR_50 ; VAR_51 |= ( TYPE_15 ) * VAR_52 << VAR_53 ; ++ VAR_54 ; ++ VAR_55 -> VAR_56 ; VAR_57 -= VAR_58 ; } } VAR_59 -> VAR_60 = VAR_61 ; VAR_62 -> VAR_63 = VAR_64 ; }",671
672,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; for ( VAR_11 = 0 ; VAR_12 < VAR_13 -> VAR_14 ; VAR_15 ++ ) { unsigned VAR_16 ; VAR_17 = VAR_18 = VAR_19 ; VAR_20 = VAR_21 = VAR_22 ; VAR_23 = VAR_24 = VAR_25 ; VAR_26 = VAR_27 -> VAR_28 + VAR_29 ; if ( VAR_30 >= 0 && VAR_31 != VAR_32 -> VAR_33 . VAR_34 ) continue ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 . VAR_39 ; VAR_40 ++ ) { struct STRUCT_OR_UNION_7 * VAR_41 ; TYPE_2 VAR_42 ; VAR_43 = VAR_44 -> VAR_45 + VAR_46 ; VAR_47 = METHOD_1 ( & VAR_48 -> VAR_49 ) ; switch ( METHOD_2 ( & VAR_50 -> VAR_51 ) ) { case VAR_52 : METHOD_3 ( VAR_53 , & VAR_54 , & VAR_55 , VAR_56 ) ; continue ; case VAR_57 : if ( VAR_58 -> VAR_59 -> VAR_60 ) METHOD_4 ( VAR_61 , & VAR_62 , & VAR_63 , VAR_64 ) ; continue ; case VAR_65 : if ( VAR_66 -> VAR_67 -> VAR_68 ) METHOD_5 ( VAR_69 , & VAR_70 , & VAR_71 , VAR_72 ) ; default : continue ; } } if ( ( VAR_73 && VAR_74 ) || VAR_75 || VAR_76 || VAR_77 || VAR_78 ) goto VAR_79 ; } return - VAR_80 ; VAR_81 : VAR_82 = METHOD_6 ( VAR_83 ) ; VAR_84 -> VAR_85 -> VAR_86 = VAR_87 -> VAR_88 . VAR_89 ; if ( VAR_90 -> VAR_91 . VAR_92 != 0 ) { VAR_93 = METHOD_7 ( VAR_94 , VAR_95 -> VAR_96 . VAR_97 , VAR_98 -> VAR_99 . VAR_100 ) ; if ( VAR_101 < 0 ) return VAR_102 ; }  if ( VAR_103 ) {  VAR_104 -> VAR_105 = METHOD_8 ( VAR_106 , VAR_107 -> VAR_108 . VAR_109 & VAR_110 ) ;  VAR_111 -> VAR_112 = METHOD_9 ( VAR_113 ,  VAR_114 -> VAR_115 . VAR_116 & VAR_117 ) ;  }  if ( VAR_118 ) { VAR_119 -> VAR_120 = & VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = METHOD_10 ( VAR_125 , VAR_126 -> VAR_127 . VAR_128 & VAR_129 ) ; } if ( VAR_130 ) { VAR_131 -> VAR_132 = & VAR_133 -> VAR_134 ; VAR_135 -> VAR_136 = METHOD_11 ( VAR_137 , VAR_138 -> VAR_139 . VAR_140 & VAR_141 ) ; } if ( VAR_142 ) { VAR_143 -> VAR_144 = & VAR_145 -> VAR_146 ; VAR_147 -> VAR_148 = METHOD_12 ( VAR_149 , VAR_150 -> VAR_151 . VAR_152 & VAR_153 ) ; } if ( VAR_154 ) { VAR_155 -> VAR_156 = & VAR_157 -> VAR_158 ; VAR_159 -> VAR_160 = METHOD_13 ( VAR_161 , VAR_162 -> VAR_163 . VAR_164 & VAR_165 ) ; } return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { TYPE_1 VAR_2 ; struct STRUCT_OR_UNION_2 * VAR_3 ; struct STRUCT_OR_UNION_3 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_4 * VAR_6 , * VAR_7 ; struct STRUCT_OR_UNION_5 * VAR_8 , * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; for ( VAR_11 = 0 ; VAR_12 < VAR_13 -> VAR_14 ; VAR_15 ++ ) { unsigned VAR_16 ; VAR_17 = VAR_18 = VAR_19 ; VAR_20 = VAR_21 = VAR_22 ; VAR_23 = VAR_24 = VAR_25 ; VAR_26 = VAR_27 -> VAR_28 + VAR_29 ; if ( VAR_30 >= 0 && VAR_31 != VAR_32 -> VAR_33 . VAR_34 ) continue ; for ( VAR_35 = 0 ; VAR_36 < VAR_37 -> VAR_38 . VAR_39 ; VAR_40 ++ ) { struct STRUCT_OR_UNION_7 * VAR_41 ; TYPE_2 VAR_42 ; VAR_43 = VAR_44 -> VAR_45 + VAR_46 ; VAR_47 = METHOD_1 ( & VAR_48 -> VAR_49 ) ; switch ( METHOD_2 ( & VAR_50 -> VAR_51 ) ) { case VAR_52 : METHOD_3 ( VAR_53 , & VAR_54 , & VAR_55 , VAR_56 ) ; continue ; case VAR_57 : if ( VAR_58 -> VAR_59 -> VAR_60 ) METHOD_4 ( VAR_61 , & VAR_62 , & VAR_63 , VAR_64 ) ; continue ; case VAR_65 : if ( VAR_66 -> VAR_67 -> VAR_68 ) METHOD_5 ( VAR_69 , & VAR_70 , & VAR_71 , VAR_72 ) ; default : continue ; } } if ( ( VAR_73 && VAR_74 ) || VAR_75 || VAR_76 || VAR_77 || VAR_78 ) goto VAR_79 ; } return - VAR_80 ; VAR_81 : VAR_82 = METHOD_6 ( VAR_83 ) ; VAR_84 -> VAR_85 -> VAR_86 = VAR_87 -> VAR_88 . VAR_89 ; if ( VAR_90 -> VAR_91 . VAR_92 != 0 ) { VAR_93 = METHOD_7 ( VAR_94 , VAR_95 -> VAR_96 . VAR_97 , VAR_98 -> VAR_99 . VAR_100 ) ; if ( VAR_101 < 0 ) return VAR_102 ; } if ( VAR_103 ) { VAR_104 -> VAR_105 = METHOD_8 ( VAR_106 , VAR_107 -> VAR_108 . VAR_109 & VAR_110 ) ; VAR_111 -> VAR_112 = METHOD_9 ( VAR_113 , VAR_114 -> VAR_115 . VAR_116 & VAR_117 ) ; } if ( VAR_118 ) { VAR_119 -> VAR_120 = & VAR_121 -> VAR_122 ; VAR_123 -> VAR_124 = METHOD_10 ( VAR_125 , VAR_126 -> VAR_127 . VAR_128 & VAR_129 ) ; } if ( VAR_130 ) { VAR_131 -> VAR_132 = & VAR_133 -> VAR_134 ; VAR_135 -> VAR_136 = METHOD_11 ( VAR_137 , VAR_138 -> VAR_139 . VAR_140 & VAR_141 ) ; } if ( VAR_142 ) { VAR_143 -> VAR_144 = & VAR_145 -> VAR_146 ; VAR_147 -> VAR_148 = METHOD_12 ( VAR_149 , VAR_150 -> VAR_151 . VAR_152 & VAR_153 ) ; } if ( VAR_154 ) { VAR_155 -> VAR_156 = & VAR_157 -> VAR_158 ; VAR_159 -> VAR_160 = METHOD_13 ( VAR_161 , VAR_162 -> VAR_163 . VAR_164 & VAR_165 ) ; if ( VAR_114 ) } return 0 ; }",672
673,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 , VAR_7 ; TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 ; for ( ; ; ) { VAR_10 = METHOD_1 ( & VAR_11 -> VAR_12 ) ; if ( VAR_13 <= 0 ) { if ( VAR_14 -> VAR_15 == VAR_16 && VAR_17 -> VAR_18 == VAR_19 ) { METHOD_2 ( VAR_20 , VAR_21 ) ; return 0 ; } if ( VAR_22 && VAR_23 -> VAR_24 == VAR_25 && VAR_26 == 0 ) { if ( ! ( VAR_27 -> VAR_28 & VAR_29 ) ) return 0 ; else goto VAR_30 ; } METHOD_3 ( VAR_31 , VAR_32 , ""%dbytesleft\\n"" , VAR_33 ) ; if ( VAR_34 -> VAR_35 & VAR_36 && VAR_37 -> VAR_38 <= VAR_39 ) goto VAR_40 ; VAR_41 = VAR_42 ; goto VAR_43 ; } VAR_44 = METHOD_4 ( & VAR_45 -> VAR_46 ) ; if ( VAR_47 > 0x7fffffff || VAR_48 > METHOD_5 ( & VAR_49 -> VAR_50 ) ) { METHOD_6 ( VAR_51 , VAR_52 , ""chunktoobig\\n"" ) ; VAR_53 = VAR_54 ; goto VAR_55 ; } VAR_56 = METHOD_7 ( & VAR_57 -> VAR_58 ) ; if ( VAR_59 -> VAR_60 & VAR_61 ) METHOD_8 ( VAR_62 , VAR_63 , ""png:tag=%c%c%c%clength=%u\\n"" , ( VAR_64 & 0xff ) , ( ( VAR_65 >> 8 ) & 0xff ) , ( ( VAR_66 >> 16 ) & 0xff ) , ( ( VAR_67 >> 24 ) & 0xff ) , VAR_68 ) ; if ( VAR_69 -> VAR_70 == VAR_71 && VAR_72 -> VAR_73 == VAR_74 ) { switch ( VAR_75 ) { case METHOD_9 ( 'I' , 'H' , 'D' , 'R' ) : case METHOD_10 ( 'p' , 'H' , 'Y' , 's' ) : case METHOD_11 ( 't' , 'E' , 'X' , 't' ) : case METHOD_12 ( 'I' , 'D' , 'A' , 'T' ) : case METHOD_13 ( 't' , 'R' , 'N' , 'S' ) : break ; default : goto VAR_76 ; } } switch ( VAR_77 ) { case METHOD_14 ( 'I' , 'H' , 'D' , 'R' ) : if ( ( VAR_78 = METHOD_15 ( VAR_79 , VAR_80 , VAR_81 ) ) < 0 ) goto VAR_82 ; break ; case METHOD_16 ( 'p' , 'H' , 'Y' , 's' ) : if ( ( VAR_83 = METHOD_17 ( VAR_84 , VAR_85 ) ) < 0 ) goto VAR_86 ; break ; case METHOD_18 ( 'f' , 'c' , 'T' , 'L' ) : if ( ! VAR_87 || VAR_88 -> VAR_89 != VAR_90 ) goto VAR_91 ; if ( ( VAR_92 = METHOD_19 ( VAR_93 , VAR_94 , VAR_95 ) ) < 0 ) goto VAR_96 ; VAR_97 = 1 ; break ; case METHOD_20 ( 'f' , 'd' , 'A' , 'T' ) : if ( ! VAR_98 || VAR_99 -> VAR_100 != VAR_101 ) goto VAR_102 ; if ( ! VAR_103 ) { VAR_104 = VAR_105 ; goto VAR_106 ; } METHOD_21 ( & VAR_107 -> VAR_108 ) ; VAR_109 -= 4 ; case METHOD_22 ( 'I' , 'D' , 'A' , 'T' ) : if ( VAR_110 && VAR_111 -> VAR_112 == VAR_113 && ! VAR_114 ) goto VAR_115 ; if ( ( VAR_116 = METHOD_23 ( VAR_117 , VAR_118 , VAR_119 , VAR_120 ) ) < 0 ) goto VAR_121 ; break ; case METHOD_24 ( 'P' , 'L' , 'T' , 'E' ) : if ( METHOD_25 ( VAR_122 , VAR_123 , VAR_124 ) < 0 ) goto VAR_125 ; break ; case METHOD_26 ( 't' , 'R' , 'N' , 'S' ) : if ( METHOD_27 ( VAR_126 , VAR_127 , VAR_128 ) < 0 ) goto VAR_129 ; break ; case METHOD_28 ( 't' , 'E' , 'X' , 't' ) : if ( METHOD_29 ( VAR_130 , VAR_131 , 0 , & VAR_132 ) < 0 ) METHOD_30 ( VAR_133 , VAR_134 , ""BrokentEXtchunk\\n"" ) ; METHOD_31 ( & VAR_135 -> VAR_136 , VAR_137 + 4 ) ; break ; case METHOD_32 ( 'z' , 'T' , 'X' , 't' ) : if ( METHOD_33 ( VAR_138 , VAR_139 , 1 , & VAR_140 ) < 0 ) METHOD_34 ( VAR_141 , VAR_142 , ""BrokenzTXtchunk\\n"" ) ; METHOD_35 ( & VAR_143 -> VAR_144 , VAR_145 + 4 ) ; break ; case METHOD_36 ( 's' , 'T' , 'E' , 'R' ) : { TYPE_9 VAR_146 = METHOD_37 ( & VAR_147 -> VAR_148 ) ; TYPE_10 * VAR_149 = METHOD_38 ( VAR_150 ) ; if ( ! VAR_151 ) goto VAR_152 ; if ( VAR_153 == 0 || VAR_154 == 1 ) { VAR_155 -> VAR_156 = VAR_157 ; VAR_158 -> VAR_159 = VAR_160 ? 0 : VAR_161 ; } else { METHOD_39 ( VAR_162 , VAR_163 , ""UnknownvalueinsTERchunk(%d)\\n"" , VAR_164 ) ; } METHOD_40 ( & VAR_165 -> VAR_166 , 4 ) ; break ; } case METHOD_41 ( 'I' , 'E' , 'N' , 'D' ) : if ( ! ( VAR_167 -> VAR_168 & VAR_169 ) ) METHOD_42 ( VAR_170 , VAR_171 , ""IENDwithoutallimage\\n"" ) ; if ( ! ( VAR_172 -> VAR_173 & ( VAR_174 | VAR_175 ) ) ) { VAR_176 = VAR_177 ; goto VAR_178 ; } METHOD_43 ( & VAR_179 -> VAR_180 , 4 ) ; goto VAR_181 ; default : VAR_182 : METHOD_44 ( & VAR_183 -> VAR_184 , VAR_185 + 4 ) ; break ; } } VAR_186 : if ( VAR_187 -> VAR_188 == VAR_189 && VAR_190 -> VAR_191 == VAR_192 ) { METHOD_45 ( VAR_193 , VAR_194 ) ; return 0 ; } if ( VAR_195 -> VAR_196 <= 4 ) METHOD_46 ( VAR_197 , VAR_198 ) ; if ( VAR_199 -> VAR_200 && VAR_201 -> VAR_202 != VAR_203 ) { TYPE_11 VAR_204 = VAR_205 -> VAR_206 > 8 ? 2 : 1 ; TYPE_12 VAR_207 = VAR_208 -> VAR_209 - VAR_210 ; unsigned VAR_211 , VAR_212 ;  for ( VAR_213 = 0 ; VAR_214 < VAR_215 -> VAR_216 ; ++ VAR_217 ) {  TYPE_13 * VAR_218 = & VAR_219 -> VAR_220 [ VAR_221 -> VAR_222 * VAR_223 ] ; for ( VAR_224 = VAR_225 -> VAR_226 ; VAR_227 > 0 ; -- VAR_228 ) { TYPE_14 * VAR_229 = & VAR_230 [ VAR_231 -> VAR_232 * ( VAR_233 - 1 ) ] ; METHOD_47 ( VAR_234 , & VAR_235 [ VAR_236 * ( VAR_237 - 1 ) ] , VAR_238 ) ; if ( ! METHOD_48 ( VAR_239 , VAR_240 -> VAR_241 , VAR_242 ) ) { METHOD_49 ( & VAR_243 [ VAR_244 ] , 0 , VAR_245 ) ; } else { METHOD_50 ( & VAR_246 [ VAR_247 ] , 0xff , VAR_248 ) ; } } } } if ( VAR_249 -> VAR_250 . VAR_251 -> VAR_252 [ 0 ] ) { if ( ! ( VAR_253 -> VAR_254 & VAR_255 ) && VAR_256 -> VAR_257 != METHOD_51 ( ""MPNG"" ) && VAR_258 -> VAR_259 . VAR_260 -> VAR_261 == VAR_262 -> VAR_263 && VAR_264 -> VAR_265 . VAR_266 -> VAR_267 == VAR_268 -> VAR_269 && VAR_270 -> VAR_271 . VAR_272 -> VAR_273 == VAR_274 -> VAR_275 ) { if ( VAR_276 && VAR_277 -> VAR_278 != VAR_279 ) METHOD_52 ( VAR_280 , VAR_281 ) ; else if ( VAR_282 && VAR_283 -> VAR_284 == VAR_285 && ( VAR_286 = METHOD_53 ( VAR_287 , VAR_288 , VAR_289 ) ) < 0 ) goto VAR_290 ; } } METHOD_54 ( & VAR_291 -> VAR_292 , VAR_293 , 0 ) ; METHOD_55 ( & VAR_294 -> VAR_295 , VAR_296 , 0 ) ; METHOD_56 ( VAR_297 , VAR_298 ) ; VAR_299 = VAR_300 ; return 0 ; VAR_301 : METHOD_57 ( & VAR_302 ) ; METHOD_58 ( & VAR_303 -> VAR_304 , VAR_305 , 0 ) ; METHOD_59 ( & VAR_306 -> VAR_307 , VAR_308 , 0 ) ; return VAR_309 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 ) { TYPE_5 * VAR_4 = VAR_5 ; TYPE_6 VAR_6 , VAR_7 ; TYPE_7 VAR_8 = 0 ; TYPE_8 VAR_9 ; for ( ; ; ) { VAR_10 = METHOD_1 ( & VAR_11 -> VAR_12 ) ; if ( VAR_13 <= 0 ) { if ( VAR_14 -> VAR_15 == VAR_16 && VAR_17 -> VAR_18 == VAR_19 ) { METHOD_2 ( VAR_20 , VAR_21 ) ; return 0 ; } if ( VAR_22 && VAR_23 -> VAR_24 == VAR_25 && VAR_26 == 0 ) { if ( ! ( VAR_27 -> VAR_28 & VAR_29 ) ) return 0 ; else goto VAR_30 ; } METHOD_3 ( VAR_31 , VAR_32 , ""%dbytesleft\\n"" , VAR_33 ) ; if ( VAR_34 -> VAR_35 & VAR_36 && VAR_37 -> VAR_38 <= VAR_39 ) goto VAR_40 ; VAR_41 = VAR_42 ; goto VAR_43 ; } VAR_44 = METHOD_4 ( & VAR_45 -> VAR_46 ) ; if ( VAR_47 > 0x7fffffff || VAR_48 > METHOD_5 ( & VAR_49 -> VAR_50 ) ) { METHOD_6 ( VAR_51 , VAR_52 , ""chunktoobig\\n"" ) ; VAR_53 = VAR_54 ; goto VAR_55 ; } VAR_56 = METHOD_7 ( & VAR_57 -> VAR_58 ) ; if ( VAR_59 -> VAR_60 & VAR_61 ) METHOD_8 ( VAR_62 , VAR_63 , ""png:tag=%c%c%c%clength=%u\\n"" , ( VAR_64 & 0xff ) , ( ( VAR_65 >> 8 ) & 0xff ) , ( ( VAR_66 >> 16 ) & 0xff ) , ( ( VAR_67 >> 24 ) & 0xff ) , VAR_68 ) ; if ( VAR_69 -> VAR_70 == VAR_71 && VAR_72 -> VAR_73 == VAR_74 ) { switch ( VAR_75 ) { case METHOD_9 ( 'I' , 'H' , 'D' , 'R' ) : case METHOD_10 ( 'p' , 'H' , 'Y' , 's' ) : case METHOD_11 ( 't' , 'E' , 'X' , 't' ) : case METHOD_12 ( 'I' , 'D' , 'A' , 'T' ) : case METHOD_13 ( 't' , 'R' , 'N' , 'S' ) : break ; default : goto VAR_76 ; } } switch ( VAR_77 ) { case METHOD_14 ( 'I' , 'H' , 'D' , 'R' ) : if ( ( VAR_78 = METHOD_15 ( VAR_79 , VAR_80 , VAR_81 ) ) < 0 ) goto VAR_82 ; break ; case METHOD_16 ( 'p' , 'H' , 'Y' , 's' ) : if ( ( VAR_83 = METHOD_17 ( VAR_84 , VAR_85 ) ) < 0 ) goto VAR_86 ; break ; case METHOD_18 ( 'f' , 'c' , 'T' , 'L' ) : if ( ! VAR_87 || VAR_88 -> VAR_89 != VAR_90 ) goto VAR_91 ; if ( ( VAR_92 = METHOD_19 ( VAR_93 , VAR_94 , VAR_95 ) ) < 0 ) goto VAR_96 ; VAR_97 = 1 ; break ; case METHOD_20 ( 'f' , 'd' , 'A' , 'T' ) : if ( ! VAR_98 || VAR_99 -> VAR_100 != VAR_101 ) goto VAR_102 ; if ( ! VAR_103 ) { VAR_104 = VAR_105 ; goto VAR_106 ; } METHOD_21 ( & VAR_107 -> VAR_108 ) ; VAR_109 -= 4 ; case METHOD_22 ( 'I' , 'D' , 'A' , 'T' ) : if ( VAR_110 && VAR_111 -> VAR_112 == VAR_113 && ! VAR_114 ) goto VAR_115 ; if ( ( VAR_116 = METHOD_23 ( VAR_117 , VAR_118 , VAR_119 , VAR_120 ) ) < 0 ) goto VAR_121 ; break ; case METHOD_24 ( 'P' , 'L' , 'T' , 'E' ) : if ( METHOD_25 ( VAR_122 , VAR_123 , VAR_124 ) < 0 ) goto VAR_125 ; break ; case METHOD_26 ( 't' , 'R' , 'N' , 'S' ) : if ( METHOD_27 ( VAR_126 , VAR_127 , VAR_128 ) < 0 ) goto VAR_129 ; break ; case METHOD_28 ( 't' , 'E' , 'X' , 't' ) : if ( METHOD_29 ( VAR_130 , VAR_131 , 0 , & VAR_132 ) < 0 ) METHOD_30 ( VAR_133 , VAR_134 , ""BrokentEXtchunk\\n"" ) ; METHOD_31 ( & VAR_135 -> VAR_136 , VAR_137 + 4 ) ; break ; case METHOD_32 ( 'z' , 'T' , 'X' , 't' ) : if ( METHOD_33 ( VAR_138 , VAR_139 , 1 , & VAR_140 ) < 0 ) METHOD_34 ( VAR_141 , VAR_142 , ""BrokenzTXtchunk\\n"" ) ; METHOD_35 ( & VAR_143 -> VAR_144 , VAR_145 + 4 ) ; break ; case METHOD_36 ( 's' , 'T' , 'E' , 'R' ) : { TYPE_9 VAR_146 = METHOD_37 ( & VAR_147 -> VAR_148 ) ; TYPE_10 * VAR_149 = METHOD_38 ( VAR_150 ) ; if ( ! VAR_151 ) goto VAR_152 ; if ( VAR_153 == 0 || VAR_154 == 1 ) { VAR_155 -> VAR_156 = VAR_157 ; VAR_158 -> VAR_159 = VAR_160 ? 0 : VAR_161 ; } else { METHOD_39 ( VAR_162 , VAR_163 , ""UnknownvalueinsTERchunk(%d)\\n"" , VAR_164 ) ; } METHOD_40 ( & VAR_165 -> VAR_166 , 4 ) ; break ; } case METHOD_41 ( 'I' , 'E' , 'N' , 'D' ) : if ( ! ( VAR_167 -> VAR_168 & VAR_169 ) ) METHOD_42 ( VAR_170 , VAR_171 , ""IENDwithoutallimage\\n"" ) ; if ( ! ( VAR_172 -> VAR_173 & ( VAR_174 | VAR_175 ) ) ) { VAR_176 = VAR_177 ; goto VAR_178 ; } METHOD_43 ( & VAR_179 -> VAR_180 , 4 ) ; goto VAR_181 ; default : VAR_182 : METHOD_44 ( & VAR_183 -> VAR_184 , VAR_185 + 4 ) ; break ; } } VAR_186 : if ( VAR_187 -> VAR_188 == VAR_189 && VAR_190 -> VAR_191 == VAR_192 ) { METHOD_45 ( VAR_193 , VAR_194 ) ; return 0 ; } if ( VAR_195 -> VAR_196 <= 4 ) METHOD_46 ( VAR_197 , VAR_198 ) ; if ( VAR_199 -> VAR_200 && VAR_201 -> VAR_202 != VAR_203 ) { TYPE_11 VAR_204 = VAR_205 -> VAR_206 > 8 ? 2 : 1 ; TYPE_12 VAR_207 = VAR_208 -> VAR_209 - VAR_210 ; unsigned VAR_211 , VAR_212 ; for ( VAR_213 = 0 ; VAR_214 < VAR_215 -> VAR_216 ; ++ VAR_217 ) { TYPE_13 * VAR_218 = & VAR_219 -> VAR_220 [ VAR_221 -> VAR_222 * VAR_223 ] ; for ( VAR_224 = VAR_225 -> VAR_226 ; VAR_227 > 0 ; -- VAR_228 ) { TYPE_14 * VAR_229 = & VAR_230 [ VAR_231 -> VAR_232 * ( VAR_233 - 1 ) ] ; METHOD_47 ( VAR_234 , & VAR_235 [ VAR_236 * ( VAR_237 - 1 ) ] , VAR_238 ) ; if ( ! METHOD_48 ( VAR_239 , VAR_240 -> VAR_241 , VAR_242 ) ) { METHOD_49 ( & VAR_243 [ VAR_244 ] , 0 , VAR_245 ) ; } else { METHOD_50 ( & VAR_246 [ VAR_247 ] , 0xff , VAR_248 ) ; } } } } if ( VAR_249 -> VAR_250 . VAR_251 -> VAR_252 [ 0 ] ) { if ( ! ( VAR_253 -> VAR_254 & VAR_255 ) && VAR_256 -> VAR_257 != METHOD_51 ( ""MPNG"" ) && VAR_258 -> VAR_259 . VAR_260 -> VAR_261 == VAR_262 -> VAR_263 && VAR_264 -> VAR_265 . VAR_266 -> VAR_267 == VAR_268 -> VAR_269 && VAR_270 -> VAR_271 . VAR_272 -> VAR_273 == VAR_274 -> VAR_275 ) { if ( VAR_276 && VAR_277 -> VAR_278 != VAR_279 ) METHOD_52 ( VAR_280 , VAR_281 ) ; else if ( VAR_282 && VAR_283 -> VAR_284 == VAR_285 && ( VAR_286 = METHOD_53 ( VAR_287 , VAR_288 , VAR_289 ) ) < 0 ) goto VAR_290 ; } } METHOD_54 ( & VAR_291 -> VAR_292 , VAR_293 , 0 ) ; METHOD_55 ( & VAR_294 -> VAR_295 , VAR_296 , 0 ) ; METHOD_56 ( VAR_297 , VAR_298 ) ; VAR_299 = VAR_300 ; return 0 ; VAR_301 : METHOD_57 ( & VAR_302 ) ; METHOD_58 ( & VAR_303 -> VAR_304 , VAR_305 , 0 ) ; METHOD_59 ( & VAR_306 -> VAR_307 , VAR_308 , 0 ) ; return VAR_309 ; }",673
674," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 )  { struct STRUCT_OR_UNION_2 * VAR_1 ; METHOD_1 ( ) ; VAR_2 = METHOD_2 ( METHOD_3 ( STRUCT_OR_UNION_3 ) -> VAR_3 ) ;  if ( VAR_4 == VAR_5 || ( VAR_6 -> VAR_7 & VAR_8 ) == VAR_9 ) {  METHOD_4 ( ) ; return ; } METHOD_5 ( ) ; METHOD_6 ( STRUCT_OR_UNION_4 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , TYPE_1 VAR_0 ) { struct STRUCT_OR_UNION_2 * VAR_1 ; METHOD_1 ( ) ; VAR_2 = METHOD_2 ( METHOD_3 ( STRUCT_OR_UNION_3 ) -> VAR_3 ) ; if ( VAR_4 == VAR_5 || ( VAR_6 -> VAR_7 & VAR_8 ) == VAR_9 ) { METHOD_4 ( ) ; return ; } METHOD_5 ( ) ; METHOD_6 ( STRUCT_OR_UNION_4 ) ; }",674
675," TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) {  if ( VAR_3 > 32 && VAR_4 < 128 ) { METHOD_1 ( VAR_5 >= 4 ) ; VAR_6 [ 0 ] = '\\'' ; VAR_7 [ 1 ] = ( TYPE_4 ) VAR_8 ; VAR_9 [ 2 ] = '\\'' ; VAR_10 [ 3 ] = 0 ; return ; } switch ( VAR_11 ) {  case VAR_12 : METHOD_2 ( VAR_13 , ""EOF"" , VAR_14 ) ; return ;   case VAR_15 : METHOD_3 ( VAR_16 , ""ID"" , VAR_17 ) ; return ;   case VAR_18 : METHOD_4 ( VAR_19 , ""INT"" , VAR_20 ) ; return ;   case VAR_21 : METHOD_5 ( VAR_22 , ""FLOAT"" , VAR_23 ) ; return ;   case VAR_24 : METHOD_6 ( VAR_25 , ""STRING"" , VAR_26 ) ; return ;   case VAR_27 : METHOD_7 ( VAR_28 , ""UNFINISHEDSTRING"" , VAR_29 ) ; return ;   case VAR_30 : METHOD_8 ( VAR_31 , ""TEMPLATELITERAL"" , VAR_32 ) ; return ;   case VAR_33 : METHOD_9 ( VAR_34 , ""UNFINISHEDTEMPLATELITERAL"" , VAR_35 ) ; return ;   case VAR_36 : METHOD_10 ( VAR_37 , ""REGEX"" , VAR_38 ) ; return ;   case VAR_39 : METHOD_11 ( VAR_40 , ""UNFINISHEDREGEX"" , VAR_41 ) ; return ;   case VAR_42 : METHOD_12 ( VAR_43 , ""UNFINISHEDCOMMENT"" , VAR_44 ) ; return ;  } if ( VAR_45 >= VAR_46 && VAR_47 < VAR_48 ) { const TYPE_5 VAR_49 [ ] = ""==\\0"" ""===\\0"" ""!=\\0"" ""!==\\0"" ""<=\\0"" ""<<\\0"" ""<<=\\0"" "">=\\0"" "">>\\0"" "">>>\\0"" "">>=\\0"" "">>>=\\0"" ""+=\\0"" ""-=\\0"" ""++\\0"" ""--\\0"" ""*=\\0"" ""/=\\0"" ""%=\\0"" ""&=\\0"" ""&&\\0"" ""|=\\0"" ""||\\0"" ""^=\\0"" ""=>\\0"" ""if\\0"" ""else\\0"" ""do\\0"" ""while\\0"" ""for\\0"" ""return\\0"" ""continue\\0"" ""function\\0"" ""return\\0"" ""var\\0"" ""let\\0"" ""const\\0"" ""this\\0"" ""throw\\0"" ""try\\0"" ""catch\\0"" ""finally\\0"" ""true\\0"" ""false\\0"" ""null\\0"" ""undefined\\0"" ""new\\0"" ""in\\0"" ""instanceof\\0"" ""switch\\0"" ""case\\0"" ""default\\0"" ""delete\\0"" ""typeof\\0"" ""void\\0"" ""debugger\\0"" ""class\\0"" ""extends\\0"" ""super\\0"" ""static\\0"" ; unsigned TYPE_6 VAR_50 = 0 ; TYPE_7 VAR_51 = VAR_52 - VAR_53 ; while ( VAR_54 > 0 && VAR_55 < sizeof ( VAR_56 ) ) { while ( VAR_57 [ VAR_58 ] && VAR_59 < sizeof ( VAR_60 ) ) VAR_61 ++ ; VAR_62 ++ ; VAR_63 -- ; } METHOD_13 ( VAR_64 == 0 ) ;  METHOD_14 ( VAR_65 , & VAR_66 [ VAR_67 ] , VAR_68 ) ;  return ; }  METHOD_15 ( VAR_69 >= 10 ) ;  METHOD_16 ( VAR_70 , VAR_71 , ""?[%d]"" , VAR_72 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { if ( VAR_3 > 32 && VAR_4 < 128 ) { METHOD_1 ( VAR_5 >= 4 ) ; VAR_6 [ 0 ] = '\\'' ; VAR_7 [ 1 ] = ( TYPE_4 ) VAR_8 ; VAR_9 [ 2 ] = '\\'' ; VAR_10 [ 3 ] = 0 ; return ; } switch ( VAR_11 ) { case VAR_12 : METHOD_17 ( VAR_70 , VAR_71 , ""?[%d]"" , VAR_72 ) ; }",675
676,TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ;  if ( ! VAR_2 )  return VAR_3 ; VAR_4 = ( TYPE_3 * ) ~ ( ( TYPE_4 ) VAR_5 -> VAR_6 ) ; return VAR_7 ; },TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; if ( ! VAR_2 ) return VAR_3 ; VAR_4 = ( TYPE_3 * ) ~ ( ( TYPE_4 ) VAR_5 -> VAR_6 ) ; return VAR_7 ; },676
677,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = ( struct STRUCT_OR_UNION_7 * ) VAR_7 -> VAR_8 ; TYPE_3 VAR_9 ; struct STRUCT_OR_UNION_8 * VAR_10 ; TYPE_4 VAR_11 ; METHOD_1 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 != VAR_15 ) { METHOD_2 ( VAR_16 ) ; return - VAR_17 ; } if ( ( VAR_18 = METHOD_3 ( VAR_19 , VAR_20 & ~ VAR_21 , VAR_22 & VAR_23 , & VAR_24 ) ) == VAR_25 ) { METHOD_4 ( VAR_26 ) ; return VAR_27 ; } METHOD_5 ( VAR_28 ) ; VAR_29 = VAR_30 -> VAR_31 ; if ( VAR_32 > VAR_33 ) { VAR_34 = VAR_35 ; VAR_36 -> VAR_37 |= VAR_38 ; } VAR_39 = METHOD_6 ( VAR_40 , 0 , VAR_41 -> VAR_42 , VAR_43 ) ; if ( VAR_44 < 0 ) { METHOD_7 ( VAR_45 , VAR_46 ) ; METHOD_8 ( VAR_47 ) ; return VAR_48 ; } if ( VAR_49 != VAR_50 ) {  VAR_51 -> VAR_52 = VAR_53 ;  METHOD_9 ( VAR_54 , 7 , VAR_55 -> VAR_56 . VAR_57 , VAR_58 ) ; } VAR_59 -> VAR_60 = sizeof ( * VAR_61 ) ; METHOD_10 ( VAR_62 , VAR_63 ) ; METHOD_11 ( VAR_64 ) ; return VAR_65 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_4 * VAR_4 = STRUCT_OR_UNION_5 -> VAR_5 ; struct STRUCT_OR_UNION_6 * VAR_6 = ( struct STRUCT_OR_UNION_7 * ) VAR_7 -> VAR_8 ; TYPE_3 VAR_9 ; struct STRUCT_OR_UNION_8 * VAR_10 ; TYPE_4 VAR_11 ; METHOD_1 ( VAR_12 ) ; if ( VAR_13 -> VAR_14 != VAR_15 ) { METHOD_2 ( VAR_16 ) ; return - VAR_17 ; } if ( ( VAR_18 = METHOD_3 ( VAR_19 , VAR_20 & ~ VAR_21 , VAR_22 & VAR_23 , & VAR_24 ) ) == VAR_25 ) { METHOD_4 ( VAR_26 ) ; return VAR_27 ; } METHOD_5 ( VAR_28 ) ; VAR_29 = VAR_30 -> VAR_31 ; if ( VAR_32 > VAR_33 ) { VAR_34 = VAR_35 ; VAR_36 -> VAR_37 |= VAR_38 ; } VAR_39 = METHOD_6 ( VAR_40 , 0 , VAR_41 -> VAR_42 , VAR_43 ) ; if ( VAR_44 < 0 ) { METHOD_7 ( VAR_45 , VAR_46 ) ; METHOD_8 ( VAR_47 ) ; return VAR_48 ; } if ( VAR_49 != VAR_50 ) { METHOD_12 ( VAR_61 , 0 , sizeof ( VAR_61 ) ) ; VAR_51 -> VAR_52 = VAR_53 ; METHOD_9 ( VAR_54 , 7 , VAR_55 -> VAR_56 . VAR_57 , VAR_58 ) ; } VAR_59 -> VAR_60 = sizeof ( * VAR_61 ) ; METHOD_10 ( VAR_62 , VAR_63 ) ; METHOD_11 ( VAR_64 ) ; return VAR_65 ; }",677
678," static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 )  { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; for ( VAR_5 = VAR_6 ; VAR_7 > 0 ; -- VAR_8 ) { VAR_9 = ( VAR_10 >> ( 8 * ( VAR_11 - 1 ) ) ) & 0xff ; if ( METHOD_1 ( VAR_12 , VAR_13 ) == VAR_14 ) return - 1 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 ; TYPE_5 VAR_4 ; for ( VAR_5 = VAR_6 ; VAR_7 > 0 ; -- VAR_8 ) { VAR_9 = ( VAR_10 >> ( 8 * ( VAR_11 - 1 ) ) ) & 0xff ; if ( METHOD_1 ( VAR_12 , VAR_13 ) == VAR_14 ) return - 1 ; } return 0 ; }",678
679,"TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 , TYPE_3 TYPE_4 VAR_1 , TYPE_5 TYPE_6 TYPE_7 * VAR_2 , TYPE_8 TYPE_9 TYPE_10 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_11 VAR_6 = VAR_7 ; if ( ( VAR_8 = METHOD_1 ( 1 , sizeof ( VAR_9 ) ) ) == VAR_10 ) { VAR_11 = VAR_12 ; goto VAR_13 ; } VAR_14 -> VAR_15 = VAR_16 ; * VAR_17 = VAR_18 ; if ( ! VAR_19 || ( METHOD_2 ( VAR_20 , ""localhost"" ) == 0 ) ) { if ( METHOD_3 ( VAR_21 , VAR_22 ) == VAR_23 ) { VAR_24 = VAR_25 ; goto VAR_26 ; } if ( METHOD_4 ( VAR_27 , VAR_28 ) == VAR_29 ) { VAR_30 = VAR_31 ; goto VAR_32 ; } if ( METHOD_5 ( VAR_33 , VAR_34 ) == VAR_35 ) { VAR_36 = VAR_37 ; goto VAR_38 ; } }  return VAR_39 ;  VAR_40 : if ( VAR_41 ) { METHOD_6 ( VAR_42 ) ; VAR_43 = VAR_44 ; } return VAR_45 ; }","TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 , TYPE_3 TYPE_4 VAR_1 , TYPE_5 TYPE_6 TYPE_7 * VAR_2 , TYPE_8 TYPE_9 TYPE_10 * VAR_3 ) { VAR_4 * VAR_5 ; TYPE_11 VAR_6 = VAR_7 ; if ( ( VAR_8 = METHOD_1 ( 1 , sizeof ( VAR_9 ) ) ) == VAR_10 ) { VAR_11 = VAR_12 ; goto VAR_13 ; } VAR_14 -> VAR_15 = VAR_16 ; * VAR_17 = VAR_18 ; if ( ! VAR_19 || ( METHOD_2 ( VAR_20 , ""localhost"" ) == 0 ) ) { if ( METHOD_3 ( VAR_21 , VAR_22 ) == VAR_23 ) { VAR_24 = VAR_25 ; goto VAR_26 ; } if ( METHOD_4 ( VAR_27 , VAR_28 ) == VAR_29 ) { VAR_30 = VAR_31 ; goto VAR_32 ; } if ( METHOD_5 ( VAR_33 , VAR_34 ) == VAR_35 ) { VAR_36 = VAR_37 ; goto VAR_38 ; } } VAR_40 : return VAR_45 ; }",679
680,static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) {  METHOD_1 ( ) ;  if ( METHOD_2 ( ) == ( VAR_1 & VAR_2 ) ) METHOD_3 ( VAR_3 ) ;  METHOD_4 ( VAR_4 ) ;  },"static TYPE_0 METHOD_0 ( unsigned TYPE_1 VAR_0 ) { METHOD_1 ( ) ; if ( METHOD_5 ( ) == VAR_4 ) METHOD_7 ( VAR_5 , METHOD_6 ( ) ) ; if ( METHOD_2 ( ) == ( VAR_1 & VAR_2 ) ) METHOD_3 ( VAR_3 ) ; METHOD_8 ( VAR_4 ) ; }",680
681,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { METHOD_1 ( VAR_4 ) ;  struct STRUCT_OR_UNION_4 * VAR_5 , * VAR_6 ;  struct STRUCT_OR_UNION_5 * VAR_7 ; TYPE_1 VAR_8 ;  if ( METHOD_2 ( VAR_9 ) ) {  VAR_10 = METHOD_3 ( VAR_11 , VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ;  VAR_15 = METHOD_4 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ;  METHOD_5 ( ) ; if ( VAR_20 ) goto VAR_21 ; for ( VAR_22 = VAR_23 ; VAR_24 ; VAR_25 = METHOD_6 ( VAR_26 , VAR_27 ) ) METHOD_7 ( VAR_28 ) ; } else { METHOD_8 ( ) ; } if ( VAR_29 ) { METHOD_9 ( VAR_30 , VAR_31 ) ; METHOD_10 ( VAR_32 , VAR_33 , VAR_34 ) ; METHOD_11 ( VAR_35 -> VAR_36 ) ; } else { METHOD_12 ( VAR_37 , VAR_38 , VAR_39 ) ; METHOD_13 ( VAR_40 , VAR_41 ) ; } METHOD_14 ( VAR_42 , VAR_43 , & VAR_44 , VAR_45 ) { struct STRUCT_OR_UNION_6 * VAR_46 ; METHOD_15 ( & VAR_47 -> VAR_48 ) ; VAR_49 = METHOD_16 ( & VAR_50 -> VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_17 ( VAR_55 , VAR_56 ) ; } METHOD_18 ( ) ; return 0 ; VAR_57 : while ( ! METHOD_19 ( & VAR_58 ) ) { VAR_59 = hlist_entry ( VAR_60 . VAR_61 , struct STRUCT_OR_UNION_7 , VAR_62 ) ;  METHOD_20 ( VAR_63 , VAR_64 ) ;  } METHOD_21 ( ) ; METHOD_22 ( VAR_65 , VAR_66 ) ; VAR_67 :  return VAR_68 ;  }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 , struct STRUCT_OR_UNION_3 * VAR_3 ) { METHOD_1 ( VAR_4 ) ; struct STRUCT_OR_UNION_8 * VAR_69 = VAR_37 -> VAR_36 ; struct STRUCT_OR_UNION_4 * VAR_5 , * VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_7 ; TYPE_1 VAR_8 ; if ( ! VAR_31 ) { VAR_68 = METHOD_23 ( VAR_69 , VAR_65 ) ; if ( VAR_13 ) goto VAR_14 ; VAR_15 = METHOD_4 ( VAR_16 , VAR_17 , VAR_18 , & VAR_19 ) ; METHOD_5 ( ) ; if ( VAR_20 ) goto VAR_21 ; for ( VAR_22 = VAR_23 ; VAR_24 ; VAR_25 = METHOD_6 ( VAR_26 , VAR_27 ) ) METHOD_7 ( VAR_28 ) ; } else { METHOD_8 ( ) ; } if ( VAR_29 ) { METHOD_9 ( VAR_30 , VAR_31 ) ; METHOD_10 ( VAR_32 , VAR_33 , VAR_34 ) ; METHOD_11 ( VAR_35 -> VAR_36 ) ; } else { METHOD_12 ( VAR_37 , VAR_38 , VAR_39 ) ; METHOD_13 ( VAR_40 , VAR_41 ) ; } METHOD_14 ( VAR_42 , VAR_43 , & VAR_44 , VAR_45 ) { struct STRUCT_OR_UNION_6 * VAR_46 ; METHOD_15 ( & VAR_47 -> VAR_48 ) ; VAR_49 = METHOD_16 ( & VAR_50 -> VAR_51 -> VAR_52 , VAR_53 -> VAR_54 ) ; METHOD_17 ( VAR_55 , VAR_56 ) ; } METHOD_18 ( ) ; return 0 ; VAR_57 : while ( ! METHOD_19 ( & VAR_58 ) ) { VAR_59 = hlist_entry ( VAR_60 . VAR_61 , struct STRUCT_OR_UNION_7 , VAR_62 ) ; VAR_63 -> VAR_51 -> VAR_36 -> VAR_70 = 0 ; METHOD_20 ( VAR_63 , VAR_64 ) ; } METHOD_21 ( ) ; METHOD_22 ( VAR_65 , VAR_66 ) ; VAR_67 : VAR_69 -> VAR_70 = 0 ; return VAR_68 ; }",681
682,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; if ( ! METHOD_1 ( VAR_5 , VAR_6 ) ) return ; if ( METHOD_2 ( METHOD_3 ( & VAR_7 -> VAR_8 ) ) ) { * METHOD_4 ( VAR_9 ) = * VAR_10 ;  METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ;  METHOD_6 ( VAR_14 ) ; } }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 ) { struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 ; if ( ! METHOD_1 ( VAR_5 , VAR_6 ) ) return ; if ( METHOD_2 ( METHOD_3 ( & VAR_7 -> VAR_8 ) ) ) { * METHOD_4 ( VAR_9 ) = * VAR_10 ; METHOD_5 ( VAR_11 , VAR_12 , VAR_13 ) ; METHOD_6 ( VAR_14 ) ; } }",682
683," static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 )  { struct STRUCT_OR_UNION_4 * VAR_2 ; TYPE_1 VAR_3 ;  if ( VAR_4 -> VAR_5 . VAR_6 . VAR_7 & VAR_8 ) {  VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 , VAR_12 -> VAR_13 -> VAR_14 , VAR_15 -> VAR_16 . VAR_17 . VAR_18 ) ; if ( VAR_19 < 0 ) goto VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 , STRUCT_OR_UNION_5 -> VAR_23 , VAR_24 ) ; if ( ! METHOD_3 ( VAR_25 ) ) { struct STRUCT_OR_UNION_6 * VAR_26 ; VAR_27 = METHOD_4 ( VAR_28 ) ; VAR_29 -> VAR_30 = VAR_31 ; return 0 ; } VAR_32 = METHOD_5 ( VAR_33 ) ; VAR_34 :  METHOD_6 ( STRUCT_OR_UNION_7 , VAR_35 , VAR_36 -> VAR_37 . VAR_38 . VAR_39 ) ;  return VAR_40 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_2 , struct STRUCT_OR_UNION_3 * VAR_1 ) { struct STRUCT_OR_UNION_4 * VAR_2 ; TYPE_1 VAR_3 ; if ( VAR_41 & VAR_8 ) { VAR_9 = METHOD_1 ( VAR_10 -> VAR_11 , VAR_12 -> VAR_13 -> VAR_14 , VAR_15 -> VAR_16 . VAR_17 . VAR_18 ) ; if ( VAR_19 < 0 ) goto VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 , STRUCT_OR_UNION_5 -> VAR_23 , VAR_24 ) ; if ( ! METHOD_3 ( VAR_25 ) ) { struct STRUCT_OR_UNION_6 * VAR_26 ; VAR_27 = METHOD_4 ( VAR_28 ) ; VAR_29 -> VAR_30 = VAR_31 ; return 0 ; } VAR_32 = METHOD_5 ( VAR_33 ) ; VAR_34 : METHOD_6 ( STRUCT_OR_UNION_7 , VAR_35 , VAR_41 & ( VAR_42 | VAR_43 ) ) ; return VAR_40 ; }",683
684,"struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 ; VAR_4 = METHOD_2 ( VAR_5 ) ; if ( METHOD_3 ( VAR_6 ) ) return VAR_7 ;  METHOD_4 ( VAR_8 , VAR_9 ) ;  METHOD_5 ( VAR_10 ) ; return VAR_11 ; }","struct STRUCT_OR_UNION_0 * METHOD_0 ( TYPE_0 VAR_0 ) { struct STRUCT_OR_UNION_1 VAR_1 = METHOD_1 ( VAR_2 ) ; struct STRUCT_OR_UNION_2 * VAR_3 ; VAR_4 = METHOD_2 ( VAR_5 ) ; if ( METHOD_3 ( VAR_6 ) ) return VAR_7 ; METHOD_4 ( VAR_8 , VAR_9 ) ; METHOD_5 ( VAR_10 ) ; return VAR_11 ; VAR_11 = }",684
685,"static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 ) {  VAR_2 -> VAR_3 = METHOD_1 ( 1.0f , METHOD_2 ( 0.0f , VAR_4 -> VAR_5 ) ) ;   VAR_6 -> VAR_7 = METHOD_3 ( 1.0f , METHOD_4 ( 0.0f , VAR_8 -> VAR_9 ) ) ;   VAR_10 -> VAR_11 = METHOD_5 ( 1.0f , METHOD_6 ( 0.0f , VAR_12 -> VAR_13 ) ) ;   VAR_14 -> VAR_15 = METHOD_7 ( 1.0f , METHOD_8 ( 0.0f , VAR_16 -> VAR_17 ) ) ;  }","static VAR_0 TYPE_0 METHOD_0 ( TYPE_1 * VAR_1 ) { VAR_2 -> VAR_3 = METHOD_1 ( 1.0f , METHOD_10 ( 0.0f , VAR_4 -> VAR_5 ) ) ; VAR_6 -> VAR_7 = METHOD_3 ( 1.0f , METHOD_10 ( 0.0f , VAR_8 -> VAR_9 ) ) ; VAR_10 -> VAR_11 = METHOD_5 ( 1.0f , METHOD_10 ( 0.0f , VAR_12 -> VAR_13 ) ) ; VAR_14 -> VAR_15 = METHOD_7 ( 1.0f , METHOD_10 ( 0.0f , VAR_16 -> VAR_17 ) ) ; }",685
686,"static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 ) { VAR_5 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 = 0 ;  TYPE_7 VAR_9 , VAR_10 ;  if ( ( VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ) == VAR_14 ) { VAR_15 -> VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 ) ; return VAR_19 ; } TYPE_8 TYPE_9 if ( * VAR_20 & VAR_21 )  VAR_22 -> VAR_23 |= VAR_24 ;  for ( ; ; ) { TYPE_10 * VAR_25 , * VAR_26 ; TYPE_11 VAR_27 ; TYPE_12 VAR_28 ; TYPE_13 * VAR_29 ; VAR_30 = - 1 ; TYPE_14 VAR_31 ; const TYPE_15 * VAR_32 ; VAR_33 = METHOD_3 ( VAR_34 , & VAR_35 , & VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 -> VAR_40 = VAR_41 -> VAR_42 ; break ; } if ( VAR_43 == VAR_44 && VAR_45 ) { VAR_46 = VAR_47 ; VAR_48 = 0 ; if ( VAR_49 -> VAR_50 && ! ( * VAR_51 & VAR_52 ) ) { VAR_53 -> VAR_54 = - VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 = 0 ; } } else VAR_59 = 1 ; VAR_60 = ( VAR_61 != VAR_62 && VAR_63 != VAR_64 ) ? VAR_65 - VAR_66 : 0 ; VAR_67 = ( TYPE_16 * ) METHOD_4 ( VAR_68 + 1 ) ; if ( VAR_69 == VAR_70 ) { VAR_71 -> VAR_72 = VAR_73 ; break ; } if ( VAR_74 > 0 ) METHOD_5 ( VAR_75 , VAR_76 , VAR_77 ) ; VAR_78 [ VAR_79 ] = '\\0' ; TYPE_17 TYPE_18 if ( VAR_80 == VAR_81 ) { if ( ! ( VAR_82 -> VAR_83 & VAR_84 ) && METHOD_6 ( VAR_85 , ""!="" ) ) { METHOD_7 ( VAR_86 ) ; VAR_87 -> VAR_88 = VAR_89 ; break ; } else if ( ( VAR_90 -> VAR_91 & VAR_92 ) && METHOD_8 ( VAR_93 , ""<>"" ) ) { METHOD_9 ( VAR_94 ) ; VAR_95 -> VAR_96 = VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; break ; } } VAR_101 = VAR_102 == VAR_103 ? VAR_104 -> VAR_105 : VAR_106 -> VAR_107 ; VAR_108 = VAR_109 == VAR_110 ? VAR_111 -> VAR_112 : VAR_113 -> VAR_114 ; if ( VAR_115 != VAR_116 && VAR_117 >= VAR_118 ) { VAR_119 = Py_SAFE_DOWNCAST ( VAR_120 - VAR_121 , VAR_122 , TYPE_19 ) ; } else { VAR_123 = - 1 ; } if ( VAR_124 != VAR_125 && VAR_126 >= VAR_127 -> VAR_128 ) { VAR_129 = Py_SAFE_DOWNCAST ( VAR_130 - VAR_131 -> VAR_132 , VAR_133 , TYPE_20 ) ; } else { VAR_134 = - 1 ; }  if ( ( VAR_135 -> VAR_136 =  METHOD_10 ( VAR_137 , ( TYPE_21 ) VAR_138 , VAR_139 , VAR_140 , VAR_141 , VAR_142 -> VAR_143 , VAR_144 , & ( VAR_145 -> VAR_146 ) ) ) != VAR_147 ) { if ( VAR_148 -> VAR_149 != VAR_150 ) { METHOD_11 ( VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; } break ; } } if ( VAR_155 -> VAR_156 == VAR_157 ) { VAR_158 = VAR_159 -> VAR_160 ;  VAR_161 -> VAR_162 = VAR_163 ;  TYPE_22 TYPE_23 if ( VAR_164 == single_input ) { TYPE_24 * VAR_165 = VAR_166 -> VAR_167 ; TYPE_25 VAR_168 = * VAR_169 -> VAR_170 ; for ( ; ; ) { while ( VAR_171 == '' || VAR_172 == '\\t' || VAR_173 == '\\n' || VAR_174 == '\\014' ) VAR_175 = * ++ VAR_176 ; if ( ! VAR_177 ) break ; if ( VAR_178 != '' ) { VAR_179 -> VAR_180 = VAR_181 ; METHOD_12 ( VAR_182 ) ; VAR_183 = VAR_184 ; break ; } while ( VAR_185 && VAR_186 != '\\n' ) VAR_187 = * ++ VAR_188 ; } } } else VAR_189 = VAR_190 ; TYPE_26 TYPE_27 * VAR_191 = VAR_192 -> VAR_193 ; METHOD_13 ( VAR_194 ) ; if ( VAR_195 == VAR_196 ) { if ( VAR_197 -> VAR_198 == VAR_199 ) VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 -> VAR_206 ; if ( VAR_207 -> VAR_208 != VAR_209 ) { TYPE_28 VAR_210 ; METHOD_14 ( VAR_211 -> VAR_212 - VAR_213 -> VAR_214 < VAR_215 ) ; VAR_216 -> VAR_217 = VAR_218 != - 1 ? VAR_219 + 1 : ( ( TYPE_29 ) ( VAR_220 -> VAR_221 - VAR_222 -> VAR_223 ) ) ; VAR_224 = VAR_225 -> VAR_226 - VAR_227 -> VAR_228 ; VAR_229 -> VAR_230 = ( TYPE_30 * ) METHOD_15 ( VAR_231 + 1 ) ; if ( VAR_232 -> VAR_233 != VAR_234 ) { if ( VAR_235 > 0 ) METHOD_16 ( VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 ) ; VAR_241 -> VAR_242 [ VAR_243 ] = '\\0' ; } } } else if ( VAR_244 -> VAR_245 != VAR_246 ) { TYPE_31 * VAR_247 = METHOD_17 ( VAR_248 ) ; if ( VAR_249 ) VAR_250 -> VAR_251 = METHOD_18 ( METHOD_19 ( VAR_252 -> VAR_253 ) + 1 ) ; if ( ! VAR_254 || ! VAR_255 -> VAR_256 ) { VAR_257 -> VAR_258 = VAR_259 ; if ( VAR_260 ) METHOD_20 ( VAR_261 ) ; VAR_262 = VAR_263 ; goto VAR_264 ; } METHOD_21 ( VAR_265 -> VAR_266 , VAR_267 -> VAR_268 ) ; METHOD_22 ( VAR_269 -> VAR_270 ) ; VAR_271 -> VAR_272 = VAR_273 ; VAR_274 -> VAR_275 = 1 ; VAR_276 -> VAR_277 = VAR_278 ; VAR_279 = VAR_280 ; } VAR_281 : METHOD_23 ( VAR_282 ) ; if ( VAR_283 != VAR_284 ) { METHOD_24 ( VAR_285 ) ; } return VAR_286 ; }","static TYPE_0 * METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 ) { VAR_5 * VAR_6 ; TYPE_5 * VAR_7 ; TYPE_6 VAR_8 = 0 ; TYPE_7 VAR_9 , VAR_10 ; if ( ( VAR_11 = METHOD_1 ( VAR_12 , VAR_13 ) ) == VAR_14 ) { VAR_15 -> VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 ) ; return VAR_19 ; } TYPE_8 TYPE_9 if ( * VAR_20 & VAR_21 ) VAR_22 -> VAR_23 |= VAR_24 ; for ( ; ; ) { TYPE_10 * VAR_25 , * VAR_26 ; TYPE_11 VAR_27 ; TYPE_12 VAR_28 ; TYPE_13 * VAR_29 ; VAR_30 = - 1 ; TYPE_14 VAR_31 ; const TYPE_15 * VAR_32 ; VAR_33 = METHOD_3 ( VAR_34 , & VAR_35 , & VAR_36 ) ; if ( VAR_37 == VAR_38 ) { VAR_39 -> VAR_40 = VAR_41 -> VAR_42 ; break ; } if ( VAR_154 == VAR_290 ) { if ( ! METHOD_26 ( & VAR_287 , VAR_282 -> VAR_206 ) ) { VAR_257 -> VAR_258 = VAR_259 ; break ; } continue ; } if ( VAR_43 == VAR_44 && VAR_45 ) { VAR_46 = VAR_47 ; VAR_48 = 0 ; if ( VAR_49 -> VAR_50 && ! ( * VAR_51 & VAR_52 ) ) { VAR_53 -> VAR_54 = - VAR_55 -> VAR_56 ; VAR_57 -> VAR_58 = 0 ; } } else VAR_59 = 1 ; VAR_60 = ( VAR_61 != VAR_62 && VAR_63 != VAR_64 ) ? VAR_65 - VAR_66 : 0 ; VAR_67 = ( TYPE_16 * ) METHOD_4 ( VAR_68 + 1 ) ; if ( VAR_69 == VAR_70 ) { VAR_71 -> VAR_72 = VAR_73 ; break ; } if ( VAR_74 > 0 ) METHOD_5 ( VAR_75 , VAR_76 , VAR_77 ) ; VAR_78 [ VAR_79 ] = '\\0' ; TYPE_17 TYPE_18 if ( VAR_80 == VAR_81 ) { if ( ! ( VAR_82 -> VAR_83 & VAR_84 ) && METHOD_6 ( VAR_85 , ""!="" ) ) { METHOD_7 ( VAR_86 ) ; VAR_87 -> VAR_88 = VAR_89 ; break ; } else if ( ( VAR_90 -> VAR_91 & VAR_92 ) && METHOD_8 ( VAR_93 , ""<>"" ) ) { METHOD_9 ( VAR_94 ) ; VAR_95 -> VAR_96 = VAR_97 ; VAR_98 -> VAR_99 = VAR_100 ; break ; } } VAR_101 = VAR_102 == VAR_103 ? VAR_104 -> VAR_105 : VAR_106 -> VAR_107 ; VAR_108 = VAR_109 == VAR_110 ? VAR_111 -> VAR_112 : VAR_113 -> VAR_114 ; if ( VAR_115 != VAR_116 && VAR_117 >= VAR_118 ) { VAR_119 = Py_SAFE_DOWNCAST ( VAR_120 - VAR_121 , VAR_122 , TYPE_19 ) ; } else { VAR_123 = - 1 ; } if ( VAR_124 != VAR_125 && VAR_126 >= VAR_127 -> VAR_128 ) { VAR_129 = Py_SAFE_DOWNCAST ( VAR_130 - VAR_131 -> VAR_132 , VAR_133 , TYPE_20 ) ; } else { VAR_134 = - 1 ; } if ( ( VAR_135 -> VAR_136 = METHOD_10 ( VAR_137 , ( TYPE_21 ) VAR_138 , VAR_139 , VAR_140 , VAR_141 , VAR_142 -> VAR_143 , VAR_144 , & ( VAR_145 -> VAR_146 ) ) ) != VAR_147 ) { if ( VAR_148 -> VAR_149 != VAR_150 ) { METHOD_11 ( VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; } break ; } } if ( VAR_155 -> VAR_156 == VAR_157 ) { VAR_158 = VAR_159 -> VAR_160 ; VAR_161 -> VAR_162 = VAR_163 ; TYPE_22 TYPE_23 if ( VAR_164 == single_input ) { TYPE_24 * VAR_165 = VAR_166 -> VAR_167 ; TYPE_25 VAR_168 = * VAR_169 -> VAR_170 ; for ( ; ; ) { while ( VAR_171 == '' || VAR_172 == '\\t' || VAR_173 == '\\n' || VAR_174 == '\\014' ) VAR_175 = * ++ VAR_176 ; if ( ! VAR_177 ) break ; if ( VAR_178 != '' ) { VAR_179 -> VAR_180 = VAR_181 ; METHOD_12 ( VAR_182 ) ; VAR_183 = VAR_184 ; break ; } while ( VAR_185 && VAR_186 != '\\n' ) VAR_187 = * ++ VAR_188 ; } } } else VAR_189 = VAR_190 ; TYPE_26 TYPE_27 * VAR_191 = VAR_192 -> VAR_193 ; METHOD_13 ( VAR_194 ) ; if ( VAR_195 == VAR_196 ) { if ( VAR_197 -> VAR_198 == VAR_199 ) VAR_200 -> VAR_201 = VAR_202 ; VAR_203 -> VAR_204 = VAR_205 -> VAR_206 ; if ( VAR_207 -> VAR_208 != VAR_209 ) { TYPE_28 VAR_210 ; METHOD_14 ( VAR_211 -> VAR_212 - VAR_213 -> VAR_214 < VAR_215 ) ; VAR_216 -> VAR_217 = VAR_218 != - 1 ? VAR_219 + 1 : ( ( TYPE_29 ) ( VAR_220 -> VAR_221 - VAR_222 -> VAR_223 ) ) ; VAR_224 = VAR_225 -> VAR_226 - VAR_227 -> VAR_228 ; VAR_229 -> VAR_230 = ( TYPE_30 * ) METHOD_15 ( VAR_231 + 1 ) ; if ( VAR_232 -> VAR_233 != VAR_234 ) { if ( VAR_235 > 0 ) METHOD_16 ( VAR_236 -> VAR_237 , VAR_238 -> VAR_239 , VAR_240 ) ; VAR_241 -> VAR_242 [ VAR_243 ] = '\\0' ; } } } else if ( VAR_244 -> VAR_245 != VAR_246 ) { TYPE_31 * VAR_247 = METHOD_17 ( VAR_248 ) ; if ( VAR_249 ) VAR_250 -> VAR_251 = METHOD_18 ( METHOD_19 ( VAR_252 -> VAR_253 ) + 1 ) ; if ( ! VAR_254 || ! VAR_255 -> VAR_256 ) { VAR_257 -> VAR_258 = VAR_259 ; if ( VAR_260 ) METHOD_20 ( VAR_261 ) ; VAR_262 = VAR_263 ; goto VAR_264 ; } METHOD_21 ( VAR_265 -> VAR_266 , VAR_267 -> VAR_268 ) ; METHOD_22 ( VAR_269 -> VAR_270 ) ; VAR_271 -> VAR_272 = VAR_273 ; VAR_274 -> VAR_275 = 1 ; VAR_276 -> VAR_277 = VAR_278 ; VAR_279 = VAR_280 ; } VAR_281 : METHOD_23 ( VAR_282 ) ; if ( VAR_283 != VAR_284 ) { METHOD_24 ( VAR_285 ) ; } return VAR_286 ; }",686
687,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 ) {  METHOD_1 ( VAR_2 -> VAR_3 , VAR_4 , ( VAR_5 -> VAR_6 . VAR_7 * VAR_8 -> VAR_9 . VAR_10 ) ) ;  VAR_11 -> VAR_12 . VAR_13 . VAR_14 = 1 ; VAR_15 -> VAR_16 . VAR_17 . VAR_18 = 1 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , unsigned TYPE_2 * VAR_1 ) { METHOD_1 ( VAR_2 -> VAR_3 , VAR_4 , ( VAR_5 -> VAR_6 . VAR_7 * VAR_8 -> VAR_9 . VAR_10 ) ) ; VAR_11 -> VAR_12 . VAR_13 . VAR_14 = 1 ; VAR_15 -> VAR_16 . VAR_17 . VAR_18 = 1 ; }",687
688,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 , 0 ) ;  VAR_2 -> VAR_3 . VAR_4 = VAR_5 -> VAR_6 . VAR_7 ;  VAR_8 -> VAR_9 . VAR_10 ++ ; VAR_11 -> VAR_12 . VAR_13 -- ;  } ","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { METHOD_1 ( VAR_1 , 0 ) ; VAR_2 -> VAR_3 . VAR_4 = VAR_5 -> VAR_6 . VAR_7 ; VAR_8 -> VAR_9 . VAR_10 ++ ; VAR_11 -> VAR_12 . VAR_13 -- ; VAR_11 -> VAR_12 . VAR_14 = 0 ; VAR_11 -> VAR_12 . VAR_15 = 0 ; }",688
689,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_13 VAR_28 , VAR_29 ; TYPE_14 VAR_30 ; unsigned TYPE_15 * VAR_31 , * VAR_32 ; METHOD_1 ( VAR_33 != ( const TYPE_16 * ) VAR_34 ) ; METHOD_2 ( VAR_35 -> VAR_36 == VAR_37 ) ; if ( VAR_38 -> VAR_39 != VAR_40 ) ( TYPE_17 ) METHOD_3 ( VAR_41 , METHOD_4 ( ) , ""%s"" , VAR_42 -> VAR_43 ) ; METHOD_5 ( VAR_44 != ( TYPE_18 * ) VAR_45 ) ; METHOD_6 ( VAR_46 -> VAR_47 == VAR_48 ) ; VAR_49 = METHOD_7 ( VAR_50 , VAR_51 ) ; VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; if ( VAR_57 == VAR_58 ) { VAR_59 = METHOD_9 ( VAR_60 ) ; return ( ( TYPE_19 * ) VAR_61 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_62 , 0 , sizeof ( VAR_63 ) ) ; VAR_64 . VAR_65 = METHOD_11 ( VAR_66 ) ; do { if ( VAR_67 . VAR_68 != 0x59a66a95 ) METHOD_12 ( VAR_69 , ""ImproperImageHeader"" ) ; VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 . VAR_74 = METHOD_14 ( VAR_75 ) ; VAR_76 . VAR_77 = METHOD_15 ( VAR_78 ) ; VAR_79 . VAR_80 = METHOD_16 ( VAR_81 ) ; VAR_82 . VAR_83 = METHOD_17 ( VAR_84 ) ; VAR_85 . VAR_86 = METHOD_18 ( VAR_87 ) ; VAR_88 . VAR_89 = METHOD_19 ( VAR_90 ) ; VAR_91 = VAR_92 . VAR_93 * VAR_94 . VAR_95 ; if ( ( VAR_96 . VAR_97 != 0 ) && ( VAR_98 . VAR_99 != VAR_100 / VAR_101 . VAR_102 ) ) METHOD_20 ( VAR_103 , ""ImproperImageHeader"" ) ; if ( ( VAR_104 . VAR_105 != VAR_106 ) && ( VAR_107 . VAR_108 != VAR_109 ) && ( VAR_110 . VAR_111 != VAR_112 ) ) METHOD_21 ( VAR_113 , ""ImproperImageHeader"" ) ; if ( ( VAR_114 . VAR_115 == VAR_116 ) && ( VAR_117 . VAR_118 != 0 ) ) METHOD_22 ( VAR_119 , ""ImproperImageHeader"" ) ; if ( ( VAR_120 . VAR_121 == 0 ) || ( VAR_122 . VAR_123 > 32 ) ) METHOD_23 ( VAR_124 , ""ImproperImageHeader"" ) ; if ( ( VAR_125 . VAR_126 != VAR_127 ) && ( VAR_128 . VAR_129 != VAR_130 ) && ( VAR_131 . VAR_132 != VAR_133 ) ) METHOD_24 ( VAR_134 , ""ColormapTypeNotSupported"" ) ; VAR_135 -> VAR_136 = VAR_137 . VAR_138 ; VAR_139 -> VAR_140 = VAR_141 . VAR_142 ; VAR_143 -> VAR_144 = VAR_145 . VAR_146 <= 8 ? VAR_147 . VAR_148 : VAR_149 ; if ( VAR_150 . VAR_151 < 24 ) { TYPE_21 VAR_152 ; VAR_153 -> VAR_154 = VAR_155 . VAR_156 ; VAR_157 = 1 ; if ( VAR_158 . VAR_159 == VAR_160 ) VAR_161 -> VAR_162 = VAR_163 << VAR_164 . VAR_165 ; if ( VAR_166 . VAR_167 == VAR_168 ) VAR_169 -> VAR_170 = VAR_171 . VAR_172 / 3 ; if ( METHOD_25 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) == VAR_177 ) METHOD_26 ( VAR_178 , ""MemoryAllocationFailed"" ) ; } switch ( VAR_179 . VAR_180 ) { case VAR_181 : break ; case VAR_182 : { unsigned TYPE_22 * VAR_183 ; VAR_184 = ( unsigned TYPE_23 * ) METHOD_27 ( VAR_185 -> VAR_186 , sizeof ( * VAR_187 ) ) ; if ( VAR_188 == ( unsigned TYPE_24 * ) VAR_189 ) METHOD_28 ( VAR_190 , ""MemoryAllocationFailed"" ) ; VAR_191 = METHOD_29 ( VAR_192 , VAR_193 -> VAR_194 , VAR_195 ) ; if ( VAR_196 != ( TYPE_25 ) VAR_197 -> VAR_198 ) METHOD_30 ( VAR_199 , ""UnexpectedEndOfFile"" ) ; for ( VAR_200 = 0 ; VAR_201 < ( TYPE_26 ) VAR_202 -> VAR_203 ; VAR_204 ++ ) VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 = ( TYPE_27 ) METHOD_31 ( VAR_209 [ VAR_210 ] ) ; VAR_211 = METHOD_32 ( VAR_212 , VAR_213 -> VAR_214 , VAR_215 ) ; if ( VAR_216 != ( TYPE_28 ) VAR_217 -> VAR_218 ) METHOD_33 ( VAR_219 , ""UnexpectedEndOfFile"" ) ; for ( VAR_220 = 0 ; VAR_221 < ( TYPE_29 ) VAR_222 -> VAR_223 ; VAR_224 ++ ) VAR_225 -> VAR_226 [ VAR_227 ] . VAR_228 = ( TYPE_30 ) METHOD_34 ( VAR_229 [ VAR_230 ] ) ; VAR_231 = METHOD_35 ( VAR_232 , VAR_233 -> VAR_234 , VAR_235 ) ; if ( VAR_236 != ( TYPE_31 ) VAR_237 -> VAR_238 ) METHOD_36 ( VAR_239 , ""UnexpectedEndOfFile"" ) ; for ( VAR_240 = 0 ; VAR_241 < ( TYPE_32 ) VAR_242 -> VAR_243 ; VAR_244 ++ ) VAR_245 -> VAR_246 [ VAR_247 ] . VAR_248 = ( TYPE_33 ) METHOD_37 ( VAR_249 [ VAR_250 ] ) ; VAR_251 = ( unsigned TYPE_34 * ) METHOD_38 ( VAR_252 ) ; break ; } case VAR_253 : { unsigned TYPE_35 * VAR_254 ; VAR_255 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_256 . VAR_257 , sizeof ( * VAR_258 ) ) ; if ( VAR_259 == ( unsigned TYPE_37 * ) VAR_260 ) METHOD_40 ( VAR_261 , ""MemoryAllocationFailed"" ) ; VAR_262 = METHOD_41 ( VAR_263 , VAR_264 . VAR_265 , VAR_266 ) ; if ( VAR_267 != ( TYPE_38 ) VAR_268 . VAR_269 ) METHOD_42 ( VAR_270 , ""UnexpectedEndOfFile"" ) ; VAR_271 = ( unsigned TYPE_39 * ) METHOD_43 ( VAR_272 ) ; break ; } default : METHOD_44 ( VAR_273 , ""ColormapTypeNotSupported"" ) ; } VAR_274 -> VAR_275 = VAR_276 . VAR_277 == 32 ? VAR_278 : VAR_279 ; VAR_280 -> VAR_281 = VAR_282 . VAR_283 ; VAR_284 -> VAR_285 = VAR_286 . VAR_287 ; if ( VAR_288 -> VAR_289 != VAR_290 ) { ( TYPE_40 ) METHOD_45 ( VAR_291 ) ; return ( METHOD_46 ( VAR_292 ) ) ; } VAR_293 = METHOD_47 ( VAR_294 , VAR_295 -> VAR_296 , VAR_297 -> VAR_298 , VAR_299 ) ; if ( VAR_300 == VAR_301 ) return ( METHOD_48 ( VAR_302 ) ) ; if ( ( VAR_303 . VAR_304 * sizeof ( * VAR_305 ) ) / sizeof ( * VAR_306 ) != VAR_307 . VAR_308 || ! VAR_309 . VAR_310 )  METHOD_49 ( VAR_311 , ""MemoryAllocationFailed"" ) ;  VAR_312 = ( TYPE_41 ) VAR_313 -> VAR_314 * VAR_315 -> VAR_316 ; if ( ( VAR_317 . VAR_318 != VAR_319 ) && ( ( VAR_320 * VAR_321 . VAR_322 ) > ( 8 * VAR_323 . VAR_324 ) ) ) METHOD_50 ( VAR_325 , ""ImproperImageHeader"" ) ; VAR_326 = VAR_327 . VAR_328 * VAR_329 . VAR_330 ; VAR_331 = ( unsigned TYPE_42 * ) METHOD_51 ( ( TYPE_43 ) METHOD_52 ( VAR_332 . VAR_333 , VAR_334 * VAR_335 . VAR_336 ) , sizeof ( * VAR_337 ) ) ; if ( VAR_338 == ( unsigned TYPE_44 * ) VAR_339 ) METHOD_53 ( VAR_340 , ""MemoryAllocationFailed"" ) ; VAR_341 = ( TYPE_45 ) METHOD_54 ( VAR_342 , VAR_343 . VAR_344 , VAR_345 ) ; if ( VAR_346 != ( TYPE_46 ) VAR_347 . VAR_348 ) METHOD_55 ( VAR_349 , ""UnableToReadImageData"" ) ; VAR_350 = VAR_351 . VAR_352 ; if ( ( VAR_353 == 0 ) || ( VAR_354 . VAR_355 == 0 ) || ( VAR_356 . VAR_357 == 0 ) || ( ( VAR_358 / VAR_359 . VAR_360 ) != VAR_361 . VAR_362 ) )  METHOD_56 ( VAR_363 , ""MemoryAllocationFailed"" ) ;  VAR_364 += 15 ; VAR_365 <<= 1 ; if ( ( VAR_366 >> 1 ) != ( VAR_367 . VAR_368 * VAR_369 . VAR_370 + 15 ) )  METHOD_57 ( VAR_371 , ""MemoryAllocationFailed"" ) ;  VAR_372 >>= 4 ; VAR_373 = ( unsigned TYPE_47 * ) METHOD_58 ( VAR_374 , VAR_375 * sizeof ( * VAR_376 ) ) ; if ( VAR_377 == ( unsigned TYPE_48 * ) VAR_378 ) METHOD_59 ( VAR_379 , ""MemoryAllocationFailed"" ) ; if ( VAR_380 . VAR_381 == VAR_382 ) ( TYPE_49 ) METHOD_60 ( VAR_383 , VAR_384 . VAR_385 , VAR_386 , VAR_387 *  VAR_388 ) ;  VAR_389 = ( unsigned TYPE_50 * ) METHOD_61 ( VAR_390 ) ; VAR_391 = VAR_392 ; if ( VAR_393 . VAR_394 == 1 ) for ( VAR_395 = 0 ; VAR_396 < ( TYPE_51 ) VAR_397 -> VAR_398 ; VAR_399 ++ ) { VAR_400 = METHOD_62 ( VAR_401 , 0 , VAR_402 , VAR_403 -> VAR_404 , 1 , VAR_405 ) ; if ( VAR_406 == ( TYPE_52 * ) VAR_407 ) break ; for ( VAR_408 = 0 ; VAR_409 < ( ( TYPE_53 ) VAR_410 -> VAR_411 - 7 ) ; VAR_412 += 8 ) { for ( VAR_413 = 7 ; VAR_414 >= 0 ; VAR_415 -- ) { METHOD_63 ( VAR_416 , ( TYPE_54 ) ( ( * VAR_417 ) & ( 0x01 << VAR_418 ) ? 0x00 : 0x01 ) , VAR_419 ) ; VAR_420 += METHOD_64 ( VAR_421 ) ; } VAR_422 ++ ; } if ( ( VAR_423 -> VAR_424 % 8 ) != 0 ) { for ( VAR_425 = 7 ; VAR_426 >= ( TYPE_55 ) ( 8 - ( VAR_427 -> VAR_428 % 8 ) ) ; VAR_429 -- ) { METHOD_65 ( VAR_430 , ( TYPE_56 ) ( ( * VAR_431 ) & ( 0x01 << VAR_432 ) ? 0x00 : 0x01 ) , VAR_433 ) ; VAR_434 += METHOD_66 ( VAR_435 ) ; } VAR_436 ++ ; } if ( ( ( ( VAR_437 -> VAR_438 / 8 ) + ( VAR_439 -> VAR_440 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_441 ++ ; if ( METHOD_67 ( VAR_442 , VAR_443 ) == VAR_444 ) break ; if ( VAR_445 -> VAR_446 == ( TYPE_57 * ) VAR_447 ) { VAR_448 = METHOD_68 ( VAR_449 , VAR_450 , ( TYPE_58 ) VAR_451 , VAR_452 -> VAR_453 ) ; if ( VAR_454 == VAR_455 ) break ; } } else if ( VAR_456 -> VAR_457 == VAR_458 ) { if ( VAR_459 == 0 ) VAR_460 = VAR_461 -> VAR_462 ; VAR_463 = VAR_464 -> VAR_465 * ( VAR_466 -> VAR_467 + VAR_468 -> VAR_469 % 2 ) ; if ( ( ( VAR_470 . VAR_471 == VAR_472 ) && ( VAR_473 > ( VAR_474 * VAR_475 -> VAR_476 ) ) ) || ( ( VAR_477 . VAR_478 != VAR_479 ) && ( VAR_480 > VAR_481 . VAR_482 ) ) ) METHOD_69 ( VAR_483 , ""UnableToReadImageData"" ) ; for ( VAR_484 = 0 ; VAR_485 < ( TYPE_59 ) VAR_486 -> VAR_487 ; VAR_488 ++ ) { VAR_489 = METHOD_70 ( VAR_490 , 0 , VAR_491 , VAR_492 -> VAR_493 , 1 , VAR_494 ) ; if ( VAR_495 == ( TYPE_60 * ) VAR_496 ) break ; for ( VAR_497 = 0 ; VAR_498 < ( TYPE_61 ) VAR_499 -> VAR_500 ; VAR_501 ++ ) { METHOD_71 ( VAR_502 , * VAR_503 ++ , VAR_504 ) ; VAR_505 += METHOD_72 ( VAR_506 ) ; } if ( ( VAR_507 -> VAR_508 % 2 ) != 0 ) VAR_509 ++ ; if ( METHOD_73 ( VAR_510 , VAR_511 ) == VAR_512 ) break ; if ( VAR_513 -> VAR_514 == ( TYPE_62 * ) VAR_515 ) { VAR_516 = METHOD_74 ( VAR_517 , VAR_518 , ( TYPE_63 ) VAR_519 , VAR_520 -> VAR_521 ) ; if ( VAR_522 == VAR_523 ) break ; } } } else { TYPE_64 VAR_524 ; VAR_525 = 3 ; if ( VAR_526 -> VAR_527 != VAR_528 ) VAR_529 ++ ; if ( VAR_530 == 0 ) VAR_531 = VAR_532 * VAR_533 -> VAR_534 ; VAR_535 = VAR_536 -> VAR_537 * ( VAR_538 + VAR_539 % 2 ) ; if ( ( ( VAR_540 . VAR_541 == VAR_542 ) && ( VAR_543 > ( VAR_544 * VAR_545 -> VAR_546 ) ) ) || ( ( VAR_547 . VAR_548 != VAR_549 ) && ( VAR_550 > VAR_551 . VAR_552 ) ) ) METHOD_75 ( VAR_553 , ""UnableToReadImageData"" ) ; for ( VAR_554 = 0 ; VAR_555 < ( TYPE_65 ) VAR_556 -> VAR_557 ; VAR_558 ++ ) { VAR_559 = METHOD_76 ( VAR_560 , 0 , VAR_561 , VAR_562 -> VAR_563 , 1 , VAR_564 ) ; if ( VAR_565 == ( TYPE_66 * ) VAR_566 ) break ; for ( VAR_567 = 0 ; VAR_568 < ( TYPE_67 ) VAR_569 -> VAR_570 ; VAR_571 ++ ) { if ( VAR_572 -> VAR_573 != VAR_574 ) METHOD_77 ( VAR_575 , METHOD_78 ( * VAR_576 ++ ) , VAR_577 ) ; if ( VAR_578 . VAR_579 == VAR_580 ) { METHOD_79 ( VAR_581 , METHOD_80 ( * VAR_582 ++ ) , VAR_583 ) ; METHOD_81 ( VAR_584 , METHOD_82 ( * VAR_585 ++ ) , VAR_586 ) ; METHOD_83 ( VAR_587 , METHOD_84 ( * VAR_588 ++ ) , VAR_589 ) ; } else { METHOD_85 ( VAR_590 , METHOD_86 ( * VAR_591 ++ ) , VAR_592 ) ; METHOD_87 ( VAR_593 , METHOD_88 ( * VAR_594 ++ ) , VAR_595 ) ; METHOD_89 ( VAR_596 , METHOD_90 ( * VAR_597 ++ ) , VAR_598 ) ; } if ( VAR_599 -> VAR_600 != 0 ) { METHOD_91 ( VAR_601 , METHOD_92 ( VAR_602 -> VAR_603 [ ( TYPE_68 ) METHOD_93 ( VAR_604 , VAR_605 ) ] . VAR_606 ) , VAR_607 ) ; METHOD_94 ( VAR_608 , METHOD_95 ( VAR_609 -> VAR_610 [ ( TYPE_69 ) METHOD_96 ( VAR_611 , VAR_612 ) ] . VAR_613 ) , VAR_614 ) ; METHOD_97 ( VAR_615 , METHOD_98 ( VAR_616 -> VAR_617 [ ( TYPE_70 ) METHOD_99 ( VAR_618 , VAR_619 ) ] . VAR_620 ) , VAR_621 ) ; } VAR_622 += METHOD_100 ( VAR_623 ) ; } if ( ( ( VAR_624 * VAR_625 -> VAR_626 ) % 2 ) != 0 ) VAR_627 ++ ; if ( METHOD_101 ( VAR_628 , VAR_629 ) == VAR_630 ) break ; if ( VAR_631 -> VAR_632 == ( TYPE_71 * ) VAR_633 ) { VAR_634 = METHOD_102 ( VAR_635 , VAR_636 , ( TYPE_72 ) VAR_637 , VAR_638 -> VAR_639 ) ; if ( VAR_640 == VAR_641 ) break ; } } } if ( VAR_642 -> VAR_643 == VAR_644 ) ( TYPE_73 ) METHOD_103 ( VAR_645 , VAR_646 ) ; VAR_647 = ( unsigned TYPE_74 * ) METHOD_104 ( VAR_648 ) ; if ( METHOD_105 ( VAR_649 ) != VAR_650 ) { METHOD_106 ( VAR_651 , VAR_652 , ""UnexpectedEndOfFile"" , VAR_653 -> VAR_654 ) ; break ; } if ( VAR_655 -> VAR_656 != 0 ) if ( VAR_657 -> VAR_658 >= ( VAR_659 -> VAR_660 + VAR_661 -> VAR_662 - 1 ) ) break ; VAR_663 . VAR_664 = METHOD_107 ( VAR_665 ) ; if ( VAR_666 . VAR_667 == 0x59a66a95 ) { METHOD_108 ( VAR_668 , VAR_669 , VAR_670 ) ; if ( METHOD_109 ( VAR_671 ) == ( TYPE_75 * ) VAR_672 ) { VAR_673 = METHOD_110 ( VAR_674 ) ; return ( ( TYPE_76 * ) VAR_675 ) ; } VAR_676 = METHOD_111 ( VAR_677 ) ; VAR_678 = METHOD_112 ( VAR_679 , VAR_680 , METHOD_113 ( VAR_681 ) , METHOD_114 ( VAR_682 ) ) ; if ( VAR_683 == VAR_684 ) break ; } } while ( VAR_685 . VAR_686 == 0x59a66a95 ) ; ( TYPE_77 ) METHOD_115 ( VAR_687 ) ; return ( METHOD_116 ( VAR_688 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 1 VAR_3 0 VAR_4 2 VAR_5 1 VAR_6 2 VAR_7 3 typedef struct STRUCT_OR_UNION_0 { unsigned TYPE_3 VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 , VAR_14 , VAR_15 ; } TYPE_4 ; TYPE_5 * VAR_16 ; TYPE_6 VAR_17 ; TYPE_7 VAR_18 ; TYPE_8 VAR_19 ; register TYPE_9 * VAR_20 ; register TYPE_10 VAR_21 , VAR_22 ; register unsigned TYPE_11 * VAR_23 ; TYPE_12 VAR_24 , VAR_25 , VAR_26 , VAR_27 ; TYPE_13 VAR_28 , VAR_29 ; TYPE_14 VAR_30 ; unsigned TYPE_15 * VAR_31 , * VAR_32 ; METHOD_1 ( VAR_33 != ( const TYPE_16 * ) VAR_34 ) ; METHOD_2 ( VAR_35 -> VAR_36 == VAR_37 ) ; if ( VAR_38 -> VAR_39 != VAR_40 ) ( TYPE_17 ) METHOD_3 ( VAR_41 , METHOD_4 ( ) , ""%s"" , VAR_42 -> VAR_43 ) ; METHOD_5 ( VAR_44 != ( TYPE_18 * ) VAR_45 ) ; METHOD_6 ( VAR_46 -> VAR_47 == VAR_48 ) ; VAR_49 = METHOD_7 ( VAR_50 , VAR_51 ) ; VAR_52 = METHOD_8 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; if ( VAR_57 == VAR_58 ) { VAR_59 = METHOD_9 ( VAR_60 ) ; return ( ( TYPE_19 * ) VAR_61 ) ; } ( TYPE_20 ) METHOD_10 ( & VAR_62 , 0 , sizeof ( VAR_63 ) ) ; VAR_64 . VAR_65 = METHOD_11 ( VAR_66 ) ; do { if ( VAR_67 . VAR_68 != 0x59a66a95 ) METHOD_12 ( VAR_69 , ""ImproperImageHeader"" ) ; VAR_70 . VAR_71 = METHOD_13 ( VAR_72 ) ; VAR_73 . VAR_74 = METHOD_14 ( VAR_75 ) ; VAR_76 . VAR_77 = METHOD_15 ( VAR_78 ) ; VAR_79 . VAR_80 = METHOD_16 ( VAR_81 ) ; VAR_82 . VAR_83 = METHOD_17 ( VAR_84 ) ; VAR_85 . VAR_86 = METHOD_18 ( VAR_87 ) ; VAR_88 . VAR_89 = METHOD_19 ( VAR_90 ) ; VAR_91 = VAR_92 . VAR_93 * VAR_94 . VAR_95 ; if ( ( VAR_96 . VAR_97 != 0 ) && ( VAR_98 . VAR_99 != VAR_100 / VAR_101 . VAR_102 ) ) METHOD_20 ( VAR_103 , ""ImproperImageHeader"" ) ; if ( ( VAR_104 . VAR_105 != VAR_106 ) && ( VAR_107 . VAR_108 != VAR_109 ) && ( VAR_110 . VAR_111 != VAR_112 ) ) METHOD_21 ( VAR_113 , ""ImproperImageHeader"" ) ; if ( ( VAR_114 . VAR_115 == VAR_116 ) && ( VAR_117 . VAR_118 != 0 ) ) METHOD_22 ( VAR_119 , ""ImproperImageHeader"" ) ; if ( ( VAR_120 . VAR_121 == 0 ) || ( VAR_122 . VAR_123 > 32 ) ) METHOD_23 ( VAR_124 , ""ImproperImageHeader"" ) ; if ( ( VAR_125 . VAR_126 != VAR_127 ) && ( VAR_128 . VAR_129 != VAR_130 ) && ( VAR_131 . VAR_132 != VAR_133 ) ) METHOD_24 ( VAR_134 , ""ColormapTypeNotSupported"" ) ; VAR_135 -> VAR_136 = VAR_137 . VAR_138 ; VAR_139 -> VAR_140 = VAR_141 . VAR_142 ; VAR_143 -> VAR_144 = VAR_145 . VAR_146 <= 8 ? VAR_147 . VAR_148 : VAR_149 ; if ( VAR_150 . VAR_151 < 24 ) { TYPE_21 VAR_152 ; VAR_153 -> VAR_154 = VAR_155 . VAR_156 ; VAR_157 = 1 ; if ( VAR_158 . VAR_159 == VAR_160 ) VAR_161 -> VAR_162 = VAR_163 << VAR_164 . VAR_165 ; if ( VAR_166 . VAR_167 == VAR_168 ) VAR_169 -> VAR_170 = VAR_171 . VAR_172 / 3 ; if ( METHOD_25 ( VAR_173 , VAR_174 -> VAR_175 , VAR_176 ) == VAR_177 ) METHOD_26 ( VAR_178 , ""MemoryAllocationFailed"" ) ; } switch ( VAR_179 . VAR_180 ) { case VAR_181 : break ; case VAR_182 : { unsigned TYPE_22 * VAR_183 ; VAR_184 = ( unsigned TYPE_23 * ) METHOD_27 ( VAR_185 -> VAR_186 , sizeof ( * VAR_187 ) ) ; if ( VAR_188 == ( unsigned TYPE_24 * ) VAR_189 ) METHOD_28 ( VAR_190 , ""MemoryAllocationFailed"" ) ; VAR_191 = METHOD_29 ( VAR_192 , VAR_193 -> VAR_194 , VAR_195 ) ; if ( VAR_196 != ( TYPE_25 ) VAR_197 -> VAR_198 ) METHOD_30 ( VAR_199 , ""UnexpectedEndOfFile"" ) ; for ( VAR_200 = 0 ; VAR_201 < ( TYPE_26 ) VAR_202 -> VAR_203 ; VAR_204 ++ ) VAR_205 -> VAR_206 [ VAR_207 ] . VAR_208 = ( TYPE_27 ) METHOD_31 ( VAR_209 [ VAR_210 ] ) ; VAR_211 = METHOD_32 ( VAR_212 , VAR_213 -> VAR_214 , VAR_215 ) ; if ( VAR_216 != ( TYPE_28 ) VAR_217 -> VAR_218 ) METHOD_33 ( VAR_219 , ""UnexpectedEndOfFile"" ) ; for ( VAR_220 = 0 ; VAR_221 < ( TYPE_29 ) VAR_222 -> VAR_223 ; VAR_224 ++ ) VAR_225 -> VAR_226 [ VAR_227 ] . VAR_228 = ( TYPE_30 ) METHOD_34 ( VAR_229 [ VAR_230 ] ) ; VAR_231 = METHOD_35 ( VAR_232 , VAR_233 -> VAR_234 , VAR_235 ) ; if ( VAR_236 != ( TYPE_31 ) VAR_237 -> VAR_238 ) METHOD_36 ( VAR_239 , ""UnexpectedEndOfFile"" ) ; for ( VAR_240 = 0 ; VAR_241 < ( TYPE_32 ) VAR_242 -> VAR_243 ; VAR_244 ++ ) VAR_245 -> VAR_246 [ VAR_247 ] . VAR_248 = ( TYPE_33 ) METHOD_37 ( VAR_249 [ VAR_250 ] ) ; VAR_251 = ( unsigned TYPE_34 * ) METHOD_38 ( VAR_252 ) ; break ; } case VAR_253 : { unsigned TYPE_35 * VAR_254 ; VAR_255 = ( unsigned TYPE_36 * ) METHOD_39 ( VAR_256 . VAR_257 , sizeof ( * VAR_258 ) ) ; if ( VAR_259 == ( unsigned TYPE_37 * ) VAR_260 ) METHOD_40 ( VAR_261 , ""MemoryAllocationFailed"" ) ; VAR_262 = METHOD_41 ( VAR_263 , VAR_264 . VAR_265 , VAR_266 ) ; if ( VAR_267 != ( TYPE_38 ) VAR_268 . VAR_269 ) METHOD_42 ( VAR_270 , ""UnexpectedEndOfFile"" ) ; VAR_271 = ( unsigned TYPE_39 * ) METHOD_43 ( VAR_272 ) ; break ; } default : METHOD_44 ( VAR_273 , ""ColormapTypeNotSupported"" ) ; } VAR_274 -> VAR_275 = VAR_276 . VAR_277 == 32 ? VAR_278 : VAR_279 ; VAR_280 -> VAR_281 = VAR_282 . VAR_283 ; VAR_284 -> VAR_285 = VAR_286 . VAR_287 ; if ( VAR_288 -> VAR_289 != VAR_290 ) { ( TYPE_40 ) METHOD_45 ( VAR_291 ) ; return ( METHOD_46 ( VAR_292 ) ) ; } VAR_293 = METHOD_47 ( VAR_294 , VAR_295 -> VAR_296 , VAR_297 -> VAR_298 , VAR_299 ) ; if ( VAR_300 == VAR_301 ) return ( METHOD_48 ( VAR_302 ) ) ; if ( ( VAR_303 . VAR_304 * sizeof ( * VAR_305 ) ) / sizeof ( * VAR_306 ) != VAR_307 . VAR_308 || ! VAR_309 . VAR_310 ) METHOD_49 ( VAR_311 , ""MemoryAllocationFailed"" ) ; VAR_312 = ( TYPE_41 ) VAR_313 -> VAR_314 * VAR_315 -> VAR_316 ; if ( ( VAR_317 . VAR_318 != VAR_319 ) && ( ( VAR_320 * VAR_321 . VAR_322 ) > ( 8 * VAR_323 . VAR_324 ) ) ) METHOD_50 ( VAR_325 , ""ImproperImageHeader"" ) ; VAR_326 = VAR_327 . VAR_328 * VAR_329 . VAR_330 ; VAR_331 = ( unsigned TYPE_42 * ) METHOD_51 ( ( TYPE_43 ) METHOD_52 ( VAR_332 . VAR_333 , VAR_334 * VAR_335 . VAR_336 ) , sizeof ( * VAR_337 ) ) ; if ( VAR_338 == ( unsigned TYPE_44 * ) VAR_339 ) METHOD_53 ( VAR_340 , ""MemoryAllocationFailed"" ) ; VAR_341 = ( TYPE_45 ) METHOD_54 ( VAR_342 , VAR_343 . VAR_344 , VAR_345 ) ; if ( VAR_346 != ( TYPE_46 ) VAR_347 . VAR_348 ) METHOD_55 ( VAR_349 , ""UnableToReadImageData"" ) ; VAR_350 = VAR_351 . VAR_352 ; if ( ( VAR_353 == 0 ) || ( VAR_354 . VAR_355 == 0 ) || ( VAR_356 . VAR_357 == 0 ) || ( ( VAR_358 / VAR_359 . VAR_360 ) != VAR_361 . VAR_362 ) ) METHOD_56 ( VAR_363 , ""MemoryAllocationFailed"" ) ; VAR_364 += 15 ; VAR_365 <<= 1 ; if ( ( VAR_366 >> 1 ) != ( VAR_367 . VAR_368 * VAR_369 . VAR_370 + 15 ) ) METHOD_57 ( VAR_371 , ""MemoryAllocationFailed"" ) ; VAR_372 >>= 4 ; VAR_373 = ( unsigned TYPE_47 * ) METHOD_58 ( VAR_374 , VAR_375 * sizeof ( * VAR_376 ) ) ; if ( VAR_377 == ( unsigned TYPE_48 * ) VAR_378 ) METHOD_59 ( VAR_379 , ""MemoryAllocationFailed"" ) ; if ( VAR_380 . VAR_381 == VAR_382 ) ( TYPE_49 ) METHOD_60 ( VAR_383 , VAR_384 . VAR_385 , VAR_386 , VAR_387 * VAR_388 ) ; else { if ( VAR_685 . VAR_552 > ( VAR_388 * VAR_544 ) ) METHOD_75 ( VAR_379 , ""ImproperImageHeader"" ) ; ( TYPE_77 ) METHOD_117 ( VAR_648 , VAR_390 , VAR_685 . VAR_552 ) ; } VAR_389 = ( unsigned TYPE_50 * ) METHOD_61 ( VAR_390 ) ; VAR_391 = VAR_392 ; if ( VAR_393 . VAR_394 == 1 ) for ( VAR_395 = 0 ; VAR_396 < ( TYPE_51 ) VAR_397 -> VAR_398 ; VAR_399 ++ ) { VAR_400 = METHOD_62 ( VAR_401 , 0 , VAR_402 , VAR_403 -> VAR_404 , 1 , VAR_405 ) ; if ( VAR_406 == ( TYPE_52 * ) VAR_407 ) break ; for ( VAR_408 = 0 ; VAR_409 < ( ( TYPE_53 ) VAR_410 -> VAR_411 - 7 ) ; VAR_412 += 8 ) { for ( VAR_413 = 7 ; VAR_414 >= 0 ; VAR_415 -- ) { METHOD_63 ( VAR_416 , ( TYPE_54 ) ( ( * VAR_417 ) & ( 0x01 << VAR_418 ) ? 0x00 : 0x01 ) , VAR_419 ) ; VAR_420 += METHOD_64 ( VAR_421 ) ; } VAR_422 ++ ; } if ( ( VAR_423 -> VAR_424 % 8 ) != 0 ) { for ( VAR_425 = 7 ; VAR_426 >= ( TYPE_55 ) ( 8 - ( VAR_427 -> VAR_428 % 8 ) ) ; VAR_429 -- ) { METHOD_65 ( VAR_430 , ( TYPE_56 ) ( ( * VAR_431 ) & ( 0x01 << VAR_432 ) ? 0x00 : 0x01 ) , VAR_433 ) ; VAR_434 += METHOD_66 ( VAR_435 ) ; } VAR_436 ++ ; } if ( ( ( ( VAR_437 -> VAR_438 / 8 ) + ( VAR_439 -> VAR_440 % 8 ? 1 : 0 ) ) % 2 ) != 0 ) VAR_441 ++ ; if ( METHOD_67 ( VAR_442 , VAR_443 ) == VAR_444 ) break ; if ( VAR_445 -> VAR_446 == ( TYPE_57 * ) VAR_447 ) { VAR_448 = METHOD_68 ( VAR_449 , VAR_450 , ( TYPE_58 ) VAR_451 , VAR_452 -> VAR_453 ) ; if ( VAR_454 == VAR_455 ) break ; } } else if ( VAR_456 -> VAR_457 == VAR_458 ) { if ( VAR_459 == 0 ) VAR_460 = VAR_461 -> VAR_462 ; VAR_463 = VAR_464 -> VAR_465 * ( VAR_466 -> VAR_467 + VAR_468 -> VAR_469 % 2 ) ; if ( ( ( VAR_470 . VAR_471 == VAR_472 ) && ( VAR_473 > ( VAR_474 * VAR_475 -> VAR_476 ) ) ) || ( ( VAR_477 . VAR_478 != VAR_479 ) && ( VAR_480 > VAR_481 . VAR_482 ) ) ) METHOD_69 ( VAR_483 , ""UnableToReadImageData"" ) ; for ( VAR_484 = 0 ; VAR_485 < ( TYPE_59 ) VAR_486 -> VAR_487 ; VAR_488 ++ ) { VAR_489 = METHOD_70 ( VAR_490 , 0 , VAR_491 , VAR_492 -> VAR_493 , 1 , VAR_494 ) ; if ( VAR_495 == ( TYPE_60 * ) VAR_496 ) break ; for ( VAR_497 = 0 ; VAR_498 < ( TYPE_61 ) VAR_499 -> VAR_500 ; VAR_501 ++ ) { METHOD_71 ( VAR_502 , * VAR_503 ++ , VAR_504 ) ; VAR_505 += METHOD_72 ( VAR_506 ) ; } if ( ( VAR_507 -> VAR_508 % 2 ) != 0 ) VAR_509 ++ ; if ( METHOD_73 ( VAR_510 , VAR_511 ) == VAR_512 ) break ; if ( VAR_513 -> VAR_514 == ( TYPE_62 * ) VAR_515 ) { VAR_516 = METHOD_74 ( VAR_517 , VAR_518 , ( TYPE_63 ) VAR_519 , VAR_520 -> VAR_521 ) ; if ( VAR_522 == VAR_523 ) break ; } } } else { TYPE_64 VAR_524 ; VAR_525 = 3 ; if ( VAR_526 -> VAR_527 != VAR_528 ) VAR_529 ++ ; if ( VAR_530 == 0 ) VAR_531 = VAR_532 * VAR_533 -> VAR_534 ; VAR_535 = VAR_536 -> VAR_537 * ( VAR_538 + VAR_539 % 2 ) ; if ( ( ( VAR_540 . VAR_541 == VAR_542 ) && ( VAR_543 > ( VAR_544 * VAR_545 -> VAR_546 ) ) ) || ( ( VAR_547 . VAR_548 != VAR_549 ) && ( VAR_550 > VAR_551 . VAR_552 ) ) ) METHOD_75 ( VAR_553 , ""UnableToReadImageData"" ) ; for ( VAR_554 = 0 ; VAR_555 < ( TYPE_65 ) VAR_556 -> VAR_557 ; VAR_558 ++ ) { VAR_559 = METHOD_76 ( VAR_560 , 0 , VAR_561 , VAR_562 -> VAR_563 , 1 , VAR_564 ) ; if ( VAR_565 == ( TYPE_66 * ) VAR_566 ) break ; for ( VAR_567 = 0 ; VAR_568 < ( TYPE_67 ) VAR_569 -> VAR_570 ; VAR_571 ++ ) { if ( VAR_572 -> VAR_573 != VAR_574 ) METHOD_77 ( VAR_575 , METHOD_78 ( * VAR_576 ++ ) , VAR_577 ) ; if ( VAR_578 . VAR_579 == VAR_580 ) { METHOD_79 ( VAR_581 , METHOD_80 ( * VAR_582 ++ ) , VAR_583 ) ; METHOD_81 ( VAR_584 , METHOD_82 ( * VAR_585 ++ ) , VAR_586 ) ; METHOD_83 ( VAR_587 , METHOD_84 ( * VAR_588 ++ ) , VAR_589 ) ; } else { METHOD_85 ( VAR_590 , METHOD_86 ( * VAR_591 ++ ) , VAR_592 ) ; METHOD_87 ( VAR_593 , METHOD_88 ( * VAR_594 ++ ) , VAR_595 ) ; METHOD_89 ( VAR_596 , METHOD_90 ( * VAR_597 ++ ) , VAR_598 ) ; } if ( VAR_599 -> VAR_600 != 0 ) { METHOD_91 ( VAR_601 , METHOD_92 ( VAR_602 -> VAR_603 [ ( TYPE_68 ) METHOD_93 ( VAR_604 , VAR_605 ) ] . VAR_606 ) , VAR_607 ) ; METHOD_94 ( VAR_608 , METHOD_95 ( VAR_609 -> VAR_610 [ ( TYPE_69 ) METHOD_96 ( VAR_611 , VAR_612 ) ] . VAR_613 ) , VAR_614 ) ; METHOD_97 ( VAR_615 , METHOD_98 ( VAR_616 -> VAR_617 [ ( TYPE_70 ) METHOD_99 ( VAR_618 , VAR_619 ) ] . VAR_620 ) , VAR_621 ) ; } VAR_622 += METHOD_100 ( VAR_623 ) ; } if ( ( ( VAR_624 * VAR_625 -> VAR_626 ) % 2 ) != 0 ) VAR_627 ++ ; if ( METHOD_101 ( VAR_628 , VAR_629 ) == VAR_630 ) break ; if ( VAR_631 -> VAR_632 == ( TYPE_71 * ) VAR_633 ) { VAR_634 = METHOD_102 ( VAR_635 , VAR_636 , ( TYPE_72 ) VAR_637 , VAR_638 -> VAR_639 ) ; if ( VAR_640 == VAR_641 ) break ; } } } if ( VAR_642 -> VAR_643 == VAR_644 ) ( TYPE_73 ) METHOD_103 ( VAR_645 , VAR_646 ) ; VAR_647 = ( unsigned TYPE_74 * ) METHOD_104 ( VAR_648 ) ; if ( METHOD_105 ( VAR_649 ) != VAR_650 ) { METHOD_106 ( VAR_651 , VAR_652 , ""UnexpectedEndOfFile"" , VAR_653 -> VAR_654 ) ; break ; } if ( VAR_655 -> VAR_656 != 0 ) if ( VAR_657 -> VAR_658 >= ( VAR_659 -> VAR_660 + VAR_661 -> VAR_662 - 1 ) ) break ; VAR_663 . VAR_664 = METHOD_107 ( VAR_665 ) ; if ( VAR_666 . VAR_667 == 0x59a66a95 ) { METHOD_108 ( VAR_668 , VAR_669 , VAR_670 ) ; if ( METHOD_109 ( VAR_671 ) == ( TYPE_75 * ) VAR_672 ) { VAR_673 = METHOD_110 ( VAR_674 ) ; return ( ( TYPE_76 * ) VAR_675 ) ; } VAR_676 = METHOD_111 ( VAR_677 ) ; VAR_678 = METHOD_112 ( VAR_679 , VAR_680 , METHOD_113 ( VAR_681 ) , METHOD_114 ( VAR_682 ) ) ; if ( VAR_683 == VAR_684 ) break ; } } while ( VAR_685 . VAR_686 == 0x59a66a95 ) ; ( TYPE_77 ) METHOD_115 ( VAR_687 ) ; return ( METHOD_116 ( VAR_688 ) ) ; }",689
690,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_3 VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 = ( struct STRUCT_OR_UNION_5 * ) VAR_13 ; TYPE_5 VAR_14 ;  VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ;  if ( METHOD_2 ( VAR_18 == 0 ) )  return 0 ;  VAR_19 = 0 ; VAR_20 = 0 ; METHOD_3 ( VAR_21 ) ; for ( ; ; ) { TYPE_6 VAR_22 = VAR_23 -> VAR_24 ; if ( VAR_25 ) { TYPE_7 VAR_26 = VAR_27 -> VAR_28 ; struct STRUCT_OR_UNION_6 * VAR_29 = VAR_30 -> VAR_31 + VAR_32 ; const struct STRUCT_OR_UNION_7 * VAR_33 = VAR_34 -> VAR_35 ;  TYPE_8 * VAR_36 ;   TYPE_9 VAR_37 = VAR_38 -> VAR_39 ;   TYPE_10 VAR_40 , VAR_41 ;  if ( VAR_42 > VAR_43 ) VAR_44 = VAR_45 ; VAR_46 = VAR_47 -> METHOD_4 ( VAR_48 , VAR_49 ) ; if ( VAR_50 ) { if ( ! VAR_51 ) VAR_52 = VAR_53 ; break ; }  VAR_54 = ! METHOD_5 ( VAR_55 , VAR_56 ) ;  VAR_57 : if ( VAR_58 ) VAR_59 = METHOD_6 ( VAR_60 -> VAR_61 ) ; else VAR_62 = METHOD_7 ( VAR_63 -> VAR_64 ) ; VAR_65 = METHOD_8 ( VAR_66 , VAR_67 + VAR_68 -> VAR_69 , VAR_70 , VAR_71 ) ; if ( VAR_72 ) METHOD_9 ( VAR_73 ) ; else METHOD_10 ( VAR_74 -> VAR_75 ) ; if ( METHOD_11 ( VAR_76 ) ) { if ( VAR_77 ) { VAR_78 = 0 ; goto VAR_79 ; } if ( ! VAR_80 ) VAR_81 = VAR_82 ; break ; } VAR_83 += VAR_84 ; VAR_85 -> VAR_86 += VAR_87 ; VAR_88 -> VAR_89 -= VAR_90 ; if ( VAR_91 -> VAR_92 & VAR_93 ) { VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = 0 ; } if ( ! VAR_98 -> VAR_99 ) { VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> METHOD_12 ( VAR_104 , VAR_105 ) ; VAR_106 = ( VAR_107 + 1 ) & ( VAR_108 -> VAR_109 - 1 ) ; VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = -- VAR_115 ; VAR_116 = 1 ; } VAR_117 -= VAR_118 ; if ( ! VAR_119 ) break ; } if ( VAR_120 ) continue ; if ( ! VAR_121 -> VAR_122 ) break ; if ( ! VAR_123 -> VAR_124 ) { if ( VAR_125 ) break ; if ( VAR_126 -> VAR_127 & VAR_128 ) { VAR_129 = - VAR_130 ; break ; } } if ( METHOD_13 ( VAR_131 ) ) { if ( ! VAR_132 ) VAR_133 = - VAR_134 ; break ; } if ( VAR_135 ) { METHOD_14 ( & VAR_136 -> VAR_137 , VAR_138 | VAR_139 ) ; METHOD_15 ( & VAR_140 -> VAR_141 , VAR_142 , VAR_143 ) ; } METHOD_16 ( VAR_144 ) ; } METHOD_17 ( VAR_145 ) ; if ( VAR_146 ) { METHOD_18 ( & VAR_147 -> VAR_148 , VAR_149 | VAR_150 ) ; METHOD_19 ( & VAR_151 -> VAR_152 , VAR_153 , VAR_154 ) ; } if ( VAR_155 > 0 ) METHOD_20 ( VAR_156 ) ; return VAR_157 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const struct STRUCT_OR_UNION_1 * VAR_1 , unsigned TYPE_1 VAR_2 , TYPE_2 VAR_3 ) { struct STRUCT_OR_UNION_2 * VAR_4 = VAR_5 -> VAR_6 ; struct STRUCT_OR_UNION_3 * VAR_7 = VAR_8 -> VAR_9 ; TYPE_3 VAR_10 ; TYPE_4 VAR_11 ; struct STRUCT_OR_UNION_4 * VAR_12 = ( struct STRUCT_OR_UNION_5 * ) VAR_13 ; TYPE_5 VAR_14 ; VAR_15 = METHOD_1 ( VAR_16 , VAR_17 ) ; if ( METHOD_2 ( VAR_18 == 0 ) ) return 0 ; METHOD_21 ( & VAR_158 , VAR_66 , VAR_17 , VAR_119 , 0 ) ; VAR_19 = 0 ; VAR_20 = 0 ; METHOD_3 ( VAR_21 ) ; for ( ; ; ) { TYPE_6 VAR_22 = VAR_23 -> VAR_24 ; if ( VAR_25 ) { TYPE_7 VAR_26 = VAR_27 -> VAR_28 ; struct STRUCT_OR_UNION_6 * VAR_29 = VAR_30 -> VAR_31 + VAR_32 ; const struct STRUCT_OR_UNION_7 * VAR_33 = VAR_34 -> VAR_35 ; TYPE_8 * VAR_36 ; TYPE_9 VAR_37 = VAR_38 -> VAR_39 ; TYPE_10 VAR_40 , VAR_41 ; if ( VAR_42 > VAR_43 ) VAR_44 = VAR_45 ; VAR_46 = VAR_47 -> METHOD_4 ( VAR_48 , VAR_49 ) ; if ( VAR_50 ) { if ( ! VAR_51 ) VAR_52 = VAR_53 ; break ; } VAR_159 = METHOD_22 ( VAR_105 -> VAR_75 , VAR_105 -> VAR_86 , VAR_118 , & VAR_158 ) ; if ( METHOD_11 ( VAR_159 < VAR_118 ) ) { if ( ! VAR_157 ) VAR_157 = - VAR_160 ; break ; } VAR_83 += VAR_84 ; VAR_85 -> VAR_86 += VAR_87 ; VAR_88 -> VAR_89 -= VAR_90 ; if ( VAR_91 -> VAR_92 & VAR_93 ) { VAR_94 = VAR_95 ; VAR_96 -> VAR_97 = 0 ; } if ( ! VAR_98 -> VAR_99 ) { VAR_100 -> VAR_101 = VAR_102 ; VAR_103 -> METHOD_12 ( VAR_104 , VAR_105 ) ; VAR_106 = ( VAR_107 + 1 ) & ( VAR_108 -> VAR_109 - 1 ) ; VAR_110 -> VAR_111 = VAR_112 ; VAR_113 -> VAR_114 = -- VAR_115 ; VAR_116 = 1 ; } VAR_117 -= VAR_118 ; if ( ! VAR_119 ) break ; } if ( VAR_120 ) continue ; if ( ! VAR_121 -> VAR_122 ) break ; if ( ! VAR_123 -> VAR_124 ) { if ( VAR_125 ) break ; if ( VAR_126 -> VAR_127 & VAR_128 ) { VAR_129 = - VAR_130 ; break ; } } if ( METHOD_13 ( VAR_131 ) ) { if ( ! VAR_132 ) VAR_133 = - VAR_134 ; break ; } if ( VAR_135 ) { METHOD_14 ( & VAR_136 -> VAR_137 , VAR_138 | VAR_139 ) ; METHOD_15 ( & VAR_140 -> VAR_141 , VAR_142 , VAR_143 ) ; } METHOD_16 ( VAR_144 ) ; } METHOD_17 ( VAR_145 ) ; if ( VAR_146 ) { METHOD_18 ( & VAR_147 -> VAR_148 , VAR_149 | VAR_150 ) ; METHOD_19 ( & VAR_151 -> VAR_152 , VAR_153 , VAR_154 ) ; } if ( VAR_155 > 0 ) METHOD_20 ( VAR_156 ) ; return VAR_157 ; }",690
691,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 , unsigned TYPE_4 VAR_4 , TYPE_5 VAR_5 ) { struct STRUCT_OR_UNION_1 * VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 = VAR_10 -> STRUCT_OR_UNION_3 ; VAR_11 * VAR_12 ; TYPE_6 VAR_13 ; if ( VAR_14 [ 0 ] != VAR_15 ) return - VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 , VAR_19 ) ; if ( ! VAR_20 ) return - VAR_21 ;  if ( VAR_22 < VAR_23 - 2 )  VAR_24 = VAR_25 - 2 ; VAR_26 [ 0 ] = VAR_27 ; VAR_28 [ 1 ] = VAR_29 -> VAR_30 ; METHOD_2 ( VAR_31 + 2 , VAR_32 , VAR_33 ) ; VAR_34 = METHOD_3 ( VAR_35 -> VAR_36 , VAR_37 [ 0 ] , VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; METHOD_4 ( VAR_42 ) ; return VAR_43 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , unsigned TYPE_1 VAR_1 , TYPE_2 * VAR_2 , TYPE_3 VAR_3 , unsigned TYPE_4 VAR_4 , TYPE_5 VAR_5 ) { struct STRUCT_OR_UNION_1 * VAR_6 = VAR_7 -> VAR_8 ; struct STRUCT_OR_UNION_2 * VAR_9 = VAR_10 -> STRUCT_OR_UNION_3 ; VAR_11 * VAR_12 ; TYPE_6 VAR_13 ; if ( VAR_14 [ 0 ] != VAR_15 ) return - VAR_16 ; VAR_17 = METHOD_1 ( VAR_18 , VAR_19 ) ; if ( ! VAR_20 ) return - VAR_21 ; if ( VAR_22 < VAR_23 - 2 ) VAR_24 = VAR_25 - 2 ; VAR_26 [ 0 ] = VAR_27 ; VAR_28 [ 1 ] = VAR_29 -> VAR_30 ; METHOD_2 ( VAR_31 + 2 , VAR_32 , VAR_33 ) ; VAR_34 = METHOD_3 ( VAR_35 -> VAR_36 , VAR_37 [ 0 ] , VAR_38 , VAR_39 , VAR_40 , VAR_41 ) ; METHOD_4 ( VAR_42 ) ; return VAR_43 ; }",691
692,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 = & METHOD_1 ( STRUCT_OR_UNION_2 ) ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 ; VAR_7 = METHOD_2 ( VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( ) ; else METHOD_4 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; ++ VAR_14 ) { VAR_15 = VAR_16 -> VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_5 ( VAR_20 ) ; if ( ( TYPE_5 ) VAR_21 < 0 ) { if ( VAR_22 ) { VAR_23 = 1 ;  METHOD_6 ( VAR_24 , VAR_25 , VAR_26 , VAR_27 ) ;  } else { METHOD_7 ( VAR_28 , 0 ) ; } } } METHOD_8 ( METHOD_9 ( ) | VAR_29 ) ; METHOD_10 ( VAR_30 , VAR_31 | VAR_32 ) ; METHOD_11 ( ) ; if ( VAR_33 ) METHOD_12 ( ) ; else METHOD_13 ( ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 ; struct STRUCT_OR_UNION_1 * VAR_2 = & METHOD_1 ( STRUCT_OR_UNION_2 ) ; struct STRUCT_OR_UNION_3 * VAR_3 ; unsigned TYPE_2 VAR_4 ; TYPE_3 VAR_5 = 0 ; TYPE_4 VAR_6 ; VAR_7 = METHOD_2 ( VAR_8 ) ; if ( VAR_9 ) METHOD_3 ( ) ; else METHOD_4 ( ) ; for ( VAR_10 = 0 ; VAR_11 < VAR_12 -> VAR_13 ; ++ VAR_14 ) { VAR_15 = VAR_16 -> VAR_17 [ VAR_18 ] ; VAR_19 = METHOD_5 ( VAR_20 ) ; if ( ( TYPE_5 ) VAR_21 < 0 ) { if ( VAR_22 ) { VAR_23 = 1 ; METHOD_6 ( VAR_24 , VAR_25 , VAR_26 ) ; } else { METHOD_7 ( VAR_28 , 0 ) ; } } } METHOD_8 ( METHOD_9 ( ) | VAR_29 ) ; METHOD_10 ( VAR_30 , VAR_31 | VAR_32 ) ; METHOD_11 ( ) ; if ( VAR_33 ) METHOD_12 ( ) ; else METHOD_13 ( ) ; }",692
693,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 > VAR_10 ) VAR_11 = VAR_12 ; if ( VAR_13 -> VAR_14 >= VAR_15 ) return - VAR_16 ; METHOD_1 ( VAR_17 ) ; METHOD_2 ( & VAR_18 -> VAR_19 ) ; VAR_20 -> VAR_21 = VAR_22 ; METHOD_3 ( ) ; METHOD_4 ( & VAR_23 -> VAR_24 ) ;  VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 , VAR_28 ,  ( VAR_29 < 0 ) ? 0 : METHOD_6 ( VAR_30 ) , 0 , VAR_31 ) ; METHOD_7 ( ) ; if ( VAR_32 < 0 ) { METHOD_8 ( & VAR_33 -> VAR_34 ) ; METHOD_9 ( ) ; return VAR_35 ; } VAR_36 -> VAR_37 ++ ;  METHOD_10 ( & VAR_38 , & VAR_39 ) ;  VAR_40 -> VAR_41 = VAR_42 -> VAR_43 = VAR_44 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 = VAR_49 ; if ( VAR_50 < 0 ) { VAR_51 -> VAR_52 = VAR_53 -> VAR_54 ++ ; if ( VAR_55 -> VAR_56 > VAR_57 ) VAR_58 -> VAR_59 = 0 ; } else { VAR_60 -> VAR_61 = METHOD_11 ( VAR_62 ) ; VAR_63 -> VAR_64 = - 1 ; } VAR_65 -> VAR_66 = METHOD_12 ( VAR_67 , VAR_68 -> VAR_69 ) ; return VAR_70 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; TYPE_5 VAR_6 = VAR_7 -> VAR_8 ; if ( VAR_9 > VAR_10 ) VAR_11 = VAR_12 ; if ( VAR_13 -> VAR_14 >= VAR_15 ) return - VAR_16 ; METHOD_1 ( VAR_17 ) ; METHOD_2 ( & VAR_18 -> VAR_19 ) ; VAR_20 -> VAR_21 = VAR_22 ; METHOD_3 ( ) ; METHOD_4 ( & VAR_23 -> VAR_24 ) ; VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 , VAR_28 , ( VAR_29 < 0 ) ? 0 : METHOD_6 ( VAR_30 ) , 0 , VAR_31 ) ; METHOD_7 ( ) ; if ( VAR_32 < 0 ) { METHOD_8 ( & VAR_33 -> VAR_34 ) ; METHOD_10 ( & VAR_44 , & VAR_49 ) ; VAR_68 -> VAR_41 = VAR_68 -> VAR_43 = VAR_44 ; VAR_68 -> VAR_46 = VAR_68 -> VAR_48 = VAR_49 ; METHOD_9 ( ) ; return VAR_35 ; } VAR_36 -> VAR_37 ++ ; METHOD_10 ( & VAR_38 , & VAR_39 ) ; VAR_40 -> VAR_41 = VAR_42 -> VAR_43 = VAR_44 ; VAR_45 -> VAR_46 = VAR_47 -> VAR_48 = VAR_49 ; if ( VAR_50 < 0 ) { VAR_51 -> VAR_52 = VAR_53 -> VAR_54 ++ ; if ( VAR_55 -> VAR_56 > VAR_57 ) VAR_58 -> VAR_59 = 0 ; } else { VAR_60 -> VAR_61 = METHOD_11 ( VAR_62 ) ; VAR_63 -> VAR_64 = - 1 ; } VAR_65 -> VAR_66 = METHOD_12 ( VAR_67 , VAR_68 -> VAR_69 ) ; return VAR_70 ; }",693
694,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; switch ( VAR_6 -> VAR_7 ) { case VAR_8 : VAR_9 = VAR_10 = * VAR_11 ; while ( VAR_12 ) { VAR_13 = VAR_14 -> VAR_15 ; METHOD_1 ( VAR_16 -> VAR_17 ) ; METHOD_2 ( VAR_18 ) ; VAR_19 = VAR_20 ; }  break ;  case VAR_21 : VAR_22 = * VAR_23 ; while ( 1 ) { VAR_24 = ( VAR_25 != VAR_26 ) ; if ( ! METHOD_3 ( VAR_27 , & VAR_28 ) ) return VAR_29 ; if ( VAR_30 == VAR_31 ) break ; if ( ! METHOD_4 ( VAR_32 , & VAR_33 -> VAR_34 ) ) return VAR_35 ; VAR_36 = VAR_37 -> VAR_38 ; if ( ! METHOD_5 ( VAR_39 , ( TYPE_6 * * ) & VAR_40 -> VAR_41 , & VAR_42 , ~ 0 ) ) return VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; } break ; case VAR_47 : VAR_48 = VAR_49 ; while ( 1 ) { if ( ! METHOD_6 ( VAR_50 , & VAR_51 ) ) return VAR_52 ; if ( VAR_53 == VAR_54 ) break ; VAR_55 = ( TYPE_7 * ) METHOD_7 ( sizeof ( TYPE_8 ) ) ; if ( VAR_56 == VAR_57 ) return VAR_58 ; METHOD_8 ( VAR_59 , 0 , sizeof ( TYPE_9 ) ) ; if ( ! METHOD_9 ( VAR_60 , & VAR_61 -> VAR_62 ) ) return VAR_63 ; if ( ! METHOD_10 ( VAR_64 , ( TYPE_10 * * ) & VAR_65 -> VAR_66 , & VAR_67 , ~ 0 ) ) return VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } * VAR_77 = VAR_78 ; break ; } return VAR_79 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 * VAR_2 , * VAR_3 ; TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; switch ( VAR_6 -> VAR_7 ) { case VAR_8 : VAR_9 = VAR_10 = * VAR_11 ; while ( VAR_12 ) { VAR_13 = VAR_14 -> VAR_15 ; METHOD_1 ( VAR_16 -> VAR_17 ) ; METHOD_2 ( VAR_18 ) ; VAR_19 = VAR_20 ; } break ; case VAR_21 : VAR_22 = * VAR_23 ; while ( 1 ) { VAR_24 = ( VAR_25 != VAR_26 ) ; if ( ! METHOD_3 ( VAR_27 , & VAR_28 ) ) return VAR_29 ; if ( VAR_30 == VAR_31 ) break ; if ( ! METHOD_4 ( VAR_32 , & VAR_33 -> VAR_34 ) ) return VAR_35 ; VAR_36 = VAR_37 -> VAR_38 ; if ( ! METHOD_5 ( VAR_39 , ( TYPE_6 * * ) & VAR_40 -> VAR_41 , & VAR_42 , ~ 0 ) ) return VAR_43 ; VAR_44 = VAR_45 -> VAR_46 ; } break ; case VAR_47 : VAR_48 = VAR_49 ; while ( 1 ) { if ( ! METHOD_6 ( VAR_50 , & VAR_51 ) ) return VAR_52 ; if ( VAR_53 == VAR_54 ) break ; VAR_55 = ( TYPE_7 * ) METHOD_7 ( sizeof ( TYPE_8 ) ) ; if ( VAR_56 == VAR_57 ) return VAR_58 ; METHOD_8 ( VAR_59 , 0 , sizeof ( TYPE_9 ) ) ; if ( ! METHOD_9 ( VAR_60 , & VAR_61 -> VAR_62 ) ) return VAR_63 ; if ( ! METHOD_10 ( VAR_64 , ( TYPE_10 * * ) & VAR_65 -> VAR_66 , & VAR_67 , ~ 0 ) ) return VAR_68 ; VAR_69 -> VAR_70 = VAR_71 ; VAR_72 -> VAR_73 = VAR_74 ; VAR_75 = VAR_76 ; } * VAR_77 = VAR_57 ; * VAR_77 = VAR_78 ; break ; } return VAR_79 ; }",694
695,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = STRUCT_OR_UNION_3 -> VAR_1 ; TYPE_1 VAR_2 = STRUCT_OR_UNION_4 -> VAR_3 ;  METHOD_1 ( & VAR_4 -> VAR_5 ) ;  METHOD_2 ( VAR_6 , & VAR_7 -> VAR_8 ) ; if ( VAR_9 ) { switch ( VAR_10 ) { case - VAR_11 : METHOD_3 ( & VAR_12 -> VAR_13 -> VAR_14 , ""nonzerourbstatusreceived:-ENOENT"" ) ; goto VAR_15 ; case - VAR_16 : METHOD_4 ( & VAR_17 -> VAR_18 -> VAR_19 , ""nonzerourbstatusreceived:-ECONNRESET"" ) ; goto VAR_20 ; case - VAR_21 : METHOD_5 ( & VAR_22 -> VAR_23 -> VAR_24 , ""nonzerourbstatusreceived:-ESHUTDOWN"" ) ; goto VAR_25 ; case - VAR_26 : METHOD_6 ( & VAR_27 -> VAR_28 -> VAR_29 , ""nonzerourbstatusreceived:-EPIPE\\n"" ) ; break ; default : METHOD_7 ( & VAR_30 -> VAR_31 -> VAR_32 , ""Unexpectederror%d\\n"" , VAR_33 ) ; break ; } } VAR_34 -> VAR_35 = VAR_36 ;  VAR_37 -> VAR_38 = STRUCT_OR_UNION_5 -> VAR_39 ;   METHOD_8 ( VAR_40 -> VAR_41 + VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_46 -> VAR_47 ) ;  VAR_48 -> VAR_49 += VAR_50 -> VAR_51 ; VAR_52 : METHOD_9 ( & VAR_53 -> VAR_54 ) ; METHOD_10 ( VAR_55 , & VAR_56 -> VAR_57 ) ; METHOD_11 ( & VAR_58 -> VAR_59 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 ) { struct STRUCT_OR_UNION_2 * VAR_0 = STRUCT_OR_UNION_3 -> VAR_1 ; TYPE_1 VAR_2 = STRUCT_OR_UNION_4 -> VAR_3 ; METHOD_1 ( & VAR_4 -> VAR_5 ) ; METHOD_2 ( VAR_6 , & VAR_7 -> VAR_8 ) ; if ( VAR_9 ) { switch ( VAR_10 ) { case - VAR_11 : METHOD_3 ( & VAR_12 -> VAR_13 -> VAR_14 , ""nonzerourbstatusreceived:-ENOENT"" ) ; goto VAR_15 ; case - VAR_16 : METHOD_4 ( & VAR_17 -> VAR_18 -> VAR_19 , ""nonzerourbstatusreceived:-ECONNRESET"" ) ; goto VAR_20 ; case - VAR_21 : METHOD_5 ( & VAR_22 -> VAR_23 -> VAR_24 , ""nonzerourbstatusreceived:-ESHUTDOWN"" ) ; goto VAR_25 ; case - VAR_26 : METHOD_6 ( & VAR_27 -> VAR_28 -> VAR_29 , ""nonzerourbstatusreceived:-EPIPE\\n"" ) ; break ; default : METHOD_7 ( & VAR_30 -> VAR_31 -> VAR_32 , ""Unexpectederror%d\\n"" , VAR_33 ) ; break ; } } VAR_34 -> VAR_35 = VAR_36 ; VAR_37 -> VAR_38 = STRUCT_OR_UNION_5 -> VAR_39 ; METHOD_8 ( VAR_40 -> VAR_41 + VAR_42 -> VAR_43 , VAR_44 -> VAR_45 , VAR_49 ) ; VAR_58 -> VAR_49 += VAR_49 ; VAR_46 -> VAR_47 ) ; VAR_48 -> VAR_49 += VAR_50 -> VAR_51 ; VAR_52 : METHOD_9 ( & VAR_53 -> VAR_54 ) ; METHOD_10 ( VAR_55 , & VAR_56 -> VAR_57 ) ; METHOD_11 ( & VAR_58 -> VAR_59 ) ; }",695
696,"static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 ) { METHOD_1 ( & VAR_1 ) ; if ( METHOD_2 ( VAR_2 ) ) { METHOD_3 ( ""%swithnocommandspendingresponse"" , VAR_3 ) ; } else { TYPE_3 * VAR_4 = METHOD_4 ( VAR_5 ) ; METHOD_5 ( & VAR_6 ) ; METHOD_6 ( ""%shcilayertimeoutwaitingforresponsetoacommand.opcode:0x%x"" , VAR_7 , VAR_8 -> VAR_9 ) ; } METHOD_7 ( ""%srestartingthebluetoothprocess."" , VAR_10 ) ;  METHOD_8 ( 10000 ) ;  METHOD_9 ( METHOD_10 ( ) , VAR_11 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 TYPE_2 * VAR_0 ) { METHOD_1 ( & VAR_1 ) ; if ( METHOD_2 ( VAR_2 ) ) { METHOD_3 ( ""%swithnocommandspendingresponse"" , VAR_3 ) ; } else { TYPE_3 * VAR_4 = METHOD_4 ( VAR_5 ) ; METHOD_5 ( & VAR_6 ) ; METHOD_6 ( ""%shcilayertimeoutwaitingforresponsetoacommand.opcode:0x%x"" , VAR_7 , VAR_8 -> VAR_9 ) ; } METHOD_7 ( ""%srestartingthebluetoothprocess."" , VAR_10 ) ; TEMP_FAILURE_RETRY ( METHOD_8 ( 10000 ) ) ; METHOD_9 ( METHOD_10 ( ) , VAR_11 ) ; }",696
697,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) {  struct STRUCT_OR_UNION_3 * VAR_1 = STRUCT_OR_UNION_4 -> VAR_2 . VAR_3 [ 0 ] ;   struct STRUCT_OR_UNION_5 * VAR_4 ;  struct STRUCT_OR_UNION_6 * VAR_5 ; TYPE_1 VAR_6 = VAR_7 -> VAR_8 ; TYPE_2 * VAR_9 ; TYPE_3 VAR_10 = 0 ; if ( ! VAR_11 -> VAR_12 ) return - VAR_13 ; if ( VAR_14 <= 0 || VAR_15 > 32767 || ! VAR_16 -> VAR_17 ) return - VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 + 1 , VAR_21 ) ; if ( ! VAR_22 ) return - VAR_23 ; VAR_24 = METHOD_2 ( ) ; if ( ! VAR_25 ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } VAR_29 = METHOD_3 ( STRUCT_OR_UNION_7 ) ; if ( ! VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } METHOD_4 ( VAR_34 , VAR_35 -> VAR_36 , VAR_37 ) ; VAR_38 [ VAR_39 ] = '\\0' ; VAR_40 = METHOD_5 ( VAR_41 , VAR_42 , VAR_43 ) ; if ( VAR_44 != VAR_45 ) { VAR_46 = - VAR_47 ; METHOD_6 ( VAR_48 ) ; goto VAR_49 ; } if ( ! VAR_50 -> VAR_51 ) { VAR_52 = - VAR_53 ; METHOD_7 ( VAR_54 ) ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 -> VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_8 ( VAR_64 -> STRUCT_OR_UNION_8 , VAR_65 -> STRUCT_OR_UNION_9 , VAR_66 -> VAR_67 ) ; METHOD_9 ( VAR_68 ) ; METHOD_10 ( VAR_69 ) ; VAR_70 = METHOD_11 ( VAR_71 , VAR_72 ) ; if ( VAR_73 < 0 ) { METHOD_12 ( ""trusted_key:key_sealfailed(%d)\\n"" , VAR_74 ) ; METHOD_13 ( VAR_75 ) ; goto VAR_76 ; } if ( VAR_77 -> METHOD_14 ) { VAR_78 = METHOD_15 ( VAR_79 -> METHOD_16 ) ; if ( VAR_80 < 0 ) { METHOD_17 ( ""trusted_key:pcrlockfailed(%d)\\n"" , VAR_81 ) ; METHOD_18 ( VAR_82 ) ; goto VAR_83 ; } } METHOD_19 ( STRUCT_OR_UNION_10 , VAR_84 ) ; METHOD_20 ( & VAR_85 -> VAR_86 , VAR_87 ) ; VAR_88 : METHOD_21 ( VAR_89 ) ; METHOD_22 ( VAR_90 ) ; return VAR_91 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 ) { struct STRUCT_OR_UNION_3 * VAR_1 = STRUCT_OR_UNION_4 -> VAR_2 . VAR_3 [ 0 ] ; if ( ! VAR_11 -> VAR_12 ) return - VAR_13 ; if ( VAR_14 <= 0 || VAR_15 > 32767 || ! VAR_16 -> VAR_17 ) return - VAR_18 ; VAR_19 = METHOD_1 ( VAR_20 + 1 , VAR_21 ) ; if ( ! VAR_22 ) return - VAR_23 ; VAR_24 = METHOD_2 ( ) ; if ( ! VAR_25 ) { VAR_26 = - VAR_27 ; goto VAR_28 ; } VAR_29 = METHOD_3 ( STRUCT_OR_UNION_7 ) ; if ( ! VAR_30 ) { VAR_31 = - VAR_32 ; goto VAR_33 ; } METHOD_4 ( VAR_34 , VAR_35 -> VAR_36 , VAR_37 ) ; VAR_38 [ VAR_39 ] = '\\0' ; VAR_40 = METHOD_5 ( VAR_41 , VAR_42 , VAR_43 ) ; if ( VAR_44 != VAR_45 ) { VAR_46 = - VAR_47 ; METHOD_6 ( VAR_48 ) ; goto VAR_49 ; } if ( ! VAR_50 -> VAR_51 ) { VAR_52 = - VAR_53 ; METHOD_7 ( VAR_54 ) ; goto VAR_55 ; } VAR_56 -> VAR_57 = VAR_58 -> VAR_59 ; VAR_60 -> VAR_61 = VAR_62 -> VAR_63 ; METHOD_8 ( VAR_64 -> STRUCT_OR_UNION_8 , VAR_65 -> STRUCT_OR_UNION_9 , VAR_66 -> VAR_67 ) ; METHOD_9 ( VAR_68 ) ; METHOD_10 ( VAR_69 ) ; VAR_70 = METHOD_11 ( VAR_71 , VAR_72 ) ; if ( VAR_73 < 0 ) { METHOD_12 ( ""trusted_key:key_sealfailed(%d)\\n"" , VAR_74 ) ; METHOD_13 ( VAR_75 ) ; goto VAR_76 ; } if ( VAR_77 -> METHOD_14 ) { VAR_78 = METHOD_15 ( VAR_79 -> METHOD_16 ) ; if ( VAR_80 < 0 ) { METHOD_17 ( ""trusted_key:pcrlockfailed(%d)\\n"" , VAR_81 ) ; METHOD_18 ( VAR_82 ) ; goto VAR_83 ; } } METHOD_19 ( STRUCT_OR_UNION_10 , VAR_84 ) ; METHOD_20 ( & VAR_85 -> VAR_86 , VAR_87 ) ; VAR_88 : METHOD_21 ( VAR_89 ) ; METHOD_22 ( VAR_90 ) ; return VAR_91 ; }",697
698,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; if ( VAR_3 -> VAR_4 == VAR_5 ) { if ( * VAR_6 == VAR_7 ) VAR_8 = 0 ; else VAR_9 = METHOD_1 ( * VAR_10 ) + 1 ; } if ( ! METHOD_2 ( VAR_11 , & VAR_12 ) ) { return VAR_13 ; } switch ( VAR_14 -> VAR_15 ) { case VAR_16 : if ( VAR_17 == 0 ) { * VAR_18 = VAR_19 ; return VAR_20 ; } else if ( * VAR_21 == VAR_22 ) { * VAR_23 = ( TYPE_4 * ) METHOD_3 ( VAR_24 ) ; if ( * VAR_25 == VAR_26 ) { VAR_27 = VAR_28 ; return VAR_29 ; } }  return ( METHOD_4 ( VAR_30 , * VAR_31 , VAR_32 ) ) ;  case VAR_33 : if ( VAR_34 != 0 ) return ( METHOD_5 ( VAR_35 , * VAR_36 , VAR_37 ) ) ; return VAR_38 ; case VAR_39 : if ( * VAR_40 != VAR_41 ) METHOD_6 ( * VAR_42 , VAR_43 ) ; * VAR_44 = VAR_45 ; return VAR_46 ; } return VAR_47 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * * VAR_1 ) { TYPE_3 VAR_2 ; if ( VAR_3 -> VAR_4 == VAR_5 ) { if ( * VAR_6 == VAR_7 ) VAR_8 = 0 ; else VAR_9 = METHOD_1 ( * VAR_10 ) + 1 ; } if ( ! METHOD_2 ( VAR_11 , & VAR_12 ) ) { return VAR_13 ; } switch ( VAR_14 -> VAR_15 ) { case VAR_16 : if ( VAR_17 == 0 ) { * VAR_18 = VAR_19 ; return VAR_20 ; } else if ( * VAR_21 == VAR_22 ) { * VAR_23 = ( TYPE_4 * ) METHOD_3 ( VAR_24 ) ; if ( * VAR_25 == VAR_26 ) { VAR_27 = VAR_28 ; return VAR_29 ; } } if ( ! METHOD_5 ( VAR_35 , * VAR_36 , VAR_37 ) ) ; return VAR_38 ; case VAR_39 : if ( * VAR_40 != VAR_41 ) METHOD_6 ( * VAR_42 , VAR_43 ) ; * VAR_44 = VAR_45 ; return VAR_46 ; } return VAR_47 ; }",698
699,"TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 . VAR_5 ) ; unsigned VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 . VAR_9 ) ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , VAR_13 ) ; METHOD_4 ( VAR_14 -> VAR_15 . VAR_16 , VAR_17 ) ; METHOD_5 ( VAR_18 -> VAR_19 . VAR_20 , VAR_21 -> VAR_22 . VAR_23 ) ;  METHOD_6 ( ( TYPE_3 * ) & VAR_24 ) ;  return VAR_25 ; }","TYPE_0 * METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { unsigned VAR_2 = METHOD_1 ( VAR_3 -> VAR_4 . VAR_5 ) ; unsigned VAR_6 = METHOD_2 ( VAR_7 -> VAR_8 . VAR_9 ) ; METHOD_3 ( VAR_10 -> VAR_11 . VAR_12 , VAR_13 ) ; METHOD_4 ( VAR_14 -> VAR_15 . VAR_16 , VAR_17 ) ; METHOD_5 ( VAR_18 -> VAR_19 . VAR_20 , VAR_21 -> VAR_22 . VAR_23 ) ; METHOD_6 ( ( TYPE_3 * ) VAR_24 ) ; return VAR_25 ; }",699
700,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 , ... ) { TYPE_4 VAR_4 ;  struct STRUCT_OR_UNION_1 VAR_5 ;  TYPE_5 VAR_6 [ 32 ] ; METHOD_1 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) - 1 ) ; METHOD_3 ( VAR_12 , VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = & VAR_19 ; if ( ! ( VAR_20 & VAR_21 ) ) goto VAR_22 ; if ( METHOD_4 ( VAR_23 ) && METHOD_5 ( VAR_24 -> VAR_25 ) ) METHOD_6 ( ""[%s]:[%s:%d]:%d:%pV"" , METHOD_7 ( & VAR_26 -> VAR_27 -> VAR_28 ) ,  VAR_29 , VAR_30 , VAR_31 -> VAR_32 , & VAR_33 ) ;  else  METHOD_8 ( ""[0000:00:00.0]:[%s:%d]:%pV"" , VAR_34 , VAR_35 , & VAR_36 ) ;  VAR_37 : METHOD_9 ( VAR_38 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , const TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 , ... ) { TYPE_4 VAR_4 ; struct STRUCT_OR_UNION_1 VAR_5 ; TYPE_5 VAR_6 [ 32 ] ; METHOD_1 ( VAR_7 , 0 , sizeof ( VAR_8 ) ) ; METHOD_2 ( VAR_9 , VAR_10 , sizeof ( VAR_11 ) - 1 ) ; METHOD_3 ( VAR_12 , VAR_13 ) ; VAR_14 . VAR_15 = VAR_16 ; VAR_17 . VAR_18 = & VAR_19 ; if ( ! ( VAR_20 & VAR_21 ) ) goto VAR_22 ; if ( METHOD_4 ( VAR_23 ) && METHOD_5 ( VAR_24 -> VAR_25 ) ) METHOD_6 ( ""[%s]:[%s:%d]:%d:%pV"" , METHOD_7 ( & VAR_26 -> VAR_27 -> VAR_28 ) , VAR_10 , VAR_35 , & VAR_36 ) ; VAR_37 : METHOD_9 ( VAR_38 ) ; }",700
701,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 [ 1024 ] ; METHOD_1 ( VAR_13 ) ; METHOD_2 ( VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 ) ; METHOD_4 ( VAR_17 ) ; VAR_18 = METHOD_5 ( VAR_19 ) ;  for ( VAR_20 = 0 ; VAR_21 < VAR_22 ; VAR_23 ++ )  METHOD_6 ( VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { TYPE_7 VAR_29 ;  TYPE_8 VAR_30 ;  METHOD_7 ( VAR_31 ) ; VAR_32 = METHOD_8 ( VAR_33 ) ; VAR_34 -= VAR_35 -> VAR_36 . VAR_37 * 10000 ; METHOD_9 ( VAR_38 ) ; METHOD_10 ( VAR_39 ) ; METHOD_11 ( VAR_40 ) ; VAR_41 = METHOD_12 ( VAR_42 ) ; if ( ( VAR_43 = METHOD_13 ( VAR_44 , VAR_45 * 2 , VAR_46 , sizeof ( VAR_47 ) ) ) < VAR_48 ) METHOD_14 ( VAR_49 , VAR_50 - VAR_51 ) ; METHOD_15 ( VAR_52 , VAR_53 , ( TYPE_9 ) { 1 , 10000000 } , VAR_54 , VAR_55 , VAR_56 ) ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = VAR_3 -> VAR_4 ; TYPE_4 * VAR_5 = VAR_6 -> VAR_7 ; TYPE_5 VAR_8 , VAR_9 , VAR_10 , VAR_11 ; TYPE_6 VAR_12 [ 1024 ] ; METHOD_1 ( VAR_13 ) ; METHOD_2 ( VAR_14 ) ; VAR_15 = METHOD_3 ( VAR_16 ) ; METHOD_4 ( VAR_17 ) ; VAR_18 = METHOD_5 ( VAR_19 ) ; for ( VAR_20 = 0 ; VAR_21 < VAR_22 ; VAR_23 ++ ) METHOD_6 ( VAR_24 ) ; for ( VAR_25 = 0 ; VAR_26 < VAR_27 ; VAR_28 ++ ) { TYPE_7 VAR_29 ; TYPE_8 VAR_30 ; METHOD_7 ( VAR_31 ) ; VAR_32 = METHOD_8 ( VAR_33 ) ; VAR_34 -= VAR_35 -> VAR_36 . VAR_37 * 10000 ; METHOD_9 ( VAR_38 ) ; METHOD_10 ( VAR_39 ) ; METHOD_11 ( VAR_40 ) ; VAR_41 = METHOD_12 ( VAR_42 ) ; if ( ( VAR_43 = METHOD_13 ( VAR_44 , VAR_45 * 2 , VAR_46 , sizeof ( VAR_47 ) ) ) < VAR_48 ) METHOD_14 ( VAR_49 , VAR_50 - VAR_51 ) ; METHOD_15 ( VAR_52 , VAR_53 , ( TYPE_9 ) { 1 , 10000000 } , VAR_54 , VAR_55 , VAR_56 ) ; } return 0 ; }",701
702,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 . VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; const TYPE_1 * VAR_8 = VAR_9 -> VAR_10 . VAR_11 ;  TYPE_2 VAR_12 ;  if ( ! * VAR_13 ) VAR_14 = ""INBOX"" ;  VAR_15 -> VAR_16 = METHOD_1 ( VAR_17 , VAR_18 , 0 , & VAR_19 ) ;   if ( ! VAR_20 -> VAR_21 )  return VAR_22 ; return VAR_23 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 = & VAR_2 -> VAR_3 . VAR_4 ; struct STRUCT_OR_UNION_2 * VAR_5 = VAR_6 -> VAR_7 ; const TYPE_1 * VAR_8 = VAR_9 -> VAR_10 . VAR_11 ; TYPE_2 VAR_12 ; if ( ! * VAR_13 ) VAR_14 = ""INBOX"" ; return METHOD_2 ( VAR_17 , VAR_18 , 0 , & VAR_19 ) ; if ( ! VAR_20 -> VAR_21 , VAR_24 , VAR_25 ) ; }",702
703,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ; VAR_15 = - VAR_16 ; if ( VAR_17 -> VAR_18 & ( VAR_19 - 1 ) ) goto VAR_20 ; if ( VAR_21 -> VAR_22 & ( VAR_23 - 1 ) ) goto VAR_24 ; if ( VAR_25 && ( ( VAR_26 -> VAR_27 & ( VAR_28 - 1 ) ) || ! METHOD_2 ( VAR_29 , ( TYPE_6 TYPE_7 * ) ( unsigned TYPE_8 ) VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ) ) goto VAR_34 ; if ( VAR_35 -> VAR_36 >= VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 + VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) goto VAR_45 ; VAR_46 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_47 , VAR_48 -> VAR_49 ) ; VAR_50 = VAR_51 -> VAR_52 >> VAR_53 ; VAR_54 = VAR_55 -> VAR_56 >> VAR_57 ; VAR_58 = - VAR_59 ; if ( VAR_60 > VAR_61 ) goto VAR_62 ; if ( ! VAR_63 ) VAR_64 -> VAR_65 &= ~ VAR_66 ; VAR_67 = VAR_68 = * VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 . VAR_88 && VAR_89 != VAR_90 . VAR_91 ) goto VAR_92 ; VAR_93 = - VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; ++ VAR_98 ) { struct STRUCT_OR_UNION_7 * VAR_99 = & STRUCT_OR_UNION_8 -> VAR_100 -> VAR_101 [ VAR_102 ] ; if ( VAR_103 == VAR_104 || ! VAR_105 -> VAR_106 ) continue ; if ( ! ( ( VAR_107 + VAR_108 <= VAR_109 -> VAR_110 ) || ( VAR_111 >= VAR_112 -> VAR_113 + VAR_114 -> VAR_115 ) ) ) goto VAR_116 ; } if ( ! ( VAR_117 . VAR_118 & VAR_119 ) ) VAR_120 . VAR_121 = VAR_122 ; VAR_123 = - VAR_124 ; if ( VAR_125 && ! VAR_126 . VAR_127 ) { VAR_128 . VAR_129 = VAR_130 ; VAR_131 . VAR_132 = VAR_133 -> VAR_134 ; if ( METHOD_4 ( & VAR_135 , VAR_136 ) ) goto VAR_137 ; } if ( ( VAR_138 . VAR_139 & VAR_140 ) && ! VAR_141 . VAR_142 ) { if ( METHOD_5 ( & VAR_143 ) < 0 ) goto VAR_144 ; }  if ( ! VAR_145 ) {  struct STRUCT_OR_UNION_9 * VAR_146 ; VAR_147 = - VAR_148 ; VAR_149 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_150 , sizeof ( struct STRUCT_OR_UNION_11 ) , VAR_151 ) ; if ( ! VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_7 ( VAR_155 , VAR_156 -> VAR_157 ) ; VAR_158 -> VAR_159 |= VAR_160 ; METHOD_8 ( VAR_161 , VAR_162 ) ; VAR_163 = STRUCT_OR_UNION_12 -> VAR_164 ; METHOD_9 ( STRUCT_OR_UNION_13 -> VAR_165 , VAR_166 ) ; METHOD_10 ( & STRUCT_OR_UNION_14 -> VAR_167 ) ; METHOD_11 ( STRUCT_OR_UNION_15 , VAR_168 ) ; METHOD_12 ( VAR_169 ) ; } VAR_170 = METHOD_13 ( STRUCT_OR_UNION_16 , & VAR_171 , VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 ) goto VAR_176 ; if ( VAR_177 ) { VAR_178 = METHOD_14 ( STRUCT_OR_UNION_17 , & VAR_179 ) ; if ( VAR_180 ) goto VAR_181 ; } else METHOD_15 ( STRUCT_OR_UNION_18 , & VAR_182 ) ; VAR_183 = - VAR_184 ; VAR_185 = METHOD_16 ( STRUCT_OR_UNION_19 -> VAR_186 , sizeof ( struct STRUCT_OR_UNION_20 ) , VAR_187 ) ; if ( ! VAR_188 ) goto VAR_189 ; if ( ! VAR_190 ) { VAR_191 . VAR_192 = VAR_193 ; METHOD_17 ( & VAR_194 . VAR_195 , 0 , sizeof ( VAR_196 . VAR_197 ) ) ; } METHOD_18 ( VAR_198 , & VAR_199 ) ; VAR_200 = STRUCT_OR_UNION_21 -> VAR_201 ; METHOD_19 ( STRUCT_OR_UNION_22 -> VAR_202 , VAR_203 ) ; METHOD_20 ( & STRUCT_OR_UNION_23 -> VAR_204 ) ; METHOD_21 ( STRUCT_OR_UNION_24 , VAR_205 , VAR_206 , VAR_207 ) ; if ( VAR_208 && VAR_209 . VAR_210 != VAR_211 -> VAR_212 >> VAR_213 ) METHOD_22 ( STRUCT_OR_UNION_25 ) ; METHOD_23 ( & VAR_214 , & VAR_215 ) ; METHOD_24 ( VAR_216 ) ; return 0 ; VAR_217 : METHOD_25 ( & VAR_218 , & VAR_219 ) ; VAR_220 : return VAR_221 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , TYPE_1 VAR_1 ) { TYPE_2 VAR_2 ; TYPE_3 VAR_3 ; unsigned TYPE_4 VAR_4 ; unsigned TYPE_5 VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; struct STRUCT_OR_UNION_4 VAR_7 , VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 , * VAR_10 ; VAR_11 = METHOD_1 ( VAR_12 ) ; if ( VAR_13 ) goto VAR_14 ; VAR_15 = - VAR_16 ; if ( VAR_17 -> VAR_18 & ( VAR_19 - 1 ) ) goto VAR_20 ; if ( VAR_21 -> VAR_22 & ( VAR_23 - 1 ) ) goto VAR_24 ; if ( VAR_25 && ( ( VAR_26 -> VAR_27 & ( VAR_28 - 1 ) ) || ! METHOD_2 ( VAR_29 , ( TYPE_6 TYPE_7 * ) ( unsigned TYPE_8 ) VAR_30 -> VAR_31 , VAR_32 -> VAR_33 ) ) ) goto VAR_34 ; if ( VAR_35 -> VAR_36 >= VAR_37 ) goto VAR_38 ; if ( VAR_39 -> VAR_40 + VAR_41 -> VAR_42 < VAR_43 -> VAR_44 ) goto VAR_45 ; VAR_46 = METHOD_3 ( STRUCT_OR_UNION_6 -> VAR_47 , VAR_48 -> VAR_49 ) ; VAR_50 = VAR_51 -> VAR_52 >> VAR_53 ; VAR_54 = VAR_55 -> VAR_56 >> VAR_57 ; VAR_58 = - VAR_59 ; if ( VAR_60 > VAR_61 ) goto VAR_62 ; if ( ! VAR_63 ) VAR_64 -> VAR_65 &= ~ VAR_66 ; VAR_67 = VAR_68 = * VAR_69 ; VAR_70 . VAR_71 = VAR_72 -> VAR_73 ; VAR_74 . VAR_75 = VAR_76 ; VAR_77 . VAR_78 = VAR_79 ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = - VAR_85 ; if ( VAR_86 && VAR_87 . VAR_88 && VAR_89 != VAR_90 . VAR_91 ) goto VAR_92 ; VAR_93 = - VAR_94 ; for ( VAR_95 = 0 ; VAR_96 < VAR_97 ; ++ VAR_98 ) { struct STRUCT_OR_UNION_7 * VAR_99 = & STRUCT_OR_UNION_8 -> VAR_100 -> VAR_101 [ VAR_102 ] ; if ( VAR_103 == VAR_104 || ! VAR_105 -> VAR_106 ) continue ; if ( ! ( ( VAR_107 + VAR_108 <= VAR_109 -> VAR_110 ) || ( VAR_111 >= VAR_112 -> VAR_113 + VAR_114 -> VAR_115 ) ) ) goto VAR_116 ; } if ( ! ( VAR_117 . VAR_118 & VAR_119 ) ) VAR_120 . VAR_121 = VAR_122 ; VAR_123 = - VAR_124 ; if ( VAR_125 && ! VAR_126 . VAR_127 ) { VAR_128 . VAR_129 = VAR_130 ; VAR_131 . VAR_132 = VAR_133 -> VAR_134 ; if ( METHOD_4 ( & VAR_135 , VAR_136 ) ) goto VAR_137 ; } if ( ( VAR_138 . VAR_139 & VAR_140 ) && ! VAR_141 . VAR_142 ) { if ( METHOD_5 ( & VAR_143 ) < 0 ) goto VAR_144 ; } if ( ! VAR_145 ) { struct STRUCT_OR_UNION_9 * VAR_146 ; VAR_147 = - VAR_148 ; VAR_149 = METHOD_6 ( STRUCT_OR_UNION_10 -> VAR_150 , sizeof ( struct STRUCT_OR_UNION_11 ) , VAR_151 ) ; if ( ! VAR_152 ) goto VAR_153 ; VAR_154 = METHOD_7 ( VAR_155 , VAR_156 -> VAR_157 ) ; VAR_158 -> VAR_159 |= VAR_160 ; METHOD_8 ( VAR_161 , VAR_162 ) ; VAR_163 = STRUCT_OR_UNION_12 -> VAR_164 ; METHOD_9 ( STRUCT_OR_UNION_13 -> VAR_165 , VAR_166 ) ; METHOD_10 ( & STRUCT_OR_UNION_14 -> VAR_167 ) ; METHOD_11 ( STRUCT_OR_UNION_15 , VAR_168 ) ; METHOD_12 ( VAR_169 ) ; } VAR_170 = METHOD_13 ( STRUCT_OR_UNION_16 , & VAR_171 , VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 ) goto VAR_176 ; if ( VAR_177 ) { VAR_178 = METHOD_14 ( STRUCT_OR_UNION_17 , & VAR_179 ) ; if ( VAR_180 ) goto VAR_181 ; } else METHOD_15 ( STRUCT_OR_UNION_18 , & VAR_182 ) ; VAR_183 = - VAR_184 ; VAR_185 = METHOD_16 ( STRUCT_OR_UNION_19 -> VAR_186 , sizeof ( struct STRUCT_OR_UNION_20 ) , VAR_187 ) ; if ( ! VAR_188 ) goto VAR_189 ; if ( ! VAR_190 ) { VAR_191 . VAR_192 = VAR_193 ; METHOD_17 ( & VAR_194 . VAR_195 , 0 , sizeof ( VAR_196 . VAR_197 ) ) ; } METHOD_18 ( VAR_198 , & VAR_199 ) ; VAR_200 = STRUCT_OR_UNION_21 -> VAR_201 ; METHOD_19 ( STRUCT_OR_UNION_22 -> VAR_202 , VAR_203 ) ; METHOD_20 ( & STRUCT_OR_UNION_23 -> VAR_204 ) ; METHOD_21 ( STRUCT_OR_UNION_24 , VAR_205 , VAR_206 , VAR_207 ) ; if ( VAR_208 && VAR_209 . VAR_210 != VAR_211 -> VAR_212 >> VAR_213 ) METHOD_22 ( STRUCT_OR_UNION_25 ) ; METHOD_23 ( & VAR_214 , & VAR_215 ) ; METHOD_24 ( VAR_216 ) ; return 0 ; VAR_217 : METHOD_25 ( & VAR_218 , & VAR_219 ) ; VAR_220 : return VAR_221 ; }",703
704,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 ) ; if ( VAR_11 -> VAR_12 == VAR_13 ) VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 -> VAR_26 ; if ( METHOD_2 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 -> VAR_31 , VAR_32 -> VAR_33 -> VAR_34 ) != VAR_35 ) return VAR_36 ; if ( VAR_37 -> VAR_38 -> VAR_39 != VAR_40 ) return VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = ( TYPE_3 * ) VAR_46 -> VAR_47 ; if ( VAR_48 -> VAR_49 == VAR_50 ) VAR_51 -> VAR_52 = METHOD_3 ( VAR_53 , VAR_54 , VAR_55 ) ; if ( METHOD_4 ( VAR_56 -> VAR_57 ) < 0 ) { METHOD_5 ( VAR_58 , ""clientauthenticationfailure\\n"" ) ; METHOD_6 ( VAR_59 -> VAR_60 ) ;  return VAR_61 ;  } return VAR_62 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 ; VAR_2 * VAR_3 ; if ( VAR_4 -> VAR_5 == VAR_6 ) VAR_7 -> VAR_8 = METHOD_1 ( VAR_9 -> VAR_10 ) ; if ( VAR_11 -> VAR_12 == VAR_13 ) VAR_14 -> VAR_15 = VAR_16 -> VAR_17 ; VAR_18 -> VAR_19 = VAR_20 ; VAR_21 -> VAR_22 -> VAR_23 = VAR_24 -> VAR_25 -> VAR_26 ; if ( METHOD_2 ( VAR_27 -> VAR_28 , VAR_29 -> VAR_30 -> VAR_31 , VAR_32 -> VAR_33 -> VAR_34 ) != VAR_35 ) return VAR_36 ; if ( VAR_37 -> VAR_38 -> VAR_39 != VAR_40 ) return VAR_41 ; VAR_42 = VAR_43 -> VAR_44 ; VAR_45 = ( TYPE_3 * ) VAR_46 -> VAR_47 ; if ( VAR_48 -> VAR_49 == VAR_50 ) VAR_51 -> VAR_52 = METHOD_3 ( VAR_53 , VAR_54 , VAR_55 ) ; if ( METHOD_4 ( VAR_56 -> VAR_57 ) < 0 ) { METHOD_5 ( VAR_58 , ""clientauthenticationfailure\\n"" ) ; METHOD_6 ( VAR_59 -> VAR_60 ) ; VAR_59 -> VAR_60 = VAR_50 ; return VAR_61 ; } return VAR_62 ; }",704
705,"static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , const unsigned TYPE_1 * VAR_3 , const unsigned TYPE_2 * VAR_4 , const unsigned TYPE_3 * VAR_5 , const unsigned TYPE_4 * VAR_6 , unsigned TYPE_5 VAR_7 ) { unsigned TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; if ( ( unsigned TYPE_8 ) VAR_10 % VAR_11 ( struct STRUCT_OR_UNION_2 ) != 0 ||  ( unsigned TYPE_9 * ) VAR_12 + sizeof ( struct STRUCT_OR_UNION_3 ) >= VAR_13 ) {  METHOD_1 ( ""Badoffset%p\\n"" , VAR_14 ) ; return - VAR_15 ; } if ( VAR_16 -> VAR_17 < sizeof ( struct STRUCT_OR_UNION_4 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_2 ( ""checking:element%psize%u\\n"" , VAR_18 , VAR_19 -> VAR_20 ) ; return - VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 ; VAR_29 ++ ) { if ( ! ( VAR_30 & ( 1 << VAR_31 ) ) ) continue ; if ( ( unsigned TYPE_10 * ) VAR_32 - VAR_33 == VAR_34 [ VAR_35 ] ) VAR_36 -> VAR_37 [ VAR_38 ] = VAR_39 [ VAR_40 ] ; if ( ( unsigned TYPE_11 * ) VAR_41 - VAR_42 == VAR_43 [ VAR_44 ] ) { if ( ! METHOD_4 ( VAR_45 ) ) { METHOD_5 ( ""Underflowsmustbeunconditionaland"" ""usetheSTANDARDtargetwith"" ""ACCEPT/DROP\\n"" ) ; return - VAR_46 ; } VAR_47 -> VAR_48 [ VAR_49 ] = VAR_50 [ VAR_51 ] ; } } VAR_52 -> VAR_53 = ( ( struct STRUCT_OR_UNION_6 ) { 0 , 0 } ) ; VAR_54 -> VAR_55 = 0 ; return 0 ; }","static VAR_0 TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_1 , struct STRUCT_OR_UNION_1 * VAR_2 , const unsigned TYPE_1 * VAR_3 , const unsigned TYPE_2 * VAR_4 , const unsigned TYPE_3 * VAR_5 , const unsigned TYPE_4 * VAR_6 , unsigned TYPE_5 VAR_7 ) { unsigned TYPE_6 VAR_8 ; TYPE_7 VAR_9 ; if ( ( unsigned TYPE_8 ) VAR_10 % VAR_11 ( struct STRUCT_OR_UNION_2 ) != 0 || ( unsigned TYPE_9 * ) VAR_12 + sizeof ( struct STRUCT_OR_UNION_3 ) >= VAR_13 ) { METHOD_1 ( ""Badoffset%p\\n"" , VAR_14 ) ; return - VAR_15 ; } if ( VAR_16 -> VAR_17 < sizeof ( struct STRUCT_OR_UNION_4 ) + sizeof ( struct STRUCT_OR_UNION_5 ) ) { METHOD_2 ( ""checking:element%psize%u\\n"" , VAR_18 , VAR_19 -> VAR_20 ) ; return - VAR_21 ; } VAR_22 = METHOD_3 ( VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; for ( VAR_26 = 0 ; VAR_27 < VAR_28 ; VAR_29 ++ ) { if ( ! ( VAR_30 & ( 1 << VAR_31 ) ) ) continue ; if ( ( unsigned TYPE_10 * ) VAR_32 - VAR_33 == VAR_34 [ VAR_35 ] ) VAR_36 -> VAR_37 [ VAR_38 ] = VAR_39 [ VAR_40 ] ; if ( ( unsigned TYPE_11 * ) VAR_41 - VAR_42 == VAR_43 [ VAR_44 ] ) { if ( ! METHOD_4 ( VAR_45 ) ) { METHOD_5 ( ""Underflowsmustbeunconditionaland"" ""usetheSTANDARDtargetwith"" ""ACCEPT/DROP\\n"" ) ; return - VAR_46 ; } VAR_47 -> VAR_48 [ VAR_49 ] = VAR_50 [ VAR_51 ] ; } } VAR_52 -> VAR_53 = ( ( struct STRUCT_OR_UNION_6 ) { 0 , 0 } ) ; VAR_54 -> VAR_55 = 0 ; return 0 ; }",705
706,"TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( VAR_0 != VAR_1 ) ; METHOD_2 ( VAR_2 != VAR_3 ) ; METHOD_3 ( VAR_4 ) ;  METHOD_4 ( & VAR_5 ) ;  METHOD_5 ( VAR_6 , VAR_7 ) ; METHOD_6 ( & VAR_8 ) ; }",TYPE_0 METHOD_0 ( TYPE_1 ) { METHOD_1 ( VAR_0 != VAR_1 ) ; METHOD_2 ( VAR_2 != VAR_3 ) ; METHOD_3 ( VAR_4 ) ; METHOD_7 ( ) ; },706
707,"METHOD_0 ( TYPE_0 , struct STRUCT_OR_UNION_0 TYPE_1 * , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 , TYPE_8 , unsigned TYPE_9 , TYPE_10 ) { struct STRUCT_OR_UNION_1 * VAR_0 = VAR_1 , * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 , * VAR_8 ( TYPE_11 ) ; struct STRUCT_OR_UNION_5 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_6 VAR_11 = { VAR_12 , 0 } ; struct STRUCT_OR_UNION_7 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_8 * STRUCT_OR_UNION_9 ; TYPE_12 VAR_15 ; TYPE_13 TYPE_14 = 0 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 = VAR_18 ; TYPE_17 VAR_19 = - 1 ; if ( TYPE_18 & ~ VAR_20 ) return - VAR_21 ; VAR_22 = METHOD_1 ( TYPE_19 , & VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; if ( ! VAR_26 . VAR_27 ) { if ( METHOD_2 ( ) && ! METHOD_3 ( VAR_28 ) ) return - VAR_29 ; } if ( VAR_30 . VAR_31 ) { if ( VAR_32 . VAR_33 > VAR_34 ) return - VAR_35 ; } else { if ( VAR_36 . VAR_37 & ( 1ULL << 63 ) ) return - VAR_38 ; } if ( ! VAR_39 . VAR_40 ) VAR_41 . VAR_42 = VAR_43 ; if ( ( TYPE_20 & VAR_44 ) && ( TYPE_21 == - 1 || TYPE_22 == - 1 ) ) return - VAR_45 ; if ( TYPE_23 & VAR_46 ) VAR_47 |= VAR_48 ; VAR_49 = METHOD_4 ( VAR_50 ) ; if ( VAR_51 < 0 ) return VAR_52 ; if ( TYPE_24 != - 1 ) { VAR_53 = METHOD_5 ( TYPE_25 , & VAR_54 ) ; if ( VAR_55 ) goto VAR_56 ; VAR_57 = VAR_58 . STRUCT_OR_UNION_10 -> VAR_59 ; if ( TYPE_26 & VAR_60 ) VAR_61 = VAR_62 ; if ( TYPE_27 & VAR_63 ) VAR_64 = VAR_65 ; } if ( TYPE_28 != - 1 && ! ( TYPE_29 & VAR_66 ) ) { VAR_67 = METHOD_6 ( TYPE_30 ) ; if ( METHOD_7 ( VAR_68 ) ) { VAR_69 = METHOD_8 ( VAR_70 ) ; goto VAR_71 ; } } if ( VAR_72 && VAR_73 && VAR_74 -> VAR_75 . VAR_76 != VAR_77 . VAR_78 ) { VAR_79 = - VAR_80 ; goto VAR_81 ; } METHOD_9 ( ) ; if ( VAR_82 ) { VAR_83 = METHOD_10 ( & VAR_84 -> VAR_85 -> VAR_86 ) ; if ( VAR_87 ) goto VAR_88 ; VAR_89 = - VAR_90 ; if ( ! METHOD_11 ( VAR_91 , VAR_92 ) ) goto VAR_93 ; } if ( TYPE_31 & VAR_94 ) VAR_95 = TYPE_32 ; VAR_96 = METHOD_12 ( & VAR_97 , TYPE_33 , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; if ( METHOD_13 ( VAR_104 ) ) { VAR_105 = METHOD_14 ( VAR_106 ) ; goto VAR_107 ; } if ( METHOD_15 ( VAR_108 ) ) { if ( VAR_109 -> STRUCT_OR_UNION_11 -> VAR_110 & VAR_111 ) { VAR_112 = - VAR_113 ; goto VAR_114 ; } } STRUCT_OR_UNION_12 = VAR_115 -> STRUCT_OR_UNION_13 ; if ( VAR_116 . VAR_117 ) { VAR_118 = METHOD_16 ( VAR_119 , VAR_120 . VAR_121 ) ; if ( VAR_122 ) goto VAR_123 ; } if ( STRUCT_OR_UNION_14 -> VAR_124 == VAR_125 ) VAR_126 -> VAR_127 |= VAR_128 ; if ( VAR_129 && ( METHOD_17 ( VAR_130 ) != METHOD_18 ( VAR_131 ) ) ) { if ( METHOD_19 ( VAR_132 ) ) { STRUCT_OR_UNION_15 = VAR_133 -> STRUCT_OR_UNION_16 ; } else if ( METHOD_20 ( VAR_134 ) && ( VAR_135 -> VAR_136 & VAR_137 ) ) { TYPE_34 = 1 ; } } VAR_138 = METHOD_21 ( STRUCT_OR_UNION_17 , VAR_139 , VAR_140 ) ; if ( METHOD_22 ( VAR_141 ) ) { VAR_142 = METHOD_23 ( VAR_143 ) ; goto VAR_144 ; } if ( ( STRUCT_OR_UNION_18 -> VAR_145 & VAR_146 ) && VAR_147 ) { VAR_148 = - VAR_149 ; goto VAR_150 ; } if ( VAR_151 ) { VAR_152 = - VAR_153 ; if ( VAR_154 -> VAR_155 != VAR_156 ) goto VAR_157 ; if ( VAR_158 -> VAR_159 != VAR_160 -> VAR_161 ) goto VAR_162 ; if ( TYPE_35 ) { if ( VAR_163 -> VAR_164 -> VAR_165 != VAR_166 -> VAR_167 ) goto VAR_168 ; if ( VAR_169 -> TYPE_36 != VAR_170 -> TYPE_37 ) goto VAR_171 ; } else { if ( VAR_172 -> VAR_173 != VAR_174 ) goto VAR_175 ; } if ( VAR_176 . VAR_177 || VAR_178 . VAR_179 ) goto VAR_180 ; } if ( VAR_181 ) { VAR_182 = METHOD_24 ( VAR_183 , VAR_184 ) ; if ( VAR_185 ) goto VAR_186 ; } VAR_187 = METHOD_25 ( ""[perf_event]"" , & VAR_188 , VAR_189 , VAR_190 ) ; if ( METHOD_26 ( VAR_191 ) ) { VAR_192 = METHOD_27 ( VAR_193 ) ; VAR_194 = VAR_195 ; goto VAR_196 ; } if ( TYPE_38 ) {  TYPE_39 = VAR_197 -> VAR_198 ;  METHOD_28 ( & TYPE_40 -> VAR_199 , & VAR_200 -> VAR_201 ) ; if ( TYPE_41 -> VAR_202 == VAR_203 ) { VAR_204 = - VAR_205 ; goto VAR_206 ; }  } else {  METHOD_29 ( & VAR_207 -> VAR_208 ) ; } if ( VAR_209 -> VAR_210 == VAR_211 ) { VAR_212 = - VAR_213 ; goto VAR_214 ; } if ( ! METHOD_30 ( VAR_215 ) ) { VAR_216 = - VAR_217 ; goto VAR_218 ; } if ( ! METHOD_31 ( VAR_219 , VAR_220 ) ) { METHOD_32 ( TYPE_42 ) ; VAR_221 = - VAR_222 ; goto VAR_223 ; } METHOD_33 ( VAR_224 -> VAR_225 ) ; if ( TYPE_43 ) { METHOD_34 ( VAR_226 , 0 ) ; METHOD_35 ( VAR_227 , & VAR_228 -> VAR_229 , VAR_230 ) { METHOD_36 ( VAR_231 , 0 ) ; METHOD_37 ( TYPE_44 ) ; } METHOD_38 ( ) ; METHOD_39 ( VAR_232 , & VAR_233 -> VAR_234 , VAR_235 ) { METHOD_40 ( VAR_236 ) ; METHOD_41 ( VAR_237 , VAR_238 , VAR_239 -> TYPE_45 ) ; METHOD_42 ( VAR_240 ) ; } METHOD_43 ( VAR_241 ) ; METHOD_44 ( VAR_242 , VAR_243 , VAR_244 -> TYPE_46 ) ; METHOD_45 ( VAR_245 ) ; METHOD_46 ( TYPE_47 ) ; } METHOD_47 ( VAR_246 ) ; METHOD_48 ( VAR_247 ) ; VAR_248 -> VAR_249 = VAR_250 ; METHOD_49 ( VAR_251 , VAR_252 , VAR_253 -> TYPE_48 ) ; METHOD_50 ( VAR_254 ) ; if ( TYPE_49 )  METHOD_51 ( & TYPE_50 -> VAR_255 ) ;  METHOD_52 ( & VAR_256 -> VAR_257 ) ; if ( VAR_258 ) { METHOD_53 ( & VAR_259 -> VAR_260 -> VAR_261 ) ; METHOD_54 ( VAR_262 ) ; } METHOD_55 ( ) ; METHOD_56 ( & VAR_263 -> VAR_264 ) ; METHOD_57 ( & VAR_265 -> VAR_266 , & VAR_267 -> VAR_268 ) ; METHOD_58 ( & VAR_269 -> VAR_270 ) ; METHOD_59 ( VAR_271 ) ; METHOD_60 ( VAR_272 , VAR_273 ) ; return VAR_274 ; VAR_275 : if ( TYPE_51 )  METHOD_61 ( & TYPE_52 -> VAR_276 ) ;  METHOD_62 ( & VAR_277 -> VAR_278 ) ; METHOD_63 ( VAR_279 ) ; VAR_280 : METHOD_64 ( VAR_281 ) ; METHOD_65 ( VAR_282 ) ; VAR_283 : if ( ! VAR_284 ) METHOD_66 ( VAR_285 ) ; VAR_286 : if ( VAR_287 ) METHOD_67 ( & VAR_288 -> VAR_289 -> VAR_290 ) ; VAR_291 : METHOD_68 ( ) ; VAR_292 : if ( VAR_293 ) METHOD_69 ( VAR_294 ) ; VAR_295 : METHOD_70 ( VAR_296 ) ; VAR_297 : METHOD_71 ( VAR_298 ) ; return VAR_299 ; }","METHOD_0 ( TYPE_0 , struct STRUCT_OR_UNION_0 TYPE_1 * , TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , TYPE_7 , TYPE_8 , unsigned TYPE_9 , TYPE_10 ) { struct STRUCT_OR_UNION_1 * VAR_0 = VAR_1 , * VAR_2 = VAR_3 ; struct STRUCT_OR_UNION_2 * VAR_4 , * VAR_5 ; struct STRUCT_OR_UNION_3 VAR_6 ; struct STRUCT_OR_UNION_4 * VAR_7 , * VAR_8 ( TYPE_11 ) ; struct STRUCT_OR_UNION_5 * VAR_9 = VAR_10 ; struct STRUCT_OR_UNION_6 VAR_11 = { VAR_12 , 0 } ; struct STRUCT_OR_UNION_7 * VAR_13 = VAR_14 ; struct STRUCT_OR_UNION_8 * STRUCT_OR_UNION_9 ; TYPE_12 VAR_15 ; TYPE_13 TYPE_14 = 0 ; TYPE_15 VAR_16 ; TYPE_16 VAR_17 = VAR_18 ; TYPE_17 VAR_19 = - 1 ; if ( TYPE_18 & ~ VAR_20 ) return - VAR_21 ; VAR_22 = METHOD_1 ( TYPE_19 , & VAR_23 ) ; if ( VAR_24 ) return VAR_25 ; if ( ! VAR_26 . VAR_27 ) { if ( METHOD_2 ( ) && ! METHOD_3 ( VAR_28 ) ) return - VAR_29 ; } if ( VAR_30 . VAR_31 ) { if ( VAR_32 . VAR_33 > VAR_34 ) return - VAR_35 ; } else { if ( VAR_36 . VAR_37 & ( 1ULL << 63 ) ) return - VAR_38 ; } if ( ! VAR_39 . VAR_40 ) VAR_41 . VAR_42 = VAR_43 ; if ( ( TYPE_20 & VAR_44 ) && ( TYPE_21 == - 1 || TYPE_22 == - 1 ) ) return - VAR_45 ; if ( TYPE_23 & VAR_46 ) VAR_47 |= VAR_48 ; VAR_49 = METHOD_4 ( VAR_50 ) ; if ( VAR_51 < 0 ) return VAR_52 ; if ( TYPE_24 != - 1 ) { VAR_53 = METHOD_5 ( TYPE_25 , & VAR_54 ) ; if ( VAR_55 ) goto VAR_56 ; VAR_57 = VAR_58 . STRUCT_OR_UNION_10 -> VAR_59 ; if ( TYPE_26 & VAR_60 ) VAR_61 = VAR_62 ; if ( TYPE_27 & VAR_63 ) VAR_64 = VAR_65 ; } if ( TYPE_28 != - 1 && ! ( TYPE_29 & VAR_66 ) ) { VAR_67 = METHOD_6 ( TYPE_30 ) ; if ( METHOD_7 ( VAR_68 ) ) { VAR_69 = METHOD_8 ( VAR_70 ) ; goto VAR_71 ; } } if ( VAR_72 && VAR_73 && VAR_74 -> VAR_75 . VAR_76 != VAR_77 . VAR_78 ) { VAR_79 = - VAR_80 ; goto VAR_81 ; } METHOD_9 ( ) ; if ( VAR_82 ) { VAR_83 = METHOD_10 ( & VAR_84 -> VAR_85 -> VAR_86 ) ; if ( VAR_87 ) goto VAR_88 ; VAR_89 = - VAR_90 ; if ( ! METHOD_11 ( VAR_91 , VAR_92 ) ) goto VAR_93 ; } if ( TYPE_31 & VAR_94 ) VAR_95 = TYPE_32 ; VAR_96 = METHOD_12 ( & VAR_97 , TYPE_33 , VAR_98 , VAR_99 , VAR_100 , VAR_101 , VAR_102 , VAR_103 ) ; if ( METHOD_13 ( VAR_104 ) ) { VAR_105 = METHOD_14 ( VAR_106 ) ; goto VAR_107 ; } if ( METHOD_15 ( VAR_108 ) ) { if ( VAR_109 -> STRUCT_OR_UNION_11 -> VAR_110 & VAR_111 ) { VAR_112 = - VAR_113 ; goto VAR_114 ; } } STRUCT_OR_UNION_12 = VAR_115 -> STRUCT_OR_UNION_13 ; if ( VAR_116 . VAR_117 ) { VAR_118 = METHOD_16 ( VAR_119 , VAR_120 . VAR_121 ) ; if ( VAR_122 ) goto VAR_123 ; } if ( STRUCT_OR_UNION_14 -> VAR_124 == VAR_125 ) VAR_126 -> VAR_127 |= VAR_128 ; if ( VAR_129 && ( METHOD_17 ( VAR_130 ) != METHOD_18 ( VAR_131 ) ) ) { if ( METHOD_19 ( VAR_132 ) ) { STRUCT_OR_UNION_15 = VAR_133 -> STRUCT_OR_UNION_16 ; } else if ( METHOD_20 ( VAR_134 ) && ( VAR_135 -> VAR_136 & VAR_137 ) ) { TYPE_34 = 1 ; } } VAR_138 = METHOD_21 ( STRUCT_OR_UNION_17 , VAR_139 , VAR_140 ) ; if ( METHOD_22 ( VAR_141 ) ) { VAR_142 = METHOD_23 ( VAR_143 ) ; goto VAR_144 ; } if ( ( STRUCT_OR_UNION_18 -> VAR_145 & VAR_146 ) && VAR_147 ) { VAR_148 = - VAR_149 ; goto VAR_150 ; } if ( VAR_151 ) { VAR_152 = - VAR_153 ; if ( VAR_154 -> VAR_155 != VAR_156 ) goto VAR_157 ; if ( VAR_158 -> VAR_159 != VAR_160 -> VAR_161 ) goto VAR_162 ; if ( TYPE_35 ) { if ( VAR_163 -> VAR_164 -> VAR_165 != VAR_166 -> VAR_167 ) goto VAR_168 ; if ( VAR_169 -> TYPE_36 != VAR_170 -> TYPE_37 ) goto VAR_171 ; } else { if ( VAR_172 -> VAR_173 != VAR_174 ) goto VAR_175 ; } if ( VAR_176 . VAR_177 || VAR_178 . VAR_179 ) goto VAR_180 ; } if ( VAR_181 ) { VAR_182 = METHOD_24 ( VAR_183 , VAR_184 ) ; if ( VAR_185 ) goto VAR_186 ; } VAR_187 = METHOD_25 ( ""[perf_event]"" , & VAR_188 , VAR_189 , VAR_190 ) ; if ( METHOD_26 ( VAR_191 ) ) { VAR_192 = METHOD_27 ( VAR_193 ) ; VAR_194 = VAR_195 ; goto VAR_196 ; } if ( TYPE_38 ) { TYPE_39 = VAR_197 -> VAR_198 ; METHOD_28 ( & TYPE_40 -> VAR_199 , & VAR_200 -> VAR_201 ) ; if ( TYPE_41 -> VAR_202 == VAR_203 ) { VAR_204 = - VAR_205 ; goto VAR_206 ; } } else { METHOD_29 ( & VAR_207 -> VAR_208 ) ; } if ( VAR_209 -> VAR_210 == VAR_211 ) { VAR_212 = - VAR_213 ; goto VAR_214 ; } if ( ! METHOD_30 ( VAR_215 ) ) { VAR_216 = - VAR_217 ; goto VAR_218 ; } if ( ! METHOD_31 ( VAR_219 , VAR_220 ) ) { METHOD_32 ( TYPE_42 ) ; VAR_221 = - VAR_222 ; goto VAR_223 ; } METHOD_33 ( VAR_224 -> VAR_225 ) ; if ( TYPE_43 ) { METHOD_34 ( VAR_226 , 0 ) ; METHOD_35 ( VAR_227 , & VAR_228 -> VAR_229 , VAR_230 ) { METHOD_36 ( VAR_231 , 0 ) ; METHOD_37 ( TYPE_44 ) ; } METHOD_38 ( ) ; METHOD_39 ( VAR_232 , & VAR_233 -> VAR_234 , VAR_235 ) { METHOD_40 ( VAR_236 ) ; METHOD_41 ( VAR_237 , VAR_238 , VAR_239 -> TYPE_45 ) ; METHOD_42 ( VAR_240 ) ; } METHOD_43 ( VAR_241 ) ; METHOD_44 ( VAR_242 , VAR_243 , VAR_244 -> TYPE_46 ) ; METHOD_45 ( VAR_245 ) ; METHOD_46 ( TYPE_47 ) ; } METHOD_47 ( VAR_246 ) ; METHOD_48 ( VAR_247 ) ; VAR_248 -> VAR_249 = VAR_250 ; METHOD_49 ( VAR_251 , VAR_252 , VAR_253 -> TYPE_48 ) ; METHOD_50 ( VAR_254 ) ; if ( TYPE_49 ) METHOD_51 ( & TYPE_50 -> VAR_255 ) ; METHOD_52 ( & VAR_256 -> VAR_257 ) ; if ( VAR_258 ) { METHOD_53 ( & VAR_259 -> VAR_260 -> VAR_261 ) ; METHOD_54 ( VAR_262 ) ; } METHOD_55 ( ) ; METHOD_56 ( & VAR_263 -> VAR_264 ) ; METHOD_57 ( & VAR_265 -> VAR_266 , & VAR_267 -> VAR_268 ) ; METHOD_58 ( & VAR_269 -> VAR_270 ) ; METHOD_59 ( VAR_271 ) ; METHOD_60 ( VAR_272 , VAR_273 ) ; return VAR_274 ; VAR_275 : if ( TYPE_51 ) METHOD_61 ( & TYPE_52 -> VAR_276 ) ; METHOD_62 ( & VAR_277 -> VAR_278 ) ; METHOD_63 ( VAR_279 ) ; VAR_280 : METHOD_64 ( VAR_281 ) ; METHOD_65 ( VAR_282 ) ; VAR_283 : if ( ! VAR_284 ) METHOD_66 ( VAR_285 ) ; VAR_286 : if ( VAR_287 ) METHOD_67 ( & VAR_288 -> VAR_289 -> VAR_290 ) ; VAR_291 : METHOD_68 ( ) ; VAR_292 : if ( VAR_293 ) METHOD_69 ( VAR_294 ) ; VAR_295 : METHOD_70 ( VAR_296 ) ; VAR_297 : METHOD_71 ( VAR_298 ) ; return VAR_299 ; }",707
708,"TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; unsigned TYPE_7 * VAR_6 = VAR_7 ; TYPE_8 VAR_8 = - 1 , VAR_9 ; TYPE_9 VAR_10 , VAR_11 ; if ( ! VAR_12 ) { METHOD_1 ( VAR_13 , VAR_14 ) ; return - 1 ; }  METHOD_2 ( & VAR_15 ) ;  if ( ! METHOD_3 ( METHOD_4 ( VAR_16 -> VAR_17 ) , & VAR_18 , & VAR_19 ) ) { METHOD_5 ( VAR_20 , VAR_21 ) ; goto VAR_22 ; } if ( VAR_23 == VAR_24 ) { if ( ! VAR_25 -> VAR_26 || ! VAR_27 -> VAR_28 -> METHOD_6 ) { METHOD_7 ( VAR_29 , VAR_30 ) ; goto VAR_31 ; } VAR_32 = VAR_33 -> VAR_34 -> METHOD_8 ( & VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 != 2 ) goto VAR_42 ; VAR_43 = - 1 ; } else { const TYPE_10 * VAR_44 ; VAR_45 = METHOD_9 ( VAR_46 ) ; if ( VAR_47 == VAR_48 ) { METHOD_10 ( VAR_49 , VAR_50 ) ; goto VAR_51 ; } if ( METHOD_11 ( VAR_52 ) != VAR_53 -> VAR_54 -> VAR_55 ) { METHOD_12 ( VAR_56 , VAR_57 ) ; goto VAR_58 ; } if ( ! METHOD_13 ( & VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 ) ) { METHOD_14 ( VAR_64 , VAR_65 ) ; VAR_66 = 0 ; goto VAR_67 ; } } VAR_68 = METHOD_15 ( VAR_69 , & VAR_70 , VAR_71 ) ; if ( VAR_72 == VAR_73 ) { METHOD_16 ( VAR_74 , VAR_75 ) ; goto VAR_76 ; } VAR_77 = METHOD_17 ( & VAR_78 , VAR_79 , VAR_80 ) ; METHOD_18 ( VAR_81 , ( unsigned TYPE_11 ) VAR_82 ) ; METHOD_19 ( VAR_83 ) ; if ( ! VAR_84 ) { METHOD_20 ( VAR_85 , VAR_86 ) ; goto VAR_87 ; } VAR_88 = - 1 ; if ( METHOD_21 ( & VAR_89 , VAR_90 -> VAR_91 , ( TYPE_12 ) VAR_92 -> VAR_93 ) <= 0 ) { METHOD_22 ( VAR_94 , VAR_95 ) ; VAR_96 = 0 ; goto VAR_97 ; } VAR_98 = 1 ; VAR_99 : METHOD_23 ( & VAR_100 ) ; return ( VAR_101 ) ; }","TYPE_0 METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 , TYPE_4 * VAR_3 , TYPE_5 * VAR_4 ) { TYPE_6 VAR_5 ; unsigned TYPE_7 * VAR_6 = VAR_7 ; TYPE_8 VAR_8 = - 1 , VAR_9 ; TYPE_9 VAR_10 , VAR_11 ; if ( ! VAR_12 ) { METHOD_1 ( VAR_13 , VAR_14 ) ; return - 1 ; } if ( VAR_92 -> VAR_61 == VAR_102 && VAR_92 -> VAR_103 & 0x7 ) { METHOD_22 ( VAR_104 , VAR_105 ) ; return - 1 ; } METHOD_2 ( & VAR_15 ) ; if ( ! METHOD_3 ( METHOD_4 ( VAR_16 -> VAR_17 ) , & VAR_18 , & VAR_19 ) ) { METHOD_5 ( VAR_20 , VAR_21 ) ; goto VAR_22 ; } if ( VAR_23 == VAR_24 ) { if ( ! VAR_25 -> VAR_26 || ! VAR_27 -> VAR_28 -> METHOD_6 ) { METHOD_7 ( VAR_29 , VAR_30 ) ; goto VAR_31 ; } VAR_32 = VAR_33 -> VAR_34 -> METHOD_8 ( & VAR_35 , VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; if ( VAR_41 != 2 ) goto VAR_42 ; VAR_43 = - 1 ; } else { const TYPE_10 * VAR_44 ; VAR_45 = METHOD_9 ( VAR_46 ) ; if ( VAR_47 == VAR_48 ) { METHOD_10 ( VAR_49 , VAR_50 ) ; goto VAR_51 ; } if ( METHOD_11 ( VAR_52 ) != VAR_53 -> VAR_54 -> VAR_55 ) { METHOD_12 ( VAR_56 , VAR_57 ) ; goto VAR_58 ; } if ( ! METHOD_13 ( & VAR_59 , VAR_60 , VAR_61 , VAR_62 , VAR_63 ) ) { METHOD_14 ( VAR_64 , VAR_65 ) ; VAR_66 = 0 ; goto VAR_67 ; } } VAR_68 = METHOD_15 ( VAR_69 , & VAR_70 , VAR_71 ) ; if ( VAR_72 == VAR_73 ) { METHOD_16 ( VAR_74 , VAR_75 ) ; goto VAR_76 ; } VAR_77 = METHOD_17 ( & VAR_78 , VAR_79 , VAR_80 ) ; METHOD_18 ( VAR_81 , ( unsigned TYPE_11 ) VAR_82 ) ; METHOD_19 ( VAR_83 ) ; if ( ! VAR_84 ) { METHOD_20 ( VAR_85 , VAR_86 ) ; goto VAR_87 ; } VAR_88 = - 1 ; if ( METHOD_21 ( & VAR_89 , VAR_90 -> VAR_91 , ( TYPE_12 ) VAR_92 -> VAR_93 ) <= 0 ) { METHOD_22 ( VAR_94 , VAR_95 ) ; VAR_96 = 0 ; goto VAR_97 ; } VAR_98 = 1 ; VAR_99 : METHOD_23 ( & VAR_100 ) ; return ( VAR_101 ) ; }",708
709,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; unsigned TYPE_2 VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ;  METHOD_1 ( VAR_5 , METHOD_2 ( ) & ~ VAR_6 ) ;   METHOD_3 ( VAR_7 , METHOD_4 ( ) ) ;  METHOD_5 ( VAR_8 , METHOD_6 ( ) ) ; TYPE_3 ( VAR_9 , VAR_10 ) ; TYPE_4 TYPE_5 TYPE_6 ( TYPE_7 , 0 ) ; TYPE_8 ( VAR_11 , 0 ) ; else TYPE_9 ( TYPE_10 , TYPE_11 ) ; TYPE_12 ( VAR_12 , TYPE_13 ) ; TYPE_14 ( VAR_13 , TYPE_15 ) ; TYPE_16 ( VAR_14 , VAR_15 * 8 ) ; METHOD_7 ( & VAR_16 ) ; METHOD_8 ( VAR_17 , VAR_18 . VAR_19 ) ; VAR_20 -> VAR_21 = VAR_22 . VAR_23 ; METHOD_9 ( VAR_24 , VAR_25 ) ; METHOD_10 ( VAR_26 , VAR_27 , VAR_28 ) ; METHOD_11 ( VAR_29 , VAR_30 ) ; METHOD_12 ( VAR_31 , VAR_32 ) ; METHOD_13 ( VAR_33 , VAR_34 ) ; if ( VAR_35 . VAR_36 & VAR_37 ) { METHOD_14 ( VAR_38 , VAR_39 , VAR_40 ) ; METHOD_15 ( VAR_41 , VAR_42 | ( ( TYPE_17 ) VAR_43 << 32 ) ) ; } }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { TYPE_1 VAR_1 , VAR_2 ; unsigned TYPE_2 VAR_3 ; struct STRUCT_OR_UNION_1 VAR_4 ; METHOD_1 ( VAR_5 , METHOD_2 ( ) & ~ VAR_6 ) ; METHOD_3 ( VAR_7 , METHOD_4 ( ) ) ; METHOD_5 ( VAR_8 , METHOD_6 ( ) ) ; TYPE_3 ( VAR_9 , VAR_10 ) ; TYPE_4 TYPE_5 TYPE_6 ( TYPE_7 , 0 ) ; TYPE_8 ( VAR_11 , 0 ) ; else TYPE_9 ( TYPE_10 , TYPE_11 ) ; TYPE_12 ( VAR_12 , TYPE_13 ) ; TYPE_14 ( VAR_13 , TYPE_15 ) ; TYPE_16 ( VAR_14 , VAR_15 * 8 ) ; METHOD_7 ( & VAR_16 ) ; METHOD_8 ( VAR_17 , VAR_18 . VAR_19 ) ; VAR_20 -> VAR_21 = VAR_22 . VAR_23 ; METHOD_9 ( VAR_24 , VAR_25 ) ; METHOD_10 ( VAR_26 , VAR_27 , VAR_28 ) ; METHOD_11 ( VAR_29 , VAR_30 ) ; METHOD_12 ( VAR_31 , VAR_32 ) ; METHOD_13 ( VAR_33 , VAR_34 ) ; if ( VAR_35 . VAR_36 & VAR_37 ) { METHOD_14 ( VAR_38 , VAR_39 , VAR_40 ) ; METHOD_15 ( VAR_41 , VAR_42 | ( ( TYPE_17 ) VAR_43 << 32 ) ) ; } }",709
710,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 ) { struct STRUCT_OR_UNION_5 * VAR_1 ; struct STRUCT_OR_UNION_6 * VAR_2 = STRUCT_OR_UNION_7 -> VAR_3 ; struct STRUCT_OR_UNION_8 * VAR_4 ; TYPE_1 VAR_5 ; if ( VAR_6 -> VAR_7 ) return - VAR_8 ; VAR_9 = METHOD_1 ( STRUCT_OR_UNION_9 , VAR_10 -> VAR_11 ) ; if ( VAR_12 ) { if ( VAR_13 -> VAR_14 & VAR_15 ) return - VAR_16 ; if ( ( VAR_17 -> VAR_18 & VAR_19 ) && VAR_20 -> VAR_21 == & VAR_22 ) VAR_23 = METHOD_2 ( VAR_24 ) ; else if ( ( VAR_25 -> VAR_26 & VAR_27 ) && VAR_28 -> VAR_29 == & VAR_30 ) VAR_31 = METHOD_3 ( VAR_32 ) ; else return - VAR_33 ; if ( ! ! ( VAR_34 -> VAR_35 & VAR_36 ) != ! ! ( VAR_37 -> VAR_38 & VAR_39 ) ) return - VAR_40 ; if ( METHOD_4 ( VAR_41 ) ) return - VAR_42 ; VAR_43 = METHOD_5 ( VAR_44 -> VAR_45 ) ; if ( VAR_46 < 0 ) return VAR_47 ; VAR_48 = METHOD_6 ( VAR_49 , STRUCT_OR_UNION_10 , VAR_50 -> VAR_51 & VAR_52 ) ; if ( VAR_53 < 0 ) return VAR_54 ; if ( VAR_55 -> VAR_56 & VAR_57 && ( VAR_58 -> VAR_59 + VAR_60 -> VAR_61 > 1 ) ) { return 0 ; } } else { TYPE_2 * VAR_62 ; unsigned TYPE_3 VAR_63 = 0 ; TYPE_4 VAR_64 = VAR_65 -> VAR_66 & VAR_67 ? VAR_68 : 1 ; if ( ! METHOD_7 ( STRUCT_OR_UNION_11 -> VAR_69 , VAR_70 ) ) return - VAR_71 ; VAR_72 = METHOD_8 ( ) ; if ( VAR_73 < 0 ) return VAR_74 ; if ( VAR_75 -> VAR_76 & VAR_77 ) { VAR_78 |= VAR_79 ; VAR_80 = ""tun%d"" ; } else if ( VAR_81 -> VAR_82 & VAR_83 ) { VAR_84 |= VAR_85 ; VAR_86 = ""tap%d"" ; } else return - VAR_87 ; if ( * VAR_88 -> VAR_89 ) VAR_90 = VAR_91 -> VAR_92 ; VAR_93 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_12 ) , VAR_94 , VAR_95 , VAR_96 , VAR_97 , VAR_98 ) ; if ( ! VAR_99 ) return - VAR_100 ;  METHOD_10 ( VAR_101 , STRUCT_OR_UNION_13 ) ;  VAR_102 -> VAR_103 = & VAR_104 ; VAR_105 -> VAR_106 = VAR_107 -> VAR_108 ; VAR_109 -> VAR_110 [ 0 ] = & VAR_111 ; VAR_112 = METHOD_11 ( VAR_113 ) ; VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 . VAR_122 = 0 ; VAR_123 -> VAR_124 = sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_125 -> VAR_126 = VAR_127 ; VAR_128 -> VAR_129 = VAR_130 ; VAR_131 -> VAR_132 = VAR_133 -> VAR_134 . VAR_135 -> VAR_136 ; VAR_137 -> VAR_138 = 0 ; VAR_139 -> VAR_140 = netdev_alloc_pcpu_stats ( struct STRUCT_OR_UNION_15 ) ; if ( ! VAR_141 -> VAR_142 ) { VAR_143 = - VAR_144 ; goto VAR_145 ; } METHOD_12 ( & VAR_146 -> VAR_147 ) ; VAR_148 = METHOD_13 ( & VAR_149 -> VAR_150 ) ; if ( VAR_151 < 0 ) goto VAR_152 ; METHOD_14 ( VAR_153 ) ; METHOD_15 ( VAR_154 ) ; VAR_155 -> VAR_156 = VAR_157 | VAR_158 | VAR_159 | VAR_160 | VAR_161 ; VAR_162 -> VAR_163 = VAR_164 -> VAR_165 | VAR_166 ; VAR_167 -> VAR_168 = VAR_169 -> VAR_170 & ~ ( VAR_171 | VAR_172 ) ; METHOD_16 ( & VAR_173 -> VAR_174 ) ; VAR_175 = METHOD_17 ( VAR_176 , STRUCT_OR_UNION_16 , VAR_177 ) ; if ( VAR_178 < 0 ) goto VAR_179 ; VAR_180 = METHOD_18 ( VAR_181 -> VAR_182 ) ; if ( VAR_183 < 0 ) goto VAR_184 ; } METHOD_19 ( VAR_185 -> VAR_186 ) ; METHOD_20 ( VAR_187 , VAR_188 , ""tun_set_iff\\n"" ) ; VAR_189 -> VAR_190 = ( VAR_191 -> VAR_192 & ~ VAR_193 ) | ( VAR_194 -> VAR_195 & VAR_196 ) ; if ( METHOD_21 ( VAR_197 -> VAR_198 ) ) METHOD_22 ( VAR_199 -> VAR_200 ) ; METHOD_23 ( VAR_201 -> VAR_202 , VAR_203 -> VAR_204 -> VAR_205 ) ; return 0 ; VAR_206 : METHOD_24 ( VAR_207 ) ; goto VAR_208 ; VAR_209 : METHOD_25 ( VAR_210 ) ; METHOD_26 ( VAR_211 -> VAR_212 ) ; VAR_213 : METHOD_27 ( VAR_214 -> VAR_215 ) ; VAR_216 : METHOD_28 ( VAR_217 ) ; return VAR_218 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_3 , struct STRUCT_OR_UNION_4 * VAR_0 ) { struct STRUCT_OR_UNION_5 * VAR_1 ; struct STRUCT_OR_UNION_6 * VAR_2 = STRUCT_OR_UNION_7 -> VAR_3 ; struct STRUCT_OR_UNION_8 * VAR_4 ; TYPE_1 VAR_5 ; if ( VAR_6 -> VAR_7 ) return - VAR_8 ; VAR_9 = METHOD_1 ( STRUCT_OR_UNION_9 , VAR_10 -> VAR_11 ) ; if ( VAR_12 ) { if ( VAR_13 -> VAR_14 & VAR_15 ) return - VAR_16 ; if ( ( VAR_17 -> VAR_18 & VAR_19 ) && VAR_20 -> VAR_21 == & VAR_22 ) VAR_23 = METHOD_2 ( VAR_24 ) ; else if ( ( VAR_25 -> VAR_26 & VAR_27 ) && VAR_28 -> VAR_29 == & VAR_30 ) VAR_31 = METHOD_3 ( VAR_32 ) ; else return - VAR_33 ; if ( ! ! ( VAR_34 -> VAR_35 & VAR_36 ) != ! ! ( VAR_37 -> VAR_38 & VAR_39 ) ) return - VAR_40 ; if ( METHOD_4 ( VAR_41 ) ) return - VAR_42 ; VAR_43 = METHOD_5 ( VAR_44 -> VAR_45 ) ; if ( VAR_46 < 0 ) return VAR_47 ; VAR_48 = METHOD_6 ( VAR_49 , STRUCT_OR_UNION_10 , VAR_50 -> VAR_51 & VAR_52 ) ; if ( VAR_53 < 0 ) return VAR_54 ; if ( VAR_55 -> VAR_56 & VAR_57 && ( VAR_58 -> VAR_59 + VAR_60 -> VAR_61 > 1 ) ) { return 0 ; } } else { TYPE_2 * VAR_62 ; unsigned TYPE_3 VAR_63 = 0 ; TYPE_4 VAR_64 = VAR_65 -> VAR_66 & VAR_67 ? VAR_68 : 1 ; if ( ! METHOD_7 ( STRUCT_OR_UNION_11 -> VAR_69 , VAR_70 ) ) return - VAR_71 ; VAR_72 = METHOD_8 ( ) ; if ( VAR_73 < 0 ) return VAR_74 ; if ( VAR_75 -> VAR_76 & VAR_77 ) { VAR_78 |= VAR_79 ; VAR_80 = ""tun%d"" ; } else if ( VAR_81 -> VAR_82 & VAR_83 ) { VAR_84 |= VAR_85 ; VAR_86 = ""tap%d"" ; } else return - VAR_87 ; if ( * VAR_88 -> VAR_89 ) VAR_90 = VAR_91 -> VAR_92 ; VAR_93 = METHOD_9 ( sizeof ( struct STRUCT_OR_UNION_12 ) , VAR_94 , VAR_95 , VAR_96 , VAR_97 , VAR_98 ) ; if ( ! VAR_99 ) return - VAR_100 ; METHOD_10 ( VAR_101 , STRUCT_OR_UNION_13 ) ; VAR_102 -> VAR_103 = & VAR_104 ; VAR_105 -> VAR_106 = VAR_107 -> VAR_108 ; VAR_109 -> VAR_110 [ 0 ] = & VAR_111 ; VAR_112 = METHOD_11 ( VAR_113 ) ; VAR_114 -> VAR_115 = VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; VAR_120 -> VAR_121 . VAR_122 = 0 ; VAR_123 -> VAR_124 = sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_125 -> VAR_126 = VAR_127 ; VAR_128 -> VAR_129 = VAR_130 ; VAR_131 -> VAR_132 = VAR_133 -> VAR_134 . VAR_135 -> VAR_136 ; VAR_137 -> VAR_138 = 0 ; VAR_139 -> VAR_140 = netdev_alloc_pcpu_stats ( struct STRUCT_OR_UNION_15 ) ; if ( ! VAR_141 -> VAR_142 ) { VAR_143 = - VAR_144 ; VAR_218 = METHOD_29 ( STRUCT_OR_UNION_13 , VAR_217 , VAR_205 ) ; if ( VAR_218 ) goto VAR_216 ; goto VAR_145 ; } METHOD_12 ( & VAR_146 -> VAR_147 ) ; VAR_148 = METHOD_13 ( & VAR_149 -> VAR_150 ) ; if ( VAR_151 < 0 ) goto VAR_152 ; METHOD_14 ( VAR_153 ) ; METHOD_15 ( VAR_154 ) ; VAR_155 -> VAR_156 = VAR_157 | VAR_158 | VAR_159 | VAR_160 | VAR_161 ; VAR_162 -> VAR_163 = VAR_164 -> VAR_165 | VAR_166 ; VAR_167 -> VAR_168 = VAR_169 -> VAR_170 & ~ ( VAR_171 | VAR_172 ) ; METHOD_16 ( & VAR_173 -> VAR_174 ) ; VAR_175 = METHOD_17 ( VAR_176 , STRUCT_OR_UNION_16 , VAR_177 ) ; if ( VAR_178 < 0 ) goto VAR_179 ; VAR_180 = METHOD_18 ( VAR_181 -> VAR_182 ) ; if ( VAR_183 < 0 ) goto VAR_184 ; } METHOD_19 ( VAR_185 -> VAR_186 ) ; METHOD_20 ( VAR_187 , VAR_188 , ""tun_set_iff\\n"" ) ; VAR_189 -> VAR_190 = ( VAR_191 -> VAR_192 & ~ VAR_193 ) | ( VAR_194 -> VAR_195 & VAR_196 ) ; if ( METHOD_21 ( VAR_197 -> VAR_198 ) ) METHOD_22 ( VAR_199 -> VAR_200 ) ; METHOD_23 ( VAR_201 -> VAR_202 , VAR_203 -> VAR_204 -> VAR_205 ) ; return 0 ; VAR_206 : METHOD_24 ( VAR_207 ) ; goto VAR_208 ; VAR_209 : METHOD_25 ( VAR_210 ) ; METHOD_26 ( VAR_211 -> VAR_212 ) ; VAR_213 : METHOD_27 ( VAR_214 -> VAR_215 ) ; VAR_216 : METHOD_28 ( VAR_217 ) ; return VAR_218 ; }",710
711,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { if ( ( VAR_4 & 0xff00 ) == 0x7e00 ) { METHOD_1 ( VAR_5 , VAR_6 - 1 , VAR_7 ) ; return ; } switch ( VAR_8 ) { case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : METHOD_2 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ; break ; case VAR_20 : METHOD_3 ( VAR_21 , VAR_22 , VAR_23 ) ; break ; case VAR_24 : METHOD_4 ( VAR_25 , VAR_26 , VAR_27 ) ; break ; case VAR_28 : METHOD_5 ( VAR_29 , VAR_30 , VAR_31 ) ; break ; case VAR_32 : METHOD_6 ( VAR_33 , VAR_34 , VAR_35 ) ; break ; case VAR_36 : case VAR_37 : case VAR_38 : METHOD_7 ( VAR_39 , VAR_40 , VAR_41 ) ; break ; case VAR_42 : case VAR_43 : METHOD_8 ( VAR_44 , VAR_45 , VAR_46 ) ; break ; case VAR_47 : case VAR_48 : METHOD_9 ( VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 :  METHOD_10 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ;  break ; case VAR_57 : case VAR_58 : METHOD_11 ( VAR_59 , VAR_60 , VAR_61 ) ; break ; case VAR_62 : METHOD_12 ( ( VAR_63 , ""compressedPPPdata"" ) ) ; break ; default : METHOD_13 ( ( VAR_64 , ""%s"" , METHOD_14 ( VAR_65 , ""unknownPPPprotocol(0x%04x)"" , VAR_66 ) ) ) ; METHOD_15 ( VAR_67 , VAR_68 , ""\\n\\t"" , VAR_69 ) ; break ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , const TYPE_3 * VAR_2 , TYPE_4 VAR_3 ) { if ( ( VAR_4 & 0xff00 ) == 0x7e00 ) { METHOD_1 ( VAR_5 , VAR_6 - 1 , VAR_7 ) ; return ; } switch ( VAR_8 ) { case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : METHOD_2 ( VAR_16 , VAR_17 , VAR_18 , VAR_19 ) ; break ; case VAR_20 : METHOD_3 ( VAR_21 , VAR_22 , VAR_23 ) ; break ; case VAR_24 : METHOD_4 ( VAR_25 , VAR_26 , VAR_27 ) ; break ; case VAR_28 : METHOD_5 ( VAR_29 , VAR_30 , VAR_31 ) ; break ; case VAR_32 : METHOD_6 ( VAR_33 , VAR_34 , VAR_35 ) ; break ; case VAR_36 : case VAR_37 : case VAR_38 : METHOD_7 ( VAR_39 , VAR_40 , VAR_41 ) ; break ; case VAR_42 : case VAR_43 : METHOD_8 ( VAR_44 , VAR_45 , VAR_46 ) ; break ; case VAR_47 : case VAR_48 : METHOD_9 ( VAR_49 , VAR_50 , VAR_51 ) ; break ; case VAR_52 : METHOD_10 ( VAR_53 , VAR_54 , VAR_55 , VAR_56 ) ; break ; case VAR_57 : case VAR_58 : METHOD_11 ( VAR_59 , VAR_60 , VAR_61 ) ; break ; case VAR_62 : METHOD_12 ( ( VAR_63 , ""compressedPPPdata"" ) ) ; break ; default : METHOD_13 ( ( VAR_64 , ""%s"" , METHOD_14 ( VAR_65 , ""unknownPPPprotocol(0x%04x)"" , VAR_66 ) ) ) ; METHOD_15 ( VAR_67 , VAR_68 , ""\\n\\t"" , VAR_69 ) ; break ; } }",711
712,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = ( TYPE_4 * ) VAR_3 ; TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 , VAR_6 -> VAR_7 . VAR_8 ) ; TYPE_7 VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 != VAR_13 ) { VAR_14 -> VAR_15 . VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 ) ; } if ( VAR_22 ) { if ( METHOD_3 ( VAR_23 , - VAR_24 , VAR_25 ) ) { return ; } }  METHOD_4 ( ""Datareadytag=0x%xlen=%zd\\n"" , VAR_26 -> VAR_27 . VAR_28 , VAR_29 -> VAR_30 . VAR_31 ) ;   VAR_32 = VAR_33 -> VAR_34 . VAR_35 / 512 ;  VAR_36 -> VAR_37 += VAR_38 ; VAR_39 -> VAR_40 -= VAR_41 ;  METHOD_5 ( & VAR_42 -> VAR_43 , VAR_44 -> VAR_45 . VAR_46 ) ;  }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 * VAR_2 = ( TYPE_4 * ) VAR_3 ; TYPE_5 * VAR_4 = METHOD_1 ( TYPE_6 , VAR_5 , VAR_6 -> VAR_7 . VAR_8 ) ; TYPE_7 VAR_9 ; if ( VAR_10 -> VAR_11 . VAR_12 != VAR_13 ) { VAR_14 -> VAR_15 . VAR_16 = VAR_17 ; METHOD_2 ( VAR_18 -> VAR_19 , & VAR_20 -> VAR_21 ) ; } if ( VAR_22 ) { if ( METHOD_3 ( VAR_23 , - VAR_24 , VAR_25 ) ) { return ; } } METHOD_4 ( ""Datareadytag=0x%xlen=%zd\\n"" , VAR_26 -> VAR_27 . VAR_28 , VAR_29 -> VAR_30 . VAR_31 ) ; VAR_32 = VAR_33 -> VAR_34 . VAR_35 / 512 ; VAR_36 -> VAR_37 += VAR_38 ; VAR_39 -> VAR_40 -= VAR_41 ; METHOD_5 ( & VAR_42 -> VAR_43 , VAR_44 -> VAR_47 . VAR_48 ) ; }",712
713,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; TYPE_3 * const VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 VAR_7 ; if ( ( VAR_8 -> VAR_9 == 0 ||  ( VAR_10 -> VAR_11 & VAR_12 ) ||  VAR_13 -> VAR_14 == 0 ||  ( VAR_15 -> VAR_16 . VAR_17 && METHOD_1 ( VAR_18 ) ) ) ) {  VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 -> VAR_25 != 0 && VAR_26 -> VAR_27 == 0 ;  VAR_28 -> VAR_29 = VAR_30 -> VAR_31 ;  VAR_32 -> VAR_33 = VAR_34 ;  VAR_35 -> VAR_36 = 0 ;  VAR_37 = METHOD_2 ( VAR_38 ) ; } else { VAR_39 -> VAR_40 = VAR_41 ;  VAR_42 = METHOD_3 ( VAR_43 ) ;   }  METHOD_4 ( VAR_44 , VAR_45 ) ;  VAR_46 -> VAR_47 = VAR_48 ;  VAR_49 -> VAR_50 = VAR_51 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * const VAR_1 = & VAR_2 -> VAR_3 ; TYPE_3 * const VAR_4 = & VAR_5 -> VAR_6 ; TYPE_4 VAR_7 ; if ( ( VAR_8 -> VAR_9 == 0 || ( VAR_44 -> VAR_11 & VAR_12 ) || VAR_13 -> VAR_14 == 0 || ( VAR_15 -> VAR_16 . VAR_17 && 0 ) ) ) ) { VAR_19 -> VAR_20 = VAR_21 ; VAR_22 -> VAR_23 = VAR_24 -> VAR_25 != 0 && VAR_26 -> VAR_27 == 0 ; VAR_28 -> VAR_29 = VAR_30 -> VAR_31 ; VAR_32 -> VAR_33 = VAR_34 ; VAR_35 -> VAR_36 = 0 ; } else { VAR_39 -> VAR_40 = VAR_41 ; VAR_42 = METHOD_3 ( VAR_43 ) ; } METHOD_4 ( VAR_44 , VAR_45 ) ; if ( VAR_44 -> VAR_16 . VAR_53 == VAR_54 ) VAR_44 -> VAR_55 = METHOD_5 ( VAR_44 ) ; else VAR_44 -> VAR_55 = 0 ; }",713
714,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; VAR_3 * VAR_4 , * VAR_5 ; TYPE_3 VAR_6 ;  TYPE_4 * VAR_7 , * VAR_8 ;   TYPE_5 VAR_9 , VAR_10 ;  TYPE_6 VAR_11 = VAR_12 ; if ( VAR_13 -> VAR_14 ) return VAR_15 -> VAR_16 ; if ( ! VAR_17 -> VAR_18 . VAR_19 ) METHOD_2 ( VAR_20 , VAR_21 ) ; if ( VAR_22 -> VAR_23 && ! VAR_24 -> VAR_25 ) return VAR_26 ; VAR_27 = METHOD_3 ( VAR_28 -> VAR_29 ) ; if ( ! VAR_30 ) { if ( METHOD_4 ( VAR_31 -> VAR_32 ) ) { if ( ! VAR_33 -> VAR_34 ) { if ( VAR_35 -> VAR_36 ) METHOD_5 ( VAR_37 -> VAR_38 ) ; if ( VAR_39 -> VAR_40 ) METHOD_6 ( VAR_41 -> VAR_42 ) ; VAR_43 -> VAR_44 = VAR_45 ; return VAR_46 ; } } else { return VAR_47 ; }  }   VAR_48 = ( TYPE_7 * ) METHOD_7 ( VAR_49 , & VAR_50 ) ;  if ( VAR_51 -> VAR_52 && VAR_53 ) { VAR_54 = METHOD_8 ( VAR_55 ) ; } VAR_56 = VAR_57 -> VAR_58 ; if ( VAR_59 && ! VAR_60 -> VAR_61 ) { if ( VAR_62 -> VAR_63 + VAR_64 > VAR_65 -> VAR_66 ) { VAR_67 -> VAR_68 = VAR_69 -> VAR_70 + VAR_71 ; VAR_72 -> VAR_73 = METHOD_9 ( VAR_74 -> VAR_75 , VAR_76 -> VAR_77 ) ; } METHOD_10 ( VAR_78 -> VAR_79 + VAR_80 -> VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 -> VAR_85 += VAR_86 ; } if ( ! VAR_87 -> VAR_88 ) VAR_89 -> VAR_90 = METHOD_11 ( VAR_91 -> VAR_92 , VAR_93 -> VAR_94 , VAR_95 ) ; else METHOD_12 ( VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 ) ; if ( VAR_102 -> VAR_103 ) { METHOD_13 ( VAR_104 -> VAR_105 , VAR_106 -> VAR_107 - 1 ) ; VAR_108 -> VAR_109 = 0 ; } if ( VAR_110 == VAR_111 ) VAR_112 = 0 ; while ( 1 ) { VAR_113 = ( TYPE_8 ) METHOD_14 ( VAR_114 -> VAR_115 ) ; TYPE_9 VAR_116 [ 4096 ] ; TYPE_10 VAR_117 = 4096 ; if ( ! METHOD_15 ( VAR_118 -> VAR_119 , & VAR_120 -> VAR_121 , & VAR_122 , VAR_123 , VAR_124 ) ) break ; if ( VAR_125 -> VAR_126 ) { TYPE_11 VAR_127 = ( TYPE_12 ) ( VAR_128 -> VAR_129 * VAR_130 [ VAR_131 -> VAR_132 ] ) ; if ( VAR_133 -> VAR_134 + VAR_135 -> VAR_136 >= VAR_137 ) { VAR_138 -> VAR_139 = VAR_140 ; } } METHOD_16 ( VAR_141 , VAR_142 ) ; if ( ! VAR_143 -> VAR_144 ) { VAR_145 -> VAR_146 = VAR_147 + 1 ; return VAR_148 ; } if ( ! VAR_149 -> VAR_150 ) { TYPE_13 VAR_151 = VAR_152 ; VAR_153 = METHOD_17 ( VAR_154 -> VAR_155 , VAR_156 , & VAR_157 ) ; if ( VAR_158 -> VAR_159 ) METHOD_18 ( VAR_160 -> VAR_161 , VAR_162 ) ; METHOD_19 ( VAR_163 , VAR_164 , VAR_165 ) ; METHOD_20 ( VAR_166 , VAR_167 -> VAR_168 ) ; METHOD_21 ( VAR_169 , VAR_170 -> VAR_171 ) ; METHOD_22 ( VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 -> VAR_176 . VAR_177 == VAR_178 ) { if ( VAR_179 && ( VAR_180 [ 0 ] & 0x80 ) && ! VAR_181 -> VAR_182 ) { VAR_183 = VAR_184 ; VAR_185 -> VAR_186 = VAR_187 ; } else { VAR_188 = VAR_189 ; VAR_190 -> VAR_191 = VAR_192 ; } } METHOD_23 ( VAR_193 , VAR_194 ) ; METHOD_24 ( VAR_195 ) ; } METHOD_25 ( VAR_196 ) ; if ( VAR_197 ) { VAR_198 = ( TYPE_14 ) METHOD_26 ( VAR_199 -> VAR_200 ) ; if ( VAR_201 <= VAR_202 ) { VAR_203 = 0 ; if ( VAR_204 -> VAR_205 ) METHOD_27 ( VAR_206 -> VAR_207 ) ; VAR_208 -> VAR_209 = VAR_210 ; if ( VAR_211 ) METHOD_28 ( & VAR_212 -> VAR_213 ) ; } } } if ( VAR_214 ) { VAR_215 = ( TYPE_15 ) METHOD_29 ( VAR_216 -> VAR_217 ) ; METHOD_30 ( VAR_218 -> VAR_219 >= VAR_220 ) ; METHOD_31 ( VAR_221 -> VAR_222 , VAR_223 -> VAR_224 + VAR_225 , VAR_226 -> VAR_227 - VAR_228 ) ; VAR_229 -> VAR_230 -= VAR_231 ; METHOD_32 ( VAR_232 -> VAR_233 ) ; METHOD_33 ( ! VAR_234 -> VAR_235 ) ; } else { VAR_236 -> VAR_237 = 0 ; return METHOD_34 ( VAR_238 ) ; } return VAR_239 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 ) { TYPE_2 * VAR_1 = METHOD_1 ( VAR_2 ) ; VAR_3 * VAR_4 , * VAR_5 ; TYPE_3 VAR_6 ; TYPE_4 * VAR_7 , * VAR_8 ; TYPE_5 VAR_9 , VAR_10 ; TYPE_6 VAR_11 = VAR_12 ; if ( VAR_13 -> VAR_14 ) return VAR_15 -> VAR_16 ; if ( ! VAR_17 -> VAR_18 . VAR_19 ) METHOD_2 ( VAR_20 , VAR_21 ) ; if ( VAR_22 -> VAR_23 && ! VAR_24 -> VAR_25 ) return VAR_26 ; VAR_27 = METHOD_3 ( VAR_28 -> VAR_29 ) ; if ( ! VAR_30 ) { if ( METHOD_4 ( VAR_31 -> VAR_32 ) ) { if ( ! VAR_33 -> VAR_34 ) { if ( VAR_35 -> VAR_36 ) METHOD_5 ( VAR_37 -> VAR_38 ) ; if ( VAR_39 -> VAR_40 ) METHOD_6 ( VAR_41 -> VAR_42 ) ; VAR_43 -> VAR_44 = VAR_45 ; return VAR_46 ; } } else { else { return VAR_47 ; } } VAR_48 = ( TYPE_7 * ) METHOD_7 ( VAR_49 , & VAR_50 ) ; if ( VAR_51 -> VAR_52 && VAR_53 ) { VAR_54 = METHOD_8 ( VAR_55 ) ; } VAR_56 = VAR_57 -> VAR_58 ; if ( VAR_59 && ! VAR_60 -> VAR_61 ) { if ( VAR_62 -> VAR_63 + VAR_64 > VAR_65 -> VAR_66 ) { VAR_67 -> VAR_68 = VAR_69 -> VAR_70 + VAR_71 ; VAR_72 -> VAR_73 = METHOD_9 ( VAR_74 -> VAR_75 , VAR_76 -> VAR_77 ) ; } METHOD_10 ( VAR_78 -> VAR_79 + VAR_80 -> VAR_81 , VAR_82 , VAR_83 ) ; VAR_84 -> VAR_85 += VAR_86 ; } if ( ! VAR_87 -> VAR_88 ) VAR_89 -> VAR_90 = METHOD_11 ( VAR_91 -> VAR_92 , VAR_93 -> VAR_94 , VAR_95 ) ; else METHOD_12 ( VAR_96 -> VAR_97 , VAR_98 -> VAR_99 , VAR_100 -> VAR_101 ) ; if ( VAR_102 -> VAR_103 ) { METHOD_13 ( VAR_104 -> VAR_105 , VAR_106 -> VAR_107 - 1 ) ; VAR_108 -> VAR_109 = 0 ; } if ( VAR_110 == VAR_111 ) VAR_112 = 0 ; while ( 1 ) { VAR_113 = ( TYPE_8 ) METHOD_14 ( VAR_114 -> VAR_115 ) ; TYPE_9 VAR_116 [ 4096 ] ; TYPE_10 VAR_117 = 4096 ; if ( ! METHOD_15 ( VAR_118 -> VAR_119 , & VAR_120 -> VAR_121 , & VAR_122 , VAR_123 , VAR_124 ) ) break ; if ( VAR_125 -> VAR_126 ) { TYPE_11 VAR_127 = ( TYPE_12 ) ( VAR_128 -> VAR_129 * VAR_130 [ VAR_131 -> VAR_132 ] ) ; if ( VAR_133 -> VAR_134 + VAR_135 -> VAR_136 >= VAR_137 ) { VAR_138 -> VAR_139 = VAR_140 ; } } METHOD_16 ( VAR_141 , VAR_142 ) ; if ( ! VAR_143 -> VAR_144 ) { VAR_145 -> VAR_146 = VAR_147 + 1 ; return VAR_148 ; } if ( ! VAR_149 -> VAR_150 ) { TYPE_13 VAR_151 = VAR_152 ; VAR_153 = METHOD_17 ( VAR_154 -> VAR_155 , VAR_156 , & VAR_157 ) ; if ( VAR_158 -> VAR_159 ) METHOD_18 ( VAR_160 -> VAR_161 , VAR_162 ) ; METHOD_19 ( VAR_163 , VAR_164 , VAR_165 ) ; METHOD_20 ( VAR_166 , VAR_167 -> VAR_168 ) ; METHOD_21 ( VAR_169 , VAR_170 -> VAR_171 ) ; METHOD_22 ( VAR_172 , VAR_173 , VAR_174 ) ; if ( VAR_175 -> VAR_176 . VAR_177 == VAR_178 ) { if ( VAR_179 && ( VAR_180 [ 0 ] & 0x80 ) && ! VAR_181 -> VAR_182 ) { VAR_183 = VAR_184 ; VAR_185 -> VAR_186 = VAR_187 ; } else { VAR_188 = VAR_189 ; VAR_190 -> VAR_191 = VAR_192 ; } } METHOD_23 ( VAR_193 , VAR_194 ) ; METHOD_24 ( VAR_195 ) ; } METHOD_25 ( VAR_196 ) ; if ( VAR_197 ) { VAR_198 = ( TYPE_14 ) METHOD_26 ( VAR_199 -> VAR_200 ) ; if ( VAR_201 <= VAR_202 ) { VAR_203 = 0 ; if ( VAR_204 -> VAR_205 ) METHOD_27 ( VAR_206 -> VAR_207 ) ; VAR_208 -> VAR_209 = VAR_210 ; if ( VAR_211 ) METHOD_28 ( & VAR_212 -> VAR_213 ) ; } } } if ( VAR_214 ) { VAR_215 = ( TYPE_15 ) METHOD_29 ( VAR_216 -> VAR_217 ) ; METHOD_30 ( VAR_218 -> VAR_219 >= VAR_220 ) ; METHOD_31 ( VAR_221 -> VAR_222 , VAR_223 -> VAR_224 + VAR_225 , VAR_226 -> VAR_227 - VAR_228 ) ; VAR_229 -> VAR_230 -= VAR_231 ; METHOD_32 ( VAR_232 -> VAR_233 ) ; METHOD_33 ( ! VAR_234 -> VAR_235 ) ; } else { VAR_236 -> VAR_237 = 0 ; return METHOD_34 ( VAR_238 ) ; } return VAR_239 ; }",714
715,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , const struct STRUCT_OR_UNION_2 * VAR_3 ) {  if ( VAR_4 -> VAR_5 )  return - VAR_6 ; if ( VAR_7 < METHOD_1 ( & VAR_8 -> VAR_9 ) ) return - VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = METHOD_2 ( & VAR_16 -> VAR_17 ) ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = METHOD_3 ( & VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 = ( TYPE_2 * ) VAR_26 + sizeof ( * VAR_27 ) ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = & VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 ++ ; VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 = & VAR_41 ; VAR_42 -> VAR_43 = 1 ; if ( VAR_44 -> VAR_45 & ( 1 << VAR_46 ) ) { while ( METHOD_4 ( VAR_47 -> VAR_48 ) & ( 1 << VAR_49 ) ) { VAR_50 -> VAR_51 += sizeof ( VAR_52 ) ; if ( ( unsigned TYPE_3 ) VAR_53 -> VAR_54 -  ( unsigned TYPE_4 ) VAR_55 -> VAR_56 >  ( unsigned TYPE_5 ) VAR_57 -> VAR_58 ) return - VAR_59 ; } VAR_60 -> VAR_61 += sizeof ( VAR_62 ) ; } VAR_63 -> VAR_64 = VAR_65 -> VAR_66 ; return 0 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 , const struct STRUCT_OR_UNION_2 * VAR_3 ) { if ( VAR_7 < sizeof ( struct STRUCT_OR_UNION_1 ) ) return - VAR_59 ; if ( VAR_4 -> VAR_5 ) return - VAR_6 ; if ( VAR_7 < METHOD_1 ( & VAR_8 -> VAR_9 ) ) return - VAR_10 ; VAR_11 -> VAR_12 = VAR_13 ; VAR_14 -> VAR_15 = METHOD_2 ( & VAR_16 -> VAR_17 ) ; VAR_18 -> VAR_19 = 0 ; VAR_20 -> VAR_21 = METHOD_3 ( & VAR_22 -> VAR_23 ) ; VAR_24 -> VAR_25 = ( TYPE_2 * ) VAR_26 + sizeof ( * VAR_27 ) ; VAR_28 -> VAR_29 = 0 ; VAR_30 -> VAR_31 = & VAR_32 -> VAR_33 ; VAR_34 -> VAR_35 ++ ; VAR_36 -> VAR_37 = VAR_38 ; VAR_39 -> VAR_40 = & VAR_41 ; VAR_42 -> VAR_43 = 1 ; if ( VAR_44 -> VAR_45 & ( 1 << VAR_46 ) ) { while ( METHOD_4 ( VAR_47 -> VAR_48 ) & ( 1 << VAR_49 ) ) { VAR_50 -> VAR_51 += sizeof ( VAR_52 ) ; if ( ( unsigned TYPE_3 ) VAR_53 -> VAR_54 - ( unsigned TYPE_4 ) VAR_55 -> VAR_56 > ( unsigned TYPE_5 ) VAR_57 -> VAR_58 ) return - VAR_59 ; } VAR_60 -> VAR_61 += sizeof ( VAR_62 ) ; } VAR_63 -> VAR_64 = VAR_65 -> VAR_66 ; return 0 ; }",715
716,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_7 = METHOD_2 ( VAR_8 ) ; struct STRUCT_OR_UNION_6 * VAR_9 , * VAR_10 , VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; struct STRUCT_OR_UNION_8 VAR_13 ; struct STRUCT_OR_UNION_9 * VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_10 * VAR_16 ; TYPE_2 VAR_17 ; TYPE_3 VAR_18 ; if ( VAR_19 -> VAR_20 == VAR_21 ) { if ( METHOD_3 ( VAR_22 ) ) return - VAR_23 ; VAR_24 = METHOD_4 ( VAR_25 , VAR_26 , VAR_27 ) ; goto VAR_28 ; } if ( VAR_29 < VAR_30 ) return - VAR_31 ; if ( VAR_32 -> VAR_33 != VAR_34 ) return - VAR_35 ; METHOD_5 ( & VAR_36 , 0 , sizeof ( VAR_37 ) ) ; if ( VAR_38 -> VAR_39 ) { VAR_40 . VAR_41 = VAR_42 -> VAR_43 & VAR_44 ; if ( VAR_45 . VAR_46 & VAR_47 ) { VAR_48 = METHOD_6 ( VAR_49 , VAR_50 . VAR_51 ) ; if ( ! VAR_52 ) return - VAR_53 ; } } VAR_54 = METHOD_7 ( & VAR_55 -> VAR_56 ) ; if ( VAR_57 == VAR_58 ) { VAR_59 -> VAR_60 . VAR_61 [ 15 ] = 0x01 ; } VAR_62 = & VAR_63 -> VAR_64 ; if ( VAR_65 == VAR_66 ) { struct STRUCT_OR_UNION_11 VAR_67 ; if ( METHOD_8 ( VAR_68 ) ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 . VAR_73 = VAR_74 ; VAR_75 . VAR_76 . VAR_77 = VAR_78 -> VAR_79 [ 3 ] ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = METHOD_9 ( VAR_85 , ( struct STRUCT_OR_UNION_12 * ) & VAR_86 , sizeof ( VAR_87 ) ) ; VAR_88 : if ( VAR_89 ) goto VAR_90 ; METHOD_10 ( VAR_91 -> VAR_92 , & VAR_93 -> VAR_94 ) ; if ( METHOD_11 ( & VAR_95 -> VAR_96 ) || METHOD_12 ( & VAR_97 -> VAR_98 ) ) METHOD_13 ( VAR_99 -> VAR_100 , & VAR_101 -> VAR_102 ) ; if ( METHOD_14 ( & VAR_103 -> VAR_104 ) || METHOD_15 ( & VAR_105 -> VAR_106 ) ) { METHOD_16 ( VAR_107 -> VAR_108 , & VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 -> METHOD_17 ) VAR_113 -> VAR_114 -> METHOD_18 ( VAR_115 ) ; } goto VAR_116 ; } if ( METHOD_19 ( VAR_117 ) ) { if ( VAR_118 >= sizeof ( struct STRUCT_OR_UNION_13 ) && VAR_119 -> VAR_120 ) { if ( VAR_121 -> VAR_122 && VAR_123 -> VAR_124 != VAR_125 -> VAR_126 ) { VAR_127 = - VAR_128 ; goto VAR_129 ; } VAR_130 -> VAR_131 = VAR_132 -> VAR_133 ; } if ( ! VAR_134 -> VAR_135 && ( VAR_136 & VAR_137 ) ) VAR_138 -> VAR_139 = VAR_140 -> VAR_141 ; if ( ! VAR_142 -> VAR_143 ) { VAR_144 = - VAR_145 ; goto VAR_146 ; } } VAR_147 -> VAR_148 = * VAR_149 ; VAR_150 -> VAR_151 = VAR_152 . VAR_153 ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = VAR_160 -> VAR_161 ; VAR_162 . VAR_163 = VAR_164 -> VAR_165 ; VAR_166 . VAR_167 = VAR_168 -> VAR_169 ; VAR_170 . VAR_171 = VAR_172 -> VAR_173 ; VAR_174 . VAR_175 = VAR_176 -> VAR_177 ; VAR_178 . VAR_179 = VAR_180 -> VAR_181 ; VAR_182 . VAR_183 = VAR_184 -> VAR_185 ; if ( ! VAR_186 . VAR_187 && ( VAR_188 & VAR_189 ) ) VAR_190 . VAR_191 = VAR_192 -> VAR_193 ; METHOD_20 ( VAR_194 , METHOD_21 ( & VAR_195 ) ) ;  VAR_196 = VAR_197 ? VAR_198 -> VAR_199 : VAR_200 -> VAR_201 ;   VAR_202 = METHOD_22 ( & VAR_203 , VAR_204 , & VAR_205 ) ;  VAR_206 = METHOD_23 ( VAR_207 , & VAR_208 , VAR_209 ) ; VAR_210 = 0 ; if ( METHOD_24 ( VAR_211 ) ) { VAR_212 = METHOD_25 ( VAR_213 ) ; goto VAR_214 ; } if ( METHOD_26 ( & VAR_215 -> VAR_216 ) ) VAR_217 -> VAR_218 = VAR_219 . VAR_220 ; if ( METHOD_27 ( & VAR_221 -> VAR_222 ) ) { VAR_223 -> VAR_224 = VAR_225 . VAR_226 ; VAR_227 -> VAR_228 = VAR_229 ; if ( VAR_230 -> VAR_231 -> METHOD_28 ) VAR_232 -> VAR_233 -> METHOD_29 ( VAR_234 ) ; } ip6_dst_store ( VAR_235 , VAR_236 , TYPE_4 ( & VAR_237 . VAR_238 , & VAR_239 -> VAR_240 ) ? & VAR_241 -> VAR_242 : VAR_243 , VAR_244 TYPE_5 TYPE_6 ( & VAR_245 . VAR_246 , & VAR_247 -> VAR_248 ) ? & VAR_249 -> VAR_250 : VAR_251 ) ; VAR_252 -> VAR_253 = VAR_254 ; METHOD_30 ( VAR_255 ) ; VAR_256 : METHOD_31 ( VAR_257 ) ; return VAR_258 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , TYPE_1 VAR_2 ) { struct STRUCT_OR_UNION_2 * VAR_3 = ( struct STRUCT_OR_UNION_3 * ) VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_5 = METHOD_1 ( VAR_6 ) ; struct STRUCT_OR_UNION_5 * VAR_7 = METHOD_2 ( VAR_8 ) ; struct STRUCT_OR_UNION_6 * VAR_9 , * VAR_10 , VAR_11 ; struct STRUCT_OR_UNION_7 * VAR_12 ; struct STRUCT_OR_UNION_8 VAR_13 ; struct STRUCT_OR_UNION_9 * VAR_14 = VAR_15 ; struct STRUCT_OR_UNION_10 * VAR_16 ; TYPE_2 VAR_17 ; TYPE_3 VAR_18 ; if ( VAR_19 -> VAR_20 == VAR_21 ) { if ( METHOD_3 ( VAR_22 ) ) return - VAR_23 ; VAR_24 = METHOD_4 ( VAR_25 , VAR_26 , VAR_27 ) ; goto VAR_28 ; } if ( VAR_29 < VAR_30 ) return - VAR_31 ; if ( VAR_32 -> VAR_33 != VAR_34 ) return - VAR_35 ; METHOD_5 ( & VAR_36 , 0 , sizeof ( VAR_37 ) ) ; METHOD_32 ( ) ; if ( VAR_38 -> VAR_39 ) { VAR_40 . VAR_41 = VAR_42 -> VAR_43 & VAR_44 ; if ( VAR_45 . VAR_46 & VAR_47 ) { VAR_48 = METHOD_6 ( VAR_49 , VAR_50 . VAR_51 ) ; if ( ! VAR_52 ) return - VAR_53 ; } } VAR_54 = METHOD_7 ( & VAR_55 -> VAR_56 ) ; if ( VAR_57 == VAR_58 ) { VAR_59 -> VAR_60 . VAR_61 [ 15 ] = 0x01 ; } VAR_62 = & VAR_63 -> VAR_64 ; if ( VAR_65 == VAR_66 ) { struct STRUCT_OR_UNION_11 VAR_67 ; if ( METHOD_8 ( VAR_68 ) ) { VAR_69 = - VAR_70 ; goto VAR_71 ; } VAR_72 . VAR_73 = VAR_74 ; VAR_75 . VAR_76 . VAR_77 = VAR_78 -> VAR_79 [ 3 ] ; VAR_80 . VAR_81 = VAR_82 -> VAR_83 ; VAR_84 = METHOD_9 ( VAR_85 , ( struct STRUCT_OR_UNION_12 * ) & VAR_86 , sizeof ( VAR_87 ) ) ; VAR_88 : if ( VAR_89 ) goto VAR_90 ; METHOD_10 ( VAR_91 -> VAR_92 , & VAR_93 -> VAR_94 ) ; if ( METHOD_11 ( & VAR_95 -> VAR_96 ) || METHOD_12 ( & VAR_97 -> VAR_98 ) ) METHOD_13 ( VAR_99 -> VAR_100 , & VAR_101 -> VAR_102 ) ; if ( METHOD_14 ( & VAR_103 -> VAR_104 ) || METHOD_15 ( & VAR_105 -> VAR_106 ) ) { METHOD_16 ( VAR_107 -> VAR_108 , & VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 -> METHOD_17 ) VAR_113 -> VAR_114 -> METHOD_18 ( VAR_115 ) ; } goto VAR_116 ; } if ( METHOD_19 ( VAR_117 ) ) { if ( VAR_118 >= sizeof ( struct STRUCT_OR_UNION_13 ) && VAR_119 -> VAR_120 ) { if ( VAR_121 -> VAR_122 && VAR_123 -> VAR_124 != VAR_125 -> VAR_126 ) { VAR_127 = - VAR_128 ; goto VAR_129 ; } VAR_130 -> VAR_131 = VAR_132 -> VAR_133 ; } if ( ! VAR_134 -> VAR_135 && ( VAR_136 & VAR_137 ) ) VAR_138 -> VAR_139 = VAR_140 -> VAR_141 ; if ( ! VAR_142 -> VAR_143 ) { VAR_144 = - VAR_145 ; goto VAR_146 ; } } VAR_147 -> VAR_148 = * VAR_149 ; VAR_150 -> VAR_151 = VAR_152 . VAR_153 ; VAR_154 -> VAR_155 = VAR_156 -> VAR_157 ; VAR_158 . VAR_159 = VAR_160 -> VAR_161 ; VAR_162 . VAR_163 = VAR_164 -> VAR_165 ; VAR_166 . VAR_167 = VAR_168 -> VAR_169 ; VAR_170 . VAR_171 = VAR_172 -> VAR_173 ; VAR_174 . VAR_175 = VAR_176 -> VAR_177 ; VAR_178 . VAR_179 = VAR_180 -> VAR_181 ; VAR_182 . VAR_183 = VAR_184 -> VAR_185 ; if ( ! VAR_186 . VAR_187 && ( VAR_188 & VAR_189 ) ) VAR_190 . VAR_191 = VAR_192 -> VAR_193 ; METHOD_20 ( VAR_194 , METHOD_21 ( & VAR_195 ) ) ; VAR_196 = VAR_197 ? VAR_198 -> VAR_199 : VAR_200 -> VAR_201 ; VAR_202 = METHOD_22 ( & VAR_203 , VAR_204 , & VAR_205 ) ; METHOD_34 ( ) ; VAR_206 = METHOD_23 ( VAR_207 , & VAR_208 , VAR_209 ) ; VAR_210 = 0 ; if ( METHOD_24 ( VAR_211 ) ) { VAR_212 = METHOD_25 ( VAR_213 ) ; goto VAR_214 ; } if ( METHOD_26 ( & VAR_215 -> VAR_216 ) ) VAR_217 -> VAR_218 = VAR_219 . VAR_220 ; if ( METHOD_27 ( & VAR_221 -> VAR_222 ) ) { VAR_223 -> VAR_224 = VAR_225 . VAR_226 ; VAR_227 -> VAR_228 = VAR_229 ; if ( VAR_230 -> VAR_231 -> METHOD_28 ) VAR_232 -> VAR_233 -> METHOD_29 ( VAR_234 ) ; } ip6_dst_store ( VAR_235 , VAR_236 , TYPE_4 ( & VAR_237 . VAR_238 , & VAR_239 -> VAR_240 ) ? & VAR_241 -> VAR_242 : VAR_243 , VAR_244 TYPE_5 TYPE_6 ( & VAR_245 . VAR_246 , & VAR_247 -> VAR_248 ) ? & VAR_249 -> VAR_250 : VAR_251 ) ; VAR_252 -> VAR_253 = VAR_254 ; METHOD_30 ( VAR_255 ) ; VAR_256 : METHOD_31 ( VAR_257 ) ; return VAR_258 ; }",716
717,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 * * VAR_5 ) {  TYPE_6 VAR_6 ;  TYPE_7 VAR_7 [ VAR_8 ] ; if ( METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 , VAR_12 , VAR_13 ) == - 1 ) return VAR_14 ; if ( METHOD_2 ( VAR_15 , VAR_16 , VAR_17 -> VAR_18 ) == VAR_19 ) { * VAR_20 = METHOD_3 ( VAR_21 -> VAR_22 , VAR_23 ) ; if ( * VAR_24 == 0 ) { * VAR_25 = VAR_26 ; } return VAR_27 ; }  VAR_28 = METHOD_4 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ;  if ( VAR_33 == - 1 ) return VAR_34 ;  return METHOD_5 ( VAR_35 -> VAR_36 , VAR_37 , VAR_38 , VAR_39 , VAR_40 ,  VAR_41 ) ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , struct STRUCT_OR_UNION_0 * VAR_2 , TYPE_3 * VAR_3 , TYPE_4 * VAR_4 , TYPE_5 * * VAR_5 ) { TYPE_6 VAR_6 ; TYPE_7 VAR_7 [ VAR_8 ] ; if ( METHOD_1 ( VAR_9 -> VAR_10 , VAR_11 , VAR_12 , VAR_13 ) == - 1 ) return VAR_14 ; if ( METHOD_2 ( VAR_15 , VAR_16 , VAR_17 -> VAR_18 ) == VAR_19 ) { * VAR_20 = METHOD_3 ( VAR_21 -> VAR_22 , VAR_23 ) ; if ( * VAR_24 == 0 ) { * VAR_25 = VAR_26 ; } return VAR_27 ; } VAR_28 = METHOD_4 ( VAR_29 , VAR_30 , VAR_31 , VAR_32 ) ; if ( VAR_33 == - 1 ) return VAR_34 ; return METHOD_5 ( VAR_35 -> VAR_36 , VAR_37 , VAR_39 , VAR_30 , VAR_40 , VAR_41 ) ; }",717
718,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; TYPE_1 VAR_7 = VAR_8 -> VAR_9 -> VAR_10 ; TYPE_2 VAR_11 , VAR_12 = 0 ; TYPE_3 VAR_13 = 0 ; TYPE_4 VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_17 ) ; if ( ! VAR_18 ) return - VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; METHOD_2 ( VAR_23 , VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 = 0 ; for ( ; ; ) { struct STRUCT_OR_UNION_5 * VAR_30 ; TYPE_5 VAR_31 ; TYPE_6 VAR_32 ; if ( VAR_33 >= VAR_34 ) { METHOD_3 ( VAR_35 , ""invalidinsnidx%dinsn_cnt%d\\n"" , VAR_36 , VAR_37 ) ; return - VAR_38 ; } VAR_39 = & VAR_40 [ VAR_41 ] ; VAR_42 = METHOD_4 ( VAR_43 -> VAR_44 ) ; if ( ++ VAR_45 > VAR_46 ) { METHOD_5 ( VAR_47 , ""BPFprogramistoolarge.Processed%dinsn\\n"" , VAR_48 ) ; return - VAR_49 ; } VAR_50 = METHOD_6 ( VAR_51 , VAR_52 ) ; if ( VAR_53 < 0 ) return VAR_54 ; if ( VAR_55 == 1 ) { if ( VAR_56 -> VAR_57 . VAR_58 ) { if ( VAR_59 ) METHOD_7 ( VAR_60 , ""\\nfrom%dto%d:safe\\n"" , VAR_61 , VAR_62 ) ; else METHOD_8 ( VAR_63 , ""%d:safe\\n"" , VAR_64 ) ; } goto VAR_65 ; } if ( METHOD_9 ( ) ) METHOD_10 ( ) ; if ( VAR_66 -> VAR_67 . VAR_68 > 1 || ( VAR_69 -> VAR_70 . VAR_71 && VAR_72 ) ) { if ( VAR_73 -> VAR_74 . VAR_75 > 1 ) METHOD_11 ( VAR_76 , ""%d:"" , VAR_77 ) ; else METHOD_12 ( VAR_78 , ""\\nfrom%dto%d:"" , VAR_79 , VAR_80 ) ; METHOD_13 ( VAR_81 , VAR_82 ) ; VAR_83 = VAR_84 ; } if ( VAR_85 -> VAR_86 . VAR_87 ) { METHOD_14 ( VAR_88 , ""%d:"" , VAR_89 ) ; METHOD_15 ( METHOD_16 , VAR_90 , VAR_91 , VAR_92 -> VAR_93 ) ; } VAR_94 = METHOD_17 ( VAR_95 , VAR_96 , VAR_97 ) ; if ( VAR_98 ) return VAR_99 ; VAR_100 = METHOD_18 ( VAR_101 ) ;  if ( VAR_102 == VAR_103 || VAR_104 == VAR_105 ) {  VAR_106 = METHOD_19 ( VAR_107 , VAR_108 ) ; if ( VAR_109 ) return VAR_110 ; } else if ( VAR_111 == VAR_112 ) { enum VAR_113 * VAR_114 , VAR_115 ; VAR_116 = METHOD_20 ( VAR_117 , VAR_118 -> VAR_119 , VAR_120 ) ; if ( VAR_121 ) return VAR_122 ; VAR_123 = METHOD_21 ( VAR_124 , VAR_125 -> VAR_126 , VAR_127 ) ; if ( VAR_128 ) return VAR_129 ; VAR_130 = VAR_131 [ VAR_132 -> VAR_133 ] . VAR_134 ; VAR_135 = METHOD_22 ( VAR_136 , VAR_137 , VAR_138 -> VAR_139 , VAR_140 -> VAR_141 , METHOD_23 ( VAR_142 -> VAR_143 ) , VAR_144 , VAR_145 -> VAR_146 ) ; if ( VAR_147 ) return VAR_148 ; VAR_149 = & VAR_150 -> VAR_151 [ VAR_152 ] . VAR_153 ; if ( * VAR_154 == VAR_155 ) { * VAR_156 = VAR_157 ; } else if ( VAR_158 != * VAR_159 && ( VAR_160 == VAR_161 || * VAR_162 == VAR_163 ) ) { METHOD_24 ( VAR_164 , ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_165 ; } } else if ( VAR_166 == VAR_167 ) { enum VAR_168 * VAR_169 , VAR_170 ; if ( METHOD_25 ( VAR_171 -> VAR_172 ) == VAR_173 ) { VAR_174 = METHOD_26 ( VAR_175 , VAR_176 , VAR_177 ) ; if ( VAR_178 ) return VAR_179 ; VAR_180 ++ ; continue ; } VAR_181 = METHOD_27 ( VAR_182 , VAR_183 -> VAR_184 , VAR_185 ) ; if ( VAR_186 ) return VAR_187 ; VAR_188 = METHOD_28 ( VAR_189 , VAR_190 -> VAR_191 , VAR_192 ) ; if ( VAR_193 ) return VAR_194 ; VAR_195 = VAR_196 [ VAR_197 -> VAR_198 ] . VAR_199 ; VAR_200 = METHOD_29 ( VAR_201 , VAR_202 , VAR_203 -> VAR_204 , VAR_205 -> VAR_206 , METHOD_30 ( VAR_207 -> VAR_208 ) , VAR_209 , VAR_210 -> VAR_211 ) ; if ( VAR_212 ) return VAR_213 ; VAR_214 = & VAR_215 -> VAR_216 [ VAR_217 ] . VAR_218 ; if ( * VAR_219 == VAR_220 ) { * VAR_221 = VAR_222 ; } else if ( VAR_223 != * VAR_224 && ( VAR_225 == VAR_226 || * VAR_227 == VAR_228 ) ) { METHOD_31 ( VAR_229 , ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_230 ; } } else if ( VAR_231 == VAR_232 ) { if ( METHOD_32 ( VAR_233 -> VAR_234 ) != VAR_235 || VAR_236 -> VAR_237 != VAR_238 ) { METHOD_33 ( VAR_239 , ""BPF_STusesreservedfields\\n"" ) ; return - VAR_240 ; } VAR_241 = METHOD_34 ( VAR_242 , VAR_243 -> VAR_244 , VAR_245 ) ; if ( VAR_246 ) return VAR_247 ; VAR_248 = METHOD_35 ( VAR_249 , VAR_250 , VAR_251 -> VAR_252 , VAR_253 -> VAR_254 , METHOD_36 ( VAR_255 -> VAR_256 ) , VAR_257 , - 1 ) ; if ( VAR_258 ) return VAR_259 ; } else if ( VAR_260 == VAR_261 ) { TYPE_7 VAR_262 = METHOD_37 ( VAR_263 -> VAR_264 ) ; if ( VAR_265 == VAR_266 ) { if ( METHOD_38 ( VAR_267 -> VAR_268 ) != VAR_269 || VAR_270 -> VAR_271 != 0 || VAR_272 -> VAR_273 != VAR_274 || VAR_275 -> VAR_276 != VAR_277 ) { METHOD_39 ( VAR_278 , ""BPF_CALLusesreservedfields\\n"" ) ; return - VAR_279 ; } VAR_280 = METHOD_40 ( VAR_281 , VAR_282 -> VAR_283 , VAR_284 ) ; if ( VAR_285 ) return VAR_286 ; } else if ( VAR_287 == VAR_288 ) { if ( METHOD_41 ( VAR_289 -> VAR_290 ) != VAR_291 || VAR_292 -> VAR_293 != 0 || VAR_294 -> VAR_295 != VAR_296 || VAR_297 -> VAR_298 != VAR_299 ) { METHOD_42 ( VAR_300 , ""BPF_JAusesreservedfields\\n"" ) ; return - VAR_301 ; } VAR_302 += VAR_303 -> VAR_304 + 1 ; continue ; } else if ( VAR_305 == VAR_306 ) { if ( METHOD_43 ( VAR_307 -> VAR_308 ) != VAR_309 || VAR_310 -> VAR_311 != 0 || VAR_312 -> VAR_313 != VAR_314 || VAR_315 -> VAR_316 != VAR_317 ) { METHOD_44 ( VAR_318 , ""BPF_EXITusesreservedfields\\n"" ) ; return - VAR_319 ; } VAR_320 = METHOD_45 ( VAR_321 , VAR_322 , VAR_323 ) ; if ( VAR_324 ) return VAR_325 ; if ( METHOD_46 ( VAR_326 , VAR_327 ) ) { METHOD_47 ( VAR_328 , ""R0leaksaddrasreturnvalue\\n"" ) ; return - VAR_329 ; } VAR_330 = METHOD_48 ( VAR_331 ) ; if ( VAR_332 ) return VAR_333 ; VAR_334 : VAR_335 = METHOD_49 ( VAR_336 , & VAR_337 , & VAR_338 ) ; if ( VAR_339 < 0 ) { if ( VAR_340 != - VAR_341 ) return VAR_342 ; break ; } else { VAR_343 = VAR_344 ; continue ; } } else { VAR_345 = METHOD_50 ( VAR_346 , VAR_347 , & VAR_348 ) ; if ( VAR_349 ) return VAR_350 ; } } else if ( VAR_351 == VAR_352 ) { TYPE_8 VAR_353 = METHOD_51 ( VAR_354 -> VAR_355 ) ; if ( VAR_356 == VAR_357 || VAR_358 == VAR_359 ) { VAR_360 = METHOD_52 ( VAR_361 , VAR_362 ) ; if ( VAR_363 ) return VAR_364 ; } else if ( VAR_365 == VAR_366 ) { VAR_367 = METHOD_53 ( VAR_368 , VAR_369 ) ; if ( VAR_370 ) return VAR_371 ; VAR_372 ++ ;  } else {  METHOD_54 ( VAR_373 , ""invalidBPF_LDmode\\n"" ) ; return - VAR_374 ; } } else { METHOD_55 ( VAR_375 , ""unknowninsnclass%d\\n"" , VAR_376 ) ; return - VAR_377 ; } VAR_378 ++ ; } METHOD_56 ( VAR_379 , ""processed%dinsns,stackdepth%d\\n"" , VAR_380 , VAR_381 -> VAR_382 -> VAR_383 -> VAR_384 ) ; return 0 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ) { struct STRUCT_OR_UNION_1 * VAR_1 ; struct STRUCT_OR_UNION_2 * VAR_2 = VAR_3 -> VAR_4 -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_6 ; TYPE_1 VAR_7 = VAR_8 -> VAR_9 -> VAR_10 ; TYPE_2 VAR_11 , VAR_12 = 0 ; TYPE_3 VAR_13 = 0 ; TYPE_4 VAR_14 = VAR_15 ; VAR_16 = METHOD_1 ( sizeof ( struct STRUCT_OR_UNION_4 ) , VAR_17 ) ; if ( ! VAR_18 ) return - VAR_19 ; VAR_20 -> VAR_21 = VAR_22 ; METHOD_2 ( VAR_23 , VAR_24 -> VAR_25 ) ; VAR_26 -> VAR_27 = VAR_28 ; VAR_29 = 0 ; for ( ; ; ) { struct STRUCT_OR_UNION_5 * VAR_30 ; TYPE_5 VAR_31 ; TYPE_6 VAR_32 ; if ( VAR_33 >= VAR_34 ) { METHOD_3 ( VAR_35 , ""invalidinsnidx%dinsn_cnt%d\\n"" , VAR_36 , VAR_37 ) ; return - VAR_38 ; } VAR_39 = & VAR_40 [ VAR_41 ] ; VAR_42 = METHOD_4 ( VAR_43 -> VAR_44 ) ; if ( ++ VAR_45 > VAR_46 ) { METHOD_5 ( VAR_47 , ""BPFprogramistoolarge.Processed%dinsn\\n"" , VAR_48 ) ; return - VAR_49 ; } VAR_50 = METHOD_6 ( VAR_51 , VAR_52 ) ; if ( VAR_53 < 0 ) return VAR_54 ; if ( VAR_55 == 1 ) { if ( VAR_56 -> VAR_57 . VAR_58 ) { if ( VAR_59 ) METHOD_7 ( VAR_60 , ""\\nfrom%dto%d:safe\\n"" , VAR_61 , VAR_62 ) ; else METHOD_8 ( VAR_63 , ""%d:safe\\n"" , VAR_64 ) ; } goto VAR_65 ; } if ( METHOD_9 ( ) ) METHOD_10 ( ) ; if ( VAR_66 -> VAR_67 . VAR_68 > 1 || ( VAR_69 -> VAR_70 . VAR_71 && VAR_72 ) ) { if ( VAR_73 -> VAR_74 . VAR_75 > 1 ) METHOD_11 ( VAR_76 , ""%d:"" , VAR_77 ) ; else METHOD_12 ( VAR_78 , ""\\nfrom%dto%d:"" , VAR_79 , VAR_80 ) ; METHOD_13 ( VAR_81 , VAR_82 ) ; VAR_83 = VAR_84 ; } if ( VAR_85 -> VAR_86 . VAR_87 ) { METHOD_14 ( VAR_88 , ""%d:"" , VAR_89 ) ; METHOD_15 ( METHOD_16 , VAR_90 , VAR_91 , VAR_92 -> VAR_93 ) ; } VAR_94 = METHOD_17 ( VAR_95 , VAR_96 , VAR_97 ) ; if ( VAR_98 ) return VAR_99 ; VAR_100 = METHOD_18 ( VAR_101 ) ; if ( VAR_102 == VAR_103 || VAR_104 == VAR_105 ) { VAR_106 = METHOD_19 ( VAR_107 , VAR_108 ) ; if ( VAR_109 ) return VAR_110 ; } else if ( VAR_111 == VAR_112 ) { enum VAR_113 * VAR_114 , VAR_115 ; VAR_116 = METHOD_20 ( VAR_117 , VAR_118 -> VAR_119 , VAR_120 ) ; if ( VAR_121 ) return VAR_122 ; VAR_123 = METHOD_21 ( VAR_124 , VAR_125 -> VAR_126 , VAR_127 ) ; if ( VAR_128 ) return VAR_129 ; VAR_130 = VAR_131 [ VAR_132 -> VAR_133 ] . VAR_134 ; VAR_135 = METHOD_22 ( VAR_136 , VAR_137 , VAR_138 -> VAR_139 , VAR_140 -> VAR_141 , METHOD_23 ( VAR_142 -> VAR_143 ) , VAR_144 , VAR_145 -> VAR_146 ) ; if ( VAR_147 ) return VAR_148 ; VAR_149 = & VAR_150 -> VAR_151 [ VAR_152 ] . VAR_153 ; if ( * VAR_154 == VAR_155 ) { * VAR_156 = VAR_157 ; } else if ( VAR_158 != * VAR_159 && ( VAR_160 == VAR_161 || * VAR_162 == VAR_163 ) ) { METHOD_24 ( VAR_164 , ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_165 ; } } else if ( VAR_166 == VAR_167 ) { enum VAR_168 * VAR_169 , VAR_170 ; if ( METHOD_25 ( VAR_171 -> VAR_172 ) == VAR_173 ) { VAR_174 = METHOD_26 ( VAR_175 , VAR_176 , VAR_177 ) ; if ( VAR_178 ) return VAR_179 ; VAR_180 ++ ; continue ; } VAR_181 = METHOD_27 ( VAR_182 , VAR_183 -> VAR_184 , VAR_185 ) ; if ( VAR_186 ) return VAR_187 ; VAR_188 = METHOD_28 ( VAR_189 , VAR_190 -> VAR_191 , VAR_192 ) ; if ( VAR_193 ) return VAR_194 ; VAR_195 = VAR_196 [ VAR_197 -> VAR_198 ] . VAR_199 ; VAR_200 = METHOD_29 ( VAR_201 , VAR_202 , VAR_203 -> VAR_204 , VAR_205 -> VAR_206 , METHOD_30 ( VAR_207 -> VAR_208 ) , VAR_209 , VAR_210 -> VAR_211 ) ; if ( VAR_212 ) return VAR_213 ; VAR_214 = & VAR_215 -> VAR_216 [ VAR_217 ] . VAR_218 ; if ( * VAR_219 == VAR_220 ) { * VAR_221 = VAR_222 ; } else if ( VAR_223 != * VAR_224 && ( VAR_225 == VAR_226 || * VAR_227 == VAR_228 ) ) { METHOD_31 ( VAR_229 , ""sameinsncannotbeusedwithdifferentpointers\\n"" ) ; return - VAR_230 ; } } else if ( VAR_231 == VAR_232 ) { if ( METHOD_32 ( VAR_233 -> VAR_234 ) != VAR_235 || VAR_236 -> VAR_237 != VAR_238 ) { METHOD_33 ( VAR_239 , ""BPF_STusesreservedfields\\n"" ) ; return - VAR_240 ; } VAR_241 = METHOD_34 ( VAR_242 , VAR_243 -> VAR_244 , VAR_245 ) ; if ( VAR_246 ) return VAR_247 ; VAR_248 = METHOD_35 ( VAR_249 , VAR_250 , VAR_251 -> VAR_252 , VAR_253 -> VAR_254 , METHOD_36 ( VAR_255 -> VAR_256 ) , VAR_257 , - 1 ) ; if ( VAR_258 ) return VAR_259 ; } else if ( VAR_260 == VAR_261 ) { TYPE_7 VAR_262 = METHOD_37 ( VAR_263 -> VAR_264 ) ; if ( VAR_265 == VAR_266 ) { if ( METHOD_38 ( VAR_267 -> VAR_268 ) != VAR_269 || VAR_270 -> VAR_271 != 0 || VAR_272 -> VAR_273 != VAR_274 || VAR_275 -> VAR_276 != VAR_277 ) { METHOD_39 ( VAR_278 , ""BPF_CALLusesreservedfields\\n"" ) ; return - VAR_279 ; } VAR_280 = METHOD_40 ( VAR_281 , VAR_282 -> VAR_283 , VAR_284 ) ; if ( VAR_285 ) return VAR_286 ; } else if ( VAR_287 == VAR_288 ) { if ( METHOD_41 ( VAR_289 -> VAR_290 ) != VAR_291 || VAR_292 -> VAR_293 != 0 || VAR_294 -> VAR_295 != VAR_296 || VAR_297 -> VAR_298 != VAR_299 ) { METHOD_42 ( VAR_300 , ""BPF_JAusesreservedfields\\n"" ) ; return - VAR_301 ; } VAR_302 += VAR_303 -> VAR_304 + 1 ; continue ; } else if ( VAR_305 == VAR_306 ) { if ( METHOD_43 ( VAR_307 -> VAR_308 ) != VAR_309 || VAR_310 -> VAR_311 != 0 || VAR_312 -> VAR_313 != VAR_314 || VAR_315 -> VAR_316 != VAR_317 ) { METHOD_44 ( VAR_318 , ""BPF_EXITusesreservedfields\\n"" ) ; return - VAR_319 ; } VAR_320 = METHOD_45 ( VAR_321 , VAR_322 , VAR_323 ) ; if ( VAR_324 ) return VAR_325 ; if ( METHOD_46 ( VAR_326 , VAR_327 ) ) { METHOD_47 ( VAR_328 , ""R0leaksaddrasreturnvalue\\n"" ) ; return - VAR_329 ; } VAR_330 = METHOD_48 ( VAR_331 ) ; if ( VAR_332 ) return VAR_333 ; VAR_334 : VAR_335 = METHOD_49 ( VAR_336 , & VAR_337 , & VAR_338 ) ; if ( VAR_339 < 0 ) { if ( VAR_340 != - VAR_341 ) return VAR_342 ; break ; } else { VAR_343 = VAR_344 ; continue ; } } else { VAR_345 = METHOD_50 ( VAR_346 , VAR_347 , & VAR_348 ) ; if ( VAR_349 ) return VAR_350 ; } } else if ( VAR_351 == VAR_352 ) { TYPE_8 VAR_353 = METHOD_51 ( VAR_354 -> VAR_355 ) ; if ( VAR_356 == VAR_357 || VAR_358 == VAR_359 ) { VAR_360 = METHOD_52 ( VAR_361 , VAR_362 ) ; if ( VAR_363 ) return VAR_364 ; } else if ( VAR_365 == VAR_366 ) { VAR_367 = METHOD_53 ( VAR_368 , VAR_369 ) ; if ( VAR_370 ) return VAR_371 ; VAR_372 ++ ; } else { METHOD_54 ( VAR_373 , ""invalidBPF_LDmode\\n"" ) ; return - VAR_374 ; } } else { METHOD_55 ( VAR_375 , ""unknowninsnclass%d\\n"" , VAR_376 ) ; return - VAR_377 ; } VAR_378 ++ ; VAR_381 -> VAR_216 [ VAR_378 ] . VAR_385 = VAR_344 ; } METHOD_56 ( VAR_379 , ""processed%dinsns,stackdepth%d\\n"" , VAR_380 , VAR_381 -> VAR_382 -> VAR_383 -> VAR_384 ) ; return 0 ; }",718
719,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) {  TYPE_3 VAR_2 ;  TYPE_4 VAR_3 ; VAR_4 * VAR_5 ;  TYPE_5 VAR_6 ;  VAR_7 * VAR_8 ; if ( METHOD_1 ( VAR_9 ) > 0 && METHOD_2 ( VAR_10 ) > 0 ) { METHOD_3 ( VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_4 ( VAR_14 ) ; for ( VAR_15 = VAR_16 -> VAR_17 , VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; VAR_21 > 0 ; -- VAR_22 , VAR_23 += VAR_24 ) { for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 ; VAR_30 > 0 ; -- VAR_31 , ++ VAR_32 ) { * VAR_33 = ( * VAR_34 >= 0 ) ? ( ( * VAR_35 ) >> VAR_36 ) : ( - ( ( - ( * VAR_37 ) ) >> VAR_38 ) ) ; } } } }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_4 VAR_3 ; VAR_4 * VAR_5 ; TYPE_5 VAR_6 ; VAR_7 * VAR_8 ; if ( METHOD_1 ( VAR_9 ) > 0 && METHOD_2 ( VAR_10 ) > 0 ) { METHOD_3 ( VAR_11 -> VAR_12 ) ; VAR_13 = METHOD_4 ( VAR_14 ) ; for ( VAR_15 = VAR_16 -> VAR_17 , VAR_18 = VAR_19 -> VAR_20 [ 0 ] ; VAR_21 > 0 ; -- VAR_22 , VAR_23 += VAR_24 ) { for ( VAR_25 = VAR_26 -> VAR_27 , VAR_28 = VAR_29 ; VAR_30 > 0 ; -- VAR_31 , ++ VAR_32 ) { * VAR_33 = ( * VAR_34 >= 0 ) ? ( ( * VAR_35 ) >> VAR_36 ) : ( - ( ( - ( * VAR_37 ) ) >> VAR_38 ) ) ; } } } }",719
720,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; TYPE_4 VAR_5 [ 65536 ] ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = VAR_9 -> VAR_10 - VAR_11 ; VAR_12 = VAR_13 -> VAR_14 + + VAR_15 ; if ( VAR_16 <= 0 ) { return ; } METHOD_1 ( & VAR_17 , 0 , sizeof ( TYPE_7 ) ) ; VAR_18 . VAR_19 = VAR_20 . VAR_21 = VAR_22 . VAR_23 [ VAR_24 ] = & ( VAR_25 . VAR_26 [ VAR_27 . VAR_28 ++ ] ) ; VAR_29 . VAR_30 -> VAR_31 = VAR_32 ; VAR_33 . VAR_34 -> VAR_35 = 0 ; VAR_36 . VAR_37 -> VAR_38 = VAR_39 . VAR_40 -> VAR_41 = VAR_42 ; VAR_43 . VAR_44 -> VAR_45 = VAR_46 . VAR_47 -> VAR_48 = VAR_49 . VAR_50 -> VAR_51 = VAR_52 ; VAR_53 [ 0 ] = ( VAR_54 >> 8 ) ; VAR_55 [ 1 ] = VAR_56 & 0xff ; VAR_57 = 16 ; for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; VAR_61 ++ ) { VAR_62 = VAR_63 [ VAR_64 ] ;  METHOD_2 ( & VAR_65 , VAR_66 , VAR_67 ) ;  METHOD_3 ( & VAR_68 , ( TYPE_8 ) VAR_69 ) ; } VAR_70 += 8 ; VAR_71 -> VAR_72 = ( VAR_73 >> 3 ) + VAR_74 ; METHOD_4 ( VAR_75 -> VAR_76 + VAR_77 , VAR_78 , ( VAR_79 >> 3 ) ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 , VAR_3 , VAR_4 ; TYPE_4 VAR_5 [ 65536 ] ; TYPE_5 * VAR_6 ; TYPE_6 VAR_7 ; VAR_8 = VAR_9 -> VAR_10 - VAR_11 ; VAR_12 = VAR_13 -> VAR_14 + + VAR_15 ; if ( VAR_16 <= 0 ) { return ; } METHOD_1 ( & VAR_17 , 0 , sizeof ( TYPE_7 ) ) ; VAR_18 . VAR_19 = VAR_20 . VAR_21 = VAR_22 . VAR_23 [ VAR_24 ] = & ( VAR_25 . VAR_26 [ VAR_27 . VAR_28 ++ ] ) ; VAR_29 . VAR_30 -> VAR_31 = VAR_32 ; VAR_33 . VAR_34 -> VAR_35 = 0 ; VAR_36 . VAR_37 -> VAR_38 = VAR_39 . VAR_40 -> VAR_41 = VAR_42 ; VAR_43 . VAR_44 -> VAR_45 = VAR_46 . VAR_47 -> VAR_48 = VAR_49 . VAR_50 -> VAR_51 = VAR_52 ; VAR_53 [ 0 ] = ( VAR_54 >> 8 ) ; VAR_55 [ 1 ] = VAR_56 & 0xff ; VAR_57 = 16 ; for ( VAR_58 = 0 ; VAR_59 < VAR_60 ; VAR_61 ++ ) { VAR_62 = VAR_63 [ VAR_64 ] ; METHOD_2 ( & VAR_65 , VAR_66 , VAR_67 ) ; METHOD_3 ( & VAR_68 , ( TYPE_8 ) VAR_69 ) ; } VAR_70 += 8 ; VAR_71 -> VAR_72 = ( VAR_73 >> 3 ) + VAR_74 ; METHOD_4 ( VAR_75 -> VAR_76 + VAR_77 , VAR_78 , ( VAR_79 >> 3 ) ) ; }",720
721,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 METHOD_1 { TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ;  ( TYPE_8 METHOD_2 METHOD_3 ( VAR_10 , VAR_11 , & VAR_12 METHOD_4 ;  if ( VAR_13 != VAR_14 && VAR_15 != 8 && VAR_16 > 1 METHOD_5 { METHOD_6 ( VAR_17 , ""%s:Cannothandledifferentplanarconfigurationw/bits/sample!=8\\n"" , METHOD_7 ( VAR_18 METHOD_8 METHOD_9 ; return ( VAR_19 METHOD_10 ; } METHOD_11 ( VAR_20 , VAR_21 , & VAR_22 METHOD_12 ; METHOD_13 ( VAR_23 , VAR_24 , & VAR_25 METHOD_14 ; if ( ! ( METHOD_15 ( VAR_26 METHOD_16 || METHOD_17 ( VAR_27 METHOD_18 METHOD_19 METHOD_20 { TYPE_9 VAR_28 = ( TYPE_10 METHOD_21 - 1L ; METHOD_22 ( VAR_29 , VAR_30 , & VAR_31 METHOD_23 ; VAR_32 = ! VAR_33 && ( VAR_34 == VAR_35 METHOD_24 ; } else { if ( VAR_36 METHOD_25 { METHOD_26 ( VAR_37 , ""%s:Cannothandletiledconfigurationw/biasimage\\n"" , METHOD_27 ( VAR_38 METHOD_28 METHOD_29 ; return ( VAR_39 METHOD_30 ; } if ( METHOD_31 ( VAR_40 METHOD_32 METHOD_33 { if ( ! METHOD_34 ( VAR_41 , VAR_42 , & VAR_43 METHOD_35 METHOD_36 VAR_44 = VAR_45 ; if ( ! METHOD_37 ( VAR_46 , VAR_47 , & VAR_48 METHOD_38 METHOD_39 VAR_49 = VAR_50 ; VAR_51 = ( VAR_52 == VAR_53 && VAR_54 == VAR_55 METHOD_40 ; } else { METHOD_41 ( VAR_56 , VAR_57 , & VAR_58 METHOD_42 ; METHOD_43 ( VAR_59 , VAR_60 , & VAR_61 METHOD_44 ; VAR_62 = ( VAR_63 == VAR_64 && VAR_65 == VAR_66 METHOD_45 ; } } TYPE_11 1 TYPE_12 0 TYPE_13 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 METHOD_46 ( ( TYPE_14 METHOD_47 ( ( ( VAR_72 METHOD_48 << 11 METHOD_49 | ( ( VAR_73 METHOD_50 << 3 METHOD_51 | ( ( VAR_74 METHOD_52 << 2 METHOD_53 | ( ( VAR_75 METHOD_54 << 1 METHOD_55 | ( VAR_76 METHOD_56 METHOD_57 METHOD_58 switch ( TYPE_15 ( VAR_77 , VAR_78 , METHOD_59 ( VAR_79 METHOD_60 , METHOD_61 ( VAR_80 METHOD_62 , VAR_81 METHOD_63 METHOD_64 { case TYPE_16 ( VAR_82 , VAR_83 , TYPE_17 , TYPE_18 , TYPE_19 METHOD_65 : case TYPE_20 ( VAR_84 , VAR_85 , TYPE_21 , TYPE_22 , TYPE_23 METHOD_66 : return VAR_86 ; case TYPE_24 ( VAR_87 , VAR_88 , TYPE_25 , TYPE_26 , TYPE_27 METHOD_67 : case TYPE_28 ( VAR_89 , VAR_90 , TYPE_29 , TYPE_30 , TYPE_31 METHOD_68 : return VAR_91 ; case TYPE_32 ( VAR_92 , VAR_93 , TYPE_33 , TYPE_34 , TYPE_35 METHOD_69 : case TYPE_36 ( VAR_94 , VAR_95 , TYPE_37 , TYPE_38 , TYPE_39 METHOD_70 : return VAR_96 ; case TYPE_40 ( VAR_97 , VAR_98 , TYPE_41 , TYPE_42 , TYPE_43 METHOD_71 : case TYPE_44 ( VAR_99 , VAR_100 , TYPE_45 , TYPE_46 , TYPE_47 METHOD_72 : return VAR_101 ; case TYPE_48 ( VAR_102 , VAR_103 , TYPE_49 , TYPE_50 , TYPE_51 METHOD_73 : case TYPE_52 ( VAR_104 , VAR_105 , TYPE_53 , TYPE_54 , TYPE_55 METHOD_74 : return VAR_106 ; case TYPE_56 ( VAR_107 , VAR_108 , TYPE_57 , TYPE_58 , TYPE_59 METHOD_75 : case TYPE_60 ( VAR_109 , VAR_110 , TYPE_61 , TYPE_62 , TYPE_63 METHOD_76 : return VAR_111 ; case TYPE_64 ( VAR_112 , VAR_113 , TYPE_65 , TYPE_66 , TYPE_67 METHOD_77 : case TYPE_68 ( VAR_114 , VAR_115 , TYPE_69 , TYPE_70 , TYPE_71 METHOD_78 : return VAR_116 ; case TYPE_72 ( VAR_117 , VAR_118 , TYPE_73 , TYPE_74 , TYPE_75 METHOD_79 : case TYPE_76 ( VAR_119 , VAR_120 , TYPE_77 , TYPE_78 , TYPE_79 METHOD_80 : return VAR_121 ; case TYPE_80 ( VAR_122 , VAR_123 , TYPE_81 , TYPE_82 , TYPE_83 METHOD_81 : case TYPE_84 ( VAR_124 , VAR_125 , TYPE_85 , TYPE_86 , TYPE_87 METHOD_82 : return VAR_126 ; case TYPE_88 ( VAR_127 , VAR_128 , TYPE_89 , TYPE_90 , TYPE_91 METHOD_83 : case TYPE_92 ( VAR_129 , VAR_130 , TYPE_93 , TYPE_94 , TYPE_95 METHOD_84 : return VAR_131 ; case TYPE_96 ( VAR_132 , VAR_133 , TYPE_97 , TYPE_98 , TYPE_99 METHOD_85 : case TYPE_100 ( VAR_134 , VAR_135 , TYPE_101 , TYPE_102 , TYPE_103 METHOD_86 : return VAR_136 ; case TYPE_104 ( VAR_137 , VAR_138 , TYPE_105 , TYPE_106 , TYPE_107 METHOD_87 : case TYPE_108 ( VAR_139 , VAR_140 , TYPE_109 , TYPE_110 , TYPE_111 METHOD_88 : return VAR_141 ; case TYPE_112 ( VAR_142 , VAR_143 , TYPE_113 , TYPE_114 , TYPE_115 METHOD_89 : return VAR_144 ? VAR_145 : VAR_146 ; case TYPE_116 ( VAR_147 , VAR_148 , TYPE_117 , TYPE_118 , TYPE_119 METHOD_90 : return VAR_149 ; case TYPE_120 ( VAR_150 , VAR_151 , TYPE_121 , TYPE_122 , TYPE_123 METHOD_91 : case TYPE_124 ( VAR_152 , VAR_153 , TYPE_125 , TYPE_126 , TYPE_127 METHOD_92 : return VAR_154 ; case TYPE_128 ( VAR_155 , VAR_156 , TYPE_129 , TYPE_130 , TYPE_131 METHOD_93 : case TYPE_132 ( VAR_157 , VAR_158 , TYPE_133 , TYPE_134 , TYPE_135 METHOD_94 : return VAR_159 ; case TYPE_136 ( VAR_160 , VAR_161 , TYPE_137 , TYPE_138 , TYPE_139 METHOD_95 : case TYPE_140 ( VAR_162 , VAR_163 , TYPE_141 , TYPE_142 , TYPE_143 METHOD_96 : return VAR_164 ; } TYPE_144 TYPE_145 TYPE_146 METHOD_97 ( VAR_165 , ""tiffcp:%s:Don\'tknowhowtocopy/convertimage.\\n"" , METHOD_98 ( VAR_166 METHOD_99 METHOD_100 ; return ( VAR_167 METHOD_101 ; }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 METHOD_1 { TYPE_5 VAR_4 ; TYPE_6 VAR_5 , VAR_6 , VAR_7 , VAR_8 ; TYPE_7 VAR_9 ; ( TYPE_8 METHOD_2 METHOD_3 ( VAR_10 , VAR_11 , & VAR_12 METHOD_4 ; if ( VAR_13 != VAR_14 && VAR_15 != 8 && VAR_16 > 1 METHOD_5 { METHOD_6 ( VAR_17 , ""%s:Cannothandledifferentplanarconfigurationw/bits/sample!=8\\n"" , METHOD_7 ( VAR_18 METHOD_8 METHOD_9 ; return ( VAR_19 METHOD_10 ; } METHOD_11 ( VAR_20 , VAR_21 , & VAR_22 METHOD_12 ; METHOD_13 ( VAR_23 , VAR_24 , & VAR_25 METHOD_14 ; if ( ! ( METHOD_15 ( VAR_26 METHOD_16 || METHOD_17 ( VAR_27 METHOD_18 METHOD_19 METHOD_20 { TYPE_9 VAR_28 = ( TYPE_10 METHOD_21 - 1L ; METHOD_22 ( VAR_29 , VAR_30 , & VAR_31 METHOD_23 ; VAR_32 = ! VAR_33 && ( VAR_34 == VAR_35 METHOD_24 ; } else { if ( VAR_36 METHOD_25 { METHOD_26 ( VAR_37 , ""%s:Cannothandletiledconfigurationw/biasimage\\n"" , METHOD_27 ( VAR_38 METHOD_28 METHOD_29 ; return ( VAR_39 METHOD_30 ; } if ( METHOD_31 ( VAR_40 METHOD_32 METHOD_33 { if ( ! METHOD_34 ( VAR_41 , VAR_42 , & VAR_43 METHOD_35 METHOD_36 VAR_44 = VAR_45 ; if ( ! METHOD_37 ( VAR_46 , VAR_47 , & VAR_48 METHOD_38 METHOD_39 VAR_49 = VAR_50 ; VAR_51 = ( VAR_52 == VAR_53 && VAR_54 == VAR_55 METHOD_40 ; } else { METHOD_41 ( VAR_56 , VAR_57 , & VAR_58 METHOD_42 ; METHOD_43 ( VAR_59 , VAR_60 , & VAR_61 METHOD_44 ; VAR_62 = ( VAR_63 == VAR_64 && VAR_65 == VAR_66 METHOD_45 ; } } TYPE_11 1 TYPE_12 0 TYPE_13 ( VAR_67 , VAR_68 , VAR_69 , VAR_70 , VAR_71 METHOD_46 ( ( TYPE_14 METHOD_47 ( ( ( VAR_72 METHOD_48 << 11 METHOD_49 | ( ( VAR_73 METHOD_50 << 3 METHOD_51 | ( ( VAR_74 METHOD_52 << 2 METHOD_53 | ( ( VAR_75 METHOD_54 << 1 METHOD_55 | ( VAR_76 METHOD_56 METHOD_57 METHOD_58 switch ( TYPE_15 ( VAR_77 , VAR_78 , METHOD_59 ( VAR_79 METHOD_60 , METHOD_61 ( VAR_80 METHOD_62 , VAR_81 METHOD_63 METHOD_64 { case TYPE_16 ( VAR_82 , VAR_83 , TYPE_17 , TYPE_18 , TYPE_19 METHOD_65 : case TYPE_20 ( VAR_84 , VAR_85 , TYPE_21 , TYPE_22 , TYPE_23 METHOD_66 : return VAR_86 ; case TYPE_24 ( VAR_87 , VAR_88 , TYPE_25 , TYPE_26 , TYPE_27 METHOD_67 : case TYPE_28 ( VAR_89 , VAR_90 , TYPE_29 , TYPE_30 , TYPE_31 METHOD_68 : return VAR_91 ; case TYPE_32 ( VAR_92 , VAR_93 , TYPE_33 , TYPE_34 , TYPE_35 METHOD_69 : case TYPE_36 ( VAR_94 , VAR_95 , TYPE_37 , TYPE_38 , TYPE_39 METHOD_70 : return VAR_96 ; case TYPE_40 ( VAR_97 , VAR_98 , TYPE_41 , TYPE_42 , TYPE_43 METHOD_71 : case TYPE_44 ( VAR_99 , VAR_100 , TYPE_45 , TYPE_46 , TYPE_47 METHOD_72 : return VAR_101 ; case TYPE_48 ( VAR_102 , VAR_103 , TYPE_49 , TYPE_50 , TYPE_51 METHOD_73 : case TYPE_52 ( VAR_104 , VAR_105 , TYPE_53 , TYPE_54 , TYPE_55 METHOD_74 : return VAR_106 ; case TYPE_56 ( VAR_107 , VAR_108 , TYPE_57 , TYPE_58 , TYPE_59 METHOD_75 : case TYPE_60 ( VAR_109 , VAR_110 , TYPE_61 , TYPE_62 , TYPE_63 METHOD_76 : return VAR_111 ; case TYPE_64 ( VAR_112 , VAR_113 , TYPE_65 , TYPE_66 , TYPE_67 METHOD_77 : case TYPE_68 ( VAR_114 , VAR_115 , TYPE_69 , TYPE_70 , TYPE_71 METHOD_78 : return VAR_116 ; case TYPE_72 ( VAR_117 , VAR_118 , TYPE_73 , TYPE_74 , TYPE_75 METHOD_79 : case TYPE_76 ( VAR_119 , VAR_120 , TYPE_77 , TYPE_78 , TYPE_79 METHOD_80 : return VAR_121 ; case TYPE_80 ( VAR_122 , VAR_123 , TYPE_81 , TYPE_82 , TYPE_83 METHOD_81 : case TYPE_84 ( VAR_124 , VAR_125 , TYPE_85 , TYPE_86 , TYPE_87 METHOD_82 : return VAR_126 ; case TYPE_88 ( VAR_127 , VAR_128 , TYPE_89 , TYPE_90 , TYPE_91 METHOD_83 : case TYPE_92 ( VAR_129 , VAR_130 , TYPE_93 , TYPE_94 , TYPE_95 METHOD_84 : return VAR_131 ; case TYPE_96 ( VAR_132 , VAR_133 , TYPE_97 , TYPE_98 , TYPE_99 METHOD_85 : case TYPE_100 ( VAR_134 , VAR_135 , TYPE_101 , TYPE_102 , TYPE_103 METHOD_86 : return VAR_136 ; case TYPE_104 ( VAR_137 , VAR_138 , TYPE_105 , TYPE_106 , TYPE_107 METHOD_87 : case TYPE_108 ( VAR_139 , VAR_140 , TYPE_109 , TYPE_110 , TYPE_111 METHOD_88 : return VAR_141 ; case TYPE_112 ( VAR_142 , VAR_143 , TYPE_113 , TYPE_114 , TYPE_115 METHOD_89 : return VAR_144 ? VAR_145 : VAR_146 ; case TYPE_116 ( VAR_147 , VAR_148 , TYPE_117 , TYPE_118 , TYPE_119 METHOD_90 : return VAR_149 ; case TYPE_120 ( VAR_150 , VAR_151 , TYPE_121 , TYPE_122 , TYPE_123 METHOD_91 : case TYPE_124 ( VAR_152 , VAR_153 , TYPE_125 , TYPE_126 , TYPE_127 METHOD_92 : return VAR_154 ; case TYPE_128 ( VAR_155 , VAR_156 , TYPE_129 , TYPE_130 , TYPE_131 METHOD_93 : case TYPE_132 ( VAR_157 , VAR_158 , TYPE_133 , TYPE_134 , TYPE_135 METHOD_94 : return VAR_159 ; case TYPE_136 ( VAR_160 , VAR_161 , TYPE_137 , TYPE_138 , TYPE_139 METHOD_95 : case TYPE_140 ( VAR_162 , VAR_163 , TYPE_141 , TYPE_142 , TYPE_143 METHOD_96 : return VAR_164 ; } TYPE_144 TYPE_145 TYPE_146 METHOD_97 ( VAR_165 , ""tiffcp:%s:Don\'tknowhowtocopy/convertimage.\\n"" , METHOD_98 ( VAR_166 METHOD_99 METHOD_100 ; return ( VAR_167 METHOD_101 ; }",721
722,"static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) {  METHOD_1 ( VAR_2 , VAR_3 ) { if ( VAR_4 != ( TYPE_3 * ) VAR_5 ) VAR_6 = METHOD_2 ( VAR_7 ) ; if ( VAR_8 != ( TYPE_4 * ) VAR_9 ) VAR_10 = METHOD_3 ( VAR_11 ) ; METHOD_4 ( ( VAR_12 ) , ( VAR_13 ) ) ; }  TYPE_5 VAR_14 [ VAR_15 ] , VAR_16 [ 4 ] ; TYPE_6 * VAR_17 , * VAR_18 ; TYPE_7 * VAR_19 ; TYPE_8 VAR_20 , VAR_21 ; TYPE_9 VAR_22 , VAR_23 ; TYPE_10 VAR_24 ; TYPE_11 VAR_25 ; TYPE_12 VAR_26 ; register TYPE_13 * VAR_27 ; register TYPE_14 VAR_28 , VAR_29 ; TYPE_15 VAR_30 , VAR_31 ; TYPE_16 VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 ; VAR_37 * VAR_38 ; METHOD_5 ( VAR_39 != ( const TYPE_17 * ) VAR_40 ) ; METHOD_6 ( VAR_41 -> VAR_42 == VAR_43 ) ; if ( VAR_44 -> VAR_45 != VAR_46 ) ( TYPE_18 ) METHOD_7 ( VAR_47 , METHOD_8 ( ) , ""%s"" , VAR_48 -> VAR_49 ) ; METHOD_9 ( VAR_50 != ( TYPE_19 * ) VAR_51 ) ; METHOD_10 ( VAR_52 -> VAR_53 == VAR_54 ) ; VAR_55 = METHOD_11 ( VAR_56 , VAR_57 ) ; VAR_58 = METHOD_12 ( VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; if ( VAR_63 == VAR_64 ) { VAR_65 = METHOD_13 ( VAR_66 ) ; return ( ( TYPE_20 * ) VAR_67 ) ; } VAR_68 = ( TYPE_21 * ) VAR_69 ; VAR_70 = ( TYPE_22 * ) VAR_71 ; VAR_72 . VAR_73 = 0 ; VAR_74 . VAR_75 = 0 ; VAR_76 [ 0 ] = METHOD_14 ( VAR_77 ) ; VAR_78 [ 1 ] = METHOD_15 ( VAR_79 ) ; VAR_80 [ 2 ] = METHOD_16 ( VAR_81 ) ; VAR_82 [ 3 ] = METHOD_17 ( VAR_83 ) ; if ( ! ( ( VAR_84 [ 0 ] == 0x50 ) && ( VAR_85 [ 1 ] == 0x49 ) && ( VAR_86 [ 2 ] == 0x43 ) && ( VAR_87 [ 3 ] == 0x54 ) ) ) for ( VAR_88 = 0 ; VAR_89 < 508 ; VAR_90 ++ ) if ( METHOD_18 ( VAR_91 ) == VAR_92 ) break ; ( TYPE_23 ) METHOD_19 ( VAR_93 ) ; if ( METHOD_20 ( VAR_94 , & VAR_95 ) == VAR_96 ) METHOD_21 ( VAR_97 , ""ImproperImageHeader"" ) ; while ( ( VAR_98 = METHOD_22 ( VAR_99 ) ) == 0 ) ; if ( VAR_100 != 0x11 ) METHOD_23 ( VAR_101 , ""ImproperImageHeader"" ) ; VAR_102 = ( TYPE_24 ) METHOD_24 ( VAR_103 ) ; if ( VAR_104 == 2 ) { VAR_105 = METHOD_25 ( VAR_106 ) ; if ( VAR_107 != 0xff ) METHOD_26 ( VAR_108 , ""ImproperImageHeader"" ) ; } else if ( VAR_109 != 1 ) METHOD_27 ( VAR_110 , ""ImproperImageHeader"" ) ; if ( ( VAR_111 . VAR_112 < 0 ) || ( VAR_113 . VAR_114 < 0 ) || ( VAR_115 . VAR_116 < 0 ) || ( VAR_117 . VAR_118 < 0 ) || ( VAR_119 . VAR_120 >= VAR_121 . VAR_122 ) || ( VAR_123 . VAR_124 >= VAR_125 . VAR_126 ) ) METHOD_28 ( VAR_127 , ""ImproperImageHeader"" ) ; VAR_128 = 0 ; VAR_129 -> VAR_130 = 8 ; VAR_131 -> VAR_132 = ( TYPE_25 ) ( VAR_133 . VAR_134 - VAR_135 . VAR_136 ) ; VAR_137 -> VAR_138 = ( TYPE_26 ) ( VAR_139 . VAR_140 - VAR_141 . VAR_142 ) ; VAR_143 -> VAR_144 . VAR_145 = VAR_146 ; VAR_147 -> VAR_148 . VAR_149 = VAR_150 ; VAR_151 -> VAR_152 = VAR_153 ; if ( ( VAR_154 -> VAR_155 != VAR_156 ) && ( VAR_157 -> VAR_158 != 0 ) ) if ( VAR_159 -> VAR_160 >= ( VAR_161 -> VAR_162 + VAR_163 -> VAR_164 - 1 ) ) { ( TYPE_27 ) METHOD_29 ( VAR_165 ) ; return ( METHOD_30 ( VAR_166 ) ) ; } VAR_167 = METHOD_31 ( VAR_168 , VAR_169 -> VAR_170 , VAR_171 -> VAR_172 , VAR_173 ) ; if ( VAR_174 != VAR_175 ) VAR_176 = METHOD_32 ( VAR_177 , VAR_178 ) ; if ( VAR_179 == VAR_180 ) return ( METHOD_33 ( VAR_181 ) ) ; VAR_182 = VAR_183 ; for ( VAR_184 = 0 ; METHOD_34 ( VAR_185 ) == VAR_186 ; ) { if ( ( VAR_187 -> VAR_188 != VAR_189 ) && ( VAR_190 -> VAR_191 != 0 ) ) if ( VAR_192 -> VAR_193 >= ( VAR_194 -> VAR_195 + VAR_196 -> VAR_197 - 1 ) ) break ; if ( ( VAR_198 == 1 ) || ( ( METHOD_35 ( VAR_199 ) % 2 ) != 0 ) ) VAR_200 = METHOD_36 ( VAR_201 ) ; if ( VAR_202 == 2 ) VAR_203 = METHOD_37 ( VAR_204 ) ; if ( VAR_205 < 0 ) break ; if ( VAR_206 == 0 ) continue ; if ( VAR_207 > 0xa1 ) { if ( VAR_208 -> VAR_209 != VAR_210 ) ( TYPE_28 ) METHOD_38 ( VAR_211 , METHOD_39 ( ) , ""%04X:"" , VAR_212 ) ; } else { if ( VAR_213 -> VAR_214 != VAR_215 ) ( TYPE_29 ) METHOD_40 ( VAR_216 , METHOD_41 ( ) , ""%04X%s:%s"" , VAR_217 , VAR_218 [ VAR_219 ] . VAR_220 , VAR_221 [ VAR_222 ] . VAR_223 ) ; switch ( VAR_224 ) { case 0x01 : { VAR_225 = METHOD_42 ( VAR_226 ) ;  if ( VAR_227 != 0x000a )  { for ( VAR_228 = 0 ; VAR_229 < ( TYPE_30 ) ( VAR_230 - 2 ) ; VAR_231 ++ ) if ( METHOD_43 ( VAR_232 ) == VAR_233 ) break ; break ; } if ( METHOD_44 ( VAR_234 , & VAR_235 ) == VAR_236 ) METHOD_45 ( VAR_237 , ""ImproperImageHeader"" ) ; if ( ( ( VAR_238 . VAR_239 & 0x8000 ) != 0 ) || ( ( VAR_240 . VAR_241 & 0x8000 ) != 0 ) ) break ; VAR_242 -> VAR_243 = ( TYPE_31 ) ( VAR_244 . VAR_245 - VAR_246 . VAR_247 ) ; VAR_248 -> VAR_249 = ( TYPE_32 ) ( VAR_250 . VAR_251 - VAR_252 . VAR_253 ) ; VAR_254 = METHOD_46 ( VAR_255 , VAR_256 -> VAR_257 , VAR_258 -> VAR_259 , VAR_260 ) ; if ( VAR_261 != VAR_262 ) VAR_263 = METHOD_47 ( VAR_264 , VAR_265 ) ; if ( VAR_266 == VAR_267 ) return ( METHOD_48 ( VAR_268 ) ) ; break ; } case 0x12 : case 0x13 : case 0x14 : { TYPE_33 VAR_269 ; TYPE_34 VAR_270 , VAR_271 ; VAR_272 = ( TYPE_35 ) METHOD_49 ( VAR_273 ) ; for ( VAR_274 = 0 ; VAR_275 < 8 ; VAR_276 ++ ) if ( METHOD_50 ( VAR_277 ) == VAR_278 ) break ; if ( VAR_279 == 2 ) { for ( VAR_280 = 0 ; VAR_281 < 5 ; VAR_282 ++ ) if ( METHOD_51 ( VAR_283 ) == VAR_284 ) break ; break ; } if ( VAR_285 != 1 ) METHOD_52 ( VAR_286 , ""UnknownPatternType"" ) ; VAR_287 = METHOD_53 ( VAR_288 ) ;  if ( METHOD_54 ( VAR_289 , & VAR_290 ) == VAR_291 )  METHOD_55 ( VAR_292 , ""ImproperImageHeader"" ) ; if ( METHOD_56 ( VAR_293 , & VAR_294 ) == VAR_295 ) METHOD_57 ( VAR_296 , ""ImproperImageHeader"" ) ; VAR_297 -> VAR_298 = ( TYPE_36 ) VAR_299 . VAR_300 ; VAR_301 -> VAR_302 . VAR_303 = 1.0 * VAR_304 . VAR_305 ; VAR_306 -> VAR_307 . VAR_308 = 1.0 * VAR_309 . VAR_310 ; VAR_311 -> VAR_312 = VAR_313 ; ( TYPE_37 ) METHOD_58 ( VAR_314 ) ; VAR_315 = ( TYPE_38 ) METHOD_59 ( VAR_316 ) ;  VAR_317 = METHOD_60 ( VAR_318 ) ;  for ( VAR_319 = 0 ; VAR_320 <= ( TYPE_39 ) VAR_321 ; VAR_322 ++ ) ( TYPE_40 ) METHOD_61 ( VAR_323 ) ; VAR_324 = ( TYPE_41 ) ( VAR_325 . VAR_326 - VAR_327 . VAR_328 ) ; VAR_329 = ( TYPE_42 ) ( VAR_330 . VAR_331 - VAR_332 . VAR_333 ) ; if ( VAR_334 . VAR_335 <= 8 ) VAR_336 &= 0x7fff ; if ( VAR_337 . VAR_338 == 16 ) VAR_339 <<= 1 ; if ( VAR_340 == 0 ) VAR_341 = VAR_342 ; if ( VAR_343 < 8 ) { for ( VAR_344 = 0 ; VAR_345 < ( TYPE_43 ) ( VAR_346 * VAR_347 ) ; VAR_348 ++ ) if ( METHOD_62 ( VAR_349 ) == VAR_350 ) break ; } else for ( VAR_351 = 0 ; VAR_352 < ( TYPE_44 ) VAR_353 ; VAR_354 ++ ) { if ( METHOD_63 ( VAR_355 ) != VAR_356 ) break ; if ( VAR_357 > 200 ) { for ( VAR_358 = 0 ; VAR_359 < ( TYPE_45 ) METHOD_64 ( VAR_360 ) ; VAR_361 ++ ) if ( METHOD_65 ( VAR_362 ) == VAR_363 ) break ; } else for ( VAR_364 = 0 ; VAR_365 < ( TYPE_46 ) METHOD_66 ( VAR_366 ) ; VAR_367 ++ ) if ( METHOD_67 ( VAR_368 ) == VAR_369 ) break ; } break ; } case 0x1b : { VAR_370 -> VAR_371 . VAR_372 = ( TYPE_47 ) METHOD_68 ( METHOD_69 ( VAR_373 ) ) ; VAR_374 -> VAR_375 . VAR_376 = ( TYPE_48 ) METHOD_70 ( METHOD_71 ( VAR_377 ) ) ; VAR_378 -> VAR_379 . VAR_380 = ( TYPE_49 ) METHOD_72 ( METHOD_73 ( VAR_381 ) ) ; break ; } case 0x70 : case 0x71 : case 0x72 : case 0x73 : case 0x74 : case 0x75 : case 0x76 : case 0x77 : {  VAR_382 = METHOD_74 ( VAR_383 ) ;  for ( VAR_384 = 0 ; VAR_385 < ( TYPE_50 ) ( VAR_386 - 2 ) ; VAR_387 ++ ) if ( METHOD_75 ( VAR_388 ) == VAR_389 ) break ; break ; } case 0x90 : case 0x91 : case 0x98 : case 0x99 : case 0x9a : case 0x9b : { TYPE_51 VAR_390 , VAR_391 ; register unsigned TYPE_52 * VAR_392 ; TYPE_53 VAR_393 ; TYPE_54 VAR_394 ; unsigned TYPE_55 * VAR_395 ; VAR_396 = 0 ; if ( ( VAR_397 != 0x9a ) && ( VAR_398 != 0x9b ) ) VAR_399 = ( TYPE_56 ) METHOD_76 ( VAR_400 ) ; else { ( TYPE_57 ) METHOD_77 ( VAR_401 ) ; ( TYPE_58 ) METHOD_78 ( VAR_402 ) ; ( TYPE_59 ) METHOD_79 ( VAR_403 ) ; } if ( METHOD_80 ( VAR_404 , & VAR_405 ) == VAR_406 ) METHOD_81 ( VAR_407 , ""ImproperImageHeader"" ) ; VAR_408 = METHOD_82 ( VAR_409 , ( TYPE_60 ) ( VAR_410 . VAR_411 - VAR_412 . VAR_413 ) , ( TYPE_61 ) ( VAR_414 . VAR_415 - VAR_416 . VAR_417 ) , VAR_418 , VAR_419 ) ; if ( VAR_420 == ( TYPE_62 * ) VAR_421 ) METHOD_83 ( VAR_422 , ""ImproperImageHeader"" ) ; if ( ( VAR_423 == 0x9a ) || ( VAR_424 == 0x9b ) || ( ( VAR_425 & 0x8000 ) != 0 ) ) { if ( METHOD_84 ( VAR_426 , & VAR_427 ) == VAR_428 ) METHOD_85 ( VAR_429 , ""ImproperImageHeader"" ) ; VAR_430 -> VAR_431 = ( TYPE_63 ) VAR_432 . VAR_433 ; VAR_434 -> VAR_435 = VAR_436 . VAR_437 == 4 ? VAR_438 : VAR_439 ; VAR_440 -> VAR_441 . VAR_442 = ( TYPE_64 ) VAR_443 . VAR_444 ; VAR_445 -> VAR_446 . VAR_447 = ( TYPE_65 ) VAR_448 . VAR_449 ; VAR_450 -> VAR_451 = VAR_452 ; if ( VAR_453 -> VAR_454 != VAR_455 ) ( TYPE_66 ) METHOD_86 ( VAR_456 , VAR_457 , VAR_458 ) ; } if ( ( VAR_459 != 0x9a ) && ( VAR_460 != 0x9b ) ) { VAR_461 -> VAR_462 = 2 ; if ( ( VAR_463 & 0x8000 ) != 0 ) { ( TYPE_67 ) METHOD_87 ( VAR_464 ) ; VAR_465 = ( TYPE_68 ) METHOD_88 ( VAR_466 ) ; VAR_467 -> VAR_468 = 1UL * METHOD_89 ( VAR_469 ) + 1 ; } VAR_470 = METHOD_90 ( VAR_471 , VAR_472 -> VAR_473 , VAR_474 ) ; if ( VAR_475 == VAR_476 ) METHOD_91 ( VAR_477 , ""MemoryAllocationFailed"" ) ; if ( ( VAR_478 & 0x8000 ) != 0 ) { for ( VAR_479 = 0 ; VAR_480 < ( TYPE_69 ) VAR_481 -> VAR_482 ; VAR_483 ++ ) { VAR_484 = METHOD_92 ( VAR_485 ) % VAR_486 -> VAR_487 ; if ( ( VAR_488 & 0x8000 ) != 0 ) VAR_489 = ( TYPE_70 ) VAR_490 ; VAR_491 -> VAR_492 [ VAR_493 ] . VAR_494 = ( TYPE_71 ) METHOD_93 ( METHOD_94 ( VAR_495 ) ) ; VAR_496 -> VAR_497 [ VAR_498 ] . VAR_499 = ( TYPE_72 ) METHOD_95 ( METHOD_96 ( VAR_500 ) ) ; VAR_501 -> VAR_502 [ VAR_503 ] . VAR_504 = ( TYPE_73 ) METHOD_97 ( METHOD_98 ( VAR_505 ) ) ; } } else { for ( VAR_506 = 0 ; VAR_507 < ( TYPE_74 ) VAR_508 -> VAR_509 ; VAR_510 ++ ) { VAR_511 -> VAR_512 [ VAR_513 ] . VAR_514 = ( TYPE_75 ) ( VAR_515 - VAR_516 -> VAR_517 [ VAR_518 ] . VAR_519 ) ; VAR_520 -> VAR_521 [ VAR_522 ] . VAR_523 = ( TYPE_76 ) ( VAR_524 - VAR_525 -> VAR_526 [ VAR_527 ] . VAR_528 ) ; VAR_529 -> VAR_530 [ VAR_531 ] . VAR_532 = ( TYPE_77 ) ( VAR_533 - VAR_534 -> VAR_535 [ VAR_536 ] . VAR_537 ) ; } } } if ( METHOD_99 ( VAR_538 ) != VAR_539 ) METHOD_100 ( VAR_540 , ""InsufficientImageDataInFile"" ) ; if ( METHOD_101 ( VAR_541 , & VAR_542 ) == VAR_543 ) METHOD_102 ( VAR_544 , ""ImproperImageHeader"" ) ; if ( METHOD_103 ( VAR_545 , & VAR_546 ) == VAR_547 ) METHOD_104 ( VAR_548 , ""ImproperImageHeader"" ) ; ( TYPE_78 ) METHOD_105 ( VAR_549 ) ; if ( ( VAR_550 == 0x91 ) || ( VAR_551 == 0x99 ) || ( VAR_552 == 0x9b ) ) {  VAR_553 = METHOD_106 ( VAR_554 ) ;  for ( VAR_555 = 0 ; VAR_556 < ( TYPE_79 ) ( VAR_557 - 2 ) ; VAR_558 ++ ) if ( METHOD_107 ( VAR_559 ) == VAR_560 ) break ; } if ( ( VAR_561 != 0x9a ) && ( VAR_562 != 0x9b ) && ( VAR_563 & 0x8000 ) == 0 ) VAR_564 = METHOD_108 ( VAR_565 , VAR_566 , ( TYPE_80 ) VAR_567 , 1 , & VAR_568 ) ; else VAR_569 = METHOD_109 ( VAR_570 , VAR_571 , ( TYPE_81 ) VAR_572 , ( unsigned TYPE_82 ) VAR_573 . VAR_574 , & VAR_575 ) ; if ( VAR_576 == ( unsigned TYPE_83 * ) VAR_577 ) METHOD_110 ( VAR_578 , ""UnableToUncompressImage"" ) ; VAR_579 = VAR_580 ; for ( VAR_581 = 0 ; VAR_582 < ( TYPE_84 ) VAR_583 -> VAR_584 ; VAR_585 ++ ) { if ( VAR_586 > ( VAR_587 + VAR_588 + VAR_589 -> VAR_590 ) ) { VAR_591 = ( unsigned TYPE_85 * ) METHOD_111 ( VAR_592 ) ; METHOD_112 ( VAR_593 , ""NotEnoughPixelData"" ) ; } VAR_594 = METHOD_113 ( VAR_595 , 0 , VAR_596 , VAR_597 -> VAR_598 , 1 , VAR_599 ) ; if ( VAR_600 == ( TYPE_86 * ) VAR_601 ) break ; for ( VAR_602 = 0 ; VAR_603 < ( TYPE_87 ) VAR_604 -> VAR_605 ; VAR_606 ++ ) { if ( VAR_607 -> VAR_608 == VAR_609 ) { VAR_610 = ( TYPE_88 ) METHOD_114 ( VAR_611 , ( TYPE_89 ) * VAR_612 , VAR_613 ) ; METHOD_115 ( VAR_614 , VAR_615 , VAR_616 ) ; METHOD_116 ( VAR_617 , VAR_618 -> VAR_619 [ ( TYPE_90 ) VAR_620 ] . VAR_621 , VAR_622 ) ; METHOD_117 ( VAR_623 , VAR_624 -> VAR_625 [ ( TYPE_91 ) VAR_626 ] . VAR_627 , VAR_628 ) ; METHOD_118 ( VAR_629 , VAR_630 -> VAR_631 [ ( TYPE_92 ) VAR_632 ] . VAR_633 , VAR_634 ) ; } else { if ( VAR_635 . VAR_636 == 16 ) { VAR_637 = ( TYPE_93 ) ( * VAR_638 ++ ) ; VAR_639 = ( TYPE_94 ) ( * VAR_640 ) ; METHOD_119 ( VAR_641 , METHOD_120 ( ( unsigned TYPE_95 ) ( ( VAR_642 & 0x7c ) << 1 ) ) , VAR_643 ) ; METHOD_121 ( VAR_644 , METHOD_122 ( ( unsigned TYPE_96 ) ( ( ( VAR_645 & 0x03 ) << 6 ) | ( ( VAR_646 & 0xe0 ) >> 2 ) ) ) , VAR_647 ) ; METHOD_123 ( VAR_648 , METHOD_124 ( ( unsigned TYPE_97 ) ( ( VAR_649 & 0x1f ) << 3 ) ) , VAR_650 ) ; } else if ( VAR_651 -> VAR_652 == VAR_653 ) { if ( VAR_654 > ( VAR_655 + VAR_656 + 2 * VAR_657 -> VAR_658 ) ) METHOD_125 ( VAR_659 , ""NotEnoughPixelData"" ) ; METHOD_126 ( VAR_660 , METHOD_127 ( * VAR_661 ) , VAR_662 ) ; METHOD_128 ( VAR_663 , METHOD_129 ( * ( VAR_664 + VAR_665 -> VAR_666 ) ) , VAR_667 ) ; METHOD_130 ( VAR_668 , METHOD_131 ( * ( VAR_669 + 2 * VAR_670 -> VAR_671 ) ) , VAR_672 ) ; } else { if ( VAR_673 > ( VAR_674 + VAR_675 + 3 * VAR_676 -> VAR_677 ) ) METHOD_132 ( VAR_678 , ""NotEnoughPixelData"" ) ; METHOD_133 ( VAR_679 , METHOD_134 ( * VAR_680 ) , VAR_681 ) ; METHOD_135 ( VAR_682 , METHOD_136 ( * ( VAR_683 + VAR_684 -> VAR_685 ) ) , VAR_686 ) ; METHOD_137 ( VAR_687 , METHOD_138 ( * ( VAR_688 + 2 * VAR_689 -> VAR_690 ) ) , VAR_691 ) ; METHOD_139 ( VAR_692 , METHOD_140 ( * ( VAR_693 + 3 * VAR_694 -> VAR_695 ) ) , VAR_696 ) ; } } VAR_697 ++ ; VAR_698 += METHOD_141 ( VAR_699 ) ; } if ( METHOD_142 ( VAR_700 , VAR_701 ) == VAR_702 ) break ; if ( ( VAR_703 -> VAR_704 == VAR_705 ) && ( VAR_706 . VAR_707 != 16 ) ) { VAR_708 += ( VAR_709 . VAR_710 - 1 ) * VAR_711 -> VAR_712 ; if ( VAR_713 < VAR_714 ) break ; } VAR_715 = METHOD_143 ( VAR_716 , VAR_717 , ( TYPE_98 ) VAR_718 , VAR_719 -> VAR_720 ) ; if ( VAR_721 == VAR_722 ) break ; } VAR_723 = ( unsigned TYPE_99 * ) METHOD_144 ( VAR_724 ) ; if ( ( VAR_725 == VAR_726 ) && ( METHOD_145 ( VAR_727 ) == VAR_728 ) ) if ( ( VAR_729 == 0x9a ) || ( VAR_730 == 0x9b ) || ( ( VAR_731 & 0x8000 ) != 0 ) ) ( TYPE_100 ) METHOD_146 ( VAR_732 , VAR_733 , VAR_734 , VAR_735 , ( TYPE_101 ) VAR_736 . VAR_737 , ( TYPE_102 ) VAR_738 . VAR_739 , VAR_740 ) ; VAR_741 = METHOD_147 ( VAR_742 ) ; break ; } case 0xa1 : { unsigned TYPE_103 * VAR_743 ; TYPE_104 VAR_744 ; VAR_745 = METHOD_148 ( VAR_746 ) ; VAR_747 = METHOD_149 ( VAR_748 ) ;  if ( VAR_749 == 0 )  break ; ( TYPE_105 ) METHOD_150 ( VAR_750 ) ; VAR_751 -= METHOD_151 ( VAR_752 , 4 ) ; if ( VAR_753 == 0 ) break ; VAR_754 = ( unsigned TYPE_106 * ) METHOD_152 ( VAR_755 , sizeof ( * VAR_756 ) ) ; if ( VAR_757 == ( unsigned TYPE_107 * ) VAR_758 ) break ; VAR_759 = METHOD_153 ( VAR_760 , VAR_761 , VAR_762 ) ; if ( VAR_763 != ( TYPE_108 ) VAR_764 ) { VAR_765 = ( unsigned TYPE_109 * ) METHOD_154 ( VAR_766 ) ; METHOD_155 ( VAR_767 , ""UnableToReadImageData"" ) ; } switch ( VAR_768 ) { case 0xe0 : { VAR_769 = METHOD_156 ( ( const TYPE_110 * ) VAR_770 , VAR_771 ) ; METHOD_157 ( VAR_772 , VAR_773 ) ; VAR_774 = METHOD_158 ( VAR_775 , ""icc"" , VAR_776 , VAR_777 ) ; VAR_778 = METHOD_159 ( VAR_779 ) ; if ( VAR_780 == VAR_781 ) { VAR_782 = ( unsigned TYPE_111 * ) METHOD_160 ( VAR_783 ) ; METHOD_161 ( VAR_784 , ""MemoryAllocationFailed"" ) ; } break ; } case 0x1f2 : { VAR_785 = METHOD_162 ( ( const TYPE_112 * ) VAR_786 , VAR_787 ) ; METHOD_163 ( VAR_788 , VAR_789 ) ; VAR_790 = METHOD_164 ( VAR_791 , ""iptc"" , VAR_792 , VAR_793 ) ; if ( VAR_794 == VAR_795 ) { VAR_796 = ( unsigned TYPE_113 * ) METHOD_165 ( VAR_797 ) ; METHOD_166 ( VAR_798 , ""MemoryAllocationFailed"" ) ; } VAR_799 = METHOD_167 ( VAR_800 ) ; break ; } default : break ; } VAR_801 = ( unsigned TYPE_114 * ) METHOD_168 ( VAR_802 ) ; break ; } default : { if ( VAR_803 [ VAR_804 ] . VAR_805 == - 1 ) ( TYPE_115 ) METHOD_169 ( VAR_806 ) ; else for ( VAR_807 = 0 ; VAR_808 < ( TYPE_116 ) VAR_809 [ VAR_810 ] . VAR_811 ; VAR_812 ++ ) if ( METHOD_170 ( VAR_813 ) == VAR_814 ) break ; } } } if ( VAR_815 == 0xc00 ) { for ( VAR_816 = 0 ; VAR_817 < 24 ; VAR_818 ++ ) if ( METHOD_171 ( VAR_819 ) == VAR_820 ) break ; continue ; } if ( ( ( VAR_821 >= 0xb0 ) && ( VAR_822 <= 0xcf ) ) || ( ( VAR_823 >= 0x8000 ) && ( VAR_824 <= 0x80ff ) ) ) continue ; if ( VAR_825 == 0x8200 ) { TYPE_117 VAR_826 [ VAR_827 ] ; TYPE_118 * VAR_828 ; TYPE_119 VAR_829 ; VAR_830 = VAR_831 ; VAR_832 = METHOD_172 ( VAR_833 ) ; METHOD_173 ( VAR_834 , ( TYPE_120 * ) VAR_835 , 0 ) ; VAR_836 = ( TYPE_121 * ) VAR_837 ; VAR_838 = METHOD_174 ( VAR_839 ) ; ( TYPE_122 ) METHOD_175 ( VAR_840 -> VAR_841 , VAR_842 , ""jpeg:%s"" , VAR_843 ) ; if ( VAR_844 != - 1 ) VAR_845 = METHOD_176 ( VAR_846 , ""wb"" ) ; if ( ( VAR_847 == - 1 ) || ( VAR_848 == ( TYPE_123 * ) VAR_849 ) ) { ( TYPE_124 ) METHOD_177 ( VAR_850 -> VAR_851 ) ; ( TYPE_125 ) METHOD_178 ( VAR_852 -> VAR_853 , VAR_854 -> VAR_855 , VAR_856 ) ; METHOD_179 ( VAR_857 , ""UnableToCreateTemporaryFile"" ) ; } VAR_858 = METHOD_180 ( VAR_859 ) ;  if ( VAR_860 > 154 )  { for ( VAR_861 = 0 ; VAR_862 < 6 ; VAR_863 ++ ) ( TYPE_126 ) METHOD_181 ( VAR_864 ) ; if ( METHOD_182 ( VAR_865 , & VAR_866 ) == VAR_867 ) { ( TYPE_127 ) METHOD_183 ( VAR_868 ) ; ( TYPE_128 ) METHOD_184 ( VAR_869 -> VAR_870 ) ; METHOD_185 ( VAR_871 , ""ImproperImageHeader"" ) ; } for ( VAR_872 = 0 ; VAR_873 < 122 ; VAR_874 ++ ) if ( METHOD_186 ( VAR_875 ) == VAR_876 ) break ; for ( VAR_877 = 0 ; VAR_878 < ( TYPE_129 ) ( VAR_879 - 154 ) ; VAR_880 ++ ) { VAR_881 = METHOD_187 ( VAR_882 ) ; if ( VAR_883 == VAR_884 ) break ; if ( METHOD_188 ( VAR_885 , VAR_886 ) != VAR_887 ) break ; } } ( TYPE_130 ) METHOD_189 ( VAR_888 ) ; ( TYPE_131 ) METHOD_190 ( VAR_889 ) ; VAR_890 = METHOD_191 ( VAR_891 , VAR_892 ) ; ( TYPE_132 ) METHOD_192 ( VAR_893 ) ; VAR_894 = METHOD_193 ( VAR_895 ) ; if ( VAR_896 == ( TYPE_133 * ) VAR_897 ) continue ; ( TYPE_134 ) METHOD_194 ( VAR_898 , VAR_899 , ""%.20gx%.20g"" , ( TYPE_135 ) METHOD_195 ( VAR_900 -> VAR_901 , VAR_902 -> VAR_903 ) , ( TYPE_136 ) METHOD_196 ( VAR_904 -> VAR_905 , VAR_906 -> VAR_907 ) ) ; ( TYPE_137 ) METHOD_197 ( VAR_908 , METHOD_198 ( VAR_909 -> VAR_910 , VAR_911 -> VAR_912 ) , METHOD_199 ( VAR_913 -> VAR_914 , VAR_915 -> VAR_916 ) , VAR_917 ) ; ( TYPE_138 ) METHOD_200 ( VAR_918 , VAR_919 -> VAR_920 , VAR_921 ) ; ( TYPE_139 ) METHOD_201 ( VAR_922 , VAR_923 , VAR_924 , VAR_925 , ( TYPE_140 ) VAR_926 . VAR_927 , ( TYPE_141 ) VAR_928 . VAR_929 , VAR_930 ) ; VAR_931 -> VAR_932 = VAR_933 -> VAR_934 ; VAR_935 = METHOD_202 ( VAR_936 ) ; continue ; } if ( ( VAR_937 == 0xff ) || ( VAR_938 == 0xffff ) ) break ; if ( ( ( VAR_939 >= 0xd0 ) && ( VAR_940 <= 0xfe ) ) || ( ( VAR_941 >= 0x8100 ) && ( VAR_942 <= 0xffff ) ) ) { VAR_943 = METHOD_203 ( VAR_944 ) ;  for ( VAR_945 = 0 ; VAR_946 < ( TYPE_142 ) VAR_947 ; VAR_948 ++ )  if ( METHOD_204 ( VAR_949 ) == VAR_950 ) break ; continue ; } if ( ( VAR_951 >= 0x100 ) && ( VAR_952 <= 0x7fff ) ) { VAR_953 = ( TYPE_143 ) ( ( VAR_954 >> 7 ) & 0xff ) ;  for ( VAR_955 = 0 ; VAR_956 < ( TYPE_144 ) VAR_957 ; VAR_958 ++ )  if ( METHOD_205 ( VAR_959 ) == VAR_960 ) break ; continue ; } } ( TYPE_145 ) METHOD_206 ( VAR_961 ) ; return ( METHOD_207 ( VAR_962 ) ) ; }","static TYPE_0 * METHOD_0 ( const TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { METHOD_1 ( VAR_2 , VAR_3 ) { if ( VAR_4 != ( TYPE_3 * ) VAR_5 ) VAR_6 = METHOD_2 ( VAR_7 ) ; if ( VAR_8 != ( TYPE_4 * ) VAR_9 ) VAR_10 = METHOD_3 ( VAR_11 ) ; METHOD_4 ( ( VAR_12 ) , ( VAR_13 ) ) ; } TYPE_5 VAR_14 [ VAR_15 ] , VAR_16 [ 4 ] ; TYPE_6 * VAR_17 , * VAR_18 ; TYPE_7 * VAR_19 ; TYPE_8 VAR_20 , VAR_21 ; TYPE_9 VAR_22 , VAR_23 ; TYPE_10 VAR_24 ; TYPE_11 VAR_25 ; TYPE_12 VAR_26 ; register TYPE_13 * VAR_27 ; register TYPE_14 VAR_28 , VAR_29 ; TYPE_15 VAR_30 , VAR_31 ; TYPE_16 VAR_32 , VAR_33 , VAR_34 , VAR_35 , VAR_36 ; VAR_37 * VAR_38 ; METHOD_5 ( VAR_39 != ( const TYPE_17 * ) VAR_40 ) ; METHOD_6 ( VAR_41 -> VAR_42 == VAR_43 ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , ""InsufficientImageDataInFile"" ) ; if ( VAR_44 -> VAR_45 != VAR_46 ) ( TYPE_18 ) METHOD_7 ( VAR_47 , METHOD_8 ( ) , ""%s"" , VAR_48 -> VAR_49 ) ; METHOD_9 ( VAR_50 != ( TYPE_19 * ) VAR_51 ) ; METHOD_10 ( VAR_52 -> VAR_53 == VAR_54 ) ; VAR_55 = METHOD_11 ( VAR_56 , VAR_57 ) ; VAR_58 = METHOD_12 ( VAR_59 , VAR_60 , VAR_61 , VAR_62 ) ; if ( VAR_63 == VAR_64 ) { VAR_65 = METHOD_13 ( VAR_66 ) ; return ( ( TYPE_20 * ) VAR_67 ) ; } VAR_68 = ( TYPE_21 * ) VAR_69 ; VAR_70 = ( TYPE_22 * ) VAR_71 ; VAR_72 . VAR_73 = 0 ; VAR_74 . VAR_75 = 0 ; VAR_76 [ 0 ] = METHOD_14 ( VAR_77 ) ; VAR_78 [ 1 ] = METHOD_15 ( VAR_79 ) ; VAR_80 [ 2 ] = METHOD_16 ( VAR_81 ) ; VAR_82 [ 3 ] = METHOD_17 ( VAR_83 ) ; if ( ! ( ( VAR_84 [ 0 ] == 0x50 ) && ( VAR_85 [ 1 ] == 0x49 ) && ( VAR_86 [ 2 ] == 0x43 ) && ( VAR_87 [ 3 ] == 0x54 ) ) ) for ( VAR_88 = 0 ; VAR_89 < 508 ; VAR_90 ++ ) if ( METHOD_18 ( VAR_91 ) == VAR_92 ) break ; ( TYPE_23 ) METHOD_19 ( VAR_93 ) ; if ( METHOD_20 ( VAR_94 , & VAR_95 ) == VAR_96 ) METHOD_21 ( VAR_97 , ""ImproperImageHeader"" ) ; while ( ( VAR_98 = METHOD_22 ( VAR_99 ) ) == 0 ) ; if ( VAR_100 != 0x11 ) METHOD_23 ( VAR_101 , ""ImproperImageHeader"" ) ; VAR_102 = ( TYPE_24 ) METHOD_24 ( VAR_103 ) ; if ( VAR_104 == 2 ) { VAR_105 = METHOD_25 ( VAR_106 ) ; if ( VAR_107 != 0xff ) METHOD_26 ( VAR_108 , ""ImproperImageHeader"" ) ; } else if ( VAR_109 != 1 ) METHOD_27 ( VAR_110 , ""ImproperImageHeader"" ) ; if ( ( VAR_111 . VAR_112 < 0 ) || ( VAR_113 . VAR_114 < 0 ) || ( VAR_115 . VAR_116 < 0 ) || ( VAR_117 . VAR_118 < 0 ) || ( VAR_119 . VAR_120 >= VAR_121 . VAR_122 ) || ( VAR_123 . VAR_124 >= VAR_125 . VAR_126 ) ) METHOD_28 ( VAR_127 , ""ImproperImageHeader"" ) ; VAR_128 = 0 ; VAR_129 -> VAR_130 = 8 ; VAR_131 -> VAR_132 = ( TYPE_25 ) ( VAR_133 . VAR_134 - VAR_135 . VAR_136 ) ; VAR_137 -> VAR_138 = ( TYPE_26 ) ( VAR_139 . VAR_140 - VAR_141 . VAR_142 ) ; VAR_143 -> VAR_144 . VAR_145 = VAR_146 ; VAR_147 -> VAR_148 . VAR_149 = VAR_150 ; VAR_151 -> VAR_152 = VAR_153 ; if ( ( VAR_154 -> VAR_155 != VAR_156 ) && ( VAR_157 -> VAR_158 != 0 ) ) if ( VAR_159 -> VAR_160 >= ( VAR_161 -> VAR_162 + VAR_163 -> VAR_164 - 1 ) ) { ( TYPE_27 ) METHOD_29 ( VAR_165 ) ; return ( METHOD_30 ( VAR_166 ) ) ; } VAR_167 = METHOD_31 ( VAR_168 , VAR_169 -> VAR_170 , VAR_171 -> VAR_172 , VAR_173 ) ; if ( VAR_174 != VAR_175 ) VAR_176 = METHOD_32 ( VAR_177 , VAR_178 ) ; if ( VAR_179 == VAR_180 ) return ( METHOD_33 ( VAR_181 ) ) ; VAR_182 = VAR_183 ; for ( VAR_184 = 0 ; METHOD_34 ( VAR_185 ) == VAR_186 ; ) { if ( ( VAR_187 -> VAR_188 != VAR_189 ) && ( VAR_190 -> VAR_191 != 0 ) ) if ( VAR_192 -> VAR_193 >= ( VAR_194 -> VAR_195 + VAR_196 -> VAR_197 - 1 ) ) break ; if ( ( VAR_198 == 1 ) || ( ( METHOD_35 ( VAR_199 ) % 2 ) != 0 ) ) VAR_200 = METHOD_36 ( VAR_201 ) ; if ( VAR_202 == 2 ) VAR_203 = METHOD_37 ( VAR_204 ) ; if ( VAR_205 < 0 ) break ; if ( VAR_206 == 0 ) continue ; if ( VAR_207 > 0xa1 ) { if ( VAR_208 -> VAR_209 != VAR_210 ) ( TYPE_28 ) METHOD_38 ( VAR_211 , METHOD_39 ( ) , ""%04X:"" , VAR_212 ) ; } else { if ( VAR_213 -> VAR_214 != VAR_215 ) ( TYPE_29 ) METHOD_40 ( VAR_216 , METHOD_41 ( ) , ""%04X%s:%s"" , VAR_217 , VAR_218 [ VAR_219 ] . VAR_220 , VAR_221 [ VAR_222 ] . VAR_223 ) ; switch ( VAR_224 ) { case 0x01 : { VAR_225 = METHOD_42 ( VAR_226 ) ; if ( VAR_227 != 0x000a ) { for ( VAR_228 = 0 ; VAR_229 < ( TYPE_30 ) ( VAR_230 - 2 ) ; VAR_231 ++ ) if ( METHOD_43 ( VAR_232 ) == VAR_233 ) break ; break ; } if ( METHOD_44 ( VAR_234 , & VAR_235 ) == VAR_236 ) METHOD_45 ( VAR_237 , ""ImproperImageHeader"" ) ; if ( ( ( VAR_238 . VAR_239 & 0x8000 ) != 0 ) || ( ( VAR_240 . VAR_241 & 0x8000 ) != 0 ) ) break ; VAR_242 -> VAR_243 = ( TYPE_31 ) ( VAR_244 . VAR_245 - VAR_246 . VAR_247 ) ; VAR_248 -> VAR_249 = ( TYPE_32 ) ( VAR_250 . VAR_251 - VAR_252 . VAR_253 ) ; VAR_254 = METHOD_46 ( VAR_255 , VAR_256 -> VAR_257 , VAR_258 -> VAR_259 , VAR_260 ) ; if ( VAR_261 != VAR_262 ) VAR_263 = METHOD_47 ( VAR_264 , VAR_265 ) ; if ( VAR_266 == VAR_267 ) return ( METHOD_48 ( VAR_268 ) ) ; break ; } case 0x12 : case 0x13 : case 0x14 : { TYPE_33 VAR_269 ; TYPE_34 VAR_270 , VAR_271 ; VAR_272 = ( TYPE_35 ) METHOD_49 ( VAR_273 ) ; for ( VAR_274 = 0 ; VAR_275 < 8 ; VAR_276 ++ ) if ( METHOD_50 ( VAR_277 ) == VAR_278 ) break ; if ( VAR_279 == 2 ) { for ( VAR_280 = 0 ; VAR_281 < 5 ; VAR_282 ++ ) if ( METHOD_51 ( VAR_283 ) == VAR_284 ) break ; break ; } if ( VAR_285 != 1 ) METHOD_52 ( VAR_286 , ""UnknownPatternType"" ) ; VAR_287 = METHOD_53 ( VAR_288 ) ; if ( METHOD_54 ( VAR_289 , & VAR_290 ) == VAR_291 ) METHOD_55 ( VAR_292 , ""ImproperImageHeader"" ) ; if ( METHOD_56 ( VAR_293 , & VAR_294 ) == VAR_295 ) METHOD_57 ( VAR_296 , ""ImproperImageHeader"" ) ; VAR_297 -> VAR_298 = ( TYPE_36 ) VAR_299 . VAR_300 ; VAR_301 -> VAR_302 . VAR_303 = 1.0 * VAR_304 . VAR_305 ; VAR_306 -> VAR_307 . VAR_308 = 1.0 * VAR_309 . VAR_310 ; VAR_311 -> VAR_312 = VAR_313 ; ( TYPE_37 ) METHOD_58 ( VAR_314 ) ; VAR_315 = ( TYPE_38 ) METHOD_59 ( VAR_316 ) ; VAR_317 = METHOD_60 ( VAR_318 ) ; for ( VAR_319 = 0 ; VAR_320 <= ( TYPE_39 ) VAR_321 ; VAR_322 ++ ) ( TYPE_40 ) METHOD_61 ( VAR_323 ) ; VAR_324 = ( TYPE_41 ) ( VAR_325 . VAR_326 - VAR_327 . VAR_328 ) ; VAR_329 = ( TYPE_42 ) ( VAR_330 . VAR_331 - VAR_332 . VAR_333 ) ; if ( VAR_334 . VAR_335 <= 8 ) VAR_336 &= 0x7fff ; if ( VAR_337 . VAR_338 == 16 ) VAR_339 <<= 1 ; if ( VAR_340 == 0 ) VAR_341 = VAR_342 ; if ( VAR_343 < 8 ) { for ( VAR_344 = 0 ; VAR_345 < ( TYPE_43 ) ( VAR_346 * VAR_347 ) ; VAR_348 ++ ) if ( METHOD_62 ( VAR_349 ) == VAR_350 ) break ; } else for ( VAR_351 = 0 ; VAR_352 < ( TYPE_44 ) VAR_353 ; VAR_354 ++ ) { if ( METHOD_63 ( VAR_355 ) != VAR_356 ) break ; if ( VAR_357 > 200 ) { for ( VAR_358 = 0 ; VAR_359 < ( TYPE_45 ) METHOD_64 ( VAR_360 ) ; VAR_361 ++ ) if ( METHOD_65 ( VAR_362 ) == VAR_363 ) break ; } else for ( VAR_364 = 0 ; VAR_365 < ( TYPE_46 ) METHOD_66 ( VAR_366 ) ; VAR_367 ++ ) if ( METHOD_67 ( VAR_368 ) == VAR_369 ) break ; } break ; } case 0x1b : { VAR_370 -> VAR_371 . VAR_372 = ( TYPE_47 ) METHOD_68 ( METHOD_69 ( VAR_373 ) ) ; VAR_374 -> VAR_375 . VAR_376 = ( TYPE_48 ) METHOD_70 ( METHOD_71 ( VAR_377 ) ) ; VAR_378 -> VAR_379 . VAR_380 = ( TYPE_49 ) METHOD_72 ( METHOD_73 ( VAR_381 ) ) ; break ; } case 0x70 : case 0x71 : case 0x72 : case 0x73 : case 0x74 : case 0x75 : case 0x76 : case 0x77 : { VAR_382 = METHOD_74 ( VAR_383 ) ; for ( VAR_384 = 0 ; VAR_385 < ( TYPE_50 ) ( VAR_386 - 2 ) ; VAR_387 ++ ) if ( METHOD_75 ( VAR_388 ) == VAR_389 ) break ; break ; } case 0x90 : case 0x91 : case 0x98 : case 0x99 : case 0x9a : case 0x9b : { TYPE_51 VAR_390 , VAR_391 ; register unsigned TYPE_52 * VAR_392 ; TYPE_53 VAR_393 ; TYPE_54 VAR_394 ; unsigned TYPE_55 * VAR_395 ; VAR_396 = 0 ; if ( ( VAR_397 != 0x9a ) && ( VAR_398 != 0x9b ) ) VAR_399 = ( TYPE_56 ) METHOD_76 ( VAR_400 ) ; else { ( TYPE_57 ) METHOD_77 ( VAR_401 ) ; ( TYPE_58 ) METHOD_78 ( VAR_402 ) ; ( TYPE_59 ) METHOD_79 ( VAR_403 ) ; } if ( METHOD_80 ( VAR_404 , & VAR_405 ) == VAR_406 ) METHOD_81 ( VAR_407 , ""ImproperImageHeader"" ) ; VAR_408 = METHOD_82 ( VAR_409 , ( TYPE_60 ) ( VAR_410 . VAR_411 - VAR_412 . VAR_413 ) , ( TYPE_61 ) ( VAR_414 . VAR_415 - VAR_416 . VAR_417 ) , VAR_418 , VAR_419 ) ; if ( VAR_420 == ( TYPE_62 * ) VAR_421 ) METHOD_83 ( VAR_422 , ""ImproperImageHeader"" ) ; if ( ( VAR_423 == 0x9a ) || ( VAR_424 == 0x9b ) || ( ( VAR_425 & 0x8000 ) != 0 ) ) { if ( METHOD_84 ( VAR_426 , & VAR_427 ) == VAR_428 ) METHOD_85 ( VAR_429 , ""ImproperImageHeader"" ) ; VAR_430 -> VAR_431 = ( TYPE_63 ) VAR_432 . VAR_433 ; VAR_434 -> VAR_435 = VAR_436 . VAR_437 == 4 ? VAR_438 : VAR_439 ; VAR_440 -> VAR_441 . VAR_442 = ( TYPE_64 ) VAR_443 . VAR_444 ; VAR_445 -> VAR_446 . VAR_447 = ( TYPE_65 ) VAR_448 . VAR_449 ; VAR_450 -> VAR_451 = VAR_452 ; if ( VAR_453 -> VAR_454 != VAR_455 ) ( TYPE_66 ) METHOD_86 ( VAR_456 , VAR_457 , VAR_458 ) ; } if ( ( VAR_459 != 0x9a ) && ( VAR_460 != 0x9b ) ) { VAR_461 -> VAR_462 = 2 ; if ( ( VAR_463 & 0x8000 ) != 0 ) { ( TYPE_67 ) METHOD_87 ( VAR_464 ) ; VAR_465 = ( TYPE_68 ) METHOD_88 ( VAR_466 ) ; VAR_467 -> VAR_468 = 1UL * METHOD_89 ( VAR_469 ) + 1 ; } VAR_470 = METHOD_90 ( VAR_471 , VAR_472 -> VAR_473 , VAR_474 ) ; if ( VAR_475 == VAR_476 ) METHOD_91 ( VAR_477 , ""MemoryAllocationFailed"" ) ; if ( ( VAR_478 & 0x8000 ) != 0 ) { for ( VAR_479 = 0 ; VAR_480 < ( TYPE_69 ) VAR_481 -> VAR_482 ; VAR_483 ++ ) { VAR_484 = METHOD_92 ( VAR_485 ) % VAR_486 -> VAR_487 ; if ( ( VAR_488 & 0x8000 ) != 0 ) VAR_489 = ( TYPE_70 ) VAR_490 ; VAR_491 -> VAR_492 [ VAR_493 ] . VAR_494 = ( TYPE_71 ) METHOD_93 ( METHOD_94 ( VAR_495 ) ) ; VAR_496 -> VAR_497 [ VAR_498 ] . VAR_499 = ( TYPE_72 ) METHOD_95 ( METHOD_96 ( VAR_500 ) ) ; VAR_501 -> VAR_502 [ VAR_503 ] . VAR_504 = ( TYPE_73 ) METHOD_97 ( METHOD_98 ( VAR_505 ) ) ; } } else { for ( VAR_506 = 0 ; VAR_507 < ( TYPE_74 ) VAR_508 -> VAR_509 ; VAR_510 ++ ) { VAR_511 -> VAR_512 [ VAR_513 ] . VAR_514 = ( TYPE_75 ) ( VAR_515 - VAR_516 -> VAR_517 [ VAR_518 ] . VAR_519 ) ; VAR_520 -> VAR_521 [ VAR_522 ] . VAR_523 = ( TYPE_76 ) ( VAR_524 - VAR_525 -> VAR_526 [ VAR_527 ] . VAR_528 ) ; VAR_529 -> VAR_530 [ VAR_531 ] . VAR_532 = ( TYPE_77 ) ( VAR_533 - VAR_534 -> VAR_535 [ VAR_536 ] . VAR_537 ) ; } } } if ( METHOD_99 ( VAR_538 ) != VAR_539 ) METHOD_100 ( VAR_540 , ""InsufficientImageDataInFile"" ) ; if ( METHOD_101 ( VAR_541 , & VAR_542 ) == VAR_543 ) METHOD_102 ( VAR_544 , ""ImproperImageHeader"" ) ; if ( METHOD_103 ( VAR_545 , & VAR_546 ) == VAR_547 ) METHOD_104 ( VAR_548 , ""ImproperImageHeader"" ) ; ( TYPE_78 ) METHOD_105 ( VAR_549 ) ; if ( ( VAR_550 == 0x91 ) || ( VAR_551 == 0x99 ) || ( VAR_552 == 0x9b ) ) { VAR_553 = METHOD_106 ( VAR_554 ) ; for ( VAR_555 = 0 ; VAR_556 < ( TYPE_79 ) ( VAR_557 - 2 ) ; VAR_558 ++ ) if ( METHOD_107 ( VAR_559 ) == VAR_560 ) break ; } if ( ( VAR_561 != 0x9a ) && ( VAR_562 != 0x9b ) && ( VAR_563 & 0x8000 ) == 0 ) VAR_564 = METHOD_108 ( VAR_565 , VAR_566 , ( TYPE_80 ) VAR_567 , 1 , & VAR_568 ) ; else VAR_569 = METHOD_109 ( VAR_570 , VAR_571 , ( TYPE_81 ) VAR_572 , ( unsigned TYPE_82 ) VAR_573 . VAR_574 , & VAR_575 ) ; if ( VAR_576 == ( unsigned TYPE_83 * ) VAR_577 ) METHOD_110 ( VAR_578 , ""UnableToUncompressImage"" ) ; VAR_579 = VAR_580 ; for ( VAR_581 = 0 ; VAR_582 < ( TYPE_84 ) VAR_583 -> VAR_584 ; VAR_585 ++ ) { if ( VAR_586 > ( VAR_587 + VAR_588 + VAR_589 -> VAR_590 ) ) { VAR_591 = ( unsigned TYPE_85 * ) METHOD_111 ( VAR_592 ) ; METHOD_112 ( VAR_593 , ""NotEnoughPixelData"" ) ; } VAR_594 = METHOD_113 ( VAR_595 , 0 , VAR_596 , VAR_597 -> VAR_598 , 1 , VAR_599 ) ; if ( VAR_600 == ( TYPE_86 * ) VAR_601 ) break ; for ( VAR_602 = 0 ; VAR_603 < ( TYPE_87 ) VAR_604 -> VAR_605 ; VAR_606 ++ ) { if ( VAR_607 -> VAR_608 == VAR_609 ) { VAR_610 = ( TYPE_88 ) METHOD_114 ( VAR_611 , ( TYPE_89 ) * VAR_612 , VAR_613 ) ; METHOD_115 ( VAR_614 , VAR_615 , VAR_616 ) ; METHOD_116 ( VAR_617 , VAR_618 -> VAR_619 [ ( TYPE_90 ) VAR_620 ] . VAR_621 , VAR_622 ) ; METHOD_117 ( VAR_623 , VAR_624 -> VAR_625 [ ( TYPE_91 ) VAR_626 ] . VAR_627 , VAR_628 ) ; METHOD_118 ( VAR_629 , VAR_630 -> VAR_631 [ ( TYPE_92 ) VAR_632 ] . VAR_633 , VAR_634 ) ; } else { if ( VAR_635 . VAR_636 == 16 ) { VAR_637 = ( TYPE_93 ) ( * VAR_638 ++ ) ; VAR_639 = ( TYPE_94 ) ( * VAR_640 ) ; METHOD_119 ( VAR_641 , METHOD_120 ( ( unsigned TYPE_95 ) ( ( VAR_642 & 0x7c ) << 1 ) ) , VAR_643 ) ; METHOD_121 ( VAR_644 , METHOD_122 ( ( unsigned TYPE_96 ) ( ( ( VAR_645 & 0x03 ) << 6 ) | ( ( VAR_646 & 0xe0 ) >> 2 ) ) ) , VAR_647 ) ; METHOD_123 ( VAR_648 , METHOD_124 ( ( unsigned TYPE_97 ) ( ( VAR_649 & 0x1f ) << 3 ) ) , VAR_650 ) ; } else if ( VAR_651 -> VAR_652 == VAR_653 ) { if ( VAR_654 > ( VAR_655 + VAR_656 + 2 * VAR_657 -> VAR_658 ) ) METHOD_125 ( VAR_659 , ""NotEnoughPixelData"" ) ; METHOD_126 ( VAR_660 , METHOD_127 ( * VAR_661 ) , VAR_662 ) ; METHOD_128 ( VAR_663 , METHOD_129 ( * ( VAR_664 + VAR_665 -> VAR_666 ) ) , VAR_667 ) ; METHOD_130 ( VAR_668 , METHOD_131 ( * ( VAR_669 + 2 * VAR_670 -> VAR_671 ) ) , VAR_672 ) ; } else { if ( VAR_673 > ( VAR_674 + VAR_675 + 3 * VAR_676 -> VAR_677 ) ) METHOD_132 ( VAR_678 , ""NotEnoughPixelData"" ) ; METHOD_133 ( VAR_679 , METHOD_134 ( * VAR_680 ) , VAR_681 ) ; METHOD_135 ( VAR_682 , METHOD_136 ( * ( VAR_683 + VAR_684 -> VAR_685 ) ) , VAR_686 ) ; METHOD_137 ( VAR_687 , METHOD_138 ( * ( VAR_688 + 2 * VAR_689 -> VAR_690 ) ) , VAR_691 ) ; METHOD_139 ( VAR_692 , METHOD_140 ( * ( VAR_693 + 3 * VAR_694 -> VAR_695 ) ) , VAR_696 ) ; } } VAR_697 ++ ; VAR_698 += METHOD_141 ( VAR_699 ) ; } if ( METHOD_142 ( VAR_700 , VAR_701 ) == VAR_702 ) break ; if ( ( VAR_703 -> VAR_704 == VAR_705 ) && ( VAR_706 . VAR_707 != 16 ) ) { VAR_708 += ( VAR_709 . VAR_710 - 1 ) * VAR_711 -> VAR_712 ; if ( VAR_713 < VAR_714 ) break ; } VAR_715 = METHOD_143 ( VAR_716 , VAR_717 , ( TYPE_98 ) VAR_718 , VAR_719 -> VAR_720 ) ; if ( VAR_721 == VAR_722 ) break ; } VAR_723 = ( unsigned TYPE_99 * ) METHOD_144 ( VAR_724 ) ; if ( ( VAR_725 == VAR_726 ) && ( METHOD_145 ( VAR_727 ) == VAR_728 ) ) if ( ( VAR_729 == 0x9a ) || ( VAR_730 == 0x9b ) || ( ( VAR_731 & 0x8000 ) != 0 ) ) ( TYPE_100 ) METHOD_146 ( VAR_732 , VAR_733 , VAR_734 , VAR_735 , ( TYPE_101 ) VAR_736 . VAR_737 , ( TYPE_102 ) VAR_738 . VAR_739 , VAR_740 ) ; VAR_741 = METHOD_147 ( VAR_742 ) ; break ; } case 0xa1 : { unsigned TYPE_103 * VAR_743 ; TYPE_104 VAR_744 ; VAR_745 = METHOD_148 ( VAR_746 ) ; VAR_747 = METHOD_149 ( VAR_748 ) ; if ( VAR_749 == 0 ) break ; ( TYPE_105 ) METHOD_150 ( VAR_750 ) ; VAR_751 -= METHOD_151 ( VAR_752 , 4 ) ; if ( VAR_753 == 0 ) break ; VAR_754 = ( unsigned TYPE_106 * ) METHOD_152 ( VAR_755 , sizeof ( * VAR_756 ) ) ; if ( VAR_757 == ( unsigned TYPE_107 * ) VAR_758 ) break ; VAR_759 = METHOD_153 ( VAR_760 , VAR_761 , VAR_762 ) ; if ( VAR_763 != ( TYPE_108 ) VAR_764 ) { VAR_765 = ( unsigned TYPE_109 * ) METHOD_154 ( VAR_766 ) ; METHOD_155 ( VAR_767 , ""UnableToReadImageData"" ) ; } switch ( VAR_768 ) { case 0xe0 : { VAR_769 = METHOD_156 ( ( const TYPE_110 * ) VAR_770 , VAR_771 ) ; METHOD_157 ( VAR_772 , VAR_773 ) ; VAR_774 = METHOD_158 ( VAR_775 , ""icc"" , VAR_776 , VAR_777 ) ; VAR_778 = METHOD_159 ( VAR_779 ) ; if ( VAR_780 == VAR_781 ) { VAR_782 = ( unsigned TYPE_111 * ) METHOD_160 ( VAR_783 ) ; METHOD_161 ( VAR_784 , ""MemoryAllocationFailed"" ) ; } break ; } case 0x1f2 : { VAR_785 = METHOD_162 ( ( const TYPE_112 * ) VAR_786 , VAR_787 ) ; METHOD_163 ( VAR_788 , VAR_789 ) ; VAR_790 = METHOD_164 ( VAR_791 , ""iptc"" , VAR_792 , VAR_793 ) ; if ( VAR_794 == VAR_795 ) { VAR_796 = ( unsigned TYPE_113 * ) METHOD_165 ( VAR_797 ) ; METHOD_166 ( VAR_798 , ""MemoryAllocationFailed"" ) ; } VAR_799 = METHOD_167 ( VAR_800 ) ; break ; } default : break ; } VAR_801 = ( unsigned TYPE_114 * ) METHOD_168 ( VAR_802 ) ; break ; } default : { if ( VAR_803 [ VAR_804 ] . VAR_805 == - 1 ) ( TYPE_115 ) METHOD_169 ( VAR_806 ) ; else for ( VAR_807 = 0 ; VAR_808 < ( TYPE_116 ) VAR_809 [ VAR_810 ] . VAR_811 ; VAR_812 ++ ) if ( METHOD_170 ( VAR_813 ) == VAR_814 ) break ; } } } if ( VAR_815 == 0xc00 ) { for ( VAR_816 = 0 ; VAR_817 < 24 ; VAR_818 ++ ) if ( METHOD_171 ( VAR_819 ) == VAR_820 ) break ; continue ; } if ( ( ( VAR_821 >= 0xb0 ) && ( VAR_822 <= 0xcf ) ) || ( ( VAR_823 >= 0x8000 ) && ( VAR_824 <= 0x80ff ) ) ) continue ; if ( VAR_825 == 0x8200 ) { TYPE_117 VAR_826 [ VAR_827 ] ; TYPE_118 * VAR_828 ; TYPE_119 VAR_829 ; VAR_830 = VAR_831 ; VAR_832 = METHOD_172 ( VAR_833 ) ; METHOD_173 ( VAR_834 , ( TYPE_120 * ) VAR_835 , 0 ) ; VAR_836 = ( TYPE_121 * ) VAR_837 ; VAR_838 = METHOD_174 ( VAR_839 ) ; ( TYPE_122 ) METHOD_175 ( VAR_840 -> VAR_841 , VAR_842 , ""jpeg:%s"" , VAR_843 ) ; if ( VAR_844 != - 1 ) VAR_845 = METHOD_176 ( VAR_846 , ""wb"" ) ; if ( ( VAR_847 == - 1 ) || ( VAR_848 == ( TYPE_123 * ) VAR_849 ) ) { ( TYPE_124 ) METHOD_177 ( VAR_850 -> VAR_851 ) ; ( TYPE_125 ) METHOD_178 ( VAR_852 -> VAR_853 , VAR_854 -> VAR_855 , VAR_856 ) ; METHOD_179 ( VAR_857 , ""UnableToCreateTemporaryFile"" ) ; } VAR_858 = METHOD_180 ( VAR_859 ) ; if ( VAR_860 > 154 ) { for ( VAR_861 = 0 ; VAR_862 < 6 ; VAR_863 ++ ) ( TYPE_126 ) METHOD_181 ( VAR_864 ) ; if ( METHOD_182 ( VAR_865 , & VAR_866 ) == VAR_867 ) { ( TYPE_127 ) METHOD_183 ( VAR_868 ) ; ( TYPE_128 ) METHOD_184 ( VAR_869 -> VAR_870 ) ; METHOD_185 ( VAR_871 , ""ImproperImageHeader"" ) ; } for ( VAR_872 = 0 ; VAR_873 < 122 ; VAR_874 ++ ) if ( METHOD_186 ( VAR_875 ) == VAR_876 ) break ; for ( VAR_877 = 0 ; VAR_878 < ( TYPE_129 ) ( VAR_879 - 154 ) ; VAR_880 ++ ) { VAR_881 = METHOD_187 ( VAR_882 ) ; if ( VAR_883 == VAR_884 ) break ; if ( METHOD_188 ( VAR_885 , VAR_886 ) != VAR_887 ) break ; } } ( TYPE_130 ) METHOD_189 ( VAR_888 ) ; ( TYPE_131 ) METHOD_190 ( VAR_889 ) ; VAR_890 = METHOD_191 ( VAR_891 , VAR_892 ) ; ( TYPE_132 ) METHOD_192 ( VAR_893 ) ; VAR_894 = METHOD_193 ( VAR_895 ) ; if ( VAR_896 == ( TYPE_133 * ) VAR_897 ) continue ; ( TYPE_134 ) METHOD_194 ( VAR_898 , VAR_899 , ""%.20gx%.20g"" , ( TYPE_135 ) METHOD_195 ( VAR_900 -> VAR_901 , VAR_902 -> VAR_903 ) , ( TYPE_136 ) METHOD_196 ( VAR_904 -> VAR_905 , VAR_906 -> VAR_907 ) ) ; ( TYPE_137 ) METHOD_197 ( VAR_908 , METHOD_198 ( VAR_909 -> VAR_910 , VAR_911 -> VAR_912 ) , METHOD_199 ( VAR_913 -> VAR_914 , VAR_915 -> VAR_916 ) , VAR_917 ) ; ( TYPE_138 ) METHOD_200 ( VAR_918 , VAR_919 -> VAR_920 , VAR_921 ) ; ( TYPE_139 ) METHOD_201 ( VAR_922 , VAR_923 , VAR_924 , VAR_925 , ( TYPE_140 ) VAR_926 . VAR_927 , ( TYPE_141 ) VAR_928 . VAR_929 , VAR_930 ) ; VAR_931 -> VAR_932 = VAR_933 -> VAR_934 ; VAR_935 = METHOD_202 ( VAR_936 ) ; continue ; } if ( ( VAR_937 == 0xff ) || ( VAR_938 == 0xffff ) ) break ; if ( ( ( VAR_939 >= 0xd0 ) && ( VAR_940 <= 0xfe ) ) || ( ( VAR_941 >= 0x8100 ) && ( VAR_942 <= 0xffff ) ) ) { VAR_943 = METHOD_203 ( VAR_944 ) ; for ( VAR_945 = 0 ; VAR_946 < ( TYPE_142 ) VAR_947 ; VAR_948 ++ ) if ( METHOD_204 ( VAR_949 ) == VAR_950 ) break ; continue ; } if ( ( VAR_951 >= 0x100 ) && ( VAR_952 <= 0x7fff ) ) { VAR_953 = ( TYPE_143 ) ( ( VAR_954 >> 7 ) & 0xff ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , ""InsufficientImageDataInFile"" ) ; for ( VAR_955 = 0 ; VAR_956 < ( TYPE_144 ) VAR_957 ; VAR_958 ++ ) if ( METHOD_205 ( VAR_959 ) == VAR_960 ) break ; continue ; } } ( TYPE_145 ) METHOD_206 ( VAR_961 ) ; return ( METHOD_207 ( VAR_962 ) ) ; }",722
723,"TYPE_0  METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5  VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 ; if ( ! VAR_8 ) { METHOD_1 ( VAR_9 , ""fieldvalueisrequiredforAssign"" ) ; return VAR_10 ; } VAR_11 = ( TYPE_9 ) METHOD_2 ( VAR_12 , sizeof ( * VAR_13 ) ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 . METHOD_3 . VAR_21 = VAR_22 ; VAR_23 -> VAR_24 . METHOD_4 . VAR_25 = VAR_26 ;  VAR_27 -> VAR_28 = VAR_29 ;  VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; return VAR_39 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 ) { TYPE_8 VAR_7 ; if ( ! VAR_8 ) { METHOD_1 ( VAR_9 , ""fieldvalueisrequiredforAssign"" ) ; return VAR_10 ; } VAR_11 = ( TYPE_9 ) METHOD_2 ( VAR_12 , sizeof ( * VAR_13 ) ) ; if ( ! VAR_14 ) return VAR_15 ; VAR_16 -> VAR_17 = VAR_18 ; VAR_19 -> VAR_20 . METHOD_3 . VAR_21 = VAR_22 ; VAR_23 -> VAR_24 . METHOD_4 . VAR_25 = VAR_26 ; VAR_27 -> VAR_28 = VAR_29 ; VAR_30 -> VAR_31 = VAR_32 ; VAR_33 -> VAR_34 = VAR_35 ; VAR_36 -> VAR_37 = VAR_38 ; return VAR_39 ; }",723
724,"static TYPE_0 METHOD_0 ( enum VAR_0 VAR_1 , TYPE_1 VAR_2 ,  TYPE_2 VAR_3 , TYPE_3 VAR_4 ,  struct STRUCT_OR_UNION_0 * VAR_5 , struct STRUCT_OR_UNION_1 * VAR_6 ) { struct STRUCT_OR_UNION_2 * VAR_7 = & METHOD_1 ( STRUCT_OR_UNION_3 ) ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; METHOD_2 ( ) ; VAR_11 = METHOD_3 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( ! VAR_15 ) goto VAR_16 ; METHOD_4 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 ) { if ( METHOD_5 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 ) )  METHOD_6 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 , VAR_30 ) ;  } VAR_31 : METHOD_7 ( ) ; }","static TYPE_0 METHOD_0 ( enum VAR_0 VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 , TYPE_3 VAR_4 , struct STRUCT_OR_UNION_0 * VAR_5 , struct STRUCT_OR_UNION_1 * VAR_6 ) { struct STRUCT_OR_UNION_2 * VAR_7 = & METHOD_1 ( STRUCT_OR_UNION_3 ) ; struct STRUCT_OR_UNION_4 * VAR_8 ; struct STRUCT_OR_UNION_5 * VAR_9 ; struct STRUCT_OR_UNION_6 * VAR_10 ; METHOD_2 ( ) ; VAR_11 = METHOD_3 ( VAR_12 , VAR_13 , VAR_14 ) ; if ( ! VAR_15 ) goto VAR_16 ; METHOD_4 ( VAR_17 , VAR_18 , VAR_19 , VAR_20 ) { if ( METHOD_5 ( VAR_21 , VAR_22 , VAR_23 , VAR_24 , VAR_25 ) ) METHOD_6 ( VAR_26 , VAR_27 , VAR_29 , VAR_30 ) ; } VAR_31 : METHOD_7 ( ) ; }",724
725," TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) {  TYPE_3 VAR_3 = 0 ; TYPE_4 VAR_4 = 0 ; TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = 0 ; TYPE_7 VAR_7 = 0 ; TYPE_8 * VAR_8 = VAR_9 ;  if ( VAR_10 [ 0 ] >= 0x80 ) {  VAR_11 = * VAR_12 & 0xf0 ; VAR_13 = * VAR_14 ++ & 0x0f ;  VAR_15 ++ ;  } else { VAR_16 = VAR_17 & 0xf0 ; VAR_18 = VAR_19 & 0x0f ; } switch ( VAR_20 ) { case 0x80 : VAR_21 :  VAR_22 = * VAR_23 ++ ;  VAR_24 = * VAR_25 ++ ; METHOD_1 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; VAR_30 += 2 ; break ; case 0x90 : if ( VAR_31 [ 1 ] == 0 ) goto VAR_32 ;  VAR_33 = * VAR_34 ++ ;  VAR_35 = * VAR_36 ++ ; METHOD_2 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; VAR_41 += 2 ; break ; case 0xa0 :  VAR_42 = * VAR_43 ++ ;  VAR_44 = * VAR_45 ++ ; METHOD_3 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 += 2 ; break ; case 0xb0 :  VAR_51 = * VAR_52 ++ ;  VAR_53 = * VAR_54 ++ ; METHOD_4 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; VAR_59 += 2 ; break ; case 0xc0 : VAR_60 = * VAR_61 ++ ; METHOD_5 ( VAR_62 , VAR_63 , VAR_64 ) ; VAR_65 ++ ; break ; case 0xd0 : VAR_66 = * VAR_67 ++ ; METHOD_6 ( VAR_68 , VAR_69 , VAR_70 ) ; VAR_71 ++ ; break ; case 0xe0 :  VAR_72 = * VAR_73 ++ ;  VAR_74 = * VAR_75 ++ ; METHOD_7 ( VAR_76 , VAR_77 , ( ( VAR_78 << 7 ) | ( VAR_79 & 0x7f ) ) ) ; VAR_80 += 2 ; break ; case 0xf0 : if ( VAR_81 == 0x0f ) { TYPE_9 VAR_82 = 0 ; if ( ( VAR_83 [ 0 ] == 0x00 ) && ( VAR_84 [ 1 ] == 0x02 ) ) {  METHOD_8 ( VAR_85 , ( ( VAR_86 [ 2 ] << 8 ) + VAR_87 [ 3 ] ) ) ;  VAR_88 += 4 ; } else if ( VAR_89 [ 0 ] == 0x01 ) { VAR_90 ++ ; VAR_91 ++ ;  if ( * VAR_92 > 0x7f ) {   do {  VAR_93 = ( VAR_94 << 7 ) + ( * VAR_95 & 0x7f ) ; VAR_96 ++ ;  VAR_97 ++ ;  } while ( * VAR_98 > 0x7f ) ;  }  VAR_99 = ( VAR_100 << 7 ) + ( * VAR_101 & 0x7f ) ; VAR_102 ++ ; VAR_103 ++ ;  VAR_104 = METHOD_9 ( VAR_105 + 1 ) ;  METHOD_10 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 [ VAR_110 ] = '\\0' ; METHOD_11 ( VAR_111 , VAR_112 ) ; VAR_113 += VAR_114 ; } else if ( VAR_115 [ 0 ] == 0x02 ) { VAR_116 ++ ; VAR_117 ++ ;  if ( * VAR_118 > 0x7f ) {   do {  VAR_119 = ( VAR_120 << 7 ) + ( * VAR_121 & 0x7f ) ; VAR_122 ++ ;  VAR_123 ++ ;  } while ( * VAR_124 > 0x7f ) ;  }  VAR_125 = ( VAR_126 << 7 ) + ( * VAR_127 & 0x7f ) ; VAR_128 ++ ;  VAR_129 ++ ;  if ( VAR_130 -> VAR_131 . VAR_132 ) { VAR_133 -> VAR_134 . VAR_135 = METHOD_12 ( VAR_136 -> VAR_137 . VAR_138 , ( METHOD_13 ( VAR_139 -> VAR_140 . VAR_141 ) + 1 + VAR_142 + 1 ) ) ; METHOD_14 ( & VAR_143 -> VAR_144 . VAR_145 [ METHOD_15 ( VAR_146 -> VAR_147 . VAR_148 ) + 1 ] , VAR_149 , VAR_150 ) ; VAR_151 -> VAR_152 . VAR_153 [ METHOD_16 ( VAR_154 -> VAR_155 . VAR_156 ) + 1 + VAR_157 ] = '\\0' ; VAR_158 -> VAR_159 . VAR_160 [ METHOD_17 ( VAR_161 -> VAR_162 . VAR_163 ) ] = '\\n' ; } else { VAR_164 -> VAR_165 . VAR_166 = METHOD_18 ( VAR_167 + 1 ) ; METHOD_19 ( VAR_168 -> VAR_169 . VAR_170 , VAR_171 , VAR_172 ) ; VAR_173 -> VAR_174 . VAR_175 [ VAR_176 ] = '\\0' ; } VAR_177 = METHOD_20 ( VAR_178 + 1 ) ; METHOD_21 ( VAR_179 , VAR_180 , VAR_181 ) ; VAR_182 [ VAR_183 ] = '\\0' ; METHOD_22 ( VAR_184 , VAR_185 ) ; VAR_186 += VAR_187 ; } else if ( VAR_188 [ 0 ] == 0x03 ) { VAR_189 ++ ; VAR_190 ++ ;  if ( * VAR_191 > 0x7f ) {   do {  VAR_192 = ( VAR_193 << 7 ) + ( * VAR_194 & 0x7f ) ; VAR_195 ++ ;  VAR_196 ++ ;  } while ( * VAR_197 > 0x7f ) ;  }  VAR_198 = ( VAR_199 << 7 ) + ( * VAR_200 & 0x7f ) ; VAR_201 ++ ; VAR_202 ++ ;  VAR_203 = METHOD_23 ( VAR_204 + 1 ) ;  METHOD_24 ( VAR_205 , VAR_206 , VAR_207 ) ; VAR_208 [ VAR_209 ] = '\\0' ; METHOD_25 ( VAR_210 , VAR_211 ) ; VAR_212 += VAR_213 ; } else if ( VAR_214 [ 0 ] == 0x04 ) { VAR_215 ++ ; VAR_216 ++ ;  if ( * VAR_217 > 0x7f ) {   do {  VAR_218 = ( VAR_219 << 7 ) + ( * VAR_220 & 0x7f ) ; VAR_221 ++ ;  VAR_222 ++ ;  } while ( * VAR_223 > 0x7f ) ;  }  VAR_224 = ( VAR_225 << 7 ) + ( * VAR_226 & 0x7f ) ; VAR_227 ++ ; VAR_228 ++ ;  VAR_229 = METHOD_26 ( VAR_230 + 1 ) ;  METHOD_27 ( VAR_231 , VAR_232 , VAR_233 ) ; VAR_234 [ VAR_235 ] = '\\0' ; METHOD_28 ( VAR_236 , VAR_237 ) ; VAR_238 += VAR_239 ; } else if ( VAR_240 [ 0 ] == 0x05 ) { VAR_241 ++ ; VAR_242 ++ ;  if ( * VAR_243 > 0x7f ) {   do {  VAR_244 = ( VAR_245 << 7 ) + ( * VAR_246 & 0x7f ) ; VAR_247 ++ ;  VAR_248 ++ ;  } while ( * VAR_249 > 0x7f ) ;  }  VAR_250 = ( VAR_251 << 7 ) + ( * VAR_252 & 0x7f ) ; VAR_253 ++ ; VAR_254 ++ ;  VAR_255 = METHOD_29 ( VAR_256 + 1 ) ;  METHOD_30 ( VAR_257 , VAR_258 , VAR_259 ) ; VAR_260 [ VAR_261 ] = '\\0' ; METHOD_31 ( VAR_262 , VAR_263 ) ; VAR_264 += VAR_265 ; } else if ( VAR_266 [ 0 ] == 0x06 ) { VAR_267 ++ ; VAR_268 ++ ;  if ( * VAR_269 > 0x7f ) {   do {  VAR_270 = ( VAR_271 << 7 ) + ( * VAR_272 & 0x7f ) ; VAR_273 ++ ;  VAR_274 ++ ;  } while ( * VAR_275 > 0x7f ) ;  }  VAR_276 = ( VAR_277 << 7 ) + ( * VAR_278 & 0x7f ) ; VAR_279 ++ ; VAR_280 ++ ;  VAR_281 = METHOD_32 ( VAR_282 + 1 ) ;  METHOD_33 ( VAR_283 , VAR_284 , VAR_285 ) ; VAR_286 [ VAR_287 ] = '\\0' ; METHOD_34 ( VAR_288 , VAR_289 ) ; VAR_290 += VAR_291 ; } else if ( VAR_292 [ 0 ] == 0x07 ) { VAR_293 ++ ; VAR_294 ++ ;  if ( * VAR_295 > 0x7f ) {   do {  VAR_296 = ( VAR_297 << 7 ) + ( * VAR_298 & 0x7f ) ; VAR_299 ++ ;  VAR_300 ++ ;  } while ( * VAR_301 > 0x7f ) ;  }  VAR_302 = ( VAR_303 << 7 ) + ( * VAR_304 & 0x7f ) ; VAR_305 ++ ; VAR_306 ++ ;  VAR_307 = METHOD_35 ( VAR_308 + 1 ) ;  METHOD_36 ( VAR_309 , VAR_310 , VAR_311 ) ; VAR_312 [ VAR_313 ] = '\\0' ; METHOD_37 ( VAR_314 , VAR_315 ) ; VAR_316 += VAR_317 ;  } else if ( ( VAR_318 [ 0 ] == 0x20 ) && ( VAR_319 [ 1 ] == 0x01 ) ) {  METHOD_38 ( VAR_320 , VAR_321 [ 2 ] ) ; VAR_322 += 3 ; } else if ( ( VAR_323 [ 0 ] == 0x21 ) && ( VAR_324 [ 1 ] == 0x01 ) ) {  METHOD_39 ( VAR_325 , VAR_326 [ 2 ] ) ;  VAR_327 += 3 ; } else if ( ( VAR_328 [ 0 ] == 0x2F ) && ( VAR_329 [ 1 ] == 0x00 ) ) {  METHOD_40 ( VAR_330 ) ;  VAR_331 += 2 ; } else if ( ( VAR_332 [ 0 ] == 0x51 ) && ( VAR_333 [ 1 ] == 0x03 ) ) {  METHOD_41 ( VAR_334 , ( ( VAR_335 [ 2 ] << 16 ) + ( VAR_336 [ 3 ] << 8 ) + VAR_337 [ 4 ] ) ) ;  VAR_338 += 5 ;  } else if ( ( VAR_339 [ 0 ] == 0x54 ) && ( VAR_340 [ 1 ] == 0x05 ) ) {  METHOD_42 ( VAR_341 , ( ( VAR_342 [ 3 ] << 24 ) + ( VAR_343 [ 4 ] << 16 ) + ( VAR_344 [ 5 ] << 8 ) + VAR_345 [ 6 ] ) ) ; VAR_346 -> VAR_347 [ VAR_348 -> VAR_349 - 1 ] . VAR_350 . VAR_351 = VAR_352 [ 2 ] ; VAR_353 += 7 ; } else if ( ( VAR_354 [ 0 ] == 0x58 ) && ( VAR_355 [ 1 ] == 0x04 ) ) {  METHOD_43 ( VAR_356 , ( ( VAR_357 [ 2 ] << 24 ) + ( VAR_358 [ 3 ] << 16 ) + ( VAR_359 [ 4 ] << 8 ) + VAR_360 [ 5 ] ) ) ;  VAR_361 += 6 ; } else if ( ( VAR_362 [ 0 ] == 0x59 ) && ( VAR_363 [ 1 ] == 0x02 ) ) {  METHOD_44 ( VAR_364 , ( ( VAR_365 [ 2 ] << 8 ) + VAR_366 [ 3 ] ) ) ;  VAR_367 += 4 ; } else { VAR_368 ++ ; VAR_369 ++ ;  if ( * VAR_370 > 0x7f ) {   do {  VAR_371 = ( VAR_372 << 7 ) + ( * VAR_373 & 0x7f ) ; VAR_374 ++ ;  VAR_375 ++ ;  } while ( * VAR_376 > 0x7f ) ;  }  VAR_377 = ( VAR_378 << 7 ) + ( * VAR_379 & 0x7f ) ; VAR_380 ++ ; VAR_381 += VAR_382 ;  }  } else if ( ( VAR_383 == 0 ) || ( VAR_384 == 7 ) ) { TYPE_10 VAR_385 = 0 ; TYPE_11 * VAR_386 = VAR_387 ; if ( * VAR_388 > 0x7f ) {  do {  VAR_389 = ( VAR_390 << 7 ) + ( * VAR_391 & 0x7F ) ; VAR_392 ++ ;  VAR_393 ++ ;  } while ( * VAR_394 > 0x7f ) ;  }  VAR_395 = ( VAR_396 << 7 ) + ( * VAR_397 & 0x7F ) ; VAR_398 ++ ;  if ( ! VAR_399 ) break ;  VAR_400 ++ ; VAR_401 = METHOD_45 ( sizeof ( TYPE_12 ) * VAR_402 ) ; METHOD_46 ( VAR_403 , VAR_404 , VAR_405 ) ; if ( VAR_406 [ VAR_407 - 1 ] == 0xF7 ) { TYPE_13 VAR_408 [ ] = { 0x41 , 0x10 , 0x42 , 0x12 } ; if ( METHOD_47 ( VAR_409 , VAR_410 , 4 ) == 0 ) { TYPE_14 VAR_411 = 0 ; TYPE_15 VAR_412 = 4 ; do { VAR_413 += VAR_414 [ VAR_415 ] ; if ( VAR_416 > 0x7F ) { VAR_417 -= 0x80 ; } VAR_418 ++ ; } while ( VAR_419 [ VAR_420 + 1 ] != 0xf7 ) ; VAR_421 = 128 - VAR_422 ; if ( VAR_423 == VAR_424 [ VAR_425 ] ) { if ( VAR_426 [ 4 ] == 0x40 ) { if ( ( ( VAR_427 [ 5 ] & 0xf0 ) == 0x10 ) && ( VAR_428 [ 6 ] == 0x15 ) ) { TYPE_16 VAR_429 = 0x0f & VAR_430 [ 5 ] ; if ( VAR_431 == 0x00 ) { VAR_432 = 0x09 ; } else if ( VAR_433 <= 0x09 ) { VAR_434 -= 1 ; } METHOD_48 ( VAR_435 , VAR_436 , VAR_437 [ 7 ] ) ; } else if ( ( VAR_438 [ 5 ] == 0x00 ) && ( VAR_439 [ 6 ] == 0x7F ) && ( VAR_440 [ 7 ] == 0x00 ) ) { METHOD_49 ( VAR_441 ) ; } } } } else { TYPE_17 VAR_442 [ ] = { 0x7e , 0x7f , 0x09 , 0x01 , 0xf7 } ; TYPE_18 VAR_443 [ ] = { 0x43 , 0x10 , 0x4c , 0x00 , 0x00 , 0x7e , 0x00 , 0xf7 } ; if ( METHOD_50 ( VAR_444 , VAR_445 , 5 ) == 0 ) { METHOD_51 ( VAR_446 ) ; } else if ( METHOD_52 ( VAR_447 , VAR_448 , 8 ) == 0 ) { METHOD_53 ( VAR_449 ) ; } } } METHOD_54 ( VAR_450 ) ; VAR_451 = VAR_452 ; VAR_453 += VAR_454 ; } else { METHOD_55 ( VAR_455 , VAR_456 , VAR_457 , ""(unrecognizedmetatypeevent)"" , 0 ) ; return 0 ; } break ; default : VAR_458 = 0 ; break ; } if ( VAR_459 == 0 ) METHOD_56 ( VAR_460 , VAR_461 , VAR_462 , ""(missingevent)"" , 0 ) ; return VAR_463 ;  } ","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = 0 ; TYPE_4 VAR_4 = 0 ; TYPE_5 VAR_5 = 0 ; TYPE_6 VAR_6 = 0 ; TYPE_7 VAR_7 = 0 ; TYPE_8 * VAR_8 = VAR_9 ; if ( ! VAR_464 ) goto VAR_465 ; if ( VAR_10 [ 0 ] >= 0x80 ) { VAR_11 = * VAR_12 & 0xf0 ; VAR_13 = * VAR_14 ++ & 0x0f ; VAR_15 ++ ; } else { VAR_16 = VAR_17 & 0xf0 ; VAR_18 = VAR_19 & 0x0f ; } switch ( VAR_20 ) { case 0x80 : VAR_21 : VAR_22 = * VAR_23 ++ ; VAR_24 = * VAR_25 ++ ; METHOD_1 ( VAR_26 , VAR_27 , VAR_28 , VAR_29 ) ; VAR_30 += 2 ; break ; case 0x90 : if ( VAR_31 [ 1 ] == 0 ) goto VAR_32 ; if ( VAR_464 < 2 ) goto VAR_465 ; VAR_33 = * VAR_34 ++ ; VAR_35 = * VAR_36 ++ ; METHOD_2 ( VAR_37 , VAR_38 , VAR_39 , VAR_40 ) ; VAR_41 += 2 ; break ; case 0xa0 : if ( VAR_464 < 2 ) goto VAR_465 ; VAR_42 = * VAR_43 ++ ; VAR_44 = * VAR_45 ++ ; METHOD_3 ( VAR_46 , VAR_47 , VAR_48 , VAR_49 ) ; VAR_50 += 2 ; break ; case 0xb0 : if ( VAR_464 < 2 ) goto VAR_465 ; VAR_51 = * VAR_52 ++ ; VAR_53 = * VAR_54 ++ ; METHOD_4 ( VAR_55 , VAR_56 , VAR_57 , VAR_58 ) ; VAR_59 += 2 ; break ; case 0xc0 : VAR_60 = * VAR_61 ++ ; METHOD_5 ( VAR_62 , VAR_63 , VAR_64 ) ; VAR_65 ++ ; break ; case 0xd0 : VAR_66 = * VAR_67 ++ ; METHOD_6 ( VAR_68 , VAR_69 , VAR_70 ) ; VAR_71 ++ ; break ; case 0xe0 : if ( VAR_464 < 2 ) goto VAR_465 ; VAR_72 = * VAR_73 ++ ; VAR_74 = * VAR_75 ++ ; METHOD_7 ( VAR_76 , VAR_77 , ( ( VAR_78 << 7 ) | ( VAR_79 & 0x7f ) ) ) ; VAR_80 += 2 ; break ; case 0xf0 : if ( VAR_81 == 0x0f ) { TYPE_9 VAR_82 = 0 ; if ( ( VAR_83 [ 0 ] == 0x00 ) && ( VAR_84 [ 1 ] == 0x02 ) ) { if ( VAR_464 < 4 ) goto VAR_465 ; METHOD_8 ( VAR_85 , ( ( VAR_86 [ 2 ] << 8 ) + VAR_87 [ 3 ] ) ) ; VAR_88 += 4 ; } else if ( VAR_89 [ 0 ] == 0x01 ) { VAR_90 ++ ; VAR_91 ++ ; if ( -- VAR_464 && * VAR_92 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_93 = ( VAR_94 << 7 ) + ( * VAR_95 & 0x7f ) ; VAR_96 ++ ; VAR_97 ++ ; } while ( * VAR_98 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_99 = ( VAR_100 << 7 ) + ( * VAR_101 & 0x7f ) ; VAR_102 ++ ; VAR_103 ++ ; VAR_104 = METHOD_9 ( VAR_105 + 1 ) ; METHOD_10 ( VAR_106 , VAR_107 , VAR_108 ) ; VAR_109 [ VAR_110 ] = '\\0' ; METHOD_11 ( VAR_111 , VAR_112 ) ; VAR_113 += VAR_114 ; } else if ( VAR_115 [ 0 ] == 0x02 ) { VAR_116 ++ ; VAR_117 ++ ; if ( -- VAR_464 && * VAR_118 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_119 = ( VAR_120 << 7 ) + ( * VAR_121 & 0x7f ) ; VAR_122 ++ ; VAR_123 ++ ; } while ( * VAR_124 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_125 = ( VAR_126 << 7 ) + ( * VAR_127 & 0x7f ) ; VAR_128 ++ ; VAR_129 ++ ; if ( -- VAR_464 && VAR_130 -> VAR_131 . VAR_132 ) { VAR_133 -> VAR_134 . VAR_135 = METHOD_12 ( VAR_136 -> VAR_137 . VAR_138 , ( METHOD_13 ( VAR_139 -> VAR_140 . VAR_141 ) + 1 + VAR_142 + 1 ) ) ; METHOD_14 ( & VAR_143 -> VAR_144 . VAR_145 [ METHOD_15 ( VAR_146 -> VAR_147 . VAR_148 ) + 1 ] , VAR_149 , VAR_150 ) ; VAR_151 -> VAR_152 . VAR_153 [ METHOD_16 ( VAR_154 -> VAR_155 . VAR_156 ) + 1 + VAR_157 ] = '\\0' ; VAR_158 -> VAR_159 . VAR_160 [ METHOD_17 ( VAR_161 -> VAR_162 . VAR_163 ) ] = '\\n' ; } else { VAR_164 -> VAR_165 . VAR_166 = METHOD_18 ( VAR_167 + 1 ) ; METHOD_19 ( VAR_168 -> VAR_169 . VAR_170 , VAR_171 , VAR_172 ) ; VAR_173 -> VAR_174 . VAR_175 [ VAR_176 ] = '\\0' ; } VAR_177 = METHOD_20 ( VAR_178 + 1 ) ; METHOD_21 ( VAR_179 , VAR_180 , VAR_181 ) ; VAR_182 [ VAR_183 ] = '\\0' ; METHOD_22 ( VAR_184 , VAR_185 ) ; VAR_186 += VAR_187 ; } else if ( VAR_188 [ 0 ] == 0x03 ) { VAR_189 ++ ; VAR_190 ++ ; if ( * VAR_191 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_192 = ( VAR_193 << 7 ) + ( * VAR_194 & 0x7f ) ; VAR_195 ++ ; VAR_196 ++ ; } while ( * VAR_197 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_198 = ( VAR_199 << 7 ) + ( * VAR_200 & 0x7f ) ; VAR_201 ++ ; VAR_202 ++ ; VAR_203 = METHOD_23 ( VAR_204 + 1 ) ; METHOD_24 ( VAR_205 , VAR_206 , VAR_207 ) ; VAR_208 [ VAR_209 ] = '\\0' ; METHOD_25 ( VAR_210 , VAR_211 ) ; VAR_212 += VAR_213 ; } else if ( VAR_214 [ 0 ] == 0x04 ) { VAR_215 ++ ; VAR_216 ++ ; if ( -- VAR_464 && * VAR_217 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_218 = ( VAR_219 << 7 ) + ( * VAR_220 & 0x7f ) ; VAR_221 ++ ; VAR_222 ++ ; } while ( * VAR_223 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_224 = ( VAR_225 << 7 ) + ( * VAR_226 & 0x7f ) ; VAR_227 ++ ; VAR_228 ++ ; VAR_229 = METHOD_26 ( VAR_230 + 1 ) ; METHOD_27 ( VAR_231 , VAR_232 , VAR_233 ) ; VAR_234 [ VAR_235 ] = '\\0' ; METHOD_28 ( VAR_236 , VAR_237 ) ; VAR_238 += VAR_239 ; } else if ( VAR_240 [ 0 ] == 0x05 ) { VAR_241 ++ ; VAR_242 ++ ; if ( -- VAR_464 && * VAR_243 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_244 = ( VAR_245 << 7 ) + ( * VAR_246 & 0x7f ) ; VAR_247 ++ ; VAR_248 ++ ; } while ( * VAR_249 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_250 = ( VAR_251 << 7 ) + ( * VAR_252 & 0x7f ) ; VAR_253 ++ ; VAR_254 ++ ; VAR_255 = METHOD_29 ( VAR_256 + 1 ) ; METHOD_30 ( VAR_257 , VAR_258 , VAR_259 ) ; VAR_260 [ VAR_261 ] = '\\0' ; METHOD_31 ( VAR_262 , VAR_263 ) ; VAR_264 += VAR_265 ; } else if ( VAR_266 [ 0 ] == 0x06 ) { VAR_267 ++ ; VAR_268 ++ ; if ( -- VAR_464 && * VAR_269 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_270 = ( VAR_271 << 7 ) + ( * VAR_272 & 0x7f ) ; VAR_273 ++ ; VAR_274 ++ ; } while ( * VAR_275 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_276 = ( VAR_277 << 7 ) + ( * VAR_278 & 0x7f ) ; VAR_279 ++ ; VAR_280 ++ ; VAR_281 = METHOD_32 ( VAR_282 + 1 ) ; METHOD_33 ( VAR_283 , VAR_284 , VAR_285 ) ; VAR_286 [ VAR_287 ] = '\\0' ; METHOD_34 ( VAR_288 , VAR_289 ) ; VAR_290 += VAR_291 ; } else if ( VAR_292 [ 0 ] == 0x07 ) { VAR_293 ++ ; VAR_294 ++ ; if ( -- VAR_464 && * VAR_295 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_296 = ( VAR_297 << 7 ) + ( * VAR_298 & 0x7f ) ; VAR_299 ++ ; VAR_300 ++ ; } while ( * VAR_301 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_302 = ( VAR_303 << 7 ) + ( * VAR_304 & 0x7f ) ; VAR_305 ++ ; VAR_306 ++ ; VAR_307 = METHOD_35 ( VAR_308 + 1 ) ; METHOD_36 ( VAR_309 , VAR_310 , VAR_311 ) ; VAR_312 [ VAR_313 ] = '\\0' ; METHOD_37 ( VAR_314 , VAR_315 ) ; VAR_316 += VAR_317 ; } else if ( ( VAR_318 [ 0 ] == 0x20 ) && ( VAR_319 [ 1 ] == 0x01 ) ) { if ( VAR_464 < 3 ) goto VAR_465 ; METHOD_38 ( VAR_320 , VAR_321 [ 2 ] ) ; VAR_322 += 3 ; } else if ( ( VAR_323 [ 0 ] == 0x21 ) && ( VAR_324 [ 1 ] == 0x01 ) ) { if ( VAR_464 < 3 ) goto VAR_465 ; METHOD_39 ( VAR_325 , VAR_326 [ 2 ] ) ; VAR_327 += 3 ; } else if ( ( VAR_328 [ 0 ] == 0x2F ) && ( VAR_329 [ 1 ] == 0x00 ) ) { if ( VAR_464 < 2 ) goto VAR_465 ; METHOD_40 ( VAR_330 ) ; VAR_331 += 2 ; } else if ( ( VAR_332 [ 0 ] == 0x51 ) && ( VAR_333 [ 1 ] == 0x03 ) ) { if ( VAR_464 < 5 ) goto VAR_465 ; METHOD_41 ( VAR_334 , ( ( VAR_335 [ 2 ] << 16 ) + ( VAR_336 [ 3 ] << 8 ) + VAR_337 [ 4 ] ) ) ; VAR_338 += 5 ; } else if ( ( VAR_339 [ 0 ] == 0x54 ) && ( VAR_340 [ 1 ] == 0x05 ) ) { if ( VAR_464 < 7 ) goto VAR_465 ; METHOD_42 ( VAR_341 , ( ( VAR_342 [ 3 ] << 24 ) + ( VAR_343 [ 4 ] << 16 ) + ( VAR_344 [ 5 ] << 8 ) + VAR_345 [ 6 ] ) ) ; VAR_346 -> VAR_347 [ VAR_348 -> VAR_349 - 1 ] . VAR_350 . VAR_351 = VAR_352 [ 2 ] ; VAR_353 += 7 ; } else if ( ( VAR_354 [ 0 ] == 0x58 ) && ( VAR_355 [ 1 ] == 0x04 ) ) { if ( VAR_464 < 6 ) goto VAR_465 ; METHOD_43 ( VAR_356 , ( ( VAR_357 [ 2 ] << 24 ) + ( VAR_358 [ 3 ] << 16 ) + ( VAR_359 [ 4 ] << 8 ) + VAR_360 [ 5 ] ) ) ; VAR_361 += 6 ; } else if ( ( VAR_362 [ 0 ] == 0x59 ) && ( VAR_363 [ 1 ] == 0x02 ) ) { if ( VAR_464 < 4 ) goto VAR_465 ; METHOD_44 ( VAR_364 , ( ( VAR_365 [ 2 ] << 8 ) + VAR_366 [ 3 ] ) ) ; VAR_367 += 4 ; } else { VAR_368 ++ ; VAR_369 ++ ; if ( -- VAR_464 && * VAR_370 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_371 = ( VAR_372 << 7 ) + ( * VAR_373 & 0x7f ) ; VAR_374 ++ ; VAR_375 ++ ; } while ( * VAR_376 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_377 = ( VAR_378 << 7 ) + ( * VAR_379 & 0x7f ) ; VAR_380 ++ ; VAR_381 += VAR_382 ; if ( -- VAR_464 < VAR_382 ) goto VAR_465 ; } } else if ( ( VAR_383 == 0 ) || ( VAR_384 == 7 ) ) { TYPE_10 VAR_385 = 0 ; TYPE_11 * VAR_386 = VAR_387 ; if ( * VAR_388 > 0x7f ) { do { if ( ! VAR_464 ) break ; VAR_389 = ( VAR_390 << 7 ) + ( * VAR_391 & 0x7F ) ; VAR_392 ++ ; VAR_393 ++ ; } while ( * VAR_394 > 0x7f ) ; } if ( ! VAR_464 ) goto VAR_465 ; VAR_395 = ( VAR_396 << 7 ) + ( * VAR_397 & 0x7F ) ; VAR_398 ++ ; if ( ! VAR_399 ) break ; VAR_400 ++ ; VAR_401 = METHOD_45 ( sizeof ( TYPE_12 ) * VAR_402 ) ; METHOD_46 ( VAR_403 , VAR_404 , VAR_405 ) ; if ( VAR_406 [ VAR_407 - 1 ] == 0xF7 ) { TYPE_13 VAR_408 [ ] = { 0x41 , 0x10 , 0x42 , 0x12 } ; if ( METHOD_47 ( VAR_409 , VAR_410 , 4 ) == 0 ) { TYPE_14 VAR_411 = 0 ; TYPE_15 VAR_412 = 4 ; do { VAR_413 += VAR_414 [ VAR_415 ] ; if ( VAR_416 > 0x7F ) { VAR_417 -= 0x80 ; } VAR_418 ++ ; } while ( VAR_419 [ VAR_420 + 1 ] != 0xf7 ) ; VAR_421 = 128 - VAR_422 ; if ( VAR_423 == VAR_424 [ VAR_425 ] ) { if ( VAR_426 [ 4 ] == 0x40 ) { if ( ( ( VAR_427 [ 5 ] & 0xf0 ) == 0x10 ) && ( VAR_428 [ 6 ] == 0x15 ) ) { TYPE_16 VAR_429 = 0x0f & VAR_430 [ 5 ] ; if ( VAR_431 == 0x00 ) { VAR_432 = 0x09 ; } else if ( VAR_433 <= 0x09 ) { VAR_434 -= 1 ; } METHOD_48 ( VAR_435 , VAR_436 , VAR_437 [ 7 ] ) ; } else if ( ( VAR_438 [ 5 ] == 0x00 ) && ( VAR_439 [ 6 ] == 0x7F ) && ( VAR_440 [ 7 ] == 0x00 ) ) { METHOD_49 ( VAR_441 ) ; } } } } else { TYPE_17 VAR_442 [ ] = { 0x7e , 0x7f , 0x09 , 0x01 , 0xf7 } ; TYPE_18 VAR_443 [ ] = { 0x43 , 0x10 , 0x4c , 0x00 , 0x00 , 0x7e , 0x00 , 0xf7 } ; if ( METHOD_50 ( VAR_444 , VAR_445 , 5 ) == 0 ) { METHOD_51 ( VAR_446 ) ; } else if ( METHOD_52 ( VAR_447 , VAR_448 , 8 ) == 0 ) { METHOD_53 ( VAR_449 ) ; } } } METHOD_54 ( VAR_450 ) ; VAR_451 = VAR_452 ; VAR_453 += VAR_454 ; } else { METHOD_55 ( VAR_455 , VAR_456 , VAR_457 , ""(unrecognizedmetatypeevent)"" , 0 ) ; return 0 ; } break ; default : VAR_458 = 0 ; break ; } if ( VAR_459 == 0 ) METHOD_56 ( VAR_460 , VAR_461 , VAR_462 , ""(missingevent)"" , 0 ) ; return VAR_463 ; VAR_465 : METHOD_56 ( VAR_460 , VAR_461 , VAR_462 , ""(inputtooshort)"" , 0 ) ; return 0 ; }",725
726,"TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) { VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; unsigned TYPE_5 VAR_6 ; TYPE_6 * VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; unsigned TYPE_7 * VAR_12 ; VAR_13 * VAR_14 , * VAR_15 ; TYPE_8 VAR_16 [ 50 ] ; TYPE_9 VAR_17 ; if ( VAR_18 != 3 ) { METHOD_1 ( ""Usage:%smj2filenameoutput_location\\n"" , VAR_19 [ 0 ] ) ; METHOD_2 ( ""Example:%sforeman.mj2output/foreman\\n"" , VAR_20 [ 0 ] ) ; return 1 ; } VAR_21 = METHOD_3 ( VAR_22 [ 1 ] , ""rb"" ) ; if ( ! VAR_23 ) { METHOD_4 ( VAR_24 , ""failedtoopen%sforreading\\n"" , VAR_25 [ 1 ] ) ; return 1 ; } METHOD_5 ( & VAR_26 , 0 , sizeof ( TYPE_10 ) ) ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = VAR_32 ; VAR_33 . VAR_34 = VAR_35 ; VAR_36 = METHOD_6 ( ) ; METHOD_7 ( ( TYPE_11 ) VAR_37 , & VAR_38 , VAR_39 ) ; METHOD_8 ( & VAR_40 , 0 , sizeof ( TYPE_12 ) ) ; VAR_41 = ( TYPE_13 * ) VAR_42 -> VAR_43 ; METHOD_9 ( VAR_44 , & VAR_45 ) ; if ( METHOD_10 ( VAR_46 , VAR_47 ) ) { return 1 ; } VAR_48 = 0 ; while ( VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 != 0 ) { VAR_53 ++ ; } VAR_54 = & VAR_55 -> VAR_56 [ VAR_57 ] ; METHOD_11 ( VAR_58 , ""Extracting%dframesfromfile...\\n"" , VAR_59 -> VAR_60 ) ; for ( VAR_61 = 0 ; VAR_62 < VAR_63 -> VAR_64 ; VAR_65 ++ ) { VAR_66 = & VAR_67 -> VAR_68 [ VAR_69 ] ; VAR_70 = ( unsigned TYPE_14 * ) METHOD_12 ( VAR_71 -> VAR_72 - 8 ) ; METHOD_13 ( VAR_73 , VAR_74 -> VAR_75 + 8 , VAR_76 ) ; METHOD_14 ( VAR_77 , VAR_78 -> VAR_79 - 8 , 1 , VAR_80 ) ;  METHOD_15 ( VAR_81 , ""%s_%05d.j2k"" , VAR_82 [ 2 ] , VAR_83 ) ;  VAR_84 = METHOD_16 ( VAR_85 , ""wb"" ) ; if ( ! VAR_86 ) { METHOD_17 ( VAR_87 , ""failedtoopen%sforwriting\\n"" , VAR_88 ) ; return 1 ; } METHOD_18 ( VAR_89 , VAR_90 -> VAR_91 - 8 , 1 , VAR_92 ) ; METHOD_19 ( VAR_93 ) ; METHOD_20 ( VAR_94 ) ; } METHOD_21 ( VAR_95 ) ; METHOD_22 ( VAR_96 , ""%dframescorrectlyextracted\\n"" , VAR_97 ) ; if ( VAR_98 ) { METHOD_23 ( ( TYPE_15 * ) VAR_99 -> VAR_100 ) ; } return 0 ; }","TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , TYPE_2 * VAR_1 [ ] ) { VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; TYPE_4 VAR_5 ; unsigned TYPE_5 VAR_6 ; TYPE_6 * VAR_7 ; VAR_8 * VAR_9 ; VAR_10 * VAR_11 ; unsigned TYPE_7 * VAR_12 ; VAR_13 * VAR_14 , * VAR_15 ; TYPE_8 VAR_16 [ 50 ] ; TYPE_9 VAR_17 ; if ( VAR_18 != 3 ) { METHOD_1 ( ""Usage:%smj2filenameoutput_location\\n"" , VAR_19 [ 0 ] ) ; METHOD_2 ( ""Example:%sforeman.mj2output/foreman\\n"" , VAR_20 [ 0 ] ) ; return 1 ; } VAR_21 = METHOD_3 ( VAR_22 [ 1 ] , ""rb"" ) ; if ( ! VAR_23 ) { METHOD_4 ( VAR_24 , ""failedtoopen%sforreading\\n"" , VAR_25 [ 1 ] ) ; return 1 ; } METHOD_5 ( & VAR_26 , 0 , sizeof ( TYPE_10 ) ) ; VAR_27 . VAR_28 = VAR_29 ; VAR_30 . VAR_31 = VAR_32 ; VAR_33 . VAR_34 = VAR_35 ; VAR_36 = METHOD_6 ( ) ; METHOD_7 ( ( TYPE_11 ) VAR_37 , & VAR_38 , VAR_39 ) ; METHOD_8 ( & VAR_40 , 0 , sizeof ( TYPE_12 ) ) ; VAR_41 = ( TYPE_13 * ) VAR_42 -> VAR_43 ; METHOD_9 ( VAR_44 , & VAR_45 ) ; if ( METHOD_10 ( VAR_46 , VAR_47 ) ) { return 1 ; } VAR_48 = 0 ; while ( VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 != 0 ) { VAR_53 ++ ; } VAR_54 = & VAR_55 -> VAR_56 [ VAR_57 ] ; METHOD_11 ( VAR_58 , ""Extracting%dframesfromfile...\\n"" , VAR_59 -> VAR_60 ) ; for ( VAR_61 = 0 ; VAR_62 < VAR_63 -> VAR_64 ; VAR_65 ++ ) { VAR_66 = & VAR_67 -> VAR_68 [ VAR_69 ] ; VAR_70 = ( unsigned TYPE_14 * ) METHOD_12 ( VAR_71 -> VAR_72 - 8 ) ; METHOD_13 ( VAR_73 , VAR_74 -> VAR_75 + 8 , VAR_76 ) ; METHOD_14 ( VAR_77 , VAR_78 -> VAR_79 - 8 , 1 , VAR_80 ) ; METHOD_15 ( VAR_81 , ""%s_%05d.j2k"" , VAR_82 [ 2 ] , VAR_83 ) ; VAR_84 = METHOD_16 ( VAR_85 , ""wb"" ) ; if ( ! VAR_86 ) { METHOD_17 ( VAR_87 , ""failedtoopen%sforwriting\\n"" , VAR_88 ) ; return 1 ; } METHOD_18 ( VAR_89 , VAR_90 -> VAR_91 - 8 , 1 , VAR_92 ) ; METHOD_19 ( VAR_93 ) ; METHOD_20 ( VAR_94 ) ; } METHOD_21 ( VAR_95 ) ; METHOD_22 ( VAR_96 , ""%dframescorrectlyextracted\\n"" , VAR_97 ) ; if ( VAR_101 >= sizeof ( VAR_88 ) ) { METHOD_22 ( VAR_87 , ""maximumlengthofoutputprefixexceeded\\n"" ) ; return 1 ; } if ( VAR_98 ) { METHOD_23 ( ( TYPE_15 * ) VAR_99 -> VAR_100 ) ; } return 0 ; }",726
727,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; unsigned TYPE_4 TYPE_5 ; VAR_5 = 0 ; METHOD_1 ( VAR_6 , & VAR_7 -> VAR_8 , VAR_9 ) { if ( VAR_10 > VAR_11 ) break ;  METHOD_2 ( & VAR_12 [ VAR_13 ] , 0 , VAR_14 ) ;  VAR_15 [ VAR_16 ] . VAR_17 = VAR_18 -> VAR_19 + 1 ; VAR_20 [ VAR_21 ] . VAR_22 = VAR_23 -> VAR_24 . VAR_25 & VAR_26 -> VAR_27 . VAR_28 & VAR_29 -> VAR_30 . VAR_31 ; if ( VAR_32 -> VAR_33 ) VAR_34 [ VAR_35 ] . VAR_36 = VAR_37 -> VAR_38 . VAR_39 ; else { TYPE_6 = METHOD_3 ( VAR_40 ) ; VAR_41 [ VAR_42 ] . VAR_43 = ( TYPE_7 > VAR_44 -> VAR_45 . VAR_46 ) ? ( TYPE_8 - VAR_47 -> VAR_48 . VAR_49 ) : 0 ; } VAR_50 [ VAR_51 ] . VAR_52 = VAR_53 -> VAR_54 ; VAR_55 [ VAR_56 ] . VAR_57 = VAR_58 -> VAR_59 ; VAR_60 [ VAR_61 ] . VAR_62 = VAR_63 -> VAR_64 . VAR_65 ; VAR_66 [ VAR_67 ] . VAR_68 = VAR_69 -> VAR_70 . VAR_71 ; VAR_72 ++ ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ) { VAR_2 * VAR_3 ; TYPE_3 VAR_4 ; unsigned TYPE_4 TYPE_5 ; VAR_5 = 0 ; METHOD_1 ( VAR_6 , & VAR_7 -> VAR_8 , VAR_9 ) { if ( VAR_10 > VAR_11 ) break ; METHOD_2 ( & VAR_12 [ VAR_13 ] , 0 , VAR_14 ) ; VAR_15 [ VAR_16 ] . VAR_17 = VAR_18 -> VAR_19 + 1 ; VAR_20 [ VAR_21 ] . VAR_22 = VAR_23 -> VAR_24 . VAR_25 & VAR_26 -> VAR_27 . VAR_28 & VAR_29 -> VAR_30 . VAR_31 ; if ( VAR_32 -> VAR_33 ) VAR_34 [ VAR_35 ] . VAR_36 = VAR_37 -> VAR_38 . VAR_39 ; else { TYPE_6 = METHOD_3 ( VAR_40 ) ; VAR_41 [ VAR_42 ] . VAR_43 = ( TYPE_7 > VAR_44 -> VAR_45 . VAR_46 ) ? ( TYPE_8 - VAR_47 -> VAR_48 . VAR_49 ) : 0 ; } VAR_50 [ VAR_51 ] . VAR_52 = VAR_53 -> VAR_54 ; VAR_55 [ VAR_56 ] . VAR_57 = VAR_58 -> VAR_59 ; VAR_60 [ VAR_61 ] . VAR_62 = VAR_63 -> VAR_64 . VAR_65 ; VAR_66 [ VAR_67 ] . VAR_68 = VAR_69 -> VAR_70 . VAR_71 ; VAR_72 ++ ; } }",727
728,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; VAR_7 * VAR_8 ; TYPE_7 VAR_9 ;  if ( METHOD_1 ( VAR_10 , & VAR_11 ) ) {  TYPE_8 TYPE_9 ; VAR_12 = METHOD_2 ( VAR_13 , & VAR_14 ) ;  if ( VAR_15 == VAR_16 ) goto VAR_17 ;  TYPE_10 = METHOD_3 ( VAR_18 , & VAR_19 , VAR_20 ) ; if ( TYPE_11 != 0 ) goto VAR_21 ; METHOD_4 ( VAR_22 ) ;  } else {  PyErr_SetString ( VAR_23 , ""requiredfield\\""target\\""missingfromcomprehension"" ) ; return 1 ; }  if ( METHOD_5 ( VAR_24 , & VAR_25 ) ) {  TYPE_12 TYPE_13 ; VAR_26 = METHOD_6 ( VAR_27 , & VAR_28 ) ;  if ( VAR_29 == VAR_30 ) goto VAR_31 ;  TYPE_14 = METHOD_7 ( VAR_32 , & VAR_33 , VAR_34 ) ; if ( TYPE_15 != 0 ) goto VAR_35 ; METHOD_8 ( VAR_36 ) ;  } else {  PyErr_SetString ( VAR_37 , ""requiredfield\\""iter\\""missingfromcomprehension"" ) ; return 1 ; } if ( METHOD_9 ( VAR_38 , & VAR_39 ) ) { TYPE_16 TYPE_17 ; TYPE_18 VAR_40 ;  TYPE_19 VAR_41 ;  VAR_42 = METHOD_10 ( VAR_43 , & VAR_44 ) ; if ( VAR_45 == VAR_46 ) goto VAR_47 ; if ( ! METHOD_11 ( VAR_48 ) ) { PyErr_Format ( VAR_49 , ""comprehensionfield\\""ifs\\""mustbealist,nota%.200s"" , VAR_50 -> VAR_51 -> VAR_52 ) ; goto VAR_53 ; } VAR_54 = METHOD_12 ( VAR_55 ) ; VAR_56 = METHOD_13 ( VAR_57 , VAR_58 ) ; if ( VAR_59 == VAR_60 ) goto VAR_61 ; for ( VAR_62 = 0 ; VAR_63 < VAR_64 ; VAR_65 ++ ) {  TYPE_20 VAR_66 ;   TYPE_21 = METHOD_14 ( METHOD_15 ( VAR_67 , VAR_68 ) , & VAR_69 , VAR_70 ) ;  if ( TYPE_22 != 0 ) goto VAR_71 ; if ( VAR_72 != METHOD_16 ( VAR_73 ) ) { PyErr_SetString ( VAR_74 , ""comprehensionfield\\""ifs\\""changedsizeduringiteration"" ) ; goto VAR_75 ; }  METHOD_17 ( VAR_76 , VAR_77 , VAR_78 ) ;  } METHOD_18 ( VAR_79 ) ;  } else {  PyErr_SetString ( VAR_80 , ""requiredfield\\""ifs\\""missingfromcomprehension"" ) ; return 1 ; }  if ( METHOD_19 ( VAR_81 , & VAR_82 ) ) {  TYPE_23 TYPE_24 ; VAR_83 = METHOD_20 ( VAR_84 , & VAR_85 ) ;  if ( VAR_86 == VAR_87 ) goto VAR_88 ;  TYPE_25 = METHOD_21 ( VAR_89 , & VAR_90 , VAR_91 ) ; if ( TYPE_26 != 0 ) goto VAR_92 ;  METHOD_22 ( VAR_93 ) ;  } else { PyErr_SetString ( VAR_94 , ""requiredfield\\""is_async\\""missingfromcomprehension"" ) ; return 1 ; } * VAR_95 = METHOD_23 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; return 0 ; VAR_101 : METHOD_24 ( VAR_102 ) ; return 1 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 * VAR_2 ) { TYPE_4 * VAR_3 = VAR_4 ; TYPE_5 VAR_5 ; TYPE_6 VAR_6 ; VAR_7 * VAR_8 ; TYPE_7 VAR_9 ; if ( METHOD_25 ( VAR_84 , & VAR_85 ) ; if ( VAR_86 == VAR_87 ) goto VAR_88 ; TYPE_25 = METHOD_21 ( VAR_89 , & VAR_90 , VAR_91 ) ; if ( TYPE_26 != 0 ) goto VAR_92 ; METHOD_22 ( VAR_93 ) ; } else { PyErr_SetString ( VAR_94 , ""requiredfield\\""is_async\\""missingfromcomprehension"" ) ; return 1 ; } * VAR_95 = METHOD_23 ( VAR_96 , VAR_97 , VAR_98 , VAR_99 , VAR_100 ) ; return 0 ; VAR_101 : METHOD_24 ( VAR_102 ) ; return 1 ; }",728
729,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( struct STRUCT_OR_UNION_4 * , struct STRUCT_OR_UNION_5 * , struct STRUCT_OR_UNION_6 * ) ) { struct STRUCT_OR_UNION_7 * VAR_2 ; struct STRUCT_OR_UNION_8 * VAR_3 = ( struct STRUCT_OR_UNION_9 * ) METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_10 * VAR_5 = VAR_6 -> VAR_7 && ! METHOD_3 ( ) ? METHOD_4 ( VAR_8 -> VAR_9 ) : VAR_10 ; struct STRUCT_OR_UNION_11 * VAR_11 ; struct STRUCT_OR_UNION_12 * VAR_12 ; unsigned TYPE_2 VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_3 VAR_17 , VAR_18 ; TYPE_4 VAR_19 ; TYPE_5 VAR_20 , VAR_21 = 0 , VAR_22 = 0 ; VAR_23 * VAR_24 , VAR_25 = 0 ;  VAR_26 = METHOD_5 ( VAR_27 , & VAR_28 ) ;  VAR_29 = * VAR_30 ; VAR_31 = METHOD_6 ( VAR_32 ) ; if ( METHOD_7 ( ! VAR_33 -> VAR_34 && VAR_35 -> VAR_36 > VAR_37 ) ) goto VAR_38 ; if ( METHOD_8 ( VAR_39 ) -> VAR_40 ) { if ( METHOD_9 ( VAR_41 ) -> VAR_42 > VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_10 ( VAR_46 ) -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; } if ( VAR_52 && VAR_53 -> VAR_54 < VAR_55 ) { if ( VAR_56 -> VAR_57 ) VAR_58 = VAR_59 -> VAR_60 ; } if ( VAR_61 < VAR_62 + sizeof ( struct STRUCT_OR_UNION_13 ) + 8 ) goto VAR_63 ; VAR_64 -= VAR_65 + sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_66 = METHOD_11 ( STRUCT_OR_UNION_15 , & METHOD_12 ( VAR_67 ) -> VAR_68 , & METHOD_13 ( VAR_69 ) -> VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 && ( VAR_74 = METHOD_14 ( VAR_75 ) ) ) goto VAR_76 ; VAR_77 = METHOD_15 ( VAR_78 -> VAR_79 . VAR_80 ) ; if ( METHOD_16 ( VAR_81 ) ) { unsigned TYPE_6 VAR_82 = METHOD_17 ( VAR_83 ) ; struct STRUCT_OR_UNION_16 * VAR_84 ; if ( VAR_85 - VAR_86 > VAR_87 || ( ( VAR_88 - VAR_89 ) & 7 ) || METHOD_18 ( VAR_90 ) || METHOD_19 ( VAR_91 ) < ( VAR_92 + sizeof ( struct STRUCT_OR_UNION_17 ) ) ) goto VAR_93 ; METHOD_20 ( VAR_94 , VAR_95 ) { if ( VAR_96 -> VAR_97 > VAR_98 || ( ( VAR_99 -> VAR_100 & 7 ) && VAR_101 -> VAR_102 ) || METHOD_21 ( VAR_103 ) < ( VAR_104 + VAR_105 + sizeof ( struct STRUCT_OR_UNION_18 ) ) ) goto VAR_106 ; if ( METHOD_22 ( VAR_107 ) ) goto VAR_108 ; METHOD_23 ( VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 ) { VAR_113 -> VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; } VAR_120 -> VAR_121 -= VAR_122 -> VAR_123 ; } VAR_124 = 0 ; VAR_125 = 0 ; * VAR_126 = VAR_127 ; VAR_128 = METHOD_24 ( METHOD_25 ( VAR_129 ) , VAR_130 , VAR_131 ) ; if ( ! VAR_132 ) { METHOD_26 ( STRUCT_OR_UNION_19 , METHOD_27 ( METHOD_28 ( VAR_133 ) ) , VAR_134 ) ; VAR_135 = - VAR_136 ; goto VAR_137 ; } VAR_138 = METHOD_29 ( VAR_139 ) -> VAR_140 ; METHOD_30 ( VAR_141 ) ; METHOD_31 ( VAR_142 , VAR_143 ) ; VAR_144 = ( struct STRUCT_OR_UNION_20 * ) METHOD_32 ( VAR_145 , sizeof ( struct STRUCT_OR_UNION_21 ) ) ; METHOD_33 ( VAR_146 , VAR_147 ) ; METHOD_34 ( VAR_148 ) ; METHOD_35 ( METHOD_36 ( VAR_149 ) , VAR_150 , VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = 0 ; VAR_157 -> VAR_158 = METHOD_37 ( VAR_159 ) ; VAR_160 -> VAR_161 = VAR_162 ; VAR_163 = METHOD_38 ( VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 - METHOD_39 ( VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_40 ( VAR_172 ) -> VAR_173 = METHOD_41 ( VAR_174 - sizeof ( struct STRUCT_OR_UNION_22 ) ) ; METHOD_42 ( & VAR_175 -> VAR_176 ) ; for ( ; ; ) { if ( VAR_177 ) { VAR_178 -> VAR_179 = VAR_180 ; METHOD_43 ( VAR_181 ) ; VAR_182 = ( struct STRUCT_OR_UNION_23 * ) METHOD_44 ( VAR_183 , sizeof ( struct STRUCT_OR_UNION_24 ) ) ; METHOD_45 ( VAR_184 , VAR_185 ) ; METHOD_46 ( VAR_186 ) ; METHOD_47 ( METHOD_48 ( VAR_187 ) , VAR_188 , VAR_189 ) ; VAR_190 += VAR_191 -> VAR_192 - VAR_193 - sizeof ( struct STRUCT_OR_UNION_25 ) ; VAR_194 -> VAR_195 = VAR_196 ; VAR_197 -> VAR_198 = 0 ; VAR_199 -> VAR_200 = METHOD_49 ( VAR_201 ) ; if ( VAR_202 -> VAR_203 ) VAR_204 -> VAR_205 |= METHOD_50 ( VAR_206 ) ; VAR_207 -> VAR_208 = VAR_209 ; METHOD_51 ( VAR_210 ) -> VAR_211 = METHOD_52 ( VAR_212 -> VAR_213 - sizeof ( struct STRUCT_OR_UNION_26 ) ) ; METHOD_53 ( VAR_214 , VAR_215 ) ; } VAR_216 = METHOD_54 ( STRUCT_OR_UNION_27 , VAR_217 , VAR_218 ) ; if ( ! VAR_219 ) METHOD_55 ( STRUCT_OR_UNION_28 , METHOD_56 ( & VAR_220 -> VAR_221 ) , VAR_222 ) ; if ( VAR_223 || ! VAR_224 ) break ; VAR_225 = VAR_226 ; VAR_227 = VAR_228 -> VAR_229 ; VAR_230 -> VAR_231 = VAR_232 ; } METHOD_57 ( VAR_233 ) ; if ( VAR_234 == 0 ) { METHOD_58 ( STRUCT_OR_UNION_29 , METHOD_59 ( & VAR_235 -> VAR_236 ) , VAR_237 ) ; METHOD_60 ( VAR_238 ) ; return 0 ; } METHOD_61 ( VAR_239 ) ; METHOD_62 ( STRUCT_OR_UNION_30 , METHOD_63 ( & VAR_240 -> VAR_241 ) , VAR_242 ) ; METHOD_64 ( VAR_243 ) ; return VAR_244 ; VAR_245 : METHOD_65 ( VAR_246 , VAR_247 ) { if ( VAR_248 == VAR_249 ) break ; VAR_250 -> VAR_251 = VAR_252 ; VAR_253 -> VAR_254 = VAR_255 ; VAR_256 -> VAR_257 += VAR_258 -> VAR_259 ; } } VAR_260 : VAR_261 = VAR_262 -> VAR_263 - VAR_264 ; VAR_265 = VAR_266 ; VAR_267 = VAR_268 -> VAR_269 . VAR_270 -> VAR_271 ; while ( VAR_272 > 0 ) { VAR_273 * VAR_274 ; VAR_275 = VAR_276 ; if ( VAR_277 > VAR_278 ) VAR_279 = VAR_280 ; if ( VAR_281 < VAR_282 ) { VAR_283 &= ~ 7 ; } VAR_284 = METHOD_66 ( VAR_285 + VAR_286 + sizeof ( struct STRUCT_OR_UNION_31 ) + VAR_287 + VAR_288 , VAR_289 ) ; if ( ! VAR_290 ) { METHOD_67 ( STRUCT_OR_UNION_32 , METHOD_68 ( METHOD_69 ( VAR_291 ) ) , VAR_292 ) ; VAR_293 = - VAR_294 ; goto VAR_295 ; } METHOD_70 ( VAR_296 , VAR_297 ) ; METHOD_71 ( VAR_298 , VAR_299 ) ; METHOD_72 ( VAR_300 , VAR_301 + VAR_302 + sizeof ( struct STRUCT_OR_UNION_33 ) ) ; METHOD_73 ( VAR_303 ) ; VAR_304 = ( struct STRUCT_OR_UNION_34 * ) ( METHOD_74 ( VAR_305 ) + VAR_306 ) ; VAR_307 -> VAR_308 = ( VAR_309 -> VAR_310 + VAR_311 + sizeof ( struct STRUCT_OR_UNION_35 ) ) ; if ( VAR_312 -> VAR_313 ) METHOD_75 ( VAR_314 , VAR_315 -> VAR_316 ) ; METHOD_76 ( VAR_317 , METHOD_77 ( VAR_318 ) , VAR_319 ) ; VAR_320 = METHOD_78 ( VAR_321 ) ; VAR_322 += VAR_323 - METHOD_79 ( VAR_324 ) ; * VAR_325 = VAR_326 ; VAR_327 -> VAR_328 = VAR_329 ; VAR_330 -> VAR_331 = 0 ; VAR_332 -> VAR_333 = VAR_334 ; METHOD_80 ( METHOD_81 ( VAR_335 , VAR_336 , METHOD_82 ( VAR_337 ) , VAR_338 ) ) ; VAR_339 -= VAR_340 ; VAR_341 -> VAR_342 = METHOD_83 ( VAR_343 ) ; if ( VAR_344 > 0 ) VAR_345 -> VAR_346 |= METHOD_84 ( VAR_347 ) ; METHOD_85 ( VAR_348 ) -> VAR_349 = METHOD_86 ( VAR_350 -> VAR_351 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; VAR_352 += VAR_353 ; VAR_354 += VAR_355 ; VAR_356 = METHOD_87 ( STRUCT_OR_UNION_37 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) goto VAR_360 ; METHOD_88 ( STRUCT_OR_UNION_38 , METHOD_89 ( METHOD_90 ( VAR_361 ) ) , VAR_362 ) ; } METHOD_91 ( STRUCT_OR_UNION_39 , METHOD_92 ( METHOD_93 ( VAR_363 ) ) , VAR_364 ) ; METHOD_94 ( VAR_365 ) ; return VAR_366 ; VAR_367 : if ( VAR_368 -> VAR_369 && METHOD_95 ( METHOD_96 ( VAR_370 ) ) ) METHOD_97 ( VAR_371 -> VAR_372 , VAR_373 ) ; VAR_374 -> VAR_375 = METHOD_98 ( VAR_376 ) -> VAR_377 ; METHOD_99 ( VAR_378 , VAR_379 , 0 , VAR_380 ) ; VAR_381 = - VAR_382 ; VAR_383 : METHOD_100 ( STRUCT_OR_UNION_40 , METHOD_101 ( METHOD_102 ( VAR_384 ) ) , VAR_385 ) ; METHOD_103 ( VAR_386 ) ; return VAR_387 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * STRUCT_OR_UNION_1 , struct STRUCT_OR_UNION_2 * VAR_0 , struct STRUCT_OR_UNION_3 * VAR_1 , TYPE_1 ( * METHOD_1 ) ( struct STRUCT_OR_UNION_4 * , struct STRUCT_OR_UNION_5 * , struct STRUCT_OR_UNION_6 * ) ) { struct STRUCT_OR_UNION_7 * VAR_2 ; struct STRUCT_OR_UNION_8 * VAR_3 = ( struct STRUCT_OR_UNION_9 * ) METHOD_2 ( VAR_4 ) ; struct STRUCT_OR_UNION_10 * VAR_5 = VAR_6 -> VAR_7 && ! METHOD_3 ( ) ? METHOD_4 ( VAR_8 -> VAR_9 ) : VAR_10 ; struct STRUCT_OR_UNION_11 * VAR_11 ; struct STRUCT_OR_UNION_12 * VAR_12 ; unsigned TYPE_2 VAR_13 , VAR_14 , VAR_15 , VAR_16 ; TYPE_3 VAR_17 , VAR_18 ; TYPE_4 VAR_19 ; TYPE_5 VAR_20 , VAR_21 = 0 , VAR_22 = 0 ; VAR_23 * VAR_24 , VAR_25 = 0 ; VAR_26 = METHOD_5 ( VAR_27 , & VAR_28 ) ; VAR_29 = * VAR_30 ; VAR_31 = METHOD_6 ( VAR_32 ) ; if ( METHOD_7 ( ! VAR_33 -> VAR_34 && VAR_35 -> VAR_36 > VAR_37 ) ) goto VAR_38 ; if ( METHOD_8 ( VAR_39 ) -> VAR_40 ) { if ( METHOD_9 ( VAR_41 ) -> VAR_42 > VAR_43 ) goto VAR_44 ; VAR_45 = METHOD_10 ( VAR_46 ) -> VAR_47 ; if ( VAR_48 < VAR_49 ) VAR_50 = VAR_51 ; } if ( VAR_52 && VAR_53 -> VAR_54 < VAR_55 ) { if ( VAR_56 -> VAR_57 ) VAR_58 = VAR_59 -> VAR_60 ; } if ( VAR_61 < VAR_62 + sizeof ( struct STRUCT_OR_UNION_13 ) + 8 ) goto VAR_63 ; VAR_64 -= VAR_65 + sizeof ( struct STRUCT_OR_UNION_14 ) ; VAR_66 = METHOD_11 ( STRUCT_OR_UNION_15 , & METHOD_12 ( VAR_67 ) -> VAR_68 , & METHOD_13 ( VAR_69 ) -> VAR_70 ) ; if ( VAR_71 -> VAR_72 == VAR_73 && ( VAR_74 = METHOD_14 ( VAR_75 ) ) ) goto VAR_76 ; VAR_77 = METHOD_15 ( VAR_78 -> VAR_79 . VAR_80 ) ; if ( METHOD_16 ( VAR_81 ) ) { unsigned TYPE_6 VAR_82 = METHOD_17 ( VAR_83 ) ; struct STRUCT_OR_UNION_16 * VAR_84 ; if ( VAR_85 - VAR_86 > VAR_87 || ( ( VAR_88 - VAR_89 ) & 7 ) || METHOD_18 ( VAR_90 ) || METHOD_19 ( VAR_91 ) < ( VAR_92 + sizeof ( struct STRUCT_OR_UNION_17 ) ) ) goto VAR_93 ; METHOD_20 ( VAR_94 , VAR_95 ) { if ( VAR_96 -> VAR_97 > VAR_98 || ( ( VAR_99 -> VAR_100 & 7 ) && VAR_101 -> VAR_102 ) || METHOD_21 ( VAR_103 ) < ( VAR_104 + VAR_105 + sizeof ( struct STRUCT_OR_UNION_18 ) ) ) goto VAR_106 ; if ( METHOD_22 ( VAR_107 ) ) goto VAR_108 ; METHOD_23 ( VAR_109 -> VAR_110 ) ; if ( VAR_111 -> VAR_112 ) { VAR_113 -> VAR_114 = VAR_115 -> VAR_116 ; VAR_117 -> VAR_118 = VAR_119 ; } VAR_120 -> VAR_121 -= VAR_122 -> VAR_123 ; } VAR_124 = 0 ; VAR_125 = 0 ; * VAR_126 = VAR_127 ; VAR_128 = METHOD_24 ( METHOD_25 ( VAR_129 ) , VAR_130 , VAR_131 ) ; if ( ! VAR_132 ) { METHOD_26 ( STRUCT_OR_UNION_19 , METHOD_27 ( METHOD_28 ( VAR_133 ) ) , VAR_134 ) ; VAR_135 = - VAR_136 ; goto VAR_137 ; } VAR_138 = METHOD_29 ( VAR_139 ) -> VAR_140 ; METHOD_30 ( VAR_141 ) ; METHOD_31 ( VAR_142 , VAR_143 ) ; VAR_144 = ( struct STRUCT_OR_UNION_20 * ) METHOD_32 ( VAR_145 , sizeof ( struct STRUCT_OR_UNION_21 ) ) ; METHOD_33 ( VAR_146 , VAR_147 ) ; METHOD_34 ( VAR_148 ) ; METHOD_35 ( METHOD_36 ( VAR_149 ) , VAR_150 , VAR_151 ) ; VAR_152 -> VAR_153 = VAR_154 ; VAR_155 -> VAR_156 = 0 ; VAR_157 -> VAR_158 = METHOD_37 ( VAR_159 ) ; VAR_160 -> VAR_161 = VAR_162 ; VAR_163 = METHOD_38 ( VAR_164 ) ; VAR_165 -> VAR_166 = VAR_167 - METHOD_39 ( VAR_168 ) ; VAR_169 -> VAR_170 = VAR_171 ; METHOD_40 ( VAR_172 ) -> VAR_173 = METHOD_41 ( VAR_174 - sizeof ( struct STRUCT_OR_UNION_22 ) ) ; METHOD_42 ( & VAR_175 -> VAR_176 ) ; for ( ; ; ) { if ( VAR_177 ) { VAR_178 -> VAR_179 = VAR_180 ; METHOD_43 ( VAR_181 ) ; VAR_182 = ( struct STRUCT_OR_UNION_23 * ) METHOD_44 ( VAR_183 , sizeof ( struct STRUCT_OR_UNION_24 ) ) ; METHOD_45 ( VAR_184 , VAR_185 ) ; METHOD_46 ( VAR_186 ) ; METHOD_47 ( METHOD_48 ( VAR_187 ) , VAR_188 , VAR_189 ) ; VAR_190 += VAR_191 -> VAR_192 - VAR_193 - sizeof ( struct STRUCT_OR_UNION_25 ) ; VAR_194 -> VAR_195 = VAR_196 ; VAR_197 -> VAR_198 = 0 ; VAR_199 -> VAR_200 = METHOD_49 ( VAR_201 ) ; if ( VAR_202 -> VAR_203 ) VAR_204 -> VAR_205 |= METHOD_50 ( VAR_206 ) ; VAR_207 -> VAR_208 = VAR_209 ; METHOD_51 ( VAR_210 ) -> VAR_211 = METHOD_52 ( VAR_212 -> VAR_213 - sizeof ( struct STRUCT_OR_UNION_26 ) ) ; METHOD_53 ( VAR_214 , VAR_215 ) ; } VAR_216 = METHOD_54 ( STRUCT_OR_UNION_27 , VAR_217 , VAR_218 ) ; if ( ! VAR_219 ) METHOD_55 ( STRUCT_OR_UNION_28 , METHOD_56 ( & VAR_220 -> VAR_221 ) , VAR_222 ) ; if ( VAR_223 || ! VAR_224 ) break ; VAR_225 = VAR_226 ; VAR_227 = VAR_228 -> VAR_229 ; VAR_230 -> VAR_231 = VAR_232 ; } METHOD_57 ( VAR_233 ) ; if ( VAR_234 == 0 ) { METHOD_58 ( STRUCT_OR_UNION_29 , METHOD_59 ( & VAR_235 -> VAR_236 ) , VAR_237 ) ; METHOD_60 ( VAR_238 ) ; return 0 ; } METHOD_61 ( VAR_239 ) ; METHOD_62 ( STRUCT_OR_UNION_30 , METHOD_63 ( & VAR_240 -> VAR_241 ) , VAR_242 ) ; METHOD_64 ( VAR_243 ) ; return VAR_244 ; VAR_245 : METHOD_65 ( VAR_246 , VAR_247 ) { if ( VAR_248 == VAR_249 ) break ; VAR_250 -> VAR_251 = VAR_252 ; VAR_253 -> VAR_254 = VAR_255 ; VAR_256 -> VAR_257 += VAR_258 -> VAR_259 ; } } VAR_260 : VAR_261 = VAR_262 -> VAR_263 - VAR_264 ; VAR_265 = VAR_266 ; VAR_267 = VAR_268 -> VAR_269 . VAR_270 -> VAR_271 ; while ( VAR_272 > 0 ) { VAR_273 * VAR_274 ; VAR_275 = VAR_276 ; if ( VAR_277 > VAR_278 ) VAR_279 = VAR_280 ; if ( VAR_281 < VAR_282 ) { VAR_283 &= ~ 7 ; } VAR_284 = METHOD_66 ( VAR_285 + VAR_286 + sizeof ( struct STRUCT_OR_UNION_31 ) + VAR_287 + VAR_288 , VAR_289 ) ; if ( ! VAR_290 ) { METHOD_67 ( STRUCT_OR_UNION_32 , METHOD_68 ( METHOD_69 ( VAR_291 ) ) , VAR_292 ) ; VAR_293 = - VAR_294 ; goto VAR_295 ; } METHOD_70 ( VAR_296 , VAR_297 ) ; METHOD_71 ( VAR_298 , VAR_299 ) ; METHOD_72 ( VAR_300 , VAR_301 + VAR_302 + sizeof ( struct STRUCT_OR_UNION_33 ) ) ; METHOD_73 ( VAR_303 ) ; VAR_304 = ( struct STRUCT_OR_UNION_34 * ) ( METHOD_74 ( VAR_305 ) + VAR_306 ) ; VAR_307 -> VAR_308 = ( VAR_309 -> VAR_310 + VAR_311 + sizeof ( struct STRUCT_OR_UNION_35 ) ) ; if ( VAR_312 -> VAR_313 ) METHOD_75 ( VAR_314 , VAR_315 -> VAR_316 ) ; METHOD_76 ( VAR_317 , METHOD_77 ( VAR_318 ) , VAR_319 ) ; VAR_320 = METHOD_78 ( VAR_321 ) ; VAR_322 += VAR_323 - METHOD_79 ( VAR_324 ) ; * VAR_325 = VAR_326 ; VAR_327 -> VAR_328 = VAR_329 ; VAR_330 -> VAR_331 = 0 ; VAR_332 -> VAR_333 = VAR_334 ; METHOD_80 ( METHOD_81 ( VAR_335 , VAR_336 , METHOD_82 ( VAR_337 ) , VAR_338 ) ) ; VAR_339 -= VAR_340 ; VAR_341 -> VAR_342 = METHOD_83 ( VAR_343 ) ; if ( VAR_344 > 0 ) VAR_345 -> VAR_346 |= METHOD_84 ( VAR_347 ) ; METHOD_85 ( VAR_348 ) -> VAR_349 = METHOD_86 ( VAR_350 -> VAR_351 - sizeof ( struct STRUCT_OR_UNION_36 ) ) ; VAR_352 += VAR_353 ; VAR_354 += VAR_355 ; VAR_356 = METHOD_87 ( STRUCT_OR_UNION_37 , VAR_357 , VAR_358 ) ; if ( VAR_359 ) goto VAR_360 ; METHOD_88 ( STRUCT_OR_UNION_38 , METHOD_89 ( METHOD_90 ( VAR_361 ) ) , VAR_362 ) ; } METHOD_91 ( STRUCT_OR_UNION_39 , METHOD_92 ( METHOD_93 ( VAR_363 ) ) , VAR_364 ) ; METHOD_94 ( VAR_365 ) ; return VAR_366 ; VAR_367 : if ( VAR_368 -> VAR_369 && METHOD_95 ( METHOD_96 ( VAR_370 ) ) ) METHOD_97 ( VAR_371 -> VAR_372 , VAR_373 ) ; VAR_374 -> VAR_375 = METHOD_98 ( VAR_376 ) -> VAR_377 ; METHOD_99 ( VAR_378 , VAR_379 , 0 , VAR_380 ) ; VAR_381 = - VAR_382 ; VAR_383 : METHOD_100 ( STRUCT_OR_UNION_40 , METHOD_101 ( METHOD_102 ( VAR_384 ) ) , VAR_385 ) ; METHOD_103 ( VAR_386 ) ; return VAR_387 ; }",729
730,"static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 ,  const TYPE_3 * const VAR_2 ,  TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 , TYPE_8 * VAR_7 ) { TYPE_9 * VAR_8 = & VAR_9 -> VAR_10 ;  TYPE_10 * VAR_11 = & VAR_12 -> VAR_13 ;  TYPE_11 * VAR_14 = & VAR_15 -> VAR_16 [ 0 ] -> VAR_17 ;  struct STRUCT_OR_UNION_0 VAR_18 [ VAR_19 ] = { { 0 } } ;  TYPE_12 VAR_20 = VAR_21 ;  TYPE_13 VAR_22 , VAR_23 ;  TYPE_14 VAR_24 = VAR_25 -> VAR_26 ; TYPE_15 VAR_27 ; TYPE_16 VAR_28 = VAR_29 -> VAR_30 [ 0 ] ;  TYPE_17 VAR_31 = VAR_32 -> VAR_33 [ VAR_34 ] [ 0 ] . VAR_35 ;  TYPE_18 VAR_36 = VAR_37 -> VAR_38 ; TYPE_19 VAR_39 = VAR_40 -> VAR_41 ; TYPE_20 VAR_42 = VAR_43 -> VAR_44 ;  TYPE_21 VAR_45 = VAR_46 -> VAR_47 ;  const TYPE_22 * VAR_48 = METHOD_1 ( VAR_49 , VAR_50 ) ; TYPE_23 VAR_51 [ 3 ] ;  VAR_52 [ 0 ] = VAR_53 -> VAR_54 [ VAR_55 ] [ 0 ] . VAR_56 ;   VAR_57 [ 1 ] = VAR_58 -> VAR_59 [ VAR_60 ] [ 1 ] . VAR_61 ;   VAR_62 [ 2 ] = VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 ;  if ( VAR_67 ) { TYPE_24 VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; VAR_72 ++ ) VAR_73 [ VAR_74 ] = VAR_75 -> VAR_76 [ VAR_77 ] . VAR_78 [ 0 ] ; METHOD_2 ( VAR_79 , 0 , VAR_80 , VAR_81 , VAR_82 , VAR_83 ) ; } METHOD_3 ( VAR_84 , & VAR_85 ) ;  if ( VAR_86 -> VAR_87 . VAR_88 && VAR_89 -> VAR_90 . VAR_91 ) {   VAR_92 = ( METHOD_4 ( VAR_93 , VAR_94 -> VAR_95 [ VAR_96 ] ) +   VAR_97 -> VAR_98 ) >> 1 ;  } else { VAR_99 = VAR_100 -> VAR_101 ; }  if ( VAR_102 -> VAR_103 . VAR_104 && VAR_105 < VAR_106 &&  VAR_107 -> VAR_108 . VAR_109 ) {  TYPE_25 VAR_110 = 2 * ( METHOD_5 ( VAR_111 ) - METHOD_6 ( METHOD_7 ( VAR_112 ) ,  METHOD_8 ( VAR_113 ) ) ) ; VAR_114 = METHOD_9 ( VAR_115 , VAR_116 ) ; } if ( VAR_117 -> VAR_118 . VAR_119 ) { TYPE_26 VAR_120 = VAR_121 [ VAR_122 ] ;  TYPE_27 VAR_123 = VAR_124 [ VAR_125 ] ;  TYPE_28 VAR_126 ; TYPE_29 VAR_127 = VAR_128 -> VAR_129 [ VAR_130 ] >> ( VAR_131 + VAR_132 + 4 ) ; if ( VAR_133 < 5 ) VAR_134 += 2 ;  for ( VAR_135 = VAR_136 ; VAR_137 <= VAR_138 && VAR_139 -> VAR_140 . VAR_141 ; ++ VAR_142 ) {  if ( ( VAR_143 -> VAR_144 [ VAR_145 ] >> 3 ) > VAR_146 -> VAR_147 [ VAR_148 ] ) {  VAR_149 -> VAR_150 [ VAR_151 ] . VAR_152 = 0 ;  VAR_153 -> VAR_154 = VAR_155 ; if ( VAR_156 ) { TYPE_30 VAR_157 ;  for ( VAR_158 = 0 ; VAR_159 < VAR_160 ; VAR_161 ++ )  VAR_162 -> VAR_163 [ VAR_164 ] . VAR_165 [ 0 ] = VAR_166 [ VAR_167 ] ; }  return ;  } } } VAR_168 = VAR_169 [ VAR_170 -> VAR_171 [ VAR_172 ] ] ; VAR_173 . VAR_174 >>= 3 ; VAR_175 . VAR_176 >>= 3 ;  VAR_177 = ( VAR_178 -> VAR_179 . VAR_180 - 1 ) - VAR_181 ;  if ( VAR_182 -> VAR_183 . VAR_184 == VAR_185 ) { VAR_186 = METHOD_10 ( VAR_187 , & VAR_188 , VAR_189 , VAR_190 , 0 , & VAR_191 -> VAR_192 [ VAR_193 ] , 1 , & VAR_194 , & VAR_195 -> VAR_196 ) ; if ( VAR_197 < VAR_198 )  VAR_199 = METHOD_11 ( VAR_200 , & VAR_201 -> VAR_202 , & VAR_203 ,   & VAR_204 -> VAR_205 [ VAR_206 ] , 1 ) ;   } else if ( VAR_207 -> VAR_208 . VAR_209 == VAR_210 ) {  VAR_211 = METHOD_12 ( VAR_212 , & VAR_213 , VAR_214 , VAR_215 , 0 , & VAR_216 -> VAR_217 [ VAR_218 ] , 1 , & VAR_219 , & VAR_220 -> VAR_221 ) ; if ( VAR_222 < VAR_223 ) VAR_224 = METHOD_13 ( VAR_225 , & VAR_226 -> VAR_227 , & VAR_228 , & VAR_229 -> VAR_230 [ VAR_231 ] , 1 ) ;  } else if ( VAR_232 -> VAR_233 . VAR_234 == VAR_235 ) {  VAR_236 = METHOD_14 ( VAR_237 , & VAR_238 , VAR_239 , VAR_240 , 1 , & VAR_241 -> VAR_242 [ VAR_243 ] , 1 , & VAR_244 , & VAR_245 -> VAR_246 ) ; if ( VAR_247 < VAR_248 ) VAR_249 = METHOD_15 ( VAR_250 , & VAR_251 -> VAR_252 , & VAR_253 , & VAR_254 -> VAR_255 [ VAR_256 ] , 1 ) ; } else if ( VAR_257 -> VAR_258 . VAR_259 == VAR_260 ) { VAR_261 = METHOD_16 ( VAR_262 , & VAR_263 , VAR_264 , VAR_265 , 1 , & VAR_266 -> VAR_267 [ VAR_268 ] , 1 , & VAR_269 , & VAR_270 -> VAR_271 ) ; if ( VAR_272 < VAR_273 ) VAR_274 = METHOD_17 ( VAR_275 , & VAR_276 -> VAR_277 , & VAR_278 , & VAR_279 -> VAR_280 [ VAR_281 ] , 1 ) ; } else if ( VAR_282 -> VAR_283 . VAR_284 == VAR_285 ) { VAR_286 = METHOD_18 ( VAR_287 , & VAR_288 , VAR_289 , VAR_290 , 1 , & VAR_291 -> VAR_292 [ VAR_293 ] , 1 , & VAR_294 , & VAR_295 -> VAR_296 ) ; if ( VAR_297 < VAR_298 ) VAR_299 = METHOD_19 ( VAR_300 , & VAR_301 -> VAR_302 , & VAR_303 , & VAR_304 -> VAR_305 [ VAR_306 ] , 1 ) ; } else { VAR_307 = METHOD_20 ( VAR_308 , VAR_309 , & VAR_310 , VAR_311 , VAR_312 , VAR_313 , 1 , & VAR_314 -> VAR_315 [ VAR_316 ] , & VAR_317 , & VAR_318 -> VAR_319 ) ; } VAR_320 -> VAR_321 = VAR_322 ; VAR_323 -> VAR_324 = VAR_325 ; VAR_326 -> VAR_327 = VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; if ( VAR_332 < VAR_333 ) { TYPE_31 TYPE_32 ; VAR_334 -> METHOD_21 ( VAR_335 , & VAR_336 -> VAR_337 , & VAR_338 , VAR_339 -> VAR_340 , VAR_341 -> VAR_342 , & VAR_343 -> VAR_344 [ VAR_345 ] , VAR_346 -> VAR_347 . VAR_348 , VAR_349 -> VAR_350 . VAR_351 , VAR_352 -> VAR_353 , VAR_354 -> VAR_355 ,  & TYPE_33 , & VAR_356 -> VAR_357 [ VAR_358 ] ) ;  } * VAR_359 = METHOD_22 ( & VAR_360 -> VAR_361 , & VAR_362 , VAR_363 -> VAR_364 , VAR_365 -> VAR_366 , VAR_367 ) ;  if ( VAR_368 -> VAR_369 . VAR_370 && VAR_371 -> VAR_372 . VAR_373 )   VAR_374 -> VAR_375 [ VAR_376 ] . VAR_377 = VAR_378 -> VAR_379 ;  if ( VAR_380 ) { TYPE_34 VAR_381 ; for ( VAR_382 = 0 ; VAR_383 < VAR_384 ; VAR_385 ++ ) VAR_386 -> VAR_387 [ VAR_388 ] . VAR_389 [ 0 ] = VAR_390 [ VAR_391 ] ; } }","static TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , const TYPE_3 * const VAR_2 , TYPE_4 VAR_3 , TYPE_5 VAR_4 , TYPE_6 VAR_5 , TYPE_7 * VAR_6 , TYPE_8 * VAR_7 ) { TYPE_9 * VAR_8 = & VAR_9 -> VAR_10 ; const TYPE_10 * VAR_11 = & VAR_12 -> VAR_13 ; TYPE_11 * VAR_14 = & VAR_15 -> VAR_16 [ 0 ] -> VAR_17 ; struct STRUCT_OR_UNION_0 VAR_18 [ VAR_19 ] = { { 0 , 0 } } ; TYPE_12 VAR_20 = VAR_21 ; TYPE_13 VAR_22 , VAR_23 ; TYPE_14 VAR_24 = VAR_25 -> VAR_26 ; TYPE_15 VAR_27 ; TYPE_16 VAR_28 = VAR_29 -> VAR_30 [ 0 ] ; TYPE_17 VAR_31 = VAR_32 -> VAR_33 [ VAR_34 ] [ 0 ] . VAR_35 ; TYPE_18 VAR_36 = VAR_37 -> VAR_38 ; TYPE_19 VAR_39 = VAR_40 -> VAR_41 ; TYPE_20 VAR_42 = VAR_43 -> VAR_44 ; TYPE_21 VAR_45 = VAR_46 -> VAR_47 ; const TYPE_22 * VAR_48 = METHOD_1 ( VAR_49 , VAR_50 ) ; TYPE_23 VAR_51 [ 3 ] ; VAR_52 [ 0 ] = VAR_374 -> VAR_392 -> VAR_59 [ VAR_60 ] [ 1 ] . VAR_61 ; VAR_62 [ 2 ] = VAR_63 -> VAR_64 [ VAR_65 ] . VAR_66 ; if ( VAR_67 ) { TYPE_24 VAR_68 ; for ( VAR_69 = 0 ; VAR_70 < VAR_71 ; VAR_72 ++ ) VAR_73 [ VAR_74 ] = VAR_75 -> VAR_76 [ VAR_77 ] . VAR_78 [ 0 ] ; METHOD_2 ( VAR_79 , 0 , VAR_80 , VAR_81 , VAR_82 , VAR_83 ) ; } METHOD_3 ( VAR_84 , & VAR_85 ) ; if ( VAR_86 -> VAR_87 . VAR_88 && VAR_89 -> VAR_90 . VAR_91 ) { VAR_92 = ( METHOD_4 ( VAR_93 , VAR_94 -> VAR_95 [ VAR_96 ] ) + VAR_97 -> VAR_98 ) >> 1 ; } else { VAR_99 = VAR_100 -> VAR_101 ; } if ( VAR_102 -> VAR_103 . VAR_104 && VAR_105 < VAR_106 && VAR_107 -> VAR_108 . VAR_109 ) { TYPE_25 VAR_110 = 2 * ( METHOD_5 ( VAR_111 ) - METHOD_6 ( METHOD_7 ( VAR_112 ) , METHOD_8 ( VAR_113 ) ) ) ; VAR_114 = METHOD_9 ( VAR_115 , VAR_116 ) ; } if ( VAR_117 -> VAR_118 . VAR_119 ) { TYPE_26 VAR_120 = VAR_121 [ VAR_122 ] ; TYPE_27 VAR_123 = VAR_124 [ VAR_125 ] ; TYPE_28 VAR_126 ; TYPE_29 VAR_127 = VAR_128 -> VAR_129 [ VAR_130 ] >> ( VAR_131 + VAR_132 + 4 ) ; if ( VAR_133 < 5 ) VAR_134 += 2 ; for ( VAR_135 = VAR_136 ; VAR_137 <= VAR_138 && VAR_139 -> VAR_140 . VAR_141 ; ++ VAR_142 ) { if ( ( VAR_143 -> VAR_144 [ VAR_145 ] >> 3 ) > VAR_146 -> VAR_147 [ VAR_148 ] ) { VAR_149 -> VAR_150 [ VAR_151 ] . VAR_152 = 0 ; VAR_153 -> VAR_154 = VAR_155 ; if ( VAR_156 ) { TYPE_30 VAR_157 ; for ( VAR_158 = 0 ; VAR_159 < VAR_160 ; VAR_161 ++ ) VAR_162 -> VAR_163 [ VAR_164 ] . VAR_165 [ 0 ] = VAR_166 [ VAR_167 ] ; } return ; } } } VAR_168 = VAR_169 [ VAR_170 -> VAR_171 [ VAR_172 ] ] ; VAR_173 . VAR_174 >>= 3 ; VAR_175 . VAR_176 >>= 3 ; VAR_177 = ( VAR_178 -> VAR_179 . VAR_180 - 1 ) - VAR_181 ; if ( VAR_182 -> VAR_183 . VAR_184 == VAR_185 ) { VAR_186 = METHOD_10 ( VAR_187 , & VAR_188 , VAR_189 , VAR_190 , 0 , & VAR_191 -> VAR_192 [ VAR_193 ] , 1 , & VAR_194 , & VAR_195 -> VAR_196 ) ; if ( VAR_197 < VAR_198 ) VAR_199 = METHOD_11 ( VAR_200 , & VAR_201 -> VAR_202 , & VAR_203 , & VAR_204 -> VAR_205 [ VAR_206 ] , 1 ) ; } else if ( VAR_207 -> VAR_208 . VAR_209 == VAR_210 ) { VAR_211 = METHOD_12 ( VAR_212 , & VAR_213 , VAR_214 , VAR_215 , 0 , & VAR_216 -> VAR_217 [ VAR_218 ] , 1 , & VAR_219 , & VAR_220 -> VAR_221 ) ; if ( VAR_222 < VAR_223 ) VAR_224 = METHOD_13 ( VAR_225 , & VAR_226 -> VAR_227 , & VAR_228 , & VAR_229 -> VAR_230 [ VAR_231 ] , 1 ) ; } else if ( VAR_232 -> VAR_233 . VAR_234 == VAR_235 ) { VAR_236 = METHOD_14 ( VAR_237 , & VAR_238 , VAR_239 , VAR_240 , 1 , & VAR_241 -> VAR_242 [ VAR_243 ] , 1 , & VAR_244 , & VAR_245 -> VAR_246 ) ; if ( VAR_247 < VAR_248 ) VAR_249 = METHOD_15 ( VAR_250 , & VAR_251 -> VAR_252 , & VAR_253 , & VAR_254 -> VAR_255 [ VAR_256 ] , 1 ) ; } else if ( VAR_257 -> VAR_258 . VAR_259 == VAR_260 ) { VAR_261 = METHOD_16 ( VAR_262 , & VAR_263 , VAR_264 , VAR_265 , 1 , & VAR_266 -> VAR_267 [ VAR_268 ] , 1 , & VAR_269 , & VAR_270 -> VAR_271 ) ; if ( VAR_272 < VAR_273 ) VAR_274 = METHOD_17 ( VAR_275 , & VAR_276 -> VAR_277 , & VAR_278 , & VAR_279 -> VAR_280 [ VAR_281 ] , 1 ) ; } else if ( VAR_282 -> VAR_283 . VAR_284 == VAR_285 ) { VAR_286 = METHOD_18 ( VAR_287 , & VAR_288 , VAR_289 , VAR_290 , 1 , & VAR_291 -> VAR_292 [ VAR_293 ] , 1 , & VAR_294 , & VAR_295 -> VAR_296 ) ; if ( VAR_297 < VAR_298 ) VAR_299 = METHOD_19 ( VAR_300 , & VAR_301 -> VAR_302 , & VAR_303 , & VAR_304 -> VAR_305 [ VAR_306 ] , 1 ) ; } else { VAR_307 = METHOD_20 ( VAR_308 , VAR_309 , & VAR_310 , VAR_311 , VAR_312 , VAR_313 , 1 , & VAR_314 -> VAR_315 [ VAR_316 ] , & VAR_317 , & VAR_318 -> VAR_319 ) ; } VAR_320 -> VAR_321 = VAR_322 ; VAR_323 -> VAR_324 = VAR_325 ; VAR_326 -> VAR_327 = VAR_328 ; VAR_329 -> VAR_330 = VAR_331 ; if ( VAR_332 < VAR_333 ) { TYPE_31 TYPE_32 ; VAR_334 -> METHOD_21 ( VAR_335 , & VAR_336 -> VAR_337 , & VAR_338 , VAR_339 -> VAR_340 , VAR_341 -> VAR_342 , & VAR_343 -> VAR_344 [ VAR_345 ] , VAR_346 -> VAR_347 . VAR_348 , VAR_349 -> VAR_350 . VAR_351 , VAR_352 -> VAR_353 , VAR_354 -> VAR_355 , & TYPE_33 , & VAR_356 -> VAR_357 [ VAR_358 ] ) ; } * VAR_359 = METHOD_22 ( & VAR_360 -> VAR_361 , & VAR_362 , VAR_363 -> VAR_364 , VAR_365 -> VAR_366 , VAR_367 ) ; if ( VAR_368 -> VAR_369 . VAR_370 && VAR_371 -> VAR_372 . VAR_373 ) VAR_374 -> VAR_375 [ VAR_376 ] ; if ( VAR_380 ) { TYPE_34 VAR_381 ; for ( VAR_382 = 0 ; VAR_383 < VAR_384 ; ++ VAR_391 ) VAR_386 -> VAR_387 [ VAR_388 ] . VAR_389 [ 0 ] = VAR_390 [ VAR_391 ] ; } }",730
731,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 ) {  TYPE_2 VAR_2 = sizeof ( struct STRUCT_OR_UNION_1 ) ;  unsigned TYPE_3 VAR_3 = METHOD_1 ( VAR_4 ) - METHOD_2 ( VAR_5 ) ; TYPE_4 VAR_6 = 0 ; * VAR_7 = & METHOD_3 ( VAR_8 ) -> VAR_9 ; while ( VAR_10 <= VAR_11 ) { struct STRUCT_OR_UNION_2 * VAR_12 ;  switch ( * * VAR_13 ) {  case VAR_14 : break ; case VAR_15 : VAR_16 = 1 ; break ; case VAR_17 : if IS_ENABLED ( VAR_18 ) if ( METHOD_4 ( VAR_19 , VAR_20 , VAR_21 ) >= 0 ) break ; if ( VAR_22 ) return VAR_23 ; break ; default : return VAR_24 ; } if ( VAR_25 + sizeof ( struct STRUCT_OR_UNION_3 ) > VAR_26 ) return - VAR_27 ; VAR_28 = ( struct STRUCT_OR_UNION_4 * ) ( METHOD_5 ( VAR_29 ) + VAR_30 ) ;  VAR_31 += METHOD_6 ( VAR_32 ) ;  * VAR_33 = & VAR_34 -> VAR_35 ; } return - VAR_36 ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * * VAR_1 ) { TYPE_2 VAR_2 = sizeof ( struct STRUCT_OR_UNION_1 ) ; unsigned TYPE_3 VAR_3 = METHOD_1 ( VAR_4 ) - METHOD_2 ( VAR_5 ) ; TYPE_4 VAR_6 = 0 ; * VAR_7 = & METHOD_3 ( VAR_8 ) -> VAR_9 ; while ( VAR_10 <= VAR_11 ) { struct STRUCT_OR_UNION_2 * VAR_12 ; switch ( * * VAR_13 ) { case VAR_14 : break ; case VAR_15 : VAR_16 = 1 ; break ; case VAR_17 : if IS_ENABLED ( VAR_18 ) if ( METHOD_4 ( VAR_19 , VAR_20 , VAR_21 ) >= 0 ) break ; if ( VAR_22 ) return VAR_23 ; break ; default : return VAR_24 ; } if ( VAR_25 + sizeof ( struct STRUCT_OR_UNION_3 ) > VAR_26 ) return - VAR_27 ; VAR_28 = ( struct STRUCT_OR_UNION_4 * ) ( METHOD_5 ( VAR_29 ) + VAR_30 ) ; VAR_31 += METHOD_6 ( VAR_32 ) ; * VAR_33 = & VAR_34 -> VAR_35 ; } return - VAR_36 ; }",731
732,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) {  METHOD_1 ( & VAR_3 -> VAR_4 , & VAR_5 -> VAR_6 , sizeof ( VAR_7 -> VAR_8 ) ) ;   METHOD_2 ( & VAR_9 -> VAR_10 , & VAR_11 -> VAR_12 ,  sizeof ( VAR_13 -> VAR_14 ) ) ;  METHOD_3 ( & VAR_15 -> VAR_16 , METHOD_4 ( VAR_17 -> VAR_18 ) ,   VAR_19 ) ;  VAR_20 -> VAR_21 = VAR_22 -> VAR_23 ; VAR_24 -> VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_6 ( VAR_28 , VAR_29 , VAR_30 -> VAR_31 ) ) goto VAR_32 ; if ( VAR_33 -> VAR_34 & VAR_35 ) { struct STRUCT_OR_UNION_3 VAR_36 ;  METHOD_7 ( VAR_37 . VAR_38 , VAR_39 , ""%s"" , ""larval"" ) ;  if ( METHOD_8 ( VAR_40 , VAR_41 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_42 ) ) goto VAR_43 ; goto VAR_44 ; } if ( VAR_45 -> VAR_46 && VAR_47 -> VAR_48 -> METHOD_9 ) { if ( VAR_49 -> VAR_50 -> METHOD_10 ( VAR_51 , VAR_52 ) ) goto VAR_53 ; goto VAR_54 ; } switch ( VAR_55 -> VAR_56 & ( VAR_57 | VAR_58 ) ) { case VAR_59 : if ( METHOD_11 ( VAR_60 , VAR_61 ) ) goto VAR_62 ; break ; case VAR_63 : if ( METHOD_12 ( VAR_64 , VAR_65 ) ) goto VAR_66 ; break ; } VAR_67 : return 0 ; VAR_68 : return - VAR_69 ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , struct STRUCT_OR_UNION_1 * VAR_1 , struct STRUCT_OR_UNION_2 * VAR_2 ) { METHOD_1 ( & VAR_3 -> VAR_4 , & VAR_5 -> VAR_6 , sizeof ( VAR_7 -> VAR_8 ) ) ; METHOD_2 ( & VAR_9 -> VAR_10 , & VAR_11 -> VAR_12 , sizeof ( VAR_13 -> VAR_14 ) ) ; METHOD_3 ( & VAR_15 -> VAR_16 , METHOD_4 ( VAR_17 -> VAR_18 ) , sizeof ( VAR_24 -> VAR_16 ) ) ; VAR_24 -> VAR_70 = 0 ; VAR_24 -> VAR_71 = 0 ; VAR_24 -> VAR_25 = METHOD_5 ( & VAR_26 -> VAR_27 ) ; if ( METHOD_6 ( VAR_28 , VAR_29 , VAR_30 -> VAR_31 ) ) goto VAR_32 ; if ( VAR_33 -> VAR_34 & VAR_35 ) { struct STRUCT_OR_UNION_3 VAR_36 ; METHOD_7 ( VAR_37 . VAR_38 , ""larval"" , sizeof ( VAR_42 . VAR_38 ) ) ; if ( METHOD_8 ( VAR_40 , VAR_41 , sizeof ( struct STRUCT_OR_UNION_4 ) , & VAR_42 ) ) goto VAR_43 ; goto VAR_44 ; } if ( VAR_45 -> VAR_46 && VAR_47 -> VAR_48 -> METHOD_9 ) { if ( VAR_49 -> VAR_50 -> METHOD_10 ( VAR_51 , VAR_52 ) ) goto VAR_53 ; goto VAR_54 ; } switch ( VAR_55 -> VAR_56 & ( VAR_57 | VAR_58 ) ) { case VAR_59 : if ( METHOD_11 ( VAR_60 , VAR_61 ) ) goto VAR_62 ; break ; case VAR_63 : if ( METHOD_12 ( VAR_64 , VAR_65 ) ) goto VAR_66 ; break ; } VAR_67 : return 0 ; VAR_68 : return - VAR_69 ; }",732
733,"static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 VAR_5 [ VAR_6 ] ; TYPE_6 VAR_7 [ VAR_8 ] ; VAR_9 * VAR_10 ; TYPE_7 VAR_11 ; TYPE_8 VAR_12 [ VAR_13 ] ; TYPE_9 VAR_14 = 0 ; struct STRUCT_OR_UNION_1 * VAR_15 ; if ( VAR_16 > VAR_17 - 1 ) { METHOD_1 ( VAR_18 , VAR_19 , ""Sourcestringtoolong"" ) ; goto VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 -> VAR_23 , VAR_24 , VAR_25 , VAR_26 | VAR_27 , VAR_28 , VAR_29 ) ; if ( VAR_30 == - 1 ) { METHOD_3 ( VAR_31 , ""Readfromclientfailed:%s"" , VAR_32 ) ; return - 1 ; } VAR_33 [ VAR_34 ] = '\\0' ; VAR_35 -= VAR_36 ;  if ( ( VAR_37 = METHOD_4 ( VAR_38 ,  1500 , 0 , 1000 , VAR_39 ) ) == VAR_40 ) goto VAR_41 ; if ( METHOD_5 ( VAR_42 , sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_43 , & VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) == - 1 ) goto VAR_49 ; METHOD_6 ( ( struct STRUCT_OR_UNION_3 * ) VAR_50 , VAR_51 , VAR_52 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_53 = ( struct STRUCT_OR_UNION_5 * ) & VAR_54 [ VAR_55 ] ; if ( METHOD_7 ( VAR_56 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_57 , & VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) == - 1 ) goto VAR_63 ; METHOD_8 ( VAR_64 , 0 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ; VAR_65 -> VAR_66 = METHOD_9 ( METHOD_10 ( VAR_67 ) ) ; VAR_68 -> VAR_69 = 0 ; METHOD_11 ( VAR_70 ) ; if ( METHOD_12 ( VAR_71 -> VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 ) == - 1 ) { METHOD_13 ( VAR_77 , ""Sendtoclientfailed:%s"" , VAR_78 ) ; return - 1 ; } return 0 ; VAR_79 : if ( METHOD_14 ( VAR_80 -> VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) == - 1 ) { METHOD_15 ( VAR_86 , ""Sendtoclientfailed:%s"" , VAR_87 ) ; return - 1 ; } if ( METHOD_16 ( VAR_88 -> VAR_89 , VAR_90 ) == - 1 ) { return - 1 ; } return 0 ; }","static TYPE_0 METHOD_0 ( TYPE_1 VAR_0 , struct STRUCT_OR_UNION_0 * VAR_1 , TYPE_2 VAR_2 , TYPE_3 * VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 VAR_5 [ VAR_6 ] ; TYPE_6 VAR_7 [ VAR_8 ] ; VAR_9 * VAR_10 ; TYPE_7 VAR_11 ; TYPE_8 VAR_12 [ VAR_13 ] ; TYPE_9 VAR_14 = 0 ; struct STRUCT_OR_UNION_1 * VAR_15 ; if ( METHOD_17 ( VAR_38 ) ) { METHOD_1 ( VAR_84 , VAR_76 , ""Sourcestringreferstoaremotedevice"" ) ; goto VAR_79 ; } if ( VAR_16 > VAR_17 - 1 ) { METHOD_1 ( VAR_18 , VAR_19 , ""Sourcestringtoolong"" ) ; goto VAR_20 ; } VAR_21 = METHOD_2 ( VAR_22 -> VAR_23 , VAR_24 , VAR_25 , VAR_26 | VAR_27 , VAR_28 , VAR_29 ) ; if ( VAR_30 == - 1 ) { METHOD_3 ( VAR_31 , ""Readfromclientfailed:%s"" , VAR_32 ) ; return - 1 ; } VAR_33 [ VAR_34 ] = '\\0' ; VAR_35 -= VAR_36 ; if ( ( VAR_37 = METHOD_4 ( VAR_38 , 1500 , 0 , 1000 , VAR_39 ) ) == VAR_40 ) goto VAR_41 ; if ( METHOD_5 ( VAR_42 , sizeof ( struct STRUCT_OR_UNION_2 ) , VAR_43 , & VAR_44 , VAR_45 , VAR_46 , VAR_47 , VAR_48 ) == - 1 ) goto VAR_49 ; METHOD_6 ( ( struct STRUCT_OR_UNION_3 * ) VAR_50 , VAR_51 , VAR_52 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ; VAR_53 = ( struct STRUCT_OR_UNION_5 * ) & VAR_54 [ VAR_55 ] ; if ( METHOD_7 ( VAR_56 , sizeof ( struct STRUCT_OR_UNION_6 ) , VAR_57 , & VAR_58 , VAR_59 , VAR_60 , VAR_61 , VAR_62 ) == - 1 ) goto VAR_63 ; METHOD_8 ( VAR_64 , 0 , sizeof ( struct STRUCT_OR_UNION_7 ) ) ; VAR_65 -> VAR_66 = METHOD_9 ( METHOD_10 ( VAR_67 ) ) ; VAR_68 -> VAR_69 = 0 ; METHOD_11 ( VAR_70 ) ; if ( METHOD_12 ( VAR_71 -> VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 ) == - 1 ) { METHOD_13 ( VAR_77 , ""Sendtoclientfailed:%s"" , VAR_78 ) ; return - 1 ; } return 0 ; VAR_79 : if ( METHOD_14 ( VAR_80 -> VAR_81 , VAR_82 , VAR_83 , VAR_84 , VAR_85 ) == - 1 ) { METHOD_15 ( VAR_86 , ""Sendtoclientfailed:%s"" , VAR_87 ) ; return - 1 ; } if ( METHOD_16 ( VAR_88 -> VAR_89 , VAR_90 ) == - 1 ) { return - 1 ; } return 0 ; }",733
734,"TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 ) { TYPE_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; METHOD_2 ( VAR_6 , & VAR_7 ) ;  METHOD_3 ( VAR_8 , VAR_9 , VAR_10 ) ;  METHOD_4 ( & VAR_11 ) ; }","TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 * VAR_1 , TYPE_2 VAR_2 , const TYPE_3 * VAR_3 ) { TYPE_4 * VAR_4 = METHOD_1 ( VAR_5 ) ; METHOD_2 ( VAR_6 , & VAR_7 ) ; METHOD_3 ( VAR_8 , VAR_9 , VAR_10 ) ; METHOD_4 ( & VAR_11 ) ; }",734
735,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 ,  TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 )  { struct STRUCT_OR_UNION_1 VAR_5 , VAR_6 ; TYPE_5 VAR_7 , VAR_8 ; unsigned VAR_9 = VAR_10 ; TYPE_6 VAR_11 = 0 ; TYPE_7 VAR_12 = ! ( VAR_13 & ~ 0x3 ) ; TYPE_8 VAR_14 ; TYPE_9 VAR_15 ; TYPE_10 VAR_16 ; TYPE_11 VAR_17 = 0 ; METHOD_1 ( & VAR_18 , 0 , sizeof VAR_19 ) ; if ( VAR_20 -> VAR_21 == VAR_22 ) { VAR_23 -> VAR_24 -> METHOD_2 ( VAR_25 , & VAR_26 , & VAR_27 , VAR_28 , VAR_29 ) ; METHOD_3 ( & VAR_30 , VAR_31 << 4 ) ; goto VAR_32 ; } else if ( VAR_33 <= VAR_34 && VAR_35 -> VAR_36 == VAR_37 ) { METHOD_4 ( & VAR_38 , VAR_39 << 4 ) ; METHOD_5 ( & VAR_40 , 0xffff ) ; VAR_41 . VAR_42 = 3 ; VAR_43 . VAR_44 = 1 ; VAR_45 . VAR_46 = 1 ; VAR_47 . VAR_48 = 3 ; goto VAR_49 ; } VAR_50 = VAR_51 & 3 ; if ( ( VAR_52 == VAR_53 || ( VAR_54 == VAR_55 && ( VAR_56 -> VAR_57 != VAR_58 || VAR_59 != VAR_60 ) ) || VAR_61 == VAR_62 ) && VAR_63 ) goto VAR_64 ; if ( VAR_65 == VAR_66 && ( VAR_67 & ( 1 << 2 ) ) ) goto VAR_68 ; if ( VAR_69 ) goto VAR_70 ; VAR_71 = METHOD_6 ( VAR_72 , VAR_73 , & VAR_74 , & VAR_75 ) ; if ( VAR_76 != VAR_77 ) return VAR_78 ; VAR_79 = VAR_80 & 0xfffc ; VAR_81 = VAR_82 ? VAR_83 : VAR_84 ; if ( VAR_85 <= VAR_86 && ! VAR_87 . VAR_88 ) goto VAR_89 ; if ( ! VAR_90 . VAR_91 ) { VAR_92 = ( VAR_93 == VAR_94 ) ? VAR_95 : VAR_96 ; goto VAR_97 ; } VAR_98 = VAR_99 . VAR_100 ; switch ( VAR_101 ) { case VAR_102 : if ( VAR_103 != VAR_104 || ( VAR_105 . VAR_106 & 0xa ) != 0x2 || VAR_107 != VAR_108 ) goto VAR_109 ; break ; case VAR_110 : if ( ! ( VAR_111 . VAR_112 & 8 ) ) goto VAR_113 ; if ( VAR_114 . VAR_115 & 4 ) { if ( VAR_116 > VAR_117 ) goto VAR_118 ; } else { if ( VAR_119 > VAR_120 || VAR_121 != VAR_122 ) goto VAR_123 ; } if ( VAR_124 . VAR_125 && VAR_126 . VAR_127 ) { TYPE_12 VAR_128 = 0 ; VAR_129 -> VAR_130 -> METHOD_7 ( VAR_131 , VAR_132 , & VAR_133 ) ; if ( VAR_134 & VAR_135 ) goto VAR_136 ; } VAR_137 = ( VAR_138 & 0xfffc ) | VAR_139 ; break ; case VAR_140 : if ( VAR_141 . VAR_142 || ( VAR_143 . VAR_144 != 1 && VAR_145 . VAR_146 != 9 ) ) goto VAR_147 ; VAR_148 = VAR_149 ; VAR_150 . VAR_151 |= 2 ; VAR_152 = VAR_153 -> VAR_154 -> METHOD_8 ( VAR_155 , VAR_156 , & VAR_157 , & VAR_158 , sizeof ( VAR_159 ) , & VAR_160 -> VAR_161 ) ; if ( VAR_162 != VAR_163 ) return VAR_164 ; break ; case VAR_165 : if ( VAR_166 . VAR_167 || VAR_168 . VAR_169 != 2 ) goto VAR_170 ; break ; default : if ( ( VAR_171 . VAR_172 & 0xa ) == 0x8 || ( ( ( VAR_173 . VAR_174 & 0xc ) != 0xc ) && ( VAR_175 > VAR_176 && VAR_177 > VAR_178 ) ) ) goto VAR_179 ; break ; } if ( VAR_180 . VAR_181 ) { VAR_182 . VAR_183 |= 1 ; VAR_184 = METHOD_9 ( VAR_185 , VAR_186 , & VAR_187 ) ; if ( VAR_188 != VAR_189 ) return VAR_190 ; } else if ( VAR_191 -> VAR_192 == VAR_193 ) { VAR_194 = VAR_195 -> VAR_196 -> METHOD_10 ( VAR_197 , VAR_198 + 8 , & VAR_199 , sizeof ( VAR_200 ) , & VAR_201 -> VAR_202 ) ; if ( VAR_203 != VAR_204 ) return VAR_205 ; } VAR_206 : VAR_207 -> VAR_208 -> METHOD_11 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 , VAR_213 ) ;  return VAR_214 ;  VAR_215 : return METHOD_12 ( VAR_216 , VAR_217 , VAR_218 , VAR_219 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { struct STRUCT_OR_UNION_1 VAR_5 , VAR_6 ; TYPE_5 VAR_7 , VAR_8 ; unsigned VAR_9 = VAR_10 ; TYPE_6 VAR_11 = 0 ; TYPE_7 VAR_12 = ! ( VAR_13 & ~ 0x3 ) ; TYPE_8 VAR_14 ; TYPE_9 VAR_15 ; TYPE_10 VAR_16 ; TYPE_11 VAR_17 = 0 ; METHOD_1 ( & VAR_18 , 0 , sizeof VAR_19 ) ; if ( VAR_20 -> VAR_21 == VAR_22 ) { VAR_23 -> VAR_24 -> METHOD_2 ( VAR_25 , & VAR_26 , & VAR_27 , VAR_28 , VAR_29 ) ; METHOD_3 ( & VAR_30 , VAR_31 << 4 ) ; goto VAR_32 ; } else if ( VAR_33 <= VAR_34 && VAR_35 -> VAR_36 == VAR_37 ) { METHOD_4 ( & VAR_38 , VAR_39 << 4 ) ; METHOD_5 ( & VAR_40 , 0xffff ) ; VAR_41 . VAR_42 = 3 ; VAR_43 . VAR_44 = 1 ; VAR_45 . VAR_46 = 1 ; VAR_47 . VAR_48 = 3 ; goto VAR_49 ; } VAR_50 = VAR_51 & 3 ; if ( ( VAR_52 == VAR_53 || ( VAR_54 == VAR_55 && ( VAR_56 -> VAR_57 != VAR_58 || VAR_59 != VAR_60 ) ) || VAR_61 == VAR_62 ) && VAR_63 ) goto VAR_64 ; if ( VAR_65 == VAR_66 && ( VAR_67 & ( 1 << 2 ) ) ) goto VAR_68 ; if ( VAR_69 ) goto VAR_70 ; VAR_71 = METHOD_6 ( VAR_72 , VAR_73 , & VAR_74 , & VAR_75 ) ; if ( VAR_76 != VAR_77 ) return VAR_78 ; VAR_79 = VAR_80 & 0xfffc ; VAR_81 = VAR_82 ? VAR_83 : VAR_84 ; if ( VAR_85 <= VAR_86 && ! VAR_87 . VAR_88 ) goto VAR_89 ; if ( ! VAR_90 . VAR_91 ) { VAR_92 = ( VAR_93 == VAR_94 ) ? VAR_95 : VAR_96 ; goto VAR_97 ; } VAR_98 = VAR_99 . VAR_100 ; switch ( VAR_101 ) { case VAR_102 : if ( VAR_103 != VAR_104 || ( VAR_105 . VAR_106 & 0xa ) != 0x2 || VAR_107 != VAR_108 ) goto VAR_109 ; break ; case VAR_110 : if ( ! ( VAR_111 . VAR_112 & 8 ) ) goto VAR_113 ; if ( VAR_114 . VAR_115 & 4 ) { if ( VAR_116 > VAR_117 ) goto VAR_118 ; } else { if ( VAR_119 > VAR_120 || VAR_121 != VAR_122 ) goto VAR_123 ; } if ( VAR_124 . VAR_125 && VAR_126 . VAR_127 ) { TYPE_12 VAR_128 = 0 ; VAR_129 -> VAR_130 -> METHOD_7 ( VAR_131 , VAR_132 , & VAR_133 ) ; if ( VAR_134 & VAR_135 ) goto VAR_136 ; } VAR_137 = ( VAR_138 & 0xfffc ) | VAR_139 ; break ; case VAR_140 : if ( VAR_141 . VAR_142 || ( VAR_143 . VAR_144 != 1 && VAR_145 . VAR_146 != 9 ) ) goto VAR_147 ; VAR_148 = VAR_149 ; VAR_150 . VAR_151 |= 2 ; VAR_152 = VAR_153 -> VAR_154 -> METHOD_8 ( VAR_155 , VAR_156 , & VAR_157 , & VAR_158 , sizeof ( VAR_159 ) , & VAR_160 -> VAR_161 ) ; if ( VAR_162 != VAR_163 ) return VAR_164 ; break ; case VAR_165 : if ( VAR_166 . VAR_167 || VAR_168 . VAR_169 != 2 ) goto VAR_170 ; break ; default : if ( ( VAR_171 . VAR_172 & 0xa ) == 0x8 || ( ( ( VAR_173 . VAR_174 & 0xc ) != 0xc ) && ( VAR_175 > VAR_176 && VAR_177 > VAR_178 ) ) ) goto VAR_179 ; break ; } if ( VAR_180 . VAR_181 ) { VAR_182 . VAR_183 |= 1 ; VAR_184 = METHOD_9 ( VAR_185 , VAR_186 , & VAR_187 ) ; if ( VAR_188 != VAR_189 ) return VAR_190 ; } else if ( VAR_191 -> VAR_192 == VAR_193 ) { VAR_194 = VAR_195 -> VAR_196 -> METHOD_10 ( VAR_197 , VAR_198 + 8 , & VAR_199 , sizeof ( VAR_200 ) , & VAR_201 -> VAR_202 ) ; if ( VAR_203 != VAR_204 ) return VAR_205 ; } VAR_206 : VAR_207 -> VAR_208 -> METHOD_11 ( VAR_209 , VAR_210 , & VAR_211 , VAR_212 , VAR_213 ) ; if ( VAR_220 ) * VAR_220 = VAR_211 ; return VAR_214 ; VAR_215 : return METHOD_12 ( VAR_216 , VAR_217 , VAR_218 , VAR_219 ) ; }",735
736,"static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 ) {  struct STRUCT_OR_UNION_1 VAR_4 ;  unsigned TYPE_4 VAR_5 ; union STRUCT_OR_UNION_2 * VAR_6 ; TYPE_5 VAR_7 ;  VAR_8 . VAR_9 = VAR_10 ;  VAR_11 . VAR_12 = VAR_13 ; VAR_14 . VAR_15 = VAR_16 ; METHOD_1 ( & VAR_17 -> VAR_18 , VAR_19 ) ; VAR_20 = & VAR_21 -> VAR_22 ; switch ( VAR_23 -> VAR_24 -> VAR_25 ) { case VAR_26 :  METHOD_2 ( METHOD_3 ( & VAR_27 -> VAR_28 , VAR_29 -> VAR_30 . VAR_31 ) ,  & VAR_32 , sizeof ( VAR_33 ) ) ; break ; case VAR_34 :  METHOD_4 ( METHOD_5 ( & VAR_35 -> VAR_36 , VAR_37 -> VAR_38 . VAR_39 ) ,  & VAR_40 , sizeof ( VAR_41 ) ) ; break ; case VAR_42 :  METHOD_6 ( METHOD_7 ( & VAR_43 -> VAR_44 , VAR_45 -> VAR_46 . VAR_47 ) ,  & VAR_48 , sizeof ( VAR_49 ) ) ; break ; default : METHOD_8 ( ) ;  }  VAR_50 -> VAR_51 . VAR_52 ++ ; METHOD_9 ( & VAR_53 -> VAR_54 , VAR_55 ) ; METHOD_10 ( & VAR_56 -> VAR_57 , VAR_58 ) ; if ( VAR_59 ) METHOD_11 ( VAR_60 -> VAR_61 ) ; }","static TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 * VAR_0 , TYPE_1 VAR_1 , unsigned TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { struct STRUCT_OR_UNION_1 * VAR_4 ; unsigned TYPE_4 VAR_5 ; union STRUCT_OR_UNION_2 * VAR_6 ; TYPE_5 VAR_7 ; VAR_8 . VAR_9 = VAR_10 ; VAR_11 . VAR_12 = VAR_13 ; VAR_14 . VAR_15 = VAR_16 ; METHOD_1 ( & VAR_17 -> VAR_18 , VAR_19 ) ; VAR_20 = & VAR_21 -> VAR_22 ; switch ( VAR_23 -> VAR_24 -> VAR_25 ) { case VAR_26 : VAR_49 = METHOD_7 ( & VAR_43 -> VAR_44 , VAR_45 -> VAR_46 . VAR_47 ) , & VAR_48 , sizeof ( VAR_49 ) ) ; break ; default : METHOD_8 ( ) ; } VAR_49 -> VAR_10 = VAR_10 ; VAR_49 -> VAR_12 = VAR_13 ; VAR_49 -> VAR_15 = VAR_16 ; VAR_50 -> VAR_51 . VAR_52 ++ ; METHOD_9 ( & VAR_53 -> VAR_54 , VAR_55 ) ; METHOD_10 ( & VAR_56 -> VAR_57 , VAR_58 ) ; if ( VAR_59 ) METHOD_11 ( VAR_60 -> VAR_61 ) ; }",736
737,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 ; VAR_6 * VAR_7 ; if ( VAR_8 ) { TYPE_6 VAR_9 [ 1024 ] ; METHOD_1 ( VAR_10 , VAR_11 ) ; if ( ! VAR_12 ) { TYPE_7 * VAR_13 = METHOD_2 ( VAR_14 , '.' ) ; if ( VAR_15 ) VAR_16 [ 0 ] = 0 ; METHOD_3 ( VAR_17 , ""_sdp.txt"" ) ; } VAR_18 = METHOD_4 ( VAR_19 , ""wt"" ) ; if ( ! VAR_20 ) { METHOD_5 ( VAR_21 , ""Failedtoopen%sfordumping\\n"" , VAR_22 ) ; return ; } } else { VAR_23 = VAR_24 ; METHOD_6 ( VAR_25 , ""*FileSDPcontent*\\n\\n"" ) ; } METHOD_7 ( VAR_26 , & VAR_27 , & VAR_28 ) ;  METHOD_8 ( VAR_29 , ""%s"" , VAR_30 ) ;  METHOD_9 ( VAR_31 , ""\\r\\n"" ) ; for ( VAR_32 = 0 ; VAR_33 < METHOD_10 ( VAR_34 ) ; VAR_35 ++ ) { if ( METHOD_11 ( VAR_36 , VAR_37 + 1 ) != VAR_38 ) continue ; METHOD_12 ( VAR_39 , VAR_40 + 1 , & VAR_41 , & VAR_42 ) ; METHOD_13 ( VAR_43 , ""%s"" , VAR_44 ) ; } METHOD_14 ( VAR_45 , ""\\n\\n"" ) ; if ( VAR_46 ) METHOD_15 ( VAR_47 ) ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 ) { const TYPE_4 * VAR_3 ; TYPE_5 VAR_4 , VAR_5 ; VAR_6 * VAR_7 ; if ( VAR_8 ) { TYPE_6 VAR_9 [ 1024 ] ; METHOD_1 ( VAR_10 , VAR_11 ) ; if ( ! VAR_12 ) { TYPE_7 * VAR_13 = METHOD_2 ( VAR_14 , '.' ) ; if ( VAR_15 ) VAR_16 [ 0 ] = 0 ; METHOD_3 ( VAR_17 , ""_sdp.txt"" ) ; } VAR_18 = METHOD_4 ( VAR_19 , ""wt"" ) ; if ( ! VAR_20 ) { METHOD_5 ( VAR_21 , ""Failedtoopen%sfordumping\\n"" , VAR_22 ) ; return ; } } else { VAR_23 = VAR_24 ; METHOD_6 ( VAR_25 , ""*FileSDPcontent*\\n\\n"" ) ; } METHOD_7 ( VAR_26 , & VAR_27 , & VAR_28 ) ; METHOD_8 ( VAR_29 , ""%s"" , VAR_30 ) ; METHOD_9 ( VAR_31 , ""\\r\\n"" ) ; for ( VAR_32 = 0 ; VAR_33 < METHOD_10 ( VAR_34 ) ; VAR_35 ++ ) { if ( METHOD_11 ( VAR_36 , VAR_37 + 1 ) != VAR_38 ) continue ; METHOD_12 ( VAR_39 , VAR_40 + 1 , & VAR_41 , & VAR_42 ) ; if ( VAR_44 && VAR_42 ) METHOD_13 ( VAR_43 , ""%s"" , VAR_44 ) ; } METHOD_14 ( VAR_45 , ""\\n\\n"" ) ; if ( VAR_46 ) METHOD_15 ( VAR_47 ) ; }",737
738,"TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 [ sizeof ( VAR_9 ) + 65536 ] ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 ; TYPE_12 * VAR_12 = VAR_13 ; TYPE_13 VAR_14 = { 0 } ; TYPE_14 * VAR_15 = VAR_16 , * VAR_17 , * VAR_18 = VAR_19 ; TYPE_15 * VAR_20 = VAR_21 ; VAR_22 = METHOD_1 ( VAR_23 ) ; if ( VAR_24 > sizeof ( VAR_25 ) + 65536 ) { VAR_26 = sizeof ( VAR_27 ) + 65536 ; if ( VAR_28 == METHOD_2 ( VAR_29 , - VAR_30 , VAR_31 ) ) { METHOD_3 ( VAR_32 ) ; if ( VAR_33 ) { METHOD_4 ( VAR_34 , 4096 , ""pharerror:unabletosearchforendofcentraldirectoryinzip-basedphar\\""%s\\"""" , VAR_35 ) ; } return VAR_36 ; } } else { METHOD_5 ( VAR_37 , 0 , VAR_38 ) ; } if ( ! METHOD_6 ( VAR_39 , VAR_40 , VAR_41 ) ) { METHOD_7 ( VAR_42 ) ; if ( VAR_43 ) { METHOD_8 ( VAR_44 , 4096 , ""pharerror:unabletoreadindatatosearchforendofcentraldirectoryinzip-basedphar\\""%s\\"""" , VAR_45 ) ; } return VAR_46 ; } while ( ( VAR_47 = ( TYPE_16 * ) METHOD_9 ( VAR_48 + 1 , 'P' , ( TYPE_17 ) ( VAR_49 - ( VAR_50 + 1 - VAR_51 ) ) ) ) != VAR_52 ) { if ( ( VAR_53 - VAR_54 ) + sizeof ( VAR_55 ) <= VAR_56 && ! METHOD_10 ( VAR_57 + 1 , ""K\\5\\6"" , 3 ) ) { METHOD_11 ( ( TYPE_18 * ) & VAR_58 , ( TYPE_19 * ) VAR_59 , sizeof ( VAR_60 ) ) ; if ( METHOD_12 ( VAR_61 . VAR_62 ) != 0 || METHOD_13 ( VAR_63 . VAR_64 ) != 0 ) { METHOD_14 ( VAR_65 ) ; if ( VAR_66 ) { METHOD_15 ( VAR_67 , 4096 , ""pharerror:splitarchivesspanningmultiplezipscannotbeprocessedinzip-basedphar\\""%s\\"""" , VAR_68 ) ; } return VAR_69 ; } if ( METHOD_16 ( VAR_70 . VAR_71 ) != METHOD_17 ( VAR_72 . VAR_73 ) ) { if ( VAR_74 ) { METHOD_18 ( VAR_75 , 4096 , ""pharerror:corruptziparchive,conflictingfilecountinendofcentraldirectoryrecordinzip-basedphar\\""%s\\"""" , VAR_76 ) ; } METHOD_19 ( VAR_77 ) ; return VAR_78 ; } VAR_79 = METHOD_20 ( 1 , sizeof ( TYPE_20 ) , METHOD_21 ( VAR_80 ) ) ; VAR_81 -> VAR_82 = METHOD_22 ( VAR_83 ) ; if ( METHOD_23 ( VAR_84 . VAR_85 ) ) { VAR_86 = VAR_87 + sizeof ( VAR_88 ) ; if ( METHOD_24 ( VAR_89 . VAR_90 ) != VAR_91 - ( VAR_92 - VAR_93 ) ) { if ( VAR_94 ) { METHOD_25 ( VAR_95 , 4096 , ""pharerror:corruptziparchive,zipfilecommenttruncatedinzip-basedphar\\""%s\\"""" , VAR_96 ) ; } METHOD_26 ( VAR_97 ) ; METHOD_27 ( VAR_98 , VAR_99 -> VAR_100 ) ; return VAR_101 ; } VAR_102 -> VAR_103 = METHOD_28 ( VAR_104 . VAR_105 ) ; if ( METHOD_29 ( & VAR_106 , & VAR_107 -> VAR_108 , METHOD_30 ( VAR_109 . VAR_110 ) ) == VAR_111 ) { VAR_112 -> VAR_113 = 0 ; METHOD_31 ( & VAR_114 -> VAR_115 , METHOD_32 ( VAR_116 , METHOD_33 ( VAR_117 . VAR_118 ) , VAR_119 -> VAR_120 ) ) ; } } else { METHOD_34 ( & VAR_121 -> VAR_122 ) ; } goto VAR_123 ; } } METHOD_35 ( VAR_124 ) ; if ( VAR_125 ) { METHOD_36 ( VAR_126 , 4096 , ""pharerror:endofcentraldirectorynotfoundinzip-basedphar\\""%s\\"""" , VAR_127 ) ; } return VAR_128 ; VAR_129 : VAR_130 -> VAR_131 = METHOD_37 ( VAR_132 , VAR_133 , VAR_134 -> VAR_135 ) ; TYPE_21 TYPE_22 TYPE_23 ( VAR_136 -> VAR_137 , VAR_138 ) ; VAR_139 -> VAR_140 = 1 ; VAR_141 -> VAR_142 = VAR_143 ; VAR_144 = METHOD_38 ( VAR_145 -> VAR_146 , '/' ) ; if ( VAR_147 ) { VAR_148 -> VAR_149 = METHOD_39 ( VAR_150 , '.' , ( VAR_151 -> VAR_152 + VAR_153 ) - VAR_154 ) ; if ( VAR_155 -> VAR_156 == VAR_157 ) { VAR_158 -> VAR_159 = METHOD_40 ( VAR_160 + 1 , '.' , ( VAR_161 -> VAR_162 + VAR_163 ) - VAR_164 - 1 ) ; } if ( VAR_165 -> VAR_166 ) { VAR_167 -> VAR_168 = ( VAR_169 -> VAR_170 + VAR_171 ) - VAR_172 -> VAR_173 ; } } METHOD_41 ( VAR_174 , METHOD_42 ( VAR_175 . VAR_176 ) , VAR_177 ) ; METHOD_43 ( & VAR_178 -> VAR_179 , METHOD_44 ( VAR_180 . VAR_181 ) , VAR_182 , VAR_183 , ( TYPE_24 ) VAR_184 -> VAR_185 ) ; METHOD_45 ( & VAR_186 -> VAR_187 , 5 , VAR_188 , VAR_189 , ( TYPE_25 ) VAR_190 -> VAR_191 ) ; METHOD_46 ( & VAR_192 -> VAR_193 , METHOD_47 ( VAR_194 . VAR_195 ) * 2 , VAR_196 , VAR_197 , ( TYPE_26 ) VAR_198 -> VAR_199 ) ; VAR_200 . VAR_201 = VAR_202 ; VAR_203 . VAR_204 = 1 ; VAR_205 . VAR_206 = VAR_207 ; VAR_208 . VAR_209 = VAR_210 -> VAR_211 ; METHOD_48 ( TYPE_27 , VAR_212 ) METHOD_49 ( & VAR_213 -> VAR_214 ) ; VAR_215 -> VAR_216 . VAR_217 . VAR_218 = 0 ; METHOD_50 ( & VAR_219 -> VAR_220 ) ; VAR_221 -> VAR_222 . VAR_223 . VAR_224 = 0 ; METHOD_51 ( & VAR_225 -> VAR_226 ) ; VAR_227 -> VAR_228 . VAR_229 . VAR_230 = 0 ; METHOD_52 ( VAR_231 ) ; METHOD_53 ( & VAR_232 -> VAR_233 ) ; if ( VAR_234 -> VAR_235 ) { METHOD_54 ( VAR_236 -> VAR_237 ) ; } if ( VAR_238 ) { METHOD_55 ( VAR_239 , 4096 , ""pharerror:%sinzip-basedphar\\""%s\\"""" , TYPE_28 , VAR_240 -> VAR_241 ) ; } METHOD_56 ( VAR_242 -> VAR_243 , VAR_244 -> VAR_245 ) ; if ( VAR_246 -> VAR_247 ) { METHOD_57 ( VAR_248 -> VAR_249 , VAR_250 -> VAR_251 ) ; } METHOD_58 ( VAR_252 , VAR_253 -> VAR_254 ) ; METHOD_59 ( VAR_255 ) ; return VAR_256 ; METHOD_60 ( TYPE_29 ) METHOD_61 ( & VAR_257 -> VAR_258 ) ; VAR_259 -> VAR_260 . VAR_261 . VAR_262 = 0 ; METHOD_62 ( & VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 . VAR_267 . VAR_268 = 0 ; METHOD_63 ( & VAR_269 -> VAR_270 ) ; VAR_271 -> VAR_272 . VAR_273 . VAR_274 = 0 ; METHOD_64 ( VAR_275 ) ; METHOD_65 ( & VAR_276 -> VAR_277 ) ; if ( VAR_278 -> VAR_279 ) { METHOD_66 ( VAR_280 -> VAR_281 ) ; } if ( VAR_282 ) { METHOD_67 ( VAR_283 , 4096 , ""pharerror:%sinzip-basedphar\\""%s\\"""" , TYPE_30 , VAR_284 -> VAR_285 ) ; } METHOD_68 ( VAR_286 -> VAR_287 , VAR_288 -> VAR_289 ) ; if ( VAR_290 -> VAR_291 ) { METHOD_69 ( VAR_292 -> VAR_293 , VAR_294 -> VAR_295 ) ; } METHOD_70 ( VAR_296 , VAR_297 -> VAR_298 ) ; return VAR_299 ; for ( VAR_300 = 0 ; VAR_301 < METHOD_71 ( VAR_302 . VAR_303 ) ; ++ VAR_304 ) { TYPE_31 VAR_305 ; TYPE_32 VAR_306 = METHOD_72 ( VAR_307 ) ; if ( sizeof ( VAR_308 ) != METHOD_73 ( VAR_309 , ( TYPE_33 * ) & VAR_310 , sizeof ( VAR_311 ) ) ) { METHOD_74 ( ""unabletoreadcentraldirectoryentry,truncated"" ) ; } if ( METHOD_75 ( ""PK\\1\\2"" , VAR_312 . VAR_313 , 4 ) ) { METHOD_76 ( ""corruptedcentraldirectoryentry,nomagicsignature"" ) ; } if ( VAR_314 . VAR_315 ) { VAR_316 . VAR_317 = VAR_318 ; } VAR_319 . VAR_320 = METHOD_77 ( VAR_321 . VAR_322 ) ; VAR_323 . VAR_324 = METHOD_78 ( VAR_325 . VAR_326 ) ; VAR_327 . VAR_328 = METHOD_79 ( VAR_329 . VAR_330 ) ; VAR_331 . VAR_332 = METHOD_80 ( VAR_333 . VAR_334 , VAR_335 . VAR_336 ) ; VAR_337 . VAR_338 = VAR_339 ; VAR_340 . VAR_341 = METHOD_81 ( VAR_342 . VAR_343 ) ; VAR_344 . VAR_345 = VAR_346 . VAR_347 = METHOD_82 ( VAR_348 . VAR_349 ) + sizeof ( TYPE_34 ) + METHOD_83 ( VAR_350 . VAR_351 ) + METHOD_84 ( VAR_352 . VAR_353 ) ; if ( METHOD_85 ( VAR_354 . VAR_355 ) & VAR_356 ) { METHOD_86 ( ""Cannotprocessencryptedzipfiles"" ) ; } if ( ! METHOD_87 ( VAR_357 . VAR_358 ) ) { METHOD_88 ( ""Cannotprocesszipscreatedfromstdin(zero-lengthfilename)"" ) ; } VAR_359 . VAR_360 = METHOD_89 ( VAR_361 . VAR_362 ) ; VAR_363 . VAR_364 = ( TYPE_35 * ) METHOD_90 ( VAR_365 . VAR_366 + 1 , VAR_367 . VAR_368 ) ; if ( VAR_369 . VAR_370 != METHOD_91 ( VAR_371 , VAR_372 . VAR_373 , VAR_374 . VAR_375 ) ) { METHOD_92 ( VAR_376 . VAR_377 , VAR_378 . VAR_379 ) ; METHOD_93 ( ""unabletoreadinfilenamefromcentraldirectory,truncated"" ) ; } VAR_380 . VAR_381 [ VAR_382 . VAR_383 ] = '\\0' ; if ( VAR_384 . VAR_385 [ VAR_386 . VAR_387 - 1 ] == '/' ) { VAR_388 . VAR_389 = 1 ; if ( VAR_390 . VAR_391 > 1 ) { VAR_392 . VAR_393 -- ; } VAR_394 . VAR_395 |= VAR_396 ; } else { VAR_397 . VAR_398 = 0 ; } if ( VAR_399 . VAR_400 == sizeof ( "".phar/signature.bin"" ) - 1 && ! METHOD_94 ( VAR_401 . VAR_402 , "".phar/signature.bin"" , sizeof ( "".phar/signature.bin"" ) - 1 ) ) { TYPE_36 VAR_403 ; TYPE_37 * VAR_404 ; TYPE_38 VAR_405 ; TYPE_39 * VAR_406 ; VAR_407 = METHOD_95 ( VAR_408 ) ; METHOD_96 ( VAR_409 . VAR_410 , VAR_411 . VAR_412 ) ; VAR_413 = METHOD_97 ( ) ; if ( ! VAR_414 ) { METHOD_98 ( ""couldn\'topentemporaryfile"" ) ; } METHOD_99 ( VAR_415 , 0 , VAR_416 ) ; METHOD_100 ( VAR_417 , VAR_418 , VAR_419 . VAR_420 , VAR_421 ) ; METHOD_101 ( VAR_422 , METHOD_102 ( VAR_423 . VAR_424 ) , VAR_425 ) ; METHOD_103 ( VAR_426 , VAR_427 , VAR_428 - METHOD_104 ( VAR_429 . VAR_430 ) , VAR_431 ) ; if ( VAR_432 ) { METHOD_105 ( VAR_433 , VAR_434 , METHOD_106 ( VAR_435 . VAR_436 ) ) ; } METHOD_107 ( VAR_437 , sizeof ( TYPE_40 ) + VAR_438 . VAR_439 + VAR_440 . VAR_441 + METHOD_108 ( VAR_442 . VAR_443 ) , VAR_444 ) ; VAR_445 = ( TYPE_41 * ) METHOD_109 ( VAR_446 . VAR_447 ) ; VAR_448 = METHOD_110 ( VAR_449 , VAR_450 , VAR_451 . VAR_452 ) ;  if ( VAR_453 != VAR_454 . VAR_455 ) {  METHOD_111 ( VAR_456 ) ; METHOD_112 ( VAR_457 ) ; METHOD_113 ( ""signaturecannotberead"" ) ; } VAR_458 -> VAR_459 = METHOD_114 ( VAR_460 ) ; if ( VAR_461 == METHOD_115 ( VAR_462 , METHOD_116 ( VAR_463 ) , VAR_464 -> VAR_465 , VAR_466 + 8 , VAR_467 . VAR_468 - 8 , VAR_469 , & VAR_470 -> VAR_471 , & VAR_472 -> VAR_473 , VAR_474 ) ) { METHOD_117 ( VAR_475 ) ; if ( VAR_476 ) { TYPE_42 * VAR_477 ; METHOD_118 ( VAR_478 ) ; METHOD_119 ( & VAR_479 , 4096 , ""signaturecannotbeverified:%s"" , * VAR_480 ) ; METHOD_120 ( * VAR_481 ) ; METHOD_121 ( VAR_482 , VAR_483 ) ; } else { METHOD_122 ( VAR_484 ) ; METHOD_123 ( ""signaturecannotbeverified"" ) ; } } METHOD_124 ( VAR_485 ) ; METHOD_125 ( VAR_486 ) ; if ( VAR_487 != METHOD_126 ( VAR_488 . VAR_489 ) - 1 ) { METHOD_127 ( ""entriesexistaftersignature,invalidphar"" ) ; } continue ; } METHOD_128 ( VAR_490 , VAR_491 . VAR_492 , VAR_493 . VAR_494 ) ; if ( METHOD_129 ( VAR_495 . VAR_496 ) ) { TYPE_43 VAR_497 = METHOD_130 ( VAR_498 ) ; if ( VAR_499 == METHOD_131 ( VAR_500 , & VAR_501 , METHOD_132 ( VAR_502 . VAR_503 ) ) ) { METHOD_133 ( VAR_504 . VAR_505 , VAR_506 . VAR_507 ) ; METHOD_134 ( ""Unabletoprocessextrafieldheaderforfileincentraldirectory"" ) ; } METHOD_135 ( VAR_508 , VAR_509 + METHOD_136 ( VAR_510 . VAR_511 ) , VAR_512 ) ; } switch ( METHOD_137 ( VAR_513 . VAR_514 ) ) { case VAR_515 : break ; case VAR_516 : VAR_517 . VAR_518 |= VAR_519 ; if ( ! METHOD_138 ( VAR_520 ) ) { METHOD_139 ( VAR_521 . VAR_522 , VAR_523 . VAR_524 ) ; METHOD_140 ( ""zlibextensionisrequired"" ) ; } break ; case VAR_525 : VAR_526 . VAR_527 |= VAR_528 ; if ( ! METHOD_141 ( VAR_529 ) ) { METHOD_142 ( VAR_530 . VAR_531 , VAR_532 . VAR_533 ) ; METHOD_143 ( ""bzip2extensionisrequired"" ) ; } break ; case 1 : METHOD_144 ( VAR_534 . VAR_535 , VAR_536 . VAR_537 ) ; METHOD_145 ( ""unsupportedcompressionmethod(Shrunk)usedinthiszip"" ) ; case 2 : case 3 : case 4 : case 5 : METHOD_146 ( VAR_538 . VAR_539 , VAR_540 . VAR_541 ) ; METHOD_147 ( ""unsupportedcompressionmethod(Reduce)usedinthiszip"" ) ; case 6 : METHOD_148 ( VAR_542 . VAR_543 , VAR_544 . VAR_545 ) ; METHOD_149 ( ""unsupportedcompressionmethod(Implode)usedinthiszip"" ) ; case 7 : METHOD_150 ( VAR_546 . VAR_547 , VAR_548 . VAR_549 ) ; METHOD_151 ( ""unsupportedcompressionmethod(Tokenize)usedinthiszip"" ) ; case 9 : METHOD_152 ( VAR_550 . VAR_551 , VAR_552 . VAR_553 ) ; METHOD_153 ( ""unsupportedcompressionmethod(Deflate64)usedinthiszip"" ) ; case 10 : METHOD_154 ( VAR_554 . VAR_555 , VAR_556 . VAR_557 ) ; METHOD_155 ( ""unsupportedcompressionmethod(PKWareImplode/oldIBMTERSE)usedinthiszip"" ) ; case 14 : METHOD_156 ( VAR_558 . VAR_559 , VAR_560 . VAR_561 ) ; METHOD_157 ( ""unsupportedcompressionmethod(LZMA)usedinthiszip"" ) ; case 18 : METHOD_158 ( VAR_562 . VAR_563 , VAR_564 . VAR_565 ) ; METHOD_159 ( ""unsupportedcompressionmethod(IBMTERSE)usedinthiszip"" ) ; case 19 : METHOD_160 ( VAR_566 . VAR_567 , VAR_568 . VAR_569 ) ; METHOD_161 ( ""unsupportedcompressionmethod(IBMLZ77)usedinthiszip"" ) ; case 97 : METHOD_162 ( VAR_570 . VAR_571 , VAR_572 . VAR_573 ) ; METHOD_163 ( ""unsupportedcompressionmethod(WavPack)usedinthiszip"" ) ; case 98 : METHOD_164 ( VAR_574 . VAR_575 , VAR_576 . VAR_577 ) ; METHOD_165 ( ""unsupportedcompressionmethod(PPMd)usedinthiszip"" ) ; default : METHOD_166 ( VAR_578 . VAR_579 , VAR_580 . VAR_581 ) ; METHOD_167 ( ""unsupportedcompressionmethod(unknown)usedinthiszip"" ) ; } if ( METHOD_168 ( VAR_582 . VAR_583 ) ) { if ( METHOD_169 ( VAR_584 . VAR_585 ) != METHOD_170 ( VAR_586 , VAR_587 , METHOD_171 ( VAR_588 . VAR_589 ) ) ) { METHOD_172 ( VAR_590 . VAR_591 , VAR_592 . VAR_593 ) ; METHOD_173 ( ""unabletoreadinfilecomment,truncated"" ) ; } VAR_594 = VAR_595 ; VAR_596 . VAR_597 = METHOD_174 ( VAR_598 . VAR_599 ) ; if ( METHOD_175 ( & VAR_600 , & ( VAR_601 . VAR_602 ) , METHOD_176 ( VAR_603 . VAR_604 ) ) == VAR_605 ) { VAR_606 . VAR_607 = 0 ; METHOD_177 ( & VAR_608 . VAR_609 , METHOD_178 ( VAR_610 , METHOD_179 ( VAR_611 . VAR_612 ) , VAR_613 . VAR_614 ) ) ; } } else { METHOD_180 ( & VAR_615 . VAR_616 ) ; } if ( ! VAR_617 && VAR_618 . VAR_619 == sizeof ( "".phar/alias.txt"" ) - 1 && ! METHOD_181 ( VAR_620 . VAR_621 , "".phar/alias.txt"" , sizeof ( "".phar/alias.txt"" ) - 1 ) ) { VAR_622 * VAR_623 ; TYPE_44 VAR_624 ; TYPE_45 VAR_625 ; VAR_626 = METHOD_182 ( VAR_627 ) ; METHOD_183 ( VAR_628 , METHOD_184 ( VAR_629 . VAR_630 ) , VAR_631 ) ; if ( sizeof ( VAR_632 ) != METHOD_185 ( VAR_633 , ( TYPE_46 * ) & VAR_634 , sizeof ( VAR_635 ) ) ) { METHOD_186 ( VAR_636 . VAR_637 , VAR_638 . VAR_639 ) ; METHOD_187 ( ""pharerror:internalcorruptionofzip-basedphar(cannotreadlocalfileheaderforalias)"" ) ; } if ( VAR_640 . VAR_641 != METHOD_188 ( VAR_642 . VAR_643 ) || VAR_644 . VAR_645 != METHOD_189 ( VAR_646 . VAR_647 ) || VAR_648 . VAR_649 != METHOD_190 ( VAR_650 . VAR_651 ) || VAR_652 . VAR_653 != METHOD_191 ( VAR_654 . VAR_655 ) ) { METHOD_192 ( VAR_656 . VAR_657 , VAR_658 . VAR_659 ) ; METHOD_193 ( ""pharerror:internalcorruptionofzip-basedphar(localheaderofaliasdoesnotmatchcentraldirectory)"" ) ; } VAR_660 . VAR_661 = VAR_662 . VAR_663 = sizeof ( VAR_664 ) + VAR_665 . VAR_666 + METHOD_194 ( VAR_667 . VAR_668 ) + METHOD_195 ( VAR_669 . VAR_670 ) ; METHOD_196 ( VAR_671 , VAR_672 . VAR_673 , VAR_674 ) ; VAR_675 -> VAR_676 = 0 ; VAR_677 -> VAR_678 = 0 ; METHOD_197 ( VAR_679 , VAR_680 . VAR_681 , VAR_682 ) ; VAR_683 -> VAR_684 = 0 ; VAR_685 -> VAR_686 = 0 ; VAR_687 -> VAR_688 = VAR_689 . VAR_690 ; if ( VAR_691 . VAR_692 & VAR_693 ) { VAR_694 = METHOD_198 ( ""zlib.inflate"" , VAR_695 , METHOD_199 ( VAR_696 ) ) ; if ( ! VAR_697 ) { METHOD_200 ( VAR_698 . VAR_699 , VAR_700 . VAR_701 ) ; METHOD_201 ( ""unabletodecompressalias,zlibfiltercreationfailed"" ) ; } METHOD_202 ( & VAR_702 -> VAR_703 , VAR_704 ) ; { TYPE_47 * VAR_705 = METHOD_203 ( VAR_706 , VAR_707 . VAR_708 , 0 ) ; if ( VAR_709 ) { VAR_710 . VAR_711 = METHOD_204 ( VAR_712 ) ; VAR_713 = METHOD_205 ( METHOD_206 ( VAR_714 ) , METHOD_207 ( VAR_715 ) ) ; METHOD_208 ( VAR_716 ) ; } else { VAR_717 = VAR_718 ; VAR_719 . VAR_720 = 0 ; } } if ( ! VAR_721 . VAR_722 || ! VAR_723 ) { METHOD_209 ( VAR_724 . VAR_725 , VAR_726 . VAR_727 ) ; METHOD_210 ( ""unabletoreadinalias,truncated"" ) ; } METHOD_211 ( VAR_728 , 1 ) ; METHOD_212 ( VAR_729 , 1 ) ; } else if ( VAR_730 . VAR_731 & VAR_732 ) { VAR_733 = METHOD_213 ( ""bzip2.decompress"" , VAR_734 , METHOD_214 ( VAR_735 ) ) ; if ( ! VAR_736 ) { METHOD_215 ( VAR_737 . VAR_738 , VAR_739 . VAR_740 ) ; METHOD_216 ( ""unabletoreadinalias,bzip2filtercreationfailed"" ) ; } METHOD_217 ( & VAR_741 -> VAR_742 , VAR_743 ) ; { TYPE_48 * VAR_744 = METHOD_218 ( VAR_745 , VAR_746 . VAR_747 , 0 ) ; if ( VAR_748 ) { VAR_749 . VAR_750 = METHOD_219 ( VAR_751 ) ; VAR_752 = METHOD_220 ( METHOD_221 ( VAR_753 ) , METHOD_222 ( VAR_754 ) ) ; METHOD_223 ( VAR_755 ) ; } else { VAR_756 = VAR_757 ; VAR_758 . VAR_759 = 0 ; } } if ( ! VAR_760 . VAR_761 || ! VAR_762 ) { METHOD_224 ( VAR_763 . VAR_764 , VAR_765 . VAR_766 ) ; METHOD_225 ( ""unabletoreadinalias,truncated"" ) ; } METHOD_226 ( VAR_767 , 1 ) ; METHOD_227 ( VAR_768 , 1 ) ; } else { { TYPE_49 * VAR_769 = METHOD_228 ( VAR_770 , VAR_771 . VAR_772 , 0 ) ; if ( VAR_773 ) { VAR_774 . VAR_775 = METHOD_229 ( VAR_776 ) ; VAR_777 = METHOD_230 ( METHOD_231 ( VAR_778 ) , METHOD_232 ( VAR_779 ) ) ; METHOD_233 ( VAR_780 ) ; } else { VAR_781 = VAR_782 ; VAR_783 . VAR_784 = 0 ; } } if ( ! VAR_785 . VAR_786 || ! VAR_787 ) { METHOD_234 ( VAR_788 . VAR_789 , VAR_790 . VAR_791 ) ; METHOD_235 ( ""unabletoreadinalias,truncated"" ) ; } } METHOD_236 ( VAR_792 , VAR_793 , VAR_794 ) ; } METHOD_237 ( & VAR_795 ) ; METHOD_238 ( & VAR_796 -> VAR_797 , VAR_798 . VAR_799 , VAR_800 . VAR_801 , ( TYPE_50 * ) & VAR_802 , sizeof ( TYPE_51 ) ) ; } VAR_803 -> VAR_804 = VAR_805 ; if ( METHOD_239 ( & ( VAR_806 -> VAR_807 ) , "".phar/stub.php"" , sizeof ( "".phar/stub.php"" ) - 1 ) ) { VAR_808 -> VAR_809 = 0 ; } else { VAR_810 -> VAR_811 = 1 ; } METHOD_240 ( & ( METHOD_241 ( VAR_812 ) ) , VAR_813 -> VAR_814 , VAR_815 , VAR_816 ) ; if ( VAR_817 ) { TYPE_52 * VAR_818 ; if ( ! METHOD_242 ( VAR_819 , VAR_820 -> VAR_821 ) ) { if ( VAR_822 ) { METHOD_243 ( VAR_823 , 4096 , ""pharerror:invalidalias\\""%s\\""inzip-basedphar\\""%s\\"""" , VAR_824 , VAR_825 ) ; } METHOD_244 ( VAR_826 ) ; METHOD_245 ( & ( METHOD_246 ( VAR_827 ) ) , VAR_828 -> VAR_829 , VAR_830 ) ; return VAR_831 ; } VAR_832 -> VAR_833 = 0 ; if ( VAR_834 != ( VAR_835 = METHOD_247 ( & ( METHOD_248 ( VAR_836 ) ) , VAR_837 , VAR_838 -> VAR_839 ) ) ) { if ( VAR_840 != METHOD_249 ( VAR_841 , VAR_842 , VAR_843 -> VAR_844 ) ) { if ( VAR_845 ) { METHOD_250 ( VAR_846 , 4096 , ""pharerror:Unabletoaddzip-basedphar\\""%s\\""withimplicitalias,aliasisalreadyinuse"" , VAR_847 ) ; } METHOD_251 ( VAR_848 ) ; METHOD_252 ( & ( METHOD_253 ( VAR_849 ) ) , VAR_850 -> VAR_851 , VAR_852 ) ; return VAR_853 ; } } VAR_854 -> VAR_855 = VAR_856 . VAR_857 ? METHOD_254 ( VAR_858 , VAR_859 -> VAR_860 , 1 ) : VAR_861 ; if ( VAR_862 . VAR_863 ) { METHOD_255 ( VAR_864 ) ; } METHOD_256 ( & ( METHOD_257 ( VAR_865 ) ) , VAR_866 , VAR_867 -> VAR_868 , VAR_869 ) ; } else { TYPE_53 * VAR_870 ; if ( VAR_871 ) { if ( VAR_872 != ( VAR_873 = METHOD_258 ( & ( METHOD_259 ( VAR_874 ) ) , VAR_875 , VAR_876 ) ) ) { if ( VAR_877 != METHOD_260 ( VAR_878 , VAR_879 , VAR_880 ) ) { if ( VAR_881 ) { METHOD_261 ( VAR_882 , 4096 , ""pharerror:Unabletoaddzip-basedphar\\""%s\\""withexplicitalias,aliasisalreadyinuse"" , VAR_883 ) ; } METHOD_262 ( & ( METHOD_263 ( VAR_884 ) ) , VAR_885 -> VAR_886 , VAR_887 ) ; return VAR_888 ; } } METHOD_264 ( & ( METHOD_265 ( VAR_889 ) ) , VAR_890 , VAR_891 -> VAR_892 , VAR_893 ) ; VAR_894 -> VAR_895 = METHOD_266 ( VAR_896 , VAR_897 , VAR_898 -> VAR_899 ) ; VAR_900 -> VAR_901 = VAR_902 ; } else { VAR_903 -> VAR_904 = METHOD_267 ( VAR_905 -> VAR_906 , VAR_907 , VAR_908 -> VAR_909 ) ; VAR_910 -> VAR_911 = VAR_912 ; } VAR_913 -> VAR_914 = 1 ; } if ( VAR_915 ) { * VAR_916 = VAR_917 ; } return VAR_918 ; }","TYPE_0 METHOD_0 ( TYPE_1 * VAR_0 , TYPE_2 * VAR_1 , TYPE_3 VAR_2 , TYPE_4 * VAR_3 , TYPE_5 VAR_4 , TYPE_6 * * VAR_5 , TYPE_7 * * VAR_6 ) { TYPE_8 VAR_7 ; TYPE_9 VAR_8 [ sizeof ( VAR_9 ) + 65536 ] ; TYPE_10 VAR_10 ; TYPE_11 VAR_11 ; TYPE_12 * VAR_12 = VAR_13 ; TYPE_13 VAR_14 = { 0 } ; TYPE_14 * VAR_15 = VAR_16 , * VAR_17 , * VAR_18 = VAR_19 ; TYPE_15 * VAR_20 = VAR_21 ; VAR_22 = METHOD_1 ( VAR_23 ) ; if ( VAR_24 > sizeof ( VAR_25 ) + 65536 ) { VAR_26 = sizeof ( VAR_27 ) + 65536 ; if ( VAR_28 == METHOD_2 ( VAR_29 , - VAR_30 , VAR_31 ) ) { METHOD_3 ( VAR_32 ) ; if ( VAR_33 ) { METHOD_4 ( VAR_34 , 4096 , ""pharerror:unabletosearchforendofcentraldirectoryinzip-basedphar\\""%s\\"""" , VAR_35 ) ; } return VAR_36 ; } } else { METHOD_5 ( VAR_37 , 0 , VAR_38 ) ; } if ( ! METHOD_6 ( VAR_39 , VAR_40 , VAR_41 ) ) { METHOD_7 ( VAR_42 ) ; if ( VAR_43 ) { METHOD_8 ( VAR_44 , 4096 , ""pharerror:unabletoreadindatatosearchforendofcentraldirectoryinzip-basedphar\\""%s\\"""" , VAR_45 ) ; } return VAR_46 ; } while ( ( VAR_47 = ( TYPE_16 * ) METHOD_9 ( VAR_48 + 1 , 'P' , ( TYPE_17 ) ( VAR_49 - ( VAR_50 + 1 - VAR_51 ) ) ) ) != VAR_52 ) { if ( ( VAR_53 - VAR_54 ) + sizeof ( VAR_55 ) <= VAR_56 && ! METHOD_10 ( VAR_57 + 1 , ""K\\5\\6"" , 3 ) ) { METHOD_11 ( ( TYPE_18 * ) & VAR_58 , ( TYPE_19 * ) VAR_59 , sizeof ( VAR_60 ) ) ; if ( METHOD_12 ( VAR_61 . VAR_62 ) != 0 || METHOD_13 ( VAR_63 . VAR_64 ) != 0 ) { METHOD_14 ( VAR_65 ) ; if ( VAR_66 ) { METHOD_15 ( VAR_67 , 4096 , ""pharerror:splitarchivesspanningmultiplezipscannotbeprocessedinzip-basedphar\\""%s\\"""" , VAR_68 ) ; } return VAR_69 ; } if ( METHOD_16 ( VAR_70 . VAR_71 ) != METHOD_17 ( VAR_72 . VAR_73 ) ) { if ( VAR_74 ) { METHOD_18 ( VAR_75 , 4096 , ""pharerror:corruptziparchive,conflictingfilecountinendofcentraldirectoryrecordinzip-basedphar\\""%s\\"""" , VAR_76 ) ; } METHOD_19 ( VAR_77 ) ; return VAR_78 ; } VAR_79 = METHOD_20 ( 1 , sizeof ( TYPE_20 ) , METHOD_21 ( VAR_80 ) ) ; VAR_81 -> VAR_82 = METHOD_22 ( VAR_83 ) ; if ( METHOD_23 ( VAR_84 . VAR_85 ) ) { VAR_86 = VAR_87 + sizeof ( VAR_88 ) ; if ( METHOD_24 ( VAR_89 . VAR_90 ) != VAR_91 - ( VAR_92 - VAR_93 ) ) { if ( VAR_94 ) { METHOD_25 ( VAR_95 , 4096 , ""pharerror:corruptziparchive,zipfilecommenttruncatedinzip-basedphar\\""%s\\"""" , VAR_96 ) ; } METHOD_26 ( VAR_97 ) ; METHOD_27 ( VAR_98 , VAR_99 -> VAR_100 ) ; return VAR_101 ; } VAR_102 -> VAR_103 = METHOD_28 ( VAR_104 . VAR_105 ) ; if ( METHOD_29 ( & VAR_106 , & VAR_107 -> VAR_108 , METHOD_30 ( VAR_109 . VAR_110 ) ) == VAR_111 ) { VAR_112 -> VAR_113 = 0 ; METHOD_31 ( & VAR_114 -> VAR_115 , METHOD_32 ( VAR_116 , METHOD_33 ( VAR_117 . VAR_118 ) , VAR_119 -> VAR_120 ) ) ; } } else { METHOD_34 ( & VAR_121 -> VAR_122 ) ; } goto VAR_123 ; } } METHOD_35 ( VAR_124 ) ; if ( VAR_125 ) { METHOD_36 ( VAR_126 , 4096 , ""pharerror:endofcentraldirectorynotfoundinzip-basedphar\\""%s\\"""" , VAR_127 ) ; } return VAR_128 ; VAR_129 : VAR_130 -> VAR_131 = METHOD_37 ( VAR_132 , VAR_133 , VAR_134 -> VAR_135 ) ; TYPE_21 TYPE_22 TYPE_23 ( VAR_136 -> VAR_137 , VAR_138 ) ; VAR_139 -> VAR_140 = 1 ; VAR_141 -> VAR_142 = VAR_143 ; VAR_144 = METHOD_38 ( VAR_145 -> VAR_146 , '/' ) ; if ( VAR_147 ) { VAR_148 -> VAR_149 = METHOD_39 ( VAR_150 , '.' , ( VAR_151 -> VAR_152 + VAR_153 ) - VAR_154 ) ; if ( VAR_155 -> VAR_156 == VAR_157 ) { VAR_158 -> VAR_159 = METHOD_40 ( VAR_160 + 1 , '.' , ( VAR_161 -> VAR_162 + VAR_163 ) - VAR_164 - 1 ) ; } if ( VAR_165 -> VAR_166 ) { VAR_167 -> VAR_168 = ( VAR_169 -> VAR_170 + VAR_171 ) - VAR_172 -> VAR_173 ; } } METHOD_41 ( VAR_174 , METHOD_42 ( VAR_175 . VAR_176 ) , VAR_177 ) ; METHOD_43 ( & VAR_178 -> VAR_179 , METHOD_44 ( VAR_180 . VAR_181 ) , VAR_182 , VAR_183 , ( TYPE_24 ) VAR_184 -> VAR_185 ) ; METHOD_45 ( & VAR_186 -> VAR_187 , 5 , VAR_188 , VAR_189 , ( TYPE_25 ) VAR_190 -> VAR_191 ) ; METHOD_46 ( & VAR_192 -> VAR_193 , METHOD_47 ( VAR_194 . VAR_195 ) * 2 , VAR_196 , VAR_197 , ( TYPE_26 ) VAR_198 -> VAR_199 ) ; VAR_200 . VAR_201 = VAR_202 ; VAR_203 . VAR_204 = 1 ; VAR_205 . VAR_206 = VAR_207 ; VAR_208 . VAR_209 = VAR_210 -> VAR_211 ; METHOD_48 ( TYPE_27 , VAR_212 ) METHOD_49 ( & VAR_213 -> VAR_214 ) ; VAR_215 -> VAR_216 . VAR_217 . VAR_218 = 0 ; METHOD_50 ( & VAR_219 -> VAR_220 ) ; VAR_221 -> VAR_222 . VAR_223 . VAR_224 = 0 ; METHOD_51 ( & VAR_225 -> VAR_226 ) ; VAR_227 -> VAR_228 . VAR_229 . VAR_230 = 0 ; METHOD_52 ( VAR_231 ) ; METHOD_53 ( & VAR_232 -> VAR_233 ) ; if ( VAR_234 -> VAR_235 ) { METHOD_54 ( VAR_236 -> VAR_237 ) ; } if ( VAR_238 ) { METHOD_55 ( VAR_239 , 4096 , ""pharerror:%sinzip-basedphar\\""%s\\"""" , TYPE_28 , VAR_240 -> VAR_241 ) ; } METHOD_56 ( VAR_242 -> VAR_243 , VAR_244 -> VAR_245 ) ; if ( VAR_246 -> VAR_247 ) { METHOD_57 ( VAR_248 -> VAR_249 , VAR_250 -> VAR_251 ) ; } METHOD_58 ( VAR_252 , VAR_253 -> VAR_254 ) ; METHOD_59 ( VAR_255 ) ; return VAR_256 ; METHOD_60 ( TYPE_29 ) METHOD_61 ( & VAR_257 -> VAR_258 ) ; VAR_259 -> VAR_260 . VAR_261 . VAR_262 = 0 ; METHOD_62 ( & VAR_263 -> VAR_264 ) ; VAR_265 -> VAR_266 . VAR_267 . VAR_268 = 0 ; METHOD_63 ( & VAR_269 -> VAR_270 ) ; VAR_271 -> VAR_272 . VAR_273 . VAR_274 = 0 ; METHOD_64 ( VAR_275 ) ; METHOD_65 ( & VAR_276 -> VAR_277 ) ; if ( VAR_278 -> VAR_279 ) { METHOD_66 ( VAR_280 -> VAR_281 ) ; } if ( VAR_282 ) { METHOD_67 ( VAR_283 , 4096 , ""pharerror:%sinzip-basedphar\\""%s\\"""" , TYPE_30 , VAR_284 -> VAR_285 ) ; } METHOD_68 ( VAR_286 -> VAR_287 , VAR_288 -> VAR_289 ) ; if ( VAR_290 -> VAR_291 ) { METHOD_69 ( VAR_292 -> VAR_293 , VAR_294 -> VAR_295 ) ; } METHOD_70 ( VAR_296 , VAR_297 -> VAR_298 ) ; return VAR_299 ; for ( VAR_300 = 0 ; VAR_301 < METHOD_71 ( VAR_302 . VAR_303 ) ; ++ VAR_304 ) { TYPE_31 VAR_305 ; TYPE_32 VAR_306 = METHOD_72 ( VAR_307 ) ; if ( sizeof ( VAR_308 ) != METHOD_73 ( VAR_309 , ( TYPE_33 * ) & VAR_310 , sizeof ( VAR_311 ) ) ) { METHOD_74 ( ""unabletoreadcentraldirectoryentry,truncated"" ) ; } if ( METHOD_75 ( ""PK\\1\\2"" , VAR_312 . VAR_313 , 4 ) ) { METHOD_76 ( ""corruptedcentraldirectoryentry,nomagicsignature"" ) ; } if ( VAR_314 . VAR_315 ) { VAR_316 . VAR_317 = VAR_318 ; } VAR_319 . VAR_320 = METHOD_77 ( VAR_321 . VAR_322 ) ; VAR_323 . VAR_324 = METHOD_78 ( VAR_325 . VAR_326 ) ; VAR_327 . VAR_328 = METHOD_79 ( VAR_329 . VAR_330 ) ; VAR_331 . VAR_332 = METHOD_80 ( VAR_333 . VAR_334 , VAR_335 . VAR_336 ) ; VAR_337 . VAR_338 = VAR_339 ; VAR_340 . VAR_341 = METHOD_81 ( VAR_342 . VAR_343 ) ; VAR_344 . VAR_345 = VAR_346 . VAR_347 = METHOD_82 ( VAR_348 . VAR_349 ) + sizeof ( TYPE_34 ) + METHOD_83 ( VAR_350 . VAR_351 ) + METHOD_84 ( VAR_352 . VAR_353 ) ; if ( METHOD_85 ( VAR_354 . VAR_355 ) & VAR_356 ) { METHOD_86 ( ""Cannotprocessencryptedzipfiles"" ) ; } if ( ! METHOD_87 ( VAR_357 . VAR_358 ) ) { METHOD_88 ( ""Cannotprocesszipscreatedfromstdin(zero-lengthfilename)"" ) ; } VAR_359 . VAR_360 = METHOD_89 ( VAR_361 . VAR_362 ) ; VAR_363 . VAR_364 = ( TYPE_35 * ) METHOD_90 ( VAR_365 . VAR_366 + 1 , VAR_367 . VAR_368 ) ; if ( VAR_369 . VAR_370 != METHOD_91 ( VAR_371 , VAR_372 . VAR_373 , VAR_374 . VAR_375 ) ) { METHOD_92 ( VAR_376 . VAR_377 , VAR_378 . VAR_379 ) ; METHOD_93 ( ""unabletoreadinfilenamefromcentraldirectory,truncated"" ) ; } VAR_380 . VAR_381 [ VAR_382 . VAR_383 ] = '\\0' ; if ( VAR_384 . VAR_385 [ VAR_386 . VAR_387 - 1 ] == '/' ) { VAR_388 . VAR_389 = 1 ; if ( VAR_390 . VAR_391 > 1 ) { VAR_392 . VAR_393 -- ; } VAR_394 . VAR_395 |= VAR_396 ; } else { VAR_397 . VAR_398 = 0 ; } if ( VAR_399 . VAR_400 == sizeof ( "".phar/signature.bin"" ) - 1 && ! METHOD_94 ( VAR_401 . VAR_402 , "".phar/signature.bin"" , sizeof ( "".phar/signature.bin"" ) - 1 ) ) { TYPE_36 VAR_403 ; TYPE_37 * VAR_404 ; TYPE_38 VAR_405 ; TYPE_39 * VAR_406 ; VAR_407 = METHOD_95 ( VAR_408 ) ; METHOD_96 ( VAR_409 . VAR_410 , VAR_411 . VAR_412 ) ; VAR_413 = METHOD_97 ( ) ; if ( ! VAR_414 ) { METHOD_98 ( ""couldn\'topentemporaryfile"" ) ; } METHOD_99 ( VAR_415 , 0 , VAR_416 ) ; METHOD_100 ( VAR_417 , VAR_418 , VAR_419 . VAR_420 , VAR_421 ) ; METHOD_101 ( VAR_422 , METHOD_102 ( VAR_423 . VAR_424 ) , VAR_425 ) ; METHOD_103 ( VAR_426 , VAR_427 , VAR_428 - METHOD_104 ( VAR_429 . VAR_430 ) , VAR_431 ) ; if ( VAR_432 ) { METHOD_105 ( VAR_433 , VAR_434 , METHOD_106 ( VAR_435 . VAR_436 ) ) ; } METHOD_107 ( VAR_437 , sizeof ( TYPE_40 ) + VAR_438 . VAR_439 + VAR_440 . VAR_441 + METHOD_108 ( VAR_442 . VAR_443 ) , VAR_444 ) ; VAR_445 = ( TYPE_41 * ) METHOD_109 ( VAR_446 . VAR_447 ) ; VAR_448 = METHOD_110 ( VAR_449 , VAR_450 , VAR_451 . VAR_452 ) ; if ( VAR_453 != VAR_454 . VAR_455 ) { METHOD_111 ( VAR_456 ) ; METHOD_112 ( VAR_457 ) ; METHOD_113 ( ""signaturecannotberead"" ) ; } VAR_458 -> VAR_459 = METHOD_114 ( VAR_460 ) ; if ( VAR_461 == METHOD_115 ( VAR_462 , METHOD_116 ( VAR_463 ) , VAR_464 -> VAR_465 , VAR_466 + 8 , VAR_467 . VAR_468 - 8 , VAR_469 , & VAR_470 -> VAR_471 , & VAR_472 -> VAR_473 , VAR_474 ) ) { METHOD_117 ( VAR_475 ) ; if ( VAR_476 ) { TYPE_42 * VAR_477 ; METHOD_118 ( VAR_478 ) ; METHOD_119 ( & VAR_479 , 4096 , ""signaturecannotbeverified:%s"" , * VAR_480 ) ; METHOD_120 ( * VAR_481 ) ; METHOD_121 ( VAR_482 , VAR_483 ) ; } else { METHOD_122 ( VAR_484 ) ; METHOD_123 ( ""signaturecannotbeverified"" ) ; } } METHOD_124 ( VAR_485 ) ; METHOD_125 ( VAR_486 ) ; if ( VAR_487 != METHOD_126 ( VAR_488 . VAR_489 ) - 1 ) { METHOD_127 ( ""entriesexistaftersignature,invalidphar"" ) ; } continue ; } METHOD_128 ( VAR_490 , VAR_491 . VAR_492 , VAR_493 . VAR_494 ) ; if ( METHOD_129 ( VAR_495 . VAR_496 ) ) { TYPE_43 VAR_497 = METHOD_130 ( VAR_498 ) ; if ( VAR_499 == METHOD_131 ( VAR_500 , & VAR_501 , METHOD_132 ( VAR_502 . VAR_503 ) ) ) { METHOD_133 ( VAR_504 . VAR_505 , VAR_506 . VAR_507 ) ; METHOD_134 ( ""Unabletoprocessextrafieldheaderforfileincentraldirectory"" ) ; } METHOD_135 ( VAR_508 , VAR_509 + METHOD_136 ( VAR_510 . VAR_511 ) , VAR_512 ) ; } switch ( METHOD_137 ( VAR_513 . VAR_514 ) ) { case VAR_515 : break ; case VAR_516 : VAR_517 . VAR_518 |= VAR_519 ; if ( ! METHOD_138 ( VAR_520 ) ) { METHOD_139 ( VAR_521 . VAR_522 , VAR_523 . VAR_524 ) ; METHOD_140 ( ""zlibextensionisrequired"" ) ; } break ; case VAR_525 : VAR_526 . VAR_527 |= VAR_528 ; if ( ! METHOD_141 ( VAR_529 ) ) { METHOD_142 ( VAR_530 . VAR_531 , VAR_532 . VAR_533 ) ; METHOD_143 ( ""bzip2extensionisrequired"" ) ; } break ; case 1 : METHOD_144 ( VAR_534 . VAR_535 , VAR_536 . VAR_537 ) ; METHOD_145 ( ""unsupportedcompressionmethod(Shrunk)usedinthiszip"" ) ; case 2 : case 3 : case 4 : case 5 : METHOD_146 ( VAR_538 . VAR_539 , VAR_540 . VAR_541 ) ; METHOD_147 ( ""unsupportedcompressionmethod(Reduce)usedinthiszip"" ) ; case 6 : METHOD_148 ( VAR_542 . VAR_543 , VAR_544 . VAR_545 ) ; METHOD_149 ( ""unsupportedcompressionmethod(Implode)usedinthiszip"" ) ; case 7 : METHOD_150 ( VAR_546 . VAR_547 , VAR_548 . VAR_549 ) ; METHOD_151 ( ""unsupportedcompressionmethod(Tokenize)usedinthiszip"" ) ; case 9 : METHOD_152 ( VAR_550 . VAR_551 , VAR_552 . VAR_553 ) ; METHOD_153 ( ""unsupportedcompressionmethod(Deflate64)usedinthiszip"" ) ; case 10 : METHOD_154 ( VAR_554 . VAR_555 , VAR_556 . VAR_557 ) ; METHOD_155 ( ""unsupportedcompressionmethod(PKWareImplode/oldIBMTERSE)usedinthiszip"" ) ; case 14 : METHOD_156 ( VAR_558 . VAR_559 , VAR_560 . VAR_561 ) ; METHOD_157 ( ""unsupportedcompressionmethod(LZMA)usedinthiszip"" ) ; case 18 : METHOD_158 ( VAR_562 . VAR_563 , VAR_564 . VAR_565 ) ; METHOD_159 ( ""unsupportedcompressionmethod(IBMTERSE)usedinthiszip"" ) ; case 19 : METHOD_160 ( VAR_566 . VAR_567 , VAR_568 . VAR_569 ) ; METHOD_161 ( ""unsupportedcompressionmethod(IBMLZ77)usedinthiszip"" ) ; case 97 : METHOD_162 ( VAR_570 . VAR_571 , VAR_572 . VAR_573 ) ; METHOD_163 ( ""unsupportedcompressionmethod(WavPack)usedinthiszip"" ) ; case 98 : METHOD_164 ( VAR_574 . VAR_575 , VAR_576 . VAR_577 ) ; METHOD_165 ( ""unsupportedcompressionmethod(PPMd)usedinthiszip"" ) ; default : METHOD_166 ( VAR_578 . VAR_579 , VAR_580 . VAR_581 ) ; METHOD_167 ( ""unsupportedcompressionmethod(unknown)usedinthiszip"" ) ; } if ( METHOD_168 ( VAR_582 . VAR_583 ) ) { if ( METHOD_169 ( VAR_584 . VAR_585 ) != METHOD_170 ( VAR_586 , VAR_587 , METHOD_171 ( VAR_588 . VAR_589 ) ) ) { METHOD_172 ( VAR_590 . VAR_591 , VAR_592 . VAR_593 ) ; METHOD_173 ( ""unabletoreadinfilecomment,truncated"" ) ; } VAR_594 = VAR_595 ; VAR_596 . VAR_597 = METHOD_174 ( VAR_598 . VAR_599 ) ; if ( METHOD_175 ( & VAR_600 , & ( VAR_601 . VAR_602 ) , METHOD_176 ( VAR_603 . VAR_604 ) ) == VAR_605 ) { VAR_606 . VAR_607 = 0 ; METHOD_177 ( & VAR_608 . VAR_609 , METHOD_178 ( VAR_610 , METHOD_179 ( VAR_611 . VAR_612 ) , VAR_613 . VAR_614 ) ) ; } } else { METHOD_180 ( & VAR_615 . VAR_616 ) ; } if ( ! VAR_617 && VAR_618 . VAR_619 == sizeof ( "".phar/alias.txt"" ) - 1 && ! METHOD_181 ( VAR_620 . VAR_621 , "".phar/alias.txt"" , sizeof ( "".phar/alias.txt"" ) - 1 ) ) { VAR_622 * VAR_623 ; TYPE_44 VAR_624 ; TYPE_45 VAR_625 ; VAR_626 = METHOD_182 ( VAR_627 ) ; METHOD_183 ( VAR_628 , METHOD_184 ( VAR_629 . VAR_630 ) , VAR_631 ) ; if ( sizeof ( VAR_632 ) != METHOD_185 ( VAR_633 , ( TYPE_46 * ) & VAR_634 , sizeof ( VAR_635 ) ) ) { METHOD_186 ( VAR_636 . VAR_637 , VAR_638 . VAR_639 ) ; METHOD_187 ( ""pharerror:internalcorruptionofzip-basedphar(cannotreadlocalfileheaderforalias)"" ) ; } if ( VAR_640 . VAR_641 != METHOD_188 ( VAR_642 . VAR_643 ) || VAR_644 . VAR_645 != METHOD_189 ( VAR_646 . VAR_647 ) || VAR_648 . VAR_649 != METHOD_190 ( VAR_650 . VAR_651 ) || VAR_652 . VAR_653 != METHOD_191 ( VAR_654 . VAR_655 ) ) { METHOD_192 ( VAR_656 . VAR_657 , VAR_658 . VAR_659 ) ; METHOD_193 ( ""pharerror:internalcorruptionofzip-basedphar(localheaderofaliasdoesnotmatchcentraldirectory)"" ) ; } VAR_660 . VAR_661 = VAR_662 . VAR_663 = sizeof ( VAR_664 ) + VAR_665 . VAR_666 + METHOD_194 ( VAR_667 . VAR_668 ) + METHOD_195 ( VAR_669 . VAR_670 ) ; METHOD_196 ( VAR_671 , VAR_672 . VAR_673 , VAR_674 ) ; VAR_675 -> VAR_676 = 0 ; VAR_677 -> VAR_678 = 0 ; METHOD_197 ( VAR_679 , VAR_680 . VAR_681 , VAR_682 ) ; VAR_683 -> VAR_684 = 0 ; VAR_685 -> VAR_686 = 0 ; VAR_687 -> VAR_688 = VAR_689 . VAR_690 ; if ( VAR_691 . VAR_692 & VAR_693 ) { VAR_694 = METHOD_198 ( ""zlib.inflate"" , VAR_695 , METHOD_199 ( VAR_696 ) ) ; if ( ! VAR_697 ) { METHOD_200 ( VAR_698 . VAR_699 , VAR_700 . VAR_701 ) ; METHOD_201 ( ""unabletodecompressalias,zlibfiltercreationfailed"" ) ; } METHOD_202 ( & VAR_702 -> VAR_703 , VAR_704 ) ; { TYPE_47 * VAR_705 = METHOD_203 ( VAR_706 , VAR_707 . VAR_708 , 0 ) ; if ( VAR_709 ) { VAR_710 . VAR_711 = METHOD_204 ( VAR_712 ) ; VAR_713 = METHOD_205 ( METHOD_206 ( VAR_714 ) , METHOD_207 ( VAR_715 ) ) ; METHOD_208 ( VAR_716 ) ; } else { VAR_717 = VAR_718 ; VAR_719 . VAR_720 = 0 ; } } if ( ! VAR_721 . VAR_722 || ! VAR_723 ) { METHOD_209 ( VAR_724 . VAR_725 , VAR_726 . VAR_727 ) ; METHOD_210 ( ""unabletoreadinalias,truncated"" ) ; } METHOD_211 ( VAR_728 , 1 ) ; METHOD_212 ( VAR_729 , 1 ) ; } else if ( VAR_730 . VAR_731 & VAR_732 ) { VAR_733 = METHOD_213 ( ""bzip2.decompress"" , VAR_734 , METHOD_214 ( VAR_735 ) ) ; if ( ! VAR_736 ) { METHOD_215 ( VAR_737 . VAR_738 , VAR_739 . VAR_740 ) ; METHOD_216 ( ""unabletoreadinalias,bzip2filtercreationfailed"" ) ; } METHOD_217 ( & VAR_741 -> VAR_742 , VAR_743 ) ; { TYPE_48 * VAR_744 = METHOD_218 ( VAR_745 , VAR_746 . VAR_747 , 0 ) ; if ( VAR_748 ) { VAR_749 . VAR_750 = METHOD_219 ( VAR_751 ) ; VAR_752 = METHOD_220 ( METHOD_221 ( VAR_753 ) , METHOD_222 ( VAR_754 ) ) ; METHOD_223 ( VAR_755 ) ; } else { VAR_756 = VAR_757 ; VAR_758 . VAR_759 = 0 ; } } if ( ! VAR_760 . VAR_761 || ! VAR_762 ) { METHOD_224 ( VAR_763 . VAR_764 , VAR_765 . VAR_766 ) ; METHOD_225 ( ""unabletoreadinalias,truncated"" ) ; } METHOD_226 ( VAR_767 , 1 ) ; METHOD_227 ( VAR_768 , 1 ) ; } else { { TYPE_49 * VAR_769 = METHOD_228 ( VAR_770 , VAR_771 . VAR_772 , 0 ) ; if ( VAR_773 ) { VAR_774 . VAR_775 = METHOD_229 ( VAR_776 ) ; VAR_777 = METHOD_230 ( METHOD_231 ( VAR_778 ) , METHOD_232 ( VAR_779 ) ) ; METHOD_233 ( VAR_780 ) ; } else { VAR_781 = VAR_782 ; VAR_783 . VAR_784 = 0 ; } } if ( ! VAR_785 . VAR_786 || ! VAR_787 ) { METHOD_234 ( VAR_788 . VAR_789 , VAR_790 . VAR_791 ) ; METHOD_235 ( ""unabletoreadinalias,truncated"" ) ; } } METHOD_236 ( VAR_792 , VAR_793 , VAR_794 ) ; } METHOD_237 ( & VAR_795 ) ; METHOD_238 ( & VAR_796 -> VAR_797 , VAR_798 . VAR_799 , VAR_800 . VAR_801 , ( TYPE_50 * ) & VAR_802 , sizeof ( TYPE_51 ) ) ; } VAR_803 -> VAR_804 = VAR_805 ; if ( METHOD_239 ( & ( VAR_806 -> VAR_807 ) , "".phar/stub.php"" , sizeof ( "".phar/stub.php"" ) - 1 ) ) { VAR_808 -> VAR_809 = 0 ; } else { VAR_810 -> VAR_811 = 1 ; } METHOD_240 ( & ( METHOD_241 ( VAR_812 ) ) , VAR_813 -> VAR_814 , VAR_815 , VAR_816 ) ; if ( VAR_817 ) { TYPE_52 * VAR_818 ; if ( ! METHOD_242 ( VAR_819 , VAR_820 -> VAR_821 ) ) { if ( VAR_822 ) { METHOD_243 ( VAR_823 , 4096 , ""pharerror:invalidalias\\""%s\\""inzip-basedphar\\""%s\\"""" , VAR_824 , VAR_825 ) ; } METHOD_244 ( VAR_826 ) ; METHOD_245 ( & ( METHOD_246 ( VAR_827 ) ) , VAR_828 -> VAR_829 , VAR_830 ) ; return VAR_831 ; } VAR_832 -> VAR_833 = 0 ; if ( VAR_834 != ( VAR_835 = METHOD_247 ( & ( METHOD_248 ( VAR_836 ) ) , VAR_837 , VAR_838 -> VAR_839 ) ) ) { if ( VAR_840 != METHOD_249 ( VAR_841 , VAR_842 , VAR_843 -> VAR_844 ) ) { if ( VAR_845 ) { METHOD_250 ( VAR_846 , 4096 , ""pharerror:Unabletoaddzip-basedphar\\""%s\\""withimplicitalias,aliasisalreadyinuse"" , VAR_847 ) ; } METHOD_251 ( VAR_848 ) ; METHOD_252 ( & ( METHOD_253 ( VAR_849 ) ) , VAR_850 -> VAR_851 , VAR_852 ) ; return VAR_853 ; } } VAR_854 -> VAR_855 = VAR_856 . VAR_857 ? METHOD_254 ( VAR_858 , VAR_859 -> VAR_860 , 1 ) : VAR_861 ; if ( VAR_862 . VAR_863 ) { METHOD_255 ( VAR_864 ) ; } METHOD_256 ( & ( METHOD_257 ( VAR_865 ) ) , VAR_866 , VAR_867 -> VAR_868 , VAR_869 ) ; } else { TYPE_53 * VAR_870 ; if ( VAR_871 ) { if ( VAR_872 != ( VAR_873 = METHOD_258 ( & ( METHOD_259 ( VAR_874 ) ) , VAR_875 , VAR_876 ) ) ) { if ( VAR_877 != METHOD_260 ( VAR_878 , VAR_879 , VAR_880 ) ) { if ( VAR_881 ) { METHOD_261 ( VAR_882 , 4096 , ""pharerror:Unabletoaddzip-basedphar\\""%s\\""withexplicitalias,aliasisalreadyinuse"" , VAR_883 ) ; } METHOD_262 ( & ( METHOD_263 ( VAR_884 ) ) , VAR_885 -> VAR_886 , VAR_887 ) ; return VAR_888 ; } } METHOD_264 ( & ( METHOD_265 ( VAR_889 ) ) , VAR_890 , VAR_891 -> VAR_892 , VAR_893 ) ; VAR_894 -> VAR_895 = METHOD_266 ( VAR_896 , VAR_897 , VAR_898 -> VAR_899 ) ; VAR_900 -> VAR_901 = VAR_902 ; } else { VAR_903 -> VAR_904 = METHOD_267 ( VAR_905 -> VAR_906 , VAR_907 , VAR_908 -> VAR_909 ) ; VAR_910 -> VAR_911 = VAR_912 ; } VAR_913 -> VAR_914 = 1 ; } if ( VAR_915 ) { * VAR_916 = VAR_917 ; } return VAR_918 ; }",738
