<S2SV_ModStart> VAR_47 ) { METHOD_1 ( & VAR_89 , 0 , sizeof ( VAR_89 ) ) ;
<S2SV_ModStart> = STRUCT_OR_UNION_18 ; if ( METHOD_20 ( STRUCT_OR_UNION_26 ) ) <S2SV_ModStart> , VAR_52 , VAR_79 ) ; else VAR_78 = METHOD_8 ( STRUCT_OR_UNION_14 , VAR_47 , VAR_67 , VAR_68 , VAR_50 , VAR_51 , VAR_52 ,
<S2SV_ModStart> TYPE_5 * VAR_30 <S2SV_ModEnd> ) { TYPE_4 <S2SV_ModStart> VAR_26 ) ; <S2SV_ModEnd> METHOD_10 ( VAR_32
<S2SV_ModStart> TYPE_1 ) { METHOD_39 ( <S2SV_ModEnd> 0 ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_3 VAR_87 ; TYPE_3 VAR_94 = 0 ; <S2SV_ModStart> VAR_53 ) { if ( VAR_94 == 4 ) { return VAR_93 ; } ++ VAR_94 ;
<S2SV_ModStart> VAR_495 . VAR_740 ) ; if ( VAR_495 . VAR_740 > METHOD_130 ( VAR_789 ) ) METHOD_129 ( VAR_788 , "ImproperImageHeader"
<S2SV_ModStart> * VAR_77 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_5 ; <S2SV_ModStart> = VAR_90 ; STRUCT_OR_UNION_5 = VAR_94 -> STRUCT_OR_UNION_5 ; VAR_99 = VAR_94 -> VAR_99 ; <S2SV_ModStart> ; METHOD_24 ( <S2SV_ModEnd> STRUCT_OR_UNION_5 ) ; <S2SV_ModStart> ; METHOD_25 ( <S2SV_ModEnd> VAR_99 ) ;
<S2SV_ModStart> VAR_87 ) ; METHOD_27 ( VAR_91 ) ;
<S2SV_ModStart> |= VAR_17 ; if ( VAR_13 -> VAR_14 & VAR_19 ) VAR_18 |= VAR_20 ;
<S2SV_ModStart> ) ) ; METHOD_55 ( VAR_167 -> VAR_72 ) ;
<S2SV_ModStart> & 0xFFFFFFFF ; TYPE_12 VAR_134 ; <S2SV_ModStart> ) continue ; <S2SV_ModEnd> VAR_134 = METHOD_2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_134 <= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> VAR_134 = METHOD_3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_134 <= 0 <S2SV_ModStart> <= 0 ) continue ; } VAR_144 -> VAR_134 = VAR_134 ; <S2SV_ModEnd> if ( VAR_117
<S2SV_ModStart> - VAR_64 ; if ( VAR_96 < 1 || VAR_96 == 0xffffffff ) { return - 1 ; }
<S2SV_ModStart> VAR_7 ) { struct STRUCT_OR_UNION_27 * VAR_70 , * VAR_71 ; TYPE_2 VAR_72 ; <S2SV_ModStart> VAR_69 ; } VAR_70 = METHOD_36 ( STRUCT_OR_UNION_26 ) ; VAR_71 = METHOD_36 ( VAR_65 ) ; <S2SV_ModStart> ) ; } VAR_72 = METHOD_37 ( STRUCT_OR_UNION_26 ) ; if ( VAR_72 ) { METHOD_38 ( STRUCT_OR_UNION_26 ) ; METHOD_39 ( VAR_65 ) ; } <S2SV_ModStart> 1 ) ; METHOD_40 ( & VAR_67 -> VAR_68 ) ; if ( VAR_71 != VAR_70 ) { METHOD_41 ( VAR_70 <S2SV_ModEnd> , VAR_63 ) <S2SV_ModStart> VAR_63 ) ; METHOD_42 ( VAR_71 <S2SV_ModEnd> , VAR_63 ) <S2SV_ModStart> ; if ( METHOD_32 ( STRUCT_OR_UNION_26 ) && <S2SV_ModStart> ( STRUCT_OR_UNION_26 ) ) { METHOD_41 ( VAR_70 , VAR_66 ) ; METHOD_42 ( VAR_71 , VAR_66 ) ; } if ( VAR_72 && METHOD_43 ( VAR_67 ) ) { METHOD_41 ( VAR_70 , VAR_73 ) ; METHOD_42 ( VAR_71 , VAR_73 ) ; } } METHOD_44 ( <S2SV_ModEnd> ) ; return
<S2SV_ModStart> , VAR_16 ) ; if ( METHOD_1 ( VAR_23 ) / sizeof ( TYPE_6 ) < VAR_16 ) return VAR_27
<S2SV_ModStart> VAR_23 -> VAR_8 ) ; if ( VAR_16 > VAR_54 ) return METHOD_8 ( - VAR_55
<S2SV_ModStart> << VAR_113 ; if ( VAR_143 & VAR_164 ) STRUCT_OR_UNION_38 -> VAR_143 |= 1 << VAR_165 ;
<S2SV_ModStart> VAR_116 && ! METHOD_37 <S2SV_ModEnd> ( VAR_150 ) <S2SV_ModStart> VAR_116 && ! METHOD_37 <S2SV_ModEnd> ( VAR_150 )
<S2SV_ModStart> VAR_28 ) { VAR_30 = METHOD_9 ( VAR_28 ) ? METHOD_6 ( VAR_28 ) : VAR_30 ; <S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } else VAR_30
<S2SV_ModStart> = VAR_65 ; if ( ! ( VAR_74 = METHOD_1 ( ( TYPE_6 ) METHOD_8 ) ) ) { return VAR_65 ; } TYPE_13 * VAR_62 = VAR_17 -> VAR_62 -> VAR_62 + ( TYPE_11 ) VAR_26 -> VAR_21 ; <S2SV_ModStart> VAR_62 -> VAR_9 - <S2SV_ModEnd> ( TYPE_11 )
<S2SV_ModStart> VAR_61 ) { METHOD_11 <S2SV_ModEnd> ( VAR_61 )
<S2SV_ModStart> VAR_83 ) ; <S2SV_ModEnd> VAR_65 = ( <S2SV_ModStart> VAR_83 ) ; if ( VAR_27 == VAR_63 -> VAR_81 ) VAR_67 = 1 ; if ( VAR_31 == VAR_63 -> VAR_81 ) return METHOD_12 ( STRUCT_OR_UNION_12 , VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 ) ; if ( VAR_39 == VAR_63 -> VAR_81 ) VAR_73 = 1 ; if ( VAR_43 == VAR_63 -> VAR_81 ) { METHOD_5 ( VAR_49 , VAR_63 ) { if ( VAR_48 == VAR_49 -> VAR_50 ) { VAR_73 = 1 ; break ; } } }
<S2SV_ModStart> * VAR_7 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> < 0 ) { struct STRUCT_OR_UNION_5 VAR_52 ; VAR_52 . VAR_23 = METHOD_26 ( METHOD_21 ( VAR_104 ) -> VAR_23 ) ; VAR_52 . VAR_105 = METHOD_26 ( METHOD_21 ( VAR_104 ) -> VAR_105 ) ; METHOD_22 ( VAR_98 , METHOD_23 ( VAR_98 ) , VAR_106 , sizeof ( VAR_52 ) , & VAR_52 ) ; <S2SV_ModStart> goto VAR_103 ; } <S2SV_ModStart> , VAR_78 ) ; METHOD_21 ( VAR_104 ) -> VAR_107 ++ <S2SV_ModStart> VAR_102 ) ; METHOD_21 ( VAR_104 ) -> VAR_108 ++ ;
<S2SV_ModStart> STRUCT_OR_UNION_54 , TYPE_15 VAR_236 <S2SV_ModEnd> ) { TYPE_15 <S2SV_ModStart> VAR_189 , VAR_50 ; unsigned TYPE_15 VAR_338 <S2SV_ModStart> ; if ( VAR_236 & VAR_339 <S2SV_ModEnd> ) { VAR_331 <S2SV_ModStart> 'L' ) : if ( VAR_236 & VAR_340 ) { METHOD_61 ( KERN_ERR "ISOFS:<S2SV_blank>Recursive<S2SV_blank>directory<S2SV_blank>relocation<S2SV_blank>" "is<S2SV_blank>not<S2SV_blank>supported\\n" ) ; goto VAR_334 ; } VAR_338 = METHOD_60 ( VAR_320 -> VAR_321 . VAR_244 . VAR_245 ) ; if ( VAR_338 == <S2SV_ModStart> STRUCT_OR_UNION_54 ) -> VAR_341 && METHOD_58 ( STRUCT_OR_UNION_54 ) -> VAR_342 == 0 ) { METHOD_61 ( KERN_ERR "ISOFS:<S2SV_blank>Directory<S2SV_blank>relocation<S2SV_blank>points<S2SV_blank>to<S2SV_blank>" "itself\\n" ) ; goto VAR_334 ; } METHOD_58 ( STRUCT_OR_UNION_54 ) -> VAR_248 = VAR_338 <S2SV_ModEnd> ; VAR_282 = <S2SV_ModStart> ; VAR_282 = METHOD_64 <S2SV_ModEnd> ( STRUCT_OR_UNION_54 -> <S2SV_ModStart> -> VAR_284 , VAR_338 , <S2SV_ModEnd> 0 ) ;
<S2SV_ModStart> VAR_161 <= 8 && VAR_171 -> VAR_140 != VAR_129
<S2SV_ModStart> = VAR_27 ; VAR_50 -> VAR_53 = VAR_54 ; <S2SV_ModStart> ++ ; } if ( ! VAR_50 -> VAR_53 ) VAR_50 -> VAR_53 = METHOD_6 ( METHOD_5 ( ) ) ;
<S2SV_ModStart> * STRUCT_OR_UNION_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> TYPE_3 VAR_87 ; TYPE_3 VAR_94 = 0 ; <S2SV_ModStart> VAR_53 ) { if ( VAR_94 == 4 ) { return VAR_93 ; } ++ VAR_94 ;
<S2SV_ModStart> 0.0 ) ; ( TYPE_47 ) METHOD_67 ( & <S2SV_ModStart> VAR_388 -> VAR_373 , <S2SV_ModEnd> VAR_373 ) ;
<S2SV_ModStart> ; TYPE_7 * VAR_23 ; if ( VAR_4 != 4 ) return - VAR_26 ;
<S2SV_ModStart> ; if ( ! VAR_41 -> VAR_42 ) return - VAR_55 ; if (
<S2SV_ModStart> , VAR_5 , VAR_6 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ) ; TYPE_8 <S2SV_ModEnd> VAR_36 ; if <S2SV_ModStart> = VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> / 512 ; <S2SV_ModStart> } else { METHOD_7 ( VAR_57 ) <S2SV_ModEnd> ; METHOD_5 ( <S2SV_ModStart> . VAR_55 , VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> -> VAR_58 , VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> const TYPE_1 * VAR_39 ) { const TYPE_1 * VAR_40 ; <S2SV_ModEnd> TYPE_12 * * <S2SV_ModStart> VAR_37 ; TYPE_5 VAR_32 , <S2SV_ModStart> ) ) ; VAR_32 = VAR_39 -> VAR_32 ; for ( VAR_40 = VAR_39 ; VAR_40 != ( TYPE_1 * ) VAR_27 ; VAR_40 = VAR_40 -> VAR_40 ) VAR_32 = METHOD_7 ( VAR_40 -> VAR_32 , VAR_32 ) ; for ( <S2SV_ModEnd> VAR_36 = 0 <S2SV_ModStart> ) METHOD_4 ( <S2SV_ModEnd> VAR_32 , sizeof <S2SV_ModStart> ( TYPE_13 ) <S2SV_ModEnd> VAR_32 ; VAR_37 <S2SV_ModStart> ) METHOD_6 ( VAR_39 <S2SV_ModEnd> , & VAR_38
<S2SV_ModStart> = VAR_22 ; METHOD_5 <S2SV_ModEnd> ( VAR_29 ->
<S2SV_ModStart> VAR_402 -> VAR_368 && METHOD_83 ( VAR_402 -> VAR_391 , VAR_386 - VAR_387 ) <S2SV_ModStart> - VAR_387 ; if ( METHOD_83 ( VAR_402 -> VAR_391 , VAR_448 ) ) { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> VAR_9 ) { TYPE_4 VAR_11 ; VAR_9 -> VAR_6 = METHOD_2 ( <S2SV_ModEnd> ( TYPE_3 ) <S2SV_ModStart> VAR_3 * VAR_4 , VAR_8 , & VAR_11 ) <S2SV_ModStart> ; VAR_9 -> VAR_10 = VAR_11 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_24 , VAR_26 ) & VAR_27 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_24 , VAR_28 , VAR_29 | VAR_30 | VAR_31 | VAR_32 | VAR_33 <S2SV_ModEnd> ) ; METHOD_5 <S2SV_ModStart> ( VAR_24 , VAR_34 , VAR_35 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_24 , VAR_28 , VAR_29 | VAR_30 | VAR_31 | VAR_32 <S2SV_ModEnd> ) ; METHOD_5 <S2SV_ModStart> ( VAR_24 , VAR_34 , ENC624J600_MABBIPG_BBIPG_DEFAULT_HD <S2SV_ModEnd> ) ; }
<S2SV_ModStart> break ; } if ( VAR_567 -> VAR_516 . VAR_468 < VAR_567 -> VAR_516 . VAR_517 ) { METHOD_54 ( VAR_522 , VAR_523 , ( "[ADTSDmx]<S2SV_blank>Corrupted<S2SV_blank>ADTS<S2SV_blank>frame<S2SV_blank>header,<S2SV_blank>resyncing\\n" ) ) ; VAR_567 -> VAR_432 = 0 ; goto VAR_526 ; }
<S2SV_ModStart> TYPE_1 * VAR_50 <S2SV_ModEnd> ) { const <S2SV_ModStart> = 0 ; if ( VAR_50 -> VAR_21 . VAR_52 ) return ; METHOD_5 ( ) ; if ( VAR_50 -> VAR_53 . VAR_54 == VAR_55 && VAR_50 -> VAR_4 . VAR_56 . VAR_57 ) { VAR_23 = METHOD_6 ( VAR_50 , VAR_51 ) ; } else { VAR_23 = METHOD_7 ( VAR_50 -> VAR_4 . <S2SV_ModEnd> VAR_12 , VAR_15 <S2SV_ModStart> VAR_16 , VAR_51 , VAR_15 -> VAR_58 ) ; } <S2SV_ModEnd> if ( VAR_23 <S2SV_ModStart> ( VAR_23 > VAR_59 ) VAR_45 = ( TYPE_9 ) ( ( 100 * ( TYPE_10 ) VAR_50 -> VAR_21 . VAR_22 ) / VAR_23 ) ; VAR_42 = 0.25 + 0.5 * METHOD_10 ( 1 , METHOD_9 ( METHOD_8 ( 0.01 * VAR_45 ) ) ) ; VAR_50 -> VAR_21 . VAR_60 = VAR_50 -> VAR_21 . VAR_61 ; VAR_50 -> VAR_21 . VAR_61 = VAR_15 -> VAR_14 ; VAR_50 -> VAR_21 . VAR_62 = VAR_50 -> VAR_21 . VAR_63 ; if ( VAR_45 > 110 ) VAR_50 -> VAR_21 . VAR_63 = - 1 ; else if ( VAR_45 < 90 ) VAR_50 -> VAR_21 . VAR_63 = 1 ; else VAR_50 -> VAR_21 . VAR_63 = 0 ; <S2SV_ModEnd> if ( VAR_45
<S2SV_ModStart> "value" ) ) { METHOD_572 ( VAR_1092 , METHOD_770 ( "value" ) , sizeof ( VAR_1092 ) ) ; <S2SV_ModStart> ( METHOD_772 ( VAR_1092 ) ) ; } <S2SV_ModEnd> VAR_66 = METHOD_772
<S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> ) , VAR_65 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104
<S2SV_ModStart> * VAR_27 , TYPE_6 VAR_22 , TYPE_6 <S2SV_ModEnd> VAR_29 ) { <S2SV_ModStart> VAR_29 ) { TYPE_6 VAR_8 ; TYPE_6 <S2SV_ModEnd> VAR_30 ; VAR_8
<S2SV_ModStart> * VAR_316 ; TYPE_36 VAR_319 = ( TYPE_36 ) VAR_305 [ VAR_193 ] [ VAR_310 ] ; if ( VAR_319 < VAR_303 -> VAR_263 && <S2SV_ModEnd> VAR_303 -> VAR_296 <S2SV_ModStart> -> VAR_296 [ VAR_319 <S2SV_ModEnd> ] & (
<S2SV_ModStart> TYPE_4 VAR_20 , <S2SV_ModEnd> struct STRUCT_OR_UNION_0 *
<S2SV_ModStart> STRUCT_OR_UNION_8 VAR_149 ; METHOD_37 ( & VAR_149 , 0 , sizeof ( VAR_149 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_161 ; METHOD_37 ( & VAR_161 , 0 , sizeof ( VAR_161 ) )
<S2SV_ModStart> VAR_64 -> VAR_30 >= <S2SV_ModEnd> VAR_64 -> VAR_32
<S2SV_ModStart> , & VAR_19 , 0
<S2SV_ModStart> VAR_36 ) ; if ( ! METHOD_5 ( VAR_26 , "path" ) && VAR_36 && METHOD_6 ( VAR_36 ) ) VAR_33 -> VAR_30 |= METHOD_7 ( VAR_33 -> VAR_32 , VAR_33 -> VAR_34 , VAR_38 , "disallowed<S2SV_blank>submodule<S2SV_blank>path:<S2SV_blank>%s" , VAR_36 ) ;
<S2SV_ModStart> unsigned TYPE_6 VAR_50 ; if ( ! VAR_51 ) return
<S2SV_ModStart> ; unsigned TYPE_1 * VAR_15 ; TYPE_2 VAR_29 ; VAR_15 = METHOD_6 ( 3 , VAR_30 ) ; if ( ! VAR_15 ) return - VAR_31 <S2SV_ModEnd> ; VAR_29 = <S2SV_ModStart> ) ; } METHOD_7 ( VAR_15 ) ;
<S2SV_ModStart> * VAR_7 , TYPE_3 <S2SV_ModEnd> VAR_9 ) { <S2SV_ModStart> { if ( <S2SV_ModEnd> VAR_9 >= VAR_7
<S2SV_ModStart> VAR_25 ) ; METHOD_17 ( VAR_81 ) ;
<S2SV_ModStart> const TYPE_1 * VAR_76 , TYPE_6 <S2SV_ModEnd> VAR_59 ) { <S2SV_ModStart> VAR_59 ) { const TYPE_1 * const VAR_72 = VAR_59 ? METHOD_15 ( VAR_76 , 1 ) : VAR_76 ; <S2SV_ModStart> , METHOD_20 ( VAR_76 ) , VAR_76 <S2SV_ModEnd> -> VAR_73 ,
<S2SV_ModStart> VAR_13 ) { return <S2SV_ModEnd> VAR_3 -> VAR_4 <S2SV_ModStart> VAR_13 ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> : if ( VAR_76 >= VAR_74 -> VAR_55 ) { METHOD_12 ( "REC<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>NUM<S2SV_blank>value<S2SV_blank>(%d)" , VAR_76 , VAR_74 -> VAR_55 ) ; return VAR_66 ; } if (
<S2SV_ModStart> VAR_13 ) ; switch ( VAR_28 -> VAR_13 ) { case - VAR_29 : case - VAR_30 : goto VAR_23 ; default : <S2SV_ModStart> goto VAR_24 ; }
<S2SV_ModStart> VAR_186 ) { VAR_245 -> VAR_202 [ VAR_206 ] . VAR_204 = METHOD_16 ( VAR_205 ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VAR_206 ++ ;
<S2SV_ModStart> if ( VAR_35 >= <S2SV_ModEnd> VAR_32 ) return <S2SV_ModStart> ) ; } while <S2SV_ModEnd> ( VAR_35 < <S2SV_ModStart> VAR_34 [ VAR_35 ++
<S2SV_ModStart> = 0 ; VAR_25 : <S2SV_ModEnd> VAR_32 ++ ; <S2SV_ModStart> ; if ( METHOD_10 ( VAR_30 ) == 2 ) { METHOD_6 ( METHOD_11 ( VAR_30 , 0 ) , NAME ) ; assert ( strcmp ( STR ( METHOD_11 ( VAR_30 , 0 ) ) , "async" ) == 0 ) ; VAR_30 = METHOD_11 ( VAR_30 , 1 ) ; } else if ( METHOD_10 ( VAR_30 ) == 1 ) { VAR_30 = METHOD_11 ( VAR_30 , 0 ) ; } else { goto VAR_34 <S2SV_ModEnd> ; } if <S2SV_ModStart> == ( 5 <S2SV_ModEnd> ) ) { <S2SV_ModStart> VAR_30 , 4 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_32 ; } VAR_34 :
<S2SV_ModStart> ( VAR_42 , "<S2SV_blank>n<S2SV_blank>len=%u" <S2SV_ModEnd> , METHOD_14 ( <S2SV_ModStart> ; if ( METHOD_14 ( VAR_39 . VAR_40 ) > 4 ) { if ( <S2SV_ModEnd> VAR_42 -> VAR_30 <S2SV_ModStart> VAR_42 -> VAR_30 > 2 <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> else if ( <S2SV_ModEnd> VAR_42 -> VAR_30 <S2SV_ModStart> VAR_42 -> VAR_30 > 1 <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> * ) ( <S2SV_ModEnd> VAR_38 + 1 <S2SV_ModStart> VAR_41 ; } }
<S2SV_ModStart> goto VAR_139 ; if ( METHOD_29 ( & VAR_137 . VAR_138 , & VAR_140 ) ) { VAR_147 = - VAR_23 ; goto VAR_136 ; }
<S2SV_ModStart> = VAR_60 ; VAR_66 = VAR_15 ;
<S2SV_ModStart> VAR_74 -> VAR_6 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_13 <S2SV_ModStart> { } ; METHOD_28 ( & VAR_74 -> VAR_163 ) ; VAR_161 -> VAR_164 [ 0 ] = 0xe ; VAR_161 -> VAR_164 [ 1 ] = 0x80 ; VAR_161 -> VAR_164 [ 2 ] = 0x0 ; <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x02 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> 300 ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 , 1 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> METHOD_11 ( "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_29 ( & VAR_74 -> VAR_163
<S2SV_ModStart> * VAR_79 , VAR_20 , VAR_65 ; TYPE_9 VAR_70 , VAR_75 , VAR_80 ; TYPE_9 * VAR_85 = VAR_90 , * VAR_86 = VAR_90 , * VAR_87 = VAR_90 , * VAR_88 = VAR_90 <S2SV_ModEnd> ; TYPE_5 VAR_35 <S2SV_ModStart> VAR_65 ) ; if ( ! VAR_85 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_70 ) ; if ( ! VAR_86 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_75 ) ; if ( ! VAR_87 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_80 ) ; if ( ! VAR_88 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; }
<S2SV_ModStart> ; } } if ( * VAR_30 != VAR_34 )
<S2SV_ModStart> TYPE_9 VAR_63 ; TYPE_12 VAR_126 ; TYPE_9 <S2SV_ModEnd> VAR_35 , VAR_78 <S2SV_ModStart> + 64 , "LEN=%9u" <S2SV_ModEnd> , & VAR_126 <S2SV_ModStart> VAR_148 ; } if ( VAR_126 > VAR_150 ) { * VAR_145 = VAR_146 ; * VAR_147 = METHOD_17 ( "toshiba:<S2SV_blank>File<S2SV_blank>has<S2SV_blank>%u-byte<S2SV_blank>packet,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>maximum<S2SV_blank>of<S2SV_blank>%u" , VAR_126 , VAR_150 ) ; return VAR_148 ; } <S2SV_ModStart> ( VAR_123 , VAR_126 <S2SV_ModEnd> ) ; VAR_143
<S2SV_ModStart> ; TYPE_5 * VAR_46 = & VAR_42 ; TYPE_5 * <S2SV_ModStart> VAR_25 , & VAR_46 <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> ( VAR_9 > 1 <S2SV_ModEnd> ) { if
<S2SV_ModStart> VAR_68 , VAR_69 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> case VAR_4 : VAR_11 = METHOD_4 ( VAR_11 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_8 : VAR_11 =
<S2SV_ModStart> TYPE_5 METHOD_0 ( TYPE_7 * const VAR_76 , TYPE_12 * VAR_75 , TYPE_13 * const VAR_63 , TYPE_11 VAR_77 , TYPE_11 VAR_85 , TYPE_11 VAR_86 <S2SV_ModEnd> , TYPE_4 VAR_79 <S2SV_ModStart> , TYPE_4 VAR_79 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_2 * <S2SV_ModStart> VAR_77 ] ; PREDICTION_MODE <S2SV_ModEnd> VAR_50 = ( <S2SV_ModStart> 0 ) ? VAR_63 -> VAR_50 : VAR_63 -> VAR_26 ; <S2SV_ModEnd> VAR_29 * VAR_82 <S2SV_ModStart> * VAR_82 ; <S2SV_ModEnd> VAR_82 = & <S2SV_ModStart> [ 4 * VAR_85 <S2SV_ModEnd> * VAR_81 -> <S2SV_ModStart> + 4 * VAR_86 ] ; if ( VAR_63 -> VAR_87 < VAR_88 ) if ( VAR_77 == 0 ) VAR_50 = VAR_76 -> VAR_62 [ 0 ] -> VAR_89 [ ( VAR_85 <S2SV_ModEnd> << 1 ) <S2SV_ModStart> << 1 ) + VAR_86 ] . VAR_90 ; METHOD_3 ( VAR_76 , VAR_81 -> VAR_91 , VAR_79 , VAR_50 , VAR_82 , VAR_81 -> VAR_82 . VAR_83 , VAR_82 , VAR_81 -> VAR_82 . VAR_83 , VAR_86 , VAR_85 <S2SV_ModEnd> , VAR_77 ) <S2SV_ModStart> if ( ! VAR_63 -> <S2SV_ModEnd> VAR_64 ) { <S2SV_ModStart> ) { const TYPE_14 VAR_92 = ( VAR_77 || VAR_76 -> VAR_93 ) ? VAR_94 : VAR_95 [ VAR_50 ] ; const TYPE_15 * VAR_96 = ( VAR_77 || VAR_76 -> VAR_93 ) ? & VAR_97 [ VAR_79 ] : & VAR_98 [ VAR_79 ] [ VAR_92 ] ; const <S2SV_ModStart> = METHOD_5 ( VAR_76 , VAR_77 , VAR_96 , VAR_86 , VAR_85 , VAR_79 , VAR_75 , VAR_63 -> VAR_99 ) ; METHOD_7 ( VAR_76 , VAR_77 , VAR_92 , VAR_79 , VAR_82 , VAR_81 -> VAR_82 . VAR_83 , <S2SV_ModEnd> VAR_84 ) ;
<S2SV_ModStart> = VAR_52 ; if ( VAR_97 == VAR_52 ) { VAR_92 -> VAR_93 . VAR_88 = 0 ; VAR_95 -> VAR_96 = 0 ; VAR_92 -> VAR_93 . VAR_57 = VAR_95 -> VAR_98 ; VAR_92 -> VAR_93 . VAR_62 = VAR_95 -> VAR_99 ; }
<S2SV_ModStart> VAR_114 -> VAR_104 [ VAR_122 ] && VAR_114 -> VAR_115
<S2SV_ModStart> VAR_14 ) { TYPE_0 VAR_18 = VAR_17 ; <S2SV_ModStart> ) ) ) VAR_18 = <S2SV_ModStart> ) ; return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_34 ; TYPE_4 * VAR_30 ; VAR_30 = METHOD_8 ( 2 , VAR_35 ) ; if ( ! VAR_30 ) return - VAR_36 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> VAR_22 ) ; VAR_22 = <S2SV_ModEnd> - VAR_31 ; <S2SV_ModStart> - VAR_31 ; goto VAR_37 ; <S2SV_ModStart> ] ) ; VAR_22 = <S2SV_ModEnd> - VAR_31 ; <S2SV_ModStart> - VAR_31 ; goto VAR_37 ; } VAR_22 = METHOD_7 ( VAR_32 , VAR_33 , "%s\\n" , VAR_34 ) ; VAR_37 : METHOD_9 ( VAR_30 ) ; return VAR_22 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> , & VAR_18 ) ; if ( METHOD_8 ( VAR_18 , VAR_11 ) ) METHOD_11 ( VAR_30 , ( METHOD_9 ( VAR_31 ) , METHOD_10 ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) )
<S2SV_ModStart> ] + VAR_353 / VAR_395 -> VAR_355 [ VAR_397 ] <S2SV_ModStart> VAR_278 + VAR_394 / VAR_395 -> VAR_396 [ VAR_397 ] <S2SV_ModStart> ] + VAR_353 / VAR_395 -> VAR_355 [ VAR_397 ] <S2SV_ModStart> + ( VAR_394 / VAR_395 -> VAR_396 [ VAR_397 ]
<S2SV_ModStart> TYPE_12 VAR_50 , TYPE_12 <S2SV_ModEnd> VAR_16 , const <S2SV_ModStart> * VAR_33 , TYPE_12 VAR_30 , TYPE_13 VAR_59 , TYPE_13 <S2SV_ModEnd> VAR_65 ) { <S2SV_ModStart> 0 ) { unsigned <S2SV_ModStart> TYPE_10 VAR_36 ; unsigned
<S2SV_ModStart> 128 ] ; <S2SV_ModEnd> METHOD_1 ( VAR_8 <S2SV_ModStart> 0 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_10 , <S2SV_ModStart> ( VAR_10 , "%s\\n" , VAR_8 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_84 ) ) { METHOD_9 ( VAR_89 ) ; <S2SV_ModStart> - VAR_81 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_113 ) ; METHOD_37 ( VAR_105 ) ; <S2SV_ModStart> VAR_106 ) ; <S2SV_ModEnd> METHOD_29 ( & <S2SV_ModStart> ) ) { METHOD_38 ( VAR_105 ) ; <S2SV_ModStart> VAR_123 ) ; if ( METHOD_39 ( ! VAR_129 ) ) <S2SV_ModStart> ) ; } else { if ( VAR_129 ) METHOD_38 ( VAR_105 ) ; } METHOD_36 ( & VAR_126 -> VAR_127 . VAR_128 ) ; <S2SV_ModEnd> } return VAR_129
<S2SV_ModStart> VAR_41 ) ; return ;
<S2SV_ModStart> * VAR_27 , TYPE_6 <S2SV_ModEnd> * VAR_32 , <S2SV_ModStart> case VAR_6 : METHOD_15 <S2SV_ModEnd> ( VAR_27 ,
<S2SV_ModStart> TYPE_1 * VAR_57 , TYPE_3 VAR_61 <S2SV_ModStart> ( VAR_57 , VAR_61 / 1000 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_57 , VAR_61 / 1000 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> case 1 : if ( VAR_186 . VAR_137 > sizeof ( VAR_146 ) || VAR_186 . VAR_137 < 0 ) { VAR_187 = - VAR_150 ; goto VAR_185 ; } <S2SV_ModStart> VAR_185 ; } if ( VAR_186 . VAR_137 > sizeof ( VAR_146 ) || VAR_186 . VAR_137 < 0 ) { VAR_187 = - VAR_150 ; goto VAR_185 ; }
<S2SV_ModStart> = VAR_83 ; VAR_253 -> VAR_255 &= ~ VAR_256 ;
<S2SV_ModStart> = - VAR_16 ; return ; } if ( VAR_18 -> VAR_20 . VAR_95 < 1 ) { STRUCT_OR_UNION_61 -> STRUCT_OR_UNION_55 . VAR_15 = - VAR_96
<S2SV_ModStart> VAR_38 ) ; METHOD_15 ( & VAR_78 -> VAR_34 ) ; <S2SV_ModStart> = VAR_77 ; METHOD_14 ( VAR_78 -> VAR_76 , "port-%d" , VAR_77 ) ; <S2SV_ModStart> VAR_73 -> VAR_74 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ( VAR_116 ) ; VAR_27 -> VAR_119 = 0
<S2SV_ModStart> VAR_22 , VAR_23 , VAR_67
<S2SV_ModStart> { TYPE_7 VAR_31 ; VAR_61 = METHOD_11 ( STRUCT_OR_UNION_11 <S2SV_ModEnd> , & VAR_31 <S2SV_ModStart> , & VAR_31 , & VAR_43 ) ; if ( VAR_61 ) return VAR_61 <S2SV_ModEnd> ; VAR_61 =
<S2SV_ModStart> ] ) ; METHOD_21 ( VAR_116 -> VAR_117 . VAR_62 ) ;
<S2SV_ModStart> ) return ; <S2SV_ModEnd> METHOD_2 ( VAR_7
<S2SV_ModStart> * VAR_134 , "%s" , <S2SV_ModStart> * VAR_134 , "%s" ,
<S2SV_ModStart> VAR_111 ) ; if ( VAR_114 < 0 ) return METHOD_11 ( VAR_114 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_14 ( &
<S2SV_ModStart> ; VAR_22 -> VAR_28 = METHOD_6 ( ) <S2SV_ModEnd> ; VAR_22 ->
<S2SV_ModStart> { if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 ,
<S2SV_ModStart> VAR_43 ; } if ( VAR_25 > VAR_59 / sizeof ( TYPE_7 ) ) METHOD_8 ( VAR_60 , ( METHOD_6 ( VAR_61 ) , METHOD_7 ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , VAR_25 , ( TYPE_6 ) ( VAR_59 / sizeof ( TYPE_7 ) ) ) ) ) ;
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_10 <S2SV_ModStart> ) VAR_3 ; if ( VAR_10 < 4 ) { METHOD_4 ( ( VAR_9 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> -> VAR_143 == VAR_202 <S2SV_ModEnd> ) { VAR_193 <S2SV_ModStart> -> VAR_143 = METHOD_65 <S2SV_ModEnd> ( VAR_200 , <S2SV_ModStart> -> VAR_143 = VAR_202 ; VAR_193 -> VAR_145 = 0 ; } else if ( ! METHOD_63 ( VAR_197 , "WWW-Authenticate" ) ) { METHOD_47 ( & VAR_193 -> VAR_153 , VAR_197 , VAR_200 ) ; } else if ( ! METHOD_63 ( VAR_197 , "Authentication-Info" ) ) { METHOD_47 ( & VAR_193 -> VAR_153 , VAR_197 , VAR_200 ) ; } else if ( ! METHOD_63 ( VAR_197 , "Proxy-Authenticate" ) ) { METHOD_47 ( & VAR_193 -> VAR_158 , VAR_197 , VAR_200 ) ; } else if ( ! METHOD_63 ( VAR_197 , "Connection" ) ) { if ( ! METHOD_49 ( VAR_200 , "close" ) ) VAR_193 -> VAR_164 = 1 ; } else if ( ! METHOD_63 ( VAR_197 , "Server" ) ) { if ( ! METHOD_63 ( VAR_200 , "AkamaiGHost" ) ) { VAR_193 -> VAR_168 = 1 ; } else if ( ! METHOD_61 ( VAR_200 , "MediaGateway" , 12 ) ) { VAR_193 -> VAR_171 = 1 ; } } else if ( ! METHOD_63 ( VAR_197 , "Content-Type" ) ) { METHOD_54 ( VAR_193 -> VAR_176 ) ; VAR_193 -> VAR_176 = METHOD_55 ( VAR_200 ) ; } else if ( ! METHOD_63 ( VAR_197 , "Set-Cookie" ) ) { if ( METHOD_57 ( VAR_193 , VAR_200 , <S2SV_ModEnd> & VAR_193 -> <S2SV_ModStart> & VAR_193 -> <S2SV_ModEnd> VAR_182 ) ) <S2SV_ModStart> -> VAR_188 = METHOD_65 <S2SV_ModEnd> ( VAR_200 ,
<S2SV_ModStart> ; if ( METHOD_3 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> VAR_200 ) ; METHOD_48 ( VAR_183 , VAR_184 ) ;
<S2SV_ModStart> return METHOD_2 ( VAR_9 , <S2SV_ModStart> = METHOD_2 ( VAR_9 ,
<S2SV_ModStart> case VAR_69 : METHOD_50 ( VAR_162 ) ; <S2SV_ModStart> ) ) { METHOD_51 ( VAR_162 ) ;
<S2SV_ModStart> ; TYPE_6 VAR_41 ; if ( VAR_48 == 0 || VAR_40 == 0 ) return 0
<S2SV_ModStart> ) ) ; if ( VAR_7 < 2 ) { METHOD_2 ( ( VAR_5 , "[|mlppp]" ) ) ; return ; } if ( ! METHOD_4 ( TYPE_7 ) ) { METHOD_2 ( ( VAR_5 , "[|mlppp]" ) ) ; return ; }
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_53 -> VAR_323 == 0 ) { METHOD_79 ( & VAR_327 -> VAR_328 , VAR_329 , "Invalid<S2SV_blank>zero<S2SV_blank>dictionary<S2SV_blank>size" ) ; return ( VAR_331 ) ; } if (
<S2SV_ModStart> * VAR_12 , <S2SV_ModEnd> TYPE_7 VAR_7 , <S2SV_ModStart> METHOD_1 ( & VAR_30 , VAR_12 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> ( VAR_30 ) <S2SV_ModEnd> ) ) return
<S2SV_ModStart> ; if ( ! VAR_41 -> VAR_42 ) return - VAR_55 ; if (
<S2SV_ModStart> if ( VAR_39 ) { if ( ! METHOD_9 ( VAR_24 -> VAR_54 , VAR_36 , VAR_39 ) ) return - VAR_55 ; if ( <S2SV_ModEnd> ! METHOD_5 ( <S2SV_ModStart> VAR_28 ) ) <S2SV_ModEnd> return - VAR_29
<S2SV_ModStart> TYPE_28 = VAR_7 ; if ( METHOD_7 ( ! METHOD_6 ( VAR_56 , TYPE_19 , TYPE_28 ) ) ) return - VAR_57
<S2SV_ModStart> . VAR_36 , <S2SV_ModEnd> 0 ) ;
<S2SV_ModStart> ; if ( METHOD_7 <S2SV_ModEnd> ( & VAR_41
<S2SV_ModStart> goto VAR_117 ; if ( METHOD_29 ( VAR_115 ) < 8 ) goto VAR_114 ; <S2SV_ModStart> VAR_63 ) ; if ( METHOD_29 ( VAR_115 ) < 4 ) goto VAR_114 ; <S2SV_ModStart> VAR_76 ) ; if ( METHOD_29 ( VAR_115 ) < 4 ) goto VAR_114 ; <S2SV_ModStart> VAR_89 ) ; if ( METHOD_29 ( VAR_115 ) < 4 ) goto VAR_114 ;
<S2SV_ModStart> { TYPE_6 VAR_27 ; VAR_72 = METHOD_16 ( STRUCT_OR_UNION_11 <S2SV_ModEnd> , & VAR_27 <S2SV_ModStart> , & VAR_27 , & VAR_71 ) ; if ( VAR_72 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> { METHOD_6 ( "%s:<S2SV_blank>posix_acl_update_mode<S2SV_blank>err:<S2SV_blank>%d\\n" <S2SV_ModEnd> , VAR_58 , <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> { return VAR_15 ; } if ( VAR_64 > VAR_73 ) { return VAR_74
<S2SV_ModStart> ; if ( METHOD_14 ( VAR_68 ) &&
<S2SV_ModStart> while ( VAR_11 && VAR_11
<S2SV_ModStart> 1 ) { struct STRUCT_OR_UNION_5 * VAR_301 = ( struct STRUCT_OR_UNION_5 * ) & VAR_41 ; TYPE_10 VAR_302 = sizeof ( VAR_41 ) ; <S2SV_ModStart> ; VAR_299 = METHOD_63 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> ) , 0 , VAR_301 , & VAR_302 <S2SV_ModStart> VAR_299 < 0 || VAR_41 . VAR_28 <S2SV_ModStart> ( VAR_298 , "recvfrom<S2SV_blank>failed;<S2SV_blank>pid:%u<S2SV_blank>error:%d<S2SV_blank>%s" , VAR_41 . VAR_28 , VAR_300 , METHOD_64 ( VAR_300 ) <S2SV_ModEnd> ) ; METHOD_24
<S2SV_ModStart> VAR_8 ) ; METHOD_3 ( & VAR_9 -> VAR_11 ) ;
<S2SV_ModStart> ) METHOD_72 ( METHOD_130 ( VAR_914 , VAR_665 ) , <S2SV_ModEnd> VAR_584 * sizeof
<S2SV_ModStart> VAR_44 , 1 <S2SV_ModEnd> , VAR_564 ,
<S2SV_ModStart> VAR_133 ) { VAR_136 * VAR_137 ; VAR_138 * VAR_139 ; VAR_140 * VAR_141 ; <S2SV_ModStart> TYPE_3 VAR_126 ; if ( METHOD_19 ( ) ) METHOD_11 ( METHOD_20 ( "" ) ) ; if ( ! ( VAR_137 = VAR_142 ) ) { METHOD_21 ( ) ; if ( ! ( VAR_137 = VAR_142 ) ) VAR_137 = VAR_142 = METHOD_22 ( VAR_143 ) ; METHOD_23 ( ) ; } <S2SV_ModStart> -> VAR_128 = VAR_139 = <S2SV_ModStart> VAR_131 , VAR_94 ) ; VAR_141 = METHOD_24 ( VAR_140 , 1 ) ; VAR_141 -> VAR_139 = VAR_139 ; VAR_141 -> VAR_144 = METHOD_25 ( ( TYPE_7 * ) VAR_133 ) ; if ( ! METHOD_26 ( VAR_137 , ( TYPE_7 * ) VAR_133 , VAR_141 ) ) METHOD_18 ( VAR_141
<S2SV_ModStart> , TYPE_4 VAR_12 , TYPE_8 VAR_14 <S2SV_ModStart> METHOD_1 ( VAR_4 , VAR_14 <S2SV_ModStart> == VAR_7 ? 2700000 : 1800000 ; METHOD_2 ( VAR_12 <= VAR_15 && VAR_12 >= VAR_16 ) <S2SV_ModEnd> ; VAR_11 += <S2SV_ModStart> TYPE_7 ) ( <S2SV_ModEnd> VAR_11 * VAR_12 <S2SV_ModStart> / VAR_13 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_93 ; } METHOD_8 ( & VAR_91 [ VAR_92 + 2 ] ) ; METHOD_8 ( & VAR_91 [ VAR_92 + 4 ] ) ;
<S2SV_ModStart> TYPE_5 VAR_97 ; struct STRUCT_OR_UNION_0 VAR_99 ; <S2SV_ModStart> VAR_98 ) { VAR_99 = * VAR_97 ; <S2SV_ModStart> VAR_16 ) { if ( ! METHOD_13 ( VAR_97 , 8 ) ) { METHOD_14 ( "sec_recv(),<S2SV_blank>consume<S2SV_blank>fastpath<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_99 ) ; } <S2SV_ModStart> VAR_33 ) { if ( ! METHOD_13 ( VAR_97 , 8 ) ) { METHOD_14 ( "sec_recv(),<S2SV_blank>consume<S2SV_blank>encrypt<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_99 ) ; } <S2SV_ModStart> TYPE_6 VAR_87 ; if ( ! METHOD_13 ( VAR_97 , 8 ) ) { METHOD_14 ( "sec_recv(),<S2SV_blank>consume<S2SV_blank>redirect<S2SV_blank>signature<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_99 ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( unsigned <S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_17 , TYPE_4 VAR_24 <S2SV_ModStart> * VAR_21 = min ( * VAR_21 , VAR_24 ? VAR_17 -> VAR_18 . VAR_25 -> VAR_21 : <S2SV_ModStart> VAR_18 . VAR_19 )
<S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( & VAR_41 <S2SV_ModStart> VAR_74 ] & 0xffffffffffffffffULL <S2SV_ModEnd> ) << VAR_75
<S2SV_ModStart> ( VAR_13 ) ; VAR_16 -> VAR_34 = 0
<S2SV_ModStart> ! METHOD_15 ( & <S2SV_ModStart> ! METHOD_15 ( &
<S2SV_ModStart> ; if ( VAR_600 < 1 ) { METHOD_35 ( VAR_610 , VAR_144 , "fatal<S2SV_blank>error,<S2SV_blank>input<S2SV_blank>packet<S2SV_blank>contains<S2SV_blank>no<S2SV_blank>samples\\n" ) ; return VAR_622 ; } if (
<S2SV_ModStart> STRUCT_OR_UNION_8 VAR_102 ; METHOD_30 ( & VAR_102 , 0 , sizeof ( VAR_102 ) ) ; <S2SV_ModStart> STRUCT_OR_UNION_6 VAR_43 ; METHOD_30 ( & VAR_43 , 0 , sizeof ( VAR_43 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_114 ; METHOD_30 ( & VAR_114 , 0 , sizeof ( VAR_114 ) ) <S2SV_ModStart> STRUCT_OR_UNION_8 VAR_102 ; METHOD_30 ( & VAR_102 , 0 , sizeof ( VAR_102 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_114 ; METHOD_30 ( & VAR_114 , 0 , sizeof ( VAR_114 ) )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = METHOD_6 ( ( TYPE_11 )
<S2SV_ModStart> ( VAR_30 -> METHOD_27 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> , VAR_30 -> METHOD_27 <S2SV_ModEnd> ( ) ,
<S2SV_ModStart> = - VAR_10 ; VAR_53 -> VAR_68 = 0
<S2SV_ModStart> = METHOD_8 ( STRUCT_OR_UNION_5 -> VAR_87 , <S2SV_ModStart> VAR_82 -> VAR_81 , & VAR_82 -> VAR_88 <S2SV_ModStart> = METHOD_8 ( STRUCT_OR_UNION_5 -> VAR_87 , <S2SV_ModStart> VAR_82 -> VAR_77 , & VAR_82 -> VAR_88
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_2 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_1 ) { return atomic_inc_not_zero ( & <S2SV_ModStart> ) -> VAR_4 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_117 -> VAR_118 , VAR_120
<S2SV_ModStart> ) METHOD_73 ( METHOD_130 ( VAR_895 , VAR_659 ) , <S2SV_ModEnd> VAR_578 * sizeof
<S2SV_ModStart> VAR_75 ; TYPE_9 TYPE_15 ; METHOD_39 ( 100 , ( "jpg_decode(%p,<S2SV_blank>\\"%s\\")\\n" , VAR_26 , VAR_14 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( VAR_75 <S2SV_ModStart> ( VAR_75 . VAR_165 > 0 <S2SV_ModEnd> ) { if <S2SV_ModStart> if ( ! jas_safe_size_mul3 ( VAR_145 . VAR_47 , VAR_145 . VAR_49 , VAR_145 . VAR_51 , & TYPE_15 <S2SV_ModEnd> ) ) { <S2SV_ModStart> } if ( TYPE_15 <S2SV_ModEnd> > VAR_75 . <S2SV_ModStart> > VAR_75 . VAR_165 <S2SV_ModEnd> ) { METHOD_41 <S2SV_ModStart> { METHOD_41 ( "image<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large<S2SV_blank>(%zu<S2SV_blank>><S2SV_blank>%zu)\\n" , TYPE_15 , VAR_75 . VAR_165 <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ; } } METHOD_39 ( 10 , ( "jpeg_start_decompress(%p)\\n" , & VAR_145 ) ) ; VAR_55 = METHOD_21 ( & VAR_145 ) ; METHOD_39 ( 10 , ( "jpeg_start_decompress<S2SV_blank>return<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_55 ) ) ; METHOD_39 ( 10 , ( "header:<S2SV_blank>output_width<S2SV_blank>%d;<S2SV_blank>output_height<S2SV_blank>%d;<S2SV_blank>output_components<S2SV_blank>%d\\n" , VAR_145 . VAR_106 , VAR_145 . VAR_120 , VAR_145 . VAR_108 ) ) ;
<S2SV_ModStart> -> VAR_6 ; <S2SV_ModEnd> if ( VAR_101 <S2SV_ModStart> } VAR_100 : <S2SV_ModEnd> return VAR_103 ;
<S2SV_ModStart> VAR_6 &= ~ ( VAR_7 | VAR_22 ) <S2SV_ModEnd> ; VAR_19 ->
<S2SV_ModStart> VAR_95 , VAR_33 ; TYPE_4 VAR_101 <S2SV_ModStart> VAR_86 ; } VAR_101 = ( TYPE_2 * ) ( VAR_22 -> VAR_16 + VAR_22 -> VAR_18 ) - VAR_36 ; if ( VAR_101 <= 0 ) { METHOD_11 ( & VAR_85 -> VAR_85 , "invalid<S2SV_blank>control<S2SV_blank>header\\n" ) ; return - VAR_86 ; } <S2SV_ModStart> ; if ( VAR_101 < sizeof ( * VAR_57 ) ) { METHOD_11 ( & VAR_85 -> VAR_85 , "too<S2SV_blank>short<S2SV_blank>v1<S2SV_blank>buffer<S2SV_blank>descriptor\\n" ) ; return - VAR_86 ; } if ( <S2SV_ModStart> VAR_85 , "skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n" ) ; return - VAR_86 ; } if ( VAR_101 < VAR_57 -> VAR_43 ) { METHOD_11 ( & VAR_85 -> VAR_85 , "invalid<S2SV_blank>buffer<S2SV_blank>length<S2SV_blank>(v1)\\n"
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_37 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_29 ) , VAR_11 <S2SV_ModEnd> , VAR_36 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_11 <S2SV_ModEnd> , VAR_36 ,
<S2SV_ModStart> ; if ( VAR_138 != VAR_135 -> VAR_138 ) { METHOD_40 ( VAR_138 ) ; VAR_138 = VAR_135 -> VAR_138 ; METHOD_34 ( VAR_138 ) ; } if (
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_9 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 4 ; if <S2SV_ModEnd> ( ( VAR_12 <S2SV_ModStart> VAR_26 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_28 , "horDiff32" , "%s" , "(cc%(4*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_27 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_20 = R_NEW0 ( struct STRUCT_OR_UNION_3 ) <S2SV_ModStart> if ( ! VAR_20 <S2SV_ModEnd> ) { return <S2SV_ModStart> VAR_4 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> ; if ( ! VAR_20 -> VAR_11 ||
<S2SV_ModStart> VAR_41 ; static TYPE_9 <S2SV_ModEnd> VAR_34 = 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_2 METHOD_0 (
<S2SV_ModStart> VAR_27 ) { METHOD_5 ( VAR_25 , VAR_30 , VAR_13 ) ; METHOD_6 ( VAR_25 , VAR_30 , VAR_27 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_24 ) { const TYPE_2 * const VAR_25 = & VAR_24 -> VAR_25 ; TYPE_0 VAR_27 ; <S2SV_ModStart> VAR_4 ) { VAR_27 = VAR_25 -> VAR_28 [ VAR_29 ] ; } else if ( VAR_24 -> VAR_18 . VAR_30 == 2 ) { TYPE_3 VAR_31 = VAR_24 -> VAR_32 . VAR_33 . VAR_34 [ VAR_24 -> VAR_32 . VAR_33 . VAR_35 ] ; VAR_27 = VAR_25 -> VAR_28 [ VAR_31 ] <S2SV_ModEnd> ; } else <S2SV_ModStart> ) && ! VAR_25 -> <S2SV_ModEnd> VAR_14 && ! <S2SV_ModStart> VAR_14 && ! <S2SV_ModEnd> VAR_24 -> VAR_16 <S2SV_ModStart> -> VAR_16 && ( <S2SV_ModStart> -> VAR_18 . VAR_36 != VAR_37 || VAR_24 -> VAR_18 . VAR_38 > 20 ) ) VAR_27 = VAR_25 -> VAR_28 [ VAR_39 ] ; else VAR_27 = VAR_25 -> VAR_28 [ VAR_40 ] ; } VAR_27 *= VAR_41 [ VAR_25 -> VAR_42 ] ; return METHOD_1 ( VAR_27 , VAR_43 , VAR_44 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> , VAR_43 ) \\\n{ <S2SV_ModEnd> if ( VAR_1594 <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> TYPE_342 VAR_333 [ <S2SV_ModStart> ; if ( VAR_1131 > ( TYPE_317 ) METHOD_272 ( VAR_1619 ) ) METHOD_226 ( VAR_1533 , "InsufficientImageDataInFile" ) ; if (
<S2SV_ModStart> VAR_63 = 1 ; if ( VAR_59 == VAR_78 ) return - VAR_79
<S2SV_ModStart> ) ; } VAR_7 = VAR_2 ;
<S2SV_ModStart> TYPE_15 VAR_99 [ VAR_8 + 100 <S2SV_ModEnd> ] , VAR_142 <S2SV_ModStart> 1 ) { METHOD_7 <S2SV_ModEnd> ( VAR_99 , <S2SV_ModStart> ( VAR_99 , sizeof ( VAR_99 ) ,
<S2SV_ModStart> VAR_112 ) { <S2SV_ModEnd> if ( STRUCT_OR_UNION_14 <S2SV_ModStart> == VAR_79 ) { METHOD_11 ( STRUCT_OR_UNION_14 ) ; <S2SV_ModStart> = VAR_81 ; } else if ( METHOD_29 ( STRUCT_OR_UNION_14 ) ) { METHOD_11 ( STRUCT_OR_UNION_14 ) ; METHOD_30 ( STRUCT_OR_UNION_14 ) ; }
<S2SV_ModStart> VAR_18 == 0 || ! VAR_170 -> VAR_119
<S2SV_ModStart> ; TYPE_8 VAR_17 ; if ( ! VAR_51 -> VAR_56 ) break ; VAR_17
<S2SV_ModStart> ; VAR_99 = METHOD_15 ( <S2SV_ModEnd> VAR_71 * VAR_72
<S2SV_ModStart> TYPE_41 METHOD_0 ( <S2SV_ModEnd> unsigned TYPE_13 * <S2SV_ModStart> unsigned TYPE_13 * VAR_109 , TYPE_41 VAR_110 , <S2SV_ModEnd> unsigned TYPE_13 * <S2SV_ModStart> unsigned TYPE_13 * VAR_111 , TYPE_41 VAR_157 , <S2SV_ModEnd> unsigned TYPE_13 * <S2SV_ModStart> unsigned TYPE_13 * VAR_107 , TYPE_41 VAR_159 , unsigned TYPE_41 VAR_29 , TYPE_41 VAR_161 ) { unsigned TYPE_13 * VAR_162 = VAR_111 ; unsigned TYPE_13 * VAR_163 = VAR_107 ; unsigned TYPE_41 VAR_164 <S2SV_ModEnd> ; TYPE_41 VAR_35 <S2SV_ModStart> TYPE_41 VAR_35 ; TYPE_41 VAR_165 = ( VAR_161 && <S2SV_ModEnd> VAR_29 <= VAR_30 <S2SV_ModStart> VAR_30 ) ? 1 : 0 ; TYPE_40 VAR_117 = METHOD_2 ( ) ; const TYPE_40 VAR_49 = METHOD_2 ( ) ; const TYPE_40 VAR_61 = METHOD_8 ( 4 + VAR_165 ) ; const TYPE_40 VAR_58 = METHOD_8 ( 8 ) ; const TYPE_40 VAR_55 = METHOD_8 ( 16 ) ; const TYPE_40 VAR_79 = METHOD_8 ( ( VAR_29 <= VAR_30 ) ? 7 + VAR_165 <S2SV_ModEnd> : 6 ) <S2SV_ModStart> ; } { unsigned TYPE_41 VAR_166 = METHOD_35 ( VAR_117 ) ; VAR_164 = VAR_152 ; if ( VAR_161 ) VAR_164 = VAR_167 ; if ( VAR_166 > VAR_164 ) { TYPE_41 VAR_168 = ( ( VAR_166 - VAR_164 ) >> 8 ) + 1 ; if ( VAR_168 < 4 ) { const TYPE_40 VAR_169 = METHOD_8 ( VAR_168 ) ; VAR_107 -= VAR_159 * 16 ; VAR_109 -= VAR_110 * 16 ; VAR_111 -= VAR_157 * 16 ; for ( VAR_35 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; VAR_35 < 16 ; ++ VAR_35 ) { TYPE_40 VAR_100 = METHOD_10 ( ( TYPE_40 * ) ( & VAR_111 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 0 ] ) ) ; const TYPE_40 VAR_94 = METHOD_10 ( ( TYPE_40 * ) ( & VAR_107 [ 0 ] ) ) ; const TYPE_40 VAR_46 = METHOD_10 ( ( TYPE_40 * ) ( & VAR_109 [ 0 ] ) ) ; const TYPE_40 VAR_51 = METHOD_29 ( VAR_46 , VAR_94 ) ; const TYPE_40 VAR_52 = METHOD_29 ( VAR_94 , VAR_46 ) ; const TYPE_40 VAR_91 = METHOD_13 ( VAR_51 , VAR_49 ) ; const TYPE_40 VAR_92 = METHOD_14 ( METHOD_25 ( VAR_51 , VAR_52 ) , VAR_169 ) ; TYPE_40 VAR_103 , VAR_106 ; VAR_103 = METHOD_26 ( VAR_91 , VAR_92 ) ; VAR_106 = METHOD_27 ( VAR_91 , VAR_92 ) ; VAR_100 = METHOD_29 ( VAR_100 , VAR_103 ) ; VAR_100 = METHOD_28 ( VAR_100 , VAR_106 ) ; METHOD_30 ( ( TYPE_40 * ) VAR_111 , VAR_100 ) ; VAR_117 = METHOD_32 ( VAR_117 , VAR_103 ) ; VAR_117 = METHOD_31 ( VAR_117 , VAR_106 ) ; VAR_107 += VAR_159 ; VAR_109 += VAR_110 ; VAR_111 += VAR_157 ; } VAR_166 = METHOD_35 ( VAR_117 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( VAR_166 > VAR_164 ) <S2SV_ModEnd> { return VAR_153 <S2SV_ModStart> ; } } else { return VAR_153 ; } } } METHOD_34 ( VAR_162 <S2SV_ModEnd> , VAR_157 , <S2SV_ModStart> , VAR_157 , VAR_163 <S2SV_ModEnd> , VAR_159 )
<S2SV_ModStart> VAR_91 ) ; <S2SV_ModEnd> VAR_95 = 1 <S2SV_ModStart> VAR_93 ) ; <S2SV_ModEnd> return VAR_95 ;
<S2SV_ModStart> * * VAR_18 , TYPE_4 VAR_26 <S2SV_ModStart> VAR_25 < 2 || VAR_24 -> VAR_25 > VAR_23 <S2SV_ModStart> VAR_16 == VAR_17 && VAR_24 -> VAR_25 >= VAR_26
<S2SV_ModStart> case VAR_238 : if ( VAR_497 != 1 ) { METHOD_159 ( ( VAR_499 , "<S2SV_blank>?)" ) ) ; break ; }
<S2SV_ModStart> VAR_4 >= 0 || ! STRUCT_OR_UNION_15 -> VAR_31 <S2SV_ModStart> VAR_5 ) ; if <S2SV_ModEnd> ( STRUCT_OR_UNION_15 -> <S2SV_ModStart> ( STRUCT_OR_UNION_15 -> VAR_4 >= 0 && STRUCT_OR_UNION_15 -> VAR_31 ) METHOD_12 ( STRUCT_OR_UNION_15 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> 6 ) ) { VAR_370 : VAR_735 = METHOD_131 ( VAR_735 ) ; <S2SV_ModEnd> METHOD_134 ( VAR_741 <S2SV_ModStart> "ImproperImageHeader" ) ; }
<S2SV_ModStart> * VAR_19 ; <S2SV_ModEnd> VAR_19 = METHOD_1 <S2SV_ModStart> ( VAR_7 ) <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> 9 ) ; return METHOD_6 <S2SV_ModEnd> ( VAR_53 , <S2SV_ModStart> ( VAR_53 , VAR_19 -> VAR_14 , VAR_19 -> VAR_20 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> } if ( METHOD_19 <S2SV_ModEnd> ( "none" , <S2SV_ModStart> 0 , "size=100000,mode=755" , VAR_31 -> VAR_37 ? VAR_31 -> METHOD_14 : VAR_44
<S2SV_ModStart> VAR_2 , const TYPE_2 <S2SV_ModEnd> * VAR_3 )
<S2SV_ModStart> "<S2SV_blank><S2SV_blank>-G,<S2SV_blank>--no-syslog<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Don\'t<S2SV_blank>log<S2SV_blank>via<S2SV_blank>syslog\\n" ) ; METHOD_46 ( VAR_50 , "<S2SV_blank><S2SV_blank>-u,<S2SV_blank>--umask=MASK<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>umask<S2SV_blank>for<S2SV_blank>file<S2SV_blank>creation<S2SV_blank>(in<S2SV_blank>numeric<S2SV_blank>form)\\n" ) ;
<S2SV_ModStart> ( VAR_55 . VAR_90 ) METHOD_23 ( VAR_55 . VAR_91 ) ; if ( VAR_55 .
<S2SV_ModStart> & 0xFFFFFFFF ; TYPE_10 VAR_110 ; <S2SV_ModStart> ) continue ; <S2SV_ModEnd> VAR_110 = METHOD_2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> VAR_110 = METHOD_3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> <= 0 ) continue ; } VAR_108 -> VAR_110 = VAR_110 ; <S2SV_ModEnd> if ( VAR_98
<S2SV_ModStart> VAR_34 ) ; METHOD_6 ( & VAR_32 -> VAR_26 -> VAR_35 ) ; <S2SV_ModStart> VAR_33 ) ; METHOD_7 ( & VAR_32 -> VAR_26 -> VAR_35 ) ;
<S2SV_ModStart> * VAR_12 , <S2SV_ModEnd> TYPE_7 VAR_7 , <S2SV_ModStart> METHOD_1 ( & VAR_30 , VAR_12 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> ( VAR_30 ) <S2SV_ModEnd> ) ) return
<S2SV_ModStart> VAR_106 -> VAR_68 [ VAR_72 ] && VAR_106 -> VAR_71
<S2SV_ModStart> VAR_71 ) { TYPE_3 <S2SV_ModEnd> VAR_54 , VAR_57
<S2SV_ModStart> VAR_22 ; } if ( * VAR_33 & VAR_34 ) { VAR_29 -> VAR_35 = 1 ; }
<S2SV_ModStart> * VAR_58 >= 75 && VAR_59 [ 61 ] == 0x05 && VAR_59 [ 62 ] == 0x08 && VAR_59 [ 63 ] == 0x19 && VAR_59 [ 64 ] == 0x08 && VAR_59 [ 65 ] == 0x29 && VAR_59 [ 66 ] == 0x0f && VAR_59 [ 71 ] == 0x75 && VAR_59 [ 72 ] == 0x08 && VAR_59 [ 73 ] == 0x95 && VAR_59 [ 74 ] == 0x01 ) { METHOD_1 ( VAR_56 , "fixing<S2SV_blank>up<S2SV_blank>Kye/Genius<S2SV_blank>Ergo<S2SV_blank>Mouse<S2SV_blank>" "report<S2SV_blank>descriptor\\n" ) ; <S2SV_ModEnd> VAR_59 [ 62 <S2SV_ModStart> [ 62 ] = 0x09 ; VAR_59 [ 64 ] = 0x04 ; VAR_59 [ 66 ] = 0x07 ; VAR_59 [ 72 ] = 0x01 ; VAR_59 [ 74 ] = 0x08 <S2SV_ModEnd> ; } break
<S2SV_ModStart> { TYPE_5 * VAR_73 , * <S2SV_ModStart> 0 ; } VAR_73 = VAR_71 -> VAR_68 + VAR_71 -> VAR_74 ; <S2SV_ModStart> = METHOD_2 ( VAR_73 <S2SV_ModEnd> , '&' , <S2SV_ModStart> -> VAR_72 - VAR_73 <S2SV_ModEnd> ) ; if <S2SV_ModStart> TYPE_8 ) { VAR_71 -> VAR_74 = VAR_71 -> VAR_72 - VAR_71 -> VAR_68 ; <S2SV_ModStart> VAR_72 ) ; VAR_71 -> VAR_74 = 0 ;
<S2SV_ModStart> VAR_33 ) { if ( VAR_31 -> VAR_35 > VAR_31 -> VAR_24 [ VAR_30 ] + VAR_31 -> VAR_29 [ VAR_30 ] ) { <S2SV_ModStart> VAR_32 ) ; VAR_31 -> VAR_36 = VAR_31 -> VAR_24 [ VAR_30 ] + VAR_31 -> VAR_29 [ VAR_30 ] ; <S2SV_ModStart> return VAR_33 ; }
<S2SV_ModStart> VAR_52 = VAR_4 ; TYPE_7 * const VAR_48 = VAR_54 -> VAR_57 -> VAR_48 <S2SV_ModStart> VAR_54 ) ; if ( VAR_54 -> VAR_58 == VAR_59 ) return VAR_60 ; -- <S2SV_ModEnd> VAR_48 [ VAR_44 <S2SV_ModStart> ] . VAR_40 <S2SV_ModEnd> ; METHOD_5 ( <S2SV_ModStart> ; METHOD_5 ( <S2SV_ModEnd> VAR_48 , VAR_49 <S2SV_ModStart> VAR_53 = & <S2SV_ModEnd> VAR_48 [ *
<S2SV_ModStart> VAR_188 ) ; if ( ! VAR_220 && ( 0 == ( VAR_226 & 1 ) ) ) { return VAR_230 ; }
<S2SV_ModStart> METHOD_0 ( const TYPE_7 * VAR_23 , const TYPE_5 * VAR_21 , <S2SV_ModEnd> TYPE_6 VAR_11 , <S2SV_ModStart> * VAR_14 , TYPE_8 <S2SV_ModEnd> * VAR_17 ) <S2SV_ModStart> VAR_17 ) { if ( segfeature_active ( & VAR_23 -> <S2SV_ModEnd> VAR_10 , VAR_11 <S2SV_ModStart> . VAR_22 ; METHOD_4 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> , METHOD_3 ( VAR_23 <S2SV_ModEnd> , VAR_21 )
<S2SV_ModStart> case VAR_39 : if ( METHOD_9 <S2SV_ModEnd> ( VAR_61 , <S2SV_ModStart> break ; case VAR_43 : case VAR_44 : case VAR_45 : if ( METHOD_10 ( VAR_61 , VAR_57 , VAR_53 ) == - 1 ) goto VAR_60 ; break ; case
<S2SV_ModStart> ; if ( VAR_37 <S2SV_ModEnd> ) { VAR_42
<S2SV_ModStart> ; if ( METHOD_6 ( VAR_64 , VAR_22 ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( METHOD_7 ( VAR_51 , VAR_50 , <S2SV_ModEnd> VAR_53 ) ) <S2SV_ModStart> return - VAR_47 <S2SV_ModEnd> ; VAR_54 :
<S2SV_ModStart> ; if ( METHOD_11 <S2SV_ModEnd> ( VAR_24 , <S2SV_ModStart> , & VAR_11 , & VAR_41 ) < 0 ) { return 1 ; } if ( VAR_41 == VAR_35 ) { PyErr_SetString ( VAR_20 , "required<S2SV_blank>field<S2SV_blank>\\"name\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>alias" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_11 TYPE_14 <S2SV_ModStart> TYPE_11 TYPE_14 ; TYPE_14 = METHOD_7 ( VAR_41 , & VAR_37 , VAR_39 ) ; if ( TYPE_14 != 0 <S2SV_ModEnd> ) goto VAR_40 <S2SV_ModStart> goto VAR_40 ; METHOD_8 ( VAR_41 ) ; } if ( METHOD_11 ( VAR_24 , & VAR_25 , & VAR_41 ) < 0 ) { return 1 ; } if ( VAR_41 == VAR_35 || VAR_41 == VAR_42 ) { METHOD_8 ( VAR_41 ) ; VAR_38 = VAR_35 ; } else { TYPE_11 TYPE_14 ; <S2SV_ModStart> VAR_41 , & VAR_38 <S2SV_ModEnd> , VAR_39 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> * VAR_36 =
<S2SV_ModStart> -> VAR_23 ; struct STRUCT_OR_UNION_7 * VAR_32 = METHOD_4 ( VAR_31 ) ; if ( VAR_32 -> VAR_16 < METHOD_6 ( VAR_32 -> VAR_33 ) ) { <S2SV_ModStart> ( VAR_31 , VAR_32 <S2SV_ModEnd> -> VAR_16 , <S2SV_ModStart> VAR_20 ) ; }
<S2SV_ModStart> TYPE_7 * VAR_41 , TYPE_8 VAR_44 <S2SV_ModStart> += 4 ; if ( VAR_43 == VAR_44 ) return VAR_43 ; <S2SV_ModStart> '=' ) { if ( VAR_43 == VAR_44 ) return VAR_43 ; <S2SV_ModStart> '=' ) { if ( VAR_43 == VAR_44 ) return VAR_43 ;
<S2SV_ModStart> VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_56 ) && ! ( VAR_50 & VAR_57 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_58 ) && ! ( VAR_50 & VAR_59 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_60 ) && ! ( VAR_50 & VAR_61 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_62 ) && ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_63 ) != ( VAR_50 & VAR_63 ) ) ) { return - VAR_36 ; }
<S2SV_ModStart> TYPE_1 ) { VAR_5 = VAR_4 ;
<S2SV_ModStart> VAR_65 , VAR_65 , VAR_173
<S2SV_ModStart> 1 ) ; if ( VAR_276 < VAR_278 -> VAR_279 )
<S2SV_ModStart> if ( ( VAR_163 < 0 ) || ( ( TYPE_55 ) VAR_163 > VAR_145 ) ) { VAR_145 = 0 ; continue ; } if ( (
<S2SV_ModStart> -> VAR_1 ; METHOD_3 ( & VAR_9 ) ; <S2SV_ModStart> VAR_3 = VAR_4 ; VAR_7 -> STRUCT_OR_UNION_4 = VAR_8 ; METHOD_4 ( & VAR_9 ) <S2SV_ModStart> VAR_6 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; goto VAR_82 <S2SV_ModEnd> ; } VAR_81 <S2SV_ModStart> VAR_68 ) ; VAR_82 :
<S2SV_ModStart> VAR_6 , 1 <S2SV_ModEnd> , VAR_213 ,
<S2SV_ModStart> VAR_30 ) { if ( * VAR_31 > METHOD_6 ( VAR_26 ) ) { return VAR_11 ; } <S2SV_ModStart> ( VAR_31 && VAR_26 [ * VAR_31 ] && <S2SV_ModStart> VAR_11 ; } <S2SV_ModEnd> if ( METHOD_2 <S2SV_ModStart> ( VAR_30 && VAR_26 [ * VAR_30 ] && <S2SV_ModStart> VAR_20 ; } <S2SV_ModEnd> if ( METHOD_4
<S2SV_ModStart> struct STRUCT_OR_UNION_7 VAR_275 = { }
<S2SV_ModStart> * VAR_216 , TYPE_30 <S2SV_ModEnd> * VAR_237 ) <S2SV_ModStart> VAR_203 -> VAR_164 -> VAR_248 ; const TYPE_6 * const VAR_14 = & VAR_236 -> VAR_250 . <S2SV_ModEnd> VAR_12 ; const <S2SV_ModStart> VAR_244 ; const TYPE_31 * const VAR_251 = VAR_14 -> VAR_251 ; const TYPE_32 <S2SV_ModEnd> VAR_230 = VAR_244 <S2SV_ModStart> -> VAR_46 ; TYPE_33 <S2SV_ModEnd> VAR_52 = METHOD_3 <S2SV_ModStart> VAR_160 ) ; METHOD_27 <S2SV_ModEnd> ( VAR_237 , <S2SV_ModStart> = METHOD_7 ( VAR_203 , VAR_160 <S2SV_ModEnd> , VAR_144 , <S2SV_ModStart> if ( ! METHOD_28 <S2SV_ModEnd> ( VAR_143 , <S2SV_ModStart> VAR_67 ) ) METHOD_27 <S2SV_ModEnd> ( VAR_237 , <S2SV_ModStart> ( VAR_87 && VAR_78 <S2SV_ModEnd> ) ) { <S2SV_ModStart> { METHOD_12 ( VAR_203 , VAR_160 <S2SV_ModEnd> , VAR_237 ) <S2SV_ModStart> VAR_203 -> VAR_164 -> <S2SV_ModEnd> VAR_123 [ VAR_95 <S2SV_ModStart> ) { const TYPE_32 <S2SV_ModEnd> VAR_208 = VAR_216 <S2SV_ModStart> VAR_203 -> VAR_164 -> <S2SV_ModEnd> VAR_123 [ 0 <S2SV_ModStart> VAR_203 -> VAR_164 -> <S2SV_ModEnd> VAR_129 [ VAR_230 <S2SV_ModStart> TYPE_28 VAR_206 = VAR_251 <S2SV_ModEnd> -> VAR_133 [ <S2SV_ModStart> ] ; const TYPE_33 <S2SV_ModEnd> * const VAR_202 <S2SV_ModStart> VAR_203 -> VAR_164 -> <S2SV_ModEnd> VAR_139 [ VAR_206 <S2SV_ModStart> ; METHOD_16 ( VAR_203 , VAR_160 <S2SV_ModEnd> , VAR_237 ) <S2SV_ModStart> if ( ! METHOD_28 <S2SV_ModEnd> ( VAR_143 , <S2SV_ModStart> VAR_202 ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> VAR_203 -> VAR_164 -> <S2SV_ModEnd> VAR_165 [ VAR_166 <S2SV_ModStart> VAR_173 ] ) ; ++ VAR_236 -> VAR_252 [ 0 ] [ VAR_244 -> VAR_173 ] <S2SV_ModStart> VAR_194 ; const TYPE_32 <S2SV_ModEnd> VAR_208 = VAR_216 <S2SV_ModStart> , VAR_202 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_247 , & VAR_251 <S2SV_ModEnd> -> VAR_243 [ <S2SV_ModStart> VAR_247 , & VAR_251 <S2SV_ModEnd> -> VAR_243 [
<S2SV_ModStart> VAR_57 ) ; struct STRUCT_OR_UNION_3 * VAR_60 = VAR_50 ; struct STRUCT_OR_UNION_4 * VAR_61 = VAR_60 -> VAR_61 ; <S2SV_ModStart> + METHOD_2 ( VAR_61 ) ; if ( ! VAR_60 -> VAR_62 ) return - VAR_63 <S2SV_ModEnd> ; VAR_55 = <S2SV_ModStart> , METHOD_8 ( VAR_61 <S2SV_ModEnd> ) , VAR_18 <S2SV_ModStart> , METHOD_8 ( VAR_61 ) ) ; METHOD_9 ( & VAR_55 -> VAR_29 ) ; VAR_55 -> VAR_32 = VAR_32 ; VAR_55 -> VAR_34 = 0 ; VAR_55 -> VAR_36 = 0 ; VAR_55 -> VAR_38 = 0 ; VAR_55 -> VAR_40 = 0 ; METHOD_10 ( & VAR_55 -> VAR_42 , 0 ) ; METHOD_11 ( & VAR_55 -> VAR_56 ) ; VAR_45 -> VAR_50 <S2SV_ModEnd> = VAR_55 ; <S2SV_ModStart> -> VAR_52 , VAR_61 <S2SV_ModEnd> ) ; METHOD_13
<S2SV_ModStart> ( VAR_27 , METHOD_3 ( VAR_28 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_31 VAR_239 ; TYPE_33 <S2SV_ModEnd> VAR_226 ; VAR_234 <S2SV_ModStart> TYPE_31 VAR_239 ; TYPE_33 <S2SV_ModEnd> VAR_226 ; VAR_234
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_579 <S2SV_ModStart> VAR_13 ) ; \\\n} <S2SV_ModEnd> TYPE_19 * VAR_591 <S2SV_ModStart> goto VAR_426 ; ( TYPE_85 ) METHOD_81 ( VAR_575 , 0 , ( TYPE_73 ) VAR_452 * sizeof ( * VAR_575 ) ) ;
<S2SV_ModStart> * VAR_33 , const unsigned TYPE_2 * VAR_17 ) { <S2SV_ModEnd> unsigned TYPE_2 VAR_15 <S2SV_ModStart> . VAR_9 ) { METHOD_7 ( "XCOPY:<S2SV_blank>emulate_3pc<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>se_dev<S2SV_blank>%p\\n" , VAR_33 ) ; <S2SV_ModStart> return 0 ; } <S2SV_ModStart> 0 ] , <S2SV_ModEnd> VAR_17 , VAR_18 <S2SV_ModStart> != 0 ) { METHOD_7 ( "XCOPY:<S2SV_blank>skip<S2SV_blank>non-matching:<S2SV_blank>%*ph\\n" , VAR_18 , VAR_15 ) ; <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> METHOD_7 ( "XCOPY<S2SV_blank>0xe4:<S2SV_blank>located<S2SV_blank>se_dev:<S2SV_blank>%p\\n" <S2SV_ModStart> VAR_33 ) ; <S2SV_ModEnd> return 1 ;
<S2SV_ModStart> STRUCT_OR_UNION_11 * VAR_377 = VAR_102 <S2SV_ModStart> == VAR_102 ) { VAR_411 = <S2SV_ModEnd> - VAR_109 ; <S2SV_ModStart> - VAR_109 ; goto VAR_479 ; } <S2SV_ModStart> VAR_102 ) { VAR_411 = <S2SV_ModEnd> - VAR_109 ; <S2SV_ModStart> - VAR_109 ; goto VAR_479 ; <S2SV_ModStart> VAR_102 ) { VAR_411 = - VAR_109 ; goto VAR_479 <S2SV_ModEnd> ; } switch <S2SV_ModStart> ( VAR_411 ) goto VAR_479 <S2SV_ModEnd> ; for ( <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>add<S2SV_blank>dev<S2SV_blank>to<S2SV_blank>genpd\\n" ) ; goto VAR_479 <S2SV_ModEnd> ; } } <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>reset<S2SV_blank>ACP\\n" ) ; VAR_411 = - VAR_466 ; goto VAR_479 <S2SV_ModEnd> ; } METHOD_26 <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>reset<S2SV_blank>ACP\\n" ) ; VAR_411 = - VAR_466 ; goto VAR_479 <S2SV_ModEnd> ; } METHOD_26 <S2SV_ModStart> return 0 ; VAR_479 : METHOD_11 ( VAR_377 ) ; METHOD_11 ( VAR_474 -> VAR_475 . VAR_372 ) ; METHOD_11 ( VAR_474 -> VAR_475 . VAR_399 ) ; METHOD_11 ( VAR_474 -> VAR_475 . VAR_406 ) ; return VAR_411 ;
<S2SV_ModStart> VAR_17 ) { METHOD_38 ( VAR_326 , 4 ) ; METHOD_38 <S2SV_ModEnd> ( & VAR_222 <S2SV_ModStart> ( & VAR_222 , 4
<S2SV_ModStart> "updateDevice()<S2SV_blank>:<S2SV_blank>memory<S2SV_blank>allocation<S2SV_blank>error" ) ; * VAR_90 = VAR_147 -> VAR_110 ;
<S2SV_ModStart> ; VAR_379 -> VAR_492 = VAR_304 ; VAR_379 -> <S2SV_ModStart> ( VAR_489 , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:<S2SV_blank>safe\\n" <S2SV_ModEnd> , VAR_489 -> <S2SV_ModStart> VAR_489 -> VAR_464 , VAR_489 -> VAR_31 -> VAR_492 ? "<S2SV_blank>(speculative<S2SV_blank>execution)" : "" <S2SV_ModStart> ( VAR_489 , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:" <S2SV_ModEnd> , VAR_489 -> <S2SV_ModStart> VAR_489 -> VAR_464 , VAR_489 -> VAR_31 -> VAR_492 ? "<S2SV_blank>(speculative<S2SV_blank>execution)" : ""
<S2SV_ModStart> } else { if ( ( VAR_78 -> VAR_79 == VAR_80 ) && ( ( VAR_87 -> VAR_89 & VAR_90 ) == 0 ) && ( ( VAR_87 -> VAR_89 & VAR_91 ) == 0 ) && ( ( VAR_87 -> VAR_89 & VAR_92 ) == 0 ) && ( ( VAR_87 -> VAR_89 & VAR_93 ) == 0 ) && ( VAR_87 -> VAR_94 == 0 ) && ( VAR_87 -> VAR_95 == 0 ) ) return ;
<S2SV_ModStart> -> VAR_53 , "The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request" ) , <S2SV_ModEnd> VAR_56 ) ;
<S2SV_ModStart> VAR_845 -> VAR_647 = 0 ; VAR_845 -> VAR_664
<S2SV_ModStart> -> VAR_42 -> VAR_45 , VAR_40 -> VAR_42 ->
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * * VAR_88 <S2SV_ModStart> 0 ; struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_93 = <S2SV_ModStart> ( VAR_93 -> VAR_93 . <S2SV_ModStart> || VAR_93 -> VAR_93 . <S2SV_ModStart> || VAR_93 -> VAR_93 . <S2SV_ModStart> || VAR_93 -> VAR_93 . <S2SV_ModStart> = VAR_93 -> VAR_93 . <S2SV_ModStart> & VAR_93 -> VAR_93 . <S2SV_ModStart> ( VAR_93 -> VAR_93 . <S2SV_ModStart> > VAR_93 -> VAR_93 . VAR_55 ) VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_31 -= VAR_62 <S2SV_ModStart> ( VAR_93 -> VAR_93 . <S2SV_ModStart> > VAR_93 -> VAR_93 . VAR_55 ) VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_38 -= VAR_62 <S2SV_ModStart> ( VAR_93 -> VAR_93 . <S2SV_ModStart> > VAR_93 -> VAR_93 . VAR_55 ) VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_45 -= VAR_62 <S2SV_ModStart> ( VAR_93 -> VAR_93 . <S2SV_ModStart> > VAR_93 -> VAR_93 . VAR_55 ) VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_52 -= VAR_62 <S2SV_ModStart> ; VAR_93 -> VAR_93 . <S2SV_ModStart> , VAR_93 -> VAR_93 . <S2SV_ModStart> < VAR_93 -> VAR_93 . VAR_92 ) if ( VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_74 [ VAR_78 <S2SV_ModStart> += VAR_93 -> VAR_93 . <S2SV_ModStart> = VAR_93 -> VAR_93 . VAR_92 ; VAR_93 -> VAR_93 . <S2SV_ModEnd> VAR_92 = ( <S2SV_ModStart> -= VAR_93 -> VAR_93 . <S2SV_ModStart> = VAR_93 -> VAR_93 . VAR_92 ; METHOD_3 ( & VAR_93 -> VAR_95 , VAR_96 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; TYPE_10 VAR_112 <S2SV_ModEnd> ; METHOD_13 (
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_6 , <S2SV_ModStart> * VAR_6 , vpx_prob VAR_4 , vpx_prob <S2SV_ModEnd> VAR_5 ) {
<S2SV_ModStart> TYPE_4 METHOD_0 ( <S2SV_ModEnd> const TYPE_2 * <S2SV_ModStart> ; do { <S2SV_ModEnd> VAR_16 = VAR_16
<S2SV_ModStart> VAR_3 ) { if ( VAR_3 -> VAR_5 ) return ; if ( VAR_3 -> VAR_2 ) <S2SV_ModStart> VAR_2 ) ; if ( VAR_3 -> VAR_4 ) <S2SV_ModStart> VAR_4 ) ; VAR_3 -> VAR_5 = VAR_6 ;
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_33 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_25 ) , VAR_10 <S2SV_ModEnd> , VAR_32 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_10 <S2SV_ModEnd> , VAR_32 ,
<S2SV_ModStart> ) VAR_24 ; if ( METHOD_4 ( VAR_43 -> VAR_33 ) + VAR_34 -> VAR_35 + 2 > VAR_44 ) return - VAR_45 ;
<S2SV_ModStart> TYPE_6 VAR_33 = METHOD_7 ( <S2SV_ModStart> VAR_39 , VAR_32 )
<S2SV_ModStart> VAR_8 ++ ) METHOD_1 ( <S2SV_ModStart> [ VAR_8 ] , - 1 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> METHOD_2 ( VAR_16
<S2SV_ModStart> , METHOD_14 ( VAR_42 <S2SV_ModEnd> ) - 1
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> ( VAR_25 = METHOD_10 <S2SV_ModEnd> ( VAR_24 )
<S2SV_ModStart> VAR_65 ) { if ( VAR_124 >= VAR_135 ) { METHOD_15 ( "b/25818142" ) ; METHOD_16 ( 0x534e4554 , "25818142" ) ; VAR_127 -> VAR_123 = 0 ; return - 1 ; }
<S2SV_ModStart> ( ) ; struct STRUCT_OR_UNION_4 VAR_7 = { 0 } ; <S2SV_ModStart> METHOD_4 ( VAR_4 , & VAR_7 <S2SV_ModStart> VAR_6 ) ; METHOD_9 ( VAR_8 ) ;
<S2SV_ModStart> & VAR_19 ) { <S2SV_ModStart> = 1 ; } <S2SV_ModStart> & VAR_23 ) { <S2SV_ModStart> + 1 ; } else { VAR_34 = VAR_62 -> VAR_34 ; } <S2SV_ModEnd> if ( METHOD_1
<S2SV_ModStart> -> VAR_2 ; <S2SV_ModEnd> METHOD_1 ( "%s:<S2SV_blank>group=%p\\n" <S2SV_ModStart> VAR_10 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> VAR_32 -> VAR_33 <S2SV_ModStart> VAR_32 -> VAR_33 = 0 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> } if ( <S2SV_ModEnd> STRUCT_OR_UNION_12 -> VAR_33 <S2SV_ModStart> STRUCT_OR_UNION_12 -> VAR_33 == VAR_34 ) STRUCT_OR_UNION_12 = VAR_35 ; else STRUCT_OR_UNION_12 -> VAR_33 += 1 <S2SV_ModEnd> ; METHOD_12 (
<S2SV_ModStart> ) ) { METHOD_105 <S2SV_ModEnd> ( VAR_473 ,
<S2SV_ModStart> } else { if ( METHOD_46 ( ! METHOD_67 ( STRUCT_OR_UNION_23 ) ) ) { METHOD_66 ( VAR_132 ) ; return METHOD_63 ( - VAR_136 ) ; } <S2SV_ModEnd> METHOD_66 ( VAR_132
<S2SV_ModStart> case 0 : if ( VAR_160 -> VAR_161 != VAR_160 -> VAR_62 ) { METHOD_17 ( & VAR_164 -> VAR_138 , VAR_81 , "Malformed<S2SV_blank>OS<S2SV_blank>X<S2SV_blank>metadata<S2SV_blank>entry:<S2SV_blank>inconsistent<S2SV_blank>size" ) ; return ( VAR_142 ) ; } <S2SV_ModStart> VAR_160 -> VAR_161 ) ; return ( VAR_83 ) ; } if ( VAR_160 -> VAR_62 > ( 4 * 1024 * 1024 ) ) { METHOD_17 ( & VAR_164 -> VAR_138 , VAR_81 , "Mac<S2SV_blank>metadata<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%jd<S2SV_blank>><S2SV_blank>4M<S2SV_blank>bytes" , ( TYPE_8 ) VAR_160 -> VAR_62 <S2SV_ModStart> case 0 : if ( ( TYPE_25 ) VAR_113 > VAR_162 ) VAR_113 = VAR_162 ;
<S2SV_ModStart> [ VAR_13 + VAR_11 <S2SV_ModEnd> ] ; TYPE_11 <S2SV_ModStart> ( VAR_28 ) > VAR_13 <S2SV_ModEnd> ) { VAR_49
<S2SV_ModStart> ) { TYPE_5 VAR_75 ; TYPE_5 <S2SV_ModStart> ; } } VAR_75 = <S2SV_ModEnd> METHOD_3 ( VAR_72 <S2SV_ModStart> , VAR_27 ) ; if ( VAR_75 < 0 ) METHOD_13 ( VAR_74 , "regexec<S2SV_blank>failed" ) ; if ( VAR_75 == 0
<S2SV_ModStart> VAR_11 -> VAR_8 ; if ( VAR_11 -> VAR_12 == 0 ) return - VAR_25
<S2SV_ModStart> ) ; } METHOD_3 <S2SV_ModEnd> ( VAR_6 ,
<S2SV_ModStart> goto VAR_73 ; if ( <S2SV_ModStart> VAR_82 , VAR_81 , & VAR_85 ) ) goto VAR_73 <S2SV_ModEnd> ; METHOD_10 (
<S2SV_ModStart> : 32 ; if ( VAR_332 == 32 ) { METHOD_39 ( VAR_364 , 4 ) ; METHOD_39 ( & VAR_362 , 4 ) ; } <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> } METHOD_40 (
<S2SV_ModStart> VAR_75 ) ; METHOD_22 ( & VAR_112 -> VAR_116 ) ; <S2SV_ModStart> VAR_76 , VAR_112 ) ; METHOD_23 ( & VAR_112 -> VAR_116
<S2SV_ModStart> -> VAR_135 ) METHOD_29 <S2SV_ModEnd> ( VAR_144 -> <S2SV_ModStart> VAR_143 ) ; METHOD_29 <S2SV_ModEnd> ( VAR_144 ->
<S2SV_ModStart> } VAR_125 = METHOD_12 <S2SV_ModEnd> ( VAR_42 )
<S2SV_ModStart> ; if ( VAR_104 > 1024 || VAR_104 < 0 ) continue ; if (
<S2SV_ModStart> TYPE_3 * VAR_14 , TYPE_4 VAR_15 <S2SV_ModStart> VAR_10 , VAR_14 , VAR_15 <S2SV_ModStart> VAR_12 ) { if ( VAR_16 >= VAR_15 ) { VAR_16 = VAR_15 + 1 ; return ; }
<S2SV_ModStart> STRUCT_OR_UNION_8 , VAR_34 ) ; METHOD_9 ( VAR_36 , 0 , sizeof ( struct STRUCT_OR_UNION_9 )
<S2SV_ModStart> { if ( METHOD_17 ( VAR_95 , <S2SV_ModEnd> VAR_40 -> VAR_41 <S2SV_ModStart> { if ( METHOD_17 ( VAR_95 , <S2SV_ModEnd> VAR_40 -> VAR_41
<S2SV_ModStart> = 0 ; TYPE_6 VAR_38 = 0 ; <S2SV_ModStart> , & VAR_32 , & VAR_38 <S2SV_ModStart> METHOD_8 ( VAR_20 ) ; if ( VAR_38 > VAR_39 ) METHOD_8 ( VAR_33 <S2SV_ModStart> } if ( VAR_37 > ( TYPE_3 ) VAR_38 ) { VAR_37 = - 1 ; METHOD_8 ( VAR_33 ) ; } if (
<S2SV_ModStart> ; TYPE_5 VAR_56 <S2SV_ModEnd> ; TYPE_9 VAR_60 <S2SV_ModStart> METHOD_5 ( VAR_55 <S2SV_ModEnd> ) ; VAR_60 <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_19 ( VAR_60
<S2SV_ModStart> TYPE_3 VAR_26 ; struct STRUCT_OR_UNION_3 VAR_28 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> 0 ) ; TYPE_4 VAR_30 = VAR_27 -> VAR_21 -> VAR_15 ; <S2SV_ModStart> ++ ) { TYPE_5 VAR_31 = <S2SV_ModEnd> VAR_26 * sizeof <S2SV_ModStart> struct STRUCT_OR_UNION_3 ) ; TYPE_3 VAR_32 = METHOD_4 ( VAR_27 -> VAR_6 , VAR_30 + VAR_31 , ( TYPE_2 * ) & VAR_28 , sizeof ( struct STRUCT_OR_UNION_3 <S2SV_ModStart> ) ) ; if ( VAR_32 ) { <S2SV_ModStart> ( VAR_27 , & <S2SV_ModStart> VAR_28 ) ; }
<S2SV_ModStart> } VAR_43 = METHOD_5 <S2SV_ModEnd> ( VAR_41 ->
<S2SV_ModStart> ) ) ; METHOD_22 ( VAR_364 -> VAR_343 , 0 , sizeof ( VAR_45 ) ) ;
<S2SV_ModStart> VAR_48 == VAR_7 || VAR_53 > VAR_55
<S2SV_ModStart> - VAR_37 - 1 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> & VAR_295 , sizeof ( TYPE_30 ) <S2SV_ModEnd> , & VAR_335 <S2SV_ModStart> || VAR_335 != sizeof ( TYPE_30 ) <S2SV_ModEnd> ) { METHOD_66 <S2SV_ModStart> & VAR_295 , sizeof ( TYPE_30 ) <S2SV_ModEnd> ) ) {
<S2SV_ModStart> TYPE_3 VAR_59 = METHOD_19 ( STRUCT_OR_UNION_11 -> VAR_57 ) ; TYPE_4 VAR_74 = METHOD_19 ( STRUCT_OR_UNION_11 -> VAR_74 ) <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> { if ( VAR_74 < 0 ) { <S2SV_ModEnd> VAR_72 -> VAR_68 <S2SV_ModStart> = METHOD_15 ( VAR_74 <S2SV_ModEnd> ) ; METHOD_18
<S2SV_ModStart> VAR_21 ; TYPE_7 * VAR_33 = METHOD_17 ( <S2SV_ModEnd> VAR_24 + 1 <S2SV_ModStart> VAR_24 + 1 ) ; if ( ! VAR_33 ) return VAR_36 <S2SV_ModEnd> ; METHOD_14 ( <S2SV_ModStart> & VAR_91 , VAR_33 ) ; METHOD_16 (
<S2SV_ModStart> VAR_168 + 1 ) ; break ; case VAR_120 : if ( METHOD_18 ( VAR_171 , VAR_167 , VAR_168 <S2SV_ModStart> VAR_125 - VAR_167 <S2SV_ModEnd> , VAR_128 ,
<S2SV_ModStart> ) ; } else if ( VAR_38 >= 255 && VAR_33 -> VAR_44 == VAR_45 ) { METHOD_7 ( "Too<S2SV_blank>many<S2SV_blank>fills<S2SV_blank>for<S2SV_blank>SWFShape<S2SV_blank>V1.\\n" "Use<S2SV_blank>a<S2SV_blank>higher<S2SV_blank>SWFShape<S2SV_blank>version\\n" ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_5 -> VAR_74 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_8 <S2SV_ModStart> ( ! VAR_75 && VAR_68 -> VAR_8 ) { struct STRUCT_OR_UNION_7 * VAR_70 = VAR_68 -> VAR_8 ; <S2SV_ModEnd> VAR_70 -> VAR_52 <S2SV_ModStart> -> VAR_67 ; <S2SV_ModEnd> VAR_68 -> VAR_69
<S2SV_ModStart> VAR_11 ) ; if ( VAR_12 -> VAR_12 . VAR_15 & VAR_16 ) { struct STRUCT_OR_UNION_5 * VAR_17 , * VAR_18 ; METHOD_9 ( VAR_17 , VAR_18 , & VAR_12 -> VAR_19 , VAR_20 ) { METHOD_10 ( & VAR_17 -> VAR_21 . VAR_22 , & VAR_23 ) ; METHOD_11 ( VAR_17 ) ; } } else
<S2SV_ModStart> { VAR_41 = <S2SV_ModEnd> VAR_40 -> VAR_33 <S2SV_ModStart> VAR_40 -> VAR_33 -> rqs [ <S2SV_ModEnd> VAR_44 + VAR_35 <S2SV_ModStart> VAR_44 + VAR_35 ] <S2SV_ModEnd> ; if (
<S2SV_ModStart> ) { TYPE_4 VAR_48 = VAR_49 ; switch ( VAR_46 -> VAR_28 . VAR_29 ) { case VAR_50 : <S2SV_ModEnd> if ( VAR_17 <S2SV_ModStart> if ( VAR_17 > 0 ) { const TYPE_9 * const VAR_28 = & VAR_46 -> VAR_28 ; <S2SV_ModEnd> const TYPE_8 VAR_18 <S2SV_ModStart> ( TYPE_8 ) VAR_28 -> <S2SV_ModEnd> VAR_14 . VAR_11 <S2SV_ModStart> ( TYPE_8 ) VAR_28 -> <S2SV_ModEnd> VAR_14 . VAR_15 <S2SV_ModStart> . VAR_15 ; VAR_48 <S2SV_ModEnd> = ( VAR_17 <S2SV_ModStart> VAR_18 ) ? VAR_51 : VAR_52 ; } else { VAR_48 = VAR_49 ; } break ; case VAR_24 : break ; case VAR_30 : VAR_48 = VAR_17 > 0 ? VAR_51 : VAR_49 ; break ; } <S2SV_ModEnd> if ( VAR_46 <S2SV_ModStart> . VAR_42 != VAR_48 <S2SV_ModEnd> ) { VAR_46 <S2SV_ModStart> . VAR_42 = VAR_48 <S2SV_ModEnd> ; METHOD_1 (
<S2SV_ModStart> , TYPE_6 VAR_10 , TYPE_7 VAR_22 <S2SV_ModStart> VAR_20 ++ ) { <S2SV_ModStart> METHOD_2 ( VAR_20 , VAR_22 <S2SV_ModStart> return VAR_20 ; }
<S2SV_ModStart> METHOD_106 ( VAR_1513 ) ; if ( VAR_1479 . VAR_530 > METHOD_253 ( VAR_1513 ) ) METHOD_245 ( VAR_1483 , "InsufficientImageDataInFile"
<S2SV_ModStart> * VAR_14 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * VAR_17 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> ( VAR_14 , VAR_17 <S2SV_ModEnd> , VAR_9 ) <S2SV_ModStart> , VAR_14 , VAR_17 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_209 ) ; struct STRUCT_OR_UNION_17 * VAR_164 <S2SV_ModStart> -> VAR_144 ; VAR_164 = METHOD_40 <S2SV_ModEnd> ( VAR_151 -> <S2SV_ModStart> VAR_151 -> VAR_164 ) ; if ( VAR_164 ) { <S2SV_ModEnd> VAR_164 = METHOD_22 <S2SV_ModStart> ( VAR_202 , VAR_164 ) ; RCU_INIT_POINTER ( VAR_199 -> VAR_164 , VAR_164 ) ; } <S2SV_ModEnd> METHOD_24 ( VAR_202 <S2SV_ModStart> ; if ( VAR_164 <S2SV_ModEnd> ) METHOD_24 ( <S2SV_ModStart> -> VAR_159 = <S2SV_ModEnd> VAR_164 -> VAR_162 <S2SV_ModStart> -> VAR_162 + <S2SV_ModEnd> VAR_164 -> VAR_165 <S2SV_ModStart> VAR_164 -> VAR_165 <S2SV_ModEnd> ; METHOD_25 (
<S2SV_ModStart> VAR_83 ) ; <S2SV_ModEnd> VAR_65 = ( <S2SV_ModStart> VAR_83 ) ; if ( VAR_27 == VAR_63 -> VAR_81 ) VAR_67 = 1 ; if ( VAR_31 == VAR_63 -> VAR_81 ) return METHOD_12 ( STRUCT_OR_UNION_12 , VAR_79 , VAR_80 , VAR_81 , VAR_82 , VAR_83 ) ; if ( VAR_39 == VAR_63 -> VAR_81 ) VAR_73 = 1 ; if ( VAR_43 == VAR_63 -> VAR_81 ) { METHOD_5 ( VAR_49 , VAR_63 ) { if ( VAR_48 == VAR_49 -> VAR_50 ) { VAR_73 = 1 ; break ; } } }
<S2SV_ModStart> 0 ) { struct STRUCT_OR_UNION_6 VAR_86 = VAR_103 -> VAR_86 ; <S2SV_ModStart> VAR_84 , & <S2SV_ModEnd> VAR_86 ) ;
<S2SV_ModStart> ; METHOD_27 ( "%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n" , ( TYPE_20 TYPE_20 ) <S2SV_ModEnd> VAR_63 -> VAR_41 <S2SV_ModStart> -> VAR_41 , ( TYPE_20 TYPE_20 )
<S2SV_ModStart> STRUCT_OR_UNION_3 VAR_72 ; METHOD_4 ( & VAR_72 , 0 , sizeof ( VAR_72 ) ) ;
<S2SV_ModStart> * VAR_77 ; TYPE_17 <S2SV_ModEnd> VAR_33 , VAR_34 <S2SV_ModStart> VAR_33 = ( TYPE_17 <S2SV_ModEnd> ) VAR_98 -> <S2SV_ModStart> VAR_34 = ( TYPE_17 <S2SV_ModEnd> ) VAR_98 -> <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> = VAR_101 ; VAR_98 -> VAR_109 = VAR_110 ; <S2SV_ModStart> ; VAR_102 : METHOD_10 ( VAR_104 ) ; METHOD_10 ( VAR_106 ) ; <S2SV_ModEnd> METHOD_10 ( VAR_108
<S2SV_ModStart> -> VAR_47 ; METHOD_4 ( & VAR_75 , 0 , sizeof ( VAR_75 ) ) ;
<S2SV_ModStart> VAR_313 , VAR_295 , VAR_257 , VAR_289 <S2SV_ModStart> ] ; } <S2SV_ModEnd> VAR_257 = METHOD_37 <S2SV_ModStart> 0 ) ; VAR_289 = <S2SV_ModEnd> VAR_508 -> VAR_509 <S2SV_ModStart> VAR_509 > 0 ? METHOD_37 ( VAR_479 , VAR_515 , 0 ) : <S2SV_ModEnd> VAR_508 -> VAR_485 <S2SV_ModStart> VAR_485 -> VAR_289 ; VAR_112 = METHOD_11 ( VAR_479 , VAR_515 ) ; VAR_311 <S2SV_ModStart> 0 ) ; VAR_313 = METHOD_37 ( VAR_479 , VAR_515 , 0 ) ; VAR_295 <S2SV_ModEnd> = METHOD_11 ( <S2SV_ModStart> VAR_515 ) ; <S2SV_ModEnd> if ( VAR_508 <S2SV_ModStart> { if ( VAR_257 != VAR_508 -> VAR_257 || VAR_289 != VAR_508 -> VAR_485 -> VAR_289 || <S2SV_ModStart> ; } } VAR_508 -> VAR_257 = VAR_257 ; VAR_508 -> VAR_485 -> VAR_289 = VAR_289 ;
<S2SV_ModStart> struct STRUCT_OR_UNION_2 * VAR_11 ; struct STRUCT_OR_UNION_5 VAR_12 ; struct STRUCT_OR_UNION_6 * VAR_13 ; const TYPE_1 * VAR_14 ; TYPE_0 VAR_15 ; TYPE_2 * VAR_16 = VAR_17 ; TYPE_0 VAR_18 ; if ( <S2SV_ModEnd> STRUCT_OR_UNION_4 -> VAR_1 <S2SV_ModStart> STRUCT_OR_UNION_4 -> VAR_1 ) return 0 ; VAR_18 = METHOD_2 ( STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_7 ) ; if ( VAR_18 ) return VAR_18 <S2SV_ModStart> if ( ! STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_3 ) return - VAR_21 ; VAR_18 = STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_3 ( STRUCT_OR_UNION_4 , & VAR_12 , sizeof ( VAR_12 ) ) ; if ( VAR_18 < 0 ) { if ( ! METHOD_4 ( STRUCT_OR_UNION_4 ) || STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_5 ( STRUCT_OR_UNION_4 ) ) return VAR_18 ; METHOD_6 ( & VAR_12 , 0 , sizeof ( VAR_12 ) ) ; VAR_12 . VAR_22 = VAR_23 ; VAR_12 . VAR_24 = VAR_25 ; VAR_12 . VAR_26 = VAR_27 ; METHOD_6 ( VAR_12 . VAR_28 , 0x42 , VAR_29 ) ; } else if ( VAR_18 != sizeof ( VAR_12 ) ) { return - VAR_30 ; } if ( VAR_12 . VAR_22 != VAR_23 ) return - VAR_30 ; if ( VAR_12 . VAR_7 & ~ VAR_31 ) return - VAR_30 ; VAR_11 = METHOD_7 ( VAR_32 , VAR_33 ) ; if ( ! VAR_11 ) return - VAR_34 ; VAR_11 -> VAR_35 = VAR_12 . VAR_7 ; VAR_11 -> VAR_36 = VAR_12 . VAR_24 ; VAR_11 -> VAR_37 = VAR_12 . VAR_26 ; VAR_11 -> VAR_38 = VAR_17 ; METHOD_8 ( VAR_11 -> VAR_39 , VAR_12 . VAR_28 , sizeof ( VAR_11 -> VAR_39 ) ) ; VAR_18 = METHOD_9 ( VAR_11 , STRUCT_OR_UNION_4 , & VAR_14 , & VAR_15 ) ; if ( VAR_18 ) goto VAR_40 ; VAR_18 = - VAR_34 ; VAR_16 = METHOD_10 ( VAR_41 , VAR_33 ) ; if ( ! VAR_16 ) goto VAR_40 ; VAR_18 = METHOD_11 ( VAR_11 , & VAR_12 , VAR_16 , VAR_42 ) ; if ( VAR_18 && STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_43 ) { TYPE_0 VAR_44 = METHOD_11 ( VAR_11 , & VAR_12 , VAR_16 , STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_43 ) ; if ( VAR_44 ) { if ( VAR_44 == - VAR_45 ) VAR_18 = - VAR_45 ; goto VAR_40 ; } } else if ( VAR_18 ) { goto VAR_40 ; } VAR_13 = METHOD_12 ( VAR_14 , 0 , 0 ) ; if ( ! VAR_13 || METHOD_13 ( VAR_13 ) ) { VAR_18 = VAR_13 ? METHOD_14 ( VAR_13 ) : - VAR_34 ; printk ( KERN_DEBUG "%s:<S2SV_blank>error<S2SV_blank>%d<S2SV_blank>(inode<S2SV_blank>%u)<S2SV_blank>allocating<S2SV_blank>crypto<S2SV_blank>tfm\\n" , VAR_46 , VAR_18 , ( unsigned ) STRUCT_OR_UNION_4 -> VAR_47 ) ; goto VAR_40 ; } VAR_11 -> VAR_38 = VAR_13 ; METHOD_15 ( VAR_13 , ~ 0 ) ; METHOD_16 ( VAR_13 , VAR_48 ) ; VAR_18 = METHOD_17 ( VAR_13 , VAR_16 , VAR_15 ) ; if ( VAR_18 ) goto VAR_40 ; if ( METHOD_18 ( & STRUCT_OR_UNION_4 -> VAR_1 , VAR_17 , VAR_11 ) == VAR_17 ) VAR_11 = VAR_17 ; VAR_40 : if ( VAR_18 == - VAR_45 ) VAR_18 = 0 ; METHOD_19 ( VAR_11 ) ; METHOD_20 ( VAR_16 ) ; return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_12 , TYPE_4 * VAR_7 , TYPE_5 * VAR_13 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> VAR_12 -> VAR_9 -> <S2SV_ModEnd> VAR_10 [ VAR_15 <S2SV_ModStart> VAR_15 ] , VAR_13 -> <S2SV_ModEnd> VAR_14 [ VAR_15
<S2SV_ModStart> VAR_22 ) ; if ( ! METHOD_11 ( VAR_23 ) )
<S2SV_ModStart> ; if ( VAR_57 == VAR_43 <S2SV_ModEnd> ) return VAR_43 <S2SV_ModStart> TYPE_5 ) ) ; if ( VAR_60 == VAR_43 ) return VAR_43 <S2SV_ModStart> VAR_55 ) ; if ( VAR_60 -> VAR_47 == VAR_43 || VAR_60 -> VAR_51 == VAR_43 ) { METHOD_7 ( VAR_60 ) ; return VAR_43 ; }
<S2SV_ModStart> = VAR_12 ; VAR_17 -> VAR_18 ++ ;
<S2SV_ModStart> VAR_284 ) ; if ( VAR_278 < VAR_284 + VAR_277 -> VAR_278 + 1 ) { METHOD_25 ( "not<S2SV_blank>enough<S2SV_blank>space<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>sip<S2SV_blank>message\\n" ) ; return - 1 ; }
<S2SV_ModStart> -> VAR_78 ; if ( VAR_104 ) { VAR_104 -> VAR_84 = VAR_85 ; VAR_104 -> VAR_87 = VAR_102 -> VAR_93 . STRUCT_OR_UNION_17 ; METHOD_10 ( VAR_104 -> VAR_91 , VAR_102 -> VAR_93 . VAR_94 , VAR_95 ) ; VAR_104 -> VAR_97 = METHOD_11 ( VAR_110 ) -> VAR_99 ; VAR_104 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = 0 ; <S2SV_ModStart> * VAR_104 ) <S2SV_ModEnd> ; } VAR_113
<S2SV_ModStart> VAR_90 ) { METHOD_32 <S2SV_ModEnd> ( VAR_90 ) <S2SV_ModStart> ( VAR_112 ) METHOD_32 <S2SV_ModEnd> ( VAR_112 )
<S2SV_ModStart> ; TYPE_6 VAR_31 = 0 ; TYPE_6 VAR_37 <S2SV_ModStart> , & VAR_31 , & VAR_37 <S2SV_ModStart> METHOD_8 ( VAR_19 ) ; if ( VAR_37 > VAR_38 ) METHOD_8 ( VAR_32 <S2SV_ModStart> } if ( VAR_36 > ( TYPE_3 ) VAR_37 ) { VAR_36 = - 1 ; METHOD_8 ( VAR_32 ) ; } if (
<S2SV_ModStart> VAR_45 ) { METHOD_11 <S2SV_ModEnd> ( VAR_30 )
<S2SV_ModStart> 101 , ( "jas_malloc(%zu)\\n" <S2SV_ModEnd> , VAR_5 )
<S2SV_ModStart> TYPE_28 = VAR_7 ; if ( METHOD_7 ( ! METHOD_6 ( VAR_56 , TYPE_19 , TYPE_28 ) ) ) return - VAR_57
<S2SV_ModStart> STRUCT_OR_UNION_8 VAR_102 ; METHOD_30 ( & VAR_102 , 0 , sizeof ( VAR_102 ) ) ; <S2SV_ModStart> STRUCT_OR_UNION_6 VAR_43 ; METHOD_30 ( & VAR_43 , 0 , sizeof ( VAR_43 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_114 ; METHOD_30 ( & VAR_114 , 0 , sizeof ( VAR_114 ) ) <S2SV_ModStart> STRUCT_OR_UNION_8 VAR_102 ; METHOD_30 ( & VAR_102 , 0 , sizeof ( VAR_102 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_114 ; METHOD_30 ( & VAR_114 , 0 , sizeof ( VAR_114 ) )
<S2SV_ModStart> = VAR_22 ; <S2SV_ModEnd> METHOD_7 ( VAR_26
<S2SV_ModStart> -> VAR_86 ; METHOD_6 ( VAR_85 -> VAR_81 -> VAR_92 , VAR_85 -> VAR_92 , sizeof ( VAR_85 -> VAR_92 ) ) ;
<S2SV_ModStart> ; TYPE_5 VAR_56 <S2SV_ModEnd> ; VAR_95 ->
<S2SV_ModStart> VAR_51 == VAR_13 || VAR_89 -> VAR_51 == VAR_94 <S2SV_ModStart> VAR_51 = VAR_22 ; } else if ( VAR_69 == VAR_36 && VAR_89 -> VAR_51 == VAR_13 ) { VAR_89 -> VAR_51 = VAR_94 ; } else { return VAR_95 <S2SV_ModStart> ) { return VAR_95 <S2SV_ModEnd> ; } else <S2SV_ModStart> = sizeof ( VAR_96 <S2SV_ModEnd> ) * 8 <S2SV_ModStart> ( VAR_69 == VAR_41 ) { if ( VAR_89 -> VAR_81 ) { VAR_89 -> VAR_51 = VAR_46 ; } else { VAR_89 -> VAR_51 = VAR_49 ; } } else if ( VAR_89 -> VAR_51 == BODY_CHUNK_LF ) { return VAR_95 ; } else if ( VAR_69 == VAR_36 ) { VAR_89 -> VAR_51 = BODY_CHUNK_LF ; } else if ( VAR_69 == ';' <S2SV_ModEnd> ) { VAR_89 <S2SV_ModStart> else if ( VAR_89 -> VAR_51 == VAR_52 ) { if ( VAR_69 != '\\t' && METHOD_3 ( VAR_69 ) ) { return VAR_95 ; } } else if ( VAR_89 -> VAR_51 == VAR_27 <S2SV_ModEnd> ) { TYPE_8 <S2SV_ModStart> { TYPE_8 VAR_75 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ; continue ; } VAR_89 -> VAR_79 -= 4 ; if ( VAR_89 -> VAR_79 < 0 ) { return VAR_92 <S2SV_ModStart> else { return VAR_95 <S2SV_ModEnd> ; } VAR_89 <S2SV_ModStart> | VAR_75 ; if ( <S2SV_ModEnd> VAR_89 -> VAR_81 <S2SV_ModStart> VAR_92 ; } } else { return VAR_70 ;
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> METHOD_14 ( "accept,<S2SV_blank>" <S2SV_ModStart> continue ; } handle_modern_connection ( VAR_137 , VAR_102 ) ; } for ( VAR_126 = 0 ; VAR_126 < VAR_137 -> VAR_121 ; VAR_126 ++ ) { TYPE_18 VAR_138 ; TYPE_20 * VAR_139 ; VAR_139 = & ( METHOD_22 ( VAR_137 , TYPE_20 , VAR_126 ) ) ; if ( VAR_139 -> VAR_134 < 0 ) { continue ; } if ( METHOD_23 ( VAR_139 -> VAR_134 , & VAR_131 ) ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> = METHOD_24 ( VAR_139 -> VAR_134 <S2SV_ModEnd> , ( struct <S2SV_ModStart> continue ; } METHOD_26 ( VAR_137 , VAR_138 , VAR_139 , VAR_140 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_400 , "session_too_many_settings" , VAR_406 ) || ! METHOD_201 ( VAR_400 ,
<S2SV_ModStart> ; TYPE_45 VAR_1096 ; TYPE_45 VAR_1165 = 0 <S2SV_ModStart> VAR_1119 ) { VAR_1165 = 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; VAR_1165 = 1 ; METHOD_68 ( VAR_1158 -> VAR_1142 . VAR_1143 == 1 ) <S2SV_ModEnd> ; VAR_1133 -> <S2SV_ModStart> ; } } if ( VAR_1165 ) { VAR_1158 -> VAR_1130 = 1 ; VAR_1158 -> VAR_1142 . VAR_1143 -- ; if ( VAR_1158 -> VAR_1142 . VAR_1143 < 0 ) VAR_1158 -> VAR_1142 . VAR_1143 = 0 ; }
<S2SV_ModStart> METHOD_3 ( "Can\'t<S2SV_blank>find<S2SV_blank>debug<S2SV_blank>filename\\n" ) ; return 1 ; } if ( ! METHOD_9 ( VAR_24 -> VAR_25 ) ) { METHOD_3 ( "Invalid<S2SV_blank>GUID<S2SV_blank>for<S2SV_blank>file\\n"
<S2SV_ModStart> VAR_373 -> VAR_131 ) { TYPE_1 VAR_238 = sizeof ( VAR_411 -> VAR_244 -> VAR_139 -> VAR_140 -> VAR_141 ) ; METHOD_35 ( VAR_373 -> VAR_131 , & VAR_411 -> VAR_244 -> VAR_139 -> VAR_140 -> VAR_141 , VAR_238 ) ; <S2SV_ModEnd> VAR_373 -> VAR_129 <S2SV_ModStart> VAR_373 -> VAR_129 = VAR_238 ; } <S2SV_ModEnd> METHOD_36 ( VAR_373
<S2SV_ModStart> , - 1 ) ; METHOD_8 ( VAR_24 -> VAR_25 -> VAR_19 , VAR_23
<S2SV_ModStart> , * VAR_27 ; TYPE_2 VAR_82 <S2SV_ModStart> VAR_27 ) ) break ; } do { struct STRUCT_OR_UNION_2 * VAR_83 = VAR_70 -> VAR_41 ; if ( VAR_70 == VAR_84 ) break ; VAR_82 = VAR_83 -> VAR_77 == VAR_27 ; if ( VAR_82 && METHOD_5 ( VAR_34 , VAR_83 ) ) break ; VAR_70 = VAR_70 -> VAR_77 ; } while ( ! VAR_82 ) ; <S2SV_ModEnd> VAR_58 = VAR_43
<S2SV_ModStart> TYPE_5 = ! ( ( ( VAR_42 & VAR_67 ) && METHOD_14 ( VAR_65 ) && ( VAR_65 -> VAR_62 -> VAR_53 . VAR_46 & VAR_17 ) ) || <S2SV_ModStart> METHOD_12 ( VAR_65 )
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_6 ) { return
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_2 VAR_431 ; struct STRUCT_OR_UNION_7 VAR_432 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_7 <S2SV_ModStart> struct STRUCT_OR_UNION_7 * VAR_426 <S2SV_ModEnd> ; TYPE_2 VAR_419 <S2SV_ModStart> , VAR_429 ; <S2SV_ModEnd> TYPE_10 VAR_430 = <S2SV_ModStart> 0 ; TYPE_10 VAR_433 = 0 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> STRUCT_OR_UNION_44 ) ; VAR_426 <S2SV_ModEnd> = VAR_428 [ <S2SV_ModStart> VAR_429 ] . <S2SV_ModEnd> VAR_290 ; VAR_419 <S2SV_ModStart> VAR_419 ) ; METHOD_83 ( VAR_344 -> VAR_345 < VAR_419 ) ; VAR_433 |= <S2SV_ModEnd> VAR_419 + VAR_423 <S2SV_ModStart> VAR_423 <= VAR_271 ? VAR_434 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * VAR_306 && ( VAR_434 & VAR_433 ) <S2SV_ModEnd> ) { VAR_430 <S2SV_ModStart> ( STRUCT_OR_UNION_44 , VAR_426 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_430 ) goto VAR_410 ; VAR_430 = METHOD_55 ( VAR_427 , STRUCT_OR_UNION_44 , VAR_428 + VAR_429 ) ; if ( VAR_430 ) goto VAR_410 ; METHOD_84 ( VAR_426 ) ; METHOD_70 ( STRUCT_OR_UNION_44 , VAR_428 , VAR_426 ) ; VAR_430 = <S2SV_ModEnd> METHOD_82 ( VAR_427 <S2SV_ModStart> VAR_429 ) ; goto VAR_410 ; } VAR_431 . VAR_345 = VAR_344 -> VAR_345 ; VAR_431 . VAR_303 = VAR_344 -> VAR_303 ; if ( VAR_414 > VAR_344 -> VAR_303 ) { <S2SV_ModEnd> if ( VAR_414 <S2SV_ModStart> <= VAR_306 && ( VAR_434 & VAR_433 ) ) { VAR_432 . VAR_419 = METHOD_63 ( VAR_344 -> VAR_345 + VAR_344 -> VAR_303 ) ; VAR_432 . <S2SV_ModEnd> VAR_423 = METHOD_65 <S2SV_ModStart> = METHOD_65 ( VAR_414 - VAR_344 -> VAR_303 <S2SV_ModEnd> ) ; METHOD_79 <S2SV_ModStart> ; METHOD_79 ( & VAR_432 , METHOD_80 ( VAR_426 ) + VAR_344 -> VAR_345 - VAR_419 ) ; <S2SV_ModEnd> VAR_430 = METHOD_74 <S2SV_ModStart> STRUCT_OR_UNION_44 , & VAR_432 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_430 ) goto VAR_410 ; VAR_431 . VAR_345 = VAR_344 -> VAR_345 ; VAR_431 . VAR_303 = <S2SV_ModEnd> VAR_414 ; } <S2SV_ModStart> else if ( ( VAR_344 -> VAR_345 - VAR_419 + VAR_344 -> VAR_303 < VAR_306 ) && ( VAR_434 & VAR_433 ) ) { if ( VAR_344 -> VAR_345 != VAR_419 ) { VAR_432 . VAR_419 = VAR_426 -> VAR_419 ; VAR_432 . VAR_423 = METHOD_65 ( VAR_344 -> VAR_345 - VAR_419 ) ; METHOD_79 ( & VAR_432 , METHOD_80 ( VAR_426 ) ) <S2SV_ModEnd> ; VAR_430 = <S2SV_ModStart> ( STRUCT_OR_UNION_44 , & VAR_432 ) ; if ( VAR_430 ) <S2SV_ModEnd> goto VAR_410 ; <S2SV_ModStart> VAR_410 ; } VAR_414 = VAR_344 -> VAR_345 - VAR_419 + VAR_344 -> VAR_303 ; VAR_431 . VAR_345 = VAR_419 ; VAR_431 . VAR_303 = VAR_414 ; } } VAR_414 = ext4_split_extent ( VAR_427 , STRUCT_OR_UNION_44 , VAR_428 , & VAR_431 , VAR_433 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> ; if ( VAR_414 < 0 ) VAR_430 = VAR_414 <S2SV_ModEnd> ; VAR_410 : <S2SV_ModStart> ; VAR_410 : <S2SV_ModEnd> return VAR_430 ? <S2SV_ModStart> VAR_430 : VAR_414 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; if ( VAR_229 [ VAR_230 ] . VAR_233 && VAR_209 != VAR_229 [ VAR_230 ] . VAR_209 ) { METHOD_25 ( VAR_227 , VAR_234 , "RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n" , VAR_209 , VAR_229 [ VAR_230 ] . VAR_209 ) ; METHOD_22 ( & VAR_229 [ VAR_230 ] ) ; VAR_229 [ VAR_230 ] . VAR_233 = 0 ; } if (
<S2SV_ModStart> TYPE_8 METHOD_0 ( TYPE_5 VAR_34 , TYPE_8 * VAR_35 , TYPE_8 VAR_28 ) { TYPE_8 VAR_4 ; TYPE_8 VAR_36 ; TYPE_3 VAR_18 ; TYPE_6 VAR_30 ; TYPE_8 VAR_32 ; TYPE_8 VAR_33 ; TYPE_5 VAR_37 = 0 ; VAR_37 = METHOD_14 ( VAR_34 , VAR_35 , "11" , & VAR_4 , & VAR_36 ) ; if ( VAR_37 == 1 ) { VAR_36 = METHOD_16 ( METHOD_16 ( VAR_38 , METHOD_15 ( "ParseOptions" ) ) , METHOD_15 ( "DEFAULT_SCHEMA" ) ) ; } VAR_18 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> ( VAR_4 ) ) ; <S2SV_ModEnd> VAR_32 = METHOD_4 <S2SV_ModStart> METHOD_4 ( ) <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> VAR_32 ) ; METHOD_13 ( VAR_33 , "@parse_options" , VAR_36 ) ;
<S2SV_ModStart> VAR_44 ) { if ( VAR_44 -> VAR_45 > VAR_46 ) return ; <S2SV_ModStart> ( VAR_44 ) { if ( VAR_44 -> VAR_45 > VAR_46 - VAR_42 ) return ; <S2SV_ModStart> VAR_45 ) ; }
<S2SV_ModStart> ) ) ; VAR_30 -> VAR_39 = 0 ;
<S2SV_ModStart> VAR_5 ) { TYPE_0 VAR_16 ; <S2SV_ModStart> ( VAR_14 , VAR_17 , VAR_18 <S2SV_ModEnd> | VAR_5 ) <S2SV_ModStart> ( VAR_14 , VAR_19 , VAR_20 <S2SV_ModEnd> ) ; METHOD_3 <S2SV_ModStart> 100 ) ; do { VAR_16 = <S2SV_ModEnd> METHOD_6 ( VAR_14 <S2SV_ModStart> ( VAR_14 , ENC624J600_MISTAT ) ; } while ( ( VAR_16 & ENC624J600_MISTAT_BUSY <S2SV_ModEnd> ) != 0 <S2SV_ModStart> != 0 ) ; <S2SV_ModEnd> METHOD_5 ( VAR_14 <S2SV_ModStart> ( VAR_14 , VAR_19 <S2SV_ModEnd> , 0x00 ) <S2SV_ModStart> ( VAR_14 , VAR_21 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_419 , VAR_170 <S2SV_ModEnd> , VAR_423 , <S2SV_ModStart> ( VAR_419 , VAR_170 <S2SV_ModEnd> , VAR_423 ,
<S2SV_ModStart> VAR_6 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_4 VAR_11 <S2SV_ModStart> return 0 ; <S2SV_ModEnd> TYPE_9 = METHOD_3 <S2SV_ModStart> ( STRUCT_OR_UNION_5 , <S2SV_ModEnd> & VAR_14 [
<S2SV_ModStart> , VAR_82 ; if ( METHOD_26 ( VAR_98 ) ) { VAR_78 -> VAR_60 = 0 ; METHOD_9 ( & VAR_78 -> VAR_79 ) ; return VAR_102 ; }
<S2SV_ModStart> VAR_24 &= ~ ( VAR_25 | VAR_28 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> VAR_12 ) ; if ( VAR_17 < 4 ) { METHOD_4 ( VAR_50 , VAR_51 , "Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOD<S2SV_blank>marker\\n" ) ; return VAR_52 ; }
<S2SV_ModStart> VAR_274 ) { <S2SV_ModEnd> return VAR_179 ; <S2SV_ModStart> VAR_179 ; } TYPE_17 VAR_275 = VAR_181 -> VAR_37 * sizeof ( struct STRUCT_OR_UNION_6 ) ; VAR_98 = METHOD_40 ( VAR_275 ) ; if ( ! VAR_98 ) { METHOD_20 ( VAR_274 ) ; return VAR_179 ; } METHOD_41 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , <S2SV_ModEnd> VAR_181 -> VAR_72 <S2SV_ModStart> VAR_72 . VAR_66 , ( TYPE_16 * ) VAR_98 , VAR_275 <S2SV_ModStart> ; VAR_78 = METHOD_42 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , <S2SV_ModEnd> VAR_181 -> VAR_72 <S2SV_ModStart> = VAR_105 ; TYPE_17 VAR_276 = <S2SV_ModEnd> VAR_98 [ VAR_99 <S2SV_ModStart> ] . VAR_100 ; if ( VAR_276 < 0 || VAR_276 <S2SV_ModStart> { METHOD_19 ( "corrupted<S2SV_blank>file:<S2SV_blank>pathFileOffset<S2SV_blank>><S2SV_blank>bin->size<S2SV_blank>(%d)\\n" , VAR_276 <S2SV_ModEnd> ) ; METHOD_20 <S2SV_ModStart> } VAR_268 = METHOD_43 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , VAR_276 , 64 <S2SV_ModEnd> ) ; VAR_226
<S2SV_ModStart> ) break ; VAR_174 = METHOD_44 ( VAR_179 , VAR_179 -> VAR_105 , VAR_179 -> VAR_135 ) ; if ( VAR_174 == VAR_175 ) { METHOD_45 ( VAR_142 , & VAR_179 -> VAR_142 ) ; return ( METHOD_37 ( VAR_179 ) ) ; }
<S2SV_ModStart> TYPE_6 VAR_27 ; TYPE_7 <S2SV_ModEnd> VAR_37 ; TYPE_4 <S2SV_ModStart> ; TYPE_4 VAR_39 ; struct STRUCT_OR_UNION_0 VAR_40 <S2SV_ModStart> return VAR_28 ; VAR_40 = * VAR_39 ; <S2SV_ModStart> VAR_37 ) ; if ( ! METHOD_14 ( VAR_39 , VAR_37 ) ) { METHOD_15 ( "mcs_recv_connect_response(),<S2SV_blank>consume<S2SV_blank>connect<S2SV_blank>id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_40 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_9 VAR_110 ; METHOD_13 ( & VAR_110 , 0 , sizeof ( VAR_110 ) ) ;
<S2SV_ModStart> unsigned TYPE_12 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> ] << 8 <S2SV_ModEnd> ; VAR_26 |= <S2SV_ModStart> ; VAR_26 |= ( unsigned TYPE_12 ) <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffff <S2SV_ModStart> VAR_26 & 0xffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> ( VAR_66 , VAR_69 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_70 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_71 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_72 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_73 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_74 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_75 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_76 <S2SV_ModEnd> , VAR_51 [ <S2SV_ModStart> ( VAR_66 , VAR_69 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_70 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_71 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_72 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_73 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_74 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_75 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_66 , VAR_76 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_17 ) { if ( VAR_7 ) { METHOD_9 ( VAR_8 , "Stratum<S2SV_blank>client.reconnect<S2SV_blank>received<S2SV_blank>but<S2SV_blank>is<S2SV_blank>disabled,<S2SV_blank>not<S2SV_blank>reconnecting." ) ; return VAR_44 ; } <S2SV_ModEnd> TYPE_5 * VAR_22 <S2SV_ModStart> 256 ] ; TYPE_5 * VAR_36 , * VAR_41 , * VAR_42 ; VAR_22 = ( TYPE_5 * ) METHOD_5 ( METHOD_6 ( VAR_17 , 0 ) ) ; if ( ! VAR_22 ) VAR_22 = STRUCT_OR_UNION_16 -> VAR_36 ; VAR_23 <S2SV_ModEnd> = ( TYPE_5 <S2SV_ModStart> ( VAR_17 , <S2SV_ModEnd> 1 ) ) <S2SV_ModStart> -> VAR_41 ; snprintf ( VAR_29 , sizeof ( VAR_29 ) <S2SV_ModEnd> , "%s:%s" ,
<S2SV_ModStart> ) ; goto VAR_101 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0 ) { if ( VAR_543 < 4 ) goto VAR_1052 ; <S2SV_ModStart> if ( VAR_542 < 4 || VAR_542 > VAR_543 <S2SV_ModEnd> ) goto VAR_1052
<S2SV_ModStart> if ( METHOD_8 == 0 || METHOD_8
<S2SV_ModStart> { if ( ! VAR_9 ) { METHOD_2 ( "oops.<S2SV_blank>no<S2SV_blank>disk\\n" ) ; return 1 ; } <S2SV_ModEnd> const TYPE_5 VAR_23 <S2SV_ModStart> VAR_23 = 512 <S2SV_ModEnd> ; TYPE_6 * <S2SV_ModStart> ( VAR_13 ) { <S2SV_ModStart> = VAR_13 ; } if ( <S2SV_ModEnd> VAR_16 -> METHOD_1 <S2SV_ModStart> * VAR_23 ) <S2SV_ModEnd> == - 1 <S2SV_ModStart> - 1 ) { <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> VAR_54 , VAR_49 ) ; METHOD_8 ( VAR_54
<S2SV_ModStart> VAR_339 ++ ; <S2SV_ModEnd> VAR_307 ++ ; <S2SV_ModStart> ) ; } VAR_342 -> VAR_277 += VAR_339 ;
<S2SV_ModStart> = METHOD_104 ( <S2SV_ModEnd> VAR_1308 . VAR_1132
<S2SV_ModStart> ( VAR_30 -> METHOD_28 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> , VAR_30 -> METHOD_28 <S2SV_ModEnd> ( ) ,
<S2SV_ModStart> TYPE_2 VAR_24 ; <S2SV_ModEnd> VAR_5 * VAR_20 <S2SV_ModStart> VAR_5 * VAR_13 ; METHOD_1 ( VAR_1 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_3 ( VAR_26
<S2SV_ModStart> VAR_39 ) { TYPE_0 VAR_44 ; TYPE_6 <S2SV_ModEnd> VAR_42 ; TYPE_6 <S2SV_ModStart> + VAR_39 ) <= VAR_11 ) { VAR_42 = ( <S2SV_ModEnd> VAR_40 -> VAR_41 <S2SV_ModStart> VAR_41 * 4 ) <S2SV_ModStart> VAR_19 -- ) { <S2SV_ModStart> = VAR_23 ; } <S2SV_ModStart> / 4 ; VAR_44 = VAR_43 ; } else { VAR_44 = VAR_12 ; } return VAR_44 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_5 ) { struct STRUCT_OR_UNION_0 * VAR_6 = VAR_3 ; TYPE_3 VAR_7 ; VAR_7 = METHOD_1 ( VAR_6 -> VAR_8 <S2SV_ModEnd> , VAR_4 , <S2SV_ModStart> VAR_5 ) ; VAR_6 -> VAR_9 = ! VAR_7 ; return VAR_7 ;
<S2SV_ModStart> VAR_106 -> VAR_68 [ VAR_72 ] && VAR_106 -> VAR_71
<S2SV_ModStart> -> VAR_256 ; TYPE_104 <S2SV_ModEnd> * const TYPE_103 <S2SV_ModStart> VAR_277 -> TYPE_103 ; TYPE_105 * const VAR_284 = & TYPE_103 -> VAR_284 ; const TYPE_106 * const VAR_125 = & VAR_277 -> VAR_125 <S2SV_ModStart> const TYPE_59 * const <S2SV_ModStart> TYPE_59 VAR_54 ; TYPE_102 VAR_278 = 0 ; TYPE_102 VAR_285 = 0 ; <S2SV_ModStart> VAR_191 = 1.0 ; TYPE_93 VAR_286 = 0.0 <S2SV_ModStart> = VAR_23 ; METHOD_1 ( * VAR_284 ) ; <S2SV_ModStart> = 0 ; VAR_277 -> VAR_287 = 0 ; <S2SV_ModStart> METHOD_12 ( VAR_277 , TYPE_103 , VAR_125 <S2SV_ModStart> TYPE_103 -> VAR_116 && VAR_256 -> VAR_257 < VAR_277 -> VAR_125 . VAR_288 <S2SV_ModStart> ( VAR_277 , TYPE_103 , VAR_125 , <S2SV_ModStart> . VAR_88 && TYPE_103 -> VAR_115 < TYPE_103 -> VAR_116 <S2SV_ModEnd> ) { TYPE_93 <S2SV_ModStart> , VAR_119 , TYPE_103 -> VAR_115 <S2SV_ModEnd> ) ) break <S2SV_ModStart> = METHOD_19 ( VAR_277 , TYPE_103 -> VAR_115 <S2SV_ModEnd> ) ; VAR_69 <S2SV_ModStart> ( METHOD_8 ( VAR_277 <S2SV_ModEnd> , VAR_199 , <S2SV_ModStart> , VAR_277 -> VAR_125 . VAR_288 <S2SV_ModEnd> - VAR_199 , <S2SV_ModStart> >= 2 * VAR_277 -> VAR_125 . VAR_288 <S2SV_ModEnd> ) break ; <S2SV_ModStart> -> VAR_257 > VAR_277 -> VAR_125 . VAR_288 <S2SV_ModEnd> ) { TYPE_59 <S2SV_ModStart> ; VAR_283 = 0.0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ( VAR_277 , TYPE_103 , VAR_125 , <S2SV_ModStart> TYPE_103 -> VAR_116 || VAR_256 -> VAR_257 >= VAR_277 -> VAR_125 . VAR_288 <S2SV_ModStart> } if ( METHOD_32 ( VAR_277 ) && VAR_277 -> VAR_289 . VAR_290 > 1 ) { TYPE_102 VAR_291 = ( 1 << ( VAR_277 -> VAR_289 . VAR_290 - 1 ) ) - 1 ; TYPE_102 VAR_292 = ( VAR_256 -> VAR_257 + VAR_291 ) & ( ~ VAR_291 ) ; TYPE_102 VAR_70 ; for ( VAR_70 = 0 ; VAR_70 < VAR_292 - VAR_256 -> VAR_257 ; ++ VAR_70 ) { if ( VAR_147 == METHOD_23 ( TYPE_103 , VAR_119 ) ) break ; <S2SV_ModEnd> VAR_283 += METHOD_12 <S2SV_ModStart> ( VAR_277 , TYPE_103 , VAR_125 , VAR_119 ) ; } VAR_256 -> VAR_257 = VAR_292 ; } if ( TYPE_103 -> VAR_115 >= TYPE_103 -> VAR_116 ) { VAR_283 += METHOD_12 ( VAR_277 , TYPE_103 , VAR_125 , <S2SV_ModStart> 0 ; } TYPE_103 -> VAR_275 = METHOD_28 ( 0 , TYPE_103 -> VAR_275 ) ; <S2SV_ModStart> ; VAR_199 < ( VAR_256 -> VAR_257 - 1 ) <S2SV_ModEnd> ; ++ VAR_199 <S2SV_ModStart> ) break ; VAR_227 = METHOD_34 ( VAR_227 , METHOD_33 ( VAR_277 , & VAR_202 ) ) ; if ( <S2SV_ModEnd> ( VAR_199 <= <S2SV_ModStart> ( VAR_199 <= <S2SV_ModEnd> VAR_256 -> VAR_161 <S2SV_ModStart> VAR_256 -> VAR_161 ) || ( ( VAR_199 <= ( VAR_256 -> VAR_161 * 4 ) ) && ( VAR_191 > 0.5 ) ) ) { const TYPE_93 VAR_293 = calc_frame_boost ( VAR_277 , VAR_119 , 0 , KF_MAX_BOOST ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = METHOD_19 ( VAR_277 , <S2SV_ModEnd> & VAR_202 ) <S2SV_ModStart> VAR_189 ) ; VAR_286 += VAR_191 ; ++ VAR_285 ; <S2SV_ModStart> ( VAR_191 * VAR_293 ) ; } } VAR_286 /= ( TYPE_93 ) VAR_285 <S2SV_ModEnd> ; METHOD_27 ( <S2SV_ModStart> TYPE_66 ) ; TYPE_103 -> VAR_225 = ( TYPE_102 ) ( VAR_227 * 100.0 <S2SV_ModEnd> ) ; TYPE_103 <S2SV_ModStart> -> VAR_204 = calculate_section_intra_ratio ( TYPE_66 , TYPE_103 -> VAR_116 , VAR_256 -> VAR_257 ) ; VAR_256 -> VAR_260 = <S2SV_ModStart> TYPE_102 ) ( VAR_286 * VAR_210 ) ; VAR_256 -> VAR_260 = METHOD_28 ( VAR_256 -> VAR_260 , <S2SV_ModEnd> ( VAR_256 -> <S2SV_ModStart> 3 ) ) ; VAR_256 -> VAR_260 = METHOD_28 ( VAR_256 -> VAR_260 , VAR_221 ) ; VAR_278 = calculate_boost_bits <S2SV_ModEnd> ( ( VAR_256 <S2SV_ModStart> - 1 ) , VAR_256 -> VAR_260 , TYPE_103 -> VAR_275 ) ; if ( TYPE_103 -> VAR_275 ) { TYPE_103 -> kfgroup_inter_fraction = ( TYPE_93 ) ( TYPE_103 -> VAR_275 - VAR_278 ) / ( TYPE_93 ) TYPE_103 -> VAR_275 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { TYPE_103 -> kfgroup_inter_fraction = 1.0 <S2SV_ModEnd> ; } TYPE_103 <S2SV_ModStart> -> VAR_275 -= VAR_278 ; VAR_284 -> VAR_294 [ 0 ] = VAR_278 ; VAR_284 -> VAR_295 [ 0 ] = VAR_296 ; VAR_284 -> VAR_297 [ 0 ] = VAR_298 ; <S2SV_ModEnd> TYPE_103 -> VAR_279 <S2SV_ModStart> -= VAR_283 ; if ( VAR_125 -> VAR_299 == VAR_300 ) { VAR_277 -> VAR_256 . VAR_301 = VAR_302 ; }
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> VAR_102 ) - 128 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> ++ VAR_15 ; if <S2SV_ModEnd> ( METHOD_10 ( <S2SV_ModStart> , VAR_13 ) <= VAR_14 ) return - 1 ; if <S2SV_ModEnd> ( ( TYPE_10 <S2SV_ModStart> VAR_13 ) ) > VAR_14 ) return - 1 <S2SV_ModEnd> ; return VAR_15
<S2SV_ModStart> ( VAR_99 , VAR_100 <S2SV_ModEnd> , METHOD_20 (
<S2SV_ModStart> case VAR_17 : if ( ! <S2SV_ModStart> , VAR_67 ) ) return - 1 <S2SV_ModStart> case VAR_49 : if ( ! <S2SV_ModStart> , VAR_67 ) ) return - 1
<S2SV_ModStart> VAR_81 , TYPE_4 VAR_87 , TYPE_4 VAR_88 , TYPE_4 VAR_89 , TYPE_4 <S2SV_ModStart> VAR_13 ) { TYPE_4 VAR_85 ; for ( VAR_85 = VAR_89 ; VAR_85 < VAR_13 ; ++ VAR_85 ) { <S2SV_ModStart> const VAR_84 = & <S2SV_ModStart> VAR_7 -> VAR_9 [ VAR_85 ] <S2SV_ModStart> const VAR_78 = & <S2SV_ModStart> VAR_8 . VAR_9 [ VAR_85 ] ; VAR_84 -> <S2SV_ModEnd> VAR_68 = VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_87 ] ; VAR_84 -> <S2SV_ModEnd> VAR_74 = VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_87 <S2SV_ModEnd> ] ; VAR_78 <S2SV_ModStart> ] ; VAR_78 -> <S2SV_ModEnd> VAR_80 = VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_87 ] ; VAR_84 -> <S2SV_ModEnd> VAR_86 = VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_87 ] ; VAR_81 -> VAR_64 [ VAR_85 ] [ VAR_87 ] = VAR_81 -> VAR_64 [ VAR_85 ] [ VAR_88 ] ; VAR_81 -> VAR_70 [ VAR_85 ] [ VAR_87 ] = VAR_81 -> VAR_70 [ VAR_85 ] [ VAR_88 ] ; VAR_81 -> VAR_76 [ VAR_85 ] [ VAR_87 ] = VAR_81 -> VAR_76 [ VAR_85 ] [ VAR_88 ] ; VAR_81 -> VAR_82 [ VAR_85 ] [ VAR_87 ] = VAR_81 -> VAR_82 [ VAR_85 ] [ VAR_88 ] ; VAR_81 -> VAR_64 [ VAR_85 ] [ VAR_88 ] = VAR_84 -> <S2SV_ModEnd> VAR_68 ; VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_88 ] = VAR_84 -> <S2SV_ModEnd> VAR_74 ; VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_88 <S2SV_ModEnd> ] = VAR_78 <S2SV_ModStart> ] = VAR_78 -> <S2SV_ModEnd> VAR_80 ; VAR_81 <S2SV_ModStart> VAR_85 ] [ VAR_88 ] = VAR_84 -> <S2SV_ModEnd> VAR_86 ; }
<S2SV_ModStart> ] + VAR_353 / VAR_395 -> VAR_355 [ VAR_397 ] <S2SV_ModStart> VAR_278 + VAR_394 / VAR_395 -> VAR_396 [ VAR_397 ] <S2SV_ModStart> ] + VAR_353 / VAR_395 -> VAR_355 [ VAR_397 ] <S2SV_ModStart> + ( VAR_394 / VAR_395 -> VAR_396 [ VAR_397 ]
<S2SV_ModStart> VAR_70 & VAR_66 <S2SV_ModEnd> ; VAR_50 = <S2SV_ModStart> | VAR_73 ; if ( VAR_70 & VAR_89 ) VAR_79 |= VAR_90 ; <S2SV_ModStart> = VAR_70 & ( VAR_66 | VAR_89 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_32 ; } VAR_39 . VAR_82 [ sizeof ( VAR_39 . VAR_82 ) - 1 ] = 0 ;
<S2SV_ModStart> ) ; } else METHOD_4 ( VAR_32 , "" ) ;
<S2SV_ModStart> if ( VAR_351 < VAR_142 ) { METHOD_46 ( ( "Wrapped<S2SV_blank>around<S2SV_blank>%p<S2SV_blank><<S2SV_blank>%p\\n" , VAR_351 , VAR_142 ) ) ; goto VAR_368 ; } if ( VAR_351
<S2SV_ModStart> ) / 3 ) METHOD_131 ( VAR_806 , "InvalidColormapIndex" ) ; if ( VAR_584 . VAR_582 > VAR_584 . VAR_585
<S2SV_ModStart> ; if ( METHOD_34 ( VAR_168 , <S2SV_ModEnd> VAR_148 -> VAR_149 <S2SV_ModStart> if ( ! METHOD_34 ( VAR_168 , <S2SV_ModEnd> VAR_148 -> VAR_149
<S2SV_ModStart> 0xff == VAR_41 && ! METHOD_12 ( VAR_44 ) <S2SV_ModStart> 0xff == VAR_41 && ! METHOD_12 ( VAR_44 ) <S2SV_ModStart> 0 == METHOD_9 ( VAR_44 ) && ! METHOD_12
<S2SV_ModStart> = VAR_212 ; VAR_194 -> VAR_217 = VAR_218 ; } else if ( VAR_194 -> VAR_217 != VAR_218 ) { return VAR_216 ;
<S2SV_ModStart> } while ( ( VAR_245 < ( TYPE_51 ) VAR_139 ) && ( <S2SV_ModStart> ] == '\\n' )
<S2SV_ModStart> ; TYPE_4 VAR_95 = VAR_101 ; TYPE_4 VAR_97 = VAR_101 <S2SV_ModEnd> ; TYPE_5 VAR_96 <S2SV_ModStart> VAR_93 ) ; VAR_98 : METHOD_16 ( & VAR_96 , & VAR_95 ) ; METHOD_16 ( & VAR_96 , & VAR_97 ) ; <S2SV_ModEnd> METHOD_17 ( VAR_99
<S2SV_ModStart> VAR_8 ) ; METHOD_4 <S2SV_ModEnd> ( ! METHOD_1 <S2SV_ModStart> VAR_7 ) ) ; METHOD_5 <S2SV_ModEnd> ( VAR_8 ->
<S2SV_ModStart> { if ( METHOD_4 <S2SV_ModEnd> ( VAR_7 , <S2SV_ModStart> == VAR_8 && METHOD_4 <S2SV_ModEnd> ( VAR_7 ,
<S2SV_ModStart> VAR_22 ) { unsigned TYPE_1 VAR_24 = VAR_18 ; struct STRUCT_OR_UNION_4 * VAR_25 = METHOD_6 ( ) ; if ( ! METHOD_7 ( VAR_25 ) ) { if ( METHOD_8 ( VAR_25 ) ) VAR_24 = 1 ; <S2SV_ModStart> STRUCT_OR_UNION_3 ) * VAR_24 <S2SV_ModEnd> , VAR_7 ) <S2SV_ModStart> VAR_7 ) ; } <S2SV_ModStart> -> VAR_17 = VAR_24 ; VAR_22 -> VAR_25 = VAR_25 ; METHOD_9 ( VAR_22 , 0 , VAR_24 ) <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> VAR_22 ; } METHOD_10 ( VAR_25 ) ;
<S2SV_ModStart> ; if ( VAR_600 < 1 ) { METHOD_35 ( VAR_610 , VAR_144 , "fatal<S2SV_blank>error,<S2SV_blank>input<S2SV_blank>packet<S2SV_blank>contains<S2SV_blank>no<S2SV_blank>samples\\n" ) ; return VAR_622 ; } if (
<S2SV_ModStart> { TYPE_3 VAR_86 = VAR_77 ; TYPE_7 VAR_59 <S2SV_ModStart> 1 ) { <S2SV_ModEnd> TYPE_8 VAR_56 ; <S2SV_ModStart> ] ; } <S2SV_ModEnd> } else { <S2SV_ModStart> VAR_87 ; } if ( VAR_59 ) METHOD_8 ( VAR_59 ) ;
<S2SV_ModStart> TYPE_4 VAR_26 ; TYPE_3 VAR_32 ; <S2SV_ModStart> "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , "autoexec.cfg" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; <S2SV_ModStart> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ;
<S2SV_ModStart> VAR_9 ) { unsigned TYPE_3 * VAR_11 = VAR_9 -> VAR_10 ; unsigned TYPE_2 VAR_12 = ( VAR_6 - VAR_5 ) >> VAR_13 ; METHOD_2 ( VAR_11 , 0 , VAR_12 ) ; <S2SV_ModStart> -> VAR_10 += VAR_12 <S2SV_ModEnd> ; return 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_2 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_2 ) ; return 0 ;
<S2SV_ModStart> STRUCT_OR_UNION_28 STRUCT_OR_UNION_28 ; TYPE_5 VAR_124 ; <S2SV_ModStart> VAR_120 , VAR_18 , & VAR_124 <S2SV_ModStart> VAR_112 ; } if ( VAR_124 && STRUCT_OR_UNION_28 . STRUCT_OR_UNION_26 -> VAR_81 -> VAR_125 != METHOD_26 ( ) ) { VAR_123 = - VAR_126 ; printk ( KERN_ERR "Mount<S2SV_blank>of<S2SV_blank>device<S2SV_blank>(uid:<S2SV_blank>%d)<S2SV_blank>not<S2SV_blank>owned<S2SV_blank>by<S2SV_blank>" "requested<S2SV_blank>user<S2SV_blank>(uid:<S2SV_blank>%d)\\n" , STRUCT_OR_UNION_28 . STRUCT_OR_UNION_26 -> VAR_81 -> VAR_125 , METHOD_26 ( ) ) ; goto VAR_112 ; }
<S2SV_ModStart> VAR_87 ) ; METHOD_27 ( VAR_91 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_8 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 4 ; if <S2SV_ModEnd> ( ( VAR_10 <S2SV_ModStart> VAR_22 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_24 , "horAcc32" , "%s" , "cc%(4*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_23 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> VAR_34 ) ; VAR_34 -> VAR_37 &= ~ VAR_38 ;
<S2SV_ModStart> -> VAR_40 += <S2SV_ModEnd> METHOD_5 ( VAR_41
<S2SV_ModStart> VAR_12 ) { if ( VAR_60 + 4 > VAR_12 ) return - 1 ; <S2SV_ModStart> 4 ) ) ; if ( VAR_60 + 4 + VAR_61 > VAR_12 ) return - 1
<S2SV_ModStart> if ( ! METHOD_24 ( & VAR_82 -> VAR_12 ) <S2SV_ModEnd> ) { METHOD_1
<S2SV_ModStart> VAR_186 ) ; METHOD_47 ( ) <S2SV_ModEnd> ; VAR_189 ->
<S2SV_ModStart> TYPE_8 VAR_31 , TYPE_9 <S2SV_ModEnd> * VAR_27 ) <S2SV_ModStart> VAR_27 ) { TYPE_10 * VAR_34 = VAR_5 -> VAR_34 ; <S2SV_ModStart> TYPE_7 VAR_32 = METHOD_7 <S2SV_ModEnd> ( VAR_5 ) <S2SV_ModStart> ) ; const vpx_prob <S2SV_ModEnd> * VAR_28 = <S2SV_ModStart> VAR_33 -> VAR_10 -> <S2SV_ModEnd> VAR_28 ) ; <S2SV_ModStart> TYPE_7 VAR_37 = METHOD_8 <S2SV_ModEnd> ( VAR_27 , <S2SV_ModStart> { VAR_37 += METHOD_8 <S2SV_ModEnd> ( VAR_27 , <S2SV_ModStart> ) VAR_37 += METHOD_8 <S2SV_ModEnd> ( VAR_27 , <S2SV_ModStart> } if ( VAR_34 <S2SV_ModEnd> ) ++ METHOD_6 <S2SV_ModStart> VAR_32 , & VAR_34 -> <S2SV_ModEnd> VAR_35 ) [
<S2SV_ModStart> VAR_19 -> VAR_20 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_387 ) ; if ( VAR_384 -> VAR_385 == VAR_377 && ! VAR_352 -> VAR_324 ) { METHOD_66 ( VAR_382 , VAR_383 , "Empty<S2SV_blank>audio<S2SV_blank>Packet\\n" ) ; return METHOD_27 ( VAR_215 ) ; }
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_98 -> VAR_17 <S2SV_ModStart> ; if ( ! METHOD_4 ( VAR_110 , VAR_106 ) ) goto VAR_109 ; if (
<S2SV_ModStart> TYPE_6 VAR_17 ; VAR_27 * VAR_22 ; VAR_28 * VAR_29 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_23 ) ; VAR_29 <S2SV_ModEnd> = VAR_17 -> <S2SV_ModStart> -> VAR_18 ; free_ice_connection_watch ( VAR_29 ) ; VAR_22 = gsm_xsmp_client_new ( VAR_17 ) ; gsm_store_add ( VAR_8 -> VAR_9 -> client_store , gsm_client_peek_id ( VAR_22 ) , G_OBJECT ( VAR_22 ) ) ; g_object_unref ( VAR_22 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ; METHOD_6 ( METHOD_7 ( VAR_22 ) <S2SV_ModEnd> , VAR_23 ,
<S2SV_ModStart> VAR_37 ; } VAR_49 = <S2SV_ModStart> VAR_40 , VAR_41 , VAR_50 <S2SV_ModStart> ( VAR_42 ) ; if ( VAR_49 ) goto VAR_45
<S2SV_ModStart> ) ) ; METHOD_24 ( ! ( VAR_177 -> VAR_162 & VAR_186 ) ) ;
<S2SV_ModStart> if ( ! METHOD_13 ( VAR_45 -> VAR_74 , VAR_58 , VAR_60 ) ) { VAR_73 = - VAR_75 ; goto VAR_71 ; } if ( !
<S2SV_ModStart> 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> { if ( VAR_5 -> VAR_4 [ 0 ] &&
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_1 METHOD_0 ( <S2SV_ModStart> ; VAR_13 = METHOD_4 ( VAR_8 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> ( VAR_195 ) ; if ( VAR_154 < 0 || VAR_139 < 0 ) return - VAR_163
<S2SV_ModStart> ++ ) { METHOD_6 <S2SV_ModEnd> ( VAR_74 , <S2SV_ModStart> VAR_64 ) ; METHOD_7 ( VAR_74 + VAR_64 , VAR_72 , VAR_66 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_83 , <S2SV_ModStart> ++ ) { METHOD_7 <S2SV_ModEnd> ( VAR_74 , <S2SV_ModStart> ++ ) { METHOD_7 <S2SV_ModEnd> ( VAR_83 ,
<S2SV_ModStart> ; if ( ! VAR_34 &&
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> = VAR_212 ; VAR_194 -> VAR_217 = VAR_218 ; } else if ( VAR_194 -> VAR_217 != VAR_218 ) { return VAR_216 ;
<S2SV_ModStart> ; TYPE_3 VAR_80 = VAR_85 ; TYPE_3 VAR_82 = VAR_85 <S2SV_ModEnd> ; TYPE_4 VAR_28 <S2SV_ModStart> VAR_78 ) ; VAR_83 : METHOD_15 ( & VAR_81 , & VAR_80 ) ; METHOD_15 ( & VAR_81 , & VAR_82 ) ; <S2SV_ModEnd> return ( &
<S2SV_ModStart> ( VAR_72 , "%s" , VAR_73 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> 1 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_44 , <S2SV_ModStart> VAR_44 , VAR_27 , VAR_25 + 1
<S2SV_ModStart> } } } <S2SV_ModEnd> } else {
<S2SV_ModStart> TYPE_11 METHOD_0 ( TYPE_5 * VAR_46 , <S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_48 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - VAR_11 <S2SV_ModEnd> ; } dctlprintk
<S2SV_ModStart> ! VAR_15 ) || VAR_16 > VAR_22 <S2SV_ModStart> VAR_19 ) ; if ( VAR_21 > ( TYPE_5 ) VAR_16 ) { VAR_21 = - 1 ; METHOD_4 ( VAR_19 ) ; }
<S2SV_ModStart> = VAR_6 ; TYPE_8 * const VAR_36 = VAR_11 -> VAR_36 ; TYPE_9 * const VAR_37 = & VAR_36 -> VAR_13 ; <S2SV_ModStart> const VAR_27 = & VAR_37 -> VAR_38 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_1 <S2SV_ModStart> VAR_31 = & VAR_37 -> <S2SV_ModEnd> VAR_19 [ VAR_19
<S2SV_ModStart> ; TYPE_4 VAR_91 = VAR_97 ; TYPE_4 VAR_93 = VAR_97 <S2SV_ModEnd> ; TYPE_5 VAR_92 <S2SV_ModStart> VAR_89 ) ; VAR_94 : <S2SV_ModStart> VAR_93 ) ; <S2SV_ModEnd> METHOD_18 ( VAR_95
<S2SV_ModStart> 4 ) ; if ( VAR_106 -> VAR_70 > VAR_108 ) { return VAR_109 ; }
<S2SV_ModStart> 0 , 0 , 0
<S2SV_ModStart> ; if ( METHOD_51 <S2SV_ModEnd> ( VAR_176 , <S2SV_ModStart> , & VAR_21 , & VAR_220 ) < 0 ) { return 1 ; } if ( VAR_220 == VAR_193 ) { PyErr_SetString ( VAR_210 , "required<S2SV_blank>field<S2SV_blank>\\"args\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_39 VAR_201 <S2SV_ModStart> ; TYPE_41 TYPE_48 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_25 VAR_221 <S2SV_ModEnd> ; VAR_201 = <S2SV_ModStart> ) , & VAR_221 <S2SV_ModEnd> , VAR_218 ) <S2SV_ModStart> , TYPE_48 , VAR_221 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_51 ( VAR_176 , & VAR_60 , & VAR_220 ) < 0 ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> } if ( VAR_220 == VAR_193 || VAR_220 == VAR_222 ) { METHOD_48 ( VAR_220 ) ; VAR_213 = VAR_193 ; } else { TYPE_39 VAR_201 ; VAR_201 = METHOD_37 ( VAR_220 , & VAR_213 , VAR_218 ) ; if ( VAR_201 != 0 ) goto VAR_219 ; METHOD_48 ( VAR_220 ) ; } if ( METHOD_51 <S2SV_ModEnd> ( VAR_176 , <S2SV_ModStart> VAR_176 , & VAR_79 , & VAR_220 ) < 0 ) { return 1 ; } if ( VAR_220 == VAR_193 ) { PyErr_SetString ( VAR_210 , "required<S2SV_blank>field<S2SV_blank>\\"kwonlyargs\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_39 VAR_201 <S2SV_ModStart> TYPE_39 VAR_201 ; <S2SV_ModEnd> TYPE_41 VAR_203 ; <S2SV_ModStart> ; TYPE_41 TYPE_48 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_25 VAR_221 <S2SV_ModEnd> ; VAR_201 = <S2SV_ModStart> ) , & VAR_221 <S2SV_ModEnd> , VAR_218 ) <S2SV_ModStart> , TYPE_48 , VAR_221 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_51 ( VAR_176 , & VAR_119 , & VAR_220 ) < 0 ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> } if ( VAR_220 == VAR_193 ) { PyErr_SetString ( VAR_210 , "required<S2SV_blank>field<S2SV_blank>\\"kw_defaults\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_39 VAR_201 <S2SV_ModStart> ; TYPE_41 TYPE_48 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_46 VAR_221 <S2SV_ModEnd> ; VAR_201 = <S2SV_ModStart> ) , & VAR_221 <S2SV_ModEnd> , VAR_218 ) <S2SV_ModStart> , TYPE_48 , VAR_221 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_51 ( VAR_176 , & VAR_158 , & VAR_220 ) < 0 ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> } if ( VAR_220 == VAR_193 || VAR_220 == VAR_222 ) { METHOD_48 ( VAR_220 ) ; VAR_216 = VAR_193 ; } else { TYPE_39 VAR_201 ; VAR_201 = METHOD_37 ( VAR_220 , & VAR_216 , VAR_218 ) ; if ( VAR_201 != 0 ) goto VAR_219 ; METHOD_48 ( VAR_220 ) ; } if ( METHOD_51 <S2SV_ModEnd> ( VAR_176 , <S2SV_ModStart> VAR_176 , & VAR_177 , & VAR_220 ) < 0 ) { return 1 ; } if ( VAR_220 == VAR_193 ) { PyErr_SetString ( VAR_210 , "required<S2SV_blank>field<S2SV_blank>\\"defaults\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arguments" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_39 VAR_201 <S2SV_ModStart> TYPE_39 VAR_201 ; <S2SV_ModEnd> TYPE_41 VAR_203 ; <S2SV_ModStart> ; TYPE_41 TYPE_48 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_46 VAR_221 <S2SV_ModEnd> ; VAR_201 = <S2SV_ModStart> ) , & VAR_221 <S2SV_ModEnd> , VAR_218 ) <S2SV_ModStart> , TYPE_48 , VAR_221 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } * VAR_211 = METHOD_49 ( VAR_212 , VAR_213 , VAR_214 , VAR_215 , VAR_216 , VAR_217 , VAR_218 ) ; return 0 ; VAR_219 : METHOD_50 ( VAR_220 <S2SV_ModEnd> ) ; return <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; if ( VAR_16 -> VAR_133 ) goto VAR_134 ; if ( <S2SV_ModStart> ) ; } VAR_134 :
<S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> while ( VAR_71
<S2SV_ModStart> ) ) ; METHOD_12 ( ) ; <S2SV_ModStart> ( VAR_60 , METHOD_13 ( <S2SV_ModStart> VAR_55 -> VAR_51 ) <S2SV_ModStart> VAR_52 ) ; METHOD_14 ( ) ;
<S2SV_ModStart> ; if ( METHOD_46 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> VAR_681 , VAR_449 , VAR_727 <S2SV_ModStart> -> VAR_669 ; VAR_727 = ( VAR_449 % 2 == 0 ) ? VAR_449 : VAR_449 + 1 ; <S2SV_ModStart> ( VAR_441 * VAR_727 <S2SV_ModEnd> ) != ( <S2SV_ModStart> ( VAR_441 * VAR_727 <S2SV_ModEnd> ) ) METHOD_86 <S2SV_ModStart> -> VAR_669 * VAR_727 <S2SV_ModEnd> ; VAR_685 =
<S2SV_ModStart> -> VAR_19 ; METHOD_10 ( ) ; <S2SV_ModStart> ( VAR_49 , METHOD_11 ( <S2SV_ModStart> VAR_22 -> VAR_23 ) <S2SV_ModStart> VAR_24 ) ; METHOD_12 ( ) ;
<S2SV_ModStart> { TYPE_5 * VAR_73 , * <S2SV_ModStart> 0 ; } VAR_73 = VAR_71 -> VAR_68 + VAR_71 -> VAR_74 ; <S2SV_ModStart> = METHOD_2 ( VAR_73 <S2SV_ModEnd> , '&' , <S2SV_ModStart> -> VAR_72 - VAR_73 <S2SV_ModEnd> ) ; if <S2SV_ModStart> TYPE_8 ) { VAR_71 -> VAR_74 = VAR_71 -> VAR_72 - VAR_71 -> VAR_68 ; <S2SV_ModStart> VAR_72 ) ; VAR_71 -> VAR_74 = 0 ;
<S2SV_ModStart> } if ( ! VAR_450 -> VAR_432 ) { METHOD_43 ( VAR_350 , VAR_182 , "No<S2SV_blank>frames<S2SV_blank>in<S2SV_blank>the<S2SV_blank>file!\\n" ) ; return METHOD_36 ( VAR_453 ) ; } if (
<S2SV_ModStart> 0 ) ; METHOD_2 ( & VAR_4 -> VAR_6 ) ;
<S2SV_ModStart> * VAR_38 , TYPE_11 * VAR_58 , <S2SV_ModStart> VAR_54 = & VAR_58 <S2SV_ModEnd> -> VAR_10 ; <S2SV_ModStart> -> VAR_13 ; TYPE_12 * const VAR_33 = VAR_47 -> VAR_33 [ 0 ] ; <S2SV_ModStart> -> VAR_29 ; const TYPE_10 VAR_59 = VAR_60 [ VAR_33 -> VAR_52 . VAR_61 ] ; const TYPE_10 VAR_62 = VAR_63 [ VAR_33 -> VAR_52 . VAR_61 ] ; const TYPE_10 VAR_64 = METHOD_6 ( VAR_59 , VAR_48 -> VAR_65 - VAR_36 ) ; const TYPE_10 VAR_66 = METHOD_6 ( VAR_62 , VAR_48 -> VAR_67 - VAR_35 ) ; <S2SV_ModStart> -> VAR_24 ; * ( VAR_54 -> VAR_68 ) = VAR_56 -> VAR_68 ; if ( VAR_29 -> VAR_30 && VAR_38 -> VAR_26 . VAR_27 ) { if <S2SV_ModEnd> ( VAR_38 -> <S2SV_ModStart> . VAR_27 == VAR_69 || VAR_38 -> VAR_26 . VAR_27 == VAR_70 ) { const TYPE_13 * const VAR_71 = VAR_29 -> VAR_72 ? VAR_38 -> VAR_73 : VAR_48 -> VAR_74 ; VAR_52 -> VAR_75 = METHOD_7 ( VAR_48 , VAR_71 , VAR_37 , VAR_35 , VAR_36 ) ; } else <S2SV_ModEnd> { METHOD_1 ( <S2SV_ModStart> ( VAR_38 , VAR_52 , <S2SV_ModEnd> VAR_35 , VAR_36 <S2SV_ModStart> , VAR_37 , VAR_56 -> rate , VAR_56 -> dist , VAR_54 -> VAR_57 ) ; } <S2SV_ModEnd> METHOD_2 ( VAR_38 <S2SV_ModStart> { METHOD_4 ( VAR_58 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; ++ VAR_58 -> VAR_49 -> <S2SV_ModEnd> VAR_50 [ VAR_51 <S2SV_ModStart> ] ; } if ( VAR_52 -> VAR_61 < VAR_76 ) { VAR_52 -> VAR_77 [ 0 ] . VAR_78 = VAR_33 -> VAR_79 [ 3 ] . VAR_80 [ 0 ] . VAR_78 ; VAR_52 -> VAR_77 [ 1 ] . VAR_78 = VAR_33 -> VAR_79 [ 3 ] . VAR_80 [ 1 ] . VAR_78 ; } } if ( VAR_48 -> VAR_81 ) { TYPE_14 * const VAR_82 = VAR_48 -> VAR_83 -> VAR_84 + VAR_35 * VAR_48 -> VAR_65 + VAR_36 ; TYPE_10 VAR_85 , VAR_86 ; for ( VAR_86 = 0 ; VAR_86 < VAR_66 ; ++ VAR_86 ) { TYPE_14 * const VAR_87 = VAR_82 + VAR_86 * VAR_48 -> VAR_65 ; for ( VAR_85 = 0 ; VAR_85 < VAR_64 ; ++ VAR_85 ) { TYPE_14 * const VAR_77 = VAR_87 + VAR_85 ; VAR_77 -> VAR_88 [ 0 ] = VAR_33 -> VAR_52 . VAR_88 [ 0 ] ; VAR_77 -> VAR_88 [ 1 ] = VAR_33 -> VAR_52 . VAR_88 [ 1 ] ; VAR_77 -> VAR_77 [ 0 ] . VAR_78 = VAR_33 -> VAR_52 . VAR_77 [ 0 ] . VAR_78 ; VAR_77 -> VAR_77 [ 1 ] . VAR_78 = VAR_33 -> VAR_52 . VAR_77 [ 1 ] . VAR_78 ; } } <S2SV_ModStart> -> VAR_57 ; VAR_54 -> VAR_89 [ 0 ] = VAR_52 -> VAR_75 ? 0 : VAR_56 -> VAR_89 [ 0 ] ;
<S2SV_ModStart> ; VAR_47 ++ ; if ( ! METHOD_5 ( VAR_46 , VAR_47 ) ) return 0 <S2SV_ModStart> VAR_45 ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_24 == VAR_97 || METHOD_30 ( VAR_120 , VAR_24 , VAR_123 )
<S2SV_ModStart> STRUCT_OR_UNION_4 ) >= VAR_12 || ( unsigned TYPE_11 * ) VAR_53 + VAR_53 -> VAR_19 >
<S2SV_ModStart> TYPE_1 * VAR_6 , unsigned TYPE_4 * VAR_17 <S2SV_ModStart> TYPE_3 * VAR_12 , const TYPE_2 * VAR_18 , TYPE_3 VAR_19 <S2SV_ModStart> * VAR_15 ; if ( VAR_19 < sizeof ( struct STRUCT_OR_UNION_1 ) ) { return - 1 ; } <S2SV_ModStart> STRUCT_OR_UNION_1 * ) VAR_18 <S2SV_ModEnd> ; * VAR_6 <S2SV_ModStart> -> VAR_8 ) ; * VAR_17 = VAR_15 -> VAR_16 <S2SV_ModStart> - 2 ; if ( ( VAR_15 -> VAR_14 + 4 ) > VAR_19 ) { return - 1 ; }
<S2SV_ModStart> ; VAR_729 : <S2SV_ModEnd> METHOD_137 ( VAR_792 <S2SV_ModStart> -> VAR_756 ; if ( VAR_751 == VAR_791 ) VAR_791 = ( TYPE_106 * ) VAR_789 ;
<S2SV_ModStart> VAR_1173 ) ; if ( VAR_1301 . VAR_1125 . VAR_1173 > 1 << 20 ) { METHOD_131 ( "Ignoring<S2SV_blank>too<S2SV_blank>big<S2SV_blank>cut<S2SV_blank>text<S2SV_blank>length<S2SV_blank>sent<S2SV_blank>by<S2SV_blank>server:<S2SV_blank>%u<S2SV_blank>B<S2SV_blank>><S2SV_blank>1<S2SV_blank>MB\\n" , ( unsigned TYPE_34 ) VAR_1301 . VAR_1125 . VAR_1173 ) ; return VAR_1305 ; }
<S2SV_ModStart> } else { TYPE_7 <S2SV_ModEnd> VAR_58 = VAR_66 <S2SV_ModStart> VAR_66 -> VAR_67 == VAR_70 ) <S2SV_ModEnd> && VAR_66 -> <S2SV_ModStart> VAR_66 -> VAR_67 == VAR_70 ) && VAR_66 -> VAR_62 < <S2SV_ModEnd> VAR_58 ) { <S2SV_ModStart> VAR_55 , "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRIu64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\\n" , VAR_66
<S2SV_ModStart> VAR_0 ) { ( TYPE_0 ) VAR_0 ;
<S2SV_ModStart> ( VAR_9 > 1 <S2SV_ModEnd> ) { if
<S2SV_ModStart> ! VAR_167 ) { METHOD_25 ( & VAR_169 -> VAR_170 ) ; <S2SV_ModStart> - VAR_60 ; } <S2SV_ModStart> VAR_169 -> VAR_170 ) ; METHOD_7 ( VAR_167
<S2SV_ModStart> * VAR_23 , TYPE_10 VAR_37 , <S2SV_ModStart> ; VAR_36 -> VAR_21 . METHOD_3 . VAR_37 = VAR_37 ; VAR_36 ->
<S2SV_ModStart> VAR_126 -> VAR_220 ; METHOD_19 ( VAR_216 ) <S2SV_ModStart> VAR_222 ; } <S2SV_ModEnd> METHOD_36 ( & <S2SV_ModStart> ) ; } if ( VAR_218 ) METHOD_41 ( VAR_218 , VAR_219 , VAR_220 -> VAR_221 ) ; VAR_222 : <S2SV_ModStart> VAR_216 ) ; <S2SV_ModEnd> return VAR_223 ;
<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = VAR_11 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = VAR_15 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = VAR_19 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = VAR_23 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = VAR_27 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = VAR_31 ; } else { <S2SV_ModEnd> VAR_39 -> VAR_38 <S2SV_ModStart> = VAR_34 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; }
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_3 * VAR_12 = METHOD_5 ( VAR_9 ) ; struct <S2SV_ModStart> VAR_8 ) ; if ( METHOD_6 ( VAR_12 ) ) { METHOD_7 ( & VAR_9 -> VAR_13 , & VAR_10 -> VAR_14 ) ; return ; }
<S2SV_ModStart> VAR_162 ) ) { if ( METHOD_25 ( VAR_164 >= VAR_148 -> VAR_72 ) ) { VAR_195 = VAR_194 ; break ; } <S2SV_ModStart> = VAR_188 ; }
<S2SV_ModStart> VAR_33 |= VAR_27 | VAR_94
<S2SV_ModStart> >> VAR_71 ; if ( VAR_123 + VAR_122 > VAR_79 ) return - EMSGSIZE ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_84 != VAR_122 <S2SV_ModStart> VAR_84 != VAR_122 <S2SV_ModEnd> ) { for
<S2SV_ModStart> , VAR_223 ; METHOD_60 ( VAR_306 -> VAR_206 > 1 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 METHOD_0 ( struct STRUCT_OR_UNION_2 * VAR_64 , <S2SV_ModEnd> struct STRUCT_OR_UNION_0 * <S2SV_ModStart> 1 ] ; TYPE_2 VAR_65 = VAR_66 | VAR_67 ; <S2SV_ModStart> ) { case VAR_24 : case VAR_25 : VAR_65 |= VAR_68 ; case VAR_23 <S2SV_ModEnd> : VAR_61 -> <S2SV_ModStart> = VAR_57 ; if ( METHOD_3 ( VAR_64 , VAR_65 , VAR_51 , VAR_57 ) ) return VAR_69 ; <S2SV_ModStart> ; } } return VAR_70 ;
<S2SV_ModStart> VAR_45 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_43
<S2SV_ModStart> TYPE_5 * VAR_26 = VAR_54 ; TYPE_6 VAR_56 <S2SV_ModStart> VAR_51 ) ; VAR_56 = METHOD_13 ( "gimp-test-XXXXXX.xcf" , & VAR_26 , VAR_54 ) ; METHOD_14 ( VAR_56 != - 1 ) ; METHOD_15 ( VAR_56 <S2SV_ModEnd> ) ; VAR_55
<S2SV_ModStart> ; } } if ( VAR_315 . VAR_213 == 0 || VAR_315 . VAR_221 == 0 ) { METHOD_39 ( VAR_318 ) ; return VAR_313 ; } if ( VAR_315 . VAR_316 > ( ( ( TYPE_26 ) - 1 ) - 31 ) / VAR_315 . VAR_213 ) { METHOD_39 ( VAR_318 ) ; return VAR_313 ; } <S2SV_ModStart> 2 ) { if ( 8 > ( ( ( TYPE_26 ) - 1 ) - 31 ) / VAR_315 . VAR_213 ) { METHOD_39 ( VAR_318 ) ; return VAR_313 ; } <S2SV_ModStart> 4U ; } if ( VAR_301 > ( ( TYPE_26 ) - 1 ) / sizeof ( TYPE_19 ) / VAR_315 . VAR_221 ) { METHOD_39 ( VAR_318 ) ; return VAR_313 ; }
<S2SV_ModStart> ( VAR_15 ) ; if ( ! VAR_36 -> VAR_42 -> VAR_43 ) return VAR_44
<S2SV_ModStart> * VAR_15 , TYPE_1 <S2SV_ModEnd> VAR_19 ) {
<S2SV_ModStart> -> VAR_31 == VAR_37 && VAR_30 -> VAR_20 . VAR_38 . VAR_39 == VAR_40 ) { VAR_10 -> VAR_41 -> VAR_42 = ! METHOD_7 ( METHOD_6 ( VAR_10 -> VAR_33 , VAR_43 ) ) ; } else if ( VAR_30 -> VAR_31 == VAR_37 && VAR_30 -> VAR_20 . VAR_38 . VAR_39 == VAR_44 ) { VAR_10 -> VAR_41 -> VAR_42 = VAR_35 ; } else if ( VAR_30 -> VAR_31 ==
<S2SV_ModStart> TYPE_14 VAR_109 ; METHOD_4 ( VAR_106 <= 3 ) ; for ( VAR_109 = 0 ; VAR_109 < 3 ; ++ VAR_109 ) { VAR_108 [ VAR_109 ] = 0 ; } <S2SV_ModStart> VAR_109 ) { if ( ! ( <S2SV_ModStart> VAR_52 ) ) ) ) { goto VAR_110 ; } <S2SV_ModEnd> } VAR_38 = <S2SV_ModStart> ) ) { goto VAR_110 <S2SV_ModEnd> ; } } <S2SV_ModStart> VAR_103 ) { goto VAR_110 ; } VAR_97 -= 8 ; VAR_95 &= METHOD_19 ( VAR_97 ) ; } } if ( VAR_97 > 0 ) { VAR_99 = ( VAR_95 >> ( 8 - VAR_97 ) ) & METHOD_19 ( VAR_97 ) ; if ( METHOD_21 ( VAR_102 , VAR_99 ) == VAR_103 ) { goto VAR_110 ; } } if ( VAR_101 % 2 ) { if ( METHOD_21 ( VAR_102 , 0 ) == VAR_103 ) { goto VAR_110 ; } } } for ( VAR_109 = 0 ; VAR_109 < VAR_106 ; ++ VAR_109 ) { METHOD_22 ( VAR_108 [ VAR_109 ] ) ; VAR_108 [ VAR_109 ] = 0 ; } return 0 ; VAR_110 : for ( VAR_109 = 0 ; VAR_109 < VAR_106 ; ++ VAR_109 ) { if ( VAR_108 [ VAR_109 ] ) { METHOD_22 ( VAR_108 [ VAR_109 ] ) ; } } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ) { METHOD_70 ( VAR_242 , "%s:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin,<S2SV_blank>got<S2SV_blank>%s" , VAR_243 , VAR_181 ) ; METHOD_76 ( STRUCT_OR_UNION_58 ) ; return VAR_16 ; } <S2SV_ModEnd> VAR_232 = (
<S2SV_ModStart> | 1 ) ; if ( VAR_241 -> VAR_228 . VAR_97 & ( sizeof ( struct STRUCT_OR_UNION_2 ) - 1 ) ) break
<S2SV_ModStart> ( VAR_20 = METHOD_4 ( <S2SV_ModEnd> ) ) ) <S2SV_ModStart> 0 ; } <S2SV_ModEnd> VAR_20 -> VAR_12
<S2SV_ModStart> , VAR_126 ; unsigned TYPE_9 VAR_150 ; <S2SV_ModStart> ; break ; case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I440 : VAR_126 = 16 ; break ; case VPX_IMG_FMT_I444 : VAR_126 = 24 ; break ; case VPX_IMG_FMT_I42016 : VAR_126 = 24 ; break ; case VPX_IMG_FMT_I42216 : case VPX_IMG_FMT_I44016 : VAR_126 = 32 ; break ; case VPX_IMG_FMT_I44416 : VAR_126 = 48 ; break ; <S2SV_ModStart> case VAR_58 : case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I42216 : <S2SV_ModStart> VAR_55 : case VPX_IMG_FMT_I440 : case <S2SV_ModStart> : case VAR_58 : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I44016 <S2SV_ModStart> 1 ) ; VAR_150 = ( VAR_111 & VAR_151 ) ? VAR_140 * 2 : VAR_140 ; <S2SV_ModStart> VAR_107 ) { const TYPE_13 VAR_149 = <S2SV_ModEnd> ( VAR_111 & <S2SV_ModStart> VAR_98 ) ? ( TYPE_13 ) <S2SV_ModStart> / 8 : ( TYPE_13 ) <S2SV_ModStart> VAR_117 * VAR_140 ; if ( VAR_149 != ( size_t ) VAR_149 <S2SV_ModEnd> ) goto VAR_146 <S2SV_ModStart> ; VAR_147 -> VAR_107 = ( uint8_t * ) vpx_memalign ( VAR_96 , ( size_t ) VAR_149 ) ; VAR_147 -> VAR_105 = 1 ; } if ( ! VAR_147 -> VAR_107 ) goto VAR_146 ; VAR_147 -> VAR_111 = VAR_111 ; VAR_147 -> bit_depth = ( VAR_111 & VAR_151 ) ? 16 : 8 <S2SV_ModEnd> ; VAR_147 -> <S2SV_ModStart> VAR_132 ] = VAR_150 <S2SV_ModEnd> ; VAR_147 -> <S2SV_ModStart> VAR_139 ] = VAR_150 <S2SV_ModEnd> >> VAR_141 ;
<S2SV_ModStart> TYPE_6 * VAR_196 , TYPE_7 VAR_204 <S2SV_ModStart> VAR_47 ; TYPE_7 VAR_205 ; TYPE_7 <S2SV_ModStart> TYPE_8 VAR_107 ; if ( VAR_204 > VAR_206 ) return - 1 ; <S2SV_ModStart> VAR_10 : return 0 <S2SV_ModEnd> ; case VAR_11 <S2SV_ModStart> * VAR_196 ; VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> , & VAR_47 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 0 <S2SV_ModEnd> ) { * <S2SV_ModStart> VAR_47 ; return 0 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> case VAR_29 : VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> VAR_161 , VAR_196 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 1 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> * VAR_196 ; VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> , & VAR_47 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 0 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_107 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> } } return 1 <S2SV_ModEnd> ; case VAR_157 <S2SV_ModStart> } } return 1 <S2SV_ModEnd> ; case VAR_166 <S2SV_ModStart> VAR_183 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> VAR_183 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> default : return 1 <S2SV_ModEnd> ; } }
<S2SV_ModStart> = VAR_80 ; METHOD_24 ( VAR_78 , VAR_72 ) ;
<S2SV_ModStart> 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; if ( ! METHOD_9 ( VAR_31 , VAR_32 ) ) return METHOD_2 ( VAR_31 , 0 , "Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack."
<S2SV_ModStart> VAR_20 ) ; METHOD_22 ( VAR_33 ) ; METHOD_22 ( VAR_34 ) ;
<S2SV_ModStart> ; } } if ( VAR_71 > 0xFFFFFFFFU - 3 ) { TYPE_48 ( "readContigTilesIntoBuffer" , "Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size." ) ; METHOD_4 ( - 1 ) ; } <S2SV_ModStart> METHOD_5 ( VAR_71 + 3 <S2SV_ModStart> 0 ) return 0 ; VAR_232 [ VAR_71 ] = 0 ; VAR_232 [ VAR_71 + 1 ] = 0 ; VAR_232 [ VAR_71 + 2 ] =
<S2SV_ModStart> return VAR_149 ; TYPE_8 VAR_150 = 0 ; if ( METHOD_20 ( sizeof ( TYPE_14 ) , VAR_101 , & VAR_150 ) ) return VAR_151 ; <S2SV_ModStart> = METHOD_7 ( VAR_150 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> = 0 ; VAR_246 >= 0 && <S2SV_ModStart> VAR_251 ; } if ( ( TYPE_33 ) VAR_247 -> VAR_248 < 1 ) { METHOD_48 ( "Warning:<S2SV_blank>Invalid<S2SV_blank>vd_next<S2SV_blank>in<S2SV_blank>the<S2SV_blank>ELF<S2SV_blank>version\\n" ) ; break ; }
<S2SV_ModStart> ) ) { return <S2SV_ModStart> VAR_24 ) ; <S2SV_ModEnd> } else return
<S2SV_ModStart> [ VAR_249 ] ) ; METHOD_12 ( VAR_105 , "sx<S2SV_blank>sasl<S2SV_blank>callback:<S2SV_blank>check<S2SV_blank>mech<S2SV_blank>(mech=%s)" , VAR_297
<S2SV_ModStart> TYPE_2 VAR_8 , TYPE_5 <S2SV_ModEnd> VAR_6 ) { <S2SV_ModStart> VAR_6 ) { jas_ulonglong <S2SV_ModEnd> VAR_9 ; VAR_9
<S2SV_ModStart> ; TYPE_6 VAR_53 = 0 ; TYPE_6 VAR_59 = 0 ; TYPE_9 VAR_60 = 0 ; TYPE_6 VAR_61 <S2SV_ModStart> , & VAR_53 , & VAR_59 <S2SV_ModStart> VAR_23 ) ; if ( VAR_59 > VAR_62 ) METHOD_9 ( VAR_54 ) ; <S2SV_ModStart> VAR_32 , & VAR_60 <S2SV_ModEnd> , VAR_57 , <S2SV_ModStart> VAR_42 , & VAR_61 <S2SV_ModEnd> , VAR_43 ) <S2SV_ModStart> } if ( ! VAR_50 -> VAR_28 ) VAR_50 -> VAR_32 = 0 ; else { if ( VAR_60 > sizeof ( struct STRUCT_OR_UNION_1 ) ) METHOD_9 ( VAR_54 ) ; if ( VAR_50 -> VAR_32 >= VAR_60 ) VAR_50 -> VAR_32 = VAR_60 ; } if ( ! VAR_50 -> VAR_38 ) VAR_50 -> VAR_42 = 0 ; else { if ( VAR_50 -> VAR_42 >= VAR_61 ) VAR_50 -> VAR_42 = VAR_61 ; else VAR_50 -> VAR_63 |= VAR_64 ; } if ( VAR_58 > ( TYPE_3 ) VAR_59 ) { VAR_58 = - 1 ; METHOD_9 ( VAR_54 ) ; } if (
<S2SV_ModStart> VAR_13 ) { <S2SV_ModEnd> return METHOD_2 (
<S2SV_ModStart> 0 ; } VAR_35 = VAR_26 -> VAR_24 ; <S2SV_ModStart> VAR_19 ) { VAR_29 <S2SV_ModEnd> = METHOD_4 ( <S2SV_ModStart> ) ; return VAR_35 ? VAR_35 : VAR_29 <S2SV_ModEnd> ; } VAR_31 <S2SV_ModStart> VAR_20 -> VAR_21 <S2SV_ModEnd> ; VAR_29 =
<S2SV_ModStart> STRUCT_OR_UNION_4 ) >= VAR_13 || ( unsigned TYPE_11 * ) VAR_54 + VAR_54 -> VAR_20 >
<S2SV_ModStart> VAR_9 , 1 <S2SV_ModEnd> , VAR_20 ,
<S2SV_ModStart> { VAR_9 = METHOD_4 ( STRUCT_OR_UNION_6 <S2SV_ModEnd> , & STRUCT_OR_UNION_6 <S2SV_ModStart> STRUCT_OR_UNION_6 -> VAR_7 , & VAR_14 <S2SV_ModStart> if ( VAR_9 ) return VAR_9 <S2SV_ModEnd> ; } STRUCT_OR_UNION_6
<S2SV_ModStart> ; VAR_52 = METHOD_13 ( <S2SV_ModStart> VAR_32 -> VAR_31 , sizeof VAR_35 )
<S2SV_ModStart> VAR_24 ) ; break ; default : METHOD_1 ( VAR_24 ) ; METHOD_3 ( "received<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>type<S2SV_blank>from<S2SV_blank>unknown<S2SV_blank>address<S2SV_blank>%I" , VAR_22 ) ;
<S2SV_ModStart> * METHOD_0 ( TYPE_2 * const VAR_11 ) { if ( METHOD_1 ( VAR_11 ) ) return & VAR_11 -> VAR_9 . VAR_8 [ VAR_11 -> VAR_9 . VAR_10 * VAR_11 -> VAR_9 . VAR_2 + VAR_11 -> VAR_9 . VAR_6 ] ; else return ( VAR_11 -> VAR_9 . <S2SV_ModEnd> VAR_2 > 1 <S2SV_ModStart> VAR_2 > 1 && VAR_11 -> VAR_12 . VAR_13 == VAR_14 ) ? & VAR_11 -> VAR_9 . VAR_8 [ VAR_11 -> VAR_9 . <S2SV_ModEnd> VAR_6 ] : <S2SV_ModStart> ] : & VAR_11 -> VAR_9 . VAR_8 [ VAR_11 -> VAR_9 . <S2SV_ModEnd> VAR_10 ] ;
<S2SV_ModStart> TYPE_0 METHOD_10 ( struct STRUCT_OR_UNION_3 * VAR_19 , <S2SV_ModStart> ++ ; } <S2SV_ModEnd> VAR_19 -> METHOD_10
<S2SV_ModStart> 0 ) { if ( VAR_19 < 20 ) { METHOD_17 ( "Truncated<S2SV_blank>NB10<S2SV_blank>entry,<S2SV_blank>not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>to<S2SV_blank>parse\\n" ) ; return 0 ; } STRUCT_OR_UNION_5 VAR_97 = { { 0 } } <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> VAR_85 ) ; VAR_102 -> VAR_95 [ 0 ] = 0 ; if ( VAR_97 . VAR_95 ) { <S2SV_ModStart> 1 ) ; }
<S2SV_ModStart> = 0 ; if ( VAR_401 -> VAR_403 == VAR_400 ) VAR_401 -> VAR_403 = 0 ;
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> case VAR_50 : if ( VAR_85 != 4 ) { METHOD_21 ( ( VAR_118 , "(invalid<S2SV_blank>length)" ) ) ; break ; }
<S2SV_ModStart> = VAR_265 ; VAR_27 -> VAR_278 = VAR_279 ; } else if ( VAR_27 -> VAR_278 != VAR_279 ) { return 0 ;
<S2SV_ModStart> -> VAR_1 ; METHOD_2 ( & VAR_5 ) ; <S2SV_ModStart> = VAR_4 ; METHOD_3 ( & VAR_5 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ) return ; if ( METHOD_108 ( ) < 0 ) METHOD_107 ( "could<S2SV_blank>not<S2SV_blank>ensure<S2SV_blank>we<S2SV_blank>are<S2SV_blank>a<S2SV_blank>cloned<S2SV_blank>binary" ) ;
<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 <S2SV_ModEnd> , regs ,
<S2SV_ModStart> ( VAR_39 | VAR_42 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( VAR_41 | VAR_42 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> + 30 ; if ( VAR_233 . VAR_173 + 28 > VAR_233 . VAR_191 ) { METHOD_32 ( VAR_229 , "Bad<S2SV_blank>map<S2SV_blank>offset.\\n" ) ; goto VAR_228 ; } ; <S2SV_ModStart> ++ ) { if ( <S2SV_ModEnd> VAR_233 . VAR_219 <S2SV_ModStart> VAR_220 * 8 > VAR_233 . VAR_191 ) { METHOD_32 ( VAR_229 , "Bad<S2SV_blank>rsrc<S2SV_blank>marker.\\n" ) ; goto VAR_228 ; } ; VAR_210 = METHOD_29 ( & VAR_233 , VAR_233 . VAR_219 + VAR_220 * 8
<S2SV_ModStart> "verify-client" METHOD_398 ; METHOD_188 ( TYPE_71 , VAR_349 , VAR_243 METHOD_398 ;
<S2SV_ModStart> ; TYPE_4 VAR_134 <S2SV_ModEnd> ; TYPE_5 VAR_121 <S2SV_ModStart> ; TYPE_5 VAR_121 <S2SV_ModEnd> ; TYPE_14 VAR_131 <S2SV_ModStart> ; TYPE_7 VAR_132 <S2SV_ModEnd> ; TYPE_8 VAR_63 <S2SV_ModStart> ; TYPE_9 VAR_98 <S2SV_ModEnd> ; TYPE_10 * <S2SV_ModStart> "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>arguments" ) ; memset ( & VAR_98 , 0 , sizeof ( VAR_98 ) ) ; <S2SV_ModStart> ; if ( VAR_112 == VAR_128 ) { <S2SV_ModEnd> METHOD_18 ( "Unsupported<S2SV_blank>codec." <S2SV_ModStart> METHOD_18 ( "Unsupported<S2SV_blank>codec." ) ; } METHOD_35 ( VAR_112 != VAR_128 <S2SV_ModStart> ( VAR_112 -> METHOD_36 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( VAR_112 -> METHOD_36 <S2SV_ModEnd> ( ) , <S2SV_ModStart> , VAR_112 -> METHOD_36 <S2SV_ModEnd> ( ) , <S2SV_ModStart> ) ; } while ( <S2SV_ModStart> , VAR_135 ) ) { } <S2SV_ModEnd> METHOD_30 ( "\\n"
<S2SV_ModStart> VAR_7 ) { <S2SV_ModEnd> VAR_7 -> VAR_8 <S2SV_ModStart> -> VAR_8 . VAR_11 = VAR_12 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_2 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_11 ) ; return - 1 ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_330 ; TYPE_13 VAR_338 ; <S2SV_ModStart> VAR_129 ) ; VAR_338 = <S2SV_ModStart> ] ) ; if ( VAR_338 != 4 ) return VAR_60 ;
<S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> 0 ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) )
<S2SV_ModStart> = VAR_5 ; METHOD_5 ( & VAR_14 -> VAR_15 ) ; <S2SV_ModStart> VAR_14 -> VAR_9 ) ; METHOD_6 ( & VAR_14 -> VAR_15
<S2SV_ModStart> ( VAR_41 = METHOD_10 <S2SV_ModEnd> ( VAR_43 ->
<S2SV_ModStart> VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;
<S2SV_ModStart> ; TYPE_14 VAR_251 ; TYPE_20 VAR_257 <S2SV_ModStart> VAR_129 > VAR_118 / 2 / sizeof ( * VAR_253 -> VAR_166 ) - 8 <S2SV_ModStart> -> VAR_254 ; VAR_257 = 2LL * METHOD_23 ( VAR_251 , 8 ) * sizeof ( * VAR_253 -> VAR_166 ) ; METHOD_1 ( VAR_257 <= VAR_118 ) ; <S2SV_ModStart> -> VAR_158 , VAR_257 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) -> VAR_8 ) && ! ( METHOD_24 ( STRUCT_OR_UNION_20 -> VAR_79 ) -> VAR_86 & VAR_87 )
<S2SV_ModStart> 2 ] ; TYPE_11 VAR_196 ; <S2SV_ModStart> ) ; } VAR_196 = METHOD_67 ( "/proc" , VAR_197 | VAR_198 ) ; if ( VAR_196 < 0 ) { METHOD_59 ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc" ) ; METHOD_64 ( VAR_194 [ 1 ] , VAR_195 ) ; METHOD_66 ( - 1 ) ; } <S2SV_ModStart> VAR_180 = VAR_180 , . VAR_196 = VAR_196
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_16 , <S2SV_ModStart> * VAR_16 , TYPE_5 <S2SV_ModEnd> * VAR_41 ) <S2SV_ModStart> VAR_41 ) { TYPE_6 <S2SV_ModEnd> VAR_37 [ 4 <S2SV_ModStart> 4 ] ; TYPE_6 <S2SV_ModEnd> VAR_40 , VAR_42 <S2SV_ModStart> 0 ] = ( TYPE_5 ) METHOD_4 ( VAR_40 ) ; VAR_41 [ 2 ] = ( TYPE_5 ) <S2SV_ModEnd> METHOD_4 ( VAR_42 <S2SV_ModStart> 1 ] = ( TYPE_5 ) METHOD_4 ( VAR_40 ) ; VAR_41 [ 3 ] = ( TYPE_5 ) <S2SV_ModEnd> METHOD_4 ( VAR_42
<S2SV_ModStart> TYPE_7 VAR_72 [ VAR_96 <S2SV_ModEnd> ] ; TYPE_8 <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.cmd" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.png" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.ps" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.eps" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.tex" ,
<S2SV_ModStart> ( VAR_48 < 1U +
<S2SV_ModStart> ; VAR_22 -> VAR_28 = METHOD_6 ( ) <S2SV_ModEnd> ; VAR_22 ->
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0 <S2SV_ModStart> ( VAR_20 -> METHOD_14 <S2SV_ModEnd> ( ) )
<S2SV_ModStart> ( VAR_14 = METHOD_5 ( <S2SV_ModStart> VAR_11 , VAR_12 )
<S2SV_ModStart> TYPE_7 METHOD_0 ( TYPE_5 * VAR_60 , <S2SV_ModStart> STRUCT_OR_UNION_2 VAR_30 ; <S2SV_ModEnd> TYPE_7 VAR_55 , <S2SV_ModStart> return - VAR_62 <S2SV_ModEnd> ; } dctlprintk
<S2SV_ModStart> VAR_33 ; TYPE_4 * VAR_29 ; VAR_29 = METHOD_8 ( 8 , VAR_34 ) ; if ( ! VAR_29 ) return - VAR_35 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> VAR_22 ) ; VAR_22 = - VAR_30 ; goto VAR_36 <S2SV_ModEnd> ; } VAR_33 <S2SV_ModStart> ] ) ; VAR_22 = <S2SV_ModEnd> - VAR_30 ; <S2SV_ModStart> - VAR_30 ; goto VAR_36 ; } VAR_22 = METHOD_7 ( VAR_31 , VAR_32 , "%d\\n" , VAR_33 ) ; VAR_36 : METHOD_9 ( VAR_29 ) ; return VAR_22 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_345 = - VAR_309 ; if ( METHOD_67 ( & STRUCT_OR_UNION_63 -> VAR_346 ) ) goto VAR_75 ; VAR_345 = -
<S2SV_ModStart> VAR_5 ) { METHOD_2 ( VAR_5 != VAR_10 ) ; <S2SV_ModStart> ( VAR_5 -> VAR_6 != VAR_10 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> VAR_5 -> VAR_6 -> <S2SV_ModEnd> VAR_7 . VAR_8 <S2SV_ModStart> VAR_9 ) ; METHOD_1 ( VAR_5 -> VAR_6 ) ;
<S2SV_ModStart> return VAR_377 ; TYPE_26 VAR_347 = 0 ; if ( METHOD_43 ( sizeof ( TYPE_6 ) , VAR_337 , & VAR_347 ) ) return VAR_378 ; <S2SV_ModStart> = METHOD_5 ( VAR_347 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( VAR_49 , "<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n" <S2SV_ModEnd> , & VAR_37
<S2SV_ModStart> ) VAR_120 ) { VAR_137 = METHOD_36 ( VAR_137 ) ; <S2SV_ModStart> "UnableToReadImageData" ) ; }
<S2SV_ModStart> ) { return VAR_27 <S2SV_ModEnd> ; } while
<S2SV_ModStart> METHOD_44 ( VAR_108 , ".chsh"
<S2SV_ModStart> ; VAR_66 = <S2SV_ModEnd> VAR_815 -> VAR_809 <S2SV_ModStart> VAR_809 - VAR_62 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { VAR_66 = METHOD_6 ( VAR_66 , sizeof ( VAR_125 -> VAR_59 ) ) ;
<S2SV_ModStart> = VAR_44 ; TYPE_10 VAR_55 = VAR_63 -> VAR_16 ; <S2SV_ModStart> -> VAR_64 ; TYPE_13 VAR_70 = VAR_9 -> VAR_54 -> VAR_71 - ( TYPE_10 ) VAR_63 -> VAR_64 <S2SV_ModEnd> ; TYPE_10 VAR_26 <S2SV_ModStart> VAR_65 < VAR_55 && VAR_55 < VAR_70 <S2SV_ModStart> ) ) { goto VAR_72 ; } if ( VAR_65 + 4 >= VAR_70 ) { goto VAR_72 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_72 <S2SV_ModEnd> ; } VAR_67 <S2SV_ModStart> ) ) { goto VAR_72 ; } if ( VAR_65 + 4 >= VAR_70 ) { goto VAR_72 <S2SV_ModEnd> ; } VAR_67 <S2SV_ModStart> return VAR_69 ; VAR_72 : METHOD_9 ( VAR_67 ) ; return VAR_69 ;
<S2SV_ModStart> == 0 ) { <S2SV_ModStart> -> VAR_30 = 4 ; } else { const TYPE_4 VAR_34 = METHOD_6 ( VAR_17 , VAR_35 / METHOD_5 ( sizeof ( VAR_24 ) , sizeof ( TYPE_3 ) ) ) ; TYPE_4 VAR_36 = ( TYPE_4 ) <S2SV_ModEnd> VAR_31 -> VAR_30 <S2SV_ModStart> VAR_31 -> VAR_30 * <S2SV_ModEnd> 2 ; if <S2SV_ModStart> ; if ( VAR_36 > VAR_34 ) { VAR_36 = VAR_34 ; if ( ( TYPE_4 ) VAR_33 > VAR_34 ) { g_error ( "%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n" , G_STRLOC , VAR_33 ) ; } } <S2SV_ModEnd> VAR_31 -> VAR_30 <S2SV_ModStart> -> VAR_30 = VAR_36 <S2SV_ModEnd> ; } }
<S2SV_ModStart> = VAR_44 ; TYPE_10 VAR_55 = VAR_63 -> VAR_16 ; <S2SV_ModStart> -> VAR_64 ; TYPE_13 VAR_70 = VAR_9 -> VAR_54 -> VAR_71 - ( TYPE_10 ) VAR_63 -> VAR_64 <S2SV_ModEnd> ; TYPE_10 VAR_26 <S2SV_ModStart> VAR_65 < VAR_55 && VAR_55 < VAR_70 <S2SV_ModStart> ) ) { goto VAR_72 ; } if ( VAR_65 + 4 >= VAR_70 ) { goto VAR_72 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_72 <S2SV_ModEnd> ; } VAR_67 <S2SV_ModStart> ) ) { goto VAR_72 ; } if ( VAR_65 + 4 >= VAR_70 ) { goto VAR_72 <S2SV_ModEnd> ; } VAR_67 <S2SV_ModStart> return VAR_69 ; VAR_72 : METHOD_9 ( VAR_67 ) ; return VAR_69 ;
<S2SV_ModStart> . VAR_95 ; VAR_179 -> VAR_212 = METHOD_49 ( VAR_196 . VAR_159 -> VAR_135 -> VAR_212 , VAR_194 . VAR_159 -> VAR_135 -> VAR_212 ) + 1 ; VAR_211 = - VAR_64 ; if ( VAR_179 -> VAR_212 > VAR_213 ) { METHOD_32 ( "overlayfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n" ) ; goto VAR_191 ; }
<S2SV_ModStart> VAR_46 , VAR_9 ) ) { METHOD_3 ( VAR_46 , VAR_11 ) ; return 1 ; } if ( METHOD_26 ( VAR_46
<S2SV_ModStart> ; VAR_26 = METHOD_12 <S2SV_ModEnd> ( VAR_33 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_6 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> ) ) ; METHOD_16 ( VAR_63 [ 2 ] ) ; <S2SV_ModStart> ) ) ; METHOD_16 ( VAR_63 [ 3 ] ) ; <S2SV_ModStart> VAR_56 = "<S2SV_blank>^<S2SV_blank>" ; METHOD_17 ( VAR_63 [ VAR_60 ] , VAR_52 ) <S2SV_ModStart> ) ) ; return ( 0 ) ; VAR_65 : return ( - 1 ) ;
<S2SV_ModStart> VAR_70 ) ; METHOD_30 ( & STRUCT_OR_UNION_9 -> VAR_71 . VAR_72 <S2SV_ModEnd> ) ; METHOD_23 <S2SV_ModStart> VAR_70 ) ; spin_unlock_bh ( & STRUCT_OR_UNION_9 -> VAR_71 . VAR_72 <S2SV_ModEnd> ) ; METHOD_28
<S2SV_ModStart> VAR_72 ) { if ( METHOD_17 ( & VAR_38 -> VAR_73 ) )
<S2SV_ModStart> VAR_13 ) ; if ( VAR_54 == VAR_31 ) return VAR_31 ; <S2SV_ModStart> VAR_44 ) ; if ( VAR_54 -> VAR_43 . VAR_40 == VAR_31 ) { METHOD_4 ( VAR_54 , VAR_54 ) ; return VAR_31 ; } <S2SV_ModStart> VAR_53 ) ; if ( VAR_54 -> VAR_50 == VAR_31 ) { METHOD_4 ( VAR_54 , VAR_54 -> VAR_43 . VAR_40 ) ; METHOD_4 ( VAR_54 , VAR_54 ) ; return VAR_31 ; }
<S2SV_ModStart> VAR_235 ) { TYPE_3 VAR_170 ; TYPE_3 VAR_268 ; <S2SV_ModStart> STRUCT_OR_UNION_7 * VAR_275 <S2SV_ModEnd> ; unsigned TYPE_10 <S2SV_ModStart> ; unsigned TYPE_10 VAR_272 ; TYPE_10 VAR_280 = 0 , VAR_278 <S2SV_ModEnd> ; METHOD_37 ( <S2SV_ModStart> VAR_275 ) ; VAR_280 |= <S2SV_ModEnd> VAR_268 + VAR_272 <S2SV_ModStart> VAR_272 <= VAR_170 ? VAR_281 : 0 ; VAR_280 |= VAR_282 ; VAR_235 |= VAR_283 ; return METHOD_48 <S2SV_ModEnd> ( VAR_276 , <S2SV_ModStart> STRUCT_OR_UNION_25 , VAR_277 , VAR_214 , VAR_280 <S2SV_ModEnd> , VAR_235 ) <S2SV_ModStart> , VAR_235 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_14 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * VAR_17 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> ( VAR_14 , VAR_17 <S2SV_ModEnd> , VAR_9 ) <S2SV_ModStart> , VAR_14 , VAR_17 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> VAR_5 ) ; METHOD_1 ( & VAR_4 -> VAR_6 ) ; VAR_4 -> VAR_7 = 0 ;
<S2SV_ModStart> VAR_13 ) { TYPE_5 VAR_16 ; VAR_13 -> VAR_7 = METHOD_2 ( <S2SV_ModEnd> ( TYPE_3 ) <S2SV_ModStart> VAR_3 * VAR_4 , <S2SV_ModEnd> VAR_9 , & <S2SV_ModStart> VAR_9 , & VAR_16 ) <S2SV_ModEnd> ; VAR_13 -> <S2SV_ModStart> -> VAR_15 = VAR_16 / VAR_12 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_9 ) ; VAR_8 -> VAR_10 = VAR_11 ; VAR_8 -> VAR_12 = 0 ;
<S2SV_ModStart> = VAR_41 ; if ( ! METHOD_16 ( VAR_42 , VAR_47 ) ) return VAR_46 ;
<S2SV_ModStart> ) ; } else if ( VAR_65 == VAR_124 ) { METHOD_9 ( VAR_107 ) ; if ( VAR_122 -> VAR_125 -> VAR_126 ) METHOD_16 ( "Invalid<S2SV_blank>AUTH<S2SV_blank>line,<S2SV_blank>aborting\\n" ) ; METHOD_12 ( VAR_117 ) ; break ; }
<S2SV_ModStart> VAR_46 ) { <S2SV_ModEnd> TYPE_2 VAR_50 = <S2SV_ModStart> VAR_50 = 0 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> ) ) { TYPE_3 VAR_51 = METHOD_27 ( METHOD_28 ( VAR_46 ) -> VAR_52 ) ; <S2SV_ModStart> "refcount<S2SV_blank>now=0;<S2SV_blank>freeing" ) ; METHOD_30 ( METHOD_1 ( STRUCT_OR_UNION_12 ) , VAR_51 , VAR_46 -> VAR_11 <S2SV_ModEnd> ) ; METHOD_10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_19 ( VAR_43
<S2SV_ModStart> METHOD_3 ( VAR_8 , 1
<S2SV_ModStart> -> VAR_62 ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> 0 ] ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_121 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_121 ->
<S2SV_ModStart> . VAR_34 ; ( TYPE_0 ) VAR_0 ; <S2SV_ModStart> VAR_57 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_58 , <S2SV_ModStart> VAR_57 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_58 ,
<S2SV_ModStart> TYPE_1 * VAR_8 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> VAR_4 | VAR_5 ; TYPE_4 VAR_16 <S2SV_ModStart> 0 ) ; VAR_16 = <S2SV_ModEnd> METHOD_3 ( & <S2SV_ModStart> , 0 ) ; METHOD_4 ( & VAR_13 ) ; if ( VAR_16
<S2SV_ModStart> ; if ( METHOD_79 <S2SV_ModEnd> ( VAR_473 ) <S2SV_ModStart> ) && ( ! METHOD_79 ( VAR_473 ) && <S2SV_ModStart> ) != VAR_424 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> TYPE_7 METHOD_0 ( <S2SV_ModStart> ) return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } return ( ( TYPE_7 )
<S2SV_ModStart> VAR_1007 ) { VAR_1021 = VAR_1022 ; break <S2SV_ModEnd> ; } VAR_1024
<S2SV_ModStart> -> VAR_32 ; VAR_37 . VAR_60 = 0 ;
<S2SV_ModStart> VAR_38 [ VAR_5 + 1 <S2SV_ModStart> ( VAR_38 ) - 1 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( VAR_72
<S2SV_ModStart> TYPE_4 VAR_52 ; struct STRUCT_OR_UNION_2 * VAR_53 ; <S2SV_ModStart> - VAR_23 ; VAR_53 = VAR_42 -> VAR_43 ; <S2SV_ModStart> if ( ! VAR_53 || ! VAR_53 <S2SV_ModEnd> -> VAR_21 || <S2SV_ModStart> VAR_21 || ! VAR_53 <S2SV_ModEnd> -> VAR_21 -> <S2SV_ModStart> VAR_37 ) ; METHOD_4 ( VAR_53 ) ; <S2SV_ModStart> = METHOD_2 ( VAR_53 <S2SV_ModEnd> , VAR_44 | <S2SV_ModStart> VAR_47 - VAR_48 ) ; METHOD_5 ( VAR_53
<S2SV_ModStart> VAR_18 , const TYPE_16 * VAR_155 <S2SV_ModEnd> ) { TYPE_12 <S2SV_ModStart> ( VAR_153 ) && VAR_155 <S2SV_ModStart> = METHOD_2 ( VAR_155 -> VAR_156 <S2SV_ModEnd> , VAR_15 )
<S2SV_ModStart> VAR_35 ) ; if ( STRUCT_OR_UNION_20 != VAR_47 -> VAR_32 ) { VAR_79 = * VAR_78 ; VAR_81 = * VAR_80 ; VAR_82 = 3 ; break ; }
<S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> const TYPE_2 * VAR_15 <S2SV_ModEnd> , const TYPE_2 <S2SV_ModStart> const TYPE_2 * hostname <S2SV_ModEnd> ) { TYPE_4 <S2SV_ModStart> ) { TYPE_4 VAR_16 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> = METHOD_2 ( VAR_15 <S2SV_ModEnd> ) ; TYPE_4 <S2SV_ModStart> ) ; TYPE_4 VAR_17 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> = METHOD_2 ( hostname <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( VAR_17 < VAR_16 <S2SV_ModEnd> ) return VAR_14 <S2SV_ModStart> return VAR_14 ; if ( ! METHOD_3 ( VAR_15 , hostname + VAR_17 - VAR_16 ) ) return VAR_14 ; if ( VAR_17 == VAR_16 ) return VAR_13 ; if ( '.' == * ( hostname + VAR_17 - VAR_16 - 1 ) ) return VAR_13 ; return <S2SV_ModEnd> VAR_14 ; }
<S2SV_ModStart> . VAR_106 ) { continue ; } <S2SV_ModEnd> if ( VAR_108
<S2SV_ModStart> 1 ; } if ( VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 == 0 || VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 > 255 ) { METHOD_18 ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 ) ; METHOD_17 ( VAR_85 -> VAR_86 ) ; return - 1 ; } if ( VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 == 0 || VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 > 255 ) { METHOD_18 ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 ) ; METHOD_17 ( VAR_85 -> VAR_86 ) ; return - 1 ; }
<S2SV_ModStart> , VAR_115 , VAR_160 , <S2SV_ModStart> VAR_115 + VAR_116 + <S2SV_ModEnd> VAR_119 ; VAR_166 <S2SV_ModStart> ) ) { <S2SV_ModEnd> VAR_160 = METHOD_34 <S2SV_ModStart> , VAR_164 ) ; if ( VAR_160 < 0 ) return VAR_160 ; } else VAR_160 = 0 <S2SV_ModStart> . VAR_159 = VAR_116 + <S2SV_ModStart> ; VAR_166 = METHOD_35 ( VAR_164 , VAR_138 ) ; if ( VAR_166 != 0 ) return VAR_166 ; if ( METHOD_33 ( VAR_163 ) ) { VAR_166 =
<S2SV_ModStart> ; TYPE_11 VAR_98 <S2SV_ModEnd> ; TYPE_11 VAR_44 <S2SV_ModStart> VAR_27 ) ) ; METHOD_11 ( VAR_81 -> VAR_99 == VAR_81 -> VAR_98 ) ; VAR_98 = VAR_81 -> VAR_99
<S2SV_ModStart> METHOD_1 ( * VAR_35 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> , TYPE_3 VAR_21 , TYPE_9 VAR_30 <S2SV_ModStart> ( VAR_10 , VAR_30 ? "wx.ufdio" : "a.ufdio" <S2SV_ModEnd> ) ; METHOD_3 <S2SV_ModStart> VAR_11 ) ; if ( ! VAR_30 && VAR_26 != VAR_6 && ! METHOD_7 ( VAR_26 , VAR_10 ) ) { VAR_29 = VAR_14 ; goto VAR_22 ; }
<S2SV_ModStart> ; VAR_24 -> <S2SV_ModEnd> VAR_23 = 0
<S2SV_ModStart> ; if ( METHOD_131 ( ) == ( TYPE_25 ) - 1 ) METHOD_130 ( "setsid" ) ; if (
<S2SV_ModStart> -> VAR_31 = METHOD_13 ( VAR_27 <S2SV_ModEnd> , VAR_29 )
<S2SV_ModStart> = VAR_10 ; <S2SV_ModEnd> VAR_20 = METHOD_3 <S2SV_ModStart> VAR_20 ) { return VAR_20 ; } METHOD_2 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> ) ; return <S2SV_ModEnd> 0 ; }
<S2SV_ModStart> VAR_691 ) { VAR_889 -> VAR_823 = ( TYPE_155 * ) METHOD_174 ( <S2SV_ModEnd> VAR_889 -> VAR_793 <S2SV_ModStart> VAR_889 -> VAR_793 + 1 , sizeof ( * VAR_889 -> VAR_823 ) ) ; if ( VAR_889 -> VAR_823 == ( TYPE_155 * ) VAR_876 <S2SV_ModEnd> ) METHOD_204 ( <S2SV_ModStart> ) break ; if ( ( METHOD_216 ( VAR_890 <S2SV_ModEnd> , VAR_889 -> <S2SV_ModStart> VAR_889 -> VAR_844 ) == VAR_885 ) || ( METHOD_216 ( VAR_891 <S2SV_ModStart> -> VAR_846 ) <S2SV_ModEnd> == VAR_885 ) <S2SV_ModStart> == VAR_885 ) ) METHOD_204 ( ImageError , "WidthOrHeightExceedsLimit" ) ; <S2SV_ModEnd> VAR_884 = METHOD_203
<S2SV_ModStart> , unsigned TYPE_2 VAR_20 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> = VAR_18 + VAR_20 <S2SV_ModEnd> ; VAR_18 +=
<S2SV_ModStart> . METHOD_1 ( METHOD_3 ( VAR_25 ) <S2SV_ModEnd> , VAR_24 )
<S2SV_ModStart> ; VAR_152 = METHOD_31 ( & VAR_175 ) ; if ( VAR_152 ) goto VAR_176 ; VAR_152 = <S2SV_ModStart> METHOD_31 ( & VAR_173 ) ; if ( VAR_152 ) goto VAR_174 <S2SV_ModEnd> ; VAR_152 = <S2SV_ModStart> METHOD_35 ( & VAR_173 ) ; VAR_174 <S2SV_ModEnd> : METHOD_36 ( <S2SV_ModStart> ) ; VAR_158 : METHOD_35 ( & VAR_175 ) ; VAR_176
<S2SV_ModStart> METHOD_6 ( VAR_60 ) ; METHOD_12 ( VAR_39 , 0 , sizeof ( * VAR_39 )
<S2SV_ModStart> ) * VAR_79 |= VAR_81 <S2SV_ModEnd> ; return 0
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_12 , <S2SV_ModStart> == 1 ) METHOD_4 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> ( VAR_8 <= 12 ) METHOD_5 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> ) ; else METHOD_6 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> ) ) { METHOD_86 <S2SV_ModEnd> ( VAR_538 , <S2SV_ModStart> VAR_545 . VAR_546 , sizeof ( VAR_538 ) - 1 ) ; VAR_538 [ sizeof ( VAR_538 ) - 1 ] = 0 <S2SV_ModEnd> ; METHOD_85 (
<S2SV_ModStart> return VAR_53 ; <S2SV_ModEnd> VAR_71 = 0 <S2SV_ModStart> ; } } }
<S2SV_ModStart> static VAR_0 struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> ) { struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_84 ; <S2SV_ModStart> ( VAR_84 -> VAR_85 ) if ( VAR_74 == VAR_84 -> VAR_86 <S2SV_ModEnd> && VAR_84 -> <S2SV_ModStart> && VAR_84 -> VAR_90 == VAR_55 <S2SV_ModEnd> && VAR_84 -> <S2SV_ModStart> && VAR_84 -> VAR_87 == VAR_58 && VAR_84 -> VAR_88 <S2SV_ModEnd> == VAR_61 && <S2SV_ModStart> ( VAR_84 -> VAR_89 <S2SV_ModEnd> ) , VAR_74 <S2SV_ModStart> = VAR_84 -> VAR_85 ; VAR_84 -> VAR_90 = VAR_55 ; VAR_84 -> VAR_87 = VAR_58 ; VAR_84 -> VAR_88 = VAR_61 ; VAR_84 -> VAR_89 <S2SV_ModEnd> = ( TYPE_6 <S2SV_ModStart> ( VAR_84 -> VAR_89 <S2SV_ModEnd> == VAR_80 ) <S2SV_ModStart> ( VAR_84 -> VAR_89 , VAR_73 , VAR_74 ) ; VAR_84 -> VAR_86 = VAR_74 ; VAR_84 -> VAR_85 <S2SV_ModEnd> = ( struct <S2SV_ModStart> = ( struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * ) METHOD_4 <S2SV_ModStart> ( VAR_84 -> VAR_85 <S2SV_ModEnd> == VAR_80 )
<S2SV_ModStart> ( VAR_132 -> METHOD_35 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( VAR_132 -> METHOD_35 <S2SV_ModEnd> ( ) , <S2SV_ModStart> , VAR_132 -> METHOD_35 <S2SV_ModEnd> ( ) , <S2SV_ModStart> ) ; } while ( <S2SV_ModStart> , VAR_156 ) ) { }
<S2SV_ModStart> 0 ] ; if ( ( TYPE_7 * ) VAR_74 > VAR_47 -> VAR_48 + VAR_47 -> VAR_45 ) return 0 ;
<S2SV_ModStart> "btif_hl_select_wake_reset" ) ; METHOD_3 ( <S2SV_ModStart> , VAR_5 ) )
<S2SV_ModStart> TYPE_4 * VAR_11 , TYPE_4 VAR_13 <S2SV_ModStart> VAR_9 , VAR_10 , VAR_13
<S2SV_ModStart> VAR_66 = VAR_35 <S2SV_ModEnd> ; VAR_98 -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_14 ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" <S2SV_ModStart> ( VAR_100 ) ; VAR_98 -> VAR_87 = & VAR_35 -> VAR_87
<S2SV_ModStart> * VAR_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> ; if ( METHOD_4 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 )
<S2SV_ModStart> TYPE_21 VAR_47 , VAR_124 , TYPE_18 , VAR_45 ; unsigned TYPE_21 TYPE_24 ; TYPE_9 TYPE_9 VAR_61 <S2SV_ModEnd> ; TYPE_9 TYPE_9 <S2SV_ModStart> VAR_44 ) ; TYPE_24 = VAR_44 . VAR_129 ; VAR_83 <S2SV_ModEnd> = VAR_44 . <S2SV_ModStart> . VAR_83 ; VAR_45 = METHOD_4 ( ( TYPE_9 TYPE_9 ) TYPE_24 ) ; TYPE_18 = METHOD_5 ( ( TYPE_9 TYPE_9 ) TYPE_24 ) ; if ( VAR_45 != ( VAR_42 -> VAR_132 - ( <S2SV_ModEnd> VAR_42 -> VAR_43 <S2SV_ModStart> ( VAR_44 ) ) ) ) { METHOD_22 ( "read_xattrs_from_disk:<S2SV_blank>Bad<S2SV_blank>xattr_ids<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; return 0 ; } if ( VAR_25 != VAR_96 ) * VAR_25 = VAR_44 . VAR_83 ; if ( VAR_24 ) return VAR_44 . VAR_129 ; VAR_131 = METHOD_11 ( VAR_45 ) ; if ( VAR_131 == VAR_96 ) METHOD_17 ( ) ; VAR_47 = METHOD_8 ( VAR_101 , VAR_42 -> VAR_43 + sizeof ( VAR_44 ) <S2SV_ModStart> = METHOD_10 ( ( TYPE_9 TYPE_9 ) <S2SV_ModStart> ) + ( ( TYPE_9 TYPE_9 )
<S2SV_ModStart> TYPE_10 * * VAR_537 <S2SV_ModEnd> , const TYPE_33 <S2SV_ModStart> * VAR_239 = VAR_537 <S2SV_ModEnd> ; TYPE_10 * <S2SV_ModStart> * VAR_199 = VAR_537 <S2SV_ModEnd> ; const TYPE_33 <S2SV_ModStart> ( * VAR_534 ) ; METHOD_34 ( VAR_239 [ 0 ] != VAR_538 <S2SV_ModStart> ) ) * 0x0101010101010101ULL <S2SV_ModEnd> ; const TYPE_42 <S2SV_ModStart> VAR_444 ] &= 0xfefefefefefefefeULL <S2SV_ModEnd> ; VAR_534 ->
<S2SV_ModStart> ) ) ; METHOD_5 ( VAR_8 , METHOD_6 ( VAR_9 , ".gitmodules<S2SV_blank>.<S2SV_blank>.::$DATA" , VAR_10 , VAR_11 ) ) ;
<S2SV_ModStart> ! VAR_4 . VAR_31 <S2SV_ModEnd> || VAR_30 ->
<S2SV_ModStart> ) ; } VAR_101 -> VAR_16 = 1 ; if ( METHOD_11 ( VAR_101 ) != VAR_25 ) { VAR_101 -> VAR_105 = 0 ; }
<S2SV_ModStart> ! METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> VAR_427 ) ; METHOD_102 ( VAR_425 , "<S2SV_blank>umask<S2SV_blank>=<S2SV_blank>0%o" , VAR_426 -> VAR_428 ) ;
<S2SV_ModStart> VAR_360 , VAR_377 , VAR_601
<S2SV_ModStart> { if ( METHOD_17 ( VAR_95 , <S2SV_ModEnd> VAR_40 -> VAR_41 <S2SV_ModStart> { if ( METHOD_17 ( VAR_95 , <S2SV_ModEnd> VAR_40 -> VAR_41
<S2SV_ModStart> VAR_145 ++ ) { if ( METHOD_36 ( VAR_155 ) ) return VAR_159 ; <S2SV_ModStart> + VAR_153 ; }
<S2SV_ModStart> , } ; if ( VAR_27 . VAR_9 > 0 ) { <S2SV_ModStart> ( VAR_23 , VAR_27 . VAR_9 <S2SV_ModEnd> ) ; VAR_27 <S2SV_ModStart> = VAR_23 ; }
<S2SV_ModStart> 0 ; } VAR_192 . VAR_205 = 0 ;
<S2SV_ModStart> VAR_44 ) ; if <S2SV_ModEnd> ( VAR_42 != <S2SV_ModStart> . VAR_42 ) goto VAR_51
<S2SV_ModStart> VAR_20 ) ; METHOD_22 ( VAR_33 ) ; METHOD_22 ( VAR_34 ) ;
<S2SV_ModStart> , VAR_5 , VAR_8 <S2SV_ModEnd> , VAR_7 )
<S2SV_ModStart> 0 ; } VAR_335 . VAR_287 -> VAR_368 = 0 ;
<S2SV_ModStart> goto VAR_39 ; if ( STRUCT_OR_UNION_18 . VAR_11 == VAR_37 -> VAR_10 . VAR_11 && STRUCT_OR_UNION_18 . STRUCT_OR_UNION_17 == STRUCT_OR_UNION_17 && METHOD_12 ( STRUCT_OR_UNION_17 , VAR_37 ) == 2 ) { METHOD_10 ( & STRUCT_OR_UNION_18 ) ; goto VAR_39 ; }
<S2SV_ModStart> * VAR_24 ; METHOD_8 ( VAR_14 <S2SV_ModEnd> , & VAR_40 <S2SV_ModStart> goto VAR_41 ; } METHOD_4 ( VAR_36 , VAR_24 , & VAR_40 -> VAR_26 -> VAR_27 , VAR_28 ) { if ( VAR_36 -> VAR_30 & VAR_31 && ! METHOD_5 ( & VAR_36 -> VAR_33 ) ) continue ; VAR_42 = METHOD_6 ( VAR_40 , VAR_36 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } METHOD_4 ( VAR_14 , VAR_7 <S2SV_ModEnd> , & VAR_40 <S2SV_ModStart> -> VAR_26 -> VAR_10 <S2SV_ModEnd> , VAR_28 ) <S2SV_ModStart> VAR_28 ) { VAR_40 -> VAR_14 = VAR_14 ; VAR_42 = METHOD_3 ( VAR_40 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_1 == VAR_2 || VAR_1 == VAR_4
<S2SV_ModStart> METHOD_1 ( VAR_9 , VAR_118
<S2SV_ModStart> if ( ( METHOD_17 <S2SV_ModEnd> ( VAR_100 ) <S2SV_ModStart> VAR_100 ) < VAR_100 -> VAR_104 +
<S2SV_ModStart> * VAR_30 , TYPE_4 VAR_48 , <S2SV_ModStart> * VAR_34 , TYPE_4 VAR_49 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , VAR_30 , VAR_48 <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ( VAR_34 , VAR_49 ,
<S2SV_ModStart> ; if ( ! METHOD_19 ( VAR_106 -> VAR_32 , VAR_34 ) <S2SV_ModEnd> ) return VAR_30 <S2SV_ModStart> ) return VAR_30 <S2SV_ModEnd> ; METHOD_16 (
<S2SV_ModStart> ) ) return "" <S2SV_ModEnd> ; for (
<S2SV_ModStart> , VAR_65 , VAR_53 , <S2SV_ModStart> ; VAR_84 += 1 ; if ( METHOD_9 ( METHOD_18 ( VAR_35 , VAR_84 ) ) == VAR_86 ) VAR_84 += 1 ; break ; case VAR_87 : METHOD_26 -> VAR_88 = METHOD_28 ( VAR_82 ) ; if ( ! METHOD_26 -> VAR_88 ) goto VAR_85 ; VAR_84 += 1 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> VAR_67 , VAR_54 , VAR_105
<S2SV_ModStart> , sizeof ( TYPE_78 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> && VAR_66 >= 4 <S2SV_ModEnd> && VAR_80 . <S2SV_ModStart> && VAR_66 >= 4 <S2SV_ModEnd> && VAR_80 .
<S2SV_ModStart> ( VAR_53 = 0 ; VAR_53 < 17 ; VAR_53 ++ ) VAR_91 [ ( VAR_53 + VAR_57 ) <S2SV_ModEnd> * VAR_92 ]
<S2SV_ModStart> if ( VAR_21 != VAR_42 && VAR_22 == 0 ) VAR_22 = METHOD_10 ( VAR_21 ) ; if ( VAR_21
<S2SV_ModStart> METHOD_6 ( VAR_60 ) ; METHOD_12 ( VAR_39 , 0 , sizeof ( * VAR_39 )
<S2SV_ModStart> ) { TYPE_8 VAR_38 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; for ( VAR_38 <S2SV_ModEnd> = VAR_7 + <S2SV_ModStart> + 1 ; VAR_38 <S2SV_ModEnd> < VAR_13 -> <S2SV_ModStart> VAR_10 ; ++ VAR_38 ) { const TYPE_8 VAR_39 = METHOD_2 ( VAR_13 -> VAR_40 , VAR_38 , VAR_13 -> VAR_10 ) ; <S2SV_ModEnd> TYPE_5 * VAR_32 <S2SV_ModStart> -> VAR_14 [ VAR_39 <S2SV_ModEnd> ] ; TYPE_6 <S2SV_ModStart> -> VAR_37 , VAR_36 <S2SV_ModEnd> -> VAR_33 )
<S2SV_ModStart> ( VAR_11 ) VAR_11 = METHOD_7 <S2SV_ModEnd> ( VAR_11 )
<S2SV_ModStart> |= VAR_23 ; VAR_42 -> VAR_51 = 0 ;
<S2SV_ModStart> - VAR_5 ; METHOD_3 ( & VAR_21 ) ; if ( VAR_18 ) { METHOD_4 ( & VAR_21 ) ; return - VAR_22 ; } <S2SV_ModStart> ! VAR_20 ) { VAR_18 = VAR_23 ; METHOD_4 ( & VAR_21 ) ; <S2SV_ModStart> - VAR_12 ; } <S2SV_ModStart> = VAR_20 ; METHOD_4 ( & VAR_21 ) ;
<S2SV_ModStart> case VAR_52 : VAR_272 = METHOD_49 ( VAR_283 , VAR_272 , VAR_56 ) <S2SV_ModEnd> ; VAR_75 : <S2SV_ModStart> |= VAR_60 ; VAR_281 -> VAR_67 = METHOD_50 ( VAR_283 , <S2SV_ModEnd> VAR_272 * 2 <S2SV_ModStart> VAR_272 * 2 , VAR_65 ) <S2SV_ModEnd> ; VAR_281 -> <S2SV_ModStart> case VAR_76 : VAR_272 = METHOD_49 ( VAR_283 , VAR_272 , VAR_80 ) <S2SV_ModEnd> ; VAR_97 : <S2SV_ModStart> |= VAR_84 ; VAR_281 -> VAR_91 = METHOD_50 ( VAR_283 , <S2SV_ModEnd> VAR_272 * 2 <S2SV_ModStart> VAR_272 * 2 , VAR_89 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> TYPE_3 VAR_27 ; TYPE_5 <S2SV_ModEnd> VAR_19 [ 2
<S2SV_ModStart> 1 ) ; if ( VAR_185 == VAR_380 ) { METHOD_14 ( VAR_91 ) ; VAR_383 -> VAR_376 = VAR_296 ; return VAR_385 ; }
<S2SV_ModStart> VAR_123 ; } METHOD_10 ( STRUCT_OR_UNION_37 ) ; METHOD_11 ( STRUCT_OR_UNION_37 ) ; METHOD_22 ( & METHOD_32 ( STRUCT_OR_UNION_37 ) -> VAR_126 ) ; <S2SV_ModStart> VAR_116 ) ; <S2SV_ModEnd> if ( METHOD_28 <S2SV_ModStart> VAR_121 ) ; <S2SV_ModEnd> STRUCT_OR_UNION_37 -> VAR_117 <S2SV_ModStart> ; VAR_122 : METHOD_31 ( & METHOD_32 ( STRUCT_OR_UNION_37 ) -> VAR_126 ) ;
<S2SV_ModStart> VAR_45 ) { const TYPE_11 * const VAR_80 = METHOD_9 ( ) ; ( TYPE_4 ) VAR_45 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_15 ) { TYPE_3 VAR_81 = 0 ; <S2SV_ModStart> TYPE_10 VAR_27 = decoder_peek_si_internal <S2SV_ModEnd> ( * VAR_44 <S2SV_ModStart> VAR_77 -> VAR_24 , & VAR_81 , VAR_77 -> VAR_82 , VAR_77 -> VAR_83 <S2SV_ModStart> return VAR_27 ; if ( ! VAR_77 -> VAR_24 . is_kf && ! VAR_81 ) return VAR_34 ; <S2SV_ModStart> ! VAR_77 -> VAR_84 ) { TYPE_12 * const VAR_85 = VAR_77 -> VAR_86 ; TYPE_13 * const VAR_87 = ( TYPE_13 * ) VAR_85 -> VAR_88 ; VAR_87 -> VAR_44 = * VAR_44 ; VAR_87 -> VAR_89 = VAR_43 ; VAR_87 -> VAR_67 = VAR_67 ; VAR_87 -> VAR_90 = 1 ; VAR_87 -> VAR_56 -> VAR_82 = VAR_77 -> VAR_82 ; VAR_87 -> VAR_56 -> VAR_83 = VAR_77 -> VAR_83 ; VAR_85 -> VAR_91 = 0 ; VAR_80 -> METHOD_10 ( VAR_85 ) ; * VAR_44 = VAR_87 -> VAR_92 ; if ( VAR_85 -> VAR_91 ) return METHOD_7 ( VAR_77 , & VAR_87 -> VAR_56 -> VAR_40 . VAR_63 ) ; METHOD_11 ( VAR_77 , VAR_87 -> VAR_56 ) ; } else { TYPE_12 * const VAR_85 = & VAR_77 -> VAR_86 [ VAR_77 -> VAR_93 ] ; TYPE_13 * const VAR_87 = ( TYPE_13 * ) VAR_85 -> VAR_88 ; if ( VAR_77 -> VAR_93 != VAR_77 -> VAR_94 ) METHOD_12 ( & VAR_77 -> VAR_86 [ VAR_77 -> VAR_93 ] , & VAR_77 -> VAR_86 [ VAR_77 -> VAR_94 ] ) ; VAR_87 -> VAR_56 -> VAR_95 = 0 ; if ( VAR_87 -> VAR_96 < VAR_43 ) { VAR_87 -> VAR_97 = ( TYPE_2 * ) METHOD_13 ( VAR_87 -> VAR_97 , VAR_43 ) ; if ( VAR_87 -> VAR_97 <S2SV_ModEnd> == VAR_33 ) <S2SV_ModStart> == VAR_33 ) { METHOD_14 ( VAR_77 , "Failed<S2SV_blank>to<S2SV_blank>reallocate<S2SV_blank>scratch<S2SV_blank>buffer" ) ; return VAR_98 ; } VAR_87 -> VAR_96 = VAR_43 ; } VAR_87 -> VAR_89 = VAR_43 ; METHOD_15 ( VAR_87 -> VAR_97 , * VAR_44 , VAR_43 ) ; VAR_87 -> VAR_99 = 0 ; VAR_87 -> VAR_100 = 0 ; VAR_87 -> VAR_90 <S2SV_ModEnd> = 1 ; <S2SV_ModStart> = 1 ; VAR_87 -> VAR_44 = VAR_87 -> VAR_97 ; VAR_87 -> VAR_67 = VAR_67 ; if ( VAR_77 -> VAR_93 != VAR_77 -> VAR_94 ) VAR_77 -> VAR_94 = ( VAR_77 -> VAR_94 + 1 ) % VAR_77 -> VAR_101 ; VAR_77 -> VAR_93 = ( VAR_77 -> VAR_93 + 1 ) % VAR_77 -> VAR_101 ; -- VAR_77 -> VAR_102 ; VAR_85 -> VAR_91 = 0 ; VAR_80 -> METHOD_16 ( VAR_85 ) ; } <S2SV_ModEnd> return VAR_79 ;
<S2SV_ModStart> TYPE_36 * VAR_433 <S2SV_ModEnd> ; if ( <S2SV_ModStart> TYPE_36 ) || VAR_506 . VAR_507 > 1024 ) { METHOD_88 ( "this<S2SV_blank>.CAF<S2SV_blank>file<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>\'chan\'<S2SV_blank>chunk!" ) ; return VAR_549 ; } if ( VAR_497 ) METHOD_88 ( "\'chan\'<S2SV_blank>chunk<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes" , ( TYPE_44 ) VAR_506 . VAR_507 ) ; VAR_433 = METHOD_75 ( ( TYPE_28 ) VAR_506 . VAR_507 ) ; if ( <S2SV_ModStart> } else { TYPE_45 <S2SV_ModEnd> VAR_519 = ( <S2SV_ModStart> ; TYPE_46 * VAR_523 ; if ( VAR_506 . VAR_507 < 0 || VAR_506 . VAR_507 > 1048576 ) { METHOD_88 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.CAF<S2SV_blank>file!" , VAR_490 ) ; return VAR_549 ; }
<S2SV_ModStart> VAR_12 ) ; METHOD_8 ( <S2SV_ModStart> METHOD_5 ( 200000 )
<S2SV_ModStart> & VAR_3 -> VAR_30 . <S2SV_ModStart> ; VAR_29 = METHOD_2 <S2SV_ModEnd> ( VAR_14 -> <S2SV_ModStart> ] . VAR_25 <S2SV_ModEnd> ) ; VAR_27
<S2SV_ModStart> ( VAR_6 , VAR_20 <S2SV_ModEnd> ) ; TYPE_5
<S2SV_ModStart> VAR_65 , 1 <S2SV_ModEnd> , VAR_350 ,
<S2SV_ModStart> METHOD_106 ( VAR_1513 ) ; if ( VAR_1479 . VAR_530 > METHOD_253 ( VAR_1513 ) ) METHOD_245 ( VAR_1483 , "InsufficientImageDataInFile"
<S2SV_ModStart> . VAR_95 ; VAR_179 -> VAR_212 = METHOD_49 ( VAR_196 . VAR_159 -> VAR_135 -> VAR_212 , VAR_194 . VAR_159 -> VAR_135 -> VAR_212 ) + 1 ; VAR_211 = - VAR_64 ; if ( VAR_179 -> VAR_212 > VAR_213 ) { METHOD_32 ( "overlayfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n" ) ; goto VAR_191 ; }
<S2SV_ModStart> VAR_10 ) { <S2SV_ModEnd> const TYPE_4 *
<S2SV_ModStart> , VAR_83 + 2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> -> VAR_447 = METHOD_124 ( 1 , <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ; if ( VAR_473 -> VAR_447 ) { if ( <S2SV_ModStart> "Cannot<S2SV_blank>parse<S2SV_blank>dyldinfo\\n" ) ; METHOD_125 <S2SV_ModEnd> ( VAR_473 -> <S2SV_ModStart> ; } } }
<S2SV_ModStart> VAR_89 ) { TYPE_11 <S2SV_ModEnd> VAR_68 ; TYPE_5 <S2SV_ModStart> ) VAR_11 ; TYPE_11 VAR_37 ; TYPE_11 <S2SV_ModEnd> VAR_27 ; METHOD_12 <S2SV_ModStart> VAR_27 ) { if ( ! METHOD_13 ( VAR_37 , 2 , & VAR_37 ) ) { <S2SV_ModEnd> METHOD_6 ( 100 <S2SV_ModStart> 100 , ( "new<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>would<S2SV_blank>cause<S2SV_blank>overflow\\n" ) ) ; <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } } METHOD_6 ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%zu\\n" , VAR_86 -> VAR_64 , VAR_37 ) ) ; METHOD_12 ( VAR_37 > 0 ) ; if ( METHOD_7 ( VAR_86 , VAR_37 ) ) { return - 1 ; } }
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> ( VAR_13 ) <S2SV_ModEnd> ; return 0
<S2SV_ModStart> = METHOD_53 ( <S2SV_ModEnd> VAR_156 [ VAR_76 <S2SV_ModStart> = METHOD_53 ( <S2SV_ModEnd> VAR_156 [ VAR_76
<S2SV_ModStart> VAR_427 ) ; METHOD_102 ( VAR_425 , "<S2SV_blank>umask<S2SV_blank>=<S2SV_blank>0%o" , VAR_426 -> VAR_428 ) ;
<S2SV_ModStart> VAR_97 ) { return METHOD_22 <S2SV_ModEnd> ( STRUCT_OR_UNION_2 , <S2SV_ModStart> , VAR_99 , VAR_97 , METHOD_16 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = "stack<S2SV_blank>" ; VAR_28 = VAR_29 ;
<S2SV_ModStart> * VAR_13 , TYPE_4 <S2SV_ModEnd> * VAR_12 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 * VAR_39 <S2SV_ModEnd> , TYPE_10 * <S2SV_ModStart> TYPE_11 * VAR_36 , TYPE_9 VAR_41 [ VAR_42 ] ) { <S2SV_ModEnd> TYPE_9 VAR_21 = <S2SV_ModStart> : 0 ; VAR_41 [ VAR_37 ] ++ ;
<S2SV_ModStart> VAR_57 ) ; struct STRUCT_OR_UNION_3 * VAR_60 = VAR_50 ; struct STRUCT_OR_UNION_4 * VAR_61 = VAR_60 -> VAR_61 ; <S2SV_ModStart> + METHOD_2 ( VAR_61 ) ; if ( ! VAR_60 -> VAR_62 ) return - VAR_63 <S2SV_ModEnd> ; VAR_55 = <S2SV_ModStart> , METHOD_8 ( VAR_61 <S2SV_ModEnd> ) , VAR_18 <S2SV_ModStart> , METHOD_8 ( VAR_61 ) ) ; METHOD_9 ( & VAR_55 -> VAR_29 ) ; VAR_55 -> VAR_32 = VAR_32 ; VAR_55 -> VAR_34 = 0 ; VAR_55 -> VAR_36 = 0 ; VAR_55 -> VAR_38 = 0 ; VAR_55 -> VAR_40 = 0 ; METHOD_10 ( & VAR_55 -> VAR_42 , 0 ) ; METHOD_11 ( & VAR_55 -> VAR_56 ) ; VAR_45 -> VAR_50 <S2SV_ModEnd> = VAR_55 ; <S2SV_ModStart> -> VAR_52 , VAR_61 <S2SV_ModEnd> ) ; METHOD_13
<S2SV_ModStart> TYPE_1 VAR_74 ; <S2SV_ModEnd> TYPE_4 VAR_76 ; <S2SV_ModStart> VAR_53 ) ; VAR_74 = METHOD_5 ( ( TYPE_5 * ) & VAR_75 -> VAR_51 , sizeof ( VAR_75 -> VAR_51 ) ) ; VAR_80 = METHOD_7 ( & VAR_81 -> VAR_88 , VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 <S2SV_ModEnd> , VAR_75 -> <S2SV_ModStart> VAR_75 -> VAR_68 <S2SV_ModEnd> , VAR_79 )
<S2SV_ModStart> VAR_55 ) { METHOD_16 ( VAR_68 ) ;
<S2SV_ModStart> , VAR_140 , VAR_142 , <S2SV_ModStart> , VAR_140 , VAR_142 ,
<S2SV_ModStart> TYPE_4 VAR_42 = METHOD_22 ( <S2SV_ModStart> , VAR_21 ) )
<S2SV_ModStart> TYPE_3 VAR_36 = METHOD_4 ( <S2SV_ModStart> VAR_35 , VAR_13 )
<S2SV_ModStart> VAR_6 ) ; struct STRUCT_OR_UNION_9 * VAR_18 = METHOD_8 ( STRUCT_OR_UNION_8 ) ; <S2SV_ModStart> VAR_11 ) ; METHOD_9 ( VAR_18 <S2SV_ModEnd> , ( VAR_16
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> VAR_194 , VAR_188 ; struct STRUCT_OR_UNION_17 * VAR_239 <S2SV_ModStart> -> VAR_266 ; VAR_239 = rcu_dereference_protected ( VAR_259 -> VAR_239 , sock_owned_by_user ( VAR_280 ) ) ; <S2SV_ModStart> & VAR_223 , <S2SV_ModEnd> VAR_239 , & <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_239 ) VAR_233 <S2SV_ModStart> -> VAR_234 = <S2SV_ModEnd> VAR_239 -> VAR_237 <S2SV_ModStart> -> VAR_237 + <S2SV_ModEnd> VAR_239 -> VAR_240 <S2SV_ModStart> VAR_239 -> VAR_240 <S2SV_ModEnd> ; TYPE_20 ->
<S2SV_ModStart> VAR_52 -- ; METHOD_15 <S2SV_ModEnd> ( VAR_64 ,
<S2SV_ModStart> ) break ; VAR_1316 = METHOD_206 ( VAR_1330 , VAR_1330 -> VAR_1260 , VAR_1330 -> VAR_1235 ) ; if ( VAR_1316 == VAR_1317 ) { METHOD_202 ( VAR_1326 , & VAR_1330 -> VAR_1326 ) ; return ( METHOD_196 ( VAR_1330 ) ) ; }
<S2SV_ModStart> VAR_129 < 0 || VAR_131 < 0
<S2SV_ModStart> -> VAR_24 = METHOD_8 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> ( VAR_24 ) , VAR_27
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_14 <S2SV_ModEnd> ; VAR_14 =
<S2SV_ModStart> ; METHOD_7 ( VAR_72 <S2SV_ModEnd> , VAR_70 , <S2SV_ModStart> ; METHOD_7 ( VAR_72 <S2SV_ModEnd> , VAR_70 , <S2SV_ModStart> ; METHOD_7 ( VAR_72 <S2SV_ModEnd> , VAR_70 ,
<S2SV_ModStart> ) ; } if ( VAR_141 -> VAR_70 > 1 ) { METHOD_31 ( VAR_141 , VAR_132 , VAR_47 , VAR_54 , VAR_137 , VAR_139 , VAR_142 ) ; VAR_139 += METHOD_29 ( VAR_141 ) ; } else <S2SV_ModEnd> { TYPE_18 VAR_85 <S2SV_ModStart> ++ ) { METHOD_31 ( VAR_141 , VAR_132 , VAR_47 , VAR_54 <S2SV_ModEnd> , ( ( <S2SV_ModStart> 255 , VAR_139 , VAR_142 <S2SV_ModEnd> ) ; VAR_139 <S2SV_ModStart> ++ ; } if ( VAR_98 != VAR_141 -> VAR_75 ) <S2SV_ModStart> ; } } <S2SV_ModEnd> return ( METHOD_30
<S2SV_ModStart> -> VAR_88 && VAR_91 -> VAR_98 &&
<S2SV_ModStart> ) { TYPE_14 VAR_92 ; TYPE_14 <S2SV_ModStart> 2 ] ; <S2SV_ModEnd> TYPE_12 VAR_34 [ <S2SV_ModStart> = 0 ; TYPE_14 <S2SV_ModEnd> VAR_122 = 0 <S2SV_ModStart> ( VAR_77 , "%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9d:%12s->%12s/" <S2SV_ModEnd> , & VAR_50 <S2SV_ModStart> return - 1 ; } if ( VAR_92 < 0 ) { * VAR_93 = VAR_94 ; * VAR_95 = METHOD_12 ( "netscreen:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length" ) ; return VAR_96
<S2SV_ModStart> "auth_tag_len" ) ; VAR_59 = METHOD_29 ( "key_set" ) ;
<S2SV_ModStart> TYPE_14 VAR_109 ; METHOD_4 ( VAR_106 <= 3 ) ; for ( VAR_109 = 0 ; VAR_109 < 3 ; ++ VAR_109 ) { VAR_108 [ VAR_109 ] = 0 ; } <S2SV_ModStart> VAR_109 ) { if ( ! ( <S2SV_ModStart> VAR_52 ) ) ) ) { goto VAR_110 ; } <S2SV_ModEnd> } VAR_38 = <S2SV_ModStart> ) ) { goto VAR_110 <S2SV_ModEnd> ; } } <S2SV_ModStart> VAR_103 ) { goto VAR_110 ; } VAR_97 -= 8 ; VAR_95 &= METHOD_19 ( VAR_97 ) ; } } if ( VAR_97 > 0 ) { VAR_99 = ( VAR_95 >> ( 8 - VAR_97 ) ) & METHOD_19 ( VAR_97 ) ; if ( METHOD_21 ( VAR_102 , VAR_99 ) == VAR_103 ) { goto VAR_110 ; } } if ( VAR_101 % 2 ) { if ( METHOD_21 ( VAR_102 , 0 ) == VAR_103 ) { goto VAR_110 ; } } } for ( VAR_109 = 0 ; VAR_109 < VAR_106 ; ++ VAR_109 ) { METHOD_22 ( VAR_108 [ VAR_109 ] ) ; VAR_108 [ VAR_109 ] = 0 ; } return 0 ; VAR_110 : for ( VAR_109 = 0 ; VAR_109 < VAR_106 ; ++ VAR_109 ) { if ( VAR_108 [ VAR_109 ] ) { METHOD_22 ( VAR_108 [ VAR_109 ] ) ; } } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> : if ( VAR_112 == VAR_20 ||
<S2SV_ModStart> } if ( VAR_363 ) { METHOD_78 ( "\\n\\nCapture<S2SV_blank>file<S2SV_blank>appears<S2SV_blank>to<S2SV_blank>be<S2SV_blank>damaged<S2SV_blank>or<S2SV_blank>corrupt.\\n" "Contains<S2SV_blank>packet<S2SV_blank>of<S2SV_blank>size<S2SV_blank>%u,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>snap<S2SV_blank>length<S2SV_blank>%u\\n" , VAR_355 , VAR_303 . VAR_304 ) ; METHOD_72 ( VAR_353 ) ; break ; } if ( <S2SV_ModStart> VAR_353 ) ; break <S2SV_ModEnd> ; } METHOD_78
<S2SV_ModStart> VAR_16 ) { TYPE_9 <S2SV_ModEnd> VAR_26 [ VAR_21
<S2SV_ModStart> METHOD_0 ( const TYPE_8 * VAR_38 , const TYPE_6 * VAR_13 , TYPE_9 <S2SV_ModEnd> * VAR_34 ) <S2SV_ModStart> VAR_34 ) { TYPE_5 VAR_35 = VAR_13 -> VAR_39 [ 0 ] -> VAR_40 . VAR_35 ; TYPE_3 VAR_6 = VAR_13 -> VAR_39 [ 0 ] -> VAR_40 . VAR_41 ; <S2SV_ModStart> ] ; const TYPE_10 <S2SV_ModEnd> * const VAR_37 <S2SV_ModStart> VAR_13 , & VAR_38 -> VAR_16 -> <S2SV_ModEnd> VAR_37 ) ; <S2SV_ModStart> VAR_37 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_34 , <S2SV_ModStart> VAR_36 ) { METHOD_5 <S2SV_ModEnd> ( VAR_34 , <S2SV_ModStart> >= VAR_33 ) METHOD_5 <S2SV_ModEnd> ( VAR_34 ,
<S2SV_ModStart> const VAR_19 , TYPE_7 * const VAR_46 , <S2SV_ModStart> -> VAR_7 ; <S2SV_ModEnd> const TYPE_33 VAR_245 <S2SV_ModStart> -> VAR_13 ; const <S2SV_ModStart> - VAR_51 ; const <S2SV_ModStart> - VAR_54 ; <S2SV_ModEnd> TYPE_12 * VAR_257 <S2SV_ModStart> VAR_245 + VAR_54 ; METHOD_4 ( VAR_46 , VAR_203 -> VAR_264 , VAR_51 , VAR_54 ) <S2SV_ModStart> ) ) { TYPE_33 VAR_187 , VAR_167 ; TYPE_33 VAR_260 ; TYPE_24 VAR_216 [ 4 ] ; const TYPE_33 VAR_265 = ( VAR_51 >> 1 ) * VAR_198 -> VAR_266 + ( VAR_54 >> 1 ) ; TYPE_33 VAR_267 = 0 ; TYPE_33 VAR_268 = 0 ; unsigned TYPE_33 VAR_269 <S2SV_ModEnd> = VAR_203 -> <S2SV_ModStart> = VAR_203 -> VAR_64 ; METHOD_5 ( VAR_216 , 0 , 4 * sizeof ( TYPE_24 ) ) ; for ( VAR_187 = 0 ; VAR_187 < 4 ; VAR_187 ++ ) { TYPE_24 * VAR_166 [ 4 ] ; for ( VAR_167 = 0 ; VAR_167 < 4 ; VAR_167 ++ ) { TYPE_33 VAR_120 = VAR_186 [ VAR_187 * 4 + VAR_167 ] . VAR_184 ; TYPE_33 VAR_122 = VAR_186 [ VAR_187 * 4 + VAR_167 ] . VAR_188 ; TYPE_33 VAR_270 = VAR_120 / 2 * VAR_198 -> VAR_266 + VAR_122 / 2 ; VAR_166 [ VAR_167 ] <S2SV_ModEnd> = VAR_203 -> <S2SV_ModStart> = VAR_203 -> VAR_271 + VAR_265 + VAR_270 ; VAR_260 = VAR_120 * VAR_245 + VAR_122 ; VAR_259 [ VAR_260 ] = VAR_257 + VAR_260 ; VAR_259 [ VAR_260 ] -> VAR_261 . VAR_262 = VAR_226 ; } VAR_267 = ( VAR_166 [ 0 ] -> VAR_217 < VAR_269 ) && ( VAR_166 [ 1 ] -> VAR_217 < VAR_269 ) && ( VAR_166 [ 2 ] -> VAR_217 < VAR_269 ) && ( VAR_166 [ 3 ] -> VAR_217 < VAR_269 ) ; if ( VAR_267 ) { VAR_268 += 1 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; for ( VAR_167 = 0 ; VAR_167 < 4 ; VAR_167 <S2SV_ModEnd> ++ ) { <S2SV_ModStart> ++ ) { VAR_216 [ VAR_187 <S2SV_ModEnd> ] . VAR_174 <S2SV_ModStart> ] . VAR_174 += VAR_166 [ VAR_167 ] -> VAR_174 ; VAR_216 [ VAR_187 <S2SV_ModEnd> ] . VAR_180 <S2SV_ModStart> ] . VAR_180 += VAR_166 [ VAR_167 ] -> VAR_180 ; } VAR_216 [ VAR_187 ] . VAR_217 = VAR_216 [ VAR_187 <S2SV_ModEnd> ] . VAR_174 <S2SV_ModStart> . VAR_174 - <S2SV_ModEnd> ( ( ( <S2SV_ModStart> = VAR_197 ; } } if ( VAR_268 == 4 ) { VAR_269 <<= 1 ; VAR_267 = ( VAR_216 [ 0 ] . VAR_217 < VAR_269 ) && ( VAR_216 [ 1 ] . VAR_217 < VAR_269 ) && ( VAR_216 [ 2 ] . VAR_217 < VAR_269 ) && ( VAR_216 [ 3 ] . VAR_217 < VAR_269 ) ; if ( VAR_267 ) { VAR_259 [ 0 ] = VAR_257 ; VAR_259 [ 0 ] -> VAR_261 . VAR_262 = VAR_224 ; } } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { TYPE_33 VAR_253 = VAR_228 [ VAR_226 ] ; TYPE_33 VAR_254 = VAR_231 [ VAR_226 ] ; METHOD_6 ( VAR_257 , VAR_245 , VAR_253 , VAR_254 , VAR_249 , VAR_251 , VAR_226 , VAR_259 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> unsigned TYPE_6 VAR_50 ; if ( ! VAR_51 ) return
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; } return <S2SV_ModStart> ( VAR_75 ) <S2SV_ModEnd> ; } METHOD_4 <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> VAR_76 ) ; return 0 ;
<S2SV_ModStart> , VAR_329 ) VAR_258 = METHOD_24 ( TYPE_192 ) - 15 ; if ( VAR_258 > 11 ) { return VAR_339 ; } <S2SV_ModStart> , VAR_329 ) VAR_258 = METHOD_24 ( TYPE_192 ) - 15 ; if ( VAR_258 > 11 ) { return VAR_339 ; }
<S2SV_ModStart> VAR_69 ) ; if ( ! <S2SV_ModStart> , VAR_62 ) ) return VAR_60
<S2SV_ModStart> ) || ( METHOD_17 ( <S2SV_ModStart> , & VAR_82 ) <S2SV_ModStart> TYPE_13 VAR_54 = METHOD_17 ( <S2SV_ModStart> | VAR_34 ) ) <S2SV_ModStart> ( VAR_77 || METHOD_17 ( <S2SV_ModStart> & VAR_82 ) )
<S2SV_ModStart> ) ) { struct STRUCT_OR_UNION_3 * VAR_68 ; <S2SV_ModStart> VAR_36 ) ; VAR_68 = VAR_66 -> VAR_40 ; if ( VAR_68 ) { VAR_68 -> VAR_69 -- ; METHOD_11 ( VAR_68 ) ; } <S2SV_ModEnd> VAR_66 -> VAR_40
<S2SV_ModStart> VAR_3 ) { if ( VAR_3 -> VAR_5 & VAR_6 ) return VAR_7 ;
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ( 1
<S2SV_ModStart> ; TYPE_21 VAR_88 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_91 -> VAR_85 <S2SV_ModStart> VAR_86 ] . VAR_44 = VAR_89 ; VAR_91 -> VAR_85 [ VAR_86 ] . VAR_49 = VAR_82 ; for ( VAR_88 = VAR_89 ; VAR_88 <= VAR_82 ; VAR_88 ++ ) { VAR_90 += ( VAR_91 -> VAR_85 [ VAR_86 ] .
<S2SV_ModStart> ) & VAR_71 , sizeof ( * VAR_71 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_6 * VAR_300 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> , TYPE_5 VAR_290 , TYPE_7 VAR_301 ) { TYPE_1 * const VAR_264 = & VAR_300 -> VAR_302 ; const TYPE_5 VAR_303 = VAR_264 -> VAR_265 == VAR_266 ; const TYPE_5 VAR_304 = VAR_303 ? 0 : VAR_300 -> VAR_305 . VAR_304 ; <S2SV_ModEnd> VAR_296 -> VAR_4 <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_180 = 1 <S2SV_ModStart> if ( VAR_290 >= <S2SV_ModEnd> 1 ) { <S2SV_ModStart> : VAR_69 ; <S2SV_ModEnd> VAR_296 -> VAR_90 <S2SV_ModStart> ; VAR_296 -> VAR_306 . <S2SV_ModStart> ] = VAR_203 <S2SV_ModEnd> ; } if <S2SV_ModStart> { VAR_296 -> VAR_84 = ( VAR_264 -> VAR_265 == VAR_266 ) ? 0 : <S2SV_ModEnd> VAR_85 | VAR_86 <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_94 = 2 <S2SV_ModStart> ; VAR_296 -> VAR_98 = ( VAR_300 -> VAR_307 . VAR_308 != VAR_309 && VAR_300 -> VAR_310 . VAR_311 == 1 ) ? 1 : 0 <S2SV_ModEnd> ; VAR_296 -> <S2SV_ModStart> ; VAR_296 -> VAR_312 = VAR_313 <S2SV_ModEnd> ; VAR_296 -> <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_117 = 1 <S2SV_ModStart> -> VAR_209 [ VAR_134 <S2SV_ModEnd> ] = VAR_203 <S2SV_ModStart> ] = VAR_203 <S2SV_ModEnd> ; } if <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_149 = 1 <S2SV_ModStart> ; VAR_296 -> VAR_306 . <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_178 = 4 <S2SV_ModStart> VAR_169 = VAR_170 <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 == ( VAR_304 <S2SV_ModEnd> + 1 ) <S2SV_ModStart> ; VAR_296 -> VAR_306 . <S2SV_ModStart> VAR_298 ] = VAR_314 <S2SV_ModEnd> ; } VAR_296 <S2SV_ModStart> VAR_210 ] = VAR_314 <S2SV_ModEnd> ; VAR_296 -> <S2SV_ModStart> ; VAR_296 -> VAR_306 . <S2SV_ModEnd> VAR_288 = VAR_218 <S2SV_ModStart> ; VAR_296 -> VAR_316 <S2SV_ModEnd> [ VAR_243 ] <S2SV_ModStart> VAR_243 ] = VAR_315 ; VAR_296 -> VAR_316 <S2SV_ModEnd> [ VAR_225 ] <S2SV_ModStart> VAR_225 ] = VAR_317 ; VAR_296 -> VAR_316 <S2SV_ModEnd> [ VAR_229 ] <S2SV_ModStart> VAR_229 ] = VAR_317 ; VAR_296 -> VAR_316 <S2SV_ModEnd> [ VAR_233 ] <S2SV_ModStart> VAR_233 ] = VAR_317 <S2SV_ModEnd> ; VAR_296 -> <S2SV_ModStart> { VAR_296 -> VAR_318 = ! VAR_303 ; VAR_296 -> VAR_182 = VAR_303 ? VAR_106 : VAR_183 ; VAR_296 -> default_max_partition_size <S2SV_ModEnd> = VAR_243 ; <S2SV_ModStart> ; VAR_296 -> VAR_319 <S2SV_ModEnd> = VAR_246 ; <S2SV_ModStart> ; VAR_296 -> VAR_254 = VAR_303 || ( VAR_304 % <S2SV_ModEnd> ( VAR_296 -> <S2SV_ModStart> -> VAR_263 = VAR_303 <S2SV_ModEnd> ? 20 : <S2SV_ModStart> ; VAR_296 -> <S2SV_ModEnd> VAR_276 = 0 <S2SV_ModStart> = 0 ; VAR_296 -> VAR_316 [ VAR_243 ] = VAR_320 ; VAR_296 -> VAR_316 [ VAR_225 ] = VAR_320 ; VAR_296 -> VAR_316 [ VAR_229 ] = VAR_320 ; VAR_296 -> VAR_316 [ VAR_233 ] = VAR_320 ; VAR_296 -> VAR_178 = 2 ; VAR_296 -> VAR_321 = 1 ; VAR_296 -> VAR_322 = 200 ; VAR_296 -> VAR_323 = 4 ; VAR_296 -> VAR_155 = VAR_303 ? VAR_324 : VAR_156 ; VAR_296 -> VAR_84 = VAR_85 ; VAR_296 -> VAR_66 = VAR_303 ? VAR_69 : VAR_325 ; VAR_296 -> VAR_326 = 1 ; if ( ! VAR_303 ) { TYPE_5 VAR_298 ; if ( VAR_301 == VAR_327 ) { for ( VAR_298 = 0 ; VAR_298 < VAR_294 ; ++ VAR_298 ) VAR_296 -> VAR_328 [ VAR_298 ] = VAR_329 ; } else { for ( VAR_298 = 0 ; VAR_298 < VAR_294 ; ++ VAR_298 ) if ( VAR_298 >= VAR_330 ) VAR_296 -> VAR_328 [ VAR_298 ] = VAR_314 ; else VAR_296 -> VAR_328 [ VAR_298 ] = VAR_203 ; } } <S2SV_ModStart> -> VAR_279 = VAR_331 <S2SV_ModEnd> ; VAR_296 -> <S2SV_ModStart> ; VAR_296 -> VAR_306 . VAR_288 = VAR_332 ; VAR_296 -> VAR_306 . VAR_333 = 1 ; VAR_296 -> VAR_151 = 0 <S2SV_ModEnd> ; } if <S2SV_ModStart> 7 ) { VAR_296 -> VAR_178 = 3 ; VAR_296 -> VAR_306 . VAR_288 = VAR_289 ; VAR_296 -> VAR_306 . VAR_334 = 10 ; if ( VAR_300 -> VAR_310 . VAR_335 > 2 && VAR_300 -> VAR_310 . VAR_336 == 0 ) { VAR_296 -> VAR_306 . VAR_288 = VAR_332 ; VAR_296 -> VAR_306 . VAR_334 = 6 ; } } if ( VAR_290 >= 8 ) { VAR_296 -> VAR_178 = 4 ; VAR_296 -> VAR_306 . VAR_195 = 2 ; VAR_296 -> VAR_169 = VAR_337 <S2SV_ModEnd> ; } }
<S2SV_ModStart> ( VAR_13 , "%s" ,
<S2SV_ModStart> VAR_57 = VAR_57 ; METHOD_20 ( 10 , ( "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n" , \'"\' , VAR_30 -> name , \'"\' , VAR_89 -> VAR_24 , VAR_89 -> VAR_57 ) ) <S2SV_ModStart> ) ) { VAR_89 -> VAR_78 = & VAR_14 . VAR_78 ;
<S2SV_ModStart> return VAR_58 ; <S2SV_ModEnd> VAR_59 = VAR_57
<S2SV_ModStart> VAR_37 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> endif VAR_257 -> VAR_269 = VAR_268 ; VAR_257 -> <S2SV_ModStart> VAR_212 -> VAR_141 = VAR_268 ; VAR_257 -> VAR_269
<S2SV_ModStart> -> VAR_18 -> VAR_20 , VAR_16 -> VAR_18 ->
<S2SV_ModStart> ( VAR_27 , METHOD_3 ( VAR_28 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ! METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> = 0 ; VAR_71 -> VAR_93 = 0 ;
<S2SV_ModStart> = 0x0 ; VAR_81 -> VAR_82 . VAR_86 = VAR_87 ;
<S2SV_ModStart> VAR_181 ) ; if ( VAR_182 )
<S2SV_ModStart> VAR_14 , VAR_13 , VAR_6
<S2SV_ModStart> 0 ] == VAR_37 || * VAR_54 [ 0 ] ==
<S2SV_ModStart> TYPE_9 METHOD_0 ( TYPE_10 <S2SV_ModEnd> * VAR_51 , <S2SV_ModStart> TYPE_9 VAR_62 = METHOD_8 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> TYPE_9 VAR_58 = METHOD_9 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> { VAR_59 = METHOD_9 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> -> VAR_52 ) ; VAR_64 = 0 <S2SV_ModStart> ) VAR_59 |= METHOD_8 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> << VAR_39 ; VAR_64 = VAR_65 << ( VAR_58 + 2 ) ; <S2SV_ModStart> } VAR_60 = METHOD_9 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> = VAR_50 ? METHOD_8 <S2SV_ModEnd> ( VAR_51 , <S2SV_ModStart> 1 ; VAR_64 += ( <S2SV_ModEnd> ( VAR_59 <<
<S2SV_ModStart> VAR_17 | VAR_18 | VAR_53 <S2SV_ModStart> -> VAR_21 ) <S2SV_ModEnd> VAR_34 |= VAR_23 <S2SV_ModStart> |= VAR_31 ; <S2SV_ModEnd> VAR_50 -> VAR_33
<S2SV_ModStart> VAR_8 . VAR_4 != VAR_9 ) { METHOD_3 ( VAR_8 . VAR_4 < 0 ) ; <S2SV_ModEnd> return - VAR_5 <S2SV_ModStart> - VAR_5 ; }
<S2SV_ModStart> -> VAR_138 ; TYPE_16 VAR_217 = VAR_215 -> VAR_217 ; <S2SV_ModStart> & VAR_144 ) && VAR_170 -> VAR_155 <S2SV_ModStart> TYPE_16 VAR_159 ; <S2SV_ModEnd> VAR_159 = VAR_199 <S2SV_ModStart> : 0 ; if ( METHOD_73 ( VAR_217 , VAR_159 , <S2SV_ModEnd> VAR_170 -> VAR_155 <S2SV_ModStart> VAR_170 -> VAR_155 ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> } } } METHOD_67 ( VAR_217 ) ;
<S2SV_ModStart> ( unsigned VAR_50 , struct STRUCT_OR_UNION_4 * VAR_94 <S2SV_ModStart> + VAR_85 ; METHOD_18 ( VAR_72 , VAR_94 <S2SV_ModEnd> ) ; VAR_85
<S2SV_ModStart> -> VAR_24 = METHOD_8 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> ( VAR_24 ) , VAR_27
<S2SV_ModStart> TYPE_4 VAR_13 ; if ( VAR_10 < 0 || VAR_10 >= 32 ) { return VAR_15 ; } <S2SV_ModEnd> METHOD_2 ( !
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_5 <S2SV_ModStart> VAR_23 ) ; return <S2SV_ModEnd> METHOD_2 ( VAR_31
<S2SV_ModStart> ( VAR_129 ) ; TYPE_9 VAR_135 = VAR_136 <S2SV_ModStart> VAR_53 ) { VAR_135 = ! <S2SV_ModEnd> METHOD_6 ( VAR_121 <S2SV_ModStart> ( VAR_121 ) ; if ( ! VAR_135 <S2SV_ModStart> } if ( VAR_135 ||
<S2SV_ModStart> , sizeof ( *
<S2SV_ModStart> ) ) { METHOD_3 ( VAR_32 , "Set-Cookie" , "securitytoken=%s;<S2SV_blank>Max-Age=600;<S2SV_blank>HttpOnly;<S2SV_blank>SameSite=strict%s" , VAR_32 -> VAR_33 , VAR_7 . VAR_8 . VAR_9 & VAR_10 ? ";<S2SV_blank>Secure" : "" ) ;
<S2SV_ModStart> -> VAR_86 = METHOD_31 ( <S2SV_ModEnd> VAR_94 -> VAR_95
<S2SV_ModStart> VAR_105 . VAR_100 || ! VAR_141
<S2SV_ModStart> "" ) ; if ( ! METHOD_29 ( VAR_62 ) ) return - VAR_113 ;
<S2SV_ModStart> VAR_19 = 0 ; if ( VAR_10 == VAR_20 ) return VAR_20
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( const
<S2SV_ModStart> return VAR_248 ; TYPE_12 VAR_249 = 0 ; if ( METHOD_21 ( sizeof ( TYPE_17 ) , VAR_192 , & VAR_249 ) ) return VAR_250 ; <S2SV_ModStart> = METHOD_8 ( VAR_249 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> 0x3 ) ; <S2SV_ModEnd> if ( VAR_326 <S2SV_ModStart> VAR_327 ; } } METHOD_32 ( TYPE_193 , TYPE_194 , TYPE_195 , TYPE_192 , VAR_330 , VAR_329 ) <S2SV_ModStart> 0x3 ) ; <S2SV_ModEnd> if ( VAR_326 <S2SV_ModStart> return VAR_327 ; }
<S2SV_ModStart> * VAR_101 ; <S2SV_ModEnd> VAR_53 = VAR_98 <S2SV_ModStart> VAR_107 = VAR_107 ; VAR_97 -> VAR_19 = VAR_19
<S2SV_ModStart> = VAR_1109 ; VAR_1595 = METHOD_254 ( VAR_1627 , VAR_1627 -> VAR_1390 , VAR_1627 -> VAR_1557 ) ; if ( VAR_1595 == VAR_1596 ) { METHOD_255 ( VAR_1567 , & VAR_1627 -> VAR_1567 ) ; break ; }
<S2SV_ModStart> , VAR_19 ) * ( ( VAR_18 -> VAR_30 & VAR_31 ) ? 2 : 1 )
<S2SV_ModStart> * STRUCT_OR_UNION_9 ) <S2SV_ModEnd> { TYPE_1 VAR_7 <S2SV_ModStart> ; TYPE_2 VAR_14 ; if ( STRUCT_OR_UNION_9 -> VAR_1 ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_32 ) { struct STRUCT_OR_UNION_5 VAR_73 ; <S2SV_ModStart> VAR_52 = 0 <S2SV_ModEnd> ; METHOD_11 ( <S2SV_ModStart> VAR_78 ) ; } return METHOD_7 ( VAR_75 , VAR_78 , VAR_56 , VAR_57 , ( VAR_58 - VAR_59 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_86 , 0
<S2SV_ModStart> VAR_9 ; } if ( VAR_18 > VAR_23 ) { php_error_docref ( TYPE_5 VAR_7 , VAR_8 , "Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d" , VAR_23 ) ; VAR_9 ; }
<S2SV_ModStart> VAR_8 ) ; METHOD_3 ( & VAR_9 -> VAR_11 ) ;
<S2SV_ModStart> METHOD_4 , VAR_9 , VAR_10
<S2SV_ModStart> VAR_32 ) { const TYPE_6 VAR_45 = <S2SV_ModEnd> 3 * VAR_34 <S2SV_ModStart> 4 + 1 ; TYPE_5 * VAR_43 = METHOD_9 ( VAR_45 <S2SV_ModStart> VAR_43 , VAR_37 , VAR_45
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_52 , const struct STRUCT_OR_UNION_3 * VAR_55 <S2SV_ModStart> VAR_53 -> VAR_54 , VAR_55
<S2SV_ModStart> VAR_73 ) ; if ( VAR_72 -> VAR_74 != VAR_54 )
<S2SV_ModStart> METHOD_0 ( const TYPE_8 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> * VAR_8 , vpx_prob <S2SV_ModEnd> VAR_16 [ ] <S2SV_ModStart> TYPE_7 VAR_13 , TYPE_9 <S2SV_ModEnd> * VAR_15 )
<S2SV_ModStart> -> VAR_105 ) METHOD_16 <S2SV_ModEnd> ( & VAR_159
<S2SV_ModStart> VAR_2 ) { TYPE_4 <S2SV_ModEnd> * const VAR_4 <S2SV_ModStart> VAR_4 = ( TYPE_4 <S2SV_ModEnd> * ) VAR_2
<S2SV_ModStart> VAR_269 , VAR_270 <S2SV_ModEnd> ) + METHOD_6 <S2SV_ModStart> VAR_209 , VAR_270 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct STRUCT_OR_UNION_6 *
<S2SV_ModStart> = VAR_55 ; VAR_57 -> VAR_59 = VAR_60 ;
<S2SV_ModStart> -> VAR_10 ; <S2SV_ModEnd> TYPE_4 VAR_31 ; <S2SV_ModStart> TYPE_4 VAR_31 ; mutex_lock <S2SV_ModEnd> ( & VAR_32 <S2SV_ModStart> VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; VAR_25 <S2SV_ModStart> VAR_31 ) ; METHOD_6 <S2SV_ModEnd> ( & VAR_32 <S2SV_ModStart> VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ] ) ; METHOD_21 ( VAR_116 -> VAR_117 . VAR_62 ) ;
<S2SV_ModStart> ; TYPE_11 VAR_27 ; TYPE_18 VAR_29 ; TYPE_18 VAR_40 ; if ( VAR_25 == VAR_33 ) return ( VAR_33 ) ; VAR_27 <S2SV_ModStart> ) VAR_25 ; <S2SV_ModEnd> VAR_29 = VAR_27 <S2SV_ModStart> VAR_27 -> VAR_28 <S2SV_ModEnd> ; if (
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_17 ; ( TYPE_0 ) VAR_0 ;
<S2SV_ModStart> ( VAR_177 ) { if ( VAR_137 + VAR_181 + VAR_180 >= VAR_179 ) { VAR_184 = VAR_185 ; return VAR_184 ; } <S2SV_ModStart> VAR_180 ) ; }
<S2SV_ModStart> } else { if ( METHOD_46 ( ! METHOD_67 ( STRUCT_OR_UNION_23 ) ) ) { METHOD_66 ( VAR_132 ) ; return METHOD_63 ( - VAR_136 ) ; } <S2SV_ModEnd> METHOD_66 ( VAR_132
<S2SV_ModStart> VAR_4 ) { const struct STRUCT_OR_UNION_0 * VAR_6 = VAR_7 ; if ( METHOD_3 ( VAR_4 < VAR_2 ) ) VAR_6 = METHOD_2 ( VAR_4 ) ; if ( ! VAR_6 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> 0 ; return VAR_6 <S2SV_ModEnd> -> VAR_5 ;
<S2SV_ModStart> } VAR_40 += VAR_35 <S2SV_ModEnd> ; } return
<S2SV_ModStart> , VAR_64 -> VAR_66 , VAR_64 ->
<S2SV_ModStart> ; VAR_289 -> VAR_300 = VAR_289 -> VAR_301 ; VAR_289 -> <S2SV_ModStart> VAR_289 -> VAR_197 = 0 ; VAR_289 -> VAR_301 <S2SV_ModStart> VAR_289 -> VAR_199 ; VAR_289 -> VAR_301 = VAR_289 -> VAR_300
<S2SV_ModStart> * VAR_91 ; TYPE_5 VAR_92 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_92 ) ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> ( VAR_114 , VAR_101 , true , <S2SV_ModEnd> & VAR_71 )
<S2SV_ModStart> const VAR_28 , TYPE_7 <S2SV_ModEnd> * VAR_29 , <S2SV_ModStart> * VAR_30 , const TYPE_5 * const <S2SV_ModEnd> VAR_31 ) { <S2SV_ModStart> VAR_31 ) { const TYPE_8 * const VAR_35 = & VAR_27 -> VAR_36 ; TYPE_9 * const VAR_37 = & VAR_27 -> VAR_38 . VAR_16 . VAR_17 ; <S2SV_ModStart> VAR_32 , VAR_33 ; METHOD_3 ( VAR_35 , VAR_37 ) <S2SV_ModStart> { METHOD_1 ( VAR_37 -> <S2SV_ModEnd> VAR_18 ) ;
<S2SV_ModStart> = 1 ; METHOD_36 ( VAR_147 ) ;
<S2SV_ModStart> = VAR_17 ; METHOD_8 <S2SV_ModEnd> ( VAR_51 ,
<S2SV_ModStart> VAR_6 &= ~ ( VAR_7 | VAR_22 ) <S2SV_ModEnd> ; VAR_19 ->
<S2SV_ModStart> if ( ( METHOD_9 ( VAR_54 ) > 2 ) && (
<S2SV_ModStart> - VAR_52 ; METHOD_18 ( VAR_119 ) ; <S2SV_ModStart> VAR_98 ) ; METHOD_31 ( VAR_57 ) ; <S2SV_ModStart> VAR_154 ) { METHOD_31 ( VAR_57 ) ; <S2SV_ModStart> VAR_154 ) { METHOD_31 ( VAR_57 ) ;
<S2SV_ModStart> -> VAR_11 ; if ( METHOD_19 ( VAR_82 , VAR_70 ) ) { METHOD_16 ( "nfsd:<S2SV_blank>NFSv%d<S2SV_blank>argument<S2SV_blank>too<S2SV_blank>large\\n" , VAR_82 -> VAR_69 ) ; * VAR_84 = VAR_26 ; return 1 ; }
<S2SV_ModStart> VAR_51 , VAR_51 ) ; METHOD_5 ( & VAR_61 , & VAR_34 <S2SV_ModStart> VAR_51 ; } METHOD_5 ( & VAR_61 , & VAR_47 ) ;
<S2SV_ModStart> ( VAR_419 , VAR_170 <S2SV_ModEnd> , VAR_423 , <S2SV_ModStart> ( VAR_419 , VAR_170 <S2SV_ModEnd> , VAR_423 ,
<S2SV_ModStart> VAR_26 ) { TYPE_4 <S2SV_ModEnd> * const VAR_23
<S2SV_ModStart> * VAR_330 ; TYPE_13 VAR_338 ; <S2SV_ModStart> VAR_129 ) ; VAR_338 = <S2SV_ModStart> ] ) ; if ( VAR_338 != 4 ) return VAR_60 ;
<S2SV_ModStart> if ( METHOD_8 == 0 || METHOD_8
<S2SV_ModStart> VAR_42 ) { METHOD_4 ( ) ;
<S2SV_ModStart> VAR_185 ) ; if ( ! METHOD_25 ( VAR_186 ) ) goto VAR_183 ;
<S2SV_ModStart> ++ ) { METHOD_7 ( VAR_111 , VAR_107 [ 0 ] , VAR_106 ) ; METHOD_7 <S2SV_ModEnd> ( VAR_113 , <S2SV_ModStart> ++ ) { METHOD_7 ( VAR_111 , VAR_107 [ 0 ] , VAR_106 ) ; METHOD_7 <S2SV_ModEnd> ( VAR_113 , <S2SV_ModStart> ++ ) { METHOD_7 ( VAR_111 , VAR_107 [ 0 ] , VAR_106 ) ; METHOD_7 <S2SV_ModEnd> ( VAR_113 ,
<S2SV_ModStart> STRUCT_OR_UNION_51 . STRUCT_OR_UNION_43 ; TYPE_6 VAR_213 = VAR_163 -> VAR_100 -> VAR_214 ; TYPE_7 VAR_215 = VAR_163 -> VAR_100 -> VAR_107 <S2SV_ModStart> = METHOD_32 ( VAR_215 , VAR_213 <S2SV_ModEnd> , METHOD_33 (
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> = VAR_6 ; ( TYPE_5 ) VAR_12 ; ( TYPE_5 ) VAR_2 ; ( TYPE_5 ) VAR_3 ; <S2SV_ModStart> ! VAR_9 -> <S2SV_ModEnd> VAR_13 [ VAR_14
<S2SV_ModStart> ] ) { TYPE_14 <S2SV_ModEnd> VAR_31 = ( <S2SV_ModStart> ( VAR_53 ? 2 * ( TYPE_14 ) VAR_53 [ 0 ] <S2SV_ModEnd> : 10 )
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_124 ) && 0 != * VAR_138 && 0 != * VAR_42 && 0 != * VAR_124 ) <S2SV_ModEnd> { * VAR_130 <S2SV_ModStart> return ; } METHOD_42 ( 0 != VAR_120 && 0 != VAR_112 ) ;
<S2SV_ModStart> ; TYPE_11 * VAR_35 ; if ( VAR_33 >= 7 ) VAR_27 |= VAR_41 ;
<S2SV_ModStart> VAR_44 > 65536 || VAR_44 < 0
<S2SV_ModStart> { for ( VAR_275 = ( <S2SV_ModEnd> TYPE_173 % 4
<S2SV_ModStart> VAR_90 , VAR_78 , VAR_110 <S2SV_ModStart> = VAR_78 = VAR_110 = <S2SV_ModStart> VAR_101 = VAR_102 ; VAR_110 ++ <S2SV_ModStart> = VAR_102 ; VAR_110 ++ ; <S2SV_ModStart> } } } if ( VAR_110 != VAR_86 * VAR_18 ) { METHOD_8 ( VAR_111 , "warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n" ) ; return VAR_108 ; }
<S2SV_ModStart> VAR_33 ; } VAR_70 -> VAR_45 = VAR_70 -> VAR_47 = 0 ; VAR_70 -> VAR_49 = METHOD_7 ( ) ; VAR_70 -> VAR_51 = VAR_70 -> VAR_53 = 0 ; VAR_70 -> VAR_55 = VAR_56 -> VAR_57 ; VAR_70 -> VAR_59 = VAR_70 -> VAR_61 = 0 ; METHOD_10 ( & VAR_70 -> VAR_63 ) ; METHOD_10 ( & VAR_70 -> VAR_65 ) ; METHOD_10 ( & VAR_70 -> VAR_67 ) ; <S2SV_ModStart> VAR_72 ; } <S2SV_ModEnd> METHOD_11 ( &
<S2SV_ModStart> VAR_10 , struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_8 ) <S2SV_ModStart> 3 } ; METHOD_3 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> != VAR_7 ) METHOD_4 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> * VAR_13 , TYPE_4 <S2SV_ModEnd> * VAR_12 )
<S2SV_ModStart> 101 , ( "jas_malloc(%zu)\\n" <S2SV_ModEnd> , VAR_5 )
<S2SV_ModStart> ; return VAR_45 < <S2SV_ModEnd> 0 ? VAR_45
<S2SV_ModStart> } if ( METHOD_13 ( VAR_32 -> VAR_33 , VAR_34 , "none" , VAR_31 , 0 , VAR_9 -> METHOD_10 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> , TYPE_2 VAR_74 , const struct STRUCT_OR_UNION_0 * VAR_86 <S2SV_ModStart> ) ) { TYPE_10 VAR_87 = VAR_76 . VAR_88 ; <S2SV_ModStart> . VAR_77 ) && ( VAR_87 == 0 || VAR_87 == VAR_86 -> VAR_88 ) ) <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ( TYPE_8 ) METHOD_24 ( <S2SV_ModStart> , VAR_44 ) )
<S2SV_ModStart> ; STRUCT_OR_UNION_35 -> VAR_56 |= VAR_57 ; STRUCT_OR_UNION_35 ->
<S2SV_ModStart> VAR_129 ) { struct STRUCT_OR_UNION_4 * VAR_130 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_3 <S2SV_ModStart> ; TYPE_3 * VAR_116 , * <S2SV_ModStart> ; TYPE_5 VAR_128 , VAR_100 ; VAR_116 = METHOD_1 ( VAR_3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_26 ) ; VAR_130 = ( struct STRUCT_OR_UNION_4 * ) VAR_116 ; VAR_89 = ( TYPE_3 * ) ( VAR_130 + 1 ) ; VAR_100 = <S2SV_ModEnd> sizeof ( VAR_129 <S2SV_ModStart> ; VAR_94 -> VAR_132 = METHOD_14 ( ( VAR_95 -> VAR_38 ? VAR_133 : 0 ) | ( VAR_95 -> VAR_51 ? VAR_134 : 0 ) | ( ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VAR_95 -> VAR_131 ) & VAR_135 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) ; VAR_130 -> VAR_132 = METHOD_14 ( VAR_129 -> VAR_130 . VAR_132 ) ; <S2SV_ModStart> , VAR_116 , VAR_100 <S2SV_ModEnd> , 0 , <S2SV_ModStart> ( VAR_128 != VAR_100 <S2SV_ModEnd> ) { if <S2SV_ModStart> , VAR_128 , VAR_100 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_365 -> VAR_327 > VAR_349 || VAR_365 -> VAR_345 > VAR_349 ) goto VAR_421 ; if ( METHOD_65 ( STRUCT_OR_UNION_104 ) + VAR_365 -> VAR_345 > VAR_349 ) goto VAR_421 ; if ( VAR_365 ->
<S2SV_ModStart> . VAR_33 ? "zlib@openssh.com,none" : "none,zlib@openssh.com" <S2SV_ModEnd> ; VAR_105 [
<S2SV_ModStart> VAR_22 . VAR_17 = 20 + VAR_23 <S2SV_ModEnd> ) * sizeof
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_98 -> VAR_17 <S2SV_ModStart> ; if ( ! METHOD_4 ( VAR_110 , VAR_106 ) ) goto VAR_109 ; if (
<S2SV_ModStart> = VAR_38 ; VAR_35 -> VAR_70 = VAR_71 ; } else if ( VAR_35 -> VAR_70 != VAR_71 ) { return 0 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_2 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_11 ) ; return - 1 ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_33 ) ; if <S2SV_ModEnd> ( VAR_34 == <S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } return VAR_34
<S2SV_ModStart> METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; return - 1 ; } if ( ! METHOD_27 ( VAR_242 -> VAR_232 ) ) { METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" <S2SV_ModStart> 1 ; } if ( ! METHOD_27 ( VAR_242 -> VAR_232 ) ) { METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" ) ; return - 1 ; }
<S2SV_ModStart> ) ) ; VAR_81 -> VAR_80 = VAR_40 ; VAR_81 -> VAR_60 = 0 ; VAR_81 -> VAR_70 = VAR_40 ; <S2SV_ModStart> return - VAR_20 <S2SV_ModEnd> ; VAR_26 += <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( VAR_81
<S2SV_ModStart> = 0 ; TYPE_1 * VAR_112 ; TYPE_5 VAR_95 ; <S2SV_ModStart> break ; } VAR_95 = <S2SV_ModEnd> VAR_94 -> VAR_95 <S2SV_ModStart> VAR_95 - 5 ; if ( VAR_103 + VAR_95 <S2SV_ModEnd> >= 254 ) <S2SV_ModStart> break ; } VAR_112 = METHOD_21 ( VAR_94 -> VAR_88 . VAR_89 . VAR_90 , '\\0' , VAR_95 ) ; if ( unlikely ( VAR_112 ) ) VAR_95 = VAR_112 - VAR_94 -> VAR_88 . VAR_89 . VAR_90 ; memcpy ( VAR_86 + VAR_103 <S2SV_ModEnd> , VAR_94 -> <S2SV_ModStart> . VAR_90 , VAR_95 <S2SV_ModEnd> ) ; VAR_103 <S2SV_ModStart> ; VAR_103 += VAR_95 ; VAR_86 [ VAR_103 ] = '\\0' <S2SV_ModEnd> ; break ;
<S2SV_ModStart> ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> ) ; return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> ) return ( <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ; METHOD_27 ( <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ; return ( <S2SV_ModEnd> 1 ) ;
<S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> ) , VAR_65 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104 <S2SV_ModStart> VAR_100 . VAR_101 , VAR_104
<S2SV_ModStart> * VAR_95 , const TYPE_5 VAR_96 ) { <S2SV_ModEnd> TYPE_14 VAR_51 = <S2SV_ModStart> ; if ( VAR_96 == 2 ) { const TYPE_14 VAR_97 = METHOD_1 ( 1 ) ; VAR_95 [ 0 ] = METHOD_18 ( VAR_95 [ 0 ] , VAR_97 ) ; VAR_95 [ 1 ] = METHOD_18 ( VAR_95 [ 1 ] , VAR_97 ) ; VAR_95 [ 2 ] = METHOD_18 ( VAR_95 [ 2 ] , VAR_97 ) ; VAR_95 [ 3 ] = METHOD_18 ( VAR_95 [ 3 ] , VAR_97 ) ; VAR_95 [ 4 ] = METHOD_18 ( VAR_95 [ 4 ] , VAR_97 ) ; VAR_95 [ 5 ] = METHOD_18 ( VAR_95 [ 5 ] , VAR_97 ) ; VAR_95 [ 6 ] = METHOD_18 ( VAR_95 [ 6 ] , VAR_97 ) ; VAR_95 [ 7 ] = METHOD_18 ( VAR_95 [ 7 ] , VAR_97 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_72 ) ; if ( VAR_96 == 1 ) { VAR_95 [ 0 ] = METHOD_34 ( VAR_95 [ 0 ] , 1 ) ; VAR_95 [ 1 ] = METHOD_34 ( VAR_95 [ 1 ] , 1 ) ; VAR_95 [ 2 ] = METHOD_34 ( VAR_95 [ 2 ] , 1 ) ; VAR_95 [ 3 ] = METHOD_34 ( VAR_95 [ 3 ] , 1 ) ; VAR_95 [ 4 ] = METHOD_34 ( VAR_95 [ 4 ] , 1 ) ; VAR_95 [ 5 ] = METHOD_34 ( VAR_95 [ 5 ] , 1 ) ; VAR_95 [ 6 ] = METHOD_34 ( VAR_95 [ 6 ] , 1 ) ; VAR_95 [ 7 ] = METHOD_34 ( VAR_95 [ 7 ] , 1 ) ; } else { VAR_95 [ 0 ] = METHOD_34 ( VAR_95 [ 0 ] , 2 ) ; VAR_95 [ 1 ] = METHOD_34 ( VAR_95 [ 1 ] , 2 ) ; VAR_95 [ 2 ] = METHOD_34 ( VAR_95 [ 2 ] , 2 ) ; VAR_95 [ 3 ] = METHOD_34 ( VAR_95 [ 3 ] , 2 ) ; VAR_95 [ 4 ] = METHOD_34 ( VAR_95 [ 4 ] , 2 ) ; VAR_95 [ 5 ] = METHOD_34 ( VAR_95 [ 5 ] , 2 ) ; VAR_95 [ 6 ] = METHOD_34 ( VAR_95 [ 6 ] , 2 ) ; VAR_95 [ 7 ] = METHOD_34 ( VAR_95 [ 7 ] , 2 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> if ( ! METHOD_33 ( VAR_56 ) -> VAR_61 <S2SV_ModEnd> ) return 0
<S2SV_ModStart> VAR_31 ) ; METHOD_7 ( VAR_52 ) -> VAR_53 = VAR_14 ;
<S2SV_ModStart> VAR_742 ) { TYPE_30 VAR_188 [ 3 ] ; METHOD_17 ( VAR_188 , VAR_160 [ VAR_161 ] , sizeof ( VAR_188 ) ) ; VAR_188 [ 0 ] &= VAR_745 ; VAR_188 [ 1 ] &= VAR_746 ; VAR_188 [ 2 ] &= VAR_747 ; <S2SV_ModStart> ( VAR_779 , VAR_188 [ 0 ] , VAR_188 [ 1 ] , VAR_188 [ 2 ] <S2SV_ModEnd> ) ; if
<S2SV_ModStart> && VAR_5 -> VAR_11 <S2SV_ModEnd> ) return VAR_7
<S2SV_ModStart> ( VAR_209 ) ; struct STRUCT_OR_UNION_17 * VAR_164 <S2SV_ModStart> -> VAR_144 ; VAR_164 = METHOD_40 <S2SV_ModEnd> ( VAR_151 -> <S2SV_ModStart> VAR_151 -> VAR_164 ) ; if ( VAR_164 ) { <S2SV_ModEnd> VAR_164 = METHOD_22 <S2SV_ModStart> ( VAR_202 , VAR_164 ) ; RCU_INIT_POINTER ( VAR_199 -> VAR_164 , VAR_164 ) ; } <S2SV_ModEnd> METHOD_24 ( VAR_202 <S2SV_ModStart> ; if ( VAR_164 <S2SV_ModEnd> ) METHOD_24 ( <S2SV_ModStart> -> VAR_159 = <S2SV_ModEnd> VAR_164 -> VAR_162 <S2SV_ModStart> -> VAR_162 + <S2SV_ModEnd> VAR_164 -> VAR_165 <S2SV_ModStart> VAR_164 -> VAR_165 <S2SV_ModEnd> ; METHOD_25 (
<S2SV_ModStart> VAR_72 ) ; if ( ! METHOD_17 ( VAR_73 ) ) goto VAR_95 ; <S2SV_ModStart> VAR_70 ; } VAR_95 :
<S2SV_ModStart> VAR_16 ) { METHOD_1 ( VAR_25 -> VAR_26 . VAR_27 != 0 ) ; VAR_25 -> VAR_29 = METHOD_2 ( VAR_25 -> VAR_26 . VAR_27 , VAR_25 -> VAR_22 ) ;
<S2SV_ModStart> = VAR_3 . VAR_30 <S2SV_ModEnd> ; if (
<S2SV_ModStart> , VAR_16 ) ; if ( METHOD_1 ( VAR_23 ) / sizeof ( TYPE_6 ) < VAR_16 ) return VAR_27
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> > 1 ) METHOD_3 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> ) ; else METHOD_4 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> * VAR_98 ; TYPE_33 <S2SV_ModEnd> VAR_116 , VAR_117 <S2SV_ModStart> VAR_117 , VAR_41 , VAR_125 , VAR_126 <S2SV_ModStart> , VAR_86 ; TYPE_33 VAR_52 <S2SV_ModEnd> ; VAR_86 = <S2SV_ModStart> VAR_116 = ( TYPE_33 <S2SV_ModEnd> ) TYPE_96 -> <S2SV_ModStart> VAR_117 = ( TYPE_33 <S2SV_ModEnd> ) TYPE_96 -> <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> goto VAR_118 ; VAR_125 = TYPE_96 -> VAR_127 & 1U ; VAR_126 = VAR_116 - VAR_125 ; <S2SV_ModStart> VAR_52 ) { TYPE_33 VAR_83 ; if ( VAR_125 > 0U ) { METHOD_6 ( VAR_85 , VAR_86 , * VAR_93 , 0 , 0 , VAR_120 , VAR_122 , VAR_124 ) ; ++ VAR_93 ; ++ VAR_120 ; ++ VAR_122 ; ++ VAR_124 ; } <S2SV_ModStart> VAR_83 < ( VAR_126 <S2SV_ModEnd> & ~ ( <S2SV_ModStart> & ~ ( TYPE_33 <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> ( VAR_83 < VAR_126 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> = VAR_107 ; <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> . TYPE_69 = TYPE_96 -> TYPE_97 [ 2 ] . TYPE_69 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_69 ; <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> . TYPE_73 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . TYPE_73 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_73 ; TYPE_96 -> TYPE_97 [ 1 ] . TYPE_86 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . TYPE_86 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_86 ; TYPE_96 -> TYPE_97 [ 1 ] . TYPE_98 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . <S2SV_ModEnd> TYPE_98 = TYPE_96 <S2SV_ModStart> ; TYPE_96 -> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> ; return ; <S2SV_ModStart> ; VAR_118 : <S2SV_ModEnd> METHOD_14 ( VAR_120 <S2SV_ModStart> VAR_120 ) ; <S2SV_ModEnd> METHOD_14 ( VAR_122 <S2SV_ModStart> VAR_122 ) ; <S2SV_ModEnd> METHOD_14 ( VAR_124
<S2SV_ModStart> ; TYPE_6 VAR_244 <S2SV_ModEnd> , VAR_181 ; <S2SV_ModStart> ) ) { if ( udf_load_sparable_map ( VAR_264 , VAR_248 , ( <S2SV_ModEnd> struct STRUCT_OR_UNION_15 * <S2SV_ModStart> struct STRUCT_OR_UNION_15 * ) VAR_117 ) < 0 ) goto VAR_267 <S2SV_ModEnd> ; } else
<S2SV_ModStart> = VAR_3 ; VAR_6 -> VAR_7 = 0 ;
<S2SV_ModStart> VAR_25 ) ; if ( ! VAR_26 ) METHOD_14 ( ) ;
<S2SV_ModStart> ( ! VAR_1 || ! VAR_60
<S2SV_ModStart> TYPE_3 VAR_23 = METHOD_8 ( <S2SV_ModStart> VAR_27 , VAR_12 )
<S2SV_ModStart> "failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>scatterlist<S2SV_blank>from<S2SV_blank>DMA<S2SV_blank>API\\n" ) ; METHOD_9 ( VAR_38 ) ;
<S2SV_ModStart> } if ( METHOD_32 <S2SV_ModEnd> ( VAR_133 , <S2SV_ModStart> , & VAR_16 , & VAR_135 ) < 0 ) { return 1 ; } if ( VAR_135 == VAR_130 ) { PyErr_SetString ( VAR_132 , "required<S2SV_blank>field<S2SV_blank>\\"lineno\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>excepthandler" ) ; return 1 ; } else { TYPE_27 TYPE_33 <S2SV_ModEnd> ; TYPE_33 = <S2SV_ModStart> ) ; } if ( METHOD_32 ( VAR_133 , & VAR_30 , & VAR_135 ) < 0 ) { return 1 ; } if ( VAR_135 == VAR_130 ) { PyErr_SetString ( VAR_132 , "required<S2SV_blank>field<S2SV_blank>\\"col_offset\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>excepthandler" ) ; return 1 ; } else { TYPE_27 TYPE_33 <S2SV_ModEnd> ; TYPE_33 = <S2SV_ModStart> ( VAR_135 ) <S2SV_ModEnd> ; } VAR_44 <S2SV_ModStart> ; if ( METHOD_32 <S2SV_ModEnd> ( VAR_133 , <S2SV_ModStart> , & VAR_53 , & VAR_135 ) < 0 ) { return 1 ; } if ( VAR_135 == VAR_130 || VAR_135 == VAR_9 ) { METHOD_28 ( VAR_135 ) ; VAR_123 = VAR_130 ; } else { TYPE_27 TYPE_33 <S2SV_ModEnd> ; TYPE_33 = <S2SV_ModStart> ) ; } if ( METHOD_32 ( VAR_133 , & VAR_68 , & VAR_135 ) < 0 ) { return 1 ; } if ( VAR_135 == VAR_130 || VAR_135 == VAR_9 ) { METHOD_28 ( VAR_135 ) ; VAR_124 = VAR_130 ; } else { TYPE_27 TYPE_33 <S2SV_ModEnd> ; TYPE_33 = <S2SV_ModStart> ) ; } if ( METHOD_32 ( VAR_133 , & VAR_85 , & VAR_135 ) < 0 ) { return 1 ; } if ( VAR_135 == VAR_130 ) { PyErr_SetString ( VAR_132 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ExceptHandler" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_27 TYPE_33 <S2SV_ModStart> ; TYPE_30 VAR_118 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_31 VAR_136 <S2SV_ModEnd> ; TYPE_33 = <S2SV_ModStart> ) , & VAR_136 <S2SV_ModEnd> , VAR_128 ) <S2SV_ModStart> , VAR_118 , VAR_136 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } * VAR_129 = METHOD_29 ( VAR_123 , VAR_124 , VAR_125 , VAR_126 , VAR_127 , VAR_128 ) ; if ( * VAR_129 == VAR_130 ) goto VAR_134 ; return 0 ; } METHOD_30 <S2SV_ModEnd> ( VAR_132 , <S2SV_ModStart> ( VAR_132 , <S2SV_ModEnd> "expected<S2SV_blank>some<S2SV_blank>sort<S2SV_blank>of<S2SV_blank>excepthandler,<S2SV_blank>but<S2SV_blank>got<S2SV_blank>%R" , VAR_133
<S2SV_ModStart> VAR_62 ; TYPE_2 * VAR_64 <S2SV_ModEnd> ; TYPE_3 VAR_63 <S2SV_ModStart> = 0 ; TYPE_4 VAR_56 = <S2SV_ModEnd> VAR_54 [ VAR_55 <S2SV_ModStart> ] . VAR_56 ; VAR_64 = METHOD_1 ( sizeof ( * VAR_62 ) , VAR_9 ) ; if ( ! VAR_64 ) return - VAR_11 ; VAR_62 = ( struct STRUCT_OR_UNION_2 * ) VAR_64 ; VAR_64 [ 0 ] = 1 ; if ( METHOD_10 ( VAR_53 , VAR_56 , VAR_64 , 1 <S2SV_ModEnd> ) != 1 <S2SV_ModStart> ; METHOD_12 ( VAR_64 <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { VAR_64 [ 0 ] = 0 ; if ( <S2SV_ModEnd> METHOD_10 ( VAR_53 <S2SV_ModStart> ( VAR_53 , VAR_56 , VAR_64 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> ; METHOD_12 ( VAR_64 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> TYPE_3 * VAR_35 , ... <S2SV_ModStart> VAR_30 ) ; TYPE_6 VAR_43 ; METHOD_10 ( VAR_43 , VAR_35 ) ; <S2SV_ModStart> -> VAR_35 = METHOD_11 ( VAR_35 , VAR_43 ) ; METHOD_12 ( VAR_43 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_17 ) { if ( ( VAR_30 + ( VAR_16 - ( VAR_30 & VAR_17 ) ) ) > VAR_30 ) { <S2SV_ModStart> ) ) ; } else { VAR_30 = 0 ; } <S2SV_ModStart> } if ( ( VAR_30 > 0 ) &&
<S2SV_ModStart> VAR_12 ) { TYPE_0 VAR_13 ; <S2SV_ModStart> -> VAR_9 ; VAR_13 = <S2SV_ModStart> , VAR_11 ) ; if ( VAR_13 != VAR_14 ) return VAR_13
<S2SV_ModStart> ) && ( METHOD_43 <S2SV_ModEnd> ( VAR_37 ,
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 <S2SV_ModEnd> VAR_26 ; TYPE_2 <S2SV_ModStart> - 1L ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! METHOD_6 ( & VAR_26 , VAR_24 ) <S2SV_ModEnd> ) return - <S2SV_ModStart> return METHOD_7 ( &
<S2SV_ModStart> VAR_862 . VAR_786 || VAR_453 <= 8
<S2SV_ModStart> VAR_113 ) ; METHOD_37 ( VAR_105 ) ; <S2SV_ModStart> VAR_106 ) ; <S2SV_ModEnd> METHOD_29 ( & <S2SV_ModStart> ) ) { METHOD_38 ( VAR_105 ) ; <S2SV_ModStart> VAR_123 ) ; if ( METHOD_39 ( ! VAR_129 ) ) <S2SV_ModStart> ) ; } else { if ( VAR_129 ) METHOD_38 ( VAR_105 ) ; } METHOD_36 ( & VAR_126 -> VAR_127 . VAR_128 ) ; <S2SV_ModEnd> } return VAR_129
<S2SV_ModStart> VAR_41 ; static TYPE_9 <S2SV_ModEnd> VAR_34 = 0
<S2SV_ModStart> case VAR_68 : case VAR_82 : case VAR_83 :
<S2SV_ModStart> VAR_83 ) && VAR_132 -> VAR_53 == METHOD_11 ( VAR_54 ) && <S2SV_ModStart> ) ) ) METHOD_29 ( VAR_132 ) -> VAR_97 |= VAR_139 ; <S2SV_ModEnd> if ( VAR_132
<S2SV_ModStart> ) return ; METHOD_4 <S2SV_ModEnd> ( & VAR_21 <S2SV_ModStart> ) ) ; METHOD_4 <S2SV_ModEnd> ( & VAR_23
<S2SV_ModStart> VAR_579 ) ) VAR_632 = <S2SV_ModStart> case 0xeb : VAR_632 = <S2SV_ModStart> VAR_579 ) ) VAR_632 =
<S2SV_ModStart> VAR_32 ) { struct STRUCT_OR_UNION_5 VAR_73 ; <S2SV_ModStart> VAR_52 = 0 <S2SV_ModEnd> ; METHOD_11 ( <S2SV_ModStart> VAR_78 ) ; } return METHOD_7 ( VAR_75 , VAR_78 , VAR_56 , VAR_57 , ( VAR_58 - VAR_59 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_19 * VAR_257 , * VAR_259 <S2SV_ModStart> VAR_247 ) ; VAR_259 = METHOD_4 ( 3 ) ; VAR_256 = METHOD_3 ( "weasel8.png" ) ; METHOD_91 ( VAR_256 , VAR_256 , 1.0 , 0 , 270 ) ; METHOD_83 ( VAR_259 , VAR_256 , VAR_260 ) ; METHOD_8 ( VAR_256 , & VAR_208 , & VAR_209 , VAR_253 ) ; METHOD_73 ( VAR_256 , 0 , 0 , 5 , VAR_209 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_73 ( VAR_256 <S2SV_ModEnd> , 20 , <S2SV_ModStart> , 20 , 0 , 2 , VAR_209 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_73 ( VAR_256 , 40 , 0 , 3 , VAR_209 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_73 ( VAR_256 , 0 , 0 , VAR_208 , 3 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_73 ( VAR_256 , 0 , 15 , VAR_208 , 3 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_73 ( VAR_256 , 0 , 35 , VAR_208 , 2 , VAR_215 , VAR_253 , 0 , 0 ) ; METHOD_83 ( VAR_259 , VAR_256 , VAR_260 ) ; pixFillMapHoles ( VAR_256 , VAR_208 , VAR_209 , L_FILL_WHITE ) ; METHOD_83 ( VAR_259 , VAR_256 , VAR_246 ) ; VAR_245 = pixaDisplayTiledInColumns ( VAR_259 , 3 , 1.0 , 20 , 1 ) ; METHOD_82 ( VAR_258 , VAR_245 , VAR_167 <S2SV_ModEnd> ) ; METHOD_87 <S2SV_ModStart> ; METHOD_87 ( VAR_245 , 50 , 850 <S2SV_ModEnd> , VAR_253 , <S2SV_ModStart> VAR_255 ) ; METHOD_89 ( & VAR_259 ) ; METHOD_88 ( & VAR_245 ) ; VAR_256 = METHOD_85 ( VAR_257 , 32 , 400 , 4 , 0 , 20 , 2 ) ; METHOD_86 ( "/tmp/lept/adapt/results.jpg" , VAR_256 , VAR_251 ) ; METHOD_87 ( VAR_256 , 50 , 0 , VAR_253 , VAR_258 -> VAR_255 ) ;
<S2SV_ModStart> 10 ) ; METHOD_19 ( VAR_74 , VAR_75 , "?[%d]" , VAR_72 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( const TYPE_11 * VAR_53 , TYPE_12 * VAR_63 , <S2SV_ModEnd> const TYPE_2 * <S2SV_ModStart> const TYPE_2 * <S2SV_ModEnd> VAR_33 , TYPE_3 <S2SV_ModStart> TYPE_3 * * VAR_64 <S2SV_ModEnd> , TYPE_17 * <S2SV_ModStart> VAR_57 ) { <S2SV_ModEnd> TYPE_17 VAR_73 ; <S2SV_ModStart> -> VAR_64 = VAR_64 <S2SV_ModEnd> ; VAR_73 = <S2SV_ModStart> TYPE_14 VAR_55 = VAR_63 -> VAR_64 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> TYPE_17 VAR_59 = METHOD_4 <S2SV_ModEnd> ( VAR_53 ,
<S2SV_ModStart> VAR_73 == VAR_76 ) return VAR_20 ; if ( VAR_73 -> VAR_70 + VAR_75 -> VAR_70 < VAR_73 -> VAR_70 ) return VAR_20 ; if ( VAR_73 -> VAR_74 + VAR_75 -> VAR_74 < VAR_73 -> VAR_74
<S2SV_ModStart> VAR_68 ) ? METHOD_12 <S2SV_ModEnd> ( 0 ,
<S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>prepare<S2SV_blank>beacon\\n" ) ; METHOD_9 ( VAR_24 ) ;
<S2SV_ModStart> ) { VAR_1 = <S2SV_ModEnd> 1 ; return
<S2SV_ModStart> = 0 ; METHOD_15 ( VAR_46 -> VAR_45 <S2SV_ModEnd> , VAR_30 )
<S2SV_ModStart> * VAR_3 >= 62 <S2SV_ModEnd> && VAR_13 [
<S2SV_ModStart> if ( VAR_145 >= <S2SV_ModEnd> VAR_32 ) return <S2SV_ModStart> if ( VAR_145 >= <S2SV_ModEnd> VAR_140 ) return
<S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_35 ( VAR_216 , <S2SV_ModEnd> 15 ) && <S2SV_ModStart> METHOD_36 ( VAR_216 , <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_38 ( VAR_216 , <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> METHOD_39 ( 2 , 0 <S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_38 ( 2 , 0 <S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_38 ( 2 , 0 <S2SV_ModStart> METHOD_36 ( VAR_216 , <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> METHOD_35 ( 6 , 0 <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_35 ( 6 , 0 <S2SV_ModStart> METHOD_36 ( 4 , 0 <S2SV_ModStart> METHOD_38 ( VAR_216 , <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> METHOD_39 ( VAR_216 , 0
<S2SV_ModStart> ) { TYPE_5 VAR_19 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ( 1
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_76 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> ( VAR_77 , <S2SV_ModEnd> & VAR_75 ,
<S2SV_ModStart> VAR_1 == VAR_2 || VAR_1 == VAR_4
<S2SV_ModStart> ) ) { if ( METHOD_22 ( VAR_157 >= VAR_143 -> VAR_61 ) ) { VAR_186 = VAR_185 ; break ; }
<S2SV_ModStart> VAR_37 ; } else if ( ( METHOD_7 ( VAR_38 -> VAR_40 ) || METHOD_8 ( VAR_38 -> VAR_40 ) ) && ! METHOD_4 ( VAR_21 ) && ! METHOD_4 ( VAR_41 ) ) { VAR_39 = - VAR_25 ; goto VAR_37 ; }
<S2SV_ModStart> VAR_97 ) { return METHOD_22 <S2SV_ModEnd> ( STRUCT_OR_UNION_2 , <S2SV_ModStart> , VAR_99 , VAR_97 , METHOD_16 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ] = { 0xCF , 0x9F , 0x3A , 0x9C , 0xC5 , 0xA5 , 0x89 , 0x27 , 0x6D , 0x2C , 0x2C , 0xF3 , 0xA6 , 0x00 , 0xD2 , 0x7C , 0xEA , 0xFA , 0xF2 , 0x43 , 0x4F , 0x49 , 0x0A , 0xFC , 0xA6 , 0xE7 , 0x75 , 0xCA , 0x07 , 0xDC , 0xA5 , 0xF2 , 0x83 , 0x4E , 0x5A , 0xA0 , 0xA0 , 0xF5 , 0x9C , 0xFD , 0x02 , 0xE6 , 0x9E , 0xFC , 0x01 , 0x59 , 0xD7 , 0xB6 , 0xC1 , 0x4E , 0xC0 , 0xB6 , 0x71 , 0x49 , 0xF0 , 0xC7 , 0xD5 , 0x2F , 0x8D , 0xDF , 0xD3 , 0xF1 , 0x82 , 0x82 , 0x23 , 0x33 , 0x13 , 0x93 , 0xEB , 0x50 , 0x29 , 0xFD , 0x1B , 0x5A , 0x2F , 0xD5 , 0x08 , 0x99 , 0x64 , 0xE9 , 0x7B , 0x1A , 0xDD , 0x68 , 0x16 , 0x08 , 0xD0 , 0x13 , 0x82 , 0xB6 , 0x86 , 0x62 , 0x76 , 0xAA , 0x16 , 0x14 , 0xCC , 0x86 , 0x72 , 0x26 , 0x45 , 0x8E , 0x2A , 0x82 , 0x5B , 0x6F , 0xC1 , 0xDF , 0xAA , 0x18 , 0x43 , 0xB8 , 0xAD , 0x84 , 0x52 , 0xF2 , 0xD9 , 0x9C , 0xC0 , 0x47 , 0x52 , 0x1B , 0x8E , 0x42 , 0xC4 , 0xD3 , 0x61 , 0x7B , 0x65 , 0xA7 , 0x69 , 0x03 , 0xB5 , 0xD4 , 0x6C , 0x83 , 0x6A , 0x46 , 0x73 , 0xAF , 0x76 , 0x77 , 0x70 , 0xC2 , 0xD0 , 0x74 , 0xFE , 0x78 , 0xF5 , 0x75 , 0x3B , 0xCE , 0xE2 , 0xB6 , 0xA0 , 0x25 , 0xE9 , 0xE8 , 0x4B , 0xA2 , 0xF1 , 0x20 , 0x88 , 0x13 , 0x07 , 0xED , 0x66 , 0xBC , 0x46 , 0xA1 , 0xB3 , 0x44 , 0xAF , 0x2C , 0xED , 0x73 , 0x75 , 0x3D , 0x14 , 0x6E , 0x43 , 0x92 , 0x40 , 0x99 , 0xB0 , 0xD1 , 0xBF , 0x2C , 0x4D , 0x0F , 0x2A , 0x63 , 0xF4 , 0x85 , 0x7B , 0x1B , 0x0E , 0x48 , 0x5A , 0x06 , 0x02 , 0xA6 , 0x3D , 0x9E , 0x78 , 0x05 , 0xA8 , 0x7C , 0xAD , 0x54 , 0x49 , 0xDE , 0x7A , 0xE6 , 0x36 , 0x5C , 0x50 , 0xFC , 0x09 <S2SV_ModEnd> , 0x81 , <S2SV_ModStart> , 0x81 , 0x9E , 0x83 , 0x53 , 0x8C <S2SV_ModEnd> , 0x42 , <S2SV_ModStart> , 0x42 , 0xEF , 0x12 , 0x36 , 0x4F , 0x22 , 0x16 , 0x2A , 0x15 , 0x88 , 0x83 , 0xA9 , 0x00 , 0x66 , 0x9E , 0xD1 , 0xDC , 0x0F , 0x54 , 0xC0 , 0x32 , 0x5C , 0x4C , 0x5E , 0xE2 , 0x3D , 0xBC , 0x56 , 0x89 , 0x75 , 0x28 , 0xA3 <S2SV_ModEnd> } ; static
<S2SV_ModStart> ) == VAR_45 && VAR_150 -> VAR_137 < VAR_150 -> VAR_140
<S2SV_ModStart> VAR_5 ) { TYPE_2 VAR_6 ; if ( METHOD_3 ( VAR_4 , VAR_5 , & VAR_6 ) ) METHOD_4 ( ) ; <S2SV_ModStart> "checked_xcalloc" , ( VAR_6 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_32 ) { const TYPE_6 VAR_45 = <S2SV_ModEnd> 3 * VAR_34 <S2SV_ModStart> 4 + 1 ; TYPE_5 * VAR_43 = METHOD_9 ( VAR_45 <S2SV_ModStart> VAR_43 , VAR_37 , VAR_45
<S2SV_ModStart> ! VAR_17 ) || VAR_18 > VAR_26 <S2SV_ModStart> ) ; } if ( VAR_25 > ( TYPE_6 ) VAR_18 ) { VAR_25 = - 1 ; METHOD_4 ( VAR_23 ) ; }
<S2SV_ModStart> VAR_41 . VAR_42 , VAR_69
<S2SV_ModStart> VAR_69 ) ; METHOD_19 ( VAR_79 -> VAR_81 , VAR_80 ) ;
<S2SV_ModStart> TYPE_6 VAR_110 = METHOD_14 ( VAR_231 , VAR_229 -> VAR_232 <S2SV_ModEnd> ) ; const <S2SV_ModStart> VAR_228 ) { TYPE_6 VAR_233 = VAR_228 == 0 ? 48 : 42 ; if ( VAR_231 == 0 ) VAR_233 = 64 ; <S2SV_ModStart> VAR_229 -> VAR_26 , VAR_229 -> VAR_232 <S2SV_ModStart> VAR_231 , 0 , VAR_229 -> VAR_232 <S2SV_ModStart> ; VAR_222 -> VAR_234 [ VAR_231 ] [ VAR_228 ] = ( 1 << 16 ) / VAR_122 ; VAR_222 -> VAR_235 [ VAR_231 ] [ VAR_228 ] = ( VAR_233 <S2SV_ModEnd> * VAR_122 ) <S2SV_ModStart> >> 7 ; VAR_222 -> VAR_145 [ VAR_231 ] [ VAR_228 ] = METHOD_13 ( VAR_110 * VAR_122 , 7 ) ; VAR_222 -> VAR_152 [ VAR_231 ] [ VAR_228 ] = ( VAR_116 * VAR_122 ) >> 7 ; VAR_5 <S2SV_ModEnd> -> VAR_159 [ <S2SV_ModStart> VAR_229 -> VAR_58 , VAR_229 -> VAR_232 <S2SV_ModStart> VAR_229 -> VAR_61 , VAR_229 -> VAR_232 <S2SV_ModStart> ; VAR_222 -> uv_quant_fp [ VAR_231 ] [ VAR_228 ] = ( 1 << 16 ) / VAR_122 ; VAR_222 -> uv_round_fp [ VAR_231 ] [ VAR_228 ] = ( VAR_233 <S2SV_ModEnd> * VAR_122 ) <S2SV_ModStart> >> 7 ; VAR_222 -> VAR_180 <S2SV_ModEnd> [ VAR_231 ] <S2SV_ModStart> ; VAR_222 -> VAR_187 <S2SV_ModEnd> [ VAR_231 ] <S2SV_ModStart> >> 7 ; VAR_5 -> VAR_194 [ VAR_231 ] [ VAR_228 ] = VAR_122 ; <S2SV_ModEnd> } for ( <S2SV_ModStart> ; VAR_222 -> VAR_234 [ VAR_231 ] [ VAR_228 ] = VAR_222 -> VAR_234 [ VAR_231 ] [ 1 ] ; VAR_222 -> VAR_235 [ VAR_231 ] [ VAR_228 ] = VAR_222 -> VAR_235 [ VAR_231 ] [ 1 ] ; VAR_222 -> <S2SV_ModStart> 1 ] ; VAR_5 <S2SV_ModEnd> -> VAR_159 [ <S2SV_ModStart> VAR_228 ] = VAR_5 <S2SV_ModEnd> -> VAR_159 [ <S2SV_ModStart> ; VAR_222 -> uv_quant_fp [ VAR_231 ] [ VAR_228 ] = VAR_222 -> uv_quant_fp [ VAR_231 ] [ 1 ] ; VAR_222 -> uv_round_fp [ VAR_231 ] [ VAR_228 ] = VAR_222 -> uv_round_fp [ VAR_231 ] [ 1 ] ; VAR_222 -> <S2SV_ModStart> 1 ] ; VAR_5 <S2SV_ModEnd> -> VAR_194 [ <S2SV_ModStart> VAR_228 ] = VAR_5 <S2SV_ModEnd> -> VAR_194 [ <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> } } }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> ) { TYPE_8 * VAR_71 , * VAR_74 <S2SV_ModEnd> , * VAR_68 <S2SV_ModStart> TYPE_9 VAR_67 ; <S2SV_ModEnd> VAR_71 = METHOD_16 <S2SV_ModStart> VAR_62 ) ; <S2SV_ModEnd> VAR_62 = METHOD_17 <S2SV_ModStart> { VAR_44 : METHOD_22 ( VAR_71 ) ; <S2SV_ModEnd> return METHOD_16 ( <S2SV_ModStart> ; } } VAR_74 = METHOD_16 ( VAR_53 , VAR_60 ) ; <S2SV_ModEnd> VAR_60 = METHOD_17 <S2SV_ModStart> VAR_68 ) ; METHOD_22 ( VAR_71 ) ; METHOD_22 ( VAR_74 ) ; <S2SV_ModEnd> return VAR_75 ;
<S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 ) <S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 ) <S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 )
<S2SV_ModStart> ( VAR_53 , "<S2SV_blank>len=%u<S2SV_blank>method=%s" <S2SV_ModEnd> , VAR_51 - <S2SV_ModStart> ; if ( VAR_51 > 4 ) { if ( <S2SV_ModEnd> VAR_53 -> VAR_44 <S2SV_ModStart> VAR_53 -> VAR_44 > 1 <S2SV_ModEnd> ) { METHOD_12 <S2SV_ModStart> VAR_53 -> VAR_44 <S2SV_ModEnd> ) { if <S2SV_ModStart> VAR_52 ; } }
<S2SV_ModStart> ; if ( VAR_120 >= VAR_98 ) { METHOD_13 ( VAR_117 -> VAR_118 -> VAR_101 , VAR_102 , "ExifData" , "Tag<S2SV_blank>starts<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)" , VAR_120 , VAR_98 ) ; return 0 ; } if ( <S2SV_ModEnd> VAR_87 > VAR_98 <S2SV_ModStart> VAR_87 > VAR_98 - VAR_120 <S2SV_ModEnd> ) { METHOD_13 <S2SV_ModStart> , "ExifData" , "Tag<S2SV_blank>data<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%u)" <S2SV_ModEnd> , VAR_120 +
<S2SV_ModStart> ; VAR_94 = METHOD_11 <S2SV_ModEnd> ( VAR_98 -> <S2SV_ModStart> { VAR_94 = METHOD_11 <S2SV_ModEnd> ( VAR_94 +
<S2SV_ModStart> -> VAR_56 -> <S2SV_ModEnd> VAR_17 -> METHOD_3 <S2SV_ModStart> ( VAR_61 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_44 ) ; return VAR_65 <S2SV_ModEnd> ; } } <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> return VAR_65 ;
<S2SV_ModStart> TYPE_4 VAR_26 ; TYPE_3 VAR_32 ; <S2SV_ModStart> "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , "autoexec.cfg" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; <S2SV_ModStart> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ;
<S2SV_ModStart> * VAR_19 ; METHOD_2 ( & VAR_20 ) ; <S2SV_ModStart> ; if ( VAR_19 ) { <S2SV_ModEnd> VAR_23 -> VAR_10 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_23 <S2SV_ModStart> ) ; } METHOD_8 ( & VAR_20 ) ; }
<S2SV_ModStart> TYPE_6 VAR_19 ; if ( VAR_24 < 4 ) { METHOD_7 ( "Process_ipfix<S2SV_blank>[%u]<S2SV_blank>Template<S2SV_blank>withdraw<S2SV_blank>size<S2SV_blank>error<S2SV_blank>at<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%u" , VAR_18 -> VAR_25 . VAR_19 , VAR_26 , VAR_27 , METHOD_6 ( VAR_28 ) ) ; VAR_24 = 0 ; continue ; }
<S2SV_ModStart> 1 ) { if ( ! VAR_32 -> VAR_33 ) { METHOD_6 ( VAR_28 , "Bad<S2SV_blank>ICC<S2SV_blank>profile<S2SV_blank>segment" ) ; return ; }
<S2SV_ModStart> ; TYPE_4 VAR_79 = VAR_85 ; TYPE_4 VAR_81 = VAR_85 <S2SV_ModEnd> ; TYPE_5 VAR_80 <S2SV_ModStart> ) ; } VAR_82 : METHOD_14 ( & VAR_80 , & VAR_79 ) ; METHOD_14 ( & VAR_80 , & VAR_81 ) ; <S2SV_ModEnd> METHOD_15 ( VAR_83
<S2SV_ModStart> VAR_19 ; TYPE_6 <S2SV_ModEnd> VAR_128 ; if <S2SV_ModStart> VAR_60 ; } if ( VAR_78 >= VAR_77 - VAR_58 <S2SV_ModEnd> ) return -
<S2SV_ModStart> } else { TYPE_5 VAR_74 ; TYPE_5 <S2SV_ModEnd> VAR_93 = 0 <S2SV_ModStart> = 0 ; TYPE_5 <S2SV_ModEnd> VAR_83 = VAR_168 <S2SV_ModStart> ++ ) { if ( VAR_74 > VAR_168 -> VAR_50 ) { VAR_177 = 0 ; break ; }
<S2SV_ModStart> VAR_6 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_15 , <S2SV_ModStart> 1 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_16 ,
<S2SV_ModStart> TYPE_2 * VAR_35 , const TYPE_2 * * VAR_34 ) { if ( ! VAR_35 ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> == \'\\"\' ) { <S2SV_ModStart> VAR_32 , VAR_35 , VAR_34 ) ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> '9' ) ) { <S2SV_ModStart> VAR_35 ) ; } <S2SV_ModStart> == '[' ) { <S2SV_ModStart> VAR_32 , VAR_35 , VAR_34 ) ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> == '{' ) { <S2SV_ModStart> VAR_32 , VAR_35 , VAR_34 ) ; } * VAR_34 = VAR_35 ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ; if ( METHOD_6 ( VAR_23 ) ) return - VAR_26 ; if (
<S2SV_ModStart> VAR_60 ; } if ( METHOD_26 ( ! METHOD_25 ( * STRUCT_OR_UNION_9 ) ) ) { VAR_62 = - VAR_63 ; goto VAR_60 ; } <S2SV_ModEnd> VAR_58 : VAR_62
<S2SV_ModStart> VAR_126 , VAR_117 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_11 ) ; if ( ( STRUCT_OR_UNION_11 -> VAR_33 < VAR_34 ) || ( STRUCT_OR_UNION_11 -> VAR_33 > VAR_35 ) ) { METHOD_8 ( & VAR_5 -> VAR_36 , "%s:<S2SV_blank>invalid<S2SV_blank>device<S2SV_blank>index:%d\\n" , VAR_10 , STRUCT_OR_UNION_11 -> VAR_33 ) ; return VAR_9 ; }
<S2SV_ModStart> VAR_0 , "usage:<S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>[-Dd]<S2SV_blank>[-a<S2SV_blank>bind_address]<S2SV_blank>[-E<S2SV_blank>fingerprint_hash]\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-P<S2SV_blank>pkcs11_whitelist]<S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n" <S2SV_ModEnd> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>-k\\n" ) ;
<S2SV_ModStart> VAR_4 ) { TYPE_3 VAR_14 ; <S2SV_ModStart> - 1 ; if ( VAR_11 -> VAR_15 -> VAR_16 == 0 ) { VAR_14 = METHOD_2 ( VAR_17 ) ; }
<S2SV_ModStart> TYPE_8 VAR_90 [ VAR_99 <S2SV_ModEnd> ] ; TYPE_8 <S2SV_ModStart> ( VAR_90 , VAR_99 <S2SV_ModEnd> , "%s.data.%d" , <S2SV_ModStart> ( VAR_90 , VAR_99 <S2SV_ModEnd> , "%f<S2SV_blank>%f\\n" ,
<S2SV_ModStart> VAR_58 - 1 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> TYPE_4 VAR_41 ; TYPE_2 VAR_47 ; struct STRUCT_OR_UNION_2 * VAR_48 = VAR_3 ; <S2SV_ModStart> ; } } VAR_48 -> VAR_47 = VAR_46 ; if ( ! VAR_49 && ( ! VAR_25 || ! VAR_25 -> VAR_49 ) ) return 0 ; VAR_41 = METHOD_22 ( VAR_44 , VAR_45 , & VAR_47 ) ; if ( VAR_41 || VAR_47 == VAR_46 ) return VAR_41 ; VAR_46 &= VAR_50 ; VAR_46 |= VAR_47 & ~ VAR_50 ;
<S2SV_ModStart> * VAR_89 >= 91 <S2SV_ModEnd> && VAR_99 [ <S2SV_ModStart> * VAR_89 >= 51 <S2SV_ModEnd> && VAR_99 [
<S2SV_ModStart> "localhost." ) || <S2SV_ModEnd> ! METHOD_29 (
<S2SV_ModStart> ; if ( ( VAR_114 -> VAR_109 * VAR_114 -> VAR_116 + 7 ) / 8 <S2SV_ModEnd> > VAR_114 -> <S2SV_ModStart> VAR_114 -> VAR_77 <S2SV_ModEnd> ) { VAR_114 <S2SV_ModStart> 1 ; } VAR_56 = VAR_32 ; for ( ; ; ) { if ( VAR_77 < 1 ) return VAR_56 - VAR_32 ; if ( ( * VAR_56 & 0xC0 ) == 0xC0 ) { if ( VAR_77 < 2 ) return VAR_56 - VAR_32 ; VAR_48 = VAR_56 [ 0 ] & 0x3F ; while ( VAR_48 > 0 ) { if ( VAR_114 -> VAR_111 >= VAR_114 -> VAR_77 ) { VAR_114 -> VAR_41 = VAR_42 ; break ; } VAR_114 -> VAR_107 [ VAR_114 -> VAR_111 ++ ] = VAR_56 [ 1 ] ; VAR_48 -- ; } VAR_56 += 2 ; VAR_77 -= 2 ; } else { VAR_114 -> VAR_107 [ VAR_114 -> VAR_111 ++ ] = VAR_56 [ 0 ] ; VAR_56 ++ ; VAR_77 -- ; } if ( VAR_114 -> VAR_111 >= VAR_114 -> VAR_77 ) { if ( VAR_114 -> VAR_77 % VAR_114 -> VAR_109 && VAR_114 -> VAR_77 > VAR_114 -> VAR_109 ) { TYPE_9 VAR_82 = VAR_114 -> VAR_77 / VAR_114 -> VAR_109 ; TYPE_9 VAR_92 = VAR_114 -> VAR_77 / VAR_82 ; TYPE_9 VAR_91 ; for ( VAR_91 = 1 ; VAR_91 < VAR_82 ; VAR_91 ++ ) { METHOD_3 ( & VAR_114 -> VAR_107 [ VAR_91 * VAR_114 -> VAR_109 ] , & VAR_114 -> VAR_107 [ VAR_91 * VAR_92 ] , VAR_114 -> VAR_109 ) ; } } VAR_114 -> METHOD_4 ( ( TYPE_10 * ) VAR_104 -> VAR_97 [ VAR_114 -> VAR_113 + VAR_114 -> VAR_101 ] + VAR_114 -> VAR_103 * VAR_104 -> VAR_105 , VAR_114 -> VAR_107 , VAR_114 -> VAR_109 ) ; VAR_114 -> VAR_111 = 0 ; if ( ++ VAR_114 -> VAR_113 >= VAR_114 -> VAR_115 ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> 1 ; } <S2SV_ModEnd> } } }
<S2SV_ModStart> ; VAR_127 = METHOD_37 <S2SV_ModEnd> ( METHOD_21 (
<S2SV_ModStart> ) ) , VAR_62 <S2SV_ModEnd> ) ; METHOD_67 <S2SV_ModStart> , "/" , 1 <S2SV_ModEnd> ) ; METHOD_67 <S2SV_ModStart> ) ) , VAR_75 <S2SV_ModEnd> ) ; METHOD_70
<S2SV_ModStart> ; if ( METHOD_6 ( <S2SV_ModStart> 1 , 500 ) <S2SV_ModStart> ( VAR_20 = METHOD_6 ( <S2SV_ModStart> VAR_17 , VAR_18 )
<S2SV_ModStart> { VAR_66 = METHOD_14 <S2SV_ModEnd> ( VAR_67 -> <S2SV_ModStart> VAR_67 -> VAR_17 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_47 ) ; VAR_46 -> VAR_47 = VAR_49 ;
<S2SV_ModStart> ( ) { METHOD_6 ( "heap_overflow_1.tga" ) ; METHOD_6 ( "heap_overflow_2.tga" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> STRUCT_OR_UNION_17 ) { struct STRUCT_OR_UNION_10 * VAR_55 ; TYPE_2 <S2SV_ModEnd> VAR_29 , VAR_77 <S2SV_ModStart> ) ) ; TYPE_0 VAR_84 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = VAR_29 ; VAR_84 = METHOD_11 ( STRUCT_OR_UNION_17 , VAR_55 , VAR_77 , 0x00 ) ; if ( VAR_84 ) return VAR_84 ; <S2SV_ModEnd> METHOD_10 ( "CORE_RD[%u]<S2SV_blank>-<S2SV_blank>Built<S2SV_blank>Ramdisk<S2SV_blank>Device<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>space<S2SV_blank>of"
<S2SV_ModStart> TYPE_3 VAR_152 [ VAR_168 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript<S2SV_blank>eps;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>x" ) <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>y" ) <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" ,
<S2SV_ModStart> VAR_3 ) { METHOD_1 ( VAR_4 <S2SV_ModEnd> , "<S2SV_blank>%12.3f<S2SV_blank>w" , <S2SV_ModStart> VAR_3 ) ; METHOD_2 ( VAR_4 ) ;
<S2SV_ModStart> , VAR_89 , VAR_91 ,
<S2SV_ModStart> VAR_60 ) ; <S2SV_ModEnd> VAR_61 -> VAR_62 <S2SV_ModStart> VAR_63 ) ; }
<S2SV_ModStart> ; } else return
<S2SV_ModStart> & 0x1F ; if ( VAR_58 -> VAR_10 < VAR_57 * 4 ) VAR_58 -> VAR_46 = 0 ; else
<S2SV_ModStart> = VAR_345 ; if ( VAR_871 > METHOD_193 ( VAR_955 ) ) METHOD_194 ( VAR_967 , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> -> VAR_47 ; METHOD_4 ( & VAR_75 , 0 , sizeof ( VAR_75 ) ) ;
<S2SV_ModStart> * VAR_26 ; TYPE_2 VAR_28 ; <S2SV_ModStart> = VAR_22 ; for ( VAR_28 = 0 ; VAR_28 < VAR_27 / sizeof ( struct STRUCT_OR_UNION_8 ) ; VAR_28 ++ ) if ( ! METHOD_3 ( VAR_26 + VAR_28 ) ) return - VAR_13 ;
<S2SV_ModStart> TYPE_5 VAR_18 [ 50 <S2SV_ModEnd> ] , *
<S2SV_ModStart> 'R' ) : if ( VAR_331 -> VAR_332 . VAR_94 . VAR_90 + VAR_349 ( struct STRUCT_OR_UNION_9 , VAR_332 . VAR_94 . VAR_95 ) > VAR_331 -> VAR_227 ) goto VAR_348 ;
<S2SV_ModStart> goto VAR_39 ; <S2SV_ModEnd> if ( VAR_38
<S2SV_ModStart> ) ) { METHOD_8 ( VAR_96 ) ;
<S2SV_ModStart> TYPE_4 METHOD_0 ( <S2SV_ModEnd> const TYPE_2 * <S2SV_ModStart> ; do { <S2SV_ModEnd> VAR_16 = VAR_16
<S2SV_ModStart> VAR_4 ) ) ; VAR_13 * VAR_14 ; VAR_13 * VAR_15 ; VAR_13 * VAR_16 <S2SV_ModStart> "}\\n" ) ; VAR_14 = METHOD_13 ( "/tmp/rs-filter-graph.%u" , METHOD_12 ( ) ) ; VAR_15 = METHOD_13 ( "%s.%u.png" , VAR_14 , METHOD_12 ( ) ) ; METHOD_6 ( VAR_14 <S2SV_ModEnd> , VAR_11 -> <S2SV_ModStart> VAR_10 ) ; VAR_16 = METHOD_13 ( "dot<S2SV_blank>-Tpng<S2SV_blank>>%s<S2SV_blank><%s" , VAR_15 , VAR_14 ) ; <S2SV_ModStart> != METHOD_9 ( VAR_16 <S2SV_ModEnd> ) ) METHOD_10 <S2SV_ModStart> "Calling<S2SV_blank>dot<S2SV_blank>failed" ) ; METHOD_14 ( VAR_16 ) ; VAR_16 = METHOD_13 ( "gnome-open<S2SV_blank>%s" , VAR_15 ) ; <S2SV_ModStart> != METHOD_9 ( VAR_16 <S2SV_ModEnd> ) ) METHOD_10 <S2SV_ModStart> METHOD_10 ( "Calling<S2SV_blank>gnome-open<S2SV_blank>failed." ) ; METHOD_14 ( VAR_16 ) ; METHOD_14 ( VAR_14 ) ; METHOD_14 ( VAR_15
<S2SV_ModStart> ( VAR_38 = METHOD_16 ( <S2SV_ModStart> VAR_7 , VAR_6 ) <S2SV_ModStart> ( VAR_27 = METHOD_16 ( <S2SV_ModStart> VAR_23 ) ) ) <S2SV_ModStart> TYPE_4 VAR_34 = METHOD_16 ( <S2SV_ModStart> , 0 ) ) ; METHOD_16 ( <S2SV_ModEnd> METHOD_13 ( VAR_38 <S2SV_ModStart> | VAR_35 ) )
<S2SV_ModStart> VAR_49 ) { if ( METHOD_1 ( VAR_49 ) ) { <S2SV_ModEnd> return ( VAR_49 <S2SV_ModStart> -> VAR_24 ; if ( <S2SV_ModEnd> ( VAR_49 -> <S2SV_ModStart> ( VAR_49 -> VAR_52 . VAR_53 == 2 ) && VAR_49 -> multi_arf_allowed ) { const TYPE_4 * const VAR_54 = & VAR_49 -> VAR_55 . VAR_54 <S2SV_ModEnd> ; VAR_51 = <S2SV_ModStart> ; VAR_51 = VAR_54 -> VAR_56 [ VAR_54 -> VAR_57 <S2SV_ModEnd> ] ; } <S2SV_ModStart> ] ; } <S2SV_ModEnd> return ( VAR_49
<S2SV_ModStart> * STRUCT_OR_UNION_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> return - VAR_21 ; if ( ! METHOD_5 ( & VAR_29 ) ) return - VAR_26
<S2SV_ModStart> goto VAR_165 ; VAR_166 -> VAR_120 = METHOD_14 ( VAR_142 ) ; VAR_166 -> VAR_123 = 0 ; VAR_166 -> VAR_125 = VAR_166 -> VAR_127 = 0 ; VAR_166 -> VAR_129 = METHOD_15 ( ) ; VAR_166 -> VAR_131 = VAR_162 ; VAR_166 -> VAR_134 = 0 ; VAR_166 -> VAR_136 = STRUCT_OR_UNION_13 ; VAR_166 -> VAR_138 = VAR_142 ; <S2SV_ModStart> VAR_159 ; } <S2SV_ModEnd> METHOD_16 ( &
<S2SV_ModStart> -> VAR_13 . VAR_131 . VAR_131 . <S2SV_ModStart> VAR_12 -> VAR_13 . VAR_131 . VAR_131
<S2SV_ModStart> VAR_45 ) ; METHOD_11 ( VAR_39 , sizeof ( VAR_39 ) <S2SV_ModEnd> , "%d.%d.%d.%d" ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; VAR_44 = METHOD_4 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> . VAR_11 = VAR_36 -> VAR_39 <S2SV_ModEnd> ; VAR_31 . <S2SV_ModStart> . VAR_13 = VAR_36 -> VAR_40 <S2SV_ModEnd> ; VAR_38 =
<S2SV_ModStart> VAR_48 ) ; METHOD_20 ( & VAR_47 -> VAR_59 , VAR_60 ) ;
<S2SV_ModStart> <S2SV_null> static struct STRUCT_OR_UNION_2 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> sizeof ( struct STRUCT_OR_UNION_2 <S2SV_ModEnd> ) + (
<S2SV_ModStart> -> VAR_349 ; if ( ! VAR_357 ) goto VAR_360 ; <S2SV_ModStart> METHOD_53 ( ! VAR_357 <S2SV_ModEnd> ) ; VAR_356
<S2SV_ModStart> VAR_11 -> VAR_8 ; if ( VAR_11 -> VAR_12 == 0 ) return - VAR_25
<S2SV_ModStart> <= * VAR_24 && VAR_20 > 0
<S2SV_ModStart> } } return METHOD_8 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> = 0 ; unsigned TYPE_9 VAR_172 ; <S2SV_ModStart> return - VAR_7 ; if ( VAR_22 < VAR_173 || VAR_22 > VAR_174 ) return - VAR_168 <S2SV_ModStart> VAR_168 ; } VAR_172 = VAR_17 [ METHOD_6 ( VAR_22 ) ] ; if ( VAR_172 > 128 ) return - VAR_168 ; <S2SV_ModStart> , VAR_162 , VAR_172 <S2SV_ModEnd> ) != 0
<S2SV_ModStart> VAR_24 == VAR_97 || METHOD_30 ( VAR_120 , VAR_24 , VAR_123 )
<S2SV_ModStart> ) { TYPE_5 VAR_75 ; TYPE_5 <S2SV_ModStart> ; } } VAR_75 = <S2SV_ModEnd> METHOD_3 ( VAR_72 <S2SV_ModStart> , VAR_27 ) ; if ( VAR_75 < 0 ) METHOD_13 ( VAR_74 , "regexec<S2SV_blank>failed" ) ; if ( VAR_75 == 0
<S2SV_ModStart> ) goto VAR_51 <S2SV_ModEnd> ; VAR_48 =
<S2SV_ModStart> * VAR_33 ; TYPE_2 VAR_36 = VAR_34 & ( VAR_37 | VAR_38 ) ; <S2SV_ModStart> , & STRUCT_OR_UNION_17 , VAR_36 <S2SV_ModStart> STRUCT_OR_UNION_17 , VAR_33 , VAR_36 <S2SV_ModStart> , VAR_33 , VAR_36 <S2SV_ModEnd> ) ; VAR_35
<S2SV_ModStart> -> VAR_6 ; const <S2SV_ModStart> = VAR_6 -> VAR_11 <S2SV_ModEnd> * VAR_8 ;
<S2SV_ModStart> VAR_5 ) ; METHOD_4 ( & VAR_13 ) ; <S2SV_ModStart> VAR_12 ) ) { VAR_12 = VAR_10 ; goto VAR_14 ; } <S2SV_ModEnd> METHOD_3 ( VAR_12 <S2SV_ModStart> METHOD_3 ( VAR_12 ) ; VAR_14 : METHOD_5 ( & VAR_13
<S2SV_ModStart> 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; if ( ! METHOD_9 ( VAR_31 , VAR_32 ) ) return METHOD_2 ( VAR_31 , 0 , "Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack."
<S2SV_ModStart> -> VAR_224 -> VAR_230 <S2SV_ModEnd> != VAR_224 -> <S2SV_ModStart> != VAR_224 -> VAR_230 ) goto VAR_222 ; if ( VAR_192 -> TYPE_34 != VAR_226 -> TYPE_34 <S2SV_ModEnd> ) goto VAR_222
<S2SV_ModStart> goto VAR_57 ; VAR_61 = METHOD_18 ( METHOD_15 ( VAR_59 ) -> VAR_54 , VAR_59 -> VAR_62 , VAR_46 , VAR_47 ) ; if ( VAR_61 ) goto VAR_57 ;
<S2SV_ModStart> * VAR_18 , const struct STRUCT_OR_UNION_0 * VAR_38 <S2SV_ModEnd> , TYPE_8 VAR_9 <S2SV_ModStart> VAR_37 ) { unsigned TYPE_8 VAR_34 , VAR_35 ; VAR_39 * VAR_40 ; <S2SV_ModStart> const TYPE_6 * VAR_41 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> VAR_7 ) ; METHOD_4 ( VAR_41 != VAR_42 ) ; VAR_40 = & VAR_41 -> VAR_30 [ <S2SV_ModEnd> VAR_9 * VAR_14 <S2SV_ModStart> VAR_9 * VAR_14 * VAR_41 <S2SV_ModEnd> -> VAR_33 + <S2SV_ModStart> -> VAR_33 + <S2SV_ModEnd> VAR_13 * VAR_14 <S2SV_ModStart> VAR_13 * VAR_14 ] <S2SV_ModEnd> ; VAR_35 = <S2SV_ModStart> . METHOD_2 ( VAR_38 -> VAR_24 , VAR_38 -> VAR_28 , VAR_40 , VAR_41 <S2SV_ModEnd> -> VAR_33 ,
<S2SV_ModStart> METHOD_0 ( TYPE_1 VAR_3 , TYPE_1 <S2SV_ModStart> VAR_2 ) { TYPE_1 VAR_4 ; if ( METHOD_3 ( VAR_3 , VAR_2 , & VAR_4 ) ) METHOD_4 ( ) ; <S2SV_ModStart> ( "checked_xmalloc" , VAR_4 <S2SV_ModEnd> ) ; return <S2SV_ModStart> return METHOD_2 ( VAR_3 ,
<S2SV_ModStart> TYPE_3 VAR_12 ; if ( VAR_13 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_gobble" ) ; }
<S2SV_ModStart> ) if ( ++ VAR_76 <S2SV_ModEnd> != VAR_131 [ <S2SV_ModStart> ) if ( ++ VAR_76 <S2SV_ModEnd> != VAR_131 [
<S2SV_ModStart> VAR_64 ) ; if ( METHOD_14 ( VAR_83 -> VAR_63 ) == - 1 ) { VAR_84 = VAR_18 ; goto VAR_71 ; }
<S2SV_ModStart> VAR_13 ) ; if ( ! <S2SV_ModStart> , VAR_23 ) ) return 0
<S2SV_ModStart> -> VAR_47 = ( 1 << VAR_83 ) - 1 ;
<S2SV_ModStart> ; if ( VAR_16 -> VAR_133 ) goto VAR_134 ; if ( <S2SV_ModStart> ) ; } VAR_134 :
<S2SV_ModStart> VAR_16 ) { TYPE_4 <S2SV_ModEnd> * VAR_15 ; <S2SV_ModStart> VAR_15 = ( TYPE_4 <S2SV_ModEnd> * ) VAR_16 <S2SV_ModStart> METHOD_3 ( VAR_15 <S2SV_ModEnd> ) ; VAR_16
<S2SV_ModStart> VAR_22 ) ; METHOD_11 <S2SV_ModEnd> ( VAR_21 -> <S2SV_ModStart> , VAR_16 , sizeof ( VAR_21 -> VAR_16 ) ) ; METHOD_11 <S2SV_ModEnd> ( VAR_21 -> <S2SV_ModStart> , VAR_20 , sizeof ( VAR_21 -> VAR_18 ) <S2SV_ModEnd> ) ; METHOD_10
<S2SV_ModStart> STRUCT_OR_UNION_17 ) { struct STRUCT_OR_UNION_10 * VAR_55 ; TYPE_2 <S2SV_ModEnd> VAR_29 , VAR_77 <S2SV_ModStart> ) ) ; TYPE_0 VAR_84 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = VAR_29 ; VAR_84 = METHOD_11 ( STRUCT_OR_UNION_17 , VAR_55 , VAR_77 , 0x00 ) ; if ( VAR_84 ) return VAR_84 ; <S2SV_ModEnd> METHOD_10 ( "CORE_RD[%u]<S2SV_blank>-<S2SV_blank>Built<S2SV_blank>Ramdisk<S2SV_blank>Device<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>space<S2SV_blank>of"
<S2SV_ModStart> = VAR_1574 ; break <S2SV_ModEnd> ; } VAR_1576
<S2SV_ModStart> VAR_114 ; } if ( METHOD_25 ( METHOD_14 ( VAR_109 . VAR_80 ) , VAR_109 . VAR_108 ) ) METHOD_6 ( VAR_100 , ( METHOD_26 ( VAR_116 ) , METHOD_7 ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> ; VAR_71 = METHOD_22 <S2SV_ModEnd> ( VAR_45 +
<S2SV_ModStart> TYPE_3 METHOD_0 ( TYPE_4 <S2SV_ModEnd> VAR_8 , TYPE_2
<S2SV_ModStart> { VAR_56 = METHOD_7 <S2SV_ModEnd> ( METHOD_4 ( <S2SV_ModStart> ; VAR_56 = METHOD_7 <S2SV_ModEnd> ( VAR_38 )
<S2SV_ModStart> [ VAR_13 + VAR_11 <S2SV_ModEnd> ] ; TYPE_11 <S2SV_ModStart> ( VAR_28 ) > VAR_13 <S2SV_ModEnd> ) { VAR_49
<S2SV_ModStart> VAR_11 ) ; METHOD_5 ( & VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) ;
<S2SV_ModStart> VAR_98 , VAR_93 , VAR_99 <S2SV_ModStart> = VAR_95 ; VAR_99 <S2SV_ModEnd> = VAR_77 -> <S2SV_ModStart> VAR_79 ) { TYPE_7 VAR_100 = sizeof ( "YYMMDDHHMMZ" ) - 1 ; TYPE_7 VAR_101 = sizeof ( "YYMMDDHHMMSS+hhmm" ) - 1 ; if ( VAR_99 < VAR_100 || VAR_99 > VAR_101 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 10 ; VAR_99 -= 10 ; <S2SV_ModStart> } else { TYPE_7 VAR_100 = sizeof ( "YYYYMMDDHHMMZ" ) - 1 ; TYPE_7 VAR_101 = sizeof ( "YYYYMMDDHHMMSS.fff+hhmm" ) - 1 ; if ( VAR_99 < VAR_100 || VAR_99 > VAR_101 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 12 ; VAR_99 -= 12 ; <S2SV_ModStart> } else { if ( VAR_99 < 2 ) return 0 ; * ( VAR_47 ++ ) = * ( VAR_58 ++ ) ; * ( VAR_47 ++ ) = * ( VAR_58 ++ ) ; VAR_99 -= 2 ; if ( VAR_99 && <S2SV_ModEnd> * VAR_58 == <S2SV_ModStart> VAR_58 ++ ; VAR_99 -- ; for ( VAR_98 = 0 ; VAR_98 < 3 && VAR_99 ; VAR_98 ++ , VAR_58 ++ , VAR_99 -- ) { if ( * VAR_58 < '0' || * VAR_58 > '9' ) break ; } <S2SV_ModEnd> } } * <S2SV_ModStart> ; if ( ! VAR_99 ) return 0 ; if ( <S2SV_ModStart> == 'Z' ) { if ( VAR_99 != 1 ) return 0 ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> != '-' ) ) return 0 ; if ( VAR_99 != 5 ) return 0 ; if ( VAR_58 [ 1 ] < '0' || VAR_58 [ 1 ] > '9' || VAR_58 [ 2 ] < '0' || VAR_58 [ 2 ] > '9' || VAR_58 [ 3 ] < '0' || VAR_58 [ 3 ] > '9' || VAR_58 [ 4 ] < '0' || VAR_58 [ 4 ] > '9'
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_0 * ) VAR_2 ) ;
<S2SV_ModStart> ! ( VAR_19 & <S2SV_ModEnd> VAR_20 ) )
<S2SV_ModStart> ; TYPE_5 VAR_125 = VAR_131 ; TYPE_5 VAR_127 = VAR_131 <S2SV_ModEnd> ; TYPE_6 VAR_126 <S2SV_ModStart> ) ; } VAR_128 : METHOD_17 ( & VAR_126 , & VAR_125 ) ; METHOD_17 ( & VAR_126 , & VAR_127 ) ; <S2SV_ModEnd> METHOD_18 ( VAR_129
<S2SV_ModStart> VAR_42 ++ ; VAR_95 -> VAR_102 = VAR_42 ;
<S2SV_ModStart> ( VAR_43 , "%s" , VAR_44 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> * VAR_26 , TYPE_3 VAR_32 <S2SV_ModEnd> , struct STRUCT_OR_UNION_2 <S2SV_ModStart> . VAR_7 = 0 ; VAR_26 -> VAR_6 . VAR_32 = VAR_32 <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> , VAR_31 , VAR_32 <S2SV_ModEnd> ) ; *
<S2SV_ModStart> VAR_37 ) ; VAR_75 -> VAR_80 = VAR_70 -> VAR_80 ;
<S2SV_ModStart> VAR_66 ) ; VAR_66 -> VAR_67 = 1 ; <S2SV_ModStart> } METHOD_8 ( <S2SV_ModEnd> VAR_39 == VAR_40
<S2SV_ModStart> if ( VAR_25 + VAR_27 <S2SV_ModStart> "u\\n" , VAR_25 + VAR_27
<S2SV_ModStart> , VAR_233 ) TYPE_29 VAR_258 = VAR_250 -> VAR_160 ; if ( VAR_258 < 1 ) { METHOD_48 ( VAR_245 ) ; goto VAR_254 ; } VAR_213 += VAR_258 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ) { TYPE_14 VAR_92 ; TYPE_14 <S2SV_ModStart> 2 ] ; <S2SV_ModEnd> TYPE_12 VAR_34 [ <S2SV_ModStart> = 0 ; TYPE_14 <S2SV_ModEnd> VAR_122 = 0 <S2SV_ModStart> ( VAR_77 , "%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9d:%12s->%12s/" <S2SV_ModEnd> , & VAR_50 <S2SV_ModStart> return - 1 ; } if ( VAR_92 < 0 ) { * VAR_93 = VAR_94 ; * VAR_95 = METHOD_12 ( "netscreen:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length" ) ; return VAR_96
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_54 <S2SV_ModEnd> ; TYPE_4 VAR_57 <S2SV_ModStart> ) ; } METHOD_13 ( ) ; VAR_54 = METHOD_2 ( VAR_58 ) ; if ( ! VAR_54 ) { METHOD_14 ( ) ; return - VAR_20 ; } <S2SV_ModStart> VAR_55 ) ; METHOD_14 ( ) ;
<S2SV_ModStart> ( * VAR_105 ) ) ; METHOD_2 ( VAR_19 , 0 , sizeof ( * VAR_19
<S2SV_ModStart> * VAR_226 = <S2SV_ModEnd> VAR_145 -> VAR_226 <S2SV_ModStart> VAR_234 ] = METHOD_17 <S2SV_ModEnd> ( VAR_229 -> <S2SV_ModStart> VAR_234 ] = METHOD_17 <S2SV_ModEnd> ( VAR_229 -> <S2SV_ModStart> VAR_234 ] = METHOD_17 <S2SV_ModEnd> ( VAR_229 -> <S2SV_ModStart> VAR_221 ] = METHOD_17 ( <S2SV_ModEnd> VAR_229 -> VAR_65 <S2SV_ModStart> VAR_234 ++ ) METHOD_18 <S2SV_ModEnd> ( VAR_76 , <S2SV_ModStart> VAR_234 ++ ) METHOD_18 <S2SV_ModEnd> ( VAR_104 , <S2SV_ModStart> ++ VAR_234 ) METHOD_18 <S2SV_ModEnd> ( VAR_104 , <S2SV_ModStart> VAR_234 ++ ) METHOD_18 <S2SV_ModEnd> ( VAR_118 , <S2SV_ModStart> VAR_234 ++ ) METHOD_18 <S2SV_ModEnd> ( VAR_135 , <S2SV_ModStart> VAR_221 ] = METHOD_17 ( <S2SV_ModEnd> VAR_229 -> VAR_216 <S2SV_ModStart> VAR_221 ] = METHOD_17 ( <S2SV_ModEnd> VAR_229 -> VAR_216 <S2SV_ModStart> VAR_221 ] = METHOD_17 ( <S2SV_ModEnd> VAR_229 -> VAR_216 <S2SV_ModStart> VAR_234 ] = METHOD_17 ( <S2SV_ModEnd> VAR_229 -> VAR_230
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_25 ; if ( VAR_20 -> VAR_21 >= VAR_29 - VAR_26 ) VAR_20 -> VAR_21 = 0
<S2SV_ModStart> -> VAR_113 ; <S2SV_ModEnd> TYPE_3 VAR_117 , <S2SV_ModStart> ; struct STRUCT_OR_UNION_3 <S2SV_ModEnd> VAR_132 ; TYPE_5 <S2SV_ModStart> ! VAR_159 -> VAR_162 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 2 ; if ( METHOD_15 ( METHOD_21 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_163 , & VAR_132 , sizeof ( VAR_132 ) ) ) ) return 0 <S2SV_ModEnd> ; VAR_148 = <S2SV_ModStart> = ( VAR_132 . <S2SV_ModEnd> VAR_147 & VAR_138 <S2SV_ModStart> = VAR_148 ; METHOD_22 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_163 , <S2SV_ModEnd> & VAR_159 -> <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> METHOD_0 ( const TYPE_8 <S2SV_ModEnd> * VAR_22 , <S2SV_ModStart> VAR_22 , const TYPE_8 <S2SV_ModEnd> * VAR_14 ,
<S2SV_ModStart> ; if ( METHOD_15 ( STRUCT_OR_UNION_8 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> TYPE_4 * VAR_22 , TYPE_4 VAR_24 <S2SV_ModStart> VAR_9 ) { if ( VAR_23 >= VAR_24 ) { * VAR_19 = 0 ; * VAR_22 = VAR_24 + 1 ; return ; }
<S2SV_ModStart> ; VAR_52 = METHOD_13 ( <S2SV_ModStart> VAR_32 -> VAR_31 , sizeof VAR_35 )
<S2SV_ModStart> return VAR_8 ; if ( METHOD_4 ( VAR_6 ) -> METHOD_5 ) return METHOD_4 ( VAR_6 ) -> METHOD_5 ( & VAR_4 -> VAR_10 ) ; else
<S2SV_ModStart> ; if ( VAR_46 -> VAR_35 && VAR_51 < 11 ) return VAR_52 ; if ( <S2SV_ModStart> ++ ) { if ( METHOD_14 ( VAR_50 ) ) return VAR_52 ;
<S2SV_ModStart> TYPE_3 VAR_10 = 0.25 <S2SV_ModEnd> ; const TYPE_4 <S2SV_ModStart> ( VAR_8 -> VAR_13 <S2SV_ModEnd> < VAR_10 *
<S2SV_ModStart> TYPE_6 VAR_46 , VAR_53 ; VAR_53 = METHOD_4 ( METHOD_8 ( VAR_48 ) , <S2SV_ModEnd> ( TYPE_6 ) <S2SV_ModStart> ( VAR_8 ) ) <S2SV_ModStart> ) METHOD_5 ( VAR_53 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VAR_42 ) ; VAR_46 = VAR_48 -> VAR_46 ; for ( VAR_29 = VAR_48 ; VAR_29 != ( TYPE_11 * ) VAR_42 ; VAR_29 = VAR_29 -> VAR_29 ) VAR_46 = METHOD_4 ( VAR_29 -> VAR_46 , VAR_46 ) ; for ( VAR_50 = 0 <S2SV_ModEnd> ; VAR_50 < <S2SV_ModStart> ( TYPE_15 ) VAR_53 <S2SV_ModEnd> ; VAR_50 ++
<S2SV_ModStart> VAR_37 = VAR_30 "/lxc/lock/var/lib/lxc/" <S2SV_ModEnd> ; VAR_40 =
<S2SV_ModStart> ; VAR_13 = METHOD_6 ( <S2SV_ModStart> ) , 0 )
<S2SV_ModStart> VAR_137 = VAR_33 ; TYPE_5 VAR_132 ; TYPE_5 VAR_138 ; TYPE_5 VAR_139 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_2 <S2SV_ModStart> VAR_28 ) { METHOD_3 ( VAR_130 + VAR_118 -> VAR_28 , 0 , VAR_31 - VAR_118 -> VAR_28 ) ; <S2SV_ModStart> VAR_33 ) ; VAR_31 = VAR_138 - VAR_33 ; <S2SV_ModStart> ; } } VAR_139 = VAR_31 ; <S2SV_ModStart> 0 ] ; if ( VAR_125 -> VAR_50 < 1 || VAR_132 > VAR_125 -> VAR_50 - 1 || VAR_132 > VAR_139 ) { METHOD_13 ( "<S2SV_blank>Not<S2SV_blank>enough<S2SV_blank>buffer<S2SV_blank>size" ) ; return - 1 ; } <S2SV_ModStart> += VAR_132 ; VAR_139 -= VAR_132 ;
<S2SV_ModStart> } } } <S2SV_ModEnd> METHOD_2 ( VAR_44
<S2SV_ModStart> ) { static <S2SV_ModEnd> TYPE_5 VAR_35 = <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( METHOD_3 <S2SV_ModStart> } if ( VAR_62 != 0 ) { METHOD_7 ( "Giving<S2SV_blank>access<S2SV_blank>to<S2SV_blank>group<S2SV_blank>%u" , VAR_35 ) ; METHOD_8 ( VAR_64 , - 1 <S2SV_ModEnd> , VAR_35 ,
<S2SV_ModStart> VAR_11 == VAR_12 && VAR_20 -> VAR_14 . VAR_15 . VAR_16
<S2SV_ModStart> = VAR_23 ; TYPE_6 * VAR_157 = VAR_23 ; <S2SV_ModStart> VAR_156 = VAR_23 ; TYPE_6 * VAR_158 = VAR_23 ; TYPE_10 VAR_159 , VAR_160 <S2SV_ModStart> } } } VAR_68 = METHOD_39 ( VAR_149 , METHOD_35 ( VAR_149 ) - 1 ) ; METHOD_34 ( VAR_68 , VAR_161 ) ; VAR_119 = METHOD_35 ( VAR_68 ) ; VAR_157 = METHOD_31 ( VAR_119 , VAR_147 ) ; if ( ! VAR_157 ) goto VAR_151 ; for ( VAR_143 = 0 ; VAR_143 < VAR_119 ; VAR_143 ++ ) { TYPE_11 VAR_162 = METHOD_46 ( METHOD_45 ( METHOD_39 ( VAR_68 , VAR_143 ) ) , VAR_147 ) ; if ( ! VAR_162 ) goto VAR_151 ; METHOD_40 ( VAR_157 , VAR_143 , VAR_162 ) ; } <S2SV_ModStart> METHOD_18 ( VAR_146 , VAR_157 <S2SV_ModStart> } break ; case VAR_163 : VAR_149 = METHOD_39 ( VAR_149 , 0 ) ; METHOD_34 ( VAR_149 , VAR_164 ) ; if ( METHOD_43 ( METHOD_39 ( VAR_149 , 1 ) ) == VAR_165 ) { VAR_68 = METHOD_39 ( VAR_149 , 1 ) ; VAR_119 = 0 ; for ( VAR_143 = 0 ; VAR_143 < METHOD_35 ( VAR_68 ) ; VAR_143 ++ ) { if ( METHOD_43 ( METHOD_39 ( VAR_68 , VAR_143 ) ) == VAR_166 ) { VAR_119 ++ ; } } VAR_158 = METHOD_31 ( VAR_119 , VAR_147 ) ; if ( ! VAR_158 ) goto VAR_151 ; VAR_69 = 0 ; for ( VAR_143 = 0 ; VAR_143 < METHOD_35 ( VAR_68 ) ; VAR_143 ++ ) { if ( METHOD_43 ( METHOD_39 ( VAR_68 , VAR_143 ) ) == VAR_166 ) { VAR_160 = METHOD_47 ( & VAR_154 , METHOD_39 ( VAR_68 , VAR_143 ) ) ; if ( ! VAR_160 ) goto VAR_151 ; METHOD_40 ( VAR_158 , VAR_69 ++ , VAR_160 ) ; } } } else { VAR_158 = METHOD_31 ( 0 , VAR_147 ) ; if ( ! VAR_158 ) goto VAR_151 ; } VAR_159 = METHOD_47 ( & VAR_154 , METHOD_39 ( VAR_149 , METHOD_35 ( VAR_149 ) - 1 ) ) ; if ( ! VAR_159 ) goto VAR_151 ; VAR_156 = METHOD_48 ( VAR_158 , VAR_159 , VAR_147 ) ; break ;
<S2SV_ModStart> -> VAR_92 ; TYPE_11 <S2SV_ModEnd> VAR_96 = VAR_94 <S2SV_ModStart> -> VAR_48 == VAR_101 <S2SV_ModEnd> && VAR_49 ==
<S2SV_ModStart> VAR_27 -> VAR_11 -> <S2SV_ModEnd> VAR_16 [ VAR_30
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 4 ; if ( ! <S2SV_ModStart> , VAR_9 ) ) return 0 <S2SV_ModStart> VAR_11 ) ; return 1 ;
<S2SV_ModStart> * VAR_17 , TYPE_3 VAR_36 <S2SV_ModEnd> ) { if <S2SV_ModStart> ; switch ( VAR_36 <S2SV_ModEnd> ) { case
<S2SV_ModStart> -> VAR_48 ; METHOD_11 ( & VAR_117 , 0 , sizeof ( VAR_117 ) ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> else return ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_10 ) ; METHOD_3 ( VAR_9 -> VAR_11 ) ; METHOD_3 ( VAR_9 -> VAR_12 ) ;
<S2SV_ModStart> ) ) ; if ( VAR_5 -> VAR_6 ) <S2SV_ModStart> -> VAR_8 ; else VAR_9 = - VAR_10 ;
<S2SV_ModStart> VAR_13 ) { TYPE_6 VAR_17 = VAR_13 + VAR_8 ; if ( VAR_17 < VAR_13 ) { return VAR_18 ; } TYPE_7 <S2SV_ModEnd> * VAR_16 = <S2SV_ModStart> VAR_16 = ( TYPE_7 <S2SV_ModEnd> * ) METHOD_1 <S2SV_ModStart> ) METHOD_1 ( VAR_17 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_53 -> VAR_323 == 0 ) { METHOD_79 ( & VAR_327 -> VAR_328 , VAR_329 , "Invalid<S2SV_blank>zero<S2SV_blank>dictionary<S2SV_blank>size" ) ; return ( VAR_331 ) ; } if (
<S2SV_ModStart> ( VAR_30 ) { * VAR_27 = "DECODE_PA_FOR_USER" ; return VAR_30 ; } <S2SV_ModEnd> VAR_30 = METHOD_2
<S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_111 -> VAR_112
<S2SV_ModStart> { TYPE_6 VAR_27 ; VAR_72 = METHOD_16 ( STRUCT_OR_UNION_11 <S2SV_ModEnd> , & VAR_27 <S2SV_ModStart> , & VAR_27 , & VAR_71 ) ; if ( VAR_72 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> { METHOD_6 ( "%s:<S2SV_blank>posix_acl_update_mode<S2SV_blank>err:<S2SV_blank>%d\\n" <S2SV_ModEnd> , VAR_58 , <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> * VAR_8 = METHOD_6 <S2SV_ModEnd> ( VAR_4 ,
<S2SV_ModStart> ( VAR_11 , METHOD_8 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> } if ( METHOD_9 ( VAR_18 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> << VAR_113 ; if ( VAR_143 & VAR_164 ) STRUCT_OR_UNION_38 -> VAR_143 |= 1 << VAR_165 ;
<S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_114 = 0
<S2SV_ModStart> -> VAR_961 = <S2SV_ModEnd> 1 ; }
<S2SV_ModStart> = VAR_182 ; TYPE_17 <S2SV_ModEnd> VAR_291 = VAR_290 <S2SV_ModStart> VAR_211 , "Range:<S2SV_blank>bytes=%" PRIu64 <S2SV_ModEnd> "-" , VAR_290 <S2SV_ModStart> -> VAR_264 = VAR_296 <S2SV_ModEnd> ; VAR_290 ->
<S2SV_ModStart> unsigned TYPE_4 VAR_26 ; VAR_24 -> VAR_25 = 0
<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_23 ) { TYPE_3 VAR_40 ; for ( VAR_40 = 0 ; VAR_40 < VAR_23 -> VAR_41 ; ++ VAR_40 ) { TYPE_4 * const VAR_42 = & VAR_23 -> VAR_43 [ VAR_40 ] ; TYPE_5 * const VAR_44 = ( TYPE_5 * ) VAR_42 -> VAR_45 ; <S2SV_ModStart> VAR_38 = & VAR_44 <S2SV_ModEnd> -> VAR_3 -> <S2SV_ModStart> -> VAR_4 ; TYPE_6 * const VAR_46 = VAR_38 -> VAR_47 ; <S2SV_ModStart> -> VAR_6 = VAR_48 ; VAR_38 -> VAR_49 = VAR_23 -> VAR_49 ; VAR_38 -> VAR_50 = VAR_23 -> VAR_50 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_12 ) { VAR_46 <S2SV_ModEnd> -> VAR_26 = <S2SV_ModStart> -> VAR_16 ; VAR_46 <S2SV_ModEnd> -> VAR_29 = <S2SV_ModStart> -> VAR_20 ; VAR_46 <S2SV_ModEnd> -> VAR_37 = <S2SV_ModStart> } else { VAR_46 <S2SV_ModEnd> -> VAR_26 = <S2SV_ModStart> = VAR_27 ; VAR_46 <S2SV_ModEnd> -> VAR_29 = <S2SV_ModStart> METHOD_1 ( & VAR_46 <S2SV_ModEnd> -> VAR_39 ) <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>internal<S2SV_blank>frame<S2SV_blank>buffers" ) ; VAR_46 <S2SV_ModEnd> -> VAR_37 = <S2SV_ModStart> VAR_37 = & VAR_46 <S2SV_ModEnd> -> VAR_39 ; <S2SV_ModStart> ; } } }
<S2SV_ModStart> * VAR_133 , TYPE_12 VAR_138 , <S2SV_ModStart> * VAR_90 , TYPE_12 VAR_84 , <S2SV_ModEnd> TYPE_10 * VAR_111 <S2SV_ModStart> ( VAR_137 < VAR_138 <S2SV_ModEnd> ) VAR_133 [ <S2SV_ModStart> } VAR_102 = VAR_138 - VAR_139 <S2SV_ModEnd> - VAR_131 ; <S2SV_ModStart> ( VAR_137 > VAR_138 - VAR_139 ) VAR_137 = VAR_138 - VAR_139 <S2SV_ModEnd> ; VAR_133 [
<S2SV_ModStart> VAR_188 ) { METHOD_20 ( STRUCT_OR_UNION_42 ) ; <S2SV_ModStart> ) goto VAR_181 <S2SV_ModEnd> ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 ( <S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_24 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , * VAR_13 <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> ; while ( VAR_826 < METHOD_46 ( VAR_915 ) && <S2SV_ModStart> if ( VAR_826 > METHOD_46 ( VAR_915 ) || VAR_826 < 0 <S2SV_ModEnd> ) break ; <S2SV_ModStart> + VAR_826 ) >= <S2SV_ModEnd> METHOD_46 ( VAR_915 <S2SV_ModStart> - 1 ) ) ; METHOD_178 ( VAR_914 , "UnexpectedEndOfFile"
<S2SV_ModStart> TYPE_11 * VAR_61 ; TYPE_10 VAR_69 <S2SV_ModStart> = 0 ; VAR_69 = 0 ; <S2SV_ModStart> break ; case VAR_70 : VAR_69 = METHOD_28 ( VAR_31 ) ; break ; case <S2SV_ModStart> ; } } METHOD_29 ( VAR_69 ) ; <S2SV_ModStart> ) ) { METHOD_17 ( VAR_50 ) ;
<S2SV_ModStart> { VAR_781 -> VAR_635 . VAR_578 = METHOD_44 ( 0 , ( VAR_781 -> VAR_635 . VAR_578 - 1 ) ) ; VAR_781 ->
<S2SV_ModStart> -> VAR_23 = METHOD_6 ( TYPE_1 , <S2SV_ModStart> * VAR_38 ++ , 20 ) <S2SV_ModStart> -> VAR_40 = METHOD_6 ( TYPE_1 , <S2SV_ModStart> * VAR_38 ++ , 50 )
<S2SV_ModStart> struct STRUCT_OR_UNION_4 VAR_34 = { }
<S2SV_ModStart> VAR_42 ; TYPE_6 VAR_45 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> VAR_13 ) { METHOD_6 ( & VAR_42 -> VAR_43 ) ; return - VAR_15 <S2SV_ModEnd> ; } METHOD_2 <S2SV_ModStart> VAR_26 ) ; VAR_45 <S2SV_ModEnd> = METHOD_3 ( <S2SV_ModStart> VAR_26 ) ; <S2SV_ModEnd> METHOD_6 ( & <S2SV_ModStart> ) ; return METHOD_7 ( VAR_29 , VAR_1 , VAR_39 , VAR_30 , VAR_45 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_52 , "%s" , VAR_53 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_202 ; } else { VAR_209 -> VAR_172 [ VAR_176 - 1 ] = '\\0' ; }
<S2SV_ModStart> = VAR_84 ; VAR_96 -> VAR_98 = VAR_99 ;
<S2SV_ModStart> VAR_788 ) ; VAR_455 = <S2SV_ModEnd> METHOD_63 ( VAR_788 <S2SV_ModStart> VAR_785 . VAR_111 ) ; if ( VAR_455 != sizeof ( VAR_785 . VAR_111 ) ) METHOD_98 ( VAR_752 , "ImproperImageHeader" <S2SV_ModStart> VAR_124 ) ; if ( VAR_455 != sizeof ( VAR_785 . VAR_124 ) ) METHOD_98 ( VAR_752 , "ImproperImageHeader" ) <S2SV_ModEnd> ; VAR_788 -> <S2SV_ModStart> } if ( <S2SV_ModEnd> ( VAR_768 ->
<S2SV_ModStart> TYPE_4 VAR_18 ; struct STRUCT_OR_UNION_0 VAR_19 = * VAR_6 ; if ( ! METHOD_9 ( VAR_6 , 4 ) ) { METHOD_10 ( "rdpsnd_process_training(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>training<S2SV_blank>data<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_19 ) ; }
<S2SV_ModStart> , VAR_15 ) ; if ( METHOD_8 ( METHOD_7 ( METHOD_6 ( ) , VAR_29 ) ) ) return - VAR_30
<S2SV_ModStart> VAR_3 ; const TYPE_4 * VAR_83 <S2SV_ModEnd> = & VAR_8 <S2SV_ModStart> & VAR_8 -> <S2SV_ModEnd> VAR_83 ; TYPE_6 <S2SV_ModStart> TYPE_6 VAR_64 = VAR_83 <S2SV_ModEnd> -> VAR_73 >> <S2SV_ModStart> -> VAR_73 >> 3 <S2SV_ModEnd> ; TYPE_6 VAR_76 <S2SV_ModStart> ; TYPE_11 VAR_85 ; TYPE_11 VAR_86 ; unsigned TYPE_11 VAR_87 = 5 * VAR_8 -> VAR_88 . VAR_89 <S2SV_ModStart> -> VAR_84 ; VAR_86 = <S2SV_ModEnd> ( VAR_21 -> <S2SV_ModStart> VAR_21 -> VAR_22 < VAR_87 ) ? METHOD_2 ( <S2SV_ModEnd> VAR_83 -> VAR_79 <S2SV_ModStart> [ VAR_80 ] <S2SV_ModEnd> , VAR_83 -> <S2SV_ModStart> [ VAR_34 ] ) : <S2SV_ModEnd> VAR_83 -> VAR_79 <S2SV_ModStart> [ VAR_80 ] ; VAR_85 = METHOD_2 ( VAR_83 -> VAR_84 , VAR_86 * 5 / 4 ) ; if ( <S2SV_ModEnd> VAR_83 -> VAR_75 <S2SV_ModStart> VAR_83 -> VAR_75 > VAR_83 -> VAR_73 ) { TYPE_11 VAR_47 = VAR_85 / 3 ; if ( VAR_47 ) { VAR_76 = ( ( VAR_83 -> VAR_44 - VAR_83 -> VAR_73 ) / VAR_47 ) ; if ( VAR_76 ) VAR_81 = ( TYPE_11 ) ( ( VAR_83 -> VAR_75 - VAR_83 -> VAR_73 ) / VAR_76 ) ; VAR_85 -= VAR_81 ; } } else if ( VAR_83 -> VAR_75 > VAR_64 ) { if ( VAR_64 ) { VAR_76 = ( VAR_83 -> VAR_73 - VAR_64 ) ; if ( VAR_76 ) { VAR_81 = ( TYPE_11 ) ( ( VAR_83 -> VAR_84 - VAR_86 ) * ( VAR_83 -> VAR_73 - VAR_83 -> VAR_75 ) / VAR_76 ) ; } VAR_85 = VAR_86 <S2SV_ModEnd> + VAR_81 ;
<S2SV_ModStart> ( VAR_25 = METHOD_10 <S2SV_ModEnd> ( VAR_24 )
<S2SV_ModStart> VAR_13 ) ; if ( ! VAR_85 -> VAR_16 ) return - VAR_87 ; <S2SV_ModStart> VAR_32 ) ; if ( ! VAR_85 -> VAR_35 ) return - VAR_87 ;
<S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> = VAR_155 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; if <S2SV_ModStart> & 0xf0 ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> += 1 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> ) ) ; METHOD_42 <S2SV_ModEnd> ( VAR_164 -> <S2SV_ModStart> [ 1 ] ) ; if ( VAR_164 -> VAR_153 [ 1 ] <S2SV_ModStart> = VAR_155 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> += 2 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> ; METHOD_44 ( VAR_170 [ VAR_173 ] , <S2SV_ModEnd> 16 ) ;
<S2SV_ModStart> ) ; } if ( VAR_318 . VAR_319 ) { <S2SV_ModStart> = 1 ; }
<S2SV_ModStart> ( VAR_42 , "<S2SV_blank>n<S2SV_blank>len=%u" <S2SV_ModEnd> , METHOD_14 ( <S2SV_ModStart> ; if ( METHOD_14 ( VAR_39 . VAR_40 ) > 4 ) { if ( <S2SV_ModEnd> VAR_42 -> VAR_30 <S2SV_ModStart> VAR_42 -> VAR_30 > 2 <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> else if ( <S2SV_ModEnd> VAR_42 -> VAR_30 <S2SV_ModStart> VAR_42 -> VAR_30 > 1 <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> * ) ( <S2SV_ModEnd> VAR_38 + 1 <S2SV_ModStart> VAR_41 ; } }
<S2SV_ModStart> } else { if ( METHOD_31 ( VAR_80 [ VAR_81 ] ) + 4 + 1 > VAR_8 ) { METHOD_32 ( VAR_98 , "ERROR:<S2SV_blank>argument<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" ) ; return 1 ; }
<S2SV_ModStart> ) { TYPE_4 <S2SV_ModEnd> VAR_69 , VAR_71
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_4 , TYPE_1 VAR_6 <S2SV_ModStart> ( VAR_4 , ! VAR_6 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> return VAR_37 ; TYPE_6 VAR_73 = 0 ; if ( METHOD_12 ( sizeof ( TYPE_5 ) , VAR_63 , & VAR_73 ) ) return VAR_74 ; <S2SV_ModStart> = METHOD_6 ( VAR_73 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ) ) ; METHOD_3 ( VAR_36 -> VAR_37 , VAR_39 , VAR_25 , METHOD_4 ( VAR_34 , VAR_39 ) ) ;
<S2SV_ModStart> ; if ( VAR_311 == VAR_107 ) return VAR_66 ; if ( <S2SV_ModStart> VAR_292 ) && VAR_311 -> VAR_296 == VAR_107 <S2SV_ModEnd> ) return VAR_63 <S2SV_ModStart> ( VAR_312 & VAR_292 ) && ( VAR_312 & VAR_59 ) ) return VAR_63 ; if ( ( VAR_312 & <S2SV_ModStart> ) return VAR_63 <S2SV_ModEnd> ; VAR_325 =
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_33 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_25 ) , VAR_10 <S2SV_ModEnd> , VAR_32 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_10 <S2SV_ModEnd> , VAR_32 ,
<S2SV_ModStart> * STRUCT_OR_UNION_4 , TYPE_3 <S2SV_ModEnd> * VAR_35 )
<S2SV_ModStart> VAR_8 , struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_9 ) <S2SV_ModStart> VAR_9 ) { METHOD_4 <S2SV_ModEnd> ( VAR_9 , <S2SV_ModStart> 16 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_9 ,
<S2SV_ModStart> VAR_28 == VAR_8 || VAR_28 > VAR_30
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_579 <S2SV_ModStart> VAR_13 ) ; \\\n} <S2SV_ModEnd> TYPE_19 * VAR_591 <S2SV_ModStart> goto VAR_426 ; ( TYPE_85 ) METHOD_81 ( VAR_575 , 0 , ( TYPE_73 ) VAR_452 * sizeof ( * VAR_575 ) ) ;
<S2SV_ModStart> ) ) { if ( METHOD_29 ( VAR_112 >= VAR_100 -> VAR_144 ) ) { VAR_143 = VAR_142 ; break ; }
<S2SV_ModStart> ; if ( METHOD_7 ( VAR_18 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> < 0 ) { VAR_296 = ( unsigned TYPE_75 * ) METHOD_46 ( VAR_296 ) ; METHOD_40 ( VAR_249 , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * VAR_274 ++ <S2SV_ModStart> < 0 ) { VAR_296 = ( unsigned TYPE_75 * ) METHOD_46 ( VAR_296 ) ; METHOD_40 ( VAR_249 , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * VAR_274 ++
<S2SV_ModStart> VAR_40 = VAR_34 + ( VAR_41 -> VAR_42 - VAR_28 )
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_77 ; unsigned TYPE_3 VAR_69 <S2SV_ModStart> -> VAR_69 ; VAR_69 = VAR_79 -> VAR_69 ; <S2SV_ModStart> ; VAR_70 < <S2SV_ModEnd> VAR_69 ; VAR_70
<S2SV_ModStart> * VAR_21 = METHOD_8 ( VAR_50 <S2SV_ModEnd> ) -> VAR_21 <S2SV_ModStart> METHOD_6 ( VAR_50 = VAR_50 <S2SV_ModStart> -> VAR_49 = METHOD_9 ( VAR_50 <S2SV_ModEnd> -> VAR_52 . <S2SV_ModStart> VAR_53 . VAR_54 , METHOD_8 ( VAR_50 ) -> VAR_21 )
<S2SV_ModStart> struct STRUCT_OR_UNION_6 ) || ( VAR_154 > VAR_273 ) <S2SV_ModStart> , VAR_233 , "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%" VAR_65 "<S2SV_blank><<S2SV_blank>_%lu_<S2SV_blank><<S2SV_blank>%lu<S2SV_blank>(BT_SHB_INSANE_MAX)" <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> struct STRUCT_OR_UNION_6 ) , VAR_154 , VAR_273 <S2SV_ModEnd> ) ; *
<S2SV_ModStart> VAR_5 ) { TYPE_0 VAR_9 = VAR_8 ; <S2SV_ModStart> == 0 ) VAR_9 = <S2SV_ModStart> ) ; return VAR_9 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_58 ) { if ( VAR_60 -> VAR_50 ) { <S2SV_ModStart> "" ) ; } else { METHOD_5 ( "Sending<S2SV_blank>response<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>%s" , VAR_60 -> VAR_61 , VAR_32 ? "(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)" : "" ) ; }
<S2SV_ModStart> METHOD_0 ( TYPE_1 VAR_3 , TYPE_1 <S2SV_ModStart> VAR_2 ) { TYPE_1 VAR_4 ; if ( METHOD_3 ( VAR_3 , VAR_2 , & VAR_4 ) ) METHOD_4 ( ) ; <S2SV_ModStart> ( "checked_xmalloc" , VAR_4 <S2SV_ModEnd> ) ; return <S2SV_ModStart> return METHOD_2 ( VAR_3 ,
<S2SV_ModStart> * VAR_8 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> ( VAR_23 -> <S2SV_ModEnd> VAR_19 == VAR_17
<S2SV_ModStart> VAR_38 > VAR_39 && VAR_38 < VAR_67 - VAR_57
<S2SV_ModStart> VAR_14 , VAR_14 , VAR_30
<S2SV_ModStart> ( VAR_94 = METHOD_21 ( ) ) ) { goto VAR_92 ; } <S2SV_ModEnd> if ( METHOD_3 <S2SV_ModStart> 10 , ( "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>" "type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%" PRIuFAST32 "\\n" <S2SV_ModEnd> , \'"\' , <S2SV_ModStart> 1 ) { METHOD_5 ( 10 , ( "big<S2SV_blank>length\\n" ) ) ;
<S2SV_ModStart> -> VAR_22 = METHOD_8 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> ( VAR_22 ) , VAR_25
<S2SV_ModStart> TYPE_6 VAR_20 ; METHOD_2 ( VAR_19 ) ; if ( <S2SV_ModEnd> METHOD_1 ( VAR_8 <S2SV_ModStart> VAR_10 ) ) <S2SV_ModEnd> VAR_20 = METHOD_3 <S2SV_ModStart> VAR_18 ) ; else VAR_20 = - VAR_11 ;
<S2SV_ModStart> VAR_53 ) { const TYPE_4 VAR_61 = VAR_58 -> VAR_59 ; const TYPE_4 VAR_63 = VAR_58 -> VAR_34 ; const TYPE_4 VAR_65 = ( VAR_58 -> VAR_59 + 1 ) / 2 ; const TYPE_4 VAR_62 = ( VAR_58 -> VAR_34 + 1 ) / 2 ; <S2SV_ModStart> -> VAR_20 = VAR_61 ; VAR_53 -> VAR_24 = VAR_63 ; VAR_53 -> VAR_38 = VAR_61 ; VAR_53 -> VAR_42 = VAR_63 ; VAR_53 -> VAR_64 = VAR_65 ; VAR_53 -> VAR_66 = VAR_62 ; VAR_53 -> VAR_36 = VAR_65 ; VAR_53 -> VAR_40 = VAR_62 ; VAR_53 -> VAR_44 = VAR_58 -> VAR_56 [ VAR_57 ] ; VAR_53 -> VAR_49 = VAR_58 -> VAR_56 [ VAR_52 ] ; VAR_53 -> VAR_54 = ( VAR_58 -> VAR_56 [ VAR_57 ] - <S2SV_ModStart> VAR_58 -> VAR_59 ) <S2SV_ModEnd> / 2 ; <S2SV_ModStart> / 2 ; <S2SV_ModEnd> return VAR_60 ;
<S2SV_ModStart> TYPE_2 * VAR_36 ; if ( VAR_30 -> VAR_36 . VAR_26 == 0 || VAR_30 -> VAR_36 . VAR_32 > VAR_41 / VAR_30 -> VAR_36 . VAR_26 ) return - VAR_42
<S2SV_ModStart> VAR_295 < 0 || VAR_295 >= 256
<S2SV_ModStart> ( VAR_53 ) ; if ( VAR_56 == VAR_42 ) return VAR_42
<S2SV_ModStart> VAR_189 ) { TYPE_5 VAR_194 , VAR_201 ; <S2SV_ModStart> VAR_238 , VAR_245 , & VAR_194 , & VAR_201 ) ; if ( <S2SV_ModEnd> VAR_194 == VAR_195 <S2SV_ModStart> VAR_195 && ( <S2SV_ModEnd> VAR_201 > 0 <S2SV_ModStart> > 0 && <S2SV_ModEnd> VAR_201 < 9 <S2SV_ModStart> ) ; } else if ( VAR_238 -> VAR_234 ) { METHOD_54 ( VAR_238 -> VAR_239 , "Mixes<S2SV_blank>studio<S2SV_blank>and<S2SV_blank>non<S2SV_blank>studio<S2SV_blank>profile\\n" ) ; return VAR_246 ; } VAR_238 -> VAR_239 -> VAR_194 = VAR_194 ; VAR_238 -> VAR_239 -> VAR_201 = VAR_201 ; <S2SV_ModStart> VAR_234 ) { METHOD_53 ( VAR_238 -> VAR_239 -> VAR_194 == VAR_195 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_8 * STRUCT_OR_UNION_8 , TYPE_2 VAR_36 <S2SV_ModStart> VAR_30 , STRUCT_OR_UNION_8 , VAR_36
<S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198 <S2SV_ModStart> -> METHOD_95 ( VAR_198
<S2SV_ModStart> METHOD_113 ( VAR_793 ) ; if ( ( VAR_790 . VAR_73 == 0 ) || ( VAR_790 . VAR_73 > 3 ) ) METHOD_98 ( VAR_757 , "ImproperImageHeader"
<S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_15 ( &
<S2SV_ModStart> VAR_589 = 2 ; VAR_853 -> VAR_861 = 1
<S2SV_ModStart> VAR_59 , VAR_84 - 1
<S2SV_ModStart> = VAR_65 ; <S2SV_ModEnd> VAR_66 = METHOD_4
<S2SV_ModStart> ; VAR_74 . VAR_142 = 1 ; VAR_74 .
<S2SV_ModStart> return VAR_58 ; <S2SV_ModEnd> VAR_59 = VAR_57
<S2SV_ModStart> -> VAR_1 ; METHOD_2 ( & VAR_5 ) ; <S2SV_ModStart> = VAR_4 ; METHOD_3 ( & VAR_5 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : if ( ! METHOD_11 ( VAR_108 -> VAR_86 , VAR_105 -> VAR_86 ) ) VAR_103 -> VAR_111 |= VAR_112 ; if (
<S2SV_ModStart> -> VAR_9 ) { <S2SV_ModStart> = 0 ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_2 * VAR_12 , <S2SV_ModStart> , * VAR_4 ; if ( METHOD_4 ( & VAR_5 -> VAR_6 ) ) return ; METHOD_5 ( & VAR_12 -> VAR_13 ) <S2SV_ModStart> VAR_9 ) ; METHOD_2 ( & VAR_11 -> VAR_14 ) ; <S2SV_ModStart> VAR_11 ) ; VAR_12 -> VAR_15 -- ; } METHOD_6 ( & VAR_12 -> VAR_13 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_50 ) { METHOD_12 ( VAR_61 , 0 , sizeof ( VAR_61 ) ) ;
<S2SV_ModStart> return VAR_139 ; VAR_101 = METHOD_3 ( VAR_139 , VAR_26 ) ; if ( VAR_101 < 2 ) VAR_101 = 2 ; VAR_139 = VAR_101 * VAR_26 <S2SV_ModEnd> ; if (
<S2SV_ModStart> TYPE_5 VAR_24 ; VAR_26 <S2SV_ModEnd> * VAR_22 ;
<S2SV_ModStart> VAR_3 &= ~ ( VAR_4 | VAR_17 ) <S2SV_ModEnd> ; VAR_14 ->
<S2SV_ModStart> VAR_28 ) { TYPE_3 <S2SV_ModEnd> VAR_27 = VAR_28
<S2SV_ModStart> * VAR_20 ; if ( ! METHOD_5 ( VAR_13 ) ) { METHOD_6 ( "rdpsnddbg_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state" , VAR_13 ) ; }
<S2SV_ModStart> VAR_29 : case VAR_51 : case
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_13 METHOD_0 ( TYPE_1 * VAR_137 , const TYPE_4 * VAR_125 , const TYPE_4 * VAR_127 , const TYPE_4 * * VAR_123 ) { TYPE_5 * const VAR_159 = & VAR_137 -> VAR_6 ; TYPE_6 * const VAR_130 = & VAR_137 -> VAR_81 ; struct STRUCT_OR_UNION_1 VAR_40 ; TYPE_10 VAR_161 = 0 ; TYPE_4 VAR_162 [ VAR_163 ] <S2SV_ModEnd> ; const TYPE_7 <S2SV_ModStart> ( VAR_137 , METHOD_25 ( VAR_137 , & VAR_40 , VAR_125 , VAR_127 , VAR_162 ) ) <S2SV_ModEnd> ; const TYPE_10 <S2SV_ModStart> = VAR_125 + ( VAR_159 -> VAR_164 <= VAR_165 ? 1 : 2 ) ; return ; } VAR_125 += METHOD_26 <S2SV_ModEnd> ( & VAR_40 <S2SV_ModStart> "Truncated<S2SV_blank>packet<S2SV_blank>or<S2SV_blank>corrupt<S2SV_blank>header<S2SV_blank>length" ) ; VAR_159 -> VAR_166 = ! VAR_159 -> VAR_143 && VAR_159 -> VAR_167 == VAR_159 -> VAR_168 && VAR_159 -> VAR_169 == VAR_159 -> VAR_170 && ! VAR_159 -> VAR_171 && VAR_159 -> VAR_172 && ( VAR_159 -> VAR_173 != VAR_21 ) ; METHOD_13 ( VAR_130 , VAR_159 -> VAR_91 , VAR_159 -> VAR_93 ) ; * VAR_159 -> VAR_160 = VAR_159 -> VAR_156 [ VAR_159 -> VAR_158 ] ; if ( ! VAR_159 -> VAR_160 -> VAR_174 ) METHOD_19 ( & VAR_159 -> VAR_140 , VAR_141 , "Uninitialized<S2SV_blank>entropy<S2SV_blank>context." ) ; METHOD_15 ( VAR_159 -> VAR_101 ) ; VAR_130 -> VAR_136 = 0 ; VAR_135 -> VAR_136 = METHOD_16 ( VAR_137 , VAR_125 , VAR_126 ) ; if ( VAR_135 -> VAR_136 ) METHOD_19 ( & VAR_159 -> VAR_140 , VAR_141 , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>header<S2SV_blank>is<S2SV_blank>corrupted." ) ; if ( <S2SV_ModEnd> VAR_159 -> VAR_54 <S2SV_ModStart> VAR_54 . VAR_55 && ! VAR_159 -> VAR_175 ) { METHOD_27 ( VAR_159 , VAR_159 -> VAR_54 . VAR_55 ) ; } if ( VAR_137 -> VAR_176 && VAR_159 -> VAR_145 ) { TYPE_14 * const VAR_177 = VAR_137 -> VAR_178 ; TYPE_15 * const VAR_179 = VAR_177 -> VAR_65 ; if ( VAR_159 -> VAR_154 ) { VAR_161 = 1 ; VAR_159 -> VAR_156 [ VAR_159 -> VAR_158 ] = * VAR_159 -> VAR_160 ; } METHOD_28 ( VAR_177 ) ; VAR_137 -> VAR_31 -> VAR_180 = - 1 ; VAR_137 -> VAR_31 -> VAR_181 = - 1 ; VAR_179 -> VAR_182 = 1 ; METHOD_29 ( VAR_177 ) ; METHOD_30 ( VAR_177 ) ; } if ( VAR_137 -> <S2SV_ModEnd> VAR_113 > 1 <S2SV_ModStart> > 1 && <S2SV_ModEnd> VAR_114 == 1 <S2SV_ModStart> VAR_115 > 1 <S2SV_ModEnd> ) { * <S2SV_ModStart> VAR_127 ) ; if ( ! VAR_130 -> VAR_136 ) { if ( ! VAR_159 -> VAR_175 ) { METHOD_31 ( VAR_135 , VAR_159 , VAR_137 -> VAR_81 . VAR_183 , VAR_159 -> VAR_54 . VAR_55 , 0 , 0 , VAR_137 -> VAR_184 , VAR_137 -> VAR_185 , & VAR_137 -> VAR_186 ) ; } } else { METHOD_19 ( & VAR_159 -> VAR_140 , VAR_141 , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted." ) ; } <S2SV_ModStart> ) ; } if ( ! VAR_130 -> VAR_136 ) { if ( ! VAR_159 -> VAR_143 && ! VAR_159 -> VAR_145 ) { METHOD_20 ( VAR_159 ) ; if ( ! METHOD_21 ( VAR_159 ) ) { METHOD_22 ( VAR_159 ) ; METHOD_23 ( VAR_159 , VAR_159 -> VAR_151 ) ; } } else { METHOD_24 ( VAR_159 ) ; } } else { <S2SV_ModEnd> METHOD_19 ( & <S2SV_ModStart> , VAR_141 , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted." <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_159 -> VAR_154 && ! VAR_161 <S2SV_ModStart> VAR_158 ] = * <S2SV_ModStart> -> VAR_160 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; } METHOD_22 ( VAR_72 , VAR_55 ) ;
<S2SV_ModStart> ~ VAR_15 ; METHOD_6 ( <S2SV_ModStart> ) & VAR_18 )
<S2SV_ModStart> ; if ( VAR_56 > VAR_57 ) { unsigned TYPE_5 VAR_72 ; if ( <S2SV_ModStart> VAR_25 ) ) goto VAR_64 ; VAR_72 = ( VAR_20 - VAR_63 -> VAR_12 ) >> VAR_58 ; VAR_72 += VAR_63 -> VAR_73 ; if ( VAR_72 + ( VAR_56 >> VAR_58 ) < VAR_72 ) goto VAR_66 <S2SV_ModEnd> ; } if
<S2SV_ModStart> ( VAR_5 ) { METHOD_2 ( VAR_9 <S2SV_ModEnd> , "<S2SV_blank>[%12.3f]<S2SV_blank>%12.3f<S2SV_blank>d" , <S2SV_ModStart> VAR_6 ) ; METHOD_3 ( VAR_9 ) ; } else METHOD_4 ( <S2SV_ModEnd> "<S2SV_blank>[]<S2SV_blank>0<S2SV_blank>d" ) ;
<S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> VAR_146 , VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> case VAR_70 : if ( VAR_144 - 6 < 8 ) { METHOD_44 ( ( VAR_146 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; break ; } <S2SV_ModStart> case VAR_76 : if ( VAR_144 - 6 < 2 ) { METHOD_44 ( ( VAR_146 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; break ; } <S2SV_ModStart> case VAR_103 : if ( VAR_144 - 6 < 16 ) { METHOD_44 ( ( VAR_146 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; break ; } <S2SV_ModStart> case VAR_111 : if ( VAR_144 - 6 < 4 ) { METHOD_44 ( ( VAR_146 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; break ; } <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6 <S2SV_ModStart> * ) VAR_137 , VAR_144 - 6
<S2SV_ModStart> >> 2 ; if ( VAR_296 + VAR_287 >= VAR_113 ) goto VAR_314 ;
<S2SV_ModStart> - VAR_9 ; METHOD_4 ( VAR_17 , 0 , sizeof ( VAR_17 ) ) ;
<S2SV_ModStart> ( VAR_20 = METHOD_4 ( <S2SV_ModEnd> ) ) ) <S2SV_ModStart> 0 ; } <S2SV_ModEnd> VAR_20 -> VAR_12
<S2SV_ModStart> TYPE_5 * VAR_17 <S2SV_ModEnd> ; VAR_17 = <S2SV_ModStart> , VAR_26 , VAR_26 <S2SV_ModEnd> , VAR_26 ,
<S2SV_ModStart> 2 ) { TYPE_12 VAR_82 , VAR_281 , VAR_283 , VAR_265 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_82 = METHOD_11 <S2SV_ModStart> VAR_485 ) ; <S2SV_ModEnd> VAR_281 = METHOD_36 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_283 = METHOD_36 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_265 = METHOD_11 <S2SV_ModStart> , VAR_485 ) ; if ( VAR_478 -> VAR_440 ) { if ( VAR_82 != VAR_478 -> VAR_82 || VAR_281 != VAR_478 -> VAR_281 || VAR_283 != VAR_478 -> VAR_283 || VAR_265 != VAR_478 -> VAR_265 ) { METHOD_37 ( VAR_478 -> VAR_455 , VAR_456 , "Invalid<S2SV_blank>change<S2SV_blank>of<S2SV_blank>global<S2SV_blank>parameters\\n" ) ; return VAR_457 ; } } VAR_478 -> VAR_82 = VAR_82 ; VAR_478 -> VAR_281 = VAR_281 ; VAR_478 -> VAR_283 = VAR_283 ; VAR_478 -> VAR_265 = VAR_265
<S2SV_ModStart> } VAR_29 = METHOD_9 <S2SV_ModEnd> ( VAR_33 )
<S2SV_ModStart> -> VAR_20 = METHOD_3 ( TYPE_1 , <S2SV_ModStart> * VAR_21 ++ , VAR_22 )
<S2SV_ModStart> ; VAR_133 -> VAR_105 = VAR_105 ; VAR_133 ->
<S2SV_ModStart> VAR_151 ) -> VAR_159 <S2SV_ModEnd> = 0 ;
<S2SV_ModStart> VAR_9 ) { TYPE_0 VAR_16 ; <S2SV_ModStart> ) ) ; for ( VAR_16 = 0 ; VAR_16 < 3 ; VAR_16 ++ ) <S2SV_ModStart> ( STRUCT_OR_UNION_7 , VAR_16 <S2SV_ModEnd> , VAR_9 -> <S2SV_ModStart> -> VAR_10 [ VAR_16 <S2SV_ModEnd> ] . VAR_11
<S2SV_ModStart> ( VAR_2 != 1 <S2SV_ModEnd> || VAR_3 != <S2SV_ModStart> || VAR_3 != 1 <S2SV_ModEnd> ) METHOD_3 (
<S2SV_ModStart> * VAR_42 ; TYPE_10 VAR_38 ; TYPE_10 <S2SV_ModEnd> VAR_39 ; TYPE_5 <S2SV_ModStart> TYPE_5 VAR_41 ; TYPE_10 VAR_23 ; TYPE_10 VAR_25 ; TYPE_10 VAR_18 ; TYPE_10 VAR_20 ; TYPE_5 VAR_43 ; TYPE_5 VAR_44 ; TYPE_5 tmp_numrows ; TYPE_5 tmp_numcols <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_34 , "%ld<S2SV_blank>%ld" , & VAR_43 , & VAR_44 <S2SV_ModEnd> ) != 2 <S2SV_ModStart> != 2 ) { return 0 ; } VAR_18 = VAR_43 ; VAR_20 = VAR_44 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_34 , "%ld<S2SV_blank>%ld" , & tmp_numcols , & tmp_numrows <S2SV_ModEnd> ) != 2 <S2SV_ModStart> != 2 ) { return 0 ; } VAR_23 = tmp_numrows ; VAR_25 = tmp_numcols <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ) { return 0 ; } <S2SV_ModEnd> if ( METHOD_7
<S2SV_ModStart> VAR_20 ) { VAR_36 <S2SV_ModEnd> ; } switch
<S2SV_ModStart> VAR_11 ) { TYPE_2 * VAR_14 = METHOD_3 ( TYPE_2 , VAR_15 , VAR_11 -> VAR_16 . VAR_17 ) ; if ( ! VAR_11 -> VAR_10 . VAR_18 ) { VAR_11 -> VAR_19 = VAR_6 ; VAR_11 -> VAR_10 . VAR_18 = METHOD_4 ( VAR_14 -> VAR_20 , VAR_11 -> VAR_19 ) ; } <S2SV_ModStart> * 512 , VAR_11 -> VAR_19 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> != 0 ) { METHOD_7 ( VAR_62 ) ; return VAR_60 ; } <S2SV_ModEnd> VAR_62 -> VAR_39
<S2SV_ModStart> * VAR_178 , TYPE_18 * VAR_196 , <S2SV_ModStart> , TYPE_14 VAR_195 , TYPE_19 * VAR_197 <S2SV_ModStart> VAR_176 = & VAR_196 <S2SV_ModEnd> -> VAR_33 ; <S2SV_ModStart> TYPE_16 VAR_58 = VAR_198 [ VAR_195 ] <S2SV_ModEnd> , VAR_184 = <S2SV_ModStart> VAR_190 ) { <S2SV_ModEnd> const TYPE_16 VAR_43 <S2SV_ModStart> VAR_194 ] ; if ( VAR_185 && VAR_195 != VAR_55 ) VAR_196 -> VAR_143 -> VAR_187 [ VAR_145 ] [ VAR_187 ] ++ ; <S2SV_ModStart> case VAR_69 : <S2SV_ModEnd> METHOD_11 ( VAR_178 <S2SV_ModStart> ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 , VAR_185 , VAR_194 , & VAR_197 -> VAR_199 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_83 : METHOD_11 ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 , VAR_185 , VAR_194 , & VAR_197 -> vertical [ 0 ] <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_142 -> VAR_96 && VAR_195 > VAR_190 ) { METHOD_11 ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 + VAR_184 , VAR_185 , VAR_194 , & VAR_197 -> vertical [ 1 ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> case VAR_113 : METHOD_11 ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 , VAR_185 , VAR_194 , & VAR_197 -> horizontal [ 0 ] <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_142 -> VAR_126 && VAR_195 > VAR_190 ) { METHOD_11 ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 + VAR_184 , VAR_193 , VAR_185 , VAR_194 , & VAR_197 -> horizontal [ 1 ] <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_188 ) ; METHOD_20 ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 , VAR_185 , VAR_194 , VAR_197 -> split [ 0 ] ) <S2SV_ModEnd> ; METHOD_20 ( <S2SV_ModStart> ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 , VAR_193 + VAR_184 , VAR_185 , VAR_194 , VAR_197 -> split [ 1 ] ) <S2SV_ModEnd> ; METHOD_20 ( <S2SV_ModStart> ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 + VAR_184 , VAR_193 , VAR_185 , VAR_194 , VAR_197 -> split [ 2 ] ) <S2SV_ModEnd> ; METHOD_20 ( <S2SV_ModStart> ( VAR_178 , VAR_196 , VAR_179 , VAR_180 , VAR_192 + VAR_184 , VAR_193 + VAR_184 , VAR_185 , VAR_194 , VAR_197 -> split [ 3 ] <S2SV_ModEnd> ) ; break <S2SV_ModStart> : METHOD_21 ( 0 && "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; break <S2SV_ModEnd> ; } if
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_0 * ) VAR_2 ) ;
<S2SV_ModStart> ] = VAR_134 ; if ( VAR_139 >= VAR_137 ) return - 1 <S2SV_ModStart> VAR_139 ++ ; <S2SV_ModEnd> } * VAR_138
<S2SV_ModStart> ) ] ; struct STRUCT_OR_UNION_2 * VAR_69 = VAR_67 -> VAR_66 ; union STRUCT_OR_UNION_3 VAR_70 ; <S2SV_ModStart> unsigned TYPE_7 VAR_68 ; VAR_70 = VAR_69 -> VAR_71 [ VAR_22 ] . VAR_35 . VAR_36 . VAR_72 <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , "all<S2SV_blank>ports<S2SV_blank>in<S2SV_blank>use" ) <S2SV_ModStart> VAR_51 ; } METHOD_10 ( VAR_61 , sizeof ( VAR_61 ) , "%u<S2SV_blank>%u" , METHOD_9 ( VAR_70 . VAR_73 ) , VAR_47 ) ; METHOD_11 ( "nf_nat_irc:<S2SV_blank>inserting<S2SV_blank>\'%s\'<S2SV_blank>==<S2SV_blank>%pI4,<S2SV_blank>port<S2SV_blank>%u\\n" , VAR_61 , & VAR_70 . VAR_73 , VAR_47 ) ; <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , VAR_56 , <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , "cannot<S2SV_blank>mangle<S2SV_blank>packet" )
<S2SV_ModStart> VAR_13 ; } if ( * VAR_8 == '\\\\' ) { METHOD_1 ( VAR_9 , VAR_10 , VAR_13 , VAR_12 , "Backslash<S2SV_blank>character<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>URL." ) ; return VAR_13 ; }
<S2SV_ModStart> VAR_122 ) ; if ( VAR_196 -> VAR_129 == VAR_132 ) { METHOD_10 ( & VAR_196 -> VAR_122 ) ; VAR_202 = - VAR_203 ; goto VAR_200 ; }
<S2SV_ModStart> } if ( STRUCT_OR_UNION_15 -> VAR_14 -> VAR_16 . VAR_17 &&
<S2SV_ModStart> VAR_223 , VAR_220 , & VAR_204
<S2SV_ModStart> ) ; } <S2SV_ModEnd> { unsigned TYPE_18 <S2SV_ModStart> if ( VAR_143 != VAR_232 * VAR_233 * 3 <S2SV_ModEnd> ) return VAR_191
<S2SV_ModStart> * STRUCT_OR_UNION_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> -> VAR_238 + <S2SV_ModEnd> VAR_243 -> VAR_178 <S2SV_ModStart> -> VAR_252 + <S2SV_ModEnd> VAR_243 -> VAR_178
<S2SV_ModStart> goto VAR_394 ; <S2SV_ModEnd> VAR_372 = VAR_302 <S2SV_ModStart> ( VAR_341 ) ; if ( VAR_349 < 2 || ! VAR_372 [ 0 ] || ! VAR_372 [ 1 ] ) continue
<S2SV_ModStart> -> VAR_60 = <S2SV_ModEnd> VAR_66 -> STRUCT_OR_UNION_28 <S2SV_ModStart> STRUCT_OR_UNION_28 . VAR_60 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return 1 ; METHOD_16 ( STRUCT_OR_UNION_28 -> VAR_60 ) ;
<S2SV_ModStart> != VAR_10 ) && <S2SV_ModEnd> ( VAR_14 -> <S2SV_ModStart> VAR_15 . VAR_13 < <S2SV_ModEnd> VAR_14 -> VAR_15
<S2SV_ModStart> ( VAR_93 -> VAR_11 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> { if ( VAR_93 -> VAR_92 + ( VAR_80 >> 3 ) > VAR_93 -> VAR_7 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; } if ( <S2SV_ModStart> & 7 ; if ( VAR_93 -> VAR_94 + VAR_76 > VAR_93 -> VAR_7 << 3 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; } <S2SV_ModStart> VAR_93 -> VAR_94 , VAR_93 -> VAR_7 << 3 <S2SV_ModStart> 8 ) ; if ( VAR_93 -> VAR_94 > VAR_93 -> VAR_7 << 3 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; }
<S2SV_ModStart> TYPE_4 VAR_26 ; TYPE_3 VAR_32 ; <S2SV_ModStart> "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , "autoexec.cfg" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; <S2SV_ModStart> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ;
<S2SV_ModStart> ; VAR_74 . VAR_142 = 1 ; VAR_74 .
<S2SV_ModStart> ) VAR_1034 ; switch ( VAR_1008 ) { case VAR_974 : if ( VAR_1035 < sizeof ( struct STRUCT_OR_UNION_30 ) ) return - 1 ; <S2SV_ModStart> VAR_709 ) ; <S2SV_ModEnd> METHOD_262 ( ( <S2SV_ModStart> - 1 ; VAR_752 . VAR_706 = METHOD_253 ( VAR_948 . VAR_760 -> VAR_709 ) ;
<S2SV_ModStart> * VAR_5 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> 0 || ( VAR_74 <S2SV_ModEnd> -> VAR_13 & <S2SV_ModStart> . VAR_19 && 0 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> = VAR_74 -> VAR_18 . VAR_76 <S2SV_ModEnd> ; VAR_64 -> <S2SV_ModStart> -> VAR_50 = ( VAR_64 -> VAR_77 + VAR_64 -> VAR_78 ) / 2 <S2SV_ModEnd> ; VAR_64 -> <S2SV_ModStart> -> VAR_58 ) { VAR_64 -> VAR_56 = VAR_64 -> VAR_58 ; VAR_64 -> VAR_79 = 1 ; } else { VAR_64 -> VAR_79 = 0 ; } <S2SV_ModEnd> VAR_74 -> VAR_60
<S2SV_ModStart> VAR_15 -> VAR_7 , 0
<S2SV_ModStart> { METHOD_10 ( "IPv4:<S2SV_blank>callocing<S2SV_blank>this<S2SV_blank>failed" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> = METHOD_3 ( VAR_48 <S2SV_ModEnd> , VAR_11 , <S2SV_ModStart> { METHOD_10 ( "IPv4<S2SV_blank>socket<S2SV_blank>open<S2SV_blank>failed" ) ; goto VAR_39 ; } struct STRUCT_OR_UNION_4 <S2SV_ModEnd> VAR_30 ; METHOD_5 <S2SV_ModStart> ; VAR_30 . VAR_49 = VAR_48 ; VAR_30 . VAR_50 <S2SV_ModEnd> = METHOD_6 ( <S2SV_ModStart> ; VAR_30 . VAR_51 . VAR_52 = METHOD_13 ( 0x7F000001 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) METHOD_10 ( "IPv4<S2SV_blank>bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>" <S2SV_ModEnd> "Requested<S2SV_blank>port<S2SV_blank>may<S2SV_blank>be<S2SV_blank>taken<S2SV_blank>or<S2SV_blank>require<S2SV_blank>root<S2SV_blank>permissions." ) ; <S2SV_ModStart> { METHOD_10 ( "IPv4<S2SV_blank>listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket" <S2SV_ModEnd> ) ; goto
<S2SV_ModStart> * VAR_40 ; TYPE_3 <S2SV_ModEnd> VAR_36 = 0
<S2SV_ModStart> VAR_42 ) { METHOD_4 ( ) ;
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_76 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> ( VAR_77 , <S2SV_ModEnd> & VAR_75 ,
<S2SV_ModStart> TYPE_1 VAR_26 ; unsigned TYPE_2 VAR_32 <S2SV_ModEnd> ; VAR_26 = <S2SV_ModStart> VAR_28 , & VAR_32 <S2SV_ModEnd> , VAR_28 -> <S2SV_ModStart> VAR_28 -> VAR_23 ) ; if ( VAR_26 != VAR_31 ) return VAR_26 ; VAR_26 = METHOD_3 ( VAR_28 , VAR_32
<S2SV_ModStart> goto VAR_85 ; if ( VAR_38 - VAR_39 > VAR_92 - 1 ) goto VAR_85 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_11 METHOD_0 ( <S2SV_ModEnd> TYPE_9 * const <S2SV_ModStart> * const VAR_30 , vpx_reader * VAR_29 , MB_MODE_INFO * const mbmi , TYPE_11 VAR_31 , TYPE_11 row , TYPE_11 col , TYPE_4 VAR_33 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_2 * <S2SV_ModStart> VAR_31 ] ; const scan_order * sc = & vp9_default_scan_orders [ VAR_33 ] ; const TYPE_11 <S2SV_ModEnd> TYPE_18 = METHOD_1 <S2SV_ModStart> TYPE_18 = METHOD_1 <S2SV_ModEnd> ( VAR_30 , <S2SV_ModStart> , VAR_31 , sc , col , row , VAR_33 , VAR_29 , mbmi -> segment_id ) ; inverse_transform_block_inter ( VAR_30 , VAR_31 <S2SV_ModEnd> , VAR_33 , <S2SV_ModStart> [ 4 * row <S2SV_ModEnd> * VAR_42 -> <S2SV_ModStart> + 4 * col <S2SV_ModEnd> ] , VAR_42 <S2SV_ModStart> TYPE_18 ) ; return <S2SV_ModEnd> TYPE_18 ; }
<S2SV_ModStart> ) , & VAR_18 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_25 ) { struct STRUCT_OR_UNION_17 VAR_29 ; <S2SV_ModStart> |= VAR_16 ; METHOD_8 ( & VAR_29 , STRUCT_OR_UNION_16 ) ; <S2SV_ModStart> , VAR_20 , VAR_29 <S2SV_ModEnd> . VAR_29 , <S2SV_ModStart> , VAR_27 , VAR_29 <S2SV_ModEnd> . VAR_29 , <S2SV_ModStart> VAR_29 , 0 ) ; METHOD_9 ( & VAR_29
<S2SV_ModStart> TYPE_8 VAR_58 = METHOD_11 <S2SV_ModEnd> ( VAR_56 )
<S2SV_ModStart> VAR_181 ) ; if ( VAR_182 )
<S2SV_ModStart> VAR_44 ) { if ( VAR_44 -> VAR_45 > VAR_46 ) return ; <S2SV_ModStart> ( VAR_44 ) { if ( VAR_44 -> VAR_45 > VAR_46 - VAR_42 ) return ; <S2SV_ModStart> VAR_45 ) ; }
<S2SV_ModStart> & VAR_106 , "Server<S2SV_blank>with<S2SV_blank>pid<S2SV_blank>%d<S2SV_blank>accepted<S2SV_blank>connection<S2SV_blank>%llu<S2SV_blank>on<S2SV_blank>%s<S2SV_blank>[%d]<S2SV_blank>from<S2SV_blank>%s" <S2SV_ModEnd> , METHOD_28 ( <S2SV_ModStart> VAR_125 -> VAR_111 , VAR_125 -> VAR_158
<S2SV_ModStart> VAR_41 ) { <S2SV_ModEnd> VAR_35 -> VAR_7 <S2SV_ModStart> VAR_35 -> VAR_7 = METHOD_5 ( <S2SV_ModEnd> VAR_41 -> VAR_7 <S2SV_ModStart> VAR_41 -> VAR_7 , VAR_43 ) ; VAR_35 -> VAR_14 = METHOD_5 ( VAR_41 -> VAR_14 , VAR_43 <S2SV_ModStart> ; if ( ( VAR_41 -> VAR_7 && ! VAR_35 -> VAR_7 ) || ( VAR_41 -> VAR_14 && ! VAR_35 -> VAR_14 ) ) return - VAR_44 <S2SV_ModEnd> ; VAR_35 ->
<S2SV_ModStart> VAR_20 ; } <S2SV_ModEnd> if ( VAR_56
<S2SV_ModStart> ; VAR_268 = METHOD_53 <S2SV_ModEnd> ( "cgroup_root" , <S2SV_ModStart> VAR_54 , "size=10240k,mode=755" , VAR_48
<S2SV_ModStart> VAR_129 = 0 ; METHOD_7 ( ( VAR_99 & ( VAR_130 | VAR_131 ) ) == ( VAR_130 | VAR_131 ) ) <S2SV_ModStart> ) ) { if ( VAR_99 & ( VAR_130 | VAR_131 ) ) { if ( VAR_99 & VAR_130 ) VAR_129 = METHOD_22 ( STRUCT_OR_UNION_17 , VAR_90 ) ; else VAR_129 = METHOD_22 ( STRUCT_OR_UNION_17 , VAR_122 ) ; } else
<S2SV_ModStart> , unsigned TYPE_13 VAR_55 , unsigned TYPE_13 VAR_56 <S2SV_ModEnd> , TYPE_13 VAR_37 <S2SV_ModStart> = 0 ; const TYPE_13 VAR_57 = VAR_37 > 0 ? 1 << ( VAR_37 - 1 ) : 0 ; <S2SV_ModStart> ; VAR_17 < VAR_56 <S2SV_ModEnd> ; VAR_17 ++ <S2SV_ModStart> ; VAR_21 < VAR_55 <S2SV_ModEnd> ; VAR_21 ++ <S2SV_ModStart> ; VAR_49 += VAR_57 <S2SV_ModEnd> ; VAR_49 >>= <S2SV_ModStart> += VAR_53 - VAR_55 <S2SV_ModEnd> ; } }
<S2SV_ModStart> case VAR_225 : <S2SV_ModEnd> VAR_213 = ~ <S2SV_ModStart> ; default : METHOD_23 ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n" , VAR_250 , VAR_246 -> VAR_229 [ VAR_224 ] . VAR_139 ) ; return <S2SV_ModEnd> ; } METHOD_17
<S2SV_ModStart> = "add" ; if ( VAR_6 >= VAR_10 ) { return 0 ; }
<S2SV_ModStart> + 8 ) ) goto VAR_121 ; if ( ( VAR_69 + VAR_85 ) > VAR_118 + 8
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_2 ) <S2SV_ModStart> ( VAR_2 ) METHOD_2 <S2SV_ModEnd> ( VAR_2 )
<S2SV_ModStart> ; METHOD_28 ( VAR_30 ) ; METHOD_28 (
<S2SV_ModStart> ; VAR_85 -> VAR_49 = VAR_76 . VAR_55 ; VAR_85 -> VAR_53 = VAR_76 . VAR_55 ; VAR_85 -> VAR_87 = VAR_88 ; if ( <S2SV_ModEnd> VAR_76 . VAR_47 <S2SV_ModStart> VAR_76 . VAR_47 != - 1 ) { VAR_85 -> VAR_87 = METHOD_13 ( <S2SV_ModEnd> VAR_76 . VAR_47 <S2SV_ModStart> VAR_76 . VAR_47 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! VAR_85 -> VAR_87 <S2SV_ModEnd> ) goto VAR_84 <S2SV_ModStart> goto VAR_84 ; } VAR_81 -> VAR_57 = VAR_58 ; VAR_81 -> VAR_60 = METHOD_7 ( VAR_76 . VAR_66 ) ; VAR_81 -> VAR_64 = METHOD_8 ( VAR_76 . VAR_66 ) ; VAR_81 -> VAR_68 = VAR_69 ; VAR_81 -> VAR_71 = & VAR_72 ; VAR_81 -> VAR_74 = 1 ; STRUCT_OR_UNION_10 = METHOD_9 ( VAR_81 , & VAR_76 ) ; if ( ! STRUCT_OR_UNION_10 ) goto VAR_84 ; <S2SV_ModStart> ; VAR_84 : if ( VAR_85 -> VAR_87 ) METHOD_12 ( VAR_85 -> VAR_87 ) ;
<S2SV_ModStart> VAR_48 ) { TYPE_0 VAR_49 = sizeof ( VAR_16 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( VAR_26 < 17 ) { return VAR_50 ; } if ( METHOD_4 ( VAR_16 , VAR_25 , sizeof ( VAR_16 ) ) != 0 ) { return VAR_47 ; } <S2SV_ModEnd> VAR_43 -> VAR_30 <S2SV_ModStart> -> VAR_30 = VAR_25 [ VAR_49 ] << 24 | VAR_25 [ VAR_49 + 1 ] << 16 | VAR_25 [ VAR_49 + 2 ] << 8 | VAR_25 [ VAR_49 + 3 ] ; VAR_49 += 4 <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_34 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_38 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_42 = VAR_25 [ VAR_49 ++ ] ; VAR_43 -> VAR_51 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_46 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; } else
<S2SV_ModStart> return VAR_78 ; if ( strchr ( VAR_27 , '\\'' ) || strchr ( VAR_27 , '\\\\' ) ) { msSetError ( MS_MISCERR , "Invalid<S2SV_blank>time<S2SV_blank>filter." , "msPostGISLayerSetTimeFilter()" ) ; return VAR_78 ; }
<S2SV_ModStart> ) ; return METHOD_4 ( <S2SV_ModStart> , VAR_11 ) )
<S2SV_ModStart> || METHOD_7 ( METHOD_16 ( VAR_16 ) <S2SV_ModEnd> -> VAR_19 ,
<S2SV_ModStart> TYPE_1 * VAR_12 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> VAR_77 = 0 ; if ( METHOD_14 ( VAR_78 , & STRUCT_OR_UNION_7 -> VAR_79 ) ) return - VAR_80
<S2SV_ModStart> TYPE_6 VAR_34 ; TYPE_3 VAR_36 [ sizeof ( VAR_30 ) ] ; <S2SV_ModStart> - 1 ; ND_TCHECK_32BITS ( VAR_31 + 1 ) ; METHOD_7 ( VAR_32 , VAR_36 , sizeof ( VAR_36 ) , METHOD_8 ( VAR_31 + 1 ) ) ; <S2SV_ModStart> ( VAR_31 [ 5 <S2SV_ModEnd> ] , ( <S2SV_ModStart> & VAR_31 [ 5 <S2SV_ModEnd> ] , ( <S2SV_ModStart> , "origin<S2SV_blank>AS:<S2SV_blank>%s,<S2SV_blank>route<S2SV_blank>target<S2SV_blank>%s" , VAR_36 <S2SV_ModEnd> , METHOD_9 (
<S2SV_ModStart> VAR_446 ) ; if ( <S2SV_ModEnd> ( VAR_612 > <S2SV_ModStart> > VAR_381 ) && <S2SV_ModEnd> VAR_275 && ( <S2SV_ModStart> VAR_275 && ( VAR_613 -> VAR_274 <S2SV_ModEnd> == VAR_286 || <S2SV_ModStart> == VAR_286 || VAR_613 -> VAR_274 <S2SV_ModEnd> == VAR_279 ) <S2SV_ModStart> VAR_551 ; } VAR_596 = METHOD_22 ( & VAR_613 -> VAR_507 ) ; VAR_610 -> VAR_612 += VAR_612 ; if ( ( ( VAR_612 > VAR_381 ) || ( VAR_596 && METHOD_57 ( VAR_596 ) ) ) && ( VAR_613 -> VAR_274 == VAR_286 ) <S2SV_ModEnd> && ( VAR_614 <S2SV_ModStart> 0 ; } if ( ! VAR_596 <S2SV_ModEnd> ) goto VAR_333
<S2SV_ModStart> , VAR_233 ) TYPE_29 VAR_258 = VAR_250 -> VAR_160 ; if ( VAR_258 < 1 ) { METHOD_48 ( VAR_245 ) ; goto VAR_254 ; } VAR_213 += VAR_258 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ; VAR_33 = VAR_26 -> VAR_35 -> VAR_36 -> VAR_37 -> VAR_38 <S2SV_ModEnd> ; METHOD_5 (
<S2SV_ModStart> 0 ) { if ( ! METHOD_6 ( VAR_45 , & STRUCT_OR_UNION_7 -> VAR_46 ) ) <S2SV_ModStart> 0 ] ; else VAR_41 = VAR_47 ;
<S2SV_ModStart> * VAR_27 , TYPE_10 <S2SV_ModEnd> * VAR_59 , <S2SV_ModStart> VAR_5 ) { METHOD_4 <S2SV_ModEnd> ( VAR_27 , <S2SV_ModStart> } else { TYPE_10 <S2SV_ModEnd> VAR_50 [ 64 <S2SV_ModStart> 64 ] ; <S2SV_ModEnd> TYPE_7 VAR_61 , <S2SV_ModStart> , VAR_65 ; TYPE_10 <S2SV_ModEnd> VAR_54 [ 8 <S2SV_ModStart> ++ VAR_65 ) VAR_50 <S2SV_ModEnd> [ VAR_65 *
<S2SV_ModStart> VAR_65 , 1 <S2SV_ModEnd> , VAR_350 ,
<S2SV_ModStart> VAR_112 -> VAR_46 != VAR_115 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> VAR_46 = METHOD_12 <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> ; av_log ( VAR_109 <S2SV_ModEnd> , VAR_38 , <S2SV_ModStart> VAR_38 , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\'\\n" , VAR_112 <S2SV_ModStart> return 0 ; else if ( VAR_112 -> VAR_46 == VAR_115 ) { av_log ( VAR_109 , VAR_105 , "Invalid<S2SV_blank>chunk<S2SV_blank>size<S2SV_blank>%" PRIu64 "\\n" , VAR_112 -> VAR_46 ) ; return METHOD_7 ( VAR_116 ) ; } <S2SV_ModStart> ) ) { TYPE_9 <S2SV_ModEnd> VAR_106 = VAR_109 <S2SV_ModStart> VAR_88 , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "<S2SV_blank>error=%s.\\n" , VAR_112 <S2SV_ModStart> VAR_105 , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> ".\\n" , VAR_106
<S2SV_ModStart> ; TYPE_21 VAR_88 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_91 -> VAR_85 <S2SV_ModStart> VAR_86 ] . VAR_44 = VAR_89 ; VAR_91 -> VAR_85 [ VAR_86 ] . VAR_49 = VAR_82 ; for ( VAR_88 = VAR_89 ; VAR_88 <= VAR_82 ; VAR_88 ++ ) { VAR_90 += ( VAR_91 -> VAR_85 [ VAR_86 ] .
<S2SV_ModStart> METHOD_1 ( "b/26366256" ) ; METHOD_6 ( 0x534e4554 , "26366256"
<S2SV_ModStart> TYPE_0 METHOD_10 ( struct STRUCT_OR_UNION_3 * VAR_19 , <S2SV_ModStart> ++ ; } <S2SV_ModEnd> VAR_19 -> METHOD_10
<S2SV_ModStart> * VAR_82 , TYPE_6 VAR_85 , <S2SV_ModStart> VAR_2 VAR_72 , TYPE_6 VAR_87 , <S2SV_ModStart> VAR_61 ; TYPE_5 VAR_84 ; if ( VAR_87 == 0 ) { if ( VAR_85 < 2 ) goto VAR_86 <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> ( VAR_82 [ <S2SV_ModEnd> 1 ] ) <S2SV_ModStart> = VAR_53 ; VAR_87 = ( TYPE_6 ) <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> = VAR_62 ; VAR_87 = ( TYPE_6 ) <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> { switch ( VAR_87 <S2SV_ModEnd> ) { case <S2SV_ModStart> break ; } <S2SV_ModEnd> VAR_84 = 0 <S2SV_ModStart> += VAR_84 ; VAR_85 -= VAR_84 ; <S2SV_ModStart> case VAR_31 : if ( VAR_85 < VAR_87 ) goto VAR_86 ; <S2SV_ModStart> 0 ] , VAR_87 <S2SV_ModEnd> ) ; if <S2SV_ModStart> return VAR_84 + VAR_87 <S2SV_ModEnd> ; case VAR_73 <S2SV_ModStart> case VAR_49 : if ( VAR_85 < VAR_87 + 2 ) goto VAR_86 ; <S2SV_ModStart> 0 ] , VAR_87 <S2SV_ModEnd> + 2 ) <S2SV_ModStart> + 2 + VAR_87 <S2SV_ModEnd> ; default :
<S2SV_ModStart> return ; } <S2SV_ModEnd> if ( VAR_69 <S2SV_ModStart> ) ; } VAR_75 = scsi_init_iovec ( VAR_81 ) ; METHOD_12 ( VAR_69 -> VAR_70 , & VAR_81 -> VAR_62 , VAR_75 * VAR_64 , VAR_65 ) ; VAR_81 -> VAR_78 . VAR_79 = METHOD_13 ( VAR_69 -> VAR_70 , VAR_81 -> VAR_72 , <S2SV_ModEnd> & VAR_81 -> <S2SV_ModStart> -> VAR_74 , VAR_75 , METHOD_15 , VAR_81 ) ; if ( <S2SV_ModEnd> VAR_81 -> VAR_78 <S2SV_ModStart> VAR_78 . VAR_79 <S2SV_ModEnd> == VAR_80 )
<S2SV_ModStart> VAR_92 -> VAR_23 ; METHOD_17 ( VAR_96 + VAR_99 <= VAR_92 -> VAR_47 )
<S2SV_ModStart> == 0 ) { <S2SV_ModStart> -> VAR_30 = 4 ; } else { const TYPE_4 VAR_34 = METHOD_6 ( VAR_17 , VAR_35 / METHOD_5 ( sizeof ( VAR_24 ) , sizeof ( TYPE_3 ) ) ) ; TYPE_4 VAR_36 = ( TYPE_4 ) <S2SV_ModEnd> VAR_31 -> VAR_30 <S2SV_ModStart> VAR_31 -> VAR_30 * <S2SV_ModEnd> 2 ; if <S2SV_ModStart> ; if ( VAR_36 > VAR_34 ) { VAR_36 = VAR_34 ; if ( ( TYPE_4 ) VAR_33 > VAR_34 ) { g_error ( "%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n" , G_STRLOC , VAR_33 ) ; } } <S2SV_ModEnd> VAR_31 -> VAR_30 <S2SV_ModStart> -> VAR_30 = VAR_36 <S2SV_ModEnd> ; } }
<S2SV_ModStart> ; VAR_202 -> VAR_215 = VAR_214 ; VAR_202 -> VAR_216 = VAR_214 ; VAR_202 -> VAR_217 = VAR_214 ; VAR_202 -> <S2SV_ModStart> ; VAR_202 -> VAR_215 = VAR_214 ; VAR_202 -> VAR_216 = VAR_214 ; VAR_202 -> VAR_217 = VAR_214 ; VAR_202 ->
<S2SV_ModStart> VAR_114 ) ; if ( VAR_116 >= ( TYPE_15 ) METHOD_8 ( VAR_118 ) ) return VAR_17 ;
<S2SV_ModStart> VAR_104 ; { VAR_591 -> VAR_569 -> VAR_593 = 0 ; VAR_591 -> VAR_569 -> VAR_336 = 0 ; VAR_591 -> VAR_569 -> VAR_371 = VAR_376 ; VAR_591 -> VAR_569 -> VAR_594 = 1 ; VAR_591 -> VAR_569 -> VAR_595 = 1 ; <S2SV_ModStart> << VAR_503 ; VAR_591 -> VAR_569 -> VAR_596 = 0 ; VAR_591 -> VAR_569 -> VAR_597 = 0 ;
<S2SV_ModStart> ( * VAR_50 + VAR_56 , * VAR_51 - VAR_56 <S2SV_ModEnd> , VAR_52 )
<S2SV_ModStart> STRUCT_OR_UNION_7 != VAR_24 <S2SV_ModEnd> ) continue ;
<S2SV_ModStart> ( VAR_38 , "Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail" , VAR_49 ) ; METHOD_15 ( VAR_38 ,
<S2SV_ModStart> VAR_141 ; } VAR_116 -> VAR_146 = 0 ;
<S2SV_ModStart> VAR_19 ; return VAR_17 == 0 ? VAR_20 : VAR_21 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> { VAR_52 = METHOD_21 <S2SV_ModEnd> ( VAR_50 ,
<S2SV_ModStart> ) ) ; if ( VAR_45 < 0 ) return VAR_45 ;
<S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 ) <S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 ) <S2SV_ModStart> -> VAR_104 , METHOD_38 ( <S2SV_ModStart> VAR_182 -> VAR_153 )
<S2SV_ModStart> METHOD_312 METHOD_312 ; METHOD_275 <S2SV_ModEnd> ( VAR_370 -> <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> METHOD_312 ; if <S2SV_ModStart> 1 ] & 0xc0 METHOD_312 METHOD_310 ( ( VAR_385 , "<S2SV_blank>" <S2SV_ModEnd> METHOD_312 METHOD_312 ; <S2SV_ModStart> 1 ] & 0x80 METHOD_312 METHOD_310 ( ( VAR_385 , "M" METHOD_312 METHOD_312 ; if ( VAR_370 -> VAR_359 [ 1 ] &
<S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_60 = { }
<S2SV_ModStart> ; VAR_268 = METHOD_53 <S2SV_ModEnd> ( "cgroup_root" , <S2SV_ModStart> VAR_54 , "size=10240k,mode=755" , VAR_48
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_792 <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> TYPE_289 VAR_309 [ <S2SV_ModStart> VAR_1444 ) ) METHOD_174 <S2SV_ModEnd> ( VAR_1381 ,
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> = 0 ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_24 ;
<S2SV_ModStart> ; TYPE_5 VAR_170 ; if ( VAR_101 < 0 || VAR_101 >= VAR_173 ) return - VAR_174
<S2SV_ModStart> VAR_13 ) { if ( VAR_13 == VAR_9 || <S2SV_ModEnd> VAR_13 -> VAR_14 <S2SV_ModStart> VAR_13 -> VAR_14 == VAR_9 || <S2SV_ModEnd> VAR_13 -> VAR_14 <S2SV_ModStart> VAR_14 -> VAR_15 == VAR_9 || VAR_13 -> VAR_14 -> length < 2 ) return 0 ; return <S2SV_ModEnd> ( VAR_13 -> <S2SV_ModStart> 8 ) | <S2SV_ModEnd> VAR_13 -> VAR_14 <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> "MemoryAllocationFailed" ) ; } <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> ) VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> "MemoryAllocationFailed" ) ; } <S2SV_ModStart> VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ;
<S2SV_ModStart> METHOD_6 ( VAR_47 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> -> VAR_22 = METHOD_8 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> ( VAR_22 ) , VAR_25
<S2SV_ModStart> ; VAR_278 < VAR_291 ( <S2SV_ModStart> VAR_259 -> VAR_240 , VAR_259 -> VAR_125 )
<S2SV_ModStart> VAR_75 ) ; METHOD_22 ( & VAR_112 -> VAR_116 ) ; <S2SV_ModStart> VAR_76 , VAR_112 ) ; METHOD_23 ( & VAR_112 -> VAR_116
<S2SV_ModStart> TYPE_2 ) { VAR_2 . VAR_3 ++ ; VAR_2 . VAR_4 ++ ; <S2SV_ModStart> TYPE_2 * ) & VAR_2 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_2 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> TYPE_0 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_3 * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return VAR_20 ;
<S2SV_ModStart> VAR_455 - VAR_445 - 4
<S2SV_ModStart> ( VAR_20 , VAR_40 <S2SV_ModEnd> , 0 , <S2SV_ModStart> VAR_35 ) ; if ( VAR_36 == VAR_41 ) { METHOD_2 ( VAR_20 , VAR_42 , VAR_36 , VAR_24 -> VAR_23 , "h2-stream(%ld-%d):<S2SV_blank>on_header,<S2SV_blank>reset<S2SV_blank>stream" , VAR_24 -> VAR_25 , VAR_38 -> VAR_25 ) ; METHOD_6 ( VAR_0 , VAR_43 , VAR_38 -> VAR_25 , VAR_44 ) ; } else
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_11 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if <S2SV_ModEnd> ( ( VAR_12 <S2SV_ModStart> VAR_28 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_30 , "horDiff8" , "%s" , "(cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_29 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> TYPE_36 * VAR_433 <S2SV_ModEnd> ; if ( <S2SV_ModStart> TYPE_36 ) || VAR_506 . VAR_507 > 1024 ) { METHOD_88 ( "this<S2SV_blank>.CAF<S2SV_blank>file<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>\'chan\'<S2SV_blank>chunk!" ) ; return VAR_549 ; } if ( VAR_497 ) METHOD_88 ( "\'chan\'<S2SV_blank>chunk<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes" , ( TYPE_44 ) VAR_506 . VAR_507 ) ; VAR_433 = METHOD_75 ( ( TYPE_28 ) VAR_506 . VAR_507 ) ; if ( <S2SV_ModStart> } else { TYPE_45 <S2SV_ModEnd> VAR_519 = ( <S2SV_ModStart> ; TYPE_46 * VAR_523 ; if ( VAR_506 . VAR_507 < 0 || VAR_506 . VAR_507 > 1048576 ) { METHOD_88 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.CAF<S2SV_blank>file!" , VAR_490 ) ; return VAR_549 ; }
<S2SV_ModStart> TYPE_3 VAR_32 [ VAR_75 <S2SV_ModEnd> ] ; TYPE_4 <S2SV_ModStart> ( VAR_32 , VAR_75 <S2SV_ModEnd> , VAR_72 ) <S2SV_ModStart> ( VAR_32 , "<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%200s<S2SV_blank><S2SV_blank>------" <S2SV_ModEnd> , VAR_73 )
<S2SV_ModStart> VAR_14 ; TYPE_1 * VAR_16 <S2SV_ModEnd> ; TYPE_2 VAR_17 <S2SV_ModStart> ; TYPE_2 VAR_17 ; VAR_16 = METHOD_4 ( VAR_10 + 1 , VAR_18 ) ; if ( ! VAR_16 ) return - VAR_19 <S2SV_ModStart> ) ; } METHOD_5 ( VAR_16 ) ;
<S2SV_ModStart> ( METHOD_1 ( ( unsigned TYPE_5 )
<S2SV_ModStart> VAR_9 ) ; <S2SV_ModEnd> METHOD_4 ( VAR_10
<S2SV_ModStart> , VAR_115 , VAR_160 , <S2SV_ModStart> VAR_115 + VAR_116 + <S2SV_ModEnd> VAR_119 ; VAR_166 <S2SV_ModStart> ) ) { <S2SV_ModEnd> VAR_160 = METHOD_34 <S2SV_ModStart> , VAR_164 ) ; if ( VAR_160 < 0 ) return VAR_160 ; } else VAR_160 = 0 <S2SV_ModStart> . VAR_159 = VAR_116 + <S2SV_ModStart> ; VAR_166 = METHOD_35 ( VAR_164 , VAR_138 ) ; if ( VAR_166 != 0 ) return VAR_166 ; if ( METHOD_33 ( VAR_163 ) ) { VAR_166 =
<S2SV_ModStart> , TYPE_4 VAR_59 <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( ! ND_TTEST ( * VAR_62 ) <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ; if ( VAR_59 <S2SV_ModEnd> > 1 ) <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ; register struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_42 ; <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) ; VAR_32 <S2SV_ModStart> ; VAR_42 -> VAR_44 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> == VAR_38 ) <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_296 > 68 ) { METHOD_28 ( VAR_323 -> VAR_317 , VAR_318 , "mb<S2SV_blank>height<S2SV_blank>too<S2SV_blank>big:<S2SV_blank>%d\\n" , VAR_323 -> VAR_296 ) ; return VAR_325 ; } VAR_323 -> VAR_324 = 0x280 ; } if ( <S2SV_ModEnd> ( VAR_323 -> <S2SV_ModStart> VAR_325 ; } <S2SV_ModEnd> if ( VAR_322
<S2SV_ModStart> VAR_295 ) { struct STRUCT_OR_UNION_15 * VAR_299 = VAR_157 ; <S2SV_ModStart> ! VAR_267 ) { VAR_267 = METHOD_38 ( VAR_242 ) ; VAR_299 = VAR_267 ; } <S2SV_ModEnd> if ( VAR_286 <S2SV_ModStart> VAR_286 ) ; METHOD_39 ( VAR_299 ) ;
<S2SV_ModStart> VAR_55 ; } if ( METHOD_27 ( & VAR_109 , VAR_56 , sizeof ( VAR_109 ) ) ) { VAR_122 = - VAR_25 ; goto VAR_55 ; }
<S2SV_ModStart> ; if ( METHOD_33 ( ! METHOD_32 ( VAR_274 ) ) ) return - VAR_281 ; if (
<S2SV_ModStart> VAR_530 [ VAR_531 <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> { TYPE_3 VAR_25 ; VAR_49 = METHOD_6 ( STRUCT_OR_UNION_9 <S2SV_ModEnd> , & VAR_25 <S2SV_ModStart> , & VAR_25 , & VAR_48 ) ; if ( VAR_49 <S2SV_ModEnd> ) return VAR_49 <S2SV_ModStart> VAR_49 ; } <S2SV_ModEnd> } break ;
<S2SV_ModStart> VAR_13 ) ; METHOD_6 ( & VAR_21 -> VAR_23 ) ;
<S2SV_ModStart> ] + VAR_409 [ VAR_359 ] ; VAR_409 [ VAR_359 ] -= VAR_411 <S2SV_ModStart> += 3 ; VAR_409 [ VAR_359 ] -= 3 ; <S2SV_ModStart> VAR_416 , VAR_408 [ VAR_359 ] , VAR_409 <S2SV_ModStart> ] = 1 ; VAR_409 [ VAR_359 ] -= 3 <S2SV_ModStart> += VAR_324 ; VAR_409 [ VAR_359 ] -= VAR_324 ; <S2SV_ModStart> ; if ( VAR_409 [ VAR_359 ] && <S2SV_ModStart> { do { if ( ! VAR_409 [ VAR_359 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_409 [ VAR_359 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_409 [ VAR_359 ] ) { METHOD_23 ( VAR_390 , VAR_391 , VAR_178 , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto VAR_407 ; } <S2SV_ModStart> VAR_359 ] ++ ; VAR_409 [ VAR_359 ] --
<S2SV_ModStart> VAR_180 ) ; <S2SV_ModEnd> METHOD_54 ( VAR_226 <S2SV_ModStart> VAR_211 -> VAR_183 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> || METHOD_7 ( METHOD_16 ( VAR_16 ) <S2SV_ModEnd> -> VAR_19 ,
<S2SV_ModStart> VAR_1 ) { METHOD_2 <S2SV_ModEnd> ( VAR_1 ->
<S2SV_ModStart> VAR_139 , VAR_141 <S2SV_ModEnd> ) ) )
<S2SV_ModStart> ; return ! METHOD_5 <S2SV_ModEnd> ( STRUCT_OR_UNION_4 ,
<S2SV_ModStart> * VAR_110 = ( TYPE_17 * ) VAR_109 ; TYPE_7 VAR_116 = - VAR_86 ; bool VAR_117 ; TYPE_9 VAR_119 = 0 ; TYPE_17 TYPE_18 * VAR_96 = VAR_68 ; TYPE_17 * * VAR_118 = VAR_68 ; if ( METHOD_13 ( VAR_111 ) != VAR_21 ) { if ( METHOD_15 ( VAR_111 ) <= sizeof ( VAR_31 ) ) { VAR_110 = VAR_31 ; } else { VAR_115 = METHOD_9 ( METHOD_15 ( VAR_111 ) , VAR_65 ) ; if ( VAR_68 == VAR_115 ) return - VAR_67 ; VAR_110 = VAR_115 ; } VAR_116 = - VAR_113 ; if ( METHOD_13 ( VAR_111 ) & VAR_107 ) { unsigned TYPE_7 n = cmd_input_size ( VAR_111 ) ; if ( METHOD_10 ( VAR_110 , ( TYPE_17 TYPE_18 * ) VAR_109 , n ) ) goto VAR_114 ; if ( n < METHOD_15 ( VAR_111 ) ) memset ( ( u8 * ) VAR_110 + n , 0 , METHOD_15 ( VAR_111 ) - n ) ; } else { memset ( VAR_110 , 0 , METHOD_15 ( VAR_111 ) ) ; } } VAR_116 = check_array_args ( VAR_111 , VAR_110 , & VAR_119 , & VAR_96 , & VAR_118 ) ; if ( VAR_116 < 0 ) goto VAR_114 ; VAR_117 = VAR_116 ; if ( VAR_117 ) { VAR_115 = METHOD_9 ( VAR_119 , VAR_65 ) ; VAR_116 = - VAR_67 ; if ( VAR_68 == VAR_115 ) goto VAR_120 ; VAR_116 = - VAR_113 ; if ( METHOD_10 ( VAR_115 , VAR_96 , VAR_119 ) ) goto VAR_120 ; * VAR_118 = VAR_115 ; } VAR_116 = METHOD_11 ( STRUCT_OR_UNION_4 , VAR_111 , VAR_110 ) ; if ( VAR_116 == - VAR_84 ) <S2SV_ModEnd> VAR_116 = - <S2SV_ModStart> - VAR_86 ; if ( VAR_117 ) { * VAR_118 = VAR_96 ; if ( METHOD_14 ( VAR_96 , VAR_115 , VAR_119 ) ) VAR_116 = - VAR_113 ; goto VAR_120 ; } if ( VAR_116 < 0 ) goto VAR_114 ; VAR_120 : <S2SV_ModEnd> switch ( METHOD_13 <S2SV_ModStart> ) ) { <S2SV_ModEnd> case VAR_108 : <S2SV_ModStart> VAR_108 : case <S2SV_ModEnd> ( VAR_107 | <S2SV_ModStart> : if ( <S2SV_ModEnd> METHOD_14 ( (
<S2SV_ModStart> VAR_224 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> VAR_238 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> -> VAR_224 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> -> VAR_238 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 ->
<S2SV_ModStart> , TYPE_2 * VAR_13 ) { if ( VAR_15 && <S2SV_ModStart> VAR_15 ; } }
<S2SV_ModStart> VAR_130 ) ; METHOD_31 ( ) <S2SV_ModEnd> ; VAR_133 ->
<S2SV_ModStart> VAR_284 ) ; if ( VAR_278 < VAR_284 + VAR_277 -> VAR_278 + 1 ) { METHOD_25 ( "not<S2SV_blank>enough<S2SV_blank>space<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>sip<S2SV_blank>message\\n" ) ; return - 1 ; }
<S2SV_ModStart> VAR_139 , VAR_136 ) ; break ; case VAR_133 : METHOD_32 ( VAR_145 , VAR_139 , VAR_136 <S2SV_ModStart> VAR_138 - VAR_139 <S2SV_ModEnd> , VAR_141 ,
<S2SV_ModStart> -> VAR_22 = VAR_48 <S2SV_ModEnd> ; VAR_47 ->
<S2SV_ModStart> ; VAR_244 . <S2SV_ModEnd> VAR_35 = VAR_36 <S2SV_ModStart> VAR_240 ) ; <S2SV_ModEnd> } return VAR_246
<S2SV_ModStart> ; VAR_331 : VAR_745 = METHOD_128 ( VAR_786 , VAR_786 -> VAR_763 , VAR_786 -> VAR_761 , VAR_744 ) ; if ( VAR_745 == VAR_746 ) break ; <S2SV_ModStart> VAR_639 . VAR_610 ; VAR_745 = METHOD_128 ( VAR_786 , VAR_786 -> VAR_763 , VAR_786 -> VAR_761 , VAR_744 ) ; if ( VAR_745 == VAR_746 ) break <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_748 : (
<S2SV_ModStart> { if ( * VAR_119 [ 1 ] == ':' || METHOD_23 ( VAR_119 [ 1 ] , '<S2SV_blank>' ) ) return METHOD_68 ( VAR_123 , VAR_1 , VAR_1 , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if ( <S2SV_ModStart> { if ( * VAR_119 [ 1 ] == ':' || METHOD_23 ( VAR_119 [ 1 ] , '<S2SV_blank>' ) ) return METHOD_68 ( VAR_123 , VAR_1 , VAR_1 , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if (
<S2SV_ModStart> * VAR_24 ; const unsigned TYPE_4 * VAR_26 = VAR_14 ; unsigned TYPE_4 * VAR_27 = VAR_16 ; TYPE_7 VAR_28 = - 1 ; <S2SV_ModStart> VAR_24 , & VAR_26 <S2SV_ModEnd> , VAR_15 ) <S2SV_ModStart> == VAR_16 ) goto VAR_23 ; VAR_28 = METHOD_5 ( VAR_24 , & VAR_27 ) ; if ( VAR_28 != VAR_15 || METHOD_6 ( VAR_14 , VAR_27 , VAR_28 ) ) <S2SV_ModStart> ; VAR_23 : if ( VAR_28 > 0 ) { METHOD_7 ( VAR_27 , VAR_28 ) ; METHOD_8 ( VAR_27 ) ; }
<S2SV_ModStart> = 0 ; TYPE_8 VAR_57 = 0 ; <S2SV_ModStart> case VAR_38 : VAR_57 = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> VAR_41 ) ; if ( VAR_6 <= VAR_57 ) { VAR_57 = VAR_6 - 1 ; } METHOD_8 ( VAR_56 , ( ( struct STRUCT_OR_UNION_5 * ) VAR_40 ) -> VAR_41 , VAR_57 ) ; VAR_56 [ VAR_57 <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> VAR_126 -> VAR_220 ; METHOD_19 ( VAR_216 ) <S2SV_ModStart> VAR_222 ; } <S2SV_ModEnd> METHOD_36 ( & <S2SV_ModStart> ) ; } if ( VAR_218 ) METHOD_41 ( VAR_218 , VAR_219 , VAR_220 -> VAR_221 ) ; VAR_222 : <S2SV_ModStart> VAR_216 ) ; <S2SV_ModEnd> return VAR_223 ;
<S2SV_ModStart> VAR_17 . VAR_18 && VAR_27
<S2SV_ModStart> TYPE_1 * VAR_10 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> * VAR_115 ; <S2SV_ModEnd> } * VAR_113
<S2SV_ModStart> ++ ) { if ( ! VAR_91 -> VAR_92 ) continue ;
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_16 -> VAR_84 < 0 ) goto VAR_93 ; if (
<S2SV_ModStart> TYPE_3 VAR_10 = METHOD_3 ( <S2SV_ModStart> , & VAR_7 )
<S2SV_ModStart> ; if ( VAR_67 < 0 || VAR_67 > VAR_89 ) return - VAR_90 ; if (
<S2SV_ModStart> ( VAR_46 , "remote_addr" , VAR_125 , 0 ) ; METHOD_23 ( VAR_46 , <S2SV_ModStart> ( & VAR_110 ) ; VAR_126 = METHOD_97 ( "REMOTE_ADDR" ) ; METHOD_104 ( & VAR_126
<S2SV_ModStart> * VAR_36 , TYPE_7 <S2SV_ModEnd> * VAR_34 )
<S2SV_ModStart> = METHOD_27 ( ( TYPE_40 struct STRUCT_OR_UNION_23 * * ) <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> VAR_127 = METHOD_27 <S2SV_ModStart> ; VAR_451 = METHOD_88 ( VAR_846 -> VAR_451 , METHOD_87 ( VAR_854 ) ) ; VAR_451 = <S2SV_ModStart> ( VAR_854 , <S2SV_ModEnd> VAR_451 , VAR_778 <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> ) ) ; METHOD_89 ( & VAR_451 -> VAR_858 , 1 ) ; <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> break ; }
<S2SV_ModStart> ; TYPE_5 VAR_56 <S2SV_ModEnd> ; TYPE_9 VAR_60 <S2SV_ModStart> METHOD_5 ( VAR_55 <S2SV_ModEnd> ) ; VAR_60 <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_19 ( VAR_60
<S2SV_ModStart> VAR_26 ) ; TYPE_10 <S2SV_ModEnd> VAR_111 ; VAR_171 <S2SV_ModStart> 0 ] . VAR_173 = VAR_98 -> VAR_174 [ VAR_162 ] ; VAR_171 -> VAR_149 [ 0 ] . round_fp = VAR_98 -> y_round_fp [ VAR_162 ] ; VAR_171 -> VAR_149 [ 0 ] . <S2SV_ModStart> VAR_162 ] ; VAR_148 -> VAR_149 [ 0 ] . VAR_150 = VAR_170 <S2SV_ModEnd> -> VAR_68 [ <S2SV_ModStart> [ VAR_162 ] ; VAR_171 -> VAR_149 [ 0 ] . quant_thred [ 0 ] = VAR_171 -> VAR_149 [ 0 ] . VAR_147 [ 0 ] * VAR_171 -> VAR_149 [ 0 ] . VAR_147 [ 0 ] ; VAR_171 -> VAR_149 [ 0 ] . quant_thred [ 1 ] = VAR_171 -> VAR_149 [ 0 ] . VAR_147 [ 1 ] * VAR_171 -> VAR_149 [ 0 ] . VAR_147 [ 1 <S2SV_ModEnd> ] ; for <S2SV_ModStart> VAR_111 ] . VAR_173 = VAR_98 -> uv_quant_fp [ VAR_162 ] ; VAR_171 -> VAR_149 [ VAR_111 ] . round_fp = VAR_98 -> uv_round_fp [ VAR_162 ] ; VAR_171 -> VAR_149 [ VAR_111 ] . <S2SV_ModStart> VAR_162 ] ; VAR_148 -> VAR_149 [ VAR_111 ] . VAR_150 = VAR_170 <S2SV_ModEnd> -> VAR_114 [ <S2SV_ModStart> [ VAR_162 ] ; VAR_171 -> VAR_149 [ VAR_111 ] . quant_thred [ 0 ] = VAR_171 -> VAR_149 [ VAR_111 ] . VAR_147 [ 0 ] * VAR_171 -> VAR_149 [ VAR_111 ] . VAR_147 [ 0 ] ; VAR_171 -> VAR_149 [ VAR_111 ] . quant_thred [ 1 ] = VAR_171 -> VAR_149 [ VAR_111 ] . VAR_147 [ 1 ] * VAR_171 -> VAR_149 [ VAR_111 ] . VAR_147 [ 1 <S2SV_ModEnd> ] ; } <S2SV_ModStart> ] ; } <S2SV_ModEnd> VAR_171 -> VAR_155 <S2SV_ModStart> -> VAR_155 = METHOD_5 <S2SV_ModEnd> ( & VAR_156 <S2SV_ModStart> VAR_170 , VAR_171 , VAR_171
<S2SV_ModStart> ; if ( METHOD_131 ( ) == ( TYPE_25 ) - 1 ) METHOD_130 ( "setsid" ) ; if (
<S2SV_ModStart> ) ) ; if ( METHOD_27 ( METHOD_26 ( STRUCT_OR_UNION_8 ) <= 0 ) ) { if ( VAR_107 ) { METHOD_25 ( VAR_125 ) ; VAR_127 = 0 ; VAR_132 = - VAR_133 ; break ; } }
<S2SV_ModStart> VAR_33 ) ; METHOD_16 ( <S2SV_ModStart> METHOD_7 ( VAR_33 )
<S2SV_ModStart> ; VAR_385 = ( <S2SV_ModStart> , 4 ) + 1 ) % 0xf <S2SV_ModStart> ] = VAR_385 <S2SV_ModEnd> ; VAR_553 -> <S2SV_ModStart> VAR_400 [ VAR_385 <S2SV_ModEnd> ] ; VAR_556 <S2SV_ModStart> VAR_406 [ VAR_385 <S2SV_ModEnd> ] ; }
<S2SV_ModStart> VAR_25 ) ; VAR_43 = METHOD_13 ( STRUCT_OR_UNION_10 ) ; if ( VAR_43 < 0 ) goto VAR_41 ; <S2SV_ModEnd> VAR_43 = METHOD_5
<S2SV_ModStart> VAR_224 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> VAR_238 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> -> VAR_224 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 -> <S2SV_ModStart> -> VAR_238 * ( METHOD_13 ( TYPE_10 , 1 ) << <S2SV_ModEnd> ( VAR_272 ->
<S2SV_ModStart> TYPE_1 ) { <S2SV_ModEnd> TYPE_2 * VAR_10 <S2SV_ModStart> VAR_13 ) ; unsigned TYPE_3 VAR_14 <S2SV_ModEnd> ; VAR_10 [ <S2SV_ModStart> ( ) ; METHOD_6 <S2SV_ModEnd> ( VAR_10 , <S2SV_ModStart> ( VAR_10 , random_int_secret ) ; VAR_14 = VAR_10 [ 0 ] <S2SV_ModEnd> ; METHOD_5 (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_8 ) ; return
<S2SV_ModStart> VAR_256 -> VAR_66 <= 0 ) { VAR_256 -> VAR_66 = 0 ; goto VAR_238 ; } <S2SV_ModEnd> VAR_256 -> VAR_235 <S2SV_ModStart> ; else { METHOD_37 ( VAR_73 <= VAR_256 -> VAR_66 ) ;
<S2SV_ModStart> = METHOD_6 ( 0
<S2SV_ModStart> 1 ] ; if ( VAR_167 < VAR_158 ) return 0 ; <S2SV_ModStart> VAR_189 ) ) { if ( VAR_167 < VAR_168 ) return 0 ; <S2SV_ModStart> -= VAR_168 ; }
<S2SV_ModStart> VAR_35 , const TYPE_9 <S2SV_ModEnd> VAR_30 , const <S2SV_ModStart> VAR_8 ) { TYPE_9 <S2SV_ModEnd> VAR_42 = 0
<S2SV_ModStart> , VAR_64 , METHOD_20 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> VAR_60 ) , METHOD_20 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> ; } } return ( <S2SV_ModStart> VAR_101 , 16 , VAR_97 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> <= VAR_5 ) { METHOD_6 <S2SV_ModEnd> ( VAR_10 ) <S2SV_ModStart> VAR_10 ) ; METHOD_7 ( VAR_10 ) ; }
<S2SV_ModStart> VAR_21 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> ( VAR_106 , "who-has<S2SV_blank>" ) ) ; METHOD_68 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_106 , "<S2SV_blank>tell<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_65 : METHOD_69 ( VAR_106 , VAR_100 , VAR_38 ) ; METHOD_67 ( ( VAR_106 , "<S2SV_blank>is-at<S2SV_blank>" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_106 , "at<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( VAR_106 , "for<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> case VAR_89 : if ( VAR_340 -> VAR_295 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> break ; } if ( VAR_340 -> VAR_341 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> break ; } if ( VAR_340 -> VAR_146 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> VAR_289 * 4 ) return ( - 1 ) ; if ( VAR_288 -> VAR_198 != VAR_338 <S2SV_ModStart> * VAR_272 ; if ( VAR_340 -> VAR_264 != VAR_338 ) return ( - 1 ) ;
<S2SV_ModStart> VAR_28 ) { TYPE_1 * VAR_31 = VAR_28 -> VAR_32 ; <S2SV_ModStart> { METHOD_1 ( VAR_31 -> VAR_33 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_33 = VAR_40 && VAR_40 -> VAR_20 > 0
<S2SV_ModStart> VAR_69 ) { return METHOD_12 ( VAR_17 , VAR_18 , VAR_69 <S2SV_ModEnd> , VAR_20 , <S2SV_ModStart> VAR_20 , VAR_20 , VAR_20 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0 ) ; TYPE_42 VAR_278 = VAR_268 -> VAR_185 ; if ( VAR_278 < 1 ) { goto VAR_272 ; } VAR_248 += VAR_278 <S2SV_ModEnd> ; for (
<S2SV_ModStart> ( VAR_30 ) { * VAR_27 = "DECODE_PA_FOR_USER" ; return VAR_30 ; } <S2SV_ModEnd> VAR_30 = METHOD_2
<S2SV_ModStart> VAR_50 , VAR_39 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> . VAR_303 ) || ( VAR_470 -> VAR_454 & VAR_455 ) != 0
<S2SV_ModStart> * VAR_109 ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , <S2SV_ModStart> TYPE_23 , VAR_122 [ <S2SV_ModEnd> 16 * 4 <S2SV_ModStart> 16 * 4 ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , <S2SV_ModStart> TYPE_18 , VAR_121 [ 16 ] <S2SV_ModEnd> ) ; TYPE_25 <S2SV_ModStart> VAR_113 ) ; METHOD_11 <S2SV_ModEnd> ( VAR_121 ,
<S2SV_ModStart> -> VAR_76 ; <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> -> VAR_79 ; <S2SV_ModEnd> if ( VAR_53 <S2SV_ModStart> VAR_53 ) { struct STRUCT_OR_UNION_2 * VAR_51 ; TYPE_3 VAR_54 = VAR_78 -> VAR_50 , VAR_81 = VAR_53 ; TYPE_4 VAR_74 = VAR_78 -> VAR_74 ; <S2SV_ModStart> ( VAR_54 ) VAR_81 <S2SV_ModEnd> += VAR_54 - <S2SV_ModStart> ; if ( VAR_81 <S2SV_ModEnd> <= VAR_51 -> <S2SV_ModStart> ) break ; VAR_81 <S2SV_ModEnd> -= VAR_51 -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_78 -> VAR_74 <S2SV_ModStart> = VAR_74 ; <S2SV_ModEnd> VAR_78 -> VAR_50 <S2SV_ModStart> -> VAR_52 + VAR_81 ; <S2SV_ModEnd> } VAR_78 -> <S2SV_ModStart> -> VAR_79 -= VAR_53 ; METHOD_6 ( VAR_78 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_13 ) { TYPE_10 <S2SV_ModEnd> * VAR_41 = <S2SV_ModStart> VAR_37 = VAR_22 <S2SV_ModEnd> ; TYPE_8 VAR_38 <S2SV_ModStart> , "base_direction" , <S2SV_ModEnd> "clean" , "reordernsm" <S2SV_ModStart> , VAR_13 , "U|iii" <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_37 , & <S2SV_ModEnd> VAR_38 , & <S2SV_ModStart> VAR_39 ) ) { <S2SV_ModStart> return VAR_20 ; } <S2SV_ModStart> VAR_26 ) ) { <S2SV_ModStart> VAR_37 ) ; } return METHOD_8 <S2SV_ModEnd> ( VAR_41 , <S2SV_ModStart> VAR_39 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> VAR_58 = 0660 <S2SV_ModEnd> ; if (
<S2SV_ModStart> -> VAR_922 ; VAR_923 -> VAR_926 = 0 ;
<S2SV_ModStart> ; if ( ( TYPE_6 ) <S2SV_ModStart> <= 0 || ( TYPE_6 ) <S2SV_ModStart> VAR_80 -> VAR_9 <= 0 || ( TYPE_6 ) ( VAR_80 -> VAR_111 * VAR_80 -> VAR_9 )
<S2SV_ModStart> VAR_41 , VAR_42 ; if ( METHOD_6 ( ) > 0 ) return - VAR_58
<S2SV_ModStart> ; VAR_11 -> VAR_14 &= ~ VAR_15 ; VAR_11 ->
<S2SV_ModStart> goto VAR_39 ; <S2SV_ModEnd> if ( VAR_38
<S2SV_ModStart> * METHOD_0 ( const TYPE_3 <S2SV_ModEnd> * VAR_12 , <S2SV_ModStart> < VAR_9 ; VAR_14 ++ <S2SV_ModEnd> ) { VAR_21 <S2SV_ModStart> { VAR_21 = cJSON_CreateNumber <S2SV_ModEnd> ( VAR_12 [ <S2SV_ModStart> ] ) ; if ( ! VAR_21 ) { METHOD_4 ( VAR_22 ) ; return 0 ; }
<S2SV_ModStart> METHOD_7 ( VAR_69 , VAR_28
<S2SV_ModStart> -> VAR_94 ; TYPE_13 VAR_99 = VAR_90 * VAR_91 ; <S2SV_ModStart> -> VAR_20 ; if ( ( METHOD_7 ( VAR_88 -> VAR_89 ) == 0 ) || ( VAR_90 == 0 ) || ( VAR_91 == 0 ) || ( VAR_90 > VAR_100 / VAR_91 ) || ( VAR_99 > ( VAR_100 / METHOD_7 ( VAR_88 -> VAR_89 ) ) ) ) return VAR_97 ; VAR_99 *= METHOD_7 ( VAR_88 -> VAR_89 ) ; <S2SV_ModStart> -> VAR_84 = VAR_99 <S2SV_ModEnd> ; VAR_88 ->
<S2SV_ModStart> VAR_7 ) { if ( VAR_5 < 0 || VAR_5 >= VAR_3 -> VAR_8 ) return ;
<S2SV_ModStart> ( VAR_59 . VAR_67 <S2SV_ModEnd> && METHOD_13 ( <S2SV_ModStart> ; VAR_59 . VAR_68 <S2SV_ModEnd> -- ; METHOD_6
<S2SV_ModStart> VAR_18 , 1 <S2SV_ModEnd> , VAR_92 ,
<S2SV_ModStart> -> VAR_110 ; if ( VAR_146 -> VAR_160 == 1 ) { VAR_146 -> VAR_110 = VAR_146 -> VAR_161 ; return VAR_146 -> VAR_161 ; }
<S2SV_ModStart> * VAR_19 ; METHOD_2 ( & VAR_20 ) ; <S2SV_ModStart> ; if ( VAR_19 ) { <S2SV_ModEnd> VAR_23 -> VAR_10 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_23 <S2SV_ModStart> ) ; } METHOD_8 ( & VAR_20 ) ; }
<S2SV_ModStart> ; if ( METHOD_46 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> ( TYPE_26 ) METHOD_23 <S2SV_ModEnd> ( VAR_104 ->
<S2SV_ModStart> VAR_119 < VAR_24 && VAR_87 < sizeof ( VAR_121 ) - 1 ; VAR_119 ++ , VAR_87 <S2SV_ModEnd> ++ ) { <S2SV_ModStart> 0x80 ) { if ( VAR_87 + 1 < sizeof ( VAR_121 ) - 1 ) { <S2SV_ModStart> ; } else break ; } else <S2SV_ModStart> 0xc0 ) { if ( VAR_87 + 1 < sizeof ( VAR_121 ) - 1 && VAR_119 + 1 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0xe0 ) { if ( VAR_87 + 2 < sizeof ( VAR_121 ) - 1 && VAR_119 + 2 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0xf0 ) { if ( VAR_87 + 3 < sizeof ( VAR_121 ) - 1 && VAR_119 + 3 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ; } } if ( VAR_87 < sizeof ( VAR_121 ) - 1 && VAR_119 < VAR_24 ) VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; } if ( VAR_87 >= sizeof ( VAR_121 ) ) VAR_121 [ sizeof ( VAR_121 ) - 1 ] = 0 ; else <S2SV_ModEnd> VAR_121 [ VAR_87
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> { TYPE_3 VAR_6 ; if ( ! VAR_5 ) return VAR_11 ; if ( METHOD_6 ( VAR_10 ) < 6 ) return VAR_11 <S2SV_ModStart> VAR_10 ) ; return VAR_12 ;
<S2SV_ModStart> TYPE_3 VAR_14 ; TYPE_6 <S2SV_ModEnd> VAR_19 [ 2
<S2SV_ModStart> VAR_211 ) ; VAR_263 -> VAR_265 = VAR_263 -> VAR_211 ;
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> while ( VAR_16 && ( VAR_26 <= 16 ) <S2SV_ModStart> VAR_26 -= 1 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 -> VAR_2 . VAR_4 ) <S2SV_ModStart> VAR_4 ) ; else return VAR_5 ;
<S2SV_ModStart> VAR_387 ) ; if ( VAR_384 -> VAR_385 == VAR_377 && ! VAR_352 -> VAR_324 ) { METHOD_66 ( VAR_382 , VAR_383 , "Empty<S2SV_blank>audio<S2SV_blank>Packet\\n" ) ; return METHOD_27 ( VAR_215 ) ; }
<S2SV_ModStart> if ( VAR_214 > <S2SV_ModEnd> 4 ) {
<S2SV_ModStart> VAR_652 ; } { TYPE_83 VAR_721 [ 32 ] ; TYPE_75 VAR_722 = VAR_643 -> VAR_723 [ VAR_606 ] -> VAR_646 ; TYPE_75 VAR_724 = VAR_718 -> VAR_646 + VAR_722 ; TYPE_83 * VAR_725 = ( TYPE_83 * ) METHOD_113 ( VAR_724 * sizeof ( TYPE_83 ) ) ; METHOD_115 ( VAR_725 , VAR_702 + VAR_642 , VAR_718 -> VAR_646 ) ; METHOD_115 ( VAR_725 + VAR_718 -> VAR_646 , VAR_643 -> VAR_723 [ VAR_606 ] -> VAR_701 + VAR_642 , VAR_722 ) ; VAR_643 -> METHOD_116 ( VAR_725 , VAR_724 , 32 , VAR_721 ) ; METHOD_110 ( VAR_725 ) ; if ( METHOD_105 ( VAR_721 , VAR_570 -> VAR_286 , 32 ) != 0 ) { METHOD_110 ( VAR_720 ) ; return VAR_726 ; } }
<S2SV_ModStart> struct STRUCT_OR_UNION_2 * VAR_11 ; struct STRUCT_OR_UNION_5 VAR_12 ; struct STRUCT_OR_UNION_6 * VAR_13 ; const TYPE_1 * VAR_14 ; TYPE_0 VAR_15 ; TYPE_2 * VAR_16 = VAR_17 ; TYPE_0 VAR_18 ; if ( <S2SV_ModEnd> STRUCT_OR_UNION_4 -> VAR_1 <S2SV_ModStart> STRUCT_OR_UNION_4 -> VAR_1 ) return 0 ; VAR_18 = METHOD_2 ( STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_7 ) ; if ( VAR_18 ) return VAR_18 <S2SV_ModStart> if ( ! STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_3 ) return - VAR_21 ; VAR_18 = STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_3 ( STRUCT_OR_UNION_4 , & VAR_12 , sizeof ( VAR_12 ) ) ; if ( VAR_18 < 0 ) { if ( ! METHOD_4 ( STRUCT_OR_UNION_4 ) || STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> METHOD_5 ( STRUCT_OR_UNION_4 ) ) return VAR_18 ; METHOD_6 ( & VAR_12 , 0 , sizeof ( VAR_12 ) ) ; VAR_12 . VAR_22 = VAR_23 ; VAR_12 . VAR_24 = VAR_25 ; VAR_12 . VAR_26 = VAR_27 ; METHOD_6 ( VAR_12 . VAR_28 , 0x42 , VAR_29 ) ; } else if ( VAR_18 != sizeof ( VAR_12 ) ) { return - VAR_30 ; } if ( VAR_12 . VAR_22 != VAR_23 ) return - VAR_30 ; if ( VAR_12 . VAR_7 & ~ VAR_31 ) return - VAR_30 ; VAR_11 = METHOD_7 ( VAR_32 , VAR_33 ) ; if ( ! VAR_11 ) return - VAR_34 ; VAR_11 -> VAR_35 = VAR_12 . VAR_7 ; VAR_11 -> VAR_36 = VAR_12 . VAR_24 ; VAR_11 -> VAR_37 = VAR_12 . VAR_26 ; VAR_11 -> VAR_38 = VAR_17 ; METHOD_8 ( VAR_11 -> VAR_39 , VAR_12 . VAR_28 , sizeof ( VAR_11 -> VAR_39 ) ) ; VAR_18 = METHOD_9 ( VAR_11 , STRUCT_OR_UNION_4 , & VAR_14 , & VAR_15 ) ; if ( VAR_18 ) goto VAR_40 ; VAR_18 = - VAR_34 ; VAR_16 = METHOD_10 ( VAR_41 , VAR_33 ) ; if ( ! VAR_16 ) goto VAR_40 ; VAR_18 = METHOD_11 ( VAR_11 , & VAR_12 , VAR_16 , VAR_42 ) ; if ( VAR_18 && STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_43 ) { TYPE_0 VAR_44 = METHOD_11 ( VAR_11 , & VAR_12 , VAR_16 , STRUCT_OR_UNION_4 -> VAR_19 -> VAR_20 -> VAR_43 ) ; if ( VAR_44 ) { if ( VAR_44 == - VAR_45 ) VAR_18 = - VAR_45 ; goto VAR_40 ; } } else if ( VAR_18 ) { goto VAR_40 ; } VAR_13 = METHOD_12 ( VAR_14 , 0 , 0 ) ; if ( ! VAR_13 || METHOD_13 ( VAR_13 ) ) { VAR_18 = VAR_13 ? METHOD_14 ( VAR_13 ) : - VAR_34 ; printk ( KERN_DEBUG "%s:<S2SV_blank>error<S2SV_blank>%d<S2SV_blank>(inode<S2SV_blank>%u)<S2SV_blank>allocating<S2SV_blank>crypto<S2SV_blank>tfm\\n" , VAR_46 , VAR_18 , ( unsigned ) STRUCT_OR_UNION_4 -> VAR_47 ) ; goto VAR_40 ; } VAR_11 -> VAR_38 = VAR_13 ; METHOD_15 ( VAR_13 , ~ 0 ) ; METHOD_16 ( VAR_13 , VAR_48 ) ; VAR_18 = METHOD_17 ( VAR_13 , VAR_16 , VAR_15 ) ; if ( VAR_18 ) goto VAR_40 ; if ( METHOD_18 ( & STRUCT_OR_UNION_4 -> VAR_1 , VAR_17 , VAR_11 ) == VAR_17 ) VAR_11 = VAR_17 ; VAR_40 : if ( VAR_18 == - VAR_45 ) VAR_18 = 0 ; METHOD_19 ( VAR_11 ) ; METHOD_20 ( VAR_16 ) ; return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) ) { if ( METHOD_22 ( VAR_157 >= VAR_143 -> VAR_61 ) ) { VAR_186 = VAR_185 ; break ; }
<S2SV_ModStart> VAR_58 ) { if ( VAR_60 -> VAR_50 ) { <S2SV_ModStart> "" ) ; } else { METHOD_5 ( "Sending<S2SV_blank>response<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>%s" , VAR_60 -> VAR_61 , VAR_32 ? "(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)" : "" ) ; }
<S2SV_ModStart> , VAR_89 , VAR_91 ,
<S2SV_ModStart> ; if ( VAR_205 &&
<S2SV_ModStart> { TYPE_1 VAR_10 ; METHOD_5 ( VAR_23 , VAR_23 -> VAR_5 , 0 ) ; METHOD_6 ( VAR_23 -> VAR_24 )
<S2SV_ModStart> "hash_max_zipmap_value:%zu\\r\\n" "pubsub_channels:%ld\\r\\n" "pubsub_patterns:%u\\r\\n" "ds_enabled:%d\\r\\n" <S2SV_ModEnd> "role:%s\\r\\n" , VAR_15 <S2SV_ModStart> , VAR_199 . VAR_211 <S2SV_ModEnd> != 0 , <S2SV_ModStart> ( VAR_199 . VAR_211 <S2SV_ModEnd> ) { METHOD_25 <S2SV_ModStart> ( VAR_210 , "cache_max_memory:%llu\\r\\n" "cache_blocked_clients:%lu\\r\\n" <S2SV_ModEnd> , ( unsigned <S2SV_ModStart> ) VAR_199 . VAR_212 <S2SV_ModEnd> , ( unsigned <S2SV_ModStart> ( unsigned TYPE_49 ) VAR_199 . VAR_213 <S2SV_ModEnd> ) ; METHOD_30
<S2SV_ModStart> ; VAR_24 = METHOD_5 <S2SV_ModEnd> ( VAR_13 ->
<S2SV_ModStart> TYPE_6 * VAR_7 , TYPE_7 VAR_25 ) { const TYPE_6 * VAR_13 = "`\\"\\\\" ; if ( ! VAR_25 ) VAR_13 ++ <S2SV_ModEnd> ; TYPE_6 *
<S2SV_ModStart> VAR_16 ) { <S2SV_ModEnd> VAR_14 -> VAR_13 <S2SV_ModStart> VAR_14 -> VAR_13 . ptr [ <S2SV_ModEnd> VAR_14 -> VAR_13 <S2SV_ModStart> VAR_14 -> VAR_13 . VAR_17 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_14 -> VAR_13 . ptr <S2SV_ModStart> [ VAR_14 -> VAR_13 . VAR_17 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_77 -> VAR_79 = 8 ; VAR_77 ->
<S2SV_ModStart> &= VAR_16 ; if ( VAR_75 == 3 ) return 0 ;
<S2SV_ModStart> { if ( ! VAR_76 ||
<S2SV_ModStart> , VAR_19 , VAR_65 , VAR_66 , <S2SV_ModStart> * VAR_57 ; TYPE_6 VAR_67 ; <S2SV_ModStart> VAR_15 ) ; VAR_66 = METHOD_17 ( METHOD_10 ( VAR_59 , METHOD_11 ( VAR_59 ) - 2 ) ) == VAR_68 ; VAR_65 = METHOD_11 ( VAR_59 ) - VAR_66 ; <S2SV_ModStart> VAR_19 = ( VAR_65 <S2SV_ModEnd> - 2 ) <S2SV_ModStart> ; VAR_35 < VAR_65 <S2SV_ModEnd> - 2 ; <S2SV_ModStart> ; if ( VAR_66 ) { VAR_67 = METHOD_18 ( METHOD_10 ( VAR_59 , METHOD_11 ( VAR_59 ) - 2 ) ) ; if ( ! VAR_67 ) return VAR_42 ; } else VAR_67 = VAR_42 ; if ( <S2SV_ModStart> , VAR_57 , VAR_67 , <S2SV_ModStart> VAR_56 , VAR_57 , VAR_67
<S2SV_ModStart> * VAR_56 && ( <S2SV_ModStart> VAR_56 != \'\\"\' ) && ( VAR_48 != ( VAR_49 + sizeof ( VAR_49 ) - 1 ) ) <S2SV_ModStart> ) * VAR_56 ) && ( VAR_48 != ( VAR_49 + sizeof ( VAR_49 ) - 1 )
<S2SV_ModStart> VAR_12 ) { if ( VAR_60 + 4 > VAR_12 ) return - 1 ; <S2SV_ModStart> 4 ) ) ; if ( VAR_60 + 4 + VAR_61 > VAR_12 ) return - 1
<S2SV_ModStart> -> VAR_9 = METHOD_6 <S2SV_ModEnd> ( VAR_13 , <S2SV_ModStart> -> VAR_24 = METHOD_6 <S2SV_ModEnd> ( VAR_17 +
<S2SV_ModStart> ) VAR_115 ) { VAR_130 = METHOD_33 ( VAR_130 ) ; <S2SV_ModStart> "UnableToReadImageData" ) ; }
<S2SV_ModStart> ) { const TYPE_6 <S2SV_ModEnd> * VAR_14 = <S2SV_ModStart> -> VAR_13 * VAR_40 <S2SV_ModEnd> -> VAR_15 /
<S2SV_ModStart> ; register struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_42 ; <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) ; VAR_32 <S2SV_ModStart> ; VAR_42 -> VAR_44 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> == VAR_38 ) <S2SV_ModStart> ( VAR_42 -> VAR_44 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * VAR_21 , TYPE_3 VAR_3 , TYPE_2 VAR_24 <S2SV_ModEnd> ) { TYPE_2 <S2SV_ModStart> = 0 ; if ( VAR_24 & VAR_6 ) goto VAR_25 ; <S2SV_ModStart> VAR_17 | VAR_18 <S2SV_ModEnd> ) ) { <S2SV_ModStart> 0 ; } VAR_25 :
<S2SV_ModStart> VAR_84 || VAR_79 + VAR_80 < VAR_79 || VAR_79 + VAR_80
<S2SV_ModStart> ; if ( VAR_51 < 10 || VAR_51 > 20 ) return - 1 ; if (
<S2SV_ModStart> VAR_56 ) { TYPE_12 <S2SV_ModEnd> VAR_39 = sizeof
<S2SV_ModStart> ; if ( ( unsigned TYPE_11 ) VAR_24 > ( unsigned TYPE_11 ) <S2SV_ModEnd> TYPE_15 ) VAR_24
<S2SV_ModStart> ( VAR_563 , "%s" , VAR_564 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_10 ) ; VAR_37 -> VAR_26 = VAR_27 ;
<S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } VAR_72 <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } VAR_73 <S2SV_ModStart> - 2 ; VAR_79 : METHOD_14 ( VAR_74 ) ; VAR_74 = VAR_75 ; return - 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_6 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> ) ) ; METHOD_16 ( VAR_63 [ 2 ] ) ; <S2SV_ModStart> ) ) ; METHOD_16 ( VAR_63 [ 3 ] ) ; <S2SV_ModStart> VAR_56 = "<S2SV_blank>^<S2SV_blank>" ; METHOD_17 ( VAR_63 [ VAR_60 ] , VAR_52 ) <S2SV_ModStart> ) ) ; return ( 0 ) ; VAR_65 : return ( - 1 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_14 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> -> VAR_152 ; if ( VAR_205 == VAR_153 -> METHOD_17 ) return - 1 ; <S2SV_ModStart> -> VAR_152 ; if ( VAR_205 == VAR_153 -> METHOD_17 ) return - 1 ; <S2SV_ModStart> ; } } return 0 ;
<S2SV_ModStart> VAR_144 ; } <S2SV_ModEnd> } else if <S2SV_ModStart> VAR_144 ; } <S2SV_ModEnd> } else if <S2SV_ModStart> VAR_144 ; } } else <S2SV_ModEnd> { METHOD_30 (
<S2SV_ModStart> VAR_6 ) { TYPE_3 VAR_7 <S2SV_ModEnd> ; VAR_7 = <S2SV_ModStart> METHOD_2 ( STRUCT_OR_UNION_4 <S2SV_ModEnd> , VAR_5 ,
<S2SV_ModStart> TYPE_9 VAR_50 ; <S2SV_ModEnd> TYPE_6 * VAR_68 <S2SV_ModStart> TYPE_7 * * VAR_69 <S2SV_ModEnd> = VAR_40 -> <S2SV_ModStart> , VAR_68 , "Ref<S2SV_blank>frame:" , METHOD_13 ( VAR_38 , VAR_31 [ 0 ] ) ) ; METHOD_12 ( VAR_40 , VAR_68 , "Transform:" , METHOD_13 ( VAR_38 , VAR_35 ) ) ; METHOD_12 ( VAR_40 , VAR_68 , "UV<S2SV_blank>Modes:" , METHOD_13 ( VAR_38 , VAR_39 ) ) ; METHOD_14 ( VAR_40 , "Skips:" <S2SV_ModEnd> , VAR_68 ) <S2SV_ModStart> ( VAR_68 , "S<S2SV_blank>" <S2SV_ModEnd> ) ; for <S2SV_ModStart> ( VAR_68 , "%2d<S2SV_blank>" , VAR_69 [ 0 <S2SV_ModEnd> ] -> VAR_60 <S2SV_ModStart> -> VAR_60 . VAR_27 ) ; VAR_69 <S2SV_ModEnd> ++ ; } <S2SV_ModStart> "\\n" ) ; VAR_69 <S2SV_ModEnd> += 8 ; <S2SV_ModStart> "\\n" ) ; METHOD_14 ( VAR_40 , "Vectors<S2SV_blank>" , VAR_68 ) ; VAR_69 = VAR_40 -> VAR_9 ; for ( VAR_45 = 0 ; VAR_45 < VAR_44 ; VAR_45 ++ ) { METHOD_18 ( VAR_68 , "V<S2SV_blank>" ) ; for ( VAR_50 = 0 ; VAR_50 < VAR_49 ; VAR_50 ++ ) { METHOD_18 ( VAR_68 , "%4d:%4d<S2SV_blank>" , VAR_69 [ 0 ] -> VAR_60 . VAR_61 [ 0 ] . VAR_62 . VAR_57 , VAR_69 [ 0 ] -> VAR_60 . VAR_61 [ 0 ] . VAR_62 . VAR_63 ) ; VAR_69 ++ ; } METHOD_18 ( VAR_68 , "\\n" ) ; VAR_69 += 8 ; } METHOD_18 ( VAR_68 , "\\n" ) ;
<S2SV_ModStart> VAR_116 ) ; VAR_97 = ( TYPE_9 ) - 1 ; <S2SV_ModStart> if ( VAR_115 && VAR_97 != ( TYPE_9 ) - 1 <S2SV_ModStart> VAR_115 ) { if ( VAR_97 != ( TYPE_9 ) - 1 ) { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> 1 ) ; if ( ! VAR_46 && VAR_43 -> VAR_44 . VAR_47 ) VAR_46 = - VAR_48 ;
<S2SV_ModStart> VAR_9 ; } if ( VAR_10 -> VAR_12 . VAR_14 < 1 ) return - VAR_15 ;
<S2SV_ModStart> VAR_12 ) return - VAR_20 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_24 , struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_38 ) <S2SV_ModStart> VAR_14 ) ; if ( VAR_24 -> VAR_25 && ( ( VAR_24 -> VAR_39 . VAR_40 > 1 && VAR_24 -> VAR_41 . VAR_42 == VAR_43 ) || ( VAR_24 -> VAR_39 . VAR_44 > 1 && VAR_24 -> VAR_39 . VAR_45 [ VAR_24 -> VAR_39 . VAR_46 ] . VAR_47 ) || ( METHOD_6 ( VAR_24 ) && VAR_24 -> VAR_39 . VAR_48 == VAR_49 && VAR_24 -> VAR_39 . VAR_45 [ 0 ] . VAR_50 < VAR_24 -> VAR_39 . VAR_40 + 1 ) ) ) { VAR_30 = 0 ; } else if ( VAR_22 != VAR_51 ) { <S2SV_ModStart> -> VAR_23 ; } METHOD_7 <S2SV_ModEnd> ( VAR_38 , <S2SV_ModStart> VAR_30 ) { METHOD_8 <S2SV_ModEnd> ( VAR_38 , <S2SV_ModStart> 16 ) ; METHOD_8 <S2SV_ModEnd> ( VAR_38 ,
<S2SV_ModStart> * VAR_20 ; if <S2SV_ModEnd> ( VAR_9 == <S2SV_ModStart> == VAR_6 ) return 0
<S2SV_ModStart> ; TYPE_5 VAR_151 ; if ( VAR_111 < 0 || VAR_111 >= VAR_154 ) return - VAR_155
<S2SV_ModStart> TYPE_3 ) ) ; if ( VAR_32 == VAR_28 ) return VAR_28
<S2SV_ModStart> * STRUCT_OR_UNION_14 , TYPE_3 VAR_75 , <S2SV_ModStart> -> VAR_45 , VAR_75 <S2SV_ModEnd> ) ; VAR_74 <S2SV_ModStart> STRUCT_OR_UNION_14 , VAR_70 , VAR_75
<S2SV_ModStart> VAR_1092 ) { METHOD_266 ( * VAR_1091 , VAR_514 ) ;
<S2SV_ModStart> ] ) { TYPE_1 VAR_33 = 0 ; <S2SV_ModStart> "\\n\\nThe<S2SV_blank>script<S2SV_blank>contains<S2SV_blank>errors...\\n\\n" ) ; VAR_33 = <S2SV_ModEnd> METHOD_21 ( ) <S2SV_ModStart> METHOD_21 ( ) ; if ( VAR_33 == - E_NOTHANDLED ) METHOD_22 ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correctly<S2SV_blank>handled." , VAR_31 -> VAR_32 ) ; else if ( VAR_33 == - E_INVALID ) METHOD_22 ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>format<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct.<S2SV_blank>" <S2SV_ModEnd> , VAR_31 ->
<S2SV_ModStart> ; METHOD_27 ( "%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n" , ( TYPE_20 TYPE_20 ) <S2SV_ModEnd> VAR_63 -> VAR_41 <S2SV_ModStart> -> VAR_41 , ( TYPE_20 TYPE_20 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 * VAR_48 , TYPE_11 * VAR_64 ) { const TYPE_3 * VAR_8 = & VAR_64 <S2SV_ModEnd> -> VAR_6 ; <S2SV_ModStart> -> VAR_45 ; const TYPE_12 * const VAR_65 = VAR_8 -> VAR_65 ; const TYPE_13 VAR_66 = VAR_45 -> VAR_67 ; <S2SV_ModStart> ) ) { TYPE_8 * const VAR_59 = VAR_64 -> VAR_59 ; const TYPE_9 VAR_33 = METHOD_3 ( VAR_45 ) ; <S2SV_ModStart> TYPE_9 VAR_23 = METHOD_11 <S2SV_ModEnd> ( & VAR_48 <S2SV_ModStart> VAR_23 ) { <S2SV_ModEnd> VAR_59 -> VAR_30 <S2SV_ModStart> } } } if ( VAR_33 && ! METHOD_11 ( & VAR_48 -> VAR_19 , VAR_45 -> VAR_21 , VAR_68 ) ) { const TYPE_9 VAR_69 = VAR_65 -> VAR_70 [ VAR_45 -> VAR_36 [ 0 ] ] ; if ( VAR_66 >= VAR_71 ) { const TYPE_14 VAR_72 = VAR_45 -> VAR_72 ; ++ VAR_59 -> VAR_73 [ VAR_69 ] [ METHOD_12 ( VAR_72 ) ] ; } else { const TYPE_9 VAR_74 = VAR_75 [ VAR_66 ] ; const TYPE_9 VAR_76 = VAR_77 [ VAR_66 ] ; TYPE_9 VAR_78 , VAR_79 ; for ( VAR_79 = 0 ; VAR_79 < 2 ; VAR_79 += VAR_76 ) { for ( VAR_78 = 0 ; VAR_78 < 2 ; VAR_78 += VAR_74 ) { const TYPE_9 VAR_80 = VAR_79 * 2 + VAR_78 ; const TYPE_14 VAR_81 = VAR_14 -> VAR_82 [ VAR_80 ] . VAR_83 ; ++ VAR_59 -> VAR_73 [ VAR_69 ] [ METHOD_12 ( VAR_81 ) ] ; } } } }
<S2SV_ModStart> VAR_24 ) ; VAR_28 -> VAR_29 += VAR_28 -> VAR_30 ; VAR_28 -> VAR_30 = 0 ;
<S2SV_ModStart> VAR_71 ; } return ( <S2SV_ModStart> VAR_73 , 3 , VAR_69 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_29 , TYPE_6 <S2SV_ModEnd> * VAR_35 , <S2SV_ModStart> case VAR_6 : METHOD_18 <S2SV_ModEnd> ( VAR_29 ,
<S2SV_ModStart> ) ) ; if ( VAR_58 -> VAR_52 [ VAR_56 ] == VAR_25 ) { for ( VAR_57 = 0 ; VAR_57 < VAR_56 ; VAR_57 ++ ) { METHOD_7 ( VAR_33 , VAR_58 -> VAR_52 [ VAR_57 ] ) ; } METHOD_7 ( VAR_33 , VAR_58 -> VAR_52 ) ; METHOD_7 ( VAR_33 , VAR_58 ) ; return VAR_25 ; }
<S2SV_ModStart> == 2 && METHOD_9 <S2SV_ModEnd> ( VAR_36 , <S2SV_ModStart> == VAR_22 && METHOD_9 <S2SV_ModEnd> ( VAR_36 ,
<S2SV_ModStart> -> VAR_32 ; VAR_37 . VAR_60 = 0 ;
<S2SV_ModStart> ( ! VAR_35 || VAR_4 < 2 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; }
<S2SV_ModStart> * VAR_9 , <S2SV_ModEnd> const TYPE_4 * <S2SV_ModStart> const TYPE_4 * VAR_19 ) { const <S2SV_ModEnd> TYPE_4 * VAR_16 <S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_64 , TYPE_3 VAR_153 , TYPE_3 VAR_154 <S2SV_ModEnd> , TYPE_23 VAR_66 <S2SV_ModStart> ; TYPE_23 VAR_123 ; VAR_123 = VAR_66 & VAR_62 ? VAR_154 : VAR_153 <S2SV_ModEnd> ; VAR_144 =
<S2SV_ModStart> METHOD_0 ( const TYPE_4 <S2SV_ModEnd> * VAR_104 , <S2SV_ModStart> VAR_110 ) { TYPE_2 VAR_112 ; <S2SV_ModStart> && VAR_104 -> VAR_113 == VAR_114 <S2SV_ModEnd> ) { VAR_110 <S2SV_ModStart> -> VAR_32 [ VAR_115 <S2SV_ModEnd> ] = VAR_104 <S2SV_ModStart> -> VAR_32 [ VAR_116 <S2SV_ModEnd> ] = VAR_104 <S2SV_ModStart> -> VAR_32 [ VAR_115 <S2SV_ModEnd> ] = ( <S2SV_ModStart> -> VAR_32 [ VAR_116 <S2SV_ModEnd> ] = ( <S2SV_ModStart> / 2 ; } VAR_110 -> VAR_46 [ VAR_115 ] = VAR_104 -> VAR_48 ; VAR_110 -> VAR_46 [ VAR_116 ] = VAR_104 -> VAR_105 ; VAR_110 -> VAR_50 = VAR_110 -> VAR_56 ; VAR_110 -> VAR_54 = VAR_110 -> VAR_56 ; VAR_110 -> VAR_58 = VAR_110 -> avg_frame_bandwidth ; VAR_110 -> VAR_62 = VAR_110 -> avg_frame_bandwidth ; VAR_110 -> VAR_66 = VAR_110 -> avg_frame_bandwidth ; VAR_110 -> VAR_70 = VAR_110 -> avg_frame_bandwidth ; VAR_110 -> VAR_74 = 0 ; VAR_110 -> total_target_bits = 0 ; VAR_110 -> VAR_76 = 0 ; VAR_110 -> VAR_81 = 8 ; VAR_110 -> VAR_83 = 0 ; VAR_110 -> VAR_85 = 0 ; VAR_110 -> VAR_87 = 0 ; VAR_110 -> VAR_89 = 0 ; VAR_110 -> VAR_91 = 0 ; VAR_110 -> VAR_93 = VAR_104 -> VAR_105 ; VAR_110 -> VAR_97 = 0 ; VAR_110 -> VAR_99 = 0 ; VAR_110 -> VAR_101 = 0.0 ; VAR_110 -> VAR_103 = METHOD_1 ( VAR_104 -> VAR_105 , VAR_104 -> bit_depth ) ; for ( VAR_112 = 0 ; VAR_112 < RATE_FACTOR_LEVELS ; ++ VAR_112 ) { VAR_110 -> rate_correction_factors [ VAR_112 ] = 1.0 ; } VAR_110 -> min_gf_interval = VAR_104 -> min_gf_interval ; VAR_110 -> max_gf_interval = VAR_104 -> max_gf_interval ; if ( VAR_110 -> min_gf_interval == 0 ) VAR_110 -> min_gf_interval = vp9_rc_get_default_min_gf_interval ( VAR_104 -> width , VAR_104 -> height , VAR_104 -> init_framerate ) ; if ( VAR_110 -> max_gf_interval == 0 ) VAR_110 -> max_gf_interval = vp9_rc_get_default_max_gf_interval ( VAR_104 -> init_framerate , VAR_110 -> min_gf_interval ) ; VAR_110 -> VAR_78 = ( VAR_110 -> min_gf_interval + VAR_110 -> max_gf_interval <S2SV_ModEnd> ) / 2 <S2SV_ModStart> 2 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> = 0 ; TYPE_12 <S2SV_ModEnd> VAR_13 [ VAR_14
<S2SV_ModStart> , "session<S2SV_blank>authenticated" , VAR_31 <S2SV_ModEnd> , VAR_19 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> * VAR_12 , TYPE_6 * VAR_19 , TYPE_7 <S2SV_ModEnd> * VAR_4 , <S2SV_ModStart> TYPE_4 VAR_18 = METHOD_2 <S2SV_ModEnd> ( VAR_4 , <S2SV_ModStart> VAR_12 -> VAR_7 -> <S2SV_ModEnd> VAR_8 [ VAR_15 <S2SV_ModStart> ] ) ; TYPE_8 * VAR_13 = VAR_19 -> VAR_13 ; if ( VAR_13 ) ++ VAR_13 -> <S2SV_ModEnd> VAR_14 [ VAR_15
<S2SV_ModStart> ; if ( VAR_156 -> VAR_182 < 1 ) return - VAR_129 ; VAR_169 = VAR_156 -> VAR_169 == 0 ? VAR_27 : ( VAR_156 -> VAR_169 & ( VAR_27 | VAR_28 | VAR_90 ) ) ; VAR_156 -> VAR_61 . VAR_32 = 0 ; METHOD_1 ( & VAR_168 , 0 , sizeof ( VAR_168 ) ) ; if ( VAR_49 ) { VAR_193 = METHOD_16 ( VAR_188 , & VAR_156 -> VAR_61 ) ; if ( VAR_193 ) return VAR_193 ; } if ( <S2SV_ModEnd> VAR_198 -> VAR_197 <S2SV_ModStart> return - VAR_175 <S2SV_ModEnd> ; METHOD_6 (
<S2SV_ModStart> TYPE_12 METHOD_0 ( <S2SV_ModEnd> TYPE_2 * VAR_44 <S2SV_ModStart> TYPE_12 VAR_12 , const TYPE_11 * VAR_54 <S2SV_ModEnd> , TYPE_12 VAR_49 <S2SV_ModStart> TYPE_8 VAR_47 , TYPE_13 * VAR_43 , TYPE_12 VAR_52 <S2SV_ModEnd> ) { struct <S2SV_ModStart> VAR_12 [ VAR_12 ] ; const TYPE_14 * const VAR_37 = VAR_45 -> VAR_53 [ VAR_52 <S2SV_ModStart> ) ; const <S2SV_ModEnd> TYPE_12 VAR_51 = <S2SV_ModStart> = METHOD_3 ( <S2SV_ModEnd> VAR_44 , VAR_45 <S2SV_ModStart> -> VAR_31 , <S2SV_ModEnd> VAR_45 -> VAR_33 <S2SV_ModStart> -> VAR_33 , VAR_47 , <S2SV_ModEnd> VAR_37 , VAR_38 <S2SV_ModStart> , VAR_38 , VAR_54 <S2SV_ModEnd> -> VAR_40 , <S2SV_ModStart> -> VAR_40 , VAR_54 <S2SV_ModEnd> -> VAR_42 , <S2SV_ModStart> VAR_43 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_44 , <S2SV_ModStart> VAR_44 , VAR_45 <S2SV_ModEnd> , VAR_47 ,
<S2SV_ModStart> ) { VAR_1 = <S2SV_ModEnd> 1 ; METHOD_1
<S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_527 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_336 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_149 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_149
<S2SV_ModStart> ) ; goto VAR_214 <S2SV_ModEnd> ; } METHOD_30 <S2SV_ModStart> VAR_216 ) ; <S2SV_ModEnd> METHOD_34 ( &
<S2SV_ModStart> == VAR_709 ) { if ( METHOD_131 <S2SV_ModEnd> ( ( VAR_984 <S2SV_ModStart> ) >> 3UL , <S2SV_ModEnd> VAR_984 -> VAR_932 <S2SV_ModStart> VAR_984 -> VAR_932 ) != VAR_979 ) METHOD_74 ( VAR_562 , "MemoryAllocationFailed" ) ; VAR_666 = ( ( VAR_984 -> VAR_861 + 7UL ) >> 3UL ) * VAR_984 -> VAR_932 ; } else { if ( METHOD_131 ( VAR_915 , VAR_981 . VAR_554 ) != VAR_979 ) METHOD_74 ( VAR_562 , "MemoryAllocationFailed" ) ; <S2SV_ModEnd> VAR_666 = ( <S2SV_ModStart> VAR_554 ) ; }
<S2SV_ModStart> TYPE_3 VAR_127 ; if ( ! <S2SV_ModStart> & VAR_16 ) ) return - VAR_128
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 METHOD_0 ( struct STRUCT_OR_UNION_2 * VAR_64 , <S2SV_ModEnd> struct STRUCT_OR_UNION_0 * <S2SV_ModStart> 1 ] ; TYPE_2 VAR_65 = VAR_66 | VAR_67 ; <S2SV_ModStart> ) { case VAR_24 : case VAR_25 : VAR_65 |= VAR_68 ; case VAR_23 <S2SV_ModEnd> : VAR_61 -> <S2SV_ModStart> = VAR_57 ; if ( METHOD_3 ( VAR_64 , VAR_65 , VAR_51 , VAR_57 ) ) return VAR_69 ; <S2SV_ModStart> ; } } return VAR_70 ;
<S2SV_ModStart> TYPE_3 VAR_127 ; if ( ! <S2SV_ModStart> & VAR_16 ) ) return - VAR_128
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = METHOD_1 ( ( TYPE_14 )
<S2SV_ModStart> VAR_40 ) { TYPE_6 VAR_46 = METHOD_9 ( ( TYPE_10 * ) VAR_44 ) ; if ( VAR_46 > 63 ) { METHOD_8 ( VAR_44 ) ; return VAR_47 ; } <S2SV_ModStart> VAR_42 , ( <S2SV_ModEnd> TYPE_10 * )
<S2SV_ModStart> ! METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> { VAR_43 = METHOD_10 ( STRUCT_OR_UNION_8 <S2SV_ModEnd> , & STRUCT_OR_UNION_8 <S2SV_ModStart> STRUCT_OR_UNION_8 -> VAR_25 , & VAR_42 ) ; if ( VAR_43 ) return VAR_43 ; <S2SV_ModEnd> STRUCT_OR_UNION_8 -> VAR_17 <S2SV_ModStart> STRUCT_OR_UNION_8 ) ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( VAR_13 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_5 ) { if ( ! VAR_8 || ! VAR_4 || ( VAR_5 == 0 ) ) return VAR_9 ; if ( ! <S2SV_ModStart> , VAR_5 ) ) return VAR_9 <S2SV_ModStart> VAR_7 ) { if ( ! <S2SV_ModStart> ( VAR_8 ) ) return VAR_9 ; } return VAR_10 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 1 ) { if ( VAR_44 >= VAR_34 ) { METHOD_1 ( VAR_22 , "bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n" , VAR_44 , VAR_34 ) ; return 0 ; }
<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1
<S2SV_ModStart> * VAR_116 ; <S2SV_ModEnd> } * VAR_114
<S2SV_ModStart> ; VAR_127 = METHOD_21 <S2SV_ModEnd> ( VAR_135 ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) ; break ;
<S2SV_ModStart> * VAR_79 , VAR_20 , VAR_65 ; TYPE_9 VAR_70 , VAR_75 , VAR_80 ; TYPE_9 * VAR_85 = VAR_90 , * VAR_86 = VAR_90 , * VAR_87 = VAR_90 , * VAR_88 = VAR_90 <S2SV_ModEnd> ; TYPE_5 VAR_35 <S2SV_ModStart> VAR_65 ) ; if ( ! VAR_85 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_70 ) ; if ( ! VAR_86 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_75 ) ; if ( ! VAR_87 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; } <S2SV_ModStart> VAR_80 ) ; if ( ! VAR_88 ) { VAR_89 = - VAR_91 ; goto VAR_84 ; }
<S2SV_ModStart> - VAR_15 ; if ( VAR_10 -> VAR_16 > VAR_10 -> VAR_17 * sizeof ( VAR_18 ) * 8 ) return - VAR_15 ;
<S2SV_ModStart> -> VAR_105 ; enum VAR_107 VAR_52 ; <S2SV_ModStart> , VAR_105 ) ; VAR_52 = VAR_105 -> VAR_52 <S2SV_ModStart> ( VAR_42 && <S2SV_ModEnd> VAR_52 == VAR_39 <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_52 == VAR_23 <S2SV_ModStart> == VAR_23 || <S2SV_ModEnd> VAR_52 == VAR_38 <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_52 == VAR_31 <S2SV_ModStart> ) ; } VAR_104 <S2SV_ModEnd> -> VAR_52 = <S2SV_ModStart> VAR_50 ) ; METHOD_9 ( VAR_102 , VAR_105 ) ; if ( <S2SV_ModEnd> VAR_52 == VAR_53 <S2SV_ModStart> * VAR_70 ; METHOD_12 ( VAR_102 , VAR_87 + 2 ) ; <S2SV_ModEnd> VAR_71 = VAR_105 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_92
<S2SV_ModStart> METHOD_20 ( VAR_98 , ( struct STRUCT_OR_UNION_6 * ) METHOD_22 ( VAR_100 )
<S2SV_ModStart> , VAR_9 , - <S2SV_ModStart> , VAR_11 , -
<S2SV_ModStart> VAR_1007 ) { VAR_1021 = VAR_1022 ; break <S2SV_ModEnd> ; } VAR_1024
<S2SV_ModStart> define VAR_32 80 jas_matind_t VAR_26 ; jas_matind_t <S2SV_ModEnd> VAR_35 ; TYPE_5
<S2SV_ModStart> STRUCT_OR_UNION_5 * STRUCT_OR_UNION_5 , struct STRUCT_OR_UNION_6 * VAR_13 ) { if ( VAR_11 > VAR_14 ) VAR_11 = VAR_14 ; <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> = 1 ; METHOD_3 ( VAR_13 , VAR_4 , STRUCT_OR_UNION_5 , * VAR_12 , VAR_11 ) ;
<S2SV_ModStart> ( VAR_355 & ( VAR_367 | VAR_10 ) ) == ( VAR_367 | VAR_10 ) ) return METHOD_109 ( - VAR_36 ) ; if ( ( VAR_355 &
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; VAR_41 = METHOD_20 <S2SV_ModEnd> ( METHOD_8 (
<S2SV_ModStart> ; if ( METHOD_8 ( <S2SV_ModStart> ) , 0 )
<S2SV_ModStart> 1 ) { if ( VAR_44 >= VAR_34 ) { METHOD_1 ( VAR_22 , "bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n" , VAR_44 , VAR_34 ) ; return 0 ; }
<S2SV_ModStart> VAR_50 ) ; <S2SV_ModEnd> VAR_42 = METHOD_3
<S2SV_ModStart> { TYPE_210 -> <S2SV_ModEnd> VAR_407 = VAR_474 <S2SV_ModStart> } else { <S2SV_ModEnd> TYPE_210 -> VAR_407 <S2SV_ModStart> -> VAR_337 ; if ( VAR_447 & VAR_448 ) TYPE_210 -> VAR_308 = - 1 ; else TYPE_210 -> VAR_308 = VAR_474 -> VAR_407 -> VAR_308 ; <S2SV_ModStart> -> VAR_339 ; TYPE_210 -> VAR_308 = VAR_430 -> VAR_308 ;
<S2SV_ModStart> , TYPE_17 TYPE_39 VAR_6 <S2SV_ModStart> , TYPE_12 TYPE_40 VAR_6 <S2SV_ModStart> VAR_142 ) { <S2SV_ModEnd> switch ( METHOD_58 <S2SV_ModStart> [ 0 ] ) ; METHOD_65 ( ( VAR_158 , "<S2SV_blank>attrs=(" ) <S2SV_ModStart> ) ; } METHOD_65 ( ( VAR_158 , ")" ) ) ; <S2SV_ModStart> case VAR_135 : METHOD_65 ( ( VAR_158 , "<S2SV_blank>status=(" ) ) ; <S2SV_ModStart> ) ) ; METHOD_65 ( ( VAR_158 , ")" ) ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; default : if ( VAR_158 -> VAR_161 > 3 ) { METHOD_65 ( ( VAR_158 , "<S2SV_blank>data=(" ) ) ; if ( ! METHOD_56 ( VAR_158 , ( const TYPE_35 * ) ( VAR_148 ) , VAR_142 - VAR_148 ) ) goto VAR_157 ; <S2SV_ModEnd> METHOD_65 ( ( <S2SV_ModStart> ) ) ; } else { if ( ! METHOD_67 ( VAR_158 , VAR_148 , VAR_142 ) ) goto VAR_157 ; } break ; }
<S2SV_ModStart> ) && ! METHOD_59 <S2SV_ModEnd> ( METHOD_37 (
<S2SV_ModStart> -> VAR_65 . VAR_72 <S2SV_ModEnd> ) ; METHOD_14
<S2SV_ModStart> VAR_8 ) ; METHOD_4 <S2SV_ModEnd> ( ! METHOD_1 <S2SV_ModStart> VAR_7 ) ) ; METHOD_5 <S2SV_ModEnd> ( VAR_8 ->
<S2SV_ModStart> VAR_85 ; goto VAR_90 <S2SV_ModEnd> ; } VAR_89 <S2SV_ModStart> VAR_85 ) ; VAR_90 :
<S2SV_ModStart> = VAR_17 ; if ( <S2SV_ModEnd> * ( VAR_21 <S2SV_ModStart> + 1 ) > sizeof ( struct STRUCT_OR_UNION_4 ) ) return ; METHOD_4 ( & VAR_43 -> VAR_38 , VAR_21 + sizeof ( struct STRUCT_OR_UNION_3 ) , * ( VAR_21 + 1 )
<S2SV_ModStart> ; VAR_28 = METHOD_5 <S2SV_ModEnd> ( VAR_99 ->
<S2SV_ModStart> VAR_31 ) = METHOD_3 <S2SV_ModEnd> ( & VAR_29
<S2SV_ModStart> ; if ( ( VAR_72 & VAR_19 ) ) <S2SV_ModEnd> { VAR_60 = <S2SV_ModStart> STRUCT_OR_UNION_16 , VAR_30 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_16 ) ) METHOD_19 ( VAR_87 <S2SV_ModStart> } if ( ( VAR_72 & VAR_33 ) <S2SV_ModEnd> ) { VAR_60
<S2SV_ModStart> return 0 ; if ( VAR_19 > STRUCT_OR_UNION_8 -> VAR_8 ) { <S2SV_ModEnd> if ( VAR_28 <S2SV_ModStart> VAR_27 ) ; return 0 ; <S2SV_ModStart> ; } } VAR_31 = METHOD_3 ( VAR_28 -> VAR_15 , STRUCT_OR_UNION_8 -> VAR_16 , VAR_19 ) ; if ( VAR_31 != VAR_19 ) { METHOD_4 ( & STRUCT_OR_UNION_8 -> VAR_21 -> VAR_21 , "recv<S2SV_blank>xbuf,<S2SV_blank>%d\\n" , VAR_31 ) ; if ( VAR_28 -> VAR_24 == VAR_25 ) { METHOD_6 ( VAR_28 , VAR_27 ) ; } else { METHOD_6 ( VAR_28 , VAR_29 ) ; return - VAR_30 ; } }
<S2SV_ModStart> 1 ) ; METHOD_18 ( & STRUCT_OR_UNION_13 -> VAR_45 , sizeof ( VAR_46 ) ) ;
<S2SV_ModStart> VAR_82 ) { METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> ) ) ; METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> ) ) ; METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> STRUCT_OR_UNION_4 VAR_48 ; METHOD_16 <S2SV_ModEnd> ( VAR_48 .
<S2SV_ModStart> VAR_5 ) { return METHOD_5 ( VAR_5 , 0 , 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 1 ) ; if ( VAR_116 > VAR_194 - VAR_35 ) { return ( - 1 ) ; }
<S2SV_ModStart> VAR_8 != VAR_5 ) ; METHOD_2 ( VAR_18 -> VAR_17 == VAR_18 -> VAR_19
<S2SV_ModStart> . VAR_43 & ~ VAR_49 <S2SV_ModEnd> ; VAR_44 ->
<S2SV_ModStart> , TYPE_2 VAR_74 , const struct STRUCT_OR_UNION_0 * VAR_86 <S2SV_ModStart> ) ) { TYPE_10 VAR_87 = VAR_76 . VAR_88 ; <S2SV_ModStart> . VAR_77 ) && ( VAR_87 == 0 || VAR_87 == VAR_86 -> VAR_88 ) ) <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> endif VAR_15 : <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_21 ) ; METHOD_6 ( VAR_16 , VAR_17 ) ;
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_106 < 4 <S2SV_ModStart> VAR_106 < 4 && VAR_109 -> VAR_92 [ VAR_106 ] && VAR_109 -> VAR_95 [ VAR_106 ] <S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_106 < 4 <S2SV_ModStart> VAR_106 < 4 && VAR_109 -> VAR_92 [ VAR_106 ] && VAR_109 -> VAR_95 [ VAR_106 ]
<S2SV_ModStart> VAR_17 ) { <S2SV_ModEnd> METHOD_1 ( VAR_15 <S2SV_ModStart> VAR_16 ) ; METHOD_8 <S2SV_ModEnd> ( VAR_15 , <S2SV_ModStart> VAR_15 , VAR_17 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> VAR_16 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 16 ; TYPE_19 VAR_218 [ 19 ] ; TYPE_19 * VAR_201 = & VAR_218 [ 3 <S2SV_ModEnd> ] ; TYPE_15
<S2SV_ModStart> VAR_263 ] || VAR_289 -> VAR_287 [ VAR_263 ] == 3 || VAR_289 -> VAR_287 [ VAR_263 ] > 4 || <S2SV_ModStart> [ VAR_263 ] || VAR_289 -> VAR_290 [ VAR_263 ] == 3 || VAR_289 -> VAR_290 [ VAR_263 ] > 4
<S2SV_ModStart> TYPE_91 * VAR_340 ; if ( VAR_336 < 0 || VAR_336 > 4194304 ) { METHOD_66 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , VAR_345 ) ; return VAR_347 ; } VAR_340
<S2SV_ModStart> ; } else return
<S2SV_ModStart> ; VAR_127 = METHOD_37 <S2SV_ModEnd> ( METHOD_21 (
<S2SV_ModStart> = 0 ; METHOD_13 ( ) ;
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_17 ; if ( VAR_19 < 0 || VAR_19 > VAR_20 ) return - VAR_21
<S2SV_ModStart> TYPE_0 METHOD_0 ( <S2SV_ModEnd> ) { METHOD_3 <S2SV_ModStart> ( "%s<S2SV_blank><input_yuv><S2SV_blank><width>x<height><S2SV_blank><target_width>x<target_height><S2SV_blank>" , VAR_2 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> ( VAR_62 ) goto VAR_60 <S2SV_ModEnd> ; if (
<S2SV_ModStart> -> VAR_279 , VAR_283 , VAR_284 <S2SV_ModEnd> ) ; METHOD_92
<S2SV_ModStart> { if ( VAR_68 == VAR_112 ) return - VAR_154 ; if ( <S2SV_ModStart> goto VAR_192 ; if ( VAR_155 && METHOD_35 ( & VAR_193 , & VAR_191 ) ) { VAR_199 = - VAR_154 ; goto VAR_190 ; }
<S2SV_ModStart> VAR_50 ) { TYPE_10 * VAR_84 = ( TYPE_10 * ) VAR_50 -> VAR_14 ; TYPE_11 VAR_55 = VAR_85 ; union STRUCT_OR_UNION_6 VAR_86 ; <S2SV_ModStart> TYPE_4 VAR_43 ; <S2SV_ModEnd> VAR_71 = METHOD_7 <S2SV_ModStart> goto VAR_73 ; METHOD_10 ( VAR_86 , VAR_84 , VAR_87 . VAR_88 ) { if ( VAR_86 . VAR_34 -> VAR_89 == VAR_90 || VAR_86 . VAR_34 -> VAR_89 == VAR_91 ) continue ; <S2SV_ModEnd> VAR_62 = METHOD_5 <S2SV_ModStart> , VAR_50 , VAR_86 . VAR_84 ) ; if ( VAR_62 != VAR_52 <S2SV_ModEnd> ) VAR_55 = <S2SV_ModStart> ) VAR_55 = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_83 , VAR_86 . VAR_84 <S2SV_ModEnd> -> VAR_58 , <S2SV_ModStart> -> VAR_58 , VAR_62 , VAR_86 . VAR_84 ) ; if ( VAR_62 == VAR_61 <S2SV_ModEnd> ) goto VAR_73 <S2SV_ModStart> goto VAR_73 ; <S2SV_ModEnd> } VAR_73 :
<S2SV_ModStart> -> VAR_162 |= VAR_214 ; STRUCT_OR_UNION_131 -> VAR_162 |= <S2SV_ModStart> &= ~ VAR_135 ; STRUCT_OR_UNION_131 -> VAR_162 &= ~ VAR_214
<S2SV_ModStart> = METHOD_1 ( VAR_51 <S2SV_ModEnd> ) ; const <S2SV_ModStart> ; VAR_51 -> VAR_55 <S2SV_ModEnd> = VAR_42 -> <S2SV_ModStart> = VAR_42 -> VAR_55 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ( VAR_50 , VAR_54 ) ; if ( ( VAR_39 & VAR_55 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_50 , VAR_54 , VAR_55 <S2SV_ModEnd> ) ; VAR_39 <S2SV_ModStart> ( VAR_50 , VAR_56 ) ; if ( ( VAR_39 & VAR_57 ) != 0 ) { if ( ( VAR_39 & KSZ8851_P1SR_OPERATION_SPEED <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_39 & VAR_58 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_39 & VAR_59 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_50 , VAR_54 , VAR_59 <S2SV_ModEnd> ) ; VAR_49 <S2SV_ModStart> ( VAR_50 , VAR_60 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_50 , VAR_61 , VAR_62 | VAR_63 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_65 : METHOD_1 ( VAR_66 , 0 , 0 ) ;
<S2SV_ModStart> } VAR_65 = METHOD_25 ( 1 , VAR_53 , 0 <S2SV_ModEnd> , 0 )
<S2SV_ModStart> if ( VAR_13 + <S2SV_ModEnd> sizeof ( VAR_14 <S2SV_ModStart> ( VAR_14 ) > VAR_18 -> VAR_9 ) { return ; } <S2SV_ModEnd> METHOD_2 ( VAR_18
<S2SV_ModStart> VAR_9 ) { TYPE_4 VAR_11 ; VAR_9 -> VAR_6 = METHOD_2 ( <S2SV_ModEnd> ( TYPE_3 ) <S2SV_ModStart> VAR_3 * VAR_4 , VAR_8 , & VAR_11 ) <S2SV_ModStart> ; VAR_9 -> VAR_10 = VAR_11 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> == 0 ) METHOD_25 ( VAR_186 ) ; if ( VAR_187 == 0 )
<S2SV_ModStart> VAR_547 != 0 && VAR_544 -> VAR_442 == VAR_514 ) VAR_544 -> VAR_442 = "UNKNOWN_REASON" <S2SV_ModEnd> ; VAR_367 ->
<S2SV_ModStart> VAR_91 -> VAR_86 <S2SV_ModEnd> ) ) !=
<S2SV_ModStart> ; VAR_729 : <S2SV_ModEnd> METHOD_137 ( VAR_792 <S2SV_ModStart> -> VAR_756 ; if ( VAR_751 == VAR_791 ) VAR_791 = ( TYPE_106 * ) VAR_789 ;
<S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_114 = 0
<S2SV_ModStart> -> VAR_94 ; TYPE_13 VAR_99 = VAR_90 * VAR_91 ; <S2SV_ModStart> -> VAR_20 ; if ( ( METHOD_7 ( VAR_88 -> VAR_89 ) == 0 ) || ( VAR_90 == 0 ) || ( VAR_91 == 0 ) || ( VAR_90 > VAR_100 / VAR_91 ) || ( VAR_99 > ( VAR_100 / METHOD_7 ( VAR_88 -> VAR_89 ) ) ) ) return VAR_97 ; VAR_99 *= METHOD_7 ( VAR_88 -> VAR_89 ) ; <S2SV_ModStart> -> VAR_84 = VAR_99 <S2SV_ModEnd> ; VAR_88 ->
<S2SV_ModStart> VAR_417 = VAR_418 , VAR_419 <S2SV_ModStart> VAR_418 ) ) ; VAR_419 = VAR_417 <S2SV_ModStart> ; } } if ( VAR_417 < VAR_419 ) { METHOD_82 ( VAR_387 ) ; } VAR_419 = VAR_417 ;
<S2SV_ModStart> case VAR_33 : METHOD_32 ( TYPE_29 + VAR_100 + 2 ) ;
<S2SV_ModStart> += VAR_157 ; if ( VAR_177 > 63 ) return VAR_123 ; <S2SV_ModStart> 20 ) { if ( VAR_177 > 63 ) return VAR_123 ; <S2SV_ModStart> 21 ) { if ( VAR_177 > 63 ) return VAR_123 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_4 <S2SV_ModEnd> * VAR_2 , <S2SV_ModStart> * VAR_2 , TYPE_4 <S2SV_ModEnd> VAR_5 ) { <S2SV_ModStart> VAR_5 ) { METHOD_2 <S2SV_ModEnd> ( VAR_2 , <S2SV_ModStart> * sizeof ( TYPE_4 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> : if ( ! VAR_98 -> VAR_101 ) { METHOD_26 ( VAR_98 , VAR_100 , "client<S2SV_blank>password<S2SV_blank>pkt<S2SV_blank>before<S2SV_blank>startup<S2SV_blank>packet" ) ; return VAR_94 ; } if (
<S2SV_ModStart> TYPE_3 VAR_35 ; if ( VAR_14 & VAR_46 ) { if ( VAR_42 -> VAR_47 != VAR_42 -> VAR_48 ) METHOD_0 ( VAR_42 , VAR_49 , VAR_15 ) ; } <S2SV_ModStart> VAR_42 ) ; if ( ( VAR_14 & VAR_46 ) && ( VAR_42 -> VAR_47 == VAR_42 -> VAR_48 ) ) break ;
<S2SV_ModStart> = VAR_92 ; if ( VAR_44 -> VAR_46 . VAR_104 < 1 || ! VAR_44 -> VAR_45 ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>interface<S2SV_blank>0<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n" , VAR_105 ) ; VAR_103 = - VAR_12 ; goto VAR_101 ; } <S2SV_ModStart> 1 ) ; if ( ( VAR_92 -> VAR_106 -> VAR_46 . VAR_107 < 2 ) || ! VAR_102 -> VAR_100 [ 1 ] ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>need<S2SV_blank>2<S2SV_blank>interfaces,<S2SV_blank>found<S2SV_blank>%d\\n" , VAR_105 , VAR_92 -> VAR_106 -> VAR_46 . VAR_107 ) ; VAR_103 = - VAR_12 ; goto VAR_101 ; } <S2SV_ModStart> -> VAR_41 ; if ( VAR_44 -> VAR_46 . VAR_104 < 1 || ! VAR_44 -> VAR_45 ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>interface<S2SV_blank>1<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n" , VAR_105 ) ; VAR_103 = - VAR_12 ; goto VAR_96 ; } <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; VAR_102 -> <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; VAR_103 = <S2SV_ModStart> VAR_103 ) goto VAR_108 <S2SV_ModEnd> ; METHOD_12 ( <S2SV_ModStart> return 0 ; VAR_108 : METHOD_13 ( & VAR_92 -> VAR_93 . VAR_94 , & VAR_95 ) ; VAR_91 : METHOD_14 ( VAR_102 <S2SV_ModEnd> ) ; VAR_96 <S2SV_ModStart> ; VAR_96 : <S2SV_ModEnd> METHOD_15 ( &
<S2SV_ModStart> 128 , VAR_396 + VAR_914
<S2SV_ModStart> ) ) ; if ( METHOD_27 ( METHOD_26 ( STRUCT_OR_UNION_8 ) <= 0 ) ) { if ( VAR_107 ) { METHOD_25 ( VAR_125 ) ; VAR_127 = 0 ; VAR_132 = - VAR_133 ; break ; } }
<S2SV_ModStart> ] ; TYPE_4 * VAR_84 = VAR_83 -> VAR_84 ; TYPE_4 * VAR_72 = VAR_83 -> VAR_72 <S2SV_ModEnd> ; TYPE_5 VAR_80
<S2SV_ModStart> VAR_38 , struct STRUCT_OR_UNION_15 <S2SV_ModEnd> * * VAR_40 <S2SV_ModStart> ) ; struct STRUCT_OR_UNION_15 * VAR_45 ; struct STRUCT_OR_UNION_16 <S2SV_ModEnd> * VAR_13 = <S2SV_ModStart> VAR_48 ) ; VAR_45 = METHOD_18 <S2SV_ModEnd> ( VAR_13 , <S2SV_ModStart> ( VAR_13 , <S2SV_ModEnd> VAR_48 ) ; <S2SV_ModStart> * VAR_43 ; <S2SV_ModEnd> VAR_43 = METHOD_7 <S2SV_ModStart> ; VAR_45 = METHOD_19 ( VAR_13 , VAR_45 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_12 ) ; struct STRUCT_OR_UNION_13 * VAR_45 = METHOD_10 ( STRUCT_OR_UNION_12 ) ; <S2SV_ModStart> ; if ( METHOD_11 ( VAR_45 <S2SV_ModEnd> , VAR_35 ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( VAR_45 <S2SV_ModEnd> , VAR_35 )
<S2SV_ModStart> ++ ) { METHOD_11 ( VAR_34 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_check" ) ;
<S2SV_ModStart> VAR_4 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_15 ) ; METHOD_4 ( & VAR_21 . VAR_22 ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_5 ( & <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> / 9 ; if ( VAR_41 > 15 ) { METHOD_12 ( VAR_60 , "invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>TRACKPAD_REPORT_ID\\n" , VAR_64 ) ; return 0 ; } <S2SV_ModStart> / 8 ; if ( VAR_41 > 15 ) { METHOD_12 ( VAR_60 , "invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>MOUSE_REPORT_ID\\n" , VAR_64 ) ; return 0 ; }
<S2SV_ModStart> VAR_6 -> STRUCT_OR_UNION_6 ; if ( METHOD_3 ( VAR_20 ) ) return 1
<S2SV_ModStart> VAR_33 ; } VAR_70 -> VAR_45 = VAR_70 -> VAR_47 = 0 ; VAR_70 -> VAR_49 = METHOD_7 ( ) ; VAR_70 -> VAR_51 = VAR_70 -> VAR_53 = 0 ; VAR_70 -> VAR_55 = VAR_56 -> VAR_57 ; VAR_70 -> VAR_59 = VAR_70 -> VAR_61 = 0 ; METHOD_10 ( & VAR_70 -> VAR_63 ) ; METHOD_10 ( & VAR_70 -> VAR_65 ) ; METHOD_10 ( & VAR_70 -> VAR_67 ) ; <S2SV_ModStart> VAR_72 ; } <S2SV_ModEnd> METHOD_11 ( &
<S2SV_ModStart> VAR_10 ) { METHOD_5 <S2SV_ModEnd> ( VAR_20 -> <S2SV_ModStart> ) ) ; METHOD_5 <S2SV_ModEnd> ( VAR_20 -> <S2SV_ModStart> } else { METHOD_5 <S2SV_ModEnd> ( VAR_20 -> <S2SV_ModStart> 1 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_20 ->
<S2SV_ModStart> VAR_121 ) ; VAR_113 = ( VAR_113 != VAR_125 ) ? VAR_113 : "" ;
<S2SV_ModStart> , VAR_174 , VAR_176 , VAR_199 , VAR_93 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_13 ) { METHOD_1 ( VAR_14 <S2SV_ModEnd> , "\\n<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>m<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>l<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>l<S2SV_blank>h" , <S2SV_ModStart> VAR_13 ) ; METHOD_2 ( VAR_14 ) ;
<S2SV_ModStart> - VAR_19 ; VAR_117 = METHOD_4 ( VAR_106 , VAR_117 , sizeof ( VAR_116 ) ) ; <S2SV_ModStart> -> VAR_104 ; <S2SV_ModEnd> if ( METHOD_5
<S2SV_ModStart> <= VAR_24 - ( TYPE_3 )
<S2SV_ModStart> ) { TYPE_8 * VAR_71 , * VAR_74 <S2SV_ModEnd> , * VAR_68 <S2SV_ModStart> TYPE_9 VAR_67 ; <S2SV_ModEnd> VAR_71 = METHOD_16 <S2SV_ModStart> VAR_62 ) ; <S2SV_ModEnd> VAR_62 = METHOD_17 <S2SV_ModStart> { VAR_44 : METHOD_22 ( VAR_71 ) ; <S2SV_ModEnd> return METHOD_16 ( <S2SV_ModStart> ; } } VAR_74 = METHOD_16 ( VAR_53 , VAR_60 ) ; <S2SV_ModEnd> VAR_60 = METHOD_17 <S2SV_ModStart> VAR_68 ) ; METHOD_22 ( VAR_71 ) ; METHOD_22 ( VAR_74 ) ; <S2SV_ModEnd> return VAR_75 ;
<S2SV_ModStart> ; if ( METHOD_7 ( VAR_18 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> * VAR_2 , TYPE_3 <S2SV_ModEnd> * VAR_4 ) <S2SV_ModStart> ) { return METHOD_4 <S2SV_ModEnd> ( VAR_4 ) <S2SV_ModStart> ) ? ( METHOD_4 <S2SV_ModEnd> ( VAR_4 )
<S2SV_ModStart> 16 ) return VAR_17 <S2SV_ModEnd> ; else if <S2SV_ModStart> 13 ) return VAR_18 <S2SV_ModEnd> ; else if <S2SV_ModStart> 11 ) return VAR_19 <S2SV_ModEnd> ; else if <S2SV_ModStart> 9 ) return VAR_20 <S2SV_ModEnd> ; else return <S2SV_ModStart> ; else return VAR_21 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> case 0x00 : if ( VAR_99 < 2 ) return - 1 ; <S2SV_ModStart> : if ( VAR_99 < 3 ) return - 1 ; if ( <S2SV_ModStart> case 0x80 : if ( VAR_99 < 4 ) return - 1 ; <S2SV_ModStart> case 0xC0 : if ( VAR_99 < 2 ) return - 1 ; VAR_97 = VAR_98 [ 1 ] ; if ( VAR_99 < 2 + VAR_97 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_58 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_58 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_45 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_51 ) { if ( VAR_97 < 1 + VAR_55 ) return - 1 ; <S2SV_ModStart> VAR_57 ) { if ( VAR_97 % VAR_91 ) return - 1 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_32 <S2SV_ModEnd> * const VAR_295 <S2SV_ModStart> TYPE_4 * VAR_257 , TYPE_6 * VAR_296 ) { TYPE_6 * VAR_297 = <S2SV_ModEnd> VAR_192 -> VAR_10 <S2SV_ModStart> VAR_10 . VAR_11 -> VAR_12 [ VAR_13 ] ; const TYPE_33 VAR_287 = VAR_141 ; const TYPE_31 VAR_218 = VAR_17 ; TYPE_31 VAR_258 , VAR_259 , VAR_260 , VAR_261 , VAR_262 ; TYPE_31 VAR_298 = VAR_192 -> VAR_193 . coeff_prob_appx_step <S2SV_ModEnd> ; switch ( <S2SV_ModStart> VAR_262 ) { TYPE_33 VAR_293 = VAR_296 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> ] ; const TYPE_33 VAR_292 = VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> 0 ] , VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> VAR_293 , VAR_287 , VAR_298 <S2SV_ModStart> 0 ) { METHOD_22 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> return ; } METHOD_22 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> VAR_262 ) { TYPE_33 VAR_293 = VAR_296 [ VAR_258 ] [ VAR_259 ] [ VAR_260 ] [ VAR_261 ] [ VAR_262 ] ; TYPE_33 * VAR_292 = VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> VAR_262 ; const TYPE_33 <S2SV_ModEnd> VAR_287 = VAR_141 <S2SV_ModStart> 0 ] , VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> VAR_293 , VAR_287 , VAR_298 <S2SV_ModStart> = 1 ; METHOD_23 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> return ; } <S2SV_ModEnd> case VAR_195 : <S2SV_ModStart> VAR_195 : { TYPE_31 VAR_294 = 0 ; TYPE_31 VAR_281 = 0 ; for ( VAR_258 = 0 ; VAR_258 < VAR_202 ; ++ VAR_258 ) { for ( VAR_259 = 0 ; VAR_259 < VAR_206 ; ++ VAR_259 ) { for ( VAR_260 = 0 ; VAR_260 < VAR_210 <S2SV_ModEnd> ; ++ VAR_260 <S2SV_ModStart> VAR_262 ) { TYPE_33 VAR_293 = VAR_296 [ VAR_258 ] [ VAR_259 ] [ VAR_260 ] [ VAR_261 ] [ VAR_262 ] ; TYPE_33 * VAR_292 = VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( VAR_262 <S2SV_ModStart> == VAR_242 ) { <S2SV_ModStart> 0 ] , VAR_297 <S2SV_ModEnd> [ VAR_258 ] <S2SV_ModStart> VAR_293 , VAR_287 , VAR_298 ) ; } else { <S2SV_ModEnd> VAR_266 = METHOD_15 <S2SV_ModStart> VAR_287 ) ; } <S2SV_ModStart> = 1 ; <S2SV_ModEnd> VAR_294 += VAR_288 <S2SV_ModStart> TYPE_31 VAR_282 ; METHOD_22 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> ++ VAR_282 ) METHOD_23 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> ) ; } METHOD_23 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> 0 ) { METHOD_22 <S2SV_ModEnd> ( VAR_295 ,
<S2SV_ModStart> ! VAR_84 ) VAR_83 = METHOD_10 ( VAR_64 , VAR_66 , & VAR_84 ) ; <S2SV_ModEnd> while ( !
<S2SV_ModStart> * VAR_40 , TYPE_6 <S2SV_ModEnd> * VAR_50 , <S2SV_ModStart> case VAR_7 : METHOD_18 <S2SV_ModEnd> ( VAR_40 ,
<S2SV_ModStart> { TYPE_4 VAR_23 ; ( TYPE_0 ) VAR_2
<S2SV_ModStart> , VAR_184 , 0 ,
<S2SV_ModStart> TYPE_8 VAR_18 = METHOD_5 <S2SV_ModEnd> ( VAR_9 ) <S2SV_ModStart> ( VAR_25 > METHOD_1 ( VAR_9 ) <S2SV_ModEnd> * VAR_23 -> <S2SV_ModStart> , VAR_25 , METHOD_1 ( VAR_9 ) <S2SV_ModEnd> * VAR_23 ->
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_22 ; METHOD_3 ( & VAR_22 , 0 , sizeof ( VAR_22 ) )
<S2SV_ModStart> -> STRUCT_OR_UNION_5 ; struct STRUCT_OR_UNION_6 * VAR_16 = METHOD_8 ( STRUCT_OR_UNION_5 ) ; unsigned TYPE_4 VAR_17 ; TYPE_3 VAR_9 <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> if ( VAR_9 < <S2SV_ModEnd> 0 ) { <S2SV_ModStart> 0 ) { METHOD_7 ( & STRUCT_OR_UNION_5 -> VAR_15 ) ; return ; } METHOD_9 ( & VAR_16 -> VAR_18 , VAR_17 ) ; <S2SV_ModStart> VAR_13 ) ; METHOD_10 ( & VAR_16 -> VAR_18 , VAR_17 ) ; <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_15 ) ; METHOD_6 ( VAR_14 ) ;
<S2SV_ModStart> VAR_2 ) ; METHOD_3 ( & VAR_17 ) ; <S2SV_ModStart> METHOD_2 ( VAR_5 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_16 ++ ; } VAR_2 -> VAR_18 -> VAR_19 -> METHOD_0 ++ ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> , VAR_84 ; <S2SV_ModEnd> TYPE_5 * VAR_90 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_74 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_90 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_39 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> + VAR_84 ; return VAR_88 ; VAR_92 : VAR_82 -> VAR_67 <S2SV_ModEnd> = VAR_86 ; <S2SV_ModStart> = VAR_86 ; <S2SV_ModEnd> METHOD_27 ( VAR_90 <S2SV_ModStart> ) ; return VAR_5 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_40 ; struct STRUCT_OR_UNION_0 VAR_41 = * VAR_38 ; <S2SV_ModStart> VAR_37 ) ; if ( ! METHOD_12 ( VAR_38 , VAR_14 + 7 ) ) { METHOD_13 ( "process_secondary_order(),<S2SV_blank>next<S2SV_blank>order<S2SV_blank>pointer<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>stream" , & VAR_41 ) ; }
<S2SV_ModStart> VAR_30 ) { TYPE_3 * const VAR_28 = & VAR_27 -> VAR_28 ; VAR_30 /= VAR_31 [ VAR_27 -> VAR_28 . VAR_32 ] ; VAR_30 = METHOD_1 ( VAR_30 , VAR_33 , VAR_34 ) ; <S2SV_ModStart> VAR_5 ) { VAR_28 -> VAR_35 [ VAR_36 ] = VAR_30 ; } else if ( VAR_27 -> VAR_20 . VAR_37 == 2 ) { TYPE_4 VAR_38 = VAR_27 -> VAR_39 . VAR_40 . VAR_41 [ VAR_27 -> VAR_39 . VAR_40 . VAR_42 ] ; VAR_28 -> VAR_35 [ VAR_38 ] <S2SV_ModEnd> = VAR_30 ; <S2SV_ModStart> ) && ! VAR_28 -> <S2SV_ModEnd> VAR_16 && ! <S2SV_ModStart> VAR_16 && ! <S2SV_ModEnd> VAR_27 -> VAR_18 <S2SV_ModStart> -> VAR_18 && ( <S2SV_ModStart> -> VAR_20 . VAR_43 != VAR_44 || VAR_27 -> VAR_20 . VAR_45 > 20 ) ) VAR_28 -> VAR_35 [ VAR_46 ] <S2SV_ModEnd> = VAR_30 ; <S2SV_ModStart> VAR_30 ; else VAR_28 -> VAR_35 [ VAR_47 ] <S2SV_ModEnd> = VAR_30 ;
<S2SV_ModStart> & VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; VAR_32
<S2SV_ModStart> return VAR_1145 ; if ( VAR_775 != 0 ) { if ( ! VAR_1144 -> VAR_42 -> VAR_1146 ) { METHOD_44 ( ( TYPE_53 * ) VAR_1144 -> VAR_42 , ( TYPE_53 * ) ( & ( VAR_1144 -> VAR_1147 ) ) , sizeof ( VAR_1148 ) ) ; } }
<S2SV_ModStart> TYPE_6 VAR_104 [ 100 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> = "0123456789abcdefghijklmnopqrstuvwxyz" ; <S2SV_ModEnd> TYPE_7 VAR_60 =
<S2SV_ModStart> ) ) { if ( VAR_346 -> VAR_347 >= VAR_349 ) goto VAR_348 ; <S2SV_ModStart> ) ) { if ( VAR_346 -> VAR_347 >= VAR_349 ) goto VAR_348 ;
<S2SV_ModStart> -> VAR_53 , "The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request" ) , <S2SV_ModEnd> VAR_56 ) ;
<S2SV_ModStart> VAR_90 , VAR_78 , VAR_110 <S2SV_ModStart> = VAR_78 = VAR_110 = <S2SV_ModStart> VAR_101 = VAR_102 ; VAR_110 ++ <S2SV_ModStart> = VAR_102 ; VAR_110 ++ ; <S2SV_ModStart> } } } if ( VAR_110 != VAR_86 * VAR_18 ) { METHOD_8 ( VAR_111 , "warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n" ) ; return VAR_108 ; }
<S2SV_ModStart> TYPE_2 * VAR_4 , TYPE_3 VAR_5 ) { if ( VAR_5 < 2 ) { METHOD_1 ( ( VAR_2 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } <S2SV_ModEnd> METHOD_1 ( (
<S2SV_ModStart> VAR_86 : { TYPE_7 VAR_247 ; <S2SV_ModStart> ) break ; VAR_247 <S2SV_ModEnd> = VAR_246 & <S2SV_ModStart> ; if ( VAR_247 <S2SV_ModEnd> & ( sizeof <S2SV_ModStart> ) break ; if ( METHOD_19 <S2SV_ModEnd> ( VAR_244 -> <S2SV_ModStart> -> VAR_230 , & VAR_244 -> VAR_231 . VAR_248 , VAR_246 & ~ 1ULL ) ) VAR_244 -> VAR_231 . VAR_249 = VAR_3 ; else VAR_244 -> VAR_231 . VAR_249 = VAR_177 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> * VAR_89 >= 91 <S2SV_ModEnd> && VAR_99 [ <S2SV_ModStart> * VAR_89 >= 51 <S2SV_ModEnd> && VAR_99 [
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 VAR_3 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> { METHOD_1 ( LOG_TAG , "%s:<S2SV_blank>start<S2SV_blank>restricted<S2SV_blank>=<S2SV_blank>%d" , VAR_0 , VAR_3 ) ; restricted_mode = VAR_3 <S2SV_ModEnd> ; if (
<S2SV_ModStart> = 0 ; TYPE_6 VAR_33 = 0 ; <S2SV_ModStart> , & VAR_26 , & VAR_33 <S2SV_ModStart> METHOD_6 ( VAR_20 ) ; if ( VAR_33 > VAR_34 ) METHOD_6 ( VAR_28 <S2SV_ModStart> ) ; } if ( VAR_32 > ( TYPE_3 ) VAR_33 ) { VAR_32 = - 1 ; METHOD_6 ( VAR_28 ) ; }
<S2SV_ModStart> ( * VAR_74 <S2SV_ModEnd> ) { if <S2SV_ModStart> == '\\n' ) { <S2SV_ModStart> = '<S2SV_blank>' ; } if ( ( * VAR_74 == '<S2SV_blank>' ) && ( VAR_74 [ 1 ] <S2SV_ModEnd> == '<S2SV_blank>' || <S2SV_ModStart> == '<S2SV_blank>' || VAR_74 [ 1 ] == '\\n' || VAR_74 [ 1 ] == 0 ) ) { VAR_74 ++ ; } else { * VAR_75 ++ = * VAR_74 ++ ; } } * VAR_75 = 0 ; VAR_74 = VAR_75 = VAR_67 ; while ( * VAR_74 ) { if ( * VAR_74 == '.' ) { VAR_61 = 1 ; * VAR_75 ++ = * VAR_74 ++ ; } else if ( METHOD_1 ( * VAR_74 ) ) { * VAR_75 ++ = * VAR_74 ++ ; } else if ( VAR_61 ) { while ( VAR_75 > VAR_67 && VAR_75 [ - 1 ] == '0' ) { VAR_75 -- ; } if ( VAR_75 > VAR_67 && VAR_75 [ - 1 ] == '.' ) { VAR_75 -- ; if ( VAR_75 > VAR_67 && ! METHOD_1 ( VAR_75 [ - 1 ] ) ) { * VAR_75 ++ = '0' ; } } VAR_61 = 0 ; * VAR_75 ++ = * VAR_74 ++ ; } else { VAR_61 = 0 ; * VAR_75 ++ = * VAR_74 ++ ; } } * VAR_75 = 0 ; VAR_74 = VAR_75 = VAR_67 ; while ( * VAR_74 ) { if ( * VAR_74 == '-' && VAR_74 [ 1 ] == '0' && VAR_74 [ 2 <S2SV_ModEnd> ] == '<S2SV_blank>' <S2SV_ModStart> ] == '<S2SV_blank>' <S2SV_ModEnd> ) { VAR_74
<S2SV_ModStart> VAR_117 , VAR_140 ; if ( VAR_60 == VAR_111 ) return - VAR_20
<S2SV_ModStart> -> VAR_4 ; TYPE_9 VAR_44 ; if ( VAR_41 -> VAR_42 < VAR_41 -> VAR_39 ) return VAR_11 ; <S2SV_ModEnd> VAR_44 = VAR_41 <S2SV_ModStart> VAR_41 -> VAR_39 <S2SV_ModEnd> ; if (
<S2SV_ModStart> 1 ) ; if ( VAR_25 == VAR_9 ) { return METHOD_8 ( ) ; }
<S2SV_ModStart> -> VAR_98 = <S2SV_ModEnd> VAR_104 ; VAR_158
<S2SV_ModStart> if ( VAR_97 && VAR_135 >= VAR_139
<S2SV_ModStart> ; if ( METHOD_33 ( ! METHOD_32 ( VAR_274 ) ) ) return - VAR_281 ; if (
<S2SV_ModStart> -> VAR_322 , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" <S2SV_ModEnd> , VAR_326 , <S2SV_ModStart> VAR_192 && ( TYPE_18 <S2SV_ModEnd> ) VAR_309 < <S2SV_ModStart> == VAR_206 && ( TYPE_18 ) <S2SV_ModStart> != VAR_208 && ( TYPE_18 ) <S2SV_ModStart> != VAR_210 && ( TYPE_18 ) <S2SV_ModStart> != VAR_212 && ( TYPE_18 ) <S2SV_ModStart> != VAR_214 && ( TYPE_18 )
<S2SV_ModStart> ) ) { METHOD_105 <S2SV_ModEnd> ( VAR_473 ,
<S2SV_ModStart> -> VAR_78 ; if ( VAR_104 ) { VAR_104 -> VAR_84 = VAR_85 ; VAR_104 -> VAR_87 = VAR_102 -> VAR_93 . STRUCT_OR_UNION_17 ; METHOD_10 ( VAR_104 -> VAR_91 , VAR_102 -> VAR_93 . VAR_94 , VAR_95 ) ; VAR_104 -> VAR_97 = METHOD_11 ( VAR_110 ) -> VAR_99 ; VAR_104 -> VAR_101 = VAR_102 -> VAR_103 ; VAR_104 -> VAR_105 = 0 ; <S2SV_ModStart> * VAR_104 ) <S2SV_ModEnd> ; } VAR_113
<S2SV_ModStart> = 0 ; VAR_139 = 0 ;
<S2SV_ModStart> VAR_12 != VAR_13 ) return - VAR_26 ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_4 )
<S2SV_ModStart> -> VAR_77 ; if ( VAR_77 . VAR_72 > VAR_81 - VAR_79 -> VAR_69 ) goto VAR_78 ;
<S2SV_ModStart> VAR_4 * VAR_52 ; TYPE_9 * VAR_55 = VAR_54 <S2SV_ModStart> VAR_34 ) , METHOD_1 ( VAR_55 ) , <S2SV_ModStart> ; if ( VAR_55 ) METHOD_26 ( VAR_55 , & VAR_56 , & VAR_57 ) ; if (
<S2SV_ModStart> VAR_115 , TYPE_5 <S2SV_ModEnd> VAR_36 ) { <S2SV_ModStart> ; VAR_140 -> <S2SV_ModEnd> VAR_36 = VAR_36
<S2SV_ModStart> VAR_9 , 1 <S2SV_ModEnd> , VAR_20 ,
<S2SV_ModStart> VAR_46 ] ; if ( VAR_41 < 0 || VAR_41 >= VAR_0 || VAR_43 < 0 || VAR_43 >= VAR_1 ) continue ;
<S2SV_ModStart> ( TYPE_33 ) METHOD_27 <S2SV_ModStart> ( TYPE_33 ) METHOD_27 <S2SV_ModStart> ( TYPE_33 ) METHOD_27 <S2SV_ModStart> ( TYPE_33 ) METHOD_27 <S2SV_ModStart> ( TYPE_33 ) METHOD_27
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> goto VAR_56 ; VAR_47 = METHOD_13 ( VAR_25 ) ;
<S2SV_ModStart> case 0x00 : if ( VAR_99 < 2 ) return - 1 ; <S2SV_ModStart> : if ( VAR_99 < 3 ) return - 1 ; if ( <S2SV_ModStart> case 0x80 : if ( VAR_99 < 4 ) return - 1 ; <S2SV_ModStart> case 0xC0 : if ( VAR_99 < 2 ) return - 1 ; VAR_97 = VAR_98 [ 1 ] ; if ( VAR_99 < 2 + VAR_97 ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_58 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_58 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_45 ) { if ( VAR_97 < VAR_91 ) return - 1 ; <S2SV_ModStart> VAR_51 ) { if ( VAR_97 < 1 + VAR_55 ) return - 1 ; <S2SV_ModStart> VAR_57 ) { if ( VAR_97 % VAR_91 ) return - 1 ;
<S2SV_ModStart> "Called<S2SV_blank>IOCTL_BCM_GET_DEVICE_DRIVER_INFO\\n" ) ; METHOD_229 ( & VAR_2564 , 0 , sizeof ( VAR_2564 ) ) ;
<S2SV_ModStart> ( TYPE_79 -> VAR_275 <S2SV_ModEnd> ) { if <S2SV_ModStart> ) TYPE_79 -> VAR_275 = 0 <S2SV_ModEnd> ; else {
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> < 4 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 1 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 2 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 3 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 1 ] . VAR_132 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 2 ] . VAR_132 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 3 ] . VAR_132 ) ) { METHOD_3 ( VAR_133 , "%s:%d:color_cmyk_to_rgb\\n\\tCAN<S2SV_blank>NOT<S2SV_blank>CONVERT\\n" , VAR_134 , VAR_135 ) ; return ; } <S2SV_ModEnd> VAR_44 = VAR_24
<S2SV_ModStart> return 1 ; METHOD_21 ( VAR_130 ) ; return 0 <S2SV_ModEnd> ; } if
<S2SV_ModStart> VAR_200 , VAR_201 <S2SV_ModEnd> ) + METHOD_4 <S2SV_ModStart> VAR_184 , VAR_201 <S2SV_ModEnd> ) ; VAR_203
<S2SV_ModStart> TYPE_4 VAR_52 ; struct STRUCT_OR_UNION_2 * VAR_53 ; <S2SV_ModStart> - VAR_23 ; VAR_53 = VAR_42 -> VAR_43 ; <S2SV_ModStart> if ( ! VAR_53 || ! VAR_53 <S2SV_ModEnd> -> VAR_21 || <S2SV_ModStart> VAR_21 || ! VAR_53 <S2SV_ModEnd> -> VAR_21 -> <S2SV_ModStart> VAR_37 ) ; METHOD_4 ( VAR_53 ) ; <S2SV_ModStart> = METHOD_2 ( VAR_53 <S2SV_ModEnd> , VAR_44 | <S2SV_ModStart> VAR_47 - VAR_48 ) ; METHOD_5 ( VAR_53
<S2SV_ModStart> , VAR_168 , "cDdksE:a:P:t:" <S2SV_ModEnd> ) ) != <S2SV_ModStart> : VAR_78 ++ ; break ; case 'P' : if ( VAR_234 != VAR_221 ) METHOD_95 ( "-P<S2SV_blank>option<S2SV_blank>already<S2SV_blank>specified" ) ; VAR_234 = METHOD_98 ( VAR_55 ) <S2SV_ModStart> ; if ( VAR_234 == VAR_221 ) VAR_234 = METHOD_98 ( VAR_235 ) ; if ( <S2SV_ModStart> ( METHOD_88 ( "stdio<S2SV_blank>rpath<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec" <S2SV_ModEnd> , VAR_221 )
<S2SV_ModStart> ; register struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_55 ; <S2SV_ModStart> ( VAR_55 -> VAR_57 ) return ( VAR_55 -> VAR_57 ) ; VAR_55 -> VAR_57 <S2SV_ModEnd> = VAR_54 = <S2SV_ModStart> ( VAR_55 -> VAR_57 <S2SV_ModEnd> == VAR_33 ) <S2SV_ModStart> ( VAR_55 -> VAR_57 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_98 ; } METHOD_16 ( STRUCT_OR_UNION_37 ) ; METHOD_17 ( STRUCT_OR_UNION_37 ) ; METHOD_22 ( & METHOD_39 ( STRUCT_OR_UNION_37 ) -> VAR_101 ) ; <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> VAR_57 = METHOD_18 <S2SV_ModStart> ) ; goto VAR_102 <S2SV_ModEnd> ; } METHOD_22 <S2SV_ModStart> VAR_96 ) ; VAR_102 : METHOD_38 ( & METHOD_39 ( STRUCT_OR_UNION_37 ) -> VAR_101 ) ; <S2SV_ModEnd> METHOD_45 ( STRUCT_OR_UNION_37
<S2SV_ModStart> VAR_2 ) { METHOD_6 ( VAR_28 , VAR_29 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = VAR_6 ; if ( VAR_7 -> VAR_8 ) METHOD_3 ( VAR_7 -> VAR_8 ) ;
<S2SV_ModStart> VAR_20 ) ; METHOD_9 ( VAR_6 , VAR_22 , VAR_23 ) ;
<S2SV_ModStart> VAR_86 ) -> VAR_90 <S2SV_ModEnd> || ( VAR_86 <S2SV_ModStart> VAR_86 ) -> VAR_90 <S2SV_ModEnd> = 1 ;
<S2SV_ModStart> { if ( VAR_55 > VAR_56 ) { METHOD_2 ( VAR_7 , VAR_8 , "Maximum<S2SV_blank>tree<S2SV_blank>recursion<S2SV_blank>level<S2SV_blank>exceeded.\\n" ) ; return VAR_9 ; } if (
<S2SV_ModStart> ( VAR_14 ) ; VAR_14 -> VAR_19 &= ~ VAR_20
<S2SV_ModStart> VAR_7 ) { <S2SV_ModEnd> TYPE_7 VAR_22 [ <S2SV_ModStart> ( "/tmp/" , 0 , 0 <S2SV_ModEnd> ) < 0
<S2SV_ModStart> ) METHOD_50 ( VAR_91
<S2SV_ModStart> ; if ( METHOD_10 ( <S2SV_ModStart> VAR_21 ) ) ) <S2SV_ModStart> ; if ( METHOD_10 ( <S2SV_ModStart> , 0 ) ) <S2SV_ModStart> ; if ( METHOD_10 ( <S2SV_ModStart> 2 , 0 ) <S2SV_ModStart> ; if ( METHOD_10 ( <S2SV_ModStart> VAR_32 , 0 )
<S2SV_ModStart> TYPE_3 VAR_131 [ VAR_138 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> ( VAR_136 , "Rootname:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_136 , "Commandfile<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 ) <S2SV_ModStart> ( VAR_136 , "Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 )
<S2SV_ModStart> if ( VAR_13 + <S2SV_ModEnd> sizeof ( VAR_14 <S2SV_ModStart> ( VAR_14 ) > VAR_18 -> VAR_9 ) { return ; } <S2SV_ModEnd> METHOD_2 ( VAR_18
<S2SV_ModStart> VAR_223 , VAR_220 , & VAR_204
<S2SV_ModStart> -> VAR_27 ; if ( VAR_82 -> VAR_72 -> VAR_73 > 0 ) { TYPE_6 VAR_85 = VAR_82 -> VAR_86 -> VAR_87 ; VAR_88 * VAR_89 ; if ( VAR_85 & VAR_90 ) { if ( VAR_85 & VAR_91 ) { if ( VAR_82 -> VAR_86 -> METHOD_13 != VAR_74 ) VAR_82 -> VAR_86 -> METHOD_13 ( VAR_82 -> VAR_86 , VAR_82 -> VAR_72 ) ; } else { METHOD_14 ( VAR_82 -> VAR_86 , VAR_82 -> VAR_72 ) ; } } if ( ( VAR_89 = METHOD_15 ( VAR_82 -> VAR_72 , 0 ) ) == 0 ) { VAR_80 = VAR_92 ; METHOD_8 ( VAR_54 , VAR_55 ) ; goto VAR_77 ; } METHOD_16 ( VAR_82 -> VAR_72 ) ; VAR_82 -> VAR_72 = VAR_89 ; }
<S2SV_ModStart> VAR_38 ; TYPE_2 * VAR_36 ; VAR_36 = METHOD_7 ( 8 , VAR_39 ) ; if ( ! VAR_36 ) return - VAR_40 <S2SV_ModEnd> ; VAR_29 = <S2SV_ModStart> VAR_29 ) ; VAR_29 = - VAR_37 ; goto VAR_41 <S2SV_ModEnd> ; } VAR_38 <S2SV_ModStart> ] ) ; VAR_29 = <S2SV_ModEnd> - VAR_37 ; <S2SV_ModStart> - VAR_37 ; goto VAR_41 ; } VAR_29 = VAR_38 ; VAR_41 : METHOD_8 ( VAR_36 ) ; return VAR_29 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_87 = 0 <S2SV_ModEnd> ; switch (
<S2SV_ModStart> VAR_38 . VAR_39 , VAR_52 <S2SV_ModStart> VAR_38 . VAR_33 , VAR_52
<S2SV_ModStart> ) ) { METHOD_8 <S2SV_ModEnd> ( VAR_36 -> <S2SV_ModStart> VAR_27 , "Missing<S2SV_blank>extra<S2SV_blank>info\\n" ) ; METHOD_9 ( VAR_36 <S2SV_ModStart> ++ VAR_39 ; METHOD_8 <S2SV_ModEnd> ( VAR_36 -> <S2SV_ModStart> VAR_40 . VAR_33 ) ; METHOD_9 ( VAR_36
<S2SV_ModStart> VAR_11 ) ; if ( VAR_12 -> VAR_12 . VAR_15 & VAR_16 ) { struct STRUCT_OR_UNION_5 * VAR_17 , * VAR_18 ; METHOD_9 ( VAR_17 , VAR_18 , & VAR_12 -> VAR_19 , VAR_20 ) { METHOD_10 ( & VAR_17 -> VAR_21 . VAR_22 , & VAR_23 ) ; METHOD_11 ( VAR_17 ) ; } } else
<S2SV_ModStart> } else { struct STRUCT_OR_UNION_1 VAR_26 ; TYPE_7 VAR_27 = sizeof ( VAR_26 ) ; METHOD_5 ( VAR_10 , ( struct STRUCT_OR_UNION_2 * ) & VAR_26 , & VAR_27 ) ; if ( VAR_26 . VAR_28 == VAR_29 ) { struct STRUCT_OR_UNION_3 * VAR_30 = ( struct STRUCT_OR_UNION_3 * ) & VAR_26 ; METHOD_6 ( VAR_29 , & VAR_30 -> VAR_31 , VAR_25 -> VAR_32 , sizeof ( VAR_25 -> VAR_32 ) ) ; } else { struct STRUCT_OR_UNION_4 * VAR_30 = ( struct STRUCT_OR_UNION_4 * ) & VAR_26 ; METHOD_6 ( VAR_33 , & VAR_30 -> VAR_34 , VAR_25 -> VAR_32 , sizeof ( VAR_25 -> VAR_32 ) ) ; }
<S2SV_ModStart> * VAR_3 , TYPE_8 <S2SV_ModEnd> * VAR_67 ) <S2SV_ModStart> & VAR_3 -> VAR_70 . <S2SV_ModStart> -> VAR_7 ; TYPE_8 <S2SV_ModEnd> VAR_68 = - <S2SV_ModStart> ( VAR_55 , <S2SV_ModEnd> 2 , VAR_24 <S2SV_ModStart> ; VAR_63 = METHOD_3 ( VAR_47 -> VAR_56 [ 0 ] . VAR_49 . VAR_54 , VAR_47 -> VAR_56 [ 0 ] . VAR_49 . VAR_58 , VAR_55 -> VAR_56 [ 0 ] . VAR_57 . VAR_54 , VAR_55 -> VAR_56 [ 0 ] . VAR_57 . VAR_58 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; METHOD_13 ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; METHOD_21 <S2SV_ModStart> ( METHOD_48 ( ( unsigned TYPE_20 ) <S2SV_ModStart> || METHOD_49 ( ( unsigned TYPE_20 ) <S2SV_ModStart> ( METHOD_50 ( ( unsigned TYPE_20 )
<S2SV_ModStart> VAR_360 , VAR_377 , VAR_601
<S2SV_ModStart> TYPE_1 * VAR_17 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> ) VAR_24 ; if ( METHOD_4 ( VAR_43 -> VAR_33 ) + VAR_34 -> VAR_35 + 2 > VAR_44 ) return - VAR_45 ;
<S2SV_ModStart> { if ( VAR_5 -> VAR_4 [ 0 ] &&
<S2SV_ModStart> TYPE_3 * VAR_8 ; const TYPE_3 * VAR_19 ; TYPE_5 VAR_9 ; VAR_8 <S2SV_ModStart> VAR_10 ) ; <S2SV_ModEnd> VAR_9 = ! <S2SV_ModStart> if ( VAR_9 ) return - 1 ; if ( METHOD_9 ( VAR_10 , & VAR_19 ) > 0 && * VAR_19 == ':'
<S2SV_ModStart> ; TYPE_71 * VAR_295 ; if ( VAR_291 < 0 || VAR_291 > 4194304 ) { METHOD_50 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , VAR_300 ) ; return VAR_302 ; }
<S2SV_ModStart> VAR_14 > 0 && METHOD_10 ( VAR_12 )
<S2SV_ModStart> VAR_92 ) ; VAR_99 = METHOD_19 ( VAR_101 , VAR_101 -> VAR_63 , VAR_101 -> VAR_49 ) ; if ( VAR_99 == VAR_100 ) { METHOD_20 ( VAR_97 , & VAR_101 -> VAR_97 ) ; return ( METHOD_21 ( VAR_101 ) ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> = 0 ; VAR_71 -> VAR_93 = 0 ;
<S2SV_ModStart> TYPE_7 VAR_72 [ VAR_96 <S2SV_ModEnd> ] ; TYPE_8 <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.cmd" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.png" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.ps" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.eps" , <S2SV_ModStart> ( VAR_72 , VAR_96 <S2SV_ModEnd> , "%s.tex" ,
<S2SV_ModStart> ( VAR_34 -> VAR_39 ) { TYPE_1 VAR_40 ; METHOD_4 ( & VAR_34 -> VAR_39 -> VAR_41 ) ; <S2SV_ModEnd> VAR_36 -> VAR_17 <S2SV_ModStart> = VAR_34 -> VAR_39 -> VAR_42 ; VAR_40 = VAR_34 -> VAR_39 -> VAR_42 - VAR_34 -> VAR_39 -> VAR_43 <S2SV_ModEnd> ; VAR_36 -> <S2SV_ModStart> -> VAR_23 = VAR_40 ; METHOD_5 ( & VAR_34 -> VAR_39 -> VAR_41 ) <S2SV_ModEnd> ; VAR_36 ->
<S2SV_ModStart> VAR_26 ) { <S2SV_ModEnd> VAR_24 -> VAR_23 <S2SV_ModStart> VAR_24 -> VAR_23 . ptr [ <S2SV_ModEnd> VAR_24 -> VAR_23 <S2SV_ModStart> VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> while ( VAR_19 || ! VAR_30 -> VAR_24
<S2SV_ModStart> ; struct STRUCT_OR_UNION_3 * VAR_22 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_4 <S2SV_ModStart> ; struct STRUCT_OR_UNION_4 * VAR_81 ; VAR_22 = METHOD_24 ( sizeof ( * VAR_22 ) , VAR_60 ) ; if ( ! VAR_22 ) return - VAR_62 ; VAR_22 -> VAR_8 = 0x0000beef <S2SV_ModEnd> ; VAR_101 = <S2SV_ModStart> . VAR_38 , <S2SV_ModEnd> VAR_22 , sizeof <S2SV_ModStart> , sizeof ( * <S2SV_ModStart> 1000 ) ; METHOD_23 ( VAR_22 ) ; <S2SV_ModStart> VAR_101 ; } VAR_81 = METHOD_24 ( sizeof ( * VAR_81 ) , VAR_60 ) ; if ( ! VAR_81 ) return - VAR_62 ; <S2SV_ModStart> . VAR_38 , <S2SV_ModEnd> VAR_81 , sizeof <S2SV_ModStart> , sizeof ( * <S2SV_ModStart> VAR_101 ) ; METHOD_23 ( VAR_81 ) ; return VAR_101 ; } VAR_93 = VAR_81 -> <S2SV_ModEnd> VAR_93 + 1 <S2SV_ModStart> VAR_56 ) ; METHOD_23 ( VAR_81 ) ; <S2SV_ModStart> ! VAR_106 ) { METHOD_23 ( VAR_81 ) ; <S2SV_ModStart> - VAR_62 ; } <S2SV_ModStart> , VAR_80 , <S2SV_ModEnd> VAR_81 ) ; <S2SV_ModStart> ; METHOD_23 ( VAR_81 ) ; METHOD_23 ( <S2SV_ModStart> VAR_106 ; } METHOD_23 ( VAR_81 ) ;
<S2SV_ModStart> VAR_112 ) { <S2SV_ModEnd> if ( STRUCT_OR_UNION_14 <S2SV_ModStart> == VAR_79 ) { METHOD_11 ( STRUCT_OR_UNION_14 ) ; <S2SV_ModStart> = VAR_81 ; } else if ( METHOD_29 ( STRUCT_OR_UNION_14 ) ) { METHOD_11 ( STRUCT_OR_UNION_14 ) ; METHOD_30 ( STRUCT_OR_UNION_14 ) ; }
<S2SV_ModStart> , METHOD_220 ( "%2f?" ) , METHOD_220 ( "/?" ) ) ; METHOD_218 ( VAR_345 , VAR_346 , VAR_343 , VAR_342 , METHOD_220 ( "/%2f?" ) , METHOD_220 ( "//?" ) ) ; METHOD_218 ( VAR_345 , VAR_346 , VAR_343 , VAR_342 , METHOD_220 (
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_7 <S2SV_ModStart> ) VAR_3 ; if ( VAR_7 < 2 ) { METHOD_1 ( ( VAR_4 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> ( METHOD_1 ( ( unsigned TYPE_2 )
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_7 ( STRUCT_OR_UNION_29
<S2SV_ModStart> VAR_92 ) ; METHOD_34 ( VAR_84 ) ;
<S2SV_ModStart> <S2SV_null> static struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> VAR_17 ) { const <S2SV_ModStart> ) ; struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * VAR_21 = <S2SV_ModStart> TYPE_0 VAR_13 = sizeof ( * VAR_21 ) + VAR_11 -> VAR_9 <S2SV_ModEnd> ; VAR_21 = <S2SV_ModStart> ( METHOD_4 ( & VAR_21 -> VAR_11 <S2SV_ModEnd> , VAR_17 )
<S2SV_ModStart> VAR_92 ; } VAR_98 = METHOD_17 ( VAR_98 , VAR_99 ) ; if ( METHOD_12 ( VAR_98 ) ) { METHOD_18 ( VAR_100 ) ; return METHOD_14 ( VAR_98 ) ; } <S2SV_ModStart> = VAR_98 ; <S2SV_ModEnd> METHOD_18 ( VAR_100
<S2SV_ModStart> , VAR_39 ; TYPE_7 <S2SV_ModEnd> VAR_167 ; unsigned <S2SV_ModStart> VAR_97 ) ; if ( ! VAR_167 ) METHOD_36 ( "FAT<S2SV_blank>size<S2SV_blank>is<S2SV_blank>zero." ) ; <S2SV_ModStart> VAR_227 -> VAR_82 ; if ( VAR_85 < VAR_227 -> VAR_87 ) METHOD_36 ( "Filesystem<S2SV_blank>has<S2SV_blank>no<S2SV_blank>space<S2SV_blank>for<S2SV_blank>any<S2SV_blank>data<S2SV_blank>clusters" )
<S2SV_ModStart> * VAR_17 ; TYPE_0 VAR_26 , VAR_27 ; <S2SV_ModStart> VAR_8 ) ; VAR_26 = <S2SV_ModEnd> METHOD_5 ( VAR_17 <S2SV_ModStart> ( VAR_17 ) ; VAR_27 = METHOD_7 ( VAR_8 ) >= VAR_26 ? VAR_26 : sizeof ( * VAR_17 ) ; VAR_23 = METHOD_8 ( VAR_26 <S2SV_ModStart> ; VAR_25 = METHOD_8 ( VAR_26 <S2SV_ModEnd> , VAR_18 ) <S2SV_ModStart> VAR_21 ; } METHOD_9 ( VAR_23 , VAR_17 , VAR_27 ) ; METHOD_9 ( VAR_25 , VAR_17 , VAR_27 ) ;
<S2SV_ModStart> VAR_13 ) { TYPE_5 VAR_16 ; VAR_13 -> VAR_7 = METHOD_2 ( <S2SV_ModEnd> ( TYPE_3 ) <S2SV_ModStart> VAR_3 * VAR_4 , <S2SV_ModEnd> VAR_9 , & <S2SV_ModStart> VAR_9 , & VAR_16 ) <S2SV_ModEnd> ; VAR_13 -> <S2SV_ModStart> -> VAR_15 = VAR_16 / VAR_12 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = VAR_36 ; TYPE_3 VAR_37 ; VAR_37 = VAR_8 ; if ( VAR_37 > VAR_29 ) VAR_37 = VAR_29 ; <S2SV_ModStart> ; VAR_18 <= VAR_37 <S2SV_ModEnd> ; VAR_18 ++
<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> return VAR_13 ;
<S2SV_ModStart> VAR_10 = 0 ; METHOD_10 ( VAR_17 , 3 , "in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_map" )
<S2SV_ModStart> VAR_23 ; struct STRUCT_OR_UNION_4 <S2SV_ModEnd> * VAR_15 ; <S2SV_ModStart> ; VAR_15 = METHOD_5 ( VAR_16 -> VAR_28 , 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> || VAR_15 -> VAR_15 . <S2SV_ModStart> & VAR_16 -> VAR_28 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( ! VAR_13 -> VAR_14 ) return 0 ; if (
<S2SV_ModStart> = VAR_5 ; METHOD_5 ( & VAR_14 -> VAR_15 ) ; <S2SV_ModStart> VAR_14 -> VAR_9 ) ; METHOD_6 ( & VAR_14 -> VAR_15
<S2SV_ModStart> if ( VAR_175 == 0 && VAR_33 ) return 0 ; if ( VAR_175
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_1 ; VAR_1 = <S2SV_ModEnd> METHOD_1 ( 1 <S2SV_ModStart> ) ) ; if ( VAR_1 ) VAR_1 -> VAR_2 = 1 ;
<S2SV_ModStart> VAR_9 ; return ( VAR_9 & 1 ) <S2SV_ModEnd> ? VAR_8 - <S2SV_ModStart> ? VAR_8 - ( <S2SV_ModStart> + 1 ) >> 1 ) <S2SV_ModEnd> : VAR_8 + <S2SV_ModStart> : VAR_8 + ( VAR_9 >> 1 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 2 ] <S2SV_ModEnd> ) ; METHOD_17 <S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 3 ] <S2SV_ModEnd> ) ; METHOD_17 <S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 3 ] <S2SV_ModEnd> ) ; METHOD_17
<S2SV_ModStart> TYPE_5 VAR_44 , TYPE_13 VAR_58 , <S2SV_ModStart> VAR_44 = VAR_44 ; VAR_57 -> VAR_42 . METHOD_8 . VAR_58 = VAR_58
<S2SV_ModStart> VAR_13 ) { return <S2SV_ModEnd> VAR_3 -> VAR_4 <S2SV_ModStart> VAR_13 ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_26 ) ; if ( ! METHOD_6 ( VAR_12 , "url" ) && VAR_1 && METHOD_7 ( VAR_1 ) ) VAR_22 -> VAR_19 |= METHOD_4 ( VAR_22 -> VAR_21 , VAR_22 -> VAR_23 , VAR_27 , "disallowed<S2SV_blank>submodule<S2SV_blank>url:<S2SV_blank>%s" , VAR_1 ) ;
<S2SV_ModStart> const VAR_73 , TYPE_17 <S2SV_ModEnd> * VAR_75 , <S2SV_ModStart> const VAR_76 = VAR_79 -> VAR_76 ; TYPE_7 * VAR_81 = VAR_73 -> VAR_81 ; if ( METHOD_11 ( <S2SV_ModStart> & VAR_79 -> <S2SV_ModEnd> VAR_17 , VAR_18 <S2SV_ModStart> ( TYPE_8 ) get_segdata <S2SV_ModEnd> ( & VAR_79 <S2SV_ModStart> TYPE_16 VAR_55 = METHOD_12 <S2SV_ModEnd> ( VAR_75 , <S2SV_ModStart> ; if ( VAR_81 <S2SV_ModEnd> ) ++ VAR_81 <S2SV_ModStart> TYPE_16 VAR_71 = METHOD_12 <S2SV_ModEnd> ( VAR_75 , <S2SV_ModStart> ; if ( VAR_81 <S2SV_ModEnd> ) ++ VAR_81 <S2SV_ModStart> TYPE_16 VAR_86 = METHOD_12 <S2SV_ModEnd> ( VAR_75 , <S2SV_ModStart> ; if ( VAR_81 <S2SV_ModEnd> ) ++ VAR_81
<S2SV_ModStart> if ( ( ( <S2SV_ModStart> != 0x8009 ) && ( ( VAR_38 >> 16 ) != 0x800B ) ) <S2SV_ModStart> : return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; case VAR_40 : return "The<S2SV_blank>root<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>not<S2SV_blank>trusted." ; case VAR_41 : return "Not<S2SV_blank>digitally<S2SV_blank>signed." ; case VAR_42 : return "One<S2SV_blank>of<S2SV_blank>the<S2SV_blank>certificates<S2SV_blank>used<S2SV_blank>was<S2SV_blank>marked<S2SV_blank>as<S2SV_blank>untrusted<S2SV_blank>by<S2SV_blank>the<S2SV_blank>user."
<S2SV_ModStart> , VAR_57 , VAR_85 | <S2SV_ModStart> , VAR_57 , VAR_85 |
<S2SV_ModStart> ; if ( VAR_9 <S2SV_ModEnd> > 32 )
<S2SV_ModStart> if ( VAR_67 >= 2 <S2SV_ModStart> VAR_66 ++ ; if ( VAR_74 -> VAR_69 [ VAR_71 ] >= VAR_60 ) VAR_74 -> VAR_69 [ VAR_71 ] = 0 ;
<S2SV_ModStart> ; METHOD_13 ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; METHOD_21 <S2SV_ModStart> ( METHOD_48 ( ( unsigned TYPE_20 ) <S2SV_ModStart> || METHOD_49 ( ( unsigned TYPE_20 ) <S2SV_ModStart> ( METHOD_50 ( ( unsigned TYPE_20 )
<S2SV_ModStart> = 0.0 ; TYPE_42 VAR_314 = 0 , VAR_264 = 0 ; TYPE_9 <S2SV_ModEnd> VAR_374 = 0 <S2SV_ModStart> ! VAR_420 ) { if ( VAR_403 > 0xFFFFFFFFU - 3 ) { TYPE_55 ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> VAR_403 ) { if ( VAR_403 > 0xFFFFFFFFU - 3 ) { TYPE_55 ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; }
<S2SV_ModStart> VAR_3 ) ; if ( VAR_4 -> VAR_5 . VAR_6 ) { <S2SV_ModStart> ) ; } }
<S2SV_ModStart> ( VAR_46 , VAR_49 , VAR_39 [ 0 ] ) ; METHOD_7 ( VAR_46 , VAR_52 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_51 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_49 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_52 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_51 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> ; TYPE_4 VAR_79 = VAR_85 ; TYPE_4 VAR_81 = VAR_85 <S2SV_ModEnd> ; TYPE_5 VAR_80 <S2SV_ModStart> ) ; } VAR_82 : METHOD_14 ( & VAR_80 , & VAR_79 ) ; METHOD_14 ( & VAR_80 , & VAR_81 ) ; <S2SV_ModEnd> METHOD_15 ( VAR_83
<S2SV_ModStart> - VAR_9 ; VAR_8 = METHOD_5 ( STRUCT_OR_UNION_5 ) ; if ( VAR_8 < 0 ) return VAR_8 ; <S2SV_ModEnd> return METHOD_4 (
<S2SV_ModStart> * VAR_12 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> * ) ; if ( VAR_12 -> VAR_19 ) { METHOD_3 ( VAR_12 , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VAR_20 ; } <S2SV_ModStart> TYPE_8 VAR_17 ; TYPE_10 * const VAR_21 = VAR_12 -> VAR_22 ; TYPE_11 * const VAR_23 = ( TYPE_11 * ) VAR_21 -> VAR_24 ; <S2SV_ModStart> METHOD_2 ( & VAR_23 <S2SV_ModEnd> -> VAR_13 ->
<S2SV_ModStart> = VAR_7 ; TYPE_7 * VAR_47 ; if ( METHOD_10 ( VAR_46 -> VAR_34 ) < 32 ) return VAR_48 ; <S2SV_ModStart> 20 ) ; VAR_47 = METHOD_6 ( VAR_46 -> VAR_34 ) ; if ( ! METHOD_11 ( VAR_46 -> VAR_34 , VAR_42 ) ) return VAR_48 ; <S2SV_ModStart> ( VAR_32 , VAR_47 <S2SV_ModEnd> , VAR_42 )
<S2SV_ModStart> * VAR_71 ; struct STRUCT_OR_UNION_5 VAR_65 ; <S2SV_ModStart> VAR_33 ) { <S2SV_ModEnd> VAR_71 = METHOD_2 <S2SV_ModStart> ; VAR_71 -> VAR_53 = 0 ; METHOD_11 ( & VAR_70 -> VAR_68 , VAR_71 ) ; } else if ( METHOD_13 ( VAR_71 ) ) { goto VAR_76 ; } VAR_71 -> <S2SV_ModStart> VAR_50 = VAR_51 <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> . VAR_66 ; VAR_76 : <S2SV_ModEnd> return METHOD_12 (
<S2SV_ModStart> VAR_23 ) ; if ( STRUCT_OR_UNION_23 -> VAR_26 -> METHOD_14 ) STRUCT_OR_UNION_23 -> VAR_26 -> METHOD_14 ( STRUCT_OR_UNION_23 ) ; <S2SV_ModStart> STRUCT_OR_UNION_23 -> VAR_24 <S2SV_ModEnd> ) ; METHOD_15
<S2SV_ModStart> * VAR_103 ; METHOD_27 ( & VAR_130 -> VAR_134 ) ; VAR_103 = METHOD_28 <S2SV_ModEnd> ( VAR_130 , <S2SV_ModStart> VAR_103 ) ) { METHOD_29 ( & VAR_130 -> VAR_134 ) ; <S2SV_ModStart> VAR_103 ) ; } METHOD_30 ( VAR_130 , VAR_103 ) ; METHOD_31 ( VAR_103 ) ; METHOD_29 ( & VAR_130 -> VAR_134 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ; TYPE_1 VAR_7 ; METHOD_2 ( VAR_13 , & VAR_11 -> VAR_6 )
<S2SV_ModStart> VAR_11 , 1 <S2SV_ModEnd> , VAR_58 ,
<S2SV_ModStart> ) ) { METHOD_13 ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" ) ;
<S2SV_ModStart> VAR_53 |= VAR_32 | VAR_57
<S2SV_ModStart> VAR_39 &= ~ ( VAR_40 | VAR_61 ) <S2SV_ModEnd> ; VAR_59 ->
<S2SV_ModStart> else if ( ( VAR_44 . VAR_33 == VAR_66 ) && ( <S2SV_ModStart> != VAR_73 ) )
<S2SV_ModStart> ; VAR_15 = METHOD_4 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> VAR_16 ) { METHOD_10 <S2SV_ModEnd> ( & VAR_16 <S2SV_ModStart> VAR_16 -> VAR_15 , VAR_17
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> VAR_57 ) ; METHOD_11 ( VAR_25 , 0 , sizeof ( * VAR_25 ) ) ;
<S2SV_ModStart> - VAR_44 ; VAR_254 = METHOD_48 ( VAR_251 , VAR_221 -> VAR_255 , VAR_238 -> VAR_227 . VAR_225 , VAR_238 -> VAR_227 . VAR_228 ) ; if ( VAR_254 ) { if ( VAR_254 == - VAR_256 ) { if ( ! VAR_205 ) { METHOD_49 ( 1 ) ; return VAR_254 ; } } else { return VAR_254 ; } } VAR_254 = 0 ;
<S2SV_ModStart> VAR_25 ) ; if ( ! VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ) return - VAR_9 ;
<S2SV_ModStart> "unixlogin" ) || METHOD_4 <S2SV_ModEnd> ( VAR_14 -> <S2SV_ModStart> VAR_14 -> VAR_13 <S2SV_ModEnd> , "plain" )
<S2SV_ModStart> VAR_312 < 0 && ! VAR_311 -> VAR_313
<S2SV_ModStart> VAR_16 , VAR_39 ; ( TYPE_0 ) VAR_4
<S2SV_ModStart> VAR_137 ) { METHOD_31 <S2SV_ModEnd> ( VAR_125 ) <S2SV_ModStart> VAR_125 ) ; METHOD_32 <S2SV_ModEnd> ( VAR_125 , <S2SV_ModStart> VAR_137 ) { METHOD_31 <S2SV_ModEnd> ( VAR_125 ) <S2SV_ModStart> VAR_125 ) ; METHOD_32 <S2SV_ModEnd> ( VAR_125 , <S2SV_ModStart> METHOD_25 ( VAR_130 ) ; } METHOD_19 ( VAR_125 , & VAR_137 -> VAR_128 . VAR_148 , VAR_113 ) { METHOD_31 ( VAR_125 ) ; METHOD_32 ( VAR_125 , VAR_147 ) ; } METHOD_19 ( VAR_125 , & VAR_137 -> VAR_128 . VAR_149 , VAR_113 ) { METHOD_31 ( VAR_125 ) ; METHOD_32 ( VAR_125 , VAR_147
<S2SV_ModStart> - VAR_44 ; VAR_254 = METHOD_48 ( VAR_251 , VAR_221 -> VAR_255 , VAR_238 -> VAR_227 . VAR_225 , VAR_238 -> VAR_227 . VAR_228 ) ; if ( VAR_254 ) { if ( VAR_254 == - VAR_256 ) { if ( ! VAR_205 ) { METHOD_49 ( 1 ) ; return VAR_254 ; } } else { return VAR_254 ; } } VAR_254 = 0 ;
<S2SV_ModStart> , TYPE_2 VAR_17 , TYPE_3 VAR_51 <S2SV_ModStart> ) goto VAR_40 ; VAR_38 -> VAR_39 . VAR_51 |= VAR_51
<S2SV_ModStart> VAR_203 ) ; METHOD_155 <S2SV_ModEnd> ( VAR_239 , <S2SV_ModStart> , VAR_246 , 0640 <S2SV_ModEnd> , VAR_368 -> <S2SV_ModStart> VAR_368 -> VAR_245 , VAR_352 , VAR_153 | VAR_154 | VAR_155 | VAR_414 <S2SV_ModEnd> ) ; METHOD_140 <S2SV_ModStart> VAR_215 ) ; METHOD_155 <S2SV_ModEnd> ( VAR_239 , <S2SV_ModStart> , VAR_246 , 0640 <S2SV_ModEnd> , VAR_368 -> <S2SV_ModStart> VAR_368 -> VAR_245 , VAR_352 , VAR_153 | VAR_154 | VAR_155 | VAR_414 <S2SV_ModEnd> ) ; METHOD_140 <S2SV_ModStart> VAR_227 ) ; METHOD_155 <S2SV_ModEnd> ( VAR_239 , <S2SV_ModStart> , VAR_246 , 0640 <S2SV_ModEnd> , VAR_368 -> <S2SV_ModStart> VAR_368 -> VAR_245 , VAR_352 , VAR_153 | VAR_154 | VAR_155 | VAR_414 <S2SV_ModEnd> ) ; METHOD_140 <S2SV_ModStart> VAR_237 ) ; <S2SV_ModEnd> METHOD_76 ( VAR_246 <S2SV_ModStart> VAR_239 , VAR_240 <S2SV_ModEnd> , VAR_368 -> <S2SV_ModStart> VAR_368 -> VAR_245 <S2SV_ModEnd> ) ; METHOD_145
<S2SV_ModStart> ) goto VAR_83 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * VAR_20 = sizeof ( * VAR_69 ) ;
<S2SV_ModStart> ) ) ; if ( METHOD_49 ( VAR_89 , VAR_92 ) ) { goto VAR_116 ; } <S2SV_ModStart> 1 ) ; if ( VAR_115 == VAR_117 ) { goto VAR_116 ; }
<S2SV_ModStart> VAR_7 [ VAR_16 <S2SV_ModEnd> ] = { <S2SV_ModStart> ] = { 7 , 20 , 33 , 46 , 59 , 72 , 85 , 98 , 111 , 124 , 137 , 150 , 163 , 176 , 189 , 202 , 215 , 228 , 241 , 254 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 138 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 149 , 151 , 152 , 153 , 154 , 155 , 156 , 157 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 177 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 203 , 204 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 212 , 213 , 214 , 216 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 , 225 , 226 , 227 , 229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 239 , 240 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252 , 253 , 253 } ; assert ( VAR_15 < ( TYPE_3 ) ( sizeof ( VAR_7 ) / sizeof ( VAR_7 [ 0 ] ) ) <S2SV_ModEnd> ) ; VAR_15 <S2SV_ModStart> METHOD_3 ( VAR_15 <S2SV_ModEnd> , VAR_17 ) <S2SV_ModStart> METHOD_3 ( VAR_15 <S2SV_ModEnd> , VAR_16 -
<S2SV_ModStart> { if ( VAR_192 -> VAR_193 ) goto VAR_209 ; if (
<S2SV_ModStart> : VAR_38 = - VAR_28 ; if ( STRUCT_OR_UNION_9 -> VAR_32 -> METHOD_9 ) { METHOD_8 ( & STRUCT_OR_UNION_9 -> VAR_35 ) ; VAR_38 = <S2SV_ModStart> == 0 ) VAR_38 = <S2SV_ModEnd> STRUCT_OR_UNION_9 -> VAR_32 <S2SV_ModStart> VAR_32 -> METHOD_9 ( STRUCT_OR_UNION_9 , VAR_33 , VAR_34 ) ; METHOD_10 <S2SV_ModEnd> ( & STRUCT_OR_UNION_9 <S2SV_ModStart> VAR_35 ) ; <S2SV_ModEnd> } VAR_36 :
<S2SV_ModStart> ; TYPE_10 VAR_110 ; VAR_188 -> VAR_184 = 0
<S2SV_ModStart> * VAR_43 ; unsigned
<S2SV_ModStart> 0 ] ; if ( VAR_10 == VAR_13 ) return VAR_13 <S2SV_ModEnd> ; VAR_15 =
<S2SV_ModStart> = VAR_92 ; if ( VAR_44 -> VAR_46 . VAR_104 < 1 || ! VAR_44 -> VAR_45 ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>interface<S2SV_blank>0<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n" , VAR_105 ) ; VAR_103 = - VAR_12 ; goto VAR_101 ; } <S2SV_ModStart> 1 ) ; if ( ( VAR_92 -> VAR_106 -> VAR_46 . VAR_107 < 2 ) || ! VAR_102 -> VAR_100 [ 1 ] ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>need<S2SV_blank>2<S2SV_blank>interfaces,<S2SV_blank>found<S2SV_blank>%d\\n" , VAR_105 , VAR_92 -> VAR_106 -> VAR_46 . VAR_107 ) ; VAR_103 = - VAR_12 ; goto VAR_101 ; } <S2SV_ModStart> -> VAR_41 ; if ( VAR_44 -> VAR_46 . VAR_104 < 1 || ! VAR_44 -> VAR_45 ) { METHOD_17 ( & VAR_89 -> VAR_93 , "%s():<S2SV_blank>interface<S2SV_blank>1<S2SV_blank>must<S2SV_blank>have<S2SV_blank>an<S2SV_blank>endpoint\\n" , VAR_105 ) ; VAR_103 = - VAR_12 ; goto VAR_96 ; } <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; VAR_102 -> <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> VAR_103 ) goto VAR_91 <S2SV_ModEnd> ; VAR_103 = <S2SV_ModStart> VAR_103 ) goto VAR_108 <S2SV_ModEnd> ; METHOD_12 ( <S2SV_ModStart> return 0 ; VAR_108 : METHOD_13 ( & VAR_92 -> VAR_93 . VAR_94 , & VAR_95 ) ; VAR_91 : METHOD_14 ( VAR_102 <S2SV_ModEnd> ) ; VAR_96 <S2SV_ModStart> ; VAR_96 : <S2SV_ModEnd> METHOD_15 ( &
<S2SV_ModStart> ; TYPE_4 VAR_101 = VAR_107 ; TYPE_4 VAR_103 = VAR_107 <S2SV_ModEnd> ; TYPE_5 VAR_102 <S2SV_ModStart> VAR_99 ) ; VAR_104 : METHOD_17 ( & VAR_102 , & VAR_101 ) ; METHOD_17 ( & VAR_102 , & VAR_103 ) ; <S2SV_ModEnd> METHOD_18 ( VAR_105
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_14 ; METHOD_2 ( & VAR_14 , 0 , sizeof ( VAR_14 ) ) ; VAR_14 <S2SV_ModEnd> . VAR_6 = <S2SV_ModStart> VAR_9 -> VAR_6 ; VAR_14 <S2SV_ModEnd> . VAR_7 = <S2SV_ModStart> VAR_10 == VAR_11 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_44 , VAR_8 ) ; METHOD_30 ( ) ; METHOD_31 ( 0
<S2SV_ModStart> VAR_3 ) { if ( VAR_3 -> VAR_5 ) return ; if ( VAR_3 -> VAR_2 ) <S2SV_ModStart> VAR_2 ) ; if ( VAR_3 -> VAR_4 ) <S2SV_ModStart> VAR_4 ) ; VAR_3 -> VAR_5 = VAR_6 ;
<S2SV_ModStart> ) , VAR_76 , VAR_108
<S2SV_ModStart> struct STRUCT_OR_UNION_7 TYPE_19 ; struct STRUCT_OR_UNION_18 * VAR_129 <S2SV_ModStart> ; if ( METHOD_22 ( <S2SV_ModStart> < VAR_75 ) ) { for ( VAR_125 = VAR_109 ; VAR_125 < VAR_112 ; VAR_125 ++ ) { if ( ! VAR_127 [ VAR_125 ] ) break ; METHOD_18 ( VAR_127 [ VAR_125 ] ) ; } <S2SV_ModEnd> VAR_128 = - <S2SV_ModStart> ; VAR_117 : METHOD_23 ( VAR_129 , STRUCT_OR_UNION_17 , VAR_125 ) { METHOD_18 ( VAR_129 -> VAR_130 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> goto VAR_91 ; VAR_89 %= VAR_92 -> VAR_78 ; VAR_90 %= VAR_92 -> VAR_78 ;
<S2SV_ModStart> VAR_13 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_24 -> <S2SV_ModStart> VAR_26 -> VAR_17 , sizeof ( VAR_24 -> VAR_17 )
<S2SV_ModStart> VAR_18 ) { TYPE_4 VAR_21 = <S2SV_ModEnd> ( TYPE_4 ) <S2SV_ModStart> TYPE_5 ) ) ; if ( VAR_21 < VAR_19 ) { METHOD_3 ( 0x534e4554 , "28672558" , - 1 , VAR_22 , 0 ) ; return VAR_22 ; } TYPE_5 * VAR_20 = METHOD_1 ( VAR_21
<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> return VAR_5 ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ( VAR_49 ) ; VAR_49 -> VAR_51 &= ~ VAR_52
<S2SV_ModStart> ; if ( METHOD_7 ( <S2SV_ModStart> 1 , 0 ) <S2SV_ModStart> ( VAR_18 = METHOD_7 ( <S2SV_ModStart> , & VAR_16 )
<S2SV_ModStart> ; if ( ! VAR_123 <S2SV_ModEnd> || VAR_123 == <S2SV_ModStart> VAR_123 == VAR_102 || VAR_123 == VAR_124
<S2SV_ModStart> , * VAR_32 <S2SV_ModEnd> , * VAR_23 <S2SV_ModStart> = '\\0' ; METHOD_7 ( VAR_5 ) ; VAR_32 = VAR_29 -> VAR_30 ; <S2SV_ModStart> VAR_31 ; } METHOD_8 ( VAR_5 ) ;
<S2SV_ModStart> ( VAR_23 ) && VAR_26 -> METHOD_4 ( VAR_23 ) == 0
<S2SV_ModStart> TYPE_21 VAR_47 , VAR_124 , TYPE_18 , VAR_45 ; unsigned TYPE_21 TYPE_24 ; TYPE_9 TYPE_9 VAR_61 <S2SV_ModEnd> ; TYPE_9 TYPE_9 <S2SV_ModStart> VAR_44 ) ; TYPE_24 = VAR_44 . VAR_129 ; VAR_83 <S2SV_ModEnd> = VAR_44 . <S2SV_ModStart> . VAR_83 ; VAR_45 = METHOD_4 ( ( TYPE_9 TYPE_9 ) TYPE_24 ) ; TYPE_18 = METHOD_5 ( ( TYPE_9 TYPE_9 ) TYPE_24 ) ; if ( VAR_45 != ( VAR_42 -> VAR_132 - ( <S2SV_ModEnd> VAR_42 -> VAR_43 <S2SV_ModStart> ( VAR_44 ) ) ) ) { METHOD_22 ( "read_xattrs_from_disk:<S2SV_blank>Bad<S2SV_blank>xattr_ids<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; return 0 ; } if ( VAR_25 != VAR_96 ) * VAR_25 = VAR_44 . VAR_83 ; if ( VAR_24 ) return VAR_44 . VAR_129 ; VAR_131 = METHOD_11 ( VAR_45 ) ; if ( VAR_131 == VAR_96 ) METHOD_17 ( ) ; VAR_47 = METHOD_8 ( VAR_101 , VAR_42 -> VAR_43 + sizeof ( VAR_44 ) <S2SV_ModStart> = METHOD_10 ( ( TYPE_9 TYPE_9 ) <S2SV_ModStart> ) + ( ( TYPE_9 TYPE_9 )
<S2SV_ModStart> VAR_37 ) { if ( VAR_44 -> VAR_45 < VAR_46 ) { METHOD_10 ( VAR_44 ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( VAR_33 == VAR_34 && ( VAR_44 -> VAR_45 <= VAR_47 || VAR_44 -> VAR_21 [ VAR_48 ] != VAR_49 ) ) { METHOD_10 ( VAR_44 ) ; continue ; } <S2SV_ModStart> -> VAR_21 + VAR_50 <S2SV_ModEnd> ) ; VAR_41
<S2SV_ModStart> ++ ; } METHOD_2 ( * VAR_129 ) ;
<S2SV_ModStart> goto VAR_74 ; if ( VAR_97 >= sizeof <S2SV_ModEnd> ( VAR_220 -> <S2SV_ModStart> VAR_220 -> VAR_71 ) ) VAR_97 = sizeof <S2SV_ModEnd> ( VAR_220 -> <S2SV_ModStart> VAR_220 -> VAR_71 ) - 1 ; memset ( VAR_220 -> VAR_71 , 0 , sizeof ( VAR_220 -> VAR_71 ) ) ; snprintf ( VAR_220 -> VAR_71 , sizeof ( VAR_220 -> VAR_71 ) , "%.*s<S2SV_blank>bc<S2SV_blank>" , VAR_97 , & VAR_99 [ VAR_68 ] <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; TYPE_5 VAR_170 ; if ( VAR_101 < 0 || VAR_101 >= VAR_173 ) return - VAR_174
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct STRUCT_OR_UNION_6 *
<S2SV_ModStart> TYPE_0 METHOD_0 ( unsigned <S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_17 , TYPE_4 VAR_24 <S2SV_ModStart> * VAR_21 = min ( * VAR_21 , VAR_24 ? VAR_17 -> VAR_18 . VAR_25 -> VAR_21 : <S2SV_ModStart> VAR_18 . VAR_19 )
<S2SV_ModStart> VAR_232 -> VAR_233 , VAR_235
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_1 METHOD_0 (
<S2SV_ModStart> } if ( METHOD_19 <S2SV_ModEnd> ( "none" , <S2SV_ModStart> 0 , "size=100000,mode=755" , VAR_31 -> VAR_37 ? VAR_31 -> METHOD_14 : VAR_44
<S2SV_ModStart> ; VAR_242 : if <S2SV_ModEnd> ( TYPE_242 -> <S2SV_ModStart> TYPE_242 -> VAR_243 ) METHOD_106 ( TYPE_242
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_2 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_7 ) { if ( VAR_7 ) { if ( METHOD_3 ( VAR_13 -> VAR_16 , & <S2SV_ModStart> . VAR_4 -> VAR_17 , VAR_7 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; <S2SV_ModEnd> METHOD_1 ( VAR_12 <S2SV_ModStart> VAR_15 ) ; } else { <S2SV_ModEnd> METHOD_2 ( VAR_12 <S2SV_ModStart> ) ; } VAR_13 -> VAR_14 . VAR_4 -> VAR_7 = VAR_7 ; return 0 ; }
<S2SV_ModStart> , VAR_47 , VAR_53 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = 0 ; METHOD_3 ( VAR_14 ) ; METHOD_4 ( VAR_12 ) ; <S2SV_ModStart> VAR_12 = VAR_12 ; VAR_14 -> VAR_15 = VAR_16
<S2SV_ModStart> ( VAR_83 ) goto VAR_84 <S2SV_ModEnd> ; VAR_83 = <S2SV_ModStart> VAR_82 ) ; VAR_84 : METHOD_20 ( & VAR_80 -> VAR_21 ) ;
<S2SV_ModStart> . VAR_79 ; METHOD_13 <S2SV_ModEnd> ( VAR_122 ->
<S2SV_ModStart> if ( VAR_48 >= <S2SV_ModEnd> VAR_22 ) {
<S2SV_ModStart> , TYPE_2 VAR_17 , TYPE_3 VAR_51 <S2SV_ModStart> ) goto VAR_40 ; VAR_38 -> VAR_39 . VAR_51 |= VAR_51
<S2SV_ModStart> TYPE_2 VAR_49 ; METHOD_4 <S2SV_ModEnd> ( VAR_47 -> <S2SV_ModStart> ) 129 ; METHOD_4 <S2SV_ModEnd> ( VAR_47 -> <S2SV_ModStart> ) 129 ; METHOD_4 <S2SV_ModEnd> ( VAR_47 ->
<S2SV_ModStart> } if ( ( <S2SV_ModStart> VAR_148 < VAR_27 ) || ( VAR_29 < sizeof ( TYPE_14 ) ) || ( <S2SV_ModEnd> VAR_148 > VAR_29 <S2SV_ModStart> sizeof ( TYPE_14 )
<S2SV_ModStart> ) ; } else if ( VAR_65 == VAR_124 ) { METHOD_9 ( VAR_107 ) ; if ( VAR_122 -> VAR_125 -> VAR_126 ) METHOD_16 ( "Invalid<S2SV_blank>AUTH<S2SV_blank>line,<S2SV_blank>aborting\\n" ) ; METHOD_12 ( VAR_117 ) ; break ; }
<S2SV_ModStart> ; TYPE_7 VAR_116 ; struct STRUCT_OR_UNION_20 * VAR_117 = METHOD_35 ( STRUCT_OR_UNION_19 -> VAR_95 ) -> VAR_118 <S2SV_ModStart> ( METHOD_28 ( VAR_117 , <S2SV_ModStart> ( METHOD_28 ( VAR_117 ,
<S2SV_ModStart> ) ; } if ( VAR_84 ) { if ( VAR_22 ) METHOD_32 ( "Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on" ) ; VAR_42 = VAR_24 ; VAR_45 = 0 ; }
<S2SV_ModStart> TYPE_2 * VAR_83 = METHOD_27 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> , "w" ) <S2SV_ModEnd> ; TYPE_4 VAR_19 <S2SV_ModStart> * VAR_80 ; if ( ! VAR_83 ) { METHOD_2 ( VAR_4 , "Can\'t<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>(%d:<S2SV_blank>%s)" , VAR_5 , VAR_7 , METHOD_3 ( VAR_7 ) ) ; return ; } METHOD_28 ( VAR_9 -> VAR_80 , VAR_80 , VAR_19 ) { <S2SV_ModEnd> METHOD_25 ( VAR_83
<S2SV_ModStart> < 1 || VAR_224 + VAR_152 < VAR_224 <S2SV_ModEnd> ) { METHOD_49
<S2SV_ModStart> ] , VAR_120 + 4 <S2SV_ModStart> VAR_122 += VAR_120 + 4
<S2SV_ModStart> VAR_42 [ VAR_44 ++ ] ; VAR_284 = ( 1U << METHOD_2 ( VAR_49 ) ) >> 1 ; if ( VAR_44 + VAR_284 > VAR_26 ) { METHOD_43 ( VAR_280 , "Not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>(need<S2SV_blank>%d,<S2SV_blank>have<S2SV_blank>%d)\\n" , VAR_44 + VAR_284 , VAR_26 ) ; break ; } <S2SV_ModEnd> switch ( VAR_284 <S2SV_ModStart> break ; case 4 : <S2SV_ModEnd> VAR_285 = METHOD_4
<S2SV_ModStart> * VAR_14 ; if ( VAR_9 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_write" ) ; }
<S2SV_ModStart> ; if ( VAR_44 -> VAR_46 & VAR_47 ) return VAR_48 ; if (
<S2SV_ModStart> TYPE_4 VAR_15 = METHOD_5 ( <S2SV_ModStart> ( * VAR_16 )
<S2SV_ModStart> , VAR_47 ) || ! VAR_54 -> VAR_33 . VAR_34
<S2SV_ModStart> VAR_45 ) , VAR_80 , <S2SV_ModStart> VAR_64 . VAR_48 , VAR_81 / 2 <S2SV_ModStart> VAR_58 ) , VAR_80 , <S2SV_ModStart> VAR_64 . VAR_58 , VAR_82 / 2
<S2SV_ModStart> VAR_48 , VAR_49 , VAR_50
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return VAR_201 ;
<S2SV_ModStart> VAR_24 -> VAR_25 ; TYPE_0 VAR_28 <S2SV_ModStart> ) ) ; for ( VAR_28 = VAR_22 ; VAR_28 < VAR_22 + VAR_23 - 1 ; VAR_28 ++ ) VAR_26 [ VAR_28 ] . VAR_29 = VAR_30 ;
<S2SV_ModStart> VAR_2 ) , "crypto-%s" <S2SV_ModEnd> , VAR_2 )
<S2SV_ModStart> = VAR_83 ; VAR_253 -> VAR_255 &= ~ VAR_256 ;
<S2SV_ModStart> break ; } if ( VAR_71 -> VAR_74 == 0 ) break ; VAR_71 -> VAR_74 -- ;
<S2SV_ModStart> ( & VAR_2 ) ; METHOD_3 ( & VAR_38
<S2SV_ModStart> VAR_45 ) ; if ( ! METHOD_20 ( METHOD_19 ( VAR_20 , VAR_46 ) ) ) METHOD_15 ( VAR_39 , "key<S2SV_blank>not<S2SV_blank>set" ) ;
<S2SV_ModStart> TYPE_12 VAR_82 ; METHOD_11 <S2SV_ModEnd> ( & VAR_91
<S2SV_ModStart> = 0 ; TYPE_6 VAR_33 = 0 ; <S2SV_ModStart> , & VAR_26 , & VAR_33 <S2SV_ModStart> METHOD_6 ( VAR_20 ) ; if ( VAR_33 > VAR_34 ) METHOD_6 ( VAR_28 <S2SV_ModStart> ) ; } if ( VAR_32 > ( TYPE_3 ) VAR_33 ) { VAR_32 = - 1 ; METHOD_6 ( VAR_28 ) ; }
<S2SV_ModStart> ( VAR_11 ) METHOD_3 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> ; if ( VAR_281 < METHOD_70 ( VAR_263 ) &&
<S2SV_ModStart> ) ; } METHOD_26 ( VAR_106 ) ;
<S2SV_ModStart> VAR_29 ) { TYPE_2 <S2SV_ModEnd> VAR_40 ; if
<S2SV_ModStart> ) ) { if ( ! VAR_45 ) goto VAR_1788 ; <S2SV_ModStart> ) ) { if ( ! VAR_45 ) goto VAR_1788 ; <S2SV_ModStart> { if ( ! VAR_45 ) goto VAR_1788 ; if ( <S2SV_ModStart> ) ) { if ( ! VAR_45 ) goto VAR_1788 ;
<S2SV_ModStart> STRUCT_OR_UNION_3 VAR_72 ; METHOD_4 ( & VAR_72 , 0 , sizeof ( VAR_72 ) ) ;
<S2SV_ModStart> VAR_72 ) ; METHOD_6 ( & VAR_72 -> VAR_65 ) ; <S2SV_ModStart> VAR_71 ; } VAR_43 = STRUCT_OR_UNION_5 ( VAR_72 ) ; if ( VAR_43 -> VAR_36 != sizeof ( struct STRUCT_OR_UNION_7 ) ) { VAR_73 = - VAR_38 ; goto VAR_71 ; } VAR_61 = ( struct STRUCT_OR_UNION_7 * ) VAR_43 -> VAR_44 ; METHOD_8 ( VAR_45 != VAR_46 ) ; if ( VAR_61 -> VAR_52 != VAR_49 ) { printk_once ( KERN_WARNING "%s:<S2SV_blank>key<S2SV_blank>size<S2SV_blank>incorrect:<S2SV_blank>%d\\n" , VAR_50 , VAR_61 -> VAR_52 ) ; VAR_73 = - VAR_54 ; goto VAR_71 ; } VAR_73 = METHOD_10 ( VAR_59 -> VAR_60 , VAR_61 -> VAR_62 , VAR_63 ) ; VAR_71 : METHOD_11 <S2SV_ModEnd> ( & VAR_72 <S2SV_ModStart> VAR_65 ) ; METHOD_12 ( VAR_72 ) ; return <S2SV_ModEnd> VAR_73 ; }
<S2SV_ModStart> , VAR_39 ; TYPE_7 <S2SV_ModEnd> VAR_167 ; unsigned <S2SV_ModStart> VAR_97 ) ; if ( ! VAR_167 ) METHOD_36 ( "FAT<S2SV_blank>size<S2SV_blank>is<S2SV_blank>zero." ) ; <S2SV_ModStart> VAR_227 -> VAR_82 ; if ( VAR_85 < VAR_227 -> VAR_87 ) METHOD_36 ( "Filesystem<S2SV_blank>has<S2SV_blank>no<S2SV_blank>space<S2SV_blank>for<S2SV_blank>any<S2SV_blank>data<S2SV_blank>clusters" )
<S2SV_ModStart> -> VAR_363 ; METHOD_42 ( VAR_348 [ 0 ] ) ; <S2SV_ModStart> case VAR_315 : METHOD_36 ( VAR_348 [ 0 ] , 2 ) ; <S2SV_ModStart> case VAR_315 : METHOD_36 ( VAR_348 [ 0 ] , 2 ) ;
<S2SV_ModStart> ) { return VAR_1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_119 ) return VAR_1129 <S2SV_ModEnd> ; METHOD_35 ( <S2SV_ModStart> ) { return VAR_1129 <S2SV_ModEnd> ; } VAR_1111 <S2SV_ModStart> VAR_1111 ) return VAR_1129 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_137 ) return VAR_1129 <S2SV_ModEnd> ; VAR_745 = <S2SV_ModStart> 65535 ) return VAR_1129 <S2SV_ModEnd> ; METHOD_35 ( <S2SV_ModStart> VAR_198 ) return VAR_1129 <S2SV_ModEnd> ; VAR_654 . <S2SV_ModStart> VAR_242 ) return VAR_1129 <S2SV_ModEnd> ; VAR_604 =
<S2SV_ModStart> ; if ( VAR_66 -> <S2SV_ModStart> ) ( * ( VAR_66 -> VAR_156 ) ) <S2SV_ModEnd> ( VAR_157 ,
<S2SV_ModStart> , VAR_7 ) == 0 || VAR_22 -> VAR_17 . VAR_18
<S2SV_ModStart> = JAS_CAST ( jas_uchar <S2SV_ModEnd> * , VAR_34
<S2SV_ModStart> VAR_22 ) { unsigned TYPE_1 VAR_24 = VAR_18 ; struct STRUCT_OR_UNION_4 * VAR_25 = METHOD_6 ( ) ; if ( ! METHOD_7 ( VAR_25 ) ) { if ( METHOD_8 ( VAR_25 ) ) VAR_24 = 1 ; <S2SV_ModStart> STRUCT_OR_UNION_3 ) * VAR_24 <S2SV_ModEnd> , VAR_7 ) <S2SV_ModStart> VAR_7 ) ; } <S2SV_ModStart> -> VAR_17 = VAR_24 ; VAR_22 -> VAR_25 = VAR_25 ; METHOD_9 ( VAR_22 , 0 , VAR_24 ) <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> VAR_22 ; } METHOD_10 ( VAR_25 ) ;
<S2SV_ModStart> -> VAR_20 ; METHOD_9 <S2SV_ModEnd> ( VAR_49 . <S2SV_ModStart> VAR_31 ) ; METHOD_9 <S2SV_ModEnd> ( VAR_49 .
<S2SV_ModStart> ++ ) { if ( ! VAR_91 -> VAR_92 ) continue ;
<S2SV_ModStart> ; if ( ( VAR_79 > 12 ) && <S2SV_ModStart> else if ( ( VAR_79 > 9 ) &&
<S2SV_ModStart> TYPE_4 VAR_81 ; VAR_74 -> VAR_82 = VAR_60 ;
<S2SV_ModStart> ( ) ; if ( ! VAR_16 ) { return VAR_19 ; }
<S2SV_ModStart> VAR_212 = VAR_213 , VAR_214 <S2SV_ModStart> VAR_213 ) ) ; VAR_214 = VAR_212 <S2SV_ModStart> ; } } if ( VAR_212 < VAR_214 ) { METHOD_47 ( VAR_215 ) ; } VAR_214 = VAR_212 ;
<S2SV_ModStart> ; TYPE_21 VAR_131 <S2SV_ModEnd> , VAR_160 ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> VAR_160 = 0 <S2SV_ModStart> VAR_160 = 1 <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( VAR_164 < VAR_165 ) { if ( <S2SV_ModEnd> VAR_170 -> VAR_145 <S2SV_ModStart> VAR_170 -> VAR_145 > 3 <S2SV_ModEnd> || ( VAR_160 <S2SV_ModStart> 30 ) ) <S2SV_ModEnd> { METHOD_15 ( <S2SV_ModStart> if ( VAR_160 <S2SV_ModEnd> ) { if <S2SV_ModStart> goto VAR_169 ; }
<S2SV_ModStart> -> VAR_9 ) { <S2SV_ModStart> VAR_10 ) ; }
<S2SV_ModStart> VAR_3 ) ; <S2SV_ModEnd> METHOD_4 ( &
<S2SV_ModStart> ) != VAR_14 || VAR_13 -> VAR_19 != VAR_18 -> VAR_19
<S2SV_ModStart> { if ( VAR_18 > VAR_8 - <S2SV_ModStart> VAR_15 -> VAR_16 <S2SV_ModEnd> ) { METHOD_1
<S2SV_ModStart> ) { const TYPE_5 <S2SV_ModEnd> * const VAR_29 <S2SV_ModStart> = METHOD_1 ( VAR_33 <S2SV_ModEnd> ) ; VAR_31 <S2SV_ModStart> ; VAR_31 -> VAR_35 <S2SV_ModEnd> = VAR_33 -> <S2SV_ModStart> = VAR_33 -> VAR_35 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_31 ; METHOD_2 ( & VAR_31 , 0 , sizeof ( VAR_31 ) )
<S2SV_ModStart> VAR_37 : case VAR_58 : case
<S2SV_ModStart> case VAR_18 : case VAR_60 :
<S2SV_ModStart> ; if ( METHOD_2 <S2SV_ModEnd> ( & VAR_4
<S2SV_ModStart> -> VAR_587 = 1 <S2SV_ModEnd> ; VAR_878 ->
<S2SV_ModStart> == 1 ) { <S2SV_ModStart> return 8 ; } <S2SV_ModStart> 4 ) ; if ( VAR_74 > ( 1 << 20 ) ) { METHOD_61 ( "vnc:<S2SV_blank>client_cut_text<S2SV_blank>msg<S2SV_blank>payload<S2SV_blank>has<S2SV_blank>%u<S2SV_blank>bytes" "<S2SV_blank>which<S2SV_blank>exceeds<S2SV_blank>our<S2SV_blank>limit<S2SV_blank>of<S2SV_blank>1MB." , VAR_74 ) ; METHOD_58 ( VAR_145 ) ; break ; } <S2SV_ModStart> > 0 ) { <S2SV_ModStart> + VAR_74 ; }
<S2SV_ModStart> < 3 ) goto VAR_56 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> < 1 ) goto VAR_56 ; if ( * VAR_55 ) METHOD_13 ( ( VAR_57 , "Tag[%u]<S2SV_blank>" , * VAR_55 ) ) ; else METHOD_13 ( ( VAR_57 , "Tag[Unused]<S2SV_blank>" ) ) ; VAR_55 ++ ; VAR_49 -- ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case VAR_39 : if ( VAR_49 < 1 ) goto VAR_56 ; <S2SV_ModStart> = 0 ; VAR_50 < VAR_49 && * VAR_55 <S2SV_ModEnd> ; VAR_50 ++
<S2SV_ModStart> TYPE_6 VAR_78 ; TYPE_3 <S2SV_ModEnd> VAR_103 ; TYPE_8 <S2SV_ModStart> * VAR_51 ) ; if ( sizeof ( struct STRUCT_OR_UNION_4 ) > VAR_103 ) goto VAR_106 <S2SV_ModStart> ) VAR_101 ; METHOD_1 ( * VAR_65 ) ; if ( sizeof ( struct STRUCT_OR_UNION_7 ) > VAR_103 ) goto VAR_106 ; <S2SV_ModStart> VAR_104 ) ; if ( VAR_104 > VAR_103 ) goto VAR_106 ; <S2SV_ModStart> case VAR_79 : if ( VAR_104 != 4 ) goto VAR_106 ; <S2SV_ModStart> case VAR_92 : if ( VAR_104 != VAR_108 ) goto VAR_106 ;
<S2SV_ModStart> TYPE_15 METHOD_0 ( <S2SV_ModEnd> TYPE_2 VAR_96 , <S2SV_ModStart> ) { TYPE_25 <S2SV_ModEnd> VAR_80 , VAR_90 <S2SV_ModStart> ; TYPE_15 VAR_102 = VAR_113 <S2SV_ModStart> = 1 ; const TYPE_28 * VAR_114 = METHOD_5 ( VAR_96 ) ; if ( ! VAR_114 ) { METHOD_6 ( "Algorithm<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>hmac:<S2SV_blank>%x" , VAR_96 ) ; return VAR_115 ; } TYPE_29 VAR_116 ; METHOD_7 ( & VAR_116 ) ; TYPE_16 VAR_117 = METHOD_8 ( & VAR_116 , VAR_97 -> VAR_57 , VAR_97 -> VAR_111 , VAR_114 , VAR_118 ) ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Init<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) ; return VAR_119 ; } <S2SV_ModStart> VAR_112 ) { TYPE_25 VAR_105 ; <S2SV_ModStart> VAR_98 [ VAR_93 ] = ( TYPE_25 * ) 0 ; TYPE_16 VAR_120 ; for ( VAR_120 = 0 ; VAR_120 < VAR_93 ; VAR_120 ++ ) { TYPE_25 * VAR_121 = VAR_98 [ VAR_120 ] ; TYPE_16 VAR_117 = METHOD_10 ( & VAR_116 , VAR_121 -> VAR_106 . VAR_57 , VAR_121 -> VAR_106 . VAR_111 ) ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Update<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) <S2SV_ModEnd> ; VAR_102 = <S2SV_ModStart> ; VAR_102 = VAR_119 ; goto VAR_122 ; } } unsigned VAR_111 = sizeof ( VAR_105 . VAR_110 . VAR_57 ) ; TYPE_16 VAR_117 = HMAC_Final ( & VAR_116 , VAR_105 . VAR_110 . VAR_57 , & VAR_111 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Final<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) ; VAR_102 = VAR_119 ; goto VAR_122 ; } VAR_105 . VAR_110 . VAR_111 = VAR_111 ; <S2SV_ModEnd> TYPE_27 VAR_107 = <S2SV_ModStart> VAR_107 ) { VAR_102 = VAR_108 ; goto VAR_122 ; } } VAR_109 -> VAR_110 . VAR_111 = VAR_112 ; VAR_122 : METHOD_11 ( & VAR_116 ) ; return VAR_102 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> METHOD_1 ( * VAR_35 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> -> VAR_39 . VAR_36 = 0 ; STRUCT_OR_UNION_14 -> VAR_39 .
<S2SV_ModStart> STRUCT_OR_UNION_8 , VAR_34 ) ; METHOD_9 ( VAR_36 , 0 , sizeof ( struct STRUCT_OR_UNION_9 )
<S2SV_ModStart> ; VAR_49 -> <S2SV_ModEnd> VAR_11 = METHOD_1
<S2SV_ModStart> VAR_116 ) && ( <S2SV_ModStart> VAR_117 > 0 ) && ( 1 == VAR_739 -> VAR_103 )
<S2SV_ModStart> -> VAR_18 . VAR_22 <S2SV_ModEnd> ) ; VAR_20
<S2SV_ModStart> ( TYPE_1 * <S2SV_ModEnd> VAR_27 , TYPE_2 <S2SV_ModStart> , TYPE_2 * <S2SV_ModEnd> VAR_35 , TYPE_8
<S2SV_ModStart> VAR_57 ) ; <S2SV_ModEnd> do { TYPE_8
<S2SV_ModStart> TYPE_5 * VAR_5 , const TYPE_4 * VAR_32 <S2SV_ModStart> VAR_30 ) { TYPE_6 VAR_33 = VAR_32 - ( const TYPE_4 * ) VAR_5 ; <S2SV_ModStart> VAR_11 = VAR_5 ; if ( VAR_29 < VAR_33 ) return - VAR_31
<S2SV_ModStart> TYPE_3 VAR_77 = - VAR_78 ; METHOD_5 ( & VAR_74 , 0 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> sizeof ( VAR_74 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; TYPE_2 VAR_88 = 0 <S2SV_ModStart> &= VAR_8 ; if ( VAR_73 < VAR_89 ) return - VAR_90 <S2SV_ModEnd> ; VAR_26 =
<S2SV_ModStart> VAR_97 ; } METHOD_24 ( & VAR_95 [ VAR_96 + 2 ] ) ;
<S2SV_ModStart> ( VAR_48 -> METHOD_33 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> , VAR_48 -> METHOD_33 <S2SV_ModEnd> ( ) ,
<S2SV_ModStart> VAR_6 ) { TYPE_3 VAR_7 <S2SV_ModEnd> ; VAR_7 = <S2SV_ModStart> METHOD_2 ( STRUCT_OR_UNION_4 <S2SV_ModEnd> , VAR_5 ,
<S2SV_ModStart> -> VAR_34 = METHOD_6 <S2SV_ModEnd> ( & VAR_33
<S2SV_ModStart> METHOD_0 ( const TYPE_4 <S2SV_ModEnd> * VAR_9 , <S2SV_ModStart> * VAR_9 , TYPE_4 <S2SV_ModEnd> * VAR_7 ) <S2SV_ModStart> != VAR_9 ) METHOD_3 <S2SV_ModEnd> ( VAR_7 , <S2SV_ModStart> , sizeof ( TYPE_4 <S2SV_ModEnd> ) * VAR_8
<S2SV_ModStart> STRUCT_OR_UNION_2 * ) <S2SV_ModEnd> VAR_4 -> VAR_3 <S2SV_ModStart> VAR_4 -> VAR_3 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_5
<S2SV_ModStart> VAR_10 ) & ( VAR_11 | VAR_149 ) <S2SV_ModEnd> ) { METHOD_16
<S2SV_ModStart> * VAR_5 , struct STRUCT_OR_UNION_23 * VAR_244 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; TYPE_6 VAR_243 = 0 <S2SV_ModStart> ; TYPE_15 VAR_224 = 0 <S2SV_ModEnd> ; TYPE_5 VAR_193 <S2SV_ModStart> ; TYPE_5 VAR_193 = METHOD_35 ( VAR_244 ) <S2SV_ModStart> TYPE_6 VAR_192 ; <S2SV_ModEnd> if ( METHOD_21 <S2SV_ModStart> ) ) return <S2SV_ModEnd> 0 ; METHOD_3 <S2SV_ModStart> { TYPE_15 VAR_164 <S2SV_ModEnd> = VAR_180 -> <S2SV_ModStart> goto VAR_222 ; VAR_243 = METHOD_36 ( VAR_182 -> STRUCT_OR_UNION_22 , VAR_172 , VAR_192 , VAR_244 ) ; if ( METHOD_21 ( VAR_243 < VAR_192 ) ) { VAR_164 = - VAR_245 ; <S2SV_ModEnd> goto VAR_222 ; <S2SV_ModStart> VAR_222 ; } VAR_224 = 1 ; <S2SV_ModStart> += VAR_192 ; VAR_243 = VAR_192 ; if ( ! METHOD_35 ( VAR_244 ) <S2SV_ModEnd> ) goto VAR_222 <S2SV_ModStart> -> VAR_189 ; TYPE_15 VAR_246 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; VAR_246 = METHOD_36 ( STRUCT_OR_UNION_22 , 0 , VAR_140 , VAR_244 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( METHOD_21 ( VAR_246 < VAR_140 && METHOD_35 ( VAR_244 ) ) ) { if ( ! VAR_243 ) VAR_243 = - VAR_245 <S2SV_ModEnd> ; break ; <S2SV_ModStart> } VAR_243 += VAR_246 <S2SV_ModEnd> ; VAR_182 -> <S2SV_ModStart> -> VAR_174 = VAR_246 <S2SV_ModEnd> ; VAR_182 -> <S2SV_ModStart> = VAR_190 ; if ( ! METHOD_35 ( VAR_244 ) <S2SV_ModEnd> ) break ;
<S2SV_ModStart> ) { TYPE_1 VAR_39 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; VAR_39 = rd_release_sgl_table ( STRUCT_OR_UNION_13 , <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_42 <S2SV_ModStart> STRUCT_OR_UNION_13 -> VAR_42 , <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_44 <S2SV_ModStart> STRUCT_OR_UNION_13 -> VAR_44 ) ; <S2SV_ModEnd> METHOD_4 ( "CORE_RD[%u]<S2SV_blank>-<S2SV_blank>Released<S2SV_blank>device<S2SV_blank>space<S2SV_blank>for<S2SV_blank>Ramdisk" <S2SV_ModStart> VAR_40 ) ; <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_42
<S2SV_ModStart> { TYPE_19 VAR_297 = 1
<S2SV_ModStart> TYPE_3 VAR_111 ; <S2SV_ModEnd> METHOD_13 ( VAR_115 <S2SV_ModStart> -> VAR_26 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> -> VAR_44 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> -> VAR_62 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> -> VAR_80 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> -> VAR_98 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> -> VAR_116 ) { for ( VAR_111 = 0 ; VAR_111 < VAR_104 ; ++ VAR_111 ) <S2SV_ModEnd> { METHOD_13 ( <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_22 ; METHOD_2 <S2SV_ModEnd> ( VAR_22 . <S2SV_ModStart> . VAR_4 , "cipher" , sizeof ( VAR_22 . VAR_4 ) <S2SV_ModEnd> ) ; VAR_22
<S2SV_ModStart> case VAR_238 : if ( VAR_497 != 1 ) { METHOD_159 ( ( VAR_499 , "<S2SV_blank>?)" ) ) ; break ; }
<S2SV_ModStart> == 12 && ( <S2SV_ModStart> VAR_20 & VAR_11 )
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_3 , <S2SV_ModStart> VAR_5 ) { METHOD_3 <S2SV_ModEnd> ( VAR_3 ,
<S2SV_ModStart> goto VAR_144 ; if ( VAR_147 . VAR_67 > sizeof ( VAR_138 ) || VAR_147 . VAR_67 < 0 ) { VAR_148 = - VAR_149 ; goto VAR_144 ; }
<S2SV_ModStart> < 0 ) { METHOD_23 ( VAR_113 ) ; return ; } <S2SV_ModEnd> if ( VAR_103
<S2SV_ModStart> ; } } VAR_182 = VAR_182 -> VAR_261 ;
<S2SV_ModStart> 2 ) { METHOD_15 ( * VAR_76 , 2 ) ; <S2SV_ModStart> VAR_78 - 2 ; if ( VAR_78 < VAR_62 ) goto VAR_80 ; METHOD_15 ( * ( VAR_76 ) , VAR_62 ) <S2SV_ModStart> VAR_20 : { if ( VAR_62 < VAR_22 ) goto VAR_80 <S2SV_ModEnd> ; VAR_31 = <S2SV_ModStart> = VAR_76 + VAR_22 ; VAR_78 = VAR_78 - VAR_22 ; VAR_62 = VAR_62 - VAR_22 <S2SV_ModEnd> ; break ; <S2SV_ModStart> VAR_37 : { if ( VAR_62 < VAR_59 ) goto VAR_80 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> - VAR_59 ; VAR_62 = VAR_62 - VAR_59 ; <S2SV_ModStart> VAR_60 : { while ( VAR_62 <S2SV_ModEnd> >= VAR_79 ) <S2SV_ModStart> VAR_79 ) { <S2SV_ModEnd> METHOD_23 ( ( <S2SV_ModStart> - VAR_79 ; VAR_62 = VAR_62 - VAR_79 ; <S2SV_ModStart> break ; } VAR_76 += VAR_62 ; VAR_78 -= VAR_62 ;
<S2SV_ModStart> VAR_95 , VAR_33 ; TYPE_4 VAR_101 <S2SV_ModStart> VAR_86 ; } VAR_101 = ( TYPE_2 * ) ( VAR_22 -> VAR_16 + VAR_22 -> VAR_18 ) - VAR_36 ; if ( VAR_101 <= 0 ) { METHOD_11 ( & VAR_85 -> VAR_85 , "invalid<S2SV_blank>control<S2SV_blank>header\\n" ) ; return - VAR_86 ; } <S2SV_ModStart> ; if ( VAR_101 < sizeof ( * VAR_57 ) ) { METHOD_11 ( & VAR_85 -> VAR_85 , "too<S2SV_blank>short<S2SV_blank>v1<S2SV_blank>buffer<S2SV_blank>descriptor\\n" ) ; return - VAR_86 ; } if ( <S2SV_ModStart> VAR_85 , "skipping<S2SV_blank>empty<S2SV_blank>audio<S2SV_blank>interface<S2SV_blank>(v1)\\n" ) ; return - VAR_86 ; } if ( VAR_101 < VAR_57 -> VAR_43 ) { METHOD_11 ( & VAR_85 -> VAR_85 , "invalid<S2SV_blank>buffer<S2SV_blank>length<S2SV_blank>(v1)\\n"
<S2SV_ModStart> VAR_12 ) ; VAR_43 = METHOD_6 ( & VAR_41 ) ; if ( VAR_43 ) goto VAR_44 ; <S2SV_ModStart> ! VAR_22 ) { VAR_43 = - VAR_15 ; goto VAR_45 ; } <S2SV_ModEnd> VAR_43 = METHOD_7 <S2SV_ModStart> else { goto VAR_45 <S2SV_ModEnd> ; } METHOD_16 <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; VAR_45 <S2SV_ModEnd> : METHOD_16 ( <S2SV_ModStart> VAR_41 ) ; VAR_44 :
<S2SV_ModStart> const VAR_33 , TYPE_8 * const VAR_76 , <S2SV_ModStart> -> VAR_8 ; <S2SV_ModEnd> TYPE_19 * * <S2SV_ModStart> TYPE_19 * * VAR_15 <S2SV_ModEnd> = VAR_76 -> <S2SV_ModStart> -> VAR_18 && VAR_15 <S2SV_ModEnd> [ - 1 <S2SV_ModStart> -> VAR_22 && VAR_15 <S2SV_ModEnd> [ - VAR_76 <S2SV_ModStart> VAR_77 ] ; const <S2SV_ModEnd> TYPE_16 VAR_95 = <S2SV_ModStart> - VAR_57 ; const <S2SV_ModStart> VAR_114 = VAR_48 ; TYPE_16 VAR_115 [ VAR_116 ] = { 0 } <S2SV_ModStart> TYPE_19 * * <S2SV_ModEnd> VAR_62 = & <S2SV_ModStart> ; METHOD_3 ( VAR_76 <S2SV_ModEnd> , VAR_62 , <S2SV_ModStart> , & VAR_114 , VAR_115 <S2SV_ModStart> VAR_65 ) { TYPE_19 * * VAR_117 = & VAR_15 <S2SV_ModEnd> [ - VAR_78 <S2SV_ModStart> ; METHOD_3 ( VAR_76 , VAR_117 , & VAR_112 , & VAR_114 , VAR_115 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_73 ) { TYPE_19 * * VAR_118 = & VAR_15 <S2SV_ModEnd> [ - VAR_76 <S2SV_ModStart> ; METHOD_3 ( VAR_76 , VAR_118 , & VAR_112 , & VAR_114 , VAR_115 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_98 ) ; if ( METHOD_6 ( VAR_102 , VAR_57 , VAR_60 ) ) { VAR_112 = VAR_50 ; } else { <S2SV_ModStart> = METHOD_5 ( VAR_102 -> VAR_103 . VAR_119 , METHOD_5 ( VAR_112 , VAR_114 ) ) ; } <S2SV_ModEnd> if ( VAR_102
<S2SV_ModStart> goto VAR_91 ; VAR_89 %= VAR_92 -> VAR_78 ; VAR_90 %= VAR_92 -> VAR_78 ;
<S2SV_ModStart> -> VAR_25 . VAR_29 <S2SV_ModEnd> ) ; VAR_27
<S2SV_ModStart> == VAR_4 ) * VAR_14 = METHOD_4 <S2SV_ModEnd> ( VAR_13 . <S2SV_ModStart> VAR_13 . VAR_8 ) ; else <S2SV_ModEnd> METHOD_3 ( VAR_13 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_53 |= VAR_32 | VAR_57
<S2SV_ModStart> return VAR_377 ; TYPE_26 VAR_347 = 0 ; if ( METHOD_43 ( sizeof ( TYPE_6 ) , VAR_337 , & VAR_347 ) ) return VAR_378 ; <S2SV_ModStart> = METHOD_5 ( VAR_347 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_5 , <S2SV_ModStart> * VAR_5 , TYPE_6 <S2SV_ModEnd> * VAR_8 ) <S2SV_ModStart> { if ( METHOD_4 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> VAR_8 = ( TYPE_6 <S2SV_ModEnd> ) METHOD_3 (
<S2SV_ModStart> * VAR_15 , TYPE_1 <S2SV_ModEnd> VAR_19 ) {
<S2SV_ModStart> VAR_35 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_68
<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> ; TYPE_8 VAR_66 <S2SV_ModEnd> ; TYPE_9 VAR_69 <S2SV_ModStart> 0 ) ; VAR_66 <S2SV_ModEnd> = METHOD_6 ( <S2SV_ModStart> > 0 ; ) { <S2SV_ModEnd> VAR_69 . VAR_39 <S2SV_ModStart> break ; } VAR_78 -= VAR_66 ; VAR_40 += VAR_66 ; VAR_66 <S2SV_ModEnd> = METHOD_6 (
<S2SV_ModStart> case VAR_126 : if ( VAR_677 < VAR_704 ) { VAR_700 . VAR_684 . VAR_685 = VAR_686 ; METHOD_37 ( ) ; return ; } <S2SV_ModStart> ; if ( ( <S2SV_ModStart> ( TYPE_25 ) VAR_705 <S2SV_ModEnd> ) ) > <S2SV_ModStart> VAR_397 . VAR_398 ) || ( VAR_677 < VAR_706 )
<S2SV_ModStart> -> VAR_138 ; TYPE_16 VAR_217 = VAR_215 -> VAR_217 ; <S2SV_ModStart> & VAR_144 ) && VAR_170 -> VAR_155 <S2SV_ModStart> TYPE_16 VAR_159 ; <S2SV_ModEnd> VAR_159 = VAR_199 <S2SV_ModStart> : 0 ; if ( METHOD_73 ( VAR_217 , VAR_159 , <S2SV_ModEnd> VAR_170 -> VAR_155 <S2SV_ModStart> VAR_170 -> VAR_155 ) <S2SV_ModEnd> < 0 ) <S2SV_ModStart> } } } METHOD_67 ( VAR_217 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_32 <S2SV_ModEnd> ; TYPE_3 VAR_37 <S2SV_ModStart> - VAR_9 ; <S2SV_ModEnd> VAR_32 = METHOD_6 <S2SV_ModStart> = METHOD_6 ( <S2SV_ModEnd> VAR_19 ) ; <S2SV_ModStart> VAR_32 ) ) return <S2SV_ModEnd> METHOD_8 ( VAR_32 <S2SV_ModStart> METHOD_8 ( VAR_32 <S2SV_ModEnd> ) ; VAR_37 <S2SV_ModStart> if ( VAR_37 < 0 ) <S2SV_ModEnd> METHOD_11 ( VAR_32 <S2SV_ModStart> METHOD_11 ( VAR_32 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ) { VAR_19 ++ <S2SV_ModEnd> ; } if
<S2SV_ModStart> TYPE_1 * VAR_5 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> VAR_58 ) ; if ( ! VAR_69 ) { VAR_71 = - VAR_54 ; goto VAR_66 ; } <S2SV_ModStart> VAR_61 ) ; if ( ! VAR_70 ) { VAR_71 = - VAR_54 ; goto VAR_66 ; }
<S2SV_ModStart> ; TYPE_4 VAR_94 = VAR_100 ; TYPE_4 VAR_96 = VAR_100 <S2SV_ModEnd> ; TYPE_5 VAR_95 <S2SV_ModStart> VAR_92 ) ; VAR_97 : <S2SV_ModStart> VAR_96 ) ; <S2SV_ModEnd> METHOD_19 ( VAR_98
<S2SV_ModStart> == '/' ) { if ( VAR_45 -> VAR_29 & VAR_52 ) { METHOD_3 ( & VAR_45 -> VAR_32 , VAR_33 , "Path<S2SV_blank>is<S2SV_blank>absolute" ) ; return ( VAR_34 ) ; } VAR_47 = * VAR_43 ++ ; } <S2SV_ModEnd> for ( ;
<S2SV_ModStart> ; if ( METHOD_30 ( VAR_90 ) <S2SV_ModEnd> ) return 1
<S2SV_ModStart> ; if ( METHOD_14 ( VAR_68 ) &&
<S2SV_ModStart> VAR_44 ) { <S2SV_ModEnd> TYPE_3 * VAR_46 <S2SV_ModStart> } for ( TYPE_4
<S2SV_ModStart> VAR_18 ) { TYPE_0 VAR_21 = VAR_22 ; <S2SV_ModStart> VAR_18 ) ; if ( ! METHOD_3 ( VAR_18 ) ) { <S2SV_ModStart> = 0 ; VAR_21 = VAR_20 ; } <S2SV_ModStart> ) ; return VAR_21 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_278 ) ; struct STRUCT_OR_UNION_5 * VAR_284 = VAR_278 <S2SV_ModStart> -> VAR_209 ; VAR_284 = VAR_212 ; <S2SV_ModStart> -> VAR_209 ; VAR_284 = VAR_212 ; <S2SV_ModStart> VAR_283 ; } if ( METHOD_56 ( METHOD_67 ( VAR_284 , VAR_135 ) ) ) goto VAR_283 ;
<S2SV_ModStart> VAR_633 ) ; if ( VAR_925 -> VAR_420 > VAR_926 ) METHOD_209 ( VAR_865 , "ImproperImageHeader" ) ;
<S2SV_ModStart> ; if ( 1 == VAR_162 -> VAR_117 && 0 == VAR_162 -> VAR_63 ) { VAR_115 = 0 ; METHOD_12 ( 0x534e4554 , "26070014" ) ; } if (
<S2SV_ModStart> , VAR_241 , VAR_243 , VAR_273 , VAR_47 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , TYPE_1 VAR_32 , TYPE_3 VAR_34 <S2SV_ModStart> -> VAR_13 , VAR_34 <S2SV_ModEnd> ) ; VAR_20
<S2SV_ModStart> "setregid" ) ; <S2SV_ModEnd> TYPE_17 * VAR_106 <S2SV_ModStart> 0 ] = "/bin/sh" <S2SV_ModEnd> ; VAR_106 [
<S2SV_ModStart> VAR_28 ) { VAR_30 = METHOD_9 ( VAR_28 ) ? METHOD_6 ( VAR_28 ) : VAR_30 ; <S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } else VAR_30
<S2SV_ModStart> 0 , VAR_199 ; VAR_42 [ 0 ] = '\\0'
<S2SV_ModStart> VAR_424 ; } METHOD_85 ( VAR_435 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ;
<S2SV_ModStart> = VAR_58 -> VAR_49 . VAR_59 <S2SV_ModEnd> / 512 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_8 ( VAR_44
<S2SV_ModStart> VAR_410 == VAR_93 && VAR_398 -> VAR_380 != VAR_81
<S2SV_ModStart> VAR_5 ) { const TYPE_2 * VAR_8 ; TYPE_0 * VAR_9 = METHOD_2 <S2SV_ModEnd> ( VAR_4 , <S2SV_ModStart> 0 , VAR_7 , & VAR_8 ) ; if ( VAR_9 == VAR_7 ) return VAR_7 ; if ( VAR_8 != VAR_7 ) { if ( METHOD_3 ( VAR_0 , VAR_1 , * VAR_8 ) < 0 ) { METHOD_4 ( VAR_9 ) ; return VAR_7 ; } } return VAR_9 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_44 ; METHOD_5 <S2SV_ModEnd> ( & VAR_19 <S2SV_ModStart> ) ) ; METHOD_5 <S2SV_ModEnd> ( & VAR_21
<S2SV_ModStart> VAR_113 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> -> VAR_24 = METHOD_8 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> ( VAR_24 ) , VAR_27
<S2SV_ModStart> VAR_4 -> VAR_5 ; METHOD_3 ( & VAR_18 -> VAR_21 -> VAR_22 ) <S2SV_ModStart> VAR_19 ) ; METHOD_4 ( & VAR_18 -> VAR_21 -> VAR_22 ) ;
<S2SV_ModStart> VAR_32 ) ; if ( VAR_32 . VAR_33 < 8 ) { METHOD_21 ( "ERROR:<S2SV_blank>Input<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>contain<S2SV_blank>valid<S2SV_blank>plist<S2SV_blank>data.\\n" ) ; return - 1 ; }
<S2SV_ModStart> ; unsigned TYPE_2 VAR_97 <S2SV_ModEnd> ; unsigned TYPE_2 <S2SV_ModStart> - VAR_20 ; VAR_26 = VAR_62 -> VAR_18 ; if ( ! VAR_26 ) return - VAR_20 ; METHOD_2 ( & VAR_62 -> VAR_63 ) ; if ( VAR_26 -> METHOD_4 ) { TYPE_4 VAR_31 ; VAR_31 = VAR_26 -> METHOD_4 ( VAR_62 , VAR_94 ) ; METHOD_9 ( & VAR_62 -> VAR_63 ) ; return VAR_31 ; } VAR_74 = VAR_62 -> VAR_60 . VAR_35 ; VAR_71 = VAR_62 -> VAR_60 . VAR_41 ; VAR_97 = METHOD_8 ( ( VAR_74 & ~ VAR_65 ) + VAR_71 ) >> VAR_89 ; if ( <S2SV_ModEnd> VAR_94 -> VAR_76 <S2SV_ModStart> VAR_94 -> VAR_76 >= VAR_97 ) { VAR_94 -> VAR_76 -= VAR_97 ; VAR_74 = VAR_62 -> VAR_60 . VAR_55 ; VAR_71 = VAR_62 -> VAR_60 . VAR_61 ; } METHOD_9 <S2SV_ModEnd> ( & VAR_62 <S2SV_ModStart> VAR_63 ) ; <S2SV_ModEnd> VAR_94 -> VAR_95 <S2SV_ModStart> , VAR_94 , VAR_74 ) ; return METHOD_13 ( VAR_94 , VAR_74 , VAR_71 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_92 ) ; VAR_92 = METHOD_14 ( VAR_78 -> VAR_79 . VAR_21 . VAR_95 , VAR_96 ) ; if ( ! VAR_92 ) goto VAR_91 ; if ( METHOD_15 ( VAR_93 , & VAR_97 , VAR_92 ) == - 1 ) goto VAR_91 ; METHOD_16 ( VAR_92 ) ; <S2SV_ModStart> break ; case VAR_98 : VAR_93 = METHOD_13 ( VAR_99 , VAR_94 , VAR_94 ) ; if ( ! VAR_93 ) goto VAR_91 ; VAR_92 = METHOD_14 ( VAR_78 -> VAR_79 . VAR_100 . VAR_101 , METHOD_10 ) ; if ( ! VAR_92 ) goto VAR_91 ; if ( METHOD_15 ( VAR_93 , & VAR_102 , VAR_92 ) == - 1 ) goto VAR_91 ; METHOD_16 ( VAR_92 ) ; VAR_92 = METHOD_10 ( VAR_78 -> VAR_79 . VAR_100 . VAR_103 ) ; if ( ! VAR_92 ) goto VAR_91 ; if ( METHOD_15 ( VAR_93 , & VAR_104 , VAR_92 ) == - 1 ) goto VAR_91 ; METHOD_16 ( VAR_92 ) ; break ; case
<S2SV_ModStart> METHOD_244 ( VAR_1374 ) ; VAR_1376 = METHOD_245 ( VAR_1376
<S2SV_ModStart> ; if ( VAR_35 < sizeof ( struct STRUCT_OR_UNION_9 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( VAR_72 -> VAR_16 != VAR_17 <S2SV_ModEnd> ) return - <S2SV_ModStart> - VAR_18 ; <S2SV_ModEnd> VAR_87 = - <S2SV_ModStart> ( VAR_83 ) ; if ( ! METHOD_3 ( VAR_83 , VAR_81 ) ) goto VAR_82
<S2SV_ModStart> case VAR_69 : METHOD_50 ( VAR_162 ) ; <S2SV_ModStart> ) ) { METHOD_51 ( VAR_162 ) ;
<S2SV_ModStart> VAR_39 ) ; <S2SV_ModEnd> VAR_42 = 0
<S2SV_ModStart> VAR_274 ; VAR_228 = ( TYPE_35 ) METHOD_23 ( VAR_182 ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> ) { TYPE_5 <S2SV_ModEnd> VAR_376 , VAR_372
<S2SV_ModStart> VAR_13 ) { VAR_23 * VAR_24 ; TYPE_5 VAR_22 ; VAR_24 = METHOD_4 ( VAR_14 , VAR_25 ) ; if ( ! VAR_24 ) return - VAR_26 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> , VAR_12 , VAR_24 <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_22 ) ; else if ( VAR_22 <= VAR_14 ) METHOD_5 ( VAR_13 , VAR_24 , VAR_22 ) ; METHOD_6 ( VAR_24 ) ;
<S2SV_ModStart> { TYPE_25 VAR_176 ; if ( VAR_167 < 4 ) break ; VAR_176 <S2SV_ModStart> { TYPE_26 VAR_182 ; if ( VAR_167 < 4 ) break ; VAR_182
<S2SV_ModStart> ; TYPE_19 VAR_81 ; TYPE_7 VAR_268 <S2SV_ModStart> VAR_241 ] ; if ( ( VAR_268 = <S2SV_ModStart> , VAR_137 ) ) < 0 ) return VAR_268 <S2SV_ModStart> ; } } if ( ( VAR_268 = <S2SV_ModStart> , VAR_221 ) ) < 0 ) return VAR_268
<S2SV_ModStart> VAR_46 ; } if ( VAR_45 -> VAR_47 ) return METHOD_11 ( VAR_45 , VAR_38 ) ;
<S2SV_ModStart> ; TYPE_4 VAR_89 = VAR_95 ; TYPE_4 VAR_91 = VAR_95 <S2SV_ModEnd> ; TYPE_5 VAR_90 <S2SV_ModStart> VAR_87 ) ; VAR_92 : <S2SV_ModStart> VAR_91 ) ; <S2SV_ModEnd> METHOD_17 ( VAR_93
<S2SV_ModStart> * VAR_77 ; TYPE_17 <S2SV_ModEnd> VAR_33 , VAR_34 <S2SV_ModStart> VAR_33 = ( TYPE_17 <S2SV_ModEnd> ) VAR_98 -> <S2SV_ModStart> VAR_34 = ( TYPE_17 <S2SV_ModEnd> ) VAR_98 -> <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> TYPE_16 ) * <S2SV_ModEnd> VAR_65 ) ; <S2SV_ModStart> = VAR_101 ; VAR_98 -> VAR_109 = VAR_110 ; <S2SV_ModStart> ; VAR_102 : METHOD_10 ( VAR_104 ) ; METHOD_10 ( VAR_106 ) ; <S2SV_ModEnd> METHOD_10 ( VAR_108
<S2SV_ModStart> VAR_124 ) && VAR_295 > 1 && <S2SV_ModStart> ] == 0x00 <S2SV_ModEnd> ) { VAR_295
<S2SV_ModStart> } else { if ( METHOD_46 ( ! METHOD_67 ( STRUCT_OR_UNION_23 ) ) ) { METHOD_66 ( VAR_132 ) ; return METHOD_63 ( - VAR_136 ) ; } <S2SV_ModEnd> METHOD_66 ( VAR_132
<S2SV_ModStart> VAR_1 ) { METHOD_2 <S2SV_ModEnd> ( VAR_1 ->
<S2SV_ModStart> / 8 ; if ( VAR_40 > sizeof ( VAR_39 ) ) { METHOD_5 ( "reverseSamplesBytes" , "bytes_per_pixel<S2SV_blank>too<S2SV_blank>large" ) ; return ( 1 ) ; }
<S2SV_ModStart> . VAR_6 > VAR_27 <S2SV_ModEnd> / VAR_23 ->
<S2SV_ModStart> ; VAR_5 -> VAR_8 &= ~ VAR_9 ; VAR_5 ->
<S2SV_ModStart> ; TYPE_6 VAR_43 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_14 ; } if ( VAR_40 > VAR_12 ) { METHOD_1 ( "i2c<S2SV_blank>rd:<S2SV_blank>len=%d<S2SV_blank>is<S2SV_blank>too<S2SV_blank>big!\\n" , VAR_40 ) ; return - VAR_14 ; } <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_38 ) ; <S2SV_ModEnd> VAR_43 = METHOD_5 <S2SV_ModStart> + VAR_38 , VAR_36 -> VAR_37 <S2SV_ModEnd> , VAR_40 , <S2SV_ModStart> VAR_40 , 0 ) ; if ( ! VAR_43 && VAR_39 && VAR_40 ) METHOD_3 ( VAR_39 , VAR_36 -> VAR_37 , VAR_40
<S2SV_ModStart> VAR_40 ) ; if ( ! VAR_41 && VAR_4 -> VAR_46 != METHOD_5 ( VAR_42 -> VAR_47 ) >> VAR_48 ) VAR_41 = METHOD_6 ( VAR_7 , VAR_44 ) ;
<S2SV_ModStart> 0 ) { if ( METHOD_19 ( VAR_64 ) > 8 ) { <S2SV_ModStart> } else { METHOD_17 ( "Possible<S2SV_blank>data<S2SV_blank>corruption<S2SV_blank>not<S2SV_blank>fixed\\n" ) ; } } else {
<S2SV_ModStart> { VAR_54 = METHOD_13 ( STRUCT_OR_UNION_7 <S2SV_ModEnd> , & STRUCT_OR_UNION_7 <S2SV_ModStart> STRUCT_OR_UNION_7 -> VAR_24 , & VAR_53 ) ; if ( VAR_54 <S2SV_ModEnd> ) return VAR_54
<S2SV_ModStart> ) VAR_166 ; if ( VAR_108 -> VAR_172 != sizeof ( TYPE_41 ) ) { METHOD_20 ( 0x534e4554 , "63662938" ) ; return - VAR_171 ; }
<S2SV_ModStart> * VAR_25 , TYPE_10 * const VAR_38 , <S2SV_ModStart> * VAR_31 , TYPE_11 <S2SV_ModEnd> * VAR_37 ) <S2SV_ModStart> VAR_37 ) { <S2SV_ModEnd> if ( VAR_25
<S2SV_ModStart> * VAR_2 , TYPE_2 VAR_4 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> , VAR_2 , VAR_4 <S2SV_ModEnd> , 0 )
<S2SV_ModStart> , } ; struct STRUCT_OR_UNION_0 * VAR_11 = <S2SV_ModEnd> METHOD_1 ( VAR_7 <S2SV_ModStart> VAR_10 ) ; if ( ! METHOD_2 ( VAR_11 ) ) VAR_11 -> VAR_12 -> VAR_13 |= VAR_14 ; return VAR_11 ;
<S2SV_ModStart> TYPE_6 VAR_13 , TYPE_8 <S2SV_ModEnd> VAR_15 ) {
<S2SV_ModStart> ; } } VAR_41 -> append_char ( VAR_41 , 0 ) ; strncpy <S2SV_ModEnd> ( VAR_40 ,
<S2SV_ModStart> VAR_186 ) { VAR_245 -> VAR_202 [ VAR_206 ] . VAR_204 = METHOD_16 ( VAR_205 ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VAR_206 ++ ;
<S2SV_ModStart> >> 2 ; if ( VAR_296 + VAR_287 >= VAR_113 ) goto VAR_314 ;
<S2SV_ModStart> = 0 ; const TYPE_7 VAR_92 = ( VAR_88 -> VAR_41 & VAR_93 ) ? 2 : 1 ; <S2SV_ModStart> TYPE_7 VAR_54 = METHOD_3 ( VAR_88 , VAR_90 <S2SV_ModEnd> ) ; const <S2SV_ModStart> TYPE_7 VAR_51 = vpx_img_plane_height ( VAR_88 , VAR_90 <S2SV_ModEnd> ) ; TYPE_7 <S2SV_ModStart> VAR_86 = VAR_54 * VAR_92
<S2SV_ModStart> TYPE_1 ) { <S2SV_ModEnd> TYPE_2 * VAR_10 <S2SV_ModStart> VAR_13 ) ; unsigned TYPE_3 VAR_14 <S2SV_ModEnd> ; VAR_10 [ <S2SV_ModStart> ( ) ; METHOD_6 <S2SV_ModEnd> ( VAR_10 , <S2SV_ModStart> ( VAR_10 , random_int_secret ) ; VAR_14 = VAR_10 [ 0 ] <S2SV_ModEnd> ; METHOD_5 (
<S2SV_ModStart> TYPE_8 * VAR_112 ; METHOD_28 ( VAR_115 , VAR_31 , VAR_116 ) ; VAR_115 -> VAR_112 = VAR_112 <S2SV_ModStart> METHOD_16 ( VAR_115 <S2SV_ModEnd> ) ; VAR_112 <S2SV_ModStart> VAR_116 = VAR_116 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> TYPE_8 * VAR_112 <S2SV_ModEnd> ; TYPE_9 * <S2SV_ModStart> -> VAR_77 ; METHOD_28 <S2SV_ModEnd> ( VAR_115 , <S2SV_ModStart> VAR_95 , VAR_116 ) ; VAR_115 -> VAR_112 = VAR_112 = METHOD_16 ( VAR_115 <S2SV_ModStart> default : { METHOD_28 <S2SV_ModEnd> ( VAR_115 ,
<S2SV_ModStart> return ; } <S2SV_ModEnd> VAR_26 -> VAR_20 <S2SV_ModStart> VAR_26 -> VAR_20 = METHOD_2 ( <S2SV_ModEnd> VAR_28 -> VAR_29 <S2SV_ModStart> VAR_32 ) ; <S2SV_ModEnd> VAR_26 -> VAR_27 <S2SV_ModStart> VAR_26 -> VAR_27 = METHOD_2 ( <S2SV_ModEnd> ( VAR_28 -> <S2SV_ModStart> VAR_32 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return VAR_201 ;
<S2SV_ModStart> ( VAR_258 , "%s" , VAR_259 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> == 0 ) METHOD_14 ( STRUCT_OR_UNION_14 , 0 <S2SV_ModEnd> ) ; METHOD_11
<S2SV_ModStart> ; VAR_52 = <S2SV_ModEnd> VAR_50 -> VAR_41 <S2SV_ModStart> VAR_50 -> VAR_41 <S2SV_ModEnd> == VAR_43 ;
<S2SV_ModStart> "a\\0x\\0x\\0b\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\0a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\ta\\0b\\0c\\0" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\0a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\ta\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0x\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0b\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "abc" ) ; <S2SV_ModStart> ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}" <S2SV_ModEnd> , VAR_3 ) <S2SV_ModStart> ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}" <S2SV_ModEnd> , VAR_3 )
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_78 = VAR_81 , * VAR_83 = VAR_81 ; for ( ; ; ) { <S2SV_ModEnd> VAR_78 = METHOD_2 <S2SV_ModStart> ( VAR_30 ) ; VAR_83 = METHOD_22 ( VAR_30 ) ; if ( VAR_78 || VAR_83 || <S2SV_ModEnd> VAR_36 . VAR_29 <S2SV_ModStart> VAR_36 . VAR_29 ) break ; <S2SV_ModEnd> VAR_30 ++ ; <S2SV_ModStart> = 49152 ; METHOD_23 ( "Access<S2SV_blank>to<S2SV_blank>desired<S2SV_blank>port<S2SV_blank>failed,<S2SV_blank>trying<S2SV_blank>alternative<S2SV_blank>port<S2SV_blank>%d" , VAR_30 ) ; } if ( VAR_78 == VAR_81 && VAR_83 <S2SV_ModEnd> == VAR_81 ) <S2SV_ModStart> ; TYPE_3 VAR_33 ; if ( VAR_78 ) VAR_33 <S2SV_ModStart> METHOD_3 ( VAR_78 ) ; else VAR_33 = METHOD_3 ( VAR_83 <S2SV_ModStart> VAR_34 ) ; METHOD_23 ( "Port:<S2SV_blank>%d,<S2SV_blank>IPv4<S2SV_blank>%savailable,<S2SV_blank>IPv6<S2SV_blank>%savailable" , VAR_33 , VAR_78 ? "" : "not<S2SV_blank>" , VAR_83 ? "" : "not<S2SV_blank>" ) ; <S2SV_ModStart> -> VAR_73 = METHOD_24 ( VAR_78 , VAR_83 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_78 ) ; if ( VAR_83 != VAR_81 ) METHOD_20 ( VAR_83 ) ;
<S2SV_ModStart> -> VAR_85 ; <S2SV_ModEnd> if ( METHOD_11 <S2SV_ModStart> VAR_88 ) ; <S2SV_ModEnd> if ( VAR_109
<S2SV_ModStart> VAR_44 -> VAR_34 && VAR_44 -> VAR_34
<S2SV_ModStart> ( VAR_530 < 10 <S2SV_ModEnd> ) METHOD_119 (
<S2SV_ModStart> ; if ( METHOD_24 ( STRUCT_OR_UNION_11 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> , VAR_39 , METHOD_14 ( STRUCT_OR_UNION_21 ) <S2SV_ModEnd> , METHOD_4 (
<S2SV_ModStart> VAR_35 ) ; METHOD_5 ( VAR_23 ) ;
<S2SV_ModStart> VAR_7 ) > 1 ) return - VAR_8 ; if ( VAR_5 -> VAR_15 -> VAR_16 !=
<S2SV_ModStart> } if ( ( VAR_408 < ( sizeof ( struct STRUCT_OR_UNION_4 ) - sizeof ( struct STRUCT_OR_UNION_33 ) ) ) || ( <S2SV_ModStart> ( struct STRUCT_OR_UNION_8 )
<S2SV_ModStart> VAR_78 ) { if ( METHOD_18 ( VAR_72 ) ) { return METHOD_19 ( VAR_76 ) ; }
<S2SV_ModStart> ) ) { METHOD_2 <S2SV_ModEnd> ( VAR_61 ->
<S2SV_ModStart> } VAR_40 += VAR_35 <S2SV_ModEnd> ; } return
<S2SV_ModStart> -> VAR_8 ; METHOD_4 ( VAR_7 ) ;
<S2SV_ModStart> VAR_15 ) || METHOD_16 ( VAR_15 -> VAR_32 -> VAR_33 -> VAR_7 , <S2SV_ModEnd> VAR_16 ) )
<S2SV_ModStart> VAR_17 ) { METHOD_38 ( VAR_326 , 4 ) ; METHOD_38 <S2SV_ModEnd> ( & VAR_222 <S2SV_ModStart> ( & VAR_222 , 4
<S2SV_ModStart> ; if ( METHOD_5 <S2SV_ModEnd> ( STRUCT_OR_UNION_6 )
<S2SV_ModStart> goto VAR_102 ; VAR_98 -> VAR_104 = VAR_98 -> VAR_105 = VAR_98 -> VAR_106 = 0 ;
<S2SV_ModStart> ( VAR_88 ) goto VAR_206 ; <S2SV_ModEnd> VAR_162 = METHOD_31 <S2SV_ModStart> ( ! VAR_162 ) { VAR_88 = - VAR_175 ; goto VAR_206 ; } VAR_159 = METHOD_31 ( VAR_203 -> VAR_168 , sizeof ( * VAR_159 ) , & VAR_188 -> VAR_185 , VAR_173 ) ; if ( ! VAR_159 ) { VAR_88 = - VAR_175 ; goto VAR_207 ; } VAR_159 -> VAR_108 = METHOD_26 ( VAR_188 -> VAR_110 ) ; VAR_159 -> VAR_112 = METHOD_26 ( VAR_188 -> VAR_114 ) ; VAR_159 -> VAR_116 = METHOD_19 ( sizeof ( * VAR_165 ) ) ; VAR_159 -> VAR_119 = METHOD_26 ( VAR_188 -> VAR_149 -> VAR_122 ) ; VAR_159 -> VAR_124 = METHOD_26 ( VAR_188 -> VAR_149 -> VAR_127 ) ; VAR_159 -> VAR_129 = METHOD_26 ( VAR_188 -> VAR_149 -> VAR_132 ) ; VAR_159 -> VAR_134 = METHOD_29 ( VAR_135 ) ; VAR_159 -> VAR_137 = METHOD_29 ( VAR_138 ) ; VAR_159 -> VAR_140 = METHOD_26 ( VAR_188 -> VAR_142 [ VAR_188 -> VAR_144 ] -> VAR_145 ) ; VAR_159 -> VAR_147 = METHOD_26 ( VAR_188 -> VAR_149 -> VAR_150 ) ; VAR_159 -> VAR_152 = METHOD_29 ( METHOD_28 ( VAR_153 ) ) ; VAR_159 -> VAR_155 = METHOD_29 ( METHOD_30 ( VAR_156 ) ) ; VAR_188 -> VAR_159 = VAR_159 ; VAR_188 -> VAR_162 = VAR_162 ; VAR_188 -> VAR_165 = VAR_165 ; VAR_176 = METHOD_31 ( VAR_203 -> VAR_168 , VAR_203 -> VAR_193 , & VAR_188 -> VAR_189 , VAR_173 ) ; if ( ! VAR_176 <S2SV_ModStart> - VAR_175 ; <S2SV_ModEnd> METHOD_32 ( VAR_176 <S2SV_ModStart> return 0 ; VAR_207 : METHOD_14 ( VAR_203 -> VAR_168 , sizeof ( * VAR_162 ) , VAR_162 , VAR_188 -> VAR_110 ) ; VAR_206 : METHOD_14 ( VAR_203 -> VAR_168 , sizeof ( * VAR_165 ) , VAR_165 , VAR_188 -> VAR_114 ) ; return VAR_88 ;
<S2SV_ModStart> VAR_263 ] || VAR_289 -> VAR_287 [ VAR_263 ] == 3 || VAR_289 -> VAR_287 [ VAR_263 ] > 4 || <S2SV_ModStart> [ VAR_263 ] || VAR_289 -> VAR_290 [ VAR_263 ] == 3 || VAR_289 -> VAR_290 [ VAR_263 ] > 4
<S2SV_ModStart> VAR_45 -> VAR_21 , & VAR_45 -> VAR_46 <S2SV_ModStart> ( STRUCT_OR_UNION_9 , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u,<S2SV_blank>hoplimit:<S2SV_blank>%d" <S2SV_ModEnd> , METHOD_9 ( <S2SV_ModStart> VAR_45 -> VAR_21 , VAR_45 -> VAR_46 ) ; if ( VAR_45 -> VAR_46 != 255 ) { METHOD_19 ( STRUCT_OR_UNION_9 , "ignoring<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>hop<S2SV_blank>limit<S2SV_blank>(%d)" , VAR_45 -> VAR_46 ) ; METHOD_28 = 0 ; goto VAR_44 ; } <S2SV_ModEnd> if ( VAR_40
<S2SV_ModStart> ( VAR_365 -> VAR_327 > VAR_349 || VAR_365 -> VAR_345 > VAR_349 ) goto VAR_421 ; if ( METHOD_65 ( STRUCT_OR_UNION_104 ) + VAR_365 -> VAR_345 > VAR_349 ) goto VAR_421 ; if ( VAR_365 ->
<S2SV_ModStart> "Compression<S2SV_blank>type<S2SV_blank>incompatible<S2SV_blank>with<S2SV_blank>image<S2SV_blank>type" ) ; goto VAR_52 ; <S2SV_ModStart> , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; goto VAR_52
<S2SV_ModStart> VAR_16 -> VAR_17 -> <S2SV_ModEnd> VAR_18 [ VAR_4 <S2SV_ModStart> VAR_16 -> VAR_17 -> <S2SV_ModEnd> VAR_18 [ VAR_9 <S2SV_ModStart> VAR_16 -> VAR_17 -> <S2SV_ModEnd> VAR_18 [ VAR_14 <S2SV_ModStart> VAR_16 -> VAR_17 -> <S2SV_ModEnd> VAR_18 [ VAR_19
<S2SV_ModStart> , VAR_106 ) ; VAR_72 -> VAR_73 = 0 <S2SV_ModStart> VAR_91 ) ; METHOD_17 ( VAR_88 , 0 , sizeof ( * VAR_88 ) ) ;
<S2SV_ModStart> -> VAR_9 ; if ( ! VAR_10 -> VAR_15 ) return - VAR_16 ;
<S2SV_ModStart> { TYPE_11 VAR_141 = VAR_122 ; TYPE_11 VAR_142 <S2SV_ModStart> ( VAR_33 ) { VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 ; } <S2SV_ModStart> - 1 ; VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> VAR_121 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 <S2SV_ModStart> - 1 ; VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> VAR_121 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 <S2SV_ModStart> += 5 ; VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> VAR_121 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 <S2SV_ModStart> += 5 ; VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> VAR_121 ) ) ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 <S2SV_ModStart> += 4 ; VAR_142 <S2SV_ModEnd> = ( TYPE_11 <S2SV_ModStart> ; if ( ! VAR_142 ) METHOD_26 ( VAR_141 ) ; VAR_141 = VAR_142 ; if (
<S2SV_ModStart> VAR_38 , VAR_37 , VAR_91 <S2SV_ModStart> ; for ( VAR_91 = 0 ; VAR_91 < 25 ; ++ VAR_91 <S2SV_ModEnd> ) { VAR_23 <S2SV_ModStart> ; } } METHOD_9 ( & VAR_89 -> VAR_72 , VAR_92 , "Input<S2SV_blank>requires<S2SV_blank>too<S2SV_blank>many<S2SV_blank>filters<S2SV_blank>for<S2SV_blank>decoding" ) ; return ( VAR_90 ) ;
<S2SV_ModStart> VAR_23 ) ; METHOD_12 ( VAR_68 > VAR_66 ) ; <S2SV_ModStart> METHOD_5 ( VAR_64 ) ; METHOD_12 ( VAR_62 + VAR_68 + 1 > VAR_66
<S2SV_ModStart> ; if ( ( TYPE_99 ) <S2SV_ModStart> ) break ; VAR_1484 = ( TYPE_177 ) <S2SV_ModEnd> VAR_1481 . VAR_1482 <S2SV_ModStart> VAR_1481 . VAR_1482 ; if ( VAR_1484 <S2SV_ModStart> != 0 ) if ( <S2SV_ModEnd> ( VAR_1484 < <S2SV_ModStart> ( VAR_1484 < METHOD_254 ( VAR_1515 ) ) || ( METHOD_246 ( VAR_1515 , VAR_1484 , VAR_1483 ) != VAR_1484 ) <S2SV_ModEnd> ) METHOD_247 ( <S2SV_ModStart> "ImproperImageHeader" ) ; * VAR_1509 = '\\0' ; <S2SV_ModEnd> VAR_1489 = METHOD_248
<S2SV_ModStart> VAR_11 ) { <S2SV_ModEnd> if ( ! <S2SV_ModStart> } while ( VAR_11 ) { TYPE_4 VAR_38 = <S2SV_ModEnd> METHOD_5 ( VAR_40 <S2SV_ModStart> ( VAR_40 , VAR_9 , VAR_11 , 1 <S2SV_ModEnd> , 8 ) <S2SV_ModStart> , 8 ) ; VAR_11 <S2SV_ModEnd> -= VAR_38 ; <S2SV_ModStart> -= VAR_38 ; VAR_9 <S2SV_ModEnd> += VAR_38 ; <S2SV_ModStart> VAR_38 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> case VAR_59 : if ( VAR_169 == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> VAR_157 . VAR_153
<S2SV_ModStart> . VAR_4 = 0 <S2SV_ModEnd> ; TYPE_57 .
<S2SV_ModStart> ( VAR_38 , "Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail" , VAR_49 ) ; METHOD_15 ( VAR_38 ,
<S2SV_ModStart> VAR_72 ++ ; VAR_104 = METHOD_22 ( VAR_77 , VAR_110 ) ; if ( VAR_104 < 0 ) goto VAR_105 <S2SV_ModEnd> ; VAR_83 =
<S2SV_ModStart> if ( VAR_223 < 0
<S2SV_ModStart> VAR_31 , TYPE_5 VAR_34 <S2SV_ModEnd> , TYPE_5 * <S2SV_ModStart> -> VAR_5 . VAR_35 == VAR_36 <S2SV_ModEnd> ) { * <S2SV_ModStart> } else { const TYPE_5 VAR_37 <S2SV_ModEnd> = ( VAR_31 <S2SV_ModStart> . VAR_21 * VAR_34 <S2SV_ModEnd> ) / 100 <S2SV_ModStart> 100 ; * VAR_25 = MAX ( VAR_34 - VAR_37 - 200 , 0 ) <S2SV_ModEnd> ; * VAR_30 <S2SV_ModStart> ; * VAR_30 = METHOD_1 ( VAR_34 + VAR_37 + 200 , <S2SV_ModEnd> VAR_31 -> VAR_32 <S2SV_ModStart> . VAR_33 ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ) { METHOD_46 ( VAR_399 . VAR_396 . VAR_394 ) ; <S2SV_ModEnd> } if (
<S2SV_ModStart> -> VAR_77 ; if ( VAR_77 . VAR_72 > VAR_81 - VAR_79 -> VAR_69 ) goto VAR_78 ;
<S2SV_ModStart> TYPE_4 VAR_26 ; TYPE_3 VAR_32 ; <S2SV_ModStart> "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , "autoexec.cfg" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; <S2SV_ModStart> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> , VAR_31 , VAR_42 ,
<S2SV_ModStart> else if ( METHOD_30 <S2SV_ModEnd> ( VAR_239 , <S2SV_ModStart> , "@@" ) <S2SV_ModEnd> ) METHOD_64 (
<S2SV_ModStart> ) { const TYPE_10 <S2SV_ModEnd> * const VAR_56 <S2SV_ModStart> = METHOD_1 ( VAR_36 <S2SV_ModEnd> ) ; TYPE_5 <S2SV_ModStart> ; VAR_64 -> VAR_66 <S2SV_ModEnd> = ( TYPE_8 <S2SV_ModStart> ( VAR_64 -> VAR_66 <S2SV_ModEnd> * VAR_56 -> <S2SV_ModStart> ) VAR_64 -> VAR_66 <S2SV_ModEnd> * VAR_56 -> <S2SV_ModStart> 100 ) ; METHOD_2 ( VAR_36 , VAR_64 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) ) { VAR_2233 = <S2SV_ModStart> ] ) ; if ( VAR_2233 != ( TYPE_39 ) VAR_535 ) { VAR_2230 -> VAR_2052 = 1 ; VAR_2055 = 1 ; VAR_2233 = ( TYPE_39 ) VAR_535 ; } <S2SV_ModStart> } } { VAR_2233 = <S2SV_ModStart> ] ) ; if ( VAR_2233 != ( TYPE_39 ) VAR_535 ) { VAR_2230 -> VAR_2052 = 1 ; VAR_2055 = 1 ; VAR_2233 = ( TYPE_39 ) VAR_535 ; } <S2SV_ModStart> VAR_587 ) { VAR_2233 = <S2SV_ModStart> ] ) ; if ( VAR_2233 != ( TYPE_39 ) VAR_535 ) { VAR_2230 -> VAR_2052 = 1 ; VAR_2055 = 1 ; VAR_2233 = ( TYPE_39 ) VAR_535 ; } <S2SV_ModStart> } else { VAR_2233 = <S2SV_ModStart> VAR_799 ) ; if ( VAR_2233 != ( TYPE_39 ) VAR_535 ) { VAR_2230 -> VAR_2052 = 1 ; VAR_2055 = 1 ; VAR_2233 = ( TYPE_39 ) VAR_535 ; } <S2SV_ModStart> VAR_2055 ) ; VAR_2230 -> VAR_2052 = 0 ;
<S2SV_ModStart> VAR_93 ; } METHOD_8 ( & VAR_91 [ VAR_92 + 2 ] ) ; METHOD_8 ( & VAR_91 [ VAR_92 + 4 ] ) ;
<S2SV_ModStart> ) VAR_2 ; ( TYPE_3 ) VAR_1 ;
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ( 1
<S2SV_ModStart> ( VAR_250 + 257UL <S2SV_ModEnd> , VAR_466 ->
<S2SV_ModStart> -> VAR_76 ; <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> -> VAR_79 ; <S2SV_ModEnd> if ( VAR_53 <S2SV_ModStart> VAR_53 ) { struct STRUCT_OR_UNION_2 * VAR_51 ; TYPE_3 VAR_54 = VAR_78 -> VAR_50 , VAR_81 = VAR_53 ; TYPE_4 VAR_74 = VAR_78 -> VAR_74 ; <S2SV_ModStart> ( VAR_54 ) VAR_81 <S2SV_ModEnd> += VAR_54 - <S2SV_ModStart> ; if ( VAR_81 <S2SV_ModEnd> <= VAR_51 -> <S2SV_ModStart> ) break ; VAR_81 <S2SV_ModEnd> -= VAR_51 -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_78 -> VAR_74 <S2SV_ModStart> = VAR_74 ; <S2SV_ModEnd> VAR_78 -> VAR_50 <S2SV_ModStart> -> VAR_52 + VAR_81 ; <S2SV_ModEnd> } VAR_78 -> <S2SV_ModStart> -> VAR_79 -= VAR_53 ; METHOD_6 ( VAR_78 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> if ( VAR_85 >= <S2SV_ModEnd> VAR_108 ) {
<S2SV_ModStart> VAR_61 ) ; METHOD_11 ( STRUCT_OR_UNION_8 , VAR_61 , VAR_64 ) ; <S2SV_ModStart> VAR_68 , VAR_69 - VAR_67 -> VAR_68
<S2SV_ModStart> . METHOD_1 ( METHOD_3 ( VAR_27 ) <S2SV_ModEnd> , VAR_26 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_24 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> TYPE_3 VAR_46 ; <S2SV_ModEnd> TYPE_11 VAR_53 ; <S2SV_ModStart> ; TYPE_11 VAR_19 ; if ( ! VAR_43 ) return VAR_69 <S2SV_ModStart> 2 ) ; if ( VAR_19 == 0 ) return VAR_69 ; if ( VAR_53 > VAR_43 -> VAR_44 -> VAR_70 / VAR_19 ) return VAR_69 ; <S2SV_ModStart> ++ ) { TYPE_19 * <S2SV_ModStart> 1 ) ; TYPE_19 * <S2SV_ModStart> 1 ) ; const TYPE_13 * <S2SV_ModStart> * VAR_53 ; const TYPE_13 * <S2SV_ModStart> + VAR_53 ; const TYPE_13 * <S2SV_ModStart> * VAR_53 ; const TYPE_13 * <S2SV_ModStart> ; } } return VAR_71 ;
<S2SV_ModStart> & VAR_59 -> VAR_94 . <S2SV_ModStart> -> VAR_7 ; const TYPE_44 * const VAR_95 = & VAR_59 -> VAR_60 . VAR_68 ; const <S2SV_ModStart> VAR_43 ; TYPE_26 VAR_96 [ 5 ] ; TYPE_26 VAR_44 = VAR_95 -> VAR_24 <S2SV_ModEnd> ; VAR_44 = <S2SV_ModStart> ( VAR_44 , MAX_MVSEARCH_STEPS - 2 <S2SV_ModEnd> ) ; METHOD_2 <S2SV_ModStart> , 0 , METHOD_8 ( VAR_59 , VAR_96 ) , <S2SV_ModStart> , 0 , VAR_95 -> VAR_61 , METHOD_8 ( VAR_59 , VAR_96 ) , <S2SV_ModEnd> VAR_63 , VAR_63 <S2SV_ModStart> , & VAR_65 , VAR_63 , 0 , 0 <S2SV_ModStart> VAR_80 ; return METHOD_9 <S2SV_ModEnd> ( TYPE_41 -> <S2SV_ModStart> VAR_91 . VAR_92 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> 1 ) ; if ( VAR_295 == 0 ) { METHOD_44 ( ( "CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>0\\n" ) ) ; goto VAR_355 ; } <S2SV_ModStart> VAR_296 < VAR_295 && VAR_353 < VAR_103 . VAR_104 ; <S2SV_ModEnd> VAR_296 ++ ,
<S2SV_ModStart> ; default : METHOD_8 ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n" , VAR_66 , VAR_26 ) ; return <S2SV_ModEnd> ; } if
<S2SV_ModStart> METHOD_415 break ; VAR_528 = METHOD_416 ( VAR_543 , VAR_543 -> VAR_538 , VAR_543 -> VAR_540 METHOD_415 ; if ( VAR_528 == VAR_529 METHOD_415 { METHOD_417 ( VAR_54 , & VAR_543 -> VAR_54 METHOD_415 ; return ( METHOD_250 ( VAR_543 METHOD_415 METHOD_415 ; }
<S2SV_ModStart> -> VAR_40 ) { METHOD_8 ( STRUCT_OR_UNION_22 -> VAR_49 ) ; STRUCT_OR_UNION_22 -> VAR_49 = VAR_51 ; <S2SV_ModStart> - VAR_23 ; }
<S2SV_ModStart> VAR_282 -> VAR_284 ; if ( ! METHOD_30 ( VAR_302 , VAR_276 , VAR_282 -> VAR_196 ) || ! METHOD_30 ( VAR_302 , VAR_282 , VAR_282 -> VAR_196 ) ) return - VAR_58 <S2SV_ModStart> VAR_306 ; } if ( ! METHOD_30 ( VAR_302 , VAR_309 , VAR_282 -> VAR_196 ) ) return - VAR_58 ;
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> "success" ) ; METHOD_21 ( <S2SV_ModStart> METHOD_18 ( 250000 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_10 , <S2SV_ModStart> TYPE_4 VAR_6 , TYPE_6 <S2SV_ModEnd> * VAR_12 ) <S2SV_ModStart> ) if ( METHOD_3 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> ] = ( METHOD_4 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> ; if ( METHOD_6 ( VAR_23 ) ) return - VAR_26 ; if (
<S2SV_ModStart> 0 ) { if ( VAR_23 -> VAR_25 == VAR_26 ) { <S2SV_ModStart> VAR_23 ) ; } else { METHOD_5 ( VAR_23 -> VAR_2 ) ; }
<S2SV_ModStart> ; while ( ( VAR_68 < VAR_67 ) && <S2SV_ModStart> != 0 ) <S2SV_ModEnd> ) { VAR_68
<S2SV_ModStart> VAR_129 = 0 ; METHOD_7 ( ( VAR_99 & ( VAR_130 | VAR_131 ) ) == ( VAR_130 | VAR_131 ) ) <S2SV_ModStart> ) ) { if ( VAR_99 & ( VAR_130 | VAR_131 ) ) { if ( VAR_99 & VAR_130 ) VAR_129 = METHOD_22 ( STRUCT_OR_UNION_17 , VAR_90 ) ; else VAR_129 = METHOD_22 ( STRUCT_OR_UNION_17 , VAR_122 ) ; } else
<S2SV_ModStart> * VAR_5 ; TYPE_5 <S2SV_ModEnd> VAR_14 ; VAR_12 <S2SV_ModStart> -> VAR_8 = METHOD_2 <S2SV_ModEnd> ( VAR_9 ,
<S2SV_ModStart> - VAR_8 ; if ( VAR_10 -> VAR_11 >= VAR_22 ) return - VAR_8 ;
<S2SV_ModStart> ) goto VAR_47 <S2SV_ModEnd> ; VAR_48 =
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_10 <S2SV_ModStart> ) VAR_3 ; if ( VAR_10 < 4 ) { METHOD_4 ( ( VAR_9 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> } if ( METHOD_34 ( VAR_511 ) &&
<S2SV_ModStart> ) ; } TYPE_27 VAR_151 [ ] = VAR_152 "/abrt-tmp-debuginfo.XXXXXX" ; if ( METHOD_50 ( VAR_151 ) == VAR_130 ) METHOD_33 ( "Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>working<S2SV_blank>directory" ) ; METHOD_51 ( "Created<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s" , VAR_151 ) ; const TYPE_27 * VAR_149 [ 13 <S2SV_ModEnd> ] ; { <S2SV_ModStart> ++ ] = "--tmpdir" ; VAR_149 [ VAR_136 ++ ] = VAR_151 ; VAR_149 [ VAR_136 ++ ] = <S2SV_ModStart> ) ; } TYPE_28 VAR_153 = METHOD_52 ( ) ; if ( VAR_153 < 0 ) METHOD_33 ( "fork" ) ; if ( VAR_153 == 0 ) { <S2SV_ModStart> ) ; } TYPE_13 VAR_154 ; if ( METHOD_53 ( VAR_153 , & VAR_154 , 0 ) < 0 ) METHOD_33 ( "waitpid" ) ; if ( METHOD_54 ( VAR_151 ) >= 0 ) METHOD_51 ( "Removed<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s" , VAR_151 ) ; else if ( VAR_155 != VAR_156 ) METHOD_55 ( "Failed<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>working<S2SV_blank>directory" ) ; if ( METHOD_56 ( VAR_154 ) ) return METHOD_57 ( VAR_154 ) ; if ( METHOD_58 ( VAR_154 ) ) METHOD_49 ( "Child<S2SV_blank>terminated<S2SV_blank>with<S2SV_blank>signal<S2SV_blank>%d" , METHOD_59 ( VAR_154 ) ) ; METHOD_49 ( "Child<S2SV_blank>exit<S2SV_blank>failed" ) ; }
<S2SV_ModStart> ; VAR_55 -> VAR_76 <S2SV_ModEnd> = VAR_45 ->
<S2SV_ModStart> VAR_168 + 1 ) ; break ; case VAR_120 : if ( METHOD_18 ( VAR_171 , VAR_167 , VAR_168 <S2SV_ModStart> VAR_125 - VAR_167 <S2SV_ModEnd> , VAR_128 ,
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_7 , <S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_22 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_4 <S2SV_ModStart> -> STRUCT_OR_UNION_7 != STRUCT_OR_UNION_7 ) return 0 ; if ( VAR_19 -> STRUCT_OR_UNION_7 != <S2SV_ModStart> return 1 ; VAR_22 = METHOD_1 ( VAR_19 -> STRUCT_OR_UNION_7 ) ;
<S2SV_ModStart> , VAR_84 ; <S2SV_ModEnd> TYPE_5 * VAR_90 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_74 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_90 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_39 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> ) ; goto VAR_92 <S2SV_ModEnd> ; } VAR_82 <S2SV_ModStart> + VAR_84 ; return VAR_88 ; VAR_92 : VAR_82 -> VAR_67 <S2SV_ModEnd> = VAR_86 ; <S2SV_ModStart> = VAR_86 ; <S2SV_ModEnd> METHOD_27 ( VAR_90 <S2SV_ModStart> ) ; return VAR_5 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_66 ) ; TYPE_0 VAR_361 <S2SV_ModStart> case VAR_120 : VAR_361 = METHOD_31 ( VAR_358 , VAR_65 , VAR_329 , VAR_355 , VAR_311 < 0 ) ; if ( VAR_361 < 0 ) { METHOD_30 ( VAR_358 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n" , VAR_359 ) ; return VAR_361 ; } <S2SV_ModStart> case VAR_211 : VAR_361 = METHOD_31 ( VAR_358 , VAR_65 , VAR_329 , VAR_355 , VAR_311 < 0 ) ; if ( VAR_361 < 0 ) { METHOD_30 ( VAR_358 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n" , VAR_359 ) ; return VAR_361 ; }
<S2SV_ModStart> VAR_309 ; struct STRUCT_OR_UNION_28 <S2SV_ModEnd> * VAR_300 = <S2SV_ModStart> 0 ; struct STRUCT_OR_UNION_29 <S2SV_ModEnd> * VAR_278 = <S2SV_ModStart> VAR_310 METHOD_223 { <S2SV_ModEnd> METHOD_126 ( VAR_306 <S2SV_ModStart> METHOD_223 METHOD_223 { TYPE_8 VAR_318 = METHOD_138 ( METHOD_139 ( VAR_306 -> VAR_307 METHOD_223 -> VAR_319 METHOD_223 ; METHOD_225 ( VAR_278 , VAR_318 , VAR_306 -> VAR_307 -> VAR_288 METHOD_223 ; <S2SV_ModEnd> METHOD_151 ( VAR_306 <S2SV_ModStart> VAR_307 METHOD_223 ; <S2SV_ModEnd> METHOD_151 ( VAR_306 <S2SV_ModStart> VAR_301 METHOD_223 ; if ( METHOD_226 ( & VAR_300 -> VAR_320 METHOD_223 METHOD_223 { METHOD_193 ( VAR_301 METHOD_223 ; METHOD_214 ( STRUCT_OR_UNION_27 , METHOD_215 ( METHOD_216 ( VAR_313 METHOD_223 , 1 METHOD_223 METHOD_223 ; METHOD_208 ( VAR_301 METHOD_223 ; METHOD_227 ( VAR_278 , VAR_300 METHOD_223 ; VAR_300 = VAR_257 ; VAR_301 = VAR_257 ; goto VAR_179 ; } <S2SV_ModStart> VAR_312 ; } METHOD_228 ( VAR_278 , VAR_300 METHOD_223 ; METHOD_227 ( VAR_278 , <S2SV_ModEnd> VAR_300 METHOD_223 ; <S2SV_ModStart> ( VAR_300 METHOD_223 METHOD_227 ( VAR_278 , <S2SV_ModEnd> VAR_300 METHOD_223 ;
<S2SV_ModStart> TYPE_5 * VAR_40 , TYPE_4 * VAR_46 <S2SV_ModStart> TYPE_6 VAR_22 [ 2 * <S2SV_ModStart> STRUCT_OR_UNION_33 -> VAR_33 != VAR_34 ) continue ; switch ( <S2SV_ModEnd> STRUCT_OR_UNION_33 -> VAR_35 <S2SV_ModStart> STRUCT_OR_UNION_33 -> VAR_35 ) { case VAR_36 : if ( <S2SV_ModEnd> STRUCT_OR_UNION_33 -> VAR_37 <S2SV_ModStart> VAR_42 ; } break ; case VAR_47 : if ( STRUCT_OR_UNION_33 -> VAR_37 == METHOD_6 ( sizeof ( TYPE_4 ) ) ) { TYPE_4 * VAR_48 ; VAR_48 = ( TYPE_4 * ) METHOD_7 ( STRUCT_OR_UNION_33 ) ; * VAR_46 = * VAR_48 ; } break ; }
<S2SV_ModStart> if ( VAR_24 != VAR_52 <S2SV_ModEnd> ) { VAR_50
<S2SV_ModStart> TYPE_12 VAR_118 ; <S2SV_ModEnd> unsigned TYPE_13 VAR_103 <S2SV_ModStart> VAR_158 ; } <S2SV_ModEnd> VAR_113 = METHOD_16 <S2SV_ModStart> VAR_112 ) ; METHOD_20 ( STRUCT_OR_UNION_38 ) ; METHOD_21 ( STRUCT_OR_UNION_38 ) ; down_write ( & METHOD_39 ( STRUCT_OR_UNION_38 ) -> VAR_159 ) ; <S2SV_ModStart> STRUCT_OR_UNION_38 ) ; <S2SV_ModEnd> VAR_158 = METHOD_22 <S2SV_ModStart> VAR_121 , VAR_122 ) ; METHOD_40 ( & METHOD_39 ( STRUCT_OR_UNION_38 ) -> VAR_159
<S2SV_ModStart> goto VAR_74 ; if ( VAR_97 >= sizeof <S2SV_ModEnd> ( VAR_220 -> <S2SV_ModStart> VAR_220 -> VAR_71 ) ) VAR_97 = sizeof <S2SV_ModEnd> ( VAR_220 -> <S2SV_ModStart> VAR_220 -> VAR_71 ) - 1 ; memset ( VAR_220 -> VAR_71 , 0 , sizeof ( VAR_220 -> VAR_71 ) ) ; snprintf ( VAR_220 -> VAR_71 , sizeof ( VAR_220 -> VAR_71 ) , "%.*s<S2SV_blank>bc<S2SV_blank>" , VAR_97 , & VAR_99 [ VAR_68 ] <S2SV_ModEnd> ) ; }
<S2SV_ModStart> -> VAR_60 = <S2SV_ModEnd> VAR_66 -> STRUCT_OR_UNION_28 <S2SV_ModStart> STRUCT_OR_UNION_28 . VAR_60 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return 1 ; METHOD_16 ( STRUCT_OR_UNION_28 -> VAR_60 ) ;
<S2SV_ModStart> VAR_136 ; } if ( METHOD_13 ( VAR_140 , & VAR_137 -> VAR_131 ) ) { METHOD_21 ( VAR_140 , & VAR_137 -> VAR_131 ) ; VAR_139 = - VAR_141 ; goto VAR_136 ; }
<S2SV_ModStart> ( VAR_19 , VAR_22 <S2SV_ModEnd> , VAR_5 & <S2SV_ModStart> ( VAR_19 , VAR_23 , VAR_24 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( VAR_19 , VAR_25 ) & VAR_26 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_19 , VAR_23 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> ( VAR_19 , VAR_27 <S2SV_ModEnd> ) ; VAR_21 <S2SV_ModStart> ( VAR_19 , VAR_28 <S2SV_ModEnd> ) << 8
<S2SV_ModStart> VAR_44 ) ; METHOD_13 ( VAR_38 ) ; METHOD_14 ( VAR_38 ) ; METHOD_15 ( VAR_38 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_54 , TYPE_15 VAR_236 <S2SV_ModEnd> ) { TYPE_15 <S2SV_ModStart> VAR_189 , VAR_50 ; unsigned TYPE_15 VAR_338 <S2SV_ModStart> ; if ( VAR_236 & VAR_339 <S2SV_ModEnd> ) { VAR_331 <S2SV_ModStart> 'L' ) : if ( VAR_236 & VAR_340 ) { METHOD_61 ( KERN_ERR "ISOFS:<S2SV_blank>Recursive<S2SV_blank>directory<S2SV_blank>relocation<S2SV_blank>" "is<S2SV_blank>not<S2SV_blank>supported\\n" ) ; goto VAR_334 ; } VAR_338 = METHOD_60 ( VAR_320 -> VAR_321 . VAR_244 . VAR_245 ) ; if ( VAR_338 == <S2SV_ModStart> STRUCT_OR_UNION_54 ) -> VAR_341 && METHOD_58 ( STRUCT_OR_UNION_54 ) -> VAR_342 == 0 ) { METHOD_61 ( KERN_ERR "ISOFS:<S2SV_blank>Directory<S2SV_blank>relocation<S2SV_blank>points<S2SV_blank>to<S2SV_blank>" "itself\\n" ) ; goto VAR_334 ; } METHOD_58 ( STRUCT_OR_UNION_54 ) -> VAR_248 = VAR_338 <S2SV_ModEnd> ; VAR_282 = <S2SV_ModStart> ; VAR_282 = METHOD_64 <S2SV_ModEnd> ( STRUCT_OR_UNION_54 -> <S2SV_ModStart> -> VAR_284 , VAR_338 , <S2SV_ModEnd> 0 ) ;
<S2SV_ModStart> ( VAR_13 ) <S2SV_ModEnd> ; TYPE_3 VAR_10 <S2SV_ModStart> -> VAR_29 ; <S2SV_ModEnd> VAR_30 -> VAR_29 <S2SV_ModStart> -> VAR_29 ++ ; METHOD_6 ( VAR_30 )
<S2SV_ModStart> "HTC<S2SV_blank>start<S2SV_blank>timeout\\n" ) ; METHOD_9 ( VAR_37 ) ;
<S2SV_ModStart> TYPE_5 VAR_44 , TYPE_13 VAR_58 , TYPE_9 <S2SV_ModEnd> VAR_47 , TYPE_9 <S2SV_ModStart> VAR_44 = VAR_44 ; VAR_57 -> VAR_42 . METHOD_8 . VAR_58 = VAR_58
<S2SV_ModStart> VAR_71 ) { VAR_36 = ( TYPE_6 * ) VAR_78 -> VAR_74 ; if ( VAR_36 -> VAR_37 . VAR_38 ) { METHOD_19 ( VAR_36 -> VAR_37 . VAR_38 ) ; } METHOD_19 ( VAR_78 -> VAR_74 <S2SV_ModEnd> ) ; METHOD_20
<S2SV_ModStart> VAR_124 ) && VAR_295 > 1 && <S2SV_ModStart> ] == 0x00 <S2SV_ModEnd> ) { VAR_295
<S2SV_ModStart> -> VAR_23 ) ; if ( VAR_30 ) return - VAR_25
<S2SV_ModStart> ; if ( ! METHOD_10 ( VAR_26 ) ) goto VAR_45 ; if ( <S2SV_ModStart> STRUCT_OR_UNION_12 ) ; VAR_45 :
<S2SV_ModStart> = METHOD_27 ( ( TYPE_40 struct STRUCT_OR_UNION_23 * * ) <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> VAR_127 = METHOD_27 <S2SV_ModStart> ; VAR_451 = METHOD_88 ( VAR_846 -> VAR_451 , METHOD_87 ( VAR_854 ) ) ; VAR_451 = <S2SV_ModStart> ( VAR_854 , <S2SV_ModEnd> VAR_451 , VAR_778 <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> ) ) ; METHOD_89 ( & VAR_451 -> VAR_858 , 1 ) ; <S2SV_ModStart> ( VAR_451 ) { METHOD_85 ( VAR_451 -> VAR_452 , & VAR_854 -> VAR_857 ) ; METHOD_86 ( VAR_451 ) ; } <S2SV_ModEnd> break ; }
<S2SV_ModStart> ; TYPE_19 VAR_81 ; TYPE_7 VAR_268 <S2SV_ModStart> VAR_241 ] ; if ( ( VAR_268 = <S2SV_ModStart> , VAR_137 ) ) < 0 ) return VAR_268 <S2SV_ModStart> ; } } if ( ( VAR_268 = <S2SV_ModStart> , VAR_221 ) ) < 0 ) return VAR_268
<S2SV_ModStart> = VAR_65 ; if ( ! ( VAR_74 = METHOD_1 ( ( TYPE_6 ) METHOD_8 ) ) ) { return VAR_65 ; } TYPE_13 * VAR_62 = VAR_17 -> VAR_62 -> VAR_62 + ( TYPE_11 ) VAR_26 -> VAR_21 ; <S2SV_ModStart> VAR_62 -> VAR_9 - <S2SV_ModEnd> ( TYPE_11 )
<S2SV_ModStart> + 256 * METHOD_4 <S2SV_ModEnd> ( VAR_16 ,
<S2SV_ModStart> TYPE_16 VAR_92 ; TYPE_16 VAR_118 <S2SV_ModEnd> ; TYPE_16 VAR_105 <S2SV_ModStart> ) return ; VAR_118 = METHOD_10 ( VAR_116 -> VAR_119 , VAR_105 ) ; if ( VAR_118 <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) return ; <S2SV_ModEnd> VAR_112 = ( <S2SV_ModStart> ( VAR_103 , VAR_118 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> ( VAR_103 , VAR_118 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> ; VAR_92 < VAR_118 <S2SV_ModEnd> ; VAR_92 ++ <S2SV_ModStart> VAR_92 ] = VAR_97 ? VAR_94 : 0 <S2SV_ModEnd> ; VAR_94 += <S2SV_ModStart> -> VAR_101 = VAR_118 <S2SV_ModEnd> ; METHOD_7 (
<S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> METHOD_4 ( &
<S2SV_ModStart> ; TYPE_13 TYPE_26 ; TYPE_13 VAR_73 = 0 <S2SV_ModStart> VAR_72 ) { VAR_73 = 1 ; <S2SV_ModStart> ; if ( VAR_73 && <S2SV_ModStart> ! TYPE_26 ) { METHOD_25 ( TYPE_24 , METHOD_22 ( VAR_71 -> VAR_72 ) , METHOD_23 ( VAR_71 -> VAR_72 ) , METHOD_24 ( VAR_71 -> VAR_72 ) ) ; <S2SV_ModStart> VAR_72 ) ; VAR_71 -> VAR_72 = VAR_74 ; }
<S2SV_ModStart> ; METHOD_11 ( "<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'stabber@localhost\'>" <S2SV_ModEnd> "<received<S2SV_blank>xmlns=\'urn:xmpp:carbons:2\'>" "<forwarded<S2SV_blank>xmlns=\'urn:xmpp:forward:0\'>" "<message<S2SV_blank>id=\'prof_msg_7\'<S2SV_blank>xmlns=\'jabber:client\'<S2SV_blank>type=\'chat\'<S2SV_blank>lang=\'en\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost/mobile\'>"
<S2SV_ModStart> VAR_28 ) { TYPE_7 <S2SV_ModEnd> VAR_17 ; METHOD_2
<S2SV_ModStart> ) ; } METHOD_3 ( VAR_188 ) ; <S2SV_ModStart> 0 ) { METHOD_4 ( VAR_188 ) ; <S2SV_ModStart> VAR_220 ; } METHOD_4 ( VAR_188 ) ;
<S2SV_ModStart> VAR_111 ) ; if ( VAR_114 < 0 ) return METHOD_11 ( VAR_114 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_2 ( VAR_24
<S2SV_ModStart> ; if ( VAR_42 -> VAR_58 ||
<S2SV_ModStart> VAR_34 ) ; METHOD_6 ( & VAR_32 -> VAR_26 -> VAR_35 ) ; <S2SV_ModStart> VAR_33 ) ; METHOD_7 ( & VAR_32 -> VAR_26 -> VAR_35 ) ;
<S2SV_ModStart> VAR_11 ) { TYPE_2 * VAR_14 = METHOD_3 ( TYPE_2 , VAR_15 , VAR_11 -> VAR_16 . VAR_17 ) ; if ( ! VAR_11 -> VAR_10 . VAR_18 ) { VAR_11 -> VAR_19 = VAR_6 ; VAR_11 -> VAR_10 . VAR_18 = METHOD_4 ( VAR_14 -> VAR_20 , VAR_11 -> VAR_19 ) ; } <S2SV_ModStart> * 512 , VAR_11 -> VAR_19 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> = VAR_80 ; if ( METHOD_8 ( VAR_75 > 0 ) ) { VAR_85 = VAR_18 + 1 ; goto VAR_82 ; }
<S2SV_ModStart> -> VAR_63 ; <S2SV_ModEnd> VAR_174 = 0
<S2SV_ModStart> VAR_75 ) ; VAR_82 -> VAR_56 . VAR_75 = VAR_30 ; <S2SV_ModStart> == VAR_30 ) return <S2SV_ModEnd> - VAR_32 ;
<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * METHOD_1 ( VAR_8 )
<S2SV_ModStart> VAR_117 ) ; if ( VAR_198 )
<S2SV_ModStart> unsigned TYPE_9 ) <S2SV_ModEnd> VAR_12 [ 1 <S2SV_ModStart> ] << 8 ; VAR_13 |= ( unsigned TYPE_9 ) <S2SV_ModEnd> VAR_12 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> VAR_13 & 0xffff <S2SV_ModStart> VAR_13 & 0xffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned TYPE_9 ) VAR_12 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] << 8 ; VAR_13 |= <S2SV_ModEnd> ( unsigned TYPE_9 <S2SV_ModStart> unsigned TYPE_9 ) VAR_12 [ 1 ] ; return <S2SV_ModStart> & 0xffff ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ] ) { TYPE_1 VAR_33 = 0 ; <S2SV_ModStart> "\\n\\nThe<S2SV_blank>script<S2SV_blank>contains<S2SV_blank>errors...\\n\\n" ) ; VAR_33 = <S2SV_ModEnd> METHOD_21 ( ) <S2SV_ModStart> METHOD_21 ( ) ; if ( VAR_33 == - E_NOTHANDLED ) METHOD_22 ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correctly<S2SV_blank>handled." , VAR_31 -> VAR_32 ) ; else if ( VAR_33 == - E_INVALID ) METHOD_22 ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>format<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct.<S2SV_blank>" <S2SV_ModEnd> , VAR_31 ->
<S2SV_ModStart> -> VAR_58 ) ; if ( ! METHOD_15 ( VAR_59 ) ) goto VAR_60 <S2SV_ModStart> VAR_56 ) ; VAR_60 :
<S2SV_ModStart> VAR_27 ) ; METHOD_10 ( VAR_19 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; TYPE_4 VAR_151 ; struct STRUCT_OR_UNION_9 * VAR_161 <S2SV_ModStart> . VAR_29 ; VAR_161 = METHOD_20 ( VAR_158 -> VAR_161 , METHOD_19 ( VAR_156 ) ) ; if ( VAR_161 <S2SV_ModEnd> != VAR_147 && <S2SV_ModStart> != VAR_147 && VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_74 ) { <S2SV_ModStart> ; VAR_50 = VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_41 ; } <S2SV_ModStart> } if ( VAR_161 <S2SV_ModEnd> == VAR_147 || <S2SV_ModStart> VAR_147 || ! VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_74 ) VAR_94 <S2SV_ModStart> ; if ( VAR_161 ) METHOD_9 ( VAR_156 ) -> VAR_101 = VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_104 ; METHOD_17
<S2SV_ModStart> 0 ) { if ( VAR_64 -> VAR_50 < 1 || VAR_64 -> VAR_50 > 7 || VAR_64 -> VAR_56 < 1 || VAR_64 -> VAR_56 > 7 ) { return VAR_66 ; }
<S2SV_ModStart> return VAR_16 ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> != VAR_205 ) <S2SV_ModEnd> METHOD_17 ( VAR_155 <S2SV_ModStart> "ImproperImageHeader" ) ; <S2SV_ModEnd> if ( VAR_203 <S2SV_ModStart> . VAR_184 ; if ( VAR_150 < 1 ) METHOD_17 ( VAR_155 , "ImproperImageHeader" ) ;
<S2SV_ModStart> -> VAR_98 ; if ( VAR_84 ) { <S2SV_ModStart> VAR_84 ) ; } <S2SV_ModStart> -> VAR_98 ; if ( VAR_122 ) { <S2SV_ModStart> VAR_122 ) ; }
<S2SV_ModStart> - VAR_42 ; METHOD_12 ( & VAR_64 , 0 , sizeof ( VAR_64 ) ) ;
<S2SV_ModStart> * VAR_15 ; if ( VAR_10 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_read" ) ; }
<S2SV_ModStart> ! VAR_84 ) VAR_83 = METHOD_10 ( VAR_64 , VAR_66 , & VAR_84 ) ; <S2SV_ModEnd> while ( !
<S2SV_ModStart> VAR_14 ) ) { <S2SV_ModStart> VAR_16 |= VAR_17 <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> ) ; } METHOD_3 ( & VAR_21 -> VAR_19 , VAR_20 ) ; }
<S2SV_ModStart> VAR_13 ) { TYPE_7 VAR_16 = <S2SV_ModEnd> METHOD_2 ( VAR_12 <S2SV_ModStart> ( VAR_12 ) ; TYPE_7 VAR_17 = METHOD_4 ( VAR_12 , VAR_13 ) ; METHOD_1 ( VAR_16 <S2SV_ModStart> VAR_15 ) ; if ( VAR_10 -> VAR_18 < ( TYPE_7 ) VAR_13 ) { METHOD_5 ( ( "bad<S2SV_blank>sector<S2SV_blank>id<S2SV_blank>%d<S2SV_blank>><S2SV_blank>%d\\n" , VAR_13 , VAR_10 -> VAR_18 ) ) ; return - 1 ; } <S2SV_ModStart> VAR_11 ) + VAR_17 <S2SV_ModEnd> , VAR_15 )
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_7 <S2SV_ModStart> ) VAR_3 ; if ( VAR_7 < 2 ) { METHOD_1 ( ( VAR_4 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> = 0 ; TYPE_8 VAR_27 = 0 ; <S2SV_ModStart> ( ! VAR_16 || ! VAR_20 || ! VAR_22 <S2SV_ModStart> VAR_24 ) ; <S2SV_ModEnd> VAR_21 = * <S2SV_ModStart> , VAR_21 , & VAR_27 <S2SV_ModEnd> ) != VAR_23 <S2SV_ModStart> ) ; } if ( VAR_27 > VAR_21 ) VAR_27 = VAR_21 ; * VAR_22 = VAR_27 ;
<S2SV_ModStart> VAR_5 ) { struct STRUCT_OR_UNION_0 * VAR_6 = VAR_3 ; TYPE_3 VAR_7 ; VAR_7 = METHOD_1 ( VAR_6 -> VAR_8 <S2SV_ModEnd> , VAR_4 , <S2SV_ModStart> VAR_5 ) ; VAR_6 -> VAR_9 = ! VAR_7 ; return VAR_7 ;
<S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 ,
<S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 <S2SV_ModStart> : if ( * VAR_167 + VAR_168 < * VAR_167 || <S2SV_ModStart> VAR_168 * 2 < * VAR_167 || * VAR_167 + VAR_168 * 2 <S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 <S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 > VAR_166 -> VAR_163 ) { METHOD_28 ( "%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" <S2SV_ModEnd> , VAR_169 )
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_8 ( STRUCT_OR_UNION_18 <S2SV_ModStart> goto VAR_47 ; METHOD_13 ( VAR_16 ) ; VAR_51 = METHOD_14 ( STRUCT_OR_UNION_18 , VAR_36 , VAR_45 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) goto VAR_52 <S2SV_ModEnd> ; if ( <S2SV_ModStart> { VAR_51 = METHOD_14 ( STRUCT_OR_UNION_18 , VAR_43 , VAR_46 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } VAR_52 : fh_unlock ( VAR_16 ) ; <S2SV_ModEnd> METHOD_11 ( VAR_45
<S2SV_ModStart> -> VAR_322 , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" <S2SV_ModEnd> , VAR_326 , <S2SV_ModStart> VAR_192 && ( TYPE_18 <S2SV_ModEnd> ) VAR_309 < <S2SV_ModStart> == VAR_206 && ( TYPE_18 ) <S2SV_ModStart> != VAR_208 && ( TYPE_18 ) <S2SV_ModStart> != VAR_210 && ( TYPE_18 ) <S2SV_ModStart> != VAR_212 && ( TYPE_18 ) <S2SV_ModStart> != VAR_214 && ( TYPE_18 )
<S2SV_ModStart> VAR_116 ) ; VAR_97 = ( TYPE_9 ) - 1 ; <S2SV_ModStart> if ( VAR_115 && VAR_97 != ( TYPE_9 ) - 1 <S2SV_ModStart> VAR_115 ) { if ( VAR_97 != ( TYPE_9 ) - 1 ) { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> = METHOD_14 ( VAR_42 <S2SV_ModEnd> ) ; VAR_37
<S2SV_ModStart> ] . VAR_12 ; TYPE_6 VAR_129 <S2SV_ModStart> ) ) ; VAR_129 = METHOD_27 ( VAR_34 -> VAR_35 , VAR_34 -> VAR_35 -> VAR_130 . VAR_131 ) ; if ( VAR_59 >= VAR_129 ) { METHOD_28 ( VAR_34 -> VAR_35 , "%s:<S2SV_blank>Block<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range:<S2SV_blank>block<S2SV_blank>0x%llx,<S2SV_blank>EOFS<S2SV_blank>0x%llx<S2SV_blank>" , VAR_132 , VAR_59 , VAR_129 ) ; return VAR_123 ; }
<S2SV_ModStart> * VAR_24 ; const unsigned TYPE_4 * VAR_26 = VAR_14 ; unsigned TYPE_4 * VAR_27 = VAR_16 ; TYPE_7 VAR_28 = - 1 ; <S2SV_ModStart> VAR_24 , & VAR_26 <S2SV_ModEnd> , VAR_15 ) <S2SV_ModStart> == VAR_16 ) goto VAR_23 ; VAR_28 = METHOD_5 ( VAR_24 , & VAR_27 ) ; if ( VAR_28 != VAR_15 || METHOD_6 ( VAR_14 , VAR_27 , VAR_28 ) ) <S2SV_ModStart> ; VAR_23 : if ( VAR_28 > 0 ) { METHOD_7 ( VAR_27 , VAR_28 ) ; METHOD_8 ( VAR_27 ) ; }
<S2SV_ModStart> VAR_33 ) ; if <S2SV_ModEnd> ( VAR_34 == <S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } return VAR_34
<S2SV_ModStart> -> VAR_98 = <S2SV_ModEnd> VAR_104 ; VAR_158
<S2SV_ModStart> ; goto VAR_115 ; } if ( ( VAR_116 < VAR_119 ) || ( VAR_119 < 3 ) ) { METHOD_4 ( & VAR_109 -> VAR_110 , "invalid<S2SV_blank>descriptor<S2SV_blank>buffer<S2SV_blank>length\\n" ) ; break
<S2SV_ModStart> ( VAR_26 , "r" <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( VAR_56 && ! ( VAR_213 & <S2SV_ModEnd> VAR_214 ) && <S2SV_ModStart> : if ( ! ( VAR_213 & VAR_214 ) <S2SV_ModEnd> ) METHOD_69 (
<S2SV_ModStart> VAR_19 -> VAR_20 <S2SV_ModEnd> ; if (
<S2SV_ModStart> = VAR_21 -> VAR_16 <S2SV_ModEnd> * 6 / <S2SV_ModStart> == VAR_21 -> VAR_16 <S2SV_ModEnd> ) VAR_17 +=
<S2SV_ModStart> = 0 ; VAR_82 -> VAR_169 = 0 ;
<S2SV_ModStart> VAR_50 ) && ( VAR_43 > 2 ) &&
<S2SV_ModStart> & VAR_28 , METHOD_11 ( <S2SV_ModStart> VAR_31 -> VAR_30 )
<S2SV_ModStart> 0 ; } if ( METHOD_9 ( METHOD_8 ( VAR_26 ) -> VAR_27 . VAR_28 ) ) METHOD_10 ( VAR_26 ) ; else
<S2SV_ModStart> ; if ( VAR_74 -> VAR_77 ) return ; if (
<S2SV_ModStart> ; TYPE_6 VAR_130 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ( VAR_159 = <S2SV_ModEnd> METHOD_36 ( VAR_156
<S2SV_ModStart> VAR_65 ) ; if ( VAR_90 -> VAR_71 > 0 ) { <S2SV_ModStart> -> VAR_71 ; }
<S2SV_ModStart> == 0 ) METHOD_12 ( & VAR_60 -> VAR_61 -> VAR_63 , & VAR_40 -> VAR_61 -> VAR_64 <S2SV_ModEnd> ) ; VAR_60
<S2SV_ModStart> STRUCT_OR_UNION_4 * STRUCT_OR_UNION_4 <S2SV_ModEnd> , const struct <S2SV_ModStart> VAR_9 ) { const struct { struct STRUCT_OR_UNION_3 VAR_6 ; struct STRUCT_OR_UNION_3 VAR_9 ; } TYPE_3 ( VAR_17 ) VAR_18 = { . VAR_6 = * VAR_6 , . VAR_9 = * VAR_9 , } ; <S2SV_ModStart> , VAR_16 ; if ( METHOD_5 ( METHOD_6 ( & STRUCT_OR_UNION_4 -> VAR_19 . VAR_20 ) ) ) METHOD_7 ( & STRUCT_OR_UNION_4 -> VAR_19 . VAR_20 , sizeof ( STRUCT_OR_UNION_4 -> VAR_19 . VAR_20 ) <S2SV_ModEnd> ) ; VAR_13 <S2SV_ModStart> ; VAR_13 = METHOD_8 ( & VAR_18 , sizeof ( VAR_18 ) , & STRUCT_OR_UNION_4 -> VAR_19 . VAR_20 <S2SV_ModEnd> ) ; VAR_16
<S2SV_ModStart> STRUCT_OR_UNION_6 ) { TYPE_5 VAR_12 = STRUCT_OR_UNION_7 -> VAR_10 ; if ( VAR_12 > VAR_13 ) VAR_12 = VAR_13 ; <S2SV_ModStart> , VAR_8 , VAR_12 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> -> VAR_9 = VAR_12 <S2SV_ModEnd> ; * VAR_11
<S2SV_ModStart> VAR_13 ) ; if ( ! <S2SV_ModStart> , VAR_23 ) ) return 0
<S2SV_ModStart> = METHOD_11 ( <S2SV_ModEnd> VAR_73 [ VAR_69 <S2SV_ModStart> ] -> VAR_70 <S2SV_ModEnd> ) ; METHOD_20
<S2SV_ModStart> ; TYPE_24 VAR_259 = 0 <S2SV_ModStart> VAR_259 < 1 || VAR_259 > 256 <S2SV_ModStart> ) ) { if ( ! VAR_321 -> VAR_280 ) { METHOD_83 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_324 ) ; return VAR_326 ; }
<S2SV_ModStart> VAR_164 ) ; METHOD_29 ( VAR_101 ) ;
<S2SV_ModStart> ( VAR_112 , VAR_113 , VAR_133 , <S2SV_ModEnd> & VAR_58 )
<S2SV_ModStart> . VAR_102 , <S2SV_ModEnd> VAR_106 ) ;
<S2SV_ModStart> , VAR_71 , METHOD_22 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> VAR_67 ) , METHOD_22 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> ; } } return ( <S2SV_ModStart> VAR_125 , 16 , VAR_121 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_34 ) ; METHOD_10 ( & VAR_44 , & VAR_49 ) ; VAR_68 -> VAR_41 = VAR_68 -> VAR_43 = VAR_44 ; VAR_68 -> VAR_46 = VAR_68 -> VAR_48 = VAR_49 ; <S2SV_ModStart> VAR_37 ++ ; <S2SV_ModEnd> if ( VAR_64
<S2SV_ModStart> ; TYPE_7 * VAR_23 ; if ( VAR_4 != 4 ) return - VAR_26 ;
<S2SV_ModStart> METHOD_18 ( VAR_105 + VAR_121 -> VAR_110
<S2SV_ModStart> 2 ) ; METHOD_16 ( 256 , VAR_19 , "integer_array[%i]" , 256 ) ;
<S2SV_ModStart> * VAR_19 ; METHOD_7 <S2SV_ModEnd> ( & VAR_21 <S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_36 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_28 ) , VAR_10 <S2SV_ModEnd> , VAR_35 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_10 <S2SV_ModEnd> , VAR_35 ,
<S2SV_ModStart> ) METHOD_1 ( METHOD_22 ( VAR_30 , VAR_95 -> VAR_71 * VAR_95 -> VAR_37 ) <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> ; VAR_289 -> VAR_300 = VAR_289 -> VAR_301 ; VAR_289 -> <S2SV_ModStart> VAR_289 -> VAR_197 = 0 ; VAR_289 -> VAR_301 <S2SV_ModStart> VAR_289 -> VAR_199 ; VAR_289 -> VAR_301 = VAR_289 -> VAR_300
<S2SV_ModStart> VAR_98 , VAR_93 , VAR_99 <S2SV_ModStart> = VAR_95 ; VAR_99 <S2SV_ModEnd> = VAR_77 -> <S2SV_ModStart> VAR_79 ) { TYPE_7 VAR_100 = sizeof ( "YYMMDDHHMMZ" ) - 1 ; TYPE_7 VAR_101 = sizeof ( "YYMMDDHHMMSS+hhmm" ) - 1 ; if ( VAR_99 < VAR_100 || VAR_99 > VAR_101 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 10 ; VAR_99 -= 10 ; <S2SV_ModStart> } else { TYPE_7 VAR_100 = sizeof ( "YYYYMMDDHHMMZ" ) - 1 ; TYPE_7 VAR_101 = sizeof ( "YYYYMMDDHHMMSS.fff+hhmm" ) - 1 ; if ( VAR_99 < VAR_100 || VAR_99 > VAR_101 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 12 ; VAR_99 -= 12 ; <S2SV_ModStart> } else { if ( VAR_99 < 2 ) return 0 ; * ( VAR_47 ++ ) = * ( VAR_58 ++ ) ; * ( VAR_47 ++ ) = * ( VAR_58 ++ ) ; VAR_99 -= 2 ; if ( VAR_99 && <S2SV_ModEnd> * VAR_58 == <S2SV_ModStart> VAR_58 ++ ; VAR_99 -- ; for ( VAR_98 = 0 ; VAR_98 < 3 && VAR_99 ; VAR_98 ++ , VAR_58 ++ , VAR_99 -- ) { if ( * VAR_58 < '0' || * VAR_58 > '9' ) break ; } <S2SV_ModEnd> } } * <S2SV_ModStart> ; if ( ! VAR_99 ) return 0 ; if ( <S2SV_ModStart> == 'Z' ) { if ( VAR_99 != 1 ) return 0 ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> != '-' ) ) return 0 ; if ( VAR_99 != 5 ) return 0 ; if ( VAR_58 [ 1 ] < '0' || VAR_58 [ 1 ] > '9' || VAR_58 [ 2 ] < '0' || VAR_58 [ 2 ] > '9' || VAR_58 [ 3 ] < '0' || VAR_58 [ 3 ] > '9' || VAR_58 [ 4 ] < '0' || VAR_58 [ 4 ] > '9'
<S2SV_ModStart> return VAR_85 ; { TYPE_15 TYPE_17 ; <S2SV_ModStart> -> VAR_64 ) TYPE_17 = <S2SV_ModStart> -> VAR_64 ) if ( ! TYPE_17 ) return VAR_85 ; } { TYPE_15 TYPE_17 ; <S2SV_ModStart> -> VAR_72 ) TYPE_17 = <S2SV_ModStart> -> VAR_72 ) if ( ! TYPE_17 ) return VAR_85 ; }
<S2SV_ModStart> { if ( METHOD_17 ( VAR_65 , <S2SV_ModEnd> VAR_37 -> VAR_38
<S2SV_ModStart> VAR_24 ) ; <S2SV_ModEnd> METHOD_2 ( VAR_22 <S2SV_ModStart> VAR_9 ) ; return <S2SV_ModEnd> METHOD_3 ( VAR_24 <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; return VAR_15 < 0 ? VAR_15 : 0
<S2SV_ModStart> return VAR_16 ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ; TYPE_5 VAR_106 ; struct STRUCT_OR_UNION_22 * VAR_107 = METHOD_37 ( STRUCT_OR_UNION_21 -> VAR_39 ) -> VAR_108 <S2SV_ModStart> ( METHOD_23 ( VAR_107 ,
<S2SV_ModStart> VAR_11 == VAR_12 && VAR_20 -> VAR_14 . VAR_15 . VAR_16
<S2SV_ModStart> ; if ( <S2SV_ModEnd> ! VAR_186 .
<S2SV_ModStart> -> VAR_118 = METHOD_26 ( <S2SV_ModEnd> sizeof ( VAR_105
<S2SV_ModStart> ( VAR_45 ) { METHOD_11 ( VAR_47 ) ; return VAR_45 ; } <S2SV_ModEnd> return METHOD_9 (
<S2SV_ModStart> ; TYPE_4 VAR_28 = - VAR_32 <S2SV_ModStart> ) ; } else { VAR_28 ++ ; } <S2SV_ModStart> VAR_23 ; } <S2SV_ModEnd> METHOD_10 ( STRUCT_OR_UNION_11
<S2SV_ModStart> = VAR_54 * ( TYPE_1 ) <S2SV_ModStart> = VAR_54 * ( TYPE_1 )
<S2SV_ModStart> VAR_63 = 1 ; if ( VAR_59 == VAR_78 ) return - VAR_79
<S2SV_ModStart> VAR_17 ) { TYPE_5 VAR_25 = VAR_17 + sizeof ( TYPE_8 ) ; if ( VAR_25 < VAR_17 ) { return VAR_4 ; } <S2SV_ModStart> = METHOD_1 ( VAR_25 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> } VAR_578 -> VAR_573 += VAR_545 ; VAR_578 -> <S2SV_ModStart> VAR_545 ++ ; <S2SV_ModEnd> VAR_514 ++ ; <S2SV_ModStart> ) ; } VAR_578 -> VAR_573 += VAR_545 ;
<S2SV_ModStart> [ VAR_7 ] = "" <S2SV_ModStart> ( VAR_15 , "%1023s<S2SV_blank>" <S2SV_ModEnd> ANUM "<S2SV_blank>" ANUM <S2SV_ModStart> ANUM "<S2SV_blank>" ANUM "<S2SV_blank>%c<S2SV_blank>%8191[^\\n]" <S2SV_ModEnd> , VAR_23 , <S2SV_ModStart> < 4 ) { METHOD_4 ( 4 , "Cannot<S2SV_blank>parse<S2SV_blank>server<S2SV_blank>line:<S2SV_blank>%s\\n" , VAR_15 ) ; <S2SV_ModStart> return 0 ; }
<S2SV_ModStart> VAR_185 ] ; if ( VAR_215 -> VAR_204 -> VAR_199 == 0 ) { VAR_215 -> VAR_187 = 0 ; } else if ( VAR_215 -> VAR_204 -> VAR_205 > VAR_219 / VAR_215 -> VAR_204 -> VAR_199 ) { return ( VAR_102 ) ; } else { <S2SV_ModStart> -> VAR_205 ; }
<S2SV_ModStart> , VAR_316 ; TYPE_4 VAR_327 = <S2SV_ModEnd> ( METHOD_3 ( <S2SV_ModStart> -> VAR_16 ) == VAR_17 ) ? 64 : 32 ; <S2SV_ModEnd> VAR_239 = VAR_222 <S2SV_ModStart> if ( VAR_316 >= VAR_327 <S2SV_ModEnd> ) { METHOD_35 <S2SV_ModStart> if ( VAR_316 >= VAR_327 <S2SV_ModEnd> ) { METHOD_35 <S2SV_ModStart> break ; } if ( METHOD_3 ( VAR_323 -> VAR_16 ) != VAR_17 ) { METHOD_5 ( VAR_326 , 4 ) ; METHOD_5 ( & VAR_222 , 4 ) ; }
<S2SV_ModStart> & VAR_5 ) || <S2SV_ModEnd> ( VAR_26 -> <S2SV_ModStart> VAR_12 ) ) ) { METHOD_5 ( VAR_26 ) ; <S2SV_ModStart> return VAR_13 ; }
<S2SV_ModStart> else if ( VAR_405 && <S2SV_ModStart> else if ( VAR_405 && <S2SV_ModStart> else if ( VAR_405 &&
<S2SV_ModStart> VAR_12 ) ; VAR_43 = METHOD_6 ( & VAR_41 ) ; if ( VAR_43 ) goto VAR_44 ; <S2SV_ModStart> ! VAR_22 ) { VAR_43 = - VAR_15 ; goto VAR_45 ; } <S2SV_ModEnd> VAR_43 = METHOD_7 <S2SV_ModStart> else { goto VAR_45 <S2SV_ModEnd> ; } METHOD_16 <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; VAR_45 <S2SV_ModEnd> : METHOD_16 ( <S2SV_ModStart> VAR_41 ) ; VAR_44 :
<S2SV_ModStart> VAR_112 -> VAR_46 != VAR_115 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> VAR_46 = METHOD_12 <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> ; av_log ( VAR_109 <S2SV_ModEnd> , VAR_38 , <S2SV_ModStart> VAR_38 , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\'\\n" , VAR_112 <S2SV_ModStart> return 0 ; else if ( VAR_112 -> VAR_46 == VAR_115 ) { av_log ( VAR_109 , VAR_105 , "Invalid<S2SV_blank>chunk<S2SV_blank>size<S2SV_blank>%" PRIu64 "\\n" , VAR_112 -> VAR_46 ) ; return METHOD_7 ( VAR_116 ) ; } <S2SV_ModStart> ) ) { TYPE_9 <S2SV_ModEnd> VAR_106 = VAR_109 <S2SV_ModStart> VAR_88 , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "<S2SV_blank>error=%s.\\n" , VAR_112 <S2SV_ModStart> VAR_105 , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> ".\\n" , VAR_106
<S2SV_ModStart> TYPE_3 VAR_12 = <S2SV_ModEnd> METHOD_1 ( & <S2SV_ModStart> VAR_10 ) ; if ( VAR_12 == * VAR_11 ) { * VAR_11 = VAR_10 ; return 1 ; } else { * VAR_11 = VAR_12 ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_5 ) <S2SV_ModStart> VAR_5 ) { METHOD_4 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> 8 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> 8 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_5 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; } return VAR_9 ;
<S2SV_ModStart> VAR_179 ) { case VAR_159 : break ;
<S2SV_ModStart> , * VAR_79 , VAR_195
<S2SV_ModStart> if ( VAR_21 != VAR_42 && VAR_22 == 0 ) VAR_22 = METHOD_10 ( VAR_21 ) ; if ( VAR_21
<S2SV_ModStart> * VAR_14 , TYPE_5 <S2SV_ModEnd> VAR_16 ) { <S2SV_ModStart> * VAR_13 ; <S2SV_ModEnd> METHOD_5 ( 100 <S2SV_ModStart> 100 , ( "mem_resize(%p,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> ) ) ; if ( ! VAR_16 ) { METHOD_6 ( "mem_resize<S2SV_blank>was<S2SV_blank>not<S2SV_blank>really<S2SV_blank>designed<S2SV_blank>to<S2SV_blank>handle<S2SV_blank>a<S2SV_blank>buffer<S2SV_blank>of<S2SV_blank>size<S2SV_blank>0\\n" "This<S2SV_blank>may<S2SV_blank>not<S2SV_blank>work.\\n" ) ; }
<S2SV_ModStart> unsigned TYPE_4 VAR_26 ; VAR_24 -> VAR_25 = 0
<S2SV_ModStart> VAR_60 ) { if ( * VAR_91 > 0xff ) return VAR_37 ;
<S2SV_ModStart> VAR_140 ; } if ( VAR_429 <= 0 ) { return ; }
<S2SV_ModStart> VAR_58 ) { if ( STRUCT_OR_UNION_19 -> VAR_84 > 1024 * 1024 ) { METHOD_13 ( & VAR_90 -> VAR_88 , VAR_74 , "Rejecting<S2SV_blank>malformed<S2SV_blank>cpio<S2SV_blank>archive:<S2SV_blank>symlink<S2SV_blank>contents<S2SV_blank>exceed<S2SV_blank>1<S2SV_blank>megabyte" ) ; return ( VAR_93 ) ; }
<S2SV_ModStart> . VAR_11 = VAR_43 <S2SV_ModEnd> , . VAR_16
<S2SV_ModStart> VAR_71 + 8 + 8 <S2SV_ModStart> VAR_73 ; } const <S2SV_ModStart> 4 ) ) ; const TYPE_16 <S2SV_ModEnd> VAR_42 = (
<S2SV_ModStart> TYPE_4 VAR_14 , TYPE_5 <S2SV_ModEnd> * VAR_25 )
<S2SV_ModStart> & 0xFFFFFFFF ; TYPE_10 VAR_110 ; <S2SV_ModStart> ) continue ; <S2SV_ModEnd> VAR_110 = METHOD_2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> VAR_110 = METHOD_3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> <= 0 ) continue ; } VAR_108 -> VAR_110 = VAR_110 ; <S2SV_ModEnd> if ( VAR_98
<S2SV_ModStart> VAR_123 ; } METHOD_10 ( STRUCT_OR_UNION_37 ) ; METHOD_11 ( STRUCT_OR_UNION_37 ) ; METHOD_22 ( & METHOD_32 ( STRUCT_OR_UNION_37 ) -> VAR_126 ) ; <S2SV_ModStart> VAR_116 ) ; <S2SV_ModEnd> if ( METHOD_28 <S2SV_ModStart> VAR_121 ) ; <S2SV_ModEnd> STRUCT_OR_UNION_37 -> VAR_117 <S2SV_ModStart> ; VAR_122 : METHOD_31 ( & METHOD_32 ( STRUCT_OR_UNION_37 ) -> VAR_126 ) ;
<S2SV_ModStart> ( VAR_32 -> METHOD_32 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> , VAR_32 -> METHOD_32 <S2SV_ModEnd> ( ) ,
<S2SV_ModStart> VAR_69 , VAR_78 , VAR_60 << 3
<S2SV_ModStart> ; VAR_27 = METHOD_4 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> 0 ; VAR_36 < <S2SV_ModEnd> VAR_18 ; VAR_36
<S2SV_ModStart> VAR_10 ) { TYPE_7 VAR_14 = <S2SV_ModEnd> METHOD_2 ( VAR_9 <S2SV_ModStart> ( VAR_9 ) ; TYPE_7 VAR_15 = METHOD_4 ( VAR_9 , VAR_10 ) ; METHOD_1 ( VAR_14 <S2SV_ModStart> ( TYPE_8 ) VAR_15 , <S2SV_ModEnd> ( ( TYPE_9
<S2SV_ModStart> TYPE_5 VAR_55 = METHOD_24 ( <S2SV_ModStart> VAR_60 , VAR_60 ) <S2SV_ModStart> = VAR_55 ; METHOD_24 ( <S2SV_ModStart> 16 , 0 )
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_29 = VAR_31 <S2SV_ModStart> ) ; else if ( VAR_29 && METHOD_24 ( VAR_29 ) ) { METHOD_25 ( VAR_29 , STRUCT_OR_UNION_27 ) ; VAR_45 = METHOD_26 ( STRUCT_OR_UNION_29 , VAR_43 , VAR_44 , VAR_46 ) ; } else
<S2SV_ModStart> ) ) ; METHOD_11 ( VAR_27 > 0 ) ; METHOD_11 ( VAR_53 > 0 ) ; METHOD_11 ( VAR_39 > 0 ) ; METHOD_11 ( VAR_51 > 0 ) ;
<S2SV_ModStart> case VAR_13 : if ( STRUCT_OR_UNION_18 -> VAR_19 )
<S2SV_ModStart> ( VAR_16 METHOD_202 \\\n{ <S2SV_ModEnd> if ( VAR_260 <S2SV_ModStart> METHOD_202 ; } \\\n} <S2SV_ModEnd> TYPE_45 VAR_233 ; <S2SV_ModStart> ++ METHOD_202 { VAR_206 = VAR_207 ; VAR_189 = 1 ; <S2SV_ModStart> -= VAR_221 ; if ( VAR_224 < 0 METHOD_202 continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> ( VAR_28 , VAR_31 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> > VAR_20 / 4 <S2SV_ModEnd> ) || (
<S2SV_ModStart> , TYPE_5 VAR_9 , TYPE_8 VAR_16 <S2SV_ModStart> METHOD_2 ( VAR_9 , VAR_16 ) * 0.01 <S2SV_ModEnd> + VAR_10 ,
<S2SV_ModStart> VAR_102 ) ; VAR_99 -> VAR_104 . VAR_105 = VAR_106 ;
<S2SV_ModStart> ) { return METHOD_2 ( METHOD_1 ( VAR_0 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_17 ) ; if ( <S2SV_ModStart> ( VAR_17 ) != 0 ) return
<S2SV_ModStart> { VAR_383 : if ( VAR_745 != ( TYPE_36 * ) VAR_756 )
<S2SV_ModStart> VAR_138 , VAR_118 , 0
<S2SV_ModStart> VAR_7 ) ; if ( VAR_55 -> VAR_56 ) { METHOD_17 ( VAR_55 -> VAR_56 ) ; VAR_55 -> VAR_56 = VAR_52 ; } <S2SV_ModEnd> if ( !
<S2SV_ModStart> ; if ( VAR_37 <S2SV_ModEnd> ) { VAR_42
<S2SV_ModStart> = 0 ; VAR_539 -> VAR_530 . mbs_zero_last_dot_suppress = 0 ; <S2SV_ModStart> VAR_164 ) ; if ( ( VAR_539 -> VAR_540 <= 6 ) && ( VAR_539 -> VAR_326 . VAR_541 > 1 ) && ( VAR_539 -> VAR_77 & VAR_70 ) && ( VAR_539 -> VAR_77 & VAR_74 ) ) { if ( VAR_539 -> VAR_542 == VAR_543 ) { VAR_522 -> VAR_394 [ VAR_182 ] = VAR_522 -> VAR_394 [ VAR_182 ] >> 3 ; VAR_522 -> VAR_394 [ VAR_378 ] = VAR_522 -> VAR_394 [ VAR_378 ] >> 3 ; VAR_522 -> VAR_394 [ VAR_382 ] = VAR_522 -> VAR_394 [ VAR_382 ] >> 3 ; } else { VAR_522 -> VAR_394 [ VAR_182 ] = VAR_522 -> VAR_394 [ VAR_182 ] >> 1 ; VAR_522 -> VAR_394 [ VAR_378 ] = VAR_522 -> VAR_394 [ VAR_378 ] >> 1 ; VAR_522 -> VAR_394 [ VAR_382 ] = VAR_522 -> VAR_394 [ VAR_382 ] >> 1 ; } } <S2SV_ModStart> = 0 ; METHOD_22 <S2SV_ModEnd> ( VAR_539 -> <S2SV_ModStart> = VAR_482 ; } else { <S2SV_ModStart> -> VAR_530 . <S2SV_ModEnd> VAR_489 = VAR_490 <S2SV_ModStart> VAR_489 = VAR_490 <S2SV_ModEnd> ; } if
<S2SV_ModStart> * VAR_15 ; if ( VAR_10 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_read" ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_20 = R_NEW0 ( struct STRUCT_OR_UNION_3 ) <S2SV_ModStart> if ( ! VAR_20 <S2SV_ModEnd> ) { return <S2SV_ModStart> VAR_4 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> ; if ( ! VAR_20 -> VAR_11 ||
<S2SV_ModStart> . METHOD_1 ( METHOD_2 ( VAR_15 ) <S2SV_ModEnd> , VAR_18 )
<S2SV_ModStart> + 8 ) ) goto VAR_121 ; if ( ( VAR_69 + VAR_85 ) > VAR_118 + 8
<S2SV_ModStart> VAR_14 ) { <S2SV_ModEnd> TYPE_10 VAR_13 , <S2SV_ModStart> , VAR_17 ; if ( unlikely ( siphash_key_is_zero ( & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 ) ) ) get_random_bytes ( & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; VAR_13 = METHOD_6 <S2SV_ModEnd> ( ( TYPE_9 <S2SV_ModStart> VAR_15 -> VAR_11 , & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> ) ; VAR_17
<S2SV_ModStart> -> VAR_10 ; <S2SV_ModEnd> TYPE_4 VAR_54 ; <S2SV_ModStart> TYPE_4 VAR_54 ; mutex_lock <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; VAR_54 <S2SV_ModStart> VAR_49 ; } METHOD_10 <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; METHOD_8 <S2SV_ModStart> ; VAR_49 : METHOD_10 <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> , VAR_28 , VAR_37 <S2SV_ModEnd> ) ; METHOD_10
<S2SV_ModStart> VAR_19 ) ; METHOD_8 ( VAR_23 ) ;
<S2SV_ModStart> VAR_4 * VAR_34 ; TYPE_9 * VAR_36 = METHOD_7 ( VAR_26 -> VAR_27 , sizeof ( TYPE_9 ) ) <S2SV_ModStart> VAR_35 ) ; VAR_36 -> VAR_34 = VAR_34 ; <S2SV_ModStart> * VAR_32 ; VAR_36 <S2SV_ModEnd> -> VAR_31 = <S2SV_ModStart> { APR_ARRAY_PUSH ( VAR_36 <S2SV_ModEnd> -> VAR_31 , <S2SV_ModStart> * VAR_33 = VAR_36 <S2SV_ModEnd> ; return VAR_35
<S2SV_ModStart> VAR_47 -= VAR_43 + 1
<S2SV_ModStart> VAR_233 | VAR_234 | VAR_315 | VAR_316 | VAR_317 <S2SV_ModStart> ) ) ; if ( VAR_304 -> VAR_318 ) { METHOD_77 ( VAR_304 -> VAR_181 ) ; }
<S2SV_ModStart> = 1 ; METHOD_3 <S2SV_ModEnd> ( VAR_24 -> <S2SV_ModStart> VAR_30 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_24 ->
<S2SV_ModStart> = 0 ; METHOD_3 ( <S2SV_ModStart> , VAR_9 ) )
<S2SV_ModStart> ) VAR_27 ; { TYPE_53 VAR_695 ; VAR_695 = VAR_842 -> VAR_695 ; METHOD_21 ( VAR_842 , 0 , sizeof ( TYPE_54 ) ) ; VAR_842 -> VAR_695 = VAR_695 ; }
<S2SV_ModStart> & VAR_184 ; VAR_287 -> VAR_308 -> VAR_196 = & VAR_316 ; <S2SV_ModStart> VAR_303 ) ) { <S2SV_ModStart> & VAR_191 ; VAR_287 -> VAR_308 -> VAR_196 = & VAR_317 ; }
<S2SV_ModStart> { VAR_54 = METHOD_13 ( STRUCT_OR_UNION_7 <S2SV_ModEnd> , & STRUCT_OR_UNION_7 <S2SV_ModStart> STRUCT_OR_UNION_7 -> VAR_24 , & VAR_53 ) ; if ( VAR_54 <S2SV_ModEnd> ) return VAR_54
<S2SV_ModStart> ; if ( VAR_55 > 64 ) { METHOD_9 ( VAR_52 , "invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>picolcd<S2SV_blank>raw<S2SV_blank>event\\n" , VAR_55 ) ; return 0 ; } if (
<S2SV_ModStart> STRUCT_OR_UNION_6 * VAR_16 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto VAR_32 ; if ( VAR_33 -> VAR_34 -> VAR_35 != VAR_36 ) { METHOD_2 ( VAR_33 ) ; return VAR_31 ; } VAR_16 = ( struct STRUCT_OR_UNION_6 * ) VAR_33
<S2SV_ModStart> VAR_370 ) ; <S2SV_ModEnd> if ( VAR_379 <S2SV_ModStart> -> VAR_380 ; VAR_371 :
<S2SV_ModStart> -> VAR_27 , VAR_24 -> VAR_20 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> [ VAR_65 ] && VAR_175 -> VAR_146 [ VAR_65 ]
<S2SV_ModStart> ; if ( METHOD_30 ( VAR_90 ) <S2SV_ModEnd> ) return 1
<S2SV_ModStart> TYPE_19 * VAR_236 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> VAR_170 ) ; <S2SV_ModEnd> for ( VAR_162 <S2SV_ModStart> ++ ) { TYPE_16 VAR_241 ; METHOD_18 ( & VAR_241 , VAR_236 + VAR_162 * sizeof ( VAR_241 ) , sizeof ( VAR_241 ) ) ; VAR_241 <S2SV_ModEnd> ^= VAR_239 -> <S2SV_ModStart> VAR_128 . VAR_114 ; METHOD_18 ( VAR_236 + VAR_162 * sizeof ( VAR_241 ) , & VAR_241 , sizeof ( VAR_241 ) )
<S2SV_ModStart> , } ; struct STRUCT_OR_UNION_0 * VAR_11 = <S2SV_ModEnd> METHOD_1 ( VAR_7 <S2SV_ModStart> VAR_10 ) ; if ( ! METHOD_2 ( VAR_11 ) ) VAR_11 -> VAR_12 -> VAR_13 |= VAR_14 ; return VAR_11 ;
<S2SV_ModStart> VAR_126 ++ = VAR_133 <S2SV_ModEnd> ; METHOD_9 (
<S2SV_ModStart> ) ; } if ( ! METHOD_1 ( VAR_58 -> VAR_59 . VAR_55 ) ) return ( 0 ) ; <S2SV_ModStart> VAR_59 . VAR_55 ) ; if ( ! METHOD_1 ( VAR_58 -> VAR_59 . VAR_60 ) ) return ( 0
<S2SV_ModStart> VAR_162 ) ) { if ( METHOD_25 ( VAR_164 >= VAR_148 -> VAR_72 ) ) { VAR_195 = VAR_194 ; break ; } <S2SV_ModStart> = VAR_188 ; }
<S2SV_ModStart> . VAR_164 ; TYPE_22 VAR_143 = 2 * ( TYPE_22 ) <S2SV_ModEnd> VAR_184 -> VAR_142 <S2SV_ModStart> VAR_184 -> VAR_142 <S2SV_ModEnd> ; while (
<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; } return ; <S2SV_ModEnd> } VAR_80 = <S2SV_ModStart> ) ) ; METHOD_262 ( VAR_625 ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_4 * VAR_44 = VAR_45 -> VAR_43 . VAR_44 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_44 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_44 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_44 ) ) <S2SV_ModStart> ( VAR_40 ) <S2SV_ModEnd> VAR_44 -> VAR_39 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_44 ) ;
<S2SV_ModStart> VAR_15 ) { TYPE_2 VAR_20 = 0 ; <S2SV_ModStart> VAR_18 ) ; if ( METHOD_5 ( VAR_15 -> VAR_14 , VAR_15 -> VAR_18 , & VAR_20 ) || VAR_15 -> VAR_9 -> VAR_18 < VAR_20 ) return VAR_21 ;
<S2SV_ModStart> TYPE_6 VAR_13 = METHOD_4 <S2SV_ModEnd> ( VAR_6 ,
<S2SV_ModStart> ; return VAR_45 < <S2SV_ModEnd> 0 ? VAR_45
<S2SV_ModStart> VAR_69 = 0 ; if ( ! VAR_56 ) return - VAR_51
<S2SV_ModStart> VAR_43 ) ; VAR_127 = & VAR_43 -> VAR_89 ; <S2SV_ModStart> - VAR_18 ; if ( METHOD_18 ( VAR_43 ) ) goto VAR_126 ; <S2SV_ModStart> VAR_43 -> VAR_75 <S2SV_ModEnd> ; if (
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_60 , VAR_58
<S2SV_ModStart> ] ) { METHOD_2 <S2SV_ModEnd> ( VAR_2 ,
<S2SV_ModStart> VAR_17 = VAR_18 ; TYPE_100 -> VAR_159 = VAR_160
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_401 < 4 <S2SV_ModStart> VAR_401 < 4 && VAR_408 -> VAR_396 [ VAR_401 ] && VAR_408 -> VAR_112 [ VAR_401 ]
<S2SV_ModStart> -> VAR_108 = METHOD_12 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> ) ) ; if ( VAR_5 -> VAR_6 ) <S2SV_ModStart> -> VAR_8 ; else VAR_9 = - VAR_10 ;
<S2SV_ModStart> STRUCT_OR_UNION_9 * VAR_255 ; struct STRUCT_OR_UNION_21 VAR_343 <S2SV_ModStart> . VAR_320 ) { struct STRUCT_OR_UNION_22 * VAR_344 ; METHOD_47 ( ) ; VAR_344 = METHOD_48 ( VAR_283 -> VAR_344 ) ; if ( VAR_344 ) { METHOD_49 ( & VAR_343 , VAR_344 , sizeof ( * VAR_344 ) + VAR_344 -> VAR_320 . VAR_345 ) ; VAR_319 . VAR_320 = & VAR_343 . VAR_320 ; } METHOD_50 ( ) ; } <S2SV_ModEnd> VAR_277 = VAR_319 <S2SV_ModStart> . VAR_320 -> VAR_320 . <S2SV_ModStart> . VAR_320 -> VAR_320 . <S2SV_ModStart> . VAR_320 -> VAR_320 .
<S2SV_ModStart> VAR_85 ) ; METHOD_21 ( ! METHOD_20 ( VAR_84 ) ) ;
<S2SV_ModStart> , STRUCT_OR_UNION_21 , VAR_128 ,
<S2SV_ModStart> VAR_28 ) ; struct STRUCT_OR_UNION_2 * VAR_20 ; <S2SV_ModStart> VAR_21 < 0 ) return - VAR_7 ; VAR_20 = VAR_18 -> VAR_19 -> VAR_20 + VAR_21 ; if ( VAR_28 -> VAR_25 - VAR_28 -> VAR_27 > VAR_20 -> VAR_30 <S2SV_ModStart> -> VAR_27 , VAR_20 -> <S2SV_ModEnd> VAR_22 >> VAR_23
<S2SV_ModStart> VAR_75 ) { if ( METHOD_16 ( VAR_69 ) && METHOD_16 ( VAR_46 ) ) { return METHOD_17 ( VAR_73 ) ; } else if ( METHOD_16 ( VAR_69 ) ) { METHOD_18 ( VAR_73 -> VAR_59 , VAR_46 -> VAR_59 ) ; METHOD_18 ( VAR_73 -> VAR_74 , VAR_46 -> VAR_74 ) ; return ; } else if ( METHOD_16 ( VAR_46 ) ) { METHOD_18 ( VAR_73 -> VAR_59 , VAR_69 -> VAR_59 ) ; METHOD_18 ( VAR_73 -> VAR_74 , VAR_69 -> VAR_74 ) ; return ; } if ( METHOD_19 ( VAR_69 , VAR_46 ) ) { METHOD_20 ( VAR_73 , VAR_69 , VAR_75 ) ; return ; } TYPE_5 VAR_81 ; METHOD_21 ( VAR_81 ) ; METHOD_13 ( VAR_81 , VAR_75 -> VAR_76 , VAR_46 -> VAR_74 ) ; if ( METHOD_22 ( VAR_69 -> VAR_59 , VAR_46 -> VAR_59 ) == 0 && METHOD_22 ( VAR_69 -> VAR_74 , VAR_81 ) == 0 ) { METHOD_23 ( VAR_81 ) ; return METHOD_17 ( VAR_73 ) ; } TYPE_5 <S2SV_ModEnd> VAR_77 , VAR_78 <S2SV_ModStart> ; METHOD_15 ( VAR_81 ,
<S2SV_ModStart> -> VAR_29 = METHOD_7 ( VAR_42 , <S2SV_ModEnd> sizeof ( struct
<S2SV_ModStart> TYPE_3 VAR_77 = - VAR_78 ; METHOD_5 ( & VAR_74 , 0 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> sizeof ( VAR_74 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_4 ) { if ( METHOD_3 ( VAR_4 ) ) { METHOD_2 ( VAR_4 , VAR_5 ) ; return 0 ; }
<S2SV_ModStart> TYPE_1 VAR_6 ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_6 ) ; STRUCT_OR_UNION_4 -> VAR_1 -= 1 ; if ( ! STRUCT_OR_UNION_4 -> VAR_1 ) <S2SV_ModStart> -> VAR_4 ) ; else STRUCT_OR_UNION_4 = VAR_7 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> } else { const TYPE_5 VAR_142 = ( VAR_139 -> VAR_72 & VAR_143 ) ? 2 : 1 ; <S2SV_ModStart> VAR_132 + VAR_133 * VAR_142 <S2SV_ModStart> VAR_132 + VAR_133 * VAR_142 + <S2SV_ModEnd> VAR_136 * VAR_139 <S2SV_ModStart> VAR_141 ] = VAR_132 <S2SV_ModEnd> + ( VAR_133 <S2SV_ModStart> -> VAR_135 ) * VAR_142 + <S2SV_ModEnd> ( VAR_136 >> <S2SV_ModStart> VAR_128 ] = VAR_132 <S2SV_ModEnd> + ( VAR_133 <S2SV_ModStart> -> VAR_135 ) * VAR_142 + <S2SV_ModEnd> ( VAR_136 >> <S2SV_ModStart> VAR_128 ] = VAR_132 <S2SV_ModEnd> + ( VAR_133 <S2SV_ModStart> -> VAR_135 ) * VAR_142 + <S2SV_ModEnd> ( VAR_136 >> <S2SV_ModStart> VAR_141 ] = VAR_132 <S2SV_ModEnd> + ( VAR_133 <S2SV_ModStart> -> VAR_135 ) * VAR_142 + <S2SV_ModEnd> ( VAR_136 >>
<S2SV_ModStart> 101 , ( "jas_realloc(%x,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , VAR_8 ,
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) ; METHOD_23 <S2SV_ModEnd> ( VAR_688 ->
<S2SV_ModStart> ] ; TYPE_48 VAR_299 = VAR_561 [ VAR_562 + 5 ] ; TYPE_48 <S2SV_ModStart> VAR_294 < VAR_568 || VAR_299 * 8 < VAR_568 <S2SV_ModStart> VAR_562 + 4 ] ; TYPE_48 VAR_596 = VAR_561 [ VAR_562 + 5 <S2SV_ModStart> 1 || VAR_346 < VAR_568 || VAR_596 * 8
<S2SV_ModStart> VAR_38 = 0 <S2SV_ModEnd> ; const TYPE_6 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_38
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_9 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 4 ; if <S2SV_ModEnd> ( ( VAR_12 <S2SV_ModStart> VAR_26 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_28 , "horDiff32" , "%s" , "(cc%(4*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_27 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> VAR_222 , VAR_240 <S2SV_ModEnd> ) + METHOD_5 <S2SV_ModStart> VAR_174 , VAR_240 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( VAR_26 -> VAR_20 < sizeof ( struct STRUCT_OR_UNION_4 ) ) return 0 ; if ( <S2SV_ModStart> -> VAR_17 > <S2SV_ModEnd> VAR_26 -> VAR_20 <S2SV_ModStart> VAR_26 -> VAR_20 - VAR_18
<S2SV_ModStart> , VAR_38 ; unsigned TYPE_2 VAR_46 , VAR_47 ; TYPE_2 VAR_48 ; <S2SV_ModStart> 1 ; } VAR_46 = METHOD_11 ( VAR_25 -> VAR_49 ) ; VAR_47 = VAR_43 -> VAR_47 ; for ( VAR_48 = 0 ; VAR_48 < VAR_50 ; VAR_48 ++ ) { if ( METHOD_11 ( VAR_33 -> VAR_51 [ VAR_48 ] ) >= VAR_46 || METHOD_17 ( VAR_33 -> VAR_52 [ VAR_48 ] ) >= VAR_47 ) return 1 ; } for ( VAR_48 = 0 ; VAR_48 < VAR_53 ; VAR_48 ++ ) { if ( METHOD_11 ( VAR_33 -> VAR_54 [ VAR_48 ] ) >= VAR_46 || METHOD_17 ( VAR_33 -> VAR_55 [ VAR_48 ] ) >= VAR_47 ) return 1 ; }
<S2SV_ModStart> * VAR_80 ; if ( METHOD_8 ( VAR_50 ) != VAR_91 ) { <S2SV_ModStart> VAR_11 ) ; } <S2SV_ModStart> } else { VAR_51 = 2 ; if ( METHOD_8 ( METHOD_27 ( VAR_50 , 1 ) ) == VAR_92 ) { VAR_51 += 2 ; METHOD_20 ( METHOD_27 ( VAR_50 , 2 ) , VAR_93 ) ; } for ( <S2SV_ModEnd> ; VAR_51 <
<S2SV_ModStart> VAR_54 = - VAR_55 <S2SV_ModEnd> ; TYPE_6 VAR_51 <S2SV_ModStart> = 0 ; TYPE_9 VAR_30 ; TYPE_9 VAR_38 ; TYPE_8 VAR_26 ; <S2SV_ModStart> VAR_12 ) ; if ( VAR_33 == VAR_4 ) { return VAR_54 ; } <S2SV_ModStart> & VAR_53 ) ; VAR_30 = VAR_33 -> VAR_30 ; VAR_38 = VAR_33 -> VAR_38 ; VAR_26 = VAR_33 -> VAR_25 -> VAR_26 <S2SV_ModStart> ) , & VAR_26 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> -> VAR_30 == <S2SV_ModEnd> VAR_30 ) && <S2SV_ModStart> -> VAR_38 == <S2SV_ModEnd> VAR_38 ) ) <S2SV_ModStart> ; METHOD_6 ( VAR_18 <S2SV_ModEnd> ) ; METHOD_7 <S2SV_ModStart> "something<S2SV_blank>wrong<S2SV_blank>...<S2SV_blank><<<---<S2SV_blank>Found<S2SV_blank>NOTHING<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>...<S2SV_blank>????<S2SV_blank>--->>>>>" ) ; METHOD_12 ( & VAR_53 ) ; return VAR_54 ;
<S2SV_ModStart> METHOD_90 METHOD_90 { if ( VAR_233 -> VAR_276 || VAR_233 == VAR_350 -> VAR_286 METHOD_90 VAR_350 -> VAR_343 -- ; if ( VAR_233 != VAR_350 -> VAR_286 METHOD_90
<S2SV_ModStart> ; if ( ! VAR_54 -> VAR_56 ) { METHOD_6 ( ! <S2SV_ModStart> VAR_38 . VAR_44 ) ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> goto VAR_53 ; <S2SV_ModEnd> return METHOD_8 (
<S2SV_ModStart> ; if ( VAR_56 > VAR_57 ) { unsigned TYPE_5 VAR_72 ; if ( <S2SV_ModStart> VAR_25 ) ) goto VAR_64 ; VAR_72 = ( VAR_20 - VAR_63 -> VAR_12 ) >> VAR_58 ; VAR_72 += VAR_63 -> VAR_73 ; if ( VAR_72 + ( VAR_56 >> VAR_58 ) < VAR_72 ) goto VAR_66 <S2SV_ModEnd> ; } if
<S2SV_ModStart> = 0x0 ; VAR_81 -> VAR_82 . VAR_86 = VAR_87 ;
<S2SV_ModStart> - VAR_13 ; METHOD_4 ( & VAR_45 , 0 , sizeof ( VAR_45 ) ) ;
<S2SV_ModStart> : if ( METHOD_37 <S2SV_ModEnd> ( VAR_48 )
<S2SV_ModStart> } } else { <S2SV_ModStart> VAR_103 ++ ; if ( VAR_103 == METHOD_5 ( VAR_106 ) ) { METHOD_8 ( VAR_46 ) ; return ; } }
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_2 ) <S2SV_ModStart> ( VAR_2 ) METHOD_2 <S2SV_ModEnd> ( VAR_2 )
<S2SV_ModStart> , TYPE_3 VAR_20 , TYPE_9 VAR_39 , TYPE_10 VAR_40 <S2SV_ModStart> ) ; } const TYPE_3 VAR_41 = METHOD_13 ( VAR_37 ) ; if ( METHOD_14 ( VAR_41 , VAR_39 , VAR_40 ) < 0 ) { METHOD_15 ( "Can\'t<S2SV_blank>change<S2SV_blank>\'%s\'<S2SV_blank>ownership<S2SV_blank>to<S2SV_blank>%lu:%lu" , VAR_4 , ( TYPE_11 ) VAR_39 , ( TYPE_11 ) VAR_40 ) ; METHOD_12 ( VAR_37 ) ; METHOD_16 ( VAR_4 ) ; return VAR_6 ; }
<S2SV_ModStart> VAR_41 ) ; if ( ( VAR_124 -> VAR_128 != 0 ) && ( VAR_126 > VAR_62 ) ) { return VAR_129 ; }
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_9 , 0
<S2SV_ModStart> if ( VAR_24 != VAR_52 <S2SV_ModEnd> ) { VAR_50
<S2SV_ModStart> ; if ( METHOD_45 <S2SV_ModEnd> ( VAR_152 ,
<S2SV_ModStart> TYPE_69 TYPE_69 ; TYPE_70 VAR_310 = 0 ; <S2SV_ModStart> , VAR_196 ; if ( VAR_310 ++ ) { METHOD_51 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , VAR_305 ) ; return VAR_307 ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( const <S2SV_ModStart> TYPE_1 * VAR_1 ) { if ( VAR_1 -> VAR_6 . VAR_7 == 2 <S2SV_ModStart> VAR_5 ; } else { return VAR_5 ; } }
<S2SV_ModStart> 1 ; } if ( VAR_101 -> VAR_208 ) goto VAR_209 ; <S2SV_ModStart> } } } VAR_209 :
<S2SV_ModStart> VAR_20 ) ) goto VAR_23 <S2SV_ModEnd> ; VAR_19 = <S2SV_ModStart> ; } } VAR_23 :
<S2SV_ModStart> TYPE_12 * VAR_184 ; TYPE_31 VAR_186 = VAR_187 <S2SV_ModStart> VAR_173 ] ) { VAR_186 = VAR_188 ; break ; } <S2SV_ModEnd> VAR_173 ++ ; <S2SV_ModStart> ++ ; } if ( ! VAR_186 ) return VAR_35 ; <S2SV_ModStart> VAR_107 = 0 ; VAR_186 = VAR_187 <S2SV_ModStart> VAR_107 ] ) { VAR_186 = VAR_188 ; break ; } <S2SV_ModEnd> VAR_107 ++ ; <S2SV_ModStart> } if ( ! VAR_186 ) return VAR_35 ; if ( <S2SV_ModStart> VAR_107 = 0 ; VAR_186 = VAR_187 <S2SV_ModStart> VAR_107 ] ) { VAR_186 = VAR_188 ; break ; } <S2SV_ModEnd> VAR_107 ++ ; <S2SV_ModStart> } if ( ! VAR_186 ) return VAR_35 ; if ( <S2SV_ModStart> -> VAR_132 ; VAR_186 = VAR_187 ; <S2SV_ModStart> VAR_173 ] ) { VAR_186 = VAR_188 ; break ; } <S2SV_ModEnd> VAR_173 ++ ; <S2SV_ModStart> } if ( ! VAR_186 ) return VAR_35 ; if ( <S2SV_ModStart> -> VAR_132 ; VAR_186 = VAR_187 ; <S2SV_ModStart> VAR_173 ] ) { VAR_186 = VAR_188 ; break ; } <S2SV_ModEnd> VAR_173 ++ ; <S2SV_ModStart> ++ ; } if ( ! VAR_186 ) return VAR_35 ;
<S2SV_ModStart> VAR_69 ; struct STRUCT_OR_UNION_15 <S2SV_ModEnd> * VAR_35 =
<S2SV_ModStart> VAR_365 < 0 <S2SV_ModEnd> ) { METHOD_63 <S2SV_ModStart> 1 ; } if ( VAR_105 . VAR_106 ) { METHOD_63 ( VAR_367 , "Received<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>untrusted<S2SV_blank>pid:%u" , VAR_105 . VAR_106 ) ; continue ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_28 ) { TYPE_1 * VAR_31 = VAR_28 -> VAR_32 ; <S2SV_ModStart> { METHOD_1 ( VAR_31 -> VAR_33 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_180 , VAR_176 ; struct STRUCT_OR_UNION_15 * VAR_214 <S2SV_ModStart> ) ) ; VAR_214 = rcu_dereference_protected ( VAR_229 -> VAR_214 , sock_owned_by_user ( VAR_250 ) ) ; <S2SV_ModStart> & VAR_188 , <S2SV_ModEnd> VAR_214 , & <S2SV_ModStart> ; if ( VAR_214 <S2SV_ModEnd> ) VAR_208 -> <S2SV_ModStart> -> VAR_209 = <S2SV_ModEnd> VAR_214 -> VAR_212 <S2SV_ModStart> -> VAR_212 + <S2SV_ModEnd> VAR_214 -> VAR_215 <S2SV_ModStart> VAR_214 -> VAR_215 <S2SV_ModEnd> ; VAR_248 ->
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_16 -> VAR_84 < 0 ) goto VAR_93 ; if (
<S2SV_ModStart> ( VAR_13 ) ; VAR_16 -> VAR_34 = 0
<S2SV_ModStart> TYPE_1 * VAR_5 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> = VAR_17 ; if ( <S2SV_ModEnd> * ( VAR_21 <S2SV_ModStart> + 1 ) > sizeof ( struct STRUCT_OR_UNION_4 ) ) return ; METHOD_4 ( & VAR_43 -> VAR_38 , VAR_21 + sizeof ( struct STRUCT_OR_UNION_3 ) , * ( VAR_21 + 1 )
<S2SV_ModStart> * VAR_8 = METHOD_6 <S2SV_ModEnd> ( VAR_4 ,
<S2SV_ModStart> { if ( ! METHOD_3 <S2SV_ModEnd> ( STRUCT_OR_UNION_5 ) <S2SV_ModStart> ( STRUCT_OR_UNION_5 ) ) return 0 ; if ( VAR_1 -> VAR_2 & VAR_3 <S2SV_ModStart> ; if ( METHOD_1 ( STRUCT_OR_UNION_5 ) ) return 2 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_45 ) ; if ( ! METHOD_20 ( METHOD_19 ( VAR_20 , VAR_46 ) ) ) METHOD_15 ( VAR_39 , "key<S2SV_blank>not<S2SV_blank>set" ) ;
<S2SV_ModStart> ; VAR_56 = METHOD_6 <S2SV_ModEnd> ( VAR_61 ->
<S2SV_ModStart> TYPE_9 VAR_63 ; TYPE_12 VAR_126 ; TYPE_9 <S2SV_ModEnd> VAR_35 , VAR_78 <S2SV_ModStart> + 64 , "LEN=%9u" <S2SV_ModEnd> , & VAR_126 <S2SV_ModStart> VAR_148 ; } if ( VAR_126 > VAR_150 ) { * VAR_145 = VAR_146 ; * VAR_147 = METHOD_17 ( "toshiba:<S2SV_blank>File<S2SV_blank>has<S2SV_blank>%u-byte<S2SV_blank>packet,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>maximum<S2SV_blank>of<S2SV_blank>%u" , VAR_126 , VAR_150 ) ; return VAR_148 ; } <S2SV_ModStart> ( VAR_123 , VAR_126 <S2SV_ModEnd> ) ; VAR_143
<S2SV_ModStart> ; TYPE_10 VAR_112 <S2SV_ModEnd> ; METHOD_13 (
<S2SV_ModStart> * VAR_90 ; TYPE_16 <S2SV_ModEnd> VAR_87 = METHOD_5 <S2SV_ModStart> ( 128 , 2 * ( TYPE_16 ) <S2SV_ModStart> VAR_134 -> VAR_86 <S2SV_ModEnd> ) ; while
<S2SV_ModStart> VAR_14 , const TYPE_6 <S2SV_ModEnd> * VAR_11 ,
<S2SV_ModStart> ] . VAR_12 ; TYPE_6 VAR_129 <S2SV_ModStart> ) ) ; VAR_129 = METHOD_27 ( VAR_34 -> VAR_35 , VAR_34 -> VAR_35 -> VAR_130 . VAR_131 ) ; if ( VAR_59 >= VAR_129 ) { METHOD_28 ( VAR_34 -> VAR_35 , "%s:<S2SV_blank>Block<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range:<S2SV_blank>block<S2SV_blank>0x%llx,<S2SV_blank>EOFS<S2SV_blank>0x%llx<S2SV_blank>" , VAR_132 , VAR_59 , VAR_129 ) ; return VAR_123 ; }
<S2SV_ModStart> VAR_30 ) ; VAR_80 = METHOD_6 ( VAR_59 , VAR_30 ) ; <S2SV_ModStart> METHOD_5 ( VAR_59 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> { VAR_29 = METHOD_8 ( <S2SV_ModStart> 1 , 50 )
<S2SV_ModStart> struct STRUCT_OR_UNION_5 * VAR_65 ; TYPE_2 VAR_93 = 0 ; TYPE_2 VAR_87 = METHOD_3 ( VAR_85 ) ; TYPE_3 VAR_67 = 0 ; if ( VAR_91 -> VAR_92 == VAR_94 ) return METHOD_17 ( VAR_85 ) ; <S2SV_ModStart> . VAR_12 ; <S2SV_ModEnd> if ( (
<S2SV_ModStart> return - VAR_21 ; if ( ! METHOD_5 ( & VAR_29 ) ) return - VAR_26
<S2SV_ModStart> ) ) ; METHOD_23 ( VAR_90 -> VAR_55 ) ;
<S2SV_ModStart> VAR_33 ; TYPE_4 * VAR_29 ; VAR_29 = METHOD_8 ( 8 , VAR_34 ) ; if ( ! VAR_29 ) return - VAR_35 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> VAR_22 ) ; VAR_22 = - VAR_30 ; goto VAR_36 <S2SV_ModEnd> ; } VAR_33 <S2SV_ModStart> ] ) ; VAR_22 = <S2SV_ModEnd> - VAR_30 ; <S2SV_ModStart> - VAR_30 ; goto VAR_36 ; } VAR_22 = METHOD_7 ( VAR_31 , VAR_32 , "%d\\n" , VAR_33 ) ; VAR_36 : METHOD_9 ( VAR_29 ) ; return VAR_22 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_7 ) { unsigned TYPE_1 VAR_19 = VAR_12 ; <S2SV_ModStart> VAR_3 ) { VAR_19 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> } if ( VAR_19 >= VAR_11 <S2SV_ModEnd> ) { METHOD_2 <S2SV_ModStart> return ; } VAR_12 = VAR_19 ;
<S2SV_ModStart> -> VAR_9 ; METHOD_4 ( VAR_8 ) ;
<S2SV_ModStart> -> VAR_36 ; TYPE_1 VAR_49 = STRUCT_OR_UNION_5 -> VAR_39 ; <S2SV_ModStart> = VAR_36 ; if ( VAR_49 + VAR_58 -> VAR_49 > VAR_58 -> VAR_60 ) { METHOD_10 ( VAR_61 , & VAR_58 -> VAR_57 ) ; } else { if ( ! METHOD_12 ( VAR_61 , & VAR_58 -> VAR_57 ) ) { <S2SV_ModEnd> METHOD_8 ( VAR_58 <S2SV_ModStart> -> VAR_45 , VAR_49 ) ; VAR_58 -> VAR_49 += VAR_49 ; <S2SV_ModStart> VAR_58 -> VAR_51 = VAR_49 ; } } <S2SV_ModEnd> VAR_52 : METHOD_9
<S2SV_ModStart> -> VAR_36 += <S2SV_ModEnd> VAR_41 -> METHOD_4
<S2SV_ModStart> 8 ) ; if ( VAR_412 -> VAR_299 + VAR_412 -> VAR_301 > VAR_371 ) { METHOD_56 ( VAR_418 , VAR_419 , "Block<S2SV_blank>parameters<S2SV_blank>invalid\\n" ) ; return VAR_332 ; }
<S2SV_ModStart> TYPE_5 VAR_40 ; struct STRUCT_OR_UNION_0 VAR_46 = * VAR_42 ; <S2SV_ModStart> VAR_23 ) ; if ( ! METHOD_18 ( VAR_42 ) ) { METHOD_19 ( "rdpdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>g_client_id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>did<S2SV_blank>overrun" , & VAR_46 ) ; }
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_6 <S2SV_ModEnd> * VAR_28 = <S2SV_ModStart> * VAR_28 = if_mii ( VAR_7 ) <S2SV_ModEnd> ; VAR_25 = <S2SV_ModStart> ) { case VAR_69 : VAR_28 -> VAR_70 = VAR_25 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case VAR_71 <S2SV_ModEnd> : VAR_28 -> <S2SV_ModStart> : VAR_28 -> val_out <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> break ; case VAR_72 : if ( ! METHOD_16 ( VAR_73 ) ) return - VAR_74 ; <S2SV_ModEnd> METHOD_3 ( VAR_37 <S2SV_ModStart> , VAR_28 -> VAR_75 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ; if ( VAR_217 -> VAR_227 >= 10 ) return VAR_28 ; else VAR_217 -> VAR_227 ++ ; if ( <S2SV_ModStart> ( "%08" PRIX64 "<S2SV_blank>%.4s<S2SV_blank>stack<S2SV_blank>%d\\n" <S2SV_ModEnd> , ( TYPE_6 <S2SV_ModStart> 4 , VAR_31 , VAR_217 -> VAR_227 <S2SV_ModStart> 0 ) ; VAR_217 -> VAR_227 -- ;
<S2SV_ModStart> 3 ; } if ( VAR_115 == VAR_45 ) VAR_115 = "" ;
<S2SV_ModStart> * VAR_50 , TYPE_9 <S2SV_ModEnd> VAR_11 ) { <S2SV_ModStart> * VAR_57 ; TYPE_9 <S2SV_ModEnd> VAR_37 = VAR_7 <S2SV_ModStart> = VAR_7 ; TYPE_9 <S2SV_ModEnd> VAR_48 ; METHOD_3 <S2SV_ModStart> 0 ) ; if ( VAR_11 > VAR_62 ) { METHOD_5 ( ) ; return - 1 ; } <S2SV_ModStart> VAR_37 < VAR_11 ) { VAR_37 <<= <S2SV_ModEnd> 1 ; }
<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> TYPE_12 VAR_68 ; <S2SV_ModStart> '\\0' ; } VAR_72 = METHOD_20 ( VAR_87 , VAR_83 , VAR_68 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { if ( VAR_105 == VAR_85 ) { <S2SV_ModEnd> METHOD_18 ( VAR_82 <S2SV_ModStart> ( VAR_82 , "error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>" "(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)" , VAR_83 ) ; } <S2SV_ModEnd> VAR_105 = VAR_85
<S2SV_ModStart> TYPE_2 ) { VAR_1 . VAR_2 ++ ; VAR_1 . VAR_3 ++ ;
<S2SV_ModStart> VAR_5 ) ; if ( ! METHOD_5 <S2SV_ModEnd> ( VAR_6 , <S2SV_ModStart> , VAR_13 ) ) { <S2SV_ModEnd> VAR_14 = METHOD_3 <S2SV_ModStart> VAR_11 ) ; } else { VAR_14 = VAR_5 ; }
<S2SV_ModStart> |= 0x01 ; if ( VAR_159 -> VAR_111 == 1 ) { VAR_159 -> VAR_92 = 1 ; VAR_159 -> VAR_95 [ 0 ] = 128 ; VAR_159 -> VAR_98 [ 0 ] = 128 ; } else { <S2SV_ModStart> = 256 ; }
<S2SV_ModStart> = - VAR_10 ; VAR_53 -> VAR_68 = 0
<S2SV_ModStart> = VAR_104 ; METHOD_18 ( & VAR_104 -> VAR_102 , VAR_103 ) ; <S2SV_ModStart> ) ; goto VAR_94 <S2SV_ModEnd> ; } else <S2SV_ModStart> VAR_89 ; } <S2SV_ModEnd> return VAR_106 ; <S2SV_ModStart> VAR_103 ) ; <S2SV_ModEnd> VAR_104 -> VAR_100
<S2SV_ModStart> struct STRUCT_OR_UNION_1 * VAR_43 = <S2SV_ModEnd> VAR_2 ; if <S2SV_ModStart> ; if ( ! VAR_43 ) return ; if ( -- VAR_43 -> refcnt > 0 ) return ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_7 ) <S2SV_ModStart> VAR_7 ) ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_11 ) <S2SV_ModStart> VAR_11 ) ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_15 ) <S2SV_ModStart> VAR_15 ) ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_19 ) <S2SV_ModStart> ; if ( VAR_43 <S2SV_ModEnd> -> VAR_27 && <S2SV_ModStart> -> VAR_27 && VAR_43 <S2SV_ModEnd> -> VAR_29 ) <S2SV_ModStart> { METHOD_9 ( VAR_43 <S2SV_ModEnd> -> VAR_29 , <S2SV_ModStart> -> VAR_29 , VAR_43 <S2SV_ModEnd> -> VAR_27 ) <S2SV_ModStart> ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_29 ) <S2SV_ModStart> } if ( VAR_43 <S2SV_ModEnd> -> VAR_37 && <S2SV_ModStart> -> VAR_37 && VAR_43 <S2SV_ModEnd> -> VAR_39 ) <S2SV_ModStart> { METHOD_9 ( VAR_43 <S2SV_ModEnd> -> VAR_39 , <S2SV_ModStart> -> VAR_39 , VAR_43 <S2SV_ModEnd> -> VAR_37 ) <S2SV_ModStart> ; METHOD_10 ( VAR_43 <S2SV_ModEnd> -> VAR_39 ) <S2SV_ModStart> ) ; } METHOD_10 ( VAR_43 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_11 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_9 * const VAR_14 <S2SV_ModEnd> , TYPE_15 VAR_76 <S2SV_ModStart> ) { const <S2SV_ModEnd> TYPE_10 * const <S2SV_ModStart> VAR_64 ) { METHOD_5 <S2SV_ModEnd> ( VAR_33 + <S2SV_ModStart> VAR_48 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_49 + <S2SV_ModStart> ) ; } METHOD_5 <S2SV_ModEnd> ( VAR_66 , <S2SV_ModStart> VAR_72 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_73 ,
<S2SV_ModStart> ; TYPE_14 VAR_251 ; TYPE_20 VAR_257 <S2SV_ModStart> VAR_129 > VAR_118 / 2 / sizeof ( * VAR_253 -> VAR_166 ) - 8 <S2SV_ModStart> -> VAR_254 ; VAR_257 = 2LL * METHOD_23 ( VAR_251 , 8 ) * sizeof ( * VAR_253 -> VAR_166 ) ; METHOD_1 ( VAR_257 <= VAR_118 ) ; <S2SV_ModStart> -> VAR_158 , VAR_257 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_313 , VAR_295 , VAR_257 , VAR_289 <S2SV_ModStart> ] ; } <S2SV_ModEnd> VAR_257 = METHOD_37 <S2SV_ModStart> 0 ) ; VAR_289 = <S2SV_ModEnd> VAR_508 -> VAR_509 <S2SV_ModStart> VAR_509 > 0 ? METHOD_37 ( VAR_479 , VAR_515 , 0 ) : <S2SV_ModEnd> VAR_508 -> VAR_485 <S2SV_ModStart> VAR_485 -> VAR_289 ; VAR_112 = METHOD_11 ( VAR_479 , VAR_515 ) ; VAR_311 <S2SV_ModStart> 0 ) ; VAR_313 = METHOD_37 ( VAR_479 , VAR_515 , 0 ) ; VAR_295 <S2SV_ModEnd> = METHOD_11 ( <S2SV_ModStart> VAR_515 ) ; <S2SV_ModEnd> if ( VAR_508 <S2SV_ModStart> { if ( VAR_257 != VAR_508 -> VAR_257 || VAR_289 != VAR_508 -> VAR_485 -> VAR_289 || <S2SV_ModStart> ; } } VAR_508 -> VAR_257 = VAR_257 ; VAR_508 -> VAR_485 -> VAR_289 = VAR_289 ;
<S2SV_ModStart> ; VAR_472 : if ( ! VAR_604 -> VAR_238 )
<S2SV_ModStart> VAR_25 ) ; METHOD_17 ( VAR_81 ) ;
<S2SV_ModStart> -> VAR_25 = ( ( TYPE_8 * ) VAR_72 ) -> VAR_25 <S2SV_ModEnd> ; break ; <S2SV_ModStart> case VAR_23 : if ( <S2SV_ModStart> TYPE_9 * ) VAR_72 ) -> VAR_25 != VAR_52 ) { ( ( TYPE_9 * ) VAR_80 ) -> VAR_25 = METHOD_16 ( ( ( TYPE_9 * ) VAR_72 ) -> VAR_25 ) ; } else { ( ( TYPE_9 * ) VAR_80 ) -> VAR_25 = VAR_52 ; } break ; case VAR_82 : ( ( TYPE_17 * ) VAR_80 ) -> VAR_25 = ( ( TYPE_17 * ) VAR_72 ) -> VAR_25 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> ! METHOD_1 ( <S2SV_ModEnd> VAR_42 ) )
<S2SV_ModStart> -> VAR_10 ; <S2SV_ModEnd> TYPE_4 VAR_54 ; <S2SV_ModStart> TYPE_4 VAR_54 ; mutex_lock <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; VAR_54 <S2SV_ModStart> VAR_49 ; } METHOD_10 <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; METHOD_8 <S2SV_ModStart> ; VAR_49 : METHOD_10 <S2SV_ModEnd> ( & VAR_50 <S2SV_ModStart> VAR_50 -> VAR_51 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_6 ) ; struct STRUCT_OR_UNION_9 * VAR_18 = METHOD_8 ( STRUCT_OR_UNION_8 ) ; <S2SV_ModStart> VAR_11 ) ; METHOD_9 ( VAR_18 <S2SV_ModEnd> , ( VAR_16
<S2SV_ModStart> VAR_72 ) ; METHOD_6 ( & VAR_72 -> VAR_65 ) ; <S2SV_ModStart> VAR_71 ; } VAR_43 = STRUCT_OR_UNION_5 ( VAR_72 ) ; if ( VAR_43 -> VAR_36 != sizeof ( struct STRUCT_OR_UNION_7 ) ) { VAR_73 = - VAR_38 ; goto VAR_71 ; } VAR_61 = ( struct STRUCT_OR_UNION_7 * ) VAR_43 -> VAR_44 ; METHOD_8 ( VAR_45 != VAR_46 ) ; if ( VAR_61 -> VAR_52 != VAR_49 ) { printk_once ( KERN_WARNING "%s:<S2SV_blank>key<S2SV_blank>size<S2SV_blank>incorrect:<S2SV_blank>%d\\n" , VAR_50 , VAR_61 -> VAR_52 ) ; VAR_73 = - VAR_54 ; goto VAR_71 ; } VAR_73 = METHOD_10 ( VAR_59 -> VAR_60 , VAR_61 -> VAR_62 , VAR_63 ) ; VAR_71 : METHOD_11 <S2SV_ModEnd> ( & VAR_72 <S2SV_ModStart> VAR_65 ) ; METHOD_12 ( VAR_72 ) ; return <S2SV_ModEnd> VAR_73 ; }
<S2SV_ModStart> = 16 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_17 VAR_102 ; TYPE_17 VAR_223 ; <S2SV_ModStart> VAR_222 ) ; VAR_223 = METHOD_34 ( ( TYPE_23 * ) VAR_32 , METHOD_20 ( VAR_32 ) + 1 ) ; if ( ! METHOD_35 ( VAR_119 , VAR_223 <S2SV_ModEnd> ) ) { <S2SV_ModStart> if ( VAR_51 != VAR_221 && ! VAR_192 ) { VAR_223 = METHOD_34 ( VAR_51 , METHOD_20 ( VAR_51 ) + 1 ) ; if ( ! METHOD_35 ( VAR_119 , VAR_223 ) <S2SV_ModEnd> ) { VAR_192
<S2SV_ModStart> VAR_40 = VAR_34 + ( VAR_41 -> VAR_42 - VAR_28 )
<S2SV_ModStart> unsigned TYPE_3 TYPE_7 ; if ( VAR_20 > VAR_33 ) return VAR_32
<S2SV_ModStart> ( VAR_93 -> VAR_11 ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> { if ( VAR_93 -> VAR_92 + ( VAR_80 >> 3 ) > VAR_93 -> VAR_7 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; } if ( <S2SV_ModStart> & 7 ; if ( VAR_93 -> VAR_94 + VAR_76 > VAR_93 -> VAR_7 << 3 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; } <S2SV_ModStart> VAR_93 -> VAR_94 , VAR_93 -> VAR_7 << 3 <S2SV_ModStart> 8 ) ; if ( VAR_93 -> VAR_94 > VAR_93 -> VAR_7 << 3 ) { VAR_93 -> VAR_11 = VAR_12 ; return ; }
<S2SV_ModStart> { if ( METHOD_3 ( VAR_13 ) ) continue ; if (
<S2SV_ModStart> TYPE_40 METHOD_0 ( TYPE_6 * TYPE_111 <S2SV_ModEnd> , TYPE_47 TYPE_3 <S2SV_ModStart> VAR_4 * VAR_187 <S2SV_ModEnd> ; TYPE_52 * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( VAR_187 = <S2SV_ModStart> - VAR_32 ; <S2SV_ModEnd> METHOD_9 ( TYPE_111 <S2SV_ModStart> TYPE_40 ) VAR_92 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> = 0 ; METHOD_3 ( VAR_14 ) ; METHOD_4 ( VAR_12 ) ; <S2SV_ModStart> VAR_12 = VAR_12 ; VAR_14 -> VAR_15 = VAR_16
<S2SV_ModStart> "`%s\'" , VAR_675 ) ; VAR_568 = METHOD_126 ( VAR_568
<S2SV_ModStart> { if ( ( VAR_122 -> VAR_109 [ VAR_85 ] + VAR_116 <= VAR_122 -> VAR_115 ) && <S2SV_ModStart> ) if ( ( VAR_122 -> VAR_109 [ VAR_85 ] + VAR_116 <= VAR_122 -> VAR_115 ) &&
<S2SV_ModStart> ; METHOD_15 ( <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ; METHOD_15 ( <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ; METHOD_15 ( <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> ; METHOD_15 ( <S2SV_ModEnd> 1 ) ;
<S2SV_ModStart> ( VAR_24 ) ; TYPE_1 VAR_32 <S2SV_ModStart> -> VAR_29 < VAR_33 <S2SV_ModEnd> ) { METHOD_2 <S2SV_ModStart> -> VAR_24 , "RX<S2SV_blank>queues<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>smaller<S2SV_blank>than<S2SV_blank>%u\\n" , VAR_33 <S2SV_ModEnd> ) ; return <S2SV_ModStart> VAR_26 ; } VAR_32 = METHOD_5 ( VAR_30 -> VAR_31 , METHOD_4 ( VAR_27 ) ) ; if ( VAR_32 != VAR_30 -> VAR_31 ) METHOD_6 ( VAR_27 , VAR_22 , VAR_27 -> VAR_24 , "increasing<S2SV_blank>TX<S2SV_blank>queue<S2SV_blank>size<S2SV_blank>to<S2SV_blank>minimum<S2SV_blank>of<S2SV_blank>%u\\n" , VAR_32 ) ; <S2SV_ModStart> -> VAR_29 , VAR_32 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> . VAR_7 , VAR_9 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_112 < 1 || VAR_118 -> VAR_112 > VAR_282
<S2SV_ModStart> VAR_14 > VAR_11 || VAR_14 < METHOD_8 ( VAR_36 )
<S2SV_ModStart> -> VAR_749 = 1 <S2SV_ModEnd> ; VAR_774 -> <S2SV_ModStart> ( VAR_654 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_4 , TYPE_1 VAR_6 <S2SV_ModStart> ( VAR_4 , ! VAR_6 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> , VAR_15 ) ; if ( METHOD_8 ( METHOD_7 ( METHOD_6 ( ) , VAR_29 ) ) ) return - VAR_30
<S2SV_ModStart> ; if ( VAR_65 -> VAR_42 & VAR_77 ) return VAR_78 ; if (
<S2SV_ModStart> ( ! VAR_71 || ! VAR_71 -> VAR_38
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> -> VAR_4 ; if ( VAR_6 -> VAR_6 > VAR_7 / 2 ) return VAR_8 ; <S2SV_ModStart> VAR_6 ++ ; return VAR_9 ;
<S2SV_ModStart> VAR_446 ) ; if ( <S2SV_ModEnd> ( VAR_612 > <S2SV_ModStart> > VAR_381 ) && <S2SV_ModEnd> VAR_275 && ( <S2SV_ModStart> VAR_275 && ( VAR_613 -> VAR_274 <S2SV_ModEnd> == VAR_286 || <S2SV_ModStart> == VAR_286 || VAR_613 -> VAR_274 <S2SV_ModEnd> == VAR_279 ) <S2SV_ModStart> VAR_551 ; } VAR_596 = METHOD_22 ( & VAR_613 -> VAR_507 ) ; VAR_610 -> VAR_612 += VAR_612 ; if ( ( ( VAR_612 > VAR_381 ) || ( VAR_596 && METHOD_57 ( VAR_596 ) ) ) && ( VAR_613 -> VAR_274 == VAR_286 ) <S2SV_ModEnd> && ( VAR_614 <S2SV_ModStart> 0 ; } if ( ! VAR_596 <S2SV_ModEnd> ) goto VAR_333
<S2SV_ModStart> } if ( METHOD_109 ( VAR_785 ) != VAR_781 ) METHOD_96 ( VAR_749 , "ImproperImageHeader" ) ; if (
<S2SV_ModStart> VAR_4 ) { switch ( VAR_4 -> VAR_5 ) { case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : if ( METHOD_2 ( VAR_4 -> VAR_11 ) ) return 1 ; break ; case VAR_12 : case VAR_13 : VAR_4 -> VAR_11 = METHOD_3 ( VAR_4 -> VAR_11 ) ; }
<S2SV_ModStart> TYPE_5 VAR_33 [ 1024 <S2SV_ModEnd> ] ; METHOD_1 <S2SV_ModStart> ( VAR_34 , "%*x-%*x<S2SV_blank>%*s<S2SV_blank>%zx<S2SV_blank>%5s<S2SV_blank>%ld<S2SV_blank>%1023s\\n" <S2SV_ModEnd> , & VAR_31
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> TYPE_3 * VAR_9 <S2SV_ModStart> * VAR_9 ; if ( ! ( <S2SV_ModStart> ( VAR_4 ) ) ) return 0 ; const TYPE_3 * VAR_11 = <S2SV_ModEnd> METHOD_2 ( VAR_9 <S2SV_ModStart> , "%PDF-" ) ; const TYPE_2 VAR_10 = VAR_11 && ( ( VAR_11 - VAR_9 + METHOD_4 ( "%PDF-M.m" ) ) < 1024 ) <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> TYPE_7 VAR_32 = METHOD_5 <S2SV_ModEnd> ( VAR_31 ,
<S2SV_ModStart> ) VAR_4 ; const TYPE_2 VAR_14 = VAR_15 ; <S2SV_ModStart> , "archive_write_data" ) ; if ( VAR_13 > VAR_14 ) VAR_13 = VAR_14
<S2SV_ModStart> VAR_29 : case VAR_51 : case
<S2SV_ModStart> ; if ( ! VAR_143 ) return VAR_151 ; if (
<S2SV_ModStart> if ( ( ( <S2SV_ModStart> != 0x8009 ) && ( ( VAR_38 >> 16 ) != 0x800B ) ) <S2SV_ModStart> : return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; case VAR_40 : return "The<S2SV_blank>root<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>not<S2SV_blank>trusted." ; case VAR_41 : return "Not<S2SV_blank>digitally<S2SV_blank>signed." ; case VAR_42 : return "One<S2SV_blank>of<S2SV_blank>the<S2SV_blank>certificates<S2SV_blank>used<S2SV_blank>was<S2SV_blank>marked<S2SV_blank>as<S2SV_blank>untrusted<S2SV_blank>by<S2SV_blank>the<S2SV_blank>user."
<S2SV_ModStart> ( VAR_42 , <S2SV_ModEnd> & VAR_40 ,
<S2SV_ModStart> - 1 ; METHOD_2 ( VAR_61 -> VAR_62 [ VAR_63 ] . VAR_48 , 0 , VAR_42 ) ;
<S2SV_ModStart> VAR_66 = VAR_35 <S2SV_ModEnd> ; VAR_98 -> <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_14 ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" <S2SV_ModStart> ( VAR_100 ) ; VAR_98 -> VAR_87 = & VAR_35 -> VAR_87
<S2SV_ModStart> ( VAR_1 , VAR_3 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> { METHOD_23 ( VAR_101 <S2SV_ModEnd> , VAR_21 )
<S2SV_ModStart> -> VAR_264 = 00 ; if ( VAR_220 <= ( VAR_281 / ( VAR_277 -> VAR_102 + 1U ) ) ) { VAR_265 -> VAR_264 = <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> METHOD_37 ( VAR_136 <S2SV_ModStart> , VAR_135 ) != VAR_136 ) break
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_16 -> VAR_47 == VAR_48 <S2SV_ModEnd> ) { VAR_46 <S2SV_ModStart> VAR_18 ) ; METHOD_16 ( STRUCT_OR_UNION_16 , 0 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> { const TYPE_5 VAR_25 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> >> VAR_5 ; <S2SV_ModEnd> * VAR_21 = <S2SV_ModStart> * VAR_21 = get_min_log2_tile_cols ( VAR_25 ) <S2SV_ModEnd> ; * VAR_23 <S2SV_ModStart> * VAR_23 = METHOD_3 ( VAR_25 ) ; METHOD_2 ( * VAR_21 <= * VAR_23 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> - VAR_144 ; VAR_218 = METHOD_29 ( STRUCT_OR_UNION_13 , VAR_217 , VAR_205 ) ; if ( VAR_218 ) goto VAR_216 ;
<S2SV_ModStart> TYPE_1 VAR_26 ; unsigned TYPE_2 VAR_32 <S2SV_ModEnd> ; VAR_26 = <S2SV_ModStart> VAR_28 , & VAR_32 <S2SV_ModEnd> , VAR_28 -> <S2SV_ModStart> VAR_28 -> VAR_23 ) ; if ( VAR_26 != VAR_31 ) return VAR_26 ; VAR_26 = METHOD_3 ( VAR_28 , VAR_32
<S2SV_ModStart> -> VAR_10 ; METHOD_4 ( VAR_9 ) ;
<S2SV_ModStart> TYPE_25 = VAR_8 ; if ( METHOD_7 ( ! METHOD_6 ( VAR_55 , TYPE_21 , TYPE_25 ) ) ) return - VAR_56
<S2SV_ModStart> VAR_68 >= 0 && METHOD_48 ( VAR_133 -> VAR_72 , VAR_108 ) == ( TYPE_8 * ) VAR_137
<S2SV_ModStart> = VAR_58 -> VAR_49 . VAR_59 <S2SV_ModEnd> / 512 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_8 ( VAR_44
<S2SV_ModStart> VAR_157 , VAR_157 , VAR_243 <S2SV_ModStart> VAR_157 , VAR_157 , VAR_243
<S2SV_ModStart> VAR_14 > VAR_11 || VAR_14 < METHOD_8 ( VAR_36 )
<S2SV_ModStart> VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 = VAR_1 ; METHOD_1 ( VAR_2 -> VAR_3 ) ; METHOD_2 ( VAR_2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_9 * const VAR_14 <S2SV_ModEnd> , TYPE_15 VAR_75 <S2SV_ModStart> VAR_28 ) { <S2SV_ModEnd> TYPE_10 * const <S2SV_ModStart> ++ ) { METHOD_5 <S2SV_ModEnd> ( VAR_78 -> <S2SV_ModStart> VAR_48 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_78 -> <S2SV_ModStart> ) ; } METHOD_5 <S2SV_ModEnd> ( VAR_78 -> <S2SV_ModStart> VAR_72 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_78 ->
<S2SV_ModStart> ( VAR_336 [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> VAR_315 ) { METHOD_102 ( ( VAR_339 , "<S2SV_blank><%s>" , METHOD_62 ( VAR_163 , VAR_331 , METHOD_100 ( & VAR_336 [ 3 ] <S2SV_ModEnd> ) ) )
<S2SV_ModStart> VAR_63 , VAR_59 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> endif if ( TYPE_113 -> VAR_16 == VAR_17 ) return ; if (
<S2SV_ModStart> ) ) ; VAR_28 -> VAR_37 = 0 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> VAR_21 ) { if <S2SV_ModEnd> ( VAR_21 -> <S2SV_ModStart> VAR_22 . VAR_3 <= 0 ) { METHOD_6 ( "%s:<S2SV_blank>Invalid<S2SV_blank>intr<S2SV_blank>pin<S2SV_blank>on<S2SV_blank>dev<S2SV_blank>[%s]\\n" , VAR_24 , VAR_21 -> VAR_25 ) ; return ; } <S2SV_ModEnd> METHOD_2 ( &
<S2SV_ModStart> "`%s\'" , VAR_665 ) ; VAR_557 = METHOD_126 ( VAR_557
<S2SV_ModStart> ( VAR_106 , "who-has<S2SV_blank>" ) ) ; METHOD_68 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_106 , "<S2SV_blank>tell<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_65 : METHOD_69 ( VAR_106 , VAR_100 , VAR_38 ) ; METHOD_67 ( ( VAR_106 , "<S2SV_blank>is-at<S2SV_blank>" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_106 , "at<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( VAR_106 , "for<S2SV_blank>" ) ) ; METHOD_69 ( VAR_106 , VAR_100 , VAR_38 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> VAR_402 -> VAR_368 && METHOD_83 ( VAR_402 -> VAR_391 , VAR_386 - VAR_387 ) <S2SV_ModStart> - VAR_387 ; if ( METHOD_83 ( VAR_402 -> VAR_391 , VAR_448 ) ) { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> * VAR_9 , <S2SV_ModEnd> const TYPE_4 * <S2SV_ModStart> const TYPE_4 * VAR_19 ) { const <S2SV_ModEnd> TYPE_4 * VAR_16 <S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_36 ) ; METHOD_18 ( <S2SV_ModStart> METHOD_8 ( VAR_36 )
<S2SV_ModStart> * VAR_71 ; struct STRUCT_OR_UNION_5 VAR_65 ; <S2SV_ModStart> VAR_33 ) { <S2SV_ModEnd> VAR_71 = METHOD_2 <S2SV_ModStart> ; VAR_71 -> VAR_53 = 0 ; METHOD_11 ( & VAR_70 -> VAR_68 , VAR_71 ) ; } else if ( METHOD_13 ( VAR_71 ) ) { goto VAR_76 ; } VAR_71 -> <S2SV_ModStart> VAR_50 = VAR_51 <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> . VAR_66 ; VAR_76 : <S2SV_ModEnd> return METHOD_12 (
<S2SV_ModStart> METHOD_312 METHOD_312 ; METHOD_275 <S2SV_ModEnd> ( VAR_370 -> <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> METHOD_312 ; if <S2SV_ModStart> 1 ] & 0xc0 METHOD_312 METHOD_310 ( ( VAR_385 , "<S2SV_blank>" <S2SV_ModEnd> METHOD_312 METHOD_312 ; <S2SV_ModStart> 1 ] & 0x80 METHOD_312 METHOD_310 ( ( VAR_385 , "M" METHOD_312 METHOD_312 ; if ( VAR_370 -> VAR_359 [ 1 ] &
<S2SV_ModStart> VAR_9 * VAR_86 ; TYPE_10 * VAR_78 ; TYPE_11 VAR_64 <S2SV_ModStart> = VAR_89 ; VAR_64 = VAR_55 + 1U ; if ( ( VAR_78 = METHOD_13 ( VAR_64 ) ) == VAR_91 ) { goto VAR_87 ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( METHOD_14 <S2SV_ModStart> ; VAR_77 : <S2SV_ModEnd> if ( VAR_79 <S2SV_ModStart> } VAR_87 : METHOD_21 ( VAR_78 ) ;
<S2SV_ModStart> ; if ( METHOD_21 ( "HASHSEED" ) ) METHOD_22 ( METHOD_10 ( "HASHSEED" ) ) ; if (
<S2SV_ModStart> = 0 ; TYPE_5 VAR_23 = 0 ; <S2SV_ModStart> ( ! VAR_14 || ! VAR_16 || ! VAR_18 ) METHOD_4 ( VAR_20 ) ; VAR_17 = * VAR_18 ; if ( VAR_17 < 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_3 ( & <S2SV_ModStart> -> VAR_15 , <S2SV_ModEnd> VAR_16 , VAR_17 <S2SV_ModStart> , VAR_17 , & VAR_23 <S2SV_ModEnd> ) != VAR_19 <S2SV_ModStart> ) ; } if ( VAR_23 > sizeof ( struct STRUCT_OR_UNION_2 ) ) METHOD_4 ( VAR_20 ) ; if ( VAR_17 >= VAR_23 ) * VAR_18 = VAR_23 ;
<S2SV_ModStart> ) ) { TYPE_10 <S2SV_ModEnd> VAR_43 = ( <S2SV_ModStart> ( * ( TYPE_10 <S2SV_ModEnd> * ) VAR_58 <S2SV_ModStart> case VAR_44 : if ( ! METHOD_11 ( ) ) return - VAR_54 ; break ; <S2SV_ModStart> case VAR_49 : if ( ! METHOD_12 ( VAR_6 ) ) return - VAR_54 ; break ; <S2SV_ModStart> case VAR_52 : if ( METHOD_12 ( VAR_6 ) ) return - VAR_54 ;
<S2SV_ModStart> "failed<S2SV_blank>to<S2SV_blank>enable<S2SV_blank>clock\\n" ) ; goto VAR_213 <S2SV_ModEnd> ; } VAR_192
<S2SV_ModStart> = 0 ; if ( METHOD_9 ( VAR_44 ) ) return - VAR_24 ; <S2SV_ModStart> - VAR_31 ; <S2SV_ModEnd> for ( VAR_42 <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return VAR_43 ;
<S2SV_ModStart> ) { register <S2SV_ModEnd> TYPE_6 VAR_16 ; <S2SV_ModStart> TYPE_6 VAR_16 ; <S2SV_ModEnd> METHOD_44 ( VAR_89 <S2SV_ModStart> -> VAR_82 ) { if ( VAR_85 < 8 ) goto VAR_90 ; <S2SV_ModStart> 8 ) ; }
<S2SV_ModStart> != 0 ) { TYPE_2 VAR_20 = METHOD_5 ( VAR_13 ) + VAR_14 ; <S2SV_ModStart> ( VAR_19 , METHOD_6 ( VAR_13 , VAR_20 , <S2SV_ModEnd> VAR_15 , 0 <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> VAR_64 , TYPE_3 VAR_153 , TYPE_3 VAR_154 <S2SV_ModEnd> , TYPE_23 VAR_66 <S2SV_ModStart> ; TYPE_23 VAR_123 ; VAR_123 = VAR_66 & VAR_62 ? VAR_154 : VAR_153 <S2SV_ModEnd> ; VAR_144 =
<S2SV_ModStart> 2 ) ; METHOD_16 ( 256 , VAR_19 , "integer_array[%i]" , 256 ) ;
<S2SV_ModStart> ; VAR_41 = METHOD_10 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> TYPE_1 VAR_6 ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_6 ) ; STRUCT_OR_UNION_4 -> VAR_1 -= 1 ; if ( ! STRUCT_OR_UNION_4 -> VAR_1 ) <S2SV_ModStart> -> VAR_4 ) ; else STRUCT_OR_UNION_4 = VAR_7 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_699 ) ; ( TYPE_120 ) METHOD_135 ( VAR_573 , 0 , VAR_381 ) ;
<S2SV_ModStart> VAR_39 ; } if ( VAR_16 == VAR_40 ) return - VAR_37 ;
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 ) { <S2SV_ModStart> VAR_1 ) ; VAR_1 = VAR_2 ; } return ;
<S2SV_ModStart> , 1 ) ; METHOD_22 ( VAR_108 , VAR_109 > 0 , 3 , "offset<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ) ; VAR_109 -- <S2SV_ModEnd> ; TYPE_10 VAR_110 <S2SV_ModStart> ( VAR_108 , <S2SV_ModEnd> VAR_107 <= VAR_88 <S2SV_ModStart> VAR_107 <= VAR_88 && VAR_109 <= VAR_88 - VAR_107 , <S2SV_ModEnd> 2 , "data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short"
<S2SV_ModStart> ; if ( METHOD_10 ( <S2SV_ModStart> 1 , VAR_7 )
<S2SV_ModStart> -> VAR_447 = METHOD_124 ( 1 , <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ; if ( VAR_473 -> VAR_447 ) { if ( <S2SV_ModStart> "Cannot<S2SV_blank>parse<S2SV_blank>dyldinfo\\n" ) ; METHOD_125 <S2SV_ModEnd> ( VAR_473 -> <S2SV_ModStart> ; } } }
<S2SV_ModStart> = VAR_80 ; METHOD_24 ( VAR_78 , VAR_72 ) ;
<S2SV_ModStart> TYPE_4 * VAR_22 , TYPE_4 VAR_24 <S2SV_ModStart> VAR_9 ) { if ( VAR_23 >= VAR_24 ) { * VAR_19 = 0 ; * VAR_22 = VAR_24 + 1 ; return ; }
<S2SV_ModStart> ; if ( VAR_30 -> VAR_37 ||
<S2SV_ModStart> VAR_116 ) ; <S2SV_ModEnd> for ( VAR_121 <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( VAR_128
<S2SV_ModStart> ; VAR_379 -> VAR_492 = VAR_304 ; VAR_379 -> <S2SV_ModStart> ( VAR_489 , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:<S2SV_blank>safe\\n" <S2SV_ModEnd> , VAR_489 -> <S2SV_ModStart> VAR_489 -> VAR_464 , VAR_489 -> VAR_31 -> VAR_492 ? "<S2SV_blank>(speculative<S2SV_blank>execution)" : "" <S2SV_ModStart> ( VAR_489 , "\\nfrom<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%d%s:" <S2SV_ModEnd> , VAR_489 -> <S2SV_ModStart> VAR_489 -> VAR_464 , VAR_489 -> VAR_31 -> VAR_492 ? "<S2SV_blank>(speculative<S2SV_blank>execution)" : ""
<S2SV_ModStart> ( VAR_107 ) <S2SV_ModEnd> VAR_159 -> VAR_105 <S2SV_ModStart> VAR_165 ) ; if ( VAR_114 ) <S2SV_ModStart> VAR_165 ) ; <S2SV_ModEnd> if ( VAR_126
<S2SV_ModStart> ) goto VAR_76 <S2SV_ModEnd> ; VAR_75 = <S2SV_ModStart> ) ) ; * VAR_20 = sizeof ( * VAR_62 ) ;
<S2SV_ModStart> ( VAR_39 | VAR_42 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( VAR_41 | VAR_42 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> 0 ) { METHOD_13 ( & STRUCT_OR_UNION_13 -> VAR_60 ) ; METHOD_14 ( & VAR_58 -> VAR_59 ) ; METHOD_15 ( & STRUCT_OR_UNION_13 -> VAR_60 ) ; <S2SV_ModStart> METHOD_12 ( VAR_58 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_513 ; } METHOD_127 ( VAR_590 ) ; <S2SV_ModStart> |= VAR_550 ; METHOD_8 ( VAR_590 -> VAR_591 != VAR_583 ) ; METHOD_8 ( VAR_590 -> VAR_591 [ 0 ] == VAR_583 ) ; <S2SV_ModStart> VAR_595 ) ; METHOD_8 ( VAR_590 -> VAR_591 != VAR_583 ) ; METHOD_8 ( VAR_590 -> VAR_591 [ 0 ] == VAR_583 ) ;
<S2SV_ModStart> VAR_50 , VAR_39 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_1 * VAR_10 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> ! VAR_87 ) { VAR_134 -> VAR_133 = 0 ; <S2SV_ModStart> VAR_84 ) ; } <S2SV_ModStart> ! VAR_87 ) { VAR_134 -> VAR_135 = VAR_134 -> VAR_133 = 0 ; <S2SV_ModStart> VAR_84 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_32 <S2SV_ModEnd> ; TYPE_3 VAR_37 <S2SV_ModStart> - VAR_9 ; <S2SV_ModEnd> VAR_32 = METHOD_6 <S2SV_ModStart> = METHOD_6 ( <S2SV_ModEnd> VAR_19 ) ; <S2SV_ModStart> VAR_32 ) ) return <S2SV_ModEnd> METHOD_8 ( VAR_32 <S2SV_ModStart> METHOD_8 ( VAR_32 <S2SV_ModEnd> ) ; VAR_37 <S2SV_ModStart> if ( VAR_37 < 0 ) <S2SV_ModEnd> METHOD_11 ( VAR_32 <S2SV_ModStart> METHOD_11 ( VAR_32 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> const VAR_28 , TYPE_10 <S2SV_ModEnd> * VAR_53 , <S2SV_ModStart> * VAR_54 , const TYPE_5 * const <S2SV_ModEnd> VAR_55 , TYPE_7 <S2SV_ModStart> VAR_34 ) { const <S2SV_ModStart> & VAR_48 -> VAR_56 . <S2SV_ModStart> 0 ] ; VAR_48 -> VAR_56 . VAR_12 . VAR_57 = VAR_48 -> VAR_56 . VAR_12 . VAR_58 + ( VAR_29 * VAR_43 -> VAR_42 + VAR_34 ) ; <S2SV_ModStart> { METHOD_3 ( VAR_43 , VAR_45 <S2SV_ModEnd> , VAR_45 -> <S2SV_ModStart> VAR_54 , VAR_55 , VAR_43 -> VAR_59
<S2SV_ModStart> ; } } if ( VAR_70 < 0 ) { VAR_76 = - VAR_77 ; goto VAR_73 ; }
<S2SV_ModStart> VAR_27 . VAR_12 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> -> VAR_32 ; VAR_30 [ 3 ] = 0 ;
<S2SV_ModStart> TYPE_1 VAR_23 ; struct STRUCT_OR_UNION_4 * VAR_57 ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; VAR_57 = rcu_dereference ( VAR_28 -> VAR_57 ) ; <S2SV_ModStart> ; if ( VAR_57 && VAR_57 -> VAR_18 . VAR_15 ) VAR_23 = VAR_57 -> VAR_18 . VAR_19 ; METHOD_10 ( ) <S2SV_ModEnd> ; VAR_41 =
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_3 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> ) ) return VAR_18 ; * VAR_11 |= <S2SV_ModEnd> VAR_13 -> VAR_11 <S2SV_ModStart> VAR_11 & VAR_17 ; * VAR_16 |= VAR_13 -> VAR_16 & <S2SV_ModEnd> VAR_17 ; if <S2SV_ModStart> ; if ( * VAR_11 & * <S2SV_ModEnd> VAR_16 & VAR_17 <S2SV_ModStart> & VAR_17 ) return VAR_19 ; else return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_68 ; if ( ! VAR_70 -> VAR_53 || ! VAR_70 -> VAR_58 ) { METHOD_10 ( & VAR_70 -> VAR_61 , "required<S2SV_blank>endpoint<S2SV_blank>is<S2SV_blank>missing\\n" ) ; return - VAR_72 ; }
<S2SV_ModStart> VAR_116 , VAR_124 , <S2SV_ModEnd> VAR_213 ; TYPE_12 <S2SV_ModStart> ( VAR_231 , "%4d-%2d-%2d,%2d:%2d:%2d.%9d:<S2SV_blank>%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]" <S2SV_ModEnd> , & VAR_106 <S2SV_ModStart> ( VAR_231 , "%5s<S2SV_blank>(%127[A-Za-z0-9/:]),<S2SV_blank>Length:%9d,<S2SV_blank>Pro:%9d,<S2SV_blank>Off:%9d,<S2SV_blank>Pri:%9d,<S2SV_blank>RM:%9d,<S2SV_blank>Err:%9d<S2SV_blank>[%8x,<S2SV_blank>%8x]" <S2SV_ModEnd> , VAR_180 , <S2SV_ModStart> VAR_124 = 0 ; } if ( VAR_213 < 0 ) { * VAR_234 = VAR_235 ; * VAR_236 = METHOD_25 ( "cosine:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length" ) ; return VAR_237
<S2SV_ModStart> ; METHOD_1 ( * VAR_31 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ) ) ; if ( VAR_7 < 2 ) { METHOD_2 ( ( VAR_5 , "[|mlppp]" ) ) ; return ; } if ( ! METHOD_4 ( TYPE_7 ) ) { METHOD_2 ( ( VAR_5 , "[|mlppp]" ) ) ; return ; }
<S2SV_ModStart> VAR_11 ; return METHOD_2 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> if ( VAR_50 && VAR_57 == 0
<S2SV_ModStart> VAR_40 ) { if ( VAR_40 -> VAR_43 == VAR_44 ) VAR_40 -> VAR_38 . VAR_45 = VAR_40 -> VAR_46 ;
<S2SV_ModStart> VAR_70 & VAR_66 <S2SV_ModEnd> ; VAR_50 = <S2SV_ModStart> | VAR_73 ; if ( VAR_70 & VAR_89 ) VAR_79 |= VAR_90 ; <S2SV_ModStart> = VAR_70 & ( VAR_66 | VAR_89 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> "" ) ; if ( VAR_13 -> VAR_39 . VAR_40 == & VAR_41 ) return METHOD_17 ( - VAR_42 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_22 VAR_189 ; METHOD_10 ( & VAR_189 , 0 , sizeof ( VAR_189 ) ) ;
<S2SV_ModStart> TYPE_3 VAR_38 ; TYPE_4 VAR_39 = 0 ; if ( VAR_31 -> VAR_7 != VAR_36 -> VAR_31 . VAR_7 || VAR_31 -> VAR_12 != VAR_36 -> VAR_31 . VAR_12 ) { if ( VAR_31 -> VAR_17 > 1 || VAR_31 -> VAR_40 != VAR_41 <S2SV_ModEnd> ) METHOD_2 ( <S2SV_ModStart> "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) ; if ( ! METHOD_6 ( VAR_36 -> VAR_31 . VAR_7 , VAR_36 -> VAR_31 . VAR_12 , VAR_31 -> VAR_7 , VAR_31 -> VAR_12 ) || ( VAR_36 -> VAR_35 -> VAR_42 && ( TYPE_4 ) VAR_31 -> VAR_7 > VAR_36 -> VAR_35 -> VAR_42 ) || ( VAR_36 -> VAR_35 -> VAR_43 && ( TYPE_4 ) VAR_31 -> VAR_12 > VAR_36 -> VAR_35 -> VAR_43 ) ) VAR_39 = 1 ; } <S2SV_ModStart> VAR_33 ) ; VAR_39 |= VAR_36 -> VAR_35 -> VAR_44 . VAR_45 != VAR_36 -> VAR_37 . VAR_45 ; <S2SV_ModStart> ) ; } if ( VAR_39 ) VAR_36 -> VAR_46 |= VAR_47 ;
<S2SV_ModStart> VAR_99 ) ; if ( VAR_73 -> VAR_103 < 1 ) { METHOD_11 ( VAR_101 ) ; METHOD_11 ( VAR_62 ) ; return - VAR_63 ; }
<S2SV_ModStart> = VAR_66 ; <S2SV_ModEnd> VAR_67 = METHOD_4
<S2SV_ModStart> TYPE_2 VAR_67 ; unsigned TYPE_2 VAR_66 ; <S2SV_ModStart> -> VAR_66 ; VAR_66 = VAR_76 -> VAR_66 ; <S2SV_ModStart> ; VAR_67 < <S2SV_ModEnd> VAR_66 ; VAR_67
<S2SV_ModStart> ; TYPE_7 VAR_36 ; if ( METHOD_4 ( VAR_9 ) != 2 ) return VAR_40
<S2SV_ModStart> METHOD_6 ( * METHOD_52 <S2SV_ModEnd> ( VAR_120 ) <S2SV_ModStart> ( VAR_126 , "who-has<S2SV_blank>" ) ) ; METHOD_69 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_126 , "<S2SV_blank>tell<S2SV_blank>" ) ) ; METHOD_70 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_76 : METHOD_70 ( VAR_126 , VAR_120 , VAR_51 ) ; METHOD_68 ( ( VAR_126 , "<S2SV_blank>is-at<S2SV_blank>%s" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> ( VAR_126 , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> VAR_120 ) ) ) ) ; METHOD_69 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( VAR_126 , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> VAR_120 ) ) ) ) ; METHOD_70 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> VAR_633 ) ; if ( VAR_925 -> VAR_420 > VAR_926 ) METHOD_209 ( VAR_865 , "ImproperImageHeader" ) ;
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) -> VAR_8 ) && ! ( METHOD_24 ( STRUCT_OR_UNION_20 -> VAR_79 ) -> VAR_86 & VAR_87 )
<S2SV_ModStart> ; TYPE_71 * VAR_295 ; if ( VAR_291 < 0 || VAR_291 > 4194304 ) { METHOD_50 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , VAR_300 ) ; return VAR_302 ; }
<S2SV_ModStart> VAR_47 ) ; VAR_47 -> VAR_49 = VAR_50 ;
<S2SV_ModStart> & VAR_21 , VAR_138 -> VAR_144 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_6 ; if
<S2SV_ModStart> - VAR_16 ; VAR_46 -> VAR_28 = 0 ; <S2SV_ModStart> VAR_51 ; } <S2SV_ModEnd> VAR_52 = VAR_50
<S2SV_ModStart> const TYPE_2 * VAR_15 <S2SV_ModEnd> , const TYPE_2 <S2SV_ModStart> const TYPE_2 * hostname <S2SV_ModEnd> ) { TYPE_4 <S2SV_ModStart> ) { TYPE_4 VAR_16 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> = METHOD_2 ( VAR_15 <S2SV_ModEnd> ) ; TYPE_4 <S2SV_ModStart> ) ; TYPE_4 VAR_17 <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> = METHOD_2 ( hostname <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( VAR_17 < VAR_16 <S2SV_ModEnd> ) return VAR_14 <S2SV_ModStart> return VAR_14 ; if ( ! METHOD_3 ( VAR_15 , hostname + VAR_17 - VAR_16 ) ) return VAR_14 ; if ( VAR_17 == VAR_16 ) return VAR_13 ; if ( '.' == * ( hostname + VAR_17 - VAR_16 - 1 ) ) return VAR_13 ; return <S2SV_ModEnd> VAR_14 ; }
<S2SV_ModStart> = 0 ; VAR_1 -> VAR_3 = 0 ; VAR_1 -> VAR_4 = 0 ;
<S2SV_ModStart> = 0 ; if ( METHOD_9 ( VAR_44 ) ) return - VAR_24 ; <S2SV_ModStart> - VAR_31 ; <S2SV_ModEnd> for ( VAR_42 <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return VAR_43 ;
<S2SV_ModStart> ; if ( VAR_234 >= 31 || ( ( VAR_257 -> VAR_247 << VAR_234 ) >> VAR_234 ) != VAR_257 -> VAR_247 || VAR_222 >= 31 || ( ( VAR_257 -> VAR_258 << VAR_222 ) >> VAR_222 ) != VAR_257 -> VAR_258 ) { continue ; } if (
<S2SV_ModStart> VAR_7 ) ; VAR_6 -> VAR_7 = 0 ;
<S2SV_ModStart> VAR_69 -> VAR_76 && VAR_69 -> VAR_74
<S2SV_ModStart> [ VAR_249 ] ) ; METHOD_12 ( VAR_105 , "sx<S2SV_blank>sasl<S2SV_blank>callback:<S2SV_blank>check<S2SV_blank>mech<S2SV_blank>(mech=%s)" , VAR_297
<S2SV_ModStart> unsigned VAR_15 , struct STRUCT_OR_UNION_1 * VAR_23 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( VAR_15 , VAR_23 , <S2SV_ModStart> , & VAR_22 <S2SV_ModEnd> ) ; VAR_22
<S2SV_ModStart> ; VAR_5 -> VAR_8 &= ~ VAR_9 ; VAR_5 ->
<S2SV_ModStart> case 'l' : { TYPE_38 * VAR_448 = METHOD_107 ( VAR_487 -> VAR_445 ) ; <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> case 'i' : { TYPE_38 * VAR_448 = METHOD_107 ( VAR_487 -> VAR_445 ) ; <S2SV_ModStart> 0 ) ; }
<S2SV_ModStart> goto VAR_139 ; if ( METHOD_29 ( & VAR_137 . VAR_138 , & VAR_140 ) ) { VAR_147 = - VAR_23 ; goto VAR_136 ; }
<S2SV_ModStart> if ( ( METHOD_4 ( VAR_127 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_106 < 0 <S2SV_ModEnd> ) || VAR_50
<S2SV_ModStart> VAR_25 = VAR_3 ; struct STRUCT_OR_UNION_1 * STRUCT_OR_UNION_1 = & VAR_28 ; struct STRUCT_OR_UNION_2 * VAR_29 = METHOD_16 ( STRUCT_OR_UNION_1 , VAR_30 ) <S2SV_ModStart> ( ) ; METHOD_17 ( & VAR_29 -> VAR_31 ) ; METHOD_18 ( & VAR_29 -> VAR_32 ) ;
<S2SV_ModStart> , VAR_153 , VAR_134 <S2SV_ModEnd> , VAR_135 , <S2SV_ModStart> VAR_136 ) ; if ( VAR_153 == VAR_161 ) { METHOD_69 ( ( VAR_159 , ")" ) ) ; goto VAR_158 ; }
<S2SV_ModStart> -> VAR_9 = METHOD_11 ( STRUCT_OR_UNION_7 ) <S2SV_ModEnd> ; VAR_16 ->
<S2SV_ModStart> ( TYPE_32 ) METHOD_27 <S2SV_ModStart> ( TYPE_32 ) METHOD_27 <S2SV_ModStart> ( TYPE_32 ) METHOD_27 <S2SV_ModStart> ( TYPE_32 ) METHOD_27 <S2SV_ModStart> ( TYPE_32 ) METHOD_27
<S2SV_ModStart> = VAR_51 -> VAR_54 ; const TYPE_4 VAR_55 = METHOD_4 ( VAR_46 -> VAR_56 . VAR_57 , VAR_46 -> VAR_56 . VAR_58 , VAR_46 -> VAR_56 . VAR_59 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) || ( VAR_46 <S2SV_ModEnd> -> VAR_13 & <S2SV_ModStart> % VAR_46 -> VAR_41 . VAR_60 <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ; if ( METHOD_5 ( VAR_46 ) ) { VAR_46 -> VAR_56 . VAR_61 [ VAR_55 ] . VAR_62 = 1 ; VAR_46 -> VAR_63 &= ( ~ VAR_64 & ~ VAR_65 & ~ VAR_66 ) ; } else if ( METHOD_6 ( VAR_46 ) ) { VAR_46 -> VAR_56 . VAR_61 [ VAR_55 ] . VAR_62 = 1 ; METHOD_7 ( VAR_46 ) ; VAR_46 -> VAR_63 &= ( ~ VAR_64 & ~ VAR_65 & ~ VAR_66 ) ; VAR_47 = METHOD_1 ( VAR_46 ) ; } } else { VAR_35 -> VAR_36 = VAR_37 ; if ( METHOD_5 ( VAR_46 ) ) { TYPE_5 * VAR_67 = & VAR_46 -> VAR_56 . VAR_61 [ VAR_55 ] ; if ( VAR_46 -> VAR_56 . VAR_57 == 0 ) { VAR_67 -> VAR_62 = 0 ; } else { VAR_67 -> VAR_62 = VAR_46 -> VAR_56 . VAR_61 [ VAR_46 -> VAR_56 . VAR_58 ] . VAR_62 ; if ( VAR_67 -> VAR_62 ) VAR_46 -> VAR_63 &= ( ~ VAR_64 ) ; } VAR_46 -> VAR_63 &= ( ~ VAR_66 ) ; } else if ( METHOD_6 ( VAR_46 ) ) { TYPE_5 * VAR_67 = & VAR_46 -> VAR_56 . VAR_61 [ VAR_55 ] ; if ( VAR_46 -> VAR_56 . VAR_57 == 0 ) { VAR_67 -> VAR_62 = 0 ; } else { VAR_67 -> VAR_62 = VAR_46 -> VAR_56 . VAR_61 [ VAR_46 -> VAR_56 . VAR_58 ] . VAR_62 ; } VAR_47 = METHOD_2 ( VAR_46 ) ; } } if ( <S2SV_ModEnd> VAR_46 -> VAR_41 <S2SV_ModStart> -> VAR_41 . VAR_68 == VAR_69 ) METHOD_8 ( VAR_46 ) ; <S2SV_ModEnd> METHOD_3 ( VAR_46
<S2SV_ModStart> ( STRUCT_OR_UNION_21 && VAR_143 -> VAR_147 && <S2SV_ModStart> -> VAR_145 , VAR_143 <S2SV_ModEnd> -> VAR_147 , <S2SV_ModStart> -> VAR_144 ; if ( VAR_143 -> VAR_147 ) <S2SV_ModStart> -> VAR_145 , VAR_143 <S2SV_ModEnd> -> VAR_147 ,
<S2SV_ModStart> TYPE_4 VAR_50 , TYPE_8 <S2SV_ModEnd> * VAR_63 )
<S2SV_ModStart> ) ) ; if ( METHOD_16 ( VAR_106 . VAR_60 , VAR_106 . VAR_105 ) ) METHOD_3 ( VAR_40 , ( METHOD_4 ( VAR_112 ) , METHOD_5 ( "ltxtquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> "UIPC<S2SV_blank>SEND<S2SV_blank>WAKE<S2SV_blank>UP" ) ; METHOD_3 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> VAR_179 ) { case VAR_159 : break ;
<S2SV_ModStart> * VAR_527 , TYPE_41 * VAR_544 , TYPE_42 * VAR_545 <S2SV_ModEnd> , TYPE_15 * <S2SV_ModStart> TYPE_18 VAR_534 , TYPE_43 * VAR_546 , <S2SV_ModEnd> TYPE_40 VAR_503 , <S2SV_ModStart> , TYPE_34 VAR_481 , PC_TREE * VAR_548 ) { const SPEED_FEATURES * const VAR_400 = & VAR_527 -> VAR_400 ; <S2SV_ModEnd> TYPE_11 * const <S2SV_ModStart> -> VAR_12 ; TYPE_2 * const VAR_547 = & VAR_545 -> VAR_547 ; <S2SV_ModStart> VAR_497 = & VAR_544 <S2SV_ModEnd> -> VAR_15 ; <S2SV_ModStart> * VAR_434 = & VAR_548 -> VAR_549 <S2SV_ModEnd> ; TYPE_40 VAR_252 <S2SV_ModStart> ; TYPE_18 VAR_485 = VAR_534 ; TYPE_43 VAR_551 , VAR_561 , VAR_556 <S2SV_ModEnd> ; TYPE_40 VAR_217 <S2SV_ModStart> * VAR_542 ; <S2SV_ModEnd> METHOD_51 ( VAR_84 <S2SV_ModStart> ] ) ; vp9_rd_cost_init ( & VAR_561 ) ; vp9_rd_cost_reset ( & VAR_556 ) ; VAR_556 . VAR_555 = VAR_481 ; if ( VAR_400 -> <S2SV_ModEnd> VAR_97 ) { <S2SV_ModStart> ( VAR_534 <= VAR_497 -> <S2SV_ModEnd> VAR_121 && VAR_534 <S2SV_ModStart> && VAR_534 >= VAR_497 -> <S2SV_ModEnd> VAR_131 ) ; <S2SV_ModStart> ( VAR_534 <= VAR_497 -> <S2SV_ModEnd> VAR_121 && VAR_534 <S2SV_ModStart> && VAR_534 > VAR_497 -> <S2SV_ModEnd> VAR_131 ) || <S2SV_ModStart> ( VAR_534 <= VAR_497 -> <S2SV_ModEnd> VAR_121 && VAR_534 <S2SV_ModStart> && VAR_534 > VAR_497 -> <S2SV_ModEnd> VAR_131 ) || <S2SV_ModStart> &= VAR_534 > VAR_497 -> VAR_131 ; } if ( VAR_400 -> <S2SV_ModEnd> VAR_134 ) { <S2SV_ModStart> VAR_138 ; } VAR_434 -> VAR_550 = ! ( VAR_392 || VAR_298 || VAR_217 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_527 , VAR_545 , VAR_497 <S2SV_ModEnd> , VAR_530 , <S2SV_ModStart> VAR_531 , & VAR_551 , VAR_534 , VAR_434 ) ; VAR_434 <S2SV_ModEnd> -> VAR_445 . <S2SV_ModStart> -> VAR_449 ; VAR_434 -> VAR_552 = * VAR_497 -> VAR_552 ; VAR_434 -> VAR_553 [ 0 ] = VAR_497 -> VAR_553 [ 0 ] ; VAR_434 -> VAR_554 = VAR_497 -> VAR_554 ; if ( VAR_551 . VAR_486 <S2SV_ModEnd> != VAR_539 ) <S2SV_ModStart> VAR_534 ) ; VAR_551 . VAR_486 += VAR_527 <S2SV_ModEnd> -> VAR_461 [ <S2SV_ModStart> VAR_169 ] ; VAR_551 . VAR_555 <S2SV_ModEnd> = METHOD_41 ( <S2SV_ModStart> -> VAR_472 , VAR_551 . VAR_486 , VAR_551 . VAR_488 ) ; if ( VAR_551 . VAR_555 < VAR_556 . VAR_555 <S2SV_ModEnd> ) { TYPE_34 <S2SV_ModStart> ) { TYPE_34 VAR_557 = VAR_400 -> VAR_558 ; TYPE_34 VAR_559 = VAR_400 -> VAR_560 ; VAR_557 <S2SV_ModEnd> >>= 8 - <S2SV_ModStart> ] ) ; VAR_559 *= num_pels_log2_lookup [ VAR_534 ] ; VAR_556 = VAR_551 ; if ( VAR_534 >= VAR_188 ) VAR_548 -> partitioning = VAR_169 <S2SV_ModEnd> ; if ( <S2SV_ModStart> . VAR_205 && VAR_551 . VAR_486 < VAR_559 && VAR_551 . VAR_488 < VAR_557 <S2SV_ModEnd> ) { VAR_217 <S2SV_ModStart> } } } } METHOD_9 ( VAR_497 , VAR_434 ) ; if ( VAR_217 <S2SV_ModEnd> ) { TYPE_40 <S2SV_ModStart> VAR_534 ) ; VAR_561 . VAR_486 += VAR_527 <S2SV_ModEnd> -> VAR_461 [ <S2SV_ModStart> [ VAR_230 ] ; VAR_561 . VAR_555 = METHOD_41 ( VAR_497 -> VAR_470 , VAR_497 -> VAR_472 , VAR_561 . VAR_486 , VAR_561 . VAR_488 ) <S2SV_ModStart> < 4 && VAR_561 . VAR_555 < VAR_556 . VAR_555 <S2SV_ModEnd> ; ++ VAR_252 <S2SV_ModStart> ) continue ; <S2SV_ModEnd> METHOD_37 ( VAR_497 <S2SV_ModStart> ( VAR_527 , VAR_544 , VAR_545 <S2SV_ModEnd> , VAR_543 , <S2SV_ModStart> VAR_485 , & VAR_551 , 0 , VAR_556 . VAR_555 - VAR_561 . VAR_555 , VAR_548 -> split [ VAR_252 ] ) ; if ( VAR_551 . VAR_486 <S2SV_ModEnd> == VAR_539 ) <S2SV_ModStart> VAR_539 ) { vp9_rd_cost_reset ( & VAR_561 ) <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { VAR_561 . VAR_486 += VAR_551 . VAR_486 ; VAR_561 . VAR_488 += VAR_551 . VAR_488 ; VAR_561 . VAR_555 += VAR_551 . VAR_555 ; } } if ( VAR_561 . VAR_555 < VAR_556 . VAR_555 ) { VAR_556 = VAR_561 ; VAR_548 -> partitioning = VAR_230 <S2SV_ModEnd> ; } else <S2SV_ModStart> { if ( VAR_400 -> <S2SV_ModEnd> VAR_295 ) VAR_393 <S2SV_ModStart> VAR_369 ) ; if ( VAR_400 -> VAR_401 ) METHOD_37 ( VAR_497 , VAR_434 ) ; VAR_548 -> horizontal [ 0 ] . VAR_550 = 1 ; METHOD_38 ( VAR_527 , VAR_545 , VAR_497 , VAR_530 , VAR_531 , & VAR_561 , VAR_485 , & VAR_548 -> horizontal [ 0 ] ) ; VAR_548 -> horizontal [ 0 ] . <S2SV_ModEnd> VAR_445 . VAR_449 <S2SV_ModStart> -> VAR_449 ; VAR_548 -> horizontal [ 0 ] . VAR_552 = * VAR_497 -> VAR_552 ; VAR_548 -> horizontal [ 0 ] . VAR_553 [ 0 ] = VAR_497 -> VAR_553 [ 0 ] ; VAR_548 -> horizontal [ 0 ] . VAR_554 = VAR_497 -> VAR_554 ; if ( VAR_561 . VAR_555 < VAR_556 . VAR_555 <S2SV_ModEnd> && VAR_530 + <S2SV_ModStart> VAR_336 ) { <S2SV_ModEnd> METHOD_37 ( VAR_497 <S2SV_ModStart> VAR_434 ) ; VAR_548 -> horizontal [ 1 ] . VAR_550 = 1 ; <S2SV_ModStart> ( VAR_527 , VAR_545 , VAR_497 <S2SV_ModEnd> , VAR_530 + <S2SV_ModStart> VAR_531 , & VAR_551 , VAR_485 , & VAR_548 -> horizontal [ 1 ] ) ; VAR_548 -> horizontal [ 1 ] . <S2SV_ModEnd> VAR_445 . VAR_449 <S2SV_ModStart> -> VAR_449 ; VAR_548 -> horizontal [ 1 ] . VAR_552 = * VAR_497 -> VAR_552 ; VAR_548 -> horizontal [ 1 ] . VAR_553 [ 0 ] = VAR_497 -> VAR_553 [ 0 ] ; VAR_548 -> horizontal [ 1 ] . VAR_554 = VAR_497 -> VAR_554 ; if ( VAR_551 . VAR_486 <S2SV_ModEnd> == VAR_539 ) <S2SV_ModStart> VAR_539 ) { vp9_rd_cost_reset ( & VAR_561 ) <S2SV_ModEnd> ; } else <S2SV_ModStart> VAR_534 ) ; VAR_551 . VAR_486 += VAR_527 <S2SV_ModEnd> -> VAR_461 [ <S2SV_ModStart> VAR_369 ] ; VAR_561 . VAR_486 += VAR_551 . VAR_486 ; VAR_561 . VAR_488 += VAR_551 . VAR_488 ; VAR_561 . VAR_555 <S2SV_ModEnd> = METHOD_41 ( <S2SV_ModStart> -> VAR_472 , VAR_561 . VAR_486 , VAR_561 . VAR_488 ) ; } } if ( VAR_561 . VAR_555 < VAR_556 . VAR_555 ) { VAR_556 = VAR_561 ; VAR_548 -> partitioning = VAR_369 ; } else { pred_pixel_ready_reset ( VAR_548 , VAR_534 ) <S2SV_ModEnd> ; } } <S2SV_ModStart> VAR_463 ) ; if ( VAR_400 -> VAR_401 ) METHOD_37 ( VAR_497 , VAR_434 ) ; VAR_548 -> vertical [ 0 ] . VAR_550 = 1 ; METHOD_38 ( VAR_527 , VAR_545 , VAR_497 , VAR_530 , VAR_531 , & VAR_561 , VAR_485 , & VAR_548 -> vertical [ 0 ] ) ; VAR_548 -> vertical [ 0 ] . <S2SV_ModEnd> VAR_445 . VAR_449 <S2SV_ModStart> -> VAR_449 ; VAR_548 -> vertical [ 0 ] . VAR_552 = * VAR_497 -> VAR_552 ; VAR_548 -> vertical [ 0 ] . VAR_553 [ 0 ] = VAR_497 -> VAR_553 [ 0 ] ; VAR_548 -> vertical [ 0 ] . VAR_554 = VAR_497 -> VAR_554 ; if ( VAR_561 . VAR_555 < VAR_556 . VAR_555 <S2SV_ModEnd> && VAR_531 + <S2SV_ModStart> VAR_430 ) { <S2SV_ModEnd> METHOD_37 ( VAR_497 <S2SV_ModStart> VAR_434 ) ; VAR_548 -> vertical [ 1 ] . VAR_550 = 1 ; <S2SV_ModStart> ( VAR_527 , VAR_545 , VAR_497 <S2SV_ModEnd> , VAR_530 , <S2SV_ModStart> VAR_439 , & VAR_551 , VAR_485 , & VAR_548 -> vertical [ 1 ] ) ; VAR_548 -> vertical [ 1 ] . <S2SV_ModEnd> VAR_445 . VAR_449 <S2SV_ModStart> -> VAR_449 ; VAR_548 -> vertical [ 1 ] . VAR_552 = * VAR_497 -> VAR_552 ; VAR_548 -> vertical [ 1 ] . VAR_553 [ 0 ] = VAR_497 -> VAR_553 [ 0 ] ; VAR_548 -> vertical [ 1 ] . VAR_554 = VAR_497 -> VAR_554 ; if ( VAR_551 . VAR_486 <S2SV_ModEnd> == VAR_539 ) <S2SV_ModStart> VAR_539 ) { vp9_rd_cost_reset ( & VAR_561 ) <S2SV_ModEnd> ; } else <S2SV_ModStart> VAR_534 ) ; VAR_561 . VAR_486 += VAR_527 <S2SV_ModEnd> -> VAR_461 [ <S2SV_ModStart> VAR_463 ] ; VAR_561 . VAR_486 += VAR_551 . VAR_486 ; VAR_561 . VAR_488 += VAR_551 . VAR_488 ; VAR_561 . VAR_555 <S2SV_ModEnd> = METHOD_41 ( <S2SV_ModStart> -> VAR_472 , VAR_561 . VAR_486 , VAR_561 . VAR_488 ) ; } } if ( VAR_561 . VAR_555 < VAR_556 . VAR_555 ) { VAR_556 = VAR_561 ; VAR_548 -> partitioning = VAR_463 ; } else { pred_pixel_ready_reset ( VAR_548 , VAR_534 ) ; } } * VAR_546 = VAR_556 ; if ( VAR_556 . VAR_486 <S2SV_ModEnd> == VAR_539 ) <S2SV_ModStart> == VAR_539 ) { vp9_rd_cost_reset ( VAR_546 ) ; return ; } <S2SV_ModEnd> METHOD_43 ( VAR_511 <S2SV_ModStart> , VAR_534 , VAR_548 ) ; if ( VAR_556 . VAR_486 <S2SV_ModEnd> < VAR_539 && <S2SV_ModStart> < VAR_539 && VAR_556 . VAR_488 <S2SV_ModEnd> < VAR_541 && <S2SV_ModStart> VAR_535 ) ; METHOD_47 ( VAR_527 , VAR_544 , VAR_547 , VAR_543 <S2SV_ModEnd> , VAR_530 , <S2SV_ModStart> , VAR_532 , VAR_534 , VAR_548 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_534 == VAR_535 && VAR_503 <S2SV_ModStart> ; METHOD_51 ( VAR_556 . VAR_486 <S2SV_ModEnd> < VAR_539 ) <S2SV_ModStart> ; METHOD_51 ( VAR_556 . VAR_488 <S2SV_ModEnd> < VAR_541 )
<S2SV_ModStart> TYPE_1 * VAR_184 ) { TYPE_3 * VAR_182 = & VAR_184 -> VAR_182 ; TYPE_5 * VAR_174 = METHOD_1 ( TYPE_5 , VAR_158 , VAR_182 -> VAR_8 ) ; TYPE_6 VAR_145 ; <S2SV_ModEnd> TYPE_2 * VAR_161 <S2SV_ModStart> TYPE_2 * VAR_161 ; TYPE_7 VAR_170 = 0 ; if ( ! VAR_184 -> VAR_186 . VAR_187 ) { if ( VAR_182 -> VAR_164 . VAR_165 > 65536 ) { goto VAR_180 ; } VAR_184 -> VAR_170 = METHOD_25 ( 4096 , VAR_182 -> VAR_164 . VAR_165 ) ; VAR_184 -> VAR_186 . VAR_187 = METHOD_26 ( VAR_174 -> VAR_175 , VAR_184 -> VAR_170 ) ; } VAR_161 = VAR_184 -> VAR_186 . VAR_187 <S2SV_ModEnd> ; switch (
<S2SV_ModStart> ( ) ; VAR_24 -> VAR_23 |= VAR_26 ; while ( VAR_27 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> 1 ) ; if ( ! <S2SV_ModStart> , VAR_47 ) ) { if ( VAR_78 == 0 ) VAR_78 = - VAR_79 ; break ; } <S2SV_ModEnd> VAR_63 = VAR_77
<S2SV_ModStart> ) STRUCT_OR_UNION_7 ; METHOD_3 ( VAR_28 , 0 , sizeof ( * VAR_28 ) ) ;
<S2SV_ModStart> = VAR_60 ; if ( VAR_58 -> VAR_36 -> VAR_62 & VAR_63 ) METHOD_8 ( VAR_58 , VAR_64 , VAR_65 , VAR_65 ) ;
<S2SV_ModStart> TYPE_3 VAR_15 ; if ( * VAR_6 >= VAR_16 - 2 ) { METHOD_3 ( VAR_12 , "Bad<S2SV_blank>unserialize<S2SV_blank>data" ) ; return - 1 ; } <S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } return
<S2SV_ModStart> { VAR_228 ++ ; } if ( VAR_231 >= VAR_232 ) { METHOD_18 ( "Too<S2SV_blank>many<S2SV_blank>operands\\n" ) ; return VAR_234
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_14 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> -> VAR_115 ; if ( VAR_168 == VAR_116 -> METHOD_15 ) return - 1 ; <S2SV_ModStart> ; } } return 0 ;
<S2SV_ModStart> -> VAR_11 ; const <S2SV_ModStart> - VAR_25 ; const <S2SV_ModStart> } else { METHOD_3 ( VAR_87 , VAR_75 , VAR_83 , VAR_84 , VAR_79 , VAR_81 , VAR_93 , VAR_89 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> VAR_8 . VAR_4 != VAR_9 ) { METHOD_3 ( VAR_8 . VAR_4 < 0 ) ; <S2SV_ModEnd> return - VAR_5 <S2SV_ModStart> - VAR_5 ; }
<S2SV_ModStart> ; return ! METHOD_5 <S2SV_ModEnd> ( STRUCT_OR_UNION_4 ,
<S2SV_ModStart> ( VAR_60 , "%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf" "%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf" "%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf\\n" <S2SV_ModEnd> , VAR_58 -> <S2SV_ModStart> , VAR_58 -> VAR_61 , VAR_58 -> <S2SV_ModStart> , VAR_58 -> <S2SV_ModEnd> VAR_33 , VAR_58 <S2SV_ModStart> VAR_58 -> VAR_39 , VAR_58 -> VAR_62 , VAR_58 -> VAR_63 , VAR_58 -> VAR_64
<S2SV_ModStart> ) VAR_5 ; if ( VAR_6 )
<S2SV_ModStart> VAR_55 ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> VAR_110 -> VAR_89 + sizeof ( TYPE_5 ) <S2SV_ModStart> ) ) { VAR_110 -> VAR_12 = 1 ; VAR_110 -> VAR_89 = METHOD_15 ( VAR_110 -> VAR_108 ) ; } else { VAR_110 -> VAR_99 = 1 ; } METHOD_17 ( "+++sctp_inq_pop+++<S2SV_blank>chunk:%p[%s],<S2SV_blank>length:%d,<S2SV_blank>skb->len:%d\\n" , VAR_110 , METHOD_18 ( METHOD_19 ( VAR_110 -> VAR_105 -> VAR_103 ) ) , METHOD_20 ( VAR_110 -> VAR_105 -> VAR_106 ) , VAR_110 -> VAR_108 -> VAR_109 ) ; return <S2SV_ModEnd> VAR_110 ; }
<S2SV_ModStart> VAR_43 ) ; VAR_127 = & VAR_43 -> VAR_89 ; <S2SV_ModStart> - VAR_18 ; if ( METHOD_18 ( VAR_43 ) ) goto VAR_126 ; <S2SV_ModStart> VAR_43 -> VAR_75 <S2SV_ModEnd> ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_8 ) ; return
<S2SV_ModStart> ; if ( ! METHOD_20 ( VAR_44 ) ) { VAR_45 = - VAR_19 ; goto VAR_41 ; } if (
<S2SV_ModStart> STRUCT_OR_UNION_6 * STRUCT_OR_UNION_6 ; TYPE_0 VAR_6 = - VAR_4 <S2SV_ModStart> ; if ( STRUCT_OR_UNION_6 ) { VAR_6 = METHOD_2 ( STRUCT_OR_UNION_6 ) ; if ( VAR_6 ) METHOD_3 ( STRUCT_OR_UNION_6 ) ; else <S2SV_ModEnd> * VAR_5 = <S2SV_ModStart> = STRUCT_OR_UNION_6 ; } return VAR_6 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = 0 ; VAR_58 -> VAR_59 = 0 ;
<S2SV_ModStart> * VAR_3 >= 62 <S2SV_ModEnd> && VAR_13 [
<S2SV_ModStart> ; TYPE_4 VAR_208 ; struct STRUCT_OR_UNION_10 * VAR_209 <S2SV_ModStart> . VAR_26 ; VAR_209 = METHOD_26 ( VAR_206 -> VAR_209 , METHOD_25 ( VAR_204 ) ) ; if ( VAR_209 && VAR_209 -> VAR_142 . <S2SV_ModEnd> VAR_75 ) { <S2SV_ModStart> ; VAR_46 = VAR_209 -> VAR_142 . <S2SV_ModEnd> VAR_37 ; } <S2SV_ModStart> if ( ! VAR_209 || ! VAR_209 -> VAR_142 . <S2SV_ModEnd> VAR_75 ) VAR_134 <S2SV_ModStart> ; if ( VAR_209 ) METHOD_14 ( VAR_204 ) -> VAR_140 = VAR_209 -> VAR_142 . <S2SV_ModEnd> VAR_143 ; VAR_191
<S2SV_ModStart> VAR_16 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> } if ( STRUCT_OR_UNION_15 -> VAR_14 -> VAR_16 . VAR_17 &&
<S2SV_ModStart> * VAR_11 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> ) && ! METHOD_6 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 ,
<S2SV_ModStart> 0 ) { if ( VAR_23 -> VAR_25 == VAR_26 ) { <S2SV_ModStart> VAR_23 ) ; } else { METHOD_5 ( VAR_23 -> VAR_2 ) ; }
<S2SV_ModStart> VAR_23 ) ; VAR_11 -> VAR_12 = VAR_25 ; return ;
<S2SV_ModStart> 0 ; TYPE_9 VAR_73 ; TYPE_12 VAR_100 , VAR_101 ; if ( ( VAR_97 = METHOD_11 ( VAR_98 , VAR_93 ) ) == ( TYPE_12 ) - 1 ) return ( VAR_91 ) ; if ( ! METHOD_12 ( * VAR_93 , 1 ) ) return ( VAR_91 ) ; VAR_101 = ( TYPE_12 ) ( VAR_93 - VAR_44 ) ; if ( ( ( VAR_92 = * VAR_93 ++ ) & VAR_65 ) != VAR_65 ) { VAR_95 = 0 ; VAR_99 = VAR_93 + VAR_97 ; } if ( VAR_92 != 0 ) while ( VAR_92 && VAR_93 < <S2SV_ModEnd> VAR_98 -> VAR_79 <S2SV_ModStart> VAR_98 -> VAR_79 ) { if ( ( VAR_92 & VAR_65 ) == VAR_65 ) { if ( ! VAR_95 ) { VAR_99 = VAR_93 + 1 ; VAR_95 = 1 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_91 ) ; VAR_100 = ( ( ( VAR_92 << 8 ) | * VAR_93 ) & 0x3fff ) ; if ( VAR_100 >= VAR_101 ) { METHOD_13 ( ( VAR_98 , "<BAD<S2SV_blank>PTR>" ) ) ; return ( VAR_91 ) ; } VAR_101 = VAR_100 ; VAR_93 = VAR_44 + VAR_100 ; if ( ( VAR_97 = METHOD_11 ( VAR_98 , VAR_93 ) ) == ( TYPE_12 ) - 1 ) return ( VAR_91 ) ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_91 ) ; <S2SV_ModEnd> VAR_92 = * <S2SV_ModStart> VAR_93 ++ ; <S2SV_ModEnd> continue ; } <S2SV_ModStart> += VAR_97 ; <S2SV_ModEnd> METHOD_13 ( ( <S2SV_ModStart> VAR_93 ++ ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> } if ( VAR_35 && VAR_47 -> VAR_41 [ 0 ] == '\\0' && VAR_47 -> VAR_48 [ 0 ] == '\\0' ) return ( 1 ) ; if ( VAR_47 -> VAR_41 [ 0 ] == '\\0' || <S2SV_ModStart> -> VAR_41 ) ) return ( 0 ) ; if ( VAR_47 -> VAR_48 [ 0 ] == '\\0' ) { ( TYPE_6 ) METHOD_8 ( VAR_47 -> VAR_48 , VAR_48 , sizeof ( VAR_47 -> VAR_48 ) ) ; } if ( <S2SV_ModEnd> ! METHOD_7 ( <S2SV_ModStart> VAR_48 ) ) return ( 0 ) ; <S2SV_ModEnd> return ( 1
<S2SV_ModStart> ) ; return METHOD_4 ( <S2SV_ModStart> , VAR_11 ) )
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 <S2SV_ModEnd> * VAR_10 ,
<S2SV_ModStart> -> VAR_5 ; * VAR_19 = VAR_39 ; <S2SV_ModStart> STRUCT_OR_UNION_10 ) { <S2SV_ModEnd> METHOD_1 ( VAR_39 <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_3 ( VAR_39 <S2SV_ModStart> 0 ; } <S2SV_ModEnd> VAR_44 = (
<S2SV_ModStart> ; if ( METHOD_107 ( VAR_647 ) != VAR_591 ) { VAR_651 = METHOD_106 ( VAR_651 , VAR_652 ) ; METHOD_100 ( VAR_566 , "InsufficientImageDataInFile" , VAR_647 -> VAR_568 ) ; } if (
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_20 <S2SV_ModEnd> ) { static <S2SV_ModStart> ; METHOD_5 ( VAR_20 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> TYPE_4 VAR_10 ; TYPE_4 VAR_13 ; METHOD_6 ( ) ; VAR_13 = ( VAR_5 -> VAR_14 . VAR_15 == 2 ) ? VAR_5 -> VAR_16 . VAR_17 : VAR_18 ; VAR_10 = METHOD_7 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> , VAR_7 ) - VAR_13 <S2SV_ModEnd> ; return METHOD_4
<S2SV_ModStart> TYPE_1 * VAR_31 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> VAR_33 ) { METHOD_4 ( VAR_71 , 0 , VAR_75 -> VAR_76 ) ;
<S2SV_ModStart> TYPE_21 * VAR_32 , TYPE_25 * VAR_240 <S2SV_ModStart> * VAR_141 ; * VAR_240 = 0 ; <S2SV_ModStart> break ; case VAR_241 : * VAR_240 = 1 ; break ; case
<S2SV_ModStart> ) break ; <S2SV_ModEnd> VAR_66 [ VAR_72
<S2SV_ModStart> ) ) { TYPE_10 <S2SV_ModEnd> VAR_43 = ( <S2SV_ModStart> ( * ( TYPE_10 <S2SV_ModEnd> * ) VAR_58 <S2SV_ModStart> case VAR_44 : if ( ! METHOD_11 ( ) ) return - VAR_54 ; break ; <S2SV_ModStart> case VAR_49 : if ( ! METHOD_12 ( VAR_6 ) ) return - VAR_54 ; break ; <S2SV_ModStart> case VAR_52 : if ( METHOD_12 ( VAR_6 ) ) return - VAR_54 ;
<S2SV_ModStart> VAR_90 , TYPE_24 <S2SV_ModEnd> VAR_159 ) { <S2SV_ModStart> VAR_159 ) { TYPE_25 VAR_153 ; TYPE_25 <S2SV_ModEnd> VAR_154 = VAR_42 <S2SV_ModStart> VAR_25 ; TYPE_18 * VAR_97 ; const TYPE_21 * VAR_71 = VAR_56 -> VAR_71 ; const TYPE_21 * VAR_74 = VAR_56 -> VAR_74 ; const TYPE_25 VAR_78 = METHOD_1 ( VAR_155 , VAR_71 , 0 ) ; const TYPE_25 VAR_79 = METHOD_2 ( VAR_155 , VAR_74 , 0 ) ; VAR_97 = VAR_142 <S2SV_ModEnd> -> VAR_77 [ <S2SV_ModStart> VAR_79 ] ; METHOD_5 ( VAR_102 -> VAR_160 , VAR_161 , sizeof ( VAR_102 -> VAR_160 ) ) ; for ( VAR_153 = VAR_42 ; VAR_153 <= VAR_44 ; VAR_153 ++ ) { if ( VAR_142 -> VAR_125 . VAR_162 ) { if ( METHOD_6 ( VAR_153 , VAR_154 ) ) continue ; if ( * VAR_122 ) break ; <S2SV_ModStart> = VAR_153 ; super_block_yrd <S2SV_ModEnd> ( VAR_142 , <S2SV_ModStart> VAR_89 , VAR_90 <S2SV_ModEnd> , VAR_159 ) <S2SV_ModStart> VAR_123 ; } <S2SV_ModEnd> } VAR_155 ->
<S2SV_ModStart> VAR_139 ) ; VAR_139 = VAR_143 ; <S2SV_ModStart> ; VAR_138 : if ( VAR_139 != VAR_143 )
<S2SV_ModStart> VAR_85 & VAR_23 ; METHOD_9 ( VAR_80 <= VAR_100 ) ; METHOD_9 ( VAR_81 <= VAR_101 )
<S2SV_ModStart> & VAR_25 ) return 0 ; <S2SV_ModEnd> return VAR_60 ; <S2SV_ModStart> VAR_57 ) ; <S2SV_ModEnd> } METHOD_10 (
<S2SV_ModStart> VAR_11 * VAR_33 ; if ( VAR_35 -> VAR_39 ) return 0
<S2SV_ModStart> & VAR_10 , VAR_27 <S2SV_ModEnd> , 0 ,
<S2SV_ModStart> VAR_36 ) { METHOD_4 ( VAR_45 , 0 , sizeof ( * VAR_45 ) ) ;
<S2SV_ModStart> VAR_408 ; } if ( VAR_421 >= VAR_371 ) { METHOD_73 ( VAR_50 , "the<S2SV_blank>log<S2SV_blank>buffer<S2SV_blank>is<S2SV_blank>full<S2SV_blank>(%d).<S2SV_blank>The<S2SV_blank>access<S2SV_blank>log<S2SV_blank>request<S2SV_blank>has<S2SV_blank>been<S2SV_blank>truncated." , VAR_371 ) ; VAR_421 = VAR_371 ; break ; }
<S2SV_ModStart> if ( ! METHOD_13 ( VAR_45 -> VAR_74 , VAR_58 , VAR_60 ) ) { VAR_73 = - VAR_75 ; goto VAR_71 ; } if ( !
<S2SV_ModStart> VAR_10 ) { TYPE_4 VAR_19 ; <S2SV_ModStart> VAR_17 ; } VAR_19 = VAR_9 * VAR_10 * sizeof ( * VAR_18 -> VAR_20 ) ; VAR_18 -> VAR_20 = METHOD_4 ( VAR_19 ) ; if ( VAR_18 -> VAR_20 == VAR_17 ) { METHOD_3 ( VAR_18 ) ; return VAR_17 ; } METHOD_5 ( VAR_21 <= 255 ) ; METHOD_6 ( VAR_18 -> VAR_20 , VAR_21 , VAR_19 ) ;
<S2SV_ModStart> ; METHOD_10 ( VAR_50 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> ; VAR_25 = VAR_51 <S2SV_ModEnd> ; VAR_38 = <S2SV_ModStart> } METHOD_10 ( VAR_52 <S2SV_ModEnd> , METHOD_6 ( <S2SV_ModStart> ; METHOD_10 ( VAR_53 <S2SV_ModEnd> , METHOD_8 ( <S2SV_ModStart> ; METHOD_10 ( VAR_54 , VAR_55 ) ; METHOD_10 ( VAR_56 , VAR_57 <S2SV_ModEnd> ) ; VAR_47
<S2SV_ModStart> VAR_4 ) { if ( METHOD_3 ( VAR_4 ) ) { METHOD_2 ( VAR_4 , VAR_5 ) ; return 0 ; }
<S2SV_ModStart> ( VAR_222 , METHOD_31 ( VAR_234 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_37 ; } VAR_49 = <S2SV_ModStart> VAR_40 , VAR_41 , VAR_50 <S2SV_ModStart> ( VAR_42 ) ; if ( VAR_49 ) goto VAR_45
<S2SV_ModStart> ) { const TYPE_9 <S2SV_ModEnd> VAR_46 = VAR_34 <S2SV_ModStart> VAR_5 ; const TYPE_9 <S2SV_ModEnd> VAR_47 = VAR_34
<S2SV_ModStart> VAR_375 ) ; if ( VAR_374 [ 0 ] == '\\0' ) { METHOD_174 ( VAR_776 , VAR_737 , VAR_656 , "Environment<S2SV_blank>variable<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>empty<S2SV_blank>name" ) ; return VAR_779 ; } if ( METHOD_88 ( VAR_374 , '=' ) != VAR_777 ) { METHOD_174 ( VAR_776 , VAR_737 , VAR_656 , "Environment<S2SV_blank>variable<S2SV_blank>name<S2SV_blank>cannot<S2SV_blank>contain<S2SV_blank>\'=\'" ) ; return VAR_779 ; } METHOD_169 ( VAR_453 , VAR_374 ) ; METHOD_91 ( VAR_453 , '=' ) ; METHOD_169 ( VAR_453 , VAR_375 ) ; METHOD_91 ( VAR_453 , '\\0' <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_85 ; goto VAR_90 <S2SV_ModEnd> ; } VAR_89 <S2SV_ModStart> VAR_85 ) ; VAR_90 :
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_11 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if <S2SV_ModEnd> ( ( VAR_12 <S2SV_ModStart> VAR_28 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_30 , "horDiff8" , "%s" , "(cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_29 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> 0 ) { struct STRUCT_OR_UNION_6 VAR_86 = VAR_103 -> VAR_86 ; <S2SV_ModStart> VAR_84 , & <S2SV_ModEnd> VAR_86 ) ;
<S2SV_ModStart> "`%s\'" , VAR_665 ) ; VAR_557 = METHOD_126 ( VAR_557
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> ( VAR_304 && ( <S2SV_ModStart> VAR_24 - 1 ) ) || ! METHOD_25 ( VAR_313 , VAR_302 -> VAR_215 , VAR_302 -> VAR_49
<S2SV_ModStart> ) { TYPE_49 VAR_362 = <S2SV_ModEnd> ( VAR_358 << <S2SV_ModStart> ) + 1 ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_134 , VAR_362 * sizeof ( TYPE_54 ) , VAR_99 ) == - 1 ) goto VAR_360 ; TYPE_49 VAR_111 = METHOD_40 ( VAR_134 , VAR_362
<S2SV_ModStart> TYPE_7 VAR_235 ; struct STRUCT_OR_UNION_9 VAR_237 ; <S2SV_ModStart> . VAR_221 ) { struct STRUCT_OR_UNION_10 * VAR_238 ; METHOD_24 ( ) ; VAR_238 = METHOD_25 ( VAR_214 -> VAR_238 ) ; if ( VAR_238 ) { METHOD_26 ( & VAR_237 , VAR_238 , sizeof ( * VAR_238 ) + VAR_238 -> VAR_221 . VAR_239 ) ; VAR_220 . VAR_221 = & VAR_237 . VAR_221 ; } METHOD_27 ( ) ; } <S2SV_ModEnd> if ( VAR_220 <S2SV_ModStart> . VAR_221 -> VAR_221 . <S2SV_ModStart> . VAR_221 -> VAR_221 .
<S2SV_ModStart> . METHOD_2 ( METHOD_3 ( VAR_28 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_28 ) ; if ( METHOD_7 ( ! METHOD_6 ( & VAR_35 -> VAR_36 ) ) ) return - VAR_38 ; <S2SV_ModStart> -> VAR_37 ; return 0 ;
<S2SV_ModStart> == - VAR_21 && STRUCT_OR_UNION_8 -> VAR_23 -> METHOD_3 ) { <S2SV_ModEnd> VAR_25 = STRUCT_OR_UNION_8 <S2SV_ModStart> VAR_24 ) ; }
<S2SV_ModStart> METHOD_1 ( VAR_2 ) ; if ( VAR_31 -> VAR_26 < 8 || VAR_31 -> VAR_26 > VAR_35 ) METHOD_5 ( 0
<S2SV_ModStart> VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_82 <S2SV_ModEnd> ; if ( <S2SV_ModStart> - VAR_8 ; VAR_82 = VAR_79 -> VAR_83 ; <S2SV_ModStart> - VAR_11 ; if ( METHOD_2 ( & VAR_79 -> VAR_84 ) < 0 ) { METHOD_15 ( & VAR_79 -> VAR_80 ) ; return - VAR_11 ; } <S2SV_ModStart> case VAR_15 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> + 0x36 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 3 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 0 , <S2SV_ModStart> case VAR_24 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 , 1 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 2 , <S2SV_ModStart> 1 ] = VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ] = VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> ; default : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0x08 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> . VAR_61 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> METHOD_13 ( & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 3 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> + 3 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 1 , <S2SV_ModStart> case 2 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0x09 ; VAR_82 -> VAR_85 [ 1 ] = VAR_77 [ 0 ] . VAR_78 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> . VAR_78 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 3 ] <S2SV_ModStart> METHOD_13 ( & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> + 4 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> VAR_75 , & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> & VAR_79 -> VAR_84 ) ; METHOD_15 ( & VAR_79 ->
<S2SV_ModStart> VAR_11 -> VAR_12 && VAR_11 -> VAR_16 ) { METHOD_4 ( & VAR_11 -> VAR_16 -> VAR_17 ) ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_13 ) ; METHOD_5 ( & VAR_11 -> VAR_16 -> VAR_17 ) ; }
<S2SV_ModStart> * VAR_25 ; TYPE_12 <S2SV_ModEnd> VAR_30 = * <S2SV_ModStart> 0 ) { TYPE_12 <S2SV_ModEnd> VAR_16 = (
<S2SV_ModStart> ; if ( VAR_205 &&
<S2SV_ModStart> ) ; } VAR_975 = METHOD_182 ( 0 , 8 , VAR_975 ) ; <S2SV_ModStart> ) ; } VAR_975 = METHOD_182 ( 0 , 8 , VAR_975 ) ;
<S2SV_ModStart> TYPE_4 VAR_30 ; <S2SV_ModEnd> VAR_53 = METHOD_2
<S2SV_ModStart> + 1 ; METHOD_2 ( * VAR_18 , 1 ) ;
<S2SV_ModStart> 0 ) { if ( VAR_564 -> VAR_298 < VAR_533 . VAR_290 ) VAR_564 -> VAR_298 = VAR_533 . VAR_290 ;
<S2SV_ModStart> . VAR_102 , <S2SV_ModEnd> VAR_106 ) ;
<S2SV_ModStart> VAR_79 ; } METHOD_17 ( & VAR_96 ) ; METHOD_24 ( & VAR_87 , VAR_93 , VAR_93 -> VAR_89 ) ; METHOD_22 ( & VAR_96 ) ;
<S2SV_ModStart> ) ) { struct STRUCT_OR_UNION_6 * VAR_149 = <S2SV_ModEnd> list_entry ( VAR_133 <S2SV_ModStart> ; if ( VAR_149 <S2SV_ModEnd> -> VAR_73 & <S2SV_ModStart> = - VAR_85 <S2SV_ModEnd> ; goto VAR_142
<S2SV_ModStart> = METHOD_93 ( <S2SV_ModEnd> VAR_259 [ VAR_97 <S2SV_ModStart> = METHOD_93 ( <S2SV_ModEnd> VAR_259 [ VAR_97
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> -> VAR_4 ; if ( VAR_6 -> VAR_6 > VAR_7 / 2 ) return VAR_8 ; <S2SV_ModStart> VAR_6 ++ ; return VAR_9 ;
<S2SV_ModStart> ) , VAR_287 = 0 , VAR_355 <S2SV_ModStart> , VAR_225 ; if ( VAR_355 ++ ) { METHOD_67 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , VAR_350 ) ; return VAR_352 ; }
<S2SV_ModStart> ) ) ; METHOD_45 ( VAR_351 + VAR_367 -> VAR_254 ) ;
<S2SV_ModStart> ( METHOD_3 ( VAR_41 <S2SV_ModEnd> , METHOD_4 (
<S2SV_ModStart> ; if ( METHOD_12 ( VAR_22 , & STRUCT_OR_UNION_23 -> VAR_23 ) && ! METHOD_12 ( VAR_31 , & STRUCT_OR_UNION_23 -> VAR_23 ) &&
<S2SV_ModStart> { TYPE_12 VAR_25 , VAR_31 <S2SV_ModEnd> ; TYPE_8 * <S2SV_ModStart> TYPE_8 * * VAR_41 <S2SV_ModEnd> = VAR_18 -> <S2SV_ModStart> , VAR_40 ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ( & VAR_41 [ 0 <S2SV_ModEnd> ] -> VAR_35 <S2SV_ModStart> ) ) ; VAR_41 <S2SV_ModEnd> ++ ; } <S2SV_ModStart> "\\n" ) ; VAR_41 <S2SV_ModEnd> += 8 ;
<S2SV_ModStart> VAR_103 ) { TYPE_19 <S2SV_ModEnd> * const VAR_81 <S2SV_ModStart> VAR_82 ) { const TYPE_7 * VAR_97 = METHOD_7 ( VAR_81 , VAR_82 + VAR_83 ) ; if ( VAR_97 == VAR_111 <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; METHOD_8 ( <S2SV_ModEnd> VAR_97 , & <S2SV_ModStart> *= METHOD_11 ( VAR_96 , <S2SV_ModEnd> VAR_97 ) ; <S2SV_ModStart> } VAR_100 += VAR_95 * <S2SV_ModEnd> METHOD_12 ( VAR_96 <S2SV_ModStart> ( VAR_96 , VAR_97 , VAR_98 , VAR_112 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_82 ) { const TYPE_7 * VAR_97 = METHOD_7 ( VAR_81 , VAR_82 + VAR_83 ) ; if ( VAR_97 == VAR_111 <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; METHOD_8 ( <S2SV_ModEnd> VAR_97 , & <S2SV_ModStart> *= METHOD_11 ( VAR_96 , <S2SV_ModEnd> VAR_97 ) ; <S2SV_ModStart> } VAR_100 += VAR_95 * <S2SV_ModEnd> METHOD_12 ( VAR_96 <S2SV_ModStart> ( VAR_96 , VAR_97 , VAR_98 , VAR_112 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) * 20 ) ; VAR_110 = METHOD_13 ( VAR_110 , VAR_113
<S2SV_ModStart> ( METHOD_2 ( "E145:<S2SV_blank>Shell<S2SV_blank>commands<S2SV_blank>and<S2SV_blank>some<S2SV_blank>functionality<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>rvim" <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> ) goto VAR_51 <S2SV_ModEnd> ; VAR_48 =
<S2SV_ModStart> VAR_23 ++ ) METHOD_3 <S2SV_ModEnd> ( VAR_19 ->
<S2SV_ModStart> TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_196 , const <S2SV_ModStart> ) == VAR_131 && METHOD_27 ( VAR_192 -> VAR_193 ) == VAR_197 ) { TYPE_3 VAR_189 = ( ( TYPE_3 ) ( VAR_192 + 1 ) -> VAR_189 << 32 ) | ( TYPE_4 ) VAR_192 -> VAR_189 ; TYPE_5 VAR_198 = VAR_192 -> VAR_178 == VAR_199 ; if ( VAR_198 && ! VAR_196 -> VAR_200 ) VAR_189 = 0 ; METHOD_41 ( "(%02x)<S2SV_blank>r%d<S2SV_blank>=<S2SV_blank>0x%llx\\n" , VAR_192 -> VAR_193 , <S2SV_ModEnd> VAR_192 -> VAR_184 <S2SV_ModStart> -> VAR_184 , ( unsigned TYPE_6 TYPE_6 ) <S2SV_ModEnd> VAR_189 ) ;
<S2SV_ModStart> TYPE_1 METHOD_0 ( TYPE_12 <S2SV_ModEnd> * VAR_25 , <S2SV_ModStart> ( TYPE_9 ) METHOD_8 <S2SV_ModEnd> ( VAR_25 ,
<S2SV_ModStart> , - 1 ) ; METHOD_8 ( VAR_24 -> VAR_25 -> VAR_19 , VAR_23
<S2SV_ModStart> ( ! VAR_35 || VAR_4 < 2 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; }
<S2SV_ModStart> ; if ( VAR_34 / 3 >= VAR_32 -> VAR_33 && <S2SV_ModEnd> VAR_32 -> VAR_33 <S2SV_ModStart> VAR_33 * 3 < VAR_32 -> mt_allocated <S2SV_ModEnd> * 2 ) <S2SV_ModStart> * 2 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; } size_t VAR_35 = <S2SV_ModEnd> ( VAR_32 -> <S2SV_ModStart> VAR_32 -> VAR_33 ; return METHOD_4 ( VAR_32 , VAR_35
<S2SV_ModStart> return VAR_52 ; TYPE_5 VAR_105 = 0 ; if ( METHOD_16 ( sizeof ( TYPE_7 ) , VAR_157 , & VAR_105 ) ) return VAR_176 ; <S2SV_ModStart> = METHOD_6 ( VAR_105 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> 0x05 , 0x00 } ; const TYPE_20 VAR_182 [ ] = { 0x04 , 0x01 , 0x60 , 0x8f , 0xff , 0xff , 0xff , 0x7f <S2SV_ModStart> VAR_180 ) ; if ( VAR_180 == 0 ) { <S2SV_ModStart> VAR_181 ) ; VAR_181 = METHOD_52 ( VAR_170 ) ; } VAR_180 = METHOD_53 ( VAR_182 , sizeof ( VAR_182 ) ) ; VAR_180 = METHOD_54 ( VAR_181 , VAR_179 , sizeof ( VAR_179 ) ) ; METHOD_55 ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( TYPE_30 ) VAR_180 ) ; METHOD_56 ( VAR_179 , VAR_180 ) ; METHOD_57 ( VAR_181 ) ;
<S2SV_ModStart> ) ; } if ( VAR_57 ) METHOD_24 ( VAR_62 , VAR_63 , VAR_64 ) ;
<S2SV_ModStart> [ VAR_61 ] && VAR_62 -> VAR_60 [ VAR_61 ]
<S2SV_ModStart> VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_41 ; struct <S2SV_ModStart> * VAR_40 ; METHOD_4 ( ) ; VAR_41 = METHOD_2 ( VAR_39 ) ; <S2SV_ModStart> if ( ! VAR_41 || ! VAR_41 -> VAR_42 || VAR_41 -> VAR_43 -> METHOD_12 ( VAR_41 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> 0 ) ) { METHOD_11 ( ) ; return ; } <S2SV_ModEnd> VAR_19 = METHOD_5 <S2SV_ModStart> VAR_37 ) ; VAR_41 = <S2SV_ModEnd> ! METHOD_9 ( <S2SV_ModStart> ( VAR_40 ) ? <S2SV_ModEnd> & VAR_40 -> <S2SV_ModStart> & VAR_40 -> VAR_41 : VAR_44 ; METHOD_13 ( VAR_39 ,
<S2SV_ModStart> * VAR_3 >= 112 <S2SV_ModEnd> && VAR_12 [
<S2SV_ModStart> TYPE_1 * VAR_12 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> < 0 ) { VAR_296 = ( unsigned TYPE_75 * ) METHOD_46 ( VAR_296 ) ; METHOD_40 ( VAR_249 , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * VAR_274 ++ <S2SV_ModStart> < 0 ) { VAR_296 = ( unsigned TYPE_75 * ) METHOD_46 ( VAR_296 ) ; METHOD_40 ( VAR_249 , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * VAR_274 ++
<S2SV_ModStart> TYPE_8 VAR_58 = METHOD_11 <S2SV_ModEnd> ( VAR_56 )
<S2SV_ModStart> ) ; return METHOD_3 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> = 1.0f / METHOD_5 ( VAR_159 . VAR_144 , METHOD_5 <S2SV_ModEnd> ( VAR_159 .
<S2SV_ModStart> TYPE_5 VAR_8 , TYPE_7 <S2SV_ModEnd> * VAR_17 ) <S2SV_ModStart> TYPE_5 VAR_16 ; TYPE_7 <S2SV_ModEnd> VAR_18 ; VAR_18
<S2SV_ModStart> ; TYPE_8 VAR_17 ; if ( ! VAR_51 -> VAR_56 ) break ; VAR_17
<S2SV_ModStart> ; TYPE_5 VAR_24 <S2SV_ModEnd> ; VAR_24 =
<S2SV_ModStart> VAR_9 ) ; METHOD_2 <S2SV_ModEnd> ( VAR_10 , <S2SV_ModStart> VAR_10 , VAR_8 <S2SV_ModEnd> , VAR_9 )
<S2SV_ModStart> VAR_9 , VAR_11 , VAR_12
<S2SV_ModStart> VAR_18 ) { TYPE_0 VAR_21 = VAR_22 ; <S2SV_ModStart> VAR_18 ) ; if ( ! METHOD_3 ( VAR_18 ) ) { <S2SV_ModStart> = 0 ; VAR_21 = VAR_20 ; } <S2SV_ModStart> ) ; return VAR_21 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> return 0 ; if ( VAR_83 -> VAR_87 < 2 || VAR_83 -> VAR_13 < 2 ) { METHOD_10 ( & VAR_83 -> VAR_88 -> VAR_8 , "missing<S2SV_blank>endpoints\\n" ) ; return - VAR_89 ; }
<S2SV_ModStart> - VAR_16 ; VAR_73 -> VAR_74 = 0 ; <S2SV_ModStart> goto VAR_78 ; <S2SV_ModEnd> if ( VAR_73
<S2SV_ModStart> "lept/model" ) ; METHOD_88 ( "lept/dewmod" ) ; METHOD_14 ( "lept/dewmod" ) ; <S2SV_ModStart> METHOD_86 ( "pdf<S2SV_blank>file<S2SV_blank>made:<S2SV_blank>/tmp/lept/model/dewarptest1.pdf\\n" <S2SV_ModEnd> ) ; METHOD_98
<S2SV_ModStart> 0 ) ; if ( VAR_253 -> VAR_185 [ 0 ] . VAR_187 . VAR_257 < 1 ) { METHOD_49 ( & VAR_253 -> VAR_242 , "interface<S2SV_blank>has<S2SV_blank>%d<S2SV_blank>endpoints,<S2SV_blank>but<S2SV_blank>must<S2SV_blank>have<S2SV_blank>minimum<S2SV_blank>1\\n" , VAR_253 -> VAR_185 [ 0 ] . VAR_187 . VAR_257 ) ; VAR_256 = - VAR_258 ; goto VAR_245 ; } <S2SV_ModStart> "Aiptek<S2SV_blank>tried<S2SV_blank>all<S2SV_blank>speeds,<S2SV_blank>no<S2SV_blank>sane<S2SV_blank>response\\n" ) ; VAR_256 = - VAR_258 ;
<S2SV_ModStart> ) VAR_6 ; TYPE_7 <S2SV_ModEnd> VAR_26 ; METHOD_1
<S2SV_ModStart> , "Content-Type" , "%s" ,
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> METHOD_14 ( "accept,<S2SV_blank>" <S2SV_ModStart> continue ; } handle_modern_connection ( VAR_137 , VAR_102 ) ; } for ( VAR_126 = 0 ; VAR_126 < VAR_137 -> VAR_121 ; VAR_126 ++ ) { TYPE_18 VAR_138 ; TYPE_20 * VAR_139 ; VAR_139 = & ( METHOD_22 ( VAR_137 , TYPE_20 , VAR_126 ) ) ; if ( VAR_139 -> VAR_134 < 0 ) { continue ; } if ( METHOD_23 ( VAR_139 -> VAR_134 , & VAR_131 ) ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> = METHOD_24 ( VAR_139 -> VAR_134 <S2SV_ModEnd> , ( struct <S2SV_ModStart> continue ; } METHOD_26 ( VAR_137 , VAR_138 , VAR_139 , VAR_140 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_50 -> VAR_47 = 0 ; VAR_50 ->
<S2SV_ModStart> return ; } if ( VAR_100 < sizeof ( struct STRUCT_OR_UNION_2 ) ) goto VAR_101 ; <S2SV_ModStart> ) ) ; VAR_99 += 4 ; VAR_100 -= 4 ; if ( VAR_100 < 4 ) goto VAR_101 ; <S2SV_ModStart> ( VAR_99 [ 2 <S2SV_ModEnd> ] , 2 <S2SV_ModStart> & VAR_99 [ 2 <S2SV_ModEnd> ] ) ) <S2SV_ModStart> ; VAR_99 += 4 <S2SV_ModEnd> ; VAR_100 -= <S2SV_ModStart> ; VAR_100 -= 4 ; if ( VAR_100 < 4 ) goto VAR_101 <S2SV_ModEnd> ; METHOD_37 ( <S2SV_ModStart> -- ) { if ( VAR_100 < 4 ) goto VAR_101 ; <S2SV_ModStart> ) ) ; VAR_99 += 4 ; VAR_100 -= 4 ; if ( VAR_100 < 4 ) goto VAR_101 ; <S2SV_ModStart> ( VAR_99 [ 0 <S2SV_ModEnd> ] , sizeof <S2SV_ModStart> & VAR_99 [ 0 <S2SV_ModEnd> ] ) != <S2SV_ModStart> & VAR_99 [ 0 ] ) ) ) ; VAR_99 += 4 ; VAR_100 -= 4 ; if ( VAR_100 < 4 ) goto VAR_101 <S2SV_ModEnd> ; METHOD_37 ( <S2SV_ModStart> ( VAR_99 [ 0 <S2SV_ModEnd> ] , 4 <S2SV_ModStart> & VAR_99 [ 0 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> & VAR_99 [ 2 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ; VAR_99 += 4 <S2SV_ModEnd> ; VAR_100 -= <S2SV_ModStart> ; VAR_100 -= 4 <S2SV_ModEnd> ; for ( <S2SV_ModStart> = "Prune" ; if ( VAR_100 < 6 ) goto VAR_101 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 ( <S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_24 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , * VAR_13 <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> VAR_38 , VAR_37 , VAR_91 <S2SV_ModStart> ; for ( VAR_91 = 0 ; VAR_91 < 25 ; ++ VAR_91 <S2SV_ModEnd> ) { VAR_23 <S2SV_ModStart> ; } } METHOD_9 ( & VAR_89 -> VAR_72 , VAR_92 , "Input<S2SV_blank>requires<S2SV_blank>too<S2SV_blank>many<S2SV_blank>filters<S2SV_blank>for<S2SV_blank>decoding" ) ; return ( VAR_90 ) ;
<S2SV_ModStart> METHOD_10 ( STRUCT_OR_UNION_13 ) ; METHOD_15 ( VAR_77 , VAR_71 <S2SV_ModStart> VAR_82 ++ ; <S2SV_ModEnd> VAR_87 += VAR_71
<S2SV_ModStart> VAR_3 ) ; if ( VAR_4 -> VAR_5 . VAR_6 ) { <S2SV_ModStart> ) ; } }
<S2SV_ModStart> & VAR_5 ) || <S2SV_ModEnd> ( VAR_26 -> <S2SV_ModStart> VAR_12 ) ) ) { METHOD_5 ( VAR_26 ) ; <S2SV_ModStart> return VAR_13 ; }
<S2SV_ModStart> VAR_110 , VAR_72 ; TYPE_4 VAR_111 ; TYPE_5 VAR_112 = offsetof ( struct STRUCT_OR_UNION_4 , VAR_91 ) <S2SV_ModStart> VAR_50 ; } if ( VAR_70 -> VAR_113 < sizeof ( struct STRUCT_OR_UNION_4 ) ) { METHOD_19 ( "hid<S2SV_blank>descriptor<S2SV_blank>is<S2SV_blank>too<S2SV_blank>short\\n" ) ; return - VAR_78 ; } <S2SV_ModStart> VAR_70 -> VAR_58 ; VAR_111 = min_t ( TYPE_4 , VAR_70 -> VAR_62 , ( VAR_70 -> VAR_113 - VAR_112 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) <S2SV_ModStart> ; VAR_72 < VAR_111 <S2SV_ModEnd> ; VAR_72 ++
<S2SV_ModStart> METHOD_0 ( const TYPE_10 <S2SV_ModEnd> * VAR_20 , <S2SV_ModStart> , VAR_46 ; TYPE_10 <S2SV_ModEnd> VAR_30 [ 16 <S2SV_ModStart> 16 ] ; TYPE_10 <S2SV_ModEnd> * VAR_21 = <S2SV_ModStart> = VAR_30 ; TYPE_10 <S2SV_ModEnd> VAR_34 [ 16 <S2SV_ModStart> ++ VAR_46 ) { <S2SV_ModStart> VAR_48 ] = METHOD_5 ( <S2SV_ModEnd> VAR_45 [ VAR_46 <S2SV_ModStart> + VAR_48 ] , METHOD_4 ( VAR_43 [ VAR_46 ] , 6 ) ) ; } <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> , sizeof ( *
<S2SV_ModStart> VAR_36 -> VAR_37 && VAR_40 < VAR_33 <S2SV_ModStart> VAR_36 -> VAR_37 && VAR_40 < VAR_33
<S2SV_ModStart> ] , VAR_120 + 4 <S2SV_ModStart> VAR_122 += VAR_120 + 4
<S2SV_ModStart> VAR_114 ; } if ( METHOD_25 ( METHOD_14 ( VAR_109 . VAR_80 ) , VAR_109 . VAR_108 ) ) METHOD_6 ( VAR_100 , ( METHOD_26 ( VAR_116 ) , METHOD_7 ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> if ( VAR_44 == VAR_56 ) { VAR_59 = VAR_60 ; <S2SV_ModEnd> goto VAR_48 ; <S2SV_ModStart> VAR_48 ; } VAR_59 = METHOD_8 ( VAR_53 , VAR_43 , VAR_44 , VAR_45 , * VAR_55 ) ;
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_27 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , * VAR_26 <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> -> VAR_238 + <S2SV_ModEnd> VAR_243 -> VAR_178 <S2SV_ModStart> -> VAR_252 + <S2SV_ModEnd> VAR_243 -> VAR_178
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( METHOD_1 <S2SV_ModStart> ) ; goto VAR_85 <S2SV_ModEnd> ; } switch <S2SV_ModStart> "lifetime<S2SV_blank>already<S2SV_blank>set" ) ; VAR_74 = VAR_86 ; goto VAR_85 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_85 <S2SV_ModEnd> ; } * <S2SV_ModStart> "confirm<S2SV_blank>already<S2SV_blank>set" ) ; VAR_74 = VAR_86 ; goto VAR_85 <S2SV_ModEnd> ; } * <S2SV_ModStart> "maxsign<S2SV_blank>not<S2SV_blank>valid<S2SV_blank>here" ) ; VAR_74 = VAR_86 ; goto VAR_85 <S2SV_ModEnd> ; } if <S2SV_ModStart> "maxsign<S2SV_blank>already<S2SV_blank>set" ) ; VAR_74 = VAR_86 ; goto VAR_85 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_85 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_85 <S2SV_ModEnd> ; } break <S2SV_ModStart> ( VAR_74 = METHOD_28 ( VAR_71 , VAR_72 ) ) != 0 ) goto VAR_85 ; break ; default : METHOD_25 ( <S2SV_ModEnd> "Unknown<S2SV_blank>constraint<S2SV_blank>%d" , VAR_80 <S2SV_ModStart> VAR_80 ) ; VAR_74 = VAR_87 ; goto VAR_85 ; } } VAR_74 = 0 ; VAR_85 : return VAR_74 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> return VAR_43 ; if ( VAR_45 >= sizeof ( VAR_57 ) ) { METHOD_15 ( VAR_59 , "%s:<S2SV_blank>Truncating<S2SV_blank>overflowed<S2SV_blank>address<S2SV_blank>\'%.*s\'" , VAR_60 , VAR_45 , VAR_46 ) ; VAR_45 = sizeof ( VAR_57 ) - 1 ; }
<S2SV_ModStart> * VAR_44 , TYPE_10 <S2SV_ModEnd> METHOD_3 , TYPE_5 <S2SV_ModStart> TYPE_9 VAR_20 = METHOD_4 ( sizeof ( VAR_22 ) , VAR_25 ) <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> != 0x2a ) return <S2SV_ModEnd> VAR_49 ; VAR_44
<S2SV_ModStart> VAR_72 ) ; if ( ! METHOD_17 ( VAR_73 ) ) goto VAR_95 ; <S2SV_ModStart> VAR_70 ; } VAR_95 :
<S2SV_ModStart> return VAR_38 ; if ( 0 >= TYPE_132 -> VAR_251 ) { break ; }
<S2SV_ModStart> } else { METHOD_3 <S2SV_ModEnd> ( VAR_50 , <S2SV_ModStart> } else { METHOD_3 <S2SV_ModEnd> ( VAR_86 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> TYPE_4 VAR_39 ; if ( ! VAR_34 ) return VAR_42 ; <S2SV_ModStart> == 0 ) { if ( VAR_34 -> VAR_35 -> VAR_43 < VAR_39 ) return VAR_42 ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < VAR_39 ) { if ( ! <S2SV_ModStart> VAR_37 ] , VAR_34 -> VAR_35 -> VAR_43 , VAR_39 ) ) return VAR_42 ; } else { if ( VAR_34 -> VAR_35 -> VAR_43 < VAR_39 ) return VAR_42 ; <S2SV_ModEnd> METHOD_3 ( VAR_34 <S2SV_ModStart> VAR_39 ) ; } <S2SV_ModStart> VAR_41 ; } return VAR_44 ;
<S2SV_ModStart> VAR_70 ) ; METHOD_30 ( & STRUCT_OR_UNION_9 -> VAR_71 . VAR_72 <S2SV_ModEnd> ) ; METHOD_23 <S2SV_ModStart> VAR_70 ) ; spin_unlock_bh ( & STRUCT_OR_UNION_9 -> VAR_71 . VAR_72 <S2SV_ModEnd> ) ; METHOD_28
<S2SV_ModStart> -> VAR_289 - 3 <S2SV_ModEnd> ) ; VAR_290 <S2SV_ModStart> VAR_300 ) ; VAR_300 += METHOD_66 ( VAR_302 ) ; VAR_298 ++ <S2SV_ModEnd> ; } if <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 1 ) { <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {
<S2SV_ModStart> ( VAR_270 ) ; struct STRUCT_OR_UNION_20 * VAR_192 <S2SV_ModStart> ) ) ; VAR_192 = METHOD_64 <S2SV_ModEnd> ( VAR_180 -> <S2SV_ModStart> -> VAR_192 ) ; if ( VAR_192 ) { <S2SV_ModEnd> VAR_192 = METHOD_35 <S2SV_ModStart> ( VAR_263 , VAR_192 ) ; METHOD_65 ( VAR_260 -> VAR_192 , VAR_192 ) ; } <S2SV_ModEnd> METHOD_37 ( VAR_263 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_192 ) METHOD_37 <S2SV_ModStart> -> VAR_187 = <S2SV_ModEnd> VAR_192 -> VAR_190 <S2SV_ModStart> -> VAR_190 + <S2SV_ModEnd> VAR_192 -> VAR_193 <S2SV_ModStart> VAR_192 -> VAR_193 <S2SV_ModEnd> ; METHOD_38 (
<S2SV_ModStart> * VAR_12 , TYPE_6 <S2SV_ModEnd> VAR_21 , TYPE_5 <S2SV_ModStart> , TYPE_5 VAR_20 <S2SV_ModEnd> ) { METHOD_2 <S2SV_ModStart> ) ; return VAR_12 <S2SV_ModEnd> -> VAR_19 [ <S2SV_ModStart> ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( ! VAR_18 ) return - VAR_16 ; if ( VAR_18 -> VAR_20 . VAR_54 < 1
<S2SV_ModStart> if ( VAR_352 < VAR_143 || VAR_352
<S2SV_ModStart> ; if ( METHOD_41 ( VAR_342 ) ) break ; if (
<S2SV_ModStart> VAR_146 ++ ; if ( ( TYPE_16 ) VAR_146 >= sizeof ( VAR_145 ) ) { METHOD_61 ( VAR_329 , VAR_330 , "seamless_process_line(),<S2SV_blank>icon<S2SV_blank>data<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>icon_buf" ) ; break ; }
<S2SV_ModStart> TYPE_13 * VAR_68 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } VAR_68 = ( TYPE_13 * ) METHOD_2 ( VAR_38 ) ;
<S2SV_ModStart> == 0x89 ) { <S2SV_ModStart> return - VAR_220 ; } else METHOD_32 ( & VAR_167 , 0 , sizeof ( VAR_167 ) )
<S2SV_ModStart> VAR_18 ) { if ( VAR_9 > VAR_14 ) { METHOD_6 ( "invalid<S2SV_blank>path<S2SV_blank>size:<S2SV_blank>%d<S2SV_blank>(max<S2SV_blank>%d)\\n" , VAR_9 , VAR_14 ) ; return VAR_20 ; } TYPE_5 * VAR_17 = METHOD_7 ( <S2SV_ModEnd> VAR_6 , VAR_9 <S2SV_ModStart> VAR_6 , VAR_9 , "" , 0 ) <S2SV_ModEnd> ; TYPE_5 * <S2SV_ModStart> VAR_21 ) ; METHOD_5 ( VAR_17 ) ; <S2SV_ModStart> VAR_20 ; } METHOD_5 ( VAR_17 ) ;
<S2SV_ModStart> , VAR_24 ) * ( ( VAR_23 -> VAR_34 & VAR_35 ) ? 2 : 1 )
<S2SV_ModStart> VAR_2 ) { METHOD_2 <S2SV_ModEnd> ( VAR_2 ->
<S2SV_ModStart> ; default : return VAR_90 <S2SV_ModEnd> ; } switch <S2SV_ModStart> ; default : return VAR_91 <S2SV_ModEnd> ; } if
<S2SV_ModStart> { if ( METHOD_3 ( VAR_13 ) ) continue ; if (
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_13 * VAR_49 ; struct STRUCT_OR_UNION_14 * VAR_54 = METHOD_22 ( STRUCT_OR_UNION_12 -> VAR_50 ) -> VAR_55 <S2SV_ModEnd> ; if ( <S2SV_ModStart> : VAR_49 = METHOD_23 ( VAR_54 , VAR_52 ) ; while ( VAR_49 ) { struct STRUCT_OR_UNION_7 * VAR_47 ; VAR_47 = METHOD_6 ( <S2SV_ModEnd> STRUCT_OR_UNION_12 -> VAR_50 <S2SV_ModStart> STRUCT_OR_UNION_12 -> VAR_50 , VAR_49 -> VAR_35 ) ; if ( ! VAR_47 ) { METHOD_7 ( STRUCT_OR_UNION_12 -> VAR_50 , "ext2_xattr_cache_find" , "inode<S2SV_blank>%ld:<S2SV_blank>block<S2SV_blank>%ld<S2SV_blank>read<S2SV_blank>error" , STRUCT_OR_UNION_12 -> VAR_27 , ( unsigned TYPE_3 ) VAR_49 -> VAR_35 ) ; } else { METHOD_8 ( VAR_47 ) ; if ( METHOD_24 ( & VAR_49 -> VAR_56 ) ) { METHOD_25 ( VAR_54 , VAR_49 ) ; METHOD_19 ( VAR_47 ) ; METHOD_20 ( VAR_47 ) ; <S2SV_ModEnd> goto VAR_20 ; <S2SV_ModStart> goto VAR_20 ; } else if ( METHOD_12 ( METHOD_15 ( VAR_47 ) -> VAR_37 ) > VAR_38 ) { METHOD_11 ( STRUCT_OR_UNION_12 , "block<S2SV_blank>%ld<S2SV_blank>refcount<S2SV_blank>%d>%d" , <S2SV_ModEnd> ( unsigned TYPE_3 <S2SV_ModStart> VAR_49 -> VAR_35 <S2SV_ModEnd> , METHOD_12 ( <S2SV_ModStart> ) ) ; METHOD_26 ( VAR_54 , VAR_49 ) ; METHOD_25 ( VAR_54 , <S2SV_ModEnd> VAR_49 ) ; <S2SV_ModStart> } VAR_49 = METHOD_27 ( VAR_54 , VAR_49 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; if ( METHOD_45 <S2SV_ModEnd> ( VAR_152 ,
<S2SV_ModStart> TYPE_5 VAR_51 ; VAR_38 -> VAR_14 = 1 ; if ( VAR_29 -> VAR_14 ) return ; <S2SV_ModStart> METHOD_2 ( VAR_38 , VAR_42
<S2SV_ModStart> 0 ) { const TYPE_8 VAR_44 = VAR_39 - VAR_43 ; <S2SV_ModStart> + VAR_43 , ( TYPE_9 ) VAR_44 ) ; VAR_43 = VAR_42 <S2SV_ModEnd> ; VAR_42 += <S2SV_ModStart> ; VAR_42 += VAR_44 <S2SV_ModEnd> ; } METHOD_3
<S2SV_ModStart> VAR_38 == VAR_29 || VAR_42
<S2SV_ModStart> VAR_48 ) { TYPE_0 VAR_49 = sizeof ( VAR_16 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( VAR_26 < 17 ) { return VAR_50 ; } if ( METHOD_4 ( VAR_16 , VAR_25 , sizeof ( VAR_16 ) ) != 0 ) { return VAR_47 ; } <S2SV_ModEnd> VAR_43 -> VAR_30 <S2SV_ModStart> -> VAR_30 = VAR_25 [ VAR_49 ] << 24 | VAR_25 [ VAR_49 + 1 ] << 16 | VAR_25 [ VAR_49 + 2 ] << 8 | VAR_25 [ VAR_49 + 3 ] ; VAR_49 += 4 <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_34 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_38 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_42 = VAR_25 [ VAR_49 ++ ] ; VAR_43 -> VAR_51 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; VAR_43 -> <S2SV_ModStart> -> VAR_46 = VAR_25 [ VAR_49 ++ ] <S2SV_ModEnd> ; } else
<S2SV_ModStart> while ( VAR_11 && VAR_11
<S2SV_ModStart> . VAR_11 = VAR_36 -> VAR_39 <S2SV_ModEnd> ; VAR_31 . <S2SV_ModStart> . VAR_13 = VAR_36 -> VAR_40 <S2SV_ModEnd> ; VAR_38 =
<S2SV_ModStart> VAR_16 ) { TYPE_0 VAR_17 ; unsigned TYPE_1 TYPE_2 ; VAR_17 = emulate_pop ( VAR_16 , & TYPE_2 , <S2SV_ModEnd> VAR_16 -> VAR_15 <S2SV_ModStart> VAR_16 -> VAR_15 ) ; if ( VAR_17 != X86EMUL_CONTINUE ) return VAR_17 ; return assign_eip_near ( VAR_16 , TYPE_2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; TYPE_4 VAR_86 = VAR_92 ; TYPE_4 VAR_88 = VAR_92 <S2SV_ModEnd> ; TYPE_5 VAR_87 <S2SV_ModStart> VAR_84 ) ; VAR_89 : <S2SV_ModStart> VAR_88 ) ; <S2SV_ModEnd> METHOD_17 ( VAR_90
<S2SV_ModStart> VAR_23 ) ; if ( STRUCT_OR_UNION_23 -> VAR_26 -> METHOD_14 ) STRUCT_OR_UNION_23 -> VAR_26 -> METHOD_14 ( STRUCT_OR_UNION_23 ) ; <S2SV_ModStart> STRUCT_OR_UNION_23 -> VAR_24 <S2SV_ModEnd> ) ; METHOD_15
<S2SV_ModStart> , TYPE_3 VAR_21 , TYPE_9 VAR_30 <S2SV_ModStart> ( VAR_10 , VAR_30 ? "wx.ufdio" : "a.ufdio" <S2SV_ModEnd> ) ; METHOD_3 <S2SV_ModStart> VAR_11 ) ; if ( ! VAR_30 && VAR_26 != VAR_6 && ! METHOD_7 ( VAR_26 , VAR_10 ) ) { VAR_29 = VAR_14 ; goto VAR_22 ; }
<S2SV_ModStart> TYPE_1 * VAR_34 , unsigned VAR_35 <S2SV_ModStart> VAR_33 == 0 || ( unsigned ) VAR_33 > VAR_35 <S2SV_ModStart> while ( VAR_33 >= 3 && <S2SV_ModEnd> * VAR_34 == <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 1 ) ; break ; default : printk ( KERN_DEBUG "ROSE:<S2SV_blank>rose_parse_facilities<S2SV_blank>-<S2SV_blank>unknown<S2SV_blank>facilities<S2SV_blank>family<S2SV_blank>%02X\\n" , * VAR_34 ) ; VAR_31 = 1 ; break ; } <S2SV_ModStart> VAR_31 < 0 ) return 0 ; if ( METHOD_3 ( VAR_31 >= VAR_33 ) <S2SV_ModStart> + 1 ; } return VAR_33 == 0 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_61 ) ) { <S2SV_ModStart> VAR_68 ) ; }
<S2SV_ModStart> , TYPE_5 VAR_11 , unsigned TYPE_4 VAR_22 <S2SV_ModStart> const TYPE_6 * VAR_21 ; switch ( VAR_22 ) { case 8 : <S2SV_ModEnd> VAR_21 = VAR_11 <S2SV_ModStart> : "C420jpeg\\n" ; break ; case 9 : VAR_21 = VAR_11 == VAR_23 ? "C444p9<S2SV_blank>XYSCSS=444P9\\n" : VAR_11 == VAR_24 ? "C422p9<S2SV_blank>XYSCSS=422P9\\n" : "C420p9<S2SV_blank>XYSCSS=420P9\\n" ; break ; case 10 : VAR_21 = VAR_11 == VAR_23 ? "C444p10<S2SV_blank>XYSCSS=444P10\\n" : VAR_11 == VAR_24 ? "C422p10<S2SV_blank>XYSCSS=422P10\\n" : "C420p10<S2SV_blank>XYSCSS=420P10\\n" ; break ; case 12 : VAR_21 = VAR_11 == VAR_23 ? "C444p12<S2SV_blank>XYSCSS=444P12\\n" : VAR_11 == VAR_24 ? "C422p12<S2SV_blank>XYSCSS=422P12\\n" : "C420p12<S2SV_blank>XYSCSS=420P12\\n" ; break ; case 14 : VAR_21 = VAR_11 == VAR_23 ? "C444p14<S2SV_blank>XYSCSS=444P14\\n" : VAR_11 == VAR_24 ? "C422p14<S2SV_blank>XYSCSS=422P14\\n" : "C420p14<S2SV_blank>XYSCSS=420P14\\n" ; break ; case 16 : VAR_21 = VAR_11 == VAR_23 ? "C444p16<S2SV_blank>XYSCSS=444P16\\n" : VAR_11 == VAR_24 ? "C422p16<S2SV_blank>XYSCSS=422P16\\n" : "C420p16<S2SV_blank>XYSCSS=420P16\\n" ; break ; default : VAR_21 = VAR_25 ; METHOD_2 ( 0 ) ; }
<S2SV_ModStart> VAR_22 ; const TYPE_6 <S2SV_ModEnd> * VAR_13 = <S2SV_ModStart> = VAR_22 -> VAR_25 <S2SV_ModEnd> * VAR_13 ->
<S2SV_ModStart> ) >= 0 && METHOD_36 ( VAR_104 -> VAR_63 , VAR_109 ) == ( TYPE_7 * ) VAR_113
<S2SV_ModStart> STRUCT_OR_UNION_7 ) ; <S2SV_ModEnd> METHOD_11 ( VAR_31
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> VAR_10 ) { TYPE_5 <S2SV_ModEnd> * const VAR_15 <S2SV_ModStart> VAR_15 = ( TYPE_5 <S2SV_ModEnd> * ) METHOD_1 <S2SV_ModStart> } return ( TYPE_5 <S2SV_ModEnd> * ) VAR_16
<S2SV_ModStart> "" ) ; if ( ! METHOD_29 ( VAR_62 ) ) return - VAR_113 ;
<S2SV_ModStart> ) ; else { METHOD_3 ( VAR_10 , <S2SV_ModEnd> "vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n" ) ; <S2SV_ModStart> "vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n" ) ; return 0 ; } if ( VAR_112 . VAR_107 . VAR_33 & 7 ) { METHOD_3 ( VAR_10 , "height<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>8<S2SV_blank>when<S2SV_blank>using<S2SV_blank>vertical_byte\\n" ) ; return 0 ; }
<S2SV_ModStart> * VAR_21 , TYPE_12 VAR_25 , TYPE_12 <S2SV_ModEnd> * VAR_37 , <S2SV_ModStart> * VAR_37 , TYPE_12 <S2SV_ModEnd> VAR_3 ) { <S2SV_ModStart> = 0 ; TYPE_12 <S2SV_ModEnd> VAR_36 , VAR_38
<S2SV_ModStart> VAR_5 & ( 1U << ( unsigned TYPE_2 ) <S2SV_ModEnd> VAR_7 ) )
<S2SV_ModStart> * VAR_13 ; TYPE_0 VAR_16 = - 1 ; <S2SV_ModStart> 0 ) ) goto VAR_17 <S2SV_ModEnd> ; VAR_14 = <S2SV_ModStart> != VAR_9 ) goto VAR_17 <S2SV_ModEnd> ; VAR_13 = <S2SV_ModStart> VAR_14 ) ; VAR_16 = <S2SV_ModEnd> METHOD_2 ( VAR_13 <S2SV_ModStart> 1 ) ; VAR_17 : METHOD_3 ( ) ; return VAR_16 ;
<S2SV_ModStart> ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( VAR_34 <S2SV_ModEnd> <= VAR_13 ) <S2SV_ModStart> VAR_13 ) { struct STRUCT_OR_UNION_4 * VAR_31 ; <S2SV_ModStart> VAR_34 ; } if ( VAR_34 + sizeof ( struct STRUCT_OR_UNION_4 ) > VAR_13 ) return - VAR_35 ; VAR_31 = ( struct STRUCT_OR_UNION_4 * ) ( METHOD_7 ( VAR_32 ) + VAR_34 ) ; <S2SV_ModStart> -> VAR_30 ; } return - VAR_35 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> , VAR_94 ; unsigned TYPE_6 VAR_96 = 0 ; <S2SV_ModStart> ( TYPE_16 , ( unsigned TYPE_6 TYPE_19 * ) & VAR_96 <S2SV_ModEnd> , TYPE_18 , <S2SV_ModStart> ; VAR_94 |= METHOD_25 ( VAR_96 , TYPE_17 ) ; VAR_94 |=
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> TYPE_5 * ) METHOD_3 ( VAR_42 , sizeof ( TYPE_5 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_85 ; } return ( <S2SV_ModStart> VAR_87 , 4 , VAR_83 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_0 * ) VAR_2 ) ;
<S2SV_ModStart> VAR_312 < 0 && ! VAR_311 -> VAR_313
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> : if ( VAR_112 == VAR_20 ||
<S2SV_ModStart> ( VAR_23 ) && ! METHOD_10 ( VAR_23 )
<S2SV_ModStart> VAR_122 ) ; if ( VAR_196 -> VAR_129 == VAR_132 ) { METHOD_10 ( & VAR_196 -> VAR_122 ) ; VAR_202 = - VAR_203 ; goto VAR_200 ; }
<S2SV_ModStart> ) ) ; if ( VAR_165 == VAR_168 ) break ;
<S2SV_ModStart> ; VAR_33 : if ( ! ( VAR_3 -> VAR_36 & VAR_37 ) )
<S2SV_ModStart> VAR_15 ) { struct STRUCT_OR_UNION_4 * VAR_43 = & VAR_39 -> VAR_44 . VAR_45 [ VAR_14 ] ; TYPE_3 VAR_46 = sizeof ( struct STRUCT_OR_UNION_3 ) + METHOD_9 ( VAR_39 -> VAR_40 . VAR_41 . VAR_42 ) ; <S2SV_ModStart> 0 ) ; VAR_46 = min_t ( TYPE_3 , VAR_46 , VAR_43 -> VAR_47 - VAR_31 -> VAR_48 ) ; goto VAR_49 <S2SV_ModEnd> ; } METHOD_2 <S2SV_ModStart> VAR_40 ) ; VAR_49 : return VAR_46 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0 ) { struct STRUCT_OR_UNION_0 VAR_14 ; TYPE_3 VAR_15 = METHOD_4 ( & VAR_14 ) ; if ( VAR_15 != 0 ) METHOD_5 ( "uname" ) ; TYPE_3 VAR_16 ; TYPE_3 VAR_17 ; if ( 2 != METHOD_6 ( VAR_14 . VAR_18 , "%d.%d" , & VAR_16 , & VAR_17 ) ) { METHOD_7 ( VAR_19 , "Error:<S2SV_blank>cannot<S2SV_blank>extract<S2SV_blank>Linux<S2SV_blank>kernel<S2SV_blank>version:<S2SV_blank>%s\\n" , VAR_14 . VAR_20 ) ; METHOD_8 ( 1 ) ; } if ( VAR_16 < 4 || ( VAR_16 == 4 && VAR_17 < 8 ) ) { METHOD_7 ( VAR_19 , "Error:<S2SV_blank>--allow-debuggers<S2SV_blank>is<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>Linux<S2SV_blank>kernels<S2SV_blank>prior<S2SV_blank>to<S2SV_blank>4.8.<S2SV_blank>" "A<S2SV_blank>bug<S2SV_blank>in<S2SV_blank>ptrace<S2SV_blank>call<S2SV_blank>allows<S2SV_blank>a<S2SV_blank>full<S2SV_blank>bypass<S2SV_blank>of<S2SV_blank>the<S2SV_blank>seccomp<S2SV_blank>filter.<S2SV_blank>" "Your<S2SV_blank>current<S2SV_blank>kernel<S2SV_blank>version<S2SV_blank>is<S2SV_blank>%d.%d.\\n" , VAR_16 , VAR_17 ) ; METHOD_8 ( 1 ) ; }
<S2SV_ModStart> |= VAR_12 ; else if ( ( VAR_15 & ( VAR_12 | VAR_16 ) ) == ( VAR_12 | VAR_16 ) && ! METHOD_4 ( STRUCT_OR_UNION_6 -> VAR_13 ) && ! METHOD_5 ( VAR_8 , VAR_17 ) ) VAR_15 &= ~ VAR_12 ;
<S2SV_ModStart> ; if ( METHOD_22 ( METHOD_21 ( METHOD_20 ( ) , VAR_199 ) ) ) return - VAR_200 ; if (
<S2SV_ModStart> ) VAR_6 ; TYPE_7 <S2SV_ModEnd> VAR_26 ; METHOD_1
<S2SV_ModStart> TYPE_3 VAR_152 [ VAR_168 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript<S2SV_blank>eps;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>x" ) <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>y" ) <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , <S2SV_ModStart> ( VAR_152 , VAR_168 <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" ,
<S2SV_ModStart> STRUCT_OR_UNION_6 * VAR_16 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto VAR_32 ; if ( VAR_33 -> VAR_34 -> VAR_35 != VAR_36 ) { METHOD_2 ( VAR_33 ) ; return VAR_31 ; } VAR_16 = ( struct STRUCT_OR_UNION_6 * ) VAR_33
<S2SV_ModStart> VAR_389 ) { <S2SV_ModEnd> METHOD_32 ( VAR_388 <S2SV_ModStart> ) ) { TYPE_17 VAR_392 = METHOD_55 ( VAR_389 -> VAR_393 ) ; <S2SV_ModStart> "modifying<S2SV_blank>in-place" ) ; METHOD_91 ( METHOD_90 ( VAR_239 ) -> VAR_394 , VAR_392 , VAR_388 -> VAR_187 <S2SV_ModEnd> ) ; } <S2SV_ModStart> { TYPE_19 VAR_227 <S2SV_ModEnd> ; METHOD_83 (
<S2SV_ModStart> VAR_371 = 0 ; TYPE_0 VAR_375 = VAR_336 <S2SV_ModStart> < 5 ) goto VAR_376 <S2SV_ModEnd> ; VAR_370 += <S2SV_ModStart> ! VAR_110 ) goto VAR_376 <S2SV_ModEnd> ; VAR_371 = <S2SV_ModStart> ! VAR_143 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; VAR_356 = <S2SV_ModStart> ; default : goto VAR_376 <S2SV_ModEnd> ; } } <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_201 ; } goto VAR_377 <S2SV_ModEnd> ; } case <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } goto VAR_377 ; } goto VAR_377 <S2SV_ModEnd> ; } case <S2SV_ModStart> ; default : goto VAR_376 <S2SV_ModEnd> ; } VAR_341 <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_296 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_319 ) goto VAR_376 <S2SV_ModEnd> ; VAR_356 = <S2SV_ModStart> ! VAR_340 ) goto VAR_376 <S2SV_ModEnd> ; VAR_371 = <S2SV_ModStart> break ; } if ( METHOD_57 ( STRUCT_OR_UNION_43 , VAR_365 ) ) { VAR_367 = METHOD_58 ( STRUCT_OR_UNION_43 , VAR_365 , VAR_366 ) ; VAR_367 -> VAR_368 = METHOD_59 ( VAR_369 , VAR_370 , VAR_371 , VAR_372 , VAR_373 ) ; } VAR_377 : VAR_375 = VAR_374 ; VAR_376 : <S2SV_ModStart> ) VAR_370 ; return VAR_375 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_47 ) { VAR_61 <S2SV_ModEnd> ; } VAR_59
<S2SV_ModStart> , * VAR_288 ; METHOD_26 ( VAR_323 -> VAR_364 == VAR_365 || VAR_323 -> VAR_364 == VAR_366 )
<S2SV_ModStart> |= VAR_33 ; METHOD_7 ( VAR_85 , VAR_39 ) ; <S2SV_ModStart> VAR_34 , VAR_85 -> VAR_87 , VAR_84 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> = VAR_182 ; TYPE_17 <S2SV_ModEnd> VAR_291 = VAR_290 <S2SV_ModStart> VAR_211 , "Range:<S2SV_blank>bytes=%" PRIu64 <S2SV_ModEnd> "-" , VAR_290 <S2SV_ModStart> -> VAR_264 = VAR_296 <S2SV_ModEnd> ; VAR_290 ->
<S2SV_ModStart> VAR_681 , VAR_449 , VAR_727 <S2SV_ModStart> -> VAR_669 ; VAR_727 = ( VAR_449 % 2 == 0 ) ? VAR_449 : VAR_449 + 1 ; <S2SV_ModStart> ( VAR_441 * VAR_727 <S2SV_ModEnd> ) != ( <S2SV_ModStart> ( VAR_441 * VAR_727 <S2SV_ModEnd> ) ) METHOD_86 <S2SV_ModStart> -> VAR_669 * VAR_727 <S2SV_ModEnd> ; VAR_685 =
<S2SV_ModStart> TYPE_6 VAR_13 , TYPE_8 <S2SV_ModEnd> VAR_15 ) {
<S2SV_ModStart> VAR_71 + 8 + 8 <S2SV_ModStart> VAR_73 ; } const <S2SV_ModStart> 4 ) ) ; const TYPE_16 <S2SV_ModEnd> VAR_42 = (
<S2SV_ModStart> VAR_139 , VAR_141 <S2SV_ModEnd> ) ) )
<S2SV_ModStart> VAR_161 -> VAR_13 ; if ( VAR_24 -> VAR_25 . VAR_178 < 1 ) return - VAR_179
<S2SV_ModStart> * VAR_14 ; if ( VAR_9 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_write" ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_3 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_2 ) ; return METHOD_3 ( VAR_3 , 2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_175 , "%s" , VAR_176 <S2SV_ModEnd> METHOD_192 METHOD_192 ;
<S2SV_ModStart> return - VAR_4 <S2SV_ModEnd> ; VAR_11 =
<S2SV_ModStart> VAR_15 ) { TYPE_5 <S2SV_ModEnd> VAR_23 [ VAR_20
<S2SV_ModStart> ; VAR_95 -> VAR_39 = 7 ; VAR_95 -> VAR_43 = 7 ; VAR_95 ->
<S2SV_ModStart> 2 ) ; if ( METHOD_6 ( VAR_44 -> VAR_45 . VAR_46 ) > VAR_48 ) { METHOD_7 ( VAR_32 -> VAR_49 , VAR_50 , "Invalid<S2SV_blank>param<S2SV_blank>length!\\n" ) ; break ; }
<S2SV_ModStart> TYPE_6 * VAR_196 , TYPE_7 VAR_204 <S2SV_ModStart> VAR_47 ; TYPE_7 VAR_205 ; TYPE_7 <S2SV_ModStart> TYPE_8 VAR_107 ; if ( VAR_204 > VAR_206 ) return - 1 ; <S2SV_ModStart> VAR_10 : return 0 <S2SV_ModEnd> ; case VAR_11 <S2SV_ModStart> * VAR_196 ; VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> , & VAR_47 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 0 <S2SV_ModEnd> ) { * <S2SV_ModStart> VAR_47 ; return 0 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> case VAR_29 : VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> VAR_161 , VAR_196 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 1 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> * VAR_196 ; VAR_205 = <S2SV_ModEnd> METHOD_3 ( VAR_203 <S2SV_ModStart> , & VAR_47 , VAR_204 + 1 ) ; if ( VAR_205 == - 1 ) return - 1 ; if ( VAR_205 == 0 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_107 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> 0 ) return 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } VAR_203 <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) return 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> } } return 1 <S2SV_ModEnd> ; case VAR_157 <S2SV_ModStart> } } return 1 <S2SV_ModEnd> ; case VAR_166 <S2SV_ModStart> VAR_183 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> VAR_183 ) return 1 <S2SV_ModEnd> ; VAR_203 = <S2SV_ModStart> default : return 1 <S2SV_ModEnd> ; } }
<S2SV_ModStart> VAR_141 ; } <S2SV_ModEnd> VAR_136 = METHOD_5
<S2SV_ModStart> ; TYPE_4 VAR_81 = VAR_87 ; TYPE_4 VAR_83 = VAR_87 <S2SV_ModEnd> ; TYPE_5 VAR_82 <S2SV_ModStart> ) ; } VAR_84 : METHOD_14 ( & VAR_82 , & VAR_81 ) ; METHOD_14 ( & VAR_82 , & VAR_83 ) ; <S2SV_ModEnd> METHOD_15 ( VAR_85
<S2SV_ModStart> , METHOD_23 ( "_Cancel" ) , VAR_54 ) ; METHOD_24 ( METHOD_25 ( VAR_58 ) , VAR_54 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , METHOD_23 ( "Trust<S2SV_blank>and<S2SV_blank>_Launch" ) , VAR_70 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_26 ( VAR_58
<S2SV_ModStart> + VAR_12 ; if ( VAR_14 < VAR_12 ) { return VAR_16 ; }
<S2SV_ModStart> VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( "ANOPE_FLAGS_COMPAT" , & VAR_3 . VAR_4 -> VAR_5 ) ;
<S2SV_ModStart> ; VAR_59 -> VAR_48 = 0 ; METHOD_8 ( VAR_56 , VAR_59 ) ; } else if ( METHOD_10 ( VAR_59 ) ) { goto VAR_64 ; } VAR_59 -> <S2SV_ModStart> VAR_45 = VAR_46 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> = VAR_55 ; VAR_64 : <S2SV_ModEnd> return METHOD_9 (
<S2SV_ModStart> ; VAR_332 = <S2SV_ModEnd> METHOD_25 ( VAR_325
<S2SV_ModStart> -> VAR_56 ; const TYPE_14 <S2SV_ModEnd> * const VAR_129 <S2SV_ModStart> ; const TYPE_6 VAR_145 <S2SV_ModEnd> = ( VAR_56 <S2SV_ModStart> > 1 ) || <S2SV_ModEnd> ( VAR_56 -> <S2SV_ModStart> VAR_56 -> VAR_16 > <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> 1 ) ; TWO_PASS * const VAR_142 = VAR_145 ? <S2SV_ModEnd> & VAR_56 -> <S2SV_ModStart> ] . VAR_142 : & VAR_136 -> VAR_142 ; TYPE_13 VAR_60 ; TYPE_4 * VAR_144 ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> ) return ; VAR_144 = & <S2SV_ModStart> VAR_142 -> VAR_114 ; * VAR_144 <S2SV_ModStart> -> VAR_36 = * VAR_144 <S2SV_ModEnd> ; VAR_60 = <S2SV_ModStart> = 10000000.0 * VAR_144 -> VAR_115 / VAR_144 -> <S2SV_ModEnd> VAR_65 ; if <S2SV_ModStart> ; if ( VAR_145 <S2SV_ModEnd> ) { METHOD_3 <S2SV_ModStart> TYPE_9 ) ( VAR_144 -> <S2SV_ModEnd> VAR_65 * VAR_56 <S2SV_ModStart> TYPE_9 ) ( VAR_144 -> <S2SV_ModEnd> VAR_65 * VAR_129 <S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_142 -> VAR_86 <S2SV_ModStart> 1 ; { const TYPE_13 VAR_146 = VAR_144 -> VAR_98 / METHOD_10 ( VAR_144 -> VAR_115 ) ; const TYPE_4 * VAR_147 = VAR_142 -> VAR_118 ; TYPE_13 VAR_141 <S2SV_ModEnd> = 0.0 ; <S2SV_ModStart> = 0.0 ; VAR_142 -> VAR_122 = ( VAR_146 * VAR_129 -> VAR_125 ) / 100 ; VAR_142 -> VAR_127 = ( VAR_146 * VAR_129 -> VAR_130 ) / 100 <S2SV_ModEnd> ; while ( <S2SV_ModStart> ; while ( VAR_147 < VAR_142 -> VAR_34 ) { <S2SV_ModEnd> VAR_141 += METHOD_12 <S2SV_ModStart> ( VAR_136 , VAR_142 , VAR_129 , VAR_147 ) ; ++ VAR_147 <S2SV_ModEnd> ; } VAR_142 <S2SV_ModStart> -> VAR_139 = VAR_141 ; } VAR_136 -> VAR_148 . VAR_149 = 0 ; VAR_136 -> VAR_148 . VAR_150 = 0 ; VAR_136 -> VAR_148 . VAR_151 = 0 ; VAR_142 -> VAR_152 = 100 ; VAR_142 -> VAR_153 = 100 ; if ( VAR_129 -> VAR_154 != VAR_155 ) { METHOD_14 ( VAR_136 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * VAR_57 ; TYPE_15 VAR_58 ; if ( METHOD_6 ( VAR_36 , sizeof ( TYPE_13 ) ) ) { return VAR_56 ; } else { VAR_58 = VAR_36 * sizeof ( TYPE_13 ) ; } VAR_57 = ( TYPE_7 * ) METHOD_7 ( sizeof ( TYPE_7 ) ) ; if ( ! VAR_57 ) { return VAR_56 ; } VAR_57 -> VAR_10 = VAR_36 ; VAR_57 -> VAR_13 = VAR_28 ; if ( METHOD_6 ( VAR_28 , sizeof ( TYPE_10 ) ) ) { METHOD_10 ( VAR_57 ) ; return VAR_56 ; } VAR_57 -> VAR_54 = ( TYPE_10 * ) METHOD_7 ( VAR_28 * sizeof ( TYPE_10 ) ) ; if ( VAR_57 -> VAR_54 == VAR_56 ) { METHOD_10 ( VAR_57 ) ; return VAR_56 ; } for ( VAR_47 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_47 < VAR_28 <S2SV_ModStart> VAR_47 ++ ) <S2SV_ModEnd> { VAR_57 -> <S2SV_ModStart> ) METHOD_7 ( VAR_58 ) ; if ( <S2SV_ModEnd> VAR_57 -> VAR_54 <S2SV_ModStart> TYPE_14 VAR_51 ; <S2SV_ModEnd> for ( VAR_51 <S2SV_ModStart> 0 ; VAR_51 < <S2SV_ModEnd> VAR_47 ; VAR_51
<S2SV_ModStart> ) ) { if ( METHOD_16 ( VAR_79 ) < 8 ) return VAR_73 ;
<S2SV_ModStart> struct STRUCT_OR_UNION_0 VAR_20 = { }
<S2SV_ModStart> METHOD_34 ( "clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n" ) ; return - VAR_221 ; } if ( VAR_304 -> VAR_296 > VAR_344 / sizeof ( * VAR_342 ) ) { METHOD_34 ( "execbuf<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>cliprects\\n" , VAR_304 -> VAR_296
<S2SV_ModStart> } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_16 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"lineno\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>expr" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_280 ( VAR_1767 , & VAR_1758 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_30 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"col_offset\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>expr" ) ; return 1 ; } else { TYPE_357 TYPE_360 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> VAR_1767 , & VAR_1759 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } VAR_1694 <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_185 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"op\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BoolOp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_12 ( VAR_1767 , & VAR_210 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1267 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"values\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BoolOp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_895 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"left\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_992 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_185 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"op\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_33 ( VAR_1767 , & VAR_210 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_154 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"right\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>BinOp" ) ; return 1 ; } else { TYPE_357 TYPE_360 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> VAR_1767 , & VAR_167 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_185 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"op\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>UnaryOp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_43 ( VAR_1767 , & VAR_210 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_199 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"operand\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>UnaryOp" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_211 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1031 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"args\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Lambda" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_53 ( VAR_1767 , & VAR_1113 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_288 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Lambda" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_314 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_274 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"test\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_313 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_288 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp" ) ; return 1 ; } else { TYPE_357 TYPE_360 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> VAR_1767 , & VAR_314 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_302 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"orelse\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>IfExp" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_315 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } * VAR_1761 = METHOD_73 ( VAR_313 , VAR_314 , VAR_315 , VAR_1758 , VAR_1759 , VAR_1760 ) ; if ( * VAR_1761 == VAR_1762 ) goto VAR_1766 ; return 0 ; } VAR_1694 = METHOD_385 ( VAR_1765 , ( TYPE_348 * ) VAR_324 ) ; if ( VAR_1694 == - 1 ) { return 1 ; } if ( VAR_1694 ) { VAR_1695 * VAR_418 ; VAR_1695 * VAR_1305 ; if ( METHOD_404 ( VAR_1765 , & VAR_337 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"keys\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Dict" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1267 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"values\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Dict" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } * VAR_1761 = METHOD_97 ( VAR_418 , VAR_1305 , VAR_1758 , VAR_1759 , VAR_1760 ) ; if ( * VAR_1761 == VAR_1762 ) goto VAR_1766 ; return 0 ; } VAR_1694 = METHOD_385 ( VAR_1765 , ( TYPE_348 * ) VAR_428 ) ; if ( VAR_1694 == - 1 ) { return 1 ; } if ( VAR_1694 ) { VAR_1695 * VAR_1756 ; if ( METHOD_404 ( VAR_1765 , & VAR_1704 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elts\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Set" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_734 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elt\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ListComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_788 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_750 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"generators\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>ListComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_160 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_734 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elt\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>SetComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_788 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_750 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"generators\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>SetComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_160 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_645 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"key\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_713 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp" ) ; return 1 ; } else { TYPE_357 TYPE_360 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> VAR_1767 , & VAR_1738 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_750 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"generators\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>DictComp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_160 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_734 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elt\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>GeneratorExp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_788 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_750 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"generators\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>GeneratorExp" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_160 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Await" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_392 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 || VAR_1767 == VAR_9 ) { METHOD_400 ( VAR_1767 ) ; VAR_1738 = VAR_1762 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_392 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>YieldFrom" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_392 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_895 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"left\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_992 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_911 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ops\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_191 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_954 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"comparators\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Compare" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1015 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"func\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_1112 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1031 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"args\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1074 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"keywords\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Call" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_218 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1131 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"n\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Num" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_260 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1322 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"s\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Str" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_270 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FormattedValue" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_1738 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1219 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 || VAR_1767 == VAR_9 ) { METHOD_400 ( VAR_1767 ) ; VAR_1246 = 0 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_280 ( VAR_1767 , & VAR_1246 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1233 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 || VAR_1767 == VAR_9 ) { METHOD_400 ( VAR_1767 ) ; VAR_1247 = VAR_1762 ; } else { TYPE_357 TYPE_360 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> VAR_1767 , & VAR_1247 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } * VAR_1761 = METHOD_286 ( VAR_1738 , VAR_1246 , VAR_1247 , VAR_1758 , VAR_1759 , VAR_1760 ) ; if ( * VAR_1761 == VAR_1762 ) goto VAR_1766 ; return 0 ; } VAR_1694 = METHOD_385 ( VAR_1765 , ( TYPE_348 * ) VAR_1256 ) ; if ( VAR_1694 == - 1 ) { return 1 ; } if ( VAR_1694 ) { VAR_1695 * VAR_1305 ; if ( METHOD_404 ( VAR_1765 , & VAR_1267 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"values\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>JoinedStr" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1322 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"s\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Bytes" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_303 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>NameConstant" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_309 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Constant" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_317 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_1738 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1434 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"attr\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_361 ( VAR_1767 , & VAR_1460 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Attribute" ) ; return 1 ; } else { <S2SV_ModEnd> TYPE_357 TYPE_360 ; <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_399 ( VAR_1767 , & VAR_1757 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_1738 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1494 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"slice\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_341 ( VAR_1767 , & VAR_1520 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Subscript" ) ; return 1 ; } else { <S2SV_ModEnd> TYPE_357 TYPE_360 ; <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_399 ( VAR_1767 , & VAR_1757 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1539 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Starred" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_392 ( VAR_1767 , & VAR_1738 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Starred" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_399 ( VAR_1767 , & VAR_1757 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1583 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"id\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Name" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> TYPE_357 TYPE_360 ; TYPE_360 = METHOD_361 ( VAR_1767 , & VAR_1608 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Name" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_399 ( VAR_1767 , & VAR_1757 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1704 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elts\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>List" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>List" ) ; return 1 ; } else { <S2SV_ModEnd> TYPE_357 TYPE_360 ; <S2SV_ModStart> TYPE_357 TYPE_360 ; <S2SV_ModEnd> TYPE_360 = METHOD_399 <S2SV_ModStart> ( VAR_1767 ) <S2SV_ModEnd> ; } * <S2SV_ModStart> ; if ( METHOD_404 <S2SV_ModEnd> ( VAR_1765 , <S2SV_ModStart> , & VAR_1704 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"elts\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple" ) ; return 1 ; } else <S2SV_ModEnd> { TYPE_357 TYPE_360 <S2SV_ModStart> ; TYPE_353 VAR_1737 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { TYPE_354 VAR_1768 <S2SV_ModEnd> ; TYPE_360 = <S2SV_ModStart> ) , & VAR_1768 <S2SV_ModEnd> , VAR_1760 ) <S2SV_ModStart> , VAR_1737 , VAR_1768 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } if ( METHOD_404 ( VAR_1765 , & VAR_1745 , & VAR_1767 ) < 0 ) { return 1 ; } if ( VAR_1767 == VAR_1762 ) { PyErr_SetString ( VAR_1764 , "required<S2SV_blank>field<S2SV_blank>\\"ctx\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Tuple" ) ; return 1 ; } else { TYPE_357 TYPE_360 ; TYPE_360 = METHOD_399 ( VAR_1767 , & VAR_1757 , VAR_1760 ) ; if ( TYPE_360 != 0 ) goto VAR_1766 ; METHOD_400 ( VAR_1767 ) ; } * VAR_1761 = METHOD_401 ( VAR_1756 , VAR_1757 , VAR_1758 , VAR_1759 , VAR_1760 ) ; if ( * VAR_1761 == VAR_1762 ) goto VAR_1766 ; return 0 ; } METHOD_402 <S2SV_ModEnd> ( VAR_1764 , <S2SV_ModStart> ( VAR_1764 , "expected<S2SV_blank>some<S2SV_blank>sort<S2SV_blank>of<S2SV_blank>expr,<S2SV_blank>but<S2SV_blank>got<S2SV_blank>%R" , VAR_1765 <S2SV_ModEnd> ) ; VAR_1766
<S2SV_ModStart> TYPE_3 * VAR_23 , TYPE_3 * VAR_29 <S2SV_ModStart> * VAR_28 ; <S2SV_ModEnd> VAR_28 = * <S2SV_ModStart> * VAR_24 ; for ( ; ; ) { if ( * VAR_23 == 0 ) { return VAR_27 ; } if ( ! ND_TTEST ( <S2SV_ModEnd> * * VAR_24 <S2SV_ModStart> * VAR_24 ) ) { * VAR_29 = 1 ; return VAR_27 ; } if ( * * VAR_24 == '\\0' ) { break ; } <S2SV_ModEnd> ( * VAR_24 <S2SV_ModStart> ) -- ; <S2SV_ModEnd> return VAR_28 ;
<S2SV_ModStart> * VAR_124 ; TYPE_2 VAR_131 ; <S2SV_ModStart> VAR_125 ; } METHOD_27 ( VAR_124 , VAR_132 , & VAR_131 ) ; if ( ( VAR_131 & VAR_132 ) != VAR_133 ) { VAR_130 = - VAR_134 ; goto VAR_123 ; } VAR_130 = METHOD_28 ( VAR_124 ) ; if ( VAR_130 ) goto VAR_123 ;
<S2SV_ModStart> VAR_32 ) { struct STRUCT_OR_UNION_6 * VAR_57 ; <S2SV_ModStart> VAR_50 -> VAR_40 ; VAR_27 -> VAR_58 = VAR_50 ; VAR_57 = VAR_31 -> VAR_32 -> METHOD_6 ( VAR_31 , VAR_50 -> VAR_36 -> VAR_59 ) ; METHOD_7 ( VAR_57 , VAR_50 -> VAR_40 , VAR_55 )
<S2SV_ModStart> VAR_38 . VAR_39 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> 24 ) ; METHOD_9 ( VAR_37 -> VAR_43 , & <S2SV_ModEnd> VAR_37 -> VAR_38 <S2SV_ModStart> . VAR_39 -> VAR_44 , & VAR_41 , sizeof ( TYPE_4 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_16 ) ; if ( <S2SV_ModStart> ( VAR_180 ) < 0 ) return - 1 <S2SV_ModStart> VAR_165 ) { if ( <S2SV_ModStart> VAR_178 -> VAR_171 ) < 0 ) return - 1 ; METHOD_17 ( VAR_180 , VAR_150 <S2SV_ModStart> VAR_182 ; } METHOD_17 ( VAR_180 , VAR_150 ) ;
<S2SV_ModStart> ( VAR_12 -> VAR_15 && VAR_12 -> VAR_16 > 0 && ! VAR_12 -> VAR_17 ) { return VAR_3 ; } if ( VAR_12 -> VAR_18 > 0 ) { METHOD_1 ( VAR_12 ) ; VAR_12 -> VAR_19 = VAR_12 -> VAR_20 [ VAR_12 -> VAR_21 ] . VAR_22 ; if ( VAR_12 -> VAR_23 ) return VAR_3 ; VAR_14 = & VAR_12 -> VAR_20 [ VAR_12 -> VAR_21 ] . VAR_14 ; VAR_12 -> VAR_21 = ( VAR_12 -> VAR_21 + 1 ) % VAR_24 ; -- VAR_12 -> VAR_18 ; return VAR_14 ; } if <S2SV_ModEnd> ( * VAR_10 <S2SV_ModStart> ( * VAR_10 == VAR_3 && VAR_12 -> VAR_25 != VAR_3 ) { do { TYPE_4 VAR_26 ; TYPE_5 VAR_27 = { 0 , 0 , 0 } ; const TYPE_6 * const VAR_28 = METHOD_2 ( ) ; TYPE_7 * const VAR_29 = & VAR_12 -> VAR_25 [ VAR_12 -> VAR_30 ] ; TYPE_8 * const VAR_31 = ( TYPE_8 * ) VAR_29 -> VAR_32 ; VAR_12 -> VAR_30 = ( VAR_12 -> VAR_30 + 1 ) % VAR_12 -> VAR_33 ; if ( VAR_12 -> VAR_34 . VAR_35 & VAR_36 ) METHOD_3 ( VAR_12 , & VAR_27 ) ; if ( VAR_28 -> METHOD_4 ( VAR_29 ) ) { if ( VAR_31 -> VAR_37 == 1 ) { ++ VAR_12 -> VAR_16 ; VAR_31 -> VAR_37 = 0 ; METHOD_5 ( VAR_12 , VAR_31 -> VAR_38 ) ; } if ( METHOD_6 ( VAR_31 -> VAR_38 , & VAR_26 , & VAR_27 ) == 0 ) { TYPE_9 * const VAR_39 = & VAR_31 -> VAR_38 -> VAR_40 ; TYPE_10 * const VAR_41 = VAR_39 -> VAR_42 -> VAR_41 ; METHOD_1 ( VAR_12 ) ; VAR_12 -> VAR_19 = VAR_31 -> VAR_38 -> VAR_40 . VAR_43 ; if ( VAR_12 -> VAR_23 ) return VAR_3 ; METHOD_7 ( & VAR_12 -> VAR_14 , & VAR_26 , VAR_31 -> VAR_44 ) ; VAR_12 -> VAR_14 . VAR_45 = VAR_41 [ VAR_39 -> VAR_43 ] . VAR_46 . VAR_47 ; VAR_14 = & VAR_12 -> VAR_14 ; return VAR_14 ; } } else { VAR_31 -> VAR_37 = 0 ; ++ VAR_12 -> VAR_16 ; VAR_12 -> VAR_23 = 1 ; if ( VAR_12 -> VAR_17 != 1 ) return VAR_3 ; } } while ( VAR_12 -> VAR_30 != VAR_12 -> VAR_48 ) ; } return VAR_3 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> . VAR_27 = VAR_44 <S2SV_ModEnd> , . VAR_42 <S2SV_ModStart> ; TYPE_4 VAR_35 <S2SV_ModEnd> ; if (
<S2SV_ModStart> "Skipping<S2SV_blank>optional<S2SV_blank>EF.C_DevAut" ) ; if ( VAR_319 > 0 ) { <S2SV_ModStart> = VAR_319 ; }
<S2SV_ModStart> ) ; return 0
<S2SV_ModStart> STRUCT_OR_UNION_10 ) ; VAR_201 -> VAR_202 . VAR_125 = 0 ;
<S2SV_ModStart> VAR_198 = VAR_22 ; return ; } if ( METHOD_35 ( VAR_134 -> VAR_25 ) < VAR_28 ) { METHOD_30 ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n" )
<S2SV_ModStart> ] ) ; <S2SV_ModEnd> VAR_94 = 5 <S2SV_ModStart> VAR_94 ; } VAR_85 = VAR_88 -> VAR_89 . VAR_90 . VAR_91 ;
<S2SV_ModStart> ; } } if ( METHOD_3 ( VAR_6 -> VAR_12 , VAR_13 ) ) { const TYPE_3 * VAR_14 = METHOD_4 ( VAR_6 , "Cookie" ) ; const TYPE_3 * VAR_15 = METHOD_5 ( VAR_6 , "securitytoken" ) ; if ( ! VAR_14 ) { METHOD_8 ( "HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>missing<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>cookie\\n" , METHOD_7 ( METHOD_6 ( VAR_6 -> VAR_16 ) ) ) ; METHOD_2 ( VAR_6 , VAR_9 , VAR_17 , "Invalid<S2SV_blank>CSRF<S2SV_blank>Token" ) ; return VAR_10 ; } if ( ! VAR_15 ) { METHOD_8 ( "HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>missing<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>in<S2SV_blank>HTTP<S2SV_blank>parameter\\n" , METHOD_7 ( METHOD_6 ( VAR_6 -> VAR_16 ) ) ) ; METHOD_2 ( VAR_6 , VAR_9 , VAR_17 , "Invalid<S2SV_blank>CSRF<S2SV_blank>Token" ) ; return VAR_10 ; } if ( ! METHOD_9 ( VAR_14 , "securitytoken=" ) ) { METHOD_8 ( "HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>no<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>in<S2SV_blank>cookie\\n" , METHOD_7 ( METHOD_6 ( VAR_6 -> VAR_16 ) ) ) ; METHOD_2 ( VAR_6 , VAR_9 , VAR_17 , "Invalid<S2SV_blank>CSRF<S2SV_blank>Token" ) ; return VAR_10 ; } if ( METHOD_10 ( VAR_14 + 14 , VAR_15 ) ) { METHOD_8 ( "HttpRequest:<S2SV_blank>access<S2SV_blank>denied<S2SV_blank>--<S2SV_blank>client<S2SV_blank>[%s]:<S2SV_blank>CSRF<S2SV_blank>token<S2SV_blank>mismatch\\n" , METHOD_7 ( METHOD_6 ( VAR_6 -> VAR_16 ) ) ) ; METHOD_2 ( VAR_6 , VAR_9 , VAR_17 , "Invalid<S2SV_blank>CSRF<S2SV_blank>Token" ) ; return VAR_10 ; } }
<S2SV_ModStart> * VAR_68 ; struct STRUCT_OR_UNION_2 * VAR_81 = VAR_55 -> VAR_81 ; <S2SV_ModStart> 0 , VAR_83 ; TYPE_8 VAR_40 , VAR_62 , VAR_63 ; TYPE_8 VAR_73 [ 5 ] ; METHOD_10 ( & VAR_81 -> VAR_82 ) ; VAR_40 = METHOD_6 ( VAR_55 , & VAR_62 , & VAR_63 ) ; VAR_73 [ VAR_70 ++ ] = 1 + VAR_55 -> VAR_27 ; if ( VAR_64 & VAR_29 ) VAR_73 [ VAR_70 ++ ] = VAR_62 ; if ( VAR_64 & VAR_34 ) VAR_73 [ VAR_70 ++ ] = VAR_63 ; VAR_73 [ VAR_70 ++ ] = VAR_40 ; if ( VAR_64 & VAR_65 ) VAR_73 [ VAR_70 ++ ] = METHOD_7 ( VAR_55 ) ; VAR_79 = VAR_70 * sizeof ( TYPE_8 ) ; if ( METHOD_8 ( VAR_71 , VAR_73 , VAR_79 ) ) return <S2SV_ModEnd> - VAR_76 ; <S2SV_ModStart> - VAR_76 ; <S2SV_ModEnd> VAR_83 = VAR_79 <S2SV_ModStart> ) ) { return <S2SV_ModEnd> - VAR_76 ; <S2SV_ModStart> - VAR_76 ; <S2SV_ModEnd> } VAR_83 += <S2SV_ModStart> VAR_79 ; } <S2SV_ModEnd> return VAR_83 ;
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_69 , const TYPE_12 * VAR_113 <S2SV_ModStart> = VAR_108 ; <S2SV_ModEnd> METHOD_1 ( ) <S2SV_ModStart> & VAR_106 , "/etc" , VAR_113 <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> VAR_25 ) ) { METHOD_8 ( VAR_57 ) ; METHOD_3 ( VAR_49 -> VAR_45 ) ; <S2SV_ModStart> - 1 ; }
<S2SV_ModStart> ; if ( METHOD_24 ( ! METHOD_23 ( VAR_299 ) ) ) return - VAR_308 ; if (
<S2SV_ModStart> VAR_43 ; } if ( VAR_41 -> VAR_43 < 0 ) { METHOD_2 ( "b/26366256" ) ; VAR_41 -> VAR_43 = 0 ; }
<S2SV_ModStart> == VAR_709 ) { if ( METHOD_131 <S2SV_ModEnd> ( ( VAR_984 <S2SV_ModStart> ) >> 3UL , <S2SV_ModEnd> VAR_984 -> VAR_932 <S2SV_ModStart> VAR_984 -> VAR_932 ) != VAR_979 ) METHOD_74 ( VAR_562 , "MemoryAllocationFailed" ) ; VAR_666 = ( ( VAR_984 -> VAR_861 + 7UL ) >> 3UL ) * VAR_984 -> VAR_932 ; } else { if ( METHOD_131 ( VAR_915 , VAR_981 . VAR_554 ) != VAR_979 ) METHOD_74 ( VAR_562 , "MemoryAllocationFailed" ) ; <S2SV_ModEnd> VAR_666 = ( <S2SV_ModStart> VAR_554 ) ; }
<S2SV_ModStart> * VAR_14 , <S2SV_ModEnd> const TYPE_4 * <S2SV_ModStart> const TYPE_4 * VAR_17 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> VAR_3 ) { <S2SV_ModEnd> METHOD_2 ( VAR_17 <S2SV_ModStart> |= VAR_16 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( TYPE_6 ) ( <S2SV_ModStart> * VAR_8 ) / sizeof ( VAR_22 ) ) <S2SV_ModStart> if ( VAR_30 >= VAR_22 ) { METHOD_7 ( ( "Sector<S2SV_blank>%d<S2SV_blank>>=<S2SV_blank>%d\\n" <S2SV_ModEnd> , VAR_30 ,
<S2SV_ModStart> ) ) ; if ( VAR_19 -> VAR_21 == VAR_22 )
<S2SV_ModStart> -> VAR_82 = METHOD_37 <S2SV_ModEnd> ( VAR_82 )
<S2SV_ModStart> ] == 0x01 && VAR_161 < VAR_148
<S2SV_ModStart> VAR_193 < VAR_135 + ( VAR_136 != 2 ) <S2SV_ModStart> VAR_169 ) { if ( VAR_193 >= VAR_192 ) return VAR_175 ;
<S2SV_ModStart> ; if ( VAR_229 [ VAR_230 ] . VAR_233 && VAR_209 != VAR_229 [ VAR_230 ] . VAR_209 ) { METHOD_25 ( VAR_227 , VAR_234 , "RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n" , VAR_209 , VAR_229 [ VAR_230 ] . VAR_209 ) ; METHOD_22 ( & VAR_229 [ VAR_230 ] ) ; VAR_229 [ VAR_230 ] . VAR_233 = 0 ; } if (
<S2SV_ModStart> * VAR_45 ; TYPE_11 VAR_48 = 2 * ( TYPE_11 ) VAR_81 -> VAR_63 <S2SV_ModEnd> + VAR_75 ;
<S2SV_ModStart> VAR_60 ; } if ( METHOD_26 ( ! METHOD_25 ( * STRUCT_OR_UNION_9 ) ) ) { VAR_62 = - VAR_63 ; goto VAR_60 ; } <S2SV_ModEnd> VAR_58 : VAR_62
<S2SV_ModStart> [ VAR_144 ] && VAR_146 -> VAR_143 [ VAR_144 ]
<S2SV_ModStart> ) VAR_10 ; VAR_54 = VAR_66 -> VAR_16 ; METHOD_5 ( VAR_33 -> VAR_27 ) ; <S2SV_ModStart> VAR_33 -> VAR_21 <S2SV_ModEnd> ; METHOD_11 (
<S2SV_ModStart> ; if ( METHOD_34 ( VAR_168 , <S2SV_ModEnd> VAR_148 -> VAR_149 <S2SV_ModStart> if ( ! METHOD_34 ( VAR_168 , <S2SV_ModEnd> VAR_148 -> VAR_149
<S2SV_ModStart> if ( VAR_223 < 0
<S2SV_ModStart> VAR_387 -> VAR_232 >= <S2SV_ModEnd> VAR_387 -> VAR_259 <S2SV_ModStart> goto VAR_392 ; if ( VAR_347 == 0 ) goto VAR_392 ;
<S2SV_ModStart> ( ! VAR_9 || VAR_12 > VAR_17 <S2SV_ModStart> VAR_14 ) ; if ( VAR_16 > ( TYPE_4 ) VAR_12 ) { VAR_16 = - 1 ; METHOD_4 ( VAR_14 ) ; }
<S2SV_ModStart> = 16 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; if ( ! VAR_27 ) return VAR_36 ; if (
<S2SV_ModStart> ; } } if ( VAR_163 == VAR_156 ) { METHOD_34 ( VAR_166 , VAR_185 ) ; VAR_185 = METHOD_20 ( - VAR_186 ) ; goto VAR_184 ; }
<S2SV_ModStart> = VAR_20 ; VAR_24 -> VAR_27 = 0 ;
<S2SV_ModStart> case VAR_28 : case VAR_45 : <S2SV_ModStart> ; else { VAR_38 = 2 ; VAR_39 = 0 ; if ( METHOD_20 ( METHOD_18 ( VAR_43 , 1 ) ) == VAR_46 ) VAR_38 += 2 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; VAR_38 <
<S2SV_ModStart> * sizeof ( struct STRUCT_OR_UNION_4 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> & VAR_7 ) ) return VAR_25 ; if ( * VAR_11 < 4
<S2SV_ModStart> . VAR_291 . VAR_299 = TYPE_134 -> VAR_290 . VAR_291 . VAR_299 ; TYPE_134 -> VAR_286 [ TYPE_134 -> VAR_287 - 1 ] . VAR_291 .
<S2SV_ModStart> ] ) { TYPE_11 <S2SV_ModEnd> VAR_176 , VAR_213 <S2SV_ModStart> case 0x84 : VAR_221 -> VAR_205 = METHOD_20 ( sizeof VAR_221 -> VAR_201 , VAR_213 ) ; <S2SV_ModStart> , VAR_212 , <S2SV_ModEnd> VAR_221 -> VAR_205 <S2SV_ModStart> VAR_221 -> VAR_205 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart> . VAR_29 ) < 0 ) return - 1
<S2SV_ModStart> VAR_64 -> VAR_30 >= <S2SV_ModEnd> VAR_64 -> VAR_32
<S2SV_ModStart> goto VAR_85 ; if ( VAR_38 - VAR_39 > VAR_92 - 1 ) goto VAR_85 ;
<S2SV_ModStart> VAR_29 ) ; METHOD_13 ( VAR_39 -> VAR_23 ) ; VAR_39 -> VAR_23 = VAR_15 ;
<S2SV_ModStart> { METHOD_9 ( VAR_15 <S2SV_ModEnd> , 0x40 | <S2SV_ModStart> ; METHOD_9 ( VAR_16 <S2SV_ModEnd> , METHOD_3 ( <S2SV_ModStart> ; METHOD_9 ( VAR_17 <S2SV_ModEnd> , METHOD_5 ( <S2SV_ModStart> ; METHOD_9 ( VAR_18 , VAR_19 | VAR_20 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( METHOD_7 ( VAR_18 ) & VAR_21 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ; METHOD_9 ( VAR_18 , VAR_19 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> + VAR_250 ; VAR_275 = METHOD_31 ( VAR_249 , VAR_250 ) ; if ( VAR_275 ) goto VAR_264 ; VAR_275 = METHOD_31 ( VAR_260 , VAR_261 ) ; if ( VAR_275 ) goto VAR_264 ;
<S2SV_ModStart> if ( VAR_63 == 0 && VAR_51 == VAR_54 ) VAR_63 = VAR_45 ; if ( VAR_63
<S2SV_ModStart> VAR_43 ) ) goto VAR_40 <S2SV_ModEnd> ; } if <S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( VAR_38 ) <S2SV_ModStart> VAR_38 ) ) goto VAR_40 <S2SV_ModEnd> ; VAR_40 = <S2SV_ModStart> VAR_37 ) ; VAR_40 :
<S2SV_ModStart> 0 ) , VAR_20 ) ; METHOD_16 ( METHOD_15 ( METHOD_13 ( METHOD_14 ( VAR_18 , 0 ) ) , "async" ) == 0 <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( VAR_15 , VAR_18 <S2SV_ModEnd> , VAR_19 , <S2SV_ModStart> , VAR_19 , VAR_21 <S2SV_ModEnd> ) ; case <S2SV_ModStart> ( VAR_15 , VAR_18 , VAR_21 <S2SV_ModEnd> ) ; case <S2SV_ModStart> ( VAR_15 , VAR_18 , VAR_21 <S2SV_ModEnd> ) ; default
<S2SV_ModStart> ) ) ; METHOD_22 ( VAR_62 + VAR_68 + 4 ) ; <S2SV_ModStart> VAR_70 ) ; VAR_71 : return - 1 ;
<S2SV_ModStart> VAR_15 ) ; if ( VAR_237 == 0 ) { METHOD_69 ( "error:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>MP4/MOV\\n" , VAR_13 [ 1 ] ) ; return - 1 ; } <S2SV_ModStart> VAR_139 ) ; TYPE_35 <S2SV_ModEnd> VAR_161 = 0.0 <S2SV_ModStart> ) ) { TYPE_35 VAR_161 = 0.0 , VAR_162 = 0.0 ; <S2SV_ModStart> VAR_230 , VAR_229 , & VAR_161 , & VAR_162 ) ; METHOD_69 ( "%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz<S2SV_blank>(from<S2SV_blank>%f<S2SV_blank>to<S2SV_blank>%f)\\n" <S2SV_ModEnd> , METHOD_70 ( <S2SV_ModStart> ) , VAR_231 , VAR_161 , VAR_162
<S2SV_ModStart> * VAR_39 , TYPE_12 VAR_53 , TYPE_8 <S2SV_ModEnd> VAR_42 , TYPE_8 <S2SV_ModStart> VAR_39 = VAR_39 ; VAR_52 -> VAR_37 . METHOD_7 . VAR_53 = VAR_53
<S2SV_ModStart> ) ) { METHOD_86 <S2SV_ModEnd> ( VAR_538 , <S2SV_ModStart> VAR_545 . VAR_546 , sizeof ( VAR_538 ) - 1 ) ; VAR_538 [ sizeof ( VAR_538 ) - 1 ] = 0 <S2SV_ModEnd> ; METHOD_85 (
<S2SV_ModStart> 0 , VAR_199 ; VAR_42 [ 0 ] = '\\0'
<S2SV_ModStart> TYPE_4 VAR_13 ; TYPE_6 * VAR_56 ; <S2SV_ModStart> VAR_13 ) ; if ( ! METHOD_11 <S2SV_ModEnd> ( VAR_53 -> <S2SV_ModStart> , 20 ) ) return VAR_7 <S2SV_ModStart> VAR_49 ) ; VAR_56 = METHOD_6 ( VAR_53 -> VAR_26 ) ; if ( ! METHOD_11 ( VAR_53 -> VAR_26 , VAR_27 ) ) return VAR_7 ; <S2SV_ModStart> -> VAR_24 , VAR_56 <S2SV_ModEnd> , VAR_27 ,
<S2SV_ModStart> * VAR_18 ; struct STRUCT_OR_UNION_0 VAR_19 = * VAR_11 ; if ( ! METHOD_5 ( VAR_11 ) ) { METHOD_6 ( "seamless_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state" , & VAR_19 ) ; }
<S2SV_ModStart> & TYPE_15 , METHOD_44 ( <S2SV_ModStart> VAR_167 -> VAR_168 )
<S2SV_ModStart> ; TYPE_10 VAR_183 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } * VAR_22 = sizeof ( * VAR_137 ) ;
<S2SV_ModStart> = VAR_15 & VAR_19 <S2SV_ModEnd> ; * VAR_17
<S2SV_ModStart> -> VAR_9 = METHOD_11 ( STRUCT_OR_UNION_7 ) <S2SV_ModEnd> ; VAR_16 ->
<S2SV_ModStart> VAR_26 ) ; if ( VAR_28 > VAR_29 ) { METHOD_3 ( VAR_27 ) ; VAR_30 ; }
<S2SV_ModStart> VAR_51 , VAR_51 ) ; METHOD_5 ( & VAR_61 , & VAR_34 <S2SV_ModStart> VAR_51 ; } METHOD_5 ( & VAR_61 , & VAR_47 ) ;
<S2SV_ModStart> -> VAR_86 = METHOD_31 ( <S2SV_ModEnd> VAR_94 -> VAR_95
<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( VAR_55 <S2SV_ModStart> % VAR_49 ) != 0 ) { METHOD_6 ( VAR_53 -> VAR_26 , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" ) ; return 0 ; } <S2SV_ModEnd> while ( VAR_46
<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> signed TYPE_14 VAR_37 <S2SV_ModStart> VAR_216 ) { TYPE_12 VAR_203 = - 1 ; <S2SV_ModStart> VAR_142 ; } VAR_203 = METHOD_55 ( "/proc" , VAR_167 | VAR_168 | VAR_219 ) ; if ( VAR_203 < 0 ) { METHOD_67 ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc." <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_155 = 0 ; VAR_215 = METHOD_70 ( VAR_217 [ 0 ] , & VAR_155 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_155 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(0)" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_215 = METHOD_50 ( VAR_217 [ 0 ] , & VAR_141 , sizeof ( VAR_141 ) , VAR_97 ) ; if ( VAR_215 <= 0 ) { if ( VAR_215 != 0 ) METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>pid<S2SV_blank>of<S2SV_blank>attached<S2SV_blank>process" ) ; goto VAR_142 ; } <S2SV_ModStart> ) METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>" "from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>" "initialization<S2SV_blank>(2):<S2SV_blank>%s." , strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_156 = 3 ; VAR_215 = METHOD_50 ( VAR_217 [ 0 ] , & VAR_155 , sizeof ( VAR_155 ) , & VAR_156 ) ; if ( VAR_215 <= 0 ) { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>the<S2SV_blank>child<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>to<S2SV_blank>open<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(3):<S2SV_blank>%s." , strerror ( errno ) ) ; goto VAR_142 ; } if ( ( VAR_195 -> VAR_175 & CLONE_NEWNS ) && ( VAR_195 -> VAR_161 & LXC_ATTACH_LSM ) && VAR_197 -> lsm_label ) { TYPE_12 on_exec , labelfd ; on_exec = VAR_195 -> VAR_161 & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; labelfd = lsm_openat ( VAR_203 , VAR_141 , on_exec ) ; if ( labelfd < 0 ) goto VAR_142 ; VAR_215 = lxc_abstract_unix_send_fd ( VAR_217 [ 0 ] , labelfd , VAR_97 , 0 ) ; if ( VAR_215 <= 0 ) { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>send<S2SV_blank>child<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , strerror ( errno ) ) ; goto VAR_142 ; } } <S2SV_ModStart> ; VAR_142 : if ( VAR_203 >= 0 ) METHOD_49 ( VAR_203 ) ; <S2SV_ModStart> |= VAR_165 ; <S2SV_ModEnd> VAR_215 = METHOD_59 <S2SV_ModStart> = VAR_201 , <S2SV_ModEnd> } ; VAR_216
<S2SV_ModStart> VAR_203 ) && METHOD_55 ( STRUCT_OR_UNION_46 ) == VAR_229 <S2SV_ModEnd> ) goto VAR_220
<S2SV_ModStart> VAR_4 ) { ( TYPE_6 ) VAR_0 ; ( TYPE_6 ) VAR_4 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_9 * VAR_54 ) { <S2SV_ModEnd> const TYPE_2 * <S2SV_ModStart> TYPE_2 * VAR_3 = & VAR_54 -> VAR_56 . e_mbd ; <S2SV_ModEnd> const TYPE_3 * <S2SV_ModStart> VAR_38 -> VAR_49 ; const TYPE_10 * VAR_55 = VAR_54 -> VAR_56 . VAR_55 <S2SV_ModStart> ( VAR_49 , VAR_55 , <S2SV_ModStart> VAR_41 , & VAR_54 -> VAR_52 -> <S2SV_ModEnd> VAR_53 ) ; <S2SV_ModStart> ( VAR_49 , VAR_55 , <S2SV_ModStart> VAR_53 , & VAR_54 -> VAR_52 -> <S2SV_ModEnd> VAR_53 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_12 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> * VAR_64 ; TYPE_12 VAR_70 = VAR_71 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> "\\r\\n" ) ; TYPE_13 VAR_72 <S2SV_ModEnd> ; if ( <S2SV_ModStart> "ChunkedDecode:<S2SV_blank>chunk<S2SV_blank>did<S2SV_blank>not<S2SV_blank>find<S2SV_blank>end-of-line" ) ; VAR_70 = VAR_73 <S2SV_ModEnd> ; break ; <S2SV_ModStart> = '\\0' ; VAR_72 = <S2SV_ModEnd> METHOD_4 ( VAR_64 <S2SV_ModStart> ; if ( VAR_72 < 0 ) { METHOD_5 ( VAR_74 , "ChunkedDecode:<S2SV_blank>negative<S2SV_blank>chunk<S2SV_blank>length" ) ; VAR_70 = VAR_75 ; break ; } * VAR_61 = '\\r' ; if ( <S2SV_ModStart> + 2 + VAR_72 <S2SV_ModEnd> > VAR_41 ) <S2SV_ModStart> "ChunkedDecode:<S2SV_blank>chunk<S2SV_blank>length<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>buffer" ) ; VAR_70 = VAR_73 <S2SV_ModEnd> ; break ; <S2SV_ModStart> + 2 , ( TYPE_11 ) VAR_72 <S2SV_ModEnd> ) ; VAR_67 <S2SV_ModStart> -> VAR_55 += ( TYPE_11 ) VAR_72 <S2SV_ModEnd> ; * ( <S2SV_ModStart> ( VAR_57 + VAR_72 <S2SV_ModEnd> ) = '\\0' <S2SV_ModStart> + 4u + ( TYPE_11 ) VAR_72 <S2SV_ModEnd> ; VAR_64 = <S2SV_ModStart> ; } return VAR_70 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_5 VAR_8 , TYPE_7 <S2SV_ModEnd> * VAR_17 ) <S2SV_ModStart> TYPE_5 VAR_16 ; TYPE_7 <S2SV_ModEnd> VAR_18 ; VAR_18
<S2SV_ModStart> * VAR_20 ; struct STRUCT_OR_UNION_0 VAR_21 = * VAR_13 ; if ( ! METHOD_5 ( VAR_13 ) ) { METHOD_6 ( "lspci_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state" , & VAR_21 ) ; }
<S2SV_ModStart> * VAR_52 = METHOD_15 ( VAR_48 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , TYPE_7 VAR_82 , struct STRUCT_OR_UNION_1 * VAR_220 <S2SV_ModStart> VAR_213 ) ; if ( VAR_220 ) * VAR_220 = VAR_211 ;
<S2SV_ModStart> , unsigned TYPE_2 VAR_20 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> = VAR_18 + VAR_20 <S2SV_ModEnd> ; VAR_18 +=
<S2SV_ModStart> ( VAR_15 -> VAR_29 <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & VAR_15 -> interface -> VAR_16 , "missing<S2SV_blank>bulk<S2SV_blank>out<S2SV_blank>endpoints\\n" ) ; return - ENODEV ; } <S2SV_ModEnd> VAR_24 = VAR_15
<S2SV_ModStart> -> VAR_58 ; unsigned <S2SV_ModStart> VAR_54 -> VAR_59 || VAR_35 < sizeof ( struct STRUCT_OR_UNION_6 ) - 1 <S2SV_ModStart> ( VAR_35 - ( <S2SV_ModStart> struct STRUCT_OR_UNION_6 ) - 1 ) <S2SV_ModEnd> ) / VAR_54
<S2SV_ModStart> -> VAR_29 , "<td>" "<form<S2SV_blank>method=POST<S2SV_blank>action=%s>" "<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>" "<input<S2SV_blank>type=hidden<S2SV_blank>value=\'start\'<S2SV_blank>name=action>" "<input<S2SV_blank>type=submit<S2SV_blank>value=\'Start<S2SV_blank>service\'>" "</form>" "</td>" , VAR_34 -> VAR_31 , VAR_28 -> VAR_36 <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> VAR_29 , "<td>" "<form<S2SV_blank>method=POST<S2SV_blank>action=%s>" "<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>" "<input<S2SV_blank>type=hidden<S2SV_blank>value=\'stop\'<S2SV_blank>name=action>" "<input<S2SV_blank>type=submit<S2SV_blank>value=\'Stop<S2SV_blank>service\'>" "</form>" "</td>" , VAR_34 -> VAR_31 , VAR_28 -> VAR_36 <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> VAR_29 , "<td>" "<form<S2SV_blank>method=POST<S2SV_blank>action=%s>" "<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>" "<input<S2SV_blank>type=hidden<S2SV_blank>value=\'restart\'<S2SV_blank>name=action>" "<input<S2SV_blank>type=submit<S2SV_blank>value=\'Restart<S2SV_blank>service\'>" "</form>" "</td>" , VAR_34 -> VAR_31 , VAR_28 -> VAR_36 ) ; METHOD_6 ( VAR_28 -> VAR_29 , "<td>" "<form<S2SV_blank>method=POST<S2SV_blank>action=%s>" "<input<S2SV_blank>type=hidden<S2SV_blank>name=\'securitytoken\'<S2SV_blank>value=\'%s\'>" "<input<S2SV_blank>type=hidden<S2SV_blank>value=\'%s\'<S2SV_blank>name=action>" "<input<S2SV_blank>type=submit<S2SV_blank>value=\'%s\'>" "</form>" "</td>" , VAR_34 -> VAR_31 , VAR_28 -> VAR_36 <S2SV_ModEnd> , VAR_34 -> <S2SV_ModStart> "Enable<S2SV_blank>monitoring" ) ; METHOD_6 ( VAR_28 -> VAR_29 , "</tr></table>" ) ;
<S2SV_ModStart> ) && ! METHOD_6 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 ,
<S2SV_ModStart> VAR_14 , TYPE_3 * <S2SV_ModStart> VAR_34 ) ; if ( * VAR_21 == VAR_36 ) { * VAR_21 = METHOD_5 ( VAR_34 , VAR_37 ) ; if ( ! * VAR_21 ) return - VAR_38 ; VAR_35 = VAR_34 ; } <S2SV_ModStart> & VAR_20 , *
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_15 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1
<S2SV_ModStart> ] ; TYPE_48 VAR_299 = VAR_561 [ VAR_562 + 5 ] ; TYPE_48 <S2SV_ModStart> VAR_294 < VAR_568 || VAR_299 * 8 < VAR_568 <S2SV_ModStart> VAR_562 + 4 ] ; TYPE_48 VAR_596 = VAR_561 [ VAR_562 + 5 <S2SV_ModStart> 1 || VAR_346 < VAR_568 || VAR_596 * 8
<S2SV_ModStart> STRUCT_OR_UNION_7 != VAR_24 <S2SV_ModEnd> ) continue ;
<S2SV_ModStart> VAR_26 = METHOD_2 ( VAR_32 ) ; struct STRUCT_OR_UNION_3 * VAR_36 = METHOD_9 <S2SV_ModStart> VAR_35 ) ; METHOD_10 ( VAR_36 <S2SV_ModEnd> , VAR_35 )
<S2SV_ModStart> = METHOD_3 ( 0
<S2SV_ModStart> ( VAR_13 ) <S2SV_ModEnd> ; return 0
<S2SV_ModStart> '=' : case \'"\' : case '\\\\' : case
<S2SV_ModStart> ) { return VAR_21 <S2SV_ModEnd> ; } while
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_4 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1 <S2SV_ModStart> ( VAR_4 , <S2SV_ModEnd> 1 , VAR_6
<S2SV_ModStart> ; TYPE_10 VAR_38 <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> * VAR_40 ; TYPE_4 VAR_38 ; <S2SV_ModStart> TYPE_3 VAR_46 ; METHOD_10 ( VAR_31 ) ; VAR_38 = VAR_10 -> VAR_38 ; VAR_46 = VAR_38 ? <S2SV_ModEnd> METHOD_4 ( VAR_41 <S2SV_ModStart> , VAR_42 ) : 0 ; METHOD_11 ( VAR_31 ) <S2SV_ModStart> -> VAR_38 = VAR_38 ; if ( ! VAR_38 ) return VAR_46 <S2SV_ModEnd> ; VAR_46 =
<S2SV_ModStart> |= VAR_47 ; if ( VAR_54 & VAR_55 ) VAR_53 |= VAR_56 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_28 ) { if ( VAR_28 -> VAR_22 == VAR_31 ) return VAR_32 ;
<S2SV_ModStart> TYPE_1 ) { if ( ! VAR_61 ) { METHOD_30 ( ) ; METHOD_29 ( VAR_62 , "Not<S2SV_blank>in<S2SV_blank>Recovery<S2SV_blank>mode" ) ; METHOD_34 ( ) ; return ; } <S2SV_ModStart> } VAR_54 [ METHOD_36 ( 0u , METHOD_35 ( VAR_54 , sizeof ( VAR_54 ) <S2SV_ModEnd> ) - 1 <S2SV_ModStart> ) - 1 )
<S2SV_ModStart> -> VAR_49 ; * VAR_51 = sizeof ( * VAR_52 ) ; } <S2SV_ModEnd> if ( VAR_53
<S2SV_ModStart> { if ( VAR_5 &&
<S2SV_ModStart> ; if ( METHOD_12 ( VAR_22 , & STRUCT_OR_UNION_23 -> VAR_23 ) && ! METHOD_12 ( VAR_31 , & STRUCT_OR_UNION_23 -> VAR_23 ) &&
<S2SV_ModStart> VAR_252 , TYPE_40 VAR_257 <S2SV_ModEnd> , const TYPE_33 <S2SV_ModStart> VAR_247 ] ; if ( VAR_252 > VAR_257 ) { return - 1 ; } <S2SV_ModStart> + VAR_232 > VAR_257 <S2SV_ModEnd> ) { VAR_232 <S2SV_ModStart> ( TYPE_38 ) VAR_257 <S2SV_ModEnd> - ( TYPE_38 <S2SV_ModStart> VAR_247 ) > VAR_257 <S2SV_ModEnd> ) { return
<S2SV_ModStart> VAR_23 ) { <S2SV_ModEnd> METHOD_18 ( VAR_51
<S2SV_ModStart> TYPE_6 * VAR_50 ; VAR_50 = METHOD_14 ( VAR_49 , VAR_38 ) ; if ( ! VAR_50 ) { METHOD_12 ( VAR_42 , VAR_19 ) ; goto VAR_46 ; } for ( ; ; ) { VAR_36 = METHOD_7 ( VAR_28 , VAR_34 , sizeof ( VAR_34 ) ) ; if ( VAR_36 <= 0 ) { if ( METHOD_8 ( VAR_28 ) == VAR_27 ) { if ( ! METHOD_9 ( VAR_28 ) ) goto VAR_46 ; } if ( VAR_36 < 0 ) goto VAR_46 ; break ; } if ( VAR_50 && ( METHOD_10 ( VAR_50 , VAR_34 , VAR_36 ) != VAR_36 ) ) goto VAR_46 ; } <S2SV_ModEnd> if ( VAR_38 <S2SV_ModStart> VAR_39 ) { <S2SV_ModEnd> if ( !
<S2SV_ModStart> + VAR_269 ; VAR_271 -= ( TYPE_3 ) VAR_269 ; <S2SV_ModStart> + VAR_269 ; VAR_271 -= ( TYPE_3 ) VAR_269 ; <S2SV_ModStart> + VAR_269 ; VAR_271 -= ( TYPE_3 ) VAR_269 ;
<S2SV_ModStart> VAR_62 - 1 <S2SV_ModEnd> ) ; else <S2SV_ModStart> VAR_65 , VAR_62 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ; TYPE_7 VAR_82 = 0 <S2SV_ModStart> goto VAR_143 ; VAR_143 = - VAR_144 ; if ( METHOD_2 ( VAR_94 > VAR_145 ) ) goto VAR_143 ; <S2SV_ModStart> VAR_118 ) { if ( VAR_94 > VAR_146 ) { VAR_82 = METHOD_22 ( VAR_97 , VAR_94 - VAR_146 ) ; if ( VAR_82 < VAR_109 ) VAR_82 = 0 ; else VAR_82 -= VAR_109 ; } if ( VAR_82 < VAR_112 . VAR_84 )
<S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> VAR_4 ) { switch ( VAR_4 -> VAR_5 ) { case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : if ( METHOD_2 ( VAR_4 -> VAR_11 ) ) return 1 ; break ; case VAR_12 : case VAR_13 : VAR_4 -> VAR_11 = METHOD_3 ( VAR_4 -> VAR_11 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_17 * VAR_222 , * VAR_234 ( TYPE_38 ) <S2SV_ModStart> VAR_184 ) { <S2SV_ModEnd> TYPE_38 = VAR_190 <S2SV_ModStart> -> VAR_222 ; METHOD_64 ( & TYPE_38 -> VAR_202 , & VAR_222 -> VAR_202 ) ; METHOD_33 ( VAR_190 , VAR_177 ) ; METHOD_34 ( VAR_190 ) ; METHOD_43 ( VAR_195 , & VAR_190 -> VAR_191 , VAR_192 ) { METHOD_33 ( VAR_195 , VAR_177 ) ; METHOD_34 ( VAR_195 ) ; METHOD_58 ( TYPE_38 ) ; } } else { <S2SV_ModStart> METHOD_50 ( & VAR_222 -> VAR_202 ) ; } METHOD_38 ( VAR_222 -> VAR_181 ) ; if ( VAR_184 ) { METHOD_40 ( ) ; METHOD_46 ( VAR_222 , VAR_190 , VAR_190 -> TYPE_41 ) ; METHOD_45 ( VAR_222 ) ; METHOD_43 ( VAR_195 , & VAR_190 -> VAR_191 , VAR_192 ) { METHOD_46 ( VAR_222 , VAR_195 , VAR_195 -> TYPE_41 ) ; METHOD_45 ( VAR_222 ) ; } } METHOD_46 ( VAR_222 , VAR_224 , VAR_224 -> TYPE_41 ) ; METHOD_57 ( VAR_222 ) ; if ( VAR_184 ) { METHOD_52 ( & <S2SV_ModStart> VAR_202 ) ; <S2SV_ModEnd> METHOD_58 ( TYPE_38 <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_52 ( &
<S2SV_ModStart> VAR_5 ) { struct STRUCT_OR_UNION_0 * VAR_6 ; struct STRUCT_OR_UNION_1 * VAR_7 ; VAR_6 = METHOD_2 ( sizeof ( * VAR_6 ) , VAR_8 ) ; if ( ! VAR_6 ) return METHOD_3 ( - VAR_9 ) ; VAR_7 = <S2SV_ModEnd> METHOD_1 ( VAR_3 <S2SV_ModStart> VAR_5 ) ; if ( METHOD_4 ( VAR_7 ) ) { METHOD_5 ( VAR_6 ) ; return METHOD_6 ( VAR_7 ) ; } VAR_6 -> VAR_7 = VAR_7 ; return VAR_6 ;
<S2SV_ModStart> VAR_5 & ( 1U << ( unsigned TYPE_2 ) <S2SV_ModEnd> VAR_7 ) )
<S2SV_ModStart> VAR_68 >= 0 && METHOD_48 ( VAR_133 -> VAR_72 , VAR_108 ) == ( TYPE_8 * ) VAR_137
<S2SV_ModStart> * VAR_78 ; unsigned <S2SV_ModStart> return - VAR_77 ; if ( VAR_65 > ( VAR_82 - VAR_52 - sizeof ( struct STRUCT_OR_UNION_8 ) - sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_83
<S2SV_ModStart> ; VAR_32 = METHOD_5 <S2SV_ModEnd> ( VAR_106 ->
<S2SV_ModStart> VAR_24 ; const TYPE_5 * VAR_27 = & VAR_14 -> VAR_27 ; const <S2SV_ModStart> , VAR_24 -> VAR_28 <S2SV_ModEnd> >> 5 ) <S2SV_ModStart> -> VAR_25 ; if ( VAR_27 -> VAR_29 ) { const TYPE_4 VAR_30 = VAR_24 -> VAR_28 * VAR_27 -> VAR_29 / 100 ; VAR_26 = METHOD_2 ( VAR_26 , VAR_30 ) ; }
<S2SV_ModStart> ; if ( VAR_227 >= 31 || ( ( VAR_250 -> VAR_240 << VAR_227 ) >> VAR_227 ) != VAR_250 -> VAR_240 || VAR_215 >= 31 || ( ( VAR_250 -> VAR_251 << VAR_215 ) >> VAR_215 ) != VAR_250 -> VAR_251 ) { continue ; } if (
<S2SV_ModStart> VAR_270 ) { if ( VAR_270 -> VAR_230 + VAR_274 -> VAR_235 -> VAR_164 > VAR_279 - 2 || VAR_270 -> VAR_244 + VAR_274 -> VAR_235 -> VAR_164 > VAR_279 - 2 ) { return - 1 ; } <S2SV_ModStart> VAR_222 * ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << ( VAR_270 <S2SV_ModStart> VAR_236 * ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << ( VAR_270 <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_203 ) <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_216 )
<S2SV_ModStart> , TYPE_3 VAR_28 , TYPE_5 * VAR_30 <S2SV_ModStart> return 0 ; if ( VAR_30 ) { <S2SV_ModStart> case VAR_7 : { VAR_29 = METHOD_8 ( VAR_30 , 5 ) ; if ( VAR_29 ) METHOD_9 ( VAR_29 , "null" ) ; break ; } case VAR_9 : { VAR_29 = METHOD_8 ( VAR_30 , 6 ) ; if ( VAR_29 ) METHOD_9 ( VAR_29 , "false" ) ; break ; } case VAR_11 : { VAR_29 = METHOD_8 ( VAR_30 , 5 ) ; if ( VAR_29 ) METHOD_9 ( VAR_29 , "true" ) ; break ; } case VAR_13 : VAR_29 = METHOD_4 ( VAR_26 , VAR_30 ) ; break ; case VAR_16 : VAR_29 = METHOD_5 ( VAR_26 , VAR_30 ) ; break ; case VAR_19 : VAR_29 = METHOD_6 ( VAR_26 , VAR_27 , VAR_28 , VAR_30 ) ; break ; case VAR_24 : VAR_29 = METHOD_7 ( VAR_26 , VAR_27 , VAR_28 , VAR_30 ) ; break ; } } else { switch ( ( VAR_26 -> VAR_6 ) & 255 ) { case VAR_7 : <S2SV_ModStart> METHOD_4 ( VAR_26 , 0 <S2SV_ModStart> METHOD_5 ( VAR_26 , 0 <S2SV_ModStart> VAR_27 , VAR_28 , 0 <S2SV_ModStart> VAR_27 , VAR_28 , 0 ) ; break ; } <S2SV_ModEnd> } return VAR_29
<S2SV_ModStart> VAR_4 ) { ( TYPE_6 ) VAR_0 ; ( TYPE_6 ) VAR_4 ;
<S2SV_ModStart> * VAR_28 , TYPE_7 <S2SV_ModEnd> * VAR_27 ) <S2SV_ModStart> TYPE_5 VAR_31 ; <S2SV_ModEnd> for ( VAR_31 <S2SV_ModStart> ++ VAR_31 ) { TYPE_6 VAR_30 [ VAR_12 ] ; TYPE_8 VAR_32 [ VAR_12 ] ; if ( VAR_28 -> VAR_33 . VAR_34 -> VAR_35 . VAR_36 [ VAR_31 ] <= 20 || ( VAR_31 >= VAR_37 && VAR_28 -> VAR_38 . VAR_39 == VAR_40 ) ) { METHOD_4 ( VAR_27 , 0 ) ; } else { METHOD_2 ( VAR_28 , VAR_31 , VAR_30 , VAR_32 ) ; <S2SV_ModStart> VAR_31 , VAR_30 , VAR_32 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } } }
<S2SV_ModStart> , '/' ) ; if ( VAR_58 == VAR_65 ) return ( VAR_66 ) ; VAR_58 ++ <S2SV_ModEnd> ; METHOD_20 (
<S2SV_ModStart> STRUCT_OR_UNION_4 ) >= VAR_12 || ( unsigned TYPE_11 * ) VAR_53 + VAR_53 -> VAR_19 >
<S2SV_ModStart> "<S2SV_blank><S2SV_blank><S2SV_blank>xy<S2SV_blank><S2SV_blank><S2SV_blank>x" ) ; METHOD_164 ( "\\\\x0" ) ; METHOD_164 ( "\\\\x" ) ; METHOD_164 ( "\\\\xxy" ) ;
<S2SV_ModStart> = 0 ; VAR_36 -> VAR_38 = 0 ;
<S2SV_ModStart> , TYPE_17 TYPE_39 VAR_6 <S2SV_ModStart> , TYPE_12 TYPE_40 VAR_6 <S2SV_ModStart> VAR_142 ) { <S2SV_ModEnd> switch ( METHOD_58 <S2SV_ModStart> [ 0 ] ) ; METHOD_65 ( ( VAR_158 , "<S2SV_blank>attrs=(" ) <S2SV_ModStart> ) ; } METHOD_65 ( ( VAR_158 , ")" ) ) ; <S2SV_ModStart> case VAR_135 : METHOD_65 ( ( VAR_158 , "<S2SV_blank>status=(" ) ) ; <S2SV_ModStart> ) ) ; METHOD_65 ( ( VAR_158 , ")" ) ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; default : if ( VAR_158 -> VAR_161 > 3 ) { METHOD_65 ( ( VAR_158 , "<S2SV_blank>data=(" ) ) ; if ( ! METHOD_56 ( VAR_158 , ( const TYPE_35 * ) ( VAR_148 ) , VAR_142 - VAR_148 ) ) goto VAR_157 ; <S2SV_ModEnd> METHOD_65 ( ( <S2SV_ModStart> ) ) ; } else { if ( ! METHOD_67 ( VAR_158 , VAR_148 , VAR_142 ) ) goto VAR_157 ; } break ; }
<S2SV_ModStart> VAR_5 ) ; METHOD_4 ( & VAR_13 ) ; <S2SV_ModStart> VAR_12 ) ) { VAR_12 = VAR_10 ; goto VAR_14 ; } <S2SV_ModEnd> METHOD_3 ( VAR_12 <S2SV_ModStart> METHOD_3 ( VAR_12 ) ; VAR_14 : METHOD_5 ( & VAR_13
<S2SV_ModStart> -> VAR_1128 && <S2SV_ModEnd> VAR_1158 -> VAR_1126 <S2SV_ModStart> VAR_1158 -> VAR_1126 <S2SV_ModEnd> ) { TYPE_27 <S2SV_ModStart> VAR_1158 -> VAR_1126 == 0 <S2SV_ModEnd> ) { VAR_502 <S2SV_ModStart> VAR_1158 -> VAR_1126 <S2SV_ModEnd> ) { if <S2SV_ModStart> } else { VAR_480 = 2 <S2SV_ModEnd> ; VAR_460 = <S2SV_ModStart> ; VAR_460 = ( VAR_1158 -> VAR_856 * VAR_1158 -> VAR_998 ) - VAR_1158 -> VAR_1141 ; VAR_463 = & VAR_685 ; } } else { if ( ( <S2SV_ModStart> VAR_1115 << VAR_453 ) > VAR_1158 -> VAR_1141 ) <S2SV_ModEnd> { VAR_480 = <S2SV_ModStart> ; VAR_460 = <S2SV_ModEnd> ( VAR_1115 << <S2SV_ModStart> << VAR_453 ) - <S2SV_ModEnd> VAR_1158 -> VAR_1141 <S2SV_ModStart> VAR_1158 -> VAR_1141 ; VAR_463 = & VAR_685 ; } else if ( <S2SV_ModEnd> ( VAR_1115 << <S2SV_ModStart> << VAR_453 ) <S2SV_ModEnd> < VAR_1158 -> <S2SV_ModStart> VAR_1158 -> VAR_1126 <S2SV_ModEnd> ) { VAR_1159 <S2SV_ModStart> VAR_1158 -> VAR_1126 <S2SV_ModEnd> ) { if <S2SV_ModStart> { VAR_1158 -> <S2SV_ModEnd> VAR_1128 = 0
<S2SV_ModStart> 4 ; } if ( VAR_169 -> VAR_167 == VAR_180 ) { VAR_162 = 8 ; VAR_165 = 8 ; } <S2SV_ModStart> VAR_167 == VAR_137 || VAR_169 -> VAR_167 == VAR_180
<S2SV_ModStart> ( VAR_23 ) && ! METHOD_10 ( VAR_23 )
<S2SV_ModStart> "ImproperImageHeader" ) ; VAR_558 = VAR_699 . VAR_384 * VAR_699 . VAR_407 ; <S2SV_ModStart> ( TYPE_65 ) METHOD_118 ( <S2SV_ModStart> . VAR_566 , VAR_558 * VAR_699 . VAR_384 ) , <S2SV_ModStart> VAR_699 . VAR_401 <S2SV_ModEnd> ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_3 , const TYPE_4 <S2SV_ModEnd> * VAR_5 , <S2SV_ModStart> * VAR_5 , vpx_tree <S2SV_ModEnd> VAR_4 ) {
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_22 ; unsigned TYPE_2 VAR_44 ; <S2SV_ModStart> ; METHOD_13 ( VAR_8 , METHOD_6 ( ) ) ; VAR_44 = METHOD_4 ( ) ; METHOD_13 ( VAR_7 , VAR_44 ) ; VAR_20 -> VAR_45 . VAR_46 = VAR_44 <S2SV_ModEnd> ; TYPE_16 (
<S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_19 [ 1 <S2SV_ModStart> ] << 8 ; VAR_22 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_19 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; VAR_23 . <S2SV_ModStart> . VAR_21 = <S2SV_ModEnd> VAR_22 & 0xffff <S2SV_ModStart> VAR_22 & 0xffff <S2SV_ModEnd> ; return ( <S2SV_ModStart> unsigned TYPE_7 ) VAR_19 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] << 8 ; VAR_22 |= ( unsigned TYPE_7 ) VAR_19 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> ; VAR_23 . <S2SV_ModStart> . VAR_21 = <S2SV_ModEnd> VAR_22 & 0xffff <S2SV_ModStart> VAR_22 & 0xffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> ) ) ; VAR_124 -> VAR_128 = 0 ; METHOD_15 ( VAR_124 -> VAR_129 , VAR_130 ) ;
<S2SV_ModStart> ( 2 , "vm_open<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n" <S2SV_ModEnd> , VAR_11 ,
<S2SV_ModStart> VAR_4 ) ; struct STRUCT_OR_UNION_3 * VAR_82 <S2SV_ModEnd> ; if ( <S2SV_ModStart> - VAR_8 ; VAR_82 = VAR_79 -> VAR_83 ; <S2SV_ModStart> - VAR_11 ; if ( METHOD_2 ( & VAR_79 -> VAR_84 ) < 0 ) { METHOD_15 ( & VAR_79 -> VAR_80 ) ; return - VAR_11 ; } <S2SV_ModStart> case VAR_15 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> + 0x36 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 3 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 0 , <S2SV_ModStart> case VAR_24 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 , 1 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 2 , <S2SV_ModStart> 1 ] = VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ] = VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> ; default : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0x08 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> . VAR_61 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> METHOD_13 ( & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 3 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> + 3 , VAR_82 -> VAR_85 <S2SV_ModEnd> , 1 , <S2SV_ModStart> case 2 : VAR_82 -> VAR_85 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0x09 ; VAR_82 -> VAR_85 [ 1 ] = VAR_77 [ 0 ] . VAR_78 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> . VAR_78 ; VAR_82 -> VAR_85 <S2SV_ModEnd> [ 3 ] <S2SV_ModStart> METHOD_13 ( & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> ( VAR_79 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> + 4 , VAR_82 -> VAR_85 <S2SV_ModEnd> , VAR_77 [ <S2SV_ModStart> VAR_75 , & VAR_82 -> VAR_85 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> & VAR_79 -> VAR_84 ) ; METHOD_15 ( & VAR_79 ->
<S2SV_ModStart> - VAR_64 ; if ( VAR_96 < 1 || VAR_96 == 0xffffffff ) { return - 1 ; }
<S2SV_ModStart> STRUCT_OR_UNION_6 * STRUCT_OR_UNION_6 ; TYPE_0 VAR_6 = - VAR_4 <S2SV_ModStart> ; if ( STRUCT_OR_UNION_6 ) { VAR_6 = METHOD_2 ( STRUCT_OR_UNION_6 ) ; if ( VAR_6 ) METHOD_3 ( STRUCT_OR_UNION_6 ) ; else <S2SV_ModEnd> * VAR_5 = <S2SV_ModStart> = STRUCT_OR_UNION_6 ; } return VAR_6 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; VAR_152 = METHOD_31 ( & VAR_175 ) ; if ( VAR_152 ) goto VAR_176 ; VAR_152 = <S2SV_ModStart> METHOD_31 ( & VAR_173 ) ; if ( VAR_152 ) goto VAR_174 <S2SV_ModEnd> ; VAR_152 = <S2SV_ModStart> METHOD_35 ( & VAR_173 ) ; VAR_174 <S2SV_ModEnd> : METHOD_36 ( <S2SV_ModStart> ) ; VAR_158 : METHOD_35 ( & VAR_175 ) ; VAR_176
<S2SV_ModStart> , & VAR_18 ) ; if ( METHOD_8 ( VAR_18 , VAR_11 ) ) METHOD_11 ( VAR_30 , ( METHOD_9 ( VAR_31 ) , METHOD_10 ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) )
<S2SV_ModStart> ; VAR_100 -> VAR_102 = 0 ; VAR_100 ->
<S2SV_ModStart> } VAR_56 = METHOD_21 ( <S2SV_ModStart> sizeof ( VAR_114 )
<S2SV_ModStart> * VAR_50 ; TYPE_3 VAR_53 = VAR_48 & ( VAR_54 | VAR_55 ) ; <S2SV_ModStart> , & STRUCT_OR_UNION_22 , VAR_53 <S2SV_ModStart> STRUCT_OR_UNION_22 , VAR_47 , VAR_53 <S2SV_ModStart> , VAR_47 , VAR_53 <S2SV_ModEnd> ) ; VAR_49
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_17 ; if ( VAR_15 -> VAR_16 ) return 0
<S2SV_ModStart> if ( VAR_38 >= <S2SV_ModEnd> VAR_35 -> VAR_35
<S2SV_ModStart> -> VAR_9 += <S2SV_ModEnd> METHOD_1 ( VAR_15
<S2SV_ModStart> ( ! VAR_10 || VAR_13 > VAR_18 <S2SV_ModStart> VAR_15 ) ; if ( VAR_17 > ( TYPE_4 ) VAR_13 ) { VAR_17 = - 1 ; METHOD_4 ( VAR_15 ) ; }
<S2SV_ModStart> VAR_68 ) ? METHOD_12 <S2SV_ModEnd> ( 0 ,
<S2SV_ModStart> VAR_731 ++ ; METHOD_369 <S2SV_ModEnd> ( VAR_961 ,
<S2SV_ModStart> VAR_33 = { 0 , 0 ,
<S2SV_ModStart> ] ) ; if ( VAR_180 == 0 ) VAR_180 = "" ;
<S2SV_ModStart> * VAR_91 ; TYPE_5 VAR_92 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_92 ) ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> ( VAR_114 , VAR_101 , true , <S2SV_ModEnd> & VAR_71 )
<S2SV_ModStart> 0 ) ; TYPE_42 VAR_278 = VAR_268 -> VAR_185 ; if ( VAR_278 < 1 ) { goto VAR_272 ; } VAR_248 += VAR_278 <S2SV_ModEnd> ; for (
<S2SV_ModStart> VAR_35 -> VAR_22 [ VAR_36 ] && VAR_35 -> VAR_29
<S2SV_ModStart> return ; } <S2SV_ModEnd> if ( VAR_69 <S2SV_ModStart> ) ; } VAR_75 = scsi_init_iovec ( VAR_81 ) ; METHOD_12 ( VAR_69 -> VAR_70 , & VAR_81 -> VAR_62 , VAR_75 * VAR_64 , VAR_65 ) ; VAR_81 -> VAR_78 . VAR_79 = METHOD_13 ( VAR_69 -> VAR_70 , VAR_81 -> VAR_72 , <S2SV_ModEnd> & VAR_81 -> <S2SV_ModStart> -> VAR_74 , VAR_75 , METHOD_15 , VAR_81 ) ; if ( <S2SV_ModEnd> VAR_81 -> VAR_78 <S2SV_ModStart> VAR_78 . VAR_79 <S2SV_ModEnd> == VAR_80 )
<S2SV_ModStart> VAR_17 ) { METHOD_4 <S2SV_ModEnd> ( VAR_17 -> <S2SV_ModStart> 5 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_17 -> <S2SV_ModStart> 5 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_17 ->
<S2SV_ModStart> * VAR_138 ; <S2SV_ModEnd> } * VAR_136 <S2SV_ModStart> VAR_128 ) ; <S2SV_ModEnd> for ( VAR_128
<S2SV_ModStart> VAR_32 ) { struct STRUCT_OR_UNION_13 * VAR_44 ; TYPE_9 VAR_45 ; unsigned TYPE_3 VAR_99 ; <S2SV_ModStart> STRUCT_OR_UNION_21 ) ; VAR_44 = VAR_86 -> VAR_37 -> VAR_38 ; VAR_45 = METHOD_9 ( VAR_84 , VAR_86 , VAR_87 ) ; <S2SV_ModStart> VAR_96 ) { VAR_99 = METHOD_31 ( VAR_44 -> VAR_100 ) >> METHOD_32 ( VAR_84 ) ; VAR_93 = - VAR_28 ; if ( VAR_45 >= VAR_99 ) goto VAR_97 <S2SV_ModEnd> ; VAR_93 = <S2SV_ModStart> ( VAR_95 ) ; VAR_99 = METHOD_31 ( VAR_44 -> VAR_100 ) >> METHOD_32 ( VAR_84 ) ; VAR_93 = - VAR_28 ; if ( VAR_45 >= VAR_99 ) goto VAR_94
<S2SV_ModStart> VAR_175 ) { if ( VAR_172 && ( <S2SV_ModEnd> METHOD_13 ( VAR_114 <S2SV_ModStart> , VAR_172 ) != 0 ) <S2SV_ModEnd> ) goto VAR_173
<S2SV_ModStart> case VAR_45 : if ( <S2SV_ModStart> , VAR_52 ) == - 1 ) goto VAR_59
<S2SV_ModStart> VAR_46 , VAR_9 ) ) { METHOD_3 ( VAR_46 , VAR_11 ) ; return 1 ; } if ( METHOD_26 ( VAR_46
<S2SV_ModStart> VAR_245 , VAR_246 , VAR_644 <S2SV_ModStart> == VAR_193 ; VAR_644 = VAR_638 -> VAR_191 & BPF_ALU_IMMEDIATE ; <S2SV_ModStart> ; if ( VAR_644 ) { <S2SV_ModEnd> * VAR_251 ++ <S2SV_ModStart> VAR_251 ++ = METHOD_21 ( VAR_234 , VAR_638 -> VAR_207 ) ; } else { if ( VAR_246 ) <S2SV_ModEnd> * VAR_251 ++ <S2SV_ModStart> VAR_251 ++ = METHOD_28 ( VAR_248 , VAR_249 , - 1 <S2SV_ModEnd> ) ; * <S2SV_ModStart> VAR_251 ++ = METHOD_21 ( VAR_234 , VAR_638 -> VAR_207 <S2SV_ModEnd> ) ; * <S2SV_ModStart> = METHOD_26 ( VAR_209 <S2SV_ModEnd> , VAR_234 , <S2SV_ModStart> VAR_251 ++ = METHOD_26 ( VAR_213 <S2SV_ModEnd> , VAR_234 , <S2SV_ModStart> , VAR_234 , VAR_249 <S2SV_ModEnd> ) ; * <S2SV_ModStart> = METHOD_28 ( VAR_217 <S2SV_ModEnd> , VAR_234 , <S2SV_ModStart> , VAR_234 , 0 <S2SV_ModEnd> ) ; * <S2SV_ModStart> VAR_251 ++ = METHOD_28 ( VAR_220 , VAR_234 , 63 ) ; * VAR_251 ++ = <S2SV_ModStart> VAR_249 ) ; } <S2SV_ModStart> VAR_245 && VAR_246 && ! VAR_644
<S2SV_ModStart> - VAR_16 ; VAR_73 -> VAR_74 = 0 ; <S2SV_ModStart> goto VAR_78 ; <S2SV_ModEnd> if ( VAR_73
<S2SV_ModStart> TYPE_4 VAR_12 = METHOD_6 ( VAR_15 , VAR_19 | VAR_20 | VAR_21 | VAR_22 <S2SV_ModEnd> , VAR_6 |
<S2SV_ModStart> < 0 ) goto VAR_45 ; <S2SV_ModEnd> goto VAR_39 ;
<S2SV_ModStart> 0 ) , VAR_12 ) ; METHOD_10 ( METHOD_9 ( METHOD_8 ( METHOD_7 ( VAR_10 , 0 ) ) , "async" ) == 0 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> ( VAR_9 , VAR_10 <S2SV_ModEnd> , VAR_11 , <S2SV_ModStart> , VAR_11 , true <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * VAR_26 ; METHOD_12 ( VAR_6 , sizeof ( VAR_6 ) <S2SV_ModEnd> , "%s.conf" , <S2SV_ModStart> } METHOD_10 ( "\\\n<S2SV_blank><S2SV_blank><S2SV_blank>\\n\\n" <S2SV_ModEnd> , VAR_24 ,
<S2SV_ModStart> VAR_47 -> VAR_65 ; if ( VAR_49 > VAR_47 -> VAR_77 ) return 0
<S2SV_ModStart> , * VAR_137 <S2SV_ModEnd> ; TYPE_4 * <S2SV_ModStart> ; METHOD_12 ( "Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; METHOD_20 <S2SV_ModStart> && METHOD_46 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ; METHOD_46 ( ( unsigned TYPE_5 ) <S2SV_ModStart> 0 ) { METHOD_62 ( VAR_147 <S2SV_ModEnd> ) ; } <S2SV_ModStart> "string<S2SV_blank>currentfile" ) ) ) { METHOD_63 ( VAR_147 ) <S2SV_ModEnd> ; } } <S2SV_ModStart> && METHOD_44 ( ( unsigned TYPE_5 ) <S2SV_ModStart> && METHOD_44 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ; METHOD_46 ( ( unsigned TYPE_5 )
<S2SV_ModStart> -> VAR_143 ) || ( TYPE_96 -> VAR_156 . VAR_142 && TYPE_96 -> VAR_156 . VAR_142 -> VAR_269 ) <S2SV_ModStart> . VAR_60 = VAR_270 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( TYPE_96 -> VAR_156 . VAR_142 && TYPE_96 -> VAR_156 . VAR_142 -> VAR_269 ) { METHOD_40 ( TYPE_96 -> VAR_156 . VAR_60 ) ; if ( ! ( TYPE_96 -> VAR_239 & VAR_98 ) ) { METHOD_50 ( TYPE_96 , VAR_176 , VAR_259 , METHOD_51 ( VAR_176 ) , "SSL<S2SV_blank>is<S2SV_blank>required<S2SV_blank>but<S2SV_blank>the<S2SV_blank>server<S2SV_blank>doesn\'t<S2SV_blank>" "support<S2SV_blank>it" ) ; goto VAR_267 ; } } if ( ( TYPE_96 -> VAR_239 & VAR_98 ) && TYPE_96 -> VAR_156 . VAR_60 <S2SV_ModEnd> ) { struct <S2SV_ModStart> TYPE_62 VAR_160 ; if ( ! TYPE_96 -> VAR_156 . VAR_131 ) { METHOD_55 ( VAR_131 , VAR_271 ) ; }
<S2SV_ModStart> ( VAR_288 -> VAR_56 == 0 ) { METHOD_64 ( VAR_203 , "Error,<S2SV_blank>invalid<S2SV_blank>biBitCount<S2SV_blank>%d\\n" , 0 ) ; return VAR_204 ; } if ( VAR_288 ->
<S2SV_ModStart> VAR_532 ) ; METHOD_151 ( VAR_532 ) ; <S2SV_ModStart> | VAR_214 | VAR_148 <S2SV_ModEnd> , 0600 )
<S2SV_ModStart> "HTC<S2SV_blank>credit<S2SV_blank>config<S2SV_blank>timeout\\n" ) ; METHOD_9 ( VAR_44 ) ;
<S2SV_ModStart> = 0 ; VAR_282 -> VAR_154 . VAR_173 = 0 ; VAR_282 -> VAR_154 . VAR_181 = 0 ;
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_16 -> VAR_47 == VAR_48 <S2SV_ModEnd> ) { VAR_46 <S2SV_ModStart> VAR_18 ) ; METHOD_16 ( STRUCT_OR_UNION_16 , 0 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> TYPE_123 ) VAR_657 + 1
<S2SV_ModStart> == 0x89 ) { <S2SV_ModStart> return - VAR_220 ; } else METHOD_32 ( & VAR_167 , 0 , sizeof ( VAR_167 ) )
<S2SV_ModStart> = 0 ; VAR_139 = 0 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct STRUCT_OR_UNION_0 * <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_4 ) { if ( METHOD_3 ( & VAR_5 -> VAR_3 ) > VAR_7 ) { METHOD_4 <S2SV_ModEnd> ( & VAR_5 <S2SV_ModStart> VAR_3 ) ; return METHOD_5 ( - VAR_8 ) ; } <S2SV_ModStart> VAR_6 ) ; return VAR_5 ;
<S2SV_ModStart> VAR_315 = VAR_316 ; VAR_353 -> VAR_355 = VAR_356 ; } else if ( VAR_353 -> VAR_355 != VAR_356 ) { return 0
<S2SV_ModStart> TYPE_24 ) VAR_125 + 1
<S2SV_ModStart> VAR_13 ) { TYPE_10 <S2SV_ModEnd> * VAR_41 = <S2SV_ModStart> VAR_37 = VAR_22 <S2SV_ModEnd> ; TYPE_8 VAR_38 <S2SV_ModStart> , "base_direction" , <S2SV_ModEnd> "clean" , "reordernsm" <S2SV_ModStart> , VAR_13 , "U|iii" <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_37 , & <S2SV_ModEnd> VAR_38 , & <S2SV_ModStart> VAR_39 ) ) { <S2SV_ModStart> return VAR_20 ; } <S2SV_ModStart> VAR_26 ) ) { <S2SV_ModStart> VAR_37 ) ; } return METHOD_8 <S2SV_ModEnd> ( VAR_41 , <S2SV_ModStart> VAR_39 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> VAR_21 = METHOD_5 ( TYPE_1 , <S2SV_ModStart> * VAR_34 ++ , VAR_35 )
<S2SV_ModStart> VAR_15 ; TYPE_12 VAR_38 , VAR_45 = 0 ; TYPE_12 VAR_46 ; TYPE_10 VAR_43 ; if ( VAR_18 < VAR_43 ) return VAR_20 ; if ( VAR_21 < 1 ) return VAR_22 ; <S2SV_ModStart> & 0x07 ; <S2SV_ModEnd> VAR_43 = VAR_21 <S2SV_ModStart> - 1 ; VAR_42 ++ ; METHOD_1 ( VAR_15 , 0 , VAR_18 ) ; while ( VAR_43 ) { TYPE_12 VAR_33 ; * VAR_41 = 0 ; if ( VAR_43 == 1 ) VAR_33 = 8 - VAR_46 ; else VAR_33 = 8 ; if ( VAR_30 ) for ( VAR_38 = 0 ; VAR_38 < VAR_33 ; VAR_38 ++ ) { * VAR_41 |= ( ( * VAR_42 >> ( 7 - VAR_38 ) ) & 1 ) << VAR_38 ; } else { * VAR_41 = * VAR_42 ; } VAR_41 ++ ; VAR_42 ++ ; VAR_43 -- ; VAR_45 ++ ; } return ( VAR_45 * 8 <S2SV_ModEnd> ) - VAR_46
<S2SV_ModStart> ; if ( METHOD_3 ( VAR_8 ) <S2SV_ModEnd> >= VAR_6 )
<S2SV_ModStart> , & VAR_123 , 0
<S2SV_ModStart> + 1 ; METHOD_2 ( * VAR_18 , 1 ) ;
<S2SV_ModStart> ( VAR_58 = METHOD_16 ( VAR_91 , <S2SV_ModEnd> VAR_159 -> VAR_114 <S2SV_ModStart> VAR_159 -> VAR_118 <S2SV_ModEnd> ) ) <
<S2SV_ModStart> * VAR_5 , struct STRUCT_OR_UNION_23 * VAR_244 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; TYPE_6 VAR_243 = 0 <S2SV_ModStart> ; TYPE_15 VAR_224 = 0 <S2SV_ModEnd> ; TYPE_5 VAR_193 <S2SV_ModStart> ; TYPE_5 VAR_193 = METHOD_35 ( VAR_244 ) <S2SV_ModStart> TYPE_6 VAR_192 ; <S2SV_ModEnd> if ( METHOD_21 <S2SV_ModStart> ) ) return <S2SV_ModEnd> 0 ; METHOD_3 <S2SV_ModStart> { TYPE_15 VAR_164 <S2SV_ModEnd> = VAR_180 -> <S2SV_ModStart> goto VAR_222 ; VAR_243 = METHOD_36 ( VAR_182 -> STRUCT_OR_UNION_22 , VAR_172 , VAR_192 , VAR_244 ) ; if ( METHOD_21 ( VAR_243 < VAR_192 ) ) { VAR_164 = - VAR_245 ; <S2SV_ModEnd> goto VAR_222 ; <S2SV_ModStart> VAR_222 ; } VAR_224 = 1 ; <S2SV_ModStart> += VAR_192 ; VAR_243 = VAR_192 ; if ( ! METHOD_35 ( VAR_244 ) <S2SV_ModEnd> ) goto VAR_222 <S2SV_ModStart> -> VAR_189 ; TYPE_15 VAR_246 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; VAR_246 = METHOD_36 ( STRUCT_OR_UNION_22 , 0 , VAR_140 , VAR_244 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( METHOD_21 ( VAR_246 < VAR_140 && METHOD_35 ( VAR_244 ) ) ) { if ( ! VAR_243 ) VAR_243 = - VAR_245 <S2SV_ModEnd> ; break ; <S2SV_ModStart> } VAR_243 += VAR_246 <S2SV_ModEnd> ; VAR_182 -> <S2SV_ModStart> -> VAR_174 = VAR_246 <S2SV_ModEnd> ; VAR_182 -> <S2SV_ModStart> = VAR_190 ; if ( ! METHOD_35 ( VAR_244 ) <S2SV_ModEnd> ) break ;
<S2SV_ModStart> 64 : 32 ; TYPE_6 VAR_367 = VAR_361 -> VAR_366 ; TYPE_0 VAR_368 <S2SV_ModStart> case VAR_59 : VAR_368 = METHOD_43 ( VAR_357 , VAR_361 ) ; if ( VAR_368 < 0 ) { METHOD_44 ( VAR_357 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n" , VAR_367 ) ; return VAR_368 ; } <S2SV_ModStart> case VAR_103 : VAR_368 = METHOD_43 ( VAR_357 , VAR_361 ) ; if ( VAR_368 < 0 ) { METHOD_44 ( VAR_357 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>pointers<S2SV_blank>or<S2SV_blank>scalars\\n" , VAR_367 ) ; return VAR_368 ; }
<S2SV_ModStart> VAR_12 ) { if ( VAR_59 + 2 > VAR_12 ) return - 1 ; <S2SV_ModStart> 2 ) ) ; if ( VAR_59 + 2 + VAR_60 > VAR_12 ) return - 1
<S2SV_ModStart> VAR_65 < 1 || VAR_106 -> VAR_65 > VAR_263
<S2SV_ModStart> VAR_72 ; } TYPE_11 * VAR_71 = METHOD_19 ( METHOD_20 ( ) ) ; const TYPE_12 * const VAR_73 = METHOD_16 ( VAR_2 ) ; TYPE_11 * VAR_74 = METHOD_19 ( VAR_73 ) ; if ( METHOD_23 ( VAR_71 -> VAR_61 , VAR_74 -> VAR_61 ) != 0 ) { METHOD_14 ( "Invalid<S2SV_blank>carbon<S2SV_blank>received,<S2SV_blank>from:<S2SV_blank>%s" , VAR_73 ) ; return VAR_72 ; } <S2SV_ModStart> METHOD_19 ( VAR_40 <S2SV_ModEnd> ) ; TYPE_12
<S2SV_ModStart> ; VAR_173 [ METHOD_34 ( ( TYPE_13 ) VAR_320 , ( sizeof VAR_173 ) - 1 ) <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> ; return VAR_17 < 0 ? VAR_17 : 0
<S2SV_ModStart> VAR_295 < 0 || VAR_295 >= 256
<S2SV_ModStart> TYPE_2 * VAR_19 , const TYPE_4 VAR_23 ) { TYPE_4 VAR_11 ; TYPE_4 <S2SV_ModEnd> VAR_22 = VAR_4 <S2SV_ModStart> = VAR_4 ; if ( VAR_23 < 1 ) { METHOD_5 ( ( VAR_18 , "\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data" ) ) ; return VAR_22 ; } <S2SV_ModStart> case VAR_12 : if ( VAR_23 != 1 + 4 ) { METHOD_5 ( ( VAR_18 , "(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , VAR_23 - 1 ) ) ; VAR_22 = VAR_21 ; break ; } <S2SV_ModStart> case VAR_16 : if ( VAR_23 != 1 + 16 ) { METHOD_5 ( ( VAR_18 , "(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , VAR_23 - 1 ) ) ; VAR_22 = VAR_21 ; break ; }
<S2SV_ModStart> * VAR_34 ; METHOD_4 <S2SV_ModEnd> ( & VAR_19 <S2SV_ModStart> ) ) ; METHOD_4 <S2SV_ModEnd> ( & VAR_21
<S2SV_ModStart> 3 , VAR_83 ) ; VAR_81 -> VAR_9 = METHOD_24 ( VAR_81 -> VAR_9 , METHOD_23 ( VAR_84 ) , METHOD_23 ( VAR_85 )
<S2SV_ModStart> * VAR_78 ; METHOD_7 <S2SV_ModEnd> ( & VAR_17 <S2SV_ModStart> ) ) ; METHOD_7 <S2SV_ModEnd> ( & VAR_19
<S2SV_ModStart> TYPE_4 VAR_94 , TYPE_9 * VAR_108 , TYPE_6 * const VAR_109 <S2SV_ModEnd> ) { TYPE_4 <S2SV_ModStart> VAR_10 -> VAR_7 -> VAR_8 ; <S2SV_ModEnd> METHOD_7 ( VAR_13
<S2SV_ModStart> TYPE_6 VAR_46 , VAR_59 ; VAR_59 = METHOD_4 ( METHOD_7 ( VAR_21 ) , <S2SV_ModEnd> ( TYPE_6 ) <S2SV_ModStart> ( VAR_7 ) ) <S2SV_ModStart> ) METHOD_5 ( VAR_59 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VAR_42 ) ; VAR_46 = VAR_51 ; for ( VAR_28 = VAR_21 ; VAR_28 != ( TYPE_11 * ) VAR_42 ; VAR_28 = VAR_28 -> VAR_28 ) VAR_46 = METHOD_4 ( VAR_28 -> VAR_46 , VAR_46 ) ; for ( VAR_54 = 0 <S2SV_ModEnd> ; VAR_54 < <S2SV_ModStart> ( TYPE_17 ) VAR_59 <S2SV_ModEnd> ; VAR_54 ++
<S2SV_ModStart> VAR_455 - VAR_445 - 4
<S2SV_ModStart> -> VAR_26 ) { METHOD_31 ( VAR_116 ) ; <S2SV_ModStart> - VAR_27 ; } <S2SV_ModStart> VAR_118 -> VAR_119 ) ; METHOD_32 ( VAR_118 -> VAR_26
<S2SV_ModStart> } else { VAR_1131 = <S2SV_ModStart> VAR_1128 ) ; if ( ( TYPE_42 ) VAR_3 != VAR_1131 ) { return VAR_1131 ; }
<S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 &&
<S2SV_ModStart> ; if ( ( TYPE_6 ) <S2SV_ModStart> <= 0 || ( TYPE_6 ) <S2SV_ModStart> VAR_80 -> VAR_9 <= 0 || ( TYPE_6 ) ( VAR_80 -> VAR_111 * VAR_80 -> VAR_9 )
<S2SV_ModStart> VAR_42 ; TYPE_6 VAR_45 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> VAR_13 ) { METHOD_6 ( & VAR_42 -> VAR_43 ) ; return - VAR_15 <S2SV_ModEnd> ; } METHOD_2 <S2SV_ModStart> VAR_26 ) ; VAR_45 <S2SV_ModEnd> = METHOD_3 ( <S2SV_ModStart> VAR_26 ) ; <S2SV_ModEnd> METHOD_6 ( & <S2SV_ModStart> ) ; return METHOD_7 ( VAR_29 , VAR_1 , VAR_39 , VAR_30 , VAR_45 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0.0 ) ; ( TYPE_38 ) METHOD_26 ( & <S2SV_ModStart> VAR_306 -> VAR_291 , <S2SV_ModEnd> VAR_291 ) ;
<S2SV_ModStart> VAR_241 , VAR_266 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> * STRUCT_OR_UNION_9 = METHOD_5 ( STRUCT_OR_UNION_12 ) <S2SV_ModEnd> -> VAR_1 ; <S2SV_ModStart> = METHOD_4 ( METHOD_5 ( STRUCT_OR_UNION_12 ) <S2SV_ModEnd> , VAR_10 ,
<S2SV_ModStart> VAR_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_2 ) ; METHOD_4 ( "ANOPE_FLAGS_COMPAT" , & VAR_3 . VAR_4 -> VAR_5 ) ;
<S2SV_ModStart> VAR_241 ) ; METHOD_11 ( & VAR_20 , 0 , sizeof ( VAR_20 ) ) ;
<S2SV_ModStart> = VAR_13 ; METHOD_2 ( VAR_113 ) ; METHOD_3 ( & VAR_111 -> VAR_112 ) ; METHOD_12 ( ) ; <S2SV_ModStart> -> VAR_15 ) { VAR_114 = <S2SV_ModEnd> - VAR_16 ; <S2SV_ModStart> - VAR_16 ; goto VAR_110 ; } <S2SV_ModEnd> if ( VAR_23
<S2SV_ModStart> VAR_341 ++ ; <S2SV_ModEnd> VAR_309 ++ ; <S2SV_ModStart> ) ; } VAR_344 -> VAR_278 += VAR_341 ;
<S2SV_ModStart> * VAR_33 ; unsigned TYPE_3 VAR_34 ; <S2SV_ModStart> STRUCT_OR_UNION_7 -> VAR_31 ) ; METHOD_10 ( & METHOD_6 ( STRUCT_OR_UNION_7 ) -> VAR_35 , VAR_34 <S2SV_ModStart> ) ; } METHOD_11 ( & METHOD_6 ( STRUCT_OR_UNION_7 ) -> VAR_35 , VAR_34 ) ;
<S2SV_ModStart> "a\\0x\\0x\\0b\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\0a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\ta\\0b\\0c\\0" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\0a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\ta\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0x\\0" ) ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0b\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "abc" ) ; <S2SV_ModStart> ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}" <S2SV_ModEnd> , VAR_3 ) <S2SV_ModStart> ; METHOD_247 ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}" <S2SV_ModEnd> , VAR_3 )
<S2SV_ModStart> TYPE_2 VAR_8 , TYPE_5 <S2SV_ModEnd> VAR_6 ) { <S2SV_ModStart> VAR_6 ) { jas_ulonglong <S2SV_ModEnd> VAR_9 ; VAR_9
<S2SV_ModStart> { VAR_53 = METHOD_9 ( STRUCT_OR_UNION_7 <S2SV_ModEnd> , & STRUCT_OR_UNION_7 <S2SV_ModStart> STRUCT_OR_UNION_7 -> VAR_15 , & VAR_52 ) ; if ( VAR_53 ) return VAR_53 ; STRUCT_OR_UNION_7 -> VAR_18 = VAR_19 ; METHOD_2 ( STRUCT_OR_UNION_7 ) ; } break ; case VAR_23 : VAR_45 = VAR_25 ; break ; default : return - VAR_26 ; } if ( VAR_52 ) { VAR_47 = METHOD_3 ( VAR_52 -> VAR_30 ) ; VAR_49 = METHOD_4 ( VAR_47 , VAR_33 ) ; if ( ! VAR_49 ) return - VAR_35 ; VAR_53 = METHOD_5 ( & VAR_37 , VAR_52 , VAR_49 , VAR_47 <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto VAR_48 ;
<S2SV_ModStart> -> VAR_144 ; if ( VAR_272 -> VAR_232 + VAR_276 -> VAR_237 -> VAR_166 > VAR_281 - 2 || VAR_272 -> VAR_246 + VAR_276 -> VAR_237 -> VAR_166 > VAR_281 - 2 ) { return - 1 ; } <S2SV_ModStart> ) % ( METHOD_17 ( TYPE_15 , 1 ) <S2SV_ModEnd> << VAR_205 ) <S2SV_ModStart> ) % ( METHOD_17 ( TYPE_15 , 1 ) <S2SV_ModEnd> << VAR_218 )
<S2SV_ModStart> VAR_11 ) { if ( VAR_10 -> VAR_6 == VAR_12 ) return 0 ;
<S2SV_ModStart> ) ) { TYPE_1 VAR_60 ; <S2SV_ModStart> |= VAR_47 ; VAR_60 = ! METHOD_17 ( VAR_58 ) ; <S2SV_ModStart> -> VAR_52 , VAR_60 ? & VAR_53 : VAR_41 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 1 ) ; if ( ! VAR_60 ) { METHOD_18 ( & VAR_58 -> VAR_25 , & VAR_58 -> VAR_56 -> VAR_61 ) ; } else { <S2SV_ModStart> ) ; } }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_9 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_31 ) { TYPE_9 VAR_47 = 0 ; <S2SV_ModStart> VAR_21 ) { VAR_47 = 1 ; <S2SV_ModStart> ; } } return VAR_47 ;
<S2SV_ModStart> ; VAR_79 += 4 <S2SV_ModEnd> ) { for
<S2SV_ModStart> TYPE_7 METHOD_0 ( TYPE_13 VAR_42 , TYPE_7 * VAR_43 , TYPE_7 VAR_36 ) { TYPE_7 VAR_7 ; TYPE_7 VAR_44 ; TYPE_3 VAR_14 ; TYPE_4 VAR_26 ; TYPE_5 VAR_38 ; TYPE_7 VAR_40 ; TYPE_7 VAR_41 ; TYPE_13 VAR_45 = 0 ; VAR_45 = METHOD_13 ( VAR_42 , VAR_43 , "11" , & VAR_7 , & VAR_44 ) ; METHOD_1 ( VAR_7 , VAR_8 , VAR_14 ) ; VAR_14 = VAR_14 -> VAR_14 ; if ( VAR_45 == 1 ) { VAR_44 = METHOD_15 ( METHOD_15 ( VAR_46 , METHOD_14 ( "ParseOptions" ) ) , METHOD_14 ( "DEFAULT_SCHEMA" ) ) ; } <S2SV_ModEnd> VAR_26 = METHOD_2 <S2SV_ModStart> VAR_40 ) ; METHOD_12 ( VAR_41 , "@parse_options" , VAR_44 ) ;
<S2SV_ModStart> TYPE_30 ) ; if ( ! ( METHOD_10 ( TYPE_30 ) ) ) return METHOD_1 ( TYPE_30 ) ; <S2SV_ModStart> , & VAR_37 ) ; if ( ! ( VAR_42 & VAR_72 ) ) return METHOD_1 ( TYPE_30
<S2SV_ModStart> TYPE_3 * VAR_14 , TYPE_4 VAR_15 <S2SV_ModStart> VAR_10 , VAR_14 , VAR_15 <S2SV_ModStart> VAR_12 ) { if ( VAR_16 >= VAR_15 ) { VAR_16 = VAR_15 + 1 ; return ; }
<S2SV_ModStart> TYPE_7 VAR_31 = METHOD_10 ( <S2SV_ModStart> VAR_35 -> VAR_20 )
<S2SV_ModStart> -> STRUCT_OR_UNION_6 ; TYPE_4 VAR_19 ; <S2SV_ModStart> |= VAR_14 ; VAR_19 = VAR_16 -> VAR_20 ; METHOD_4 ( VAR_16 , VAR_17 ) ; <S2SV_ModStart> VAR_15 , VAR_16 -> VAR_21 <S2SV_ModEnd> , VAR_18 ) <S2SV_ModStart> VAR_18 ) ; METHOD_5 ( VAR_16 , VAR_19 ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_2 , <S2SV_ModStart> , VAR_32 ) && METHOD_9 ( STRUCT_OR_UNION_2 , VAR_30 -> VAR_31 , VAR_32 )
<S2SV_ModStart> ; unsigned TYPE_2 VAR_39 , VAR_36 ; TYPE_5 VAR_40 <S2SV_ModEnd> ; TYPE_3 METHOD_5 <S2SV_ModStart> VAR_35 ) ; struct STRUCT_OR_UNION_1 VAR_41 , VAR_42 ; const struct STRUCT_OR_UNION_2 * VAR_4 = VAR_35 -> VAR_4 ; if ( VAR_35 -> VAR_30 == VAR_43 ) VAR_4 -> METHOD_7 ( VAR_35 , & VAR_40 , & VAR_41 , NULL , VAR_37 ) ; <S2SV_ModStart> VAR_35 , & VAR_39 <S2SV_ModEnd> , VAR_35 -> <S2SV_ModStart> ) return VAR_38 <S2SV_ModEnd> ; VAR_38 = <S2SV_ModStart> ; VAR_38 = __load_segment_descriptor <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> VAR_36 , VAR_37 , 0 , false , & VAR_42 ) ; if ( VAR_38 != VAR_27 ) return VAR_38 ; VAR_38 = assign_eip_far ( VAR_35 , VAR_39 , VAR_42 . l ) ; if ( VAR_38 != VAR_27 ) { WARN_ON ( ! VAR_35 -> VAR_30 != VAR_43 ) ; VAR_4 -> set_segment ( VAR_35 , VAR_40 , & VAR_41 , 0 , VAR_37 ) ; } <S2SV_ModEnd> return VAR_38 ;
<S2SV_ModStart> VAR_35 ++ ) { if ( VAR_29 -> VAR_38 == VAR_39 ) <S2SV_ModStart> ) ; } }
<S2SV_ModStart> . VAR_24 ; if ( VAR_2 < 2 ) break ; <S2SV_ModStart> += 2 ; VAR_2 -= 2 ;
<S2SV_ModStart> = METHOD_6 ( <S2SV_ModEnd> VAR_136 -> VAR_112
<S2SV_ModStart> struct STRUCT_OR_UNION_7 TYPE_19 ; struct STRUCT_OR_UNION_18 * VAR_129 <S2SV_ModStart> ; if ( METHOD_22 ( <S2SV_ModStart> < VAR_75 ) ) { for ( VAR_125 = VAR_109 ; VAR_125 < VAR_112 ; VAR_125 ++ ) { if ( ! VAR_127 [ VAR_125 ] ) break ; METHOD_18 ( VAR_127 [ VAR_125 ] ) ; } <S2SV_ModEnd> VAR_128 = - <S2SV_ModStart> ; VAR_117 : METHOD_23 ( VAR_129 , STRUCT_OR_UNION_17 , VAR_125 ) { METHOD_18 ( VAR_129 -> VAR_130 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_62 , VAR_62
<S2SV_ModStart> 1 ; } TYPE_18 VAR_226 = VAR_120 - VAR_205 ; <S2SV_ModStart> = METHOD_2 ( VAR_226 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> , VAR_224 , VAR_226 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ) > 5 + VAR_152 <S2SV_ModStart> TYPE_15 VAR_64 = ( <S2SV_ModStart> 2 < VAR_120 ) && ( <S2SV_ModEnd> ! VAR_73 [ <S2SV_ModStart> [ 4 ] )
<S2SV_ModStart> , VAR_16 ; struct STRUCT_OR_UNION_0 VAR_27 = * VAR_15 ; <S2SV_ModStart> VAR_16 ) ; if ( ! METHOD_24 ( VAR_15 , VAR_11 ) ) { METHOD_25 ( "rdp_demand_active(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>source<S2SV_blank>descriptor<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_27 ) ; }
<S2SV_ModStart> += 2 ; if ( VAR_58 + 1 < VAR_38 )
<S2SV_ModStart> ) ; } if ( VAR_141 -> VAR_70 > 1 ) { METHOD_31 ( VAR_141 , VAR_132 , VAR_47 , VAR_54 , VAR_137 , VAR_139 , VAR_142 ) ; VAR_139 += METHOD_29 ( VAR_141 ) ; } else <S2SV_ModEnd> { TYPE_18 VAR_85 <S2SV_ModStart> ++ ) { METHOD_31 ( VAR_141 , VAR_132 , VAR_47 , VAR_54 <S2SV_ModEnd> , ( ( <S2SV_ModStart> 255 , VAR_139 , VAR_142 <S2SV_ModEnd> ) ; VAR_139 <S2SV_ModStart> ++ ; } if ( VAR_98 != VAR_141 -> VAR_75 ) <S2SV_ModStart> ; } } <S2SV_ModEnd> return ( METHOD_30
<S2SV_ModStart> == VAR_33 ) { if ( ! METHOD_8 ( VAR_42 ) ) return - VAR_43 ; <S2SV_ModStart> & VAR_11 ; } else { <S2SV_ModEnd> STRUCT_OR_UNION_15 -> VAR_12 <S2SV_ModStart> & VAR_13 ; }
<S2SV_ModStart> 1 ; } if ( VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 == 0 || VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 > 255 ) { METHOD_18 ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_85 -> VAR_86 [ VAR_81 ] . VAR_66 ) ; METHOD_17 ( VAR_85 -> VAR_86 ) ; return - 1 ; } if ( VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 == 0 || VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 > 255 ) { METHOD_18 ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_85 -> VAR_86 [ VAR_81 ] . VAR_71 ) ; METHOD_17 ( VAR_85 -> VAR_86 ) ; return - 1 ; }
<S2SV_ModStart> ; if ( VAR_32 & 0xfffffe00 ) continue ; if ( VAR_32 < 2 <S2SV_ModEnd> ) continue ; <S2SV_ModStart> if ( VAR_32 >= 0x100 && VAR_32 <S2SV_ModStart> else if ( VAR_32 >= 0x120 &&
<S2SV_ModStart> -> VAR_31 = METHOD_13 ( VAR_27 <S2SV_ModEnd> , VAR_29 )
<S2SV_ModStart> unsigned TYPE_4 VAR_28 ; VAR_23 -> VAR_24 = 0
<S2SV_ModStart> = "stack<S2SV_blank>" ; VAR_28 = VAR_29 ;
<S2SV_ModStart> ; TYPE_10 VAR_38 <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> -> VAR_338 ) { VAR_411 = METHOD_20 ( VAR_474 ) ; if ( VAR_411 < 0 ) { return VAR_481 ; } <S2SV_ModStart> -> VAR_345 = VAR_411 ; } <S2SV_ModEnd> else VAR_342 ->
<S2SV_ModStart> ) / 3 ) METHOD_131 ( VAR_806 , "InvalidColormapIndex" ) ; if ( VAR_584 . VAR_582 > VAR_584 . VAR_585
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> ( VAR_78 ) ) ) return VAR_85 ; if ( METHOD_31 ( VAR_82 -> VAR_76 ) > VAR_78 -> VAR_79 . VAR_88 ) return VAR_85 ; if ( METHOD_31 ( VAR_82 -> VAR_25 ) < METHOD_31 ( VAR_82 -> VAR_89 ) || METHOD_31 ( VAR_82 -> VAR_25 ) > METHOD_31 ( VAR_82 -> VAR_76 <S2SV_ModStart> ; if ( METHOD_22 ( & VAR_78 -> VAR_79 ) && METHOD_31 ( VAR_82 -> VAR_87 ) > METHOD_31 ( VAR_82 -> VAR_76 ) ) return VAR_85 ; if ( <S2SV_ModStart> VAR_74 ) > METHOD_31 ( VAR_82 -> VAR_76 ) ) return VAR_85 ; if ( METHOD_29 ( & VAR_78 -> VAR_79 ) && METHOD_31 ( VAR_82 -> VAR_90 ) >
<S2SV_ModStart> ; VAR_59 -> VAR_48 = 0 ; METHOD_8 ( VAR_56 , VAR_59 ) ; } else if ( METHOD_10 ( VAR_59 ) ) { goto VAR_64 ; } VAR_59 -> <S2SV_ModStart> VAR_45 = VAR_46 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> = VAR_55 ; VAR_64 : <S2SV_ModEnd> return METHOD_9 (
<S2SV_ModStart> 0 , VAR_187 = 0 <S2SV_ModStart> ) ) { if ( VAR_190 -> VAR_195 . VAR_196 + 16 >= VAR_190 -> VAR_195 . VAR_197 && METHOD_48 ( VAR_190 , 16 ) ) return VAR_187 ; <S2SV_ModStart> * ) ; * VAR_105 = 0 ; <S2SV_ModStart> TYPE_26 * ) ; * VAR_105 = 0 <S2SV_ModStart> VAR_181 ) ; METHOD_49 ( VAR_168 , 0 , VAR_187 ) ; VAR_194 += METHOD_37 ( VAR_190 , VAR_168 , VAR_187 ) ; break ; case 'G' : VAR_168 = METHOD_44 ( VAR_193 , TYPE_36 * ) ; VAR_187 = METHOD_44 ( VAR_193 , VAR_181 ) ; METHOD_49 ( VAR_168 , 0 , VAR_187 ) ; if ( VAR_190 -> VAR_195 . VAR_196 + VAR_187 >= VAR_190 -> VAR_195 . VAR_197 && METHOD_48 ( VAR_190 , VAR_187 ) ) return 0 ; VAR_194 += METHOD_40 <S2SV_ModEnd> ( VAR_190 , <S2SV_ModStart> break ; case 'z' : METHOD_46 ( VAR_190 , "Format<S2SV_blank>conversion<S2SV_blank>\'z\'<S2SV_blank>not<S2SV_blank>implemented<S2SV_blank>yet.\\n" ) ; break ; case 'p' : <S2SV_ModEnd> VAR_187 = METHOD_44 <S2SV_ModStart> VAR_181 ) ; METHOD_45 ( VAR_190 , VAR_187 , VAR_176 ) ; VAR_194 = VAR_187 ; break ; case 'j' <S2SV_ModEnd> : VAR_187 = <S2SV_ModStart> , VAR_187 , <S2SV_ModEnd> VAR_185 ) ; <S2SV_ModStart> VAR_194 += VAR_187 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> 0 ; } METHOD_32 ( 1 , ( "BMP<S2SV_blank>header:<S2SV_blank>magic<S2SV_blank>0x%x;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>res1<S2SV_blank>%d;<S2SV_blank>res2<S2SV_blank>%d;<S2SV_blank>off<S2SV_blank>%d\\n" , VAR_20 . VAR_84 , VAR_20 . VAR_85 , VAR_20 . VAR_86 , VAR_20 . VAR_87 , VAR_20 . VAR_21 ) ) ; <S2SV_ModStart> 0 ; } METHOD_32 ( 1 , ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%d;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>hres<S2SV_blank>%d;<S2SV_blank>vres<S2SV_blank>%d;<S2SV_blank>numcolors<S2SV_blank>%d;<S2SV_blank>" "mincolors<S2SV_blank>%d\\n" , VAR_82 -> VAR_88 , VAR_82 -> VAR_49 , VAR_82 -> VAR_53 , VAR_82 -> VAR_89 , VAR_82 -> VAR_90 , VAR_82 -> VAR_91 , VAR_82 -> VAR_85 , VAR_82 -> VAR_92 , VAR_82 -> VAR_93 , VAR_82 -> VAR_94 , VAR_82 -> VAR_95 ) ) ;
<S2SV_ModStart> VAR_11 ) ; METHOD_3 ( & VAR_10 -> VAR_12 ) ; METHOD_4 ( VAR_10 -> VAR_13 ) ;
<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> TYPE_12 VAR_68 ; <S2SV_ModStart> '\\0' ; } VAR_72 = METHOD_20 ( VAR_87 , VAR_83 , VAR_68 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { if ( VAR_105 == VAR_85 ) { <S2SV_ModEnd> METHOD_18 ( VAR_82 <S2SV_ModStart> ( VAR_82 , "error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>" "(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)" , VAR_83 ) ; } <S2SV_ModEnd> VAR_105 = VAR_85
<S2SV_ModStart> VAR_42 ) { METHOD_8 ( VAR_39 [ 0 ] ) ; <S2SV_ModStart> VAR_43 ; } METHOD_8 ( VAR_39 [ 3 ] ) ;
<S2SV_ModStart> VAR_6 ) ; METHOD_8 <S2SV_ModEnd> ( & VAR_14 <S2SV_ModStart> VAR_3 ) ; METHOD_8 <S2SV_ModEnd> ( & VAR_14
<S2SV_ModStart> VAR_84 , * <S2SV_ModEnd> VAR_39 , VAR_31 <S2SV_ModStart> VAR_39 , VAR_31 ; const TYPE_8 * VAR_29 <S2SV_ModStart> VAR_84 = ( TYPE_8 <S2SV_ModEnd> * ) METHOD_1 <S2SV_ModStart> ( VAR_29 = <S2SV_ModEnd> VAR_16 , VAR_39 <S2SV_ModStart> VAR_27 > 0 && METHOD_11 ( * VAR_29 ) <S2SV_ModStart> if ( VAR_27 <= 1 || ! METHOD_11 ( * VAR_29 ) ) break ; <S2SV_ModEnd> VAR_27 -- ; <S2SV_ModStart> ++ ^ 0x20 <S2SV_ModEnd> ; } *
<S2SV_ModStart> VAR_24 ) { if <S2SV_ModEnd> ( VAR_24 -> <S2SV_ModStart> VAR_25 . VAR_3 <= 0 ) { METHOD_5 ( "%s:<S2SV_blank>Invalid<S2SV_blank>intr<S2SV_blank>pin<S2SV_blank>on<S2SV_blank>dev<S2SV_blank>[%s]\\n" , VAR_27 , VAR_24 -> VAR_28 ) ; return ; } <S2SV_ModEnd> METHOD_2 ( &
<S2SV_ModStart> == - VAR_311 || VAR_348 == - VAR_349
<S2SV_ModStart> VAR_42 ; TYPE_3 VAR_50 ; TYPE_3 <S2SV_ModStart> ; } } VAR_50 = <S2SV_ModEnd> METHOD_5 ( VAR_47 <S2SV_ModStart> , VAR_31 ) ; if ( VAR_50 < 0 ) METHOD_8 ( VAR_49 , "regexec<S2SV_blank>failed" ) ; if ( VAR_50 == 0
<S2SV_ModStart> VAR_36 ) { METHOD_4 ( ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_1 ) { ( TYPE_5 ) VAR_1 ; <S2SV_ModStart> { TYPE_3 * const VAR_55 = METHOD_3 ( 1 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> sizeof ( * VAR_55 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; if ( VAR_55 <S2SV_ModEnd> == VAR_7 ) <S2SV_ModStart> ) return VAR_8 <S2SV_ModEnd> ; VAR_54 -> <S2SV_ModStart> TYPE_4 * ) VAR_55 <S2SV_ModEnd> ; VAR_54 -> <S2SV_ModStart> -> VAR_40 ; VAR_55 -> VAR_35 . VAR_31 = sizeof ( VAR_55 -> VAR_35 ) ; VAR_55 -> VAR_59 = 0 ; VAR_55 -> VAR_60 = ( VAR_54 -> VAR_52 . VAR_53 && ( VAR_54 -> VAR_52 . VAR_53 -> VAR_61 > 1 ) && ( VAR_54 -> VAR_40 & VAR_62 ) ) ? 1 : 0 ; <S2SV_ModStart> VAR_53 ) { VAR_55 <S2SV_ModEnd> -> VAR_57 = <S2SV_ModStart> VAR_53 = & VAR_55 <S2SV_ModEnd> -> VAR_57 ;
<S2SV_ModStart> 0 ) ; VAR_109 -> VAR_112 <S2SV_ModEnd> = METHOD_18 ( <S2SV_ModStart> -> VAR_94 , VAR_109 -> VAR_112 <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> VAR_111 < VAR_109 -> VAR_112 ) { VAR_109 -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; return METHOD_20 <S2SV_ModStart> -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; } return
<S2SV_ModStart> VAR_17 ) { if ( VAR_7 ) { METHOD_9 ( VAR_8 , "Stratum<S2SV_blank>client.reconnect<S2SV_blank>received<S2SV_blank>but<S2SV_blank>is<S2SV_blank>disabled,<S2SV_blank>not<S2SV_blank>reconnecting." ) ; return VAR_44 ; } <S2SV_ModEnd> TYPE_5 * VAR_22 <S2SV_ModStart> 256 ] ; TYPE_5 * VAR_36 , * VAR_41 , * VAR_42 ; VAR_22 = ( TYPE_5 * ) METHOD_5 ( METHOD_6 ( VAR_17 , 0 ) ) ; if ( ! VAR_22 ) VAR_22 = STRUCT_OR_UNION_16 -> VAR_36 ; VAR_23 <S2SV_ModEnd> = ( TYPE_5 <S2SV_ModStart> ( VAR_17 , <S2SV_ModEnd> 1 ) ) <S2SV_ModStart> -> VAR_41 ; snprintf ( VAR_29 , sizeof ( VAR_29 ) <S2SV_ModEnd> , "%s:%s" ,
<S2SV_ModStart> == '<S2SV_blank>' ) { VAR_248 ++ ; } <S2SV_ModEnd> VAR_238 = METHOD_56 <S2SV_ModStart> VAR_233 ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> "Unknown<S2SV_blank>filesystem<S2SV_blank>type\\n" ) ; } <S2SV_ModStart> VAR_63 ) ) { <S2SV_ModStart> VAR_248 ) ; }
<S2SV_ModStart> >= 0 && <S2SV_ModEnd> METHOD_8 ( * <S2SV_ModStart> < VAR_38 && <S2SV_ModEnd> METHOD_8 ( *
<S2SV_ModStart> -> VAR_5 ; unsigned VAR_41 = sizeof ( struct STRUCT_OR_UNION_4 ) - VAR_38 ; <S2SV_ModStart> VAR_36 -> VAR_35 == VAR_38 ) { VAR_36 -> VAR_37 = 0 ; return ; } if ( VAR_36 -> VAR_37 < 4 ) { VAR_36 -> VAR_37 = VAR_41 ; if ( METHOD_2 ( VAR_39 ) ) { if ( VAR_36 -> VAR_37 < METHOD_6 ( VAR_29 -> VAR_37 ) ) VAR_36 -> VAR_37 = METHOD_6 ( VAR_29 -> VAR_37 ) ; if ( VAR_36 -> VAR_37 < METHOD_6 ( VAR_29 -> VAR_30 ) ) VAR_36 -> VAR_37 = METHOD_6 ( VAR_29 -> VAR_30 ) ; } } if ( ( VAR_36 -> VAR_37 > VAR_36 -> VAR_35 ) || <S2SV_ModEnd> ( VAR_38 + <S2SV_ModStart> -> VAR_35 ) ) { VAR_36 -> VAR_37 = VAR_41 <S2SV_ModEnd> ; METHOD_7 (
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_6 <S2SV_ModEnd> * VAR_28 = <S2SV_ModStart> * VAR_28 = if_mii ( VAR_7 ) <S2SV_ModEnd> ; VAR_25 = <S2SV_ModStart> ) { case VAR_69 : VAR_28 -> VAR_70 = VAR_25 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> break ; case VAR_71 <S2SV_ModEnd> : VAR_28 -> <S2SV_ModStart> : VAR_28 -> val_out <S2SV_ModEnd> = METHOD_2 ( <S2SV_ModStart> break ; case VAR_72 : if ( ! METHOD_16 ( VAR_73 ) ) return - VAR_74 ; <S2SV_ModEnd> METHOD_3 ( VAR_37 <S2SV_ModStart> , VAR_28 -> VAR_75 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_6 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_126 ) ; METHOD_29 ( VAR_162 ) ; VAR_162 -> VAR_123 . VAR_124 += VAR_163 -> VAR_126 ; VAR_162 -> VAR_123 . VAR_166 ++ ;
<S2SV_ModStart> VAR_15 ) ; METHOD_4 ( & VAR_21 . VAR_22 ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_5 ( & <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_10 VAR_68 [ VAR_84 + 100 ] ; TYPE_0 VAR_85 <S2SV_ModEnd> ; VAR_6 * <S2SV_ModStart> VAR_52 ) { METHOD_42 ( VAR_68 , sizeof ( VAR_68 ) <S2SV_ModEnd> , "select<S2SV_blank>count(*)<S2SV_blank>from<S2SV_blank>`%s`" , <S2SV_ModStart> ) ; } VAR_85 = sizeof ( VAR_68 ) ; VAR_85 -= METHOD_42 ( VAR_68 , VAR_85 , "show<S2SV_blank>/*!32332<S2SV_blank>FULL<S2SV_blank>*/<S2SV_blank>columns<S2SV_blank>from<S2SV_blank>`%s`" , VAR_74 <S2SV_ModEnd> ) ; if <S2SV_ModStart> [ 0 ] && VAR_85 ) METHOD_44 ( VAR_68 + METHOD_43 ( VAR_68 ) , VAR_85 <S2SV_ModEnd> , "<S2SV_blank>like<S2SV_blank>\'" , <S2SV_ModStart> VAR_63 ) { METHOD_42 ( VAR_68 , sizeof ( VAR_68 ) , "show<S2SV_blank>keys<S2SV_blank>from<S2SV_blank>`%s`" , VAR_74 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , * VAR_288 ; METHOD_26 ( VAR_323 -> VAR_364 == VAR_365 || VAR_323 -> VAR_364 == VAR_366 )
<S2SV_ModStart> ; TYPE_5 VAR_37 ; if ( METHOD_5 ( ! METHOD_4 ( VAR_4 ) ) ) return - VAR_38
<S2SV_ModStart> -> VAR_5 ) METHOD_3 <S2SV_ModEnd> ( VAR_10 ->
<S2SV_ModStart> ) ) ; if ( VAR_165 == VAR_168 ) break ;
<S2SV_ModStart> METHOD_16 ( VAR_428 , VAR_430 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> ( VAR_426 + ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> ) ) ; METHOD_72 ( VAR_154 ) ;
<S2SV_ModStart> VAR_41 , VAR_42 ; if ( METHOD_6 ( ) > 0 ) return - VAR_58
<S2SV_ModStart> ; if ( VAR_231 >= VAR_236 || VAR_232 >= VAR_236 ) return VAR_194 ; if (
<S2SV_ModStart> VAR_14 -> METHOD_3 && VAR_16
<S2SV_ModStart> ; if ( ( VAR_60 < 0 ) || ( <S2SV_ModStart> VAR_60 >= 16 )
<S2SV_ModStart> ( VAR_14 ) ; VAR_14 -> VAR_19 &= ~ VAR_20
<S2SV_ModStart> while ( ! METHOD_5 ( VAR_12 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( METHOD_6 ( VAR_13 ) ) METHOD_7 ( VAR_13 ) ; <S2SV_ModStart> ) ; } METHOD_8 ( VAR_11 ) ; METHOD_9 ( 0 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_28 -> VAR_6 <S2SV_ModStart> VAR_28 -> VAR_6 <S2SV_ModEnd> && VAR_28 -> <S2SV_ModStart> VAR_10 ) { METHOD_9 ( VAR_28 -> VAR_32 == VAR_33 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_26 || ptrace_freeze_traced ( VAR_28 <S2SV_ModEnd> ) ) VAR_31 <S2SV_ModStart> VAR_31 = 0 <S2SV_ModEnd> ; } METHOD_7 <S2SV_ModStart> ! VAR_26 ) { if ( ! <S2SV_ModEnd> METHOD_8 ( VAR_28 <S2SV_ModStart> ( VAR_28 , VAR_33 ) ) { METHOD_9 ( VAR_28 -> VAR_32 == VAR_33 ) ; VAR_31 = <S2SV_ModEnd> - VAR_30 ; <S2SV_ModStart> - VAR_30 ; } }
<S2SV_ModStart> && METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> ; METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 )
<S2SV_ModStart> STRUCT_OR_UNION_22 ) ; VAR_486 = VAR_381 - VAR_383 - VAR_382 ; if ( VAR_486 < 0 ) { VAR_498 = - VAR_363 ; goto VAR_490 ; } <S2SV_ModStart> ) ; } if ( VAR_486 > 0 && METHOD_42 ( VAR_453 , VAR_368 + VAR_383 <S2SV_ModEnd> , VAR_483 ,
<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1
<S2SV_ModStart> ; if ( METHOD_6 ( VAR_64 , VAR_22 ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( METHOD_7 ( VAR_51 , VAR_50 , <S2SV_ModEnd> VAR_53 ) ) <S2SV_ModStart> return - VAR_47 <S2SV_ModEnd> ; VAR_54 :
<S2SV_ModStart> , VAR_106 ) ; VAR_72 -> VAR_73 = 0 <S2SV_ModStart> VAR_91 ) ; METHOD_17 ( VAR_88 , 0 , sizeof ( * VAR_88 ) ) ;
<S2SV_ModStart> VAR_2 ) ; METHOD_3 ( & VAR_14 ) ; <S2SV_ModStart> METHOD_2 ( VAR_5 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> VAR_13 -- ; } VAR_2 -> VAR_15 -> VAR_16 -> VAR_17 -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_4 * VAR_12 <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> ) ) ) && VAR_15
<S2SV_ModStart> VAR_68 ) { VAR_83 <S2SV_ModEnd> ; } VAR_81
<S2SV_ModStart> const VAR_27 , TYPE_7 * const VAR_33 , TYPE_6 * const VAR_29 <S2SV_ModEnd> , TYPE_4 VAR_30 <S2SV_ModStart> VAR_30 ) { METHOD_3 <S2SV_ModEnd> ( & VAR_27 <S2SV_ModStart> VAR_27 -> VAR_28 , VAR_33 <S2SV_ModStart> = VAR_32 ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> -> VAR_58 ; METHOD_23 ( VAR_46 , 254 <S2SV_ModEnd> , "%s:%s" ,
<S2SV_ModStart> VAR_141 ; } VAR_116 -> VAR_146 = 0 ;
<S2SV_ModStart> METHOD_39 ( VAR_100 ) ; VAR_198 = ( unsigned TYPE_40 * ) METHOD_39 ( VAR_198
<S2SV_ModStart> - VAR_8 ; if ( VAR_10 -> VAR_11 >= VAR_22 ) return - VAR_8 ;
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_11 ) { TYPE_4 <S2SV_ModEnd> VAR_14 ; METHOD_1
<S2SV_ModStart> TYPE_6 METHOD_0 ( TYPE_5 * VAR_35 , <S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_34 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - VAR_40 <S2SV_ModEnd> ; } dctlprintk
<S2SV_ModStart> ; if ( METHOD_37 ( VAR_200 , 0 ) == METHOD_37 ( VAR_205 , 0 ) <S2SV_ModEnd> ) return 0
<S2SV_ModStart> ) ) ; METHOD_24 ( ! ( VAR_177 -> VAR_162 & VAR_186 ) ) ;
<S2SV_ModStart> TYPE_21 * VAR_32 , TYPE_25 * VAR_240 <S2SV_ModStart> * VAR_141 ; * VAR_240 = 0 ; <S2SV_ModStart> break ; case VAR_241 : * VAR_240 = 1 ; break ; case
<S2SV_ModStart> VAR_75 + 2 , sizeof ( VAR_60 )
<S2SV_ModStart> TYPE_1 * VAR_0 TYPE_4 <S2SV_ModStart> , TYPE_2 TYPE_3 TYPE_4
<S2SV_ModStart> ; if ( ( VAR_257 & VAR_210 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( METHOD_61 ( STRUCT_OR_UNION_37 ) ) METHOD_62 ( VAR_276 ) ;
<S2SV_ModStart> += 2 ; if ( VAR_58 + 1 < VAR_38 )
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_106 < 4 <S2SV_ModStart> VAR_106 < 4 && VAR_109 -> VAR_92 [ VAR_106 ] && VAR_109 -> VAR_95 [ VAR_106 ] <S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_106 < 4 <S2SV_ModStart> VAR_106 < 4 && VAR_109 -> VAR_92 [ VAR_106 ] && VAR_109 -> VAR_95 [ VAR_106 ]
<S2SV_ModStart> - VAR_51 ; METHOD_15 ( VAR_120 ) ; <S2SV_ModStart> VAR_108 ) ; METHOD_25 ( VAR_56 ) ; <S2SV_ModStart> VAR_150 ) { METHOD_25 ( VAR_56 ) ;
<S2SV_ModStart> , VAR_64 -> VAR_66 , VAR_64 ->
<S2SV_ModStart> ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_53 ; if (
<S2SV_ModStart> ) continue ; if ( VAR_258 -> VAR_255 . VAR_267 -> VAR_268 - VAR_258 -> VAR_255 . VAR_256 > VAR_269 ) { METHOD_52 ( VAR_258 -> VAR_140 , "Impossible<S2SV_blank>number<S2SV_blank>of<S2SV_blank>requests.<S2SV_blank>" "req_prod<S2SV_blank>%d,<S2SV_blank>req_cons<S2SV_blank>%d,<S2SV_blank>size<S2SV_blank>%ld\\n" , VAR_258 -> VAR_255 . VAR_267 -> VAR_268 , VAR_258 -> VAR_255 . VAR_256 , VAR_269 ) ; METHOD_53 ( VAR_258 ) ; continue ; } <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> } VAR_223 = <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> VAR_257 += VAR_223 <S2SV_ModStart> ) ) { METHOD_52 <S2SV_ModEnd> ( VAR_258 -> <S2SV_ModStart> VAR_226 ) ; METHOD_53 ( VAR_258 <S2SV_ModEnd> ) ; continue <S2SV_ModStart> VAR_253 ) ; <S2SV_ModEnd> continue ; }
<S2SV_ModStart> VAR_37 ; } VAR_38 -> VAR_10 = VAR_16 ;
<S2SV_ModStart> VAR_13 ; } if ( * VAR_8 == '\\\\' ) { METHOD_1 ( VAR_9 , VAR_10 , VAR_13 , VAR_12 , "Backslash<S2SV_blank>character<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>URL." ) ; return VAR_13 ; }
<S2SV_ModStart> TYPE_15 * VAR_394 = VAR_517 . VAR_506 , * VAR_403 = "" ; TYPE_13 VAR_519 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_517 . VAR_508 ) { if ( <S2SV_ModEnd> ( VAR_517 . <S2SV_ModStart> VAR_391 ) { VAR_519 = METHOD_43 ( VAR_517 . VAR_506 ) - VAR_517 . VAR_506 ; VAR_394 = METHOD_43 ( <S2SV_ModEnd> VAR_517 . VAR_467 <S2SV_ModStart> VAR_517 . VAR_467 ) <S2SV_ModStart> = METHOD_68 ( VAR_394 ) ; } else if ( <S2SV_ModEnd> METHOD_65 ( VAR_394 <S2SV_ModStart> , ".tgz" ) == 0 ) VAR_403 = ".tar" ; } else VAR_403 = VAR_517 . VAR_403 ; <S2SV_ModEnd> VAR_517 . VAR_518 <S2SV_ModStart> = METHOD_66 ( VAR_519 + VAR_398 + METHOD_68 ( VAR_403 ) <S2SV_ModEnd> + 1 ) <S2SV_ModStart> . VAR_518 , VAR_517 . VAR_506 , VAR_519 ) ; METHOD_70 <S2SV_ModEnd> ( VAR_517 . <S2SV_ModStart> . VAR_518 + VAR_519 , VAR_394 , VAR_398 ) ; METHOD_71 ( VAR_517 . VAR_518 + VAR_519 + VAR_398 , <S2SV_ModEnd> VAR_403 ) ;
<S2SV_ModStart> VAR_28 ) ; struct STRUCT_OR_UNION_2 * VAR_20 ; <S2SV_ModStart> VAR_21 < 0 ) return - VAR_7 ; VAR_20 = VAR_18 -> VAR_19 -> VAR_20 + VAR_21 ; if ( VAR_28 -> VAR_25 - VAR_28 -> VAR_27 > VAR_20 -> VAR_30 <S2SV_ModStart> -> VAR_27 , VAR_20 -> <S2SV_ModEnd> VAR_22 >> VAR_23
<S2SV_ModStart> TYPE_49 METHOD_0 ( TYPE_3 * VAR_731 , <S2SV_ModStart> VAR_122 ) { <S2SV_ModEnd> TYPE_4 * VAR_732 <S2SV_ModStart> 0 ; TYPE_49 <S2SV_ModEnd> VAR_511 ; TYPE_49 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> METHOD_2 ( &
<S2SV_ModStart> VAR_13 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_24 -> <S2SV_ModStart> VAR_26 -> VAR_17 , sizeof ( VAR_24 -> VAR_17 )
<S2SV_ModStart> TYPE_5 * VAR_39 ; if ( ! VAR_63 -> VAR_22 ) return VAR_67
<S2SV_ModStart> VAR_223 == VAR_195 || VAR_223 == VAR_224 ) { METHOD_46 ( VAR_225 -> VAR_226 ) ; if ( VAR_225 -> VAR_227 ) { METHOD_47 ( VAR_225 -> VAR_226 ) ; METHOD_48 ( & VAR_225 -> VAR_228 , VAR_229 ) ; return ; } if ( VAR_223 == VAR_195 <S2SV_ModStart> goto VAR_75 ; goto VAR_204 ; } METHOD_49 ( & VAR_225 -> VAR_228 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; METHOD_47 ( VAR_225 -> VAR_226 ) ; <S2SV_ModStart> ) ) ; if ( VAR_223 == VAR_195 || VAR_223 == VAR_224 ) METHOD_47 ( VAR_225 -> VAR_226 ) ; METHOD_48 ( & VAR_225 -> VAR_228 , VAR_229 ) ;
<S2SV_ModStart> != '\\0' ) { <S2SV_ModStart> VAR_21 ++ ; } <S2SV_ModStart> == '<S2SV_blank>' ) { <S2SV_ModStart> VAR_21 ++ ; }
<S2SV_ModStart> VAR_13 == VAR_14 && VAR_15 [ VAR_16 ] . VAR_17 >= 0
<S2SV_ModStart> ( TYPE_18 ) METHOD_14 ( VAR_139 , <S2SV_ModStart> VAR_139 , VAR_137 ) , VAR_140
<S2SV_ModStart> : if ( ! VAR_98 -> VAR_101 ) { METHOD_26 ( VAR_98 , VAR_100 , "client<S2SV_blank>password<S2SV_blank>pkt<S2SV_blank>before<S2SV_blank>startup<S2SV_blank>packet" ) ; return VAR_94 ; } if (
<S2SV_ModStart> return 0 ; struct STRUCT_OR_UNION_2 * VAR_13 = VAR_2 ; <S2SV_ModStart> "<q>" ) ; if ( VAR_13 -> VAR_14 & VAR_15 ) METHOD_4 ( VAR_12 , VAR_10 -> VAR_9 , VAR_10 -> VAR_11 ) ; else
<S2SV_ModStart> if ( VAR_39 ) { if ( ! METHOD_9 ( VAR_24 -> VAR_54 , VAR_36 , VAR_39 ) ) return - VAR_55 ; if ( <S2SV_ModEnd> ! METHOD_5 ( <S2SV_ModStart> VAR_28 ) ) <S2SV_ModEnd> return - VAR_29
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> = VAR_86 ; VAR_95 ++ ;
<S2SV_ModStart> ( VAR_716 , "[URL:<S2SV_blank>%s][StatusCode:<S2SV_blank>%u]" <S2SV_ModEnd> , VAR_714 -> <S2SV_ModStart> ( VAR_716 , "[Content-Type:<S2SV_blank>%s]" <S2SV_ModEnd> , VAR_714 -> <S2SV_ModStart> ( VAR_716 , "[User-Agent:<S2SV_blank>%s]" <S2SV_ModEnd> , VAR_714 ->
<S2SV_ModStart> VAR_13 ) { VAR_22 * VAR_23 ; TYPE_4 VAR_21 ; VAR_23 = METHOD_4 ( & VAR_13 , 1 , VAR_24 ) ; if ( ! VAR_23 ) return - VAR_25 <S2SV_ModEnd> ; VAR_21 = <S2SV_ModStart> , VAR_12 , VAR_23 <S2SV_ModEnd> , 1 , <S2SV_ModStart> VAR_21 ) ; METHOD_5 ( VAR_23 ) ;
<S2SV_ModStart> [ VAR_145 ] && VAR_146 -> VAR_144 [ VAR_145 ]
<S2SV_ModStart> VAR_5 ] ; struct STRUCT_OR_UNION_3 * VAR_20 ; if <S2SV_ModEnd> ( VAR_17 -> <S2SV_ModStart> & VAR_8 ) { if ( <S2SV_ModEnd> ! VAR_11 ) <S2SV_ModStart> - VAR_19 ; VAR_20 = METHOD_1 ( VAR_11 ) ; if ( VAR_20 -> VAR_21 > VAR_22 / sizeof ( VAR_20 -> VAR_23 [ 0 ] ) / 8 ) return - VAR_19 ; if ( METHOD_2 ( VAR_11 ) < METHOD_3 ( VAR_20 ) && METHOD_2 ( VAR_11 ) != sizeof ( * VAR_20 ) ) return - VAR_19 ; }
<S2SV_ModStart> * VAR_0 , <S2SV_ModEnd> const TYPE_1 *
<S2SV_ModStart> -> VAR_40 && VAR_43 -> VAR_46 &&
<S2SV_ModStart> TYPE_9 VAR_177 ; METHOD_27 ( & VAR_179 -> VAR_172 [ VAR_181 ] , 0 , sizeof ( VAR_41 ) ) ;
<S2SV_ModStart> ; } } if ( METHOD_7 ( ) < VAR_12 ) return - VAR_16 ;
<S2SV_ModStart> case 0x00 : if ( VAR_55 < 2 ) return - 1 ; <S2SV_ModStart> case 0x40 : if ( VAR_55 < 3 ) return - 1 ; <S2SV_ModStart> case 0x80 : if ( VAR_55 < 4 ) return - 1 ; <S2SV_ModStart> case 0xC0 : if ( VAR_55 < 2 ) return - 1 ;
<S2SV_ModStart> VAR_60 ) ; <S2SV_ModEnd> VAR_61 -> VAR_62 <S2SV_ModStart> VAR_63 ) ; }
<S2SV_ModStart> ; VAR_43 = METHOD_6 <S2SV_ModEnd> ( VAR_57 ->
<S2SV_ModStart> = VAR_36 ; TYPE_3 VAR_37 ; VAR_37 = VAR_8 ; if ( VAR_37 > VAR_29 ) VAR_37 = VAR_29 ; <S2SV_ModStart> ; VAR_18 <= VAR_37 <S2SV_ModEnd> ; VAR_18 ++
<S2SV_ModStart> ] ; TYPE_4 * VAR_84 = VAR_83 -> VAR_84 ; TYPE_4 * VAR_72 = VAR_83 -> VAR_72 <S2SV_ModEnd> ; TYPE_5 VAR_80
<S2SV_ModStart> VAR_14 , TYPE_3 * <S2SV_ModStart> VAR_34 ) ; if ( * VAR_21 == VAR_36 ) { * VAR_21 = METHOD_5 ( VAR_34 , VAR_37 ) ; if ( ! * VAR_21 ) return - VAR_38 ; VAR_35 = VAR_34 ; } <S2SV_ModStart> & VAR_20 , *
<S2SV_ModStart> goto VAR_394 ; <S2SV_ModEnd> VAR_372 = VAR_302 <S2SV_ModStart> ( VAR_341 ) ; if ( VAR_349 < 2 || ! VAR_372 [ 0 ] || ! VAR_372 [ 1 ] ) continue
<S2SV_ModStart> , VAR_92 | 0600 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_7 ) { struct STRUCT_OR_UNION_1 * VAR_11 ; TYPE_1 TYPE_2 ; VAR_11 = METHOD_4 <S2SV_ModEnd> ( VAR_10 ) <S2SV_ModStart> VAR_10 ) ; TYPE_2 = METHOD_5 ( VAR_10 , VAR_7 ) ; METHOD_6 ( VAR_10 , VAR_11 ) ; return TYPE_2 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_12 ) return - VAR_20 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_39 -> VAR_2 = 0.0 ; VAR_39 -> VAR_41 <S2SV_ModStart> VAR_39 -> VAR_8 <S2SV_ModEnd> = 0.0 ; <S2SV_ModStart> VAR_39 -> VAR_18 = 0.0 ; VAR_39 -> VAR_42 = 0.0 ; VAR_39 -> VAR_43 = 0.0 ; VAR_39 -> VAR_44
<S2SV_ModStart> VAR_13 ; TYPE_6 VAR_81 = METHOD_8 ( VAR_35 -> VAR_82 ) ; TYPE_6 <S2SV_ModStart> VAR_49 ? VAR_50 : 0 ; VAR_57 |= VAR_81 ? VAR_83
<S2SV_ModStart> ++ VAR_101 ) { <S2SV_ModStart> == '\\\\' ) { if ( * VAR_60 == '\\0' ) { return 0 ; } VAR_60 ++ ; } } <S2SV_ModEnd> VAR_32 = (
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_15 -> VAR_68 > 0 &&
<S2SV_ModStart> VAR_505 . VAR_754 ) ; if ( VAR_505 . VAR_754 > METHOD_130 ( VAR_803 ) ) METHOD_129 ( VAR_802 , "ImproperImageHeader"
<S2SV_ModStart> VAR_165 == VAR_71 || METHOD_18 ( VAR_168 -> VAR_162 ) <= 0
<S2SV_ModStart> ( VAR_223 , "PG%31[<S2SV_blank>\\t]%c%c%31[<S2SV_blank>\\t+-]%d%31[<S2SV_blank>\\t]%d%31[<S2SV_blank>\\t]%d" <S2SV_ModEnd> , VAR_47 ,
<S2SV_ModStart> ; if ( * VAR_40 == 0 ||
<S2SV_ModStart> TYPE_14 VAR_115 ; <S2SV_ModEnd> VAR_115 = METHOD_8
<S2SV_ModStart> ( ) ; METHOD_10 ( VAR_16 , METHOD_2 ( VAR_15 ) + METHOD_2 ( VAR_13 ) + 1 , VAR_17 ) ; <S2SV_ModStart> VAR_13 , VAR_15 ) ; METHOD_10 ( VAR_18 , METHOD_2 ( VAR_13 ) + 1 , VAR_17
<S2SV_ModStart> VAR_11 ) { TYPE_2 VAR_12 ; VAR_12 = METHOD_2 ( VAR_7 , VAR_10 ) ; if ( VAR_12 < 0 ) return VAR_12 ;
<S2SV_ModStart> . VAR_24 ; if ( VAR_2 < 2 ) break ; <S2SV_ModStart> += 2 ; VAR_2 -= 2 ;
<S2SV_ModStart> "Skipping<S2SV_blank>optional<S2SV_blank>EF.C_DevAut" ) ; if ( VAR_319 > 0 ) { <S2SV_ModStart> = VAR_319 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_8 ) ; return
<S2SV_ModStart> ; VAR_12 = METHOD_4 <S2SV_ModEnd> ( VAR_11 )
<S2SV_ModStart> ( VAR_15 METHOD_199 \\\n{ <S2SV_ModEnd> if ( VAR_261 <S2SV_ModStart> METHOD_199 ; } \\\n} <S2SV_ModEnd> TYPE_45 VAR_234 ; <S2SV_ModStart> ++ METHOD_199 { VAR_207 = VAR_208 ; VAR_190 = 1 ; <S2SV_ModStart> -= VAR_222 ; if ( VAR_225 < 0 METHOD_199 continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_86 -> VAR_57 != VAR_58 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_88 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_86 -> VAR_45 <S2SV_ModStart> TYPE_4 ) VAR_88 & <S2SV_ModEnd> ~ VAR_55 ; <S2SV_ModStart> + 8 ; if <S2SV_ModEnd> ( VAR_59 & <S2SV_ModStart> VAR_59 & VAR_60 <S2SV_ModEnd> ) { VAR_68 <S2SV_ModStart> -> VAR_80 = ( VAR_59 & VAR_60 ) ? VAR_88 : ( TYPE_5 ) <S2SV_ModStart> VAR_87 ) = ( VAR_59 & VAR_60 ) ? VAR_88 : ( TYPE_5 )
<S2SV_ModStart> VAR_387 -> VAR_232 >= <S2SV_ModEnd> VAR_387 -> VAR_259 <S2SV_ModStart> goto VAR_392 ; if ( VAR_347 == 0 ) goto VAR_392 ;
<S2SV_ModStart> ; return VAR_17 < 0 ? VAR_17 : 0
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_10 <S2SV_ModStart> ) VAR_3 ; if ( VAR_10 < 4 ) { METHOD_4 ( ( VAR_9 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> ; TYPE_4 VAR_28 = - VAR_32 <S2SV_ModStart> ) ; } else { VAR_28 ++ ; } <S2SV_ModStart> VAR_23 ; } <S2SV_ModEnd> METHOD_10 ( STRUCT_OR_UNION_11
<S2SV_ModStart> ) ; return METHOD_15 ( VAR_76 -> VAR_48 , VAR_79 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; VAR_79 += 4 <S2SV_ModEnd> ) { for
<S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } if (
<S2SV_ModStart> -> VAR_50 ) { if ( VAR_77 -> VAR_78 -> VAR_81 != VAR_77 -> VAR_78 -> VAR_82 ) METHOD_13 ( VAR_77 -> VAR_78 -> VAR_81 ) ; <S2SV_ModStart> VAR_53 ) ; VAR_77 -> VAR_78 = VAR_83 ; }
<S2SV_ModStart> ) ) { TYPE_3 * VAR_30 = METHOD_27 ( VAR_21 , VAR_27 ) ; if ( ! VAR_30 ) { <S2SV_ModStart> ( VAR_24 , "Error:<S2SV_blank>Cannot<S2SV_blank>access<S2SV_blank>%s\\n" , VAR_21 <S2SV_ModEnd> ) ; METHOD_12 <S2SV_ModStart> ) ; } if ( METHOD_29 ( VAR_30 , VAR_10 . VAR_11 , METHOD_28 ( VAR_10 . VAR_11 ) ) != 0 ) { <S2SV_ModEnd> METHOD_17 ( VAR_24 <S2SV_ModStart> ( VAR_24 , "Error:<S2SV_blank>.asoundrc<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symbolic<S2SV_blank>link<S2SV_blank>pointing<S2SV_blank>to<S2SV_blank>a<S2SV_blank>file<S2SV_blank>outside<S2SV_blank>home<S2SV_blank>directory\\n" ) ; METHOD_12 ( 1 ) ; } free ( VAR_30 ) ; } copy_file_as_user ( VAR_21 , VAR_29 , METHOD_22 ( ) , METHOD_23 ( ) , 0644 ) ; <S2SV_ModEnd> METHOD_18 ( "clone" <S2SV_ModStart> "clone" , VAR_29 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> = VAR_10 ; if ( VAR_14 == 0 ) VAR_12 . VAR_18 -> VAR_19 |= VAR_20 ;
<S2SV_ModStart> VAR_18 ) { for ( VAR_22 = METHOD_8 ( <S2SV_ModEnd> VAR_37 -> VAR_18 <S2SV_ModStart> VAR_37 -> VAR_18 ) ; <S2SV_ModEnd> ( VAR_30 = <S2SV_ModStart> ) != 0 ; VAR_22 = VAR_21 ) { <S2SV_ModEnd> METHOD_2 ( VAR_30
<S2SV_ModStart> ; VAR_25 -> VAR_34 = VAR_35 ; VAR_25 ->
<S2SV_ModStart> -> VAR_8 ; METHOD_4 ( VAR_7 ) ;
<S2SV_ModStart> ( VAR_237 ) ; if ( ! VAR_230 -> VAR_226 && VAR_230 -> VAR_231 -> VAR_229 != 8 ) VAR_230 -> VAR_231 -> VAR_229 = 0
<S2SV_ModStart> * VAR_24 ; METHOD_8 ( VAR_14 <S2SV_ModEnd> , & VAR_40 <S2SV_ModStart> goto VAR_41 ; } METHOD_4 ( VAR_36 , VAR_24 , & VAR_40 -> VAR_26 -> VAR_27 , VAR_28 ) { if ( VAR_36 -> VAR_30 & VAR_31 && ! METHOD_5 ( & VAR_36 -> VAR_33 ) ) continue ; VAR_42 = METHOD_6 ( VAR_40 , VAR_36 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } METHOD_4 ( VAR_14 , VAR_7 <S2SV_ModEnd> , & VAR_40 <S2SV_ModStart> -> VAR_26 -> VAR_10 <S2SV_ModEnd> , VAR_28 ) <S2SV_ModStart> VAR_28 ) { VAR_40 -> VAR_14 = VAR_14 ; VAR_42 = METHOD_3 ( VAR_40 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> METHOD_21 ( VAR_82 , VAR_89
<S2SV_ModStart> VAR_11 ) ; METHOD_5 ( & VAR_12 -> VAR_13 . VAR_14 -> VAR_15 ) ;
<S2SV_ModStart> = VAR_1574 ; break <S2SV_ModEnd> ; } VAR_1576
<S2SV_ModStart> , VAR_99 , VAR_391 , <S2SV_ModStart> "UnableToReadImageData" ) ; <S2SV_ModEnd> VAR_391 = VAR_688 <S2SV_ModStart> "MemoryAllocationFailed" ) ; if ( VAR_688 . VAR_582 == VAR_552 ) <S2SV_ModStart> VAR_393 ) ; <S2SV_ModEnd> VAR_630 = VAR_651
<S2SV_ModStart> METHOD_6 ( VAR_47 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_35 ) { unsigned TYPE_4 <S2SV_ModEnd> VAR_31 = sizeof <S2SV_ModStart> * VAR_34 ; unsigned TYPE_4 VAR_37 ; <S2SV_ModStart> VAR_31 ) ; VAR_37 = METHOD_6 ( VAR_34 ) ; if ( VAR_37 + VAR_31 >= VAR_38 ) return - VAR_36 ; VAR_31 += VAR_37 <S2SV_ModEnd> ; * VAR_35
<S2SV_ModStart> VAR_189 ) { TYPE_5 VAR_194 , VAR_201 ; <S2SV_ModStart> VAR_238 , VAR_245 , & VAR_194 , & VAR_201 ) ; if ( <S2SV_ModEnd> VAR_194 == VAR_195 <S2SV_ModStart> VAR_195 && ( <S2SV_ModEnd> VAR_201 > 0 <S2SV_ModStart> > 0 && <S2SV_ModEnd> VAR_201 < 9 <S2SV_ModStart> ) ; } else if ( VAR_238 -> VAR_234 ) { METHOD_54 ( VAR_238 -> VAR_239 , "Mixes<S2SV_blank>studio<S2SV_blank>and<S2SV_blank>non<S2SV_blank>studio<S2SV_blank>profile\\n" ) ; return VAR_246 ; } VAR_238 -> VAR_239 -> VAR_194 = VAR_194 ; VAR_238 -> VAR_239 -> VAR_201 = VAR_201 ; <S2SV_ModStart> VAR_234 ) { METHOD_53 ( VAR_238 -> VAR_239 -> VAR_194 == VAR_195 ) ;
<S2SV_ModStart> < VAR_82 + 4 <S2SV_ModEnd> ) return VAR_68
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> -> VAR_5 ; TYPE_8 * const VAR_46 = VAR_41 -> VAR_47 ; TYPE_9 * const METHOD_6 = VAR_41 -> VAR_47 -> METHOD_6 ; METHOD_7 ( VAR_46 ) ; <S2SV_ModStart> 1 ) { const TYPE_4 VAR_29 = VAR_41 -> VAR_18 [ VAR_43 ] ; METHOD_8 ( VAR_29 , METHOD_6 , VAR_46 ) ; if ( <S2SV_ModEnd> ( VAR_11 & <S2SV_ModStart> & 1 ) && VAR_29 >= 0 ) { METHOD_8 ( VAR_29 , METHOD_6 , VAR_46 ) ; } VAR_41 -> VAR_18 [ VAR_43 ] = VAR_41 -> VAR_48 [ VAR_43 ] ; ++ VAR_43 ; } for ( ; VAR_43 < REF_FRAMES && ! VAR_41 -> show_existing_frame ; ++ VAR_43 ) <S2SV_ModStart> VAR_43 ] ; METHOD_8 ( VAR_29 , METHOD_6 , VAR_46 ) ; VAR_41 -> VAR_18 [ VAR_43 ] = VAR_41 -> VAR_48 [ VAR_43 ] ; } METHOD_9 ( VAR_46 ) ; VAR_7 -> VAR_49 = 0 ; VAR_41 -> VAR_33 = TYPE_6 ( VAR_41 ) ; if ( ! VAR_7 -> VAR_50 || ! VAR_41 -> VAR_51 ) { METHOD_7 ( VAR_46 ) ; -- METHOD_6 [ <S2SV_ModEnd> VAR_41 -> VAR_37 <S2SV_ModStart> VAR_41 -> VAR_37 <S2SV_ModEnd> ] . TYPE_7 <S2SV_ModStart> ] . TYPE_7 ; METHOD_9 ( VAR_46 ) ; } <S2SV_ModEnd> for ( VAR_43 <S2SV_ModStart> . VAR_44 = - 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) { return VAR_27 <S2SV_ModEnd> ; } while
<S2SV_ModStart> , VAR_83 + 2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_16 ) ; VAR_408 = 0 ;
<S2SV_ModStart> const VAR_137 , TYPE_16 * VAR_138 , <S2SV_ModEnd> TYPE_5 * * <S2SV_ModStart> * VAR_139 , const TYPE_5 * const <S2SV_ModEnd> VAR_140 , TYPE_12 <S2SV_ModStart> VAR_156 ) { const <S2SV_ModStart> & VAR_136 -> VAR_157 . <S2SV_ModStart> TYPE_12 VAR_36 = VAR_158 [ VAR_156 ] <S2SV_ModEnd> ; const TYPE_12 <S2SV_ModStart> TYPE_14 VAR_155 ; const TYPE_15 * VAR_37 = VAR_159 ; if ( VAR_153 >= VAR_99 -> VAR_80 || VAR_154 >= VAR_99 -> VAR_100 ) return ; <S2SV_ModEnd> VAR_37 = VAR_99 <S2SV_ModStart> + VAR_154 ] <S2SV_ModEnd> ; VAR_150 =
<S2SV_ModStart> , VAR_35 , "<S2SV_blank>\\\\\\"\'$`<>" <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> , VAR_35 , "\\"\\\\" ) ; METHOD_14 ( "\\"" <S2SV_ModEnd> , VAR_36 )
<S2SV_ModStart> += VAR_157 ; if ( VAR_177 > 63 ) return VAR_123 ; <S2SV_ModStart> 20 ) { if ( VAR_177 > 63 ) return VAR_123 ; <S2SV_ModStart> 21 ) { if ( VAR_177 > 63 ) return VAR_123 ;
<S2SV_ModStart> ] ; TYPE_2 <S2SV_ModEnd> VAR_94 , VAR_197 <S2SV_ModStart> VAR_172 ) { VAR_198 * VAR_199 ; TYPE_2 VAR_142 ; <S2SV_ModStart> "Checking<S2SV_blank>memory<S2SV_blank>size\\n" ) ; VAR_199 = METHOD_69 ( 4 , VAR_52 ) ; if ( ! VAR_199 ) { VAR_197 = - VAR_60 ; goto VAR_191 ; } * VAR_199 <S2SV_ModEnd> = 0x12345678 ; <S2SV_ModStart> , 0x7a80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> 4 ) ; * VAR_199 <S2SV_ModEnd> = 0x87654321 ; <S2SV_ModStart> , 0xfa80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> , 0x7a80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> ; switch ( * VAR_199 <S2SV_ModEnd> ) { case <S2SV_ModStart> break ; } METHOD_70 ( VAR_199 ) ;
<S2SV_ModStart> VAR_182 ) ; <S2SV_ModEnd> struct STRUCT_OR_UNION_6 * <S2SV_ModStart> -> VAR_21 ; struct STRUCT_OR_UNION_7 VAR_188 ; <S2SV_ModStart> return VAR_189 ; METHOD_31 ( & VAR_188 , VAR_182 ) ; METHOD_12 ( VAR_187 ) ; if ( ! VAR_172 || ( VAR_178 & VAR_179 ) ) METHOD_13 ( VAR_163 , VAR_175 ) ; else if ( VAR_175 ) METHOD_14 ( VAR_175 ) ; VAR_189 = - VAR_88 ; if ( METHOD_16 ( VAR_182 ) || METHOD_16 ( VAR_187 ) ) goto VAR_159 ; if ( VAR_109 && VAR_180 != VAR_181 ) { VAR_189 = - VAR_96 ; if ( VAR_172 && ! VAR_185 && VAR_180 -> VAR_108 >= VAR_109 ) goto VAR_159 ; if ( ( VAR_178 & VAR_179 ) && ! VAR_172 && VAR_185 && VAR_181 -> VAR_108 >= VAR_109 ) goto VAR_159 ; } if ( VAR_172 && ! ( VAR_178 & VAR_179 ) && VAR_175 ) METHOD_17 ( VAR_187 ) ; if ( ! VAR_172 ) { VAR_189 = METHOD_19 ( VAR_163 , VAR_126 ) ; if ( VAR_189 ) goto VAR_159 ; } if ( VAR_175 && ! VAR_185 ) { VAR_189 = METHOD_19 ( VAR_175 , VAR_126 ) ; if ( VAR_189 ) goto VAR_159 ; } VAR_189 = VAR_181 -> VAR_131 -> METHOD_20 ( VAR_181 , VAR_182 , VAR_180 , VAR_187 , VAR_178 ) ; if ( VAR_189 ) goto VAR_159 ; if ( ! ( VAR_178 & VAR_179 ) && VAR_175 ) { if ( VAR_172 ) VAR_175 -> VAR_144 |= VAR_145 ; METHOD_21 ( VAR_187 ) ; METHOD_22 ( VAR_187 ) ; } if ( ! ( VAR_181 -> VAR_149 -> VAR_150 -> VAR_151 & VAR_152 ) ) { if ( ! ( VAR_178 & VAR_179 ) ) METHOD_23 ( VAR_182 , VAR_187 ) ; else METHOD_24 ( VAR_182 , VAR_187 ) ; } VAR_159 : if ( ! VAR_172 || ( VAR_178 & VAR_179 ) ) METHOD_25 ( VAR_163 , VAR_175 ) ; else if ( VAR_175 ) METHOD_26 ( VAR_175 ) ; METHOD_27 ( VAR_187 ) ; if ( ! VAR_189 ) { METHOD_29 ( VAR_181 , VAR_180 , VAR_188 . VAR_184 , VAR_172 , ! ( VAR_178 & VAR_179 ) ? VAR_175 : VAR_186 , VAR_182 ) ; if ( VAR_178 & VAR_179 ) { METHOD_29 ( VAR_180 , VAR_181 , <S2SV_ModEnd> VAR_182 -> VAR_183 <S2SV_ModStart> VAR_183 . VAR_184 , VAR_185 , VAR_186 , VAR_187 ) ; } } METHOD_32 ( & VAR_188 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_48 ) ; METHOD_20 ( & VAR_47 -> VAR_59 , VAR_60 ) ;
<S2SV_ModStart> VAR_4 -> VAR_5 ; METHOD_3 ( & VAR_18 -> VAR_21 -> VAR_22 ) <S2SV_ModStart> VAR_19 ) ; METHOD_4 ( & VAR_18 -> VAR_21 -> VAR_22 ) ;
<S2SV_ModStart> TYPE_5 * VAR_17 <S2SV_ModEnd> ; VAR_17 = <S2SV_ModStart> , VAR_26 , VAR_26 <S2SV_ModEnd> , VAR_26 ,
<S2SV_ModStart> * METHOD_0 ( TYPE_6 VAR_16 , TYPE_6 VAR_19 , TYPE_6 VAR_22 , TYPE_6 <S2SV_ModEnd> VAR_25 ) {
<S2SV_ModStart> VAR_38 . VAR_39 , VAR_52 <S2SV_ModStart> VAR_38 . VAR_33 , VAR_52
<S2SV_ModStart> ; default : METHOD_13 ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n" , VAR_65 , VAR_64 -> VAR_42 [ VAR_63 ] . VAR_44 ) ; return <S2SV_ModEnd> ; } }
<S2SV_ModStart> 1 ; } TYPE_18 VAR_226 = VAR_120 - VAR_205 ; <S2SV_ModStart> = METHOD_2 ( VAR_226 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> , VAR_224 , VAR_226 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ) > 5 + VAR_152 <S2SV_ModStart> TYPE_15 VAR_64 = ( <S2SV_ModStart> 2 < VAR_120 ) && ( <S2SV_ModEnd> ! VAR_73 [ <S2SV_ModStart> [ 4 ] )
<S2SV_ModStart> * VAR_11 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> { if ( <S2SV_ModEnd> VAR_21 >= VAR_20
<S2SV_ModStart> ; TYPE_23 VAR_123 ; unsigned TYPE_23 <S2SV_ModEnd> VAR_99 ; TYPE_9
<S2SV_ModStart> return VAR_248 ; TYPE_12 VAR_249 = 0 ; if ( METHOD_21 ( sizeof ( TYPE_17 ) , VAR_192 , & VAR_249 ) ) return VAR_250 ; <S2SV_ModStart> = METHOD_8 ( VAR_249 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%" PRIsize "<S2SV_blank><<S2SV_blank>_%u_<S2SV_blank><<S2SV_blank>%u<S2SV_blank>(BT_SHB_INSANE_MAX)" <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> VAR_14 -> METHOD_3 && VAR_16
<S2SV_ModStart> : METHOD_97 ( 12 <S2SV_ModEnd> ) ; VAR_231 <S2SV_ModStart> ( VAR_266 , "%s" , tstr <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> 0 ) ; METHOD_6 <S2SV_ModEnd> ( & VAR_14
<S2SV_ModStart> VAR_182 ) ; <S2SV_ModEnd> struct STRUCT_OR_UNION_6 * <S2SV_ModStart> -> VAR_21 ; struct STRUCT_OR_UNION_7 VAR_188 ; <S2SV_ModStart> return VAR_189 ; METHOD_31 ( & VAR_188 , VAR_182 ) ; METHOD_12 ( VAR_187 ) ; if ( ! VAR_172 || ( VAR_178 & VAR_179 ) ) METHOD_13 ( VAR_163 , VAR_175 ) ; else if ( VAR_175 ) METHOD_14 ( VAR_175 ) ; VAR_189 = - VAR_88 ; if ( METHOD_16 ( VAR_182 ) || METHOD_16 ( VAR_187 ) ) goto VAR_159 ; if ( VAR_109 && VAR_180 != VAR_181 ) { VAR_189 = - VAR_96 ; if ( VAR_172 && ! VAR_185 && VAR_180 -> VAR_108 >= VAR_109 ) goto VAR_159 ; if ( ( VAR_178 & VAR_179 ) && ! VAR_172 && VAR_185 && VAR_181 -> VAR_108 >= VAR_109 ) goto VAR_159 ; } if ( VAR_172 && ! ( VAR_178 & VAR_179 ) && VAR_175 ) METHOD_17 ( VAR_187 ) ; if ( ! VAR_172 ) { VAR_189 = METHOD_19 ( VAR_163 , VAR_126 ) ; if ( VAR_189 ) goto VAR_159 ; } if ( VAR_175 && ! VAR_185 ) { VAR_189 = METHOD_19 ( VAR_175 , VAR_126 ) ; if ( VAR_189 ) goto VAR_159 ; } VAR_189 = VAR_181 -> VAR_131 -> METHOD_20 ( VAR_181 , VAR_182 , VAR_180 , VAR_187 , VAR_178 ) ; if ( VAR_189 ) goto VAR_159 ; if ( ! ( VAR_178 & VAR_179 ) && VAR_175 ) { if ( VAR_172 ) VAR_175 -> VAR_144 |= VAR_145 ; METHOD_21 ( VAR_187 ) ; METHOD_22 ( VAR_187 ) ; } if ( ! ( VAR_181 -> VAR_149 -> VAR_150 -> VAR_151 & VAR_152 ) ) { if ( ! ( VAR_178 & VAR_179 ) ) METHOD_23 ( VAR_182 , VAR_187 ) ; else METHOD_24 ( VAR_182 , VAR_187 ) ; } VAR_159 : if ( ! VAR_172 || ( VAR_178 & VAR_179 ) ) METHOD_25 ( VAR_163 , VAR_175 ) ; else if ( VAR_175 ) METHOD_26 ( VAR_175 ) ; METHOD_27 ( VAR_187 ) ; if ( ! VAR_189 ) { METHOD_29 ( VAR_181 , VAR_180 , VAR_188 . VAR_184 , VAR_172 , ! ( VAR_178 & VAR_179 ) ? VAR_175 : VAR_186 , VAR_182 ) ; if ( VAR_178 & VAR_179 ) { METHOD_29 ( VAR_180 , VAR_181 , <S2SV_ModEnd> VAR_182 -> VAR_183 <S2SV_ModStart> VAR_183 . VAR_184 , VAR_185 , VAR_186 , VAR_187 ) ; } } METHOD_32 ( & VAR_188 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_10 = VAR_9 -> VAR_10 ; TYPE_1 VAR_14 = 0 ; if <S2SV_ModEnd> ( VAR_9 -> <S2SV_ModStart> ( VAR_9 -> VAR_15 || VAR_4 -> VAR_16 != METHOD_2 ( VAR_10 -> VAR_8 -> VAR_17 ) >> VAR_18 ) VAR_14 = METHOD_3 ( VAR_19 , VAR_12 ) ; return VAR_14 ? : METHOD_1 ( <S2SV_ModStart> -> VAR_8 , <S2SV_ModEnd> VAR_10 -> VAR_11
<S2SV_ModStart> endif VAR_15 : <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_21 ) ; METHOD_6 ( VAR_16 , VAR_17 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct STRUCT_OR_UNION_0 * <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_4 ) { if ( METHOD_3 ( & VAR_5 -> VAR_3 ) > VAR_7 ) { METHOD_4 <S2SV_ModEnd> ( & VAR_5 <S2SV_ModStart> VAR_3 ) ; return METHOD_5 ( - VAR_8 ) ; } <S2SV_ModStart> VAR_6 ) ; return VAR_5 ;
<S2SV_ModStart> ( VAR_13 ) <S2SV_ModEnd> ; TYPE_3 VAR_10 <S2SV_ModStart> -> VAR_29 ; <S2SV_ModEnd> VAR_30 -> VAR_29 <S2SV_ModStart> -> VAR_29 ++ ; METHOD_6 ( VAR_30 )
<S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_65 ,
<S2SV_ModStart> VAR_11 ) { TYPE_4 * VAR_13 ; TYPE_0 VAR_14 ; VAR_13 = METHOD_3 ( VAR_12 , VAR_15 ) ; if ( ! VAR_13 ) return - VAR_16 ; VAR_14 = <S2SV_ModEnd> METHOD_1 ( VAR_6 <S2SV_ModStart> , 0 , VAR_13 <S2SV_ModEnd> , VAR_12 , <S2SV_ModStart> 500 ) ; if ( VAR_14 > 0 && VAR_14 <= VAR_12 ) METHOD_4 ( VAR_11 , VAR_13 , VAR_14 ) ; METHOD_5 ( VAR_13 ) ; return VAR_14 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 <S2SV_ModEnd> * VAR_7 ) <S2SV_ModStart> if ( ! METHOD_8 <S2SV_ModEnd> ( VAR_7 ) <S2SV_ModStart> ) ) return METHOD_9 <S2SV_ModEnd> ( VAR_7 , <S2SV_ModStart> if ( ! METHOD_8 <S2SV_ModEnd> ( VAR_7 ) <S2SV_ModStart> ) ) return METHOD_9 <S2SV_ModEnd> ( VAR_7 , <S2SV_ModStart> if ( ! METHOD_8 <S2SV_ModEnd> ( VAR_7 ) <S2SV_ModStart> ) ) return METHOD_9 <S2SV_ModEnd> ( VAR_7 ,
<S2SV_ModStart> ; TYPE_9 VAR_135 <S2SV_ModEnd> ; TYPE_10 * <S2SV_ModStart> = VAR_132 ; METHOD_13 <S2SV_ModEnd> ( VAR_150 , <S2SV_ModStart> VAR_141 ) { METHOD_13 <S2SV_ModEnd> ( VAR_150 , <S2SV_ModStart> VAR_147 ) { METHOD_13 <S2SV_ModEnd> ( VAR_150 ,
<S2SV_ModStart> ) ; goto VAR_82 <S2SV_ModEnd> ; } VAR_81 <S2SV_ModStart> VAR_68 ) ; VAR_82 :
<S2SV_ModStart> unsigned TYPE_9 ) <S2SV_ModEnd> VAR_12 [ 1 <S2SV_ModStart> ] << 8 ; VAR_13 |= ( unsigned TYPE_9 ) <S2SV_ModEnd> VAR_12 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> VAR_13 & 0xffff <S2SV_ModStart> VAR_13 & 0xffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned TYPE_9 ) VAR_12 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] << 8 ; VAR_13 |= <S2SV_ModEnd> ( unsigned TYPE_9 <S2SV_ModStart> unsigned TYPE_9 ) VAR_12 [ 1 ] ; return <S2SV_ModStart> & 0xffff ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_14 VAR_115 ; <S2SV_ModEnd> VAR_115 = METHOD_8
<S2SV_ModStart> STRUCT_OR_UNION_9 ) { struct STRUCT_OR_UNION_10 * VAR_13 ; <S2SV_ModStart> ) STRUCT_OR_UNION_9 ; VAR_13 = <S2SV_ModEnd> STRUCT_OR_UNION_9 -> VAR_2 <S2SV_ModStart> [ 0 ] ; if ( VAR_13 -> VAR_14 < 2 ) return - VAR_15 ; VAR_6 = & VAR_13 <S2SV_ModStart> [ 1 ] ; if ( VAR_6 -> VAR_8 . VAR_16 < 1 ) return - VAR_15
<S2SV_ModStart> TYPE_3 VAR_17 ; TYPE_4 TYPE_5 * VAR_18 = VAR_19 ; <S2SV_ModStart> VAR_8 ; } VAR_18 = METHOD_6 ( VAR_13 , VAR_20 , VAR_19 ) ; <S2SV_ModStart> ( VAR_13 ) && VAR_18 != VAR_19
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_791 <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> TYPE_293 VAR_308 [ <S2SV_ModStart> VAR_1443 ) ) METHOD_175 <S2SV_ModEnd> ( VAR_1381 ,
<S2SV_ModStart> VAR_19 ) ) { METHOD_5 ( VAR_24 ) ; <S2SV_ModStart> - VAR_20 ; } <S2SV_ModStart> VAR_28 ) ; METHOD_5 ( VAR_24 ) ;
<S2SV_ModStart> VAR_22 ; } METHOD_4 ( VAR_21 ) ;
<S2SV_ModStart> 0 ) { if ( VAR_543 < 4 ) goto VAR_1052 ; <S2SV_ModStart> if ( VAR_542 < 4 || VAR_542 > VAR_543 <S2SV_ModEnd> ) goto VAR_1052
<S2SV_ModStart> VAR_62 - 1 <S2SV_ModEnd> ) ; else <S2SV_ModStart> VAR_65 , VAR_62 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> VAR_85 ) ; <S2SV_ModEnd> METHOD_23 ( &
<S2SV_ModStart> VAR_14 . VAR_12 < <S2SV_ModEnd> VAR_13 -> VAR_14
<S2SV_ModStart> = 0 ; unsigned TYPE_3 VAR_81 [ VAR_82 ] , * VAR_83 = VAR_31 ; <S2SV_ModStart> VAR_62 -> VAR_9 ; if ( VAR_77 -> VAR_26 ) VAR_83 = VAR_81 <S2SV_ModStart> -> VAR_24 , VAR_83 , & VAR_70 , VAR_77 -> VAR_29 , VAR_30 , 0 , 0 , VAR_31 ) ; if ( VAR_77 -> VAR_26 ) memcpy ( VAR_77 -> VAR_26 , VAR_81 , sizeof ( * <S2SV_ModEnd> VAR_77 -> VAR_26 <S2SV_ModStart> VAR_77 -> VAR_26 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> endif METHOD_17 ( LOG_MODE_BUFFER <S2SV_ModEnd> ) ; METHOD_18
<S2SV_ModStart> VAR_41 ) ) { return 0 ; } <S2SV_ModEnd> VAR_40 = (
<S2SV_ModStart> ! METHOD_15 ( <S2SV_ModEnd> VAR_111 ) ) <S2SV_ModStart> ! METHOD_15 ( <S2SV_ModEnd> VAR_111 ) ;
<S2SV_ModStart> != VAR_101 ) if ( <S2SV_ModEnd> METHOD_24 ( VAR_102 <S2SV_ModStart> , VAR_104 ) != VAR_102 ) break
<S2SV_ModStart> METHOD_2 ( VAR_14 ) ; METHOD_6 ( VAR_14 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_decode_to_lua_array"
<S2SV_ModStart> VAR_59 ) { <S2SV_ModEnd> TYPE_2 VAR_51 ; <S2SV_ModStart> TYPE_2 VAR_51 ; bprm_fill_uid ( VAR_59 ) ; <S2SV_ModEnd> VAR_51 = METHOD_7
<S2SV_ModStart> VAR_13 ) { VAR_23 * VAR_24 ; TYPE_5 VAR_22 ; VAR_24 = METHOD_4 ( VAR_14 , VAR_25 ) ; if ( ! VAR_24 ) return - VAR_26 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> , VAR_12 , VAR_24 <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_22 ) ; else if ( VAR_22 <= VAR_14 ) METHOD_5 ( VAR_13 , VAR_24 , VAR_22 ) ; METHOD_6 ( VAR_24 ) ;
<S2SV_ModStart> ! VAR_44 ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> != '\\r' ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> != '\\n' ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> ; VAR_68 : * VAR_60 = VAR_61 ; <S2SV_ModStart> ; VAR_69 : * VAR_60 = VAR_61 ;
<S2SV_ModStart> ) VAR_10 ; VAR_54 = VAR_66 -> VAR_16 ; METHOD_5 ( VAR_33 -> VAR_27 ) ; <S2SV_ModStart> VAR_33 -> VAR_21 <S2SV_ModEnd> ; METHOD_11 (
<S2SV_ModStart> VAR_13 ) { const TYPE_1 * const VAR_29 = VAR_26 ; <S2SV_ModStart> ( ( ( METHOD_4 ( & VAR_26 [ 1 ] , "ORIGIN}" , 6 ) == 0 && ( ! VAR_17 || ( ( VAR_26 [ 7 ] == '\\0' || ( VAR_13 && VAR_26 [ 7 ] == ':' ) ) && ( VAR_26 == VAR_29 || ( VAR_13 && VAR_26 [ - 1 ] == ':' ) ) ) ) && ( VAR_25 = 7 ) != 0 ) || ( <S2SV_ModEnd> METHOD_4 ( & <S2SV_ModStart> 1 ] , "PLATFORM}" , 8 ) == 0 && ( VAR_25 = 9 ) != 0 ) ) && ( VAR_26 [ VAR_25 ] == '\\0' || VAR_26 [ VAR_25 ] == '/' || ( VAR_13 && VAR_26 [ VAR_25 ] == ':' ) ) ) || ( VAR_26 [ 1 ] == '{' && ( ( METHOD_4 ( & VAR_26 [ 2 ] , "ORIGIN}" , 7 ) == 0 && <S2SV_ModEnd> ( ! VAR_17 <S2SV_ModStart> ( ! VAR_17 || ( ( VAR_26 [ 9 ] == '\\0' || ( VAR_13 && VAR_26 [ 9 ] == ':' ) ) && ( VAR_26 == VAR_29 || ( VAR_13 && VAR_26 [ - 1 ] == ':' ) ) ) ) <S2SV_ModEnd> && ( VAR_25
<S2SV_ModStart> = VAR_16 ; if ( VAR_27 -> VAR_51 || ! VAR_27 -> VAR_52 ) { * VAR_48 = VAR_53 ; return VAR_54 ; }
<S2SV_ModStart> 1u << VAR_7 ) | ( 1u << VAR_33
<S2SV_ModStart> ; VAR_41 = METHOD_10 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> { VAR_47 = METHOD_16 <S2SV_ModEnd> ( METHOD_7 (
<S2SV_ModStart> ; if ( ( VAR_79 > 12 ) && <S2SV_ModStart> else if ( ( VAR_79 > 9 ) &&
<S2SV_ModStart> return VAR_53 ; <S2SV_ModEnd> VAR_71 = 0 <S2SV_ModStart> ; } } }
<S2SV_ModStart> VAR_147 ; TYPE_29 VAR_316 ; TYPE_29 <S2SV_ModStart> : 0 ; VAR_316 = 0 ; <S2SV_ModStart> == 0 && ( VAR_316 = <S2SV_ModStart> ( TYPE_60 ) ) == 0 || VAR_316 == 2 <S2SV_ModEnd> ) { TYPE_29
<S2SV_ModStart> , TYPE_4 TYPE_3 VAR_67 <S2SV_ModStart> , TYPE_4 TYPE_5 VAR_67
<S2SV_ModStart> = METHOD_7 ( ( TYPE_1 struct STRUCT_OR_UNION_3 * * ) <S2SV_ModStart> ( VAR_25 ) { METHOD_9 ( <S2SV_ModEnd> VAR_25 -> VAR_26 <S2SV_ModStart> VAR_25 -> VAR_26 , & VAR_23 -> VAR_27 ) ; METHOD_10 ( VAR_25 <S2SV_ModStart> ) ; } }
<S2SV_ModStart> * VAR_271 ; TYPE_8 VAR_280 ; <S2SV_ModStart> VAR_208 ) ; if ( ! jas_safe_size_mul ( <S2SV_ModEnd> VAR_277 -> VAR_169 <S2SV_ModStart> VAR_277 -> VAR_169 , <S2SV_ModEnd> VAR_277 -> VAR_147 <S2SV_ModStart> VAR_277 -> VAR_147 , & VAR_280 <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ; } VAR_277 -> VAR_159 = VAR_280 ; METHOD_9 ( 10 , ( "numtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numhtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numvtiles<S2SV_blank>=<S2SV_blank>%d;\\n" , VAR_277 -> VAR_159 , VAR_277 -> VAR_169 , VAR_277 -> VAR_147 ) ) ; if ( ! ( VAR_277 -> VAR_156 = METHOD_15 ( VAR_277 -> VAR_159 , sizeof ( VAR_152 ) ) ) ) { return - 1 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ) == 1 && VAR_48 -> VAR_76 < VAR_48 -> VAR_77
<S2SV_ModStart> = { VAR_7 -> VAR_10 [ VAR_10 ] . VAR_14
<S2SV_ModStart> TYPE_4 VAR_41 ; TYPE_2 VAR_47 ; struct STRUCT_OR_UNION_2 * VAR_48 = VAR_3 ; <S2SV_ModStart> ; } } VAR_48 -> VAR_47 = VAR_46 ; if ( ! VAR_49 && ( ! VAR_25 || ! VAR_25 -> VAR_49 ) ) return 0 ; VAR_41 = METHOD_22 ( VAR_44 , VAR_45 , & VAR_47 ) ; if ( VAR_41 || VAR_47 == VAR_46 ) return VAR_41 ; VAR_46 &= VAR_50 ; VAR_46 |= VAR_47 & ~ VAR_50 ;
<S2SV_ModStart> case VAR_225 : METHOD_18 ( & VAR_281 , 0 , sizeof ( VAR_281 ) ) ;
<S2SV_ModStart> } if ( VAR_363 ) { METHOD_78 ( "\\n\\nCapture<S2SV_blank>file<S2SV_blank>appears<S2SV_blank>to<S2SV_blank>be<S2SV_blank>damaged<S2SV_blank>or<S2SV_blank>corrupt.\\n" "Contains<S2SV_blank>packet<S2SV_blank>of<S2SV_blank>size<S2SV_blank>%u,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>snap<S2SV_blank>length<S2SV_blank>%u\\n" , VAR_355 , VAR_303 . VAR_304 ) ; METHOD_72 ( VAR_353 ) ; break ; } if ( <S2SV_ModStart> VAR_353 ) ; break <S2SV_ModEnd> ; } METHOD_78
<S2SV_ModStart> VAR_131 ) { METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> ) ; } METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> VAR_172 -> VAR_126 <S2SV_ModEnd> ; while ( <S2SV_ModStart> VAR_131 ) { METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> ; } } METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> VAR_172 -> VAR_126 <S2SV_ModEnd> ; while ( <S2SV_ModStart> VAR_131 ) { METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> VAR_172 -> VAR_126 <S2SV_ModEnd> ; while ( <S2SV_ModStart> VAR_131 ) { METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> VAR_172 -> VAR_126 <S2SV_ModEnd> ; while ( <S2SV_ModStart> VAR_131 ) { METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> ) ; } METHOD_1 ( VAR_172 , 1 ) <S2SV_ModStart> ) ; } METHOD_1 ( VAR_172 , 1 )
<S2SV_ModStart> ; TYPE_25 VAR_263 = 0 <S2SV_ModStart> VAR_326 -> VAR_285 || ! VAR_326 -> VAR_262
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; if ( METHOD_41 ( VAR_342 ) ) break ; if (
<S2SV_ModStart> = VAR_15 -> VAR_40 <S2SV_ModEnd> ; TYPE_4 VAR_23 <S2SV_ModStart> = VAR_15 -> VAR_22 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = VAR_45 -> VAR_22 <S2SV_ModEnd> ; VAR_45 -> <S2SV_ModStart> = VAR_45 -> VAR_25 <S2SV_ModEnd> ; } }
<S2SV_ModStart> VAR_41 -> VAR_42 , ".chfn"
<S2SV_ModStart> ; VAR_25 -= 3 <S2SV_ModEnd> ; for (
<S2SV_ModStart> ; if ( METHOD_5 <S2SV_ModEnd> ( STRUCT_OR_UNION_6 )
<S2SV_ModStart> VAR_9 ] ; if ( VAR_13 == VAR_11 ) { METHOD_8 ( "%s:<S2SV_blank>pci<S2SV_blank>[%s]<S2SV_blank>has<S2SV_blank>wrong<S2SV_blank>bus<S2SV_blank>%d<S2SV_blank>info!\\n" , VAR_49 , VAR_45 -> VAR_50 , VAR_45 -> VAR_9 ) ; return ; } <S2SV_ModEnd> VAR_47 = & <S2SV_ModStart> VAR_45 ) ; <S2SV_ModEnd> if ( VAR_47 <S2SV_ModStart> METHOD_4 ( VAR_45 <S2SV_ModEnd> ) ; VAR_45
<S2SV_ModStart> } VAR_43 = METHOD_12 ( <S2SV_ModStart> VAR_23 -> VAR_22 , sizeof VAR_26 )
<S2SV_ModStart> != VAR_3 ) METHOD_3 ( <S2SV_ModStart> VAR_7 , VAR_8 )
<S2SV_ModStart> VAR_50 ; } if ( VAR_46 . VAR_29 != VAR_51 -> VAR_29 || VAR_46 . VAR_47 != VAR_51 -> VAR_47 ) { VAR_52 = - VAR_15 ; goto VAR_50 ; } <S2SV_ModStart> VAR_51 ) + VAR_51 -> <S2SV_ModEnd> VAR_47 ) )
<S2SV_ModStart> VAR_23 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_24 )
<S2SV_ModStart> VAR_381 ) ; VAR_381 -> VAR_216 [ VAR_378 ] . VAR_385 = VAR_344 ; <S2SV_ModStart> VAR_378 ++ ; VAR_381 -> VAR_216 [ VAR_378 ] . VAR_385 = VAR_344 ;
<S2SV_ModStart> ; } VAR_222 <S2SV_ModEnd> ++ ; } <S2SV_ModStart> ) ; } VAR_226 -> VAR_180 += VAR_222 ;
<S2SV_ModStart> VAR_32 ; return ( * VAR_35 != VAR_32 && * VAR_40 != VAR_32 ) <S2SV_ModEnd> ; case VAR_34 <S2SV_ModStart> . VAR_48 ; if ( VAR_52 -> VAR_47 . VAR_39 != VAR_55 && * VAR_35 == VAR_32 ) return VAR_54 ; if ( * VAR_40 == VAR_32 ) return VAR_54 ;
<S2SV_ModStart> * VAR_9 ; TYPE_0 VAR_11 ; <S2SV_ModStart> VAR_7 ) ; VAR_11 = METHOD_3 ( VAR_9 ) ; if ( METHOD_4 ( VAR_7 ) < VAR_11 || <S2SV_ModEnd> METHOD_3 ( VAR_8 <S2SV_ModStart> VAR_8 ) != VAR_11 <S2SV_ModEnd> ) return -
<S2SV_ModStart> * VAR_664 , TYPE_55 * VAR_675 , TYPE_56 * VAR_676 <S2SV_ModEnd> , TYPE_37 * <S2SV_ModStart> , TYPE_54 VAR_640 , TYPE_57 * VAR_677 <S2SV_ModStart> -> VAR_12 ; TYPE_2 * const VAR_678 = & VAR_676 -> VAR_678 ; <S2SV_ModStart> VAR_619 = & VAR_675 <S2SV_ModEnd> -> VAR_15 ; <S2SV_ModStart> TYPE_54 VAR_78 = VAR_679 [ VAR_670 ] <S2SV_ModEnd> ; const TYPE_54 <S2SV_ModStart> 8 ] ; TYPE_58 VAR_680 , VAR_681 , VAR_682 <S2SV_ModEnd> ; TYPE_47 VAR_176 <S2SV_ModStart> = 1 ; TYPE_59 * VAR_683 = & VAR_677 -> VAR_684 ; <S2SV_ModStart> ] ) ; METHOD_63 ( & VAR_680 ) ; METHOD_63 ( & VAR_681 ) ; METHOD_63 ( & VAR_682 ) ; <S2SV_ModStart> VAR_451 ) ; VAR_677 -> VAR_685 = VAR_451 ; METHOD_48 ( VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> VAR_670 == VAR_101 && VAR_664 -> VAR_657 . VAR_658 <S2SV_ModStart> ( VAR_664 , VAR_678 , VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> VAR_670 ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> VAR_508 ) { VAR_677 -> VAR_685 = VAR_578 <S2SV_ModEnd> ; METHOD_49 ( <S2SV_ModStart> ( VAR_664 , VAR_676 , VAR_619 , VAR_667 , VAR_668 , & VAR_681 , VAR_670 , VAR_683 <S2SV_ModEnd> , VAR_639 ) <S2SV_ModStart> ; if ( VAR_681 . VAR_671 <S2SV_ModEnd> < VAR_637 ) <S2SV_ModStart> VAR_637 ) { VAR_681 . VAR_671 += VAR_664 <S2SV_ModEnd> -> VAR_588 [ <S2SV_ModStart> VAR_578 ] ; VAR_681 . rdcost <S2SV_ModEnd> = METHOD_55 ( <S2SV_ModStart> -> VAR_595 , VAR_681 . VAR_671 , VAR_681 . VAR_673 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } METHOD_58 ( VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> = VAR_232 ; VAR_677 -> VAR_685 = VAR_451 <S2SV_ModEnd> ; } } <S2SV_ModStart> ( VAR_664 , VAR_676 , VAR_619 , VAR_667 , VAR_668 , & VAR_680 , VAR_670 , VAR_683 <S2SV_ModEnd> , VAR_639 ) <S2SV_ModStart> case VAR_248 : METHOD_49 ( VAR_664 , VAR_676 , VAR_619 , VAR_667 , VAR_668 , & VAR_680 , VAR_608 , & VAR_677 -> horizontal [ 0 ] , <S2SV_ModEnd> VAR_639 ) ; <S2SV_ModStart> ; if ( VAR_680 . VAR_671 <S2SV_ModEnd> != VAR_637 && <S2SV_ModStart> VAR_504 ) { TYPE_58 tmp_rdc ; TYPE_59 * VAR_683 = & VAR_677 -> horizontal [ 0 ] ; vp9_rd_cost_init ( & tmp_rdc ) <S2SV_ModEnd> ; METHOD_32 ( <S2SV_ModStart> ( VAR_664 , VAR_675 , VAR_683 , VAR_667 , VAR_668 , VAR_608 , 0 ) ; METHOD_34 ( VAR_664 , VAR_675 , VAR_666 , 0 , VAR_667 , VAR_668 , VAR_608 , VAR_683 ) <S2SV_ModEnd> ; METHOD_49 ( <S2SV_ModStart> ( VAR_664 , VAR_676 , VAR_619 , <S2SV_ModEnd> VAR_667 + ( <S2SV_ModStart> VAR_668 , & tmp_rdc <S2SV_ModEnd> , VAR_608 , <S2SV_ModStart> , VAR_608 , & VAR_677 -> horizontal [ 1 ] <S2SV_ModEnd> , VAR_639 ) <S2SV_ModStart> ; if ( tmp_rdc . VAR_671 <S2SV_ModEnd> == VAR_637 || <S2SV_ModStart> == VAR_637 || tmp_rdc . VAR_673 <S2SV_ModEnd> == VAR_639 ) <S2SV_ModStart> VAR_639 ) { METHOD_63 ( & VAR_680 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } VAR_680 . VAR_671 += tmp_rdc . VAR_671 ; VAR_680 . VAR_673 += tmp_rdc . VAR_673 ; VAR_680 . rdcost += tmp_rdc . rdcost <S2SV_ModEnd> ; } break <S2SV_ModStart> case VAR_307 : METHOD_49 ( VAR_664 , VAR_676 , VAR_619 , VAR_667 , VAR_668 , & VAR_680 , VAR_608 , & VAR_677 -> vertical [ 0 ] <S2SV_ModEnd> , VAR_639 ) <S2SV_ModStart> ; if ( VAR_680 . VAR_671 <S2SV_ModEnd> != VAR_637 && <S2SV_ModStart> VAR_508 ) { TYPE_58 tmp_rdc ; TYPE_59 * VAR_683 = & VAR_677 -> vertical [ 0 ] ; vp9_rd_cost_init ( & tmp_rdc ) <S2SV_ModEnd> ; METHOD_32 ( <S2SV_ModStart> ( VAR_664 , VAR_675 , VAR_683 , VAR_667 , VAR_668 , VAR_608 , 0 ) ; METHOD_34 ( VAR_664 , VAR_675 , VAR_666 , 0 , VAR_667 , VAR_668 , VAR_608 , VAR_683 ) <S2SV_ModEnd> ; METHOD_49 ( <S2SV_ModStart> ( VAR_664 , VAR_676 , VAR_619 , <S2SV_ModEnd> VAR_667 , VAR_668 <S2SV_ModStart> ) , & tmp_rdc <S2SV_ModEnd> , VAR_608 , <S2SV_ModStart> , VAR_608 , & VAR_677 -> vertical [ VAR_670 > VAR_618 ] , <S2SV_ModEnd> VAR_639 ) ; <S2SV_ModStart> ; if ( tmp_rdc . VAR_671 <S2SV_ModEnd> == VAR_637 || <S2SV_ModStart> == VAR_637 || tmp_rdc . VAR_673 <S2SV_ModEnd> == VAR_639 ) <S2SV_ModStart> VAR_639 ) { METHOD_63 ( & VAR_680 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } VAR_680 . VAR_671 += tmp_rdc . VAR_671 ; VAR_680 . VAR_673 += tmp_rdc . VAR_673 ; VAR_680 . rdcost += tmp_rdc . rdcost <S2SV_ModEnd> ; } break <S2SV_ModStart> case VAR_590 : if ( VAR_670 == VAR_618 ) { METHOD_49 ( VAR_664 , VAR_676 , VAR_619 , VAR_667 , VAR_668 , & VAR_680 , VAR_608 , VAR_677 -> leaf_split [ 0 ] , VAR_639 ) ; break ; } VAR_680 . VAR_671 = 0 ; VAR_680 . VAR_673 = 0 ; VAR_680 . rdcost <S2SV_ModEnd> = 0 ; <S2SV_ModStart> & 0x01 ; TYPE_58 tmp_rdc <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) continue ; vp9_rd_cost_init ( & tmp_rdc ) ; METHOD_39 ( VAR_664 , VAR_675 , VAR_676 , VAR_600 + VAR_398 * VAR_402 * VAR_400 + VAR_401 * VAR_402 , VAR_666 , VAR_667 + VAR_570 , VAR_668 + VAR_572 , VAR_608 , & tmp_rdc . VAR_671 , & tmp_rdc . VAR_673 <S2SV_ModEnd> , VAR_558 != <S2SV_ModStart> VAR_558 != 3 , VAR_677 -> VAR_686 [ VAR_558 ] ) ; if ( tmp_rdc . VAR_671 <S2SV_ModEnd> == VAR_637 || <S2SV_ModStart> == VAR_637 || tmp_rdc . VAR_673 <S2SV_ModEnd> == VAR_639 ) <S2SV_ModStart> VAR_639 ) { METHOD_63 ( & VAR_680 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } VAR_680 . VAR_671 += tmp_rdc . VAR_671 ; VAR_680 . VAR_673 += tmp_rdc . VAR_673 <S2SV_ModEnd> ; } break <S2SV_ModStart> 0 ) ; break ; <S2SV_ModStart> ; if ( VAR_680 . VAR_671 <S2SV_ModEnd> < VAR_637 ) <S2SV_ModStart> VAR_637 ) { VAR_680 . VAR_671 += VAR_664 <S2SV_ModEnd> -> VAR_588 [ <S2SV_ModStart> VAR_451 ] ; VAR_680 . rdcost <S2SV_ModEnd> = METHOD_55 ( <S2SV_ModStart> -> VAR_595 , VAR_680 . VAR_671 , VAR_680 . VAR_673 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_590 ) ; VAR_682 . VAR_671 = 0 ; VAR_682 . VAR_673 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; METHOD_58 ( VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> , VAR_670 ) ; VAR_677 -> VAR_685 = VAR_590 <S2SV_ModStart> 1 ) ; TYPE_58 tmp_rdc <S2SV_ModEnd> ; TYPE_52 VAR_630 <S2SV_ModStart> ) continue ; METHOD_48 ( VAR_619 , VAR_667 , VAR_668 , VAR_629 , VAR_630 , VAR_631 , VAR_632 , VAR_670 ) ; VAR_677 -> VAR_686 [ VAR_558 ] -> VAR_685 = VAR_578 ; METHOD_49 ( VAR_664 , VAR_676 , VAR_619 , VAR_667 + VAR_570 , VAR_668 + VAR_572 , & tmp_rdc , VAR_573 , & VAR_677 -> VAR_686 [ VAR_558 ] -> VAR_684 , VAR_639 ) ; METHOD_58 ( VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> VAR_670 ) ; if ( tmp_rdc . VAR_671 <S2SV_ModEnd> == VAR_637 || <S2SV_ModStart> == VAR_637 || tmp_rdc . VAR_673 <S2SV_ModEnd> == VAR_639 ) <S2SV_ModStart> VAR_639 ) { METHOD_63 ( & VAR_682 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> break ; } VAR_682 . VAR_671 += tmp_rdc . VAR_671 ; VAR_682 . VAR_673 += tmp_rdc . VAR_673 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_664 , VAR_675 , VAR_678 <S2SV_ModEnd> , VAR_666 , <S2SV_ModStart> 0 , VAR_573 , VAR_677 -> VAR_686 [ VAR_558 ] <S2SV_ModStart> VAR_573 ) ; VAR_682 . VAR_671 += VAR_664 <S2SV_ModEnd> -> VAR_588 [ <S2SV_ModStart> ; if ( VAR_682 . VAR_671 <S2SV_ModEnd> < VAR_637 ) <S2SV_ModStart> VAR_637 ) { VAR_682 . VAR_671 += VAR_664 <S2SV_ModEnd> -> VAR_588 [ <S2SV_ModStart> VAR_590 ] ; VAR_682 . rdcost <S2SV_ModEnd> = METHOD_55 ( <S2SV_ModStart> -> VAR_595 , VAR_682 . VAR_671 , VAR_682 . VAR_673 ) ; } } if ( VAR_680 . rdcost < VAR_682 . rdcost <S2SV_ModEnd> ) { VAR_600 <S2SV_ModStart> >= VAR_618 ) VAR_677 -> VAR_685 = VAR_451 ; VAR_682 = VAR_680 ; } if ( VAR_681 . rdcost < VAR_682 . rdcost <S2SV_ModEnd> ) { if <S2SV_ModStart> >= VAR_618 ) VAR_677 -> VAR_685 = VAR_578 ; VAR_682 = VAR_681 <S2SV_ModEnd> ; } METHOD_58 <S2SV_ModStart> } METHOD_58 ( VAR_619 <S2SV_ModEnd> , VAR_667 , <S2SV_ModStart> ) METHOD_59 ( VAR_682 . VAR_671 <S2SV_ModEnd> < VAR_637 && <S2SV_ModStart> < VAR_637 && VAR_682 . VAR_673 <S2SV_ModEnd> < VAR_639 ) <S2SV_ModStart> VAR_643 ) ; METHOD_62 ( VAR_664 , VAR_675 , VAR_678 , VAR_666 , VAR_667 , VAR_668 , VAR_669 , VAR_670 , VAR_677 ) ; } * VAR_671 = VAR_682 . VAR_671 <S2SV_ModEnd> ; * VAR_673 <S2SV_ModStart> * VAR_673 = VAR_682 . VAR_673 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_53 , "<S2SV_blank>len=%u<S2SV_blank>method=%s" <S2SV_ModEnd> , VAR_51 - <S2SV_ModStart> ; if ( VAR_51 > 4 ) { if ( <S2SV_ModEnd> VAR_53 -> VAR_44 <S2SV_ModStart> VAR_53 -> VAR_44 > 1 <S2SV_ModEnd> ) { METHOD_12 <S2SV_ModStart> VAR_53 -> VAR_44 <S2SV_ModEnd> ) { if <S2SV_ModStart> VAR_52 ; } }
<S2SV_ModStart> * VAR_145 ; TYPE_33 VAR_218 , VAR_219 , VAR_45 , VAR_227 , VAR_228 , VAR_229 , VAR_230 ; TYPE_36 VAR_193 , VAR_194 ; TYPE_33 VAR_159 <S2SV_ModEnd> ; VAR_194 = <S2SV_ModStart> VAR_218 = ( TYPE_33 ) TYPE_98 -> TYPE_99 [ 0 ] . TYPE_71 ; VAR_219 = ( TYPE_33 ) TYPE_98 -> TYPE_99 [ 0 ] . TYPE_75 ; VAR_45 = VAR_218 * VAR_219 ; VAR_195 = TYPE_98 -> TYPE_99 [ 0 ] . VAR_208 ; VAR_196 = TYPE_98 -> TYPE_99 [ 1 ] . VAR_208 ; VAR_197 = TYPE_98 -> TYPE_99 [ 2 ] . VAR_208 ; VAR_203 = VAR_222 = ( TYPE_36 * ) METHOD_3 ( sizeof ( TYPE_36 ) * VAR_45 ) ; VAR_206 = VAR_224 <S2SV_ModEnd> = ( TYPE_36 <S2SV_ModStart> TYPE_36 ) * <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> VAR_45 ) ; VAR_209 = VAR_226 <S2SV_ModEnd> = ( TYPE_36 <S2SV_ModStart> TYPE_36 ) * <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> goto VAR_220 ; VAR_227 = TYPE_98 -> VAR_231 & 1U ; VAR_228 = VAR_218 - VAR_227 ; VAR_229 = TYPE_98 -> VAR_232 & 1U ; VAR_230 = VAR_219 - VAR_229 ; if ( VAR_229 > 0U ) { TYPE_33 VAR_191 ; for ( VAR_191 = 0 ; VAR_191 < VAR_218 ; ++ VAR_191 ) { METHOD_12 ( VAR_193 , VAR_194 , * VAR_195 , 0 , 0 , VAR_222 , VAR_224 , VAR_226 ) ; ++ VAR_195 ; ++ VAR_222 ; ++ VAR_224 ; ++ VAR_226 ; } } <S2SV_ModStart> VAR_159 < ( VAR_230 <S2SV_ModEnd> & ~ ( <S2SV_ModStart> & ~ ( TYPE_33 <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> 2U ) { TYPE_33 VAR_191 ; <S2SV_ModStart> + VAR_218 ; if ( VAR_227 > 0U ) { METHOD_12 ( VAR_193 , VAR_194 , * VAR_195 , 0 , 0 , VAR_222 , VAR_224 , VAR_226 ) ; ++ VAR_195 ; ++ VAR_222 ; ++ VAR_224 ; ++ VAR_226 ; METHOD_12 ( VAR_193 , VAR_194 , * VAR_145 , * VAR_196 , * VAR_197 , VAR_146 , VAR_147 , VAR_148 ) ; ++ VAR_145 ; ++ VAR_146 ; ++ VAR_147 ; ++ VAR_148 ; } <S2SV_ModStart> VAR_191 < ( VAR_228 <S2SV_ModEnd> & ~ ( <S2SV_ModStart> & ~ ( TYPE_33 <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> ( VAR_191 < VAR_228 <S2SV_ModEnd> ) { METHOD_12 <S2SV_ModStart> ( VAR_159 < VAR_230 ) { TYPE_33 VAR_191 ; <S2SV_ModEnd> for ( VAR_191 <S2SV_ModStart> & ~ ( TYPE_33 <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> = VAR_209 ; <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> . TYPE_71 = TYPE_98 -> TYPE_99 [ 2 ] . TYPE_71 = TYPE_98 -> TYPE_99 [ 0 ] . TYPE_71 ; <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> . TYPE_75 = <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> 2 ] . TYPE_75 = TYPE_98 -> TYPE_99 [ 0 ] . TYPE_75 ; TYPE_98 -> TYPE_99 [ 1 ] . TYPE_88 = <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> 2 ] . TYPE_88 = TYPE_98 -> TYPE_99 [ 0 ] . TYPE_88 ; <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> 1 ] . TYPE_100 = <S2SV_ModEnd> TYPE_98 -> TYPE_99 <S2SV_ModStart> 2 ] . <S2SV_ModEnd> TYPE_100 = TYPE_98 <S2SV_ModStart> ; TYPE_98 -> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> ; return ; <S2SV_ModStart> ; VAR_220 : <S2SV_ModEnd> METHOD_20 ( VAR_222 <S2SV_ModStart> VAR_222 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_224 <S2SV_ModStart> VAR_224 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_226
<S2SV_ModStart> <S2SV_null> <S2SV_null> static VAR_25 <S2SV_ModStart> = 0 ; VAR_24 - VAR_22 >= 8 * 32 <S2SV_ModEnd> ; VAR_22 += <S2SV_ModStart> ] ; } for ( ; VAR_22 < VAR_24 ; VAR_22 += 32 ) { ( TYPE_12 ) VAR_23 [ VAR_22 ] ; }
<S2SV_ModStart> & VAR_295 , sizeof ( TYPE_30 ) <S2SV_ModEnd> , & VAR_335 <S2SV_ModStart> || VAR_335 != sizeof ( TYPE_30 ) <S2SV_ModEnd> ) { METHOD_66 <S2SV_ModStart> & VAR_295 , sizeof ( TYPE_30 ) <S2SV_ModEnd> ) ) {
<S2SV_ModStart> VAR_8 ) { TYPE_2 VAR_10 ; if ( METHOD_3 ( VAR_7 , VAR_8 , & VAR_10 ) ) METHOD_4 ( ) ; TYPE_3 * VAR_9 ; <S2SV_ModEnd> VAR_9 = METHOD_1 <S2SV_ModStart> = METHOD_1 ( VAR_10 <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0' , ( VAR_10 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_39 ) ; if ( ! METHOD_17 ( VAR_36 , "HASHSEED" ) ) { VAR_37 . VAR_41 = 1 ; VAR_37 . VAR_42 = METHOD_18 ( VAR_39 ) ; } else { VAR_37 . VAR_41 = 0 ; }
<S2SV_ModStart> VAR_152 == VAR_123 && VAR_155 . VAR_147 == 17 <S2SV_ModStart> , METHOD_17 ( "(%d)<S2SV_blank>Unhandeled<S2SV_blank>control<S2SV_blank>packet<S2SV_blank>type:<S2SV_blank>%d,<S2SV_blank>length:<S2SV_blank>%d" <S2SV_ModEnd> ) , VAR_169 <S2SV_ModStart> VAR_155 . VAR_152 , VAR_155 . VAR_147
<S2SV_ModStart> , VAR_316 ; TYPE_4 VAR_327 = <S2SV_ModEnd> ( METHOD_3 ( <S2SV_ModStart> -> VAR_16 ) == VAR_17 ) ? 64 : 32 ; <S2SV_ModEnd> VAR_239 = VAR_222 <S2SV_ModStart> if ( VAR_316 >= VAR_327 <S2SV_ModEnd> ) { METHOD_35 <S2SV_ModStart> if ( VAR_316 >= VAR_327 <S2SV_ModEnd> ) { METHOD_35 <S2SV_ModStart> break ; } if ( METHOD_3 ( VAR_323 -> VAR_16 ) != VAR_17 ) { METHOD_5 ( VAR_326 , 4 ) ; METHOD_5 ( & VAR_222 , 4 ) ; }
<S2SV_ModStart> ; } } if ( METHOD_63 ( VAR_307 ) != VAR_302 ) { METHOD_64 ( VAR_280 , VAR_119 , "UnexpectedEndOfFile" , VAR_307 -> VAR_34 ) ; break ; }
<S2SV_ModStart> VAR_712 ) { VAR_910 -> VAR_845 = ( TYPE_153 * ) METHOD_173 ( <S2SV_ModEnd> VAR_910 -> VAR_815 <S2SV_ModStart> VAR_910 -> VAR_815 + 1 , sizeof ( * VAR_910 -> VAR_845 ) ) ; if ( VAR_910 -> VAR_845 == ( TYPE_153 * ) VAR_897 <S2SV_ModEnd> ) METHOD_202 ( <S2SV_ModStart> ) break ; if ( ( METHOD_214 ( VAR_911 <S2SV_ModEnd> , VAR_910 -> <S2SV_ModStart> VAR_910 -> VAR_866 ) == VAR_906 ) || ( METHOD_214 ( VAR_912 <S2SV_ModStart> VAR_910 -> VAR_868 ) <S2SV_ModEnd> == VAR_906 ) <S2SV_ModStart> == VAR_906 ) ) METHOD_202 ( VAR_913 , "WidthOrHeightExceedsLimit" <S2SV_ModEnd> ) ; VAR_905
<S2SV_ModStart> , VAR_28 , VAR_28 -> VAR_24 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( VAR_112 = METHOD_5 ( VAR_23 , VAR_109 <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> VAR_137 ) { METHOD_31 <S2SV_ModEnd> ( VAR_125 ) <S2SV_ModStart> VAR_125 ) ; METHOD_32 <S2SV_ModEnd> ( VAR_125 , <S2SV_ModStart> VAR_137 ) { METHOD_31 <S2SV_ModEnd> ( VAR_125 ) <S2SV_ModStart> VAR_125 ) ; METHOD_32 <S2SV_ModEnd> ( VAR_125 , <S2SV_ModStart> METHOD_25 ( VAR_130 ) ; } METHOD_19 ( VAR_125 , & VAR_137 -> VAR_128 . VAR_148 , VAR_113 ) { METHOD_31 ( VAR_125 ) ; METHOD_32 ( VAR_125 , VAR_147 ) ; } METHOD_19 ( VAR_125 , & VAR_137 -> VAR_128 . VAR_149 , VAR_113 ) { METHOD_31 ( VAR_125 ) ; METHOD_32 ( VAR_125 , VAR_147
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_22 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ; TYPE_4 VAR_46 ; TYPE_10 VAR_80 ; TYPE_10 * VAR_98 ; TYPE_23 VAR_110 = 0 ; if ( ! VAR_106 ) return VAR_111 ; VAR_46 <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> VAR_80 = VAR_106 <S2SV_ModStart> - 1 ; <S2SV_ModEnd> VAR_98 = VAR_106 <S2SV_ModStart> VAR_106 -> VAR_11 ; if ( ! VAR_98 ) return VAR_111 <S2SV_ModStart> - VAR_91 ; if ( VAR_110 + 4 > VAR_106 -> VAR_112 ) return VAR_111 ; VAR_110 += 4 ; <S2SV_ModStart> ; } } return VAR_113 ;
<S2SV_ModStart> 0 ) { if ( VAR_373 >= VAR_374 -> VAR_344 ) return VAR_347 ;
<S2SV_ModStart> VAR_24 ) ; METHOD_7 ( VAR_15 ) ;
<S2SV_ModStart> ( VAR_37 = METHOD_9 ( <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> VAR_14 ) ) { <S2SV_ModStart> VAR_16 |= VAR_17 <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> ) ; } METHOD_3 ( & VAR_21 -> VAR_19 , VAR_20 ) ; }
<S2SV_ModStart> VAR_7 ) { if ( VAR_5 < 0 || VAR_5 >= VAR_3 -> VAR_8 ) return ;
<S2SV_ModStart> : if ( METHOD_37 <S2SV_ModEnd> ( VAR_48 )
<S2SV_ModStart> TYPE_6 METHOD_0 ( TYPE_7 <S2SV_ModEnd> * VAR_20 , <S2SV_ModStart> 2 ] , TYPE_8 <S2SV_ModEnd> * VAR_18 , <S2SV_ModStart> * VAR_18 , TYPE_8 <S2SV_ModEnd> VAR_16 ) { <S2SV_ModStart> ) { const TYPE_8 <S2SV_ModEnd> VAR_21 = METHOD_1 <S2SV_ModStart> * 256 ; METHOD_8 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> = VAR_21 ; METHOD_9 <S2SV_ModEnd> ( VAR_20 ,
<S2SV_ModStart> 1 ) ; if ( METHOD_3 ( VAR_49 ) == 0 ) return - 1 ;
<S2SV_ModStart> * VAR_57 ; TYPE_15 VAR_58 ; if ( METHOD_6 ( VAR_36 , sizeof ( TYPE_13 ) ) ) { return VAR_56 ; } else { VAR_58 = VAR_36 * sizeof ( TYPE_13 ) ; } VAR_57 = ( TYPE_7 * ) METHOD_7 ( sizeof ( TYPE_7 ) ) ; if ( ! VAR_57 ) { return VAR_56 ; } VAR_57 -> VAR_10 = VAR_36 ; VAR_57 -> VAR_13 = VAR_28 ; if ( METHOD_6 ( VAR_28 , sizeof ( TYPE_10 ) ) ) { METHOD_10 ( VAR_57 ) ; return VAR_56 ; } VAR_57 -> VAR_54 = ( TYPE_10 * ) METHOD_7 ( VAR_28 * sizeof ( TYPE_10 ) ) ; if ( VAR_57 -> VAR_54 == VAR_56 ) { METHOD_10 ( VAR_57 ) ; return VAR_56 ; } for ( VAR_47 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_47 < VAR_28 <S2SV_ModStart> VAR_47 ++ ) <S2SV_ModEnd> { VAR_57 -> <S2SV_ModStart> ) METHOD_7 ( VAR_58 ) ; if ( <S2SV_ModEnd> VAR_57 -> VAR_54 <S2SV_ModStart> TYPE_14 VAR_51 ; <S2SV_ModEnd> for ( VAR_51 <S2SV_ModStart> 0 ; VAR_51 < <S2SV_ModEnd> VAR_47 ; VAR_51
<S2SV_ModStart> -> VAR_44 += 1LL <S2SV_ModEnd> << VAR_45 ;
<S2SV_ModStart> -> VAR_108 = METHOD_12 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_3 <S2SV_ModEnd> * VAR_7 ,
<S2SV_ModStart> ; TYPE_8 VAR_293 ; if ( VAR_382 -> VAR_385 ) return VAR_386 <S2SV_ModStart> ) ) { METHOD_34 ( VAR_387 , VAR_269 , ( "[FLACDmx]<S2SV_blank>invalid<S2SV_blank>FLAC<S2SV_blank>magic\\n" ) ) ; VAR_382 -> VAR_385 = VAR_350 ; VAR_382 -> VAR_380 = 0 ; if ( VAR_368 ) METHOD_53 ( VAR_382 -> VAR_383 ) ; return VAR_386 ; <S2SV_ModStart> VAR_251 ) break ; } if ( ! VAR_256 ) { METHOD_34 ( VAR_387 , VAR_269 , ( "[FLACDmx]<S2SV_blank>invalid<S2SV_blank>FLAC<S2SV_blank>header\\n" ) ) ; VAR_382 -> VAR_385 = VAR_350 ; VAR_382 -> VAR_380 = 0 ; if ( VAR_368 ) METHOD_53 ( VAR_382 -> VAR_383 ) ; return VAR_386
<S2SV_ModStart> ( VAR_355 & ( VAR_367 | VAR_10 ) ) == ( VAR_367 | VAR_10 ) ) return METHOD_109 ( - VAR_36 ) ; if ( ( VAR_355 &
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_36 <S2SV_ModEnd> ; TYPE_2 VAR_41 <S2SV_ModStart> 0 ; } <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_41 = ( METHOD_6 ( VAR_36 ) -> VAR_16 <S2SV_ModEnd> != VAR_35 )
<S2SV_ModStart> VAR_99 ) ; if ( VAR_73 -> VAR_103 < 1 ) { METHOD_11 ( VAR_101 ) ; METHOD_11 ( VAR_62 ) ; return - VAR_63 ; }
<S2SV_ModStart> VAR_299 ) ; if ( ! VAR_288 && ! VAR_289 && ( 0 == ( VAR_348 & 1 ) ) ) { return VAR_352 ; }
<S2SV_ModStart> : if ( METHOD_123 ( VAR_459 ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( METHOD_123 ( VAR_459 ) ) { <S2SV_ModEnd> return ; }
<S2SV_ModStart> VAR_86 : { TYPE_7 VAR_247 ; <S2SV_ModStart> ) break ; VAR_247 <S2SV_ModEnd> = VAR_246 & <S2SV_ModStart> ; if ( VAR_247 <S2SV_ModEnd> & ( sizeof <S2SV_ModStart> ) break ; if ( METHOD_19 <S2SV_ModEnd> ( VAR_244 -> <S2SV_ModStart> -> VAR_230 , & VAR_244 -> VAR_231 . VAR_248 , VAR_246 & ~ 1ULL ) ) VAR_244 -> VAR_231 . VAR_249 = VAR_3 ; else VAR_244 -> VAR_231 . VAR_249 = VAR_177 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> 2 ) { TYPE_12 VAR_82 , VAR_281 , VAR_283 , VAR_265 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_82 = METHOD_11 <S2SV_ModStart> VAR_485 ) ; <S2SV_ModEnd> VAR_281 = METHOD_36 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_283 = METHOD_36 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_265 = METHOD_11 <S2SV_ModStart> , VAR_485 ) ; if ( VAR_478 -> VAR_440 ) { if ( VAR_82 != VAR_478 -> VAR_82 || VAR_281 != VAR_478 -> VAR_281 || VAR_283 != VAR_478 -> VAR_283 || VAR_265 != VAR_478 -> VAR_265 ) { METHOD_37 ( VAR_478 -> VAR_455 , VAR_456 , "Invalid<S2SV_blank>change<S2SV_blank>of<S2SV_blank>global<S2SV_blank>parameters\\n" ) ; return VAR_457 ; } } VAR_478 -> VAR_82 = VAR_82 ; VAR_478 -> VAR_281 = VAR_281 ; VAR_478 -> VAR_283 = VAR_283 ; VAR_478 -> VAR_265 = VAR_265
<S2SV_ModStart> TYPE_3 VAR_53 , VAR_62 , <S2SV_ModStart> VAR_29 ) return ; VAR_62 = ( VAR_59 -> VAR_55 ) ? METHOD_6 ( VAR_59 -> VAR_55 ) : 0 <S2SV_ModStart> } } } VAR_51 = ( VAR_59 -> VAR_55 ) ? METHOD_6 ( VAR_59 -> VAR_55 ) : 0 ; if ( VAR_59 -> VAR_55 && ( VAR_51 != VAR_62 ) ) METHOD_9 ( VAR_59 , VAR_62 , VAR_51 ) ;
<S2SV_ModStart> VAR_12 ) { METHOD_8 ( & VAR_12 -> VAR_13 ) ; <S2SV_ModStart> METHOD_2 ( VAR_12 ) ; METHOD_9 ( & VAR_12 -> VAR_13
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_15 * VAR_23 = ( struct STRUCT_OR_UNION_15 <S2SV_ModEnd> * ) METHOD_3 <S2SV_ModStart> VAR_20 ) ; METHOD_16 ( VAR_23 <S2SV_ModEnd> , 1 )
<S2SV_ModStart> STRUCT_OR_UNION_4 * VAR_25 ; TYPE_1 VAR_26 <S2SV_ModStart> = 0 ; VAR_26 = <S2SV_ModEnd> METHOD_3 ( VAR_21 <S2SV_ModStart> & VAR_22 ) ; if ( VAR_26 <S2SV_ModStart> ) ; return METHOD_2 ( VAR_26 ) <S2SV_ModEnd> ; } return
<S2SV_ModStart> ( VAR_6 > 5 <S2SV_ModEnd> ) METHOD_3 ( <S2SV_ModStart> ( VAR_6 > 7 <S2SV_ModEnd> ) METHOD_3 (
<S2SV_ModStart> ; TYPE_24 VAR_293 ; METHOD_54 ( TYPE_70 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_16 , <S2SV_ModStart> -- ; } <S2SV_ModEnd> VAR_16 -> VAR_17
<S2SV_ModStart> if ( VAR_118 > <S2SV_ModEnd> VAR_511 ) { <S2SV_ModStart> VAR_511 ) { return ;
<S2SV_ModStart> TYPE_6 VAR_46 , VAR_53 ; VAR_53 = METHOD_4 ( METHOD_8 ( VAR_48 ) , <S2SV_ModEnd> ( TYPE_6 ) <S2SV_ModStart> ( VAR_8 ) ) <S2SV_ModStart> ) METHOD_5 ( VAR_53 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VAR_42 ) ; VAR_46 = VAR_48 -> VAR_46 ; for ( VAR_29 = VAR_48 ; VAR_29 != ( TYPE_11 * ) VAR_42 ; VAR_29 = VAR_29 -> VAR_29 ) VAR_46 = METHOD_4 ( VAR_29 -> VAR_46 , VAR_46 ) ; for ( VAR_50 = 0 <S2SV_ModEnd> ; VAR_50 < <S2SV_ModStart> ( TYPE_15 ) VAR_53 <S2SV_ModEnd> ; VAR_50 ++
<S2SV_ModStart> 1 ; } if ( VAR_92 -> VAR_61 == VAR_102 && VAR_92 -> VAR_103 & 0x7 ) { METHOD_22 ( VAR_104 , VAR_105 ) ; return - 1 ; }
<S2SV_ModStart> VAR_10 , struct STRUCT_OR_UNION_16 * VAR_42 , struct <S2SV_ModStart> STRUCT_OR_UNION_15 -> VAR_22 ) ; if ( STRUCT_OR_UNION_15 -> VAR_31 ) METHOD_17 ( VAR_39 , ",\\n\\"method\\":\\"%s\\"" , STRUCT_OR_UNION_15 -> VAR_31 ) ; else if ( VAR_42 -> VAR_31 ) METHOD_17 ( VAR_39 , ",\\n\\"method\\":\\"%s\\"" , VAR_42 -> VAR_31 <S2SV_ModStart> ( STRUCT_OR_UNION_15 -> <S2SV_ModEnd> VAR_34 ) METHOD_17
<S2SV_ModStart> -> VAR_56 -> <S2SV_ModEnd> VAR_17 -> METHOD_3 <S2SV_ModStart> ( VAR_61 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_44 ) ; return VAR_65 <S2SV_ModEnd> ; } } <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> return VAR_65 ;
<S2SV_ModStart> VAR_223 == VAR_195 || VAR_223 == VAR_224 ) { METHOD_46 ( VAR_225 -> VAR_226 ) ; if ( VAR_225 -> VAR_227 ) { METHOD_47 ( VAR_225 -> VAR_226 ) ; METHOD_48 ( & VAR_225 -> VAR_228 , VAR_229 ) ; return ; } if ( VAR_223 == VAR_195 <S2SV_ModStart> goto VAR_75 ; goto VAR_204 ; } METHOD_49 ( & VAR_225 -> VAR_228 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; METHOD_47 ( VAR_225 -> VAR_226 ) ; <S2SV_ModStart> ) ) ; if ( VAR_223 == VAR_195 || VAR_223 == VAR_224 ) METHOD_47 ( VAR_225 -> VAR_226 ) ; METHOD_48 ( & VAR_225 -> VAR_228 , VAR_229 ) ;
<S2SV_ModStart> ; unsigned TYPE_1 * VAR_15 ; TYPE_2 VAR_29 ; VAR_15 = METHOD_6 ( 3 , VAR_30 ) ; if ( ! VAR_15 ) return - VAR_31 <S2SV_ModEnd> ; VAR_29 = <S2SV_ModStart> ) ; } METHOD_7 ( VAR_15 ) ;
<S2SV_ModStart> VAR_31 ) ; METHOD_8 ( '<S2SV_blank>' , VAR_37 ) ; METHOD_9 ( <S2SV_ModEnd> VAR_35 -> VAR_34 <S2SV_ModStart> -> VAR_34 , VAR_37 ) ; METHOD_8 ( '=' , VAR_37 ) ; METHOD_10 ( <S2SV_ModStart> VAR_35 -> VAR_36 , VAR_37
<S2SV_ModStart> { if ( METHOD_17 ( VAR_65 , <S2SV_ModEnd> VAR_37 -> VAR_38
<S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_112 , VAR_113 , VAR_118 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , TYPE_4 VAR_12 , TYPE_10 VAR_28 <S2SV_ModStart> VAR_27 , 1.0 , VAR_28 <S2SV_ModStart> VAR_24 ) { <S2SV_ModEnd> if ( METHOD_2 <S2SV_ModStart> VAR_24 , 1.0 , VAR_28 <S2SV_ModStart> <= VAR_25 ) { VAR_26 = VAR_24 ; break ; } <S2SV_ModEnd> } return VAR_26
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> ; VAR_38 = METHOD_13 <S2SV_ModEnd> ( VAR_70 ,
<S2SV_ModStart> -> VAR_4 ; METHOD_2 ( & VAR_9 -> VAR_11 -> VAR_12 ) ; <S2SV_ModStart> VAR_10 ) ; METHOD_3 ( & VAR_9 -> VAR_11 -> VAR_12 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_8 VAR_149 ; METHOD_37 ( & VAR_149 , 0 , sizeof ( VAR_149 ) ) ; <S2SV_ModStart> struct STRUCT_OR_UNION_9 VAR_161 ; METHOD_37 ( & VAR_161 , 0 , sizeof ( VAR_161 ) )
<S2SV_ModStart> = VAR_3 ; VAR_1 -> VAR_4 = VAR_5 ;
<S2SV_ModStart> TYPE_12 VAR_118 ; <S2SV_ModEnd> unsigned TYPE_13 VAR_103 <S2SV_ModStart> VAR_158 ; } <S2SV_ModEnd> VAR_113 = METHOD_16 <S2SV_ModStart> VAR_112 ) ; METHOD_20 ( STRUCT_OR_UNION_38 ) ; METHOD_21 ( STRUCT_OR_UNION_38 ) ; down_write ( & METHOD_39 ( STRUCT_OR_UNION_38 ) -> VAR_159 ) ; <S2SV_ModStart> STRUCT_OR_UNION_38 ) ; <S2SV_ModEnd> VAR_158 = METHOD_22 <S2SV_ModStart> VAR_121 , VAR_122 ) ; METHOD_40 ( & METHOD_39 ( STRUCT_OR_UNION_38 ) -> VAR_159
<S2SV_ModStart> == VAR_31 ) { <S2SV_ModStart> VAR_23 ) ; VAR_59 -> VAR_65 &= ~ VAR_66 ; }
<S2SV_ModStart> ( VAR_15 ) ; if ( ! VAR_36 -> VAR_42 -> VAR_43 ) return VAR_44
<S2SV_ModStart> ; if ( VAR_51 < 10 || VAR_51 > 20 ) return - 1 ; if (
<S2SV_ModStart> VAR_92 -> VAR_39 + <S2SV_ModEnd> 1 ) METHOD_6
<S2SV_ModStart> = 0 ; VAR_67 = METHOD_22 ( VAR_64 , "PrivateReports" ) ; if ( VAR_67 ) { VAR_70 = METHOD_23 ( VAR_67 ) ; METHOD_24 ( VAR_64 , "PrivateReports" ) ; }
<S2SV_ModStart> if ( VAR_97 && VAR_135 >= VAR_139
<S2SV_ModStart> VAR_17 == VAR_48 && ( VAR_46 -> VAR_49 < VAR_46 -> VAR_50 )
<S2SV_ModStart> TYPE_9 VAR_59 ; VAR_115 = 0 ; VAR_114 = 0 ; <S2SV_ModStart> "cannot<S2SV_blank>get<S2SV_blank>header\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } METHOD_8 <S2SV_ModStart> "cannot<S2SV_blank>get<S2SV_blank>info\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } METHOD_8 <S2SV_ModStart> 1 , ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%ld;<S2SV_blank>width<S2SV_blank>%ld;<S2SV_blank>height<S2SV_blank>%ld;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%ld;<S2SV_blank>siz<S2SV_blank>%ld;<S2SV_blank>hres<S2SV_blank>%ld;<S2SV_blank>vres<S2SV_blank>%ld;<S2SV_blank>numcolors<S2SV_blank>%ld;<S2SV_blank>" "mincolors<S2SV_blank>%ld\\n" , JAS_CAST ( TYPE_9 <S2SV_ModEnd> , VAR_114 -> <S2SV_ModStart> VAR_114 -> VAR_27 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_81 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_85 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_33 ) , JAS_CAST ( TYPE_9 , <S2SV_ModEnd> VAR_114 -> VAR_35 <S2SV_ModStart> VAR_114 -> VAR_35 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_37 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_39 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_41 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_43 ) , JAS_CAST ( TYPE_9 , <S2SV_ModEnd> VAR_114 -> VAR_45 <S2SV_ModStart> VAR_114 -> VAR_45 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_47 ) ) ) ; if ( VAR_114 -> VAR_81 < 0 || VAR_114 -> VAR_85 < 0 || VAR_114 -> VAR_33 < 0 || VAR_114 -> VAR_35 < 0 || VAR_114 -> VAR_39 < 0 || VAR_114 -> VAR_41 < 0 || VAR_114 -> VAR_43 < 0 ) { METHOD_14 ( "corrupt<S2SV_blank>bit<S2SV_blank>stream\\n" ) ; goto VAR_116 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> "error:<S2SV_blank>unsupported<S2SV_blank>BMP<S2SV_blank>encoding\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> "error:<S2SV_blank>possibly<S2SV_blank>bad<S2SV_blank>bitmap<S2SV_blank>offset?\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_116 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_116 ; } <S2SV_ModStart> VAR_114 ) ; return VAR_115 ; VAR_116 : if ( VAR_114 ) { METHOD_33 ( VAR_114 ) ; } if ( VAR_115 ) { <S2SV_ModStart> VAR_115 ) ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> ; TYPE_5 VAR_41 ; if ( METHOD_6 ( ! METHOD_5 ( VAR_4 ) ) ) return - VAR_42
<S2SV_ModStart> ( VAR_51 == VAR_92 <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto VAR_93 ; <S2SV_ModEnd> if ( METHOD_7 <S2SV_ModStart> > sizeof ( VAR_73 <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto VAR_84 ; VAR_73 = 0 ; for ( <S2SV_ModEnd> ; VAR_67 > <S2SV_ModStart> ] ; } VAR_93 : if ( VAR_73 > VAR_62 - VAR_91 ) goto VAR_84 ;
<S2SV_ModStart> ; VAR_346 = METHOD_87 <S2SV_ModEnd> ( VAR_341 *
<S2SV_ModStart> TYPE_3 VAR_17 ; TYPE_4 TYPE_5 * VAR_18 = VAR_19 ; <S2SV_ModStart> VAR_8 ; } VAR_18 = METHOD_6 ( VAR_13 , VAR_20 , VAR_19 ) ; <S2SV_ModStart> ( VAR_13 ) && VAR_18 != VAR_19
<S2SV_ModStart> -> VAR_61 , VAR_60 -> VAR_83 ,
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_12 , <S2SV_ModStart> == 1 ) METHOD_4 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> <= 10 ) METHOD_5 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> ) ; else METHOD_6 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> ( ) { METHOD_6 ( "heap_overflow_1.tga" ) ; METHOD_6 ( "heap_overflow_2.tga" <S2SV_ModEnd> ) ; return
<S2SV_ModStart> if ( VAR_44 != VAR_28 ) { <S2SV_ModEnd> METHOD_5 ( & <S2SV_ModStart> -> VAR_38 , "reading<S2SV_blank>line<S2SV_blank>status<S2SV_blank>failed:<S2SV_blank>%d\\n" , VAR_44 ) ; if ( VAR_44 >= 0 ) VAR_44 = - VAR_45 ; } <S2SV_ModEnd> else { VAR_42
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 * VAR_9 , <S2SV_ModStart> VAR_5 ) { if ( ! METHOD_2 ( * VAR_7 , VAR_8 ) ) { return 0 ; }
<S2SV_ModStart> VAR_62 ) ; <S2SV_ModEnd> if ( VAR_62 <S2SV_ModStart> VAR_72 ) ; VAR_72 -> VAR_74 = VAR_75 ; METHOD_11 ( VAR_72 -> VAR_37 , VAR_61 , VAR_61 , METHOD_14 ) ; METHOD_11 ( VAR_72 -> VAR_41 , VAR_61 , VAR_61 , METHOD_14 ) ; METHOD_11 ( VAR_72 -> VAR_45 , VAR_61 , VAR_61 , METHOD_14 ) ; VAR_72 -> VAR_74 = VAR_73 ;
<S2SV_ModStart> TYPE_6 VAR_6 , TYPE_7 <S2SV_ModEnd> * VAR_11 ) <S2SV_ModStart> { if ( METHOD_4 <S2SV_ModEnd> ( & VAR_18 <S2SV_ModStart> TYPE_6 VAR_23 = METHOD_5 <S2SV_ModEnd> ( VAR_11 , <S2SV_ModStart> VAR_18 -> VAR_13 -> <S2SV_ModEnd> VAR_14 [ VAR_21 <S2SV_ModStart> ] ) ; TYPE_8 * VAR_19 = VAR_9 -> VAR_19 ; if ( VAR_19 ) ++ VAR_19 -> <S2SV_ModEnd> VAR_23 [ VAR_21
<S2SV_ModStart> , VAR_8 ) > 0 ? : 0
<S2SV_ModStart> VAR_9 ) ; <S2SV_ModEnd> if ( VAR_11
<S2SV_ModStart> TYPE_6 VAR_37 = <S2SV_ModEnd> VAR_8 -> VAR_6
<S2SV_ModStart> 0 ) { METHOD_13 ( & STRUCT_OR_UNION_13 -> VAR_60 ) ; METHOD_14 ( & VAR_58 -> VAR_59 ) ; METHOD_15 ( & STRUCT_OR_UNION_13 -> VAR_60 ) ; <S2SV_ModStart> METHOD_12 ( VAR_58 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> * VAR_56 ; struct STRUCT_OR_UNION_0 VAR_58 = * VAR_50 ; if ( ( VAR_52 < 0 ) || ( ( TYPE_4 ) VAR_52 >= ( VAR_59 / 2 ) ) ) { METHOD_7 ( VAR_43 , VAR_15 , "rdp_in_unistr(),<S2SV_blank>length<S2SV_blank>of<S2SV_blank>unicode<S2SV_blank>data<S2SV_blank>is<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." ) ; METHOD_9 ( ) ; } if ( ! METHOD_10 ( VAR_50 , VAR_52 ) ) { METHOD_11 ( "rdp_in_unistr(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>unicode<S2SV_blank>data<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_58 ) ; }
<S2SV_ModStart> TYPE_4 VAR_46 = METHOD_9 ( <S2SV_ModStart> VAR_31 . VAR_32 , VAR_16 & 0xffff )
<S2SV_ModStart> != VAR_271 && VAR_178 > VAR_95 && VAR_178 < VAR_179 <S2SV_ModEnd> ) { METHOD_114
<S2SV_ModStart> ; TYPE_3 VAR_24 ; METHOD_3 ( VAR_24 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_12 != VAR_13 ) return - VAR_26 ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_4 )
<S2SV_ModStart> * VAR_45 ; struct STRUCT_OR_UNION_0 VAR_50 = * VAR_41 ; <S2SV_ModStart> ; if ( ! METHOD_15 ( VAR_41 , VAR_46 ) ) { METHOD_16 ( "cliprdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_50 ) ; } if (
<S2SV_ModStart> -> VAR_40 && VAR_43 -> VAR_46 &&
<S2SV_ModStart> ; VAR_1074 : if ( VAR_1144 == VAR_1203 ) VAR_1144 = "UNKNOWN_REASON" <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_27 ) { METHOD_7 <S2SV_ModEnd> ( VAR_15 -> <S2SV_ModStart> VAR_16 , "GSO<S2SV_blank>size<S2SV_blank>must<S2SV_blank>not<S2SV_blank>be<S2SV_blank>zero.\\n" ) ; METHOD_8 ( VAR_15 <S2SV_ModStart> VAR_14 ) { METHOD_7 <S2SV_ModEnd> ( VAR_15 -> <S2SV_ModStart> VAR_26 . VAR_20 ) ; METHOD_8 ( VAR_15
<S2SV_ModStart> VAR_46 ) { <S2SV_ModEnd> TYPE_2 VAR_50 = <S2SV_ModStart> VAR_50 = 0 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> ) ) { TYPE_3 VAR_51 = METHOD_27 ( METHOD_28 ( VAR_46 ) -> VAR_52 ) ; <S2SV_ModStart> "refcount<S2SV_blank>now=0;<S2SV_blank>freeing" ) ; METHOD_30 ( METHOD_1 ( STRUCT_OR_UNION_12 ) , VAR_51 , VAR_46 -> VAR_11 <S2SV_ModEnd> ) ; METHOD_10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_19 ( VAR_43
<S2SV_ModStart> ( VAR_112 , VAR_113 , VAR_133 , <S2SV_ModEnd> & VAR_58 )
<S2SV_ModStart> VAR_85 ) ; METHOD_21 ( ! METHOD_20 ( VAR_84 ) ) ;
<S2SV_ModStart> case VAR_45 : if ( <S2SV_ModStart> , VAR_52 ) == - 1 ) goto VAR_59
<S2SV_ModStart> VAR_274 + 2 , sizeof ( VAR_182 ) <S2SV_ModStart> VAR_274 + 2 , sizeof ( VAR_182 )
<S2SV_ModStart> 1 ) ; if ( VAR_116 > VAR_194 - VAR_35 ) { return ( - 1 ) ; }
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> METHOD_26 ( VAR_75
<S2SV_ModStart> ~ VAR_38 ; if ( ( VAR_97 & VAR_109 ) && ( VAR_107 -> VAR_107 . VAR_37 & VAR_110 ) ) VAR_107 -> VAR_107 . VAR_37 |= VAR_111 ;
<S2SV_ModStart> ; VAR_52 = <S2SV_ModEnd> VAR_50 -> VAR_41 <S2SV_ModStart> VAR_50 -> VAR_41 <S2SV_ModEnd> == VAR_43 ;
<S2SV_ModStart> & VAR_22 -> VAR_167 . <S2SV_ModStart> const VAR_149 = VAR_159 -> VAR_149 ; TYPE_10 * VAR_153 = VAR_22 -> VAR_167 . VAR_153 ; TYPE_11 VAR_165 ; METHOD_21 <S2SV_ModEnd> ( & VAR_165 <S2SV_ModStart> , & VAR_165 , VAR_153 <S2SV_ModStart> , & VAR_165 , VAR_153 <S2SV_ModStart> VAR_159 -> VAR_149 -> <S2SV_ModEnd> VAR_35 [ VAR_155 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_45 [ VAR_155 <S2SV_ModStart> , & VAR_165 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , & VAR_165 , VAR_153 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_61 [ VAR_155 <S2SV_ModStart> ; if ( VAR_22 <S2SV_ModEnd> -> VAR_64 ) <S2SV_ModStart> == VAR_72 ; METHOD_22 <S2SV_ModEnd> ( & VAR_165 <S2SV_ModStart> VAR_75 ) { METHOD_22 <S2SV_ModEnd> ( & VAR_165 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_89 [ VAR_155 <S2SV_ModStart> 0 ] , VAR_153 -> <S2SV_ModEnd> VAR_112 [ VAR_155 <S2SV_ModStart> 1 ] , VAR_153 -> <S2SV_ModEnd> VAR_112 [ VAR_155 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_127 [ VAR_155 <S2SV_ModStart> VAR_159 -> VAR_149 -> <S2SV_ModEnd> VAR_136 [ VAR_155 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_140 [ VAR_155 <S2SV_ModStart> VAR_155 ] , VAR_153 -> <S2SV_ModEnd> VAR_154 [ VAR_155 <S2SV_ModStart> , & VAR_165 , & VAR_153 -> VAR_168 <S2SV_ModStart> ) ; } vpx_stop_encode <S2SV_ModEnd> ( & VAR_165
<S2SV_ModStart> return VAR_17 ; <S2SV_ModEnd> } return VAR_18
<S2SV_ModStart> VAR_101 ) ; if ( VAR_99 -> VAR_9 == VAR_99 -> VAR_56 ) VAR_99 -> VAR_56 = METHOD_7 ( VAR_99 -> VAR_56 ) ;
<S2SV_ModStart> 1.0 } ; METHOD_49 <S2SV_ModEnd> ( & VAR_340 <S2SV_ModStart> = 1 ; METHOD_50 <S2SV_ModEnd> ( & VAR_598 <S2SV_ModStart> -> VAR_599 ; METHOD_50 <S2SV_ModEnd> ( & VAR_80 <S2SV_ModStart> /= 2 ; METHOD_50 <S2SV_ModEnd> ( & VAR_156 <S2SV_ModStart> VAR_403 = 0.0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; TYPE_105 VAR_725 <S2SV_ModEnd> ; TYPE_105 VAR_679
<S2SV_ModStart> TYPE_5 * VAR_40 , TYPE_4 * VAR_46 <S2SV_ModStart> TYPE_6 VAR_22 [ 2 * <S2SV_ModStart> STRUCT_OR_UNION_33 -> VAR_33 != VAR_34 ) continue ; switch ( <S2SV_ModEnd> STRUCT_OR_UNION_33 -> VAR_35 <S2SV_ModStart> STRUCT_OR_UNION_33 -> VAR_35 ) { case VAR_36 : if ( <S2SV_ModEnd> STRUCT_OR_UNION_33 -> VAR_37 <S2SV_ModStart> VAR_42 ; } break ; case VAR_47 : if ( STRUCT_OR_UNION_33 -> VAR_37 == METHOD_6 ( sizeof ( TYPE_4 ) ) ) { TYPE_4 * VAR_48 ; VAR_48 = ( TYPE_4 * ) METHOD_7 ( STRUCT_OR_UNION_33 ) ; * VAR_46 = * VAR_48 ; } break ; }
<S2SV_ModStart> != 0 ) { METHOD_13 ( ) ; <S2SV_ModStart> goto VAR_84 ; }
<S2SV_ModStart> ( 2 , "vm_open<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n" <S2SV_ModEnd> , VAR_11 ,
<S2SV_ModStart> ; } } if ( VAR_70 < 0 ) { VAR_76 = - VAR_77 ; goto VAR_73 ; }
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> & VAR_111 -> VAR_173 . <S2SV_ModStart> = 0 ; TYPE_18 VAR_141 = { 0 , 0 } <S2SV_ModEnd> ; TYPE_12 VAR_66 <S2SV_ModStart> ; TYPE_12 VAR_66 ; vp9_zero ( VAR_66 ) <S2SV_ModEnd> ; VAR_168 -> <S2SV_ModStart> ++ ) { TYPE_18 VAR_143 = VAR_141 <S2SV_ModEnd> ; TYPE_16 VAR_147 <S2SV_ModStart> VAR_148 = VAR_159 <S2SV_ModEnd> ; VAR_168 -> <S2SV_ModStart> VAR_136 ) ; VAR_143 <S2SV_ModEnd> = VAR_130 -> <S2SV_ModStart> -> VAR_131 [ VAR_132 <S2SV_ModEnd> ] . VAR_133 <S2SV_ModStart> . VAR_134 . VAR_174 ; if ( VAR_136 == 0 ) { VAR_141 = VAR_143 <S2SV_ModEnd> ; } VAR_154
<S2SV_ModStart> TYPE_16 * VAR_64 ; if ( VAR_63 == VAR_142 && ! ( VAR_133 -> VAR_143 & VAR_144 ) ) { METHOD_33 ( METHOD_34 ( "<S2SV_blank>[switch<S2SV_blank>func_body_suite<S2SV_blank>to<S2SV_blank>suite]" ) ) ; VAR_63 = VAR_145 ; } VAR_64 <S2SV_ModStart> ( METHOD_34 ( "<S2SV_blank>Push<S2SV_blank>\'%s\'\\n" , VAR_64 -> VAR_120 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> , VAR_510 [ 2048 <S2SV_ModEnd> ] = {
<S2SV_ModStart> VAR_114 VAR_118 ) || ( METHOD_13 ( VAR_103 -> VAR_77 ) != VAR_93 && METHOD_13 ( VAR_103 -> VAR_77 ) != VAR_122 ) ) { METHOD_23 ( & VAR_103 -> VAR_77 ) ; <S2SV_ModEnd> goto VAR_113 ;
<S2SV_ModStart> = 0 ; VAR_61 -> VAR_55 = 0 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( const TYPE_1 * VAR_50 <S2SV_ModEnd> , TYPE_8 * <S2SV_ModStart> , TYPE_8 * VAR_51 <S2SV_ModEnd> , TYPE_8 * <S2SV_ModStart> VAR_41 ) { const TYPE_8 VAR_52 = VAR_50 <S2SV_ModEnd> -> VAR_8 ; <S2SV_ModStart> VAR_8 ; * VAR_51 = VAR_50 <S2SV_ModEnd> -> VAR_19 * <S2SV_ModStart> -> VAR_19 * VAR_52 <S2SV_ModEnd> ; * VAR_13 <S2SV_ModStart> * VAR_13 += * VAR_51 <S2SV_ModEnd> ; * VAR_17 <S2SV_ModStart> += METHOD_7 ( * VAR_51 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( VAR_52 <S2SV_ModEnd> > 0.05 ) <S2SV_ModStart> { const TYPE_8 VAR_53 <S2SV_ModEnd> = METHOD_7 ( <S2SV_ModStart> = METHOD_7 ( VAR_50 <S2SV_ModEnd> -> VAR_39 ) <S2SV_ModStart> ( METHOD_7 ( VAR_50 <S2SV_ModEnd> -> VAR_26 ) <S2SV_ModStart> ; const TYPE_8 mvc_ratio <S2SV_ModEnd> = METHOD_7 ( <S2SV_ModStart> = METHOD_7 ( VAR_50 <S2SV_ModEnd> -> VAR_48 ) <S2SV_ModStart> ( METHOD_7 ( VAR_50 <S2SV_ModEnd> -> VAR_31 ) <S2SV_ModStart> * VAR_41 += VAR_52 * ( VAR_53 < VAR_50 -> VAR_39 ? VAR_53 : VAR_50 <S2SV_ModEnd> -> VAR_39 ) <S2SV_ModStart> -> VAR_39 ) <S2SV_ModEnd> ; * VAR_41 <S2SV_ModStart> * VAR_41 += VAR_52 * ( mvc_ratio < VAR_50 -> VAR_48 ? mvc_ratio : VAR_50 <S2SV_ModEnd> -> VAR_48 ) <S2SV_ModStart> -> VAR_48 ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> & VAR_41 ) != VAR_70 <S2SV_ModEnd> || ( VAR_56 <S2SV_ModStart> ( VAR_56 & ( O_CREAT | O_TRUNC ) ) != 0 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 )
<S2SV_ModStart> ) ; } METHOD_6 ( VAR_54 , VAR_54 -> VAR_55 , VAR_57 ) ;
<S2SV_ModStart> TYPE_8 VAR_42 [ 1024 + 1 ] ; TYPE_8 * VAR_43 = VAR_42 ; TYPE_10 VAR_44 = sizeof ( VAR_42 ) , VAR_45 <S2SV_ModEnd> ; register TYPE_7 <S2SV_ModStart> ) ) { if ( VAR_44 <= 1 ) return ( VAR_42 ) ; VAR_45 = METHOD_3 ( VAR_43 , VAR_30 , VAR_44 ) ; if ( VAR_45 >= VAR_44 ) return ( VAR_42 ) ; VAR_43 += VAR_45 ; VAR_44 -= VAR_45 ; if ( VAR_44 <= 1 ) return ( VAR_42 ) ; VAR_45 = METHOD_3 ( VAR_43 <S2SV_ModEnd> , VAR_34 -> <S2SV_ModStart> VAR_34 -> VAR_29 , VAR_44 ) ; if ( VAR_45 >= VAR_44 ) return ( VAR_42 ) ; VAR_43 += VAR_45 ; VAR_44 -= VAR_45 <S2SV_ModEnd> ; VAR_30 = <S2SV_ModStart> } if ( VAR_43 == VAR_42 <S2SV_ModEnd> ) ( TYPE_9
<S2SV_ModStart> VAR_16 ) ; if ( VAR_99 -> VAR_23 . VAR_24 > 0 ) { <S2SV_ModStart> VAR_24 ) ; } else { VAR_109 -> VAR_32 = 30 ; } <S2SV_ModStart> -> VAR_32 ; VAR_109 -> VAR_113 = VAR_114 | VAR_115 | VAR_116 ; VAR_16 -> VAR_117 = 0 ; VAR_16 -> VAR_118 = 1 ; VAR_16 -> VAR_119 = 1 ;
<S2SV_ModStart> , VAR_65 -> VAR_67 , VAR_65 ->
<S2SV_ModStart> TYPE_13 * VAR_54 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } VAR_54 = ( TYPE_13 * ) METHOD_2 ( VAR_61 ) ;
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_3 * ) VAR_2 ) ;
<S2SV_ModStart> VAR_38 ; TYPE_2 * VAR_36 ; VAR_36 = METHOD_7 ( 8 , VAR_39 ) ; if ( ! VAR_36 ) return - VAR_40 <S2SV_ModEnd> ; VAR_29 = <S2SV_ModStart> VAR_29 ) ; VAR_29 = - VAR_37 ; goto VAR_41 <S2SV_ModEnd> ; } VAR_38 <S2SV_ModStart> ] ) ; VAR_29 = <S2SV_ModEnd> - VAR_37 ; <S2SV_ModStart> - VAR_37 ; goto VAR_41 ; } VAR_29 = VAR_38 ; VAR_41 : METHOD_8 ( VAR_36 ) ; return VAR_29 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_174 ) { <S2SV_ModEnd> TYPE_23 VAR_179 , <S2SV_ModStart> VAR_174 = 0.0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * VAR_136 ; TYPE_12 VAR_194 ; if ( VAR_91 < 10.0 ) VAR_194 = VAR_152 ; else VAR_194 = VAR_150 ; <S2SV_ModStart> TYPE_26 VAR_237 ; TYPE_12 VAR_194 ; if ( VAR_174 < 10.0 ) VAR_194 = VAR_152 ; else VAR_194 = VAR_150 ;
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_32 ; METHOD_2 ( VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) <S2SV_ModEnd> ; VAR_32 .
<S2SV_ModStart> unsigned TYPE_14 VAR_27 , struct STRUCT_OR_UNION_5 * VAR_75 <S2SV_ModStart> ( & VAR_68 , VAR_75
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_1 METHOD_0 ( <S2SV_ModStart> ; VAR_13 = METHOD_4 ( VAR_8 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> ) { TYPE_140 TYPE_71 ; <S2SV_ModEnd> VAR_2329 -> VAR_2330 <S2SV_ModStart> VAR_1141 = VAR_1141 <S2SV_ModEnd> ; TYPE_71 = <S2SV_ModStart> ) VAR_825 ; METHOD_42 ( VAR_2329 ) <S2SV_ModEnd> ; VAR_2329 -> <S2SV_ModStart> } else { METHOD_42 ( VAR_2329 ) <S2SV_ModEnd> ; } if
<S2SV_ModStart> "error<S2SV_blank>:<S2SV_blank>a2dp<S2SV_blank>not<S2SV_blank>ready,<S2SV_blank>wait<S2SV_blank>250<S2SV_blank>ms<S2SV_blank>and<S2SV_blank>retry" ) ; METHOD_7 ( <S2SV_ModStart> METHOD_6 ( 250000 ) <S2SV_ModStart> VAR_16 ; } METHOD_7 ( <S2SV_ModStart> METHOD_6 ( 250000 )
<S2SV_ModStart> TYPE_1 VAR_23 , <S2SV_ModEnd> struct STRUCT_OR_UNION_1 * <S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_28 , VAR_29 <S2SV_ModStart> , 0 , <S2SV_ModEnd> VAR_28 , VAR_29
<S2SV_ModStart> VAR_164 ) ; METHOD_29 ( VAR_101 ) ;
<S2SV_ModStart> break ; } METHOD_17 ( VAR_69 , VAR_62 , sizeof VAR_69 ) ; METHOD_17 <S2SV_ModEnd> ( VAR_69 , <S2SV_ModStart> VAR_69 , "<S2SV_blank>" , sizeof VAR_69 <S2SV_ModStart> } VAR_69 [ ( sizeof <S2SV_ModEnd> VAR_69 ) - <S2SV_ModStart> 1 ] = '\\0' ; VAR_69 [ METHOD_16 ( VAR_69 ) - 1 ] =
<S2SV_ModStart> VAR_4 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_9 VAR_155 ; METHOD_11 ( & VAR_155 , 0 , sizeof ( VAR_155 ) ) ;
<S2SV_ModStart> : VAR_32 = TYPE_21 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> : VAR_32 = TYPE_21 <S2SV_ModEnd> ( METHOD_7 (
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_1 VAR_3 ) { TYPE_2 * VAR_4 = VAR_3 ? & VAR_5 : & VAR_6 ; TYPE_3 * VAR_7 = VAR_3 ? & VAR_8 : & VAR_9 ; <S2SV_ModEnd> METHOD_1 ( VAR_0 <S2SV_ModStart> METHOD_1 ( VAR_0 , VAR_4 <S2SV_ModStart> VAR_2 ) ; METHOD_2 ( VAR_10 [ VAR_11 ] ) ; while ( VAR_7 ) { TYPE_3 * VAR_12 = VAR_7 ; VAR_7 = VAR_7 -> VAR_13 ; VAR_12 -> VAR_13 = VAR_2 ; METHOD_3 ( VAR_12 ) ; } METHOD_4 ( VAR_10 [ VAR_11 ] ) ;
<S2SV_ModStart> , TYPE_9 VAR_212 , TYPE_15 VAR_216 <S2SV_ModStart> VAR_143 , VAR_205 <S2SV_ModEnd> ; TYPE_13 VAR_134 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( VAR_120 <S2SV_ModStart> == VAR_136 ) { VAR_143 ++ ; if ( ! VAR_216 ) { METHOD_45 ( VAR_214 , VAR_194 , "invalid<S2SV_blank>syntax" ) ; return VAR_203 ; } if ( METHOD_18 ( VAR_69 ) > 1 ) { METHOD_45 ( VAR_214 , VAR_194 , "Generator<S2SV_blank>expression<S2SV_blank>must<S2SV_blank>be<S2SV_blank>parenthesized" ) ; return VAR_203 ; } } <S2SV_ModEnd> else if ( <S2SV_ModStart> ; } } VAR_208 = METHOD_13 ( VAR_143 <S2SV_ModEnd> , VAR_214 ->
<S2SV_ModStart> + 2 ; ( ( <S2SV_ModStart> + 1 ] ) && ( VAR_22 < VAR_20 -> VAR_23 ) )
<S2SV_ModStart> TYPE_9 VAR_51 [ VAR_58 <S2SV_ModEnd> ] ; TYPE_6 <S2SV_ModStart> ( VAR_51 , VAR_58 <S2SV_ModEnd> , "sel_comb_%dh" , <S2SV_ModStart> ( VAR_51 , VAR_58 <S2SV_ModEnd> , "sel_comb_%dv" ,
<S2SV_ModStart> VAR_4 ) ; TYPE_0 VAR_8 ; METHOD_3 ( VAR_4 ) ; VAR_8 = <S2SV_ModEnd> METHOD_2 ( VAR_5 <S2SV_ModStart> VAR_7 ) ; METHOD_4 ( VAR_4 ) ; return VAR_8 ;
<S2SV_ModStart> { TYPE_3 * <S2SV_ModEnd> VAR_14 = METHOD_1 <S2SV_ModStart> METHOD_1 ( ) ; if ( ! VAR_14 ) <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ( VAR_13 , VAR_20 ,
<S2SV_ModStart> TYPE_40 ) ) ; if ( TYPE_42 . VAR_288 == VAR_276 ) return - 1
<S2SV_ModStart> ( TYPE_8 ) METHOD_27 ( STRUCT_OR_UNION_43 ) <S2SV_ModEnd> ; VAR_47 = <S2SV_ModStart> STRUCT_OR_UNION_43 ) && ( ! METHOD_28 ( STRUCT_OR_UNION_43 ) && <S2SV_ModStart> METHOD_4 ( STRUCT_OR_UNION_43 )
<S2SV_ModStart> = VAR_7 ; METHOD_2 <S2SV_ModEnd> ( VAR_11 ->
<S2SV_ModStart> VAR_50 ) ; <S2SV_ModEnd> VAR_42 = METHOD_3
<S2SV_ModStart> VAR_71 ) { TYPE_3 <S2SV_ModEnd> VAR_54 , VAR_57
<S2SV_ModStart> + VAR_10 ; TYPE_12 VAR_32 = VAR_28 -> VAR_33 < VAR_27 -> VAR_34 ? METHOD_4 ( VAR_27 ) : METHOD_3 ( VAR_27 ) ; <S2SV_ModStart> VAR_23 ) <= VAR_32 <S2SV_ModEnd> * VAR_28 -> <S2SV_ModStart> VAR_23 ) , VAR_32 <S2SV_ModEnd> * VAR_28 -> <S2SV_ModStart> -> VAR_29 , VAR_32 <S2SV_ModEnd> , VAR_28 ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = METHOD_1 ( ( TYPE_8 )
<S2SV_ModStart> ; VAR_85 -> VAR_49 = VAR_76 . VAR_55 ; VAR_85 -> VAR_53 = VAR_76 . VAR_55 ; VAR_85 -> VAR_87 = VAR_88 ; if ( <S2SV_ModEnd> VAR_76 . VAR_47 <S2SV_ModStart> VAR_76 . VAR_47 != - 1 ) { VAR_85 -> VAR_87 = METHOD_13 ( <S2SV_ModEnd> VAR_76 . VAR_47 <S2SV_ModStart> VAR_76 . VAR_47 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! VAR_85 -> VAR_87 <S2SV_ModEnd> ) goto VAR_84 <S2SV_ModStart> goto VAR_84 ; } VAR_81 -> VAR_57 = VAR_58 ; VAR_81 -> VAR_60 = METHOD_7 ( VAR_76 . VAR_66 ) ; VAR_81 -> VAR_64 = METHOD_8 ( VAR_76 . VAR_66 ) ; VAR_81 -> VAR_68 = VAR_69 ; VAR_81 -> VAR_71 = & VAR_72 ; VAR_81 -> VAR_74 = 1 ; STRUCT_OR_UNION_10 = METHOD_9 ( VAR_81 , & VAR_76 ) ; if ( ! STRUCT_OR_UNION_10 ) goto VAR_84 ; <S2SV_ModStart> ; VAR_84 : if ( VAR_85 -> VAR_87 ) METHOD_12 ( VAR_85 -> VAR_87 ) ;
<S2SV_ModStart> ( VAR_53 , VAR_57 ) ; if ( ( VAR_44 & VAR_58 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_53 , VAR_57 , VAR_58 <S2SV_ModEnd> ) ; VAR_28 <S2SV_ModStart> ( VAR_53 , VAR_59 ) ; if ( ( VAR_28 & VAR_60 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_53 , VAR_61 ) ; if ( ( VAR_28 & VAR_62 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_28 & VAR_63 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_44 & VAR_64 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_53 , VAR_57 , VAR_64 <S2SV_ModEnd> ) ; do <S2SV_ModStart> ( VAR_53 , VAR_65 , VAR_66 | VAR_67 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_13 , VAR_14
<S2SV_ModStart> VAR_10 = VAR_11 ; METHOD_3 ( & VAR_26 -> VAR_26 , 0 , sizeof ( VAR_26 -> VAR_26 ) )
<S2SV_ModStart> VAR_36 ) ; break ; default : METHOD_5 ( VAR_36 ) ; METHOD_7 ( "received<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>type<S2SV_blank>from<S2SV_blank>%P[%I]" , VAR_35 , VAR_34 ) ;
<S2SV_ModStart> , VAR_16 , VAR_20 <S2SV_ModEnd> ) == 0
<S2SV_ModStart> ( VAR_121 ) <S2SV_ModEnd> ; struct STRUCT_OR_UNION_12 <S2SV_ModStart> VAR_76 ) { struct STRUCT_OR_UNION_13 * VAR_125 ; VAR_125 = METHOD_26 ( VAR_91 -> VAR_125 , METHOD_25 ( VAR_121 ) ) ; if ( VAR_125 && VAR_125 -> VAR_81 . VAR_79 ) VAR_86 = VAR_125 -> VAR_81 . <S2SV_ModEnd> VAR_82 ; VAR_104
<S2SV_ModStart> VAR_133 ) ; <S2SV_ModEnd> VAR_124 = ( <S2SV_ModStart> VAR_117 ) ; METHOD_5 ( VAR_95 ) ;
<S2SV_ModStart> . VAR_157 ; if ( VAR_159 > 1024 ) { <S2SV_ModStart> ) ; } else { METHOD_5 ( "Invalid<S2SV_blank>string<S2SV_blank>pointer<S2SV_blank>at<S2SV_blank>%p\\n" , VAR_159 ) ; } }
<S2SV_ModStart> VAR_48 ) ; VAR_36 -> VAR_56 = 0 ;
<S2SV_ModStart> VAR_25 ) { <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> ( METHOD_1 ( VAR_25 -> <S2SV_ModEnd> VAR_26 ) ) <S2SV_ModStart> VAR_26 ) ) METHOD_16 <S2SV_ModEnd> ( VAR_25 ) <S2SV_ModStart> VAR_25 ) ; <S2SV_ModEnd> METHOD_8 ( &
<S2SV_ModStart> VAR_6 = 0 ; METHOD_3 ( VAR_5 )
<S2SV_ModStart> ; default : METHOD_2 ( ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> * ) VAR_4 ; if ( VAR_16 >= VAR_29 ) VAR_16 = VAR_29 - 1
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_10 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if <S2SV_ModEnd> ( ( VAR_10 <S2SV_ModStart> VAR_24 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_26 , "horAcc16" , "%s" , "cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_25 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> ; TYPE_2 VAR_41 <S2SV_ModEnd> ; unsigned TYPE_3 <S2SV_ModStart> TYPE_4 VAR_25 ; if ( STRUCT_OR_UNION_14 -> VAR_33 > STRUCT_OR_UNION_14 -> VAR_31 -> VAR_42 ) { VAR_41 = - VAR_43 ; goto VAR_44 ; } <S2SV_ModStart> ! VAR_35 ) { VAR_41 = - VAR_6 ; goto VAR_45 ; } <S2SV_ModEnd> VAR_32 = VAR_35 <S2SV_ModStart> return 0 ; VAR_45 <S2SV_ModEnd> : METHOD_12 ( <S2SV_ModStart> STRUCT_OR_UNION_20 ) ; VAR_44 :
<S2SV_ModStart> - VAR_6 ; <S2SV_ModEnd> switch ( VAR_53 <S2SV_ModStart> ; } } VAR_53 -> VAR_8 = VAR_9 ;
<S2SV_ModStart> VAR_13 ) { TYPE_7 VAR_16 = <S2SV_ModEnd> METHOD_2 ( VAR_12 <S2SV_ModStart> ( VAR_12 ) ; TYPE_7 VAR_17 = METHOD_4 ( VAR_12 , VAR_13 ) ; METHOD_1 ( VAR_16 <S2SV_ModStart> VAR_15 ) ; if ( VAR_10 -> VAR_18 < ( TYPE_7 ) VAR_13 ) { METHOD_5 ( ( "bad<S2SV_blank>sector<S2SV_blank>id<S2SV_blank>%d<S2SV_blank>><S2SV_blank>%d\\n" , VAR_13 , VAR_10 -> VAR_18 ) ) ; return - 1 ; } <S2SV_ModStart> VAR_11 ) + VAR_17 <S2SV_ModEnd> , VAR_15 )
<S2SV_ModStart> * VAR_36 ; unsigned TYPE_5 VAR_47 ; struct STRUCT_OR_UNION_2 * VAR_48 ; <S2SV_ModStart> = VAR_30 ; VAR_41 -> VAR_19 = VAR_20 ; <S2SV_ModStart> VAR_38 ) ; VAR_48 = METHOD_6 ( VAR_41 -> VAR_42 ) ; METHOD_7 ( & VAR_48 -> VAR_49 , VAR_47 ) ; <S2SV_ModStart> -> VAR_40 , & VAR_48 -> VAR_43 ) ; METHOD_8 ( & VAR_48 -> VAR_49 , VAR_47 <S2SV_ModEnd> ) ; VAR_44
<S2SV_ModStart> = VAR_84 ; VAR_96 -> VAR_98 = VAR_99 ;
<S2SV_ModStart> -> VAR_50 ) { if ( VAR_77 -> VAR_78 -> VAR_81 != VAR_77 -> VAR_78 -> VAR_82 ) METHOD_13 ( VAR_77 -> VAR_78 -> VAR_81 ) ; <S2SV_ModStart> VAR_53 ) ; VAR_77 -> VAR_78 = VAR_83 ; }
<S2SV_ModStart> ( ! VAR_309 <S2SV_ModEnd> && VAR_301 )
<S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> METHOD_37 ( VAR_136 <S2SV_ModStart> , VAR_135 ) != VAR_136 ) break
<S2SV_ModStart> VAR_233 | VAR_234 | VAR_315 | VAR_316 | VAR_317 <S2SV_ModStart> ) ) ; if ( VAR_304 -> VAR_318 ) { METHOD_77 ( VAR_304 -> VAR_181 ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_11 <S2SV_ModEnd> METHOD_0 ( TYPE_6 <S2SV_ModStart> TYPE_6 * VAR_36 , TYPE_10 VAR_38 <S2SV_ModStart> 5 ) { if ( VAR_38 < 1 ) return VAR_39 ; VAR_38 -- ; <S2SV_ModStart> 4 ; } if ( VAR_38 < VAR_32 ) return VAR_39 ; VAR_38 -= VAR_32 ; <S2SV_ModStart> } else { if ( VAR_38 < 1 ) return VAR_39 ; VAR_38 -- ; * VAR_36 ++ = VAR_34 ; VAR_35 -- ; } } if ( ( VAR_38 < 4 ) || ( VAR_35 < 4 ) ) return VAR_39 ; METHOD_2 ( VAR_36 , VAR_37 , 4 ) ; return VAR_40 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_24 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_209 , TYPE_22 VAR_211 <S2SV_ModEnd> , unsigned TYPE_3 <S2SV_ModStart> VAR_210 ) { TYPE_25 VAR_45 ; TYPE_21 VAR_204 <S2SV_ModEnd> ; register TYPE_21 <S2SV_ModStart> ; register TYPE_21 * VAR_207 ; TYPE_22 VAR_198 ; VAR_207 = METHOD_41 ( VAR_209 , 0 , VAR_188 , VAR_209 -> VAR_197 , 1 , VAR_210 ) ; if ( VAR_207 == ( TYPE_21 * ) VAR_193 ) return ( MagickFalse ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ; switch ( VAR_211 <S2SV_ModEnd> ) { case <S2SV_ModStart> 1 : { <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> VAR_204 = ( <S2SV_ModEnd> ( * VAR_206 <S2SV_ModStart> 0x80 >> VAR_45 <S2SV_ModEnd> ) ? 0x01 <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> VAR_45 < ( TYPE_22 ) ( <S2SV_ModStart> VAR_204 = ( <S2SV_ModEnd> ( * VAR_206 <S2SV_ModStart> 0x80 >> VAR_45 <S2SV_ModEnd> ) ? 0x01 <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> ++ ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> 2 : { for ( VAR_198 = 0 ; VAR_198 < ( ( TYPE_22 ) <S2SV_ModEnd> VAR_209 -> VAR_197 <S2SV_ModStart> VAR_209 -> VAR_197 - 3 ) ; VAR_198 += 4 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 6 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 4 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 2 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_206 ++ ; } if ( ( VAR_209 -> VAR_197 % 4 ) != 0 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 6 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; if ( ( VAR_209 -> VAR_197 % 4 ) > 1 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 4 ) & 0x3 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; if ( ( VAR_209 -> VAR_197 % 4 ) > 2 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 2 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; } } VAR_206 ++ ; } break ; } case 4 : { <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> * VAR_206 >> 4 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> ( * VAR_206 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; <S2SV_ModStart> ( VAR_209 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> 4 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; <S2SV_ModStart> VAR_209 ) ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> 8 : { for ( VAR_198 = 0 ; VAR_198 < ( TYPE_22 ) <S2SV_ModEnd> VAR_209 -> VAR_197 <S2SV_ModStart> VAR_209 -> VAR_197 ; VAR_198 ++ ) { VAR_204 = METHOD_42 ( VAR_209 , * VAR_206 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; VAR_207 += METHOD_44 ( VAR_209 ) ; } } break ; case 24 : <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> ++ ) { SetPixelRed ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; SetPixelGreen ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; SetPixelBlue ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; } break ; } if ( ! METHOD_45 ( VAR_209 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> , VAR_210 ) ) return ( MagickFalse ) ; return ( MagickTrue ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_114 = 0 ; if ( METHOD_11 ( VAR_111 , & VAR_96 , sizeof ( VAR_96 ) ) ) VAR_114 = <S2SV_ModStart> - VAR_109 ; <S2SV_ModEnd> METHOD_12 ( VAR_97 <S2SV_ModStart> ( VAR_97 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> 0 ; VAR_36 < <S2SV_ModEnd> VAR_18 ; VAR_36
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_24 <S2SV_ModEnd> ; TYPE_2 VAR_28 <S2SV_ModStart> VAR_9 ) ; VAR_24 = METHOD_11 ( STRUCT_OR_UNION_8 -> VAR_29 . VAR_30 , VAR_14 , STRUCT_OR_UNION_8 -> VAR_29 . VAR_31 ) ; VAR_28 = METHOD_12 ( VAR_24 ) ; if ( METHOD_13 ( VAR_24 ) ) goto VAR_32 ; <S2SV_ModStart> if ( VAR_24 == METHOD_2 ( STRUCT_OR_UNION_8 ) ) { <S2SV_ModEnd> if ( VAR_16 <S2SV_ModStart> VAR_23 ) ; <S2SV_ModEnd> METHOD_8 ( STRUCT_OR_UNION_8 <S2SV_ModStart> ) ; } METHOD_7 ( VAR_24 ) ; <S2SV_ModStart> STRUCT_OR_UNION_8 ) ; VAR_32 :
<S2SV_ModStart> -> VAR_78 ; VAR_104 -> VAR_78 = VAR_88 ;
<S2SV_ModStart> * VAR_30 , TYPE_4 VAR_48 , <S2SV_ModStart> * VAR_34 , TYPE_4 VAR_49 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , VAR_30 , VAR_48 <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ( VAR_34 , VAR_49 ,
<S2SV_ModStart> STRUCT_OR_UNION_22 ) ; VAR_486 = VAR_381 - VAR_383 - VAR_382 ; if ( VAR_486 < 0 ) { VAR_498 = - VAR_363 ; goto VAR_490 ; } <S2SV_ModStart> ) ; } if ( VAR_486 > 0 && METHOD_42 ( VAR_453 , VAR_368 + VAR_383 <S2SV_ModEnd> , VAR_483 ,
<S2SV_ModStart> ( VAR_278 ) ; struct STRUCT_OR_UNION_5 * VAR_284 = VAR_278 <S2SV_ModStart> -> VAR_209 ; VAR_284 = VAR_212 ; <S2SV_ModStart> -> VAR_209 ; VAR_284 = VAR_212 ; <S2SV_ModStart> VAR_283 ; } if ( METHOD_56 ( METHOD_67 ( VAR_284 , VAR_135 ) ) ) goto VAR_283 ;
<S2SV_ModStart> ) { return VAR_21 <S2SV_ModEnd> ; } while
<S2SV_ModStart> = VAR_106 ; VAR_106 -> VAR_107 ++ ;
<S2SV_ModStart> VAR_61 ) { METHOD_11 <S2SV_ModEnd> ( VAR_61 )
<S2SV_ModStart> ; TYPE_5 VAR_116 = VAR_122 ; TYPE_5 VAR_118 = VAR_122 <S2SV_ModEnd> ; TYPE_6 VAR_117 <S2SV_ModStart> VAR_114 ) ; VAR_119 : METHOD_19 ( & VAR_117 , & VAR_116 ) ; METHOD_19 ( & VAR_117 , & VAR_118 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_120
<S2SV_ModStart> == 12 && ( <S2SV_ModStart> & VAR_13 ) ) <S2SV_ModStart> == 24 && ( <S2SV_ModStart> VAR_16 & VAR_17 )
<S2SV_ModStart> ) break ; VAR_405 = METHOD_79 ( VAR_408 , VAR_408 -> VAR_329 , VAR_408 -> VAR_371 ) ; if ( VAR_405 == VAR_406 ) { METHOD_80 ( VAR_376 , & VAR_408 -> VAR_376 ) ; return ( METHOD_72 ( VAR_408 ) ) ; }
<S2SV_ModStart> VAR_102 ) ; VAR_99 -> VAR_104 . VAR_105 = VAR_106 ;
<S2SV_ModStart> VAR_290 ) ; TYPE_2 * VAR_555 = VAR_557 -> VAR_555 ; TYPE_13 VAR_559 = METHOD_20 ( VAR_557 -> VAR_555 ) ; TYPE_13 VAR_560 = VAR_556 - VAR_559 ; VAR_555 += VAR_559 ; <S2SV_ModStart> < VAR_290 && VAR_559 <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { METHOD_41 ( VAR_555 , VAR_560 <S2SV_ModEnd> , "%d<S2SV_blank>" , <S2SV_ModStart> ] ) ; VAR_559 = METHOD_20 ( VAR_555 ) ; VAR_555 += VAR_559 ; VAR_560 -= VAR_559 ; <S2SV_ModStart> } METHOD_41 ( VAR_555 , VAR_560 - 1 <S2SV_ModEnd> , "%d" ,
<S2SV_ModStart> VAR_58 - 1 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_75 ) { TYPE_4 VAR_76 = 0 , VAR_61 = 1 , VAR_63 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 0 ; TYPE_6 VAR_64 = 0 , VAR_65 = 1 ; if ( * VAR_75 == '-' ) VAR_61 = - 1 , VAR_75 ++ ; if ( * VAR_75 == '0' ) VAR_75 ++ ; if ( * VAR_75 >= '1' && * VAR_75 <= '9' ) do VAR_76 = ( VAR_76 * 10.0 ) + ( * VAR_75 ++ - '0' ) ; while ( * VAR_75 >= '0' && * VAR_75 <= '9' ) ; if ( * VAR_75 == '.' && VAR_75 [ 1 ] >= '0' && VAR_75 [ 1 ] <= '9' ) { VAR_75 ++ ; do VAR_76 = ( VAR_76 <S2SV_ModEnd> * 10.0 ) <S2SV_ModStart> ( * VAR_75 ++ - '0' ) , <S2SV_ModEnd> VAR_63 -- ; <S2SV_ModStart> VAR_63 -- ; <S2SV_ModEnd> while ( * <S2SV_ModStart> 'E' ) { VAR_75 ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == '+' ) VAR_75 ++ ; <S2SV_ModEnd> else if ( <S2SV_ModStart> == '-' ) <S2SV_ModEnd> VAR_65 = - <S2SV_ModStart> = - 1 , VAR_75 ++ ; while ( * VAR_75 >= '0' && * VAR_75 <= '9' ) VAR_64 = ( VAR_64 * 10 ) + ( * VAR_75 ++ - '0' ) ; } VAR_76 <S2SV_ModEnd> = VAR_61 * <S2SV_ModStart> = VAR_61 * VAR_76 * METHOD_2 ( 10.0 , ( VAR_63 + VAR_64 * VAR_65 ) ) ; VAR_72 -> VAR_77 = VAR_76 <S2SV_ModEnd> ; VAR_72 -> <S2SV_ModStart> -> VAR_67 = ( TYPE_3 ) VAR_76 ; <S2SV_ModEnd> VAR_72 -> VAR_73
<S2SV_ModStart> & VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; VAR_32
<S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 3 <S2SV_ModStart> ] << 24 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 2 <S2SV_ModStart> ] << 16 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 1 <S2SV_ModStart> ] << 8 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> VAR_17 & 0xffffffff <S2SV_ModStart> VAR_17 & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 0 <S2SV_ModStart> ] << 24 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 1 <S2SV_ModStart> ] << 16 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 2 <S2SV_ModStart> ] << 8 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( VAR_17 & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_136 ; } if ( METHOD_13 ( VAR_140 , & VAR_137 -> VAR_131 ) ) { METHOD_21 ( VAR_140 , & VAR_137 -> VAR_131 ) ; VAR_139 = - VAR_141 ; goto VAR_136 ; }
<S2SV_ModStart> -> VAR_1 ; METHOD_3 ( & VAR_9 ) ; <S2SV_ModStart> VAR_3 = VAR_4 ; VAR_7 -> STRUCT_OR_UNION_4 = VAR_8 ; METHOD_4 ( & VAR_9 ) <S2SV_ModStart> VAR_6 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_99 = METHOD_12 ( VAR_55 , STRUCT_OR_UNION_32 , <S2SV_ModEnd> STRUCT_OR_UNION_34 ) ; <S2SV_ModStart> ; VAR_99 = METHOD_12 ( VAR_73 , STRUCT_OR_UNION_32 , <S2SV_ModEnd> STRUCT_OR_UNION_34 ) ; <S2SV_ModStart> ; VAR_99 = <S2SV_ModEnd> METHOD_20 ( VAR_55 <S2SV_ModStart> ; VAR_99 = <S2SV_ModEnd> METHOD_20 ( VAR_73
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_2 METHOD_0 (
<S2SV_ModStart> , VAR_19 , "truncated<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file;<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>read<S2SV_blank>%" <S2SV_ModEnd> VAR_21 "<S2SV_blank>bytes,<S2SV_blank>only<S2SV_blank>got<S2SV_blank>%" VAR_21
<S2SV_ModStart> ; if ( METHOD_17 ( ! METHOD_16 ( VAR_4 ) ) ) return - VAR_194 ; if (
<S2SV_ModStart> VAR_29 , 0 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_6 , 1 <S2SV_ModEnd> , VAR_213 ,
<S2SV_ModStart> METHOD_4 ( STRUCT_OR_UNION_16 , VAR_74
<S2SV_ModStart> ; if ( ! METHOD_10 ( VAR_26 ) ) goto VAR_45 ; if ( <S2SV_ModStart> STRUCT_OR_UNION_12 ) ; VAR_45 :
<S2SV_ModStart> [ VAR_7 ] = "" <S2SV_ModStart> ( VAR_15 , "%1023s<S2SV_blank>" <S2SV_ModEnd> ANUM "<S2SV_blank>" ANUM <S2SV_ModStart> ANUM "<S2SV_blank>" ANUM "<S2SV_blank>%c<S2SV_blank>%8191[^\\n]" <S2SV_ModEnd> , VAR_23 , <S2SV_ModStart> < 4 ) { METHOD_4 ( 4 , "Cannot<S2SV_blank>parse<S2SV_blank>server<S2SV_blank>line:<S2SV_blank>%s\\n" , VAR_15 ) ; <S2SV_ModStart> return 0 ; }
<S2SV_ModStart> 0 ) { if ( METHOD_27 ( VAR_212 ) != VAR_206 ) METHOD_15 ( VAR_208 , "UnexpectedEndOfFile" ) ;
<S2SV_ModStart> if ( VAR_145 >= <S2SV_ModEnd> VAR_32 ) return <S2SV_ModStart> if ( VAR_145 >= <S2SV_ModEnd> VAR_140 ) return
<S2SV_ModStart> -> VAR_23 , get_primary_drawing_order_field_bytes ( <S2SV_ModEnd> VAR_28 -> VAR_26 <S2SV_ModStart> VAR_28 -> VAR_26 , NULL ) <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> ( VAR_45 ) { METHOD_11 ( VAR_47 ) ; return VAR_45 ; } <S2SV_ModEnd> return METHOD_9 (
<S2SV_ModStart> VAR_39 ) ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_42 ) { TYPE_5 VAR_47 = 500 ; TYPE_6 * VAR_41 = METHOD_4 ( VAR_47 ) <S2SV_ModEnd> ; TYPE_5 VAR_46 <S2SV_ModStart> ; ) { if ( VAR_46 >= VAR_47 ) { VAR_47 *= 2 ; VAR_41 = METHOD_10 ( VAR_41 , VAR_47 ) ; }
<S2SV_ModStart> , VAR_15 -> VAR_17 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ] ) ; METHOD_31 ( VAR_107 -> VAR_110 , 0 , sizeof ( VAR_107 -> VAR_110 ) ) ;
<S2SV_ModStart> -> VAR_40 += <S2SV_ModEnd> METHOD_5 ( VAR_41
<S2SV_ModStart> VAR_136 -> VAR_137 , VAR_12
<S2SV_ModStart> = VAR_153 ; <S2SV_ModEnd> METHOD_16 ( VAR_156
<S2SV_ModStart> = VAR_255 ; VAR_256 -> VAR_257 = VAR_255 ;
<S2SV_ModStart> ; VAR_20 = METHOD_9 ( <S2SV_ModEnd> sizeof ( TYPE_4 <S2SV_ModStart> -> VAR_19 = METHOD_9 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> -> VAR_19 = METHOD_9 <S2SV_ModEnd> ( METHOD_7 (
<S2SV_ModStart> VAR_44 -> VAR_34 && VAR_44 -> VAR_34
<S2SV_ModStart> , VAR_72 , VAR_28 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> "(cc0%rowsize)!=0" ) ; METHOD_10 ( VAR_59 ) ;
<S2SV_ModStart> if ( VAR_32 && VAR_32 -> VAR_33 <S2SV_ModEnd> ) { VAR_35
<S2SV_ModStart> ) ; } METHOD_29 ( & METHOD_35 ( STRUCT_OR_UNION_59 ) -> VAR_146 ) ; <S2SV_ModStart> METHOD_45 ( STRUCT_OR_UNION_59 ) ; METHOD_34 ( & METHOD_35 ( STRUCT_OR_UNION_59 ) -> VAR_146
<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> signed TYPE_14 VAR_37 <S2SV_ModStart> VAR_216 ) { TYPE_12 VAR_203 = - 1 ; <S2SV_ModStart> VAR_142 ; } VAR_203 = METHOD_55 ( "/proc" , VAR_167 | VAR_168 | VAR_219 ) ; if ( VAR_203 < 0 ) { METHOD_67 ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc." <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_155 = 0 ; VAR_215 = METHOD_70 ( VAR_217 [ 0 ] , & VAR_155 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_155 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(0)" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_215 = METHOD_50 ( VAR_217 [ 0 ] , & VAR_141 , sizeof ( VAR_141 ) , VAR_97 ) ; if ( VAR_215 <= 0 ) { if ( VAR_215 != 0 ) METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>pid<S2SV_blank>of<S2SV_blank>attached<S2SV_blank>process" ) ; goto VAR_142 ; } <S2SV_ModStart> ) METHOD_71 ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>" "from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>" "initialization<S2SV_blank>(2):<S2SV_blank>%s." , strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> VAR_142 ; } VAR_156 = 3 ; VAR_215 = METHOD_50 ( VAR_217 [ 0 ] , & VAR_155 , sizeof ( VAR_155 ) , & VAR_156 ) ; if ( VAR_215 <= 0 ) { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>the<S2SV_blank>child<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>to<S2SV_blank>open<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(3):<S2SV_blank>%s." , strerror ( errno ) ) ; goto VAR_142 ; } if ( ( VAR_195 -> VAR_175 & CLONE_NEWNS ) && ( VAR_195 -> VAR_161 & LXC_ATTACH_LSM ) && VAR_197 -> lsm_label ) { TYPE_12 on_exec , labelfd ; on_exec = VAR_195 -> VAR_161 & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; labelfd = lsm_openat ( VAR_203 , VAR_141 , on_exec ) ; if ( labelfd < 0 ) goto VAR_142 ; VAR_215 = lxc_abstract_unix_send_fd ( VAR_217 [ 0 ] , labelfd , VAR_97 , 0 ) ; if ( VAR_215 <= 0 ) { METHOD_71 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>send<S2SV_blank>child<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , strerror ( errno ) ) ; goto VAR_142 ; } } <S2SV_ModStart> ; VAR_142 : if ( VAR_203 >= 0 ) METHOD_49 ( VAR_203 ) ; <S2SV_ModStart> |= VAR_165 ; <S2SV_ModEnd> VAR_215 = METHOD_59 <S2SV_ModStart> = VAR_201 , <S2SV_ModEnd> } ; VAR_216
<S2SV_ModStart> VAR_197 ) { <S2SV_ModEnd> VAR_373 -> VAR_364 <S2SV_ModStart> : 1 ; if ( VAR_373 -> VAR_364 ) { if ( METHOD_10 ( VAR_373 , 1 ) < 0 ) goto VAR_371 ; VAR_374 = VAR_373 -> VAR_326 ; VAR_374 [ 0 ] = 1 ; }
<S2SV_ModStart> ( VAR_404 -> VAR_443 ) VAR_404 -> VAR_307 -> VAR_444 |= VAR_445 ; else VAR_404 -> VAR_307 -> VAR_444 &= ~ VAR_445 ; if ( VAR_404 -> <S2SV_ModStart> } else { if ( VAR_404 -> VAR_443 ) VAR_404 -> VAR_307 -> VAR_444 |= VAR_446 ; else VAR_404 -> VAR_307 -> VAR_444 &= ~ VAR_446 ;
<S2SV_ModStart> ++ ) ; if ( ! METHOD_6 ( VAR_31 , VAR_32 ) ) return 0 ; <S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; TYPE_11 VAR_98 <S2SV_ModEnd> ; TYPE_11 VAR_44 <S2SV_ModStart> VAR_27 ) ) ; METHOD_11 ( VAR_81 -> VAR_99 == VAR_81 -> VAR_98 ) ; VAR_98 = VAR_81 -> VAR_99
<S2SV_ModStart> goto VAR_223 ; VAR_236 = - VAR_237 ; if ( METHOD_27 ( ! ( VAR_128 -> VAR_205 & VAR_238 ) ) ) goto VAR_223 ; <S2SV_ModStart> VAR_209 != VAR_209 ) ; METHOD_28 ( ! ( VAR_220 -> VAR_205 & VAR_238 )
<S2SV_ModStart> { VAR_50 = METHOD_10 ( STRUCT_OR_UNION_9 <S2SV_ModEnd> , & STRUCT_OR_UNION_9 <S2SV_ModStart> STRUCT_OR_UNION_9 -> VAR_24 , & VAR_49 ) ; if ( VAR_50 ) return VAR_50 ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> VAR_43 ; struct STRUCT_OR_UNION_6 * VAR_45 = VAR_43 -> VAR_44 . VAR_45 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_45 ) ) <S2SV_ModStart> ( VAR_41 ) <S2SV_ModEnd> VAR_45 -> VAR_40 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_45 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_32 ; METHOD_2 ( VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) <S2SV_ModEnd> ; VAR_32 .
<S2SV_ModStart> ; } } if ( METHOD_58 ( VAR_292 ) != VAR_287 ) { METHOD_59 ( VAR_273 , VAR_116 , "UnexpectedEndOfFile" , VAR_292 -> VAR_32 ) ; break ; }
<S2SV_ModStart> -> VAR_2 ; <S2SV_ModEnd> METHOD_1 ( "%s:<S2SV_blank>group=%p\\n" <S2SV_ModStart> VAR_10 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> unsigned TYPE_92 * VAR_502 <S2SV_ModEnd> , * VAR_452 <S2SV_ModStart> "MemoryAllocationFailed" ) ; VAR_502 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> VAR_454 ) { VAR_502 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> sizeof ( * VAR_502 ) ) ; if ( VAR_502 <S2SV_ModEnd> == ( unsigned <S2SV_ModStart> VAR_417 ] = VAR_502 <S2SV_ModEnd> [ VAR_334 + <S2SV_ModStart> ) METHOD_72 ( VAR_502 <S2SV_ModEnd> , VAR_452 , <S2SV_ModStart> == VAR_454 ) VAR_502 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_93 ( VAR_502 <S2SV_ModEnd> ) ; METHOD_99 <S2SV_ModStart> == VAR_454 ) VAR_502 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_93 ( VAR_502 <S2SV_ModEnd> ) ; METHOD_99 <S2SV_ModStart> == VAR_454 ) VAR_502 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_93 ( VAR_502 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> * VAR_0 , <S2SV_ModEnd> const TYPE_1 *
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_2 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_7 ) { if ( VAR_7 ) { if ( METHOD_3 ( VAR_13 -> VAR_16 , & <S2SV_ModStart> . VAR_4 -> VAR_17 , VAR_7 , sizeof ( VAR_18 ) ) ) return - VAR_19 ; <S2SV_ModEnd> METHOD_1 ( VAR_12 <S2SV_ModStart> VAR_15 ) ; } else { <S2SV_ModEnd> METHOD_2 ( VAR_12 <S2SV_ModStart> ) ; } VAR_13 -> VAR_14 . VAR_4 -> VAR_7 = VAR_7 ; return 0 ; }
<S2SV_ModStart> if ( VAR_13 + <S2SV_ModEnd> sizeof ( VAR_14 <S2SV_ModStart> ( VAR_14 ) > VAR_18 -> VAR_9 ) { return ; } <S2SV_ModEnd> METHOD_2 ( VAR_18
<S2SV_ModStart> * VAR_108 = ( TYPE_51 ) METHOD_22 <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_58 , <S2SV_ModEnd> VAR_83 -> VAR_52 <S2SV_ModStart> * VAR_116 = ( TYPE_51 ) opj_uint_min <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_58 , <S2SV_ModEnd> VAR_83 -> VAR_60 <S2SV_ModStart> * VAR_112 = ( TYPE_51 ) METHOD_22 <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_74 , <S2SV_ModEnd> VAR_83 -> VAR_68 <S2SV_ModStart> * VAR_120 = ( TYPE_51 ) opj_uint_min <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_74 , <S2SV_ModEnd> VAR_83 -> VAR_76
<S2SV_ModStart> -> METHOD_6 = VAR_18 + VAR_14 <S2SV_ModEnd> ; if (
<S2SV_ModStart> * VAR_8 , TYPE_6 <S2SV_ModEnd> * VAR_9 , <S2SV_ModStart> ( VAR_4 ) METHOD_3 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> ) ; else METHOD_4 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> && METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> ; METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_11 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 ) <S2SV_ModStart> && METHOD_15 ( ( unsigned TYPE_13 )
<S2SV_ModStart> TYPE_8 VAR_99 ; TYPE_8 VAR_52 = ( VAR_69 + ( VAR_70 - 1 ) ) >> VAR_43 ; VAR_99 = - VAR_101 ; if ( VAR_52 > VAR_102 ) goto VAR_97 ; <S2SV_ModStart> ) { TYPE_8 <S2SV_ModEnd> VAR_64 ; if <S2SV_ModStart> VAR_69 ) break <S2SV_ModEnd> ; VAR_93 ->
<S2SV_ModStart> METHOD_6 ( * METHOD_52 <S2SV_ModEnd> ( VAR_120 ) <S2SV_ModStart> ( VAR_126 , "who-has<S2SV_blank>" ) ) ; METHOD_69 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_126 , "<S2SV_blank>tell<S2SV_blank>" ) ) ; METHOD_70 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_76 : METHOD_70 ( VAR_126 , VAR_120 , VAR_51 ) ; METHOD_68 ( ( VAR_126 , "<S2SV_blank>is-at<S2SV_blank>%s" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> ( VAR_126 , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> VAR_120 ) ) ) ) ; METHOD_69 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( VAR_126 , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , METHOD_61 ( <S2SV_ModStart> VAR_120 ) ) ) ) ; METHOD_70 ( VAR_126 , VAR_120 , VAR_51 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> + 10 ; if ( VAR_27 -> VAR_28 < VAR_27 -> VAR_29 ) { <S2SV_ModStart> ; } ; } ;
<S2SV_ModStart> VAR_282 -> VAR_284 ; if ( ! METHOD_30 ( VAR_302 , VAR_276 , VAR_282 -> VAR_196 ) || ! METHOD_30 ( VAR_302 , VAR_282 , VAR_282 -> VAR_196 ) ) return - VAR_58 <S2SV_ModStart> VAR_306 ; } if ( ! METHOD_30 ( VAR_302 , VAR_309 , VAR_282 -> VAR_196 ) ) return - VAR_58 ;
<S2SV_ModStart> ) , VAR_128 , VAR_138
<S2SV_ModStart> != 0 ) { METHOD_13 ( ) ; <S2SV_ModStart> goto VAR_84 ; }
<S2SV_ModStart> else if ( METHOD_6 ( ) && ( METHOD_7 ( VAR_21 ) & VAR_22 ) <S2SV_ModEnd> ) { if
<S2SV_ModStart> ; METHOD_11 ( VAR_326 ,
<S2SV_ModStart> VAR_1 ) ; METHOD_2 ( ) ;
<S2SV_ModStart> 2 ) { METHOD_22 ( * TYPE_74 , 2 ) ; <S2SV_ModStart> VAR_50 - 2 ; if ( VAR_50 < VAR_52 ) goto VAR_53 ; METHOD_22 ( * ( TYPE_74 ) , VAR_52 ) <S2SV_ModStart> case VAR_16 : if ( VAR_52 < VAR_29 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> - VAR_29 ; VAR_52 = VAR_52 - VAR_29 ; <S2SV_ModStart> VAR_38 ) { if ( VAR_52 < VAR_37 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> VAR_50 = VAR_50 - VAR_37 ; VAR_52 = VAR_52 <S2SV_ModStart> case VAR_39 : if ( VAR_52 < 8 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> break ; } TYPE_74 += VAR_52 ; VAR_50 -= VAR_52 ;
<S2SV_ModStart> ) ) ; if ( METHOD_49 ( VAR_89 , VAR_92 ) ) { goto VAR_116 ; } <S2SV_ModStart> 1 ) ; if ( VAR_115 == VAR_117 ) { goto VAR_116 ; }
<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( VAR_32 <S2SV_ModStart> % VAR_35 ) != 0 ) { METHOD_9 ( VAR_29 -> VAR_36 , "PredictorDecodeTile" , "%s" , "occ0%rowsize<S2SV_blank>!=<S2SV_blank>0" ) ; return 0 ; } <S2SV_ModEnd> METHOD_6 ( VAR_27 <S2SV_ModStart> 0 ) { if ( ! <S2SV_ModStart> , VAR_35 ) ) return 0
<S2SV_ModStart> ) ; goto VAR_101 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; } } if ( ! <S2SV_ModEnd> METHOD_5 ( VAR_35 <S2SV_ModStart> VAR_43 ) ) return VAR_47 ; if ( ( * VAR_44 ) [ VAR_43 - 1 ] != '\\0' ) return VAR_47 ; if ( METHOD_7 ( * VAR_44 , '\\0' , VAR_43 - 1 ) != VAR_45 ) return VAR_47 ; return VAR_46
<S2SV_ModStart> ; TYPE_21 VAR_131 <S2SV_ModEnd> , VAR_160 ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> VAR_160 = 0 <S2SV_ModStart> VAR_160 = 1 <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( VAR_164 < VAR_165 ) { if ( <S2SV_ModEnd> VAR_170 -> VAR_145 <S2SV_ModStart> VAR_170 -> VAR_145 > 3 <S2SV_ModEnd> || ( VAR_160 <S2SV_ModStart> 30 ) ) <S2SV_ModEnd> { METHOD_15 ( <S2SV_ModStart> if ( VAR_160 <S2SV_ModEnd> ) { if <S2SV_ModStart> goto VAR_169 ; }
<S2SV_ModStart> = METHOD_8 ( VAR_51 ) ; if ( ( VAR_38 & VAR_52 ) != 0 ) { VAR_43 = METHOD_8 ( VAR_53 <S2SV_ModEnd> ) ; METHOD_9 <S2SV_ModStart> ; METHOD_9 ( VAR_53 <S2SV_ModEnd> , VAR_43 & <S2SV_ModStart> VAR_43 & ~ DM9000_IMR_LNKCHGI <S2SV_ModEnd> ) ; VAR_45 <S2SV_ModStart> ( VAR_38 & DM9000_ISR_PT ) != 0 ) { if ( ( METHOD_8 ( DM9000_NSR ) & ( DM9000_NSR_TX2END | DM9000_NSR_TX1END ) ) != 0 <S2SV_ModEnd> ) { if <S2SV_ModStart> } METHOD_9 ( VAR_51 , DM9000_ISR_PT ) ; } if ( ( VAR_38 & DM9000_ISR_PR ) != 0 ) { VAR_43 = METHOD_8 ( VAR_53 <S2SV_ModEnd> ) ; METHOD_9 <S2SV_ModStart> ; METHOD_9 ( VAR_53 <S2SV_ModEnd> , VAR_43 & <S2SV_ModStart> VAR_43 & ~ DM9000_IMR_PRI <S2SV_ModEnd> ) ; VAR_45
<S2SV_ModStart> 4 ; } if ( VAR_169 -> VAR_167 == VAR_180 ) { VAR_162 = 8 ; VAR_165 = 8 ; } <S2SV_ModStart> VAR_167 == VAR_137 || VAR_169 -> VAR_167 == VAR_180
<S2SV_ModStart> ",norecovery" ) ; if ( METHOD_63 ( TYPE_38 , VAR_145 ) ) METHOD_64 ( VAR_144 , ",dioread_nolock" ) ;
<S2SV_ModStart> VAR_28 ) { if ( VAR_28 -> VAR_22 == VAR_31 ) return VAR_32 ;
<S2SV_ModStart> VAR_144 ; } <S2SV_ModEnd> } else if <S2SV_ModStart> VAR_144 ; } <S2SV_ModEnd> } else if <S2SV_ModStart> VAR_144 ; } } else <S2SV_ModEnd> { METHOD_30 (
<S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) ) ; <S2SV_ModStart> 0 ) return ; METHOD_11 ( ( VAR_44 , "%s" , VAR_10 ) )
<S2SV_ModStart> ] ; TYPE_2 <S2SV_ModEnd> VAR_94 , VAR_197 <S2SV_ModStart> VAR_172 ) { VAR_198 * VAR_199 ; TYPE_2 VAR_142 ; <S2SV_ModStart> "Checking<S2SV_blank>memory<S2SV_blank>size\\n" ) ; VAR_199 = METHOD_69 ( 4 , VAR_52 ) ; if ( ! VAR_199 ) { VAR_197 = - VAR_60 ; goto VAR_191 ; } * VAR_199 <S2SV_ModEnd> = 0x12345678 ; <S2SV_ModStart> , 0x7a80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> 4 ) ; * VAR_199 <S2SV_ModEnd> = 0x87654321 ; <S2SV_ModStart> , 0xfa80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> , 0x7a80 , VAR_199 <S2SV_ModEnd> , 4 ) <S2SV_ModStart> ; switch ( * VAR_199 <S2SV_ModEnd> ) { case <S2SV_ModStart> break ; } METHOD_70 ( VAR_199 ) ;
<S2SV_ModStart> ; TYPE_5 * VAR_46 = & VAR_42 ; TYPE_5 * <S2SV_ModStart> VAR_25 , & VAR_46 <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> 0 ) { if ( VAR_230 < ( TYPE_11 ) VAR_195 ) goto VAR_231 ; <S2SV_ModStart> VAR_217 ) ; if ( VAR_195 < 0 ) return ; <S2SV_ModStart> case VAR_137 : METHOD_1 ( * VAR_224 ) ; <S2SV_ModStart> VAR_217 ) ; if ( VAR_195 < 0 ) return ; <S2SV_ModStart> , VAR_224 ) ; if ( VAR_195 < 0 ) return <S2SV_ModStart> VAR_191 ) ; if ( VAR_195 < 0 ) return ;
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> VAR_39 == VAR_33 ) || ( <S2SV_ModEnd> VAR_36 < 16 <S2SV_ModStart> VAR_36 < 16 ) || ( <S2SV_ModEnd> VAR_36 > 256 <S2SV_ModStart> VAR_36 > 256 )
<S2SV_ModStart> ] ) ) ) ; METHOD_113 ( VAR_1133 [ 1 ]
<S2SV_ModStart> TYPE_34 VAR_308 [ VAR_629 <S2SV_ModEnd> ] ; VAR_48
<S2SV_ModStart> ; if ( METHOD_10 ( VAR_57 ) ) return - VAR_52 ; if (
<S2SV_ModStart> -> VAR_105 ) METHOD_16 <S2SV_ModEnd> ( & VAR_159
<S2SV_ModStart> ; TYPE_5 VAR_126 = VAR_132 ; TYPE_5 VAR_128 = VAR_132 <S2SV_ModEnd> ; TYPE_6 VAR_127 <S2SV_ModStart> VAR_124 ) ; VAR_129 : METHOD_19 ( & VAR_127 , & VAR_126 ) ; METHOD_19 ( & VAR_127 , & VAR_128 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_130
<S2SV_ModStart> VAR_4 ) ) ; VAR_13 * VAR_14 ; VAR_13 * VAR_15 ; VAR_13 * VAR_16 <S2SV_ModStart> "}\\n" ) ; VAR_14 = METHOD_13 ( "/tmp/rs-filter-graph.%u" , METHOD_12 ( ) ) ; VAR_15 = METHOD_13 ( "%s.%u.png" , VAR_14 , METHOD_12 ( ) ) ; METHOD_6 ( VAR_14 <S2SV_ModEnd> , VAR_11 -> <S2SV_ModStart> VAR_10 ) ; VAR_16 = METHOD_13 ( "dot<S2SV_blank>-Tpng<S2SV_blank>>%s<S2SV_blank><%s" , VAR_15 , VAR_14 ) ; <S2SV_ModStart> != METHOD_9 ( VAR_16 <S2SV_ModEnd> ) ) METHOD_10 <S2SV_ModStart> "Calling<S2SV_blank>dot<S2SV_blank>failed" ) ; METHOD_14 ( VAR_16 ) ; VAR_16 = METHOD_13 ( "gnome-open<S2SV_blank>%s" , VAR_15 ) ; <S2SV_ModStart> != METHOD_9 ( VAR_16 <S2SV_ModEnd> ) ) METHOD_10 <S2SV_ModStart> METHOD_10 ( "Calling<S2SV_blank>gnome-open<S2SV_blank>failed." ) ; METHOD_14 ( VAR_16 ) ; METHOD_14 ( VAR_14 ) ; METHOD_14 ( VAR_15
<S2SV_ModStart> ; } } VAR_40 : <S2SV_ModEnd> return VAR_45 ;
<S2SV_ModStart> VAR_83 ) && VAR_132 -> VAR_53 == METHOD_11 ( VAR_54 ) && <S2SV_ModStart> ) ) ) METHOD_29 ( VAR_132 ) -> VAR_97 |= VAR_139 ; <S2SV_ModEnd> if ( VAR_132
<S2SV_ModStart> TYPE_3 VAR_59 = METHOD_19 ( STRUCT_OR_UNION_11 -> VAR_57 ) ; TYPE_4 VAR_74 = METHOD_19 ( STRUCT_OR_UNION_11 -> VAR_74 ) <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> { if ( VAR_74 < 0 ) { <S2SV_ModEnd> VAR_72 -> VAR_68 <S2SV_ModStart> = METHOD_15 ( VAR_74 <S2SV_ModEnd> ) ; METHOD_18
<S2SV_ModStart> VAR_50 ; } if ( VAR_128 != 0 && VAR_179 > 10000000 / VAR_128 / VAR_176 ) { TYPE_32 VAR_234 ; TYPE_33 VAR_235 = ( TYPE_33 ) VAR_179 * VAR_128 * VAR_176 ; TYPE_34 VAR_236 = METHOD_39 ( VAR_232 ) ; if ( VAR_235 > ( TYPE_33 ) VAR_237 ) { VAR_235 = ( TYPE_33 ) VAR_237 ; } METHOD_40 ( VAR_232 , ( TYPE_34 ) VAR_235 - 1 , VAR_238 ) ; if ( METHOD_33 ( & VAR_234 , 1 , 1 , VAR_232 ) != 1 ) { METHOD_38 ( VAR_232 ) ; return VAR_208 ; } METHOD_40 ( VAR_232 , VAR_236 , VAR_238 ) ; }
<S2SV_ModStart> VAR_47 ) ; if ( VAR_180 -> VAR_181 . VAR_52 < 1 ) { METHOD_32 ( & VAR_174 -> VAR_188 , "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n" ) ; VAR_189 = - VAR_190 ; goto VAR_187 ; }
<S2SV_ModStart> VAR_25 ) { struct STRUCT_OR_UNION_17 VAR_29 ; <S2SV_ModStart> |= VAR_16 ; METHOD_8 ( & VAR_29 , STRUCT_OR_UNION_16 ) ; <S2SV_ModStart> , VAR_20 , VAR_29 <S2SV_ModEnd> . VAR_29 , <S2SV_ModStart> , VAR_27 , VAR_29 <S2SV_ModEnd> . VAR_29 , <S2SV_ModStart> VAR_29 , 0 ) ; METHOD_9 ( & VAR_29
<S2SV_ModStart> VAR_13 ) return - VAR_26 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ) ) ; if ( ! VAR_21 -> VAR_19 ) { METHOD_6 ( VAR_21 ) ; PLIST_BIN_ERR ( "%s:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>%" PRIu64 "<S2SV_blank>bytes\\n" , VAR_22 , sizeof ( TYPE_5 ) * ( VAR_15 + 1 ) ) ; return VAR_20 ; }
<S2SV_ModStart> TYPE_24 METHOD_0 ( TYPE_8 * VAR_249 , <S2SV_ModStart> * VAR_233 ; <S2SV_ModEnd> TYPE_9 * VAR_242 <S2SV_ModStart> ; TYPE_32 VAR_248 <S2SV_ModEnd> ; TYPE_24 VAR_232 <S2SV_ModStart> } if ( VAR_248 . VAR_245 . VAR_246 >= VAR_37 ) return - VAR_38 ; dctlprintk ( VAR_249 , printk ( MYIOC_s_DEBUG_FMT "mptctl_hp_targetinfo<S2SV_blank>called.\\n" , VAR_249 -> VAR_250 ) ) ; if ( ( VAR_249 -> VAR_46 == VAR_44 ) || ( VAR_249 -> VAR_46 == VAR_47 ) ) return 0 ; if ( ( VAR_249 -> VAR_74 . VAR_64 == 0 ) || ( VAR_249 -> VAR_237 <S2SV_ModEnd> == VAR_239 ) <S2SV_ModStart> VAR_239 ) ) return 0 ; if ( VAR_249 -> VAR_237 -> VAR_56 != VAR_248 . VAR_245 . VAR_59 ) <S2SV_ModEnd> return - VAR_60 <S2SV_ModStart> - VAR_60 ; <S2SV_ModEnd> VAR_232 = VAR_249
<S2SV_ModStart> { if ( VAR_21 >= VAR_11 ) return 0 ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; } return VAR_9 ;
<S2SV_ModStart> VAR_33 ) { <S2SV_ModEnd> TYPE_11 VAR_42 [ <S2SV_ModStart> 1 ] ; TYPE_8 VAR_58 ; VAR_58 = VAR_24 ; if ( VAR_58 > VAR_34 ) VAR_58 = VAR_34 ; <S2SV_ModStart> , VAR_33 , VAR_58 <S2SV_ModEnd> ) ; VAR_42 <S2SV_ModStart> ; VAR_42 [ VAR_58 <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> ; if ( METHOD_12 ( <S2SV_ModStart> ) , VAR_9 )
<S2SV_ModStart> VAR_101 ) ; METHOD_42 ( VAR_101 ) ; METHOD_43 ( VAR_101 ) ;
<S2SV_ModStart> ( METHOD_1 ( VAR_16 <S2SV_ModEnd> , METHOD_2 (
<S2SV_ModStart> ( VAR_45 ) > VAR_14 ) { VAR_66 = VAR_63 ; return VAR_65 ; } if ( METHOD_2 ( VAR_45 , VAR_35 , VAR_40 , VAR_41 , & VAR_42 , VAR_39 ) != 0 || ( METHOD_3 ( VAR_40 , VAR_41 , VAR_42 , & VAR_54 , STRUCT_OR_UNION_10 , & VAR_60 ) != 0 && METHOD_4 ( VAR_45 , & VAR_54 , STRUCT_OR_UNION_10 , & VAR_60 ) != 0 ) ) { VAR_66 = VAR_63 ; return VAR_65 ; } VAR_67 = ( TYPE_13 * ) METHOD_5 ( sizeof ( TYPE_13 ) ) ; if ( ! VAR_67 ) return VAR_65 ; if ( VAR_54 != VAR_55 <S2SV_ModEnd> ) { VAR_66 <S2SV_ModStart> = VAR_63 ; METHOD_8 ( VAR_67 ) ; return VAR_65 ; } if ( METHOD_7 ( STRUCT_OR_UNION_10 , VAR_60 , VAR_67 ) != 0 <S2SV_ModEnd> ) { VAR_66 <S2SV_ModStart> = VAR_63 ; <S2SV_ModEnd> METHOD_8 ( VAR_67 <S2SV_ModStart> VAR_65 ; } <S2SV_ModEnd> VAR_66 = 0
<S2SV_ModStart> * VAR_23 , TYPE_10 VAR_37 , <S2SV_ModStart> ; VAR_36 -> VAR_21 . METHOD_3 . VAR_37 = VAR_37 ; VAR_36 ->
<S2SV_ModStart> STRUCT_OR_UNION_8 * ) <S2SV_ModEnd> VAR_29 -> VAR_30 <S2SV_ModStart> VAR_29 -> VAR_30 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_6 <S2SV_ModStart> struct STRUCT_OR_UNION_6 VAR_35 <S2SV_ModEnd> ; VAR_35 . <S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> ( TYPE_1 )
<S2SV_ModStart> VAR_10 ) { TYPE_7 VAR_14 = <S2SV_ModEnd> METHOD_2 ( VAR_9 <S2SV_ModStart> ( VAR_9 ) ; TYPE_7 VAR_15 = METHOD_4 ( VAR_9 , VAR_10 ) ; METHOD_1 ( VAR_14 <S2SV_ModStart> ( TYPE_8 ) VAR_15 , <S2SV_ModEnd> ( ( TYPE_9
<S2SV_ModStart> ; unsigned TYPE_6 * VAR_42 = VAR_60 <S2SV_ModEnd> ; unsigned TYPE_7 <S2SV_ModStart> unsigned TYPE_7 VAR_43 <S2SV_ModEnd> ; const TYPE_8 <S2SV_ModStart> ; if ( VAR_60 == VAR_59 ) goto VAR_53 ; VAR_43 = METHOD_21 ( VAR_59 ) ; if ( VAR_43 <= 0 ) goto VAR_53 ; VAR_42 = METHOD_22 ( VAR_43 ) ; if ( VAR_60 == VAR_42 ) goto VAR_53 ; if ( <S2SV_ModStart> ; VAR_53 : METHOD_23 ( VAR_42 ) ;
<S2SV_ModStart> return VAR_36 ; METHOD_13 ( VAR_28 ) ;
<S2SV_ModStart> -> VAR_3 ; METHOD_2 ( ) ;
<S2SV_ModStart> TYPE_1 VAR_74 ; <S2SV_ModEnd> TYPE_4 VAR_76 ; <S2SV_ModStart> VAR_53 ) ; VAR_74 = METHOD_5 ( ( TYPE_5 * ) & VAR_75 -> VAR_51 , sizeof ( VAR_75 -> VAR_51 ) ) ; VAR_80 = METHOD_7 ( & VAR_81 -> VAR_88 , VAR_72 , VAR_73 , VAR_74 , VAR_75 , VAR_76 , VAR_77 <S2SV_ModEnd> , VAR_75 -> <S2SV_ModStart> VAR_75 -> VAR_68 <S2SV_ModEnd> , VAR_79 )
<S2SV_ModStart> '=' : case \'"\' : case '\\\\' : case
<S2SV_ModStart> -> VAR_29 = METHOD_7 ( VAR_42 , <S2SV_ModEnd> sizeof ( struct
<S2SV_ModStart> * VAR_84 ; if ( VAR_61 < 2 ) { return VAR_118 ; }
<S2SV_ModStart> ) VAR_18 ; <S2SV_ModEnd> METHOD_5 ( VAR_23
<S2SV_ModStart> ) goto VAR_67 <S2SV_ModEnd> ; VAR_66 = <S2SV_ModStart> != VAR_60 ) { <S2SV_ModStart> , sizeof ( VAR_63 ) ) ; * VAR_21 = sizeof ( VAR_63 ) ; } <S2SV_ModEnd> VAR_64 : METHOD_5
<S2SV_ModStart> * VAR_32 ; if ( VAR_27 > VAR_33 ) { return VAR_28 ; }
<S2SV_ModStart> ) ; } if ( ( ( TYPE_117 ) VAR_982 -> VAR_937 * VAR_982 -> VAR_965 ) > METHOD_126 ( VAR_982 ) ) METHOD_142 ( VAR_975 , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> return VAR_17 ; <S2SV_ModEnd> } return VAR_18
<S2SV_ModStart> ; VAR_153 . VAR_174 = VAR_164 ; VAR_153 .
<S2SV_ModStart> TYPE_11 VAR_163 ; if ( VAR_134 <= VAR_31 ) return 0 ; <S2SV_ModStart> ) ; } if ( VAR_134 <= VAR_56 ) return 0 ; <S2SV_ModStart> VAR_68 ) ; if ( VAR_133 + VAR_134 > VAR_119 ) return 0 ;
<S2SV_ModStart> &= VAR_16 ; if ( VAR_75 == 3 ) return 0 ;
<S2SV_ModStart> VAR_51 , VAR_27 | VAR_265 | VAR_266 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; goto VAR_235 ; } else { VAR_263 = - 1 <S2SV_ModStart> VAR_261 ) ; <S2SV_ModEnd> if ( VAR_263 <S2SV_ModStart> if ( VAR_263 != - 1 <S2SV_ModEnd> ) METHOD_53 (
<S2SV_ModStart> ; VAR_71 = METHOD_22 <S2SV_ModEnd> ( VAR_45 +
<S2SV_ModStart> * METHOD_0 ( TYPE_7 <S2SV_ModEnd> VAR_11 , TYPE_4 <S2SV_ModStart> . VAR_11 = ( TYPE_4 )
<S2SV_ModStart> VAR_126 ++ ) if ( VAR_126 >= 64 ) break
<S2SV_ModStart> ; register struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_55 ; <S2SV_ModStart> ( VAR_55 -> VAR_57 ) return ( VAR_55 -> VAR_57 ) ; VAR_55 -> VAR_57 <S2SV_ModEnd> = VAR_54 = <S2SV_ModStart> ( VAR_55 -> VAR_57 <S2SV_ModEnd> == VAR_33 ) <S2SV_ModStart> ( VAR_55 -> VAR_57 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ) { VAR_19 ++ <S2SV_ModEnd> ; } if
<S2SV_ModStart> = METHOD_13 ( TYPE_19 <S2SV_ModEnd> , VAR_363 * <S2SV_ModStart> = METHOD_13 ( TYPE_19 <S2SV_ModEnd> , VAR_363 *
<S2SV_ModStart> ) ) ; if ( ! VAR_21 -> VAR_19 ) { METHOD_6 ( VAR_21 ) ; PLIST_BIN_ERR ( "%s:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>%" PRIu64 "<S2SV_blank>bytes\\n" , VAR_22 , sizeof ( TYPE_5 ) * ( VAR_15 + 1 ) ) ; return VAR_20 ; }
<S2SV_ModStart> case VAR_983 : METHOD_264 ( VAR_1043 ) ;
<S2SV_ModStart> ; TYPE_10 VAR_183 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } * VAR_22 = sizeof ( * VAR_137 ) ;
<S2SV_ModStart> VAR_42 ) { <S2SV_ModEnd> TYPE_4 VAR_21 ; <S2SV_ModStart> ) ; } smb_ofile_flush ( VAR_42 , <S2SV_ModEnd> VAR_42 -> VAR_32 <S2SV_ModStart> VAR_42 -> VAR_32 <S2SV_ModEnd> ) ; (
<S2SV_ModStart> VAR_23 ) ; VAR_11 -> VAR_12 = VAR_25 ; return ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ) { const TYPE_4 VAR_23 = ( TYPE_4 ) <S2SV_ModEnd> VAR_21 -> VAR_17 <S2SV_ModStart> -> VAR_17 + ( TYPE_4 ) <S2SV_ModStart> VAR_21 -> VAR_22 ; if ( VAR_23 <S2SV_ModEnd> > METHOD_1 (
<S2SV_ModStart> < 0 ) { METHOD_30 ( VAR_236 ) ; <S2SV_ModStart> goto VAR_239 ; }
<S2SV_ModStart> VAR_42 , VAR_31 , sizeof ( VAR_42 ) <S2SV_ModStart> VAR_42 , VAR_31 , sizeof ( VAR_42 )
<S2SV_ModStart> ; if ( METHOD_17 ( <S2SV_ModStart> ] . VAR_36 ) <S2SV_ModStart> } VAR_53 = METHOD_17 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_37 & VAR_51 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_46 , VAR_52 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ( VAR_46 , VAR_50 , VAR_51 <S2SV_ModEnd> ) ; VAR_17 <S2SV_ModStart> ( VAR_46 , VAR_53 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_17 & VAR_54 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> } if ( METHOD_1 ( VAR_46 , VAR_55 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_46 , VAR_50 , VAR_56 <S2SV_ModEnd> ) ; do <S2SV_ModStart> ( VAR_46 , VAR_57 , VAR_58 | VAR_59 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_22 ; METHOD_2 <S2SV_ModEnd> ( VAR_22 . <S2SV_ModStart> . VAR_4 , "cipher" , sizeof ( VAR_22 . VAR_4 ) <S2SV_ModEnd> ) ; VAR_22
<S2SV_ModStart> ) ; } if ( VAR_9 -> VAR_10 != VAR_9 -> VAR_11 ) METHOD_4 ( VAR_9 -> VAR_10 ) ;
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> > 1 ) METHOD_3 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> ) ; else METHOD_4 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> VAR_60 ) { if ( * VAR_91 > 0xff ) return VAR_37 ;
<S2SV_ModStart> VAR_22 = - 1LL <S2SV_ModEnd> ; ++ VAR_29 <S2SV_ModStart> VAR_25 -> VAR_26 = METHOD_4 ( VAR_29 , VAR_25 -> VAR_26 ) <S2SV_ModEnd> ; } METHOD_3
<S2SV_ModStart> VAR_9 ) { <S2SV_ModEnd> VAR_2 * VAR_18 <S2SV_ModStart> ; for ( TYPE_7
<S2SV_ModStart> VAR_94 == VAR_95 && VAR_275 -> VAR_277 == VAR_278
<S2SV_ModStart> , VAR_80 ) ; goto VAR_265
<S2SV_ModStart> -> VAR_4 ; TYPE_1 VAR_18 = 0 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> VAR_14 ) { METHOD_3 ( & VAR_15 -> VAR_19 ) ; VAR_13 -> VAR_20 [ 0 ] = 0xde ; VAR_13 -> VAR_20 [ 1 ] = 0 ; <S2SV_ModStart> = 1 ; VAR_18 = <S2SV_ModEnd> METHOD_2 ( VAR_15 <S2SV_ModStart> ( VAR_15 , VAR_13 -> VAR_20 <S2SV_ModEnd> , 2 , <S2SV_ModStart> 0 ) ; METHOD_4 ( & VAR_15 -> VAR_19 ) ; } return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_16 , <S2SV_ModStart> -- ; } <S2SV_ModEnd> VAR_16 -> VAR_17
<S2SV_ModStart> VAR_11 ) ; <S2SV_ModEnd> METHOD_8 ( VAR_14 <S2SV_ModStart> VAR_13 ) ; <S2SV_ModEnd> METHOD_8 ( VAR_14 <S2SV_ModStart> VAR_15 ) ; <S2SV_ModEnd> VAR_16 = &
<S2SV_ModStart> VAR_7 ) { struct STRUCT_OR_UNION_27 * VAR_70 , * VAR_71 ; TYPE_2 VAR_72 ; <S2SV_ModStart> VAR_69 ; } VAR_70 = METHOD_36 ( STRUCT_OR_UNION_26 ) ; VAR_71 = METHOD_36 ( VAR_65 ) ; <S2SV_ModStart> ) ; } VAR_72 = METHOD_37 ( STRUCT_OR_UNION_26 ) ; if ( VAR_72 ) { METHOD_38 ( STRUCT_OR_UNION_26 ) ; METHOD_39 ( VAR_65 ) ; } <S2SV_ModStart> 1 ) ; METHOD_40 ( & VAR_67 -> VAR_68 ) ; if ( VAR_71 != VAR_70 ) { METHOD_41 ( VAR_70 <S2SV_ModEnd> , VAR_63 ) <S2SV_ModStart> VAR_63 ) ; METHOD_42 ( VAR_71 <S2SV_ModEnd> , VAR_63 ) <S2SV_ModStart> ; if ( METHOD_32 ( STRUCT_OR_UNION_26 ) && <S2SV_ModStart> ( STRUCT_OR_UNION_26 ) ) { METHOD_41 ( VAR_70 , VAR_66 ) ; METHOD_42 ( VAR_71 , VAR_66 ) ; } if ( VAR_72 && METHOD_43 ( VAR_67 ) ) { METHOD_41 ( VAR_70 , VAR_73 ) ; METHOD_42 ( VAR_71 , VAR_73 ) ; } } METHOD_44 ( <S2SV_ModEnd> ) ; return
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_14 <S2SV_ModEnd> ; VAR_14 =
<S2SV_ModStart> TYPE_8 VAR_42 [ 1024 + 1 ] ; TYPE_8 * VAR_43 = VAR_42 ; TYPE_10 VAR_44 = sizeof ( VAR_42 ) , VAR_45 <S2SV_ModEnd> ; register TYPE_7 <S2SV_ModStart> ) ) { if ( VAR_44 <= 1 ) return ( VAR_42 ) ; VAR_45 = METHOD_3 ( VAR_43 , VAR_30 , VAR_44 ) ; if ( VAR_45 >= VAR_44 ) return ( VAR_42 ) ; VAR_43 += VAR_45 ; VAR_44 -= VAR_45 ; if ( VAR_44 <= 1 ) return ( VAR_42 ) ; VAR_45 = METHOD_3 ( VAR_43 <S2SV_ModEnd> , VAR_34 -> <S2SV_ModStart> VAR_34 -> VAR_29 , VAR_44 ) ; if ( VAR_45 >= VAR_44 ) return ( VAR_42 ) ; VAR_43 += VAR_45 ; VAR_44 -= VAR_45 <S2SV_ModEnd> ; VAR_30 = <S2SV_ModStart> } if ( VAR_43 == VAR_42 <S2SV_ModEnd> ) ( TYPE_9
<S2SV_ModStart> VAR_856 = VAR_336 ; if ( VAR_856 > METHOD_193 ( VAR_941 ) ) METHOD_194 ( VAR_953 , "InsufficientImageDataInFile" )
<S2SV_ModStart> ( VAR_175 = <S2SV_ModEnd> METHOD_34 ( STRUCT_OR_UNION_12
<S2SV_ModStart> ) { case VAR_36 : { VAR_33 = METHOD_7 ( VAR_35 -> VAR_33 ) ; METHOD_13 ( VAR_35 -> VAR_33 , VAR_37 , VAR_32 , "yes" ) ; METHOD_14 ( VAR_33 , VAR_35 -> VAR_29 , VAR_30 , VAR_32 , VAR_32 ) ; METHOD_15 ( VAR_35 -> VAR_33 ) ; <S2SV_ModEnd> VAR_17 = METHOD_1 <S2SV_ModStart> VAR_22 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_33
<S2SV_ModStart> ) METHOD_4 ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>output<S2SV_blank>file<S2SV_blank>\'%s\'" <S2SV_ModEnd> , VAR_7 )
<S2SV_ModStart> VAR_149 ; TYPE_10 VAR_181 = 1 ; TYPE_10 <S2SV_ModStart> -> VAR_151 ) ; while ( VAR_181 ) { VAR_181 = 0 <S2SV_ModStart> VAR_179 ) ; VAR_181 = 1 ; } <S2SV_ModEnd> } } }
<S2SV_ModStart> 0x0004 : { if ( VAR_731 == ( unsigned TYPE_280 * ) VAR_1675 ) break ; <S2SV_ModStart> 0x0008 : { if ( VAR_731 == ( unsigned TYPE_280 * ) VAR_1675 ) break ; <S2SV_ModStart> 0 ; VAR_1468 <= <S2SV_ModEnd> ( TYPE_358 ) <S2SV_ModStart> ( TYPE_358 ) <S2SV_ModEnd> METHOD_150 ( VAR_1139 <S2SV_ModStart> METHOD_150 ( VAR_1139 <S2SV_ModEnd> ) ; VAR_1468 <S2SV_ModStart> VAR_1675 ) { if ( VAR_1591 . VAR_1580 <= METHOD_150 ( VAR_1139 ) ) <S2SV_ModStart> VAR_1580 ] ; if ( VAR_1591 . VAR_1586 <= METHOD_150 ( VAR_1139 ) ) <S2SV_ModStart> VAR_1586 ] ; if ( VAR_1591 . VAR_1592 <= METHOD_150 ( VAR_1139 ) )
<S2SV_ModStart> { if ( METHOD_6 ( <S2SV_ModStart> VAR_9 , 0 )
<S2SV_ModStart> ) ; return METHOD_15 ( VAR_76 -> VAR_48 , VAR_79 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_26 -> VAR_27 >= ( <S2SV_ModEnd> VAR_26 -> VAR_23 <S2SV_ModStart> VAR_26 -> VAR_23 - 1 )
<S2SV_ModStart> . VAR_1098 ; if ( VAR_1332 [ VAR_896 ] . VAR_1091 < VAR_1091 METHOD_573 { <S2SV_ModStart> VAR_898 METHOD_573 ; } else { METHOD_343 ( VAR_74 == VAR_1091 METHOD_573 ; VAR_1242 = VAR_898 ; VAR_74 = VAR_1342 ; }
<S2SV_ModStart> { VAR_45 = METHOD_11 ( STRUCT_OR_UNION_9 <S2SV_ModEnd> , & STRUCT_OR_UNION_9 <S2SV_ModStart> STRUCT_OR_UNION_9 -> VAR_26 , & VAR_44 ) ; if ( VAR_45 ) return VAR_45 ; <S2SV_ModEnd> STRUCT_OR_UNION_9 -> VAR_18 <S2SV_ModStart> STRUCT_OR_UNION_9 ) ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> VAR_10 = 0 ; METHOD_10 ( VAR_17 , 3 , "in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_map" )
<S2SV_ModStart> ) METHOD_1 ( METHOD_22 ( VAR_30 , VAR_95 -> VAR_71 * VAR_95 -> VAR_37 ) <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> ) goto VAR_83 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * VAR_20 = sizeof ( * VAR_69 ) ;
<S2SV_ModStart> { if ( METHOD_3 ( VAR_24 ) <S2SV_ModEnd> ) { TYPE_2
<S2SV_ModStart> TYPE_40 ) ) ; if ( TYPE_42 . VAR_288 == VAR_276 ) return - 1
<S2SV_ModStart> ] & 0x40 && VAR_37 > 0
<S2SV_ModStart> , VAR_8 ) > 0 ? : 0
<S2SV_ModStart> -> VAR_18 -> VAR_20 , VAR_16 -> VAR_18 ->
<S2SV_ModStart> , VAR_173 ; <S2SV_ModEnd> VAR_168 = VAR_159 <S2SV_ModStart> goto VAR_156 ; <S2SV_ModEnd> METHOD_16 ( & <S2SV_ModStart> ( & VAR_150 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_371 = 0 ; TYPE_0 VAR_375 = VAR_336 <S2SV_ModStart> < 5 ) goto VAR_376 <S2SV_ModEnd> ; VAR_370 += <S2SV_ModStart> ! VAR_110 ) goto VAR_376 <S2SV_ModEnd> ; VAR_371 = <S2SV_ModStart> ! VAR_143 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; VAR_356 = <S2SV_ModStart> ; default : goto VAR_376 <S2SV_ModEnd> ; } } <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_201 ; } goto VAR_377 <S2SV_ModEnd> ; } case <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } goto VAR_377 ; } goto VAR_377 <S2SV_ModEnd> ; } case <S2SV_ModStart> ; default : goto VAR_376 <S2SV_ModEnd> ; } VAR_341 <S2SV_ModStart> ! VAR_298 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_296 ) goto VAR_376 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_319 ) goto VAR_376 <S2SV_ModEnd> ; VAR_356 = <S2SV_ModStart> ! VAR_340 ) goto VAR_376 <S2SV_ModEnd> ; VAR_371 = <S2SV_ModStart> break ; } if ( METHOD_57 ( STRUCT_OR_UNION_43 , VAR_365 ) ) { VAR_367 = METHOD_58 ( STRUCT_OR_UNION_43 , VAR_365 , VAR_366 ) ; VAR_367 -> VAR_368 = METHOD_59 ( VAR_369 , VAR_370 , VAR_371 , VAR_372 , VAR_373 ) ; } VAR_377 : VAR_375 = VAR_374 ; VAR_376 : <S2SV_ModStart> ) VAR_370 ; return VAR_375 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> unsigned TYPE_91 * VAR_507 <S2SV_ModEnd> , * VAR_456 <S2SV_ModStart> "MemoryAllocationFailed" ) ; VAR_507 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> VAR_458 ) { VAR_507 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> sizeof ( * VAR_507 ) ) ; if ( VAR_507 <S2SV_ModEnd> == ( unsigned <S2SV_ModStart> VAR_420 ] = VAR_507 <S2SV_ModEnd> [ VAR_333 + <S2SV_ModStart> ) METHOD_70 ( VAR_507 <S2SV_ModEnd> , VAR_456 , <S2SV_ModStart> == VAR_458 ) VAR_507 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_91 ( VAR_507 <S2SV_ModEnd> ) ; METHOD_97 <S2SV_ModStart> == VAR_458 ) VAR_507 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_91 ( VAR_507 <S2SV_ModEnd> ) ; METHOD_97 <S2SV_ModStart> == VAR_458 ) VAR_507 <S2SV_ModEnd> = ( unsigned <S2SV_ModStart> ) METHOD_91 ( VAR_507 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_11 ) ; if ( ( STRUCT_OR_UNION_11 -> VAR_33 < VAR_34 ) || ( STRUCT_OR_UNION_11 -> VAR_33 > VAR_35 ) ) { METHOD_8 ( & VAR_5 -> VAR_36 , "%s:<S2SV_blank>invalid<S2SV_blank>device<S2SV_blank>index:%d\\n" , VAR_10 , STRUCT_OR_UNION_11 -> VAR_33 ) ; return VAR_9 ; }
<S2SV_ModStart> . VAR_18 ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> = "INBOX" ; return METHOD_2 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> 0 , & <S2SV_ModEnd> VAR_20 -> VAR_21 <S2SV_ModStart> VAR_20 -> VAR_21 , VAR_24 , VAR_25 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_101 ) ; METHOD_42 ( VAR_101 ) ; METHOD_43 ( VAR_101 ) ;
<S2SV_ModStart> VAR_47 ) ; VAR_46 -> VAR_47 = VAR_49 ;
<S2SV_ModStart> STRUCT_OR_UNION_6 * STRUCT_OR_UNION_6 , TYPE_1 VAR_10 ) { TYPE_1 VAR_11 = VAR_10 ? VAR_12 : 0 ; <S2SV_ModEnd> TYPE_1 VAR_9 = <S2SV_ModStart> , STRUCT_OR_UNION_6 , VAR_11 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , STRUCT_OR_UNION_6 , VAR_11 | VAR_13 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_274 ) { <S2SV_ModEnd> return VAR_179 ; <S2SV_ModStart> VAR_179 ; } TYPE_17 VAR_275 = VAR_181 -> VAR_37 * sizeof ( struct STRUCT_OR_UNION_6 ) ; VAR_98 = METHOD_40 ( VAR_275 ) ; if ( ! VAR_98 ) { METHOD_20 ( VAR_274 ) ; return VAR_179 ; } METHOD_41 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , <S2SV_ModEnd> VAR_181 -> VAR_72 <S2SV_ModStart> VAR_72 . VAR_66 , ( TYPE_16 * ) VAR_98 , VAR_275 <S2SV_ModStart> ; VAR_78 = METHOD_42 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , <S2SV_ModEnd> VAR_181 -> VAR_72 <S2SV_ModStart> = VAR_105 ; TYPE_17 VAR_276 = <S2SV_ModEnd> VAR_98 [ VAR_99 <S2SV_ModStart> ] . VAR_100 ; if ( VAR_276 < 0 || VAR_276 <S2SV_ModStart> { METHOD_19 ( "corrupted<S2SV_blank>file:<S2SV_blank>pathFileOffset<S2SV_blank>><S2SV_blank>bin->size<S2SV_blank>(%d)\\n" , VAR_276 <S2SV_ModEnd> ) ; METHOD_20 <S2SV_ModStart> } VAR_268 = METHOD_43 <S2SV_ModEnd> ( VAR_181 -> <S2SV_ModStart> VAR_181 -> VAR_264 , VAR_276 , 64 <S2SV_ModEnd> ) ; VAR_226
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_1 VAR_10 , struct STRUCT_OR_UNION_10 * STRUCT_OR_UNION_10 , <S2SV_ModStart> STRUCT_OR_UNION_9 ) { TYPE_1 VAR_11 ; VAR_11 = METHOD_1 ( VAR_10 , STRUCT_OR_UNION_10 , & STRUCT_OR_UNION_9 -> VAR_12 , STRUCT_OR_UNION_9 -> VAR_7 ) ; if ( VAR_11 < 0 ) return VAR_11 ; <S2SV_ModStart> -> VAR_6 = VAR_11 <S2SV_ModEnd> ; STRUCT_OR_UNION_9 ->
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_25 ; if ( VAR_20 -> VAR_21 >= VAR_29 - VAR_26 ) VAR_20 -> VAR_21 = 0
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_9 * VAR_69 = VAR_70 -> VAR_71 -> VAR_72 -> VAR_69 ; struct <S2SV_ModStart> & VAR_33 ) ; if ( VAR_55 -> VAR_72 -> VAR_69 != VAR_69 ) VAR_33 |= VAR_73
<S2SV_ModStart> . VAR_45 [ METHOD_6 <S2SV_ModEnd> ( VAR_46 , <S2SV_ModStart> . VAR_45 [ METHOD_6 <S2SV_ModEnd> ( VAR_46 , <S2SV_ModStart> . VAR_45 [ METHOD_6 <S2SV_ModEnd> ( VAR_46 ,
<S2SV_ModStart> ; TYPE_4 VAR_81 = VAR_87 ; TYPE_4 VAR_83 = VAR_87 <S2SV_ModEnd> ; TYPE_5 VAR_82 <S2SV_ModStart> ) ; } VAR_84 : METHOD_14 ( & VAR_82 , & VAR_81 ) ; METHOD_14 ( & VAR_82 , & VAR_83 ) ; <S2SV_ModEnd> METHOD_15 ( VAR_85
<S2SV_ModStart> METHOD_66 ( * VAR_288 <S2SV_ModEnd> ) ; METHOD_69 <S2SV_ModStart> } VAR_297 : METHOD_69 ( ( VAR_292 , "[|esis]" ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> { TYPE_52 = METHOD_72 ( VAR_244 , VAR_282 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_275 ; } if ( ! ( VAR_244 -> VAR_136 & VAR_137 ) ) { if ( TYPE_52 != VAR_282 ) { VAR_299 = - VAR_153 ; goto VAR_275 ; } else { METHOD_73 ( VAR_244 , TYPE_52 ) ; TYPE_51 = 0 ; } } <S2SV_ModStart> ( TYPE_51 ) METHOD_73 ( VAR_244 , TYPE_52 <S2SV_ModEnd> ) ; METHOD_67 <S2SV_ModStart> ( TYPE_51 ) METHOD_73 ( VAR_244 , TYPE_52 <S2SV_ModEnd> ) ; METHOD_67
<S2SV_ModStart> TYPE_10 * VAR_115 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; TYPE_10 * VAR_59 = VAR_180 ; TYPE_10 * <S2SV_ModStart> struct STRUCT_OR_UNION_7 VAR_99 ; TYPE_10 * VAR_119 = VAR_180 <S2SV_ModStart> , VAR_115 , & VAR_59 , 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_176 ) ; if ( VAR_97 ) { METHOD_32 ( "<S2SV_blank>encrypted<S2SV_blank>ticket\\n" ) ; VAR_124 = METHOD_20 ( & VAR_99 , VAR_118 , VAR_115 , & VAR_119 , 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_179 ; } VAR_134 = VAR_119 ; <S2SV_ModStart> VAR_176 ) ; VAR_119 = METHOD_34 ( VAR_124 , VAR_181 ) ; if ( ! VAR_119 ) { VAR_177 = - VAR_182 ; goto VAR_179 ; } VAR_134 = VAR_119 ; <S2SV_ModStart> ; VAR_179 : METHOD_35 ( VAR_119 ) ; METHOD_35 ( VAR_59 ) ;
<S2SV_ModStart> 2 ) { METHOD_15 ( * VAR_76 , 2 ) ; <S2SV_ModStart> VAR_78 - 2 ; if ( VAR_78 < VAR_62 ) goto VAR_80 ; METHOD_15 ( * ( VAR_76 ) , VAR_62 ) <S2SV_ModStart> VAR_20 : { if ( VAR_62 < VAR_22 ) goto VAR_80 <S2SV_ModEnd> ; VAR_31 = <S2SV_ModStart> = VAR_76 + VAR_22 ; VAR_78 = VAR_78 - VAR_22 ; VAR_62 = VAR_62 - VAR_22 <S2SV_ModEnd> ; break ; <S2SV_ModStart> VAR_37 : { if ( VAR_62 < VAR_59 ) goto VAR_80 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> - VAR_59 ; VAR_62 = VAR_62 - VAR_59 ; <S2SV_ModStart> VAR_60 : { while ( VAR_62 <S2SV_ModEnd> >= VAR_79 ) <S2SV_ModStart> VAR_79 ) { <S2SV_ModEnd> METHOD_23 ( ( <S2SV_ModStart> - VAR_79 ; VAR_62 = VAR_62 - VAR_79 ; <S2SV_ModStart> break ; } VAR_76 += VAR_62 ; VAR_78 -= VAR_62 ;
<S2SV_ModStart> -> VAR_21 ; VAR_29 = METHOD_4 ( VAR_28 , <S2SV_ModEnd> VAR_28 -> VAR_23 <S2SV_ModStart> VAR_23 . VAR_24 ) ; if ( VAR_29 != VAR_2 ) break <S2SV_ModStart> case 4 : VAR_29 = METHOD_4 ( VAR_28 , <S2SV_ModEnd> VAR_28 -> VAR_23 <S2SV_ModStart> VAR_23 . VAR_24 )
<S2SV_ModStart> -> VAR_85 ; <S2SV_ModEnd> if ( METHOD_11 <S2SV_ModStart> VAR_88 ) ; <S2SV_ModEnd> if ( VAR_109
<S2SV_ModStart> ; TYPE_4 VAR_151 ; struct STRUCT_OR_UNION_9 * VAR_161 <S2SV_ModStart> . VAR_29 ; VAR_161 = METHOD_20 ( VAR_158 -> VAR_161 , METHOD_19 ( VAR_156 ) ) ; if ( VAR_161 <S2SV_ModEnd> != VAR_147 && <S2SV_ModStart> != VAR_147 && VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_74 ) { <S2SV_ModStart> ; VAR_50 = VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_41 ; } <S2SV_ModStart> } if ( VAR_161 <S2SV_ModEnd> == VAR_147 || <S2SV_ModStart> VAR_147 || ! VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_74 ) VAR_94 <S2SV_ModStart> ; if ( VAR_161 ) METHOD_9 ( VAR_156 ) -> VAR_101 = VAR_161 -> VAR_103 . <S2SV_ModEnd> VAR_104 ; METHOD_17
<S2SV_ModStart> break ; } METHOD_17 ( VAR_69 , VAR_62 , sizeof VAR_69 ) ; METHOD_17 <S2SV_ModEnd> ( VAR_69 , <S2SV_ModStart> VAR_69 , "<S2SV_blank>" , sizeof VAR_69 <S2SV_ModStart> } VAR_69 [ ( sizeof <S2SV_ModEnd> VAR_69 ) - <S2SV_ModStart> 1 ] = '\\0' ; VAR_69 [ METHOD_16 ( VAR_69 ) - 1 ] =
<S2SV_ModStart> VAR_9 ; } <S2SV_ModEnd> VAR_30 -> VAR_20
<S2SV_ModStart> -> VAR_4 ; TYPE_9 VAR_44 ; if ( VAR_41 -> VAR_42 < VAR_41 -> VAR_39 ) return VAR_11 ; <S2SV_ModEnd> VAR_44 = VAR_41 <S2SV_ModStart> VAR_41 -> VAR_39 <S2SV_ModEnd> ; if (
<S2SV_ModStart> } VAR_40 = METHOD_18 ( VAR_41 , VAR_37 , "none" , VAR_38 , VAR_39 , VAR_24 -> VAR_25 . METHOD_15 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( ) ; METHOD_17 ( VAR_68 , VAR_66 ) ; <S2SV_ModStart> VAR_60 ; } <S2SV_ModEnd> VAR_63 += VAR_66
<S2SV_ModStart> VAR_15 ) { TYPE_2 VAR_20 = 0 ; <S2SV_ModStart> VAR_18 ) ; if ( METHOD_5 ( VAR_15 -> VAR_14 , VAR_15 -> VAR_18 , & VAR_20 ) || VAR_15 -> VAR_9 -> VAR_18 < VAR_20 ) return VAR_21 ;
<S2SV_ModStart> TYPE_5 * VAR_26 = VAR_54 ; TYPE_6 VAR_56 <S2SV_ModStart> VAR_51 ) ; VAR_56 = METHOD_13 ( "gimp-test-XXXXXX.xcf" , & VAR_26 , VAR_54 ) ; METHOD_14 ( VAR_56 != - 1 ) ; METHOD_15 ( VAR_56 <S2SV_ModEnd> ) ; VAR_55
<S2SV_ModStart> VAR_85 ) ; <S2SV_ModEnd> METHOD_23 ( &
<S2SV_ModStart> if ( VAR_25 + VAR_27 <S2SV_ModStart> "u\\n" , VAR_25 + VAR_27
<S2SV_ModStart> 1 ) { if ( VAR_21 >= VAR_25 - VAR_23 - 7 ) return VAR_24 ;
<S2SV_ModStart> * VAR_17 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> VAR_4 ) { VAR_21 <S2SV_ModEnd> * VAR_12 = <S2SV_ModStart> ( VAR_4 , VAR_21 <S2SV_ModEnd> * ) ;
<S2SV_ModStart> VAR_23 ) { <S2SV_ModEnd> METHOD_18 ( VAR_51
<S2SV_ModStart> ) -> VAR_46 ; METHOD_12 ( & VAR_67 , 0 , sizeof ( VAR_67 ) )
<S2SV_ModStart> [ 1 ] ; TYPE_4 * VAR_16 ; TYPE_3 VAR_17 <S2SV_ModStart> - VAR_8 ; VAR_16 = METHOD_7 ( VAR_14 , VAR_13 , VAR_18 ) ; if ( ! VAR_16 ) return - VAR_19 ; <S2SV_ModStart> ( VAR_12 , VAR_16 <S2SV_ModEnd> , VAR_13 ) <S2SV_ModStart> VAR_13 ) ; VAR_17 = <S2SV_ModEnd> METHOD_6 ( STRUCT_OR_UNION_5 <S2SV_ModStart> , VAR_13 , VAR_16 <S2SV_ModEnd> , VAR_15 ) <S2SV_ModStart> VAR_15 ) ; METHOD_8 ( VAR_16 ) ; return VAR_17 ;
<S2SV_ModStart> VAR_15 ) ; if ( VAR_237 == 0 ) { METHOD_69 ( "error:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>MP4/MOV\\n" , VAR_13 [ 1 ] ) ; return - 1 ; } <S2SV_ModStart> VAR_139 ) ; TYPE_35 <S2SV_ModEnd> VAR_161 = 0.0 <S2SV_ModStart> ) ) { TYPE_35 VAR_161 = 0.0 , VAR_162 = 0.0 ; <S2SV_ModStart> VAR_230 , VAR_229 , & VAR_161 , & VAR_162 ) ; METHOD_69 ( "%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz<S2SV_blank>(from<S2SV_blank>%f<S2SV_blank>to<S2SV_blank>%f)\\n" <S2SV_ModEnd> , METHOD_70 ( <S2SV_ModStart> ) , VAR_231 , VAR_161 , VAR_162
<S2SV_ModStart> VAR_88 ) ; if ( METHOD_20 ( VAR_11 ) ) METHOD_21 ( VAR_90 ) ;
<S2SV_ModStart> VAR_79 : return METHOD_46 ( VAR_160 , <S2SV_ModEnd> VAR_139 ) ;
<S2SV_ModStart> TYPE_33 VAR_356 ; TYPE_25 * * VAR_497 ; TYPE_33 * VAR_169 <S2SV_ModEnd> ; TYPE_33 VAR_278 <S2SV_ModStart> VAR_362 ) ; VAR_169 = METHOD_17 ( sizeof ( TYPE_33 ) * VAR_362 ) ; <S2SV_ModStart> -= 4 ; VAR_84 <S2SV_ModEnd> = * VAR_166 <S2SV_ModStart> << 24 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> << 16 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> << 8 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> ( VAR_168 < VAR_84 <S2SV_ModEnd> ) { METHOD_30 <S2SV_ModStart> } if ( VAR_84 <S2SV_ModEnd> < 3 ) <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 2 ] <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 1 ] <S2SV_ModStart> = VAR_166 ; VAR_169 [ VAR_466 ] = VAR_84 ; VAR_166 += VAR_84 <S2SV_ModEnd> ; VAR_168 -= <S2SV_ModStart> ; VAR_168 -= VAR_84 <S2SV_ModEnd> ; VAR_494 [ <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_466 ] , VAR_169 [ VAR_466 ] , <S2SV_ModStart> += 3 ; VAR_169 [ VAR_466 ] -= 3 ; <S2SV_ModStart> += VAR_417 ; VAR_169 [ VAR_466 ] -= VAR_417 ; <S2SV_ModStart> { do { if ( ! VAR_169 [ VAR_466 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_169 [ VAR_466 ] ) { METHOD_30 ( VAR_475 , VAR_476 , VAR_161 , "(too<S2SV_blank>short)" , 0 ) ; goto VAR_492 ; } <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_466 ] , VAR_169 [ VAR_466 ] , <S2SV_ModStart> += VAR_417 ; VAR_169 [ VAR_466 ] -= VAR_417 ; <S2SV_ModStart> { do { if ( ! VAR_169 [ VAR_466 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_169 [ VAR_466 ] ) { METHOD_30 ( VAR_475 , VAR_476 , VAR_161 , "(too<S2SV_blank>short)" , 0 ) ; goto VAR_492 ; } <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_497 ) ; METHOD_36 ( VAR_169 ) ;
<S2SV_ModStart> -> VAR_224 -> VAR_230 <S2SV_ModEnd> != VAR_224 -> <S2SV_ModStart> != VAR_224 -> VAR_230 ) goto VAR_222 ; if ( VAR_192 -> TYPE_34 != VAR_226 -> TYPE_34 <S2SV_ModEnd> ) goto VAR_222
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_31 ; METHOD_2 ( & VAR_31 , 0 , sizeof ( VAR_31 ) )
<S2SV_ModStart> "updateDevice()<S2SV_blank>:<S2SV_blank>memory<S2SV_blank>allocation<S2SV_blank>error" ) ; * VAR_90 = VAR_147 -> VAR_110 ;
<S2SV_ModStart> = VAR_5 ; <S2SV_ModEnd> TYPE_6 VAR_27 ; <S2SV_ModStart> ; TYPE_8 VAR_51 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_38 , VAR_39 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_51 ) return VAR_51 ; } return 0 <S2SV_ModEnd> ; VAR_50 : <S2SV_ModStart> ; VAR_50 : return <S2SV_ModEnd> - VAR_52 ; <S2SV_ModStart> - VAR_52 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VAR_46 ) { const TYPE_10 * VAR_55 = METHOD_12 ( VAR_40 , VAR_41 , VAR_48 ) ; <S2SV_ModStart> * VAR_21 ; if ( METHOD_14 ( VAR_55 , '@' ) ) { METHOD_13 ( "Configuration<S2SV_blank>node<S2SV_blank>\'%s\'<S2SV_blank>contains<S2SV_blank>\'@\'\\n" , VAR_55 ) ; return - VAR_54 ; }
<S2SV_ModStart> ] ) ; <S2SV_ModEnd> VAR_7 = VAR_9
<S2SV_ModStart> VAR_62 < 1 || VAR_61 -> VAR_62 > VAR_66 / sizeof ( * VAR_64 )
<S2SV_ModStart> ) ) { TYPE_1 VAR_60 ; <S2SV_ModStart> |= VAR_47 ; VAR_60 = ! METHOD_17 ( VAR_58 ) ; <S2SV_ModStart> -> VAR_52 , VAR_60 ? & VAR_53 : VAR_41 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 1 ) ; if ( ! VAR_60 ) { METHOD_18 ( & VAR_58 -> VAR_25 , & VAR_58 -> VAR_56 -> VAR_61 ) ; } else { <S2SV_ModStart> ) ; } }
<S2SV_ModStart> * VAR_115 ; <S2SV_ModEnd> } * VAR_113
<S2SV_ModStart> { if ( ! VAR_9 ) { METHOD_2 ( "oops.<S2SV_blank>no<S2SV_blank>disk\\n" ) ; return 1 ; } <S2SV_ModEnd> const TYPE_5 VAR_23 <S2SV_ModStart> VAR_23 = 512 <S2SV_ModEnd> ; TYPE_6 * <S2SV_ModStart> ( VAR_13 ) { <S2SV_ModStart> = VAR_13 ; } if ( <S2SV_ModEnd> VAR_16 -> METHOD_1 <S2SV_ModStart> * VAR_23 ) <S2SV_ModEnd> == - 1 <S2SV_ModStart> - 1 ) { <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> VAR_79 : return METHOD_46 ( VAR_160 , <S2SV_ModEnd> VAR_139 ) ;
<S2SV_ModStart> return VAR_31 ; if ( ! METHOD_4 ( VAR_7 ) ) return VAR_31 ;
<S2SV_ModStart> -> VAR_4 ; TYPE_11 <S2SV_ModEnd> VAR_107 ; TYPE_9 <S2SV_ModStart> VAR_97 ; TYPE_6 <S2SV_ModEnd> * VAR_95 ; <S2SV_ModStart> -> VAR_16 ; METHOD_10 <S2SV_ModEnd> ( VAR_64 -> <S2SV_ModStart> ) ) ; for ( VAR_99 = 0 ; VAR_99 < VAR_100 ; VAR_99 ++ ) { for ( VAR_97 = 0 ; VAR_97 < VAR_98 ; VAR_97 ++ ) { TYPE_9 VAR_110 = VAR_99 * VAR_98 + VAR_97 ; TYPE_6 * VAR_92 = VAR_85 -> VAR_111 [ VAR_99 ] [ VAR_97 ] <S2SV_ModEnd> ; VAR_95 = <S2SV_ModStart> ; VAR_95 = VAR_85 -> VAR_111 [ VAR_99 ] [ VAR_97 ] + <S2SV_ModEnd> VAR_85 -> VAR_72 <S2SV_ModStart> - 1 ) vpx_start_encode <S2SV_ModEnd> ( & VAR_107 <S2SV_ModStart> ) ; else vpx_start_encode <S2SV_ModEnd> ( & VAR_107 <S2SV_ModStart> VAR_85 , & VAR_85 -> tile_data [ VAR_110 ] . tile_info , <S2SV_ModEnd> & VAR_107 , <S2SV_ModStart> , & VAR_92 <S2SV_ModEnd> , VAR_95 ) <S2SV_ModStart> METHOD_7 ( VAR_92 <S2SV_ModEnd> == VAR_95 ) <S2SV_ModStart> VAR_95 ) ; vpx_stop_encode <S2SV_ModEnd> ( & VAR_107
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_33 ; if ( VAR_31 < 0 || VAR_31 >= VAR_29 -> VAR_36 ) return ; if ( VAR_7 < 0 || VAR_7 > 15 ) return ; VAR_33
<S2SV_ModStart> ( VAR_90 = 1 <S2SV_ModEnd> ; VAR_90 < <S2SV_ModStart> ( VAR_90 = 1 <S2SV_ModEnd> ; VAR_90 <
<S2SV_ModStart> ) goto VAR_76 <S2SV_ModEnd> ; VAR_75 = <S2SV_ModStart> ) ) ; * VAR_20 = sizeof ( * VAR_62 ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 <S2SV_ModEnd> * VAR_2 ,
<S2SV_ModStart> VAR_161 > VAR_160 - 6 <S2SV_ModEnd> ) { METHOD_22
<S2SV_ModStart> VAR_140 ) ; METHOD_23 ( & VAR_139 -> VAR_142 , 1 ) ;
<S2SV_ModStart> , VAR_38 ) || ( VAR_38 < VAR_33 )
<S2SV_ModStart> * METHOD_0 ( <S2SV_ModEnd> unsigned TYPE_0 VAR_9 <S2SV_ModStart> -> VAR_24 . VAR_25 = VAR_26 <S2SV_ModEnd> ; VAR_27 -> <S2SV_ModStart> -> VAR_24 . VAR_22 = METHOD_5 ( ) ; if ( METHOD_6 ( & VAR_27 -> VAR_24 . VAR_22 -> VAR_28 ) > VAR_29 ) { METHOD_7 ( VAR_27 ) ; return METHOD_8 ( - VAR_30 ) ; } <S2SV_ModEnd> return VAR_27 ;
<S2SV_ModStart> -> VAR_145 . VAR_152 = VAR_144 -> VAR_145 . VAR_152 ; VAR_150 -> VAR_145 .
<S2SV_ModStart> VAR_11 ) { if ( VAR_11 < 3 ) { METHOD_3 ( ( VAR_9 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } <S2SV_ModStart> ) ) ; VAR_10 += 3 ; VAR_11 -= 3 ; <S2SV_ModStart> if ( VAR_11 != 0 <S2SV_ModEnd> ) { METHOD_3 <S2SV_ModStart> VAR_9 , VAR_10 , VAR_11 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_7 VAR_84 ; VAR_85 * VAR_86 ; <S2SV_ModStart> VAR_84 = VAR_62 ; goto VAR_81 ; } VAR_86 = METHOD_9 ( ) ; if ( VAR_86 == VAR_79 ) { VAR_84 = VAR_70 ; goto VAR_81 ; } VAR_80 = METHOD_10 ( VAR_86 ) ; if ( VAR_80 == VAR_79 ) { VAR_84 = VAR_70 ; METHOD_11 ( VAR_86 )
<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> TYPE_2 VAR_22 ; <S2SV_ModEnd> union STRUCT_OR_UNION_1 * <S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_11 ; METHOD_1 ( VAR_1 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_3 ( VAR_24
<S2SV_ModStart> VAR_28 ) ) { VAR_31 -> VAR_28 = 0 ; VAR_31 -> VAR_30 = VAR_31 -> VAR_32 ; <S2SV_ModStart> 0 ) ; }
<S2SV_ModStart> ; TYPE_7 VAR_436 = VAR_26 ; TYPE_7 VAR_449 <S2SV_ModStart> -> VAR_202 ) { <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; VAR_449 = VAR_437 ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; VAR_449 = VAR_26 ; } <S2SV_ModStart> -> VAR_162 ; VAR_449 = VAR_26 ; <S2SV_ModStart> ; if ( VAR_449 <S2SV_ModEnd> ) { if
<S2SV_ModStart> * VAR_9 , TYPE_2 VAR_10 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> VAR_3 & VAR_10 ) != VAR_10 <S2SV_ModEnd> ) return 0
<S2SV_ModStart> TYPE_1 * VAR_6 <S2SV_ModEnd> , TYPE_3 VAR_4 <S2SV_ModStart> VAR_12 ) { const TYPE_8 * const VAR_18 <S2SV_ModEnd> = VAR_12 -> <S2SV_ModStart> VAR_13 . VAR_14 ; if ( VAR_18 == VAR_19 ) return VAR_20 ; * VAR_15 = VAR_18
<S2SV_ModStart> VAR_18 ) { if ( VAR_9 > VAR_14 ) { METHOD_6 ( "invalid<S2SV_blank>path<S2SV_blank>size:<S2SV_blank>%d<S2SV_blank>(max<S2SV_blank>%d)\\n" , VAR_9 , VAR_14 ) ; return VAR_20 ; } TYPE_5 * VAR_17 = METHOD_7 ( <S2SV_ModEnd> VAR_6 , VAR_9 <S2SV_ModStart> VAR_6 , VAR_9 , "" , 0 ) <S2SV_ModEnd> ; TYPE_5 * <S2SV_ModStart> VAR_21 ) ; METHOD_5 ( VAR_17 ) ; <S2SV_ModStart> VAR_20 ; } METHOD_5 ( VAR_17 ) ;
<S2SV_ModStart> * VAR_170 ; unsigned <S2SV_ModStart> -> VAR_159 ; unsigned
<S2SV_ModStart> return METHOD_3 ( VAR_89 , <S2SV_ModStart> return METHOD_5 ( VAR_89 , <S2SV_ModStart> return METHOD_6 ( VAR_89 , <S2SV_ModStart> return METHOD_7 ( VAR_89 , <S2SV_ModStart> return METHOD_8 ( VAR_89 , <S2SV_ModStart> return METHOD_9 ( VAR_89 , <S2SV_ModStart> return METHOD_10 ( VAR_89 , <S2SV_ModStart> = METHOD_12 ( VAR_89 , <S2SV_ModStart> = METHOD_13 ( VAR_89 , <S2SV_ModStart> = METHOD_14 ( VAR_89 , <S2SV_ModStart> = METHOD_15 ( VAR_89 , <S2SV_ModStart> = METHOD_17 ( VAR_89 ,
<S2SV_ModStart> TYPE_5 * VAR_5 , const TYPE_4 * VAR_32 <S2SV_ModStart> VAR_30 ) { TYPE_6 VAR_33 = VAR_32 - ( const TYPE_4 * ) VAR_5 ; <S2SV_ModStart> VAR_11 = VAR_5 ; if ( VAR_29 < VAR_33 ) return - VAR_31
<S2SV_ModStart> ) goto VAR_47 <S2SV_ModEnd> ; VAR_48 =
<S2SV_ModStart> ) VAR_15 ; if ( VAR_48 + VAR_112 > <S2SV_ModEnd> VAR_107 -> VAR_46 <S2SV_ModStart> VAR_108 ] . VAR_48 + <S2SV_ModEnd> VAR_107 -> VAR_46 <S2SV_ModStart> VAR_108 ] . VAR_112 ) { METHOD_9 ( "%s,<S2SV_blank>Out<S2SV_blank>of<S2SV_blank>emulated<S2SV_blank>memory<S2SV_blank>range\\n" , VAR_114 ) ; return - VAR_115 ; } <S2SV_ModEnd> VAR_109 = VAR_48
<S2SV_ModStart> * VAR_18 , TYPE_7 VAR_11 , TYPE_7 VAR_8 , TYPE_7 VAR_17 , TYPE_7 <S2SV_ModEnd> VAR_14 ) {
<S2SV_ModStart> VAR_79 ) ; TYPE_8 ( & VAR_132 -> VAR_135 ) ;
<S2SV_ModStart> * VAR_5 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> = 0 ; METHOD_6 <S2SV_ModEnd> ( VAR_61 -> <S2SV_ModStart> ) ) ; METHOD_6 <S2SV_ModEnd> ( VAR_61 -> <S2SV_ModStart> ) ) ; METHOD_6 <S2SV_ModEnd> ( VAR_61 -> <S2SV_ModStart> ) ) ; METHOD_6 <S2SV_ModEnd> ( VAR_61 ->
<S2SV_ModStart> VAR_13 ) { <S2SV_ModEnd> return METHOD_2 (
<S2SV_ModStart> VAR_43 ) { TYPE_3 <S2SV_ModEnd> VAR_43 = VAR_59 <S2SV_ModStart> * 2 ; TYPE_10 *
<S2SV_ModStart> TYPE_13 * VAR_68 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ; } VAR_68 = ( TYPE_13 * ) METHOD_2 ( VAR_38 ) ;
<S2SV_ModStart> = 0 ; TYPE_5 VAR_87 = 0 ; <S2SV_ModStart> VAR_84 ; } VAR_87 = sizeof ( METHOD_16 ( STRUCT_OR_UNION_20 ) -> VAR_43 ) ; <S2SV_ModStart> -> VAR_43 , VAR_87 ) ; METHOD_45 ( VAR_85 -> VAR_41 + VAR_87 , 0 , STRUCT_OR_UNION_20 -> VAR_27 -> VAR_88 - VAR_87 <S2SV_ModEnd> ) ; VAR_81
<S2SV_ModStart> ; VAR_208 -> VAR_254 <S2SV_ModEnd> = VAR_253 ;
<S2SV_ModStart> , VAR_5 , VAR_6 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_48 = METHOD_8 ( VAR_37 , VAR_45 ) ; if ( VAR_48 < 0 ) return VAR_48 ; VAR_48 =
<S2SV_ModStart> VAR_76 ) ; if ( ! VAR_90 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; } <S2SV_ModStart> VAR_79 ) ; if ( ! VAR_91 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; } <S2SV_ModStart> VAR_82 ) ; if ( ! VAR_92 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; }
<S2SV_ModStart> VAR_64 ) { METHOD_7 ( VAR_64 , 0 , sizeof ( * VAR_64 ) ) ;
<S2SV_ModStart> ; VAR_472 : if ( ! VAR_604 -> VAR_238 )
<S2SV_ModStart> , TYPE_3 VAR_31 , TYPE_7 VAR_34 <S2SV_ModStart> METHOD_2 ( VAR_30 , VAR_34 <S2SV_ModStart> METHOD_2 ( VAR_30 , VAR_34
<S2SV_ModStart> * VAR_22 ; struct STRUCT_OR_UNION_16 <S2SV_ModEnd> VAR_42 ; VAR_22 <S2SV_ModStart> goto VAR_46 ; METHOD_26 ( & VAR_42 , VAR_45 ) ; VAR_32 = METHOD_11 ( METHOD_18 ( VAR_48 ) , VAR_45 , METHOD_18 ( VAR_47 ) , STRUCT_OR_UNION_15 , 0 ) ; if ( VAR_32 ) { METHOD_27 ( & VAR_42 ) ; goto VAR_46 ; } METHOD_15 ( VAR_45 , STRUCT_OR_UNION_15 ) ; METHOD_16 ( METHOD_18 ( VAR_48 ) , METHOD_18 ( VAR_47 ) , VAR_42 . VAR_27 <S2SV_ModEnd> , METHOD_19 ( <S2SV_ModStart> VAR_45 ) ; METHOD_27 ( & <S2SV_ModEnd> VAR_42 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> TYPE_7 METHOD_0 ( <S2SV_ModStart> ) return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; return ( ( TYPE_7 )
<S2SV_ModStart> TYPE_31 VAR_239 ; TYPE_33 <S2SV_ModEnd> VAR_226 ; VAR_234 <S2SV_ModStart> TYPE_31 VAR_239 ; TYPE_33 <S2SV_ModEnd> VAR_226 ; VAR_234
<S2SV_ModStart> = VAR_22 ; <S2SV_ModEnd> METHOD_7 ( VAR_26
<S2SV_ModStart> ; if ( VAR_126 < VAR_145 -> VAR_66 ||
<S2SV_ModStart> VAR_2 ) ; METHOD_3 ( & VAR_17 ) ; <S2SV_ModStart> METHOD_2 ( VAR_5 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_16 ++ ; } VAR_2 -> VAR_18 -> VAR_19 -> METHOD_0 ++ ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_238 -> VAR_266 <S2SV_ModEnd> = VAR_265 ;
<S2SV_ModStart> VAR_16 ) ; if ( <S2SV_ModStart> ( VAR_180 ) < 0 ) return - 1 <S2SV_ModStart> VAR_165 ) { if ( <S2SV_ModStart> VAR_178 -> VAR_171 ) < 0 ) return - 1 ; METHOD_17 ( VAR_180 , VAR_150 <S2SV_ModStart> VAR_182 ; } METHOD_17 ( VAR_180 , VAR_150 ) ;
<S2SV_ModStart> += VAR_35 ; METHOD_3 ( & VAR_36 -> VAR_37 , 1 ) ;
<S2SV_ModStart> VAR_43 ; } if ( VAR_25 > VAR_59 / sizeof ( TYPE_7 ) ) METHOD_8 ( VAR_60 , ( METHOD_6 ( VAR_61 ) , METHOD_7 ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , VAR_25 , ( TYPE_6 ) ( VAR_59 / sizeof ( TYPE_7 ) ) ) ) ) ;
<S2SV_ModStart> * VAR_273 , TYPE_20 * VAR_279 , TYPE_21 * VAR_280 <S2SV_ModEnd> , TYPE_3 * <S2SV_ModStart> TYPE_3 * * VAR_130 <S2SV_ModEnd> , TYPE_4 * <S2SV_ModStart> TYPE_18 VAR_264 , TYPE_22 * VAR_281 , TYPE_23 * VAR_282 <S2SV_ModEnd> ) { TYPE_11 <S2SV_ModStart> -> VAR_12 ; TYPE_2 * VAR_283 = & VAR_280 -> VAR_283 ; <S2SV_ModStart> VAR_233 = & VAR_279 <S2SV_ModEnd> -> VAR_15 ; <S2SV_ModStart> TYPE_18 VAR_47 = VAR_284 [ VAR_278 ] <S2SV_ModEnd> , VAR_245 = <S2SV_ModStart> TYPE_17 VAR_246 ; <S2SV_ModEnd> if ( VAR_276 <S2SV_ModStart> VAR_40 ) ? VAR_130 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> VAR_246 ] ; if ( VAR_264 && VAR_278 != VAR_44 ) { TYPE_18 VAR_285 = METHOD_28 ( VAR_129 , VAR_276 , VAR_277 , VAR_278 ) ; VAR_279 -> VAR_286 -> VAR_49 [ VAR_285 ] [ VAR_49 ] ++ ; } <S2SV_ModStart> case VAR_50 : VAR_282 -> VAR_287 . VAR_288 = 1 ; <S2SV_ModStart> ( VAR_273 , VAR_280 , VAR_233 , VAR_276 , VAR_277 , VAR_281 , VAR_246 , & VAR_282 -> VAR_287 ) ; VAR_282 -> VAR_287 . <S2SV_ModEnd> VAR_148 . VAR_151 <S2SV_ModStart> ] -> VAR_151 ; VAR_282 -> VAR_287 . VAR_289 = * VAR_233 -> VAR_289 ; VAR_282 -> VAR_287 . VAR_290 [ 0 ] = VAR_233 -> VAR_290 [ 0 ] ; VAR_282 -> VAR_287 . VAR_291 = VAR_233 -> VAR_291 ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 , VAR_277 , VAR_264 , VAR_246 , & VAR_282 -> VAR_287 ) <S2SV_ModStart> case VAR_65 : VAR_282 -> VAR_292 [ 0 ] . VAR_288 = 1 <S2SV_ModEnd> ; METHOD_14 ( <S2SV_ModStart> ( VAR_273 , VAR_280 , VAR_233 , VAR_276 , VAR_277 , VAR_281 , VAR_246 , & VAR_282 -> VAR_292 [ 0 ] ) ; VAR_282 -> VAR_292 [ 0 ] . <S2SV_ModEnd> VAR_148 . VAR_151 <S2SV_ModStart> ] -> VAR_151 ; VAR_282 -> VAR_292 [ 0 ] . VAR_289 = * VAR_233 -> VAR_289 ; VAR_282 -> VAR_292 [ 0 ] . VAR_290 [ 0 ] = VAR_233 -> VAR_290 [ 0 ] ; VAR_282 -> VAR_292 [ 0 ] . VAR_291 = VAR_233 -> VAR_291 ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 , VAR_277 , VAR_264 , VAR_246 , & VAR_282 -> VAR_292 [ 0 ] ) <S2SV_ModStart> VAR_134 -> VAR_85 && VAR_278 > VAR_40 ) { VAR_282 -> VAR_292 [ 1 ] . VAR_288 <S2SV_ModEnd> = 1 ; <S2SV_ModStart> ( VAR_273 , VAR_280 , VAR_233 , VAR_276 , VAR_277 + VAR_245 , VAR_281 , VAR_246 , & VAR_282 -> VAR_292 [ 1 ] ) ; VAR_282 -> VAR_292 [ 1 ] . <S2SV_ModEnd> VAR_148 . VAR_151 <S2SV_ModStart> -> VAR_151 ; VAR_282 -> VAR_292 [ 1 ] . VAR_289 = * VAR_233 -> VAR_289 ; VAR_282 -> VAR_292 [ 1 ] . VAR_290 [ 0 ] = VAR_233 -> VAR_290 [ 0 ] ; VAR_282 -> VAR_292 [ 1 ] . VAR_291 = VAR_233 -> VAR_291 ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 , VAR_277 + VAR_245 , VAR_264 , VAR_246 , & VAR_282 -> VAR_292 [ 1 ] ) ; <S2SV_ModEnd> } break ; <S2SV_ModStart> case VAR_115 : VAR_282 -> VAR_293 [ 0 ] . VAR_288 = 1 <S2SV_ModEnd> ; METHOD_14 ( <S2SV_ModStart> ( VAR_273 , VAR_280 , VAR_233 , VAR_276 , VAR_277 , VAR_281 , VAR_246 , & VAR_282 -> VAR_293 [ 0 ] ) ; VAR_282 -> VAR_293 [ 0 ] . <S2SV_ModEnd> VAR_148 . VAR_151 <S2SV_ModStart> ] -> VAR_151 ; VAR_282 -> VAR_293 [ 0 ] . VAR_289 = * VAR_233 -> VAR_289 ; VAR_282 -> VAR_293 [ 0 ] . VAR_290 [ 0 ] = VAR_233 -> VAR_290 [ 0 ] ; VAR_282 -> VAR_293 [ 0 ] . VAR_291 = VAR_233 -> VAR_291 ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 , VAR_277 , VAR_264 , VAR_246 , & VAR_282 -> VAR_293 [ 0 ] ) <S2SV_ModStart> VAR_134 -> VAR_135 && VAR_278 > VAR_40 ) { VAR_282 -> VAR_293 [ 1 ] . VAR_288 <S2SV_ModEnd> = 1 ; <S2SV_ModStart> ( VAR_273 , VAR_280 , VAR_233 , VAR_276 + VAR_245 , VAR_277 , VAR_281 , VAR_246 , & VAR_282 -> VAR_293 [ 1 ] ) ; VAR_282 -> VAR_293 [ 1 ] . <S2SV_ModEnd> VAR_148 . VAR_151 <S2SV_ModStart> . VAR_151 = VAR_129 -> VAR_130 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> -> VAR_151 ; VAR_282 -> VAR_293 [ 1 ] . VAR_289 = * VAR_233 -> VAR_289 ; VAR_282 -> VAR_293 [ 1 ] . VAR_290 [ 0 ] = VAR_233 -> VAR_290 [ 0 ] ; VAR_282 -> VAR_293 [ 1 ] . VAR_291 = VAR_233 -> VAR_291 ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 + VAR_245 , VAR_277 , VAR_264 , VAR_246 , & VAR_282 -> VAR_293 [ 1 ] ) ; <S2SV_ModEnd> } break ; <S2SV_ModStart> VAR_167 ) ; if ( VAR_278 == VAR_40 ) { METHOD_14 ( VAR_273 , VAR_280 , VAR_233 , VAR_276 , VAR_277 , VAR_281 , VAR_246 , VAR_282 -> VAR_294 [ 0 ] ) ; METHOD_29 ( VAR_273 , VAR_279 , VAR_283 , VAR_275 , VAR_276 , VAR_277 , VAR_264 , VAR_246 , VAR_282 -> VAR_294 [ 0 ] ) ; } else { <S2SV_ModEnd> METHOD_24 ( VAR_273 <S2SV_ModStart> ( VAR_273 , VAR_279 , VAR_280 , VAR_130 <S2SV_ModEnd> , VAR_275 , <S2SV_ModStart> , VAR_264 , VAR_281 , VAR_282 -> VAR_295 [ 0 ] ) <S2SV_ModEnd> ; METHOD_24 ( <S2SV_ModStart> ( VAR_273 , VAR_279 , VAR_280 , VAR_130 <S2SV_ModEnd> + VAR_245 , <S2SV_ModStart> , VAR_264 , VAR_281 , VAR_282 -> VAR_295 [ 1 ] ) ; METHOD_24 ( VAR_273 , VAR_279 , VAR_280 , VAR_130 + VAR_245 * VAR_239 , VAR_275 , VAR_276 + VAR_245 , VAR_277 , VAR_246 , VAR_264 , VAR_281 , VAR_282 -> VAR_295 [ 2 ] ) <S2SV_ModEnd> ; METHOD_24 ( <S2SV_ModStart> ( VAR_273 , VAR_279 , VAR_280 , VAR_130 <S2SV_ModEnd> + VAR_245 * <S2SV_ModStart> VAR_245 * VAR_239 + VAR_245 <S2SV_ModStart> VAR_245 , VAR_277 + VAR_245 <S2SV_ModStart> , VAR_264 , VAR_281 , VAR_282 -> VAR_295 [ 3 ] ) <S2SV_ModEnd> ; } break <S2SV_ModStart> : METHOD_25 ( 0 && <S2SV_ModStart> "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; break ; <S2SV_ModStart> } if ( VAR_49 != VAR_167 || VAR_278 == VAR_40 ) update_partition_context ( VAR_129 , VAR_276 , VAR_277 , VAR_246 <S2SV_ModEnd> , VAR_278 ) <S2SV_ModStart> VAR_278 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; } } if ( * VAR_30 != VAR_34 )
<S2SV_ModStart> TYPE_4 VAR_13 ; if ( VAR_10 < 0 || VAR_10 >= 32 ) { return VAR_15 ; } <S2SV_ModEnd> METHOD_2 ( !
<S2SV_ModStart> -> VAR_15 = METHOD_3 ( TYPE_1 , <S2SV_ModStart> * VAR_16 ++ , VAR_17 )
<S2SV_ModStart> TYPE_6 VAR_17 ; VAR_27 * VAR_22 ; VAR_28 * VAR_29 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_23 ) ; VAR_29 <S2SV_ModEnd> = VAR_17 -> <S2SV_ModStart> -> VAR_18 ; free_ice_connection_watch ( VAR_29 ) ; VAR_22 = gsm_xsmp_client_new ( VAR_17 ) ; gsm_store_add ( VAR_8 -> VAR_9 -> client_store , gsm_client_peek_id ( VAR_22 ) , G_OBJECT ( VAR_22 ) ) ; g_object_unref ( VAR_22 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ; METHOD_6 ( METHOD_7 ( VAR_22 ) <S2SV_ModEnd> , VAR_23 ,
<S2SV_ModStart> if ( ( VAR_163 < 0 ) || ( ( TYPE_55 ) VAR_163 > VAR_145 ) ) { VAR_145 = 0 ; continue ; } if ( (
<S2SV_ModStart> METHOD_0 ( const TYPE_5 * VAR_21 , TYPE_5 <S2SV_ModEnd> * VAR_86 ) <S2SV_ModStart> VAR_86 ) { tran_high_t VAR_78 , VAR_72 , VAR_77 , VAR_79 ; tran_high_t <S2SV_ModEnd> VAR_81 , VAR_83 <S2SV_ModStart> 0 ] = ( TYPE_5 ) <S2SV_ModStart> 1 ] = ( TYPE_5 ) <S2SV_ModStart> 2 ] = ( TYPE_5 ) <S2SV_ModStart> 3 ] = ( TYPE_5 )
<S2SV_ModStart> VAR_31 ; return ( * VAR_39 != VAR_31 ) <S2SV_ModEnd> ; case VAR_19
<S2SV_ModStart> * VAR_105 ; VAR_107 * VAR_93 ; <S2SV_ModStart> TYPE_6 VAR_104 ; if ( VAR_100 -> VAR_93 != VAR_11 ) { VAR_93 = VAR_100 -> VAR_93 ; } else { VAR_93 = VAR_96 -> VAR_93 ; } <S2SV_ModStart> = METHOD_4 ( <S2SV_ModEnd> VAR_93 , &
<S2SV_ModStart> VAR_97 ) ; if ( VAR_124 < 0 ) return METHOD_1 ( VAR_124 ) ;
<S2SV_ModStart> ++ ) ; if ( ! METHOD_8 ( VAR_42 , VAR_43 ) ) return 0 ; <S2SV_ModStart> ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_197 , VAR_36 ) ; METHOD_11 ( VAR_197 , VAR_198
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_22 ( VAR_77 <S2SV_ModStart> ( VAR_77 , "file" , VAR_78 ) ) { if ( METHOD_15 ( VAR_72 -> VAR_80 , "ALL" ) && ! METHOD_23 ( VAR_53 , VAR_72 -> VAR_80 ) ) { METHOD_24 ( VAR_59 , VAR_81 , "Filename<S2SV_blank>extension<S2SV_blank>of<S2SV_blank>\\\'%s\\\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>common<S2SV_blank>multimedia<S2SV_blank>extension,<S2SV_blank>blocked<S2SV_blank>for<S2SV_blank>security<S2SV_blank>reasons.\\n" "If<S2SV_blank>you<S2SV_blank>wish<S2SV_blank>to<S2SV_blank>override<S2SV_blank>this<S2SV_blank>adjust<S2SV_blank>allowed_extensions,<S2SV_blank>you<S2SV_blank>can<S2SV_blank>set<S2SV_blank>it<S2SV_blank>to<S2SV_blank>\\\'ALL\\\'<S2SV_blank>to<S2SV_blank>allow<S2SV_blank>all\\n" , VAR_53 ) ; return VAR_48 ; } } else if ( METHOD_22 ( VAR_77 , <S2SV_ModStart> , VAR_78 ) ) { ; } else <S2SV_ModEnd> return VAR_48 ;
<S2SV_ModStart> = VAR_12 ; VAR_17 -> VAR_18 ++ ;
<S2SV_ModStart> VAR_5 : case VAR_19 : break ; case <S2SV_ModStart> case VAR_7 : case VAR_20 : if ( VAR_15 -> VAR_16 . VAR_21 != ( unsigned TYPE_3 ) VAR_22 ) { METHOD_2 ( "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>I422,<S2SV_blank>I444,<S2SV_blank>I440<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile." ) ; } break ; case VAR_23 : case VAR_24 : case VAR_25 : if ( VAR_15 -> VAR_16 . VAR_21 != ( unsigned TYPE_3 ) VAR_22 && VAR_15 -> VAR_16 . VAR_21 != ( unsigned TYPE_3 ) VAR_26 ) { METHOD_2 ( "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>16-bit<S2SV_blank>I422,<S2SV_blank>I444,<S2SV_blank>I440<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile." ) ; } <S2SV_ModStart> "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>Only<S2SV_blank>YV12,<S2SV_blank>I420,<S2SV_blank>I422,<S2SV_blank>I444<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "supported." ) ; break
<S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } VAR_72 <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto VAR_79 <S2SV_ModEnd> ; } VAR_73 <S2SV_ModStart> - 2 ; VAR_79 : METHOD_14 ( VAR_74 ) ; VAR_74 = VAR_75 ; return - 1 ;
<S2SV_ModStart> VAR_470 , VAR_452 , VAR_378 <S2SV_ModStart> ; TYPE_31 VAR_433 <S2SV_ModEnd> ; TYPE_31 VAR_599 <S2SV_ModStart> VAR_590 , VAR_608 , VAR_226 -> VAR_174 == VAR_175
<S2SV_ModStart> ! VAR_102 ) goto VAR_104 <S2SV_ModEnd> ; if (
<S2SV_ModStart> * VAR_138 ; <S2SV_ModEnd> } * VAR_136 <S2SV_ModStart> VAR_128 ) ; <S2SV_ModEnd> for ( VAR_128
<S2SV_ModStart> ( VAR_85 ) { if ( VAR_106 . VAR_94 > VAR_57 ) { VAR_108 = - VAR_77 ; goto VAR_95 ; } <S2SV_ModStart> VAR_94 ) ; }
<S2SV_ModStart> 100 ] ; VAR_41 = METHOD_26 ( METHOD_25 ( VAR_41 , 0 ) , sizeof ( VAR_43 ) - 1 ) ;
<S2SV_ModStart> * VAR_2 , TYPE_2 VAR_4 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> , VAR_2 , VAR_4 <S2SV_ModEnd> , 1 )
<S2SV_ModStart> VAR_53 ) { const TYPE_4 VAR_61 = VAR_58 -> VAR_30 ; const TYPE_4 VAR_62 = VAR_58 -> VAR_34 ; const TYPE_4 VAR_63 = ( VAR_58 -> VAR_30 + 1 ) / 2 ; const TYPE_4 VAR_64 = ( VAR_58 -> VAR_34 + 1 ) / 2 ; <S2SV_ModStart> -> VAR_20 = VAR_61 <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> -> VAR_24 = VAR_62 <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> -> VAR_38 = VAR_61 <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> -> VAR_42 = VAR_62 ; VAR_53 -> uv_crop_width = VAR_63 ; VAR_53 -> uv_crop_height = VAR_64 <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> -> VAR_36 = VAR_63 ; VAR_53 -> VAR_40 = VAR_64 ; VAR_53 -> VAR_44 = VAR_58 -> VAR_56 [ VAR_57 ] ; VAR_53 -> VAR_49 = VAR_58 -> VAR_56 [ VAR_52 ] ; VAR_53 -> VAR_54 = ( VAR_58 -> VAR_56 [ VAR_57 ] - VAR_58 -> VAR_59 <S2SV_ModEnd> ) / 2 <S2SV_ModStart> / 2 ; <S2SV_ModEnd> return VAR_60 ;
<S2SV_ModStart> ( VAR_48 < 1U +
<S2SV_ModStart> , VAR_65 -> VAR_67 , VAR_65 ->
<S2SV_ModStart> * VAR_131 = & ( VAR_134 -> VAR_139 ) <S2SV_ModEnd> ; TYPE_3 *
<S2SV_ModStart> & VAR_166 ) { if ( ! VAR_183 . VAR_184 ) { VAR_202 = VAR_206 [ VAR_183 . VAR_207 ] . VAR_138 ; if ( ! VAR_202 ) VAR_202 = - VAR_208 ; <S2SV_ModEnd> goto VAR_203 ; <S2SV_ModStart> goto VAR_203 ; } VAR_202 = METHOD_30 ( VAR_204 , METHOD_36 ( VAR_199 ) . VAR_200 , VAR_193 -> VAR_194 , VAR_173 , VAR_188 , VAR_175 -> VAR_176 , VAR_183 . VAR_178 , VAR_183 . VAR_180 , VAR_189 . VAR_182 , VAR_183 . VAR_184 , 0 ) ; } else { VAR_202 = METHOD_32 ( STRUCT_OR_UNION_16 , VAR_186 , VAR_187 , VAR_188 , & VAR_189 , VAR_204 , METHOD_36 ( VAR_199 ) . VAR_200 , VAR_193 -> VAR_194 ) ; } if ( VAR_202 < 0 ) goto VAR_203 ;
<S2SV_ModStart> ; VAR_51 = METHOD_12 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> + VAR_22 + <S2SV_ModEnd> 1 ; METHOD_5 <S2SV_ModStart> VAR_35 ) ; METHOD_9 ( VAR_24 , METHOD_8 ( VAR_34 -> VAR_37 ) , VAR_38 ) ;
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> METHOD_2 ( VAR_2 <S2SV_ModStart> , VAR_4 , current_cred ( ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> { VAR_69 = METHOD_15 ( <S2SV_ModStart> VAR_71 , VAR_55 )
<S2SV_ModStart> return 0 ; if ( ! METHOD_3 ( VAR_12 , VAR_13 ) ) return 0 ; <S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_27 ; if ( VAR_29 >= VAR_21 ) return - VAR_23 ;
<S2SV_ModStart> ( ! VAR_5 || ! METHOD_1 ( VAR_5 )
<S2SV_ModStart> VAR_64 ) ; if ( METHOD_14 ( VAR_83 -> VAR_63 ) == - 1 ) { VAR_84 = VAR_18 ; goto VAR_71 ; }
<S2SV_ModStart> - VAR_16 ; VAR_46 -> VAR_28 = 0 ; <S2SV_ModStart> VAR_51 ; } <S2SV_ModEnd> VAR_52 = VAR_50
<S2SV_ModStart> ; TYPE_12 VAR_73 ; struct STRUCT_OR_UNION_0 VAR_108 ; TYPE_0 * VAR_109 <S2SV_ModStart> VAR_102 ) { switch ( VAR_101 ) { case VAR_110 : VAR_108 . VAR_111 = - 1 ; VAR_109 = & VAR_108 ; break ; default : VAR_109 = VAR_112 ; break ; } METHOD_23 <S2SV_ModEnd> ( VAR_85 , <S2SV_ModStart> VAR_106 , VAR_107 , VAR_98 , VAR_109
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 <S2SV_ModEnd> VAR_18 ; TYPE_1 <S2SV_ModStart> return VAR_10 ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! METHOD_4 ( & VAR_18 , VAR_10 ) <S2SV_ModEnd> ) return - <S2SV_ModStart> ! ( VAR_18 . <S2SV_ModEnd> VAR_14 & METHOD_5 <S2SV_ModStart> ( ( VAR_18 . <S2SV_ModEnd> VAR_17 << 1 <S2SV_ModStart> ) | VAR_18 . <S2SV_ModEnd> VAR_19 ) {
<S2SV_ModStart> } if ( METHOD_13 ( VAR_231 ) > 4 &&
<S2SV_ModStart> -> VAR_9 += <S2SV_ModEnd> METHOD_1 ( VAR_15
<S2SV_ModStart> endif VAR_257 -> VAR_269 = VAR_268 ; VAR_257 -> <S2SV_ModStart> VAR_212 -> VAR_141 = VAR_268 ; VAR_257 -> VAR_269
<S2SV_ModStart> VAR_8 ) { struct STRUCT_OR_UNION_2 * <S2SV_ModEnd> VAR_12 ; VAR_12 <S2SV_ModStart> ; if ( ! VAR_12 ) return - VAR_13 <S2SV_ModEnd> ; return METHOD_2 <S2SV_ModStart> ( VAR_7 , VAR_12 -> <S2SV_ModEnd> VAR_10 . VAR_11 <S2SV_ModStart> VAR_11 , VAR_12 -> VAR_10 . VAR_14
<S2SV_ModStart> { VAR_40 = METHOD_22 ( <S2SV_ModStart> , - 1 )
<S2SV_ModStart> VAR_115 ; } else { <S2SV_ModStart> VAR_129 ; } }
<S2SV_ModStart> TYPE_3 VAR_34 ; struct STRUCT_OR_UNION_3 VAR_52 ; VAR_52 . VAR_28 = VAR_47 -> VAR_44 . VAR_45 . VAR_28 ; VAR_52 . VAR_53 = VAR_47 -> VAR_44 . VAR_45 . VAR_32 ; VAR_51 = METHOD_5 ( & VAR_52 , VAR_50 , VAR_54 ) ; if ( VAR_51 ) { pr_warn ( DRV_PFX "access<S2SV_blank>denied:<S2SV_blank>DISCARD<S2SV_blank>[%llu->%llu]<S2SV_blank>on<S2SV_blank>dev=%04x\\n" , VAR_52 . VAR_28 , VAR_52 . VAR_28 + VAR_52 . VAR_53 , VAR_50 -> VAR_15 . VAR_55 ) ; goto VAR_56 ; } <S2SV_ModStart> VAR_34 ) ; VAR_56 :
<S2SV_ModStart> TYPE_3 VAR_34 ; struct STRUCT_OR_UNION_3 VAR_52 ; VAR_52 . VAR_28 = VAR_47 -> VAR_44 . VAR_45 . VAR_28 ; VAR_52 . VAR_53 = VAR_47 -> VAR_44 . VAR_45 . VAR_32 ; VAR_51 = METHOD_5 ( & VAR_52 , VAR_50 , VAR_54 ) ; if ( VAR_51 ) { pr_warn ( DRV_PFX "access<S2SV_blank>denied:<S2SV_blank>DISCARD<S2SV_blank>[%llu->%llu]<S2SV_blank>on<S2SV_blank>dev=%04x\\n" , VAR_52 . VAR_28 , VAR_52 . VAR_28 + VAR_52 . VAR_53 , VAR_50 -> VAR_15 . VAR_55 ) ; goto VAR_56 ; } <S2SV_ModStart> VAR_34 ) ; VAR_56 :
<S2SV_ModStart> ) ) { TYPE_25 <S2SV_ModEnd> VAR_52 = sizeof <S2SV_ModStart> * * ) METHOD_19 <S2SV_ModEnd> ( ( TYPE_24
<S2SV_ModStart> -> VAR_270 , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" <S2SV_ModEnd> , VAR_272 , <S2SV_ModStart> VAR_169 && ( TYPE_15 <S2SV_ModEnd> ) VAR_231 < <S2SV_ModStart> == VAR_183 && ( TYPE_15 ) <S2SV_ModStart> != VAR_185 && ( TYPE_15 ) <S2SV_ModStart> != VAR_187 && ( TYPE_15 ) <S2SV_ModStart> != VAR_189 && ( TYPE_15 ) <S2SV_ModStart> != VAR_191 && ( TYPE_15 )
<S2SV_ModStart> -> VAR_58 , sizeof ( VAR_57 -> VAR_58 ) - 1 <S2SV_ModEnd> ) ; METHOD_9
<S2SV_ModStart> * VAR_39 = METHOD_8 ( ) <S2SV_ModEnd> ; TYPE_5 VAR_41 <S2SV_ModStart> TYPE_5 VAR_22 ; TYPE_5 VAR_42 = 0 ; <S2SV_ModStart> = VAR_14 ; if ( ! VAR_39 ) { <S2SV_ModStart> VAR_40 ; } VAR_42 = 1 ; } <S2SV_ModStart> 0 ; } if ( VAR_42 )
<S2SV_ModStart> ; TYPE_4 VAR_163 = 0 <S2SV_ModStart> VAR_175 == 0 ) { if ( <S2SV_ModEnd> VAR_171 -> VAR_157 <S2SV_ModStart> goto VAR_172 ; } else { VAR_163 = VAR_125 -> VAR_169 ; }
<S2SV_ModStart> = 2 ; if ( VAR_855 -> VAR_591 && ( VAR_855 -> VAR_745 == 0 ) ) VAR_606 = 1 ;
<S2SV_ModStart> TYPE_4 VAR_59 ; const TYPE_2 * VAR_61 = VAR_55 ; if ( VAR_52 < VAR_60 ) goto VAR_62 ; METHOD_13 ( * VAR_55 , VAR_60 ) ; <S2SV_ModStart> : if ( VAR_52 < 2 ) goto VAR_62 ; METHOD_14 ( VAR_55 ) ; if ( <S2SV_ModStart> VAR_60 ) ; VAR_62 : METHOD_12 ( ( VAR_58 , "[|chdlc]" ) ) ; return VAR_58 -> VAR_54 - VAR_61 ;
<S2SV_ModStart> STRUCT_OR_UNION_26 * VAR_66 ; TYPE_0 VAR_67 = VAR_64 -> VAR_44 . VAR_45 . VAR_46 & ( VAR_68 | VAR_69 | VAR_70 ) <S2SV_ModStart> & STRUCT_OR_UNION_27 , VAR_67 , <S2SV_ModStart> STRUCT_OR_UNION_27 , VAR_65 , VAR_67
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> VAR_48 -> VAR_44 [ 0 ] <S2SV_ModStart> VAR_45 -> VAR_46 ; VAR_48 -> VAR_44 [ 1 ] = METHOD_9 ( )
<S2SV_ModStart> & VAR_8 ) || <S2SV_ModEnd> METHOD_3 ( 1 <S2SV_ModStart> VAR_8 ) ) { METHOD_4 ( VAR_10 , "Configuration<S2SV_blank>failed" ) ; METHOD_5 ( 0 ) ; <S2SV_ModStart> return 1 ; }
<S2SV_ModStart> VAR_11 ) { if ( ! METHOD_6 ( STRUCT_OR_UNION_8 ) ) return - VAR_14 ;
<S2SV_ModStart> VAR_184 ) ; <S2SV_ModEnd> if ( VAR_184 <S2SV_ModStart> VAR_245 ; } VAR_180 = ( TYPE_29 ) METHOD_32 ( VAR_184 ) ;
<S2SV_ModStart> , VAR_145 ) || ( VAR_152 -> VAR_147 ) ( VAR_327 , ( TYPE_27 * ) VAR_145 , VAR_297 , VAR_324 , VAR_152 -> VAR_153 ) != VAR_328
<S2SV_ModStart> ; if ( VAR_98 == VAR_92 ) { VAR_105 = - VAR_106 ; goto VAR_101 ; } if (
<S2SV_ModStart> ) >= 0 && METHOD_36 ( VAR_104 -> VAR_63 , VAR_109 ) == ( TYPE_7 * ) VAR_113
<S2SV_ModStart> 400 ; } if ( VAR_143 ) { struct STRUCT_OR_UNION_3 VAR_144 ; if ( METHOD_56 ( VAR_138 , & VAR_144 ) != 0 || ! METHOD_57 ( VAR_144 . VAR_145 ) ) { METHOD_34 ( "Path<S2SV_blank>\'%s\'<S2SV_blank>isn\'t<S2SV_blank>directory" , VAR_138 ) ; return 404 ; } struct STRUCT_OR_UNION_4 * VAR_146 = METHOD_58 ( "abrt" ) ; if ( ! VAR_146 ) { METHOD_34 ( "Group<S2SV_blank>\'abrt\'<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist" ) ; return 500 ; } if ( VAR_144 . VAR_147 != 0 || ! ( VAR_144 . VAR_148 == 0 || VAR_144 . VAR_148 == VAR_146 -> VAR_149 ) || VAR_144 . VAR_145 & 07 ) { METHOD_34 ( "Problem<S2SV_blank>directory<S2SV_blank>\'%s\'<S2SV_blank>isn\'t<S2SV_blank>owned<S2SV_blank>by<S2SV_blank>root:abrt<S2SV_blank>or<S2SV_blank>others<S2SV_blank>are<S2SV_blank>not<S2SV_blank>restricted<S2SV_blank>from<S2SV_blank>access" , VAR_138 ) ; return 403 ; } struct STRUCT_OR_UNION_2 * VAR_117 = METHOD_31 ( VAR_138 , VAR_97 ) ; const TYPE_6 VAR_150 = VAR_117 && METHOD_59 ( VAR_117 ) ; METHOD_41 ( VAR_117 ) ; if ( VAR_150 ) { METHOD_34 ( "Problem<S2SV_blank>directory<S2SV_blank>\'%s\'<S2SV_blank>has<S2SV_blank>already<S2SV_blank>been<S2SV_blank>processed" , VAR_138 ) ; return 403 ; } } else
<S2SV_ModStart> ( VAR_71 -> VAR_67 . VAR_75 + VAR_74 >= <S2SV_ModEnd> VAR_71 -> VAR_67 <S2SV_ModStart> VAR_71 -> VAR_67 . VAR_76 && METHOD_11 ( VAR_71 , VAR_74 <S2SV_ModStart> ) ) return VAR_64 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_71 -> VAR_67 . VAR_75 <S2SV_ModEnd> + VAR_74 > <S2SV_ModStart> > VAR_71 -> VAR_67 . end <S2SV_ModEnd> ) { VAR_64 <S2SV_ModStart> VAR_71 -> VAR_67 . VAR_65 <S2SV_ModStart> + VAR_71 -> VAR_67 . end <S2SV_ModEnd> , 1 , <S2SV_ModStart> ( VAR_71 -> VAR_67 . end <S2SV_ModEnd> - VAR_71 -> <S2SV_ModStart> - VAR_71 -> VAR_67 . VAR_75 <S2SV_ModEnd> ) , VAR_71 <S2SV_ModStart> ( VAR_71 -> VAR_67 . end <S2SV_ModEnd> - VAR_71 -> <S2SV_ModStart> - VAR_71 -> VAR_67 . VAR_75 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; VAR_71 -> VAR_67 . end <S2SV_ModEnd> += VAR_64 ; <S2SV_ModStart> VAR_71 -> VAR_67 . VAR_65 <S2SV_ModStart> + VAR_71 -> VAR_67 . VAR_75 <S2SV_ModEnd> , VAR_74 ) <S2SV_ModStart> ; VAR_71 -> VAR_67 . VAR_75 <S2SV_ModEnd> += VAR_74 ;
<S2SV_ModStart> TYPE_6 * VAR_243 = VAR_260 ; TYPE_12 * VAR_216 = VAR_260 ; TYPE_15 * VAR_262 <S2SV_ModStart> VAR_261 ) ) { <S2SV_ModStart> VAR_261 ) ; } else { METHOD_54 ( VAR_261 -> VAR_157 == VAR_158 ) ; VAR_216 = METHOD_30 ( VAR_261 ) ; VAR_262 = VAR_216 -> VAR_199 -> VAR_200 ; } <S2SV_ModStart> , VAR_48 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_94 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_110 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_124 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> VAR_158 ) { METHOD_54 ( VAR_216 <S2SV_ModEnd> ) ; METHOD_38 <S2SV_ModStart> , VAR_186 , VAR_262 <S2SV_ModEnd> ) ; METHOD_52
<S2SV_ModStart> = 0 ; METHOD_4 ( <S2SV_ModEnd> METHOD_20 ( VAR_96 <S2SV_ModStart> ( VAR_96 ) <= 3 ) ; for ( VAR_99 = 0 ; VAR_99 < 3 ; ++ VAR_99 ) { VAR_98 [ VAR_99 ] = 0 ; } for ( VAR_99 = 0 ; VAR_99 < METHOD_20 ( VAR_96 ) ; ++ VAR_99 ) { if ( ! ( <S2SV_ModEnd> VAR_98 [ VAR_99 <S2SV_ModStart> VAR_96 ) ) ) ) { goto VAR_100 ; } <S2SV_ModEnd> } VAR_79 = <S2SV_ModStart> VAR_82 ) { goto VAR_100 ; } VAR_59 = ( VAR_59 << 8 ) | VAR_80 ; VAR_63 += 8 ; } VAR_78 = ( VAR_59 >> ( VAR_63 - VAR_90 -> VAR_65 ) ) & METHOD_8 ( VAR_90 -> VAR_65 ) ; VAR_59 &= METHOD_8 ( VAR_63 - VAR_90 -> VAR_65 ) ; VAR_63 -= VAR_90 -> VAR_65 ; if ( METHOD_20 ( VAR_96 ) == 3 ) { METHOD_16 ( VAR_98 [ 0 ] , VAR_77 , ( METHOD_11 ( VAR_78 ) ) ) ; METHOD_16 ( VAR_98 [ 1 ] , VAR_77 , ( METHOD_13 ( VAR_78 ) ) ) ; METHOD_16 ( VAR_98 [ 2 ] , VAR_77 , ( METHOD_15 ( VAR_78 ) ) ) ; } else { METHOD_16 ( VAR_98 [ 0 ] , VAR_77 , ( VAR_78 ) ) ; } } if ( VAR_79 ) { if ( ( VAR_80 = METHOD_17 ( VAR_81 ) ) == VAR_82 ) { goto VAR_100 ; } } for ( VAR_99 = 0 ; VAR_99 < METHOD_20 ( VAR_96 ) ; ++ VAR_99 ) { if ( METHOD_19 ( VAR_96 , VAR_99 , 0 , VAR_89 , VAR_90 -> VAR_91 , 1 , VAR_98 [ VAR_99 ] ) ) { goto VAR_100 ; } } } for ( VAR_99 = 0 ; VAR_99 < METHOD_20 ( VAR_96 ) ; ++ VAR_99 ) { METHOD_21 ( VAR_98 [ VAR_99 ] ) ; VAR_98 [ VAR_99 ] = 0 ; } return 0 ; VAR_100 : for ( VAR_99 = 0 ; VAR_99 < 3 ; ++ VAR_99 ) { if ( VAR_98 [ VAR_99 ] ) { METHOD_21 ( VAR_98 [ VAR_99 ] ) ; } } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> } VAR_64 = METHOD_5 <S2SV_ModEnd> ( VAR_64 ,
<S2SV_ModStart> STRUCT_OR_UNION_4 * VAR_12 ; if ( ! METHOD_5 ( VAR_15 ) ) return - VAR_16
<S2SV_ModStart> ( VAR_37 ) ) ; METHOD_16 ( & VAR_71 -> VAR_72
<S2SV_ModStart> ) ; } METHOD_9 ( & VAR_19 -> VAR_4 ) ;
<S2SV_ModStart> 0 ) ; VAR_352 = & VAR_356 -> VAR_357 . VAR_355 [ VAR_209 ] ; VAR_433 = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ) + VAR_42 ; VAR_433 = min_t ( TYPE_16 , VAR_433 , VAR_352 -> VAR_273 - VAR_427 -> VAR_434 ) ; return VAR_433
<S2SV_ModStart> * VAR_20 , TYPE_8 <S2SV_ModEnd> VAR_30 , const <S2SV_ModStart> TYPE_6 VAR_19 ; TYPE_9 <S2SV_ModEnd> * const VAR_35
<S2SV_ModStart> VAR_37 = - 1LL <S2SV_ModEnd> ; if (
<S2SV_ModStart> * VAR_50 ; TYPE_0 VAR_53 ; <S2SV_ModStart> ) ; } VAR_53 = VAR_51 ; <S2SV_ModStart> VAR_49 ++ ) { <S2SV_ModEnd> VAR_47 = METHOD_6 <S2SV_ModStart> VAR_47 ) ) if ( METHOD_10 ( ( TYPE_11 ) VAR_45 , VAR_50 ) != VAR_45 ) VAR_53 = VAR_22 ; <S2SV_ModStart> ( TYPE_14 ) METHOD_13 ( VAR_47 <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( TYPE_14 ) METHOD_12 ( VAR_48 [ VAR_49 ] ) ; } ( TYPE_14 ) METHOD_13 ( <S2SV_ModEnd> VAR_50 ) ; <S2SV_ModStart> ; return ( VAR_53 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> 1 ] ; <S2SV_ModEnd> return VAR_13 ;
<S2SV_ModStart> 0 ) ; if ( ! VAR_30 ) return - VAR_105 ;
<S2SV_ModStart> { VAR_35 = METHOD_7 ( <S2SV_ModStart> 1 , 1 ) <S2SV_ModStart> return ; } METHOD_7 ( <S2SV_ModStart> , VAR_39 ) )
<S2SV_ModStart> * VAR_27 ; TYPE_4 VAR_25 ; TYPE_4 <S2SV_ModEnd> VAR_26 ; VAR_27
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; if ( VAR_55 > 64 ) { METHOD_9 ( VAR_52 , "invalid<S2SV_blank>size<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>for<S2SV_blank>picolcd<S2SV_blank>raw<S2SV_blank>event\\n" , VAR_55 ) ; return 0 ; } if (
<S2SV_ModStart> 0 ) { METHOD_21 <S2SV_ModEnd> ( & VAR_106 <S2SV_ModStart> 0 ) { METHOD_21 <S2SV_ModEnd> ( & VAR_106 <S2SV_ModStart> -> VAR_126 ; METHOD_21 <S2SV_ModEnd> ( & VAR_106 <S2SV_ModStart> VAR_96 ) { METHOD_21 <S2SV_ModEnd> ( & VAR_106 <S2SV_ModStart> } else { METHOD_21 <S2SV_ModEnd> ( & VAR_106
<S2SV_ModStart> VAR_132 ) ; VAR_127 = ( TYPE_8 * ) METHOD_21 ( VAR_131 -> VAR_68 , VAR_131 -> VAR_70 ) ; if ( ! VAR_127 ) { METHOD_22 ( VAR_131 -> VAR_68 ) ; VAR_131 -> VAR_68 = VAR_123 ; return VAR_124 ; } VAR_131 -> VAR_68 = VAR_127 ; <S2SV_ModStart> VAR_131 -> VAR_70 ) return VAR_124 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> -> VAR_110 ) { if ( METHOD_12 ( VAR_128 ) < VAR_131 -> VAR_112 ) return VAR_124 ; <S2SV_ModStart> VAR_112 ) ; } <S2SV_ModStart> = VAR_127 ; if ( METHOD_12 ( VAR_128 ) < VAR_131 -> VAR_132 ) return VAR_124 ;
<S2SV_ModStart> ) ) { if ( VAR_134 < VAR_139 + 1 ) { METHOD_23 ( ( VAR_131 , "%s" , VAR_114 ) ) ; return VAR_139 ; }
<S2SV_ModStart> -> VAR_22 = VAR_48 <S2SV_ModEnd> ; VAR_47 ->
<S2SV_ModStart> * VAR_10 , TYPE_8 <S2SV_ModEnd> * VAR_59 , <S2SV_ModStart> TYPE_5 VAR_62 ; TYPE_9 <S2SV_ModEnd> VAR_89 , VAR_98 <S2SV_ModStart> const TYPE_7 * VAR_102 <S2SV_ModEnd> = VAR_10 ; <S2SV_ModStart> = VAR_10 ; const TYPE_8 * VAR_100 = NULL ; TYPE_8 <S2SV_ModEnd> * VAR_101 = <S2SV_ModStart> { VAR_89 = VAR_102 [ 0 * VAR_27 ] ; VAR_98 = VAR_102 [ 1 * VAR_27 ] ; VAR_92 = VAR_102 <S2SV_ModEnd> [ 2 * <S2SV_ModStart> ; VAR_95 = VAR_102 <S2SV_ModEnd> [ 3 * <S2SV_ModStart> 0 ] = ( TYPE_8 ) VAR_89 ; VAR_101 [ 4 ] = ( TYPE_8 ) <S2SV_ModEnd> VAR_92 ; VAR_101 <S2SV_ModStart> 8 ] = ( TYPE_8 ) <S2SV_ModStart> 12 ] = ( TYPE_8 ) VAR_98 ; VAR_102 <S2SV_ModEnd> ++ ; VAR_101 <S2SV_ModStart> 0 ] = ( TYPE_8 ) ( <S2SV_ModStart> VAR_89 * VAR_99 ) ; VAR_101 [ 1 ] = ( TYPE_8 ) ( <S2SV_ModEnd> VAR_92 * VAR_99 <S2SV_ModStart> VAR_92 * VAR_99 ) <S2SV_ModStart> 2 ] = ( TYPE_8 ) ( <S2SV_ModStart> VAR_95 * VAR_99 ) <S2SV_ModStart> 3 ] = ( TYPE_8 ) ( <S2SV_ModStart> VAR_98 * VAR_99 )
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_17 ; if ( VAR_19 < 0 || VAR_19 > VAR_20 ) return - VAR_21
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_18 -> VAR_60 == VAR_61 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> VAR_25 ) ; mark_key_instantiated ( STRUCT_OR_UNION_18 , - VAR_27 <S2SV_ModEnd> ) ; VAR_34
<S2SV_ModStart> VAR_259 ++ ) { if ( METHOD_89 ( VAR_258 ) ) return VAR_206 ; <S2SV_ModStart> VAR_260 ) ; }
<S2SV_ModStart> { TYPE_2 VAR_7 , VAR_9 <S2SV_ModStart> VAR_3 : VAR_4 ; VAR_9 = METHOD_3 ( VAR_5 ) ; if ( VAR_9 == - VAR_10 ) { METHOD_4 ( VAR_9 , "Keyboard<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>XLATE<S2SV_blank>or<S2SV_blank>UNICODE<S2SV_blank>mode,<S2SV_blank>not<S2SV_blank>resetting:<S2SV_blank>%m" ) ; return 0 ; } else if ( VAR_9 < 0 ) return VAR_9
<S2SV_ModStart> VAR_37 ) { struct STRUCT_OR_UNION_1 VAR_0 = * VAR_37 ; VAR_0 . VAR_38 = VAR_39 ; VAR_0 . VAR_32 = VAR_39 ; <S2SV_ModStart> ( VAR_11 , & VAR_0 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_0 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_20 [ VAR_13 ] || ! VAR_19 -> VAR_20 [ VAR_21
<S2SV_ModStart> { if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> ) if ( METHOD_7 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 ,
<S2SV_ModStart> VAR_1092 ) { METHOD_266 ( * VAR_1091 , VAR_514 ) ;
<S2SV_ModStart> = VAR_73 ; VAR_79 -> VAR_55 . VAR_80 = VAR_78 <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> * VAR_75 ; VAR_79 [ - 3 ] . <S2SV_ModEnd> VAR_71 . VAR_72 <S2SV_ModStart> + VAR_78 ; if ( VAR_77 ) { VAR_79 [ - 1 ] . VAR_55 . VAR_80 = VAR_73 - VAR_79 [ - 1 ] . VAR_71 . VAR_72 ; VAR_79 [ - 3 ] . VAR_55 . VAR_80 = VAR_76 ; } else { VAR_79 [ - 1 ] . VAR_55 . VAR_80 = VAR_76 ; VAR_79 [ - 3 ] . VAR_55 . VAR_80 -= VAR_76 + VAR_78 ; } <S2SV_ModEnd> METHOD_13 ( VAR_79
<S2SV_ModStart> VAR_179 ] ; TYPE_20 VAR_174 ; TYPE_20 VAR_22 ; VAR_22 = METHOD_35 ( STRUCT_OR_UNION_12 -> VAR_22 ) <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> ( VAR_21 , VAR_172 , STRUCT_OR_UNION_12 ) <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> , VAR_179 , "%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%d.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%d.conf" <S2SV_ModEnd> , VAR_15 , <S2SV_ModStart> , VAR_15 , <S2SV_ModEnd> VAR_172 -> VAR_18 <S2SV_ModStart> , VAR_21 , <S2SV_ModEnd> VAR_22 , VAR_21 <S2SV_ModStart> , VAR_21 , <S2SV_ModEnd> VAR_22 ) ;
<S2SV_ModStart> { struct STRUCT_OR_UNION_4 VAR_41 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_6 <S2SV_ModStart> VAR_52 ; TYPE_3 VAR_54 , <S2SV_ModEnd> VAR_53 = 0 <S2SV_ModStart> VAR_53 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> - VAR_29 ; METHOD_10 ( & VAR_41 , 0 , sizeof ( VAR_41 ) ) ; VAR_54 = min_t ( unsigned TYPE_3 , sizeof ( VAR_41 ) , VAR_1 ) ; METHOD_11 ( & VAR_41 , VAR_14 , VAR_54 ) ; METHOD_1 ( "sk<S2SV_blank>%p<S2SV_blank>%pMR" , VAR_52 , & VAR_41 . VAR_42 ) ; <S2SV_ModStart> ; if ( VAR_41 . VAR_8 <S2SV_ModEnd> && METHOD_4 ( <S2SV_ModStart> && METHOD_4 ( VAR_41 . VAR_8 , & VAR_41 . <S2SV_ModEnd> VAR_42 ) ) <S2SV_ModStart> , & VAR_41 . <S2SV_ModEnd> VAR_42 ) ; <S2SV_ModStart> -> VAR_44 = VAR_41 . VAR_8 <S2SV_ModEnd> ; VAR_52 ->
<S2SV_ModStart> TYPE_2 ) { TYPE_0 VAR_15 ; struct STRUCT_OR_UNION_0 VAR_16 ; <S2SV_ModStart> if ( ( VAR_15 = METHOD_4 ( VAR_8 , VAR_17 | VAR_18 | VAR_19 | VAR_20 , VAR_21 | VAR_22 ) ) == - 1 ) return VAR_10 ; if ( ( VAR_11 = METHOD_7 ( VAR_15 <S2SV_ModEnd> , "a+" ) <S2SV_ModStart> return VAR_10 ; if ( ( METHOD_5 ( VAR_15 , & VAR_16 ) ) == - 1 ) { VAR_11 = VAR_9 ; METHOD_6 ( VAR_15 ) ; return VAR_10 ; } if ( VAR_16 . VAR_23 != 1 || ( VAR_16 . VAR_24 & VAR_25 ) != VAR_26 ) { VAR_11 = VAR_9 ; METHOD_6 ( VAR_15 ) ; return VAR_10 ; } <S2SV_ModStart> ) METHOD_2 ( VAR_15 <S2SV_ModEnd> , VAR_12 ,
<S2SV_ModStart> -> VAR_9 ) { <S2SV_ModStart> VAR_10 ) ; }
<S2SV_ModStart> ; if ( VAR_36 > VAR_19 - 4 - <S2SV_ModStart> VAR_33 -> VAR_34 <S2SV_ModEnd> ) { METHOD_1
<S2SV_ModStart> VAR_79 -> VAR_11 ) ; if ( VAR_79 -> VAR_89 != - 1 ) METHOD_11 ( VAR_79 -> VAR_89
<S2SV_ModStart> = VAR_55 ; VAR_57 -> VAR_59 = VAR_60 ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_2 ( VAR_24
<S2SV_ModStart> ; return VAR_15 < 0 ? VAR_15 : 0
<S2SV_ModStart> & VAR_184 ; VAR_287 -> VAR_308 -> VAR_196 = & VAR_316 ; <S2SV_ModStart> VAR_303 ) ) { <S2SV_ModStart> & VAR_191 ; VAR_287 -> VAR_308 -> VAR_196 = & VAR_317 ; }
<S2SV_ModStart> * VAR_5 , <S2SV_ModEnd> TYPE_3 VAR_4 )
<S2SV_ModStart> ( VAR_185 ) ; TYPE_10 VAR_191 = VAR_192 <S2SV_ModStart> VAR_68 ) { VAR_191 = ! <S2SV_ModEnd> METHOD_9 ( VAR_170 <S2SV_ModStart> ( VAR_170 ) ; if ( ! VAR_191 <S2SV_ModStart> } if ( VAR_191 ||
<S2SV_ModStart> ; if ( * VAR_274 == '\\0' || <S2SV_ModEnd> METHOD_34 ( VAR_274 <S2SV_ModStart> ) != VAR_218 || <S2SV_ModEnd> METHOD_43 ( VAR_274 <S2SV_ModStart> ( VAR_274 , "." ) == 0 || METHOD_43 ( VAR_274 , <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { METHOD_87
<S2SV_ModStart> ) ; TYPE_8 <S2SV_ModEnd> VAR_36 ; if <S2SV_ModStart> = VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> / 512 ; <S2SV_ModStart> } else { METHOD_7 ( VAR_57 ) <S2SV_ModEnd> ; METHOD_5 ( <S2SV_ModStart> . VAR_55 , VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> -> VAR_58 , VAR_57 -> VAR_60 . VAR_61 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_99 = METHOD_15 ( <S2SV_ModEnd> VAR_71 * VAR_72
<S2SV_ModStart> -> VAR_14 ) { <S2SV_ModStart> VAR_15 ) ; } else { <S2SV_ModEnd> METHOD_3 ( METHOD_7 <S2SV_ModStart> ) ) ; METHOD_11 ( ) ; }
<S2SV_ModStart> TYPE_4 VAR_35 ; TYPE_5 * VAR_53 ; <S2SV_ModStart> 20 ) ; VAR_53 = METHOD_11 ( VAR_52 -> VAR_41 ) ; if ( ! METHOD_17 ( VAR_52 -> VAR_41 , VAR_48 ) ) return VAR_16 ; <S2SV_ModStart> ( VAR_39 , VAR_53 <S2SV_ModEnd> , VAR_48 )
<S2SV_ModStart> VAR_129 < 0 || VAR_131 < 0
<S2SV_ModStart> * VAR_32 ; if ( VAR_27 > VAR_33 ) { return VAR_28 ; }
<S2SV_ModStart> -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_9 -> VAR_10 ; TYPE_1 VAR_14 = 0 ; if <S2SV_ModEnd> ( VAR_9 -> <S2SV_ModStart> ( VAR_9 -> VAR_15 || VAR_4 -> VAR_16 != METHOD_2 ( VAR_10 -> VAR_8 -> VAR_17 ) >> VAR_18 ) VAR_14 = METHOD_3 ( VAR_19 , VAR_12 ) ; return VAR_14 ? : METHOD_1 ( <S2SV_ModStart> -> VAR_8 , <S2SV_ModEnd> VAR_10 -> VAR_11
<S2SV_ModStart> ) ; return METHOD_2 <S2SV_ModEnd> ( VAR_5 ,
<S2SV_ModStart> ; METHOD_12 ( VAR_63 , VAR_66 ) ; METHOD_12 ( VAR_81 , VAR_84 ) ; METHOD_13 ( VAR_91 , VAR_46 ) ; METHOD_14 ( VAR_112 ) ; METHOD_12 ( <S2SV_ModStart> VAR_91 -> VAR_40 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( METHOD_22 ( METHOD_21 ( METHOD_20 ( ) , VAR_199 ) ) ) return - VAR_200 ; if (
<S2SV_ModStart> "overflow<S2SV_blank>in<S2SV_blank>exec<S2SV_blank>arguments\\n" ) ; VAR_172 = - VAR_173 ;
<S2SV_ModStart> } else { if ( ! <S2SV_ModStart> , VAR_100 ) ) { if ( VAR_117 == 0 ) VAR_117 = - VAR_118 ; break ; } <S2SV_ModEnd> * VAR_108 =
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_3 * VAR_12 = METHOD_5 ( VAR_9 ) ; struct <S2SV_ModStart> VAR_8 ) ; if ( METHOD_6 ( VAR_12 ) ) { METHOD_7 ( & VAR_9 -> VAR_13 , & VAR_10 -> VAR_14 ) ; return ; }
<S2SV_ModStart> VAR_41 ) { <S2SV_ModEnd> TYPE_7 VAR_30 [ <S2SV_ModStart> VAR_34 ; } return METHOD_6 <S2SV_ModEnd> ( VAR_35 -> <S2SV_ModStart> , VAR_37 , VAR_39 , VAR_30 <S2SV_ModEnd> , VAR_40 ,
<S2SV_ModStart> VAR_19 ) ; if ( ! METHOD_6 ( VAR_24 , VAR_25 ) ) return 0 ; <S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; VAR_57 : <S2SV_ModEnd> VAR_59 -> VAR_60
<S2SV_ModStart> TYPE_6 VAR_104 ; TYPE_17 VAR_112 ; <S2SV_ModStart> , & VAR_104 , VAR_109 ) ; if ( VAR_100 != 0 ) goto VAR_110 ; METHOD_23 ( VAR_111 ) ; } if ( METHOD_20 ( VAR_86 , & VAR_113 , & VAR_111 ) < 0 ) { return 1 ; } if ( VAR_111 == VAR_90 || VAR_111 == VAR_92 ) { METHOD_23 ( VAR_111 ) ; VAR_112 = VAR_90 ; } else { TYPE_16 VAR_100 ; VAR_100 = METHOD_27 ( VAR_111 , & VAR_112 <S2SV_ModStart> , VAR_104 , VAR_112 ,
<S2SV_ModStart> break ; } METHOD_12 ( & VAR_58 , 0 , sizeof ( VAR_58 ) ) ;
<S2SV_ModStart> const TYPE_11 * const <S2SV_ModStart> ; TYPE_8 VAR_78 ; TYPE_15 VAR_79 <S2SV_ModEnd> [ 8 ] <S2SV_ModStart> ] ; TYPE_16 VAR_57 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_65 == VAR_16 && <S2SV_ModEnd> VAR_73 == 0 <S2SV_ModStart> == 0 ) { VAR_59 -> flushed = 1 ; return VAR_11 ; } VAR_59 -> flushed = 0 ; if ( VAR_59 -> frame_workers == VAR_16 ) { const TYPE_8 VAR_78 = init_decoder ( VAR_59 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; } VAR_78 = vp9_parse_superframe_index <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> , VAR_73 , VAR_79 , & VAR_57 , VAR_59 -> VAR_80 , VAR_59 -> VAR_81 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; if ( VAR_59 -> VAR_82 ) { if ( VAR_57 > 0 ) { TYPE_16 VAR_83 ; for ( VAR_83 = 0 ; VAR_83 < VAR_57 ; ++ VAR_83 ) { const TYPE_11 * VAR_84 = VAR_76 ; const TYPE_15 VAR_85 = VAR_79 [ VAR_83 ] ; if ( VAR_76 < VAR_65 || VAR_85 > ( TYPE_15 ) ( VAR_77 - VAR_76 ) ) { METHOD_5 ( VAR_59 , "Invalid<S2SV_blank>frame<S2SV_blank>size<S2SV_blank>in<S2SV_blank>index" ) ; return VAR_54 ; } if ( VAR_59 -> VAR_86 == 0 ) { if ( VAR_59 -> VAR_87 < VAR_88 ) { METHOD_6 ( VAR_59 ) ; } else { METHOD_5 ( VAR_59 , "Frame<S2SV_blank>output<S2SV_blank>cache<S2SV_blank>is<S2SV_blank>full." ) ; return VAR_89 ; } } VAR_78 = METHOD_2 ( VAR_59 , & VAR_84 , VAR_85 , VAR_62 , VAR_63 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; VAR_76 += VAR_85 ; } } else { if ( VAR_59 -> VAR_86 == 0 ) { if ( VAR_59 -> VAR_87 < VAR_88 ) { METHOD_6 ( VAR_59 ) ; } else { METHOD_5 ( VAR_59 , "Frame<S2SV_blank>output<S2SV_blank>cache<S2SV_blank>is<S2SV_blank>full." ) ; return VAR_89 ; } } VAR_78 = METHOD_2 ( VAR_59 , & VAR_65 , VAR_73 , VAR_62 , VAR_63 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; } } else { if ( VAR_57 > 0 ) { TYPE_16 VAR_83 ; for ( VAR_83 = 0 ; VAR_83 < VAR_57 ; ++ VAR_83 ) { const TYPE_11 * VAR_84 = VAR_76 ; const TYPE_15 VAR_85 = VAR_79 [ VAR_83 ] ; TYPE_8 VAR_78 ; if ( VAR_76 < VAR_65 || VAR_85 > ( TYPE_15 ) ( VAR_77 - VAR_76 ) ) { METHOD_5 ( VAR_59 , "Invalid<S2SV_blank>frame<S2SV_blank>size<S2SV_blank>in<S2SV_blank>index" ) ; return VAR_54 ; } VAR_78 = METHOD_2 ( VAR_59 , & VAR_84 , VAR_85 , VAR_62 , VAR_63 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; VAR_76 += VAR_85 ; } } else { while ( VAR_76 < VAR_77 ) { const TYPE_15 VAR_85 = ( TYPE_15 ) ( VAR_77 - VAR_76 ) ; const TYPE_8 VAR_78 = METHOD_2 ( VAR_59 , & VAR_76 , VAR_85 , VAR_62 , VAR_63 ) ; if ( VAR_78 != VAR_11 ) return VAR_78 ; while ( VAR_76 < VAR_77 <S2SV_ModEnd> ) { const <S2SV_ModStart> TYPE_11 VAR_38 = METHOD_7 ( VAR_59 -> VAR_80 , VAR_59 -> VAR_81 , VAR_76 ) ; if ( VAR_38 ) break ; ++ VAR_76 ; } } } } <S2SV_ModEnd> return VAR_78 ;
<S2SV_ModStart> ; VAR_16 = METHOD_7 ( <S2SV_ModStart> VAR_14 , VAR_6 ) <S2SV_ModStart> ; if ( METHOD_7 ( <S2SV_ModStart> VAR_15 , VAR_16 )
<S2SV_ModStart> ) / 3 ) METHOD_131 ( VAR_792 , "InvalidColormapIndex" ) ; if ( VAR_573 . VAR_571 > VAR_573 . VAR_574
<S2SV_ModStart> unsigned TYPE_4 VAR_24 ; VAR_22 -> VAR_23 = 0
<S2SV_ModStart> VAR_26 = METHOD_2 ( VAR_32 ) ; struct STRUCT_OR_UNION_3 * VAR_36 = METHOD_9 <S2SV_ModStart> VAR_35 ) ; METHOD_10 ( VAR_36 <S2SV_ModEnd> , VAR_35 )
<S2SV_ModStart> VAR_114 ) ; if ( VAR_116 >= ( TYPE_15 ) METHOD_8 ( VAR_118 ) ) return VAR_17 ;
<S2SV_ModStart> ; if ( METHOD_10 ( VAR_98 ) -> VAR_36 & VAR_100 <S2SV_ModEnd> && ! VAR_68
<S2SV_ModStart> -> VAR_71 ; TYPE_69 <S2SV_ModEnd> VAR_550 , VAR_414 <S2SV_ModStart> ; goto VAR_639 ; } if ( VAR_417 . VAR_169 != VAR_355 . VAR_650 ) { METHOD_122 ( "TOC<S2SV_blank>decompress<S2SV_blank>length<S2SV_blank>%" PRIu64 "<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>amount<S2SV_blank>decompressed<S2SV_blank>%lu\\n" , VAR_417 . VAR_169 , VAR_355 . VAR_650 ) ; VAR_640 [ VAR_355 . VAR_650 ] = '\\0' ; VAR_417 . VAR_169 = VAR_355 . VAR_650 <S2SV_ModStart> } METHOD_122 ( "cli_scanxar:<S2SV_blank>decompress<S2SV_blank>into<S2SV_blank>temp<S2SV_blank>file:\\n%s,<S2SV_blank>size<S2SV_blank>%zu,\\n" "from<S2SV_blank>xar<S2SV_blank>heap<S2SV_blank>offset<S2SV_blank>%zu<S2SV_blank>length<S2SV_blank>%zu\\n" <S2SV_ModEnd> , VAR_619 , <S2SV_ModStart> TYPE_67 VAR_470 = METHOD_87 ( VAR_550 , VAR_528 -> VAR_412 - VAR_551 ) <S2SV_ModEnd> ; unsigned TYPE_67 <S2SV_ModStart> ; TYPE_42 VAR_507 ; if ( VAR_550 > VAR_470 ) VAR_550 = VAR_470 <S2SV_ModStart> ; METHOD_122 ( "cli_scanxar:<S2SV_blank>Can\'t<S2SV_blank>read<S2SV_blank>%i<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li,<S2SV_blank>errno:%s.\\n" , TYPE_49 <S2SV_ModEnd> , VAR_551 , <S2SV_ModStart> ( "cli_scanxar:<S2SV_blank>Can\'t<S2SV_blank>read<S2SV_blank>%li<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li,<S2SV_blank>errno:<S2SV_blank>%s.\\n" , VAR_509 . VAR_478 <S2SV_ModEnd> , VAR_551 , <S2SV_ModStart> 0 ; { TYPE_69 VAR_651 = METHOD_87 ( VAR_528 -> VAR_412 - VAR_551 , VAR_550 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_523 ) VAR_651 <S2SV_ModEnd> = METHOD_87 ( <S2SV_ModStart> VAR_523 ) , VAR_651 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> , VAR_551 , VAR_651 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ; METHOD_122 ( "cli_scanxar:<S2SV_blank>Can\'t<S2SV_blank>read<S2SV_blank>%zu<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%zu,<S2SV_blank>errno:%s.\\n" , VAR_651 <S2SV_ModEnd> , VAR_551 , <S2SV_ModStart> , VAR_548 , VAR_651 <S2SV_ModEnd> , VAR_624 ) <S2SV_ModStart> , VAR_548 , VAR_651 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> { METHOD_122 ( "cli_scanxar:<S2SV_blank>cli_writen<S2SV_blank>error<S2SV_blank>%zu<S2SV_blank>bytes<S2SV_blank>@<S2SV_blank>%li.\\n" , VAR_651 <S2SV_ModEnd> , VAR_551 ) <S2SV_ModStart> 0 ) { METHOD_122 ( "cli_scanxar:<S2SV_blank>%u<S2SV_blank>checksum<S2SV_blank>errors<S2SV_blank>and<S2SV_blank>%u<S2SV_blank>extraction<S2SV_blank>errors.\\n" <S2SV_ModEnd> , VAR_647 ,
<S2SV_ModStart> return ; } if ( ! METHOD_99 ( * VAR_614 , 2 ) ) { METHOD_177 ( ( VAR_620 , "<S2SV_blank>[|OPT]" ) ) ; return ; }
<S2SV_ModStart> ~ VAR_58 ; METHOD_6 ( & VAR_66 -> VAR_28 ) ; METHOD_6 ( & VAR_66 -> VAR_30 ) ;
<S2SV_ModStart> VAR_16 ) { TYPE_6 <S2SV_ModEnd> VAR_24 [ VAR_21
<S2SV_ModStart> = VAR_80 ; if ( ( VAR_83 == 0 ) || ( VAR_83 > 4294967295 ) ) METHOD_24 ( VAR_286 , "ImproperImageHeader" ) ; <S2SV_ModStart> VAR_129 ++ ) <S2SV_ModEnd> ; VAR_314 ->
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_19 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1 <S2SV_ModStart> . VAR_13 , <S2SV_ModEnd> 1 ) )
<S2SV_ModStart> } if ( METHOD_25 ( VAR_70 -> VAR_74 ) > VAR_75 ) { METHOD_22 ( VAR_64 , VAR_65 , "Invalid<S2SV_blank>segment<S2SV_blank>count<S2SV_blank>(%u)" , METHOD_25 ( VAR_70 -> VAR_74 ) ) ; return 1 ; } if (
<S2SV_ModStart> } VAR_125 = METHOD_12 <S2SV_ModEnd> ( VAR_42 )
<S2SV_ModStart> ; VAR_14 -> VAR_19 = 64 * VAR_20 <S2SV_ModEnd> ; if ( <S2SV_ModStart> : VAR_14 -> VAR_19 <S2SV_ModEnd> = METHOD_6 (
<S2SV_ModStart> "<S2SV_blank><S2SV_blank>-G,<S2SV_blank>--no-syslog<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Don\'t<S2SV_blank>log<S2SV_blank>via<S2SV_blank>syslog\\n" ) ; METHOD_46 ( VAR_50 , "<S2SV_blank><S2SV_blank>-u,<S2SV_blank>--umask=MASK<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>umask<S2SV_blank>for<S2SV_blank>file<S2SV_blank>creation<S2SV_blank>(in<S2SV_blank>numeric<S2SV_blank>form)\\n" ) ;
<S2SV_ModStart> ) ) ; if ( METHOD_4 ( ) ) { if ( METHOD_5 ( VAR_2 ) ) METHOD_6 ( VAR_5 , VAR_6 | VAR_7 ) ; else METHOD_7 ( VAR_5 , VAR_6 | VAR_7 ) ; } if ( METHOD_8 ( ) ) METHOD_9 ( VAR_2 ) ;
<S2SV_ModStart> ) { const TYPE_15 <S2SV_ModEnd> * VAR_57 = <S2SV_ModStart> TYPE_6 VAR_55 = VAR_23 <S2SV_ModEnd> -> VAR_17 - <S2SV_ModStart> = 1 + VAR_23 <S2SV_ModEnd> -> VAR_17 / <S2SV_ModStart> ( VAR_23 -> VAR_64 <S2SV_ModEnd> >> 4 , <S2SV_ModStart> ; TYPE_14 VAR_63 ; if ( VAR_57 -> VAR_65 ) { const TYPE_14 VAR_66 = VAR_57 -> VAR_65 + 100 ; VAR_63 = VAR_8 -> VAR_67 ? ( VAR_23 -> VAR_64 * VAR_23 -> VAR_68 * VAR_66 ) / ( VAR_23 -> VAR_68 * 100 + VAR_66 - 100 ) : ( VAR_23 -> VAR_64 * VAR_23 -> VAR_68 * 100 ) / ( VAR_23 -> VAR_68 * 100 + VAR_66 - 100 ) ; } else { VAR_63 = VAR_23 -> VAR_64 ; } if ( METHOD_6 ( VAR_8 ) ) { TYPE_14 VAR_69 = METHOD_7 ( VAR_34 -> VAR_70 , VAR_34 -> VAR_32 , <S2SV_ModEnd> VAR_34 -> VAR_26 <S2SV_ModStart> VAR_34 -> VAR_26 ) <S2SV_ModEnd> ; const TYPE_10 <S2SV_ModStart> -> VAR_35 [ VAR_69 <S2SV_ModEnd> ] ; VAR_63 <S2SV_ModStart> 200 ; } if ( VAR_57 -> VAR_71 ) { const TYPE_14 VAR_72 = VAR_23 -> VAR_64 * VAR_57 -> VAR_71 / 100 ; VAR_63 = METHOD_4 ( VAR_63 , VAR_72 ) ; }
<S2SV_ModStart> = { . VAR_72 = VAR_68 -> VAR_72 , .
<S2SV_ModStart> ; if ( VAR_18 == VAR_22 ||
<S2SV_ModStart> * VAR_4 = METHOD_4 ( STRUCT_OR_UNION_3 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_86 ) ; if ( VAR_87 -> VAR_70 . VAR_89 != VAR_84 ) <S2SV_ModStart> METHOD_18 ( VAR_87 -> VAR_70 . VAR_89 ) ; METHOD_18 ( VAR_87 <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_86 ) ; if ( VAR_87 -> VAR_70 . VAR_89 != VAR_84 ) <S2SV_ModStart> METHOD_18 ( VAR_87 -> VAR_70 . VAR_89 ) ; METHOD_18 ( VAR_87 <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> , VAR_184 , 0 ,
<S2SV_ModStart> * VAR_9 && <S2SV_ModEnd> VAR_10 && VAR_11 <S2SV_ModStart> VAR_10 && VAR_11 <S2SV_ModEnd> ) return METHOD_2
<S2SV_ModStart> , VAR_55 ) ; VAR_103 -> VAR_127 = 0 <S2SV_ModStart> ) ) ; VAR_103 -> VAR_127 = sizeof ( * VAR_121 ) ;
<S2SV_ModStart> ) ) ; METHOD_32 ( ) ; <S2SV_ModStart> -> VAR_204 : METHOD_33 ( <S2SV_ModStart> VAR_249 -> VAR_204 ) <S2SV_ModStart> , & VAR_205 ) ; METHOD_34 (
<S2SV_ModStart> -> VAR_4 ; TYPE_1 VAR_18 = 0 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> VAR_14 ) { METHOD_3 ( & VAR_15 -> VAR_19 ) ; VAR_13 -> VAR_20 [ 0 ] = 0xde ; VAR_13 -> VAR_20 [ 1 ] = 0 ; <S2SV_ModStart> = 1 ; VAR_18 = <S2SV_ModEnd> METHOD_2 ( VAR_15 <S2SV_ModStart> ( VAR_15 , VAR_13 -> VAR_20 <S2SV_ModEnd> , 2 , <S2SV_ModStart> 0 ) ; METHOD_4 ( & VAR_15 -> VAR_19 ) ; } return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_31 ; <S2SV_ModEnd> TYPE_7 * VAR_57 <S2SV_ModStart> * VAR_57 = strdup ( VAR_50 -> VAR_57 ) ; TYPE_7 * VAR_51 = VAR_50 -> VAR_51 ? strdup ( VAR_50 -> VAR_51 ) : VAR_63 <S2SV_ModEnd> ; TYPE_8 VAR_40 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_51 && * <S2SV_ModStart> VAR_51 && * <S2SV_ModEnd> VAR_51 ) { <S2SV_ModStart> , "anal.cpu" , <S2SV_ModEnd> VAR_51 ) ; <S2SV_ModStart> VAR_64 , VAR_65 ) ; METHOD_12 ( VAR_51 ) ; METHOD_12 ( VAR_57
<S2SV_ModStart> STRUCT_OR_UNION_4 , struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * * VAR_12 <S2SV_ModStart> ) { struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * VAR_13 = <S2SV_ModStart> ( VAR_13 -> VAR_13 .
<S2SV_ModStart> return VAR_256 ; if ( VAR_254 -> VAR_251 & VAR_198 && ! ( VAR_254 -> VAR_251 & VAR_220 ) && ! ( VAR_223 & VAR_192 ) && ! METHOD_43 ( STRUCT_OR_UNION_32 ) && METHOD_44 ( STRUCT_OR_UNION_32 ) ) { VAR_256 = METHOD_45 ( VAR_169 , STRUCT_OR_UNION_32 ) ; if ( VAR_256 ) return VAR_256 ; } } return <S2SV_ModEnd> VAR_257 ; }
<S2SV_ModStart> VAR_133 ) ; <S2SV_ModEnd> VAR_124 = ( <S2SV_ModStart> VAR_117 ) ; METHOD_5 ( VAR_95 ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_4 * VAR_13 <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> VAR_5 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_3 <S2SV_ModStart> STRUCT_OR_UNION_3 VAR_12 ; if ( VAR_13 -> VAR_14 ) return VAR_15 ; <S2SV_ModStart> & VAR_12 , VAR_13 ->
<S2SV_ModStart> VAR_16 |= ( METHOD_2 ( TYPE_4 , VAR_11 ) <S2SV_ModEnd> << 24 )
<S2SV_ModStart> ( VAR_99 , VAR_100 <S2SV_ModEnd> , METHOD_20 (
<S2SV_ModStart> TYPE_2 * VAR_83 = METHOD_27 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> , "w" ) <S2SV_ModEnd> ; TYPE_4 VAR_19 <S2SV_ModStart> * VAR_80 ; if ( ! VAR_83 ) { METHOD_2 ( VAR_4 , "Can\'t<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>(%d:<S2SV_blank>%s)" , VAR_5 , VAR_7 , METHOD_3 ( VAR_7 ) ) ; return ; } METHOD_28 ( VAR_9 -> VAR_80 , VAR_80 , VAR_19 ) { <S2SV_ModEnd> METHOD_25 ( VAR_83
<S2SV_ModStart> VAR_10 , struct STRUCT_OR_UNION_16 * VAR_42 , struct <S2SV_ModStart> STRUCT_OR_UNION_15 -> VAR_22 ) ; if ( STRUCT_OR_UNION_15 -> VAR_31 ) METHOD_17 ( VAR_39 , ",\\n\\"method\\":\\"%s\\"" , STRUCT_OR_UNION_15 -> VAR_31 ) ; else if ( VAR_42 -> VAR_31 ) METHOD_17 ( VAR_39 , ",\\n\\"method\\":\\"%s\\"" , VAR_42 -> VAR_31 <S2SV_ModStart> ( STRUCT_OR_UNION_15 -> <S2SV_ModEnd> VAR_34 ) METHOD_17
<S2SV_ModStart> VAR_20 ) ) goto VAR_23 <S2SV_ModEnd> ; VAR_19 = <S2SV_ModStart> ; } } VAR_23 :
<S2SV_ModStart> VAR_52 ) { struct STRUCT_OR_UNION_1 VAR_59 ; TYPE_0 VAR_60 ; TYPE_0 VAR_61 ; METHOD_5 ( & VAR_59 ) ; VAR_61 = METHOD_6 ( <S2SV_ModEnd> VAR_52 -> VAR_53 <S2SV_ModStart> VAR_52 -> VAR_53 , & VAR_60 , & VAR_59 , VAR_52 -> VAR_36 ) <S2SV_ModStart> ; if ( VAR_61 != VAR_58 <S2SV_ModEnd> ) { METHOD_4 <S2SV_ModStart> -> VAR_39 , VAR_60 , "%s" , VAR_59 . VAR_62 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } METHOD_7 ( & VAR_59 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_61 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; VAR_880 -> VAR_623 = 0 ; VAR_880 -> <S2SV_ModStart> ; VAR_880 -> <S2SV_ModEnd> VAR_625 = 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> * METHOD_0 ( void <S2SV_ModEnd> ) { return <S2SV_ModStart> ) { return METHOD_2 ( <S2SV_ModEnd> VAR_2 ) ;
<S2SV_ModStart> TYPE_5 VAR_56 ; TYPE_5 VAR_62 ; VAR_8 ; do { VAR_62 = 0 ; for ( VAR_35 = 0 ; VAR_35 < VAR_49 -> VAR_55 && VAR_49 -> VAR_50 [ VAR_35 ] . VAR_52 == VAR_53 ; ++ VAR_35 ) ; if ( VAR_35 == VAR_49 -> VAR_55 ) break ; <S2SV_ModEnd> METHOD_1 ( METHOD_2 <S2SV_ModStart> -> VAR_15 ; VAR_42 = METHOD_4 ( VAR_49 , VAR_35 ) ; VAR_56 = 0 ; for ( VAR_51 = VAR_35 ; VAR_51 < VAR_49 -> VAR_55 ; ++ VAR_51 ) { if ( METHOD_4 ( VAR_49 , VAR_51 ) == VAR_42 ) { VAR_59 . VAR_50 [ VAR_56 ] . VAR_63 = VAR_49 -> VAR_50 [ VAR_51 ] . VAR_63 ; VAR_59 . VAR_50 [ VAR_56 ] . VAR_52 = VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 ; ++ VAR_56 ; VAR_49 -> VAR_50 [ VAR_51 ] . VAR_52 = VAR_53 ; } else { VAR_62 = 1 ; } } VAR_59 . VAR_55 = VAR_56 ; METHOD_6 ( & VAR_59 , 1 ) ; METHOD_7 ( & VAR_59 ) ; METHOD_8 ( & VAR_59 ) ; } while ( VAR_62 == 1 <S2SV_ModEnd> ) ; VAR_60
<S2SV_ModStart> case VAR_89 : if ( VAR_340 -> VAR_295 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> break ; } if ( VAR_340 -> VAR_341 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> break ; } if ( VAR_340 -> VAR_146 != VAR_338 ) return ( - 1 ) ; <S2SV_ModStart> VAR_289 * 4 ) return ( - 1 ) ; if ( VAR_288 -> VAR_198 != VAR_338 <S2SV_ModStart> * VAR_272 ; if ( VAR_340 -> VAR_264 != VAR_338 ) return ( - 1 ) ;
<S2SV_ModStart> TYPE_3 VAR_131 [ VAR_138 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> ( VAR_136 , "Rootname:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_131 , VAR_138 <S2SV_ModEnd> , VAR_136 ) <S2SV_ModStart> ( VAR_136 , "Commandfile<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 ) <S2SV_ModStart> ( VAR_136 , "Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , VAR_131 )
<S2SV_ModStart> VAR_51 ; TYPE_5 <S2SV_ModEnd> VAR_57 , VAR_60 <S2SV_ModStart> , VAR_43 ; if ( VAR_14 < 0 ) { VAR_14 = 0 ; } VAR_32 = VAR_14 <S2SV_ModEnd> / 86400 ; <S2SV_ModStart> / 86400 ; VAR_57 = VAR_14 % 86400 ; <S2SV_ModStart> % 7 ; VAR_63 = VAR_57 <S2SV_ModEnd> / 3600 ; <S2SV_ModStart> / 3600 ; VAR_57 <S2SV_ModEnd> %= 3600 ; <S2SV_ModStart> ; VAR_60 = VAR_57 <S2SV_ModEnd> / 60 ; <S2SV_ModStart> 60 ; VAR_57 %= <S2SV_ModEnd> 60 ; VAR_32
<S2SV_ModStart> if ( VAR_48 >= <S2SV_ModEnd> VAR_22 ) {
<S2SV_ModStart> TYPE_1 ) { <S2SV_ModEnd> if ( VAR_36 <S2SV_ModStart> ) return ; TYPE_3 VAR_37 = METHOD_5 ( ) ; <S2SV_ModStart> != VAR_5 ) { VAR_37 = METHOD_6 ( VAR_37 , "redis<S2SV_blank>%s" , VAR_36 . VAR_12 ) ; } else { TYPE_4 VAR_39 [ 256 ] ; METHOD_2 ( VAR_39 , sizeof ( VAR_39 ) , VAR_36 . VAR_19 , VAR_36 . VAR_21 ) ; VAR_37 = METHOD_8 ( VAR_37 , VAR_39 , METHOD_7 ( VAR_39 ) ) ; } if ( VAR_36 . VAR_32 != 0 ) VAR_37 = METHOD_6 ( VAR_37 , "[%i]" , VAR_36 . VAR_32 ) ; VAR_37 = METHOD_8 ( VAR_37 , "><S2SV_blank>" , 2 ) ; <S2SV_ModEnd> METHOD_4 ( VAR_36 <S2SV_ModStart> VAR_37 ) , "%s" , VAR_37 ) ; METHOD_9 ( VAR_37 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> , VAR_38 ; unsigned TYPE_2 VAR_46 , VAR_47 ; TYPE_2 VAR_48 ; <S2SV_ModStart> 1 ; } VAR_46 = METHOD_11 ( VAR_25 -> VAR_49 ) ; VAR_47 = VAR_43 -> VAR_47 ; for ( VAR_48 = 0 ; VAR_48 < VAR_50 ; VAR_48 ++ ) { if ( METHOD_11 ( VAR_33 -> VAR_51 [ VAR_48 ] ) >= VAR_46 || METHOD_17 ( VAR_33 -> VAR_52 [ VAR_48 ] ) >= VAR_47 ) return 1 ; } for ( VAR_48 = 0 ; VAR_48 < VAR_53 ; VAR_48 ++ ) { if ( METHOD_11 ( VAR_33 -> VAR_54 [ VAR_48 ] ) >= VAR_46 || METHOD_17 ( VAR_33 -> VAR_55 [ VAR_48 ] ) >= VAR_47 ) return 1 ; }
<S2SV_ModStart> ; TYPE_3 VAR_37 ; if ( METHOD_21 ( VAR_116 ) -> VAR_120 ) goto VAR_115 ; METHOD_21 ( VAR_116 ) -> VAR_120 = 1
<S2SV_ModStart> = { . VAR_72 = VAR_68 -> VAR_72 , .
<S2SV_ModStart> -> VAR_162 |= VAR_214 ; STRUCT_OR_UNION_131 -> VAR_162 |= <S2SV_ModStart> &= ~ VAR_135 ; STRUCT_OR_UNION_131 -> VAR_162 &= ~ VAR_214
<S2SV_ModStart> ; } } const TYPE_24 VAR_442 = VAR_443 ? 0 : VAR_193 ; <S2SV_ModStart> ( VAR_405 , VAR_442 <S2SV_ModEnd> , VAR_188 ,
<S2SV_ModStart> , "enter" ) ; VAR_666 = ( TYPE_60 * ) VAR_721 <S2SV_ModStart> VAR_664 ) ; if ( VAR_666 != ( TYPE_60 * ) VAR_721 )
<S2SV_ModStart> * VAR_15 , TYPE_2 VAR_17 <S2SV_ModEnd> ) { switch <S2SV_ModStart> { switch ( VAR_17 <S2SV_ModEnd> ) { case <S2SV_ModStart> -> VAR_15 | VAR_17 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_11 * VAR_134 , TYPE_13 VAR_142 <S2SV_ModStart> return VAR_59 ; if ( VAR_142 >= 32 ) return VAR_110 ; <S2SV_ModStart> , & VAR_135 , VAR_142 + 1
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_570 <S2SV_ModStart> VAR_13 ) ; \\\n} <S2SV_ModEnd> TYPE_19 * VAR_582 <S2SV_ModStart> goto VAR_424 ; ( TYPE_85 ) METHOD_82 ( VAR_566 , 0 , ( TYPE_73 ) VAR_450 * sizeof ( * VAR_566 ) ) ;
<S2SV_ModStart> VAR_13 == VAR_14 && VAR_15 [ VAR_16 ] . VAR_17 >= 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> VAR_209 , VAR_214 <S2SV_ModEnd> ; TYPE_4 VAR_204 <S2SV_ModStart> VAR_210 ; } VAR_209 = VAR_212 -> VAR_208 ; if ( VAR_209 > VAR_208 ) { VAR_209 = VAR_208 ; VAR_198 -> VAR_142 |= VAR_206 ; } VAR_214 = METHOD_12 ( VAR_212 , 0 , VAR_198 -> VAR_147 , VAR_209 ) ; if ( VAR_214 ) goto VAR_210 ; METHOD_13 ( VAR_198 , VAR_211 , VAR_212 ) ; if ( VAR_198 -> VAR_157 ) { <S2SV_ModEnd> if ( STRUCT_OR_UNION_10 <S2SV_ModStart> == VAR_125 ) { <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; } else { struct STRUCT_OR_UNION_12 * VAR_130 = & METHOD_17 ( VAR_212 ) -> VAR_159 . VAR_123 ; <S2SV_ModEnd> VAR_198 -> VAR_161 <S2SV_ModStart> VAR_133 ) ; } METHOD_14 <S2SV_ModEnd> ( VAR_198 -> <S2SV_ModStart> VAR_198 -> VAR_157 <S2SV_ModEnd> , & METHOD_17 <S2SV_ModStart> VAR_161 ) ; }
<S2SV_ModStart> ( VAR_18 , STRUCT_OR_UNION_4 -> VAR_38 -> VAR_39 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( VAR_26 , STRUCT_OR_UNION_4 -> VAR_38 -> VAR_40 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> TYPE_3 * VAR_13 ; TYPE_4 VAR_14 <S2SV_ModStart> return VAR_8 ; VAR_14 = <S2SV_ModEnd> METHOD_3 ( VAR_12 <S2SV_ModStart> ( VAR_12 ) ; if ( VAR_14 > 0 && VAR_12 [ VAR_14 <S2SV_ModStart> ) VAR_12 [ VAR_14 <S2SV_ModEnd> - 1 ]
<S2SV_ModStart> -> VAR_39 . VAR_36 = 0 ; STRUCT_OR_UNION_14 -> VAR_39 .
<S2SV_ModStart> ( VAR_16 METHOD_202 \\\n{ <S2SV_ModEnd> if ( VAR_260 <S2SV_ModStart> METHOD_202 ; } \\\n} <S2SV_ModEnd> TYPE_45 VAR_233 ; <S2SV_ModStart> ++ METHOD_202 { VAR_206 = VAR_207 ; VAR_189 = 1 ; <S2SV_ModStart> -= VAR_221 ; if ( VAR_224 < 0 METHOD_202 continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_61 ) { if ( METHOD_19 ( VAR_67 ) != VAR_79 ) { TYPE_5 VAR_80 ; VAR_80 = * * VAR_67 ; METHOD_20 ( & VAR_80 <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> ; METHOD_14 ( & VAR_80 <S2SV_ModEnd> ) ; VAR_77 <S2SV_ModStart> . VAR_56 = METHOD_21 ( VAR_80 ) ; } else { VAR_77 [ VAR_65 ] . VAR_56 = <S2SV_ModStart> VAR_67 ) ; } <S2SV_ModStart> VAR_61 ) { if ( METHOD_19 ( VAR_67 ) != VAR_79 ) { TYPE_5 VAR_80 ; VAR_80 = * * VAR_67 ; METHOD_20 ( & VAR_80 <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> ; METHOD_14 ( & VAR_80 <S2SV_ModEnd> ) ; VAR_77 <S2SV_ModStart> . VAR_66 = METHOD_21 ( VAR_80 ) ; } else { VAR_77 [ VAR_65 ] . VAR_66 = <S2SV_ModStart> ; } } }
<S2SV_ModStart> VAR_4 ) ; if ( ! METHOD_5 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> , VAR_11 ) ) { <S2SV_ModEnd> VAR_12 = METHOD_3 <S2SV_ModStart> VAR_9 ) ; } else { VAR_12 = VAR_4 ; }
<S2SV_ModStart> VAR_44 ) { ( TYPE_0 ) VAR_44 ;
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> VAR_32 ; } VAR_39 . VAR_82 [ sizeof ( VAR_39 . VAR_82 ) - 1 ] = 0 ;
<S2SV_ModStart> , VAR_89 ; METHOD_4 <S2SV_ModEnd> ( VAR_63 ,
<S2SV_ModStart> VAR_29 ) ; TYPE_9 VAR_41 ; struct STRUCT_OR_UNION_2 * VAR_20 ; if ( ! VAR_40 ) return VAR_44 ; <S2SV_ModEnd> VAR_41 = VAR_29 <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( VAR_20
<S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_527 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_336 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_149 <S2SV_ModStart> ) ; goto VAR_532 <S2SV_ModEnd> ; } VAR_149
<S2SV_ModStart> if ( VAR_35 >= <S2SV_ModEnd> VAR_32 ) return <S2SV_ModStart> ) ; } while <S2SV_ModEnd> ( VAR_35 < <S2SV_ModStart> VAR_34 [ VAR_35 ++
<S2SV_ModStart> "." ) ) { <S2SV_ModStart> VAR_66 ) ; } else { <S2SV_ModEnd> METHOD_9 ( VAR_97 <S2SV_ModStart> VAR_68 ) ; }
<S2SV_ModStart> . VAR_170 ) ) { struct STRUCT_OR_UNION_1 VAR_273 ; if ( STRUCT_OR_UNION_1 ( VAR_192 , & VAR_273 ) == 0 && METHOD_7 ( VAR_273 . VAR_170 ) ) { TYPE_26 VAR_274 ; if ( VAR_261 . VAR_231 == 0 || ( METHOD_40 ( METHOD_38 ( VAR_246 , VAR_247 ) , & VAR_274 ) == 0 && VAR_261 . VAR_231 == VAR_274 ) ) { VAR_261 = VAR_273 ; } } <S2SV_ModEnd> } if (
<S2SV_ModStart> -> VAR_43 ; METHOD_8 ( VAR_41 , VAR_37 , VAR_20 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> VAR_40 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_6 ; if
<S2SV_ModStart> return - VAR_11 ; if ( VAR_51 == 0 ) return - VAR_63
<S2SV_ModStart> = STRUCT_OR_UNION_11 ; VAR_37 -> VAR_38 = 0 ; VAR_37 -> VAR_39 = 0 ;
<S2SV_ModStart> VAR_30 ) ; METHOD_62 ( & VAR_126 ) ; <S2SV_ModEnd> if ( VAR_47
<S2SV_ModStart> VAR_18 ) { TYPE_0 VAR_41 = METHOD_12 ( STRUCT_OR_UNION_9 , VAR_18 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! F2FS_I ( STRUCT_OR_UNION_9 ) -> STRUCT_OR_UNION_5 ) set_inode_flag ( STRUCT_OR_UNION_9 , FI_NO_EXTENT <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_41 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; TYPE_6 VAR_34 = 0 ; TYPE_6 VAR_46 <S2SV_ModStart> , & VAR_34 , & VAR_46 <S2SV_ModStart> METHOD_6 ( VAR_23 ) ; if ( VAR_46 > VAR_47 ) METHOD_6 ( VAR_41 <S2SV_ModStart> ) ; } if ( VAR_45 > ( TYPE_3 ) VAR_46 ) { VAR_45 = - 1 ; METHOD_6 ( VAR_41 ) ; }
<S2SV_ModStart> const TYPE_5 * VAR_92 , TYPE_9 <S2SV_ModEnd> VAR_71 ) { <S2SV_ModStart> VAR_71 ) { const TYPE_5 * const VAR_88 = VAR_71 ? METHOD_18 ( VAR_92 , 1 ) : VAR_92 ; <S2SV_ModStart> , METHOD_22 ( VAR_92 ) , VAR_92 <S2SV_ModEnd> -> VAR_89 ,
<S2SV_ModStart> VAR_17 == VAR_39 && ( VAR_37 -> VAR_40 < VAR_37 -> VAR_41 )
<S2SV_ModStart> STRUCT_OR_UNION_2 VAR_75 ; TYPE_6 VAR_78 = 0 ; <S2SV_ModStart> VAR_47 ) ; VAR_78 = <S2SV_ModStart> VAR_76 ) , "%smailboxes<S2SV_blank>" <S2SV_ModEnd> , VAR_67 ? <S2SV_ModStart> "" : "un" ) ; METHOD_28 ( VAR_76 + VAR_78 , sizeof ( VAR_76 ) - VAR_78 , VAR_43 , VAR_79 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_267 . VAR_408 + 1
<S2SV_ModStart> ] . VAR_290 ; if ( ~ VAR_207 < 16 ) METHOD_134 ( VAR_345 , "MemoryAllocationFailed" )
<S2SV_ModStart> VAR_26 -> VAR_12 ) return VAR_29 ; if ( VAR_23 -> VAR_31 && ! VAR_26 -> VAR_31
<S2SV_ModStart> TYPE_17 * VAR_285 ; TYPE_58 VAR_286 <S2SV_ModStart> , VAR_219 , <S2SV_ModEnd> VAR_207 , VAR_75 <S2SV_ModStart> . VAR_134 = ( MagickRealType ) <S2SV_ModStart> . VAR_137 = ( MagickRealType ) <S2SV_ModStart> . VAR_140 = ( MagickRealType ) <S2SV_ModStart> . VAR_134 = 0.0 <S2SV_ModEnd> ; VAR_285 -> <S2SV_ModStart> . VAR_137 = 0.0 <S2SV_ModEnd> ; VAR_285 -> <S2SV_ModStart> . VAR_140 = 0.0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { VAR_286 <S2SV_ModEnd> = METHOD_37 ( <S2SV_ModStart> , VAR_232 ) ; if ( VAR_286 < 0 ) break <S2SV_ModStart> unsigned TYPE_72 ) VAR_286 <S2SV_ModEnd> ; if ( <S2SV_ModStart> TYPE_72 ) ( VAR_286 <S2SV_ModEnd> >> 8 ) <S2SV_ModStart> ++ ) { VAR_286 <S2SV_ModEnd> = METHOD_37 ( <S2SV_ModStart> , VAR_232 ) ; if ( VAR_286 < 0 ) break <S2SV_ModStart> unsigned TYPE_72 ) VAR_286 ; } if ( METHOD_26 ( VAR_285 ) != VAR_279 ) { VAR_281 = ( unsigned TYPE_72 * ) METHOD_43 ( VAR_281 ) ; METHOD_35 ( VAR_113 , "UnexpectedEndOfFile" ) <S2SV_ModEnd> ; } VAR_259 <S2SV_ModStart> VAR_264 = ( unsigned TYPE_58 <S2SV_ModEnd> ) ( *
<S2SV_ModStart> , VAR_41 , 1 , <S2SV_ModStart> , VAR_41 , 1 , <S2SV_ModStart> , VAR_41 , 0 ,
<S2SV_ModStart> ; TYPE_1 VAR_7 ; METHOD_2 ( VAR_13 , & VAR_11 -> VAR_6 )
<S2SV_ModStart> VAR_39 ; struct STRUCT_OR_UNION_6 * VAR_38 = VAR_39 -> VAR_37 . VAR_38 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_38 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_38 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_38 ) ) <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_38 ) ;
<S2SV_ModStart> * VAR_19 ; <S2SV_ModEnd> VAR_19 = METHOD_1 <S2SV_ModStart> ( VAR_7 ) <S2SV_ModEnd> ; VAR_53 -> <S2SV_ModStart> 9 ) ; return METHOD_6 <S2SV_ModEnd> ( VAR_53 , <S2SV_ModStart> ( VAR_53 , VAR_19 -> VAR_14 , VAR_19 -> VAR_20 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_46 <S2SV_ModEnd> ) ; VAR_31 <S2SV_ModStart> ( VAR_41 , VAR_47 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_31 & VAR_48 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_49 <S2SV_ModEnd> ) ; VAR_41 <S2SV_ModStart> } if ( METHOD_2 ( VAR_41 , VAR_50 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_51 <S2SV_ModEnd> ) ; VAR_41 <S2SV_ModStart> VAR_31 & ( VAR_52 | VAR_53 <S2SV_ModEnd> ) ) != <S2SV_ModStart> ( VAR_41 , VAR_47 , VAR_52 | VAR_53 <S2SV_ModEnd> ) ; VAR_44 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_46 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ) ) { if ( VAR_346 -> VAR_347 >= VAR_349 ) goto VAR_348 ; <S2SV_ModStart> ) ) { if ( VAR_346 -> VAR_347 >= VAR_349 ) goto VAR_348 ;
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_84 , VAR_85 <S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_84 , VAR_85 <S2SV_ModStart> VAR_83 , 1 <S2SV_ModEnd> , VAR_84 ,
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_55 ) { struct STRUCT_OR_UNION_1 * VAR_50 = VAR_55 -> VAR_51 ; struct STRUCT_OR_UNION_2 * VAR_56 = VAR_50 -> VAR_57 ; METHOD_16 ( & VAR_50 -> VAR_58 ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x87 ; VAR_56 -> VAR_59 [ 2 ] = 0x0 ; if ( METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 , 3 , VAR_56 -> VAR_59 , 1 , 0 ) < 0 ) METHOD_11 ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x86 ; VAR_56 -> VAR_59 [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x80 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_7 ( 50 ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x80 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 , 1 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> ) METHOD_11 ( <S2SV_ModEnd> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_ModStart> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; mutex_unlock ( & VAR_50 -> VAR_58 ) ; VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> & VAR_50 -> <S2SV_ModEnd> VAR_52 , VAR_45 <S2SV_ModStart> ; if ( VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> ( VAR_46 , VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> , & VAR_50 <S2SV_ModEnd> -> VAR_52 ,
<S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 , <S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 , <S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 ,
<S2SV_ModStart> VAR_51 , VAR_27 | VAR_265 | VAR_266 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; goto VAR_235 ; } else { VAR_263 = - 1 <S2SV_ModStart> VAR_261 ) ; <S2SV_ModEnd> if ( VAR_263 <S2SV_ModStart> if ( VAR_263 != - 1 <S2SV_ModEnd> ) METHOD_53 (
<S2SV_ModStart> ( VAR_49 ) ; VAR_49 -> VAR_51 &= ~ VAR_52
<S2SV_ModStart> ( METHOD_12 ( VAR_23 ) ) METHOD_15 ( VAR_21 , VAR_22 ) ; else if ( METHOD_12 ( VAR_24 ) ) METHOD_16 <S2SV_ModEnd> ( VAR_21 , <S2SV_ModStart> VAR_18 ) ) METHOD_17 <S2SV_ModEnd> ( VAR_21 , <S2SV_ModStart> ) ; else METHOD_18 <S2SV_ModEnd> ( VAR_21 ,
<S2SV_ModStart> VAR_60 ) ; METHOD_16 ( STRUCT_OR_UNION_13 ) ; <S2SV_ModStart> 0 ) { kvm_put_kvm ( STRUCT_OR_UNION_13 ) ; <S2SV_ModStart> VAR_64 ; } <S2SV_ModEnd> VAR_62 -> VAR_63
<S2SV_ModStart> VAR_290 ) ; TYPE_2 * VAR_555 = VAR_557 -> VAR_555 ; TYPE_13 VAR_559 = METHOD_20 ( VAR_557 -> VAR_555 ) ; TYPE_13 VAR_560 = VAR_556 - VAR_559 ; VAR_555 += VAR_559 ; <S2SV_ModStart> < VAR_290 && VAR_559 <S2SV_ModEnd> + 10 < <S2SV_ModStart> ++ ) { METHOD_41 ( VAR_555 , VAR_560 <S2SV_ModEnd> , "%d<S2SV_blank>" , <S2SV_ModStart> ] ) ; VAR_559 = METHOD_20 ( VAR_555 ) ; VAR_555 += VAR_559 ; VAR_560 -= VAR_559 ; <S2SV_ModStart> } METHOD_41 ( VAR_555 , VAR_560 - 1 <S2SV_ModEnd> , "%d" ,
<S2SV_ModStart> ; while ( VAR_826 < METHOD_46 ( VAR_915 ) && <S2SV_ModStart> if ( VAR_826 > METHOD_46 ( VAR_915 ) || VAR_826 < 0 <S2SV_ModEnd> ) break ; <S2SV_ModStart> + VAR_826 ) >= <S2SV_ModEnd> METHOD_46 ( VAR_915 <S2SV_ModStart> - 1 ) ) ; METHOD_178 ( VAR_914 , "UnexpectedEndOfFile"
<S2SV_ModStart> TYPE_6 METHOD_0 ( const
<S2SV_ModStart> TYPE_1 * VAR_80 ) { TYPE_4 * VAR_81 = ( TYPE_4 * ) METHOD_2 ( 1 , sizeof ( * VAR_81 ) ) <S2SV_ModEnd> ; VAR_80 -> <S2SV_ModStart> -> VAR_81 = ( TYPE_5 * ) VAR_81 <S2SV_ModEnd> ; VAR_80 -> <S2SV_ModStart> -> VAR_66 ; VAR_81 -> VAR_51 . VAR_47 = sizeof ( VAR_81 -> VAR_51 ) ; VAR_81 -> VAR_55 = VAR_61 ; VAR_81 -> VAR_60 = VAR_61 ; <S2SV_ModStart> VAR_79 ) { VAR_81 <S2SV_ModEnd> -> VAR_83 = <S2SV_ModStart> VAR_79 = & VAR_81 <S2SV_ModEnd> -> VAR_83 ;
<S2SV_ModStart> TYPE_6 VAR_113 , VAR_61 , VAR_59 , VAR_176 , VAR_253 = 1 ; TYPE_10 VAR_135 <S2SV_ModEnd> ; TYPE_7 VAR_151 <S2SV_ModStart> TYPE_8 VAR_229 , VAR_43 ; TYPE_10 VAR_93 ; TYPE_10 <S2SV_ModEnd> VAR_134 ; TYPE_10
<S2SV_ModStart> * VAR_24 , TYPE_8 <S2SV_ModEnd> VAR_26 ) { <S2SV_ModStart> VAR_27 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_6 ) { const <S2SV_ModStart> VAR_22 = VAR_8 ; TYPE_6 VAR_25 [ 65 ] = { 0 } <S2SV_ModStart> ; unsigned VAR_21 ; TYPE_8 VAR_28 <S2SV_ModStart> + 40 ; VAR_28 = METHOD_5 ( sizeof ( VAR_25 ) , METHOD_4 ( TYPE_8 , 1 , VAR_26 ) ) ; VAR_28 = METHOD_6 <S2SV_ModEnd> ( VAR_25 , <S2SV_ModStart> ( VAR_25 , VAR_28 <S2SV_ModEnd> , "2.6.%u%s" , <S2SV_ModStart> , VAR_25 , VAR_28 + 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_6 , VAR_20 <S2SV_ModEnd> ) ; TYPE_5
<S2SV_ModStart> ; VAR_22 = METHOD_7 <S2SV_ModEnd> ( VAR_14 ,
<S2SV_ModStart> VAR_116 ) ; if ( VAR_312 -> VAR_223 || VAR_312 -> VAR_232 ) { METHOD_13 ( VAR_312 -> VAR_310 , "Support<S2SV_blank>for<S2SV_blank>image<S2SV_blank>offsets" ) ; return VAR_63 ; }
<S2SV_ModStart> VAR_79 , VAR_81 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> 1 ) { if ( VAR_21 >= VAR_25 - VAR_23 - 7 ) return VAR_24 ;
<S2SV_ModStart> if ( VAR_149 && VAR_149 -> VAR_130
<S2SV_ModStart> -> VAR_59 , METHOD_16 ( <S2SV_ModStart> ] -> VAR_86 )
<S2SV_ModStart> return 0 ; METHOD_7 ( & METHOD_6 ( VAR_32 ) -> VAR_33 . VAR_37 ) ; <S2SV_ModStart> 1 ; } METHOD_8 ( & METHOD_6 ( VAR_32 ) -> VAR_33 . VAR_37 ) ;
<S2SV_ModStart> ) ; } METHOD_26 ( VAR_106 ) ;
<S2SV_ModStart> VAR_55 ) { <S2SV_ModEnd> TYPE_6 VAR_65 = <S2SV_ModStart> ; TYPE_10 * VAR_50 = get_pid_cgroup ( VAR_17 , VAR_43 ) ; TYPE_10 * VAR_56 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_50 ) return VAR_24 <S2SV_ModEnd> ; METHOD_8 ( <S2SV_ModStart> ( VAR_55 ) { <S2SV_ModStart> VAR_57 ) ; } <S2SV_ModStart> = VAR_60 ; VAR_62 : METHOD_13 ( VAR_50 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ( VAR_81 = METHOD_21 ( VAR_61 , VAR_78 <S2SV_ModEnd> ) ) == <S2SV_ModStart> { METHOD_12 ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>Permission<S2SV_blank>denied" , VAR_61 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> return VAR_149 ; TYPE_8 VAR_150 = 0 ; if ( METHOD_20 ( sizeof ( TYPE_14 ) , VAR_101 , & VAR_150 ) ) return VAR_151 ; <S2SV_ModStart> = METHOD_7 ( VAR_150 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_4 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> VAR_5 ) { TYPE_4 * VAR_11 ; TYPE_3 VAR_10 ; <S2SV_ModStart> return VAR_3 ; VAR_11 = ( TYPE_4 * ) METHOD_3 ( VAR_5 <S2SV_ModEnd> , & VAR_10 <S2SV_ModStart> VAR_10 ) ; if ( VAR_11 )
<S2SV_ModStart> * VAR_91 ; if ( VAR_87 -> VAR_91 != VAR_29 ) { VAR_91 = VAR_87 -> VAR_91 ; } else
<S2SV_ModStart> ; VAR_43 = METHOD_11 <S2SV_ModEnd> ( VAR_74 -> <S2SV_ModStart> VAR_74 -> VAR_46 , <S2SV_ModEnd> VAR_52 ) ;
<S2SV_ModStart> ; if ( METHOD_10 ( VAR_57 ) ) return - VAR_52 ; if (
<S2SV_ModStart> , VAR_35 , "<S2SV_blank>\\\\\\"\'$`<>" <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> , VAR_35 , "\\"\\\\" ) ; METHOD_14 ( "\\"" <S2SV_ModEnd> , VAR_36 )
<S2SV_ModStart> if ( ! METHOD_52 <S2SV_ModEnd> ( VAR_350 ) <S2SV_ModStart> { if ( METHOD_52 <S2SV_ModEnd> ( VAR_350 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static const TYPE_3 * <S2SV_ModEnd> METHOD_0 ( const <S2SV_ModStart> METHOD_0 ( const TWO_PASS * VAR_15 <S2SV_ModEnd> , TYPE_2 VAR_20 <S2SV_ModStart> VAR_20 ) { if ( <S2SV_ModEnd> ( VAR_20 >= <S2SV_ModStart> VAR_20 >= 0 && VAR_15 -> VAR_5 + VAR_20 <S2SV_ModEnd> >= VAR_15 -> <S2SV_ModStart> -> VAR_10 ) || <S2SV_ModEnd> ( VAR_20 < <S2SV_ModStart> VAR_20 < 0 && VAR_15 -> VAR_5 + VAR_20 <S2SV_ModEnd> < VAR_15 -> <S2SV_ModStart> -> VAR_16 ) ) { return VAR_21 ; } return & VAR_15 -> VAR_5 <S2SV_ModEnd> [ VAR_20 ] <S2SV_ModStart> VAR_20 ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; goto VAR_214 <S2SV_ModEnd> ; } METHOD_30 <S2SV_ModStart> VAR_216 ) ; <S2SV_ModEnd> METHOD_34 ( &
<S2SV_ModStart> TYPE_1 * VAR_15 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> VAR_130 ) ; METHOD_31 ( ) <S2SV_ModEnd> ; VAR_133 ->
<S2SV_ModStart> ; if ( METHOD_6 ( STRUCT_OR_UNION_8 <S2SV_ModEnd> ) ) VAR_23
<S2SV_ModStart> VAR_200 ++ ) { if ( METHOD_47 ( VAR_236 ) ) return VAR_235 ; <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ) ; } METHOD_3 ( VAR_188 ) ; <S2SV_ModStart> 0 ) { METHOD_4 ( VAR_188 ) ; <S2SV_ModStart> VAR_220 ; } METHOD_4 ( VAR_188 ) ;
<S2SV_ModStart> VAR_59 ) { TYPE_5 * VAR_65 ; TYPE_6 VAR_66 <S2SV_ModEnd> ; METHOD_8 ( <S2SV_ModStart> ; if ( VAR_59 < 0 ) { METHOD_9 ( "negative<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>for<S2SV_blank>jas_stream_memopen" ) ; } if ( VAR_56 && VAR_59 <= 0 ) { METHOD_10 ( "Invalid<S2SV_blank>use<S2SV_blank>of<S2SV_blank>jas_stream_memopen<S2SV_blank>detected.\\n" ) ; METHOD_9 ( "A<S2SV_blank>user-provided<S2SV_blank>buffer<S2SV_blank>for<S2SV_blank>" "jas_stream_memopen<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>growable.\\n" ) ; } <S2SV_ModEnd> if ( VAR_59 <S2SV_ModStart> 0 ) { VAR_66 = 0 ; VAR_65 = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { VAR_66 <S2SV_ModEnd> = VAR_59 ; <S2SV_ModStart> = VAR_59 ; VAR_65 = VAR_56 ; } return jas_stream_memopen2 ( VAR_65 , VAR_66 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_94 == VAR_95 && VAR_275 -> VAR_277 == VAR_278
<S2SV_ModStart> 1 ) ; METHOD_18 ( & STRUCT_OR_UNION_13 -> VAR_45 , sizeof ( VAR_46 ) ) ;
<S2SV_ModStart> ; VAR_12 = METHOD_3 ( VAR_10 , 0 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> && VAR_95 ) <S2SV_ModEnd> VAR_106 = METHOD_11 <S2SV_ModStart> , VAR_106 , VAR_104 , VAR_94 , VAR_95 ) ; else VAR_106 = METHOD_12 ( VAR_108 , VAR_106 , VAR_104 ) ; if ( VAR_106 == VAR_110 ) goto VAR_107 ; } if <S2SV_ModStart> < VAR_104 ) <S2SV_ModEnd> METHOD_14 ( (
<S2SV_ModStart> VAR_7 ) { TYPE_3 VAR_6 ; struct STRUCT_OR_UNION_0 VAR_8 = * VAR_7 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> VAR_6 ) ; if ( ! METHOD_4 ( VAR_7 , VAR_6 ) ) { METHOD_5 ( "mcs_parse_domain_params(),<S2SV_blank>consume<S2SV_blank>domain<S2SV_blank>params<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_8 ) ; }
<S2SV_ModStart> VAR_50 ) { TYPE_7 VAR_63 , VAR_64 , VAR_65 ; TYPE_4 VAR_66 = - 1 ; TYPE_4 VAR_62 = - 1 , VAR_44 <S2SV_ModEnd> = - 1 <S2SV_ModStart> 1 , VAR_35 <S2SV_ModEnd> ; TYPE_5 VAR_39 <S2SV_ModStart> 0 ) { METHOD_25 ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , METHOD_4 <S2SV_ModStart> ) ; return VAR_66 <S2SV_ModEnd> ; } VAR_62 <S2SV_ModStart> 0 ) { METHOD_25 ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , VAR_16 <S2SV_ModStart> VAR_16 ) ; goto VAR_70 ; } VAR_35 = getresuid ( & VAR_63 , & VAR_65 , & VAR_64 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>retrieve<S2SV_blank>real,<S2SV_blank>effective,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>" "user<S2SV_blank>IDs:<S2SV_blank>%s\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_70 ; } VAR_35 = <S2SV_ModEnd> METHOD_22 ( VAR_62 <S2SV_ModStart> ( VAR_62 , VAR_67 ) ; <S2SV_ModEnd> METHOD_24 ( VAR_62 <S2SV_ModStart> VAR_62 ) ; VAR_62 = - 1 ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>of<S2SV_blank>" "the<S2SV_blank>container<S2SV_blank>with<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_16 , METHOD_26 ( VAR_68 ) ) ; goto VAR_70 ; } VAR_35 = METHOD_27 ( VAR_63 , VAR_63 , 0 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>drop<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>and<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>0:<S2SV_blank>%s.\\n" , VAR_63 , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> = VAR_26 ; VAR_44 = METHOD_10 ( VAR_36 ) ; <S2SV_ModStart> if ( ! VAR_44 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>netdev<S2SV_blank>index:<S2SV_blank>%s.\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 ; } } VAR_35 = METHOD_12 ( VAR_36 , * VAR_50 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Error<S2SV_blank>%d<S2SV_blank>renaming<S2SV_blank>netdev<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>container.\\n" , VAR_35 , <S2SV_ModEnd> VAR_36 , * <S2SV_ModStart> * VAR_50 ) ; goto VAR_69 <S2SV_ModEnd> ; } if <S2SV_ModStart> [ VAR_41 ] ; TYPE_6 <S2SV_ModEnd> * VAR_49 = <S2SV_ModStart> ) ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name:<S2SV_blank>%s.\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 <S2SV_ModEnd> ; } * <S2SV_ModStart> VAR_50 ) goto VAR_69 ; } VAR_66 = 0 ; VAR_69 : VAR_35 = METHOD_27 ( VAR_63 , VAR_65 , VAR_64 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>restore<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_63 , VAR_65 , VAR_64 , METHOD_26 ( VAR_68 ) ) ; VAR_66 = - 1 ; } VAR_35 = <S2SV_ModEnd> METHOD_22 ( VAR_59 <S2SV_ModStart> ( VAR_59 , VAR_67 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>original<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>" "of<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_59 , METHOD_26 ( VAR_68 ) ) ; VAR_66 = - 1 ; } VAR_70 : if ( VAR_62 >= 0 ) METHOD_24 ( VAR_62 ) ; METHOD_24 ( <S2SV_ModEnd> VAR_59 ) ; <S2SV_ModStart> ) ; return VAR_66 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_21 ; ++ VAR_25 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> -> VAR_21 ; ++ VAR_25 <S2SV_ModEnd> ) { METHOD_4 <S2SV_ModStart> = VAR_47 ; METHOD_9 ( VAR_45 , VAR_45 -> VAR_48 . VAR_49 ) ;
<S2SV_ModStart> ) { struct <S2SV_ModEnd> STRUCT_OR_UNION_23 * STRUCT_OR_UNION_23 <S2SV_ModStart> * STRUCT_OR_UNION_23 = vfs_select_inode ( STRUCT_OR_UNION_14 -> <S2SV_ModEnd> STRUCT_OR_UNION_18 , STRUCT_OR_UNION_22 <S2SV_ModStart> STRUCT_OR_UNION_23 ) ; STRUCT_OR_UNION_22 -> VAR_1 = * STRUCT_OR_UNION_14 ; <S2SV_ModEnd> return METHOD_4 (
<S2SV_ModStart> VAR_34 ; TYPE_4 * VAR_30 ; VAR_30 = METHOD_8 ( 2 , VAR_35 ) ; if ( ! VAR_30 ) return - VAR_36 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> VAR_22 ) ; VAR_22 = <S2SV_ModEnd> - VAR_31 ; <S2SV_ModStart> - VAR_31 ; goto VAR_37 ; <S2SV_ModStart> ] ) ; VAR_22 = <S2SV_ModEnd> - VAR_31 ; <S2SV_ModStart> - VAR_31 ; goto VAR_37 ; } VAR_22 = METHOD_7 ( VAR_32 , VAR_33 , "%s\\n" , VAR_34 ) ; VAR_37 : METHOD_9 ( VAR_30 ) ; return VAR_22 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> { VAR_9 = METHOD_4 ( STRUCT_OR_UNION_6 <S2SV_ModEnd> , & STRUCT_OR_UNION_6 <S2SV_ModStart> STRUCT_OR_UNION_6 -> VAR_7 , & VAR_14 <S2SV_ModStart> if ( VAR_9 ) return VAR_9 <S2SV_ModEnd> ; } STRUCT_OR_UNION_6
<S2SV_ModStart> = VAR_73 ; if ( VAR_214 == ( TYPE_22 * ) VAR_206 ) VAR_214 = VAR_201 ; else METHOD_15 ( & VAR_214 , VAR_201 ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VAR_190 = METHOD_16
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_2 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_25 , VAR_13 <S2SV_ModEnd> ; VAR_13 = <S2SV_ModStart> VAR_13 ) ; if ( ! <S2SV_ModEnd> VAR_22 -> VAR_23 <S2SV_ModStart> VAR_23 . VAR_24 ) { METHOD_5 ( "%s:<S2SV_blank>Cannot<S2SV_blank>alloc<S2SV_blank>memory!\\n" , VAR_28 ) ; return - 1 ; } <S2SV_ModEnd> for ( VAR_25 <S2SV_ModStart> |= VAR_27 ; return 0 ;
<S2SV_ModStart> * VAR_40 ; TYPE_4 VAR_38 ; <S2SV_ModStart> TYPE_3 VAR_46 ; METHOD_10 ( VAR_31 ) ; VAR_38 = VAR_10 -> VAR_38 ; VAR_46 = VAR_38 ? <S2SV_ModEnd> METHOD_4 ( VAR_41 <S2SV_ModStart> , VAR_42 ) : 0 ; METHOD_11 ( VAR_31 ) <S2SV_ModStart> -> VAR_38 = VAR_38 ; if ( ! VAR_38 ) return VAR_46 <S2SV_ModEnd> ; VAR_46 =
<S2SV_ModStart> ) { case VAR_157 : METHOD_29 ( VAR_139 , VAR_157 , VAR_156 ) ; return 1 ; case
<S2SV_ModStart> VAR_5 & ( 1U << ( unsigned TYPE_2 ) <S2SV_ModEnd> VAR_7 ) )
<S2SV_ModStart> if ( VAR_351 < VAR_142 ) { METHOD_46 ( ( "Wrapped<S2SV_blank>around<S2SV_blank>%p<S2SV_blank><<S2SV_blank>%p\\n" , VAR_351 , VAR_142 ) ) ; goto VAR_368 ; } if ( VAR_351
<S2SV_ModStart> VAR_55 ) { METHOD_16 ( VAR_68 ) ;
<S2SV_ModStart> "b/26366256" ) ; METHOD_3 ( 0x534e4554 , "26366256" ) ;
<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; } return ; <S2SV_ModEnd> } VAR_80 = <S2SV_ModStart> ) ) ; METHOD_262 ( VAR_625 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_9 ) ; <S2SV_ModEnd> if ( VAR_11
<S2SV_ModStart> ; TYPE_3 VAR_28 ; if ( METHOD_8 ( ) ) return - VAR_16
<S2SV_ModStart> VAR_92 ) ; METHOD_34 ( VAR_84 ) ;
<S2SV_ModStart> = VAR_86 ; VAR_95 ++ ;
<S2SV_ModStart> ( len -- > 0 <S2SV_ModStart> ( len -- > 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> METHOD_0 ( TYPE_8 VAR_57 <S2SV_ModEnd> , TYPE_8 VAR_15 <S2SV_ModStart> * VAR_46 ) { TYPE_8 VAR_58 <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const TYPE_7 <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( METHOD_17 <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto VAR_52 ; <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto VAR_52 ; <S2SV_ModStart> ( METHOD_18 ( VAR_57 <S2SV_ModEnd> , VAR_53 , <S2SV_ModStart> { METHOD_20 ( "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label:<S2SV_blank>%s." , VAR_53 ) ; goto VAR_52 ; } METHOD_24 ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , VAR_53 ) ; } else if ( METHOD_17 ( VAR_49 , "SELinux" ) == 0 ) { if ( METHOD_18 ( VAR_57 , VAR_46 , METHOD_19 ( VAR_46 ) + 1 ) < 0 ) { METHOD_20 ( <S2SV_ModStart> "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label" ) ; goto VAR_52 ; } METHOD_24 ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , VAR_46 ) ; } else <S2SV_ModEnd> { METHOD_21 ( <S2SV_ModStart> VAR_49 ) ; goto VAR_52 ; } VAR_58 = 0 ; <S2SV_ModEnd> VAR_52 : METHOD_22 <S2SV_ModStart> ; if ( VAR_57 <S2SV_ModEnd> != - 1 <S2SV_ModStart> ) METHOD_23 ( VAR_57 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_58 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> , VAR_7 ) == 0 || VAR_22 -> VAR_17 . VAR_18
<S2SV_ModStart> ; } } if ( * VAR_80 <= VAR_83 ) { <S2SV_ModStart> VAR_82 ) ; for ( VAR_78 = 0 ; VAR_78 < VAR_81 -> VAR_75 ; VAR_78 ++ ) { if ( METHOD_4 ( VAR_81 , VAR_78 ) == * VAR_80 ) { METHOD_5 ( * VAR_80 <S2SV_ModEnd> , VAR_81 -> <S2SV_ModStart> VAR_82 ) ; break ; } } } METHOD_5 ( VAR_68 -> VAR_69 , VAR_81 -> VAR_82 ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_6 VAR_25 <S2SV_ModStart> , VAR_24 ; if ( VAR_25 < 2 ) { METHOD_6 ( ( VAR_22 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_21 ++ ; VAR_25 -= 2 ; if ( VAR_25 < 4 ) { METHOD_6 ( ( VAR_22 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_23 = METHOD_5 ( VAR_21 ) ; VAR_21 ++ ; VAR_25 -= 2 ; VAR_24 = METHOD_5 ( VAR_21 ) ; VAR_21 ++ ; VAR_25 -= 2 <S2SV_ModEnd> ; METHOD_6 ( <S2SV_ModStart> ) ) ; if ( VAR_25 < 4 ) { METHOD_6 ( ( VAR_22 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> ; if ( ! METHOD_24 ( STRUCT_OR_UNION_19 -> VAR_81 ) -> VAR_25 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ! VAR_75 )
<S2SV_ModStart> : if ( METHOD_18 ( VAR_77 ) -> VAR_78 <= VAR_79 ) { TYPE_0 VAR_80 = VAR_2 -> VAR_80 - sizeof ( * VAR_17 ) ; TYPE_3 VAR_62 [ 64 ] ; VAR_27 = VAR_28 ; VAR_80 = METHOD_21 ( VAR_77 , VAR_17 -> VAR_5 , VAR_80 , VAR_62 , & VAR_27 ) ; if ( VAR_80 < 0 ) { struct STRUCT_OR_UNION_5 VAR_62 ; VAR_62 . VAR_53 = METHOD_13 ( METHOD_18 ( VAR_77 ) -> VAR_53 ) ; VAR_62 . VAR_57 = METHOD_13 ( METHOD_18 ( VAR_77 ) -> VAR_57 ) <S2SV_ModEnd> ; METHOD_15 ( <S2SV_ModStart> VAR_59 ) , VAR_60 , sizeof ( VAR_62 ) , & <S2SV_ModEnd> VAR_62 ) ; <S2SV_ModStart> ; goto VAR_76 ; } METHOD_15 ( VAR_59 , METHOD_16 ( VAR_59 ) , VAR_36 , VAR_80 , VAR_62 ) ; METHOD_18 ( VAR_77 ) -> VAR_81 ++ ; if ( VAR_27 != VAR_28 ) goto VAR_76 ; break
<S2SV_ModStart> = VAR_38 ; VAR_35 -> VAR_70 = VAR_71 ; } else if ( VAR_35 -> VAR_70 != VAR_71 ) { return 0 ;
<S2SV_ModStart> VAR_69 ; } if ( METHOD_22 ( VAR_116 ) < 4 ) { METHOD_21 ( VAR_116 , VAR_117 ) ; return VAR_69 ; }
<S2SV_ModStart> VAR_10 ) & ( VAR_11 | VAR_149 ) <S2SV_ModEnd> ) { METHOD_16
<S2SV_ModStart> ( VAR_26 , "r" <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_460 -> VAR_358 ; METHOD_120 ( & STRUCT_OR_UNION_21 -> VAR_356 )
<S2SV_ModStart> * VAR_51 ; <S2SV_ModEnd> METHOD_2 ( VAR_47 <S2SV_ModStart> ( VAR_48 ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( VAR_48 , "%s%s%d_C_XXXXXX" <S2SV_ModEnd> , VAR_39 , <S2SV_ModStart> VAR_53 -> VAR_42 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> & 0xFFFFFFFF ; TYPE_10 VAR_110 ; <S2SV_ModStart> ) continue ; <S2SV_ModEnd> VAR_110 = METHOD_2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> VAR_110 = METHOD_3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_110 <= 0 <S2SV_ModStart> <= 0 ) continue ; } VAR_108 -> VAR_110 = VAR_110 ; <S2SV_ModEnd> if ( VAR_98
<S2SV_ModStart> : if ( METHOD_13 <S2SV_ModEnd> ( "proc" , <S2SV_ModStart> 0 , VAR_37 , VAR_24 ) < 0 <S2SV_ModEnd> ) return -
<S2SV_ModStart> & VAR_41 ) != VAR_70 <S2SV_ModEnd> || ( VAR_56 <S2SV_ModStart> ( VAR_56 & ( O_CREAT | O_TRUNC ) ) != 0 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> , VAR_57 , VAR_85 | <S2SV_ModStart> , VAR_57 , VAR_85 |
<S2SV_ModStart> VAR_3 ) { METHOD_2 ( VAR_10 <S2SV_ModEnd> , "<S2SV_blank>%12.3f<S2SV_blank>G" , <S2SV_ModStart> } else { METHOD_2 ( VAR_10 <S2SV_ModEnd> , "<S2SV_blank>%12.3f<S2SV_blank>g" , <S2SV_ModStart> ) ; } METHOD_3 ( VAR_10 ) ;
<S2SV_ModStart> VAR_2 ) { METHOD_3 ( <S2SV_ModEnd> "<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>K" ) ; <S2SV_ModStart> } else { METHOD_3 ( <S2SV_ModEnd> "<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>0<S2SV_blank>k" ) ;
<S2SV_ModStart> TYPE_3 VAR_53 ; struct STRUCT_OR_UNION_4 * VAR_55 ; VAR_55 = METHOD_9 ( VAR_51 -> VAR_55 , METHOD_8 ( VAR_54 ) ) ; if ( VAR_55 && VAR_55 -> VAR_19 . VAR_16 ) VAR_23 = VAR_55 -> VAR_19 . <S2SV_ModEnd> VAR_20 ; VAR_41
<S2SV_ModStart> VAR_19 ) ; METHOD_8 ( VAR_23 ) ;
<S2SV_ModStart> VAR_4 ) { METHOD_2 <S2SV_ModEnd> ( VAR_6 ->
<S2SV_ModStart> { TYPE_3 VAR_25 ; VAR_49 = METHOD_6 ( STRUCT_OR_UNION_9 <S2SV_ModEnd> , & VAR_25 <S2SV_ModStart> , & VAR_25 , & VAR_48 ) ; if ( VAR_49 <S2SV_ModEnd> ) return VAR_49 <S2SV_ModStart> VAR_49 ; } <S2SV_ModEnd> } break ;
<S2SV_ModStart> { TYPE_3 VAR_30 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; METHOD_8 ( VAR_27 -> VAR_31 , & <S2SV_ModEnd> VAR_27 -> VAR_28 <S2SV_ModStart> . VAR_29 -> VAR_32 , & VAR_30 , sizeof ( TYPE_3 ) <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> -> VAR_60 . <S2SV_ModEnd> STRUCT_OR_UNION_38 = STRUCT_OR_UNION_38
<S2SV_ModStart> return 0 ; if ( ! METHOD_3 ( VAR_12 , VAR_13 ) ) return 0 ; <S2SV_ModStart> ) ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_73 ) ; return - VAR_45 ; } return <S2SV_ModEnd> 0 ; }
<S2SV_ModStart> METHOD_65 ( VAR_420 + VAR_666 -> VAR_619
<S2SV_ModStart> = METHOD_4 ( VAR_51 ) ; if ( ( VAR_38 & VAR_52 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> { METHOD_8 ( VAR_51 , VAR_52 <S2SV_ModEnd> ) ; VAR_38 <S2SV_ModStart> = METHOD_4 ( VAR_53 ) ; if ( ( VAR_38 & VAR_54 ) != 0 ) { if ( ( VAR_38 & VAR_55 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> = METHOD_4 ( VAR_56 ) ; if ( ( VAR_38 & VAR_57 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_38 & VAR_58 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> { METHOD_8 ( VAR_51 , VAR_58 <S2SV_ModEnd> ) ; do <S2SV_ModStart> } METHOD_8 ( VAR_59 , VAR_60 | VAR_61 | VAR_62 | VAR_63 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * VAR_170 ; unsigned <S2SV_ModStart> -> VAR_159 ; unsigned
<S2SV_ModStart> TYPE_6 VAR_2 ; static TYPE_3 TYPE_7 VAR_2 ; <S2SV_ModStart> sizeof ( TYPE_6 ) ) ; METHOD_1 ( & TYPE_7 , sizeof ( TYPE_7 <S2SV_ModStart> VAR_15 ) ; VAR_15 = METHOD_6 ( VAR_15 , TYPE_7 ) ;
<S2SV_ModStart> ; if ( ! VAR_13 -> VAR_14 ) return 0 ; if (
<S2SV_ModStart> ) { TYPE_1 VAR_39 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; VAR_39 = rd_release_sgl_table ( STRUCT_OR_UNION_13 , <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_42 <S2SV_ModStart> STRUCT_OR_UNION_13 -> VAR_42 , <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_44 <S2SV_ModStart> STRUCT_OR_UNION_13 -> VAR_44 ) ; <S2SV_ModEnd> METHOD_4 ( "CORE_RD[%u]<S2SV_blank>-<S2SV_blank>Released<S2SV_blank>device<S2SV_blank>space<S2SV_blank>for<S2SV_blank>Ramdisk" <S2SV_ModStart> VAR_40 ) ; <S2SV_ModEnd> STRUCT_OR_UNION_13 -> VAR_42
<S2SV_ModStart> VAR_121 ) ; VAR_113 = ( VAR_113 != VAR_125 ) ? VAR_113 : "" ;
<S2SV_ModStart> TYPE_7 VAR_141 ; if ( ! STRUCT_OR_UNION_23 -> VAR_18 . VAR_210 || ! VAR_207 -> VAR_168 . VAR_211 ) { METHOD_21 ( VAR_151 -> VAR_140 ) ; METHOD_45 ( VAR_207 ) ; return METHOD_23 ( STRUCT_OR_UNION_23 , VAR_144 , VAR_145 , VAR_146 , VAR_147 , VAR_198 ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_3 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> VAR_51 ) ; return 0 ;
<S2SV_ModStart> VAR_2 ) { METHOD_3 <S2SV_ModEnd> ( VAR_2 ) <S2SV_ModStart> VAR_2 ) ; METHOD_4 ( VAR_2 -> VAR_4 ) ; VAR_2 -> VAR_4 = VAR_5 ; METHOD_4 ( VAR_2 -> VAR_6 ) ; VAR_2 -> VAR_6 = VAR_5 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = VAR_13 ; METHOD_2 ( VAR_113 ) ; METHOD_3 ( & VAR_111 -> VAR_112 ) ; METHOD_12 ( ) ; <S2SV_ModStart> -> VAR_15 ) { VAR_114 = <S2SV_ModEnd> - VAR_16 ; <S2SV_ModStart> - VAR_16 ; goto VAR_110 ; } <S2SV_ModEnd> if ( VAR_23
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ( ! VAR_4 ) ; if ( VAR_4 -> VAR_5 ) METHOD_4 ( VAR_4 -> VAR_5
<S2SV_ModStart> -> VAR_113 ; <S2SV_ModEnd> TYPE_3 VAR_117 , <S2SV_ModStart> ; struct STRUCT_OR_UNION_3 <S2SV_ModEnd> VAR_132 ; TYPE_5 <S2SV_ModStart> ! VAR_159 -> VAR_162 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> += 2 ; if ( METHOD_15 ( METHOD_21 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_163 , & VAR_132 , sizeof ( VAR_132 ) ) ) ) return 0 <S2SV_ModEnd> ; VAR_148 = <S2SV_ModStart> = ( VAR_132 . <S2SV_ModEnd> VAR_147 & VAR_138 <S2SV_ModStart> = VAR_148 ; METHOD_22 ( VAR_157 -> VAR_158 , & VAR_159 -> VAR_163 , <S2SV_ModEnd> & VAR_159 -> <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ) ; TYPE_3 VAR_25 , <S2SV_ModStart> VAR_17 ) { TYPE_3 VAR_26 = ( VAR_21 + 1 ) >> 1 ; <S2SV_ModStart> = VAR_18 ; METHOD_8 ( VAR_20 , VAR_26 + METHOD_7 ( VAR_21 ) ) ; } VAR_25 = METHOD_9 ( VAR_20 ) ; if ( VAR_25 > 0 ) { METHOD_8 ( VAR_20 , VAR_25 - 1 ) ; <S2SV_ModEnd> METHOD_4 ( METHOD_5
<S2SV_ModStart> } VAR_19 = METHOD_9 ( VAR_16 ) <S2SV_ModEnd> -> METHOD_7 (
<S2SV_ModStart> VAR_28 ) ; <S2SV_ModEnd> } if (
<S2SV_ModStart> -> VAR_8 ; METHOD_4 ( VAR_7 ) ;
<S2SV_ModStart> , TYPE_2 VAR_20 , TYPE_3 VAR_45 <S2SV_ModStart> ; TYPE_2 VAR_43 ; METHOD_6 ( sizeof ( struct STRUCT_OR_UNION_2 ) > sizeof ( VAR_44 -> VAR_46 ) ) <S2SV_ModStart> VAR_19 = VAR_20 ; VAR_35 -> VAR_45 = VAR_45
<S2SV_ModStart> ( ) ; if ( VAR_78 >= VAR_77 ) { if ( VAR_78 > VAR_77 ) goto VAR_95 ; if ( METHOD_10 ( VAR_75 , VAR_76 , VAR_77 ) > 0 ) goto VAR_95 ; }
<S2SV_ModStart> = VAR_14 ; VAR_12 -> VAR_15 = & VAR_16 ;
<S2SV_ModStart> VAR_10 ) { <S2SV_ModEnd> const TYPE_4 *
<S2SV_ModStart> VAR_61 ) ; METHOD_15 ( VAR_68 ) -> VAR_69 ++ ;
<S2SV_ModStart> VAR_69 -> VAR_76 && VAR_69 -> VAR_74
<S2SV_ModStart> VAR_4 , const TYPE_5 <S2SV_ModEnd> VAR_5 ) {
<S2SV_ModStart> VAR_18 ) ; VAR_63 -> VAR_65 = VAR_66 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_8 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_29 ) { TYPE_8 VAR_45 = 0 ; <S2SV_ModStart> VAR_19 ) { VAR_45 = 1 ; <S2SV_ModStart> ; } } return VAR_45 ;
<S2SV_ModStart> ; if ( VAR_208 &&
<S2SV_ModStart> = 0 ; VAR_246 >= 0 && <S2SV_ModStart> VAR_251 ; } if ( ( TYPE_33 ) VAR_247 -> VAR_248 < 1 ) { METHOD_48 ( "Warning:<S2SV_blank>Invalid<S2SV_blank>vd_next<S2SV_blank>in<S2SV_blank>the<S2SV_blank>ELF<S2SV_blank>version\\n" ) ; break ; }
<S2SV_ModStart> TYPE_25 = VAR_8 ; if ( METHOD_7 ( ! METHOD_6 ( VAR_55 , TYPE_21 , TYPE_25 ) ) ) return - VAR_56
<S2SV_ModStart> TYPE_19 METHOD_0 ( TYPE_5 * VAR_115 , <S2SV_ModStart> STRUCT_OR_UNION_4 VAR_103 ; <S2SV_ModEnd> VAR_5 * VAR_93 <S2SV_ModStart> TYPE_19 * VAR_119 <S2SV_ModEnd> ; TYPE_19 VAR_101 <S2SV_ModStart> return - VAR_121 <S2SV_ModEnd> ; } dctlprintk
<S2SV_ModStart> ) { return VAR_21 <S2SV_ModEnd> ; } while
<S2SV_ModStart> TYPE_2 ) { VAR_1 . VAR_2 ++ ; VAR_1 . VAR_3 ++ ;
<S2SV_ModStart> goto VAR_144 ; if ( VAR_147 . VAR_67 > sizeof ( VAR_138 ) || VAR_147 . VAR_67 < 0 ) { VAR_148 = - VAR_149 ; goto VAR_144 ; }
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if ( ! VAR_124 -> VAR_17 || VAR_124 -> VAR_91 == VAR_82 ) { METHOD_43 ( "%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user" , VAR_128 ) ; goto VAR_127 ; } if (
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_3 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> ) ) return VAR_18 ; * VAR_11 |= <S2SV_ModEnd> VAR_13 -> VAR_11 <S2SV_ModStart> VAR_11 & VAR_17 ; * VAR_16 |= VAR_13 -> VAR_16 & <S2SV_ModEnd> VAR_17 ; if <S2SV_ModStart> ; if ( * VAR_11 & * <S2SV_ModEnd> VAR_16 & VAR_17 <S2SV_ModStart> & VAR_17 ) return VAR_19 ; else return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; VAR_332 = <S2SV_ModEnd> METHOD_25 ( VAR_325
<S2SV_ModStart> VAR_63 , struct STRUCT_OR_UNION_7 <S2SV_ModEnd> * VAR_62 ) <S2SV_ModStart> ? VAR_62 -> VAR_62 . <S2SV_ModStart> && VAR_62 -> VAR_62 . <S2SV_ModStart> += VAR_62 -> VAR_62 . <S2SV_ModStart> ( VAR_73 , & VAR_62 ->
<S2SV_ModStart> VAR_8 != VAR_5 ) ; METHOD_2 ( VAR_18 -> VAR_17 == VAR_18 -> VAR_19
<S2SV_ModStart> VAR_59 ) { if ( VAR_39 -> VAR_38 == VAR_79 ) { METHOD_18 ( VAR_74 , 1 , "Geometry<S2SV_blank>sections<S2SV_blank>are<S2SV_blank>not<S2SV_blank>supported;<S2SV_blank>ignoring\\n" ) ; } else { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_936 <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> TYPE_117 VAR_898 [ <S2SV_ModStart> if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ; if ( VAR_957 <S2SV_ModStart> ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ; if ( <S2SV_ModStart> METHOD_203 ( VAR_962 ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" <S2SV_ModStart> METHOD_203 ( VAR_962 ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" <S2SV_ModStart> METHOD_203 ( VAR_962 ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" <S2SV_ModStart> if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ; if ( VAR_957 <S2SV_ModStart> ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ; if ( VAR_957 > <S2SV_ModStart> VAR_962 ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ; <S2SV_ModStart> 0xff ) ; if ( VAR_957 > METHOD_208 ( VAR_962 ) ) METHOD_185 ( VAR_871 , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> VAR_5 ) ; <S2SV_ModEnd> for ( VAR_14
<S2SV_ModStart> VAR_60 ; } if ( METHOD_26 ( ! METHOD_25 ( * STRUCT_OR_UNION_9 ) ) ) { VAR_62 = - VAR_63 ; goto VAR_60 ; } <S2SV_ModEnd> VAR_58 : VAR_62
<S2SV_ModStart> , & VAR_25 , 0
<S2SV_ModStart> } else { struct STRUCT_OR_UNION_6 * VAR_106 = VAR_99 -> VAR_107 ; <S2SV_ModStart> 0 ) { METHOD_24 ( & VAR_106 -> VAR_108 ) ; <S2SV_ModStart> VAR_103 , VAR_93 ) ; METHOD_25 ( & VAR_106 -> VAR_108
<S2SV_ModStart> VAR_5 , 1 <S2SV_ModEnd> , VAR_50 ,
<S2SV_ModStart> -= VAR_102 ; METHOD_10 ( & STRUCT_OR_UNION_38 -> VAR_145 ) ; if ( ! ( METHOD_11 ( STRUCT_OR_UNION_38 , VAR_79 ) ) ) { VAR_146 = - VAR_81 ; goto VAR_144 ; } if ( ! <S2SV_ModEnd> ( VAR_106 & <S2SV_ModStart> & VAR_84 ) && VAR_137 + VAR_138 > METHOD_28 ( STRUCT_OR_UNION_38 ) ) { VAR_130 = VAR_137 + VAR_138 ; VAR_146 = METHOD_13 ( STRUCT_OR_UNION_38 , VAR_130 ) ; if ( VAR_146 ) goto VAR_144 ; } VAR_105 = VAR_71 ; if ( VAR_106 & VAR_84 ) <S2SV_ModStart> |= VAR_77 ; if ( VAR_113 || VAR_114 ) { VAR_146 = METHOD_18 ( STRUCT_OR_UNION_36 , METHOD_9 ( VAR_137 , 1 << VAR_64 ) >> VAR_64 , ( METHOD_8 ( ( VAR_137 + VAR_138 ) , 1 << VAR_64 ) - METHOD_9 ( VAR_137 , 1 << VAR_64 ) ) >> VAR_64 , VAR_130 , VAR_105 , VAR_106 ) ; if ( VAR_146 ) goto VAR_144 <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { VAR_105 |= ( VAR_72 | VAR_73 ) ;
<S2SV_ModStart> TYPE_2 ) { VAR_2 . VAR_3 ++ ; VAR_2 . VAR_4 ++ ; <S2SV_ModStart> TYPE_2 * ) & VAR_2 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_2 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> METHOD_17 ( VAR_249 <S2SV_ModEnd> , VAR_254 ,
<S2SV_ModStart> TYPE_8 VAR_99 ; TYPE_8 VAR_52 = ( VAR_69 + ( VAR_70 - 1 ) ) >> VAR_43 ; VAR_99 = - VAR_101 ; if ( VAR_52 > VAR_102 ) goto VAR_97 ; <S2SV_ModStart> ) { TYPE_8 <S2SV_ModEnd> VAR_64 ; if <S2SV_ModStart> VAR_69 ) break <S2SV_ModEnd> ; VAR_93 ->
<S2SV_ModStart> TYPE_23 * VAR_165 = VAR_161 , * VAR_166 = VAR_161 <S2SV_ModEnd> ; TYPE_4 VAR_168 <S2SV_ModStart> ; TYPE_4 VAR_168 = VAR_174 ; TYPE_4 VAR_170 = VAR_174 <S2SV_ModEnd> ; TYPE_5 VAR_169 <S2SV_ModStart> ) ; } VAR_171 : METHOD_29 ( VAR_165 ) ; METHOD_29 ( VAR_166 ) ; METHOD_31 ( & VAR_169 , & VAR_168 ) ; METHOD_31 ( & VAR_169 , & VAR_170 ) ; <S2SV_ModEnd> METHOD_32 ( VAR_172
<S2SV_ModStart> if ( VAR_155 < 0 || VAR_155 <S2SV_ModStart> - VAR_182 ; if ( VAR_155 < 0 ) { METHOD_25 ( 0x534e4554 , "32438598" ) ; METHOD_26 ( "\\tERROR<S2SV_blank>EQ_PARAM_BAND_LEVEL<S2SV_blank>band<S2SV_blank>%d" , VAR_155 ) ; } <S2SV_ModStart> ; if ( VAR_155 < 0 || <S2SV_ModStart> - VAR_182 ; if ( VAR_155 < 0 ) { METHOD_25 ( 0x534e4554 , "32436341" ) ; METHOD_26 ( "\\tERROR<S2SV_blank>EQ_PARAM_CENTER_FREQ<S2SV_blank>band<S2SV_blank>%d" , VAR_155 ) ; } <S2SV_ModStart> ; if ( VAR_155 < 0 || <S2SV_ModStart> - VAR_182 ; if ( VAR_155 < 0 ) { METHOD_25 ( 0x534e4554 , "32247948" ) ; METHOD_26 ( "\\tERROR<S2SV_blank>EQ_PARAM_BAND_FREQ_RANGE<S2SV_blank>band<S2SV_blank>%d" , VAR_155 ) ; }
<S2SV_ModStart> ( VAR_81 = METHOD_21 ( VAR_61 , VAR_78 <S2SV_ModEnd> ) ) == <S2SV_ModStart> { METHOD_12 ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>Permission<S2SV_blank>denied" , VAR_61 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_9 ) { unsigned TYPE_3 * VAR_11 = VAR_9 -> VAR_10 ; unsigned TYPE_2 VAR_12 = ( VAR_6 - VAR_5 ) >> VAR_13 ; METHOD_2 ( VAR_11 , 0 , VAR_12 ) ; <S2SV_ModStart> -> VAR_10 += VAR_12 <S2SV_ModEnd> ; return 0
<S2SV_ModStart> ; if ( VAR_46 -> VAR_35 && VAR_51 < 11 ) return VAR_52 ; if ( <S2SV_ModStart> ++ ) { if ( METHOD_14 ( VAR_50 ) ) return VAR_52 ;
<S2SV_ModStart> const VAR_97 = VAR_102 -> VAR_97 ; TYPE_11 <S2SV_ModEnd> VAR_105 ; TYPE_10 <S2SV_ModStart> ; if ( METHOD_18 <S2SV_ModEnd> ( & VAR_105 <S2SV_ModStart> VAR_15 , VAR_16 , VAR_7 -> VAR_106 , VAR_7 -> VAR_107 <S2SV_ModStart> ; } return METHOD_19 <S2SV_ModEnd> ( & VAR_105
<S2SV_ModStart> VAR_202 ; } else { VAR_209 -> VAR_172 [ VAR_176 - 1 ] = '\\0' ; }
<S2SV_ModStart> VAR_7 ) ; METHOD_6 ( VAR_7 ) ; METHOD_7 ( VAR_7 ) ;
<S2SV_ModStart> TYPE_2 VAR_30 = METHOD_13 ( <S2SV_ModStart> VAR_28 , VAR_9 ) <S2SV_ModStart> } if ( METHOD_13 ( <S2SV_ModStart> VAR_30 | VAR_18 ) <S2SV_ModStart> ; if ( METHOD_13 ( <S2SV_ModStart> VAR_29 , VAR_30 )
<S2SV_ModStart> ) ) ; METHOD_55 ( VAR_167 -> VAR_72 ) ;
<S2SV_ModStart> , VAR_72 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_70 ) ; if <S2SV_ModEnd> ( VAR_24 >= <S2SV_ModStart> VAR_22 -> VAR_20 || hlist_empty ( <S2SV_ModEnd> & VAR_22 -> <S2SV_ModStart> [ VAR_24 ] ) ) { METHOD_21 ( "no<S2SV_blank>route<S2SV_blank>for<S2SV_blank>guest_irq<S2SV_blank>%u/%u<S2SV_blank>(broken<S2SV_blank>user<S2SV_blank>space?)\\n" , VAR_24 , VAR_22 -> VAR_20 ) ; goto VAR_69 ; } METHOD_7 ( VAR_49 , & VAR_22 -> VAR_23 [ VAR_24 ]
<S2SV_ModStart> VAR_43 ; struct STRUCT_OR_UNION_6 * VAR_45 = VAR_43 -> VAR_44 . VAR_45 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_45 ) ) <S2SV_ModStart> ( VAR_41 ) <S2SV_ModEnd> VAR_45 -> VAR_40 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_45 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_27 >= VAR_21
<S2SV_ModStart> VAR_110 ) ; <S2SV_ModEnd> METHOD_2 ( VAR_117
<S2SV_ModStart> VAR_35 ) ; if ( STRUCT_OR_UNION_20 != VAR_47 -> VAR_32 ) { VAR_79 = * VAR_78 ; VAR_81 = * VAR_80 ; VAR_82 = 3 ; break ; }
<S2SV_ModStart> * VAR_27 ; if ( VAR_29 >= VAR_21 ) return - VAR_23 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> & 0x1F ; if ( VAR_58 -> VAR_10 < VAR_57 * 4 ) VAR_58 -> VAR_46 = 0 ; else
<S2SV_ModStart> ) ; } VAR_121 = METHOD_37 ( VAR_134 , VAR_134 -> VAR_91 , VAR_134 -> VAR_120 ) ; if ( VAR_121 == VAR_128 ) { METHOD_38 ( VAR_129 , & VAR_134 -> VAR_129 ) ; return ( METHOD_9 ( VAR_134 ) ) ; }
<S2SV_ModStart> ) if ( METHOD_5 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> , ':' ) != VAR_26 <S2SV_ModStart> ) if ( METHOD_5 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> , '.' ) != VAR_26
<S2SV_ModStart> VAR_71 , VAR_66 >> VAR_67 <S2SV_ModStart> VAR_62 , VAR_66 >> VAR_67
<S2SV_ModStart> VAR_39 ) { if ( VAR_40 == VAR_14 ) { <S2SV_ModEnd> METHOD_4 ( VAR_34 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_42 | VAR_43 ) ; } else if ( VAR_40 == VAR_19 ) { <S2SV_ModEnd> METHOD_6 ( VAR_34 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_43 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_42 ) ; } else if ( VAR_40 == VAR_26 ) { <S2SV_ModEnd> METHOD_4 ( VAR_34 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_43 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_42 ) ; } else { <S2SV_ModEnd> METHOD_6 ( VAR_34 <S2SV_ModStart> ( VAR_34 , VAR_41 , VAR_42 | VAR_43 ) <S2SV_ModEnd> ; } VAR_38
<S2SV_ModStart> TYPE_91 * VAR_340 ; if ( VAR_336 < 0 || VAR_336 > 4194304 ) { METHOD_66 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , VAR_345 ) ; return VAR_347 ; } VAR_340
<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 1 ;
<S2SV_ModStart> ( VAR_31 == VAR_59 ) return - VAR_60 ; if ( VAR_31 ==
<S2SV_ModStart> ) ) { if ( <S2SV_ModStart> -> VAR_106 ) < 0 ) { METHOD_81 ( VAR_542 , VAR_519 ) ; return - 1 ; } <S2SV_ModEnd> VAR_505 -> VAR_506
<S2SV_ModStart> ) ) ; VAR_30 -> VAR_39 = 0 ;
<S2SV_ModStart> VAR_579 ) ) VAR_632 = <S2SV_ModStart> case 0xeb : VAR_632 = <S2SV_ModStart> VAR_579 ) ) VAR_632 =
<S2SV_ModStart> -> VAR_14 ) { <S2SV_ModStart> VAR_15 ) ; } else { <S2SV_ModEnd> METHOD_3 ( METHOD_7 <S2SV_ModStart> ) ) ; METHOD_11 ( ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_3 VAR_20 , TYPE_3 <S2SV_ModEnd> VAR_24 ) {
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_33 ; if ( VAR_31 < 0 || VAR_31 >= VAR_29 -> VAR_36 ) return ; if ( VAR_7 < 0 || VAR_7 > 15 ) return ; VAR_33
<S2SV_ModStart> ) ) ; zend_object_store_ctor_failed ( * VAR_24 TSRMLS_CC ) ;
<S2SV_ModStart> VAR_89 ; TYPE_10 VAR_160 , <S2SV_ModStart> ++ ) { VAR_160 <S2SV_ModEnd> = min_t ( <S2SV_ModStart> , 0 , VAR_160 <S2SV_ModEnd> ) ; VAR_137 <S2SV_ModStart> VAR_95 ) ; if ( VAR_95 < VAR_160 ) break ; <S2SV_ModStart> VAR_97 - VAR_137 ; if ( ! VAR_137 ) { for ( VAR_89 = 0 ; VAR_89 < VAR_123 ; VAR_89 ++ ) METHOD_24 ( VAR_168 -> VAR_88 [ VAR_89 ] ) ; METHOD_10 ( VAR_168 ) ; VAR_178 = - VAR_179 ; break ; } for ( ; VAR_123 > VAR_89 + 1 ; VAR_123 -- ) METHOD_24 ( VAR_168 -> VAR_88 [ VAR_123 - 1 ] )
<S2SV_ModStart> VAR_76 ; } * VAR_77 = VAR_57 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_4 <S2SV_ModEnd> * VAR_4 , <S2SV_ModStart> * VAR_4 , PREDICTION_MODE <S2SV_ModEnd> VAR_8 , const <S2SV_ModStart> VAR_8 , const TYPE_5 <S2SV_ModEnd> * VAR_6 )
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_37 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_29 ) , VAR_11 <S2SV_ModEnd> , VAR_36 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_11 <S2SV_ModEnd> , VAR_36 ,
<S2SV_ModStart> TYPE_6 VAR_113 , VAR_61 , VAR_59 , VAR_176 , VAR_253 = 1 ; TYPE_10 VAR_135 <S2SV_ModEnd> ; TYPE_7 VAR_151 <S2SV_ModStart> TYPE_8 VAR_229 , VAR_43 ; TYPE_10 VAR_93 ; TYPE_10 <S2SV_ModEnd> VAR_134 ; TYPE_10
<S2SV_ModStart> * VAR_25 ; TYPE_5 VAR_23 ; TYPE_5 <S2SV_ModEnd> VAR_24 ; VAR_25
<S2SV_ModStart> VAR_18 , const TYPE_16 * VAR_155 <S2SV_ModEnd> ) { TYPE_12 <S2SV_ModStart> ( VAR_153 ) && VAR_155 <S2SV_ModStart> = METHOD_2 ( VAR_155 -> VAR_156 <S2SV_ModEnd> , VAR_15 )
<S2SV_ModStart> VAR_57 ; } if ( VAR_49 >= VAR_63 ) { METHOD_10 ( VAR_54 , VAR_55 , "Too<S2SV_blank>many<S2SV_blank>arguments" ) ; return VAR_57 ; } <S2SV_ModStart> VAR_37 ) ; <S2SV_ModEnd> } if (
<S2SV_ModStart> ; TYPE_4 VAR_110 = VAR_116 ; TYPE_4 VAR_112 = VAR_116 <S2SV_ModEnd> ; TYPE_5 VAR_111 <S2SV_ModStart> VAR_108 ) ; VAR_113 : METHOD_19 ( & VAR_111 , & VAR_110 ) ; METHOD_19 ( & VAR_111 , & VAR_112 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_114
<S2SV_ModStart> VAR_148 -> VAR_7 ) && ( VAR_148 -> VAR_12 -> VAR_151 != VAR_152
<S2SV_ModStart> ) ) { if ( <S2SV_ModStart> -> VAR_106 ) < 0 ) { METHOD_81 ( VAR_542 , VAR_519 ) ; return - 1 ; } <S2SV_ModEnd> VAR_505 -> VAR_506
<S2SV_ModStart> ( VAR_14 , & VAR_2 ,
<S2SV_ModStart> VAR_55 ) { <S2SV_ModEnd> TYPE_6 VAR_65 = <S2SV_ModStart> ; TYPE_10 * VAR_50 = get_pid_cgroup ( VAR_17 , VAR_43 ) ; TYPE_10 * VAR_56 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ! VAR_50 ) return VAR_24 <S2SV_ModEnd> ; METHOD_8 ( <S2SV_ModStart> ( VAR_55 ) { <S2SV_ModStart> VAR_57 ) ; } <S2SV_ModStart> = VAR_60 ; VAR_62 : METHOD_13 ( VAR_50 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_115 = VAR_104 ; TYPE_6 VAR_110 , VAR_116 ; TYPE_6 VAR_117 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_2 <S2SV_ModStart> VAR_29 ) { METHOD_3 ( VAR_102 + VAR_96 -> VAR_29 , 0 , VAR_32 - VAR_96 -> VAR_29 ) ; <S2SV_ModStart> - VAR_104 ) ; VAR_32 = VAR_116 - VAR_104 <S2SV_ModStart> = 16 ; VAR_117 = VAR_32 ; <S2SV_ModStart> 0 ] ; if ( VAR_105 -> VAR_51 < 1 || VAR_110 > VAR_105 -> VAR_51 - 1 || VAR_110 > VAR_117 ) { METHOD_11 ( "<S2SV_blank>Not<S2SV_blank>enough<S2SV_blank>buffer<S2SV_blank>size" ) ; return - 1 ; } <S2SV_ModStart> += VAR_110 ; VAR_117 -= VAR_110 ;
<S2SV_ModStart> -> VAR_9 <= 0 || ( unsigned TYPE_6 ) ( ( VAR_77 -> VAR_108 << 2 ) >> METHOD_15 ( VAR_77 ) ) ==
<S2SV_ModStart> ) ) ; VAR_81 -> VAR_80 = VAR_40 ; VAR_81 -> VAR_60 = 0 ; VAR_81 -> VAR_70 = VAR_40 ; <S2SV_ModStart> return - VAR_20 <S2SV_ModEnd> ; VAR_26 += <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( VAR_81
<S2SV_ModStart> } else { TYPE_7 <S2SV_ModEnd> VAR_58 = VAR_66 <S2SV_ModStart> VAR_66 -> VAR_67 == VAR_70 ) <S2SV_ModEnd> && VAR_66 -> <S2SV_ModStart> VAR_66 -> VAR_67 == VAR_70 ) && VAR_66 -> VAR_62 < <S2SV_ModEnd> VAR_58 ) { <S2SV_ModStart> VAR_55 , "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRIu64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\\n" , VAR_66
<S2SV_ModStart> - VAR_48 ; if ( ++ VAR_82 -> VAR_86 >= VAR_87 ) goto VAR_79 ;
<S2SV_ModStart> TYPE_11 VAR_27 ; METHOD_3 <S2SV_ModEnd> ( VAR_75 +
<S2SV_ModStart> * VAR_58 >= 75 && VAR_59 [ 61 ] == 0x05 && VAR_59 [ 62 ] == 0x08 && VAR_59 [ 63 ] == 0x19 && VAR_59 [ 64 ] == 0x08 && VAR_59 [ 65 ] == 0x29 && VAR_59 [ 66 ] == 0x0f && VAR_59 [ 71 ] == 0x75 && VAR_59 [ 72 ] == 0x08 && VAR_59 [ 73 ] == 0x95 && VAR_59 [ 74 ] == 0x01 ) { METHOD_1 ( VAR_56 , "fixing<S2SV_blank>up<S2SV_blank>Kye/Genius<S2SV_blank>Ergo<S2SV_blank>Mouse<S2SV_blank>" "report<S2SV_blank>descriptor\\n" ) ; <S2SV_ModEnd> VAR_59 [ 62 <S2SV_ModStart> [ 62 ] = 0x09 ; VAR_59 [ 64 ] = 0x04 ; VAR_59 [ 66 ] = 0x07 ; VAR_59 [ 72 ] = 0x01 ; VAR_59 [ 74 ] = 0x08 <S2SV_ModEnd> ; } break
<S2SV_ModStart> return VAR_37 ; TYPE_6 VAR_73 = 0 ; if ( METHOD_12 ( sizeof ( TYPE_5 ) , VAR_63 , & VAR_73 ) ) return VAR_74 ; <S2SV_ModStart> = METHOD_6 ( VAR_73 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> TYPE_2 VAR_52 ; union { TYPE_15 VAR_426 <S2SV_ModEnd> [ VAR_414 + <S2SV_ModStart> ] ; TYPE_5 VAR_427 ; } VAR_422 ; TYPE_5 * VAR_419 = & VAR_422 . VAR_427 <S2SV_ModEnd> ; TYPE_7 * <S2SV_ModStart> ( & VAR_422 . VAR_426 <S2SV_ModStart> VAR_421 , VAR_422 . VAR_426
<S2SV_ModStart> ) ) { TYPE_4 VAR_161 <S2SV_ModEnd> ; TYPE_10 * <S2SV_ModStart> if ( ! ( VAR_157 -> VAR_82 = VAR_129 ) ) <S2SV_ModEnd> return VAR_146 ; <S2SV_ModStart> return VAR_146 ; <S2SV_ModEnd> if ( VAR_157 <S2SV_ModStart> { if ( ( VAR_161 = <S2SV_ModStart> , 9 ) ) < 2 <S2SV_ModEnd> ) return VAR_153 <S2SV_ModStart> ; VAR_159 < VAR_161 <S2SV_ModEnd> ; VAR_159 ++ <S2SV_ModStart> ; VAR_159 ++ ) if ( ! ( * VAR_129 ++ <S2SV_ModEnd> = VAR_138 [ <S2SV_ModStart> ) break ; if ( VAR_159 == 9 && VAR_138 [ 8 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( VAR_147 -> METHOD_18 ( VAR_148 , ( TYPE_6 ) ( <S2SV_ModEnd> VAR_159 + 1 <S2SV_ModStart> VAR_159 + 1 - VAR_161 ) , VAR_67 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ) return VAR_128 ; VAR_129 -- <S2SV_ModStart> ; if ( ( VAR_161 = <S2SV_ModStart> , 4 ) ) < 2 <S2SV_ModEnd> ) return VAR_153 <S2SV_ModStart> ; VAR_159 < VAR_161 <S2SV_ModEnd> ; VAR_159 ++ <S2SV_ModStart> ; VAR_159 ++ ) if ( ! ( * VAR_129 ++ <S2SV_ModEnd> = VAR_138 [ <S2SV_ModStart> ) break ; if ( VAR_159 == 4 && VAR_138 [ 3 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( VAR_147 -> METHOD_18 ( VAR_148 , ( TYPE_6 ) ( <S2SV_ModEnd> VAR_159 + 1 <S2SV_ModStart> VAR_159 + 1 - VAR_161 ) , VAR_67 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ) return VAR_128 ; VAR_129 --
<S2SV_ModStart> : case VAR_5 : case VAR_25 <S2SV_ModStart> case VAR_16 : case VAR_26 : case VAR_27 : case VAR_28 : case VAR_29 :
<S2SV_ModStart> unsigned TYPE_4 VAR_24 ; VAR_22 -> VAR_23 = 0
<S2SV_ModStart> 0 , 1 , 0
<S2SV_ModStart> METHOD_44 ( VAR_108 , ".chsh"
<S2SV_ModStart> VAR_58 ) ; if ( ! VAR_69 ) { VAR_71 = - VAR_54 ; goto VAR_66 ; } <S2SV_ModStart> VAR_61 ) ; if ( ! VAR_70 ) { VAR_71 = - VAR_54 ; goto VAR_66 ; }
<S2SV_ModStart> VAR_114 -> VAR_104 [ VAR_122 ] && VAR_114 -> VAR_115
<S2SV_ModStart> TYPE_4 VAR_12 = METHOD_6 ( VAR_15 , VAR_19 | VAR_20 | VAR_21 | VAR_22 <S2SV_ModEnd> , VAR_6 |
<S2SV_ModStart> , "%r/proc/sys/net" , "%r/proc/tty" <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> , VAR_48 , "%r/proc/tty" <S2SV_ModEnd> , "%r/proc/sys/net" , <S2SV_ModStart> ; VAR_188 = METHOD_20 ( VAR_186 , VAR_187 , VAR_171 [ VAR_172 ] . VAR_169 , VAR_185 , VAR_171 [ VAR_172 ] . VAR_173 , VAR_225 -> VAR_226 . VAR_224 ? VAR_225 -> VAR_226 . METHOD_18 : VAR_124 <S2SV_ModEnd> ) ; VAR_190
<S2SV_ModStart> ! VAR_14 || METHOD_7 <S2SV_ModEnd> ( VAR_11 , <S2SV_ModStart> ( VAR_11 , & VAR_15 <S2SV_ModEnd> , VAR_14 ) <S2SV_ModStart> < 0 || METHOD_7 <S2SV_ModEnd> ( VAR_11 , <S2SV_ModStart> ( VAR_11 , & PyId__attributes <S2SV_ModEnd> , VAR_14 )
<S2SV_ModStart> TYPE_4 VAR_81 ; VAR_74 -> VAR_82 = VAR_60 ;
<S2SV_ModStart> unsigned TYPE_12 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> ] << 8 <S2SV_ModEnd> ; VAR_26 |= <S2SV_ModStart> ; VAR_26 |= ( unsigned TYPE_12 ) <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffff <S2SV_ModStart> VAR_26 & 0xffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> VAR_267 . VAR_408 + 1
<S2SV_ModStart> ; VAR_19 = METHOD_17 <S2SV_ModEnd> ( VAR_17 ,
<S2SV_ModStart> VAR_18 ] ; METHOD_4 ( VAR_59 , 0 , sizeof ( * VAR_59 ) ) ;
<S2SV_ModStart> * VAR_0 , TYPE_2 VAR_14 <S2SV_ModEnd> ) { VAR_2 <S2SV_ModStart> ; switch ( VAR_14 <S2SV_ModEnd> & ( VAR_11 <S2SV_ModStart> ; default : METHOD_6 ( 0 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> goto VAR_73 ; VAR_73 = - VAR_14 ; if ( VAR_15 != sizeof ( VAR_63 ) + <S2SV_ModEnd> VAR_63 . VAR_47 <S2SV_ModStart> + 1 ) goto VAR_73 ; VAR_65 . VAR_65 = VAR_71 ; VAR_65 . VAR_53 = VAR_63 . VAR_47 ; VAR_73 = METHOD_3 ( VAR_72 , VAR_71 , VAR_63 . VAR_47 + 1 )
<S2SV_ModStart> . VAR_66 = VAR_87 <S2SV_ModEnd> ; VAR_83 . <S2SV_ModStart> VAR_85 ) ; switch ( VAR_86 ) { case VAR_88 : break ; case VAR_20 : METHOD_17 ( "PKI:<S2SV_blank>File<S2SV_blank>does<S2SV_blank>not<S2SV_blank>appear<S2SV_blank>to<S2SV_blank>be<S2SV_blank>signed:<S2SV_blank>%s" , METHOD_21 ( ) ) ; METHOD_13 ( VAR_39 , METHOD_15 ( VAR_14 ) , METHOD_15 ( VAR_42 ) , VAR_16 | VAR_17 | VAR_45 , VAR_46 ) ; break ; default : METHOD_17 ( "PKI:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>validate<S2SV_blank>signature:<S2SV_blank>%s" , METHOD_21 ( ) ) ; METHOD_13 ( VAR_39 , METHOD_15 ( VAR_89 ) , METHOD_15 ( VAR_42 ) , VAR_16 | VAR_17 | VAR_45 , VAR_46 ) ; break ; }
<S2SV_ModStart> VAR_22 . VAR_17 = 20 + VAR_23 <S2SV_ModEnd> ) * sizeof
<S2SV_ModStart> { TYPE_4 VAR_16 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( METHOD_24 <S2SV_ModStart> ( "/proc/self/fd" , "/proc" <S2SV_ModEnd> , VAR_49 , <S2SV_ModStart> ( VAR_65 , "mount(/proc/self/fd,<S2SV_blank>MS_BIND):<S2SV_blank>%m\\n" <S2SV_ModEnd> ) ; METHOD_32 <S2SV_ModStart> = METHOD_27 ( "/proc" <S2SV_ModEnd> , VAR_55 ) <S2SV_ModStart> ( VAR_65 , "open(/proc,<S2SV_blank>O_PATH):<S2SV_blank>%m\\n" ) ; METHOD_32 ( 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; TYPE_10 VAR_133 ; TYPE_10 VAR_134 = VAR_130 -> bit_depth > 8 ? 2 : 1 <S2SV_ModStart> = VAR_130 -> VAR_69 <S2SV_ModEnd> ; VAR_132 = <S2SV_ModStart> VAR_130 -> VAR_86 * VAR_134 <S2SV_ModStart> -> VAR_83 ; VAR_108 *= VAR_134 ; <S2SV_ModStart> -> VAR_106 [ VPX_PLANE_Y <S2SV_ModEnd> ] = VAR_127 <S2SV_ModStart> -> VAR_106 [ VPX_PLANE_ALPHA ] = <S2SV_ModEnd> VAR_130 -> VAR_101 <S2SV_ModStart> VAR_130 -> VAR_101 * VAR_134 <S2SV_ModStart> -> VAR_106 [ VPX_PLANE_U <S2SV_ModEnd> ] = VAR_127 <S2SV_ModStart> -> VAR_106 [ VPX_PLANE_V <S2SV_ModEnd> ] = VAR_108 <S2SV_ModStart> -> VAR_128 [ VPX_PLANE_Y <S2SV_ModEnd> ] = VAR_130 <S2SV_ModStart> -> VAR_128 [ VPX_PLANE_U <S2SV_ModEnd> ] = VAR_130 <S2SV_ModStart> -> VAR_128 [ VPX_PLANE_V <S2SV_ModEnd> ] = VAR_130 <S2SV_ModStart> -> VAR_128 [ VPX_PLANE_ALPHA <S2SV_ModEnd> ] = VAR_130
<S2SV_ModStart> -> VAR_9 ; <S2SV_ModEnd> TYPE_3 VAR_48 ; <S2SV_ModStart> TYPE_3 VAR_48 ; mutex_lock <S2SV_ModEnd> ( & VAR_44 <S2SV_ModStart> VAR_44 -> VAR_45 <S2SV_ModEnd> ) ; VAR_48 <S2SV_ModStart> ; VAR_43 : METHOD_8 <S2SV_ModEnd> ( & VAR_44 <S2SV_ModStart> VAR_44 -> VAR_45 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ( TYPE_26 ) METHOD_23 <S2SV_ModEnd> ( VAR_104 ->
<S2SV_ModStart> -> VAR_9 ; <S2SV_ModEnd> TYPE_3 VAR_48 ; <S2SV_ModStart> TYPE_3 VAR_48 ; mutex_lock <S2SV_ModEnd> ( & VAR_44 <S2SV_ModStart> VAR_44 -> VAR_45 <S2SV_ModEnd> ) ; VAR_48 <S2SV_ModStart> ; VAR_43 : METHOD_8 <S2SV_ModEnd> ( & VAR_44 <S2SV_ModStart> VAR_44 -> VAR_45 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ; TYPE_43 VAR_922 , VAR_1136 <S2SV_ModStart> ; for ( VAR_1136 = 0 ; VAR_1136 < VAR_1129 -> VAR_1137 ; VAR_1136 <S2SV_ModEnd> ++ ) { <S2SV_ModStart> -> VAR_967 , VAR_1136 <S2SV_ModEnd> , VAR_923 )
<S2SV_ModStart> ( TYPE_1 * VAR_9 ) { if ( <S2SV_ModStart> VAR_10 ; } }
<S2SV_ModStart> VAR_210 ; } if ( ! VAR_190 ) { VAR_214 = - VAR_207 ; METHOD_18 ( VAR_142 , VAR_215 , VAR_144 - VAR_145 ) ; goto VAR_210 ; }
<S2SV_ModStart> VAR_172 ) { VAR_230 -> VAR_188 [ VAR_192 ] . VAR_190 = METHOD_15 ( VAR_191 ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VAR_192 ++ ;
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct
<S2SV_ModStart> ; VAR_44 -> VAR_47 = 2 ; VAR_44 ->
<S2SV_ModStart> ; TYPE_212 VAR_383 ; TYPE_217 VAR_2309 <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_383 , VAR_2309 , <S2SV_ModStart> ; TYPE_212 VAR_383 ; TYPE_217 VAR_2309 <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_383 , VAR_2309 , <S2SV_ModStart> TYPE_212 VAR_2254 ; TYPE_217 VAR_2309 ; <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_2254 , VAR_2309 , <S2SV_ModStart> VAR_2178 * VAR_1894 ; TYPE_217 VAR_2309 <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_1894 , VAR_2309 , <S2SV_ModStart> VAR_2178 * VAR_1894 ; TYPE_217 VAR_2309 <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_1894 , VAR_2309 , <S2SV_ModStart> * VAR_1892 ; TYPE_217 VAR_2309 ; <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> VAR_1642 , VAR_1892 , VAR_2309 <S2SV_ModStart> VAR_2178 * VAR_1892 ; TYPE_217 VAR_2309 <S2SV_ModStart> ) ; } if ( METHOD_451 ( VAR_2306 , & VAR_2310 , & VAR_2308 ) < 0 ) { return 1 ; } if ( VAR_2308 == VAR_2303 || VAR_2308 == VAR_2090 ) { METHOD_453 ( VAR_2308 ) ; VAR_2309 = VAR_2303 ; } else { TYPE_213 VAR_2250 ; VAR_2250 = METHOD_463 ( VAR_2308 , & VAR_2309 , VAR_2301 ) ; if ( VAR_2250 != 0 ) goto VAR_2307 ; METHOD_453 ( VAR_2308 ) ; } <S2SV_ModStart> , VAR_1892 , VAR_2309 ,
<S2SV_ModStart> VAR_327 -> VAR_328 || <S2SV_ModEnd> VAR_325 -> VAR_219
<S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_77 ; unsigned TYPE_3 VAR_69 <S2SV_ModStart> -> VAR_69 ; VAR_69 = VAR_79 -> VAR_69 ; <S2SV_ModStart> ; VAR_70 < <S2SV_ModEnd> VAR_69 ; VAR_70
<S2SV_ModStart> if ( VAR_207 > VAR_276 || VAR_207 <S2SV_ModStart> METHOD_31 ( ( "CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>%" SIZE_T_FORMAT "u\\n" , VAR_207 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> for ( VAR_211
<S2SV_ModStart> TYPE_5 = ! ( ( ( VAR_42 & VAR_67 ) && METHOD_14 ( VAR_65 ) && ( VAR_65 -> VAR_62 -> VAR_53 . VAR_46 & VAR_17 ) ) || <S2SV_ModStart> METHOD_12 ( VAR_65 )
<S2SV_ModStart> ; TYPE_24 VAR_259 = 0 <S2SV_ModStart> VAR_259 < 1 || VAR_259 > 256 <S2SV_ModStart> ) ) { if ( ! VAR_321 -> VAR_280 ) { METHOD_83 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_324 ) ; return VAR_326 ; }
<S2SV_ModStart> ) { TYPE_3 * VAR_45 , * VAR_46 , * VAR_47 , * <S2SV_ModEnd> VAR_48 ; TYPE_4 <S2SV_ModStart> ; TYPE_4 VAR_16 , VAR_49 = 0 ; VAR_45 = METHOD_23 ( ) ; VAR_46 = METHOD_23 ( ) ; VAR_47 = METHOD_23 ( ) ; VAR_48 = METHOD_23 ( ) ; if ( VAR_45 == VAR_23 || VAR_46 == VAR_23 || VAR_47 == VAR_23 || VAR_48 == VAR_23 ) { goto VAR_50 ; } <S2SV_ModEnd> for ( VAR_16 <S2SV_ModStart> { METHOD_5 ( <S2SV_ModEnd> VAR_45 , 40 <S2SV_ModStart> ) ; VAR_45 -> <S2SV_ModEnd> VAR_18 = METHOD_6 <S2SV_ModStart> ; METHOD_7 ( VAR_46 , <S2SV_ModEnd> VAR_45 , VAR_38 <S2SV_ModStart> ( VAR_33 , <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( VAR_33 , <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( VAR_33 , <S2SV_ModEnd> VAR_46 ) ; <S2SV_ModStart> } METHOD_14 ( VAR_47 , VAR_48 , VAR_46 , <S2SV_ModEnd> VAR_45 , VAR_38 <S2SV_ModStart> ; METHOD_15 ( VAR_47 , VAR_47 , <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ! METHOD_17 ( <S2SV_ModEnd> VAR_47 ) || <S2SV_ModStart> ! METHOD_17 ( VAR_48 ) ) { METHOD_18 ( VAR_44 , "Square<S2SV_blank>test<S2SV_blank>failed!\\n" ) ; goto VAR_50 ; } } METHOD_24 ( & VAR_45 , "80000000000000008000000000000001FFFFFFFFFFFFFFFE0000000000000000" ) ; METHOD_7 ( VAR_46 , VAR_45 , VAR_38 ) ; if ( VAR_33 != VAR_23 ) { if ( ! VAR_24 ) { METHOD_12 ( VAR_33 , VAR_45 ) ; METHOD_13 ( VAR_33 , "<S2SV_blank>*<S2SV_blank>" ) ; METHOD_12 ( VAR_33 , VAR_45 ) ; METHOD_13 ( VAR_33 , "<S2SV_blank>-<S2SV_blank>" ) ; } METHOD_12 ( VAR_33 , VAR_46 ) ; METHOD_13 ( VAR_33 , "\\n" ) ; } METHOD_25 ( VAR_47 , VAR_45 , VAR_45 , VAR_38 ) ; if ( METHOD_26 ( VAR_46 , VAR_47 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( VAR_44 , "Square<S2SV_blank>test<S2SV_blank>failed:<S2SV_blank>BN_sqr<S2SV_blank>and<S2SV_blank>BN_mul<S2SV_blank>produce<S2SV_blank>" "different<S2SV_blank>results!\\n" ) ; goto VAR_50 ; } METHOD_24 ( & VAR_45 , "80000000000000000000000080000001FFFFFFFE000000000000000000000000" ) ; METHOD_7 ( VAR_46 , VAR_45 , VAR_38 ) ; if ( VAR_33 != VAR_23 ) { if ( ! VAR_24 ) { METHOD_12 ( VAR_33 , VAR_45 ) ; METHOD_13 ( VAR_33 , "<S2SV_blank>*<S2SV_blank>" ) ; METHOD_12 ( VAR_33 , VAR_45 ) ; METHOD_13 ( VAR_33 , "<S2SV_blank>-<S2SV_blank>" ) ; } METHOD_12 ( VAR_33 , VAR_46 ) ; METHOD_13 ( VAR_33 , "\\n" ) ; } METHOD_25 ( VAR_47 , VAR_45 , VAR_45 , VAR_38 ) ; if ( METHOD_26 ( VAR_46 , VAR_47 ) ) { METHOD_18 ( VAR_44 , "Square<S2SV_blank>test<S2SV_blank>failed:<S2SV_blank>BN_sqr<S2SV_blank>and<S2SV_blank>BN_mul<S2SV_blank>produce<S2SV_blank>" "different<S2SV_blank>results!\\n" ) ; goto VAR_50 ; } VAR_49 = 1 ; VAR_50 : if ( VAR_45 != VAR_23 ) METHOD_22 ( VAR_45 ) ; if ( VAR_46 != VAR_23 ) METHOD_22 ( VAR_46 ) ; if ( VAR_47 != VAR_23 ) METHOD_22 ( VAR_47 ) ; if ( VAR_48 != VAR_23 ) METHOD_22 ( VAR_48 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_49 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) ) ; METHOD_3 ( VAR_36 -> VAR_37 , VAR_39 , VAR_25 , METHOD_4 ( VAR_34 , VAR_39 ) ) ;
<S2SV_ModStart> VAR_14 -> VAR_5 ; VAR_1 . VAR_17 = METHOD_10 ( VAR_13 -> VAR_17 )
<S2SV_ModStart> + VAR_250 ; VAR_275 = METHOD_31 ( VAR_249 , VAR_250 ) ; if ( VAR_275 ) goto VAR_264 ; VAR_275 = METHOD_31 ( VAR_260 , VAR_261 ) ; if ( VAR_275 ) goto VAR_264 ;
<S2SV_ModStart> VAR_31 ) ; METHOD_8 ( '<S2SV_blank>' , VAR_37 ) ; METHOD_9 ( <S2SV_ModEnd> VAR_35 -> VAR_34 <S2SV_ModStart> -> VAR_34 , VAR_37 ) ; METHOD_8 ( '=' , VAR_37 ) ; METHOD_10 ( <S2SV_ModStart> VAR_35 -> VAR_36 , VAR_37
<S2SV_ModStart> VAR_90 && ( VAR_210 - <S2SV_ModStart> * ) VAR_263 > VAR_257 <S2SV_ModEnd> ) ; ++ <S2SV_ModStart> VAR_149 < 1 || ( TYPE_19 * ) VAR_266 - VAR_221 < VAR_149 <S2SV_ModStart> > VAR_210 || VAR_210 - VAR_221 < <S2SV_ModEnd> sizeof ( TYPE_32 <S2SV_ModStart> TYPE_33 ) ) <S2SV_ModEnd> ) { METHOD_49 <S2SV_ModStart> > VAR_210 || VAR_210 - VAR_221 < <S2SV_ModEnd> sizeof ( TYPE_32 <S2SV_ModStart> TYPE_33 ) ) <S2SV_ModEnd> ) { METHOD_49
<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( VAR_151 <S2SV_ModStart> VAR_127 ) break ; VAR_141 = VAR_147 + VAR_145 * VAR_148 <S2SV_ModStart> -> VAR_153 ; VAR_151 = METHOD_5 ( VAR_151 , VAR_127 ) ;
<S2SV_ModStart> VAR_34 ) ; VAR_34 -> VAR_37 &= ~ VAR_38 ;
<S2SV_ModStart> VAR_106 . VAR_129 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_106 . VAR_129 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_106 . VAR_129 <S2SV_ModEnd> ) ; VAR_212 <S2SV_ModStart> VAR_106 . VAR_129 <S2SV_ModEnd> ) ; VAR_212 <S2SV_ModStart> VAR_106 . VAR_129 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 16 , VAR_204 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , VAR_204 <S2SV_ModEnd> ) ; VAR_212 <S2SV_ModStart> VAR_202 , VAR_204 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , VAR_204 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 16 , VAR_204 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_200 ) ; METHOD_48 ( VAR_183 , VAR_184 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; } return <S2SV_ModStart> ( VAR_75 ) <S2SV_ModEnd> ; } METHOD_4 <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> VAR_76 ) ; return 0 ;
<S2SV_ModStart> VAR_112 , VAR_112 , <S2SV_ModEnd> VAR_113 , VAR_95 <S2SV_ModStart> VAR_112 , VAR_112 , <S2SV_ModEnd> VAR_113 , VAR_95 <S2SV_ModStart> , VAR_111 + VAR_112 , VAR_82 -
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_22 ( VAR_77 <S2SV_ModStart> ( VAR_77 , "file" , VAR_78 ) ) { if ( METHOD_15 ( VAR_72 -> VAR_80 , "ALL" ) && ! METHOD_23 ( VAR_53 , VAR_72 -> VAR_80 ) ) { METHOD_24 ( VAR_59 , VAR_81 , "Filename<S2SV_blank>extension<S2SV_blank>of<S2SV_blank>\\\'%s\\\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>common<S2SV_blank>multimedia<S2SV_blank>extension,<S2SV_blank>blocked<S2SV_blank>for<S2SV_blank>security<S2SV_blank>reasons.\\n" "If<S2SV_blank>you<S2SV_blank>wish<S2SV_blank>to<S2SV_blank>override<S2SV_blank>this<S2SV_blank>adjust<S2SV_blank>allowed_extensions,<S2SV_blank>you<S2SV_blank>can<S2SV_blank>set<S2SV_blank>it<S2SV_blank>to<S2SV_blank>\\\'ALL\\\'<S2SV_blank>to<S2SV_blank>allow<S2SV_blank>all\\n" , VAR_53 ) ; return VAR_48 ; } } else if ( METHOD_22 ( VAR_77 , <S2SV_ModStart> , VAR_78 ) ) { ; } else <S2SV_ModEnd> return VAR_48 ;
<S2SV_ModStart> while ( VAR_30 >= sizeof ( * VAR_34 ) ) { VAR_34 = ( struct STRUCT_OR_UNION_3 * ) VAR_33 ; if ( VAR_34 -> VAR_35 > VAR_30 ) { METHOD_4 ( & VAR_36 -> VAR_37 , "Too<S2SV_blank>large<S2SV_blank>descriptor\\n" ) ; return VAR_38 ; } <S2SV_ModEnd> if ( VAR_34 <S2SV_ModStart> "Found<S2SV_blank>union<S2SV_blank>header\\n" ) ; if ( VAR_34 -> VAR_35 >= sizeof ( * VAR_34 ) ) return VAR_34 ; METHOD_4 ( & VAR_36 -> VAR_37 , "Union<S2SV_blank>descriptor<S2SV_blank>to<S2SV_blank>short<S2SV_blank>(%d<S2SV_blank>vs<S2SV_blank>%zd\\n)" , VAR_34 -> VAR_35 , sizeof ( * VAR_34 ) ) ; return VAR_38 <S2SV_ModEnd> ; } VAR_30
<S2SV_ModStart> ; VAR_227 += 1 ; if ( VAR_227 < METHOD_52 ( VAR_213 ) && METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 ) ) == VAR_173 ) VAR_227 += 1 <S2SV_ModEnd> ; break ; <S2SV_ModStart> VAR_213 ) && ( <S2SV_ModStart> ) == VAR_173 || METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 + 1 ) ) == VAR_237 ) <S2SV_ModStart> += 2 ; if ( VAR_227 < METHOD_52 ( VAR_213 ) && METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 ) ) == VAR_237 ) { METHOD_46 ( VAR_235 , METHOD_58 ( VAR_213 , VAR_227 ) , "bare<S2SV_blank>*<S2SV_blank>has<S2SV_blank>associated<S2SV_blank>type<S2SV_blank>comment" ) ; return VAR_228 ; } <S2SV_ModStart> ; VAR_227 += 2 ; if ( VAR_227 < METHOD_52 ( VAR_213 ) && METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 ) ) == VAR_173 ) VAR_227 += 1 ; if ( VAR_227 < METHOD_52 ( VAR_213 ) && METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 ) ) == VAR_237 ) { VAR_230 -> VAR_238 = METHOD_66 ( METHOD_58 ( VAR_213 , VAR_227 ) ) ; if ( ! VAR_230 -> VAR_238 ) return VAR_228 ; VAR_227 += 1 ; } <S2SV_ModEnd> if ( VAR_227 <S2SV_ModStart> ; VAR_227 += 2 ; if ( METHOD_64 ( METHOD_58 ( VAR_213 , VAR_227 ) ) == VAR_173 ) VAR_227 += 1 ; break ; case VAR_237 : METHOD_59 ( VAR_227 ) ; if ( VAR_233 ) VAR_155 = VAR_233 ; VAR_155 -> VAR_238 = METHOD_66 ( VAR_226 ) ; if ( ! VAR_155 -> VAR_238 ) return VAR_228 ; VAR_227 += 1 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> VAR_28 ) ) { VAR_31 -> VAR_28 = 0 ; VAR_31 -> VAR_30 = VAR_31 -> VAR_32 ; <S2SV_ModStart> 0 ) ; }
<S2SV_ModStart> VAR_93 ; } METHOD_2 <S2SV_ModEnd> ( VAR_126 ->
<S2SV_ModStart> - VAR_42 ; METHOD_12 ( & VAR_64 , 0 , sizeof ( VAR_64 ) ) ;
<S2SV_ModStart> STRUCT_OR_UNION_8 ) ; <S2SV_ModEnd> METHOD_5 ( VAR_11
<S2SV_ModStart> -> VAR_8 ; <S2SV_ModEnd> TYPE_3 VAR_36 ; <S2SV_ModStart> TYPE_3 VAR_36 ; mutex_lock <S2SV_ModEnd> ( & VAR_33 <S2SV_ModStart> VAR_33 -> VAR_34 <S2SV_ModEnd> ) ; VAR_36 <S2SV_ModStart> ; VAR_32 : METHOD_6 <S2SV_ModEnd> ( & VAR_33 <S2SV_ModStart> VAR_33 -> VAR_34 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> : METHOD_11 ( VAR_28 ) ; METHOD_11 (
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_13 ; METHOD_1 ( * VAR_18 ) <S2SV_ModStart> goto VAR_20 ; if ( VAR_18 -> VAR_19 < 4 ) { METHOD_5 ( ( VAR_21 , "\\n\\text<S2SV_blank>HELLO<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>length<S2SV_blank>%u" , VAR_18 -> VAR_19 ) ) ; break ; }
<S2SV_ModStart> -> VAR_234 ) ; if ( ! METHOD_29 ( VAR_235 ) ) goto VAR_232
<S2SV_ModStart> VAR_25 ) ; METHOD_11 ( & VAR_26 ) ;
<S2SV_ModStart> { TYPE_4 * VAR_75 , * <S2SV_ModStart> 0 ; } VAR_75 = VAR_73 -> VAR_70 + VAR_73 -> VAR_76 ; <S2SV_ModStart> = METHOD_2 ( VAR_75 <S2SV_ModEnd> , '&' , <S2SV_ModStart> -> VAR_74 - VAR_75 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_21 ) { VAR_73 -> VAR_76 = VAR_73 -> VAR_74 - VAR_73 -> VAR_70 ; <S2SV_ModStart> VAR_74 ) ; VAR_73 -> VAR_76 = 0 ;
<S2SV_ModStart> - VAR_38 ; if ( VAR_32 >= sizeof ( VAR_44 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>Section<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } <S2SV_ModStart> - VAR_29 ; if ( VAR_32 >= sizeof ( VAR_45 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>key<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } <S2SV_ModStart> = 0 ; if ( METHOD_14 ( <S2SV_ModEnd> VAR_34 + 1 <S2SV_ModStart> + 1 ) >= sizeof ( VAR_47 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>value<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } METHOD_7 ( VAR_47 , VAR_34 + 1 )
<S2SV_ModStart> ) ; } if ( VAR_104 == 0 ) goto VAR_90 ; if ( VAR_103 <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { VAR_103 = VAR_104 ; goto VAR_90 ; } <S2SV_ModEnd> if ( VAR_104 <S2SV_ModStart> VAR_104 ; } VAR_90 : METHOD_11 ( VAR_99 -> VAR_92 , VAR_93 ) ; <S2SV_ModStart> VAR_103 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_92 -> VAR_97 = VAR_87 -> VAR_97 ; VAR_92 ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_6 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_126 ) ; METHOD_29 ( VAR_162 ) ; VAR_162 -> VAR_123 . VAR_124 += VAR_163 -> VAR_126 ; VAR_162 -> VAR_123 . VAR_166 ++ ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_19 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) VAR_9 ; if <S2SV_ModEnd> ( ( VAR_101 <S2SV_ModStart> % VAR_102 ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_103 , "horDiff8" , "%s" , "(cc%stride)!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_101 <S2SV_ModStart> ; } } return 1 ;
<S2SV_ModStart> = VAR_6 ; if ( ! METHOD_3 ( VAR_8 ) )
<S2SV_ModStart> = 0 ; TYPE_6 VAR_39 = 0 ; <S2SV_ModStart> , & VAR_33 , & VAR_39 <S2SV_ModStart> METHOD_8 ( VAR_20 ) ; if ( VAR_39 > VAR_40 ) METHOD_8 ( VAR_34 <S2SV_ModStart> ( VAR_38 > ( TYPE_3 ) ( VAR_39 ) ) { VAR_38 = - 1 ; METHOD_8 ( VAR_34 ) ; } if ( VAR_38 >
<S2SV_ModStart> TYPE_13 VAR_47 ; TYPE_13 VAR_90 ; TYPE_11 VAR_91 [ 32 ] ; <S2SV_ModStart> 0 ] ; VAR_90 = 64 * VAR_92 ; <S2SV_ModStart> break ; case VAR_93 : VAR_90 = METHOD_7 ( VAR_43 , 0 , 10 ) ; break ; case <S2SV_ModStart> ) ; } METHOD_34 ( VAR_91 , sizeof ( VAR_91 ) , "max_samples=%-zu" , VAR_90 ) ; <S2SV_ModStart> , VAR_81 , VAR_91 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ! ( VAR_82 = METHOD_28 ( VAR_81 ) ) ) { METHOD_35 ( "format<S2SV_blank>name<S2SV_blank>lookup<S2SV_blank>failed\\n" ) ; return VAR_65 ; } if ( ! ( <S2SV_ModStart> 0 ; } METHOD_30 ( "%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n" , VAR_82 <S2SV_ModEnd> , VAR_83 , <S2SV_ModStart> , VAR_86 , JAS_CAST ( TYPE_14 , <S2SV_ModEnd> METHOD_31 ( VAR_88 <S2SV_ModStart> METHOD_31 ( VAR_88 )
<S2SV_ModStart> = VAR_127 ; TYPE_11 * VAR_139 = VAR_127 ; TYPE_11 * VAR_85 = VAR_127 ; <S2SV_ModStart> } else { if ( METHOD_34 ( VAR_134 , VAR_137 , & VAR_139 , & VAR_85 ) == VAR_140 ) { <S2SV_ModEnd> return METHOD_23 ( <S2SV_ModStart> -> VAR_84 , VAR_139 , VAR_85 , VAR_141 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> { TYPE_19 VAR_297 = 1
<S2SV_ModStart> VAR_2 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_3 * <S2SV_ModStart> 0x02 ) ; return <S2SV_ModEnd> METHOD_5 ( VAR_30 <S2SV_ModStart> , VAR_17 ) || <S2SV_ModEnd> METHOD_11 ( VAR_30 <S2SV_ModStart> , VAR_22 ) || <S2SV_ModEnd> METHOD_11 ( VAR_30 <S2SV_ModStart> , VAR_32 ) || <S2SV_ModEnd> METHOD_11 ( VAR_30 <S2SV_ModStart> VAR_32 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> { METHOD_23 ( VAR_101 <S2SV_ModEnd> , VAR_21 )
<S2SV_ModStart> VAR_10 ) { METHOD_1 ( & VAR_24 -> VAR_21 ) ; <S2SV_ModStart> } } else { METHOD_5 <S2SV_ModEnd> ( VAR_24 ) <S2SV_ModStart> ) ; } METHOD_3 ( & VAR_24 -> VAR_21 ) ;
<S2SV_ModStart> < 3 ) goto VAR_56 ; <S2SV_ModEnd> if ( * <S2SV_ModStart> < 1 ) goto VAR_56 ; if ( * VAR_55 ) METHOD_13 ( ( VAR_57 , "Tag[%u]<S2SV_blank>" , * VAR_55 ) ) ; else METHOD_13 ( ( VAR_57 , "Tag[Unused]<S2SV_blank>" ) ) ; VAR_55 ++ ; VAR_49 -- ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case VAR_39 : if ( VAR_49 < 1 ) goto VAR_56 ; <S2SV_ModStart> = 0 ; VAR_50 < VAR_49 && * VAR_55 <S2SV_ModEnd> ; VAR_50 ++
<S2SV_ModStart> ( VAR_45 ) > VAR_14 ) { VAR_66 = VAR_63 ; return VAR_65 ; } if ( METHOD_2 ( VAR_45 , VAR_35 , VAR_40 , VAR_41 , & VAR_42 , VAR_39 ) != 0 || ( METHOD_3 ( VAR_40 , VAR_41 , VAR_42 , & VAR_54 , STRUCT_OR_UNION_10 , & VAR_60 ) != 0 && METHOD_4 ( VAR_45 , & VAR_54 , STRUCT_OR_UNION_10 , & VAR_60 ) != 0 ) ) { VAR_66 = VAR_63 ; return VAR_65 ; } VAR_67 = ( TYPE_13 * ) METHOD_5 ( sizeof ( TYPE_13 ) ) ; if ( ! VAR_67 ) return VAR_65 ; if ( VAR_54 != VAR_55 <S2SV_ModEnd> ) { VAR_66 <S2SV_ModStart> = VAR_63 ; METHOD_8 ( VAR_67 ) ; return VAR_65 ; } if ( METHOD_7 ( STRUCT_OR_UNION_10 , VAR_60 , VAR_67 ) != 0 <S2SV_ModEnd> ) { VAR_66 <S2SV_ModStart> = VAR_63 ; <S2SV_ModEnd> METHOD_8 ( VAR_67 <S2SV_ModStart> VAR_65 ; } <S2SV_ModEnd> VAR_66 = 0
<S2SV_ModStart> == 0 ) METHOD_12 ( & VAR_60 -> VAR_61 -> VAR_63 , & VAR_40 -> VAR_61 -> VAR_64 <S2SV_ModEnd> ) ; VAR_60
<S2SV_ModStart> VAR_59 ) { if ( VAR_39 -> VAR_38 == VAR_79 ) { METHOD_18 ( VAR_74 , 1 , "Geometry<S2SV_blank>sections<S2SV_blank>are<S2SV_blank>not<S2SV_blank>supported;<S2SV_blank>ignoring\\n" ) ; } else { <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ( ) { <S2SV_ModEnd> METHOD_2 ( VAR_0
<S2SV_ModStart> TYPE_7 METHOD_0 ( TYPE_13 VAR_45 , TYPE_7 * VAR_46 , TYPE_7 VAR_38 ) { TYPE_7 VAR_7 ; TYPE_7 VAR_47 ; TYPE_13 VAR_48 ; <S2SV_ModEnd> TYPE_3 VAR_16 ; <S2SV_ModStart> TYPE_7 VAR_43 ; TYPE_13 VAR_49 = 0 ; VAR_49 = METHOD_16 ( VAR_45 , VAR_46 , "11" , & VAR_7 , & VAR_47 ) ; <S2SV_ModStart> VAR_16 -> VAR_16 ; if ( VAR_49 == 1 ) { VAR_47 = METHOD_18 ( METHOD_18 ( VAR_50 , METHOD_17 ( "ParseOptions" ) ) , METHOD_17 ( "DEFAULT_SCHEMA" ) ) ; } VAR_48 = ( TYPE_13 ) METHOD_20 ( METHOD_19 ( VAR_47 , METHOD_17 ( "to_i" ) , 0 ) ) <S2SV_ModStart> VAR_42 ) ; METHOD_15 ( VAR_43 , "@parse_options" , VAR_47 ) ;
<S2SV_ModStart> ) ; METHOD_14 ( STRUCT_OR_UNION_17 ) ; METHOD_15
<S2SV_ModStart> TYPE_2 VAR_20 = METHOD_8 ( <S2SV_ModStart> VAR_17 , VAR_17 )
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 <S2SV_ModEnd> VAR_26 ; TYPE_2 <S2SV_ModStart> - 1L ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! METHOD_6 ( & VAR_26 , VAR_24 ) <S2SV_ModEnd> ) return - <S2SV_ModStart> return METHOD_7 ( &
<S2SV_ModStart> ; if ( * VAR_306 == '\\0' || <S2SV_ModEnd> METHOD_48 ( VAR_306 <S2SV_ModStart> ) != VAR_245 || <S2SV_ModEnd> METHOD_57 ( VAR_306 <S2SV_ModStart> ( VAR_306 , "." ) == 0 || METHOD_57 ( VAR_306 , <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { METHOD_103
<S2SV_ModStart> 1 ) { struct STRUCT_OR_UNION_5 * VAR_301 = ( struct STRUCT_OR_UNION_5 * ) & VAR_41 ; TYPE_10 VAR_302 = sizeof ( VAR_41 ) ; <S2SV_ModStart> ; VAR_299 = METHOD_63 <S2SV_ModEnd> ( VAR_295 , <S2SV_ModStart> ) , 0 , VAR_301 , & VAR_302 <S2SV_ModStart> VAR_299 < 0 || VAR_41 . VAR_28 <S2SV_ModStart> ( VAR_298 , "recvfrom<S2SV_blank>failed;<S2SV_blank>pid:%u<S2SV_blank>error:%d<S2SV_blank>%s" , VAR_41 . VAR_28 , VAR_300 , METHOD_64 ( VAR_300 ) <S2SV_ModEnd> ) ; METHOD_24
<S2SV_ModStart> ; TYPE_4 VAR_92 = VAR_98 ; TYPE_4 VAR_94 = VAR_98 <S2SV_ModEnd> ; TYPE_5 VAR_93 <S2SV_ModStart> VAR_90 ) ; VAR_95 : <S2SV_ModStart> VAR_94 ) ; <S2SV_ModEnd> METHOD_19 ( VAR_96
<S2SV_ModStart> ) VAR_94 ; TYPE_3 VAR_57 , VAR_58 ; TYPE_4 VAR_56 ; if ( VAR_95 -> VAR_96 < sizeof ( struct STRUCT_OR_UNION_8 ) - 1 ) break ; <S2SV_ModEnd> VAR_56 = VAR_95 <S2SV_ModStart> -> VAR_96 - ( <S2SV_ModStart> ( struct STRUCT_OR_UNION_8 ) - 1 ) ; VAR_57 = METHOD_6 ( METHOD_7 ( & VAR_88 -> VAR_43 ) ) ; VAR_58 = METHOD_6 ( METHOD_7 ( & VAR_88 -> VAR_58 ) ) ; METHOD_8 ( VAR_47 , "USB_REQ_GET_DESCRIPTOR<S2SV_blank>-<S2SV_blank>cnf\\n" ) ; METHOD_9 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_88 -> VAR_89 , VAR_56 , VAR_57 , VAR_58 ) ; } break ; case VAR_59 : { struct STRUCT_OR_UNION_10 * VAR_88 = ( struct STRUCT_OR_UNION_10 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_78 , 0 ) ; } break ; case VAR_69 : { struct STRUCT_OR_UNION_12 * VAR_88 = ( struct STRUCT_OR_UNION_12 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_78 , 0 ) ; } break ; case VAR_79 : { struct STRUCT_OR_UNION_15 * VAR_88 = ( struct STRUCT_OR_UNION_15 * ) VAR_94 ; METHOD_12 ( VAR_98 -> VAR_83 , VAR_88 -> VAR_85 , VAR_88 -> VAR_87 , VAR_88 -> VAR_89 , VAR_95 -> VAR_96 - sizeof ( struct STRUCT_OR_UNION_15 <S2SV_ModStart> ) + 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_55 , TYPE_3 VAR_129 <S2SV_ModStart> VAR_44 = VAR_89 ; VAR_125 -> VAR_118 . VAR_129 = VAR_129 & ( VAR_130 | VAR_131 ) ; <S2SV_ModEnd> VAR_125 -> VAR_118
<S2SV_ModStart> VAR_38 = 0 ; if ( ! METHOD_10 ( VAR_39 -> VAR_40 -> VAR_41 , METHOD_9 ( VAR_34 ) ) ) return - VAR_16
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_4 <S2SV_ModEnd> * VAR_13 ; <S2SV_ModStart> * VAR_13 ; TYPE_0 VAR_17 = - VAR_10 ; rcu_read_lock ( ) ; VAR_13 = rcu_dereference ( <S2SV_ModEnd> METHOD_1 ( VAR_4 <S2SV_ModStart> VAR_4 ) -> VAR_16 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( VAR_13 && VAR_13 -> VAR_13 . VAR_14 ) VAR_17 = <S2SV_ModEnd> METHOD_2 ( VAR_13 <S2SV_ModStart> ( VAR_13 -> VAR_13 . <S2SV_ModStart> + VAR_13 -> VAR_13 . <S2SV_ModStart> VAR_15 ) ; METHOD_3 ( ) ; return VAR_17 ;
<S2SV_ModStart> + VAR_22 + <S2SV_ModEnd> 1 ; METHOD_5 <S2SV_ModStart> VAR_35 ) ; METHOD_9 ( VAR_24 , METHOD_8 ( VAR_34 -> VAR_37 ) , VAR_38 ) ;
<S2SV_ModStart> ; VAR_44 -> VAR_47 = 2 ; VAR_44 ->
<S2SV_ModStart> VAR_17 | VAR_18 | VAR_53 <S2SV_ModStart> -> VAR_21 ) <S2SV_ModEnd> VAR_34 |= VAR_23 <S2SV_ModStart> |= VAR_31 ; <S2SV_ModEnd> VAR_50 -> VAR_33
<S2SV_ModStart> TYPE_11 VAR_340 ; METHOD_26 <S2SV_ModEnd> ( & VAR_340
<S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 )
<S2SV_ModStart> VAR_90 ) { METHOD_32 <S2SV_ModEnd> ( VAR_90 ) <S2SV_ModStart> ( VAR_112 ) METHOD_32 <S2SV_ModEnd> ( VAR_112 )
<S2SV_ModStart> METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; return - 1 ; } if ( ! METHOD_27 ( VAR_242 -> VAR_232 ) ) { METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" <S2SV_ModStart> 1 ; } if ( ! METHOD_27 ( VAR_242 -> VAR_232 ) ) { METHOD_26 ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" ) ; return - 1 ; }
<S2SV_ModStart> VAR_13 ) { METHOD_1 ( VAR_14 <S2SV_ModEnd> , "\\n<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>c" , <S2SV_ModStart> VAR_13 ) ; METHOD_2 ( VAR_14 ) ;
<S2SV_ModStart> == - 1 || VAR_751 == VAR_864 ) { VAR_863 = "Unrecognized<S2SV_blank>client<S2SV_blank>limit<S2SV_blank>class:<S2SV_blank>the<S2SV_blank>user<S2SV_blank>specified<S2SV_blank>" "an<S2SV_blank>invalid<S2SV_blank>one,<S2SV_blank>or<S2SV_blank>\'master\'<S2SV_blank>which<S2SV_blank>has<S2SV_blank>no<S2SV_blank>buffer<S2SV_blank>limits." <S2SV_ModEnd> ; goto VAR_855
<S2SV_ModStart> ++ VAR_101 ) { <S2SV_ModStart> == '\\\\' ) { if ( * VAR_60 == '\\0' ) { return 0 ; } VAR_60 ++ ; } } <S2SV_ModEnd> VAR_32 = (
<S2SV_ModStart> break ; } if ( ! METHOD_16 ( & VAR_77 -> VAR_81 ) ) break ;
<S2SV_ModStart> STRUCT_OR_UNION_3 ) { struct STRUCT_OR_UNION_4 * VAR_5 ; <S2SV_ModStart> return VAR_3 ; VAR_5 = METHOD_4 ( ) ; if ( METHOD_5 ( VAR_5 , VAR_2 ) && METHOD_6 ( VAR_5 , STRUCT_OR_UNION_3 -> VAR_0 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> TYPE_4 VAR_26 ; TYPE_3 VAR_32 ; <S2SV_ModStart> "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; VAR_32 = ! METHOD_4 ( VAR_29 , "autoexec.cfg" ) || ! METHOD_4 ( VAR_29 , VAR_33 ) ; <S2SV_ModStart> VAR_13 ) { if ( VAR_32 && VAR_16 -> VAR_34 ) continue ;
<S2SV_ModStart> ! METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> * ) VAR_4 ; if ( VAR_16 >= VAR_29 ) VAR_16 = VAR_29 - 1
<S2SV_ModStart> ; if ( METHOD_5 ( VAR_348 , VAR_349 ) < 0 ) return VAR_347 ; if ( <S2SV_ModStart> ( VAR_345 , "FunctionType" , ( TYPE_114 * ) VAR_350 ) < 0 ) return VAR_347 ; if ( METHOD_116 ( VAR_345 , <S2SV_ModStart> * ) VAR_346 ) < 0 ) return VAR_347 ; if ( METHOD_116 ( VAR_345 , "type_ignore" , ( TYPE_114 * ) VAR_351 ) < 0 ) return VAR_347 ; if ( METHOD_116 ( VAR_345 , "TypeIgnore" , ( TYPE_114 * ) VAR_352
<S2SV_ModStart> ] ) ; <S2SV_ModEnd> VAR_94 = 5 <S2SV_ModStart> VAR_94 ; } VAR_85 = VAR_88 -> VAR_89 . VAR_90 . VAR_91 ;
<S2SV_ModStart> VAR_50 ) ; METHOD_18 ( VAR_67 , VAR_68 , VAR_63 ) ;
<S2SV_ModStart> ( VAR_215 ) { METHOD_23 ( VAR_140 ) ; <S2SV_ModStart> goto VAR_210 ; }
<S2SV_ModStart> -> VAR_88 && VAR_91 -> VAR_98 &&
<S2SV_ModStart> STRUCT_OR_UNION_4 * STRUCT_OR_UNION_4 , TYPE_2 VAR_21 <S2SV_ModStart> VAR_20 ) , VAR_21 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; VAR_20 -> VAR_22 = VAR_1 <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> VAR_134 ) { TYPE_27 VAR_156 ; <S2SV_ModStart> % VAR_89 ; VAR_156 = ( VAR_109 + VAR_119 -> VAR_111 ) % VAR_112 + VAR_101 ; if ( VAR_113 > 0 && VAR_156 > ( TYPE_28 ) ( VAR_161 / VAR_113 ) ) { METHOD_2 ( VAR_91 -> VAR_37 , METHOD_3 ( VAR_91 ) , "Integer<S2SV_blank>overflow<S2SV_blank>in<S2SV_blank>gtStripContig" ) ; return 0 ; } <S2SV_ModStart> , VAR_96 , VAR_156 <S2SV_ModEnd> * VAR_113 )
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> = - VAR_10 <S2SV_ModEnd> ; if (
<S2SV_ModStart> if ( VAR_214 > <S2SV_ModEnd> 4 ) {
<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < VAR_35 ) || ( VAR_35 < sizeof ( TYPE_19 ) )
<S2SV_ModStart> ; VAR_26 -> VAR_28 <S2SV_ModEnd> = VAR_13 ; <S2SV_ModStart> = VAR_13 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> , VAR_140 , VAR_142 , <S2SV_ModStart> , VAR_140 , VAR_142 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_39 ) ; <S2SV_ModEnd> VAR_42 = 0
<S2SV_ModStart> , VAR_28 , VAR_28 -> VAR_24 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> TYPE_7 VAR_6 ; TYPE_9 <S2SV_ModEnd> VAR_7 ; METHOD_3
<S2SV_ModStart> VAR_229 ) ; if ( ! VAR_233 ) { METHOD_29 ( "No<S2SV_blank>driver<S2SV_blank>for<S2SV_blank>device<S2SV_blank>[%s]\\n" , VAR_237 -> VAR_229 ) ; continue ; } <S2SV_ModEnd> METHOD_5 ( "pci<S2SV_blank>init<S2SV_blank>%s\\r\\n" <S2SV_ModStart> VAR_194 ) ; if ( VAR_238 != 0 ) goto VAR_196 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> VAR_194 ) ; if ( VAR_238 != 0 ) goto VAR_196 <S2SV_ModEnd> ; METHOD_23 ( <S2SV_ModStart> VAR_194 ) ; if ( VAR_238 != 0 ) goto VAR_196 <S2SV_ModEnd> ; return 0 <S2SV_ModStart> VAR_229 ) ; if ( ! VAR_233 ) { METHOD_29 ( "No<S2SV_blank>driver<S2SV_blank>for<S2SV_blank>device<S2SV_blank>[%s]\\n" , VAR_237 -> VAR_229 ) ; continue ; } <S2SV_ModEnd> METHOD_28 ( VAR_232
<S2SV_ModStart> ) { TYPE_5 <S2SV_ModEnd> VAR_110 , VAR_112
<S2SV_ModStart> VAR_200 ++ ) { if ( METHOD_47 ( VAR_236 ) ) return VAR_235 ; <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> ; if ( METHOD_1 ( VAR_95 -> VAR_131 , "srt" ) && METHOD_1 ( VAR_95 -> VAR_131 , "ass" ) ) goto VAR_127 ; if (
<S2SV_ModStart> -> VAR_128 ; <S2SV_ModEnd> const TYPE_19 VAR_19 <S2SV_ModStart> , VAR_101 ) ; if ( VAR_238 -> VAR_257 == 0 ) VAR_254 -> VAR_258 = 0.0 <S2SV_ModStart> > 0 ) || ( VAR_126 -> VAR_24 . VAR_259 > 0 ) ) { unsigned TYPE_5 * const VAR_235 = VAR_126 -> VAR_15 ; METHOD_23 <S2SV_ModEnd> ( VAR_235 , <S2SV_ModStart> == VAR_35 ) { METHOD_23 ( VAR_254 -> VAR_260 , VAR_123 , VAR_238 -> VAR_189 * VAR_238 -> VAR_239 * sizeof ( * VAR_254 -> VAR_260 ) ) ; <S2SV_ModStart> = 0 ; } <S2SV_ModStart> 0 ; TYPE_19 <S2SV_ModEnd> VAR_127 ; const <S2SV_ModStart> VAR_127 ; const double q = METHOD_8 ( VAR_238 -> VAR_119 , VAR_238 -> bit_depth ) ; vpx_clear_system_state ( ) ; VAR_254 -> VAR_74 = ( ( int64_t ) ( VAR_101 -> VAR_76 ) << 8 ) << 2 ; VAR_254 -> VAR_78 = ( ( int64_t ) ( q * q ) ) << 2 ; METHOD_10 ( & VAR_238 -> VAR_128 ) ; METHOD_11 ( VAR_128 ) ; VAR_128 -> VAR_94 = VAR_95 ; METHOD_12 ( VAR_128 , CR_SEGMENT_ID_BASE , VAR_129 ) ; METHOD_13 ( VAR_128 , VAR_261 , VAR_129 ) ; METHOD_13 ( VAR_128 , CR_SEGMENT_ID_BOOST2 , VAR_129 ) ; VAR_130 = compute_deltaq ( VAR_126 , VAR_238 -> VAR_119 , VAR_254 -> VAR_106 ) ; VAR_254 -> VAR_130 [ 1 ] = VAR_130 <S2SV_ModEnd> ; VAR_127 = <S2SV_ModStart> ( VAR_128 , VAR_261 <S2SV_ModEnd> , VAR_129 , <S2SV_ModStart> VAR_130 ) ; VAR_130 = compute_deltaq ( VAR_126 , VAR_238 -> VAR_119 , METHOD_22 ( CR_MAX_RATE_TARGET_RATIO , 0.1 * VAR_254 -> rate_boost_fac * VAR_254 -> VAR_106 ) ) ; VAR_254 -> VAR_130 [ 2 ] = VAR_130 ; METHOD_17 ( VAR_128 , CR_SEGMENT_ID_BOOST2 , VAR_129 , VAR_130 ) ; cyclic_refresh_update_map ( VAR_126 ) <S2SV_ModEnd> ; } }
<S2SV_ModStart> . VAR_7 , VAR_9 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_38 VAR_238 ; VAR_254 = ( TYPE_28 * ) VAR_285 ; <S2SV_ModStart> ) ; } if ( VAR_254 != ( TYPE_28 * ) VAR_285 )
<S2SV_ModStart> VAR_161 -> VAR_13 ; if ( VAR_24 -> VAR_25 . VAR_178 < 1 ) return - VAR_179
<S2SV_ModStart> VAR_14 ) { return <S2SV_ModEnd> METHOD_2 ( VAR_13 <S2SV_ModStart> , VAR_14 , VAR_7 -> VAR_5 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> case 1 : if ( VAR_186 . VAR_137 > sizeof ( VAR_146 ) || VAR_186 . VAR_137 < 0 ) { VAR_187 = - VAR_150 ; goto VAR_185 ; } <S2SV_ModStart> VAR_185 ; } if ( VAR_186 . VAR_137 > sizeof ( VAR_146 ) || VAR_186 . VAR_137 < 0 ) { VAR_187 = - VAR_150 ; goto VAR_185 ; }
<S2SV_ModStart> * VAR_271 ; TYPE_8 VAR_280 ; <S2SV_ModStart> VAR_208 ) ; if ( ! jas_safe_size_mul ( <S2SV_ModEnd> VAR_277 -> VAR_169 <S2SV_ModStart> VAR_277 -> VAR_169 , <S2SV_ModEnd> VAR_277 -> VAR_147 <S2SV_ModStart> VAR_277 -> VAR_147 , & VAR_280 <S2SV_ModEnd> ) ) { <S2SV_ModStart> 1 ; } VAR_277 -> VAR_159 = VAR_280 ; METHOD_9 ( 10 , ( "numtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numhtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numvtiles<S2SV_blank>=<S2SV_blank>%d;\\n" , VAR_277 -> VAR_159 , VAR_277 -> VAR_169 , VAR_277 -> VAR_147 ) ) ; if ( ! ( VAR_277 -> VAR_156 = METHOD_15 ( VAR_277 -> VAR_159 , sizeof ( VAR_152 ) ) ) ) { return - 1 ; }
<S2SV_ModStart> - VAR_13 ; METHOD_4 ( & VAR_45 , 0 , sizeof ( VAR_45 ) ) ;
<S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> METHOD_4 ( &
<S2SV_ModStart> = 0 ; VAR_61 -> VAR_55 = 0 ;
<S2SV_ModStart> VAR_44 > 65536 || VAR_44 < 0
<S2SV_ModStart> ( 2 , "vm_close<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n" <S2SV_ModEnd> , VAR_53 ,
<S2SV_ModStart> ; VAR_107 : <S2SV_ModEnd> METHOD_28 ( VAR_105
<S2SV_ModStart> } if ( VAR_115 -> VAR_33 >= VAR_115 -> VAR_41 || VAR_115 -> VAR_36 >= VAR_115 -> VAR_43 ) { METHOD_18 ( "all<S2SV_blank>tiles<S2SV_blank>are<S2SV_blank>outside<S2SV_blank>the<S2SV_blank>image<S2SV_blank>area\\n" ) ; return - 1 ; } if (
<S2SV_ModStart> , * VAR_32 <S2SV_ModEnd> , * VAR_23 <S2SV_ModStart> = '\\0' ; METHOD_7 ( VAR_5 ) ; VAR_32 = VAR_29 -> VAR_30 ; <S2SV_ModStart> VAR_31 ; } METHOD_8 ( VAR_5 ) ;
<S2SV_ModStart> == VAR_77 ) { <S2SV_ModStart> VAR_85 ) ; METHOD_38 ( ) ; METHOD_39 ( 0 ) ; }
<S2SV_ModStart> VAR_147 , VAR_98 <S2SV_ModEnd> ) ) <
<S2SV_ModStart> VAR_45 -> VAR_21 , & VAR_45 -> VAR_46 <S2SV_ModStart> ( STRUCT_OR_UNION_9 , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u,<S2SV_blank>hoplimit:<S2SV_blank>%d" <S2SV_ModEnd> , METHOD_9 ( <S2SV_ModStart> VAR_45 -> VAR_21 , VAR_45 -> VAR_46 ) ; if ( VAR_45 -> VAR_46 != 255 ) { METHOD_19 ( STRUCT_OR_UNION_9 , "ignoring<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>hop<S2SV_blank>limit<S2SV_blank>(%d)" , VAR_45 -> VAR_46 ) ; METHOD_28 = 0 ; goto VAR_44 ; } <S2SV_ModEnd> if ( VAR_40
<S2SV_ModStart> ) { TYPE_5 VAR_31 = METHOD_3 <S2SV_ModEnd> ( VAR_24 , <S2SV_ModStart> VAR_8 , VAR_29 ) ; const struct pci_cmd_info * VAR_32 = VAR_10 ; * VAR_29 &= VAR_34 ; <S2SV_ModEnd> * VAR_29 |= <S2SV_ModStart> * VAR_29 |= VAR_32 -> VAR_33 & ~ VAR_34 ; <S2SV_ModEnd> return VAR_31 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_4 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_2 , <S2SV_ModStart> VAR_2 , const vpx_prob <S2SV_ModEnd> * VAR_4 ) <S2SV_ModStart> { return ( TYPE_4 ) METHOD_2 <S2SV_ModEnd> ( VAR_2 ,
<S2SV_ModStart> struct STRUCT_OR_UNION_7 VAR_275 = { }
<S2SV_ModStart> VAR_11 ) { METHOD_4 <S2SV_ModEnd> ( VAR_11 -> <S2SV_ModStart> ) ) ; METHOD_4 <S2SV_ModEnd> ( VAR_11 -> <S2SV_ModStart> ) ) ; METHOD_4 <S2SV_ModEnd> ( VAR_11 ->
<S2SV_ModStart> VAR_72 ) { if ( METHOD_17 ( & VAR_38 -> VAR_73 ) )
<S2SV_ModStart> ( VAR_58 = METHOD_16 ( VAR_91 , <S2SV_ModEnd> VAR_159 -> VAR_114 <S2SV_ModStart> VAR_159 -> VAR_118 <S2SV_ModEnd> ) ) <
<S2SV_ModStart> VAR_31 ) ; if ( VAR_64 == VAR_123 ) { METHOD_13 ( VAR_120 , "stats<S2SV_blank>%s<S2SV_blank>unrecognized" , VAR_31 ) ; continue ; } <S2SV_ModStart> VAR_124 ) ; if ( VAR_64 == VAR_123 ) { METHOD_13 ( VAR_120 , "filegen<S2SV_blank>category<S2SV_blank>\'%s\'<S2SV_blank>unrecognized" , VAR_124 ) ; continue ; }
<S2SV_ModStart> ) && ! METHOD_50 ( VAR_111 , VAR_114 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> const VAR_21 , TYPE_7 VAR_27 , TYPE_7 VAR_28 , TYPE_7 VAR_29 , TYPE_8 <S2SV_ModEnd> * VAR_19 ) <S2SV_ModStart> VAR_21 -> VAR_20 <S2SV_ModEnd> ; TYPE_7 VAR_26 <S2SV_ModStart> -> VAR_17 ) { METHOD_3 ( VAR_21 , VAR_21 -> last_frame_seg_map , VAR_21 -> current_frame_seg_map , VAR_27 , VAR_28 , VAR_29 ) ; <S2SV_ModStart> return 0 ; } <S2SV_ModStart> ( VAR_21 , VAR_27 , VAR_28 , VAR_29 <S2SV_ModEnd> , VAR_26 )
<S2SV_ModStart> TYPE_3 METHOD_0 ( struct STRUCT_OR_UNION_2 * VAR_32 , <S2SV_ModStart> VAR_3 ) ; <S2SV_ModEnd> TYPE_3 VAR_31 ; <S2SV_ModStart> TYPE_3 VAR_31 ; VAR_31 = mb2_cache_entry_create ( VAR_32 , VAR_8 , VAR_27 <S2SV_ModEnd> , VAR_26 -> <S2SV_ModStart> VAR_26 -> VAR_16 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_31 ) { <S2SV_ModEnd> if ( VAR_31 <S2SV_ModStart> } } else <S2SV_ModEnd> METHOD_8 ( VAR_26 <S2SV_ModStart> ( VAR_26 , "inserting<S2SV_blank>[%x]" <S2SV_ModEnd> , ( TYPE_3 <S2SV_ModStart> TYPE_3 ) VAR_27 ) ; <S2SV_ModEnd> return VAR_31 ;
<S2SV_ModStart> return 0 ; if ( VAR_83 -> VAR_87 < 2 || VAR_83 -> VAR_13 < 2 ) { METHOD_10 ( & VAR_83 -> VAR_88 -> VAR_8 , "missing<S2SV_blank>endpoints\\n" ) ; return - VAR_89 ; }
<S2SV_ModStart> , * VAR_47 , * VAR_56 = VAR_43 <S2SV_ModStart> VAR_53 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> , VAR_48 , & VAR_56 ) ) { if ( ! VAR_23 || METHOD_10 ( VAR_56 , VAR_23 ) == 0 ) VAR_55 = - VAR_57 ; else VAR_55 = - VAR_58 ; goto VAR_53 ; } if ( ! METHOD_6 ( VAR_39 , VAR_47 , VAR_54 , VAR_43 , VAR_35 <S2SV_ModEnd> ) ) { <S2SV_ModStart> if ( ! METHOD_7 ( VAR_39 -> VAR_40 , VAR_47 , VAR_48 , VAR_43 ) ) { VAR_55 = - VAR_45 ; goto VAR_53 ; } if ( ! <S2SV_ModStart> VAR_54 ) ; METHOD_9 ( VAR_56 ) ;
<S2SV_ModStart> != METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> < METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> != METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> < METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> : METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> >= METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 ( <S2SV_ModStart> < METHOD_76 ( VAR_509 <S2SV_ModEnd> , METHOD_92 (
<S2SV_ModStart> VAR_14 > 0 && METHOD_10 ( VAR_12 )
<S2SV_ModStart> VAR_13 ) ; METHOD_6 ( & VAR_21 -> VAR_23 ) ;
<S2SV_ModStart> ( VAR_38 || ! VAR_37 -> VAR_35 ||
<S2SV_ModStart> ) , & VAR_18 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ++ ) { METHOD_11 ( VAR_34 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_check" ) ;
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( VAR_29 )
<S2SV_ModStart> VAR_91 ) ; <S2SV_ModEnd> VAR_95 = 1 <S2SV_ModStart> VAR_93 ) ; <S2SV_ModEnd> return VAR_95 ;
<S2SV_ModStart> TYPE_10 VAR_63 ; TYPE_10 VAR_134 , <S2SV_ModEnd> VAR_35 , VAR_86 <S2SV_ModStart> + 64 , "LEN=%9d" <S2SV_ModEnd> , & VAR_134 <S2SV_ModStart> METHOD_17 ( "toshiba:<S2SV_blank>OFFSET<S2SV_blank>line<S2SV_blank>doesn\'t<S2SV_blank>have<S2SV_blank>valid<S2SV_blank>LEN<S2SV_blank>item" ) ; return VAR_156 ; } if ( VAR_134 < 0 ) { * VAR_153 = VAR_154 ; * VAR_155 = METHOD_17 ( "toshiba:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_25 ; METHOD_6 ( & VAR_25 , 0 , sizeof ( VAR_25 ) )
<S2SV_ModStart> VAR_54 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_2 * <S2SV_ModStart> VAR_6 -> VAR_7 <S2SV_ModEnd> ; VAR_54 -> <S2SV_ModStart> VAR_44 ; return METHOD_5 <S2SV_ModEnd> ( VAR_54 , <S2SV_ModStart> ( VAR_54 , VAR_19 -> VAR_14 , VAR_19 -> VAR_20 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> break ; } if ( VAR_71 -> VAR_74 == 0 ) break ; VAR_71 -> VAR_74 -- ;
<S2SV_ModStart> VAR_36 ) ; VAR_83 -> VAR_34 -> VAR_35 -> VAR_36 = VAR_85 ;
<S2SV_ModStart> METHOD_66 ( "exFAT<S2SV_blank>file<S2SV_blank>system<S2SV_blank>is<S2SV_blank>not<S2SV_blank>found" ) ; return - VAR_248 ; } if ( VAR_246 -> VAR_247 -> VAR_138 < 9 ) { METHOD_72 ( VAR_246 -> VAR_245 ) ; METHOD_66 ( "too<S2SV_blank>small<S2SV_blank>sector<S2SV_blank>size:<S2SV_blank>2^%hhd" , VAR_246 -> VAR_247 -> VAR_138 ) ; METHOD_73 ( VAR_246 -> VAR_247 ) ; return - VAR_248 ; } if ( ( TYPE_7 ) VAR_246 -> VAR_247 -> VAR_138 + ( TYPE_7 ) VAR_246 -> VAR_247 -> VAR_141 > 25 ) { METHOD_72 ( VAR_246 -> VAR_245 ) ; METHOD_66 ( "too<S2SV_blank>big<S2SV_blank>cluster<S2SV_blank>size:<S2SV_blank>2^(%hhd+%hhd)" , VAR_246 -> VAR_247 -> VAR_138 , VAR_246 -> VAR_247 -> VAR_141 ) ; METHOD_73 ( VAR_246 -> VAR_247 <S2SV_ModStart> } if ( <S2SV_ModEnd> METHOD_47 ( VAR_246
<S2SV_ModStart> VAR_144 ) , "%s" ,
<S2SV_ModStart> ; if ( VAR_98 == VAR_92 ) { VAR_105 = - VAR_106 ; goto VAR_101 ; } if (
<S2SV_ModStart> VAR_3 &= ~ ( VAR_4 | VAR_17 ) <S2SV_ModEnd> ; VAR_14 ->
<S2SV_ModStart> VAR_28 ; } METHOD_9 ( & VAR_70 , 0 , sizeof ( VAR_70 ) ) ;
<S2SV_ModStart> == 12 && ( <S2SV_ModStart> & VAR_13 ) ) <S2SV_ModStart> == 24 && ( <S2SV_ModStart> VAR_16 & VAR_17 )
<S2SV_ModStart> ( VAR_51 -> VAR_44 >= 3 && VAR_51 ->
<S2SV_ModStart> VAR_9 ) { if ( METHOD_3 ( VAR_7 -> VAR_4 , VAR_7 -> VAR_8 -> VAR_6 ) ) return 0 ;
<S2SV_ModStart> VAR_54 , VAR_49 ) ; METHOD_8 ( VAR_54
<S2SV_ModStart> == 0 ) METHOD_14 ( STRUCT_OR_UNION_14 , 0 <S2SV_ModEnd> ) ; METHOD_11
<S2SV_ModStart> goto VAR_56 ; VAR_47 = METHOD_13 ( VAR_25 ) ;
<S2SV_ModStart> ; VAR_12 = METHOD_3 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> VAR_95 ) { TYPE_25 * TYPE_20 = METHOD_1 ( <S2SV_ModEnd> TYPE_22 ( TYPE_23 <S2SV_ModStart> ) + 1 ) ; TYPE_25 * VAR_98 = TYPE_20 ; TYPE_25 * VAR_99 ; enum VAR_5 VAR_97 = VAR_28 ; TYPE_19 VAR_94 = VAR_14 ; TYPE_19 VAR_89 = VAR_14 ; VAR_95 -> VAR_14 = VAR_14 ; METHOD_2 ( TYPE_20 , TYPE_23 , <S2SV_ModEnd> TYPE_22 ( TYPE_23 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> while ( * <S2SV_ModStart> VAR_93 = VAR_94 ; METHOD_19 ( TYPE_20 ) <S2SV_ModStart> VAR_95 ) ; METHOD_19 ( TYPE_20 ) ; <S2SV_ModStart> ( VAR_88 ) { METHOD_19 ( TYPE_20 ) ; <S2SV_ModStart> return VAR_88 ; } <S2SV_ModStart> VAR_95 ) ; METHOD_19 ( TYPE_20 ) ; <S2SV_ModStart> VAR_89 , VAR_95 ) ; METHOD_19 ( TYPE_20 <S2SV_ModStart> VAR_95 ) ; METHOD_19 ( TYPE_20 ) ; <S2SV_ModStart> = VAR_97 ; METHOD_19 ( TYPE_20 ) ; <S2SV_ModStart> VAR_99 ; } METHOD_19 ( TYPE_20 ) ;
<S2SV_ModStart> * VAR_12 ; unsigned TYPE_4 VAR_29 = METHOD_10 ( STRUCT_OR_UNION_10 -> VAR_30 ) ; struct STRUCT_OR_UNION_11 * VAR_31 = METHOD_8 ( STRUCT_OR_UNION_10 ) ; TYPE_4 VAR_28 ; if ( ( VAR_16 + VAR_31 -> VAR_20 > VAR_29 ) || ( VAR_31 -> VAR_20 & 3 ) ) { METHOD_11 ( STRUCT_OR_UNION_10 , "bad<S2SV_blank>extra_isize<S2SV_blank>%u<S2SV_blank>(inode<S2SV_blank>size<S2SV_blank>%u)" , VAR_31 -> VAR_20 , METHOD_10 ( STRUCT_OR_UNION_10 -> VAR_30 ) ) ; return - VAR_32 ; } if ( ( VAR_23 < VAR_31 -> VAR_20 ) || ( VAR_23 < 4 ) || ( VAR_23 > VAR_29 - VAR_16 ) ) return - VAR_33 <S2SV_ModEnd> ; VAR_24 =
<S2SV_ModStart> VAR_14 > VAR_146 || ! VAR_283 -> VAR_274 -> VAR_168
<S2SV_ModStart> ) VAR_914 ; <S2SV_ModEnd> struct STRUCT_OR_UNION_27 * <S2SV_ModStart> * VAR_688 = ( <S2SV_ModEnd> struct STRUCT_OR_UNION_27 *
<S2SV_ModStart> ; TYPE_4 VAR_76 = VAR_82 ; TYPE_4 VAR_78 = VAR_82 <S2SV_ModEnd> ; TYPE_5 VAR_77 <S2SV_ModStart> ) ; } VAR_79 : METHOD_14 ( & VAR_77 , & VAR_76 ) ; METHOD_14 ( & VAR_77 , & VAR_78 ) ; <S2SV_ModEnd> METHOD_15 ( VAR_80
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( VAR_15 , VAR_20 ,
<S2SV_ModStart> ; VAR_164 -> VAR_179 = VAR_180 ; VAR_164 ->
<S2SV_ModStart> ; VAR_25 -> VAR_34 = VAR_35 ; VAR_25 ->
<S2SV_ModStart> VAR_4 ) { if ( VAR_4 -> VAR_2 . VAR_3 )
<S2SV_ModStart> TYPE_3 VAR_10 ; TYPE_4 <S2SV_ModEnd> VAR_26 ; VAR_10 <S2SV_ModStart> -> VAR_28 - METHOD_3 <S2SV_ModEnd> ( VAR_10 ,
<S2SV_ModStart> , VAR_85 ; if ( VAR_88 -> VAR_87 > VAR_88 -> VAR_98 ) { return 0 ; } <S2SV_ModStart> VAR_16 ) { if ( VAR_88 -> VAR_87 + ( VAR_96 >> 3 ) > VAR_88 -> VAR_98 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( VAR_88 -> VAR_89 + VAR_85 > VAR_88 -> VAR_98 << 3 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; } <S2SV_ModStart> VAR_88 -> VAR_89 , VAR_88 -> VAR_98 << 3 <S2SV_ModStart> ) ) ; if ( VAR_88 -> VAR_89 > VAR_88 -> VAR_98 << 3 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; }
<S2SV_ModStart> TYPE_6 * VAR_92 , TYPE_13 VAR_108 <S2SV_ModStart> case VAR_90 : if ( VAR_108 & VAR_109 ) { <S2SV_ModStart> ( VAR_101 , "iniparser:<S2SV_blank>syntax<S2SV_blank>error<S2SV_blank>in<S2SV_blank>%s<S2SV_blank>(%d)\\n" , VAR_92 , VAR_93 ) ; } else { METHOD_23 ( VAR_101 , <S2SV_ModStart> VAR_97 ) ; }
<S2SV_ModStart> * VAR_21 , <S2SV_ModEnd> const TYPE_1 *
<S2SV_ModStart> VAR_97 ; } METHOD_24 ( & VAR_95 [ VAR_96 + 2 ] ) ;
<S2SV_ModStart> VAR_18 ] ; METHOD_4 ( VAR_59 , 0 , sizeof ( * VAR_59 ) ) ;
<S2SV_ModStart> ) return ; if ( METHOD_2 ( VAR_6 , '\\n' ) ) METHOD_3 ( "credential<S2SV_blank>value<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>contains<S2SV_blank>newline" , VAR_5 ) ;
<S2SV_ModStart> TYPE_11 * TYPE_12 , <S2SV_ModEnd> const TYPE_11 * <S2SV_ModStart> const TYPE_11 * * ep ) { const TYPE_11 * VAR_83 = TYPE_12 + 1 , * VAR_84 = TYPE_12 + 1 ; TYPE_11 * VAR_74 ; TYPE_11 * <S2SV_ModEnd> VAR_79 ; TYPE_8 <S2SV_ModStart> \'\\"\' ) { * <S2SV_ModStart> = TYPE_12 ; return 0 ; <S2SV_ModEnd> } while ( <S2SV_ModStart> while ( * VAR_84 <S2SV_ModEnd> != \'\\"\' && <S2SV_ModStart> \'\\"\' && * VAR_84 <S2SV_ModEnd> && ++ VAR_70 <S2SV_ModStart> ++ VAR_70 ) if ( * VAR_84 <S2SV_ModEnd> ++ == '\\\\' <S2SV_ModStart> == '\\\\' ) VAR_84 ++ ; VAR_79 = ( TYPE_11 * ) METHOD_1 ( VAR_70 + 1 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( ! VAR_79 ) return 0 ; VAR_80 -> VAR_78 <S2SV_ModEnd> = VAR_79 ; <S2SV_ModStart> = VAR_79 ; VAR_80 -> VAR_81 = VAR_82 ; VAR_83 = TYPE_12 + 1 ; VAR_74 = VAR_79 ; while ( VAR_83 < VAR_84 ) <S2SV_ModEnd> { if ( <S2SV_ModStart> case 'u' : VAR_67 = parse_hex4 ( VAR_83 + 1 ) ; <S2SV_ModEnd> VAR_83 += 4 <S2SV_ModStart> += 4 ; if ( VAR_83 >= VAR_84 ) { * ep = TYPE_12 ; return 0 ; } <S2SV_ModStart> == 0 ) { * ep = TYPE_12 ; return 0 ; } <S2SV_ModEnd> if ( VAR_67 <S2SV_ModStart> <= 0xDBFF ) { if ( VAR_83 + 6 > VAR_84 ) { * ep = TYPE_12 ; return 0 ; } <S2SV_ModEnd> if ( VAR_83 <S2SV_ModStart> != 'u' ) { * ep = TYPE_12 ; return 0 ; } VAR_46 = parse_hex4 <S2SV_ModEnd> ( VAR_83 + <S2SV_ModStart> VAR_83 + 3 ) ; <S2SV_ModEnd> VAR_83 += 6 <S2SV_ModStart> > 0xDFFF ) { * ep = TYPE_12 ; return 0 ; } <S2SV_ModEnd> VAR_67 = 0x10000 <S2SV_ModStart> VAR_67 = 0x10000 + ( <S2SV_ModEnd> ( ( VAR_67 <S2SV_ModStart> & 0x3FF ) ) <S2SV_ModStart> < 0x80 ) VAR_70 = 1 ; <S2SV_ModEnd> else if ( <S2SV_ModStart> break ; } VAR_83 ++ <S2SV_ModEnd> ; } } <S2SV_ModStart> == \'\\"\' ) VAR_83 ++ <S2SV_ModEnd> ; return VAR_83
<S2SV_ModStart> VAR_329 , VAR_347 <S2SV_ModEnd> ) + METHOD_7 <S2SV_ModStart> VAR_281 , VAR_347 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> -> VAR_66 ) ; TYPE_0 VAR_361 <S2SV_ModStart> case VAR_120 : VAR_361 = METHOD_31 ( VAR_358 , VAR_65 , VAR_329 , VAR_355 , VAR_311 < 0 ) ; if ( VAR_361 < 0 ) { METHOD_30 ( VAR_358 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>add<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n" , VAR_359 ) ; return VAR_361 ; } <S2SV_ModStart> case VAR_211 : VAR_361 = METHOD_31 ( VAR_358 , VAR_65 , VAR_329 , VAR_355 , VAR_311 < 0 ) ; if ( VAR_361 < 0 ) { METHOD_30 ( VAR_358 , "R%d<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>sub<S2SV_blank>from<S2SV_blank>different<S2SV_blank>maps<S2SV_blank>or<S2SV_blank>paths\\n" , VAR_359 ) ; return VAR_361 ; }
<S2SV_ModStart> VAR_69 ) ; VAR_70 -> VAR_5 = VAR_71 ;
<S2SV_ModStart> <S2SV_null> static unsigned TYPE_3 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) { unsigned TYPE_3 <S2SV_ModEnd> VAR_10 = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & VAR_8
<S2SV_ModStart> -> VAR_9 = VAR_44 <S2SV_ModEnd> ; for (
<S2SV_ModStart> * VAR_0 , <S2SV_ModEnd> TYPE_3 VAR_2 ) <S2SV_ModStart> VAR_2 ) { ( TYPE_4 ) VAR_0 ; ( TYPE_4 ) VAR_2 ;
<S2SV_ModStart> -> VAR_363 ; METHOD_42 ( VAR_348 [ 0 ] ) ; <S2SV_ModStart> case VAR_315 : METHOD_36 ( VAR_348 [ 0 ] , 2 ) ; <S2SV_ModStart> case VAR_315 : METHOD_36 ( VAR_348 [ 0 ] , 2 ) ;
<S2SV_ModStart> case 'l' : { TYPE_38 * VAR_448 = METHOD_107 ( VAR_487 -> VAR_445 ) ; <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> case 'i' : { TYPE_38 * VAR_448 = METHOD_107 ( VAR_487 -> VAR_445 ) ; <S2SV_ModStart> 0 ) ; }
<S2SV_ModStart> TYPE_8 VAR_50 , TYPE_10 <S2SV_ModEnd> * VAR_45 ) <S2SV_ModStart> -> VAR_39 ; TYPE_8 VAR_41 , VAR_52 ; const TYPE_8 VAR_53 = VAR_49 * VAR_47 -> VAR_54 + VAR_50 ; const TYPE_8 VAR_55 = VAR_33 -> VAR_56 [ 0 ] . VAR_57 >> 1 ; const TYPE_8 VAR_58 = VAR_33 -> VAR_56 [ 0 ] . VAR_59 >> 1 ; const TYPE_8 VAR_60 = METHOD_7 ( VAR_47 -> VAR_54 - VAR_50 , VAR_55 ) ; const TYPE_8 VAR_61 = METHOD_7 ( VAR_47 -> VAR_62 - VAR_49 , VAR_58 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; VAR_41 = <S2SV_ModEnd> VAR_47 -> VAR_22 <S2SV_ModStart> VAR_47 -> VAR_22 ? dec_get_segment_id ( VAR_47 , VAR_47 -> VAR_22 , VAR_53 , VAR_60 , VAR_61 ) : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_27 ) { METHOD_8 ( VAR_47 , VAR_47 -> VAR_22 , VAR_47 -> VAR_63 , VAR_53 , VAR_60 , VAR_61 ) ; <S2SV_ModStart> return VAR_41 ; } <S2SV_ModStart> ) { const TYPE_11 <S2SV_ModEnd> VAR_37 = METHOD_2 <S2SV_ModStart> -> VAR_40 = METHOD_9 <S2SV_ModEnd> ( VAR_45 , <S2SV_ModStart> ( VAR_47 , VAR_53 , VAR_60 , VAR_61 <S2SV_ModEnd> , VAR_52 )
<S2SV_ModStart> VAR_27 ) { TYPE_8 VAR_36 ; TYPE_8 VAR_37 ; TYPE_8 VAR_38 ; TYPE_8 VAR_39 ; TYPE_8 VAR_40 ; TYPE_8 VAR_41 ; TYPE_9 VAR_42 ; TYPE_9 VAR_43 ; unsigned TYPE_1 VAR_44 ; unsigned TYPE_1 VAR_45 ; TYPE_6 * VAR_46 ; TYPE_6 * VAR_35 <S2SV_ModEnd> ; const TYPE_6 <S2SV_ModStart> TYPE_6 TYPE_7 * <S2SV_ModEnd> VAR_33 = ( <S2SV_ModStart> -> VAR_10 ; TYPE_6 VAR_47 [ 96 ] ; METHOD_6 ( VAR_16 > 7500 ) ; VAR_36 = VAR_16 ; VAR_46 = METHOD_2 ( VAR_16 + 1 , VAR_17 ) ; if ( ! VAR_46 ) { METHOD_3 ( "out<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>argv<S2SV_blank>string" ) ; return ; } VAR_35 = VAR_46 ; <S2SV_ModStart> VAR_23 ) ; VAR_37 = VAR_36 ; VAR_39 = 0 ; VAR_38 = 0 ; VAR_42 = VAR_48 ; VAR_43 = VAR_49 ; VAR_44 = 0 ; VAR_45 = 0 ; do { if ( VAR_38 == 0 ) VAR_38 = METHOD_7 ( VAR_33 , VAR_50 ) - 1 ; if ( VAR_42 ) { if ( VAR_35 != VAR_46 ) { METHOD_8 ( VAR_46 , VAR_35 , VAR_39 ) ; VAR_35 = VAR_46 ; } VAR_41 = METHOD_9 ( & VAR_46 [ VAR_39 ] , VAR_33 , VAR_36 - VAR_39 ) ; if ( VAR_41 == - VAR_51 ) { METHOD_10 ( VAR_52 , VAR_8 , 0 ) ; goto VAR_53 ; } else if ( VAR_41 == ( VAR_36 - VAR_39 ) ) { VAR_42 = VAR_48 ; VAR_43 = VAR_48 ; VAR_38 = VAR_38 * 2 ; VAR_33 += VAR_41 ; } else { VAR_42 = VAR_49 ; if ( ! VAR_43 ) VAR_43 = audit_string_contains_control ( VAR_35 , VAR_41 ) ; if ( VAR_38 < VAR_36 ) VAR_38 = ( VAR_43 ? VAR_41 * 2 : VAR_41 ) ; VAR_33 += VAR_41 + 1 ; } VAR_39 += VAR_41 ; VAR_46 [ VAR_39 ] = '\\0' ; VAR_40 = ( VAR_43 ? VAR_39 * 2 : VAR_39 + 2 ) ; } if ( VAR_39 > 0 ) { if ( ( sizeof ( VAR_47 ) + 8 ) > VAR_37 ) { VAR_37 = VAR_36 ; audit_log_end ( * VAR_27 ) ; * VAR_27 = audit_log_start ( VAR_26 , VAR_17 , AUDIT_EXECVE <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! * VAR_27 ) goto VAR_53 ; } VAR_41 = 0 ; if ( VAR_42 || ( VAR_44 > 0 ) || ( ( VAR_40 + sizeof ( VAR_47 ) ) > VAR_37 ) ) { if ( VAR_44 == 0 ) { VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d_len=%lu" , VAR_45 , VAR_38 ) ; } VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d[%d]=" , VAR_45 , VAR_44 ++ ) ; } else VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d=" , VAR_45 ) ; METHOD_12 ( VAR_41 >= sizeof ( VAR_47 ) ) ; VAR_47 [ sizeof ( VAR_47 ) - 1 ] = '\\0' ; METHOD_1 ( * VAR_27 , "%s" , VAR_47 ) ; VAR_37 -= VAR_41 ; VAR_41 = VAR_39 ; if ( VAR_43 ) { if ( VAR_40 > VAR_37 ) VAR_41 = VAR_37 / 2 ; METHOD_13 ( * VAR_27 , VAR_35 , VAR_41 ) ; VAR_37 -= VAR_41 * 2 ; VAR_40 -= VAR_41 * 2 ; } else { if ( VAR_40 > VAR_37 ) VAR_41 = VAR_37 - 2 ; METHOD_14 ( * VAR_27 , VAR_35 , VAR_41 ) ; VAR_37 -= VAR_41 + 2 ; VAR_40 -= VAR_41 ; } VAR_39 -= VAR_41 ; VAR_35 += VAR_41 ; } if ( ( VAR_39 == 0 ) && ! VAR_42 ) { VAR_45 ++ ; VAR_44 = 0 ; VAR_38 = 0 ; VAR_42 = VAR_48 ; VAR_43 = VAR_49 ; } } while ( VAR_45 <S2SV_ModEnd> < VAR_26 -> <S2SV_ModStart> VAR_22 . VAR_23 ) ; VAR_53 : METHOD_5 ( VAR_46 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> -> VAR_8 ; <S2SV_ModEnd> TYPE_3 VAR_36 ; <S2SV_ModStart> TYPE_3 VAR_36 ; mutex_lock <S2SV_ModEnd> ( & VAR_33 <S2SV_ModStart> VAR_33 -> VAR_34 <S2SV_ModEnd> ) ; VAR_36 <S2SV_ModStart> ; VAR_32 : METHOD_6 <S2SV_ModEnd> ( & VAR_33 <S2SV_ModStart> VAR_33 -> VAR_34 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ( METHOD_18 ( VAR_78 <S2SV_ModEnd> , METHOD_21 (
<S2SV_ModStart> { TYPE_1 VAR_10 ; METHOD_5 ( VAR_23 , VAR_23 -> VAR_5 , 0 ) ; METHOD_6 ( VAR_23 -> VAR_24 )
<S2SV_ModStart> ) return ; METHOD_6 ( & VAR_34 , 0 , sizeof ( VAR_34 ) ) ;
<S2SV_ModStart> STRUCT_OR_UNION_4 ) >= VAR_12 || ( unsigned TYPE_11 * ) VAR_53 + VAR_53 -> VAR_19 >
<S2SV_ModStart> VAR_66 ; TYPE_12 VAR_76 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { VAR_76 <S2SV_ModEnd> = ( VAR_49 <S2SV_ModStart> = VAR_49 - VAR_76 <S2SV_ModEnd> ; VAR_67 = <S2SV_ModStart> & VAR_60 [ VAR_76 <S2SV_ModEnd> * VAR_71 ]
<S2SV_ModStart> ; unsigned TYPE_2 VAR_39 , VAR_36 ; TYPE_5 VAR_40 <S2SV_ModEnd> ; TYPE_3 METHOD_5 <S2SV_ModStart> VAR_35 ) ; struct STRUCT_OR_UNION_1 VAR_41 , VAR_42 ; const struct STRUCT_OR_UNION_2 * VAR_4 = VAR_35 -> VAR_4 ; if ( VAR_35 -> VAR_30 == VAR_43 ) VAR_4 -> METHOD_7 ( VAR_35 , & VAR_40 , & VAR_41 , NULL , VAR_37 ) ; <S2SV_ModStart> VAR_35 , & VAR_39 <S2SV_ModEnd> , VAR_35 -> <S2SV_ModStart> ) return VAR_38 <S2SV_ModEnd> ; VAR_38 = <S2SV_ModStart> ; VAR_38 = __load_segment_descriptor <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> VAR_36 , VAR_37 , 0 , false , & VAR_42 ) ; if ( VAR_38 != VAR_27 ) return VAR_38 ; VAR_38 = assign_eip_far ( VAR_35 , VAR_39 , VAR_42 . l ) ; if ( VAR_38 != VAR_27 ) { WARN_ON ( ! VAR_35 -> VAR_30 != VAR_43 ) ; VAR_4 -> set_segment ( VAR_35 , VAR_40 , & VAR_41 , 0 , VAR_37 ) ; } <S2SV_ModEnd> return VAR_38 ;
<S2SV_ModStart> = 0 ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_24 ;
<S2SV_ModStart> ; TYPE_4 VAR_87 = VAR_93 ; TYPE_4 VAR_89 = VAR_93 <S2SV_ModEnd> ; TYPE_5 VAR_88 <S2SV_ModStart> VAR_85 ) ; VAR_90 : <S2SV_ModStart> VAR_89 ) ; <S2SV_ModEnd> METHOD_17 ( VAR_91
<S2SV_ModStart> METHOD_7 ( VAR_66 ) ; METHOD_26 ( VAR_66 -> VAR_68 . VAR_69
<S2SV_ModStart> ] + VAR_409 [ VAR_359 ] ; VAR_409 [ VAR_359 ] -= VAR_411 <S2SV_ModStart> += 3 ; VAR_409 [ VAR_359 ] -= 3 ; <S2SV_ModStart> VAR_416 , VAR_408 [ VAR_359 ] , VAR_409 <S2SV_ModStart> ] = 1 ; VAR_409 [ VAR_359 ] -= 3 <S2SV_ModStart> += VAR_324 ; VAR_409 [ VAR_359 ] -= VAR_324 ; <S2SV_ModStart> ; if ( VAR_409 [ VAR_359 ] && <S2SV_ModStart> { do { if ( ! VAR_409 [ VAR_359 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_409 [ VAR_359 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_409 [ VAR_359 ] ) { METHOD_23 ( VAR_390 , VAR_391 , VAR_178 , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto VAR_407 ; } <S2SV_ModStart> VAR_359 ] ++ ; VAR_409 [ VAR_359 ] --
<S2SV_ModStart> ; VAR_385 = ( <S2SV_ModStart> , 4 ) + 1 ) % 0xf <S2SV_ModStart> ] = VAR_385 <S2SV_ModEnd> ; VAR_553 -> <S2SV_ModStart> VAR_400 [ VAR_385 <S2SV_ModEnd> ] ; VAR_556 <S2SV_ModStart> VAR_406 [ VAR_385 <S2SV_ModEnd> ] ; }
<S2SV_ModStart> VAR_112 ; struct STRUCT_OR_UNION_15 * VAR_179 = METHOD_26 ( VAR_152 ) ; struct <S2SV_ModStart> STRUCT_OR_UNION_11 VAR_104 ; struct STRUCT_OR_UNION_16 * VAR_180 , VAR_181 ; <S2SV_ModStart> ) ; } VAR_180 = METHOD_27 ( VAR_174 , VAR_179 -> VAR_182 , & VAR_181 ) ; <S2SV_ModStart> , VAR_174 , VAR_180 <S2SV_ModEnd> , VAR_155 ) <S2SV_ModStart> . VAR_150 ; VAR_180 = METHOD_27 ( VAR_174 , VAR_179 -> VAR_182 , & VAR_181 ) ; <S2SV_ModStart> , VAR_174 , VAR_180 <S2SV_ModEnd> , VAR_155 )
<S2SV_ModStart> VAR_43 ) { return VAR_63 <S2SV_ModEnd> ; } else
<S2SV_ModStart> VAR_10 ) { <S2SV_ModEnd> TYPE_3 * VAR_13 <S2SV_ModStart> TYPE_3 * VAR_13 = safe_calloc ( <S2SV_ModEnd> 1024 ) ; <S2SV_ModStart> 1024 ) ; TYPE_2
<S2SV_ModStart> -> VAR_668 * METHOD_127 ( VAR_237 , 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> VAR_668 * METHOD_127 ( VAR_237 , 4 ) <S2SV_ModEnd> ; VAR_561 =
<S2SV_ModStart> ( VAR_186 < 32 ) METHOD_45 ( ( VAR_191 , "<S2SV_blank>len=%d<S2SV_blank>[bad:<S2SV_blank><<S2SV_blank>32]" <S2SV_ModEnd> , VAR_186 )
<S2SV_ModStart> -> VAR_15 ) { <S2SV_ModStart> VAR_15 ) ; VAR_94 -> VAR_15 = VAR_57 ; }
<S2SV_ModStart> & VAR_28 , METHOD_11 ( <S2SV_ModStart> VAR_31 -> VAR_30 )
<S2SV_ModStart> VAR_23 ; } METHOD_4 ( VAR_22 ) ;
<S2SV_ModStart> VAR_417 -> VAR_405 && METHOD_8 ( VAR_417 -> VAR_413 )
<S2SV_ModStart> VAR_69 ) ; if ( ! <S2SV_ModStart> , VAR_62 ) ) return VAR_60
<S2SV_ModStart> , 0 ) ; if ( ! VAR_525 || ! VAR_531 ) return - VAR_288
<S2SV_ModStart> 1 ) ; if ( VAR_295 == 0 ) { METHOD_44 ( ( "CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>0\\n" ) ) ; goto VAR_355 ; } <S2SV_ModStart> VAR_296 < VAR_295 && VAR_353 < VAR_103 . VAR_104 ; <S2SV_ModEnd> VAR_296 ++ ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_14 <S2SV_ModEnd> METHOD_29 ( TYPE_1 <S2SV_ModStart> * VAR_151 , const TYPE_14 VAR_154 , const TYPE_8 VAR_155 , const <S2SV_ModStart> * VAR_38 ; METHOD_36 ( VAR_151 ) ; if ( * VAR_151 != 0 ) { METHOD_32 ( ( VAR_150 , "%sRPKI-RTRv%u<S2SV_blank>(unknown)" , METHOD_33 ( 8 ) , * VAR_151 ) ) ; return VAR_154 ; } if ( VAR_154 < sizeof ( TYPE_7 ) ) { METHOD_32 ( ( VAR_150 , "(%u<S2SV_blank>bytes<S2SV_blank>is<S2SV_blank>too<S2SV_blank>few<S2SV_blank>to<S2SV_blank>decode)" , VAR_154 ) ) ; goto VAR_156 ; } METHOD_31 ( * VAR_151 , sizeof ( TYPE_7 ) ) ; <S2SV_ModStart> VAR_15 ) ; <S2SV_ModEnd> VAR_149 = VAR_19 <S2SV_ModStart> VAR_152 ) ) ; if ( VAR_152 < sizeof ( TYPE_7 ) || VAR_152 > VAR_154 ) goto VAR_156 <S2SV_ModStart> case VAR_30 : if ( VAR_152 != sizeof ( TYPE_7 ) + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> case VAR_40 : if ( VAR_152 != sizeof ( TYPE_7 ) ) goto VAR_156 ; <S2SV_ModStart> case VAR_41 : if ( VAR_152 != sizeof ( TYPE_7 ) ) goto VAR_156 ; <S2SV_ModStart> * VAR_110 ; if ( VAR_152 != sizeof ( TYPE_7 ) + 12 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> * VAR_110 ; if ( VAR_152 != sizeof ( TYPE_7 ) + 24 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> , VAR_105 ; VAR_134 = sizeof ( TYPE_7 ) ; if ( VAR_152 < VAR_134 + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_134 + 4 ) ; <S2SV_ModStart> VAR_123 ) ; VAR_134 += 4 <S2SV_ModEnd> ; VAR_105 = <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( VAR_123 <S2SV_ModStart> if ( VAR_123 ) { if ( VAR_152 < VAR_134 + VAR_123 ) goto VAR_156 ; if ( ! VAR_155 ) { METHOD_31 ( * VAR_151 , VAR_134 + VAR_123 ) ; } else <S2SV_ModEnd> { METHOD_32 ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> METHOD_29 ( VAR_150 <S2SV_ModStart> VAR_150 , VAR_151 + VAR_134 , VAR_123 , 0 <S2SV_ModStart> + 2 ) ; } VAR_134 <S2SV_ModEnd> += VAR_123 ; <S2SV_ModStart> += VAR_123 ; } if ( VAR_152 < VAR_134 + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_134 + 4 ) <S2SV_ModEnd> ; VAR_139 = <S2SV_ModStart> ; VAR_139 = <S2SV_ModEnd> METHOD_30 ( VAR_151 <S2SV_ModStart> METHOD_30 ( VAR_151 + VAR_134 ) ; VAR_134 <S2SV_ModEnd> += 4 ; <S2SV_ModStart> += 4 ; if ( VAR_139 ) { if ( VAR_152 < VAR_134 + VAR_139 ) goto VAR_156 ; METHOD_32 ( ( VAR_150 , "%sError<S2SV_blank>text:<S2SV_blank>" , METHOD_33 ( VAR_136 + 2 ) ) ) ; if ( METHOD_34 ( VAR_150 , VAR_151 + VAR_134 , VAR_139 , VAR_150 -> VAR_141 ) ) goto VAR_153 ; } } break ; default : <S2SV_ModEnd> METHOD_31 ( * <S2SV_ModStart> * VAR_151 , VAR_152 ) ; <S2SV_ModEnd> VAR_149 = VAR_144 <S2SV_ModStart> ; } return VAR_152 ; VAR_156 : METHOD_32 ( ( VAR_150 , "%s" , istr ) ) ; METHOD_31 ( * VAR_151 , VAR_154 ) ; return VAR_154 <S2SV_ModEnd> ; VAR_153 : <S2SV_ModStart> ; VAR_153 : METHOD_32 ( ( VAR_150 , "\\n\\t%s" , VAR_157 ) ) ; return VAR_154 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_266 ) { if ( VAR_266 -> VAR_226 + VAR_270 -> VAR_231 -> VAR_166 > VAR_275 - 2 || VAR_266 -> VAR_240 + VAR_270 -> VAR_231 -> VAR_166 > VAR_275 - 2 ) { return - 1 ; } <S2SV_ModStart> VAR_218 * ( METHOD_13 ( TYPE_13 , 1 ) << <S2SV_ModEnd> ( VAR_266 -> <S2SV_ModStart> VAR_232 * ( METHOD_13 ( TYPE_13 , 1 ) << <S2SV_ModEnd> ( VAR_266 -> <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_202 ) <S2SV_ModStart> VAR_215 % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_202 ) <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_212 ) <S2SV_ModStart> VAR_229 % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_212 )
<S2SV_ModStart> * VAR_60 ; switch ( VAR_29 -> VAR_26 . VAR_62 & VAR_63 ) { case 2 : <S2SV_ModEnd> METHOD_21 ( "[L2TP<S2SV_blank>tid=%u<S2SV_blank>sid=%u" <S2SV_ModStart> ) ) ; break ; case 3 : <S2SV_ModEnd> METHOD_21 ( "[L2TP<S2SV_blank>cid=%u" <S2SV_ModStart> VAR_27 ) ) ; break ; default : METHOD_21 ( "[L2TP<S2SV_blank>unknown<S2SV_blank>version]\\n" ) ; return
<S2SV_ModStart> ; METHOD_5 ( "Copyright<S2SV_blank>(c)<S2SV_blank>2011,<S2SV_blank>2015,<S2SV_blank>Oracle<S2SV_blank>and/or<S2SV_blank>its<S2SV_blank>affiliates.<S2SV_blank>" <S2SV_ModEnd> "All<S2SV_blank>rights<S2SV_blank>reserved.\\n" ) ;
<S2SV_ModStart> VAR_4 ) { TYPE_3 VAR_6 = METHOD_2 ( VAR_4 ) + 1 ; <S2SV_ModStart> = METHOD_1 ( VAR_6 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> VAR_5 , VAR_4 , VAR_6
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_229 < 4
<S2SV_ModStart> VAR_33 , TYPE_3 VAR_36 , TYPE_3 <S2SV_ModStart> VAR_9 ) ; if ( VAR_36 < 12 ) { METHOD_8 ( VAR_9 , VAR_37 , "Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOT<S2SV_blank>marker\\n" ) ; return VAR_38 ; }
<S2SV_ModStart> VAR_9 ) { TYPE_0 VAR_16 ; <S2SV_ModStart> ) ) ; for ( VAR_16 = 0 ; VAR_16 < 3 ; VAR_16 ++ ) <S2SV_ModStart> ( STRUCT_OR_UNION_7 , VAR_16 <S2SV_ModEnd> , VAR_9 -> <S2SV_ModStart> -> VAR_10 [ VAR_16 <S2SV_ModEnd> ] . VAR_11
<S2SV_ModStart> VAR_105 ; } VAR_88 -> VAR_108 = 0 ;
<S2SV_ModStart> = VAR_98 ; VAR_129 -> VAR_139 = STRUCT_OR_UNION_31 . STRUCT_OR_UNION_26 -> VAR_94 -> VAR_139 + 1 ; VAR_138 = - VAR_66 ; if ( VAR_129 -> VAR_139 > VAR_140 ) { METHOD_28 ( "eCryptfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n" ) ; goto VAR_127 ; }
<S2SV_ModStart> "none" ; } <S2SV_ModEnd> if ( VAR_42
<S2SV_ModStart> VAR_6 ; struct STRUCT_OR_UNION_5 * VAR_41 ; struct <S2SV_ModStart> * VAR_40 ; METHOD_4 ( ) ; VAR_41 = METHOD_2 ( VAR_39 ) ; <S2SV_ModStart> if ( ! VAR_41 || ! VAR_41 -> VAR_42 || VAR_41 -> VAR_43 -> METHOD_12 ( VAR_41 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> 0 ) ) { METHOD_11 ( ) ; return ; } <S2SV_ModEnd> VAR_19 = METHOD_5 <S2SV_ModStart> VAR_37 ) ; VAR_41 = <S2SV_ModEnd> ! METHOD_9 ( <S2SV_ModStart> ( VAR_40 ) ? <S2SV_ModEnd> & VAR_40 -> <S2SV_ModStart> & VAR_40 -> VAR_41 : VAR_44 ; METHOD_13 ( VAR_39 ,
<S2SV_ModStart> VAR_38 ) ; METHOD_15 ( & VAR_78 -> VAR_34 ) ; <S2SV_ModStart> = VAR_77 ; METHOD_14 ( VAR_78 -> VAR_76 , "port-%d" , VAR_77 ) ; <S2SV_ModStart> VAR_73 -> VAR_74 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_11 ) { TYPE_4 * VAR_13 ; TYPE_0 VAR_14 ; VAR_13 = METHOD_3 ( VAR_12 , VAR_15 ) ; if ( ! VAR_13 ) return - VAR_16 ; VAR_14 = <S2SV_ModEnd> METHOD_1 ( VAR_6 <S2SV_ModStart> , 0 , VAR_13 <S2SV_ModEnd> , VAR_12 , <S2SV_ModStart> 500 ) ; if ( VAR_14 > 0 && VAR_14 <= VAR_12 ) METHOD_4 ( VAR_11 , VAR_13 , VAR_14 ) ; METHOD_5 ( VAR_13 ) ; return VAR_14 ;
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_124 ) && 0 != * VAR_41 && 0 != * VAR_138 && 0 != * VAR_124 ) <S2SV_ModEnd> { * VAR_129 <S2SV_ModStart> return ; } METHOD_42 ( 0 != VAR_112 && 0 != VAR_120 ) ;
<S2SV_ModStart> VAR_15 ; TYPE_12 VAR_38 , VAR_45 = 0 ; TYPE_12 VAR_46 ; TYPE_10 VAR_43 ; if ( VAR_18 < VAR_43 ) return VAR_20 ; if ( VAR_21 < 1 ) return VAR_22 ; <S2SV_ModStart> & 0x07 ; <S2SV_ModEnd> VAR_43 = VAR_21 <S2SV_ModStart> - 1 ; VAR_42 ++ ; METHOD_1 ( VAR_15 , 0 , VAR_18 ) ; while ( VAR_43 ) { TYPE_12 VAR_33 ; * VAR_41 = 0 ; if ( VAR_43 == 1 ) VAR_33 = 8 - VAR_46 ; else VAR_33 = 8 ; if ( VAR_30 ) for ( VAR_38 = 0 ; VAR_38 < VAR_33 ; VAR_38 ++ ) { * VAR_41 |= ( ( * VAR_42 >> ( 7 - VAR_38 ) ) & 1 ) << VAR_38 ; } else { * VAR_41 = * VAR_42 ; } VAR_41 ++ ; VAR_42 ++ ; VAR_43 -- ; VAR_45 ++ ; } return ( VAR_45 * 8 <S2SV_ModEnd> ) - VAR_46
<S2SV_ModStart> STRUCT_OR_UNION_25 , VAR_55 , & VAR_85 <S2SV_ModStart> VAR_82 , STRUCT_OR_UNION_25 , & VAR_85 <S2SV_ModStart> METHOD_17 ) { VAR_120 = METHOD_17 ( VAR_119 , & VAR_85 ) ; } else { VAR_120 = METHOD_18 ( VAR_119 , VAR_85 . VAR_121 , VAR_85 . <S2SV_ModEnd> VAR_88 , VAR_119
<S2SV_ModStart> ; unsigned TYPE_6 * VAR_42 = VAR_60 <S2SV_ModEnd> ; unsigned TYPE_7 <S2SV_ModStart> unsigned TYPE_7 VAR_43 <S2SV_ModEnd> ; const TYPE_8 <S2SV_ModStart> ; if ( VAR_60 == VAR_59 ) goto VAR_53 ; VAR_43 = METHOD_21 ( VAR_59 ) ; if ( VAR_43 <= 0 ) goto VAR_53 ; VAR_42 = METHOD_22 ( VAR_43 ) ; if ( VAR_60 == VAR_42 ) goto VAR_53 ; if ( <S2SV_ModStart> ; VAR_53 : METHOD_23 ( VAR_42 ) ;
<S2SV_ModStart> ; VAR_234 : if ( VAR_236 && VAR_229 -> VAR_230 . METHOD_34 ) { VAR_229 -> VAR_230 . METHOD_34 ( & VAR_229 -> VAR_230 ) ; VAR_229 -> VAR_230 . METHOD_34 = VAR_233 ; }
<S2SV_ModStart> VAR_59 , struct STRUCT_OR_UNION_2 <S2SV_ModEnd> * VAR_65 ) <S2SV_ModStart> TYPE_5 VAR_61 ; METHOD_13 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> 6 ) ; METHOD_13 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> 3 ) ; METHOD_14 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> VAR_13 ) { METHOD_14 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> VAR_61 ] ; METHOD_14 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> = VAR_66 ; METHOD_13 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> 6 ) ; METHOD_14 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> VAR_61 ] ; METHOD_14 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> = VAR_66 ; METHOD_13 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> 6 ) ; METHOD_14 <S2SV_ModEnd> ( VAR_65 ,
<S2SV_ModStart> TYPE_3 * VAR_15 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> ( VAR_5 ) ; const TYPE_3 * VAR_14 <S2SV_ModStart> ) && ( ( VAR_14 + 6 ) [ 0 ] == '.' ) && METHOD_9 ( ( VAR_14 + 5 ) [ 0 ] ) && METHOD_9 ( ( VAR_14 + 7 ) [ 0 ] <S2SV_ModEnd> ) ) {
<S2SV_ModStart> VAR_180 , VAR_176 ; struct STRUCT_OR_UNION_15 * VAR_214 <S2SV_ModStart> ) ) ; VAR_214 = rcu_dereference_protected ( VAR_229 -> VAR_214 , sock_owned_by_user ( VAR_250 ) ) ; <S2SV_ModStart> & VAR_188 , <S2SV_ModEnd> VAR_214 , & <S2SV_ModStart> ; if ( VAR_214 <S2SV_ModEnd> ) VAR_208 -> <S2SV_ModStart> -> VAR_209 = <S2SV_ModEnd> VAR_214 -> VAR_212 <S2SV_ModStart> -> VAR_212 + <S2SV_ModEnd> VAR_214 -> VAR_215 <S2SV_ModStart> VAR_214 -> VAR_215 <S2SV_ModEnd> ; VAR_248 ->
<S2SV_ModStart> VAR_79 , VAR_81 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ( VAR_28 , VAR_18 , <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> { VAR_41 = METHOD_14 <S2SV_ModEnd> ( VAR_41 ,
<S2SV_ModStart> VAR_84 , * <S2SV_ModEnd> VAR_39 , VAR_31 <S2SV_ModStart> VAR_39 , VAR_31 ; const TYPE_8 * VAR_29 <S2SV_ModStart> VAR_84 = ( TYPE_8 <S2SV_ModEnd> * ) METHOD_1 <S2SV_ModStart> ( VAR_29 = <S2SV_ModEnd> VAR_16 , VAR_39 <S2SV_ModStart> VAR_27 > 0 && METHOD_11 ( * VAR_29 ) <S2SV_ModStart> if ( VAR_27 <= 1 || ! METHOD_11 ( * VAR_29 ) ) break ; <S2SV_ModEnd> VAR_27 -- ; <S2SV_ModStart> ++ ^ 0x20 <S2SV_ModEnd> ; } *
<S2SV_ModStart> 16 ; TYPE_18 VAR_183 [ 7 ] ; TYPE_18 * VAR_166 = & VAR_183 [ 3 <S2SV_ModEnd> ] ; TYPE_14
<S2SV_ModStart> -> VAR_14 ; METHOD_19 ( & VAR_30 -> VAR_53 , & VAR_52 <S2SV_ModEnd> -> VAR_53 ) <S2SV_ModStart> ) ; } METHOD_11 ( <S2SV_ModEnd> ) ; METHOD_13 <S2SV_ModStart> VAR_53 ) ; METHOD_18 ( & VAR_30 -> VAR_53 ) ;
<S2SV_ModStart> return VAR_12 ; VAR_12 = METHOD_6 ( VAR_12 <S2SV_ModEnd> ) ; METHOD_5
<S2SV_ModStart> TYPE_1 METHOD_0 ( TYPE_13 <S2SV_ModEnd> * VAR_24 , <S2SV_ModStart> VAR_25 ) { METHOD_9 ( & VAR_26 [ 0 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 1 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 2 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 3 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 4 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 5 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 6 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) ) ; METHOD_9 ( & VAR_26 [ 7 ] , <S2SV_ModEnd> ( VAR_24 + <S2SV_ModStart> * VAR_25 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ) ) ; if ( METHOD_27 ( METHOD_26 ( STRUCT_OR_UNION_8 ) <= 0 ) ) { if ( VAR_107 ) { METHOD_25 ( VAR_125 ) ; VAR_127 = 0 ; VAR_132 = - VAR_133 ; break ; } }
<S2SV_ModStart> VAR_207 . VAR_144 <S2SV_ModEnd> ) { continue
<S2SV_ModStart> ; TYPE_6 VAR_84 ; if ( VAR_77 -> VAR_70 > VAR_85 ) { return - 1 ; } VAR_84 <S2SV_ModStart> VAR_18 ) ; if ( VAR_82 == VAR_20 ) { return - 1 ; } <S2SV_ModEnd> } METHOD_6 (
<S2SV_ModStart> case VAR_56 : if ( ! <S2SV_ModStart> , VAR_58 ) ) goto VAR_64
<S2SV_ModStart> == VAR_141 && VAR_175 -> VAR_176 > VAR_106 && VAR_175 -> VAR_46 [ VAR_106 ] <S2SV_ModEnd> == VAR_143 )
<S2SV_ModStart> TYPE_6 VAR_34 ; TYPE_3 VAR_36 [ sizeof ( VAR_30 ) ] ; <S2SV_ModStart> - 1 ; ND_TCHECK_32BITS ( VAR_31 + 1 ) ; METHOD_7 ( VAR_32 , VAR_36 , sizeof ( VAR_36 ) , METHOD_8 ( VAR_31 + 1 ) ) ; <S2SV_ModStart> ( VAR_31 [ 5 <S2SV_ModEnd> ] , ( <S2SV_ModStart> & VAR_31 [ 5 <S2SV_ModEnd> ] , ( <S2SV_ModStart> , "origin<S2SV_blank>AS:<S2SV_blank>%s,<S2SV_blank>route<S2SV_blank>target<S2SV_blank>%s" , VAR_36 <S2SV_ModEnd> , METHOD_9 (
<S2SV_ModStart> ( unsigned VAR_7 , struct STRUCT_OR_UNION_2 * VAR_39 <S2SV_ModStart> TYPE_1 * VAR_29 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( METHOD_8 ( ! VAR_39 <S2SV_ModEnd> ) ) METHOD_9 <S2SV_ModStart> METHOD_10 ( VAR_34 , VAR_39
<S2SV_ModStart> TYPE_6 VAR_121 ; VAR_123 -> VAR_124 = 0 ; <S2SV_ModStart> ) ) { goto VAR_125 ; } if ( ! VAR_123 -> VAR_55 || ! VAR_123 -> VAR_59 ) { METHOD_19 ( "reference<S2SV_blank>grid<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto VAR_125 ; } if ( ! VAR_123 -> VAR_45 || ! VAR_123 -> VAR_47 ) { METHOD_19 ( "tile<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto VAR_125 ; } if ( ! VAR_123 -> VAR_68 || VAR_123 -> VAR_68 > 16384 ) { METHOD_19 ( "number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_21 >= VAR_123 -> VAR_55 ) { METHOD_19 ( "XOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_24 >= VAR_123 -> VAR_59 ) { METHOD_19 ( "YOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_53 > VAR_123 -> VAR_21 || VAR_123 -> VAR_53 + VAR_123 -> VAR_45 <= VAR_123 -> VAR_21 ) { METHOD_19 ( "XTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_57 > VAR_123 -> VAR_24 || VAR_123 -> VAR_57 + VAR_123 -> VAR_47 <= VAR_123 -> VAR_24 ) { METHOD_19 ( "YTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( ! ( VAR_123 -> VAR_124 = METHOD_12 ( VAR_123 -> VAR_68 , sizeof ( VAR_64 ) ) ) ) { goto VAR_125 ; } for ( VAR_119 = 0 ; VAR_119 < VAR_123 -> VAR_68 ; ++ VAR_119 ) { if ( METHOD_15 ( VAR_122 , & VAR_121 ) || METHOD_15 ( VAR_122 , & VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 ) || METHOD_15 ( VAR_122 , & VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 ) ) { goto VAR_125 ; } if ( VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 == 0 || VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 > 255 ) { METHOD_19 ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 == 0 || VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 > 255 ) { METHOD_19 ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 ) ; goto VAR_125 ; } VAR_123 -> VAR_124 [ VAR_119 ] . VAR_115 = ( VAR_121 >> 7 ) & 1 ; VAR_123 -> VAR_124 [ VAR_119 ] . VAR_120 = ( VAR_121 & 0x7f ) + 1 ; } if ( METHOD_21 ( VAR_122 ) ) { goto VAR_125 ; } return 0 ; VAR_125 : if ( VAR_123 -> VAR_124 ) { METHOD_22 ( VAR_123 -> VAR_124 ) ; } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_55 ) ; <S2SV_ModEnd> } } if <S2SV_ModStart> VAR_110 -> VAR_89 + sizeof ( TYPE_5 ) <S2SV_ModStart> ) ) { VAR_110 -> VAR_12 = 1 ; VAR_110 -> VAR_89 = METHOD_15 ( VAR_110 -> VAR_108 ) ; } else { VAR_110 -> VAR_99 = 1 ; } METHOD_17 ( "+++sctp_inq_pop+++<S2SV_blank>chunk:%p[%s],<S2SV_blank>length:%d,<S2SV_blank>skb->len:%d\\n" , VAR_110 , METHOD_18 ( METHOD_19 ( VAR_110 -> VAR_105 -> VAR_103 ) ) , METHOD_20 ( VAR_110 -> VAR_105 -> VAR_106 ) , VAR_110 -> VAR_108 -> VAR_109 ) ; return <S2SV_ModEnd> VAR_110 ; }
<S2SV_ModStart> - 2 ; if ( VAR_60 < 0 ) return 0 ;
<S2SV_ModStart> 1 ) { TYPE_19 * VAR_205 = VAR_185 ; <S2SV_ModStart> VAR_125 ) ; VAR_205 = METHOD_69 ( VAR_162 . VAR_163 , "%" , "%25" ) ; <S2SV_ModStart> , "%s<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>%s\\n" , VAR_205 <S2SV_ModEnd> , VAR_184 , <S2SV_ModStart> METHOD_30 ( VAR_95 ) ; METHOD_39 ( VAR_205
<S2SV_ModStart> . VAR_106 ) { continue ; } <S2SV_ModEnd> if ( VAR_108
<S2SV_ModStart> VAR_57 ) ; <S2SV_ModEnd> do { TYPE_8
<S2SV_ModStart> VAR_327 -> VAR_328 || <S2SV_ModEnd> VAR_325 -> VAR_219
<S2SV_ModStart> VAR_42 ) { METHOD_8 ( VAR_39 [ 0 ] ) ; <S2SV_ModStart> VAR_43 ; } METHOD_8 ( VAR_39 [ 3 ] ) ;
<S2SV_ModStart> , VAR_13 ) \\\n{ <S2SV_ModEnd> if ( VAR_570 <S2SV_ModStart> VAR_13 ) ; \\\n} <S2SV_ModEnd> TYPE_19 * VAR_582 <S2SV_ModStart> goto VAR_424 ; ( TYPE_85 ) METHOD_82 ( VAR_566 , 0 , ( TYPE_73 ) VAR_450 * sizeof ( * VAR_566 ) ) ;
<S2SV_ModStart> ) VAR_4 ; const TYPE_2 VAR_14 = VAR_15 ; <S2SV_ModStart> , "archive_write_data" ) ; if ( VAR_13 > VAR_14 ) VAR_13 = VAR_14
<S2SV_ModStart> VAR_266 ) { if ( VAR_266 -> VAR_226 + VAR_270 -> VAR_231 -> VAR_166 > VAR_275 - 2 || VAR_266 -> VAR_240 + VAR_270 -> VAR_231 -> VAR_166 > VAR_275 - 2 ) { return - 1 ; } <S2SV_ModStart> VAR_218 * ( METHOD_13 ( TYPE_13 , 1 ) << <S2SV_ModEnd> ( VAR_266 -> <S2SV_ModStart> VAR_232 * ( METHOD_13 ( TYPE_13 , 1 ) << <S2SV_ModEnd> ( VAR_266 -> <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_202 ) <S2SV_ModStart> VAR_215 % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_202 ) <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_212 ) <S2SV_ModStart> VAR_229 % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_212 )
<S2SV_ModStart> ; if ( METHOD_96 ( VAR_485 , VAR_483 ) == VAR_486 ) return - 1 ; if (
<S2SV_ModStart> TYPE_7 VAR_57 = VAR_55 ; TYPE_8 VAR_56 ; RLC_TRY { METHOD_1 ( VAR_56 ) ; METHOD_2 ( VAR_56 ) ; switch ( VAR_11 ) { case VAR_12 : case VAR_13 : case VAR_14 : METHOD_3 ( VAR_51 ) ; METHOD_6 ( VAR_51 , VAR_51 , 8 ) ; METHOD_5 ( VAR_51 , VAR_51 , VAR_47 ) ; METHOD_6 ( VAR_51 , VAR_51 , VAR_45 * 8 ) ; VAR_57 = VAR_7 <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_8 ( VAR_56 <S2SV_ModStart> ) ) { <S2SV_ModEnd> * VAR_53 = <S2SV_ModStart> if ( VAR_46 == <S2SV_ModEnd> VAR_47 ) { <S2SV_ModStart> { VAR_57 = VAR_7 <S2SV_ModEnd> ; } METHOD_10 <S2SV_ModStart> 8 ) ; }
<S2SV_ModStart> ! METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> VAR_50 ) { union { TYPE_2 VAR_53 <S2SV_ModEnd> [ VAR_26 + <S2SV_ModStart> ] ; TYPE_4 VAR_54 ; } VAR_48 ; TYPE_4 * VAR_23 = & VAR_48 . VAR_54 <S2SV_ModEnd> ; TYPE_6 * <S2SV_ModStart> ( & VAR_48 . VAR_53 <S2SV_ModStart> VAR_50 , VAR_48 . VAR_53
<S2SV_ModStart> + VAR_257 ; TYPE_36 VAR_266 = VAR_257 ; <S2SV_ModStart> < 1 || VAR_106 -> VAR_65 - VAR_266 < VAR_149 <S2SV_ModEnd> ) { METHOD_49 <S2SV_ModStart> ; } VAR_221 += VAR_149 ; VAR_266 <S2SV_ModStart> . VAR_220 ; VAR_266 += VAR_237 . VAR_220 ;
<S2SV_ModStart> != VAR_46 ) { METHOD_15 ( ) ; <S2SV_ModStart> goto VAR_37 ; } <S2SV_ModStart> ) ) ; METHOD_15 ( ) ;
<S2SV_ModStart> * VAR_74 ; if ( VAR_97 > sizeof ( VAR_93 -> VAR_37 ) - sizeof ( * VAR_51 ) - sizeof ( * VAR_68 ) ) return - VAR_98 ;
<S2SV_ModStart> VAR_73 ) ; if ( VAR_72 -> VAR_74 != VAR_54 )
<S2SV_ModStart> TYPE_4 VAR_34 ; TYPE_4 VAR_61 = 0 ; <S2SV_ModStart> VAR_27 , & VAR_61 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( VAR_34 = METHOD_5 ( VAR_26 , VAR_29 ) <S2SV_ModEnd> ; VAR_34 < <S2SV_ModStart> ; VAR_34 < VAR_61 <S2SV_ModEnd> ; VAR_34 +=
<S2SV_ModStart> VAR_82 ) { VAR_98 <S2SV_ModEnd> ; } switch
<S2SV_ModStart> TYPE_3 VAR_38 ; struct STRUCT_OR_UNION_1 VAR_44 , VAR_45 ; const struct STRUCT_OR_UNION_2 * VAR_46 = VAR_43 -> VAR_46 ; TYPE_3 METHOD_7 = VAR_43 -> VAR_46 -> METHOD_7 ( VAR_43 ) ; VAR_42 = VAR_43 -> VAR_24 ; VAR_46 -> METHOD_8 ( VAR_43 , & VAR_33 , & VAR_44 , VAR_47 <S2SV_ModEnd> , VAR_19 ) <S2SV_ModStart> , VAR_19 ) <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> 2 ) ; VAR_38 = METHOD_9 <S2SV_ModEnd> ( VAR_43 , <S2SV_ModStart> VAR_18 , VAR_19 , METHOD_7 , VAR_48 , & VAR_45 ) ; if ( VAR_38 != VAR_37 <S2SV_ModEnd> ) return VAR_37 <S2SV_ModStart> return VAR_37 ; VAR_38 = METHOD_10 ( VAR_43 , VAR_43 -> VAR_40 . VAR_41 , VAR_45 . VAR_49 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; VAR_43 -> VAR_40 . VAR_41 = VAR_33 ; VAR_38 = METHOD_6 ( VAR_43 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; VAR_43 -> VAR_40 . VAR_41 = VAR_42 ; VAR_38 = METHOD_6 ( VAR_43 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; return VAR_38 ; VAR_50 : VAR_46 -> METHOD_11 ( VAR_43 , VAR_33 , & VAR_44 , 0 , VAR_19 ) ; return VAR_38 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_43 ) { TYPE_3 <S2SV_ModEnd> VAR_43 = VAR_59 <S2SV_ModStart> * 2 ; TYPE_10 *
<S2SV_ModStart> ( VAR_177 ) { if ( VAR_137 + VAR_181 + VAR_180 >= VAR_179 ) { VAR_184 = VAR_185 ; return VAR_184 ; } <S2SV_ModStart> VAR_180 ) ; }
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> if ( VAR_84 >= <S2SV_ModEnd> VAR_82 -> VAR_16
<S2SV_ModStart> ! VAR_173 ) { if ( VAR_194 -> VAR_183 > 1024 ) { TYPE_10 * VAR_196 = VAR_194 -> VAR_191 ; while ( * VAR_196 == '<S2SV_blank>' ) { ++ VAR_196 ; } if ( METHOD_24 ( VAR_196 , "get<S2SV_blank>" ) && METHOD_24 ( VAR_196 , "gets<S2SV_blank>" ) ) { METHOD_16 ( VAR_194 , VAR_118 ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> VAR_189 = VAR_173
<S2SV_ModStart> return VAR_31 ; if ( ! METHOD_4 ( VAR_7 ) ) return VAR_31 ;
<S2SV_ModStart> -> VAR_42 -> VAR_45 , VAR_40 -> VAR_42 ->
<S2SV_ModStart> ; if ( METHOD_26 <S2SV_ModEnd> ( VAR_69 , <S2SV_ModStart> , & VAR_13 , & VAR_87 ) < 0 ) { return 1 ; } if ( VAR_87 == VAR_72 ) { PyErr_SetString ( VAR_79 , "required<S2SV_blank>field<S2SV_blank>\\"arg\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arg" ) ; return 1 ; } else { TYPE_26 TYPE_29 ; TYPE_29 = METHOD_4 ( VAR_87 , & METHOD_24 , VAR_85 ) ; if ( TYPE_29 != 0 <S2SV_ModEnd> ) goto VAR_86 <S2SV_ModStart> goto VAR_86 ; METHOD_22 ( VAR_87 ) ; } if ( METHOD_26 ( VAR_69 , & VAR_26 , & VAR_87 ) < 0 ) { return 1 ; } if ( VAR_87 == VAR_72 || VAR_87 == VAR_88 ) { METHOD_22 ( VAR_87 ) ; VAR_81 = VAR_72 ; } else { TYPE_26 TYPE_29 ; TYPE_29 = METHOD_9 ( VAR_87 , & VAR_81 <S2SV_ModEnd> , VAR_85 ) <S2SV_ModStart> ) ; } if ( METHOD_26 ( VAR_69 , & VAR_41 , & VAR_87 ) < 0 ) { return 1 ; } if ( VAR_87 == VAR_72 || VAR_87 == VAR_88 ) { METHOD_22 ( VAR_87 ) ; VAR_82 = VAR_72 ; } else { TYPE_26 TYPE_29 ; TYPE_29 = METHOD_13 ( VAR_87 , & VAR_82 , VAR_85 ) ; if ( TYPE_29 != 0 <S2SV_ModEnd> ) goto VAR_86 <S2SV_ModStart> goto VAR_86 ; METHOD_22 ( VAR_87 ) ; } if ( METHOD_26 ( VAR_69 , & VAR_56 , & VAR_87 ) < 0 ) { return 1 ; } if ( VAR_87 == VAR_72 ) { PyErr_SetString ( VAR_79 , "required<S2SV_blank>field<S2SV_blank>\\"lineno\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arg" ) ; return 1 ; } else { TYPE_26 TYPE_29 ; TYPE_29 = METHOD_21 ( VAR_87 , & VAR_83 <S2SV_ModEnd> , VAR_85 ) <S2SV_ModStart> ) ; } if ( METHOD_26 ( VAR_69 , & VAR_70 , & VAR_87 ) < 0 ) { return 1 ; } if ( VAR_87 == VAR_72 ) { PyErr_SetString ( VAR_79 , "required<S2SV_blank>field<S2SV_blank>\\"col_offset\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>arg" ) ; return 1 ; } else { TYPE_26 TYPE_29 ; TYPE_29 = METHOD_21 ( VAR_87 , & VAR_84 , VAR_85 ) ; if ( TYPE_29 != 0 <S2SV_ModEnd> ) goto VAR_86 <S2SV_ModStart> goto VAR_86 ; METHOD_22 ( VAR_87 ) <S2SV_ModEnd> ; } *
<S2SV_ModStart> * VAR_43 ; unsigned
<S2SV_ModStart> , VAR_64 -> VAR_66 , VAR_64 ->
<S2SV_ModStart> VAR_32 ) ; if ( VAR_32 . VAR_33 < 8 ) { METHOD_21 ( "ERROR:<S2SV_blank>Input<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>contain<S2SV_blank>valid<S2SV_blank>plist<S2SV_blank>data.\\n" ) ; return - 1 ; }
<S2SV_ModStart> = VAR_7 ; <S2SV_ModEnd> METHOD_2 ( "GsmXSMPClient:<S2SV_blank>Initializing<S2SV_blank>client<S2SV_blank>%s"
<S2SV_ModStart> = VAR_31 ; METHOD_5 <S2SV_ModEnd> ( VAR_26 ,
<S2SV_ModStart> = VAR_53 -> VAR_84 <S2SV_ModEnd> ; const TYPE_11 <S2SV_ModStart> = VAR_53 -> VAR_88 <S2SV_ModEnd> ; const TYPE_12 <S2SV_ModStart> * VAR_100 = VAR_96 <S2SV_ModEnd> -> VAR_46 ; <S2SV_ModStart> -> VAR_46 ; METHOD_7 <S2SV_ModEnd> ( VAR_101 , <S2SV_ModStart> ) ) ; METHOD_7 <S2SV_ModEnd> ( VAR_103 , <S2SV_ModStart> VAR_140 ) { TYPE_27 <S2SV_ModEnd> VAR_147 = VAR_66 <S2SV_ModStart> ) { const TYPE_27 <S2SV_ModEnd> VAR_93 = METHOD_3 <S2SV_ModStart> ) ; const TYPE_27 <S2SV_ModEnd> VAR_94 = METHOD_4 <S2SV_ModStart> ; VAR_100 = VAR_96 -> VAR_92 [ VAR_93 ] [ VAR_94 ] ; } VAR_116 = METHOD_5 ( VAR_96 , VAR_165 , VAR_104 , VAR_102 <S2SV_ModEnd> , & VAR_147
<S2SV_ModStart> 0 ) ; if ( METHOD_6 ( VAR_112 -> VAR_113 ) ) { VAR_116 = VAR_117 ; goto VAR_111 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_1 METHOD_0 (
<S2SV_ModStart> VAR_36 < 10 || VAR_79
<S2SV_ModStart> ; if ( METHOD_37 ( VAR_200 , 0 ) == METHOD_37 ( VAR_205 , 0 ) <S2SV_ModEnd> ) return 0
<S2SV_ModStart> "(cc0%rowsize)!=0" ) ; METHOD_10 ( VAR_59 ) ;
<S2SV_ModStart> VAR_1 ) { METHOD_2 ( & VAR_25 ) ; METHOD_7 ( <S2SV_ModEnd> VAR_3 -> VAR_4 <S2SV_ModStart> VAR_3 -> VAR_4 ) ; <S2SV_ModEnd> METHOD_6 ( & <S2SV_ModStart> METHOD_6 ( & VAR_25 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> VAR_401 < 4 <S2SV_ModStart> VAR_401 < 4 && VAR_408 -> VAR_396 [ VAR_401 ] && VAR_408 -> VAR_112 [ VAR_401 ]
<S2SV_ModStart> VAR_5 ) , 0 ,
<S2SV_ModStart> ) ) { return <S2SV_ModStart> VAR_24 ) ; <S2SV_ModEnd> } else return
<S2SV_ModStart> VAR_63 ; } if ( VAR_55 -> VAR_39 == VAR_66 && VAR_55 -> VAR_67 & 0x7 ) { METHOD_17 ( VAR_58 , VAR_68 ) ; goto VAR_63 ; }
<S2SV_ModStart> . VAR_27 = VAR_44 <S2SV_ModEnd> , . VAR_42 <S2SV_ModStart> ; TYPE_4 VAR_35 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_392 -> VAR_190 == ( VAR_75 | VAR_397 | VAR_82 ) || VAR_392 -> VAR_190 == ( VAR_75 | VAR_398 | VAR_82 ) ) { const TYPE_19 VAR_399 = VAR_75 | VAR_397 | VAR_82 ; const TYPE_19 VAR_400 = VAR_75 | VAR_398 | VAR_82 ; struct STRUCT_OR_UNION_11 VAR_289 [ 16 ] ; struct STRUCT_OR_UNION_11 * VAR_401 = & VAR_289 [ 0 ] ; TYPE_3 VAR_402 , VAR_403 ; TYPE_20 VAR_404 <S2SV_ModEnd> ; VAR_267 = <S2SV_ModStart> if ( ! VAR_267 -> alu_state <S2SV_ModEnd> ) continue ; <S2SV_ModStart> ) continue ; VAR_403 = VAR_267 -> alu_state & BPF_ALU_NEG_VALUE ; VAR_402 = ( VAR_267 -> alu_state & BPF_ALU_SANITIZE ) == BPF_ALU_SANITIZE_SRC ; VAR_404 = VAR_402 ? VAR_392 -> VAR_157 : VAR_392 -> VAR_60 ; if ( VAR_403 ) * VAR_401 ++ = BPF_ALU64_IMM ( BPF_MUL , VAR_404 , - 1 ) ; * VAR_401 ++ = BPF_MOV32_IMM ( BPF_REG_AX , VAR_267 -> alu_limit - 1 ) ; * VAR_401 ++ = BPF_ALU64_REG ( VAR_398 , BPF_REG_AX , VAR_404 ) ; * VAR_401 ++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , VAR_404 ) ; * VAR_401 ++ = BPF_ALU64_IMM ( BPF_NEG , BPF_REG_AX , 0 ) ; * VAR_401 ++ = BPF_ALU64_IMM ( BPF_ARSH , BPF_REG_AX , 63 ) ; if ( VAR_402 ) { * VAR_401 ++ = BPF_ALU64_REG ( VAR_211 , BPF_REG_AX , VAR_404 ) ; VAR_392 -> VAR_157 = BPF_REG_AX ; } else { * VAR_401 ++ = BPF_ALU64_REG ( VAR_211 , VAR_404 , BPF_REG_AX ) ; } if ( VAR_403 ) VAR_392 -> VAR_190 = VAR_392 -> VAR_190 == VAR_399 ? VAR_400 : VAR_399 ; * VAR_401 ++ = * VAR_392 ; if ( VAR_402 && VAR_403 ) * VAR_401 ++ = BPF_ALU64_IMM ( BPF_MUL , VAR_404 , - 1 ) ; VAR_294 = VAR_401 - VAR_289 <S2SV_ModEnd> ; VAR_300 = <S2SV_ModStart> } if ( VAR_392 -> VAR_190 != ( VAR_191 | VAR_155 ) ) continue ; if ( VAR_392 -> VAR_157 == VAR_158 ) continue ; if ( VAR_392 -> VAR_393 == VAR_161 ) VAR_383 -> VAR_163 = 1 ; if ( VAR_392 -> VAR_393 == VAR_166 ) METHOD_18 ( ) ; if ( VAR_392 -> VAR_393 == VAR_169 ) VAR_383 -> VAR_171 = 1 ; if ( VAR_392 -> VAR_393 == VAR_174 ) { VAR_383 -> VAR_176 = 1 ; VAR_386 -> VAR_383 -> VAR_267 -> VAR_180 = VAR_181 ; VAR_386 -> VAR_383 -> VAR_267 -> VAR_185 = VAR_186 ; VAR_392 -> VAR_393 = 0 ; VAR_392 -> VAR_190 = VAR_191 | VAR_192 ; <S2SV_ModEnd> VAR_267 = & <S2SV_ModStart> ; if ( ! METHOD_19 ( VAR_267 ) ) continue ; if ( <S2SV_ModStart> VAR_267 ) ) { METHOD_51 ( VAR_386 , "tail_call<S2SV_blank>abusing<S2SV_blank>map_ptr\\n" ) ; return - VAR_284 ; } <S2SV_ModEnd> VAR_278 = METHOD_26 <S2SV_ModStart> VAR_268 ) ; VAR_289 [ 0 ] = METHOD_23 ( VAR_206 , VAR_212 , VAR_278 -> VAR_209 , 2 ) ; VAR_289 [ 1 ] = BPF_ALU32_IMM ( VAR_211 , VAR_212 , container_of <S2SV_ModEnd> ( VAR_278 , <S2SV_ModStart> ( VAR_278 , struct VAR_214 , VAR_334 ) -> index_mask ) ; VAR_289 [ 2 ] = * VAR_392 ; VAR_294 = 3 ; <S2SV_ModEnd> VAR_300 = METHOD_31 <S2SV_ModStart> continue ; } if ( VAR_383 -> VAR_239 && VAR_240 == 64 && ( VAR_392 -> VAR_393 == VAR_339 || VAR_392 -> VAR_393 == VAR_345 || VAR_392 -> VAR_393 == VAR_351 || VAR_392 -> VAR_393 == VAR_357 || VAR_392 -> VAR_393 == VAR_363 || VAR_392 -> VAR_393 == VAR_369 ) ) { VAR_267 = & VAR_386 -> VAR_261 [ VAR_302 + VAR_303 ] ; if ( METHOD_25 ( VAR_267 ) ) goto VAR_376 ; VAR_278 = METHOD_26 ( VAR_267 -> VAR_268 ) ; VAR_379 = VAR_278 -> VAR_379 ; if ( VAR_392 -> VAR_393 == VAR_339 && VAR_379 -> METHOD_28 ) { VAR_294 = VAR_379 -> METHOD_28 ( VAR_278 , VAR_289 ) ; if ( VAR_294 == 0 || VAR_294 >= METHOD_29 ( VAR_289 ) ) { METHOD_51 ( VAR_386 , "bpf<S2SV_blank>verifier<S2SV_blank>is<S2SV_blank>misconfigured\\n" ) ; return - VAR_284 ; } VAR_300 = METHOD_31 ( VAR_386 , VAR_302 + VAR_303 , VAR_289 , VAR_294 ) ; if ( ! VAR_300 ) return - VAR_292 ; VAR_303 += VAR_294 - 1 ; VAR_386 -> VAR_383 = VAR_383 = VAR_300 ; VAR_392 = VAR_300 -> VAR_301 + VAR_302 + VAR_303 ; continue ; }
<S2SV_ModStart> TYPE_6 VAR_37 ; METHOD_15 ( ( TYPE_7 * ) & VAR_20 , 0 , sizeof ( VAR_20 ) ) ;
<S2SV_ModStart> VAR_23 ) { TYPE_4 VAR_25 ; <S2SV_ModStart> ( VAR_21 , VAR_25 ) ; * VAR_20 = VAR_25 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( VAR_25 <S2SV_ModEnd> == 0x8000 ) <S2SV_ModStart> 0x8000 ) { if ( ! <S2SV_ModStart> , VAR_19 ) ) return VAR_16 <S2SV_ModStart> if ( ( VAR_25 < 4 ) || ( ( VAR_25 <S2SV_ModEnd> - 2 ) <S2SV_ModStart> METHOD_4 ( VAR_21 ) <S2SV_ModStart> ; if ( VAR_25 <S2SV_ModEnd> > 4 )
<S2SV_ModStart> ; VAR_62 = METHOD_22 ( <S2SV_ModStart> , & VAR_61 ) <S2SV_ModStart> } VAR_62 = METHOD_22 ( <S2SV_ModStart> ) & VAR_61 ) <S2SV_ModStart> ; VAR_62 = METHOD_22 ( <S2SV_ModStart> & VAR_61 ) )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> * VAR_3 >= 18 <S2SV_ModEnd> && VAR_11 [
<S2SV_ModStart> VAR_42 [ VAR_44 ++ ] ; VAR_284 = ( 1U << METHOD_2 ( VAR_49 ) ) >> 1 ; if ( VAR_44 + VAR_284 > VAR_26 ) { METHOD_43 ( VAR_280 , "Not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>(need<S2SV_blank>%d,<S2SV_blank>have<S2SV_blank>%d)\\n" , VAR_44 + VAR_284 , VAR_26 ) ; break ; } <S2SV_ModEnd> switch ( VAR_284 <S2SV_ModStart> break ; case 4 : <S2SV_ModEnd> VAR_285 = METHOD_4
<S2SV_ModStart> VAR_27 ; } if ( * VAR_38 & VAR_39 ) { VAR_34 -> VAR_40 = 1 ; }
<S2SV_ModStart> * VAR_43 , TYPE_11 VAR_41 , TYPE_11 VAR_47 , TYPE_11 VAR_48 <S2SV_ModEnd> , TYPE_11 VAR_46 <S2SV_ModStart> VAR_46 ) { <S2SV_ModEnd> TYPE_11 VAR_45 , <S2SV_ModStart> ; VAR_42 < VAR_48 <S2SV_ModEnd> ; VAR_42 ++ <S2SV_ModStart> ; VAR_45 < VAR_47 <S2SV_ModEnd> ; VAR_45 ++ <S2SV_ModStart> ) VAR_43 -> VAR_49 <S2SV_ModEnd> [ VAR_41 +
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_18 -> VAR_60 == VAR_61 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> VAR_25 ) ; mark_key_instantiated ( STRUCT_OR_UNION_18 , - VAR_27 <S2SV_ModEnd> ) ; VAR_34
<S2SV_ModStart> VAR_11 ) { <S2SV_ModEnd> VAR_9 -> VAR_8 <S2SV_ModStart> VAR_9 -> VAR_8 . ptr [ <S2SV_ModEnd> VAR_9 -> VAR_8 <S2SV_ModStart> VAR_9 -> VAR_8 . indx <S2SV_ModEnd> ++ ] =
<S2SV_ModStart> ; VAR_61 += METHOD_2 <S2SV_ModEnd> ( VAR_55 +
<S2SV_ModStart> -> VAR_97 . VAR_121 <S2SV_ModEnd> = 0 ;
<S2SV_ModStart> VAR_10 * VAR_17 ; struct STRUCT_OR_UNION_6 * VAR_21 = METHOD_7 ( STRUCT_OR_UNION_5 ) ; unsigned TYPE_3 VAR_22 <S2SV_ModStart> METHOD_4 ( & VAR_21 <S2SV_ModEnd> -> VAR_8 ) <S2SV_ModStart> STRUCT_OR_UNION_5 ) ; METHOD_10 ( & VAR_21 -> VAR_23 , VAR_22 ) ; <S2SV_ModStart> METHOD_4 ( & VAR_21 <S2SV_ModEnd> -> VAR_8 ) <S2SV_ModStart> = METHOD_6 ( VAR_21 <S2SV_ModEnd> -> VAR_8 . <S2SV_ModStart> VAR_18 ) ; METHOD_11 ( & VAR_21 -> VAR_23 , VAR_22 ) ; <S2SV_ModStart> METHOD_8 ( VAR_17 ) ; METHOD_10 ( & VAR_21 -> VAR_23 , VAR_22 <S2SV_ModStart> ) ; } METHOD_11 ( & VAR_21 -> VAR_23 , VAR_22 ) ;
<S2SV_ModStart> * * VAR_18 , TYPE_4 VAR_26 <S2SV_ModStart> VAR_25 < 2 || VAR_24 -> VAR_25 > VAR_23 <S2SV_ModStart> VAR_16 == VAR_17 && VAR_24 -> VAR_25 >= VAR_26
<S2SV_ModStart> VAR_95 ) ; { TYPE_5 VAR_101 = METHOD_24 <S2SV_ModEnd> ( VAR_88 , <S2SV_ModStart> ( VAR_88 , sizeof ( VAR_88 ) , <S2SV_ModStart> 2 ] , VAR_97 ) ; if ( VAR_101 >= sizeof ( VAR_88 ) ) { METHOD_22 ( VAR_87 , "maximum<S2SV_blank>length<S2SV_blank>of<S2SV_blank>output<S2SV_blank>prefix<S2SV_blank>exceeded\\n" ) ; METHOD_20 ( VAR_94 ) ; return 1 ; } } <S2SV_ModEnd> VAR_93 = METHOD_16 <S2SV_ModStart> "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing\\n" , VAR_88 ) ; METHOD_20 ( VAR_94
<S2SV_ModStart> TYPE_12 VAR_76 ; <S2SV_ModEnd> METHOD_7 ( VAR_76 <S2SV_ModStart> - 1 ; if ( VAR_82 + VAR_76 > VAR_59 ) return - 1 ;
<S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 , <S2SV_ModStart> ( METHOD_13 ( VAR_24 ,
<S2SV_ModStart> VAR_50 ; } if ( VAR_128 != 0 && VAR_179 > 10000000 / VAR_128 / VAR_176 ) { TYPE_32 VAR_234 ; TYPE_33 VAR_235 = ( TYPE_33 ) VAR_179 * VAR_128 * VAR_176 ; TYPE_34 VAR_236 = METHOD_39 ( VAR_232 ) ; if ( VAR_235 > ( TYPE_33 ) VAR_237 ) { VAR_235 = ( TYPE_33 ) VAR_237 ; } METHOD_40 ( VAR_232 , ( TYPE_34 ) VAR_235 - 1 , VAR_238 ) ; if ( METHOD_33 ( & VAR_234 , 1 , 1 , VAR_232 ) != 1 ) { METHOD_38 ( VAR_232 ) ; return VAR_208 ; } METHOD_40 ( VAR_232 , VAR_236 , VAR_238 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_8 ; METHOD_2 <S2SV_ModEnd> ( VAR_8 . <S2SV_ModStart> . VAR_4 , "compression" , sizeof ( VAR_8 . VAR_4 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> -> VAR_10 ; <S2SV_ModEnd> TYPE_4 VAR_31 ; <S2SV_ModStart> TYPE_4 VAR_31 ; mutex_lock <S2SV_ModEnd> ( & VAR_32 <S2SV_ModStart> VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; VAR_25 <S2SV_ModStart> VAR_31 ) ; METHOD_6 <S2SV_ModEnd> ( & VAR_32 <S2SV_ModStart> VAR_32 -> VAR_33 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_68 = METHOD_8 <S2SV_ModEnd> ( * (
<S2SV_ModStart> * VAR_4 , TYPE_6 <S2SV_ModEnd> VAR_20 ) { <S2SV_ModStart> VAR_20 ) { TYPE_6 <S2SV_ModEnd> VAR_21 = METHOD_1
<S2SV_ModStart> * VAR_137 ; <S2SV_ModEnd> } * VAR_135 <S2SV_ModStart> VAR_127 ) ; <S2SV_ModEnd> for ( VAR_127
<S2SV_ModStart> METHOD_2 ( VAR_3 -> VAR_4 ) ; METHOD_2 ( VAR_3
<S2SV_ModStart> ) { return VAR_21 <S2SV_ModEnd> ; } while
<S2SV_ModStart> ] <= VAR_111 && VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 <S2SV_ModStart> && VAR_131 -> VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 && VAR_131 -> <S2SV_ModStart> <= VAR_111 && VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 &&
<S2SV_ModStart> if ( TYPE_32 > <S2SV_ModEnd> sizeof ( *
<S2SV_ModStart> VAR_5 ) ; TYPE_2 VAR_33 = STRUCT_OR_UNION_26 -> VAR_33 ; <S2SV_ModStart> ; if ( VAR_33 == VAR_34 && <S2SV_ModEnd> STRUCT_OR_UNION_26 -> VAR_12 <S2SV_ModStart> ; if ( VAR_33 != VAR_35 <S2SV_ModEnd> ) METHOD_15 (
<S2SV_ModStart> VAR_16 ) ) { METHOD_5 ( VAR_19 ) ; <S2SV_ModStart> - 1 ; }
<S2SV_ModStart> VAR_9 ] ; if ( VAR_13 == VAR_11 ) { METHOD_3 ( "%s:<S2SV_blank>pci<S2SV_blank>[%s]<S2SV_blank>has<S2SV_blank>wrong<S2SV_blank>bus<S2SV_blank>%d<S2SV_blank>info!\\n" , VAR_47 , VAR_44 -> VAR_48 , VAR_44 -> VAR_9 ) ; return ; } <S2SV_ModEnd> VAR_36 = &
<S2SV_ModStart> } if ( METHOD_13 ( VAR_32 -> VAR_33 , VAR_34 , "none" , VAR_31 , 0 , VAR_9 -> METHOD_10 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> ( 2 * VAR_142 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; } } METHOD_8 ( VAR_142 >= VAR_126 ) ;
<S2SV_ModStart> const TYPE_1 * VAR_39 ) { const TYPE_1 * VAR_40 ; <S2SV_ModEnd> TYPE_12 * * <S2SV_ModStart> VAR_37 ; TYPE_5 VAR_32 , <S2SV_ModStart> ) ) ; VAR_32 = VAR_39 -> VAR_32 ; for ( VAR_40 = VAR_39 ; VAR_40 != ( TYPE_1 * ) VAR_27 ; VAR_40 = VAR_40 -> VAR_40 ) VAR_32 = METHOD_7 ( VAR_40 -> VAR_32 , VAR_32 ) ; for ( <S2SV_ModEnd> VAR_36 = 0 <S2SV_ModStart> ) METHOD_4 ( <S2SV_ModEnd> VAR_32 , sizeof <S2SV_ModStart> ( TYPE_13 ) <S2SV_ModEnd> VAR_32 ; VAR_37 <S2SV_ModStart> ) METHOD_6 ( VAR_39 <S2SV_ModEnd> , & VAR_38
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if ( ! <S2SV_ModStart> , VAR_9 ) ) return 0 <S2SV_ModStart> VAR_11 ) ; return 1 ;
<S2SV_ModStart> 0 ) ; METHOD_2 ( & VAR_4 -> VAR_6 ) ;
<S2SV_ModStart> : if ( VAR_76 >= VAR_74 -> VAR_55 ) { METHOD_12 ( "REC<S2SV_blank>value<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>NUM<S2SV_blank>value<S2SV_blank>(%d)" , VAR_76 , VAR_74 -> VAR_55 ) ; return VAR_66 ; } if (
<S2SV_ModStart> TYPE_0 METHOD_0 ( const TYPE_6 * VAR_93 , const TYPE_7 * VAR_90 , <S2SV_ModEnd> TYPE_15 VAR_15 , <S2SV_ModStart> * VAR_108 , TYPE_16 <S2SV_ModEnd> * VAR_37 ) <S2SV_ModStart> VAR_37 ) { TYPE_15 VAR_17 = segfeature_active ( & VAR_93 -> VAR_14 , VAR_15 , VAR_16 ) ; if ( VAR_17 ) { METHOD_21 <S2SV_ModEnd> ( VAR_83 , <S2SV_ModStart> ) ) ; METHOD_21 <S2SV_ModEnd> ( VAR_108 , <S2SV_ModStart> } else { TYPE_16 <S2SV_ModEnd> VAR_92 = METHOD_4 <S2SV_ModStart> VAR_90 ) ; TYPE_16 <S2SV_ModEnd> VAR_97 = 128 <S2SV_ModStart> VAR_43 ) { TYPE_16 <S2SV_ModEnd> VAR_72 = METHOD_7 <S2SV_ModStart> VAR_90 ) ; TYPE_16 <S2SV_ModEnd> VAR_78 = METHOD_8 <S2SV_ModStart> VAR_87 ) { TYPE_16 <S2SV_ModEnd> VAR_105 = METHOD_16
<S2SV_ModStart> VAR_256 -> VAR_66 <= 0 ) { VAR_256 -> VAR_66 = 0 ; goto VAR_238 ; } <S2SV_ModEnd> VAR_256 -> VAR_235 <S2SV_ModStart> ; else { METHOD_37 ( VAR_73 <= VAR_256 -> VAR_66 ) ;
<S2SV_ModStart> ! VAR_284 ) { METHOD_40 ( <S2SV_ModEnd> VAR_343 [ 0 <S2SV_ModStart> 0 ] ) ; METHOD_83 ( ( VAR_348 , "<S2SV_blank>c<S2SV_blank>%04x" , METHOD_43 ( & VAR_343 [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case
<S2SV_ModStart> VAR_18 ) { TYPE_0 VAR_41 = METHOD_12 ( STRUCT_OR_UNION_9 , VAR_18 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! F2FS_I ( STRUCT_OR_UNION_9 ) -> STRUCT_OR_UNION_5 ) set_inode_flag ( STRUCT_OR_UNION_9 , FI_NO_EXTENT <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_41 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_12 METHOD_177 \\\n{ <S2SV_ModEnd> VAR_219 = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct STRUCT_OR_UNION_9 <S2SV_ModStart> VAR_248 METHOD_177 ; for ( VAR_107 = 0 ; VAR_107 < VAR_246 ; VAR_107 ++ METHOD_177 VAR_245 [ VAR_107 ] = ( STRUCT_OR_UNION_9 * METHOD_177 METHOD_175 ( VAR_245 [ VAR_107 ] METHOD_177 ; <S2SV_ModStart> METHOD_175 ( VAR_248 METHOD_177 ; for ( VAR_107 = 0 ; VAR_107 <= VAR_246 ; VAR_107 ++ METHOD_177 VAR_245 [ VAR_107 ] = ( STRUCT_OR_UNION_9 * METHOD_177 METHOD_175 ( VAR_245 [ VAR_107 ]
<S2SV_ModStart> TYPE_8 VAR_25 [ 10 <S2SV_ModEnd> ] ; if <S2SV_ModStart> VAR_25 ; } if ( VAR_51 < 1 ) return VAR_85 ; <S2SV_ModStart> ; if ( METHOD_15 ( & VAR_89 ) ) { if ( VAR_83 > <S2SV_ModEnd> 2 && VAR_51 <S2SV_ModStart> 2 && VAR_51 < 2 ) return VAR_85 ; <S2SV_ModEnd> METHOD_8 ( & <S2SV_ModStart> if ( VAR_51 < 10 <S2SV_ModEnd> ) return VAR_85
<S2SV_ModStart> TYPE_3 VAR_26 ; struct STRUCT_OR_UNION_3 VAR_28 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> 0 ) ; TYPE_4 VAR_30 = VAR_27 -> VAR_21 -> VAR_15 ; <S2SV_ModStart> ++ ) { TYPE_5 VAR_31 = <S2SV_ModEnd> VAR_26 * sizeof <S2SV_ModStart> struct STRUCT_OR_UNION_3 ) ; TYPE_3 VAR_32 = METHOD_4 ( VAR_27 -> VAR_6 , VAR_30 + VAR_31 , ( TYPE_2 * ) & VAR_28 , sizeof ( struct STRUCT_OR_UNION_3 <S2SV_ModStart> ) ) ; if ( VAR_32 ) { <S2SV_ModStart> ( VAR_27 , & <S2SV_ModStart> VAR_28 ) ; }
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> return VAR_78 ; if ( strchr ( VAR_27 , '\\'' ) || strchr ( VAR_27 , '\\\\' ) ) { msSetError ( MS_MISCERR , "Invalid<S2SV_blank>time<S2SV_blank>filter." , "msPostGISLayerSetTimeFilter()" ) ; return VAR_78 ; }
<S2SV_ModStart> VAR_38 . VAR_39 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> 24 ) ; METHOD_9 ( VAR_37 -> VAR_43 , & <S2SV_ModEnd> VAR_37 -> VAR_38 <S2SV_ModStart> . VAR_39 -> VAR_44 , & VAR_41 , sizeof ( TYPE_4 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_12 * VAR_169 ; METHOD_4 ( VAR_34 > 0 )
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_78 = VAR_81 , * VAR_83 = VAR_81 ; for ( ; ; ) { <S2SV_ModEnd> VAR_78 = METHOD_2 <S2SV_ModStart> ( VAR_30 ) ; VAR_83 = METHOD_22 ( VAR_30 ) ; if ( VAR_78 || VAR_83 || <S2SV_ModEnd> VAR_36 . VAR_29 <S2SV_ModStart> VAR_36 . VAR_29 ) break ; <S2SV_ModEnd> VAR_30 ++ ; <S2SV_ModStart> = 49152 ; METHOD_23 ( "Access<S2SV_blank>to<S2SV_blank>desired<S2SV_blank>port<S2SV_blank>failed,<S2SV_blank>trying<S2SV_blank>alternative<S2SV_blank>port<S2SV_blank>%d" , VAR_30 ) ; } if ( VAR_78 == VAR_81 && VAR_83 <S2SV_ModEnd> == VAR_81 ) <S2SV_ModStart> ; TYPE_3 VAR_33 ; if ( VAR_78 ) VAR_33 <S2SV_ModStart> METHOD_3 ( VAR_78 ) ; else VAR_33 = METHOD_3 ( VAR_83 <S2SV_ModStart> VAR_34 ) ; METHOD_23 ( "Port:<S2SV_blank>%d,<S2SV_blank>IPv4<S2SV_blank>%savailable,<S2SV_blank>IPv6<S2SV_blank>%savailable" , VAR_33 , VAR_78 ? "" : "not<S2SV_blank>" , VAR_83 ? "" : "not<S2SV_blank>" ) ; <S2SV_ModStart> -> VAR_73 = METHOD_24 ( VAR_78 , VAR_83 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_78 ) ; if ( VAR_83 != VAR_81 ) METHOD_20 ( VAR_83 ) ;
<S2SV_ModStart> static TYPE_2 VAR_25 = 0 <S2SV_ModStart> ( VAR_21 = 0 ; VAR_21 < VAR_26 ; ++ VAR_21 ) if ( METHOD_2 ( VAR_21 ) <S2SV_ModEnd> ) VAR_23 [
<S2SV_ModStart> VAR_61 , VAR_10 ) ; METHOD_5 ( VAR_58 != VAR_53 <S2SV_ModStart> VAR_51 ] ; METHOD_9 <S2SV_ModEnd> ( VAR_55 -> <S2SV_ModStart> ) ; } METHOD_10 <S2SV_ModEnd> ( ) ;
<S2SV_ModStart> VAR_47 ) ; if ( VAR_180 -> VAR_181 . VAR_52 < 1 ) { METHOD_32 ( & VAR_174 -> VAR_188 , "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n" ) ; VAR_189 = - VAR_190 ; goto VAR_187 ; }
<S2SV_ModStart> VAR_14 , "Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol" ) ; return 0 ; } if ( * VAR_121 [ 1 ] == ':' || METHOD_23 ( VAR_121 [ 1 ] , '<S2SV_blank>' ) ) { METHOD_3 ( VAR_14 , VAR_14 , VAR_14 , "Malformed<S2SV_blank>AUTHENTICATE"
<S2SV_ModStart> ) VAR_1034 ; switch ( VAR_1008 ) { case VAR_974 : if ( VAR_1035 < sizeof ( struct STRUCT_OR_UNION_30 ) ) return - 1 ; <S2SV_ModStart> VAR_709 ) ; <S2SV_ModEnd> METHOD_262 ( ( <S2SV_ModStart> - 1 ; VAR_752 . VAR_706 = METHOD_253 ( VAR_948 . VAR_760 -> VAR_709 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_6 -> VAR_112 <S2SV_ModEnd> ; TYPE_4 VAR_115 <S2SV_ModStart> ( VAR_110 -> VAR_40 ) { struct STRUCT_OR_UNION_10 * VAR_74 = <S2SV_ModEnd> VAR_110 -> VAR_40 <S2SV_ModStart> 0xFF ; } <S2SV_ModEnd> VAR_110 -> VAR_85 <S2SV_ModStart> VAR_110 -> VAR_85 = sizeof ( * VAR_74 ) <S2SV_ModEnd> ; } VAR_115
<S2SV_ModStart> == 0 ) METHOD_10 ( STRUCT_OR_UNION_9 , 0 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> ) ) ; METHOD_13 ( ) ; <S2SV_ModStart> & VAR_57 , METHOD_14 ( <S2SV_ModStart> VAR_52 -> VAR_53 ) , & VAR_54 ) ; METHOD_15 ( <S2SV_ModEnd> ) ; VAR_67
<S2SV_ModStart> STRUCT_OR_UNION_6 -> VAR_112 <S2SV_ModEnd> ; TYPE_4 VAR_115 <S2SV_ModStart> ( VAR_110 -> VAR_40 ) { struct STRUCT_OR_UNION_10 * VAR_74 = <S2SV_ModEnd> VAR_110 -> VAR_40 <S2SV_ModStart> 0xFF ; } <S2SV_ModEnd> VAR_110 -> VAR_85 <S2SV_ModStart> VAR_110 -> VAR_85 = sizeof ( * VAR_74 ) <S2SV_ModEnd> ; } VAR_115
<S2SV_ModStart> ; TYPE_9 VAR_134 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * VAR_22 = sizeof ( * VAR_104 ) ;
<S2SV_ModStart> VAR_142 + VAR_143 ) ; METHOD_43 ( & VAR_50 -> VAR_17
<S2SV_ModStart> case 0 : if ( VAR_160 -> VAR_161 != VAR_160 -> VAR_62 ) { METHOD_17 ( & VAR_164 -> VAR_138 , VAR_81 , "Malformed<S2SV_blank>OS<S2SV_blank>X<S2SV_blank>metadata<S2SV_blank>entry:<S2SV_blank>inconsistent<S2SV_blank>size" ) ; return ( VAR_142 ) ; } <S2SV_ModStart> VAR_160 -> VAR_161 ) ; return ( VAR_83 ) ; } if ( VAR_160 -> VAR_62 > ( 4 * 1024 * 1024 ) ) { METHOD_17 ( & VAR_164 -> VAR_138 , VAR_81 , "Mac<S2SV_blank>metadata<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%jd<S2SV_blank>><S2SV_blank>4M<S2SV_blank>bytes" , ( TYPE_8 ) VAR_160 -> VAR_62 <S2SV_ModStart> case 0 : if ( ( TYPE_25 ) VAR_113 > VAR_162 ) VAR_113 = VAR_162 ;
<S2SV_ModStart> ( VAR_76 , METHOD_19 ( ) , VAR_78 , & VAR_79 , VAR_80 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> case VAR_47 : if ( VAR_41 < 6 ) { return VAR_52 ; }
<S2SV_ModStart> . METHOD_1 ( METHOD_3 ( VAR_30 ) <S2SV_ModEnd> , VAR_27 ,
<S2SV_ModStart> VAR_117 , VAR_140 ; if ( VAR_60 == VAR_111 ) return - VAR_20
<S2SV_ModStart> VAR_9 ) ; VAR_8 -> VAR_10 = VAR_11 ; VAR_8 -> VAR_12 = 0 ;
<S2SV_ModStart> if ( VAR_116 <S2SV_ModEnd> != VAR_117 )
<S2SV_ModStart> VAR_31 ) ; METHOD_7 ( VAR_52 ) -> VAR_53 = VAR_14 ;
<S2SV_ModStart> VAR_44 ) ; if <S2SV_ModEnd> ( VAR_42 != <S2SV_ModStart> . VAR_42 ) goto VAR_51
<S2SV_ModStart> ; VAR_25 -= 3 <S2SV_ModEnd> ; for (
<S2SV_ModStart> , VAR_153 , VAR_134 <S2SV_ModEnd> , VAR_135 , <S2SV_ModStart> VAR_136 ) ; if ( VAR_153 == VAR_161 ) { METHOD_69 ( ( VAR_159 , ")" ) ) ; goto VAR_158 ; }
<S2SV_ModStart> METHOD_0 ( const TYPE_6 * VAR_41 , TYPE_6 <S2SV_ModEnd> * VAR_130 ) <S2SV_ModStart> VAR_130 ) { TYPE_7 <S2SV_ModEnd> VAR_52 , VAR_49 <S2SV_ModStart> , VAR_102 ; TYPE_7 VAR_125 , VAR_129 , VAR_127 , VAR_131 ; TYPE_7 <S2SV_ModEnd> VAR_122 , VAR_117 <S2SV_ModStart> 0 ] = ( TYPE_6 ) <S2SV_ModStart> 2 ] = ( TYPE_6 ) <S2SV_ModStart> 4 ] = ( TYPE_6 ) <S2SV_ModStart> 6 ] = ( TYPE_6 ) <S2SV_ModStart> ; VAR_127 = ( TYPE_6 ) METHOD_10 ( VAR_125 ) ; VAR_131 = ( TYPE_6 ) <S2SV_ModEnd> METHOD_10 ( VAR_129 <S2SV_ModStart> 1 ] = ( TYPE_6 ) <S2SV_ModStart> 3 ] = ( TYPE_6 ) <S2SV_ModStart> 5 ] = ( TYPE_6 ) <S2SV_ModStart> 7 ] = ( TYPE_6 )
<S2SV_ModStart> , VAR_72 , VAR_28 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> TYPE_11 VAR_31 , TYPE_12 <S2SV_ModEnd> * VAR_127 ) <S2SV_ModStart> = VAR_43 -> VAR_123 <S2SV_ModEnd> ; const TYPE_9 <S2SV_ModStart> = VAR_43 -> VAR_124 <S2SV_ModEnd> ; const TYPE_10 <S2SV_ModStart> TYPE_11 VAR_67 ; const TYPE_11 VAR_131 = VAR_30 * VAR_44 -> VAR_132 + VAR_31 ; const TYPE_11 VAR_133 = VAR_43 -> VAR_134 [ 0 ] . VAR_135 >> 1 ; const TYPE_11 VAR_136 = VAR_43 -> VAR_134 [ 0 ] . VAR_137 >> 1 ; const TYPE_11 VAR_138 = METHOD_17 ( VAR_44 -> VAR_132 - VAR_31 , VAR_133 ) ; const TYPE_11 VAR_139 = METHOD_17 ( VAR_44 -> VAR_140 - VAR_30 , VAR_136 ) ; <S2SV_ModStart> ( VAR_44 , VAR_131 , VAR_138 , VAR_139 <S2SV_ModEnd> , VAR_127 ) <S2SV_ModStart> VAR_44 , VAR_43 <S2SV_ModEnd> , 1 ,
<S2SV_ModStart> - VAR_102 ; unsigned TYPE_25 VAR_123 = STRUCT_OR_UNION_15 -> VAR_124 ; <S2SV_ModStart> ) break ; if ( STRUCT_OR_UNION_15 -> VAR_124 == VAR_123 ) METHOD_17 ( VAR_121 [ VAR_119 ] ) ;
<S2SV_ModStart> , VAR_99 , VAR_391 , <S2SV_ModStart> "UnableToReadImageData" ) ; <S2SV_ModEnd> VAR_391 = VAR_688 <S2SV_ModStart> "MemoryAllocationFailed" ) ; if ( VAR_688 . VAR_582 == VAR_552 ) <S2SV_ModStart> VAR_393 ) ; <S2SV_ModEnd> VAR_630 = VAR_651
<S2SV_ModStart> * VAR_26 ; TYPE_2 VAR_28 ; <S2SV_ModStart> = VAR_22 ; for ( VAR_28 = 0 ; VAR_28 < VAR_27 / sizeof ( struct STRUCT_OR_UNION_8 ) ; VAR_28 ++ ) if ( ! METHOD_3 ( VAR_26 + VAR_28 ) ) return - VAR_13 ;
<S2SV_ModStart> , VAR_156 -> VAR_174 <S2SV_ModEnd> ) ; VAR_166 <S2SV_ModStart> = VAR_156 -> VAR_174 <S2SV_ModEnd> ; while (
<S2SV_ModStart> VAR_199 , VAR_38 ) ; METHOD_12 ( VAR_199 , VAR_200
<S2SV_ModStart> = 0 ; VAR_876 -> VAR_879 = VAR_876 -> VAR_880 ;
<S2SV_ModStart> = VAR_35 ; TYPE_11 <S2SV_ModEnd> VAR_53 = 0
<S2SV_ModStart> VAR_26 -> VAR_12 ) return VAR_29 ; if ( VAR_23 -> VAR_31 && ! VAR_26 -> VAR_31
<S2SV_ModStart> VAR_199 , VAR_38 ) ; METHOD_12 ( VAR_199 , VAR_200
<S2SV_ModStart> VAR_392 -> VAR_190 == ( VAR_75 | VAR_397 | VAR_82 ) || VAR_392 -> VAR_190 == ( VAR_75 | VAR_398 | VAR_82 ) ) { const TYPE_19 VAR_399 = VAR_75 | VAR_397 | VAR_82 ; const TYPE_19 VAR_400 = VAR_75 | VAR_398 | VAR_82 ; struct STRUCT_OR_UNION_11 VAR_289 [ 16 ] ; struct STRUCT_OR_UNION_11 * VAR_401 = & VAR_289 [ 0 ] ; TYPE_3 VAR_402 , VAR_403 ; TYPE_20 VAR_404 <S2SV_ModEnd> ; VAR_267 = <S2SV_ModStart> if ( ! VAR_267 -> alu_state <S2SV_ModEnd> ) continue ; <S2SV_ModStart> ) continue ; VAR_403 = VAR_267 -> alu_state & BPF_ALU_NEG_VALUE ; VAR_402 = ( VAR_267 -> alu_state & BPF_ALU_SANITIZE ) == BPF_ALU_SANITIZE_SRC ; VAR_404 = VAR_402 ? VAR_392 -> VAR_157 : VAR_392 -> VAR_60 ; if ( VAR_403 ) * VAR_401 ++ = BPF_ALU64_IMM ( BPF_MUL , VAR_404 , - 1 ) ; * VAR_401 ++ = BPF_MOV32_IMM ( BPF_REG_AX , VAR_267 -> alu_limit - 1 ) ; * VAR_401 ++ = BPF_ALU64_REG ( VAR_398 , BPF_REG_AX , VAR_404 ) ; * VAR_401 ++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , VAR_404 ) ; * VAR_401 ++ = BPF_ALU64_IMM ( BPF_NEG , BPF_REG_AX , 0 ) ; * VAR_401 ++ = BPF_ALU64_IMM ( BPF_ARSH , BPF_REG_AX , 63 ) ; if ( VAR_402 ) { * VAR_401 ++ = BPF_ALU64_REG ( VAR_211 , BPF_REG_AX , VAR_404 ) ; VAR_392 -> VAR_157 = BPF_REG_AX ; } else { * VAR_401 ++ = BPF_ALU64_REG ( VAR_211 , VAR_404 , BPF_REG_AX ) ; } if ( VAR_403 ) VAR_392 -> VAR_190 = VAR_392 -> VAR_190 == VAR_399 ? VAR_400 : VAR_399 ; * VAR_401 ++ = * VAR_392 ; if ( VAR_402 && VAR_403 ) * VAR_401 ++ = BPF_ALU64_IMM ( BPF_MUL , VAR_404 , - 1 ) ; VAR_294 = VAR_401 - VAR_289 <S2SV_ModEnd> ; VAR_300 = <S2SV_ModStart> } if ( VAR_392 -> VAR_190 != ( VAR_191 | VAR_155 ) ) continue ; if ( VAR_392 -> VAR_157 == VAR_158 ) continue ; if ( VAR_392 -> VAR_393 == VAR_161 ) VAR_383 -> VAR_163 = 1 ; if ( VAR_392 -> VAR_393 == VAR_166 ) METHOD_18 ( ) ; if ( VAR_392 -> VAR_393 == VAR_169 ) VAR_383 -> VAR_171 = 1 ; if ( VAR_392 -> VAR_393 == VAR_174 ) { VAR_383 -> VAR_176 = 1 ; VAR_386 -> VAR_383 -> VAR_267 -> VAR_180 = VAR_181 ; VAR_386 -> VAR_383 -> VAR_267 -> VAR_185 = VAR_186 ; VAR_392 -> VAR_393 = 0 ; VAR_392 -> VAR_190 = VAR_191 | VAR_192 ; <S2SV_ModEnd> VAR_267 = & <S2SV_ModStart> ; if ( ! METHOD_19 ( VAR_267 ) ) continue ; if ( <S2SV_ModStart> VAR_267 ) ) { METHOD_51 ( VAR_386 , "tail_call<S2SV_blank>abusing<S2SV_blank>map_ptr\\n" ) ; return - VAR_284 ; } <S2SV_ModEnd> VAR_278 = METHOD_26 <S2SV_ModStart> VAR_268 ) ; VAR_289 [ 0 ] = METHOD_23 ( VAR_206 , VAR_212 , VAR_278 -> VAR_209 , 2 ) ; VAR_289 [ 1 ] = BPF_ALU32_IMM ( VAR_211 , VAR_212 , container_of <S2SV_ModEnd> ( VAR_278 , <S2SV_ModStart> ( VAR_278 , struct VAR_214 , VAR_334 ) -> index_mask ) ; VAR_289 [ 2 ] = * VAR_392 ; VAR_294 = 3 ; <S2SV_ModEnd> VAR_300 = METHOD_31 <S2SV_ModStart> continue ; } if ( VAR_383 -> VAR_239 && VAR_240 == 64 && ( VAR_392 -> VAR_393 == VAR_339 || VAR_392 -> VAR_393 == VAR_345 || VAR_392 -> VAR_393 == VAR_351 || VAR_392 -> VAR_393 == VAR_357 || VAR_392 -> VAR_393 == VAR_363 || VAR_392 -> VAR_393 == VAR_369 ) ) { VAR_267 = & VAR_386 -> VAR_261 [ VAR_302 + VAR_303 ] ; if ( METHOD_25 ( VAR_267 ) ) goto VAR_376 ; VAR_278 = METHOD_26 ( VAR_267 -> VAR_268 ) ; VAR_379 = VAR_278 -> VAR_379 ; if ( VAR_392 -> VAR_393 == VAR_339 && VAR_379 -> METHOD_28 ) { VAR_294 = VAR_379 -> METHOD_28 ( VAR_278 , VAR_289 ) ; if ( VAR_294 == 0 || VAR_294 >= METHOD_29 ( VAR_289 ) ) { METHOD_51 ( VAR_386 , "bpf<S2SV_blank>verifier<S2SV_blank>is<S2SV_blank>misconfigured\\n" ) ; return - VAR_284 ; } VAR_300 = METHOD_31 ( VAR_386 , VAR_302 + VAR_303 , VAR_289 , VAR_294 ) ; if ( ! VAR_300 ) return - VAR_292 ; VAR_303 += VAR_294 - 1 ; VAR_386 -> VAR_383 = VAR_383 = VAR_300 ; VAR_392 = VAR_300 -> VAR_301 + VAR_302 + VAR_303 ; continue ; }
<S2SV_ModStart> ] ) ; METHOD_3 <S2SV_ModEnd> ( VAR_7 ) <S2SV_ModStart> VAR_7 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> 4 ] ; unsigned TYPE_9 <S2SV_ModEnd> VAR_30 ; if <S2SV_ModStart> VAR_30 = ( unsigned TYPE_9 ) <S2SV_ModEnd> VAR_27 [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; VAR_30 |= <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> . VAR_29 = <S2SV_ModEnd> VAR_30 & 0xffffffff <S2SV_ModStart> VAR_30 & 0xffffffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> VAR_91 ; } METHOD_21 ( & VAR_89 [ VAR_90 + 2 ] ) ;
<S2SV_ModStart> * VAR_137 ; <S2SV_ModEnd> } * VAR_135 <S2SV_ModStart> VAR_127 ) ; <S2SV_ModEnd> for ( VAR_127
<S2SV_ModStart> METHOD_10 ( STRUCT_OR_UNION_13 ) ; METHOD_15 ( VAR_77 , VAR_71 <S2SV_ModStart> VAR_82 ++ ; <S2SV_ModEnd> VAR_87 += VAR_71
<S2SV_ModStart> ; if ( VAR_9 <S2SV_ModEnd> > 32 )
<S2SV_ModStart> STRUCT_OR_UNION_7 , VAR_50 , VAR_42 -> VAR_43
<S2SV_ModStart> == VAR_151 || VAR_121 == VAR_151 || <S2SV_ModStart> ) || VAR_130 == VAR_151 || VAR_121 <S2SV_ModStart> ) || VAR_130 == VAR_151 || VAR_121 <S2SV_ModStart> == VAR_151 || VAR_121 == VAR_151 || <S2SV_ModStart> == VAR_151 || VAR_121 == VAR_151 || <S2SV_ModStart> if ( VAR_130 == VAR_151 || VAR_121
<S2SV_ModStart> goto VAR_68 ; <S2SV_ModEnd> VAR_67 = METHOD_2
<S2SV_ModStart> ; if ( VAR_70 -> VAR_63 > sizeof ( VAR_70 -> VAR_71 ) ) return - VAR_24 ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( VAR_37
<S2SV_ModStart> return ; } if ( VAR_40 < sizeof ( struct STRUCT_OR_UNION_12 ) ) { METHOD_91 ( ( VAR_386 , "EIGRP<S2SV_blank>%s,<S2SV_blank>length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , METHOD_82 ( VAR_44 , "unknown<S2SV_blank>(%u)" , VAR_58 -> VAR_48 ) , VAR_40 , ( TYPE_5 ) sizeof ( struct STRUCT_OR_UNION_12 ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( VAR_384 < sizeof ( struct STRUCT_OR_UNION_30 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) sizeof ( struct STRUCT_OR_UNION_30 ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_108 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_108 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_125 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_125 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_176 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_176 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_248 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_248 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_262 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_262 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_303 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_303 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_364 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_364 ) ) ) ) ; break ; }
<S2SV_ModStart> - VAR_38 ; if ( VAR_32 >= sizeof ( VAR_44 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>Section<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } <S2SV_ModStart> - VAR_29 ; if ( VAR_32 >= sizeof ( VAR_45 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>key<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } <S2SV_ModStart> = 0 ; if ( METHOD_14 ( <S2SV_ModEnd> VAR_34 + 1 <S2SV_ModStart> + 1 ) >= sizeof ( VAR_47 ) ) { METHOD_10 ( VAR_37 , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>value<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , VAR_38 ) ; return ; } METHOD_7 ( VAR_47 , VAR_34 + 1 )
<S2SV_ModStart> VAR_38 > VAR_39 && VAR_38 < VAR_67 - VAR_57
<S2SV_ModStart> VAR_52 ) ; VAR_52 += sizeof ( struct STRUCT_OR_UNION_3 ) ; <S2SV_ModStart> > 0 ) { VAR_52 += VAR_53 -> VAR_54 ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : VAR_52 += VAR_53 -> VAR_54 ; if ( VAR_52 > VAR_12 ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (
<S2SV_ModStart> { if ( VAR_68 == VAR_112 ) return - VAR_154 ; if ( <S2SV_ModStart> goto VAR_192 ; if ( VAR_155 && METHOD_35 ( & VAR_193 , & VAR_191 ) ) { VAR_199 = - VAR_154 ; goto VAR_190 ; }
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( VAR_13 )
<S2SV_ModStart> VAR_69 ; TYPE_12 VAR_70 <S2SV_ModEnd> ; TYPE_12 VAR_25 <S2SV_ModStart> TYPE_12 VAR_25 ; TYPE_11 VAR_71 [ 6 ] ; <S2SV_ModStart> ( VAR_64 , VAR_72 ) != 0 ) { METHOD_17 ( VAR_64 , VAR_73 <S2SV_ModEnd> , METHOD_16 ( <S2SV_ModStart> ( VAR_64 , VAR_74 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_64 , VAR_71 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_71 ) ) ; VAR_65 -> VAR_54 = METHOD_21 ( VAR_71 ) ; VAR_70 = METHOD_21 ( VAR_71 + 2 ) ; VAR_25 = METHOD_21 ( VAR_71 + 4 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_25 & VAR_75 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> 0 ) { VAR_70 <S2SV_ModEnd> = METHOD_9 ( <S2SV_ModStart> = METHOD_9 ( VAR_70 <S2SV_ModEnd> , VAR_29 ) <S2SV_ModStart> -> VAR_66 , VAR_70 <S2SV_ModEnd> ) ; VAR_69 <S2SV_ModStart> ( VAR_64 , VAR_76 <S2SV_ModEnd> , METHOD_16 ( <S2SV_ModStart> ( VAR_64 , VAR_77 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_64 , VAR_76 <S2SV_ModEnd> , METHOD_16 ( <S2SV_ModStart> ( VAR_64 , VAR_77 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_64 , VAR_78 , VAR_79 <S2SV_ModEnd> ) ; } <S2SV_ModStart> -> VAR_66 , VAR_70 <S2SV_ModEnd> , & VAR_68
<S2SV_ModStart> TYPE_3 VAR_338 ; const <S2SV_ModEnd> TYPE_59 * VAR_251 <S2SV_ModStart> ; VAR_251 = "/tmp" ; <S2SV_ModEnd> METHOD_151 ( (
<S2SV_ModStart> VAR_410 == VAR_93 && VAR_398 -> VAR_380 != VAR_81
<S2SV_ModStart> VAR_49 ) ; METHOD_14 ( VAR_49 , VAR_50 <S2SV_ModEnd> ) ; for <S2SV_ModStart> ; TYPE_8 VAR_50 ; if ( METHOD_16 ( VAR_49 ) ) return VAR_57
<S2SV_ModStart> ( VAR_19 ) || <S2SV_ModEnd> VAR_64 > VAR_21
<S2SV_ModStart> -> STRUCT_OR_UNION_6 ; TYPE_4 VAR_19 ; <S2SV_ModStart> |= VAR_14 ; VAR_19 = VAR_16 -> VAR_20 ; METHOD_4 ( VAR_16 , VAR_17 ) ; <S2SV_ModStart> VAR_15 , VAR_16 -> VAR_21 <S2SV_ModEnd> , VAR_18 ) <S2SV_ModStart> VAR_18 ) ; METHOD_5 ( VAR_16 , VAR_19 ) ;
<S2SV_ModStart> VAR_128 > VAR_57 - <S2SV_ModEnd> sizeof ( struct
<S2SV_ModStart> * VAR_65 , TYPE_5 VAR_67 <S2SV_ModEnd> , TYPE_4 VAR_66 <S2SV_ModStart> = 0 ; TYPE_5 <S2SV_ModEnd> VAR_59 ; METHOD_1 <S2SV_ModStart> ; switch ( VAR_67 <S2SV_ModEnd> & ( VAR_33
<S2SV_ModStart> STRUCT_OR_UNION_9 VAR_155 ; METHOD_11 ( & VAR_155 , 0 , sizeof ( VAR_155 ) ) ;
<S2SV_ModStart> ; if ( VAR_138 != VAR_135 -> VAR_138 ) { METHOD_40 ( VAR_138 ) ; VAR_138 = VAR_135 -> VAR_138 ; METHOD_34 ( VAR_138 ) ; } if (
<S2SV_ModStart> ] ) ) ) ; METHOD_113 ( VAR_1133 [ 1 ]
<S2SV_ModStart> VAR_19 ) { <S2SV_ModEnd> TYPE_6 * * <S2SV_ModStart> 0 ] ; METHOD_5 ( VAR_28 ) ;
<S2SV_ModStart> VAR_12 ) && METHOD_4 <S2SV_ModEnd> ( ) &&
<S2SV_ModStart> return METHOD_2 ( <S2SV_ModEnd> VAR_8 , 1 <S2SV_ModStart> = METHOD_2 ( <S2SV_ModEnd> VAR_8 , sizeof
<S2SV_ModStart> 1 ; return METHOD_5 ( <S2SV_ModStart> VAR_7 ) ] )
<S2SV_ModStart> VAR_58 , const TYPE_12 * VAR_50 , TYPE_11 * <S2SV_ModEnd> VAR_67 , TYPE_10 <S2SV_ModStart> & VAR_58 -> VAR_74 . <S2SV_ModStart> , VAR_72 ; TYPE_12 VAR_69 ; VAR_73 = METHOD_4 <S2SV_ModEnd> ( VAR_19 -> <S2SV_ModStart> ] . VAR_30 <S2SV_ModEnd> ) ; VAR_67 <S2SV_ModStart> ( VAR_58 , VAR_50 , & VAR_69 , VAR_63 , VAR_64 ) ; if ( VAR_72 < VAR_73 ) { VAR_73 = VAR_72 ; VAR_67 -> VAR_62 = VAR_69 ; } if ( VAR_50 -> VAR_75 != 0 || VAR_50 -> VAR_76 != 0 ) { unsigned TYPE_10 VAR_72 ; TYPE_12 VAR_59 = { 0 , 0 } , VAR_69 ; VAR_72 = METHOD_3 ( VAR_58 , & VAR_59 , & VAR_69 , VAR_63 , VAR_64 ) ; if ( VAR_72 < VAR_73 ) { VAR_67 -> VAR_62 = VAR_69 <S2SV_ModEnd> ; VAR_73 =
<S2SV_ModStart> & VAR_33 ) { <S2SV_ModStart> VAR_60 ++ ; } <S2SV_ModStart> & VAR_37 ) { <S2SV_ModStart> VAR_60 ++ ; }
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_33 <S2SV_ModEnd> = STRUCT_OR_UNION_14 -> <S2SV_ModStart> -> VAR_8 ; TYPE_2 VAR_59 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> & VAR_33 -> VAR_58 ) ; VAR_59 = METHOD_19 ( STRUCT_OR_UNION_14 , VAR_9 , VAR_4 ) <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> & VAR_33 -> VAR_58 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_59 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_37 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> . VAR_292 = ! ! <S2SV_ModStart> -> VAR_262 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> . VAR_292 = ! ! <S2SV_ModStart> -> VAR_262 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> VAR_20 [ VAR_13 ] || ! VAR_19 -> VAR_20 [ VAR_21
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_4 * VAR_44 = VAR_45 -> VAR_43 . VAR_44 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_44 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_44 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_44 ) ) <S2SV_ModStart> ( VAR_40 ) <S2SV_ModEnd> VAR_44 -> VAR_39 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_44 ) ;
<S2SV_ModStart> METHOD_0 ( TYPE_1 VAR_6 , TYPE_1 <S2SV_ModStart> VAR_4 ) { TYPE_1 VAR_7 ; if ( METHOD_4 ( VAR_6 , VAR_4 , & VAR_7 ) ) METHOD_3 ( ) ; <S2SV_ModStart> = METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> -> VAR_12 ; if ( VAR_13 -> VAR_8 ) <S2SV_ModStart> VAR_8 ) ; if ( VAR_13 -> VAR_11 )
<S2SV_ModStart> VAR_86 ) -> VAR_90 <S2SV_ModEnd> || ( VAR_86 <S2SV_ModStart> VAR_86 ) -> VAR_90 <S2SV_ModEnd> = 1 ;
<S2SV_ModStart> -> VAR_11 ; TYPE_17 VAR_66 ; TYPE_17 <S2SV_ModEnd> VAR_166 = VAR_24 <S2SV_ModStart> VAR_74 , VAR_43 ; METHOD_3 ( VAR_81 -> VAR_168 , VAR_169 , sizeof ( VAR_81 -> VAR_168 ) ) <S2SV_ModStart> = VAR_66 ; if ( ! <S2SV_ModStart> , VAR_167 ) <S2SV_ModEnd> ) continue ; <S2SV_ModStart> = VAR_72 + VAR_52 <S2SV_ModEnd> -> VAR_51 [ <S2SV_ModStart> ! VAR_81 -> VAR_170 ) METHOD_4 ( VAR_81 , VAR_156 , 2 , 0 , 1 , VAR_88 ) ; <S2SV_ModEnd> } } VAR_162
<S2SV_ModStart> ; if ( METHOD_11 <S2SV_ModEnd> ( VAR_25 , <S2SV_ModStart> , & VAR_11 , & VAR_41 ) < 0 ) { return 1 ; } if ( VAR_41 == VAR_28 || VAR_41 == VAR_42 ) { METHOD_8 ( VAR_41 ) ; VAR_37 = VAR_28 ; } else <S2SV_ModEnd> { TYPE_11 TYPE_14 <S2SV_ModStart> TYPE_11 TYPE_14 ; TYPE_14 = METHOD_3 ( VAR_41 , & VAR_37 , VAR_39 ) ; if ( TYPE_14 != 0 <S2SV_ModEnd> ) goto VAR_40 <S2SV_ModStart> goto VAR_40 ; METHOD_8 ( VAR_41 ) ; } if ( METHOD_11 ( VAR_25 , & VAR_26 , & VAR_41 ) < 0 ) { return 1 ; } if ( VAR_41 == VAR_28 ) { PyErr_SetString ( VAR_35 , "required<S2SV_blank>field<S2SV_blank>\\"value\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>keyword" ) ; return 1 ; } else { TYPE_11 TYPE_14 ; TYPE_14 = METHOD_7 ( VAR_41 , & VAR_38 <S2SV_ModEnd> , VAR_39 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> * VAR_36 =
<S2SV_ModStart> VAR_4 ) ; if ( ! VAR_3 ) { METHOD_3 ( & STRUCT_OR_UNION_4 -> VAR_5 ) ; METHOD_4 ( & STRUCT_OR_UNION_4 -> VAR_6 ) ; }
<S2SV_ModStart> ) , & VAR_22 <S2SV_ModEnd> ) ; METHOD_4
<S2SV_ModStart> TYPE_7 TYPE_7 * VAR_83 <S2SV_ModEnd> ) { TYPE_9 <S2SV_ModStart> , VAR_79 ; TYPE_7 TYPE_7 <S2SV_ModEnd> VAR_54 = METHOD_1 <S2SV_ModStart> = METHOD_1 ( ( TYPE_7 TYPE_7 ) <S2SV_ModStart> = METHOD_2 ( ( TYPE_7 TYPE_7 ) VAR_74 . VAR_75 . VAR_76 ) ; TYPE_9 VAR_69 = METHOD_7 ( ( TYPE_7 TYPE_7 ) VAR_74 . VAR_75 . VAR_76 ) ; TYPE_7 TYPE_7 * VAR_81 ; if ( VAR_69 != ( * VAR_83 - VAR_74 . VAR_75 . VAR_36 ) ) { METHOD_12 ( "read_fragment_table:<S2SV_blank>Bad<S2SV_blank>fragment<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; return VAR_71 ; } <S2SV_ModEnd> METHOD_11 ( "read_fragment_table:<S2SV_blank>%d<S2SV_blank>fragments,<S2SV_blank>reading<S2SV_blank>%d<S2SV_blank>fragment<S2SV_blank>indexes<S2SV_blank>" <S2SV_ModStart> VAR_36 ) ; VAR_81 = METHOD_14 ( VAR_52 ) ; <S2SV_ModEnd> VAR_78 = METHOD_4 <S2SV_ModStart> . VAR_36 , VAR_69 <S2SV_ModEnd> , VAR_81 ) <S2SV_ModStart> ) ; * VAR_83 <S2SV_ModEnd> = VAR_81 [
<S2SV_ModStart> -> VAR_15 ; if ( VAR_34 > VAR_17 ) { return - 1 ; } <S2SV_ModEnd> VAR_40 = VAR_32
<S2SV_ModStart> -> VAR_15 = METHOD_3 ( TYPE_1 , <S2SV_ModStart> * VAR_16 ++ , VAR_17 )
<S2SV_ModStart> VAR_470 , VAR_452 , VAR_378 <S2SV_ModStart> ; TYPE_31 VAR_433 <S2SV_ModEnd> ; TYPE_31 VAR_599 <S2SV_ModStart> VAR_590 , VAR_608 , VAR_226 -> VAR_174 == VAR_175
<S2SV_ModStart> { TYPE_43 VAR_543 = 0 , VAR_574 <S2SV_ModStart> , VAR_84 ) ; VAR_574 = 1 <S2SV_ModStart> if ( ! VAR_574 || !
<S2SV_ModStart> * VAR_59 , TYPE_10 <S2SV_ModEnd> * VAR_60 )
<S2SV_ModStart> TYPE_9 VAR_52 ; ( TYPE_0 ) VAR_0 ;
<S2SV_ModStart> ) + VAR_119 + 1 <S2SV_ModStart> VAR_137 ) , VAR_138 > VAR_119 ? VAR_119 :
<S2SV_ModStart> <= VAR_24 - ( TYPE_3 )
<S2SV_ModStart> ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 > VAR_3 / VAR_2 ) { return VAR_4 ; } <S2SV_ModEnd> return METHOD_1 ( <S2SV_ModStart> METHOD_1 ( VAR_1 * VAR_2
<S2SV_ModStart> VAR_49 ; } if ( VAR_53 -> VAR_51 < 0 ) VAR_53 -> VAR_51 = 0 ; <S2SV_ModStart> -= VAR_49 ; if ( VAR_54 < 0 ) VAR_54 = 0 ;
<S2SV_ModStart> return 0 ; case VAR_22 : VAR_17 -> VAR_23 = * ( const TYPE_7 * ) VAR_19 ; return 0 ;
<S2SV_ModStart> VAR_57 ) { VAR_71 <S2SV_ModEnd> ; } VAR_69
<S2SV_ModStart> VAR_443 , "MemoryAllocationFailed" METHOD_461 ; ( TYPE_119 METHOD_461 METHOD_462 ( VAR_579 , 0 , 3 * METHOD_74 ( VAR_326 , 256 METHOD_461 * sizeof ( * VAR_579 METHOD_461
<S2SV_ModStart> ; VAR_80 = METHOD_12 <S2SV_ModEnd> ( VAR_79 ,
<S2SV_ModStart> * VAR_101 ; <S2SV_ModEnd> VAR_53 = VAR_98 <S2SV_ModStart> VAR_107 = VAR_107 ; VAR_97 -> VAR_19 = VAR_19
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_17 > 0 && VAR_17 < 256 <S2SV_ModStart> ) ; return <S2SV_ModEnd> ( TYPE_5 ) <S2SV_ModStart> TYPE_5 ) VAR_17 <S2SV_ModEnd> ; } return
<S2SV_ModStart> VAR_18 ) ; METHOD_24 ( VAR_84 ) ; <S2SV_ModEnd> if ( VAR_38
<S2SV_ModStart> TYPE_23 VAR_26 ; TYPE_7 <S2SV_ModEnd> VAR_167 , VAR_154 <S2SV_ModStart> . VAR_22 , ( TYPE_23 ) <S2SV_ModStart> if ( ( <S2SV_ModEnd> VAR_166 = VAR_172 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_172 -> VAR_152 <S2SV_ModStart> if ( VAR_154 > 240 || <S2SV_ModEnd> VAR_172 -> VAR_156 <S2SV_ModStart> VAR_156 > 240 || VAR_154 + VAR_172 -> VAR_156 > 240 <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_166 == VAR_167 <S2SV_ModStart> else if ( <S2SV_ModEnd> VAR_166 == VAR_167 <S2SV_ModStart> else if ( <S2SV_ModEnd> VAR_166 == VAR_167
<S2SV_ModStart> VAR_15 ) { METHOD_2 <S2SV_ModEnd> ( VAR_20 ->
<S2SV_ModStart> ) ) { struct STRUCT_OR_UNION_3 * VAR_68 ; <S2SV_ModStart> VAR_36 ) ; VAR_68 = VAR_66 -> VAR_40 ; if ( VAR_68 ) { VAR_68 -> VAR_69 -- ; METHOD_11 ( VAR_68 ) ; } <S2SV_ModEnd> VAR_66 -> VAR_40
<S2SV_ModStart> * STRUCT_OR_UNION_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> TYPE_4 VAR_74 ; VAR_69 -> VAR_65 = VAR_75 ; <S2SV_ModStart> [ VAR_74 ] . VAR_65 . VAR_58 ; break ; } case VAR_76 : { TYPE_13 * VAR_72 = ( TYPE_13 * ) VAR_61 ; VAR_69 -> VAR_65 = & VAR_72 -> VAR_65 ; for ( VAR_74 = 0 ; VAR_74 < 4 ; VAR_74 ++ ) VAR_69 -> VAR_73 [ VAR_74 ] = & VAR_72 -> VAR_73 [ VAR_74 ] <S2SV_ModStart> 0 ) ; break ;
<S2SV_ModStart> : case VAR_7 : case VAR_21 : case VAR_22
<S2SV_ModStart> ++ ) { METHOD_6 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_60 ) ; METHOD_7 ( VAR_70 + VAR_60 , VAR_68 , VAR_62 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> ++ ) { METHOD_7 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> ++ ) { METHOD_7 <S2SV_ModEnd> ( VAR_79 ,
<S2SV_ModStart> VAR_44 . VAR_45 || ! VAR_46 -> VAR_44 . VAR_45 [ 0 ] || ! VAR_46 -> VAR_44 . VAR_45 [ 1 ] || <S2SV_ModEnd> VAR_46 -> VAR_44
<S2SV_ModStart> return - VAR_17 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> VAR_94 ) ; * VAR_19 = sizeof ( * VAR_91
<S2SV_ModStart> = METHOD_1 ( VAR_77 <S2SV_ModEnd> ) ; VAR_18 <S2SV_ModStart> ; VAR_18 = DM9000_MRCMDX1 <S2SV_ModEnd> ; VAR_28 = <S2SV_ModStart> { VAR_18 = VAR_78 <S2SV_ModEnd> ; VAR_28 = <S2SV_ModStart> VAR_28 & ( VAR_79 | VAR_80 | VAR_81 | VAR_82 | VAR_83 | VAR_84 <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> return VAR_282 ; <S2SV_ModEnd> VAR_281 = 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_88 ( METHOD_84 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_88 ( METHOD_84 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_88 ( METHOD_84 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_88 ( METHOD_84 <S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_88 ( METHOD_84
<S2SV_ModStart> { return VAR_13 ; } if ( VAR_90 > VAR_80 ) { return VAR_100
<S2SV_ModStart> ; if ( VAR_160 -> METHOD_34 < VAR_188 || VAR_187 -> VAR_166 < VAR_160 -> METHOD_34 || <S2SV_ModStart> struct STRUCT_OR_UNION_8 ) ) { METHOD_37 ( & VAR_184 ) ; VAR_178 |= VAR_157 ; goto VAR_169 <S2SV_ModEnd> ; } if
<S2SV_ModStart> } if ( ! VAR_450 -> VAR_432 ) { METHOD_43 ( VAR_350 , VAR_182 , "No<S2SV_blank>frames<S2SV_blank>in<S2SV_blank>the<S2SV_blank>file!\\n" ) ; return METHOD_36 ( VAR_453 ) ; } if (
<S2SV_ModStart> TYPE_3 METHOD_0 ( TYPE_4 VAR_3 , TYPE_4 <S2SV_ModEnd> VAR_4 ) {
<S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> VAR_190 ) ; } <S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> VAR_190 ) ; } <S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> & 0xFFFF ; }
<S2SV_ModStart> = 0 ; if ( ( <S2SV_ModStart> & VAR_53 ) ) == 0 ) { continue ; } <S2SV_ModEnd> if ( !
<S2SV_ModStart> ( VAR_18 -> VAR_23 <S2SV_ModEnd> == VAR_11 )
<S2SV_ModStart> VAR_92 ; } VAR_98 = METHOD_17 ( VAR_98 , VAR_99 ) ; if ( METHOD_12 ( VAR_98 ) ) { METHOD_18 ( VAR_100 ) ; return METHOD_14 ( VAR_98 ) ; } <S2SV_ModStart> = VAR_98 ; <S2SV_ModEnd> METHOD_18 ( VAR_100
<S2SV_ModStart> ; if ( <S2SV_ModEnd> ! VAR_186 .
<S2SV_ModStart> ++ ; } METHOD_2 ( * VAR_129 ) ;
<S2SV_ModStart> ; VAR_12 = METHOD_3 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> = METHOD_11 ( <S2SV_ModEnd> VAR_73 [ VAR_69 <S2SV_ModStart> ] -> VAR_70 <S2SV_ModEnd> ) ; METHOD_20
<S2SV_ModStart> ( VAR_36 < 5 + 1 <S2SV_ModEnd> ) METHOD_15 ( <S2SV_ModStart> ) ; } for ( VAR_36 = 0 ; VAR_36 <= 8 ; VAR_36 ++ ) { TYPE_9 VAR_29 ; TYPE_10 * VAR_39 ; METHOD_8 ( VAR_38 , "DEADBEEF" , 8 ) ; VAR_29 = VAR_36 ; VAR_39 = METHOD_9 ( VAR_38 , & VAR_29 , "%2.0f" , 1.6314159265358979e+125 ) ; METHOD_15 ( VAR_39 != VAR_27 ) ; METHOD_15 ( METHOD_12 ( VAR_39 , "163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208" ) == 0 ) ; METHOD_15 ( VAR_29 == 126 ) ; if ( VAR_36 < 126 + 1 ) METHOD_15 ( VAR_39 != VAR_38 ) ; METHOD_15 ( METHOD_16 ( VAR_38 + VAR_36 , & "DEADBEEF" [ VAR_36 ] , 8 - VAR_36 ) == 0 ) ; if ( VAR_39 != VAR_38 ) METHOD_17 ( VAR_39 ) ; }
<S2SV_ModStart> TYPE_9 VAR_51 [ VAR_58 <S2SV_ModEnd> ] ; TYPE_6 <S2SV_ModStart> ( VAR_51 , VAR_58 <S2SV_ModEnd> , "sel_comb_%dh" , <S2SV_ModStart> ( VAR_51 , VAR_58 <S2SV_ModEnd> , "sel_comb_%dv" ,
<S2SV_ModStart> * VAR_12 , TYPE_4 * VAR_17 , TYPE_5 * VAR_13 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> VAR_12 -> VAR_9 -> <S2SV_ModEnd> VAR_10 [ VAR_15 <S2SV_ModStart> VAR_15 ] , VAR_13 -> <S2SV_ModEnd> VAR_14 [ VAR_15
<S2SV_ModStart> return VAR_51 ; if ( ! <S2SV_ModEnd> VAR_28 [ VAR_29 <S2SV_ModStart> VAR_28 [ VAR_29 <S2SV_ModEnd> ] ) return <S2SV_ModStart> - VAR_43 ; VAR_51 = METHOD_3 ( VAR_37 , VAR_27 , VAR_28 [ VAR_29 ] , VAR_30 ) ; if ( VAR_51 ) return VAR_51 ; if ( ! VAR_37 <S2SV_ModEnd> [ VAR_38 ] <S2SV_ModStart> [ VAR_38 ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - VAR_43 ; VAR_59 = METHOD_4 ( VAR_37 [ VAR_38 ] ) ; } if ( VAR_65 ) return 0 ; VAR_55 = METHOD_5 ( STRUCT_OR_UNION_7 , VAR_59 ) ; if ( ! VAR_55 ) return - VAR_43 ;
<S2SV_ModStart> VAR_142 ; } METHOD_16 ( STRUCT_OR_UNION_41 ) ; METHOD_17 ( STRUCT_OR_UNION_41 ) ; METHOD_25 ( & METHOD_46 ( STRUCT_OR_UNION_41 ) -> VAR_145 ) ; <S2SV_ModStart> VAR_63 ) ; <S2SV_ModEnd> VAR_67 = METHOD_18 <S2SV_ModStart> ) ; goto VAR_146 <S2SV_ModEnd> ; } STRUCT_OR_UNION_41 <S2SV_ModStart> VAR_140 ) ; VAR_146 : METHOD_45 ( & METHOD_46 ( STRUCT_OR_UNION_41 ) -> VAR_145 ) ; <S2SV_ModEnd> METHOD_50 ( STRUCT_OR_UNION_41
<S2SV_ModStart> goto VAR_73 ; VAR_73 = - VAR_14 ; if ( VAR_15 != sizeof ( VAR_63 ) + <S2SV_ModEnd> VAR_63 . VAR_47 <S2SV_ModStart> + 1 ) goto VAR_73 ; VAR_65 . VAR_65 = VAR_71 ; VAR_65 . VAR_53 = VAR_63 . VAR_47 ; VAR_73 = METHOD_3 ( VAR_72 , VAR_71 , VAR_63 . VAR_47 + 1 )
<S2SV_ModStart> { if ( <S2SV_ModEnd> VAR_21 >= VAR_20
<S2SV_ModStart> -> VAR_23 = METHOD_6 ( TYPE_1 , <S2SV_ModStart> * VAR_38 ++ , 20 ) <S2SV_ModStart> -> VAR_40 = METHOD_6 ( TYPE_1 , <S2SV_ModStart> * VAR_38 ++ , 50 )
<S2SV_ModStart> VAR_47 ) { METHOD_1 ( & VAR_89 , 0 , sizeof ( VAR_89 ) ) ;
<S2SV_ModStart> = VAR_10 ; <S2SV_ModEnd> VAR_20 = METHOD_3 <S2SV_ModStart> VAR_20 ) { return VAR_20 ; } METHOD_2 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> ) ; return <S2SV_ModEnd> 0 ; }
<S2SV_ModStart> -> VAR_585 ; METHOD_22 <S2SV_ModEnd> ( VAR_649 -> <S2SV_ModStart> 1 ) { METHOD_23 <S2SV_ModEnd> ( ( VAR_656 <S2SV_ModStart> 16 ) ; METHOD_23 <S2SV_ModEnd> ( ( VAR_656 <S2SV_ModStart> 8 ) ; METHOD_23 <S2SV_ModEnd> ( ( VAR_656
<S2SV_ModStart> VAR_13 ) { METHOD_7 ( VAR_31 ) ; METHOD_7 ( VAR_32 ) ; <S2SV_ModStart> & VAR_25 , "s(O){OOOO}" <S2SV_ModEnd> , VAR_26 , <S2SV_ModStart> , VAR_27 , METHOD_8 ( & PyId__fields ) <S2SV_ModEnd> , VAR_29 , <S2SV_ModStart> , VAR_29 , METHOD_8 ( & VAR_33 ) , METHOD_8 ( & VAR_34 ) <S2SV_ModEnd> ) ; METHOD_6
<S2SV_ModStart> VAR_23 -> VAR_8 ) ; if ( VAR_16 > VAR_54 ) return METHOD_8 ( - VAR_55
<S2SV_ModStart> VAR_904 ) ; if ( VAR_928 -> VAR_932 && VAR_920 -> VAR_396 ) { METHOD_96 ( VAR_928 -> VAR_902 , VAR_903 , "Two<S2SV_blank>slices<S2SV_blank>reporting<S2SV_blank>being<S2SV_blank>the<S2SV_blank>first<S2SV_blank>in<S2SV_blank>the<S2SV_blank>same<S2SV_blank>frame.\\n" ) ; return 1 ; }
<S2SV_ModStart> , VAR_104 , VAR_123 , <S2SV_ModStart> * ) VAR_92 , VAR_97 + 2
<S2SV_ModStart> == - VAR_21 && STRUCT_OR_UNION_8 -> VAR_23 -> METHOD_3 ) { <S2SV_ModEnd> VAR_25 = STRUCT_OR_UNION_8 <S2SV_ModStart> VAR_24 ) ; }
<S2SV_ModStart> TYPE_3 * VAR_17 , const TYPE_3 * VAR_24 <S2SV_ModStart> VAR_22 , VAR_21 , VAR_24
<S2SV_ModStart> ; VAR_74 -> weight -= VAR_76 -> weight ; VAR_74 -> <S2SV_ModStart> ; VAR_74 -> <S2SV_ModEnd> VAR_25 -= VAR_76 <S2SV_ModStart> VAR_76 -> VAR_37 ; VAR_74 -> VAR_78 -= VAR_76 -> VAR_78 ; VAR_74 -> VAR_79 -= VAR_76 -> VAR_79 ; VAR_74 -> VAR_80 -= VAR_76 -> VAR_80
<S2SV_ModStart> VAR_43 ) ; return - VAR_108 ;
<S2SV_ModStart> goto VAR_165 ; VAR_166 -> VAR_120 = METHOD_14 ( VAR_142 ) ; VAR_166 -> VAR_123 = 0 ; VAR_166 -> VAR_125 = VAR_166 -> VAR_127 = 0 ; VAR_166 -> VAR_129 = METHOD_15 ( ) ; VAR_166 -> VAR_131 = VAR_162 ; VAR_166 -> VAR_134 = 0 ; VAR_166 -> VAR_136 = STRUCT_OR_UNION_13 ; VAR_166 -> VAR_138 = VAR_142 ; <S2SV_ModStart> VAR_159 ; } <S2SV_ModEnd> METHOD_16 ( &
<S2SV_ModStart> ( VAR_227 ) ; if ( METHOD_49 ( VAR_227 ) ) return VAR_200
<S2SV_ModStart> , VAR_23 , VAR_24 <S2SV_ModEnd> ) ; VAR_26
<S2SV_ModStart> VAR_5 ) { <S2SV_ModEnd> return ( VAR_4
<S2SV_ModStart> ( ( VAR_145 < sizeof ( struct STRUCT_OR_UNION_16 ) <S2SV_ModEnd> ) || (
<S2SV_ModStart> VAR_180 ) ; <S2SV_ModEnd> METHOD_54 ( VAR_226 <S2SV_ModStart> VAR_211 -> VAR_183 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> , VAR_59 ; if ( ! ( VAR_64 -> VAR_10 & VAR_66 ) ) { METHOD_6 ( VAR_0 , VAR_67 , "trns<S2SV_blank>before<S2SV_blank>IHDR\\n" ) ; return VAR_61 ; } if ( VAR_64 -> VAR_10 & VAR_68 ) { METHOD_6 ( VAR_0 , VAR_67 , "trns<S2SV_blank>after<S2SV_blank>IDAT\\n" ) ; return VAR_61 ; } <S2SV_ModStart> != 6 ) || VAR_64 -> VAR_52 == 1
<S2SV_ModStart> <S2SV_null> <S2SV_null> struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> * METHOD_0 ( void <S2SV_ModEnd> ) { return <S2SV_ModStart> ) { return METHOD_2 ( <S2SV_ModEnd> VAR_2 ) ;
<S2SV_ModStart> TYPE_3 VAR_10 ; TYPE_4 <S2SV_ModEnd> VAR_26 ; VAR_10 <S2SV_ModStart> -> VAR_28 - METHOD_3 <S2SV_ModEnd> ( VAR_10 ,
<S2SV_ModStart> { TYPE_3 VAR_76 = VAR_33 <S2SV_ModStart> ) ; goto VAR_78 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_78 <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { VAR_77 = <S2SV_ModEnd> VAR_63 [ VAR_64 <S2SV_ModStart> ] ) ; goto VAR_78 ; <S2SV_ModStart> - 1 ; VAR_78 : if ( VAR_76 ) { if ( VAR_76 -> VAR_79 ) { if ( VAR_76 -> VAR_79 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_79 -> VAR_80 ) ; } if ( VAR_76 -> VAR_81 ) { if ( VAR_76 -> VAR_81 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_81 -> VAR_80 ) ; } if ( VAR_76 -> VAR_82 ) { if ( VAR_76 -> VAR_82 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_82 -> VAR_80 ) ; } <S2SV_ModEnd> METHOD_18 ( VAR_76 <S2SV_ModStart> VAR_76 ) ; }
<S2SV_ModStart> ( VAR_121 == 6 <S2SV_ModEnd> ) METHOD_42 ( <S2SV_ModStart> ( VAR_123 , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6]" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case 42 : switch ( VAR_121 ) { case 6 : METHOD_42 ( ( VAR_123 , "<S2SV_blank>%u" , METHOD_36 ( VAR_119 + 2 ) ) ) ; break ; case 8 : METHOD_42 ( ( VAR_123 , "<S2SV_blank>%u" , METHOD_36 ( VAR_119 + 2 ) ) ) ; METHOD_42 ( ( VAR_123 , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , METHOD_38 ( VAR_119 + 6 ) ) ) ; break ; case 10 : METHOD_42 ( ( VAR_123 , "<S2SV_blank>%u" , METHOD_36 ( VAR_119 + 2 ) ) ) ; METHOD_42 ( ( VAR_123 , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , METHOD_36 ( VAR_119 + 6 ) ) ) ; break ; default : METHOD_42 ( ( VAR_123 , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6<S2SV_blank>or<S2SV_blank>8<S2SV_blank>or<S2SV_blank>10]" ) ) ; break ; } break ; case 43 : if ( VAR_121 == 6 ) METHOD_42 ( ( VAR_123 , "<S2SV_blank>%u" , METHOD_36 ( VAR_119 + 2 ) ) ) ; else <S2SV_ModStart> , "<S2SV_blank>%u" , METHOD_38 <S2SV_ModEnd> ( VAR_119 + <S2SV_ModStart> ( VAR_123 , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>or<S2SV_blank>6]" <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0 * VAR_13 ) { <S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_11 = VAR_13 ; <S2SV_ModEnd> if ( VAR_11
<S2SV_ModStart> = 0 ; ( VAR_70 + 3 ) <S2SV_ModEnd> < VAR_68 -> <S2SV_ModStart> = 0 ; ( VAR_70 + 7 ) <S2SV_ModEnd> < VAR_68 ->
<S2SV_ModStart> ; } else if ( VAR_25 -> VAR_18 < VAR_28 ) <S2SV_ModStart> ; } } else { METHOD_5 ( VAR_27 ) ; }
<S2SV_ModStart> TYPE_34 VAR_308 [ VAR_629 <S2SV_ModEnd> ] ; VAR_48
<S2SV_ModStart> VAR_48 , VAR_49 , VAR_50
<S2SV_ModStart> VAR_20 -> VAR_11 ) ; g_byte_array_free ( VAR_20 -> VAR_24 , VAR_25
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_93 ) && 0 != * VAR_97 && 0 != * VAR_31 && 0 != * VAR_93 ) <S2SV_ModEnd> { * VAR_79
<S2SV_ModStart> ) ) { METHOD_13 ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" ) ;
<S2SV_ModStart> VAR_165 ) { <S2SV_ModEnd> TYPE_6 * VAR_169 <S2SV_ModStart> - 1 ; ( TYPE_11 ) VAR_1 ; ( TYPE_11 ) VAR_2 ; <S2SV_ModStart> return VAR_176 ; <S2SV_ModEnd> VAR_169 -> VAR_87 <S2SV_ModStart> ; VAR_166 : <S2SV_ModEnd> VAR_173 -> VAR_174 <S2SV_ModStart> = 0 ; METHOD_8 ( ) ;
<S2SV_ModStart> VAR_142 ; } METHOD_16 ( STRUCT_OR_UNION_41 ) ; METHOD_17 ( STRUCT_OR_UNION_41 ) ; METHOD_25 ( & METHOD_46 ( STRUCT_OR_UNION_41 ) -> VAR_145 ) ; <S2SV_ModStart> VAR_63 ) ; <S2SV_ModEnd> VAR_67 = METHOD_18 <S2SV_ModStart> ) ; goto VAR_146 <S2SV_ModEnd> ; } STRUCT_OR_UNION_41 <S2SV_ModStart> VAR_140 ) ; VAR_146 : METHOD_45 ( & METHOD_46 ( STRUCT_OR_UNION_41 ) -> VAR_145 ) ; <S2SV_ModEnd> METHOD_50 ( STRUCT_OR_UNION_41
<S2SV_ModStart> TYPE_2 VAR_24 ; <S2SV_ModEnd> VAR_5 * VAR_20 <S2SV_ModStart> VAR_5 * VAR_13 ; METHOD_1 ( VAR_1 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_3 ( VAR_26
<S2SV_ModStart> VAR_27 ) { VAR_41 <S2SV_ModEnd> ; } VAR_39
<S2SV_ModStart> VAR_5 ) { METHOD_1 ( VAR_6 <S2SV_ModEnd> , "\\n<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>l" , <S2SV_ModStart> VAR_5 ) ; METHOD_2 ( VAR_6 ) ;
<S2SV_ModStart> { METHOD_4 ( VAR_45 <S2SV_ModEnd> + VAR_35 , <S2SV_ModStart> , METHOD_13 ( VAR_45 ) , METHOD_13 ( VAR_46 ) , METHOD_13 ( VAR_47 ) , METHOD_13 ( VAR_48 ) , METHOD_13 ( VAR_49 ) , METHOD_13 ( VAR_50 ) , METHOD_13 ( VAR_51 ) , METHOD_13 ( VAR_52 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> -> VAR_136 ; VAR_194 -> VAR_196 = VAR_194 -> VAR_197 ; VAR_194 -> VAR_192 = 0 ; VAR_194 -> VAR_136 = 0 ; VAR_194 -> VAR_197 = 0 ; <S2SV_ModStart> -> VAR_138 ; VAR_194 -> VAR_197 = VAR_194 -> VAR_196 ;
<S2SV_ModStart> TYPE_3 * VAR_23 , TYPE_3 * VAR_29 <S2SV_ModStart> * VAR_28 ; <S2SV_ModEnd> VAR_28 = * <S2SV_ModStart> * VAR_24 ; for ( ; ; ) { if ( * VAR_23 == 0 ) { return VAR_27 ; } if ( ! ND_TTEST ( <S2SV_ModEnd> * * VAR_24 <S2SV_ModStart> * VAR_24 ) ) { * VAR_29 = 1 ; return VAR_27 ; } if ( * * VAR_24 == '\\0' ) { break ; } <S2SV_ModEnd> ( * VAR_24 <S2SV_ModStart> ) -- ; <S2SV_ModEnd> return VAR_28 ;
<S2SV_ModStart> TYPE_4 VAR_34 ; TYPE_4 VAR_61 = 0 ; <S2SV_ModStart> VAR_27 , & VAR_61 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ( VAR_34 = METHOD_5 ( VAR_26 , VAR_29 ) <S2SV_ModEnd> ; VAR_34 < <S2SV_ModStart> ; VAR_34 < VAR_61 <S2SV_ModEnd> ; VAR_34 +=
<S2SV_ModStart> } TYPE_23 VAR_176 ; if ( METHOD_22 ( & VAR_176 , <S2SV_ModEnd> VAR_202 . VAR_152 <S2SV_ModStart> . VAR_192 ) != VAR_205 ) { METHOD_20 ( "%s:<S2SV_blank>Entry<S2SV_blank>data<S2SV_blank>size<S2SV_blank>is<S2SV_blank>invalid.<S2SV_blank>type:<S2SV_blank>%u<S2SV_blank>count:<S2SV_blank>%u" , VAR_197 , VAR_202 . VAR_152 , VAR_202 . VAR_192 ) ; return VAR_204 ; } <S2SV_ModEnd> if ( VAR_176
<S2SV_ModStart> ( ) ; METHOD_54 ( VAR_28 ) ;
<S2SV_ModStart> * VAR_4 , TYPE_4 <S2SV_ModEnd> VAR_7 ) {
<S2SV_ModStart> VAR_69 ) ; METHOD_19 ( VAR_79 -> VAR_81 , VAR_80 ) ;
<S2SV_ModStart> , VAR_104 , VAR_123 , <S2SV_ModStart> * ) VAR_92 , VAR_97 + 2
<S2SV_ModStart> TYPE_123 ) VAR_657 + 1
<S2SV_ModStart> ( VAR_30 -> VAR_23 <S2SV_ModEnd> ) < 0
<S2SV_ModStart> { TYPE_4 * VAR_75 , * <S2SV_ModStart> 0 ; } VAR_75 = VAR_73 -> VAR_70 + VAR_73 -> VAR_76 ; <S2SV_ModStart> = METHOD_2 ( VAR_75 <S2SV_ModEnd> , '&' , <S2SV_ModStart> -> VAR_74 - VAR_75 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_21 ) { VAR_73 -> VAR_76 = VAR_73 -> VAR_74 - VAR_73 -> VAR_70 ; <S2SV_ModStart> VAR_74 ) ; VAR_73 -> VAR_76 = 0 ;
<S2SV_ModStart> } if ( ! METHOD_49 ( VAR_78 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> ; VAR_69 = METHOD_5 ( VAR_85 -> VAR_73 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> * VAR_69 ) , <S2SV_ModEnd> VAR_30 ) ;
<S2SV_ModStart> ) { const TYPE_3 <S2SV_ModEnd> * const VAR_8
<S2SV_ModStart> -> VAR_141 ; <S2SV_ModEnd> TYPE_4 * VAR_213 <S2SV_ModStart> TYPE_16 VAR_224 ; TYPE_16 VAR_232 ; <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) <S2SV_ModEnd> ) ; METHOD_50 <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) <S2SV_ModEnd> ) ; METHOD_50 <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>message<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>" "that<S2SV_blank>it<S2SV_blank>is<S2SV_blank>done<S2SV_blank>pre-initializing<S2SV_blank>(2):<S2SV_blank>%s" , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> "privileges." ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; <S2SV_ModStart> ( "PR_SET_NO_NEW_PRIVS<S2SV_blank>is<S2SV_blank>set.<S2SV_blank>Process<S2SV_blank>cannot<S2SV_blank>use<S2SV_blank>execve()<S2SV_blank>" "gainable<S2SV_blank>privileges." ) ; } VAR_134 = 3 ; VAR_136 = METHOD_42 ( VAR_141 , & VAR_134 , sizeof ( VAR_134 ) ) ; if ( VAR_136 <= 0 ) { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>set<S2SV_blank>up<S2SV_blank>LSM<S2SV_blank>labels<S2SV_blank>(3):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 <S2SV_ModStart> TYPE_16 VAR_169 ; VAR_136 = METHOD_75 ( VAR_141 , & VAR_232 , VAR_110 , 0 ) ; if ( VAR_136 <= 0 ) { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } <S2SV_ModStart> ( METHOD_56 ( VAR_232 <S2SV_ModEnd> , VAR_169 , <S2SV_ModStart> 0 ) { METHOD_70 ( "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label." ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_71 ( VAR_232 ) ; METHOD_72 ( - 1 ) ; } METHOD_71 ( VAR_232 ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> "Loading<S2SV_blank>seccomp<S2SV_blank>policy" ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_71 ( VAR_141 ) ; <S2SV_ModEnd> METHOD_61 ( VAR_184 <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_72 ( VAR_230
<S2SV_ModStart> ; TYPE_4 VAR_55 , VAR_56 = 0 <S2SV_ModStart> return VAR_36 ; if ( ( VAR_43 . VAR_39 & VAR_57 ) == 0 || VAR_43 . VAR_44 <= 0 ) { VAR_43 . VAR_44 = 64 * 1024 ; VAR_56 = 1 ; } if ( ( VAR_55 = METHOD_8 ( VAR_54 , VAR_43 . VAR_44 ) ) != 0 || ( VAR_56 && ( VAR_55 = METHOD_9 ( VAR_54 , VAR_43 . VAR_44 ) ) != 0 ) ) return VAR_55 ;
<S2SV_ModStart> -> VAR_36 += <S2SV_ModEnd> VAR_41 -> METHOD_4
<S2SV_ModStart> ; while ( ( <S2SV_ModStart> VAR_20 == VAR_13 ) && ( VAR_21 -> VAR_23 < VAR_21 -> VAR_24 ) <S2SV_ModStart> ) != VAR_18 && ( VAR_21 -> VAR_23 < VAR_21 -> VAR_24 )
<S2SV_ModStart> else { return VAR_104 <S2SV_ModEnd> ; } case
<S2SV_ModStart> VAR_64 ) { METHOD_7 ( VAR_64 , 0 , sizeof ( * VAR_64 ) ) ;
<S2SV_ModStart> METHOD_78 ( VAR_323 , VAR_277 <S2SV_ModStart> METHOD_78 ( VAR_323 , VAR_277
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_11 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1
<S2SV_ModStart> ; if ( <S2SV_ModEnd> ! METHOD_50 (
<S2SV_ModStart> ) ; return 0
<S2SV_ModStart> ) ) ; VAR_124 -> VAR_128 = 0 ; METHOD_15 ( VAR_124 -> VAR_129 , VAR_130 ) ;
<S2SV_ModStart> * VAR_32 , TYPE_5 <S2SV_ModEnd> * VAR_39 ) <S2SV_ModStart> const VAR_40 = <S2SV_ModEnd> VAR_32 -> VAR_40
<S2SV_ModStart> { struct STRUCT_OR_UNION_4 VAR_41 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_6 <S2SV_ModStart> VAR_52 ; TYPE_3 VAR_54 , <S2SV_ModEnd> VAR_53 = 0 <S2SV_ModStart> VAR_53 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> - VAR_29 ; METHOD_10 ( & VAR_41 , 0 , sizeof ( VAR_41 ) ) ; VAR_54 = min_t ( unsigned TYPE_3 , sizeof ( VAR_41 ) , VAR_1 ) ; METHOD_11 ( & VAR_41 , VAR_14 , VAR_54 ) ; METHOD_1 ( "sk<S2SV_blank>%p<S2SV_blank>%pMR" , VAR_52 , & VAR_41 . VAR_42 ) ; <S2SV_ModStart> ; if ( VAR_41 . VAR_8 <S2SV_ModEnd> && METHOD_4 ( <S2SV_ModStart> && METHOD_4 ( VAR_41 . VAR_8 , & VAR_41 . <S2SV_ModEnd> VAR_42 ) ) <S2SV_ModStart> , & VAR_41 . <S2SV_ModEnd> VAR_42 ) ; <S2SV_ModStart> -> VAR_44 = VAR_41 . VAR_8 <S2SV_ModEnd> ; VAR_52 ->
<S2SV_ModStart> VAR_16 ) ; VAR_408 = 0 ;
<S2SV_ModStart> VAR_203 ) && METHOD_55 ( STRUCT_OR_UNION_46 ) == VAR_229 <S2SV_ModEnd> ) goto VAR_220
<S2SV_ModStart> VAR_938 ) { VAR_952 <S2SV_ModEnd> ; } switch
<S2SV_ModStart> ; if ( ! VAR_356 -> VAR_357 . VAR_360 && ( VAR_349 == VAR_361 && VAR_348 == 0 ) ) { return 0 ; } if ( <S2SV_ModStart> ! VAR_359 && ! <S2SV_ModEnd> VAR_356 -> VAR_205 <S2SV_ModStart> VAR_356 -> VAR_205 <S2SV_ModEnd> ) { TYPE_11 <S2SV_ModStart> ; VAR_356 -> VAR_205 = 1 ; } if ( VAR_356 -> VAR_205 ) { VAR_356 -> <S2SV_ModStart> VAR_356 -> VAR_203 <S2SV_ModEnd> ; } if <S2SV_ModStart> = 0 ; METHOD_28 ( ) ;
<S2SV_ModStart> ; VAR_49 -> <S2SV_ModEnd> VAR_11 = METHOD_1
<S2SV_ModStart> VAR_187 , VAR_188 <S2SV_ModEnd> ) + METHOD_4 <S2SV_ModStart> VAR_127 , VAR_188 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> 0 ) { METHOD_90 ( & VAR_369 -> VAR_338 ) ;
<S2SV_ModStart> { if ( VAR_4 != 1 ) return - VAR_7 ; if (
<S2SV_ModStart> VAR_213 ) ; METHOD_16 ( STRUCT_OR_UNION_23 , & VAR_222 ) ; <S2SV_ModStart> ) goto VAR_220 <S2SV_ModEnd> ; VAR_224 = <S2SV_ModStart> ; if ( VAR_199 ) { VAR_224 = METHOD_15 ( STRUCT_OR_UNION_23 , & VAR_221 ) ; if ( VAR_224 ) goto VAR_225 ; } if ( <S2SV_ModStart> return 0 ; VAR_225 : METHOD_24 ( VAR_212 ) ;
<S2SV_ModStart> if ( ! METHOD_24 ( & VAR_82 -> VAR_12 ) <S2SV_ModEnd> ) { METHOD_1
<S2SV_ModStart> , VAR_95 , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_156 , VAR_157 , VAR_162 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_12 ) { if ( VAR_59 + 2 > VAR_12 ) return - 1 ; <S2SV_ModStart> 2 ) ) ; if ( VAR_59 + 2 + VAR_60 > VAR_12 ) return - 1
<S2SV_ModStart> VAR_245 ) { <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_37 ; struct STRUCT_OR_UNION_18 <S2SV_ModEnd> * VAR_29 =
<S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 3 <S2SV_ModStart> ] << 24 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 2 <S2SV_ModStart> ] << 16 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 1 <S2SV_ModStart> ] << 8 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; VAR_27 . <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffffffff <S2SV_ModStart> VAR_26 & 0xffffffff <S2SV_ModEnd> ; return ( <S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> ] << 24 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 1 <S2SV_ModStart> ] << 16 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 2 <S2SV_ModStart> ] << 8 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 3 <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; VAR_27 . <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffffffff <S2SV_ModStart> VAR_26 & 0xffffffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_15 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_36 ) ; if <S2SV_ModEnd> ( VAR_36 % <S2SV_ModStart> * VAR_33 ) != 0 ) { METHOD_6 ( VAR_7 -> VAR_67 , "fpAcc" , "%s" , "cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_66 ) return 0 <S2SV_ModStart> VAR_66 ) ; return 1 ;
<S2SV_ModStart> VAR_51 ) { <S2SV_ModEnd> TYPE_4 VAR_52 , <S2SV_ModStart> * VAR_62 ; if ( METHOD_18 <S2SV_ModEnd> ( ( TYPE_8 <S2SV_ModStart> , & VAR_12 , & VAR_62 ) < 0 ) { goto VAR_61 ; } <S2SV_ModEnd> if ( VAR_62 <S2SV_ModStart> ; if ( VAR_28 < <S2SV_ModStart> ( VAR_44 ) <S2SV_ModEnd> ) { METHOD_8 <S2SV_ModStart> ( VAR_23 , "%.400s<S2SV_blank>constructor<S2SV_blank>takes<S2SV_blank>at<S2SV_blank>most<S2SV_blank>" <S2SV_ModEnd> "%zd<S2SV_blank>positional<S2SV_blank>argument%s" , METHOD_9 <S2SV_ModStart> ) -> VAR_25 <S2SV_ModEnd> , VAR_28 , <S2SV_ModStart> VAR_61 ; } <S2SV_ModEnd> if ( VAR_51
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_8 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_29 ) { TYPE_8 VAR_45 = 0 ; <S2SV_ModStart> VAR_19 ) { VAR_45 = 1 ; <S2SV_ModStart> ; } } return VAR_45 ;
<S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 3 <S2SV_ModStart> ] << 24 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 2 <S2SV_ModStart> ] << 16 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 1 <S2SV_ModStart> ] << 8 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; VAR_27 . <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffffffff <S2SV_ModStart> VAR_26 & 0xffffffff <S2SV_ModEnd> ; return ( <S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 0 <S2SV_ModStart> ] << 24 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 1 <S2SV_ModStart> ] << 16 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 2 <S2SV_ModStart> ] << 8 ; VAR_26 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_23 [ 3 <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; VAR_27 . <S2SV_ModStart> . VAR_25 = <S2SV_ModEnd> VAR_26 & 0xffffffff <S2SV_ModStart> VAR_26 & 0xffffffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> VAR_197 ) { <S2SV_ModEnd> VAR_373 -> VAR_364 <S2SV_ModStart> : 1 ; if ( VAR_373 -> VAR_364 ) { if ( METHOD_10 ( VAR_373 , 1 ) < 0 ) goto VAR_371 ; VAR_374 = VAR_373 -> VAR_326 ; VAR_374 [ 0 ] = 1 ; }
<S2SV_ModStart> VAR_36 ) ; if ( ! METHOD_5 ( VAR_26 , "path" ) && VAR_36 && METHOD_6 ( VAR_36 ) ) VAR_33 -> VAR_30 |= METHOD_7 ( VAR_33 -> VAR_32 , VAR_33 -> VAR_34 , VAR_38 , "disallowed<S2SV_blank>submodule<S2SV_blank>path:<S2SV_blank>%s" , VAR_36 ) ;
<S2SV_ModStart> ( 2 * ( TYPE_20 )
<S2SV_ModStart> * VAR_81 ; METHOD_8 <S2SV_ModEnd> ( & VAR_32 <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( & VAR_34
<S2SV_ModStart> & VAR_10 , VAR_27 <S2SV_ModEnd> , 0 ,
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_7 <S2SV_ModEnd> * VAR_22 , <S2SV_ModStart> * VAR_22 , TYPE_8 <S2SV_ModEnd> * VAR_20 , <S2SV_ModStart> ) { const TYPE_8 <S2SV_ModEnd> VAR_23 = VAR_4 <S2SV_ModStart> = VAR_4 ; TYPE_8 <S2SV_ModEnd> VAR_21 = METHOD_1 <S2SV_ModStart> 0 ) { METHOD_7 <S2SV_ModEnd> ( VAR_22 , <S2SV_ModStart> } else { METHOD_7 <S2SV_ModEnd> ( VAR_22 ,
<S2SV_ModStart> VAR_6 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_4 VAR_11 <S2SV_ModStart> return 0 ; <S2SV_ModEnd> TYPE_9 = METHOD_3 <S2SV_ModStart> ( STRUCT_OR_UNION_5 , <S2SV_ModEnd> & VAR_14 [
<S2SV_ModStart> TYPE_2 * VAR_9 , TYPE_0 * VAR_12 , TYPE_0 * VAR_18 ) { * <S2SV_ModEnd> VAR_12 = METHOD_2 <S2SV_ModStart> 4 ) ; * <S2SV_ModEnd> VAR_18 = METHOD_2 <S2SV_ModStart> ; if ( * <S2SV_ModEnd> VAR_12 == 0 <S2SV_ModStart> == 0 && * <S2SV_ModEnd> VAR_18 == 8 <S2SV_ModStart> 8 ) { * <S2SV_ModEnd> VAR_18 = 0
<S2SV_ModStart> VAR_20 ) ; METHOD_19 ( VAR_30 ) ; METHOD_19 ( VAR_31 ) ; METHOD_19 ( VAR_32 ) ; METHOD_19 ( VAR_33 ) ; METHOD_19 ( VAR_34 ) ;
<S2SV_ModStart> VAR_13 ) return VAR_15 <S2SV_ModEnd> ; else return <S2SV_ModStart> ; else return VAR_14 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_13 , "%s" ,
<S2SV_ModStart> -> VAR_68 && METHOD_15 ( VAR_69 ) -> VAR_71 <S2SV_ModEnd> ) METHOD_14 (
<S2SV_ModStart> TYPE_6 VAR_104 [ 100 <S2SV_ModEnd> ] ; TYPE_3 <S2SV_ModStart> = "0123456789abcdefghijklmnopqrstuvwxyz" ; <S2SV_ModEnd> TYPE_7 VAR_60 =
<S2SV_ModStart> -> VAR_35 = ( TYPE_6 )
<S2SV_ModStart> { TYPE_5 VAR_16 <S2SV_ModEnd> ; TYPE_7 VAR_20 <S2SV_ModStart> = VAR_16 ; return METHOD_4 <S2SV_ModEnd> ( VAR_30 -> <S2SV_ModStart> -> VAR_28 , <S2SV_ModEnd> VAR_30 -> VAR_31 <S2SV_ModStart> VAR_30 -> VAR_31 , VAR_20
<S2SV_ModStart> , VAR_120 ; * VAR_136 = VAR_139 ; VAR_142 = METHOD_9 ( 1 , sizeof ( <S2SV_ModEnd> * VAR_142 ) <S2SV_ModStart> goto VAR_140 ; VAR_143 = METHOD_14 <S2SV_ModEnd> ( METHOD_3 ( <S2SV_ModStart> VAR_129 ) , & <S2SV_ModEnd> VAR_142 -> VAR_34 <S2SV_ModStart> VAR_142 -> VAR_34 ) ; if ( VAR_143 ) goto VAR_140 ; VAR_143 = METHOD_14 <S2SV_ModEnd> ( METHOD_6 ( <S2SV_ModStart> VAR_129 ) , & <S2SV_ModEnd> VAR_142 -> VAR_47 <S2SV_ModStart> VAR_142 -> VAR_47 ) ; if ( VAR_143 ) goto VAR_140 ; <S2SV_ModEnd> VAR_143 = METHOD_8
<S2SV_ModStart> ( VAR_237 ) ; if ( ! VAR_230 -> VAR_226 && VAR_230 -> VAR_231 -> VAR_229 != 8 ) VAR_230 -> VAR_231 -> VAR_229 = 0
<S2SV_ModStart> VAR_8 ) { <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> - VAR_5 ; return <S2SV_ModEnd> METHOD_2 ( VAR_10 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; VAR_38 += METHOD_2 <S2SV_ModEnd> ( VAR_32 +
<S2SV_ModStart> -> VAR_31 == VAR_37 && VAR_30 -> VAR_20 . VAR_38 . VAR_39 == VAR_40 ) { VAR_10 -> VAR_41 -> VAR_42 = ! METHOD_7 ( METHOD_6 ( VAR_10 -> VAR_33 , VAR_43 ) ) ; } else if ( VAR_30 -> VAR_31 == VAR_37 && VAR_30 -> VAR_20 . VAR_38 . VAR_39 == VAR_44 ) { VAR_10 -> VAR_41 -> VAR_42 = VAR_35 ; } else if ( VAR_30 -> VAR_31 ==
<S2SV_ModStart> VAR_493 , VAR_461 - 8
<S2SV_ModStart> { VAR_33 = METHOD_6 <S2SV_ModEnd> ( VAR_33 ,
<S2SV_ModStart> ; VAR_43 = METHOD_11 <S2SV_ModEnd> ( VAR_74 -> <S2SV_ModStart> VAR_74 -> VAR_46 , <S2SV_ModEnd> VAR_52 ) ;
<S2SV_ModStart> VAR_91 ; TYPE_15 VAR_112 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_111 = METHOD_5 <S2SV_ModEnd> ( VAR_22 , <S2SV_ModStart> ( VAR_22 , VAR_108 , <S2SV_ModStart> 2 ) { VAR_112 <S2SV_ModEnd> = ( VAR_64 <S2SV_ModStart> = VAR_64 - VAR_112 <S2SV_ModEnd> ; VAR_92 = <S2SV_ModStart> & VAR_85 [ VAR_112 <S2SV_ModEnd> * VAR_106 ]
<S2SV_ModStart> * VAR_153 ; TYPE_11 VAR_179 ; <S2SV_ModStart> . VAR_174 ; VAR_179 = <S2SV_ModEnd> VAR_75 * VAR_80 <S2SV_ModStart> struct STRUCT_OR_UNION_4 ) ; if ( VAR_75 == 0 || VAR_179 / VAR_75 / sizeof ( struct STRUCT_OR_UNION_4 ) != VAR_80 || ! ( VAR_70 = METHOD_1 ( VAR_179
<S2SV_ModStart> ) ] ; struct STRUCT_OR_UNION_2 * VAR_69 = VAR_67 -> VAR_66 ; union STRUCT_OR_UNION_3 VAR_70 ; <S2SV_ModStart> unsigned TYPE_7 VAR_68 ; VAR_70 = VAR_69 -> VAR_71 [ VAR_22 ] . VAR_35 . VAR_36 . VAR_72 <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , "all<S2SV_blank>ports<S2SV_blank>in<S2SV_blank>use" ) <S2SV_ModStart> VAR_51 ; } METHOD_10 ( VAR_61 , sizeof ( VAR_61 ) , "%u<S2SV_blank>%u" , METHOD_9 ( VAR_70 . VAR_73 ) , VAR_47 ) ; METHOD_11 ( "nf_nat_irc:<S2SV_blank>inserting<S2SV_blank>\'%s\'<S2SV_blank>==<S2SV_blank>%pI4,<S2SV_blank>port<S2SV_blank>%u\\n" , VAR_61 , & VAR_70 . VAR_73 , VAR_47 ) ; <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , VAR_56 , <S2SV_ModStart> ( VAR_64 , VAR_69 <S2SV_ModEnd> , "cannot<S2SV_blank>mangle<S2SV_blank>packet" )
<S2SV_ModStart> VAR_49 ++ ) ; if ( ! METHOD_7 ( VAR_48 , VAR_49 ) ) return 0 <S2SV_ModStart> VAR_47 ; return 1 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_1 VAR_21 , <S2SV_ModEnd> struct STRUCT_OR_UNION_1 * <S2SV_ModStart> ( VAR_22 , <S2SV_ModEnd> VAR_27 , VAR_25
<S2SV_ModStart> TYPE_1 METHOD_0 ( TYPE_11 <S2SV_ModEnd> * VAR_21 , <S2SV_ModStart> 2 ) ; METHOD_10 ( & VAR_20 , <S2SV_ModEnd> ( VAR_21 + <S2SV_ModStart> * 8 ) ) ; METHOD_10 ( & VAR_22 , <S2SV_ModEnd> ( VAR_21 + <S2SV_ModStart> * 8 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> < 4 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 1 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 2 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_131 != VAR_128 -> VAR_129 [ 3 ] . VAR_131 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 1 ] . VAR_132 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 2 ] . VAR_132 ) || ( VAR_128 -> VAR_129 [ 0 ] . VAR_132 != VAR_128 -> VAR_129 [ 3 ] . VAR_132 ) ) { METHOD_3 ( VAR_133 , "%s:%d:color_cmyk_to_rgb\\n\\tCAN<S2SV_blank>NOT<S2SV_blank>CONVERT\\n" , VAR_134 , VAR_135 ) ; return ; } <S2SV_ModEnd> VAR_44 = VAR_24
<S2SV_ModStart> . VAR_66 = VAR_87 <S2SV_ModEnd> ; VAR_83 . <S2SV_ModStart> VAR_85 ) ; switch ( VAR_86 ) { case VAR_88 : break ; case VAR_20 : METHOD_17 ( "PKI:<S2SV_blank>File<S2SV_blank>does<S2SV_blank>not<S2SV_blank>appear<S2SV_blank>to<S2SV_blank>be<S2SV_blank>signed:<S2SV_blank>%s" , METHOD_21 ( ) ) ; METHOD_13 ( VAR_39 , METHOD_15 ( VAR_14 ) , METHOD_15 ( VAR_42 ) , VAR_16 | VAR_17 | VAR_45 , VAR_46 ) ; break ; default : METHOD_17 ( "PKI:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>validate<S2SV_blank>signature:<S2SV_blank>%s" , METHOD_21 ( ) ) ; METHOD_13 ( VAR_39 , METHOD_15 ( VAR_89 ) , METHOD_15 ( VAR_42 ) , VAR_16 | VAR_17 | VAR_45 , VAR_46 ) ; break ; }
<S2SV_ModStart> case VAR_50 : case VAR_81 :
<S2SV_ModStart> ; VAR_50 -> VAR_47 = 0 ; VAR_50 ->
<S2SV_ModStart> ) ) ; zend_object_store_ctor_failed ( * VAR_24 TSRMLS_CC ) ;
<S2SV_ModStart> ; } } if ( METHOD_58 ( VAR_292 ) != VAR_287 ) { METHOD_59 ( VAR_273 , VAR_116 , "UnexpectedEndOfFile" , VAR_292 -> VAR_32 ) ; break ; }
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_50 <S2SV_ModEnd> ; unsigned TYPE_3 <S2SV_ModStart> - VAR_27 ; METHOD_10 ( ) ; VAR_50 = METHOD_2 ( VAR_44 ) ; if ( ! VAR_50 ) { METHOD_11 ( ) ; return - VAR_27 ; } <S2SV_ModStart> VAR_51 ) ; METHOD_11 ( ) ;
<S2SV_ModStart> VAR_1 -> VAR_2 -> <S2SV_ModEnd> VAR_3 = VAR_4
<S2SV_ModStart> if ( ! VAR_40 ) { METHOD_10 ( VAR_42 , "Password<S2SV_blank>packet<S2SV_blank>before<S2SV_blank>auth<S2SV_blank>packet?" ) ; return VAR_47 ; } if ( !
<S2SV_ModStart> ) ) ) { METHOD_70 ( VAR_242 , "%s:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin,<S2SV_blank>got<S2SV_blank>%s" , VAR_243 , VAR_181 ) ; METHOD_76 ( STRUCT_OR_UNION_58 ) ; return VAR_16 ; } <S2SV_ModEnd> VAR_232 = (
<S2SV_ModStart> VAR_33 | VAR_199 | VAR_237 <S2SV_ModStart> -> VAR_37 ) <S2SV_ModEnd> VAR_52 |= VAR_39 <S2SV_ModStart> |= VAR_195 ; <S2SV_ModEnd> VAR_233 = *
<S2SV_ModStart> TYPE_1 ) { if ( ! VAR_38 ) { METHOD_7 ( ) ; METHOD_8 ( VAR_39 , "Not<S2SV_blank>in<S2SV_blank>Recovery<S2SV_blank>mode" ) ; METHOD_9 ( ) ; return ; }
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> ) { struct <S2SV_ModEnd> STRUCT_OR_UNION_16 * STRUCT_OR_UNION_16 <S2SV_ModStart> * STRUCT_OR_UNION_16 = page_file_mapping ( STRUCT_OR_UNION_17 ) <S2SV_ModEnd> -> VAR_3 ; <S2SV_ModStart> ) ) METHOD_3 ( STRUCT_OR_UNION_17 ) ; if ( METHOD_11 ( STRUCT_OR_UNION_17 ) ) return METHOD_9
<S2SV_ModStart> if ( VAR_33 > <S2SV_ModEnd> VAR_39 - 2
<S2SV_ModStart> ; if ( VAR_122 < VAR_163 || VAR_122 > VAR_164 ) return - VAR_156 ; if ( VAR_23 < 0 || VAR_23 > VAR_6 ) return - VAR_156 ; if (
<S2SV_ModStart> = 0 ; METHOD_13 ( ) ;
<S2SV_ModStart> TYPE_10 VAR_130 ; const
<S2SV_ModStart> VAR_114 VAR_118 ) || ( METHOD_13 ( VAR_103 -> VAR_77 ) != VAR_93 && METHOD_13 ( VAR_103 -> VAR_77 ) != VAR_122 ) ) { METHOD_23 ( & VAR_103 -> VAR_77 ) ; <S2SV_ModEnd> goto VAR_113 ;
<S2SV_ModStart> , VAR_121 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> case VAR_111 : if ( VAR_123 + 1 > VAR_113 ) { METHOD_12 ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>number<S2SV_blank>%d<S2SV_blank>for<S2SV_blank>MEM64<S2SV_blank>type\\n" , VAR_77 , VAR_123 ) ; return - 1 ; } <S2SV_ModStart> ; default : METHOD_12 <S2SV_ModEnd> ( "%s:<S2SV_blank>invalid<S2SV_blank>bar<S2SV_blank>type<S2SV_blank>%d\\n" , <S2SV_ModStart> VAR_117 ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> VAR_111 ) { <S2SV_ModEnd> VAR_122 -> VAR_121
<S2SV_ModStart> VAR_58 ) { METHOD_14 ( & VAR_71 -> VAR_30 ) ;
<S2SV_ModStart> return 0 ; if ( VAR_19 > STRUCT_OR_UNION_8 -> VAR_8 ) { <S2SV_ModEnd> if ( VAR_28 <S2SV_ModStart> VAR_27 ) ; return 0 ; <S2SV_ModStart> ; } } VAR_31 = METHOD_3 ( VAR_28 -> VAR_15 , STRUCT_OR_UNION_8 -> VAR_16 , VAR_19 ) ; if ( VAR_31 != VAR_19 ) { METHOD_4 ( & STRUCT_OR_UNION_8 -> VAR_21 -> VAR_21 , "recv<S2SV_blank>xbuf,<S2SV_blank>%d\\n" , VAR_31 ) ; if ( VAR_28 -> VAR_24 == VAR_25 ) { METHOD_6 ( VAR_28 , VAR_27 ) ; } else { METHOD_6 ( VAR_28 , VAR_29 ) ; return - VAR_30 ; } }
<S2SV_ModStart> , STRUCT_OR_UNION_21 , VAR_128 ,
<S2SV_ModStart> VAR_40 ) { if ( VAR_40 -> VAR_43 == VAR_44 ) VAR_40 -> VAR_38 . VAR_45 = VAR_40 -> VAR_46 ;
<S2SV_ModStart> ( VAR_22 , <S2SV_ModEnd> VAR_23 , VAR_24
<S2SV_ModStart> ( ! TYPE_8 && VAR_40 -> VAR_36 . VAR_32 != VAR_40 -> VAR_41
<S2SV_ModStart> = VAR_16 ; if ( VAR_27 -> VAR_51 || ! VAR_27 -> VAR_52 ) { * VAR_48 = VAR_53 ; return VAR_54 ; }
<S2SV_ModStart> TYPE_7 VAR_84 ; VAR_85 * VAR_86 ; <S2SV_ModStart> VAR_84 = VAR_62 ; goto VAR_81 ; } VAR_86 = METHOD_9 ( ) ; if ( VAR_86 == VAR_79 ) { VAR_84 = VAR_70 ; goto VAR_81 ; } VAR_80 = METHOD_10 ( VAR_86 ) ; if ( VAR_80 == VAR_79 ) { VAR_84 = VAR_70 ; METHOD_11 ( VAR_86 )
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_28 , 0
<S2SV_ModStart> ] ) ; METHOD_31 ( VAR_107 -> VAR_110 , 0 , sizeof ( VAR_107 -> VAR_110 ) ) ;
<S2SV_ModStart> METHOD_4 , VAR_9 , VAR_10
<S2SV_ModStart> , VAR_5 , <S2SV_ModEnd> VAR_6 ) ;
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_77 , VAR_70
<S2SV_ModStart> ) ) ; METHOD_12 ( ) ; <S2SV_ModStart> ( VAR_60 , METHOD_13 ( <S2SV_ModStart> VAR_55 -> VAR_51 ) <S2SV_ModStart> VAR_52 ) ; METHOD_14 ( ) ;
<S2SV_ModStart> VAR_35 > VAR_38 + VAR_41 <S2SV_ModStart> VAR_40 + 1 <= VAR_38 + VAR_41 <S2SV_ModEnd> ) VAR_39 ->
<S2SV_ModStart> VAR_117 -> VAR_118 , VAR_120
<S2SV_ModStart> = 1 ; METHOD_36 ( VAR_147 ) ;
<S2SV_ModStart> VAR_37 : case VAR_58 : case
<S2SV_ModStart> ; if ( VAR_160 -> METHOD_34 < VAR_188 || VAR_187 -> VAR_166 < VAR_160 -> METHOD_34 || <S2SV_ModStart> struct STRUCT_OR_UNION_8 ) ) { METHOD_37 ( & VAR_184 ) ; VAR_178 |= VAR_157 ; goto VAR_169 <S2SV_ModEnd> ; } if
<S2SV_ModStart> ; VAR_32 = METHOD_5 <S2SV_ModEnd> ( VAR_57 ->
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_10 * VAR_94 , TYPE_11 * VAR_95 , struct STRUCT_OR_UNION_2 <S2SV_ModEnd> * VAR_91 ) <S2SV_ModStart> , VAR_85 ; const <S2SV_ModStart> VAR_80 = & VAR_94 -> VAR_80 ; METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> ) return ; METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> { METHOD_3 ( VAR_94 , VAR_95 <S2SV_ModEnd> ) ; for <S2SV_ModStart> != VAR_50 ; METHOD_20 ( VAR_91 , VAR_53 ) ; if ( VAR_53 ) METHOD_21 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> ) ; } METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> != VAR_50 ; METHOD_20 ( VAR_91 , VAR_53 ) ; if ( VAR_53 ) METHOD_21 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> } } } METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> VAR_60 ) { METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> TYPE_9 VAR_78 = METHOD_22 ( VAR_80 , VAR_81 , VAR_85 ) ; METHOD_20 <S2SV_ModEnd> ( VAR_91 , <S2SV_ModStart> TYPE_9 VAR_92 = METHOD_23 <S2SV_ModEnd> ( VAR_80 , <S2SV_ModStart> VAR_93 ) ; METHOD_20 <S2SV_ModEnd> ( VAR_91 ,
<S2SV_ModStart> TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_19 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; METHOD_1 ( VAR_19 <S2SV_ModEnd> ) ; VAR_18 <S2SV_ModStart> ; VAR_18 = VAR_19 <S2SV_ModEnd> -> STRUCT_OR_UNION_2 ; <S2SV_ModStart> -> STRUCT_OR_UNION_2 ; VAR_19 <S2SV_ModEnd> -> STRUCT_OR_UNION_2 = <S2SV_ModStart> ; METHOD_2 ( VAR_19 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_168 , VAR_171 <S2SV_ModEnd> ) ; METHOD_47
<S2SV_ModStart> * VAR_397 ; METHOD_22 <S2SV_ModEnd> ( & VAR_99 <S2SV_ModStart> ) ) ; METHOD_22 <S2SV_ModEnd> ( & VAR_101 <S2SV_ModStart> * VAR_393 ; METHOD_22 <S2SV_ModEnd> ( & VAR_103 <S2SV_ModStart> ) ) ; METHOD_22 <S2SV_ModEnd> ( & VAR_105 <S2SV_ModStart> = VAR_389 ; METHOD_22 <S2SV_ModEnd> ( VAR_395 , <S2SV_ModStart> ) ) ; METHOD_22 <S2SV_ModEnd> ( VAR_397 , <S2SV_ModStart> ; } } METHOD_22 <S2SV_ModEnd> ( VAR_394 , <S2SV_ModStart> ) ) ; METHOD_22 <S2SV_ModEnd> ( VAR_396 ,
<S2SV_ModStart> VAR_86 -> VAR_57 != VAR_58 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_88 ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> VAR_86 -> VAR_45 <S2SV_ModStart> TYPE_4 ) VAR_88 & <S2SV_ModEnd> ~ VAR_55 ; <S2SV_ModStart> + 8 ; if <S2SV_ModEnd> ( VAR_59 & <S2SV_ModStart> VAR_59 & VAR_60 <S2SV_ModEnd> ) { VAR_68 <S2SV_ModStart> -> VAR_80 = ( VAR_59 & VAR_60 ) ? VAR_88 : ( TYPE_5 ) <S2SV_ModStart> VAR_87 ) = ( VAR_59 & VAR_60 ) ? VAR_88 : ( TYPE_5 )
<S2SV_ModStart> return VAR_9 ; if ( ! VAR_16 ) { METHOD_5 ( 0 ) ; }
<S2SV_ModStart> ; VAR_164 -> VAR_179 = VAR_180 ; VAR_164 ->
<S2SV_ModStart> * VAR_5 , <S2SV_ModEnd> const TYPE_1 * <S2SV_ModStart> const TYPE_1 * name <S2SV_ModEnd> , TYPE_2 *
<S2SV_ModStart> -> VAR_21 ; VAR_19 -> VAR_23 = 0 ;
<S2SV_ModStart> , VAR_241 , VAR_243 , VAR_273 , VAR_47 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_93 ) && 0 != * VAR_97 && 0 != * VAR_31 && 0 != * VAR_93 ) <S2SV_ModEnd> { * VAR_79
<S2SV_ModStart> 0x05 , 0x00 } ; const TYPE_20 VAR_182 [ ] = { 0x04 , 0x01 , 0x60 , 0x8f , 0xff , 0xff , 0xff , 0x7f <S2SV_ModStart> VAR_180 ) ; if ( VAR_180 == 0 ) { <S2SV_ModStart> VAR_181 ) ; VAR_181 = METHOD_52 ( VAR_170 ) ; } VAR_180 = METHOD_53 ( VAR_182 , sizeof ( VAR_182 ) ) ; VAR_180 = METHOD_54 ( VAR_181 , VAR_179 , sizeof ( VAR_179 ) ) ; METHOD_55 ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( TYPE_30 ) VAR_180 ) ; METHOD_56 ( VAR_179 , VAR_180 ) ; METHOD_57 ( VAR_181 ) ;
<S2SV_ModStart> ; VAR_12 = METHOD_4 <S2SV_ModEnd> ( VAR_11 )
<S2SV_ModStart> ( VAR_62 , <S2SV_ModEnd> VAR_64 , VAR_61 <S2SV_ModStart> , METHOD_11 , & VAR_67 <S2SV_ModEnd> , VAR_60 ,
<S2SV_ModStart> VAR_35 = ( <S2SV_ModEnd> TYPE_5 ) (
<S2SV_ModStart> ( ) ; METHOD_9 ( VAR_8 . VAR_9 , METHOD_8 ( VAR_10 , 24 ) + VAR_5 ) ;
<S2SV_ModStart> ( TYPE_18 ) VAR_0 ; ( TYPE_18 )
<S2SV_ModStart> ( VAR_80 -> VAR_143 == VAR_144 && VAR_80 -> <S2SV_ModStart> else if ( VAR_80 -> VAR_143 == VAR_144 &&
<S2SV_ModStart> * VAR_414 ; TYPE_3 <S2SV_ModEnd> VAR_425 , VAR_426 <S2SV_ModStart> TYPE_12 VAR_418 ; TYPE_3 VAR_337 ; TYPE_3 <S2SV_ModEnd> VAR_374 ; union <S2SV_ModStart> ) ) ; if ( VAR_425 < sizeof ( const struct STRUCT_OR_UNION_4 ) ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(too<S2SV_blank>short)" ) ) ; return ; } if ( VAR_425 > VAR_39 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(too<S2SV_blank>long)" ) ) ; VAR_425 = VAR_39 ; } <S2SV_ModStart> & 0x7f ; <S2SV_ModEnd> METHOD_168 ( ( <S2SV_ModStart> ) ) ; if ( VAR_426 < 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(too<S2SV_blank>short)" ) ) ; return ; } if ( ( VAR_426 % 4 ) != 0 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>4)" ) ) ; return ; } <S2SV_ModStart> case VAR_137 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_104 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_110 : if ( VAR_415 != 16 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_116 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_286 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_128 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_137 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_146 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_154 : if ( VAR_415 != 8 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> case VAR_160 : switch ( VAR_354 ) { case VAR_326 : if ( VAR_415 != 12 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_155 ( VAR_428 , VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_155 ( VAR_428 , VAR_414 + 8 ) , METHOD_159 ( VAR_414 + 8 ) ) ) ; break ; case VAR_338 : if ( VAR_415 != 36 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , METHOD_164 ( VAR_162 , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; <S2SV_ModEnd> METHOD_168 ( ( <S2SV_ModStart> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_26 ( VAR_428 , VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_26 ( VAR_428 , VAR_414 + 20 ) , METHOD_159 ( VAR_414 + 20 ) ) ) ; break ; case VAR_327 : if ( VAR_415 != 12 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , METHOD_164 ( VAR_162 , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , METHOD_159 ( VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_159 ( <S2SV_ModEnd> VAR_414 + 8 <S2SV_ModStart> ; break ; <S2SV_ModEnd> default : VAR_418 <S2SV_ModStart> case VAR_177 : switch ( VAR_354 ) { case VAR_326 : if ( VAR_415 < 12 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } <S2SV_ModStart> , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_155 ( VAR_428 , VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_155 ( VAR_428 , VAR_414 + 8 ) , METHOD_159 ( VAR_414 + 8 ) ) ) ; if ( METHOD_170 ( VAR_428 , VAR_414 , VAR_415 - 12 , 12 ) ) VAR_418 = VAR_419 ; break ; case VAR_338 : if ( VAR_415 < 36 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , METHOD_164 ( VAR_179 , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_26 ( VAR_428 , VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_26 ( VAR_428 , VAR_414 + 20 ) , METHOD_159 ( VAR_414 + 20 ) ) ) ; if ( METHOD_170 ( VAR_428 , VAR_414 , VAR_415 - 36 , 36 ) ) VAR_418 = VAR_419 ; break ; case VAR_327 : if ( VAR_415 < 12 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , METHOD_164 ( VAR_179 , "none" , METHOD_169 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , METHOD_159 ( VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 4 ) , METHOD_159 ( VAR_414 + 8 ) , METHOD_159 ( VAR_414 + 8 ) ) ) ; if ( METHOD_170 ( VAR_428 , VAR_414 , VAR_415 - 12 , 12 ) ) VAR_418 = VAR_419 ; break ; default : VAR_418 = VAR_419 ; } break ; case VAR_249 : switch ( VAR_354 ) { case VAR_286 : if ( VAR_415 != 20 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>%s" , METHOD_164 ( VAR_253 , "none" , <S2SV_ModStart> ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Interval:<S2SV_blank>%u" , METHOD_165 ( VAR_414 + 2 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Data<S2SV_blank>links:<S2SV_blank>%u" , METHOD_159 ( VAR_414 + 4 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Encoding<S2SV_blank>type:<S2SV_blank>%s" , METHOD_137 ( VAR_260 , "Unknown" , * ( VAR_414 + <S2SV_ModEnd> 8 ) ) <S2SV_ModStart> ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Transport<S2SV_blank>Mechanism:<S2SV_blank>%u<S2SV_blank>(0x%x)%s" , <S2SV_ModEnd> METHOD_165 ( VAR_414 <S2SV_ModStart> ( VAR_414 + 10 ) , <S2SV_ModEnd> METHOD_165 ( VAR_414 <S2SV_ModStart> ( VAR_414 + 10 ) , METHOD_165 ( VAR_414 + 10 ) & 8000 ? "<S2SV_blank>(Payload<S2SV_blank>test<S2SV_blank>messages<S2SV_blank>capable)" : "" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_414 + 12 ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Transmission<S2SV_blank>Rate:<S2SV_blank>%.3f<S2SV_blank>Mbps" , <S2SV_ModEnd> VAR_270 . VAR_271 <S2SV_ModStart> ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Wavelength:<S2SV_blank>%u" , METHOD_159 ( VAR_414 + 16 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> = VAR_419 ; } break ; case VAR_276 : switch ( VAR_354 ) { case VAR_286 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Dead<S2SV_blank>Interval:<S2SV_blank>%u" "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Transport<S2SV_blank>Response:<S2SV_blank>%u" , METHOD_165 ( VAR_414 ) , METHOD_165 ( VAR_414 + 2 ) ) ) ; break ; <S2SV_ModEnd> default : VAR_418 <S2SV_ModStart> break ; case VAR_284 <S2SV_ModEnd> : switch ( <S2SV_ModStart> case VAR_286 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>ID:<S2SV_blank>%u" , METHOD_159 ( VAR_414 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> break ; case VAR_291 <S2SV_ModEnd> : switch ( <S2SV_ModStart> ) { case VAR_326 : VAR_337 = 0 ; while ( VAR_337 + 8 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_155 ( VAR_428 , VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 31 ) ? "Allocated" : "Non-allocated" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 31 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 30 ) & 0x1 ? "Transmit" : "Receive" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 30 ) & 0x1 ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_315 , "Unknown" , METHOD_159 ( VAR_414 + VAR_337 + 4 ) & 0x3FFFFFF ) , METHOD_159 ( VAR_414 + VAR_337 + 4 ) & 0x3FFFFFF ) ) ; VAR_337 += 8 ; } break ; case VAR_338 : VAR_337 = 0 ; while ( VAR_337 + 20 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_26 ( VAR_428 , VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 16 ) >> 31 ) ? "Allocated" : "Non-allocated" , ( METHOD_159 ( VAR_414 + VAR_337 + 16 ) >> 31 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 16 ) >> 30 ) & 0x1 ? "Transmit" : "Receive" , ( METHOD_159 ( VAR_414 + VAR_337 + 16 ) >> 30 ) & 0x1 ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_315 , "Unknown" , METHOD_159 ( VAR_414 + VAR_337 + 16 ) & 0x3FFFFFF ) , METHOD_159 ( VAR_414 + VAR_337 + 16 ) & 0x3FFFFFF ) ) ; VAR_337 += 20 ; } break ; case VAR_327 : VAR_337 = 0 ; while ( VAR_337 + 8 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , METHOD_159 ( VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 31 ) ? "Allocated" : "Non-allocated" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 31 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 30 ) & 0x1 ? "Transmit" : "Receive" , ( METHOD_159 ( VAR_414 + VAR_337 + 4 ) >> 30 ) & 0x1 ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_315 , "Unknown" , METHOD_159 ( VAR_414 + VAR_337 + 4 ) & 0x3FFFFFF ) , METHOD_159 ( VAR_414 + VAR_337 + 4 ) & 0x3FFFFFF ) ) ; VAR_337 += 8 ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> break ; case VAR_324 <S2SV_ModEnd> : switch ( <S2SV_ModStart> ) { case VAR_326 : VAR_337 = 0 ; while ( VAR_337 + 4 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_155 ( VAR_428 , VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; VAR_337 += 4 ; } break ; case VAR_338 : VAR_337 = 0 ; while ( VAR_337 + 16 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_26 ( VAR_428 , VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; VAR_337 += 16 ; } break ; case VAR_327 : VAR_337 = 0 ; while ( VAR_337 + 4 <= VAR_415 ) { METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , METHOD_159 ( VAR_414 + VAR_337 ) , METHOD_159 ( VAR_414 + VAR_337 ) ) ) ; VAR_337 += 4 ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> break ; case VAR_341 <S2SV_ModEnd> : switch ( <S2SV_ModStart> ) { case VAR_343 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s" , METHOD_164 ( VAR_345 , "none" , METHOD_159 ( VAR_414 ) ) ) ) ; break ; case VAR_347 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s" , METHOD_164 ( VAR_349 , "none" , METHOD_159 ( VAR_414 ) ) ) ) ; break ; <S2SV_ModEnd> default : VAR_418 <S2SV_ModStart> break ; case VAR_353 <S2SV_ModEnd> : switch ( <S2SV_ModStart> ) { case VAR_355 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Flags:<S2SV_blank>%s" <S2SV_ModEnd> , METHOD_164 ( <S2SV_ModStart> , METHOD_164 ( VAR_357 <S2SV_ModEnd> , "none" , <S2SV_ModStart> , "none" , METHOD_169 ( VAR_414 ) <S2SV_ModEnd> ) ) ) <S2SV_ModStart> , "\\n\\t<S2SV_blank><S2SV_blank>UNI<S2SV_blank>Version:<S2SV_blank>%u" , METHOD_169 ( VAR_414 + 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case VAR_361 : if ( VAR_415 != 16 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } VAR_374 = METHOD_169 ( VAR_414 ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Link<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_365 , "Unknown" , VAR_374 ) , VAR_374 ) ) ; switch ( VAR_374 ) { case VAR_369 : METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Signal<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_371 , "Unknown" , METHOD_169 ( VAR_414 + 1 ) ) , METHOD_169 ( VAR_414 + 1 ) ) ) ; break ; case VAR_375 : METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Signal<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , METHOD_137 ( VAR_377 , "Unknown" , METHOD_169 ( VAR_414 + 1 ) ) , METHOD_169 ( VAR_414 + 1 ) ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Transparency:<S2SV_blank>%s" , METHOD_164 ( VAR_381 , "none" , METHOD_169 ( VAR_414 + 2 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Contiguous<S2SV_blank>Concatenation<S2SV_blank>Types:<S2SV_blank>%s" , METHOD_164 ( VAR_384 , "none" , METHOD_169 ( VAR_414 + 3 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Minimum<S2SV_blank>NCC:<S2SV_blank>%u" , <S2SV_ModEnd> METHOD_165 ( VAR_414 <S2SV_ModStart> METHOD_165 ( VAR_414 + 4 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Maximum<S2SV_blank>NCC:<S2SV_blank>%u" , METHOD_165 ( VAR_414 + 6 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Minimum<S2SV_blank>NVC:%u" , METHOD_165 ( VAR_414 + 8 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Maximum<S2SV_blank>NVC:%u" , METHOD_165 ( VAR_414 + 10 ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , METHOD_155 ( VAR_428 , VAR_414 + 12 ) , METHOD_159 ( VAR_414 + 12 ) ) ) ; break ; case VAR_398 : if ( VAR_415 != 8 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Transparency<S2SV_blank>Flags:<S2SV_blank>%s" , METHOD_164 ( VAR_400 , "none" , METHOD_159 ( VAR_414 ) ) ) ) ; METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>TCM<S2SV_blank>Monitoring<S2SV_blank>Flags:<S2SV_blank>%s" , METHOD_164 ( VAR_403 , "none" , METHOD_169 ( VAR_414 + 7 ) ) ) ) ; break ; case VAR_405 : if ( VAR_415 != 4 ) { METHOD_168 ( ( VAR_428 , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; break ; } METHOD_168 ( ( VAR_428 , "\\n\\t<S2SV_blank>Diversity:<S2SV_blank>Flags:<S2SV_blank>%s" <S2SV_ModEnd> , METHOD_164 ( <S2SV_ModStart> , METHOD_164 ( VAR_407 <S2SV_ModEnd> , "none" , <S2SV_ModStart> , "none" , METHOD_169 ( VAR_414 + 3 ) <S2SV_ModEnd> ) ) )
<S2SV_ModStart> VAR_36 ) { METHOD_4 ( ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_2 * VAR_10 = VAR_19 -> VAR_10 ; struct <S2SV_ModStart> * VAR_20 ; if ( ! VAR_10 -> VAR_19 [ 1 ] || ! VAR_10 -> VAR_19 [ 1 ] -> VAR_12 ) { METHOD_4 ( & VAR_19 -> VAR_21 , "expected<S2SV_blank>endpoint<S2SV_blank>missing\\n" ) ; return - VAR_22 ; } <S2SV_ModStart> -> VAR_14 = <S2SV_ModEnd> VAR_10 -> VAR_19
<S2SV_ModStart> ) , VAR_287 = 0 , VAR_355 <S2SV_ModStart> , VAR_225 ; if ( VAR_355 ++ ) { METHOD_67 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , VAR_350 ) ; return VAR_352 ; }
<S2SV_ModStart> { VAR_37 = VAR_34 -> VAR_9 [ <S2SV_ModEnd> VAR_40 + VAR_36 <S2SV_ModStart> VAR_40 + VAR_36 ] <S2SV_ModEnd> ; METHOD_5 (
<S2SV_ModStart> ( VAR_72 * ( TYPE_18 )
<S2SV_ModStart> ; VAR_114 = 0 ; if ( METHOD_11 ( VAR_111 , & VAR_96 , sizeof ( VAR_96 ) ) ) VAR_114 = <S2SV_ModStart> - VAR_109 ; <S2SV_ModEnd> METHOD_12 ( VAR_97 <S2SV_ModStart> ( VAR_97 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> case VAR_47 : if ( VAR_41 < 6 ) { return VAR_52 ; }
<S2SV_ModStart> VAR_85 & VAR_23 ; METHOD_9 ( VAR_80 <= VAR_100 ) ; METHOD_9 ( VAR_81 <= VAR_101 )
<S2SV_ModStart> ] == VAR_16 || VAR_18 [ 1 ] == 0 <S2SV_ModStart> ; if ( ! METHOD_5 ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( ! METHOD_5 ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0
<S2SV_ModStart> VAR_172 ) { if ( VAR_203 - VAR_211 < VAR_214 -> VAR_215 ) { * VAR_208 = ( TYPE_24 * ) VAR_211 ; if ( VAR_195 ) * VAR_195 = METHOD_22 ( VAR_214 -> VAR_197 , VAR_211 , * VAR_208 ) ; } else { <S2SV_ModStart> VAR_208 ) ; }
<S2SV_ModStart> ! METHOD_18 ( STRUCT_OR_UNION_5 ,
<S2SV_ModStart> * VAR_200 ; TYPE_14 VAR_230 ; <S2SV_ModStart> ) ) ; VAR_230 = METHOD_27 ( METHOD_37 ( VAR_221 , 3 ) ) ; if ( VAR_230 >= VAR_231 ) { return VAR_121 ; } <S2SV_ModStart> -> VAR_214 = VAR_230 <S2SV_ModEnd> + VAR_222 +
<S2SV_ModStart> case VAR_14 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ; <S2SV_ModStart> case VAR_25 : METHOD_9 ( ( VAR_82 -> VAR_85 == VAR_87 ) || ( VAR_82 -> VAR_85 == VAR_88 ) ) ; <S2SV_ModStart> case VAR_47 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ; <S2SV_ModStart> case VAR_66 : METHOD_9 ( VAR_82 -> VAR_85 == VAR_86 ) ;
<S2SV_ModStart> ; if ( ! VAR_27 ) return VAR_36 ; if (
<S2SV_ModStart> VAR_50 ) { <S2SV_ModEnd> TYPE_10 VAR_34 [ <S2SV_ModStart> VAR_34 [ VAR_20 <S2SV_ModEnd> ] ; if <S2SV_ModStart> VAR_51 ; } return METHOD_6 ( VAR_42 -> VAR_43 , VAR_47 , VAR_48 <S2SV_ModEnd> , VAR_34 , <S2SV_ModStart> , VAR_34 , <S2SV_ModEnd> VAR_49 , VAR_50 <S2SV_ModStart> VAR_50 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_5 ) { TYPE_2 VAR_6 ; if ( METHOD_3 ( VAR_4 , VAR_5 , & VAR_6 ) ) METHOD_4 ( ) ; <S2SV_ModStart> "checked_xcalloc" , ( VAR_6 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> } VAR_43 = METHOD_12 ( <S2SV_ModStart> VAR_23 -> VAR_22 , sizeof VAR_26 )
<S2SV_ModStart> VAR_12 , 1 <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_14 , 0
<S2SV_ModStart> & VAR_196 ) <S2SV_ModEnd> ) goto VAR_189 <S2SV_ModStart> VAR_161 ; } VAR_208 = METHOD_22 ( & VAR_196 ) ; if ( VAR_208 < 0 ) goto VAR_189 ;
<S2SV_ModStart> TYPE_19 VAR_184 = - 4 <S2SV_ModEnd> ; TYPE_19 VAR_202 <S2SV_ModStart> -- ) { METHOD_11 ( ) <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { METHOD_11 ( ) ; <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ) return ; METHOD_11 ( ) ; <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> break ; default
<S2SV_ModStart> : VAR_86 ; METHOD_3 ( VAR_98 >= VAR_91 -> VAR_7 && VAR_98 < ( ( TYPE_22 * ) VAR_91 -> VAR_7 + METHOD_2 ( VAR_91 ) ) ) ;
<S2SV_ModStart> "Compression<S2SV_blank>type<S2SV_blank>incompatible<S2SV_blank>with<S2SV_blank>image<S2SV_blank>type" ) ; goto VAR_52 ; <S2SV_ModStart> , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; goto VAR_52
<S2SV_ModStart> ; TYPE_6 VAR_141 = 0 ; VAR_76 -> VAR_159
<S2SV_ModStart> VAR_18 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_1 ) ; METHOD_2 ( "ANOPE_FLAGS_COMPAT" , & VAR_2 . VAR_3 -> VAR_4 , 0 , & VAR_5 , VAR_6 ) ; METHOD_3 ( "nick_can_register" ) ; METHOD_4 ( VAR_7 ) ; METHOD_3 ( "user_can_register" ) ; METHOD_5 ( VAR_7 ) ;
<S2SV_ModStart> TYPE_32 VAR_145 ; METHOD_24 ( VAR_69 ) ; <S2SV_ModStart> = VAR_384 ; <S2SV_ModEnd> { TYPE_32 VAR_118
<S2SV_ModStart> static VAR_0 struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> ) { struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_84 ; <S2SV_ModStart> ( VAR_84 -> VAR_85 ) if ( VAR_74 == VAR_84 -> VAR_86 <S2SV_ModEnd> && VAR_84 -> <S2SV_ModStart> && VAR_84 -> VAR_90 == VAR_55 <S2SV_ModEnd> && VAR_84 -> <S2SV_ModStart> && VAR_84 -> VAR_87 == VAR_58 && VAR_84 -> VAR_88 <S2SV_ModEnd> == VAR_61 && <S2SV_ModStart> ( VAR_84 -> VAR_89 <S2SV_ModEnd> ) , VAR_74 <S2SV_ModStart> = VAR_84 -> VAR_85 ; VAR_84 -> VAR_90 = VAR_55 ; VAR_84 -> VAR_87 = VAR_58 ; VAR_84 -> VAR_88 = VAR_61 ; VAR_84 -> VAR_89 <S2SV_ModEnd> = ( TYPE_6 <S2SV_ModStart> ( VAR_84 -> VAR_89 <S2SV_ModEnd> == VAR_80 ) <S2SV_ModStart> ( VAR_84 -> VAR_89 , VAR_73 , VAR_74 ) ; VAR_84 -> VAR_86 = VAR_74 ; VAR_84 -> VAR_85 <S2SV_ModEnd> = ( struct <S2SV_ModStart> = ( struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * ) METHOD_4 <S2SV_ModStart> ( VAR_84 -> VAR_85 <S2SV_ModEnd> == VAR_80 )
<S2SV_ModStart> VAR_14 , const TYPE_6 <S2SV_ModEnd> * VAR_11 ,
<S2SV_ModStart> if ( VAR_23 == VAR_25 ) { METHOD_7 ( "rfbProcessFileTransferReadBuffer:<S2SV_blank>too<S2SV_blank>big<S2SV_blank>file<S2SV_blank>transfer<S2SV_blank>length<S2SV_blank>requested:<S2SV_blank>%u" , ( unsigned TYPE_4 ) VAR_23 ) ; METHOD_5 ( VAR_17 ) ; return VAR_21 ; } if ( VAR_23 <S2SV_ModStart> METHOD_2 ( ( TYPE_7 <S2SV_ModEnd> ) VAR_23 +
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 * VAR_26 , <S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_17 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - VAR_10 <S2SV_ModEnd> ; } dctlprintk
<S2SV_ModStart> VAR_81 = 0 , VAR_109 <S2SV_ModStart> METHOD_16 if ( METHOD_21 ( & VAR_109 , VAR_76 , VAR_81 ) || VAR_68 < VAR_109 <S2SV_ModEnd> || VAR_101 <
<S2SV_ModStart> VAR_179 ] ; TYPE_20 VAR_174 ; TYPE_20 VAR_22 ; VAR_22 = METHOD_35 ( STRUCT_OR_UNION_12 -> VAR_22 ) <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> ( VAR_21 , VAR_172 , STRUCT_OR_UNION_12 ) <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> , VAR_179 , "%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%d.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%d.conf" <S2SV_ModEnd> , VAR_15 , <S2SV_ModStart> , VAR_15 , <S2SV_ModEnd> VAR_172 -> VAR_18 <S2SV_ModStart> , VAR_21 , <S2SV_ModEnd> VAR_22 , VAR_21 <S2SV_ModStart> , VAR_21 , <S2SV_ModEnd> VAR_22 ) ;
<S2SV_ModStart> goto VAR_114 ; <S2SV_ModEnd> VAR_116 = -
<S2SV_ModStart> VAR_44 ) ; METHOD_13 ( VAR_38 ) ; METHOD_14 ( VAR_38 ) ; METHOD_15 ( VAR_38 ) ;
<S2SV_ModStart> -> VAR_13 ; TYPE_2 VAR_62 = <S2SV_ModEnd> VAR_61 -> VAR_52 <S2SV_ModStart> VAR_42 & VAR_43 ; if ( VAR_61 -> VAR_56 && VAR_36 > 0 ) { METHOD_1 ( VAR_61 -> VAR_30 ) ; VAR_36 = METHOD_2 ( VAR_61 -> VAR_60 , VAR_36 , & VAR_61 -> VAR_26 ) ; if ( METHOD_3 ( & VAR_61 -> VAR_26 ) ) VAR_36 = - VAR_28 ; METHOD_4 ( VAR_61 -> VAR_30 ) ; } VAR_61 -> VAR_52 -> METHOD_5 ( VAR_61 -> VAR_52 , VAR_36 , VAR_36 ) ; if ( VAR_61 -> VAR_45 -> VAR_46 && ! VAR_62 <S2SV_ModEnd> ) METHOD_6 ( <S2SV_ModStart> -> VAR_50 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_55 | VAR_56 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_55 | VAR_56 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_23 ) ; METHOD_12 ( & VAR_46 -> VAR_48 ) ;
<S2SV_ModStart> ; if ( VAR_216 == VAR_116 ) return VAR_48 ; if ( <S2SV_ModStart> VAR_119 ) && VAR_216 -> VAR_115 == VAR_116 <S2SV_ModEnd> ) return VAR_45 <S2SV_ModStart> ; if ( ( VAR_217 & VAR_119 ) && ( VAR_217 & VAR_108 ) ) return VAR_45 <S2SV_ModEnd> ; if (
<S2SV_ModStart> && VAR_149 ) { <S2SV_ModStart> 0 ) ; } else { <S2SV_ModEnd> METHOD_16 ( VAR_142 <S2SV_ModStart> 1 ) ; }
<S2SV_ModStart> == * VAR_289 && VAR_289 [ 1 ]
<S2SV_ModStart> VAR_14 ) ; if ( METHOD_9 ( ! METHOD_22 ( & VAR_35 -> VAR_36 ) ) ) { struct STRUCT_OR_UNION_0 * VAR_37 , * VAR_38 ; METHOD_23 ( VAR_37 , VAR_38 , & VAR_35 -> VAR_36 , VAR_39 ) { METHOD_24 ( VAR_37 ) ; } }
<S2SV_ModStart> 0 ) { if ( ! METHOD_6 ( VAR_45 , & STRUCT_OR_UNION_7 -> VAR_46 ) ) <S2SV_ModStart> 0 ] ; else VAR_41 = VAR_47 ;
<S2SV_ModStart> return - VAR_13 ; if ( METHOD_8 ( & VAR_32 -> VAR_36 ) ) return - VAR_37
<S2SV_ModStart> ; if ( ! VAR_123 <S2SV_ModEnd> || VAR_123 == <S2SV_ModStart> VAR_123 == VAR_102 || VAR_123 == VAR_124
<S2SV_ModStart> -> VAR_4 ; METHOD_2 ( & VAR_9 -> VAR_11 -> VAR_12 ) ; <S2SV_ModStart> VAR_10 ) ; METHOD_3 ( & VAR_9 -> VAR_11 -> VAR_12 ) ;
<S2SV_ModStart> , VAR_5 , VAR_6 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = VAR_64 ; VAR_110 -> VAR_48 = VAR_110 -> VAR_60 ; VAR_110 -> VAR_51 = VAR_110 -> VAR_56 ; return VAR_65 <S2SV_ModEnd> ; } VAR_110
<S2SV_ModStart> ( ! VAR_68 || ! VAR_86
<S2SV_ModStart> ; TYPE_4 VAR_97 = VAR_103 ; TYPE_4 VAR_99 = VAR_103 <S2SV_ModEnd> ; TYPE_5 VAR_98 <S2SV_ModStart> VAR_95 ) ; VAR_100 : METHOD_17 ( & VAR_98 , & VAR_97 ) ; METHOD_17 ( & VAR_98 , & VAR_99 ) ; <S2SV_ModEnd> METHOD_18 ( VAR_101
<S2SV_ModStart> -> VAR_25 . VAR_47 = VAR_48 | VAR_49 | VAR_50 | ( VAR_17 & VAR_51 ) <S2SV_ModEnd> ; METHOD_4 (
<S2SV_ModStart> VAR_87 = 0 <S2SV_ModEnd> ; switch (
<S2SV_ModStart> ; if ( VAR_311 == VAR_107 ) return VAR_66 ; if ( <S2SV_ModStart> VAR_292 ) && VAR_311 -> VAR_296 == VAR_107 <S2SV_ModEnd> ) return VAR_63 <S2SV_ModStart> ( VAR_312 & VAR_292 ) && ( VAR_312 & VAR_59 ) ) return VAR_63 ; if ( ( VAR_312 & <S2SV_ModStart> ) return VAR_63 <S2SV_ModEnd> ; VAR_325 =
<S2SV_ModStart> ( ) ; if ( ! METHOD_7 ( METHOD_3 ( STRUCT_OR_UNION_5 -> VAR_9 ) ) ) VAR_8 = METHOD_8 ( - VAR_10 ) ; else
<S2SV_ModStart> return - VAR_13 ; if ( METHOD_8 ( & VAR_32 -> VAR_36 ) ) return - VAR_37
<S2SV_ModStart> } VAR_76 = METHOD_20 ( VAR_86 , VAR_86 -> VAR_38 , VAR_86 -> VAR_42 ) ; if ( VAR_76 == VAR_80 ) { METHOD_21 ( VAR_81 , & VAR_86 -> VAR_81 ) ; return ( METHOD_9 ( VAR_86 ) ) ; } VAR_76 =
<S2SV_ModStart> TYPE_18 METHOD_0 ( TYPE_7 * VAR_341 , <S2SV_ModStart> ) VAR_339 ; <S2SV_ModEnd> struct STRUCT_OR_UNION_1 * <S2SV_ModStart> ; TYPE_12 VAR_166 <S2SV_ModEnd> ; TYPE_18 VAR_174 <S2SV_ModStart> VAR_346 ; } <S2SV_ModEnd> dctlprintk ( VAR_341
<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec
<S2SV_ModStart> 0 ) { if ( VAR_19 < 20 ) { METHOD_17 ( "Truncated<S2SV_blank>NB10<S2SV_blank>entry,<S2SV_blank>not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>to<S2SV_blank>parse\\n" ) ; return 0 ; } STRUCT_OR_UNION_5 VAR_97 = { { 0 } } <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> VAR_85 ) ; VAR_102 -> VAR_95 [ 0 ] = 0 ; if ( VAR_97 . VAR_95 ) { <S2SV_ModStart> 1 ) ; }
<S2SV_ModStart> VAR_57 ) ; METHOD_11 ( VAR_25 , 0 , sizeof ( * VAR_25 ) ) ;
<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 <S2SV_ModEnd> , regs ,
<S2SV_ModStart> "corrupt<S2SV_blank>BSON" ) ; METHOD_80 ( "test59.bson" , VAR_103 , 9 , VAR_103 , "corrupt<S2SV_blank>BSON" ) ;
<S2SV_ModStart> . VAR_170 ) ) { struct STRUCT_OR_UNION_1 VAR_273 ; if ( STRUCT_OR_UNION_1 ( VAR_192 , & VAR_273 ) == 0 && METHOD_7 ( VAR_273 . VAR_170 ) ) { TYPE_26 VAR_274 ; if ( VAR_261 . VAR_231 == 0 || ( METHOD_40 ( METHOD_38 ( VAR_246 , VAR_247 ) , & VAR_274 ) == 0 && VAR_261 . VAR_231 == VAR_274 ) ) { VAR_261 = VAR_273 ; } } <S2SV_ModEnd> } if (
<S2SV_ModStart> VAR_153 * VAR_199 ; VAR_153 * VAR_208 <S2SV_ModStart> ) ; } if ( METHOD_31 <S2SV_ModEnd> ( VAR_205 , <S2SV_ModStart> ( VAR_205 , & VAR_209 <S2SV_ModEnd> , & VAR_207 <S2SV_ModStart> ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"type_ignores\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Module" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( VAR_204 , "Module<S2SV_blank>field<S2SV_blank>\\"type_ignores\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" <S2SV_ModEnd> , VAR_207 -> <S2SV_ModStart> VAR_207 ) ; VAR_208 <S2SV_ModEnd> = METHOD_35 ( <S2SV_ModStart> ; if ( VAR_208 <S2SV_ModEnd> == VAR_202 ) <S2SV_ModStart> ++ ) { TYPE_24 <S2SV_ModEnd> VAR_196 ; VAR_188 <S2SV_ModStart> ; VAR_188 = METHOD_44 <S2SV_ModEnd> ( METHOD_37 ( <S2SV_ModStart> ( VAR_192 , "Module<S2SV_blank>field<S2SV_blank>\\"type_ignores\\"<S2SV_blank>changed<S2SV_blank>size<S2SV_blank>during<S2SV_blank>iteration" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> } METHOD_39 ( VAR_208 <S2SV_ModEnd> , VAR_195 , <S2SV_ModStart> * VAR_201 = METHOD_12 ( VAR_199 , VAR_208 <S2SV_ModEnd> , VAR_200 ) <S2SV_ModStart> TYPE_19 * ) VAR_68 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_152 ) { VAR_153 * <S2SV_ModEnd> VAR_199 ; if <S2SV_ModStart> ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Interactive" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( VAR_204 , "Interactive<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" <S2SV_ModEnd> , VAR_207 -> <S2SV_ModStart> ( VAR_192 , "Interactive<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>changed<S2SV_blank>size<S2SV_blank>during<S2SV_blank>iteration" ) ; goto VAR_206 ; } METHOD_39 ( VAR_199 , VAR_195 , VAR_196 ) ; } METHOD_40 ( VAR_207 ) ; } * VAR_201 = METHOD_24 ( VAR_199 , VAR_200 ) ; if ( * VAR_201 == VAR_202 ) goto VAR_206 ; return 0 ; } VAR_152 = METHOD_30 ( VAR_205 , ( TYPE_19 * ) VAR_124 ) ; if ( VAR_152 == - 1 ) { return 1 ; } if ( VAR_152 ) { TYPE_17 VAR_199 ; if ( METHOD_31 ( VAR_205 , & VAR_156 , & VAR_207 ) < 0 ) { return 1 ; } if ( VAR_207 == VAR_202 ) { PyErr_SetString ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Expression" ) ; return 1 ; } else { TYPE_20 VAR_188 ; VAR_188 = METHOD_27 ( VAR_207 , & VAR_199 , VAR_200 ) ; if ( VAR_188 != 0 ) goto VAR_206 ; METHOD_40 ( VAR_207 ) ; } * VAR_201 = METHOD_29 ( VAR_199 , VAR_200 ) ; if ( * VAR_201 == VAR_202 ) goto VAR_206 ; return 0 ; } VAR_152 = METHOD_30 ( VAR_205 , ( TYPE_19 * ) VAR_210 ) ; if ( VAR_152 == - 1 ) { return 1 ; } if ( VAR_152 ) { VAR_153 * VAR_211 ; TYPE_17 VAR_212 ; if ( METHOD_31 ( VAR_205 , & VAR_213 , & VAR_207 ) < 0 ) { return 1 ; } if ( VAR_207 == VAR_202 ) { PyErr_SetString ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"argtypes\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionType" ) ; return 1 ; } else { TYPE_20 VAR_188 ; TYPE_22 VAR_190 ; TYPE_22 VAR_195 ; if ( ! METHOD_32 ( VAR_207 ) ) { METHOD_42 ( VAR_204 , "FunctionType<S2SV_blank>field<S2SV_blank>\\"argtypes\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" , VAR_207 -> VAR_167 -> VAR_168 ) ; goto VAR_206 ; } VAR_190 = METHOD_38 ( VAR_207 ) ; VAR_211 = METHOD_35 ( VAR_190 , VAR_200 ) ; if ( VAR_211 == VAR_202 ) goto VAR_206 ; for ( VAR_195 = 0 ; VAR_195 < VAR_190 ; VAR_195 ++ ) { TYPE_17 VAR_196 ; VAR_188 = METHOD_27 ( METHOD_37 ( VAR_207 , VAR_195 ) , & VAR_196 , VAR_200 ) ; if ( VAR_188 != 0 ) goto VAR_206 ; if ( VAR_190 != METHOD_38 ( VAR_207 ) ) { PyErr_SetString ( VAR_192 , "FunctionType<S2SV_blank>field<S2SV_blank>\\"argtypes\\"<S2SV_blank>changed<S2SV_blank>size<S2SV_blank>during<S2SV_blank>iteration" ) ; goto VAR_206 ; } METHOD_39 ( VAR_211 , VAR_195 , VAR_196 ) ; } METHOD_40 ( VAR_207 ) ; } if ( METHOD_31 ( VAR_205 , & VAR_214 , & VAR_207 ) < 0 ) { return 1 ; } if ( VAR_207 == VAR_202 ) { PyErr_SetString ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"returns\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>FunctionType" ) ; return 1 ; } else { TYPE_20 VAR_188 ; VAR_188 = METHOD_27 ( VAR_207 , & VAR_212 , VAR_200 ) ; if ( VAR_188 != 0 ) goto VAR_206 ; METHOD_40 ( VAR_207 ) ; } * VAR_201 = METHOD_45 ( VAR_211 , VAR_212 , VAR_200 ) ; if ( * VAR_201 == VAR_202 ) goto VAR_206 ; return 0 ; } VAR_152 = METHOD_30 ( VAR_205 , ( TYPE_19 * ) VAR_150 ) ; if ( VAR_152 == - 1 ) { return 1 ; } if ( VAR_152 ) { VAR_153 * VAR_199 ; if ( METHOD_31 ( VAR_205 , & VAR_156 , & VAR_207 ) < 0 ) { return 1 ; } if ( VAR_207 == VAR_202 ) { PyErr_SetString ( VAR_204 , "required<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>missing<S2SV_blank>from<S2SV_blank>Suite" ) ; return 1 ; } else { TYPE_20 VAR_188 ; TYPE_22 VAR_190 ; TYPE_22 VAR_195 ; if ( ! METHOD_32 ( VAR_207 ) ) { METHOD_42 ( VAR_204 , "Suite<S2SV_blank>field<S2SV_blank>\\"body\\"<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>list,<S2SV_blank>not<S2SV_blank>a<S2SV_blank>%.200s" , VAR_207 -> VAR_167 -> VAR_168 ) ; goto VAR_206 ; } VAR_190 = METHOD_38 ( VAR_207 ) ; VAR_199 = METHOD_35 ( VAR_190 , VAR_200 ) ; if ( VAR_199 == VAR_202 ) goto VAR_206 ; for ( VAR_195 = 0 ; VAR_195 < VAR_190 ; VAR_195 ++ ) { TYPE_23 VAR_196 ; VAR_188 = METHOD_36 ( METHOD_37 ( VAR_207 , VAR_195 ) , & VAR_196 , VAR_200 ) ; if ( VAR_188 != 0 ) goto VAR_206 ; if ( VAR_190 != METHOD_38 ( VAR_207 ) ) { PyErr_SetString ( VAR_192 ,
<S2SV_ModStart> VAR_8 , [ <S2SV_ModEnd> VAR_11 ] = <S2SV_ModStart> ] = VAR_14 <S2SV_ModEnd> , } ;
<S2SV_ModStart> } VAR_205 = METHOD_65 <S2SV_ModEnd> ( VAR_225 , <S2SV_ModStart> VAR_226 , VAR_273 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_50 ; } if ( VAR_46 . VAR_29 != VAR_51 -> VAR_29 || VAR_46 . VAR_47 != VAR_51 -> VAR_47 ) { VAR_52 = - VAR_15 ; goto VAR_50 ; } <S2SV_ModStart> VAR_51 ) + VAR_51 -> <S2SV_ModEnd> VAR_47 ) )
<S2SV_ModStart> TYPE_4 VAR_59 ; const TYPE_2 * VAR_61 = VAR_55 ; if ( VAR_52 < VAR_60 ) goto VAR_62 ; METHOD_13 ( * VAR_55 , VAR_60 ) ; <S2SV_ModStart> : if ( VAR_52 < 2 ) goto VAR_62 ; METHOD_14 ( VAR_55 ) ; if ( <S2SV_ModStart> VAR_60 ) ; VAR_62 : METHOD_12 ( ( VAR_58 , "[|chdlc]" ) ) ; return VAR_58 -> VAR_54 - VAR_61 ;
<S2SV_ModStart> VAR_7 ) > 1 ) return - VAR_8 ; if ( VAR_5 -> VAR_15 -> VAR_16 !=
<S2SV_ModStart> VAR_182 , VAR_182 , VAR_191
<S2SV_ModStart> VAR_119 < VAR_24 && VAR_87 < sizeof ( VAR_121 ) - 1 ; VAR_119 ++ , VAR_87 <S2SV_ModEnd> ++ ) { <S2SV_ModStart> 0x80 ) { if ( VAR_87 + 1 < sizeof ( VAR_121 ) - 1 ) { <S2SV_ModStart> ; } else break ; } else <S2SV_ModStart> 0xc0 ) { if ( VAR_87 + 1 < sizeof ( VAR_121 ) - 1 && VAR_119 + 1 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0xe0 ) { if ( VAR_87 + 2 < sizeof ( VAR_121 ) - 1 && VAR_119 + 2 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0xf0 ) { if ( VAR_87 + 3 < sizeof ( VAR_121 ) - 1 && VAR_119 + 3 < VAR_24 ) { VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; VAR_119 ++ ; VAR_87 ++ ; } else { break ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ; } } if ( VAR_87 < sizeof ( VAR_121 ) - 1 && VAR_119 < VAR_24 ) VAR_121 [ VAR_87 ] = VAR_120 [ VAR_119 ] ; } if ( VAR_87 >= sizeof ( VAR_121 ) ) VAR_121 [ sizeof ( VAR_121 ) - 1 ] = 0 ; else <S2SV_ModEnd> VAR_121 [ VAR_87
<S2SV_ModStart> ) != VAR_14 || VAR_13 -> VAR_19 != VAR_18 -> VAR_19
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_11 <S2SV_ModEnd> METHOD_0 ( const <S2SV_ModStart> VAR_0 , struct STRUCT_OR_UNION_4 * VAR_49 , TYPE_11 VAR_50 <S2SV_ModEnd> , struct STRUCT_OR_UNION_2 <S2SV_ModStart> VAR_18 ) { TYPE_12 * VAR_51 = ( TYPE_12 * ) VAR_49 -> VAR_52 <S2SV_ModEnd> ; union STRUCT_OR_UNION_3 <S2SV_ModStart> STRUCT_OR_UNION_3 VAR_46 ; TYPE_11 VAR_53 = VAR_54 ; METHOD_4 ( VAR_46 , VAR_51 , VAR_55 . VAR_56 ) { TYPE_13 VAR_45 = METHOD_2 ( VAR_46 . VAR_27 -> VAR_45 ) ; * VAR_18 = VAR_46 . VAR_27 ; switch ( VAR_46 . VAR_27 -> VAR_28 ) { case VAR_57 : break ; case VAR_58 : if ( VAR_45 != sizeof ( VAR_59 ) ) return VAR_54 ; VAR_53 = VAR_60 ; break ; case VAR_61 : if ( VAR_45 != sizeof ( VAR_62 ) ) return VAR_54 ; VAR_53 = VAR_60 ; break ; case VAR_29 : case VAR_30 : case VAR_31 : if ( VAR_50 && ! VAR_53 ) return VAR_54 ; VAR_45 = METHOD_2 ( VAR_46 . VAR_51 -> VAR_37 . VAR_45 ) ; if ( VAR_45 < sizeof ( TYPE_10 ) + sizeof ( TYPE_9 ) ) return VAR_54 ; break ; case VAR_40 : case VAR_41 : if ( VAR_45 != sizeof ( TYPE_10 ) ) return VAR_54 ; break ; default : return VAR_54 ; } } if ( VAR_50 && ! VAR_53 ) return VAR_54 ; if ( ! VAR_50 && VAR_53 ) return VAR_54 ; if ( <S2SV_ModEnd> VAR_46 . VAR_47 <S2SV_ModStart> VAR_46 . VAR_47 != VAR_49 -> VAR_48 ) return VAR_54 ; return VAR_60 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_0 VAR_61 ; TYPE_0 VAR_80 = VAR_79 ; <S2SV_ModStart> ) ) { VAR_80 = VAR_18 ; goto VAR_81 <S2SV_ModEnd> ; } METHOD_5 <S2SV_ModStart> 0 ) { VAR_80 = VAR_35 ; goto VAR_81 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { VAR_80 = VAR_42 ; goto VAR_81 <S2SV_ModEnd> ; } METHOD_14 <S2SV_ModStart> 0 ) { VAR_80 = VAR_66 ; goto VAR_81 <S2SV_ModEnd> ; } VAR_75 <S2SV_ModStart> = VAR_77 ; VAR_80 = VAR_78 ; } return VAR_80 ; VAR_81 : METHOD_19 ( VAR_69 ) ; return VAR_80 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_7 ; const TYPE_6 * VAR_66 = METHOD_4 ( VAR_84 ) -> VAR_66 ; TYPE_8 VAR_77 ; TYPE_8 VAR_72 = ( VAR_87 -> VAR_72 < VAR_66 -> VAR_89 ) ? VAR_87 -> VAR_72 : 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_49 ) { <S2SV_ModEnd> TYPE_8 VAR_67 = <S2SV_ModStart> || VAR_73 <= METHOD_11 ( VAR_72 , VAR_66 ) <S2SV_ModEnd> || METHOD_6 ( <S2SV_ModStart> ( VAR_66 , VAR_72 <S2SV_ModEnd> , VAR_67 ) <S2SV_ModStart> -> VAR_72 = VAR_67 <S2SV_ModEnd> ; } if
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_0 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1
<S2SV_ModStart> { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_23 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_23 )
<S2SV_ModStart> , VAR_261 + VAR_263 + 3 , <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> - 3 ) ; VAR_263 += <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> VAR_265 - 3 ; VAR_265 -= <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> - 3 ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> TYPE_30 * VAR_304 ; if ( VAR_300 < 0 || VAR_300 > 4194304 ) { METHOD_80 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_311 ) ; return VAR_313 ; } VAR_304
<S2SV_ModStart> ( ) ; if ( ! METHOD_7 ( METHOD_3 ( STRUCT_OR_UNION_5 -> VAR_9 ) ) ) VAR_8 = METHOD_8 ( - VAR_10 ) ; else
<S2SV_ModStart> TYPE_11 VAR_381 ; METHOD_44 ( & VAR_383 -> VAR_376 [ VAR_385 ] , 0 , sizeof ( VAR_235 ) ) ;
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 <S2SV_ModEnd> VAR_17 ; unsigned <S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! METHOD_4 ( & VAR_17 , VAR_13 ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> = METHOD_5 ( & <S2SV_ModStart> if ( VAR_17 . <S2SV_ModEnd> VAR_18 ) VAR_21
<S2SV_ModStart> VAR_37 ; struct STRUCT_OR_UNION_18 <S2SV_ModEnd> * VAR_29 =
<S2SV_ModStart> { if ( VAR_173 == VAR_143 ) break ; if (
<S2SV_ModStart> * VAR_85 , TYPE_7 * VAR_84 , TYPE_8 * VAR_75 ) { METHOD_10 <S2SV_ModEnd> ( VAR_84 , <S2SV_ModStart> >= VAR_8 ) METHOD_11 <S2SV_ModEnd> ( VAR_84 , <S2SV_ModStart> { METHOD_4 ( VAR_75 -> <S2SV_ModEnd> VAR_76 . VAR_42 <S2SV_ModStart> VAR_85 -> VAR_86 -> <S2SV_ModEnd> VAR_87 . VAR_42 <S2SV_ModStart> { METHOD_6 ( VAR_75 -> <S2SV_ModEnd> VAR_76 . VAR_65 <S2SV_ModStart> VAR_85 -> VAR_86 -> <S2SV_ModEnd> VAR_87 . VAR_65 <S2SV_ModStart> { METHOD_8 ( VAR_75 -> <S2SV_ModEnd> VAR_76 . VAR_88 <S2SV_ModStart> VAR_85 -> VAR_86 -> <S2SV_ModEnd> VAR_87 . VAR_88
<S2SV_ModStart> * VAR_77 ; struct STRUCT_OR_UNION_5 * STRUCT_OR_UNION_5 ; <S2SV_ModStart> = VAR_90 ; STRUCT_OR_UNION_5 = VAR_94 -> STRUCT_OR_UNION_5 ; VAR_99 = VAR_94 -> VAR_99 ; <S2SV_ModStart> ; METHOD_24 ( <S2SV_ModEnd> STRUCT_OR_UNION_5 ) ; <S2SV_ModStart> ; METHOD_25 ( <S2SV_ModEnd> VAR_99 ) ;
<S2SV_ModStart> TYPE_4 VAR_12 ; if ( VAR_7 < 0 || VAR_7 >= 32 ) { return - 1 ; } <S2SV_ModEnd> VAR_13 = 0
<S2SV_ModStart> ; TYPE_4 VAR_100 = VAR_106 ; TYPE_4 VAR_102 = VAR_106 <S2SV_ModEnd> ; TYPE_5 VAR_101 <S2SV_ModStart> VAR_98 ) ; VAR_103 : METHOD_19 ( & VAR_101 , & VAR_100 ) ; METHOD_19 ( & VAR_101 , & VAR_102 ) ; <S2SV_ModEnd> METHOD_20 ( VAR_104
<S2SV_ModStart> ( VAR_195 ) ; if ( VAR_154 < 0 || VAR_139 < 0 ) return - VAR_163
<S2SV_ModStart> if ( VAR_116 <S2SV_ModEnd> != VAR_117 )
<S2SV_ModStart> = VAR_27 ; VAR_28 = VAR_27 ;
<S2SV_ModStart> , VAR_7 ) METHOD_5 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 , <S2SV_ModStart> STRUCT_OR_UNION_8 , VAR_10 <S2SV_ModEnd> ) ; METHOD_4
<S2SV_ModStart> VAR_5 ) { if ( VAR_5 )
<S2SV_ModStart> [ VAR_90 ] && VAR_94 -> VAR_89 [ VAR_90 ]
<S2SV_ModStart> VAR_0 , "usage:<S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>[-Dd]<S2SV_blank>[-a<S2SV_blank>bind_address]<S2SV_blank>[-E<S2SV_blank>fingerprint_hash]\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-P<S2SV_blank>pkcs11_whitelist]<S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n" <S2SV_ModEnd> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>-k\\n" ) ;
<S2SV_ModStart> |= VAR_23 ; <S2SV_ModEnd> METHOD_4 ( VAR_50
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> 1 ) ; if ( ! <S2SV_ModStart> , VAR_47 ) ) { if ( VAR_79 == 0 ) VAR_79 = - VAR_80 ; break ; } <S2SV_ModEnd> VAR_64 = VAR_78
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_33 <S2SV_ModEnd> = STRUCT_OR_UNION_14 -> <S2SV_ModStart> -> VAR_8 ; TYPE_2 VAR_59 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> & VAR_33 -> VAR_58 ) ; VAR_59 = METHOD_19 ( STRUCT_OR_UNION_14 , VAR_9 , VAR_4 ) <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> & VAR_33 -> VAR_58 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_59 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_8 ) ; METHOD_3 ( VAR_12 ) ; <S2SV_ModStart> -> VAR_14 ; METHOD_4 ( VAR_12 ) ;
<S2SV_ModStart> METHOD_5 ) ; METHOD_4 ( "server<S2SV_blank>disconnected" , ( TYPE_2 ) VAR_4 ) ;
<S2SV_ModStart> , VAR_176 ; TYPE_10 VAR_103 , VAR_106 ; TYPE_12 VAR_186 , VAR_188 ; TYPE_12 VAR_139 , VAR_141 , VAR_143 ; TYPE_13 VAR_109 , VAR_112 ; TYPE_14 VAR_136 ; TYPE_15 VAR_114 , VAR_118 , VAR_126 , VAR_131 ; if ( VAR_94 == 0 ) { TYPE_9 VAR_60 = METHOD_84 ( 0 ) ; TYPE_9 VAR_62 = METHOD_84 ( 0 ) ; TYPE_9 VAR_64 = METHOD_84 ( 0 ) ; <S2SV_ModEnd> VAR_60 = METHOD_5 <S2SV_ModStart> = METHOD_67 ( <S2SV_ModEnd> VAR_163 [ VAR_94 <S2SV_ModStart> = METHOD_67 ( <S2SV_ModEnd> VAR_163 [ VAR_94
<S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_15 ; TYPE_1 VAR_16 <S2SV_ModStart> . VAR_12 = METHOD_4 <S2SV_ModEnd> ( VAR_9 , <S2SV_ModStart> VAR_6 , & VAR_16 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( METHOD_2 ( VAR_16 <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) ) { <S2SV_ModEnd> VAR_15 . VAR_12 <S2SV_ModStart> VAR_15 . VAR_12 -- ; VAR_16 += VAR_6 ; } <S2SV_ModEnd> VAR_15 . VAR_14 <S2SV_ModStart> VAR_15 . VAR_14 = VAR_16 <S2SV_ModEnd> ; return VAR_15
<S2SV_ModStart> TYPE_3 * VAR_21 , TYPE_4 VAR_22 <S2SV_ModStart> VAR_9 , VAR_21 , VAR_22 <S2SV_ModStart> VAR_20 , VAR_21 , VAR_22
<S2SV_ModStart> ; TYPE_10 VAR_110 ; VAR_188 -> VAR_184 = 0
<S2SV_ModStart> ; TYPE_23 VAR_123 ; unsigned TYPE_23 <S2SV_ModEnd> VAR_99 ; TYPE_9
<S2SV_ModStart> VAR_39 ; } if ( VAR_16 == VAR_40 ) return - VAR_37 ;
<S2SV_ModStart> VAR_12 ) { TYPE_2 <S2SV_ModEnd> VAR_15 = ( <S2SV_ModStart> VAR_15 = ( TYPE_2 <S2SV_ModEnd> ) VAR_12 ->
<S2SV_ModStart> VAR_20 ) ; METHOD_4 ( VAR_21 -> VAR_22 ) ;
<S2SV_ModStart> * VAR_15 , <S2SV_ModEnd> TYPE_5 VAR_9 , <S2SV_ModStart> TYPE_5 VAR_9 , vpx_reader <S2SV_ModEnd> * VAR_17 ) <S2SV_ModStart> VAR_17 ) { TYPE_3 VAR_20 = VAR_14 -> VAR_20 ; TYPE_4 VAR_12 = VAR_15 -> VAR_21 [ 0 ] -> VAR_22 . VAR_23 ;
<S2SV_ModStart> ~ VAR_38 ; if ( ( VAR_97 & VAR_109 ) && ( VAR_107 -> VAR_107 . VAR_37 & VAR_110 ) ) VAR_107 -> VAR_107 . VAR_37 |= VAR_111 ;
<S2SV_ModStart> VAR_83 ) { <S2SV_ModEnd> const TYPE_10 * <S2SV_ModStart> , VAR_76 ; <S2SV_ModEnd> METHOD_25 ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VAR_67 = METHOD_18 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> for ( VAR_76 <S2SV_ModStart> , '/' ) <S2SV_ModEnd> ) == 0 <S2SV_ModStart> VAR_77 = VAR_78 <S2SV_ModEnd> ; METHOD_24 (
<S2SV_ModStart> ; TYPE_8 VAR_149 = 0 ; TYPE_8 VAR_168 <S2SV_ModStart> ; VAR_122 : VAR_168 ++ ; if ( VAR_168 > VAR_163 -> VAR_169 ) return VAR_92 ;
<S2SV_ModStart> VAR_50 ) { TYPE_7 VAR_63 , VAR_64 , VAR_65 ; TYPE_4 VAR_66 = - 1 ; TYPE_4 VAR_62 = - 1 , VAR_44 <S2SV_ModEnd> = - 1 <S2SV_ModStart> 1 , VAR_35 <S2SV_ModEnd> ; TYPE_5 VAR_39 <S2SV_ModStart> 0 ) { METHOD_25 ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , METHOD_4 <S2SV_ModStart> ) ; return VAR_66 <S2SV_ModEnd> ; } VAR_62 <S2SV_ModStart> 0 ) { METHOD_25 ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , VAR_16 <S2SV_ModStart> VAR_16 ) ; goto VAR_70 ; } VAR_35 = getresuid ( & VAR_63 , & VAR_65 , & VAR_64 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>retrieve<S2SV_blank>real,<S2SV_blank>effective,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>" "user<S2SV_blank>IDs:<S2SV_blank>%s\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_70 ; } VAR_35 = <S2SV_ModEnd> METHOD_22 ( VAR_62 <S2SV_ModStart> ( VAR_62 , VAR_67 ) ; <S2SV_ModEnd> METHOD_24 ( VAR_62 <S2SV_ModStart> VAR_62 ) ; VAR_62 = - 1 ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>of<S2SV_blank>" "the<S2SV_blank>container<S2SV_blank>with<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_16 , METHOD_26 ( VAR_68 ) ) ; goto VAR_70 ; } VAR_35 = METHOD_27 ( VAR_63 , VAR_63 , 0 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>drop<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>and<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>0:<S2SV_blank>%s.\\n" , VAR_63 , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> = VAR_26 ; VAR_44 = METHOD_10 ( VAR_36 ) ; <S2SV_ModStart> if ( ! VAR_44 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>netdev<S2SV_blank>index:<S2SV_blank>%s.\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 ; } } VAR_35 = METHOD_12 ( VAR_36 , * VAR_50 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Error<S2SV_blank>%d<S2SV_blank>renaming<S2SV_blank>netdev<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>container.\\n" , VAR_35 , <S2SV_ModEnd> VAR_36 , * <S2SV_ModStart> * VAR_50 ) ; goto VAR_69 <S2SV_ModEnd> ; } if <S2SV_ModStart> [ VAR_41 ] ; TYPE_6 <S2SV_ModEnd> * VAR_49 = <S2SV_ModStart> ) ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name:<S2SV_blank>%s.\\n" , METHOD_26 ( VAR_68 ) ) ; goto VAR_69 <S2SV_ModEnd> ; } * <S2SV_ModStart> VAR_50 ) goto VAR_69 ; } VAR_66 = 0 ; VAR_69 : VAR_35 = METHOD_27 ( VAR_63 , VAR_65 , VAR_64 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>restore<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_63 , VAR_65 , VAR_64 , METHOD_26 ( VAR_68 ) ) ; VAR_66 = - 1 ; } VAR_35 = <S2SV_ModEnd> METHOD_22 ( VAR_59 <S2SV_ModStart> ( VAR_59 , VAR_67 ) ; if ( VAR_35 < 0 ) { METHOD_25 ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>original<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>" "of<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , VAR_59 , METHOD_26 ( VAR_68 ) ) ; VAR_66 = - 1 ; } VAR_70 : if ( VAR_62 >= 0 ) METHOD_24 ( VAR_62 ) ; METHOD_24 ( <S2SV_ModEnd> VAR_59 ) ; <S2SV_ModStart> ) ; return VAR_66 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_137 ] , METHOD_12 ( VAR_134 [ VAR_137 - 1 ] , VAR_136 [ VAR_137 ] ) <S2SV_ModEnd> ) ; VAR_134
<S2SV_ModStart> VAR_18 ) ; METHOD_3 <S2SV_ModEnd> ( VAR_19 ,
<S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_46 <S2SV_ModEnd> ) ; VAR_31 <S2SV_ModStart> ( VAR_41 , VAR_47 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_31 & VAR_48 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_49 <S2SV_ModEnd> ) ; VAR_41 <S2SV_ModStart> ( VAR_31 & VAR_50 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_51 <S2SV_ModEnd> ) ; VAR_41 <S2SV_ModStart> VAR_31 & ( VAR_52 | VAR_53 <S2SV_ModEnd> ) ) != <S2SV_ModStart> ( VAR_41 , VAR_47 , VAR_52 | VAR_53 <S2SV_ModEnd> ) ; VAR_44 <S2SV_ModStart> ( VAR_41 , VAR_45 , VAR_46 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> STRUCT_OR_UNION_0 VAR_61 ; TYPE_0 VAR_80 = VAR_79 ; <S2SV_ModStart> ) ) { VAR_80 = VAR_18 ; goto VAR_81 <S2SV_ModEnd> ; } METHOD_5 <S2SV_ModStart> 0 ) { VAR_80 = VAR_35 ; goto VAR_81 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { VAR_80 = VAR_42 ; goto VAR_81 <S2SV_ModEnd> ; } METHOD_14 <S2SV_ModStart> 0 ) { VAR_80 = VAR_66 ; goto VAR_81 <S2SV_ModEnd> ; } VAR_75 <S2SV_ModStart> = VAR_77 ; VAR_80 = VAR_78 ; } return VAR_80 ; VAR_81 : METHOD_19 ( VAR_69 ) ; return VAR_80 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = METHOD_5 ( ( TYPE_0 struct STRUCT_OR_UNION_2 * * )
<S2SV_ModStart> VAR_12 . VAR_13 <S2SV_ModEnd> ) return 0
<S2SV_ModStart> VAR_14 ; TYPE_1 * VAR_16 <S2SV_ModEnd> ; TYPE_2 VAR_17 <S2SV_ModStart> ; TYPE_2 VAR_17 ; VAR_16 = METHOD_4 ( VAR_10 + 1 , VAR_18 ) ; if ( ! VAR_16 ) return - VAR_19 <S2SV_ModStart> ) ; } METHOD_5 ( VAR_16 ) ;
<S2SV_ModStart> ) && ! METHOD_50 ( VAR_111 , VAR_114 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> METHOD_0 ( TYPE_1 VAR_6 , TYPE_1 <S2SV_ModStart> VAR_4 ) { TYPE_1 VAR_7 ; if ( METHOD_4 ( VAR_6 , VAR_4 , & VAR_7 ) ) METHOD_3 ( ) ; <S2SV_ModStart> = METHOD_1 ( VAR_7 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_174 , VAR_214 <S2SV_ModEnd> ; TYPE_9 VAR_181 <S2SV_ModStart> ; VAR_217 = METHOD_7 <S2SV_ModEnd> ( VAR_217 , <S2SV_ModStart> VAR_217 , VAR_219 <S2SV_ModEnd> ) ; VAR_217
<S2SV_ModStart> TYPE_2 ) { TYPE_3 VAR_14 ; struct STRUCT_OR_UNION_0 VAR_15 ; if ( VAR_13 ) return VAR_13 ; if ( ( VAR_14 = METHOD_5 ( VAR_8 , VAR_16 | VAR_17 | VAR_18 | VAR_19 , VAR_20 | VAR_21 ) ) == - 1 ) { if ( VAR_6 == VAR_7 ) METHOD_2 ( "Warning:<S2SV_blank>Cannot<S2SV_blank>open<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n" , VAR_8 ) ; return VAR_9 ; } VAR_13 = METHOD_8 ( VAR_14 <S2SV_ModEnd> , "a+" ) <S2SV_ModStart> == VAR_7 ) <S2SV_ModEnd> METHOD_2 ( "Warning:<S2SV_blank>Cannot<S2SV_blank>open<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n" <S2SV_ModStart> VAR_8 ) ; return VAR_9 ; } if ( ( METHOD_6 ( VAR_14 , & VAR_15 ) ) == - 1 ) { VAR_13 = VAR_9 ; METHOD_7 ( VAR_14 ) ; if ( VAR_6 == VAR_7 ) METHOD_2 ( "Warning:<S2SV_blank>Cannot<S2SV_blank>fstat<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'\\n" , VAR_8 ) ; return VAR_9 ; } if ( VAR_15 . VAR_22 != 1 || ( VAR_15 . VAR_23 & VAR_24 ) != VAR_25 ) { VAR_13 = VAR_9 ; METHOD_7 ( VAR_14 ) ; if ( VAR_6 == VAR_7 ) METHOD_2 ( "Warning:<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>mode\\n" , VAR_8 ) ; <S2SV_ModEnd> return VAR_9 ;
<S2SV_ModStart> -> VAR_61 , VAR_60 -> VAR_83 ,
<S2SV_ModStart> VAR_38 == VAR_29 || VAR_42
<S2SV_ModStart> . VAR_15 ; return METHOD_2 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> , 0 , & <S2SV_ModEnd> VAR_17 -> VAR_18 <S2SV_ModStart> VAR_17 -> VAR_18 , VAR_16 , VAR_21 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_10 ) ; METHOD_10 ( & VAR_17 -> VAR_10 ) ;
<S2SV_ModStart> VAR_8 ) ; METHOD_3 ( VAR_12 ) ; <S2SV_ModStart> -> VAR_14 ; METHOD_4 ( VAR_12 ) ;
<S2SV_ModStart> VAR_60 ) ; <S2SV_ModEnd> while ( METHOD_12
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_2 ) { return METHOD_2 <S2SV_ModEnd> ( VAR_2 ->
<S2SV_ModStart> ( TYPE_6 ) ( <S2SV_ModStart> * VAR_8 ) / sizeof ( VAR_22 ) ) <S2SV_ModStart> if ( VAR_30 >= VAR_22 ) { METHOD_7 ( ( "Sector<S2SV_blank>%d<S2SV_blank>>=<S2SV_blank>%d\\n" <S2SV_ModEnd> , VAR_30 ,
<S2SV_ModStart> ; VAR_107 : <S2SV_ModEnd> METHOD_28 ( VAR_105
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( VAR_32 ,
<S2SV_ModStart> VAR_41 = METHOD_7 ( VAR_48 ) ; METHOD_15
<S2SV_ModStart> ; METHOD_7 ( "server<S2SV_blank>disconnected" , ( TYPE_6 ) VAR_11 ) ; METHOD_7 (
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 VAR_29 , TYPE_3 VAR_30 <S2SV_ModEnd> , struct STRUCT_OR_UNION_9 <S2SV_ModStart> ( ! ( VAR_29 <S2SV_ModEnd> & VAR_8 ) <S2SV_ModStart> -> VAR_13 , VAR_30 <S2SV_ModEnd> ) || METHOD_5 <S2SV_ModStart> ( METHOD_7 ( VAR_29 <S2SV_ModEnd> & 0002 ) <S2SV_ModStart> ) || ( VAR_29 <S2SV_ModEnd> & 0020 &&
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_7 * VAR_16 , <S2SV_ModStart> return METHOD_2 ( VAR_16 <S2SV_ModEnd> , VAR_14 .
<S2SV_ModStart> } VAR_43 -> VAR_44 = METHOD_10 ( VAR_36 ) ; VAR_43 ->
<S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 && <S2SV_ModStart> } while ( VAR_114 < VAR_68 &&
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_3 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> TYPE_3 VAR_15 ; if ( <S2SV_ModEnd> ( ( VAR_8 <S2SV_ModStart> 1 ) ) != 0 ) || VAR_8 < 1 || VAR_8 > 32 ) { METHOD_4 ( "%s:<S2SV_blank>invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>msi<S2SV_blank>messages!\\n" , VAR_16 ) ; return - 1 ; } <S2SV_ModEnd> VAR_15 = METHOD_2 <S2SV_ModStart> 1 ) ; return 0 ;
<S2SV_ModStart> VAR_75 ) ; VAR_82 -> VAR_56 . VAR_75 = VAR_30 ; <S2SV_ModStart> == VAR_30 ) return <S2SV_ModEnd> - VAR_32 ;
<S2SV_ModStart> VAR_126 ; } <S2SV_ModEnd> VAR_123 -> VAR_114 <S2SV_ModStart> ; VAR_127 = METHOD_14 ( VAR_123 -> VAR_114 , VAR_106 ) ; if ( VAR_127 ) { METHOD_31 ( & STRUCT_OR_UNION_18 -> VAR_121 , "ca8210_get_platform_data<S2SV_blank>failed\\n" ) ; goto VAR_126 ; } VAR_127 =
<S2SV_ModStart> while ( VAR_38 > 0 && VAR_38 <S2SV_ModStart> < VAR_29 ) { <S2SV_ModStart> VAR_37 ) ; }
<S2SV_ModStart> { if ( VAR_401 > ( ( VAR_504 - 4 ) - VAR_379 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } if ( <S2SV_ModStart> 0 ) { if ( VAR_447 > ( ( VAR_504 - 4 ) - VAR_436 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } <S2SV_ModStart> 0 ) { if ( VAR_480 > ( ( VAR_504 - 4 ) - VAR_453 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } <S2SV_ModStart> ( VAR_486 [ VAR_489 <S2SV_ModEnd> ] ) ,
<S2SV_ModStart> TYPE_8 VAR_17 = METHOD_8 ( <S2SV_ModStart> VAR_18 , 0 )
<S2SV_ModStart> VAR_102 ) ; VAR_106 = METHOD_19 ( * VAR_80 , <S2SV_ModEnd> VAR_75 -> VAR_76 <S2SV_ModStart> VAR_76 . VAR_80 ) && METHOD_19 ( * VAR_84 , "kadmin" ) && ! METHOD_19 ( * VAR_88 , "history" ) ; <S2SV_ModEnd> VAR_92 : if
<S2SV_ModStart> [ 1 ] ; TYPE_4 * VAR_16 ; TYPE_3 VAR_17 <S2SV_ModStart> - VAR_8 ; VAR_16 = METHOD_7 ( VAR_14 , VAR_13 , VAR_18 ) ; if ( ! VAR_16 ) return - VAR_19 ; <S2SV_ModStart> ( VAR_12 , VAR_16 <S2SV_ModEnd> , VAR_13 ) <S2SV_ModStart> VAR_13 ) ; VAR_17 = <S2SV_ModEnd> METHOD_6 ( STRUCT_OR_UNION_5 <S2SV_ModStart> , VAR_13 , VAR_16 <S2SV_ModEnd> , VAR_15 ) <S2SV_ModStart> VAR_15 ) ; METHOD_8 ( VAR_16 ) ; return VAR_17 ;
<S2SV_ModStart> VAR_161 <= 8 && VAR_171 -> VAR_140 != VAR_129
<S2SV_ModStart> VAR_36 ) ; VAR_83 -> VAR_34 -> VAR_35 -> VAR_36 = VAR_85 ;
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_44 , * VAR_47 <S2SV_ModStart> ; TYPE_3 VAR_42 = - VAR_48 ; TYPE_2 VAR_49 = VAR_19 <S2SV_ModStart> return VAR_19 ; VAR_44 = METHOD_6 ( VAR_43 , VAR_29 ) ; VAR_44 -> VAR_25 = VAR_25 ; VAR_44 -> VAR_27 = VAR_28 ; if ( METHOD_7 ( VAR_29 ) ) goto VAR_42 ; METHOD_9 ( & VAR_40 -> VAR_41 ) ; <S2SV_ModStart> VAR_18 ) ) goto VAR_50 ; VAR_47 = METHOD_14 ( VAR_40 , VAR_25 ) ; if ( VAR_47 ) { if ( VAR_47 -> VAR_27 == VAR_28 ) VAR_49 = VAR_46 ; goto VAR_50 ; } } VAR_49 = VAR_46 ; VAR_42 = METHOD_10 ( VAR_36 , VAR_44 , VAR_38 , VAR_46 ) ; VAR_50 : METHOD_11 ( & VAR_40 -> VAR_41 ) ; METHOD_12 ( ) ; VAR_42 : if ( VAR_42 ) METHOD_13 ( VAR_43 , VAR_44 ) ; return VAR_49 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = VAR_2 ; <S2SV_ModEnd> METHOD_3 ( !
<S2SV_ModStart> VAR_5 ) ; if ( ! METHOD_5 <S2SV_ModEnd> ( VAR_6 , <S2SV_ModStart> , VAR_13 ) ) { <S2SV_ModEnd> VAR_14 = METHOD_3 <S2SV_ModStart> VAR_11 ) ; } else { VAR_14 = VAR_5 ; }
<S2SV_ModStart> VAR_850 -> VAR_846 != VAR_929 <S2SV_ModStart> return ( VAR_937 ) ; } VAR_922 = METHOD_152 ( VAR_937 , VAR_937 -> VAR_894 , VAR_937 -> VAR_921 ) ; if ( VAR_922 == VAR_929 ) { METHOD_153 ( VAR_930 , & VAR_937 -> VAR_930 ) ; return ( METHOD_9 ( VAR_937 )
<S2SV_ModStart> = 0 ; TYPE_7 VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ; TYPE_7 VAR_47 [ 4 ] ; TYPE_7 VAR_48 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; do { while ( VAR_35 < VAR_28 + VAR_29 && ( * VAR_35 == '<S2SV_blank>' || * VAR_35 == '\\t' || * VAR_35 == '\\n' || * VAR_35 == '\\r' ) ) { VAR_35 ++ ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> break ; } if ( ( VAR_42 = VAR_49 [ ( TYPE_7 ) ( unsigned TYPE_6 ) * VAR_35 ++ ] ) == - 1 ) { continue ; } VAR_47 [ VAR_48 ++ ] = VAR_42 ; if ( VAR_48 == 4 ) { VAR_48 = 0 ; VAR_43 = VAR_47 [ 0 ] ; VAR_44 = VAR_47 [ 1 ] ; VAR_45 = VAR_47 [ 2 ] ; VAR_46 = VAR_47 [ 3 ] ; if ( VAR_44 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_43 << 2 ) + ( VAR_44 >> 4 ) ) & 0xFF ) ; } if ( VAR_45 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_44 << 4 ) + ( VAR_45 >> 2 ) ) & 0xFF ) ; } if ( VAR_46 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_45 << 6 ) + VAR_46 ) & 0xFF ) ; } <S2SV_ModEnd> } } while
<S2SV_ModStart> VAR_46 ) { goto VAR_47 <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto VAR_47 <S2SV_ModEnd> ; } VAR_44 <S2SV_ModStart> VAR_43 ) ; VAR_47 : VAR_44 -> VAR_25 = 0 ;
<S2SV_ModStart> ( 02555 ) "Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;<S2SV_blank>" "using<S2SV_blank>read-until-close" <S2SV_ModEnd> , VAR_84 ) <S2SV_ModStart> ) ; return VAR_419 <S2SV_ModEnd> ; } if <S2SV_ModStart> VAR_217 ) ; METHOD_29 ( VAR_217 ) ; <S2SV_ModStart> VAR_236 : case VAR_420 : case VAR_363 : case VAR_421 <S2SV_ModEnd> : { VAR_416 <S2SV_ModStart> VAR_399 ) { return METHOD_41 ( VAR_396 , VAR_401 , VAR_411 , VAR_297 -> VAR_303 == VAR_299 <S2SV_ModEnd> ) ; } <S2SV_ModStart> default : { ap_log_rerror ( VAR_388 , VAR_422 , 0 , VAR_401 -> VAR_391 , METHOD_52 ( 02901 ) "Unexpected<S2SV_blank>body<S2SV_blank>state<S2SV_blank>(%i)" , ( TYPE_19 ) VAR_396 -> VAR_367 ) ; return VAR_85 <S2SV_ModEnd> ; } }
<S2SV_ModStart> VAR_547 != 0 && VAR_544 -> VAR_442 == VAR_514 ) VAR_544 -> VAR_442 = "UNKNOWN_REASON" <S2SV_ModEnd> ; VAR_367 ->
<S2SV_ModStart> == - VAR_63 || VAR_119 == - VAR_120
<S2SV_ModStart> METHOD_0 ( const TYPE_12 * VAR_25 , TYPE_12 <S2SV_ModEnd> * VAR_180 ) <S2SV_ModStart> VAR_180 ) { TYPE_13 VAR_125 , VAR_128 , VAR_159 , VAR_161 , VAR_137 , VAR_140 , VAR_163 , VAR_165 ; TYPE_13 <S2SV_ModEnd> VAR_167 = VAR_25 <S2SV_ModStart> 7 ] ; TYPE_13 <S2SV_ModEnd> VAR_181 = VAR_25 <S2SV_ModStart> 0 ] ; TYPE_13 <S2SV_ModEnd> VAR_173 = VAR_25 <S2SV_ModStart> 5 ] ; TYPE_13 <S2SV_ModEnd> VAR_175 = VAR_25 <S2SV_ModStart> 2 ] ; TYPE_13 <S2SV_ModEnd> VAR_169 = VAR_25 <S2SV_ModStart> 3 ] ; TYPE_13 <S2SV_ModEnd> VAR_179 = VAR_25 <S2SV_ModStart> 4 ] ; TYPE_13 <S2SV_ModEnd> VAR_171 = VAR_25 <S2SV_ModStart> 1 ] ; TYPE_13 <S2SV_ModEnd> VAR_177 = VAR_25 <S2SV_ModStart> 0 ] = ( TYPE_12 ) <S2SV_ModStart> 1 ] = ( TYPE_12 ) <S2SV_ModStart> 2 ] = ( TYPE_12 ) <S2SV_ModStart> 3 ] = ( TYPE_12 ) <S2SV_ModStart> 4 ] = ( TYPE_12 ) <S2SV_ModStart> 5 ] = ( TYPE_12 ) <S2SV_ModStart> 6 ] = ( TYPE_12 ) <S2SV_ModStart> 7 ] = ( TYPE_12 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_15 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_59 ) ; if <S2SV_ModEnd> ( ( VAR_59 <S2SV_ModStart> VAR_68 ) ) != 0 ) { METHOD_6 ( VAR_7 -> VAR_71 , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_52 ) return 0 <S2SV_ModStart> VAR_70 -- ) return 1 ;
<S2SV_ModStart> } if ( VAR_156 < 0 ||
<S2SV_ModStart> , * VAR_16 ; if ( METHOD_27 ( TYPE_14 ) >= VAR_161 ) TYPE_14 [ VAR_161 - 1 ] = '\\0'
<S2SV_ModStart> * VAR_9 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> ( VAR_9 -> VAR_17 ) { TYPE_6 * const VAR_18 = VAR_9 -> VAR_17 ; TYPE_7 * const VAR_19 = ( TYPE_7 * ) VAR_18 -> VAR_20 ; TYPE_8 * const VAR_21 = VAR_19 -> VAR_10 -> VAR_11 . VAR_22 -> VAR_21 ; if ( VAR_19 <S2SV_ModEnd> -> VAR_10 -> <S2SV_ModStart> VAR_11 . VAR_12 == VAR_23 ) return VAR_14 ; if ( VAR_9 -> VAR_24 >= 0 ) * VAR_13 = VAR_21 [ VAR_9 -> VAR_24 ] . VAR_25 . VAR_13 <S2SV_ModEnd> ; return VAR_15 <S2SV_ModStart> else { return VAR_14 <S2SV_ModEnd> ; } } <S2SV_ModStart> ; } } return VAR_16 ; }
<S2SV_ModStart> VAR_11 ) ; METHOD_22 ( & VAR_65 ) ; <S2SV_ModEnd> if ( VAR_28
<S2SV_ModStart> METHOD_74 ( VAR_740 -> VAR_741
<S2SV_ModStart> VAR_76 ) ; if ( ! VAR_78 ) { METHOD_12 ( "No<S2SV_blank>driver<S2SV_blank>for<S2SV_blank>device<S2SV_blank>[%s]\\n" , VAR_82 -> VAR_76 ) ; continue ; } <S2SV_ModEnd> METHOD_10 ( "pci<S2SV_blank>deinit<S2SV_blank>%s\\n"
<S2SV_ModStart> VAR_140 ; } if ( VAR_429 <= 0 ) { return ; }
<S2SV_ModStart> = VAR_265 ; VAR_27 -> VAR_278 = VAR_279 ; } else if ( VAR_27 -> VAR_278 != VAR_279 ) { return 0 ;
<S2SV_ModStart> TYPE_8 ) ; METHOD_1 <S2SV_ModEnd> ( VAR_32 [ <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ) ; VAR_31
<S2SV_ModStart> * const VAR_15 , TYPE_9 * VAR_38 <S2SV_ModStart> , TYPE_7 VAR_31 , TYPE_10 * VAR_39 <S2SV_ModStart> VAR_20 = & VAR_38 <S2SV_ModEnd> -> VAR_9 ; <S2SV_ModStart> -> VAR_9 ; <S2SV_ModEnd> METHOD_1 ( VAR_33 <S2SV_ModStart> VAR_33 , VAR_15 , VAR_20 <S2SV_ModStart> ( VAR_33 , VAR_38 , VAR_39 <S2SV_ModEnd> , VAR_29 , <S2SV_ModStart> METHOD_4 ( VAR_33 , VAR_38 <S2SV_ModStart> VAR_30 , VAR_31 , VAR_39 <S2SV_ModStart> { METHOD_5 ( & VAR_33 -> VAR_40 , VAR_38 <S2SV_ModEnd> ) ; (
<S2SV_ModStart> TYPE_10 VAR_226 ; METHOD_31 ( & VAR_228 -> VAR_221 [ VAR_230 ] , 0 , sizeof ( VAR_92 ) ) ;
<S2SV_ModStart> VAR_44 . VAR_45 || ! VAR_46 -> VAR_44 . VAR_45 [ 0 ] || ! VAR_46 -> VAR_44 . VAR_45 [ 1 ] || <S2SV_ModEnd> VAR_46 -> VAR_44
<S2SV_ModStart> VAR_9 = VAR_2 <S2SV_ModEnd> ; if (
<S2SV_ModStart> , unsigned TYPE_12 VAR_177 <S2SV_ModEnd> ) { TYPE_7 <S2SV_ModStart> ; if ( VAR_177 > 170 <S2SV_ModEnd> ) { METHOD_25 <S2SV_ModStart> , "ExifData" , "Deep/expensive<S2SV_blank>recursion<S2SV_blank>detected!" <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_127 , VAR_177 + METHOD_29 ( VAR_61 ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> , VAR_127 , VAR_177 + METHOD_29 ( VAR_61 ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> , VAR_127 , VAR_177 + METHOD_29 ( VAR_61 ) <S2SV_ModEnd> ) ; break
<S2SV_ModStart> VAR_89 ) { TYPE_11 <S2SV_ModEnd> VAR_68 ; TYPE_5 <S2SV_ModStart> ) VAR_11 ; TYPE_11 VAR_37 ; TYPE_11 <S2SV_ModEnd> VAR_27 ; METHOD_12 <S2SV_ModStart> VAR_27 ) { if ( ! METHOD_13 ( VAR_37 , 2 , & VAR_37 ) ) { <S2SV_ModEnd> METHOD_6 ( 100 <S2SV_ModStart> 100 , ( "new<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>would<S2SV_blank>cause<S2SV_blank>overflow\\n" ) ) ; <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; } } METHOD_6 ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%zu\\n" , VAR_86 -> VAR_64 , VAR_37 ) ) ; METHOD_12 ( VAR_37 > 0 ) ; if ( METHOD_7 ( VAR_86 , VAR_37 ) ) { return - 1 ; } }
<S2SV_ModStart> goto VAR_57 ; VAR_61 = METHOD_18 ( METHOD_15 ( VAR_59 ) -> VAR_54 , VAR_59 -> VAR_62 , VAR_46 , VAR_47 ) ; if ( VAR_61 ) goto VAR_57 ;
<S2SV_ModStart> 0 ) { if ( VAR_373 >= VAR_374 -> VAR_344 ) return VAR_347 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_8
<S2SV_ModStart> VAR_12 ) { if ( VAR_12 <= 0 ) return ;
<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> TYPE_5 VAR_24 = <S2SV_ModStart> VAR_24 = 65536 ; TYPE_5 VAR_49 ; while ( METHOD_9 ( VAR_24 , VAR_9 , & VAR_49 ) ) VAR_24 /= 2 <S2SV_ModStart> = METHOD_2 ( VAR_49 <S2SV_ModEnd> ) ; TYPE_12
<S2SV_ModStart> -> VAR_22 ; VAR_23 -> VAR_24 = METHOD_2 ( VAR_16 -> VAR_24 ) ;
<S2SV_ModStart> VAR_206 ++ ) METHOD_10 <S2SV_ModEnd> ( VAR_214 -> <S2SV_ModStart> VAR_206 ++ ) METHOD_11 <S2SV_ModEnd> ( VAR_214 -> <S2SV_ModStart> VAR_206 ++ ) METHOD_10 <S2SV_ModEnd> ( VAR_214 -> <S2SV_ModStart> VAR_206 ++ ) METHOD_11 <S2SV_ModEnd> ( VAR_214 -> <S2SV_ModStart> VAR_206 ++ ) METHOD_10 <S2SV_ModEnd> ( VAR_214 -> <S2SV_ModStart> VAR_206 ++ ) METHOD_11 <S2SV_ModEnd> ( VAR_214 ->
<S2SV_ModStart> ) { struct <S2SV_ModEnd> STRUCT_OR_UNION_23 * STRUCT_OR_UNION_23 <S2SV_ModStart> * STRUCT_OR_UNION_23 = vfs_select_inode ( STRUCT_OR_UNION_14 -> <S2SV_ModEnd> STRUCT_OR_UNION_18 , STRUCT_OR_UNION_22 <S2SV_ModStart> STRUCT_OR_UNION_23 ) ; STRUCT_OR_UNION_22 -> VAR_1 = * STRUCT_OR_UNION_14 ; <S2SV_ModEnd> return METHOD_4 (
<S2SV_ModStart> ( const struct STRUCT_OR_UNION_2 * VAR_6 <S2SV_ModEnd> ) { static <S2SV_ModStart> VAR_5 ; return VAR_6 -> VAR_7 == sizeof ( struct STRUCT_OR_UNION_2 ) && METHOD_1 ( & VAR_6 -> <S2SV_ModEnd> VAR_3 , &
<S2SV_ModStart> VAR_82 ) ; METHOD_15 ( VAR_88 ) ;
<S2SV_ModStart> VAR_13 ) { VAR_22 * VAR_23 ; TYPE_4 VAR_21 ; VAR_23 = METHOD_4 ( & VAR_13 , 1 , VAR_24 ) ; if ( ! VAR_23 ) return - VAR_25 <S2SV_ModEnd> ; VAR_21 = <S2SV_ModStart> , VAR_12 , VAR_23 <S2SV_ModEnd> , 1 , <S2SV_ModStart> VAR_21 ) ; METHOD_5 ( VAR_23 ) ;
<S2SV_ModStart> } TYPE_9 ; typedef struct { TYPE_14 VAR_37 ; TYPE_14 VAR_38 ; } VAR_39 ; static TYPE_15 VAR_40 ( TYPE_11 VAR_27 ) { METHOD_9 ( VAR_27 , VAR_41 ) ; METHOD_10 <S2SV_ModEnd> ( VAR_27 ) <S2SV_ModStart> VAR_27 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_11 ) ; if ( VAR_35 <= 0 || METHOD_7 ( ! TYPE_25 -> VAR_21 ) ) return ;
<S2SV_ModStart> VAR_12 ) { TYPE_0 VAR_13 ; <S2SV_ModStart> -> VAR_9 ; VAR_13 = <S2SV_ModStart> , VAR_11 ) ; if ( VAR_13 != VAR_14 ) return VAR_13
<S2SV_ModStart> * VAR_24 ; TYPE_7 <S2SV_ModEnd> VAR_15 = sizeof <S2SV_ModStart> ) * ( ( TYPE_7 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_28 ) ; if ( METHOD_7 ( ! METHOD_6 ( & VAR_35 -> VAR_36 ) ) ) return - VAR_38 ; <S2SV_ModStart> -> VAR_37 ; return 0 ;
<S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_10 ) ; <S2SV_ModEnd> VAR_14 : return
<S2SV_ModStart> ) break ; <S2SV_ModEnd> VAR_73 -> VAR_74 <S2SV_ModStart> = VAR_75 ; } VAR_73 -> VAR_74 = VAR_75 ;
<S2SV_ModStart> } if ( METHOD_34 ( VAR_511 ) &&
<S2SV_ModStart> VAR_29 ) { } else if ( VAR_51 && VAR_48 -> VAR_52 && METHOD_10 ( ) == 2 ) { return VAR_35 ;
<S2SV_ModStart> VAR_274 + 2 , sizeof ( VAR_182 ) <S2SV_ModStart> VAR_274 + 2 , sizeof ( VAR_182 )
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> VAR_77 = 0 ; if ( METHOD_14 ( VAR_78 , & STRUCT_OR_UNION_7 -> VAR_79 ) ) return - VAR_80
<S2SV_ModStart> { TYPE_29 * VAR_255 ; if ( VAR_277 . VAR_278 < 4 || VAR_277 . VAR_278 > 1024 ) { METHOD_78 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_301 ) ; return VAR_303 ; } if ( VAR_295 ) METHOD_78 ( "got<S2SV_blank>PROP<S2SV_blank>chunk<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>total" , ( TYPE_27 ) VAR_277 . VAR_278 ) ;
<S2SV_ModStart> -> VAR_4 ; struct STRUCT_OR_UNION_4 * VAR_8 ; TYPE_5 VAR_9 ; VAR_8 = METHOD_2 ( VAR_5 ) ; VAR_9 = <S2SV_ModEnd> METHOD_1 ( VAR_5 <S2SV_ModStart> VAR_7 ) ; METHOD_3 ( VAR_5 , VAR_8 ) ; return VAR_9 ;
<S2SV_ModStart> ) { return METHOD_29 ( VAR_267 , VAR_266 ) <S2SV_ModEnd> ; } VAR_230 <S2SV_ModStart> ) ; } if ( VAR_269 && VAR_218 -> VAR_270 == 0 ) { METHOD_30 ( VAR_218 -> VAR_267 -> VAR_264 ) ; return METHOD_29 ( VAR_218 -> VAR_267 , VAR_266 ) ; }
<S2SV_ModStart> VAR_443 ] ; VAR_2 * VAR_498 [ VAR_443 - 1 ] ; TYPE_2 VAR_497 [ 50 ] ; <S2SV_ModStart> VAR_443 ] ; TYPE_34 <S2SV_ModEnd> VAR_482 = 0 <S2SV_ModStart> VAR_94 ; TYPE_34 VAR_486 ; TYPE_34 <S2SV_ModStart> 0 ; TYPE_34 VAR_487 = 0 ; TYPE_34 VAR_489 [ VAR_490 * VAR_443 ] = { 0 } ; TYPE_34 VAR_495 ; TYPE_34 <S2SV_ModStart> = 0 ; TYPE_34 VAR_488 = 0 ; <S2SV_ModStart> { 0 } ; TYPE_35 VAR_491 = 0 ; struct STRUCT_OR_UNION_0 VAR_492 , VAR_493 , VAR_494 <S2SV_ModStart> } } ; unsigned TYPE_34 VAR_496 [ VAR_443 ] = { 3 , 3 , 3 } ; <S2SV_ModStart> VAR_37 != ( 7 + 3 * <S2SV_ModEnd> VAR_443 ) ) <S2SV_ModStart> ) METHOD_17 ( "Usage:<S2SV_blank>%s<S2SV_blank><width><S2SV_blank><height><S2SV_blank><frame_rate><S2SV_blank><S2SV_blank><infile><S2SV_blank><outfile(s)><S2SV_blank>" "<rate_encoder(s)><S2SV_blank><temporal_layer(s)><S2SV_blank><key_frame_insert><S2SV_blank><output<S2SV_blank>psnr?><S2SV_blank>\\n" <S2SV_ModEnd> , VAR_72 [ <S2SV_ModStart> VAR_72 [ 2 ] , VAR_359 , 0 ) ; VAR_138 = METHOD_11 ( VAR_72 [ 3 <S2SV_ModStart> ( VAR_72 [ 4 <S2SV_ModEnd> ] , "rb" <S2SV_ModStart> , VAR_72 [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> [ VAR_484 + 5 <S2SV_ModEnd> ] , "wb" <S2SV_ModStart> ) ; } for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { VAR_152 [ VAR_484 ] <S2SV_ModEnd> = METHOD_11 ( <S2SV_ModStart> [ VAR_443 + 5 + VAR_484 <S2SV_ModEnd> ] , VAR_359 <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> ++ ) { VAR_496 [ VAR_484 ] = METHOD_11 ( VAR_72 [ 2 * VAR_443 + 5 + VAR_484 ] , VAR_359 , 0 ) ; if ( VAR_496 [ VAR_484 ] < 1 || VAR_496 [ VAR_484 ] > 3 ) METHOD_17 ( "Invalid<S2SV_blank>temporal<S2SV_blank>layers:<S2SV_blank>%d,<S2SV_blank>Must<S2SV_blank>be<S2SV_blank>1,<S2SV_blank>2,<S2SV_blank>or<S2SV_blank>3.<S2SV_blank>\\n" , VAR_496 ) ; } for ( VAR_484 = 0 ; VAR_484 < VAR_443 - 1 ; VAR_484 ++ ) { if ( METHOD_54 ( VAR_497 , "ds%d.yuv" , VAR_443 - VAR_484 ) < 0 ) { <S2SV_ModEnd> return VAR_88 ; <S2SV_ModStart> VAR_88 ; } VAR_498 [ VAR_484 ] = METHOD_9 ( VAR_497 , "wb" ) ; } VAR_488 = METHOD_11 ( VAR_72 [ 3 * VAR_443 + 5 ] , VAR_359 , 0 ) ; VAR_445 = METHOD_11 ( VAR_72 [ 3 * VAR_443 + 6 ] , VAR_359 , 0 ) ; for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { VAR_86 [ VAR_484 ] = METHOD_12 ( VAR_237 , & VAR_480 [ VAR_484 ] , 0 ) ; if ( VAR_86 [ VAR_484 ] ) { METHOD_53 ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>config:<S2SV_blank>%s\\n" , METHOD_14 ( VAR_86 [ VAR_484 ] ) ) ; return VAR_88 ; } <S2SV_ModStart> 0 ] . VAR_98 = 0 <S2SV_ModEnd> ; VAR_480 [ <S2SV_ModStart> . VAR_105 = 2 <S2SV_ModEnd> ; VAR_480 [ <S2SV_ModStart> . VAR_109 = 100 <S2SV_ModEnd> ; VAR_480 [ <S2SV_ModStart> . VAR_111 = 15 <S2SV_ModEnd> ; VAR_480 [ <S2SV_ModStart> TYPE_23 ) ) <S2SV_ModEnd> ; VAR_480 [ <S2SV_ModStart> ++ ; } VAR_480 [ 0 ] . VAR_148 = 2 ; VAR_480 [ 1 ] . VAR_148 = 1 ; VAR_480 [ 2 ] . VAR_148 = 1 ; <S2SV_ModStart> 0 ) ; for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { set_temporal_layer_pattern ( VAR_496 [ VAR_484 ] , & VAR_480 [ VAR_484 ] , VAR_480 [ VAR_484 ] . VAR_151 , & VAR_489 [ VAR_484 * VAR_490 ] ) ; } <S2SV_ModStart> ; if ( VAR_484 == VAR_443 - 1 ) VAR_252 = - 4 ; if ( <S2SV_ModStart> ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>cpu_used" ) ; } for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { if ( METHOD_29 ( & VAR_469 [ VAR_484 ] , VAR_262 , 1 ) ) METHOD_48 ( & VAR_469 [ VAR_484 ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" ) ; } if ( METHOD_29 ( & VAR_469 [ 0 ] , VAR_275 , 1 ) ) METHOD_48 ( & VAR_469 [ 0 ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity" ) ; for ( VAR_484 = 1 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { if ( METHOD_29 ( & VAR_469 [ VAR_484 ] , VAR_275 , 0 ) ) METHOD_48 ( & VAR_469 [ VAR_484 ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity" ) ; } for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { if ( METHOD_29 ( & VAR_469 [ VAR_484 ] , VAR_501 , 1 ) ) METHOD_48 ( & VAR_469 [ VAR_484 ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" <S2SV_ModStart> { unsigned TYPE_34 VAR_499 = ( TYPE_34 ) ( ( ( TYPE_35 ) VAR_480 [ 0 ] . VAR_115 * 0.5 ) * VAR_138 / 10 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_484 ] , VAR_500 , VAR_499 <S2SV_ModEnd> ) ) METHOD_48 <S2SV_ModStart> ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 1 ) ; VAR_486 = VAR_480 [ VAR_484 ] . VAR_215 * VAR_480 [ VAR_484 ] . VAR_218 * 3 / 2 ; if ( METHOD_37 ( VAR_471 [ VAR_484 ] . VAR_344 [ 0 ] , 1 , VAR_486 , VAR_498 [ VAR_443 - VAR_484 - 1 ] ) != VAR_486 ) { return VAR_88 ; } } } for ( VAR_484 = 0 ; VAR_484 < VAR_443 ; VAR_484 ++ ) { VAR_487 = VAR_480 [ VAR_484 ] . ts_layer_id [ VAR_482 % VAR_480 [ VAR_484 ] . ts_periodicity ] ; VAR_435 = 0 ; VAR_495 = periodicity_to_num_layers [ VAR_496 [ VAR_484 ] - 1 ] ; VAR_435 = VAR_489 [ VAR_484 * VAR_490 + VAR_482 % VAR_495 ] ; if ( VAR_482 == 0 ) { VAR_435 |= VPX_EFLAG_FORCE_KF ; } if ( VAR_482 > 0 && VAR_482 == VAR_488 ) { VAR_435 = VPX_EFLAG_FORCE_KF ; } METHOD_29 ( & VAR_469 [ VAR_484 ] , VP8E_SET_FRAME_FLAGS , VAR_435 ) ; METHOD_29 ( & VAR_469 [ VAR_484 ] , VP8E_SET_TEMPORAL_LAYER_ID , VAR_487 ) ; } METHOD_55 ( & VAR_492 , VAR_359 ) ; <S2SV_ModEnd> if ( METHOD_33 <S2SV_ModStart> , 1 , 0 <S2SV_ModEnd> , VAR_362 ) <S2SV_ModStart> VAR_362 ) ) { <S2SV_ModStart> ] , "Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame" ) ; } METHOD_55 ( & VAR_493 , VAR_359 ) ; METHOD_56 ( & VAR_493 , & VAR_492 , & VAR_494 ) ; VAR_491 += ( TYPE_35 ) ( VAR_494 . VAR_502 * 1000000 + VAR_494 . VAR_503 <S2SV_ModStart> ? "K" : "" <S2SV_ModEnd> ) ; METHOD_39 <S2SV_ModStart> METHOD_53 ( "\\n" ) ; METHOD_53 ( "FPS<S2SV_blank>for<S2SV_blank>encoding<S2SV_blank>%d<S2SV_blank>%f<S2SV_blank>%f<S2SV_blank>\\n" , VAR_482 , ( TYPE_36 ) VAR_491 / 1000000 , 1000000 * ( TYPE_35 ) VAR_482 / ( TYPE_35 ) VAR_491
<S2SV_ModStart> TYPE_1 ) { METHOD_39 ( <S2SV_ModEnd> 0 ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_40 ; struct STRUCT_OR_UNION_0 VAR_41 = * VAR_38 ; <S2SV_ModStart> VAR_37 ) ; if ( ! METHOD_12 ( VAR_38 , VAR_14 + 7 ) ) { METHOD_13 ( "process_secondary_order(),<S2SV_blank>next<S2SV_blank>order<S2SV_blank>pointer<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>stream" , & VAR_41 ) ; }
<S2SV_ModStart> TYPE_6 VAR_46 , VAR_59 ; VAR_59 = METHOD_4 ( METHOD_7 ( VAR_21 ) , <S2SV_ModEnd> ( TYPE_6 ) <S2SV_ModStart> ( VAR_7 ) ) <S2SV_ModStart> ) METHOD_5 ( VAR_59 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VAR_42 ) ; VAR_46 = VAR_51 ; for ( VAR_28 = VAR_21 ; VAR_28 != ( TYPE_11 * ) VAR_42 ; VAR_28 = VAR_28 -> VAR_28 ) VAR_46 = METHOD_4 ( VAR_28 -> VAR_46 , VAR_46 ) ; for ( VAR_54 = 0 <S2SV_ModEnd> ; VAR_54 < <S2SV_ModStart> ( TYPE_17 ) VAR_59 <S2SV_ModEnd> ; VAR_54 ++
<S2SV_ModStart> ; } } if ( VAR_163 == VAR_156 ) { METHOD_34 ( VAR_166 , VAR_185 ) ; VAR_185 = METHOD_20 ( - VAR_186 ) ; goto VAR_184 ; }
<S2SV_ModStart> = 0 ; METHOD_3 ( * VAR_134 , sizeof ( * VAR_232 ) ) ; <S2SV_ModStart> ) + 4 ; METHOD_70 ( VAR_206 [ 0 ] )
<S2SV_ModStart> * VAR_78 ; TYPE_11 VAR_74 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; for ( TYPE_11 <S2SV_ModStart> VAR_74 ) { for ( TYPE_11 VAR_77 = VAR_74 - 1 ; VAR_77 != VAR_79 ; VAR_77 -- <S2SV_ModEnd> ) { METHOD_18
<S2SV_ModStart> VAR_11 -> VAR_12 && VAR_11 -> VAR_16 ) { METHOD_4 ( & VAR_11 -> VAR_16 -> VAR_17 ) ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_13 ) ; METHOD_5 ( & VAR_11 -> VAR_16 -> VAR_17 ) ; }
<S2SV_ModStart> } ; return METHOD_4 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> VAR_21 ) { METHOD_7 ( VAR_21 , VAR_23 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> case VAR_68 : case VAR_82 : case VAR_83 :
<S2SV_ModStart> VAR_218 ++ ; <S2SV_ModEnd> VAR_209 = VAR_177 <S2SV_ModStart> ) ; } VAR_222 -> VAR_175 += VAR_218 ;
<S2SV_ModStart> ( * VAR_105 ) ) ; METHOD_2 ( VAR_19 , 0 , sizeof ( * VAR_19
<S2SV_ModStart> VAR_50 ; } if ( VAR_102 -> VAR_44 > 6 || VAR_102 -> VAR_46 > 6 ) { METHOD_13 ( VAR_86 -> VAR_67 , "cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64" ) ; return VAR_104 ; }
<S2SV_ModStart> ] ) ; METHOD_3 ( VAR_17 -> VAR_18 ) ;
<S2SV_ModStart> TYPE_5 VAR_36 , TYPE_18 VAR_91 , TYPE_18 VAR_92 , TYPE_17 VAR_93 <S2SV_ModEnd> ) { const <S2SV_ModStart> , VAR_85 , VAR_91 , VAR_92 , VAR_36 <S2SV_ModEnd> ) ; TYPE_17 <S2SV_ModStart> ; if ( METHOD_4 ( VAR_85 -> VAR_86 ) ) { VAR_85 -> VAR_86 = VAR_54 ; if ( VAR_93 ) VAR_85 -> VAR_86 = VAR_94 ; } if ( METHOD_4 ( VAR_85 -> VAR_86 ) ) { VAR_75 = - VAR_87 -> VAR_53 ; } else if ( VAR_54 ) { if ( VAR_87 -> VAR_69 [ VAR_78 ] <S2SV_ModEnd> == 1 ) <S2SV_ModStart> == 1 ) <S2SV_ModEnd> VAR_75 = 0 <S2SV_ModStart> ++ ) { TYPE_17 VAR_95 = <S2SV_ModEnd> VAR_78 + VAR_79 <S2SV_ModStart> VAR_81 + VAR_82 ; VAR_87 -> VAR_69 [ VAR_95 <S2SV_ModStart> -> VAR_77 [ VAR_95 ] = VAR_85 -> VAR_86 ; if ( ! METHOD_5 ( VAR_85 ) || ! VAR_93 ) VAR_87 -> VAR_96 [ VAR_95 ] = METHOD_6 ( VAR_80 -> VAR_97 + VAR_87 -> VAR_98 [ VAR_85 -> VAR_86 ] , 0 , VAR_99 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_21 * METHOD_0 <S2SV_ModStart> * METHOD_0 ( <S2SV_ModEnd> TYPE_21 * VAR_90 <S2SV_ModStart> TYPE_21 * VAR_90 ) { TYPE_21 * VAR_103 , * VAR_100 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ( VAR_103 = METHOD_3 ( METHOD_8 ( VAR_90 ) + 1 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> while ( * <S2SV_ModStart> * VAR_90 == '/' || * VAR_90 == '\\\\' <S2SV_ModEnd> ) VAR_90 ++ <S2SV_ModStart> VAR_90 ++ ; METHOD_5 ( VAR_103 , ( * VAR_90 ) ? VAR_90 : "x" ) ; for ( VAR_100 = VAR_103 ; * VAR_100 ; VAR_100 ++ ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( VAR_100 [ 0 ] == '.' && VAR_100 [ 1 ] == '.' && ( VAR_100 [ 2 ] == '/' || VAR_100 [ 2 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { VAR_100 [ 0 ] = VAR_100 [ 1 ] = 'x' <S2SV_ModEnd> ; } } <S2SV_ModStart> ; } } } return VAR_103 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> { METHOD_10 ( "IPv4:<S2SV_blank>callocing<S2SV_blank>this<S2SV_blank>failed" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> = METHOD_3 ( VAR_48 <S2SV_ModEnd> , VAR_11 , <S2SV_ModStart> { METHOD_10 ( "IPv4<S2SV_blank>socket<S2SV_blank>open<S2SV_blank>failed" ) ; goto VAR_39 ; } struct STRUCT_OR_UNION_4 <S2SV_ModEnd> VAR_30 ; METHOD_5 <S2SV_ModStart> ; VAR_30 . VAR_49 = VAR_48 ; VAR_30 . VAR_50 <S2SV_ModEnd> = METHOD_6 ( <S2SV_ModStart> ; VAR_30 . VAR_51 . VAR_52 = METHOD_13 ( 0x7F000001 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) METHOD_10 ( "IPv4<S2SV_blank>bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>" <S2SV_ModEnd> "Requested<S2SV_blank>port<S2SV_blank>may<S2SV_blank>be<S2SV_blank>taken<S2SV_blank>or<S2SV_blank>require<S2SV_blank>root<S2SV_blank>permissions." ) ; <S2SV_ModStart> { METHOD_10 ( "IPv4<S2SV_blank>listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket" <S2SV_ModEnd> ) ; goto
<S2SV_ModStart> ( VAR_110 . VAR_118 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } VAR_110 . VAR_119 <S2SV_ModEnd> -- ; }
<S2SV_ModStart> TYPE_12 VAR_50 , TYPE_12 <S2SV_ModEnd> VAR_16 , const <S2SV_ModStart> * VAR_33 , TYPE_12 VAR_30 , TYPE_13 VAR_59 , TYPE_13 <S2SV_ModEnd> VAR_65 ) { <S2SV_ModStart> 0 ) { unsigned <S2SV_ModStart> TYPE_10 VAR_36 ; unsigned
<S2SV_ModStart> STRUCT_OR_UNION_10 VAR_498 ; TYPE_95 VAR_277 ; <S2SV_ModStart> VAR_309 ; TYPE_109 VAR_360 , <S2SV_ModStart> || VAR_498 . VAR_499 >= ( U32_MAX - VAR_498 . VAR_289 ) || VAR_498 . <S2SV_ModStart> - VAR_441 ; <S2SV_ModEnd> VAR_360 = METHOD_25 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_498 . VAR_289 <S2SV_ModStart> VAR_499 > VAR_360 ) return - VAR_441 ; switch ( VAR_498 . VAR_417 & VAR_235 ) { case VAR_240 : VAR_277 = 0 ; break ; case VAR_248 : VAR_277 = sizeof ( VAR_250 ) ; break ; case VAR_253 : VAR_277 = sizeof ( VAR_399 ) ; break ; default : return - VAR_441 ; } if ( VAR_277 ) { if ( VAR_498 . VAR_414 - VAR_459 < VAR_498 . VAR_499 * VAR_277
<S2SV_ModStart> while ( VAR_30 >= sizeof ( * VAR_34 ) ) { VAR_34 = ( struct STRUCT_OR_UNION_3 * ) VAR_33 ; if ( VAR_34 -> VAR_35 > VAR_30 ) { METHOD_4 ( & VAR_36 -> VAR_37 , "Too<S2SV_blank>large<S2SV_blank>descriptor\\n" ) ; return VAR_38 ; } <S2SV_ModEnd> if ( VAR_34 <S2SV_ModStart> "Found<S2SV_blank>union<S2SV_blank>header\\n" ) ; if ( VAR_34 -> VAR_35 >= sizeof ( * VAR_34 ) ) return VAR_34 ; METHOD_4 ( & VAR_36 -> VAR_37 , "Union<S2SV_blank>descriptor<S2SV_blank>to<S2SV_blank>short<S2SV_blank>(%d<S2SV_blank>vs<S2SV_blank>%zd\\n)" , VAR_34 -> VAR_35 , sizeof ( * VAR_34 ) ) ; return VAR_38 <S2SV_ModEnd> ; } VAR_30
<S2SV_ModStart> STRUCT_OR_UNION_4 ) { struct STRUCT_OR_UNION_5 * VAR_17 ; <S2SV_ModStart> break ; } VAR_17 = <S2SV_ModEnd> STRUCT_OR_UNION_4 -> VAR_8 <S2SV_ModStart> [ 0 ] ; if ( VAR_17 -> VAR_18 < 2 ) return - VAR_19 ; VAR_12 = & VAR_17 <S2SV_ModStart> [ 1 ] ; if ( VAR_12 -> VAR_14 . VAR_20 < 1 ) return - VAR_19
<S2SV_ModStart> * VAR_122 ; if ( ! VAR_122 ) return ;
<S2SV_ModStart> - VAR_19 ; VAR_117 = METHOD_4 ( VAR_106 , VAR_117 , sizeof ( VAR_116 ) ) ; <S2SV_ModStart> -> VAR_104 ; <S2SV_ModEnd> if ( METHOD_5
<S2SV_ModStart> ( VAR_85 ) { if ( VAR_106 . VAR_94 > VAR_57 ) { VAR_108 = - VAR_77 ; goto VAR_95 ; } <S2SV_ModStart> VAR_94 ) ; }
<S2SV_ModStart> - VAR_54 ; * ( ( struct STRUCT_OR_UNION_3 * ) VAR_96 ) = VAR_69 ; <S2SV_ModStart> METHOD_8 ( VAR_96 + sizeof ( VAR_69 ) <S2SV_ModStart> * ) VAR_87 + sizeof ( VAR_69 ) , VAR_69 . VAR_70 - sizeof ( VAR_69 ) <S2SV_ModEnd> ) ) {
<S2SV_ModStart> VAR_13 , const TYPE_4 <S2SV_ModEnd> VAR_8 ) {
<S2SV_ModStart> METHOD_0 ( const TYPE_4 <S2SV_ModEnd> * VAR_4 , <S2SV_ModStart> VAR_6 ) { const TYPE_2 * const VAR_12 = <S2SV_ModEnd> METHOD_1 ( VAR_4 <S2SV_ModStart> ( VAR_4 , VAR_6 ) ; return VAR_12 != NULL && VAR_12 -> <S2SV_ModEnd> VAR_13 > VAR_12 <S2SV_ModStart> VAR_13 > VAR_12 -> <S2SV_ModEnd> VAR_11 && VAR_12 <S2SV_ModStart> VAR_11 && VAR_12 -> <S2SV_ModEnd> VAR_13 >= 0.5 <S2SV_ModStart> VAR_13 >= 0.5 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> |= VAR_12 ; else if ( ( VAR_15 & ( VAR_12 | VAR_16 ) ) == ( VAR_12 | VAR_16 ) && ! METHOD_4 ( STRUCT_OR_UNION_6 -> VAR_13 ) && ! METHOD_5 ( VAR_8 , VAR_17 ) ) VAR_15 &= ~ VAR_12 ;
<S2SV_ModStart> = VAR_244 ; METHOD_67 ( VAR_247 ) ;
<S2SV_ModStart> VAR_95 ) ; if ( VAR_97 ) METHOD_29 ( STRUCT_OR_UNION_21 ) ; VAR_96 : <S2SV_ModEnd> METHOD_30 ( STRUCT_OR_UNION_21
<S2SV_ModStart> TYPE_4 VAR_14 ; if ( VAR_15 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_pad" ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_6 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> , VAR_21 ) ) ; METHOD_7 ( VAR_25 [ 2 ] <S2SV_ModStart> 4 ) { METHOD_8 ( VAR_25 [ VAR_28 ] , 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; VAR_30 : return ( - 1 ) ;
<S2SV_ModStart> ( VAR_90 , VAR_111 . VAR_118 <S2SV_ModEnd> , VAR_110 ->
<S2SV_ModStart> 1 ) ; if ( VAR_29 < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( VAR_29 < 0 ) return 0 ;
<S2SV_ModStart> = 0 ; unsigned TYPE_9 VAR_172 ; <S2SV_ModStart> return - VAR_7 ; if ( VAR_22 < VAR_173 || VAR_22 > VAR_174 ) return - VAR_168 <S2SV_ModStart> VAR_168 ; } VAR_172 = VAR_17 [ METHOD_6 ( VAR_22 ) ] ; if ( VAR_172 > 128 ) return - VAR_168 ; <S2SV_ModStart> , VAR_162 , VAR_172 <S2SV_ModEnd> ) != 0
<S2SV_ModStart> return ; } if ( ! METHOD_99 ( * VAR_614 , 2 ) ) { METHOD_177 ( ( VAR_620 , "<S2SV_blank>[|OPT]" ) ) ; return ; }
<S2SV_ModStart> VAR_16 ; } if ( VAR_30 -> VAR_21 )
<S2SV_ModStart> != VAR_101 ) if ( <S2SV_ModEnd> METHOD_24 ( VAR_102 <S2SV_ModStart> , VAR_104 ) != VAR_102 ) break
<S2SV_ModStart> ( VAR_6 , VAR_20 <S2SV_ModEnd> ) ; TYPE_5
<S2SV_ModStart> ) VAR_15 ; if ( VAR_48 + VAR_112 > <S2SV_ModEnd> VAR_107 -> VAR_46 <S2SV_ModStart> VAR_108 ] . VAR_48 + <S2SV_ModEnd> VAR_107 -> VAR_46 <S2SV_ModStart> VAR_108 ] . VAR_112 ) { METHOD_9 ( "%s,<S2SV_blank>Out<S2SV_blank>of<S2SV_blank>emulated<S2SV_blank>memory<S2SV_blank>range.\\n" , VAR_114 ) ; return - VAR_115 ; } <S2SV_ModEnd> VAR_109 = VAR_48
<S2SV_ModStart> VAR_45 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_43
<S2SV_ModStart> VAR_140 -> VAR_137 != VAR_536 <S2SV_ModStart> goto VAR_522 ; VAR_205 = METHOD_91 ( VAR_542 , VAR_542 -> VAR_508 , VAR_542 -> VAR_497 ) ; if ( VAR_205 == VAR_536 ) { METHOD_92 ( VAR_537 , & VAR_542 -> VAR_537 ) ; return ( METHOD_9 ( VAR_542 ) ) ; }
<S2SV_ModStart> -> VAR_675 * METHOD_131 ( VAR_237 , 4 ) <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> VAR_675 * METHOD_131 ( VAR_237 , 4 ) <S2SV_ModEnd> ; VAR_565 =
<S2SV_ModStart> VAR_61 ; } if ( VAR_42 -> VAR_26 )
<S2SV_ModStart> VAR_71 = 0 <S2SV_ModEnd> ; VAR_49 .
<S2SV_ModStart> , VAR_173 ; <S2SV_ModEnd> VAR_168 = VAR_159 <S2SV_ModStart> goto VAR_156 ; <S2SV_ModEnd> METHOD_16 ( & <S2SV_ModStart> ( & VAR_150 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_55 ) { struct STRUCT_OR_UNION_1 * VAR_50 = VAR_55 -> VAR_51 ; struct STRUCT_OR_UNION_2 * VAR_56 = VAR_50 -> VAR_57 ; METHOD_16 ( & VAR_50 -> VAR_58 ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x87 ; VAR_56 -> VAR_59 [ 2 ] = 0x0 ; if ( METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 , 3 , VAR_56 -> VAR_59 , 1 , 0 ) < 0 ) METHOD_11 ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x86 ; VAR_56 -> VAR_59 [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x80 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_7 ( 50 ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x80 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_50 , VAR_56 -> VAR_59 , 1 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> ) METHOD_11 ( <S2SV_ModEnd> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_ModStart> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; mutex_unlock ( & VAR_50 -> VAR_58 ) ; VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> & VAR_50 -> <S2SV_ModEnd> VAR_52 , VAR_45 <S2SV_ModStart> ; if ( VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> ( VAR_46 , VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> , & VAR_50 <S2SV_ModEnd> -> VAR_52 ,
<S2SV_ModStart> return VAR_139 ; VAR_101 = METHOD_3 ( VAR_139 , VAR_26 ) ; if ( VAR_101 < 2 ) VAR_101 = 2 ; VAR_139 = VAR_101 * VAR_26 <S2SV_ModEnd> ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_10 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if <S2SV_ModEnd> ( ( VAR_10 <S2SV_ModStart> VAR_24 ) ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_26 , "horAcc16" , "%s" , "cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_25 <S2SV_ModStart> ) ; } return 1 ;
<S2SV_ModStart> if ( ! VAR_40 ) { METHOD_10 ( VAR_42 , "Password<S2SV_blank>packet<S2SV_blank>before<S2SV_blank>auth<S2SV_blank>packet?" ) ; return VAR_47 ; } if ( !
<S2SV_ModStart> * VAR_20 ; struct STRUCT_OR_UNION_0 VAR_21 = * VAR_13 ; if ( ! METHOD_5 ( VAR_13 ) ) { METHOD_6 ( "lspci_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state" , & VAR_21 ) ; }
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_15 , <S2SV_ModStart> VAR_17 ) { METHOD_4 <S2SV_ModEnd> ( VAR_15 , <S2SV_ModStart> } else { METHOD_4 <S2SV_ModEnd> ( VAR_15 , <S2SV_ModStart> 1 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_15 ,
<S2SV_ModStart> TYPE_4 VAR_17 ; if ( VAR_16 + sizeof ( VAR_17 ) > VAR_14 -> VAR_11 ) { return ( TYPE_5 ) - 1 ; } <S2SV_ModStart> -> VAR_15 ) <S2SV_ModEnd> ; VAR_17 =
<S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_33 . <S2SV_ModStart> VAR_28 ] ) , VAR_34
<S2SV_ModStart> -> VAR_156 = METHOD_26 ( & VAR_148 -> VAR_149 , <S2SV_ModEnd> & VAR_103 , <S2SV_ModStart> & VAR_103 , <S2SV_ModEnd> VAR_155 ) ; <S2SV_ModStart> ( VAR_157 ) return VAR_157 <S2SV_ModEnd> ; VAR_157 = <S2SV_ModStart> VAR_153 ) ; <S2SV_ModEnd> return VAR_157 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_22 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ; TYPE_4 VAR_46 ; TYPE_10 VAR_80 ; TYPE_10 * VAR_98 ; TYPE_23 VAR_110 = 0 ; if ( ! VAR_106 ) return VAR_111 ; VAR_46 <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> VAR_80 = VAR_106 <S2SV_ModStart> - 1 ; <S2SV_ModEnd> VAR_98 = VAR_106 <S2SV_ModStart> VAR_106 -> VAR_11 ; if ( ! VAR_98 ) return VAR_111 <S2SV_ModStart> - VAR_91 ; if ( VAR_110 + 4 > VAR_106 -> VAR_112 ) return VAR_111 ; VAR_110 += 4 ; <S2SV_ModStart> ; } } return VAR_113 ;
<S2SV_ModStart> VAR_36 ) { VAR_36 -> VAR_37 = VAR_38 ;
<S2SV_ModStart> TYPE_3 VAR_24 , TYPE_6 <S2SV_ModEnd> VAR_20 , TYPE_5
<S2SV_ModStart> if ( METHOD_8 == 0 || METHOD_8
<S2SV_ModStart> TYPE_1 * VAR_93 <S2SV_ModEnd> ) { TYPE_4 <S2SV_ModStart> ; TYPE_5 VAR_54 <S2SV_ModEnd> ; { TYPE_6 <S2SV_ModStart> return VAR_54 ; <S2SV_ModEnd> METHOD_5 ( &
<S2SV_ModStart> ( ! VAR_9 || VAR_12 > VAR_17 <S2SV_ModStart> VAR_14 ) ; if ( VAR_16 > ( TYPE_4 ) VAR_12 ) { VAR_16 = - 1 ; METHOD_4 ( VAR_14 ) ; }
<S2SV_ModStart> METHOD_34 ( "clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n" ) ; return - VAR_221 ; } if ( VAR_304 -> VAR_296 > VAR_344 / sizeof ( * VAR_342 ) ) { METHOD_34 ( "execbuf<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>cliprects\\n" , VAR_304 -> VAR_296
<S2SV_ModStart> TYPE_3 VAR_12 = <S2SV_ModEnd> METHOD_1 ( & <S2SV_ModStart> VAR_10 ) ; if ( VAR_12 == * VAR_11 ) { * VAR_11 = VAR_10 ; return 1 ; } else { * VAR_11 = VAR_12 ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_5 VAR_18 [ 50 <S2SV_ModEnd> ] , *
<S2SV_ModStart> -> VAR_20 = METHOD_3 ( TYPE_1 , <S2SV_ModStart> * VAR_21 ++ , VAR_22 )
<S2SV_ModStart> VAR_79 ; } METHOD_17 ( & VAR_96 ) ; METHOD_24 ( & VAR_87 , VAR_93 , VAR_93 -> VAR_89 ) ; METHOD_22 ( & VAR_96 ) ;
<S2SV_ModStart> } if ( VAR_439 -> VAR_449 ||
<S2SV_ModStart> ; TYPE_1 VAR_45 , VAR_76 , VAR_77 <S2SV_ModStart> = VAR_35 ; VAR_76 = METHOD_10 ( VAR_73 , VAR_74 ) ; VAR_77 = METHOD_10 ( VAR_73 , VAR_70 ) ; <S2SV_ModStart> = 1 ; if ( METHOD_11 ( VAR_76 ) || METHOD_11 ( VAR_77 ) ) return METHOD_5 ( VAR_73 , 0 ) ; <S2SV_ModStart> -> VAR_68 = VAR_77 <S2SV_ModEnd> ; * METHOD_9 <S2SV_ModStart> VAR_72 ) = VAR_76 <S2SV_ModEnd> ; return VAR_75
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_3 * VAR_167 = VAR_168 ; struct <S2SV_ModStart> VAR_130 ; } METHOD_6 ( & VAR_162 ) ; VAR_169 = - VAR_130 ; <S2SV_ModStart> -> VAR_26 ) goto VAR_161 ; VAR_169 = - VAR_30 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_154 ) goto VAR_161 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { VAR_169 = - VAR_75 ; <S2SV_ModEnd> VAR_167 = METHOD_10 <S2SV_ModStart> sizeof ( * <S2SV_ModEnd> VAR_167 ) , <S2SV_ModStart> if ( ! VAR_167 ) goto VAR_161 <S2SV_ModEnd> ; METHOD_5 ( <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_45 <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_48 <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_51 <S2SV_ModStart> 0 ) ; VAR_166 -> VAR_167 = VAR_167 ; } <S2SV_ModEnd> VAR_156 = VAR_168 <S2SV_ModStart> } VAR_161 : if ( VAR_169 && VAR_167 ) { METHOD_24 ( VAR_167 ) ; VAR_166 -> VAR_167 = VAR_168 ; } <S2SV_ModStart> VAR_162 ) ; <S2SV_ModEnd> return VAR_169 ;
<S2SV_ModStart> = VAR_73 ; VAR_71 -> VAR_75 = VAR_76 ;
<S2SV_ModStart> , TYPE_4 VAR_34 , TYPE_4 VAR_43 , TYPE_4 VAR_44 , TYPE_4 VAR_45 <S2SV_ModStart> ( VAR_40 ) ; VAR_40 -> VAR_44 = VAR_44 <S2SV_ModStart> 1 ; } METHOD_8 <S2SV_ModEnd> ( VAR_40 -> <S2SV_ModStart> 1 ; } METHOD_8 <S2SV_ModEnd> ( VAR_40 -> <S2SV_ModStart> VAR_42 ) ; if ( METHOD_5 ( & VAR_40 -> VAR_46 , VAR_33 , VAR_34 , VAR_35 ) < 0 ) { METHOD_6 ( VAR_40 ) ; return 1 ; } METHOD_8 ( VAR_40 -> VAR_46 . VAR_39 , 0 , VAR_40 -> VAR_46 . VAR_42 ) ; VAR_40 -> VAR_47 = METHOD_9 ( ( VAR_43 * VAR_44 ) , 1 ) ; METHOD_8 ( VAR_40 -> VAR_47 , 0 , ( VAR_43 * VAR_44 ) ) ; METHOD_10 ( VAR_40 , VAR_45 ) ; VAR_40 -> VAR_48 = 0 ; VAR_40 -> VAR_49 = 0 ; VAR_40 -> VAR_50 = 0 ; VAR_40 -> VAR_51 = 80 ; VAR_40 -> VAR_52 = 128 ; VAR_40 -> VAR_53 = 400000 ; VAR_40 -> VAR_54 = 80 ; if ( VAR_33 * VAR_34 > 1280 * 720 ) { VAR_40 -> VAR_53 = 3000000 ; VAR_40 -> VAR_54 = 200 ; } else if ( VAR_33 * VAR_34 > 960 * 540 ) { VAR_40 -> VAR_53 = 1200000 ; VAR_40 -> VAR_54 = 120 ; } else if ( VAR_33 * VAR_34 > 640 * 480 ) { VAR_40 -> VAR_53 = 600000 ; VAR_40 -> VAR_54 = 100 ; } return <S2SV_ModEnd> 0 ; }
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_2 * VAR_10 = VAR_19 -> VAR_10 ; struct <S2SV_ModStart> * VAR_20 ; if ( ! VAR_10 -> VAR_19 [ 1 ] || ! VAR_10 -> VAR_19 [ 1 ] -> VAR_12 ) { METHOD_4 ( & VAR_19 -> VAR_21 , "expected<S2SV_blank>endpoint<S2SV_blank>missing\\n" ) ; return - VAR_22 ; } <S2SV_ModStart> -> VAR_14 = <S2SV_ModEnd> VAR_10 -> VAR_19
<S2SV_ModStart> return VAR_9 ; METHOD_12 ( STRUCT_OR_UNION_24 , VAR_50 , VAR_47 ) ;
<S2SV_ModStart> ; if ( VAR_32 & 0xfffffe00 ) continue ; if ( VAR_32 < 2 <S2SV_ModEnd> ) continue ; <S2SV_ModStart> if ( VAR_32 >= 0x100 && VAR_32 <S2SV_ModStart> else if ( VAR_32 >= 0x120 &&
<S2SV_ModStart> VAR_5 & ( 1U << ( unsigned TYPE_2 ) <S2SV_ModEnd> VAR_7 ) )
<S2SV_ModStart> TYPE_6 * VAR_243 = VAR_260 ; TYPE_12 * VAR_216 = VAR_260 ; TYPE_15 * VAR_262 <S2SV_ModStart> VAR_261 ) ) { <S2SV_ModStart> VAR_261 ) ; } else { METHOD_54 ( VAR_261 -> VAR_157 == VAR_158 ) ; VAR_216 = METHOD_30 ( VAR_261 ) ; VAR_262 = VAR_216 -> VAR_199 -> VAR_200 ; } <S2SV_ModStart> , VAR_48 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_94 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_110 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> , VAR_124 , VAR_262 <S2SV_ModEnd> ) ; return <S2SV_ModStart> VAR_158 ) { METHOD_54 ( VAR_216 <S2SV_ModEnd> ) ; METHOD_38 <S2SV_ModStart> , VAR_186 , VAR_262 <S2SV_ModEnd> ) ; METHOD_52
<S2SV_ModStart> ( VAR_3 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> 1 ) ; if ( ! VAR_46 && VAR_43 -> VAR_44 . VAR_47 ) VAR_46 = - VAR_48 ;
<S2SV_ModStart> "localhost." ) || <S2SV_ModEnd> ! METHOD_29 (
<S2SV_ModStart> -> VAR_239 ; if ( VAR_239 < 0 ) { METHOD_33 ( "radius:packet<S2SV_blank>invalid<S2SV_blank>vendor<S2SV_blank>attribute<S2SV_blank>len<S2SV_blank>received\\n" ) ; goto VAR_242 ; } if ( 2 + VAR_239 > VAR_238 ) { METHOD_33 ( "radius:packet:<S2SV_blank>too<S2SV_blank>long<S2SV_blank>vendor<S2SV_blank>attribute<S2SV_blank>received<S2SV_blank>(%i,<S2SV_blank>%i)\\n" , VAR_235 , VAR_239 ) ; goto VAR_242 ; }
<S2SV_ModStart> VAR_82 ; } VAR_40 . VAR_84 [ sizeof ( VAR_40 . VAR_84 ) - 1 ] = 0 ;
<S2SV_ModStart> ) goto VAR_147 <S2SV_ModEnd> ; VAR_148 =
<S2SV_ModStart> return VAR_12 ; VAR_12 = METHOD_6 ( VAR_12 <S2SV_ModEnd> ) ; METHOD_5
<S2SV_ModStart> VAR_117 < VAR_89 || VAR_89 < sizeof ( struct STRUCT_OR_UNION_12 ) <S2SV_ModStart> ; if ( VAR_89 >= 15 * 4 ) return 0 ; if (
<S2SV_ModStart> 0 ) { struct STRUCT_OR_UNION_5 VAR_52 = VAR_51 -> VAR_52 ; <S2SV_ModStart> , VAR_50 , & <S2SV_ModEnd> VAR_52 ) ;
<S2SV_ModStart> 0 ) { const TYPE_8 VAR_44 = VAR_39 - VAR_43 ; <S2SV_ModStart> + VAR_43 , ( TYPE_9 ) VAR_44 ) ; VAR_43 = VAR_42 <S2SV_ModEnd> ; VAR_42 += <S2SV_ModStart> ; VAR_42 += VAR_44 <S2SV_ModEnd> ; } METHOD_3
<S2SV_ModStart> VAR_78 , VAR_80 -> VAR_84 . VAR_85
<S2SV_ModStart> VAR_19 ) return 0 <S2SV_ModEnd> ; VAR_20 =
<S2SV_ModStart> 0x00 } ; if ( VAR_15 -> VAR_16 > sizeof ( VAR_17 ) - 4 ) return - VAR_20 ;
<S2SV_ModStart> METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_12 , <S2SV_ModStart> == 1 ) METHOD_4 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> <= 34 ) METHOD_5 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> ) ; else METHOD_6 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_4 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_13 ) { return METHOD_2 ( VAR_11 , VAR_13 , VAR_11 -> VAR_14 == VAR_15 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_1 * VAR_196 , const <S2SV_ModStart> ) == VAR_131 && METHOD_27 ( VAR_192 -> VAR_193 ) == VAR_197 ) { TYPE_3 VAR_189 = ( ( TYPE_3 ) ( VAR_192 + 1 ) -> VAR_189 << 32 ) | ( TYPE_4 ) VAR_192 -> VAR_189 ; TYPE_5 VAR_198 = VAR_192 -> VAR_178 == VAR_199 ; if ( VAR_198 && ! VAR_196 -> VAR_200 ) VAR_189 = 0 ; METHOD_41 ( "(%02x)<S2SV_blank>r%d<S2SV_blank>=<S2SV_blank>0x%llx\\n" , VAR_192 -> VAR_193 , <S2SV_ModEnd> VAR_192 -> VAR_184 <S2SV_ModStart> -> VAR_184 , ( unsigned TYPE_6 TYPE_6 ) <S2SV_ModEnd> VAR_189 ) ;
<S2SV_ModStart> ; if ( VAR_67 < 0 || VAR_67 > VAR_89 ) return - VAR_90 ; if (
<S2SV_ModStart> = 0 ; TYPE_8 <S2SV_ModEnd> VAR_38 , VAR_30
<S2SV_ModStart> != 0 ) { METHOD_7 ( VAR_62 ) ; return VAR_60 ; } <S2SV_ModEnd> VAR_62 -> VAR_39
<S2SV_ModStart> , * VAR_53 , * VAR_58 = VAR_41 <S2SV_ModStart> if ( ! METHOD_6 ( VAR_50 -> VAR_38 , VAR_53 , VAR_40 , & VAR_58 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( VAR_25 && strcmp ( VAR_58 , VAR_25 ) == 0 ) VAR_57 = - EEXIST ; else VAR_57 = - ENOENT <S2SV_ModEnd> ; goto VAR_55 <S2SV_ModStart> if ( ! METHOD_5 ( VAR_50 , VAR_53 , VAR_40 , VAR_41 , VAR_33 ) ) { VAR_57 = - VAR_43 ; goto VAR_55 ; } if ( ! <S2SV_ModStart> VAR_56 ) ; METHOD_9 ( VAR_58 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_22 >= VAR_21 <S2SV_ModStart> VAR_21 -> VAR_19 <S2SV_ModEnd> ) return -
<S2SV_ModStart> * VAR_27 ; <S2SV_ModEnd> VAR_27 = METHOD_2 <S2SV_ModStart> VAR_16 ) ; <S2SV_ModEnd> return VAR_27 ;
<S2SV_ModStart> } ; return METHOD_4 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> VAR_212 ; } if ( VAR_196 -> VAR_214 > VAR_196 -> VAR_197 ) { METHOD_21 ( "%s:<S2SV_blank>Data<S2SV_blank>count<S2SV_blank>(%" VAR_204 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>data<S2SV_blank>capacity<S2SV_blank>" "(%" VAR_204 ")" , VAR_205 , VAR_196 -> VAR_214 , VAR_196 -> VAR_197 ) ; METHOD_23 ( VAR_215 , "30591838" ) ; return VAR_212 ; }
<S2SV_ModStart> ( 2 , "vm_close<S2SV_blank>%p<S2SV_blank>[count=%u,vma=%08lx-%08lx]\\n" <S2SV_ModEnd> , VAR_53 ,
<S2SV_ModStart> return VAR_43 ; if ( VAR_45 >= sizeof ( VAR_57 ) ) { METHOD_15 ( VAR_59 , "%s:<S2SV_blank>Truncating<S2SV_blank>overflowed<S2SV_blank>address<S2SV_blank>\'%.*s\'" , VAR_60 , VAR_45 , VAR_46 ) ; VAR_45 = sizeof ( VAR_57 ) - 1 ; }
<S2SV_ModStart> VAR_5 ) , 0 ,
<S2SV_ModStart> * VAR_26 , TYPE_11 * VAR_58 , <S2SV_ModStart> -> VAR_6 ; TYPE_12 * const VAR_59 = & VAR_58 -> VAR_9 ; <S2SV_ModStart> VAR_52 = & VAR_59 -> <S2SV_ModEnd> VAR_10 ; TYPE_7 <S2SV_ModStart> ] -> VAR_29 <S2SV_ModEnd> ; const TYPE_10 <S2SV_ModStart> VAR_47 = ! METHOD_6 <S2SV_ModEnd> ( & VAR_43 <S2SV_ModStart> { VAR_26 , VAR_58 <S2SV_ModEnd> , VAR_56 } <S2SV_ModStart> ! VAR_42 ) VAR_58 -> VAR_44 -> <S2SV_ModEnd> VAR_45 [ VAR_46 <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> return ; } <S2SV_ModStart> VAR_42 ) { VAR_58 -> VAR_44 -> <S2SV_ModEnd> VAR_45 [ VAR_46 <S2SV_ModStart> VAR_55 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> ) VAR_75 |= ( ( unsigned ) <S2SV_ModStart> ++ << 24UL )
<S2SV_ModStart> , VAR_296 , VAR_298 ,
<S2SV_ModStart> ) ) { * VAR_30 = "INVALID_S4U2PROXY_OPTIONS" ; <S2SV_ModStart> ) ) { * VAR_30 = "EVIDENCE_TICKET_MISMATCH" ;
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_83 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> ( VAR_84 , <S2SV_ModEnd> & VAR_82 ,
<S2SV_ModStart> 8 ) ; if ( VAR_412 -> VAR_299 + VAR_412 -> VAR_301 > VAR_371 ) { METHOD_56 ( VAR_418 , VAR_419 , "Block<S2SV_blank>parameters<S2SV_blank>invalid\\n" ) ; return VAR_332 ; }
<S2SV_ModStart> VAR_37 ; } VAR_38 -> VAR_10 = VAR_16 ;
<S2SV_ModStart> , VAR_103 , VAR_101 , VAR_91 , VAR_92 ) ; } else VAR_103 = METHOD_16 ( VAR_105 , VAR_103 , VAR_101 ) ; if ( VAR_103 == VAR_107 ) goto VAR_104 ; } if <S2SV_ModStart> < VAR_101 ) <S2SV_ModEnd> METHOD_18 ( (
<S2SV_ModStart> STRUCT_OR_UNION_4 * VAR_12 ; if ( ! METHOD_5 ( VAR_15 ) ) return - VAR_16
<S2SV_ModStart> VAR_39 &= ~ ( VAR_40 | VAR_61 ) <S2SV_ModEnd> ; VAR_59 ->
<S2SV_ModStart> -> VAR_886 , 0 ,
<S2SV_ModStart> * VAR_72 , const TYPE_16 <S2SV_ModEnd> * VAR_76 , <S2SV_ModStart> & VAR_116 -> VAR_138 .
<S2SV_ModStart> VAR_19 ) ) { VAR_50 = <S2SV_ModEnd> - VAR_20 ; <S2SV_ModStart> - VAR_20 ; goto VAR_47 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_101 ) ; if ( VAR_99 -> VAR_9 == VAR_99 -> VAR_56 ) VAR_99 -> VAR_56 = METHOD_7 ( VAR_99 -> VAR_56 ) ;
<S2SV_ModStart> { for ( VAR_275 = ( <S2SV_ModEnd> TYPE_173 % 4
<S2SV_ModStart> = VAR_13 ; if ( VAR_13 == VAR_5 ) return ;
<S2SV_ModStart> VAR_12 ) ; if ( VAR_17 < 4 ) { METHOD_4 ( VAR_50 , VAR_51 , "Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOD<S2SV_blank>marker\\n" ) ; return VAR_52 ; }
<S2SV_ModStart> VAR_14 ) { METHOD_7 ( VAR_14 ) ;
<S2SV_ModStart> VAR_86 ) ; if ( VAR_106 -> VAR_93 . VAR_94 + 2 > sizeof ( struct STRUCT_OR_UNION_8 ) ) break ;
<S2SV_ModStart> ) ) ; METHOD_16 ( <S2SV_ModStart> METHOD_10 ( 200000 )
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> METHOD_1 ( & <S2SV_ModStart> -> VAR_3 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> & TYPE_15 , METHOD_44 ( <S2SV_ModStart> VAR_167 -> VAR_168 )
<S2SV_ModStart> ; VAR_175 -> VAR_195 = VAR_195 ; VAR_175 ->
<S2SV_ModStart> ) ; } METHOD_29 ( & METHOD_35 ( STRUCT_OR_UNION_59 ) -> VAR_146 ) ; <S2SV_ModStart> METHOD_45 ( STRUCT_OR_UNION_59 ) ; METHOD_34 ( & METHOD_35 ( STRUCT_OR_UNION_59 ) -> VAR_146
<S2SV_ModStart> ) ; } if ( VAR_56 ) { if ( ( VAR_11 & VAR_12 ) ) METHOD_19 ( "Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on" ) ; VAR_28 = VAR_14 ; VAR_31 = 0 ; }
<S2SV_ModStart> + 1 ; if ( VAR_547 -> VAR_209 [ VAR_401 ] > VAR_577 ) { return VAR_530 ; } <S2SV_ModStart> = VAR_425 ; if ( VAR_547 -> VAR_215 [ VAR_401 ] > VAR_547 -> VAR_209 [ VAR_401 ] ) { return VAR_530 ; }
<S2SV_ModStart> ) return ; <S2SV_ModEnd> METHOD_2 ( VAR_7
<S2SV_ModStart> STRUCT_OR_UNION_2 VAR_75 ; TYPE_6 VAR_78 = 0 ; <S2SV_ModStart> VAR_47 ) ; VAR_78 = <S2SV_ModStart> VAR_76 ) , "%smailboxes<S2SV_blank>" <S2SV_ModEnd> , VAR_67 ? <S2SV_ModStart> "" : "un" ) ; METHOD_28 ( VAR_76 + VAR_78 , sizeof ( VAR_76 ) - VAR_78 , VAR_43 , VAR_79 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( METHOD_4 <S2SV_ModEnd> ( STRUCT_OR_UNION_5 )
<S2SV_ModStart> VAR_26 -- ; METHOD_3 ( VAR_25 ) ;
<S2SV_ModStart> 7 ) { METHOD_5 <S2SV_ModEnd> ( VAR_87 , <S2SV_ModStart> VAR_99 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_92 , <S2SV_ModStart> } else { METHOD_6 <S2SV_ModEnd> ( VAR_87 , <S2SV_ModStart> VAR_99 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_92 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_15 <S2SV_ModEnd> METHOD_0 ( const <S2SV_ModStart> -> VAR_24 ; const TYPE_11 VAR_72 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> METHOD_1 ( VAR_24 , & VAR_12 -> VAR_47 [ 1 ] <S2SV_ModStart> = 0 ; TYPE_15 VAR_73 = 1 ; <S2SV_ModStart> < 0 ) VAR_73 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_24 ) && VAR_73 <S2SV_ModStart> , VAR_48 , VAR_72 <S2SV_ModEnd> , VAR_50 -> <S2SV_ModStart> == VAR_66 ) { VAR_73 = 0 ; break ; } <S2SV_ModEnd> * VAR_65 += <S2SV_ModStart> VAR_63 ; } if ( ! VAR_73 ) { * VAR_65 = VAR_66 ; * VAR_67 = VAR_70 ; * VAR_69 = VAR_70 ; * VAR_71 = 0 ; } return VAR_73 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_11 <S2SV_ModEnd> METHOD_0 ( const <S2SV_ModStart> VAR_0 , struct STRUCT_OR_UNION_4 * VAR_49 , TYPE_11 VAR_50 <S2SV_ModEnd> , struct STRUCT_OR_UNION_2 <S2SV_ModStart> VAR_18 ) { TYPE_12 * VAR_51 = ( TYPE_12 * ) VAR_49 -> VAR_52 <S2SV_ModEnd> ; union STRUCT_OR_UNION_3 <S2SV_ModStart> STRUCT_OR_UNION_3 VAR_46 ; TYPE_11 VAR_53 = VAR_54 ; METHOD_4 ( VAR_46 , VAR_51 , VAR_55 . VAR_56 ) { TYPE_13 VAR_45 = METHOD_2 ( VAR_46 . VAR_27 -> VAR_45 ) ; * VAR_18 = VAR_46 . VAR_27 ; switch ( VAR_46 . VAR_27 -> VAR_28 ) { case VAR_57 : break ; case VAR_58 : if ( VAR_45 != sizeof ( VAR_59 ) ) return VAR_54 ; VAR_53 = VAR_60 ; break ; case VAR_61 : if ( VAR_45 != sizeof ( VAR_62 ) ) return VAR_54 ; VAR_53 = VAR_60 ; break ; case VAR_29 : case VAR_30 : case VAR_31 : if ( VAR_50 && ! VAR_53 ) return VAR_54 ; VAR_45 = METHOD_2 ( VAR_46 . VAR_51 -> VAR_37 . VAR_45 ) ; if ( VAR_45 < sizeof ( TYPE_10 ) + sizeof ( TYPE_9 ) ) return VAR_54 ; break ; case VAR_40 : case VAR_41 : if ( VAR_45 != sizeof ( TYPE_10 ) ) return VAR_54 ; break ; default : return VAR_54 ; } } if ( VAR_50 && ! VAR_53 ) return VAR_54 ; if ( ! VAR_50 && VAR_53 ) return VAR_54 ; if ( <S2SV_ModEnd> VAR_46 . VAR_47 <S2SV_ModStart> VAR_46 . VAR_47 != VAR_49 -> VAR_48 ) return VAR_54 ; return VAR_60 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ! METHOD_20 ( <S2SV_ModEnd> VAR_85 ) ) <S2SV_ModStart> ! METHOD_20 ( <S2SV_ModEnd> VAR_85 ) ) <S2SV_ModStart> ( METHOD_20 ( <S2SV_ModEnd> VAR_85 ) ) <S2SV_ModStart> ! METHOD_20 ( <S2SV_ModEnd> VAR_85 ) ) <S2SV_ModStart> ( METHOD_20 ( <S2SV_ModEnd> VAR_85 ) ) <S2SV_ModStart> ! METHOD_20 ( <S2SV_ModEnd> VAR_85 ) )
<S2SV_ModStart> + VAR_8 ; TYPE_4 VAR_56 , VAR_57 , VAR_58 ; <S2SV_ModStart> VAR_55 ) ; VAR_56 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_52 ) ; VAR_57 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_15 ) ; VAR_58 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_43 ) ; if ( VAR_56 > VAR_58 || VAR_57 > VAR_58 ) goto VAR_59 ; while ( VAR_56 != VAR_57 ) { unsigned TYPE_5 VAR_33 = METHOD_9 ( VAR_23 + 2 * VAR_56 ) ; if ( METHOD_6 ( VAR_28 , & VAR_53 -> VAR_30 ) ) METHOD_7 ( VAR_53 -> VAR_32 , & VAR_33 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> 1 ) ; if ( ++ VAR_56 > VAR_58 ) VAR_56 = 0 ; METHOD_11 ( VAR_56 , <S2SV_ModEnd> VAR_53 -> VAR_50 <S2SV_ModStart> + VAR_52 ) ; } VAR_59 : <S2SV_ModEnd> METHOD_12 ( &
<S2SV_ModStart> case VAR_84 : VAR_162 = METHOD_25 ( VAR_156 , VAR_155 , VAR_164 ) ; if ( VAR_162 ) return VAR_162 ; break ; case 0 : break ; default : return VAR_153 ; } if ( METHOD_18 ( VAR_156 ) ) { VAR_162 = METHOD_25 ( VAR_156 , VAR_155 , VAR_165 ) ; if ( VAR_162 ) return VAR_162 ; <S2SV_ModEnd> } else {
<S2SV_ModStart> } VAR_205 = METHOD_65 <S2SV_ModEnd> ( VAR_225 , <S2SV_ModStart> VAR_226 , VAR_273 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> -> VAR_58 , sizeof ( VAR_57 -> VAR_58 ) - 1 <S2SV_ModEnd> ) ; METHOD_9
<S2SV_ModStart> * METHOD_0 ( TYPE_9 VAR_51 , TYPE_9 <S2SV_ModEnd> VAR_29 ) { <S2SV_ModStart> * VAR_84 ; TYPE_9 <S2SV_ModEnd> VAR_68 ; TYPE_5
<S2SV_ModStart> STRUCT_OR_UNION_9 , struct STRUCT_OR_UNION_10 * VAR_32 , struct <S2SV_ModStart> STRUCT_OR_UNION_3 * VAR_23 ; TYPE_6 VAR_12 ; unsigned TYPE_3 VAR_33 <S2SV_ModStart> . VAR_9 ; VAR_12 = METHOD_3 ( VAR_23 -> VAR_12 ) ; VAR_33 = METHOD_4 ( VAR_23 ) ; <S2SV_ModStart> TYPE_5 TYPE_5 ) VAR_12 , VAR_33 ) ; if ( VAR_12 != VAR_32 -> VAR_34 || VAR_33 > VAR_32 -> VAR_35 ) { VAR_31 = METHOD_10 ( VAR_25 , STRUCT_OR_UNION_9 , VAR_32 , VAR_30 , VAR_36 ) ; if ( VAR_31 < 0 ) goto VAR_29 ; METHOD_11 ( VAR_30 ) ; VAR_30 = METHOD_12 ( STRUCT_OR_UNION_9 , VAR_32 -> VAR_34 , VAR_30 ) ; if ( METHOD_13 ( VAR_30 ) ) { VAR_31 = METHOD_14 ( VAR_30 ) ; goto VAR_29 ; } VAR_17 = METHOD_1 ( STRUCT_OR_UNION_9 ) ; VAR_23 = VAR_30 [ VAR_17 ] . VAR_9 ; } <S2SV_ModEnd> VAR_31 = METHOD_5
<S2SV_ModStart> { TYPE_29 * VAR_255 ; if ( VAR_277 . VAR_278 < 4 || VAR_277 . VAR_278 > 1024 ) { METHOD_78 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_301 ) ; return VAR_303 ; } if ( VAR_295 ) METHOD_78 ( "got<S2SV_blank>PROP<S2SV_blank>chunk<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>total" , ( TYPE_27 ) VAR_277 . VAR_278 ) ;
<S2SV_ModStart> VAR_35 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_68
<S2SV_ModStart> ; if ( METHOD_21 ( & VAR_253 , VAR_248 , sizeof ( VAR_253 ) ) ) return - VAR_250 ; switch ( VAR_253 ) { case VAR_101 : case VAR_102 : case VAR_103 : break ; default : return - VAR_246 ; } METHOD_22 ( VAR_213 ) ; if ( <S2SV_ModStart> . VAR_233 ) { VAR_44 = <S2SV_ModEnd> - VAR_234 ; <S2SV_ModStart> - VAR_234 ; } else { <S2SV_ModEnd> VAR_251 -> VAR_105 <S2SV_ModStart> = VAR_253 ; VAR_44 = 0 ; } METHOD_23 ( VAR_213 ) ; return VAR_44 ; <S2SV_ModEnd> } case VAR_108
<S2SV_ModStart> ; METHOD_8 ( VAR_67 <S2SV_ModEnd> , VAR_61 , <S2SV_ModStart> ; METHOD_8 ( VAR_67 <S2SV_ModEnd> , VAR_61 , <S2SV_ModStart> ; METHOD_8 ( VAR_67 <S2SV_ModEnd> , VAR_61 ,
<S2SV_ModStart> VAR_19 ; return METHOD_4 ( <S2SV_ModStart> VAR_22 ) ) )
<S2SV_ModStart> TYPE_24 ) VAR_125 + 1
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_11 <S2SV_ModEnd> * VAR_41 = <S2SV_ModStart> && VAR_41 -> VAR_41 . <S2SV_ModStart> ? VAR_41 -> VAR_41 . <S2SV_ModStart> && VAR_41 -> VAR_41 .
<S2SV_ModStart> ] = VAR_134 ; if ( VAR_139 >= VAR_137 ) return - 1 <S2SV_ModStart> VAR_139 ++ ; <S2SV_ModEnd> } * VAR_138
<S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_13 , VAR_14
<S2SV_ModStart> VAR_107 -> VAR_95 [ VAR_101 ] && VAR_107 -> VAR_57 <S2SV_ModStart> [ VAR_101 ] && VAR_107 -> VAR_57 [ VAR_101 ]
<S2SV_ModStart> VAR_102 ) - 128 <S2SV_ModEnd> ) ) {
<S2SV_ModStart> TYPE_5 METHOD_0 ( TYPE_12 <S2SV_ModEnd> * VAR_88 , <S2SV_ModStart> = 0 ; TYPE_11 VAR_92 = 1.0 - VAR_29 -> VAR_72 ; TYPE_11 VAR_93 = VAR_29 -> VAR_72 - VAR_29 -> VAR_74 ; <S2SV_ModStart> -> VAR_8 < VAR_94 <S2SV_ModEnd> ) && ( <S2SV_ModStart> -> VAR_8 < VAR_94 ) && ( ( VAR_29 -> VAR_72 < VAR_95 ) || ( ( VAR_92 > VAR_96 ) && ( VAR_92 > ( VAR_97 * VAR_93 ) <S2SV_ModEnd> ) && ( <S2SV_ModStart> ) ) < VAR_98 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_52 ) > VAR_99 <S2SV_ModEnd> ) || ( <S2SV_ModStart> VAR_79 ) > VAR_99 <S2SV_ModEnd> ) || ( <S2SV_ModStart> ) ) > VAR_100 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> VAR_75 = ( VAR_101 <S2SV_ModEnd> * VAR_84 . <S2SV_ModStart> ( VAR_75 > VAR_102 ) VAR_75 = VAR_102 <S2SV_ModEnd> ; if (
<S2SV_ModStart> 3 * VAR_11 + 8
<S2SV_ModStart> -> VAR_15 ) { <S2SV_ModStart> VAR_15 ) ; VAR_94 -> VAR_15 = VAR_57 ; }
<S2SV_ModStart> METHOD_2 ( & VAR_367 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_28 -> VAR_6 <S2SV_ModStart> VAR_28 -> VAR_6 <S2SV_ModEnd> && VAR_28 -> <S2SV_ModStart> VAR_10 ) { METHOD_9 ( VAR_28 -> VAR_32 == VAR_33 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_26 || ptrace_freeze_traced ( VAR_28 <S2SV_ModEnd> ) ) VAR_31 <S2SV_ModStart> VAR_31 = 0 <S2SV_ModEnd> ; } METHOD_7 <S2SV_ModStart> ! VAR_26 ) { if ( ! <S2SV_ModEnd> METHOD_8 ( VAR_28 <S2SV_ModStart> ( VAR_28 , VAR_33 ) ) { METHOD_9 ( VAR_28 -> VAR_32 == VAR_33 ) ; VAR_31 = <S2SV_ModEnd> - VAR_30 ; <S2SV_ModStart> - VAR_30 ; } }
<S2SV_ModStart> VAR_3 ) ; METHOD_2 ( & VAR_4 -> VAR_5 ) ;
<S2SV_ModStart> { VAR_43 = METHOD_10 ( STRUCT_OR_UNION_8 <S2SV_ModEnd> , & STRUCT_OR_UNION_8 <S2SV_ModStart> STRUCT_OR_UNION_8 -> VAR_25 , & VAR_42 ) ; if ( VAR_43 ) return VAR_43 ; <S2SV_ModEnd> STRUCT_OR_UNION_8 -> VAR_17 <S2SV_ModStart> STRUCT_OR_UNION_8 ) ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> ; VAR_83 : METHOD_23 ( VAR_85 ) ; VAR_86 : VAR_87 : METHOD_24 ( 4 , VAR_88 , "(wimax_dev<S2SV_blank>%p<S2SV_blank>state<S2SV_blank>%d)<S2SV_blank>=<S2SV_blank>%d\\n" , STRUCT_OR_UNION_14 , VAR_89 , VAR_91 ) ; <S2SV_ModStart> METHOD_22 ( VAR_84 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> && VAR_66 >= 4 <S2SV_ModEnd> && VAR_80 . <S2SV_ModStart> && VAR_66 >= 4 <S2SV_ModEnd> && VAR_80 .
<S2SV_ModStart> ( VAR_37 ) ) ; METHOD_16 ( & VAR_71 -> VAR_72
<S2SV_ModStart> VAR_35 -> VAR_22 [ VAR_36 ] && VAR_35 -> VAR_29
<S2SV_ModStart> ; METHOD_14 ( METHOD_18 ( VAR_28 -> VAR_33 , 1 ) <S2SV_ModEnd> ) ; METHOD_15
<S2SV_ModStart> * VAR_29 ; TYPE_3 * VAR_37 ; TYPE_3 * VAR_38 [ 2 ] ; METHOD_14 ( VAR_39 ) ; <S2SV_ModStart> VAR_35 ; } VAR_37 = METHOD_15 ( & VAR_40 ) ; if ( VAR_37 == VAR_35 ) { METHOD_13 ( VAR_36 ) ; return VAR_35 ; } VAR_38 [ 0 ] = VAR_37 ; VAR_38 [ 1 ] = VAR_36 ; VAR_29 = METHOD_16 <S2SV_ModEnd> ( VAR_31 -> <S2SV_ModStart> -> VAR_21 , VAR_38 , 2 ) ; METHOD_13 ( VAR_36 ) ; if ( ! VAR_29 ) return VAR_35 ; if ( ! METHOD_17 ( VAR_29 ) ) { METHOD_19 ( VAR_41 , "unicodedata.normalize()<S2SV_blank>must<S2SV_blank>return<S2SV_blank>a<S2SV_blank>string,<S2SV_blank>not<S2SV_blank>" "%.200s" , METHOD_18 ( VAR_29 ) -> VAR_42 ) ; METHOD_13 ( VAR_29 ) ; return VAR_35 ; } <S2SV_ModEnd> VAR_36 = VAR_29
<S2SV_ModStart> VAR_101 ; } VAR_102 = METHOD_14 ( VAR_105 -> VAR_98 ) ; if ( VAR_102 && VAR_102 -> METHOD_16 ) { VAR_93 = VAR_102 -> METHOD_16 ( VAR_103 , VAR_105 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_101 ; } <S2SV_ModEnd> } return VAR_105
<S2SV_ModStart> ) == VAR_4 && VAR_9 -> VAR_14 < VAR_9 -> VAR_15
<S2SV_ModStart> VAR_74 -> VAR_6 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_13 <S2SV_ModStart> { } ; METHOD_28 ( & VAR_74 -> VAR_163 ) ; VAR_161 -> VAR_164 [ 0 ] = 0xe ; VAR_161 -> VAR_164 [ 1 ] = 0x80 ; VAR_161 -> VAR_164 [ 2 ] = 0x0 ; <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x02 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> 300 ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_161 -> VAR_164 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( VAR_74 , VAR_161 -> VAR_164 , 1 , VAR_161 -> VAR_164 <S2SV_ModEnd> , 1 , <S2SV_ModStart> METHOD_11 ( "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_29 ( & VAR_74 -> VAR_163
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_10 ; if <S2SV_ModStart> - METHOD_3 ( VAR_11 <S2SV_ModEnd> , ( ( <S2SV_ModStart> : METHOD_3 ( VAR_11 <S2SV_ModEnd> , VAR_10 )
<S2SV_ModStart> ( VAR_22 , <S2SV_ModEnd> VAR_23 , VAR_24
<S2SV_ModStart> -> VAR_105 ; enum VAR_107 VAR_52 ; <S2SV_ModStart> , VAR_105 ) ; VAR_52 = VAR_105 -> VAR_52 <S2SV_ModStart> ( VAR_42 && <S2SV_ModEnd> VAR_52 == VAR_39 <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_52 == VAR_23 <S2SV_ModStart> == VAR_23 || <S2SV_ModEnd> VAR_52 == VAR_38 <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_52 == VAR_31 <S2SV_ModStart> ) ; } VAR_104 <S2SV_ModEnd> -> VAR_52 = <S2SV_ModStart> VAR_50 ) ; METHOD_9 ( VAR_102 , VAR_105 ) ; if ( <S2SV_ModEnd> VAR_52 == VAR_53 <S2SV_ModStart> * VAR_70 ; METHOD_12 ( VAR_102 , VAR_87 + 2 ) ; <S2SV_ModEnd> VAR_71 = VAR_105 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_92
<S2SV_ModStart> METHOD_0 ( const TYPE_8 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> * VAR_8 , vpx_prob <S2SV_ModEnd> VAR_18 [ ] <S2SV_ModStart> TYPE_7 VAR_13 , TYPE_9 <S2SV_ModEnd> * VAR_15 )
<S2SV_ModStart> return 0 ; METHOD_7 ( & METHOD_6 ( VAR_32 ) -> VAR_33 . VAR_37 ) ; <S2SV_ModStart> 1 ; } METHOD_8 ( & METHOD_6 ( VAR_32 ) -> VAR_33 . VAR_37 ) ;
<S2SV_ModStart> VAR_13 , VAR_3 , sizeof ( VAR_13 )
<S2SV_ModStart> VAR_79 ; } <S2SV_ModEnd> } VAR_174 ->
<S2SV_ModStart> METHOD_0 ( const TYPE_10 <S2SV_ModEnd> * VAR_27 , <S2SV_ModStart> = { { VAR_57 , VAR_57 } , { VAR_58 , VAR_57 } , { VAR_57 , VAR_58 } , { VAR_58 , VAR_58 <S2SV_ModEnd> } } ; <S2SV_ModStart> , VAR_54 ; TYPE_10 <S2SV_ModEnd> VAR_37 [ 4 <S2SV_ModStart> 4 ] ; TYPE_10 <S2SV_ModEnd> * VAR_28 = <S2SV_ModStart> = VAR_37 ; TYPE_10 <S2SV_ModEnd> VAR_42 [ 4 <S2SV_ModStart> ++ VAR_54 ) { <S2SV_ModStart> VAR_56 ] = METHOD_5 ( <S2SV_ModEnd> VAR_53 [ VAR_54 <S2SV_ModStart> + VAR_56 ] , METHOD_4 ( VAR_51 [ VAR_54 ] , 4 ) ) ; } <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> && METHOD_25 ( VAR_80 <S2SV_ModEnd> , VAR_78 ,
<S2SV_ModStart> VAR_5 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> = 0 ; TYPE_7 VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ; TYPE_7 VAR_47 [ 4 ] ; TYPE_7 VAR_48 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; do { while ( VAR_35 < VAR_28 + VAR_29 && ( * VAR_35 == '<S2SV_blank>' || * VAR_35 == '\\t' || * VAR_35 == '\\n' || * VAR_35 == '\\r' ) ) { VAR_35 ++ ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> break ; } if ( ( VAR_42 = VAR_49 [ ( TYPE_7 ) ( unsigned TYPE_6 ) * VAR_35 ++ ] ) == - 1 ) { continue ; } VAR_47 [ VAR_48 ++ ] = VAR_42 ; if ( VAR_48 == 4 ) { VAR_48 = 0 ; VAR_43 = VAR_47 [ 0 ] ; VAR_44 = VAR_47 [ 1 ] ; VAR_45 = VAR_47 [ 2 ] ; VAR_46 = VAR_47 [ 3 ] ; if ( VAR_44 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_43 << 2 ) + ( VAR_44 >> 4 ) ) & 0xFF ) ; } if ( VAR_45 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_44 << 4 ) + ( VAR_45 >> 2 ) ) & 0xFF ) ; } if ( VAR_46 >= 0 ) { VAR_41 [ VAR_40 ++ ] = ( unsigned TYPE_6 ) ( ( ( VAR_45 << 6 ) + VAR_46 ) & 0xFF ) ; } <S2SV_ModEnd> } } while
<S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> while ( VAR_71
<S2SV_ModStart> ] ) ; if ( VAR_103 -> VAR_72 < 1 || VAR_103 -> VAR_74 < 1 ) { METHOD_8 ( VAR_103 -> VAR_65 , "Invalid<S2SV_blank>image<S2SV_blank>dimensions" ) ; goto VAR_106 ; }
<S2SV_ModStart> TYPE_6 VAR_78 ; TYPE_3 <S2SV_ModEnd> VAR_103 ; TYPE_8 <S2SV_ModStart> * VAR_51 ) ; if ( sizeof ( struct STRUCT_OR_UNION_4 ) > VAR_103 ) goto VAR_106 <S2SV_ModStart> ) VAR_101 ; METHOD_1 ( * VAR_65 ) ; if ( sizeof ( struct STRUCT_OR_UNION_7 ) > VAR_103 ) goto VAR_106 ; <S2SV_ModStart> VAR_104 ) ; if ( VAR_104 > VAR_103 ) goto VAR_106 ; <S2SV_ModStart> case VAR_79 : if ( VAR_104 != 4 ) goto VAR_106 ; <S2SV_ModStart> case VAR_92 : if ( VAR_104 != VAR_108 ) goto VAR_106 ;
<S2SV_ModStart> [ VAR_49 ] && VAR_94 -> VAR_40 [ VAR_49 ]
<S2SV_ModStart> ) METHOD_50 ( VAR_91
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( STRUCT_OR_UNION_6 )
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_2 <S2SV_ModEnd> * VAR_5 ) <S2SV_ModStart> * VAR_3 = METHOD_4 <S2SV_ModEnd> ( VAR_5 )
<S2SV_ModStart> STRUCT_OR_UNION_3 VAR_88 ; METHOD_2 ( VAR_86 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) ;
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( STRUCT_OR_UNION_6 )
<S2SV_ModStart> -> VAR_5 ; struct STRUCT_OR_UNION_2 * VAR_10 = VAR_9 -> VAR_10 ; TYPE_1 VAR_14 = 0 ; if <S2SV_ModEnd> ( VAR_9 -> <S2SV_ModStart> ( VAR_9 -> VAR_15 || VAR_4 -> VAR_16 != METHOD_2 ( VAR_10 -> VAR_8 -> VAR_17 ) >> VAR_18 ) VAR_14 = METHOD_3 ( VAR_19 , VAR_12 ) ; return VAR_14 ? : METHOD_1 ( <S2SV_ModStart> -> VAR_8 , <S2SV_ModEnd> VAR_10 -> VAR_11
<S2SV_ModStart> TYPE_17 VAR_177 [ VAR_190 <S2SV_ModEnd> ] ; VAR_11 <S2SV_ModStart> + 1 , "prestring=%490s" <S2SV_ModEnd> , VAR_177 ) <S2SV_ModStart> ) ) > VAR_190 <S2SV_ModEnd> - 3 ) <S2SV_ModStart> + 1 , "protos=%490s" <S2SV_ModEnd> , VAR_177 ) <S2SV_ModStart> ( VAR_177 , VAR_190 <S2SV_ModEnd> , "<S2SV_blank>*<S2SV_blank><S2SV_blank>These<S2SV_blank>prototypes<S2SV_blank>were<S2SV_blank>autogen\'d<S2SV_blank>by<S2SV_blank>xtractprotos,<S2SV_blank>v.<S2SV_blank>%s" , <S2SV_ModStart> ( VAR_177 , VAR_190 <S2SV_ModEnd> , "cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s" ,
<S2SV_ModStart> TYPE_8 VAR_90 [ VAR_99 <S2SV_ModEnd> ] ; TYPE_8 <S2SV_ModStart> ( VAR_90 , VAR_99 <S2SV_ModEnd> , "%s.data.%d" , <S2SV_ModStart> ( VAR_90 , VAR_99 <S2SV_ModEnd> , "%f<S2SV_blank>%f\\n" ,
<S2SV_ModStart> , * VAR_27 ; TYPE_2 VAR_82 <S2SV_ModStart> VAR_27 ) ) break ; } do { struct STRUCT_OR_UNION_2 * VAR_83 = VAR_70 -> VAR_41 ; if ( VAR_70 == VAR_84 ) break ; VAR_82 = VAR_83 -> VAR_77 == VAR_27 ; if ( VAR_82 && METHOD_5 ( VAR_34 , VAR_83 ) ) break ; VAR_70 = VAR_70 -> VAR_77 ; } while ( ! VAR_82 ) ; <S2SV_ModEnd> VAR_58 = VAR_43
<S2SV_ModStart> VAR_81 ) { METHOD_22 ( VAR_78 , VAR_86 , "Entry<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist" ) ; METHOD_19 ( VAR_78 , VAR_70 <S2SV_ModEnd> , VAR_81 , <S2SV_ModStart> 0 ) { METHOD_22 ( VAR_78 , VAR_86 , "Entry<S2SV_blank>does<S2SV_blank>not<S2SV_blank>have<S2SV_blank>userpassword<S2SV_blank>set" ) ; METHOD_19 ( VAR_78 , VAR_70 <S2SV_ModEnd> , VAR_81 , <S2SV_ModStart> 0 ) { METHOD_22 ( VAR_78 , VAR_86 , "Invalid<S2SV_blank>credentials" ) ;
<S2SV_ModStart> { TYPE_4 VAR_20 ; if ( VAR_17 > sizeof VAR_20 . VAR_15 ) return
<S2SV_ModStart> = VAR_60 ; VAR_66 = VAR_15 ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_8 ( STRUCT_OR_UNION_18 <S2SV_ModStart> goto VAR_47 ; METHOD_13 ( VAR_16 ) ; VAR_51 = METHOD_14 ( STRUCT_OR_UNION_18 , VAR_36 , VAR_45 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) goto VAR_52 <S2SV_ModEnd> ; if ( <S2SV_ModStart> { VAR_51 = METHOD_14 ( STRUCT_OR_UNION_18 , VAR_43 , VAR_46 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } VAR_52 : fh_unlock ( VAR_16 ) ; <S2SV_ModEnd> METHOD_11 ( VAR_45
<S2SV_ModStart> ; } } <S2SV_ModEnd> METHOD_85 ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>WordIO<S2SV_blank>(ResourceProducer,<S2SV_blank>MinFixed,<S2SV_blank>MaxFixed,<S2SV_blank>"
<S2SV_ModStart> ; unsigned TYPE_2 VAR_97 <S2SV_ModEnd> ; unsigned TYPE_2 <S2SV_ModStart> - VAR_20 ; VAR_26 = VAR_62 -> VAR_18 ; if ( ! VAR_26 ) return - VAR_20 ; METHOD_2 ( & VAR_62 -> VAR_63 ) ; if ( VAR_26 -> METHOD_4 ) { TYPE_4 VAR_31 ; VAR_31 = VAR_26 -> METHOD_4 ( VAR_62 , VAR_94 ) ; METHOD_9 ( & VAR_62 -> VAR_63 ) ; return VAR_31 ; } VAR_74 = VAR_62 -> VAR_60 . VAR_35 ; VAR_71 = VAR_62 -> VAR_60 . VAR_41 ; VAR_97 = METHOD_8 ( ( VAR_74 & ~ VAR_65 ) + VAR_71 ) >> VAR_89 ; if ( <S2SV_ModEnd> VAR_94 -> VAR_76 <S2SV_ModStart> VAR_94 -> VAR_76 >= VAR_97 ) { VAR_94 -> VAR_76 -= VAR_97 ; VAR_74 = VAR_62 -> VAR_60 . VAR_55 ; VAR_71 = VAR_62 -> VAR_60 . VAR_61 ; } METHOD_9 <S2SV_ModEnd> ( & VAR_62 <S2SV_ModStart> VAR_63 ) ; <S2SV_ModEnd> VAR_94 -> VAR_95 <S2SV_ModStart> , VAR_94 , VAR_74 ) ; return METHOD_13 ( VAR_94 , VAR_74 , VAR_71 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> , TYPE_4 VAR_59 <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( ! ND_TTEST ( * VAR_62 ) <S2SV_ModEnd> ) { METHOD_15 <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ; if ( VAR_59 <S2SV_ModEnd> > 1 ) <S2SV_ModStart> , "\\n\\t" , VAR_59 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> ) ; } if ( ! METHOD_1 ( VAR_58 -> VAR_59 . VAR_55 ) ) return ( 0 ) ; <S2SV_ModStart> VAR_59 . VAR_55 ) ; if ( ! METHOD_1 ( VAR_58 -> VAR_59 . VAR_60 ) ) return ( 0
<S2SV_ModStart> VAR_32 ) { struct STRUCT_OR_UNION_6 * VAR_57 ; <S2SV_ModStart> VAR_50 -> VAR_40 ; VAR_27 -> VAR_58 = VAR_50 ; VAR_57 = VAR_31 -> VAR_32 -> METHOD_6 ( VAR_31 , VAR_50 -> VAR_36 -> VAR_59 ) ; METHOD_7 ( VAR_57 , VAR_50 -> VAR_40 , VAR_55 )
<S2SV_ModStart> ; VAR_12 = METHOD_3 ( VAR_10 , 0 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> return VAR_41 ; <S2SV_ModEnd> VAR_42 = VAR_40
<S2SV_ModStart> = VAR_54 * ( TYPE_1 ) <S2SV_ModStart> = VAR_54 * ( TYPE_1 )
<S2SV_ModStart> } if ( ( <S2SV_ModStart> VAR_148 < VAR_27 ) || ( VAR_29 < sizeof ( TYPE_14 ) ) || ( <S2SV_ModEnd> VAR_148 > VAR_29 <S2SV_ModStart> sizeof ( TYPE_14 )
<S2SV_ModStart> VAR_64 ) { METHOD_13 ( <S2SV_ModEnd> VAR_24 -> VAR_8 <S2SV_ModStart> -> VAR_8 , <S2SV_ModEnd> VAR_65 -> VAR_6 <S2SV_ModStart> ) ) ; METHOD_13 ( <S2SV_ModEnd> VAR_24 -> VAR_14 <S2SV_ModStart> -> VAR_14 , <S2SV_ModEnd> VAR_65 -> VAR_12 <S2SV_ModStart> ) ) ; METHOD_13 ( <S2SV_ModEnd> VAR_24 -> VAR_16 <S2SV_ModStart> VAR_18 ) , sizeof ( VAR_24 -> VAR_16 ) ) ; VAR_24 -> VAR_70 = 0 ; VAR_24 -> VAR_71 = 0 <S2SV_ModEnd> ; VAR_24 -> <S2SV_ModStart> STRUCT_OR_UNION_4 VAR_42 ; METHOD_13 <S2SV_ModEnd> ( VAR_42 . <S2SV_ModStart> . VAR_38 , "larval" , sizeof ( VAR_42 . VAR_38 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; VAR_69 = METHOD_5 ( VAR_85 -> VAR_73 , <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> * VAR_69 ) , <S2SV_ModEnd> VAR_30 ) ;
<S2SV_ModStart> case VAR_530 : if ( VAR_725 + VAR_571 > VAR_732 -> VAR_715 ) { METHOD_70 ( ( "match<S2SV_blank>ran<S2SV_blank>over<S2SV_blank>window<S2SV_blank>boundary" ) ) return VAR_732 -> VAR_720 = VAR_721 ; }
<S2SV_ModStart> = 0 ; METHOD_3 <S2SV_ModEnd> ( VAR_11 ->
<S2SV_ModStart> ( VAR_6 , VAR_20 <S2SV_ModEnd> ) ; TYPE_5
<S2SV_ModStart> VAR_29 ) ; if ( ! METHOD_18 ( ) ) METHOD_19 ( VAR_29 ) ;
<S2SV_ModStart> METHOD_2 ( VAR_14 ) ; METHOD_6 ( VAR_14 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_decode_to_lua_array"
<S2SV_ModStart> struct STRUCT_OR_UNION_4 VAR_34 = { }
<S2SV_ModStart> return ; } if ( VAR_15 -> VAR_17 . VAR_50 < 1 ) { STRUCT_OR_UNION_87 -> STRUCT_OR_UNION_53 . VAR_12 = - VAR_51 ; return ; }
<S2SV_ModStart> | VAR_16 , ( VAR_25 == 0 || VAR_25 == VAR_22 ) ? 0644 : VAR_25 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; VAR_14 -> VAR_77 &= ~ VAR_78 ; VAR_14 ->
<S2SV_ModStart> ) ) ; METHOD_5 ( VAR_51 -> VAR_36 , VAR_53 , VAR_44 , METHOD_10 ( VAR_49 , VAR_53 ) ) ;
<S2SV_ModStart> ( VAR_246 , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>for<S2SV_blank>graphics<S2SV_blank>transmission<S2SV_blank>with<S2SV_blank>error:<S2SV_blank>[%d]<S2SV_blank>%s" <S2SV_ModEnd> , VAR_249 ,
<S2SV_ModStart> VAR_48 ; } VAR_51 . VAR_52 = 0 ;
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_9 <S2SV_ModEnd> * VAR_26 ; <S2SV_ModStart> -> VAR_26 , & VAR_26 -> <S2SV_ModStart> + VAR_26 -> VAR_26 .
<S2SV_ModStart> sizeof ( VAR_16 ) ) return - 1 ; if ( METHOD_8 ( VAR_20 , ".." ) || METHOD_9 ( VAR_20 , '/'
<S2SV_ModStart> VAR_36 ) { METHOD_4 ( VAR_45 , 0 , sizeof ( * VAR_45 ) ) ;
<S2SV_ModStart> , VAR_16 , VAR_20 <S2SV_ModEnd> ) == 0
<S2SV_ModStart> VAR_14 , const TYPE_7 <S2SV_ModEnd> * VAR_10 ,
<S2SV_ModStart> VAR_82 ) { METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> ) ) ; METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> ) ) ; METHOD_16 <S2SV_ModEnd> ( VAR_29 -> <S2SV_ModStart> STRUCT_OR_UNION_4 VAR_48 ; METHOD_16 <S2SV_ModEnd> ( VAR_48 .
<S2SV_ModStart> ; if ( METHOD_21 ( & VAR_253 , VAR_248 , sizeof ( VAR_253 ) ) ) return - VAR_250 ; switch ( VAR_253 ) { case VAR_101 : case VAR_102 : case VAR_103 : break ; default : return - VAR_246 ; } METHOD_22 ( VAR_213 ) ; if ( <S2SV_ModStart> . VAR_233 ) { VAR_44 = <S2SV_ModEnd> - VAR_234 ; <S2SV_ModStart> - VAR_234 ; } else { <S2SV_ModEnd> VAR_251 -> VAR_105 <S2SV_ModStart> = VAR_253 ; VAR_44 = 0 ; } METHOD_23 ( VAR_213 ) ; return VAR_44 ; <S2SV_ModEnd> } case VAR_108
<S2SV_ModStart> VAR_315 = VAR_316 ; VAR_353 -> VAR_355 = VAR_356 ; } else if ( VAR_353 -> VAR_355 != VAR_356 ) { return 0
<S2SV_ModStart> VAR_47 -= VAR_43 + 1
<S2SV_ModStart> METHOD_0 ( const TYPE_10 <S2SV_ModEnd> * VAR_20 , <S2SV_ModStart> , VAR_46 ; TYPE_10 <S2SV_ModEnd> VAR_30 [ 8 <S2SV_ModStart> 8 ] ; TYPE_10 <S2SV_ModEnd> * VAR_21 = <S2SV_ModStart> = VAR_30 ; TYPE_10 <S2SV_ModEnd> VAR_34 [ 8 <S2SV_ModStart> ++ VAR_46 ) { <S2SV_ModStart> VAR_48 ] = METHOD_5 ( <S2SV_ModEnd> VAR_45 [ VAR_46 <S2SV_ModStart> + VAR_48 ] , METHOD_4 ( VAR_43 [ VAR_46 ] , 5 ) ) ; } <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> ; if ( <S2SV_ModEnd> ! METHOD_14 (
<S2SV_ModStart> { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[256]<S2SV_blank>==<S2SV_blank>256<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 )
<S2SV_ModStart> VAR_33 = VAR_40 && VAR_40 -> VAR_20 > 0
<S2SV_ModStart> VAR_48 ) ; VAR_36 -> VAR_56 = 0 ;
<S2SV_ModStart> TYPE_3 VAR_12 , const <S2SV_ModStart> VAR_11 ) { TYPE_4 * VAR_13 ; TYPE_0 VAR_14 ; VAR_13 = METHOD_3 ( VAR_11 , VAR_12 , VAR_15 ) ; if ( ! VAR_13 ) return - VAR_16 ; VAR_14 = <S2SV_ModEnd> METHOD_1 ( VAR_6 <S2SV_ModStart> , 0 , VAR_13 <S2SV_ModEnd> , VAR_12 , <S2SV_ModStart> 500 ) ; METHOD_4 ( VAR_13 ) ; return VAR_14 ;
<S2SV_ModStart> * VAR_3 >= 31 <S2SV_ModEnd> && VAR_8 [
<S2SV_ModStart> ( 2 * VAR_142 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; } } METHOD_8 ( VAR_142 >= VAR_126 ) ;
<S2SV_ModStart> "Expression" , "Interactive" , "FunctionType" <S2SV_ModStart> && VAR_25 <= 3 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; TYPE_2 VAR_97 <S2SV_ModEnd> ; VAR_142 -> <S2SV_ModStart> STRUCT_OR_UNION_7 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_21 + ROSE_CALL_REQ_FACILITIES_OFF , VAR_142 -> VAR_143 - ROSE_CALL_REQ_FACILITIES_OFF , <S2SV_ModEnd> & VAR_106 )
<S2SV_ModStart> case VAR_25 : METHOD_33 ( TYPE_30 + VAR_101 + 5 ) ;
<S2SV_ModStart> VAR_132 = VAR_157 > 0 ? VAR_157 - 1 : 0 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_51 == VAR_13 || VAR_89 -> VAR_51 == VAR_94 <S2SV_ModStart> VAR_51 = VAR_22 ; } else if ( VAR_69 == VAR_36 && VAR_89 -> VAR_51 == VAR_13 ) { VAR_89 -> VAR_51 = VAR_94 ; } else { return VAR_95 <S2SV_ModStart> ) { return VAR_95 <S2SV_ModEnd> ; } else <S2SV_ModStart> = sizeof ( VAR_96 <S2SV_ModEnd> ) * 8 <S2SV_ModStart> ( VAR_69 == VAR_41 ) { if ( VAR_89 -> VAR_81 ) { VAR_89 -> VAR_51 = VAR_46 ; } else { VAR_89 -> VAR_51 = VAR_49 ; } } else if ( VAR_89 -> VAR_51 == BODY_CHUNK_LF ) { return VAR_95 ; } else if ( VAR_69 == VAR_36 ) { VAR_89 -> VAR_51 = BODY_CHUNK_LF ; } else if ( VAR_69 == ';' <S2SV_ModEnd> ) { VAR_89 <S2SV_ModStart> else if ( VAR_89 -> VAR_51 == VAR_52 ) { if ( VAR_69 != '\\t' && METHOD_3 ( VAR_69 ) ) { return VAR_95 ; } } else if ( VAR_89 -> VAR_51 == VAR_27 <S2SV_ModEnd> ) { TYPE_8 <S2SV_ModStart> { TYPE_8 VAR_75 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ; continue ; } VAR_89 -> VAR_79 -= 4 ; if ( VAR_89 -> VAR_79 < 0 ) { return VAR_92 <S2SV_ModStart> else { return VAR_95 <S2SV_ModEnd> ; } VAR_89 <S2SV_ModStart> | VAR_75 ; if ( <S2SV_ModEnd> VAR_89 -> VAR_81 <S2SV_ModStart> VAR_92 ; } } else { return VAR_70 ;
<S2SV_ModStart> ; VAR_20 = METHOD_9 ( <S2SV_ModEnd> sizeof ( TYPE_4 <S2SV_ModStart> -> VAR_19 = METHOD_9 <S2SV_ModEnd> ( METHOD_7 ( <S2SV_ModStart> -> VAR_19 = METHOD_9 <S2SV_ModEnd> ( METHOD_7 (
<S2SV_ModStart> TYPE_5 VAR_16 ; if <S2SV_ModEnd> ( ( VAR_17 <S2SV_ModStart> 1 ) ) != 0 ) { METHOD_3 ( "%s:<S2SV_blank>Cannot<S2SV_blank>alloc<S2SV_blank>invalid<S2SV_blank>size<S2SV_blank>%lld<S2SV_blank>resource\\n" , VAR_18 , VAR_17 ) ; return - 1 ; } <S2SV_ModEnd> VAR_16 = METHOD_2
<S2SV_ModStart> ; TYPE_53 VAR_1191 ; const TYPE_62 * VAR_1223 = METHOD_92 ( VAR_1217 , VAR_1095 -> VAR_1099 . VAR_1100 ) <S2SV_ModStart> , VAR_1212 , VAR_1223 ,
<S2SV_ModStart> != VAR_48 ) { <S2SV_ModStart> VAR_50 ) ; STRUCT_OR_UNION_16 -> VAR_57 = 1 ; }
<S2SV_ModStart> VAR_18 , 1 <S2SV_ModEnd> , VAR_71 ,
<S2SV_ModStart> . METHOD_1 ( METHOD_3 ( VAR_36 ) <S2SV_ModEnd> , VAR_30 )
<S2SV_ModStart> { if ( METHOD_4 <S2SV_ModEnd> ( VAR_11 , <S2SV_ModStart> TYPE_4 VAR_16 = METHOD_5 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> . VAR_291 . VAR_299 = TYPE_134 -> VAR_290 . VAR_291 . VAR_299 ; TYPE_134 -> VAR_286 [ TYPE_134 -> VAR_287 - 1 ] . VAR_291 .
<S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_85 , <S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_85 , <S2SV_ModStart> ++ ) { METHOD_4 <S2SV_ModEnd> ( VAR_85 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 4 ; if ( ! <S2SV_ModStart> , VAR_9 ) ) return 0 <S2SV_ModStart> VAR_11 ) ; return 1 ;
<S2SV_ModStart> 1 ) ; if ( ( TYPE_21 * ) VAR_423 -> VAR_571 > VAR_423 -> VAR_572 ) { return VAR_524 ; }
<S2SV_ModStart> * VAR_53 , TYPE_10 <S2SV_ModEnd> * VAR_34 , <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_53 -> VAR_43 <S2SV_ModStart> VAR_53 -> VAR_43 . VAR_48
<S2SV_ModStart> TYPE_5 VAR_47 ; if ( ! METHOD_8 ( VAR_49 ) ) return "empty<S2SV_blank>string" ;
<S2SV_ModStart> VAR_73 -> VAR_14 && ! VAR_73 -> VAR_75 ) METHOD_13 <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_14 , 0 , ( VAR_73 -> VAR_68 * VAR_73 -> VAR_18 ) ) ; if ( VAR_73 -> VAR_76 ) METHOD_13 ( VAR_73 -> VAR_76 <S2SV_ModStart> VAR_73 ) ; METHOD_14 ( <S2SV_ModEnd> VAR_73 -> VAR_53 <S2SV_ModStart> ( VAR_73 ) ; VAR_73 -> VAR_53 -> initialized = 1 <S2SV_ModStart> VAR_43 ] = * <S2SV_ModStart> VAR_74 ] = * <S2SV_ModStart> ( VAR_73 ) && <S2SV_ModEnd> VAR_73 -> VAR_62 <S2SV_ModStart> VAR_73 -> VAR_62 && ! VAR_73 -> VAR_75 ) METHOD_13 ( VAR_73 -> VAR_62 , 0 , <S2SV_ModEnd> VAR_73 -> VAR_66 <S2SV_ModStart> VAR_73 -> VAR_62 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_14 > VAR_146 || ! VAR_283 -> VAR_274 -> VAR_168
<S2SV_ModStart> ) break ; VAR_1387 = METHOD_243 ( VAR_1392 , VAR_1392 -> VAR_1240 , VAR_1392 -> VAR_1321 ) ; if ( VAR_1387 == VAR_1390 ) { METHOD_244 ( VAR_1340 , & VAR_1392 -> VAR_1340 ) ; return ( METHOD_235 ( VAR_1392 ) ) ; }
<S2SV_ModStart> ; VAR_62 = METHOD_9 <S2SV_ModEnd> ( VAR_48 , <S2SV_ModStart> ; VAR_54 = METHOD_10 ( VAR_56 , VAR_57 ) ; VAR_54 = ( METHOD_8 ( VAR_54 , VAR_60 ) ) ; VAR_53 [ VAR_45 ] = VAR_54 ; VAR_54 = METHOD_10 ( VAR_48 , VAR_49 ) ; VAR_54 = ( METHOD_8 ( VAR_54 , VAR_60 ) ) ; * VAR_53 ++ = VAR_54 ; VAR_62 = METHOD_9 <S2SV_ModEnd> ( VAR_56 ,
<S2SV_ModStart> = 0 ; VAR_70 -> VAR_161 = VAR_157 ;
<S2SV_ModStart> VAR_89 , "Key<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>the<S2SV_blank>null<S2SV_blank>string" ) ; return VAR_105 ; } if ( VAR_112 != 0 && VAR_114 == VAR_52 ) { METHOD_13 ( VAR_89 , "ECB<S2SV_blank>mode<S2SV_blank>does<S2SV_blank>not<S2SV_blank>use<S2SV_blank>IV" ) ; return VAR_105 ; } if ( VAR_112 != 0 && VAR_114 == VAR_70 ) { METHOD_13 ( VAR_89 , "CTR<S2SV_blank>mode<S2SV_blank>needs<S2SV_blank>counter<S2SV_blank>parameter,<S2SV_blank>not<S2SV_blank>IV"
<S2SV_ModStart> ; VAR_30 = METHOD_4 <S2SV_ModEnd> ( sizeof (
<S2SV_ModStart> VAR_113 ) ; if ( VAR_119 == VAR_115 ) continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> ; VAR_242 : if <S2SV_ModEnd> ( TYPE_242 -> <S2SV_ModStart> TYPE_242 -> VAR_243 ) METHOD_106 ( TYPE_242
<S2SV_ModStart> < VAR_82 + 4 <S2SV_ModEnd> ) return VAR_68
<S2SV_ModStart> ( VAR_30 -> VAR_23 <S2SV_ModEnd> ) < 0
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_0 * ) VAR_2 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_3 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> ) ) { if ( METHOD_10 ( VAR_51 ) < 64 * 8 ) return VAR_52 ; <S2SV_ModStart> VAR_51 ) ; return 0 ;
<S2SV_ModStart> = 0 ; VAR_58 -> VAR_59 = 0 ;
<S2SV_ModStart> = VAR_31 ; METHOD_3 ( VAR_34 -> VAR_38 , VAR_39 , sizeof ( VAR_34 -> VAR_38 ) ) ; <S2SV_ModStart> * VAR_26 + VAR_17 <S2SV_ModEnd> -> VAR_28 [
<S2SV_ModStart> ( METHOD_1 ( ( unsigned TYPE_5 )
<S2SV_ModStart> = VAR_36 ; METHOD_4 <S2SV_ModEnd> ( & VAR_57 <S2SV_ModStart> ) ) ; METHOD_4 <S2SV_ModEnd> ( & VAR_57
<S2SV_ModStart> VAR_90 ; } if ( METHOD_2 ( sizeof ( unsigned TYPE_15 * ) , VAR_83 ) ) { return VAR_90 ; }
<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; VAR_1177 <S2SV_ModEnd> ++ ; MOP_OUT
