<S2SV_ModStart> VAR_62 ) ; METHOD_16 ( VAR_63 ) ;
<S2SV_ModStart> case VAR_225 : METHOD_18 ( & VAR_281 , 0 , sizeof ( VAR_281 ) ) ;
<S2SV_ModStart> , VAR_82 ; if ( METHOD_26 ( VAR_98 ) ) { VAR_78 -> VAR_60 = 0 ; METHOD_9 ( & VAR_78 -> VAR_79 ) ; return VAR_102 ; }
<S2SV_ModStart> * VAR_47 ; TYPE_3 <S2SV_ModEnd> VAR_30 ; TYPE_2 <S2SV_ModStart> ; if ( METHOD_15 <S2SV_ModEnd> ( VAR_12 + <S2SV_ModStart> ) || VAR_30 >= VHOST_SCSI_MAX_TARGET <S2SV_ModEnd> ) return METHOD_7
<S2SV_ModStart> VAR_9 , 0 ) ; METHOD_7 ( VAR_8 -> VAR_10 -> VAR_11 , VAR_8 -> VAR_5 ) ; METHOD_7 ( VAR_8 -> VAR_10 -> VAR_11 , VAR_8 -> VAR_7
<S2SV_ModStart> { TYPE_3 VAR_30 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return ; METHOD_8 ( VAR_27 -> VAR_31 , & <S2SV_ModEnd> VAR_27 -> VAR_28 <S2SV_ModStart> . VAR_29 -> VAR_32 , & VAR_30 , sizeof ( TYPE_3 ) <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> VAR_7 ) ; METHOD_6 ( VAR_7 ) ; METHOD_7 ( VAR_7 ) ;
<S2SV_ModStart> ( VAR_13 , VAR_20 ,
<S2SV_ModStart> METHOD_20 ( VAR_98 , ( struct STRUCT_OR_UNION_6 * ) METHOD_22 ( VAR_100 )
<S2SV_ModStart> TYPE_4 VAR_13 , <S2SV_ModEnd> struct STRUCT_OR_UNION_0 * <S2SV_ModStart> , VAR_13 , <S2SV_ModEnd> & VAR_15 ,
<S2SV_ModStart> METHOD_0 ( const TYPE_11 <S2SV_ModEnd> VAR_55 [ 16 <S2SV_ModStart> 16 ] , TYPE_11 <S2SV_ModEnd> VAR_340 [ 16 <S2SV_ModStart> ] ) { TYPE_12 <S2SV_ModEnd> VAR_336 [ 8 <S2SV_ModStart> 8 ] ; TYPE_12 <S2SV_ModEnd> VAR_285 [ 8 <S2SV_ModStart> 8 ] ; TYPE_12 <S2SV_ModEnd> VAR_284 [ 8 <S2SV_ModStart> 8 ] ; TYPE_12 <S2SV_ModEnd> VAR_95 [ 8 <S2SV_ModStart> 8 ] ; TYPE_12 <S2SV_ModEnd> VAR_339 , VAR_341 <S2SV_ModStart> ] ; { TYPE_12 <S2SV_ModEnd> VAR_106 , VAR_103 <S2SV_ModStart> , VAR_156 ; TYPE_12 <S2SV_ModEnd> VAR_179 , VAR_183 <S2SV_ModStart> , VAR_185 ; TYPE_12 <S2SV_ModEnd> VAR_176 , VAR_171 <S2SV_ModStart> 0 ] = ( TYPE_11 ) <S2SV_ModStart> 4 ] = ( TYPE_11 ) <S2SV_ModStart> 8 ] = ( TYPE_11 ) <S2SV_ModStart> 12 ] = ( TYPE_11 ) <S2SV_ModStart> 2 ] = ( TYPE_11 ) <S2SV_ModStart> 6 ] = ( TYPE_11 ) <S2SV_ModStart> 10 ] = ( TYPE_11 ) <S2SV_ModStart> 14 ] = ( TYPE_11 ) <S2SV_ModStart> 2 ] * VAR_255 + <S2SV_ModEnd> VAR_284 [ 5 <S2SV_ModStart> 2 ] * VAR_257 - <S2SV_ModEnd> VAR_284 [ 5 <S2SV_ModStart> [ 3 ] + VAR_285 [ 2 ] ; VAR_336 [ 3 ] = VAR_284 [ 3 ] - VAR_285 [ 2 ] ; VAR_336 [ 4 ] = VAR_284 [ 4 ] - VAR_285 [ 5 ] ; VAR_336 [ 5 ] = VAR_284 [ 4 ] + <S2SV_ModEnd> VAR_285 [ 5 <S2SV_ModStart> 1 ] = ( TYPE_11 ) <S2SV_ModStart> 9 ] = ( TYPE_11 ) <S2SV_ModStart> 5 ] = ( TYPE_11 ) <S2SV_ModStart> 13 ] = ( TYPE_11 ) <S2SV_ModStart> 3 ] = ( TYPE_11 ) <S2SV_ModStart> 11 ] = ( TYPE_11 ) <S2SV_ModStart> 7 ] = ( TYPE_11 ) <S2SV_ModStart> 15 ] = ( TYPE_11 )
<S2SV_ModStart> == 0 ) METHOD_25 ( VAR_186 ) ; if ( VAR_187 == 0 )
<S2SV_ModStart> = 0 ; unsigned TYPE_3 VAR_81 [ VAR_82 ] , * VAR_83 = VAR_31 ; <S2SV_ModStart> VAR_62 -> VAR_9 ; if ( VAR_77 -> VAR_26 ) VAR_83 = VAR_81 <S2SV_ModStart> -> VAR_24 , VAR_83 , & VAR_70 , VAR_77 -> VAR_29 , VAR_30 , 0 , 0 , VAR_31 ) ; if ( VAR_77 -> VAR_26 ) memcpy ( VAR_77 -> VAR_26 , VAR_81 , sizeof ( * <S2SV_ModEnd> VAR_77 -> VAR_26 <S2SV_ModStart> VAR_77 -> VAR_26 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> . VAR_54 ; METHOD_10 ( VAR_56 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_unpack_full" ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_14 <S2SV_ModEnd> * VAR_65 , <S2SV_ModStart> 0 ) ; METHOD_9 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> ++ VAR_52 ) METHOD_9 <S2SV_ModEnd> ( VAR_65 , <S2SV_ModStart> ( VAR_64 ) METHOD_9 <S2SV_ModEnd> ( VAR_65 ,
<S2SV_ModStart> ) ; return <S2SV_ModEnd> VAR_9 -> METHOD_2
<S2SV_ModStart> ; if ( VAR_1 < sizeof ( struct STRUCT_OR_UNION_6 ) ) return - VAR_53 ; if (
<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = VAR_11 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = VAR_15 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = VAR_19 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = VAR_23 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = VAR_27 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = VAR_31 ; } else { <S2SV_ModEnd> VAR_39 -> VAR_38 <S2SV_ModStart> = VAR_34 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; }
<S2SV_ModStart> TYPE_11 * VAR_61 ; TYPE_10 VAR_69 <S2SV_ModStart> = 0 ; VAR_69 = 0 ; <S2SV_ModStart> break ; case VAR_70 : VAR_69 = METHOD_28 ( VAR_31 ) ; break ; case <S2SV_ModStart> ; } } METHOD_29 ( VAR_69 ) ; <S2SV_ModStart> ) ) { METHOD_17 ( VAR_50 ) ;
<S2SV_ModStart> esr ) { siginfo_t info ; void __user * pc = ( void __user * ) instruction_pointer ( regs ) ; <S2SV_ModStart> esr ) ; __show_regs ( regs ) ; info . si_signo = SIGILL ; info . si_errno = 0 ; info . si_code = ILL_ILLOPC ; info . si_addr = pc ; arm64_notify_die <S2SV_ModEnd> ( "Oops<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>mode" , <S2SV_ModStart> , regs , & info , 0 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_8 ) { struct STRUCT_OR_UNION_2 * <S2SV_ModEnd> VAR_12 ; VAR_12 <S2SV_ModStart> ; if ( ! VAR_12 ) return - VAR_13 <S2SV_ModEnd> ; return METHOD_2 <S2SV_ModStart> ( VAR_7 , VAR_12 -> <S2SV_ModEnd> VAR_10 . VAR_11 <S2SV_ModStart> VAR_11 , VAR_12 -> VAR_10 . VAR_14
<S2SV_ModStart> == - 1 || VAR_751 == VAR_864 ) { VAR_863 = "Unrecognized<S2SV_blank>client<S2SV_blank>limit<S2SV_blank>class:<S2SV_blank>the<S2SV_blank>user<S2SV_blank>specified<S2SV_blank>" "an<S2SV_blank>invalid<S2SV_blank>one,<S2SV_blank>or<S2SV_blank>\'master\'<S2SV_blank>which<S2SV_blank>has<S2SV_blank>no<S2SV_blank>buffer<S2SV_blank>limits." <S2SV_ModEnd> ; goto VAR_855
<S2SV_ModStart> unsigned TYPE_3 TYPE_7 ; if ( VAR_20 > VAR_33 ) return VAR_32
<S2SV_ModStart> < 1 || VAR_224 + VAR_152 < VAR_224 <S2SV_ModEnd> ) { METHOD_49
<S2SV_ModStart> = METHOD_1 ( 1
<S2SV_ModStart> ; if ( VAR_35 < sizeof ( struct STRUCT_OR_UNION_9 <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; if ( VAR_72 -> VAR_16 != VAR_17 <S2SV_ModEnd> ) return - <S2SV_ModStart> - VAR_18 ; <S2SV_ModEnd> VAR_87 = - <S2SV_ModStart> ( VAR_83 ) ; if ( ! METHOD_3 ( VAR_83 , VAR_81 ) ) goto VAR_82
<S2SV_ModStart> <S2SV_null> static unsigned TYPE_3 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) { unsigned TYPE_3 <S2SV_ModEnd> VAR_10 = 0 <S2SV_ModStart> ( ( - 1UL <S2SV_ModEnd> ) & VAR_8
<S2SV_ModStart> , METHOD_23 ( "_Cancel" ) , VAR_54 ) ; METHOD_24 ( METHOD_25 ( VAR_58 ) , VAR_54 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , METHOD_23 ( "Trust<S2SV_blank>and<S2SV_blank>_Launch" ) , VAR_70 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_26 ( VAR_58
<S2SV_ModStart> ( & VAR_3 ) ; if ( STRUCT_OR_UNION_3 == VAR_11 ) return METHOD_2 ( "???"
<S2SV_ModStart> , VAR_33 , VAR_90 <S2SV_ModEnd> ) ; VAR_87
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_29 ) { struct STRUCT_OR_UNION_1 * VAR_25 = VAR_29 -> VAR_26 ; struct STRUCT_OR_UNION_2 * VAR_30 = VAR_25 -> VAR_31 ; METHOD_7 ( & VAR_25 -> VAR_32 ) ; VAR_30 -> VAR_33 [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_1 ( VAR_25 , VAR_30 -> VAR_33 <S2SV_ModEnd> , 1 , <S2SV_ModStart> , 1 , VAR_30 -> VAR_33 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_8 ( & VAR_25 -> VAR_32 ) ; VAR_29 <S2SV_ModEnd> -> VAR_22 [ <S2SV_ModStart> & VAR_25 -> <S2SV_ModEnd> VAR_27 ) ; <S2SV_ModStart> ; if ( VAR_29 <S2SV_ModEnd> -> VAR_22 [ <S2SV_ModStart> ( VAR_20 , VAR_29 <S2SV_ModEnd> -> VAR_22 [ <S2SV_ModStart> , & VAR_25 <S2SV_ModEnd> -> VAR_27 )
<S2SV_ModStart> VAR_43 ; struct STRUCT_OR_UNION_6 * VAR_45 = VAR_43 -> VAR_44 . VAR_45 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_45 ) ) <S2SV_ModStart> ( VAR_41 ) <S2SV_ModEnd> VAR_45 -> VAR_40 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_45 ) ;
<S2SV_ModStart> } } } METHOD_61 ( VAR_206 ) ; METHOD_61 ( VAR_205 ) ; METHOD_61 ( VAR_259 ) ; METHOD_61 ( VAR_258 ) ; METHOD_61 ( VAR_257 ) ; METHOD_61 ( VAR_208 ) ;
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_15 * VAR_23 = ( struct STRUCT_OR_UNION_15 <S2SV_ModEnd> * ) METHOD_3 <S2SV_ModStart> VAR_20 ) ; METHOD_16 ( VAR_23 <S2SV_ModEnd> , 1 )
<S2SV_ModStart> ; if ( METHOD_30 ( VAR_112 ) ) { return VAR_140 ; } if (
<S2SV_ModStart> VAR_38 == VAR_39 ) goto VAR_91 ; if ( VAR_38 - VAR_39 > VAR_98 - 1
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_2 ) { return METHOD_2 <S2SV_ModEnd> ( VAR_2 ->
<S2SV_ModStart> , VAR_103 , VAR_101 , VAR_91 , VAR_92 ) ; } else VAR_103 = METHOD_16 ( VAR_105 , VAR_103 , VAR_101 ) ; if ( VAR_103 == VAR_107 ) goto VAR_104 ; } if <S2SV_ModStart> < VAR_101 ) <S2SV_ModEnd> METHOD_18 ( (
<S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 , <S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 , <S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 ,
<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & TYPE_6 ) )
<S2SV_ModStart> VAR_14 -> VAR_5 ; VAR_1 . VAR_17 = METHOD_10 ( VAR_13 -> VAR_17 )
<S2SV_ModStart> TYPE_6 METHOD_0 ( TYPE_9 * VAR_32 <S2SV_ModEnd> , TYPE_6 VAR_6 <S2SV_ModStart> VAR_9 ) { TYPE_10 * const VAR_26 = & VAR_32 -> VAR_26 ; TYPE_11 * const VAR_33 = & VAR_32 -> VAR_33 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_6 > VAR_33 -> VAR_34 <S2SV_ModEnd> && VAR_8 >= <S2SV_ModStart> TYPE_6 VAR_28 ; <S2SV_ModEnd> for ( VAR_28 <S2SV_ModStart> VAR_28 ) { const TYPE_8 * VAR_35 = & VAR_26 -> VAR_13 [ VAR_28 ] ; if ( VAR_35 >= VAR_26 -> stats_in_end <S2SV_ModEnd> ) break ; <S2SV_ModStart> ; if ( VAR_35 -> VAR_23 - VAR_35 -> <S2SV_ModEnd> VAR_25 < 0.999 <S2SV_ModStart> break ; } return <S2SV_ModEnd> VAR_28 == VAR_29 <S2SV_ModStart> VAR_28 == VAR_29 <S2SV_ModEnd> ; } return <S2SV_ModStart> ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0 ; } VAR_35 = VAR_26 -> VAR_24 ; <S2SV_ModStart> VAR_19 ) { VAR_29 <S2SV_ModEnd> = METHOD_4 ( <S2SV_ModStart> ) ; return VAR_35 ? VAR_35 : VAR_29 <S2SV_ModEnd> ; } VAR_31 <S2SV_ModStart> VAR_20 -> VAR_21 <S2SV_ModEnd> ; VAR_29 =
<S2SV_ModStart> return VAR_36 ; <S2SV_ModEnd> VAR_36 = METHOD_4
<S2SV_ModStart> VAR_211 ) ; VAR_263 -> VAR_265 = VAR_263 -> VAR_211 ;
<S2SV_ModStart> { METHOD_4 ( "crypto-%s" <S2SV_ModEnd> , VAR_30 ) <S2SV_ModStart> ) METHOD_4 ( "crypto-%s-all" <S2SV_ModEnd> , VAR_30 )
<S2SV_ModStart> 2 ) { METHOD_22 ( * TYPE_74 , 2 ) ; <S2SV_ModStart> VAR_50 - 2 ; if ( VAR_50 < VAR_52 ) goto VAR_53 ; METHOD_22 ( * ( TYPE_74 ) , VAR_52 ) <S2SV_ModStart> case VAR_16 : if ( VAR_52 < VAR_29 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> - VAR_29 ; VAR_52 = VAR_52 - VAR_29 ; <S2SV_ModStart> VAR_38 ) { if ( VAR_52 < VAR_37 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> VAR_50 = VAR_50 - VAR_37 ; VAR_52 = VAR_52 <S2SV_ModStart> case VAR_39 : if ( VAR_52 < 8 ) goto VAR_53 <S2SV_ModEnd> ; METHOD_25 ( <S2SV_ModStart> break ; } TYPE_74 += VAR_52 ; VAR_50 -= VAR_52 ;
<S2SV_ModStart> VAR_241 ) ; METHOD_11 ( & VAR_20 , 0 , sizeof ( VAR_20 ) ) ;
<S2SV_ModStart> == 12 && ( <S2SV_ModStart> VAR_20 & VAR_11 )
<S2SV_ModStart> -> VAR_141 ; <S2SV_ModEnd> TYPE_4 * VAR_213 <S2SV_ModStart> TYPE_16 VAR_224 ; TYPE_16 VAR_232 ; <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) <S2SV_ModEnd> ) ; METHOD_50 <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) <S2SV_ModEnd> ) ; METHOD_50 <S2SV_ModStart> { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>message<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>" "that<S2SV_blank>it<S2SV_blank>is<S2SV_blank>done<S2SV_blank>pre-initializing<S2SV_blank>(2):<S2SV_blank>%s" , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> "privileges." ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; <S2SV_ModStart> ( "PR_SET_NO_NEW_PRIVS<S2SV_blank>is<S2SV_blank>set.<S2SV_blank>Process<S2SV_blank>cannot<S2SV_blank>use<S2SV_blank>execve()<S2SV_blank>" "gainable<S2SV_blank>privileges." ) ; } VAR_134 = 3 ; VAR_136 = METHOD_42 ( VAR_141 , & VAR_134 , sizeof ( VAR_134 ) ) ; if ( VAR_136 <= 0 ) { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>set<S2SV_blank>up<S2SV_blank>LSM<S2SV_blank>labels<S2SV_blank>(3):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 <S2SV_ModStart> TYPE_16 VAR_169 ; VAR_136 = METHOD_75 ( VAR_141 , & VAR_232 , VAR_110 , 0 ) ; if ( VAR_136 <= 0 ) { METHOD_59 ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , METHOD_74 ( VAR_233 ) ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } <S2SV_ModStart> ( METHOD_56 ( VAR_232 <S2SV_ModEnd> , VAR_169 , <S2SV_ModStart> 0 ) { METHOD_70 ( "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label." ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_71 ( VAR_232 ) ; METHOD_72 ( - 1 ) ; } METHOD_71 ( VAR_232 ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> "Loading<S2SV_blank>seccomp<S2SV_blank>policy" ) ; METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_72 ( - 1 ) ; } METHOD_50 ( VAR_141 , VAR_140 ) ; METHOD_71 ( VAR_141 ) ; <S2SV_ModEnd> METHOD_61 ( VAR_184 <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_72 ( VAR_230
<S2SV_ModStart> = VAR_15 ; if ( VAR_58 < 3 ) goto VAR_61 ; <S2SV_ModStart> += 3 ; VAR_58 -= 3 ; <S2SV_ModStart> ( VAR_43 = METHOD_16 <S2SV_ModEnd> ( VAR_54 , <S2SV_ModStart> VAR_54 , '<S2SV_blank>' , VAR_58 <S2SV_ModStart> = '\\0' ; if ( VAR_58 < 1 ) goto VAR_61 ; <S2SV_ModStart> + 1 ; VAR_58 -= 1 ; <S2SV_ModStart> ( VAR_43 = METHOD_16 <S2SV_ModEnd> ( VAR_54 , <S2SV_ModStart> VAR_54 , '\\n' , VAR_58
<S2SV_ModStart> ( VAR_288 -> VAR_56 == 0 ) { METHOD_64 ( VAR_203 , "Error,<S2SV_blank>invalid<S2SV_blank>biBitCount<S2SV_blank>%d\\n" , 0 ) ; return VAR_204 ; } if ( VAR_288 ->
<S2SV_ModStart> 0 ) { if ( VAR_564 -> VAR_298 < VAR_533 . VAR_290 ) VAR_564 -> VAR_298 = VAR_533 . VAR_290 ;
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_6 ; if
<S2SV_ModStart> VAR_28 ; } METHOD_9 ( & VAR_70 , 0 , sizeof ( VAR_70 ) ) ;
<S2SV_ModStart> VAR_11 ) { TYPE_2 VAR_12 ; VAR_12 = METHOD_2 ( VAR_7 , VAR_10 ) ; if ( VAR_12 < 0 ) return VAR_12 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ; TYPE_4 VAR_7 ; if ( METHOD_4 ( VAR_8 ) < 7 ) return VAR_17 <S2SV_ModStart> = VAR_16 ; return VAR_18 ;
<S2SV_ModStart> * VAR_78 ; unsigned <S2SV_ModStart> return - VAR_77 ; if ( VAR_65 > ( VAR_82 - VAR_52 - sizeof ( struct STRUCT_OR_UNION_8 ) - sizeof ( struct STRUCT_OR_UNION_9 ) ) ) return - VAR_83
<S2SV_ModStart> TYPE_4 VAR_14 ; if ( VAR_15 < 0 ) { METHOD_2 ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_pad" ) ; }
<S2SV_ModStart> TYPE_21 VAR_201 = 1 <S2SV_ModEnd> ; TYPE_21 VAR_244 <S2SV_ModStart> VAR_201 += VAR_196 + 1 + VAR_196 / 255 ; } VAR_234 = METHOD_57 ( VAR_250 -> VAR_251 , VAR_201 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ] ) ; METHOD_61 ( VAR_223 <= VAR_201 - VAR_253 ) ; <S2SV_ModEnd> VAR_253 += VAR_223 <S2SV_ModStart> break ; } METHOD_61 ( VAR_244 [ VAR_245 ] <= VAR_201 - VAR_253 ) ;
<S2SV_ModStart> METHOD_74 ( VAR_740 -> VAR_741
<S2SV_ModStart> STRUCT_OR_UNION_3 , VAR_11 , VAR_7
<S2SV_ModStart> + 10 ; if ( VAR_27 -> VAR_28 < VAR_27 -> VAR_29 ) { <S2SV_ModStart> ; } ; } ;
<S2SV_ModStart> ) ) ; METHOD_45 ( VAR_351 + VAR_367 -> VAR_254 ) ;
<S2SV_ModStart> VAR_19 ; return VAR_17 == 0 ? VAR_20 : VAR_21 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * VAR_17 ; TYPE_0 VAR_26 , VAR_27 ; <S2SV_ModStart> VAR_8 ) ; VAR_26 = <S2SV_ModEnd> METHOD_5 ( VAR_17 <S2SV_ModStart> ( VAR_17 ) ; VAR_27 = METHOD_7 ( VAR_8 ) >= VAR_26 ? VAR_26 : sizeof ( * VAR_17 ) ; VAR_23 = METHOD_8 ( VAR_26 <S2SV_ModStart> ; VAR_25 = METHOD_8 ( VAR_26 <S2SV_ModEnd> , VAR_18 ) <S2SV_ModStart> VAR_21 ; } METHOD_9 ( VAR_23 , VAR_17 , VAR_27 ) ; METHOD_9 ( VAR_25 , VAR_17 , VAR_27 ) ;
<S2SV_ModStart> - VAR_7 ; <S2SV_ModEnd> switch ( VAR_75 <S2SV_ModStart> VAR_77 ; } VAR_75 -> VAR_9 = VAR_10 ;
<S2SV_ModStart> ) ( ( TYPE_59 <S2SV_ModEnd> ) VAR_171 & <S2SV_ModStart> VAR_171 & ( TYPE_59 <S2SV_ModEnd> ) ( VAR_172 <S2SV_ModStart> ) ( ( TYPE_59 <S2SV_ModEnd> ) VAR_171 << <S2SV_ModStart> VAR_171 << ( TYPE_59 <S2SV_ModEnd> ) ( VAR_172 <S2SV_ModStart> ) ( ( TYPE_59 <S2SV_ModEnd> ) VAR_171 | <S2SV_ModStart> VAR_171 | ( TYPE_59 <S2SV_ModEnd> ) ( VAR_172 <S2SV_ModStart> ) ( ( TYPE_59 <S2SV_ModEnd> ) VAR_171 >> <S2SV_ModStart> VAR_171 >> ( TYPE_59 <S2SV_ModEnd> ) ( VAR_172 <S2SV_ModStart> ) ( ( TYPE_59 <S2SV_ModEnd> ) VAR_171 ^ <S2SV_ModStart> VAR_171 ^ ( TYPE_59 <S2SV_ModEnd> ) ( VAR_172
<S2SV_ModStart> ) ) ; if ( METHOD_6 ( ) ) { METHOD_7 ( "%s:<S2SV_blank>\'%s\'<S2SV_blank>pairing<S2SV_blank>will<S2SV_blank>be<S2SV_blank>removed<S2SV_blank>if<S2SV_blank>unrestricted" , VAR_20 , VAR_15 ) ; METHOD_3 ( VAR_15 , "Restricted" , 1 ) ; }
<S2SV_ModStart> ( VAR_112 = METHOD_5 ( VAR_23 , VAR_109 <S2SV_ModEnd> , sizeof (
<S2SV_ModStart> VAR_4 * VAR_30 ; TYPE_5 VAR_38 <S2SV_ModStart> ; for ( VAR_38 = 0 ; VAR_38 < VAR_20 -> VAR_21 . VAR_39 ; ++ VAR_38 ) { <S2SV_ModStart> VAR_21 . VAR_22 + VAR_38 ; <S2SV_ModEnd> if ( VAR_30
<S2SV_ModStart> VAR_27 ) { METHOD_7 <S2SV_ModEnd> ( VAR_15 -> <S2SV_ModStart> VAR_16 , "GSO<S2SV_blank>size<S2SV_blank>must<S2SV_blank>not<S2SV_blank>be<S2SV_blank>zero.\\n" ) ; METHOD_8 ( VAR_15 <S2SV_ModStart> VAR_14 ) { METHOD_7 <S2SV_ModEnd> ( VAR_15 -> <S2SV_ModStart> VAR_26 . VAR_20 ) ; METHOD_8 ( VAR_15
<S2SV_ModStart> VAR_168 , VAR_171 <S2SV_ModEnd> ) ; METHOD_47
<S2SV_ModStart> VAR_14 ) { METHOD_7 ( VAR_14 ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_3 * VAR_167 = VAR_168 ; struct <S2SV_ModStart> VAR_130 ; } METHOD_6 ( & VAR_162 ) ; VAR_169 = - VAR_130 ; <S2SV_ModStart> -> VAR_26 ) goto VAR_161 ; VAR_169 = - VAR_30 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_154 ) goto VAR_161 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { VAR_169 = - VAR_75 ; <S2SV_ModEnd> VAR_167 = METHOD_10 <S2SV_ModStart> sizeof ( * <S2SV_ModEnd> VAR_167 ) , <S2SV_ModStart> if ( ! VAR_167 ) goto VAR_161 <S2SV_ModEnd> ; METHOD_5 ( <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_45 <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_48 <S2SV_ModStart> METHOD_5 ( & <S2SV_ModEnd> VAR_167 -> VAR_51 <S2SV_ModStart> 0 ) ; VAR_166 -> VAR_167 = VAR_167 ; } <S2SV_ModEnd> VAR_156 = VAR_168 <S2SV_ModStart> } VAR_161 : if ( VAR_169 && VAR_167 ) { METHOD_24 ( VAR_167 ) ; VAR_166 -> VAR_167 = VAR_168 ; } <S2SV_ModStart> VAR_162 ) ; <S2SV_ModEnd> return VAR_169 ;
<S2SV_ModStart> STRUCT_OR_UNION_8 ) ) ; VAR_46 -> VAR_66 = VAR_63 ; VAR_46 -> VAR_67 = VAR_63 ; VAR_46 -> VAR_68 = VAR_63
<S2SV_ModStart> ) ; } METHOD_12 ( VAR_46 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; VAR_233 -> VAR_233 = ( TYPE_22 * ) VAR_278 -> VAR_262 ; VAR_365 -> VAR_196 -> VAR_424 [ VAR_414 ] . VAR_203 = VAR_278 -> VAR_251 ; VAR_365 -> VAR_196 -> VAR_424 [ VAR_414 ] .
<S2SV_ModStart> ( VAR_50 , VAR_54 , VAR_55 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ( VAR_50 , VAR_54 , VAR_55 <S2SV_ModEnd> ) ; METHOD_6 <S2SV_ModStart> ( VAR_50 , VAR_56 , VAR_57 | VAR_58 ) ; METHOD_18 ( VAR_50 , VAR_59 <S2SV_ModEnd> , METHOD_17 ( <S2SV_ModStart> ( VAR_50 , VAR_60 <S2SV_ModEnd> , METHOD_19 ( <S2SV_ModStart> ( VAR_50 , VAR_61 <S2SV_ModEnd> , METHOD_17 ( <S2SV_ModStart> ( VAR_50 , VAR_62 <S2SV_ModEnd> , METHOD_19 ( <S2SV_ModStart> ( VAR_50 , VAR_63 <S2SV_ModEnd> , METHOD_17 ( <S2SV_ModStart> ( VAR_50 , ENC28J60_ETXNDH <S2SV_ModEnd> , METHOD_19 ( <S2SV_ModStart> ( VAR_50 , VAR_54 , VAR_64 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ; VAR_77 = METHOD_22 ( VAR_66 -> VAR_80 ) ; if ( ! VAR_77 ) goto VAR_76 ; if ( METHOD_18 ( VAR_78 , & VAR_81 , VAR_77 ) == - 1 ) goto VAR_76 ; METHOD_19 ( VAR_77 ) ; VAR_77 =
<S2SV_ModStart> ( VAR_53 && METHOD_38 ( VAR_53 ) && <S2SV_ModStart> ) ) { if ( METHOD_38 ( VAR_53 ) ) { <S2SV_ModStart> ; return ; } <S2SV_ModStart> ( VAR_53 && METHOD_38 ( VAR_53 ) && <S2SV_ModStart> if ( VAR_53 && METHOD_38 ( VAR_53 )
<S2SV_ModStart> ; if ( ( VAR_72 & VAR_19 ) ) <S2SV_ModEnd> { VAR_60 = <S2SV_ModStart> STRUCT_OR_UNION_16 , VAR_30 ) ; if ( METHOD_18 ( STRUCT_OR_UNION_16 ) ) METHOD_19 ( VAR_87 <S2SV_ModStart> } if ( ( VAR_72 & VAR_33 ) <S2SV_ModEnd> ) { VAR_60
<S2SV_ModStart> if ( ! METHOD_18 ( VAR_144 -> VAR_137 , VAR_145 , VAR_94 ) ) { VAR_155 = - VAR_142 ; goto VAR_153 ; } if ( !
<S2SV_ModStart> , TYPE_13 VAR_28 , TYPE_13 VAR_87 ) { TYPE_13 VAR_77 ; <S2SV_ModEnd> TYPE_7 VAR_14 = <S2SV_ModStart> TYPE_13 VAR_34 = VAR_22 -> VAR_34 <S2SV_ModEnd> ; TYPE_13 VAR_31 <S2SV_ModStart> TYPE_13 VAR_31 = VAR_22 -> VAR_31 <S2SV_ModEnd> ; unsigned TYPE_17 <S2SV_ModStart> VAR_23 ; ; <S2SV_ModEnd> ( TYPE_16 ) <S2SV_ModStart> ) VAR_28 ; METHOD_5 <S2SV_ModEnd> ( VAR_86 , <S2SV_ModStart> 16 ) ; if ( VAR_87 == 1 ) { <S2SV_ModStart> , VAR_86 , 8 ) ; } <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> VAR_37 ) { struct STRUCT_OR_UNION_1 VAR_0 = * VAR_37 ; VAR_0 . VAR_38 = VAR_39 ; VAR_0 . VAR_32 = VAR_39 ; <S2SV_ModStart> ( VAR_11 , & VAR_0 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_0 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> : if ( ! METHOD_11 ( VAR_108 -> VAR_86 , VAR_105 -> VAR_86 ) ) VAR_103 -> VAR_111 |= VAR_112 ; if (
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> VAR_4 ) ; <S2SV_ModEnd> TYPE_3 VAR_24 ; <S2SV_ModStart> TYPE_3 VAR_24 ; VAR_24 = mb2_cache_entry_create <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> VAR_8 , VAR_9 , VAR_26 , <S2SV_ModEnd> VAR_25 -> VAR_17 <S2SV_ModStart> VAR_25 -> VAR_17 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_24 ) { <S2SV_ModEnd> if ( VAR_24 <S2SV_ModStart> - VAR_22 ) <S2SV_ModEnd> METHOD_8 ( VAR_25 <S2SV_ModStart> "already<S2SV_blank>in<S2SV_blank>cache" ) ; } else <S2SV_ModEnd> METHOD_8 ( VAR_25 <S2SV_ModStart> VAR_26 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; return METHOD_19 <S2SV_ModEnd> ( VAR_49 , <S2SV_ModStart> VAR_50 , VAR_51 , 0
<S2SV_ModStart> VAR_35 = ( <S2SV_ModEnd> TYPE_5 ) (
<S2SV_ModStart> ; TYPE_5 VAR_151 ; if ( VAR_111 < 0 || VAR_111 >= VAR_154 ) return - VAR_155
<S2SV_ModStart> STRUCT_OR_UNION_4 , struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * * VAR_14 <S2SV_ModStart> ) { struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * VAR_15 = <S2SV_ModStart> ( VAR_15 -> VAR_15 .
<S2SV_ModStart> ; VAR_80 = METHOD_12 <S2SV_ModEnd> ( VAR_79 ,
<S2SV_ModStart> ( VAR_34 , "%s" , VAR_35 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_14 <S2SV_ModEnd> METHOD_29 ( TYPE_1 <S2SV_ModStart> * VAR_151 , const TYPE_14 VAR_154 , const TYPE_8 VAR_155 , const <S2SV_ModStart> * VAR_38 ; METHOD_36 ( VAR_151 ) ; if ( * VAR_151 != 0 ) { METHOD_32 ( ( VAR_150 , "%sRPKI-RTRv%u<S2SV_blank>(unknown)" , METHOD_33 ( 8 ) , * VAR_151 ) ) ; return VAR_154 ; } if ( VAR_154 < sizeof ( TYPE_7 ) ) { METHOD_32 ( ( VAR_150 , "(%u<S2SV_blank>bytes<S2SV_blank>is<S2SV_blank>too<S2SV_blank>few<S2SV_blank>to<S2SV_blank>decode)" , VAR_154 ) ) ; goto VAR_156 ; } METHOD_31 ( * VAR_151 , sizeof ( TYPE_7 ) ) ; <S2SV_ModStart> VAR_15 ) ; <S2SV_ModEnd> VAR_149 = VAR_19 <S2SV_ModStart> VAR_152 ) ) ; if ( VAR_152 < sizeof ( TYPE_7 ) || VAR_152 > VAR_154 ) goto VAR_156 <S2SV_ModStart> case VAR_30 : if ( VAR_152 != sizeof ( TYPE_7 ) + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> case VAR_40 : if ( VAR_152 != sizeof ( TYPE_7 ) ) goto VAR_156 ; <S2SV_ModStart> case VAR_41 : if ( VAR_152 != sizeof ( TYPE_7 ) ) goto VAR_156 ; <S2SV_ModStart> * VAR_110 ; if ( VAR_152 != sizeof ( TYPE_7 ) + 12 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> * VAR_110 ; if ( VAR_152 != sizeof ( TYPE_7 ) + 24 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_152 ) ; <S2SV_ModStart> , VAR_105 ; VAR_134 = sizeof ( TYPE_7 ) ; if ( VAR_152 < VAR_134 + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_134 + 4 ) ; <S2SV_ModStart> VAR_123 ) ; VAR_134 += 4 <S2SV_ModEnd> ; VAR_105 = <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( VAR_123 <S2SV_ModStart> if ( VAR_123 ) { if ( VAR_152 < VAR_134 + VAR_123 ) goto VAR_156 ; if ( ! VAR_155 ) { METHOD_31 ( * VAR_151 , VAR_134 + VAR_123 ) ; } else <S2SV_ModEnd> { METHOD_32 ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> METHOD_29 ( VAR_150 <S2SV_ModStart> VAR_150 , VAR_151 + VAR_134 , VAR_123 , 0 <S2SV_ModStart> + 2 ) ; } VAR_134 <S2SV_ModEnd> += VAR_123 ; <S2SV_ModStart> += VAR_123 ; } if ( VAR_152 < VAR_134 + 4 ) goto VAR_156 ; METHOD_31 ( * VAR_151 , VAR_134 + 4 ) <S2SV_ModEnd> ; VAR_139 = <S2SV_ModStart> ; VAR_139 = <S2SV_ModEnd> METHOD_30 ( VAR_151 <S2SV_ModStart> METHOD_30 ( VAR_151 + VAR_134 ) ; VAR_134 <S2SV_ModEnd> += 4 ; <S2SV_ModStart> += 4 ; if ( VAR_139 ) { if ( VAR_152 < VAR_134 + VAR_139 ) goto VAR_156 ; METHOD_32 ( ( VAR_150 , "%sError<S2SV_blank>text:<S2SV_blank>" , METHOD_33 ( VAR_136 + 2 ) ) ) ; if ( METHOD_34 ( VAR_150 , VAR_151 + VAR_134 , VAR_139 , VAR_150 -> VAR_141 ) ) goto VAR_153 ; } } break ; default : <S2SV_ModEnd> METHOD_31 ( * <S2SV_ModStart> * VAR_151 , VAR_152 ) ; <S2SV_ModEnd> VAR_149 = VAR_144 <S2SV_ModStart> ; } return VAR_152 ; VAR_156 : METHOD_32 ( ( VAR_150 , "%s" , istr ) ) ; METHOD_31 ( * VAR_151 , VAR_154 ) ; return VAR_154 <S2SV_ModEnd> ; VAR_153 : <S2SV_ModStart> ; VAR_153 : METHOD_32 ( ( VAR_150 , "\\n\\t%s" , VAR_157 ) ) ; return VAR_154 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; TYPE_2 VAR_97 <S2SV_ModEnd> ; VAR_142 -> <S2SV_ModStart> STRUCT_OR_UNION_7 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> VAR_21 + ROSE_CALL_REQ_FACILITIES_OFF , VAR_142 -> VAR_143 - ROSE_CALL_REQ_FACILITIES_OFF , <S2SV_ModEnd> & VAR_106 )
<S2SV_ModStart> { VAR_87 = METHOD_11 ( STRUCT_OR_UNION_10 , & VAR_72 , & VAR_83 ) ; if ( VAR_87 ) goto VAR_86 <S2SV_ModEnd> ; } break
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_54 <S2SV_ModEnd> ; TYPE_4 VAR_57 <S2SV_ModStart> ) ; } METHOD_13 ( ) ; VAR_54 = METHOD_2 ( VAR_58 ) ; if ( ! VAR_54 ) { METHOD_14 ( ) ; return - VAR_20 ; } <S2SV_ModStart> VAR_55 ) ; METHOD_14 ( ) ;
<S2SV_ModStart> VAR_63 , VAR_59 <S2SV_ModEnd> ) ; break
<S2SV_ModStart> == '/' ) { if ( VAR_45 -> VAR_29 & VAR_52 ) { METHOD_3 ( & VAR_45 -> VAR_32 , VAR_33 , "Path<S2SV_blank>is<S2SV_blank>absolute" ) ; return ( VAR_34 ) ; } VAR_47 = * VAR_43 ++ ; } <S2SV_ModEnd> for ( ;
<S2SV_ModStart> TYPE_15 METHOD_0 ( <S2SV_ModEnd> TYPE_2 VAR_96 , <S2SV_ModStart> ) { TYPE_25 <S2SV_ModEnd> VAR_80 , VAR_90 <S2SV_ModStart> ; TYPE_15 VAR_102 = VAR_113 <S2SV_ModStart> = 1 ; const TYPE_28 * VAR_114 = METHOD_5 ( VAR_96 ) ; if ( ! VAR_114 ) { METHOD_6 ( "Algorithm<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>hmac:<S2SV_blank>%x" , VAR_96 ) ; return VAR_115 ; } TYPE_29 VAR_116 ; METHOD_7 ( & VAR_116 ) ; TYPE_16 VAR_117 = METHOD_8 ( & VAR_116 , VAR_97 -> VAR_57 , VAR_97 -> VAR_111 , VAR_114 , VAR_118 ) ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Init<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) ; return VAR_119 ; } <S2SV_ModStart> VAR_112 ) { TYPE_25 VAR_105 ; <S2SV_ModStart> VAR_98 [ VAR_93 ] = ( TYPE_25 * ) 0 ; TYPE_16 VAR_120 ; for ( VAR_120 = 0 ; VAR_120 < VAR_93 ; VAR_120 ++ ) { TYPE_25 * VAR_121 = VAR_98 [ VAR_120 ] ; TYPE_16 VAR_117 = METHOD_10 ( & VAR_116 , VAR_121 -> VAR_106 . VAR_57 , VAR_121 -> VAR_106 . VAR_111 ) ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Update<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) <S2SV_ModEnd> ; VAR_102 = <S2SV_ModStart> ; VAR_102 = VAR_119 ; goto VAR_122 ; } } unsigned VAR_111 = sizeof ( VAR_105 . VAR_110 . VAR_57 ) ; TYPE_16 VAR_117 = HMAC_Final ( & VAR_116 , VAR_105 . VAR_110 . VAR_57 , & VAR_111 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( ! VAR_117 ) { METHOD_6 ( "HMAC<S2SV_blank>Final<S2SV_blank>failed:<S2SV_blank>%s" , METHOD_9 ( VAR_117 , VAR_118 ) ) ; VAR_102 = VAR_119 ; goto VAR_122 ; } VAR_105 . VAR_110 . VAR_111 = VAR_111 ; <S2SV_ModEnd> TYPE_27 VAR_107 = <S2SV_ModStart> VAR_107 ) { VAR_102 = VAR_108 ; goto VAR_122 ; } } VAR_109 -> VAR_110 . VAR_111 = VAR_112 ; VAR_122 : METHOD_11 ( & VAR_116 ) ; return VAR_102 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_11 TYPE_20 ; VAR_84 ( 100 , ( "jas_image_cmpt_create(%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%ld,<S2SV_blank>%d,<S2SV_blank>%d,<S2SV_blank>%d)\\n" , JAS_CAST ( TYPE_21 , VAR_28 ) , JAS_CAST ( TYPE_21 , VAR_31 ) , JAS_CAST ( TYPE_21 , VAR_34 ) , JAS_CAST ( TYPE_21 , VAR_37 ) , JAS_CAST ( TYPE_21 , VAR_40 ) , JAS_CAST ( TYPE_21 , VAR_43 ) , JAS_CAST ( TYPE_22 , VAR_54 ) , VAR_49 , VAR_64 ) ) ; <S2SV_ModStart> VAR_31 , VAR_43 , 0 ) ) { goto VAR_81 ; } if ( ! jas_safe_intfast32_mul3 ( VAR_40 , VAR_43 , VAR_54 <S2SV_ModStart> if ( ! METHOD_12 <S2SV_ModEnd> ( VAR_83 -> <S2SV_ModStart> VAR_83 -> VAR_58 <S2SV_ModEnd> , VAR_83 ->
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 == 0 ) return ( ( TYPE_3 * ) VAR_2 ) ;
<S2SV_ModStart> ; if ( METHOD_24 ( ! METHOD_23 ( VAR_299 ) ) ) return - VAR_308 ; if (
<S2SV_ModStart> "MemoryAllocationFailed" ) ; ( TYPE_91 ) METHOD_133 ( VAR_665 , 0 , VAR_556 * sizeof ( TYPE_77 ) ) ;
<S2SV_ModStart> ( VAR_11 ) VAR_11 = METHOD_7 <S2SV_ModEnd> ( VAR_11 )
<S2SV_ModStart> } while ( ( VAR_245 < ( TYPE_51 ) VAR_139 ) && ( <S2SV_ModStart> ] == '\\n' )
<S2SV_ModStart> VAR_113 ) ; if ( VAR_119 == VAR_115 ) continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_390 ) || ( VAR_393 & VAR_107 && <S2SV_ModStart> VAR_437 == VAR_321 )
<S2SV_ModStart> VAR_156 ) { METHOD_15 ( & METHOD_1 ( VAR_153 ) -> VAR_159 . VAR_165 ) ; <S2SV_ModStart> VAR_164 = 1 ; METHOD_16 ( & METHOD_1 ( VAR_153 ) -> VAR_159 . VAR_165 ) <S2SV_ModStart> ; } else { <S2SV_ModStart> = 0 ; }
<S2SV_ModStart> TYPE_2 * VAR_9 , TYPE_0 * VAR_12 , TYPE_0 * VAR_18 ) { * <S2SV_ModEnd> VAR_12 = METHOD_2 <S2SV_ModStart> 4 ) ; * <S2SV_ModEnd> VAR_18 = METHOD_2 <S2SV_ModStart> ; if ( * <S2SV_ModEnd> VAR_12 == 0 <S2SV_ModStart> == 0 && * <S2SV_ModEnd> VAR_18 == 8 <S2SV_ModStart> 8 ) { * <S2SV_ModEnd> VAR_18 = 0
<S2SV_ModStart> + VAR_8 ; TYPE_4 VAR_56 , VAR_57 , VAR_58 ; <S2SV_ModStart> VAR_55 ) ; VAR_56 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_52 ) ; VAR_57 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_15 ) ; VAR_58 = METHOD_9 ( VAR_53 -> VAR_50 -> VAR_51 + VAR_43 ) ; if ( VAR_56 > VAR_58 || VAR_57 > VAR_58 ) goto VAR_59 ; while ( VAR_56 != VAR_57 ) { unsigned TYPE_5 VAR_33 = METHOD_9 ( VAR_23 + 2 * VAR_56 ) ; if ( METHOD_6 ( VAR_28 , & VAR_53 -> VAR_30 ) ) METHOD_7 ( VAR_53 -> VAR_32 , & VAR_33 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> 1 ) ; if ( ++ VAR_56 > VAR_58 ) VAR_56 = 0 ; METHOD_11 ( VAR_56 , <S2SV_ModEnd> VAR_53 -> VAR_50 <S2SV_ModStart> + VAR_52 ) ; } VAR_59 : <S2SV_ModEnd> METHOD_12 ( &
<S2SV_ModStart> VAR_25 ) ; if ( ! VAR_22 -> VAR_23 [ VAR_24 ] . VAR_25 ) return - VAR_9 ;
<S2SV_ModStart> STRUCT_OR_UNION_5 ) ; <S2SV_ModEnd> METHOD_4 ( STRUCT_OR_UNION_5
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> "\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>function<S2SV_blank>setTimer()<S2SV_blank>{\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>checkSession();\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%d);\\n" <S2SV_ModEnd> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}\\n" "\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>function<S2SV_blank>receiveMessage(e)<S2SV_blank>{\\n" <S2SV_ModStart> VAR_47 ) ; TYPE_0 VAR_57 = VAR_47 ? METHOD_11 ( VAR_47 , VAR_53 , 10 ) : 0 ; if ( ( VAR_57 <= 0 ) || ( VAR_57 > 3600 * 24 ) ) VAR_57 = 3000 <S2SV_ModEnd> ; const TYPE_13 <S2SV_ModStart> , VAR_46 , VAR_57 <S2SV_ModEnd> , VAR_49 ,
<S2SV_ModStart> * VAR_39 , struct STRUCT_OR_UNION_3 * VAR_56 <S2SV_ModEnd> ) { VAR_3 <S2SV_ModStart> VAR_3 * VAR_24 , * VAR_57 <S2SV_ModStart> TYPE_3 VAR_55 ; VAR_56 -> <S2SV_ModEnd> VAR_50 = 0 <S2SV_ModStart> ) goto VAR_54 ; VAR_57 = VAR_48 -> VAR_35 <S2SV_ModStart> TYPE_5 VAR_46 ; VAR_48 -> VAR_35 = VAR_57 ; VAR_56 -> VAR_58 = METHOD_8 ( VAR_57 ) + 2 ; VAR_56 -> VAR_58 <<= 2 ; <S2SV_ModStart> VAR_36 -> VAR_37 ; VAR_51 += VAR_56 -> VAR_58 <S2SV_ModStart> VAR_46 ) { if ( VAR_56 -> VAR_59 & VAR_60 ) { VAR_56 -> VAR_50 = VAR_51 ; goto VAR_54 ; } METHOD_6 ( "NFS:<S2SV_blank>acl<S2SV_blank>reply:<S2SV_blank>attrlen<S2SV_blank>%u<S2SV_blank>><S2SV_blank>recvd<S2SV_blank>%u\\n" <S2SV_ModEnd> , VAR_51 , <S2SV_ModStart> VAR_51 ) ; VAR_56 -> <S2SV_ModEnd> VAR_50 = VAR_51
<S2SV_ModStart> VAR_97 ) ; if ( VAR_124 < 0 ) return METHOD_1 ( VAR_124 ) ;
<S2SV_ModStart> ; while ( ( VAR_68 < VAR_67 ) && <S2SV_ModStart> != 0 ) <S2SV_ModEnd> ) { VAR_68
<S2SV_ModStart> * VAR_5 ; TYPE_5 <S2SV_ModEnd> VAR_14 ; VAR_12 <S2SV_ModStart> -> VAR_8 = METHOD_2 <S2SV_ModEnd> ( VAR_9 ,
<S2SV_ModStart> [ VAR_145 ] && VAR_146 -> VAR_144 [ VAR_145 ]
<S2SV_ModStart> ( VAR_28 , VAR_18 , <S2SV_ModStart> ) - 5 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> { VAR_46 = METHOD_20 <S2SV_ModEnd> ( VAR_63 , <S2SV_ModStart> } VAR_51 = METHOD_20 <S2SV_ModEnd> ( VAR_70 ,
<S2SV_ModStart> ++ ) { TYPE_48 VAR_356 = METHOD_40 ( VAR_133 , ( VAR_352 << 1 ) + 1 ) ; <S2SV_ModStart> ) VAR_133 + VAR_356 <S2SV_ModEnd> - 2 * <S2SV_ModStart> sizeof ( TYPE_53 ) <S2SV_ModStart> SIZE_T_FORMAT "u)<S2SV_blank>id=%x<S2SV_blank>type=%x<S2SV_blank>offs=0x%tx,0x%x\\n" , VAR_352 , <S2SV_ModEnd> VAR_351 [ VAR_352 <S2SV_ModStart> - VAR_133 , VAR_90 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> TYPE_3 VAR_53 ; struct STRUCT_OR_UNION_4 * VAR_55 ; VAR_55 = METHOD_9 ( VAR_51 -> VAR_55 , METHOD_8 ( VAR_54 ) ) ; if ( VAR_55 && VAR_55 -> VAR_19 . VAR_16 ) VAR_23 = VAR_55 -> VAR_19 . <S2SV_ModEnd> VAR_20 ; VAR_41
<S2SV_ModStart> return ; } if ( VAR_40 < sizeof ( struct STRUCT_OR_UNION_12 ) ) { METHOD_91 ( ( VAR_386 , "EIGRP<S2SV_blank>%s,<S2SV_blank>length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , METHOD_82 ( VAR_44 , "unknown<S2SV_blank>(%u)" , VAR_58 -> VAR_48 ) , VAR_40 , ( TYPE_5 ) sizeof ( struct STRUCT_OR_UNION_12 ) ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( VAR_384 < sizeof ( struct STRUCT_OR_UNION_30 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) sizeof ( struct STRUCT_OR_UNION_30 ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_108 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_108 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_125 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_125 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_176 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_176 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_248 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_248 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_262 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_262 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_303 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_303 ) ) ) ) ; break ; } <S2SV_ModStart> ) VAR_374 ; if ( VAR_375 < sizeof ( * VAR_363 . VAR_364 ) ) { METHOD_91 ( ( VAR_386 , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( TYPE_5 ) ( sizeof ( struct STRUCT_OR_UNION_30 ) + sizeof ( * VAR_363 . VAR_364 ) ) ) ) ; break ; }
<S2SV_ModStart> = METHOD_1 ( ( TYPE_6 TYPE_6 ) VAR_13 . VAR_14 . VAR_15 ) ; TYPE_4 VAR_25 = METHOD_3 ( ( TYPE_6 TYPE_6 ) <S2SV_ModStart> ; TYPE_6 TYPE_6 * VAR_23 ; if ( VAR_25 != ( * VAR_22 - VAR_13 . VAR_14 . VAR_12 ) ) { METHOD_4 ( "parse_exports_table:<S2SV_blank>Bad<S2SV_blank>inode<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; return VAR_19 ; } VAR_23 = METHOD_6 ( VAR_21 ) <S2SV_ModEnd> ; VAR_17 = <S2SV_ModStart> . VAR_12 , VAR_25 , <S2SV_ModEnd> VAR_23 ) ;
<S2SV_ModStart> , '/' ) ; if ( VAR_58 == VAR_65 ) return ( VAR_66 ) ; VAR_58 ++ <S2SV_ModEnd> ; METHOD_20 (
<S2SV_ModStart> |= VAR_47 ; if ( VAR_54 & VAR_55 ) VAR_53 |= VAR_56 ;
<S2SV_ModStart> { VAR_87 = METHOD_11 ( STRUCT_OR_UNION_10 , & VAR_72 , & VAR_83 ) ; if ( VAR_87 ) goto VAR_86 <S2SV_ModEnd> ; } break
<S2SV_ModStart> -> VAR_23 , "ModSecurity:<S2SV_blank>Invalid<S2SV_blank>value<S2SV_blank>for<S2SV_blank>SexHashEngine:<S2SV_blank>%s" <S2SV_ModEnd> , VAR_24 )
<S2SV_ModStart> ) ) ; METHOD_13 ( ) ; <S2SV_ModStart> & VAR_57 , METHOD_14 ( <S2SV_ModStart> VAR_52 -> VAR_53 ) , & VAR_54 ) ; METHOD_15 ( <S2SV_ModEnd> ) ; VAR_67
<S2SV_ModStart> = 0.0 ; TYPE_42 VAR_314 = 0 , VAR_264 = 0 ; TYPE_9 <S2SV_ModEnd> VAR_374 = 0 <S2SV_ModStart> ! VAR_420 ) { if ( VAR_403 > 0xFFFFFFFFU - 3 ) { TYPE_55 ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; } <S2SV_ModStart> 3 ) ; } <S2SV_ModStart> VAR_403 ) { if ( VAR_403 > 0xFFFFFFFFU - 3 ) { TYPE_55 ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; }
<S2SV_ModStart> VAR_105 . VAR_100 || ! VAR_141
<S2SV_ModStart> ; VAR_5 -> VAR_8 &= ~ VAR_9 ; VAR_5 ->
<S2SV_ModStart> ) ; } if ( ( ( TYPE_117 ) VAR_982 -> VAR_937 * VAR_982 -> VAR_965 ) > METHOD_126 ( VAR_982 ) ) METHOD_142 ( VAR_975 , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> = 0 ; TYPE_5 VAR_87 = 0 ; <S2SV_ModStart> VAR_84 ; } VAR_87 = sizeof ( METHOD_16 ( STRUCT_OR_UNION_20 ) -> VAR_43 ) ; <S2SV_ModStart> -> VAR_43 , VAR_87 ) ; METHOD_45 ( VAR_85 -> VAR_41 + VAR_87 , 0 , STRUCT_OR_UNION_20 -> VAR_27 -> VAR_88 - VAR_87 <S2SV_ModEnd> ) ; VAR_81
<S2SV_ModStart> VAR_22 ) ) return 1 ; if ( VAR_39 -> VAR_40 -> VAR_34 . VAR_35 || VAR_39 -> VAR_40 -> VAR_38 ) return 0 ; if ( VAR_39 -> VAR_40 -> VAR_41 . VAR_42 ) <S2SV_ModStart> , VAR_29 , VAR_43 <S2SV_ModEnd> ) ; METHOD_8 <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; TYPE_3 VAR_28 ; if ( METHOD_8 ( ) ) return - VAR_16
<S2SV_ModStart> ; TYPE_7 VAR_436 = VAR_26 ; TYPE_7 VAR_449 <S2SV_ModStart> -> VAR_202 ) { <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; VAR_449 = VAR_437 ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> = 0 ; VAR_449 = VAR_26 ; } <S2SV_ModStart> -> VAR_162 ; VAR_449 = VAR_26 ; <S2SV_ModStart> ; if ( VAR_449 <S2SV_ModEnd> ) { if
<S2SV_ModStart> = VAR_153 ; <S2SV_ModEnd> METHOD_16 ( VAR_156
<S2SV_ModStart> return VAR_8 ; if ( METHOD_4 ( VAR_6 ) -> METHOD_5 ) return METHOD_4 ( VAR_6 ) -> METHOD_5 ( & VAR_4 -> VAR_10 ) ; else
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> METHOD_0 ( TYPE_8 VAR_57 <S2SV_ModEnd> , TYPE_8 VAR_15 <S2SV_ModStart> * VAR_46 ) { TYPE_8 VAR_58 <S2SV_ModEnd> = - 1 <S2SV_ModStart> = - 1 <S2SV_ModEnd> ; const TYPE_7 <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( METHOD_17 <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto VAR_52 ; <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto VAR_52 ; <S2SV_ModStart> ( METHOD_18 ( VAR_57 <S2SV_ModEnd> , VAR_53 , <S2SV_ModStart> { METHOD_20 ( "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label:<S2SV_blank>%s." , VAR_53 ) ; goto VAR_52 ; } METHOD_24 ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , VAR_53 ) ; } else if ( METHOD_17 ( VAR_49 , "SELinux" ) == 0 ) { if ( METHOD_18 ( VAR_57 , VAR_46 , METHOD_19 ( VAR_46 ) + 1 ) < 0 ) { METHOD_20 ( <S2SV_ModStart> "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label" ) ; goto VAR_52 ; } METHOD_24 ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , VAR_46 ) ; } else <S2SV_ModEnd> { METHOD_21 ( <S2SV_ModStart> VAR_49 ) ; goto VAR_52 ; } VAR_58 = 0 ; <S2SV_ModEnd> VAR_52 : METHOD_22 <S2SV_ModStart> ; if ( VAR_57 <S2SV_ModEnd> != - 1 <S2SV_ModStart> ) METHOD_23 ( VAR_57 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return VAR_58 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; if ( VAR_227 >= 31 || ( ( VAR_250 -> VAR_240 << VAR_227 ) >> VAR_227 ) != VAR_250 -> VAR_240 || VAR_215 >= 31 || ( ( VAR_250 -> VAR_251 << VAR_215 ) >> VAR_215 ) != VAR_250 -> VAR_251 ) { continue ; } if (
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_83 <S2SV_ModEnd> ) { TYPE_3 <S2SV_ModStart> ( VAR_84 , <S2SV_ModEnd> & VAR_82 ,
<S2SV_ModStart> VAR_38 , struct STRUCT_OR_UNION_15 <S2SV_ModEnd> * * VAR_40 <S2SV_ModStart> ) ; struct STRUCT_OR_UNION_15 * VAR_45 ; struct STRUCT_OR_UNION_16 <S2SV_ModEnd> * VAR_13 = <S2SV_ModStart> VAR_48 ) ; VAR_45 = METHOD_18 <S2SV_ModEnd> ( VAR_13 , <S2SV_ModStart> ( VAR_13 , <S2SV_ModEnd> VAR_48 ) ; <S2SV_ModStart> * VAR_43 ; <S2SV_ModEnd> VAR_43 = METHOD_7 <S2SV_ModStart> ; VAR_45 = METHOD_19 ( VAR_13 , VAR_45 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> { TYPE_5 VAR_16 <S2SV_ModEnd> ; TYPE_7 VAR_20 <S2SV_ModStart> = VAR_16 ; return METHOD_4 <S2SV_ModEnd> ( VAR_30 -> <S2SV_ModStart> -> VAR_28 , <S2SV_ModEnd> VAR_30 -> VAR_31 <S2SV_ModStart> VAR_30 -> VAR_31 , VAR_20
<S2SV_ModStart> = VAR_66 ; <S2SV_ModEnd> VAR_67 = METHOD_4
<S2SV_ModStart> if ( VAR_175 == 0 && VAR_33 ) return 0 ; if ( VAR_175
<S2SV_ModStart> ; VAR_331 : VAR_745 = METHOD_128 ( VAR_786 , VAR_786 -> VAR_763 , VAR_786 -> VAR_761 , VAR_744 ) ; if ( VAR_745 == VAR_746 ) break ; <S2SV_ModStart> VAR_639 . VAR_610 ; VAR_745 = METHOD_128 ( VAR_786 , VAR_786 -> VAR_763 , VAR_786 -> VAR_761 , VAR_744 ) ; if ( VAR_745 == VAR_746 ) break <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_748 : (
<S2SV_ModStart> - VAR_54 ; * ( ( struct STRUCT_OR_UNION_3 * ) VAR_96 ) = VAR_69 ; <S2SV_ModStart> METHOD_8 ( VAR_96 + sizeof ( VAR_69 ) <S2SV_ModStart> * ) VAR_87 + sizeof ( VAR_69 ) , VAR_69 . VAR_70 - sizeof ( VAR_69 ) <S2SV_ModEnd> ) ) {
<S2SV_ModStart> VAR_91 ; TYPE_15 VAR_112 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_111 = METHOD_5 <S2SV_ModEnd> ( VAR_22 , <S2SV_ModStart> ( VAR_22 , VAR_108 , <S2SV_ModStart> 2 ) { VAR_112 <S2SV_ModEnd> = ( VAR_64 <S2SV_ModStart> = VAR_64 - VAR_112 <S2SV_ModEnd> ; VAR_92 = <S2SV_ModStart> & VAR_85 [ VAR_112 <S2SV_ModEnd> * VAR_106 ]
<S2SV_ModStart> ( VAR_379 , "ImproperImageHeader" <S2SV_ModEnd> ) ; VAR_320 <S2SV_ModStart> ( VAR_379 , "ImproperImageHeader" <S2SV_ModEnd> ) ; VAR_544 <S2SV_ModStart> ( VAR_379 , "ImproperImageHeader" <S2SV_ModEnd> ) ; VAR_544 <S2SV_ModStart> VAR_388 ) ; else { if ( VAR_685 . VAR_552 > ( VAR_388 * VAR_544 ) ) METHOD_75 ( VAR_379 , "ImproperImageHeader" ) ; ( TYPE_77 ) METHOD_117 ( VAR_648 , VAR_390 , VAR_685 . VAR_552 ) ; }
<S2SV_ModStart> VAR_7 ) ; if ( VAR_55 -> VAR_56 ) { METHOD_17 ( VAR_55 -> VAR_56 ) ; VAR_55 -> VAR_56 = VAR_52 ; } <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_175 ; } if ( VAR_169 -> VAR_150 [ 0 ] . VAR_152 . VAR_52 < 1 ) { METHOD_30 ( & VAR_169 -> VAR_147 , "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n" ) ; VAR_181 = - VAR_182 ; goto VAR_173 ; }
<S2SV_ModStart> "setregid" ) ; <S2SV_ModEnd> TYPE_17 * VAR_106 <S2SV_ModStart> 0 ] = "/bin/sh" <S2SV_ModEnd> ; VAR_106 [
<S2SV_ModStart> VAR_1 ) { if ( VAR_1 -> VAR_2 . VAR_4 ) <S2SV_ModStart> VAR_4 ) ; else return VAR_5 ;
<S2SV_ModStart> * VAR_6 , TYPE_3 VAR_10 <S2SV_ModEnd> ) { METHOD_1 <S2SV_ModStart> , VAR_6 , VAR_10 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> ( VAR_227 ) ; if ( METHOD_49 ( VAR_227 ) ) return VAR_200
<S2SV_ModStart> if ( VAR_352 < VAR_143 || VAR_352
<S2SV_ModStart> VAR_11 ) ; <S2SV_ModEnd> METHOD_8 ( VAR_14 <S2SV_ModStart> VAR_13 ) ; <S2SV_ModEnd> METHOD_8 ( VAR_14 <S2SV_ModStart> VAR_15 ) ; <S2SV_ModEnd> VAR_16 = &
<S2SV_ModStart> = VAR_8 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & VAR_13 , "/etc" , ".vipw" <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> VAR_24 ) ; VAR_28 -> VAR_29 += VAR_28 -> VAR_30 ; VAR_28 -> VAR_30 = 0 ;
<S2SV_ModStart> ; METHOD_12 ( VAR_63 , VAR_66 ) ; METHOD_12 ( VAR_81 , VAR_84 ) ; METHOD_13 ( VAR_91 , VAR_46 ) ; METHOD_14 ( VAR_112 ) ; METHOD_12 ( <S2SV_ModStart> VAR_91 -> VAR_40 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> = VAR_419 ; if ( ( VAR_416 -> VAR_167 ) && ( VAR_348 -> VAR_121 == 4 ) && ( ( VAR_348 -> VAR_429 >= 4096 ) || ( VAR_348 -> VAR_430 >= 4096 ) ) ) { return VAR_322 ; }
<S2SV_ModStart> 1u << VAR_7 ) | ( 1u << VAR_33
<S2SV_ModStart> VAR_33 ) { <S2SV_ModEnd> TYPE_11 VAR_42 [ <S2SV_ModStart> 1 ] ; TYPE_8 VAR_58 ; VAR_58 = VAR_24 ; if ( VAR_58 > VAR_34 ) VAR_58 = VAR_34 ; <S2SV_ModStart> , VAR_33 , VAR_58 <S2SV_ModEnd> ) ; VAR_42 <S2SV_ModStart> ; VAR_42 [ VAR_58 <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> unsigned TYPE_14 VAR_27 , struct STRUCT_OR_UNION_5 * VAR_75 <S2SV_ModStart> ( & VAR_68 , VAR_75
<S2SV_ModStart> ( VAR_83 ) goto VAR_84 <S2SV_ModEnd> ; VAR_83 = <S2SV_ModStart> VAR_82 ) ; VAR_84 : METHOD_20 ( & VAR_80 -> VAR_21 ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_0 VAR_44 [ VAR_25 ] <S2SV_ModEnd> , const TYPE_2 <S2SV_ModStart> const VAR_33 [ VAR_25 <S2SV_ModEnd> ] = { <S2SV_ModStart> VAR_20 -> VAR_10 <S2SV_ModEnd> } ; const <S2SV_ModStart> TYPE_7 VAR_35 [ VAR_25 <S2SV_ModEnd> ] = { <S2SV_ModStart> VAR_20 -> VAR_19 <S2SV_ModEnd> } ; TYPE_7 <S2SV_ModStart> VAR_42 = & VAR_44 <S2SV_ModEnd> [ VAR_36 ]
<S2SV_ModStart> VAR_68 ++ ) ; if ( ( TYPE_5 * ) VAR_68 > VAR_72 -> VAR_90 + VAR_72 -> VAR_102 ) return 0
<S2SV_ModStart> <S2SV_null> static VAR_0 TYPE_4 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> VAR_13 ) { return METHOD_2 ( VAR_11 , VAR_13 , VAR_11 -> VAR_14 == VAR_15 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_3 , <S2SV_ModEnd> TYPE_3 VAR_5 )
<S2SV_ModStart> ; VAR_26 = METHOD_7 <S2SV_ModEnd> ( VAR_33 ,
<S2SV_ModStart> ) VAR_27 = VAR_30 <S2SV_ModEnd> ; else VAR_27 <S2SV_ModStart> else VAR_27 = ocfs2_dio_wr_get_block <S2SV_ModEnd> ; return METHOD_6
<S2SV_ModStart> return VAR_41 ; <S2SV_ModEnd> VAR_42 = VAR_40
<S2SV_ModStart> ( VAR_73 , "%79s<S2SV_blank>%99[^\\n]\\n" <S2SV_ModEnd> , VAR_61 ,
<S2SV_ModStart> ( * VAR_50 + VAR_56 , * VAR_51 - VAR_56 <S2SV_ModEnd> , VAR_52 )
<S2SV_ModStart> VAR_46 ) { <S2SV_ModEnd> TYPE_7 VAR_72 ; <S2SV_ModStart> TYPE_7 VAR_72 ; TYPE_3 * VAR_85 ; <S2SV_ModStart> * VAR_78 ; TYPE_11 VAR_63 ; const TYPE_9 * VAR_86 ; VAR_10 * VAR_77 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> ':' ) ; for ( VAR_86 = VAR_58 ; VAR_86 != VAR_49 ; VAR_86 ++ ) { TYPE_9 VAR_75 = * VAR_86 ; if ( ! ( VAR_75 == '<S2SV_blank>' || VAR_75 == '\\t' || VAR_75 == '\\n' || VAR_75 == '\\f' ) ) { break ; } } if ( VAR_86 == VAR_49 ) { METHOD_11 ( VAR_75 , VAR_46 , "f-string:<S2SV_blank>empty<S2SV_blank>expression<S2SV_blank>not<S2SV_blank>allowed" ) ; return VAR_80 ; } VAR_63 = <S2SV_ModEnd> VAR_49 - VAR_58 <S2SV_ModStart> VAR_49 - VAR_58 <S2SV_ModEnd> ; VAR_78 = <S2SV_ModStart> == VAR_80 ) { PyErr_NoMemory ( ) ; return VAR_80 ; } <S2SV_ModEnd> VAR_78 [ 0 <S2SV_ModStart> = VAR_66 ; VAR_85 = METHOD_18 ( VAR_78 , "<fstring>" , VAR_71 , 0 ) ; if ( ! VAR_85 ) { METHOD_17 ( VAR_78 ) ; return VAR_80 ; } VAR_78 [ 0 ] = '{' ; VAR_78 [ VAR_63 + 1 ] = '}' ; METHOD_20 ( VAR_46 , VAR_85 , VAR_78 ) ; <S2SV_ModStart> METHOD_17 ( VAR_78 ) ; METHOD_19 ( VAR_85
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> VAR_12 = VAR_3 ? VAR_3 -> VAR_4 : 0 <S2SV_ModEnd> ; while (
<S2SV_ModStart> == 0 ) METHOD_10 ( STRUCT_OR_UNION_9 , 0 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> <= * VAR_24 && VAR_20 > 0
<S2SV_ModStart> ; VAR_153 . VAR_174 = VAR_164 ; VAR_153 .
<S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout == NULL <S2SV_ModStart> ; if ( compat_get_timespec <S2SV_ModEnd> ( & ktspec <S2SV_ModStart> > 0 && compat_put_timespec <S2SV_ModEnd> ( & ktspec
<S2SV_ModStart> VAR_24 ) ; <S2SV_ModEnd> METHOD_2 ( VAR_22 <S2SV_ModStart> VAR_9 ) ; return <S2SV_ModEnd> METHOD_3 ( VAR_24 <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> |= VAR_23 ; <S2SV_ModEnd> METHOD_4 ( VAR_50
<S2SV_ModStart> VAR_31 ) ; if ( ! VAR_48 -> VAR_49 ) { return VAR_52 ; }
<S2SV_ModStart> VAR_38 = 0 <S2SV_ModEnd> ; const TYPE_6 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( VAR_38
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_7 * STRUCT_OR_UNION_7 , <S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_22 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_4 <S2SV_ModStart> -> STRUCT_OR_UNION_7 != STRUCT_OR_UNION_7 ) return 0 ; if ( VAR_19 -> STRUCT_OR_UNION_7 != <S2SV_ModStart> return 1 ; VAR_22 = METHOD_1 ( VAR_19 -> STRUCT_OR_UNION_7 ) ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( const struct STRUCT_OR_UNION_2 * STRUCT_OR_UNION_2 , <S2SV_ModStart> , VAR_32 ) && METHOD_9 ( STRUCT_OR_UNION_2 , VAR_30 -> VAR_31 , VAR_32 )
<S2SV_ModStart> VAR_35 ++ ) { if ( VAR_29 -> VAR_38 == VAR_39 ) <S2SV_ModStart> ) ; } }
<S2SV_ModStart> VAR_62 ; TYPE_2 * VAR_64 <S2SV_ModEnd> ; TYPE_3 VAR_63 <S2SV_ModStart> = 0 ; TYPE_4 VAR_56 = <S2SV_ModEnd> VAR_54 [ VAR_55 <S2SV_ModStart> ] . VAR_56 ; VAR_64 = METHOD_1 ( sizeof ( * VAR_62 ) , VAR_9 ) ; if ( ! VAR_64 ) return - VAR_11 ; VAR_62 = ( struct STRUCT_OR_UNION_2 * ) VAR_64 ; VAR_64 [ 0 ] = 1 ; if ( METHOD_10 ( VAR_53 , VAR_56 , VAR_64 , 1 <S2SV_ModEnd> ) != 1 <S2SV_ModStart> ; METHOD_12 ( VAR_64 <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) { VAR_64 [ 0 ] = 0 ; if ( <S2SV_ModEnd> METHOD_10 ( VAR_53 <S2SV_ModStart> ( VAR_53 , VAR_56 , VAR_64 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> ; METHOD_12 ( VAR_64 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_6 VAR_61 <S2SV_ModStart> , VAR_60 ; if ( VAR_61 < 2 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_57 ++ ; VAR_61 -= 2 ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_59 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 ; VAR_60 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ) ) ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_59 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 ; VAR_60 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ) ) ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_59 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 ; VAR_60 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ) ) ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_59 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 ; VAR_60 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ) ) ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; } VAR_59 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 ; VAR_60 = METHOD_17 ( VAR_57 ) ; VAR_57 ++ ; VAR_61 -= 2 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ) ) ; if ( VAR_61 < 4 ) { METHOD_18 ( ( VAR_58 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> VAR_102 ) ; VAR_106 = METHOD_19 ( * VAR_80 , <S2SV_ModEnd> VAR_75 -> VAR_76 <S2SV_ModStart> VAR_76 . VAR_80 ) && METHOD_19 ( * VAR_84 , "kadmin" ) && ! METHOD_19 ( * VAR_88 , "history" ) ; <S2SV_ModEnd> VAR_92 : if
<S2SV_ModStart> ; if ( VAR_126 < VAR_145 -> VAR_66 ||
<S2SV_ModStart> VAR_64 -> VAR_17 ) ; down_read ( & METHOD_33 ( STRUCT_OR_UNION_35 ) -> VAR_89 <S2SV_ModStart> ; VAR_86 : METHOD_34 ( & METHOD_33 ( STRUCT_OR_UNION_35 ) -> VAR_89 ) ;
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_6 ; if
<S2SV_ModStart> && VAR_95 ) <S2SV_ModEnd> VAR_106 = METHOD_11 <S2SV_ModStart> , VAR_106 , VAR_104 , VAR_94 , VAR_95 ) ; else VAR_106 = METHOD_12 ( VAR_108 , VAR_106 , VAR_104 ) ; if ( VAR_106 == VAR_110 ) goto VAR_107 ; } if <S2SV_ModStart> < VAR_104 ) <S2SV_ModEnd> METHOD_14 ( (
<S2SV_ModStart> } TYPE_9 ; typedef struct { TYPE_14 VAR_37 ; TYPE_14 VAR_38 ; } VAR_39 ; static TYPE_15 VAR_40 ( TYPE_11 VAR_27 ) { METHOD_9 ( VAR_27 , VAR_41 ) ; METHOD_10 <S2SV_ModEnd> ( VAR_27 ) <S2SV_ModStart> VAR_27 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> if ( ( METHOD_17 <S2SV_ModEnd> ( VAR_100 ) <S2SV_ModStart> VAR_100 ) < VAR_100 -> VAR_104 +
<S2SV_ModStart> TYPE_1 ) { <S2SV_ModEnd> TYPE_4 ( "refs/heads/git_tilde1" <S2SV_ModStart> ".git/foobar" ) ; TYPE_4 ( "refs/heads/git_tilde1" , "git~1/foobar" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> . VAR_292 = ! ! <S2SV_ModStart> -> VAR_262 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> . VAR_292 = ! ! <S2SV_ModStart> -> VAR_262 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> & VAR_25 ) return 0 ; <S2SV_ModEnd> return VAR_60 ; <S2SV_ModStart> VAR_57 ) ; <S2SV_ModEnd> } METHOD_10 (
<S2SV_ModStart> ) { return VAR_27 <S2SV_ModEnd> ; } while
<S2SV_ModStart> const VAR_38 [ VAR_29 <S2SV_ModEnd> ] = { <S2SV_ModStart> VAR_25 -> VAR_15 <S2SV_ModEnd> } ; const <S2SV_ModStart> TYPE_8 VAR_40 [ VAR_29 <S2SV_ModEnd> ] = { <S2SV_ModStart> VAR_25 -> VAR_24 <S2SV_ModEnd> } ; for
<S2SV_ModStart> , VAR_120 ; * VAR_136 = VAR_139 ; VAR_142 = METHOD_9 ( 1 , sizeof ( <S2SV_ModEnd> * VAR_142 ) <S2SV_ModStart> goto VAR_140 ; VAR_143 = METHOD_14 <S2SV_ModEnd> ( METHOD_3 ( <S2SV_ModStart> VAR_129 ) , & <S2SV_ModEnd> VAR_142 -> VAR_34 <S2SV_ModStart> VAR_142 -> VAR_34 ) ; if ( VAR_143 ) goto VAR_140 ; VAR_143 = METHOD_14 <S2SV_ModEnd> ( METHOD_6 ( <S2SV_ModStart> VAR_129 ) , & <S2SV_ModEnd> VAR_142 -> VAR_47 <S2SV_ModStart> VAR_142 -> VAR_47 ) ; if ( VAR_143 ) goto VAR_140 ; <S2SV_ModEnd> VAR_143 = METHOD_8
<S2SV_ModStart> ( ! VAR_208 || VAR_210 != VAR_219 . VAR_210
<S2SV_ModStart> ( VAR_118 ) <S2SV_ModEnd> ; for (
<S2SV_ModStart> < 0 ) goto VAR_45 ; <S2SV_ModEnd> goto VAR_39 ;
<S2SV_ModStart> ) ) ; METHOD_5 <S2SV_ModEnd> ( VAR_54 ,
<S2SV_ModStart> VAR_72 ++ ; VAR_104 = METHOD_22 ( VAR_77 , VAR_110 ) ; if ( VAR_104 < 0 ) goto VAR_105 <S2SV_ModEnd> ; VAR_83 =
<S2SV_ModStart> ; TYPE_21 VAR_88 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_91 -> VAR_85 <S2SV_ModStart> VAR_86 ] . VAR_44 = VAR_89 ; VAR_91 -> VAR_85 [ VAR_86 ] . VAR_49 = VAR_82 ; for ( VAR_88 = VAR_89 ; VAR_88 <= VAR_82 ; VAR_88 ++ ) { VAR_90 += ( VAR_91 -> VAR_85 [ VAR_86 ] .
<S2SV_ModStart> METHOD_1 ( VAR_4 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> METHOD_6 ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! METHOD_8 ( VAR_7 , ".cfg" ) ) { METHOD_6 ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> * VAR_83 ; TYPE_6 <S2SV_ModEnd> VAR_53 = METHOD_1
<S2SV_ModStart> -> VAR_44 += 1LL <S2SV_ModEnd> << VAR_45 ;
<S2SV_ModStart> VAR_18 ; } VAR_38 -> VAR_49 = VAR_44 -> VAR_49 ;
<S2SV_ModStart> METHOD_0 ( const TYPE_4 * VAR_43 , const TYPE_5 * VAR_20 , <S2SV_ModEnd> TYPE_8 * * <S2SV_ModStart> * VAR_22 , TYPE_15 * VAR_87 ) { <S2SV_ModEnd> const struct STRUCT_OR_UNION_0 <S2SV_ModStart> const VAR_84 = VAR_20 -> VAR_84 <S2SV_ModEnd> ; const TYPE_8 <S2SV_ModStart> = VAR_20 -> VAR_85 <S2SV_ModEnd> ; const TYPE_9 <S2SV_ModStart> ; METHOD_2 ( VAR_43 , VAR_20 <S2SV_ModEnd> , VAR_91 -> <S2SV_ModStart> ) METHOD_3 ( VAR_43 , VAR_20 <S2SV_ModEnd> , VAR_87 )
<S2SV_ModStart> = METHOD_11 ( VAR_38 <S2SV_ModEnd> ) ; VAR_33
<S2SV_ModStart> , VAR_44 -> VAR_47 . VAR_48 <S2SV_ModEnd> ) ; VAR_41 <S2SV_ModStart> = VAR_44 -> VAR_47 . VAR_48 <S2SV_ModEnd> / 512 ; <S2SV_ModStart> , VAR_44 -> VAR_47 . VAR_48 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> if ( VAR_85 >= <S2SV_ModEnd> VAR_108 ) {
<S2SV_ModStart> ) break ; if ( VAR_163 > VAR_160 ) VAR_163 = VAR_160 ;
<S2SV_ModStart> VAR_73 ; } } if ( VAR_70 < 0 ) { VAR_76 = - VAR_77 ; goto VAR_73 ;
<S2SV_ModStart> * VAR_15 ) || ! METHOD_8 ( * VAR_15 ) ) <S2SV_ModEnd> return ( - <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> VAR_16 = METHOD_11
<S2SV_ModStart> STRUCT_OR_UNION_5 ) ; <S2SV_ModEnd> VAR_7 -> VAR_6
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_8 * VAR_26 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> VAR_20 ) { TYPE_9 <S2SV_ModEnd> VAR_11 = sizeof <S2SV_ModStart> * VAR_25 ; TYPE_1 * VAR_13 = VAR_26 -> VAR_13 ; if ( VAR_23 -> VAR_17 + 3 >= VAR_13 -> VAR_27 [ VAR_28 ] ) { METHOD_3 ( VAR_26 , "too<S2SV_blank>many<S2SV_blank>columns<S2SV_blank>on<S2SV_blank>%s" , VAR_23 -> VAR_29 ) ; }
<S2SV_ModStart> ; } } VAR_41 -> append_char ( VAR_41 , 0 ) ; strncpy <S2SV_ModEnd> ( VAR_40 ,
<S2SV_ModStart> VAR_139 ) ; VAR_139 = VAR_143 ; <S2SV_ModStart> ; VAR_138 : if ( VAR_139 != VAR_143 )
<S2SV_ModStart> = 0 ; ( VAR_70 + 3 ) <S2SV_ModEnd> < VAR_68 -> <S2SV_ModStart> = 0 ; ( VAR_70 + 7 ) <S2SV_ModEnd> < VAR_68 ->
<S2SV_ModStart> case VAR_59 : if ( VAR_169 == 0 ) break ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> VAR_157 . VAR_153
<S2SV_ModStart> } if ( VAR_49 -> <S2SV_ModStart> ) ( * ( VAR_49 -> VAR_174 ) ) <S2SV_ModEnd> ( VAR_175 ,
<S2SV_ModStart> -> VAR_211 ; if ( VAR_31 >= VAR_147 ) return 0 ;
<S2SV_ModStart> TYPE_0 METHOD_0 ( struct STRUCT_OR_UNION_1 * VAR_35 , <S2SV_ModStart> VAR_28 ) { <S2SV_ModEnd> enum VAR_4 VAR_30 <S2SV_ModStart> VAR_33 , VAR_34 <S2SV_ModEnd> ) ; if <S2SV_ModStart> return ; } METHOD_2 ( VAR_28 ) ;
<S2SV_ModStart> ; if ( METHOD_4 <S2SV_ModEnd> ( STRUCT_OR_UNION_8 )
<S2SV_ModStart> ) continue ; if ( VAR_258 -> VAR_255 . VAR_267 -> VAR_268 - VAR_258 -> VAR_255 . VAR_256 > VAR_269 ) { METHOD_52 ( VAR_258 -> VAR_140 , "Impossible<S2SV_blank>number<S2SV_blank>of<S2SV_blank>requests.<S2SV_blank>" "req_prod<S2SV_blank>%d,<S2SV_blank>req_cons<S2SV_blank>%d,<S2SV_blank>size<S2SV_blank>%ld\\n" , VAR_258 -> VAR_255 . VAR_267 -> VAR_268 , VAR_258 -> VAR_255 . VAR_256 , VAR_269 ) ; METHOD_53 ( VAR_258 ) ; continue ; } <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> } VAR_223 = <S2SV_ModStart> 0 ) ) continue ; <S2SV_ModEnd> VAR_257 += VAR_223 <S2SV_ModStart> ) ) { METHOD_52 <S2SV_ModEnd> ( VAR_258 -> <S2SV_ModStart> VAR_226 ) ; METHOD_53 ( VAR_258 <S2SV_ModEnd> ) ; continue <S2SV_ModStart> VAR_253 ) ; <S2SV_ModEnd> continue ; }
<S2SV_ModStart> STRUCT_OR_UNION_2 * ) <S2SV_ModEnd> VAR_4 -> VAR_3 <S2SV_ModStart> VAR_4 -> VAR_3 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_5
<S2SV_ModStart> VAR_17 ) ; if ( <S2SV_ModStart> ( VAR_17 ) != 0 ) return
<S2SV_ModStart> ) VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> "MemoryAllocationFailed" ) ; } <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> VAR_604 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> ) VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ; <S2SV_ModStart> "MemoryAllocationFailed" ) ; } <S2SV_ModStart> VAR_589 ) { VAR_601 = ( unsigned TYPE_67 * ) METHOD_123 ( VAR_601 ) ;
<S2SV_ModStart> VAR_365 < 0 <S2SV_ModEnd> ) { METHOD_63 <S2SV_ModStart> 1 ; } if ( VAR_105 . VAR_106 ) { METHOD_63 ( VAR_367 , "Received<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>untrusted<S2SV_blank>pid:%u" , VAR_105 . VAR_106 ) ; continue ; }
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_144 , VAR_22
<S2SV_ModStart> VAR_60 == VAR_25 && VAR_80 -> VAR_76 == VAR_25
<S2SV_ModStart> VAR_118 + VAR_119 ) { METHOD_25 ( VAR_129 ) ; METHOD_23 ( VAR_124 , "corrupt<S2SV_blank>patch<S2SV_blank>(overflow)" ) ; return VAR_125 ; } METHOD_21 ( VAR_129 + VAR_115 , VAR_117 , VAR_104 ) ; VAR_117 += VAR_104 ; for ( VAR_100 = 0 ; VAR_100 < VAR_104 ; VAR_100 ++ ) if ( ( VAR_113 + VAR_100 >= 0 ) && ( VAR_113 + VAR_100 < VAR_94 ) ) VAR_129 [ VAR_115 + VAR_100 ] += VAR_98 [ VAR_113 + VAR_100 ] ; VAR_115 += VAR_104 ; VAR_113 += VAR_104 ; if ( VAR_115 + VAR_112 > VAR_128 <S2SV_ModStart> VAR_125 ; } <S2SV_ModEnd> METHOD_21 ( VAR_129
<S2SV_ModStart> , VAR_174 , VAR_176 , VAR_199 , VAR_93 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> STRUCT_OR_UNION_22 VAR_189 ; METHOD_10 ( & VAR_189 , 0 , sizeof ( VAR_189 ) ) ;
<S2SV_ModStart> , VAR_52 , METHOD_10 ( <S2SV_ModStart> VAR_55 -> VAR_54 ) , <S2SV_ModEnd> VAR_55 -> VAR_56
<S2SV_ModStart> ; TYPE_5 VAR_37 ; if ( METHOD_5 ( ! METHOD_4 ( VAR_4 ) ) ) return - VAR_38
<S2SV_ModStart> , * VAR_53 , * VAR_58 = VAR_41 <S2SV_ModStart> if ( ! METHOD_6 ( VAR_50 -> VAR_38 , VAR_53 , VAR_40 , & VAR_58 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { if ( VAR_25 && strcmp ( VAR_58 , VAR_25 ) == 0 ) VAR_57 = - EEXIST ; else VAR_57 = - ENOENT <S2SV_ModEnd> ; goto VAR_55 <S2SV_ModStart> if ( ! METHOD_5 ( VAR_50 , VAR_53 , VAR_40 , VAR_41 , VAR_33 ) ) { VAR_57 = - VAR_43 ; goto VAR_55 ; } if ( ! <S2SV_ModStart> VAR_56 ) ; METHOD_9 ( VAR_58 ) ;
<S2SV_ModStart> ) ) { METHOD_8 ( VAR_96 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> 0 ) ; if ( METHOD_6 ( VAR_112 -> VAR_113 ) ) { VAR_116 = VAR_117 ; goto VAR_111 ; }
<S2SV_ModStart> ; VAR_346 = METHOD_87 <S2SV_ModEnd> ( VAR_341 *
<S2SV_ModStart> 0 ) { <S2SV_ModEnd> METHOD_26 ( VAR_75
<S2SV_ModStart> , VAR_47 , VAR_53 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_94 = METHOD_21 ( ) ) ) { goto VAR_92 ; } <S2SV_ModEnd> if ( METHOD_3 <S2SV_ModStart> 10 , ( "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>" "type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%" PRIuFAST32 "\\n" <S2SV_ModEnd> , \'"\' , <S2SV_ModStart> 1 ) { METHOD_5 ( 10 , ( "big<S2SV_blank>length\\n" ) ) ;
<S2SV_ModStart> * VAR_26 , TYPE_6 <S2SV_ModEnd> VAR_28 ) { <S2SV_ModStart> VAR_28 ) { TYPE_6 <S2SV_ModEnd> VAR_24 ; METHOD_1
<S2SV_ModStart> ; TYPE_7 VAR_82 = 0 <S2SV_ModStart> goto VAR_143 ; VAR_143 = - VAR_144 ; if ( METHOD_2 ( VAR_94 > VAR_145 ) ) goto VAR_143 ; <S2SV_ModStart> VAR_118 ) { if ( VAR_94 > VAR_146 ) { VAR_82 = METHOD_22 ( VAR_97 , VAR_94 - VAR_146 ) ; if ( VAR_82 < VAR_109 ) VAR_82 = 0 ; else VAR_82 -= VAR_109 ; } if ( VAR_82 < VAR_112 . VAR_84 )
<S2SV_ModStart> ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> while ( VAR_34 <S2SV_ModEnd> <= VAR_13 ) <S2SV_ModStart> VAR_13 ) { struct STRUCT_OR_UNION_4 * VAR_31 ; <S2SV_ModStart> VAR_34 ; } if ( VAR_34 + sizeof ( struct STRUCT_OR_UNION_4 ) > VAR_13 ) return - VAR_35 ; VAR_31 = ( struct STRUCT_OR_UNION_4 * ) ( METHOD_7 ( VAR_32 ) + VAR_34 ) ; <S2SV_ModStart> -> VAR_30 ; } return - VAR_35 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> 0 ) { METHOD_6 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> 1 ) ; METHOD_7 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> 4 ) ; METHOD_6 <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> } else { METHOD_6 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> * VAR_333 =
<S2SV_ModStart> 0 ; } VAR_192 . VAR_205 = 0 ;
<S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_111 -> VAR_112
<S2SV_ModStart> VAR_4 , const TYPE_5 <S2SV_ModEnd> VAR_5 ) {
<S2SV_ModStart> VAR_50 ) { TYPE_10 * VAR_84 = ( TYPE_10 * ) VAR_50 -> VAR_14 ; TYPE_11 VAR_55 = VAR_85 ; union STRUCT_OR_UNION_6 VAR_86 ; <S2SV_ModStart> TYPE_4 VAR_43 ; <S2SV_ModEnd> VAR_71 = METHOD_7 <S2SV_ModStart> goto VAR_73 ; METHOD_10 ( VAR_86 , VAR_84 , VAR_87 . VAR_88 ) { if ( VAR_86 . VAR_34 -> VAR_89 == VAR_90 || VAR_86 . VAR_34 -> VAR_89 == VAR_91 ) continue ; <S2SV_ModEnd> VAR_62 = METHOD_5 <S2SV_ModStart> , VAR_50 , VAR_86 . VAR_84 ) ; if ( VAR_62 != VAR_52 <S2SV_ModEnd> ) VAR_55 = <S2SV_ModStart> ) VAR_55 = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_83 , VAR_86 . VAR_84 <S2SV_ModEnd> -> VAR_58 , <S2SV_ModStart> -> VAR_58 , VAR_62 , VAR_86 . VAR_84 ) ; if ( VAR_62 == VAR_61 <S2SV_ModEnd> ) goto VAR_73 <S2SV_ModStart> goto VAR_73 ; <S2SV_ModEnd> } VAR_73 :
<S2SV_ModStart> 101 , ( "jas_realloc(%x,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , VAR_8 ,
<S2SV_ModStart> VAR_107 ; } <S2SV_ModEnd> VAR_45 = METHOD_5
<S2SV_ModStart> STRUCT_OR_UNION_5 STRUCT_OR_UNION_5 ; return <S2SV_ModStart> , 0 ) || <S2SV_ModEnd> METHOD_2 ( VAR_3
<S2SV_ModStart> VAR_45 ) , VAR_80 , <S2SV_ModStart> VAR_64 . VAR_48 , VAR_81 / 2 <S2SV_ModStart> VAR_58 ) , VAR_80 , <S2SV_ModStart> VAR_64 . VAR_58 , VAR_82 / 2
<S2SV_ModStart> -> VAR_78 ; VAR_104 -> VAR_78 = VAR_88 ;
<S2SV_ModStart> return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_110 = ( TYPE_17 * ) VAR_109 ; TYPE_7 VAR_116 = - VAR_86 ; bool VAR_117 ; TYPE_9 VAR_119 = 0 ; TYPE_17 TYPE_18 * VAR_96 = VAR_68 ; TYPE_17 * * VAR_118 = VAR_68 ; if ( METHOD_13 ( VAR_111 ) != VAR_21 ) { if ( METHOD_15 ( VAR_111 ) <= sizeof ( VAR_31 ) ) { VAR_110 = VAR_31 ; } else { VAR_115 = METHOD_9 ( METHOD_15 ( VAR_111 ) , VAR_65 ) ; if ( VAR_68 == VAR_115 ) return - VAR_67 ; VAR_110 = VAR_115 ; } VAR_116 = - VAR_113 ; if ( METHOD_13 ( VAR_111 ) & VAR_107 ) { unsigned TYPE_7 n = cmd_input_size ( VAR_111 ) ; if ( METHOD_10 ( VAR_110 , ( TYPE_17 TYPE_18 * ) VAR_109 , n ) ) goto VAR_114 ; if ( n < METHOD_15 ( VAR_111 ) ) memset ( ( u8 * ) VAR_110 + n , 0 , METHOD_15 ( VAR_111 ) - n ) ; } else { memset ( VAR_110 , 0 , METHOD_15 ( VAR_111 ) ) ; } } VAR_116 = check_array_args ( VAR_111 , VAR_110 , & VAR_119 , & VAR_96 , & VAR_118 ) ; if ( VAR_116 < 0 ) goto VAR_114 ; VAR_117 = VAR_116 ; if ( VAR_117 ) { VAR_115 = METHOD_9 ( VAR_119 , VAR_65 ) ; VAR_116 = - VAR_67 ; if ( VAR_68 == VAR_115 ) goto VAR_120 ; VAR_116 = - VAR_113 ; if ( METHOD_10 ( VAR_115 , VAR_96 , VAR_119 ) ) goto VAR_120 ; * VAR_118 = VAR_115 ; } VAR_116 = METHOD_11 ( STRUCT_OR_UNION_4 , VAR_111 , VAR_110 ) ; if ( VAR_116 == - VAR_84 ) <S2SV_ModEnd> VAR_116 = - <S2SV_ModStart> - VAR_86 ; if ( VAR_117 ) { * VAR_118 = VAR_96 ; if ( METHOD_14 ( VAR_96 , VAR_115 , VAR_119 ) ) VAR_116 = - VAR_113 ; goto VAR_120 ; } if ( VAR_116 < 0 ) goto VAR_114 ; VAR_120 : <S2SV_ModEnd> switch ( METHOD_13 <S2SV_ModStart> ) ) { <S2SV_ModEnd> case VAR_108 : <S2SV_ModStart> VAR_108 : case <S2SV_ModEnd> ( VAR_107 | <S2SV_ModStart> : if ( <S2SV_ModEnd> METHOD_14 ( (
<S2SV_ModStart> TYPE_3 VAR_12 , const <S2SV_ModStart> VAR_11 ) { TYPE_4 * VAR_13 ; TYPE_0 VAR_14 ; VAR_13 = METHOD_3 ( VAR_11 , VAR_12 , VAR_15 ) ; if ( ! VAR_13 ) return - VAR_16 ; VAR_14 = <S2SV_ModEnd> METHOD_1 ( VAR_6 <S2SV_ModStart> , 0 , VAR_13 <S2SV_ModEnd> , VAR_12 , <S2SV_ModStart> 500 ) ; METHOD_4 ( VAR_13 ) ; return VAR_14 ;
<S2SV_ModStart> VAR_175 ; } if ( VAR_169 -> VAR_150 [ 0 ] . VAR_152 . VAR_52 < 1 ) { METHOD_30 ( & VAR_169 -> VAR_147 , "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints\\n" ) ; VAR_181 = - VAR_182 ; goto VAR_173 ; }
<S2SV_ModStart> ) { case VAR_36 : { VAR_33 = METHOD_7 ( VAR_35 -> VAR_33 ) ; METHOD_13 ( VAR_35 -> VAR_33 , VAR_37 , VAR_32 , "yes" ) ; METHOD_14 ( VAR_33 , VAR_35 -> VAR_29 , VAR_30 , VAR_32 , VAR_32 ) ; METHOD_15 ( VAR_35 -> VAR_33 ) ; <S2SV_ModEnd> VAR_17 = METHOD_1 <S2SV_ModStart> VAR_22 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_33
<S2SV_ModStart> ; if ( STRUCT_OR_UNION_15 -> VAR_68 > 0 &&
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_35 -> VAR_7 <S2SV_ModStart> VAR_35 . VAR_7 || <S2SV_ModEnd> VAR_35 -> VAR_12 <S2SV_ModStart> . VAR_12 ) { if <S2SV_ModEnd> ( VAR_35 -> <S2SV_ModStart> != VAR_17 ) <S2SV_ModEnd> METHOD_2 ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" <S2SV_ModStart> "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) ; if ( ( VAR_41 -> VAR_40 -> VAR_44 && ( TYPE_4 ) VAR_35 -> VAR_7 > VAR_41 -> VAR_40 -> VAR_44 ) || ( VAR_41 -> VAR_40 -> VAR_45 && ( TYPE_4 ) VAR_35 -> VAR_12 > VAR_41 -> VAR_40 -> VAR_45 ) ) METHOD_2 ( "Cannot<S2SV_blank>increase<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>their<S2SV_blank>initial<S2SV_blank>values" ) ; }
<S2SV_ModStart> == '<S2SV_blank>' ) { VAR_248 ++ ; } <S2SV_ModEnd> VAR_238 = METHOD_56 <S2SV_ModStart> VAR_233 ) ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ) ) { <S2SV_ModStart> "Unknown<S2SV_blank>filesystem<S2SV_blank>type\\n" ) ; } <S2SV_ModStart> VAR_63 ) ) { <S2SV_ModStart> VAR_248 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_12 ) ; struct STRUCT_OR_UNION_13 * VAR_45 = METHOD_10 ( STRUCT_OR_UNION_12 ) ; <S2SV_ModStart> ; if ( METHOD_11 ( VAR_45 <S2SV_ModEnd> , VAR_35 ) <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( VAR_45 <S2SV_ModEnd> , VAR_35 )
<S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_17 ; if ( VAR_15 -> VAR_16 ) return 0
<S2SV_ModStart> VAR_30 ) ; VAR_80 = METHOD_6 ( VAR_59 , VAR_30 ) ; <S2SV_ModStart> METHOD_5 ( VAR_59 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> . VAR_11 = VAR_43 <S2SV_ModEnd> , . VAR_16
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> METHOD_1 ( VAR_4 <S2SV_ModStart> & VAR_4 -> VAR_6 .
<S2SV_ModStart> return VAR_138 ; VAR_138 = METHOD_4 ( VAR_78 , <S2SV_ModEnd> VAR_171 , VAR_31 <S2SV_ModStart> , VAR_31 ) ; if ( VAR_138 != VAR_183 ) return VAR_138
<S2SV_ModStart> TYPE_3 VAR_38 ; struct STRUCT_OR_UNION_1 VAR_44 , VAR_45 ; const struct STRUCT_OR_UNION_2 * VAR_46 = VAR_43 -> VAR_46 ; TYPE_3 METHOD_7 = VAR_43 -> VAR_46 -> METHOD_7 ( VAR_43 ) ; VAR_42 = VAR_43 -> VAR_24 ; VAR_46 -> METHOD_8 ( VAR_43 , & VAR_33 , & VAR_44 , VAR_47 <S2SV_ModEnd> , VAR_19 ) <S2SV_ModStart> , VAR_19 ) <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> 2 ) ; VAR_38 = METHOD_9 <S2SV_ModEnd> ( VAR_43 , <S2SV_ModStart> VAR_18 , VAR_19 , METHOD_7 , VAR_48 , & VAR_45 ) ; if ( VAR_38 != VAR_37 <S2SV_ModEnd> ) return VAR_37 <S2SV_ModStart> return VAR_37 ; VAR_38 = METHOD_10 ( VAR_43 , VAR_43 -> VAR_40 . VAR_41 , VAR_45 . VAR_49 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; VAR_43 -> VAR_40 . VAR_41 = VAR_33 ; VAR_38 = METHOD_6 ( VAR_43 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; VAR_43 -> VAR_40 . VAR_41 = VAR_42 ; VAR_38 = METHOD_6 ( VAR_43 ) ; if ( VAR_38 != VAR_37 ) goto VAR_50 ; return VAR_38 ; VAR_50 : VAR_46 -> METHOD_11 ( VAR_43 , VAR_33 , & VAR_44 , 0 , VAR_19 ) ; return VAR_38 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_496 = METHOD_44 <S2SV_ModEnd> ( VAR_541 -> <S2SV_ModStart> -> VAR_498 = METHOD_44 <S2SV_ModEnd> ( VAR_541 ->
<S2SV_ModStart> * sizeof ( struct STRUCT_OR_UNION_4 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_16 -> VAR_8 != VAR_17 ) { METHOD_2 ( VAR_16 -> VAR_8 < 0 ) ; <S2SV_ModEnd> return - VAR_9 <S2SV_ModStart> - VAR_9 ; }
<S2SV_ModStart> * VAR_108 = ( TYPE_51 ) METHOD_22 <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_58 , <S2SV_ModEnd> VAR_83 -> VAR_52 <S2SV_ModStart> * VAR_116 = ( TYPE_51 ) opj_uint_min <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_58 , <S2SV_ModEnd> VAR_83 -> VAR_60 <S2SV_ModStart> * VAR_112 = ( TYPE_51 ) METHOD_22 <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_74 , <S2SV_ModEnd> VAR_83 -> VAR_68 <S2SV_ModStart> * VAR_120 = ( TYPE_51 ) opj_uint_min <S2SV_ModEnd> ( VAR_73 -> <S2SV_ModStart> VAR_73 -> VAR_74 , <S2SV_ModEnd> VAR_83 -> VAR_76
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_21 * METHOD_0 <S2SV_ModStart> * METHOD_0 ( <S2SV_ModEnd> TYPE_21 * VAR_90 <S2SV_ModStart> TYPE_21 * VAR_90 ) { TYPE_21 * VAR_103 , * VAR_100 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ( VAR_103 = METHOD_3 ( METHOD_8 ( VAR_90 ) + 1 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> while ( * <S2SV_ModStart> * VAR_90 == '/' || * VAR_90 == '\\\\' <S2SV_ModEnd> ) VAR_90 ++ <S2SV_ModStart> VAR_90 ++ ; METHOD_5 ( VAR_103 , ( * VAR_90 ) ? VAR_90 : "x" ) ; for ( VAR_100 = VAR_103 ; * VAR_100 ; VAR_100 ++ ) <S2SV_ModEnd> { if ( <S2SV_ModStart> { if ( VAR_100 [ 0 ] == '.' && VAR_100 [ 1 ] == '.' && ( VAR_100 [ 2 ] == '/' || VAR_100 [ 2 ] == '\\\\' <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { VAR_100 [ 0 ] = VAR_100 [ 1 ] = 'x' <S2SV_ModEnd> ; } } <S2SV_ModStart> ; } } } return VAR_103 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> goto VAR_102 ; VAR_98 -> VAR_104 = VAR_98 -> VAR_105 = VAR_98 -> VAR_106 = 0 ;
<S2SV_ModStart> VAR_181 -> VAR_132 <S2SV_ModEnd> ; VAR_184 =
<S2SV_ModStart> . METHOD_2 ( METHOD_3 ( VAR_28 ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_16 -> VAR_8 != VAR_17 ) { METHOD_2 ( VAR_16 -> VAR_8 < 0 ) ; <S2SV_ModEnd> return - VAR_9 <S2SV_ModStart> - VAR_9 ; }
<S2SV_ModStart> -> VAR_9 = METHOD_6 <S2SV_ModEnd> ( VAR_13 , <S2SV_ModStart> -> VAR_24 = METHOD_6 <S2SV_ModEnd> ( VAR_17 +
<S2SV_ModStart> * VAR_98 ; TYPE_33 <S2SV_ModEnd> VAR_116 , VAR_117 <S2SV_ModStart> VAR_117 , VAR_41 , VAR_125 , VAR_126 <S2SV_ModStart> , VAR_86 ; TYPE_33 VAR_52 <S2SV_ModEnd> ; VAR_86 = <S2SV_ModStart> VAR_116 = ( TYPE_33 <S2SV_ModEnd> ) TYPE_96 -> <S2SV_ModStart> VAR_117 = ( TYPE_33 <S2SV_ModEnd> ) TYPE_96 -> <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> TYPE_34 ) * <S2SV_ModEnd> VAR_41 ) ; <S2SV_ModStart> goto VAR_118 ; VAR_125 = TYPE_96 -> VAR_127 & 1U ; VAR_126 = VAR_116 - VAR_125 ; <S2SV_ModStart> VAR_52 ) { TYPE_33 VAR_83 ; if ( VAR_125 > 0U ) { METHOD_6 ( VAR_85 , VAR_86 , * VAR_93 , 0 , 0 , VAR_120 , VAR_122 , VAR_124 ) ; ++ VAR_93 ; ++ VAR_120 ; ++ VAR_122 ; ++ VAR_124 ; } <S2SV_ModStart> VAR_83 < ( VAR_126 <S2SV_ModEnd> & ~ ( <S2SV_ModStart> & ~ ( TYPE_33 <S2SV_ModEnd> ) 1U ) <S2SV_ModStart> ( VAR_83 < VAR_126 <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> = VAR_107 ; <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> . TYPE_69 = TYPE_96 -> TYPE_97 [ 2 ] . TYPE_69 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_69 ; <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> . TYPE_73 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . TYPE_73 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_73 ; TYPE_96 -> TYPE_97 [ 1 ] . TYPE_86 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . TYPE_86 = TYPE_96 -> TYPE_97 [ 0 ] . TYPE_86 ; TYPE_96 -> TYPE_97 [ 1 ] . TYPE_98 = <S2SV_ModEnd> TYPE_96 -> TYPE_97 <S2SV_ModStart> 2 ] . <S2SV_ModEnd> TYPE_98 = TYPE_96 <S2SV_ModStart> ; TYPE_96 -> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> ; return ; <S2SV_ModStart> ; VAR_118 : <S2SV_ModEnd> METHOD_14 ( VAR_120 <S2SV_ModStart> VAR_120 ) ; <S2SV_ModEnd> METHOD_14 ( VAR_122 <S2SV_ModStart> VAR_122 ) ; <S2SV_ModEnd> METHOD_14 ( VAR_124
<S2SV_ModStart> * VAR_23 , TYPE_2 VAR_25 <S2SV_ModEnd> ) { if <S2SV_ModStart> -> VAR_23 == VAR_25 <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( VAR_25 <S2SV_ModEnd> & VAR_11 ) <S2SV_ModStart> { if ( VAR_25 <S2SV_ModEnd> & VAR_11 ) <S2SV_ModStart> -> VAR_23 = VAR_25 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> return VAR_9 ; METHOD_12 ( STRUCT_OR_UNION_24 , VAR_50 , VAR_47 ) ;
<S2SV_ModStart> { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[256]<S2SV_blank>==<S2SV_blank>256<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 ) <S2SV_ModStart> ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , VAR_25 ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , VAR_25 )
<S2SV_ModStart> VAR_167 ) ; <S2SV_ModEnd> if ( METHOD_41
<S2SV_ModStart> VAR_8 ) { <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> - VAR_5 ; return <S2SV_ModEnd> METHOD_2 ( VAR_10 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ; } METHOD_7 <S2SV_ModEnd> ( VAR_18 . <S2SV_ModStart> VAR_18 . VAR_13 , VAR_18 . in_num , 0 <S2SV_ModEnd> , VAR_15 ,
<S2SV_ModStart> , VAR_33 , JAS_CAST ( unsigned , <S2SV_ModEnd> METHOD_3 ( VAR_30 <S2SV_ModStart> VAR_33 ] ) ) <S2SV_ModStart> , VAR_33 , JAS_CAST ( unsigned , <S2SV_ModEnd> METHOD_4 ( VAR_30 <S2SV_ModStart> ] ) ) )
<S2SV_ModStart> , VAR_64 -> VAR_66 , VAR_64 ->
<S2SV_ModStart> == 8 ) && VAR_174 -> VAR_143 != VAR_132
<S2SV_ModStart> VAR_130 - 1 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_12 ) { METHOD_8 ( & VAR_12 -> VAR_13 ) ; <S2SV_ModStart> METHOD_2 ( VAR_12 ) ; METHOD_9 ( & VAR_12 -> VAR_13
<S2SV_ModStart> VAR_43 ) ; if ( METHOD_11 ( VAR_17 , '@' ) ) { VAR_37 = "Node<S2SV_blank>name<S2SV_blank>contains<S2SV_blank>@" ; goto VAR_36 ; }
<S2SV_ModStart> VAR_15 ) ) { METHOD_14 ( VAR_59 ) ; <S2SV_ModStart> - VAR_16 ; }
<S2SV_ModStart> VAR_76 ) ; if ( ! VAR_90 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; } <S2SV_ModStart> VAR_79 ) ; if ( ! VAR_91 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; } <S2SV_ModStart> VAR_82 ) ; if ( ! VAR_92 ) { VAR_93 = - VAR_72 ; goto VAR_87 ; }
<S2SV_ModStart> TYPE_0 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_3 * <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return VAR_20 ;
<S2SV_ModStart> * VAR_96 , const <S2SV_ModStart> ( VAR_73 & <S2SV_ModEnd> VAR_27 ) && <S2SV_ModStart> ; VAR_98 = <S2SV_ModEnd> VAR_97 -> VAR_96 <S2SV_ModStart> ) ; } <S2SV_ModEnd> } return METHOD_4
<S2SV_ModStart> unsigned TYPE_4 VAR_28 ; VAR_23 -> VAR_24 = 0
<S2SV_ModStart> ; VAR_49 |= VAR_55 <S2SV_ModEnd> ; METHOD_12 (
<S2SV_ModStart> VAR_183 . VAR_166 . VAR_140 . VAR_140 <S2SV_ModStart> VAR_183 . VAR_166 . VAR_140 <S2SV_ModStart> . VAR_166 . VAR_140 . VAR_140 .
<S2SV_ModStart> VAR_42 ; } METHOD_13 <S2SV_ModEnd> ( VAR_40 + <S2SV_ModStart> VAR_40 + 2 <S2SV_ModEnd> ) ; METHOD_12
<S2SV_ModStart> 0 ; } if ( METHOD_9 ( METHOD_8 ( VAR_26 ) -> VAR_27 . VAR_28 ) ) METHOD_10 ( VAR_26 ) ; else
<S2SV_ModStart> VAR_1 ) { struct STRUCT_OR_UNION_0 * VAR_2 = VAR_1 ; METHOD_1 ( VAR_2 -> VAR_3 ) ; METHOD_2 ( VAR_2 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_59 ) { <S2SV_ModEnd> TYPE_2 VAR_51 ; <S2SV_ModStart> TYPE_2 VAR_51 ; bprm_fill_uid ( VAR_59 ) ; <S2SV_ModEnd> VAR_51 = METHOD_7
<S2SV_ModStart> = VAR_80 ; if ( METHOD_8 ( VAR_75 > 0 ) ) { VAR_85 = VAR_18 + 1 ; goto VAR_82 ; }
<S2SV_ModStart> { VAR_37 = VAR_34 -> VAR_9 [ <S2SV_ModEnd> VAR_40 + VAR_36 <S2SV_ModStart> VAR_40 + VAR_36 ] <S2SV_ModEnd> ; METHOD_5 (
<S2SV_ModStart> ( VAR_113 & <S2SV_ModEnd> VAR_38 ) && <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_155 ) break
<S2SV_ModStart> - VAR_16 ; <S2SV_ModEnd> VAR_82 = 0
<S2SV_ModStart> METHOD_1 ( VAR_22 ) ) return 0 ; if ( VAR_22 -> VAR_17 < sizeof ( struct STRUCT_OR_UNION_4
<S2SV_ModStart> , VAR_15 -> VAR_17 <S2SV_ModEnd> ) ; METHOD_5
<S2SV_ModStart> VAR_139 , VAR_136 ) ; break ; case VAR_133 : METHOD_32 ( VAR_145 , VAR_139 , VAR_136 <S2SV_ModStart> VAR_138 - VAR_139 <S2SV_ModEnd> , VAR_141 ,
<S2SV_ModStart> ; } } if ( VAR_71 > 0xFFFFFFFFU - 3 ) { TYPE_48 ( "readContigTilesIntoBuffer" , "Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size." ) ; METHOD_4 ( - 1 ) ; } <S2SV_ModStart> METHOD_5 ( VAR_71 + 3 <S2SV_ModStart> 0 ) return 0 ; VAR_232 [ VAR_71 ] = 0 ; VAR_232 [ VAR_71 + 1 ] = 0 ; VAR_232 [ VAR_71 + 2 ] =
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_3 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return VAR_81 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_65 <S2SV_ModEnd> ; unsigned TYPE_3 <S2SV_ModStart> - VAR_29 ; METHOD_9 ( ) ; VAR_65 = METHOD_2 ( VAR_67 ) ; if ( ! VAR_65 ) { VAR_45 = - VAR_29 ; goto VAR_70 ; } <S2SV_ModStart> -> VAR_68 ) { VAR_45 = <S2SV_ModEnd> - VAR_38 ; <S2SV_ModStart> - VAR_38 ; goto VAR_70 ; } <S2SV_ModStart> ( VAR_45 ) goto VAR_70 <S2SV_ModEnd> ; } if <S2SV_ModStart> VAR_68 ; } VAR_45 = VAR_69 ; VAR_70 : METHOD_10 ( ) ; return VAR_45 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( VAR_49 , "<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n" <S2SV_ModEnd> , & VAR_37
<S2SV_ModStart> ; if ( VAR_4 > 1 ) { if ( <S2SV_ModStart> <= 127 ) { <S2SV_ModStart> -> VAR_532 ; } else { <S2SV_ModEnd> VAR_531 -> VAR_357 <S2SV_ModStart> -> VAR_532 ; } } else { VAR_531 -> VAR_357 = VAR_322 ; }
<S2SV_ModStart> VAR_43 ; struct STRUCT_OR_UNION_6 * VAR_45 = VAR_43 -> VAR_44 . VAR_45 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_45 ) ) <S2SV_ModStart> ( VAR_41 ) <S2SV_ModEnd> VAR_45 -> VAR_40 <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_45 ) ;
<S2SV_ModStart> ; VAR_45 = METHOD_15 <S2SV_ModEnd> ( VAR_91 ,
<S2SV_ModStart> return - VAR_11 ; if ( VAR_51 == 0 ) return - VAR_63
<S2SV_ModStart> ( VAR_23 -> VAR_19 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> TYPE_5 VAR_6 , TYPE_6 <S2SV_ModEnd> VAR_10 ) {
<S2SV_ModStart> , VAR_261 + VAR_263 + 3 , <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> - 3 ) ; VAR_263 += <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> VAR_265 - 3 ; VAR_265 -= <S2SV_ModEnd> VAR_257 . VAR_265 <S2SV_ModStart> - 3 ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> } else { if ( ! <S2SV_ModStart> , VAR_101 ) ) { if ( VAR_118 == 0 ) VAR_118 = - VAR_119 ; break ; } <S2SV_ModEnd> * VAR_109 =
<S2SV_ModStart> ( ) ; if ( ! VAR_16 ) { return VAR_19 ; }
<S2SV_ModStart> , VAR_94 ; unsigned TYPE_6 VAR_96 = 0 ; <S2SV_ModStart> ( TYPE_16 , ( unsigned TYPE_6 TYPE_19 * ) & VAR_96 <S2SV_ModEnd> , TYPE_18 , <S2SV_ModStart> ; VAR_94 |= METHOD_25 ( VAR_96 , TYPE_17 ) ; VAR_94 |=
<S2SV_ModStart> , "%r/proc/sys/net" , "%r/proc/tty" <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> , VAR_48 , "%r/proc/tty" <S2SV_ModEnd> , "%r/proc/sys/net" , <S2SV_ModStart> ; VAR_188 = METHOD_20 ( VAR_186 , VAR_187 , VAR_171 [ VAR_172 ] . VAR_169 , VAR_185 , VAR_171 [ VAR_172 ] . VAR_173 , VAR_225 -> VAR_226 . VAR_224 ? VAR_225 -> VAR_226 . METHOD_18 : VAR_124 <S2SV_ModEnd> ) ; VAR_190
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_5 ) { if ( ! VAR_8 || ! VAR_4 || ( VAR_5 == 0 ) ) return VAR_9 ; if ( ! <S2SV_ModStart> , VAR_5 ) ) return VAR_9 <S2SV_ModStart> VAR_7 ) { if ( ! <S2SV_ModStart> ( VAR_8 ) ) return VAR_9 ; } return VAR_10 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_4 <S2SV_ModEnd> VAR_3 , unsigned
<S2SV_ModStart> VAR_1 == VAR_2 || VAR_1 == VAR_4
<S2SV_ModStart> return ( ( ( <S2SV_ModStart> ) / 8 ) * METHOD_1 ( VAR_8 )
<S2SV_ModStart> -> VAR_116 = METHOD_17 ( <S2SV_ModStart> | VAR_109 ) ) <S2SV_ModStart> -> VAR_116 = METHOD_17 ( <S2SV_ModStart> | VAR_109 ) )
<S2SV_ModStart> VAR_13 ) ; if ( ! VAR_85 -> VAR_16 ) return - VAR_87 ; <S2SV_ModStart> VAR_32 ) ; if ( ! VAR_85 -> VAR_35 ) return - VAR_87 ;
<S2SV_ModStart> const TYPE_1 * VAR_27 = METHOD_8 ( METHOD_7 ( & <S2SV_ModEnd> VAR_23 -> VAR_11 <S2SV_ModStart> VAR_11 -> VAR_24 ) , VAR_28 ) ; const TYPE_1 * VAR_29 = VAR_23 -> VAR_26 <S2SV_ModStart> VAR_23 ) ; METHOD_9 ( "%s:<S2SV_blank>\'%s:%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n" <S2SV_ModEnd> , VAR_25 , <S2SV_ModStart> , VAR_25 , VAR_29 , VAR_27 ) ; kfree ( VAR_27 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_270 ) { if ( VAR_270 -> VAR_230 + VAR_274 -> VAR_235 -> VAR_164 > VAR_279 - 2 || VAR_270 -> VAR_244 + VAR_274 -> VAR_235 -> VAR_164 > VAR_279 - 2 ) { return - 1 ; } <S2SV_ModStart> VAR_222 * ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << ( VAR_270 <S2SV_ModStart> VAR_236 * ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << ( VAR_270 <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_203 ) <S2SV_ModStart> ) % ( METHOD_13 ( TYPE_13 , 1 ) <S2SV_ModEnd> << VAR_216 )
<S2SV_ModStart> VAR_43 ) { return VAR_63 <S2SV_ModEnd> ; } else
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_24 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_209 , TYPE_22 VAR_211 <S2SV_ModEnd> , unsigned TYPE_3 <S2SV_ModStart> VAR_210 ) { TYPE_25 VAR_45 ; TYPE_21 VAR_204 <S2SV_ModEnd> ; register TYPE_21 <S2SV_ModStart> ; register TYPE_21 * VAR_207 ; TYPE_22 VAR_198 ; VAR_207 = METHOD_41 ( VAR_209 , 0 , VAR_188 , VAR_209 -> VAR_197 , 1 , VAR_210 ) ; if ( VAR_207 == ( TYPE_21 * ) VAR_193 ) return ( MagickFalse ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ; switch ( VAR_211 <S2SV_ModEnd> ) { case <S2SV_ModStart> 1 : { <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> VAR_204 = ( <S2SV_ModEnd> ( * VAR_206 <S2SV_ModStart> 0x80 >> VAR_45 <S2SV_ModEnd> ) ? 0x01 <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> VAR_45 < ( TYPE_22 ) ( <S2SV_ModStart> VAR_204 = ( <S2SV_ModEnd> ( * VAR_206 <S2SV_ModStart> 0x80 >> VAR_45 <S2SV_ModEnd> ) ? 0x01 <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> ++ ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> 2 : { for ( VAR_198 = 0 ; VAR_198 < ( ( TYPE_22 ) <S2SV_ModEnd> VAR_209 -> VAR_197 <S2SV_ModStart> VAR_209 -> VAR_197 - 3 ) ; VAR_198 += 4 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 6 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 4 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 2 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; VAR_206 ++ ; } if ( ( VAR_209 -> VAR_197 % 4 ) != 0 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 6 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; if ( ( VAR_209 -> VAR_197 % 4 ) > 1 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 4 ) & 0x3 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; if ( ( VAR_209 -> VAR_197 % 4 ) > 2 ) { VAR_204 = METHOD_42 ( VAR_209 , ( * VAR_206 >> 2 ) & 0x3 , VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; } } VAR_206 ++ ; } break ; } case 4 : { <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> * VAR_206 >> 4 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; <S2SV_ModStart> ( * VAR_206 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; <S2SV_ModStart> ( VAR_209 ) <S2SV_ModEnd> ; } if <S2SV_ModStart> 4 ) & 0x0f <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; <S2SV_ModStart> VAR_209 ) ; } <S2SV_ModEnd> break ; } <S2SV_ModStart> 8 : { for ( VAR_198 = 0 ; VAR_198 < ( TYPE_22 ) <S2SV_ModEnd> VAR_209 -> VAR_197 <S2SV_ModStart> VAR_209 -> VAR_197 ; VAR_198 ++ ) { VAR_204 = METHOD_42 ( VAR_209 , * VAR_206 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> VAR_210 ) ; METHOD_43 ( VAR_209 , VAR_204 , VAR_207 ) ; if ( VAR_204 < VAR_209 -> VAR_212 ) METHOD_46 ( VAR_209 , VAR_209 -> VAR_213 + ( TYPE_22 ) VAR_204 , VAR_207 ) ; VAR_206 ++ ; VAR_207 += METHOD_44 ( VAR_209 ) ; } } break ; case 24 : <S2SV_ModEnd> for ( VAR_198 <S2SV_ModStart> ++ ) { SetPixelRed ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; SetPixelGreen ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; SetPixelBlue ( VAR_209 , ScaleCharToQuantum ( * VAR_206 ++ ) , VAR_207 ) ; VAR_207 += METHOD_44 ( VAR_209 ) ; } break ; } if ( ! METHOD_45 ( VAR_209 <S2SV_ModEnd> , VAR_210 ) <S2SV_ModStart> , VAR_210 ) ) return ( MagickFalse ) ; return ( MagickTrue ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_2 * VAR_19 , const TYPE_4 VAR_23 ) { TYPE_4 VAR_11 ; TYPE_4 <S2SV_ModEnd> VAR_22 = VAR_4 <S2SV_ModStart> = VAR_4 ; if ( VAR_23 < 1 ) { METHOD_5 ( ( VAR_18 , "\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data" ) ) ; return VAR_22 ; } <S2SV_ModStart> case VAR_12 : if ( VAR_23 != 1 + 4 ) { METHOD_5 ( ( VAR_18 , "(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , VAR_23 - 1 ) ) ; VAR_22 = VAR_21 ; break ; } <S2SV_ModStart> case VAR_16 : if ( VAR_23 != 1 + 16 ) { METHOD_5 ( ( VAR_18 , "(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , VAR_23 - 1 ) ) ; VAR_22 = VAR_21 ; break ; }
<S2SV_ModStart> ; TYPE_1 VAR_45 , VAR_76 , VAR_77 <S2SV_ModStart> = VAR_35 ; VAR_76 = METHOD_10 ( VAR_73 , VAR_74 ) ; VAR_77 = METHOD_10 ( VAR_73 , VAR_70 ) ; <S2SV_ModStart> = 1 ; if ( METHOD_11 ( VAR_76 ) || METHOD_11 ( VAR_77 ) ) return METHOD_5 ( VAR_73 , 0 ) ; <S2SV_ModStart> -> VAR_68 = VAR_77 <S2SV_ModEnd> ; * METHOD_9 <S2SV_ModStart> VAR_72 ) = VAR_76 <S2SV_ModEnd> ; return VAR_75
<S2SV_ModStart> VAR_4 ) ; TYPE_0 VAR_8 ; METHOD_3 ( VAR_4 ) ; VAR_8 = <S2SV_ModEnd> METHOD_2 ( VAR_5 <S2SV_ModStart> VAR_7 ) ; METHOD_4 ( VAR_4 ) ; return VAR_8 ;
<S2SV_ModStart> TYPE_6 * VAR_50 ; VAR_50 = METHOD_14 ( VAR_49 , VAR_38 ) ; if ( ! VAR_50 ) { METHOD_12 ( VAR_42 , VAR_19 ) ; goto VAR_46 ; } for ( ; ; ) { VAR_36 = METHOD_7 ( VAR_28 , VAR_34 , sizeof ( VAR_34 ) ) ; if ( VAR_36 <= 0 ) { if ( METHOD_8 ( VAR_28 ) == VAR_27 ) { if ( ! METHOD_9 ( VAR_28 ) ) goto VAR_46 ; } if ( VAR_36 < 0 ) goto VAR_46 ; break ; } if ( VAR_50 && ( METHOD_10 ( VAR_50 , VAR_34 , VAR_36 ) != VAR_36 ) ) goto VAR_46 ; } <S2SV_ModEnd> if ( VAR_38 <S2SV_ModStart> VAR_39 ) { <S2SV_ModEnd> if ( !
<S2SV_ModStart> = VAR_10 ; if ( VAR_14 == 0 ) VAR_12 . VAR_18 -> VAR_19 |= VAR_20 ;
<S2SV_ModStart> * VAR_24 , TYPE_10 <S2SV_ModEnd> VAR_25 , const <S2SV_ModStart> VAR_25 , const TYPE_11 <S2SV_ModEnd> * VAR_26 , <S2SV_ModStart> ) { const TYPE_11 <S2SV_ModEnd> VAR_14 = VAR_26 <S2SV_ModStart> ) ; const TYPE_12 <S2SV_ModEnd> VAR_27 = VAR_25
<S2SV_ModStart> = 0 ; TYPE_8 VAR_57 = 0 ; <S2SV_ModStart> case VAR_38 : VAR_57 = sizeof ( <S2SV_ModEnd> ( ( struct <S2SV_ModStart> ) -> VAR_41 ) ; if ( VAR_6 <= VAR_57 ) { VAR_57 = VAR_6 - 1 ; } METHOD_8 ( VAR_56 , ( ( struct STRUCT_OR_UNION_5 * ) VAR_40 ) -> VAR_41 , VAR_57 ) ; VAR_56 [ VAR_57 <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> TYPE_1 METHOD_0 ( TYPE_6 <S2SV_ModEnd> * VAR_15 ,
<S2SV_ModStart> VAR_48 , VAR_69 + VAR_117 <S2SV_ModEnd> , VAR_119 ,
<S2SV_ModStart> VAR_31 ) ; if ( VAR_64 == VAR_123 ) { METHOD_13 ( VAR_120 , "stats<S2SV_blank>%s<S2SV_blank>unrecognized" , VAR_31 ) ; continue ; } <S2SV_ModStart> VAR_124 ) ; if ( VAR_64 == VAR_123 ) { METHOD_13 ( VAR_120 , "filegen<S2SV_blank>category<S2SV_blank>\'%s\'<S2SV_blank>unrecognized" , VAR_124 ) ; continue ; }
<S2SV_ModStart> , VAR_28 , VAR_37 <S2SV_ModEnd> ) ; METHOD_10
<S2SV_ModStart> METHOD_0 ( const TYPE_20 <S2SV_ModEnd> * VAR_49 , <S2SV_ModStart> * VAR_49 , TYPE_20 <S2SV_ModEnd> * VAR_464 ) <S2SV_ModStart> VAR_464 ) { TYPE_21 <S2SV_ModEnd> VAR_345 , VAR_348 <S2SV_ModStart> VAR_425 , VAR_369 ; TYPE_21 <S2SV_ModEnd> VAR_372 , VAR_427 <S2SV_ModStart> , VAR_433 ; TYPE_21 <S2SV_ModEnd> VAR_435 = VAR_49 <S2SV_ModStart> 15 ] ; TYPE_21 <S2SV_ModEnd> VAR_465 = VAR_49 <S2SV_ModStart> 0 ] ; TYPE_21 <S2SV_ModEnd> VAR_449 = VAR_49 <S2SV_ModStart> 13 ] ; TYPE_21 <S2SV_ModEnd> VAR_451 = VAR_49 <S2SV_ModStart> 2 ] ; TYPE_21 <S2SV_ModEnd> VAR_441 = VAR_49 <S2SV_ModStart> 11 ] ; TYPE_21 <S2SV_ModEnd> VAR_459 = VAR_49 <S2SV_ModStart> 4 ] ; TYPE_21 <S2SV_ModEnd> VAR_443 = VAR_49 <S2SV_ModStart> 9 ] ; TYPE_21 <S2SV_ModEnd> VAR_457 = VAR_49 <S2SV_ModStart> 6 ] ; TYPE_21 <S2SV_ModEnd> VAR_437 = VAR_49 <S2SV_ModStart> 7 ] ; TYPE_21 <S2SV_ModEnd> VAR_463 = VAR_49 <S2SV_ModStart> 8 ] ; TYPE_21 <S2SV_ModEnd> VAR_447 = VAR_49 <S2SV_ModStart> 5 ] ; TYPE_21 <S2SV_ModEnd> VAR_453 = VAR_49 <S2SV_ModStart> 10 ] ; TYPE_21 <S2SV_ModEnd> VAR_439 = VAR_49 <S2SV_ModStart> 3 ] ; TYPE_21 <S2SV_ModEnd> VAR_461 = VAR_49 <S2SV_ModStart> 12 ] ; TYPE_21 <S2SV_ModEnd> VAR_445 = VAR_49 <S2SV_ModStart> 1 ] ; TYPE_21 <S2SV_ModEnd> VAR_455 = VAR_49 <S2SV_ModStart> 0 ] = ( TYPE_20 ) <S2SV_ModStart> 1 ] = ( TYPE_20 ) <S2SV_ModStart> 2 ] = ( TYPE_20 ) <S2SV_ModStart> 3 ] = ( TYPE_20 ) <S2SV_ModStart> 4 ] = ( TYPE_20 ) <S2SV_ModStart> 5 ] = ( TYPE_20 ) <S2SV_ModStart> 6 ] = ( TYPE_20 ) <S2SV_ModStart> 7 ] = ( TYPE_20 ) <S2SV_ModStart> 8 ] = ( TYPE_20 ) <S2SV_ModStart> 9 ] = ( TYPE_20 ) <S2SV_ModStart> 10 ] = ( TYPE_20 ) <S2SV_ModStart> 11 ] = ( TYPE_20 ) <S2SV_ModStart> 12 ] = ( TYPE_20 ) <S2SV_ModStart> 13 ] = ( TYPE_20 ) <S2SV_ModStart> 14 ] = ( TYPE_20 ) <S2SV_ModStart> 15 ] = ( TYPE_20 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( const
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_8 ) ; return
<S2SV_ModStart> VAR_140 ) ; METHOD_23 ( & VAR_139 -> VAR_142 , 1 ) ;
<S2SV_ModStart> VAR_259 ++ ) { if ( METHOD_89 ( VAR_258 ) ) return VAR_206 ; <S2SV_ModStart> VAR_260 ) ; }
<S2SV_ModStart> VAR_390 ) || ( VAR_393 & VAR_107 && <S2SV_ModStart> VAR_437 == VAR_321 )
<S2SV_ModStart> , * VAR_47 , * VAR_56 = VAR_43 <S2SV_ModStart> VAR_53 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> , VAR_48 , & VAR_56 ) ) { if ( ! VAR_23 || METHOD_10 ( VAR_56 , VAR_23 ) == 0 ) VAR_55 = - VAR_57 ; else VAR_55 = - VAR_58 ; goto VAR_53 ; } if ( ! METHOD_6 ( VAR_39 , VAR_47 , VAR_54 , VAR_43 , VAR_35 <S2SV_ModEnd> ) ) { <S2SV_ModStart> if ( ! METHOD_7 ( VAR_39 -> VAR_40 , VAR_47 , VAR_48 , VAR_43 ) ) { VAR_55 = - VAR_45 ; goto VAR_53 ; } if ( ! <S2SV_ModStart> VAR_54 ) ; METHOD_9 ( VAR_56 ) ;
<S2SV_ModStart> VAR_79 ; } <S2SV_ModEnd> } VAR_174 ->
<S2SV_ModStart> * VAR_3 >= 112 <S2SV_ModEnd> && VAR_12 [
<S2SV_ModStart> if ( ( ( <S2SV_ModStart> ) < VAR_35 ) || ( VAR_35 < sizeof ( TYPE_19 ) )
<S2SV_ModStart> ( METHOD_12 ( STRUCT_OR_UNION_6 <S2SV_ModEnd> && ! VAR_87
<S2SV_ModStart> ! VAR_284 ) { METHOD_40 ( <S2SV_ModEnd> VAR_343 [ 0 <S2SV_ModStart> 0 ] ) ; METHOD_83 ( ( VAR_348 , "<S2SV_blank>c<S2SV_blank>%04x" , METHOD_43 ( & VAR_343 [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case
<S2SV_ModStart> * VAR_133 , TYPE_12 VAR_138 , <S2SV_ModStart> * VAR_90 , TYPE_12 VAR_84 , <S2SV_ModEnd> TYPE_10 * VAR_111 <S2SV_ModStart> ( VAR_137 < VAR_138 <S2SV_ModEnd> ) VAR_133 [ <S2SV_ModStart> } VAR_102 = VAR_138 - VAR_139 <S2SV_ModEnd> - VAR_131 ; <S2SV_ModStart> ( VAR_137 > VAR_138 - VAR_139 ) VAR_137 = VAR_138 - VAR_139 <S2SV_ModEnd> ; VAR_133 [
<S2SV_ModStart> TYPE_0 METHOD_7 ( const TYPE_10 * VAR_26 , TYPE_18 * VAR_137 , <S2SV_ModEnd> const TYPE_2 * <S2SV_ModStart> const TYPE_2 * VAR_124 , <S2SV_ModEnd> TYPE_3 * * <S2SV_ModStart> TYPE_3 * * VAR_138 <S2SV_ModEnd> , TYPE_17 * <S2SV_ModStart> VAR_108 ) { <S2SV_ModEnd> const TYPE_17 VAR_127 <S2SV_ModStart> = VAR_29 [ VAR_138 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = VAR_34 [ VAR_138 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> { METHOD_5 ( VAR_26 , VAR_137 , VAR_124 , VAR_138 <S2SV_ModEnd> , VAR_129 , <S2SV_ModStart> { METHOD_5 ( VAR_26 , VAR_137 , VAR_124 , VAR_138 <S2SV_ModEnd> , VAR_129 , <S2SV_ModStart> ; METHOD_5 ( VAR_26 , VAR_137 , VAR_124 , VAR_138 <S2SV_ModEnd> + VAR_121 * <S2SV_ModStart> { METHOD_5 ( VAR_26 , VAR_137 , VAR_124 , VAR_138 <S2SV_ModEnd> , VAR_129 , <S2SV_ModStart> ; METHOD_5 ( VAR_26 , VAR_137 , VAR_124 , VAR_138 <S2SV_ModEnd> + VAR_121 , <S2SV_ModStart> ; METHOD_7 ( VAR_26 , VAR_137 <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> VAR_124 , & VAR_138 <S2SV_ModEnd> [ VAR_133 *
<S2SV_ModStart> -> VAR_13 & ( VAR_14 | VAR_47 ) <S2SV_ModEnd> ) break ;
<S2SV_ModStart> VAR_49 = VAR_36 ; if ( METHOD_20 ( VAR_138 -> VAR_139 ) ) VAR_49 |= VAR_140
<S2SV_ModStart> * VAR_24 ; const unsigned TYPE_4 * VAR_26 = VAR_14 ; unsigned TYPE_4 * VAR_27 = VAR_16 ; TYPE_7 VAR_28 = - 1 ; <S2SV_ModStart> VAR_24 , & VAR_26 <S2SV_ModEnd> , VAR_15 ) <S2SV_ModStart> == VAR_16 ) goto VAR_23 ; VAR_28 = METHOD_5 ( VAR_24 , & VAR_27 ) ; if ( VAR_28 != VAR_15 || METHOD_6 ( VAR_14 , VAR_27 , VAR_28 ) ) <S2SV_ModStart> ; VAR_23 : if ( VAR_28 > 0 ) { METHOD_7 ( VAR_27 , VAR_28 ) ; METHOD_8 ( VAR_27 ) ; }
<S2SV_ModStart> VAR_4 ) ; if ( ! METHOD_5 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> , VAR_11 ) ) { <S2SV_ModEnd> VAR_12 = METHOD_3 <S2SV_ModStart> VAR_9 ) ; } else { VAR_12 = VAR_4 ; }
<S2SV_ModStart> ) ; } if ( VAR_9 -> VAR_10 != VAR_9 -> VAR_11 ) METHOD_4 ( VAR_9 -> VAR_10 ) ;
<S2SV_ModStart> 0 ; TYPE_8 VAR_158 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; TYPE_8 VAR_160 = 0 ; struct STRUCT_OR_UNION_5 VAR_159 ; memset ( & VAR_159 , 0 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ; <S2SV_ModEnd> if ( METHOD_11 <S2SV_ModStart> VAR_152 , & VAR_159 . <S2SV_ModEnd> VAR_91 , & <S2SV_ModStart> VAR_91 , & VAR_159 . <S2SV_ModEnd> VAR_93 , & <S2SV_ModStart> VAR_93 , & VAR_159 . <S2SV_ModEnd> VAR_95 , & <S2SV_ModStart> VAR_95 , & VAR_159 . VAR_97 , VAR_159 . <S2SV_ModEnd> VAR_101 , & <S2SV_ModStart> VAR_101 , & VAR_159 . <S2SV_ModEnd> VAR_101 , VAR_146 <S2SV_ModStart> , VAR_146 , VAR_158 , & VAR_160 <S2SV_ModEnd> , VAR_146 ) <S2SV_ModStart> ) ; } switch ( VAR_159 . VAR_93 ) { case OE_AF_INET : if ( VAR_159 . VAR_101 != sizeof ( struct oe_sockaddr ) ) { VAR_157 = VAR_23 ; goto VAR_148 ; } break ; case OE_AF_INET6 : case OE_AF_INET6_WIN : case OE_AF_UNSPEC : if ( VAR_159 . VAR_101 != sizeof ( struct oe_sockaddr_in6 ) ) { VAR_157 = VAR_23 ; goto VAR_148 ; } break ; default : VAR_157 = VAR_23 ; goto VAR_148 ; } if ( ! ( VAR_156 = METHOD_10 ( 1 , sizeof ( struct STRUCT_OR_UNION_5 ) ) ) ) { VAR_157 = VAR_86 ; goto VAR_148 ; } if ( VAR_159 . <S2SV_ModEnd> VAR_101 && ! <S2SV_ModStart> ( 1 , VAR_159 . <S2SV_ModEnd> VAR_101 ) ) <S2SV_ModStart> } if ( VAR_160 <S2SV_ModEnd> && ! ( <S2SV_ModStart> ( 1 , VAR_160 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> VAR_148 ; } VAR_158 = VAR_160 ; <S2SV_ModStart> -> VAR_97 , VAR_159 . <S2SV_ModEnd> VAR_101 , & <S2SV_ModStart> -> VAR_103 , VAR_158 , & VAR_160 <S2SV_ModEnd> , VAR_156 -> <S2SV_ModStart> } if ( ( VAR_156 -> VAR_91 != VAR_159 . VAR_91 ) || ( VAR_156 -> VAR_93 != VAR_159 . VAR_93 ) || ( VAR_156 -> VAR_95 != VAR_159 . VAR_95 ) || ( VAR_156 -> VAR_97 != VAR_159 . VAR_97 ) || ( VAR_156 -> VAR_101 != VAR_159 . VAR_101 ) || ( VAR_160 != VAR_158 ) || ( VAR_160 && VAR_156 -> VAR_107 [ VAR_160 - 1 ] != '\\0' ) ) { VAR_157 = VAR_23 ; goto VAR_148 ; } if ( VAR_145 ) { VAR_145 -> VAR_114 = VAR_156 ; VAR_145 = VAR_156 ; } else { VAR_154 = VAR_156 ; VAR_145 = VAR_156 ; } VAR_156 = VAR_146 ; } if ( VAR_152 ) { TYPE_10 VAR_151 = - 1 <S2SV_ModEnd> ; if (
<S2SV_ModStart> ; VAR_83 = METHOD_40 <S2SV_ModEnd> ( VAR_148 , <S2SV_ModStart> { VAR_83 = METHOD_40 <S2SV_ModEnd> ( VAR_148 ,
<S2SV_ModStart> ] ) ; if ( VAR_103 -> VAR_72 < 1 || VAR_103 -> VAR_74 < 1 ) { METHOD_8 ( VAR_103 -> VAR_65 , "Invalid<S2SV_blank>image<S2SV_blank>dimensions" ) ; goto VAR_106 ; }
<S2SV_ModStart> VAR_1 ) { METHOD_2 <S2SV_ModEnd> ( VAR_1 ->
<S2SV_ModStart> TYPE_3 VAR_14 , const <S2SV_ModStart> VAR_13 ) { VAR_23 * VAR_24 ; TYPE_5 VAR_22 ; VAR_24 = METHOD_4 ( VAR_13 , VAR_14 , VAR_25 ) ; if ( ! VAR_24 ) return - VAR_26 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> , VAR_12 , VAR_24 <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_22 ) ; METHOD_5 ( VAR_24 ) ;
<S2SV_ModStart> TYPE_1 * VAR_14 , TYPE_1 * VAR_16 <S2SV_ModStart> = VAR_14 ; VAR_15 -> VAR_12 . METHOD_2 . VAR_16 = VAR_16 ;
<S2SV_ModStart> VAR_21 ) ; <S2SV_ModEnd> } } <S2SV_null>
<S2SV_ModStart> ) ; } METHOD_9 ( & VAR_19 -> VAR_4 ) ;
<S2SV_ModStart> ( VAR_37 ) { * VAR_46 = "DECODE_PA_S4U_X509_USER" ; return VAR_37 ; } <S2SV_ModEnd> VAR_37 = METHOD_2
<S2SV_ModStart> TYPE_1 * VAR_184 ) { TYPE_3 * VAR_182 = & VAR_184 -> VAR_182 ; TYPE_5 * VAR_174 = METHOD_1 ( TYPE_5 , VAR_158 , VAR_182 -> VAR_8 ) ; TYPE_6 VAR_145 ; <S2SV_ModEnd> TYPE_2 * VAR_161 <S2SV_ModStart> TYPE_2 * VAR_161 ; TYPE_7 VAR_170 = 0 ; if ( ! VAR_184 -> VAR_186 . VAR_187 ) { if ( VAR_182 -> VAR_164 . VAR_165 > 65536 ) { goto VAR_180 ; } VAR_184 -> VAR_170 = METHOD_25 ( 4096 , VAR_182 -> VAR_164 . VAR_165 ) ; VAR_184 -> VAR_186 . VAR_187 = METHOD_26 ( VAR_174 -> VAR_175 , VAR_184 -> VAR_170 ) ; } VAR_161 = VAR_184 -> VAR_186 . VAR_187 <S2SV_ModEnd> ; switch (
<S2SV_ModStart> VAR_12 . VAR_13 <S2SV_ModEnd> ) return 0
<S2SV_ModStart> VAR_15 ) { struct STRUCT_OR_UNION_4 * VAR_43 = & VAR_39 -> VAR_44 . VAR_45 [ VAR_14 ] ; TYPE_3 VAR_46 = sizeof ( struct STRUCT_OR_UNION_3 ) + METHOD_9 ( VAR_39 -> VAR_40 . VAR_41 . VAR_42 ) ; <S2SV_ModStart> 0 ) ; VAR_46 = min_t ( TYPE_3 , VAR_46 , VAR_43 -> VAR_47 - VAR_31 -> VAR_48 ) ; goto VAR_49 <S2SV_ModEnd> ; } METHOD_2 <S2SV_ModStart> VAR_40 ) ; VAR_49 : return VAR_46 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_41 ) ) { return 0 ; } <S2SV_ModEnd> VAR_40 = (
<S2SV_ModStart> VAR_25 ) ; VAR_43 = METHOD_13 ( STRUCT_OR_UNION_10 ) ; if ( VAR_43 < 0 ) goto VAR_41 ; <S2SV_ModEnd> VAR_43 = METHOD_5
<S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> VAR_168 ) { METHOD_50 ( & VAR_170 [ VAR_173 + 4 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> = VAR_155 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; if <S2SV_ModStart> & 0xf0 ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> += 1 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> ) ) ; METHOD_42 <S2SV_ModEnd> ( VAR_164 -> <S2SV_ModStart> [ 1 ] ) ; if ( VAR_164 -> VAR_153 [ 1 ] <S2SV_ModStart> = VAR_155 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> += 2 ; METHOD_51 ( & VAR_170 [ VAR_173 ] <S2SV_ModEnd> ) ; METHOD_49 <S2SV_ModStart> ; METHOD_44 ( VAR_170 [ VAR_173 ] , <S2SV_ModEnd> 16 ) ;
<S2SV_ModStart> ; VAR_5 -> VAR_8 &= ~ VAR_9 ; VAR_5 ->
<S2SV_ModStart> -> VAR_21 ; VAR_19 -> VAR_23 = 0 ;
<S2SV_ModStart> -> VAR_32 ; VAR_30 [ 3 ] = 0 ;
<S2SV_ModStart> ( VAR_90 , VAR_111 . VAR_118 <S2SV_ModEnd> , VAR_110 ->
<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> METHOD_45 ( 100000 )
<S2SV_ModStart> METHOD_244 ( VAR_1374 ) ; VAR_1376 = METHOD_245 ( VAR_1376
<S2SV_ModStart> = METHOD_1 ( VAR_23 ,
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_0
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_93 ) && 0 != * VAR_97 && 0 != * VAR_31 && 0 != * VAR_93 ) <S2SV_ModEnd> { * VAR_79
<S2SV_ModStart> ) break ; VAR_1585 = METHOD_247 ( VAR_1599 , VAR_1599 -> VAR_1530 , VAR_1599 -> VAR_1505 ) ; if ( VAR_1585 == VAR_1586 ) { METHOD_243 ( VAR_1595 , & VAR_1599 -> VAR_1595 ) ; return ( METHOD_237 ( VAR_1599 ) ) ; }
<S2SV_ModStart> * VAR_5 ; TYPE_5 <S2SV_ModEnd> VAR_14 ; VAR_12 <S2SV_ModStart> -> VAR_8 = METHOD_2 <S2SV_ModEnd> ( VAR_9 ,
<S2SV_ModStart> && VAR_25 ) || ( VAR_24 && ! VAR_25 ) <S2SV_ModStart> . METHOD_1 ( METHOD_3 ( VAR_28 ) <S2SV_ModEnd> , VAR_24 ,
<S2SV_ModStart> ; if ( * VAR_40 == 0 ||
<S2SV_ModStart> STRUCT_OR_UNION_58 * STRUCT_OR_UNION_58 , TYPE_8 VAR_240 <S2SV_ModStart> VAR_175 , STRUCT_OR_UNION_58 , VAR_240
<S2SV_ModStart> VAR_6 ) { METHOD_2 ( VAR_19 <S2SV_ModEnd> , "<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>K" , <S2SV_ModStart> } else { METHOD_2 ( VAR_19 <S2SV_ModEnd> , "<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>k" , <S2SV_ModStart> ) ; } METHOD_3 ( VAR_19 ) ;
<S2SV_ModStart> } else { return VAR_43 ; } } else if ( VAR_35 -> VAR_27 == 0 && VAR_35 -> VAR_34 == 9 ) { if ( METHOD_7 ( VAR_50 ) ) return VAR_43 ; VAR_51 = VAR_25 ; <S2SV_ModEnd> } else if <S2SV_ModStart> } else { return VAR_43 <S2SV_ModEnd> ; } if
<S2SV_ModStart> VAR_4 ) { METHOD_4 ( VAR_4 ) ;
<S2SV_ModStart> VAR_113 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ; VAR_15 = METHOD_4 <S2SV_ModEnd> ( VAR_11 ,
<S2SV_ModStart> , * VAR_137 <S2SV_ModEnd> ; TYPE_4 * <S2SV_ModStart> ; METHOD_12 ( "Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; METHOD_20 <S2SV_ModStart> && METHOD_46 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ; METHOD_46 ( ( unsigned TYPE_5 ) <S2SV_ModStart> 0 ) { METHOD_62 ( VAR_147 <S2SV_ModEnd> ) ; } <S2SV_ModStart> "string<S2SV_blank>currentfile" ) ) ) { METHOD_63 ( VAR_147 ) <S2SV_ModEnd> ; } } <S2SV_ModStart> && METHOD_44 ( ( unsigned TYPE_5 ) <S2SV_ModStart> && METHOD_44 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ; METHOD_46 ( ( unsigned TYPE_5 )
<S2SV_ModStart> = 0 ; VAR_70 -> VAR_161 = VAR_157 ;
<S2SV_ModStart> -> VAR_60 . <S2SV_ModEnd> STRUCT_OR_UNION_38 = STRUCT_OR_UNION_38
<S2SV_ModStart> STRUCT_OR_UNION_5 * STRUCT_OR_UNION_5 , struct STRUCT_OR_UNION_6 * VAR_13 ) { if ( VAR_11 > VAR_14 ) VAR_11 = VAR_14 ; <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> = 1 ; METHOD_3 ( VAR_13 , VAR_4 , STRUCT_OR_UNION_5 , * VAR_12 , VAR_11 ) ;
<S2SV_ModStart> TYPE_2 VAR_71 ; unsigned <S2SV_ModStart> -> VAR_20 ; if ( VAR_69 -> VAR_20 < 1 || VAR_69 -> VAR_20 > 31 ) { VAR_69 -> VAR_20 = 0 ; return 1 ; } <S2SV_ModStart> -> VAR_20 ; <S2SV_ModEnd> VAR_41 = (
<S2SV_ModStart> ( METHOD_2 ( VAR_4 -> VAR_9 ) ) return 0 ; if ( METHOD_2 (
<S2SV_ModStart> < VAR_9 ; VAR_14 ++ <S2SV_ModEnd> ) { VAR_21 <S2SV_ModStart> ] ) ; if ( ! VAR_21 ) { METHOD_4 ( VAR_22 ) ; return 0 ; }
<S2SV_ModStart> { if ( * VAR_119 [ 1 ] == ':' || METHOD_23 ( VAR_119 [ 1 ] , '<S2SV_blank>' ) ) return METHOD_68 ( VAR_123 , VAR_1 , VAR_1 , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if ( <S2SV_ModStart> { if ( * VAR_119 [ 1 ] == ':' || METHOD_23 ( VAR_119 [ 1 ] , '<S2SV_blank>' ) ) return METHOD_68 ( VAR_123 , VAR_1 , VAR_1 , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if (
<S2SV_ModStart> <= VAR_80 - ( TYPE_4 )
<S2SV_ModStart> VAR_92 -> VAR_23 ; METHOD_17 ( VAR_96 + VAR_99 <= VAR_92 -> VAR_47 )
<S2SV_ModStart> VAR_17 . VAR_18 && VAR_27
<S2SV_ModStart> { if ( VAR_55 > VAR_56 ) { METHOD_2 ( VAR_7 , VAR_8 , "Maximum<S2SV_blank>tree<S2SV_blank>recursion<S2SV_blank>level<S2SV_blank>exceeded.\\n" ) ; return VAR_9 ; } if (
<S2SV_ModStart> VAR_61 ; } if ( VAR_42 -> VAR_26 )
<S2SV_ModStart> VAR_66 ; TYPE_12 VAR_76 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { VAR_76 <S2SV_ModEnd> = ( VAR_49 <S2SV_ModStart> = VAR_49 - VAR_76 <S2SV_ModEnd> ; VAR_67 = <S2SV_ModStart> & VAR_60 [ VAR_76 <S2SV_ModEnd> * VAR_71 ]
<S2SV_ModStart> "REPLY_ADD_STA<S2SV_blank>PASSED\\n" ) ; VAR_76 = METHOD_5 ( VAR_72 , VAR_65 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> ; VAR_19 = METHOD_10 <S2SV_ModEnd> ( VAR_30 ,
<S2SV_ModStart> "<S2SV_blank><S2SV_blank><S2SV_blank>xy<S2SV_blank><S2SV_blank><S2SV_blank>x" ) ; METHOD_164 ( "\\\\x0" ) ; METHOD_164 ( "\\\\x" ) ; METHOD_164 ( "\\\\xxy" ) ;
<S2SV_ModStart> VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_56 ) && ! ( VAR_50 & VAR_57 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_58 ) && ! ( VAR_50 & VAR_59 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_60 ) && ! ( VAR_50 & VAR_61 ) ) { return - VAR_36 ; } if ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_62 ) && ( ( VAR_51 -> VAR_51 . VAR_50 & VAR_63 ) != ( VAR_50 & VAR_63 ) ) ) { return - VAR_36 ; }
<S2SV_ModStart> VAR_209 , VAR_214 <S2SV_ModEnd> ; TYPE_4 VAR_204 <S2SV_ModStart> VAR_210 ; } VAR_209 = VAR_212 -> VAR_208 ; if ( VAR_209 > VAR_208 ) { VAR_209 = VAR_208 ; VAR_198 -> VAR_142 |= VAR_206 ; } VAR_214 = METHOD_12 ( VAR_212 , 0 , VAR_198 -> VAR_147 , VAR_209 ) ; if ( VAR_214 ) goto VAR_210 ; METHOD_13 ( VAR_198 , VAR_211 , VAR_212 ) ; if ( VAR_198 -> VAR_157 ) { <S2SV_ModEnd> if ( STRUCT_OR_UNION_10 <S2SV_ModStart> == VAR_125 ) { <S2SV_ModStart> STRUCT_OR_UNION_11 ) ; } else { struct STRUCT_OR_UNION_12 * VAR_130 = & METHOD_17 ( VAR_212 ) -> VAR_159 . VAR_123 ; <S2SV_ModEnd> VAR_198 -> VAR_161 <S2SV_ModStart> VAR_133 ) ; } METHOD_14 <S2SV_ModEnd> ( VAR_198 -> <S2SV_ModStart> VAR_198 -> VAR_157 <S2SV_ModEnd> , & METHOD_17 <S2SV_ModStart> VAR_161 ) ; }
<S2SV_ModStart> VAR_16 ) { TYPE_9 <S2SV_ModEnd> VAR_26 [ VAR_21
<S2SV_ModStart> ( VAR_15 -> VAR_29 <S2SV_ModEnd> < 2 ) <S2SV_ModStart> < 2 ) { dev_err ( & VAR_15 -> interface -> VAR_16 , "missing<S2SV_blank>bulk<S2SV_blank>out<S2SV_blank>endpoints\\n" ) ; return - ENODEV ; } <S2SV_ModEnd> VAR_24 = VAR_15
<S2SV_ModStart> VAR_205 = 1 , VAR_232 = 0 <S2SV_ModStart> ; TYPE_8 VAR_204 ; TYPE_25 VAR_233 <S2SV_ModStart> VAR_204 ) ; VAR_173 += VAR_232 * sizeof ( TYPE_25 ) ; if ( VAR_205 ) VAR_173 += <S2SV_ModEnd> sizeof ( VAR_211 <S2SV_ModStart> ( VAR_204 ) + ( VAR_232 * sizeof ( TYPE_25 ) ) <S2SV_ModStart> VAR_161 = VAR_162 ; VAR_204 . VAR_234 = VAR_232 <S2SV_ModStart> VAR_176 ; } if ( VAR_232 ) { METHOD_19 ( VAR_233 . VAR_149 , "dmmy" , sizeof ( VAR_233 . VAR_149 ) ) ; VAR_233 . VAR_235 = 12345678 ; METHOD_26 ( & VAR_233 , VAR_236 ) ; } <S2SV_ModStart> ) ) ) ) { METHOD_34 ( "can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!" ) ; return VAR_230 ; } while ( VAR_232 -- ) if ( ! METHOD_33 ( VAR_224 , & VAR_233 , sizeof ( VAR_233 ) , & VAR_228 ) || VAR_228 != sizeof ( VAR_233 ) ) { METHOD_34 ( "can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!" ) ; return VAR_230 ; } if ( <S2SV_ModEnd> ( VAR_205 &&
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_17 * VAR_237 = VAR_106 -> VAR_238 ; struct <S2SV_ModStart> VAR_221 - 1 ; TYPE_9 VAR_239 <S2SV_ModStart> ++ ) ; if ( METHOD_29 ( VAR_236 ) ) { VAR_239 = METHOD_30 ( VAR_237 , VAR_231 , VAR_234 , VAR_240 ) ; if ( VAR_239 ) { METHOD_31 ( VAR_106 , "Failed<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>data<S2SV_blank>buffers\\n" ) ; METHOD_32 ( VAR_236 ) ; } }
<S2SV_ModStart> -> VAR_11 -> METHOD_39 ( ) ) ) ; METHOD_9 ( VAR_28 , "Source<S2SV_blank>file:<S2SV_blank>%s<S2SV_blank>File<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>Format:<S2SV_blank>%s\\n" , <S2SV_ModEnd> VAR_15 -> VAR_14 <S2SV_ModStart> -> VAR_14 , file_type_to_string ( VAR_15 -> file_type ) , image_format_to_string ( VAR_15 -> fmt ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; METHOD_38 ( VAR_60 ) ; METHOD_38 ( VAR_61 ) ; METHOD_38 ( <S2SV_ModStart> METHOD_38 ( VAR_42 ) ; METHOD_38 ( VAR_62 ) ; METHOD_38 ( VAR_63
<S2SV_ModStart> return VAR_85 ; { TYPE_15 TYPE_17 ; <S2SV_ModStart> -> VAR_64 ) TYPE_17 = <S2SV_ModStart> -> VAR_64 ) if ( ! TYPE_17 ) return VAR_85 ; } { TYPE_15 TYPE_17 ; <S2SV_ModStart> -> VAR_72 ) TYPE_17 = <S2SV_ModStart> -> VAR_72 ) if ( ! TYPE_17 ) return VAR_85 ; }
<S2SV_ModStart> * VAR_39 , struct STRUCT_OR_UNION_3 * VAR_56 <S2SV_ModEnd> ) { VAR_3 <S2SV_ModStart> VAR_3 * VAR_24 , * VAR_57 <S2SV_ModStart> TYPE_3 VAR_55 ; VAR_56 -> <S2SV_ModEnd> VAR_50 = 0 <S2SV_ModStart> ) goto VAR_54 ; VAR_57 = VAR_48 -> VAR_35 <S2SV_ModStart> TYPE_5 VAR_46 ; VAR_48 -> VAR_35 = VAR_57 ; VAR_56 -> VAR_58 = METHOD_8 ( VAR_57 ) + 2 ; VAR_56 -> VAR_58 <<= 2 ; <S2SV_ModStart> VAR_36 -> VAR_37 ; VAR_51 += VAR_56 -> VAR_58 <S2SV_ModStart> VAR_46 ) { if ( VAR_56 -> VAR_59 & VAR_60 ) { VAR_56 -> VAR_50 = VAR_51 ; goto VAR_54 ; } METHOD_6 ( "NFS:<S2SV_blank>acl<S2SV_blank>reply:<S2SV_blank>attrlen<S2SV_blank>%u<S2SV_blank>><S2SV_blank>recvd<S2SV_blank>%u\\n" <S2SV_ModEnd> , VAR_51 , <S2SV_ModStart> VAR_51 ) ; VAR_56 -> <S2SV_ModEnd> VAR_50 = VAR_51
<S2SV_ModStart> VAR_29 ) { } else if ( VAR_51 && VAR_48 -> VAR_52 && METHOD_10 ( ) == 2 ) { return VAR_35 ;
<S2SV_ModStart> VAR_12 ) { <S2SV_ModEnd> METHOD_2 ( STRUCT_OR_UNION_7
<S2SV_ModStart> = METHOD_7 ( & <S2SV_ModStart> = METHOD_7 ( & <S2SV_ModStart> = METHOD_7 ( &
<S2SV_ModStart> if ( ! METHOD_13 ( VAR_24 , <S2SV_ModEnd> VAR_15 -> VAR_16
<S2SV_ModStart> VAR_124 ; struct STRUCT_OR_UNION_25 * VAR_181 = & VAR_178 -> VAR_182 ; struct STRUCT_OR_UNION_22 * STRUCT_OR_UNION_22 <S2SV_ModEnd> ; TYPE_3 VAR_130 <S2SV_ModStart> ; TYPE_3 VAR_130 = 0 <S2SV_ModStart> VAR_80 , VAR_135 <S2SV_ModEnd> ; TYPE_7 VAR_69 <S2SV_ModStart> if ( ( VAR_80 = METHOD_32 ( VAR_178 , <S2SV_ModEnd> VAR_35 , VAR_132 <S2SV_ModStart> VAR_132 -> VAR_100 ) ) < 1 <S2SV_ModEnd> ) { VAR_179 <S2SV_ModStart> VAR_55 ) ; VAR_181 -> VAR_183 = VAR_129 ; <S2SV_ModEnd> if ( VAR_80 <S2SV_ModStart> 1 ) { STRUCT_OR_UNION_22 = & VAR_181 -> STRUCT_OR_UNION_22 [ 0 ] ; <S2SV_ModStart> goto VAR_168 ; STRUCT_OR_UNION_22 = & VAR_181 -> STRUCT_OR_UNION_22 [ 0 ] ; VAR_130 += <S2SV_ModEnd> STRUCT_OR_UNION_22 -> VAR_108 <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { arc4random_buf ( & VAR_178 -> VAR_184 , sizeof ( VAR_178 -> VAR_184 ) ) ; for ( VAR_115 = 0 ; VAR_115 < VAR_80 ; VAR_115 ++ ) { STRUCT_OR_UNION_22 = & VAR_181 -> STRUCT_OR_UNION_22 [ VAR_115 ] ; if ( ( VAR_135 = METHOD_17 ( VAR_175 , 0 , "\\r\\n--%llu\\r\\n" "Content-Type:<S2SV_blank>%s/%s\\r\\n" "Content-Range:<S2SV_blank>bytes<S2SV_blank>%lld-%lld/%lld\\r\\n\\r\\n" , VAR_178 -> VAR_184 , VAR_129 -> STRUCT_OR_UNION_24 , VAR_129 -> VAR_121 , STRUCT_OR_UNION_22 -> VAR_109 , STRUCT_OR_UNION_22 -> VAR_108 , VAR_132 -> VAR_100 ) ) < 0 <S2SV_ModEnd> ) goto VAR_168 <S2SV_ModStart> ; VAR_130 += VAR_135 + <S2SV_ModEnd> STRUCT_OR_UNION_22 -> VAR_108 <S2SV_ModStart> + 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> if ( ( VAR_135 = METHOD_17 ( VAR_175 , 0 , "\\r\\n--%llu--\\r\\n" , VAR_178 -> VAR_184 ) ) < 0 <S2SV_ModEnd> ) goto VAR_168 <S2SV_ModStart> ; VAR_130 += VAR_135 <S2SV_ModEnd> ; ( TYPE_11 <S2SV_ModStart> VAR_121 ) , "byteranges;<S2SV_blank>boundary=%llu" , VAR_178 -> VAR_184 <S2SV_ModEnd> ) ; VAR_129 <S2SV_ModStart> VAR_124 ; } VAR_181 -> VAR_185 = VAR_186 <S2SV_ModEnd> ; VAR_135 = <S2SV_ModStart> case 0 : METHOD_29 ( VAR_173 ) ; <S2SV_ModStart> break ; } VAR_178 -> VAR_187 = VAR_173 ; if ( VAR_178 -> VAR_188 != VAR_175 ) METHOD_27 ( VAR_178 -> VAR_188 ) ; VAR_178 -> VAR_189 = 0 ; VAR_178 -> VAR_188 = METHOD_33 ( VAR_178 -> VAR_187 , VAR_190 , VAR_191 , VAR_192 , VAR_178 ) ; if ( VAR_178 -> VAR_188 == VAR_175 ) { VAR_180 = "failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>file<S2SV_blank>buffer<S2SV_blank>event" ; <S2SV_ModEnd> goto VAR_158 ; <S2SV_ModStart> goto VAR_158 ; } METHOD_34 ( VAR_178 -> VAR_188 , VAR_161 , 0 , VAR_178 -> VAR_193 ) ; METHOD_35 ( VAR_178 -> VAR_188 , VAR_54 -> VAR_194 . VAR_134 , VAR_54 -> VAR_194 . VAR_134 ) ; METHOD_23 ( VAR_178 -> VAR_188 , VAR_161 ) ; METHOD_26 ( VAR_178 -> VAR_166 , VAR_161 ) ; VAR_155 : METHOD_25 ( VAR_178 ) ; return ( 0 ) ; VAR_158 : METHOD_26 <S2SV_ModEnd> ( VAR_178 -> <S2SV_ModStart> VAR_162 ) ; <S2SV_ModEnd> METHOD_27 ( VAR_178 <S2SV_ModStart> ; VAR_168 : <S2SV_ModEnd> if ( VAR_173
<S2SV_ModStart> ( VAR_47 , VAR_51 <S2SV_ModEnd> ) ; METHOD_9 <S2SV_ModStart> ( VAR_47 , VAR_51 <S2SV_ModEnd> , 0 ) <S2SV_ModStart> ( VAR_47 , VAR_52 ) ; if ( ( VAR_38 & VAR_53 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> VAR_49 &= ~ VAR_54 <S2SV_ModEnd> ; VAR_47 -> <S2SV_ModStart> ( VAR_38 & VAR_55 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> ( VAR_47 , VAR_52 , VAR_55 <S2SV_ModEnd> ) ; VAR_33 <S2SV_ModStart> ( VAR_47 , VAR_56 ) & VAR_57 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_38 & VAR_58 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> VAR_49 &= ~ VAR_59 <S2SV_ModEnd> ; VAR_47 -> <S2SV_ModStart> ( VAR_47 , VAR_51 <S2SV_ModEnd> , VAR_49 )
<S2SV_ModStart> TYPE_0 METHOD_0 ( const TYPE_1 * const <S2SV_ModEnd> VAR_13 , struct <S2SV_ModStart> VAR_13 , struct vpx_write_bit_buffer <S2SV_ModEnd> * VAR_12 ) <S2SV_ModStart> VAR_12 ) { METHOD_5 <S2SV_ModEnd> ( VAR_12 ,
<S2SV_ModStart> == 8 ) && VAR_174 -> VAR_143 != VAR_132
<S2SV_ModStart> ; if ( METHOD_8 ( <S2SV_ModStart> VAR_11 , VAR_12 )
<S2SV_ModStart> VAR_46 ) { goto VAR_47 <S2SV_ModEnd> ; } case <S2SV_ModStart> ) ) { goto VAR_47 <S2SV_ModEnd> ; } VAR_44 <S2SV_ModStart> VAR_43 ) ; VAR_47 : VAR_44 -> VAR_25 = 0 ;
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_22 ; METHOD_3 ( & VAR_22 , 0 , sizeof ( VAR_22 ) )
<S2SV_ModStart> VAR_10 ) { METHOD_1 ( & VAR_24 -> VAR_21 ) ; <S2SV_ModStart> } } else { METHOD_5 <S2SV_ModEnd> ( VAR_24 ) <S2SV_ModStart> ) ; } METHOD_3 ( & VAR_24 -> VAR_21 ) ;
<S2SV_ModStart> ) ) ; if ( VAR_58 -> VAR_52 [ VAR_56 ] == VAR_25 ) { for ( VAR_57 = 0 ; VAR_57 < VAR_56 ; VAR_57 ++ ) { METHOD_7 ( VAR_33 , VAR_58 -> VAR_52 [ VAR_57 ] ) ; } METHOD_7 ( VAR_33 , VAR_58 -> VAR_52 ) ; METHOD_7 ( VAR_33 , VAR_58 ) ; return VAR_25 ; }
<S2SV_ModStart> { if ( ! VAR_76 ||
<S2SV_ModStart> VAR_130 - 1 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_26 ) ; if ( VAR_28 > VAR_29 ) { METHOD_3 ( VAR_27 ) ; VAR_30 ; }
<S2SV_ModStart> ( VAR_169 && <S2SV_ModEnd> METHOD_27 ( VAR_169 <S2SV_ModStart> , VAR_154 ) != 1
<S2SV_ModStart> ( ) ; METHOD_9 ( VAR_15 , METHOD_2 ( VAR_14 ) + METHOD_2 ( VAR_12 ) + 1 , VAR_16 ) ; <S2SV_ModStart> VAR_12 , VAR_14 ) ; METHOD_9 ( VAR_17 , METHOD_2 ( VAR_12 ) + 1 , VAR_16
<S2SV_ModStart> TYPE_6 VAR_118 , TYPE_10 * VAR_160 <S2SV_ModEnd> ) { TYPE_7 <S2SV_ModStart> TYPE_8 VAR_15 = VAR_161 [ VAR_118 ] <S2SV_ModEnd> , VAR_156 = <S2SV_ModStart> TYPE_9 VAR_25 = VAR_160 -> VAR_162 ; TYPE_6 VAR_159 = METHOD_34 ( VAR_118 , VAR_25 ) <S2SV_ModEnd> ; METHOD_2 ( <S2SV_ModStart> case VAR_26 : METHOD_35 ( VAR_151 , VAR_158 <S2SV_ModEnd> , VAR_114 , <S2SV_ModStart> ] ) = VAR_160 -> VAR_163 . VAR_112 ; * ( VAR_158 -> VAR_164 ) = VAR_160 -> VAR_163 . VAR_164 <S2SV_ModEnd> ; METHOD_21 ( <S2SV_ModStart> case VAR_41 : METHOD_35 ( VAR_151 , VAR_158 <S2SV_ModEnd> , VAR_114 , <S2SV_ModStart> ] ) = VAR_160 -> VAR_165 [ 0 ] . VAR_112 ; * ( VAR_158 -> VAR_164 ) = VAR_160 -> VAR_165 [ 0 ] . VAR_164 ; <S2SV_ModEnd> METHOD_21 ( VAR_151 <S2SV_ModStart> , VAR_155 , VAR_159 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_61 ) { METHOD_35 ( VAR_151 , VAR_158 , VAR_114 , VAR_153 , VAR_155 + VAR_156 ) ; * ( VAR_114 -> VAR_109 [ 0 ] ) = VAR_160 -> VAR_165 [ 1 ] . VAR_112 ; * ( VAR_158 -> VAR_164 ) = VAR_160 -> VAR_165 [ 1 ] . VAR_164 ; <S2SV_ModEnd> METHOD_21 ( VAR_151 <S2SV_ModStart> + VAR_156 , VAR_159 <S2SV_ModEnd> ) ; } <S2SV_ModStart> case VAR_80 : METHOD_35 ( VAR_151 , VAR_158 <S2SV_ModEnd> , VAR_114 , <S2SV_ModStart> ] ) = VAR_160 -> VAR_166 [ 0 ] . VAR_112 ; * ( VAR_158 -> VAR_164 ) = VAR_160 -> VAR_166 [ 0 ] . VAR_164 ; <S2SV_ModEnd> METHOD_21 ( VAR_151 <S2SV_ModStart> , VAR_155 , VAR_159 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_100 ) { METHOD_35 ( VAR_151 , VAR_158 , VAR_114 , VAR_153 + VAR_156 , VAR_155 ) ; * ( VAR_114 -> VAR_109 [ 0 ] ) = VAR_160 -> VAR_166 [ 1 ] . VAR_112 ; * ( VAR_158 -> VAR_164 ) = VAR_160 -> VAR_166 [ 1 ] . VAR_164 ; <S2SV_ModEnd> METHOD_21 ( VAR_151 <S2SV_ModStart> , VAR_155 , VAR_159 <S2SV_ModEnd> ) ; } <S2SV_ModStart> case VAR_119 : { <S2SV_ModEnd> METHOD_32 ( VAR_151 <S2SV_ModStart> , VAR_159 , VAR_160 -> VAR_167 [ 0 ] ) ; METHOD_32 ( VAR_151 , VAR_158 , VAR_153 , VAR_155 + VAR_156 , VAR_159 , VAR_160 -> VAR_167 [ 1 ] ) <S2SV_ModEnd> ; METHOD_32 ( <S2SV_ModStart> VAR_158 , VAR_153 + VAR_156 , VAR_155 , VAR_159 , VAR_160 -> VAR_167 [ 2 ] ) <S2SV_ModEnd> ; METHOD_32 ( <S2SV_ModStart> VAR_156 , VAR_155 + VAR_156 , VAR_159 , VAR_160 -> VAR_167 [ 3 ] <S2SV_ModEnd> ) ; break <S2SV_ModStart> ; break ; }
<S2SV_ModStart> VAR_26 ) ; if ( ! METHOD_6 ( VAR_12 , "url" ) && VAR_1 && METHOD_7 ( VAR_1 ) ) VAR_22 -> VAR_19 |= METHOD_4 ( VAR_22 -> VAR_21 , VAR_22 -> VAR_23 , VAR_27 , "disallowed<S2SV_blank>submodule<S2SV_blank>url:<S2SV_blank>%s" , VAR_1 ) ;
<S2SV_ModStart> TYPE_19 VAR_184 = - 4 <S2SV_ModEnd> ; TYPE_19 VAR_202 <S2SV_ModStart> -- ) { METHOD_11 ( ) <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> -- ) { METHOD_11 ( ) ; <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> } break ; <S2SV_ModStart> ) return ; METHOD_11 ( ) ; <S2SV_ModStart> VAR_203 ; } <S2SV_ModEnd> break ; default
<S2SV_ModStart> VAR_28 ) { TYPE_7 <S2SV_ModEnd> VAR_17 ; METHOD_2
<S2SV_ModStart> ; TYPE_3 VAR_37 ; if ( METHOD_21 ( VAR_116 ) -> VAR_120 ) goto VAR_115 ; METHOD_21 ( VAR_116 ) -> VAR_120 = 1
<S2SV_ModStart> ; if ( VAR_40 < 0 || VAR_23 < 0 ) { return 0 ; } if (
<S2SV_ModStart> = METHOD_6 ( <S2SV_ModEnd> VAR_136 -> VAR_112
<S2SV_ModStart> VAR_20 ) ; if ( METHOD_12 ( VAR_39 , & STRUCT_OR_UNION_9 -> VAR_40 ) ) { VAR_38 = - VAR_9 ; goto VAR_36 ; }
<S2SV_ModStart> == VAR_613 ) || ( VAR_732 == VAR_855 ) ) { VAR_847 -> VAR_711 = 0 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> == VAR_613 ) || ( VAR_732 == VAR_855 )
<S2SV_ModStart> VAR_312 ) ; if ( ! VAR_305 && VAR_37 != VAR_38 && VAR_37 != VAR_82 && VAR_37 != VAR_163 ) { METHOD_39 ( VAR_332 ) ; return 0 ; }
<S2SV_ModStart> STRUCT_OR_UNION_10 VAR_498 ; TYPE_95 VAR_277 ; <S2SV_ModStart> VAR_309 ; TYPE_109 VAR_360 , <S2SV_ModStart> || VAR_498 . VAR_499 >= ( U32_MAX - VAR_498 . VAR_289 ) || VAR_498 . <S2SV_ModStart> - VAR_441 ; <S2SV_ModEnd> VAR_360 = METHOD_25 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_498 . VAR_289 <S2SV_ModStart> VAR_499 > VAR_360 ) return - VAR_441 ; switch ( VAR_498 . VAR_417 & VAR_235 ) { case VAR_240 : VAR_277 = 0 ; break ; case VAR_248 : VAR_277 = sizeof ( VAR_250 ) ; break ; case VAR_253 : VAR_277 = sizeof ( VAR_399 ) ; break ; default : return - VAR_441 ; } if ( VAR_277 ) { if ( VAR_498 . VAR_414 - VAR_459 < VAR_498 . VAR_499 * VAR_277
<S2SV_ModStart> ; if ( <S2SV_ModEnd> METHOD_7 ( STRUCT_OR_UNION_29
<S2SV_ModStart> -> VAR_15 = VAR_65 <S2SV_ModEnd> ; VAR_62 ->
<S2SV_ModStart> sizeof ( struct STRUCT_OR_UNION_14 <S2SV_ModEnd> ) + VAR_147 <S2SV_ModStart> && METHOD_20 ( & VAR_185 -> VAR_147 <S2SV_ModEnd> -> VAR_147 ,
<S2SV_ModStart> TYPE_7 * VAR_41 , TYPE_8 VAR_44 <S2SV_ModStart> += 4 ; if ( VAR_43 == VAR_44 ) return VAR_43 ; <S2SV_ModStart> '=' ) { if ( VAR_43 == VAR_44 ) return VAR_43 ; <S2SV_ModStart> '=' ) { if ( VAR_43 == VAR_44 ) return VAR_43 ;
<S2SV_ModStart> VAR_5 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> VAR_89 ; TYPE_10 VAR_160 , <S2SV_ModStart> ++ ) { VAR_160 <S2SV_ModEnd> = min_t ( <S2SV_ModStart> , 0 , VAR_160 <S2SV_ModEnd> ) ; VAR_137 <S2SV_ModStart> VAR_95 ) ; if ( VAR_95 < VAR_160 ) break ; <S2SV_ModStart> VAR_97 - VAR_137 ; if ( ! VAR_137 ) { for ( VAR_89 = 0 ; VAR_89 < VAR_123 ; VAR_89 ++ ) METHOD_24 ( VAR_168 -> VAR_88 [ VAR_89 ] ) ; METHOD_10 ( VAR_168 ) ; VAR_178 = - VAR_179 ; break ; } for ( ; VAR_123 > VAR_89 + 1 ; VAR_123 -- ) METHOD_24 ( VAR_168 -> VAR_88 [ VAR_123 - 1 ] )
<S2SV_ModStart> & VAR_7 ) ) return VAR_25 ; if ( * VAR_11 < 4
<S2SV_ModStart> { TYPE_3 VAR_75 <S2SV_ModEnd> ; TYPE_3 VAR_134 <S2SV_ModStart> TYPE_13 VAR_82 ; TYPE_14 <S2SV_ModEnd> * const VAR_136 <S2SV_ModStart> VAR_141 ) ; VAR_75 = VAR_136 -> VAR_142 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( VAR_75 <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> "\\n" ) ; <S2SV_ModEnd> for ( VAR_134 <S2SV_ModStart> ; VAR_134 < VAR_141 -> spatial_layers <S2SV_ModEnd> ; ++ VAR_134 <S2SV_ModStart> VAR_134 ) { <S2SV_ModEnd> METHOD_9 ( VAR_141 <S2SV_ModStart> } VAR_136 -> VAR_142 <S2SV_ModEnd> = 0 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_11 <S2SV_ModEnd> METHOD_0 ( TYPE_6 <S2SV_ModStart> TYPE_6 * VAR_36 , TYPE_10 VAR_38 <S2SV_ModStart> 5 ) { if ( VAR_38 < 1 ) return VAR_39 ; VAR_38 -- ; <S2SV_ModStart> 4 ; } if ( VAR_38 < VAR_32 ) return VAR_39 ; VAR_38 -= VAR_32 ; <S2SV_ModStart> } else { if ( VAR_38 < 1 ) return VAR_39 ; VAR_38 -- ; * VAR_36 ++ = VAR_34 ; VAR_35 -- ; } } if ( ( VAR_38 < 4 ) || ( VAR_35 < 4 ) ) return VAR_39 ; METHOD_2 ( VAR_36 , VAR_37 , 4 ) ; return VAR_40 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> = VAR_199 ; <S2SV_ModEnd> METHOD_6 ( VAR_200
<S2SV_ModStart> const TYPE_11 * VAR_70 = * VAR_51 ; const TYPE_11 * VAR_67 = VAR_70 <S2SV_ModEnd> ; TYPE_10 VAR_69 <S2SV_ModStart> VAR_61 ) ; while ( VAR_70 < VAR_49 ) { TYPE_11 VAR_41 = * VAR_70 ++ <S2SV_ModEnd> ; if ( <S2SV_ModStart> if ( ! VAR_55 && VAR_41 == '\\\\' && VAR_70 < VAR_49 ) { VAR_41 = * VAR_70 ++ ; if ( VAR_41 == 'N' ) { if ( VAR_70 < VAR_49 && * VAR_70 ++ == '{' ) { while ( VAR_70 < VAR_49 && * VAR_70 ++ != <S2SV_ModEnd> '}' ) { <S2SV_ModStart> '}' ) { } continue ; } break ; } if ( VAR_41 == '{' && warn_invalid_escape_sequence ( VAR_63 , VAR_64 , VAR_41 ) < 0 ) { return - 1 ; } } <S2SV_ModEnd> if ( VAR_41 <S2SV_ModStart> { if ( VAR_70 < VAR_49 && * VAR_70 == VAR_41 ) { * VAR_51 = VAR_70 + 1 <S2SV_ModEnd> ; VAR_69 = <S2SV_ModStart> '}' ) { * VAR_51 = VAR_70 - 1 ; <S2SV_ModStart> ; } } VAR_70 -- ; <S2SV_ModStart> ; } } * VAR_51 = VAR_70 <S2SV_ModEnd> ; METHOD_4 ( <S2SV_ModStart> ; METHOD_4 ( VAR_70 <S2SV_ModEnd> <= VAR_49 ) <S2SV_ModStart> ; METHOD_4 ( VAR_70 <S2SV_ModEnd> == VAR_49 || <S2SV_ModStart> VAR_49 || * VAR_70 <S2SV_ModEnd> == '{' || <S2SV_ModStart> '{' || * VAR_70 <S2SV_ModEnd> == '}' ) <S2SV_ModStart> ( VAR_67 != VAR_70 <S2SV_ModEnd> ) { if <S2SV_ModStart> ( VAR_67 , VAR_70 <S2SV_ModEnd> - VAR_67 , <S2SV_ModStart> , VAR_67 , VAR_70 <S2SV_ModEnd> - VAR_67 )
<S2SV_ModStart> * VAR_14 , TYPE_5 <S2SV_ModEnd> VAR_16 ) { <S2SV_ModStart> * VAR_13 ; <S2SV_ModEnd> METHOD_5 ( 100 <S2SV_ModStart> 100 , ( "mem_resize(%p,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> ) ) ; if ( ! VAR_16 ) { METHOD_6 ( "mem_resize<S2SV_blank>was<S2SV_blank>not<S2SV_blank>really<S2SV_blank>designed<S2SV_blank>to<S2SV_blank>handle<S2SV_blank>a<S2SV_blank>buffer<S2SV_blank>of<S2SV_blank>size<S2SV_blank>0\\n" "This<S2SV_blank>may<S2SV_blank>not<S2SV_blank>work.\\n" ) ; }
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_10 = VAR_5 ; if ( VAR_13 ) VAR_10 = METHOD_6 ( VAR_2 , VAR_3 , 0 ) ; else
<S2SV_ModStart> , VAR_47 ) || ! VAR_54 -> VAR_33 . VAR_34
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_2 <S2SV_ModEnd> * VAR_5 ) <S2SV_ModStart> * VAR_3 = METHOD_4 <S2SV_ModEnd> ( VAR_5 )
<S2SV_ModStart> VAR_229 += ( ( unsigned TYPE_20 )
<S2SV_ModStart> } if ( METHOD_109 ( VAR_785 ) != VAR_781 ) METHOD_96 ( VAR_749 , "ImproperImageHeader" ) ; if (
<S2SV_ModStart> TYPE_2 * VAR_3 , TYPE_5 VAR_7 <S2SV_ModStart> ) VAR_3 ; if ( VAR_7 < 2 ) { METHOD_1 ( ( VAR_4 , "AVP<S2SV_blank>too<S2SV_blank>short" ) ) ; return ; }
<S2SV_ModStart> * VAR_9 ; TYPE_0 VAR_11 ; <S2SV_ModStart> VAR_7 ) ; VAR_11 = METHOD_3 ( VAR_9 ) ; if ( METHOD_4 ( VAR_7 ) < VAR_11 || <S2SV_ModEnd> METHOD_3 ( VAR_8 <S2SV_ModStart> VAR_8 ) != VAR_11 <S2SV_ModEnd> ) return -
<S2SV_ModStart> TYPE_6 VAR_13 = METHOD_4 <S2SV_ModEnd> ( VAR_6 ,
<S2SV_ModStart> -> VAR_264 = 00 ; if ( VAR_220 <= ( VAR_281 / ( VAR_277 -> VAR_102 + 1U ) ) ) { VAR_265 -> VAR_264 = <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> VAR_2 ) , "crypto-%s" <S2SV_ModEnd> , VAR_2 )
<S2SV_ModStart> VAR_42 = 0 ; TYPE_1 VAR_47 <S2SV_ModStart> -> VAR_36 ; for ( VAR_47 = 0 ; VAR_47 < 3 ; VAR_47 ++ ) <S2SV_ModStart> ( STRUCT_OR_UNION_10 , VAR_47 <S2SV_ModEnd> , STRUCT_OR_UNION_10 -> <S2SV_ModStart> . VAR_40 [ VAR_47 <S2SV_ModEnd> ] . VAR_41
<S2SV_ModStart> * VAR_120 , TYPE_29 * VAR_128 , TYPE_30 * VAR_129 , TYPE_14 VAR_124 , TYPE_4 * * VAR_123 ) { TYPE_31 * const VAR_105 = & VAR_120 -> VAR_105 ; TYPE_5 * const VAR_117 = & VAR_120 -> VAR_6 ; <S2SV_ModEnd> TYPE_2 * const <S2SV_ModStart> TYPE_2 * const VAR_130 = & VAR_129 -> VAR_130 ; TYPE_32 * const VAR_131 = & VAR_128 -> VAR_44 ; TYPE_6 * const VAR_17 = & VAR_131 -> VAR_10 ; TYPE_14 TYPE_28 ; METHOD_17 ( & VAR_17 -> VAR_14 , 0 , sizeof ( <S2SV_ModEnd> VAR_17 -> VAR_14 <S2SV_ModStart> VAR_17 -> VAR_14 ) ) ; METHOD_17 ( VAR_17 -> VAR_18 <S2SV_ModStart> ( VAR_17 -> VAR_18 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( TYPE_28 = VAR_130 <S2SV_ModEnd> -> VAR_20 ; <S2SV_ModStart> ; TYPE_28 < VAR_130 <S2SV_ModEnd> -> VAR_22 ; <S2SV_ModStart> VAR_23 ) { const struct STRUCT_OR_UNION_0 * const VAR_132 = & VAR_117 -> VAR_132 ; TYPE_33 VAR_133 <S2SV_ModEnd> ; const TYPE_14 <S2SV_ModStart> TYPE_17 * * VAR_134 <S2SV_ModEnd> = VAR_117 -> <S2SV_ModStart> + VAR_37 ; TYPE_34 VAR_83 = VAR_105 -> VAR_83 <S2SV_ModEnd> ; TYPE_18 VAR_94 <S2SV_ModStart> ; TYPE_18 VAR_94 = VAR_125 ; TYPE_14 seg_skip = 0 ; VAR_131 -> <S2SV_ModEnd> VAR_41 = VAR_42 <S2SV_ModStart> ; METHOD_3 ( VAR_131 -> <S2SV_ModEnd> VAR_45 ) ; <S2SV_ModStart> VAR_45 ) ; vp9_rd_cost_init ( & VAR_133 ) ; VAR_131 -> color_sensitivity [ 0 ] = 0 ; VAR_131 -> color_sensitivity [ 1 ] = 0 ; if ( VAR_132 -> enabled ) { const uint8_t * const map = VAR_132 -> update_map ? VAR_120 -> segmentation_map : VAR_117 -> last_frame_seg_map ; TYPE_14 segment_id = get_segment_id ( VAR_117 , map , VAR_125 , VAR_124 , TYPE_28 ) ; seg_skip = segfeature_active ( VAR_132 , segment_id , SEG_LVL_SKIP ) ; if ( seg_skip ) { VAR_83 = VAR_84 ; } } switch ( <S2SV_ModEnd> VAR_83 ) { <S2SV_ModStart> ( VAR_120 , VAR_130 , VAR_131 <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> ( VAR_120 , VAR_128 , VAR_129 , VAR_134 <S2SV_ModEnd> , VAR_123 , <S2SV_ModStart> , TYPE_28 , VAR_125 , <S2SV_ModEnd> 1 , & <S2SV_ModStart> 1 , & VAR_133 , VAR_128 -> VAR_135 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_61 : <S2SV_ModEnd> METHOD_7 ( VAR_120 <S2SV_ModStart> ( VAR_120 , VAR_130 , VAR_131 , VAR_134 <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> ( VAR_120 , VAR_128 , VAR_129 , VAR_134 <S2SV_ModEnd> , VAR_123 , <S2SV_ModStart> , TYPE_28 , VAR_125 , <S2SV_ModEnd> 1 , & <S2SV_ModStart> 1 , & VAR_133 , VAR_128 -> VAR_135 <S2SV_ModEnd> ) ; break <S2SV_ModStart> ; break ; <S2SV_ModEnd> case VAR_84 : <S2SV_ModStart> case VAR_84 : if ( ! seg_skip ) VAR_94 = VAR_105 -> VAR_87 <S2SV_ModEnd> ; METHOD_10 ( <S2SV_ModStart> ( VAR_120 , VAR_130 , VAR_134 <S2SV_ModEnd> , VAR_124 , <S2SV_ModStart> ( VAR_120 , VAR_128 , VAR_129 , VAR_134 <S2SV_ModEnd> , VAR_123 , <S2SV_ModStart> , TYPE_28 , VAR_125 , <S2SV_ModEnd> 1 , & <S2SV_ModStart> 1 , & VAR_133 , VAR_128 -> VAR_135 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_103 : METHOD_6 ( VAR_120 , VAR_130 , VAR_131 , VAR_124 , TYPE_28 , VAR_125 ) ; <S2SV_ModStart> ( VAR_120 -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && VAR_117 -> VAR_132 . enabled && VAR_17 -> VAR_134 [ 0 ] -> mbmi . segment_id ) { if ( VAR_117 -> width <= 352 && VAR_117 -> height <= 288 ) VAR_131 -> max_partition_size = BLOCK_32X32 ; else VAR_131 -> max_partition_size = VAR_125 ; VAR_131 -> min_partition_size = BLOCK_8X8 ; <S2SV_ModEnd> METHOD_13 ( VAR_120 <S2SV_ModStart> ( VAR_120 , VAR_128 , VAR_129 <S2SV_ModEnd> , VAR_123 , <S2SV_ModStart> , TYPE_28 , VAR_125 , & VAR_133 <S2SV_ModEnd> , 1 , <S2SV_ModStart> 1 , VAR_116 , VAR_128 -> VAR_135 <S2SV_ModStart> } else { METHOD_4 ( VAR_120 , VAR_130 , VAR_131 , VAR_124 , TYPE_28 ) ; if ( VAR_117 -> frame_type == KEY_FRAME ) <S2SV_ModEnd> METHOD_15 ( VAR_120 <S2SV_ModStart> ( VAR_120 , VAR_128 , VAR_129 , VAR_134 <S2SV_ModEnd> , VAR_123 , <S2SV_ModStart> 1 , & VAR_133 , VAR_128 -> VAR_135 ) ; else nonrd_select_partition ( VAR_120 , VAR_128 , VAR_129 , VAR_134 , VAR_123 , VAR_124 , TYPE_28 , VAR_125 , 1 , & VAR_133 , VAR_128 -> VAR_135 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ) ; break ;
<S2SV_ModStart> 1 ) ; if ( ! <S2SV_ModStart> , VAR_47 ) ) { if ( VAR_78 == 0 ) VAR_78 = - VAR_79 ; break ; } <S2SV_ModEnd> VAR_63 = VAR_77
<S2SV_ModStart> ) , & VAR_13 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> = VAR_8 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & VAR_13 , "/etc" , ".vipw" <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> ; if ( VAR_310 == 1 && <S2SV_ModStart> else if ( VAR_310 == 8 &&
<S2SV_ModStart> ; TYPE_53 VAR_1191 ; const TYPE_62 * VAR_1223 = METHOD_92 ( VAR_1217 , VAR_1095 -> VAR_1099 . VAR_1100 ) <S2SV_ModStart> , VAR_1212 , VAR_1223 ,
<S2SV_ModStart> VAR_10 ) ; VAR_37 -> VAR_26 = VAR_27 ;
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_14 ; METHOD_2 ( & VAR_14 , 0 , sizeof ( VAR_14 ) ) ; VAR_14 <S2SV_ModEnd> . VAR_6 = <S2SV_ModStart> VAR_9 -> VAR_6 ; VAR_14 <S2SV_ModEnd> . VAR_7 = <S2SV_ModStart> VAR_10 == VAR_11 <S2SV_ModEnd> ; if (
<S2SV_ModStart> STRUCT_OR_UNION_4 , struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * * VAR_17 <S2SV_ModStart> VAR_17 , struct STRUCT_OR_UNION_5 <S2SV_ModEnd> * VAR_18 , <S2SV_ModStart> ) VAR_18 -> VAR_18 . <S2SV_ModStart> ; VAR_18 -> VAR_18 . <S2SV_ModStart> ( STRUCT_OR_UNION_4 , & VAR_18 ->
<S2SV_ModStart> -> VAR_136 ; VAR_194 -> VAR_196 = VAR_194 -> VAR_197 ; VAR_194 -> VAR_192 = 0 ; VAR_194 -> VAR_136 = 0 ; VAR_194 -> VAR_197 = 0 ; <S2SV_ModStart> -> VAR_138 ; VAR_194 -> VAR_197 = VAR_194 -> VAR_196 ;
<S2SV_ModStart> VAR_72 == VAR_165 || METHOD_20 ( VAR_72 ) > VAR_172
<S2SV_ModStart> ( VAR_76 , VAR_77 ? 0 :
<S2SV_ModStart> ) { TYPE_4 <S2SV_ModEnd> VAR_199 , VAR_195
<S2SV_ModStart> , TYPE_2 VAR_20 , TYPE_3 VAR_45 <S2SV_ModStart> ; TYPE_2 VAR_43 ; METHOD_6 ( sizeof ( struct STRUCT_OR_UNION_2 ) > sizeof ( VAR_44 -> VAR_46 ) ) <S2SV_ModStart> VAR_19 = VAR_20 ; VAR_35 -> VAR_45 = VAR_45
<S2SV_ModStart> ) ; } VAR_37 = METHOD_28 ( VAR_200 , VAR_200 -> VAR_167 , VAR_200 -> VAR_171 ) ; if ( VAR_37 == VAR_194 ) { METHOD_29 ( VAR_195 , & VAR_200 -> VAR_195 ) ; return ( METHOD_18 ( VAR_200 ) ) ; }
<S2SV_ModStart> 1 ) ) { METHOD_31 ( & VAR_105 [ 6 ] ) ; <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> , METHOD_220 ( "%2f?" ) , METHOD_220 ( "/?" ) ) ; METHOD_218 ( VAR_345 , VAR_346 , VAR_343 , VAR_342 , METHOD_220 ( "/%2f?" ) , METHOD_220 ( "//?" ) ) ; METHOD_218 ( VAR_345 , VAR_346 , VAR_343 , VAR_342 , METHOD_220 (
<S2SV_ModStart> ; if ( VAR_38 != VAR_45 && <S2SV_ModEnd> ! METHOD_17 (
<S2SV_ModStart> <= VAR_25 - ( TYPE_4 )
<S2SV_ModStart> STRUCT_OR_UNION_7 ) ; <S2SV_ModEnd> METHOD_11 ( VAR_31
<S2SV_ModStart> VAR_44 ) { TYPE_10 VAR_22 ; TYPE_10 <S2SV_ModEnd> VAR_33 ; TYPE_8 <S2SV_ModStart> * VAR_43 ; TYPE_10 <S2SV_ModEnd> VAR_24 ; if
<S2SV_ModStart> = 1 ; if ( VAR_64 -> VAR_65 . VAR_107 >= VAR_108 ) { for ( VAR_72 = 0 ; VAR_72 < VAR_71 / 4 ; VAR_72 ++ ) { METHOD_8 ( VAR_105 , 4 * 8 ) ; } METHOD_8 ( VAR_105 , ( VAR_71 - VAR_72 * 4 ) * 8 ) ; } else { <S2SV_ModStart> VAR_71 ) ; } <S2SV_ModStart> = 1 ; if ( VAR_64 -> VAR_65 . VAR_107 >= VAR_108 ) { for ( VAR_72 = 0 ; VAR_72 < VAR_71 / 4 ; VAR_72 ++ ) { METHOD_8 ( VAR_105 , 4 * 8 ) ; } METHOD_8 ( VAR_105 , ( VAR_71 - VAR_72 * 4 ) * 8 ) ; } else { <S2SV_ModStart> VAR_71 ) ; }
<S2SV_ModStart> * VAR_68 ; if ( ! VAR_70 -> VAR_53 || ! VAR_70 -> VAR_58 ) { METHOD_10 ( & VAR_70 -> VAR_61 , "required<S2SV_blank>endpoint<S2SV_blank>is<S2SV_blank>missing\\n" ) ; return - VAR_72 ; }
<S2SV_ModStart> < 0 ) { METHOD_49 ( VAR_280 ) ; <S2SV_ModStart> goto VAR_284 ; }
<S2SV_ModStart> -> VAR_3 ; METHOD_2 ( ) ;
<S2SV_ModStart> ; if ( ( <S2SV_ModStart> VAR_39 == VAR_33 ) || ( <S2SV_ModEnd> VAR_36 < 16 <S2SV_ModStart> VAR_36 < 16 ) || ( <S2SV_ModEnd> VAR_36 > 256 <S2SV_ModStart> VAR_36 > 256 )
<S2SV_ModStart> TYPE_7 VAR_32 = METHOD_5 <S2SV_ModEnd> ( VAR_31 ,
<S2SV_ModStart> , VAR_21 ) ; if ( ! VAR_21 ) continue
<S2SV_ModStart> ] == VAR_16 || VAR_18 [ 1 ] == 0 <S2SV_ModStart> ; if ( ! METHOD_5 ( <S2SV_ModStart> [ 2 ] ) <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( ! METHOD_5 ( <S2SV_ModStart> [ 3 ] ) <S2SV_ModEnd> ) return 0
<S2SV_ModStart> = VAR_399 ; METHOD_48 ( VAR_400 -> VAR_401 -> VAR_405 , VAR_400 -> VAR_405 , sizeof ( VAR_400 -> VAR_405 ) ) ;
<S2SV_ModStart> * VAR_27 , TYPE_10 <S2SV_ModEnd> * VAR_61 , <S2SV_ModStart> VAR_5 ) { METHOD_4 <S2SV_ModEnd> ( VAR_27 , <S2SV_ModStart> } else { TYPE_10 <S2SV_ModEnd> VAR_52 [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> TYPE_7 VAR_63 , <S2SV_ModStart> , VAR_65 ; TYPE_10 <S2SV_ModEnd> VAR_56 [ 16 <S2SV_ModStart> ++ VAR_65 ) VAR_52 <S2SV_ModEnd> [ VAR_65 *
<S2SV_ModStart> "@@" ) ) { METHOD_15 ( VAR_270 , VAR_74 , METHOD_64 ( "Invalid<S2SV_blank>Exec<S2SV_blank>argument<S2SV_blank>%s" <S2SV_ModEnd> ) , VAR_238 <S2SV_ModStart> VAR_238 ) ; goto VAR_277 ; }
<S2SV_ModStart> * VAR_20 ; if <S2SV_ModEnd> ( VAR_9 == <S2SV_ModStart> == VAR_6 ) return 0
<S2SV_ModStart> '\\0' ) ; TYPE_11 VAR_77 = - 1 ; TYPE_4 * VAR_55 = VAR_5 ; static const TYPE_3 * VAR_78 = ".new" ; const TYPE_11 VAR_79 = METHOD_5 ( VAR_68 ) ; const TYPE_11 VAR_80 = VAR_79 + METHOD_5 ( VAR_78 ) + 1 ; TYPE_3 * <S2SV_ModEnd> VAR_75 = METHOD_4 <S2SV_ModStart> = METHOD_4 ( VAR_80 ) ; METHOD_36 ( VAR_75 , VAR_80 , "%s%s" , VAR_68 , VAR_78 ) ; TYPE_3 * VAR_81 = METHOD_37 ( VAR_68 ) ; const TYPE_3 * VAR_82 = METHOD_38 ( VAR_81 <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! VAR_82 ) { METHOD_31 ( "%s<S2SV_blank>error<S2SV_blank>extracting<S2SV_blank>directory<S2SV_blank>from<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_68 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } VAR_77 = METHOD_40 ( METHOD_39 ( VAR_82 , VAR_83 ) ) ; if ( VAR_77 < 0 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_82 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } <S2SV_ModEnd> VAR_55 = METHOD_9 <S2SV_ModStart> VAR_50 ) ; if ( <S2SV_ModStart> -> VAR_34 ) < 0 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_75 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } <S2SV_ModEnd> for ( const <S2SV_ModStart> VAR_44 ) ; if ( <S2SV_ModStart> -> VAR_49 ) < 0 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_75 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> VAR_52 ) ) { if ( <S2SV_ModStart> , VAR_55 ) == VAR_84 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_75 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } } } if ( METHOD_42 ( METHOD_41 ( VAR_55 ) ) < 0 ) { METHOD_43 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_75 , METHOD_32 ( VAR_69 ) ) ; } if ( <S2SV_ModEnd> METHOD_26 ( VAR_55 <S2SV_ModStart> ( VAR_55 ) == VAR_84 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_75 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } VAR_55 = VAR_5 <S2SV_ModStart> VAR_73 ; } if ( METHOD_42 ( VAR_77 ) < 0 ) { METHOD_43 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_82 , METHOD_32 ( VAR_69 ) ) ; } if ( METHOD_44 ( VAR_77 ) < 0 ) { METHOD_31 ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , VAR_67 , VAR_82 , METHOD_32 ( VAR_69 ) ) ; goto VAR_73 ; } <S2SV_ModStart> METHOD_35 ( VAR_75 ) ; METHOD_35 ( VAR_81 <S2SV_ModStart> ; VAR_73 : <S2SV_ModEnd> METHOD_34 ( VAR_75 <S2SV_ModStart> VAR_75 ) ; if ( VAR_55 ) METHOD_26 ( VAR_55 ) ; if ( VAR_77 != - 1 ) METHOD_44 ( VAR_77 ) ; <S2SV_ModStart> METHOD_35 ( VAR_75 ) ; METHOD_35 ( VAR_81
<S2SV_ModStart> VAR_52 ) ; VAR_52 += sizeof ( struct STRUCT_OR_UNION_3 ) ; <S2SV_ModStart> > 0 ) { VAR_52 += VAR_53 -> VAR_54 ; break ; } <S2SV_ModEnd> case 2 : <S2SV_ModStart> case 5 : VAR_52 += VAR_53 -> VAR_54 ; if ( VAR_52 > VAR_12 ) return - EIO ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } if (
<S2SV_ModStart> ( VAR_336 [ 4 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> VAR_315 ) { METHOD_102 ( ( VAR_339 , "<S2SV_blank><%s>" , METHOD_62 ( VAR_163 , VAR_331 , METHOD_100 ( & VAR_336 [ 3 ] <S2SV_ModEnd> ) ) )
<S2SV_ModStart> VAR_140 ) ; if ( VAR_141 -> VAR_142 != VAR_144 ) <S2SV_ModStart> ) ; } if ( <S2SV_ModStart> VAR_141 -> VAR_142 != VAR_144 ) VAR_141 -> VAR_142
<S2SV_ModStart> ; TYPE_9 VAR_134 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) ; * VAR_22 = sizeof ( * VAR_104 ) ;
<S2SV_ModStart> VAR_11 ) { <S2SV_ModEnd> if ( ! <S2SV_ModStart> } while ( VAR_11 ) { TYPE_4 VAR_38 = <S2SV_ModEnd> METHOD_5 ( VAR_40 <S2SV_ModStart> ( VAR_40 , VAR_9 , VAR_11 , 1 <S2SV_ModEnd> , 8 ) <S2SV_ModStart> , 8 ) ; VAR_11 <S2SV_ModEnd> -= VAR_38 ; <S2SV_ModStart> -= VAR_38 ; VAR_9 <S2SV_ModEnd> += VAR_38 ; <S2SV_ModStart> VAR_38 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ; TYPE_9 VAR_73 ; TYPE_12 VAR_100 , VAR_101 ; if ( ( VAR_97 = METHOD_11 ( VAR_98 , VAR_93 ) ) == ( TYPE_12 ) - 1 ) return ( VAR_91 ) ; if ( ! METHOD_12 ( * VAR_93 , 1 ) ) return ( VAR_91 ) ; VAR_101 = ( TYPE_12 ) ( VAR_93 - VAR_44 ) ; if ( ( ( VAR_92 = * VAR_93 ++ ) & VAR_65 ) != VAR_65 ) { VAR_95 = 0 ; VAR_99 = VAR_93 + VAR_97 ; } if ( VAR_92 != 0 ) while ( VAR_92 && VAR_93 < <S2SV_ModEnd> VAR_98 -> VAR_79 <S2SV_ModStart> VAR_98 -> VAR_79 ) { if ( ( VAR_92 & VAR_65 ) == VAR_65 ) { if ( ! VAR_95 ) { VAR_99 = VAR_93 + 1 ; VAR_95 = 1 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_91 ) ; VAR_100 = ( ( ( VAR_92 << 8 ) | * VAR_93 ) & 0x3fff ) ; if ( VAR_100 >= VAR_101 ) { METHOD_13 ( ( VAR_98 , "<BAD<S2SV_blank>PTR>" ) ) ; return ( VAR_91 ) ; } VAR_101 = VAR_100 ; VAR_93 = VAR_44 + VAR_100 ; if ( ( VAR_97 = METHOD_11 ( VAR_98 , VAR_93 ) ) == ( TYPE_12 ) - 1 ) return ( VAR_91 ) ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_91 ) ; <S2SV_ModEnd> VAR_92 = * <S2SV_ModStart> VAR_93 ++ ; <S2SV_ModEnd> continue ; } <S2SV_ModStart> += VAR_97 ; <S2SV_ModEnd> METHOD_13 ( ( <S2SV_ModStart> VAR_93 ++ ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> , VAR_156 -> VAR_174 <S2SV_ModEnd> ) ; VAR_166 <S2SV_ModStart> = VAR_156 -> VAR_174 <S2SV_ModEnd> ; while (
<S2SV_ModStart> ( ) ; TYPE_6 VAR_16 ; METHOD_9 ( VAR_11 , "%ssecuritytoken=%s" , METHOD_4 ( VAR_11 ) > 0 ? "&" : "" , METHOD_8 ( VAR_16 ) ) ; <S2SV_ModStart> , "POST<S2SV_blank>%s<S2SV_blank>HTTP/1.0\\r\\n" "Content-Type:<S2SV_blank>application/x-www-form-urlencoded\\r\\n" "Cookie:<S2SV_blank>securitytoken=%s\\r\\n" <S2SV_ModStart> "%s" , VAR_7 , VAR_16
<S2SV_ModStart> != VAR_36 ) { METHOD_9 ( VAR_110 ) ; <S2SV_ModStart> return VAR_37 ; }
<S2SV_ModStart> -> VAR_5 = METHOD_7 <S2SV_ModEnd> ( 1.0f , <S2SV_ModStart> ( 1.0f , METHOD_8 <S2SV_ModEnd> ( 0.0f , <S2SV_ModStart> -> VAR_9 = METHOD_7 <S2SV_ModEnd> ( 1.0f , <S2SV_ModStart> ( 1.0f , METHOD_8 <S2SV_ModEnd> ( 0.0f , <S2SV_ModStart> -> VAR_13 = METHOD_7 <S2SV_ModEnd> ( 1.0f , <S2SV_ModStart> ( 1.0f , METHOD_8 <S2SV_ModEnd> ( 0.0f ,
<S2SV_ModStart> ; if ( VAR_65 -> VAR_42 & VAR_77 ) return VAR_78 ; if (
<S2SV_ModStart> -> VAR_53 = METHOD_5 ( <S2SV_ModStart> VAR_56 -> VAR_53 ) <S2SV_ModStart> -> VAR_57 = METHOD_5 ( <S2SV_ModStart> VAR_56 -> VAR_57 )
<S2SV_ModStart> VAR_24 -> VAR_25 ; TYPE_0 VAR_28 <S2SV_ModStart> ) ) ; for ( VAR_28 = VAR_22 ; VAR_28 < VAR_22 + VAR_23 - 1 ; VAR_28 ++ ) VAR_26 [ VAR_28 ] . VAR_29 = VAR_30 ;
<S2SV_ModStart> ; METHOD_1 ( * VAR_31 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_91 ; } METHOD_21 ( & VAR_89 [ VAR_90 + 2 ] ) ;
<S2SV_ModStart> VAR_26 ; } METHOD_2 <S2SV_ModEnd> ( VAR_43 ->
<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( VAR_32 <S2SV_ModStart> % VAR_35 ) != 0 ) { METHOD_9 ( VAR_29 -> VAR_36 , "PredictorDecodeTile" , "%s" , "occ0%rowsize<S2SV_blank>!=<S2SV_blank>0" ) ; return 0 ; } <S2SV_ModEnd> METHOD_6 ( VAR_27 <S2SV_ModStart> 0 ) { if ( ! <S2SV_ModStart> , VAR_35 ) ) return 0
<S2SV_ModStart> VAR_145 , VAR_47 ; TYPE_10 VAR_186 = 0 <S2SV_ModStart> ) ; } VAR_186 += METHOD_28 ( & VAR_183 -> VAR_176 [ VAR_185 ] ) ; if ( VAR_186 > VAR_187 ) { METHOD_29 ( VAR_172 -> VAR_166 , VAR_183 -> VAR_176 [ VAR_185 ] . VAR_178 ) ; METHOD_24 ( VAR_172 -> VAR_173 , VAR_143 , "ExifMnoteCanon" , "Failsafe<S2SV_blank>tag<S2SV_blank>size<S2SV_blank>overflow<S2SV_blank>(%lu<S2SV_blank>><S2SV_blank>%ld)" , VAR_186 , VAR_187 ) ; break ; }
<S2SV_ModStart> ; if ( VAR_30 -> VAR_37 ||
<S2SV_ModStart> = VAR_6 ; if ( VAR_7 -> VAR_8 ) METHOD_3 ( VAR_7 -> VAR_8 ) ;
<S2SV_ModStart> VAR_709 , VAR_527 , VAR_714 <S2SV_ModStart> VAR_709 , VAR_527 , VAR_714 <S2SV_ModStart> VAR_709 , VAR_527 , VAR_714 <S2SV_ModStart> VAR_709 , 1 , VAR_714 <S2SV_ModStart> VAR_655 , VAR_709 , VAR_714
<S2SV_ModStart> VAR_49 ) { TYPE_13 * VAR_52 = VAR_39 ; TYPE_14 VAR_53 = VAR_6 ; TYPE_14 VAR_54 <S2SV_ModEnd> ; TYPE_11 VAR_37 <S2SV_ModStart> ; TYPE_11 VAR_37 = Curl_urldecode <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> ( VAR_35 , VAR_45 , VAR_53 , & VAR_52 , & VAR_54 , VAR_55 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_37 ) return VAR_39 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * VAR_49 = METHOD_9 ( VAR_54 ) ; return VAR_52 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( ) ; METHOD_17 ( VAR_68 , VAR_66 ) ; <S2SV_ModStart> VAR_60 ; } <S2SV_ModEnd> VAR_63 += VAR_66
<S2SV_ModStart> METHOD_18 ( VAR_105 + VAR_121 -> VAR_110
<S2SV_ModStart> ; VAR_34 -> VAR_83 = VAR_84 ; VAR_34 ->
<S2SV_ModStart> ( VAR_62 , <S2SV_ModEnd> VAR_64 , VAR_61 <S2SV_ModStart> , METHOD_11 , & VAR_67 <S2SV_ModEnd> , VAR_60 ,
<S2SV_ModStart> VAR_25 ; return <S2SV_ModEnd> METHOD_1 ( VAR_30 <S2SV_ModStart> VAR_32 , VAR_33 , 0
<S2SV_ModStart> VAR_193 < VAR_135 + ( VAR_136 != 2 ) <S2SV_ModStart> VAR_169 ) { if ( VAR_193 >= VAR_192 ) return VAR_175 ;
<S2SV_ModStart> VAR_16 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ++ ) { VAR_108 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_109 ++ ;
<S2SV_ModStart> VAR_76 ) ; METHOD_23 ( & VAR_66 ) ; METHOD_33 ( & VAR_76 -> VAR_37 ) ; <S2SV_ModStart> VAR_58 ) { <S2SV_ModEnd> METHOD_25 ( & <S2SV_ModStart> = VAR_65 ; METHOD_34 ( & VAR_63 -> VAR_78 ) ; METHOD_34 ( & VAR_63 -> VAR_79 ) ; } METHOD_35 ( & VAR_76 -> VAR_37 ) ; <S2SV_ModStart> VAR_66 ) ; <S2SV_ModEnd> METHOD_27 ( &
<S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 2 ] <S2SV_ModEnd> ) ; METHOD_17 <S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 3 ] <S2SV_ModEnd> ) ; METHOD_17 <S2SV_ModStart> VAR_76 ; } METHOD_18 ( VAR_74 [ 3 ] <S2SV_ModEnd> ) ; METHOD_17
<S2SV_ModStart> -> VAR_31 ; <S2SV_ModEnd> TYPE_7 * VAR_57 <S2SV_ModStart> * VAR_57 = strdup ( VAR_50 -> VAR_57 ) ; TYPE_7 * VAR_51 = VAR_50 -> VAR_51 ? strdup ( VAR_50 -> VAR_51 ) : VAR_63 <S2SV_ModEnd> ; TYPE_8 VAR_40 <S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_51 && * <S2SV_ModStart> VAR_51 && * <S2SV_ModEnd> VAR_51 ) { <S2SV_ModStart> , "anal.cpu" , <S2SV_ModEnd> VAR_51 ) ; <S2SV_ModStart> VAR_64 , VAR_65 ) ; METHOD_12 ( VAR_51 ) ; METHOD_12 ( VAR_57
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_27 <S2SV_ModEnd> ) { struct <S2SV_ModStart> , * VAR_26 <S2SV_ModEnd> ; METHOD_3 (
<S2SV_ModStart> -> VAR_23 ) { VAR_83 = METHOD_1 ( VAR_134 ) ; if ( VAR_83 < 0 ) { return VAR_141 ; } <S2SV_ModStart> -> VAR_31 = VAR_83 ; } <S2SV_ModEnd> else VAR_134 ->
<S2SV_ModStart> TYPE_5 VAR_59 ; <S2SV_ModEnd> TYPE_10 VAR_22 [ <S2SV_ModStart> VAR_22 [ VAR_7 <S2SV_ModEnd> ] ; VAR_59 <S2SV_ModStart> return VAR_41 ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! parse_netscreen_packet <S2SV_ModEnd> ( VAR_55 -> <S2SV_ModStart> VAR_55 -> VAR_31 <S2SV_ModEnd> , & VAR_55 <S2SV_ModStart> VAR_55 -> VAR_38 , VAR_22
<S2SV_ModStart> 0 ) ; if ( <S2SV_ModStart> . VAR_29 ) < 0 ) return - 1
<S2SV_ModStart> VAR_80 ) { <S2SV_ModEnd> const TYPE_15 VAR_120 <S2SV_ModStart> VAR_194 . VAR_178 ; if ( VAR_120 == 0 ) { METHOD_14 ( VAR_244 -> VAR_172 ) ; VAR_244 -> VAR_172 = VAR_231 ; VAR_244 -> VAR_119 = VAR_120 ; return ; } const TYPE_14 VAR_103 = VAR_232 -> VAR_194 . VAR_195 - VAR_244 -> VAR_86 ; const TYPE_14 VAR_104 = VAR_232 -> VAR_194 . VAR_178 - VAR_244 -> VAR_92
<S2SV_ModStart> : VAR_38 = - VAR_28 ; if ( STRUCT_OR_UNION_9 -> VAR_32 -> METHOD_9 ) { METHOD_8 ( & STRUCT_OR_UNION_9 -> VAR_35 ) ; VAR_38 = <S2SV_ModStart> == 0 ) VAR_38 = <S2SV_ModEnd> STRUCT_OR_UNION_9 -> VAR_32 <S2SV_ModStart> VAR_32 -> METHOD_9 ( STRUCT_OR_UNION_9 , VAR_33 , VAR_34 ) ; METHOD_10 <S2SV_ModEnd> ( & STRUCT_OR_UNION_9 <S2SV_ModStart> VAR_35 ) ; <S2SV_ModEnd> } VAR_36 :
<S2SV_ModStart> -> VAR_111 ) || METHOD_2 ( & VAR_109 -> VAR_110 -> VAR_97 )
<S2SV_ModStart> VAR_5 ) { TYPE_4 <S2SV_ModEnd> VAR_10 ; if <S2SV_ModStart> - METHOD_3 ( VAR_11 <S2SV_ModEnd> , ( ( <S2SV_ModStart> : METHOD_3 ( VAR_11 <S2SV_ModEnd> , VAR_10 )
<S2SV_ModStart> STRUCT_OR_UNION_10 ) ; VAR_201 -> VAR_202 . VAR_125 = 0 ;
<S2SV_ModStart> VAR_7 ] ; if ( VAR_11 == VAR_9 ) { METHOD_2 ( "%s:<S2SV_blank>pci<S2SV_blank>[%s]<S2SV_blank>has<S2SV_blank>wrong<S2SV_blank>bus<S2SV_blank>%d<S2SV_blank>info!\\n" , VAR_29 , VAR_12 -> VAR_30 , VAR_12 -> VAR_7 ) ; return ; } <S2SV_ModEnd> VAR_25 = &
<S2SV_ModStart> , VAR_57 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> sizeof ( VAR_16 ) ) return - 1 ; if ( METHOD_8 ( VAR_20 , ".." ) || METHOD_9 ( VAR_20 , '/'
<S2SV_ModStart> ; METHOD_5 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ! METHOD_5 ( ( unsigned TYPE_5 )
<S2SV_ModStart> -> VAR_59 , METHOD_16 ( <S2SV_ModStart> ] -> VAR_86 )
<S2SV_ModStart> VAR_46 ) ; * VAR_46 = VAR_44 ;
<S2SV_ModStart> ; VAR_21 = METHOD_17 ( <S2SV_ModStart> , VAR_19 ) )
<S2SV_ModStart> return 1 ; METHOD_21 ( VAR_130 ) ; return 0 <S2SV_ModEnd> ; } if
<S2SV_ModStart> STRUCT_OR_UNION_5 STRUCT_OR_UNION_5 ; if ( VAR_40 > VAR_6 ) { METHOD_9 ( "%s:<S2SV_blank>Too<S2SV_blank>many<S2SV_blank>entries!\\n" , VAR_51 ) ; return - 1 ; } <S2SV_ModEnd> VAR_46 = VAR_40 <S2SV_ModStart> VAR_40 ) ; if ( <S2SV_ModStart> , VAR_40 ) != 0 ) return - 1
<S2SV_ModStart> ( METHOD_1 ( ( unsigned TYPE_2 )
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } if ( ! VAR_124 -> VAR_17 || VAR_124 -> VAR_91 == VAR_82 ) { METHOD_43 ( "%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user" , VAR_128 ) ; goto VAR_127 ; } if (
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_3 , <S2SV_ModStart> TYPE_2 VAR_8 = METHOD_3 <S2SV_ModEnd> ( VAR_3 ,
<S2SV_ModStart> 1 ) ; if ( METHOD_3 ( VAR_49 ) == 0 ) return - 1 ;
<S2SV_ModStart> == VAR_25 ) return VAR_45 <S2SV_ModEnd> ; VAR_36 = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> METHOD_8 ( VAR_44
<S2SV_ModStart> ++ ) { if ( VAR_45 -> VAR_43 ) { <S2SV_ModStart> ) ; } }
<S2SV_ModStart> < 0 ) { METHOD_23 ( VAR_113 ) ; return ; } <S2SV_ModEnd> if ( VAR_103
<S2SV_ModStart> ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 > VAR_3 / VAR_2 ) { return VAR_4 ; } <S2SV_ModEnd> return METHOD_1 ( <S2SV_ModStart> METHOD_1 ( VAR_1 * VAR_2
<S2SV_ModStart> VAR_112 < 1 || VAR_118 -> VAR_112 > VAR_282
<S2SV_ModStart> ) VAR_5 ; return ( TYPE_0 ) ( VAR_12 -> VAR_13 - <S2SV_ModEnd> VAR_10 -> VAR_13 <S2SV_ModStart> VAR_10 -> VAR_13 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_147 , VAR_98 <S2SV_ModEnd> ) ) <
<S2SV_ModStart> ) + VAR_27 ; if ( VAR_20 < sizeof ( * VAR_28 ) ) return VAR_22
<S2SV_ModStart> ( ! TYPE_8 && VAR_40 -> VAR_36 . VAR_32 != VAR_40 -> VAR_41
<S2SV_ModStart> ; if ( VAR_55 < 0 || VAR_55 > VAR_59 ) return - VAR_60 ; if (
<S2SV_ModStart> -> VAR_21 ; VAR_29 = METHOD_4 ( VAR_28 , <S2SV_ModEnd> VAR_28 -> VAR_23 <S2SV_ModStart> VAR_23 . VAR_24 ) ; if ( VAR_29 != VAR_2 ) break <S2SV_ModStart> case 4 : VAR_29 = METHOD_4 ( VAR_28 , <S2SV_ModEnd> VAR_28 -> VAR_23 <S2SV_ModStart> VAR_23 . VAR_24 )
<S2SV_ModStart> VAR_41 . VAR_42 , VAR_69
<S2SV_ModStart> TYPE_10 * VAR_115 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; TYPE_10 * VAR_59 = VAR_180 ; TYPE_10 * <S2SV_ModStart> struct STRUCT_OR_UNION_7 VAR_99 ; TYPE_10 * VAR_119 = VAR_180 <S2SV_ModStart> , VAR_115 , & VAR_59 , 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_176 ) ; if ( VAR_97 ) { METHOD_32 ( "<S2SV_blank>encrypted<S2SV_blank>ticket\\n" ) ; VAR_124 = METHOD_20 ( & VAR_99 , VAR_118 , VAR_115 , & VAR_119 , 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_179 ; } VAR_134 = VAR_119 ; <S2SV_ModStart> VAR_176 ) ; VAR_119 = METHOD_34 ( VAR_124 , VAR_181 ) ; if ( ! VAR_119 ) { VAR_177 = - VAR_182 ; goto VAR_179 ; } VAR_134 = VAR_119 ; <S2SV_ModStart> ; VAR_179 : METHOD_35 ( VAR_119 ) ; METHOD_35 ( VAR_59 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_5 ) ; <S2SV_ModEnd> VAR_7 -> VAR_6
<S2SV_ModStart> -> VAR_27 ; if ( VAR_82 -> VAR_72 -> VAR_73 > 0 ) { TYPE_6 VAR_85 = VAR_82 -> VAR_86 -> VAR_87 ; VAR_88 * VAR_89 ; if ( VAR_85 & VAR_90 ) { if ( VAR_85 & VAR_91 ) { if ( VAR_82 -> VAR_86 -> METHOD_13 != VAR_74 ) VAR_82 -> VAR_86 -> METHOD_13 ( VAR_82 -> VAR_86 , VAR_82 -> VAR_72 ) ; } else { METHOD_14 ( VAR_82 -> VAR_86 , VAR_82 -> VAR_72 ) ; } } if ( ( VAR_89 = METHOD_15 ( VAR_82 -> VAR_72 , 0 ) ) == 0 ) { VAR_80 = VAR_92 ; METHOD_8 ( VAR_54 , VAR_55 ) ; goto VAR_77 ; } METHOD_16 ( VAR_82 -> VAR_72 ) ; VAR_82 -> VAR_72 = VAR_89 ; }
<S2SV_ModStart> VAR_58 ) ; VAR_58 -> VAR_43 = METHOD_18 ( VAR_58 -> VAR_43 ) ;
<S2SV_ModStart> ( ) ; VAR_12 += METHOD_10 ( ) ;
<S2SV_ModStart> VAR_32 ; return ( * VAR_35 != VAR_32 && * VAR_40 != VAR_32 ) <S2SV_ModEnd> ; case VAR_34 <S2SV_ModStart> . VAR_48 ; if ( VAR_52 -> VAR_47 . VAR_39 != VAR_55 && * VAR_35 == VAR_32 ) return VAR_54 ; if ( * VAR_40 == VAR_32 ) return VAR_54 ;
<S2SV_ModStart> -> VAR_19 ) METHOD_3 <S2SV_ModEnd> ( VAR_20 )
<S2SV_ModStart> , VAR_75 ; TYPE_4 * VAR_78 ; TYPE_11 VAR_79 = VAR_49 ; <S2SV_ModStart> 2 ; } if ( METHOD_9 ( METHOD_14 ( VAR_72 , VAR_47 + 3 ) ) == VAR_80 ) { VAR_79 = METHOD_20 ( METHOD_14 ( VAR_72 , VAR_47 + 3 ) ) ; if ( ! VAR_79 ) return VAR_49 ; VAR_47 += 1 ; } <S2SV_ModStart> ; if ( METHOD_21 ( METHOD_14 ( VAR_72 , VAR_47 + 3 ) ) > 1 ) { VAR_78 = METHOD_14 ( METHOD_14 ( VAR_72 , VAR_47 + 3 ) , 1 ) ; if ( METHOD_9 ( VAR_78 ) == VAR_80 ) { if ( VAR_79 != VAR_49 ) { METHOD_22 ( VAR_76 , VAR_72 , "Cannot<S2SV_blank>have<S2SV_blank>two<S2SV_blank>type<S2SV_blank>comments<S2SV_blank>on<S2SV_blank>def" ) ; return VAR_49 ; } VAR_79 = METHOD_20 ( VAR_78 ) ; if ( ! VAR_79 ) return VAR_49 ; } } if ( <S2SV_ModStart> VAR_69 , VAR_70 , VAR_79 <S2SV_ModStart> , VAR_70 , VAR_79 ,
<S2SV_ModStart> VAR_38 = 0 ; if ( ! METHOD_10 ( VAR_39 -> VAR_40 -> VAR_41 , METHOD_9 ( VAR_34 ) ) ) return - VAR_16
<S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> while ( VAR_71
<S2SV_ModStart> = 0 ; VAR_82 -> VAR_169 = 0 ;
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_93 ) && 0 != * VAR_97 && 0 != * VAR_31 && 0 != * VAR_93 ) <S2SV_ModEnd> { * VAR_79
<S2SV_ModStart> -> VAR_761 = 1 <S2SV_ModEnd> ; VAR_786 -> <S2SV_ModStart> ( VAR_666 ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> VAR_14 ) { TYPE_0 VAR_18 = VAR_17 ; <S2SV_ModStart> ) ) ) VAR_18 = <S2SV_ModStart> ) ; return VAR_18 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 0 ) ; if ( ! VAR_38 ) return - VAR_59 ;
<S2SV_ModStart> : if ( VAR_75 -> VAR_61 . VAR_76 + VAR_64 >= VAR_75 -> VAR_61 . VAR_77 ) METHOD_10 ( VAR_75 , VAR_64 ) ; if ( VAR_64 > VAR_75 -> VAR_61 . VAR_77 <S2SV_ModEnd> ) { METHOD_7 <S2SV_ModStart> > VAR_75 -> VAR_61 . VAR_78 ) VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> += METHOD_8 ( <S2SV_ModStart> VAR_75 -> VAR_61 . VAR_79 + VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> , 1 , <S2SV_ModStart> - VAR_75 -> VAR_61 . VAR_78 , VAR_75 ) ; VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> = VAR_64 ; <S2SV_ModStart> ( VAR_75 -> VAR_61 . VAR_76 + VAR_64 >= VAR_75 -> VAR_61 . VAR_77 ) METHOD_10 ( VAR_75 , VAR_64 ) ; if ( VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> + VAR_64 < <S2SV_ModStart> ( VAR_75 -> VAR_61 . VAR_76 >= VAR_75 -> VAR_61 . VAR_77 <S2SV_ModEnd> ) { METHOD_7 <S2SV_ModStart> ( VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> + VAR_64 <= <S2SV_ModStart> <= VAR_75 -> VAR_61 . VAR_78 ) { VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> += VAR_64 ; <S2SV_ModStart> ( VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> + VAR_64 > <S2SV_ModStart> + VAR_64 > VAR_75 -> VAR_61 . VAR_77 ) { VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> = VAR_75 -> <S2SV_ModStart> = VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> ; VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> += METHOD_8 ( <S2SV_ModStart> VAR_75 -> VAR_61 . VAR_79 + VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> , 1 , <S2SV_ModStart> ( VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> - VAR_75 -> <S2SV_ModStart> - VAR_75 -> VAR_61 . VAR_76 ) , VAR_75 ) ; VAR_75 -> VAR_61 . VAR_76 <S2SV_ModEnd> = VAR_75 -> <S2SV_ModStart> = VAR_75 -> VAR_61 . VAR_78 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> VAR_98 ; } METHOD_16 ( STRUCT_OR_UNION_37 ) ; METHOD_17 ( STRUCT_OR_UNION_37 ) ; METHOD_22 ( & METHOD_39 ( STRUCT_OR_UNION_37 ) -> VAR_101 ) ; <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> VAR_57 = METHOD_18 <S2SV_ModStart> ) ; goto VAR_102 <S2SV_ModEnd> ; } METHOD_22 <S2SV_ModStart> VAR_96 ) ; VAR_102 : METHOD_38 ( & METHOD_39 ( STRUCT_OR_UNION_37 ) -> VAR_101 ) ; <S2SV_ModEnd> METHOD_45 ( STRUCT_OR_UNION_37
<S2SV_ModStart> TYPE_33 VAR_356 ; TYPE_25 * * VAR_497 ; TYPE_33 * VAR_169 <S2SV_ModEnd> ; TYPE_33 VAR_278 <S2SV_ModStart> VAR_362 ) ; VAR_169 = METHOD_17 ( sizeof ( TYPE_33 ) * VAR_362 ) ; <S2SV_ModStart> -= 4 ; VAR_84 <S2SV_ModEnd> = * VAR_166 <S2SV_ModStart> << 24 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> << 16 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> << 8 ; VAR_84 <S2SV_ModEnd> |= * VAR_166 <S2SV_ModStart> ( VAR_168 < VAR_84 <S2SV_ModEnd> ) { METHOD_30 <S2SV_ModStart> } if ( VAR_84 <S2SV_ModEnd> < 3 ) <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 3 ] <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 2 ] <S2SV_ModStart> ( VAR_166 [ VAR_84 <S2SV_ModEnd> - 1 ] <S2SV_ModStart> = VAR_166 ; VAR_169 [ VAR_466 ] = VAR_84 ; VAR_166 += VAR_84 <S2SV_ModEnd> ; VAR_168 -= <S2SV_ModStart> ; VAR_168 -= VAR_84 <S2SV_ModEnd> ; VAR_494 [ <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_466 ] , VAR_169 [ VAR_466 ] , <S2SV_ModStart> += 3 ; VAR_169 [ VAR_466 ] -= 3 ; <S2SV_ModStart> += VAR_417 ; VAR_169 [ VAR_466 ] -= VAR_417 ; <S2SV_ModStart> { do { if ( ! VAR_169 [ VAR_466 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_169 [ VAR_466 ] ) { METHOD_30 ( VAR_475 , VAR_476 , VAR_161 , "(too<S2SV_blank>short)" , 0 ) ; goto VAR_492 ; } <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_466 ] , VAR_169 [ VAR_466 ] , <S2SV_ModStart> += VAR_417 ; VAR_169 [ VAR_466 ] -= VAR_417 ; <S2SV_ModStart> { do { if ( ! VAR_169 [ VAR_466 ] ) break ; <S2SV_ModStart> ] ++ ; VAR_169 [ VAR_466 ] -- ; <S2SV_ModStart> ) ; } if ( ! VAR_169 [ VAR_466 ] ) { METHOD_30 ( VAR_475 , VAR_476 , VAR_161 , "(too<S2SV_blank>short)" , 0 ) ; goto VAR_492 ; } <S2SV_ModStart> VAR_466 ] ++ ; VAR_169 [ VAR_466 ] -- <S2SV_ModStart> VAR_497 ) ; METHOD_36 ( VAR_169 ) ;
<S2SV_ModStart> = METHOD_13 ( TYPE_19 <S2SV_ModEnd> , VAR_363 * <S2SV_ModStart> = METHOD_13 ( TYPE_19 <S2SV_ModEnd> , VAR_363 *
<S2SV_ModStart> * VAR_255 ; unsigned TYPE_5 VAR_257 ; <S2SV_ModStart> -> VAR_139 ; VAR_257 = METHOD_39 ( VAR_252 -> VAR_38 ) ; if ( sizeof ( * VAR_252 ) + VAR_257 > VAR_251 -> VAR_258 ) { METHOD_50 ( VAR_251 , "error<S2SV_blank>loading<S2SV_blank>logical<S2SV_blank>volume<S2SV_blank>descriptor:<S2SV_blank>" "Partition<S2SV_blank>table<S2SV_blank>too<S2SV_blank>long<S2SV_blank>(%u<S2SV_blank>><S2SV_blank>%lu)\\n" , VAR_257 , VAR_251 -> VAR_258 - sizeof ( * VAR_252 ) ) ; goto VAR_254 ; } <S2SV_ModStart> && VAR_168 < VAR_257 <S2SV_ModEnd> ; VAR_231 ++
<S2SV_ModStart> TYPE_9 VAR_59 ; VAR_115 = 0 ; VAR_114 = 0 ; <S2SV_ModStart> "cannot<S2SV_blank>get<S2SV_blank>header\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } METHOD_8 <S2SV_ModStart> "cannot<S2SV_blank>get<S2SV_blank>info\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } METHOD_8 <S2SV_ModStart> 1 , ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%ld;<S2SV_blank>width<S2SV_blank>%ld;<S2SV_blank>height<S2SV_blank>%ld;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%ld;<S2SV_blank>siz<S2SV_blank>%ld;<S2SV_blank>hres<S2SV_blank>%ld;<S2SV_blank>vres<S2SV_blank>%ld;<S2SV_blank>numcolors<S2SV_blank>%ld;<S2SV_blank>" "mincolors<S2SV_blank>%ld\\n" , JAS_CAST ( TYPE_9 <S2SV_ModEnd> , VAR_114 -> <S2SV_ModStart> VAR_114 -> VAR_27 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_81 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_85 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_33 ) , JAS_CAST ( TYPE_9 , <S2SV_ModEnd> VAR_114 -> VAR_35 <S2SV_ModStart> VAR_114 -> VAR_35 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_37 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_39 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_41 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_114 -> VAR_43 ) , JAS_CAST ( TYPE_9 , <S2SV_ModEnd> VAR_114 -> VAR_45 <S2SV_ModStart> VAR_114 -> VAR_45 ) , JAS_CAST ( TYPE_9 <S2SV_ModStart> VAR_47 ) ) ) ; if ( VAR_114 -> VAR_81 < 0 || VAR_114 -> VAR_85 < 0 || VAR_114 -> VAR_33 < 0 || VAR_114 -> VAR_35 < 0 || VAR_114 -> VAR_39 < 0 || VAR_114 -> VAR_41 < 0 || VAR_114 -> VAR_43 < 0 ) { METHOD_14 ( "corrupt<S2SV_blank>bit<S2SV_blank>stream\\n" ) ; goto VAR_116 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> "error:<S2SV_blank>unsupported<S2SV_blank>BMP<S2SV_blank>encoding\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> "error:<S2SV_blank>possibly<S2SV_blank>bad<S2SV_blank>bitmap<S2SV_blank>offset?\\n" ) ; goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_116 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { goto VAR_116 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { goto VAR_116 ; } <S2SV_ModStart> VAR_114 ) ; return VAR_115 ; VAR_116 : if ( VAR_114 ) { METHOD_33 ( VAR_114 ) ; } if ( VAR_115 ) { <S2SV_ModStart> VAR_115 ) ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> struct STRUCT_OR_UNION_1 VAR_36 <S2SV_ModEnd> ; METHOD_3 ( <S2SV_ModStart> VAR_28 ) , VAR_10 <S2SV_ModEnd> , VAR_35 , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , VAR_10 <S2SV_ModEnd> , VAR_35 ,
<S2SV_ModStart> VAR_44 , VAR_8 ) ; METHOD_30 ( ) ; METHOD_31 ( 0
<S2SV_ModStart> STRUCT_OR_UNION_3 VAR_27 ; METHOD_7 ( & VAR_27 , 0 , sizeof ( VAR_27 ) ) ; <S2SV_ModStart> ) continue ; METHOD_7 ( & VAR_67 , 0 , sizeof ( VAR_67 ) ) ;
<S2SV_ModStart> , TYPE_16 VAR_434 , const TYPE_36 * VAR_520 <S2SV_ModStart> VAR_463 ) , VAR_520 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ; if ( ( TYPE_99 ) <S2SV_ModStart> ) break ; VAR_1484 = ( TYPE_177 ) <S2SV_ModEnd> VAR_1481 . VAR_1482 <S2SV_ModStart> VAR_1481 . VAR_1482 ; if ( VAR_1484 <S2SV_ModStart> != 0 ) if ( <S2SV_ModEnd> ( VAR_1484 < <S2SV_ModStart> ( VAR_1484 < METHOD_254 ( VAR_1515 ) ) || ( METHOD_246 ( VAR_1515 , VAR_1484 , VAR_1483 ) != VAR_1484 ) <S2SV_ModEnd> ) METHOD_247 ( <S2SV_ModStart> "ImproperImageHeader" ) ; * VAR_1509 = '\\0' ; <S2SV_ModEnd> VAR_1489 = METHOD_248
<S2SV_ModStart> ; VAR_55 -> VAR_76 <S2SV_ModEnd> = VAR_45 ->
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_32 ; METHOD_2 ( VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) <S2SV_ModEnd> ; VAR_32 .
<S2SV_ModStart> != 0 ) { TYPE_2 VAR_20 = METHOD_5 ( VAR_13 ) + VAR_14 ; <S2SV_ModStart> ( VAR_19 , METHOD_6 ( VAR_13 , VAR_20 , <S2SV_ModEnd> VAR_15 , 0 <S2SV_ModStart> ) ) ; }
<S2SV_ModStart> VAR_61 ) ; METHOD_11 ( STRUCT_OR_UNION_8 , VAR_61 , VAR_64 ) ; <S2SV_ModStart> VAR_68 , VAR_69 - VAR_67 -> VAR_68
<S2SV_ModStart> 0x00 } ; if ( VAR_15 -> VAR_16 > sizeof ( VAR_17 ) - 4 ) return - VAR_20 ;
<S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 3 <S2SV_ModStart> ] << 24 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 2 <S2SV_ModStart> ] << 16 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 1 <S2SV_ModStart> ] << 8 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 0 <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> ; return ( <S2SV_ModEnd> VAR_17 & 0xffffffff <S2SV_ModStart> VAR_17 & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 0 <S2SV_ModStart> ] << 24 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 1 <S2SV_ModStart> ] << 16 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 2 <S2SV_ModStart> ] << 8 ; VAR_17 |= ( unsigned TYPE_7 ) <S2SV_ModEnd> VAR_16 [ 3 <S2SV_ModStart> [ 3 ] ; return <S2SV_ModEnd> ( VAR_17 & <S2SV_ModStart> & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_44 , * VAR_47 <S2SV_ModStart> ; TYPE_3 VAR_42 = - VAR_48 ; TYPE_2 VAR_49 = VAR_19 <S2SV_ModStart> return VAR_19 ; VAR_44 = METHOD_6 ( VAR_43 , VAR_29 ) ; VAR_44 -> VAR_25 = VAR_25 ; VAR_44 -> VAR_27 = VAR_28 ; if ( METHOD_7 ( VAR_29 ) ) goto VAR_42 ; METHOD_9 ( & VAR_40 -> VAR_41 ) ; <S2SV_ModStart> VAR_18 ) ) goto VAR_50 ; VAR_47 = METHOD_14 ( VAR_40 , VAR_25 ) ; if ( VAR_47 ) { if ( VAR_47 -> VAR_27 == VAR_28 ) VAR_49 = VAR_46 ; goto VAR_50 ; } } VAR_49 = VAR_46 ; VAR_42 = METHOD_10 ( VAR_36 , VAR_44 , VAR_38 , VAR_46 ) ; VAR_50 : METHOD_11 ( & VAR_40 -> VAR_41 ) ; METHOD_12 ( ) ; VAR_42 : if ( VAR_42 ) METHOD_13 ( VAR_43 , VAR_44 ) ; return VAR_49 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> VAR_18 = <S2SV_ModEnd> VAR_43 -> VAR_27 <S2SV_ModStart> . VAR_28 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ) { METHOD_8 <S2SV_ModEnd> ( VAR_36 -> <S2SV_ModStart> VAR_27 , "Missing<S2SV_blank>extra<S2SV_blank>info\\n" ) ; METHOD_9 ( VAR_36 <S2SV_ModStart> ++ VAR_39 ; METHOD_8 <S2SV_ModEnd> ( VAR_36 -> <S2SV_ModStart> VAR_40 . VAR_33 ) ; METHOD_9 ( VAR_36
<S2SV_ModStart> ) ) ; VAR_28 -> VAR_37 = 0 ;
<S2SV_ModStart> ) return ; METHOD_6 ( & VAR_34 , 0 , sizeof ( VAR_34 ) ) ;
<S2SV_ModStart> -> VAR_58 ; unsigned <S2SV_ModStart> VAR_54 -> VAR_59 || VAR_35 < sizeof ( struct STRUCT_OR_UNION_6 ) - 1 <S2SV_ModStart> ( VAR_35 - ( <S2SV_ModStart> struct STRUCT_OR_UNION_6 ) - 1 ) <S2SV_ModEnd> ) / VAR_54
<S2SV_ModStart> VAR_40 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_0 VAR_51 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_51 ) ; <S2SV_ModEnd> return VAR_58 ;
<S2SV_ModStart> VAR_198 = VAR_22 ; return ; } if ( METHOD_35 ( VAR_134 -> VAR_25 ) < VAR_28 ) { METHOD_30 ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n" )
<S2SV_ModStart> return VAR_5 ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ; VAR_66 = METHOD_17 <S2SV_ModEnd> ( & VAR_43 <S2SV_ModStart> 0 VAR_32 = METHOD_17 <S2SV_ModEnd> ( & VAR_43 <S2SV_ModStart> ; VAR_34 = METHOD_17 <S2SV_ModEnd> ( & VAR_43 <S2SV_ModStart> endif VAR_47 = METHOD_17 <S2SV_ModEnd> ( & VAR_43 <S2SV_ModStart> ; VAR_49 = METHOD_17 <S2SV_ModEnd> ( & VAR_43
<S2SV_ModStart> ; TYPE_5 VAR_41 ; if ( METHOD_6 ( ! METHOD_5 ( VAR_4 ) ) ) return - VAR_42
<S2SV_ModStart> == VAR_4 ) * VAR_14 = METHOD_4 <S2SV_ModEnd> ( VAR_13 . <S2SV_ModStart> VAR_13 . VAR_8 ) ; else <S2SV_ModEnd> METHOD_3 ( VAR_13 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; TYPE_5 VAR_24 <S2SV_ModEnd> ; VAR_24 =
<S2SV_ModStart> , VAR_57 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> ) ; const TYPE_13 * VAR_136 = VAR_19 ; const <S2SV_ModStart> * VAR_132 = VAR_136 -> VAR_120 <S2SV_ModEnd> ; TYPE_9 VAR_134 <S2SV_ModStart> ; if ( VAR_136 <S2SV_ModEnd> -> VAR_91 ) <S2SV_ModStart> ( VAR_119 , VAR_136 <S2SV_ModEnd> -> VAR_91 -> <S2SV_ModStart> ; VAR_86 < VAR_136 <S2SV_ModEnd> -> VAR_91 -> <S2SV_ModStart> = APR_ARRAY_IDX ( VAR_136 <S2SV_ModEnd> -> VAR_91 , <S2SV_ModStart> } VAR_94 = VAR_136 <S2SV_ModEnd> -> VAR_91 ->
<S2SV_ModStart> ; TYPE_2 VAR_88 = 0 <S2SV_ModStart> &= VAR_8 ; if ( VAR_73 < VAR_89 ) return - VAR_90 <S2SV_ModEnd> ; VAR_26 =
<S2SV_ModStart> , TYPE_6 VAR_75 , const TYPE_5 * VAR_85 <S2SV_ModStart> endif if ( safe_mount <S2SV_ModEnd> ( VAR_82 , <S2SV_ModStart> VAR_73 , VAR_74 , VAR_85 <S2SV_ModStart> , VAR_74 ) < 0
<S2SV_ModStart> return ( METHOD_212 ( VAR_1312 ) ) ; } VAR_1300 = METHOD_213 ( VAR_1312 , VAR_1312 -> VAR_1277 , VAR_1312 -> VAR_1262 ) ; if ( VAR_1300 == VAR_1306 ) { METHOD_214 ( VAR_1307 , & VAR_1312 -> VAR_1307 ) ; return ( METHOD_9
<S2SV_ModStart> VAR_22 = - 1LL <S2SV_ModEnd> ; ++ VAR_29 <S2SV_ModStart> VAR_25 -> VAR_26 = METHOD_4 ( VAR_29 , VAR_25 -> VAR_26 ) <S2SV_ModEnd> ; } METHOD_3
<S2SV_ModStart> ! VAR_53 ) { if ( ! VAR_94 ) METHOD_19 ( METHOD_18 ( "url<S2SV_blank>has<S2SV_blank>no<S2SV_blank>scheme:<S2SV_blank>%s" ) , VAR_93 ) ; return - 1 ; } <S2SV_ModEnd> VAR_40 = VAR_53
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_20 <S2SV_ModEnd> ) { static <S2SV_ModStart> ; METHOD_5 ( VAR_20 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> -> VAR_13 ; TYPE_2 VAR_62 = <S2SV_ModEnd> VAR_61 -> VAR_52 <S2SV_ModStart> VAR_42 & VAR_43 ; if ( VAR_61 -> VAR_56 && VAR_36 > 0 ) { METHOD_1 ( VAR_61 -> VAR_30 ) ; VAR_36 = METHOD_2 ( VAR_61 -> VAR_60 , VAR_36 , & VAR_61 -> VAR_26 ) ; if ( METHOD_3 ( & VAR_61 -> VAR_26 ) ) VAR_36 = - VAR_28 ; METHOD_4 ( VAR_61 -> VAR_30 ) ; } VAR_61 -> VAR_52 -> METHOD_5 ( VAR_61 -> VAR_52 , VAR_36 , VAR_36 ) ; if ( VAR_61 -> VAR_45 -> VAR_46 && ! VAR_62 <S2SV_ModEnd> ) METHOD_6 ( <S2SV_ModStart> -> VAR_50 ) <S2SV_ModEnd> ; if (
<S2SV_ModStart> ; if ( METHOD_10 ( VAR_98 ) -> VAR_36 & VAR_100 <S2SV_ModEnd> && ! VAR_68
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> struct STRUCT_OR_UNION_5 * VAR_85 ; struct STRUCT_OR_UNION_5 * VAR_84 ; struct STRUCT_OR_UNION_6 * VAR_90 ; TYPE_1 VAR_39 = VAR_35 -> VAR_39 ; TYPE_2 * VAR_89 ; TYPE_3 VAR_91 = 0 ; if ( METHOD_23 ( VAR_92 , & STRUCT_OR_UNION_10 -> VAR_93 ) ) return - VAR_94 ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_16 |= ( METHOD_2 ( TYPE_4 , VAR_11 ) <S2SV_ModEnd> << 24 )
<S2SV_ModStart> VAR_37 ) { if ( VAR_44 -> VAR_45 < VAR_46 ) { METHOD_10 ( VAR_44 ) ; continue ; } <S2SV_ModStart> 2 ] ; if ( VAR_33 == VAR_34 && ( VAR_44 -> VAR_45 <= VAR_47 || VAR_44 -> VAR_21 [ VAR_48 ] != VAR_49 ) ) { METHOD_10 ( VAR_44 ) ; continue ; } <S2SV_ModStart> -> VAR_21 + VAR_50 <S2SV_ModEnd> ) ; VAR_41
<S2SV_ModStart> VAR_213 ) ; METHOD_16 ( STRUCT_OR_UNION_23 , & VAR_222 ) ; <S2SV_ModStart> ) goto VAR_220 <S2SV_ModEnd> ; VAR_224 = <S2SV_ModStart> ; if ( VAR_199 ) { VAR_224 = METHOD_15 ( STRUCT_OR_UNION_23 , & VAR_221 ) ; if ( VAR_224 ) goto VAR_225 ; } if ( <S2SV_ModStart> return 0 ; VAR_225 : METHOD_24 ( VAR_212 ) ;
<S2SV_ModStart> if ( VAR_32 && VAR_32 -> VAR_33 <S2SV_ModEnd> ) { VAR_35
<S2SV_ModStart> VAR_172 ) ; TYPE_25 VAR_175 = VAR_176 ; <S2SV_ModStart> = VAR_166 ; if ( VAR_175 && VAR_151 != VAR_152 ) return - VAR_155 ; <S2SV_ModStart> & VAR_84 ) ; if ( ! VAR_108 && * VAR_82 ) return - VAR_155 <S2SV_ModStart> = '\\0' ; if ( VAR_108 == - 1 ) VAR_175 = VAR_177 ;
<S2SV_ModStart> TYPE_30 * VAR_304 ; if ( VAR_300 < 0 || VAR_300 > 4194304 ) { METHOD_80 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , VAR_311 ) ; return VAR_313 ; } VAR_304
<S2SV_ModStart> } if ( VAR_284 == VAR_305 && VAR_278 == VAR_305 ) { METHOD_30 ( VAR_187 , VAR_46 ) ; goto VAR_296 ; } if ( <S2SV_ModStart> } if ( <S2SV_ModEnd> VAR_278 != VAR_305 <S2SV_ModStart> != VAR_305 ) <S2SV_ModEnd> { VAR_304 =
<S2SV_ModStart> } if ( VAR_80 -> VAR_66 & ( VAR_67 | VAR_60 ) ) { METHOD_28 ( METHOD_27 ( 0 , VAR_74 ) ) ; } if (
<S2SV_ModStart> ; TYPE_6 VAR_43 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_14 ; } if ( VAR_40 > VAR_12 ) { METHOD_1 ( "i2c<S2SV_blank>rd:<S2SV_blank>len=%d<S2SV_blank>is<S2SV_blank>too<S2SV_blank>big!\\n" , VAR_40 ) ; return - VAR_14 ; } <S2SV_ModEnd> METHOD_2 ( & <S2SV_ModStart> VAR_38 ) ; <S2SV_ModEnd> VAR_43 = METHOD_5 <S2SV_ModStart> + VAR_38 , VAR_36 -> VAR_37 <S2SV_ModEnd> , VAR_40 , <S2SV_ModStart> VAR_40 , 0 ) ; if ( ! VAR_43 && VAR_39 && VAR_40 ) METHOD_3 ( VAR_39 , VAR_36 -> VAR_37 , VAR_40
<S2SV_ModStart> VAR_23 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_30
<S2SV_ModStart> VAR_22 -> VAR_23 && VAR_26 < VAR_15
<S2SV_ModStart> VAR_39 ) { TYPE_2 * VAR_31 = VAR_40 ; <S2SV_ModStart> VAR_39 ) ; METHOD_5 ( VAR_40 ) ;
<S2SV_ModStart> == - VAR_311 || VAR_348 == - VAR_349
<S2SV_ModStart> VAR_2 ) ; METHOD_3 ( & VAR_14 ) ; <S2SV_ModStart> METHOD_2 ( VAR_5 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> VAR_13 -- ; } VAR_2 -> VAR_15 -> VAR_16 -> VAR_17 -- ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_4 VAR_46 = METHOD_9 ( <S2SV_ModStart> VAR_31 . VAR_32 , VAR_16 & 0xffff )
<S2SV_ModStart> VAR_12 ) { TYPE_2 <S2SV_ModEnd> VAR_15 = ( <S2SV_ModStart> VAR_15 = ( TYPE_2 <S2SV_ModEnd> ) VAR_12 ->
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_144 , VAR_22
<S2SV_ModStart> if ( ( METHOD_4 ( VAR_127 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_106 < 0 <S2SV_ModEnd> ) || VAR_50
<S2SV_ModStart> -> VAR_118 = METHOD_26 ( <S2SV_ModEnd> sizeof ( VAR_105
<S2SV_ModStart> ! VAR_21 ) || VAR_22 > VAR_28 <S2SV_ModStart> VAR_25 ) ; if ( VAR_27 > ( TYPE_5 ) VAR_22 ) { VAR_27 = - 1 ; METHOD_6 ( VAR_25 ) ; }
<S2SV_ModStart> = METHOD_7 ( ( TYPE_1 struct STRUCT_OR_UNION_3 * * ) <S2SV_ModStart> ( VAR_25 ) { METHOD_9 ( <S2SV_ModEnd> VAR_25 -> VAR_26 <S2SV_ModStart> VAR_25 -> VAR_26 , & VAR_23 -> VAR_27 ) ; METHOD_10 ( VAR_25 <S2SV_ModStart> ) ; } }
<S2SV_ModStart> METHOD_3 ( & VAR_9 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> ; METHOD_5 ( ) ; METHOD_3 ( & VAR_10
<S2SV_ModStart> VAR_1 ) ; METHOD_2 ( "ANOPE_FLAGS_COMPAT" , & VAR_2 . VAR_3 -> VAR_4 , 0 , & VAR_5 , VAR_6 ) ; METHOD_3 ( "nick_can_register" ) ; METHOD_4 ( VAR_7 ) ; METHOD_3 ( "user_can_register" ) ; METHOD_5 ( VAR_7 ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_4 * VAR_13 <S2SV_ModEnd> = ( ( <S2SV_ModStart> ) -> VAR_5 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_3 <S2SV_ModStart> STRUCT_OR_UNION_3 VAR_12 ; if ( VAR_13 -> VAR_14 ) return VAR_15 ; <S2SV_ModStart> & VAR_12 , VAR_13 ->
<S2SV_ModStart> != VAR_46 ) { METHOD_15 ( ) ; <S2SV_ModStart> goto VAR_37 ; } <S2SV_ModStart> ) ) ; METHOD_15 ( ) ;
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_22 , TYPE_4 VAR_25 <S2SV_ModStart> -> VAR_10 , VAR_25 <S2SV_ModEnd> , ( TYPE_4
<S2SV_ModStart> VAR_42 ) { TYPE_5 VAR_47 = 500 ; TYPE_6 * VAR_41 = METHOD_4 ( VAR_47 ) <S2SV_ModEnd> ; TYPE_5 VAR_46 <S2SV_ModStart> ; ) { if ( VAR_46 >= VAR_47 ) { VAR_47 *= 2 ; VAR_41 = METHOD_10 ( VAR_41 , VAR_47 ) ; }
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> METHOD_1 ( & <S2SV_ModStart> -> VAR_3 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> { VAR_161 = METHOD_20 <S2SV_ModEnd> ( METHOD_2 (
<S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 <S2SV_ModStart> : if ( * VAR_167 + VAR_168 < * VAR_167 || <S2SV_ModStart> VAR_168 * 2 < * VAR_167 || * VAR_167 + VAR_168 * 2 <S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 <S2SV_ModStart> VAR_167 + VAR_168 < * VAR_167 || * VAR_167 + VAR_168 > VAR_166 -> VAR_163 ) { METHOD_28 ( "%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" <S2SV_ModEnd> , VAR_169 )
<S2SV_ModStart> ( VAR_118 , VAR_123 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_118 , VAR_124 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_118 , VAR_125 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_118 , VAR_123 ) != ( VAR_126 | VAR_127 | VAR_128 ) <S2SV_ModEnd> ) { return <S2SV_ModStart> ( VAR_118 , VAR_129 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_118 , VAR_130 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_118 , VAR_131 <S2SV_ModEnd> , METHOD_18 ( <S2SV_ModStart> ( VAR_118 , VAR_132 , VAR_133 | VAR_134 | VAR_135 ) ; METHOD_25 ( VAR_118 , VAR_136 , VAR_137 ) ; METHOD_25 ( VAR_118 , VAR_138 , VAR_139 | VAR_140 | VAR_141 | VAR_142 | VAR_143 ) ; METHOD_25 ( VAR_118 , VAR_144 , VAR_145 | VAR_146 | VAR_147 ) ; METHOD_25 ( VAR_118 , VAR_148 , VAR_149 | VAR_150 ) ; METHOD_25 ( VAR_118 , VAR_151 , VAR_152 ) ; METHOD_25 ( VAR_118 , VAR_153 <S2SV_ModEnd> , 1 ) <S2SV_ModStart> ( VAR_118 , VAR_154 , VAR_155 <S2SV_ModEnd> ) ; METHOD_31 <S2SV_ModStart> ( VAR_118 , VAR_154 , VAR_156 <S2SV_ModEnd> ) ; METHOD_31 <S2SV_ModStart> ( VAR_118 , VAR_157 , VAR_158 | VAR_159 | VAR_160 | VAR_161 | VAR_162 | VAR_163 | VAR_164 | VAR_165 | VAR_166 | VAR_167 | VAR_168 | VAR_169 <S2SV_ModEnd> ) ; METHOD_31 <S2SV_ModStart> ( VAR_118 , VAR_170 , VAR_171 | VAR_172 | VAR_173 <S2SV_ModEnd> ) ; METHOD_31 <S2SV_ModStart> ( VAR_118 , VAR_132 , VAR_174 <S2SV_ModEnd> ) ; METHOD_31 <S2SV_ModStart> ( VAR_118 , VAR_138 , VAR_175 <S2SV_ModEnd> ) ; METHOD_33
<S2SV_ModStart> VAR_29 ) ; METHOD_13 ( VAR_39 -> VAR_23 ) ; VAR_39 -> VAR_23 = VAR_15 ;
<S2SV_ModStart> VAR_20 -> VAR_11 ) ; g_byte_array_free ( VAR_20 -> VAR_24 , VAR_25
<S2SV_ModStart> , VAR_15 , VAR_18 <S2SV_ModEnd> , & VAR_17
<S2SV_ModStart> ; if ( METHOD_24 ( STRUCT_OR_UNION_11 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_35 ( VAR_216 , <S2SV_ModEnd> 15 ) && <S2SV_ModStart> METHOD_36 ( VAR_216 , <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_38 ( VAR_216 , <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> METHOD_39 ( 2 , 0 <S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_38 ( 2 , 0 <S2SV_ModStart> METHOD_38 ( 1 , 0 <S2SV_ModStart> METHOD_38 ( 2 , 0 <S2SV_ModStart> METHOD_36 ( VAR_216 , <S2SV_ModEnd> 15 ) ) <S2SV_ModStart> METHOD_35 ( 6 , 0 <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_39 ( VAR_216 , 0 <S2SV_ModStart> METHOD_35 ( 6 , 0 <S2SV_ModStart> METHOD_36 ( 4 , 0 <S2SV_ModStart> METHOD_38 ( VAR_216 , <S2SV_ModEnd> 3 ) ; <S2SV_ModStart> METHOD_39 ( VAR_216 , 0
<S2SV_ModStart> VAR_53 ) ; VAR_118 = <S2SV_ModEnd> METHOD_5 ( VAR_251 <S2SV_ModStart> , VAR_50 ) ; if ( VAR_118 <S2SV_ModStart> { METHOD_78 ( "Bad<S2SV_blank>FIT<S2SV_blank>%s<S2SV_blank>image<S2SV_blank>format!<S2SV_blank>(err=%d)\\n" , VAR_282 , VAR_118 ) ; if ( METHOD_85 ( VAR_317 ) && VAR_118 == - VAR_318 ) METHOD_78 ( "Signature<S2SV_blank>checking<S2SV_blank>prevents<S2SV_blank>use<S2SV_blank>of<S2SV_blank>unit<S2SV_blank>addresses<S2SV_blank>(@)<S2SV_blank>in<S2SV_blank>nodes\\n" <S2SV_ModEnd> ) ; METHOD_69 <S2SV_ModStart> ) ; return VAR_118 <S2SV_ModEnd> ; } METHOD_84
<S2SV_ModStart> { TYPE_4 VAR_20 ; if ( VAR_17 > sizeof VAR_20 . VAR_15 ) return
<S2SV_ModStart> VAR_116 ) ; <S2SV_ModEnd> for ( VAR_121 <S2SV_ModStart> 0x83f ) ; <S2SV_ModEnd> if ( VAR_128
<S2SV_ModStart> VAR_90 && ( VAR_210 - <S2SV_ModStart> * ) VAR_263 > VAR_257 <S2SV_ModEnd> ) ; ++ <S2SV_ModStart> VAR_149 < 1 || ( TYPE_19 * ) VAR_266 - VAR_221 < VAR_149 <S2SV_ModStart> > VAR_210 || VAR_210 - VAR_221 < <S2SV_ModEnd> sizeof ( TYPE_32 <S2SV_ModStart> TYPE_33 ) ) <S2SV_ModEnd> ) { METHOD_49 <S2SV_ModStart> > VAR_210 || VAR_210 - VAR_221 < <S2SV_ModEnd> sizeof ( TYPE_32 <S2SV_ModStart> TYPE_33 ) ) <S2SV_ModEnd> ) { METHOD_49
<S2SV_ModStart> 0 ) { METHOD_4 ( <S2SV_ModStart> VAR_5 , VAR_3 )
<S2SV_ModStart> VAR_48 ++ ) METHOD_20 ( VAR_52 [ VAR_48 ] <S2SV_ModEnd> ) ; VAR_52
<S2SV_ModStart> VAR_123 ) { VAR_140 <S2SV_ModEnd> ; } switch
<S2SV_ModStart> VAR_49 ; } if ( VAR_53 -> VAR_51 < 0 ) VAR_53 -> VAR_51 = 0 ; <S2SV_ModStart> -= VAR_49 ; if ( VAR_54 < 0 ) VAR_54 = 0 ;
<S2SV_ModStart> + VAR_10 ; TYPE_12 VAR_32 = VAR_28 -> VAR_33 < VAR_27 -> VAR_34 ? METHOD_4 ( VAR_27 ) : METHOD_3 ( VAR_27 ) ; <S2SV_ModStart> VAR_23 ) <= VAR_32 <S2SV_ModEnd> * VAR_28 -> <S2SV_ModStart> VAR_23 ) , VAR_32 <S2SV_ModEnd> * VAR_28 -> <S2SV_ModStart> -> VAR_29 , VAR_32 <S2SV_ModEnd> , VAR_28 ->
<S2SV_ModStart> VAR_47 ] ; <S2SV_ModEnd> VAR_513 = VAR_529
<S2SV_ModStart> ; if ( METHOD_6 ( STRUCT_OR_UNION_8 <S2SV_ModEnd> ) ) VAR_23
<S2SV_ModStart> ) -> VAR_46 ; METHOD_12 ( & VAR_67 , 0 , sizeof ( VAR_67 ) )
<S2SV_ModStart> ; TYPE_3 VAR_56 = VAR_62 ; TYPE_3 VAR_58 = VAR_62 <S2SV_ModEnd> ; TYPE_4 VAR_57 <S2SV_ModStart> VAR_54 ) ; VAR_59 : <S2SV_ModStart> VAR_58 ) ; <S2SV_ModEnd> METHOD_11 ( VAR_60
<S2SV_ModStart> -> VAR_145 . VAR_152 = VAR_144 -> VAR_145 . VAR_152 ; VAR_150 -> VAR_145 .
<S2SV_ModStart> } if ( ( VAR_408 < ( sizeof ( struct STRUCT_OR_UNION_4 ) - sizeof ( struct STRUCT_OR_UNION_33 ) ) ) || ( <S2SV_ModStart> ( struct STRUCT_OR_UNION_8 )
<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( VAR_55 <S2SV_ModStart> % VAR_49 ) != 0 ) { METHOD_6 ( VAR_53 -> VAR_26 , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" ) ; return 0 ; } <S2SV_ModEnd> while ( VAR_46
<S2SV_ModStart> VAR_39 ; struct STRUCT_OR_UNION_6 * VAR_38 = VAR_39 -> VAR_37 . VAR_38 ; struct <S2SV_ModStart> = METHOD_1 ( <S2SV_ModEnd> VAR_38 ) ; <S2SV_ModStart> ; METHOD_2 ( <S2SV_ModEnd> VAR_38 ) ; <S2SV_ModStart> ( METHOD_3 ( <S2SV_ModEnd> VAR_38 ) ) <S2SV_ModStart> : METHOD_9 ( <S2SV_ModEnd> VAR_38 ) ;
<S2SV_ModStart> VAR_197 , VAR_36 ) ; METHOD_11 ( VAR_197 , VAR_198
<S2SV_ModStart> VAR_9 , const TYPE_12 * VAR_53 <S2SV_ModEnd> ) { TYPE_5 <S2SV_ModStart> break ; } if ( VAR_53 ) { <S2SV_ModStart> = METHOD_8 ( VAR_53 -> VAR_54 <S2SV_ModEnd> , VAR_41 ) <S2SV_ModStart> - 2 ; } <S2SV_ModStart> , VAR_48 , VAR_53 <S2SV_ModEnd> ) ; METHOD_11
<S2SV_ModStart> VAR_317 , VAR_576 , VAR_473 = 0 <S2SV_ModStart> ! VAR_550 ) VAR_473 = METHOD_59 ( VAR_514 ) ; if ( ( VAR_574 -> VAR_498 & 1 ) && ( VAR_571 -> VAR_473 != VAR_473 ) ) { VAR_574 -> VAR_510 = 1 ; return VAR_511 ; } if ( ! VAR_550 ) <S2SV_ModStart> -> VAR_473 = VAR_473 <S2SV_ModEnd> ; METHOD_60 (
<S2SV_ModStart> -> VAR_23 ) ; if ( VAR_30 ) return - VAR_25
<S2SV_ModStart> * VAR_58 , <S2SV_ModEnd> TYPE_3 VAR_7 ) <S2SV_ModStart> -> VAR_57 ; TYPE_7 <S2SV_ModEnd> * const VAR_48 <S2SV_ModStart> ( VAR_7 , TYPE_7 <S2SV_ModEnd> * ) ; <S2SV_ModStart> * ) ; TYPE_2 VAR_62 , VAR_63 ; for ( VAR_62 = 0 ; VAR_62 < <S2SV_ModEnd> VAR_57 -> VAR_17 <S2SV_ModStart> -> VAR_17 . VAR_61 ; ++ VAR_62 ) { for ( VAR_63 = 0 ; VAR_63 < <S2SV_ModEnd> VAR_57 -> VAR_17 <S2SV_ModStart> -> VAR_17 . VAR_64 ; ++ VAR_63 ) { const TYPE_2 VAR_65 = METHOD_4 ( VAR_62 , VAR_63 , VAR_57 -> VAR_17 . VAR_64 ) ; TYPE_8 * VAR_66 = & VAR_57 -> VAR_17 . VAR_67 [ VAR_65 ] ; VAR_66 -> VAR_68 <S2SV_ModEnd> = VAR_48 -> <S2SV_ModStart> = VAR_48 -> VAR_69 [ VAR_62 ] ; VAR_66 -> VAR_70 <S2SV_ModEnd> = VAR_48 -> <S2SV_ModStart> = VAR_48 -> VAR_71 [ VAR_62 ] ; VAR_66 -> VAR_72 <S2SV_ModEnd> = VAR_48 -> <S2SV_ModStart> = VAR_48 -> VAR_72 [ VAR_62 ] ; VAR_66 -> VAR_73 <S2SV_ModEnd> = VAR_48 -> <S2SV_ModStart> = VAR_48 -> VAR_73 [ VAR_62 ] ; } } <S2SV_ModEnd> return VAR_60 ;
<S2SV_ModStart> VAR_296 , VAR_304 = 1 <S2SV_ModStart> VAR_69 , VAR_59 = VAR_306
<S2SV_ModStart> TYPE_9 VAR_110 = METHOD_5 ( VAR_104 , VAR_114 , 1 , 1 <S2SV_ModEnd> ) ; const <S2SV_ModStart> ++ ) { METHOD_6 <S2SV_ModEnd> ( & VAR_55 <S2SV_ModStart> VAR_114 ] & 0xffffffffffffffffULL <S2SV_ModEnd> ) << VAR_109
<S2SV_ModStart> ( ) ; METHOD_9 ( VAR_15 , METHOD_2 ( VAR_14 ) + METHOD_2 ( VAR_12 ) + 1 , VAR_16 ) ; <S2SV_ModStart> VAR_12 , VAR_14 ) ; METHOD_9 ( VAR_17 , METHOD_2 ( VAR_12 ) + 1 , VAR_16
<S2SV_ModStart> VAR_62 ) { struct STRUCT_OR_UNION_5 * VAR_66 ; <S2SV_ModStart> VAR_64 , VAR_65 ) ; VAR_66 = VAR_61 -> VAR_62 -> METHOD_12 ( VAR_61 , VAR_36 -> VAR_14 -> VAR_67 ) ; METHOD_13 ( VAR_66 , VAR_36 -> VAR_21 , VAR_63 -> VAR_68
<S2SV_ModStart> TYPE_4 VAR_17 ; if ( VAR_16 + sizeof ( VAR_17 ) > VAR_14 -> VAR_11 ) { return ( TYPE_5 ) - 1 ; } <S2SV_ModStart> -> VAR_15 ) <S2SV_ModEnd> ; VAR_17 =
<S2SV_ModStart> VAR_25 ; return <S2SV_ModEnd> METHOD_1 ( VAR_30 <S2SV_ModStart> VAR_32 , VAR_33 , 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_7 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> / 2 ; if ( ! <S2SV_ModStart> , VAR_9 ) ) return 0 <S2SV_ModStart> VAR_11 ) ; return 1 ;
<S2SV_ModStart> { VAR_41 = METHOD_11 <S2SV_ModEnd> ( VAR_41 ,
<S2SV_ModStart> TYPE_1 VAR_23 ; struct STRUCT_OR_UNION_4 * VAR_57 ; <S2SV_ModStart> return 0 ; rcu_read_lock ( ) ; VAR_57 = rcu_dereference ( VAR_28 -> VAR_57 ) ; <S2SV_ModStart> ; if ( VAR_57 && VAR_57 -> VAR_18 . VAR_15 ) VAR_23 = VAR_57 -> VAR_18 . VAR_19 ; METHOD_10 ( ) <S2SV_ModEnd> ; VAR_41 =
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> * VAR_51 ; <S2SV_ModEnd> METHOD_2 ( VAR_47 <S2SV_ModStart> ( VAR_48 ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> ( VAR_48 , "%s%s%d_C_XXXXXX" <S2SV_ModEnd> , VAR_39 , <S2SV_ModStart> VAR_53 -> VAR_42 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> ( TYPE_35 ) sizeof ( TYPE_28 ) || ( ( TYPE_28 * ) VAR_122 ) -> VAR_77 > * VAR_93 -
<S2SV_ModStart> "`%s\'" , VAR_675 ) ; VAR_568 = METHOD_126 ( VAR_568
<S2SV_ModStart> + 1 ; if ( VAR_131 < VAR_76 - 1 ) <S2SV_ModStart> VAR_119 [ VAR_131 + 1
<S2SV_ModStart> VAR_50 ) ; METHOD_18 ( VAR_67 , VAR_68 , VAR_63 ) ;
<S2SV_ModStart> { if ( 3 == <S2SV_ModStart> , VAR_124 ) && 0 != * VAR_41 && 0 != * VAR_138 && 0 != * VAR_124 ) <S2SV_ModEnd> { * VAR_129 <S2SV_ModStart> return ; } METHOD_42 ( 0 != VAR_112 && 0 != VAR_120 ) ;
<S2SV_ModStart> 0x02 ) ; if ( sizeof VAR_64 - 1 < VAR_66 ) return VAR_123 ;
<S2SV_ModStart> TYPE_6 VAR_27 ; TYPE_7 <S2SV_ModEnd> VAR_37 ; TYPE_4 <S2SV_ModStart> ; TYPE_4 VAR_39 ; struct STRUCT_OR_UNION_0 VAR_40 <S2SV_ModStart> return VAR_28 ; VAR_40 = * VAR_39 ; <S2SV_ModStart> VAR_37 ) ; if ( ! METHOD_14 ( VAR_39 , VAR_37 ) ) { METHOD_15 ( "mcs_recv_connect_response(),<S2SV_blank>consume<S2SV_blank>connect<S2SV_blank>id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_40 ) ; }
<S2SV_ModStart> ; VAR_1074 : if ( VAR_1144 == VAR_1203 ) VAR_1144 = "UNKNOWN_REASON" <S2SV_ModEnd> ; if (
<S2SV_ModStart> - VAR_151 ; METHOD_24 ( VAR_162 ) ;
<S2SV_ModStart> * VAR_3 >= 18 <S2SV_ModEnd> && VAR_11 [
<S2SV_ModStart> & VAR_196 ) <S2SV_ModEnd> ) goto VAR_189 <S2SV_ModStart> VAR_161 ; } VAR_208 = METHOD_22 ( & VAR_196 ) ; if ( VAR_208 < 0 ) goto VAR_189 ;
<S2SV_ModStart> ; } } return - 1 ;
<S2SV_ModStart> VAR_42 ) { <S2SV_ModEnd> TYPE_4 VAR_21 ; <S2SV_ModStart> ) ; } smb_ofile_flush ( VAR_42 , <S2SV_ModEnd> VAR_42 -> VAR_32 <S2SV_ModStart> VAR_42 -> VAR_32 <S2SV_ModEnd> ) ; (
<S2SV_ModStart> * VAR_91 ; VAR_92 <S2SV_ModEnd> * VAR_82 ;
<S2SV_ModStart> VAR_10 = VAR_11 ; METHOD_3 ( & VAR_26 -> VAR_26 , 0 , sizeof ( VAR_26 -> VAR_26 ) )
<S2SV_ModStart> ( VAR_304 && ( <S2SV_ModStart> VAR_24 - 1 ) ) || ! METHOD_25 ( VAR_313 , VAR_302 -> VAR_215 , VAR_302 -> VAR_49
<S2SV_ModStart> ) ; } VAR_667 = ( TYPE_59 * ) VAR_722 ; <S2SV_ModStart> VAR_665 ) ; if ( VAR_667 != ( TYPE_59 * ) VAR_722 )
<S2SV_ModStart> { TYPE_9 * VAR_76 , * <S2SV_ModStart> TYPE_8 * VAR_40 ; const TYPE_8 * VAR_77 <S2SV_ModStart> ; if ( VAR_73 >= VAR_40 || <S2SV_ModStart> VAR_69 += 5 ; if ( VAR_73 >= VAR_40 ) break <S2SV_ModStart> - VAR_72 <= METHOD_15 <S2SV_ModEnd> ( VAR_64 ) <S2SV_ModStart> = VAR_72 ; VAR_76 = METHOD_16 ( VAR_73 , VAR_74 , VAR_75 , & VAR_77 ) ; if ( VAR_76 != VAR_75 && VAR_77 != VAR_75 ) { if ( METHOD_17 ( VAR_38 , VAR_1 , * VAR_77 ) < 0 ) { METHOD_18 ( VAR_64 ) ; METHOD_13 ( VAR_76 ) ; return VAR_75 ; } } METHOD_18 ( VAR_64 ) ; return VAR_76 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> { if ( VAR_401 > ( ( VAR_504 - 4 ) - VAR_379 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } if ( <S2SV_ModStart> 0 ) { if ( VAR_447 > ( ( VAR_504 - 4 ) - VAR_436 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } <S2SV_ModStart> 0 ) { if ( VAR_480 > ( ( VAR_504 - 4 ) - VAR_489 ) ) { METHOD_101 ( VAR_506 , VAR_474 , VAR_267 , "%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , VAR_509 ) ; goto VAR_511 ; } <S2SV_ModStart> ( VAR_486 [ VAR_489 <S2SV_ModEnd> ] ) ,
<S2SV_ModStart> TYPE_69 TYPE_69 ; TYPE_70 VAR_310 = 0 ; <S2SV_ModStart> , VAR_196 ; if ( VAR_310 ++ ) { METHOD_51 ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , VAR_305 ) ; return VAR_307 ; }
<S2SV_ModStart> ; TYPE_25 VAR_263 = 0 <S2SV_ModStart> VAR_326 -> VAR_285 || ! VAR_326 -> VAR_262
<S2SV_ModStart> ~ VAR_58 ; METHOD_6 ( & VAR_66 -> VAR_28 ) ; METHOD_6 ( & VAR_66 -> VAR_30 ) ;
<S2SV_ModStart> else if ( VAR_405 && <S2SV_ModStart> else if ( VAR_405 && <S2SV_ModStart> else if ( VAR_405 &&
<S2SV_ModStart> -> VAR_9 ; if ( ! VAR_10 -> VAR_15 ) return - VAR_16 ;
<S2SV_ModStart> ; if ( METHOD_1 ( VAR_95 -> VAR_131 , "srt" ) && METHOD_1 ( VAR_95 -> VAR_131 , "ass" ) ) goto VAR_127 ; if (
<S2SV_ModStart> TYPE_17 VAR_102 ; TYPE_17 VAR_223 ; <S2SV_ModStart> VAR_222 ) ; VAR_223 = METHOD_34 ( ( TYPE_23 * ) VAR_32 , METHOD_20 ( VAR_32 ) + 1 ) ; if ( ! METHOD_35 ( VAR_119 , VAR_223 <S2SV_ModEnd> ) ) { <S2SV_ModStart> if ( VAR_51 != VAR_221 && ! VAR_192 ) { VAR_223 = METHOD_34 ( VAR_51 , METHOD_20 ( VAR_51 ) + 1 ) ; if ( ! METHOD_35 ( VAR_119 , VAR_223 ) <S2SV_ModEnd> ) { VAR_192
<S2SV_ModStart> TYPE_4 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_3 , <S2SV_ModStart> VAR_7 ) { METHOD_2 <S2SV_ModEnd> ( VAR_3 ,
<S2SV_ModStart> VAR_126 ++ = VAR_133 <S2SV_ModEnd> ; METHOD_9 (
<S2SV_ModStart> = VAR_106 ; VAR_106 -> VAR_107 ++ ;
<S2SV_ModStart> case VAR_7 : if <S2SV_ModEnd> ( VAR_14 < <S2SV_ModStart> VAR_15 -> VAR_14 || VAR_16 > VAR_15 -> VAR_16 || VAR_14 > <S2SV_ModEnd> VAR_15 -> VAR_14 <S2SV_ModStart> VAR_15 -> VAR_16 - VAR_16 ) return - VAR_18 ; return <S2SV_ModEnd> 0 ; default
<S2SV_ModStart> = 0 ; METHOD_3 ( * VAR_134 , sizeof ( * VAR_232 ) ) ; <S2SV_ModStart> ) + 4 ; METHOD_70 ( VAR_206 [ 0 ] )
<S2SV_ModStart> * VAR_21 , <S2SV_ModEnd> const TYPE_1 *
<S2SV_ModStart> VAR_71 = 0 <S2SV_ModEnd> ; VAR_49 .
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_1 <S2SV_ModEnd> METHOD_0 ( struct <S2SV_ModStart> -> VAR_4 ; if ( VAR_6 -> VAR_6 > VAR_7 / 2 ) return VAR_8 ; <S2SV_ModStart> VAR_6 ++ ; return VAR_9 ;
<S2SV_ModStart> VAR_92 -> VAR_39 + <S2SV_ModEnd> 1 ) METHOD_6
<S2SV_ModStart> ) return ; METHOD_6 <S2SV_ModEnd> ( & VAR_23 <S2SV_ModStart> ) ) ; METHOD_6 <S2SV_ModEnd> ( & VAR_25
<S2SV_ModStart> VAR_10 ) ; METHOD_10 ( & VAR_17 -> VAR_10 ) ;
<S2SV_ModStart> 0 ; } VAR_613 -> VAR_615 -> VAR_616 = 0 ;
<S2SV_ModStart> ( ! VAR_71 || ! VAR_71 -> VAR_38
<S2SV_ModStart> STRUCT_OR_UNION_6 * STRUCT_OR_UNION_6 , TYPE_1 VAR_10 ) { TYPE_1 VAR_11 = VAR_10 ? VAR_12 : 0 ; <S2SV_ModEnd> TYPE_1 VAR_9 = <S2SV_ModStart> , STRUCT_OR_UNION_6 , VAR_11 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , STRUCT_OR_UNION_6 , VAR_11 | VAR_13 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * METHOD_0 ( <S2SV_ModEnd> unsigned TYPE_0 VAR_9 <S2SV_ModStart> -> VAR_24 . VAR_25 = VAR_26 <S2SV_ModEnd> ; VAR_27 -> <S2SV_ModStart> -> VAR_24 . VAR_22 = METHOD_5 ( ) ; if ( METHOD_6 ( & VAR_27 -> VAR_24 . VAR_22 -> VAR_28 ) > VAR_29 ) { METHOD_7 ( VAR_27 ) ; return METHOD_8 ( - VAR_30 ) ; } <S2SV_ModEnd> return VAR_27 ;
<S2SV_ModStart> [ VAR_90 ] && VAR_94 -> VAR_89 [ VAR_90 ]
<S2SV_ModStart> ] ) ; <S2SV_ModEnd> METHOD_4 ( VAR_17
<S2SV_ModStart> VAR_221 ) { coerce_reg_to_size ( & <S2SV_ModStart> [ VAR_230 ] , VAR_228 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> = 0 ; TYPE_8 <S2SV_ModEnd> VAR_38 , VAR_30
<S2SV_ModStart> VAR_29 ) ; TYPE_9 VAR_41 ; struct STRUCT_OR_UNION_2 * VAR_20 ; if ( ! VAR_40 ) return VAR_44 ; <S2SV_ModEnd> VAR_41 = VAR_29 <S2SV_ModStart> : 1 ; <S2SV_ModEnd> for ( VAR_20
<S2SV_ModStart> { VAR_12 = METHOD_2 ( <S2SV_ModStart> , & VAR_11 )
<S2SV_ModStart> goto VAR_114 ; <S2SV_ModEnd> VAR_116 = -
<S2SV_ModStart> , VAR_102 , VAR_373 ; TYPE_111 VAR_729 , VAR_382 <S2SV_ModEnd> , VAR_673 ; <S2SV_ModStart> ; if ( ( VAR_382 < 0 ) || ( <S2SV_ModStart> ) > VAR_373 ) <S2SV_ModStart> ; if ( ( VAR_382 < 0 ) || ( <S2SV_ModStart> ) > VAR_373 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> TYPE_4 VAR_39 ; if ( ! VAR_34 ) return VAR_42 ; <S2SV_ModStart> == 0 ) { if ( VAR_34 -> VAR_35 -> VAR_43 < VAR_39 ) return VAR_42 ; <S2SV_ModStart> 0xFF ) ; } <S2SV_ModStart> < VAR_39 ) { if ( ! <S2SV_ModStart> VAR_37 ] , VAR_34 -> VAR_35 -> VAR_43 , VAR_39 ) ) return VAR_42 ; } else { if ( VAR_34 -> VAR_35 -> VAR_43 < VAR_39 ) return VAR_42 ; <S2SV_ModEnd> METHOD_3 ( VAR_34 <S2SV_ModStart> VAR_39 ) ; } <S2SV_ModStart> VAR_41 ; } return VAR_44 ;
<S2SV_ModStart> VAR_11 ) { if ( ! METHOD_6 ( STRUCT_OR_UNION_8 ) ) return - VAR_14 ;
<S2SV_ModStart> . VAR_16 = VAR_77 <S2SV_ModEnd> , . VAR_75
<S2SV_ModStart> return - VAR_17 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) -> VAR_94 ) ; * VAR_19 = sizeof ( * VAR_91
<S2SV_ModStart> if ( ! METHOD_74 ( TYPE_19 ) || ! METHOD_74 ( VAR_191 ) || ! METHOD_74 ( VAR_204 ) || ! METHOD_74 ( VAR_205 ) || ! METHOD_74 ( VAR_197 ) || ! METHOD_74 ( VAR_199 ) || ! METHOD_74 ( VAR_201 ) ) { METHOD_72 <S2SV_ModEnd> ( TYPE_19 ) <S2SV_ModStart> ( TYPE_19 ) ; METHOD_72 ( VAR_204 ) ; <S2SV_ModEnd> METHOD_72 ( VAR_205
<S2SV_ModStart> TYPE_5 VAR_22 = METHOD_6 ( <S2SV_ModStart> VAR_23 , VAR_21 )
<S2SV_ModStart> VAR_8 ) { TYPE_2 VAR_10 ; if ( METHOD_3 ( VAR_7 , VAR_8 , & VAR_10 ) ) METHOD_4 ( ) ; TYPE_3 * VAR_9 ; <S2SV_ModEnd> VAR_9 = METHOD_1 <S2SV_ModStart> = METHOD_1 ( VAR_10 <S2SV_ModEnd> ) ; if <S2SV_ModStart> '\\0' , ( VAR_10 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_18 ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_1 ) { <S2SV_ModEnd> METHOD_1 ( VAR_3 <S2SV_ModStart> TYPE_4 * VAR_15 ; if ( lookup_attr_id <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> , & VAR_6 , & VAR_15 ) < 0 ) { <S2SV_ModEnd> return VAR_10 ; <S2SV_ModStart> VAR_15 ) { return METHOD_8 ( "O()N" <S2SV_ModEnd> , METHOD_9 ( <S2SV_ModStart> , VAR_15 ) <S2SV_ModEnd> ; } return
<S2SV_ModStart> ) & VAR_56 , sizeof ( * VAR_56 )
<S2SV_ModStart> VAR_11 ) ; if ( VAR_35 <= 0 || METHOD_7 ( ! TYPE_25 -> VAR_21 ) ) return ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_5 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> * VAR_11 , TYPE_6 * VAR_17 , TYPE_7 <S2SV_ModEnd> * VAR_4 , <S2SV_ModStart> * VAR_4 , TYPE_5 <S2SV_ModEnd> VAR_14 ) { <S2SV_ModStart> ) { const TYPE_5 <S2SV_ModEnd> VAR_16 = METHOD_1 <S2SV_ModStart> VAR_11 -> VAR_6 -> <S2SV_ModEnd> VAR_7 [ VAR_14 <S2SV_ModStart> ] ) ; TYPE_8 * VAR_12 = VAR_17 -> VAR_12 ; if ( VAR_12 ) ++ VAR_12 -> <S2SV_ModEnd> VAR_16 [ VAR_14
<S2SV_ModStart> VAR_5 ) { struct STRUCT_OR_UNION_0 * VAR_6 ; struct STRUCT_OR_UNION_1 * VAR_7 ; VAR_6 = METHOD_2 ( sizeof ( * VAR_6 ) , VAR_8 ) ; if ( ! VAR_6 ) return METHOD_3 ( - VAR_9 ) ; VAR_7 = <S2SV_ModEnd> METHOD_1 ( VAR_3 <S2SV_ModStart> VAR_5 ) ; if ( METHOD_4 ( VAR_7 ) ) { METHOD_5 ( VAR_6 ) ; return METHOD_6 ( VAR_7 ) ; } VAR_6 -> VAR_7 = VAR_7 ; return VAR_6 ;
<S2SV_ModStart> VAR_57 ) ; METHOD_22 ( VAR_37 , VAR_59 , VAR_60 ) ;
<S2SV_ModStart> VAR_38 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> VAR_14 ) { return <S2SV_ModEnd> METHOD_2 ( VAR_13 <S2SV_ModStart> , VAR_14 , VAR_7 -> VAR_5 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( ! VAR_309 <S2SV_ModEnd> && VAR_301 )
<S2SV_ModStart> -> VAR_68 && METHOD_15 ( VAR_69 ) -> VAR_71 <S2SV_ModEnd> ) METHOD_14 (
<S2SV_ModStart> ) ) ; METHOD_5 ( VAR_51 -> VAR_36 , VAR_53 , VAR_44 , METHOD_10 ( VAR_49 , VAR_53 ) ) ;
<S2SV_ModStart> { return VAR_13 ; } if ( VAR_90 > VAR_80 ) { return VAR_100
<S2SV_ModStart> = STRUCT_OR_UNION_11 ; VAR_37 -> VAR_38 = 0 ; VAR_37 -> VAR_39 = 0 ;
<S2SV_ModStart> += VAR_35 ; METHOD_3 ( & VAR_36 -> VAR_37 , 1 ) ;
<S2SV_ModStart> = VAR_215 ; if ( VAR_79 . VAR_80 == 45 ) VAR_285 . VAR_217 = VAR_287 ; else <S2SV_ModStart> = VAR_215 ; if ( VAR_79 . VAR_80 == 62 ) VAR_285 . VAR_217 = VAR_287 ; else
<S2SV_ModStart> ) ; TYPE_3 VAR_25 , <S2SV_ModStart> VAR_17 ) { TYPE_3 VAR_26 = ( VAR_21 + 1 ) >> 1 ; <S2SV_ModStart> = VAR_18 ; METHOD_8 ( VAR_20 , VAR_26 + METHOD_7 ( VAR_21 ) ) ; } VAR_25 = METHOD_9 ( VAR_20 ) ; if ( VAR_25 > 0 ) { METHOD_8 ( VAR_20 , VAR_25 - 1 ) ; <S2SV_ModEnd> METHOD_4 ( METHOD_5
<S2SV_ModStart> struct STRUCT_OR_UNION_3 VAR_25 ; METHOD_6 ( & VAR_25 , 0 , sizeof ( VAR_25 ) )
<S2SV_ModStart> VAR_18 ; struct STRUCT_OR_UNION_2 <S2SV_ModEnd> VAR_16 = { <S2SV_ModStart> } ; struct STRUCT_OR_UNION_2 <S2SV_ModEnd> VAR_24 ; METHOD_1 <S2SV_ModStart> = VAR_16 ; METHOD_9 <S2SV_ModEnd> ( & VAR_16 <S2SV_ModStart> ; VAR_18 = METHOD_10 <S2SV_ModEnd> ( & VAR_16 <S2SV_ModStart> += VAR_18 ; METHOD_11 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += VAR_25 ; METHOD_9 <S2SV_ModEnd> ( & VAR_24
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> VAR_110 , VAR_72 ; TYPE_4 VAR_111 ; TYPE_5 VAR_112 = offsetof ( struct STRUCT_OR_UNION_4 , VAR_91 ) <S2SV_ModStart> VAR_50 ; } if ( VAR_70 -> VAR_113 < sizeof ( struct STRUCT_OR_UNION_4 ) ) { METHOD_19 ( "hid<S2SV_blank>descriptor<S2SV_blank>is<S2SV_blank>too<S2SV_blank>short\\n" ) ; return - VAR_78 ; } <S2SV_ModStart> VAR_70 -> VAR_58 ; VAR_111 = min_t ( TYPE_4 , VAR_70 -> VAR_62 , ( VAR_70 -> VAR_113 - VAR_112 ) / sizeof ( struct STRUCT_OR_UNION_5 ) ) <S2SV_ModStart> ; VAR_72 < VAR_111 <S2SV_ModEnd> ; VAR_72 ++
<S2SV_ModStart> TYPE_16 ) { const struct STRUCT_OR_UNION_3 * VAR_85 ; <S2SV_ModStart> * VAR_77 ; VAR_85 = ( const struct STRUCT_OR_UNION_3 * ) TYPE_28 ; <S2SV_ModStart> METHOD_1 ( * VAR_85 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> * VAR_14 , <S2SV_ModEnd> const TYPE_4 * <S2SV_ModStart> const TYPE_4 * VAR_17 <S2SV_ModEnd> , TYPE_2 * <S2SV_ModStart> VAR_3 ) { <S2SV_ModEnd> METHOD_2 ( VAR_17 <S2SV_ModStart> |= VAR_16 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_84 ; } METHOD_28 ( VAR_88 ) ;
<S2SV_ModStart> STRUCT_OR_UNION_15 ) ; METHOD_9 ( STRUCT_OR_UNION_15 ) ;
<S2SV_ModStart> , VAR_234 ; TYPE_13 <S2SV_ModEnd> VAR_197 , VAR_200 <S2SV_ModStart> , VAR_178 ; TYPE_13 <S2SV_ModEnd> VAR_120 , VAR_149 <S2SV_ModStart> ; VAR_120 = ( TYPE_13 ) VAR_108 + ( TYPE_13 ) <S2SV_ModEnd> VAR_109 ; VAR_155 <S2SV_ModStart> ; VAR_155 = ( TYPE_13 ) VAR_108 - ( TYPE_13 ) <S2SV_ModEnd> VAR_109 ; VAR_121 <S2SV_ModStart> ; VAR_121 = ( TYPE_13 ) VAR_114 + ( TYPE_13 ) <S2SV_ModEnd> VAR_115 ; VAR_162 <S2SV_ModStart> ; VAR_162 = ( TYPE_13 ) VAR_114 - ( TYPE_13 ) <S2SV_ModEnd> VAR_115 ; VAR_230 <S2SV_ModStart> 0 ] = ( TYPE_24 ) METHOD_13 ( VAR_120 , VAR_121 ) <S2SV_ModEnd> ; VAR_197 = <S2SV_ModStart> ; VAR_197 = ( TYPE_13 ) VAR_120 - ( TYPE_13 ) <S2SV_ModEnd> VAR_121 ; VAR_137 <S2SV_ModStart> ; VAR_149 = ( TYPE_13 ) VAR_137 + ( TYPE_13 ) <S2SV_ModEnd> VAR_138 ; VAR_161 <S2SV_ModStart> ; VAR_161 = ( TYPE_13 ) VAR_137 - ( TYPE_13 ) <S2SV_ModEnd> VAR_138 ; VAR_150 <S2SV_ModStart> ; VAR_150 = ( TYPE_13 ) VAR_143 + ( TYPE_13 ) <S2SV_ModEnd> VAR_144 ; VAR_156 <S2SV_ModStart> ; VAR_156 = ( TYPE_13 ) VAR_143 - ( TYPE_13 ) <S2SV_ModEnd> VAR_144 ; VAR_230 <S2SV_ModStart> 1 ] = ( TYPE_24 ) METHOD_13 ( VAR_149 , VAR_150 ) <S2SV_ModEnd> ; VAR_200 = <S2SV_ModStart> ; VAR_200 = ( TYPE_13 ) VAR_149 - ( TYPE_13 ) <S2SV_ModEnd> VAR_150 ; VAR_219 <S2SV_ModStart> ; VAR_219 = ( TYPE_13 ) VAR_155 + ( TYPE_13 ) <S2SV_ModEnd> VAR_156 ; VAR_175 <S2SV_ModStart> ; VAR_175 = ( TYPE_13 ) VAR_155 - ( TYPE_13 ) <S2SV_ModEnd> VAR_156 ; VAR_178 <S2SV_ModStart> ; VAR_178 = ( TYPE_13 ) VAR_161 + ( TYPE_13 ) <S2SV_ModEnd> VAR_162 ; VAR_222 <S2SV_ModStart> ; VAR_222 = ( TYPE_13 ) VAR_161 - ( TYPE_13 ) <S2SV_ModEnd> VAR_162 ; VAR_172
<S2SV_ModStart> ( VAR_51 == VAR_92 <S2SV_ModEnd> ) { if <S2SV_ModStart> <= 0x7f ) goto VAR_93 ; <S2SV_ModEnd> if ( METHOD_7 <S2SV_ModStart> > sizeof ( VAR_73 <S2SV_ModEnd> ) - 1 <S2SV_ModStart> goto VAR_84 ; VAR_73 = 0 ; for ( <S2SV_ModEnd> ; VAR_67 > <S2SV_ModStart> ] ; } VAR_93 : if ( VAR_73 > VAR_62 - VAR_91 ) goto VAR_84 ;
<S2SV_ModStart> ) VAR_18 ; <S2SV_ModEnd> METHOD_5 ( VAR_23
<S2SV_ModStart> STRUCT_OR_UNION_3 -> VAR_1 , VAR_2
<S2SV_ModStart> ] <= VAR_111 && VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 <S2SV_ModStart> && VAR_131 -> VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 && VAR_131 -> <S2SV_ModStart> <= VAR_111 && VAR_136 [ VAR_128 ] - VAR_129 < VAR_131 -> VAR_137 &&
<S2SV_ModStart> VAR_18 , struct STRUCT_OR_UNION_1 <S2SV_ModEnd> * VAR_17 ) <S2SV_ModStart> -> VAR_19 ; METHOD_4 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> VAR_13 ) { METHOD_5 <S2SV_ModEnd> ( VAR_17 , <S2SV_ModStart> 16 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_17 ,
<S2SV_ModStart> if ( VAR_118 > <S2SV_ModEnd> VAR_511 ) { <S2SV_ModStart> VAR_511 ) { return ;
<S2SV_ModStart> ( VAR_73 , VAR_74 , METHOD_35 ( VAR_72 ) ) ; METHOD_34 ( VAR_73 , VAR_22 , METHOD_13 ( VAR_72 ) ) ; METHOD_34 ( VAR_73 , <S2SV_ModStart> VAR_19 , METHOD_11 <S2SV_ModEnd> ( VAR_72 )
<S2SV_ModStart> 0 ) ; VAR_109 -> VAR_112 <S2SV_ModEnd> = METHOD_18 ( <S2SV_ModStart> -> VAR_94 , VAR_109 -> VAR_112 <S2SV_ModEnd> ) ; if <S2SV_ModStart> -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; return 0 <S2SV_ModStart> -> VAR_111 < VAR_109 -> VAR_112 ) { VAR_109 -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; return METHOD_20 <S2SV_ModStart> -> VAR_111 = VAR_109 -> VAR_112 <S2SV_ModEnd> ; } return
<S2SV_ModStart> ) + VAR_27 ; if ( VAR_20 < sizeof ( * VAR_28 ) ) return VAR_22
<S2SV_ModStart> ; if ( METHOD_12 ( VAR_22 , & STRUCT_OR_UNION_23 -> VAR_23 ) && ! METHOD_12 ( VAR_31 , & STRUCT_OR_UNION_23 -> VAR_23 ) &&
<S2SV_ModStart> ) ) ; if ( METHOD_16 ( VAR_106 . VAR_60 , VAR_106 . VAR_105 ) ) METHOD_3 ( VAR_40 , ( METHOD_4 ( VAR_112 ) , METHOD_5 ( "ltxtquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> ; if ( ! METHOD_24 ( STRUCT_OR_UNION_19 -> VAR_81 ) -> VAR_25 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ! VAR_75 )
<S2SV_ModStart> VAR_78 ) { METHOD_8 ( VAR_74 > 9 ) ; <S2SV_ModStart> VAR_61 ) ) METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "NaN" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "-Infinity" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "Infinity" <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_223 , "PG%31[<S2SV_blank>\\t]%c%c%31[<S2SV_blank>\\t+-]%d%31[<S2SV_blank>\\t]%d%31[<S2SV_blank>\\t]%d" <S2SV_ModEnd> , VAR_47 ,
<S2SV_ModStart> ( VAR_36 < 5 + 1 <S2SV_ModEnd> ) METHOD_15 ( <S2SV_ModStart> ) ; } for ( VAR_36 = 0 ; VAR_36 <= 8 ; VAR_36 ++ ) { TYPE_9 VAR_29 ; TYPE_10 * VAR_39 ; METHOD_8 ( VAR_38 , "DEADBEEF" , 8 ) ; VAR_29 = VAR_36 ; VAR_39 = METHOD_9 ( VAR_38 , & VAR_29 , "%2.0f" , 1.6314159265358979e+125 ) ; METHOD_15 ( VAR_39 != VAR_27 ) ; METHOD_15 ( METHOD_12 ( VAR_39 , "163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208" ) == 0 ) ; METHOD_15 ( VAR_29 == 126 ) ; if ( VAR_36 < 126 + 1 ) METHOD_15 ( VAR_39 != VAR_38 ) ; METHOD_15 ( METHOD_16 ( VAR_38 + VAR_36 , & "DEADBEEF" [ VAR_36 ] , 8 - VAR_36 ) == 0 ) ; if ( VAR_39 != VAR_38 ) METHOD_17 ( VAR_39 ) ; }
<S2SV_ModStart> VAR_39 ) ; METHOD_18 ( VAR_70 . VAR_71 , STRUCT_OR_UNION_21 -> VAR_59 [ VAR_39 & 3 ] ) ;
<S2SV_ModStart> VAR_4 ) { METHOD_9 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> ( VAR_20 , VAR_21 , "ID:%s" <S2SV_ModEnd> , METHOD_6 ( <S2SV_ModStart> METHOD_6 ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_11 ) { METHOD_9 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> ( VAR_20 , VAR_21 , "String:\'%s\'" <S2SV_ModEnd> , METHOD_6 ( <S2SV_ModStart> METHOD_6 ( ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_15 * VAR_394 = VAR_517 . VAR_506 , * VAR_403 = "" ; TYPE_13 VAR_519 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_517 . VAR_508 ) { if ( <S2SV_ModEnd> ( VAR_517 . <S2SV_ModStart> VAR_391 ) { VAR_519 = METHOD_43 ( VAR_517 . VAR_506 ) - VAR_517 . VAR_506 ; VAR_394 = METHOD_43 ( <S2SV_ModEnd> VAR_517 . VAR_467 <S2SV_ModStart> VAR_517 . VAR_467 ) <S2SV_ModStart> = METHOD_68 ( VAR_394 ) ; } else if ( <S2SV_ModEnd> METHOD_65 ( VAR_394 <S2SV_ModStart> , ".tgz" ) == 0 ) VAR_403 = ".tar" ; } else VAR_403 = VAR_517 . VAR_403 ; <S2SV_ModEnd> VAR_517 . VAR_518 <S2SV_ModStart> = METHOD_66 ( VAR_519 + VAR_398 + METHOD_68 ( VAR_403 ) <S2SV_ModEnd> + 1 ) <S2SV_ModStart> . VAR_518 , VAR_517 . VAR_506 , VAR_519 ) ; METHOD_70 <S2SV_ModEnd> ( VAR_517 . <S2SV_ModStart> . VAR_518 + VAR_519 , VAR_394 , VAR_398 ) ; METHOD_71 ( VAR_517 . VAR_518 + VAR_519 + VAR_398 , <S2SV_ModEnd> VAR_403 ) ;
<S2SV_ModStart> * VAR_50 ; TYPE_0 VAR_53 ; <S2SV_ModStart> ) ; } VAR_53 = VAR_51 ; <S2SV_ModStart> VAR_49 ++ ) { <S2SV_ModEnd> VAR_47 = METHOD_6 <S2SV_ModStart> VAR_47 ) ) if ( METHOD_10 ( ( TYPE_11 ) VAR_45 , VAR_50 ) != VAR_45 ) VAR_53 = VAR_22 ; <S2SV_ModStart> ( TYPE_14 ) METHOD_13 ( VAR_47 <S2SV_ModEnd> ) ; ( <S2SV_ModStart> ( TYPE_14 ) METHOD_12 ( VAR_48 [ VAR_49 ] ) ; } ( TYPE_14 ) METHOD_13 ( <S2SV_ModEnd> VAR_50 ) ; <S2SV_ModStart> ; return ( VAR_53 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_19 ) { TYPE_4 <S2SV_ModEnd> * const VAR_18
<S2SV_ModStart> ( VAR_15 , VAR_20 ,
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_69 , const TYPE_12 * VAR_113 <S2SV_ModStart> = VAR_108 ; <S2SV_ModEnd> METHOD_1 ( ) <S2SV_ModStart> & VAR_106 , "/etc" , VAR_113 <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> TYPE_5 VAR_34 , TYPE_6 <S2SV_ModEnd> VAR_27 , unsigned
<S2SV_ModStart> VAR_3 ) { const TYPE_3 VAR_5 = METHOD_2 ( VAR_4 ) ; const TYPE_3 VAR_6 = METHOD_2 ( VAR_3 ) ; const TYPE_3 VAR_7 = ( VAR_5 < VAR_6 ) ? VAR_5 : VAR_6 ; <S2SV_ModStart> , VAR_3 , VAR_7 + 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_72 ; } TYPE_11 * VAR_71 = METHOD_19 ( METHOD_20 ( ) ) ; const TYPE_12 * const VAR_73 = METHOD_16 ( VAR_2 ) ; TYPE_11 * VAR_74 = METHOD_19 ( VAR_73 ) ; if ( METHOD_23 ( VAR_71 -> VAR_61 , VAR_74 -> VAR_61 ) != 0 ) { METHOD_14 ( "Invalid<S2SV_blank>carbon<S2SV_blank>received,<S2SV_blank>from:<S2SV_blank>%s" , VAR_73 ) ; return VAR_72 ; } <S2SV_ModStart> METHOD_19 ( VAR_40 <S2SV_ModEnd> ) ; TYPE_12
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> return - VAR_12 <S2SV_ModEnd> ; METHOD_1 (
<S2SV_ModStart> VAR_67 ) { VAR_81 <S2SV_ModEnd> ; } switch
<S2SV_ModStart> = 0 ; if ( 0 == VAR_123 -> VAR_125 ) { VAR_123 -> VAR_125 = VAR_123 -> VAR_92 ; }
<S2SV_ModStart> * VAR_153 ; TYPE_11 VAR_179 ; <S2SV_ModStart> . VAR_174 ; VAR_179 = <S2SV_ModEnd> VAR_75 * VAR_80 <S2SV_ModStart> struct STRUCT_OR_UNION_4 ) ; if ( VAR_75 == 0 || VAR_179 / VAR_75 / sizeof ( struct STRUCT_OR_UNION_4 ) != VAR_80 || ! ( VAR_70 = METHOD_1 ( VAR_179
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_6 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) ; return ( 0 ) <S2SV_ModStart> , VAR_21 ) ) ; METHOD_7 ( VAR_25 [ 2 ] <S2SV_ModStart> 4 ) { METHOD_8 ( VAR_25 [ VAR_28 ] , 4 ) ; <S2SV_ModStart> ) ; } return ( 0 ) ; VAR_30 : return ( - 1 ) ;
<S2SV_ModStart> TYPE_1 * VAR_1 , TYPE_2 * VAR_3 <S2SV_ModStart> VAR_1 -> VAR_2 , VAR_3
<S2SV_ModStart> . METHOD_3 ( METHOD_6 ( VAR_69 ) <S2SV_ModEnd> , VAR_67 , <S2SV_ModStart> . METHOD_3 ( METHOD_6 ( VAR_69 ) <S2SV_ModEnd> , VAR_67 ,
<S2SV_ModStart> TYPE_17 VAR_177 [ VAR_190 <S2SV_ModEnd> ] ; VAR_11 <S2SV_ModStart> + 1 , "prestring=%490s" <S2SV_ModEnd> , VAR_177 ) <S2SV_ModStart> ) ) > VAR_190 <S2SV_ModEnd> - 3 ) <S2SV_ModStart> + 1 , "protos=%490s" <S2SV_ModEnd> , VAR_177 ) <S2SV_ModStart> ( VAR_177 , VAR_190 <S2SV_ModEnd> , "<S2SV_blank>*<S2SV_blank><S2SV_blank>These<S2SV_blank>prototypes<S2SV_blank>were<S2SV_blank>autogen\'d<S2SV_blank>by<S2SV_blank>xtractprotos,<S2SV_blank>v.<S2SV_blank>%s" , <S2SV_ModStart> ( VAR_177 , VAR_190 <S2SV_ModEnd> , "cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s" ,
<S2SV_ModStart> if ( VAR_84 >= <S2SV_ModEnd> VAR_82 -> VAR_16
<S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 , <S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 , <S2SV_ModStart> ! METHOD_6 ( VAR_24 -> VAR_26 ,
<S2SV_ModStart> VAR_245 ) { <S2SV_ModEnd> if ( !
<S2SV_ModStart> ( VAR_44 = 0 ; VAR_44 < 17 ; VAR_44 ++ ) VAR_81 [ VAR_44 + VAR_47 <S2SV_ModEnd> ] = VAR_81
<S2SV_ModStart> ) { TYPE_49 VAR_362 = <S2SV_ModEnd> ( VAR_358 << <S2SV_ModStart> ) + 1 ; if ( METHOD_12 ( VAR_96 , VAR_97 , VAR_134 , VAR_362 * sizeof ( TYPE_54 ) , VAR_99 ) == - 1 ) goto VAR_360 ; TYPE_49 VAR_111 = METHOD_40 ( VAR_134 , VAR_362
<S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( VAR_151 <S2SV_ModStart> VAR_127 ) break ; VAR_141 = VAR_147 + VAR_145 * VAR_148 <S2SV_ModStart> -> VAR_153 ; VAR_151 = METHOD_5 ( VAR_151 , VAR_127 ) ;
<S2SV_ModStart> VAR_71 ) { METHOD_15 ( VAR_71 > 28 ) ; <S2SV_ModStart> case VAR_12 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "EOF" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_15 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "ID" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_18 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "INT" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_21 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "FLOAT" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_24 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "STRING" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_27 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "UNFINISHED<S2SV_blank>STRING" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_30 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_33 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "UNFINISHED<S2SV_blank>TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_36 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "REGEX" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_39 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "UNFINISHED<S2SV_blank>REGEX" <S2SV_ModEnd> ) ; return <S2SV_ModStart> case VAR_42 : METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> VAR_70 , "UNFINISHED<S2SV_blank>COMMENT" <S2SV_ModEnd> ) ; return <S2SV_ModStart> 0 ) ; METHOD_17 <S2SV_ModEnd> ( VAR_70 , <S2SV_ModStart> [ VAR_67 ] <S2SV_ModEnd> ) ; return <S2SV_ModStart> return ; } <S2SV_ModEnd> METHOD_16 ( VAR_70
<S2SV_ModStart> VAR_14 ) ; if ( METHOD_9 ( ! METHOD_22 ( & VAR_35 -> VAR_36 ) ) ) { struct STRUCT_OR_UNION_0 * VAR_37 , * VAR_38 ; METHOD_23 ( VAR_37 , VAR_38 , & VAR_35 -> VAR_36 , VAR_39 ) { METHOD_24 ( VAR_37 ) ; } }
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_3 <S2SV_ModEnd> * VAR_14 , <S2SV_ModStart> ) ) { METHOD_8 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> ) ) { METHOD_8 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> ) ) { METHOD_8 <S2SV_ModEnd> ( VAR_14 ,
<S2SV_ModStart> VAR_38 == VAR_39 ) goto VAR_91 ; if ( VAR_38 - VAR_39 > VAR_98 - 1
<S2SV_ModStart> ; TYPE_2 VAR_41 <S2SV_ModEnd> ; unsigned TYPE_3 <S2SV_ModStart> TYPE_4 VAR_25 ; if ( STRUCT_OR_UNION_14 -> VAR_33 > STRUCT_OR_UNION_14 -> VAR_31 -> VAR_42 ) { VAR_41 = - VAR_43 ; goto VAR_44 ; } <S2SV_ModStart> ! VAR_35 ) { VAR_41 = - VAR_6 ; goto VAR_45 ; } <S2SV_ModEnd> VAR_32 = VAR_35 <S2SV_ModStart> return 0 ; VAR_45 <S2SV_ModEnd> : METHOD_12 ( <S2SV_ModStart> STRUCT_OR_UNION_20 ) ; VAR_44 :
<S2SV_ModStart> else if ( METHOD_6 ( ) && ( METHOD_7 ( VAR_21 ) & VAR_22 ) <S2SV_ModEnd> ) { if
<S2SV_ModStart> if ( VAR_44 == VAR_56 ) { VAR_59 = VAR_60 ; <S2SV_ModEnd> goto VAR_48 ; <S2SV_ModStart> VAR_48 ; } VAR_59 = METHOD_8 ( VAR_53 , VAR_43 , VAR_44 , VAR_45 , * VAR_55 ) ;
<S2SV_ModStart> VAR_167 ) { TYPE_8 VAR_412 = METHOD_43 ( VAR_409 -> VAR_413 ) ; TYPE_8 VAR_414 = METHOD_43 ( VAR_409 -> VAR_415 ) ; TYPE_8 VAR_416 = ( VAR_412 + VAR_417 - 1 ) / VAR_417 ; TYPE_8 VAR_418 = ( VAR_414 + VAR_419 - 1 ) / VAR_419 ; <S2SV_ModStart> -> VAR_317 > VAR_416 <S2SV_ModEnd> ) || ( <S2SV_ModStart> -> VAR_319 > VAR_418 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_17 * VAR_237 = VAR_106 -> VAR_238 ; struct <S2SV_ModStart> VAR_221 - 1 ; TYPE_9 VAR_239 <S2SV_ModStart> ++ ) ; if ( METHOD_29 ( VAR_236 ) ) { VAR_239 = METHOD_30 ( VAR_237 , VAR_231 , VAR_234 , VAR_240 ) ; if ( VAR_239 ) { METHOD_31 ( VAR_106 , "Failed<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>data<S2SV_blank>buffers\\n" ) ; METHOD_32 ( VAR_236 ) ; } }
<S2SV_ModStart> ) ) { if ( VAR_285 -> VAR_278 . VAR_291 + 16 >= VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , 16 ) ) return VAR_289 ; <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 + VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ) ; else <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 + VAR_285 -> VAR_278 . VAR_291 ) ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> += 4 ; <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 + VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ) ; else <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 + VAR_285 -> VAR_278 . VAR_291 ) ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> += 8 ; <S2SV_ModStart> & 1 ) ; if ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 >= VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , 16 ) ) return VAR_289 <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ] ) , <S2SV_ModStart> ; VAR_285 -> VAR_278 . VAR_291 += VAR_281 ; VAR_285 -> VAR_278 . VAR_290 <S2SV_ModEnd> [ VAR_285 -> <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> - 1 ] <S2SV_ModStart> ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 > VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; if ( VAR_285 -> <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ] ) , <S2SV_ModStart> ; VAR_285 -> VAR_278 . VAR_291 += VAR_281 ; VAR_285 -> VAR_278 . VAR_290 <S2SV_ModEnd> [ VAR_285 -> <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ] = 0 <S2SV_ModStart> : VAR_281 ; if ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 > VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ] ) , <S2SV_ModStart> ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> += VAR_281 ; <S2SV_ModStart> ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 > VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; METHOD_45 ( & ( VAR_285 -> VAR_278 . VAR_290 [ VAR_285 -> VAR_278 . VAR_291 ] ) , VAR_263 , VAR_281 ) ; VAR_285 -> VAR_278 . VAR_291 += VAR_281 ; VAR_289 += VAR_281 ; break ; case 'z' : VAR_281 = METHOD_47 ( VAR_288 , TYPE_30 ) ; if ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 > VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; VAR_289 += VAR_281 ; while ( VAR_281 ) { VAR_285 -> VAR_278 . VAR_290 <S2SV_ModEnd> [ VAR_285 -> <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 ] <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ++ ; VAR_281 <S2SV_ModStart> VAR_285 -> VAR_278 . VAR_290 <S2SV_ModStart> [ VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> ] ) , <S2SV_ModStart> ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> += 16 ; <S2SV_ModStart> TYPE_30 ) ; if ( VAR_285 -> VAR_278 . VAR_291 + ( TYPE_18 ) VAR_281 > VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; VAR_285 -> VAR_278 . VAR_291 <S2SV_ModEnd> += VAR_281 ; <S2SV_ModStart> ; if ( ( TYPE_18 ) VAR_281 >= VAR_285 -> VAR_278 . VAR_292 && METHOD_50 ( VAR_285 , VAR_281 ) ) return VAR_289 ; VAR_285 -> VAR_278 . VAR_291 = VAR_281 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> ; if ( VAR_70 -> VAR_63 > sizeof ( VAR_70 -> VAR_71 ) ) return - VAR_24 ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( VAR_37
<S2SV_ModStart> break ; } METHOD_12 ( & VAR_58 , 0 , sizeof ( VAR_58 ) ) ;
<S2SV_ModStart> VAR_555 ) && ( ( VAR_321 * <S2SV_ModEnd> VAR_691 . VAR_399 <S2SV_ModStart> VAR_691 . VAR_399 ) > ( 8 * <S2SV_ModEnd> VAR_691 . VAR_558 <S2SV_ModStart> VAR_691 . VAR_558 ) <S2SV_ModStart> ( VAR_550 + VAR_550 <S2SV_ModEnd> % 2 )
<S2SV_ModStart> TYPE_10 VAR_63 ; TYPE_10 VAR_134 , <S2SV_ModEnd> VAR_35 , VAR_86 <S2SV_ModStart> + 64 , "LEN=%9d" <S2SV_ModEnd> , & VAR_134 <S2SV_ModStart> METHOD_17 ( "toshiba:<S2SV_blank>OFFSET<S2SV_blank>line<S2SV_blank>doesn\'t<S2SV_blank>have<S2SV_blank>valid<S2SV_blank>LEN<S2SV_blank>item" ) ; return VAR_156 ; } if ( VAR_134 < 0 ) { * VAR_153 = VAR_154 ; * VAR_155 = METHOD_17 ( "toshiba:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length"
<S2SV_ModStart> ; TYPE_6 VAR_141 = 0 ; VAR_76 -> VAR_159
<S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_33 . <S2SV_ModStart> VAR_28 ] ) , VAR_34
<S2SV_ModStart> - VAR_7 ; <S2SV_ModEnd> switch ( VAR_75 <S2SV_ModStart> VAR_77 ; } VAR_75 -> VAR_9 = VAR_10 ;
<S2SV_ModStart> } else { if ( ! <S2SV_ModStart> , VAR_100 ) ) { if ( VAR_117 == 0 ) VAR_117 = - VAR_118 ; break ; } <S2SV_ModEnd> * VAR_108 =
<S2SV_ModStart> VAR_26 -> VAR_27 >= ( <S2SV_ModEnd> VAR_26 -> VAR_23 <S2SV_ModStart> VAR_26 -> VAR_23 - 1 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_2 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_2 : return VAR_9 <S2SV_ModEnd> ; case VAR_4 <S2SV_ModStart> VAR_4 : return vpx_mse16x8 <S2SV_ModEnd> ; case VAR_6 <S2SV_ModStart> VAR_6 : return VAR_10 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } }
<S2SV_ModStart> ; VAR_14 -> VAR_77 &= ~ VAR_78 ; VAR_14 ->
<S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> VAR_190 ) ; } <S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> VAR_190 ) ; } <S2SV_ModStart> VAR_228 ++ ) { if ( METHOD_35 ( VAR_190 ) ) return VAR_202 ; <S2SV_ModStart> & 0xFFFF ; }
<S2SV_ModStart> ; if ( VAR_237 >= 31 || ( ( VAR_260 -> VAR_250 << VAR_237 ) >> VAR_237 ) != VAR_260 -> VAR_250 || VAR_225 >= 31 || ( ( VAR_260 -> VAR_261 << VAR_225 ) >> VAR_225 ) != VAR_260 -> VAR_261 ) { continue ; } if (
<S2SV_ModStart> if ( VAR_610 != VAR_601 && VAR_610 <S2SV_ModStart> . VAR_594 = ( TYPE_82 * )
<S2SV_ModStart> ; if ( METHOD_3 <S2SV_ModEnd> ( VAR_8 ,
<S2SV_ModStart> -> VAR_58 ; METHOD_23 ( VAR_46 , 254 <S2SV_ModEnd> , "%s:%s" ,
<S2SV_ModStart> ( VAR_53 && METHOD_38 ( VAR_53 ) && <S2SV_ModStart> ) ) { if ( METHOD_38 ( VAR_53 ) ) { <S2SV_ModStart> ; return ; } <S2SV_ModStart> ( VAR_53 && METHOD_38 ( VAR_53 ) && <S2SV_ModStart> if ( VAR_53 && METHOD_38 ( VAR_53 )
<S2SV_ModStart> VAR_47 -> VAR_65 ; if ( VAR_49 > VAR_47 -> VAR_77 ) return 0
<S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_50 <S2SV_ModEnd> ; unsigned TYPE_3 <S2SV_ModStart> - VAR_27 ; METHOD_10 ( ) ; VAR_50 = METHOD_2 ( VAR_44 ) ; if ( ! VAR_50 ) { METHOD_11 ( ) ; return - VAR_27 ; } <S2SV_ModStart> VAR_51 ) ; METHOD_11 ( ) ;
<S2SV_ModStart> VAR_134 ) ; if ( ! VAR_143 ) { METHOD_6 ( & VAR_63 -> VAR_62 -> VAR_63 , "vb<S2SV_blank>is<S2SV_blank>empty,<S2SV_blank>dropping<S2SV_blank>frame\\n" ) ; return ; } <S2SV_ModStart> VAR_144 ) ; <S2SV_ModEnd> if ( VAR_139
<S2SV_ModStart> ; TYPE_6 VAR_41 ; if ( VAR_48 == 0 || VAR_40 == 0 ) return 0
<S2SV_ModStart> -> VAR_31 == METHOD_5 <S2SV_ModEnd> ( & VAR_30
<S2SV_ModStart> VAR_20 ) ; if ( METHOD_12 ( VAR_39 , & STRUCT_OR_UNION_9 -> VAR_40 ) ) { VAR_38 = - VAR_9 ; goto VAR_36 ; }
<S2SV_ModStart> , VAR_48 ) ; if ( VAR_59 -> VAR_60 > VAR_48 ) VAR_59 -> VAR_60 = VAR_48
<S2SV_ModStart> ( VAR_210 ) { METHOD_20 ( VAR_215 ) ; <S2SV_ModStart> return VAR_210 ; }
<S2SV_ModStart> VAR_9 ) { if ( METHOD_3 ( VAR_7 -> VAR_4 , VAR_7 -> VAR_8 -> VAR_6 ) ) return 0 ;
<S2SV_ModStart> 0 ) ; METHOD_6 <S2SV_ModEnd> ( & VAR_14
<S2SV_ModStart> -> VAR_211 ; if ( VAR_31 >= VAR_147 ) return 0 ;
<S2SV_ModStart> . VAR_25 = VAR_26 <S2SV_ModEnd> } ; TYPE_2 <S2SV_ModStart> VAR_12 ) ; if ( VAR_48 -> VAR_54 || VAR_48 -> VAR_55 ) goto VAR_56 ; switch ( VAR_48 -> VAR_25 ) { case VAR_57 : case VAR_26 : VAR_48 -> VAR_58 |= VAR_59 ; if ( ! METHOD_10 ( VAR_48 -> VAR_25 , VAR_48 -> VAR_60 -> VAR_61 ) ) { struct STRUCT_OR_UNION_4 VAR_50 ; VAR_50 . VAR_49 = METHOD_9 ( VAR_48 -> VAR_49 ) ; VAR_50 . VAR_62 = METHOD_9 ( VAR_48 -> VAR_62 ) ; METHOD_12 ( VAR_48 -> VAR_60 , METHOD_11 ( VAR_48 -> VAR_60 ) , VAR_63 , sizeof ( VAR_50 ) , & VAR_50 ) ; } break ; default : VAR_48 -> VAR_25 = METHOD_13 ( VAR_45 . VAR_25 , VAR_48 -> VAR_60 -> VAR_61 ) ; break ; } VAR_56 : <S2SV_ModStart> . VAR_28 = VAR_64 <S2SV_ModEnd> ; VAR_45 . <S2SV_ModStart> . VAR_34 = 0 <S2SV_ModEnd> ; VAR_45 . <S2SV_ModStart> . VAR_37 = 0 ; VAR_45 . VAR_40 = METHOD_9 ( VAR_41 ) ; METHOD_7 ( & VAR_52 , VAR_43 , sizeof ( VAR_45 ) , ( unsigned TYPE_3 ) & VAR_45 ) ; break ; case VAR_57 : VAR_45 . VAR_25 = VAR_57 ; VAR_45 . VAR_28 = 0 ; VAR_45 . VAR_31 = 0 ; VAR_45 . VAR_34 = 0 ; VAR_45 . VAR_37 = 0 <S2SV_ModEnd> ; VAR_45 .
<S2SV_ModStart> do VAR_22 = METHOD_3 ( <S2SV_ModStart> VAR_21 , VAR_11 )
<S2SV_ModStart> -> VAR_9 = VAR_44 <S2SV_ModEnd> ; for (
<S2SV_ModStart> while ( VAR_10 <S2SV_ModEnd> ) { METHOD_3
<S2SV_ModStart> } VAR_19 = METHOD_9 ( VAR_16 ) <S2SV_ModEnd> -> METHOD_7 (
<S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> VAR_32 -> VAR_33 <S2SV_ModStart> VAR_32 -> VAR_33 = 0 <S2SV_ModEnd> ; METHOD_7 ( <S2SV_ModStart> } if ( <S2SV_ModEnd> STRUCT_OR_UNION_12 -> VAR_33 <S2SV_ModStart> STRUCT_OR_UNION_12 -> VAR_33 == VAR_34 ) STRUCT_OR_UNION_12 = VAR_35 ; else STRUCT_OR_UNION_12 -> VAR_33 += 1 <S2SV_ModEnd> ; METHOD_12 (
<S2SV_ModStart> ) ; } if ( VAR_104 == 0 ) goto VAR_90 ; if ( VAR_103 <S2SV_ModEnd> == 0 ) <S2SV_ModStart> == 0 ) { VAR_103 = VAR_104 ; goto VAR_90 ; } <S2SV_ModEnd> if ( VAR_104 <S2SV_ModStart> VAR_104 ; } VAR_90 : METHOD_11 ( VAR_99 -> VAR_92 , VAR_93 ) ; <S2SV_ModStart> VAR_103 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> static VAR_25 <S2SV_ModStart> = 0 ; VAR_24 - VAR_22 >= 8 * 32 <S2SV_ModEnd> ; VAR_22 += <S2SV_ModStart> ] ; } for ( ; VAR_22 < VAR_24 ; VAR_22 += 32 ) { ( TYPE_12 ) VAR_23 [ VAR_22 ] ; }
<S2SV_ModStart> ; if ( ( VAR_257 & VAR_210 ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } if ( METHOD_61 ( STRUCT_OR_UNION_37 ) ) METHOD_62 ( VAR_276 ) ;
<S2SV_ModStart> * VAR_36 , TYPE_5 VAR_60 <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; VAR_60 <S2SV_ModEnd> &= ( VAR_10 <S2SV_ModStart> -> VAR_24 & VAR_60 ) != VAR_60 <S2SV_ModEnd> ) goto VAR_47 <S2SV_ModStart> -> VAR_44 , VAR_60 <S2SV_ModEnd> ) ; VAR_59 <S2SV_ModStart> , VAR_56 , VAR_60 <S2SV_ModEnd> ) ; VAR_59
<S2SV_ModStart> VAR_443 , "MemoryAllocationFailed" METHOD_461 ; ( TYPE_119 METHOD_461 METHOD_462 ( VAR_579 , 0 , 3 * METHOD_74 ( VAR_326 , 256 METHOD_461 * sizeof ( * VAR_579 METHOD_461
<S2SV_ModStart> ) ; return METHOD_3 ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_0 METHOD_0 (
<S2SV_ModStart> } if ( METHOD_8 <S2SV_ModEnd> ( VAR_38 )
<S2SV_ModStart> METHOD_66 ( * VAR_288 <S2SV_ModEnd> ) ; METHOD_69 <S2SV_ModStart> } VAR_297 : METHOD_69 ( ( VAR_292 , "[|esis]" ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_2 <S2SV_ModEnd> * VAR_2 , <S2SV_ModStart> ) { return METHOD_2 <S2SV_ModEnd> ( VAR_2 ,
<S2SV_ModStart> ; TYPE_4 VAR_163 = 0 <S2SV_ModStart> VAR_175 == 0 ) { if ( <S2SV_ModEnd> VAR_171 -> VAR_157 <S2SV_ModStart> goto VAR_172 ; } else { VAR_163 = VAR_125 -> VAR_169 ; }
<S2SV_ModStart> VAR_72 ) { METHOD_5 <S2SV_ModEnd> ( VAR_67 , <S2SV_ModStart> VAR_59 ) ; METHOD_5 <S2SV_ModEnd> ( VAR_76 , <S2SV_ModStart> VAR_72 ) { METHOD_6 <S2SV_ModEnd> ( VAR_67 , <S2SV_ModStart> VAR_72 ) { METHOD_6 <S2SV_ModEnd> ( VAR_76 ,
<S2SV_ModStart> VAR_112 ; struct STRUCT_OR_UNION_15 * VAR_179 = METHOD_26 ( VAR_152 ) ; struct <S2SV_ModStart> STRUCT_OR_UNION_11 VAR_104 ; struct STRUCT_OR_UNION_16 * VAR_180 , VAR_181 ; <S2SV_ModStart> ) ; } VAR_180 = METHOD_27 ( VAR_174 , VAR_179 -> VAR_182 , & VAR_181 ) ; <S2SV_ModStart> , VAR_174 , VAR_180 <S2SV_ModEnd> , VAR_155 ) <S2SV_ModStart> . VAR_150 ; VAR_180 = METHOD_27 ( VAR_174 , VAR_179 -> VAR_182 , & VAR_181 ) ; <S2SV_ModStart> , VAR_174 , VAR_180 <S2SV_ModEnd> , VAR_155 )
<S2SV_ModStart> STRUCT_OR_UNION_0 * VAR_0 <S2SV_ModEnd> , struct STRUCT_OR_UNION_1
<S2SV_ModStart> VAR_73 ++ ; if ( VAR_73 == 10 ) METHOD_8 ( ( VAR_81 , "(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)" ) ) ; else
<S2SV_ModStart> = VAR_7 ; <S2SV_ModEnd> METHOD_2 ( "GsmXSMPClient:<S2SV_blank>Initializing<S2SV_blank>client<S2SV_blank>%s"
<S2SV_ModStart> >= 0 && <S2SV_ModEnd> METHOD_8 ( * <S2SV_ModStart> < VAR_38 && <S2SV_ModEnd> METHOD_8 ( *
<S2SV_ModStart> ( VAR_61 , VAR_64 ) & VAR_65 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = METHOD_6 ( VAR_66 <S2SV_ModEnd> | ( VAR_46 <S2SV_ModStart> VAR_35 ++ & VAR_67 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_61 , VAR_68 , VAR_69 <S2SV_ModEnd> ) ; METHOD_9 <S2SV_ModStart> ( VAR_61 , VAR_68 , VAR_69 <S2SV_ModEnd> ) ; METHOD_11 <S2SV_ModStart> ( VAR_61 , KSZ8851_TXQCR , KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; VAR_59 <S2SV_ModStart> ( VAR_61 , VAR_64 ) & VAR_65 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_20 ) ; METHOD_9 ( VAR_6 , VAR_22 , VAR_23 ) ;
<S2SV_ModStart> goto VAR_411 ; METHOD_67 ( "present<S2SV_blank>leaves<S2SV_blank>cluster<S2SV_blank>but<S2SV_blank>not<S2SV_blank>new<S2SV_blank>leaf\\n" ) <S2SV_ModEnd> ; } VAR_145 <S2SV_ModStart> return VAR_410 ; <S2SV_ModEnd> VAR_411 : METHOD_67
<S2SV_ModStart> . VAR_4 = 0 <S2SV_ModEnd> ; TYPE_57 .
<S2SV_ModStart> VAR_175 , VAR_178 <S2SV_ModEnd> ; TYPE_20 VAR_64 <S2SV_ModStart> VAR_203 ++ ; VAR_182 [ VAR_201 ] = METHOD_1 ( VAR_98 , VAR_99 ) ; VAR_182 [ VAR_201 + 1 ] = METHOD_1 ( VAR_101 , VAR_102 ) ; VAR_188 [ VAR_201 ] = METHOD_1 ( VAR_110 , VAR_111 ) ; VAR_188 [ VAR_201 + 1 ] = METHOD_1 ( VAR_113 , VAR_114 ) ; VAR_194 [ VAR_201 ] = METHOD_2 ( VAR_98 , VAR_99 ) ; VAR_194 [ VAR_201 + 1 ] = METHOD_2 ( VAR_101 , VAR_102 ) ; VAR_200 [ VAR_201 ] = METHOD_2 ( VAR_110 , VAR_111 ) ; VAR_200 [ VAR_201 + 1 ] = METHOD_2 ( VAR_113 , VAR_114 ) ; VAR_162 = * VAR_205 ++ ; VAR_165 = * VAR_205 ++ ; VAR_163 = * VAR_205 ++ ; VAR_166 = * VAR_205 ++ ; VAR_174 = * VAR_205 ++ ; VAR_177 = * VAR_205 ++ ; VAR_175 = * VAR_205 ++ ; VAR_178 = * VAR_205 ++ ; VAR_182 [ VAR_201 + 2 ] = METHOD_1 ( VAR_162 , VAR_163 ) ; VAR_182 [ VAR_201 + 3 ] = METHOD_1 ( VAR_165 , VAR_166 ) <S2SV_ModEnd> ; VAR_188 [ <S2SV_ModStart> VAR_188 [ VAR_201 + 2 ] = METHOD_1 ( VAR_174 , VAR_175 ) <S2SV_ModEnd> ; VAR_188 [ <S2SV_ModStart> [ VAR_201 + 3 ] = METHOD_1 ( VAR_177 , VAR_178 ) ; VAR_194 [ VAR_201 + 2 ] = METHOD_2 ( VAR_162 , VAR_163 ) ; VAR_194 [ VAR_201 + 3 ] = METHOD_2 ( VAR_165 , VAR_166 ) <S2SV_ModEnd> ; VAR_200 [ <S2SV_ModStart> VAR_200 [ VAR_201 + 2 ] = METHOD_2 ( VAR_174 , VAR_175 ) <S2SV_ModEnd> ; VAR_200 [ <S2SV_ModStart> [ VAR_201 + 3 ] = METHOD_2 ( VAR_177 , VAR_178 ) <S2SV_ModEnd> ; } VAR_203
<S2SV_ModStart> VAR_63 ) { if ( VAR_81 < 0 || VAR_81 > VAR_92 ) { VAR_91 = - VAR_49 ; goto VAR_87 ; }
<S2SV_ModStart> ; if ( METHOD_7 <S2SV_ModEnd> ( VAR_26 )
<S2SV_ModStart> VAR_103 , VAR_104 ; VAR_112 = VAR_49 [ 0 ] <S2SV_ModStart> ; METHOD_14 ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; METHOD_14 ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; METHOD_14 ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; METHOD_14 ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; METHOD_14 ( <S2SV_ModEnd> ) ; return
<S2SV_ModStart> * VAR_84 ; if ( VAR_61 < 2 ) { return VAR_118 ; }
<S2SV_ModStart> TYPE_2 VAR_22 ; <S2SV_ModEnd> union STRUCT_OR_UNION_1 * <S2SV_ModStart> STRUCT_OR_UNION_1 * VAR_11 ; METHOD_1 ( VAR_1 ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> METHOD_3 ( VAR_24
<S2SV_ModStart> STRUCT_OR_UNION_1 VAR_32 ; METHOD_2 ( VAR_20 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) <S2SV_ModEnd> ; VAR_32 .
<S2SV_ModStart> VAR_20 , VAR_27 <S2SV_ModEnd> ; TYPE_6 *
<S2SV_ModStart> . VAR_16 = VAR_77 <S2SV_ModEnd> , . VAR_75
<S2SV_ModStart> = VAR_3 ; METHOD_1 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; if ( ! VAR_138 -> VAR_139 ) { <S2SV_ModStart> STRUCT_OR_UNION_2 * VAR_139 = <S2SV_ModEnd> ( struct STRUCT_OR_UNION_2 <S2SV_ModStart> ( struct STRUCT_OR_UNION_2 * ) METHOD_9 ( 1 , sizeof ( * VAR_139 <S2SV_ModStart> -> VAR_139 = ( vpx_codec_priv_t * ) <S2SV_ModEnd> VAR_139 ; VAR_138 <S2SV_ModStart> VAR_108 ) { VAR_139 <S2SV_ModEnd> -> VAR_124 = <S2SV_ModStart> VAR_108 = & VAR_139 -> VAR_124 ; } <S2SV_ModEnd> VAR_139 -> VAR_128 <S2SV_ModStart> -> VAR_128 = default_extracfg <S2SV_ModEnd> ; VAR_139 -> <S2SV_ModStart> METHOD_5 ( & VAR_139 <S2SV_ModEnd> -> VAR_134 , <S2SV_ModStart> -> VAR_134 , VAR_139 -> VAR_124 , VAR_139 <S2SV_ModEnd> -> VAR_128 , <S2SV_ModStart> VAR_129 ) ; VAR_139 -> VAR_141 <S2SV_ModEnd> = METHOD_6 ( <S2SV_ModStart> METHOD_6 ( & VAR_139 <S2SV_ModEnd> -> VAR_134 ) <S2SV_ModStart> if ( ! VAR_139 -> VAR_141 <S2SV_ModEnd> ) VAR_143 = <S2SV_ModStart> = VAR_137 ; <S2SV_ModEnd> } } return
<S2SV_ModStart> VAR_175 ) { if ( VAR_172 && ( <S2SV_ModEnd> METHOD_13 ( VAR_114 <S2SV_ModStart> , VAR_172 ) != 0 ) <S2SV_ModEnd> ) goto VAR_173
<S2SV_ModStart> } if ( VAR_68 >= 16 || VAR_111 >= 256 ) { return VAR_114 ; } if (
<S2SV_ModStart> VAR_76 ) ; METHOD_23 ( & VAR_66 ) ; METHOD_33 ( & VAR_76 -> VAR_37 ) ; <S2SV_ModStart> VAR_58 ) { <S2SV_ModEnd> METHOD_25 ( & <S2SV_ModStart> = VAR_65 ; METHOD_34 ( & VAR_63 -> VAR_78 ) ; METHOD_34 ( & VAR_63 -> VAR_79 ) ; } METHOD_35 ( & VAR_76 -> VAR_37 ) ; <S2SV_ModStart> VAR_66 ) ; <S2SV_ModEnd> METHOD_27 ( &
<S2SV_ModStart> return VAR_51 ; if ( ! <S2SV_ModEnd> VAR_28 [ VAR_29 <S2SV_ModStart> VAR_28 [ VAR_29 <S2SV_ModEnd> ] ) return <S2SV_ModStart> - VAR_43 ; VAR_51 = METHOD_3 ( VAR_37 , VAR_27 , VAR_28 [ VAR_29 ] , VAR_30 ) ; if ( VAR_51 ) return VAR_51 ; if ( ! VAR_37 <S2SV_ModEnd> [ VAR_38 ] <S2SV_ModStart> [ VAR_38 ] <S2SV_ModEnd> ) return - <S2SV_ModStart> - VAR_43 ; VAR_59 = METHOD_4 ( VAR_37 [ VAR_38 ] ) ; } if ( VAR_65 ) return 0 ; VAR_55 = METHOD_5 ( STRUCT_OR_UNION_7 , VAR_59 ) ; if ( ! VAR_55 ) return - VAR_43 ;
<S2SV_ModStart> 0 ) { METHOD_3 <S2SV_ModEnd> ( ( TYPE_5 <S2SV_ModStart> ) ) ; METHOD_3 <S2SV_ModEnd> ( VAR_64 -> <S2SV_ModStart> VAR_65 . VAR_55 && ( VAR_59 == VAR_25 && VAR_63 == 0 ) ) { return 0 ; } if ( ! VAR_64 -> VAR_65 . VAR_55
<S2SV_ModStart> = VAR_6 ; if ( ! METHOD_3 ( VAR_8 ) )
<S2SV_ModStart> VAR_9 = VAR_2 <S2SV_ModEnd> ; if (
<S2SV_ModStart> -> VAR_343 ; if ( VAR_358 -> VAR_359 == VAR_360 ) { if ( VAR_358 -> VAR_334 != STRUCT_OR_UNION_106 -> VAR_252 ) goto VAR_414 ; if ( STRUCT_OR_UNION_106 -> VAR_252 > STRUCT_OR_UNION_106 -> VAR_397 -> VAR_185 - METHOD_80 ( STRUCT_OR_UNION_106 ) ) goto VAR_414 ; }
<S2SV_ModStart> ( VAR_13 , VAR_16 <S2SV_ModEnd> , VAR_5 & <S2SV_ModStart> ( VAR_13 , VAR_17 <S2SV_ModEnd> , METHOD_3 ( <S2SV_ModStart> ( VAR_13 , VAR_18 <S2SV_ModEnd> , METHOD_5 ( <S2SV_ModStart> ( VAR_13 , VAR_19 ) & VAR_20 <S2SV_ModEnd> ) != 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TYPE_3 METHOD_0 ( <S2SV_ModStart> VAR_4 ) { return bad_format_check ( "^" SAFE_STRING "%s" SAFE_STRING "%lu" SAFE_STRING "%lu" SAFE_STRING "$" , VAR_4 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; METHOD_14 ( METHOD_18 ( VAR_28 -> VAR_33 , 1 ) <S2SV_ModEnd> ) ; METHOD_15
<S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> while ( VAR_71
<S2SV_ModStart> ! VAR_44 ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> != '\\r' ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> != '\\n' ) { VAR_61 ++ ; <S2SV_ModStart> goto VAR_69 ; } <S2SV_ModStart> ; VAR_68 : * VAR_60 = VAR_61 ; <S2SV_ModStart> ; VAR_69 : * VAR_60 = VAR_61 ;
<S2SV_ModStart> ; VAR_157 -> VAR_161 = METHOD_24 ( VAR_147 -> VAR_155 ) ; VAR_157 -> VAR_146 <S2SV_ModEnd> = METHOD_24 ( <S2SV_ModStart> ( VAR_147 -> <S2SV_ModEnd> VAR_148 ) ; <S2SV_ModStart> , VAR_157 -> VAR_161 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> VAR_23 ) ; TYPE_27 ( "DefragTestBadProto" , VAR_24 ) ;
<S2SV_ModStart> ; if ( METHOD_7 ( & VAR_46 -> VAR_47 , VAR_21 ) != VAR_55 ) { return VAR_57 ; } if (
<S2SV_ModStart> + VAR_257 ; TYPE_36 VAR_266 = VAR_257 ; <S2SV_ModStart> < 1 || VAR_106 -> VAR_65 - VAR_266 < VAR_149 <S2SV_ModEnd> ) { METHOD_49 <S2SV_ModStart> ; } VAR_221 += VAR_149 ; VAR_266 <S2SV_ModStart> . VAR_220 ; VAR_266 += VAR_237 . VAR_220 ;
<S2SV_ModStart> { VAR_44 = METHOD_18 <S2SV_ModEnd> ( VAR_79 ,
<S2SV_ModStart> TYPE_12 VAR_76 ; <S2SV_ModEnd> METHOD_7 ( VAR_76 <S2SV_ModStart> - 1 ; if ( VAR_82 + VAR_76 > VAR_59 ) return - 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_15 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_36 ) ; if <S2SV_ModEnd> ( VAR_36 % <S2SV_ModStart> * VAR_33 ) != 0 ) { METHOD_6 ( VAR_7 -> VAR_67 , "fpAcc" , "%s" , "cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_66 ) return 0 <S2SV_ModStart> VAR_66 ) ; return 1 ;
<S2SV_ModStart> VAR_4 ) { TYPE_3 VAR_6 = METHOD_2 ( VAR_4 ) + 1 ; <S2SV_ModStart> = METHOD_1 ( VAR_6 ) ; METHOD_4 <S2SV_ModEnd> ( VAR_5 , <S2SV_ModStart> VAR_5 , VAR_4 , VAR_6
<S2SV_ModStart> ; if ( METHOD_4 <S2SV_ModEnd> ( STRUCT_OR_UNION_5 )
<S2SV_ModStart> ! METHOD_18 ( STRUCT_OR_UNION_5 ,
<S2SV_ModStart> . VAR_157 ; if ( VAR_159 > 1024 ) { <S2SV_ModStart> ) ; } else { METHOD_5 ( "Invalid<S2SV_blank>string<S2SV_blank>pointer<S2SV_blank>at<S2SV_blank>%p\\n" , VAR_159 ) ; } }
<S2SV_ModStart> 5 ) ; if ( VAR_238 > VAR_260 - sizeof ( VAR_239 ) ) return VAR_216 ;
<S2SV_ModStart> 0 ) { if ( VAR_230 < ( TYPE_11 ) VAR_195 ) goto VAR_231 ; <S2SV_ModStart> VAR_217 ) ; if ( VAR_195 < 0 ) return ; <S2SV_ModStart> case VAR_137 : METHOD_1 ( * VAR_224 ) ; <S2SV_ModStart> VAR_217 ) ; if ( VAR_195 < 0 ) return ; <S2SV_ModStart> , VAR_224 ) ; if ( VAR_195 < 0 ) return <S2SV_ModStart> VAR_191 ) ; if ( VAR_195 < 0 ) return ;
<S2SV_ModStart> VAR_275 + VAR_279 ) ; METHOD_1 ( ( VAR_16 + 1 ) != 0 <S2SV_ModStart> VAR_281 ) ; METHOD_1 ( ( VAR_279 + ( VAR_257 -> VAR_105 [ VAR_296 ] . VAR_281 * 2 ) ) <= VAR_281 ) ; <S2SV_ModStart> += 4 ; METHOD_1 ( VAR_282 -> VAR_281 + VAR_279 <= VAR_281 ) ; <S2SV_ModStart> VAR_259 ) { METHOD_1 ( VAR_282 -> VAR_281 != 0 ) ;
<S2SV_ModStart> -> VAR_343 ; if ( VAR_358 -> VAR_359 == VAR_360 ) { if ( VAR_358 -> VAR_334 != STRUCT_OR_UNION_106 -> VAR_252 ) goto VAR_414 ; if ( STRUCT_OR_UNION_106 -> VAR_252 > STRUCT_OR_UNION_106 -> VAR_397 -> VAR_185 - METHOD_80 ( STRUCT_OR_UNION_106 ) ) goto VAR_414 ; }
<S2SV_ModStart> VAR_185 ) ; if ( ! METHOD_25 ( VAR_186 ) ) goto VAR_183 ;
<S2SV_ModStart> TYPE_4 VAR_12 ; ( TYPE_5 ) VAR_0 ; VAR_19 = METHOD_2 <S2SV_ModEnd> ( VAR_8 ->
<S2SV_ModStart> ( ) ; METHOD_10 ( VAR_16 , METHOD_2 ( VAR_15 ) + METHOD_2 ( VAR_13 ) + 1 , VAR_17 ) ; <S2SV_ModStart> VAR_13 , VAR_15 ) ; METHOD_10 ( VAR_18 , METHOD_2 ( VAR_13 ) + 1 , VAR_17
<S2SV_ModStart> * VAR_8 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> ; if ( VAR_8 -> VAR_19 ) { METHOD_3 ( VAR_8 , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VAR_20 ; } if ( <S2SV_ModStart> * VAR_15 ; TYPE_6 * const VAR_21 = VAR_8 -> VAR_22 ; TYPE_7 * const VAR_23 = ( TYPE_7 * ) VAR_21 -> VAR_24 ; VAR_15 = METHOD_4 ( & VAR_23 -> VAR_9 -> VAR_25 <S2SV_ModEnd> , VAR_13 -> <S2SV_ModStart> VAR_13 -> VAR_11 ) ; if ( VAR_15 == VAR_16 ) return VAR_26 <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> TYPE_30 ) ; if ( ! ( METHOD_10 ( TYPE_30 ) ) ) return METHOD_1 ( TYPE_30 ) ; <S2SV_ModStart> , & VAR_37 ) ; if ( ! ( VAR_42 & VAR_72 ) ) return METHOD_1 ( TYPE_30
<S2SV_ModStart> VAR_242 ) ; if ( VAR_195 > VAR_224 - VAR_242 ) return VAR_144 ;
<S2SV_ModStart> VAR_3 ) ; TYPE_10 VAR_258 = <S2SV_ModEnd> METHOD_60 ( VAR_254 <S2SV_ModStart> ( VAR_254 ) ; if ( VAR_258 <S2SV_ModStart> { TYPE_10 VAR_232 , VAR_259 , VAR_260 <S2SV_ModStart> TYPE_13 VAR_248 ; TYPE_15 VAR_261 ; <S2SV_ModStart> VAR_200 ) ; VAR_260 = METHOD_61 ( METHOD_59 ( VAR_254 , VAR_258 - 1 ) ) == VAR_262 ; VAR_259 = VAR_258 - VAR_260 ; <S2SV_ModStart> = METHOD_49 ( VAR_259 <S2SV_ModEnd> / 2 , <S2SV_ModStart> ; VAR_232 < VAR_259 <S2SV_ModEnd> - 2 ; <S2SV_ModStart> ( VAR_254 , VAR_259 <S2SV_ModEnd> - 1 ) <S2SV_ModStart> return VAR_246 ; if ( VAR_260 ) { VAR_261 = METHOD_66 ( METHOD_59 ( VAR_254 , VAR_259 ) ) ; if ( ! VAR_261 ) return VAR_246 ; } else VAR_261 = VAR_246 ; <S2SV_ModStart> , VAR_248 , VAR_261 ,
<S2SV_ModStart> TYPE_20 METHOD_0 ( <S2SV_ModEnd> unsigned TYPE_13 * <S2SV_ModStart> TYPE_13 * VAR_94 , TYPE_20 VAR_95 , <S2SV_ModEnd> unsigned TYPE_13 * <S2SV_ModStart> TYPE_13 * VAR_96 , TYPE_20 VAR_104 , unsigned TYPE_13 * VAR_92 , TYPE_20 VAR_106 , unsigned TYPE_20 VAR_27 , TYPE_20 VAR_108 ) { unsigned TYPE_13 * VAR_109 = VAR_96 ; unsigned TYPE_13 * VAR_110 = VAR_92 ; TYPE_20 VAR_111 <S2SV_ModEnd> ; TYPE_20 VAR_36 <S2SV_ModStart> VAR_36 , VAR_88 <S2SV_ModEnd> ; TYPE_20 VAR_98 <S2SV_ModStart> 4 , 6 } ; TYPE_20 VAR_112 = 0 ; TYPE_20 VAR_113 = 1 ; TYPE_20 VAR_114 [ 16 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 <S2SV_ModStart> VAR_28 ) { if ( VAR_108 ) { VAR_112 = 1 ; VAR_113 = 2 ; } VAR_66 [ 0 ] += VAR_113 ; VAR_66 [ 1 ] += VAR_113 ; VAR_66 [ 2 ] += VAR_113 <S2SV_ModEnd> ; } for <S2SV_ModStart> VAR_62 <= 3 + VAR_112 <S2SV_ModStart> VAR_88 ] ; VAR_114 [ VAR_88 ] <S2SV_ModEnd> += VAR_67 ; <S2SV_ModStart> VAR_62 >= 4 + VAR_112 <S2SV_ModStart> + VAR_91 ; VAR_114 [ VAR_88 ] += VAR_91 ; } else { if ( ( VAR_92 [ VAR_88 ] - VAR_91 ) < 0 ) VAR_96 [ VAR_88 ] = 0 ; else VAR_96 [ VAR_88 ] = VAR_92 [ VAR_88 ] - VAR_91 ; VAR_114 [ VAR_88 ] -= VAR_91 ; } } } VAR_92 += VAR_106 ; VAR_94 += VAR_95 ; VAR_96 += VAR_104 ; } for ( VAR_88 = 0 ; VAR_88 < 16 ; ++ VAR_88 ) { if ( VAR_114 [ VAR_88 ] >= 128 ) { VAR_114 [ VAR_88 ] = 127 ; } VAR_98 += VAR_114 [ VAR_88 ] ; } VAR_111 = VAR_99 ; if ( VAR_108 ) VAR_111 = SUM_DIFF_THRESHOLD_HIGH ; if ( METHOD_2 ( VAR_98 ) > VAR_111 ) { TYPE_20 VAR_115 = ( ( METHOD_2 ( VAR_98 ) - VAR_111 ) >> 8 ) + 1 ; if ( VAR_115 < 4 ) { VAR_92 -= VAR_106 * 16 ; VAR_94 -= VAR_95 * 16 ; VAR_96 -= VAR_104 * 16 ; for ( VAR_36 = 0 ; VAR_36 < 16 ; ++ VAR_36 ) { for ( VAR_88 = 0 ; VAR_88 < 16 ; ++ VAR_88 ) { TYPE_20 VAR_67 = VAR_94 <S2SV_ModEnd> [ VAR_88 ] <S2SV_ModStart> VAR_88 ] - VAR_92 [ VAR_88 ] ; TYPE_20 VAR_91 = METHOD_2 ( VAR_67 ) ; if ( VAR_91 > VAR_115 ) VAR_91 = VAR_115 ; if ( VAR_67 > 0 ) { if ( VAR_96 [ VAR_88 ] - VAR_91 < 0 ) VAR_96 [ VAR_88 ] = 0 ; else VAR_96 [ VAR_88 ] = VAR_96 [ VAR_88 ] - VAR_91 ; VAR_114 [ VAR_88 ] -= VAR_91 ; } else if ( VAR_67 < 0 ) { if ( VAR_96 [ VAR_88 ] + VAR_91 > 255 ) VAR_96 [ VAR_88 ] = 255 ; else VAR_96 [ VAR_88 ] = VAR_96 [ VAR_88 ] + VAR_91 ; VAR_114 [ VAR_88 ] += VAR_91 ; } } VAR_92 += VAR_106 ; VAR_94 += VAR_95 ; VAR_96 += VAR_104 ; } VAR_98 = 0 ; for ( VAR_88 = 0 ; VAR_88 < 16 ; ++ VAR_88 ) { if ( VAR_114 [ VAR_88 ] >= 128 ) { VAR_114 [ VAR_88 ] = 127 ; } VAR_98 += VAR_114 [ VAR_88 ] <S2SV_ModEnd> ; } if <S2SV_ModStart> VAR_98 ) > VAR_111 <S2SV_ModEnd> ) return VAR_100 <S2SV_ModStart> return VAR_100 ; } else { return VAR_100 ; } } METHOD_3 ( VAR_109 <S2SV_ModEnd> , VAR_104 , <S2SV_ModStart> , VAR_104 , VAR_110 <S2SV_ModEnd> , VAR_106 )
<S2SV_ModStart> VAR_32 = 0 ; if ( ! METHOD_8 ( VAR_34 , VAR_7 , sizeof ( TYPE_3 ) ) ) return - VAR_33
<S2SV_ModStart> ; VAR_92 -> VAR_97 = VAR_87 -> VAR_97 ; VAR_92 ->
<S2SV_ModStart> VAR_9 ) { <S2SV_ModEnd> if ( VAR_9 <S2SV_ModStart> == VAR_4 ) METHOD_1 ( "putting<S2SV_blank>dst<S2SV_blank>lun_ref<S2SV_blank>for<S2SV_blank>%p\\n" , <S2SV_ModEnd> VAR_9 -> VAR_7 <S2SV_ModStart> VAR_9 -> VAR_7 ) ; else METHOD_1 ( "putting<S2SV_blank>src<S2SV_blank>lun_ref<S2SV_blank>for<S2SV_blank>%p\\n" , <S2SV_ModEnd> VAR_9 -> VAR_10 <S2SV_ModStart> VAR_9 -> VAR_10 ) ; METHOD_3 ( VAR_9 -> VAR_18 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_5 , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_MULTICAST_HOPS." ) ; METHOD_11 = - VAR_27 ; goto VAR_31 ; } VAR_25 = 1 ; VAR_26 = METHOD_7 ( VAR_32 , VAR_22 , VAR_33 , & VAR_25 , sizeof ( VAR_25 ) ) ; if ( VAR_26 == - 1 ) { METHOD_11 ( STRUCT_OR_UNION_5 , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVHOPLIMIT,."
<S2SV_ModStart> TYPE_3 VAR_112 ; struct STRUCT_OR_UNION_27 * VAR_113 = METHOD_61 ( VAR_58 ) -> VAR_114 ; <S2SV_ModStart> ; METHOD_27 ( VAR_113 , <S2SV_ModStart> ; METHOD_27 ( VAR_113 , <S2SV_ModStart> VAR_111 ) { <S2SV_ModEnd> METHOD_41 ( VAR_109 <S2SV_ModStart> ) ) { __u32 hash = METHOD_57 ( METHOD_58 ( VAR_109 ) -> h_hash ) ; mb2_cache_entry_delete_block ( VAR_113 , hash , VAR_109 -> VAR_98 <S2SV_ModEnd> ) ; METHOD_56 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> METHOD_53 ( STRUCT_OR_UNION_26
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_8 ; METHOD_2 <S2SV_ModEnd> ( VAR_8 . <S2SV_ModStart> . VAR_4 , "compression" , sizeof ( VAR_8 . VAR_4 ) <S2SV_ModEnd> ) ; if
<S2SV_ModStart> * VAR_6 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> -> VAR_9 , ( TYPE_2 ) <S2SV_ModStart> -> VAR_11 , ( TYPE_2 )
<S2SV_ModStart> { VAR_53 = METHOD_9 ( STRUCT_OR_UNION_7 <S2SV_ModEnd> , & STRUCT_OR_UNION_7 <S2SV_ModStart> STRUCT_OR_UNION_7 -> VAR_15 , & VAR_52 ) ; if ( VAR_53 ) return VAR_53 ; STRUCT_OR_UNION_7 -> VAR_18 = VAR_19 ; METHOD_2 ( STRUCT_OR_UNION_7 ) ; } break ; case VAR_23 : VAR_45 = VAR_25 ; break ; default : return - VAR_26 ; } if ( VAR_52 ) { VAR_47 = METHOD_3 ( VAR_52 -> VAR_30 ) ; VAR_49 = METHOD_4 ( VAR_47 , VAR_33 ) ; if ( ! VAR_49 ) return - VAR_35 ; VAR_53 = METHOD_5 ( & VAR_37 , VAR_52 , VAR_49 , VAR_47 <S2SV_ModStart> < 0 ) <S2SV_ModEnd> goto VAR_48 ;
<S2SV_ModStart> VAR_374 ) ; if ( METHOD_85 ( VAR_374 ) != ( TYPE_15 * ) VAR_250 )
<S2SV_ModStart> VAR_59 , 0 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> 3 * VAR_11 + 8
<S2SV_ModStart> VAR_61 ) { if ( METHOD_19 ( VAR_67 ) != VAR_79 ) { TYPE_5 VAR_80 ; VAR_80 = * * VAR_67 ; METHOD_20 ( & VAR_80 <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> ; METHOD_14 ( & VAR_80 <S2SV_ModEnd> ) ; VAR_77 <S2SV_ModStart> . VAR_56 = METHOD_21 ( VAR_80 ) ; } else { VAR_77 [ VAR_65 ] . VAR_56 = <S2SV_ModStart> VAR_67 ) ; } <S2SV_ModStart> VAR_61 ) { if ( METHOD_19 ( VAR_67 ) != VAR_79 ) { TYPE_5 VAR_80 ; VAR_80 = * * VAR_67 ; METHOD_20 ( & VAR_80 <S2SV_ModEnd> ) ; METHOD_14 <S2SV_ModStart> ; METHOD_14 ( & VAR_80 <S2SV_ModEnd> ) ; VAR_77 <S2SV_ModStart> . VAR_66 = METHOD_21 ( VAR_80 ) ; } else { VAR_77 [ VAR_65 ] . VAR_66 = <S2SV_ModStart> ; } } }
<S2SV_ModStart> ; TYPE_7 = <S2SV_ModEnd> VAR_39 -> VAR_10 <S2SV_ModStart> VAR_39 -> VAR_10 <S2SV_ModEnd> == VAR_12 ;
<S2SV_ModStart> METHOD_16 ( VAR_428 , VAR_430 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> , VAR_426 + ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_277 , ( TYPE_6 ) <S2SV_ModStart> , VAR_426 + ( TYPE_6 ) <S2SV_ModStart> ( VAR_426 + ( TYPE_6 ) <S2SV_ModStart> METHOD_16 ( VAR_420 , VAR_422 <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> ( ) ; METHOD_10 ( VAR_16 , METHOD_2 ( VAR_15 ) + METHOD_2 ( VAR_13 ) + 1 , VAR_17 ) ; <S2SV_ModStart> VAR_13 , VAR_15 ) ; METHOD_10 ( VAR_18 , METHOD_2 ( VAR_13 ) + 1 , VAR_17
<S2SV_ModStart> * VAR_12 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> * ) ; if ( VAR_12 -> VAR_18 ) { METHOD_3 ( VAR_12 , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VAR_19 ; } <S2SV_ModStart> TYPE_8 VAR_16 ; TYPE_10 * const VAR_20 = VAR_12 -> VAR_21 ; TYPE_11 * const VAR_22 = ( TYPE_11 * ) VAR_20 -> VAR_23 ; <S2SV_ModStart> return METHOD_2 ( VAR_22 <S2SV_ModEnd> -> VAR_13 ,
<S2SV_ModStart> . VAR_15 ; return METHOD_2 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> , 0 , & <S2SV_ModEnd> VAR_17 -> VAR_18 <S2SV_ModStart> VAR_17 -> VAR_18 , VAR_16 , VAR_21 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> 1 ) ; if ( VAR_29 < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( VAR_29 < 0 ) return 0 ;
<S2SV_ModStart> VAR_904 ) ; if ( VAR_928 -> VAR_932 && VAR_920 -> VAR_396 ) { METHOD_96 ( VAR_928 -> VAR_902 , VAR_903 , "Two<S2SV_blank>slices<S2SV_blank>reporting<S2SV_blank>being<S2SV_blank>the<S2SV_blank>first<S2SV_blank>in<S2SV_blank>the<S2SV_blank>same<S2SV_blank>frame.\\n" ) ; return 1 ; }
<S2SV_ModStart> , VAR_142 ; TYPE_109 VAR_249 ; <S2SV_ModStart> == VAR_33 ) VAR_249 = <S2SV_ModStart> ) ; else VAR_249 = <S2SV_ModStart> ( TYPE_131 ) ; if ( VAR_249 ) return VAR_250
<S2SV_ModStart> const VAR_19 = METHOD_5 ( VAR_24 , 0 ) ; if ( VAR_19 == VAR_27 ) { METHOD_4 ( <S2SV_ModStart> & VAR_24 -> VAR_25 , VAR_23 , "No<S2SV_blank>\'last\'<S2SV_blank>reference<S2SV_blank>frame" ) ; return VAR_23 ; } <S2SV_ModEnd> if ( !
<S2SV_ModStart> VAR_36 ) { TYPE_6 VAR_23 ; TYPE_6 <S2SV_ModEnd> VAR_32 ; VAR_7 <S2SV_ModStart> * VAR_30 ; TYPE_6 <S2SV_ModEnd> VAR_25 ; VAR_7
<S2SV_ModStart> -> METHOD_6 = VAR_18 + VAR_14 <S2SV_ModEnd> ; if (
<S2SV_ModStart> return METHOD_2 ( <S2SV_ModEnd> VAR_8 , 1 <S2SV_ModStart> = METHOD_2 ( <S2SV_ModEnd> VAR_8 , sizeof
<S2SV_ModStart> VAR_231 ) { TYPE_34 VAR_253 ; <S2SV_ModStart> -> VAR_200 ; VAR_253 = ( VAR_198 + VAR_208 -> VAR_200 ) % VAR_201 + VAR_231 ; if ( VAR_202 > 0 && VAR_253 > ( TYPE_35 ) ( VAR_258 / VAR_202 ) ) { METHOD_19 ( VAR_184 -> VAR_259 , METHOD_18 ( VAR_184 ) , "Integer<S2SV_blank>overflow<S2SV_blank>in<S2SV_blank>gtStripSeparate" ) ; return 0 ; } <S2SV_ModStart> , VAR_107 , VAR_253 <S2SV_ModEnd> * VAR_202 ) <S2SV_ModStart> , VAR_217 , VAR_253 <S2SV_ModEnd> * VAR_202 ) <S2SV_ModStart> , VAR_219 , VAR_253 <S2SV_ModEnd> * VAR_202 ) <S2SV_ModStart> , VAR_221 , VAR_253 <S2SV_ModEnd> * VAR_202 ) <S2SV_ModStart> , VAR_224 , VAR_253 <S2SV_ModEnd> * VAR_202 )
<S2SV_ModStart> ; } } METHOD_26 ( ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_16 ) { <S2SV_ModEnd> VAR_14 -> VAR_13 <S2SV_ModStart> VAR_14 -> VAR_13 . ptr [ <S2SV_ModEnd> VAR_14 -> VAR_13 <S2SV_ModStart> VAR_14 -> VAR_13 . VAR_17 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_14 -> VAR_13 . ptr <S2SV_ModStart> [ VAR_14 -> VAR_13 . VAR_17 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_16 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( VAR_31 == VAR_59 ) return - VAR_60 ; if ( VAR_31 ==
<S2SV_ModStart> VAR_136 -> VAR_137 , VAR_12
<S2SV_ModStart> ; if ( VAR_8 &&
<S2SV_ModStart> , VAR_19 ) * ( ( VAR_18 -> VAR_31 & VAR_32 ) ? 2 : 1 ) <S2SV_ModStart> VAR_27 ) != ( TYPE_9 )
<S2SV_ModStart> VAR_10 ; TYPE_12 VAR_123 ; TYPE_12 <S2SV_ModStart> TYPE_12 VAR_93 ; VAR_123 = VAR_119 -> VAR_124 & VAR_125 ; if ( VAR_123 <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> VAR_63 ) , VAR_123 <S2SV_ModEnd> ) ; return <S2SV_ModStart> } VAR_64 = VAR_123 <S2SV_ModEnd> - sizeof (
<S2SV_ModStart> -> VAR_5 ; struct STRUCT_OR_UNION_3 * VAR_10 = VAR_9 -> VAR_10 ; TYPE_1 VAR_14 = 0 ; if <S2SV_ModEnd> ( VAR_9 -> <S2SV_ModStart> ( VAR_9 -> VAR_15 || VAR_4 -> VAR_16 != METHOD_2 ( VAR_10 -> VAR_8 -> VAR_17 ) >> VAR_18 ) VAR_14 = METHOD_3 ( VAR_19 , VAR_12 ) ; return VAR_14 ? : METHOD_1 ( <S2SV_ModStart> -> VAR_8 , <S2SV_ModEnd> VAR_10 -> VAR_11
<S2SV_ModStart> VAR_112 ) { if ( VAR_128 < VAR_152 ) return 0 ;
<S2SV_ModStart> { METHOD_4 ( "crypto-%s" <S2SV_ModEnd> , VAR_30 ) <S2SV_ModStart> ) METHOD_4 ( "crypto-%s-all" <S2SV_ModEnd> , VAR_30 )
<S2SV_ModStart> VAR_51 . VAR_53 <S2SV_ModEnd> , 0 )
<S2SV_ModStart> VAR_35 ) ; METHOD_5 ( VAR_23 ) ;
<S2SV_ModStart> ; if ( METHOD_4 <S2SV_ModEnd> ( STRUCT_OR_UNION_5 )
<S2SV_ModStart> STRUCT_OR_UNION_7 , VAR_22 ) ; METHOD_7 ( VAR_20 , 0 , sizeof ( * VAR_20 )
<S2SV_ModStart> VAR_44 ) { if ( VAR_72 . VAR_58 != 16 ) { METHOD_16 ( VAR_90 , METHOD_17 ( "Invalid<S2SV_blank>salt<S2SV_blank>length:<S2SV_blank>%d<S2SV_blank>(instead<S2SV_blank>of<S2SV_blank>16)<S2SV_blank>received<S2SV_blank>from<S2SV_blank>server<S2SV_blank>%s\\n" ) , VAR_72 . VAR_58 , METHOD_18 ( ( struct STRUCT_OR_UNION_4 * ) VAR_93 ) ) ; } <S2SV_ModStart> . VAR_56 , 16 <S2SV_ModEnd> ) ; METHOD_6
<S2SV_ModStart> VAR_33 | VAR_199 | VAR_237 <S2SV_ModStart> -> VAR_37 ) <S2SV_ModEnd> VAR_52 |= VAR_39 <S2SV_ModStart> |= VAR_195 ; <S2SV_ModEnd> VAR_233 = *
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_19 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ) VAR_9 ; if <S2SV_ModEnd> ( ( VAR_101 <S2SV_ModStart> % VAR_102 ) != 0 ) { METHOD_3 ( VAR_4 -> VAR_103 , "horDiff8" , "%s" , "(cc%stride)!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( VAR_101 <S2SV_ModStart> ; } } return 1 ;
<S2SV_ModStart> -> VAR_9 <= 0 || ( unsigned TYPE_6 ) ( ( VAR_77 -> VAR_108 << 2 ) >> METHOD_15 ( VAR_77 ) ) ==
<S2SV_ModStart> , & VAR_20 , 0
<S2SV_ModStart> STRUCT_OR_UNION_7 , VAR_50 , VAR_42 -> VAR_43
<S2SV_ModStart> ; if ( METHOD_7 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> , "__debug__" ) <S2SV_ModEnd> ) { METHOD_6 <S2SV_ModStart> { if ( METHOD_7 <S2SV_ModEnd> ( VAR_14 , <S2SV_ModStart> * VAR_15 ) <S2SV_ModEnd> ) { METHOD_6
<S2SV_ModStart> - VAR_102 ; unsigned TYPE_25 VAR_123 = STRUCT_OR_UNION_15 -> VAR_124 ; <S2SV_ModStart> ) break ; if ( STRUCT_OR_UNION_15 -> VAR_124 == VAR_123 ) METHOD_17 ( VAR_121 [ VAR_119 ] ) ;
<S2SV_ModStart> -> VAR_15 ; if ( VAR_34 > VAR_17 ) { return - 1 ; } <S2SV_ModEnd> VAR_40 = VAR_32
<S2SV_ModStart> METHOD_15 . VAR_112 <S2SV_ModEnd> ; TYPE_5 VAR_106 <S2SV_ModStart> "localhost" ; } VAR_130 = METHOD_18 ( VAR_126 -> VAR_119 , VAR_112 , 0 , & <S2SV_ModStart> VAR_114 -> VAR_115 , VAR_131 , VAR_129 ) ; if ( VAR_130 ) return VAR_130 <S2SV_ModEnd> ; METHOD_15 (
<S2SV_ModStart> VAR_4 ) { METHOD_9 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> ( VAR_20 , VAR_21 , "ID:%s" <S2SV_ModEnd> , METHOD_6 ( <S2SV_ModStart> METHOD_6 ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_11 ) { METHOD_9 <S2SV_ModEnd> ( VAR_20 , <S2SV_ModStart> ( VAR_20 , VAR_21 , "String:\'%s\'" <S2SV_ModEnd> , METHOD_6 ( <S2SV_ModStart> METHOD_6 ( ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> && VAR_22 [ VAR_23 <S2SV_ModEnd> METHOD_9 ; VAR_25
<S2SV_ModStart> VAR_12 ) { TYPE_5 <S2SV_ModEnd> VAR_18 [ 2
<S2SV_ModStart> 0 ) ; VAR_352 = & VAR_356 -> VAR_357 . VAR_355 [ VAR_209 ] ; VAR_433 = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> ) + VAR_42 ; VAR_433 = min_t ( TYPE_16 , VAR_433 , VAR_352 -> VAR_273 - VAR_427 -> VAR_434 ) ; return VAR_433
<S2SV_ModStart> 0 ) ; if ( ! VAR_30 ) return - VAR_105 ;
<S2SV_ModStart> VAR_39 ) ; VAR_38 -> VAR_39 = VAR_23 ;
<S2SV_ModStart> , VAR_23 , VAR_24 <S2SV_ModEnd> ) ; VAR_26
<S2SV_ModStart> STRUCT_OR_UNION_3 -> VAR_1 , VAR_2
<S2SV_ModStart> VAR_57 ) ; METHOD_22 ( VAR_37 , VAR_59 , VAR_60 ) ;
<S2SV_ModStart> ) ) { * VAR_30 = "INVALID_S4U2PROXY_OPTIONS" ; <S2SV_ModStart> ) ) { * VAR_30 = "EVIDENCE_TICKET_MISMATCH" ;
<S2SV_ModStart> VAR_48 -> VAR_44 [ 0 ] <S2SV_ModStart> VAR_45 -> VAR_46 ; VAR_48 -> VAR_44 [ 1 ] = METHOD_9 ( )
<S2SV_ModStart> VAR_59 ) { TYPE_5 * VAR_65 ; TYPE_6 VAR_66 <S2SV_ModEnd> ; METHOD_8 ( <S2SV_ModStart> ; if ( VAR_59 < 0 ) { METHOD_9 ( "negative<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>for<S2SV_blank>jas_stream_memopen" ) ; } if ( VAR_56 && VAR_59 <= 0 ) { METHOD_10 ( "Invalid<S2SV_blank>use<S2SV_blank>of<S2SV_blank>jas_stream_memopen<S2SV_blank>detected.\\n" ) ; METHOD_9 ( "A<S2SV_blank>user-provided<S2SV_blank>buffer<S2SV_blank>for<S2SV_blank>" "jas_stream_memopen<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>growable.\\n" ) ; } <S2SV_ModEnd> if ( VAR_59 <S2SV_ModStart> 0 ) { VAR_66 = 0 ; VAR_65 = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { VAR_66 <S2SV_ModEnd> = VAR_59 ; <S2SV_ModStart> = VAR_59 ; VAR_65 = VAR_56 ; } return jas_stream_memopen2 ( VAR_65 , VAR_66 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; TYPE_24 VAR_293 ; METHOD_54 ( TYPE_70 )
<S2SV_ModStart> ) VAR_27 = VAR_30 <S2SV_ModEnd> ; else VAR_27 <S2SV_ModStart> else VAR_27 = ocfs2_dio_wr_get_block <S2SV_ModEnd> ; return METHOD_6
<S2SV_ModStart> , VAR_145 ) || ( VAR_152 -> VAR_147 ) ( VAR_327 , ( TYPE_27 * ) VAR_145 , VAR_297 , VAR_324 , VAR_152 -> VAR_153 ) != VAR_328
<S2SV_ModStart> VAR_43 ) ; return - VAR_108 ;
<S2SV_ModStart> TYPE_9 VAR_187 ; METHOD_29 ( & VAR_189 -> VAR_182 [ VAR_191 ] , 0 , sizeof ( VAR_52 ) ) ;
<S2SV_ModStart> VAR_3 ) { if ( METHOD_3 ( ) && ! METHOD_4 ( VAR_3 ) ) return VAR_4 ;
<S2SV_ModStart> VAR_117 < VAR_89 || VAR_89 < sizeof ( struct STRUCT_OR_UNION_12 ) <S2SV_ModStart> ; if ( VAR_89 >= 15 * 4 ) return 0 ; if (
<S2SV_ModStart> METHOD_78 ( VAR_323 , VAR_277 <S2SV_ModStart> METHOD_78 ( VAR_323 , VAR_277
<S2SV_ModStart> METHOD_0 ( struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_8 , <S2SV_ModStart> VAR_4 ) ; <S2SV_ModEnd> TYPE_3 VAR_24 ; <S2SV_ModStart> TYPE_3 VAR_24 ; VAR_24 = mb2_cache_entry_create <S2SV_ModEnd> ( VAR_8 , <S2SV_ModStart> VAR_8 , VAR_9 , VAR_26 , <S2SV_ModEnd> VAR_25 -> VAR_17 <S2SV_ModStart> VAR_25 -> VAR_17 <S2SV_ModEnd> ) ; if <S2SV_ModStart> VAR_24 ) { <S2SV_ModEnd> if ( VAR_24 <S2SV_ModStart> - VAR_22 ) <S2SV_ModEnd> METHOD_8 ( VAR_25 <S2SV_ModStart> "already<S2SV_blank>in<S2SV_blank>cache" ) ; } else <S2SV_ModEnd> METHOD_8 ( VAR_25 <S2SV_ModStart> VAR_26 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * VAR_27 ; <S2SV_ModEnd> VAR_27 = METHOD_2 <S2SV_ModStart> VAR_16 ) ; <S2SV_ModEnd> return VAR_27 ;
<S2SV_ModStart> VAR_21 ) { <S2SV_ModEnd> VAR_19 -> VAR_18 <S2SV_ModStart> VAR_19 -> VAR_18 . VAR_22 [ <S2SV_ModEnd> VAR_19 -> VAR_18 <S2SV_ModStart> VAR_19 -> VAR_18 . indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_19 -> VAR_18 . VAR_22 <S2SV_ModStart> [ VAR_19 -> VAR_18 . indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_19 -> VAR_18 . VAR_22 <S2SV_ModStart> [ VAR_19 -> VAR_18 . indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( VAR_38 || ! VAR_37 -> VAR_35 ||
<S2SV_ModStart> STRUCT_OR_UNION_8 * ) <S2SV_ModEnd> VAR_29 -> VAR_30 <S2SV_ModStart> VAR_29 -> VAR_30 <S2SV_ModEnd> ; struct STRUCT_OR_UNION_6 <S2SV_ModStart> struct STRUCT_OR_UNION_6 VAR_35 <S2SV_ModEnd> ; VAR_35 . <S2SV_ModStart> = VAR_26 ; <S2SV_ModEnd> ( TYPE_1 )
<S2SV_ModStart> ; TYPE_5 * VAR_16 <S2SV_ModEnd> = METHOD_1 ( <S2SV_ModStart> ; if ( ! VAR_16 || VAR_11 > VAR_17 ) METHOD_3 ( VAR_13 ) ; if ( <S2SV_ModStart> & VAR_15 , VAR_16 <S2SV_ModEnd> -> VAR_9 , <S2SV_ModStart> VAR_13 ) ; if ( VAR_15 > ( TYPE_4 ) VAR_11 ) { VAR_15 = - 1 ; METHOD_3 ( VAR_13 ) ; }
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_24 <S2SV_ModEnd> ; TYPE_2 VAR_28 <S2SV_ModStart> VAR_9 ) ; VAR_24 = METHOD_11 ( STRUCT_OR_UNION_8 -> VAR_29 . VAR_30 , VAR_14 , STRUCT_OR_UNION_8 -> VAR_29 . VAR_31 ) ; VAR_28 = METHOD_12 ( VAR_24 ) ; if ( METHOD_13 ( VAR_24 ) ) goto VAR_32 ; <S2SV_ModStart> if ( VAR_24 == METHOD_2 ( STRUCT_OR_UNION_8 ) ) { <S2SV_ModEnd> if ( VAR_16 <S2SV_ModStart> VAR_23 ) ; <S2SV_ModEnd> METHOD_8 ( STRUCT_OR_UNION_8 <S2SV_ModStart> ) ; } METHOD_7 ( VAR_24 ) ; <S2SV_ModStart> STRUCT_OR_UNION_8 ) ; VAR_32 :
<S2SV_ModStart> ( VAR_28 , & VAR_6 , <S2SV_ModStart> VAR_20 ) { <S2SV_ModEnd> VAR_40 = METHOD_5
<S2SV_ModStart> * VAR_9 && <S2SV_ModEnd> VAR_10 && VAR_11 <S2SV_ModStart> VAR_10 && VAR_11 <S2SV_ModEnd> ) return METHOD_2
<S2SV_ModStart> ( VAR_80 -> VAR_143 == VAR_144 && VAR_80 -> <S2SV_ModStart> else if ( VAR_80 -> VAR_143 == VAR_144 &&
<S2SV_ModStart> return 0 ; case VAR_22 : * ( TYPE_7 * ) VAR_17 = VAR_18 -> VAR_23 ; return 0 ;
<S2SV_ModStart> VAR_48 , VAR_69 + VAR_117 <S2SV_ModEnd> , VAR_119 ,
<S2SV_ModStart> VAR_2 -> VAR_3 ) ; if ( METHOD_5 ( STRUCT_OR_UNION_5 -> VAR_2 -> VAR_3 ) ) METHOD_6 ( STRUCT_OR_UNION_5 , VAR_8
<S2SV_ModStart> ++ ) { VAR_186 * VAR_138 ; <S2SV_ModStart> 1 ) ; VAR_138 = ( VAR_176 -> VAR_177 && VAR_176 -> VAR_177 -> VAR_178 ) ? VAR_176 -> VAR_177 -> VAR_178 -> VAR_179 : VAR_181 ; if ( ! VAR_138 || ! VAR_138 -> VAR_139 || ! VAR_138 -> VAR_117 || ! VAR_138 -> VAR_187 ) { return VAR_188 ; }
<S2SV_ModStart> TYPE_6 METHOD_0 ( const
<S2SV_ModStart> * VAR_40 ; if ( METHOD_9 ( VAR_39 , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , VAR_39 ) ; return VAR_42 ; }
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_29 != VAR_30
<S2SV_ModStart> ( VAR_12 METHOD_177 \\\n{ <S2SV_ModEnd> VAR_219 = ( <S2SV_ModStart> ++ ; } \\\n} <S2SV_ModEnd> typedef struct STRUCT_OR_UNION_9 <S2SV_ModStart> VAR_248 METHOD_177 ; for ( VAR_107 = 0 ; VAR_107 < VAR_246 ; VAR_107 ++ METHOD_177 VAR_245 [ VAR_107 ] = ( STRUCT_OR_UNION_9 * METHOD_177 METHOD_175 ( VAR_245 [ VAR_107 ] METHOD_177 ; <S2SV_ModStart> METHOD_175 ( VAR_248 METHOD_177 ; for ( VAR_107 = 0 ; VAR_107 <= VAR_246 ; VAR_107 ++ METHOD_177 VAR_245 [ VAR_107 ] = ( STRUCT_OR_UNION_9 * METHOD_177 METHOD_175 ( VAR_245 [ VAR_107 ]
<S2SV_ModStart> ; if ( VAR_92 < METHOD_15 ( VAR_77 ) &&
<S2SV_ModStart> ( ) ; METHOD_7 ( VAR_14 ) ; METHOD_8 ( VAR_14 , METHOD_10 ( "Cookie" ) , METHOD_10 ( "cockpit=d" ) ) ; if ( METHOD_11 ( VAR_11 -> VAR_12 , "/cockpit" , VAR_14 ) ) METHOD_12 ( ) ;
<S2SV_ModStart> , VAR_33 , JAS_CAST ( unsigned , <S2SV_ModEnd> METHOD_3 ( VAR_30 <S2SV_ModStart> VAR_33 ] ) ) <S2SV_ModStart> , VAR_33 , JAS_CAST ( unsigned , <S2SV_ModEnd> METHOD_4 ( VAR_30 <S2SV_ModStart> ] ) ) )
<S2SV_ModStart> VAR_50 ; } if ( VAR_102 -> VAR_44 > 6 || VAR_102 -> VAR_46 > 6 ) { METHOD_13 ( VAR_86 -> VAR_67 , "cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64" ) ; return VAR_104 ; }
<S2SV_ModStart> == * VAR_289 && VAR_289 [ 1 ]
<S2SV_ModStart> * VAR_11 , const TYPE_7 * VAR_30 , <S2SV_ModStart> VAR_26 = & VAR_30 <S2SV_ModEnd> -> VAR_10 [
<S2SV_ModStart> ( VAR_102 -> METHOD_36 <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( VAR_102 -> METHOD_36 <S2SV_ModEnd> ( ) , <S2SV_ModStart> , VAR_102 -> METHOD_36 <S2SV_ModEnd> ( ) , <S2SV_ModStart> ) ; } while ( <S2SV_ModStart> , VAR_132 ) ) { } <S2SV_ModEnd> METHOD_31 ( "\\n"
<S2SV_ModStart> , VAR_60 - VAR_63 <S2SV_ModEnd> -> VAR_52 ,
<S2SV_ModStart> VAR_197 -> VAR_57 ) ; METHOD_9 ( & VAR_197 -> VAR_199
<S2SV_ModStart> VAR_12 ) && METHOD_4 <S2SV_ModEnd> ( ) &&
<S2SV_ModStart> METHOD_3 ( & VAR_9 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> ; METHOD_5 ( ) ; METHOD_3 ( & VAR_10
<S2SV_ModStart> , 0 ) ; if ( ! VAR_525 || ! VAR_531 ) return - VAR_288
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_77 , VAR_70
<S2SV_ModStart> { VAR_66 = METHOD_15 ( <S2SV_ModStart> ] , VAR_11 ) <S2SV_ModStart> ; if ( METHOD_15 ( <S2SV_ModStart> sizeof ( VAR_38 ) <S2SV_ModStart> 1 ; } METHOD_15 ( <S2SV_ModStart> , VAR_43 ) ) ; METHOD_15 ( <S2SV_ModEnd> METHOD_12 ( VAR_66 <S2SV_ModStart> , VAR_46 ) ) ; METHOD_15 ( <S2SV_ModEnd> METHOD_12 ( VAR_66 <S2SV_ModStart> VAR_48 , VAR_49 ) <S2SV_ModStart> VAR_59 ++ ) METHOD_15 ( <S2SV_ModStart> . VAR_60 ) ) ; if ( METHOD_15 <S2SV_ModEnd> ( METHOD_12 ( <S2SV_ModStart> VAR_62 , VAR_63 )
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 <S2SV_ModEnd> VAR_18 ; TYPE_1 <S2SV_ModStart> return VAR_10 ; <S2SV_ModEnd> if ( ! <S2SV_ModStart> if ( ! METHOD_4 ( & VAR_18 , VAR_10 ) <S2SV_ModEnd> ) return - <S2SV_ModStart> ! ( VAR_18 . <S2SV_ModEnd> VAR_14 & METHOD_5 <S2SV_ModStart> ( ( VAR_18 . <S2SV_ModEnd> VAR_17 << 1 <S2SV_ModStart> ) | VAR_18 . <S2SV_ModEnd> VAR_19 ) {
<S2SV_ModStart> VAR_12 ++ ) METHOD_4 <S2SV_ModEnd> ( & VAR_16
<S2SV_ModStart> return VAR_36 ; METHOD_13 ( VAR_28 ) ;
<S2SV_ModStart> TYPE_2 * VAR_27 , TYPE_4 VAR_33 <S2SV_ModStart> = 0 ; VAR_31 -> VAR_33 = VAR_33 ; VAR_31 -> VAR_34 = 0 ;
<S2SV_ModStart> VAR_312 ) ; if ( ! VAR_305 && VAR_37 != VAR_38 && VAR_37 != VAR_82 && VAR_37 != VAR_163 ) { METHOD_39 ( VAR_332 ) ; return 0 ; }
<S2SV_ModStart> = VAR_72 ; if ( VAR_210 == ( TYPE_22 * ) VAR_203 ) VAR_210 = VAR_198 ; else METHOD_16 ( & VAR_210 , VAR_198 ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> VAR_186 = METHOD_17
<S2SV_ModStart> ; while ( ( <S2SV_ModStart> ) != VAR_16 ) && ( VAR_19 -> VAR_21 < VAR_19 -> VAR_22 )
<S2SV_ModStart> "ipc_flood_duration_ms" ) ) { VAR_98 = <S2SV_ModEnd> - VAR_37 ; <S2SV_ModStart> - VAR_37 ; goto VAR_96 ; }
<S2SV_ModStart> ) ] ; TYPE_3 VAR_19 ; TYPE_6 VAR_17 ; VAR_19 = METHOD_4 ( VAR_18 , sizeof ( VAR_11 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> , VAR_7 , VAR_19 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> VAR_26 -> VAR_23 ) ; } if ( ( ( VAR_27 -> VAR_21 > 40 ) && ( ( VAR_27 -> VAR_32 & VAR_33 ) == 0 ) ) || ( VAR_27 -> VAR_21 > 1024 ) ) { METHOD_4 ( VAR_27 , VAR_34 , VAR_8 ) ; while ( VAR_27 -> VAR_21 > 1 ) METHOD_6 ( METHOD_5 ( VAR_27 ) ) ; return ( - 1
<S2SV_ModStart> } if ( METHOD_25 ( VAR_70 -> VAR_74 ) > VAR_75 ) { METHOD_22 ( VAR_64 , VAR_65 , "Invalid<S2SV_blank>segment<S2SV_blank>count<S2SV_blank>(%u)" , METHOD_25 ( VAR_70 -> VAR_74 ) ) ; return 1 ; } if (
<S2SV_ModStart> VAR_54 ) { const TYPE_7 * const VAR_65 = VAR_62 ; <S2SV_ModStart> 1 ] , "ORIGIN}" <S2SV_ModEnd> , 6 ) <S2SV_ModStart> 1 ] , "PLATFORM}" <S2SV_ModEnd> , 8 ) <S2SV_ModStart> ? ( VAR_31 && ( ( VAR_62 [ VAR_47 ] != '\\0' && ( ! VAR_54 || VAR_62 [ VAR_47 ] != ':' ) ) || ( VAR_62 != VAR_65 && ( ! VAR_54 || VAR_62 [ - 1 ] != ':' ) ) )
<S2SV_ModStart> ( TYPE_15 ) , 1
<S2SV_ModStart> VAR_295 ) { struct STRUCT_OR_UNION_15 * VAR_299 = VAR_157 ; <S2SV_ModStart> ! VAR_267 ) { VAR_267 = METHOD_38 ( VAR_242 ) ; VAR_299 = VAR_267 ; } <S2SV_ModEnd> if ( VAR_286 <S2SV_ModStart> VAR_286 ) ; METHOD_39 ( VAR_299 ) ;
<S2SV_ModStart> { VAR_50 = METHOD_10 ( STRUCT_OR_UNION_9 <S2SV_ModEnd> , & STRUCT_OR_UNION_9 <S2SV_ModStart> STRUCT_OR_UNION_9 -> VAR_24 , & VAR_49 ) ; if ( VAR_50 ) return VAR_50 ; <S2SV_ModEnd> } break ;
<S2SV_ModStart> & VAR_166 ) { if ( ! VAR_183 . VAR_184 ) { VAR_202 = VAR_206 [ VAR_183 . VAR_207 ] . VAR_138 ; if ( ! VAR_202 ) VAR_202 = - VAR_208 ; <S2SV_ModEnd> goto VAR_203 ; <S2SV_ModStart> goto VAR_203 ; } VAR_202 = METHOD_30 ( VAR_204 , METHOD_36 ( VAR_199 ) . VAR_200 , VAR_193 -> VAR_194 , VAR_173 , VAR_188 , VAR_175 -> VAR_176 , VAR_183 . VAR_178 , VAR_183 . VAR_180 , VAR_189 . VAR_182 , VAR_183 . VAR_184 , 0 ) ; } else { VAR_202 = METHOD_32 ( STRUCT_OR_UNION_16 , VAR_186 , VAR_187 , VAR_188 , & VAR_189 , VAR_204 , METHOD_36 ( VAR_199 ) . VAR_200 , VAR_193 -> VAR_194 ) ; } if ( VAR_202 < 0 ) goto VAR_203 ;
<S2SV_ModStart> ) break ; VAR_172 = METHOD_44 ( VAR_177 , VAR_177 -> VAR_105 , VAR_177 -> VAR_133 ) ; if ( VAR_172 == VAR_173 ) { METHOD_45 ( VAR_140 , & VAR_177 -> VAR_140 ) ; return ( METHOD_37 ( VAR_177 ) ) ; }
<S2SV_ModStart> goto VAR_99 ; TYPE_9 VAR_101 = ( VAR_100 -> VAR_16 == 2 ? VAR_6 -> VAR_102 : 1 ) * VAR_79 -> VAR_103 [ 1 ] / 2 ; if ( VAR_100 -> VAR_19 > VAR_100 -> VAR_22 || VAR_100 -> VAR_22 > VAR_101 ) { goto VAR_99 ; }
<S2SV_ModStart> if ( ! METHOD_13 ( VAR_24 , <S2SV_ModEnd> VAR_15 -> VAR_16
<S2SV_ModStart> ) break ; <S2SV_ModEnd> VAR_73 -> VAR_74 <S2SV_ModStart> = VAR_75 ; } VAR_73 -> VAR_74 = VAR_75 ;
<S2SV_ModStart> * VAR_24 , TYPE_5 <S2SV_ModEnd> VAR_19 , TYPE_4
<S2SV_ModStart> -> VAR_40 = METHOD_10 <S2SV_ModEnd> ( VAR_41 +
<S2SV_ModStart> VAR_0 ) { METHOD_3 <S2SV_ModEnd> ( METHOD_2 ( <S2SV_ModStart> ( STRUCT_OR_UNION_3 ) , STRUCT_OR_UNION_3
<S2SV_ModStart> * VAR_39 , TYPE_12 VAR_53 , TYPE_8 <S2SV_ModEnd> VAR_42 , TYPE_8 <S2SV_ModStart> VAR_39 = VAR_39 ; VAR_52 -> VAR_37 . METHOD_7 . VAR_53 = VAR_53
<S2SV_ModStart> TYPE_3 * VAR_34 , TYPE_23 VAR_209 <S2SV_ModStart> , VAR_135 , VAR_209 ? METHOD_28 ( VAR_210 ) :
<S2SV_ModStart> = METHOD_5 ( ( TYPE_0 struct STRUCT_OR_UNION_2 * * )
<S2SV_ModStart> ) { case VAR_157 : METHOD_29 ( VAR_139 , VAR_157 , VAR_156 ) ; return 1 ; case
<S2SV_ModStart> "Flooding<S2SV_blank>was<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>this<S2SV_blank>HTTP/2<S2SV_blank>session,<S2SV_blank>and<S2SV_blank>it<S2SV_blank>must<S2SV_blank>be<S2SV_blank>" "closed" ; case VAR_41 : return "SETTINGS<S2SV_blank>frame<S2SV_blank>contained<S2SV_blank>more<S2SV_blank>than<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>entries" ;
<S2SV_ModStart> TYPE_5 VAR_40 ; if ( METHOD_8 ( VAR_37 ) < 6 ) return VAR_42 ;
<S2SV_ModStart> -> VAR_141 , "%s" , <S2SV_ModStart> -> VAR_141 , "%s" ,
<S2SV_ModStart> ; struct STRUCT_OR_UNION_4 * VAR_76 = & VAR_69 -> VAR_81 . VAR_82 . VAR_83 ; <S2SV_ModEnd> METHOD_5 ( "%s:<S2SV_blank>skb:%p,<S2SV_blank>len:%d,<S2SV_blank>src:%pI6<S2SV_blank>dst:%pI6\\n" <S2SV_ModStart> , & VAR_76 -> <S2SV_ModEnd> VAR_64 , & <S2SV_ModStart> , & VAR_76 -> <S2SV_ModEnd> VAR_66 ) ; <S2SV_ModStart> VAR_66 ) ; METHOD_3 ( VAR_74 , VAR_76 -> VAR_32 <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 1 ; METHOD_6 ( METHOD_7 ( VAR_74 ) , VAR_68 ) ; <S2SV_ModStart> , VAR_75 , <S2SV_ModEnd> VAR_76 , VAR_79
<S2SV_ModStart> = VAR_98 ; VAR_129 -> VAR_139 = STRUCT_OR_UNION_31 . STRUCT_OR_UNION_26 -> VAR_94 -> VAR_139 + 1 ; VAR_138 = - VAR_66 ; if ( VAR_129 -> VAR_139 > VAR_140 ) { METHOD_28 ( "eCryptfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n" ) ; goto VAR_127 ; }
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_45 , 0
<S2SV_ModStart> VAR_651 ) ; if ( VAR_639 == 0 ) METHOD_132 ( VAR_718 , "ImproperImageHeader" ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_6 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> , "RDP_NEG_FAILURE" ) ; if ( METHOD_11 ( VAR_10 ) < 7 ) return VAR_34 <S2SV_ModStart> = VAR_33 ; return VAR_24 ;
<S2SV_ModStart> -> VAR_886 , 0 ,
<S2SV_ModStart> TYPE_1 * VAR_15 <S2SV_ModEnd> , TYPE_3 VAR_4
<S2SV_ModStart> { VAR_41 = <S2SV_ModEnd> VAR_40 -> VAR_33 <S2SV_ModStart> VAR_40 -> VAR_33 -> rqs [ <S2SV_ModEnd> VAR_44 + VAR_35 <S2SV_ModStart> VAR_44 + VAR_35 ] <S2SV_ModEnd> ; if (
<S2SV_ModStart> ( VAR_32 = METHOD_10 ( <S2SV_ModEnd> ) ) ==
<S2SV_ModStart> TYPE_1 * VAR_36 , TYPE_4 * VAR_22 <S2SV_ModStart> VAR_38 ] += VAR_22 -> <S2SV_ModEnd> VAR_23 [ VAR_24
<S2SV_ModStart> { VAR_228 ++ ; } if ( VAR_231 >= VAR_232 ) { METHOD_18 ( "Too<S2SV_blank>many<S2SV_blank>operands\\n" ) ; return VAR_234
<S2SV_ModStart> & VAR_19 -> VAR_51 . <S2SV_ModStart> VAR_12 ) ; <S2SV_ModEnd> METHOD_2 ( VAR_24 <S2SV_ModStart> VAR_19 -> VAR_17 <S2SV_ModEnd> , 0 , <S2SV_ModStart> VAR_29 ) ; METHOD_10 <S2SV_ModEnd> ( VAR_48 -> <S2SV_ModStart> VAR_45 ) ; METHOD_10 <S2SV_ModEnd> ( VAR_48 ->
<S2SV_ModStart> { VAR_161 = METHOD_20 <S2SV_ModEnd> ( METHOD_2 (
<S2SV_ModStart> VAR_79 ) ; TYPE_8 ( & VAR_132 -> VAR_135 ) ;
<S2SV_ModStart> "SIG<S2SV_blank>padding<S2SV_blank>does<S2SV_blank>not<S2SV_blank>check<S2SV_blank>out" ; } ( * VAR_47 ) = VAR_48 + <S2SV_ModEnd> VAR_46 + 3 <S2SV_ModStart> + 3 ; { const TYPE_5 * VAR_50 ; TYPE_6 VAR_51 = 0 ; for ( VAR_50 = VAR_48 + 2 ; VAR_50 < VAR_48 + VAR_46 + 2 ; VAR_50 ++ ) if ( * VAR_50 == 0xFF ) VAR_51 ++ ; if ( VAR_51 != VAR_46 ) return "4" "invalid<S2SV_blank>Padding<S2SV_blank>String" ; } <S2SV_ModEnd> return VAR_49 ;
<S2SV_ModStart> TYPE_14 VAR_39 = METHOD_11 ( <S2SV_ModStart> sizeof ( TYPE_15 )
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> { VAR_925 ->
<S2SV_ModStart> VAR_86 ) ; if ( VAR_87 -> VAR_70 . VAR_89 != VAR_84 ) <S2SV_ModStart> METHOD_18 ( VAR_87 -> VAR_70 . VAR_89 ) ; METHOD_18 ( VAR_87 <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> VAR_86 ) ; if ( VAR_87 -> VAR_70 . VAR_89 != VAR_84 ) <S2SV_ModStart> METHOD_18 ( VAR_87 -> VAR_70 . VAR_89 ) ; METHOD_18 ( VAR_87 <S2SV_ModStart> ; return ( - 1 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; struct STRUCT_OR_UNION_4 * VAR_76 = & VAR_69 -> VAR_81 . VAR_82 . VAR_83 ; <S2SV_ModEnd> METHOD_5 ( "%s:<S2SV_blank>skb:%p,<S2SV_blank>len:%d,<S2SV_blank>src:%pI6<S2SV_blank>dst:%pI6\\n" <S2SV_ModStart> , & VAR_76 -> <S2SV_ModEnd> VAR_64 , & <S2SV_ModStart> , & VAR_76 -> <S2SV_ModEnd> VAR_66 ) ; <S2SV_ModStart> VAR_66 ) ; METHOD_3 ( VAR_74 , VAR_76 -> VAR_32 <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 1 ; METHOD_6 ( METHOD_7 ( VAR_74 ) , VAR_68 ) ; <S2SV_ModStart> , VAR_75 , <S2SV_ModEnd> VAR_76 , VAR_79
<S2SV_ModStart> VAR_62 < 1 || VAR_61 -> VAR_62 > VAR_66 / sizeof ( * VAR_64 )
<S2SV_ModStart> . VAR_54 ; METHOD_10 ( VAR_56 , 1 , "in<S2SV_blank>function<S2SV_blank>mp_unpack_full" ) ;
<S2SV_ModStart> TYPE_3 * VAR_17 , const TYPE_3 * VAR_24 <S2SV_ModStart> VAR_22 , VAR_21 , VAR_24
<S2SV_ModStart> = 8 ; VAR_34 = METHOD_29 ( VAR_109 , VAR_109 -> VAR_80 , VAR_109 -> VAR_98 ) ; if ( VAR_34 == VAR_103 ) { METHOD_30 ( VAR_104 , & VAR_109 -> VAR_104 ) ; return ( METHOD_9 ( VAR_109 ) ) ; }
<S2SV_ModStart> VAR_27 ) { TYPE_8 VAR_36 ; TYPE_8 VAR_37 ; TYPE_8 VAR_38 ; TYPE_8 VAR_39 ; TYPE_8 VAR_40 ; TYPE_8 VAR_41 ; TYPE_9 VAR_42 ; TYPE_9 VAR_43 ; unsigned TYPE_1 VAR_44 ; unsigned TYPE_1 VAR_45 ; TYPE_6 * VAR_46 ; TYPE_6 * VAR_35 <S2SV_ModEnd> ; const TYPE_6 <S2SV_ModStart> TYPE_6 TYPE_7 * <S2SV_ModEnd> VAR_33 = ( <S2SV_ModStart> -> VAR_10 ; TYPE_6 VAR_47 [ 96 ] ; METHOD_6 ( VAR_16 > 7500 ) ; VAR_36 = VAR_16 ; VAR_46 = METHOD_2 ( VAR_16 + 1 , VAR_17 ) ; if ( ! VAR_46 ) { METHOD_3 ( "out<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>argv<S2SV_blank>string" ) ; return ; } VAR_35 = VAR_46 ; <S2SV_ModStart> VAR_23 ) ; VAR_37 = VAR_36 ; VAR_39 = 0 ; VAR_38 = 0 ; VAR_42 = VAR_48 ; VAR_43 = VAR_49 ; VAR_44 = 0 ; VAR_45 = 0 ; do { if ( VAR_38 == 0 ) VAR_38 = METHOD_7 ( VAR_33 , VAR_50 ) - 1 ; if ( VAR_42 ) { if ( VAR_35 != VAR_46 ) { METHOD_8 ( VAR_46 , VAR_35 , VAR_39 ) ; VAR_35 = VAR_46 ; } VAR_41 = METHOD_9 ( & VAR_46 [ VAR_39 ] , VAR_33 , VAR_36 - VAR_39 ) ; if ( VAR_41 == - VAR_51 ) { METHOD_10 ( VAR_52 , VAR_8 , 0 ) ; goto VAR_53 ; } else if ( VAR_41 == ( VAR_36 - VAR_39 ) ) { VAR_42 = VAR_48 ; VAR_43 = VAR_48 ; VAR_38 = VAR_38 * 2 ; VAR_33 += VAR_41 ; } else { VAR_42 = VAR_49 ; if ( ! VAR_43 ) VAR_43 = audit_string_contains_control ( VAR_35 , VAR_41 ) ; if ( VAR_38 < VAR_36 ) VAR_38 = ( VAR_43 ? VAR_41 * 2 : VAR_41 ) ; VAR_33 += VAR_41 + 1 ; } VAR_39 += VAR_41 ; VAR_46 [ VAR_39 ] = '\\0' ; VAR_40 = ( VAR_43 ? VAR_39 * 2 : VAR_39 + 2 ) ; } if ( VAR_39 > 0 ) { if ( ( sizeof ( VAR_47 ) + 8 ) > VAR_37 ) { VAR_37 = VAR_36 ; audit_log_end ( * VAR_27 ) ; * VAR_27 = audit_log_start ( VAR_26 , VAR_17 , AUDIT_EXECVE <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( ! * VAR_27 ) goto VAR_53 ; } VAR_41 = 0 ; if ( VAR_42 || ( VAR_44 > 0 ) || ( ( VAR_40 + sizeof ( VAR_47 ) ) > VAR_37 ) ) { if ( VAR_44 == 0 ) { VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d_len=%lu" , VAR_45 , VAR_38 ) ; } VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d[%d]=" , VAR_45 , VAR_44 ++ ) ; } else VAR_41 += METHOD_11 ( & VAR_47 [ VAR_41 ] , sizeof ( VAR_47 ) - VAR_41 , "<S2SV_blank>a%d=" , VAR_45 ) ; METHOD_12 ( VAR_41 >= sizeof ( VAR_47 ) ) ; VAR_47 [ sizeof ( VAR_47 ) - 1 ] = '\\0' ; METHOD_1 ( * VAR_27 , "%s" , VAR_47 ) ; VAR_37 -= VAR_41 ; VAR_41 = VAR_39 ; if ( VAR_43 ) { if ( VAR_40 > VAR_37 ) VAR_41 = VAR_37 / 2 ; METHOD_13 ( * VAR_27 , VAR_35 , VAR_41 ) ; VAR_37 -= VAR_41 * 2 ; VAR_40 -= VAR_41 * 2 ; } else { if ( VAR_40 > VAR_37 ) VAR_41 = VAR_37 - 2 ; METHOD_14 ( * VAR_27 , VAR_35 , VAR_41 ) ; VAR_37 -= VAR_41 + 2 ; VAR_40 -= VAR_41 ; } VAR_39 -= VAR_41 ; VAR_35 += VAR_41 ; } if ( ( VAR_39 == 0 ) && ! VAR_42 ) { VAR_45 ++ ; VAR_44 = 0 ; VAR_38 = 0 ; VAR_42 = VAR_48 ; VAR_43 = VAR_49 ; } } while ( VAR_45 <S2SV_ModEnd> < VAR_26 -> <S2SV_ModStart> VAR_22 . VAR_23 ) ; VAR_53 : METHOD_5 ( VAR_46 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> | VAR_16 , ( VAR_25 == 0 || VAR_25 == VAR_22 ) ? 0644 : VAR_25 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_50 ) { <S2SV_ModEnd> TYPE_10 VAR_34 [ <S2SV_ModStart> VAR_34 [ VAR_20 <S2SV_ModEnd> ] ; if <S2SV_ModStart> VAR_51 ; } return METHOD_6 ( VAR_42 -> VAR_43 , VAR_47 , VAR_48 <S2SV_ModEnd> , VAR_34 , <S2SV_ModStart> , VAR_34 , <S2SV_ModEnd> VAR_49 , VAR_50 <S2SV_ModStart> VAR_50 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * STRUCT_OR_UNION_9 ) <S2SV_ModEnd> { TYPE_1 VAR_7 <S2SV_ModStart> ; TYPE_2 VAR_14 ; if ( STRUCT_OR_UNION_9 -> VAR_1 ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ++ ) { VAR_108 ; <S2SV_ModStart> ; } } <S2SV_ModEnd> VAR_109 ++ ;
<S2SV_ModStart> { struct STRUCT_OR_UNION_1 * <S2SV_ModStart> TYPE_5 VAR_59 ; <S2SV_ModEnd> METHOD_1 ( & <S2SV_ModStart> case VAR_26 : VAR_49 = <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_30 . VAR_52 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_34 : VAR_49 = <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_38 . VAR_52 <S2SV_ModEnd> ) ; break <S2SV_ModStart> case VAR_42 : VAR_49 = <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> . VAR_52 ) <S2SV_ModEnd> ; break ; <S2SV_ModStart> ) ; } VAR_49 -> VAR_10 = VAR_10 ; VAR_49 -> VAR_12 = VAR_13 ; VAR_49 -> VAR_15 = VAR_16 ;
<S2SV_ModStart> ; if ( VAR_18 == VAR_22 ||
<S2SV_ModStart> VAR_460 -> VAR_358 ; METHOD_120 ( & STRUCT_OR_UNION_21 -> VAR_356 )
<S2SV_ModStart> STRUCT_OR_UNION_8 * VAR_36 <S2SV_ModEnd> ; TYPE_2 VAR_41 <S2SV_ModStart> 0 ; } <S2SV_ModEnd> METHOD_7 ( & <S2SV_ModStart> VAR_41 = ( METHOD_6 ( VAR_36 ) -> VAR_16 <S2SV_ModEnd> != VAR_35 )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_5 <S2SV_ModStart> 1 ) ; for ( <S2SV_ModEnd> VAR_45 = VAR_10 <S2SV_ModStart> . VAR_48 ; VAR_45 ; VAR_45 = VAR_45 -> VAR_48 <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> 0 ; } <S2SV_ModEnd> METHOD_8 ( VAR_39 <S2SV_ModStart> VAR_41 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_57 ; } if ( VAR_49 >= VAR_63 ) { METHOD_10 ( VAR_54 , VAR_55 , "Too<S2SV_blank>many<S2SV_blank>arguments" ) ; return VAR_57 ; } <S2SV_ModStart> VAR_37 ) ; <S2SV_ModEnd> } if (
<S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 ) <S2SV_ModStart> ; if ( VAR_411 > ( unsigned ) ( <S2SV_ModEnd> VAR_387 + VAR_388 <S2SV_ModStart> VAR_387 + VAR_388 - VAR_407 )
<S2SV_ModStart> , VAR_43 ) \\\n{ <S2SV_ModEnd> if ( VAR_1594 <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> TYPE_342 VAR_333 [ <S2SV_ModStart> ; if ( VAR_1131 > ( TYPE_317 ) METHOD_272 ( VAR_1619 ) ) METHOD_226 ( VAR_1533 , "InsufficientImageDataInFile" ) ; if (
<S2SV_ModStart> TYPE_1 ) { if ( ! VAR_3 ) { METHOD_4 ( ) ; METHOD_5 ( VAR_4 , "Not<S2SV_blank>in<S2SV_blank>Recovery<S2SV_blank>mode" ) ; METHOD_6 ( ) ; return ; }
<S2SV_ModStart> ( VAR_46 , VAR_49 , VAR_39 [ 0 ] ) ; METHOD_7 ( VAR_46 , VAR_52 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_51 <S2SV_ModEnd> , VAR_39 [ <S2SV_ModStart> ( VAR_46 , VAR_49 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_52 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( VAR_46 , VAR_51 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> ( VAR_250 + 257UL <S2SV_ModEnd> , VAR_483 ->
<S2SV_ModStart> VAR_424 ; } METHOD_85 ( VAR_435 , 0 , sizeof ( struct STRUCT_OR_UNION_4 ) ) ;
<S2SV_ModStart> { TYPE_51 VAR_596 , VAR_600 <S2SV_ModStart> ; for ( VAR_600 = 0 ; VAR_600 < VAR_594 -> VAR_601 ; VAR_600 <S2SV_ModEnd> ++ ) { <S2SV_ModStart> -> VAR_595 , VAR_600 <S2SV_ModEnd> , VAR_597 )
<S2SV_ModStart> ) -> VAR_53 [ 0 ]
<S2SV_ModStart> "overflow<S2SV_blank>in<S2SV_blank>exec<S2SV_blank>arguments\\n" ) ; VAR_172 = - VAR_173 ;
<S2SV_ModStart> TYPE_16 ) { const struct STRUCT_OR_UNION_3 * VAR_85 ; <S2SV_ModStart> * VAR_77 ; VAR_85 = ( const struct STRUCT_OR_UNION_3 * ) TYPE_28 ; <S2SV_ModStart> METHOD_1 ( * VAR_85 <S2SV_ModEnd> ) ; METHOD_2
<S2SV_ModStart> TYPE_4 VAR_14 , TYPE_5 <S2SV_ModEnd> * VAR_25 )
<S2SV_ModStart> 4 ] ; unsigned TYPE_9 <S2SV_ModEnd> VAR_30 ; if <S2SV_ModStart> VAR_30 = ( unsigned TYPE_9 ) <S2SV_ModEnd> VAR_27 [ 0 <S2SV_ModStart> ] << 24 <S2SV_ModEnd> ; VAR_30 |= <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> ; VAR_30 |= ( unsigned TYPE_9 ) <S2SV_ModStart> . VAR_29 = <S2SV_ModEnd> VAR_30 & 0xffffffff <S2SV_ModStart> VAR_30 & 0xffffffff <S2SV_ModEnd> ; return (
<S2SV_ModStart> VAR_9 ) { METHOD_1 ( VAR_10 <S2SV_ModEnd> , "\\n<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>re" , <S2SV_ModStart> VAR_9 ) ; METHOD_2 ( VAR_10 ) ;
<S2SV_ModStart> , VAR_60 - VAR_63 <S2SV_ModEnd> -> VAR_52 ,
<S2SV_ModStart> TYPE_1 METHOD_0 ( struct STRUCT_OR_UNION_3 * VAR_19 <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; METHOD_1 ( VAR_19 <S2SV_ModEnd> ) ; VAR_18 <S2SV_ModStart> ; VAR_18 = VAR_19 <S2SV_ModEnd> -> STRUCT_OR_UNION_2 ; <S2SV_ModStart> -> STRUCT_OR_UNION_2 ; VAR_19 <S2SV_ModEnd> -> STRUCT_OR_UNION_2 = <S2SV_ModStart> ; METHOD_2 ( VAR_19 <S2SV_ModEnd> ) ; if
<S2SV_ModStart> VAR_32 = 0 ; if ( ! METHOD_8 ( VAR_34 , VAR_7 , sizeof ( TYPE_3 ) ) ) return - VAR_33
<S2SV_ModStart> TYPE_30 ) VAR_50 ; return VAR_296 ; } if ( VAR_335 -> VAR_262 == VAR_320 ) { * VAR_341 = 0 <S2SV_ModStart> < VAR_198 + 22 <S2SV_ModEnd> ) { *
<S2SV_ModStart> ) { TYPE_5 VAR_31 = METHOD_3 <S2SV_ModEnd> ( VAR_24 , <S2SV_ModStart> VAR_8 , VAR_29 ) ; const struct pci_cmd_info * VAR_32 = VAR_10 ; * VAR_29 &= VAR_34 ; <S2SV_ModEnd> * VAR_29 |= <S2SV_ModStart> * VAR_29 |= VAR_32 -> VAR_33 & ~ VAR_34 ; <S2SV_ModEnd> return VAR_31 ;
<S2SV_ModStart> * VAR_8 , <S2SV_ModEnd> TYPE_3 VAR_4 ) <S2SV_ModStart> { TYPE_5 * const <S2SV_ModStart> TYPE_6 * VAR_15 = METHOD_3 ( & <S2SV_ModEnd> VAR_8 -> VAR_9 <S2SV_ModStart> VAR_8 -> VAR_9 -> VAR_19 <S2SV_ModStart> VAR_13 -> VAR_11 ) ; if ( VAR_15 == VAR_16 ) return VAR_20 <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> ] ) ; METHOD_3 ( VAR_17 -> VAR_18 ) ;
<S2SV_ModStart> ; METHOD_16 ( VAR_55 ,
<S2SV_ModStart> -> VAR_43 ; METHOD_8 ( VAR_41 , VAR_37 , VAR_20 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> VAR_40 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VAR_8 , [ <S2SV_ModEnd> VAR_11 ] = <S2SV_ModStart> ] = VAR_14 <S2SV_ModEnd> , } ;
<S2SV_ModStart> ( VAR_49 , "%s" , VAR_50 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> -= VAR_102 ; METHOD_10 ( & STRUCT_OR_UNION_38 -> VAR_145 ) ; if ( ! ( METHOD_11 ( STRUCT_OR_UNION_38 , VAR_79 ) ) ) { VAR_146 = - VAR_81 ; goto VAR_144 ; } if ( ! <S2SV_ModEnd> ( VAR_106 & <S2SV_ModStart> & VAR_84 ) && VAR_137 + VAR_138 > METHOD_28 ( STRUCT_OR_UNION_38 ) ) { VAR_130 = VAR_137 + VAR_138 ; VAR_146 = METHOD_13 ( STRUCT_OR_UNION_38 , VAR_130 ) ; if ( VAR_146 ) goto VAR_144 ; } VAR_105 = VAR_71 ; if ( VAR_106 & VAR_84 ) <S2SV_ModStart> |= VAR_77 ; if ( VAR_113 || VAR_114 ) { VAR_146 = METHOD_18 ( STRUCT_OR_UNION_36 , METHOD_9 ( VAR_137 , 1 << VAR_64 ) >> VAR_64 , ( METHOD_8 ( ( VAR_137 + VAR_138 ) , 1 << VAR_64 ) - METHOD_9 ( VAR_137 , 1 << VAR_64 ) ) >> VAR_64 , VAR_130 , VAR_105 , VAR_106 ) ; if ( VAR_146 ) goto VAR_144 <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { VAR_105 |= ( VAR_72 | VAR_73 ) ;
<S2SV_ModStart> ; } else if ( VAR_25 -> VAR_18 < VAR_28 ) <S2SV_ModStart> ; } } else { METHOD_5 ( VAR_27 ) ; }
<S2SV_ModStart> return VAR_11 ; VAR_11 =
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_229 < 4
<S2SV_ModStart> VAR_161 ; TYPE_14 * VAR_177 , <S2SV_ModStart> if ( ( VAR_177 <S2SV_ModEnd> = METHOD_5 ( <S2SV_ModStart> VAR_60 , VAR_113 ) ; VAR_173 = METHOD_30 ( VAR_177 , 1 ) ; METHOD_35 ( & VAR_177
<S2SV_ModStart> . VAR_32 = VAR_131 <S2SV_ModEnd> ; VAR_34 ->
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_9 ; METHOD_2 <S2SV_ModEnd> ( VAR_9 .
<S2SV_ModStart> = VAR_35 ; TYPE_11 <S2SV_ModEnd> VAR_53 = 0
<S2SV_ModStart> , VAR_85 ; if ( VAR_88 -> VAR_87 > VAR_88 -> VAR_98 ) { return 0 ; } <S2SV_ModStart> VAR_16 ) { if ( VAR_88 -> VAR_87 + ( VAR_96 >> 3 ) > VAR_88 -> VAR_98 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; } <S2SV_ModStart> & 7 ; if ( VAR_88 -> VAR_89 + VAR_85 > VAR_88 -> VAR_98 << 3 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; } <S2SV_ModStart> VAR_88 -> VAR_89 , VAR_88 -> VAR_98 << 3 <S2SV_ModStart> ) ) ; if ( VAR_88 -> VAR_89 > VAR_88 -> VAR_98 << 3 ) { VAR_88 -> VAR_87 = VAR_88 -> VAR_98 + 1 ; return 0 ; }
<S2SV_ModStart> TYPE_2 VAR_67 ; unsigned TYPE_2 VAR_66 ; <S2SV_ModStart> -> VAR_66 ; VAR_66 = VAR_76 -> VAR_66 ; <S2SV_ModStart> ; VAR_67 < <S2SV_ModEnd> VAR_66 ; VAR_67
<S2SV_ModStart> ; VAR_293 : METHOD_47 ( & VAR_291 -> VAR_83 ) ; METHOD_48 ( & VAR_291 -> VAR_96 ) ;
<S2SV_ModStart> * VAR_71 ; TYPE_13 <S2SV_ModEnd> VAR_33 = 16 <S2SV_ModStart> + 1 ; TYPE_13 <S2SV_ModEnd> VAR_46 = VAR_33
<S2SV_ModStart> == VAR_77 ) { <S2SV_ModStart> VAR_85 ) ; METHOD_38 ( ) ; METHOD_39 ( 0 ) ; }
<S2SV_ModStart> - 2 ; if ( VAR_60 < 0 ) return 0 ;
<S2SV_ModStart> VAR_207 . VAR_144 <S2SV_ModEnd> ) { continue
<S2SV_ModStart> : case VAR_5 : case VAR_25 <S2SV_ModStart> case VAR_16 : case VAR_26 : case VAR_27 : case VAR_28 : case VAR_29 :
<S2SV_ModStart> VAR_49 ) { TYPE_13 * VAR_52 = VAR_39 ; TYPE_14 VAR_53 = VAR_6 ; TYPE_14 VAR_54 <S2SV_ModEnd> ; TYPE_11 VAR_37 <S2SV_ModStart> ; TYPE_11 VAR_37 = Curl_urldecode <S2SV_ModEnd> ( VAR_35 , <S2SV_ModStart> ( VAR_35 , VAR_45 , VAR_53 , & VAR_52 , & VAR_54 , VAR_55 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_37 ) return VAR_39 <S2SV_ModEnd> ; if ( <S2SV_ModStart> * VAR_49 = METHOD_9 ( VAR_54 ) ; return VAR_52 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TYPE_4 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_8 ; return VAR_20 <S2SV_ModStart> = VAR_19 ; return VAR_21 ;
<S2SV_ModStart> VAR_39 , VAR_38 , VAR_37 <S2SV_ModStart> ; do { if ( VAR_14 -> VAR_42 . VAR_43 == VAR_44 && VAR_23 -> VAR_45 . VAR_46 && VAR_14 -> VAR_47 . VAR_48 == 0 && VAR_14 -> VAR_47 . VAR_49 == 0 ) { VAR_37 = ( TYPE_12 ) METHOD_3 ( VAR_14 , VAR_39 , VAR_26 ) ; } else { <S2SV_ModEnd> VAR_37 = ( <S2SV_ModStart> VAR_39 , VAR_26 , VAR_23 -> VAR_50 ) ; } <S2SV_ModEnd> if ( VAR_37 <S2SV_ModStart> VAR_40 ) ; if ( VAR_14 -> VAR_42 . VAR_51 == VAR_52 && ( VAR_14 -> VAR_53 . VAR_54 * VAR_14 -> VAR_53 . VAR_55 == - 1 ) && VAR_14 -> VAR_53 . VAR_56 != VAR_14 -> VAR_53 . VAR_57 ) { VAR_41 = METHOD_6 ( VAR_41 , METHOD_4 ( VAR_14 -> VAR_53 . VAR_56 , VAR_14 -> VAR_53 . VAR_57 ) , METHOD_5 ( VAR_14 -> VAR_53 . VAR_56 , VAR_14 -> VAR_53 . VAR_57 ) ) ; }
<S2SV_ModStart> ; VAR_49 |= VAR_55 <S2SV_ModEnd> ; METHOD_12 (
<S2SV_ModStart> STRUCT_OR_UNION_4 VAR_23 ; METHOD_2 <S2SV_ModEnd> ( VAR_23 .
<S2SV_ModStart> * VAR_15 ) || ! METHOD_8 ( * VAR_15 ) ) <S2SV_ModEnd> return ( - <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> VAR_16 = METHOD_11
<S2SV_ModStart> , VAR_5 , <S2SV_ModEnd> VAR_6 ) ;
<S2SV_ModStart> 0 ) ; if ( ! VAR_38 ) return - VAR_59 ;
<S2SV_ModStart> ; if ( VAR_281 < METHOD_70 ( VAR_263 ) &&
<S2SV_ModStart> VAR_78 ) { METHOD_8 ( VAR_74 > 9 ) ; <S2SV_ModStart> VAR_61 ) ) METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "NaN" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "-Infinity" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else METHOD_9 <S2SV_ModEnd> ( VAR_79 , <S2SV_ModStart> VAR_79 , "Infinity" <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * METHOD_0 ( TYPE_8 <S2SV_ModEnd> * TYPE_7 ,
<S2SV_ModStart> VAR_21 ) ; METHOD_6 ( & TYPE_23 -> VAR_27 ) ;
<S2SV_ModStart> ! VAR_94 ) ; if ( ! VAR_94 -> VAR_95 ) goto VAR_99 <S2SV_ModStart> ( ) ; VAR_99 :
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct STRUCT_OR_UNION_2 * <S2SV_ModStart> ; VAR_14 = METHOD_6 ( VAR_11 , VAR_8 <S2SV_ModEnd> ) ; METHOD_4 <S2SV_ModStart> ; return VAR_14 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> : if ( METHOD_107 ( VAR_423 ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( METHOD_107 ( VAR_423 ) ) { <S2SV_ModEnd> return ; }
<S2SV_ModStart> ; VAR_73 = METHOD_8 <S2SV_ModEnd> ( VAR_78 -> <S2SV_ModStart> { VAR_71 = METHOD_8 <S2SV_ModEnd> ( VAR_73 +
<S2SV_ModStart> ; if ( VAR_96 < METHOD_15 ( VAR_81 ) &&
<S2SV_ModStart> VAR_9 ) { METHOD_7 <S2SV_ModEnd> ( VAR_105 -> <S2SV_ModStart> VAR_105 ) ; METHOD_8 <S2SV_ModEnd> ( VAR_107 -> <S2SV_ModStart> = VAR_23 ; METHOD_8 <S2SV_ModEnd> ( VAR_107 -> <S2SV_ModStart> ) ) ; METHOD_8 <S2SV_ModEnd> ( VAR_107 ->
<S2SV_ModStart> VAR_71 ; TYPE_10 VAR_72 <S2SV_ModEnd> ; TYPE_12 VAR_33 <S2SV_ModStart> TYPE_12 VAR_33 ; TYPE_11 VAR_73 [ 8 ] ; <S2SV_ModStart> ( VAR_66 , VAR_74 ) & VAR_75 <S2SV_ModEnd> ) { METHOD_12 <S2SV_ModStart> ( VAR_66 , VAR_76 <S2SV_ModEnd> , VAR_67 -> <S2SV_ModStart> , VAR_39 , VAR_73 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( VAR_73 ) ) ; VAR_67 -> VAR_56 = METHOD_15 ( VAR_73 ) ; VAR_72 = METHOD_15 ( VAR_73 + 2 ) ; VAR_33 = METHOD_16 ( VAR_73 + 4 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_33 & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> ) != 0 <S2SV_ModStart> 0 ) { VAR_72 <S2SV_ModEnd> = METHOD_9 ( <S2SV_ModStart> = METHOD_9 ( VAR_72 <S2SV_ModEnd> , VAR_37 ) <S2SV_ModStart> -> VAR_68 , VAR_72 <S2SV_ModEnd> ) ; VAR_71 <S2SV_ModStart> ( VAR_66 , VAR_77 , <S2SV_ModEnd> VAR_52 ) ; <S2SV_ModStart> ( VAR_66 , VAR_77 , <S2SV_ModEnd> VAR_67 -> VAR_56 <S2SV_ModStart> ( VAR_66 , VAR_78 , VAR_79 <S2SV_ModEnd> ) ; } <S2SV_ModStart> -> VAR_68 , VAR_72 <S2SV_ModEnd> , & VAR_70
<S2SV_ModStart> ] == 0x01 && VAR_161 < VAR_148
<S2SV_ModStart> ; if ( METHOD_6 <S2SV_ModEnd> ( VAR_32 ,
<S2SV_ModStart> TYPE_8 METHOD_0 ( TYPE_6 VAR_34 , TYPE_8 * VAR_35 , TYPE_8 VAR_28 ) { TYPE_8 VAR_5 ; TYPE_8 VAR_36 ; TYPE_6 VAR_37 ; TYPE_4 VAR_18 ; <S2SV_ModEnd> TYPE_3 VAR_30 ; <S2SV_ModStart> TYPE_3 VAR_30 ; TYPE_8 VAR_32 ; TYPE_8 VAR_33 ; TYPE_6 VAR_38 = 0 ; VAR_38 = METHOD_14 ( VAR_34 , VAR_35 , "11" , & VAR_5 , & VAR_36 ) ; if ( VAR_38 == 1 ) { VAR_36 = METHOD_16 ( METHOD_16 ( VAR_39 , METHOD_15 ( "ParseOptions" ) ) , METHOD_15 ( "DEFAULT_SCHEMA" ) ) ; } VAR_37 = ( TYPE_6 ) METHOD_18 ( METHOD_17 ( VAR_36 , METHOD_15 ( "to_i" ) , 0 ) ) ; <S2SV_ModEnd> VAR_18 = METHOD_1 <S2SV_ModStart> ( VAR_5 ) ) ; <S2SV_ModEnd> VAR_32 = METHOD_4 <S2SV_ModStart> VAR_32 ) ; METHOD_13 ( VAR_33 , "@parse_options" , VAR_36 ) ;
<S2SV_ModStart> VAR_54 ) { <S2SV_ModEnd> struct STRUCT_OR_UNION_2 * <S2SV_ModStart> VAR_6 -> VAR_7 <S2SV_ModEnd> ; VAR_54 -> <S2SV_ModStart> VAR_44 ; return METHOD_5 <S2SV_ModEnd> ( VAR_54 , <S2SV_ModStart> ( VAR_54 , VAR_19 -> VAR_14 , VAR_19 -> VAR_20 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_75 += 3 <S2SV_ModEnd> ; } VAR_87 <S2SV_ModStart> ; VAR_75 += 3 <S2SV_ModEnd> ; } VAR_87
<S2SV_ModStart> ; if ( <S2SV_ModEnd> VAR_27 >= VAR_21
<S2SV_ModStart> VAR_187 = - <S2SV_ModEnd> VAR_34 ; if <S2SV_ModStart> - VAR_146 ; METHOD_26 ( & VAR_183 -> VAR_188 ) ; if ( VAR_183 -> VAR_31 && <S2SV_ModEnd> VAR_174 -> VAR_155 <S2SV_ModStart> ; } } METHOD_27 ( & VAR_183 -> VAR_188 ) ; if ( VAR_187 && ! METHOD_22 ( & VAR_174 -> VAR_175 ) ) { METHOD_28 ( & VAR_174 -> VAR_143 ) ; METHOD_24 ( VAR_174 ) ; }
<S2SV_ModStart> VAR_4 ) ; <S2SV_ModEnd> VAR_13 -> VAR_14 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_4 VAR_39 , enum VAR_42 VAR_43 , <S2SV_ModStart> TYPE_8 * VAR_41 , TYPE_4 VAR_44 <S2SV_ModStart> ; while ( <S2SV_ModEnd> VAR_39 > 0 <S2SV_ModStart> VAR_39 > 0 && VAR_44 > 0 && * VAR_38 <S2SV_ModStart> - VAR_17 ; VAR_38 += VAR_36 ; VAR_39 -= VAR_36 ; <S2SV_ModStart> VAR_21 ) { if ( VAR_44 < 2 ) break ; <S2SV_ModStart> -= VAR_21 ; METHOD_2 ( VAR_40 ++ , <S2SV_ModEnd> VAR_27 | ( <S2SV_ModStart> & VAR_30 ) , VAR_43 ) ; METHOD_2 ( VAR_40 ++ , <S2SV_ModEnd> VAR_27 | VAR_28 <S2SV_ModStart> & VAR_30 ) , VAR_43 ) ; VAR_44 -= 2 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { METHOD_2 ( VAR_40 ++ , VAR_32 , VAR_43 ) ; VAR_44 -- ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { METHOD_2 ( VAR_40 ++ , * VAR_38 ++ , VAR_43 ) ; VAR_39 -- ; VAR_44 <S2SV_ModEnd> -- ; }
<S2SV_ModStart> , VAR_59 ; if ( ! ( VAR_64 -> VAR_10 & VAR_66 ) ) { METHOD_6 ( VAR_0 , VAR_67 , "trns<S2SV_blank>before<S2SV_blank>IHDR\\n" ) ; return VAR_61 ; } if ( VAR_64 -> VAR_10 & VAR_68 ) { METHOD_6 ( VAR_0 , VAR_67 , "trns<S2SV_blank>after<S2SV_blank>IDAT\\n" ) ; return VAR_61 ; } <S2SV_ModStart> != 6 ) || VAR_64 -> VAR_52 == 1
<S2SV_ModStart> { METHOD_17 ( "Notification<S2SV_blank>setup<S2SV_blank>not<S2SV_blank>supported,<S2SV_blank>won\'t<S2SV_blank>be<S2SV_blank>able<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>after<S2SV_blank>failure" <S2SV_ModEnd> ) ; if
<S2SV_ModStart> } VAR_43 -> VAR_44 = METHOD_10 ( VAR_36 ) ; VAR_43 ->
<S2SV_ModStart> ( VAR_46 , VAR_50 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_13 & VAR_51 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> VAR_13 & ( VAR_52 | VAR_53 | VAR_54 | VAR_55 <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( VAR_46 , VAR_56 ) & VAR_57 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( VAR_46 , VAR_58 , VAR_59 <S2SV_ModEnd> ) ; METHOD_8 <S2SV_ModStart> ( VAR_46 , VAR_60 , VAR_61 <S2SV_ModEnd> ) ; METHOD_5 <S2SV_ModStart> ( VAR_46 , VAR_60 , VAR_61 <S2SV_ModEnd> ) ; VAR_44 <S2SV_ModStart> ( VAR_46 , VAR_60 , VAR_62 <S2SV_ModEnd> ) ; return
<S2SV_ModStart> const TYPE_9 * VAR_93 <S2SV_ModEnd> , TYPE_6 * <S2SV_ModStart> * VAR_85 , bool <S2SV_ModEnd> VAR_70 ) { <S2SV_ModStart> VAR_70 ) { const TYPE_9 * const VAR_89 = VAR_70 ? METHOD_22 ( VAR_93 , 1 ) : VAR_93 ; <S2SV_ModStart> , METHOD_28 ( VAR_93 ) , VAR_93 <S2SV_ModEnd> -> VAR_90 ,
<S2SV_ModStart> TYPE_1 VAR_32 ; METHOD_14 ( & VAR_27 -> VAR_40 ) ; <S2SV_ModStart> ; VAR_39 : METHOD_15 ( & VAR_27 -> VAR_40 ) ;
<S2SV_ModStart> ( VAR_76 , METHOD_19 ( ) , VAR_78 , & VAR_79 , VAR_80 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> TYPE_6 VAR_121 ; VAR_123 -> VAR_124 = 0 ; <S2SV_ModStart> ) ) { goto VAR_125 ; } if ( ! VAR_123 -> VAR_55 || ! VAR_123 -> VAR_59 ) { METHOD_19 ( "reference<S2SV_blank>grid<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto VAR_125 ; } if ( ! VAR_123 -> VAR_45 || ! VAR_123 -> VAR_47 ) { METHOD_19 ( "tile<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto VAR_125 ; } if ( ! VAR_123 -> VAR_68 || VAR_123 -> VAR_68 > 16384 ) { METHOD_19 ( "number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_21 >= VAR_123 -> VAR_55 ) { METHOD_19 ( "XOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_24 >= VAR_123 -> VAR_59 ) { METHOD_19 ( "YOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_53 > VAR_123 -> VAR_21 || VAR_123 -> VAR_53 + VAR_123 -> VAR_45 <= VAR_123 -> VAR_21 ) { METHOD_19 ( "XTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_57 > VAR_123 -> VAR_24 || VAR_123 -> VAR_57 + VAR_123 -> VAR_47 <= VAR_123 -> VAR_24 ) { METHOD_19 ( "YTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto VAR_125 ; } if ( ! ( VAR_123 -> VAR_124 = METHOD_12 ( VAR_123 -> VAR_68 , sizeof ( VAR_64 ) ) ) ) { goto VAR_125 ; } for ( VAR_119 = 0 ; VAR_119 < VAR_123 -> VAR_68 ; ++ VAR_119 ) { if ( METHOD_15 ( VAR_122 , & VAR_121 ) || METHOD_15 ( VAR_122 , & VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 ) || METHOD_15 ( VAR_122 , & VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 ) ) { goto VAR_125 ; } if ( VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 == 0 || VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 > 255 ) { METHOD_19 ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_123 -> VAR_124 [ VAR_119 ] . VAR_95 ) ; goto VAR_125 ; } if ( VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 == 0 || VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 > 255 ) { METHOD_19 ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , VAR_123 -> VAR_124 [ VAR_119 ] . VAR_109 ) ; goto VAR_125 ; } VAR_123 -> VAR_124 [ VAR_119 ] . VAR_115 = ( VAR_121 >> 7 ) & 1 ; VAR_123 -> VAR_124 [ VAR_119 ] . VAR_120 = ( VAR_121 & 0x7f ) + 1 ; } if ( METHOD_21 ( VAR_122 ) ) { goto VAR_125 ; } return 0 ; VAR_125 : if ( VAR_123 -> VAR_124 ) { METHOD_22 ( VAR_123 -> VAR_124 ) ; } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 1 ; } if ( METHOD_53 ( VAR_94 , VAR_72 , & VAR_94 ) != 0 ) { return - 1 ; } <S2SV_ModEnd> VAR_71 = METHOD_10 <S2SV_ModStart> case VAR_147 : if ( VAR_310 -> VAR_311 -> VAR_143 ) { METHOD_51 ( "sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_ETAG<S2SV_blank>exists!" ) ; return - 1 ; } <S2SV_ModStart> case VAR_214 : if ( VAR_310 -> VAR_311 -> VAR_210 ) { METHOD_51 ( "sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_LOCATION_QUERY<S2SV_blank>exists!" ) ; return - 1 ; } <S2SV_ModStart> case VAR_226 : if ( VAR_310 -> VAR_223 ) { METHOD_51 ( "sn_coap_parser_options_parse<S2SV_blank>-<S2SV_blank>COAP_OPTION_URI_PATH<S2SV_blank>exists!" ) ; return - 1 ; }
<S2SV_ModStart> , VAR_296 , VAR_298 ,
<S2SV_ModStart> TYPE_9 VAR_119 ; struct STRUCT_OR_UNION_8 VAR_158 ; <S2SV_ModStart> ) return 0 ; METHOD_21 ( & VAR_158 , VAR_66 , VAR_17 , VAR_119 , 0 ) <S2SV_ModStart> -> VAR_103 ; <S2SV_ModEnd> TYPE_9 VAR_118 = <S2SV_ModStart> VAR_105 -> VAR_99 ; TYPE_9 VAR_159 <S2SV_ModStart> ; TYPE_10 VAR_82 <S2SV_ModEnd> ; if ( <S2SV_ModStart> break ; } VAR_159 = METHOD_22 ( VAR_105 -> VAR_75 , VAR_105 -> VAR_86 , VAR_118 , & VAR_158 ) ; if ( METHOD_11 ( VAR_159 < VAR_118 ) ) { if ( ! VAR_157 ) VAR_157 = - VAR_160 <S2SV_ModEnd> ; break ;
<S2SV_ModStart> ( VAR_15 METHOD_199 \\\n{ <S2SV_ModEnd> if ( VAR_261 <S2SV_ModStart> METHOD_199 ; } \\\n} <S2SV_ModEnd> TYPE_45 VAR_234 ; <S2SV_ModStart> ++ METHOD_199 { VAR_207 = VAR_208 ; VAR_190 = 1 ; <S2SV_ModStart> -= VAR_222 ; if ( VAR_225 < 0 METHOD_199 continue <S2SV_ModEnd> ; if (
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> { TYPE_3 VAR_76 = VAR_33 <S2SV_ModStart> ) ; goto VAR_78 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto VAR_78 <S2SV_ModEnd> ; } for <S2SV_ModStart> 0 ) { VAR_77 = <S2SV_ModEnd> VAR_63 [ VAR_64 <S2SV_ModStart> ] ) ; goto VAR_78 ; <S2SV_ModStart> - 1 ; VAR_78 : if ( VAR_76 ) { if ( VAR_76 -> VAR_79 ) { if ( VAR_76 -> VAR_79 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_79 -> VAR_80 ) ; } if ( VAR_76 -> VAR_81 ) { if ( VAR_76 -> VAR_81 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_81 -> VAR_80 ) ; } if ( VAR_76 -> VAR_82 ) { if ( VAR_76 -> VAR_82 -> VAR_80 [ 0 ] ) METHOD_19 ( VAR_76 -> VAR_82 -> VAR_80 ) ; } <S2SV_ModEnd> METHOD_18 ( VAR_76 <S2SV_ModStart> VAR_76 ) ; }
<S2SV_ModStart> TYPE_13 VAR_47 ; TYPE_13 VAR_90 ; TYPE_11 VAR_91 [ 32 ] ; <S2SV_ModStart> 0 ] ; VAR_90 = 64 * VAR_92 ; <S2SV_ModStart> break ; case VAR_93 : VAR_90 = METHOD_7 ( VAR_43 , 0 , 10 ) ; break ; case <S2SV_ModStart> ) ; } METHOD_34 ( VAR_91 , sizeof ( VAR_91 ) , "max_samples=%-zu" , VAR_90 ) ; <S2SV_ModStart> , VAR_81 , VAR_91 <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ! ( VAR_82 = METHOD_28 ( VAR_81 ) ) ) { METHOD_35 ( "format<S2SV_blank>name<S2SV_blank>lookup<S2SV_blank>failed\\n" ) ; return VAR_65 ; } if ( ! ( <S2SV_ModStart> 0 ; } METHOD_30 ( "%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n" , VAR_82 <S2SV_ModEnd> , VAR_83 , <S2SV_ModStart> , VAR_86 , JAS_CAST ( TYPE_14 , <S2SV_ModEnd> METHOD_31 ( VAR_88 <S2SV_ModStart> METHOD_31 ( VAR_88 )
<S2SV_ModStart> -> METHOD_47 ( VAR_128
<S2SV_ModStart> -> VAR_111 ) || METHOD_2 ( & VAR_109 -> VAR_110 -> VAR_97 )
<S2SV_ModStart> ; VAR_45 < VAR_51 <S2SV_ModEnd> ; VAR_45 ++ <S2SV_ModStart> VAR_49 < VAR_50 && VAR_45 < VAR_9
<S2SV_ModStart> VAR_31 < VAR_79 || VAR_31 < sizeof ( VAR_77 -> VAR_61 )
<S2SV_ModStart> 2 ) ; VAR_467 = METHOD_130 ( VAR_467 ) ;
<S2SV_ModStart> , VAR_72 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_70 ) ; if <S2SV_ModEnd> ( VAR_24 >= <S2SV_ModStart> VAR_22 -> VAR_20 || hlist_empty ( <S2SV_ModEnd> & VAR_22 -> <S2SV_ModStart> [ VAR_24 ] ) ) { METHOD_21 ( "no<S2SV_blank>route<S2SV_blank>for<S2SV_blank>guest_irq<S2SV_blank>%u/%u<S2SV_blank>(broken<S2SV_blank>user<S2SV_blank>space?)\\n" , VAR_24 , VAR_22 -> VAR_20 ) ; goto VAR_69 ; } METHOD_7 ( VAR_49 , & VAR_22 -> VAR_23 [ VAR_24 ]
<S2SV_ModStart> ) METHOD_1 ( VAR_6 ,
<S2SV_ModStart> else { return VAR_104 <S2SV_ModEnd> ; } case
<S2SV_ModStart> STRUCT_OR_UNION_7 , VAR_22 ) ; METHOD_7 ( VAR_20 , 0 , sizeof ( * VAR_20 )
<S2SV_ModStart> ( ! VAR_5 || ! METHOD_1 ( VAR_5 )
<S2SV_ModStart> ; VAR_23 += get_primary_drawing_order_field_bytes ( <S2SV_ModEnd> VAR_22 -> VAR_19 <S2SV_ModStart> VAR_22 -> VAR_19 , NULL ) <S2SV_ModEnd> ; VAR_23 +=
<S2SV_ModStart> OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 <S2SV_ModStart> ++ ; VAR_1177 <S2SV_ModEnd> ++ ; MOP_OUT
<S2SV_ModStart> < VAR_7 ; ++ VAR_11 <S2SV_ModEnd> ) METHOD_1 (
<S2SV_ModStart> = - VAR_10 <S2SV_ModEnd> ; if (
<S2SV_ModStart> STRUCT_OR_UNION_3 , VAR_11 , VAR_7
<S2SV_ModStart> = VAR_73 ; VAR_71 -> VAR_75 = VAR_76 ;
<S2SV_ModStart> * VAR_27 , TYPE_12 * VAR_47 , TYPE_9 * const VAR_28 , TYPE_5 VAR_44 , TYPE_5 VAR_45 , TYPE_13 * VAR_48 , TYPE_7 VAR_46 , TYPE_14 * VAR_49 ) { TYPE_8 * const VAR_42 = & VAR_27 -> VAR_9 ; <S2SV_ModEnd> TYPE_2 * const <S2SV_ModStart> TYPE_2 * const VAR_50 = & VAR_47 -> VAR_50 <S2SV_ModEnd> ; TYPE_10 * <S2SV_ModStart> -> VAR_15 ; VAR_51 * VAR_39 ; <S2SV_ModStart> ( VAR_27 , VAR_50 , VAR_28 , VAR_44 , VAR_45 , VAR_46 ) ; VAR_39 = & <S2SV_ModEnd> VAR_43 -> VAR_38 <S2SV_ModStart> ] -> VAR_39 ; VAR_39 -> VAR_24 = VAR_46 ; if ( VAR_27 -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && VAR_42 -> seg . enabled ) if ( cyclic_refresh_segment_id_boosted ( VAR_39 -> segment_id ) ) VAR_28 -> rdmult = vp9_cyclic_refresh_get_rdmult ( VAR_27 -> cyclic_refresh ) ; if ( VAR_42 -> frame_type == KEY_FRAME ) hybrid_intra_mode_search ( VAR_27 , VAR_28 , VAR_48 , VAR_46 , VAR_49 ) ; else if ( segfeature_active ( & VAR_42 -> seg , VAR_39 -> segment_id , SEG_LVL_SKIP ) ) set_mode_info_seg_skip ( VAR_28 , VAR_42 -> tx_mode , VAR_48 , VAR_46 ) ; else if ( VAR_46 >= BLOCK_8X8 ) <S2SV_ModEnd> METHOD_3 ( VAR_27 <S2SV_ModStart> , VAR_28 , VAR_47 , VAR_44 , VAR_45 , VAR_48 , VAR_46 , VAR_49 ) ; else METHOD_6 ( VAR_27 , VAR_28 , VAR_44 , VAR_45 , VAR_48 , VAR_46 , VAR_49 ) ; METHOD_5 ( VAR_42 , VAR_43 , VAR_44 , VAR_45 , VAR_46 ) ; if ( VAR_48 -> VAR_32 == VAR_52 ) METHOD_7 ( VAR_48 ) ; VAR_49 -> VAR_32 = VAR_48 -> VAR_32 ; VAR_49 -> VAR_33 = VAR_48 -> VAR_33 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_55 | VAR_56 <S2SV_ModEnd> ; if ( <S2SV_ModStart> VAR_55 | VAR_56 <S2SV_ModEnd> ; if (
<S2SV_ModStart> = VAR_27 ; VAR_42 . VAR_45 = 0 ;
<S2SV_ModStart> VAR_699 ) ; ( TYPE_120 ) METHOD_135 ( VAR_573 , 0 , VAR_381 ) ;
<S2SV_ModStart> ) ] ; TYPE_3 VAR_19 ; TYPE_6 VAR_17 ; VAR_19 = METHOD_4 ( VAR_18 , sizeof ( VAR_11 ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> , VAR_7 , VAR_19 <S2SV_ModEnd> ) ) return
<S2SV_ModStart> ) ) ; if ( VAR_38 -> VAR_39 == VAR_11 ) { METHOD_7 ( "malloc<S2SV_blank>failed:<S2SV_blank>%s\\n" , METHOD_5 ( VAR_22 ) ) ; METHOD_8 ( VAR_37 , VAR_41 ) ; return - 1 ; }
<S2SV_ModStart> case VAR_84 : VAR_162 = METHOD_25 ( VAR_156 , VAR_155 , VAR_164 ) ; if ( VAR_162 ) return VAR_162 ; break ; case 0 : break ; default : return VAR_153 ; } if ( METHOD_18 ( VAR_156 ) ) { VAR_162 = METHOD_25 ( VAR_156 , VAR_155 , VAR_165 ) ; if ( VAR_162 ) return VAR_162 ; <S2SV_ModEnd> } else {
<S2SV_ModStart> } if ( VAR_68 >= 16 || VAR_111 >= 256 ) { return VAR_114 ; } if (
<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_84 ; } METHOD_28 ( VAR_88 ) ;
<S2SV_ModStart> ; if ( ! VAR_354 ) { VAR_354 = VAR_379 -> VAR_388 ; } VAR_379 -> VAR_388 = 0 ; VAR_387 = METHOD_14 ( VAR_379 , VAR_354 ) ; <S2SV_ModEnd> if ( VAR_379 <S2SV_ModStart> ( TYPE_25 ) 10000000 <S2SV_ModEnd> * VAR_379 ->
<S2SV_ModStart> , sizeof ( TYPE_77 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> , TYPE_26 VAR_1162 , const unsigned VAR_1164 <S2SV_ModStart> } if ( VAR_1164 == 10 ) METHOD_285 ( ( VAR_1160 , "(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)" ) ) ; else if ( <S2SV_ModStart> VAR_1144 , VAR_1131 , VAR_1164 + 1
<S2SV_ModStart> ) VAR_6 ; METHOD_2 <S2SV_ModEnd> ( VAR_7 ,
<S2SV_ModStart> VAR_86 ) ; <S2SV_ModEnd> METHOD_17 ( VAR_88
<S2SV_ModStart> TYPE_4 VAR_12 ; if ( VAR_7 < 0 || VAR_7 >= 32 ) { return - 1 ; } <S2SV_ModEnd> VAR_13 = 0
<S2SV_ModStart> STRUCT_OR_UNION_25 , VAR_55 , & VAR_85 <S2SV_ModStart> VAR_82 , STRUCT_OR_UNION_25 , & VAR_85 <S2SV_ModStart> METHOD_17 ) { VAR_120 = METHOD_17 ( VAR_119 , & VAR_85 ) ; } else { VAR_120 = METHOD_18 ( VAR_119 , VAR_85 . VAR_121 , VAR_85 . <S2SV_ModEnd> VAR_88 , VAR_119
<S2SV_ModStart> ! VAR_173 ) { if ( VAR_194 -> VAR_183 > 1024 ) { TYPE_10 * VAR_196 = VAR_194 -> VAR_191 ; while ( * VAR_196 == '<S2SV_blank>' ) { ++ VAR_196 ; } if ( METHOD_24 ( VAR_196 , "get<S2SV_blank>" ) && METHOD_24 ( VAR_196 , "gets<S2SV_blank>" ) ) { METHOD_16 ( VAR_194 , VAR_118 ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> VAR_189 = VAR_173
<S2SV_ModStart> ) & VAR_56 , sizeof ( * VAR_56 )
<S2SV_ModStart> VAR_159 ) { struct STRUCT_OR_UNION_9 * VAR_120 ; VAR_120 = ( struct STRUCT_OR_UNION_9 * ) VAR_177 ; if ( VAR_120 -> VAR_118 < VAR_317 ) { METHOD_24 ( VAR_312 , "config<S2SV_blank>%d<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>interface<S2SV_blank>association<S2SV_blank>descriptor<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%d,<S2SV_blank>skipping\\n" , VAR_313 , VAR_120 -> VAR_118 ) ; continue ; } <S2SV_ModStart> VAR_168 ] = VAR_120 <S2SV_ModEnd> ; VAR_168 ++
<S2SV_ModStart> ; if ( VAR_156 -> VAR_182 < 1 ) return - VAR_129 ; VAR_169 = VAR_156 -> VAR_169 == 0 ? VAR_27 : ( VAR_156 -> VAR_169 & ( VAR_27 | VAR_28 | VAR_90 ) ) ; VAR_156 -> VAR_61 . VAR_32 = 0 ; METHOD_1 ( & VAR_168 , 0 , sizeof ( VAR_168 ) ) ; if ( VAR_49 ) { VAR_193 = METHOD_16 ( VAR_188 , & VAR_156 -> VAR_61 ) ; if ( VAR_193 ) return VAR_193 ; } if ( <S2SV_ModEnd> VAR_198 -> VAR_197 <S2SV_ModStart> return - VAR_175 <S2SV_ModEnd> ; METHOD_6 (
<S2SV_ModStart> VAR_14 , "Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol" ) ; return 0 ; } if ( * VAR_121 [ 1 ] == ':' || METHOD_23 ( VAR_121 [ 1 ] , '<S2SV_blank>' ) ) { METHOD_3 ( VAR_14 , VAR_14 , VAR_14 , "Malformed<S2SV_blank>AUTHENTICATE"
<S2SV_ModStart> VAR_417 -> VAR_405 && METHOD_8 ( VAR_417 -> VAR_413 )
<S2SV_ModStart> VAR_49 . VAR_51 <S2SV_ModEnd> , 0 )
<S2SV_ModStart> VAR_24 &= ~ ( VAR_25 | VAR_28 ) <S2SV_ModEnd> ; METHOD_2 (
<S2SV_ModStart> ; VAR_71 = METHOD_6 <S2SV_ModEnd> ( * (
<S2SV_ModStart> ( VAR_128 , VAR_133 , VAR_134 | VAR_135 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( VAR_128 , VAR_136 <S2SV_ModEnd> ) ; VAR_128 <S2SV_ModStart> ( VAR_128 , VAR_137 <S2SV_ModEnd> ) ; VAR_128 <S2SV_ModStart> ( VAR_128 , VAR_138 <S2SV_ModEnd> ) ; VAR_128 <S2SV_ModStart> ( VAR_128 , VAR_136 <S2SV_ModEnd> , VAR_73 ) <S2SV_ModStart> ( VAR_128 , VAR_137 <S2SV_ModEnd> , VAR_73 ) <S2SV_ModStart> ( VAR_128 , VAR_138 <S2SV_ModEnd> , VAR_73 ) <S2SV_ModStart> ( VAR_128 , VAR_139 <S2SV_ModEnd> , VAR_76 ) <S2SV_ModStart> ( VAR_128 , VAR_140 <S2SV_ModEnd> , VAR_79 ) <S2SV_ModStart> ( VAR_128 , VAR_141 , VAR_142 | VAR_143 | VAR_144 | VAR_145 | VAR_146 ) ; METHOD_32 ( VAR_128 , VAR_147 <S2SV_ModEnd> , 0x0000 ) <S2SV_ModStart> ( VAR_128 , VAR_148 <S2SV_ModEnd> , 0x0000 ) <S2SV_ModStart> ( VAR_128 , VAR_149 <S2SV_ModEnd> , 0x0000 ) <S2SV_ModStart> ( VAR_128 , VAR_150 <S2SV_ModEnd> , 0x0000 ) <S2SV_ModStart> ( VAR_128 , VAR_151 , VAR_152 | VAR_153 | VAR_154 | VAR_155 ) ; METHOD_32 ( VAR_128 , VAR_156 <S2SV_ModEnd> , VAR_103 ) <S2SV_ModStart> ( VAR_128 , VAR_157 , VAR_158 | VAR_159 | VAR_160 | VAR_161 | VAR_162 | VAR_163 ) ; METHOD_32 ( VAR_128 , VAR_164 <S2SV_ModEnd> , 0x0000 ) <S2SV_ModStart> ( VAR_128 , VAR_165 , VAR_166 | VAR_167 | VAR_168 | VAR_169 | VAR_170 <S2SV_ModEnd> ) ; METHOD_33 <S2SV_ModStart> ( VAR_128 , VAR_171 , VAR_172 <S2SV_ModEnd> ) ; METHOD_34
<S2SV_ModStart> VAR_27 -> VAR_28 . VAR_29 <S2SV_ModStart> VAR_27 -> VAR_28 . VAR_29 <S2SV_ModStart> ; VAR_24 = <S2SV_ModEnd> VAR_27 -> VAR_28 <S2SV_ModStart> VAR_27 -> VAR_28 . VAR_30 <S2SV_ModEnd> - VAR_24 ; <S2SV_ModStart> ; VAR_27 -> VAR_28 . VAR_31 <S2SV_ModEnd> = METHOD_5 ( <S2SV_ModStart> VAR_27 -> VAR_28 . VAR_29
<S2SV_ModStart> if ( ( METHOD_4 ( VAR_122 <S2SV_ModEnd> ) && ( <S2SV_ModStart> VAR_101 < 0 <S2SV_ModEnd> ) || VAR_50
<S2SV_ModStart> if ( ! METHOD_74 ( TYPE_19 ) || ! METHOD_74 ( VAR_191 ) || ! METHOD_74 ( VAR_204 ) || ! METHOD_74 ( VAR_205 ) || ! METHOD_74 ( VAR_197 ) || ! METHOD_74 ( VAR_199 ) || ! METHOD_74 ( VAR_201 ) ) { METHOD_72 <S2SV_ModEnd> ( TYPE_19 ) <S2SV_ModStart> ( TYPE_19 ) ; METHOD_72 ( VAR_204 ) ; <S2SV_ModEnd> METHOD_72 ( VAR_205
<S2SV_ModStart> ; else { <S2SV_ModEnd> VAR_30 -> VAR_20 <S2SV_ModStart> -> METHOD_1 ( ( TYPE_3 * ) <S2SV_ModStart> VAR_30 -> VAR_26 <S2SV_ModEnd> ) ; VAR_30
<S2SV_ModStart> case VAR_50 : case VAR_81 :
<S2SV_ModStart> ) , & VAR_22 <S2SV_ModEnd> ) ; METHOD_4
<S2SV_ModStart> STRUCT_OR_UNION_3 VAR_88 ; METHOD_2 ( VAR_86 , 0 , sizeof ( struct STRUCT_OR_UNION_0 ) ) ;
<S2SV_ModStart> TYPE_5 VAR_37 = METHOD_12 ( <S2SV_ModStart> , - 1 )
<S2SV_ModStart> VAR_27 ) { VAR_41 <S2SV_ModEnd> ; } VAR_39
<S2SV_ModStart> , 0 ) <S2SV_ModEnd> ) ; TYPE_10 <S2SV_ModStart> errstr ) { const
<S2SV_ModStart> * VAR_74 ; TYPE_10 * const VAR_58 = METHOD_15 ( VAR_67 ) ; TYPE_8 VAR_76 = VAR_65 ; TYPE_7 VAR_77 , VAR_78 = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( METHOD_16 ( "spatial-layers" , VAR_72 ) == 0 ) { VAR_67 -> VAR_37 = METHOD_8 ( VAR_63 ) ; } else if ( METHOD_16 ( "temporal-layers" , VAR_72 ) == 0 ) { VAR_67 -> VAR_89 = METHOD_8 ( VAR_63 ) ; } else if ( METHOD_16 ( "scale-factors" , VAR_72 ) == 0 ) { VAR_76 = METHOD_21 ( VAR_67 , SCALE_FACTOR , VAR_63 , VAR_58 -> VAR_80 . scaling_factor_num , VAR_58 -> VAR_80 . scaling_factor_den <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( METHOD_16 ( "max-quantizers" , VAR_72 ) == 0 ) { VAR_76 = METHOD_21 ( VAR_67 , VAR_79 , VAR_63 , VAR_58 -> VAR_80 . VAR_81 , VAR_73 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( METHOD_16 ( "min-quantizers" , VAR_72 ) == 0 ) { VAR_76 = METHOD_21 ( VAR_67 , VAR_79 , VAR_63 , VAR_58 -> VAR_80 . VAR_82 , VAR_73 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) break ; } else if ( METHOD_16 ( "auto-alt-refs" , VAR_72 ) == 0 ) { VAR_76 = METHOD_21 ( VAR_67 , VAR_83 , VAR_63 , VAR_58 -> VAR_84 , VAR_73 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) break ; } else if ( METHOD_16 ( "bitrates" , VAR_72 ) == 0 ) { VAR_76 = METHOD_21 ( VAR_67 , VAR_85 , VAR_63 , VAR_58 -> VAR_86 , VAR_73 ) ; if ( VAR_76 != VAR_65 ) break ; } else if ( METHOD_16 ( "multi-frame-contexts" , VAR_72 ) == 0 ) { VAR_58 -> VAR_87 = METHOD_8 ( VAR_63 ) <S2SV_ModEnd> ; } else <S2SV_ModStart> VAR_75 ) ; for ( VAR_77 = 0 ; VAR_77 < VAR_67 -> VAR_37 ; ++ VAR_77 ) { if ( VAR_58 -> VAR_80 . VAR_81 [ VAR_77 ] > VAR_88 || VAR_58 -> VAR_80 . VAR_81 [ VAR_77 ] < 0 || VAR_58 -> VAR_80 . VAR_82 [ VAR_77 ] > VAR_58 -> VAR_80 . VAR_81 [ VAR_77 ] || VAR_58 -> VAR_80 . VAR_82 [ VAR_77 ] < 0 ) VAR_76 = VAR_71 ; } if ( VAR_58 -> VAR_87 && ( VAR_67 -> VAR_37 > 3 || VAR_67 -> VAR_37 * VAR_67 -> VAR_89 > 4 ) ) VAR_76 = VAR_71 ; for ( VAR_77 = 0 ; VAR_77 < VAR_67 -> VAR_37 ; ++ VAR_77 ) VAR_78 += VAR_58 -> VAR_84 [ VAR_77 ] ; if ( VAR_78 > VAR_90 - VAR_67 -> VAR_37 ) { METHOD_18 ( VAR_67 , VAR_68 , "svc:<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>ref:<S2SV_blank>Maxinum<S2SV_blank>%d(REF_FRAMES<S2SV_blank>-<S2SV_blank>layers)<S2SV_blank>layers<S2SV_blank>could" "enabled<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>reference<S2SV_blank>frame,<S2SV_blank>but<S2SV_blank>%<S2SV_blank>layers<S2SV_blank>are<S2SV_blank>enabled\\n" , VAR_90 - VAR_67 -> VAR_37 , VAR_78 ) ; VAR_76 = VAR_71 ; }
<S2SV_ModStart> ; METHOD_5 ( ( unsigned TYPE_5 ) <S2SV_ModStart> ! METHOD_5 ( ( unsigned TYPE_5 )
<S2SV_ModStart> ; if ( VAR_216 == VAR_116 ) return VAR_48 ; if ( <S2SV_ModStart> VAR_119 ) && VAR_216 -> VAR_115 == VAR_116 <S2SV_ModEnd> ) return VAR_45 <S2SV_ModStart> ; if ( ( VAR_217 & VAR_119 ) && ( VAR_217 & VAR_108 ) ) return VAR_45 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_107 -> VAR_95 [ VAR_101 ] && VAR_107 -> VAR_57 <S2SV_ModStart> [ VAR_101 ] && VAR_107 -> VAR_57 [ VAR_101 ]
<S2SV_ModStart> , "\\n" ) <S2SV_ModEnd> ; METHOD_26 ( <S2SV_ModStart> "\\n" ) ; <S2SV_ModEnd> METHOD_26 ( VAR_169
<S2SV_ModStart> VAR_16 ) { TYPE_6 <S2SV_ModEnd> VAR_23 ; TYPE_5
<S2SV_ModStart> ; if ( VAR_4 > 1 ) { if ( <S2SV_ModStart> <= 127 ) { <S2SV_ModStart> -> VAR_532 ; } else { <S2SV_ModEnd> VAR_531 -> VAR_357 <S2SV_ModStart> -> VAR_532 ; } } else { VAR_531 -> VAR_357 = VAR_322 ; }
<S2SV_ModStart> ) ) { if ( VAR_50 -> VAR_47 )
<S2SV_ModStart> ) || ( METHOD_12 ( <S2SV_ModStart> & VAR_60 ) ) <S2SV_ModStart> VAR_60 ) ) { <S2SV_ModEnd> METHOD_5 ( VAR_61 <S2SV_ModStart> VAR_46 ) ; } <S2SV_ModStart> ( VAR_55 || METHOD_12 ( <S2SV_ModStart> , & VAR_60 )
<S2SV_ModStart> struct STRUCT_OR_UNION_0 VAR_442 ; TYPE_8 VAR_448 ; struct STRUCT_OR_UNION_1 VAR_449 ; TYPE_0 * VAR_450 <S2SV_ModStart> } else { VAR_448 = METHOD_81 ( VAR_444 ) ; switch ( VAR_448 ) { case VAR_451 : VAR_449 . VAR_112 = - 1 ; VAR_450 = & VAR_449 ; break ; default : VAR_450 = VAR_404 ; break ; } METHOD_82 <S2SV_ModEnd> ( VAR_443 , <S2SV_ModStart> ( VAR_443 , VAR_448 <S2SV_ModEnd> , VAR_445 , <S2SV_ModStart> VAR_446 , VAR_447 , VAR_319 , VAR_450
<S2SV_ModStart> * VAR_77 ; METHOD_10 ( VAR_85 + VAR_30 + 1 > VAR_85 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_36 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ; TYPE_17 VAR_27 ; if ( ! VAR_246 || VAR_39 || ( VAR_43 == 0 ) ) return VAR_263 <S2SV_ModStart> -> VAR_32 ; if ( VAR_246 -> VAR_247 -> VAR_264 < VAR_262 * VAR_43 ) return VAR_263 ; if ( VAR_262 < VAR_43 * 2 ) return VAR_263 ; <S2SV_ModStart> ) ; } return VAR_265 ;
<S2SV_ModStart> while ( VAR_38 > 0 && VAR_38 <S2SV_ModStart> < VAR_29 ) { <S2SV_ModStart> VAR_37 ) ; }
<S2SV_ModStart> > VAR_54 ) { VAR_233 = - VAR_215 ; goto VAR_220 ; } <S2SV_ModEnd> * ( ++
<S2SV_ModStart> VAR_36 -> VAR_34 ; const TYPE_9 * VAR_15 = & VAR_36 -> VAR_15 ; const TYPE_10 * const VAR_38 = & VAR_36 -> VAR_38 <S2SV_ModStart> = ( ( VAR_34 -> <S2SV_ModEnd> VAR_16 / 2 <S2SV_ModStart> TYPE_8 ) ( VAR_34 -> VAR_16 / 2 ) ; } else { TYPE_8 VAR_33 = 32 ; TYPE_11 VAR_39 = VAR_36 -> VAR_39 ; if ( VAR_38 -> VAR_40 > 1 && VAR_15 -> VAR_41 == VAR_42 ) { const TYPE_8 VAR_43 = METHOD_3 ( VAR_38 -> VAR_44 , VAR_38 -> VAR_45 , VAR_38 -> VAR_40 ) ; const TYPE_12 * VAR_46 = & VAR_38 -> VAR_47 [ VAR_43 ] ; VAR_39 = VAR_46 -> VAR_39 ; } <S2SV_ModEnd> VAR_33 = METHOD_1 <S2SV_ModStart> = METHOD_1 ( VAR_33 , ( TYPE_8 ) ( 2 * VAR_39 <S2SV_ModEnd> - 16 ) <S2SV_ModStart> -> VAR_29 < VAR_39 <S2SV_ModEnd> / 2 ) <S2SV_ModStart> VAR_29 / ( VAR_39 <S2SV_ModEnd> / 2 ) <S2SV_ModStart> * VAR_34 -> VAR_48 <S2SV_ModEnd> ) >> 4
<S2SV_ModStart> VAR_18 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TYPE_3 VAR_14 , const <S2SV_ModStart> VAR_13 ) { VAR_23 * VAR_24 ; TYPE_5 VAR_22 ; VAR_24 = METHOD_4 ( VAR_13 , VAR_14 , VAR_25 ) ; if ( ! VAR_24 ) return - VAR_26 <S2SV_ModEnd> ; VAR_22 = <S2SV_ModStart> , VAR_12 , VAR_24 <S2SV_ModEnd> , VAR_14 , <S2SV_ModStart> VAR_22 ) ; METHOD_5 ( VAR_24 ) ;
<S2SV_ModStart> TYPE_2 METHOD_0 ( TYPE_3 <S2SV_ModEnd> * VAR_6 ) <S2SV_ModStart> TYPE_2 VAR_7 = METHOD_3 <S2SV_ModEnd> ( VAR_6 , <S2SV_ModStart> ) VAR_7 += METHOD_4 <S2SV_ModEnd> ( VAR_6 )
<S2SV_ModStart> VAR_142 + VAR_143 ) ; METHOD_43 ( & VAR_50 -> VAR_17
<S2SV_ModStart> { if ( VAR_4 != 1 ) return - VAR_7 ; if (
<S2SV_ModStart> : VAR_86 ; METHOD_3 ( VAR_98 >= VAR_91 -> VAR_7 && VAR_98 < ( ( TYPE_22 * ) VAR_91 -> VAR_7 + METHOD_2 ( VAR_91 ) ) ) ;
<S2SV_ModStart> -> VAR_83 ; TYPE_31 * const VAR_211 = VAR_14 -> VAR_211 ; TYPE_32 * const VAR_212 = & VAR_211 -> VAR_19 ; TYPE_7 * const VAR_204 = & VAR_212 -> VAR_213 <S2SV_ModEnd> ; TYPE_13 * <S2SV_ModStart> VAR_42 = & VAR_212 -> <S2SV_ModEnd> VAR_25 [ VAR_25 <S2SV_ModStart> VAR_40 ; const TYPE_33 * VAR_150 = METHOD_1 ( VAR_42 -> VAR_150 , VAR_107 ) ; const TYPE_28 VAR_86 = VAR_52 -> VAR_86 ; const TYPE_18 * VAR_175 , * VAR_183 ; const TYPE_19 * VAR_112 ; const TYPE_28 VAR_79 = METHOD_2 ( VAR_52 ) ; unsigned TYPE_28 ( * const VAR_194 ) [ VAR_72 ] [ VAR_55 ] = VAR_211 -> VAR_214 . VAR_57 [ VAR_207 ] [ VAR_106 ] [ VAR_79 ] ; TYPE_34 <S2SV_ModEnd> ( * const <S2SV_ModStart> VAR_84 . VAR_66 -> <S2SV_ModEnd> VAR_189 [ VAR_207 <S2SV_ModStart> VAR_72 ] = VAR_211 -> VAR_194 -> <S2SV_ModEnd> VAR_198 [ VAR_207 <S2SV_ModStart> VAR_207 ) ; TYPE_18 VAR_180 ; TYPE_35 VAR_160 ; <S2SV_ModStart> ] ; } vp9_get_token_extra ( VAR_179 , & VAR_180 , & VAR_160 ) ; <S2SV_ModStart> VAR_201 ] , <S2SV_ModEnd> VAR_160 , ( <S2SV_ModStart> ( TYPE_30 ) <S2SV_ModEnd> VAR_180 , ( <S2SV_ModStart> = VAR_177 [ <S2SV_ModEnd> VAR_180 ] ;
<S2SV_ModStart> VAR_35 -> VAR_22 ; if ( VAR_35 -> VAR_37 & VAR_38 ) return VAR_39
<S2SV_ModStart> ; VAR_35 = METHOD_6 <S2SV_ModEnd> ( & VAR_25
<S2SV_ModStart> VAR_81 ) { if ( METHOD_22 ( VAR_25 ) ) { return METHOD_23 ( VAR_86 ) ; }
<S2SV_ModStart> ; TYPE_4 VAR_90 = VAR_96 ; TYPE_4 VAR_92 = VAR_96 <S2SV_ModEnd> ; TYPE_5 VAR_91 <S2SV_ModStart> VAR_88 ) ; VAR_93 : <S2SV_ModStart> VAR_92 ) ; <S2SV_ModEnd> METHOD_19 ( VAR_94
<S2SV_ModStart> : case VAR_7 : case VAR_21 : case VAR_22
<S2SV_ModStart> TYPE_10 VAR_56 = METHOD_10 ( <S2SV_ModStart> VAR_53 , VAR_54 )
<S2SV_ModStart> do VAR_21 = METHOD_3 ( <S2SV_ModStart> VAR_20 , 0 )
<S2SV_ModStart> <S2SV_null> static const TYPE_3 <S2SV_ModEnd> * METHOD_0 ( <S2SV_ModStart> return ( const TYPE_3 <S2SV_ModEnd> * ) VAR_4
<S2SV_ModStart> VAR_62 ) { struct STRUCT_OR_UNION_5 * VAR_66 ; <S2SV_ModStart> VAR_64 , VAR_65 ) ; VAR_66 = VAR_61 -> VAR_62 -> METHOD_12 ( VAR_61 , VAR_36 -> VAR_14 -> VAR_67 ) ; METHOD_13 ( VAR_66 , VAR_36 -> VAR_21 , VAR_63 -> VAR_68
<S2SV_ModStart> VAR_7 ) { TYPE_3 VAR_6 ; struct STRUCT_OR_UNION_0 VAR_8 = * VAR_7 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> VAR_6 ) ; if ( ! METHOD_4 ( VAR_7 , VAR_6 ) ) { METHOD_5 ( "mcs_parse_domain_params(),<S2SV_blank>consume<S2SV_blank>domain<S2SV_blank>params<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_8 ) ; }
<S2SV_ModStart> ) == VAR_183 && METHOD_60 ( VAR_188 ) == VAR_183
<S2SV_ModStart> { TYPE_2 TYPE_2 VAR_11 ; if ( VAR_32 . VAR_33 . VAR_34 != VAR_35 ) { if ( VAR_32 . VAR_33 . VAR_34 >= VAR_32 . VAR_33 . VAR_37 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>xattr<S2SV_blank>id<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } <S2SV_ModEnd> if ( METHOD_1 <S2SV_ModStart> == 0 ) goto VAR_38 ; } else VAR_11 = VAR_32 . VAR_33 . VAR_37 ; if ( VAR_32 . VAR_33 . VAR_39 >= VAR_11 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>id<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } if ( VAR_32 . VAR_33 . VAR_40 == 0 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>id<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } if ( VAR_32 . VAR_33 . VAR_40 > ( VAR_32 . VAR_33 . VAR_41 * 2L ) ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>id<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } if ( METHOD_8 <S2SV_ModEnd> ( & VAR_11 <S2SV_ModStart> == VAR_30 ) goto VAR_38 ; if ( VAR_32 . VAR_33 . VAR_42 != VAR_35 ) { if ( VAR_32 . VAR_33 . VAR_42 >= VAR_11 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>lookup<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } <S2SV_ModEnd> if ( METHOD_3 <S2SV_ModStart> == VAR_30 ) goto VAR_38 ; } if ( VAR_32 . VAR_33 . VAR_43 != 0 ) { if ( VAR_32 . VAR_33 . VAR_44 >= VAR_11 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>fragment<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } if ( VAR_32 . VAR_33 . VAR_43 > VAR_32 . VAR_33 . VAR_41 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>Bad<S2SV_blank>fragment<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } <S2SV_ModEnd> if ( METHOD_4 <S2SV_ModStart> METHOD_4 ( & VAR_11 ) == VAR_30 ) goto VAR_38 ; } else { if ( VAR_32 . VAR_33 . VAR_44 != VAR_11 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>fragment<S2SV_blank>table<S2SV_blank>start<S2SV_blank>invalid<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } } if ( VAR_32 . VAR_33 . VAR_27 >= VAR_11 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>directory<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } if ( METHOD_6 ( VAR_32 . VAR_33 . VAR_27 , VAR_11 ) == VAR_30 ) goto VAR_38 ; if ( VAR_32 . VAR_33 . VAR_19 >= VAR_32 . VAR_33 . VAR_27 ) { METHOD_7 ( "read_filesystem_tables:<S2SV_blank>inode<S2SV_blank>table<S2SV_blank>start<S2SV_blank>too<S2SV_blank>large<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; goto VAR_38 ; } <S2SV_ModEnd> if ( METHOD_5 <S2SV_ModStart> == VAR_30 ) goto VAR_38 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return VAR_36 ; VAR_38 : METHOD_7 ( "File<S2SV_blank>system<S2SV_blank>corruption<S2SV_blank>detected\\n" ) ; return VAR_30 ;
<S2SV_ModStart> STRUCT_OR_UNION_10 * STRUCT_OR_UNION_10 , const struct STRUCT_OR_UNION_15 * VAR_43 , const struct STRUCT_OR_UNION_15 * VAR_44 <S2SV_ModStart> VAR_42 = 0 ; METHOD_9 ( STRUCT_OR_UNION_14 , "DOAS_USER" , VAR_43 -> VAR_45 ) <S2SV_ModStart> } } } else { static const TYPE_4 * VAR_46 [ ] = { "DISPLAY" , "TERM" , VAR_22 } ; METHOD_9 ( STRUCT_OR_UNION_14 , "HOME" , VAR_44 -> VAR_47 ) ; METHOD_9 ( STRUCT_OR_UNION_14 , "LOGNAME" , VAR_44 -> VAR_45 ) ; METHOD_9 ( STRUCT_OR_UNION_14 , "PATH" , METHOD_10 ( "PATH" ) ) ; METHOD_9 ( STRUCT_OR_UNION_14 , "SHELL" , VAR_44 -> VAR_48 ) ; METHOD_9 ( STRUCT_OR_UNION_14 , "USER" , VAR_44 -> VAR_45 ) ; METHOD_11 ( STRUCT_OR_UNION_14 , VAR_46 ) ; }
<S2SV_ModStart> -> VAR_52 ; METHOD_10 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> TYPE_4 VAR_53 ; const TYPE_4 VAR_56 = METHOD_11 ( VAR_45 -> VAR_46 , VAR_45 -> VAR_57 ) ; METHOD_12 ( VAR_41 -> VAR_19 , VAR_58 , VAR_45 -> VAR_27 * VAR_45 -> VAR_29 ) ; METHOD_5 ( VAR_52 ) ; if ( VAR_41 -> VAR_42 . VAR_59 < 256 ) { METHOD_13 ( VAR_52 ) ; return ; } METHOD_4 ( VAR_52 ) ; VAR_52 -> VAR_33 = VAR_34 ; METHOD_6 ( VAR_52 , VAR_58 , VAR_54 ) ; for ( VAR_53 = 0 ; VAR_53 < VAR_60 ; ++ VAR_53 ) { TYPE_4 VAR_55 ; if ( VAR_53 == VAR_58 ) continue ; <S2SV_ModEnd> VAR_55 = METHOD_7 <S2SV_ModStart> -> VAR_46 , VAR_61 [ VAR_56 ] [ VAR_53 ] , VAR_45 -> VAR_57 ) ; if ( ( VAR_45 -> VAR_46 != 0 ) && ( ( VAR_45 -> VAR_46 + VAR_55 ) == 0 ) ) { VAR_55 = - VAR_45 -> VAR_46 + 1 ; } if ( ( VAR_45 -> VAR_46 + VAR_55 ) > 0 ) { <S2SV_ModEnd> METHOD_8 ( VAR_52 <S2SV_ModStart> } } } }
<S2SV_ModStart> , VAR_10 , 2 ) ; if ( ! VAR_11 ) return 0 ; VAR_15 = METHOD_163 ( "Interactive" , VAR_21 , VAR_14 , <S2SV_ModStart> if ( ! VAR_15 ) return 0 ; VAR_19 = METHOD_163 ( "Expression" <S2SV_ModEnd> , VAR_21 , <S2SV_ModStart> , VAR_21 , VAR_18 , <S2SV_ModEnd> 1 ) ; <S2SV_ModStart> if ( ! VAR_19 ) return 0 ; VAR_659 = METHOD_163 ( "FunctionType" <S2SV_ModEnd> , VAR_21 , <S2SV_ModStart> , VAR_21 , VAR_660 , 2 ) ; if ( ! VAR_659 <S2SV_ModEnd> ) return 0 <S2SV_ModStart> , VAR_32 , 6 ) ; if ( ! VAR_33 ) return 0 ; VAR_37 = METHOD_163 ( "AsyncFunctionDef" , VAR_127 , VAR_36 , 6 ) ; if ( ! VAR_37 ) return 0 ; VAR_41 = METHOD_163 ( "ClassDef" , VAR_127 , VAR_40 , <S2SV_ModStart> if ( ! VAR_41 ) return 0 ; VAR_45 = METHOD_163 ( "Return" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_44 , 1 ) ; if ( ! VAR_45 ) return 0 ; VAR_49 = METHOD_163 ( "Delete" , VAR_127 , VAR_48 , 1 ) ; if ( ! VAR_49 ) return 0 ; VAR_53 = METHOD_163 ( "Assign" , VAR_127 , VAR_52 , 3 ) ; if ( ! VAR_53 ) return 0 ; VAR_57 = METHOD_163 ( "AugAssign" , VAR_127 , VAR_56 , 3 ) ; if ( ! VAR_57 ) return 0 ; VAR_61 = METHOD_163 ( "AnnAssign" , VAR_127 , VAR_60 , 4 ) ; if ( ! VAR_61 ) return 0 ; VAR_65 = METHOD_163 ( "For" , VAR_127 , VAR_64 <S2SV_ModEnd> , 5 ) <S2SV_ModStart> if ( ! VAR_65 ) return 0 ; VAR_69 = METHOD_163 ( "AsyncFor" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_68 <S2SV_ModEnd> , 5 ) <S2SV_ModStart> if ( ! VAR_69 ) return 0 ; VAR_73 = METHOD_163 ( "While" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_72 , 3 ) ; if ( ! VAR_73 ) return 0 ; VAR_77 = METHOD_163 ( "If" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_76 , 3 ) ; if ( ! VAR_77 ) return 0 ; VAR_81 = METHOD_163 ( "With" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_80 , 3 ) ; if ( ! VAR_81 ) return 0 ; VAR_85 = METHOD_163 ( "AsyncWith" <S2SV_ModEnd> , VAR_127 , <S2SV_ModStart> , VAR_127 , VAR_84 , 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> , VAR_636 , 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> return 0 ; VAR_661 = METHOD_163 ( "type_ignore" , & VAR_653 , VAR_657 , 0 ) ; if ( ! VAR_661 ) return 0 ; if ( ! METHOD_164 ( VAR_661 , VAR_657 , 0 ) ) return 0 ; VAR_662 = METHOD_163 ( "TypeIgnore" , VAR_661 , VAR_663 , 1 ) ; if ( ! VAR_662 ) return 0 ;
<S2SV_ModStart> } VAR_46 = METHOD_16 ( <S2SV_ModStart> VAR_33 | VAR_34 ) <S2SV_ModStart> return ; } METHOD_16 ( <S2SV_ModStart> "btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea" , 16 )
<S2SV_ModStart> TYPE_4 VAR_39 , enum VAR_42 VAR_43 , <S2SV_ModStart> TYPE_8 * VAR_41 , TYPE_4 VAR_44 <S2SV_ModStart> ; while ( <S2SV_ModEnd> VAR_39 > 0 <S2SV_ModStart> VAR_39 > 0 && VAR_44 > 0 && * VAR_38 <S2SV_ModStart> - VAR_17 ; VAR_38 += VAR_36 ; VAR_39 -= VAR_36 ; <S2SV_ModStart> VAR_21 ) { if ( VAR_44 < 2 ) break ; <S2SV_ModStart> -= VAR_21 ; METHOD_2 ( VAR_40 ++ , <S2SV_ModEnd> VAR_27 | ( <S2SV_ModStart> & VAR_30 ) , VAR_43 ) ; METHOD_2 ( VAR_40 ++ , <S2SV_ModEnd> VAR_27 | VAR_28 <S2SV_ModStart> & VAR_30 ) , VAR_43 ) ; VAR_44 -= 2 <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { METHOD_2 ( VAR_40 ++ , VAR_32 , VAR_43 ) ; VAR_44 -- ; } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { METHOD_2 ( VAR_40 ++ , * VAR_38 ++ , VAR_43 ) ; VAR_39 -- ; VAR_44 <S2SV_ModEnd> -- ; }
<S2SV_ModStart> ; if ( * VAR_306 == '\\0' || <S2SV_ModEnd> METHOD_48 ( VAR_306 <S2SV_ModStart> ) != VAR_245 || <S2SV_ModEnd> METHOD_57 ( VAR_306 <S2SV_ModStart> ( VAR_306 , "." ) == 0 || METHOD_57 ( VAR_306 , <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ) { METHOD_103
<S2SV_ModStart> return 0 ; case VAR_22 : * ( TYPE_7 * ) VAR_17 = VAR_18 -> VAR_23 ; return 0 ;
<S2SV_ModStart> VAR_14 ) { <S2SV_ModEnd> TYPE_10 VAR_13 , <S2SV_ModStart> , VAR_17 ; if ( unlikely ( siphash_key_is_zero ( & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 ) ) ) get_random_bytes ( & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> , sizeof ( STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; VAR_13 = METHOD_6 <S2SV_ModEnd> ( ( TYPE_9 <S2SV_ModStart> VAR_15 -> VAR_11 , & STRUCT_OR_UNION_3 -> VAR_18 . VAR_19 <S2SV_ModEnd> ) ; VAR_17
<S2SV_ModStart> TYPE_0 METHOD_0 ( TYPE_4 <S2SV_ModEnd> * VAR_3 , <S2SV_ModStart> * VAR_3 , PREDICTION_MODE <S2SV_ModEnd> VAR_7 , const <S2SV_ModStart> VAR_7 , const TYPE_5 <S2SV_ModEnd> * VAR_5 )
<S2SV_ModStart> VAR_41 -> VAR_42 , ".chfn"
<S2SV_ModStart> { if ( VAR_7 < sizeof ( struct STRUCT_OR_UNION_1 ) ) return - VAR_59 ; if ( <S2SV_ModStart> VAR_65 -> VAR_56 + sizeof ( VAR_62 )
<S2SV_ModStart> VAR_18 ; } VAR_38 -> VAR_49 = VAR_44 -> VAR_49 ;
<S2SV_ModStart> -> VAR_19 ) METHOD_3 <S2SV_ModEnd> ( VAR_20 )
<S2SV_ModStart> ) ; else if ( METHOD_14 ( VAR_236 , "@@" ) == 0 || METHOD_14 ( VAR_236 , "@@u" ) == 0 ) METHOD_72 ( METHOD_16 ( "Skipping<S2SV_blank>invalid<S2SV_blank>Exec<S2SV_blank>argument<S2SV_blank>%s\\n" ) , VAR_236 ) ; else
<S2SV_ModStart> VAR_102 -> VAR_5 ; const TYPE_19 * const VAR_109 = METHOD_11 ( ) <S2SV_ModStart> , VAR_79 ; TYPE_16 VAR_110 , VAR_111 ; TYPE_20 * VAR_112 <S2SV_ModEnd> = VAR_19 ; <S2SV_ModStart> = VAR_19 ; if ( VAR_99 -> VAR_113 . VAR_114 && ! VAR_99 -> VAR_115 && VAR_102 -> VAR_116 . VAR_117 == VAR_19 ) { METHOD_13 ( VAR_99 , VAR_102 -> VAR_116 . VAR_117 , METHOD_12 ( 32 , sizeof ( TYPE_21 ) ) ) ; VAR_102 -> VAR_116 . hook = ( VPxWorkerHook ) vp9_loop_filter_worker ; if ( VAR_102 -> VAR_143 > 1 && ! VAR_109 -> reset ( & VAR_102 -> VAR_116 ) ) { METHOD_25 ( & VAR_99 -> VAR_100 , VPX_CODEC_ERROR , "Loop<S2SV_blank>filter<S2SV_blank>thread<S2SV_blank>creation<S2SV_blank>failed" ) ; } } if ( VAR_99 -> VAR_113 . VAR_114 && ! VAR_99 -> VAR_115 ) { TYPE_21 * const VAR_118 = ( TYPE_21 * ) VAR_102 -> VAR_116 . VAR_117 ; VAR_109 -> METHOD_15 ( & VAR_102 -> VAR_116 ) ; METHOD_17 ( VAR_118 , METHOD_16 ( VAR_99 ) , VAR_99 , VAR_102 -> VAR_119 . VAR_120 ) ; } <S2SV_ModEnd> METHOD_3 ( VAR_82 <S2SV_ModStart> ) ) ; METHOD_14 <S2SV_ModEnd> ( VAR_99 -> <S2SV_ModStart> VAR_33 ) ; METHOD_14 <S2SV_ModEnd> ( VAR_99 -> <S2SV_ModStart> VAR_33 ) ; METHOD_18 ( VAR_102 , VAR_95 , VAR_96 , VAR_84 , VAR_82 , VAR_86 ) ; if ( VAR_102 -> VAR_112 == VAR_19 || ( VAR_84 * VAR_82 ) != VAR_102 -> VAR_121 ) { METHOD_19 ( VAR_102 -> VAR_112 ) ; METHOD_13 ( VAR_99 , VAR_102 -> VAR_112 , METHOD_12 ( 32 , VAR_84 * VAR_82 * ( sizeof ( * VAR_102 -> VAR_112 ) ) ) ) ; VAR_102 -> VAR_121 = VAR_82 * VAR_84 ; } <S2SV_ModStart> ) { const TYPE_17 * const VAR_97 = & VAR_86 [ VAR_92 ] [ VAR_79 ] ; VAR_112 = VAR_102 -> VAR_112 + VAR_84 * VAR_92 + VAR_79 ; VAR_112 -> VAR_99 = VAR_99 ; VAR_112 -> VAR_122 = VAR_102 -> VAR_119 ; VAR_112 -> VAR_122 . VAR_123 = 0 ; VAR_112 -> VAR_122 . VAR_124 = VAR_99 -> VAR_125 ? VAR_19 : & VAR_99 -> VAR_124 ; METHOD_20 ( VAR_112 -> VAR_126 ) ; METHOD_7 ( & VAR_112 -> VAR_122 . VAR_103 , VAR_112 -> VAR_99 , VAR_92 , VAR_79 ) ; METHOD_8 ( VAR_97 -> VAR_95 , VAR_96 , VAR_97 -> VAR_98 , & VAR_99 -> VAR_100 , & VAR_112 -> VAR_127 , VAR_102 -> VAR_128 , VAR_102 -> VAR_129 ) ; METHOD_21 ( VAR_99 , & VAR_112 -> VAR_122 , VAR_112 -> VAR_126 ) ; } } for ( VAR_92 = 0 ; VAR_92 < VAR_82 ; ++ VAR_92 ) { TYPE_18 VAR_103 ; METHOD_22 ( & VAR_103 , VAR_99 , VAR_92 ) ; for ( VAR_110 = VAR_103 . VAR_130 ; VAR_110 < VAR_103 . VAR_131 ; VAR_110 += VAR_132 ) { for ( VAR_79 = 0 ; VAR_79 < VAR_84 ; ++ VAR_79 ) { const TYPE_16 VAR_93 = VAR_102 -> VAR_76 ? VAR_84 - VAR_79 - 1 : VAR_79 ; VAR_112 = VAR_102 -> VAR_112 + VAR_84 * VAR_92 + VAR_93 ; METHOD_23 ( & VAR_103 , VAR_112 -> VAR_99 , VAR_93 ) ; METHOD_20 ( VAR_112 -> VAR_122 . VAR_133 ) ; METHOD_20 ( VAR_112 -> VAR_122 . VAR_134 ) ; for ( VAR_111 = VAR_103 . VAR_135 ; VAR_111 < VAR_103 . VAR_136 ; VAR_111 += VAR_132 ) { METHOD_24 ( VAR_102 , & VAR_112 -> VAR_122 , VAR_110 , VAR_111 , & VAR_112 -> VAR_127 , VAR_137 , 4 ) ; } VAR_102 -> VAR_119 . VAR_123 |= VAR_112 -> VAR_122 . VAR_123 ; if ( VAR_102 -> VAR_119 . VAR_123 ) METHOD_25 ( & VAR_99 -> VAR_100 , VAR_138 , "Failed<S2SV_blank>to<S2SV_blank>decode<S2SV_blank>tile<S2SV_blank>data" ) ; } if ( VAR_99 -> VAR_113 . VAR_114 && ! VAR_99 -> VAR_115 ) { const TYPE_16 VAR_139 = VAR_110 - VAR_132 ; TYPE_21 * const VAR_118 = ( TYPE_21 * ) VAR_102 -> VAR_116 . VAR_117 ; if ( VAR_139 < 0 ) continue ; if ( VAR_110 + VAR_132 >= VAR_99 -> VAR_140 ) continue ; VAR_109 -> METHOD_15 ( & VAR_102 -> VAR_116 ) ; VAR_118 -> VAR_141 = VAR_139 ; VAR_118 -> VAR_142 = VAR_110 ; if ( VAR_102 -> VAR_143 > 1 ) { VAR_109 -> METHOD_26 ( & VAR_102 -> VAR_116 ) ; } else { VAR_109 -> METHOD_27 ( & VAR_102 -> VAR_116 ) ; } } if ( VAR_102 -> VAR_144 ) METHOD_28 ( VAR_102 -> VAR_145 , VAR_110 << VAR_146 ) ; } } if ( VAR_99 -> VAR_113 . VAR_114 && ! VAR_99 -> VAR_115 ) { TYPE_21 * const VAR_118 = ( TYPE_21 * ) VAR_102 -> VAR_116 . VAR_117 ; VAR_109 -> METHOD_15 ( & VAR_102 -> VAR_116 ) ; VAR_118 -> VAR_141 = VAR_118 -> VAR_142 ; VAR_118 -> VAR_142 = VAR_99 -> VAR_140 ; VAR_109 -> METHOD_27 ( & VAR_102 -> VAR_116 ) ; } VAR_112 = VAR_102 -> VAR_112 + VAR_84 * <S2SV_ModEnd> VAR_82 - 1 <S2SV_ModStart> VAR_82 - 1 ; if ( VAR_102 -> VAR_144 ) METHOD_28 ( VAR_102 -> VAR_145 , VAR_147 ) ; return METHOD_29 ( & VAR_112 -> VAR_127 ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> * METHOD_0 ( TYPE_4 * const VAR_40 <S2SV_ModEnd> ) { TYPE_2 <S2SV_ModStart> { TYPE_2 * volatile <S2SV_ModStart> ; TYPE_3 * volatile <S2SV_ModStart> = 1 ; METHOD_15 ( VAR_35 , VAR_35 -> VAR_41 , ( TYPE_5 * ) METHOD_14 ( 1 , sizeof ( * VAR_35 -> VAR_41 ) ) ) ; METHOD_15 ( VAR_35 , VAR_35 -> VAR_43 , ( TYPE_5 * ) METHOD_14 ( VAR_44 , sizeof ( * VAR_35 -> VAR_43 ) ) ) ; VAR_39 -> need_resync = 1 ; once ( initialize_dec ) ; METHOD_16 <S2SV_ModEnd> ( & VAR_35 <S2SV_ModStart> ) ) ; METHOD_16 ( & VAR_35 -> VAR_42 , - 1 , sizeof ( VAR_35 -> VAR_42 ) ) ; <S2SV_ModStart> ; VAR_39 -> <S2SV_ModEnd> VAR_30 = 1 <S2SV_ModStart> ; VAR_39 -> VAR_6 . buffer_pool = VAR_40 ; VAR_35 -> bit_depth = VPX_BITS_8 ; VAR_35 -> dequant_bit_depth = VPX_BITS_8 ; VAR_35 -> alloc_mi = vp9_dec_alloc_mi ; VAR_35 -> free_mi = vp9_dec_free_mi ; VAR_35 -> setup_mi = vp9_dec_setup_mi ; METHOD_11 ( VAR_35 ) ; VAR_35 -> VAR_36 . METHOD_12 <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; vpx_get_worker_interface ( ) -> init <S2SV_ModEnd> ( & VAR_39
<S2SV_ModStart> VAR_13 ) { TYPE_1 * VAR_13 ; <S2SV_ModStart> ( "[iso<S2SV_blank>file]<S2SV_blank>Missing<S2SV_blank>dref<S2SV_blank>box<S2SV_blank>in<S2SV_blank>dinf\\n" ) ) ; VAR_13 = METHOD_3 ( VAR_14 <S2SV_ModStart> TYPE_6 * ) VAR_13 ; METHOD_4 ( VAR_12 , VAR_13 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_23 ) ; <S2SV_ModEnd> METHOD_9 ( VAR_30
<S2SV_ModStart> -> VAR_22 ; VAR_23 -> VAR_24 = METHOD_2 ( VAR_16 -> VAR_24 ) ;
<S2SV_ModStart> ) { struct STRUCT_OR_UNION_3 <S2SV_ModEnd> * VAR_13 ; <S2SV_ModStart> || VAR_13 -> VAR_13 .
<S2SV_ModStart> VAR_20 , const TYPE_6 <S2SV_ModEnd> * VAR_21 , <S2SV_ModStart> do { const TYPE_6 <S2SV_ModEnd> VAR_22 = VAR_21
<S2SV_ModStart> VAR_23 ) ; METHOD_12 ( & VAR_46 -> VAR_48 ) ;
<S2SV_ModStart> ) ; struct STRUCT_OR_UNION_8 * VAR_69 = VAR_37 -> VAR_36 ; struct <S2SV_ModStart> ; if ( ! VAR_31 ) { VAR_68 = METHOD_23 ( VAR_69 , VAR_65 <S2SV_ModEnd> ) ; if <S2SV_ModStart> goto VAR_67 ; } if ( METHOD_2 ( VAR_37 ) ) { VAR_68 = METHOD_3 ( VAR_65 , VAR_12 ) ; if ( VAR_68 ) goto VAR_67 ; <S2SV_ModStart> VAR_62 ) ; VAR_63 -> VAR_51 -> VAR_36 -> VAR_70 = 0 ; <S2SV_ModStart> ; VAR_67 : VAR_69 -> VAR_70 = 0 ;
<S2SV_ModStart> , & VAR_25 , 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = METHOD_31 ( ( TYPE_34 ) <S2SV_ModStart> = METHOD_31 ( ( TYPE_34 )
<S2SV_ModStart> VAR_13 , const TYPE_7 <S2SV_ModEnd> * VAR_5 ) <S2SV_ModStart> ) VAR_13 -> VAR_16 <S2SV_ModEnd> * ( TYPE_5
<S2SV_ModStart> VAR_29 ) { TYPE_7 <S2SV_ModEnd> VAR_22 [ VAR_14
<S2SV_ModStart> TYPE_3 * VAR_21 , TYPE_4 VAR_22 <S2SV_ModStart> VAR_9 , VAR_21 , VAR_22 <S2SV_ModStart> VAR_20 , VAR_21 , VAR_22
<S2SV_ModStart> VAR_159 ) { struct STRUCT_OR_UNION_9 * VAR_120 ; VAR_120 = ( struct STRUCT_OR_UNION_9 * ) VAR_177 ; if ( VAR_120 -> VAR_118 < VAR_317 ) { METHOD_24 ( VAR_312 , "config<S2SV_blank>%d<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>interface<S2SV_blank>association<S2SV_blank>descriptor<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%d,<S2SV_blank>skipping\\n" , VAR_313 , VAR_120 -> VAR_118 ) ; continue ; } <S2SV_ModStart> VAR_168 ] = VAR_120 <S2SV_ModEnd> ; VAR_168 ++
<S2SV_ModStart> VAR_9 ) { <S2SV_ModEnd> unsigned TYPE_5 VAR_27 <S2SV_ModStart> ] ; struct crypto_cipher * VAR_46 <S2SV_ModEnd> ; METHOD_1 ( <S2SV_ModStart> ; VAR_46 = METHOD_17 ( "des" <S2SV_ModEnd> , 0 , <S2SV_ModStart> , 0 , 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ) { <S2SV_ModEnd> METHOD_14 ( VAR_42 <S2SV_ModStart> "could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>des<S2SV_blank>crypto<S2SV_blank>API\\n" ) ; return METHOD_4 ( VAR_46 ) ; } crypto_cipher_setkey <S2SV_ModEnd> ( VAR_46 , <S2SV_ModStart> 8 ) ; crypto_cipher_encrypt_one ( VAR_46 , VAR_31 , VAR_29 ) ; crypto_free_cipher <S2SV_ModEnd> ( VAR_46 ) <S2SV_ModStart> VAR_46 ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> VAR_26 ) { <S2SV_ModEnd> VAR_24 -> VAR_23 <S2SV_ModStart> VAR_24 -> VAR_23 . ptr [ <S2SV_ModEnd> VAR_24 -> VAR_23 <S2SV_ModStart> VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_24 -> VAR_23 . ptr <S2SV_ModStart> [ VAR_24 -> VAR_23 . VAR_27 <S2SV_ModEnd> ++ ] = <S2SV_ModStart> VAR_26 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) { TYPE_7 VAR_46 , VAR_71 , <S2SV_ModStart> ; TYPE_8 VAR_52 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; VAR_46 = <S2SV_ModEnd> 0 ; while <S2SV_ModStart> VAR_34 ) < <S2SV_ModEnd> 1 ) { <S2SV_ModStart> VAR_34 ) ) break ; ++ VAR_46 ; } if ( VAR_46 >= 32 ) { VAR_70 = METHOD_5 ( 32 ) ; } else { if ( METHOD_2 ( VAR_34 ) < VAR_46 ) { METHOD_8 ( VAR_61 -> VAR_62 , VAR_63 , "Invalid<S2SV_blank>uvlc<S2SV_blank>code<S2SV_blank>at<S2SV_blank>" "%s:<S2SV_blank>bitstream<S2SV_blank>ended.\\n" , VAR_64 ) ; return VAR_68 ; } VAR_71 = METHOD_6 ( VAR_34 , VAR_46 ) ; VAR_70 = VAR_71 + ( METHOD_9 ( 1 ) << VAR_46 ) - 1 ; } if ( VAR_61 -> VAR_48 ) { TYPE_9 VAR_55 [ 65 ] ; TYPE_8 VAR_50 , VAR_44 , VAR_72 ; if ( VAR_46 >= 32 ) { while ( VAR_46 > 32 ) { VAR_72 = METHOD_10 ( VAR_46 - 32 , 32 ) ; for ( VAR_50 = 0 ; VAR_50 < VAR_72 ; VAR_50 ++ ) VAR_55 [ VAR_50 ] = '0' ; VAR_55 [ VAR_50 ] = 0 ; METHOD_7 ( VAR_61 , VAR_52 , VAR_64 , VAR_54 , VAR_55 , 0 ) ; VAR_46 -= VAR_72 ; VAR_52 += VAR_72 ; } } for ( VAR_50 = 0 ; VAR_50 < VAR_46 ; VAR_50 ++ ) VAR_55 [ VAR_50 ] = '0' ; <S2SV_ModEnd> VAR_55 [ VAR_50 <S2SV_ModStart> = '1' ; if ( VAR_46 < 32 ) { <S2SV_ModEnd> for ( VAR_44 <S2SV_ModStart> ] = ( VAR_71 <S2SV_ModEnd> >> ( VAR_46 <S2SV_ModStart> : '0' ; } <S2SV_ModEnd> VAR_55 [ VAR_50
<S2SV_ModStart> VAR_35 > VAR_38 + VAR_41 <S2SV_ModStart> VAR_40 + 1 <= VAR_38 + VAR_41 <S2SV_ModEnd> ) VAR_39 ->
<S2SV_ModStart> case VAR_64 : case VAR_93 :
<S2SV_ModStart> , VAR_110 -> VAR_112 . VAR_105 = VAR_106 , VAR_110 -> VAR_112 . VAR_109 = 0 , VAR_110 ->
<S2SV_ModStart> VAR_10 ) ; <S2SV_ModEnd> VAR_14 : return
<S2SV_ModStart> ++ VAR_15 ; if <S2SV_ModEnd> ( METHOD_10 ( <S2SV_ModStart> , VAR_13 ) <= VAR_14 ) return - 1 ; if <S2SV_ModEnd> ( ( TYPE_10 <S2SV_ModStart> VAR_13 ) ) > VAR_14 ) return - 1 <S2SV_ModEnd> ; return VAR_15
<S2SV_ModStart> , VAR_57 , METHOD_18 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> VAR_53 ) , METHOD_18 <S2SV_ModEnd> ( 4 , <S2SV_ModStart> ; } } return ( <S2SV_ModStart> VAR_96 , 8 , VAR_92 ) ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ) == VAR_183 && METHOD_60 ( VAR_188 ) == VAR_183
<S2SV_ModStart> TYPE_3 VAR_31 = METHOD_9 ( <S2SV_ModStart> VAR_17 , VAR_18 ) <S2SV_ModStart> { VAR_31 = METHOD_9 ( <S2SV_ModStart> VAR_17 , VAR_18 )
<S2SV_ModStart> VAR_40 ) { TYPE_3 * VAR_32 = VAR_41 ; <S2SV_ModStart> VAR_40 ) ; METHOD_5 ( VAR_41 ) ;
<S2SV_ModStart> ; if ( <S2SV_ModEnd> ! METHOD_14 (
<S2SV_ModStart> VAR_555 ) && ( ( VAR_321 * <S2SV_ModEnd> VAR_691 . VAR_399 <S2SV_ModStart> VAR_691 . VAR_399 ) > ( 8 * <S2SV_ModEnd> VAR_691 . VAR_558 <S2SV_ModStart> VAR_691 . VAR_558 ) <S2SV_ModStart> ( VAR_550 + VAR_550 <S2SV_ModEnd> % 2 )
<S2SV_ModStart> ) ) { METHOD_7 ( VAR_20 <S2SV_ModEnd> , "%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>%12.3f<S2SV_blank>cm\\n" , <S2SV_ModStart> VAR_19 ) ; METHOD_8 ( VAR_20 ) ;
<S2SV_ModStart> , "received<S2SV_blank>Bandwidth<S2SV_blank>Measure<S2SV_blank>Results<S2SV_blank>PDU" ) ; if ( METHOD_5 ( VAR_13 ) < 8 ) return - 1
<S2SV_ModStart> METHOD_1 ( VAR_4 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> endif if ( <S2SV_ModEnd> VAR_369 -> VAR_274 <S2SV_ModStart> == 0 ) { if <S2SV_ModEnd> ( VAR_373 -> <S2SV_ModStart> VAR_298 == VAR_299 && <S2SV_ModEnd> VAR_373 -> VAR_374 <S2SV_ModStart> == VAR_304 ) { if ( VAR_369 -> VAR_377 [ VAR_315 + VAR_316 ] < 255 ) VAR_369 -> VAR_377 [ VAR_315 + VAR_316 ] += 1 ; if ( VAR_369 -> VAR_378 [ VAR_315 + VAR_316 ] < 255 ) VAR_369 -> VAR_378 [ VAR_315 + VAR_316 ] += 1 ; } else { VAR_369 -> VAR_377 [ VAR_315 + VAR_316 ] = 0 ; VAR_369 -> VAR_378 [ VAR_315 + VAR_316 ] = 0 ; } if ( VAR_375 -> VAR_379 ) VAR_369 -> VAR_378 [ VAR_315 + VAR_316 ] = 0 ; } if ( ( VAR_369 -> VAR_274 == 0 ) && ( VAR_369 -> VAR_276 && VAR_373 -> VAR_278 ) ) { VAR_369 -> VAR_280 [ VAR_315 + VAR_316 ] = VAR_373 -> VAR_374 -> VAR_348 . VAR_349 ; if ( VAR_373 -> VAR_374 -> VAR_348 . VAR_349 ) VAR_369 -> VAR_314 [ VAR_315 + VAR_316 ] = - 1 ; else if ( ( VAR_373 -> VAR_374 -> VAR_348 . VAR_298 == VAR_299 ) && ( VAR_373 -> VAR_374 -> VAR_348 . VAR_303 == VAR_304 ) <S2SV_ModStart> - VAR_328 ; METHOD_10 <S2SV_ModEnd> ( VAR_327 ,
<S2SV_ModStart> == VAR_31 ) { <S2SV_ModStart> VAR_23 ) ; VAR_59 -> VAR_65 &= ~ VAR_66 ; }
<S2SV_ModStart> * VAR_45 ; struct STRUCT_OR_UNION_0 VAR_50 = * VAR_41 ; <S2SV_ModStart> ; if ( ! METHOD_15 ( VAR_41 , VAR_46 ) ) { METHOD_16 ( "cliprdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & VAR_50 ) ; } if (
<S2SV_ModStart> { if ( VAR_173 == VAR_143 ) break ; if (
<S2SV_ModStart> VAR_14 , const TYPE_6 <S2SV_ModEnd> * VAR_11 ,
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_60 , VAR_58
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_15 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> VAR_59 ) ; if <S2SV_ModEnd> ( ( VAR_59 <S2SV_ModStart> VAR_68 ) ) != 0 ) { METHOD_6 ( VAR_7 -> VAR_71 , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! <S2SV_ModStart> VAR_52 ) return 0 <S2SV_ModStart> VAR_70 -- ) return 1 ;
<S2SV_ModStart> VAR_96 ) { <S2SV_ModEnd> TYPE_7 VAR_26 ; <S2SV_ModStart> TYPE_7 VAR_26 ; TYPE_4 VAR_25 <S2SV_ModEnd> ; METHOD_18 ( <S2SV_ModStart> ++ ) { METHOD_26 ( VAR_96 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ( VAR_210 ) { METHOD_20 ( VAR_215 ) ; <S2SV_ModStart> return VAR_210 ; }
<S2SV_ModStart> VAR_296 , VAR_304 = 1 <S2SV_ModStart> VAR_69 , VAR_59 = VAR_306
<S2SV_ModStart> { VAR_52 = METHOD_14 <S2SV_ModEnd> ( VAR_52 ,
<S2SV_ModStart> TYPE_3 * VAR_83 , <S2SV_ModEnd> TYPE_4 * VAR_71 <S2SV_ModStart> TYPE_4 * VAR_71 ) { TYPE_5 * VAR_47 <S2SV_ModStart> = VAR_15 -> VAR_89 . VAR_90 . <S2SV_ModEnd> VAR_47 [ VAR_19
<S2SV_ModStart> ; METHOD_1 ( VAR_41 ) ; VAR_36 = METHOD_15 ( VAR_33 ) ; if ( VAR_36 == - VAR_42 ) { METHOD_11 ( VAR_36 , "Virtual<S2SV_blank>console<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>K_XLATE<S2SV_blank>or<S2SV_blank>K_UNICODE:<S2SV_blank>%m" , VAR_41 ) ; return 0 ; } else if ( VAR_36 < 0 ) return METHOD_11 ( VAR_36 , "Failed<S2SV_blank>to<S2SV_blank>verify<S2SV_blank>kbdmode<S2SV_blank>on<S2SV_blank>%s:<S2SV_blank>%m" ,
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_55 ) { struct STRUCT_OR_UNION_1 * VAR_51 = VAR_55 -> VAR_52 ; struct STRUCT_OR_UNION_2 * VAR_56 = VAR_51 -> VAR_57 ; METHOD_16 ( & VAR_51 -> VAR_58 ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x80 ; VAR_56 -> VAR_59 [ 2 ] = 0 ; if ( METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 , 3 , VAR_56 -> VAR_59 , 1 , 0 ) < 0 ) METHOD_11 ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x02 ; VAR_56 -> VAR_59 [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_5 ( 300 ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x83 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 , 1 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> ) METHOD_11 ( <S2SV_ModEnd> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_ModStart> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; mutex_unlock ( & VAR_51 -> VAR_58 ) ; VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> & VAR_51 -> <S2SV_ModEnd> VAR_53 ) ; <S2SV_ModStart> ; if ( VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> ( VAR_46 , VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> , & VAR_51 <S2SV_ModEnd> -> VAR_53 )
<S2SV_ModStart> VAR_0 ) { METHOD_3 <S2SV_ModEnd> ( METHOD_2 ( <S2SV_ModStart> ( STRUCT_OR_UNION_3 ) , STRUCT_OR_UNION_3
<S2SV_ModStart> * VAR_84 , const <S2SV_ModStart> ( VAR_58 & <S2SV_ModEnd> VAR_33 ) && <S2SV_ModStart> ) ; } <S2SV_ModEnd> } return METHOD_3
<S2SV_ModStart> * METHOD_0 ( const TYPE_5 <S2SV_ModEnd> * VAR_12 , <S2SV_ModStart> < VAR_9 ; VAR_14 ++ <S2SV_ModEnd> ) { VAR_21 <S2SV_ModStart> { VAR_21 = cJSON_CreateNumber <S2SV_ModEnd> ( VAR_12 [ <S2SV_ModStart> ] ) ; if ( ! VAR_21 ) { METHOD_4 ( VAR_22 ) ; return 0 ; }
<S2SV_ModStart> VAR_13 ) ; switch ( VAR_28 -> VAR_13 ) { case - VAR_29 : case - VAR_30 : goto VAR_23 ; default : <S2SV_ModStart> goto VAR_24 ; }
<S2SV_ModStart> , VAR_43 ) ; if ( VAR_42 == VAR_82 ) return 0
<S2SV_ModStart> VAR_275 + VAR_279 ) ; METHOD_1 ( ( VAR_16 + 1 ) != 0 <S2SV_ModStart> VAR_281 ) ; METHOD_1 ( ( VAR_279 + ( VAR_257 -> VAR_105 [ VAR_296 ] . VAR_281 * 2 ) ) <= VAR_281 ) ; <S2SV_ModStart> += 4 ; METHOD_1 ( VAR_282 -> VAR_281 + VAR_279 <= VAR_281 ) ; <S2SV_ModStart> VAR_259 ) { METHOD_1 ( VAR_282 -> VAR_281 != 0 ) ;
<S2SV_ModStart> VAR_198 -> VAR_5 ; const TYPE_51 * const VAR_207 = METHOD_28 ( ) <S2SV_ModStart> ( VAR_198 -> <S2SV_ModEnd> VAR_33 & ~ <S2SV_ModStart> VAR_145 [ 1 ] [ 1 <S2SV_ModStart> = VAR_198 -> <S2SV_ModEnd> VAR_33 & ~ <S2SV_ModStart> VAR_198 -> VAR_199 ) ) ) ; METHOD_4 ( ( sizeof ( * VAR_198 -> VAR_208 ) % 16 ) == 0 ) ; METHOD_10 ( VAR_171 , VAR_198 -> VAR_208 , METHOD_9 ( 32 , VAR_53 * sizeof ( * VAR_198 -> VAR_208 ) ) ) ; METHOD_10 ( VAR_171 , VAR_198 -> VAR_209 , METHOD_11 ( VAR_53 * sizeof ( * VAR_198 -> VAR_209 <S2SV_ModStart> TYPE_48 ) { TYPE_52 <S2SV_ModEnd> * const VAR_195 <S2SV_ModStart> -> VAR_45 ; VAR_207 -> METHOD_29 ( VAR_195 <S2SV_ModEnd> ) ; if <S2SV_ModStart> 1 && ! VAR_207 -> reset <S2SV_ModEnd> ( VAR_195 ) <S2SV_ModStart> VAR_188 ) { TYPE_52 * const VAR_195 = & <S2SV_ModStart> [ VAR_188 ] ; VAR_207 -> METHOD_30 ( VAR_195 ) ; VAR_195 -> <S2SV_ModEnd> VAR_65 = ( <S2SV_ModStart> VAR_65 = ( TYPE_53 <S2SV_ModEnd> ) VAR_66 ; <S2SV_ModStart> ) VAR_66 ; VAR_195 -> VAR_201 = & VAR_198 -> VAR_208 [ VAR_188 ] ; VAR_195 -> VAR_143 = & VAR_198 -> VAR_209 [ VAR_188 ] ; } METHOD_31 <S2SV_ModEnd> ( VAR_171 -> <S2SV_ModStart> VAR_77 ) ; METHOD_31 <S2SV_ModEnd> ( VAR_171 -> <S2SV_ModStart> VAR_77 ) ; METHOD_32 ( VAR_198 , VAR_163 , VAR_164 , VAR_186 , VAR_27 , VAR_145 ) ; METHOD_17 ( VAR_145 [ 0 ] , VAR_186 , sizeof ( VAR_145 [ 0 ] [ 0 ] ) , VAR_106 ) ; { TYPE_31 VAR_127 = 0 ; while ( VAR_127 < VAR_186 ) { const TYPE_42 VAR_126 = VAR_145 [ 0 ] [ VAR_127 ] ; const TYPE_31 VAR_128 = METHOD_18 ( VAR_127 + VAR_179 , VAR_186 ) - 1 ; METHOD_19 ( VAR_145 [ 0 ] + VAR_127 , VAR_145 [ 0 ] + VAR_127 + 1 , ( VAR_128 - VAR_127 ) * sizeof ( VAR_145 [ 0 ] [ 0 ] ) ) ; VAR_145 [ 0 ] [ VAR_128 ] = VAR_126 ; VAR_127 = VAR_128 + 1 ; } } if ( ! VAR_171 -> VAR_210 ) { TYPE_31 TYPE_48 ; for ( TYPE_48 = 0 ; TYPE_48 < VAR_179 ; ++ TYPE_48 ) { TYPE_50 * const VAR_203 = ( TYPE_50 * ) VAR_198 -> VAR_199 [ TYPE_48 ] . VAR_201 ; METHOD_23 ( VAR_203 -> VAR_211 ) ; } } VAR_188 = 0 ; while ( VAR_188 < VAR_186 ) { TYPE_31 TYPE_48 ; for ( TYPE_48 = 0 ; TYPE_48 < VAR_179 && VAR_188 < VAR_186 ; ++ TYPE_48 ) { TYPE_52 * const VAR_195 = & VAR_198 -> VAR_199 [ TYPE_48 ] ; TYPE_50 * const VAR_203 = ( TYPE_50 * ) VAR_195 -> VAR_201 ; TYPE_41 * const VAR_157 = ( TYPE_41 * ) VAR_195 -> VAR_143 ; TYPE_42 * const VAR_184 = & VAR_145 [ 0 ] [ VAR_188 ] ; VAR_203 -> VAR_198 = VAR_198 ; VAR_203 -> VAR_175 = VAR_198 -> VAR_193 ; VAR_203 -> VAR_175 . VAR_194 = 0 ; VAR_203 -> VAR_175 . VAR_211 = VAR_171 -> VAR_210 ? 0 : & VAR_203 -> VAR_211 ; METHOD_23 ( VAR_203 -> VAR_176 ) ; METHOD_20 ( VAR_157 , VAR_171 , 0 , VAR_184 -> VAR_185 ) ; METHOD_20 ( & VAR_203 -> VAR_175 . VAR_157 , VAR_171 , 0 , VAR_184 -> VAR_185 ) ; METHOD_21 ( VAR_184 -> VAR_163 , VAR_164 , VAR_184 -> VAR_166 , & VAR_171 -> VAR_168 , & VAR_203 -> VAR_204 , VAR_198 -> VAR_212 , VAR_198 -> VAR_213 ) ; METHOD_33 ( VAR_171 , & VAR_203 -> VAR_175 , VAR_203 -> VAR_176 ) ; VAR_195 -> VAR_178 = 0 ; if ( TYPE_48 == VAR_179 - 1 || <S2SV_ModEnd> VAR_188 == VAR_186 <S2SV_ModStart> VAR_186 - 1 ) { VAR_207 -> METHOD_34 <S2SV_ModEnd> ( VAR_195 ) <S2SV_ModStart> } else { VAR_207 -> launch <S2SV_ModEnd> ( VAR_195 ) <S2SV_ModStart> TYPE_48 ) { TYPE_52 <S2SV_ModEnd> * const VAR_195 <S2SV_ModStart> VAR_194 |= ! VAR_207 -> METHOD_30 <S2SV_ModEnd> ( VAR_195 ) <S2SV_ModStart> ; VAR_206 = vpx_reader_find_end <S2SV_ModEnd> ( & VAR_203 <S2SV_ModStart> - 1 ; } if ( VAR_188 >= VAR_186 && ! VAR_171 -> VAR_210 ) { for ( TYPE_48 = 0 ; TYPE_48 < VAR_179 ; ++ TYPE_48 ) { TYPE_50 * const VAR_203 = ( TYPE_50 * ) VAR_198 -> VAR_199 [ TYPE_48 ] . VAR_201 ; METHOD_35 ( VAR_171 , & VAR_203 -> VAR_211 , 1 ) ; }
<S2SV_ModStart> VAR_187 = - <S2SV_ModEnd> VAR_34 ; if <S2SV_ModStart> - VAR_146 ; METHOD_26 ( & VAR_183 -> VAR_188 ) ; if ( VAR_183 -> VAR_31 && <S2SV_ModEnd> VAR_174 -> VAR_155 <S2SV_ModStart> ; } } METHOD_27 ( & VAR_183 -> VAR_188 ) ; if ( VAR_187 && ! METHOD_22 ( & VAR_174 -> VAR_175 ) ) { METHOD_28 ( & VAR_174 -> VAR_143 ) ; METHOD_24 ( VAR_174 ) ; }
<S2SV_ModStart> VAR_59 -> VAR_51 <S2SV_ModEnd> ; TYPE_6 VAR_61 <S2SV_ModStart> = VAR_31 ; METHOD_16 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ( VAR_61 = 0 ; VAR_61 < VAR_64 ; ++ VAR_61 <S2SV_ModEnd> ) { TYPE_6 <S2SV_ModStart> { TYPE_6 VAR_58 = vp9_compute_qdelta_by_rate ( & VAR_55 -> VAR_43 , VAR_59 -> VAR_18 , VAR_59 -> VAR_57 , VAR_65 [ VAR_61 ] , VAR_59 -> bit_depth ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ( VAR_59 -> VAR_57 != 0 ) && ( ( VAR_59 -> VAR_57 + VAR_58 ) == 0 ) ) { VAR_58 = - VAR_59 -> VAR_57 + 1 ; } if ( VAR_65 [ VAR_61 ] == 1.0 ) { <S2SV_ModEnd> continue ; } <S2SV_ModStart> continue ; } <S2SV_ModEnd> METHOD_10 ( VAR_51 <S2SV_ModStart> ( VAR_51 , VAR_61 <S2SV_ModEnd> , VAR_53 , <S2SV_ModStart> ( VAR_51 , VAR_61 <S2SV_ModEnd> , VAR_53 ) <S2SV_ModStart> VAR_53 ) ; <S2SV_ModEnd> } } }
<S2SV_ModStart> ; if ( VAR_55 < 0 || VAR_55 > VAR_59 ) return - VAR_60 ; if (
<S2SV_ModStart> ( TYPE_8 METHOD_101 METHOD_102 <S2SV_ModEnd> ( VAR_166 ,
<S2SV_ModStart> -> VAR_13 ) METHOD_1 ( VAR_4 , <S2SV_ModEnd> VAR_12 -> VAR_8 <S2SV_ModStart> VAR_10 : VAR_11 )
<S2SV_ModStart> && VAR_22 [ VAR_23 <S2SV_ModEnd> METHOD_9 ; VAR_25
<S2SV_ModStart> "corrupt<S2SV_blank>BSON" ) ; METHOD_80 ( "test59.bson" , VAR_103 , 9 , VAR_103 , "corrupt<S2SV_blank>BSON" ) ;
<S2SV_ModStart> = VAR_215 ; if ( VAR_79 . VAR_80 == 45 ) VAR_285 . VAR_217 = VAR_287 ; else <S2SV_ModStart> = VAR_215 ; if ( VAR_79 . VAR_80 == 62 ) VAR_285 . VAR_217 = VAR_287 ; else
<S2SV_ModStart> , * VAR_165 ; TYPE_11 VAR_304 ; VAR_304 = sizeof ( VAR_305 ) * 2 * 32 ; METHOD_7 ( VAR_302 -> VAR_306 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_307 ) ; METHOD_7 ( VAR_302 -> VAR_308 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_309 ) + METHOD_10 ( ) ; METHOD_7 ( VAR_302 -> VAR_310 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_311 ) ; METHOD_7 ( VAR_302 -> VAR_106 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_312 ) ; METHOD_7 ( VAR_302 -> VAR_60 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_313 ) ; METHOD_7 ( VAR_302 -> VAR_314 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_315 ) ; METHOD_7 ( VAR_302 -> VAR_277 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_3 ) ; METHOD_7 ( VAR_302 -> VAR_281 , 0 , VAR_304 ) ; VAR_304 = METHOD_11 ( sizeof ( VAR_41 ) , sizeof ( VAR_37 ) ) ; METHOD_7 ( VAR_302 -> VAR_316 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_317 ) ; METHOD_7 ( VAR_302 -> VAR_318 , 0 , VAR_304 ) ; VAR_304 = ( sizeof ( VAR_319 ) << 2 ) ; METHOD_7 ( VAR_302 -> VAR_320 , 0 , VAR_304 ) ; VAR_304 = sizeof ( VAR_309 ) + METHOD_10 ( ) ; METHOD_7 ( VAR_302 -> VAR_321 , 0 , VAR_304 )
<S2SV_ModStart> goto VAR_223 ; VAR_236 = - VAR_237 ; if ( METHOD_27 ( ! ( VAR_128 -> VAR_205 & VAR_238 ) ) ) goto VAR_223 ; <S2SV_ModStart> VAR_209 != VAR_209 ) ; METHOD_28 ( ! ( VAR_220 -> VAR_205 & VAR_238 )
<S2SV_ModStart> TYPE_11 VAR_53 = METHOD_24 ( <S2SV_ModStart> VAR_85 . VAR_56 ) <S2SV_ModStart> ; if ( METHOD_24 ( <S2SV_ModStart> 1 , 0 )
<S2SV_ModStart> ; if ( VAR_38 != VAR_45 && <S2SV_ModEnd> ! METHOD_17 (
<S2SV_ModStart> struct STRUCT_OR_UNION_0 * VAR_55 ) { struct STRUCT_OR_UNION_1 * VAR_51 = VAR_55 -> VAR_52 ; struct STRUCT_OR_UNION_2 * VAR_56 = VAR_51 -> VAR_57 ; METHOD_16 ( & VAR_51 -> VAR_58 ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x80 ; VAR_56 -> VAR_59 [ 2 ] = 0 ; if ( METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 , 3 , VAR_56 -> VAR_59 , 1 , 0 ) < 0 ) METHOD_11 ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x02 ; VAR_56 -> VAR_59 [ 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; METHOD_5 ( 300 ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 [ 1 ] = 0x83 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; VAR_56 -> VAR_59 <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 3 , <S2SV_ModStart> , 3 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; VAR_56 -> VAR_59 [ 0 ] = 0x51 <S2SV_ModEnd> ; if ( <S2SV_ModStart> METHOD_10 ( VAR_51 , VAR_56 -> VAR_59 , 1 , VAR_56 -> VAR_59 <S2SV_ModEnd> , 1 , <S2SV_ModStart> ) METHOD_11 ( <S2SV_ModEnd> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; <S2SV_ModStart> "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; mutex_unlock ( & VAR_51 -> VAR_58 ) ; VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> & VAR_51 -> <S2SV_ModEnd> VAR_53 ) ; <S2SV_ModStart> ; if ( VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> ( VAR_46 , VAR_55 <S2SV_ModEnd> -> VAR_48 [ <S2SV_ModStart> , & VAR_51 <S2SV_ModEnd> -> VAR_53 )
<S2SV_ModStart> TYPE_3 METHOD_0 ( TYPE_4 * VAR_10 , <S2SV_ModStart> ; do { if ( VAR_9 > ( VAR_11 / 10 ) || VAR_9 * 10 > ( VAR_11 - ( * * VAR_8 - '0' ) ) ) METHOD_3 ( VAR_10 , "integral<S2SV_blank>size<S2SV_blank>overflow" ) ;
<S2SV_ModStart> , VAR_70 -> VAR_40 <S2SV_ModEnd> , VAR_70 ->
<S2SV_ModStart> 0 ; else VAR_29 = <S2SV_ModEnd> - VAR_25 ; <S2SV_ModStart> - VAR_25 ; if ( ! VAR_29 )
<S2SV_ModStart> ) , & VAR_13 <S2SV_ModEnd> ) ; METHOD_3
<S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_84 , VAR_85 <S2SV_ModStart> , 1 , <S2SV_ModEnd> VAR_84 , VAR_85 <S2SV_ModStart> VAR_83 , 1 <S2SV_ModEnd> , VAR_84 ,
<S2SV_ModStart> ( VAR_73 , "%s" , VAR_74 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_78 , VAR_80 -> VAR_84 . VAR_85
<S2SV_ModStart> TYPE_7 METHOD_0 ( TYPE_5 * VAR_18 , <S2SV_ModStart> struct STRUCT_OR_UNION_2 VAR_25 <S2SV_ModEnd> ; TYPE_7 VAR_28 <S2SV_ModStart> VAR_12 ; } <S2SV_ModEnd> VAR_28 = METHOD_3 <S2SV_ModStart> = METHOD_3 ( VAR_18 ,
<S2SV_ModStart> TYPE_18 * VAR_285 ; TYPE_59 VAR_286 <S2SV_ModStart> VAR_200 , VAR_220 <S2SV_ModEnd> , VAR_208 , <S2SV_ModStart> ) ) { VAR_286 <S2SV_ModEnd> = METHOD_38 ( <S2SV_ModStart> , VAR_233 ) ; if ( VAR_286 < 0 ) break <S2SV_ModStart> unsigned TYPE_72 ) VAR_286 <S2SV_ModEnd> ; if ( <S2SV_ModStart> TYPE_72 ) ( VAR_286 <S2SV_ModEnd> >> 8 ) <S2SV_ModStart> VAR_233 ) ; if ( VAR_286 < 0 ) break ; <S2SV_ModStart> unsigned TYPE_72 ) VAR_286 ; } if ( METHOD_26 ( VAR_285 ) != VAR_280 ) { VAR_282 = ( unsigned TYPE_72 * ) METHOD_44 ( VAR_282 ) ; METHOD_36 ( VAR_205 , "MemoryAllocationFailed" ) <S2SV_ModEnd> ; } VAR_262 <S2SV_ModStart> VAR_267 = ( unsigned TYPE_59 <S2SV_ModEnd> ) ( *
<S2SV_ModStart> = METHOD_18 ( jas_uchar <S2SV_ModEnd> * , METHOD_19
<S2SV_ModStart> VAR_134 ) { if ( ! VAR_114 ) { <S2SV_ModStart> } } } }
<S2SV_ModStart> TYPE_4 METHOD_0 ( TYPE_5 <S2SV_ModEnd> * VAR_12 ) <S2SV_ModStart> TYPE_4 VAR_10 = METHOD_3 <S2SV_ModEnd> ( VAR_12 , <S2SV_ModStart> - VAR_11 + METHOD_4 <S2SV_ModEnd> ( VAR_12 )
<S2SV_ModStart> VAR_8 , const TYPE_4 <S2SV_ModEnd> * VAR_10 , <S2SV_ModStart> * VAR_10 , vpx_tree <S2SV_ModEnd> VAR_9 ) {
<S2SV_ModStart> * VAR_8 , TYPE_7 <S2SV_ModEnd> * VAR_10 ) <S2SV_ModStart> ( TYPE_6 ) METHOD_3 <S2SV_ModEnd> ( VAR_10 , <S2SV_ModStart> VAR_23 -> VAR_12 -> <S2SV_ModEnd> VAR_13 [ VAR_20 <S2SV_ModStart> ] ) ; TYPE_8 * VAR_18 = VAR_8 -> VAR_18 ; if ( VAR_18 ) ++ VAR_18 -> <S2SV_ModEnd> VAR_19 [ VAR_20
<S2SV_ModStart> ; } } return - 1 ;
<S2SV_ModStart> ( VAR_203 , "%s" , VAR_204 <S2SV_ModEnd> ) ) ;
<S2SV_ModStart> VAR_7 ) -> VAR_11 = 0 ; ( * VAR_7 ) ->
<S2SV_ModStart> ) ) ; METHOD_3 ( VAR_65 , VAR_72 -> VAR_72 -> VAR_72 ) ; VAR_52 = METHOD_9 ( VAR_62 -> VAR_37 -> VAR_38 , VAR_62 -> VAR_40 , METHOD_16 ( VAR_65 ) , & VAR_72 -> VAR_70 <S2SV_ModEnd> , & VAR_57 <S2SV_ModStart> if ( VAR_52 > <S2SV_ModEnd> 0 ) { <S2SV_ModStart> 0 ) { METHOD_15 ( VAR_62 -> VAR_63 , VAR_64 , "Lookup:<S2SV_blank>%s<S2SV_blank>=<S2SV_blank>%s" , METHOD_16 ( VAR_65 ) , VAR_72 -> VAR_70 ) ; } else if ( VAR_52 < 0 ) { <S2SV_ModStart> , VAR_64 , "Failed<S2SV_blank>to<S2SV_blank>lookup<S2SV_blank>key<S2SV_blank>%s:<S2SV_blank>%s" , METHOD_16 ( VAR_65 ) <S2SV_ModEnd> , VAR_57 ) <S2SV_ModStart> 1 ; } <S2SV_ModEnd> else if (
<S2SV_ModStart> ; if ( VAR_26 -> VAR_20 < sizeof ( struct STRUCT_OR_UNION_4 ) ) return 0 ; if ( <S2SV_ModStart> -> VAR_17 > <S2SV_ModEnd> VAR_26 -> VAR_20 <S2SV_ModStart> VAR_26 -> VAR_20 - VAR_18
<S2SV_ModStart> ] . VAR_290 ; if ( ~ VAR_207 < 16 ) METHOD_134 ( VAR_345 , "MemoryAllocationFailed" )
<S2SV_ModStart> ; METHOD_11 ( "<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'stabber@localhost\'>" <S2SV_ModEnd> "<received<S2SV_blank>xmlns=\'urn:xmpp:carbons:2\'>" "<forwarded<S2SV_blank>xmlns=\'urn:xmpp:forward:0\'>" "<message<S2SV_blank>id=\'prof_msg_7\'<S2SV_blank>xmlns=\'jabber:client\'<S2SV_blank>type=\'chat\'<S2SV_blank>lang=\'en\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost/mobile\'>"
<S2SV_ModStart> -> VAR_27 , VAR_24 -> VAR_20 <S2SV_ModEnd> ) ; METHOD_7
<S2SV_ModStart> VAR_24 = 0 <S2SV_ModEnd> ; TYPE_38 -> <S2SV_ModStart> = 0 ; TYPE_38 -> VAR_47 = 0 ;
<S2SV_ModStart> VAR_53 -> VAR_44 && VAR_53 -> VAR_44 -> VAR_45
<S2SV_ModStart> VAR_13 ) { TYPE_1 * VAR_13 ; <S2SV_ModStart> ( "[iso<S2SV_blank>file]<S2SV_blank>Missing<S2SV_blank>dref<S2SV_blank>box<S2SV_blank>in<S2SV_blank>dinf\\n" ) ) ; VAR_13 = METHOD_3 ( VAR_14 <S2SV_ModStart> TYPE_6 * ) VAR_13 ; METHOD_4 ( VAR_12 , VAR_13 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; VAR_173 [ METHOD_34 ( ( TYPE_13 ) VAR_320 , ( sizeof VAR_173 ) - 1 ) <S2SV_ModEnd> ] = '\\0'
<S2SV_ModStart> VAR_81 ) ; if ( VAR_59 > ( VAR_98 - 32 - 15 ) / 384 ) { METHOD_14 ( "b/28533562" ) ; METHOD_15 ( 0x534e4554 , "28533562" ) ; return ( VAR_89 ) ; }
<S2SV_ModStart> = 0 ; TYPE_5 VAR_23 = 0 ; <S2SV_ModStart> ( ! VAR_14 || ! VAR_16 || ! VAR_18 <S2SV_ModStart> VAR_20 ) ; <S2SV_ModEnd> VAR_17 = * <S2SV_ModStart> = * VAR_18 ; if ( VAR_17 < 0 ) METHOD_4 ( VAR_20 ) <S2SV_ModStart> , VAR_17 , & VAR_23 <S2SV_ModEnd> ) != VAR_19 <S2SV_ModStart> ) ; } if ( VAR_23 > sizeof ( struct STRUCT_OR_UNION_2 ) ) METHOD_4 ( VAR_20 ) ; * VAR_18 = VAR_23 ;
<S2SV_ModStart> VAR_27 ; } if ( ! <S2SV_ModStart> , VAR_30 ) ) return VAR_27
<S2SV_ModStart> { METHOD_4 ( VAR_12 <S2SV_ModEnd> , 0x40 | <S2SV_ModStart> ; METHOD_4 ( VAR_13 , VAR_14 | VAR_15 <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( METHOD_7 ( VAR_13 ) & VAR_16 <S2SV_ModEnd> ) != 0 <S2SV_ModStart> } METHOD_4 ( VAR_13 , VAR_14 <S2SV_ModEnd> ) ; METHOD_5 <S2SV_ModStart> ( METHOD_7 ( VAR_17 <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | METHOD_7 ( VAR_18 <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 , <S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 , <S2SV_ModStart> ) && ! METHOD_15 <S2SV_ModEnd> ( STRUCT_OR_UNION_13 ,
<S2SV_ModStart> <S2SV_null> <S2SV_null> static TYPE_36 <S2SV_ModEnd> METHOD_0 ( TYPE_1 <S2SV_ModStart> ; TYPE_17 VAR_27 ; if ( ! VAR_246 || VAR_39 || ( VAR_43 == 0 ) ) return VAR_263 <S2SV_ModStart> -> VAR_32 ; if ( VAR_246 -> VAR_247 -> VAR_264 < VAR_262 * VAR_43 ) return VAR_263 ; if ( VAR_262 < VAR_43 * 2 ) return VAR_263 ; <S2SV_ModStart> ) ; } return VAR_265 ;
<S2SV_ModStart> STRUCT_OR_UNION_58 * STRUCT_OR_UNION_58 , TYPE_8 VAR_240 <S2SV_ModStart> VAR_175 , STRUCT_OR_UNION_58 , VAR_240
<S2SV_ModStart> VAR_4 ) { <S2SV_ModEnd> METHOD_2 ( VAR_2 <S2SV_ModStart> , VAR_4 , current_cred ( ) <S2SV_ModEnd> ) ; }
<S2SV_ModStart> VAR_7 ) -> VAR_11 = 0 ; ( * VAR_7 ) ->
<S2SV_ModStart> -> VAR_78 ) , VAR_103 <S2SV_ModStart> -> VAR_63 ) , VAR_104
<S2SV_ModStart> . VAR_29 = TYPE_26 ? <S2SV_ModStart> ) & VAR_45 : VAR_43 <S2SV_ModStart> . VAR_47 = 0 <S2SV_ModEnd> ; if (
<S2SV_ModStart> VAR_893 ) ; VAR_894 -> VAR_895 = ( VAR_892 -> VAR_895 == VAR_889 ? VAR_890 -> VAR_895 : VAR_892 -> VAR_895 ) ;
<S2SV_ModStart> ( STRUCT_OR_UNION_21 && VAR_143 -> VAR_147 && <S2SV_ModStart> -> VAR_145 , VAR_143 <S2SV_ModEnd> -> VAR_147 , <S2SV_ModStart> -> VAR_144 ; if ( VAR_143 -> VAR_147 ) <S2SV_ModStart> -> VAR_145 , VAR_143 <S2SV_ModEnd> -> VAR_147 ,
<S2SV_ModStart> ( VAR_118 ) <S2SV_ModEnd> ; for (
<S2SV_ModStart> , VAR_102 , VAR_376 ; TYPE_104 VAR_721 , VAR_373 <S2SV_ModEnd> , VAR_666 ; <S2SV_ModStart> ; if ( ( VAR_373 < 0 ) || ( <S2SV_ModStart> ) > VAR_376 ) <S2SV_ModStart> + VAR_369 ; if ( ( VAR_373 < 0 ) || ( VAR_373 + ( ( TYPE_77 ) VAR_399 * VAR_460 ) > VAR_376 ) ) { if ( VAR_680 != 0 ) VAR_682 = ( unsigned TYPE_110 * ) METHOD_112 ( VAR_682 ) ; VAR_684 = METHOD_113 ( VAR_684 ) ; METHOD_87 ( VAR_688 , "UnableToReadImageData" ) ; } <S2SV_ModStart> + VAR_373 ; <S2SV_ModEnd> for ( VAR_555
<S2SV_ModStart> ( VAR_106 = <S2SV_ModEnd> METHOD_15 ( VAR_105
<S2SV_ModStart> { VAR_32 = METHOD_6 <S2SV_ModEnd> ( VAR_32 ,
<S2SV_ModStart> * VAR_39 ; METHOD_1 ( ! METHOD_6 ( VAR_27 ) || VAR_27 -> VAR_28 == VAR_30 ) ; <S2SV_ModStart> VAR_35 ) { METHOD_1 ( METHOD_7 ( VAR_39 ) <= METHOD_7 ( VAR_27 ) ) ;
<S2SV_ModStart> VAR_31 ) ; if ( ! VAR_48 -> VAR_49 ) { return VAR_52 ; }
<S2SV_ModStart> VAR_39 ) ; VAR_38 -> VAR_39 = VAR_23 ;
